uint64_t fpfs_FinishVideoSync(uint64_t a1)
{
  CFStringRef v2;
  const void **DerivedStorage;
  _OWORD *v4;
  void *v5;
  CMTime *CandidateSyncTrackOfDiscontinuityDomainAndType;
  uint64_t v7;
  CMTime *v8;
  long long v9;
  uint64_t v10;
  CMTime *v11;
  uint64_t v12;
  uint64_t AllocatorForMedia;
  uint64_t FigBaseObject;
  uint64_t v15;
  uint64_t v16;
  uint64_t RenderingTrackofType;
  opaqueCMSampleBuffer *v18;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t started;
  BOOL v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, __CFString *, void);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, __CFString *, void);
  void *v33;
  void *v34;
  uint64_t v35;
  NSObject *v36;
  unsigned int value;
  unsigned int v38;
  const void *v39;
  const char *v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int IsEmpty;
  CMTime *v46;
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  uint64_t v49;
  NSObject *v50;
  unsigned int v51;
  unsigned int v52;
  const void *v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  void *i;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  const void *v61;
  int DefaultLocalCenter;
  int v63;
  NSObject *v64;
  unsigned int v65;
  unsigned int v66;
  const void *v67;
  const char *v68;
  const char *v69;
  Float64 v70;
  Float64 v71;
  Float64 v72;
  CFNumberRef v73;
  uint64_t v74;
  CFNumberRef v75;
  uint64_t v76;
  opaqueCMSampleBuffer *v77;
  opaqueCMSampleBuffer *v78;
  uint64_t v79;
  const void *v80;
  NSObject *v81;
  unsigned int v82;
  unsigned int v83;
  uint64_t v84;
  const char *v85;
  const char *v86;
  uint64_t v87;
  Float64 v88;
  uint64_t v89;
  uint64_t v90;
  const char *v92;
  uint64_t v93;
  Float64 Seconds;
  Float64 v95;
  _OWORD *v96;
  unsigned int (*v97)(uint64_t, __CFString *, uint64_t, CFDictionaryRef *);
  long long v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void (*v104)(uint64_t, __CFString *, uint64_t, os_log_type_t *);
  long long v105;
  CFAllocatorRef v106;
  const CMBufferCallbacks *CallbacksForUnsortedSampleBuffers;
  uint64_t v108;
  opaqueCMSampleBuffer *Head;
  opaqueCMSampleBuffer *v110;
  void *v111;
  int32_t v112;
  int32_t v113;
  int32_t v114;
  CMBufferRef v115;
  const void *v116;
  uint64_t TrackOfType;
  const char *v118;
  CMTimeEpoch v119;
  long long v120;
  const char *v121;
  BOOL v122;
  _OWORD *v123;
  uint64_t v124;
  void *v125;
  uint64_t v126;
  const void **v127;
  CMTime v128;
  CMTime v129;
  CMTime v130;
  CMTime v131;
  CFDictionaryRef dictionaryRepresentation;
  CMTime rhs;
  os_log_type_t type[8];
  CMTime v135;
  int valuePtr;
  CFTypeRef cf;
  CMTime v138;
  CMTime v139;
  CMTime v140;
  CMTime v141;
  CMTime time2;
  const char *v143;
  __int16 v144;
  uint64_t v145;
  __int16 v146;
  const char *v147;
  __int16 v148;
  unsigned char v149[28];
  CMTime time1;
  CMTimeValue v151;
  CMTimeScale timescale;
  uint64_t v153;

  v153 = *MEMORY[0x1E4F143B8];
  v2 = *(const __CFString **)a1;
  DerivedStorage = (const void **)CMBaseObjectGetDerivedStorage();
  v124 = CMBaseObjectGetDerivedStorage();
  memset(&v141, 0, sizeof(v141));
  fpfs_GetTime((uint64_t)DerivedStorage, (uint64_t)&v141);
  memset(&v140, 0, sizeof(v140));
  memset(&v139, 0, sizeof(v139));
  memset(&v138, 0, sizeof(v138));
  timescale = 0;
  v151 = 0;
  cf = 0;
  valuePtr = 7;
  v120 = *MEMORY[0x1E4F1F9F8];
  *(_OWORD *)&v135.value = *MEMORY[0x1E4F1F9F8];
  v119 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  v135.epoch = v119;
  fpfs_ReleaseAndClearDispatchSource((dispatch_object_t *)(a1 + 264));
  *(CMTime *)(a1 + 192) = v141;
  if (*(const void **)(a1 + 48) == DerivedStorage[2 * *(unsigned __int8 *)(a1 + 180) + 126])
  {
    LOBYTE(time1.value) = 0;
    started = fpfs_CompleteTrialSwitch((const __CFArray *)v2, a1, &time1);
    if (LOBYTE(time1.value)) {
      return started;
    }
  }
  v4 = (_OWORD *)(a1 + 192);
  v5 = (void *)MEMORY[0x1E4F1CFD0];
  v126 = (uint64_t)v2;
  v127 = DerivedStorage;
  v123 = (_OWORD *)(a1 + 192);
  if (*(_DWORD *)(a1 + 152) == 1
    && (CandidateSyncTrackOfDiscontinuityDomainAndType = (CMTime *)fpfs_FirstCandidateSyncTrackOfDiscontinuityDomainAndType((uint64_t)v2, a1)) != 0)
  {
    v7 = (uint64_t)CandidateSyncTrackOfDiscontinuityDomainAndType;
    v8 = CandidateSyncTrackOfDiscontinuityDomainAndType + 8;
    time1 = CandidateSyncTrackOfDiscontinuityDomainAndType[8];
    *(_OWORD *)&time2.value = *v4;
    time2.epoch = *(void *)(a1 + 208);
    if (CMTimeCompare(&time1, &time2) >= 1)
    {
      v9 = *(_OWORD *)&v8->value;
      *(void *)(a1 + 208) = v8->epoch;
      *v4 = v9;
    }
    if (!*(unsigned char *)(v7 + 182)) {
      fpfs_StopFeedingTrack(v7, 0, 1);
    }
    v10 = *(void *)(v7 + 96);
    if (v10)
    {
      *(_OWORD *)&time1.value = v120;
      time1.epoch = v119;
      v11 = (CMTime *)(a1 + 192);
      *(_OWORD *)&time2.value = *v123;
      time2.epoch = *(void *)(a1 + 208);
      rhs = *(CMTime *)(a1 + 272);
      *(void *)type = 0;
      if (CMTimeCompare(&time2, &rhs) < 0)
      {
        *v123 = *(_OWORD *)(a1 + 272);
        *(void *)(a1 + 208) = *(void *)(a1 + 288);
      }
      FPSupport_getVideoDecodeWaterLevels(&v140, &v139, 1);
      time2 = v141;
      rhs = v139;
      CMTimeAdd(&time1, &time2, &rhs);
      *(_OWORD *)&time2.value = *v123;
      time2.epoch = *(void *)(a1 + 208);
      rhs = time1;
      if (CMTimeCompare(&time2, &rhs) < 0)
      {
        *(_OWORD *)&time2.value = *v123;
        time2.epoch = *(void *)(a1 + 208);
        rhs = *(CMTime *)(v7 + 216);
        if (CMTimeCompare(&time2, &rhs) < 0)
        {
          dictionaryRepresentation = 0;
          v12 = *(void *)(v10 + 32);
          AllocatorForMedia = FigGetAllocatorForMedia();
          FigBaseObject = FigRenderPipelineGetFigBaseObject(v12);
          v15 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v15) {
            v16 = v15;
          }
          else {
            v16 = 0;
          }
          v96 = (_OWORD *)(v7 + 216);
          v97 = *(unsigned int (**)(uint64_t, __CFString *, uint64_t, CFDictionaryRef *))(v16 + 48);
          if (v97)
          {
            if (!v97(FigBaseObject, @"EndPresentationTimeForDecodedSamples", AllocatorForMedia, &dictionaryRepresentation))
            {
              memset(&time2, 0, sizeof(time2));
              CMTimeMakeFromDictionary(&time2, dictionaryRepresentation);
              CFRelease(dictionaryRepresentation);
              rhs = time1;
              v131 = time2;
              if (CMTimeCompare(&rhs, &v131) < 0) {
                time1 = time2;
              }
            }
          }
          *(_OWORD *)&time2.value = *v96;
          time2.epoch = *(void *)(v7 + 232);
          rhs = time1;
          if (CMTimeCompare(&time2, &rhs) >= 1)
          {
            *v96 = *(_OWORD *)&time1.value;
            *(void *)(v7 + 232) = time1.epoch;
          }
          v98 = *v96;
          v11 = (CMTime *)(a1 + 192);
          *(void *)(a1 + 208) = *(void *)(v7 + 232);
          *v123 = v98;
        }
      }
      v138 = *v11;
      v99 = *(void *)(v10 + 32);
      v100 = FigGetAllocatorForMedia();
      v101 = FigRenderPipelineGetFigBaseObject(v99);
      v102 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v102) {
        v103 = v102;
      }
      else {
        v103 = 0;
      }
      v104 = *(void (**)(uint64_t, __CFString *, uint64_t, os_log_type_t *))(v103 + 48);
      if (v104) {
        v104(v101, @"IsTimebaseStarter", v100, type);
      }
      v21 = *(void *)type == *v5;
      if (*(void *)type) {
        CFRelease(*(CFTypeRef *)type);
      }
    }
    else
    {
      v21 = 0;
    }
    v105 = *v123;
    *(void *)(v7 + 232) = *(void *)(a1 + 208);
    *(_OWORD *)(v7 + 216) = v105;
    CMTimeMake(&v130, 100, 1000);
    time2 = *(CMTime *)(v7 + 216);
    CMTimeAdd(&time1, &time2, &v130);
    *(CMTime *)(v7 + 216) = time1;
    time1 = *v8;
    *(_OWORD *)&time2.value = *v123;
    time2.epoch = *(void *)(a1 + 208);
    if (CMTimeCompare(&time1, &time2))
    {
      v22 = (void *)v7;
      if (v10)
      {
LABEL_175:
        v122 = v21;
        while (1)
        {
          *(void *)type = 0;
          v106 = (const __CFAllocator *)FigGetAllocatorForMedia();
          CallbacksForUnsortedSampleBuffers = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
          if (CMBufferQueueCreate(v106, 0, CallbacksForUnsortedSampleBuffers, (CMBufferQueueRef *)type)) {
            goto LABEL_208;
          }
          v108 = (uint64_t)v22;
          MEMORY[0x199709540](*(void *)(v22[12] + 40), fpfs_StealBuffer, *(void *)type);
          Head = (opaqueCMSampleBuffer *)CMBufferQueueGetHead(*(CMBufferQueueRef *)type);
          if (!Head) {
            goto LABEL_204;
          }
          v110 = Head;
          v111 = 0;
          do
          {
            if (fpfs_IsMarkerOnly(v110)) {
              goto LABEL_193;
            }
            memset(&time1, 0, sizeof(time1));
            CMSampleBufferGetOutputPresentationTimeStamp(&time1, v110);
            memset(&time2, 0, sizeof(time2));
            CMSampleBufferGetOutputDecodeTimeStamp(&time2, v110);
            rhs = time2;
            v131 = v138;
            v112 = CMTimeCompare(&rhs, &v131);
            rhs = time1;
            v131 = v138;
            v113 = CMTimeCompare(&rhs, &v131);
            v114 = v113;
            if (v112 < 0 && (v113 & 0x80000000) == 0)
            {
              if (fpfs_IsVideoSync(v110)) {
                break;
              }
              if (!fpfs_IsVideoDependedOnByOthers(v110)) {
                goto LABEL_186;
              }
              fpfs_DoNotDisplay(v110);
            }
            if (v112 < 0) {
              goto LABEL_190;
            }
LABEL_186:
            if (v114 < 0)
            {
LABEL_190:
              if (v111)
              {
                CMBufferQueueEnqueue(*(CMBufferQueueRef *)(v10 + 40), v111);
                CFRelease(v111);
              }
              v111 = (void *)CFRetain(v110);
              goto LABEL_193;
            }
            rhs = time2;
            v131 = v138;
            if ((CMTimeCompare(&rhs, &v131) & 0x80000000) == 0) {
              break;
            }
LABEL_193:
            v115 = CMBufferQueueDequeueAndRetain(*(CMBufferQueueRef *)type);
            if (v115) {
              CFRelease(v115);
            }
            v110 = (opaqueCMSampleBuffer *)CMBufferQueueGetHead(*(CMBufferQueueRef *)type);
          }
          while (v110);
          if (v111)
          {
            if (*(void *)(a1 + 96))
            {
              v116 = *(const void **)(v10 + 64);
              if (v116)
              {
                CFRelease(v116);
                *(void *)(v10 + 64) = 0;
              }
              if (v10 == *(void *)(v108 + 96)) {
                fpfs_RenderWithEndSignal(v108, v111, *(void *)(*(void *)(a1 + 96) + 32));
              }
              else {
                fpfs_RenderBuffer(v108, (opaqueCMSampleBuffer *)v111);
              }
            }
            CFRelease(v111);
          }
LABEL_204:
          if (CMBufferQueueGetBufferCount(*(CMBufferQueueRef *)type) < 1)
          {
            v22 = (void *)v108;
            if (*(void *)type) {
              CFRelease(*(CFTypeRef *)type);
            }
          }
          else
          {
            fpfs_SendBufferQueueToChomper(v124, *(uint64_t *)type);
            v22 = (void *)v108;
          }
LABEL_208:
          v10 = *(void *)(v10 + 88);
          if (!v10)
          {
            v2 = (const __CFString *)v126;
            v5 = (void *)MEMORY[0x1E4F1CFD0];
            v21 = v122;
            goto LABEL_23;
          }
        }
      }
      goto LABEL_213;
    }
    v2 = (const __CFString *)v126;
    TrackOfType = fpfs_LastTrackOfType(v126, 1986618469, v7);
    if (TrackOfType)
    {
      v22 = (void *)TrackOfType;
      if (*(_DWORD *)(TrackOfType + 152) == 6)
      {
        v138 = *(CMTime *)(TrackOfType + 216);
        v10 = *(void *)(TrackOfType + 96);
        if (v10) {
          goto LABEL_175;
        }
LABEL_213:
        v2 = (const __CFString *)v126;
        goto LABEL_23;
      }
    }
    fpfs_DeleteTrack(v126, v7);
    v22 = 0;
  }
  else
  {
    RenderingTrackofType = fpfs_LastRenderingTrackofType((uint64_t)v2, 1986618469, a1);
    if (RenderingTrackofType)
    {
      if (*(void *)(RenderingTrackofType + 64) == *(void *)(a1 + 64))
      {
        v18 = (opaqueCMSampleBuffer *)CMBufferQueueGetHead(*(CMBufferQueueRef *)(a1 + 72));
        memset(&rhs, 0, sizeof(rhs));
        CMSampleBufferGetOutputPresentationTimeStamp(&rhs, v18);
        if (dword_1E9350BB0)
        {
          LODWORD(v131.value) = 0;
          type[0] = OS_LOG_TYPE_DEFAULT;
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type[0]);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          v5 = (void *)MEMORY[0x1E4F1CFD0];
        }
      }
    }
    v22 = 0;
    v21 = 0;
  }
LABEL_23:
  started = fpfs_EnsureRenderChainForTrack(*DerivedStorage, (const __CFString **)a1, 1);
  if (started) {
    return started;
  }
  v23 = fpfs_LastRenderingTrackofType((uint64_t)v2, 1986618469, a1);
  if (v23)
  {
    v24 = *(void *)(a1 + 96);
    if (*(void *)(v23 + 96) != v24)
    {
      v25 = FigRenderPipelineGetFigBaseObject(*(void *)(v24 + 32));
      v26 = *(void *)(CMBaseObjectGetVTable() + 8);
      v27 = v26 ? v26 : 0;
      v28 = *(void (**)(uint64_t, __CFString *, void))(v27 + 56);
      if (v28) {
        v28(v25, @"Suspended", *v5);
      }
    }
  }
  fpfs_setPropertyOnPrimaryAndAuxRenderPipelines(*(void *)(a1 + 96), @"VideoDecoderIsSecondary", *MEMORY[0x1E4F1CFC8]);
  if (v21)
  {
    v29 = FigRenderPipelineGetFigBaseObject(*(void *)(*(void *)(a1 + 96) + 32));
    v30 = *(void *)(CMBaseObjectGetVTable() + 8);
    v31 = v30 ? v30 : 0;
    v32 = *(void (**)(uint64_t, __CFString *, void))(v31 + 56);
    if (v32) {
      v32(v29, @"IsTimebaseStarter", *v5);
    }
  }
  v125 = v22;
  if (v22)
  {
    v33 = (void *)v22[1];
    if (v33 != (void *)a1)
    {
      while (v33)
      {
        v34 = (void *)v33[1];
        if (*((_DWORD *)v33 + 8) == 1986618469)
        {
          if (v34) {
            v35 = v34[2];
          }
          else {
            v35 = -1;
          }
          if (dword_1E9350BB0)
          {
            LODWORD(rhs.value) = 0;
            LOBYTE(v131.value) = 0;
            v36 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            value = rhs.value;
            if (os_log_type_enabled(v36, v131.value)) {
              v38 = value;
            }
            else {
              v38 = value & 0xFFFFFFFE;
            }
            if (v38)
            {
              v39 = *v127;
              if (*v127) {
                v40 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
              }
              else {
                v40 = "";
              }
              if (v126) {
                v41 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
              }
              else {
                v41 = "";
              }
              v42 = v33[2];
              v43 = *(void *)(a1 + 16);
              LODWORD(time2.value) = 136316674;
              *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpfs_FinishVideoSync";
              LOWORD(time2.flags) = 2048;
              *(void *)((char *)&time2.flags + 2) = v39;
              HIWORD(time2.epoch) = 2082;
              v143 = v40;
              v144 = 2048;
              v145 = v126;
              v146 = 2082;
              v147 = v41;
              v148 = 1024;
              *(_DWORD *)v149 = v42;
              *(_WORD *)&v149[4] = 1024;
              *(_DWORD *)&v149[6] = v43;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            v22 = v125;
          }
          v44 = v33[12];
          if (v44 && v44 != v22[12])
          {
            if (*(void *)(v44 + 64))
            {
              CFRelease(*(CFTypeRef *)(v44 + 64));
              v44 = v33[12];
              *(void *)(v44 + 64) = 0;
            }
            if (v44 == *(void *)(a1 + 96)) {
              fpfs_FlushPrimaryAndAuxRenderChains(v44, 1);
            }
          }
          fpfs_DeleteTrack(*v33, v33);
          if ((v35 & 0x8000000000000000) == 0)
          {
            v34 = v127[131];
            if (v34)
            {
              while (v34[2] != v35)
              {
                v34 = (void *)v34[1];
                if (!v34) {
                  goto LABEL_68;
                }
              }
            }
            else
            {
LABEL_68:
              v34 = (void *)v22[1];
            }
          }
        }
        v33 = v34;
        if (v34 == (void *)a1) {
          goto LABEL_70;
        }
      }
      return FigSignalErrorAt();
    }
  }
LABEL_70:
  IsEmpty = CMBufferQueueIsEmpty(*(CMBufferQueueRef *)(a1 + 72));
  v46 = (CMTime *)MEMORY[0x1E4F1FA08];
  if (IsEmpty)
  {
    v151 = *MEMORY[0x1E4F1FA08];
    flags = *(_DWORD *)(MEMORY[0x1E4F1FA08] + 12);
    timescale = *(_DWORD *)(MEMORY[0x1E4F1FA08] + 8);
    epoch = *(void *)(MEMORY[0x1E4F1FA08] + 16);
  }
  else
  {
    CMBufferQueueGetFirstPresentationTimeStamp(&time1, *(CMBufferQueueRef *)(a1 + 72));
    v151 = time1.value;
    flags = time1.flags;
    timescale = time1.timescale;
    epoch = time1.epoch;
  }
  if (!*(unsigned char *)(a1 + 183))
  {
    v135 = *(CMTime *)(a1 + 272);
    v49 = v126;
LABEL_84:
    CMBufferQueueIsEmpty(*(CMBufferQueueRef *)(a1 + 72));
    goto LABEL_85;
  }
  v135 = *v46;
  v49 = v126;
  if ((flags & 0x1D) != 1) {
    goto LABEL_84;
  }
  time1 = *(CMTime *)(a1 + 272);
  time2.value = v151;
  time2.timescale = timescale;
  time2.flags = flags;
  time2.epoch = epoch;
  if (CMTimeCompare(&time1, &time2) < 1) {
    goto LABEL_84;
  }
  if (dword_1E9350BB0)
  {
    LODWORD(rhs.value) = 0;
    LOBYTE(v131.value) = 0;
    v50 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v51 = rhs.value;
    if (os_log_type_enabled(v50, v131.value)) {
      v52 = v51;
    }
    else {
      v52 = v51 & 0xFFFFFFFE;
    }
    if (v52)
    {
      v53 = *v127;
      if (*v127) {
        v54 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
      }
      else {
        v54 = "";
      }
      v121 = v54;
      if (v126) {
        v92 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
      }
      else {
        v92 = "";
      }
      v118 = v92;
      v93 = *(void *)(a1 + 16);
      time1.value = v151;
      time1.timescale = timescale;
      time1.flags = flags;
      time1.epoch = epoch;
      Seconds = CMTimeGetSeconds(&time1);
      time1 = *(CMTime *)(a1 + 272);
      v95 = CMTimeGetSeconds(&time1);
      LODWORD(time2.value) = 136316930;
      *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpfs_FinishVideoSync";
      LOWORD(time2.flags) = 2048;
      *(void *)((char *)&time2.flags + 2) = v53;
      HIWORD(time2.epoch) = 2082;
      v143 = v121;
      v144 = 2048;
      v145 = v126;
      v146 = 2082;
      v147 = v118;
      v148 = 1024;
      *(_DWORD *)v149 = v93;
      *(_WORD *)&v149[4] = 2048;
      *(Float64 *)&v149[6] = Seconds;
      *(_WORD *)&v149[14] = 2048;
      *(Float64 *)&v149[16] = v95;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v22 = v125;
    v49 = v126;
  }
  fpfs_FlushPrimaryAndAuxRenderChains(*(void *)(a1 + 96), 0);
  *(unsigned char *)(a1 + 185) = 1;
LABEL_85:
  v55 = (uint64_t)v127;
  if (v22) {
    v56 = v22[2];
  }
  else {
    v56 = -1;
  }
  CMTimeMake(&v129, 1, 2);
  *(_OWORD *)&time1.value = *v123;
  time1.epoch = *(void *)(a1 + 208);
  time2 = v135;
  started = fpfs_StartTrackPlaying((uint64_t)v127, a1, &time1, &time2, &v129);
  if (started) {
    return started;
  }
  if (v22)
  {
    for (i = v127[131]; i; i = (void *)i[1])
    {
      if (i[2] == v56) {
        break;
      }
    }
  }
  else
  {
    i = 0;
  }
  v58 = fpfs_LastRenderingTrackofType(v49, 1986618469, a1);
  if (v58)
  {
    v59 = v58;
    v60 = *(void *)(v58 + 96);
    if (v60)
    {
      if (CMBufferQueueGetBufferCount(*(CMBufferQueueRef *)(v60 + 40)) <= 0)
      {
        FigRetainProxyRetain();
        v61 = *(const void **)(*(void *)(v59 + 96) + 32);
        if (v61) {
          CFRetain(v61);
        }
        DefaultLocalCenter = CMNotificationCenterGetDefaultLocalCenter();
        fpfsi_deferredMarkerBufferConsumed(DefaultLocalCenter, (uint64_t)v127[2], v63, *(const void **)(*(void *)(v59 + 96) + 32), *(CFDictionaryRef *)(*(void *)(v59 + 96) + 64));
      }
    }
  }
  if (dword_1E9350BB0)
  {
    LODWORD(rhs.value) = 0;
    LOBYTE(v131.value) = 0;
    v64 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v65 = rhs.value;
    if (os_log_type_enabled(v64, v131.value)) {
      v66 = v65;
    }
    else {
      v66 = v65 & 0xFFFFFFFE;
    }
    if (v66)
    {
      v67 = *v127;
      if (*v127) {
        v68 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
      }
      else {
        v68 = "";
      }
      if (v126) {
        v69 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
      }
      else {
        v69 = "";
      }
      fpfs_GetTime((uint64_t)v127, (uint64_t)&v128);
      v70 = CMTimeGetSeconds(&v128);
      *(_OWORD *)&time1.value = *v123;
      time1.epoch = *(void *)(a1 + 208);
      v71 = CMTimeGetSeconds(&time1);
      time1 = *(CMTime *)(a1 + 272);
      v72 = CMTimeGetSeconds(&time1);
      LODWORD(time2.value) = 136316930;
      *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpfs_FinishVideoSync";
      LOWORD(time2.flags) = 2048;
      *(void *)((char *)&time2.flags + 2) = v67;
      HIWORD(time2.epoch) = 2082;
      v143 = v68;
      v144 = 2048;
      v145 = v126;
      v146 = 2082;
      v147 = v69;
      v55 = (uint64_t)v127;
      v148 = 2048;
      *(Float64 *)v149 = v70;
      *(_WORD *)&v149[8] = 2048;
      *(Float64 *)&v149[10] = v71;
      *(_WORD *)&v149[18] = 2048;
      *(Float64 *)&v149[20] = v72;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v73 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, &valuePtr);
  if (v73)
  {
    v75 = v73;
    MEMORY[0x19970ED80](v73, v74);
    FigGetAllocatorForMedia();
    v76 = FigThreadCopyProperty();
    MEMORY[0x19970ED80](v76);
    FigThreadSetProperty();
    CFRelease(v75);
  }
  v77 = (opaqueCMSampleBuffer *)CMBufferQueueDequeueAndRetain(*(CMBufferQueueRef *)(a1 + 72));
  if (v77)
  {
    v78 = v77;
    do
    {
      v79 = fpfs_RenderBuffer(a1, v78);
      CFRelease(v78);
      v78 = (opaqueCMSampleBuffer *)CMBufferQueueDequeueAndRetain(*(CMBufferQueueRef *)(a1 + 72));
    }
    while (v78);
  }
  else
  {
    v79 = 0;
  }
  v80 = (const void *)v126;
  if (*(unsigned char *)(a1 + 182) && !*(void *)(a1 + 112)) {
    fpfs_StopFeedingTrack(a1, 0, 1);
  }
  if (i)
  {
    if (i[14])
    {
      *(_OWORD *)&rhs.value = v120;
      rhs.epoch = v119;
      fpfs_scheduleForwardEndTimeForTrack(v55, (uint64_t)i, (uint64_t)&rhs);
      if (dword_1E9350BB0)
      {
        LODWORD(v131.value) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        v81 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v82 = v131.value;
        if (os_log_type_enabled(v81, type[0])) {
          v83 = v82;
        }
        else {
          v83 = v82 & 0xFFFFFFFE;
        }
        if (v83)
        {
          v84 = *(void *)v55;
          if (*(void *)v55) {
            v85 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
          }
          else {
            v85 = "";
          }
          if (v126) {
            v86 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
          }
          else {
            v86 = "";
          }
          v87 = i[2];
          time1 = rhs;
          v88 = CMTimeGetSeconds(&time1);
          LODWORD(time2.value) = 136316674;
          *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpfs_FinishVideoSync";
          LOWORD(time2.flags) = 2048;
          *(void *)((char *)&time2.flags + 2) = v84;
          HIWORD(time2.epoch) = 2082;
          v143 = v85;
          v144 = 2048;
          v145 = v126;
          v146 = 2082;
          v147 = v86;
          v148 = 1024;
          *(_DWORD *)v149 = v87;
          *(_WORD *)&v149[4] = 2048;
          *(Float64 *)&v149[6] = v88;
          _os_log_send_and_compose_impl();
          v55 = (uint64_t)v127;
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        v80 = (const void *)v126;
      }
    }
    else
    {
      fpfs_StopFeedingTrack((uint64_t)i, 0, 1);
    }
  }
  fpfs_UpdateDimensions(v80, 1);
  if (cf)
  {
    MEMORY[0x19970ED80](v89, v90);
    FigThreadSetProperty();
    if (cf) {
      CFRelease(cf);
    }
  }
  if (*(unsigned char *)(a1 + 184) && (*(unsigned char *)(v55 + 1532) & 1) != 0)
  {
    time1 = *(CMTime *)(v55 + 1520);
    *(_OWORD *)(v55 + 1520) = v120;
    *(void *)(v55 + 1536) = v119;
    return fpfs_StepIFrame(a1, (long long *)&time1.value);
  }
  return v79;
}

uint64_t fpfs_TransitionFromItemToItem(uint64_t a1, const void *a2)
{
  CMBaseObjectGetDerivedStorage();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1E9350BB0)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(unsigned char *)(DerivedStorage + 2448)) {
    return fpfs_CommitToGaplessTransition(a1, a2);
  }
  else {
    return fpfs_ResolveAllWaitingTracks((const __CFArray *)a2);
  }
}

void fpfsi_MakeNextItemReadyForInspectionIfItemEndedOrBeyondFwdEnd(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = CMBaseObjectGetDerivedStorage();
  CFArrayRef Next = fpfs_getNext(v3, a1);
  uint64_t v5 = CMBaseObjectGetDerivedStorage();
  CFTypeRef v31 = 0;
  CFTypeRef cf = 0;
  if (!Next) {
    return;
  }
  uint64_t v6 = v5;
  if (!fpfsi_PumpHasEndedOrBufferedBeyondFwdEnd((uint64_t)a1)) {
    return;
  }
  char v30 = 0;
  if (!FigAssetDownloadCoordinatorCopyDestinationURLForAsset(*(void *)(DerivedStorage + 32), &cf)
    && !FigAssetDownloadCoordinatorCopyDestinationURLForAsset(*(void *)(v6 + 32), &v31))
  {
    if (cf && FigCFEqual()) {
      fpfsi_InvalidatePumpForItem(a1);
    }
    if (!fpfsi_MakeReadyForInspection((uint64_t)Next, 0, &v30) && v30)
    {
      fpfsi_NowReadyForInspection(Next);
      fpfs_PerformInitialResolveOfAllWaitingTracks(Next);
    }
    uint64_t v7 = CMBaseObjectGetDerivedStorage();
    uint64_t v8 = CMBaseObjectGetDerivedStorage();
    uint64_t v37 = 0;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    fpfsi_gatherInterestingGaplessInfoForItem((uint64_t)a1, (uint64_t)&v33);
    uint64_t v9 = v34;
    if ((void)v34)
    {
      if (!CMAudioFormatDescriptionGetRichestDecodableFormat(*(CMAudioFormatDescriptionRef *)(v34 + 40))) {
        goto LABEL_127;
      }
      RichestDecodableFormat = CMAudioFormatDescriptionGetRichestDecodableFormat(*(CMAudioFormatDescriptionRef *)(v9 + 40));
      if (RichestDecodableFormat)
      {
        int mFormatID = RichestDecodableFormat->mASBD.mFormatID;
        if (mFormatID > 1902207794)
        {
          if (mFormatID > 1902667125)
          {
            if (mFormatID > 2053202738)
            {
              if (mFormatID <= 2053319474)
              {
                if ((mFormatID - 2053202739) > 0x3D
                  || ((1 << (mFormatID - 51)) & 0x2020000000000001) == 0)
                {
                  unsigned __int16 v12 = 30307;
LABEL_89:
                  int v14 = v12 | 0x7A610000;
                  goto LABEL_94;
                }
                goto LABEL_95;
              }
              if (mFormatID <= 2053923170)
              {
                if (mFormatID != 2053319475)
                {
                  int v14 = 2053464883;
                  goto LABEL_94;
                }
                goto LABEL_95;
              }
              if (mFormatID == 2054517601) {
                goto LABEL_95;
              }
              int v14 = 2053923171;
LABEL_94:
              if (mFormatID != v14) {
                goto LABEL_96;
              }
              goto LABEL_95;
            }
            if (mFormatID <= 1902998903)
            {
              if (mFormatID != 1902667126 && mFormatID != 1902671459)
              {
                int v14 = 1902928227;
                goto LABEL_94;
              }
            }
            else if (mFormatID > 1903587384)
            {
              if (mFormatID != 1903587385)
              {
                unsigned __int16 v12 = 24931;
                goto LABEL_89;
              }
            }
            else if (mFormatID != 1902998904)
            {
              int v14 = 1903522657;
              goto LABEL_94;
            }
LABEL_95:
            FPSupport_GetPlaintextAudioFormatForEncryptedFormatID(RichestDecodableFormat->mASBD.mFormatID);
            goto LABEL_96;
          }
          if (mFormatID > 1902324530)
          {
            if (mFormatID <= 1902405732)
            {
              if (mFormatID == 1902324531 || mFormatID == 1902403958) {
                goto LABEL_95;
              }
              unsigned __int16 v16 = 26673;
            }
            else
            {
              if (mFormatID > 1902469938)
              {
                if (mFormatID == 1902469939) {
                  goto LABEL_95;
                }
                int v14 = 1902537827;
                goto LABEL_94;
              }
              if (mFormatID == 1902405733) {
                goto LABEL_95;
              }
              unsigned __int16 v16 = 28024;
            }
            int v14 = v16 | 0x71640000;
            goto LABEL_94;
          }
          if ((mFormatID - 1902207795) <= 0x3D
            && ((1 << (mFormatID - 51)) & 0x2020000000000001) != 0
            || (mFormatID - 1902212657) <= 0x34
            && ((1 << (mFormatID - 49)) & 0x14000000000001) != 0)
          {
            goto LABEL_95;
          }
          unsigned __int16 v15 = 28771;
LABEL_86:
          int v14 = v15 | 0x71610000;
          goto LABEL_94;
        }
        if (mFormatID <= 1685220712)
        {
          if (mFormatID <= 1667524656)
          {
            if (mFormatID <= 1667326823)
            {
              if (mFormatID == 1633771875 || mFormatID == 1667312947) {
                goto LABEL_95;
              }
              unsigned __int16 v13 = 24931;
            }
            else if (mFormatID > 1667330146)
            {
              if (mFormatID == 1667330147) {
                goto LABEL_95;
              }
              unsigned __int16 v13 = 30307;
            }
            else
            {
              if (mFormatID == 1667326824) {
                goto LABEL_95;
              }
              unsigned __int16 v13 = 25456;
            }
            int v14 = v13 | 0x63610000;
            goto LABEL_94;
          }
          if (mFormatID <= 1667656802)
          {
            if (mFormatID != 1667524657 && mFormatID != 1667574579)
            {
              int v14 = 1667575091;
              goto LABEL_94;
            }
          }
          else if (mFormatID > 1668047202)
          {
            if (mFormatID != 1668047203)
            {
              int v14 = 1668641633;
              goto LABEL_94;
            }
          }
          else if (mFormatID != 1667656803)
          {
            int v14 = 1667790435;
            goto LABEL_94;
          }
          goto LABEL_95;
        }
        if (mFormatID <= 1885430578)
        {
          if (mFormatID <= 1701733237)
          {
            if (mFormatID != 1685220713 && mFormatID != 1700886115)
            {
              int v14 = 1701733217;
              goto LABEL_94;
            }
          }
          else if (mFormatID > 1882599479)
          {
            if (mFormatID != 1882599480)
            {
              int v14 = 1885430115;
              goto LABEL_94;
            }
          }
          else if (mFormatID != 1701733238)
          {
            int v14 = 1869117027;
            goto LABEL_94;
          }
          goto LABEL_95;
        }
        if (mFormatID > 1885547314)
        {
          if (mFormatID <= 1886745440)
          {
            if (mFormatID != 1885547315)
            {
              int v14 = 1885692723;
              goto LABEL_94;
            }
            goto LABEL_95;
          }
          if (mFormatID == 1886745441) {
            goto LABEL_95;
          }
          unsigned __int16 v15 = 24931;
          goto LABEL_86;
        }
        if ((mFormatID - 1885430579) <= 0x3D
          && ((1 << (mFormatID - 51)) & 0x2020000000000001) != 0)
        {
          goto LABEL_95;
        }
      }
      else if (FigSignalErrorAt())
      {
        goto LABEL_118;
      }
LABEL_96:
      CFDictionaryRef CurrentAudioPersistentIDFromMediaOption = fpfsi_GetCurrentAudioPersistentIDFromMediaOption();
      int AudioBitDepth = FigAlternateGetAudioBitDepth(*(void *)(v7 + 1704), CurrentAudioPersistentIDFromMediaOption);
      double AudioSampleRate = FigAlternateGetAudioSampleRate(*(void *)(v7 + 1704), CurrentAudioPersistentIDFromMediaOption);
      uint64_t UInt32 = FigCFNumberCreateUInt32();
      if (UInt32)
      {
        v21 = (const void *)UInt32;
        uint64_t v22 = FigCFNumberCreateUInt32();
        if (!v22)
        {
          FigSignalErrorAt();
          v29 = v21;
LABEL_117:
          CFRelease(v29);
          goto LABEL_118;
        }
        v23 = (const void *)v22;
        if (AudioBitDepth < 1)
        {
          SInt32 = 0;
        }
        else
        {
          SInt32 = (const void *)FigCFNumberCreateSInt32();
          if (!SInt32)
          {
            FigSignalErrorAt();
            uint64_t Float64 = 0;
LABEL_113:
            CFRelease(v21);
            CFRelease(v23);
            if (SInt32) {
              CFRelease(SInt32);
            }
            if (!Float64) {
              goto LABEL_118;
            }
            v29 = (const void *)Float64;
            goto LABEL_117;
          }
        }
        if ((int)AudioSampleRate < 1)
        {
          uint64_t Float64 = 0;
        }
        else
        {
          uint64_t Float64 = FigCFNumberCreateFloat64();
          if (!Float64)
          {
LABEL_123:
            FigSignalErrorAt();
            goto LABEL_113;
          }
        }
        v26 = *(const void **)(v8 + 2456);
        if (v26)
        {
          CFRelease(v26);
          *(void *)(v8 + 2456) = 0;
        }
        CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        *(void *)(v8 + 2456) = Mutable;
        if (Mutable)
        {
          FigCFDictionarySetValue();
          FigCFDictionarySetValue();
          if (SInt32) {
            FigCFDictionarySetValue();
          }
          if (Float64) {
            FigCFDictionarySetValue();
          }
          goto LABEL_113;
        }
        goto LABEL_123;
      }
LABEL_127:
      FigSignalErrorAt();
    }
  }
LABEL_118:
  if (cf) {
    CFRelease(cf);
  }
  if (v31) {
    CFRelease(v31);
  }
}

void fpfs_UpdateDimensions(const void *a1, int a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = *(const void **)DerivedStorage;
  uint64_t v6 = CMBaseObjectGetDerivedStorage();
  CGSize v28 = (CGSize)*MEMORY[0x1E4F1DB30];
  if (!a2 && *(float *)(DerivedStorage + 848) == 0.0) {
    return;
  }
  uint64_t RenderingNonGapTrackofType = fpfs_FirstRenderingNonGapTrackofType((uint64_t)a1, 1986618469);
  if (!RenderingNonGapTrackofType)
  {
    for (uint64_t RenderingNonGapTrackofType = *(void *)(DerivedStorage + 1048);
          RenderingNonGapTrackofType;
          uint64_t RenderingNonGapTrackofType = *(void *)(RenderingNonGapTrackofType + 8))
    {
      if (*(_DWORD *)(RenderingNonGapTrackofType + 32) == 1986618469
        && !*(unsigned char *)(RenderingNonGapTrackofType + 456)
        && *(void *)(RenderingNonGapTrackofType + 40))
      {
        break;
      }
    }
  }
  uint64_t v8 = *(void *)(DerivedStorage + 1704);
  if (v8 && FigAlternateIsAudioOnly(v8))
  {
LABEL_11:
    if (!RenderingNonGapTrackofType) {
      goto LABEL_34;
    }
LABEL_14:
    CGSize PresentationDimensions = CMVideoFormatDescriptionGetPresentationDimensions((CMVideoFormatDescriptionRef)*(void *)(RenderingNonGapTrackofType + 40), *(unsigned char *)(DerivedStorage + 872), *(unsigned char *)(DerivedStorage + 873));
    double width = PresentationDimensions.width;
    double height = PresentationDimensions.height;
    CGSize v28 = PresentationDimensions;
    unsigned __int16 v12 = *(const void **)(DerivedStorage + 3344);
    unsigned __int16 v13 = *(const void **)(RenderingNonGapTrackofType + 56);
    *(void *)(DerivedStorage + 3344) = v13;
    if (v13) {
      CFRetain(v13);
    }
    if (v12) {
      CFRelease(v12);
    }
    goto LABEL_35;
  }
  if (RenderingNonGapTrackofType) {
    goto LABEL_14;
  }
  uint64_t v14 = *(void *)(DerivedStorage + 1064);
  if (v14)
  {
    uint64_t RenderingNonGapTrackofType = 0;
    do
    {
      if (*(_DWORD *)(v14 + 32) == 1986618469 && !*(unsigned char *)(v14 + 456) && *(void *)(v14 + 40)) {
        uint64_t RenderingNonGapTrackofType = v14;
      }
      uint64_t v14 = *(void *)(v14 + 8);
    }
    while (v14);
    if (RenderingNonGapTrackofType) {
      goto LABEL_14;
    }
  }
  uint64_t v15 = *(void *)(DerivedStorage + 1080);
  if (v15)
  {
    uint64_t RenderingNonGapTrackofType = 0;
    do
    {
      if (*(_DWORD *)(v15 + 32) == 1986618469 && !*(unsigned char *)(v15 + 456) && *(void *)(v15 + 40)) {
        uint64_t RenderingNonGapTrackofType = v15;
      }
      uint64_t v15 = *(void *)(v15 + 8);
    }
    while (v15);
    goto LABEL_11;
  }
LABEL_34:
  double height = v28.height;
  double width = v28.width;
LABEL_35:
  float v16 = height;
  *(float *)(DerivedStorage + 784) = v16;
  float v17 = width;
  *(float *)(DerivedStorage + 780) = v17;
  fpfs_ReadjustDimensions((uint64_t)a1, (uint64_t)&v28);
  v24 = *(dispatch_queue_t **)(DerivedStorage + 1864);
  if (v24) {
    FigLegibleOutputManagerSetVideoDisplaySize(v24, v28.width, v28.height);
  }
  if (*(unsigned char *)(v6 + 462))
  {
    uint64_t v25 = *(void *)(DerivedStorage + 824);
    uint64_t v26 = *(void *)(DerivedStorage + 816);
    if (v25 && *(void *)(v25 + 32)) {
      fpfs_setDisplaySizeAndItemVideoSizeOnTextRenderPipeline(v25, *(double *)(v6 + 464), *(double *)(v6 + 472), *(void *)(v6 + 480), (uint64_t)a1);
    }
    if (v26 && *(void *)(v26 + 32)) {
      fpfs_setDisplaySizeAndItemVideoSizeOnTextRenderPipeline(v26, *(double *)(v6 + 464), *(double *)(v6 + 472), *(void *)(v6 + 480), (uint64_t)a1);
    }
  }
  if (!*(unsigned char *)(DerivedStorage + 530))
  {
    NotificationPayloadForProperties = fpfs_CreateNotificationPayloadForProperties(v5, (uint64_t)a1, v18, v19, v20, v21, v22, v23, @"CurrentDimensions", @"VideoSlotArray");
    fpfs_EnqueueNotification(v5, @"DimensionsChanged", a1, NotificationPayloadForProperties);
    if (NotificationPayloadForProperties) {
      CFRelease(NotificationPayloadForProperties);
    }
  }
}

uint64_t fpfs_FirstRenderingNonGapTrackofType(uint64_t a1, int a2)
{
  for (uint64_t result = *(void *)(CMBaseObjectGetDerivedStorage() + 1048); result; uint64_t result = *(void *)(result + 8))
  {
    if (*(_DWORD *)(result + 32) == a2 && *(void *)(result + 96) && !*(unsigned char *)(result + 456)) {
      break;
    }
  }
  return result;
}

uint64_t fpfsi_copyPlayableTime(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFArrayRef v59 = 0;
  long long v5 = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 16);
  long long v56 = *MEMORY[0x1E4F1FA20];
  long long v57 = v5;
  long long v58 = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 32);
  uint64_t v6 = *(void *)(DerivedStorage + 1704);
  if (v6) {
    BOOL v7 = FigAlternateIsIFrameOnly(v6) != 0;
  }
  else {
    BOOL v7 = 0;
  }
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFMutableArrayRef Mutable = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D510]);
  CFMutableArrayRef v10 = Mutable;
  if (Mutable)
  {
    theArray = Mutable;
    fpfsi_TotalTimeRangeInBuffer(a1, (uint64_t)&time1);
    CMTimeValue value = time1.start.value;
    CMTimeFlags flags = time1.start.flags;
    CMTimeScale timescale = time1.start.timescale;
    CMTimeEpoch epoch = time1.start.epoch;
    CMTimeValue v13 = time1.duration.value;
    CMTimeScale v14 = time1.duration.timescale;
    CMTimeFlags v15 = time1.duration.flags;
    CMTimeEpoch v43 = time1.duration.epoch;
    uint64_t v16 = *(void *)(DerivedStorage + 936);
    if (v16) {
      char v17 = v7;
    }
    else {
      char v17 = 1;
    }
    if ((v17 & 1) == 0)
    {
      uint64_t v18 = FigGetAllocatorForMedia();
      uint64_t FigBaseObject = FigBytePumpGetFigBaseObject(v16);
      uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v21 = v20 ? v20 : 0;
      int v22 = *(void (**)(uint64_t, uint64_t, uint64_t, const __CFArray **))(v21 + 48);
      if (v22) {
        v22(FigBaseObject, 0x1EE53E6B8, v18, &v59);
      }
    }
    fpfsi_getPumpAvailableTimeRange(DerivedStorage, &v56);
    if ((flags & 1) == 0)
    {
      CMTimeFlags v23 = v15;
      goto LABEL_25;
    }
    CMTimeFlags v23 = v15;
    if ((v15 & 1) != 0 && !v43 && (v13 & 0x8000000000000000) == 0)
    {
      if ((BYTE12(v56) & 1) == 0)
      {
LABEL_24:
        CMTimeEpoch v43 = 0;
        goto LABEL_25;
      }
      CMTimeEpoch v43 = 0;
      if ((BYTE4(v58) & 1) != 0 && !*((void *)&v58 + 1) && (*((void *)&v57 + 1) & 0x8000000000000000) == 0)
      {
        time1.start.CMTimeValue value = value;
        time1.start.CMTimeScale timescale = timescale;
        time1.start.CMTimeFlags flags = flags;
        time1.start.CMTimeEpoch epoch = epoch;
        *(_OWORD *)&time2.start.CMTimeValue value = v56;
        time2.start.CMTimeEpoch epoch = v57;
        if (CMTimeCompare(&time1.start, &time2.start) < 0)
        {
          time1.start.CMTimeValue value = value;
          time1.start.CMTimeScale timescale = timescale;
          time1.start.CMTimeFlags flags = flags;
          time1.start.CMTimeEpoch epoch = epoch;
          time1.duration.CMTimeValue value = v13;
          time1.duration.CMTimeScale timescale = v14;
          time1.duration.CMTimeFlags flags = v15;
          time1.duration.CMTimeEpoch epoch = 0;
          CMTimeRangeGetEnd(&end, &time1);
          *(_OWORD *)&time2.start.CMTimeValue value = v56;
          time2.start.CMTimeEpoch epoch = v57;
          CMTimeRangeFromTimeToTime(&time1, &time2.start, &end);
          CMTimeValue value = time1.start.value;
          CMTimeFlags flags = time1.start.flags;
          CMTimeScale timescale = time1.start.timescale;
          CMTimeEpoch epoch = time1.start.epoch;
          CMTimeValue v13 = time1.duration.value;
          CMTimeScale v14 = time1.duration.timescale;
          CMTimeFlags v23 = time1.duration.flags;
          CMTimeEpoch v43 = time1.duration.epoch;
          goto LABEL_25;
        }
        goto LABEL_24;
      }
    }
LABEL_25:
    if (v59 && CFArrayGetCount(v59) > 0)
    {
      int v40 = 0;
      CMTimeScale v41 = v14;
      CMTimeEpoch v42 = epoch;
      v38 = a2;
      CFIndex idx = 0;
      CFIndex v24 = 0;
      uint64_t v44 = DerivedStorage + 1184;
      while (1)
      {
        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v59, v24);
        CMTimeRangeMakeFromDictionary(&time1, ValueAtIndex);
        CMTimeScale v61 = time1.start.timescale;
        CMTimeValue v60 = time1.start.value;
        CMTimeValue v26 = time1.duration.value;
        CMTimeScale v27 = time1.duration.timescale;
        CMTimeFlags v28 = time1.duration.flags;
        CMTimeEpoch v29 = time1.duration.epoch;
        time2.start.CMTimeValue value = time1.start.value;
        time2.start.CMTimeScale timescale = time1.start.timescale;
        time2.start.CMTimeFlags flags = time1.start.flags;
        time2.start.CMTimeEpoch epoch = time1.start.epoch;
        *(_OWORD *)&rhs.start.CMTimeValue value = *(_OWORD *)v44;
        rhs.start.CMTimeEpoch epoch = *(void *)(v44 + 16);
        CMTimeSubtract(&time1.start, &time2.start, &rhs.start);
        CMTimeValue v60 = time1.start.value;
        CMTimeFlags v30 = time1.start.flags;
        CMTimeScale v61 = time1.start.timescale;
        CMTimeEpoch v31 = time1.start.epoch;
        if ((flags & 1) != 0 && (v23 & 1) != 0 && !v43 && (v13 & 0x8000000000000000) == 0)
        {
          time1.start.CMTimeValue value = v60;
          time1.start.CMTimeScale timescale = v61;
          time1.duration.CMTimeValue value = v26;
          time1.duration.CMTimeScale timescale = v27;
          time1.duration.CMTimeFlags flags = v28;
          time1.duration.CMTimeEpoch epoch = v29;
          time2.start.CMTimeValue value = value;
          time2.start.CMTimeScale timescale = timescale;
          time2.start.CMTimeFlags flags = flags;
          time2.start.CMTimeEpoch epoch = v42;
          time2.duration.CMTimeValue value = v13;
          time2.duration.CMTimeScale timescale = v41;
          time2.duration.CMTimeFlags flags = v23;
          time2.duration.CMTimeEpoch epoch = 0;
          CMTimeRangeGetIntersection(&v53, &time1, &time2);
          if ((v53.start.flags & 1) == 0) {
            goto LABEL_35;
          }
          time1.start.CMTimeValue value = v60;
          time1.start.CMTimeScale timescale = v61;
          time1.start.CMTimeFlags flags = v30;
          time1.start.CMTimeEpoch epoch = v31;
          time1.duration.CMTimeValue value = v26;
          time1.duration.CMTimeScale timescale = v27;
          time1.duration.CMTimeFlags flags = v28;
          time1.duration.CMTimeEpoch epoch = v29;
          time2.start.CMTimeValue value = value;
          time2.start.CMTimeScale timescale = timescale;
          time2.start.CMTimeFlags flags = flags;
          time2.start.CMTimeEpoch epoch = v42;
          time2.duration.CMTimeValue value = v13;
          time2.duration.CMTimeScale timescale = v41;
          time2.duration.CMTimeFlags flags = v23;
          time2.duration.CMTimeEpoch epoch = 0;
          CMTimeRangeGetIntersection(&v51, &time1, &time2);
          if ((v51.duration.flags & 1) == 0) {
            goto LABEL_35;
          }
          time1.start.CMTimeValue value = v60;
          time1.start.CMTimeScale timescale = v61;
          time1.start.CMTimeFlags flags = v30;
          time1.start.CMTimeEpoch epoch = v31;
          time1.duration.CMTimeValue value = v26;
          time1.duration.CMTimeScale timescale = v27;
          time1.duration.CMTimeFlags flags = v28;
          time1.duration.CMTimeEpoch epoch = v29;
          time2.start.CMTimeValue value = value;
          time2.start.CMTimeScale timescale = timescale;
          time2.start.CMTimeFlags flags = flags;
          time2.start.CMTimeEpoch epoch = v42;
          time2.duration.CMTimeValue value = v13;
          time2.duration.CMTimeScale timescale = v41;
          time2.duration.CMTimeFlags flags = v23;
          time2.duration.CMTimeEpoch epoch = 0;
          CMTimeRangeGetIntersection(&v50, &time1, &time2);
          if (v50.duration.epoch) {
            goto LABEL_35;
          }
          time1.start.CMTimeValue value = v60;
          time1.start.CMTimeScale timescale = v61;
          time1.start.CMTimeFlags flags = v30;
          time1.start.CMTimeEpoch epoch = v31;
          time1.duration.CMTimeValue value = v26;
          time1.duration.CMTimeScale timescale = v27;
          time1.duration.CMTimeFlags flags = v28;
          time1.duration.CMTimeEpoch epoch = v29;
          time2.start.CMTimeValue value = value;
          time2.start.CMTimeScale timescale = timescale;
          time2.start.CMTimeFlags flags = flags;
          time2.start.CMTimeEpoch epoch = v42;
          time2.duration.CMTimeValue value = v13;
          time2.duration.CMTimeScale timescale = v41;
          time2.duration.CMTimeFlags flags = v23;
          time2.duration.CMTimeEpoch epoch = 0;
          CMTimeRangeGetIntersection(&v49, &time1, &time2);
          if (v49.duration.value < 0) {
            goto LABEL_35;
          }
          time1.start.CMTimeValue value = v60;
          time1.start.CMTimeScale timescale = v61;
          time1.start.CMTimeFlags flags = v30;
          time1.start.CMTimeEpoch epoch = v31;
          time1.duration.CMTimeValue value = v26;
          time1.duration.CMTimeScale timescale = v27;
          time1.duration.CMTimeFlags flags = v28;
          time1.duration.CMTimeEpoch epoch = v29;
          time2.start.CMTimeValue value = value;
          time2.start.CMTimeScale timescale = timescale;
          time2.start.CMTimeFlags flags = flags;
          time2.start.CMTimeEpoch epoch = v42;
          time2.duration.CMTimeValue value = v13;
          time2.duration.CMTimeScale timescale = v41;
          time2.duration.CMTimeFlags flags = v23;
          time2.duration.CMTimeEpoch epoch = 0;
          CMTimeRangeGetIntersection(&v47, &time1, &time2);
          CMTime duration = v47.duration;
          *(_OWORD *)&time1.start.CMTimeValue value = *MEMORY[0x1E4F1FA48];
          time1.start.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1FA48] + 16);
          if (CMTimeCompare(&duration, &time1.start))
          {
LABEL_35:
            time2.start.CMTimeValue value = v60;
            time2.start.CMTimeScale timescale = v61;
            time2.start.CMTimeFlags flags = v30;
            time2.start.CMTimeEpoch epoch = v31;
            time2.duration.CMTimeValue value = v26;
            time2.duration.CMTimeScale timescale = v27;
            time2.duration.CMTimeFlags flags = v28;
            time2.duration.CMTimeEpoch epoch = v29;
            rhs.start.CMTimeValue value = value;
            rhs.start.CMTimeScale timescale = timescale;
            rhs.start.CMTimeFlags flags = flags;
            rhs.start.CMTimeEpoch epoch = v42;
            rhs.duration.CMTimeValue value = v13;
            rhs.duration.CMTimeScale timescale = v41;
            rhs.duration.CMTimeFlags flags = v23;
            rhs.duration.CMTimeEpoch epoch = 0;
            CMTimeRangeGetUnion(&time1, &time2, &rhs);
            CMTimeFlags v30 = time1.start.flags;
            CMTimeScale timescale = time1.start.timescale;
            CMTimeValue value = time1.start.value;
            CMTimeEpoch v31 = time1.start.epoch;
            CMTimeValue v26 = time1.duration.value;
            CMTimeScale v27 = time1.duration.timescale;
            CMTimeFlags v28 = time1.duration.flags;
            CMTimeEpoch v29 = time1.duration.epoch;
            CMTimeValue v60 = time1.start.value;
            CMTimeScale v61 = time1.start.timescale;
            if (v40) {
              CFArrayRemoveValueAtIndex(theArray, idx);
            }
            CFIndex idx = CFArrayGetCount(theArray);
            int v40 = 1;
            CMTimeScale v41 = v27;
            CMTimeFlags flags = v30;
            CMTimeEpoch v42 = v31;
            CMTimeValue v13 = v26;
            CMTimeFlags v23 = v28;
            CMTimeEpoch v43 = v29;
          }
          else
          {
            CMTimeEpoch v43 = 0;
          }
        }
        time1.start.CMTimeValue value = v60;
        time1.start.CMTimeScale timescale = v61;
        time1.start.CMTimeFlags flags = v30;
        time1.start.CMTimeEpoch epoch = v31;
        time1.duration.CMTimeValue value = v26;
        time1.duration.CMTimeScale timescale = v27;
        time1.duration.CMTimeFlags flags = v28;
        time1.duration.CMTimeEpoch epoch = v29;
        PlayableTimeEntryFromTimeRange = fpfsi_CreatePlayableTimeEntryFromTimeRange((uint64_t)&time1);
        if (!PlayableTimeEntryFromTimeRange) {
          goto LABEL_59;
        }
        long long v33 = PlayableTimeEntryFromTimeRange;
        CFArrayAppendValue(theArray, PlayableTimeEntryFromTimeRange);
        CFRelease(v33);
        if (++v24 >= CFArrayGetCount(v59))
        {
          a2 = v38;
          CMTimeEpoch epoch = v42;
          CMTimeScale v14 = v41;
          if (v40) {
            goto LABEL_52;
          }
          break;
        }
      }
    }
    if ((flags & 1) != 0 && (v23 & 1) != 0 && !v43 && (v13 & 0x8000000000000000) == 0)
    {
      time1.start.CMTimeValue value = v13;
      time1.start.CMTimeScale timescale = v14;
      time1.start.CMTimeFlags flags = v23;
      time1.start.CMTimeEpoch epoch = 0;
      *(_OWORD *)&time2.start.CMTimeValue value = *MEMORY[0x1E4F1FA48];
      time2.start.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1FA48] + 16);
      if (CMTimeCompare(&time1.start, &time2.start))
      {
        time1.start.CMTimeValue value = value;
        time1.start.CMTimeScale timescale = timescale;
        time1.start.CMTimeFlags flags = flags;
        time1.start.CMTimeEpoch epoch = epoch;
        time1.duration.CMTimeValue value = v13;
        time1.duration.CMTimeScale timescale = v14;
        time1.duration.CMTimeFlags flags = v23;
        time1.duration.CMTimeEpoch epoch = 0;
        long long v34 = fpfsi_CreatePlayableTimeEntryFromTimeRange((uint64_t)&time1);
        if (!v34)
        {
LABEL_59:
          uint64_t v36 = FigSignalErrorAt();
          CFMutableArrayRef v10 = theArray;
          goto LABEL_53;
        }
        long long v35 = v34;
        CFArrayAppendValue(theArray, v34);
        CFRelease(v35);
      }
    }
LABEL_52:
    CFMutableArrayRef v10 = theArray;
    uint64_t v36 = 0;
    *a2 = CFRetain(theArray);
    goto LABEL_53;
  }
  uint64_t v36 = FigSignalErrorAt();
LABEL_53:
  if (v59) {
    CFRelease(v59);
  }
  if (v10) {
    CFRelease(v10);
  }
  return v36;
}

uint64_t FigMetricEventTimelinePublishEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v9 = *(void *)(VTable + 16);
  uint64_t result = VTable + 16;
  uint64_t v8 = v9;
  if (v9) {
    uint64_t v10 = v8;
  }
  else {
    uint64_t v10 = 0;
  }
  v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 40);
  if (v11)
  {
    return v11(a1, a2, a3);
  }
  return result;
}

void fpfsi_SetupSkipBitrateRangeFilter(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v18 = 0;
  CFTypeRef cf = 0;
  uint64_t v3 = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = *(void *)(DerivedStorage + 936);
  if (!v4) {
    goto LABEL_24;
  }
  uint64_t v5 = *(void *)(DerivedStorage + 1728);
  if (!*(unsigned char *)(v3 + 458))
  {
    if (v5)
    {
      CFRelease(*(CFTypeRef *)(DerivedStorage + 1728));
      *(void *)(DerivedStorage + 1728) = 0;
    }
    goto LABEL_24;
  }
  uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
  uint64_t FigBaseObject = FigBytePumpGetFigBaseObject(v4);
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(v9 + 48);
  if (v10) {
    int v11 = v10(FigBaseObject, 0x1EE53E958, AllocatorForMedia, &v18);
  }
  else {
    int v11 = -12782;
  }
  int v12 = FigCFEqual();
  CMTimeValue v13 = *(const void **)(DerivedStorage + 1728);
  if (v12)
  {
    if (!v13) {
      goto LABEL_12;
    }
  }
  else
  {
    if (!v13) {
      goto LABEL_12;
    }
    uint64_t v17 = *(void *)(DerivedStorage + 1048);
    if (v17)
    {
      do
      {
        if (*(_DWORD *)(v17 + 152) == 6 && !*(unsigned char *)(v17 + 184) && FigCFEqual()) {
          *(unsigned char *)(v17 + 189) = 1;
        }
        uint64_t v17 = *(void *)(v17 + 8);
      }
      while (v17);
      CMTimeValue v13 = *(const void **)(DerivedStorage + 1728);
      if (!v13) {
        goto LABEL_12;
      }
    }
  }
  CFRelease(v13);
LABEL_12:
  uint64_t v14 = v18;
  *(void *)(DerivedStorage + 1728) = v18;
  if (!v11
    && v14
    && (int ExpectedAverageBitrate = FigAlternateGetExpectedAverageBitrate(*(void *)(DerivedStorage + 1704)),
        ExpectedAverageBitrate > (int)FigAlternateGetExpectedAverageBitrate(*(void *)(DerivedStorage + 1728)))
    && fpfs_ScheduleRecoverySwitch(a1, *(void *)(DerivedStorage + 1728), 1))
  {
    uint64_t v16 = (void *)FigGetAllocatorForMedia();
    if (FigAlternateSkipBitrateRangeFilterCreate(v16, *(const void **)(DerivedStorage + 1728), *(const void **)(DerivedStorage + 1704), @"RecoveryAlternateSkipBitrateRange", 605, &cf)|| FigAlternateSelectionBossAddFilter(*(void *)(DerivedStorage + 40), cf)|| fpfsi_setPlaybackRateMonitorProperty(DerivedStorage, @"AfmfpbProperty_RecoveryAlternate", *(void *)(DerivedStorage + 1728)))
    {
      goto LABEL_24;
    }
  }
  else if (!v5 {
         || fpfsi_setPlaybackRateMonitorProperty(DerivedStorage, @"AfmfpbProperty_RecoveryAlternate", 0)|| FigAlternateSelectionBossRemoveFilter(*(void *)(DerivedStorage + 40), @"RecoveryAlternateSkipBitrateRange"))
  }
  {
    goto LABEL_24;
  }
  FigAlternateSelectionBossApplyFilters(*(const void **)(DerivedStorage + 40));
LABEL_24:
  if (cf) {
    CFRelease(cf);
  }
}

void fpfs_PostHasEnabledTrackTypeNotification(const void *a1, const void *a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = 0;
  CFTypeRef v6 = (CFTypeRef)*MEMORY[0x1E4F1CFD0];
  BOOL v7 = (const void *)*MEMORY[0x1E4F1CFC8];
  char v8 = 1;
  do
  {
    char v9 = v8;
    int v10 = *(_DWORD *)&aNuosediv[4 * v5];
    if (v8)
    {
      uint64_t v11 = *(void *)(DerivedStorage + 1704);
      if (v11)
      {
        if (FigAlternateIsIFrameOnly(v11))
        {
          if (*(unsigned char *)(DerivedStorage + 777)) {
            int v12 = v6;
          }
          else {
            int v12 = v7;
          }
          CFTypeRef v19 = CFRetain(v12);
          if (v19 == v6)
          {
LABEL_18:
            CFTypeRef v19 = v6;
            if (*(unsigned char *)(DerivedStorage + 777)) {
              goto LABEL_30;
            }
            *(unsigned char *)(DerivedStorage + 777) = 1;
            CFTypeRef v19 = v6;
          }
          else
          {
LABEL_15:
            if (!*(unsigned char *)(DerivedStorage + 777)) {
              goto LABEL_30;
            }
            *(unsigned char *)(DerivedStorage + 777) = 0;
          }
          CMTimeValue value = @"HasEnabledAudio";
          CMTimeFlags v23 = @"HasEnabledAudioChanged";
          if (!@"HasEnabledAudioChanged") {
            goto LABEL_30;
          }
          goto LABEL_27;
        }
      }
    }
    uint64_t v26 = 0;
    memset(v25, 0, sizeof(v25));
    if (fpfsi_findLastPlayingTracksForMediaType((uint64_t)a2, v10, (uint64_t)v25)) {
      uint64_t v20 = v6;
    }
    else {
      uint64_t v20 = v7;
    }
    CFTypeRef v21 = CFRetain(v20);
    if (v21 == v6)
    {
      if (v9) {
        goto LABEL_18;
      }
      CFTypeRef v19 = v6;
      if (*(unsigned char *)(DerivedStorage + 778)) {
        goto LABEL_30;
      }
      *(unsigned char *)(DerivedStorage + 778) = 1;
      CFTypeRef v19 = v6;
    }
    else
    {
      CFTypeRef v19 = v21;
      if (v9) {
        goto LABEL_15;
      }
      if (!*(unsigned char *)(DerivedStorage + 778)) {
        goto LABEL_30;
      }
      *(unsigned char *)(DerivedStorage + 778) = 0;
    }
    CMTimeValue value = @"HasEnabledVideo";
    CMTimeFlags v23 = @"HasEnabledVideoChanged";
    if (!@"HasEnabledVideoChanged") {
      goto LABEL_30;
    }
LABEL_27:
    if (value)
    {
      NotificationPayloadForProperties = fpfs_CreateNotificationPayloadForProperties(a1, (uint64_t)a2, v13, v14, v15, v16, v17, v18, value, 0);
      fpfs_EnqueueNotification(a1, v23, a2, NotificationPayloadForProperties);
      if (NotificationPayloadForProperties) {
        CFRelease(NotificationPayloadForProperties);
      }
    }
LABEL_30:
    if (v19) {
      CFRelease(v19);
    }
    char v8 = 0;
    uint64_t v5 = 1;
  }
  while ((v9 & 1) != 0);
}

uint64_t fpfsi_RTCReportingUpdateAlternateIndex(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 2544);
  if (v2)
  {
    uint64_t VTable = CMBaseObjectGetVTable();
    uint64_t v6 = *(void *)(VTable + 16);
    uint64_t result = VTable + 16;
    uint64_t v5 = v6;
    uint64_t v7 = v6 ? v5 : 0;
    char v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v7 + 48);
    if (v8)
    {
      return v8(v2, 0x1EE582B78, 0x1EE5611B8, a2, 0);
    }
  }
  return result;
}

uint64_t fpfsi_RTCReportingUpdateVariantRank(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v4 = result;
  if ((a2 & 0x80000000) == 0)
  {
    uint64_t v5 = *(void *)(result + 2544);
    if (v5)
    {
      uint64_t VTable = CMBaseObjectGetVTable();
      uint64_t v9 = *(void *)(VTable + 16);
      uint64_t result = VTable + 16;
      uint64_t v8 = v9;
      uint64_t v10 = v9 ? v8 : 0;
      uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, void))(v10 + 56);
      if (v11) {
        uint64_t result = v11(v5, 0x1EE582B78, 0x1EE561158, a2, 0);
      }
    }
  }
  if ((a3 & 0x80000000) == 0)
  {
    uint64_t v12 = *(void *)(v4 + 2544);
    if (v12)
    {
      uint64_t v13 = CMBaseObjectGetVTable();
      uint64_t v15 = *(void *)(v13 + 16);
      uint64_t result = v13 + 16;
      uint64_t v14 = v15;
      uint64_t v16 = v15 ? v14 : 0;
      int v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, void))(v16 + 56);
      if (v17)
      {
        return v17(v12, 0x1EE582B78, 0x1EE5619B8, a3, 0);
      }
    }
  }
  return result;
}

uint64_t fpfs_GrabBuffersBeforeTime(opaqueCMSampleBuffer *a1, uint64_t a2)
{
  memset(&v9, 0, sizeof(v9));
  CMSampleBufferGetOutputDecodeTimeStamp(&time1, a1);
  CMSampleBufferGetOutputPresentationTimeStamp(&time2, a1);
  CMTimeMinimum(&v9, &time1, &time2);
  if (fpfs_IsMarkerOnly(a1) || (v6 = v9, CMTime v5 = *(CMTime *)(a2 + 8), CMTimeCompare(&v6, &v5) <= 0)) {
    CMBufferQueueEnqueue(*(CMBufferQueueRef *)a2, a1);
  }
  return 0;
}

uint64_t fpfsi_PostExternalProtectionRequiredChangedNotification(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = *(const void **)DerivedStorage;
  uint64_t result = fpfsi_GetExternalProtectionMethodRequiredForPlayback();
  if (*(_DWORD *)(DerivedStorage + 2976) != result)
  {
    *(_DWORD *)(DerivedStorage + 2976) = result;
    return fpfs_EnqueueNotification(v3, @"RequiresExternalProtectionChanged", a1, 0);
  }
  return result;
}

uint64_t fpfs_PrimeVideoSyncTimer(uint64_t a1, CMTime *a2, CMTime *a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v7 = CMBaseObjectGetDerivedStorage();
  CMTime v21 = *a2;
  values = 0;
  uint64_t v26 = 0;
  if (*(unsigned char *)(v7 + 456)) {
    int64_t v8 = -249;
  }
  else {
    int64_t v8 = -32;
  }
  CMTime v9 = (NSObject **)(a1 + 264);
  fpfs_ReleaseAndClearDispatchSource((dispatch_object_t *)(a1 + 264));
  CMTime lhs = v21;
  CMTime rhs = *a3;
  CMTimeSubtract(&v21, &lhs, &rhs);
  CMTimeMake(&v20, v8, 1000);
  CMTime rhs = v21;
  CMTimeAdd(&lhs, &rhs, &v20);
  CMTime v21 = lhs;
  fpfs_GetTime(DerivedStorage, (uint64_t)&v22);
  CMTime lhs = v21;
  CMTime rhs = v22;
  if (CMTimeCompare(&lhs, &rhs) <= 0)
  {
    CMTimeMake(&v19, 10, 1000);
    CMTime rhs = v22;
    CMTimeAdd(&lhs, &rhs, &v19);
    CMTime v21 = lhs;
  }
  FigRetainProxyRetain();
  uint64_t v10 = *(void *)(a1 + 16);
  values = *(void **)(DerivedStorage + 16);
  uint64_t v26 = v10;
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFArrayRef v12 = CFArrayCreate(AllocatorForMedia, (const void **)&values, 2, 0);
  uint64_t v13 = fpfs_TimerDispatchSourceCreate(*(dispatch_queue_t *)(DerivedStorage + 600), v12, 0xFFFFFFFFFFFFFFFFLL, (void (__cdecl *)(void *))fpfs_VideoSyncTimerDispatchFunc, (void (__cdecl *)(void *))fpfs_VideoSyncTimerCancelFunc);
  *(void *)(a1 + 264) = v13;
  if (v12)
  {
    CFRelease(v12);
    uint64_t v14 = *v9;
    if (*v9) {
      goto LABEL_8;
    }
    return FigRetainProxyRelease();
  }
  uint64_t v14 = v13;
  if (!v13) {
    return FigRetainProxyRelease();
  }
LABEL_8:
  CMTimebaseAddTimerDispatchSource(*(CMTimebaseRef *)(DerivedStorage + 576), v14);
  uint64_t v15 = *(OpaqueCMTimebase **)(DerivedStorage + 576);
  uint64_t v16 = *v9;
  CMTime lhs = v21;
  uint64_t result = CMTimebaseSetTimerDispatchSourceNextFireTime(v15, v16, &lhs, 1u);
  if (dword_1E9350BB0)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return result;
}

void fpfs_VideoSyncTimerDispatchFunc(const __CFArray *a1)
{
  CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(a1, 0);
  uint64_t v3 = CFArrayGetValueAtIndex(a1, 1);

  fpfs_VideoSyncTimerProc((uint64_t)ValueAtIndex, (uint64_t)v3);
}

uint64_t fpfs_VideoSyncTimerCancelFunc(const __CFArray *a1)
{
  CFArrayGetValueAtIndex(a1, 0);

  return FigRetainProxyRelease();
}

void fpfs_VideoSyncTimerProc(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  CFTypeRef v17 = 0;
  CFTypeRef cf = 0;
  int v3 = fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer(a1, &v17, &cf);
  CFTypeRef v4 = cf;
  if (!v3)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    uint64_t v6 = CMBaseObjectGetDerivedStorage();
    id v7 = *(id *)(v6 + 776);
    voucher_adopt();
    uint64_t v8 = *(void *)(DerivedStorage + 1048);
    if (v8)
    {
      while (*(void *)(v8 + 16) != a2)
      {
        uint64_t v8 = *(void *)(v8 + 8);
        if (!v8) {
          goto LABEL_15;
        }
      }
      uint64_t v9 = *(void *)(v8 + 48);
      uint64_t v10 = *(void *)(DerivedStorage + 16 * *(unsigned __int8 *)(v8 + 180) + 1008);
      if (dword_1E9350BB0)
      {
        uint64_t v14 = *(void *)(DerivedStorage + 16 * *(unsigned __int8 *)(v8 + 180) + 1008);
        int v16 = 0;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        uint64_t v10 = v14;
      }
      fpfs_ReleaseAndClearDispatchSource((dispatch_object_t *)(v8 + 264));
      BOOL v12 = v9 == v10 && fpfs_IsTrialReadyToComplete(DerivedStorage, v8);
      if (fpfs_CheckVideoSyncQueue(v8, v12))
      {
        uint64_t v13 = fpfs_FinishVideoSync(v8);
        if (v13 != -16042)
        {
          if (v13) {
            fpfs_StopPlayingItemWithOSStatus(v6, (uint64_t)cf, v13);
          }
        }
      }
    }
LABEL_15:

    fpfs_UnlockAndPostNotificationsWithCaller(v17);
    CFTypeRef v4 = cf;
  }
  if (v4) {
    CFRelease(v4);
  }
  if (v17) {
    CFRelease(v17);
  }
}

BOOL fpfs_IsTrialReadyToComplete(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 1048);
  if (!v3)
  {
    int v5 = 0;
    return v5 == *(_DWORD *)(a1 + 1776);
  }
  int v5 = 0;
  uint64_t v6 = (CMTime *)MEMORY[0x1E4F1F9F8];
  int v7 = 1;
  do
  {
    uint64_t v8 = *(unsigned __int8 *)(v3 + 180);
    if (*(void *)(v3 + 48) == *(void *)(a1 + 16 * v8 + 1008))
    {
      v5 |= 1 << v8;
      if (v3 != a2 && (*(unsigned char *)(v3 + 184) || *(_DWORD *)(v3 + 152) == 1))
      {
        int v9 = *(_DWORD *)(v3 + 32);
        if (v9 == 1986618469)
        {
          int v10 = fpfs_CheckVideoSyncQueue(v3, 1);
        }
        else
        {
          if (v9 != 1936684398) {
            goto LABEL_4;
          }
          fpfs_GetTime(a1, (uint64_t)&v13);
          CMTime v12 = *v6;
          int v10 = fpfs_CheckAudioSync(a1, v3, 0, &v13, &v12, 1, 0);
        }
        if (!v10) {
          int v7 = 0;
        }
      }
    }
LABEL_4:
    uint64_t v3 = *(void *)(v3 + 8);
  }
  while (v3);
  if (!v7) {
    return 0;
  }
  return v5 == *(_DWORD *)(a1 + 1776);
}

uint64_t fpfs_CheckAudioSync(uint64_t a1, uint64_t a2, opaqueCMSampleBuffer *a3, CMTime *a4, CMTime *a5, int a6, CMTime *a7)
{
  if (!*(unsigned char *)(a2 + 183)) {
    return 0;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t TrackOfType = fpfs_LastTrackOfType(*(void *)a2, 1936684398, a2);
  uint64_t v16 = TrackOfType;
  if (TrackOfType)
  {
    *(_OWORD *)&v31.CMTimeValue value = *(_OWORD *)(TrackOfType + 192);
    CMTimeEpoch v17 = *(void *)(TrackOfType + 208);
  }
  else
  {
    *(_OWORD *)&v31.CMTimeValue value = *MEMORY[0x1E4F1FA08];
    CMTimeEpoch v17 = *(void *)(MEMORY[0x1E4F1FA08] + 16);
  }
  v31.CMTimeEpoch epoch = v17;
  memset(&v30, 0, sizeof(v30));
  CMTime v29 = *a4;
  uint64_t v19 = *(void *)(a2 + 48);
  uint64_t v20 = *(unsigned __int8 *)(a2 + 180);
  if (a6) {
    BOOL v21 = 0;
  }
  else {
    BOOL v21 = v19 == *(void *)(a1 + 16 * v20 + 1008);
  }
  unsigned int v22 = !v21;
  if (!TrackOfType)
  {
    if (*(float *)(a1 + 848) == 0.0) {
      goto LABEL_27;
    }
    if (v19 != *(void *)(a1 + 16 * v20 + 1000))
    {
      CMTimeMake(&v24, 250, 1000);
      CMTime time1 = *a4;
      CMTimeAdd(&v29, &time1, &v24);
      goto LABEL_27;
    }
    goto LABEL_24;
  }
  if (*(unsigned char *)(TrackOfType + 228))
  {
    memset(&time1, 0, sizeof(time1));
    CMTime lhs = *(CMTime *)(TrackOfType + 216);
    CMTime rhs = *(CMTime *)gFSPAudioCrossfadeDuration;
    CMTimeSubtract(&time1, &lhs, &rhs);
    CMTime lhs = *a5;
    CMTime rhs = time1;
    if (CMTimeCompare(&lhs, &rhs) >= 1) {
      *a5 = time1;
    }
  }
  if (*(float *)(a1 + 848) == 0.0 && !*(unsigned char *)(v16 + 423)) {
    goto LABEL_25;
  }
  if ((*(unsigned char *)(v16 + 228) & 1) == 0 || !*(void *)(CMBaseObjectGetDerivedStorage() + 504))
  {
LABEL_24:
    CMTimeMake(&v25, 2, 1);
    CMTime time1 = *a4;
    CMTimeAdd(&v29, &time1, &v25);
    if (!v16) {
      goto LABEL_27;
    }
    goto LABEL_25;
  }
  CMTime v29 = *(CMTime *)(v16 + 216);
LABEL_25:
  if (fpfs_canCrossfade(DerivedStorage, v16, a2))
  {
    CMTime lhs = *a5;
    CMTime rhs = *(CMTime *)gFSPAudioCrossfadeDuration;
    CMTimeSubtract(&time1, &lhs, &rhs);
    *(_OWORD *)&a5->CMTimeValue value = *(_OWORD *)&time1.value;
    CMTimeEpoch epoch = time1.epoch;
    a5->CMTimeEpoch epoch = time1.epoch;
    *(_OWORD *)&lhs.CMTimeValue value = *(_OWORD *)&a5->value;
    lhs.CMTimeEpoch epoch = epoch;
    *(_OWORD *)&rhs.CMTimeValue value = kAudioRampingDownSilenceDuration;
    rhs.CMTimeEpoch epoch = 0;
    CMTimeSubtract(&time1, &lhs, &rhs);
    *a5 = time1;
  }
LABEL_27:
  CMTime time1 = v29;
  CMTime lhs = *a5;
  if (CMTimeCompare(&time1, &lhs) >= 1) {
    CMTime v29 = *a5;
  }
  CMTime time1 = v29;
  CMTime lhs = v31;
  if (CMTimeCompare(&time1, &lhs) < 0) {
    CMTime v29 = v31;
  }
  CMTime time1 = v29;
  CMTime lhs = *(CMTime *)(a2 + 296);
  if (CMTimeCompare(&time1, &lhs) < 0) {
    CMTime v29 = *(CMTime *)(a2 + 296);
  }
  if (CMBufferQueueIsEmpty(*(CMBufferQueueRef *)(a2 + 72)))
  {
    if (a3) {
      CMSampleBufferGetOutputPresentationTimeStamp(&v30, a3);
    }
    else {
      CMTime v30 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
    }
  }
  else
  {
    CMBufferQueueGetMinPresentationTimeStamp(&v30, *(CMBufferQueueRef *)(a2 + 72));
  }
  CMTime time1 = v30;
  CMTime lhs = *a5;
  if (CMTimeCompare(&time1, &lhs) > 0)
  {
    CMBufferQueueEnqueue(*(CMBufferQueueRef *)(a2 + 72), a3);
    uint64_t result = 0;
    if (!a7) {
      return result;
    }
    goto LABEL_40;
  }
  CMTime time1 = v29;
  if (fpfs_IsAudioTrackReadyToStart(a2, a3, &time1, v22)) {
    uint64_t result = v22;
  }
  else {
    uint64_t result = 0;
  }
  if (a7) {
LABEL_40:
  }
    *a7 = v29;
  return result;
}

BOOL fpfs_canCrossfade(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v3 = gFSPIsCrossfadeOn == 1 && *(void *)(a1 + 504) == 0;
  BOOL result = 0;
  if (v3
    && *(_DWORD *)(a2 + 32) == 1936684398
    && *(_DWORD *)(a3 + 32) == 1936684398
    && !fpfs_WantAudioHardwarePassthroughForTrack(a2, 0)
    && !fpfs_WantAudioHardwarePassthroughForTrack(a3, 0))
  {
    CMBaseObjectGetDerivedStorage();
    if (!*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 561)
      || !CMAudioFormatDescriptionIsAtmos(*(const opaqueCMFormatDescription **)(a2 + 40))
      && !CMAudioFormatDescriptionIsAtmos(*(const opaqueCMFormatDescription **)(a3 + 40)))
    {
      return 1;
    }
  }
  return result;
}

CMTime *fpfs_IsAudioTrackReadyToStart(uint64_t a1, opaqueCMSampleBuffer *a2, CMTime *a3, int a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v9 = CMBaseObjectGetDerivedStorage();
  memset(&v18, 0, sizeof(v18));
  memset(&v17, 0, sizeof(v17));
  CMTime lhs = *a3;
  CMTime rhs = *(CMTime *)(a1 + 396);
  CMTimeSubtract(&v19, &lhs, &rhs);
  if (!a2)
  {
    *(_OWORD *)&v17.CMTimeValue value = *(_OWORD *)(a1 + 216);
    CMTimeEpoch v10 = *(void *)(a1 + 232);
LABEL_5:
    v17.CMTimeEpoch epoch = v10;
    goto LABEL_7;
  }
  fpfs_GetEndOutputPresentationTimeStamp(a2, &v17);
  CMTime lhs = v17;
  CMTime rhs = v19;
  if ((CMTimeCompare(&lhs, &rhs) & 0x80000000) == 0)
  {
    CMBufferQueueEnqueue(*(CMBufferQueueRef *)(a1 + 72), a2);
    goto LABEL_7;
  }
  if (!*(unsigned char *)(a1 + 420))
  {
    CMBufferQueueReset(*(CMBufferQueueRef *)(a1 + 72));
    *(_OWORD *)&v17.CMTimeValue value = *MEMORY[0x1E4F1FA08];
    CMTimeEpoch v10 = *(void *)(MEMORY[0x1E4F1FA08] + 16);
    goto LABEL_5;
  }
LABEL_7:
  CMTime lhs = *a3;
  fpfs_TrimAudioTrack(a1, &lhs);
  if (!*(void *)(a1 + 384) || (BOOL result = (CMTime *)fpfs_isDecryptorReady(a1), result))
  {
    if (*(unsigned char *)(DerivedStorage + 2880) || *(unsigned char *)(v9 + 523)) {
      return 0;
    }
    BOOL result = *(CMTime **)(v9 + 536);
    if (result)
    {
      BOOL result = (CMTime *)FPSupport_IsAnAudioDeviceAvailable((uint64_t)result);
      if (result)
      {
        if (*(float *)(DerivedStorage + 848) == 0.0)
        {
          CMTime lhs = v17;
          CMTime rhs = *a3;
          return (CMTime *)(CMTimeCompare(&lhs, &rhs) > 0);
        }
        float v14 = 0.0;
        CMTime lhs = *a3;
        fpfs_GetTrackStartupQueueDuration(a1, &lhs, (uint64_t)&v18);
        uint64_t v12 = *(void *)a1;
        uint64_t v13 = (1 << *(unsigned char *)(a1 + 180));
        CMTime lhs = v18;
        LODWORD(result) = fpfs_CheckCanKeepUp(v12, (uint64_t)&lhs, MEMORY[0x1E4F1F9F8], v13, 0, &v14, 0, 0);
        BOOL result = result ? (CMTime *)result : (CMTime *)(v14 >= 1.0);
        if (a4 && !result)
        {
          if ((*(_DWORD *)(a1 + 228) & 0x1D) != 1) {
            return 0;
          }
          BOOL result = (CMTime *)fpfs_LastTrackOfType(*(void *)a1, *(_DWORD *)(a1 + 32), a1);
          if (result)
          {
            CMTime lhs = *(CMTime *)(a1 + 216);
            CMTime rhs = result[9];
            return (CMTime *)(CMTimeCompare(&lhs, &rhs) >= 0);
          }
        }
      }
    }
  }
  return result;
}

opaqueCMSampleBuffer *fpfs_TrimAudioTrack(uint64_t a1, CMTime *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  CMTime v12 = *a2;
  if (*(unsigned char *)(a1 + 420))
  {
    CMTime lhs = *a2;
    fpfs_DecodeTimeForAudioRandomAccessInBufferQueue(a1, &lhs, (uint64_t)&v12);
  }
  else
  {
    CMTime lhs = *a2;
    CMTime rhs = *(CMTime *)(a1 + 396);
    CMTimeSubtract(&v12, &lhs, &rhs);
  }
  BOOL result = (opaqueCMSampleBuffer *)CMBufferQueueGetHead(*(CMBufferQueueRef *)(a1 + 72));
  if (result)
  {
    int v5 = result;
    do
    {
      memset(&v11, 0, sizeof(v11));
      memset(&v10, 0, sizeof(v10));
      CMSampleBufferGetPresentationTimeStamp(&v9, v5);
      CMTime lhs = *(CMTime *)(a1 + 128);
      CMTimeAdd(&v10, &v9, &lhs);
      CMTime lhs = v10;
      CMTime rhs = *a2;
      BOOL result = (opaqueCMSampleBuffer *)CMTimeCompare(&lhs, &rhs);
      if ((result & 0x80000000) == 0) {
        break;
      }
      CMSampleBufferGetDuration(&v8, v5);
      CMTime lhs = v10;
      CMTimeAdd(&v11, &lhs, &v8);
      CMTime lhs = v11;
      CMTime rhs = v12;
      BOOL result = (opaqueCMSampleBuffer *)CMTimeCompare(&lhs, &rhs);
      if ((int)result > 0) {
        break;
      }
      CMBaseObjectGetDerivedStorage();
      if (dword_1E9350BB0 >= 2)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      CMBufferRef v7 = CMBufferQueueDequeueAndRetain(*(CMBufferQueueRef *)(a1 + 72));
      if (v7) {
        CFRelease(v7);
      }
      BOOL result = (opaqueCMSampleBuffer *)CMBufferQueueGetHead(*(CMBufferQueueRef *)(a1 + 72));
      int v5 = result;
    }
    while (result);
  }
  return result;
}

uint64_t fpfs_CheckCanKeepUp(uint64_t a1, uint64_t a2, CMTime *a3, uint64_t a4, uint64_t a5, _DWORD *a6, uint64_t a7, uint64_t a8)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  memset(&v24, 0, sizeof(v24));
  CMTime lhs = *a3;
  CMTime rhs = *(CMTime *)(DerivedStorage + 1184);
  CMTimeAdd(&v24, &lhs, &rhs);
  unsigned __int8 v23 = 0;
  uint64_t v16 = *(void *)(DerivedStorage + 936);
  if (v16)
  {
    *(_OWORD *)&v22.CMTimeValue value = *(_OWORD *)a2;
    v22.CMTimeEpoch epoch = *(void *)(a2 + 16);
    CMTime v21 = v24;
    uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v17) {
      uint64_t v18 = v17;
    }
    else {
      uint64_t v18 = 0;
    }
    uint64_t v20 = *(void (**)(uint64_t, CMTime *, CMTime *, uint64_t, uint64_t, _DWORD *, uint64_t, uint64_t, unsigned __int8 *))(v18 + 56);
    if (v20)
    {
      CMTime lhs = v22;
      CMTime rhs = v21;
      v20(v16, &lhs, &rhs, a4, a5, a6, a7, a8, &v23);
      return v23;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    uint64_t result = 0;
    if (a6) {
      *a6 = 0;
    }
  }
  return result;
}

void fpfs_DecodeTimeForAudioRandomAccessInBufferQueue(uint64_t a1@<X0>, CMTime *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  CMTime v13 = *a2;
  CMBaseObjectGetDerivedStorage();
  uint64_t v6 = (_OWORD *)(a1 + 128);
  if ((*(_DWORD *)(a1 + 140) & 0x1D) == 1)
  {
    CMTime lhs = *a2;
    *(_OWORD *)&rhs.CMTimeValue value = *v6;
    rhs.CMTimeEpoch epoch = *(void *)(a1 + 144);
    CMTimeSubtract(&v13, &lhs, &rhs);
  }
  CMTime rhs = v13;
  FigDecodeTimeForAudioRandomAccessInBufferQueue((uint64_t)&lhs);
  CMTimeValue value = lhs.value;
  CMTimeFlags flags = lhs.flags;
  CMTimeScale timescale = lhs.timescale;
  if ((lhs.flags & 0x1D) == 1)
  {
    CMTimeEpoch epoch = lhs.epoch;
    *(void *)a3 = value;
    *(_DWORD *)(a3 + 8) = timescale;
    *(_DWORD *)(a3 + 12) = flags;
    *(void *)(a3 + 16) = epoch;
    if ((*(_DWORD *)(a1 + 140) & 0x1D) != 1) {
      return;
    }
    rhs.CMTimeValue value = value;
    rhs.CMTimeScale timescale = timescale;
    rhs.CMTimeFlags flags = flags;
    rhs.CMTimeEpoch epoch = epoch;
    *(_OWORD *)&v10.CMTimeValue value = *v6;
    v10.CMTimeEpoch epoch = *(void *)(a1 + 144);
    CMTimeAdd(&lhs, &rhs, &v10);
    *(_OWORD *)a3 = *(_OWORD *)&lhs.value;
    CMTimeEpoch v9 = lhs.epoch;
  }
  else
  {
    *(_OWORD *)a3 = *(_OWORD *)&a2->value;
    CMTimeEpoch v9 = a2->epoch;
  }
  *(void *)(a3 + 16) = v9;
}

uint64_t fpfsi_GetExternalProtectionMethodRequiredForPlayback()
{
  unsigned int valuePtr = 0;
  uint64_t v0 = *(void *)(CMBaseObjectGetDerivedStorage() + 1048);
  if (!v0) {
    return 0;
  }
  while (*(_DWORD *)(v0 + 32) != 1986618469)
  {
    uint64_t v0 = *(void *)(v0 + 8);
    if (!v0) {
      return 0;
    }
  }
  uint64_t v1 = *(void *)(v0 + 384);
  if (!v1) {
    return 0;
  }
  CFNumberRef number = 0;
  uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
  uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v6 = *(void (**)(uint64_t, __CFString *, uint64_t, CFNumberRef *))(v4 + 48);
  if (v6)
  {
    v6(v1, @"ExternalProtectionMethodsRequiredForPlayback", AllocatorForMedia, &number);
    if (number)
    {
      CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr);
      if (number) {
        CFRelease(number);
      }
    }
  }
  return valuePtr;
}

uint64_t fpfs_ResolveAllWaitingTracks(const __CFArray *a1)
{
  uint64_t v284 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = *(void *)(DerivedStorage + 1048);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = DerivedStorage;
  uint64_t v5 = 0x7FFFFFFFLL;
  CMTimeValue v214 = *MEMORY[0x1E4F1FA08];
  CMTimeScale v213 = *(_DWORD *)(MEMORY[0x1E4F1FA08] + 8);
  CMTimeFlags v218 = *(_DWORD *)(MEMORY[0x1E4F1FA08] + 12);
  CMTimeEpoch v248 = *(void *)(MEMORY[0x1E4F1FA08] + 16);
  CMTimeValue v220 = *MEMORY[0x1E4F1F9F8];
  CMTimeScale v219 = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 8);
  CMTimeFlags v222 = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 12);
  CMTimeEpoch v250 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  CFArrayRef v232 = a1;
  uint64_t v208 = DerivedStorage;
  while (2)
  {
    if (*(_DWORD *)(v3 + 152) != 3 || v5 <= *(void *)(v3 + 64))
    {
      uint64_t v3 = *(void *)(v3 + 8);
      goto LABEL_9;
    }
    int v6 = fpfs_AreTracksReadyToPlay(a1);
    uint64_t v5 = *(void *)(v3 + 64);
    uint64_t v7 = v5;
    if (!v6)
    {
      if (!*(unsigned char *)(v4 + 470)) {
        goto LABEL_9;
      }
      uint64_t v9 = *(void *)(v3 + 64);
      uint64_t v10 = CMBaseObjectGetDerivedStorage();
      if (fpfs_getNext(v10, 0) != a1)
      {
        uint64_t v5 = v9;
        goto LABEL_9;
      }
      uint64_t v7 = *(void *)(v3 + 64);
      uint64_t v5 = v9;
    }
    uint64_t v209 = v5;
    uint64_t v8 = CMBaseObjectGetDerivedStorage();
    uint64_t v249 = *(void *)v8;
    uint64_t v233 = CMBaseObjectGetDerivedStorage();
    memset(&v267, 0, sizeof(v267));
    long long v251 = *MEMORY[0x1E4F1FA08];
    *(_OWORD *)&v266.CMTimeValue value = *MEMORY[0x1E4F1FA08];
    v266.CMTimeEpoch epoch = v248;
    memset(&v265, 0, sizeof(v265));
    fpfs_GetTime(v8, (uint64_t)&v265);
    CMTimeFlags flags = v265.flags;
    CMTimeScale timescale = v265.timescale;
    CMTimeValue value = v265.value;
    CMTimeEpoch epoch = v265.epoch;
    if (*(unsigned char *)(v8 + 332))
    {
      uint64_t v11 = *(void *)(CMBaseObjectGetDerivedStorage() + 1048);
      if (v11)
      {
        uint64_t v12 = 0x7FFFFFFFFFFFFFFFLL;
        do
        {
          if (*(_DWORD *)(v11 + 152) == 6)
          {
            int v13 = *(_DWORD *)(v11 + 32);
            BOOL v14 = v13 == 1986618469 || v13 == 1936684398;
            if (v14 && *(void *)(v11 + 64) < v12) {
              uint64_t v12 = *(void *)(v11 + 64);
            }
          }
          uint64_t v11 = *(void *)(v11 + 8);
        }
        while (v11);
      }
      else
      {
        uint64_t v12 = 0x7FFFFFFFFFFFFFFFLL;
      }
      BOOL v221 = v12 >= v7;
    }
    else
    {
      BOOL v221 = 0;
    }
    char v264 = 0;
    uint64_t v263 = 0;
    uint64_t v268 = 0;
    v259 = (uint64_t *)(v8 + 1048);
    uint64_t v258 = v8;
    uint64_t v260 = v7;
    while (fpfsi_IterateMutableTrackList(v259, &v268, &v263))
    {
      uint64_t v15 = v268;
      if (*(void *)(v268 + 64) == v7 && (~*(_DWORD *)(v268 + 140) & 0x11) == 0)
      {
        fpfs_FindTrackStartTime(v8, v7, (uint64_t)&time);
        *(CMTime *)(v15 + 192) = time;
        uint64_t v16 = *(void *)(v8 + 1048);
        if (v16)
        {
          while (*(void *)(v16 + 64) != v7 || *(unsigned char *)(v16 + 456) || (*(_DWORD *)(v16 + 140) & 0x1D) != 1)
          {
            uint64_t v16 = *(void *)(v16 + 8);
            if (!v16) {
              goto LABEL_36;
            }
          }
          *(_OWORD *)&time.CMTimeValue value = *(_OWORD *)(v16 + 128);
          CMTimeEpoch v17 = *(void *)(v16 + 144);
        }
        else
        {
LABEL_36:
          *(_OWORD *)&time.CMTimeValue value = *MEMORY[0x1E4F1F9F8];
          CMTimeEpoch v17 = v250;
        }
        time.CMTimeEpoch epoch = v17;
        *(_OWORD *)(v15 + 128) = *(_OWORD *)&time.value;
        *(void *)(v15 + 144) = v17;
        uint64_t v18 = MEMORY[0x1E4F1FA48];
        *(_OWORD *)(v15 + 216) = *MEMORY[0x1E4F1FA48];
        *(void *)(v15 + 232) = *(void *)(v18 + 16);
        if (*(unsigned char *)(v15 + 180) == 2 && ((*(unsigned char *)(v15 + 204) & 1) == 0 || (*(unsigned char *)(v15 + 140) & 1) == 0))
        {
          Head = (opaqueCMSampleBuffer *)CMBufferQueueGetHead(*(CMBufferQueueRef *)(v15 + 72));
          fpfs_SetTrackStartTimeAndTimeOffset(v15, Head, 0);
        }
        CMBufferQueueCallForEachBuffer(*(CMBufferQueueRef *)(v15 + 72), (OSStatus (__cdecl *)(CMBufferRef, void *))fpfs_AdjustTime, (void *)v15);
        if (dword_1E9350BB0)
        {
          LODWORD(rhs.value) = 0;
          LOBYTE(v282) = 0;
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v21 = rhs.value;
          if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, (os_log_type_t)v282)) {
            unsigned int v22 = v21;
          }
          else {
            unsigned int v22 = v21 & 0xFFFFFFFE;
          }
          if (v22)
          {
            if (v249) {
              unsigned __int8 v23 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
            }
            else {
              unsigned __int8 v23 = "";
            }
            v244 = v23;
            if (a1) {
              CMTime v24 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
            }
            else {
              CMTime v24 = "";
            }
            uint64_t v25 = *(void *)(v15 + 16);
            CMTime time = *(CMTime *)(v15 + 128);
            Float64 Seconds = CMTimeGetSeconds(&time);
            CMTime time = *(CMTime *)(v15 + 192);
            Float64 v27 = CMTimeGetSeconds(&time);
            LODWORD(time2.value) = 136316930;
            *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpfs_ResolveStartTimeAndEnqueueBuffers";
            LOWORD(time2.flags) = 2048;
            *(void *)((char *)&time2.flags + 2) = v249;
            HIWORD(time2.epoch) = 2082;
            v272 = v244;
            __int16 v273 = 2048;
            CFArrayRef v274 = a1;
            __int16 v275 = 2082;
            v276 = v24;
            __int16 v277 = 1024;
            LODWORD(v278[0]) = v25;
            WORD2(v278[0]) = 2048;
            *(Float64 *)((char *)v278 + 6) = Seconds;
            HIWORD(v278[1]) = 2048;
            *(Float64 *)&v278[2] = v27;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          uint64_t v7 = v260;
        }
        uint64_t v8 = v258;
        if (*(unsigned char *)(v15 + 182)) {
          fpfs_StopFeedingTrack(v15, 0, 1);
        }
      }
    }
    if (*(unsigned char *)(v8 + 2448))
    {
      CMTimeEpoch v28 = v248;
      if (*(unsigned char *)(v8 + 2412))
      {
        *(_OWORD *)(v8 + 1496) = *(_OWORD *)(v8 + 2400);
        *(void *)(v8 + 1512) = *(void *)(v8 + 2416);
        BOOL v221 = 1;
      }
    }
    else
    {
      CMTimeEpoch v28 = v248;
    }
    uint64_t v29 = CMBaseObjectGetDerivedStorage();
    CMTimeValue v282 = v214;
    CMTimeScale v283 = v213;
    CMTimeValue v280 = v220;
    CMTimeFlags v30 = v218;
    CMTimeScale v281 = v219;
    CMTimeFlags v31 = v222;
    CMTimeEpoch v32 = v250;
    v245 = (uint64_t *)v29;
    uint64_t v33 = *(void *)(v29 + 1048);
    if (v33)
    {
      uint64_t v34 = v7 - 1;
      CMTimeFlags v30 = v218;
      CMTimeEpoch v32 = v250;
      CMTimeFlags v31 = v222;
      CMTimeEpoch v28 = v248;
      do
      {
        if (*(void *)(v33 + 64) == v34
          && (*(unsigned char *)(v33 + 228) & 1) != 0
          && (time.CMTimeValue value = v282,
              time.CMTimeScale timescale = v283,
              time.CMTimeFlags flags = v30,
              time.CMTimeEpoch epoch = v28,
              CMTime time2 = *(CMTime *)(v33 + 216),
              CMTimeCompare(&time, &time2) < 0))
        {
          CMTimeValue v282 = *(void *)(v33 + 216);
          CMTimeScale v283 = *(_DWORD *)(v33 + 224);
          CMTimeFlags v30 = *(_DWORD *)(v33 + 228);
          CMTimeEpoch v28 = *(void *)(v33 + 232);
          if ((v31 & 1) == 0)
          {
LABEL_70:
            uint64_t v7 = v260;
            if (*(void *)(v33 + 64) == v260 && *(_DWORD *)(v33 + 32) == 1986618469)
            {
              long long v35 = (opaqueCMSampleBuffer *)CMBufferQueueGetHead(*(CMBufferQueueRef *)(v33 + 72));
              if (v35)
              {
                CMSampleBufferGetOutputPresentationTimeStamp(&time, v35);
                CMTimeValue v280 = time.value;
                CMTimeFlags v31 = time.flags;
                CMTimeScale v281 = time.timescale;
                CMTimeEpoch v32 = time.epoch;
              }
              else
              {
                CMTimeValue v280 = v220;
                CMTimeScale v281 = v219;
                CMTimeFlags v31 = v222;
                CMTimeEpoch v32 = v250;
              }
            }
            goto LABEL_76;
          }
        }
        else if ((v31 & 1) == 0)
        {
          goto LABEL_70;
        }
        uint64_t v7 = v260;
LABEL_76:
        uint64_t v33 = *(void *)(v33 + 8);
      }
      while (v33);
    }
    if ((v30 & 0x1D) == 1)
    {
      uint64_t v36 = v245[131];
      if (v36)
      {
        CMTimeEpoch v240 = v32;
        do
        {
          if (*(void *)(v36 + 64) == v7 && (*(unsigned char *)(v36 + 204) & 1) != 0)
          {
            uint64_t v37 = (_OWORD *)(v36 + 192);
            time.CMTimeValue value = v282;
            time.CMTimeScale timescale = v283;
            time.CMTimeFlags flags = v30;
            time.CMTimeEpoch epoch = v28;
            CMTime time2 = *(CMTime *)(v36 + 192);
            if (CMTimeCompare(&time, &time2) >= 1)
            {
              if (dword_1E9350BB0)
              {
                LODWORD(rhs.value) = 0;
                os_log_type_t type = OS_LOG_TYPE_DEFAULT;
                v38 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                unsigned int v39 = rhs.value;
                if (os_log_type_enabled(v38, type)) {
                  unsigned int v40 = v39;
                }
                else {
                  unsigned int v40 = v39 & 0xFFFFFFFE;
                }
                if (v40)
                {
                  uint64_t v41 = *v245;
                  if (*v245) {
                    CMTimeEpoch v42 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
                  }
                  else {
                    CMTimeEpoch v42 = "";
                  }
                  v237 = v42;
                  if (v232) {
                    CMTimeEpoch v43 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
                  }
                  else {
                    CMTimeEpoch v43 = "";
                  }
                  v234 = v43;
                  uint64_t v228 = *(void *)(v36 + 16);
                  *(_OWORD *)&time.CMTimeValue value = *v37;
                  time.CMTimeEpoch epoch = *(void *)(v36 + 208);
                  Float64 v44 = CMTimeGetSeconds(&time);
                  time.CMTimeValue value = v282;
                  time.CMTimeScale timescale = v283;
                  time.CMTimeFlags flags = v30;
                  time.CMTimeEpoch epoch = v28;
                  Float64 v45 = CMTimeGetSeconds(&time);
                  LODWORD(time2.value) = 136316930;
                  *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpfs_RealignTrackStartTime";
                  LOWORD(time2.flags) = 2048;
                  *(void *)((char *)&time2.flags + 2) = v41;
                  HIWORD(time2.epoch) = 2082;
                  v272 = v237;
                  __int16 v273 = 2048;
                  CFArrayRef v274 = v232;
                  __int16 v275 = 2082;
                  v276 = v234;
                  __int16 v277 = 1024;
                  LODWORD(v278[0]) = v228;
                  WORD2(v278[0]) = 2048;
                  *(Float64 *)((char *)v278 + 6) = v44;
                  HIWORD(v278[1]) = 2048;
                  *(Float64 *)&v278[2] = v45;
                  _os_log_send_and_compose_impl();
                  uint64_t v7 = v260;
                }
                fig_log_call_emit_and_clean_up_after_send_and_compose();
                CMTimeEpoch v32 = v240;
              }
              *(void *)uint64_t v37 = v282;
              *(_DWORD *)(v36 + 200) = v283;
              *(_DWORD *)(v36 + 204) = v30;
              *(void *)(v36 + 208) = v28;
            }
          }
          uint64_t v36 = *(void *)(v36 + 8);
        }
        while (v36);
      }
      a1 = v232;
      if ((v31 & 0x1D) == 1)
      {
        time.CMTimeValue value = v280;
        time.CMTimeScale timescale = v281;
        time.CMTimeFlags flags = v31;
        time.CMTimeEpoch epoch = v32;
        time2.CMTimeValue value = v282;
        time2.CMTimeScale timescale = v283;
        time2.CMTimeFlags flags = v30;
        time2.CMTimeEpoch epoch = v28;
        if (CMTimeCompare(&time, &time2) < 0)
        {
          time2.CMTimeValue value = v282;
          time2.CMTimeScale timescale = v283;
          time2.CMTimeFlags flags = v30;
          time2.CMTimeEpoch epoch = v28;
          rhs.CMTimeValue value = v280;
          rhs.CMTimeScale timescale = v281;
          rhs.CMTimeFlags flags = v31;
          rhs.CMTimeEpoch epoch = v32;
          CMTimeSubtract(&time, &time2, &rhs);
          fpfs_TimeShiftDiscontinuityDomain((uint64_t)v245, v7, &time);
        }
      }
    }
    uint64_t v268 = *v259;
    uint64_t v46 = v268;
    if (v268)
    {
      int v241 = 1;
      CMTimeFlags v246 = v218;
      CMTimeEpoch v47 = v248;
      CMTimeEpoch v243 = v248;
      CMTimeFlags v235 = v218;
      CMTimeEpoch v238 = v248;
      CMTimeValue v229 = v214;
      CMTimeScale v227 = v213;
      CMTimeValue v48 = v214;
      CMTimeScale v223 = v213;
      long long v49 = v251;
      while (1)
      {
        if (*(void *)(v46 + 64) == v7 && *(void *)(v46 + 40))
        {
          int v50 = *(_DWORD *)(v46 + 32);
          if (v50 == 1986618469 || v50 == 1936684398) {
            break;
          }
        }
LABEL_156:
        if ((*(_DWORD *)(v46 + 204) & 0x1D) == 1 && *(void *)(v46 + 64) == v7)
        {
          CMTimeScale timescale = *(_DWORD *)(v46 + 200);
          CMTimeFlags flags = *(_DWORD *)(v46 + 204);
          CMTimeValue value = *(void *)(v46 + 192);
          CMTimeEpoch epoch = *(void *)(v46 + 208);
        }
        uint64_t v46 = *(void *)(v46 + 8);
        if (!v46)
        {
          uint64_t v268 = 0;
          CMTimeEpoch v74 = v238;
          CMTimeScale v75 = v223;
          CMTimeFlags v76 = v235;
          CMTimeValue v77 = v229;
          goto LABEL_162;
        }
      }
      if (!dword_1E9350BB0)
      {
LABEL_128:
        CFArrayRef v59 = (opaqueCMSampleBuffer *)CMBufferQueueGetHead(*(CMBufferQueueRef *)(v46 + 72));
        if (v59)
        {
          CMSampleBufferGetOutputPresentationTimeStamp(&time, v59);
          CMTimeValue v60 = time.value;
          CMTimeScale v62 = time.timescale;
          CMTimeFlags v61 = time.flags;
          CMTimeEpoch v225 = time.epoch;
          int v63 = *(_DWORD *)(v46 + 32);
          if (v63 == 1986618469)
          {
            time.CMTimeValue value = v229;
            time.CMTimeScale timescale = v227;
            time.CMTimeFlags flags = v246;
            time.CMTimeEpoch epoch = v243;
            *(_OWORD *)&time2.CMTimeValue value = v251;
            time2.CMTimeEpoch epoch = v47;
            if (!CMTimeCompare(&time, &time2))
            {
              CMTimeScale v227 = v62;
              CMTimeValue v229 = v60;
              CMTimeEpoch v243 = v225;
              CMTimeFlags v246 = v61;
            }
            int v63 = *(_DWORD *)(v46 + 32);
          }
          if (v63 == 1936684398)
          {
            time.CMTimeValue value = v48;
            time.CMTimeScale timescale = v223;
            time.CMTimeFlags flags = v235;
            time.CMTimeEpoch epoch = v238;
            *(_OWORD *)&time2.CMTimeValue value = v251;
            time2.CMTimeEpoch epoch = v47;
            if (!CMTimeCompare(&time, &time2))
            {
              CMTimeScale v223 = v62;
              CMTimeValue v48 = v60;
              CMTimeEpoch v238 = v225;
              CMTimeFlags v235 = v61;
            }
          }
          if (dword_1E9350BB0)
          {
            CMTimeFlags v215 = v61;
            LODWORD(rhs.value) = 0;
            LOBYTE(v282) = 0;
            uint64_t v64 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int v65 = rhs.value;
            if (os_log_type_enabled(v64, (os_log_type_t)v282)) {
              unsigned int v66 = v65;
            }
            else {
              unsigned int v66 = v65 & 0xFFFFFFFE;
            }
            if (v66)
            {
              uint64_t v67 = *(void *)v258;
              if (*(void *)v258) {
                v68 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
              }
              else {
                v68 = "";
              }
              v211 = v68;
              CMTimeValue v212 = v48;
              if (a1) {
                v210 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
              }
              else {
                v210 = "";
              }
              CFArrayRef v69 = a1;
              uint64_t v70 = *(void *)(v46 + 16);
              time.CMTimeValue value = v60;
              time.CMTimeScale timescale = v62;
              time.CMTimeFlags flags = v215;
              time.CMTimeEpoch epoch = v225;
              Float64 v71 = CMTimeGetSeconds(&time);
              CMTime time = *(CMTime *)(v46 + 216);
              Float64 v72 = CMTimeGetSeconds(&time);
              LODWORD(time2.value) = 136317442;
              *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpfs_ResolveStartTimeAndEnqueueBuffers";
              LOWORD(time2.flags) = 2048;
              *(void *)((char *)&time2.flags + 2) = v67;
              HIWORD(time2.epoch) = 2082;
              v272 = v211;
              __int16 v273 = 2048;
              CFArrayRef v274 = v69;
              __int16 v275 = 2082;
              v276 = v210;
              __int16 v277 = 2048;
              v278[0] = v70;
              LOWORD(v278[1]) = 2048;
              *(void *)((char *)&v278[1] + 2) = v60;
              WORD1(v278[2]) = 1024;
              HIDWORD(v278[2]) = v62;
              LOWORD(v278[3]) = 2048;
              *(Float64 *)((char *)&v278[3] + 2) = v71;
              WORD1(v278[4]) = 2048;
              *(Float64 *)((char *)&v278[4] + 4) = v72;
              _os_log_send_and_compose_impl();
              a1 = v69;
              CMTimeValue v48 = v212;
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            CMTimeEpoch v47 = v248;
            uint64_t v7 = v260;
          }
          CMTime time = v266;
          CMTime time2 = *(CMTime *)(v46 + 216);
          if (CMTimeCompare(&time, &time2) < 0) {
            CMTime v266 = *(CMTime *)(v46 + 216);
          }
          int v73 = v241;
          if (!*(unsigned char *)(v46 + 182)) {
            int v73 = 0;
          }
          int v241 = v73;
        }
        long long v49 = v251;
        goto LABEL_156;
      }
      LODWORD(rhs.value) = 0;
      LOBYTE(v282) = 0;
      v52 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v53 = rhs.value;
      if (os_log_type_enabled(v52, (os_log_type_t)v282)) {
        unsigned int v54 = v53;
      }
      else {
        unsigned int v54 = v53 & 0xFFFFFFFE;
      }
      if (!v54)
      {
LABEL_127:
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        CMTimeEpoch v47 = v248;
        uint64_t v7 = v260;
        goto LABEL_128;
      }
      if (v249)
      {
        v55 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
        if (a1)
        {
LABEL_120:
          long long v56 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
LABEL_124:
          long long v57 = "audio";
          if (*(_DWORD *)(v46 + 32) == 1986618469) {
            long long v57 = "video";
          }
          uint64_t v58 = *(void *)(v46 + 16);
          LODWORD(time2.value) = 136316674;
          *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpfs_ResolveStartTimeAndEnqueueBuffers";
          LOWORD(time2.flags) = 2048;
          *(void *)((char *)&time2.flags + 2) = v249;
          HIWORD(time2.epoch) = 2082;
          v272 = v55;
          __int16 v273 = 2048;
          CFArrayRef v274 = a1;
          __int16 v275 = 2082;
          v276 = v56;
          __int16 v277 = 2082;
          v278[0] = v57;
          LOWORD(v278[1]) = 2048;
          *(void *)((char *)&v278[1] + 2) = v58;
          _os_log_send_and_compose_impl();
          goto LABEL_127;
        }
      }
      else
      {
        v55 = "";
        if (a1) {
          goto LABEL_120;
        }
      }
      long long v56 = "";
      goto LABEL_124;
    }
    LOBYTE(v241) = 1;
    CMTimeScale v75 = v213;
    CMTimeValue v77 = v214;
    CMTimeValue v48 = v214;
    CMTimeScale v227 = v213;
    CMTimeEpoch v47 = v248;
    CMTimeEpoch v74 = v248;
    CMTimeFlags v76 = v218;
    CMTimeEpoch v243 = v248;
    CMTimeFlags v246 = v218;
    long long v49 = v251;
LABEL_162:
    time.CMTimeValue value = v48;
    CMTimeScale v78 = v75;
    time.CMTimeScale timescale = v75;
    time.CMTimeFlags flags = v76;
    CMTimeFlags v236 = v76;
    CMTimeEpoch v239 = v74;
    time.CMTimeEpoch epoch = v74;
    *(_OWORD *)&time2.CMTimeValue value = v49;
    time2.CMTimeEpoch epoch = v47;
    uint64_t v79 = v258;
    if (CMTimeCompare(&time, &time2))
    {
      time.CMTimeValue value = v77;
      time.CMTimeScale timescale = v227;
      time.CMTimeFlags flags = v246;
      time.CMTimeEpoch epoch = v243;
      *(_OWORD *)&time2.CMTimeValue value = v251;
      time2.CMTimeEpoch epoch = v47;
      if (CMTimeCompare(&time, &time2))
      {
        time.CMTimeValue value = v77;
        time.CMTimeScale timescale = v227;
        time.CMTimeFlags flags = v246;
        time.CMTimeEpoch epoch = v243;
        time2.CMTimeValue value = v48;
        CMTimeValue v230 = v77;
        CMTimeFlags v80 = v236;
        time2.CMTimeScale timescale = v78;
        time2.CMTimeFlags flags = v236;
        CMTimeEpoch v81 = v239;
        time2.CMTimeEpoch epoch = v239;
        int32_t v82 = CMTimeCompare(&time, &time2);
        if (v82 <= 0) {
          CMTimeScale v83 = v227;
        }
        else {
          CMTimeScale v83 = v78;
        }
        if (v82 <= 0) {
          CMTimeValue v84 = v230;
        }
        else {
          CMTimeValue v84 = v48;
        }
        if (v82 <= 0) {
          CMTimeEpoch v85 = v239;
        }
        else {
          CMTimeEpoch v85 = v243;
        }
        if (v82 <= 0) {
          CMTimeFlags v86 = v236;
        }
        else {
          CMTimeFlags v86 = v246;
        }
        if (v82 <= 0) {
          CMTimeEpoch v81 = v243;
        }
        CMTimeEpoch v239 = v81;
        if (v82 <= 0) {
          CMTimeFlags v80 = v246;
        }
        CMTimeFlags v236 = v80;
        if (v82 <= 0) {
          CMTimeScale v87 = v78;
        }
        else {
          CMTimeScale v87 = v227;
        }
        if (v82 > 0) {
          CMTimeValue v48 = v230;
        }
        CMTimeScale v227 = v83;
        CMTimeValue v77 = v84;
        CMTimeEpoch v243 = v85;
        CMTimeFlags v246 = v86;
      }
      else
      {
        CMTimeScale v87 = v78;
        CMTimeScale v227 = v78;
        CMTimeValue v77 = v48;
        CMTimeEpoch v243 = v239;
        CMTimeFlags v246 = v236;
      }
      CMTimeValue v88 = value;
      CMTimeEpoch v89 = epoch;
      CMTimeScale v90 = timescale;
      CMTimeFlags v91 = flags;
      uint64_t v79 = v258;
    }
    else
    {
      CMTimeEpoch v239 = v243;
      CMTimeFlags v236 = v246;
      CMTimeScale v87 = v227;
      CMTimeValue v48 = v77;
      CMTimeValue v88 = value;
      CMTimeEpoch v89 = epoch;
      CMTimeScale v90 = timescale;
      CMTimeFlags v91 = flags;
    }
    time.CMTimeValue value = v88;
    time.CMTimeScale timescale = v90;
    time.CMTimeFlags flags = v91;
    time.CMTimeEpoch epoch = v89;
    CMTime time2 = v265;
    int32_t v92 = CMTimeCompare(&time, &time2);
    char v93 = v221;
    if (v92 >= 0) {
      char v93 = 1;
    }
    a1 = v232;
    CMTimeValue v231 = v77;
    if (v93)
    {
      int v226 = 0;
      goto LABEL_210;
    }
    if (dword_1E9350BB0)
    {
      LODWORD(rhs.value) = 0;
      LOBYTE(v282) = 0;
      v94 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v95 = rhs.value;
      if (os_log_type_enabled(v94, (os_log_type_t)v282)) {
        unsigned int v96 = v95;
      }
      else {
        unsigned int v96 = v95 & 0xFFFFFFFE;
      }
      if (!v96) {
        goto LABEL_205;
      }
      if (v249)
      {
        v97 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
        if (v232)
        {
LABEL_200:
          v98 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
LABEL_204:
          CMTime time = v265;
          Float64 v99 = CMTimeGetSeconds(&time);
          time.CMTimeValue value = value;
          time.CMTimeScale timescale = timescale;
          time.CMTimeFlags flags = flags;
          time.CMTimeEpoch epoch = epoch;
          Float64 v100 = CMTimeGetSeconds(&time);
          LODWORD(time2.value) = 136316674;
          *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpfs_ResolveStartTimeAndEnqueueBuffers";
          LOWORD(time2.flags) = 2048;
          *(void *)((char *)&time2.flags + 2) = v249;
          HIWORD(time2.epoch) = 2082;
          v272 = v97;
          __int16 v273 = 2048;
          CFArrayRef v274 = v232;
          __int16 v275 = 2082;
          v276 = v98;
          __int16 v277 = 2048;
          *(Float64 *)v278 = v99;
          LOWORD(v278[1]) = 2048;
          *(Float64 *)((char *)&v278[1] + 2) = v100;
          _os_log_send_and_compose_impl();
          uint64_t v79 = v258;
LABEL_205:
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          uint64_t v7 = v260;
          goto LABEL_206;
        }
      }
      else
      {
        v97 = "";
        if (v232) {
          goto LABEL_200;
        }
      }
      v98 = "";
      goto LABEL_204;
    }
LABEL_206:
    if (*(float *)(v79 + 848) == 0.0)
    {
      int v226 = 0;
    }
    else
    {
      fpfs_setUnlikelyToKeepUpAndRanDry(v232);
      fpfs_SetRateWithFadeInternal(*(void *)v79, MEMORY[0x1E4F1F9F8], MEMORY[0x1E4F1F9F8], MEMORY[0x1E4F1F9F8], 0.0);
      int v226 = 1;
    }
    fpfs_GetTime(v79, (uint64_t)&time);
    CMTimeScale timescale = time.timescale;
    CMTimeFlags flags = time.flags;
    CMTimeValue value = time.value;
    CMTimeEpoch epoch = time.epoch;
LABEL_210:
    long long v101 = v251;
    int v102 = v246 & 0x1D;
    CMTimeFlags v103 = v246;
    if (v102 != 1) {
      goto LABEL_249;
    }
    time.CMTimeValue value = v48;
    time.CMTimeScale timescale = v87;
    time.CMTimeFlags flags = v246;
    time.CMTimeEpoch epoch = v243;
    CMTimeValue v104 = value;
    time2.CMTimeValue value = value;
    time2.CMTimeScale timescale = timescale;
    time2.CMTimeFlags flags = flags;
    CMTimeEpoch v105 = epoch;
    time2.CMTimeEpoch epoch = epoch;
    int32_t v106 = CMTimeCompare(&time, &time2);
    if (v106 < 0)
    {
      CMTimeFlags v107 = flags;
    }
    else
    {
      CMTimeEpoch v105 = v243;
      CMTimeFlags v107 = v246;
    }
    if (v106 < 0) {
      CMTimeScale v108 = timescale;
    }
    else {
      CMTimeScale v108 = v87;
    }
    a1 = v232;
    if (v106 >= 0) {
      CMTimeValue v104 = v48;
    }
    CMTimeValue value = v104;
    CMTimeEpoch epoch = v105;
    CMTimeEpoch v243 = v105;
    CMTimeFlags flags = v107;
    CMTimeFlags v103 = v107;
    CMTimeScale timescale = v108;
    CMTimeScale v87 = v108;
    CMTimeValue v48 = v104;
    uint64_t v109 = v79;
    if (*(unsigned char *)(v79 + 1508))
    {
      v110 = (CMTime *)(v79 + 1496);
      time.CMTimeValue value = value;
      time.CMTimeScale timescale = v108;
      time.CMTimeFlags flags = v107;
      time.CMTimeEpoch epoch = epoch;
      CMTime time2 = *v110;
      if (CMTimeCompare(&time, &time2) < 1)
      {
        time.CMTimeValue value = value;
        time.CMTimeScale timescale = v108;
        time.CMTimeFlags flags = v107;
        time.CMTimeEpoch epoch = epoch;
        CMTime time2 = *v110;
        CMTimeEpoch v243 = epoch;
        CMTimeFlags v103 = v107;
        CMTimeScale v87 = v108;
        CMTimeValue v48 = value;
        uint64_t v109 = v258;
        if (CMTimeCompare(&time, &time2) <= 0)
        {
          CMTime time = *v110;
          CMTime time2 = v266;
          CMTimeEpoch v243 = v248;
          CMTimeFlags v103 = v218;
          CMTimeScale v87 = v213;
          CMTimeValue v48 = v214;
          if (CMTimeCompare(&time, &time2) >= 1)
          {
            CMTimeValue v48 = value;
            CMTimeEpoch v243 = epoch;
            CMTimeFlags v103 = v107;
            CMTimeScale v87 = v108;
            if (*(unsigned char *)(v258 + 470)) {
              return 4294950069;
            }
          }
        }
        goto LABEL_240;
      }
      if (!dword_1E9350BB0) {
        goto LABEL_239;
      }
      LODWORD(rhs.value) = 0;
      LOBYTE(v282) = 0;
      v111 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v112 = rhs.value;
      if (os_log_type_enabled(v111, (os_log_type_t)v282)) {
        unsigned int v113 = v112;
      }
      else {
        unsigned int v113 = v112 & 0xFFFFFFFE;
      }
      if (!v113)
      {
LABEL_238:
        fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_239:
        *(_OWORD *)&v110->CMTimeValue value = *MEMORY[0x1E4F1F9F8];
        v110->CMTimeEpoch epoch = v250;
        CMTimeValue v48 = value;
        CMTimeEpoch v243 = epoch;
        CMTimeFlags v103 = flags;
        CMTimeScale v87 = timescale;
        uint64_t v109 = v258;
        goto LABEL_240;
      }
      if (v249)
      {
        v114 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
        if (v232)
        {
LABEL_228:
          v115 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
LABEL_237:
          time.CMTimeValue value = value;
          time.CMTimeScale timescale = timescale;
          time.CMTimeFlags flags = flags;
          time.CMTimeEpoch epoch = epoch;
          Float64 v116 = CMTimeGetSeconds(&time);
          CMTime time = *v110;
          Float64 v117 = CMTimeGetSeconds(&time);
          LODWORD(time2.value) = 136316674;
          *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpfs_ResolveStartTimeAndEnqueueBuffers";
          LOWORD(time2.flags) = 2048;
          *(void *)((char *)&time2.flags + 2) = v249;
          HIWORD(time2.epoch) = 2082;
          v272 = v114;
          __int16 v273 = 2048;
          CFArrayRef v274 = v232;
          __int16 v275 = 2082;
          v276 = v115;
          __int16 v277 = 2048;
          *(Float64 *)v278 = v116;
          LOWORD(v278[1]) = 2048;
          *(Float64 *)((char *)&v278[1] + 2) = v117;
          _os_log_send_and_compose_impl();
          goto LABEL_238;
        }
      }
      else
      {
        v114 = "";
        if (v232) {
          goto LABEL_228;
        }
      }
      v115 = "";
      goto LABEL_237;
    }
LABEL_240:
    uint64_t v7 = v260;
    long long v101 = v251;
    if (*(unsigned char *)(v109 + 1508))
    {
      int v102 = 1;
    }
    else
    {
      uint64_t v268 = *v259;
      uint64_t v118 = v268;
      int v102 = 1;
      if (v268)
      {
        do
        {
          if (*(void *)(v118 + 64) == v260 && *(void *)(v118 + 40) && *(_DWORD *)(v118 + 32) == 1986618469)
          {
            CMBufferQueueCallForEachBuffer(*(CMBufferQueueRef *)(v118 + 72), (OSStatus (__cdecl *)(CMBufferRef, void *))fpfs_RemoveDoNotDisplayFromBuffer, 0);
            long long v101 = v251;
          }
          uint64_t v118 = *(void *)(v118 + 8);
        }
        while (v118);
        uint64_t v268 = 0;
      }
    }
LABEL_249:
    CMTimeFlags v247 = v103;
    int v119 = v103 & 0x1D;
    if (v119 != 1) {
      goto LABEL_298;
    }
    *(_OWORD *)&v267.CMTimeValue value = v101;
    uint64_t v120 = *v259;
    v267.CMTimeEpoch epoch = v248;
    uint64_t v268 = v120;
    uint64_t v121 = 0;
    if (v120)
    {
      do
      {
        uint64_t v122 = *(void *)(v120 + 64);
        if (v122 < v7 || v122 == v7 && *(unsigned char *)(v120 + 456)) && (*(unsigned char *)(v120 + 228))
        {
          CMTime time = v267;
          CMTime time2 = *(CMTime *)(v120 + 216);
          if (CMTimeCompare(&time, &time2) < 0)
          {
            CMTime v267 = *(CMTime *)(v120 + 216);
            uint64_t v121 = v120;
          }
        }
        uint64_t v120 = *(void *)(v120 + 8);
      }
      while (v120);
      uint64_t v268 = 0;
    }
    time.CMTimeValue value = v48;
    time.CMTimeScale timescale = v87;
    time.CMTimeFlags flags = v247;
    time.CMTimeEpoch epoch = v243;
    time2.CMTimeValue value = v231;
    time2.CMTimeScale timescale = v227;
    time2.CMTimeFlags flags = v236;
    time2.CMTimeEpoch epoch = v239;
    if (CMTimeCompare(&time, &time2) > 0)
    {
      if (v121)
      {
        CMTime time = v267;
        time2.CMTimeValue value = v48;
        time2.CMTimeScale timescale = v87;
        time2.CMTimeFlags flags = v247;
        time2.CMTimeEpoch epoch = v243;
        if (CMTimeCompare(&time, &time2) < 0)
        {
          if (dword_1E9350BB0)
          {
            LODWORD(rhs.value) = 0;
            LOBYTE(v282) = 0;
            v123 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int v124 = rhs.value;
            if (os_log_type_enabled(v123, (os_log_type_t)v282)) {
              unsigned int v125 = v124;
            }
            else {
              unsigned int v125 = v124 & 0xFFFFFFFE;
            }
            if (v125)
            {
              if (v249) {
                v126 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
              }
              else {
                v126 = "";
              }
              v217 = v126;
              int v224 = v102;
              if (a1) {
                v216 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
              }
              else {
                v216 = "";
              }
              uint64_t v135 = *(void *)(v121 + 16);
              time.CMTimeValue value = v48;
              time.CMTimeScale timescale = v87;
              time.CMTimeFlags flags = v247;
              time.CMTimeEpoch epoch = v243;
              Float64 v136 = CMTimeGetSeconds(&time);
              time.CMTimeValue value = v48;
              time.CMTimeScale timescale = v87;
              time.CMTimeFlags flags = v247;
              time.CMTimeEpoch epoch = v243;
              time2.CMTimeValue value = v231;
              time2.CMTimeScale timescale = v227;
              time2.CMTimeFlags flags = v236;
              time2.CMTimeEpoch epoch = v239;
              CMTimeSubtract(&v262, &time, &time2);
              Float64 v137 = CMTimeGetSeconds(&v262);
              LODWORD(time2.value) = 136316930;
              *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpfs_ResolveStartTimeAndEnqueueBuffers";
              LOWORD(time2.flags) = 2048;
              *(void *)((char *)&time2.flags + 2) = v249;
              HIWORD(time2.epoch) = 2082;
              v272 = v217;
              __int16 v273 = 2048;
              a1 = v232;
              CFArrayRef v274 = v232;
              __int16 v275 = 2082;
              v276 = v216;
              __int16 v277 = 2048;
              v278[0] = v135;
              LOWORD(v278[1]) = 2048;
              *(Float64 *)((char *)&v278[1] + 2) = v136;
              WORD1(v278[2]) = 2048;
              *(Float64 *)((char *)&v278[2] + 4) = v137;
              _os_log_send_and_compose_impl();
              int v102 = v224;
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          *(void *)(v121 + 240) = v48;
          *(_DWORD *)(v121 + 248) = v87;
          *(_DWORD *)(v121 + 252) = v247;
          *(void *)(v121 + 256) = v243;
        }
        goto LABEL_298;
      }
      if (v221) {
        goto LABEL_298;
      }
LABEL_275:
      if (dword_1E9350BB0)
      {
        LODWORD(rhs.value) = 0;
        LOBYTE(v282) = 0;
        v129 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v130 = rhs.value;
        if (os_log_type_enabled(v129, (os_log_type_t)v282)) {
          unsigned int v131 = v130;
        }
        else {
          unsigned int v131 = v130 & 0xFFFFFFFE;
        }
        if (v131)
        {
          if (v249) {
            v252 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
          }
          else {
            v252 = "";
          }
          if (a1) {
            v242 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
          }
          else {
            v242 = "";
          }
          CMTime time = v265;
          Float64 v132 = CMTimeGetSeconds(&time);
          time.CMTimeValue value = v48;
          time.CMTimeScale timescale = v87;
          time.CMTimeFlags flags = v247;
          time.CMTimeEpoch epoch = v243;
          Float64 v133 = CMTimeGetSeconds(&time);
          time.CMTimeValue value = v48;
          time.CMTimeScale timescale = v87;
          time.CMTimeFlags flags = v247;
          time.CMTimeEpoch epoch = v243;
          time2.CMTimeValue value = v231;
          time2.CMTimeScale timescale = v227;
          time2.CMTimeFlags flags = v236;
          time2.CMTimeEpoch epoch = v239;
          CMTimeSubtract(&v261, &time, &time2);
          Float64 v134 = CMTimeGetSeconds(&v261);
          LODWORD(time2.value) = 136316930;
          *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpfs_ResolveStartTimeAndEnqueueBuffers";
          LOWORD(time2.flags) = 2048;
          *(void *)((char *)&time2.flags + 2) = v249;
          HIWORD(time2.epoch) = 2082;
          v272 = v252;
          __int16 v273 = 2048;
          CFArrayRef v274 = a1;
          __int16 v275 = 2082;
          v276 = v242;
          __int16 v277 = 2048;
          *(Float64 *)v278 = v132;
          LOWORD(v278[1]) = 2048;
          *(Float64 *)((char *)&v278[1] + 2) = v133;
          WORD1(v278[2]) = 2048;
          *(Float64 *)((char *)&v278[2] + 4) = v134;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      time.CMTimeValue value = v48;
      time.CMTimeScale timescale = v87;
      time.CMTimeFlags flags = v247;
      time.CMTimeEpoch epoch = v243;
      fpfs_JumpToTime(a1, &time, 1);
      goto LABEL_303;
    }
    if (!v121)
    {
      time.CMTimeValue value = v48;
      time.CMTimeScale timescale = v87;
      time.CMTimeFlags flags = v247;
      time.CMTimeEpoch epoch = v243;
      CMTime time2 = v265;
      int32_t v127 = CMTimeCompare(&time, &time2);
      char v128 = v221;
      if (v127 < 1) {
        char v128 = 1;
      }
      if ((v128 & 1) == 0) {
        goto LABEL_275;
      }
    }
LABEL_298:
    BOOL v138 = v221;
    if (v102 != 1) {
      BOOL v138 = 0;
    }
    if (!v138)
    {
LABEL_303:
      int v139 = 0;
      goto LABEL_304;
    }
    if (!*(void *)(v258 + 1600))
    {
      v164 = (_OWORD *)(v258 + 1496);
      if (*(_DWORD *)(v258 + 1508))
      {
        CMTimeValue v167 = *(void *)(v258 + 1496);
        CMTimeScale timescale = *(_DWORD *)(v258 + 1504);
        CMTimeFlags flags = *(_DWORD *)(v258 + 1508);
        CMTimeEpoch epoch = *(void *)(v258 + 1512);
        char v169 = v241;
      }
      else
      {
        CMTimeScale v165 = v87;
        uint64_t v166 = *(void *)(v258 + 1704);
        CMTimeValue v167 = value;
        if (!v166 || !FigAlternateIsIFrameOnly(v166)) && (*(unsigned char *)(v258 + 356))
        {
          v168 = (_OWORD *)(v258 + 344);
          time.CMTimeValue value = value;
          time.CMTimeScale timescale = timescale;
          time.CMTimeFlags flags = flags;
          time.CMTimeEpoch epoch = epoch;
          CMTime time2 = *(CMTime *)(v258 + 344);
          if ((CMTimeCompare(&time, &time2) & 0x80000000) == 0
            || v119 == 1
            && (CMTime time = *(CMTime *)(v258 + 320),
                time2.CMTimeValue value = v48,
                time2.CMTimeScale timescale = v165,
                time2.CMTimeFlags flags = v247,
                time2.CMTimeEpoch epoch = v243,
                CMTimeCompare(&time, &time2) < 0))
          {
            a1 = v232;
          }
          else
          {
            if (dword_1E9350BB0)
            {
              LODWORD(rhs.value) = 0;
              LOBYTE(v282) = 0;
              v174 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              unsigned int v175 = rhs.value;
              if (os_log_type_enabled(v174, (os_log_type_t)v282)) {
                unsigned int v176 = v175;
              }
              else {
                unsigned int v176 = v175 & 0xFFFFFFFE;
              }
              if (v176)
              {
                if (v249) {
                  v177 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
                }
                else {
                  v177 = "";
                }
                if (v232) {
                  v183 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
                }
                else {
                  v183 = "";
                }
                *(_OWORD *)&time.CMTimeValue value = *v168;
                time.CMTimeEpoch epoch = *(void *)(v258 + 360);
                Float64 v184 = CMTimeGetSeconds(&time);
                CMTime time = *(CMTime *)(v258 + 368);
                Float64 v185 = CMTimeGetSeconds(&time);
                time.CMTimeValue value = value;
                time.CMTimeScale timescale = timescale;
                time.CMTimeFlags flags = flags;
                time.CMTimeEpoch epoch = epoch;
                Float64 v186 = CMTimeGetSeconds(&time);
                *(_OWORD *)&time.CMTimeValue value = *v168;
                time.CMTimeEpoch epoch = *(void *)(v258 + 360);
                Float64 v187 = CMTimeGetSeconds(&time);
                LODWORD(time2.value) = 136317186;
                *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpfs_ResolveStartTimeAndEnqueueBuffers";
                LOWORD(time2.flags) = 2048;
                *(void *)((char *)&time2.flags + 2) = v249;
                HIWORD(time2.epoch) = 2082;
                v272 = v177;
                __int16 v273 = 2048;
                CFArrayRef v274 = v232;
                __int16 v275 = 2082;
                v276 = v183;
                __int16 v277 = 2048;
                *(Float64 *)v278 = v184;
                LOWORD(v278[1]) = 2048;
                *(Float64 *)((char *)&v278[1] + 2) = v185;
                WORD1(v278[2]) = 2048;
                *(Float64 *)((char *)&v278[2] + 4) = v186;
                WORD2(v278[3]) = 2048;
                *(Float64 *)((char *)&v278[3] + 6) = v187;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            CMTimeValue v167 = *(void *)(v258 + 344);
            CMTimeScale timescale = *(_DWORD *)(v258 + 352);
            CMTimeFlags flags = *(_DWORD *)(v258 + 356);
            CMTimeEpoch epoch = *(void *)(v258 + 360);
            _OWORD *v164 = *v168;
            *(void *)(v258 + 1512) = *(void *)(v258 + 360);
            a1 = v232;
            if (!fpfs_AreTracksReadyToPlay(v232))
            {
              uint64_t v4 = v208;
              if (dword_1E9350BB0)
              {
                LODWORD(rhs.value) = 0;
                LOBYTE(v282) = 0;
                v202 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                unsigned int v203 = rhs.value;
                if (os_log_type_enabled(v202, (os_log_type_t)v282)) {
                  unsigned int v204 = v203;
                }
                else {
                  unsigned int v204 = v203 & 0xFFFFFFFE;
                }
                if (v204)
                {
                  if (v249) {
                    v205 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
                  }
                  else {
                    v205 = "";
                  }
                  if (v232) {
                    v206 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
                  }
                  else {
                    v206 = "";
                  }
                  LODWORD(time2.value) = 136316162;
                  *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpfs_ResolveStartTimeAndEnqueueBuffers";
                  LOWORD(time2.flags) = 2048;
                  *(void *)((char *)&time2.flags + 2) = v249;
                  HIWORD(time2.epoch) = 2082;
                  v272 = v205;
                  __int16 v273 = 2048;
                  CFArrayRef v274 = v232;
                  __int16 v275 = 2082;
                  v276 = v206;
                  _os_log_send_and_compose_impl();
                }
                fig_log_call_emit_and_clean_up_after_send_and_compose();
                a1 = v232;
                uint64_t v4 = v208;
              }
              goto LABEL_407;
            }
          }
        }
        char v169 = v241;
        *(void *)(v258 + 1496) = v167;
        *(_DWORD *)(v258 + 1504) = timescale;
        *(_DWORD *)(v258 + 1508) = flags;
        *(void *)(v258 + 1512) = epoch;
      }
      CMTimeValue value = v167;
      if (v169)
      {
        time.CMTimeValue value = v167;
        time.CMTimeScale timescale = timescale;
        time.CMTimeFlags flags = flags;
        time.CMTimeEpoch epoch = epoch;
        CMTime time2 = v266;
        if ((CMTimeCompare(&time, &time2) & 0x80000000) == 0)
        {
          if (!dword_1E9350BB0)
          {
LABEL_449:
            CMTime time = v266;
            fpfs_SetTime((uint64_t)a1, &time);
            goto LABEL_302;
          }
          LODWORD(rhs.value) = 0;
          LOBYTE(v282) = 0;
          v188 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v189 = rhs.value;
          if (os_log_type_enabled(v188, (os_log_type_t)v282)) {
            unsigned int v190 = v189;
          }
          else {
            unsigned int v190 = v189 & 0xFFFFFFFE;
          }
          if (!v190)
          {
LABEL_448:
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            goto LABEL_449;
          }
          if (v249)
          {
            v191 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
            if (a1)
            {
LABEL_433:
              v192 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
LABEL_447:
              CMTime time = v266;
              Float64 v198 = CMTimeGetSeconds(&time);
              LODWORD(time2.value) = 136316418;
              *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpfs_ResolveStartTimeAndEnqueueBuffers";
              LOWORD(time2.flags) = 2048;
              *(void *)((char *)&time2.flags + 2) = v249;
              HIWORD(time2.epoch) = 2082;
              v272 = v191;
              __int16 v273 = 2048;
              CFArrayRef v274 = a1;
              __int16 v275 = 2082;
              v276 = v192;
              __int16 v277 = 2048;
              *(Float64 *)v278 = v198;
              _os_log_send_and_compose_impl();
              goto LABEL_448;
            }
          }
          else
          {
            v191 = "";
            if (a1) {
              goto LABEL_433;
            }
          }
          v192 = "";
          goto LABEL_447;
        }
      }
      time.CMTimeValue value = v167;
      time.CMTimeScale timescale = timescale;
      time.CMTimeFlags flags = flags;
      time.CMTimeEpoch epoch = epoch;
      CMTime time2 = v265;
      if (CMTimeCompare(&time, &time2) > 0)
      {
        int v139 = 1;
        CMTimeEpoch v140 = epoch;
        CMTimeFlags v141 = flags;
        CMTimeScale v253 = timescale;
        CMTimeValue v142 = v167;
        goto LABEL_306;
      }
      if (!dword_1E9350BB0)
      {
LABEL_458:
        time.CMTimeValue value = v167;
        time.CMTimeScale timescale = timescale;
        time.CMTimeFlags flags = flags;
        time.CMTimeEpoch epoch = epoch;
        fpfs_SetTime((uint64_t)a1, &time);
        int v139 = 1;
        _OWORD *v164 = *MEMORY[0x1E4F1F9F8];
        *(void *)(v258 + 1512) = v250;
        CMTimeEpoch v140 = v250;
        goto LABEL_305;
      }
      LODWORD(rhs.value) = 0;
      LOBYTE(v282) = 0;
      v193 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v194 = rhs.value;
      if (os_log_type_enabled(v193, (os_log_type_t)v282)) {
        unsigned int v195 = v194;
      }
      else {
        unsigned int v195 = v194 & 0xFFFFFFFE;
      }
      if (!v195)
      {
LABEL_457:
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        goto LABEL_458;
      }
      if (v249)
      {
        v196 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
        if (a1)
        {
LABEL_443:
          v197 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
LABEL_453:
          CFArrayRef v199 = a1;
          if (*(_DWORD *)(v258 + 1508)) {
            v200 = "preciseSeekTime";
          }
          else {
            v200 = "seek time";
          }
          time.CMTimeValue value = v167;
          time.CMTimeScale timescale = timescale;
          time.CMTimeFlags flags = flags;
          time.CMTimeEpoch epoch = epoch;
          Float64 v201 = CMTimeGetSeconds(&time);
          LODWORD(time2.value) = 136316674;
          *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpfs_ResolveStartTimeAndEnqueueBuffers";
          LOWORD(time2.flags) = 2048;
          *(void *)((char *)&time2.flags + 2) = v249;
          HIWORD(time2.epoch) = 2082;
          v272 = v196;
          __int16 v273 = 2048;
          CFArrayRef v274 = v199;
          __int16 v275 = 2082;
          v276 = v197;
          __int16 v277 = 2082;
          v278[0] = v200;
          LOWORD(v278[1]) = 2048;
          *(Float64 *)((char *)&v278[1] + 2) = v201;
          _os_log_send_and_compose_impl();
          a1 = v199;
          goto LABEL_457;
        }
      }
      else
      {
        v196 = "";
        if (a1) {
          goto LABEL_443;
        }
      }
      v197 = "";
      goto LABEL_453;
    }
LABEL_302:
    int v139 = 1;
LABEL_304:
    CMTimeEpoch v140 = v250;
LABEL_305:
    CMTimeFlags v141 = v222;
    CMTimeScale v253 = v219;
    CMTimeValue v142 = v220;
LABEL_306:
    uint64_t v268 = 0;
    if (!fpfsi_IterateMutableTrackList(v259, &v268, &v263)) {
      goto LABEL_365;
    }
    int v143 = 0;
    uint64_t v144 = 0;
    uint64_t v145 = 0;
    do
    {
      uint64_t v146 = v268;
      if (*(void *)(v268 + 64) != v260) {
        continue;
      }
      if (!*(void *)(v268 + 40))
      {
LABEL_322:
        if ((*(_DWORD *)(v146 + 152) & 0xFFFFFFFE) == 2)
        {
          if (*(_DWORD *)(v146 + 32) == 1986618469 && !*(unsigned char *)(v146 + 184))
          {
            uint64_t v150 = v146;
            uint64_t v151 = 5;
          }
          else
          {
            uint64_t v150 = v146;
            uint64_t v151 = 4;
          }
          fpfs_ChangeTrackState(v150, v151);
        }
        continue;
      }
      int v147 = *(_DWORD *)(v268 + 32);
      if (v147 == 1936684398)
      {
        if (*(unsigned char *)(v233 + 523)) {
          goto LABEL_322;
        }
        uint64_t v152 = *(void *)(v233 + 536);
        if (!v152 || !FPSupport_IsAnAudioDeviceAvailable(v152)) {
          goto LABEL_322;
        }
      }
      else if (v147 == 1986618469)
      {
        if (!fpfs_CanRenderVideo(v233, *(void *)v268)) {
          goto LABEL_322;
        }
        uint64_t v148 = *v259;
        if (*v259 != v146)
        {
          int v149 = 1;
          do
          {
            if (*(_DWORD *)(v148 + 32) == 1986618469 && (*(_DWORD *)(v148 + 152) | 4) == 5) {
              int v149 = 0;
            }
            uint64_t v148 = *(void *)(v148 + 8);
          }
          while (v148 != v146);
          if (!v149) {
            goto LABEL_322;
          }
        }
      }
      if (*(void *)(CMBaseObjectGetDerivedStorage() + 504) && (_os_feature_enabled_impl() & 1) != 0
        || *(void *)(v146 + 96))
      {
        goto LABEL_334;
      }
      if (*(_DWORD *)(v146 + 32) == 1936684398)
      {
        fpfs_ClearRenderChains(v232, 2);
LABEL_334:
        CMTimeValue v154 = value;
        CMTimeEpoch v153 = epoch;
        CMTimeFlags v155 = flags;
        CMTimeScale v156 = timescale;
        if (*(_DWORD *)(v146 + 32) == 1936684398) {
          goto LABEL_337;
        }
      }
      CMTimeValue v154 = value;
      CMTimeEpoch v153 = epoch;
      CMTimeFlags v155 = flags;
      CMTimeScale v156 = timescale;
      if (*(unsigned char *)(v258 + 2436))
      {
        time2.CMTimeValue value = value;
        time2.CMTimeScale timescale = timescale;
        time2.CMTimeFlags flags = flags;
        time2.CMTimeEpoch epoch = epoch;
        CMTime rhs = *(CMTime *)(v258 + 2424);
        CMTimeSubtract(&time, &time2, &rhs);
        CMTimeValue v154 = time.value;
        CMTimeScale v156 = time.timescale;
        CMTimeFlags v155 = time.flags;
        CMTimeEpoch v153 = time.epoch;
      }
LABEL_337:
      time.CMTimeValue value = v154;
      time.CMTimeScale timescale = v156;
      time.CMTimeFlags flags = v155;
      time.CMTimeEpoch epoch = v153;
      *(_OWORD *)&time2.CMTimeValue value = *MEMORY[0x1E4F1F9F8];
      time2.CMTimeEpoch epoch = v250;
      uint64_t result = fpfs_StartTrackPlaying(v258, v146, &time, MEMORY[0x1E4F1FA08], &time2);
      if (result != -16042)
      {
        if (result) {
          return result;
        }
        int v157 = *(_DWORD *)(v146 + 32);
        if (v157 != 1986618469 || v145)
        {
          if (v144) {
            BOOL v158 = 0;
          }
          else {
            BOOL v158 = v157 == 1936684398;
          }
          if (v158) {
            uint64_t v144 = v146;
          }
          int v143 = 1;
        }
        else
        {
          int v143 = 1;
          uint64_t v145 = v146;
        }
      }
    }
    while (fpfsi_IterateMutableTrackList(v259, &v268, &v263));
    if (!v143)
    {
LABEL_365:
      a1 = v232;
      uint64_t v4 = v208;
      goto LABEL_407;
    }
    a1 = v232;
    uint64_t result = fpfs_setTimebaseStarter((uint64_t)v232, v144, v145);
    if (result) {
      return result;
    }
    uint64_t v4 = v208;
    if (*(void *)(v258 + 1600)) {
      goto LABEL_407;
    }
    if (!v139) {
      goto LABEL_402;
    }
    if ((v141 & 1) == 0) {
      goto LABEL_398;
    }
    uint64_t RenderingTrackofType = fpfs_FirstRenderingTrackofType((uint64_t)v232, 1986618469);
    if (RenderingTrackofType && *(unsigned char *)(RenderingTrackofType + 104))
    {
      if (dword_1E9350BB0)
      {
        LODWORD(rhs.value) = 0;
        LOBYTE(v282) = 0;
        v160 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v161 = rhs.value;
        if (os_log_type_enabled(v160, (os_log_type_t)v282)) {
          unsigned int v162 = v161;
        }
        else {
          unsigned int v162 = v161 & 0xFFFFFFFE;
        }
        if (v162)
        {
          if (v249) {
            v163 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
          }
          else {
            v163 = "";
          }
          if (v232) {
            v181 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
          }
          else {
            v181 = "";
          }
          time.CMTimeValue value = value;
          time.CMTimeScale timescale = timescale;
          time.CMTimeFlags flags = flags;
          time.CMTimeEpoch epoch = epoch;
          Float64 v182 = CMTimeGetSeconds(&time);
          LODWORD(time2.value) = 136316418;
          *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpfs_ResolveStartTimeAndEnqueueBuffers";
          LOWORD(time2.flags) = 2048;
          *(void *)((char *)&time2.flags + 2) = v249;
          HIWORD(time2.epoch) = 2082;
          v272 = v163;
          __int16 v273 = 2048;
          CFArrayRef v274 = v232;
          __int16 v275 = 2082;
          v276 = v181;
          __int16 v277 = 2048;
          *(Float64 *)v278 = v182;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        uint64_t v4 = v208;
      }
LABEL_402:
      fpfs_UpdateDimensions(a1, 1);
      if ((*(unsigned char *)(v258 + 620) & 1) == 0)
      {
        fpfs_GetTime(v258, (uint64_t)&time);
        *(CMTime *)(v258 + 608) = time;
      }
      if (v226) {
        fpfs_CheckPrebufferedLevels(&time, a1, 1, -1, 0);
      }
      *(_OWORD *)(v258 + 2400) = *MEMORY[0x1E4F1F9F8];
      *(void *)(v258 + 2416) = v250;
LABEL_407:
      uint64_t v5 = v209;
LABEL_408:
      uint64_t v3 = *(void *)(v4 + 1048);
LABEL_9:
      if (!v3) {
        return 0;
      }
      continue;
    }
    break;
  }
  if (dword_1E9350BB0)
  {
    LODWORD(rhs.value) = 0;
    LOBYTE(v282) = 0;
    v170 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v171 = rhs.value;
    if (os_log_type_enabled(v170, (os_log_type_t)v282)) {
      unsigned int v172 = v171;
    }
    else {
      unsigned int v172 = v171 & 0xFFFFFFFE;
    }
    if (v172)
    {
      if (v249) {
        v173 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
      }
      else {
        v173 = "";
      }
      if (v232) {
        v178 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
      }
      else {
        v178 = "";
      }
      time.CMTimeValue value = v142;
      time.CMTimeScale timescale = v253;
      time.CMTimeFlags flags = v141;
      time.CMTimeEpoch epoch = v140;
      Float64 v179 = CMTimeGetSeconds(&time);
      LODWORD(time2.value) = 136316418;
      *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpfs_ResolveStartTimeAndEnqueueBuffers";
      LOWORD(time2.flags) = 2048;
      *(void *)((char *)&time2.flags + 2) = v249;
      HIWORD(time2.epoch) = 2082;
      v272 = v173;
      __int16 v273 = 2048;
      CFArrayRef v274 = v232;
      __int16 v275 = 2082;
      v276 = v178;
      __int16 v277 = 2048;
      *(Float64 *)v278 = v179;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    a1 = v232;
    uint64_t v4 = v208;
  }
  time.CMTimeValue value = v142;
  time.CMTimeScale timescale = v253;
  time.CMTimeFlags flags = v141;
  time.CMTimeEpoch epoch = v140;
  fpfs_SetTime((uint64_t)a1, &time);
LABEL_398:
  uint64_t v180 = *(unsigned int *)(v258 + 2200);
  if (!v180) {
    uint64_t v180 = *(unsigned int *)(v258 + 2204);
  }
  time.CMTimeValue value = value;
  time.CMTimeScale timescale = timescale;
  time.CMTimeFlags flags = flags;
  time.CMTimeEpoch epoch = epoch;
  uint64_t result = fpfs_SeekDidComplete(v249, a1, v180, 0, &v264, &time);
  *(_DWORD *)(v258 + 2200) = 0;
  if (!result)
  {
    if (!v264) {
      goto LABEL_402;
    }
    uint64_t result = FigSignalErrorAt();
    uint64_t v5 = v209;
    if (!result) {
      goto LABEL_408;
    }
  }
  return result;
}

BOOL fpfs_IsPlayerEligibleForGaplessTransition()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)(DerivedStorage + 49)) {
    return 0;
  }
  uint64_t v1 = *(unsigned int *)(DerivedStorage + 632);
  uint64_t v2 = *(void *)(DerivedStorage + 80);
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 72));
  if (v2) {
    uint64_t v4 = Count + 1;
  }
  else {
    uint64_t v4 = Count;
  }
  return FigPlaybackGetEffectiveActionAtEnd(v1, v4) == 0;
}

uint64_t fpfs_OkayToAttemptGapless(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  if (!result) {
    return result;
  }
  uint64_t v9 = result;
  memset(v31, 0, 40);
  long long v29 = 0u;
  long long v30 = 0u;
  fpfsi_gatherInterestingGaplessInfoForItem(result, (uint64_t)&v29);
  uint64_t v28 = 0;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  fpfsi_gatherInterestingGaplessInfoForItem(a2, (uint64_t)&v24);
  int v10 = DWORD2(v31[1]);
  uint64_t v11 = *(void *)((char *)&v31[1] + 12);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v13 = CMBaseObjectGetDerivedStorage();
  if (fpfs_FirstTrackWithFormatDescriptionOfType(v9, 1936684398)) {
    BOOL v14 = *(void *)(DerivedStorage + 800) != 0;
  }
  else {
    BOOL v14 = 1;
  }
  if (fpfs_CanRenderVideo(v13, v9) && fpfs_FirstTrackWithFormatDescriptionOfType(v9, 1986618469) && v14) {
    BOOL v14 = *(void *)(DerivedStorage + 792) != 0;
  }
  if (!v14)
  {
LABEL_17:
    uint64_t result = 0;
    goto LABEL_18;
  }
  uint64_t result = fpfsi_PumpHasEndedOrBufferedBeyondFwdEnd(v9);
  if (result)
  {
    uint64_t result = 0;
    if ((v10 & 1) != 0 && BYTE8(v31[0]) == 1 && BYTE8(v26) == 1)
    {
      uint64_t v15 = CMBaseObjectGetDerivedStorage();
      long long v35 = 0uLL;
      uint64_t v36 = 0;
      float v34 = 0.0;
      fpfs_GetItemBufferedDuration(a2, &v35, &v37, 0);
      uint64_t v16 = *(unsigned int *)(v15 + 1096);
      long long v32 = v35;
      uint64_t v33 = v36;
      fpfs_CheckCanKeepUp(a2, (uint64_t)&v32, MEMORY[0x1E4F1F9F8], v16, (uint64_t)&v37, &v34, 0, 0);
      double v17 = v34;
      if (fpfs_GetGaplessTransitionBufferingProgressThreshold_onceToken != -1)
      {
        double v23 = v34;
        dispatch_once(&fpfs_GetGaplessTransitionBufferingProgressThreshold_onceToken, &__block_literal_global_91);
        double v17 = v23;
      }
      if (*(double *)&gGaplessTransitionBufferingProgressThreshold <= v17)
      {
        long long v37 = 0uLL;
        uint64_t v38 = 0;
        int Duration = fpfsi_GetDuration(a2, &v37);
        uint64_t result = (Duration | ~HIDWORD(v37) & 0x11) != 0;
        if (!a3) {
          goto LABEL_20;
        }
        goto LABEL_19;
      }
      goto LABEL_17;
    }
  }
LABEL_18:
  if (a3)
  {
LABEL_19:
    long long v18 = v31[1];
    *(_OWORD *)(a3 + 32) = v31[0];
    *(_OWORD *)(a3 + 48) = v18;
    *(void *)(a3 + 64) = *(void *)&v31[2];
    long long v19 = v30;
    *(_OWORD *)a3 = v29;
    *(_OWORD *)(a3 + 16) = v19;
  }
LABEL_20:
  if (a4)
  {
    long long v20 = v27;
    *(_OWORD *)(a4 + 32) = v26;
    *(_OWORD *)(a4 + 48) = v20;
    *(void *)(a4 + 64) = v28;
    long long v21 = v25;
    *(_OWORD *)a4 = v24;
    *(_OWORD *)(a4 + 16) = v21;
  }
  if (a5)
  {
    *(void *)a5 = *(void *)((char *)v31 + 12);
    *(_DWORD *)(a5 + 8) = DWORD1(v31[1]);
    *(_DWORD *)(a5 + 12) = v10;
    *(void *)(a5 + 16) = v11;
  }
  return result;
}

void fpfs_AreItemsEligibleForGaplessTransition(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5, unsigned char *a6)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v13 = CMBaseObjectGetDerivedStorage();
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  fpfsi_NonSparsePlaybackEndTime(a1, (uint64_t)&v29);
  if (a1 == a3) {
    goto LABEL_25;
  }
  if ((*(unsigned char *)a2 & 1) == 0
    || (*(unsigned char *)a4 & 1) == 0
    || (uint64_t v14 = *(void *)(a2 + 16), (v15 = *(void *)(v14 + 96)) == 0)
    || !FPSupport_RenderPipelineSupportsGaplessTransitionWithFormats(*(void *)(v15 + 32), *(CMAudioFormatDescriptionRef *)(v14 + 40), *(CMAudioFormatDescriptionRef *)(*(void *)(a4 + 8) + 40))|| (int v16 = fpfsi_GetSpatializationConfiguration(a1) == 1, fpfs_ShouldEnableSpatializationForTrack(*(void *)(a4 + 8)) != v16)|| (v17 = *(void *)(DerivedStorage + 3112), v17 != *(void *)(v13 + 3112))|| v17 && !MTAudioProcessingTapIsMultitrackTap(v17)|| FPSupport_AudioProcessingUnitsConfigurationsAreDifferent()|| (v30 & 0x100000000) == 0)
  {
    int v18 = 0;
    if (!a5) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (*(void *)(CMBaseObjectGetDerivedStorage() + 504))
  {
    memset(&v28, 0, sizeof(v28));
    CMTimeMake(&v28, 1, 1);
    long long v24 = *MEMORY[0x1E4F1F9F8];
    *(_OWORD *)&lhs.CMTimeValue value = *MEMORY[0x1E4F1F9F8];
    CMTimeEpoch v19 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
    lhs.CMTimeEpoch epoch = v19;
    uint64_t v20 = CMBaseObjectGetDerivedStorage();
    if (fpfsi_PlaybackHasBufferedBeyondForwardEndTime(a1))
    {
      fpfsi_MapEndTimeFromTargetToSource(v20, (uint64_t)&rhs);
      *(_OWORD *)&lhs.CMTimeValue value = *(_OWORD *)&rhs.value;
      CMTimeEpoch epoch = rhs.epoch;
    }
    else
    {
      if (!*(unsigned char *)(v20 + 470)) {
        goto LABEL_21;
      }
      uint64_t TrackOfType = fpfs_LastTrackOfType(a1, 1936684398, 0);
      if (!TrackOfType)
      {
        *(_OWORD *)&lhs.CMTimeValue value = v24;
        lhs.CMTimeEpoch epoch = v19;
        goto LABEL_21;
      }
      *(_OWORD *)&lhs.CMTimeValue value = *(_OWORD *)(TrackOfType + 216);
      CMTimeEpoch epoch = *(void *)(TrackOfType + 232);
    }
    lhs.CMTimeEpoch epoch = epoch;
LABEL_21:
    CMTime rhs = v28;
    CMTimeSubtract(&v27, &lhs, &rhs);
    fpfsi_PredictedEndTime(&v25, a1, v22);
    if ((v27.flags & 0x1F) != 3 && (v25.flags & 0x1F) != 3
      || (memset(&rhs, 0, sizeof(rhs)),
          CMTime time1 = v27,
          CMTime v33 = v25,
          CMTimeSubtract(&time, &time1, &v33),
          CMTimeAbsoluteValue(&rhs, &time),
          CMTimeMake(&time2, 1, 1000000000),
          CMTime time1 = rhs,
          CMTimeCompare(&time1, &time2) > 0))
    {
      CMTime rhs = v27;
      CMTime time1 = v25;
      if (CMTimeCompare(&rhs, &time1) > 0)
      {
LABEL_25:
        int v18 = 2;
        if (!a5) {
          goto LABEL_14;
        }
LABEL_13:
        *a5 = v18;
        goto LABEL_14;
      }
    }
  }
  int v18 = 1;
  if (a5) {
    goto LABEL_13;
  }
LABEL_14:
  if (a6) {
    *a6 = 0;
  }
}

double fpfp_GetTransitionTimebaseStartTime@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, CMTime *a5@<X4>, int a6@<W5>, CMTime *a7@<X6>, CMTime *a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v13 = *(CMTime **)(a3 + 16);
  uint64_t v14 = *(void *)(a4 + 8);
  uint64_t v15 = MEMORY[0x1E4F1F9F8];
  long long v16 = *MEMORY[0x1E4F1F9F8];
  *(_OWORD *)a9 = *MEMORY[0x1E4F1F9F8];
  CMTimeEpoch v17 = *(void *)(v15 + 16);
  *(void *)(a9 + 16) = v17;
  *(_OWORD *)&v32.CMTimeValue value = v16;
  v32.CMTimeEpoch epoch = v17;
  long long v18 = *MEMORY[0x1E4F1FA48];
  *(_OWORD *)&v31.CMTimeValue value = *MEMORY[0x1E4F1FA48];
  CMTimeEpoch v19 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
  v31.CMTimeEpoch epoch = v19;
  if (a6)
  {
    if (v13)
    {
      long long v26 = v18;
      long long v21 = *(CMTime **)(a3 + 32);
      CMTime time1 = *a5;
      fpfs_TransposeItemTime(&time1, (uint64_t)v13, v14, &v32);
      if ((*(unsigned char *)(a1 + 1388) & 1) != 0
        || !v21
        || (time1 = v13[9], CMTime time2 = v21[9], CMTimeCompare(&time1, &time2) < 1))
      {
        *(_OWORD *)&v31.CMTimeValue value = v26;
        v31.CMTimeEpoch epoch = v19;
      }
      else
      {
        CMTime time1 = v13[9];
        CMTime time2 = v21[9];
        CMTimeSubtract(&v31, &time1, &time2);
      }
      CMTime time2 = v32;
      CMTime rhs = v31;
      CMTimeAdd(&time1, &time2, &rhs);
      *(_OWORD *)a9 = *(_OWORD *)&time1.value;
      CMTimeEpoch epoch = time1.epoch;
    }
    else
    {
      uint64_t v23 = *(void *)(a4 + 24);
      uint64_t v24 = *(void *)(a3 + 32);
      CMTime time1 = *a5;
      fpfs_TransposeItemTime(&time1, v24, v23, &v32);
      *(_OWORD *)a9 = *(_OWORD *)&v32.value;
      CMTimeEpoch epoch = v32.epoch;
    }
    *(void *)(a9 + 16) = epoch;
  }
  else
  {
    long long v27 = v16;
    fpfs_GetNextTimeToPlay(a2, 0, (uint64_t)&time1);
    *(CMTime *)a9 = time1;
    *(_OWORD *)&v32.CMTimeValue value = v27;
    v32.CMTimeEpoch epoch = v17;
  }
  *a7 = v32;
  double result = *(double *)&v31.value;
  *a8 = v31;
  return result;
}

double fpfsi_gatherInterestingGaplessInfoForItem@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 64) = 0;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    uint64_t v6 = *(void *)(DerivedStorage + 1048);
    if (v6)
    {
      uint64_t v7 = 0;
      uint64_t v8 = 0;
      int v9 = 0;
      int v10 = 0;
      while (1)
      {
        uint64_t v11 = *(void *)(v6 + 48);
        uint64_t v12 = *(unsigned __int8 *)(v6 + 180);
        uint64_t v13 = DerivedStorage + 16 * v12;
        if (v11 == *(void *)(v13 + 1000) || v11 == *(void *)(v13 + 1008))
        {
          int v14 = *(_DWORD *)(v6 + 32);
          BOOL v16 = v14 == 1935832172 || v14 == 1986618469 || v14 == 1936684398;
          int v17 = (1 << v12) | v9;
          if (v16) {
            int v9 = v17;
          }
        }
        if (!*(void *)(v6 + 40) || *(unsigned char *)(v6 + 184)) {
          goto LABEL_24;
        }
        int v18 = *(_DWORD *)(v6 + 32);
        if (v18 == 1986618469) {
          break;
        }
        if (v18 == 1936684398)
        {
          int v19 = 1;
          uint64_t v20 = (void *)(a2 + 8);
          long long v21 = (void *)(a2 + 16);
          uint64_t v22 = v6;
          uint64_t v23 = v8;
          if (!v7)
          {
LABEL_22:
            *uint64_t v20 = v6;
            uint64_t v7 = v22;
            uint64_t v8 = v23;
          }
LABEL_23:
          void *v21 = v6;
          v10 |= v19;
          *(_DWORD *)a2 = v10;
        }
LABEL_24:
        uint64_t v6 = *(void *)(v6 + 8);
        if (!v6) {
          goto LABEL_27;
        }
      }
      int v19 = 2;
      uint64_t v20 = (void *)(a2 + 24);
      long long v21 = (void *)(a2 + 32);
      uint64_t v22 = v7;
      uint64_t v23 = v6;
      if (!v8) {
        goto LABEL_22;
      }
      goto LABEL_23;
    }
    int v9 = 0;
LABEL_27:
    uint64_t v24 = 0;
    while (1)
    {
      int v25 = *(unsigned __int8 *)(DerivedStorage + v24 + 471);
      if (*(unsigned char *)(DerivedStorage + 553))
      {
        if (!*(unsigned char *)(DerivedStorage + v24 + 471)) {
          goto LABEL_34;
        }
        if (!*(void *)(DerivedStorage + 1768)) {
          goto LABEL_33;
        }
        int v25 = *(unsigned __int8 *)(DerivedStorage + v24 + 474);
      }
      if (v25) {
LABEL_33:
      }
        v9 |= 1 << v24;
LABEL_34:
      if (++v24 == 3)
      {
        *(unsigned char *)(a2 + 40) = v9 == *(_DWORD *)(DerivedStorage + 1096);
        fpfsi_NonSparsePlaybackEndTime(a1, (uint64_t)&v26);
        double result = *(double *)&v26;
        *(_OWORD *)(a2 + 44) = v26;
        *(void *)(a2 + 60) = v27;
        return result;
      }
    }
  }
  return result;
}

double fpfsi_NonSparsePlaybackEndTime@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = MEMORY[0x1E4F1F9F8];
  *(_OWORD *)a2 = *MEMORY[0x1E4F1F9F8];
  *(void *)(a2 + 16) = *(void *)(v4 + 16);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (fpfsi_PlaybackHasBufferedBeyondForwardEndTime(a1))
  {
    fpfsi_MapEndTimeFromTargetToSource(DerivedStorage, (uint64_t)&v7);
  }
  else
  {
    if (!*(unsigned char *)(DerivedStorage + 470)) {
      return result;
    }
    fpfsi_LastNonSparseSampleEnd(a1, (uint64_t)&v7);
  }
  double result = *(double *)&v7;
  *(_OWORD *)a2 = v7;
  *(void *)(a2 + 16) = v8;
  return result;
}

uint64_t fpfsi_LastNonSparseSampleEnd@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = MEMORY[0x1E4F1F9F8];
  long long v13 = *MEMORY[0x1E4F1F9F8];
  *(_OWORD *)a2 = *MEMORY[0x1E4F1F9F8];
  CMTimeEpoch v5 = *(void *)(v4 + 16);
  *(void *)(a2 + 16) = v5;
  uint64_t TrackOfType = fpfs_LastTrackOfType(a1, 1936684398, 0);
  uint64_t result = fpfs_LastTrackOfType(a1, 1986618469, 0);
  if (!TrackOfType)
  {
    long long v8 = v13;
    *(_OWORD *)&v18.CMTimeValue value = v13;
    v18.CMTimeEpoch epoch = v5;
    if (result)
    {
      CMTime v17 = *(CMTime *)(result + 216);
      goto LABEL_9;
    }
LABEL_8:
    *(_OWORD *)&v17.CMTimeValue value = v8;
    v17.CMTimeEpoch epoch = v5;
    goto LABEL_9;
  }
  CMTime v18 = *(CMTime *)(TrackOfType + 216);
  long long v8 = v13;
  if (!result) {
    goto LABEL_8;
  }
  CMTime v17 = *(CMTime *)(result + 216);
  uint64_t v9 = *(void *)(TrackOfType + 64);
  uint64_t v10 = *(void *)(result + 64);
  if (v9 == v10)
  {
LABEL_9:
    CMTime time1 = v18;
    CMTime time2 = v17;
    uint64_t result = (uint64_t)CMTimeMinimum(&v16, &time1, &time2);
    *(_OWORD *)a2 = *(_OWORD *)&v16.value;
    CMTimeEpoch epoch = v16.epoch;
    goto LABEL_10;
  }
  if (v10 <= v9) {
    uint64_t v11 = TrackOfType + 216;
  }
  else {
    uint64_t v11 = result + 216;
  }
  *(_OWORD *)a2 = *(_OWORD *)v11;
  CMTimeEpoch epoch = *(void *)(v11 + 16);
LABEL_10:
  *(void *)(a2 + 16) = epoch;
  return result;
}

uint64_t fpfsi_GetSpatializationConfiguration(uint64_t a1)
{
  uint64_t RenderingTrackofType = fpfs_FirstRenderingTrackofType(a1, 1936684398);
  if (!RenderingTrackofType) {
    return 2;
  }
  CFTypeRef cf = 0;
  uint64_t v2 = *(void *)(*(void *)(RenderingTrackofType + 96) + 32);
  uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
  uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(v2);
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
  uint64_t v6 = v5 ? v5 : 0;
  long long v7 = *(void (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v6 + 48);
  if (!v7) {
    return 2;
  }
  v7(FigBaseObject, @"SpatializationEnabled", AllocatorForMedia, &cf);
  if (!cf) {
    return 2;
  }
  BOOL v8 = cf == (CFTypeRef)*MEMORY[0x1E4F1CFD0];
  CFRelease(cf);
  return v8;
}

uint64_t MTAudioProcessingTapIsMultitrackTap(uint64_t a1)
{
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(uint64_t (**)(uint64_t))(v3 + 40);
  if (!v4) {
    return 0;
  }

  return v4(a1);
}

uint64_t fpfs_TransposeItemTime@<X0>(CMTime *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, CMTime *a4@<X8>)
{
  a4->CMTimeValue value = 0;
  *(void *)&a4->CMTimeScale timescale = 0;
  a4->CMTimeEpoch epoch = 0;
  memset(&v10, 0, sizeof(v10));
  CMTime lhs = *a1;
  CMTime rhs = *(CMTime *)(a2 + 128);
  CMTimeSubtract(&v10, &lhs, &rhs);
  CMTime rhs = v10;
  CMTime v7 = *(CMTime *)(a3 + 128);
  CMTimeAdd(&lhs, &rhs, &v7);
  *a4 = lhs;
  return CMBaseObjectGetDerivedStorage();
}

uint64_t fpfsi_IterateMutableTrackList(uint64_t *a1, void *a2, uint64_t *a3)
{
  if (!*a2)
  {
    uint64_t v3 = *a1;
LABEL_9:
    *a2 = v3;
    uint64_t v4 = v3;
    if (v3) {
      goto LABEL_14;
    }
    uint64_t result = 0;
LABEL_12:
    uint64_t v6 = -1;
    goto LABEL_18;
  }
  if (*a3 < 0 || (uint64_t v3 = *a1) == 0)
  {
    uint64_t result = 0;
    *a2 = 0;
    goto LABEL_12;
  }
  uint64_t v4 = *a1;
  while (*(void *)(v4 + 16) != *a3)
  {
    uint64_t v4 = *(void *)(v4 + 8);
    if (!v4) {
      goto LABEL_9;
    }
  }
  *a2 = v4;
LABEL_14:
  uint64_t v7 = *(void *)(v4 + 8);
  if (v7) {
    uint64_t v6 = *(void *)(v7 + 16);
  }
  else {
    uint64_t v6 = -1;
  }
  uint64_t result = 1;
LABEL_18:
  *a3 = v6;
  return result;
}

uint64_t fpfs_FindTrackStartTime@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *(void *)(result + 1048);
  if (v3)
  {
    while (*(void *)(v3 + 64) != a2 || (*(_DWORD *)(v3 + 140) & 0x1D) != 1 || (*(unsigned char *)(v3 + 204) & 1) == 0)
    {
      uint64_t v3 = *(void *)(v3 + 8);
      if (!v3) {
        goto LABEL_6;
      }
    }
    *(_OWORD *)a3 = *(_OWORD *)(v3 + 192);
    uint64_t v5 = *(void *)(v3 + 208);
  }
  else
  {
LABEL_6:
    uint64_t v4 = MEMORY[0x1E4F1F9F8];
    *(_OWORD *)a3 = *MEMORY[0x1E4F1F9F8];
    uint64_t v5 = *(void *)(v4 + 16);
  }
  *(void *)(a3 + 16) = v5;
  return result;
}

uint64_t fpfs_SetTrackStartTimeAndTimeOffset(uint64_t a1, opaqueCMSampleBuffer *a2, int a3)
{
  uint64_t v119 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v91 = CMBaseObjectGetDerivedStorage();
  CMTime v101 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  long long v93 = *(_OWORD *)&v101.value;
  CMTime v100 = v101;
  CMTimeEpoch epoch = v101.epoch;
  if (!a2)
  {
    return FigSignalErrorAt();
  }
  int v95 = a3;
  CMSampleBufferGetPresentationTimeStamp(&v101, a2);
  fpfs_GetTimeOffsetIntoSegment(a2, (uint64_t)&v100);
  uint64_t v7 = *(void *)(DerivedStorage + 1048);
  if (v7)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = *(void *)(DerivedStorage + 1048);
    do
    {
      uint64_t v11 = *(void *)(v10 + 64);
      if (v11 <= *(void *)(a1 + 64))
      {
        int v12 = *(_DWORD *)(v10 + 152);
        if (v8 <= v11) {
          uint64_t v13 = v10;
        }
        else {
          uint64_t v13 = v9;
        }
        if (v8 > v11) {
          uint64_t v11 = v8;
        }
        BOOL v14 = v12 == 6 || v12 == 1;
        if (v14) {
          uint64_t v9 = v13;
        }
        if (v14) {
          uint64_t v8 = v11;
        }
      }
      uint64_t v10 = *(void *)(v10 + 8);
    }
    while (v10);
  }
  else
  {
    uint64_t v9 = 0;
  }
  if (dword_1E9350BB0)
  {
    LODWORD(time2.value) = 0;
    LOBYTE(type.value) = 0;
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    uint64_t v7 = *(void *)(DerivedStorage + 1048);
  }
  CMTime v16 = (_OWORD *)(a1 + 128);
  uint64_t v17 = *(void *)(a1 + 64);
  if (v7)
  {
    while (*(void *)(v7 + 64) != v17 || *(unsigned char *)(v7 + 456) || (*(_DWORD *)(v7 + 140) & 0x1D) != 1)
    {
      uint64_t v7 = *(void *)(v7 + 8);
      if (!v7) {
        goto LABEL_29;
      }
    }
    *(_OWORD *)&lhs.unsigned int value = *(_OWORD *)(v7 + 128);
    CMTimeEpoch v18 = *(void *)(v7 + 144);
  }
  else
  {
LABEL_29:
    *(_OWORD *)&lhs.unsigned int value = *MEMORY[0x1E4F1F9F8];
    CMTimeEpoch v18 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  }
  lhs.CMTimeEpoch epoch = v18;
  *CMTime v16 = *(_OWORD *)&lhs.value;
  *(void *)(a1 + 144) = v18;
  if ((*(_DWORD *)(a1 + 140) & 0x1D) == 1)
  {
    fpfs_FindTrackStartTime(DerivedStorage, v17, (uint64_t)&lhs);
    *(CMTime *)(a1 + 192) = lhs;
    int v19 = *(_DWORD *)(a1 + 32);
    if (v19 == 1986618469 || v19 == 1936684398)
    {
      uint64_t v20 = *(unsigned __int8 *)(a1 + 180);
      if (*(void *)(a1 + 48) == *(void *)(DerivedStorage + 16 * v20 + 1000))
      {
        memset(&time2, 0, sizeof(time2));
        uint64_t v21 = DerivedStorage + 24 * v20;
        long long v22 = *(_OWORD *)(v21 + 1208);
        lhs.CMTimeEpoch epoch = *(void *)(v21 + 1224);
        *(_OWORD *)&lhs.unsigned int value = v22;
        CMTime rhs = *(CMTime *)(DerivedStorage + 1184);
        CMTimeSubtract(&time2, &lhs, &rhs);
        CMTime rhs = time2;
        CMTime type = v100;
        CMTimeAdd(&lhs, &rhs, &type);
        CMTime time2 = lhs;
        memset(&type, 0, sizeof(type));
        CMTime lhs = v101;
        *(_OWORD *)&rhs.unsigned int value = *v16;
        rhs.CMTimeEpoch epoch = *(void *)(a1 + 144);
        CMTimeAdd(&type, &lhs, &rhs);
        memset(&v97, 0, sizeof(v97));
        CMTime lhs = time2;
        CMTime rhs = type;
        CMTimeSubtract(&v97, &lhs, &rhs);
        CMTime lhs = v97;
        *(_OWORD *)&rhs.unsigned int value = v93;
        rhs.CMTimeEpoch epoch = epoch;
        if (CMTimeCompare(&lhs, &rhs))
        {
          uint64_t v23 = *(void *)(DerivedStorage + 1048);
          if (v23)
          {
            while (1)
            {
              if (*(void *)(v23 + 64) == *(void *)(a1 + 64))
              {
                if ((*(_DWORD *)(v23 + 152) & 0xFFFFFFFC) == 4) {
                  break;
                }
                if (v23 == a1)
                {
                  int v24 = *(_DWORD *)(a1 + 32);
                }
                else
                {
                  int v24 = *(_DWORD *)(a1 + 32);
                  if (*(_DWORD *)(v23 + 32) == v24) {
                    break;
                  }
                }
                if (v24 == 1936684398 && *(_DWORD *)(v23 + 32) == 1986618469) {
                  break;
                }
              }
              uint64_t v23 = *(void *)(v23 + 8);
              if (!v23) {
                goto LABEL_45;
              }
            }
          }
          else
          {
LABEL_45:
            if (dword_1E9350BB0)
            {
              int v25 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            uint64_t v26 = *(void *)(a1 + 64);
            CMTime lhs = v97;
            fpfs_TimeShiftDiscontinuityDomain(DerivedStorage, v26, &lhs);
          }
        }
      }
    }
    if (v9 && *(void *)(v9 + 64) == *(void *)(a1 + 64)) {
      fpfs_ChangeTrackState(a1, 4);
    }
  }
  if ((*(_DWORD *)(a1 + 140) & 0x1D) == 1) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 184) && *(_DWORD *)(a1 + 32) == 1986618469)
  {
    if ((*(unsigned char *)(DerivedStorage + 24 * *(unsigned __int8 *)(a1 + 180) + 1220) & 1) == 0) {
      goto LABEL_101;
    }
    uint64_t v27 = DerivedStorage + 24 * *(unsigned __int8 *)(a1 + 180);
    long long v28 = *(_OWORD *)(v27 + 1208);
    rhs.CMTimeEpoch epoch = *(void *)(v27 + 1224);
    *(_OWORD *)&rhs.unsigned int value = v28;
    CMTime time2 = *(CMTime *)(DerivedStorage + 1184);
    CMTimeSubtract(&lhs, &rhs, &time2);
    *(CMTime *)(a1 + 192) = lhs;
    if (!v9) {
      goto LABEL_101;
    }
    uint64_t v29 = (_OWORD *)(a1 + 192);
    uint64_t v30 = (_OWORD *)(v9 + 216);
    if ((*(unsigned char *)(v9 + 228) & 1) == 0) {
      goto LABEL_63;
    }
    float v31 = *(float *)(v91 + 108);
    if (v31 >= 0.0)
    {
      *(_OWORD *)&lhs.unsigned int value = *v29;
      lhs.CMTimeEpoch epoch = *(void *)(a1 + 208);
      *(_OWORD *)&rhs.unsigned int value = *v30;
      rhs.CMTimeEpoch epoch = *(void *)(v9 + 232);
      if (CMTimeCompare(&lhs, &rhs) > 0)
      {
LABEL_63:
        long long v32 = *v29;
        *(void *)(v9 + 232) = *(void *)(a1 + 208);
        *uint64_t v30 = v32;
        if (*(void *)(a1 + 112))
        {
          CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
          fpfs_scheduleForwardEndTimeForTrack(DerivedStorage, a1, (uint64_t)&time2);
          if (dword_1E9350BB0)
          {
            LODWORD(type.value) = 0;
            LOBYTE(v97.value) = 0;
            CMTime v33 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int value = type.value;
            if (os_log_type_enabled(v33, v97.value)) {
              unsigned int v35 = value;
            }
            else {
              unsigned int v35 = value & 0xFFFFFFFE;
            }
            if (v35)
            {
              uint64_t v36 = *(void *)DerivedStorage;
              if (*(void *)DerivedStorage) {
                long long v37 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
              }
              else {
                long long v37 = "";
              }
              v94 = v37;
              uint64_t v88 = DerivedStorage;
              uint64_t v47 = *(void *)a1;
              if (*(void *)a1) {
                CMTimeValue v48 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
              }
              else {
                CMTimeValue v48 = "";
              }
              uint64_t v49 = *(void *)(a1 + 16);
              CMTime lhs = time2;
              Float64 Seconds = CMTimeGetSeconds(&lhs);
              LODWORD(rhs.value) = 136316674;
              *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"fpfs_SetTrackStartTimeAndTimeOffset";
              LOWORD(rhs.flags) = 2048;
              *(void *)((char *)&rhs.flags + 2) = v36;
              HIWORD(rhs.epoch) = 2082;
              CMTimeFlags v103 = v94;
              __int16 v104 = 2048;
              uint64_t v105 = v47;
              __int16 v106 = 2082;
              CMTimeFlags v107 = v48;
              __int16 v108 = 1024;
              int v109 = v49;
              __int16 v110 = 2048;
              Float64 v111 = Seconds;
              _os_log_send_and_compose_impl();
              uint64_t DerivedStorage = v88;
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
        }
        goto LABEL_101;
      }
      float v31 = *(float *)(v91 + 108);
    }
    if (v31 >= 0.0) {
      goto LABEL_101;
    }
    *(_OWORD *)&lhs.unsigned int value = *v29;
    lhs.CMTimeEpoch epoch = *(void *)(a1 + 208);
    *(_OWORD *)&rhs.unsigned int value = *v30;
    rhs.CMTimeEpoch epoch = *(void *)(v9 + 232);
    if ((CMTimeCompare(&lhs, &rhs) & 0x80000000) == 0) {
      goto LABEL_101;
    }
    goto LABEL_63;
  }
  uint64_t v38 = *(void *)(DerivedStorage + 1048);
  if (v9) {
    goto LABEL_72;
  }
  if (v38)
  {
    uint64_t v43 = 0;
    uint64_t v44 = *(void *)(DerivedStorage + 1048);
    do
    {
      if (*(void *)(v44 + 64) < *(void *)(a1 + 64) && *(_DWORD *)(v44 + 152) == 3) {
        uint64_t v43 = v44;
      }
      uint64_t v44 = *(void *)(v44 + 8);
    }
    while (v44);
    if (v43)
    {
LABEL_72:
      for (CMTime lhs = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA08]; v38; v38 = *(void *)(v38 + 8))
      {
        uint64_t v39 = *(void *)(v38 + 64);
        uint64_t v40 = *(void *)(a1 + 64);
        if (v39 < v40 || v39 == v40 && *(unsigned char *)(v38 + 456)) && (*(unsigned char *)(v38 + 228))
        {
          CMTime rhs = lhs;
          CMTime time2 = *(CMTime *)(v38 + 216);
          if (CMTimeCompare(&rhs, &time2) < 0)
          {
            CMTime lhs = *(CMTime *)(v38 + 216);
            *(unsigned char *)(a1 + 185) = 1;
          }
        }
      }
      *(CMTime *)(a1 + 192) = lhs;
    }
  }
  if ((*(_DWORD *)(a1 + 204) & 0x1D) != 1)
  {
    uint64_t v41 = (_OWORD *)(a1 + 192);
    unsigned int v42 = *(unsigned __int8 *)(a1 + 180);
    if (*(unsigned char *)(DerivedStorage + 24 * *(unsigned __int8 *)(a1 + 180) + 1220))
    {
      memset(&lhs, 0, sizeof(lhs));
      uint64_t v45 = DerivedStorage + 24 * v42;
      long long v46 = *(_OWORD *)(v45 + 1208);
      rhs.CMTimeEpoch epoch = *(void *)(v45 + 1224);
      *(_OWORD *)&rhs.unsigned int value = v46;
      CMTime time2 = *(CMTime *)(DerivedStorage + 1184);
      CMTimeSubtract(&lhs, &rhs, &time2);
      CMTime time2 = lhs;
      CMTime type = v100;
      CMTimeAdd(&rhs, &time2, &type);
      CMTime lhs = rhs;
      CMTime time2 = rhs;
      *(_OWORD *)&type.unsigned int value = v93;
      type.CMTimeEpoch epoch = epoch;
      CMTimeMaximum(&rhs, &time2, &type);
      *uint64_t v41 = *(_OWORD *)&rhs.value;
      *(void *)(a1 + 208) = rhs.epoch;
      if (*(unsigned char *)(a1 + 180) != 2)
      {
        *(_OWORD *)&time2.unsigned int value = *v41;
        time2.CMTimeEpoch epoch = *(void *)(a1 + 208);
        CMTime type = v101;
        CMTimeSubtract(&rhs, &time2, &type);
        *CMTime v16 = *(_OWORD *)&rhs.value;
        *(void *)(a1 + 144) = rhs.epoch;
        *(_OWORD *)&time2.unsigned int value = *v16;
        time2.CMTimeEpoch epoch = *(void *)(a1 + 144);
        CMTime type = *(CMTime *)(a1 + 396);
        CMTimeSubtract(&rhs, &time2, &type);
        *CMTime v16 = *(_OWORD *)&rhs.value;
        *(void *)(a1 + 144) = rhs.epoch;
      }
    }
    else
    {
      fpfs_GetTime(DerivedStorage, (uint64_t)&lhs);
      *uint64_t v41 = *(_OWORD *)&lhs.value;
      *(void *)(a1 + 208) = lhs.epoch;
    }
  }
LABEL_101:
  if (*(unsigned char *)(DerivedStorage + 24 * *(unsigned __int8 *)(a1 + 180) + 260))
  {
    uint64_t v51 = DerivedStorage + 24 * *(unsigned __int8 *)(a1 + 180);
    long long v52 = *(_OWORD *)(v51 + 248);
    *(void *)(a1 + 144) = *(void *)(v51 + 264);
    *CMTime v16 = v52;
    if (dword_1E9350BB0)
    {
      LODWORD(time2.value) = 0;
      LOBYTE(type.value) = 0;
      unsigned int v53 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v54 = time2.value;
      if (os_log_type_enabled(v53, type.value)) {
        unsigned int v55 = v54;
      }
      else {
        unsigned int v55 = v54 & 0xFFFFFFFE;
      }
      if (v55)
      {
        uint64_t v56 = DerivedStorage;
        uint64_t v57 = *(void *)DerivedStorage;
        if (*(void *)DerivedStorage) {
          uint64_t v58 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
        }
        else {
          uint64_t v58 = "";
        }
        uint64_t v59 = *(void *)a1;
        if (*(void *)a1) {
          CMTimeValue v60 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
        }
        else {
          CMTimeValue v60 = "";
        }
        uint64_t v61 = *(void *)(a1 + 16);
        LODWORD(rhs.value) = 136316418;
        *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"fpfs_SetTrackStartTimeAndTimeOffset";
        LOWORD(rhs.flags) = 2048;
        *(void *)((char *)&rhs.flags + 2) = v57;
        HIWORD(rhs.epoch) = 2082;
        CMTimeFlags v103 = v58;
        __int16 v104 = 2048;
        uint64_t v105 = v59;
        __int16 v106 = 2082;
        CMTimeFlags v107 = v60;
        __int16 v108 = 1024;
        int v109 = v61;
        _os_log_send_and_compose_impl();
        uint64_t DerivedStorage = v56;
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  uint64_t v62 = a1 + 128;
  if (v95)
  {
    if ((*(unsigned char *)(a1 + 140) & 1) != 0 || *(unsigned char *)(a1 + 180) != 2) {
      goto LABEL_135;
    }
    if (dword_1E9350BB0)
    {
      LODWORD(time2.value) = 0;
      LOBYTE(type.value) = 0;
      int v63 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v64 = time2.value;
      if (os_log_type_enabled(v63, type.value)) {
        unsigned int v65 = v64;
      }
      else {
        unsigned int v65 = v64 & 0xFFFFFFFE;
      }
      if (v65)
      {
        uint64_t v89 = DerivedStorage;
        uint64_t v66 = *(void *)DerivedStorage;
        if (*(void *)DerivedStorage) {
          uint64_t v67 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
        }
        else {
          uint64_t v67 = "";
        }
        uint64_t v68 = *(void *)a1;
        if (*(void *)a1) {
          CFArrayRef v69 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
        }
        else {
          CFArrayRef v69 = "";
        }
        uint64_t v70 = *(void *)(a1 + 16);
        LODWORD(rhs.value) = 136316418;
        *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"fpfs_SetTrackStartTimeAndTimeOffset";
        LOWORD(rhs.flags) = 2048;
        *(void *)((char *)&rhs.flags + 2) = v66;
        HIWORD(rhs.epoch) = 2082;
        CMTimeFlags v103 = v67;
        __int16 v104 = 2048;
        uint64_t v105 = v68;
        __int16 v106 = 2082;
        CMTimeFlags v107 = v69;
        __int16 v108 = 1024;
        int v109 = v70;
        _os_log_send_and_compose_impl();
        uint64_t DerivedStorage = v89;
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v71 = MEMORY[0x1E4F1F9F0];
    *CMTime v16 = *MEMORY[0x1E4F1F9F0];
    *(void *)(a1 + 144) = *(void *)(v71 + 16);
    uint64_t v62 = a1 + 192;
  }
  uint64_t v72 = MEMORY[0x1E4F1F9F8];
  *(_OWORD *)uint64_t v62 = *MEMORY[0x1E4F1F9F8];
  *(void *)(v62 + 16) = *(void *)(v72 + 16);
LABEL_135:
  if (*(unsigned char *)(a1 + 140)) {
    return 0;
  }
  CMTime rhs = *(CMTime *)(a1 + 192);
  CMTime time2 = v101;
  CMTimeSubtract(&lhs, &rhs, &time2);
  *CMTime v16 = *(_OWORD *)&lhs.value;
  *(void *)(a1 + 144) = lhs.epoch;
  *(_OWORD *)&rhs.unsigned int value = *v16;
  rhs.CMTimeEpoch epoch = *(void *)(a1 + 144);
  CMTime time2 = *(CMTime *)(a1 + 396);
  CMTimeSubtract(&lhs, &rhs, &time2);
  *CMTime v16 = *(_OWORD *)&lhs.value;
  *(void *)(a1 + 144) = lhs.epoch;
  if (*(unsigned char *)(a1 + 140)) {
    return 0;
  }
  if (dword_1E9350BB0)
  {
    LODWORD(time2.value) = 0;
    LOBYTE(type.value) = 0;
    CMTimeEpoch v74 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v75 = time2.value;
    if (os_log_type_enabled(v74, type.value)) {
      unsigned int v76 = v75;
    }
    else {
      unsigned int v76 = v75 & 0xFFFFFFFE;
    }
    if (v76)
    {
      uint64_t v90 = DerivedStorage;
      uint64_t v77 = *(void *)DerivedStorage;
      if (*(void *)DerivedStorage) {
        CMTimeScale v78 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
      }
      else {
        CMTimeScale v78 = "";
      }
      unsigned int v96 = v78;
      uint64_t v79 = *(void *)a1;
      if (*(void *)a1) {
        CMTimeFlags v80 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
      }
      else {
        CMTimeFlags v80 = "";
      }
      uint64_t v81 = *(void *)(a1 + 16);
      CMTime lhs = *(CMTime *)(a1 + 192);
      Float64 v82 = CMTimeGetSeconds(&lhs);
      CMTime lhs = v101;
      Float64 v83 = CMTimeGetSeconds(&lhs);
      uint64_t v84 = *(void *)(a1 + 64);
      uint64_t v85 = v90 + 24 * *(unsigned __int8 *)(a1 + 180);
      long long v86 = *(_OWORD *)(v85 + 1208);
      lhs.CMTimeEpoch epoch = *(void *)(v85 + 1224);
      *(_OWORD *)&lhs.unsigned int value = v86;
      Float64 v87 = CMTimeGetSeconds(&lhs);
      LODWORD(rhs.value) = 136317442;
      *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"fpfs_SetTrackStartTimeAndTimeOffset";
      LOWORD(rhs.flags) = 2048;
      *(void *)((char *)&rhs.flags + 2) = v77;
      HIWORD(rhs.epoch) = 2082;
      CMTimeFlags v103 = v96;
      __int16 v104 = 2048;
      uint64_t v105 = v79;
      __int16 v106 = 2082;
      CMTimeFlags v107 = v80;
      __int16 v108 = 1024;
      int v109 = v81;
      __int16 v110 = 2048;
      Float64 v111 = v82;
      __int16 v112 = 2048;
      Float64 v113 = v83;
      __int16 v114 = 1024;
      int v115 = v84;
      __int16 v116 = 2048;
      Float64 v117 = v87;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return 4294954433;
}

uint64_t fpfs_AdjustTime(opaqueCMSampleBuffer *a1, uint64_t a2)
{
  memset(&v10, 0, sizeof(v10));
  memset(&v9, 0, sizeof(v9));
  CMSampleBufferGetPresentationTimeStamp(&lhs, a1);
  CMTime rhs = *(CMTime *)(a2 + 128);
  CMTimeAdd(&v9, &lhs, &rhs);
  CMTime rhs = v9;
  uint64_t v4 = CMSampleBufferSetOutputPresentationTimeStamp(a1, &rhs);
  if (!v4)
  {
    fpfs_GetEndOutputPresentationTimeStamp(a1, &v10);
    CMTime rhs = *(CMTime *)(a2 + 216);
    CMTime v6 = v10;
    if (CMTimeCompare(&rhs, &v6) < 0) {
      *(CMTime *)(a2 + 216) = v10;
    }
  }
  return v4;
}

uint64_t fpfs_RemoveDoNotDisplayFromBuffer(opaqueCMSampleBuffer *a1)
{
  return 0;
}

uint64_t fpfs_SetTime(uint64_t a1, CMTime *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMBaseObjectGetDerivedStorage();
  fpfs_ReleaseAndClearTimebaseTimer(*(OpaqueCMTimebase **)(DerivedStorage + 576), (dispatch_object_t *)(DerivedStorage + 1632));
  uint64_t v4 = MEMORY[0x1E4F1F9F8];
  long long v5 = *MEMORY[0x1E4F1F9F8];
  *(_OWORD *)(DerivedStorage + 1640) = *MEMORY[0x1E4F1F9F8];
  uint64_t v6 = *(void *)(v4 + 16);
  *(void *)(DerivedStorage + 1656) = v6;
  *(_OWORD *)(DerivedStorage + 1664) = v5;
  *(void *)(DerivedStorage + 1680) = v6;
  for (uint64_t i = *(void *)(DerivedStorage + 1048); i; uint64_t i = *(void *)(i + 8))
  {
    *(_OWORD *)(i + 156) = v5;
    *(void *)(i + 172) = v6;
  }
  uint64_t v8 = *(OpaqueCMTimebase **)(DerivedStorage + 568);
  if (v8)
  {
    memset(&v13, 0, sizeof(v13));
    CMTimebaseGetTime(&v13, v8);
    CMTime time1 = v13;
    CMTime time2 = *a2;
    if (CMTimeCompare(&time1, &time2))
    {
      if (dword_1E9350BB0)
      {
        os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
  }
  CMTime v10 = *(OpaqueCMTimebase **)(DerivedStorage + 576);
  CMTime time1 = *a2;
  CMTimebaseSetTime(v10, &time1);
  long long v11 = *(_OWORD *)&a2->value;
  *(void *)(DerivedStorage + 3292) = a2->epoch;
  *(_OWORD *)(DerivedStorage + 3276) = v11;
  uint64_t result = FigGetUpTimeNanoseconds();
  *(void *)(DerivedStorage + 3304) = result;
  return result;
}

uint64_t fpfs_StartTrackPlaying(uint64_t a1, uint64_t a2, CMTime *a3, CMTime *a4, CMTime *a5)
{
  uint64_t v143 = *MEMORY[0x1E4F143B8];
  unsigned __int8 v123 = 0;
  CMTimeValue value = *MEMORY[0x1E4F1F9F8];
  CMTimeScale timescale = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 8);
  CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  CMTimeValue v138 = value;
  CMTimeScale v139 = timescale;
  *(_OWORD *)&v122.CMTimeValue value = *MEMORY[0x1E4F1F9F8];
  v122.CMTimeEpoch epoch = epoch;
  CMTime v10 = *(const void **)a1;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v107 = *(void *)a2;
  uint64_t v103 = *(void *)(a2 + 16);
  char v112 = *(unsigned char *)(a2 + 420);
  uint64_t v104 = a1;
  uint64_t v105 = a3;
  __int16 v106 = v10;
  if (!fpfsi_isTrackInLists(a1, a2, 1u) && dword_1E9350BB0)
  {
    LODWORD(v121.value) = 0;
    LOBYTE(type.value) = 0;
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  int v13 = *(_DWORD *)(a2 + 32);
  if (v13 == 1668047728)
  {
    uint64_t RenderingTrackofType = fpfs_LastRenderingTrackofType(v107, 1668047728, a2);
    uint64_t v15 = RenderingTrackofType;
    if (RenderingTrackofType) {
      BOOL v16 = *(void *)(RenderingTrackofType + 64) != *(void *)(a2 + 64);
    }
    else {
      BOOL v16 = 0;
    }
    int v13 = *(_DWORD *)(a2 + 32);
  }
  else
  {
    BOOL v16 = 0;
    uint64_t v15 = 0;
  }
  if (v13 == 1936684398)
  {
    uint64_t v17 = fpfs_LastRenderingTrackofType(v107, 1936684398, a2);
    if (v17)
    {
      if (!*(unsigned char *)(v17 + 181)) {
        fpfs_EnqueueReleaseAfterDecoding(v17);
      }
    }
  }
  uint64_t v18 = fpfs_EnsureRenderChainForTrack(v10, a2, v16);
  if (v18)
  {
    uint64_t v19 = v18;
    if (dword_1E9350BB0)
    {
      uint64_t v20 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    fpfs_StopPlayingItemWithOSStatus(DerivedStorage, v107, v19);
    return v19;
  }
  int v21 = *(_DWORD *)(a2 + 32);
  if (v21 == 1986618469)
  {
    if (fpfs_ShouldTryToGrabHDRPlaybackBaton((uint64_t)v10, v107))
    {
      if (!fpfs_GrabPlayerHDRPlaybackBaton())
      {
        fpfsi_SwitchBetweenHDRAndSDR(v107, 1);
        uint64_t v22 = FigSignalErrorAt();
        if (v22) {
          return v22;
        }
      }
    }
    if (fpfs_ShouldTryToGrab4kPlaybackBaton((uint64_t)v10, v107))
    {
      if (!fpfs_GrabPlayer4kPlaybackBaton(v10))
      {
        fpfsi_SwitchBetween4kAndHD(v107, 1);
        uint64_t v22 = FigSignalErrorAt();
        if (v22) {
          return v22;
        }
      }
    }
    int v21 = *(_DWORD *)(a2 + 32);
  }
  if (v21 == 1936684398)
  {
    if (!*(unsigned char *)(a2 + 423)) {
      *(unsigned char *)(a2 + 185) = 1;
    }
    CMTime refcon = *a3;
    CMTime time1 = *a3;
    fpfs_TrimAudioTrack(a2, &time1);
    CMBufferQueueCallForEachBuffer(*(CMBufferQueueRef *)(a2 + 72), (OSStatus (__cdecl *)(CMBufferRef, void *))fpfsi_TrimAudioInQueue, &refcon);
    if (fpfs_FirstRenderingTrackofType(*(void *)a2, 1936684398) == a2)
    {
      uint64_t v23 = fpfs_FirstRenderingTrackofType(*(void *)a2, 1986618469);
      if (!v23 || *(void *)(v23 + 64) >= *(void *)(a2 + 64))
      {
        uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(*(void *)(*(void *)(a2 + 96) + 32));
        uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v25) {
          uint64_t v26 = v25;
        }
        else {
          uint64_t v26 = 0;
        }
        uint64_t v27 = *(uint64_t (**)(uint64_t, __CFString *, void))(v26 + 56);
        if (!v27) {
          return 4294954514;
        }
        uint64_t v22 = v27(FigBaseObject, @"IsTimebaseStarter", *MEMORY[0x1E4F1CFD0]);
        if (v22) {
          return v22;
        }
      }
    }
  }
  else if (v15 && v21 == 1668047728 && *(void *)(v15 + 96) == *(void *)(a2 + 96))
  {
    *(unsigned char *)(a2 + 185) = 0;
  }
  uint64_t v28 = *(void *)(a1 + 1048);
  if (v28 && v28 != a2)
  {
    do
    {
      if (*(void *)(v28 + 96) == *(void *)(a2 + 96) && *(_DWORD *)(v28 + 152) == 6)
      {
        while (1)
        {
          uint64_t v29 = (opaqueCMSampleBuffer *)CMBufferQueueDequeueAndRetain(*(CMBufferQueueRef *)(v28 + 72));
          if (!v29) {
            break;
          }
          uint64_t v30 = v29;
          uint64_t v19 = fpfs_RenderBuffer(v28, v29);
          CFRelease(v30);
          if (v19) {
            return v19;
          }
        }
      }
      uint64_t v28 = *(void *)(v28 + 8);
      if (v28) {
        BOOL v31 = v28 == a2;
      }
      else {
        BOOL v31 = 1;
      }
    }
    while (!v31);
  }
  uint64_t v22 = fpfs_UnsuspendVideoRenderingForTrack(a2, (char *)&v123);
  if (v22) {
    return v22;
  }
  CMTimeFlags v32 = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 12);
  CMTime v33 = (opaqueCMSampleBuffer *)CMBufferQueueDequeueAndRetain(*(CMBufferQueueRef *)(a2 + 72));
  if (!v33)
  {
    unsigned int v53 = a3;
    int v50 = a5;
    long long v54 = *(_OWORD *)&v53->value;
    *(void *)(a2 + 208) = v53->epoch;
    *(_OWORD *)(a2 + 192) = v54;
    CMTimeFlags v102 = v32;
    CMTimeEpoch v100 = epoch;
    uint64_t v52 = a1;
    unsigned int v35 = &PerformOneTimeAssetTableInitialization_sAssetTableInit;
LABEL_117:
    if (!*(unsigned char *)(a2 + 182))
    {
      CMTimeFlags v111 = v32;
      if (*(_DWORD *)(a2 + 32) == 1986618469) {
        uint64_t v59 = 7;
      }
      else {
        uint64_t v59 = 4;
      }
      fpfs_ChangeTrackState(a2, v59);
      goto LABEL_140;
    }
    fpfs_DeleteTrack(v107, a2);
    return FigSignalErrorAt();
  }
  float v34 = v33;
  int v108 = 0;
  CMTimeFlags v111 = v32;
  CMTimeFlags v102 = v32;
  CMTimeEpoch v100 = epoch;
  unsigned int v35 = &PerformOneTimeAssetTableInitialization_sAssetTableInit;
  uint64_t v101 = DerivedStorage;
  do
  {
    memset(&v121, 0, sizeof(v121));
    CMSampleBufferGetOutputPresentationTimeStamp(&v121, v34);
    memset(&type, 0, sizeof(type));
    fpfs_GetEndOutputPresentationTimeStamp(v34, &type);
    CMTime time1 = type;
    CMTime refcon = *a3;
    BOOL v36 = 0;
    if (!fpfs_TimeIsAfter(DerivedStorage, &time1, &refcon))
    {
      CMTime time1 = v121;
      CMTime refcon = *a3;
      if (!fpfs_TimeIsAtOrAfter(DerivedStorage, &time1, &refcon))
      {
        if (!*(unsigned char *)(a2 + 184)
          || CMBufferQueueGetBufferCount(*(CMBufferQueueRef *)(a2 + 72))
          || (CMSampleBufferGetDuration(&v119, v34), (v119.flags & 1) != 0)
          && (CMSampleBufferGetDuration(&v118, v34),
              *(_OWORD *)&time1.CMTimeValue value = kSparseSampleDurationAllowance,
              time1.CMTimeEpoch epoch = 0,
              (CMTimeCompare(&v118, &time1) & 0x80000000) == 0))
        {
          BOOL v36 = 1;
        }
      }
    }
    CMTime time1 = v121;
    CMTime refcon = *a4;
    if (CMTimeCompare(&time1, &refcon) < 0
      && (CMSampleBufferGetOutputDecodeTimeStamp(&v117, v34), CMTime time1 = *a4, CMTimeCompare(&v117, &time1) < 0)
      || v36 && *(_DWORD *)(a2 + 32) == 1986618469 && !fpfs_IsVideoDependedOnByOthers(v34))
    {
      CFRelease(v34);
    }
    else
    {
      CMTimeFlags flags = v111;
      if ((v111 & 1) == 0)
      {
        CMTimeValue value = v121.value;
        CMTimeFlags flags = v121.flags;
        CMTimeScale timescale = v121.timescale;
        CMTimeEpoch epoch = v121.epoch;
      }
      CMTimeFlags v111 = flags;
      if (v36)
      {
        if (*((_DWORD *)v35 + 748) >= 3u)
        {
          uint64_t v38 = a5;
          uint64_t v39 = v35;
          LODWORD(rhs.value) = 0;
          os_log_type_t v116 = OS_LOG_TYPE_DEFAULT;
          uint64_t v40 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v41 = rhs.value;
          if (os_log_type_enabled(v40, v116)) {
            unsigned int v42 = v41;
          }
          else {
            unsigned int v42 = v41 & 0xFFFFFFFE;
          }
          if (v42)
          {
            if (v106) {
              uint64_t v43 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
            }
            else {
              uint64_t v43 = "";
            }
            uint64_t v44 = v38;
            if (v107) {
              uint64_t v45 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
            }
            else {
              uint64_t v45 = "";
            }
            CMTime time1 = v121;
            Float64 Seconds = CMTimeGetSeconds(&time1);
            CMTime time1 = *v105;
            Float64 v47 = CMTimeGetSeconds(&time1);
            LODWORD(refcon.value) = 136316674;
            *(CMTimeValue *)((char *)&refcon.value + 4) = (CMTimeValue)"fpfs_StartTrackPlaying";
            LOWORD(refcon.flags) = 2048;
            *(void *)((char *)&refcon.flags + 2) = v106;
            HIWORD(refcon.epoch) = 2082;
            unsigned int v125 = v43;
            __int16 v126 = 2048;
            *(void *)int32_t v127 = v107;
            *(_WORD *)&v127[8] = 2082;
            *(void *)&v127[10] = v45;
            *(_WORD *)&v127[18] = 2048;
            *(Float64 *)&v127[20] = Seconds;
            *(_WORD *)&v127[28] = 2048;
            *(Float64 *)&v127[30] = v47;
            _os_log_send_and_compose_impl();
            uint64_t v38 = v44;
            uint64_t v39 = &PerformOneTimeAssetTableInitialization_sAssetTableInit;
            uint64_t DerivedStorage = v101;
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          unsigned int v35 = v39;
          a5 = v38;
          a3 = v105;
        }
        fpfs_DoNotDisplay(v34);
      }
      else if (!v108)
      {
        if (v121.flags)
        {
          if ((v102 & 1) == 0)
          {
            CMTimeValue v138 = v121.value;
            CMTimeScale v139 = v121.timescale;
            CMTimeEpoch v100 = v121.epoch;
            CMTimeFlags v102 = v121.flags;
          }
          if ((a5->flags & 0x1D) == 1)
          {
            CMTime refcon = *a5;
            CMTime rhs = v121;
            CMTimeAdd(&time1, &refcon, &rhs);
            *a5 = time1;
          }
          int v108 = 1;
        }
        else
        {
          int v108 = 0;
        }
      }
      if (v112)
      {
        time1.CMTimeValue value = 0;
        if (FigCreateReplacementAudioSBufByOmittingLeadingDependentPackets(v34, 1, (CMSampleBufferRef *)&time1))
        {
          CMTimeValue v48 = (opaqueCMSampleBuffer *)time1.value;
          if (time1.value) {
            CFRetain((CFTypeRef)time1.value);
          }
          CFRelease(v34);
          if (time1.value)
          {
            CFRelease((CFTypeRef)time1.value);
            time1.CMTimeValue value = 0;
          }
          if (!v48)
          {
            char v112 = 1;
            goto LABEL_106;
          }
        }
        else
        {
          CMTimeValue v48 = v34;
        }
        char v112 = CMSampleBufferGetNumSamples(v48) == 0;
        float v34 = v48;
      }
      else
      {
        char v112 = 0;
      }
      uint64_t v19 = fpfs_RenderBuffer(a2, v34);
      CMTime v122 = v121;
      CFRelease(v34);
      if (v19) {
        return v19;
      }
    }
LABEL_106:
    if ((a5->flags & 0x1D) == 1)
    {
      if (v108)
      {
        CMTime time1 = v121;
        CMTime refcon = *a5;
        if (CMTimeCompare(&time1, &refcon) >= 1)
        {
          if (*((_DWORD *)v35 + 748))
          {
            LODWORD(rhs.value) = 0;
            os_log_type_t v116 = OS_LOG_TYPE_DEFAULT;
            unsigned int v55 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int v56 = rhs.value;
            if (os_log_type_enabled(v55, v116)) {
              unsigned int v57 = v56;
            }
            else {
              unsigned int v57 = v56 & 0xFFFFFFFE;
            }
            if (v57)
            {
              if (v106) {
                uint64_t v58 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
              }
              else {
                uint64_t v58 = "";
              }
              if (v107) {
                CMTimeValue v60 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
              }
              else {
                CMTimeValue v60 = "";
              }
              CMTime time1 = v121;
              Float64 v61 = CMTimeGetSeconds(&time1);
              LODWORD(refcon.value) = 136316418;
              *(CMTimeValue *)((char *)&refcon.value + 4) = (CMTimeValue)"fpfs_StartTrackPlaying";
              LOWORD(refcon.flags) = 2048;
              *(void *)((char *)&refcon.flags + 2) = v106;
              HIWORD(refcon.epoch) = 2082;
              unsigned int v125 = v58;
              __int16 v126 = 2048;
              *(void *)int32_t v127 = v107;
              *(_WORD *)&v127[8] = 2082;
              *(void *)&v127[10] = v60;
              *(_WORD *)&v127[18] = 2048;
              *(Float64 *)&v127[20] = v61;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            uint64_t DerivedStorage = v101;
          }
          int v50 = a5;
          long long v62 = *(_OWORD *)&v105->value;
          *(void *)(a2 + 208) = v105->epoch;
          *(_OWORD *)(a2 + 192) = v62;
          goto LABEL_139;
        }
      }
    }
    float v34 = (opaqueCMSampleBuffer *)CMBufferQueueDequeueAndRetain(*(CMBufferQueueRef *)(a2 + 72));
  }
  while (v34);
  uint64_t v49 = a3;
  int v50 = a5;
  long long v51 = *(_OWORD *)&v49->value;
  *(void *)(a2 + 208) = v49->epoch;
  *(_OWORD *)(a2 + 192) = v51;
  if (!v108)
  {
    uint64_t v52 = v104;
    CMTimeFlags v32 = v111;
    goto LABEL_117;
  }
LABEL_139:
  fpfs_ChangeTrackState(a2, 6);
  uint64_t v52 = v104;
  fpfsi_RTCReportingUpdateAlternateIndex(v104, *(void *)(a2 + 432));
LABEL_140:
  uint64_t v63 = *(void *)(v52 + 1048);
  if (!v63) {
    return FigSignalErrorAt();
  }
  while (*(void *)(v63 + 16) != v103)
  {
    uint64_t v63 = *(void *)(v63 + 8);
    if (!v63) {
      return FigSignalErrorAt();
    }
  }
  if (*(_DWORD *)(v63 + 152) == 6 && *(_DWORD *)(v52 + 2792) > *(_DWORD *)(v52 + 2796))
  {
    if (FigCFEqual())
    {
      int v64 = *(_DWORD *)(v63 + 32);
      if (v64 == 1986618469 || v64 == 1936684398)
      {
        if (*(unsigned char *)(v52 + 2824)) {
          int v65 = (*(unsigned char *)(v52 + 2825) != 0) | 2;
        }
        else {
          int v65 = *(unsigned char *)(v52 + 2825) != 0;
        }
        uint64_t v66 = *(void *)(v52 + 1048);
        if (v66)
        {
          uint64_t v67 = 0;
          do
          {
            if (*(void *)(v63 + 64) == *(void *)(v66 + 64) && *(_DWORD *)(v66 + 152) == 1)
            {
              int v68 = *(_DWORD *)(v66 + 32);
              if (v68 == 1986618469 || v68 == 1936684398) {
                ++v67;
              }
            }
            uint64_t v66 = *(void *)(v66 + 8);
          }
          while (v66);
        }
        else
        {
          uint64_t v67 = 0;
        }
        if (v64 == 1986618469 && *(double *)(v52 + 2640) == 0.0)
        {
          *(double *)(v52 + 2640) = (double)(uint64_t)(*(void *)(v63 + 344) - *(void *)(v52 + 2632)) / 1000000000.0;
          *(double *)(v52 + 2648) = (double)(FigGetUpTimeNanoseconds() - *(void *)(v63 + 352)) / 1000000000.0;
          CMTime time1 = *(CMTime *)(v63 + 192);
          *(Float64 *)(v104 + 2656) = CMTimeGetSeconds(&time1);
          CMTime time1 = *(CMTime *)(v63 + 192);
          *(_OWORD *)&refcon.CMTimeValue value = *(_OWORD *)(v52 + 2728);
          uint64_t v52 = v104;
          refcon.CMTimeEpoch epoch = *(void *)(v104 + 2744);
          CMTimeSubtract(&time, &time1, &refcon);
          *(Float64 *)(v104 + 2776) = CMTimeGetSeconds(&time);
        }
        if (!v67 && (*(_DWORD *)(v52 + 2820) & 3) == v65) {
          fpfsi_RTCReportingReportVariantSwitchComplete(v107, 0);
        }
        int v70 = *(_DWORD *)(v63 + 32);
        if ((v70 == 1986618469 || v70 == 1936684398 && *(unsigned char *)(v52 + 1736))
          && *(_DWORD *)(DerivedStorage + 808) != 1
          && (v70 != 1986618469 || !*(unsigned char *)(v63 + 184)))
        {
          memset(&v121, 0, sizeof(v121));
          fpfs_GetTime(v52, (uint64_t)&v121);
          DescriptionString = (const void *)FigAlternateCreateDescriptionString(*(void *)(v63 + 440));
          if (*((_DWORD *)v35 + 748))
          {
            LODWORD(type.value) = 0;
            LOBYTE(rhs.value) = 0;
            uint64_t v72 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int v73 = type.value;
            if (os_log_type_enabled(v72, rhs.value)) {
              unsigned int v74 = v73;
            }
            else {
              unsigned int v74 = v73 & 0xFFFFFFFE;
            }
            if (v74)
            {
              if (v106) {
                unsigned int v75 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
              }
              else {
                unsigned int v75 = "";
              }
              Float64 v113 = v75;
              Float64 v99 = v50;
              if (v107) {
                unsigned int v76 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
              }
              else {
                unsigned int v76 = "";
              }
              __int16 v110 = v76;
              uint64_t v77 = *(void *)(v104 + 160);
              CMTime time1 = *(CMTime *)(v104 + 608);
              Float64 v78 = CMTimeGetSeconds(&time1);
              double v79 = *(float *)(DerivedStorage + 108);
              double v80 = *(float *)(v104 + 848);
              CMTime time1 = v121;
              Float64 v81 = CMTimeGetSeconds(&time1);
              CMTime time1 = *(CMTime *)(v63 + 192);
              Float64 v82 = CMTimeGetSeconds(&time1);
              LODWORD(refcon.value) = 136318210;
              *(CMTimeValue *)((char *)&refcon.value + 4) = (CMTimeValue)"fpfs_StartTrackPlaying";
              LOWORD(refcon.flags) = 2048;
              *(void *)((char *)&refcon.flags + 2) = v106;
              HIWORD(refcon.epoch) = 2082;
              unsigned int v125 = v113;
              __int16 v126 = 2048;
              *(void *)int32_t v127 = v107;
              *(_WORD *)&v127[8] = 2082;
              *(void *)&v127[10] = v110;
              *(_WORD *)&v127[18] = 1024;
              *(_DWORD *)&v127[20] = v77;
              *(_WORD *)&v127[24] = 2048;
              *(Float64 *)&v127[26] = v78;
              *(_WORD *)&v127[34] = 2048;
              *(double *)&v127[36] = v79;
              __int16 v128 = 2048;
              double v129 = v80;
              __int16 v130 = 2048;
              Float64 v131 = v81;
              __int16 v132 = 1024;
              int v133 = v103;
              __int16 v134 = 2048;
              Float64 v135 = v82;
              __int16 v136 = 2114;
              Float64 v137 = DescriptionString;
              _os_log_send_and_compose_impl();
              int v50 = v99;
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          if (DescriptionString) {
            CFRelease(DescriptionString);
          }
          unsigned int v35 = &PerformOneTimeAssetTableInitialization_sAssetTableInit;
        }
      }
    }
  }
  if (*((_DWORD *)v35 + 748))
  {
    CMTimeEpoch v83 = epoch;
    LODWORD(v121.value) = 0;
    LOBYTE(type.value) = 0;
    uint64_t v84 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v85 = v121.value;
    if (os_log_type_enabled(v84, type.value)) {
      unsigned int v86 = v85;
    }
    else {
      unsigned int v86 = v85 & 0xFFFFFFFE;
    }
    if (v86)
    {
      if (v107) {
        Float64 v87 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
      }
      else {
        Float64 v87 = "";
      }
      time1.CMTimeValue value = value;
      time1.CMTimeScale timescale = timescale;
      time1.CMTimeFlags flags = v111;
      time1.CMTimeEpoch epoch = v83;
      Float64 v88 = CMTimeGetSeconds(&time1);
      CMTime time1 = v122;
      Float64 v89 = CMTimeGetSeconds(&time1);
      time1.CMTimeValue value = v138;
      time1.CMTimeScale timescale = v139;
      time1.CMTimeFlags flags = v102;
      time1.CMTimeEpoch epoch = v100;
      Float64 v90 = CMTimeGetSeconds(&time1);
      LODWORD(refcon.value) = 136316930;
      *(CMTimeValue *)((char *)&refcon.value + 4) = (CMTimeValue)"fpfs_StartTrackPlaying";
      LOWORD(refcon.flags) = 2048;
      *(void *)((char *)&refcon.flags + 2) = v107;
      HIWORD(refcon.epoch) = 2082;
      unsigned int v125 = v87;
      __int16 v126 = 1024;
      *(_DWORD *)int32_t v127 = v103;
      *(_WORD *)&v127[4] = 2048;
      *(Float64 *)&v127[6] = v88;
      *(_WORD *)&v127[14] = 2048;
      *(Float64 *)&v127[16] = v89;
      *(_WORD *)&v127[24] = 2048;
      *(Float64 *)&v127[26] = v90;
      *(_WORD *)&v127[34] = 1024;
      *(_DWORD *)&v127[36] = v123;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    unsigned int v35 = &PerformOneTimeAssetTableInitialization_sAssetTableInit;
  }
  if (*(_DWORD *)(v63 + 32) == 1986618469)
  {
    time1.CMTimeValue value = 0;
    if (fpfsi_copyTrackFigTags(v63)) {
      VideoLayoutLoggingStringFromCollection = 0;
    }
    else {
      VideoLayoutLoggingStringFromCollection = FigAlternateCreateVideoLayoutLoggingStringFromCollection(time1.value);
    }
    if (time1.value) {
      CFRelease((CFTypeRef)time1.value);
    }
    if (*((_DWORD *)v35 + 748))
    {
      LODWORD(v121.value) = 0;
      LOBYTE(type.value) = 0;
      int32_t v92 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v93 = v121.value;
      if (os_log_type_enabled(v92, type.value)) {
        unsigned int v94 = v93;
      }
      else {
        unsigned int v94 = v93 & 0xFFFFFFFE;
      }
      if (v94)
      {
        uint64_t v95 = *(void *)v63;
        if (*(void *)v63) {
          unsigned int v96 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
        }
        else {
          unsigned int v96 = "";
        }
        uint64_t v97 = *(void *)(v63 + 16);
        LODWORD(refcon.value) = 136316162;
        *(CMTimeValue *)((char *)&refcon.value + 4) = (CMTimeValue)"fpfsi_logFigTagDescription";
        LOWORD(refcon.flags) = 2048;
        *(void *)((char *)&refcon.flags + 2) = v95;
        HIWORD(refcon.epoch) = 2082;
        unsigned int v125 = v96;
        __int16 v126 = 1024;
        *(_DWORD *)int32_t v127 = v97;
        *(_WORD *)&v127[4] = 2114;
        *(void *)&v127[6] = VideoLayoutLoggingStringFromCollection;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (VideoLayoutLoggingStringFromCollection) {
      CFRelease(VideoLayoutLoggingStringFromCollection);
    }
  }
  *(void *)(v63 + 472) = v138;
  *(_DWORD *)(v63 + 480) = v139;
  *(_DWORD *)(v63 + 484) = v102;
  *(void *)(v63 + 488) = v100;
  if (v123) {
    fpfs_PrerollTrack(v63);
  }
  if (*(unsigned char *)(v63 + 182) && !*(void *)(v63 + 112) && (v50->flags & 1) == 0) {
    fpfs_StopFeedingTrack(v63, 0, 1);
  }
  return 0;
}

uint64_t fpfs_setTimebaseStarter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 && *(void *)(a2 + 96) && !fpfs_LastRenderingTrackofType(a1, *(_DWORD *)(a2 + 32), a2))
  {
    uint64_t v7 = *(void *)(a2 + 96);
  }
  else
  {
    if (!a3 || !*(void *)(a3 + 96) || fpfs_LastRenderingTrackofType(a1, *(_DWORD *)(a3 + 32), a3)) {
      return 0;
    }
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v9 = v8 ? v8 : 0;
    if (!*(void *)(v9 + 8)) {
      return 0;
    }
    uint64_t v7 = *(void *)(a3 + 96);
  }
  uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(*(void *)(v7 + 32));
  uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  int v13 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v12 + 56);
  if (!v13) {
    return 4294954514;
  }
  uint64_t v14 = *MEMORY[0x1E4F1CFD0];

  return v13(FigBaseObject, @"IsTimebaseStarter", v14);
}

uint64_t fpfs_SeekDidComplete(const void *a1, const void *a2, int a3, char a4, unsigned char *a5, CMTime *a6)
{
  uint64_t v88 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v12 = CMBaseObjectGetDerivedStorage();
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
  if (FPSupport_SeekIDGetSource(*(_DWORD *)(v12 + 2204)) != 1)
  {
    uint64_t v13 = *(void *)(v12 + 2544);
    if (v13)
    {
      uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v15 = v14 ? v14 : 0;
      BOOL v16 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 32);
      if (v16) {
        v16(v13, 0x1EE582B78, 0x1EE584D58, 1);
      }
    }
    if (*(void *)(v12 + 3160))
    {
      uint64_t v17 = *(void *)(v12 + 2544);
      uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
      if (v17)
      {
        uint64_t v19 = UpTimeNanoseconds;
        uint64_t v20 = *(void *)(v12 + 3160);
        uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v22 = v21 ? v21 : 0;
        uint64_t v23 = *(void (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v22 + 32);
        if (v23) {
          v23(v17, 0x1EE582B78, 0x1EE584D78, (v19 - v20) / 0xF4240uLL);
        }
      }
    }
    if (*(unsigned char *)(v12 + 1508))
    {
      uint64_t v24 = *(void *)(v12 + 2544);
      if (v24)
      {
        uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v26 = v25 ? v25 : 0;
        uint64_t v27 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 32);
        if (v27) {
          v27(v24, 0x1EE582B78, 0x1EE584DB8, 1);
        }
      }
    }
  }
  if (FPSupport_SeekIDGetSource(a3) != 1)
  {
    CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    uint64_t v29 = *(const void **)(v12 + 1704);
    double v30 = *(float *)(DerivedStorage + 108);
    double v31 = *(float *)(v12 + 848);
    CMTime time1 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
    FigMetricItemSeekDidCompleteEventCreate(AllocatorForMedia, (long long *)&time1.value, 0, 0, v29, a4, &cf, v30, v31);
    uint64_t v32 = *(void *)(v12 + 3376);
    CFTypeRef v33 = cf;
    uint64_t v34 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v35 = v34 ? v34 : 0;
    BOOL v36 = *(void (**)(uint64_t, const void *, CFTypeRef))(v35 + 40);
    if (v36) {
      v36(v32, a2, v33);
    }
  }
  if (a5) {
    *a5 = 0;
  }
  if (*(void *)(v12 + 2968))
  {
    uint64_t v37 = CMBaseObjectGetDerivedStorage();
    uint64_t v38 = CMBaseObjectGetDerivedStorage();
    memset(&v74, 0, sizeof(v74));
    uint64_t v39 = FigGetUpTimeNanoseconds();
    uint64_t v40 = *(void *)(v38 + 2920);
    if (a5) {
      *a5 = 0;
    }
    CMTime time1 = *(CMTime *)(v38 + 2936);
    CMTime time2 = *(CMTime *)(v38 + 320);
    if (CMTimeCompare(&time1, &time2)) {
      goto LABEL_42;
    }
    uint64_t v41 = v39 - v40;
    *(void *)(v38 + 2928) = v39 - v40;
    uint64_t v42 = *(void *)(v38 + 2920);
    CMTime time1 = *(CMTime *)(v38 + 2936);
    uint64_t v43 = CMBaseObjectGetDerivedStorage();
    uint64_t v44 = (char *)malloc_type_malloc(0x38uLL, 0x10A0040C46062B5uLL);
    if (v44)
    {
      *((void *)v44 + 2) = v42;
      *((void *)v44 + 3) = v41;
      *(CMTime *)(v44 + 32) = time1;
      uint64_t v45 = *(void *)(v43 + 2896);
      uint64_t v46 = **(void **)(v45 + 8);
      if (v46 && v42 + v41 <= *(void *)(v46 + 24) + *(void *)(v46 + 16)) {
        goto LABEL_41;
      }
      *(void *)uint64_t v44 = 0;
      *((void *)v44 + 1) = v45;
      *(void *)uint64_t v45 = v44;
      *(void *)(v43 + 2896) = v44;
      ++*(void *)(v43 + 2960);
    }
    else
    {
      FigSignalErrorAt();
    }
    uint64_t v44 = 0;
LABEL_41:
    free(v44);
LABEL_42:
    fpfsi_getSeekableTimeRange((uint64_t)a2, &time1);
    CMTimeValue value = time1.value;
    CMTimeFlags flags = time1.flags;
    CMTimeScale timescale = time1.timescale;
    if ((time1.flags & 1) == 0 || (v84 & 1) == 0 || v85 || v82 < 0)
    {
      uint64_t v48 = FigSignalErrorAt();
    }
    else
    {
      CMTimeEpoch epoch = time1.epoch;
      time1.CMTimeValue value = value;
      time1.CMTimeScale timescale = timescale;
      time2.CMTimeValue value = v82;
      time2.CMTimeScale timescale = v83;
      time2.CMTimeFlags flags = v84;
      time2.CMTimeEpoch epoch = 0;
      CMTimeAdd(&v74, &time1, &time2);
      CMTime time1 = *(CMTime *)(v38 + 320);
      CMTime time2 = v74;
      if (CMTimeCompare(&time1, &time2) && *(float *)(v37 + 108) > 0.0
        || (CMTime time1 = *(CMTime *)(v38 + 320),
            time2.CMTimeValue value = value,
            time2.CMTimeScale timescale = timescale,
            time2.CMTimeFlags flags = flags,
            time2.CMTimeEpoch epoch = epoch,
            CMTimeCompare(&time1, &time2) >= 1)
        && *(float *)(v37 + 108) < 0.0)
      {
        fpfsi_HandleNextBestEffortTrickplayModeSeek();
        uint64_t v48 = 0;
        if (a5) {
          *a5 = 1;
        }
      }
      else
      {
        fpfsi_EndBestEffortSeekTrickplayMode(v38);
        fpfs_StopPlayingItem(v37, a2, 0);
        uint64_t v48 = 4294954433;
      }
    }
    CFMutableDictionaryRef Mutable = 0;
    goto LABEL_93;
  }
  *(void *)(v12 + 2928) = 0;
  *(void *)(v12 + 2920) = 0;
  uint64_t v49 = MEMORY[0x1E4F1F9F8];
  fpfsi_setLastSeekTimeSet(v12, MEMORY[0x1E4F1F9F8]);
  *(void *)(v12 + 3160) = 0;
  fpfsi_updateMaxPlayThroughTime();
  if (*(unsigned char *)(v12 + 1508))
  {
    LODWORD(time2.value) = 0;
    LOBYTE(value) = 0;
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v51 = time2.value;
    if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, (os_log_type_t)value)) {
      unsigned int v52 = v51;
    }
    else {
      unsigned int v52 = v51 & 0xFFFFFFFE;
    }
    if (!v52) {
      goto LABEL_67;
    }
    uint64_t v53 = *(void *)v12;
    if (*(void *)v12)
    {
      long long v54 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
      if (a2)
      {
LABEL_51:
        unsigned int v55 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
LABEL_66:
        LODWORD(v74.value) = 136316162;
        *(CMTimeValue *)((char *)&v74.value + 4) = (CMTimeValue)"fpfs_SeekDidComplete";
        LOWORD(v74.flags) = 2048;
        *(void *)((char *)&v74.flags + 2) = v53;
        HIWORD(v74.epoch) = 2082;
        unsigned int v75 = v54;
        __int16 v76 = 2048;
        *(void *)uint64_t v77 = a2;
        *(_WORD *)&v77[8] = 2082;
        *(void *)Float64 v78 = v55;
        _os_log_send_and_compose_impl();
        uint64_t v49 = MEMORY[0x1E4F1F9F8];
LABEL_67:
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        *(_OWORD *)(v12 + 1496) = *(_OWORD *)v49;
        *(void *)(v12 + 1512) = *(void *)(v49 + 16);
        goto LABEL_68;
      }
    }
    else
    {
      long long v54 = "";
      if (a2) {
        goto LABEL_51;
      }
    }
    unsigned int v55 = "";
    goto LABEL_66;
  }
LABEL_68:
  uint64_t v58 = *(const void **)(v12 + 1600);
  if (v58)
  {
    CFRelease(v58);
    *(void *)(v12 + 1600) = 0;
  }
  if (a3)
  {
    CFAllocatorRef v59 = (const __CFAllocator *)FigGetAllocatorForMedia();
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v59, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      uint64_t v60 = FigCFDictionarySetInt32();
      if (!v60)
      {
        FigCFDictionarySetValue();
        Float64 v61 = *(const void **)(v12 + 2216);
        if (v61)
        {
          CFRelease(v61);
          *(void *)(v12 + 2216) = 0;
        }
        uint64_t v60 = FigCFDictionarySetInt32();
        if (!v60)
        {
          CMTime time1 = *a6;
          uint64_t v60 = FigCFDictionarySetCMTime();
          if (!v60)
          {
            if (dword_1E9350BB0)
            {
              LODWORD(time2.value) = 0;
              LOBYTE(value) = 0;
              long long v62 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              unsigned int v63 = time2.value;
              if (os_log_type_enabled(v62, (os_log_type_t)value)) {
                unsigned int v64 = v63;
              }
              else {
                unsigned int v64 = v63 & 0xFFFFFFFE;
              }
              if (v64)
              {
                int v70 = a1;
                if (a2) {
                  int v65 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
                }
                else {
                  int v65 = "";
                }
                int v66 = *(_DWORD *)(v12 + 2204);
                Description = FigPlaybackItemSeekReasonGetDescription(*(_DWORD *)(v12 + 2224));
                CMTime time1 = *a6;
                Float64 Seconds = CMTimeGetSeconds(&time1);
                LODWORD(v74.value) = 136316674;
                *(CMTimeValue *)((char *)&v74.value + 4) = (CMTimeValue)"fpfs_SeekDidComplete";
                LOWORD(v74.flags) = 2048;
                *(void *)((char *)&v74.flags + 2) = a2;
                HIWORD(v74.epoch) = 2082;
                unsigned int v75 = v65;
                __int16 v76 = 1024;
                *(_DWORD *)uint64_t v77 = a3;
                *(_WORD *)&v77[4] = 1024;
                *(_DWORD *)&v77[6] = v66;
                *(_WORD *)Float64 v78 = 2080;
                *(void *)&v78[2] = Description;
                __int16 v79 = 2048;
                Float64 v80 = Seconds;
                _os_log_send_and_compose_impl();
                a1 = v70;
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            *(_DWORD *)(v12 + 2224) = 0;
            if (*(_DWORD *)(v12 + 2204) == a3) {
              *(_DWORD *)(v12 + 2204) = 0;
            }
            fpfs_EnqueueNotification(a1, @"SeekDidComplete", a2, Mutable);
            goto LABEL_92;
          }
        }
      }
    }
    else
    {
      uint64_t v60 = FigSignalErrorAt();
    }
    uint64_t v48 = v60;
    goto LABEL_95;
  }
  CFMutableDictionaryRef Mutable = 0;
LABEL_92:
  uint64_t v48 = 0;
LABEL_93:
  if (fpfs_shouldReleaseRenderChainForPausing((uint64_t)a2)) {
    fpfsi_ReleaseRenderChainsForPausing(a2);
  }
LABEL_95:
  if (cf) {
    CFRelease(cf);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v48;
}

double fpfs_GetTimeOffsetIntoSegment@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = MEMORY[0x1E4F1FA48];
  *(_OWORD *)a2 = *MEMORY[0x1E4F1FA48];
  *(void *)(a2 + 16) = *(void *)(v4 + 16);
  CFDictionaryRef v5 = (const __CFDictionary *)CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E4F21A48], 0);
  if (v5)
  {
    memset(&v10, 0, sizeof(v10));
    CMTimeMakeFromDictionary(&v10, v5);
    CMSampleBufferGetPresentationTimeStamp(&lhs, (CMSampleBufferRef)a1);
    CMTime v7 = v10;
    CMTimeSubtract(&v9, &lhs, &v7);
    double result = *(double *)&v9.value;
    *(CMTime *)a2 = v9;
  }
  return result;
}

uint64_t fpfs_TimeShiftDiscontinuityDomain(uint64_t result, uint64_t a2, CMTime *a3)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void **)(result + 1048);
  if (v3)
  {
    uint64_t v6 = (uint64_t *)result;
    CMTime v7 = &PerformOneTimeAssetTableInitialization_sAssetTableInit;
    uint64_t v34 = (uint64_t *)result;
    do
    {
      if (v3[8] == a2)
      {
        unsigned int v8 = *((_DWORD *)v3 + 38);
        if (v8 > 3 || v8 == 1)
        {
          if (*((_DWORD *)v7 + 748))
          {
            LODWORD(v42.value) = 0;
            LOBYTE(v41.value) = 0;
            os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int value = v42.value;
            if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, v41.value)) {
              unsigned int v18 = value;
            }
            else {
              unsigned int v18 = value & 0xFFFFFFFE;
            }
            if (v18)
            {
              uint64_t v19 = *v6;
              if (*v6) {
                uint64_t v20 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
              }
              else {
                uint64_t v20 = "";
              }
              uint64_t v30 = *v3;
              if (*v3) {
                double v31 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
              }
              else {
                double v31 = "";
              }
              uint64_t v32 = v3[2];
              int v33 = *((_DWORD *)v3 + 38);
              LODWORD(rhs.value) = 136316674;
              *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"fpfs_TimeShiftDiscontinuityDomain";
              LOWORD(rhs.flags) = 2048;
              *(void *)((char *)&rhs.flags + 2) = v19;
              HIWORD(rhs.epoch) = 2082;
              uint64_t v44 = v20;
              __int16 v45 = 2048;
              uint64_t v46 = v30;
              __int16 v47 = 2082;
              uint64_t v48 = v31;
              __int16 v49 = 1024;
              int v50 = v32;
              __int16 v51 = 1024;
              LODWORD(v52) = v33;
              _os_log_send_and_compose_impl();
              uint64_t v6 = v34;
            }
            double result = fig_log_call_emit_and_clean_up_after_send_and_compose();
            CMTime v7 = &PerformOneTimeAssetTableInitialization_sAssetTableInit;
          }
        }
        else
        {
          Head = (opaqueCMSampleBuffer *)CMBufferQueueGetHead((CMBufferQueueRef)v3[9]);
          memset(&v42, 0, sizeof(v42));
          CMTime lhs = *(CMTime *)(v3 + 16);
          CMTime rhs = *a3;
          CMTimeAdd(&v42, &lhs, &rhs);
          CMTime lhs = *(CMTime *)&v6[3 * *((unsigned __int8 *)v3 + 180) + 31];
          CMTime rhs = *(CMTime *)(v3 + 16);
          double result = CMTimeCompare(&lhs, &rhs);
          if (!result) {
            *(CMTime *)&v6[3 * *((unsigned __int8 *)v3 + 180) + 31] = v42;
          }
          *(CMTime *)(v3 + 16) = v42;
          if (Head)
          {
            memset(&v41, 0, sizeof(v41));
            CMSampleBufferGetOutputPresentationTimeStamp(&v41, Head);
            if (*((_DWORD *)v7 + 748))
            {
              unsigned int v40 = 0;
              os_log_type_t type = OS_LOG_TYPE_DEFAULT;
              uint64_t v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              unsigned int v12 = v40;
              if (os_log_type_enabled(v11, type)) {
                unsigned int v13 = v12;
              }
              else {
                unsigned int v13 = v12 & 0xFFFFFFFE;
              }
              if (v13)
              {
                uint64_t v14 = *v6;
                if (*v6) {
                  uint64_t v15 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
                }
                else {
                  uint64_t v15 = "";
                }
                BOOL v36 = v15;
                uint64_t v21 = *v3;
                if (*v3) {
                  uint64_t v22 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
                }
                else {
                  uint64_t v22 = "";
                }
                uint64_t v35 = v22;
                uint64_t v23 = v3[2];
                CMTime lhs = *a3;
                Float64 Seconds = CMTimeGetSeconds(&lhs);
                CMTime lhs = v41;
                Float64 v25 = CMTimeGetSeconds(&lhs);
                CMTime lhs = v41;
                CMTime rhs = *a3;
                CMTimeAdd(&time, &lhs, &rhs);
                Float64 v26 = CMTimeGetSeconds(&time);
                CMTime lhs = v42;
                CMTime rhs = *a3;
                CMTimeSubtract(&v37, &lhs, &rhs);
                Float64 v27 = CMTimeGetSeconds(&v37);
                CMTime lhs = v42;
                Float64 v28 = CMTimeGetSeconds(&lhs);
                LODWORD(rhs.value) = 136317698;
                *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"fpfs_TimeShiftDiscontinuityDomain";
                LOWORD(rhs.flags) = 2048;
                *(void *)((char *)&rhs.flags + 2) = v14;
                HIWORD(rhs.epoch) = 2082;
                uint64_t v44 = v36;
                __int16 v45 = 2048;
                uint64_t v46 = v21;
                __int16 v47 = 2082;
                uint64_t v48 = v35;
                __int16 v49 = 1024;
                int v50 = v23;
                __int16 v51 = 2048;
                Float64 v52 = Seconds;
                __int16 v53 = 2048;
                Float64 v54 = v25;
                __int16 v55 = 2048;
                Float64 v56 = v26;
                __int16 v57 = 2048;
                Float64 v58 = v27;
                __int16 v59 = 2048;
                Float64 v60 = v28;
                _os_log_send_and_compose_impl();
                uint64_t v6 = v34;
                CMTime v7 = &PerformOneTimeAssetTableInitialization_sAssetTableInit;
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            uint64_t v29 = MEMORY[0x1E4F1FA48];
            *(_OWORD *)(v3 + 27) = *MEMORY[0x1E4F1FA48];
            v3[29] = *(void *)(v29 + 16);
            double result = CMBufferQueueCallForEachBuffer((CMBufferQueueRef)v3[9], (OSStatus (__cdecl *)(CMBufferRef, void *))fpfs_AdjustTime, v3);
          }
        }
      }
      uint64_t v3 = (void *)v3[1];
    }
    while (v3);
  }
  return result;
}

BOOL fpfs_IsVideoDependedOnByOthers(opaqueCMSampleBuffer *a1)
{
  CFArrayRef SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(a1, 0);
  if (SampleAttachmentsArray
    && (CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(SampleAttachmentsArray, 0)) != 0
    && (CFDictionaryRef v3 = ValueAtIndex,
        uint64_t v4 = (const void *)*MEMORY[0x1E4F1F1F8],
        CFDictionaryContainsKey(ValueAtIndex, (const void *)*MEMORY[0x1E4F1F1F8])))
  {
    return CFDictionaryGetValue(v3, v4) == (const void *)*MEMORY[0x1E4F1CFD0];
  }
  else
  {
    return 1;
  }
}

void fpfsi_RTCReportingReportVariantSwitchComplete(uint64_t a1, unsigned int a2)
{
  uint64_t v117 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  fpfsi_RTCReportingUpdateCurrentAlternateInfo();
  if (a2 || *(int *)(DerivedStorage + 2792) >= 1)
  {
    uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
    *(void *)(DerivedStorage + 2664) = UpTimeNanoseconds;
    uint64_t v5 = *(void *)(DerivedStorage + 2632);
    CMTime time = *(CMTime *)(DerivedStorage + 2704);
    double Seconds = CMTimeGetSeconds(&time);
    CMTime time = *(CMTime *)(DerivedStorage + 2680);
    double v7 = CMTimeGetSeconds(&time);
    CMTime time = *(CMTime *)(DerivedStorage + 2752);
    double v8 = CMTimeGetSeconds(&time);
    CMTime time = *(CMTime *)(DerivedStorage + 2728);
    double v9 = CMTimeGetSeconds(&time);
    double v10 = *(double *)(DerivedStorage + 2656);
    fpfs_GetTime(DerivedStorage, (uint64_t)&v115);
    double v11 = CMTimeGetSeconds(&v115);
    int v12 = *(_DWORD *)(DerivedStorage + 2844);
    unsigned int v13 = @"Up";
    if (v12 == 2)
    {
      uint64_t v14 = @"Up";
    }
    else
    {
      uint64_t v14 = @"Down";
      if (v12 != 3 && v12 != 15 && *(_DWORD *)(DerivedStorage + 2800) <= *(_DWORD *)(DerivedStorage + 2804)) {
        uint64_t v14 = @"Up";
      }
      unsigned int v13 = @"None";
      switch(v12)
      {
        case 0:
          break;
        case 1:
          unsigned int v13 = @"Seek";
          break;
        case 3:
          unsigned int v13 = @"DownBW";
          break;
        case 4:
          unsigned int v13 = @"DownStall";
          break;
        case 5:
          unsigned int v13 = @"Deactivate";
          break;
        case 6:
          unsigned int v13 = @"Stop";
          break;
        case 7:
          unsigned int v13 = @"AltChanged";
          break;
        case 8:
          unsigned int v13 = @"IFrameOnly";
          break;
        case 9:
          unsigned int v13 = @"MediaSel";
          break;
        case 10:
          unsigned int v13 = @"StopWhileStall";
          break;
        case 11:
          unsigned int v13 = @"StopBeforeStart";
          break;
        case 12:
          unsigned int v13 = @"SeekInCache";
          break;
        case 13:
          unsigned int v13 = @"AltHadGapErr";
          break;
        case 14:
          unsigned int v13 = @"Relabel";
          break;
        case 15:
          unsigned int v13 = @"LLDown";
          break;
        case 16:
          unsigned int v13 = @"VideoFrmtChg";
          break;
        default:
          unsigned int v13 = @"Unknown";
          break;
      }
    }
    unint64_t v15 = UpTimeNanoseconds - v5;
    double v16 = v8 - v9;
    double v17 = v10 - v11;
    if (dword_1E9350BB0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (*(unsigned char *)(DerivedStorage + 2824)) {
      uint64_t v19 = @"Aud";
    }
    else {
      uint64_t v19 = 0;
    }
    uint64_t v20 = @"AuVd";
    if (!*(unsigned char *)(DerivedStorage + 2824)) {
      uint64_t v20 = @"Vid";
    }
    if (*(unsigned char *)(DerivedStorage + 2825)) {
      uint64_t v21 = v20;
    }
    else {
      uint64_t v21 = v19;
    }
    uint64_t v22 = *(void *)(DerivedStorage + 2544);
    if (v22)
    {
      uint64_t v23 = *(int *)(DerivedStorage + 2804);
      uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v25 = v24 ? v24 : 0;
      Float64 v26 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v25 + 56);
      if (v26) {
        v26(v22, 0x1EE582B78, 0x1EE561358, v23, 0);
      }
    }
    uint64_t v27 = *(void *)(DerivedStorage + 2544);
    if (v27)
    {
      uint64_t v28 = *(int *)(DerivedStorage + 2800);
      uint64_t v29 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v30 = v29 ? v29 : 0;
      double v31 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v30 + 56);
      if (v31) {
        v31(v27, 0x1EE582B78, 0x1EE561338, v28, 0);
      }
    }
    uint64_t v32 = *(void *)(DerivedStorage + 2544);
    if (v32)
    {
      uint64_t v33 = *(int *)(DerivedStorage + 2828);
      uint64_t v34 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v35 = v34 ? v34 : 0;
      BOOL v36 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v35 + 56);
      if (v36) {
        v36(v32, 0x1EE582B78, 0x1EE561978, v33, 0);
      }
    }
    uint64_t v37 = *(void *)(DerivedStorage + 2544);
    if (v37)
    {
      uint64_t v38 = *(int *)(DerivedStorage + 2832);
      uint64_t v39 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v40 = v39 ? v39 : 0;
      CMTime v41 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v40 + 56);
      if (v41) {
        v41(v37, 0x1EE582B78, 0x1EE561998, v38, 0);
      }
    }
    uint64_t v42 = *(void *)(DerivedStorage + 2544);
    if (v42)
    {
      uint64_t v43 = *(int *)(DerivedStorage + 2836);
      uint64_t v44 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v45 = v44 ? v44 : 0;
      uint64_t v46 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v45 + 56);
      if (v46) {
        v46(v42, 0x1EE582B78, 0x1EE561378, v43, 0);
      }
    }
    uint64_t v47 = *(void *)(DerivedStorage + 2544);
    if (v47)
    {
      uint64_t v48 = *(int *)(DerivedStorage + 2840);
      uint64_t v49 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v50 = v49 ? v49 : 0;
      __int16 v51 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v50 + 56);
      if (v51) {
        v51(v47, 0x1EE582B78, 0x1EE561398, v48, 0);
      }
    }
    uint64_t v52 = *(void *)(DerivedStorage + 2544);
    if (v52)
    {
      double v53 = *(double *)(DerivedStorage + 2640);
      uint64_t v54 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v55 = v54 ? v54 : 0;
      Float64 v56 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v55 + 56);
      if (v56) {
        v56(v52, 0x1EE582B78, 0x1EE561458, (uint64_t)(v53 * 1000.0), 0);
      }
    }
    uint64_t v57 = *(void *)(DerivedStorage + 2544);
    if (v57)
    {
      double v58 = *(double *)(DerivedStorage + 2648);
      uint64_t v59 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v60 = v59 ? v59 : 0;
      Float64 v61 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v60 + 56);
      if (v61) {
        v61(v57, 0x1EE582B78, 0x1EE561478, (uint64_t)(v58 * 1000.0), 0);
      }
    }
    uint64_t v62 = *(void *)(DerivedStorage + 2544);
    if (v62)
    {
      uint64_t v63 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v63) {
        uint64_t v64 = v63;
      }
      else {
        uint64_t v64 = 0;
      }
      int v65 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v64 + 56);
      if (v65) {
        v65(v62, 0x1EE582B78, 0x1EE561498, (uint64_t)(v17 * 1000.0), 0);
      }
      uint64_t v66 = *(void *)(DerivedStorage + 2544);
      if (v66)
      {
        uint64_t v67 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v67) {
          uint64_t v68 = v67;
        }
        else {
          uint64_t v68 = 0;
        }
        CFArrayRef v69 = *(void (**)(uint64_t, uint64_t, uint64_t, unint64_t, void))(v68 + 56);
        if (v69) {
          v69(v66, 0x1EE582B78, 0x1EE5613B8, v15 / 0xF4240, 0);
        }
        uint64_t v70 = *(void *)(DerivedStorage + 2544);
        if (v70)
        {
          uint64_t v71 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v71) {
            uint64_t v72 = v71;
          }
          else {
            uint64_t v72 = 0;
          }
          unsigned int v73 = *(void (**)(uint64_t, uint64_t, uint64_t, __CFString *, void))(v72 + 48);
          if (v73) {
            v73(v70, 0x1EE582B78, 0x1EE5612F8, v14, 0);
          }
          uint64_t v74 = *(void *)(DerivedStorage + 2544);
          if (v74)
          {
            uint64_t v75 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v75) {
              uint64_t v76 = v75;
            }
            else {
              uint64_t v76 = 0;
            }
            uint64_t v77 = *(void (**)(uint64_t, uint64_t, uint64_t, __CFString *, void))(v76 + 48);
            if (v77) {
              v77(v74, 0x1EE582B78, 0x1EE561438, v13, 0);
            }
            uint64_t v78 = *(void *)(DerivedStorage + 2544);
            if (v78)
            {
              uint64_t v79 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v79) {
                uint64_t v80 = v79;
              }
              else {
                uint64_t v80 = 0;
              }
              Float64 v81 = *(void (**)(uint64_t, uint64_t, uint64_t, void, void))(v80 + 56);
              if (v81) {
                v81(v78, 0x1EE582B78, 0x1EE561318, a2, 0);
              }
              uint64_t v82 = *(void *)(DerivedStorage + 2544);
              if (v82)
              {
                uint64_t v83 = *(void *)(CMBaseObjectGetVTable() + 16);
                if (v83) {
                  uint64_t v84 = v83;
                }
                else {
                  uint64_t v84 = 0;
                }
                uint64_t v85 = *(void (**)(uint64_t, uint64_t, uint64_t, __CFString *, void))(v84 + 48);
                if (v85) {
                  v85(v82, 0x1EE582B78, 0x1EE5489F8, v21, 0);
                }
                uint64_t v86 = *(void *)(DerivedStorage + 2544);
                if (v86)
                {
                  uint64_t v87 = *(void *)(CMBaseObjectGetVTable() + 16);
                  if (v87) {
                    uint64_t v88 = v87;
                  }
                  else {
                    uint64_t v88 = 0;
                  }
                  Float64 v89 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v88 + 56);
                  if (v89) {
                    v89(v86, 0x1EE582B78, 0x1EE561518, (uint64_t)((Seconds - v7) * 1000.0), 0);
                  }
                  uint64_t v90 = *(void *)(DerivedStorage + 2544);
                  if (v90)
                  {
                    uint64_t v91 = *(void *)(CMBaseObjectGetVTable() + 16);
                    if (v91) {
                      uint64_t v92 = v91;
                    }
                    else {
                      uint64_t v92 = 0;
                    }
                    unsigned int v93 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v92 + 56);
                    if (v93) {
                      v93(v90, 0x1EE582B78, 0x1EE561538, (uint64_t)(v16 * 1000.0), 0);
                    }
                    uint64_t v94 = *(void *)(DerivedStorage + 2544);
                    if (v94)
                    {
                      double v95 = *(double *)(DerivedStorage + 2776);
                      uint64_t v96 = *(void *)(CMBaseObjectGetVTable() + 16);
                      uint64_t v97 = v96 ? v96 : 0;
                      v98 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v97 + 56);
                      if (v98) {
                        v98(v94, 0x1EE582B78, 0x1EE561558, (uint64_t)(v95 * 1000.0), 0);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    uint64_t v99 = *(void *)(DerivedStorage + 2544);
    if (v99)
    {
      uint64_t v100 = *(unsigned __int8 *)(DerivedStorage + 2816);
      uint64_t v101 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v102 = v101 ? v101 : 0;
      uint64_t v103 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v102 + 56);
      if (v103) {
        v103(v99, 0x1EE582B78, 0x1EE5612D8, v100, 0);
      }
    }
    uint64_t v104 = *(void *)(DerivedStorage + 2544);
    if (v104)
    {
      uint64_t v105 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v106 = v105 ? v105 : 0;
      uint64_t v107 = *(void (**)(uint64_t, uint64_t, uint64_t, void, void))(v106 + 8);
      if (v107) {
        v107(v104, 0x1EE582B78, 109, 0, 0);
      }
    }
    if (a2)
    {
      int v108 = *(_DWORD *)(DerivedStorage + 2800);
      if (v108 >= 1)
      {
        *(_DWORD *)(DerivedStorage + 1752) = v108;
        *(_DWORD *)(DerivedStorage + 1756) = *(_DWORD *)(DerivedStorage + 2828);
      }
    }
    *(void *)(DerivedStorage + 2776) = 0;
    *(_OWORD *)(DerivedStorage + 2632) = 0u;
    *(_OWORD *)(DerivedStorage + 2648) = 0u;
    *(void *)(DerivedStorage + 2664) = 0;
    uint64_t v109 = MEMORY[0x1E4F1F9F8];
    long long v110 = *MEMORY[0x1E4F1F9F8];
    *(_OWORD *)(DerivedStorage + 2680) = *MEMORY[0x1E4F1F9F8];
    uint64_t v111 = *(void *)(v109 + 16);
    *(void *)(DerivedStorage + 2696) = v111;
    uint64_t v112 = MEMORY[0x1E4F1FA08];
    long long v113 = *MEMORY[0x1E4F1FA08];
    *(_OWORD *)(DerivedStorage + 2704) = *MEMORY[0x1E4F1FA08];
    uint64_t v114 = *(void *)(v112 + 16);
    *(void *)(DerivedStorage + 2720) = v114;
    *(void *)(DerivedStorage + 2744) = v111;
    *(_OWORD *)(DerivedStorage + 2728) = v110;
    *(_OWORD *)(DerivedStorage + 2752) = v113;
    *(void *)(DerivedStorage + 2768) = v114;
    *(_DWORD *)(DerivedStorage + 2804) = -1;
    *(_DWORD *)(DerivedStorage + 2832) = -1;
    *(unsigned char *)(DerivedStorage + 2808) = 0;
    *(unsigned char *)(DerivedStorage + 2816) = 0;
    *(_DWORD *)(DerivedStorage + 2820) = 0;
    *(_WORD *)(DerivedStorage + 2824) = 0;
    *(void *)(DerivedStorage + 2784) = 0;
    *(_DWORD *)(DerivedStorage + 2800) = *(_DWORD *)(DerivedStorage + 1752);
    *(_DWORD *)(DerivedStorage + 2796) = *(_DWORD *)(DerivedStorage + 2792);
    *(_DWORD *)(DerivedStorage + 2828) = *(_DWORD *)(DerivedStorage + 1756);
    if (!a2) {
      *(_DWORD *)(DerivedStorage + 2836) = FigAlternateGetVideoQualityIndex(*(void *)(DerivedStorage + 1704));
    }
  }
}

uint64_t fpfsi_TrimAudioInQueue(opaqueCMSampleBuffer *a1, CMTime *a2)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  CMTime v30 = *a2;
  memset(&v29, 0, sizeof(v29));
  memset(&v28, 0, sizeof(v28));
  memset(&v27, 0, sizeof(v27));
  CMSampleBufferGetOutputPresentationTimeStamp(&v27, a1);
  if (fpfs_IsMarkerOnly(a1)) {
    return 0;
  }
  CMTime time1 = v27;
  CMTime time2 = v30;
  if (!CMTimeCompare(&time1, &time2)) {
    return 0xFFFFFFFFLL;
  }
  fpfs_GetEndOutputPresentationTimeStamp(a1, &v29);
  CMTime v26 = v30;
  memset(&time1, 0, sizeof(time1));
  long long v24 = *MEMORY[0x1E4F1FA48];
  *(_OWORD *)&time2.unsigned int value = *MEMORY[0x1E4F1FA48];
  CMTimeEpoch v4 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
  time2.CMTimeEpoch epoch = v4;
  memset(&v35, 0, sizeof(v35));
  CMSampleBufferGetOutputPresentationTimeStamp(&v35, a1);
  memset(&type, 0, sizeof(type));
  fpfs_GetEndOutputPresentationTimeStamp(a1, &type);
  memset(&v33, 0, sizeof(v33));
  CFStringRef v5 = (const __CFString *)*MEMORY[0x1E4F1F308];
  CFDictionaryRef v6 = (const __CFDictionary *)CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E4F1F308], 0);
  if (v6) {
    CMTimeMakeFromDictionary(&time2, v6);
  }
  CMTime lhs = v35;
  CMTime rhs = time2;
  CMTimeSubtract(&time1, &lhs, &rhs);
  CMTime lhs = v30;
  CMTime rhs = time1;
  if (CMTimeCompare(&lhs, &rhs) < 0) {
    CMTime v26 = time1;
  }
  CMTime lhs = v26;
  CMTime rhs = type;
  if (CMTimeCompare(&lhs, &rhs) >= 1) {
    CMTime v26 = type;
  }
  CMTime lhs = v26;
  CMTime rhs = time1;
  CMTimeSubtract(&v33, &lhs, &rhs);
  CMTime lhs = v33;
  CMTime rhs = time2;
  if (CMTimeCompare(&lhs, &rhs))
  {
    CMTime lhs = v33;
    *(_OWORD *)&rhs.unsigned int value = v24;
    rhs.CMTimeEpoch epoch = v4;
    if (CMTimeCompare(&lhs, &rhs))
    {
      CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
      CMTime lhs = v33;
      CFDictionaryRef v8 = CMTimeCopyAsDictionary(&lhs, AllocatorForMedia);
      if (v8)
      {
        CFDictionaryRef v9 = v8;
        CMSetAttachment(a1, v5, v8, 1u);
        CFRelease(v9);
        CMTime lhs = v26;
        CMSampleBufferSetOutputPresentationTimeStamp(a1, &lhs);
      }
    }
    else
    {
      CMRemoveAttachment(a1, v5);
    }
  }
  CMSampleBufferGetOutputPresentationTimeStamp(&v28, a1);
  CMSampleBufferGetOutputDuration(&v25, a1);
  *(_OWORD *)&time1.unsigned int value = v24;
  time1.CMTimeEpoch epoch = v4;
  if (!CMTimeCompare(&v25, &time1) && (time1 = v28, CMTime time2 = v30, CMTimeCompare(&time1, &time2) < 0))
  {
    CMTime time1 = v30;
    CMSampleBufferSetOutputPresentationTimeStamp(a1, &time1);
    if (dword_1E9350BB0 >= 2)
    {
      LODWORD(v35.value) = 0;
      LOBYTE(type.value) = 0;
      os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int value = v35.value;
      if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type.value)) {
        unsigned int v18 = value;
      }
      else {
        unsigned int v18 = value & 0xFFFFFFFE;
      }
      if (!v18) {
        goto LABEL_31;
      }
      CMTime time1 = v27;
      Float64 Seconds = CMTimeGetSeconds(&time1);
      CMTime time1 = v30;
      Float64 v20 = CMTimeGetSeconds(&time1);
      CMTime time1 = v29;
      Float64 v21 = CMTimeGetSeconds(&time1);
      CMTime time1 = v28;
      Float64 v22 = CMTimeGetSeconds(&time1);
      CMTime time1 = v30;
      Float64 v23 = CMTimeGetSeconds(&time1);
      LODWORD(time2.value) = 136316418;
      *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpfsi_TrimAudioInQueue";
      LOWORD(time2.flags) = 2048;
      *(Float64 *)((char *)&time2.flags + 2) = Seconds;
      HIWORD(time2.epoch) = 2048;
      Float64 v37 = v20;
      __int16 v38 = 2048;
      Float64 v39 = v21;
      __int16 v40 = 2048;
      Float64 v41 = v22;
      __int16 v42 = 2048;
      Float64 v43 = v23;
      goto LABEL_24;
    }
  }
  else if (dword_1E9350BB0 >= 2)
  {
    LODWORD(v35.value) = 0;
    LOBYTE(type.value) = 0;
    double v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v11 = v35.value;
    if (os_log_type_enabled(v10, type.value)) {
      unsigned int v12 = v11;
    }
    else {
      unsigned int v12 = v11 & 0xFFFFFFFE;
    }
    if (!v12) {
      goto LABEL_31;
    }
    CMTime time1 = v27;
    Float64 v13 = CMTimeGetSeconds(&time1);
    CMTime time1 = v30;
    Float64 v14 = CMTimeGetSeconds(&time1);
    CMTime time1 = v29;
    Float64 v15 = CMTimeGetSeconds(&time1);
    LODWORD(time2.value) = 136315906;
    *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpfsi_TrimAudioInQueue";
    LOWORD(time2.flags) = 2048;
    *(Float64 *)((char *)&time2.flags + 2) = v13;
    HIWORD(time2.epoch) = 2048;
    Float64 v37 = v14;
    __int16 v38 = 2048;
    Float64 v39 = v15;
LABEL_24:
    _os_log_send_and_compose_impl();
LABEL_31:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CMTime time1 = v29;
  CMTime time2 = v30;
  return (~CMTimeCompare(&time1, &time2) >> 31);
}

void fpfsi_RTCReportingUpdateCurrentAlternateInfo()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  VideoRangeString = FigAlternateGetVideoRangeString(*(__CFString **)(DerivedStorage + 1704));
  fpfsi_RTCReportingUpdateVariantRank(DerivedStorage, *(_DWORD *)(DerivedStorage + 1752), *(_DWORD *)(DerivedStorage + 1756));
  uint64_t v2 = *(void *)(DerivedStorage + 1704);
  if (!v2) {
    return;
  }
  unsigned int IsAudioOnly = FigAlternateIsAudioOnly(v2);
  double Resolution = FigAlternateGetResolution(*(void *)(DerivedStorage + 1704));
  double v6 = v5;
  MaxAudioChannelCFIndex Count = FigAlternateGetMaxAudioChannelCount(*(const void **)(DerivedStorage + 1704));
  CFDictionaryRef v8 = *(const void **)(DerivedStorage + 1704);
  CFDictionaryRef CurrentAudioPersistentIDFromMediaOption = fpfsi_GetCurrentAudioPersistentIDFromMediaOption();
  int AudioChannelCounts = FigAlternateGetAudioChannelCounts(v8, CurrentAudioPersistentIDFromMediaOption, 0, 0);
  uint64_t v11 = *(void *)(DerivedStorage + 2544);
  if (v11)
  {
    int v12 = AudioChannelCounts;
    uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v13) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    Float64 v15 = *(void (**)(uint64_t, uint64_t, uint64_t, void, void))(v14 + 56);
    if (v15) {
      v15(v11, 0x1EE582B78, 0x1EE5850D8, MaxAudioChannelCount, 0);
    }
    uint64_t v16 = *(void *)(DerivedStorage + 2544);
    if (v16)
    {
      uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v18 = v17 ? v17 : 0;
      uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t, void, void))(v18 + 56);
      if (v19) {
        v19(v16, 0x1EE582B78, 0x1EE562238, v12, 0);
      }
    }
  }
  if (v6 > 0.0 && Resolution > 0.0)
  {
    uint64_t v20 = *(void *)(DerivedStorage + 2544);
    if (v20)
    {
      uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v21) {
        uint64_t v22 = v21;
      }
      else {
        uint64_t v22 = 0;
      }
      Float64 v23 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v22 + 56);
      if (v23) {
        v23(v20, 0x1EE582B78, 0x1EE583938, (uint64_t)Resolution, 0);
      }
      uint64_t v24 = *(void *)(DerivedStorage + 2544);
      if (!v24) {
        goto LABEL_40;
      }
      uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v25) {
        uint64_t v26 = v25;
      }
      else {
        uint64_t v26 = 0;
      }
      CMTime v27 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v26 + 56);
      if (v27) {
        v27(v24, 0x1EE582B78, 0x1EE583918, (uint64_t)v6, 0);
      }
    }
    uint64_t v28 = *(void *)(DerivedStorage + 2544);
    if (v28)
    {
      uint64_t v29 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v29) {
        uint64_t v30 = v29;
      }
      else {
        uint64_t v30 = 0;
      }
      double v31 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v30 + 56);
      if (v31) {
        v31(v28, 0x1EE582B78, 0x1EE5617B8, (uint64_t)Resolution, 0);
      }
      uint64_t v32 = *(void *)(DerivedStorage + 2544);
      if (v32)
      {
        uint64_t v33 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v34 = v33 ? v33 : 0;
        CMTime v35 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v34 + 56);
        if (v35) {
          v35(v32, 0x1EE582B78, 0x1EE5617D8, (uint64_t)v6, 0);
        }
      }
    }
  }
LABEL_40:
  int PeakBitRate = FigAlternateGetPeakBitRate(*(void *)(DerivedStorage + 1704));
  int valuePtr = FigAlternateGetAverageBitRate(*(void *)(DerivedStorage + 1704));
  uint64_t CodecString = FigAlternateGetCodecString(*(void *)(DerivedStorage + 1704));
  VideoLayoutString = FigAlternateGetVideoLayoutString(*(void *)(DerivedStorage + 1704));
  VideoContentTypeString = FigAlternateGetVideoContentTypeString(*(void *)(DerivedStorage + 1704));
  int VideoQualityIndex = FigAlternateGetVideoQualityIndex(*(void *)(DerivedStorage + 1704));
  uint64_t v40 = *(void *)(DerivedStorage + 2544);
  if (v40)
  {
    int v41 = VideoQualityIndex;
    uint64_t v42 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v43 = v42 ? v42 : 0;
    uint64_t v44 = *(void (**)(uint64_t, uint64_t, uint64_t, void, void))(v43 + 56);
    if (v44) {
      v44(v40, 0x1EE582B78, 0x1EE584E18, v41, 0);
    }
  }
  CFAllocatorRef v45 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFNumberRef v46 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, &valuePtr);
  uint64_t v47 = *(void *)(DerivedStorage + 2544);
  if (v47)
  {
    uint64_t v48 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v49 = v48 ? v48 : 0;
    uint64_t v50 = *(void (**)(uint64_t, uint64_t, uint64_t, CFNumberRef, void))(v49 + 48);
    if (v50) {
      v50(v47, 0x1EE582B78, 0x1EE5614D8, v46, 0);
    }
  }
  CFNumberRef v51 = CFNumberCreate(v45, kCFNumberIntType, &PeakBitRate);
  uint64_t v52 = *(void *)(DerivedStorage + 2544);
  if (v52)
  {
    uint64_t v53 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v53) {
      uint64_t v54 = v53;
    }
    else {
      uint64_t v54 = 0;
    }
    uint64_t v55 = *(void (**)(uint64_t, uint64_t, uint64_t, CFNumberRef, void))(v54 + 48);
    if (v55) {
      v55(v52, 0x1EE582B78, 0x1EE5614F8, v51, 0);
    }
    uint64_t v56 = *(void *)(DerivedStorage + 2544);
    if (v56)
    {
      uint64_t v57 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v57) {
        uint64_t v58 = v57;
      }
      else {
        uint64_t v58 = 0;
      }
      uint64_t v59 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v58 + 48);
      if (v59) {
        v59(v56, 0x1EE582B78, 0x1EE583D98, CodecString, 0);
      }
      uint64_t v60 = *(void *)(DerivedStorage + 2544);
      if (v60)
      {
        uint64_t v61 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v61) {
          uint64_t v62 = v61;
        }
        else {
          uint64_t v62 = 0;
        }
        uint64_t v63 = *(void (**)(uint64_t, uint64_t, uint64_t, __CFString *, void))(v62 + 48);
        if (v63) {
          v63(v60, 0x1EE582B78, 0x1EE583778, VideoLayoutString, 0);
        }
        uint64_t v64 = *(void *)(DerivedStorage + 2544);
        if (v64)
        {
          uint64_t v65 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v65) {
            uint64_t v66 = v65;
          }
          else {
            uint64_t v66 = 0;
          }
          uint64_t v67 = *(void (**)(uint64_t, uint64_t, uint64_t, __CFString *, void))(v66 + 48);
          if (v67) {
            v67(v64, 0x1EE582B78, 0x1EE583798, VideoContentTypeString, 0);
          }
          uint64_t v68 = *(void *)(DerivedStorage + 2544);
          if (v68)
          {
            uint64_t v69 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v69) {
              uint64_t v70 = v69;
            }
            else {
              uint64_t v70 = 0;
            }
            uint64_t v71 = *(void (**)(uint64_t, uint64_t, uint64_t, void, void))(v70 + 56);
            if (v71) {
              v71(v68, 0x1EE582B78, 0x1EE5838F8, IsAudioOnly, 0);
            }
            uint64_t v72 = *(void *)(DerivedStorage + 2544);
            if (v72)
            {
              uint64_t v73 = *(void *)(CMBaseObjectGetVTable() + 16);
              uint64_t v74 = v73 ? v73 : 0;
              uint64_t v75 = *(void (**)(uint64_t, uint64_t, uint64_t, __CFString *, void))(v74 + 48);
              if (v75) {
                v75(v72, 0x1EE582B78, 0x1EE5617F8, VideoRangeString, 0);
              }
            }
          }
        }
      }
    }
  }
  if (v46) {
    CFRelease(v46);
  }
  if (v51) {
    CFRelease(v51);
  }
}

void fpfsi_setLastSeekTimeSet(uint64_t a1, uint64_t a2)
{
  CFDictionaryRef v3 = (CMTime *)(a1 + 320);
  uint64_t v4 = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 320) = *(_OWORD *)a2;
  *(void *)(a1 + 336) = v4;
  uint64_t v5 = *(void *)(a1 + 2544);
  if (v5)
  {
    int v6 = *(_DWORD *)(a1 + 332);
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    CFDictionaryRef v9 = *(void (**)(uint64_t, uint64_t, uint64_t, void, void))(v8 + 56);
    if (v9) {
      v9(v5, 0x1EE582B78, 0x1EE5851D8, v6 & 1, 0);
    }
  }
  CMTime v10 = *v3;
  fpfsi_setPlaybackRateMonitorPendingSeekTime(a1, &v10);
}

double fpfsi_updateMaxPlayThroughTime()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v2 = *(OpaqueCMTimebase **)(DerivedStorage + 576);
  if (v2)
  {
    LODWORD(result) = *(_DWORD *)(DerivedStorage + 848);
    if (*(float *)&result <= 2.0 && *(float *)&result >= 0.0)
    {
      CFDictionaryRef v3 = (CMTime *)(DerivedStorage + 3248);
      if (*(unsigned char *)(DerivedStorage + 3260))
      {
        CMTimebaseGetTime(&time2, v2);
        CMTime v4 = *v3;
        CMTimeMaximum(&v6, &v4, &time2);
      }
      else
      {
        CMTimebaseGetTime(&v6, v2);
      }
      double result = *(double *)&v6.value;
      *CFDictionaryRef v3 = v6;
    }
  }
  return result;
}

void fpfsi_setPlaybackRateMonitorPendingSeekTime(uint64_t a1, CMTime *a2)
{
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  CMTime v7 = *a2;
  CFDictionaryRef v5 = CMTimeCopyAsDictionary(&v7, AllocatorForMedia);
  if (v5)
  {
    CFDictionaryRef v6 = v5;
    fpfsi_setPlaybackRateMonitorProperty(a1, @"AfmfpbProperty_PendingSeekTime", (uint64_t)v5);
    CFRelease(v6);
  }
  else
  {
    FigSignalErrorAt();
  }
}

uint64_t fpfsi_HandleNextBestEffortTrickplayModeSeek()
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFArrayRef Next = fpfs_getNext(DerivedStorage, 0);
  if (!Next) {
    return 0;
  }
  uint64_t v2 = (uint64_t)Next;
  uint64_t v3 = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = v3;
  memset(&v33, 0, sizeof(v33));
  if (!v3) {
    return v4;
  }
  if (!*(void *)(v3 + 2968)) {
    return 0;
  }
  uint64_t v5 = CMBaseObjectGetDerivedStorage();
  uint64_t v6 = v5;
  v39.CMTimeValue value = *MEMORY[0x1E4F1F9F8];
  v39.CMTimeScale timescale = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 8);
  uint64_t v7 = **(void **)(*(void *)(v5 + 2896) + 8);
  if (v7)
  {
    v39.CMTimeValue value = *(void *)(v7 + 32);
    v39.CMTimeScale timescale = *(_DWORD *)(v7 + 40);
    uint64_t v8 = (CMTimeFlags *)(v7 + 44);
    CFDictionaryRef v9 = (CMTimeEpoch *)(v7 + 48);
  }
  else
  {
    CFDictionaryRef v9 = (CMTimeEpoch *)(MEMORY[0x1E4F1F9F8] + 16);
    uint64_t v8 = (CMTimeFlags *)(MEMORY[0x1E4F1F9F8] + 12);
  }
  CMTimeFlags v10 = *v8;
  if ((*v8 & 0x1D) == 1)
  {
    CMTimeEpoch v11 = *v9;
    memset(&v35, 0, 24);
    CMTimebaseGetTime(&v35.start, *(CMTimebaseRef *)(v5 + 2968));
    CMTime lhs = v35.start;
    rhs.CMTimeValue value = v39.value;
    rhs.CMTimeScale timescale = v39.timescale;
    rhs.CMTimeFlags flags = v10;
    rhs.CMTimeEpoch epoch = v11;
    CMTimeSubtract(&time, &lhs, &rhs);
    double Seconds = CMTimeGetSeconds(&time);
    double v13 = Seconds / CMTimebaseGetRate(*(CMTimebaseRef *)(v6 + 2968));
    double v14 = (0.2 - v13) * 1000000000.0;
    BOOL v15 = v13 <= 0.0;
    double v16 = 200000000.0;
    if (!v15) {
      double v16 = v14;
    }
    int64_t v17 = (uint64_t)v16;
    if ((uint64_t)v16 >= 1)
    {
      FigRetainProxyRetain();
      dispatch_time_t v18 = dispatch_time(0, v17);
      dispatch_after_f(v18, *(dispatch_queue_t *)(v4 + 600), *(void **)(v4 + 16), (dispatch_function_t)fpfsi_HandleNextBestEffortTrickplayModeSeekDispatch);
      return 0;
    }
  }
  double Rate = CMTimebaseGetRate(*(CMTimebaseRef *)(v4 + 2968));
  uint64_t v20 = CMBaseObjectGetDerivedStorage();
  memset(&time, 0, sizeof(time));
  CMTimebaseGetTime(&lhs, *(CMTimebaseRef *)(v20 + 2968));
  uint64_t v21 = CMBaseObjectGetDerivedStorage();
  for (uint64_t i = *(uint64_t **)(v21 + 2888); i; uint64_t i = *(uint64_t **)(v21 + 2888))
  {
    if (FigGetUpTimeNanoseconds() - (i[2] + i[3]) < 3000000001) {
      break;
    }
    fpfsi_RemoveEntryFromBestEffortTrickplayModeHistory(v21, i);
  }
  uint64_t v23 = **(void **)(*(void *)(v21 + 2896) + 8);
  if (v23)
  {
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    do
    {
      v25 += *(void *)(v23 + 24);
      uint64_t v26 = v24 + 1;
      uint64_t v23 = **(void **)(*(void *)(v23 + 8) + 8);
      if (v23) {
        BOOL v27 = v24 == 0x7FFFFFFFFFFFFFFELL;
      }
      else {
        BOOL v27 = 1;
      }
      ++v24;
    }
    while (!v27);
    double v28 = (double)(v25 / v26);
  }
  else
  {
    double v28 = 0.0;
  }
  Float64 v29 = CMTimebaseGetRate(*(CMTimebaseRef *)(v20 + 2968));
  CMTimeMake(&rhs, (uint64_t)(v28 * v29), 1000000000);
  v35.start = lhs;
  CMTimeAdd(&time, &v35.start, &rhs);
  fpfsi_getSeekableTimeRange(v2, &v35);
  CMTimeValue value = v35.start.value;
  CMTimeScale timescale = v35.start.timescale;
  if ((v35.start.flags & 1) != 0
    && (v35.duration.flags & 1) != 0
    && !v35.duration.epoch
    && (v35.duration.value & 0x8000000000000000) == 0)
  {
    CMTime v34 = time;
    v35.start.CMTimeValue value = value;
    v35.start.CMTimeScale timescale = timescale;
    v35.duration.CMTimeEpoch epoch = 0;
    CMTimeClampToRange(&v39, &v34, &v35);
    CMTime time = v39;
    CMTime v33 = v39;
    goto LABEL_31;
  }
  int v30 = FigSignalErrorAt();
  if (!(_WORD)v30)
  {
LABEL_31:
    *(void *)(v4 + 2920) = FigGetUpTimeNanoseconds();
    *(CMTime *)(v4 + 2936) = v33;
    if (Rate >= 0.0) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = 5;
    }
    v35.start = v33;
    CMTime time = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA08];
    CMTime lhs = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA10];
    int v30 = fpfsi_SetCurrentTimeWithRangeAndSeekIDGuts(v2, &v35, v31, &time, &lhs, 0, 0, 0, 16843009, 0, 0);
  }
  if (!(v30 << 16)) {
    return 0;
  }
  uint64_t v4 = (__int16)v30;
  fpfs_haltStream();
  return v4;
}

void fpfsi_EndBestEffortSeekTrickplayMode(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 2968);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 2968) = 0;
  }
  *(void *)(a1 + 2928) = 0;
  *(void *)(a1 + 2920) = 0;
  uint64_t v3 = MEMORY[0x1E4F1F9F8];
  fpfsi_setLastSeekTimeSet(a1, MEMORY[0x1E4F1F9F8]);
  *(_OWORD *)(a1 + 1496) = *(_OWORD *)v3;
  *(void *)(a1 + 1512) = *(void *)(v3 + 16);
  while (1)
  {
    uint64_t v4 = *(uint64_t **)(a1 + 2888);
    if (!v4) {
      break;
    }
    fpfsi_RemoveEntryFromBestEffortTrickplayModeHistory(a1, v4);
  }
}

uint64_t fpfsi_HandleNextBestEffortTrickplayModeSeekDispatch(uint64_t a1)
{
  CFTypeRef v4 = 0;
  CFTypeRef cf = 0;
  int v1 = fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer(a1, &cf, &v4);
  CFTypeRef v2 = cf;
  if (!v1)
  {
    fpfsi_HandleNextBestEffortTrickplayModeSeek(cf);
    fpfs_UnlockAndPostNotificationsWithCaller(v2);
  }
  if (v2) {
    CFRelease(v2);
  }
  if (v4) {
    CFRelease(v4);
  }

  return FigRetainProxyRelease();
}

uint64_t fpfsi_SetCurrentTimeWithRangeAndSeekIDGuts(const __CFArray *a1, CMTime *a2, unsigned int a3, uint64_t a4, long long *a5, unsigned int a6, const void *a7, int a8, char a9, unsigned __int8 a10, char a11, char a12, char *a13, char a14)
{
  time1_16[15] = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v19 = *(const void **)DerivedStorage;
  uint64_t v170 = CMBaseObjectGetDerivedStorage();
  memset(&v190, 0, sizeof(v190));
  int v161 = *(_DWORD *)(DerivedStorage + 332);
  char v20 = *(unsigned char *)(DerivedStorage + 530);
  int v21 = (a3 >> 6) & 1;
  CMTime v189 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  long long v171 = *(_OWORD *)&v189.value;
  CMTime v188 = v189;
  CMTimeEpoch epoch = v189.epoch;
  CMTimeValue v208 = *MEMORY[0x1E4F1F9F8];
  CMTimeScale timescale = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 8);
  CFTypeRef v186 = 0;
  CFTypeRef cf = 0;
  CFArrayRef v174 = a1;
  CFRetain(a1);
  fpfs_LockMutexWithCaller(v19);
  if (FigRetainProxyIsInvalidated()
    || (CMTimeFlags flags = a2->flags, (~flags & 0x11) == 0)
    || (flags & 1) == 0
    || (*(unsigned char *)(a4 + 12) & 1) != 0
    && (long long time1 = *(_OWORD *)a4,
        time1_16[0] = *(void *)(a4 + 16),
        CMTime time2 = *a2,
        CMTimeCompare((CMTime *)&time1, &time2) >= 1)
    || (*((unsigned char *)a5 + 12) & 1) != 0
    && (long long time1 = *(_OWORD *)&a2->value,
        time1_16[0] = a2->epoch,
        CMTime time2 = *(CMTime *)a5,
        CMTimeCompare((CMTime *)&time1, &time2) >= 1))
  {
    uint64_t v106 = FigSignalErrorAt();
    int v56 = 0;
    uint64_t v26 = v19;
    CMTimeEpoch v55 = v189.epoch;
    goto LABEL_344;
  }
  if (!a6 && a11)
  {
    a6 = *(_DWORD *)(DerivedStorage + 3184);
    *(_DWORD *)(DerivedStorage + 3184) = FPSupport_IncrementSeekID(a6);
  }
  char v158 = v20;
  BOOL v163 = v21
      && (*(unsigned char *)(DerivedStorage + 1460) & 1) != 0
      && fpfsi_isAssociatedInterstitialEventActive() != 0;
  uint64_t v23 = *(const void **)(DerivedStorage + 2216);
  *(void *)(DerivedStorage + 2216) = a7;
  if (a7) {
    CFRetain(a7);
  }
  if (v23) {
    CFRelease(v23);
  }
  __int16 v167 = a3;
  int v24 = a3 & 0xF;
  int v25 = *(_DWORD *)(DerivedStorage + 2204);
  uint64_t v26 = v19;
  if (v25 && v25 != a6) {
    fpfs_SeekDidFail(v19, a1, v25, 0);
  }
  fpfsi_GetDuration((uint64_t)a1, (long long *)&v189.value);
  if (!*(_DWORD *)(v170 + 32)) {
    goto LABEL_44;
  }
  uint64_t v27 = *(void *)(DerivedStorage + 936);
  if (!v27 || !*(unsigned char *)(DerivedStorage + 462)) {
    goto LABEL_44;
  }
  *(_OWORD *)&time2.unsigned int value = v171;
  time2.CMTimeEpoch epoch = epoch;
  *(_OWORD *)&theArray.unsigned int value = v171;
  theArray.CMTimeEpoch epoch = epoch;
  if ((~a2->flags & 5) == 0 && (v189.flags & 0x1D) != 1)
  {
    CMTime rhs = *a2;
    uint64_t v28 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v29 = v28 ? v28 : 0;
    int v30 = *(unsigned int (**)(uint64_t, long long *, uint64_t, CMTime *, CMTime *))(v29 + 144);
    if (v30)
    {
      long long time1 = *(_OWORD *)&rhs.value;
      time1_16[0] = rhs.epoch;
      if (!v30(v27, &time1, 3, &time2, &theArray) && (time2.flags & 1) != 0)
      {
        long long v151 = *(_OWORD *)&time2.value;
        *(_OWORD *)&a2->unsigned int value = *(_OWORD *)&time2.value;
        CMTimeEpoch v152 = time2.epoch;
        a2->CMTimeEpoch epoch = time2.epoch;
        *(_OWORD *)a4 = v151;
        *(void *)(a4 + 16) = v152;
        *a5 = v151;
        *((void *)a5 + 2) = v152;
        goto LABEL_317;
      }
    }
  }
  if (v24 == 7)
  {
    long long time1 = *(_OWORD *)&a2->value;
    time1_16[0] = a2->epoch;
    *(_OWORD *)&rhs.unsigned int value = kInBufferSeekTimeRequired;
    rhs.CMTimeEpoch epoch = 0;
    CMTimeAdd(&v183, (CMTime *)&time1, &rhs);
    if (fpfsi_TimeInTotalTimeRangeInBuffer((uint64_t)a1, &v183)
      || ((v50 = *(void *)(DerivedStorage + 936), CMTime rhs = *a2, (v51 = *(void *)(CMBaseObjectGetVTable() + 16)) == 0)
        ? (uint64_t v52 = 0)
        : (uint64_t v52 = v51),
          (uint64_t v148 = *(unsigned int (**)(uint64_t, long long *, uint64_t, CMTime *, CMTime *))(v52 + 144)) == 0
       || (long long time1 = *(_OWORD *)&rhs.value, time1_16[0] = rhs.epoch, v148(v50, &time1, 4, &time2, &theArray))
       || (time2.flags & 1) == 0))
    {
      int v24 = 7;
      goto LABEL_44;
    }
    *a2 = time2;
LABEL_317:
    int v24 = 5;
    goto LABEL_44;
  }
  if (v24 != 6)
  {
LABEL_44:
    int v35 = -1;
    goto LABEL_45;
  }
  uint64_t v31 = *(void *)(DerivedStorage + 936);
  CMTime rhs = *a2;
  uint64_t v32 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v32) {
    uint64_t v33 = v32;
  }
  else {
    uint64_t v33 = 0;
  }
  CMTime v34 = *(unsigned int (**)(uint64_t, long long *, uint64_t, CMTime *, CMTime *))(v33 + 144);
  if (!v34
    || (long long time1 = *(_OWORD *)&rhs.value, time1_16[0] = rhs.epoch, v34(v31, &time1, 3, &time2, &theArray))
    || (time2.flags & 1) == 0)
  {
    int v24 = 6;
    goto LABEL_44;
  }
  memset(time1_16, 0, 32);
  long long time1 = 0u;
  fpfsi_TotalTimeRangeInBuffer((uint64_t)a1, (uint64_t)&time1);
  uint64_t v149 = *(void *)(DerivedStorage + 1704);
  if (v149 && FigAlternateIsIFrameOnly(v149)) {
    p_CMTime theArray = &theArray;
  }
  else {
    p_CMTime theArray = &time2;
  }
  *(_OWORD *)&a2->unsigned int value = *(_OWORD *)&p_theArray->value;
  a2->CMTimeEpoch epoch = p_theArray->epoch;
  if ((BYTE12(time1) & 1) != 0
    && (time1_16[2] & 0x100000000) != 0
    && !time1_16[3]
    && (time1_16[1] & 0x8000000000000000) == 0
    && (*(_DWORD *)(DerivedStorage + 392) & 0xF) == 6)
  {
    CMTime rhs = *a2;
    *(_OWORD *)&type.unsigned int value = time1;
    type.CMTimeEpoch epoch = time1_16[0];
    if (CMTimeCompare(&rhs, &type) < 0)
    {
      CMTime rhs = theArray;
      *(_OWORD *)&type.unsigned int value = time1;
      type.CMTimeEpoch epoch = time1_16[0];
      if ((CMTimeCompare(&rhs, &type) & 0x80000000) == 0)
      {
        *(_OWORD *)&a2->unsigned int value = time1;
        a2->CMTimeEpoch epoch = time1_16[0];
      }
    }
  }
  int v24 = 5;
  int v35 = 6;
LABEL_45:
  long long time1 = *(_OWORD *)&a2->value;
  time1_16[0] = a2->epoch;
  fpfsi_setLastSeekTimeSet(DerivedStorage, (uint64_t)&time1);
  BOOL v36 = (long long *)(DerivedStorage + 344);
  if (v24 != 5)
  {
    long long v42 = *(_OWORD *)a4;
    *(void *)(DerivedStorage + 360) = *(void *)(a4 + 16);
    *BOOL v36 = v42;
    uint64_t v39 = DerivedStorage + 368;
LABEL_52:
    long long v40 = *a5;
    CMTimeEpoch v41 = *((void *)a5 + 2);
    goto LABEL_53;
  }
  if (*(_DWORD *)(a4 + 12)) {
    Float64 v37 = (CMTime *)a4;
  }
  else {
    Float64 v37 = a2;
  }
  long long v38 = *(_OWORD *)&v37->value;
  *(void *)(DerivedStorage + 360) = v37->epoch;
  *BOOL v36 = v38;
  uint64_t v39 = DerivedStorage + 368;
  if (*((unsigned char *)a5 + 12)) {
    goto LABEL_52;
  }
  long long v40 = *(_OWORD *)&a2->value;
  CMTimeEpoch v41 = a2->epoch;
LABEL_53:
  *(void *)(v39 + 16) = v41;
  *(_OWORD *)uint64_t v39 = v40;
  if (v35 == -1) {
    int v43 = v24;
  }
  else {
    int v43 = v35;
  }
  *(_DWORD *)(DerivedStorage + 392) = v43;
  *(void *)(DerivedStorage + 3160) = FigGetUpTimeNanoseconds();
  if ((v167 & 0x20) == 0 && a12)
  {
    fpfsi_clearCoordinatedPlaybackSynchronizationTimebase();
    fpfs_PlayQueueCallForEachItem((uint64_t)v19, (uint64_t (*)(const __CFArray *, uint64_t))fpfs_clearCoordinatedPlaybackSynchronizationTimebaseForPlayQueueItemsApply, (uint64_t)a1);
    CMTime theArray = *a2;
    uint64_t v44 = CMBaseObjectGetDerivedStorage();
    CMBaseObjectGetDerivedStorage();
    if (*(const __CFArray **)(v44 + 80) == a1 && *(_DWORD *)(v44 + 164) != 6)
    {
      float v45 = *(float *)(v44 + 108);
      if (v45 <= 2.0 && v45 >= 0.0)
      {
        long long time1 = *(_OWORD *)&theArray.value;
        time1_16[0] = theArray.epoch;
        fpfs_notifyExternalStartupTasksOfEvents((uint64_t)v19, 2, 0, a6, &time1);
        if (!fpfs_areAllExternalStartupTasksCompleted())
        {
          if (dword_1E9350BB0)
          {
            LODWORD(rhs.value) = 0;
            LOBYTE(type.value) = 0;
            os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int value = rhs.value;
            if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type.value)) {
              unsigned int v48 = value;
            }
            else {
              unsigned int v48 = value & 0xFFFFFFFE;
            }
            if (v48)
            {
              if (v19) {
                uint64_t v49 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
              }
              else {
                uint64_t v49 = "";
              }
              long long time1 = *(_OWORD *)&theArray.value;
              time1_16[0] = theArray.epoch;
              Float64 Seconds = CMTimeGetSeconds((CMTime *)&time1);
              Description = FigPlayerPlaybackStateGetDescription(*(_DWORD *)(v44 + 164));
              LODWORD(time2.value) = 136316418;
              *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpfs_triggerStartupTasksForSeekIfNecessary";
              LOWORD(time2.flags) = 2048;
              *(void *)((char *)&time2.flags + 2) = v19;
              HIWORD(time2.epoch) = 2082;
              v192 = v49;
              __int16 v193 = 2048;
              Float64 v194 = Seconds;
              __int16 v195 = 1024;
              *(_DWORD *)v196 = a6;
              *(_WORD *)&v196[4] = 2080;
              *(void *)&v196[6] = Description;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
        }
      }
    }
    uint64_t v26 = v19;
  }
  if ((*(_DWORD *)(a4 + 12) & 0x1D) == 1)
  {
    long long time1 = *(_OWORD *)a4;
    time1_16[0] = *(void *)(a4 + 16);
    CMTime time2 = *(CMTime *)a5;
    if (!CMTimeCompare((CMTime *)&time1, &time2)) {
      int v24 = 5;
    }
  }
  CMTimeEpoch v55 = epoch;
  *(_DWORD *)(DerivedStorage + 2204) = a6;
  *(_DWORD *)(DerivedStorage + 2224) = a8;
  v160 = (CMTimeValue *)(DerivedStorage + 1496);
  *(_OWORD *)(DerivedStorage + 1496) = v171;
  *(void *)(DerivedStorage + 1512) = epoch;
  long long time1 = *(_OWORD *)&a2->value;
  time1_16[0] = a2->epoch;
  CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  if (!CMTimeCompare((CMTime *)&time1, &time2) && (*(unsigned char *)(DerivedStorage + 236) & 1) == 0)
  {
    fpfs_GetTime(DerivedStorage, (uint64_t)&v182);
    fpfs_SeekDidComplete(v26, v174, a6, 0, 0, &v182);
    int v56 = 1;
LABEL_154:
    int v21 = v163;
LABEL_256:
    uint64_t v106 = 0;
    *(_OWORD *)(DerivedStorage + 608) = v171;
    *(void *)(DerivedStorage + 624) = v55;
    if (v56 && v21)
    {
      time1_16[0] = *(void *)(DerivedStorage + 1464);
      long long time1 = *(_OWORD *)(DerivedStorage + 1448);
      fpfsi_ClampVideoToTime(v174, (CMTime *)&time1, MEMORY[0x1E4F1F9F8]);
      uint64_t v106 = 0;
    }
    goto LABEL_259;
  }
  if (*(unsigned char *)(DerivedStorage + 593))
  {
    int v57 = FPSupport_SeekIDGetSource(a6);
    if (a6)
    {
      if (v57 != 1) {
        *(unsigned char *)(DerivedStorage + 593) = 0;
      }
    }
  }
  fpfs_GetTime(DerivedStorage, (uint64_t)&v190);
  uint64_t v58 = *(void *)(DerivedStorage + 1704);
  if (!v58)
  {
    BOOL v166 = 0;
    goto LABEL_122;
  }
  int IsIFrameOnly = FigAlternateIsIFrameOnly(v58);
  BOOL v166 = IsIFrameOnly != 0;
  if (v24 != 5 || !IsIFrameOnly) {
    goto LABEL_122;
  }
  uint64_t v60 = CMBaseObjectGetDerivedStorage();
  theArray.unsigned int value = 0;
  uint64_t v61 = CMBaseObjectGetDerivedStorage();
  if (!*(void *)(v61 + 40)) {
    goto LABEL_105;
  }
  if (!*(unsigned char *)(v61 + 48)
    || !*(unsigned char *)(v61 + 49)
    || fpfsi_CreateAndAddScanningModeFilterToBoss((uint64_t)v174, 0)
    || *(unsigned char *)(v60 + 2880)
    && FigAlternateSelectionBossSetProperty(*(const void **)(v60 + 40), @"Paused", (const void *)*MEMORY[0x1E4F1CFC8]))
  {
    goto LABEL_101;
  }
  if (FigAlternateSelectionBossApplyFilters(*(const void **)(v60 + 40))) {
    goto LABEL_101;
  }
  uint64_t v62 = *(void *)(v60 + 40);
  uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
  if (FigAlternateSelectionBossCopyProperty(v62, @"FilteredAlternateList", AllocatorForMedia, (const __CFArray **)&theArray))goto LABEL_101; {
  if (!theArray.value)
  }
  {
LABEL_105:
    LODWORD(theArray.value) = 0;
    LOBYTE(rhs.value) = 0;
    uint64_t v66 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v67 = theArray.value;
    if (os_log_type_enabled(v66, rhs.value)) {
      unsigned int v68 = v67;
    }
    else {
      unsigned int v68 = v67 & 0xFFFFFFFE;
    }
    if (v68)
    {
      uint64_t v69 = *(const void **)DerivedStorage;
      if (*(void *)DerivedStorage) {
        uint64_t v70 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
      }
      else {
        uint64_t v70 = "";
      }
      if (v174) {
        uint64_t v73 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
      }
      else {
        uint64_t v73 = "";
      }
      long long time1 = *(_OWORD *)&a2->value;
      time1_16[0] = a2->epoch;
      Float64 v74 = CMTimeGetSeconds((CMTime *)&time1);
      LODWORD(time2.value) = 136316418;
      *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpfsi_SetCurrentTimeWithRangeAndSeekIDGuts";
      LOWORD(time2.flags) = 2048;
      *(void *)((char *)&time2.flags + 2) = v69;
      HIWORD(time2.epoch) = 2082;
      v192 = v70;
      __int16 v193 = 2048;
      Float64 v194 = *(double *)&v174;
      __int16 v195 = 2082;
      *(void *)v196 = v73;
      *(_WORD *)&v196[8] = 2048;
      *(Float64 *)&v196[10] = v74;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    int v24 = 0;
    CMTimeEpoch v55 = epoch;
    goto LABEL_122;
  }
  if (CFArrayGetCount((CFArrayRef)theArray.value) >= 1)
  {
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)theArray.value, 0);
    if (!FigAlternateIsIFrameOnly((uint64_t)ValueAtIndex)
      && !fpfsi_UpdateValidAlternateListAndSuggestAnAlternate((uint64_t)v174, (const __CFArray *)theArray.value, 0))
    {
      if (dword_1E9350BB0)
      {
        LODWORD(rhs.value) = 0;
        LOBYTE(type.value) = 0;
        uint64_t v144 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v145 = rhs.value;
        if (os_log_type_enabled(v144, type.value)) {
          unsigned int v146 = v145;
        }
        else {
          unsigned int v146 = v145 & 0xFFFFFFFE;
        }
        if (v146)
        {
          if (v26) {
            int v147 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
          }
          else {
            int v147 = "";
          }
          if (v174) {
            CMTimeValue v154 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
          }
          else {
            CMTimeValue v154 = "";
          }
          LODWORD(time2.value) = 136316162;
          *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpfsi_LeaveIFrameModeIfPossible";
          LOWORD(time2.flags) = 2048;
          *(void *)((char *)&time2.flags + 2) = v26;
          HIWORD(time2.epoch) = 2082;
          v192 = v147;
          __int16 v193 = 2048;
          Float64 v194 = *(double *)&v174;
          __int16 v195 = 2082;
          *(void *)v196 = v154;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        char v65 = 0;
        CMTimeEpoch v55 = epoch;
      }
      else
      {
        char v65 = 0;
      }
      goto LABEL_102;
    }
  }
LABEL_101:
  char v65 = 1;
LABEL_102:
  if (theArray.value) {
    CFRelease((CFTypeRef)theArray.value);
  }
  if (v65) {
    goto LABEL_105;
  }
  int v71 = fpfsi_handleIFrameOnlyRateTransition(v174, 1, 0, *(const __CFArray **)(DerivedStorage + 1688), 1, 0.0);
  BOOL v72 = v166;
  if (!v71) {
    BOOL v72 = 0;
  }
  BOOL v166 = v72;
  int v24 = 5;
LABEL_122:
  int v162 = v24;
  if ((v189.flags & 0x1D) == 1)
  {
    long long time1 = *(_OWORD *)&v189.value;
    time1_16[0] = v189.epoch;
    CMTimeMultiplyByFloat64(&v188, (CMTime *)&time1, 0.95);
    long long time1 = *(_OWORD *)&v190.value;
    time1_16[0] = v190.epoch;
    CMTime time2 = v188;
    if (CMTimeCompare((CMTime *)&time1, &time2) < 0)
    {
      LOBYTE(v75) = 0;
    }
    else
    {
      long long time1 = *(_OWORD *)&a2->value;
      time1_16[0] = a2->epoch;
      CMTime time2 = v188;
      unsigned int v75 = CMTimeCompare((CMTime *)&time1, &time2) >> 31;
    }
    *(unsigned char *)(DerivedStorage + 3064) |= v75;
  }
  if (v24 != 5 && v24)
  {
    uint64_t v78 = 0;
    char v76 = v167;
  }
  else
  {
    long long time1 = *(_OWORD *)&a2->value;
    time1_16[0] = a2->epoch;
    CMTime time2 = v190;
    char v76 = v167;
    if (!(CMTimeCompare((CMTime *)&time1, &time2) | v167 & 0x100 | v161 & 1))
    {
      long long time1 = *(_OWORD *)&a2->value;
      time1_16[0] = a2->epoch;
      int v56 = 1;
      fpfs_SeekDidComplete(v26, v174, a6, 1, 0, (CMTime *)&time1);
      if (!*(unsigned char *)(DerivedStorage + 462))
      {
        long long v77 = *(_OWORD *)&a2->value;
        if (v24 == 5)
        {
          *(void *)(DerivedStorage + 1512) = a2->epoch;
          *(_OWORD *)v160 = v77;
        }
        else
        {
          *(void *)(DerivedStorage + 240) = a2->epoch;
          *(_OWORD *)(DerivedStorage + 224) = v77;
        }
      }
      goto LABEL_154;
    }
    if (v24 == 5 && (a2->flags & 0x1D) == 1)
    {
      if (v166)
      {
        uint64_t v106 = FigSignalErrorAt();
        int v56 = 0;
LABEL_352:
        int v21 = v163;
        goto LABEL_344;
      }
      long long v79 = *(_OWORD *)&a2->value;
      *(void *)(DerivedStorage + 1512) = a2->epoch;
      *(_OWORD *)v160 = v79;
      uint64_t v78 = 1;
    }
    else
    {
      uint64_t v78 = 0;
    }
  }
  long long time1 = *(_OWORD *)&a2->value;
  time1_16[0] = a2->epoch;
  CMTime time2 = v190;
  CMTimeSubtract(&time, (CMTime *)&time1, &time2);
  CMTimeAbsoluteValue(&v181, &time);
  long long time1 = kSeekToCurrentFudge;
  time1_16[0] = 0;
  CMTimeMultiply(&v179, (CMTime *)&time1, 2);
  int32_t v80 = CMTimeCompare(&v181, &v179);
  if ((v76 & 0x80) == 0 && v80 >= 1)
  {
    long long time1 = v171;
    time1_16[0] = v55;
    fpfsi_applyTimeToPauseBuffering((uint64_t)v174, &time1);
  }
  if ((v76 & 0x10) != 0)
  {
    long long time1 = *(_OWORD *)&v190.value;
    time1_16[0] = v190.epoch;
    if (fpfsi_atOrAfterTimeToPausePlayback(DerivedStorage, (CMTime *)&time1))
    {
      long long time1 = *(_OWORD *)&a2->value;
      time1_16[0] = a2->epoch;
      CMTime time2 = *(CMTime *)(DerivedStorage + 1448);
      if (CMTimeCompare((CMTime *)&time1, &time2) < 0)
      {
        long long time1 = *(_OWORD *)&a2->value;
        time1_16[0] = a2->epoch;
        fpfsi_applyTimeToPausePlayback(v174, &time1, 0, 0);
      }
    }
  }
  if (*(_DWORD *)(v170 + 32) && *MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
  if (fpfs_getNext(v170, 0) == v174)
  {
    Float64 v81 = v26;
    if (a14)
    {
      *(_OWORD *)(v170 + 112) = v171;
      *(void *)(v170 + 128) = v55;
      *(_OWORD *)(v170 + 136) = v171;
      *(void *)(v170 + 152) = v55;
      CFAllocatorRef v82 = (const __CFAllocator *)FigGetAllocatorForMedia();
      uint64_t v83 = *(const void **)(DerivedStorage + 1704);
      double v84 = *(float *)(DerivedStorage + 848);
      long long time1 = v171;
      time1_16[0] = v55;
      FigMetricItemSeekEventCreate(v82, &time1, 0, 0, v83, &v186, 0.0, v84);
      uint64_t v85 = *(void *)(DerivedStorage + 3376);
      CFTypeRef v86 = v186;
      uint64_t v87 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v88 = v87 ? v87 : 0;
      Float64 v89 = *(void (**)(uint64_t, const __CFArray *, CFTypeRef))(v88 + 40);
      if (v89) {
        v89(v85, v174, v86);
      }
    }
    fpfs_enqueuePrerollWasCancelledNotificationIfNeeded(v174);
    uint64_t v26 = v81;
  }
  int v90 = a10;
  if (dword_1E9350BB0)
  {
    LODWORD(theArray.value) = 0;
    LOBYTE(rhs.value) = 0;
    uint64_t v91 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v92 = theArray.value;
    if (os_log_type_enabled(v91, rhs.value)) {
      unsigned int v93 = v92;
    }
    else {
      unsigned int v93 = v92 & 0xFFFFFFFE;
    }
    if (v93)
    {
      if (v26) {
        uint64_t v94 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
      }
      else {
        uint64_t v94 = "";
      }
      CMTimeScale v156 = v94;
      unsigned int v157 = v78;
      double v95 = v26;
      uint64_t v96 = "";
      if (v174)
      {
        CFArrayRef v97 = v174;
        v98 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
      }
      else
      {
        v98 = "";
        CFArrayRef v97 = 0;
      }
      long long time1 = *(_OWORD *)&a2->value;
      time1_16[0] = a2->epoch;
      Float64 v99 = CMTimeGetSeconds((CMTime *)&time1);
      long long time1 = *(_OWORD *)&v190.value;
      time1_16[0] = v190.epoch;
      Float64 v100 = CMTimeGetSeconds((CMTime *)&time1);
      long long time1 = *(_OWORD *)(DerivedStorage + 1184);
      time1_16[0] = *(void *)(DerivedStorage + 1200);
      Float64 v101 = CMTimeGetSeconds((CMTime *)&time1);
      if (*(_DWORD *)(DerivedStorage + 1508)) {
        uint64_t v96 = "- preciseSeek is ";
      }
      long long time1 = *(_OWORD *)v160;
      time1_16[0] = *(void *)(DerivedStorage + 1512);
      Float64 v102 = CMTimeGetSeconds((CMTime *)&time1);
      int v103 = *(_DWORD *)(DerivedStorage + 2204);
      LODWORD(time2.value) = 136317698;
      *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpfsi_SetCurrentTimeWithRangeAndSeekIDGuts";
      LOWORD(time2.flags) = 2048;
      *(void *)((char *)&time2.flags + 2) = v95;
      HIWORD(time2.epoch) = 2082;
      v192 = v156;
      __int16 v193 = 2048;
      Float64 v194 = *(double *)&v97;
      __int16 v195 = 2082;
      *(void *)v196 = v98;
      uint64_t v26 = v95;
      *(_WORD *)&v196[8] = 2048;
      *(Float64 *)&v196[10] = v99;
      __int16 v197 = 2048;
      Float64 v198 = v100;
      __int16 v199 = 2048;
      Float64 v200 = v101;
      __int16 v201 = 2082;
      v202 = v96;
      __int16 v203 = 2048;
      Float64 v204 = v102;
      __int16 v205 = 1024;
      int v206 = v103;
      _os_log_send_and_compose_impl();
      CMTimeEpoch v55 = epoch;
      uint64_t v78 = v157;
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    int v90 = a10;
  }
  if (v90 || (uint64_t v104 = *(OpaqueCMTimebase **)(DerivedStorage + 2968)) == 0)
  {
    CMTimeFlags v107 = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 12);
    v159 = v26;
    if (v166 || !fpfsi_EnterIFrameModeForSeekWithNonzeroToleranceIfPossible((uint64_t)v26, (uint64_t)v174))
    {
      if (!fpfsi_EnterIFrameModeForSeekWithNonzeroToleranceIfPossible((uint64_t)v26, (uint64_t)v174))
      {
        char v108 = 1;
        goto LABEL_210;
      }
      char v108 = 1;
      if (!*(void *)(DerivedStorage + 1704) && dword_1E9350BB0)
      {
        CMTimeEpoch v109 = v55;
        LODWORD(theArray.value) = 0;
        LOBYTE(rhs.value) = 0;
        long long v110 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v111 = theArray.value;
        if (os_log_type_enabled(v110, rhs.value)) {
          unsigned int v112 = v111;
        }
        else {
          unsigned int v112 = v111 & 0xFFFFFFFE;
        }
        if (v112)
        {
          if (v159) {
            long long v113 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
          }
          else {
            long long v113 = "";
          }
          if (v174) {
            CMTime v118 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
          }
          else {
            CMTime v118 = "";
          }
          LODWORD(time2.value) = 136316162;
          *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpfsi_SetCurrentTimeWithRangeAndSeekIDGuts";
          LOWORD(time2.flags) = 2048;
          *(void *)((char *)&time2.flags + 2) = v159;
          HIWORD(time2.epoch) = 2082;
          v192 = v113;
          __int16 v193 = 2048;
          Float64 v194 = *(double *)&v174;
          __int16 v195 = 2082;
          *(void *)v196 = v118;
          _os_log_send_and_compose_impl();
        }
        char v108 = 1;
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        goto LABEL_209;
      }
    }
    else
    {
      char v108 = 1;
      if (fpfsi_handleIFrameOnlyRateTransition(v174, 0, 1, *(const __CFArray **)(DerivedStorage + 1688), 1, 1.0))
      {
        BOOL v166 = 0;
        goto LABEL_210;
      }
      if (dword_1E9350BB0)
      {
        CMTimeEpoch v109 = v55;
        LODWORD(theArray.value) = 0;
        LOBYTE(rhs.value) = 0;
        uint64_t v114 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v115 = theArray.value;
        if (os_log_type_enabled(v114, rhs.value)) {
          unsigned int v116 = v115;
        }
        else {
          unsigned int v116 = v115 & 0xFFFFFFFE;
        }
        if (v116)
        {
          if (v159) {
            uint64_t v117 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
          }
          else {
            uint64_t v117 = "";
          }
          if (v174) {
            CMTimeEpoch v153 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
          }
          else {
            CMTimeEpoch v153 = "";
          }
          LODWORD(time2.value) = 136316162;
          *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpfsi_SetCurrentTimeWithRangeAndSeekIDGuts";
          LOWORD(time2.flags) = 2048;
          *(void *)((char *)&time2.flags + 2) = v159;
          HIWORD(time2.epoch) = 2082;
          v192 = v117;
          __int16 v193 = 2048;
          Float64 v194 = *(double *)&v174;
          __int16 v195 = 2082;
          *(void *)v196 = v153;
          _os_log_send_and_compose_impl();
        }
        BOOL v166 = 1;
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        char v108 = 0;
LABEL_209:
        CMTimeEpoch v55 = v109;
        goto LABEL_210;
      }
      char v108 = 0;
      BOOL v166 = 1;
    }
LABEL_210:
    CMTimeFlags v119 = a2->flags;
    if ((~v119 & 5) == 0)
    {
      long long time1 = *(_OWORD *)&v190.value;
      time1_16[0] = v190.epoch;
      if (fpfsi_TimeInTotalTimeRangeInBuffer((uint64_t)v174, (CMTime *)&time1))
      {
        memset(time1_16, 0, 32);
        long long time1 = 0u;
        if (!fpfsi_getPumpAvailableTimeRange(DerivedStorage, &time1))
        {
          int v120 = v166;
          int v56 = 0;
          if (BYTE12(time1))
          {
            int v121 = 1;
            if ((time1_16[2] & 0x100000000) != 0 && !time1_16[3] && (time1_16[1] & 0x8000000000000000) == 0)
            {
              memset(&time2, 0, sizeof(time2));
              fpfs_GetTime(DerivedStorage, (uint64_t)&time2);
              memset(&theArray, 0, sizeof(theArray));
              *(_OWORD *)&rhs.unsigned int value = time1;
              rhs.CMTimeEpoch epoch = time1_16[0];
              CMTime type = *(CMTime *)&time1_16[1];
              CMTimeAdd(&lhs, &rhs, &type);
              CMTime rhs = *(CMTime *)(DerivedStorage + 1184);
              CMTimeAdd(&theArray, &lhs, &rhs);
              CMTime rhs = time2;
              CMTime type = theArray;
              if (CMTimeCompare(&rhs, &type) < 0)
              {
                int v56 = 0;
                CMTimeValue v208 = theArray.value;
                CMTimeFlags v107 = theArray.flags;
                CMTimeScale timescale = theArray.timescale;
                int v121 = 1;
                CMTimeEpoch v122 = theArray.epoch;
              }
              else
              {
                CMTime rhs = time2;
                int v56 = 1;
                uint64_t v143 = fpfs_SeekDidComplete(v159, v174, a6, 1, 0, &rhs);
                if (v143)
                {
                  uint64_t v106 = v143;
                  int v56 = 0;
                  int v21 = v163;
                  uint64_t v26 = v159;
LABEL_344:
                  if (v106)
                  {
                    if (v106 != -16836 || (float v155 = *(float *)(v170 + 108), v155 <= 2.0) && v155 >= 0.0)
                    {
                      fpfs_SeekDidFail(v26, v174, a6, v106);
                      goto LABEL_259;
                    }
                    fpfs_StopPlayingItem(v170, v174, 0);
                  }
                  goto LABEL_256;
                }
                int v121 = 0;
                CMTimeEpoch v122 = v55;
              }
              int v120 = v166;
              uint64_t v78 = v78;
              goto LABEL_221;
            }
          }
          else
          {
            int v121 = 1;
          }
          CMTimeEpoch v122 = v55;
LABEL_221:
          int v123 = *(_DWORD *)(DerivedStorage + 524);
          if (!v120 && v121) {
            *(_DWORD *)(DerivedStorage + 524) = 0;
          }
          char v124 = 0;
          int v125 = *(_DWORD *)(v170 + 32);
          if (v121 && !v120 && a9 && v125)
          {
            rhs.unsigned int value = a2->value;
            rhs.CMTimeScale timescale = a2->timescale;
            CMTimeFlags v126 = *(_DWORD *)(DerivedStorage + 1508);
            if (v126)
            {
              rhs.unsigned int value = *v160;
              rhs.CMTimeScale timescale = *(_DWORD *)(DerivedStorage + 1504);
              CMTimeEpoch v122 = *(void *)(DerivedStorage + 1512);
              CMTimeFlags v107 = v126;
              BOOL v129 = v163;
            }
            else
            {
              CMTimeFlags v127 = a2->flags;
              CMTimeEpoch v128 = a2->epoch;
              BOOL v129 = v163;
              if ((~v127 & 5) != 0 || (v107 & 1) == 0)
              {
                if (v162 == 7)
                {
                  time2.unsigned int value = a2->value;
                  time2.CMTimeScale timescale = a2->timescale;
                  time2.CMTimeFlags flags = v127;
                  time2.CMTimeEpoch epoch = v128;
                  *(_OWORD *)&theArray.unsigned int value = kInBufferSeekTimeRequired;
                  theArray.CMTimeEpoch epoch = 0;
                  CMTimeAdd((CMTime *)&time1, &time2, &theArray);
                  rhs.unsigned int value = time1;
                  CMTimeFlags v107 = HIDWORD(time1);
                  rhs.CMTimeScale timescale = DWORD2(time1);
                  CMTimeEpoch v122 = time1_16[0];
                }
                else
                {
                  CMTimeFlags v107 = a2->flags;
                  CMTimeEpoch v122 = a2->epoch;
                }
              }
              else
              {
                rhs.unsigned int value = v208;
                rhs.CMTimeScale timescale = timescale;
              }
            }
            *(void *)&long long time1 = rhs.value;
            *((void *)&time1 + 1) = __PAIR64__(v107, rhs.timescale);
            time1_16[0] = v122;
            if (fpfsi_TryToSeekWithinBuffer(v174, (CMTime *)&time1, a6, !v129))
            {
              int v121 = 0;
              *(unsigned char *)(DerivedStorage + 530) = 0;
              int v56 = 1;
              char v124 = 1;
            }
            else
            {
              char v124 = 0;
              int v121 = 1;
            }
            int v120 = v166;
            int v125 = *(_DWORD *)(v170 + 32);
          }
          if (!v125 || !*(void *)(DerivedStorage + 936) || !v121 || !*(unsigned char *)(DerivedStorage + 462))
          {
            uint64_t v26 = v159;
            goto LABEL_246;
          }
          int v168 = v123;
          *(unsigned char *)(DerivedStorage + 530) = 0;
          fpfs_CancelTrialSwitch((uint64_t)v174);
          fpfs_CreateAccessLogEntryWithUnlock((uint64_t)v174, (CFMutableDictionaryRef *)&cf);
          char v130 = v108 ^ 1;
          Float64 v131 = *(double *)(DerivedStorage + 1552);
          if (!v120) {
            char v130 = 1;
          }
          if (v130)
          {
            CMTimeMakeWithSeconds(&v176, v131, 1000);
            long long time1 = *(_OWORD *)&a2->value;
            time1_16[0] = a2->epoch;
            CMTime time2 = v190;
            CMTime theArray = *(CMTime *)a4;
            CMTime rhs = *(CMTime *)a5;
            uint64_t v132 = fpfs_IssueSeekToPump((uint64_t)v174, (CMTime *)&time1, &time2, a6, v120, v78, (long long *)&theArray.value, (long long *)&rhs.value, (long long *)&v176.value);
          }
          else
          {
            CMTimeMakeWithSeconds(&v177, v131, 1000);
            long long time1 = *(_OWORD *)&a2->value;
            time1_16[0] = a2->epoch;
            uint64_t v132 = fpfs_IssueSeekToPump((uint64_t)v174, (CMTime *)&time1, MEMORY[0x1E4F1F9F0], a6, v120, v78, MEMORY[0x1E4F1F9F8], MEMORY[0x1E4F1F9F8], (long long *)&v177.value);
          }
          uint64_t v106 = v132;
          uint64_t v26 = v159;
          if (v132 == -16838)
          {
            fpfs_GetTime(DerivedStorage, (uint64_t)&v175);
            fpfs_SeekDidComplete(v159, v174, a6, 1, 0, &v175);
            goto LABEL_255;
          }
          if (!v132)
          {
            uint64_t v136 = 0;
            uint64_t v137 = 952;
            do
            {
              if (*(_DWORD *)(DerivedStorage + v137) > *(_DWORD *)(DerivedStorage + v137 + 24))
              {
                if (!v166 || v136)
                {
                  if (!v166) {
                    fpfs_ClearRenderChains(v174, 255);
                  }
                  fpfs_PrepareForSeek(v174, 1 << v136, 1);
                }
                else
                {
                  long long time1 = *(_OWORD *)&a2->value;
                  time1_16[0] = a2->epoch;
                  uint64_t v138 = fpfs_PrepareToReuseLastIFrameTrack((uint64_t)v174, &time1, 1);
                  if (v138)
                  {
                    uint64_t v106 = v138;
                    uint64_t v26 = v159;
                    goto LABEL_350;
                  }
                }
                *(unsigned char *)(DerivedStorage + v136 + 471) = 0;
              }
              ++v136;
              v137 += 4;
            }
            while (v136 != 3);
            if (cf)
            {
              fpfs_CommitAccessLogEntry(v174, (__CFDictionary *)cf);
              if (*(unsigned char *)(DerivedStorage + 464)) {
                *(unsigned char *)(DerivedStorage + 2128) = 1;
              }
            }
            *(_OWORD *)(DerivedStorage + 3028) = v171;
            *(void *)(DerivedStorage + 3044) = epoch;
            *(_DWORD *)(DerivedStorage + 2856) = 0;
            int v139 = *(_DWORD *)(DerivedStorage + 1752);
            *(_DWORD *)(DerivedStorage + 2860) = v139;
            *(void *)(DerivedStorage + 2776) = 0;
            *(void *)(DerivedStorage + 2664) = 0;
            *(_OWORD *)(DerivedStorage + 2632) = 0u;
            *(_OWORD *)(DerivedStorage + 2648) = 0u;
            *(_OWORD *)(DerivedStorage + 2680) = v171;
            CMTimeEpoch v140 = (long long *)MEMORY[0x1E4F1FA08];
            *(void *)(DerivedStorage + 2696) = epoch;
            long long v141 = *v140;
            *(_OWORD *)(DerivedStorage + 2704) = *v140;
            uint64_t v142 = *((void *)v140 + 2);
            *(void *)(DerivedStorage + 2720) = v142;
            *(_OWORD *)(DerivedStorage + 2728) = v171;
            *(void *)(DerivedStorage + 2744) = epoch;
            *(_OWORD *)(DerivedStorage + 2752) = v141;
            *(void *)(DerivedStorage + 2768) = v142;
            *(_DWORD *)(DerivedStorage + 2804) = -1;
            *(_DWORD *)(DerivedStorage + 2832) = -1;
            *(unsigned char *)(DerivedStorage + 2808) = 0;
            *(unsigned char *)(DerivedStorage + 2816) = 0;
            *(_DWORD *)(DerivedStorage + 2820) = 0;
            *(_WORD *)(DerivedStorage + 2824) = 0;
            *(void *)(DerivedStorage + 2784) = 0;
            *(unsigned char *)(DerivedStorage + 2872) = 0;
            *(_DWORD *)(DerivedStorage + 2796) = *(_DWORD *)(DerivedStorage + 2792);
            *(_DWORD *)(DerivedStorage + 2800) = v139;
            *(_DWORD *)(DerivedStorage + 2828) = *(_DWORD *)(DerivedStorage + 1756);
            *(_DWORD *)(DerivedStorage + 2836) = FigAlternateGetVideoQualityIndex(*(void *)(DerivedStorage + 1704));
            fpfsi_RTCReportingUpdateInitialVariantRank(DerivedStorage);
            uint64_t v26 = v159;
            if (v166)
            {
              int v56 = 1;
            }
            else
            {
              CMBaseObjectGetDerivedStorage();
              int v56 = 1;
              if (!*(_DWORD *)(DerivedStorage + 2292)) {
                *(_DWORD *)(DerivedStorage + 2292) = 1;
              }
            }
LABEL_246:
            long long v133 = *(_OWORD *)&a2->value;
            *(void *)(DerivedStorage + 240) = a2->epoch;
            *(_OWORD *)(DerivedStorage + 224) = v133;
            if (*(_DWORD *)(DerivedStorage + 524) != 1)
            {
              fpfs_setRanDry(v174);
              fpfs_EnqueuePlaythroughPredictionNotification(v174);
            }
            *(void *)(DerivedStorage + 2344) = 0;
            long long time1 = *(_OWORD *)(DerivedStorage + 320);
            time1_16[0] = *(void *)(DerivedStorage + 336);
            fpfsi_setPlaybackRateMonitorPendingSeekTime(DerivedStorage, (CMTime *)&time1);
            if ((a2->flags & 0x1D) == 1 && (!*(unsigned char *)(DerivedStorage + 462) || !*(_DWORD *)(v170 + 32)))
            {
              __int16 v134 = *(OpaqueCMTimebase **)(DerivedStorage + 576);
              long long time1 = *(_OWORD *)&a2->value;
              time1_16[0] = a2->epoch;
              CMTimebaseSetTime(v134, (CMTime *)&time1);
              if (!*(_DWORD *)(v170 + 32))
              {
                fpfs_EnqueueNotification(v26, @"TimeJumped", v174, 0);
                long long time1 = *(_OWORD *)&a2->value;
                time1_16[0] = a2->epoch;
                fpfs_SeekDidComplete(v26, v174, a6, 0, 0, (CMTime *)&time1);
                int v56 = 1;
                if (!a13) {
                  goto LABEL_255;
                }
                goto LABEL_254;
              }
              fpfsi_updateMaxPlayThroughTime();
            }
            if (!a13)
            {
LABEL_255:
              int v21 = v163;
              CMTimeEpoch v55 = epoch;
              goto LABEL_256;
            }
LABEL_254:
            *a13 = v124;
            goto LABEL_255;
          }
LABEL_350:
          *(_DWORD *)(DerivedStorage + 524) = v168;
          fpfsi_setLastSeekTimeSet(DerivedStorage, MEMORY[0x1E4F1F9F8]);
          *(_OWORD *)v160 = v171;
          CMTimeEpoch v55 = epoch;
          *(void *)(DerivedStorage + 1512) = epoch;
          *(unsigned char *)(DerivedStorage + 530) = v158;
          goto LABEL_352;
        }
        goto LABEL_219;
      }
      CMTimeFlags v119 = a2->flags;
    }
    if ((~v119 & 5) == 0)
    {
      int v56 = 0;
      *(_OWORD *)&v190.unsigned int value = v171;
      v190.CMTimeEpoch epoch = v55;
LABEL_220:
      int v121 = 1;
      CMTimeEpoch v122 = v55;
      int v120 = v166;
      goto LABEL_221;
    }
LABEL_219:
    int v56 = 0;
    goto LABEL_220;
  }
  uint64_t v105 = *(uint64_t **)(DerivedStorage + 2888);
  if (v105)
  {
    do
    {
      fpfsi_RemoveEntryFromBestEffortTrickplayModeHistory(DerivedStorage, v105);
      uint64_t v105 = *(uint64_t **)(DerivedStorage + 2888);
    }
    while (v105);
    uint64_t v104 = *(OpaqueCMTimebase **)(DerivedStorage + 2968);
  }
  long long time1 = *(_OWORD *)&a2->value;
  time1_16[0] = a2->epoch;
  CMTimebaseSetTime(v104, (CMTime *)&time1);
  uint64_t v106 = 0;
  *(_OWORD *)(DerivedStorage + 608) = v171;
  *(void *)(DerivedStorage + 624) = v55;
LABEL_259:
  if (cf) {
    CFRelease(cf);
  }
  if (v186) {
    CFRelease(v186);
  }
  fpfs_UnlockAndPostNotificationsWithCaller(v26);
  CFRelease(v174);
  return v106;
}

void fpfs_haltStream()
{
  cf[25] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1E9350BB0)
  {
    LODWORD(cf[0]) = 0;
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  fpfsi_InvalidatePumpForItem();
  fpfs_ReleaseAndClearTimebaseTimer(*(OpaqueCMTimebase **)(DerivedStorage + 576), (dispatch_object_t *)(DerivedStorage + 1632));
  uint64_t v2 = MEMORY[0x1E4F1F9F8];
  long long v3 = *MEMORY[0x1E4F1F9F8];
  *(_OWORD *)(DerivedStorage + 1640) = *MEMORY[0x1E4F1F9F8];
  uint64_t v4 = *(void *)(v2 + 16);
  *(void *)(DerivedStorage + 1656) = v4;
  *(_OWORD *)(DerivedStorage + 1664) = v3;
  *(void *)(DerivedStorage + 1680) = v4;
  uint64_t v5 = *(const void **)(DerivedStorage + 3104);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(DerivedStorage + 3104) = 0;
  }
  uint64_t v6 = *(const void **)(DerivedStorage + 3240);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(DerivedStorage + 3240) = 0;
  }
  uint64_t v7 = CMBaseObjectGetDerivedStorage();
  if (*(void *)(v7 + 40))
  {
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)(v7 + 936);
    if (v9)
    {
      uint64_t FigBaseObject = FigBytePumpGetFigBaseObject(v9);
      uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v12 = v11 ? v11 : 0;
      double v13 = *(void (**)(uint64_t, uint64_t, void))(v12 + 56);
      if (v13) {
        v13(FigBaseObject, 0x1EE53EC78, 0);
      }
    }
    double v14 = *(const void **)(v8 + 56);
    if (v14)
    {
      CFRelease(v14);
      *(void *)(v8 + 56) = 0;
    }
    BOOL v15 = *(const void **)(v8 + 80);
    if (v15)
    {
      CFRelease(v15);
      *(void *)(v8 + 80) = 0;
    }
    double v16 = *(const void **)(v8 + 88);
    if (v16)
    {
      CFRelease(v16);
      *(void *)(v8 + 88) = 0;
    }
    int64_t v17 = *(const void **)(v8 + 64);
    if (v17)
    {
      CFRelease(v17);
      *(void *)(v8 + 64) = 0;
    }
    dispatch_time_t v18 = *(const void **)(v8 + 72);
    if (v18)
    {
      CFRelease(v18);
      *(void *)(v8 + 72) = 0;
    }
    uint64_t v19 = *(const void **)(v8 + 104);
    if (v19)
    {
      CFRelease(v19);
      *(void *)(v8 + 104) = 0;
    }
    char v20 = *(const void **)(v8 + 112);
    if (v20)
    {
      CFRelease(v20);
      *(void *)(v8 + 112) = 0;
    }
    int v21 = *(const void **)(v8 + 120);
    if (v21)
    {
      CFRelease(v21);
      *(void *)(v8 + 120) = 0;
    }
    fpfsi_StopGearSwitchReleaseAndCleanPlaybackMonitor(v8);
    if (*(void *)(v8 + 128))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      uint64_t v22 = *(const void **)(v8 + 128);
      if (v22)
      {
        CFRelease(v22);
        *(void *)(v8 + 128) = 0;
      }
    }
    uint64_t v23 = *(const void **)(v8 + 40);
    if (v23)
    {
      CFRelease(v23);
      *(void *)(v8 + 40) = 0;
    }
    *(_WORD *)(v8 + 48) = 0;
  }
  fpfsi_cleanupNetworkCostMonitor();
  uint64_t v24 = CMBaseObjectGetDerivedStorage();
  if (*(void *)(v24 + 744))
  {
    uint64_t v25 = v24;
    if (dword_1E9350BB0)
    {
      LODWORD(cf[0]) = 0;
      uint64_t v26 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    uint64_t v27 = *(const void **)(v25 + 744);
    if (v27)
    {
      CFRelease(v27);
      *(void *)(v25 + 744) = 0;
    }
  }
  if (*(unsigned char *)(DerivedStorage + 25))
  {
    CFArrayRef v28 = *(const __CFArray **)(DerivedStorage + 1920);
    if (v28)
    {
      cf[0] = 0;
      if (!FigPlaybackItemLogCreateW3CLogData(v28, (__CFString **)cf))
      {
        if (dword_1E9350BB0)
        {
          uint64_t v29 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if (cf[0]) {
          CFRelease(cf[0]);
        }
      }
    }
  }
  if (*(unsigned char *)(DerivedStorage + 2873))
  {
    FigAssetDownloadCoordinatorUnmarkAssetForInteractivity(*(const void **)(DerivedStorage + 32));
    *(unsigned char *)(DerivedStorage + 2873) = 0;
  }
  CMBaseObjectGetDerivedStorage();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  int v30 = *(const void **)(DerivedStorage + 2536);
  if (v30)
  {
    CFRelease(v30);
    *(void *)(DerivedStorage + 2536) = 0;
  }
}

void fpfsi_RemoveEntryFromBestEffortTrickplayModeHistory(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  long long v3 = (void *)a2[1];
  if (*a2)
  {
    *(void *)(v2 + 8) = v3;
    long long v3 = (void *)a2[1];
  }
  else
  {
    *(void *)(a1 + 2896) = v3;
  }
  *long long v3 = v2;
  --*(void *)(a1 + 2960);
  free(a2);
}

void fpfs_SeekDidFail(const void *a1, const void *a2, int a3, int a4)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v24 = a4;
  int valuePtr = a3;
  uint64_t v29 = 0;
  CFNumberRef v27 = 0;
  CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFNumberRef v10 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
  uint64_t v11 = CMBaseObjectGetDerivedStorage();
  uint64_t v12 = *(void *)(v11 + 2544);
  if (v12)
  {
    uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v14 = v13 ? v13 : 0;
    BOOL v15 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 32);
    if (v15) {
      v15(v12, 0x1EE582B78, 0x1EE584D98, 1);
    }
  }
  uint64_t v16 = MEMORY[0x1E4F1F9F8];
  fpfsi_setLastSeekTimeSet(v11, MEMORY[0x1E4F1F9F8]);
  if (v10)
  {
    keys = @"SeekID";
    values = v10;
    if (a4 && (CFNumberRef v17 = CFNumberCreate(v9, kCFNumberSInt32Type, &v24)) != 0)
    {
      uint64_t v29 = @"Result";
      CFNumberRef v27 = v17;
      CFIndex v18 = 2;
    }
    else
    {
      CFIndex v18 = 1;
    }
    CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    CFDictionaryRef v20 = CFDictionaryCreate(AllocatorForMedia, (const void **)&keys, (const void **)&values, v18, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (v20)
    {
      CFDictionaryRef v21 = v20;
      fpfs_EnqueueNotification(a1, @"SeekWasCanceled", a2, v20);
      CFRelease(v21);
    }
    else
    {
      FigSignalErrorAt();
    }
    p_values = &values;
    do
    {
      if (*p_values) {
        CFRelease(*p_values);
      }
      ++p_values;
      --v18;
    }
    while (v18);
  }
  else
  {
    FigSignalErrorAt();
  }
  *(_OWORD *)(DerivedStorage + 1496) = *(_OWORD *)v16;
  *(void *)(DerivedStorage + 1512) = *(void *)(v16 + 16);
  fpfsi_setLastSeekTimeSet(DerivedStorage, v16);
  *(void *)(DerivedStorage + 3160) = 0;
  *(_DWORD *)(DerivedStorage + 2204) = 0;
  *(_DWORD *)(DerivedStorage + 2224) = 0;
  uint64_t v23 = *(const void **)(DerivedStorage + 1600);
  if (v23)
  {
    CFRelease(v23);
    *(void *)(DerivedStorage + 1600) = 0;
  }
}

uint64_t fpfsi_TimeInTotalTimeRangeInBuffer(uint64_t a1, CMTime *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = CMBaseObjectGetDerivedStorage();
  fpfsi_TotalTimeRangeInBuffer(a1, (uint64_t)&range);
  CMTimeValue value = range.start.value;
  CMTimeScale timescale = range.start.timescale;
  if ((range.start.flags & 1) == 0) {
    return 0;
  }
  uint64_t result = 0;
  if ((range.duration.flags & 1) != 0 && !range.duration.epoch && (range.duration.value & 0x8000000000000000) == 0)
  {
    range.start.CMTimeValue value = value;
    range.start.CMTimeScale timescale = timescale;
    range.duration.CMTimeEpoch epoch = 0;
    CMTime time = *a2;
    uint64_t result = CMTimeRangeContainsTime(&range, &time);
    if (result)
    {
      uint64_t v7 = *(void *)(DerivedStorage + 1048);
      if (v7)
      {
        while (!*(unsigned char *)(v7 + 456))
        {
          uint64_t v7 = *(void *)(v7 + 8);
          if (!v7) {
            goto LABEL_11;
          }
        }
      }
      else
      {
LABEL_11:
        uint64_t v8 = *(void *)(DerivedStorage + 1064);
        if (!v8) {
          goto LABEL_18;
        }
        while (!*(unsigned char *)(v8 + 456))
        {
          uint64_t v8 = *(void *)(v8 + 8);
          if (!v8) {
            goto LABEL_18;
          }
        }
      }
      CMTime time = *a2;
      uint64_t v9 = CMBaseObjectGetDerivedStorage();
      LOBYTE(time2.value) = 0;
      LOBYTE(v11.value) = 0;
      range.start = time;
      if ((fpfsi_TimeInTrackListNonSparseCachedSamples((uint64_t *)(v9 + 1048), &range.start, &time2) & 1) == 0)
      {
        range.start = time;
        if (!fpfsi_TimeInTrackListNonSparseCachedSamples((uint64_t *)(v9 + 1064), &range.start, &v11))
        {
          if (LOBYTE(time2.value) | LOBYTE(v11.value)) {
            return 0;
          }
        }
      }
LABEL_18:
      fpfs_GetTime(DerivedStorage, (uint64_t)&v12);
      *(_OWORD *)&range.start.CMTimeValue value = *(_OWORD *)&a2->value;
      range.start.CMTimeEpoch epoch = a2->epoch;
      if (!fpfs_TimeIsAfter(v5, &range.start, &v12)) {
        return 1;
      }
      CMTime v11 = *a2;
      uint64_t v10 = *(void *)(CMBaseObjectGetDerivedStorage() + 1048);
      if (!v10) {
        return 1;
      }
      while (1)
      {
        if (*(_DWORD *)(v10 + 152) == 1 && !*(unsigned char *)(v10 + 184))
        {
          memset(&range, 0, 24);
          CMBufferQueueGetMinPresentationTimeStamp(&range.start, *(CMBufferQueueRef *)(v10 + 72));
          CMTime time = v11;
          CMTime time2 = range.start;
          if (CMTimeCompare(&time, &time2) < 0) {
            break;
          }
          CMTime time = v11;
          CMTime time2 = *(CMTime *)(v10 + 216);
          if (CMTimeCompare(&time, &time2) > 0) {
            break;
          }
        }
        uint64_t v10 = *(void *)(v10 + 8);
        if (!v10) {
          return 1;
        }
      }
      return 0;
    }
  }
  return result;
}

uint64_t fpfsi_handleIFrameOnlyRateTransition(const void *a1, int a2, int a3, const __CFArray *a4, int a5, float a6)
{
  uint64_t v115 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v91 = *(const void **)DerivedStorage;
  uint64_t v13 = CMBaseObjectGetDerivedStorage();
  int valuePtr = 0;
  memset(&v94, 0, sizeof(v94));
  int v14 = a3 | a2;
  BOOL v15 = a6 > 1.0 && v14 == 0;
  if (!v15
    || (uint64_t v16 = fpfs_FirstRenderingTrackofType((uint64_t)a1, 1986618469)) == 0
    || (uint64_t v17 = *(void *)(v16 + 96)) == 0
    || (uint64_t v18 = *(void *)(v17 + 32)) == 0)
  {
LABEL_27:
    if (dword_1E9350BB0)
    {
      LODWORD(theDict.value) = 0;
      LOBYTE(type.value) = 0;
      os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int value = theDict.value;
      if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v34 = value;
      }
      else {
        unsigned int v34 = value & 0xFFFFFFFE;
      }
      if (v34)
      {
        if (v91) {
          int v35 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
        }
        else {
          int v35 = "";
        }
        if (a1) {
          BOOL v36 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
        }
        else {
          BOOL v36 = "";
        }
        Float64 v37 = *(float *)(v13 + 108);
        LODWORD(lhs.value) = 136317186;
        *(CMTimeValue *)((char *)&lhs.value + 4) = (CMTimeValue)"fpfsi_handleIFrameOnlyRateTransition";
        LOWORD(lhs.flags) = 2048;
        *(void *)((char *)&lhs.flags + 2) = v91;
        HIWORD(lhs.epoch) = 2082;
        Float64 v100 = v35;
        __int16 v101 = 2048;
        Float64 v102 = a1;
        __int16 v103 = 2082;
        uint64_t v104 = v36;
        __int16 v105 = 2048;
        Float64 v106 = v37;
        __int16 v107 = 2048;
        double v108 = a6;
        __int16 v109 = 1024;
        int v110 = a2;
        __int16 v111 = 1024;
        int v112 = a3;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (!v14) {
      return 0;
    }
    int v38 = a5;
    if (!a3 || (*(unsigned char *)(DerivedStorage + 471) = 0, (float)(*(float *)(v13 + 108) * a6) <= 0.0))
    {
      uint64_t v39 = (uint64_t *)CMBaseObjectGetDerivedStorage();
      uint64_t v40 = *v39;
      CMTime refcon = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
      CMTime lhs = refcon;
      fpfs_setRateInternal(v40, a1, &refcon, &lhs, 0.0);
      fpfs_GetTime((uint64_t)v39, (uint64_t)&lhs);
      uint64_t RenderingTrackofType = fpfs_FirstRenderingTrackofType((uint64_t)a1, 1986618469);
      if (RenderingTrackofType)
      {
        if (*(unsigned char *)(RenderingTrackofType + 184))
        {
          long long v42 = a6 < 0.0
              ? (OSStatus (__cdecl *)(CMBufferRef, void *))fpfs_GetCurrentPTSDescending
              : (OSStatus (__cdecl *)(CMBufferRef, void *))fpfs_GetCurrentPTSAscending;
          CMTime refcon = lhs;
          int v43 = (CMTime *)(a6 < 0.0 ? MEMORY[0x1E4F1FA10] : MEMORY[0x1E4F1FA08]);
          CMTime v114 = *v43;
          if (CMBufferQueueCallForEachBuffer(*(CMBufferQueueRef *)(RenderingTrackofType + 80), v42, &refcon) == -12863
            && (v114.flags & 0x1D) == 1)
          {
            CMTime type = v114;
            CMTime rhs = lhs;
            CMTimeSubtract(&theDict, &type, &rhs);
            if (fabs(CMTimeGetSeconds(&theDict)) < 5.0)
            {
              CMTime type = v114;
              fpfs_SetTime((uint64_t)a1, &type);
            }
          }
        }
      }
    }
    if (a2 && a3) {
      goto LABEL_59;
    }
    *(unsigned char *)(DerivedStorage + 528) = 1;
    if (!a2 || a3)
    {
      if (!a2 && a3 && *(void *)(DerivedStorage + 936))
      {
        refcon.unsigned int value = 0;
        uint64_t v58 = *(const void **)(DerivedStorage + 1712);
        uint64_t v59 = *(const void **)(DerivedStorage + 1704);
        *(void *)(DerivedStorage + 1712) = v59;
        if (v59) {
          CFRetain(v59);
        }
        if (v58) {
          CFRelease(v58);
        }
        uint64_t v60 = *(void *)(DerivedStorage + 936);
        uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
        FigBytePumpGetFigBaseObject(v60);
        uint64_t v63 = v62;
        uint64_t v64 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v64) {
          uint64_t v65 = v64;
        }
        else {
          uint64_t v65 = 0;
        }
        uint64_t v66 = *(void (**)(uint64_t, uint64_t, uint64_t, CMTime *))(v65 + 48);
        if (v66) {
          v66(v63, 0x1EE53E1D8, AllocatorForMedia, &refcon);
        }
        unsigned int v67 = (const void *)refcon.value;
        if (refcon.value)
        {
          unsigned int v68 = *(const void **)(DerivedStorage + 1744);
          *(void *)(DerivedStorage + 1744) = refcon.value;
          CFRetain(v67);
          if (v68) {
            CFRelease(v68);
          }
          CFRelease((CFTypeRef)refcon.value);
        }
      }
      goto LABEL_59;
    }
    if (!*(void *)(DerivedStorage + 1712)) {
      goto LABEL_59;
    }
    v116.length = CFArrayGetCount(a4);
    v116.location = 0;
    if (!CFArrayContainsValue(a4, v116, *(const void **)(DerivedStorage + 1712))) {
      goto LABEL_108;
    }
    int v56 = *(const void **)(DerivedStorage + 1712);
    if (!*(unsigned char *)(DerivedStorage + 556))
    {
      CFDictionaryRef ValueAtIndex = *(const void **)(DerivedStorage + 1712);
      goto LABEL_110;
    }
    CFNumberRef v57 = *(const __CFNumber **)(DerivedStorage + 1744);
    if (v57)
    {
      CFNumberGetValue(v57, kCFNumberSInt32Type, &valuePtr);
    }
    else
    {
      AverageBitdouble Rate = FigAlternateGetAverageBitRate(*(void *)(DerivedStorage + 1712));
      if (!AverageBitRate) {
        AverageBitdouble Rate = FigAlternateGetPeakBitRate((uint64_t)v56);
      }
      int valuePtr = AverageBitRate;
    }
    CFArrayRef v70 = *(const __CFArray **)(DerivedStorage + 1688);
    if (v70 && CFArrayGetCount(v70) >= 1) {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 1688), 0);
    }
    else {
LABEL_108:
    }
      CFDictionaryRef ValueAtIndex = 0;
    int v56 = *(const void **)(DerivedStorage + 1712);
LABEL_110:
    if (v56)
    {
      CFRelease(v56);
      *(void *)(DerivedStorage + 1712) = 0;
    }
    int v71 = *(const void **)(DerivedStorage + 1744);
    if (v71)
    {
      CFRelease(v71);
      *(void *)(DerivedStorage + 1744) = 0;
    }
    if (ValueAtIndex)
    {
LABEL_115:
      if (*(void *)(DerivedStorage + 936))
      {
        if (a3 != a2)
        {
          BOOL v72 = *(const void **)DerivedStorage;
          CMTime refcon = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
          CMTime lhs = refcon;
          fpfs_setRateInternal(v72, a1, &refcon, &lhs, 0.0);
        }
        if (a3 && !v38)
        {
          if (*(unsigned char *)(DerivedStorage + 1508))
          {
            int v90 = a2;
            uint64_t v73 = (_OWORD *)(DerivedStorage + 1496);
            if (dword_1E9350BB0)
            {
              LODWORD(theDict.value) = 0;
              LOBYTE(type.value) = 0;
              Float64 v74 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              unsigned int v75 = theDict.value;
              if (os_log_type_enabled(v74, type.value)) {
                unsigned int v76 = v75;
              }
              else {
                unsigned int v76 = v75 & 0xFFFFFFFE;
              }
              if (v76)
              {
                int v89 = a3;
                if (v91) {
                  long long v77 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
                }
                else {
                  long long v77 = "";
                }
                int v80 = v38;
                if (a1) {
                  Float64 v81 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
                }
                else {
                  Float64 v81 = "";
                }
                *(_OWORD *)&refcon.unsigned int value = *v73;
                refcon.CMTimeEpoch epoch = *(void *)(DerivedStorage + 1512);
                Float64 Seconds = CMTimeGetSeconds(&refcon);
                LODWORD(lhs.value) = 136316418;
                *(CMTimeValue *)((char *)&lhs.value + 4) = (CMTimeValue)"fpfsi_handleIFrameOnlyRateTransition";
                LOWORD(lhs.flags) = 2048;
                *(void *)((char *)&lhs.flags + 2) = v91;
                HIWORD(lhs.epoch) = 2082;
                Float64 v100 = v77;
                __int16 v101 = 2048;
                Float64 v102 = a1;
                __int16 v103 = 2082;
                uint64_t v104 = v81;
                __int16 v105 = 2048;
                Float64 v106 = Seconds;
                _os_log_send_and_compose_impl();
                int v38 = v80;
                a3 = v89;
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            *(_OWORD *)&refcon.unsigned int value = *v73;
            refcon.CMTimeEpoch epoch = *(void *)(DerivedStorage + 1512);
            fpfs_SetTime((uint64_t)a1, &refcon);
            uint64_t v83 = MEMORY[0x1E4F1F9F8];
            *uint64_t v73 = *MEMORY[0x1E4F1F9F8];
            *(void *)(DerivedStorage + 1512) = *(void *)(v83 + 16);
            a2 = v90;
            if (!*(_DWORD *)(DerivedStorage + 2200)) {
              fpfsi_setLastSeekTimeSet(DerivedStorage, MEMORY[0x1E4F1F9F8]);
            }
          }
          double v84 = *(const void **)(DerivedStorage + 1600);
          if (v84)
          {
            CFRelease(v84);
            *(void *)(DerivedStorage + 1600) = 0;
          }
          int v85 = *(_DWORD *)(DerivedStorage + 2204);
          if (v85) {
            fpfs_SeekDidFail(v91, a1, v85, 0);
          }
        }
        *(CFAbsoluteTime *)(DerivedStorage + 1544) = CFAbsoluteTimeGetCurrent();
        fpfs_GetNextTimeToPlay(DerivedStorage, 0, (uint64_t)&v93);
        CMTime refcon = *(CMTime *)(DerivedStorage + 1184);
        CMTimeAdd(&v94, &v93, &refcon);
        if (a3) {
          BOOL v86 = a2 == 0;
        }
        else {
          BOOL v86 = 0;
        }
        if (v86) {
          unsigned int v87 = 8;
        }
        else {
          unsigned int v87 = 0;
        }
        *(CFAbsoluteTime *)(DerivedStorage + 2136) = CFAbsoluteTimeGetCurrent();
        *(_OWORD *)(DerivedStorage + 2144) = 0u;
        *(_OWORD *)(DerivedStorage + 2160) = 0u;
        *(_OWORD *)(DerivedStorage + 2176) = 0u;
        *(void *)(DerivedStorage + 2192) = 0;
        uint64_t v88 = *(void *)DerivedStorage;
        CMTime refcon = v94;
        CMTime lhs = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
        uint64_t v78 = fpfs_SetAlternateWithContext(v88, a1, ValueAtIndex, 1u, &refcon, (uint64_t)&lhs, 0, 0, 0, v87);
        goto LABEL_129;
      }
LABEL_128:
      uint64_t v78 = FigSignalErrorAt();
LABEL_129:
      uint64_t v29 = v78;
      if (!(v38 | a3 | v78))
      {
        CMTime refcon = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
        fpfs_PrepareForSeek((const __CFArray *)a1, 0xFFu, 1);
        fpfs_GetNextTimeToPlay(DerivedStorage, 0, (uint64_t)&refcon);
        CMTimeMake(&v92, 1, 100000);
        CMTime lhs = refcon;
        CMTimeAdd(&refcon, &lhs, &v92);
        CMTime lhs = refcon;
        CMTime theDict = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA08];
        CMTime type = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA10];
        return fpfsi_SetCurrentTimeWithRangeAndSeekIDGuts(a1, &lhs, 5, &theDict, &type, 0, 0, 0, 65537, 0, 0);
      }
      return v29;
    }
LABEL_59:
    float v44 = *(float *)(v13 + 108);
    float v45 = fabsf(v44);
    uint64_t v46 = *(void *)(DerivedStorage + 1704);
    if (v46)
    {
      int valuePtr = FigAlternateGetPeakBitRate(v46);
      if (FigAlternateIsIFrameOnly(*(void *)(DerivedStorage + 1704)))
      {
        float v47 = fabsf(a6);
        if (a6 == 0.0) {
          float v47 = 2.0;
        }
        int valuePtr = (int)(float)(v47 * (float)valuePtr);
      }
    }
    float v48 = 1.0;
    if (a3) {
      float v48 = 2.0;
    }
    if (v44 == 0.0) {
      float v49 = v48;
    }
    else {
      float v49 = v45;
    }
    if (!a4) {
      goto LABEL_128;
    }
    CFIndex Count = CFArrayGetCount(a4);
    if (Count < 1) {
      goto LABEL_128;
    }
    CFIndex v51 = Count;
    CFIndex v52 = 0;
    CFDictionaryRef ValueAtIndex = 0;
    do
    {
      uint64_t v54 = CFArrayGetValueAtIndex(a4, v52);
      unsigned int PeakBitRate = FigAlternateGetPeakBitRate((uint64_t)v54);
      if (!ValueAtIndex || (float)(v49 * (float)PeakBitRate) <= (float)valuePtr) {
        CFDictionaryRef ValueAtIndex = v54;
      }
      ++v52;
    }
    while (v51 != v52);
    if (!ValueAtIndex) {
      goto LABEL_128;
    }
    goto LABEL_115;
  }
  uint64_t v19 = v13;
  int v20 = a5;
  theDict.unsigned int value = 0;
  uint64_t v21 = FigGetAllocatorForMedia();
  uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(v18);
  uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v23) {
    uint64_t v24 = v23;
  }
  else {
    uint64_t v24 = 0;
  }
  uint64_t v25 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CMTime *))(v24 + 48);
  if (v25)
  {
    int v26 = v25(FigBaseObject, @"VideoQualityOfServiceTier", v21, &theDict);
    CFNumberRef v27 = (const void *)theDict.value;
    if (v26) {
      BOOL v28 = 1;
    }
    else {
      BOOL v28 = theDict.value == 0;
    }
    if (v28)
    {
      uint64_t v29 = 0;
      a5 = v20;
      uint64_t v13 = v19;
      goto LABEL_24;
    }
    CFDictionaryGetValue((CFDictionaryRef)theDict.value, (const void *)*MEMORY[0x1E4F44C78]);
    int v30 = FigCFEqual();
    a5 = v20;
    if (v30 || FigCFEqual())
    {
      uint64_t v31 = *(void *)DerivedStorage;
      CMTime refcon = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
      CMTime lhs = refcon;
      fpfs_setRateInternal(v31, a1, &refcon, &lhs, 0.0);
      uint64_t v29 = fpfsi_SeekToCurrentTime(a1);
    }
    else
    {
      uint64_t v29 = 0;
    }
  }
  else
  {
    uint64_t v29 = 0;
    a5 = v20;
  }
  uint64_t v13 = v19;
  CFNumberRef v27 = (const void *)theDict.value;
LABEL_24:
  int v14 = a3 | a2;
  if (v27) {
    CFRelease(v27);
  }
  if (!v29) {
    goto LABEL_27;
  }
  return v29;
}

uint64_t fpfsi_EnterIFrameModeForSeekWithNonzeroToleranceIfPossible(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = CMBaseObjectGetDerivedStorage();
  CFArrayRef theArray = 0;
  uint64_t v5 = CMBaseObjectGetDerivedStorage();
  if (!*(void *)(v5 + 40)) {
    return 0;
  }
  if (!*(unsigned char *)(v5 + 48)
    || !*(unsigned char *)(v5 + 49)
    || *(float *)(DerivedStorage + 108) != 0.0
    || (*(unsigned char *)(v4 + 332) & 1) == 0
    || (*(_DWORD *)(v4 + 356) & 0x1D) != 1 && (*(_DWORD *)(v4 + 380) & 0x1D) != 1)
  {
    goto LABEL_21;
  }
  CMTime time1 = *(CMTime *)(v4 + 344);
  CMTime time2 = *(CMTime *)(v4 + 368);
  if (!CMTimeCompare(&time1, &time2) || (*(unsigned char *)(v4 + 1508) & 1) != 0) {
    goto LABEL_21;
  }
  int v6 = fpfsi_CreateAndAddScanningModeFilterToBoss(a2, 1u);
  if (*(unsigned char *)(v4 + 2880)) {
    int v6 = FigAlternateSelectionBossSetProperty(*(const void **)(v4 + 40), @"Paused", (const void *)*MEMORY[0x1E4F1CFC8]);
  }
  if (v6) {
    goto LABEL_21;
  }
  if (FigAlternateSelectionBossApplyFilters(*(const void **)(v4 + 40))) {
    goto LABEL_21;
  }
  uint64_t v7 = *(void *)(v4 + 40);
  uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
  if (FigAlternateSelectionBossCopyProperty(v7, @"FilteredAlternateList", AllocatorForMedia, &theArray))goto LABEL_21; {
  if (!theArray)
  }
    return 0;
  if (CFArrayGetCount(theArray) < 1
    || (CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0),
        !FigAlternateIsIFrameOnly((uint64_t)ValueAtIndex))
    || fpfsi_UpdateValidAlternateListAndSuggestAnAlternate(a2, theArray, 0))
  {
LABEL_21:
    uint64_t v12 = 0;
    goto LABEL_22;
  }
  if (dword_1E9350BB0)
  {
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    uint64_t v12 = 1;
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  else
  {
    uint64_t v12 = 1;
  }
LABEL_22:
  if (theArray) {
    CFRelease(theArray);
  }
  return v12;
}

uint64_t fpfsi_TryToSeekWithinBuffer(const __CFArray *a1, CMTime *a2, int a3, int a4)
{
  v47[2] = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v9 = *(void **)DerivedStorage;
  uint64_t v10 = CMBaseObjectGetDerivedStorage();
  memset(&v44, 0, sizeof(v44));
  fpfs_GetTime(DerivedStorage, (uint64_t)&v44);
  CMTime time1 = *a2;
  uint64_t result = fpfsi_TimeInTotalTimeRangeInBuffer((uint64_t)a1, &time1);
  if (result)
  {
    if (!fpfs_LastRenderingTrackofType((uint64_t)a1, 1986618469, 0)
      || (result = 0, float v12 = *(float *)(v10 + 108), v12 <= 2.0) && v12 >= 0.0)
    {
      int v40 = a4;
      int v41 = a3;
      *(_OWORD *)&type.unsigned int value = *(_OWORD *)&a2->value;
      type.CMTimeEpoch epoch = a2->epoch;
      *(_OWORD *)&v43.unsigned int value = *(_OWORD *)&a2->value;
      v43.CMTimeEpoch epoch = type.epoch;
      uint64_t v13 = CMBaseObjectGetDerivedStorage();
      v47[0] = v13 + 1064;
      v47[1] = v13 + 1048;
      if (*(float *)(v13 + 848) >= 0.0)
      {
        uint64_t v14 = 0;
        char v15 = 1;
        do
        {
          uint64_t v16 = *(void *)v47[v14];
          if (v16)
          {
            while (1)
            {
              if (!*(unsigned char *)(v16 + 184) && (*(unsigned char *)(v16 + 228) & 1) != 0 && (*(unsigned char *)(v16 + 252) & 1) != 0)
              {
                CMTime time1 = *(CMTime *)(v16 + 216);
                CMTime time2 = type;
                if (CMTimeCompare(&time1, &time2) < 0)
                {
                  CMTime time1 = type;
                  CMTime time2 = *(CMTime *)(v16 + 240);
                  if (CMTimeCompare(&time1, &time2) < 0) {
                    break;
                  }
                }
              }
              uint64_t v16 = *(void *)(v16 + 8);
              if (!v16) {
                goto LABEL_14;
              }
            }
            *(_OWORD *)&v43.unsigned int value = *(_OWORD *)(v16 + 240);
            v43.CMTimeEpoch epoch = *(void *)(v16 + 256);
          }
LABEL_14:
          CMTime time1 = type;
          CMTime time2 = v43;
          char v17 = v15 & (CMTimeCompare(&time1, &time2) == 0);
          uint64_t v14 = 1;
          char v15 = 0;
        }
        while ((v17 & 1) != 0);
      }
      *(_OWORD *)&a2->unsigned int value = *(_OWORD *)&v43.value;
      a2->CMTimeEpoch epoch = v43.epoch;
      CMBaseObjectGetDerivedStorage();
      if (!*(_DWORD *)(DerivedStorage + 2292)) {
        *(_DWORD *)(DerivedStorage + 2292) = 12;
      }
      uint64_t v18 = CMBaseObjectGetDerivedStorage();
      fpfs_ClearRenderChains(a1, 255);
      *(void *)(v18 + 780) = 0;
      fpfs_PrepareForSeek(a1, 0xFFu, 0);
      *(unsigned char *)(DerivedStorage + 528) = 1;
      if (*(const __CFArray **)(v10 + 80) == a1 && *(void *)(CMBaseObjectGetDerivedStorage() + 504))
      {
        uint64_t v27 = *(void *)(v10 + 504);
        uint64_t v28 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v29 = v28 ? v28 : 0;
        int v38 = *(void (**)(uint64_t, uint64_t))(v29 + 32);
        if (v38) {
          v38(v27, 1);
        }
      }
      CMTime time1 = *a2;
      fpfsi_setLastSeekTimeSet(DerivedStorage, (uint64_t)&time1);
      uint64_t v19 = DerivedStorage + 1496;
      long long v20 = *(_OWORD *)&a2->value;
      *(void *)(DerivedStorage + 1512) = a2->epoch;
      *(_OWORD *)(DerivedStorage + 1496) = v20;
      fpfs_GetTime(DerivedStorage, (uint64_t)&time1);
      CMTime v44 = time1;
      uint64_t v21 = *(void *)(DerivedStorage + 1048);
      if (v21)
      {
        uint64_t v22 = (long long *)MEMORY[0x1E4F1F9F8];
        do
        {
          uint64_t v23 = *(void *)(v21 + 8);
          fpfsi_MoveTrackToPlayedOut(DerivedStorage, v21, v22);
          if (!v23) {
            break;
          }
          uint64_t v21 = v23;
        }
        while (*(void *)(DerivedStorage + 1048));
      }
      uint64_t v24 = MEMORY[0x1E4F1F9F8];
      long long v39 = *MEMORY[0x1E4F1F9F8];
      *(_OWORD *)(DerivedStorage + 3028) = *MEMORY[0x1E4F1F9F8];
      uint64_t v25 = *(void *)(v24 + 16);
      *(void *)(DerivedStorage + 3044) = v25;
      if (dword_1E9350BB0)
      {
        os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        uint64_t v19 = DerivedStorage + 1496;
      }
      for (uint64_t i = 0; i != 24; i += 8)
      {
        uint64_t v31 = DerivedStorage + i;
        *(void *)(v31 + 1128) = 0;
        *(void *)(v31 + 1152) = 0;
      }
      CMTime time1 = v44;
      CMTime time2 = *a2;
      if (CMTimeCompare(&time1, &time2) >= 1)
      {
        CMTime time1 = *a2;
        fpfs_JumpToTime(a1, &time1, 0);
      }
      CMTime time1 = *a2;
      if (fpfs_RestartPlayedOutTracks(a1, &time1)) {
        return 0;
      }
      uint64_t v32 = *(void *)(DerivedStorage + 1048);
      if (v32)
      {
        uint64_t v33 = 0;
        uint64_t v34 = 0;
        do
        {
          if (*(_DWORD *)(v32 + 152) == 6)
          {
            int v35 = *(_DWORD *)(v32 + 32);
            if (v34) {
              BOOL v36 = 0;
            }
            else {
              BOOL v36 = v35 == 1936684398;
            }
            if (v36) {
              uint64_t v34 = v32;
            }
            if (v33) {
              BOOL v37 = 0;
            }
            else {
              BOOL v37 = v35 == 1986618469;
            }
            if (v37) {
              uint64_t v33 = v32;
            }
          }
          uint64_t v32 = *(void *)(v32 + 8);
        }
        while (v32);
      }
      else
      {
        uint64_t v34 = 0;
        uint64_t v33 = 0;
      }
      fpfs_PostHasEnabledTrackTypeNotification(*(const void **)DerivedStorage, a1);
      if (!(v34 | v33) || fpfs_setTimebaseStarter((uint64_t)a1, v34, v33))
      {
        return 0;
      }
      else
      {
        if (v40)
        {
          CMTime time1 = *(CMTime *)(DerivedStorage + 1472);
          if (fpfsi_PlaybackHasBufferedBeyondTime((uint64_t)a1, (uint64_t)&time1)) {
            fpfs_SignalImageQueueGaugeEnqueueingCompleteAfterClampTime();
          }
        }
        if (!v33 || !*(unsigned char *)(v33 + 104) || (time1 = v44, CMTime time2 = *a2, CMTimeCompare(&time1, &time2) >= 1))
        {
          CMTime time1 = *a2;
          fpfs_JumpToTime(a1, &time1, 0);
          *(_OWORD *)uint64_t v19 = v39;
          *(void *)(v19 + 16) = v25;
          CMTime time1 = *a2;
          fpfs_SeekDidComplete(v9, a1, v41, 1, 0, &time1);
          fpfs_CheckPrebufferedLevels(&time1, a1, 1, -1, 0);
        }
        fpfsi_MakeNextItemReadyForInspectionIfItemEndedOrBeyondFwdEnd(a1);
        fpfs_AssessItemTransition(v9);
        return 1;
      }
    }
  }
  return result;
}

uint64_t fpfs_CancelTrialSwitch(uint64_t a1)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  uint64_t result = DerivedStorage[221];
  if (result)
  {
    if (DerivedStorage[213])
    {
      FigAlternateGetPeakBitRate(result);
      FigAlternateGetPeakBitRate(DerivedStorage[213]);
      uint64_t result = fpfs_SetAlternateWithContext(*DerivedStorage, a1, DerivedStorage[213], 1);
      if (!result)
      {
        uint64_t v4 = DerivedStorage[131];
        if (v4)
        {
          do
          {
            uint64_t v5 = *(void *)(v4 + 8);
            if (*(void *)(v4 + 48) == DerivedStorage[2 * *(unsigned __int8 *)(v4 + 180) + 126]) {
              fpfs_DeleteTrack(a1, v4);
            }
            uint64_t v4 = v5;
          }
          while (v5);
        }
        uint64_t v6 = 0;
        uint64_t v7 = 126;
        do
        {
          if (DerivedStorage[v7]) {
            StoreCurrentManifold((uint64_t)DerivedStorage, v6, 1u, 0);
          }
          uint64_t v8 = &DerivedStorage[v6];
          uint64_t v9 = (const void *)v8[25];
          if (v9)
          {
            CFRelease(v9);
            v8[25] = 0;
          }
          *((_DWORD *)DerivedStorage + v6 + 241) = 0;
          *((unsigned char *)DerivedStorage + v6 + 3069) = 0;
          v8[144] = 0;
          ++v6;
          v7 += 2;
        }
        while (v6 != 3);
        return 0;
      }
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return result;
}

uint64_t fpfs_CreateAccessLogEntryWithUnlock(uint64_t a1, CFMutableDictionaryRef *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFMutableDictionaryRef theDict = 0;
  if (!*(void *)(DerivedStorage + 936)) {
    return 4294954436;
  }
  uint64_t v4 = DerivedStorage;
  if (fpfs_PlayingVideoOnly())
  {
    uint64_t result = 0;
    *a2 = 0;
    return result;
  }
  uint64_t v6 = *(void *)(v4 + 936);
  uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
  uint64_t FigBaseObject = FigBytePumpGetFigBaseObject(v6);
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  CMTime v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFMutableDictionaryRef *))(v10 + 48);
  if (!v11) {
    return 4294954514;
  }
  uint64_t v38 = 0;
  double valuePtr = 0.0;
  uint64_t result = v11(FigBaseObject, 0x1EE53E398, AllocatorForMedia, &theDict);
  if (!result)
  {
    CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFNumberRef v13 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, (const void *)(v4 + 1752));
    if (v13)
    {
      CFNumberRef v14 = v13;
      CFDictionarySetValue(theDict, @"c-variant-rank", v13);
      CFRelease(v14);
      double v15 = *(double *)(v4 + 1928);
      if (v15 > 0.0)
      {
        CFAllocatorRef v16 = (const __CFAllocator *)FigGetAllocatorForMedia();
        CFDateRef v17 = CFDateCreate(v16, v15);
        if (!v17) {
          goto LABEL_43;
        }
        CFDateRef v18 = v17;
        CFDictionarySetValue(theDict, @"date", v17);
        CFRelease(v18);
      }
      if ((*(void *)(v4 + 2624) & 0x8000000000000000) != 0)
      {
        double v19 = *(double *)(v4 + 1952);
        double valuePtr = v19;
        if (*(double *)(v4 + 1944) != 0.0) {
          double valuePtr = v19 + (CFAbsoluteTimeGetCurrent() - *(double *)(v4 + 1944)) * fabsf(*(float *)(v4 + 848));
        }
      }
      else
      {
        double valuePtr = 0.0;
      }
      CFNumberRef v20 = CFNumberCreate(v12, kCFNumberDoubleType, &valuePtr);
      if (v20)
      {
        CFNumberRef v21 = v20;
        CFDictionarySetValue(theDict, @"c-duration-watched", v20);
        CFRelease(v21);
        if ((*(void *)(v4 + 2624) & 0x8000000000000000) != 0)
        {
          double valuePtr = *(double *)(v4 + 1960);
          if (*(double *)(v4 + 1944) != 0.0) {
            double valuePtr = valuePtr + CFAbsoluteTimeGetCurrent() - *(double *)(v4 + 1944);
          }
        }
        else
        {
          double valuePtr = 0.0;
        }
        CFNumberRef v22 = CFNumberCreate(v12, kCFNumberDoubleType, &valuePtr);
        if (v22)
        {
          CFNumberRef v23 = v22;
          CFDictionarySetValue(theDict, @"c-wall-clock-duration-watched", v22);
          CFRelease(v23);
          double valuePtr = *(double *)(v4 + 1936);
          CFNumberRef v24 = CFNumberCreate(v12, kCFNumberDoubleType, &valuePtr);
          if (v24)
          {
            CFNumberRef v25 = v24;
            CFDictionarySetValue(theDict, @"c-start-time", v24);
            CFRelease(v25);
            if (!*(unsigned char *)(v4 + 2082))
            {
LABEL_31:
              uint64_t v38 = 0;
              CFNumberRef v29 = CFNumberCreate(v12, kCFNumberCFIndexType, &v38);
              if (v29)
              {
                CFNumberRef v30 = v29;
                CFDictionarySetValue(theDict, @"c-frames-dropped", v29);
                CFRelease(v30);
                CFNumberRef v31 = CFNumberCreate(v12, kCFNumberCFIndexType, (const void *)(v4 + 2096));
                if (v31)
                {
                  CFNumberRef v32 = v31;
                  CFDictionarySetValue(theDict, @"c-stalls", v31);
                  CFRelease(v32);
                  if (!*(_DWORD *)(v4 + 2292))
                  {
LABEL_36:
                    int v35 = *(const void **)(v4 + 2360);
                    if (v35) {
                      CFDictionarySetValue(theDict, @"c-service-identifier", v35);
                    }
                    BOOL v36 = (const void *)*MEMORY[0x1E4F1CFD0];
                    if (*(unsigned char *)(v4 + 2296)) {
                      BOOL v37 = (const void *)*MEMORY[0x1E4F1CFD0];
                    }
                    else {
                      BOOL v37 = (const void *)*MEMORY[0x1E4F1CFC8];
                    }
                    CFDictionarySetValue(theDict, @"c-switch-failure", v37);
                    *(unsigned char *)(v4 + 2296) = 0;
                    CFDictionarySetValue(theDict, @"c-provisional-entry", v36);
                    uint64_t result = 0;
                    *a2 = theDict;
                    return result;
                  }
                  CFNumberRef v33 = CFNumberCreate(v12, kCFNumberIntType, (const void *)(v4 + 2292));
                  if (v33)
                  {
                    CFNumberRef v34 = v33;
                    CFDictionarySetValue(theDict, @"c-reason", v33);
                    CFRelease(v34);
                    *(_DWORD *)(v4 + 2292) = 0;
                    goto LABEL_36;
                  }
                }
              }
              goto LABEL_43;
            }
            double v26 = *(double *)(v4 + 2000);
            if (v26 <= 0.0) {
              double v26 = *(double *)(v4 + 1992);
            }
            double valuePtr = v26;
            CFNumberRef v27 = CFNumberCreate(v12, kCFNumberDoubleType, &valuePtr);
            if (v27)
            {
              CFNumberRef v28 = v27;
              CFDictionarySetValue(theDict, @"c-startup-time", v27);
              CFRelease(v28);
              goto LABEL_31;
            }
          }
        }
      }
    }
LABEL_43:
    if (theDict) {
      CFRelease(theDict);
    }
    return 4294954434;
  }
  return result;
}

void fpfs_PrepareForSeek(const __CFArray *a1, unsigned int a2, int a3)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v7 = CMBaseObjectGetDerivedStorage();
  char v33 = 0;
  uint64_t v8 = *(void *)DerivedStorage;
  long long v32 = *MEMORY[0x1E4F1F9F8];
  long long v36 = v32;
  uint64_t v9 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  uint64_t v37 = v9;
  long long v34 = v32;
  uint64_t v35 = v9;
  fpfs_setRateInternal(v8, a1, &v36, &v34, 0.0);
  CMBufferQueueReset(*(CMBufferQueueRef *)(DerivedStorage + 856));
  *(unsigned char *)(DerivedStorage + 464) = 0;
  *(_OWORD *)(DerivedStorage + 1520) = v32;
  uint64_t v30 = v9;
  *(void *)(DerivedStorage + 1536) = v9;
  *(_DWORD *)(DerivedStorage + 524) = 0;
  fpfsi_setPlaybackMonitorOkayToAttemptSwitchUp(DerivedStorage, 0);
  *(CFAbsoluteTime *)(DerivedStorage + 1976) = CFAbsoluteTimeGetCurrent();
  *(CFAbsoluteTime *)(DerivedStorage + 2024) = CFAbsoluteTimeGetCurrent();
  *(_WORD *)(DerivedStorage + 2083) = 257;
  if (*(float *)(v7 + 108) == 0.0 && *(unsigned char *)(DerivedStorage + 2880) && (*(unsigned char *)(v7 + 760) || dword_1E9350BB0))
  {
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  fpfs_SetRenderChainsReleasedForPause((uint64_t)a1, 0);
  if (*(void *)(DerivedStorage + 1768)) {
    fpfs_CompleteTrialSwitch(a1, 0, &v33);
  }
  if (a3)
  {
    CFArrayRef v31 = a1;
    for (uint64_t i = 0; i != 3; ++i)
    {
      if ((a2 >> i))
      {
        StoreCurrentManifold(DerivedStorage, i, 0, 0);
        uint64_t v12 = DerivedStorage + 8 * i;
        CFNumberRef v13 = *(const void **)(v12 + 176);
        if (v13)
        {
          CFRelease(v13);
          *(void *)(v12 + 176) = 0;
        }
      }
    }
    uint64_t v14 = *(void *)(DerivedStorage + 1064);
    CFArrayRef v15 = a1;
    if (v14)
    {
      do
      {
        if (!*(void *)(DerivedStorage + 1064)) {
          break;
        }
        uint64_t v16 = *(void *)(v14 + 8);
        if ((a2 >> *(unsigned char *)(v14 + 180)))
        {
          if (dword_1E9350BB0)
          {
            CFDateRef v17 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          fpfs_DeleteTrack(v31, v14);
        }
        uint64_t v14 = v16;
      }
      while (v16);
    }
    uint64_t v18 = *(void *)(DerivedStorage + 1048);
    if (v18)
    {
      do
      {
        if (!*(void *)(DerivedStorage + 1048)) {
          break;
        }
        uint64_t v19 = *(void *)(v18 + 8);
        if ((a2 >> *(unsigned char *)(v18 + 180)))
        {
          if (v19) {
            uint64_t v20 = *(void *)(v19 + 16);
          }
          else {
            uint64_t v20 = -1;
          }
          if (dword_1E9350BB0)
          {
            CFNumberRef v21 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          fpfs_StopFeedingTrack(v18, 0, 0);
          uint64_t v22 = *(void *)(v18 + 96);
          if (v22) {
            fpfs_FlushPrimaryAndAuxRenderChains(v22, 1);
          }
          fpfs_DeleteTrack(v15, v18);
          if ((v20 & 0x8000000000000000) == 0)
          {
            if (!*(void *)(DerivedStorage + 1048)) {
              break;
            }
            uint64_t v19 = *(void *)(DerivedStorage + 1048);
            while (*(void *)(v19 + 16) != v20)
            {
              uint64_t v19 = *(void *)(v19 + 8);
              if (!v19)
              {
                uint64_t v19 = *(void *)(DerivedStorage + 1048);
                break;
              }
            }
          }
        }
        uint64_t v18 = v19;
      }
      while (v19);
    }
    uint64_t v23 = 0;
    uint64_t v24 = DerivedStorage + 248;
    do
    {
      if ((a2 >> v23))
      {
        *(_OWORD *)uint64_t v24 = v32;
        *(void *)(v24 + 16) = v30;
      }
      ++v23;
      v24 += 24;
    }
    while (v23 != 3);
    if ((a2 & 2) != 0 || *(void *)(DerivedStorage + 1104) == 1)
    {
      uint64_t v25 = *(void *)(DerivedStorage + 800);
      if (v25) {
        fpfs_FlushPrimaryAndAuxRenderChains(v25, 1);
      }
    }
    if (a2)
    {
      uint64_t v26 = *(void *)(DerivedStorage + 792);
      if (v26) {
        fpfs_FlushPrimaryAndAuxRenderChains(v26, 1);
      }
      uint64_t v27 = *(void *)(DerivedStorage + 808);
      if (v27) {
        fpfs_FlushPrimaryAndAuxRenderChains(v27, 1);
      }
      uint64_t v28 = *(void *)(DerivedStorage + 824);
      if (v28) {
        fpfs_FlushPrimaryAndAuxRenderChains(v28, 1);
      }
    }
    if ((a2 & 4) != 0)
    {
      uint64_t v29 = *(void *)(DerivedStorage + 816);
      if (v29) {
        fpfs_FlushPrimaryAndAuxRenderChains(v29, 1);
      }
    }
  }
}

void fpfs_CommitAccessLogEntry(const void *a1, __CFDictionary *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    uint64_t v5 = DerivedStorage;
    if (!fpfs_PlayingVideoOnly())
    {
      uint64_t v6 = *(void *)(v5 + 1704);
      if (v6)
      {
        double Resolution = FigAlternateGetResolution(v6);
        if (v8 > 0.0 && Resolution > 0.0)
        {
          FigCFDictionarySetInt32();
          FigCFDictionarySetInt32();
        }
        uint64_t CodecString = (const void *)FigAlternateGetCodecString(*(void *)(v5 + 1704));
        if (CodecString) {
          CFDictionarySetValue(a2, @"c-codec-names", CodecString);
        }
        VideoRangeString = FigAlternateGetVideoRangeString(*(__CFString **)(v5 + 1704));
        if (VideoRangeString) {
          CFDictionarySetValue(a2, @"c-video-range", VideoRangeString);
        }
      }
      CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(v5 + 1912));
      CFArrayAppendValue(*(CFMutableArrayRef *)(v5 + 1912), a2);
      if (!Count) {
        fpfsi_UpdateAccessLogStartupPerformanceMetrics();
      }
      if (!*(unsigned char *)(v5 + 2128)) {
        fpfs_EnqueueNotification(*(const void **)v5, @"NewAccessLogEntry", a1, 0);
      }
      if (*(float *)(v5 + 848) == 0.0)
      {
        *(void *)(v5 + 1944) = 0;
      }
      else
      {
        *(CFAbsoluteTime *)(v5 + 1944) = CFAbsoluteTimeGetCurrent();
        fpfs_GetTime(v5, (uint64_t)&lhs);
        CMTime v16 = *(CMTime *)(v5 + 1184);
        CMTimeAdd(&time, &lhs, &v16);
        *(Float64 *)(v5 + 1936) = CMTimeGetSeconds(&time);
      }
      uint64_t v12 = *(void *)(v5 + 1048);
      if (v12)
      {
        UInt32 mChannelsPerFrame = 0;
        int v14 = 0;
        do
        {
          if ((*(void *)(v12 + 424) & 0x8000000000000000) != 0
            && *(void *)(v5 + 1112) == *(unsigned __int8 *)(v12 + 180))
          {
            *(void *)(v12 + 424) = Count;
            if (*(_DWORD *)(v12 + 152) == 6)
            {
              if ((*(void *)(v5 + 2624) & 0x8000000000000000) != 0) {
                *(void *)(v5 + 2624) = Count;
              }
              int v14 = 1;
            }
          }
          if (*(_DWORD *)(v12 + 32) == 1936684398)
          {
            StreamBasicDescription = CMAudioFormatDescriptionGetStreamBasicDescription(*(CMAudioFormatDescriptionRef *)(v12 + 40));
            if (StreamBasicDescription)
            {
              if ((*(_DWORD *)(v12 + 152) == 6 || *(void *)(v12 + 424) == Count)
                && StreamBasicDescription->mChannelsPerFrame > mChannelsPerFrame)
              {
                UInt32 mChannelsPerFrame = StreamBasicDescription->mChannelsPerFrame;
              }
            }
          }
          uint64_t v12 = *(void *)(v12 + 8);
        }
        while (v12);
        if (mChannelsPerFrame) {
          FigCFDictionarySetInt32();
        }
      }
      else
      {
        int v14 = 0;
      }
      *(void *)(v5 + 1928) = *(void *)(v5 + 1944);
      *(void *)(v5 + 2096) = 0;
      *(unsigned char *)(v5 + 2128) = 0;
      *(_OWORD *)(v5 + 1952) = 0u;
      if (!v14) {
        fpfs_MarkAccessLogEntryComplete((uint64_t)a1, Count);
      }
    }
  }
}

uint64_t fpfsi_RTCReportingUpdateInitialVariantRank(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 2544);
  if (v2)
  {
    uint64_t v3 = *(int *)(result + 2860);
    uint64_t VTable = CMBaseObjectGetVTable();
    uint64_t v6 = *(void *)(VTable + 16);
    uint64_t result = VTable + 16;
    uint64_t v5 = v6;
    uint64_t v7 = v6 ? v5 : 0;
    double v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v7 + 56);
    if (v8) {
      uint64_t result = v8(v2, 0x1EE582B78, 0x1EE5610D8, v3, 0);
    }
  }
  uint64_t v9 = *(void *)(v1 + 2544);
  if (v9)
  {
    uint64_t v10 = *(int *)(v1 + 2864);
    uint64_t v11 = CMBaseObjectGetVTable();
    uint64_t v13 = *(void *)(v11 + 16);
    uint64_t result = v11 + 16;
    uint64_t v12 = v13;
    uint64_t v14 = v13 ? v12 : 0;
    CFArrayRef v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v14 + 56);
    if (v15)
    {
      return v15(v9, 0x1EE582B78, 0x1EE5610F8, v10, 0);
    }
  }
  return result;
}

void fpfsi_SetSwitchReasonCode(uint64_t a1, unsigned int a2)
{
  if (!*(_DWORD *)(a1 + 2292)) {
    *(_DWORD *)(a1 + 2292) = a2;
  }
  if (a2 <= 0x10 && ((1 << a2) & 0x1800C) != 0) {
    *(CFAbsoluteTime *)(a1 + 2008) = CFAbsoluteTimeGetCurrent();
  }
}

double fpfs_setRanDry(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = *(const void **)DerivedStorage;
  *(_DWORD *)(DerivedStorage + 1888) = 0;
  fpfs_EnqueueNotification(v3, @"StreamRanDry", a1, 0);
  fpfs_GetNextTimeToPlay(DerivedStorage, 0, (uint64_t)&v5);
  return fpfsi_PrepareToStartWhenLikelyToKeepUp((uint64_t)a1, &v5);
}

uint64_t fpfs_EnqueuePlaythroughPredictionNotification(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(DerivedStorage + 524) == 1) {
    uint64_t v3 = (const void **)&kFigPlaybackItemNotification_StreamLikelyToKeepUp;
  }
  else {
    uint64_t v3 = (const void **)&kFigPlaybackItemNotification_StreamUnlikelyToKeepUp;
  }
  uint64_t v4 = *v3;
  CMTime v5 = *(const void **)DerivedStorage;

  return fpfs_EnqueueNotification(v5, v4, a1, 0);
}

uint64_t fpfsi_TimeInTrackListNonSparseCachedSamples(uint64_t *a1, CMTime *a2, unsigned char *a3)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    char v6 = 0;
    while (1)
    {
      if (!*(unsigned char *)(v4 + 184))
      {
        uint64_t v7 = *(opaqueCMBufferQueue **)(v4 + 80);
        if (v7)
        {
          if (!CMBufferQueueIsEmpty(v7))
          {
            CMTime time1 = *a2;
            CMTime time2 = *(CMTime *)(v4 + 216);
            if (CMTimeCompare(&time1, &time2) < 0)
            {
              CMTime time1 = *a2;
              uint64_t v11 = 0;
              CMBufferQueueCallForEachBuffer(*(CMBufferQueueRef *)(v4 + 80), (OSStatus (__cdecl *)(CMBufferRef, void *))fpfsi_GetSampleRightBeforeTime, &time1);
              if (v11)
              {
                fpfs_GetEndOutputPresentationTimeStamp(v11, &v9);
                CMTime time2 = *a2;
                if (CMTimeCompare(&v9, &time2) > 0)
                {
                  uint64_t result = 1;
                  char v6 = 1;
                  if (a3) {
                    goto LABEL_15;
                  }
                  return result;
                }
              }
            }
            char v6 = 1;
          }
        }
      }
      uint64_t v4 = *(void *)(v4 + 8);
      if (!v4)
      {
        uint64_t result = 0;
        if (a3) {
          goto LABEL_15;
        }
        return result;
      }
    }
  }
  uint64_t result = 0;
  char v6 = 0;
  if (a3) {
LABEL_15:
  }
    *a3 = v6 & 1;
  return result;
}

uint64_t fpfsi_GetSampleRightBeforeTime(opaqueCMSampleBuffer *a1, CMTime *a2)
{
  memset(&v10, 0, sizeof(v10));
  CMSampleBufferGetOutputPresentationTimeStamp(&v10, a1);
  memset(&v9, 0, sizeof(v9));
  CMSampleBufferGetOutputDecodeTimeStamp(&v9, a1);
  memset(&v8, 0, sizeof(v8));
  unsigned int value = (opaqueCMSampleBuffer *)a2[1].value;
  if (value) {
    CMSampleBufferGetOutputPresentationTimeStamp(&v8, value);
  }
  else {
    CMTime v8 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA08];
  }
  if ((v10.flags & 1) == 0 && (v9.flags & 1) == 0) {
    return 0;
  }
  CMTime time1 = v10;
  CMTime v6 = *a2;
  if (CMTimeCompare(&time1, &v6) >= 1)
  {
    CMTime time1 = v9;
    CMTime v6 = *a2;
    if (CMTimeCompare(&time1, &v6) > 0) {
      return 4294954433;
    }
  }
  CMTime time1 = v10;
  CMTime v6 = v8;
  if (CMTimeCompare(&time1, &v6) < 1) {
    return 0;
  }
  CMTime time1 = v10;
  CMTime v6 = *a2;
  if (CMTimeCompare(&time1, &v6) > 0) {
    return 0;
  }
  uint64_t result = 0;
  a2[1].unsigned int value = (CMTimeValue)a1;
  return result;
}

uint64_t fpfsi_CreateAndAddScanningModeFilterToBoss(uint64_t a1, UInt8 a2)
{
  CFTypeRef cf = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  uint64_t v5 = FigAlternateScanModePreferenceFilterCreate(AllocatorForMedia, a2, &cf);
  if (!v5) {
    uint64_t v5 = FigAlternateSelectionBossAddFilter(*(void *)(DerivedStorage + 40), cf);
  }
  uint64_t v6 = v5;
  if (cf) {
    CFRelease(cf);
  }
  return v6;
}

uint64_t fpfsi_UpdateValidAlternateListAndSuggestAnAlternate(uint64_t a1, const __CFArray *a2, void *a3)
{
  theArray[16] = *(CFArrayRef *)MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v6 = DerivedStorage;
  if (a2)
  {
    uint64_t v7 = *(const void **)(DerivedStorage + 1688);
    if (v7)
    {
      CFRelease(v7);
      *(void *)(v6 + 1688) = 0;
    }
    CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    *(void *)(v6 + 1688) = CFArrayCreateMutableCopy(AllocatorForMedia, 0, a2);
  }
  if (*(unsigned char *)(v6 + 49))
  {
    CFArrayRef v9 = *(const __CFArray **)(v6 + 1688);
    if (!v9)
    {
      uint64_t v11 = FigSignalErrorAt();
      goto LABEL_10;
    }
    if (CFArrayGetCount(v9) < 1)
    {
      uint64_t v11 = 4294954371;
      goto LABEL_10;
    }
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v6 + 1688), 0);
    *(unsigned char *)(v6 + 1736) = fpfs_audioOnlyValidAlternateList(v6);
    if (a3)
    {
      uint64_t v11 = 0;
      *a3 = ValueAtIndex;
      goto LABEL_10;
    }
  }
  else if (dword_1E9350BB0)
  {
    unsigned int v67 = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v11 = 0;
LABEL_10:
  theArray[0] = 0;
  if (!*(unsigned char *)(v6 + 552)) {
    return v11;
  }
  CFArrayRef v12 = *(const __CFArray **)(v6 + 1688);
  if (!v12 || CFArrayGetCount(v12) < 1) {
    return v11;
  }
  unsigned int v68 = -1;
  unsigned int v67 = -1;
  *(_DWORD *)CMTime type = -1;
  uint64_t v13 = *(void *)(v6 + 128);
  if (!v13) {
    goto LABEL_108;
  }
  uint64_t v14 = FigGetAllocatorForMedia();
  uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 8);
  uint64_t v16 = v15 ? v15 : 0;
  CFDateRef v17 = *(void (**)(uint64_t, __CFString *, uint64_t, CFArrayRef *))(v16 + 48);
  if (!v17) {
    goto LABEL_108;
  }
  unsigned int v55 = v11;
  v17(v13, @"FAFProperty_AlternateList", v14, theArray);
  CFArrayRef Count = theArray[0];
  if (!theArray[0]) {
    return v11;
  }
  uint64_t v63 = 0;
  uint64_t v64 = 0;
  uint64_t v58 = 0;
  uint64_t v59 = 0;
  uint64_t v19 = 0;
  uint64_t v60 = 0;
  uint64_t v61 = 0;
  uint64_t v65 = 0;
  CFMutableStringRef Mutable = 0;
  CFIndex v21 = 0;
  uint64_t v22 = 0xFFFFFFFFLL;
  uint64_t v56 = 0;
  uint64_t v57 = 0xFFFFFFFFLL;
  uint64_t v62 = 0xFFFFFFFFLL;
LABEL_20:
  CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
  while (v21 < (uint64_t)Count)
  {
    uint64_t v23 = CFArrayGetValueAtIndex(theArray[0], v21);
    int PeakBitRate = FigAlternateGetPeakBitRate((uint64_t)v23);
    AverageBitdouble Rate = FigAlternateGetAverageBitRate((uint64_t)v23);
    int HasVideo = FigAlternateHasVideo((uint64_t)v23);
    int HasAudio = FigAlternateHasAudio(v23);
    if (PeakBitRate < 1) {
      goto LABEL_74;
    }
    int v28 = HasAudio;
    if (!Mutable)
    {
      CFAllocatorRef v29 = (const __CFAllocator *)FigGetAllocatorForMedia();
      CFMutableStringRef Mutable = CFStringCreateMutable(v29, 0);
      if (!Mutable) {
        goto LABEL_74;
      }
    }
    if (CFStringGetLength(Mutable) >= 1) {
      CFStringAppend(Mutable, @", ");
    }
    unint64_t v30 = PeakBitRate / 0x3E8uLL;
    if (AverageBitRate < 1) {
      CFStringAppendFormat(Mutable, 0, @"%d", v30, v52);
    }
    else {
      CFStringAppendFormat(Mutable, 0, @"%d:%d", v30, AverageBitRate / 0x3E8uLL);
    }
    if (HasVideo && v28)
    {
      uint64_t v65 = (v65 + 1);
      if (v19 <= v30) {
        uint64_t v19 = v30;
      }
      else {
        uint64_t v19 = v19;
      }
      if (v22 >= v30) {
        uint64_t v22 = v30;
      }
      else {
        uint64_t v22 = v22;
      }
      if (AverageBitRate >= 1)
      {
        unsigned int v31 = AverageBitRate / 0x3E8u;
        if (v61 <= AverageBitRate / 0x3E8u) {
          uint64_t v32 = v31;
        }
        else {
          uint64_t v32 = v61;
        }
        uint64_t v61 = v32;
        char v33 = &v68;
        CFStringRef v34 = @":m";
        goto LABEL_67;
      }
      CFStringRef v34 = @":m";
LABEL_73:
      CFStringAppend(Mutable, v34);
      goto LABEL_74;
    }
    if (v28)
    {
      if (v63 <= v30) {
        uint64_t v35 = v30;
      }
      else {
        uint64_t v35 = v63;
      }
      uint64_t v63 = v35;
      uint64_t v64 = (v64 + 1);
      if (v62 >= v30) {
        uint64_t v36 = v30;
      }
      else {
        uint64_t v36 = v62;
      }
      uint64_t v62 = v36;
      if (AverageBitRate < 1)
      {
        CFStringRef v34 = @":a";
        goto LABEL_73;
      }
      unsigned int v31 = AverageBitRate / 0x3E8u;
      if (v60 <= AverageBitRate / 0x3E8u) {
        uint64_t v37 = v31;
      }
      else {
        uint64_t v37 = v60;
      }
      uint64_t v60 = v37;
      char v33 = (unsigned int *)type;
      CFStringRef v34 = @":a";
LABEL_67:
      if (*v33 < v31) {
        unsigned int v31 = *v33;
      }
      *char v33 = v31;
      goto LABEL_73;
    }
    if (HasVideo)
    {
      if (v58 <= v30) {
        uint64_t v38 = v30;
      }
      else {
        uint64_t v38 = v58;
      }
      uint64_t v58 = v38;
      uint64_t v59 = (v59 + 1);
      if (v57 >= v30) {
        uint64_t v39 = v30;
      }
      else {
        uint64_t v39 = v57;
      }
      uint64_t v57 = v39;
      if (AverageBitRate < 1)
      {
        CFStringRef v34 = @":v";
        goto LABEL_73;
      }
      unsigned int v31 = AverageBitRate / 0x3E8u;
      if (v56 <= AverageBitRate / 0x3E8u) {
        uint64_t v40 = v31;
      }
      else {
        uint64_t v40 = v56;
      }
      uint64_t v56 = v40;
      char v33 = &v67;
      CFStringRef v34 = @":v";
      goto LABEL_67;
    }
LABEL_74:
    ++v21;
    CFArrayRef Count = theArray[0];
    if (theArray[0]) {
      goto LABEL_20;
    }
  }
  int CFPreferenceNumberWithDefault = FigGetCFPreferenceNumberWithDefault();
  if (Mutable
    && CFStringGetLength(Mutable) > CFPreferenceNumberWithDefault
    && (CFRelease(Mutable),
        CFAllocatorRef v42 = (const __CFAllocator *)FigGetAllocatorForMedia(),
        CMTime v43 = CFStringCreateMutable(v42, 0),
        (CFMutableStringRef Mutable = v43) != 0))
  {
    CFStringAppend(v43, @"TOOBIG:");
    if (v65)
    {
      uint64_t v44 = v64;
      if (v68) {
        CFStringAppendFormat(Mutable, 0, @"m[%d]:%d:%d...%d:%d", v65, v22, v68, v19, v61);
      }
      else {
        CFStringAppendFormat(Mutable, 0, @"m[%d]:%d...%d", v65, v22, v19);
      }
      uint64_t v11 = v55;
      uint64_t v45 = v59;
      if (v59)
      {
        CFStringAppend(Mutable, @",");
LABEL_89:
        if (v67) {
          CFStringAppendFormat(Mutable, 0, @"v[%d]:%d:%d...%d:%d", v45, v57, v67, v58, v56);
        }
        else {
          CFStringAppendFormat(Mutable, 0, @"v[%d]:%d...%d", v45, v57, v58, v53, v54);
        }
        if (v44)
        {
          if (v65) {
LABEL_96:
          }
            CFStringAppend(Mutable, @",");
LABEL_97:
          if (*(_DWORD *)type) {
            CFStringAppendFormat(Mutable, 0, @"v[%d]:%d:%d...%d:%d", v44, v62, *(unsigned int *)type, v63, v60);
          }
          else {
            CFStringAppendFormat(Mutable, 0, @"v[%d]:%d...%d", v44, v62, v63, v53, v54);
          }
        }
      }
      else if (v64)
      {
        goto LABEL_96;
      }
    }
    else
    {
      uint64_t v11 = v55;
      uint64_t v44 = v64;
      uint64_t v45 = v59;
      if (v59) {
        goto LABEL_89;
      }
      if (v64) {
        goto LABEL_97;
      }
    }
  }
  else
  {
    uint64_t v11 = v55;
  }
  uint64_t v46 = *(void *)(v6 + 2544);
  if (v46)
  {
    uint64_t v47 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v48 = v47 ? v47 : 0;
    float v49 = *(void (**)(uint64_t, uint64_t, uint64_t, CFMutableStringRef, void))(v48 + 48);
    if (v49) {
      v49(v46, 0x1EE582B78, 0x1EE561FD8, Mutable, 0);
    }
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
LABEL_108:
  if (theArray[0]) {
    CFRelease(theArray[0]);
  }
  return v11;
}

BOOL fpfs_audioOnlyValidAlternateList(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 96);
  if (!v1) {
    return 0;
  }
  uint64_t v7 = 0;
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v5 = *(void (**)(uint64_t, __CFString *, void, uint64_t *))(v3 + 48);
  if (v5)
  {
    v5(v1, @"AfmfpbProperty_HasAudioOnlyAlternates", *MEMORY[0x1E4F1CF80], &v7);
    uint64_t v6 = v7;
  }
  else
  {
    uint64_t v6 = 0;
  }
  return v6 == *MEMORY[0x1E4F1CFD0];
}

double fpfs_GetCurrentPTSAscending(opaqueCMSampleBuffer *a1, CMTime *a2)
{
  memset(&v7, 0, sizeof(v7));
  CMSampleBufferGetOutputPresentationTimeStamp(&v7, a1);
  if (!fpfs_IsMarkerOnly(a1))
  {
    CMTime time1 = v7;
    CMTime v5 = *a2;
    if (CMTimeCompare(&time1, &v5) < 0 || (time1 = v7, CMTime v5 = *a2, !CMTimeCompare(&time1, &v5)))
    {
      double result = *(double *)&v7.value;
      a2[1] = v7;
    }
  }
  return result;
}

uint64_t fpfs_GetCurrentPTSDescending(opaqueCMSampleBuffer *a1, uint64_t a2)
{
  memset(&v9, 0, sizeof(v9));
  CMSampleBufferGetOutputPresentationTimeStamp(&v9, a1);
  if (fpfs_IsMarkerOnly(a1)) {
    return 0;
  }
  long long v5 = *(_OWORD *)&v9.value;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)&v9.value;
  CMTimeEpoch epoch = v9.epoch;
  *(void *)(a2 + 40) = v9.epoch;
  *(_OWORD *)&time1.unsigned int value = v5;
  time1.CMTimeEpoch epoch = epoch;
  CMTime v7 = *(CMTime *)a2;
  if (CMTimeCompare(&time1, &v7) <= 0) {
    return 4294954433;
  }
  else {
    return 0;
  }
}

uint64_t fpfs_SetAlternateWithContext(uint64_t a1, const void *a2, const void *a3, unsigned int a4, CMTime *a5, uint64_t a6, uint64_t a7, _DWORD *a8, uint64_t a9, unsigned int a10)
{
  int v15 = a10;
  uint64_t v165 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v17 = DerivedStorage;
  uint64_t v148 = 0;
  CFTypeRef v149 = 0;
  int v141 = *(_DWORD *)(DerivedStorage + 1096);
  CFTypeRef v146 = 0;
  CFTypeRef cf = 0;
  if (!*(void *)(DerivedStorage + 936))
  {
    uint64_t v47 = 0;
    uint64_t v40 = 0;
    goto LABEL_93;
  }
  fpfsi_SetSwitchReasonCode(DerivedStorage, a10);
  if (*(_DWORD *)(v17 + 2796) != *(_DWORD *)(v17 + 2792))
  {
    *(unsigned char *)(v17 + 2296) = 1;
    fpfsi_RTCReportingReportVariantSwitchComplete((uint64_t)a2, 1u);
  }
  uint64_t v18 = *(const void **)(v17 + 1760);
  if (v18)
  {
    if (!CFEqual(a3, v18))
    {
      uint64_t v19 = *(const void **)(v17 + 1760);
      if (v19)
      {
        CFRelease(v19);
        *(void *)(v17 + 1760) = 0;
      }
    }
  }
  uint64_t v20 = *(const void **)(v17 + 1768);
  if (v20 && v20 != a3)
  {
    fpfsi_RTCReportingReportTrialSwitchData((uint64_t)a2, 1);
    CFIndex v21 = *(const void **)(v17 + 1768);
    if (v21)
    {
      CFRelease(v21);
      *(void *)(v17 + 1768) = 0;
    }
    fpfsi_setPlaybackRateMonitorProperty(v17, @"AfmfpbProperty_TrialAlternate", 0);
  }
  unsigned int v140 = a4;
  unsigned int v22 = (a4 >> 2) & 1;
  if (!v22)
  {
    uint64_t v23 = *(const void **)(v17 + 1704);
    if (v23)
    {
      if (v23 != a3) {
        fpfs_CreateAccessLogEntryWithUnlock((uint64_t)a2, (CFMutableDictionaryRef *)&cf);
      }
    }
  }
  int IsIFrameOnly = FigAlternateIsIFrameOnly((uint64_t)a3);
  if (fpfs_IsClosedCaptioningSelected(v17, 0))
  {
    v164[0].unsigned int value = 0;
    CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(v17 + 1792));
    CFArrayRef MutableCopy = CFArrayCreateMutableCopy(AllocatorForMedia, Count, *(CFArrayRef *)(v17 + 1792));
    if (MutableCopy)
    {
      uint64_t CFStringForOSTypeValue = FigGetCFStringForOSTypeValue();
      fpfs_FindMediaTypeInMediaArray(MutableCopy, CFStringForOSTypeValue, &v164[0].value);
      CFArrayRemoveValueAtIndex(MutableCopy, v164[0].value);
      CFAllocatorRef v29 = *(const void **)(v17 + 1800);
      if (v29) {
        CFArrayAppendValue(MutableCopy, v29);
      }
    }
    CFTypeRef v143 = MutableCopy;
    if (!IsIFrameOnly) {
      goto LABEL_27;
    }
LABEL_25:
    uint64_t IsAudioOnly = 0;
    goto LABEL_28;
  }
  unint64_t v30 = *(const void **)(v17 + 1792);
  if (v30)
  {
    CFTypeRef v143 = CFRetain(v30);
    if (IsIFrameOnly) {
      goto LABEL_25;
    }
  }
  else
  {
    CFTypeRef v143 = 0;
    if (IsIFrameOnly) {
      goto LABEL_25;
    }
  }
LABEL_27:
  uint64_t IsAudioOnly = FigAlternateIsAudioOnly((uint64_t)a3);
LABEL_28:
  if (*MEMORY[0x1E4F1EBA8] == 1)
  {
    FigAlternateGetPeakBitRate((uint64_t)a3);
    if (!FigAlternateGetAverageBitRate((uint64_t)a3)) {
      FigAlternateGetPeakBitRate((uint64_t)a3);
    }
    kdebug_trace();
  }
  if (*(unsigned char *)(a6 + 12))
  {
    v164[0] = *(CMTime *)a6;
    uint64_t v32 = CMBaseObjectGetDerivedStorage();
    unsigned int v33 = FigStreamAlternateSubstreamURLsMatchBetweenVariants(*(void *)(v32 + 1704), (uint64_t)a3, *(const __CFArray **)(v32 + 1792), 1) == 0;
    if (!FigStreamAlternateSubstreamURLsMatchBetweenVariants(*(void *)(v32 + 1704), (uint64_t)a3, *(const __CFArray **)(v32 + 1792), 2))v33 |= 2u; {
    if (FigStreamAlternateSubstreamURLsMatchBetweenVariants(*(void *)(v32 + 1704), (uint64_t)a3, *(const __CFArray **)(v32 + 1792), 4))uint64_t v34 = v33;
    }
    else {
      uint64_t v34 = v33 | 4;
    }
    int v15 = a10;
    fpfs_GetItemBufferedDuration(a2, a6, a7, v34);
    CMTime lhs = v164[0];
    CMTime rhs = *(CMTime *)a6;
    CMTimeSubtract(&time, &lhs, &rhs);
    CMTimeAbsoluteValue(&lhs, &time);
    CMTimeMake(&rhs, 50, 1000);
    CMTimeCompare(&lhs, &rhs);
  }
  uint64_t v35 = *(const void **)(v17 + 504);
  if (v35)
  {
    CFRelease(v35);
    *(void *)(v17 + 504) = 0;
  }
  uint64_t v36 = *(void *)(v17 + 936);
  CMTime time = *a5;
  CMTime rhs = *(CMTime *)a6;
  uint64_t v37 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v37) {
    uint64_t v38 = v37;
  }
  else {
    uint64_t v38 = 0;
  }
  uint64_t v39 = *(uint64_t (**)(uint64_t, const void *, CFTypeRef, uint64_t, uint64_t, void, CMTime *, CMTime *, uint64_t, char *, uint64_t *, uint64_t))(v38 + 32);
  if (!v39)
  {
    uint64_t v47 = 4294954514;
    uint64_t v40 = v143;
LABEL_92:
    *(_DWORD *)(v17 + 2292) = 0;
    goto LABEL_93;
  }
  v164[0] = time;
  CMTime lhs = rhs;
  uint64_t v40 = v143;
  uint64_t v41 = v39(v36, a3, v143, a9, IsAudioOnly, v140, v164, &lhs, a7, (char *)&v148 + 4, &v148, v17 + 12 * v22 + 952);
  if (v41)
  {
    uint64_t v47 = v41;
    goto LABEL_92;
  }
  uint64_t v42 = CMBaseObjectGetDerivedStorage();
  v164[0].unsigned int value = 0;
  uint64_t v43 = *(void *)(v42 + 1704);
  if (v43
    && !FigAlternateIsIFrameOnly(v43)
    && !FigAlternateSelectionBossHasFilter(*(void *)(v42 + 40), @"VideoLayoutPinning"))
  {
    VideoLayoutTags = FigAlternateGetVideoLayoutTags(*(__CFArray **)(v42 + 1704));
    VideoLayoutLoggingStringFromCollectionArray = FigAlternateCreateVideoLayoutLoggingStringFromCollectionArray(VideoLayoutTags);
    if (VideoLayoutLoggingStringFromCollectionArray) {
      CFRelease(VideoLayoutLoggingStringFromCollectionArray);
    }
    uint64_t v46 = FigGetAllocatorForMedia();
    uint64_t v47 = FigAlternateVideoLayoutPinningFilterCreate(v46, VideoLayoutTags, v164);
    unsigned int value = (const void *)v164[0].value;
    if (!v47)
    {
      FigAlternateSelectionBossAddFilter(*(void *)(v42 + 40), (const void *)v164[0].value);
      unsigned int value = (const void *)v164[0].value;
    }
    if (value) {
      CFRelease(value);
    }
    if (v47) {
      goto LABEL_92;
    }
  }
  uint64_t v49 = *(void *)(v17 + 120);
  if (v49)
  {
    uint64_t v50 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v50) {
      uint64_t v51 = v50;
    }
    else {
      uint64_t v51 = 0;
    }
    uint64_t v52 = *(uint64_t (**)(uint64_t, __CFString *, const void *))(v51 + 56);
    if (v52)
    {
      uint64_t v53 = v52(v49, @"AlternateFilterMonitorProperty_SelectedAlternate", a3);
      if (v53) {
        goto LABEL_225;
      }
      uint64_t v54 = *(void *)(v17 + 120);
      uint64_t v55 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v55) {
        uint64_t v56 = v55;
      }
      else {
        uint64_t v56 = 0;
      }
      uint64_t v57 = *(uint64_t (**)(uint64_t, __CFString *, CFTypeRef))(v56 + 56);
      if (v57)
      {
        uint64_t v53 = v57(v54, @"AlternateFilterMonitorProperty_SelectedMediaArray", v143);
        if (!v53) {
          goto LABEL_68;
        }
LABEL_225:
        uint64_t v47 = v53;
        goto LABEL_92;
      }
    }
LABEL_91:
    uint64_t v47 = 4294954514;
    goto LABEL_92;
  }
LABEL_68:
  if (!a3 || !FigAlternateGetLastKnownValueForIsFullyCached()) {
    goto LABEL_75;
  }
  uint64_t FigBaseObject = FigBytePumpGetFigBaseObject(*(void *)(v17 + 936));
  uint64_t v59 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v59) {
    uint64_t v60 = v59;
  }
  else {
    uint64_t v60 = 0;
  }
  uint64_t v61 = *(uint64_t (**)(uint64_t, uint64_t, void))(v60 + 56);
  if (!v61) {
    goto LABEL_91;
  }
  uint64_t v53 = v61(FigBaseObject, 0x1EE53ECB8, *MEMORY[0x1E4F1CFC8]);
  if (v53) {
    goto LABEL_225;
  }
LABEL_75:
  int v62 = (v140 >> 3) & 1;
  if (v62)
  {
    uint64_t v63 = *(const void **)(v17 + 1768);
    if (v63)
    {
      CFRelease(v63);
      *(void *)(v17 + 1768) = 0;
    }
    HIDWORD(v148) = *(_DWORD *)(v17 + 1776) | *(_DWORD *)(v17 + 1096);
  }
  if (!v22 && cf) {
    fpfs_CommitAccessLogEntry(a2, (__CFDictionary *)cf);
  }
  if (a8) {
    *a8 = v148;
  }
  if (*(void *)(v17 + 1704))
  {
    if (!v22)
    {
LABEL_86:
      if (!FigCFEqual())
      {
        fpfsi_copyPlayableTime((uint64_t)a2, &v149);
        CFAllocatorRef v75 = (const __CFAllocator *)FigGetAllocatorForMedia();
        fpfs_GetTime(v17, (uint64_t)&v145);
        FigMetricItemVariantChangeStartEventCreate(v75, &v145, 0, *(const void **)(v17 + 2536), a3, *(const void **)(v17 + 1704), v149, &v146);
        uint64_t v76 = *(void *)(v17 + 3376);
        CFTypeRef v77 = v146;
        uint64_t v78 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v79 = v78 ? v78 : 0;
        uint64_t v138 = *(void (**)(uint64_t, const void *, CFTypeRef))(v79 + 40);
        if (v138) {
          v138(v76, a2, v77);
        }
      }
      fpfs_ReportVariantSwitchStart((uint64_t)a2, (uint64_t)a3, v15, 0, v62);
      unsigned int v64 = HIDWORD(v148);
      uint64_t v65 = CMBaseObjectGetDerivedStorage();
      uint64_t v66 = v65;
      int v67 = (v64 & 3) - 1;
      if (v67 <= 2)
      {
        uint64_t v68 = qword_194993160[v67];
        uint64_t v69 = qword_194993178[v67];
        *(void *)(v65 + 1104) = v68;
        *(void *)(v65 + 1112) = v69;
      }
      if ((v64 & 4) != 0)
      {
        int v70 = !fpfs_IsClosedCaptioningSelected(v65, 0)
           && (CFArrayRef v80 = *(const __CFArray **)(v66 + 1792),
               uint64_t v81 = FigGetCFStringForOSTypeValue(),
               (CFDictionaryRef MediaTypeInMediaArray = fpfs_FindMediaTypeInMediaArray(v80, v81, 0)) != 0)
           && CFDictionaryGetValue(MediaTypeInMediaArray, @"MediaSelectionOptionsDisplaysNonForcedSubtitles") == (const void *)*MEMORY[0x1E4F1CFD0];
        ++*(void *)(v66 + 1104);
      }
      else
      {
        int v70 = 0;
      }
      fpfsi_setNonForcedSubtitlesEnabled(a2, v70);
      fpfsi_setPlaybackRateMonitorProperty(v66, @"AfmfpbProperty_CurrentAlternate", (uint64_t)a3);
      int v89 = *(const void **)(v66 + 2848);
      int v90 = *(const void **)(v66 + 1704);
      *(void *)(v66 + 2848) = v90;
      if (v90) {
        CFRetain(v90);
      }
      if (v89) {
        CFRelease(v89);
      }
      uint64_t v91 = *(const void **)(v66 + 1704);
      *(void *)(v66 + 1704) = a3;
      if (a3) {
        CFRetain(a3);
      }
      if (v91) {
        CFRelease(v91);
      }
      NotificationPayloadForProperties = fpfs_CreateNotificationPayloadForProperties(*(const void **)v66, (uint64_t)a2, v83, v84, v85, v86, v87, v88, @"SupportsFrameStepping", @"CanPlayFastForward");
      fpfs_EnqueueNotification(*(const void **)v66, @"AlternateStreamChanged", a2, NotificationPayloadForProperties);
      if (NotificationPayloadForProperties) {
        CFRelease(NotificationPayloadForProperties);
      }
      uint64_t v93 = 0;
      *(_DWORD *)(v66 + 1096) = v64;
      int v94 = *(unsigned __int8 *)(v66 + 553);
      while (1)
      {
        int v95 = *(unsigned __int8 *)(v66 + v93 + 471);
        if (v94)
        {
          if (!*(unsigned char *)(v66 + v93 + 471)) {
            goto LABEL_140;
          }
          if (!*(void *)(v66 + 1768)) {
            goto LABEL_138;
          }
          int v95 = *(unsigned __int8 *)(v66 + v93 + 474);
        }
        if (v95)
        {
LABEL_138:
          if (((v64 >> v93) & 1) == 0) {
            ++*(void *)(v66 + 1104);
          }
        }
LABEL_140:
        if (++v93 == 3)
        {
          char v96 = v148;
          *(_DWORD *)(v17 + 2820) = v148;
          if ((v96 & 7) == 0)
          {
            uint64_t v47 = 0;
            goto LABEL_93;
          }
          uint64_t v97 = 0;
          while (1)
          {
            int v98 = 1 << v97;
            if ((v148 & (1 << v97)) != 0) {
              break;
            }
LABEL_217:
            if (++v97 == 3)
            {
              uint64_t v47 = 0;
              uint64_t v40 = v143;
              goto LABEL_93;
            }
          }
          int v99 = v98 & v141;
          if ((v98 & v141) != 0)
          {
            if ((HIDWORD(v148) & v98) != 0)
            {
              if (dword_1E9350BB0)
              {
                LODWORD(time.value) = 0;
                LOBYTE(rhs.value) = 0;
                os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                unsigned int v101 = time.value;
                if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, rhs.value)) {
                  unsigned int v102 = v101;
                }
                else {
                  unsigned int v102 = v101 & 0xFFFFFFFE;
                }
                if (v102)
                {
                  if (a1)
                  {
                    __int16 v103 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
                    if (a2) {
                      goto LABEL_153;
                    }
LABEL_173:
                    uint64_t v104 = "";
                  }
                  else
                  {
                    __int16 v103 = "";
                    if (!a2) {
                      goto LABEL_173;
                    }
LABEL_153:
                    uint64_t v104 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
                  }
                  LODWORD(lhs.value) = 136316418;
                  *(CMTimeValue *)((char *)&lhs.value + 4) = (CMTimeValue)"fpfs_SetAlternateWithContext";
                  LOWORD(lhs.flags) = 2048;
                  *(void *)((char *)&lhs.flags + 2) = a1;
                  HIWORD(lhs.epoch) = 2082;
                  CMTimeEpoch v153 = v103;
                  __int16 v154 = 2048;
                  float v155 = a2;
                  __int16 v156 = 2082;
                  unsigned int v157 = v104;
                  __int16 v158 = 1024;
                  int v159 = v97;
                  _os_log_send_and_compose_impl();
                }
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              *(unsigned char *)(v17 + 471 + v97) = 0;
              uint64_t v115 = CMBaseObjectGetDerivedStorage();
              if (*(unsigned char *)(v115 + 470)) {
                *(unsigned char *)(v115 + 470) = 0;
              }
LABEL_190:
              if (*(void *)(v17 + 16 * v97 + 1000))
              {
                fpfs_WeakStreamEnd(v17, v97, 0);
                StoreCurrentManifold(v17, v97, 0, 0);
              }
              if (!v99) {
                goto LABEL_217;
              }
              fpfs_DeleteStrandedTracksUponSwitch((uint64_t)a2, v97, 0);
              uint64_t v119 = CMBaseObjectGetDerivedStorage();
              uint64_t v120 = *(void *)(v119 + 1048);
              if (!v120) {
                goto LABEL_217;
              }
              int v121 = (uint64_t *)v119;
              uint64_t v122 = v119 + 8 * v97;
              int v123 = (void *)(v122 + 1128);
              uint64_t v124 = *(void *)(v122 + 1128);
              int v125 = (void *)(v122 + 1152);
              CMTimeFlags v126 = (void *)(v119 + 16 * v97 + 1008);
              uint64_t v127 = v124;
              do
              {
                if (*(unsigned __int8 *)(v120 + 180) == v97)
                {
                  uint64_t v128 = *(void *)(v120 + 48);
                  BOOL v129 = v128 == *v126;
                  if (v128 == *v126) {
                    char v130 = v125;
                  }
                  else {
                    char v130 = v123;
                  }
                  if (!v129) {
                    uint64_t v127 = *(void *)(v120 + 64);
                  }
                  *char v130 = *(void *)(v120 + 64);
                }
                uint64_t v120 = *(void *)(v120 + 8);
              }
              while (v120);
              if (v127 == v124 || !dword_1E9350BB0) {
                goto LABEL_217;
              }
              LODWORD(time.value) = 0;
              LOBYTE(rhs.value) = 0;
              Float64 v131 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              unsigned int v132 = time.value;
              if (os_log_type_enabled(v131, rhs.value)) {
                unsigned int v133 = v132;
              }
              else {
                unsigned int v133 = v132 & 0xFFFFFFFE;
              }
              if (v133)
              {
                uint64_t v134 = *v121;
                if (v134)
                {
                  Float64 v135 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
                  if (a2) {
                    goto LABEL_211;
                  }
LABEL_214:
                  uint64_t v136 = "";
                }
                else
                {
                  Float64 v135 = "";
                  if (!a2) {
                    goto LABEL_214;
                  }
LABEL_211:
                  uint64_t v136 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
                }
                uint64_t v137 = *v123;
                LODWORD(lhs.value) = 136316930;
                *(CMTimeValue *)((char *)&lhs.value + 4) = (CMTimeValue)"fpfsi_UpdateCurrentDiscontinuityDomainBasedOnTracklist";
                LOWORD(lhs.flags) = 2048;
                *(void *)((char *)&lhs.flags + 2) = v134;
                HIWORD(lhs.epoch) = 2082;
                CMTimeEpoch v153 = v135;
                __int16 v154 = 2048;
                float v155 = a2;
                __int16 v156 = 2082;
                unsigned int v157 = v136;
                __int16 v158 = 1024;
                int v159 = v97;
                __int16 v160 = 2048;
                uint64_t v161 = v124;
                __int16 v162 = 2048;
                uint64_t v163 = v137;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              goto LABEL_217;
            }
            if (!dword_1E9350BB0) {
              goto LABEL_190;
            }
            LODWORD(time.value) = 0;
            LOBYTE(rhs.value) = 0;
            int v110 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int v111 = time.value;
            if (os_log_type_enabled(v110, rhs.value)) {
              unsigned int v112 = v111;
            }
            else {
              unsigned int v112 = v111 & 0xFFFFFFFE;
            }
            if (v112)
            {
              if (a1)
              {
                long long v113 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
                if (a2) {
                  goto LABEL_169;
                }
LABEL_187:
                CMTime v114 = "";
              }
              else
              {
                long long v113 = "";
                if (!a2) {
                  goto LABEL_187;
                }
LABEL_169:
                CMTime v114 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
              }
              LODWORD(lhs.value) = 136316418;
              *(CMTimeValue *)((char *)&lhs.value + 4) = (CMTimeValue)"fpfs_SetAlternateWithContext";
              LOWORD(lhs.flags) = 2048;
              *(void *)((char *)&lhs.flags + 2) = a1;
              HIWORD(lhs.epoch) = 2082;
              CMTimeEpoch v153 = v113;
              __int16 v154 = 2048;
              float v155 = a2;
              __int16 v156 = 2082;
              unsigned int v157 = v114;
              __int16 v158 = 1024;
              int v159 = v97;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            goto LABEL_190;
          }
          if (dword_1E9350BB0)
          {
            LODWORD(time.value) = 0;
            LOBYTE(rhs.value) = 0;
            __int16 v105 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int v106 = time.value;
            if (os_log_type_enabled(v105, rhs.value)) {
              unsigned int v107 = v106;
            }
            else {
              unsigned int v107 = v106 & 0xFFFFFFFE;
            }
            if (v107)
            {
              if (a1)
              {
                double v108 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
                if (a2) {
                  goto LABEL_161;
                }
LABEL_179:
                __int16 v109 = "";
              }
              else
              {
                double v108 = "";
                if (!a2) {
                  goto LABEL_179;
                }
LABEL_161:
                __int16 v109 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
              }
              LODWORD(lhs.value) = 136316418;
              *(CMTimeValue *)((char *)&lhs.value + 4) = (CMTimeValue)"fpfs_SetAlternateWithContext";
              LOWORD(lhs.flags) = 2048;
              *(void *)((char *)&lhs.flags + 2) = a1;
              HIWORD(lhs.epoch) = 2082;
              CMTimeEpoch v153 = v108;
              __int16 v154 = 2048;
              float v155 = a2;
              __int16 v156 = 2082;
              unsigned int v157 = v109;
              __int16 v158 = 1024;
              int v159 = v97;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          uint64_t v116 = v17 + 24 * v97;
          uint64_t v117 = MEMORY[0x1E4F1F9F8];
          *(_OWORD *)(v116 + 248) = *MEMORY[0x1E4F1F9F8];
          *(void *)(v116 + 264) = *(void *)(v117 + 16);
          uint64_t v118 = CMBaseObjectGetDerivedStorage();
          if (*(unsigned char *)(v118 + 470)) {
            *(unsigned char *)(v118 + 470) = 0;
          }
          *(void *)(v17 + 1128 + 8 * v97) = *(void *)(v17 + 1128 + 8 * *(void *)(v17 + 1112));
          goto LABEL_190;
        }
      }
    }
  }
  else
  {
    uint64_t v73 = *(void *)(v17 + 96);
    if (v73)
    {
      *(_OWORD *)&v164[0].unsigned int value = *MEMORY[0x1E4F1DB30];
      FigAlternatePlaybackBitrateMonitorGetMaxResolutionAndBitrate(*(double *)&v164[0].value, *(double *)&v164[0].timescale, v73, (double *)&v164[0].value, (int *)(v17 + 2876), 0);
    }
    fpfs_DetermineRanksOfVariant(v17, (uint64_t)a3, (int *)(v17 + 1752), (_DWORD *)(v17 + 1756));
    *(_DWORD *)(v17 + 2800) = *(_DWORD *)(v17 + 1752);
    *(_DWORD *)(v17 + 2828) = *(_DWORD *)(v17 + 1756);
    *(_DWORD *)(v17 + 2836) = FigAlternateGetVideoQualityIndex((uint64_t)a3);
    *(_DWORD *)(v17 + 2804) = *(_DWORD *)(v17 + 1752);
    *(_DWORD *)(v17 + 2832) = *(_DWORD *)(v17 + 1756);
    *(_DWORD *)(v17 + 2840) = FigAlternateGetVideoQualityIndex((uint64_t)a3);
    *(_DWORD *)(v17 + 2860) = *(_DWORD *)(v17 + 1752);
    *(_DWORD *)(v17 + 2864) = FigAlternateGetAverageBitRate((uint64_t)a3);
    fpfsi_RTCReportingUpdateInitialVariantRank(v17);
    if (!v22) {
      goto LABEL_86;
    }
  }
  Float64 v74 = *(const void **)(v17 + 1768);
  *(void *)(v17 + 1768) = a3;
  if (a3) {
    CFRetain(a3);
  }
  if (v74) {
    CFRelease(v74);
  }
  *(_DWORD *)(v17 + 1776) = v148;
  fpfs_ReportVariantSwitchStart((uint64_t)a2, (uint64_t)a3, v15, 1, 0);
  fpfsi_setPlaybackRateMonitorProperty(v17, @"AfmfpbProperty_TrialAlternate", (uint64_t)a3);
  uint64_t v47 = 0;
  *(_DWORD *)(v17 + 2820) = v148;
LABEL_93:
  int isExternalVideoOutput = fpfs_isExternalVideoOutput();
  if (v47 == -16835 && isExternalVideoOutput) {
    uint64_t v47 = FigSignalErrorAt();
  }
  if (v40) {
    CFRelease(v40);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v149) {
    CFRelease(v149);
  }
  if (v146) {
    CFRelease(v146);
  }
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
  return v47;
}

uint64_t fpfsi_RTCReportingReportTrialSwitchData(uint64_t a1, int a2)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = result;
  if (!a2 && *(uint64_t *)(result + 2632) > 0)
  {
    uint64_t result = FigGetUpTimeNanoseconds();
    uint64_t v5 = *(void *)(v4 + 2544);
    if (v5)
    {
      uint64_t v6 = result;
      uint64_t v7 = *(void *)(v4 + 2632);
      uint64_t VTable = CMBaseObjectGetVTable();
      uint64_t v10 = *(void *)(VTable + 16);
      uint64_t result = VTable + 16;
      uint64_t v9 = v10;
      uint64_t v11 = v10 ? v9 : 0;
      CFArrayRef v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t, void))(v11 + 56);
      if (v12) {
        uint64_t result = v12(v5, 0x1EE582B78, 0x1EE5613D8, (v6 - v7) / 0xF4240uLL, 0);
      }
    }
  }
  *(void *)(v4 + 2632) = 0;
  uint64_t v13 = *(void *)(v4 + 2544);
  if (v13)
  {
    uint64_t v14 = CMBaseObjectGetVTable();
    uint64_t v16 = *(void *)(v14 + 16);
    uint64_t result = v14 + 16;
    uint64_t v15 = v16;
    uint64_t v17 = v16 ? v15 : 0;
    uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 32);
    if (v18) {
      uint64_t result = v18(v13, 0x1EE582B78, 0x1EE5613F8, 1);
    }
  }
  if (a2)
  {
    uint64_t v19 = *(void *)(v4 + 2544);
    if (v19)
    {
      uint64_t v20 = CMBaseObjectGetVTable();
      uint64_t v22 = *(void *)(v20 + 16);
      uint64_t result = v20 + 16;
      uint64_t v21 = v22;
      uint64_t v23 = v22 ? v21 : 0;
      uint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 32);
      if (v24)
      {
        return v24(v19, 0x1EE582B78, 0x1EE561418, 1);
      }
    }
  }
  return result;
}

uint64_t FigBytePumpSetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  FigBytePumpGetFigBaseObject(a1);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 56);
  if (!v9) {
    return 4294954514;
  }

  return v9(v6, a2, a3);
}

uint64_t fpfs_DetermineRanksOfVariant(uint64_t a1, uint64_t a2, int *a3, _DWORD *a4)
{
  if (!a2)
  {
    uint64_t result = 0;
LABEL_6:
    int AlternateRank = -1;
    if (!a3) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t result = *(void *)(a1 + 96);
  if (!result) {
    goto LABEL_6;
  }
  int AlternateRank = FigAlternatePlaybackBitrateMonitorGetAlternateRank(result, a2);
  uint64_t result = FigAlternateGetVariantBitrateRank(a2, *(_DWORD *)(a1 + 2876));
  if (a3) {
LABEL_7:
  }
    *a3 = AlternateRank;
LABEL_8:
  if (a4) {
    *a4 = result;
  }
  return result;
}

uint64_t fpfs_ReportVariantSwitchStart(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v57 = 0;
  int v58 = -1;
  int PeakBitRate = FigAlternateGetPeakBitRate(*(void *)(DerivedStorage + 1704));
  int v12 = FigAlternateGetPeakBitRate(a2);
  DescriptionString = (const void *)FigAlternateCreateDescriptionString(*(void *)(DerivedStorage + 1704));
  uint64_t v14 = (const void *)FigAlternateCreateDescriptionString(a2);
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  uint64_t v16 = "completing";
  int v56 = a5;
  if (!a5) {
    uint64_t v16 = "starting";
  }
  uint64_t v17 = " trial";
  if (!a4) {
    uint64_t v17 = "";
  }
  uint64_t v18 = "down";
  if (v12 > PeakBitRate) {
    uint64_t v18 = "up";
  }
  CFStringRef v19 = CFStringCreateWithFormat(AllocatorForMedia, 0, @"[%p]: <%p>: (%d): %s%s switch %s from [%@] to [%@]", *(void *)DerivedStorage, a1, *(void *)(DerivedStorage + 160), v16, v17, v18, DescriptionString, v14);
  if (*(_DWORD *)(CMBaseObjectGetDerivedStorage() + 808) == 1 || *(unsigned char *)(DerivedStorage + 1736))
  {
    if (!dword_1E9350BB0) {
      goto LABEL_13;
    }
  }
  else if (!dword_1E9350BB0)
  {
    goto LABEL_13;
  }
  int v60 = 0;
  os_log_type_t type = OS_LOG_TYPE_DEFAULT;
  os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_13:
  if (DescriptionString) {
    CFRelease(DescriptionString);
  }
  if (v14) {
    CFRelease(v14);
  }
  if (v19) {
    CFRelease(v19);
  }
  uint64_t v21 = CMBaseObjectGetDerivedStorage();
  if (v21)
  {
    uint64_t v22 = v21;
    uint64_t v23 = *(void *)(v21 + 96);
    if (v23)
    {
      int v61 = 0;
      *(_OWORD *)int v62 = 0uLL;
      FigAlternatePlaybackBitrateMonitorGetMaxResolutionAndBitrate(*(double *)(v22 + 2552), *(double *)(v22 + 2560), v23, v62, (int *)(v22 + 2876), &v61);
      if (v62[0] == 0.0 || v62[1] == 0.0)
      {
LABEL_41:
        uint64_t v40 = *(void *)(v22 + 2544);
        if (v40)
        {
          uint64_t v41 = *(int *)(v22 + 2876);
          uint64_t v42 = *(void *)(CMBaseObjectGetVTable() + 16);
          uint64_t v43 = v42 ? v42 : 0;
          uint64_t v44 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v43 + 56);
          if (v44) {
            v44(v40, 0x1EE582B78, 0x1EE561F78, v41, 0);
          }
        }
        goto LABEL_47;
      }
      *(_OWORD *)(v22 + 2552) = *(_OWORD *)v62;
      uint64_t v24 = *(void *)(v22 + 2544);
      if (v24)
      {
        uint64_t v25 = a1;
        uint64_t v26 = v61;
        uint64_t v27 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v27) {
          uint64_t v28 = v27;
        }
        else {
          uint64_t v28 = 0;
        }
        CFAllocatorRef v29 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v28 + 56);
        if (v29) {
          v29(v24, 0x1EE582B78, 0x1EE561F38, v26, 0);
        }
        uint64_t v30 = *(void *)(v22 + 2544);
        a1 = v25;
        if (v30)
        {
          double v31 = *(double *)(v22 + 2552);
          uint64_t v32 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v32) {
            uint64_t v33 = v32;
          }
          else {
            uint64_t v33 = 0;
          }
          uint64_t v34 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v33 + 56);
          if (v34) {
            v34(v30, 0x1EE582B78, 0x1EE561EF8, (uint64_t)v31, 0);
          }
          uint64_t v35 = *(void *)(v22 + 2544);
          if (v35)
          {
            double v36 = *(double *)(v22 + 2560);
            uint64_t v37 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v37) {
              uint64_t v38 = v37;
            }
            else {
              uint64_t v38 = 0;
            }
            uint64_t v39 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v38 + 56);
            if (v39) {
              v39(v35, 0x1EE582B78, 0x1EE561F18, (uint64_t)v36, 0);
            }
            goto LABEL_41;
          }
        }
      }
    }
  }
LABEL_47:
  uint64_t v45 = *(void *)(DerivedStorage + 1704);
  if (v45) {
    uint64_t HDCPLevel = (int)FigAlternateGetHDCPLevel(v45);
  }
  else {
    uint64_t HDCPLevel = -2;
  }
  uint64_t v47 = *(void *)(DerivedStorage + 2544);
  if (v47)
  {
    uint64_t v48 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v49 = v48 ? v48 : 0;
    uint64_t v50 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v49 + 56);
    if (v50) {
      v50(v47, 0x1EE582B78, 0x1EE5615F8, HDCPLevel, 0);
    }
  }
  fpfs_DetermineRanksOfVariant(DerivedStorage, a2, &v58, &v57);
  if (a4)
  {
    *(void *)(DerivedStorage + 2632) = FigGetUpTimeNanoseconds();
  }
  else
  {
    *(_DWORD *)(DerivedStorage + 1752) = v58;
    *(_DWORD *)(DerivedStorage + 1756) = v57;
  }
  if (v56) {
    fpfsi_RTCReportingReportTrialSwitchData(a1, 0);
  }
  uint64_t result = FigAlternateIsIFrameOnly(a2);
  if (!result)
  {
    BOOL v52 = (a3 & 0xFFFFFFFE) == 2 || a3 == 16;
    BOOL v53 = v52 || (a3 & 0xFFFFFFF7) == 7;
    if (v53 && v58 != -1)
    {
      if (*(void *)(DerivedStorage + 2632))
      {
        if (a4)
        {
LABEL_73:
          *(_DWORD *)(DerivedStorage + 2804) = v58;
          *(_DWORD *)(DerivedStorage + 2832) = v57;
          *(_DWORD *)(DerivedStorage + 2840) = FigAlternateGetVideoQualityIndex(a2);
          uint64_t v54 = *(void *)(DerivedStorage + 2672);
          uint64_t v55 = *(void *)(DerivedStorage + 2632);
          if (v54)
          {
            if (v55 - v54 <= 0x2540BE3FFLL && *(_DWORD *)(DerivedStorage + 2844) != a3) {
              *(unsigned char *)(DerivedStorage + 2816) = 1;
            }
          }
          else
          {
            *(void *)(DerivedStorage + 2672) = v55;
          }
          *(_DWORD *)(DerivedStorage + 2844) = a3;
          uint64_t result = FigAlternateGetPeakBitRate(*(void *)(DerivedStorage + 1704));
          *(double *)(DerivedStorage + 2784) = (double)(int)result;
          return result;
        }
      }
      else
      {
        *(void *)(DerivedStorage + 2632) = FigGetUpTimeNanoseconds();
        if (a4) {
          goto LABEL_73;
        }
      }
      ++*(_DWORD *)(DerivedStorage + 2792);
      goto LABEL_73;
    }
  }
  return result;
}

uint64_t GetCurrentManifold(uint64_t a1, unsigned int a2, unsigned int a3)
{
  if (a2 < 3) {
    return *(void *)(a1 + 16 * a2 + 8 * a3 + 1000);
  }
  FigSignalErrorAt();
  return -1;
}

uint64_t fpfs_WeakStreamEnd(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3 = result;
  if (a2 < 3)
  {
    uint64_t v4 = *(void *)(result + 16 * a2 + 8 * a3 + 1000);
    if (!v4) {
      return result;
    }
  }
  else
  {
    FigSignalErrorAt();
    uint64_t v4 = -1;
  }
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(void (**)(uint64_t))(v6 + 40);
  if (v7) {
    v7(v4);
  }
  uint64_t result = *(void *)(v3 + 1048);
  if (result)
  {
    do
    {
      uint64_t v8 = *(void *)(result + 8);
      if (*(void *)(result + 48) == v4) {
        uint64_t result = fpfs_StopFeedingTrack(result, 0, 1);
      }
      if (!v8) {
        break;
      }
      uint64_t result = v8;
    }
    while (*(void *)(v3 + 1048));
  }
  return result;
}

void StoreCurrentManifold(uint64_t a1, unsigned int a2, unsigned int a3, const void *a4)
{
  CFTypeRef cf = 0;
  if (a2 >= 3)
  {
    FigSignalErrorAt();
  }
  else
  {
    if (fpfsi_CopyPlayerAndItemFromItemRetainProxy(*(void *)(a1 + 16), 0, &cf))
    {
      CFTypeRef v10 = cf;
      if (!cf) {
        return;
      }
      goto LABEL_13;
    }
    uint64_t v8 = (const void **)(a1 + 16 * a2 + 8 * a3 + 1000);
    if (*v8)
    {
      FigStopForwardingMediaServicesProcessDeathNotification();
      uint64_t v9 = *v8;
    }
    else
    {
      uint64_t v9 = 0;
    }
    *uint64_t v8 = a4;
    if (a4) {
      CFRetain(a4);
    }
    if (v9) {
      CFRelease(v9);
    }
    CFTypeRef v10 = cf;
    if (a4) {
      FigStartForwardingMediaServicesProcessDeathNotification();
    }
    if (v10)
    {
LABEL_13:
      CFRelease(v10);
    }
  }
}

uint64_t fpfs_DeleteStrandedTracksUponSwitch(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  uint64_t v6 = *(void *)(result + 1048);
  if (v6)
  {
    uint64_t v7 = result;
    do
    {
      if (!*(void *)(v7 + 1048)) {
        break;
      }
      uint64_t v8 = *(void *)(v6 + 8);
      if (v8) {
        uint64_t v9 = *(void *)(v8 + 16);
      }
      else {
        uint64_t v9 = -1;
      }
      uint64_t result = fpfs_LooksLikeStrandedTrack(a1, a2, 0, v6);
      if (result)
      {
        if (v6 == a3)
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        uint64_t v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        uint64_t result = fpfs_DeleteTrack(a1, v6);
      }
      if ((v9 & 0x8000000000000000) == 0)
      {
        if (!*(void *)(v7 + 1048)) {
          return result;
        }
        uint64_t v8 = *(void *)(v7 + 1048);
        while (*(void *)(v8 + 16) != v9)
        {
          uint64_t v8 = *(void *)(v8 + 8);
          if (!v8)
          {
            uint64_t v8 = *(void *)(v7 + 1048);
            break;
          }
        }
      }
      uint64_t v6 = v8;
    }
    while (v8);
  }
  return result;
}

CFDictionaryRef fpfs_IsClosedCaptioningSelected(uint64_t a1, const __CFArray *a2)
{
  CFArrayRef v2 = a2;
  if (!a2) {
    CFArrayRef v2 = *(const __CFArray **)(a1 + 1792);
  }
  uint64_t CFStringForOSTypeValue = FigGetCFStringForOSTypeValue();
  CFDictionaryRef result = fpfs_FindMediaTypeInMediaArray(v2, CFStringForOSTypeValue, 0);
  if (!result) {
    return result;
  }
  CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(result, @"MediaSelectionOptionsPersistentID");
  if (!result) {
    return result;
  }
  CFArrayRef v6 = *(const __CFArray **)(a1 + 1696);
  if (!v6) {
    return 0;
  }
  uint64_t v7 = FigGetCFStringForOSTypeValue();
  CFDictionaryRef MediaTypeInMediaArray = fpfs_FindMediaTypeInMediaArray(v6, v7, 0);
  if (!MediaTypeInMediaArray)
  {
    FigSignalErrorAt();
    return 0;
  }
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(MediaTypeInMediaArray, @"MediaSelectionGroupOptions");
  if (CFArrayGetCount(Value) < 1) {
    return 0;
  }
  CFIndex v10 = 0;
  while (1)
  {
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(Value, v10);
    CFDictionaryGetValue(ValueAtIndex, @"MediaSelectionOptionsPersistentID");
    if (FigCFEqual())
    {
      CFDictionaryGetValue(ValueAtIndex, @"MediaSelectionOptionsMediaType");
      FigGetCFStringForOSTypeValue();
      if (FigCFEqual()) {
        break;
      }
    }
    if (++v10 >= CFArrayGetCount(Value)) {
      return 0;
    }
  }
  return (const __CFDictionary *)1;
}

void fpfsi_setNonForcedSubtitlesEnabled(const void *a1, int a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = *(dispatch_queue_t **)(DerivedStorage + 1864);
  if (v5 && *(unsigned __int8 *)(DerivedStorage + 531) != a2)
  {
    CFArrayRef v6 = *(const void **)DerivedStorage;
    *(unsigned char *)(DerivedStorage + 531) = a2;
    FigLegibleOutputManagerSetNonForcedEnabledForMediaType(v5, 1935832172, a2);
    NotificationPayloadForProperties = fpfs_CreateNotificationPayloadForProperties(v6, (uint64_t)a1, v7, v8, v9, v10, v11, v12, @"DisplayNonForcedSubtitles", @"SelectedMediaArray");
    fpfs_EnqueueNotification(v6, @"DisplayNonForcedSubtitlesChanged", a1, NotificationPayloadForProperties);
    if (NotificationPayloadForProperties) {
      CFRelease(NotificationPayloadForProperties);
    }
    uint64_t v14 = *(const void **)DerivedStorage;
    fpfs_updateClosedCaptionsDisplay(v14, 0);
  }
}

void fpfs_updateClosedCaptionsDisplay(const void *a1, const __CFArray *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v5 = *(unsigned __int8 *)(DerivedStorage + 209);
  if (!FigRenderedLegibleOutputManagerIsSupported()) {
    return;
  }
  if (*(void *)(DerivedStorage + 80))
  {
    uint64_t v6 = CMBaseObjectGetDerivedStorage();
    uint64_t v7 = v6;
    if (*(unsigned char *)(DerivedStorage + 209) && !*(unsigned char *)(v6 + 531))
    {
      int v5 = 1;
    }
    else
    {
      int v5 = fpfs_IsClosedCaptioningSelected(v6, a2) != 0;
      if (!v7)
      {
LABEL_13:
        FigLegibleOutputManagerSetNonForcedEnabledForMediaType(*(dispatch_queue_t **)(v7 + 1864), 1668047728, v5);
        goto LABEL_14;
      }
    }
    uint64_t v8 = *(void *)(v7 + 824);
    if (v8 && *(void *)(v8 + 32))
    {
      int v9 = (uint64_t *)MEMORY[0x1E4F1CFC8];
      if (v5) {
        int v9 = (uint64_t *)MEMORY[0x1E4F1CFD0];
      }
      fpfs_setPropertyOnPrimaryAndAuxRenderPipelines(v8, @"DisplayClosedCaptions", *v9);
    }
    goto LABEL_13;
  }
LABEL_14:
  if (v5 != *(unsigned __int8 *)(DerivedStorage + 210))
  {
    *(unsigned char *)(DerivedStorage + 210) = v5;
    int v10 = (const void **)MEMORY[0x1E4F1CFC8];
    if (v5) {
      int v10 = (const void **)MEMORY[0x1E4F1CFD0];
    }
    int v11 = *v10;
    FigPropertyStorageSetValue(*(void *)(DerivedStorage + 16), @"DisplayingClosedCaptions", *v10);
    FPSupport_updateClosedCaptionLayer(DerivedStorage + 208, *(const __CFArray **)(DerivedStorage + 200));
    CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    CFMutableStringRef Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFDictionarySetValue(Mutable, @"CurrentDisplayingClosedCaptions", v11);
    fpfs_EnqueueNotification(a1, @"DisplayingClosedCaptionsChanged", a1, Mutable);
    if (Mutable)
    {
      CFRelease(Mutable);
    }
  }
}

uint64_t FigManifoldFlush(uint64_t a1)
{
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v5 = *(void *)(VTable + 16);
  uint64_t result = VTable + 16;
  uint64_t v4 = v5;
  if (v5) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(uint64_t (**)(uint64_t))(v6 + 40);
  if (v7)
  {
    return v7(a1);
  }
  return result;
}

uint64_t FigBufferedAirPlayOutputReset(uint64_t a1)
{
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v5 = *(void *)(VTable + 16);
  uint64_t result = VTable + 16;
  uint64_t v4 = v5;
  if (v5) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 32);
  if (v7)
  {
    return v7(a1, 1);
  }
  return result;
}

uint64_t fpfs_RestartPlayedOutTracks(const void *a1, CMTime *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = *(void *)(DerivedStorage + 1064);
  if (v5)
  {
    uint64_t v6 = DerivedStorage;
    uint64_t v7 = MEMORY[0x1E4F1F9F8];
    do
    {
      if (*(_DWORD *)(v5 + 152) != 1)
      {
        CMTime time1 = *(CMTime *)(v5 + 216);
        CMTime v20 = *a2;
        if (CMTimeCompare(&time1, &v20) > 0 || !*(unsigned char *)(v5 + 182))
        {
          *(_OWORD *)(v5 + 192) = *(_OWORD *)v7;
          *(void *)(v5 + 208) = *(void *)(v7 + 16);
        }
      }
      uint64_t v5 = *(void *)(v5 + 8);
    }
    while (v5);
    uint64_t v8 = *(void *)(v6 + 1064);
    if (v8)
    {
      uint64_t v5 = 0;
      while (1)
      {
        uint64_t v9 = *(void *)(v8 + 8);
        CMTime time1 = *(CMTime *)(v8 + 216);
        CMTime v20 = *a2;
        if (CMTimeCompare(&time1, &v20) > 0 || !*(unsigned char *)(v8 + 182))
        {
          int v10 = (_OWORD *)(v8 + 192);
          if ((*(unsigned char *)(v8 + 204) & 1) == 0)
          {
            long long v11 = *(_OWORD *)&a2->value;
            *(void *)(v8 + 208) = a2->epoch;
            *int v10 = v11;
          }
          fpfs_ResurrectPlayedOutTrack(v8);
          int v12 = *(_DWORD *)(v8 + 152);
          if (v12 == 1)
          {
            if (*(_DWORD *)(v8 + 32) == 1986618469 && fpfs_CheckVideoSyncQueue(v8, 0))
            {
              unsigned int v15 = fpfs_FinishVideoSync(v8);
LABEL_35:
              if (v15) {
                BOOL v18 = v5 == 0;
              }
              else {
                BOOL v18 = 0;
              }
              if (v18) {
                uint64_t v5 = v15;
              }
              else {
                uint64_t v5 = v5;
              }
            }
          }
          else if (v12 == 6)
          {
            if (*(_DWORD *)(v8 + 32) == 1986618469) {
              fpfs_UpdateDimensions(a1, 1);
            }
            *(_OWORD *)&time1.unsigned int value = *v10;
            time1.CMTimeEpoch epoch = *(void *)(v8 + 208);
            unsigned int restarted = fpfsi_RestartResurrectedTrack(v8, &time1, 1);
            if (!restarted && v9)
            {
              uint64_t v14 = v9;
              while (*(_DWORD *)(v14 + 152) == 1 || !fpfsi_canTracksBeSyncPairsIgnoringDiscontinuity(v14, v8))
              {
                uint64_t v14 = *(void *)(v14 + 8);
                if (!v14) {
                  goto LABEL_32;
                }
              }
              uint64_t v16 = v8 + 240;
              if ((*(_DWORD *)(v8 + 252) & 1) == 0) {
                uint64_t v16 = v8 + 216;
              }
              long long v17 = *(_OWORD *)v16;
              *(void *)(v14 + 208) = *(void *)(v16 + 16);
              *(_OWORD *)(v14 + 192) = v17;
            }
LABEL_32:
            if (restarted == -16042) {
              unsigned int v15 = 0;
            }
            else {
              unsigned int v15 = restarted;
            }
            goto LABEL_35;
          }
        }
        if (v9)
        {
          uint64_t v8 = v9;
          if (*(void *)(v6 + 1064)) {
            continue;
          }
        }
        return v5;
      }
    }
    return 0;
  }
  return v5;
}

void fpfs_AssessItemTransition(void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (fpfs_getNext(DerivedStorage, *(const void **)(DerivedStorage + 80)))
  {
    if (a1) {
      CFRetain(a1);
    }
    uint64_t v3 = *(NSObject **)(DerivedStorage + 24);
    dispatch_async_f(v3, a1, (dispatch_function_t)fpfs_DeferredAssessItemTransition);
  }
}

void fpfs_ResurrectPlayedOutTrack(uint64_t a1)
{
  theDict[16] = *(CFDictionaryRef *)MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = *(void *)(DerivedStorage + 1120) + 1;
  *(void *)(DerivedStorage + 1120) = v3;
  if (dword_1E9350BB0)
  {
    int v34 = 0;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v5 = *(void *)(DerivedStorage + 1064);
  if (v5 == a1)
  {
    uint64_t v8 = DerivedStorage + 1064;
    uint64_t v33 = *(void *)(a1 + 8);
    *(void *)(DerivedStorage + 1064) = v33;
    if (!v33) {
LABEL_6:
    }
      *(void *)(DerivedStorage + 1072) = v8;
  }
  else
  {
    do
    {
      uint64_t v6 = v5;
      uint64_t v5 = *(void *)(v5 + 8);
    }
    while (v5 != a1);
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)(v6 + 8) = v7;
    uint64_t v8 = v6 + 8;
    if (!v7) {
      goto LABEL_6;
    }
  }
  uint64_t v9 = *(void *)(DerivedStorage + 168);
  int v10 = *(_DWORD *)(a1 + 16);
  int v34 = v3;
  int valuePtr = v10;
  theDict[0] = 0;
  if (v9) {
    BOOL v11 = v10 == v3;
  }
  else {
    BOOL v11 = 1;
  }
  if (!v11)
  {
    FigPropertyStorageCopyValue(v9, @"TrackPropertyStorages", theDict);
    if (theDict[0])
    {
      CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
      CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(AllocatorForMedia, 0, theDict[0]);
      if (MutableCopy)
      {
        CFDictionaryRef v14 = MutableCopy;
        CFAllocatorRef v15 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        CFNumberRef v16 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
        if (v16)
        {
          CFNumberRef v17 = v16;
          CFArrayRef Value = CFDictionaryGetValue(v14, v16);
          if (Value)
          {
            CFStringRef v19 = Value;
            CFNumberRef v20 = CFNumberCreate(v15, kCFNumberSInt32Type, &v34);
            CFDictionarySetValue(v14, v20, v19);
            CFDictionaryRemoveValue(v14, v17);
            FigPropertyStorageSetValue(v9, @"TrackPropertyStorages", v14);
            if (v20) {
              CFRelease(v20);
            }
          }
          CFRelease(v17);
        }
        CFRelease(v14);
      }
      if (theDict[0]) {
        CFRelease(theDict[0]);
      }
    }
  }
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 424) = -1;
  fpfs_CreateTrackDryTimer(a1);
  uint64_t v27 = *(unsigned __int8 *)(a1 + 180);
  uint64_t v28 = *(void *)(DerivedStorage + 16 * v27 + 1008);
  uint64_t v29 = DerivedStorage + 8 * v27;
  uint64_t v30 = (void *)(v29 + 1152);
  double v31 = (void *)(v29 + 1128);
  if (*(void *)(a1 + 48) == v28) {
    uint64_t v32 = v30;
  }
  else {
    uint64_t v32 = v31;
  }
  *uint64_t v32 = *(void *)(a1 + 64);
  *(void *)(a1 + 8) = 0;
  **(void **)(DerivedStorage + 1056) = a1;
  *(void *)(DerivedStorage + 1056) = a1 + 8;
  if (*(_DWORD *)(a1 + 32) == 1986618469) {
    fpfsi_PostExternalProtectionRequiredChangedNotification(*(const void **)a1);
  }
  fpfs_PrepareAndEnqueueTracksChangedNotification(*(const void **)DerivedStorage, *(const void **)a1, v21, v22, v23, v24, v25, v26);
}

uint64_t fpfsi_RestartResurrectedTrack(uint64_t a1, CMTime *a2, int a3)
{
  uint64_t v6 = *(void *)a1;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v8 = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(a1 + 32) == 1936684398)
  {
    CMSampleBufferRef refcon = 0;
    CMTime v20 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
    CMBufferQueueCallForEachBuffer(*(CMBufferQueueRef *)(a1 + 80), (OSStatus (__cdecl *)(CMBufferRef, void *))fpfs_GetFirstNonMarkerSBuf, &refcon);
    uint64_t TrackOfType = fpfs_LastTrackOfType(v6, 1936684398, a1);
    CMSampleBufferGetOutputPresentationTimeStamp(&v20, refcon);
    CMTime lhs = v20;
    CMTime rhs = *(CMTime *)(a1 + 128);
    CMTimeAdd(&time1, &lhs, &rhs);
    CMTime v20 = time1;
    if (a3 == 1 && TrackOfType)
    {
      if (*(void *)(TrackOfType + 64) == *(void *)(a1 + 64) && (*(unsigned char *)(TrackOfType + 228) & 1) != 0)
      {
        CMTime time1 = v20;
        CMTime lhs = *(CMTime *)(TrackOfType + 216);
        if (CMTimeCompare(&time1, &lhs) < 0)
        {
          CMTime time1 = *(CMTime *)(TrackOfType + 216);
          CMTime lhs = *(CMTime *)gFSPAudioCrossfadeDuration;
          CMTimeSubtract(&time2, &time1, &lhs);
          CMTime lhs = v20;
          CMTimeMaximum(&time1, &lhs, &time2);
          *a2 = time1;
          int v10 = 1;
          goto LABEL_14;
        }
      }
      goto LABEL_9;
    }
    if (TrackOfType)
    {
LABEL_9:
      if (*(void *)(TrackOfType + 64) != *(void *)(a1 + 64)
        && (!*(void *)(CMBaseObjectGetDerivedStorage() + 504) || (_os_feature_enabled_impl() & 1) == 0))
      {
        fpfs_ClearRenderChains(v6, 2);
      }
    }
  }
  int v10 = 0;
LABEL_14:
  memset(&v20, 0, sizeof(v20));
  CMTime time1 = *a2;
  fpfsi_PrepareTrackForReplay(a1, (long long *)&time1.value, (uint64_t)&v20);
  if (!v10)
  {
    fpfs_ChangeTrackState(a1, 3u);
    int v12 = *(_DWORD *)(a1 + 32);
    if (v12 == 1936684398)
    {
      if (*(unsigned char *)(v8 + 523))
      {
        LODWORD(v13) = 0;
      }
      else
      {
        uint64_t v13 = *(void *)(v8 + 536);
        if (v13) {
          LODWORD(v13) = FPSupport_IsAnAudioDeviceAvailable(v13) != 0;
        }
      }
    }
    else
    {
      if (v12 != 1986618469) {
        goto LABEL_24;
      }
      LODWORD(v13) = fpfs_CanRenderVideo(v8, v6);
    }
    if (!v13)
    {
      if (*(_DWORD *)(a1 + 32) == 1986618469 && !*(unsigned char *)(a1 + 184))
      {
        fpfs_ChangeTrackState(a1, 5u);
        fpfs_CheckVideoSyncQueue(a1, 0);
      }
      else
      {
        fpfs_ChangeTrackState(a1, 4u);
      }
      uint64_t result = 0;
      goto LABEL_31;
    }
LABEL_24:
    CMTime time1 = *a2;
    CMTime lhs = v20;
    CMTime rhs = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
    uint64_t result = fpfs_StartTrackPlaying(DerivedStorage, a1, &time1, &lhs, &rhs);
    if (result) {
      return result;
    }
    goto LABEL_31;
  }
  fpfs_ChangeTrackState(a1, 1u);
  CMTime time1 = *a2;
  uint64_t result = fpfs_FinishAudioSyncAndStart((void *)a1, &time1);
LABEL_31:
  if (*(_DWORD *)(DerivedStorage + 2792) > *(_DWORD *)(DerivedStorage + 2796))
  {
    int v14 = *(_DWORD *)(a1 + 32);
    if (v14 == 1986618469)
    {
      *(unsigned char *)(DerivedStorage + 2825) = 1;
    }
    else if (v14 == 1936684398)
    {
      *(unsigned char *)(DerivedStorage + 2824) = 1;
    }
  }
  return result;
}

void fpfs_CreateTrackDryTimer(uint64_t a1)
{
  CFArrayRef v2 = *(void **)a1;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFArrayRef ItemAndTrackNumberPayload = fpfs_CreateItemAndTrackNumberPayload(v2, a1);
  fpfs_ReleaseAndClearTimebaseTimer(*(OpaqueCMTimebase **)(DerivedStorage + 576), (dispatch_object_t *)(a1 + 120));
  uint64_t v5 = fpfs_TimerDispatchSourceCreate(*(dispatch_queue_t *)(DerivedStorage + 600), ItemAndTrackNumberPayload, 0xFFFFFFFFFFFFFFFFLL, (void (__cdecl *)(void *))fpfs_ranDryTimerProc, 0);
  *(void *)(a1 + 120) = v5;
  uint64_t v6 = MEMORY[0x1E4F1F9F8];
  *(_OWORD *)(a1 + 156) = *MEMORY[0x1E4F1F9F8];
  *(void *)(a1 + 172) = *(void *)(v6 + 16);
  if (v5) {
    CMTimebaseAddTimerDispatchSource(*(CMTimebaseRef *)(DerivedStorage + 576), v5);
  }
  if (ItemAndTrackNumberPayload)
  {
    CFRelease(ItemAndTrackNumberPayload);
  }
}

void fpfs_ranDryTimerProc(const __CFArray *a1)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(a1, 0);
  CFNumberRef v3 = (const __CFNumber *)CFArrayGetValueAtIndex(a1, 1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = *(const void **)DerivedStorage;
  uint64_t v6 = CMBaseObjectGetDerivedStorage();
  uint64_t valuePtr = 0;
  CFNumberGetValue(v3, kCFNumberSInt64Type, &valuePtr);
  fpfs_LockMutexWithCaller(v5);
  id v7 = *(id *)(v6 + 776);
  voucher_adopt();
  if (FigRetainProxyIsInvalidated()) {
    goto LABEL_2;
  }
  CFArrayRef Next = fpfs_getNext(v6, 0);
  uint64_t v9 = *(void *)(DerivedStorage + 1048);
  if (!v9) {
    goto LABEL_2;
  }
  uint64_t v10 = (uint64_t)Next;
  while (*(void *)(v9 + 16) != valuePtr)
  {
    uint64_t v9 = *(void *)(v9 + 8);
    if (!v9) {
      goto LABEL_2;
    }
  }
  if (!Next) {
    goto LABEL_2;
  }
  memset(&v53, 0, sizeof(v53));
  fpfs_GetTime(DerivedStorage, (uint64_t)&v53);
  BOOL v11 = (_OWORD *)(v9 + 156);
  if (*(unsigned char *)(v9 + 168))
  {
    float v12 = *(float *)(v6 + 108);
    if (v12 >= 0.0)
    {
      CMTimeMake(&rhs, 1, 100);
      CMTime lhs = v53;
      CMTimeAdd(&time2, &lhs, &rhs);
      *(_OWORD *)&lhs.unsigned int value = *v11;
      lhs.CMTimeEpoch epoch = *(void *)(v9 + 172);
      if (CMTimeCompare(&lhs, &time2) >= 1) {
        goto LABEL_17;
      }
      float v12 = *(float *)(v6 + 108);
    }
    if (v12 >= 0.0) {
      goto LABEL_15;
    }
    CMTimeMake(&v49, 1, 100);
    CMTime lhs = v53;
    CMTimeSubtract(&v50, &lhs, &v49);
    *(_OWORD *)&lhs.unsigned int value = *v11;
    lhs.CMTimeEpoch epoch = *(void *)(v9 + 172);
    if ((CMTimeCompare(&lhs, &v50) & 0x80000000) == 0) {
      goto LABEL_15;
    }
LABEL_17:
    int v14 = *(OpaqueCMTimebase **)(DerivedStorage + 576);
    CFAllocatorRef v15 = *(NSObject **)(v9 + 120);
    *(_OWORD *)&lhs.unsigned int value = *v11;
    lhs.CMTimeEpoch epoch = *(void *)(v9 + 172);
    CMTimebaseSetTimerDispatchSourceNextFireTime(v14, v15, &lhs, 1u);
    goto LABEL_2;
  }
LABEL_15:
  uint64_t v13 = MEMORY[0x1E4F1F9F8];
  long long v43 = *MEMORY[0x1E4F1F9F8];
  *BOOL v11 = *MEMORY[0x1E4F1F9F8];
  CMTimeEpoch v42 = *(void *)(v13 + 16);
  *(void *)(v9 + 172) = v42;
  if (dword_1E9350BB0)
  {
    LODWORD(v47.value) = 0;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t RenderingTrackofType = fpfs_FirstRenderingTrackofType(v10, *(_DWORD *)(v9 + 32));
  if (!RenderingTrackofType)
  {
    FigSignalErrorAt();
    goto LABEL_2;
  }
  uint64_t v17 = RenderingTrackofType;
  do
    uint64_t v17 = *(void *)(v17 + 8);
  while (v17 && *(_DWORD *)(v17 + 32) != *(_DWORD *)(RenderingTrackofType + 32));
  if (*(void *)(v9 + 16) > *(void *)(RenderingTrackofType + 16))
  {
    if (dword_1E9350BB0) {
      goto LABEL_49;
    }
    goto LABEL_2;
  }
  BOOL v18 = v9 == RenderingTrackofType && v17 == 0;
  char v19 = v18;
  if (!v18)
  {
    if (v9 != RenderingTrackofType) {
      goto LABEL_2;
    }
    if (v17) {
      BOOL v20 = *(_DWORD *)(v17 + 152) == 1;
    }
    else {
      BOOL v20 = 0;
    }
    char v45 = v19;
    if (dword_1E9350BB0)
    {
      BOOL v40 = v20;
      LODWORD(v47.value) = 0;
      int v22 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      BOOL v20 = v40;
    }
    if (v20)
    {
      if (dword_1E9350BB0)
      {
        LODWORD(v47.value) = 0;
        int v25 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT);
        int v26 = 1;
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        unsigned int v41 = 2;
        goto LABEL_59;
      }
      unsigned int v41 = 2;
      int v26 = 1;
      goto LABEL_60;
    }
    if (dword_1E9350BB0) {
      goto LABEL_41;
    }
    goto LABEL_57;
  }
  if (*(unsigned char *)(v9 + 182))
  {
    if (dword_1E9350BB0) {
      goto LABEL_49;
    }
    goto LABEL_2;
  }
  if (*(void *)(v9 + 48) != *(void *)(DerivedStorage + 16 * *(unsigned __int8 *)(v9 + 180) + 1000))
  {
    if (dword_1E9350BB0)
    {
LABEL_41:
      LODWORD(v47.value) = 0;
      int v21 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
LABEL_57:
    fpfs_StopFeedingTrack(v9, 0, 1);
    goto LABEL_2;
  }
  if (*(_DWORD *)(v9 + 152) == 6)
  {
    if (dword_1E9350BB0)
    {
      char v45 = v19;
      LODWORD(v47.value) = 0;
      int v23 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
      unsigned int v41 = 1;
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      int v26 = 0;
LABEL_59:
      char v19 = v45;
      goto LABEL_60;
    }
    int v26 = 0;
    unsigned int v41 = 1;
LABEL_60:
    CMTime lhs = v53;
    if (fpfs_TrackIsStalled(v9, &lhs))
    {
      uint64_t v39 = *(void *)(v9 + 16);
      if (dword_1E9350BB0)
      {
        LODWORD(v47.value) = 0;
        uint64_t v27 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (!fpfs_StopPlaybackByStalledTrack(v9, v41))
      {
        uint64_t v28 = CMBaseObjectGetDerivedStorage();
        if (!v28 || fpfs_GetItemLivingTrack(v28, v39, &lhs) || !FigSignalErrorAt())
        {
          if (*(void *)(v9 + 48) == *(void *)(DerivedStorage + 16 * *(unsigned __int8 *)(v9 + 180) + 1000)) {
            int v29 = 1;
          }
          else {
            int v29 = v26;
          }
          if (!v29) {
            fpfs_StopFeedingTrack(v9, 0, 1);
          }
          if (v19)
          {
            uint64_t v30 = *(void *)(DerivedStorage + 1704);
            if (!v30 || !FigAlternateIsIFrameOnly(v30))
            {
              *(unsigned char *)(DerivedStorage + 2808) = 1;
              LODWORD(v47.value) = 0;
              double v31 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT);
              goto LABEL_50;
            }
          }
          else
          {
            uint64_t valuePtr = *(void *)(v17 + 16);
            int v32 = 1;
            if (*(_DWORD *)(v9 + 32) == 1936684398)
            {
              fpfs_GetStartupDurationOfType((CMTime *)v17, (uint64_t)v48);
              uint64_t v33 = (1 << *(unsigned char *)(v17 + 180));
              CMTime lhs = v53;
              if (fpfs_CheckCanKeepUp((uint64_t)ValueAtIndex, (uint64_t)v48, &lhs, v33, 0, 0, 0, 0))
              {
                uint64_t v34 = *(void *)(DerivedStorage + 1048);
                if (v34)
                {
                  while (*(void *)(v34 + 16) != valuePtr)
                  {
                    uint64_t v34 = *(void *)(v34 + 8);
                    if (!v34)
                    {
                      int v32 = 1;
                      goto LABEL_93;
                    }
                  }
                  memset(&v47, 0, sizeof(v47));
                  uint64_t v35 = *(opaqueCMBufferQueue **)(v34 + 72);
                  if (v35)
                  {
                    CMBufferQueueGetMinPresentationTimeStamp(&v47, v35);
                  }
                  else
                  {
                    *(_OWORD *)&v47.unsigned int value = v43;
                    v47.CMTimeEpoch epoch = v42;
                  }
                  if ((v47.flags & 1) == 0 || (CMTime lhs = v53, v55 = v47, CMTimeCompare(&lhs, &v55) < 0))
                  {
                    int v32 = 1;
                  }
                  else
                  {
                    if (dword_1E9350BB0)
                    {
                      uint64_t v46 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                      os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT);
                      fig_log_call_emit_and_clean_up_after_send_and_compose();
                    }
                    if (*(_DWORD *)(v34 + 32) == 1936684398) {
                      fpfs_ForceAudioSync(v34);
                    }
                    int v32 = 0;
                  }
                }
              }
            }
LABEL_93:
            if (!FigRetainProxyIsInvalidated())
            {
              if (v32)
              {
                uint64_t v36 = *(void *)(DerivedStorage + 1048);
                if (v36)
                {
                  while (*(void *)(v36 + 16) != valuePtr)
                  {
                    uint64_t v36 = *(void *)(v36 + 8);
                    if (!v36) {
                      goto LABEL_104;
                    }
                  }
                  uint64_t v37 = *(void *)(DerivedStorage + 1768);
                  if (v37
                    && *(void *)(DerivedStorage + 1704)
                    && (int PeakBitRate = FigAlternateGetPeakBitRate(v37),
                        PeakBitRate > (int)FigAlternateGetPeakBitRate(*(void *)(DerivedStorage + 1704))))
                  {
                    fpfs_CancelTrialSwitch((uint64_t)ValueAtIndex);
                  }
                  else
                  {
                    fpfs_AbandonSyncAttempt(v36);
                  }
                }
              }
LABEL_104:
              fpfs_CheckPrebufferedLevels(&lhs, ValueAtIndex, 1, -1, 0);
            }
          }
        }
      }
    }
    goto LABEL_2;
  }
  if (dword_1E9350BB0)
  {
LABEL_49:
    LODWORD(v47.value) = 0;
    int v24 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);
LABEL_50:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
LABEL_2:

  fpfs_UnlockAndPostNotificationsWithCaller(v5);
}

BOOL fpfs_TrackIsStalled(uint64_t a1, CMTime *a2)
{
  CMBaseObjectGetDerivedStorage();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(a1 + 184) && *(_DWORD *)(a1 + 32) == 1986618469)
  {
    uint64_t v5 = DerivedStorage;
    memset(&time2, 0, sizeof(time2));
    CMTimeMake(&time2, 10, 1000);
    if (*(float *)(v5 + 108) >= 0.0 && (*(unsigned char *)(a1 + 228) & 1) != 0)
    {
      CMTime lhs = *a2;
      CMTime rhs = time2;
      CMTimeAdd(&v11, &lhs, &rhs);
      CMTime lhs = *(CMTime *)(a1 + 216);
      return CMTimeCompare(&v11, &lhs) >= 0;
    }
    else
    {
      CMTime lhs = *a2;
      CMTime rhs = time2;
      CMTimeSubtract(&time1, &lhs, &rhs);
      CMTime lhs = *(CMTime *)(a1 + 216);
      return CMTimeCompare(&time1, &lhs) < 1;
    }
  }
  else
  {
    CMTime time2 = *(CMTime *)(a1 + 216);
    CMTime lhs = *a2;
    CMTimeSubtract(&v7, &time2, &lhs);
    *(_OWORD *)&time2.unsigned int value = kGaplessTransitionDeadlineInterval;
    time2.CMTimeEpoch epoch = 0;
    return CMTimeCompare(&v7, &time2) >> 31;
  }
}

CMTime *fpfs_GetStartupDurationOfType@<X0>(CMTime *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = (uint64_t)result;
  uint64_t v4 = MEMORY[0x1E4F1FA48];
  *(_OWORD *)a2 = *MEMORY[0x1E4F1FA48];
  *(void *)(a2 + 16) = *(void *)(v4 + 16);
  CMTimeScale timescale = result[1].timescale;
  do
  {
    if (*(_DWORD *)(v2 + 32) == timescale)
    {
      CMTime v8 = *(CMTime *)(v2 + 192);
      fpfs_GetTrackStartupQueueDuration(v2, &v8, (uint64_t)&rhs);
      CMTime v6 = *(CMTime *)a2;
      uint64_t result = CMTimeAdd(&v8, &v6, &rhs);
      *(CMTime *)a2 = v8;
    }
    uint64_t v2 = *(void *)(v2 + 8);
  }
  while (v2);
  return result;
}

uint64_t fpfs_ForceAudioSync(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)a1;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1E9350BB0)
  {
    int v9 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  fpfs_ClearRenderChains(v2, 2);
  fpfsi_UpdateAudioActiveSamples(v2, 0);
  fpfs_GetTime(DerivedStorage, (uint64_t)&v7);
  int v5 = fpfs_FinishAudioSyncAndStart((void *)a1, &v7);
  uint64_t result = fpfs_LastTrackOfType(v2, 1936684398, a1);
  if (result) {
    return fpfs_FinishTrack(result, 0);
  }
  if (v5 != -16042 && *(_DWORD *)(a1 + 152) == 6) {
    return fpfs_SetRateOnTrack(a1, MEMORY[0x1E4F1F9F8], MEMORY[0x1E4F1F9F8], *(float *)(DerivedStorage + 848));
  }
  return result;
}

uint64_t fpfs_FinishAudioSyncAndStart(void *a1, CMTime *a2)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  uint64_t v34 = CMBaseObjectGetDerivedStorage();
  CMTimeScale timescale = 0;
  CMTimeValue value = 0;
  memset(&v43, 0, sizeof(v43));
  CMBufferQueueRef queueOut = 0;
  memset(&v42, 0, sizeof(v42));
  memset(&v41, 0, sizeof(v41));
  if (CMBufferQueueIsEmpty((CMBufferQueueRef)a1[9])) {
    CMTime v41 = *a2;
  }
  else {
    CMBufferQueueGetMinPresentationTimeStamp(&v41, (CMBufferQueueRef)a1[9]);
  }
  int v5 = a1 + 24;
  CMTime time1 = v41;
  CMTime time2 = *(CMTime *)((unsigned char *)a1 + 8);
  CMTime v6 = &PerformOneTimeAssetTableInitialization_sAssetTableInit;
  if (CMTimeCompare(&time1, &time2) >= 1)
  {
    if (dword_1E9350BB0)
    {
      LODWORD(rhs.value) = 0;
      LOBYTE(type.value) = 0;
      os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      CMTime v6 = &PerformOneTimeAssetTableInitialization_sAssetTableInit;
    }
    for (uint64_t i = DerivedStorage[131]; (void *)i != a1; uint64_t i = *(void *)(i + 8))
    {
      if (*(_DWORD *)(i + 32) == 1936684398)
      {
        CMTime time1 = *(CMTime *)(i + 216);
        *(_OWORD *)&time2.CMTimeValue value = *v5;
        time2.CMTimeEpoch epoch = a1[26];
        if (!CMTimeCompare(&time1, &time2)) {
          *(CMTime *)(i + 240) = v41;
        }
      }
    }
    fpfs_ClearRenderChains(*a1, 2);
  }
  long long v9 = *(_OWORD *)&a2->value;
  a1[26] = a2->epoch;
  *int v5 = v9;
  if (a1[6] != DerivedStorage[2 * *((unsigned __int8 *)a1 + 180) + 126]
    || (LOBYTE(time1.value) = 0, uint64_t result = fpfs_CompleteTrialSwitch(*a1, a1, &time1), !LOBYTE(time1.value)))
  {
    if (dword_1E9350BB0)
    {
      LODWORD(rhs.value) = 0;
      LOBYTE(type.value) = 0;
      uint64_t v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      CMTime v6 = &PerformOneTimeAssetTableInitialization_sAssetTableInit;
    }
    if (*((_DWORD *)a1 + 38) != 1)
    {
      LODWORD(rhs.value) = 0;
      LOBYTE(type.value) = 0;
      float v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      CMTime v6 = &PerformOneTimeAssetTableInitialization_sAssetTableInit;
    }
    uint64_t TrackOfType = (CMTime *)fpfs_LastTrackOfType(*a1, 1936684398, (uint64_t)a1);
    if (!TrackOfType) {
      goto LABEL_57;
    }
    uint64_t v14 = (uint64_t)TrackOfType;
    CMTime time1 = TrackOfType[8];
    *(_OWORD *)&time2.CMTimeValue value = *v5;
    time2.CMTimeEpoch epoch = a1[26];
    if (!CMTimeCompare(&time1, &time2) && !*(void *)(v34 + 504))
    {
      fpfs_LastTrackOfType(*(void *)v14, 1936684398, v14);
      fpfs_DeleteTrack(*a1, v14);
LABEL_57:
      *(_OWORD *)&time1.CMTimeValue value = *v5;
      time1.CMTimeEpoch epoch = a1[26];
      CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
      return fpfs_StartTrackPlaying((uint64_t)DerivedStorage, (uint64_t)a1, &time1, MEMORY[0x1E4F1FA08], &time2);
    }
    CMTime v42 = *a2;
    CFAllocatorRef v15 = (_OWORD *)(v14 + 216);
    CMTime v43 = *(CMTime *)(v14 + 216);
    BOOL canCrossfade = fpfs_canCrossfade(v34, v14, (uint64_t)a1);
    if (canCrossfade)
    {
      CMTime time1 = *a2;
      CMTime time2 = *(CMTime *)gFSPAudioCrossfadeDuration;
      CMTimeAdd(&v42, &time1, &time2);
      CMTime time2 = v42;
      *(_OWORD *)&rhs.CMTimeValue value = kAudioRampingDownSilenceDuration;
      rhs.CMTimeEpoch epoch = 0;
      CMTimeAdd(&time1, &time2, &rhs);
      CMTime v42 = time1;
    }
    *(_OWORD *)&time1.CMTimeValue value = *v15;
    time1.CMTimeEpoch epoch = *(void *)(v14 + 232);
    CMTime time2 = v42;
    if (CMTimeCompare(&time1, &time2) < 0)
    {
      *(_OWORD *)&v42.CMTimeValue value = *v15;
      v42.CMTimeEpoch epoch = *(void *)(v14 + 232);
    }
    if (!*(void *)(v14 + 96)
      || (CMTime time1 = v42,
          *(_OWORD *)&time2.CMTimeValue value = *v15,
          time2.CMTimeEpoch epoch = *(void *)(v14 + 232),
          (CMTimeCompare(&time1, &time2) & 0x80000000) == 0))
    {
      if (canCrossfade) {
        goto LABEL_32;
      }
      goto LABEL_31;
    }
    int v23 = DerivedStorage;
    CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    CallbacksForUnsortedSampleBuffers = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
    uint64_t result = CMBufferQueueCreate(AllocatorForMedia, 0, CallbacksForUnsortedSampleBuffers, &queueOut);
    if (!result)
    {
      uint64_t result = fpfs_StealBuffersAfterTransitionMarker(*(opaqueCMBufferQueue **)(*(void *)(v14 + 96) + 40), 1, queueOut, 0);
      if (!result)
      {
        if (CMBufferQueueIsEmpty(queueOut))
        {
          if (*(void *)(CMBaseObjectGetDerivedStorage() + 504))
          {
            CMTime time1 = v43;
            if (canCrossfade)
            {
              CMTime time2 = v43;
              CMTime rhs = *(CMTime *)gFSPAudioCrossfadeDuration;
              CMTimeSubtract(&time1, &time2, &rhs);
              CMTime rhs = time1;
              *(_OWORD *)&type.CMTimeValue value = kAudioRampingDownSilenceDuration;
              type.CMTimeEpoch epoch = 0;
              CMTimeSubtract(&time2, &rhs, &type);
              CMTime time1 = time2;
            }
            CMTime time2 = time1;
            *(_OWORD *)&rhs.CMTimeValue value = *v5;
            rhs.CMTimeEpoch epoch = a1[26];
            if (CMTimeCompare(&time2, &rhs) >= 1)
            {
              *int v5 = *(_OWORD *)&time1.value;
              a1[26] = time1.epoch;
            }
          }
        }
        else
        {
          memset(&time1, 0, sizeof(time1));
          if (queueOut) {
            CMBufferQueueGetMinPresentationTimeStamp(&time1, queueOut);
          }
          else {
            CMTime time1 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
          }
          if (time1.flags) {
            CMTime v43 = time1;
          }
        }
        int v32 = (opaqueCMSampleBuffer *)CMBufferQueueDequeueAndRetain(queueOut);
        if (v32)
        {
          uint64_t v33 = v32;
          do
          {
            CMSampleBufferGetOutputPresentationTimeStamp(&time1, v33);
            CMTimeValue value = time1.value;
            CMTimeScale timescale = time1.timescale;
            if (time1.flags)
            {
              time1.CMTimeValue value = value;
              time1.CMTimeScale timescale = timescale;
              CMTime time2 = v42;
              if (CMTimeCompare(&time1, &time2) < 0)
              {
                CMBufferQueueEnqueue(*(CMBufferQueueRef *)(*(void *)(v14 + 96) + 40), v33);
                fpfs_GetEndOutputPresentationTimeStamp(v33, &v43);
              }
            }
            else
            {
              CMBufferQueueEnqueue(*(CMBufferQueueRef *)(*(void *)(v14 + 96) + 40), v33);
            }
            CFRelease(v33);
            uint64_t v33 = (opaqueCMSampleBuffer *)CMBufferQueueDequeueAndRetain(queueOut);
          }
          while (v33);
        }
        FigBufferQueueRelease();
        *CFAllocatorRef v15 = *(_OWORD *)&v43.value;
        *(void *)(v14 + 232) = v43.epoch;
        uint64_t DerivedStorage = v23;
        if (canCrossfade) {
          goto LABEL_32;
        }
LABEL_31:
        long long v17 = *v15;
        a1[26] = *(void *)(v14 + 232);
        *int v5 = v17;
LABEL_32:
        if (*(void *)(v14 + 112))
        {
          CMTime rhs = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
          fpfs_scheduleForwardEndTimeForTrack((uint64_t)DerivedStorage, v14, (uint64_t)&rhs);
          if (*((_DWORD *)v6 + 748))
          {
            LODWORD(type.value) = 0;
            os_log_type_t v38 = OS_LOG_TYPE_DEFAULT;
            BOOL v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int v19 = type.value;
            if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
              unsigned int v20 = v19;
            }
            else {
              unsigned int v20 = v19 & 0xFFFFFFFE;
            }
            if (v20)
            {
              uint64_t v21 = *DerivedStorage;
              if (*DerivedStorage) {
                int v22 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
              }
              else {
                int v22 = "";
              }
              uint64_t v36 = v22;
              uint64_t v26 = *(void *)v14;
              if (*(void *)v14) {
                uint64_t v27 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
              }
              else {
                uint64_t v27 = "";
              }
              uint64_t v35 = v27;
              uint64_t v28 = *(void *)(v14 + 16);
              CMTime time1 = rhs;
              Float64 Seconds = CMTimeGetSeconds(&time1);
              uint64_t v30 = *(void *)(v14 + 112);
              fpfs_GetTime((uint64_t)DerivedStorage, (uint64_t)&time);
              Float64 v31 = CMTimeGetSeconds(&time);
              LODWORD(time2.value) = 136317186;
              *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpfs_FinishAudioSyncAndStart";
              LOWORD(time2.flags) = 2048;
              *(void *)((char *)&time2.flags + 2) = v21;
              HIWORD(time2.epoch) = 2082;
              uint64_t v46 = v36;
              __int16 v47 = 2048;
              uint64_t v48 = v26;
              __int16 v49 = 2082;
              CMTime v50 = v35;
              __int16 v51 = 2048;
              uint64_t v52 = v28;
              __int16 v53 = 2048;
              Float64 v54 = Seconds;
              __int16 v55 = 2048;
              uint64_t v56 = v30;
              __int16 v57 = 2048;
              Float64 v58 = v31;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
        }
        else
        {
          fpfs_StopFeedingTrack(v14, 0, 1);
        }
        goto LABEL_57;
      }
    }
  }
  return result;
}

uint64_t fpfs_CompleteTrialSwitch(const __CFArray *a1, uint64_t a2, unsigned char *a3)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  *a3 = 0;
  uint64_t result = DerivedStorage[221];
  if (result)
  {
    uint64_t v8 = DerivedStorage[131];
    if (v8)
    {
      LOBYTE(v9) = 0;
      do
      {
        unint64_t v10 = *(unsigned __int8 *)(v8 + 180);
        if (v10 < 3)
        {
          uint64_t v11 = DerivedStorage[2 * v10 + 126];
          uint64_t v12 = v11;
        }
        else
        {
          FigSignalErrorAt();
          unint64_t v10 = *(unsigned __int8 *)(v8 + 180);
          uint64_t v11 = DerivedStorage[2 * v10 + 126];
          uint64_t v12 = -1;
        }
        uint64_t v13 = *(void *)(v8 + 48);
        if (v13 == v11) {
          int v14 = 1 << v10;
        }
        else {
          LOBYTE(v14) = 0;
        }
        if (v13 == DerivedStorage[2 * v10 + 125] && v12 != 0) {
          fpfs_StopFeedingTrack(v8, 0, 1);
        }
        LOBYTE(v9) = v14 | v9;
        uint64_t v8 = *(void *)(v8 + 8);
      }
      while (v8);
      uint64_t result = DerivedStorage[221];
      unsigned int v9 = v9;
    }
    else
    {
      unsigned int v9 = 0;
    }
    FigAlternateGetPeakBitRate(result);
    FigAlternateGetPeakBitRate(DerivedStorage[213]);
    uint64_t v16 = *DerivedStorage;
    uint64_t v17 = DerivedStorage[221];
    CMTime v37 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
    uint64_t result = fpfs_SetAlternateWithContext(v16, a1, v17, 9);
    if (!result)
    {
      uint64_t v36 = a3;
      if (dword_1E9350BB0)
      {
        os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      uint64_t v19 = 0;
      uint64_t v20 = 126;
      uint64_t v21 = 952;
      uint64_t v22 = 144;
      do
      {
        int v23 = (const void *)DerivedStorage[v20];
        if (v23)
        {
          StoreCurrentManifold((uint64_t)DerivedStorage, v19, 0, v23);
          StoreCurrentManifold((uint64_t)DerivedStorage, v19, 1u, 0);
          int v24 = (char *)DerivedStorage + v19;
          v24[3066] = *((unsigned char *)DerivedStorage + v19 + 3069);
          v24[3069] = 0;
          int v25 = (_DWORD *)((char *)DerivedStorage + v21);
          *int v25 = *(_DWORD *)((char *)DerivedStorage + v21 + 12);
          v25[6] = *(_DWORD *)((char *)DerivedStorage + v21 + 36);
          DerivedStorage[v22 - 3] = DerivedStorage[v22];
        }
        else
        {
          uint64_t v26 = (char *)DerivedStorage + v19;
          v26[3066] = *((unsigned char *)DerivedStorage + v19 + 3069);
          v26[3069] = 0;
        }
        DerivedStorage[v22] = 0;
        uint64_t v27 = &DerivedStorage[v19];
        uint64_t v28 = (const void *)v27[22];
        int v29 = (const void *)v27[25];
        v27[22] = v29;
        if (v29) {
          CFRetain(v29);
        }
        if (v28) {
          CFRelease(v28);
        }
        uint64_t v30 = (const void *)v27[25];
        if (v30)
        {
          CFRelease(v30);
          v27[25] = 0;
        }
        if ((v9 >> v19)) {
          fpfs_DeleteStrandedTracksUponSwitch((uint64_t)a1, v19, a2);
        }
        ++v19;
        v20 += 2;
        v21 += 4;
        ++v22;
      }
      while (v19 != 3);
      for (uint64_t i = DerivedStorage[131]; i; uint64_t i = *(void *)(i + 8))
      {
        if (*(_DWORD *)(i + 152) == 1)
        {
          uint64_t v32 = DerivedStorage[131];
          BOOL v33 = v32 == i;
          if (v32) {
            BOOL v34 = v32 == i;
          }
          else {
            BOOL v34 = 1;
          }
          if (v34)
          {
LABEL_47:
            if (!v32 || v33)
            {
              memset(&v37, 0, sizeof(v37));
              CMBufferQueueGetMinPresentationTimeStamp(&v37, *(CMBufferQueueRef *)(i + 72));
              if (v37.flags) {
                *(CMTime *)(i + 192) = v37;
              }
              if (*(void *)(i + 264)) {
                fpfs_ReleaseAndClearDispatchSource((dispatch_object_t *)(i + 264));
              }
              fpfs_ChangeTrackState(i, 0);
              fpfs_ChangeTrackState(i, 3u);
              if (i == a2) {
                *uint64_t v36 = 1;
              }
              continue;
            }
          }
          else
          {
            while (*(_DWORD *)(v32 + 152) != 6 || *(void *)(v32 + 64) != *(void *)(i + 64))
            {
              uint64_t v32 = *(void *)(v32 + 8);
              BOOL v33 = v32 == i;
              if (v32) {
                BOOL v35 = v32 == i;
              }
              else {
                BOOL v35 = 1;
              }
              if (v35) {
                goto LABEL_47;
              }
            }
          }
          if (i != a2) {
            fpfs_CompleteTrialSync((uint64_t)a1, i);
          }
        }
      }
      fpfs_ResolveAllWaitingTracks(a1);
      return 0;
    }
  }
  return result;
}

uint64_t fpfs_CompleteTrialSync(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v4 = *(_DWORD *)(a2 + 32);
  if (v4 != 1986618469)
  {
    if (v4 == 1936684398)
    {
      uint64_t v5 = DerivedStorage;
      memset(&v9, 0, sizeof(v9));
      fpfs_GetTime(DerivedStorage, (uint64_t)&v8);
      CMTime v7 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
      if (fpfs_CheckAudioSync(v5, a2, 0, &v8, &v7, 1, &v9))
      {
        CMTime v7 = v9;
        return fpfs_FinishAudioSyncAndStart((void *)a2, &v7);
      }
    }
    return 4294954368;
  }
  if (!fpfs_CheckVideoSyncQueue(a2, 1)) {
    return 4294954368;
  }

  return fpfs_FinishVideoSync(a2);
}

double fpfsi_PrepareTrackForReplay(uint64_t a1, long long *a2, uint64_t a3)
{
  long long refcon = *a2;
  uint64_t v11 = *((void *)a2 + 2);
  memset(v14, 0, 88);
  long long v12 = *(_OWORD *)(a1 + 128);
  uint64_t v13 = *(void *)(a1 + 144);
  if (*(unsigned char *)(a1 + 420))
  {
    CMTime v8 = *(CMTime *)a2;
    fpfs_DecodeTimeForAudioRandomAccessInBufferQueue(a1, &v8, (uint64_t)&rhs);
    CMTime v8 = *(CMTime *)a2;
    CMTimeSubtract(v14, &v8, &rhs);
  }
  else
  {
    v14[0] = *(CMTime *)(a1 + 396);
  }
  *(_OWORD *)&v14[1].CMTimeValue value = *(_OWORD *)(a1 + 216);
  CMTime v6 = *(opaqueCMBufferQueue **)(a1 + 72);
  v14[1].CMTimeEpoch epoch = *(void *)(a1 + 232);
  v14[2].CMTimeValue value = (CMTimeValue)v6;
  LOWORD(v14[2].timescale) = *(_DWORD *)(a1 + 32) == 1986618469;
  *(_OWORD *)&v14[2].CMTimeFlags flags = *MEMORY[0x1E4F1FA08];
  *(CMTimeValue *)((char *)&v14[3].value + 4) = *(void *)(MEMORY[0x1E4F1FA08] + 16);
  CMBufferQueueReset(v6);
  CMBufferQueueCallForEachBuffer(*(CMBufferQueueRef *)(a1 + 80), (OSStatus (__cdecl *)(CMBufferRef, void *))fpfsi_ReuseSamplesInQueue, &refcon);
  double result = *(double *)&v14[2].flags;
  *(_OWORD *)a3 = *(_OWORD *)&v14[2].flags;
  *(void *)(a3 + 16) = *(CMTimeValue *)((char *)&v14[3].value + 4);
  return result;
}

uint64_t fpfsi_ReuseSamplesInQueue(CMSampleBufferRef sbuf, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 105)
    || !fpfs_IsMarkerOnly(sbuf)
    || fpfs_IsMarkerSampleContainingAttachment(sbuf, (const __CFString *)*MEMORY[0x1E4F1F2E0]))
  {
    memset(&v13, 0, sizeof(v13));
    CMSampleBufferGetOutputPresentationTimeStamp(&v13, sbuf);
    memset(&v12, 0, sizeof(v12));
    CMTime lhs = *(CMTime *)a2;
    CMTime rhs = *(CMTime *)(a2 + 48);
    CMTimeSubtract(&v12, &lhs, &rhs);
    if (!fpfs_IsMarkerOnly(sbuf))
    {
      memset(&lhs, 0, sizeof(lhs));
      CMSampleBufferGetPresentationTimeStamp(&v9, sbuf);
      CMTime rhs = *(CMTime *)(a2 + 24);
      CMTimeAdd(&lhs, &v9, &rhs);
      memset(&rhs, 0, sizeof(rhs));
      CMSampleBufferGetDuration(&rhs, sbuf);
      memset(&v8, 0, sizeof(v8));
      if (rhs.flags)
      {
        CMTime time1 = lhs;
        CMTime time2 = rhs;
        CMTimeAdd(&v8, &time1, &time2);
      }
      else
      {
        CMTime v8 = lhs;
      }
      CMTime time1 = v8;
      CMTime time2 = v12;
      if (CMTimeCompare(&time1, &time2) < 0
        || (*(unsigned char *)(a2 + 84) & 1) != 0
        && (time1 = v8, CMTime time2 = *(CMTime *)(a2 + 72), CMTimeCompare(&time1, &time2) > 0))
      {
        if (!*(unsigned char *)(a2 + 104)) {
          return 0;
        }
        if (fpfs_IsVideoSync(sbuf))
        {
          CMTime time1 = lhs;
          CMTime time2 = v12;
          if (CMTimeCompare(&time1, &time2) < 0)
          {
            *(CMTime *)(a2 + 108) = v13;
            CMBufferQueueReset(*(CMBufferQueueRef *)(a2 + 96));
          }
        }
        CMTime time1 = v8;
        CMTime time2 = *(CMTime *)(a2 + 72);
        if (CMTimeCompare(&time1, &time2) >= 1)
        {
          memset(&time1, 0, sizeof(time1));
          CMSampleBufferGetOutputDecodeTimeStamp(&time1, sbuf);
          CMTime time2 = time1;
          CMTime v5 = *(CMTime *)(a2 + 72);
          if (CMTimeCompare(&time2, &v5) >= 1) {
            return 0;
          }
          fpfs_DoNotDisplay(sbuf);
        }
      }
      else
      {
        CMTime time1 = lhs;
        CMTime time2 = v13;
        if (CMTimeCompare(&time1, &time2))
        {
          CMRemoveAttachment(sbuf, (CFStringRef)*MEMORY[0x1E4F1F308]);
          CMTime time1 = lhs;
          CMSampleBufferSetOutputPresentationTimeStamp(sbuf, &time1);
        }
        CMRemoveAttachment(sbuf, (CFStringRef)*MEMORY[0x1E4F1F2B8]);
        fpfs_RemoveDoNotDisplay(sbuf);
      }
    }
    CMRemoveAttachment(sbuf, (CFStringRef)*MEMORY[0x1E4F1F2A8]);
    CMBufferQueueEnqueue(*(CMBufferQueueRef *)(a2 + 96), sbuf);
  }
  return 0;
}

void fpfs_DeferredAssessItemTransition(const void *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  memset(&v14, 0, sizeof(v14));
  memset(&v13, 0, sizeof(v13));
  fpfs_LockMutexWithCaller(a1);
  if (!*(unsigned char *)(DerivedStorage + 51))
  {
    if (*(void *)(DerivedStorage + 80))
    {
      uint64_t v3 = CMBaseObjectGetDerivedStorage();
      CFArrayRef Next = fpfs_getNext(DerivedStorage, *(const void **)(DerivedStorage + 80));
      if (Next)
      {
        CFArrayRef v5 = Next;
        fpfs_GetNextTimeToPlay(v3, 0, (uint64_t)&lhs);
        *(_OWORD *)&rhs.CMTimeValue value = kTimerVariability;
        rhs.CMTimeEpoch epoch = 0;
        CMTimeAdd(&v13, &lhs, &rhs);
        fpfsi_PredictedEndTime(&v14, *(void *)(DerivedStorage + 80), v6);
        CMTime time2 = v14;
        *(_OWORD *)&v17.CMTimeValue value = kGaplessTransitionDeadlineInterval;
        v17.CMTimeEpoch epoch = 0;
        CMTimeSubtract(&rhs, &time2, &v17);
        v17.CMTimeValue value = rhs.value;
        CMTimeFlags flags = rhs.flags;
        v17.CMTimeScale timescale = rhs.timescale;
        if (rhs.flags)
        {
          CMTimeEpoch epoch = rhs.epoch;
          rhs.CMTimeValue value = v17.value;
          rhs.CMTimeScale timescale = v17.timescale;
          CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
          if (CMTimeCompare(&rhs, &time2) >= 1)
          {
            CMTime rhs = v13;
            time2.CMTimeValue value = v17.value;
            time2.CMTimeScale timescale = v17.timescale;
            time2.CMTimeFlags flags = flags;
            time2.CMTimeEpoch epoch = epoch;
            if (CMTimeCompare(&rhs, &time2) <= 0)
            {
              fpfs_TransitionFromItemToItem(*(void *)(DerivedStorage + 80), v5);
            }
            else if (dword_1E9350BB0)
            {
              int v11 = 0;
              os_log_type_t type = OS_LOG_TYPE_DEFAULT;
              os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
          }
        }
      }
    }
  }
  fpfs_UnlockAndPostNotificationsWithCaller(a1);
  if (a1) {
    CFRelease(a1);
  }
}

uint64_t fpfs_PlayingVideoOnly()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = CMBaseObjectGetDerivedStorage();
  if (*(float *)(DerivedStorage + 848) == 0.0)
  {
    uint64_t result = *(void *)(DerivedStorage + 1704);
    if (result) {
      return FigAlternateIsIFrameOnly(result) != 0;
    }
  }
  else
  {
    float v2 = *(float *)(v1 + 108);
    return v2 > 2.0 || v2 < 0.0 || *(void *)(DerivedStorage + 2968);
  }
  return result;
}

void fpfsi_setPlaybackMonitorOkayToAttemptSwitchUp(uint64_t a1, int a2)
{
  int v3 = *(_DWORD *)(a1 + 524);
  char v4 = v3 == 1;
  CFTypeRef cf = 0;
  uint64_t v5 = *(void *)(a1 + 96);
  if (!v5
    || (v3 == 1 ? (BOOL v6 = a2 == 2) : (BOOL v6 = 0),
        !v6 ? (CMTime v7 = (void *)MEMORY[0x1E4F1CFC8]) : (CMTime v7 = (void *)MEMORY[0x1E4F1CFD0]),
        (uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8)) == 0 ? (v9 = 0) : (v9 = v8),
        (unint64_t v10 = *(unsigned int (**)(uint64_t, __CFString *, void))(v9 + 56)) != 0
     && !v10(v5, @"AfmfpbProperty_OkayToAttemptSwitchUp", *v7)))
  {
    uint64_t v11 = *(void *)(a1 + 936);
    if (v11)
    {
      uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
      uint64_t FigBaseObject = FigBytePumpGetFigBaseObject(v11);
      uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v14) {
        uint64_t v15 = v14;
      }
      else {
        uint64_t v15 = 0;
      }
      uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v15 + 48);
      if (v16)
      {
        v16(FigBaseObject, 0x1EE53EC18, AllocatorForMedia, &cf);
        if (cf)
        {
          FigCMCDHeaderVendorSetIsLikelyToKeepUp((uint64_t)cf, v4);
          if (cf) {
            CFRelease(cf);
          }
        }
      }
    }
  }
}

void fpfsi_InvalidatePumpForItem()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_DWORD *)(DerivedStorage + 456) = 2 * (*(_DWORD *)(DerivedStorage + 456) == 1);
  if (*(void *)(DerivedStorage + 936))
  {
    uint64_t v1 = DerivedStorage;
    CFTypeRef cf = 0;
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    FigStopForwardingMediaServicesProcessDeathNotification();
    uint64_t v2 = *(void *)(v1 + 936);
    uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
    uint64_t FigBaseObject = FigBytePumpGetFigBaseObject(v2);
    uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v5) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = 0;
    }
    CMTime v7 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v6 + 48);
    if (v7)
    {
      v7(FigBaseObject, 0x1EE53E3D8, AllocatorForMedia, &cf);
      CFTypeRef v8 = cf;
      uint64_t v9 = *(const void **)(v1 + 1920);
      *(void *)(v1 + 1920) = cf;
      if (v8) {
        CFRetain(v8);
      }
    }
    else
    {
      uint64_t v9 = *(const void **)(v1 + 1920);
      *(void *)(v1 + 1920) = 0;
    }
    if (v9) {
      CFRelease(v9);
    }
    if (cf) {
      CFRelease(cf);
    }
    fpfsi_RTCReportingReportIRATEventIfNeeded(v1, 801);
    uint64_t v10 = FigBytePumpGetFigBaseObject(*(void *)(v1 + 936));
    if (v10)
    {
      uint64_t v11 = v10;
      uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v12) {
        uint64_t v13 = v12;
      }
      else {
        uint64_t v13 = 0;
      }
      uint64_t v14 = *(void (**)(uint64_t))(v13 + 24);
      if (v14) {
        v14(v11);
      }
    }
    FigBytePumpRelease(*(CFTypeRef *)(v1 + 936));
    *(void *)(v1 + 936) = 0;
  }
}

void fpfsi_cleanupNetworkCostMonitor()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = *(void *)(DerivedStorage + 2256);
  if (v1)
  {
    uint64_t v2 = DerivedStorage;
    uint64_t v3 = *(void *)(DerivedStorage + 16);
    uint64_t GlobalNetworkBufferingQueue = FigThreadGetGlobalNetworkBufferingQueue();
    uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v5) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = 0;
    }
    CMTime v7 = *(void (**)(uint64_t, uint64_t, void, uint64_t))(v6 + 8);
    if (v7) {
      v7(v1, v3, 0, GlobalNetworkBufferingQueue);
    }
    SInt32 = (const void *)FigCFNumberCreateSInt32();
    if (SInt32)
    {
      uint64_t v9 = *(void *)(v2 + 2256);
      uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v11 = v10 ? v10 : 0;
      uint64_t v12 = *(void (**)(uint64_t, uint64_t, const void *))(v11 + 56);
      if (v12) {
        v12(v9, 0x1EE57E4B8, SInt32);
      }
    }
    uint64_t v13 = *(void *)(v2 + 2256);
    uint64_t v14 = *MEMORY[0x1E4F1CFC8];
    uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v15) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = 0;
    }
    CMTime v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 56);
    if (v17) {
      v17(v13, 0x1EE57E498, v14);
    }
    uint64_t v18 = *(void *)(v2 + 2256);
    uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v19) {
      uint64_t v20 = v19;
    }
    else {
      uint64_t v20 = 0;
    }
    uint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 56);
    if (v21) {
      v21(v18, 0x1EE57E4D8, v14);
    }
    if (SInt32) {
      CFRelease(SInt32);
    }
    uint64_t v22 = *(const void **)(v2 + 2256);
    if (v22)
    {
      CFRelease(v22);
      *(void *)(v2 + 2256) = 0;
    }
  }
}

void fpfs_SuggestedAlternateNote(int a1, uint64_t a2, int a3, int a4, CFDictionaryRef theDict)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  CFTypeRef v40 = 0;
  CFTypeRef cf = 0;
  memset(&v39, 0, sizeof(v39));
  memset(&v38, 0, sizeof(v38));
  if (!theDict) {
    return;
  }
  CFArrayRef Value = CFDictionaryGetValue(theDict, @"FBP_AlternateValue");
  if (!Value) {
    return;
  }
  CFTypeRef v8 = Value;
  int v9 = fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer(a2, &v40, &cf);
  CFTypeRef v10 = cf;
  if (!v9)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    CFTypeRef v12 = v40;
    uint64_t v13 = CMBaseObjectGetDerivedStorage();
    if (!*(void *)(DerivedStorage + 936)
      || (uint64_t v14 = v13, (v15 = *(void *)(DerivedStorage + 96)) == 0)
      || !FigAlternatePlaybackBitrateMonitorIsAlternateStillValid(v15, (uint64_t)v8)
      || FigCFEqual()
      || !*(unsigned char *)(v14 + 458))
    {
LABEL_49:
      fpfs_UnlockAndPostNotificationsWithCaller(v12);
      goto LABEL_50;
    }
    uint64_t v16 = CMBaseObjectGetDerivedStorage();
    uint64_t v17 = CMBaseObjectGetDerivedStorage();
    uint64_t v18 = *(void *)(v16 + 936);
    CMBaseObjectGetDerivedStorage();
    CFTypeRef v37 = v12;
    if (!v10 || !v18)
    {
      int v31 = 0;
      if (FigSignalErrorAt()) {
        goto LABEL_41;
      }
      goto LABEL_39;
    }
    uint64_t v19 = CMBaseObjectGetDerivedStorage();
    time.CMTimeValue value = 0;
    LODWORD(rhs.value) = 0;
    if (CFEqual(@"FBP_MaximumRecommendedCellularBitrate", @"FBP_InitialBandwidthTargetForNetwork")
      || CFEqual(@"FBP_MaximumRecommendedCellularBitrate", @"FBP_MaximumRecommendedCellularBitrate"))
    {
      uint64_t v20 = *(void *)(v19 + 936);
      uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
      uint64_t FigBaseObject = FigBytePumpGetFigBaseObject(v20);
      uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v23) {
        uint64_t v24 = v23;
      }
      else {
        uint64_t v24 = 0;
      }
      int v25 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, CMTime *))(v24 + 48);
      if (v25)
      {
        int v26 = v25(FigBaseObject, 0x1EE53E238, AllocatorForMedia, &time);
        if (v26 == -12783 || !v26)
        {
          if (!time.value)
          {
            CFTypeRef v12 = v37;
            goto LABEL_39;
          }
          CFTypeID v27 = CFGetTypeID((CFTypeRef)time.value);
          CFTypeRef v12 = v37;
          if (v27 == CFDictionaryGetTypeID())
          {
            if (FigCFDictionaryGetInt32IfPresent() && FigCFDictionaryGetBooleanIfPresent())
            {
              int v28 = rhs.value;
              goto LABEL_26;
            }
          }
          else
          {
            FigSignalErrorAt();
          }
          int v28 = 0;
LABEL_26:
          if (time.value) {
            CFRelease((CFTypeRef)time.value);
          }
          if (*(unsigned char *)(v17 + 768) && v28 > 0)
          {
            int v29 = *(_DWORD *)(v16 + 2384);
            if (v29 >= v28) {
              int v30 = v28;
            }
            else {
              int v30 = *(_DWORD *)(v16 + 2384);
            }
            if (v29 <= 0) {
              int v31 = v28;
            }
            else {
              int v31 = v30;
            }
LABEL_41:
            int PeakBitRate = FigAlternateGetPeakBitRate((uint64_t)v8);
            int v33 = PeakBitRate;
            if (!v31 || PeakBitRate < v31)
            {
              fpfs_GetNextTimeToPlay(DerivedStorage, 0, (uint64_t)&v39);
              if (v33 >= (int)FigAlternateGetPeakBitRate(*(void *)(DerivedStorage + 1704))) {
                unsigned int v34 = 2;
              }
              else {
                unsigned int v34 = 3;
              }
              if (dword_1E9350BB0)
              {
                os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
                CFTypeRef v12 = v37;
              }
              CMTime time = v39;
              CMTime rhs = *(CMTime *)(DerivedStorage + 1184);
              CMTimeAdd(&v38, &time, &rhs);
              uint64_t v36 = CFDictionaryGetValue(theDict, @"FBP_CacheContext");
              CMTime time = v38;
              CMTime rhs = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
              fpfs_SetAlternateWithContext((uint64_t)v12, v10, v8, 1u, &time, (uint64_t)&rhs, 0, 0, (uint64_t)v36, v34);
            }
            goto LABEL_49;
          }
LABEL_39:
          int v31 = *(_DWORD *)(v16 + 2384);
          if (v31 <= 0) {
            int v31 = 0;
          }
          goto LABEL_41;
        }
      }
      FigSignalErrorAt();
    }
    int v28 = 0;
    CFTypeRef v12 = v37;
    goto LABEL_26;
  }
LABEL_50:
  if (v10) {
    CFRelease(v10);
  }
  if (v40) {
    CFRelease(v40);
  }
}

void fpfs_SeekableTimeRangeChanged(uint64_t a1, uint64_t a2)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  CFTypeRef v51 = 0;
  CFTypeRef v52 = 0;
  CMTimeValue value = 0;
  CFTypeRef cf = 0;
  if (fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer(a2, &v52, &v51))
  {
    BOOL v35 = 0;
    goto LABEL_31;
  }
  CFArrayRef v2 = (const __CFArray *)v51;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v4 = v52;
  uint64_t v5 = CMBaseObjectGetDerivedStorage();
  if (*(void *)(DerivedStorage + 936))
  {
    uint64_t v12 = v5;
    memset(&time1, 0, sizeof(time1));
    if (!fpfsi_GetDuration((uint64_t)v2, (long long *)&time1.value) && (time1.flags & 0x11) == 0x11)
    {
      memset(&time1, 0, sizeof(time1));
      uint64_t v13 = CMBaseObjectGetDerivedStorage();
      if (*(float *)(v13 + 848) > 0.0)
      {
        uint64_t v14 = v13;
        fpfsi_GetPumpMaxTimeAvailable(v13, (uint64_t)&time);
        CMTimeValue v62 = time.value;
        CMTimeFlags flags = time.flags;
        CMTimeScale timescale = time.timescale;
        CMTimeEpoch epoch = time.epoch;
        fpfsi_GetCurrentTime((uint64_t)v2, (uint64_t)&time1);
        if ((flags & 0x1D) == 1 && (time1.flags & 0x1D) == 1)
        {
          lhs.CMTimeScale timescale = timescale;
          lhs.CMTimeFlags flags = flags;
          lhs.CMTimeEpoch epoch = epoch;
          CMTime rhs = *(CMTime *)(v14 + 1184);
          lhs.CMTimeValue value = v62;
          CMTimeSubtract(&time, &lhs, &rhs);
          CMTimeScale timescale = time.timescale;
          CMTimeValue v62 = time.value;
          CMTime lhs = time;
          CMTime rhs = time1;
          CMTimeSubtract(&time, &lhs, &rhs);
          double Seconds = CMTimeGetSeconds(&time);
          uint64_t v18 = *(void *)(v14 + 2544);
          if (v18)
          {
            double v19 = Seconds;
            uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 16);
            uint64_t v21 = v20 ? v20 : 0;
            uint64_t v22 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v21 + 40);
            if (v22) {
              v22(v18, 0x1EE582B78, 0x1EE562898, (uint64_t)(v19 * 1000.0));
            }
          }
        }
      }
    }
    uint64_t FigBaseObject = FigBytePumpGetFigBaseObject(*(void *)(DerivedStorage + 936));
    uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v24) {
      uint64_t v25 = v24;
    }
    else {
      uint64_t v25 = 0;
    }
    int v26 = *(unsigned int (**)(uint64_t, uint64_t, void, CFTypeRef *))(v25 + 48);
    if (!v26 || v26(FigBaseObject, 0x1EE53E178, 0, &cf))
    {
      BOOL v27 = 0;
LABEL_20:
      uint64_t v28 = *(void *)(DerivedStorage + 936);
      uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
      uint64_t v30 = FigBytePumpGetFigBaseObject(v28);
      uint64_t v31 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v31) {
        uint64_t v32 = v31;
      }
      else {
        uint64_t v32 = 0;
      }
      int v33 = *(void (**)(uint64_t, uint64_t, uint64_t, void **))(v32 + 48);
      if (v33) {
        v33(v30, 0x1EE53E1B8, AllocatorForMedia, &value);
      }
      if (fpfs_EnsureScanningBoundaryTimer(v2) == -12863) {
        fpfs_HandleScanningBoundaryTimerEnd(v2);
      }
      goto LABEL_27;
    }
    CMTimeMakeFromDictionary(&time1, (CFDictionaryRef)cf);
    *(CMTime *)(DerivedStorage + 1352) = time1;
    if (*(unsigned char *)(DerivedStorage + 1364)) {
      goto LABEL_64;
    }
    if (*(float *)(DerivedStorage + 848) == 0.0
      || (uint64_t v36 = *(void *)(DerivedStorage + 1048)) == 0
      || !fpfs_StopPlaybackByStalledTrack(v36, 4u))
    {
      if (dword_1E9350BB0)
      {
        LODWORD(lhs.value) = 0;
        LOBYTE(rhs.value) = 0;
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v38 = lhs.value;
        if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, rhs.value)) {
          unsigned int v39 = v38;
        }
        else {
          unsigned int v39 = v38 & 0xFFFFFFFE;
        }
        if (v39)
        {
          if (v4) {
            CFTypeRef v40 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
          }
          else {
            CFTypeRef v40 = "";
          }
          if (v2) {
            CMTime v41 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
          }
          else {
            CMTime v41 = "";
          }
          LODWORD(time.value) = 136316162;
          *(CMTimeValue *)((char *)&time.value + 4) = (CMTimeValue)"fpfs_SeekableTimeRangeChanged";
          LOWORD(time.flags) = 2048;
          *(void *)((char *)&time.flags + 2) = v4;
          HIWORD(time.epoch) = 2082;
          uint64_t v56 = v40;
          __int16 v57 = 2048;
          CFArrayRef v58 = v2;
          __int16 v59 = 2082;
          int v60 = v41;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      fpfs_PrepareForSeek(v2, 0xFFu, 1);
      CMTime v42 = *(uint64_t **)(DerivedStorage + 1616);
      if (v42)
      {
        do
        {
          uint64_t v43 = *v42;
          fpfsi_RemoveDateEntry(DerivedStorage, v42);
          CMTime v42 = (uint64_t *)v43;
        }
        while (v43);
      }
      if (*(_DWORD *)(v12 + 32))
      {
        BOOL v27 = *(float *)(v12 + 108) != 0.0;
        goto LABEL_65;
      }
LABEL_64:
      BOOL v27 = 0;
LABEL_65:
      uint64_t v44 = *(void **)(DerivedStorage + 1616);
      if (v44)
      {
        char v45 = 0;
        uint64_t v46 = *(void *)(DerivedStorage + 1616);
        do
        {
          if (*(unsigned char *)(v46 + 84)) {
            char v45 = (uint64_t *)v46;
          }
          uint64_t v46 = *(void *)v46;
        }
        while (v46);
        if (*v44)
        {
          while (1)
          {
            __int16 v47 = *(uint64_t **)(DerivedStorage + 1616);
            if (!v47) {
              break;
            }
            if (v47 == v45) {
              break;
            }
            uint64_t v48 = (CMTime *)*v47;
            if (!*v47) {
              break;
            }
            CMTime time1 = *(CMTime *)(DerivedStorage + 1352);
            CMTime time = v48[1];
            if (CMTimeCompare(&time1, &time) < 0) {
              break;
            }
            fpfsi_RemoveDateEntry(DerivedStorage, v47);
          }
        }
      }
      goto LABEL_20;
    }
  }
  BOOL v27 = 0;
LABEL_27:
  NotificationPayloadForProperties = fpfs_CreateNotificationPayloadForProperties(v4, (uint64_t)v2, v6, v7, v8, v9, v10, v11, @"SeekableTimeIntervals", 0);
  BOOL v35 = NotificationPayloadForProperties;
  if (value) {
    CFDictionarySetValue(NotificationPayloadForProperties, @"updateDate", value);
  }
  fpfs_EnqueueNotification(v4, @"SeekableRangeChanged", v2, v35);
  fpfs_UnlockAndPostNotificationsWithCaller(v4);
  if (v27)
  {
    CMBaseObjectGetDerivedStorage();
    fpfs_FlowControlPump(DerivedStorage, 0, 1, 255);
  }
LABEL_31:
  if (value) {
    CFRelease(value);
  }
  if (v35) {
    CFRelease(v35);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v51) {
    CFRelease(v51);
  }
  if (v52) {
    CFRelease(v52);
  }
}

void fpfs_DurationChanged(uint64_t a1, uint64_t a2)
{
  CFTypeRef cf = 0;
  *(void *)uint64_t v16 = 0;
  if (fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer(a2, (CFTypeRef *)v16, &cf))
  {
    int v6 = *(const void **)v16;
    if (*(void *)v16) {
LABEL_11:
    }
      CFRelease(v6);
  }
  else
  {
    CFTypeRef v2 = cf;
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    uint64_t v4 = CMBaseObjectGetDerivedStorage();
    uint64_t v5 = MEMORY[0x1E4F1F9F8];
    *(_OWORD *)(DerivedStorage + 1328) = *MEMORY[0x1E4F1F9F8];
    *(void *)(DerivedStorage + 1344) = *(void *)(v5 + 16);
    int v6 = *(const void **)v16;
    NotificationPayloadForProperties = fpfs_CreateNotificationPayloadForProperties(*(const void **)v16, (uint64_t)v2, v7, v8, v9, v10, v11, v12, @"CurrentDuration", 0);
    fpfs_EnqueueNotification(v6, @"DurationChanged", v2, NotificationPayloadForProperties);
    fpfsi_EnqueueEndTimeChangedNotification(v2);
    fpfsi_NowReadyForInspection((const __CFArray *)v2);
    if (*(_DWORD *)(v4 + 32)) {
      fpfsi_RTCReportingReportIRATEventIfNeeded(DerivedStorage, 800);
    }
    if (*(double *)(DerivedStorage + 2472) > 0.0
      && !*(void *)(DerivedStorage + 2480)
      && *(void *)(DerivedStorage + 40))
    {
      fpfsi_SetupIFramePrefetch((uint64_t)v2);
    }
    fpfs_UnlockAndPostNotificationsWithCaller(v6);
    if (NotificationPayloadForProperties) {
      CFRelease(NotificationPayloadForProperties);
    }
    if (v6) {
      goto LABEL_11;
    }
  }
  CFTypeRef v14 = cf;
  if (cf)
  {
    CFRelease(v14);
  }
}

void fpfs_bytePumpNewErrorEntry(uint64_t a1, uint64_t a2)
{
  CFTypeRef cf = 0;
  CFTypeRef v7 = 0;
  if (fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer(a2, &v7, &cf))
  {
    CFTypeRef v4 = v7;
    if (v7) {
LABEL_5:
    }
      CFRelease(v4);
  }
  else
  {
    CFTypeRef v2 = cf;
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    CFTypeRef v4 = v7;
    if (*(void *)(DerivedStorage + 936)) {
      fpfs_EnqueueNotification(v7, @"NewErrorLogEntry", v2, 0);
    }
    fpfs_UnlockAndPostNotificationsWithCaller(v4);
    if (v4) {
      goto LABEL_5;
    }
  }
  CFTypeRef v5 = cf;
  if (cf)
  {
    CFRelease(v5);
  }
}

void fpfsi_TaggedRangeMetadataChanged(uint64_t a1, uint64_t a2)
{
  CFTypeRef v5 = 0;
  CFTypeRef cf = 0;
  int v2 = fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer(a2, &cf, &v5);
  CFTypeRef v3 = cf;
  if (!v2)
  {
    fpfsi_UpdateTaggedRangeMetadataFromPumpAndNotifyIfNeeded(cf, v5, 1, 1);
    fpfs_UnlockAndPostNotificationsWithCaller(v3);
  }
  if (v3) {
    CFRelease(v3);
  }
  CFTypeRef v4 = v5;
  if (v5)
  {
    CFRelease(v4);
  }
}

void fpfsi_PrefersConcurrentSwitchChanged(uint64_t a1, uint64_t a2)
{
  CFTypeRef cf = 0;
  CFTypeRef v5 = 0;
  if (!fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer(a2, &v5, &cf))
  {
    fpfsi_UpdatePrefersConcurrentSwitching((const __CFArray *)cf);
    CFTypeRef v2 = v5;
    fpfs_UnlockAndPostNotificationsWithCaller(v5);
    if (!v2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  CFTypeRef v2 = v5;
  if (v5) {
LABEL_3:
  }
    CFRelease(v2);
LABEL_4:
  CFTypeRef v3 = cf;
  if (cf)
  {
    CFRelease(v3);
  }
}

void fpfs_RecommendedPrebufferReservationNote(uint64_t a1, uint64_t a2)
{
  CFTypeRef cf = 0;
  *(void *)uint64_t v13 = 0;
  if (fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer(a2, (CFTypeRef *)v13, &cf))
  {
    NotificationPayloadForProperties = 0;
    int v10 = *(const void **)v13;
    if (*(void *)v13) {
LABEL_6:
    }
      CFRelease(v10);
  }
  else
  {
    CFTypeRef v2 = cf;
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    int v10 = *(const void **)v13;
    if (*(void *)(DerivedStorage + 936))
    {
      NotificationPayloadForProperties = fpfs_CreateNotificationPayloadForProperties(*(const void **)v13, (uint64_t)v2, v4, v5, v6, v7, v8, v9, @"RecommendedTimeOffsetFromLive", @"TimeOffsetFromLive");
      if (NotificationPayloadForProperties) {
        fpfs_EnqueueNotification(v10, @"NewRecommendedTimeOffsetFromLive", v2, NotificationPayloadForProperties);
      }
    }
    else
    {
      NotificationPayloadForProperties = 0;
    }
    fpfs_UnlockAndPostNotificationsWithCaller(v10);
    if (v10) {
      goto LABEL_6;
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  if (NotificationPayloadForProperties)
  {
    CFRelease(NotificationPayloadForProperties);
  }
}

void fpfsi_deltaUpdateNote(int a1, CFTypeRef cf)
{
  CFTypeRef cfa = 0;
  CFTypeRef v4 = 0;
  if (cf) {
    CFRetain(cf);
  }
  if (fpfsi_CopyPlayerAndItemFromItemRetainProxy((uint64_t)cf, &v4, &cfa))
  {
    FigRetainProxyRelease();
  }
  else
  {
    CMBaseObjectGetDerivedStorage();
    CMNotificationCenterGetDefaultLocalCenter();
    FigGetAllocatorForMedia();
    FigDeferNotificationToDispatchQueue();
    if (cfa) {
      CFRelease(cfa);
    }
    if (v4) {
      CFRelease(v4);
    }
  }
}

void fpfsi_RTCReportingReportIRATEventIfNeeded(uint64_t a1, uint64_t a2)
{
  CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  uint64_t v4 = *(void *)(a1 + 936);
  if (v4)
  {
    int v5 = *(_DWORD *)(a1 + 2568);
    if (a2 == 800) {
      int v6 = 1;
    }
    else {
      int v6 = 2;
    }
    if (a2 == 800)
    {
      if (v5)
      {
        if (v5 == 1)
        {
LABEL_23:
          if (cf) {
            CFRelease(cf);
          }
          return;
        }
      }
      else
      {
        uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
        uint64_t FigBaseObject = FigBytePumpGetFigBaseObject(v4);
        uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v9) {
          uint64_t v10 = v9;
        }
        else {
          uint64_t v10 = 0;
        }
        int v11 = *(unsigned int (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v10 + 48);
        if (!v11 || v11(FigBaseObject, @"FBP_Duration", AllocatorForMedia, &cf)) {
          goto LABEL_23;
        }
      }
    }
    else if ((v5 & 0xFFFFFFFD) == 0)
    {
      goto LABEL_23;
    }
    uint64_t v12 = *(void *)(a1 + 2544);
    if (v12)
    {
      uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v13) {
        uint64_t v14 = v13;
      }
      else {
        uint64_t v14 = 0;
      }
      uint64_t v15 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, void, void))(v14 + 8);
      if (v15 && !v15(v12, 0x1EE582B78, a2, 0, 0)) {
        *(_DWORD *)(a1 + 2568) = v6;
      }
    }
    goto LABEL_23;
  }
}

void fpfsi_RemoveDateEntry(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = (const void *)a2[2];
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = *a2;
  int v6 = (void *)a2[1];
  if (*a2)
  {
    *(void *)(v5 + 8) = v6;
    int v6 = (void *)a2[1];
  }
  else
  {
    *(void *)(a1 + 1624) = v6;
  }
  *int v6 = v5;

  free(a2);
}

uint64_t fpfsi_GetCurrentTime(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    uint64_t v4 = (uint64_t)DerivedStorage;
    uint64_t v5 = (const void *)*DerivedStorage;
    fpfs_LockMutexWithCaller(*DerivedStorage);
    if (FigRetainProxyIsInvalidated())
    {
      uint64_t v6 = FigSignalErrorAt();
    }
    else
    {
      fpfs_GetNextTimeToPlay(v4, 0, (uint64_t)&v8);
      uint64_t v6 = 0;
      *(_OWORD *)a2 = v8;
      *(void *)(a2 + 16) = v9;
    }
    fpfs_UnlockAndPostNotificationsWithCaller(v5);
    return v6;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void fpfsi_EnqueueEndTimeChangedNotification(const void *a1)
{
  CFTypeRef v2 = *(const void **)CMBaseObjectGetDerivedStorage();
  NotificationPayloadForProperties = fpfs_CreateNotificationPayloadForProperties(v2, (uint64_t)a1, v3, v4, v5, v6, v7, v8, @"EndTime", 0);
  fpfs_EnqueueNotification(v2, @"EndTimeChanged", a1, NotificationPayloadForProperties);
  if (NotificationPayloadForProperties)
  {
    CFRelease(NotificationPayloadForProperties);
  }
}

void fpfsi_NowReadyForInspection(const __CFArray *a1)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  CFRetain(a1);
  if (!*(unsigned char *)(DerivedStorage + 460))
  {
    *(unsigned char *)(DerivedStorage + 460) = 1;
    NotificationPayloadForProperties = fpfs_CreateNotificationPayloadForProperties(*(const void **)DerivedStorage, (uint64_t)a1, v4, v5, v6, v7, v8, v9, @"CurrentDuration", 0);
    fpfs_PostNotificationWhenUnlocked(*(const void **)DerivedStorage, @"ReadyForInspection", a1, NotificationPayloadForProperties);
    if (NotificationPayloadForProperties) {
      CFRelease(NotificationPayloadForProperties);
    }
    if (*(double *)(DerivedStorage + 2040) == 0.0) {
      *(CFAbsoluteTime *)(DerivedStorage + 2040) = CFAbsoluteTimeGetCurrent();
    }
    if (*(void *)(DerivedStorage + 2232))
    {
      CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
      CFDictionaryRef v12 = CFDictionaryCreate(AllocatorForMedia, (const void **)&kFigPlaybackItemParameter_Properties, (const void **)(DerivedStorage + 2232), 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (v12)
      {
        CFDictionaryRef v13 = v12;
        fpfs_PostNotificationWhenUnlocked(*(const void **)DerivedStorage, @"ReadyForInspection", a1, v12);
        CFRelease(v13);
      }
    }
    if (*(unsigned char *)(DerivedStorage + 461))
    {
      *(unsigned char *)(DerivedStorage + 461) = 0;
      fpfsi_postSelectedMediaOptionsDidChangeNotification(a1);
    }
  }
  uint64_t v14 = CMBaseObjectGetDerivedStorage();
  uint64_t v15 = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)(v14 + 1856))
  {
    uint64_t v16 = v15;
    CFArrayRef Next = fpfs_getNext(v15, 0);
    if (Next)
    {
      uint64_t v18 = 0;
      do
      {
        CFArrayRef v19 = Next;
        if (Next != a1) {
          uint64_t v18 = (uint64_t)Next;
        }
        CFArrayRef Next = fpfs_getNext(v16, Next);
      }
      while (Next && v19 != a1);
      if (v19 == a1 && (!v18 || fpfsi_PumpHasEndedOrBufferedBeyondFwdEnd(v18)) && !*(unsigned char *)(v14 + 462))
      {
        long long v47 = *(_OWORD *)(DerivedStorage + 224);
        CMTimeEpoch v48 = *(void *)(DerivedStorage + 240);
        if (*(unsigned char *)(DerivedStorage + 332)) {
          uint64_t v20 = 0;
        }
        else {
          uint64_t v20 = *(void *)(DerivedStorage + 1600);
        }
        if (*(void *)(DerivedStorage + 1600)
          || *(void *)(DerivedStorage + 1608)
          || (*(unsigned char *)(DerivedStorage + 236) & 1) != 0)
        {
          goto LABEL_40;
        }
        double valuePtr = 0.0;
        CFNumberRef number = 0;
        uint64_t FigBaseObject = FigBytePumpGetFigBaseObject(*(void *)(DerivedStorage + 936));
        uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v22) {
          uint64_t v23 = v22;
        }
        else {
          uint64_t v23 = 0;
        }
        uint64_t v24 = *(unsigned int (**)(uint64_t, uint64_t, void, CFNumberRef *))(v23 + 48);
        if (v24 && !v24(FigBaseObject, 0x1EE53E5F8, 0, &number) && number)
        {
          CFNumberGetValue(number, kCFNumberDoubleType, &valuePtr);
          Float64 v25 = valuePtr;
          if (valuePtr >= 0.0)
          {
            if (dword_1E9350BB0)
            {
              int v44 = 0;
              os_log_type_t type = OS_LOG_TYPE_DEFAULT;
              os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              Float64 v25 = valuePtr;
            }
            CMTimeMakeWithSeconds(&start[0].start, v25, 1000);
            *(_OWORD *)(DerivedStorage + 1496) = *(_OWORD *)&start[0].start.value;
            *(void *)(DerivedStorage + 1512) = start[0].start.epoch;
          }
          CFRelease(number);
        }
        if ((*(unsigned char *)(DerivedStorage + 1508) & 1) == 0)
        {
LABEL_40:
          uint64_t v27 = 0;
        }
        else
        {
          CMTimeEpoch v48 = *(void *)(DerivedStorage + 1512);
          long long v47 = *(_OWORD *)(DerivedStorage + 1496);
          *(_OWORD *)&start[0].start.CMTimeValue value = *(_OWORD *)(DerivedStorage + 1496);
          start[0].start.CMTimeEpoch epoch = *(void *)(DerivedStorage + 1512);
          fpfsi_setLastSeekTimeSet(DerivedStorage, (uint64_t)start);
          long long v39 = *(_OWORD *)(DerivedStorage + 1496);
          *(_OWORD *)(DerivedStorage + 344) = v39;
          uint64_t v40 = *(void *)(DerivedStorage + 1512);
          *(void *)(DerivedStorage + 360) = v40;
          *(_OWORD *)(DerivedStorage + 368) = v39;
          *(void *)(DerivedStorage + 384) = v40;
          uint64_t v27 = 1;
        }
        uint64_t v28 = fpfsi_SetPumpRate(DerivedStorage, *(float *)(v3 + 108));
        if (!v28)
        {
          uint64_t v29 = *(void *)(DerivedStorage + 936);
          *(_OWORD *)&start[0].start.CMTimeValue value = v47;
          start[0].start.CMTimeEpoch epoch = v48;
          long long v41 = *MEMORY[0x1E4F1F9F8];
          *(_OWORD *)&duration.CMTimeValue value = *MEMORY[0x1E4F1F9F8];
          CMTimeEpoch v30 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
          duration.CMTimeEpoch epoch = v30;
          CMTimeRangeMake(&v42, &start[0].start, &duration);
          uint64_t v31 = *(void *)(DerivedStorage + 1608);
          uint64_t v32 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v32) {
            uint64_t v33 = v32;
          }
          else {
            uint64_t v33 = 0;
          }
          unsigned int v34 = *(uint64_t (**)(uint64_t, CMTimeRange *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v33 + 72);
          if (v34)
          {
            start[0] = v42;
            uint64_t v28 = v34(v29, start, v20, v31, v27, DerivedStorage + 952, DerivedStorage + 593);
            if (!v28)
            {
              uint64_t v35 = *(void *)(DerivedStorage + 1704);
              if (v35 && FigAlternateIsIFrameOnly(v35))
              {
                uint64_t v36 = CMBaseObjectGetDerivedStorage();
                uint64_t v37 = *(void *)(v36 + 1704);
                if (!v37 || !FigAlternateIsIFrameOnly(v37) || (*(unsigned char *)(v36 + 332) & 1) == 0) {
                  goto LABEL_55;
                }
                if (*(unsigned char *)(v36 + 1508))
                {
                  *(_OWORD *)(v36 + 1496) = v41;
                  *(void *)(v36 + 1512) = v30;
                }
                unsigned int v38 = *(_DWORD *)(v36 + 2204);
                CMTimeMakeWithSeconds(&start[0].start, *(Float64 *)(v36 + 1552), 1000);
                CMTime duration = *(CMTime *)(v36 + 320);
                if (!fpfs_IssueSeekToPump((uint64_t)a1, &duration, MEMORY[0x1E4F1F9F0], v38, 1, 0, MEMORY[0x1E4F1F9F8], MEMORY[0x1E4F1F9F8], (long long *)&start[0].start.value))LABEL_55:fpfs_setIFrameOnlyRate((uint64_t)a1, *(float *)(v3 + 108)); {
              }
                }
              *(unsigned char *)(DerivedStorage + 462) = 1;
              if (*(double *)(DerivedStorage + 2472) > 0.0
                && !*(void *)(DerivedStorage + 2480)
                && *(void *)(DerivedStorage + 40))
              {
                fpfsi_SetupIFramePrefetch((uint64_t)a1);
              }
              if (*(const __CFArray **)(v3 + 80) == a1) {
                fpfsi_checkCoordinatedPlaybackCapability(a1);
              }
              uint64_t v28 = fpfsi_EnsureVenueDescriptionMetadataSupplierIfNecessary((uint64_t)a1);
              if (!v28) {
                goto LABEL_67;
              }
            }
          }
          else
          {
            uint64_t v28 = 4294954514;
          }
        }
        FigCreateErrorForOSStatus(v28, (CFErrorRef *)&cf);
        fpfsi_NotReadyForInspection(a1, (uint64_t)cf);
        if (cf) {
          CFRelease(cf);
        }
      }
    }
  }
LABEL_67:
  CFRelease(a1);
}

void fpfsi_SetupIFramePrefetch(uint64_t a1)
{
  keys[3] = *(void **)MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMBaseObjectGetDerivedStorage();
  CFTypeRef v63 = 0;
  memset(&v62, 0, sizeof(v62));
  keys[1] = @"FSC_MemoryCacheSizeLimit";
  keys[2] = @"FSC_AddToDonorPool";
  values = @"FSC_MemoryBacking";
  CFNumberRef v66 = 0;
  uint64_t v3 = *MEMORY[0x1E4F1CFD0];
  uint64_t v67 = *MEMORY[0x1E4F1CFD0];
  keys[0] = @"FSC_Backing";
  CFTypeRef v4 = (CFTypeRef)*MEMORY[0x1E4F1CFC8];
  CFTypeRef v59 = (CFTypeRef)*MEMORY[0x1E4F1CFC8];
  CFTypeRef v60 = 0;
  CFTypeRef cf = 0;
  fpfsi_RTCReportingUpdatePlayerType(DerivedStorage, @"scrub");
  if (*(void *)(DerivedStorage + 2480))
  {
    uint64_t v5 = *(void *)(DerivedStorage + 936);
    if (v5)
    {
      uint64_t FigBaseObject = FigBytePumpGetFigBaseObject(v5);
      uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v8 = v7 ? v7 : 0;
      int v9 = *(void (**)(uint64_t, uint64_t, void))(v8 + 56);
      if (v9) {
        v9(FigBaseObject, 0x1EE53E498, 0);
      }
    }
    fpfsi_TearDownIFramePrefetcher();
  }
  int valuePtr = 0;
  double v10 = *(double *)(DerivedStorage + 2472);
  if (v10 == 0.0 && *(double *)(DerivedStorage + 2464) == 0.0) {
    goto LABEL_92;
  }
  if (v10 <= 0.0 || *(double *)(DerivedStorage + 2464) <= 0.0) {
    goto LABEL_46;
  }
  if (!*(void *)(DerivedStorage + 936))
  {
LABEL_92:
    CFDictionaryRef v34 = 0;
    CFNumberRef v32 = 0;
    goto LABEL_48;
  }
  if (fpfsi_GetDuration(a1, (long long *)&v62.value))
  {
LABEL_47:
    CFDictionaryRef v34 = 0;
    CFNumberRef v32 = 0;
    goto LABEL_48;
  }
  if ((v62.flags & 0x1D) != 1)
  {
LABEL_46:
    FigSignalErrorAt();
    goto LABEL_47;
  }
  uint64_t v11 = *(void *)(DerivedStorage + 936);
  uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
  uint64_t v13 = FigBytePumpGetFigBaseObject(v11);
  uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v14) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0;
  }
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v15 + 48);
  if (!v16) {
    goto LABEL_44;
  }
  int v17 = v16(v13, 0x1EE53ED58, AllocatorForMedia, &v59);
  if (v17 && v17 != -12783) {
    goto LABEL_47;
  }
  if (v59 != v4)
  {
LABEL_91:
    FigSignalErrorAt();
    goto LABEL_92;
  }
  uint64_t v18 = *(void *)(DerivedStorage + 936);
  uint64_t v19 = FigGetAllocatorForMedia();
  uint64_t v20 = FigBytePumpGetFigBaseObject(v18);
  uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 8);
  uint64_t v22 = v21 ? v21 : 0;
  uint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v22 + 48);
  if (!v23)
  {
LABEL_44:
    CFDictionaryRef v34 = 0;
    CFNumberRef v32 = 0;
    goto LABEL_48;
  }
  int v24 = v23(v20, 0x1EE53E498, v19, &v63);
  if (v24 && v24 != -12783) {
    goto LABEL_47;
  }
  if (v63) {
    goto LABEL_91;
  }
  CFArrayRef v25 = *(const __CFArray **)(DerivedStorage + 1688);
  if (!v25) {
    goto LABEL_46;
  }
  if (!CFArrayGetCount(v25)) {
    goto LABEL_46;
  }
  CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 1688), 0);
  if (!ValueAtIndex) {
    goto LABEL_46;
  }
  uint64_t v27 = (uint64_t)ValueAtIndex;
  AverageBitdouble Rate = FigAlternateGetAverageBitRate((uint64_t)ValueAtIndex);
  if (!AverageBitRate) {
    AverageBitdouble Rate = FigAlternateGetPeakBitRate(v27);
  }
  if (AverageBitRate >= 1000000) {
    int v29 = 1000000;
  }
  else {
    int v29 = AverageBitRate;
  }
  CMTime time = v62;
  int v30 = (int)(CMTimeGetSeconds(&time) * (double)v29 * 0.125 * 0.5);
  if (v30 >= 419430400) {
    int v30 = 419430400;
  }
  int valuePtr = v30;
  CFNumberRef v31 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, &valuePtr);
  CFNumberRef v32 = v31;
  if (v31)
  {
    __int16 v57 = (const void *)v27;
    CFNumberRef v66 = v31;
    CFAllocatorRef v33 = (const __CFAllocator *)FigGetAllocatorForMedia();
    CFDictionaryRef v34 = CFDictionaryCreate(v33, (const void **)keys, (const void **)&values, 3, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (v34
      && ((uint64_t v35 = *(void *)(DerivedStorage + 32),
           uint64_t v36 = FigGetAllocatorForMedia(),
           uint64_t CMBaseObject = FigAssetGetCMBaseObject(v35),
           (uint64_t v38 = *(void *)(CMBaseObjectGetVTable() + 8)) == 0)
        ? (uint64_t v39 = 0)
        : (uint64_t v39 = v38),
          (long long v41 = *(unsigned int (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v39 + 48)) != 0
       && !v41(CMBaseObject, @"assetProperty_ResolvedURL", v36, &v60)
       && v60))
    {
      CFAllocatorRef v42 = (const __CFAllocator *)FigGetAllocatorForMedia();
      if (!FigStreamingCacheCreate(v42, (const __CFURL *)v60, v34, (uint64_t *)&v63))
      {
        uint64_t v43 = FigBytePumpGetFigBaseObject(*(void *)(DerivedStorage + 936));
        uint64_t v44 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v45 = v44 ? v44 : 0;
        uint64_t v46 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v45 + 56);
        if (v46)
        {
          if (!v46(v43, 0x1EE53E4D8, v3))
          {
            uint64_t v47 = FigBytePumpGetFigBaseObject(*(void *)(DerivedStorage + 936));
            uint64_t v48 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v48) {
              uint64_t v49 = v48;
            }
            else {
              uint64_t v49 = 0;
            }
            CMTime v50 = *(void (**)(uint64_t, uint64_t, CFTypeRef))(v49 + 56);
            if (v50) {
              v50(v47, 0x1EE53E4F8, v4);
            }
            CFTypeRef v51 = v63;
            uint64_t v52 = FigBytePumpGetFigBaseObject(*(void *)(DerivedStorage + 936));
            uint64_t v53 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v53) {
              uint64_t v54 = v53;
            }
            else {
              uint64_t v54 = 0;
            }
            __int16 v55 = *(unsigned int (**)(uint64_t, uint64_t, CFTypeRef))(v54 + 56);
            if (v55)
            {
              if (!v55(v52, 0x1EE53E498, v51))
              {
                uint64_t v56 = FigGetAllocatorForMedia();
                if (!FigFramePrefetcherCreate(v56, *(void *)(DerivedStorage + 32), v63, v57, &cf))
                {
                  CMNotificationCenterGetDefaultLocalCenter();
                  if (!FigNotificationCenterAddWeakListener()
                    && !FigFramePrefetcherActivate((uint64_t)cf))
                  {
                    *(void *)(DerivedStorage + 2480) = cf;
                    CFTypeRef cf = 0;
                  }
                }
              }
            }
          }
        }
      }
    }
    else
    {
      FigSignalErrorAt();
    }
  }
  else
  {
    FigSignalErrorAt();
    CFDictionaryRef v34 = 0;
  }
LABEL_48:
  if (dword_1E9350BB0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v63) {
    CFRelease(v63);
  }
  if (v60) {
    CFRelease(v60);
  }
  if (v34) {
    CFRelease(v34);
  }
  if (v32) {
    CFRelease(v32);
  }
  if (v59) {
    CFRelease(v59);
  }
}

void fpfsi_postSelectedMediaOptionsDidChangeNotification(const void *a1)
{
  CFTypeRef v2 = *(const void **)CMBaseObjectGetDerivedStorage();
  NotificationPayloadForProperties = fpfs_CreateNotificationPayloadForProperties(v2, (uint64_t)a1, v3, v4, v5, v6, v7, v8, @"SelectedMediaArray", 0);
  fpfs_EnqueueNotification(v2, @"SelectedMediaOptionsDidChange", a1, NotificationPayloadForProperties);
  if (NotificationPayloadForProperties)
  {
    CFRelease(NotificationPayloadForProperties);
  }
}

uint64_t fpfsi_SetPumpRate(uint64_t result, float a2)
{
  if (result)
  {
    uint64_t v2 = *(void *)(result + 936);
    if (v2)
    {
      uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v4) {
        uint64_t v6 = v4;
      }
      else {
        uint64_t v6 = 0;
      }
      int v7 = *(uint64_t (**)(uint64_t, __n128))(v6 + 96);
      if (v7)
      {
        v5.n128_f32[0] = a2;
        return v7(v2, v5);
      }
      else
      {
        return 4294954514;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void fpfsi_checkCoordinatedPlaybackCapability(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v3 = *(unsigned __int8 *)(DerivedStorage + 3232);
  long long v17 = *MEMORY[0x1E4F1F9F0];
  uint64_t v18 = *(void *)(MEMORY[0x1E4F1F9F0] + 16);
  if (*(void *)(DerivedStorage + 936))
  {
    uint64_t v4 = DerivedStorage;
    memset(v20, 0, sizeof(v20));
    memset(v19, 0, sizeof(v19));
    CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    CFDateRef v7 = CFDateCreate(AllocatorForMedia, Current);
    uint64_t v8 = *(void *)(v4 + 936);
    uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v9) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v11 = *(uint64_t (**)(uint64_t, CFDateRef, void *, void *))(v10 + 40);
    if (v11) {
      BOOL v12 = v11(v8, v7, v20, v19) != -12649;
    }
    else {
      BOOL v12 = 1;
    }
    fpfsi_GetDuration((uint64_t)a1, &v17);
    int v13 = (BYTE12(v17) & 0x1D) == 1 || v12;
    *(unsigned char *)(v4 + 3232) = v13;
    if (v3 != v13)
    {
      CFMutableStringRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (Mutable)
      {
        uint64_t v15 = Mutable;
        uint64_t v16 = (const void **)MEMORY[0x1E4F1CFD0];
        if (!*(unsigned char *)(v4 + 3232)) {
          uint64_t v16 = (const void **)MEMORY[0x1E4F1CFC8];
        }
        CFDictionarySetValue(Mutable, @"IsCoordinatedPlaybackSupported", *v16);
        fpfs_EnqueueNotification(*(const void **)v4, @"CoordinatePlaybackSupportChanged", a1, v15);
        CFRelease(v15);
      }
    }
    if (v7) {
      CFRelease(v7);
    }
  }
}

uint64_t fpfsi_EnsureVenueDescriptionMetadataSupplierIfNecessary(uint64_t a1)
{
  CFTypeRef cf[27] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = CMBaseObjectGetDerivedStorage();
  cf[0] = 0;
  int valuePtr = 0;
  if (*(void *)(DerivedStorage + 744)
    || (uint64_t v4 = v3, !*(void *)(v3 + 432))
    || !*(void *)(DerivedStorage + 936)
    || !*(unsigned char *)(DerivedStorage + 462))
  {
    uint64_t v28 = 0;
    CFStringRef v8 = 0;
    goto LABEL_35;
  }
  __n128 v5 = (uint64_t *)(DerivedStorage + 744);
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  if (a1) {
    CFDateRef v7 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
  }
  else {
    CFDateRef v7 = "";
  }
  CFStringRef v8 = CFStringCreateWithCString(AllocatorForMedia, v7, 0x600u);
  uint64_t v9 = FigGetAllocatorForMedia();
  uint64_t v10 = FigVenueDescriptionMetadataSupplierCreate(v9, *(const void **)(DerivedStorage + 32), v8, (void *)(DerivedStorage + 744));
  if (!v10)
  {
    if (!*v5)
    {
LABEL_34:
      uint64_t v28 = 0;
      goto LABEL_35;
    }
    if (dword_1E9350BB0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CMNotificationCenterGetDefaultLocalCenter();
    uint64_t v10 = FigNotificationCenterAddWeakListener();
    if (!v10)
    {
      uint64_t v12 = *v5;
      uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v13) {
        uint64_t v14 = v13;
      }
      else {
        uint64_t v14 = 0;
      }
      uint64_t v15 = *(void (**)(uint64_t, __CFString *, void, CFTypeRef *))(v14 + 48);
      if (v15)
      {
        v15(v12, @"SMS_ProcessingStatus", 0, cf);
        CFNumberRef v16 = (const __CFNumber *)cf[0];
      }
      else
      {
        CFNumberRef v16 = 0;
      }
      CFNumberGetValue(v16, kCFNumberSInt32Type, &valuePtr);
      if (valuePtr == 2)
      {
        uint64_t v28 = 4294950069;
        goto LABEL_43;
      }
      CMNotificationCenterGetDefaultLocalCenter();
      uint64_t v10 = FigNotificationCenterAddWeakListener();
      if (!v10)
      {
        CFArrayRef v17 = *(const __CFArray **)(v4 + 432);
        if (v17 && CFArrayGetCount(v17))
        {
          uint64_t v18 = *v5;
          uint64_t v19 = *(void *)(v4 + 432);
          uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 8);
          uint64_t v21 = v20 ? v20 : 0;
          uint64_t v22 = *(void (**)(uint64_t, __CFString *, uint64_t))(v21 + 56);
          if (v22) {
            v22(v18, @"SMS_VideoTargetArray", v19);
          }
        }
        uint64_t v23 = *(void *)(DerivedStorage + 2544);
        if (v23)
        {
          uint64_t v24 = *v5;
          uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 8);
          uint64_t v26 = v25 ? v25 : 0;
          uint64_t v27 = *(void (**)(uint64_t, __CFString *, uint64_t))(v26 + 56);
          if (v27) {
            v27(v24, @"SMS_ReportingAgent", v23);
          }
        }
        goto LABEL_34;
      }
    }
  }
  uint64_t v28 = v10;
LABEL_43:
  fpfs_StopPlayingItemWithOSStatus(v4, a1, v28);
LABEL_35:
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  if (v8) {
    CFRelease(v8);
  }
  return v28;
}

void fpfsi_NotReadyForInspection(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  uint64_t v5 = CMBaseObjectGetDerivedStorage();
  CFRetain(a1);
  uint64_t v6 = DerivedStorage[117];
  if (v6)
  {
    CFTypeRef cf = 0;
    uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
    uint64_t FigBaseObject = FigBytePumpGetFigBaseObject(v6);
    uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v9) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v10 + 48);
    if (v11) {
      v11(FigBaseObject, 0x1EE53E3D8, AllocatorForMedia, &cf);
    }
    if (!FigRetainProxyIsInvalidated())
    {
      uint64_t v12 = (const void *)DerivedStorage[240];
      CFTypeRef v13 = cf;
      DerivedStorage[240] = cf;
      if (v13) {
        CFRetain(v13);
      }
      if (v12) {
        CFRelease(v12);
      }
    }
    if (cf) {
      CFRelease(cf);
    }
  }
  fpfs_StopPlayingItem(v5, a1, a2);
  uint64_t v14 = (const void *)DerivedStorage[279];
  if (v14)
  {
    CFRelease(v14);
    DerivedStorage[279] = 0;
  }
  CFRelease(a1);
}

void fpfsi_DeferredHandleVenueDescriptionMetadataProcessingStatusNotification(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  CFTypeRef v13 = 0;
  int v6 = fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer(a2, &v13, &cf);
  CFTypeRef v7 = cf;
  if (!v6)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    CFTypeRef v9 = v13;
    CMBaseObjectGetDerivedStorage();
    if (a5)
    {
      FigCFDictionaryGetInt32IfPresent();
      if (dword_1E9350BB0)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      uint64_t v11 = *(void *)DerivedStorage;
      long long v16 = *MEMORY[0x1E4F1F9F8];
      uint64_t v17 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
      long long v14 = v16;
      uint64_t v15 = v17;
      fpfs_setRateInternal(v11, v7, &v16, &v14, 0.0);
      *(unsigned char *)(DerivedStorage + 464) = 0;
    }
    fpfs_UnlockAndPostNotificationsWithCaller(v9);
  }
  if (v7) {
    CFRelease(v7);
  }
  if (v13) {
    CFRelease(v13);
  }
}

void fpfsi_DeferredHandleVenueDescriptionMetadataTransferringNotification(uint64_t a1, uint64_t a2)
{
  CFTypeRef cf = 0;
  CFTypeRef v7 = 0;
  int v2 = fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer(a2, &v7, &cf);
  CFStringRef v3 = (const __CFString *)cf;
  if (!v2)
  {
    CMBaseObjectGetDerivedStorage();
    CFTypeRef v4 = v7;
    if (v3 == *(const __CFString **)(CMBaseObjectGetDerivedStorage() + 80)) {
      fpfsi_scheduleFVTTransitionsForItem(v3, 0, 0);
    }
    fpfs_UnlockAndPostNotificationsWithCaller(v4);
  }
  if (v3) {
    CFRelease(v3);
  }
  CFTypeRef v5 = v7;
  if (v7)
  {
    CFRelease(v5);
  }
}

uint64_t fpfsi_RTCReportingUpdatePlayerType(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = *(void *)(result + 2544);
    if (v2)
    {
      uint64_t VTable = CMBaseObjectGetVTable();
      uint64_t v6 = *(void *)(VTable + 16);
      uint64_t result = VTable + 16;
      uint64_t v5 = v6;
      uint64_t v7 = v6 ? v5 : 0;
      CFStringRef v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v7 + 48);
      if (v8)
      {
        return v8(v2, 0x1EE582B78, 0x1EE583C78, a2, 0);
      }
    }
  }
  return result;
}

void fpfsi_TearDownIFramePrefetcher()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)(DerivedStorage + 2480))
  {
    uint64_t v1 = DerivedStorage;
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    uint64_t v2 = *(const void **)(v1 + 2480);
    if (v2)
    {
      CFRelease(v2);
      *(void *)(v1 + 2480) = 0;
    }
  }
}

void fpfsi_IFramePrefetchCompleted(uint64_t a1, uint64_t a2)
{
  CFTypeRef cf = 0;
  CFTypeRef v5 = 0;
  if (!fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer(a2, &v5, &cf))
  {
    fpfsi_TearDownIFramePrefetcher(cf);
    CFTypeRef v2 = v5;
    fpfs_UnlockAndPostNotificationsWithCaller(v5);
    if (!v2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  CFTypeRef v2 = v5;
  if (v5) {
LABEL_3:
  }
    CFRelease(v2);
LABEL_4:
  CFTypeRef v3 = cf;
  if (cf)
  {
    CFRelease(v3);
  }
}

void fpfsi_UpdateTaggedRangeMetadataFromPumpAndNotifyIfNeeded(const void *a1, const void *a2, int a3, int a4)
{
  CFDateRef v28 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)(DerivedStorage + 936))
  {
    uint64_t v9 = DerivedStorage;
    fpfsi_CopyCurrentDate((uint64_t)a2, &v28);
    CFDateRef v10 = v28;
    if (v28)
    {
      uint64_t v11 = (CFArrayRef *)(v9 + 2600);
      uint64_t v12 = *(const void **)(v9 + 2600);
      if (v12)
      {
        CFRelease(v12);
        *uint64_t v11 = 0;
      }
      uint64_t v13 = *(void *)(v9 + 936);
      uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
      uint64_t FigBaseObject = FigBytePumpGetFigBaseObject(v13);
      uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v16) {
        uint64_t v17 = v16;
      }
      else {
        uint64_t v17 = 0;
      }
      uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 48);
      if (v18) {
        v18(FigBaseObject, 0x1EE53E6F8, AllocatorForMedia, v9 + 2600);
      }
      if (*v11)
      {
        CFIndex Count = CFArrayGetCount(*v11);
        memset(&v27, 0, sizeof(v27));
        fpfs_GetTime(v9, (uint64_t)&v27);
        if (Count >= 1)
        {
          for (CFIndex i = 0; i != Count; ++i)
          {
            CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*v11, i);
            if (!CFDictionaryGetValue(ValueAtIndex, @"TaggedRangeMetadataKey_StartTime"))
            {
              CFDateRef Value = (const __CFDate *)CFDictionaryGetValue(ValueAtIndex, @"TaggedRangeMetadataKey_StartDate");
              Float64 TimeIntervalSinceDate = CFDateGetTimeIntervalSinceDate(Value, v10);
              CMTimeMakeWithSeconds(&rhs, TimeIntervalSinceDate, 1000);
              CMTime v24 = v27;
              CMTimeAdd(&v26, &v24, &rhs);
              CMTime v24 = v26;
              FigCFDictionarySetCMTime();
            }
          }
        }
      }
      else if (a3 != 1)
      {
LABEL_20:
        CFRelease(v10);
        return;
      }
      if (a4) {
        fpfsi_EnqueueTaggedRangeMetadataChangedNotificationIfNeeded(a1, a2);
      }
      goto LABEL_20;
    }
  }
}

uint64_t fpfsi_CopyCurrentDate(uint64_t a1, CFDateRef *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  memset(&v7, 0, sizeof(v7));
  fpfs_GetNextTimeToPlay(DerivedStorage, 0, (uint64_t)&v7);
  CMTime v6 = v7;
  return fpfsi_CopyDateForTime(a1, &v6, a2);
}

uint64_t fpfsi_EnqueueTaggedRangeMetadataChangedNotificationIfNeeded(const void *a1, const void *a2)
{
  if (*(uint64_t *)(CMBaseObjectGetDerivedStorage() + 2608) < 1) {
    return 0;
  }
  NotificationPayloadForProperties = fpfs_CreateNotificationPayloadForProperties(a1, (uint64_t)a2, v4, v5, v6, v7, v8, v9, @"TaggedRangeMetadataArray", 0);
  if (NotificationPayloadForProperties)
  {
    uint64_t v11 = NotificationPayloadForProperties;
    uint64_t v12 = fpfs_EnqueueNotification(a1, @"TaggedRangeMetadataChanged", a2, NotificationPayloadForProperties);
    CFRelease(v11);
    return v12;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t fpfsi_CopyDateForTime(uint64_t a1, CMTime *a2, CFDateRef *a3)
{
  memset(&v16, 0, sizeof(v16));
  CMBaseObjectGetDerivedStorage();
  CMTime v15 = *a2;
  uint64_t DateEntryForTime = fpfsi_getDateEntryForTime(a1, &v15, 1);
  if (!DateEntryForTime) {
    return 4294954513;
  }
  uint64_t v7 = DateEntryForTime;
  double DateEntryTimelineOrigin = fpfsi_getDateEntryTimelineOrigin(DateEntryForTime, &v16);
  double v9 = MEMORY[0x199707BD0](*(void *)(v7 + 16), DateEntryTimelineOrigin);
  CMTime v15 = *a2;
  double v10 = v9 + CMTimeGetSeconds(&v15);
  CMTime v15 = v16;
  CFAbsoluteTime v11 = v10 - CMTimeGetSeconds(&v15);
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFDateRef v13 = CFDateCreate(AllocatorForMedia, v11);
  uint64_t result = 0;
  *a3 = v13;
  return result;
}

uint64_t fpfsi_getDateEntryForTime(uint64_t a1, CMTime *a2, int a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v6 = **(void **)(*(void *)(DerivedStorage + 1624) + 8);
  if (v6)
  {
    uint64_t v7 = DerivedStorage;
    while (1)
    {
      uint64_t v8 = **(void **)(*(void *)(v6 + 8) + 8);
      if (*(unsigned char *)(v6 + 84))
      {
        memset(&v14, 0, sizeof(v14));
        fpfsi_getDateEntryTimelineOrigin(v6, &v14);
        if (!v8) {
          break;
        }
        CMTime time1 = *a2;
        CMTime v12 = v14;
        if ((CMTimeCompare(&time1, &v12) & 0x80000000) == 0) {
          break;
        }
      }
      uint64_t v6 = v8;
      if (!v8)
      {
        if (!a3) {
          return 0;
        }
        uint64_t v9 = **(void **)(*(void *)(v7 + 1624) + 8);
        if (!v9) {
          return 0;
        }
        uint64_t v10 = **(void **)(*(void *)(v9 + 8) + 8);
        memset(&v14, 0, sizeof(v14));
        fpfsi_getDateEntryTimelineOrigin(v9, &v14);
        if (!v10) {
          return v9;
        }
        do
        {
          uint64_t v6 = v9;
          uint64_t v9 = v10;
          CMTime time1 = *a2;
          CMTime v12 = v14;
          if ((CMTimeCompare(&time1, &v12) & 0x80000000) == 0) {
            break;
          }
          uint64_t v10 = **(void **)(*(void *)(v10 + 8) + 8);
          memset(&v14, 0, sizeof(v14));
          fpfsi_getDateEntryTimelineOrigin(v9, &v14);
          uint64_t v6 = v9;
        }
        while (v10);
        return v6;
      }
    }
  }
  return v6;
}

double fpfsi_getDateEntryTimelineOrigin@<D0>(uint64_t a1@<X0>, CMTime *a2@<X8>)
{
  a2->CMTimeValue value = 0;
  *(void *)&a2->CMTimeScale timescale = 0;
  a2->CMTimeEpoch epoch = 0;
  if (*(unsigned char *)(a1 + 84))
  {
    CMTime lhs = *(CMTime *)(a1 + 72);
    CMTime v4 = *(CMTime *)(a1 + 96);
    CMTimeAdd(&v6, &lhs, &v4);
  }
  else
  {
    CMTime lhs = *(CMTime *)(a1 + 24);
    CMTime v4 = *(CMTime *)(a1 + 48);
    CMTimeSubtract(&v6, &lhs, &v4);
  }
  double result = *(double *)&v6.value;
  *a2 = v6;
  return result;
}

uint64_t fpfsi_UpdatePrefersConcurrentSwitching(const __CFArray *a1)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  CFBooleanRef BOOLean = 0;
  uint64_t v3 = *(void *)(result + 936);
  if (v3)
  {
    uint64_t v4 = result;
    uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
    uint64_t FigBaseObject = FigBytePumpGetFigBaseObject(v3);
    uint64_t VTable = CMBaseObjectGetVTable();
    uint64_t v9 = *(void *)(VTable + 8);
    uint64_t result = VTable + 8;
    uint64_t v8 = v9;
    uint64_t v10 = v9 ? v8 : 0;
    CFAbsoluteTime v11 = *(void (**)(uint64_t, uint64_t, uint64_t, CFBooleanRef *))(v10 + 48);
    if (v11)
    {
      v11(FigBaseObject, 0x1EE53EA78, AllocatorForMedia, &BOOLean);
      uint64_t result = (uint64_t)BOOLean;
      if (BOOLean)
      {
        int v12 = *(unsigned __int8 *)(v4 + 553);
        uint64_t result = CFBooleanGetValue(BOOLean);
        if (v12 != result)
        {
          int Value = CFBooleanGetValue(BOOLean);
          *(unsigned char *)(v4 + 553) = Value;
          if (Value)
          {
            fpfsi_setTimePitchAlgorithm(a1, @"Varispeed");
            fpfs_EstablishTimebase(a1);
          }
          else
          {
            if (*(float *)(v4 + 848) != 0.0)
            {
              uint64_t result = fpfs_StopPlaybackByStalledTrack(*(void *)(v4 + 1048), 5u);
              if (result) {
                return result;
              }
              uint64_t v14 = MEMORY[0x1E4F1F9F8];
              *(_OWORD *)(v4 + 408) = *MEMORY[0x1E4F1F9F8];
              *(void *)(v4 + 424) = *(void *)(v14 + 16);
            }
            if (*(void *)(v4 + 1768)) {
              fpfs_CancelTrialSwitch((uint64_t)a1);
            }
          }
          return fpfsi_setPlaybackRateMonitorProperty(v4, @"AfmfpbProperty_PrefersConcurrentSwitch", (uint64_t)BOOLean);
        }
      }
    }
  }
  return result;
}

uint64_t fpfsi_setTimePitchAlgorithm(const __CFArray *a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2
    && (int v5 = (const void **)DerivedStorage, TypeID = CFStringGetTypeID(), TypeID == CFGetTypeID(a2))
    && (CFEqual(a2, @"TimeDomain")
     || CFEqual(a2, @"Spectral")
     || CFEqual(a2, @"LowQualityZeroLatency")
     || CFEqual(a2, @"Varispeed")))
  {
    if (!CFEqual(a2, v5[110]))
    {
      uint64_t v7 = CMBaseObjectGetDerivedStorage();
      uint64_t v8 = v5[110];
      v5[110] = a2;
      CFRetain(a2);
      if (v8) {
        CFRelease(v8);
      }
      if (*(const __CFArray **)(v7 + 80) == a1)
      {
        if (dword_1E9350BB0)
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        fpfs_stopResetDisturbReprepareAndResume(*v5, a1, 0);
      }
    }
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void fpfsi_deferredDeltaUpdateNote(uint64_t a1, const void *a2)
{
  CFTypeRef v13 = 0;
  CFTypeRef v14 = 0;
  long long v11 = 0uLL;
  uint64_t v12 = 0;
  memset(&v10, 0, sizeof(v10));
  if (fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer((uint64_t)a2, &v13, &v14))
  {
    CFTypeRef v6 = v13;
    if (v13) {
LABEL_7:
    }
      CFRelease(v6);
  }
  else
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    Float64 Rate = CMTimebaseGetRate(*(CMTimebaseRef *)(DerivedStorage + 576));
    if (FigCFDictionaryGetCMTimeIfPresent())
    {
      if (FigCFDictionaryGetCMTimeIfPresent())
      {
        int v5 = *(const void **)(DerivedStorage + 3168);
        if (v5)
        {
          long long v8 = v11;
          uint64_t v9 = v12;
          CMTime v7 = v10;
          FigRateMinderUpdateRateWithTimestamps(v5, (uint64_t)&v8, &v7, Rate);
        }
      }
    }
    CFTypeRef v6 = v13;
    fpfs_UnlockAndPostNotificationsWithCaller(v13);
    if (v6) {
      goto LABEL_7;
    }
  }
  if (v14) {
    CFRelease(v14);
  }
  if (a2) {
    CFRelease(a2);
  }
}

void fpfsi_StopGearSwitchReleaseAndCleanPlaybackMonitor(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 96);
  if (v1)
  {
    uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v3) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    int v5 = *(void (**)(uint64_t, __CFString *, void))(v4 + 56);
    if (v5) {
      v5(v1, @"AfmfpbProperty_SwitchesQualityGearAutomatically", *MEMORY[0x1E4F1CFC8]);
    }
    CFTypeRef v6 = *(const void **)(a1 + 96);
    if (v6)
    {
      CFRelease(v6);
      *(void *)(a1 + 96) = 0;
    }
  }
}

void fpfsi_validAlternatesHaveChanged(uint64_t a1, uint64_t a2)
{
  CFTypeRef v14 = 0;
  CFTypeRef cf = 0;
  if (fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer(a2, &v14, &cf))
  {
    CFTypeRef v9 = v14;
    if (v14) {
LABEL_14:
    }
      CFRelease(v9);
  }
  else
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    uint64_t v3 = DerivedStorage;
    if (*(unsigned char *)(DerivedStorage + 136))
    {
      *(unsigned char *)(DerivedStorage + 136) = 0;
    }
    else if (*(void *)(DerivedStorage + 40))
    {
      uint64_t v4 = *(void *)(DerivedStorage + 96);
      if (v4)
      {
        long long v12 = *MEMORY[0x1E4F1DB30];
        FigAlternatePlaybackBitrateMonitorGetMaxResolutionAndBitrate(*(double *)&v12, *((double *)&v12 + 1), v4, (double *)&v12, (int *)(v3 + 2876), 0);
        uint64_t v5 = *(void *)(v3 + 1704);
        if (v5)
        {
          unsigned int v10 = 0;
          unsigned int v11 = -1;
          fpfs_DetermineRanksOfVariant(v3, v5, (int *)&v11, &v10);
          unsigned int v7 = v10;
          unsigned int v6 = v11;
          if (v11 != *(_DWORD *)(v3 + 1752) || v10 != *(_DWORD *)(v3 + 1756))
          {
            *(_DWORD *)(v3 + 1752) = v11;
            *(_DWORD *)(v3 + 1756) = v7;
            fpfsi_RTCReportingUpdateVariantRank(v3, v6, v7);
          }
        }
        if (!FigAlternatePlaybackBitrateMonitorIsAlternateStillValid(*(void *)(v3 + 96), *(void *)(v3 + 1728))&& !FigAlternateSelectionBossRemoveFilter(*(void *)(v3 + 40), @"RecoveryAlternateSkipBitrateRange"))
        {
          long long v8 = *(const void **)(v3 + 1728);
          if (v8)
          {
            CFRelease(v8);
            *(void *)(v3 + 1728) = 0;
          }
        }
      }
    }
    CFTypeRef v9 = v14;
    fpfs_UnlockAndPostNotificationsWithCaller(v14);
    if (v9) {
      goto LABEL_14;
    }
  }
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t fpfsi_AssetBecameEligibleForDownload()
{
  FigRetainProxyRetain();
  CMNotificationCenterGetDefaultLocalCenter();
  dispatch_get_global_queue(0, 0);
  FigGetAllocatorForMedia();

  return FigDeferNotificationToDispatchQueue();
}

uint64_t fpfsi_DeferredAssetBecameEligibleForDownload(uint64_t a1, uint64_t a2)
{
  CFTypeRef v12 = 0;
  CFTypeRef v13 = 0;
  CFTypeRef v10 = 0;
  CFTypeRef cf = 0;
  if (!fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer(a2, &v13, &v12))
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    uint64_t v3 = *(void *)(DerivedStorage + 32);
    uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
    uint64_t CMBaseObject = FigAssetGetCMBaseObject(v3);
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    long long v8 = *(unsigned int (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v7 + 48);
    if (v8
      && !v8(CMBaseObject, @"assetProperty_CreationURL", AllocatorForMedia, &v10)
      && !FigCFURLIsLocalResource()
      && !FigAssetDownloadCoordinatorCopyDestinationURLForAsset(*(void *)(DerivedStorage + 32), &cf)
      && cf)
    {
      fpfsi_StartDownloadingToURL(DerivedStorage, cf);
    }
    fpfs_UnlockAndPostNotificationsWithCaller(v13);
    if (cf) {
      CFRelease(cf);
    }
  }
  if (v10) {
    CFRelease(v10);
  }
  if (v12) {
    CFRelease(v12);
  }
  if (v13) {
    CFRelease(v13);
  }
  return FigRetainProxyRelease();
}

void fpfsi_StartDownloadingToURL(uint64_t a1, const void *a2)
{
  CFTypeRef v32 = 0;
  CFTypeRef v33 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v31 = 0;
  if (!*(void *)(a1 + 936)) {
    goto LABEL_29;
  }
  if (FigAssetDownloadCoordinatorCopyClientBundleIdentifierForAsset(*(void *)(a1 + 32), &v33)) {
    goto LABEL_30;
  }
  CFTypeRef v4 = v33;
  if (v33)
  {
    uint64_t FigBaseObject = FigBytePumpGetFigBaseObject(*(void *)(a1 + 936));
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v7 = v6 ? v6 : 0;
    long long v8 = *(unsigned int (**)(uint64_t, uint64_t, CFTypeRef))(v7 + 56);
    if (!v8 || v8(FigBaseObject, 0x1EE53E638, v4)) {
      goto LABEL_30;
    }
  }
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
  uint64_t CMBaseObject = FigAssetGetCMBaseObject(v9);
  uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
  uint64_t v13 = v12 ? v12 : 0;
  CFTypeRef v14 = *(unsigned int (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v13 + 48);
  if (!v14 || v14(CMBaseObject, @"assetProperty_OriginalNetworkContentURL", AllocatorForMedia, &v32)) {
    goto LABEL_30;
  }
  if (!v32)
  {
LABEL_29:
    FigSignalErrorAt();
LABEL_30:
    CFDictionaryRef v23 = 0;
    goto LABEL_31;
  }
  uint64_t v15 = *(void *)(a1 + 936);
  uint64_t v16 = FigGetAllocatorForMedia();
  uint64_t v17 = FigBytePumpGetFigBaseObject(v15);
  uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v18) {
    uint64_t v19 = v18;
  }
  else {
    uint64_t v19 = 0;
  }
  uint64_t v20 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v19 + 48);
  if (v20) {
    v20(v17, 0x1EE53EA58, v16, &cf);
  }
  if (FigCFEqual()) {
    goto LABEL_30;
  }
  CFAllocatorRef v21 = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFMutableStringRef Mutable = CFDictionaryCreateMutable(v21, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionaryRef v23 = Mutable;
  if (!Mutable) {
    goto LABEL_42;
  }
  CFDictionarySetValue(Mutable, @"FSC_DownloadDestinationURL", a2);
  CFAllocatorRef v24 = (const __CFAllocator *)FigGetAllocatorForMedia();
  if (FigStreamingCacheCreate(v24, (const __CFURL *)v32, v23, (uint64_t *)&v31)) {
    goto LABEL_31;
  }
  CFTypeRef v25 = v31;
  if (v31)
  {
    uint64_t v26 = FigBytePumpGetFigBaseObject(*(void *)(a1 + 936));
    uint64_t v27 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v27) {
      uint64_t v28 = v27;
    }
    else {
      uint64_t v28 = 0;
    }
    int v29 = *(void (**)(uint64_t, uint64_t, CFTypeRef))(v28 + 56);
    if (v29) {
      v29(v26, 0x1EE53E498, v25);
    }
  }
  else
  {
LABEL_42:
    FigSignalErrorAt();
  }
LABEL_31:
  if (cf) {
    CFRelease(cf);
  }
  if (v33) {
    CFRelease(v33);
  }
  if (v23) {
    CFRelease(v23);
  }
  if (v31) {
    CFRelease(v31);
  }
  if (v32) {
    CFRelease(v32);
  }
}

uint64_t fpfs_FirstCandidateSyncTrackOfDiscontinuityDomainAndType(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(CMBaseObjectGetDerivedStorage() + 1048);
  if (v3) {
    BOOL v4 = v3 == a2;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4) {
    return 0;
  }
  while (1)
  {
    if (*(_DWORD *)(v3 + 152) == 6
      && *(_DWORD *)(v3 + 32) == *(_DWORD *)(a2 + 32)
      && *(void *)(v3 + 64) == *(void *)(a2 + 64))
    {
      CMTime time1 = *(CMTime *)(a2 + 272);
      CMTime v7 = *(CMTime *)(v3 + 216);
      if (CMTimeCompare(&time1, &v7) < 0) {
        break;
      }
    }
    uint64_t v3 = *(void *)(v3 + 8);
    if (v3) {
      BOOL v5 = v3 == a2;
    }
    else {
      BOOL v5 = 1;
    }
    if (v5) {
      return 0;
    }
  }
  return v3;
}

uint64_t fpfsi_TrialSwitchDownInProgress(uint64_t a1)
{
  if (!*(void *)(a1 + 1704)) {
    return 0;
  }
  uint64_t result = *(void *)(a1 + 1768);
  if (result)
  {
    int PeakBitRate = FigAlternateGetPeakBitRate(result);
    return PeakBitRate < (int)FigAlternateGetPeakBitRate(*(void *)(a1 + 1704));
  }
  return result;
}

double fpfs_GetFirstPTSInRange(opaqueCMSampleBuffer *a1, CMTime *a2)
{
  memset(&v9, 0, sizeof(v9));
  CMSampleBufferGetOutputPresentationTimeStamp(&v9, a1);
  if (!fpfs_IsMarkerOnly(a1))
  {
    BOOL v5 = a2 + 1;
    CMTime time1 = v9;
    CMTime time2 = a2[1];
    if (CMTimeCompare(&time1, &time2) < 1
      || (CMSampleBufferGetOutputDecodeTimeStamp(&v6, a1),
          *(_OWORD *)&time1.CMTimeValue value = *(_OWORD *)&v5->value,
          time1.CMTimeEpoch epoch = a2[1].epoch,
          CMTimeCompare(&v6, &time1) <= 0))
    {
      CMTime time1 = v9;
      CMTime time2 = *a2;
      if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
      {
        CMTime time1 = v9;
        *(_OWORD *)&time2.CMTimeValue value = *(_OWORD *)&v5->value;
        time2.CMTimeEpoch epoch = a2[1].epoch;
        if (CMTimeCompare(&time1, &time2) <= 0)
        {
          CMTime time1 = v9;
          CMTime time2 = a2[2];
          if (CMTimeCompare(&time1, &time2) < 0)
          {
            double result = *(double *)&v9.value;
            a2[2] = v9;
          }
        }
      }
    }
  }
  return result;
}

CMTime *fpfs_TimeAfterPlayback@<X0>(uint64_t a1@<X0>, CMTime *a2@<X1>, CMTime *a3@<X2>, CMTime *a4@<X8>)
{
  if (*(float *)(a1 + 108) >= 0.0)
  {
    CMTime lhs = *a2;
    CMTime v5 = *a3;
    return CMTimeAdd(a4, &lhs, &v5);
  }
  else
  {
    CMTime lhs = *a2;
    CMTime v5 = *a3;
    return CMTimeSubtract(a4, &lhs, &v5);
  }
}

uint64_t fpfs_CountNonDroppableUntil(opaqueCMSampleBuffer *a1, uint64_t a2)
{
  memset(&v10, 0, sizeof(v10));
  CMSampleBufferGetOutputDecodeTimeStamp(&v10, a1);
  memset(&v9, 0, sizeof(v9));
  CMSampleBufferGetOutputDuration(&v9, a1);
  if (!fpfs_IsMarkerOnly(a1))
  {
    CMTime time1 = v10;
    CMTime time2 = *(CMTime *)a2;
    if (CMTimeCompare(&time1, &time2) <= 0)
    {
      if (fpfs_IsVideoDependedOnByOthers(a1)) {
        ++*(void *)(a2 + 48);
      }
      if (v9.flags)
      {
        ++*(void *)(a2 + 56);
        CMTime time2 = *(CMTime *)(a2 + 24);
        CMTime rhs = v9;
        CMTimeAdd(&time1, &time2, &rhs);
        *(CMTime *)(a2 + 24) = time1;
      }
    }
    else
    {
      CMSampleBufferGetOutputPresentationTimeStamp(&v5, a1);
      CMTime time1 = *(CMTime *)a2;
      if (CMTimeCompare(&v5, &time1) > 0) {
        return 0xFFFFFFFFLL;
      }
    }
  }
  return 0;
}

double fpfs_VideoSyncSearch(opaqueCMSampleBuffer *a1, uint64_t a2)
{
  memset(&v9, 0, sizeof(v9));
  memset(&v8, 0, sizeof(v8));
  if (fpfs_IsVideoSync(a1))
  {
    CMSampleBufferGetOutputPresentationTimeStamp(&v9, a1);
    CMTime lhs = v9;
    CMTime v6 = *(CMTime *)(a2 + 24);
    CMTimeAdd(&v8, &lhs, &v6);
    CMTime lhs = v9;
    CMTime v6 = *(CMTime *)(a2 + 120);
    if (CMTimeCompare(&lhs, &v6) < 0)
    {
      CMTime lhs = *(CMTime *)a2;
      CMTime v6 = v8;
      if (CMTimeCompare(&lhs, &v6) <= 0)
      {
        CMTime lhs = v9;
        CMTime v6 = *(CMTime *)(a2 + 48);
        if (CMTimeCompare(&lhs, &v6) >= 1)
        {
          CMTime v5 = (CMTime *)(a2 + 72);
LABEL_10:
          double result = *(double *)&v9.value;
          *CMTime v5 = v9;
          return result;
        }
      }
      CMTime v5 = (CMTime *)(a2 + 96);
      if ((*(_DWORD *)(a2 + 108) & 0x1D) != 1) {
        goto LABEL_10;
      }
      CMTime lhs = v9;
      CMTime v6 = *(CMTime *)a2;
      if (CMTimeCompare(&lhs, &v6) <= 0) {
        goto LABEL_10;
      }
    }
  }
  return result;
}

uint64_t fpfsi_deferredMarkerBufferConsumed(int a1, uint64_t a2, int a3, const void *a4, CFDictionaryRef theDict)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  CFTypeRef v34 = 0;
  CFTypeRef cf = 0;
  if (!theDict || !CFDictionaryGetValue(theDict, @"renderPipelineToStart"))
  {
    CMTime v7 = 0;
    goto LABEL_7;
  }
  CMTime v7 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v7)
  {
LABEL_7:
    char v9 = 1;
    goto LABEL_19;
  }
  if (dword_1E9350BB0)
  {
    LODWORD(v33.value) = 0;
    LOBYTE(type.value) = 0;
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v10 = *MEMORY[0x1E4F1CFC8];
  uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(v7);
  uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v12) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  CFTypeRef v14 = *(void (**)(uint64_t, __CFString *, uint64_t))(v13 + 56);
  if (v14) {
    v14(FigBaseObject, @"VideoDecoderIsSecondary", v10);
  }
  uint64_t v15 = FigRenderPipelineGetFigBaseObject(v7);
  uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v16) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = 0;
  }
  uint64_t v18 = *(void (**)(uint64_t, __CFString *, uint64_t))(v17 + 56);
  if (v18) {
    v18(v15, @"Suspended", v10);
  }
  char v9 = 0;
LABEL_19:
  if (fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer(a2, &cf, &v34))
  {
    CFTypeRef v19 = cf;
    if (!cf) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  CFStringRef v21 = (const __CFString *)v34;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v23 = *(void *)(DerivedStorage + 1048);
  if (v23)
  {
    uint64_t v24 = DerivedStorage;
    while (!*(void *)(v23 + 96) || !FigCFEqual())
    {
      uint64_t v23 = *(void *)(v23 + 8);
      if (!v23) {
        goto LABEL_46;
      }
    }
    CFTypeRef v25 = *(const void **)(*(void *)(v23 + 96) + 64);
    if (v25)
    {
      CFRelease(v25);
      *(void *)(*(void *)(v23 + 96) + 64) = 0;
    }
    if ((v9 & 1) == 0)
    {
      uint64_t v26 = *(void *)(v23 + 8);
      if (v26)
      {
        while (*(_DWORD *)(v26 + 32) != *(_DWORD *)(v23 + 32) || !*(void *)(v26 + 96))
        {
          uint64_t v26 = *(void *)(v26 + 8);
          if (!v26) {
            goto LABEL_46;
          }
        }
        memset(&v33, 0, sizeof(v33));
        memset(&type, 0, sizeof(type));
        if (dword_1E9350BB0)
        {
          CFTypeRef v31 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        fpfsi_scheduleFVTTransitionsForItem(v21, 3, 0);
        fpfsi_RTCReportingReportFormatTransition((uint64_t)v21, v23, v26);
        fpfsi_RTCReportingUpdateCompletedDecodeForPrerollTime(v24);
        FPSupport_getVideoDecodeWaterLevels(&type, &v33, 1);
        CMTime time = v33;
        double Seconds = CMTimeGetSeconds(&time);
        uint64_t v28 = malloc_type_malloc(0x10uLL, 0x1020040EDED9539uLL);
        *uint64_t v28 = FigRetainProxyRetain();
        v28[1] = *(void *)(v26 + 16);
        dispatch_time_t v29 = dispatch_time(0, (uint64_t)(Seconds * 1000000000.0));
        global_queue = dispatch_get_global_queue(0, 0);
        dispatch_after_f(v29, global_queue, v28, (dispatch_function_t)fpfs_PrerollTrackDispatch);
      }
    }
  }
LABEL_46:
  CFTypeRef v19 = cf;
  fpfs_UnlockAndPostNotificationsWithCaller(cf);
  if (v19) {
LABEL_21:
  }
    CFRelease(v19);
LABEL_22:
  if (v34) {
    CFRelease(v34);
  }
  if ((v9 & 1) == 0) {
    CFRelease(v7);
  }
  if (a4) {
    CFRelease(a4);
  }
  return FigRetainProxyRelease();
}

uint64_t fpfs_StepIFrame(uint64_t a1, long long *a2)
{
  uint64_t v139 = *MEMORY[0x1E4F143B8];
  BOOL v4 = *(const void **)a1;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v6 = CMBaseObjectGetDerivedStorage();
  memset(&v108, 0, sizeof(v108));
  fpfs_GetNextTimeToPlay(DerivedStorage, 0, (uint64_t)&v108);
  memset(&v107, 0, sizeof(v107));
  *(unsigned char *)(DerivedStorage + 1564) = 1;
  double Current = CFAbsoluteTimeGetCurrent();
  double v8 = *(double *)(DerivedStorage + 1544);
  long long v9 = *a2;
  *(void *)(a1 + 232) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 216) = v9;
  if (*(const void **)(v6 + 80) != v4) {
    return 0;
  }
  double v10 = Current - v8;
  if ((*(unsigned char *)(DerivedStorage + 1532) & 1) == 0)
  {
    uint64_t v11 = 0;
    goto LABEL_25;
  }
  if (*(double *)(DerivedStorage + 2176) == 0.0)
  {
    number[0].CMTimeValue value = 0;
    valuePtr.CMTimeValue value = 0x4020000000000000;
    uint64_t v12 = *(void *)(DerivedStorage + 936);
    uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
    FigBytePumpGetFigBaseObject(v12);
    uint64_t v15 = v14;
    uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v16) {
      uint64_t v17 = v16;
    }
    else {
      uint64_t v17 = 0;
    }
    uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, CMTime *))(v17 + 48);
    if (v18)
    {
      uint64_t v11 = v18(v15, 0x1EE53E778, AllocatorForMedia, number);
      *(void *)(DerivedStorage + 2176) = 0x4020000000000000;
      double v19 = 8.0;
      CMTimeValue value = (const void *)number[0].value;
      if (!v11)
      {
        CFNumberGetValue((CFNumberRef)number[0].value, kCFNumberDoubleType, &valuePtr);
        double v19 = *(double *)(DerivedStorage + 2176);
        CMTimeValue value = (const void *)number[0].value;
      }
      if (v19 >= *(double *)&valuePtr.value) {
        double v19 = *(double *)&valuePtr.value;
      }
      *(double *)(DerivedStorage + 2176) = v19;
      if (value) {
        CFRelease(value);
      }
    }
    else
    {
      double v21 = *(double *)&valuePtr.value;
      if (*(double *)&valuePtr.value > 8.0) {
        double v21 = 8.0;
      }
      *(double *)(DerivedStorage + 2176) = v21;
      uint64_t v11 = 4294954514;
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  number[0] = *(CMTime *)a2;
  CMTime valuePtr = *(CMTime *)(DerivedStorage + 1520);
  CMTimeSubtract(&v107, number, &valuePtr);
  number[0] = v107;
  CMTime valuePtr = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  if (CMTimeCompare(number, &valuePtr))
  {
    double v22 = *(float *)(v6 + 108);
    number[0] = v107;
    double v23 = v22 / CMTimeGetSeconds(number);
    ++*(void *)(DerivedStorage + 2160);
    *(double *)(DerivedStorage + 2168) = v23 + *(double *)(DerivedStorage + 2168);
    double v24 = *(double *)(DerivedStorage + 2176);
    if (v23 >= v24 * 0.33)
    {
      if (v23 >= v24 * 0.66) {
        goto LABEL_25;
      }
      CFTypeRef v25 = (void *)(DerivedStorage + 2192);
    }
    else
    {
      CFTypeRef v25 = (void *)(DerivedStorage + 2184);
    }
    ++*v25;
  }
LABEL_25:
  int v26 = *(_DWORD *)(DerivedStorage + 1532);
  if (v10 <= 0.0)
  {
    if ((v26 & 1) == 0) {
      goto LABEL_62;
    }
  }
  else
  {
    if ((v26 & 1) == 0) {
      goto LABEL_62;
    }
    float v27 = (v10 + (float)(*(float *)(DerivedStorage + 1560) + *(float *)(DerivedStorage + 1560))) / 3.0;
    *(float *)(DerivedStorage + 1560) = v27;
  }
  uint64_t v103 = v6;
  uint64_t v28 = CMBaseObjectGetDerivedStorage();
  uint64_t v100 = CMBaseObjectGetDerivedStorage();
  memset(&v114, 0, sizeof(v114));
  fpfs_CurrentSubStreamBufferedDuration(*(unsigned __int8 *)(v28 + 1112), (uint64_t)&v114);
  CFArrayRef v29 = *(const __CFArray **)(v28 + 1688);
  CFIndex Count = CFArrayGetCount(v29);
  CFIndex v31 = Count;
  CFIndex v32 = Count - 1;
  if (Count < 1)
  {
    if (!Count)
    {
LABEL_37:
      FigSignalErrorAt();
LABEL_61:
      uint64_t v6 = v103;
      goto LABEL_62;
    }
    CFIndex v33 = 0;
  }
  else
  {
    CFIndex v33 = 0;
    while (CFArrayGetValueAtIndex(v29, v33) != *(const void **)(v28 + 1704))
    {
      if (v31 == ++v33) {
        goto LABEL_37;
      }
    }
    if (v31 == v33) {
      goto LABEL_37;
    }
    if (v33)
    {
      float v34 = *(float *)(v28 + 928);
      if (v34 > 0.0 && 1.0 / v34 < *(float *)(v28 + 1560) && *(float *)(v100 + 108) != 0.0)
      {
        number[0] = v114;
        if (CMTimeGetSeconds(number) / fabsf(*(float *)(v100 + 108)) < 1.0)
        {
          CFIndex v35 = v33;
          do
            BOOL v36 = v35-- < 1;
          while (!v36 && 1.0 / (*(float *)(v28 + 928) + 2.0) < fpfs_ProjectedDeliveryTime(v28, v35));
          CFIndex v37 = v35 & ~(v35 >> 63);
          CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v29, v37);
          if (ValueAtIndex)
          {
            CFIndex v99 = v37;
            unsigned int v39 = 1;
            uint64_t v40 = ValueAtIndex;
            goto LABEL_53;
          }
        }
      }
    }
  }
  if (v33 >= v32) {
    goto LABEL_61;
  }
  if (*(float *)(v28 + 1560) > 0.111111111) {
    goto LABEL_61;
  }
  if (fpfs_ProjectedDeliveryTime(v28, v33 + 1) > 0.1) {
    goto LABEL_61;
  }
  long long v41 = CFArrayGetValueAtIndex(v29, v33 + 1);
  if (!v41) {
    goto LABEL_61;
  }
  uint64_t v40 = v41;
  CFIndex v99 = v33 + 1;
  unsigned int v39 = 0;
LABEL_53:
  memset(&rhs, 0, sizeof(rhs));
  fpfs_GetNextTimeToPlay(v28, 0, (uint64_t)&lhs);
  number[0] = *(CMTime *)(v28 + 1184);
  CMTimeAdd(&rhs, &lhs, number);
  memset(&v111, 0, sizeof(v111));
  CMTimeMakeWithSeconds(&v111, 0.142857143, 1000);
  CMTime v134 = v111;
  long long v135 = *MEMORY[0x1E4F1F9F8];
  uint64_t v136 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  long long v137 = v135;
  uint64_t v138 = v136;
  *(CFAbsoluteTime *)(v28 + 1544) = CFAbsoluteTimeGetCurrent();
  uint64_t v42 = *(void *)v28;
  number[0] = rhs;
  CMTime valuePtr = v111;
  uint64_t v43 = v40;
  int v44 = fpfs_SetAlternateWithContext(v42, v4, v40, v39, number, (uint64_t)&valuePtr, (uint64_t)&v134, 0, 0, 0);
  if (!v44 && dword_1E9350BB0)
  {
    CFTypeRef cf = (CFTypeRef)FigCFCopyCompactDescription();
    uint64_t DescriptionString = FigAlternateCreateDescriptionString(v43);
    uint64_t v46 = (const void *)DescriptionString;
    if (dword_1E9350BB0)
    {
      uint64_t v97 = (const void *)DescriptionString;
      unsigned int v110 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v48 = v110;
      BOOL v49 = os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type);
      unsigned int v50 = v48 & 0xFFFFFFFE;
      if (v49) {
        unsigned int v50 = v48;
      }
      if (v50)
      {
        uint64_t v51 = *(void *)v28;
        if (*(void *)v28) {
          uint64_t v52 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
        }
        else {
          uint64_t v52 = "";
        }
        float v89 = v10;
        if (v4) {
          int v90 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
        }
        else {
          int v90 = "";
        }
        if (v99 >= v33) {
          *(double *)&uint64_t v91 = COERCE_DOUBLE("up");
        }
        else {
          *(double *)&uint64_t v91 = COERCE_DOUBLE("down");
        }
        number[0] = rhs;
        Float64 Seconds = CMTimeGetSeconds(number);
        double v93 = *(float *)(v28 + 1560);
        number[0] = v114;
        Float64 v94 = CMTimeGetSeconds(number);
        LODWORD(valuePtr.value) = 136317698;
        double v95 = fabsf(*(float *)(v100 + 108));
        *(CMTimeValue *)((char *)&valuePtr.value + 4) = (CMTimeValue)"fpfs_EnsureCorrectIFrameAlternate";
        LOWORD(valuePtr.flags) = 2048;
        *(void *)((char *)&valuePtr.flags + 2) = v51;
        HIWORD(valuePtr.epoch) = 2082;
        uint64_t v116 = v52;
        __int16 v117 = 2048;
        uint64_t v118 = v4;
        __int16 v119 = 2082;
        uint64_t v120 = v90;
        __int16 v121 = 2082;
        Float64 v122 = *(double *)&v91;
        __int16 v123 = 2114;
        Float64 v124 = *(double *)&v97;
        __int16 v125 = 2048;
        Float64 v126 = Seconds;
        __int16 v127 = 2048;
        double v128 = v89;
        __int16 v129 = 2048;
        double v130 = v93;
        __int16 v131 = 2048;
        double v132 = v94 / v95;
        _os_log_send_and_compose_impl();
        int v44 = 0;
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      uint64_t v46 = v97;
    }
    if (cf) {
      CFRelease(cf);
    }
    if (v46) {
      CFRelease(v46);
    }
  }
  if (*(unsigned char *)(v100 + 51) || (v44 != -12644 ? (int v96 = v44) : (int v96 = 0), *(const void **)(v100 + 80) != v4)) {
    int v96 = FigSignalErrorAt();
  }
  uint64_t v6 = v103;
  if (v44 != -12644 && !v96)
  {
    fpfs_StopFeedingTrack(a1, 0, 0);
    ++*(void *)(DerivedStorage + 2152);
  }
LABEL_62:
  if (*(float *)(DerivedStorage + 848) != 0.0) {
    goto LABEL_100;
  }
  float v53 = *(float *)(v6 + 108);
  if (v53 == 0.0) {
    goto LABEL_66;
  }
  number[0] = *(CMTime *)a2;
  if (fpfsi_atOrAfterTimeToPausePlayback(DerivedStorage, number))
  {
    float v53 = *(float *)(v6 + 108);
LABEL_66:
    if (v53 == 0.0)
    {
      if (dword_1E9350BB0)
      {
        LODWORD(v134.value) = 0;
        LOBYTE(v114.value) = 0;
        uint64_t v54 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v55 = v134.value;
        if (os_log_type_enabled(v54, v114.value)) {
          unsigned int v56 = v55;
        }
        else {
          unsigned int v56 = v55 & 0xFFFFFFFE;
        }
        if (v56)
        {
          uint64_t v57 = *(void *)DerivedStorage;
          if (*(void *)DerivedStorage) {
            CFArrayRef v58 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
          }
          else {
            CFArrayRef v58 = "";
          }
          unsigned int v101 = v58;
          uint64_t v104 = v6;
          if (v4) {
            uint64_t v64 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
          }
          else {
            uint64_t v64 = "";
          }
          number[0] = *(CMTime *)a2;
          Float64 v65 = CMTimeGetSeconds(number);
          LODWORD(valuePtr.value) = 136316418;
          *(CMTimeValue *)((char *)&valuePtr.value + 4) = (CMTimeValue)"fpfs_StepIFrame";
          LOWORD(valuePtr.flags) = 2048;
          *(void *)((char *)&valuePtr.flags + 2) = v57;
          HIWORD(valuePtr.epoch) = 2082;
          uint64_t v116 = v101;
          __int16 v117 = 2048;
          uint64_t v118 = v4;
          __int16 v119 = 2082;
          uint64_t v120 = v64;
          __int16 v121 = 2048;
          Float64 v122 = v65;
          _os_log_send_and_compose_impl();
          uint64_t v6 = v104;
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      number[0] = *(CMTime *)a2;
      fpfs_SetTime((uint64_t)v4, number);
    }
    goto LABEL_100;
  }
  number[0] = *(CMTime *)a2;
  fpfs_SetTime((uint64_t)v4, number);
  if (dword_1E9350BB0)
  {
    LODWORD(v134.value) = 0;
    LOBYTE(v114.value) = 0;
    CFTypeRef v59 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v60 = v134.value;
    if (os_log_type_enabled(v59, v114.value)) {
      unsigned int v61 = v60;
    }
    else {
      unsigned int v61 = v60 & 0xFFFFFFFE;
    }
    if (v61)
    {
      uint64_t v62 = *(void *)DerivedStorage;
      if (*(void *)DerivedStorage) {
        CFTypeRef v63 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
      }
      else {
        CFTypeRef v63 = "";
      }
      unsigned int v102 = v63;
      uint64_t v105 = v6;
      if (v4) {
        CFNumberRef v66 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
      }
      else {
        CFNumberRef v66 = "";
      }
      number[0] = *(CMTime *)a2;
      Float64 v67 = CMTimeGetSeconds(number);
      LODWORD(valuePtr.value) = 136316418;
      *(CMTimeValue *)((char *)&valuePtr.value + 4) = (CMTimeValue)"fpfs_StepIFrame";
      LOWORD(valuePtr.flags) = 2048;
      *(void *)((char *)&valuePtr.flags + 2) = v62;
      HIWORD(valuePtr.epoch) = 2082;
      uint64_t v116 = v102;
      __int16 v117 = 2048;
      uint64_t v118 = v4;
      __int16 v119 = 2082;
      uint64_t v120 = v66;
      __int16 v121 = 2048;
      Float64 v122 = v67;
      _os_log_send_and_compose_impl();
      uint64_t v6 = v105;
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  float v68 = *(float *)(DerivedStorage + 848);
  float v69 = *(float *)(v6 + 108);
  if (v68 != v69)
  {
    *(float *)(DerivedStorage + 848) = v69;
    fpfsi_RTCReportingReportRateChange(DerivedStorage, v69);
    float v68 = *(float *)(DerivedStorage + 848);
  }
  fpfs_SetRateOnTrack(a1, MEMORY[0x1E4F1F9F8], MEMORY[0x1E4F1F9F8], v68);
  if (*(double *)(DerivedStorage + 2144) == 0.0) {
    *(CFAbsoluteTime *)(DerivedStorage + 2144) = CFAbsoluteTimeGetCurrent() - *(double *)(DerivedStorage + 2136);
  }
LABEL_100:
  fpfs_endEndedTracks(DerivedStorage);
  if (*(unsigned char *)(DerivedStorage + 332))
  {
    number[0] = *(CMTime *)a2;
    fpfsi_setLastSeekTimeSet(DerivedStorage, (uint64_t)number);
  }
  if (v11) {
    return v11;
  }
  if (*(float *)(v6 + 108) == 0.0) {
    return 0;
  }
  memset(&v134, 0, sizeof(v134));
  fpfs_CurrentSubStreamBufferedDuration(*(unsigned __int8 *)(DerivedStorage + 1112), (uint64_t)&v134);
  memset(&v114, 0, sizeof(v114));
  CMTimeMakeWithSeconds(&v114, fabsf(*(float *)(v6 + 108)) * 10.0, 1);
  number[0] = v134;
  CMTime valuePtr = v114;
  if ((CMTimeCompare(number, &valuePtr) & 0x80000000) == 0
    || (*(unsigned char *)(DerivedStorage + 1436) & 1) != 0
    && (number[0] = *(CMTime *)a2,
        CMTime valuePtr = *(CMTime *)(DerivedStorage + 1424),
        (CMTimeCompare(number, &valuePtr) & 0x80000000) == 0))
  {
    if (!*(unsigned char *)(DerivedStorage + 1565))
    {
      *(unsigned char *)(DerivedStorage + 1565) = 1;
      if (dword_1E9350BB0)
      {
        LODWORD(rhs.value) = 0;
        LOBYTE(lhs.value) = 0;
        int v70 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v71 = rhs.value;
        if (os_log_type_enabled(v70, lhs.value)) {
          unsigned int v72 = v71;
        }
        else {
          unsigned int v72 = v71 & 0xFFFFFFFE;
        }
        if (v72)
        {
          uint64_t v73 = v6;
          uint64_t v74 = *(void *)DerivedStorage;
          if (v74) {
            CFAllocatorRef v75 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
          }
          else {
            CFAllocatorRef v75 = "";
          }
          CFArrayRef v80 = (CMTime *)(a1 + 216);
          if (v4) {
            uint64_t v81 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
          }
          else {
            uint64_t v81 = "";
          }
          number[0] = v134;
          Float64 v82 = CMTimeGetSeconds(number) / fabsf(*(float *)(v73 + 108));
          number[0] = v108;
          Float64 v83 = CMTimeGetSeconds(number);
          number[0] = *v80;
          Float64 v84 = CMTimeGetSeconds(number);
          double v85 = *(float *)(v73 + 108);
          LODWORD(valuePtr.value) = 136317186;
          *(CMTimeValue *)((char *)&valuePtr.value + 4) = (CMTimeValue)"fpfs_StepIFrame";
          LOWORD(valuePtr.flags) = 2048;
          *(void *)((char *)&valuePtr.flags + 2) = v74;
          HIWORD(valuePtr.epoch) = 2082;
          uint64_t v116 = v75;
          __int16 v117 = 2048;
          uint64_t v118 = v4;
          __int16 v119 = 2082;
          uint64_t v120 = v81;
          __int16 v121 = 2048;
          Float64 v122 = v82;
          __int16 v123 = 2048;
          Float64 v124 = v83;
          __int16 v125 = 2048;
          Float64 v126 = v84;
          __int16 v127 = 2048;
          double v128 = v85;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    return 0;
  }
  uint64_t v76 = *(void *)(a1 + 16);
  memset(number, 0, 24);
  uint64_t v77 = v6;
  if (*(unsigned char *)(DerivedStorage + 1220))
  {
    CMTime valuePtr = *(CMTime *)(DerivedStorage + 1208);
    CMTime rhs = *(CMTime *)(DerivedStorage + 1184);
    CMTimeSubtract(number, &valuePtr, &rhs);
  }
  else
  {
    number[0] = *(CMTime *)a2;
  }
  CMTime valuePtr = v134;
  long long v106 = *MEMORY[0x1E4F1FA48];
  *(_OWORD *)&rhs.CMTimeValue value = *MEMORY[0x1E4F1FA48];
  CMTimeEpoch v78 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
  rhs.CMTimeEpoch epoch = v78;
  if (!CMTimeCompare(&valuePtr, &rhs))
  {
    CMTime valuePtr = v108;
    CMTime rhs = number[0];
    if (fpfs_TimeIsAfter(v77, &valuePtr, &rhs))
    {
      CMTime valuePtr = v108;
      *(_OWORD *)&rhs.CMTimeValue value = v106;
      rhs.CMTimeEpoch epoch = v78;
      if (CMTimeCompare(&valuePtr, &rhs) >= 1)
      {
        *(_OWORD *)&number[0].CMTimeValue value = *(_OWORD *)&v108.value;
        CMTimeEpoch epoch = v108.epoch;
LABEL_122:
        number[0].CMTimeEpoch epoch = epoch;
        goto LABEL_133;
      }
      memset(&valuePtr, 0, sizeof(valuePtr));
      CMTimeMake(&valuePtr, (uint64_t)fabsf(*(float *)(v77 + 108)), 1);
      CMTime rhs = valuePtr;
      CMTime lhs = number[0];
      if (CMTimeCompare(&rhs, &lhs) < 0)
      {
        *(_OWORD *)&number[0].CMTimeValue value = *(_OWORD *)&valuePtr.value;
        CMTimeEpoch epoch = valuePtr.epoch;
        goto LABEL_122;
      }
    }
  }
LABEL_133:
  CMTime valuePtr = number[0];
  CMTime rhs = v134;
  uint64_t v87 = fpfs_RequestNextIFrameStepUnlocked(v4, &valuePtr, &rhs);
  uint64_t v88 = *(void *)(DerivedStorage + 1048);
  if (!v88) {
    return 4294954433;
  }
  uint64_t v11 = v87;
  while (*(void *)(v88 + 16) != v76)
  {
    uint64_t v88 = *(void *)(v88 + 8);
    if (!v88) {
      return 4294954433;
    }
  }
  return v11;
}

uint64_t fpfsi_RTCReportingUpdateCompletedDecodeForPrerollTime(uint64_t a1)
{
  uint64_t result = FigGetUpTimeNanoseconds();
  uint64_t v3 = *(void *)(a1 + 2072);
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 2544);
    if (v4)
    {
      uint64_t v5 = result;
      uint64_t VTable = CMBaseObjectGetVTable();
      uint64_t v8 = *(void *)(VTable + 16);
      uint64_t result = VTable + 16;
      uint64_t v7 = v8;
      uint64_t v9 = v8 ? v7 : 0;
      double v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t, void))(v9 + 56);
      if (v10)
      {
        return v10(v4, 0x1EE582CD8, 0x1EE585DB8, (v5 - v3) / 0xF4240uLL, 0);
      }
    }
  }
  return result;
}

void fpfs_PrerollTrackDispatch(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  CFTypeRef cf = 0;
  CFTypeRef v8 = 0;
  int v4 = fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer(v2, &v8, &cf);
  CFTypeRef v5 = cf;
  if (!v4)
  {
    uint64_t v6 = *(void *)(CMBaseObjectGetDerivedStorage() + 1048);
    if (v6)
    {
      while (v3 != *(void *)(v6 + 16))
      {
        uint64_t v6 = *(void *)(v6 + 8);
        if (!v6) {
          goto LABEL_7;
        }
      }
      fpfs_PrerollTrack(v6);
    }
LABEL_7:
    fpfs_UnlockAndPostNotificationsWithCaller(v8);
  }
  if (v5) {
    CFRelease(v5);
  }
  if (v8) {
    CFRelease(v8);
  }
  FigRetainProxyRelease();

  free(a1);
}

__n128 fpfs_CurrentSubStreamBufferedDuration@<Q0>(unsigned int a1@<W1>, uint64_t a2@<X8>)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = CMBaseObjectGetDerivedStorage();
  memset(&v29, 0, sizeof(v29));
  long long v6 = *MEMORY[0x1E4F1F9F8];
  *(void *)(a2 + 16) = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  uint64_t v7 = MEMORY[0x1E4F1FA48];
  *(_OWORD *)a2 = v6;
  *(_OWORD *)&v28.CMTimeValue value = *(_OWORD *)v7;
  CMTimeEpoch v8 = *(void *)(v7 + 16);
  v28.CMTimeEpoch epoch = v8;
  long long v26 = *(_OWORD *)&v28.value;
  CMTimeEpoch v27 = v8;
  __n128 v20 = *(__n128 *)&v28.value;
  *(_OWORD *)&v25.CMTimeValue value = *(_OWORD *)&v28.value;
  v25.CMTimeEpoch epoch = v8;
  memset(&v24, 0, sizeof(v24));
  result.n128_f64[0] = fpfs_GetNextTimeToPlay(DerivedStorage, 1, (uint64_t)&v24);
  uint64_t v10 = *(void *)(DerivedStorage + 1048);
  if (!v10) {
    goto LABEL_35;
  }
  int v19 = 0;
  int v11 = 0;
  int v12 = 0;
  uint64_t v13 = (void *)(DerivedStorage + 16 * a1 + 1000);
  do
  {
    if (*(unsigned __int8 *)(v10 + 180) != a1 || *(void *)(v10 + 48) != *v13) {
      goto LABEL_24;
    }
    if (!*(unsigned char *)(v10 + 184) || (~*(_DWORD *)(v10 + 140) & 0x11) != 0)
    {
      uint64_t v14 = (_OWORD *)(v10 + 216);
      int v15 = *(_DWORD *)(v10 + 228);
      if (*(float *)(v5 + 108) >= 0.0)
      {
        if ((v15 & 1) == 0
          || (*(_OWORD *)&time1.CMTimeValue value = *v14,
              time1.CMTimeEpoch epoch = *(void *)(v10 + 232),
              CMTime time2 = v24,
              CMTimeCompare(&time1, &time2) < 1))
        {
LABEL_16:
          __n128 result = v20;
          *(__n128 *)&v29.CMTimeValue value = v20;
          v29.CMTimeEpoch epoch = v8;
          goto LABEL_17;
        }
        *(_OWORD *)&time2.CMTimeValue value = *v14;
        time2.CMTimeEpoch epoch = *(void *)(v10 + 232);
        *(_OWORD *)&rhs.CMTimeValue value = *(_OWORD *)&v24.value;
        CMTimeEpoch epoch = v24.epoch;
      }
      else
      {
        if ((v15 & 1) == 0) {
          goto LABEL_16;
        }
        CMTime time1 = v24;
        *(_OWORD *)&time2.CMTimeValue value = *v14;
        time2.CMTimeEpoch epoch = *(void *)(v10 + 232);
        if (CMTimeCompare(&time1, &time2) < 1) {
          goto LABEL_16;
        }
        CMTime time2 = v24;
        *(_OWORD *)&rhs.CMTimeValue value = *v14;
        CMTimeEpoch epoch = *(void *)(v10 + 232);
      }
      rhs.CMTimeEpoch epoch = epoch;
      CMTimeSubtract(&time1, &time2, &rhs);
      result.n128_u64[0] = time1.value;
      CMTime v29 = time1;
    }
    else
    {
      CMBufferQueueGetDuration(&v29, *(CMBufferQueueRef *)(v10 + 72));
    }
LABEL_17:
    int v17 = *(_DWORD *)(v10 + 32);
    switch(v17)
    {
      case 1935832172:
        int v19 = 1;
        uint64_t v18 = &v25;
        break;
      case 1936684398:
        int v12 = 1;
        uint64_t v18 = &v28;
        break;
      case 1986618469:
        int v11 = 1;
        uint64_t v18 = (CMTime *)&v26;
        break;
      default:
        goto LABEL_24;
    }
    result.n128_u64[0] = v29.value;
    *uint64_t v18 = v29;
LABEL_24:
    uint64_t v10 = *(void *)(v10 + 8);
  }
  while (v10);
  if (v11)
  {
    result.n128_u64[0] = v26;
    *(_OWORD *)a2 = v26;
    *(void *)(a2 + 16) = v27;
  }
  if (v12)
  {
    if ((*(unsigned char *)(a2 + 12) & 1) == 0 || (time1 = v28, CMTime time2 = *(CMTime *)a2, CMTimeCompare(&time1, &time2) < 0))
    {
      result.n128_u64[0] = v28.value;
      *(CMTime *)a2 = v28;
    }
  }
  if (v19)
  {
    if ((*(unsigned char *)(a2 + 12) & 1) == 0 || (time1 = v25, CMTime time2 = *(CMTime *)a2, CMTimeCompare(&time1, &time2) < 0))
    {
      result.n128_u64[0] = v25.value;
      *(CMTime *)a2 = v25;
    }
  }
LABEL_35:
  if ((*(unsigned char *)(a2 + 12) & 1) == 0)
  {
    __n128 result = v20;
    *(__n128 *)a2 = v20;
    *(void *)(a2 + 16) = v8;
  }
  return result;
}

uint64_t fpfs_RequestNextIFrameStepUnlocked(const void *a1, CMTime *a2, CMTime *a3)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v7 = CMBaseObjectGetDerivedStorage();
  CMTime time = *a3;
  double Seconds = CMTimeGetSeconds(&time);
  float v9 = *(float *)(v7 + 108);
  if (v9 == 0.0) {
    double v10 = 1.0;
  }
  else {
    double v10 = v9;
  }
  uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  memset(&v46, 0, sizeof(v46));
  CMTimeMake(&v46, 1, 1);
  memset(&v45, 0, sizeof(v45));
  CMTimeMake(&v45, 1, 100);
  memset(&v44, 0, sizeof(v44));
  memset(&v43, 0, sizeof(v43));
  if (!*(void *)(DerivedStorage + 936)) {
    return 0;
  }
  CMTime time = *a2;
  CMTime rhs = *(CMTime *)(DerivedStorage + 1184);
  CMTimeAdd(&v44, &time, &rhs);
  CMTime rhs = v44;
  CMTime v42 = v45;
  CMTimeAdd(&time, &rhs, &v42);
  CMTime v44 = time;
  Float64 v12 = *(float *)(v7 + 108);
  CMTime time = v46;
  CMTimeMultiplyByFloat64(&v41, &time, v12);
  CMTime time = v44;
  CMTimeAdd(&v43, &time, &v41);
  *(CFAbsoluteTime *)(DerivedStorage + 1544) = CFAbsoluteTimeGetCurrent();
  *(unsigned char *)(DerivedStorage + 1565) = 0;
  uint64_t v13 = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(v13 + 470)) {
    *(unsigned char *)(v13 + 470) = 0;
  }
  double v14 = fabs(v10);
  uint64_t v15 = *(void *)(DerivedStorage + 936);
  float v16 = *(float *)(v7 + 108);
  CMTime v42 = v44;
  CMTime type = v43;
  uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v17) {
    uint64_t v18 = v17;
  }
  else {
    uint64_t v18 = 0;
  }
  int v19 = *(uint64_t (**)(uint64_t, CMTime *, uint64_t, CMTime *, uint64_t, uint64_t, float))(v18 + 80);
  double v20 = Seconds / v14;
  if (v19)
  {
    CMTime time = v42;
    CMTime rhs = type;
    uint64_t v21 = v19(v15, &time, (uint64_t)((double)UpTimeNanoseconds + v20 * 1000000000.0), &rhs, 8, DerivedStorage + 952, v16);
  }
  else
  {
    uint64_t v21 = 4294954514;
  }
  if (dword_1E9350BB0 >= 2)
  {
    LODWORD(v42.value) = 0;
    LOBYTE(type.value) = 0;
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int value = v42.value;
    if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v24 = value;
    }
    else {
      unsigned int v24 = value & 0xFFFFFFFE;
    }
    if (v24)
    {
      uint64_t v25 = *(void *)DerivedStorage;
      if (*(void *)DerivedStorage) {
        long long v26 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
      }
      else {
        long long v26 = "";
      }
      BOOL v36 = v26;
      CMTimeEpoch v27 = (_OWORD *)(DerivedStorage + 1184);
      if (a1) {
        CMTime v28 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
      }
      else {
        CMTime v28 = "";
      }
      CFIndex v35 = v28;
      int v29 = *(_DWORD *)(DerivedStorage + 952);
      CMTime time = v44;
      *(_OWORD *)&rhs.unsigned int value = *v27;
      rhs.CMTimeEpoch epoch = *(void *)(DerivedStorage + 1200);
      CMTimeSubtract(&v39, &time, &rhs);
      Float64 v30 = CMTimeGetSeconds(&v39);
      CMTime time = v43;
      *(_OWORD *)&rhs.unsigned int value = *v27;
      rhs.CMTimeEpoch epoch = *(void *)(DerivedStorage + 1200);
      CMTimeSubtract(&v38, &time, &rhs);
      Float64 v31 = CMTimeGetSeconds(&v38);
      double v32 = *(float *)(DerivedStorage + 1560);
      fpfs_GetTime(DerivedStorage, (uint64_t)&v37);
      Float64 v33 = CMTimeGetSeconds(&v37);
      LODWORD(rhs.value) = 136317698;
      *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"fpfs_RequestNextIFrameStepUnlocked";
      LOWORD(rhs.flags) = 2048;
      *(void *)((char *)&rhs.flags + 2) = v25;
      HIWORD(rhs.epoch) = 2082;
      unsigned int v48 = v36;
      __int16 v49 = 2048;
      unsigned int v50 = a1;
      __int16 v51 = 2082;
      uint64_t v52 = v35;
      __int16 v53 = 1024;
      int v54 = v29;
      __int16 v55 = 2048;
      Float64 v56 = v30;
      __int16 v57 = 2048;
      Float64 v58 = v31;
      __int16 v59 = 2048;
      double v60 = v32;
      __int16 v61 = 2048;
      double v62 = v20;
      __int16 v63 = 2048;
      Float64 v64 = v33;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (v21 == -12648)
  {
    fpfs_FrameStepHitEnd(a1);
    return 0;
  }
  return v21;
}

float fpfs_ProjectedDeliveryTime(uint64_t a1, CFIndex a2)
{
  unsigned int PeakBitRate = FigAlternateGetPeakBitRate(*(void *)(a1 + 1704));
  CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 1688), a2);
  return *(float *)(a1 + 1560)
       * (float)((float)FigAlternateGetPeakBitRate((uint64_t)ValueAtIndex) / (float)PeakBitRate);
}

uint64_t fpfs_FrameStepHitEnd(const void *a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t TrackOfType = fpfs_LastTrackOfType((uint64_t)a1, 1986618469, 0);
  long long v12 = 0uLL;
  uint64_t v13 = 0;
  uint64_t result = fpfsi_GetDuration((uint64_t)a1, &v12);
  if (result | ~HIDWORD(v12) & 0x11) {
    BOOL v5 = TrackOfType == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    if (dword_1E9350BB0)
    {
      int v11 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v7 = CMBaseObjectGetDerivedStorage();
    if (*(unsigned char *)(v7 + 470) != 1) {
      *(unsigned char *)(v7 + 470) = 1;
    }
    fpfs_StopFeedingTrack(TrackOfType, 0, 1);
    if (*(float *)(DerivedStorage + 848) > 0.0 && (*(unsigned char *)(DerivedStorage + 492) & 1) == 0)
    {
      long long v8 = *(_OWORD *)(TrackOfType + 216);
      *(void *)(DerivedStorage + 496) = *(void *)(TrackOfType + 232);
      *(_OWORD *)(DerivedStorage + 480) = v8;
      fpfsi_EnqueueEndTimeChangedNotification(a1);
    }
    fpfs_GetTime(DerivedStorage, (uint64_t)&v9);
    uint64_t result = fpfs_TrackIsStalled(TrackOfType, &v9);
    if (result) {
      return fpfs_EndTrackPlayback(TrackOfType);
    }
  }
  return result;
}

uint64_t fpfs_CommitToGaplessTransition(uint64_t a1, const void *a2)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = CMBaseObjectGetDerivedStorage();
  long long v58 = *MEMORY[0x1E4F1F9F8];
  uint64_t v59 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  uint64_t v57 = 0;
  long long v55 = 0u;
  long long v56 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  uint64_t v52 = 0;
  long long v51 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v48 = 0u;
  long long v46 = v58;
  uint64_t v47 = v59;
  uint64_t valuePtr = *(void *)(DerivedStorage + 160);
  CMAttachmentBearerRef target = 0;
  CFNumberRef v6 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberCFIndexType, &valuePtr);
  int v43 = 2;
  unsigned __int8 v42 = 0;
  if (!fpfs_IsPlayerEligibleForGaplessTransition()
    || !fpfs_OkayToAttemptGapless(a1, (uint64_t)a2, (uint64_t)&v53, (uint64_t)&v48, (uint64_t)&v58))
  {
    uint64_t v30 = FigSignalErrorAt();
    *(unsigned char *)(v5 + 2448) = 0;
    goto LABEL_39;
  }
  if (!*(unsigned char *)(v5 + 2448)) {
    goto LABEL_38;
  }
  uint64_t v7 = *((void *)&v48 + 1);
  if (*((void *)&v48 + 1))
  {
    if (*(unsigned char *)(*((void *)&v48 + 1) + 423)) {
      goto LABEL_38;
    }
  }
  long long v63 = v55;
  long long v64 = v56;
  uint64_t v65 = v57;
  *(_OWORD *)double v62 = v53;
  *(_OWORD *)&double v62[16] = v54;
  v60[2] = v50;
  v60[3] = v51;
  uint64_t v61 = v52;
  v60[0] = v48;
  v60[1] = v49;
  fpfs_AreItemsEligibleForGaplessTransition(a1, (uint64_t)v62, (uint64_t)a2, (uint64_t)v60, &v43, &v42);
  if (v43 != 1 || !fpfsi_AllTracksForMediaTypeArePlaying(a1, 1936684398))
  {
    uint64_t v30 = FigSignalErrorAt();
    if (!v30) {
      goto LABEL_39;
    }
    goto LABEL_34;
  }
  uint64_t v8 = v54;
  *(_OWORD *)double v62 = v58;
  *(void *)&double v62[16] = v59;
  fpfp_GetTransitionTimebaseStartTime(DerivedStorage, v5, (uint64_t)&v53, (uint64_t)&v48, (CMTime *)v62, v42, (CMTime *)(v5 + 2400), (CMTime *)(v5 + 2424), (uint64_t)&v46);
  uint64_t v9 = v55;
  if (v8) {
    uint64_t v9 = v8;
  }
  uint64_t v39 = *(void *)(v9 + 96);
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  uint64_t v11 = CMSampleBufferCreate(AllocatorForMedia, 0, 1u, 0, 0, 0, 0, 0, 0, 0, 0, (CMSampleBufferRef *)&target);
  if (v11) {
    goto LABEL_57;
  }
  CMSetAttachment(target, (CFStringRef)*MEMORY[0x1E4F1F2F8], v6, 0);
  if (dword_1E9350BB0)
  {
    int v41 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v13 = *(void *)(v39 + 32);
  uint64_t v14 = *(void *)(v5 + 576);
  uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v15) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = 0;
  }
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, unsigned char *, CFNumberRef, void, void))(v16 + 16);
  if (!v17)
  {
    uint64_t v30 = 4294954514;
    goto LABEL_34;
  }
  *(_OWORD *)double v62 = v46;
  *(void *)&double v62[16] = v47;
  uint64_t v11 = v17(v13, v14, v62, v6, 0, 0);
  if (v11 || (uint64_t v11 = CMBufferQueueEnqueue(*(CMBufferQueueRef *)(v39 + 40), target), v11))
  {
LABEL_57:
    uint64_t v30 = v11;
LABEL_34:
    *(unsigned char *)(v5 + 2448) = 0;
    if (!v7) {
      goto LABEL_39;
    }
    goto LABEL_35;
  }
  if (v8 && v7)
  {
    uint64_t v24 = *(void *)(v7 + 96);
    if (v24 && v24 != *(void *)(v8 + 96))
    {
      uint64_t v25 = *(void *)(v5 + 1048);
      if (v25)
      {
        CFNumberRef v26 = v6;
        CMTimeEpoch v27 = (long long *)MEMORY[0x1E4F1F9F8];
        do
        {
          uint64_t v28 = *(void *)(v25 + 8);
          if (*(_DWORD *)(v25 + 32) == 1936684398) {
            fpfsi_MoveTrackToPlayedOut(v5, v25, v27);
          }
          if (!v28) {
            break;
          }
          uint64_t v25 = v28;
        }
        while (*(void *)(v5 + 1048));
        CFNumberRef v6 = v26;
      }
      *(unsigned char *)(v7 + 423) = 1;
      fpfsi_RemoveAudioRenderChainListeners();
      fpfsi_SetRenderChainOnTrackOfItem((uint64_t)a2, v7, *(void *)(v8 + 96));
      fpfsi_EnsureRenderChainListenersAndPropertiesForAudioTrack();
      *(_OWORD *)double v62 = v46;
      *(void *)&double v62[16] = v47;
      uint64_t restarted = fpfs_RestartPlayedOutTracks(a2, (CMTime *)v62);
      if (!restarted)
      {
        if (!fpfsi_isTrackInLists(v5, v7, 1u))
        {
LABEL_38:
          uint64_t v30 = 0;
          goto LABEL_39;
        }
        goto LABEL_37;
      }
      uint64_t v30 = restarted;
      *(unsigned char *)(v5 + 2448) = 0;
LABEL_35:
      *(unsigned char *)(v7 + 423) = 0;
      goto LABEL_39;
    }
    *(unsigned char *)(v7 + 423) = 1;
    fpfsi_RemoveAudioRenderChainListeners();
    fpfsi_SetRenderChainOnTrackOfItem((uint64_t)a2, v7, *(void *)(v8 + 96));
    fpfsi_EnsureRenderChainListenersAndPropertiesForAudioTrack();
  }
LABEL_37:
  if (*(unsigned char *)(v5 + 2449) || !*(void *)(v5 + 792) || (BYTE12(v58) & 1) == 0) {
    goto LABEL_38;
  }
  CFArrayRef v32 = *(const __CFArray **)(v5 + 656);
  CFNumberRef v33 = v6;
  if (v32) {
    BOOL v34 = CFArrayGetCount(v32) > 0;
  }
  else {
    BOOL v34 = 0;
  }
  NotificationPayloadForProperties = fpfs_CreateNotificationPayloadForProperties(*(const void **)v5, (uint64_t)a2, v18, v19, v20, v21, v22, v23, @"VideoSlotArray", @"VideoTrackMatrix");
  CFAllocatorRef v36 = (const __CFAllocator *)FigGetAllocatorForMedia();
  *(_OWORD *)double v62 = v58;
  *(void *)&double v62[16] = v59;
  CFDictionaryRef v37 = CMTimeCopyAsDictionary((CMTime *)v62, v36);
  CFDictionaryAddValue(NotificationPayloadForProperties, @"FigTime", v37);
  CMTime v38 = (const void **)MEMORY[0x1E4F1CFC8];
  if (v34) {
    CMTime v38 = (const void **)MEMORY[0x1E4F1CFD0];
  }
  CFDictionaryAddValue(NotificationPayloadForProperties, @"CurrentHasEnqueuedFirstVideoFrame", *v38);
  fpfs_EnqueueNotification(*(const void **)v5, @"ScheduleNextItemTransitionTimer", a2, NotificationPayloadForProperties);
  if (v37) {
    CFRelease(v37);
  }
  if (NotificationPayloadForProperties) {
    CFRelease(NotificationPayloadForProperties);
  }
  uint64_t v30 = 0;
  *(unsigned char *)(v5 + 2449) = 1;
  CFNumberRef v6 = v33;
LABEL_39:
  if (v6) {
    CFRelease(v6);
  }
  if (target) {
    CFRelease(target);
  }
  return v30;
}

void fpfsi_SetRenderChainOnTrackOfItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sizeOut[16] = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMMediaType MediaType = CMFormatDescriptionGetMediaType(*(CMFormatDescriptionRef *)(a3 + 16));
  if (*(void *)(a2 + 96))
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return;
  }
  int v8 = MediaType;
  *(void *)(a2 + 96) = a3;
  *(unsigned char *)(a2 + 421) = 0;
  ++*(void *)a3;
  fpfs_SetFeederTrack(a3, a2);
  fpfs_CacheRenderChain(a1, (void *)a3, v8);
  if (*(_DWORD *)(a2 + 32) == 1936684398)
  {
    CFBooleanRef BOOLean = 0;
    uint64_t v9 = *(void *)(*(void *)(a2 + 96) + 32);
    uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
    uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(v9);
    uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v12) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = *(void (**)(uint64_t, __CFString *, uint64_t, CFBooleanRef *))(v13 + 48);
    if (v14) {
      v14(FigBaseObject, @"SpatializationEnabled", AllocatorForMedia, &BOOLean);
    }
    uint64_t v15 = *(void *)(DerivedStorage + 1808);
    uint64_t v16 = FigRenderPipelineGetFigBaseObject(*(void *)(*(void *)(a2 + 96) + 32));
    uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v17) {
      uint64_t v18 = v17;
    }
    else {
      uint64_t v18 = 0;
    }
    int v19 = *(void (**)(uint64_t, __CFString *, uint64_t))(v18 + 56);
    if (v19) {
      v19(v16, @"AudioDeviceChannelMap", v15);
    }
    if (dword_1E9350BB0)
    {
      int v20 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v21 = *(void *)(DerivedStorage + 880);
    uint64_t v22 = FigRenderPipelineGetFigBaseObject(*(void *)(*(void *)(a2 + 96) + 32));
    uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v23) {
      uint64_t v24 = v23;
    }
    else {
      uint64_t v24 = 0;
    }
    uint64_t v25 = *(void (**)(uint64_t, __CFString *, uint64_t))(v24 + 56);
    if (v25) {
      v25(v22, @"TimePitchAlgorithm", v21);
    }
    uint64_t v26 = *(void *)(DerivedStorage + 3120);
    uint64_t v27 = FigRenderPipelineGetFigBaseObject(*(void *)(*(void *)(a2 + 96) + 32));
    uint64_t v28 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v28) {
      uint64_t v29 = v28;
    }
    else {
      uint64_t v29 = 0;
    }
    uint64_t v30 = *(void (**)(uint64_t, __CFString *, uint64_t))(v29 + 56);
    if (v30) {
      v30(v27, @"AudioProcessingUnits", v26);
    }
    uint64_t v31 = *(void *)(DerivedStorage + 3128);
    uint64_t v32 = FigRenderPipelineGetFigBaseObject(*(void *)(*(void *)(a2 + 96) + 32));
    uint64_t v33 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v33) {
      uint64_t v34 = v33;
    }
    else {
      uint64_t v34 = 0;
    }
    CFIndex v35 = *(void (**)(uint64_t, __CFString *, uint64_t))(v34 + 56);
    if (v35) {
      v35(v32, @"SecondaryAudioCurves", v31);
    }
    uint64_t v36 = *(void *)(DerivedStorage + 3136);
    uint64_t v37 = FigRenderPipelineGetFigBaseObject(*(void *)(*(void *)(a2 + 96) + 32));
    uint64_t v38 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v38) {
      uint64_t v39 = v38;
    }
    else {
      uint64_t v39 = 0;
    }
    uint64_t v40 = *(void (**)(uint64_t, __CFString *, uint64_t))(v39 + 56);
    if (v40) {
      v40(v37, @"AudioQueueClockDevice", v36);
    }
    fpfsi_applyLoudnessInfo(DerivedStorage, a2, 0);
    fpfsi_applyAdjustTargetLevel(DerivedStorage, a2);
    fpfsi_applyAdjustCompressionProfile(DerivedStorage, a2);
    fpfsi_RTCReportingUpdateAudioInfo(DerivedStorage, a2);
    if (BOOLean) {
      unsigned int Value = CFBooleanGetValue(BOOLean);
    }
    else {
      unsigned int Value = 0;
    }
    fpfsi_RTCReportingUpdateAudioSpatialization(DerivedStorage, Value);
    unsigned __int8 v42 = *(const opaqueCMFormatDescription **)(a2 + 40);
    signed int MediaSubType = CMFormatDescriptionGetMediaSubType(v42);
    int v44 = 1;
    if (MediaSubType > 1885692722)
    {
      if (MediaSubType <= 1902469938)
      {
        if (MediaSubType != 1885692723)
        {
          int v45 = 1902324531;
LABEL_53:
          if (MediaSubType == v45) {
            goto LABEL_65;
          }
          goto LABEL_64;
        }
        goto LABEL_55;
      }
      if (MediaSubType == 2053464883)
      {
LABEL_55:
        sizeOut[0] = 0;
        FormatList = CMAudioFormatDescriptionGetFormatList(v42, sizeOut);
        int v44 = 0;
        if (!FormatList || sizeOut[0] < 0x30) {
          goto LABEL_65;
        }
        int mFormatID = FormatList->mASBD.mFormatID;
        int v44 = 1;
        if (mFormatID <= 1885547314)
        {
          if (mFormatID == 1667574579) {
            goto LABEL_65;
          }
          int v49 = 1700997939;
        }
        else
        {
          if (mFormatID == 1885547315 || mFormatID == 1902324531) {
            goto LABEL_65;
          }
          int v49 = 2053319475;
        }
        if (mFormatID == v49)
        {
LABEL_65:
          fpfsi_RTCReportingUpdateATMOSMetricVar(DerivedStorage, (unsigned char *)(DerivedStorage + 2579), (unsigned char *)(DerivedStorage + 2575), v44, 0, 0);
          if (BOOLean) {
            CFRelease(BOOLean);
          }
          return;
        }
LABEL_64:
        int v44 = 0;
        goto LABEL_65;
      }
      if (MediaSubType == 2053319475) {
        goto LABEL_65;
      }
      int v46 = 1902469939;
    }
    else
    {
      if (MediaSubType > 1700997938)
      {
        if (MediaSubType == 1700997939) {
          goto LABEL_65;
        }
        if (MediaSubType != 1700998451)
        {
          int v45 = 1885547315;
          goto LABEL_53;
        }
        goto LABEL_55;
      }
      if (MediaSubType == 1667574579) {
        goto LABEL_65;
      }
      int v46 = 1667575091;
    }
    if (MediaSubType != v46) {
      goto LABEL_64;
    }
    goto LABEL_55;
  }
}

uint64_t fpfsi_EnsureRenderChainListenersAndPropertiesForAudioTrack()
{
  CMBaseObjectGetDerivedStorage();
  CMBaseObjectGetDerivedStorage();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();

  return FigNotificationCenterAddWeakListener();
}

uint64_t fpfs_CacheRenderChain(uint64_t a1, void *a2, int a3)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  for (uint64_t i = 0; i != 5; ++i)
  {
    if (*(_DWORD *)&kCommonTypes[4 * i] == a3) {
      break;
    }
  }
  int v8 = (void *)(result + 8 * i + 792);
  if (*v8) {
    uint64_t result = fpfs_releaseRenderChain(a1);
  }
  *int v8 = a2;
  ++*a2;
  return result;
}

void fpfsi_applyLoudnessInfo(uint64_t a1, uint64_t a2, int a3)
{
  if (!a1) {
    return;
  }
  uint64_t v11 = 0;
  if (!a2)
  {
    uint64_t v8 = *(void *)(a1 + 1048);
    if (!v8) {
      return;
    }
    while (!*(void *)(v8 + 96) || *(_DWORD *)(v8 + 32) != 1936684398)
    {
LABEL_19:
      uint64_t v8 = *(void *)(v8 + 8);
      if (!v8) {
        return;
      }
    }
    if (fpfsi_copyLoudnessInfoWithItemMediaKindAndLID(a1, v8, &v11)) {
      return;
    }
    if (a3 == 1)
    {
      uint64_t v9 = v11;
      int v10 = fpfs_setPropertyOnPrimaryAndAuxRenderPipelines(*(void *)(v8 + 96), @"LoudnessInfo", (uint64_t)v11);
      if (!v9)
      {
LABEL_18:
        if (v10) {
          return;
        }
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t v9 = v11;
      fpfsi_sendLoudnessInfoMarkerSampleBufferToAudioRenderPipeline(*(void *)(MEMORY[0x60] + 32), v11);
      int v10 = 0;
      if (!v9) {
        goto LABEL_18;
      }
    }
    CFRelease(v9);
    uint64_t v11 = 0;
    goto LABEL_18;
  }
  if (*(_DWORD *)(a2 + 32) == 1936684398
    && *(void *)(a2 + 96)
    && !fpfsi_copyLoudnessInfoWithItemMediaKindAndLID(a1, a2, &v11))
  {
    uint64_t v6 = *(void *)(a2 + 96);
    if (a3 == 1)
    {
      uint64_t v7 = v11;
      fpfs_setPropertyOnPrimaryAndAuxRenderPipelines(v6, @"LoudnessInfo", (uint64_t)v11);
      if (!v7) {
        return;
      }
    }
    else
    {
      uint64_t v7 = v11;
      fpfsi_sendLoudnessInfoMarkerSampleBufferToAudioRenderPipeline(*(void *)(v6 + 32), v11);
      if (!v7) {
        return;
      }
    }
    CFRelease(v7);
  }
}

uint64_t fpfsi_applyAdjustTargetLevel(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = *(void *)(result + 3144);
    if (v3)
    {
      if (a2 && (uint64_t result = *(void *)(a2 + 96)) != 0)
      {
        return fpfs_setPropertyOnPrimaryAndAuxRenderPipelines(result, @"AdjustTargetLevel", v3);
      }
      else
      {
        for (uint64_t i = *(void *)(v2 + 1048); i; uint64_t i = *(void *)(i + 8))
        {
          uint64_t result = *(void *)(i + 96);
          if (result)
          {
            if (*(_DWORD *)(i + 32) == 1936684398)
            {
              uint64_t result = fpfs_setPropertyOnPrimaryAndAuxRenderPipelines(result, @"AdjustTargetLevel", *(void *)(v2 + 3144));
              if (result) {
                break;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t fpfsi_applyAdjustCompressionProfile(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = *(void *)(result + 3152);
    if (v3)
    {
      if (a2 && (uint64_t result = *(void *)(a2 + 96)) != 0)
      {
        return fpfs_setPropertyOnPrimaryAndAuxRenderPipelines(result, @"AdjustCompressionProfile", v3);
      }
      else
      {
        for (uint64_t i = *(void *)(v2 + 1048); i; uint64_t i = *(void *)(i + 8))
        {
          uint64_t result = *(void *)(i + 96);
          if (result)
          {
            if (*(_DWORD *)(i + 32) == 1936684398)
            {
              uint64_t result = fpfs_setPropertyOnPrimaryAndAuxRenderPipelines(result, @"AdjustCompressionProfile", *(void *)(v2 + 3152));
              if (result) {
                break;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void fpfsi_RTCReportingUpdateAudioInfo(uint64_t a1, uint64_t a2)
{
  valuePtr[16] = *(double *)MEMORY[0x1E4F143B8];
  if (!*(void *)(a2 + 440)) {
    return;
  }
  RichestDecodableFormat = CMAudioFormatDescriptionGetRichestDecodableFormat(*(CMAudioFormatDescriptionRef *)(a2 + 40));
  if (RichestDecodableFormat) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = dword_1E9350BB0 == 0;
  }
  if (!v5)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CFDictionaryRef CurrentAudioPersistentIDFromMediaOption = fpfsi_GetCurrentAudioPersistentIDFromMediaOption();
  unsigned int v31 = 0;
  AudioChannelCFIndex Count = FigAlternateGetAudioChannelCount(*(const void **)(a2 + 440), CurrentAudioPersistentIDFromMediaOption, &v31);
  if ((AudioChannelCount - 1) <= 1)
  {
    if ((v31 & 2) != 0) {
      unint64_t v9 = 3;
    }
    else {
      unint64_t v9 = ((unint64_t)v31 >> 1) & 2;
    }
    goto LABEL_13;
  }
  if (AudioChannelCount >= 3)
  {
    unint64_t v9 = 1;
LABEL_13:
    uint64_t v10 = *(void *)(a1 + 2544);
    if (v10)
    {
      uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v12 = v11 ? v11 : 0;
      uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t, unint64_t, void))(v12 + 56);
      if (v13) {
        v13(v10, 0x1EE582B78, 0x1EE562258, v9, 0);
      }
    }
  }
  if (RichestDecodableFormat)
  {
    uint64_t v14 = *(void *)(a1 + 2544);
    uint64_t CFStringForOSTypeValue = FigGetCFStringForOSTypeValue();
    if (v14)
    {
      uint64_t v16 = CFStringForOSTypeValue;
      uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v18 = v17 ? v17 : 0;
      int v19 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v18 + 48);
      if (v19) {
        v19(v14, 0x1EE582B78, 0x1EE585398, v16, 0);
      }
    }
    CFAllocatorRef v20 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFNumberRef v21 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberDoubleType, RichestDecodableFormat);
    uint64_t v22 = *(void *)(a1 + 2544);
    if (v22)
    {
      uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v24 = v23 ? v23 : 0;
      uint64_t v25 = *(void (**)(uint64_t, uint64_t, uint64_t, CFNumberRef, void))(v24 + 48);
      if (v25) {
        v25(v22, 0x1EE582B78, 0x1EE5853B8, v21, 0);
      }
    }
    valuePtr[0] = RichestDecodableFormat->mASBD.mSampleRate * (float)RichestDecodableFormat->mASBD.mBytesPerFrame * 8.0;
    CFNumberRef v26 = CFNumberCreate(v20, kCFNumberDoubleType, valuePtr);
    uint64_t v27 = *(void *)(a1 + 2544);
    if (v27)
    {
      uint64_t v28 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v29 = v28 ? v28 : 0;
      uint64_t v30 = *(void (**)(uint64_t, uint64_t, uint64_t, CFNumberRef, void))(v29 + 48);
      if (v30) {
        v30(v27, 0x1EE582B78, 0x1EE5853D8, v26, 0);
      }
    }
    if (v21) {
      CFRelease(v21);
    }
    if (v26) {
      CFRelease(v26);
    }
  }
}

uint64_t fpfsi_RTCReportingUpdateAudioSpatialization(uint64_t result, unsigned int a2)
{
  uint64_t v2 = *(void *)(result + 2544);
  if (v2)
  {
    uint64_t VTable = CMBaseObjectGetVTable();
    uint64_t v6 = *(void *)(VTable + 16);
    uint64_t result = VTable + 16;
    uint64_t v5 = v6;
    uint64_t v7 = v6 ? v5 : 0;
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, void))(v7 + 56);
    if (v8)
    {
      return v8(v2, 0x1EE582B78, 0x1EE5622B8, a2, 0);
    }
  }
  return result;
}

uint64_t fpfsi_copyLoudnessInfoWithItemMediaKindAndLID(uint64_t a1, uint64_t a2, __CFDictionary **a3)
{
  if (a2)
  {
    if (!a1) {
      goto LABEL_13;
    }
  }
  else if (!a1)
  {
LABEL_13:
    uint64_t v6 = 0;
LABEL_14:
    *a3 = v6;
    return 0;
  }
  if (!*(void *)(a1 + 2376) && !*(void *)(a1 + 2368) && FigCFDictionaryGetCount() < 1) {
    goto LABEL_13;
  }
  FigGetAllocatorForMedia();
  CFMutableDictionaryRef MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
  if (MutableCopy)
  {
    uint64_t v6 = MutableCopy;
    uint64_t v7 = *(const void **)(a1 + 2368);
    if (v7) {
      CFDictionarySetValue(MutableCopy, @"media kind", v7);
    }
    if (FigCFDictionaryGetCount() >= 1) {
      FigCFDictionaryAddEntriesToDictionaryWithRecursion();
    }
    goto LABEL_14;
  }

  return FigSignalErrorAt();
}

void fpfsi_sendLoudnessInfoMarkerSampleBufferToAudioRenderPipeline(uint64_t a1, const void *a2)
{
  CMSampleBufferRef v11 = 0;
  CMBufferQueueRef queue = 0;
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  if (!CMSampleBufferCreate(AllocatorForMedia, 0, 1u, 0, 0, 0, 0, 0, 0, 0, 0, &v11))
  {
    CMSetAttachment(v11, (CFStringRef)*MEMORY[0x1E4F21A20], a2, 0);
    uint64_t v5 = FigGetAllocatorForMedia();
    uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(a1);
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v8 = v7 ? v7 : 0;
    unint64_t v9 = *(unsigned int (**)(uint64_t, __CFString *, uint64_t, CMBufferQueueRef *))(v8 + 48);
    if (v9)
    {
      if (!v9(FigBaseObject, @"SourceSampleBufferQueue", v5, &queue)) {
        CMBufferQueueEnqueue(queue, v11);
      }
    }
  }
  if (v11) {
    CFRelease(v11);
  }
  if (queue) {
    CFRelease(queue);
  }
}

uint64_t fpfsi_RTCReportingUpdateATMOSMetricVar(uint64_t result, unsigned char *a2, unsigned char *a3, int a4, int a5, int a6)
{
  if (*a2 != a4 && (a4 == 1 || a5 == 1))
  {
    if (!a4 && a6 == 1) {
      *(void *)(result + 2572) = 0;
    }
    *a2 = a4;
    if (*a3) {
      goto LABEL_11;
    }
  }
  else if (*a3)
  {
    return result;
  }
  *a3 = 1;
LABEL_11:
  uint64_t v6 = *(unsigned __int8 *)(result + 2579);
  if (*(unsigned char *)(result + 2579)
    || *(unsigned char *)(result + 2572) && *(unsigned char *)(result + 2573) && *(unsigned char *)(result + 2574) && *(unsigned char *)(result + 2575))
  {
    uint64_t v7 = *(void *)(result + 2544);
    if (v7)
    {
      uint64_t v8 = *(unsigned __int8 *)(result + 2576);
      uint64_t v9 = *(unsigned __int8 *)(result + 2577);
      uint64_t v10 = *(unsigned __int8 *)(result + 2578);
      uint64_t VTable = CMBaseObjectGetVTable();
      uint64_t v13 = *(void *)(VTable + 16);
      uint64_t result = VTable + 16;
      uint64_t v12 = v13;
      uint64_t v14 = v13 ? v12 : 0;
      uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v14 + 56);
      if (v15)
      {
        return v15(v7, 0x1EE582B78, 0x1EE5619F8, (16 * v6) | (2 * v8) | (4 * v9) | (8 * v10) | 1, 0);
      }
    }
  }
  return result;
}

void fpfs_AudioDecoderError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v85 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = *(const void **)DerivedStorage;
  CMTimeValue value = *MEMORY[0x1E4F1F9F8];
  CMTimeScale timescale = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 8);
  CMTimeValue v81 = value;
  CMTimeScale v82 = timescale;
  CFDictionaryRef v59 = 0;
  int v49 = v5;
  fpfs_LockMutexWithCaller(v5);
  if (!FigRetainProxyIsInvalidated())
  {
    CMTimeFlags v6 = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 12);
    CMTimeEpoch v7 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
    uint64_t v8 = *(void *)(DerivedStorage + 800);
    uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
    uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(a4);
    uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v11) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v13 = *(unsigned int (**)(uint64_t, __CFString *, uint64_t, const __CFDictionary **))(v12 + 48);
    CMTimeEpoch epoch = v7;
    CMTimeFlags flags = v6;
    if (v13)
    {
      CMTimeEpoch epoch = v7;
      CMTimeFlags flags = v6;
      if (!v13(FigBaseObject, @"EndPresentationTimeForDecodedSamples", AllocatorForMedia, &v59))
      {
        CMTimeMakeFromDictionary(time, v59);
        CMTimeValue value = time[0].value;
        CMTimeFlags flags = time[0].flags;
        CMTimeScale timescale = time[0].timescale;
        CMTimeEpoch epoch = time[0].epoch;
        CFRelease(v59);
      }
    }
    if ((flags & 1) == 0 && v8)
    {
      CMBufferQueueGetMinPresentationTimeStamp(time, *(CMBufferQueueRef *)(v8 + 40));
      CMTimeValue value = time[0].value;
      CMTimeFlags flags = time[0].flags;
      CMTimeScale timescale = time[0].timescale;
      CMTimeEpoch epoch = time[0].epoch;
    }
    CMTimeFlags v50 = v6;
    if ((flags & 1) == 0)
    {
      fpfs_GetTime(DerivedStorage, (uint64_t)&lhs);
      CMTimeMake(&rhs, 1, 1);
      CMTimeAdd(time, &lhs, &rhs);
      CMTimeValue value = time[0].value;
      CMTimeFlags flags = time[0].flags;
      CMTimeScale timescale = time[0].timescale;
      CMTimeEpoch epoch = time[0].epoch;
    }
    CMTimeEpoch v48 = epoch;
    LODWORD(v60.value) = 0;
    LOBYTE(type.value) = 0;
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v17 = v60.value;
    if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v18 = v17;
    }
    else {
      unsigned int v18 = v17 & 0xFFFFFFFE;
    }
    if (v18)
    {
      if (v49) {
        int v19 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
      }
      else {
        int v19 = "";
      }
      if (a2) {
        CFAllocatorRef v20 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
      }
      else {
        CFAllocatorRef v20 = "";
      }
      time[0].CMTimeValue value = value;
      *(void *)&time[0].CMTimeScale timescale = __PAIR64__(flags, timescale);
      time[0].CMTimeEpoch epoch = v48;
      Float64 Seconds = CMTimeGetSeconds(time);
      LODWORD(time2.value) = 136316674;
      *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpfs_AudioDecoderError";
      LOWORD(time2.flags) = 2048;
      *(void *)((char *)&time2.flags + 2) = v49;
      HIWORD(time2.epoch) = 2082;
      float v69 = v19;
      __int16 v70 = 2048;
      uint64_t v71 = a2;
      __int16 v72 = 2082;
      uint64_t v73 = v20;
      __int16 v74 = 2048;
      uint64_t v75 = a4;
      __int16 v76 = 2048;
      Float64 v77 = Seconds;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    if (v8 && *(void *)(v8 + 32) == a4) {
      fpfs_ClearRenderChains(a2, 2);
    }
    CMBufferQueueReset(*(CMBufferQueueRef *)(DerivedStorage + 856));
    uint64_t v22 = *(void *)(DerivedStorage + 1048);
    if (v22)
    {
      uint64_t v23 = 0;
      CMTimeEpoch v24 = v7;
      do
      {
        uint64_t v25 = *(void *)(v22 + 16);
        if (*(_DWORD *)(v22 + 32) != 1936684398 || (v50 & 1) == 0)
        {
          uint64_t v27 = *(void *)(v22 + 8);
          uint64_t v28 = *(void *)(v22 + 96);
          if (!v28 || *(void *)(v28 + 32) != a4) {
            goto LABEL_37;
          }
          int v29 = *(unsigned __int8 *)(v22 + 182);
          if (*(unsigned char *)(v22 + 182))
          {
            time[0] = *(CMTime *)(v22 + 216);
            time2.CMTimeValue value = value;
            time2.CMTimeScale timescale = timescale;
            time2.CMTimeFlags flags = flags;
            time2.CMTimeEpoch epoch = v48;
            if (CMTimeCompare(time, &time2) < 1) {
              break;
            }
          }
          else
          {
            fpfs_StopFeedingTrack(v22, 0, 1);
          }
          uint64_t v30 = fpfs_cloneTrackAndAddToTrackList(v22, v29 == 0);
          if (!v30) {
            break;
          }
          uint64_t v31 = (uint64_t)v30;
          *((unsigned char *)v30 + 182) = v29;
          StreamBasicDescription = CMAudioFormatDescriptionGetStreamBasicDescription(*(CMAudioFormatDescriptionRef *)(v22 + 40));
          memset(&type, 0, sizeof(type));
          if (StreamBasicDescription) {
            CMTimeMake(&type, 2 * StreamBasicDescription->mFramesPerPacket, (int)StreamBasicDescription->mSampleRate);
          }
          else {
            CMTimeMakeWithSeconds(&type, 0.2, 1000);
          }
          memset(&v55, 0, sizeof(v55));
          time[0].CMTimeValue value = value;
          *(void *)&time[0].CMTimeScale timescale = __PAIR64__(flags, timescale);
          time[0].CMTimeEpoch epoch = v48;
          CMTime time2 = type;
          CMTimeAdd(&v55, time, &time2);
          memset(v80, 0, sizeof(v80));
          long long v79 = 0u;
          memset(time, 0, sizeof(time));
          CMBufferQueueReset(*(CMBufferQueueRef *)(*(void *)(v22 + 96) + 40));
          time[0] = v55;
          time[1] = *(CMTime *)(v22 + 128);
          if (*(unsigned char *)(v31 + 420))
          {
            CMTime time2 = v55;
            fpfs_DecodeTimeForAudioRandomAccessInBufferQueue(v31, &time2, (uint64_t)&v54);
            CMTime v60 = v55;
            CMTimeSubtract(&time2, &v60, &v54);
            long long v79 = *(_OWORD *)&time2.value;
            CMTimeEpoch v33 = time2.epoch;
          }
          else
          {
            long long v79 = *(_OWORD *)(v22 + 396);
            CMTimeEpoch v33 = *(void *)(v22 + 412);
          }
          v80[0] = v33;
          long long v46 = *MEMORY[0x1E4F1F9F8];
          *(_OWORD *)&v80[1] = *MEMORY[0x1E4F1F9F8];
          v80[3] = v7;
          v80[4] = *(void *)(v31 + 80);
          LOBYTE(v80[5]) = 0;
          *(_OWORD *)((char *)&v80[5] + 4) = *MEMORY[0x1E4F1FA08];
          *(void *)((char *)&v80[7] + 4) = *(void *)(MEMORY[0x1E4F1FA08] + 16);
          CMBufferQueueCallForEachBuffer(*(CMBufferQueueRef *)(v22 + 80), (OSStatus (__cdecl *)(CMBufferRef, void *))fpfsi_ReuseSamplesInQueue, time);
          uint64_t v34 = *(void *)(v22 + 232);
          *(_OWORD *)(v31 + 216) = *(_OWORD *)(v22 + 216);
          *(void *)(v31 + 232) = v34;
          CMTime time2 = v55;
          fpfsi_RestartResurrectedTrack(v31, &time2, 0);
          if (fpfsi_isTrackInLists(DerivedStorage, v31, 3u))
          {
            if (fpfsi_isTrackInLists(DerivedStorage, v22, 3u))
            {
              *(void *)(v22 + 216) = value;
              *(_DWORD *)(v22 + 224) = timescale;
              *(_DWORD *)(v22 + 228) = flags;
              *(void *)(v22 + 232) = v48;
              if (*(void *)(v22 + 112))
              {
                long long v52 = v46;
                CMTimeEpoch v53 = v7;
                fpfs_scheduleForwardEndTimeForTrack(DerivedStorage, v22, (uint64_t)&v52);
                if (dword_1E9350BB0)
                {
                  CFIndex v35 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT);
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                }
              }
            }
            uint64_t v23 = *(void *)(v31 + 16);
            if (*(_DWORD *)(v31 + 152) == 6 || !*(unsigned char *)(v31 + 182))
            {
              CMTimeValue v81 = *(void *)(v31 + 216);
              CMTimeScale v82 = *(_DWORD *)(v31 + 224);
              CMTimeFlags v50 = *(_DWORD *)(v31 + 228);
              CMTimeEpoch v24 = *(void *)(v31 + 232);
              uint64_t v44 = *(unsigned __int8 *)(v31 + 180);
              uint64_t v45 = *(void *)(v31 + 64);
              if (*(void *)(v31 + 48) == *(void *)(DerivedStorage + 16 * v44 + 1008)) {
                *(void *)(DerivedStorage + 8 * v44 + 1152) = v45;
              }
              else {
                *(void *)(DerivedStorage + 1128 + 8 * v44) = v45;
              }
            }
            else
            {
              fpfs_DeleteTrack(a2, v31);
            }
          }
          else if (dword_1E9350BB0)
          {
            LODWORD(v52) = 0;
            uint64_t v36 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int v37 = v52;
            if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT)) {
              unsigned int v38 = v37;
            }
            else {
              unsigned int v38 = v37 & 0xFFFFFFFE;
            }
            if (v38)
            {
              uint64_t v39 = *(const void **)DerivedStorage;
              if (*(void *)DerivedStorage) {
                uint64_t v40 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
              }
              else {
                uint64_t v40 = "";
              }
              uint64_t v41 = a2;
              if (a2)
              {
                unsigned __int8 v42 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
                uint64_t v41 = a2;
              }
              else
              {
                unsigned __int8 v42 = "";
              }
              uint64_t v43 = *(void *)(DerivedStorage + 160);
              LODWORD(v60.value) = 136316418;
              *(CMTimeValue *)((char *)&v60.value + 4) = (CMTimeValue)"fpfs_AudioDecoderError";
              LOWORD(v60.flags) = 2048;
              *(void *)((char *)&v60.flags + 2) = v39;
              HIWORD(v60.epoch) = 2082;
              uint64_t v61 = v40;
              __int16 v62 = 2048;
              uint64_t v63 = v41;
              __int16 v64 = 2082;
              uint64_t v65 = v42;
              __int16 v66 = 1024;
              int v67 = v43;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
        }
        else
        {
          if (v25 >= v23) {
            break;
          }
          fpfsi_MoveTrackToPlayedOut(DerivedStorage, v22, MEMORY[0x1E4F1F9F8]);
          fpfs_ResurrectPlayedOutTrack(v22);
          if (*(_DWORD *)(v22 + 152) == 6)
          {
            time[0].CMTimeValue value = v81;
            *(void *)&time[0].CMTimeScale timescale = __PAIR64__(v50, v82);
            time[0].CMTimeEpoch epoch = v24;
            fpfsi_RestartResurrectedTrack(v22, time, 1);
          }
        }
        uint64_t v27 = *(void *)(DerivedStorage + 1048);
        if (!v27) {
          break;
        }
        while (*(void *)(v27 + 16) <= v25)
        {
          uint64_t v27 = *(void *)(v27 + 8);
          if (!v27) {
            goto LABEL_82;
          }
        }
LABEL_37:
        uint64_t v22 = v27;
      }
      while (v27);
    }
  }
LABEL_82:
  fpfs_UnlockAndPostNotificationsWithCaller(v49);
}

void fpfs_AudioPlayResourcePreempted(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMTimeEpoch v7 = *(const void **)DerivedStorage;
  fpfs_LockMutexWithCaller(*(void *)DerivedStorage);
  if (!FigRetainProxyIsInvalidated())
  {
    if (dword_1E9350BB0)
    {
      os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (!*(unsigned char *)(DerivedStorage + 2880))
    {
      uint64_t v9 = *(void *)(DerivedStorage + 1048);
      if (v9)
      {
        while (1)
        {
          uint64_t v10 = *(void *)(v9 + 96);
          if (v10)
          {
            if (*(void *)(v10 + 32) == a4) {
              break;
            }
          }
          uint64_t v9 = *(void *)(v9 + 8);
          if (!v9) {
            goto LABEL_15;
          }
        }
        if (dword_1E9350BB0)
        {
          uint64_t v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        *(unsigned char *)(DerivedStorage + 2881) = 1;
        if (*(float *)(DerivedStorage + 848) == 0.0) {
          fpfsi_ReleaseRenderChainsForPausing(a2);
        }
        else {
          fpfs_stopPlaybackForInternalReason(v7, 30);
        }
      }
    }
  }
LABEL_15:
  fpfs_UnlockAndPostNotificationsWithCaller(v7);
}

uint64_t fpfs_AudioPlayResourceReleased(int a1, CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  CMNotificationCenterGetDefaultLocalCenter();
  CMBaseObjectGetDerivedStorage();
  FigGetAllocatorForMedia();

  return FigDeferNotificationToDispatchQueue();
}

void fpfsi_AudioLatencyChanged(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  cf[25] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  CFTypeRef v8 = 0;
  cf[0] = 0;
  if (fpfsi_CopyPlayerAndItemFromItemRetainProxy(a2, cf, &v8))
  {
    if (dword_1E9350BB0)
    {
      os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  else
  {
    if (dword_1E9350BB0)
    {
      CMTimeFlags v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    FigRetainProxyRetain();
    if (a4) {
      CFRetain(a4);
    }
    CMNotificationCenterGetDefaultLocalCenter();
    CFTypeRef v7 = v8;
    CMBaseObjectGetDerivedStorage();
    FigGetAllocatorForMedia();
    FigDeferNotificationToDispatchQueue();
    if (cf[0]) {
      CFRelease(cf[0]);
    }
    if (v7) {
      CFRelease(v7);
    }
  }
}

void fpfsi_renderPipelineRequiresManualRestart(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  cf[25] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  CFTypeRef v8 = 0;
  cf[0] = 0;
  if (fpfsi_CopyPlayerAndItemFromItemRetainProxy(a2, cf, &v8))
  {
    if (dword_1E9350BB0)
    {
      os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  else
  {
    if (dword_1E9350BB0)
    {
      CMTimeFlags v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    FigRetainProxyRetain();
    if (a4) {
      CFRetain(a4);
    }
    CMNotificationCenterGetDefaultLocalCenter();
    CFTypeRef v7 = v8;
    CMBaseObjectGetDerivedStorage();
    FigGetAllocatorForMedia();
    FigDeferNotificationToDispatchQueue();
    if (cf[0]) {
      CFRelease(cf[0]);
    }
    if (v7) {
      CFRelease(v7);
    }
  }
}

void fpfsi_RenderPipelineFailedToStart(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  cf[25] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  CFTypeRef v8 = 0;
  cf[0] = 0;
  if (fpfsi_CopyPlayerAndItemFromItemRetainProxy(a2, cf, &v8))
  {
    if (dword_1E9350BB0)
    {
      os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  else
  {
    if (dword_1E9350BB0)
    {
      CMTimeFlags v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    FigRetainProxyRetain();
    if (a4) {
      CFRetain(a4);
    }
    CMNotificationCenterGetDefaultLocalCenter();
    CFTypeRef v7 = v8;
    CMBaseObjectGetDerivedStorage();
    FigGetAllocatorForMedia();
    FigDeferNotificationToDispatchQueue();
    if (cf[0]) {
      CFRelease(cf[0]);
    }
    if (v7) {
      CFRelease(v7);
    }
  }
}

void fpfsi_RenderPipelineWantsRebuildToIncreaseFidelity(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  CFTypeRef v6 = 0;
  CFTypeRef cf = 0;
  if (!fpfsi_CopyPlayerAndItemFromItemRetainProxy(a2, &cf, &v6))
  {
    FigRetainProxyRetain();
    if (a4) {
      CFRetain(a4);
    }
    CMNotificationCenterGetDefaultLocalCenter();
    CFTypeRef v5 = v6;
    CMBaseObjectGetDerivedStorage();
    FigGetAllocatorForMedia();
    FigDeferNotificationToDispatchQueue();
    if (cf) {
      CFRelease(cf);
    }
    if (v5) {
      CFRelease(v5);
    }
  }
}

void fpfsi_RenderPipelineDeviceHasDisconnected(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  CFTypeRef v6 = 0;
  CFTypeRef cf = 0;
  if (!fpfsi_CopyPlayerAndItemFromItemRetainProxy(a2, &cf, &v6))
  {
    FigRetainProxyRetain();
    if (a4) {
      CFRetain(a4);
    }
    CMNotificationCenterGetDefaultLocalCenter();
    CFTypeRef v5 = v6;
    CMBaseObjectGetDerivedStorage();
    FigGetAllocatorForMedia();
    FigDeferNotificationToDispatchQueue();
    if (cf) {
      CFRelease(cf);
    }
    if (v5) {
      CFRelease(v5);
    }
  }
}

void fpfsi_renderPipelineProcessingModeChanged(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  CFTypeRef v6 = 0;
  CFTypeRef cf = 0;
  if (!fpfsi_CopyPlayerAndItemFromItemRetainProxy(a2, &cf, &v6))
  {
    FigRetainProxyRetain();
    if (a4) {
      CFRetain(a4);
    }
    CMNotificationCenterGetDefaultLocalCenter();
    CFTypeRef v5 = v6;
    CMBaseObjectGetDerivedStorage();
    FigGetAllocatorForMedia();
    FigDeferNotificationToDispatchQueue();
    if (cf) {
      CFRelease(cf);
    }
    if (v5) {
      CFRelease(v5);
    }
  }
}

void fpfsi_RenderPipelinePrerollLost(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  CFTypeRef v6 = 0;
  CFTypeRef cf = 0;
  if (!fpfsi_CopyPlayerAndItemFromItemRetainProxy(a2, &cf, &v6))
  {
    FigRetainProxyRetain();
    if (a4) {
      CFRetain(a4);
    }
    CMNotificationCenterGetDefaultLocalCenter();
    CFTypeRef v5 = v6;
    CMBaseObjectGetDerivedStorage();
    FigGetAllocatorForMedia();
    FigDeferNotificationToDispatchQueue();
    if (cf) {
      CFRelease(cf);
    }
    if (v5) {
      CFRelease(v5);
    }
  }
}

void fpfsi_renderPipelineStartupTimestampsChanged(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  CFTypeRef v6 = 0;
  CFTypeRef cf = 0;
  if (!fpfsi_CopyPlayerAndItemFromItemRetainProxy(a2, &cf, &v6))
  {
    FigRetainProxyRetain();
    if (a4) {
      CFRetain(a4);
    }
    CMNotificationCenterGetDefaultLocalCenter();
    CFTypeRef v5 = v6;
    CMBaseObjectGetDerivedStorage();
    FigGetAllocatorForMedia();
    FigDeferNotificationToDispatchQueue();
    if (cf) {
      CFRelease(cf);
    }
    if (v5) {
      CFRelease(v5);
    }
  }
}

void *fpfs_cloneTrackAndAddToTrackList(uint64_t a1, int a2)
{
  int v4 = *(const void **)(a1 + 48);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(unsigned int *)(a1 + 24);
  CFTypeRef v7 = fpfs_AddNewTrack(*(void *)a1, v6, v4, *(unsigned __int8 *)(a1 + 180), *(_DWORD *)(a1 + 32), *(_DWORD *)(a1 + 28));
  if (v7)
  {
    v7[5] = FigFormatDescriptionRetain();
    CFTypeRef v8 = *(CFTypeRef *)(a1 + 384);
    if (v8) {
      CFTypeRef v8 = CFRetain(v8);
    }
    v7[48] = v8;
    long long v9 = *(_OWORD *)(a1 + 128);
    v7[18] = *(void *)(a1 + 144);
    *((_OWORD *)v7 + 8) = v9;
    v7[8] = *(void *)(a1 + 64);
    long long v10 = *(_OWORD *)(a1 + 396);
    *(void *)((char *)v7 + 412) = *(void *)(a1 + 412);
    *(_OWORD *)((char *)v7 + 396) = v10;
    *((unsigned char *)v7 + 420) = *(unsigned char *)(a1 + 420);
    uint64_t v11 = (const void *)v7[55];
    uint64_t v12 = *(const void **)(a1 + 440);
    v7[55] = v12;
    if (v12) {
      CFRetain(v12);
    }
    if (v11) {
      CFRelease(v11);
    }
    uint64_t v13 = (const void *)v7[58];
    uint64_t v14 = *(const void **)(a1 + 464);
    v7[58] = v14;
    if (v14) {
      CFRetain(v14);
    }
    if (v13) {
      CFRelease(v13);
    }
    if (a2)
    {
      uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v15) {
        uint64_t v16 = v15;
      }
      else {
        uint64_t v16 = 0;
      }
      unsigned int v17 = *(unsigned int (**)(const void *, uint64_t, void, void *))(v16 + 32);
      if (!v17 || v17(v4, v6, &kManifoldOutputCallbacks, v7))
      {
        fpfs_DeleteTrack(v5, v7);
        return 0;
      }
    }
  }
  return v7;
}

void fpfs_stopPlaybackForInternalReason(const void *a1, int a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  FigCFDictionarySetFloat32();
  fpfs_EnqueueNotification(a1, @"Remote_RateWillChangeTo", a1, Mutable);
  *(_DWORD *)(DerivedStorage + 108) = 0;
  long long v16 = *MEMORY[0x1E4F1F9F8];
  uint64_t v17 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  long long v14 = v16;
  uint64_t v15 = v17;
  if (fpfs_setRateInternal(a1, 0, &v16, &v14, 0.0))
  {
LABEL_5:
    if (!Mutable) {
      return;
    }
    goto LABEL_6;
  }
  if (a2)
  {
    NotificationPayloadForProperties = fpfs_CreateNotificationPayloadForProperties(a1, 0, v7, v8, v9, v10, v11, v12, @"CurrentRate", 0);
    FigCFDictionarySetInt32();
    fpfs_EnqueueNotification(a1, @"RateDidChange", a1, NotificationPayloadForProperties);
    if (NotificationPayloadForProperties) {
      CFRelease(NotificationPayloadForProperties);
    }
    goto LABEL_5;
  }
  fpfs_EnqueueNotification(a1, @"RateDidChange", a1, 0);
  if (!Mutable) {
    return;
  }
LABEL_6:
  CFRelease(Mutable);
}

uint64_t fpfsi_deferredAudioLatencyChanged(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  CFTypeRef v9 = 0;
  uint64_t v10 = 0;
  if (!fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer(a2, (CFTypeRef *)&v10, &v9))
  {
    CFTypeRef v5 = v9;
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    CFTypeRef v7 = (CFTypeRef)v10;
    fpfsi_restartAudioRendering(v10, (uint64_t)v5, DerivedStorage, (uint64_t)a4);
    fpfs_UnlockAndPostNotificationsWithCaller(v7);
    if (v7) {
      CFRelease(v7);
    }
    if (v5) {
      CFRelease(v5);
    }
  }
  if (a4) {
    CFRelease(a4);
  }

  return FigRetainProxyRelease();
}

void fpfsi_restartAudioRendering(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(void *)(CMBaseObjectGetDerivedStorage() + 536);
  if (v8)
  {
    CFBooleanRef BOOLean = 0;
    uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
    uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v10
      && (int v11 = *(void (**)(uint64_t, __CFString *, uint64_t, CFBooleanRef *))(v10 + 8)) != 0
      && (v11(v8, @"FAS_IsActive", AllocatorForMedia, &BOOLean), BOOLean))
    {
      int Value = CFBooleanGetValue(BOOLean);
      CFRelease(BOOLean);
      if (Value || !dword_1E9350BB0)
      {
        if (!Value) {
          return;
        }
        goto LABEL_8;
      }
    }
    else if (!dword_1E9350BB0)
    {
      return;
    }
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return;
  }
LABEL_8:
  uint64_t RenderingTrackofType = fpfs_FirstRenderingTrackofType(a2, 1936684398);
  if (RenderingTrackofType)
  {
    if (*(void *)(*(void *)(RenderingTrackofType + 96) + 32) == a4)
    {
      float v14 = *(float *)(a3 + 848);
      if (v14 != 0.0)
      {
        if (dword_1E9350BB0)
        {
          LODWORD(BOOLean) = 0;
          uint64_t v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v16 = BOOLean;
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v17 = v16;
          }
          else {
            unsigned int v17 = v16 & 0xFFFFFFFE;
          }
          if (v17)
          {
            if (a1) {
              unsigned int v18 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
            }
            else {
              unsigned int v18 = "";
            }
            if (a2) {
              CFAllocatorRef v20 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
            }
            else {
              CFAllocatorRef v20 = "";
            }
            *(_DWORD *)CMTimeEpoch v24 = 136316162;
            *(void *)&v24[4] = "fpfsi_restartAudioRendering";
            *(_WORD *)&v24[12] = 2048;
            *(void *)&v24[14] = a1;
            *(_WORD *)&v24[22] = 2082;
            uint64_t v25 = v18;
            __int16 v26 = 2048;
            uint64_t v27 = a2;
            __int16 v28 = 2082;
            int v29 = v20;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        long long v22 = *MEMORY[0x1E4F1F9F8];
        long long v30 = v22;
        uint64_t v21 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
        uint64_t v31 = v21;
        *(_OWORD *)CMTimeEpoch v24 = v22;
        *(void *)&v24[16] = v21;
        fpfs_setRateInternal(a1, a2, &v30, v24, 0.0);
        long long v30 = v22;
        uint64_t v31 = v21;
        *(_OWORD *)CMTimeEpoch v24 = v22;
        *(void *)&v24[16] = v21;
        fpfs_setRateInternal(a1, a2, &v30, v24, COERCE_DOUBLE(__PAIR64__(DWORD1(v22), LODWORD(v14))));
      }
    }
  }
}

uint64_t fpfsi_deferredRenderPipelineRequiresManualRestart(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  v12[24] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  CFTypeRef v11 = 0;
  v12[0] = 0;
  if (!fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer(a2, v12, &v11))
  {
    CFTypeRef v5 = v12[0];
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    CFTypeRef v7 = v11;
    uint64_t v8 = CMBaseObjectGetDerivedStorage();
    if (*(unsigned char *)(DerivedStorage + 568))
    {
      fpfsi_restartAudioRendering((uint64_t)v5, (uint64_t)v7, v8, (uint64_t)a4);
    }
    else
    {
      if (dword_1E9350BB0)
      {
        os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      fpfs_EnqueueNotification(v5, @"RenderingStoppedForConfigurationChange", v5, 0);
    }
    fpfs_UnlockAndPostNotificationsWithCaller(v5);
    if (v5) {
      CFRelease(v5);
    }
    if (v7) {
      CFRelease(v7);
    }
  }
  if (a4) {
    CFRelease(a4);
  }
  return FigRetainProxyRelease();
}

uint64_t fpfsi_deferredRenderPipelineFailedToStart(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  v11[27] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  uint64_t v10 = 0;
  v11[0] = 0;
  if (!fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer(a2, v11, (CFTypeRef *)&v10))
  {
    CFTypeRef v5 = v11[0];
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    FigCFDictionaryGetInt32IfPresent();
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    CFTypeRef v8 = (CFTypeRef)v10;
    fpfs_StopPlayingItemWithOSStatus(DerivedStorage, v10, 4294954436);
    fpfs_UnlockAndPostNotificationsWithCaller(v5);
    if (v5) {
      CFRelease(v5);
    }
    if (v8) {
      CFRelease(v8);
    }
  }
  if (a4) {
    CFRelease(a4);
  }
  return FigRetainProxyRelease();
}

uint64_t fpfsi_deferredRenderPipelineWantsRebuild(uint64_t a1, uint64_t a2, const void *a3, const void *a4)
{
  v17[25] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  CFTypeRef v16 = 0;
  v17[0] = 0;
  if (fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer(a2, v17, &v16)) {
    goto LABEL_17;
  }
  CFTypeRef v6 = v17[0];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v8 = DerivedStorage;
  CFTypeRef v9 = v16;
  CFTypeRef v10 = *(CFTypeRef *)(DerivedStorage + 80);
  if (v16 == v10 && dword_1E9350BB0 != 0)
  {
    uint64_t v15 = DerivedStorage;
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    uint64_t v8 = v15;
  }
  if (*(void *)(v8 + 736) && CFEqual(a3, @"DeviceHasDisconnected"))
  {
    if (dword_1E9350BB0)
    {
      uint64_t v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    goto LABEL_12;
  }
  if (v9 == v10) {
LABEL_12:
  }
    fpfs_stopResetDisturbReprepareAndResume(v6, *(const __CFArray **)(v8 + 80), 0);
  fpfs_UnlockAndPostNotificationsWithCaller(v6);
  if (v6) {
    CFRelease(v6);
  }
  if (v9) {
    CFRelease(v9);
  }
LABEL_17:
  if (a4) {
    CFRelease(a4);
  }
  return FigRetainProxyRelease();
}

uint64_t fpfsi_deferredRenderPipelineProcessingModeChanged(int a1, uint64_t a2, int a3, CFTypeRef cf, CFTypeRef a5)
{
  CFTypeRef v21 = 0;
  CFTypeRef v22 = 0;
  if (a5)
  {
    CFTypeID v7 = CFGetTypeID(a5);
    if (v7 == CFDictionaryGetTypeID())
    {
      CFStringRef Value = (const __CFString *)FigCFDictionaryGetValue();
      if (Value)
      {
        CFStringRef v9 = Value;
        CFTypeID v10 = CFGetTypeID(Value);
        if (v10 == CFStringGetTypeID()
          && !fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer(a2, &v22, &v21))
        {
          CFTypeRef v11 = v21;
          uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
          if (DerivedStorage)
          {
            uint64_t v13 = DerivedStorage;
            uint64_t v14 = CFStringCompare(v9, @"ProcessingModePassthrough", 0)
                ? CFEqual(v9, @"ProcessingModeTranscode")
                : 2;
            uint64_t v15 = *(void *)(v13 + 2544);
            if (v15)
            {
              uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 16);
              uint64_t v17 = v16 ? v16 : 0;
              unsigned int v18 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v17 + 56);
              if (v18) {
                v18(v15, 0x1EE582B78, 0x1EE585F78, v14, 0);
              }
            }
          }
          CFTypeRef v19 = v22;
          fpfs_UnlockAndPostNotificationsWithCaller(v22);
          if (v19) {
            CFRelease(v19);
          }
          if (v11) {
            CFRelease(v11);
          }
        }
      }
    }
  }
  if (cf) {
    CFRelease(cf);
  }

  return FigRetainProxyRelease();
}

uint64_t fpfsi_deferredRenderPipelinePrerollLost(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  CFArrayRef v8 = 0;
  CFTypeRef v9 = 0;
  if (!fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer(a2, &v9, (CFTypeRef *)&v8))
  {
    CFArrayRef v5 = v8;
    CFTypeRef v6 = v9;
    fpfs_stopResetDisturbReprepareAndResume(v9, v8, 0);
    fpfs_UnlockAndPostNotificationsWithCaller(v6);
    if (v6) {
      CFRelease(v6);
    }
    if (v5) {
      CFRelease(v5);
    }
  }
  if (a4) {
    CFRelease(a4);
  }

  return FigRetainProxyRelease();
}

uint64_t fpfsi_deferredRenderPipelineStartupTimestampsChanged(int a1, uint64_t a2, int a3, CFTypeRef cf, CFTypeRef a5)
{
  CFTypeRef v45 = 0;
  CFTypeRef v46 = 0;
  if (a5)
  {
    CFTypeID v7 = CFGetTypeID(a5);
    if (v7 == CFDictionaryGetTypeID()
      && !fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer(a2, &v46, &v45))
    {
      CFTypeRef v8 = v45;
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      if (DerivedStorage)
      {
        uint64_t v10 = DerivedStorage;
        uint64_t v50 = 0;
        uint64_t v51 = 0;
        uint64_t v48 = 0;
        uint64_t v49 = 0;
        uint64_t v47 = 0;
        FigCFDictionaryGetInt64IfPresent();
        FigCFDictionaryGetInt64IfPresent();
        FigCFDictionaryGetInt64IfPresent();
        int Int64IfPresent = FigCFDictionaryGetInt64IfPresent();
        int v12 = FigCFDictionaryGetInt64IfPresent();
        unint64_t v13 = v50 - v51;
        if (v50 - v51 >= 1)
        {
          uint64_t v14 = *(void *)(v10 + 2544);
          if (v14)
          {
            uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
            uint64_t v16 = v15 ? v15 : 0;
            uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t, unint64_t, void))(v16 + 56);
            if (v17) {
              v17(v14, 0x1EE582B78, 0x1EE585E78, v13 / 0xF4240, 0);
            }
          }
        }
        unint64_t v18 = v49 - v51;
        if (v49 - v51 >= 1)
        {
          uint64_t v19 = *(void *)(v10 + 2544);
          if (v19)
          {
            uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 16);
            uint64_t v21 = v20 ? v20 : 0;
            CFTypeRef v22 = *(void (**)(uint64_t, uint64_t, uint64_t, unint64_t, void))(v21 + 56);
            if (v22) {
              v22(v19, 0x1EE582B78, 0x1EE585E58, v18 / 0xF4240, 0);
            }
          }
        }
        unint64_t v23 = v49 - v50;
        if (v49 - v50 >= 1)
        {
          uint64_t v24 = *(void *)(v10 + 2544);
          if (v24)
          {
            uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 16);
            uint64_t v26 = v25 ? v25 : 0;
            uint64_t v27 = *(void (**)(uint64_t, uint64_t, uint64_t, unint64_t, void))(v26 + 56);
            if (v27) {
              v27(v24, 0x1EE582B78, 0x1EE585E38, v23 / 0xF4240, 0);
            }
          }
        }
        if (Int64IfPresent)
        {
          unint64_t v28 = v50 - v48;
          if (v50 - v48 >= 1)
          {
            uint64_t v29 = *(void *)(v10 + 2544);
            if (v29)
            {
              uint64_t v30 = *(void *)(CMBaseObjectGetVTable() + 16);
              uint64_t v31 = v30 ? v30 : 0;
              uint64_t v32 = *(void (**)(uint64_t, uint64_t, uint64_t, unint64_t, void))(v31 + 56);
              if (v32) {
                v32(v29, 0x1EE582B78, 0x1EE585DF8, v28 / 0xF4240, 0);
              }
            }
          }
        }
        if (v12)
        {
          unint64_t v33 = v47 - v51;
          if (v47 - v51 >= 1)
          {
            uint64_t v34 = *(void *)(v10 + 2544);
            if (v34)
            {
              uint64_t v35 = *(void *)(CMBaseObjectGetVTable() + 16);
              uint64_t v36 = v35 ? v35 : 0;
              unsigned int v37 = *(void (**)(uint64_t, uint64_t, uint64_t, unint64_t, void))(v36 + 56);
              if (v37) {
                v37(v34, 0x1EE582B78, 0x1EE585E18, v33 / 0xF4240, 0);
              }
            }
          }
          if (Int64IfPresent)
          {
            unint64_t v38 = v48 - v47;
            if (v48 - v47 >= 1)
            {
              uint64_t v39 = *(void *)(v10 + 2544);
              if (v39)
              {
                uint64_t v40 = *(void *)(CMBaseObjectGetVTable() + 16);
                uint64_t v41 = v40 ? v40 : 0;
                unsigned __int8 v42 = *(void (**)(uint64_t, uint64_t, uint64_t, unint64_t, void))(v41 + 56);
                if (v42) {
                  v42(v39, 0x1EE582B78, 0x1EE585DD8, v38 / 0xF4240, 0);
                }
              }
            }
          }
        }
      }
      CFTypeRef v43 = v46;
      fpfs_UnlockAndPostNotificationsWithCaller(v46);
      if (v43) {
        CFRelease(v43);
      }
      if (v8) {
        CFRelease(v8);
      }
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  return FigRetainProxyRelease();
}

uint64_t fpfsi_MakeReadyForInspection(uint64_t a1, const __CFArray *a2, unsigned char *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v6 = *(const void **)DerivedStorage;
  fpfs_LockMutexWithCaller(*(void *)DerivedStorage);
  if (FigRetainProxyIsInvalidated()) {
    goto LABEL_30;
  }
  int v7 = *(unsigned __int8 *)(DerivedStorage + 460);
  if (dword_1E9350BB0)
  {
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (v7) {
    goto LABEL_5;
  }
  if (a2)
  {
    if (*(void *)(DerivedStorage + 2232))
    {
      CFIndex Count = CFArrayGetCount(a2);
      if (Count >= 1)
      {
        CFIndex v12 = Count;
        for (CFIndex i = 0; i != v12; ++i)
        {
          CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(a2, i);
          v23.length = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 2232));
          v23.location = 0;
          if (CFArrayGetFirstIndexOfValue(*(CFArrayRef *)(DerivedStorage + 2232), v23, ValueAtIndex) < 0) {
            CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 2232), ValueAtIndex);
          }
        }
      }
      goto LABEL_18;
    }
    CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    CFMutableArrayRef MutableCopy = CFArrayCreateMutableCopy(AllocatorForMedia, 0, a2);
    *(void *)(DerivedStorage + 2232) = MutableCopy;
    if (MutableCopy) {
      goto LABEL_18;
    }
LABEL_30:
    uint64_t v9 = FigSignalErrorAt();
    goto LABEL_8;
  }
LABEL_18:
  int v17 = *(_DWORD *)(DerivedStorage + 456);
  if (v17 == 2)
  {
    uint64_t v9 = 0;
LABEL_23:
    *(_DWORD *)(DerivedStorage + 456) = 1;
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_5:
    uint64_t v9 = 0;
    goto LABEL_6;
  }
  FigRetainProxyRetain();
  uint64_t v18 = *(void *)(DerivedStorage + 32);
  uint64_t v19 = *(void *)(DerivedStorage + 16);
  uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v20) {
    uint64_t v21 = v20;
  }
  else {
    uint64_t v21 = 0;
  }
  CFTypeRef v22 = *(uint64_t (**)(uint64_t, void, uint64_t))(v21 + 72);
  if (v22)
  {
    uint64_t v9 = v22(v18, fpfs_PumpTransferCallback, v19);
    if (!v9) {
      goto LABEL_23;
    }
  }
  else
  {
    uint64_t v9 = 4294954514;
  }
  FigRetainProxyRelease();
LABEL_6:
  if (a3) {
    *a3 = v7;
  }
LABEL_8:
  fpfs_UnlockAndPostNotificationsWithCaller(v6);
  return v9;
}

void fpfs_PumpTransferCallback(uint64_t a1, const void *a2, const void *a3)
{
  v47[23] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  v47[0] = 0;
  int v5 = fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer(a1, v47, &cf);
  CFStringRef v6 = 0;
  CFTypeRef v7 = cf;
  if (!v5)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    CFTypeRef v9 = v47[0];
    CMBaseObjectGetDerivedStorage();
    int v10 = *(_DWORD *)(DerivedStorage + 456);
    if (v10 == 1)
    {
      if (dword_1E9350BB0)
      {
        os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      *(void *)(DerivedStorage + 936) = FigBytePumpRetain(a2);
      *(_DWORD *)(DerivedStorage + 456) = 3;
      CFIndex v12 = *(const void **)(DerivedStorage + 944);
      *(void *)(DerivedStorage + 944) = a3;
      if (a3) {
        CFRetain(a3);
      }
      if (v12) {
        CFRelease(v12);
      }
      unint64_t v13 = *(const void **)(DerivedStorage + 3104);
      if (v13)
      {
        CFRelease(v13);
        *(void *)(DerivedStorage + 3104) = 0;
      }
      uint64_t v14 = *(void *)(DerivedStorage + 936);
      if (v14)
      {
        uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
        uint64_t FigBaseObject = FigBytePumpGetFigBaseObject(v14);
        uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v17) {
          uint64_t v18 = v17;
        }
        else {
          uint64_t v18 = 0;
        }
        uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 48);
        if (v19) {
          v19(FigBaseObject, 0x1EE53ECF8, AllocatorForMedia, DerivedStorage + 3240);
        }
        uint64_t v20 = *(void *)(DerivedStorage + 936);
        uint64_t v21 = FigGetAllocatorForMedia();
        uint64_t v22 = FigBytePumpGetFigBaseObject(v20);
        uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v23) {
          uint64_t v24 = v23;
        }
        else {
          uint64_t v24 = 0;
        }
        uint64_t v25 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 48);
        if (v25) {
          v25(v22, 0x1EE53EC38, v21, DerivedStorage + 3104);
        }
        FigNetworkUrgencyMonitorSetTimebase(*(void *)(DerivedStorage + 3104), *(void *)(DerivedStorage + 576));
        fpfsi_StopGearSwitchReleaseAndCleanPlaybackMonitor(DerivedStorage);
        uint64_t v26 = *(void *)(DerivedStorage + 936);
        uint64_t v27 = FigGetAllocatorForMedia();
        uint64_t v28 = FigBytePumpGetFigBaseObject(v26);
        uint64_t v29 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v29) {
          uint64_t v30 = v29;
        }
        else {
          uint64_t v30 = 0;
        }
        uint64_t v31 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v30 + 48);
        if (v31) {
          v31(v28, 0x1EE53ECD8, v27, DerivedStorage + 96);
        }
        CFAllocatorRef v32 = (const __CFAllocator *)FigGetAllocatorForMedia();
        if (v7) {
          unint64_t v33 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
        }
        else {
          unint64_t v33 = "";
        }
        CFStringRef v6 = CFStringCreateWithCString(v32, v33, 0x8000100u);
        fpfsi_setPlaybackRateMonitorProperty(DerivedStorage, @"AfmfpbProperty_LoggingID", (uint64_t)v6);
        FigStartForwardingMediaServicesProcessDeathNotification();
      }
      else
      {
        CFStringRef v6 = 0;
      }
      FigRetainProxyRetain();
      FigRetainProxyRetainOwner();
      CMNotificationCenterGetDefaultLocalCenter();
      FigGetAllocatorForMedia();
      FigDeferNotificationToDispatchQueue();
      uint64_t v34 = *(void *)(DerivedStorage + 936);
      if (v34)
      {
        uint64_t v35 = *(void *)(DerivedStorage + 2544);
        if (v35)
        {
          uint64_t v36 = FigBytePumpGetFigBaseObject(v34);
          uint64_t v37 = *(void *)(CMBaseObjectGetVTable() + 8);
          uint64_t v38 = v37 ? v37 : 0;
          uint64_t v39 = *(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 56);
          if (v39) {
            v39(v36, 0x1EE53E918, v35);
          }
        }
        uint64_t v40 = *(void *)(DerivedStorage + 936);
        if (v40)
        {
          uint64_t v41 = *(void *)(DerivedStorage + 3376);
          if (v41)
          {
            uint64_t v42 = FigBytePumpGetFigBaseObject(v40);
            uint64_t v43 = *(void *)(CMBaseObjectGetVTable() + 8);
            uint64_t v44 = v43 ? v43 : 0;
            CFTypeRef v45 = *(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 56);
            if (v45) {
              v45(v42, 0x1EE53E938, v41);
            }
          }
        }
      }
      int v10 = *(_DWORD *)(DerivedStorage + 456);
    }
    else
    {
      CFStringRef v6 = 0;
    }
    if (v10 == 2) {
      *(_DWORD *)(DerivedStorage + 456) = 0;
    }
    fpfs_UnlockAndPostNotificationsWithCaller(v9);
  }
  if (v7) {
    CFRelease(v7);
  }
  if (v47[0]) {
    CFRelease(v47[0]);
  }
  FigRetainProxyRelease();
  if (v6) {
    CFRelease(v6);
  }
}

uint64_t fpfs_DeferredPumpTransferCompleted(uint64_t a1, uint64_t a2)
{
  uint64_t v259 = *MEMORY[0x1E4F143B8];
  CFTypeRef v240 = 0;
  CFTypeRef v241 = 0;
  int v2 = fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer(a2, &v241, &v240);
  CFTypeRef v3 = v240;
  if (v2) {
    goto LABEL_288;
  }
  long long v238 = *MEMORY[0x1E4F1F9F8];
  uint64_t v239 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v5 = v241;
  uint64_t v234 = CMBaseObjectGetDerivedStorage();
  CFTypeRef v237 = 0;
  CFStringRef v6 = *(const void **)(DerivedStorage + 944);
  if (v6) {
    CFTypeRef v7 = (void *)CFRetain(v6);
  }
  else {
    CFTypeRef v7 = 0;
  }
  CFTypeRef v236 = v7;
  if (dword_1E9350BB0)
  {
    LODWORD(cf.value) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int value = cf.value;
    if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type[0])) {
      unsigned int v10 = value;
    }
    else {
      unsigned int v10 = value & 0xFFFFFFFE;
    }
    if (v10)
    {
      if (v5) {
        CFTypeRef v11 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
      }
      else {
        CFTypeRef v11 = "";
      }
      uint64_t v233 = v11;
      CFTypeRef v12 = v5;
      if (v3) {
        unint64_t v13 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
      }
      else {
        unint64_t v13 = "";
      }
      uint64_t v14 = *(void *)(DerivedStorage + 936);
      if (v7) {
        int Code = CFErrorGetCode((CFErrorRef)v7);
      }
      else {
        int Code = 0;
      }
      LODWORD(v246.value) = 136316931;
      *(CMTimeValue *)((char *)&v246.value + 4) = (CMTimeValue)"fpfs_DeferredPumpTransferCompleted";
      LOWORD(v246.flags) = 2048;
      *(void *)((char *)&v246.flags + 2) = v12;
      HIWORD(v246.epoch) = 2082;
      CMTimeFlags v247 = v233;
      __int16 v248 = 2048;
      CFTypeRef v249 = v3;
      __int16 v250 = 2082;
      long long v251 = v13;
      CFTypeRef v5 = v12;
      __int16 v252 = 2048;
      uint64_t v253 = v14;
      __int16 v254 = 2113;
      v255 = v7;
      __int16 v256 = 1024;
      int v257 = Code;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (v7)
  {
    __int16 v154 = 0;
LABEL_281:
    if (v236) {
      fpfsi_NotReadyForInspection(v240, (uint64_t)v236);
    }
    fpfs_UnlockAndPostNotificationsWithCaller(v241);
    if (v154) {
      CFRelease(v154);
    }
    goto LABEL_285;
  }
  if (!*(void *)(DerivedStorage + 936))
  {
    __int16 v154 = 0;
    goto LABEL_307;
  }
  uint64_t v16 = CMBaseObjectGetDerivedStorage();
  if (*(void *)(v16 + 936))
  {
    uint64_t v17 = v16;
    CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    if (v3) {
      uint64_t v19 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
    }
    else {
      uint64_t v19 = "";
    }
    CFStringRef v20 = CFStringCreateWithCString(AllocatorForMedia, v19, 0x600u);
    CFAllocatorRef v21 = (const __CFAllocator *)FigGetAllocatorForMedia();
    uint64_t v22 = FigAlternateSelectionBossCreate(v21, (void *)(v17 + 40));
    if (!v22)
    {
      uint64_t v23 = *(const void **)(v17 + 40);
      uint64_t v24 = *(void *)(v17 + 16);
      __copy_constructor_8_8_pa0_38126_0_pa0_35993_8_pa0_4849_16(&time, fpfsi_AlternateSelectionBossSetup_callbacks);
      uint64_t v22 = FigAlternateSelectionBossAddDelegate(v23, v24, &time, 0);
      if (!v22)
      {
        uint64_t v22 = FigAlternateSelectionBossSetProperty(*(const void **)(v17 + 40), @"loggingID", v20);
        if (!v22)
        {
          *(_WORD *)(v17 + 48) = 0;
          uint64_t v25 = *(void *)(v17 + 40);
          uint64_t FigBaseObject = FigBytePumpGetFigBaseObject(*(void *)(v17 + 936));
          uint64_t v27 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v27) {
            uint64_t v28 = v27;
          }
          else {
            uint64_t v28 = 0;
          }
          uint64_t v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 56);
          if (v29) {
            v29(FigBaseObject, 0x1EE53EC78, v25);
          }
          uint64_t v30 = *(void *)(v17 + 2392);
          if (v30) {
            uint64_t v31 = fpfsi_setPreferredBitrateForExpensiveNetworks(v3, v30);
          }
          else {
            uint64_t v31 = 0;
          }
          CFDictionaryRef v32 = *(const __CFDictionary **)(v17 + 2528);
          if (!v32)
          {
LABEL_42:
            if (v20) {
              CFRelease(v20);
            }
            if (v31) {
              goto LABEL_306;
            }
            goto LABEL_45;
          }
          uint64_t v22 = fpfsi_setResolutionCapForExpensiveNetworks(v3, v32);
        }
      }
    }
    uint64_t v31 = v22;
    goto LABEL_42;
  }
  uint64_t v31 = FigSignalErrorAt();
  if (v31) {
    goto LABEL_306;
  }
LABEL_45:
  uint64_t v33 = *(void *)(DerivedStorage + 2352);
  if (v33)
  {
    uint64_t v34 = FigBytePumpGetFigBaseObject(*(void *)(DerivedStorage + 936));
    uint64_t v35 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v36 = v35 ? v35 : 0;
    uint64_t v37 = *(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 56);
    if (v37) {
      v37(v34, 0x1EE53E618, v33);
    }
  }
  uint64_t v38 = *MEMORY[0x1E4F1CFD0];
  uint64_t v39 = *MEMORY[0x1E4F1CFC8];
  if (*(unsigned char *)(DerivedStorage + 532)) {
    uint64_t v40 = *MEMORY[0x1E4F1CFD0];
  }
  else {
    uint64_t v40 = *MEMORY[0x1E4F1CFC8];
  }
  uint64_t v41 = FigBytePumpGetFigBaseObject(*(void *)(DerivedStorage + 936));
  uint64_t v42 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v42) {
    uint64_t v43 = v42;
  }
  else {
    uint64_t v43 = 0;
  }
  uint64_t v44 = *(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 56);
  if (v44) {
    v44(v41, 0x1EE53E858, v40);
  }
  uint64_t v45 = FigBytePumpGetFigBaseObject(*(void *)(DerivedStorage + 936));
  uint64_t v46 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v46) {
    uint64_t v47 = v46;
  }
  else {
    uint64_t v47 = 0;
  }
  uint64_t v48 = *(void (**)(uint64_t, uint64_t, __CFString *))(v47 + 56);
  if (v48) {
    v48(v45, 0x1EE53EA38, @"StreamPlayer");
  }
  if (*(unsigned char *)(DerivedStorage + 3177)) {
    uint64_t v49 = v38;
  }
  else {
    uint64_t v49 = v39;
  }
  uint64_t v50 = FigBytePumpGetFigBaseObject(*(void *)(DerivedStorage + 936));
  uint64_t v51 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v51) {
    uint64_t v52 = v51;
  }
  else {
    uint64_t v52 = 0;
  }
  CMTimeEpoch v53 = *(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 56);
  if (v53) {
    v53(v50, 0x1EE53E518, v49);
  }
  if (*(unsigned char *)(DerivedStorage + 644))
  {
    CFAllocatorRef v54 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CMTime time = *(CMTime *)(DerivedStorage + 632);
    CFDictionaryRef v55 = CMTimeCopyAsDictionary(&time, v54);
    uint64_t v56 = FigBytePumpGetFigBaseObject(*(void *)(DerivedStorage + 936));
    uint64_t v57 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v57) {
      uint64_t v58 = v57;
    }
    else {
      uint64_t v58 = 0;
    }
    CFDictionaryRef v59 = *(void (**)(uint64_t, __CFString *, CFDictionaryRef))(v58 + 56);
    if (v59) {
      v59(v56, @"FBP_PrebufferReservation", v55);
    }
    if (v55) {
      CFRelease(v55);
    }
  }
  if (!*(_DWORD *)(DerivedStorage + 2244))
  {
    uint64_t v60 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v61 = v60 ? v60 : 0;
    if (!*(void *)(v61 + 24)) {
      *(_DWORD *)(DerivedStorage + 2244) = 50;
    }
  }
  time.unsigned int value = 0;
  uint64_t v62 = CMBaseObjectGetDerivedStorage();
  if (v62)
  {
    uint64_t v63 = (unsigned char *)v62;
    uint64_t v64 = *(void *)(v62 + 936);
    if (v64)
    {
      uint64_t v65 = FigGetAllocatorForMedia();
      uint64_t v66 = FigBytePumpGetFigBaseObject(v64);
      uint64_t v67 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v68 = v67 ? v67 : 0;
      float v69 = *(void (**)(uint64_t, uint64_t, uint64_t, CMTime *))(v68 + 48);
      if (v69)
      {
        v69(v66, 0x1EE53E6D8, v65, &time);
        if (time.value)
        {
          v63[552] = FigRCLGetNumberWithDefault((const __CFDictionary *)time.value, @"allowDownloadPerfReports");
          v63[554] = FigRCLGetNumberWithDefault((const __CFDictionary *)time.value, @"allowProgressiveSwitchUp");
          v63[555] = FigRCLGetNumberWithDefault((const __CFDictionary *)time.value, @"allowProgressiveStartup");
          v63[556] = FigRCLGetNumberWithDefault((const __CFDictionary *)time.value, @"allowProgressiveResume");
          v63[557] = FigRCLGetNumberWithDefault((const __CFDictionary *)time.value, @"suppressUnknownCodecVariants");
        }
      }
    }
    fpfsi_RTCReportingUpdateProgressive((uint64_t)v63, 0x1EE561218, v63[554]);
    fpfsi_RTCReportingUpdateProgressive((uint64_t)v63, 0x1EE561238, v63[555]);
    fpfsi_RTCReportingUpdateProgressive((uint64_t)v63, 0x1EE561258, v63[556]);
    if (time.value) {
      CFRelease((CFTypeRef)time.value);
    }
  }
  time.unsigned int value = 0;
  if (v3)
  {
    uint64_t v70 = CMBaseObjectGetDerivedStorage();
    *(_DWORD *)(v70 + 2268) = 110;
    *(void *)(v70 + 2272) = 0x3FF8000000000000;
    *(void *)(v70 + 544) = 0x8000000;
    uint64_t v71 = *(void *)(v70 + 936);
    if (!v71) {
      goto LABEL_107;
    }
    uint64_t v72 = FigGetAllocatorForMedia();
    uint64_t v73 = FigBytePumpGetFigBaseObject(v71);
    uint64_t v74 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v75 = v74 ? v74 : 0;
    __int16 v76 = *(void (**)(uint64_t, uint64_t, uint64_t, CMTime *))(v75 + 48);
    if (!v76) {
      goto LABEL_107;
    }
    v76(v73, 0x1EE53E6D8, v72, &time);
    if (!time.value) {
      goto LABEL_107;
    }
    int v77 = FigRCLGetNumberWithDefault((const __CFDictionary *)time.value, @"synchronizedWatermarksHighWaterMaxSecs");
    if ((v77 - 1) >= 0x31) {
      *(_DWORD *)(v70 + 2268) = v77;
    }
    *(double *)(v70 + 2272) = FigRCLGetDoubleWithDefault((const __CFDictionary *)time.value, @"synchronizedWatermarksHighWaterScaleFactor");
    int v78 = FigRCLGetNumberWithDefault((const __CFDictionary *)time.value, @"bufferAheadMaxMB");
    if ((v78 & 0x80000000) == 0)
    {
      unint64_t v79 = v78 << 20;
      *(void *)(v70 + 544) = v79;
    }
    else
    {
LABEL_107:
      unint64_t v79 = *(void *)(v70 + 544);
    }
    if (v79)
    {
      unint64_t v80 = *(void *)(v70 + 536);
      if (v79 < v80) {
        *(void *)(v70 + 544) = v80;
      }
    }
    if (time.value) {
      CFRelease((CFTypeRef)time.value);
    }
  }
  time.unsigned int value = 0;
  uint64_t v81 = CMBaseObjectGetDerivedStorage();
  if (v81)
  {
    uint64_t v82 = v81;
    if (*(void *)(v81 + 936))
    {
      if (CelestialIs1GBAudioAccessory())
      {
        uint64_t v83 = *(void *)(v82 + 936);
        uint64_t v84 = FigGetAllocatorForMedia();
        uint64_t v85 = FigBytePumpGetFigBaseObject(v83);
        uint64_t v86 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v87 = v86 ? v86 : 0;
        uint64_t v88 = *(void (**)(uint64_t, uint64_t, uint64_t, CMTime *))(v87 + 48);
        if (v88)
        {
          v88(v85, 0x1EE53E6D8, v84, &time);
          if (time.value)
          {
            *(void *)(v82 + 536) = (int)(FigRCLGetNumberWithDefault((const __CFDictionary *)time.value, @"cacheSize1GBAudioAccessoryMB") << 20);
            if (time.value) {
              CFRelease((CFTypeRef)time.value);
            }
          }
        }
      }
    }
  }
  uint64_t v89 = CMBaseObjectGetDerivedStorage();
  time.unsigned int value = (CMTimeValue)fpfsi_highSpeedHighPowerTransportChangedCallback;
  *(void *)&time.CMTimeScale timescale = fpfsi_expensiveNetworkChangedCallback;
  fpfsi_cleanupNetworkCostMonitor();
  uint64_t v90 = *(void *)(v89 + 2544);
  if (v90)
  {
    uint64_t v91 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v92 = v91 ? v91 : 0;
    double v93 = *(void (**)(uint64_t, uint64_t, uint64_t, void, void))(v92 + 8);
    if (v93) {
      v93(v90, 0x1EE582B78, 3001, 0, 0);
    }
  }
  uint64_t v94 = *(void *)(v89 + 936);
  uint64_t v95 = FigGetAllocatorForMedia();
  uint64_t v96 = FigBytePumpGetFigBaseObject(v94);
  uint64_t v97 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v97) {
    uint64_t v98 = v97;
  }
  else {
    uint64_t v98 = 0;
  }
  CFIndex v99 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v98 + 48);
  if (v99)
  {
    uint64_t v100 = (uint64_t *)(v89 + 2256);
    if (!v99(v96, 0x1EE53EC98, v95, v89 + 2256))
    {
      uint64_t v101 = *v100;
      if (*v100)
      {
        uint64_t v102 = *(void *)(v89 + 16);
        uint64_t GlobalNetworkBufferingQueue = FigThreadGetGlobalNetworkBufferingQueue();
        uint64_t v104 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v104) {
          uint64_t v105 = v104;
        }
        else {
          uint64_t v105 = 0;
        }
        long long v106 = *(void (**)(uint64_t, uint64_t, CMTime *, uint64_t))(v105 + 8);
        if (v106) {
          v106(v101, v102, &time, GlobalNetworkBufferingQueue);
        }
        uint64_t v107 = *(void *)(v89 + 2256);
        uint64_t v108 = *(void *)(v89 + 2536);
        uint64_t v109 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v109) {
          uint64_t v110 = v109;
        }
        else {
          uint64_t v110 = 0;
        }
        CMTime v111 = *(void (**)(uint64_t, uint64_t, uint64_t))(v110 + 56);
        if (v111) {
          v111(v107, 0x1EE57E478, v108);
        }
        uint64_t v112 = *(void *)(v89 + 2256);
        if (*(_DWORD *)(v89 + 1888)) {
          uint64_t v113 = v39;
        }
        else {
          uint64_t v113 = v38;
        }
        uint64_t v114 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v114) {
          uint64_t v115 = v114;
        }
        else {
          uint64_t v115 = 0;
        }
        uint64_t v116 = *(void (**)(uint64_t, uint64_t, uint64_t))(v115 + 56);
        if (v116) {
          v116(v112, 0x1EE57E498, v113);
        }
        uint64_t v117 = *(void *)(v89 + 2256);
        uint64_t v118 = v39;
        if (*(int *)(v89 + 2268) >= 1)
        {
          if (*(unsigned char *)(v89 + 2264)) {
            uint64_t v118 = v38;
          }
          else {
            uint64_t v118 = v39;
          }
        }
        uint64_t v119 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v119) {
          uint64_t v120 = v119;
        }
        else {
          uint64_t v120 = 0;
        }
        __int16 v121 = *(void (**)(uint64_t, uint64_t, uint64_t))(v120 + 56);
        if (v121) {
          v121(v117, 0x1EE57E4D8, v118);
        }
        fpfsi_updateNetworkCostMonitorMaximumMediaBitrate();
      }
    }
  }
  fpfsi_setupCMCDHeaderVendor();
  if (*(_DWORD *)(v234 + 808) == 1)
  {
    uint64_t v122 = FigBytePumpGetFigBaseObject(*(void *)(DerivedStorage + 936));
    uint64_t v123 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v123) {
      uint64_t v124 = v123;
    }
    else {
      uint64_t v124 = 0;
    }
    __int16 v125 = *(void (**)(uint64_t, uint64_t, uint64_t))(v124 + 56);
    if (v125) {
      v125(v122, 0x1EE53E538, v38);
    }
    uint64_t v126 = FigBytePumpGetFigBaseObject(*(void *)(DerivedStorage + 936));
    uint64_t v127 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v127) {
      uint64_t v128 = v127;
    }
    else {
      uint64_t v128 = 0;
    }
    __int16 v129 = *(void (**)(uint64_t, uint64_t, uint64_t))(v128 + 56);
    if (v129) {
      v129(v126, 0x1EE53E558, v39);
    }
  }
  uint64_t v130 = CMBaseObjectGetDerivedStorage();
  time.unsigned int value = 0;
  type[0] = OS_LOG_TYPE_DEFAULT;
  v246.unsigned int value = 0;
  cf.unsigned int value = 0;
  if (!*(void *)(v130 + 936))
  {
    FigSignalErrorAt();
LABEL_200:
    CFMutableDictionaryRef Mutable = 0;
    goto LABEL_201;
  }
  uint64_t v131 = v130;
  uint64_t v132 = *(void *)(v130 + 32);
  uint64_t v133 = FigGetAllocatorForMedia();
  uint64_t CMBaseObject = FigAssetGetCMBaseObject(v132);
  uint64_t v135 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v135) {
    uint64_t v136 = v135;
  }
  else {
    uint64_t v136 = 0;
  }
  long long v137 = *(unsigned int (**)(uint64_t, __CFString *, uint64_t, CMTime *))(v136 + 48);
  if (!v137 || v137(CMBaseObject, @"assetProperty_CreationOptionsDictionary", v133, &time)) {
    goto LABEL_200;
  }
  uint64_t v138 = *(void *)(v131 + 32);
  uint64_t v139 = FigGetAllocatorForMedia();
  uint64_t v140 = FigAssetGetCMBaseObject(v138);
  uint64_t v141 = *(void *)(CMBaseObjectGetVTable() + 8);
  uint64_t v142 = v141 ? v141 : 0;
  CFTypeRef v143 = *(unsigned int (**)(uint64_t, __CFString *, uint64_t, CMTime *))(v142 + 48);
  if (!v143 || v143(v140, @"assetProperty_OriginalNetworkContentURL", v139, &v246)) {
    goto LABEL_200;
  }
  CFAllocatorRef v144 = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v144, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    if (time.value)
    {
      URLCFStringRef Value = (const void *)FigCFDictionaryGetURLValue();
      FigCFDictionaryGetBooleanIfPresent();
      if (type[0])
      {
        if (URLValue)
        {
          CFDictionarySetValue(Mutable, @"FSC_DiskCacheRepositoryURL", URLValue);
          CFDictionarySetValue(Mutable, @"FSC_Backing", @"FSC_DiskBacking");
          CFDictionarySetValue(Mutable, @"FSC_ClientName", @"player");
          FigCFDictionarySetValueFromKeyInDict();
          FigCFDictionarySetValueFromKeyInDict();
          CFAllocatorRef v147 = (const __CFAllocator *)FigGetAllocatorForMedia();
          if (!FigStreamingCacheCreate(v147, (const __CFURL *)v246.value, Mutable, &cf.value))
          {
            uint64_t v148 = *(void *)(v131 + 936);
            CMTimeValue v149 = cf.value;
            uint64_t v150 = FigBytePumpGetFigBaseObject(v148);
            uint64_t v151 = *(void *)(CMBaseObjectGetVTable() + 8);
            uint64_t v152 = v151 ? v151 : 0;
            CMTimeEpoch v153 = *(void (**)(uint64_t, uint64_t, CMTimeValue))(v152 + 56);
            if (v153) {
              v153(v150, 0x1EE53E498, v149);
            }
          }
        }
      }
    }
  }
  else
  {
    FigSignalErrorAt();
  }
LABEL_201:
  if (cf.value) {
    CFRelease((CFTypeRef)cf.value);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v246.value) {
    CFRelease((CFTypeRef)v246.value);
  }
  if (time.value) {
    CFRelease((CFTypeRef)time.value);
  }
  uint64_t v155 = fpfsi_CoordinateWithAssetDownloader();
  if (v155
    || (CMBaseObjectGetDerivedStorage(),
        CMNotificationCenterGetDefaultLocalCenter(),
        uint64_t v155 = FigNotificationCenterAddWeakListener(),
        v155))
  {
    uint64_t v31 = v155;
    goto LABEL_306;
  }
  fpfsi_ConfigurePumpForPlayerAndRelock();
  if (!FigRetainProxyIsInvalidated())
  {
    uint64_t v156 = CMBaseObjectGetDerivedStorage();
    uint64_t v157 = CMBaseObjectGetDerivedStorage();
    long long v158 = *MEMORY[0x1E4F1FA48];
    *(_OWORD *)&time.unsigned int value = *MEMORY[0x1E4F1FA48];
    CMTimeEpoch v159 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
    time.CMTimeEpoch epoch = v159;
    CFTypeRef v244 = 0;
    *(void *)CMTime type = 0;
    CFTypeRef v243 = 0;
    if (!*(void *)(v156 + 936))
    {
      uint64_t v31 = 0;
      goto LABEL_256;
    }
    uint64_t v160 = v157;
    long long v235 = v158;
    *(CFAbsoluteTime *)(v156 + 1984) = CFAbsoluteTimeGetCurrent();
    *(CFAbsoluteTime *)(v156 + 2984) = CFAbsoluteTimeGetCurrent();
    *(_WORD *)(v156 + 2081) = 0;
    if (*(unsigned char *)(v160 + 458))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
    }
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListener();
    uint64_t v161 = *(void *)(v156 + 936);
    uint64_t v162 = FigGetAllocatorForMedia();
    uint64_t v163 = FigBytePumpGetFigBaseObject(v161);
    uint64_t v164 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v164) {
      uint64_t v165 = v164;
    }
    else {
      uint64_t v165 = 0;
    }
    BOOL v166 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, os_log_type_t *))(v165 + 48);
    if (v166)
    {
      int v167 = v166(v163, 0x1EE53E198, v162, type);
      CFDictionaryRef v168 = *(CFDictionaryRef *)type;
      if (v167 || !*(void *)type)
      {
LABEL_225:
        if (v168) {
          CFRelease(v168);
        }
        v246.unsigned int value = 0;
        if (!*(void *)(v156 + 3072))
        {
          if (*(void *)(v156 + 936)
            && (CFAllocatorRef v176 = (const __CFAllocator *)FigGetAllocatorForMedia(),
                (CFMutableDictionaryRef v177 = CFDictionaryCreateMutable(v176, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540])) != 0))
          {
            v178 = v177;
            uint64_t v179 = *(void *)(v156 + 936);
            uint64_t v180 = FigGetAllocatorForMedia();
            uint64_t v181 = FigBytePumpGetFigBaseObject(v179);
            uint64_t v182 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v182) {
              uint64_t v183 = v182;
            }
            else {
              uint64_t v183 = 0;
            }
            Float64 v184 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, CMTime *))(v183 + 48);
            if (v184)
            {
              int v185 = v184(v181, 0x1EE53E6D8, v180, &v246);
              CFTypeRef v186 = (const void *)v246.value;
              if (!v185)
              {
                CFDictionarySetValue(v178, @"FBP_StoreBagConfiguration", (const void *)v246.value);
                uint64_t v187 = FigGetAllocatorForMedia();
                FigBandwidthPredictorCreate(v187, v178, (CFTypeRef *)(v156 + 3072));
                CFTypeRef v186 = (const void *)v246.value;
              }
              if (v186) {
                CFRelease(v186);
              }
            }
            CFRelease(v178);
          }
          else
          {
            FigSignalErrorAt();
          }
        }
        uint64_t v188 = *(void *)(v156 + 936);
        uint64_t v189 = *(void *)(v156 + 16);
        uint64_t v190 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v190) {
          uint64_t v191 = v190;
        }
        else {
          uint64_t v191 = 0;
        }
        v192 = *(uint64_t (**)(uint64_t, void (*)(uint64_t, uint64_t, OpaqueCMBlockBuffer *, unsigned int, int, int, uint64_t, CMTime *, const void *, int, uint64_t, CFErrorRef, CMTime *, int *), void (*)(uint64_t, uint64_t, int, uint64_t, uint64_t), uint64_t))(v191 + 88);
        if (v192)
        {
          uint64_t v193 = v192(v188, fpfs_BytePumpFn, fpfsi_DateMappingCallback, v189);
          if (v193) {
            goto LABEL_314;
          }
          uint64_t v194 = *(void *)(v156 + 936);
          uint64_t v195 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v195) {
            uint64_t v196 = v195;
          }
          else {
            uint64_t v196 = 0;
          }
          __int16 v197 = *(uint64_t (**)(uint64_t))(v196 + 64);
          if (v197)
          {
            uint64_t v193 = v197(v194);
            if (!v193)
            {
              uint64_t v198 = *(void *)(v156 + 40);
              uint64_t v199 = FigGetAllocatorForMedia();
              uint64_t v31 = FigAlternateSelectionBossCopyProperty(v198, @"MediaSelectionArray", v199, (const __CFArray **)&v243);
              Float64 v200 = *(const void **)(v156 + 120);
              if (v200)
              {
                CFRelease(v200);
                *(void *)(v156 + 120) = 0;
              }
              uint64_t v201 = *(void *)(v156 + 936);
              uint64_t v202 = FigGetAllocatorForMedia();
              uint64_t v203 = FigBytePumpGetFigBaseObject(v201);
              uint64_t v204 = *(void *)(CMBaseObjectGetVTable() + 8);
              if (v204) {
                uint64_t v205 = v204;
              }
              else {
                uint64_t v205 = 0;
              }
              CMTimeValue v230 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v205 + 48);
              if (v230) {
                v230(v203, 0x1EE53EBF8, v202, v156 + 120);
              }
              if (v31
                || (fpfsi_MediaSelectionArrayChangedCallback(*(void *)(v156 + 40), *(void *)(v156 + 16), v243),
                    uint64_t v231 = *(void *)(v156 + 40),
                    uint64_t v232 = FigGetAllocatorForMedia(),
                    uint64_t v31 = FigAlternateSelectionBossCopyProperty(v231, @"FilteredAlternateList", v232, (const __CFArray **)&v244), v31))
              {
                if (v31 != -15514) {
                  goto LABEL_254;
                }
              }
              else if (v244 && CFArrayGetCount((CFArrayRef)v244))
              {
                fpfsi_AlternateListChangedCallback(*(void *)(v156 + 40), *(void *)(v156 + 16), (const __CFArray *)v244, 0);
              }
              fpfsi_RTCReportingReportIRATEventIfNeeded(v156, 800);
              if (*(void *)(v156 + 936)) {
                uint64_t v31 = 0;
              }
              else {
                uint64_t v31 = 4294954371;
              }
LABEL_254:
              if (v243) {
                CFRelease(v243);
              }
LABEL_256:
              if (v244) {
                CFRelease(v244);
              }
              if (!v31)
              {
                CFAllocatorRef v206 = (const __CFAllocator *)FigGetAllocatorForMedia();
                v207 = CFArrayCreateMutable(v206, 0, MEMORY[0x1E4F1D510]);
                __int16 v154 = v207;
                if (v207)
                {
                  CFArrayAppendValue(v207, @"Duration");
                  CFArrayRef v208 = *(const __CFArray **)(DerivedStorage + 144);
                  if (v208)
                  {
                    v260.length = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 144));
                    v260.location = 0;
                    CFArrayAppendArray(v154, v208, v260);
                  }
                  uint64_t v209 = *(void *)(DerivedStorage + 32);
                  uint64_t v210 = *(void *)(CMBaseObjectGetVTable() + 16);
                  if (v210) {
                    uint64_t v211 = v210;
                  }
                  else {
                    uint64_t v211 = 0;
                  }
                  CMTimeValue v212 = *(uint64_t (**)(uint64_t, __CFArray *, void, void))(v211 + 16);
                  if (v212)
                  {
                    uint64_t v213 = v212(v209, v154, 0, 0);
                    if (!v213)
                    {
                      CFArrayRef v214 = (const __CFArray *)v240;
                      if (!fpfsi_GetDuration((uint64_t)v240, &v238)) {
                        fpfsi_NowReadyForInspection(v214);
                      }
                      if (*(void *)(DerivedStorage + 936))
                      {
                        fpfsi_UpdatePrefersConcurrentSwitching(v214);
                        uint64_t v215 = *(void *)(DerivedStorage + 936);
                        uint64_t v216 = FigGetAllocatorForMedia();
                        uint64_t v217 = FigBytePumpGetFigBaseObject(v215);
                        uint64_t v218 = *(void *)(CMBaseObjectGetVTable() + 8);
                        if (v218) {
                          uint64_t v219 = v218;
                        }
                        else {
                          uint64_t v219 = 0;
                        }
                        CMTimeValue v220 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v219 + 48);
                        if (v220)
                        {
                          if (!v220(v217, 0x1EE53E698, v216, &v237))
                          {
                            CFTypeRef v227 = v241;
                            NotificationPayloadForProperties = fpfs_CreateNotificationPayloadForProperties(v241, (uint64_t)v214, v221, v222, v223, v224, v225, v226, @"RecommendedTimeOffsetFromLive", @"TimeOffsetFromLive");
                            fpfs_EnqueueNotification(v227, @"NewRecommendedTimeOffsetFromLive", v214, NotificationPayloadForProperties);
                            if (NotificationPayloadForProperties) {
                              CFRelease(NotificationPayloadForProperties);
                            }
                          }
                        }
                        if (v237) {
                          CFRelease(v237);
                        }
                        goto LABEL_281;
                      }
LABEL_307:
                      uint64_t v31 = FigSignalErrorAt();
                      if (!v31) {
                        goto LABEL_281;
                      }
                      goto LABEL_273;
                    }
                    uint64_t v31 = v213;
                  }
                  else
                  {
                    uint64_t v31 = 4294954514;
                  }
                }
                else
                {
                  uint64_t v31 = 4294954510;
                }
LABEL_273:
                FigCreateErrorForOSStatus(v31, (CFErrorRef *)&v236);
                goto LABEL_281;
              }
LABEL_306:
              __int16 v154 = 0;
              goto LABEL_273;
            }
LABEL_314:
            uint64_t v31 = v193;
            goto LABEL_254;
          }
        }
        uint64_t v31 = 4294954514;
        goto LABEL_254;
      }
      CMTimeMakeFromDictionary(&time, *(CFDictionaryRef *)type);
      *(_OWORD *)&v246.unsigned int value = v235;
      v246.CMTimeEpoch epoch = v159;
      CMTime cf = time;
      if (CMTimeCompare(&v246, &cf))
      {
        CMTime v175 = fpfs_CreateNotificationPayloadForProperties(*(const void **)v156, (uint64_t)v3, v169, v170, v171, v172, v173, v174, @"SeekableTimeIntervals", 0);
        fpfs_PostNotificationWhenUnlocked(*(const void **)v156, @"SeekableRangeChanged", v3, v175);
        if (v175) {
          CFRelease(v175);
        }
      }
    }
    CFDictionaryRef v168 = *(CFDictionaryRef *)type;
    goto LABEL_225;
  }
  fpfs_UnlockAndPostNotificationsWithCaller(v5);
LABEL_285:
  if (v236) {
    CFRelease(v236);
  }
  CFTypeRef v3 = v240;
LABEL_288:
  if (v3) {
    CFRelease(v3);
  }
  if (v241) {
    CFRelease(v241);
  }
  FigRetainProxyReleaseOwner();
  return FigRetainProxyRelease();
}

uint64_t fpfsi_CoordinateWithAssetDownloader()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = DerivedStorage;
  CFTypeRef cf = 0;
  CFTypeRef v13 = 0;
  if (!*(void *)(DerivedStorage + 936))
  {
    uint64_t v2 = FigSignalErrorAt();
LABEL_27:
    uint64_t v4 = v2;
    goto LABEL_17;
  }
  if (!*(unsigned char *)(DerivedStorage + 2873))
  {
    uint64_t v2 = FigAssetDownloadCoordinatorMarkAssetForInteractivity(*(void *)(DerivedStorage + 32));
    if (!v2)
    {
      uint64_t v2 = FigAssetDownloadCoordinatorCopyDestinationURLForAsset(*(void *)(v1 + 32), &v13);
      if (!v2)
      {
        CFTypeRef v3 = v13;
        if (v13) {
          goto LABEL_6;
        }
        uint64_t v5 = *(void *)(v1 + 32);
        uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
        uint64_t CMBaseObject = FigAssetGetCMBaseObject(v5);
        uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v8) {
          uint64_t v9 = v8;
        }
        else {
          uint64_t v9 = 0;
        }
        unsigned int v10 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v9 + 48);
        if (!v10)
        {
          uint64_t v4 = 4294954514;
          goto LABEL_17;
        }
        uint64_t v2 = v10(CMBaseObject, @"assetProperty_CreationURL", AllocatorForMedia, &cf);
        if (!v2)
        {
          if (FigCFURLIsLocalResource())
          {
            CFTypeRef v3 = cf;
            CFTypeRef cf = 0;
            CFTypeRef v13 = v3;
            if (!v3) {
              goto LABEL_7;
            }
          }
          else
          {
            CFTypeRef v3 = v13;
            if (!v13) {
              goto LABEL_7;
            }
          }
LABEL_6:
          fpfsi_StartDownloadingToURL(v1, v3);
LABEL_7:
          uint64_t v4 = 0;
          *(unsigned char *)(v1 + 2873) = 1;
          goto LABEL_17;
        }
      }
    }
    goto LABEL_27;
  }
  uint64_t v4 = 0;
LABEL_17:
  if (!*(unsigned char *)(v1 + 2873)) {
    FigAssetDownloadCoordinatorUnmarkAssetForInteractivity(*(const void **)(v1 + 32));
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v13) {
    CFRelease(v13);
  }
  return v4;
}

void fpfsi_ConfigurePumpForPlayerAndRelock()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = *(const void **)(DerivedStorage + 1840);
  if (v1) {
    CFTypeRef v2 = CFRetain(v1);
  }
  else {
    CFTypeRef v2 = 0;
  }
  uint64_t v3 = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = (const void **)MEMORY[0x1E4F1CFD0];
  if (!*(unsigned char *)(v3 + 462)) {
    uint64_t v4 = (const void **)MEMORY[0x1E4F1CFC8];
  }
  uint64_t v5 = *v4;
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionarySetValue(Mutable, @"FBPSTN_Video", v5);
  if (*(unsigned char *)(v3 + 462)) {
    CFDictionarySetValue(Mutable, @"FBPSTN_NeroTransport", *(const void **)(v3 + 488));
  }
  if (v2)
  {
    uint64_t FigBaseObject = FigBytePumpGetFigBaseObject(*(void *)(DerivedStorage + 936));
    uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v10 = v9 ? v9 : 0;
    CFTypeRef v11 = *(void (**)(uint64_t, uint64_t, CFTypeRef))(v10 + 56);
    if (v11) {
      v11(FigBaseObject, 0x1EE53E5B8, v2);
    }
  }
  uint64_t v12 = FigBytePumpGetFigBaseObject(*(void *)(DerivedStorage + 936));
  uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v13) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, __CFDictionary *))(v14 + 56);
  if (v15) {
    v15(v12, 0x1EE53E438, Mutable);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v2)
  {
    CFRelease(v2);
  }
}

void fpfsi_AlternateListChangedCallback(uint64_t a1, uint64_t a2, const __CFArray *a3, const __CFDictionary *a4)
{
  CFTypeRef v57 = 0;
  CFTypeRef v58 = 0;
  if (!fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer(a2, &v58, &v57))
  {
    CFTypeRef v6 = v57;
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    CFTypeRef v8 = v58;
    uint64_t v9 = CMBaseObjectGetDerivedStorage();
    if (!FigCFEqual()) {
      goto LABEL_76;
    }
    if (!*(unsigned char *)(DerivedStorage + 49))
    {
      uint64_t v11 = CMBaseObjectGetDerivedStorage();
      __int16 v61 = 0;
      int v59 = -2;
      int v60 = -2;
      BOOL HasOnlyAudioOnly = FigAlternateSelectionUtility_AlternateListHasOnlyAudioOnly(a3);
      FigAlternateSelectionUtility_GetLowestRequiredHDCPLevel(a3, (char *)&v61 + 1, &v60, (char *)&v61, &v59);
      *(unsigned char *)(v11 + 1737) = v61;
      if (!HasOnlyAudioOnly)
      {
        fpfsi_setHasDiscoveredVideoAndNotify(*(const void **)v11, v6);
        fpfsi_setStereoAudioSpatializationByDefaultForVideoItem(v6);
      }
      CFTypeRef cf = 0;
      CFTypeRef v66 = 0;
      CFTypeRef v63 = 0;
      CFTypeRef v64 = 0;
      CFTypeRef v62 = 0;
      uint64_t v13 = *(void *)(v11 + 40);
      if (v13)
      {
        uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
        FigAlternateSelectionBossCopyProperty(v13, @"HasHDRAlternates", AllocatorForMedia, (const __CFArray **)&cf);
        uint64_t v15 = *(void *)(v11 + 40);
        uint64_t v16 = FigGetAllocatorForMedia();
        FigAlternateSelectionBossCopyProperty(v15, @"HasAtmosAlternates", v16, (const __CFArray **)&v66);
        uint64_t v17 = *(void *)(v11 + 40);
        uint64_t v18 = FigGetAllocatorForMedia();
        FigAlternateSelectionBossCopyProperty(v17, @"HasMultiChannelAudio", v18, (const __CFArray **)&v64);
        uint64_t v19 = *(void *)(v11 + 40);
        uint64_t v20 = FigGetAllocatorForMedia();
        FigAlternateSelectionBossCopyProperty(v19, @"HasLosslessAudio", v20, (const __CFArray **)&v63);
        uint64_t v21 = *(void *)(v11 + 40);
        uint64_t v22 = FigGetAllocatorForMedia();
        FigAlternateSelectionBossCopyProperty(v21, @"HasBinauralAudio", v22, (const __CFArray **)&v62);
        CFTypeRef v23 = (CFTypeRef)*MEMORY[0x1E4F1CFD0];
        if (v66 == (CFTypeRef)*MEMORY[0x1E4F1CFD0]) {
          fpfsi_RTCReportingUpdateATMOSMetricVar(v11, (unsigned char *)(v11 + 2576), (unsigned char *)(v11 + 2572), 1, 1, 1);
        }
        if (cf == v23)
        {
          uint64_t v39 = *(void *)(v11 + 2544);
          if (v39)
          {
            uint64_t v40 = *(void *)(CMBaseObjectGetVTable() + 16);
            uint64_t v41 = v40 ? v40 : 0;
            CMTimeEpoch v53 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v41 + 56);
            if (v53) {
              v53(v39, 0x1EE582B78, 0x1EE584ED8, 1, 0);
            }
          }
        }
        if (v64 == v23)
        {
          uint64_t v42 = *(void *)(v11 + 2544);
          if (v42)
          {
            uint64_t v43 = *(void *)(CMBaseObjectGetVTable() + 16);
            uint64_t v44 = v43 ? v43 : 0;
            CFAllocatorRef v54 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v44 + 56);
            if (v54) {
              v54(v42, 0x1EE582B78, 0x1EE584E78, 1, 0);
            }
          }
        }
        if (v63 == v23)
        {
          uint64_t v45 = *(void *)(v11 + 2544);
          if (v45)
          {
            uint64_t v46 = *(void *)(CMBaseObjectGetVTable() + 16);
            uint64_t v47 = v46 ? v46 : 0;
            CFDictionaryRef v55 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v47 + 56);
            if (v55) {
              v55(v45, 0x1EE582B78, 0x1EE584E98, 1, 0);
            }
          }
        }
        if (v62 == v23)
        {
          uint64_t v48 = *(void *)(v11 + 2544);
          if (v48)
          {
            uint64_t v49 = *(void *)(CMBaseObjectGetVTable() + 16);
            uint64_t v50 = v49 ? v49 : 0;
            uint64_t v56 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v50 + 56);
            if (v56) {
              v56(v48, 0x1EE582B78, 0x1EE584EB8, 1, 0);
            }
          }
        }
      }
      if (cf) {
        CFRelease(cf);
      }
      if (v66) {
        CFRelease(v66);
      }
      if (v64) {
        CFRelease(v64);
      }
      if (v63) {
        CFRelease(v63);
      }
      if (v62) {
        CFRelease(v62);
      }
      fpfsi_RTCReportingUpdateAvailableAlternateHDCPLevels(v11, HIBYTE(v61), v60, v61, v59, 0);
      CFIndex v24 = 0;
      while (1)
      {
        CFIndex v25 = a3 ? CFArrayGetCount(a3) : 0;
        if (v24 >= v25) {
          break;
        }
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(a3, v24);
        double Resolution = FigAlternateGetResolution((uint64_t)ValueAtIndex);
        ++v24;
        if (Resolution != 0.0 && v28 != 0.0)
        {
          float v29 = Resolution / v28;
          goto LABEL_37;
        }
      }
      float v29 = 0.0;
LABEL_37:
      *(float *)(v11 + 3180) = v29;
      uint64_t v30 = *(void *)(v11 + 2544);
      BOOL v31 = *(unsigned char *)(v11 + 779) == 0;
      if (v30)
      {
        uint64_t v32 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v33 = v32 ? v32 : 0;
        uint64_t v51 = *(void (**)(uint64_t, uint64_t, uint64_t, BOOL, void))(v33 + 56);
        if (v51) {
          v51(v30, 0x1EE582B78, 0x1EE584C38, v31, 0);
        }
      }
      *(unsigned char *)(DerivedStorage + 49) = 1;
      uint64_t v52 = CMBaseObjectGetDerivedStorage();
      if (!*(void *)(v52 + 40)
        || !*(unsigned char *)(v52 + 48)
        || !*(unsigned char *)(v52 + 49)
        || (uint64_t updated = fpfsi_InitialConfigureAlernateSelectionBoss((const __CFArray *)v6), !updated))
      {
        fpfsi_UpdateSourceFormatInfoIfNecessary((uint64_t)v6);
        goto LABEL_76;
      }
      goto LABEL_95;
    }
    if (!a3) {
      goto LABEL_50;
    }
    if (CFArrayGetCount(a3) > 1) {
      goto LABEL_76;
    }
    if (!CFArrayGetCount(a3))
    {
LABEL_50:
      if (a4)
      {
        CFStringRef Value = CFDictionaryGetValue(a4, @"FASBFIK_StoppedAtFilterName");
        a4 = (const __CFDictionary *)CFDictionaryGetValue(a4, @"FASBFIK_StoppedFilterError");
      }
      else
      {
        CFStringRef Value = 0;
      }
      if (FigCFEqual() || FigCFEqual()) {
        fpfsi_RTCReportingUpdateAvailableAlternateHDCPLevels(DerivedStorage, 0, -2, 0, -2, 1u);
      }
      uint64_t v34 = *(void *)(CMBaseObjectGetDerivedStorage() + 2544);
      if (v34)
      {
        uint64_t v35 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v36 = v35 ? v35 : 0;
        uint64_t v37 = *(void (**)(uint64_t, uint64_t, uint64_t, const void *, void))(v36 + 48);
        if (v37) {
          v37(v34, 0x1EE582B78, 0x1EE562358, Value, 0);
        }
      }
      if (a4)
      {
        fpfs_StopPlayingItem(v9, v6, a4);
LABEL_76:
        fpfs_UnlockAndPostNotificationsWithCaller(v8);
        if (!v8) {
          goto LABEL_78;
        }
        goto LABEL_77;
      }
    }
    if (*(_DWORD *)(v9 + 32))
    {
      uint64_t updated = fpfsi_UpdateValidAlternateListAndEvaluateCurrentAlternateAgaintValidAlternateList((const __CFArray *)v6, a3);
      if (updated) {
        goto LABEL_95;
      }
    }
    else
    {
      uint64_t updated = fpfsi_UpdateValidAlternateListAndSuggestAnAlternate((uint64_t)v6, a3, 0);
      if (updated)
      {
LABEL_95:
        fpfs_StopPlayingItemWithOSStatus(v9, (uint64_t)v6, updated);
        goto LABEL_76;
      }
    }
    fpfsi_updateNetworkCostMonitorMaximumMediaBitrate();
    goto LABEL_76;
  }
  CFTypeRef v8 = v58;
  if (v58) {
LABEL_77:
  }
    CFRelease(v8);
LABEL_78:
  if (v57) {
    CFRelease(v57);
  }
}

void fpfsi_MediaSelectionArrayChangedCallback(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  CFTypeRef v39 = 0;
  if (fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer(a2, &v39, &cf))
  {
    CFTypeRef v6 = v39;
    if (v39) {
      goto LABEL_46;
    }
    goto LABEL_47;
  }
  CFArrayRef v4 = (const __CFArray *)cf;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v6 = v39;
  uint64_t v34 = CMBaseObjectGetDerivedStorage();
  if (!FigCFEqual()) {
    goto LABEL_45;
  }
  if (!a3) {
    goto LABEL_44;
  }
  CFTypeRef v7 = *(const void **)(DerivedStorage + 1696);
  *(void *)(DerivedStorage + 1696) = a3;
  CFRetain(a3);
  if (v7) {
    CFRelease(v7);
  }
  CFArrayRef theArray = 0;
  if (!*(void *)(DerivedStorage + 1696)) {
    goto LABEL_44;
  }
  CFTypeRef v8 = *(const void **)(DerivedStorage + 1792);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(DerivedStorage + 1792) = 0;
  }
  uint64_t AppliedMediaArray = fpfs_CreateAppliedMediaArray(DerivedStorage, (CFTypeRef *)&theArray);
  if (AppliedMediaArray)
  {
LABEL_56:
    uint64_t v33 = AppliedMediaArray;
LABEL_60:
    FigSignalErrorAt();
    goto LABEL_54;
  }
  CFArrayRef v10 = theArray;
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  if (v10)
  {
    CFMutableArrayRef MutableCopy = CFArrayCreateMutableCopy(AllocatorForMedia, 0, theArray);
    *(void *)(DerivedStorage + 1792) = MutableCopy;
    if (theArray)
    {
      CFRelease(theArray);
      CFArrayRef theArray = 0;
      CFMutableArrayRef MutableCopy = *(CFMutableArrayRef *)(DerivedStorage + 1792);
    }
  }
  else
  {
    CFMutableArrayRef MutableCopy = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D510]);
    *(void *)(DerivedStorage + 1792) = MutableCopy;
  }
  if (!MutableCopy)
  {
    uint64_t v33 = 4294954510;
    goto LABEL_60;
  }
  CFArrayRef v35 = v4;
  CFTypeRef v36 = v6;
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 1696));
  if (Count < 1)
  {
LABEL_43:
    fpfs_FindAndSetForcedSubtitle(DerivedStorage);
    CFArrayRef v4 = v35;
    CFTypeRef v6 = v36;
    goto LABEL_44;
  }
  CFIndex v14 = Count;
  CFIndex v15 = 0;
  CFIndex v37 = Count;
  while (1)
  {
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 1696), v15);
    CFStringRef Value = CFDictionaryGetValue(ValueAtIndex, @"MediaSelectionGroupMediaType");
    if (!fpfs_FindMediaTypeInMediaArray(*(const __CFArray **)(DerivedStorage + 1792), (uint64_t)Value, 0)) {
      break;
    }
LABEL_42:
    if (++v15 == v14) {
      goto LABEL_43;
    }
  }
  FigGetCFStringForOSTypeValue();
  int v18 = FigCFEqual();
  CFArrayRef v19 = (const __CFArray *)CFDictionaryGetValue(ValueAtIndex, @"MediaSelectionGroupOptions");
  keys = 0;
  uint64_t v44 = 0;
  values = 0;
  uint64_t v42 = 0;
  CFIndex v20 = CFArrayGetCount(v19);
  if (v20 < 1)
  {
    if (v18) {
      goto LABEL_42;
    }
    CFIndex i = 0;
  }
  else
  {
    CFIndex v21 = v20;
    for (CFIndex i = 0; i != v21; ++i)
    {
      CFDictionaryRef v23 = (const __CFDictionary *)CFArrayGetValueAtIndex(v19, i);
      CFBooleanRef v24 = (const __CFBoolean *)CFDictionaryGetValue(v23, @"MediaSelectionOptionsIsDefault");
      if (v24)
      {
        if (CFBooleanGetValue(v24))
        {
          if (!v18) {
            goto LABEL_35;
          }
          CFBooleanRef v25 = (const __CFBoolean *)CFDictionaryGetValue(v23, @"MediaSelectionOptionsDisplaysNonForcedSubtitles");
          if (v25)
          {
            if (!CFBooleanGetValue(v25))
            {
              CFDictionaryGetValue(v23, @"MediaSelectionOptionsMediaType");
              if (FigCFEqual()) {
                goto LABEL_35;
              }
            }
          }
        }
      }
    }
    CFIndex i = 0;
    if (!v18)
    {
LABEL_35:
      CFIndex v14 = v37;
      goto LABEL_37;
    }
    CFIndex v14 = v37;
    while (1)
    {
      CFDictionaryRef v26 = (const __CFDictionary *)CFArrayGetValueAtIndex(v19, i);
      CFBooleanRef v27 = (const __CFBoolean *)CFDictionaryGetValue(v26, @"MediaSelectionOptionsDisplaysNonForcedSubtitles");
      if (v27)
      {
        if (!CFBooleanGetValue(v27)) {
          break;
        }
      }
      if (v21 == ++i) {
        goto LABEL_42;
      }
    }
  }
LABEL_37:
  CFDictionaryRef v28 = (const __CFDictionary *)CFArrayGetValueAtIndex(v19, i);
  values = (void *)CFDictionaryGetValue(v28, @"MediaSelectionOptionsPersistentID");
  if (values)
  {
    keys = @"MediaSelectionOptionsPersistentID";
  }
  else
  {
    keys = @"MediaSelectionOptionsUniqueOutOfBandID";
    values = (void *)CFDictionaryGetValue(v28, @"MediaSelectionOptionsUniqueOutOfBandID");
    if (!values) {
      goto LABEL_55;
    }
  }
  uint64_t v44 = @"MediaSelectionGroupMediaType";
  uint64_t v42 = Value;
  CFAllocatorRef v29 = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFDictionaryRef v30 = CFDictionaryCreate(v29, (const void **)&keys, (const void **)&values, 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (v30)
  {
    CFDictionaryRef v31 = v30;
    CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 1792), v30);
    CFRelease(v31);
    goto LABEL_42;
  }
LABEL_55:
  uint64_t AppliedMediaArray = FigSignalErrorAt();
  CFArrayRef v4 = v35;
  CFTypeRef v6 = v36;
  if (AppliedMediaArray) {
    goto LABEL_56;
  }
LABEL_44:
  if (!*(unsigned char *)(DerivedStorage + 48))
  {
    *(unsigned char *)(DerivedStorage + 48) = 1;
    uint64_t v32 = CMBaseObjectGetDerivedStorage();
    if (*(void *)(v32 + 40))
    {
      if (*(unsigned char *)(v32 + 48))
      {
        if (*(unsigned char *)(v32 + 49))
        {
          uint64_t v33 = fpfsi_InitialConfigureAlernateSelectionBoss(v4);
          if (v33) {
LABEL_54:
          }
            fpfs_StopPlayingItemWithOSStatus(v34, (uint64_t)v4, v33);
        }
      }
    }
  }
LABEL_45:
  fpfs_UnlockAndPostNotificationsWithCaller(v6);
  if (v6) {
LABEL_46:
  }
    CFRelease(v6);
LABEL_47:
  if (cf) {
    CFRelease(cf);
  }
}

void *__copy_constructor_8_8_pa0_38126_0_pa0_35993_8_pa0_4849_16(void *result, void *a2)
{
  *uint64_t result = *a2;
  result[1] = a2[1];
  result[2] = a2[2];
  return result;
}

uint64_t fpfsi_setPreferredBitrateForExpensiveNetworks(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(void *)(DerivedStorage + 40)) {
    return 0;
  }
  uint64_t v5 = DerivedStorage;
  CFTypeRef v6 = (CFTypeRef *)(DerivedStorage + 104);
  CFTypeRef v7 = *(const void **)(DerivedStorage + 104);
  CFTypeRef v8 = v7;
  if (!v7)
  {
    CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    uint64_t v10 = FigAlternateFilterMonitorCreateForExpensiveNetwork(AllocatorForMedia, a1, v6);
    if (v10) {
      return v10;
    }
    CFTypeRef v8 = *v6;
    if (!*v6) {
      return 4294954434;
    }
  }
  uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v13 = *(uint64_t (**)(CFTypeRef, __CFString *, uint64_t))(v12 + 56);
  if (v13) {
    uint64_t v14 = v13(v8, @"AlternateFilterMonitorProperty_PreferredPeakBitrateForExpensiveNetwork", a2);
  }
  else {
    uint64_t v14 = 4294954514;
  }
  uint64_t v15 = *(void *)(v5 + 2544);
  int SInt32 = FigCFNumberGetSInt32();
  if (v15)
  {
    int v17 = SInt32;
    uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v19 = v18 ? v18 : 0;
    CFIndex v20 = *(void (**)(uint64_t, uint64_t, uint64_t, void, void))(v19 + 56);
    if (v20) {
      v20(v15, 0x1EE582B78, 0x1EE562218, v17, 0);
    }
  }
  if (!v7)
  {
    unsigned int v21 = FigAlternateSelectionBossAddMonitor(*(const void **)(v5 + 40), *(const void **)(v5 + 104));
    if (v21) {
      return v21;
    }
    else {
      return v14;
    }
  }
  return v14;
}

uint64_t fpfsi_setResolutionCapForExpensiveNetworks(const void *a1, const __CFDictionary *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(void *)(DerivedStorage + 40)) {
    return 0;
  }
  uint64_t v5 = DerivedStorage;
  CFTypeRef v6 = (CFTypeRef *)(DerivedStorage + 112);
  CFTypeRef v7 = *(const void **)(DerivedStorage + 112);
  CFTypeRef v8 = v7;
  if (!v7)
  {
    CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    uint64_t v10 = FigAlternateFilterMonitorCreateForExpensiveNetwork(AllocatorForMedia, a1, v6);
    if (v10) {
      return v10;
    }
    CFTypeRef v8 = *v6;
    if (!*v6) {
      return 4294954434;
    }
  }
  uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v13 = *(uint64_t (**)(CFTypeRef, __CFString *, const __CFDictionary *))(v12 + 56);
  if (v13) {
    uint64_t v14 = v13(v8, @"AlternateFilterMonitorProperty_PreferredMaximumResolutionForExpensiveNetwork", a2);
  }
  else {
    uint64_t v14 = 4294954514;
  }
  CGSize v27 = (CGSize)*MEMORY[0x1E4F1DB30];
  CGSizeMakeWithDictionaryRepresentation(a2, &v27);
  uint64_t v15 = *(void *)(v5 + 2544);
  if (v15)
  {
    double width = v27.width;
    uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v18 = v17 ? v17 : 0;
    uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v18 + 56);
    if (v19) {
      v19(v15, 0x1EE582B78, 0x1EE562178, (uint64_t)width, 0);
    }
  }
  uint64_t v20 = *(void *)(v5 + 2544);
  if (v20)
  {
    double height = v27.height;
    uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v23 = v22 ? v22 : 0;
    CFBooleanRef v24 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v23 + 56);
    if (v24) {
      v24(v20, 0x1EE582B78, 0x1EE562158, (uint64_t)height, 0);
    }
  }
  if (!v7)
  {
    unsigned int v25 = FigAlternateSelectionBossAddMonitor(*(const void **)(v5 + 40), *(const void **)(v5 + 112));
    if (v25) {
      return v25;
    }
    else {
      return v14;
    }
  }
  return v14;
}

uint64_t fpfsi_InitialConfigureAlernateSelectionBoss(const __CFArray *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = CMBaseObjectGetDerivedStorage();
  CFTypeRef v134 = 0;
  CFArrayRef theArray = 0;
  CFTypeRef v133 = 0;
  if (!*(void *)(DerivedStorage + 40)) {
    goto LABEL_218;
  }
  uint64_t v4 = v3;
  uint64_t v5 = fpfsi_SetupAlternateSelectionBossWithPreferPlaybackFromCache((uint64_t)a1);
  if (v5)
  {
LABEL_219:
    uint64_t v10 = v5;
    goto LABEL_213;
  }
  CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 872))
  {
    uint64_t v6 = CMBaseObjectGetDerivedStorage();
    cf[0] = 0;
    if (*(void *)(v6 + 40))
    {
      uint64_t v7 = v6;
      uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
      uint64_t v9 = FigAlternateSuppressVP9FilterCreate(AllocatorForMedia, cf);
      if (!v9) {
        uint64_t v9 = FigAlternateSelectionBossAddFilter(*(void *)(v7 + 40), cf[0]);
      }
      uint64_t v10 = v9;
      if (cf[0]) {
        CFRelease(cf[0]);
      }
      if (v10) {
        goto LABEL_213;
      }
    }
  }
  CFTypeRef v140 = (CFTypeRef)-1;
  uint64_t v11 = CMBaseObjectGetDerivedStorage();
  uint64_t v12 = CMBaseObjectGetDerivedStorage();
  CFTypeRef v139 = 0;
  CFTypeRef v136 = 0;
  if (!*(void *)(v11 + 40)) {
    goto LABEL_221;
  }
  uint64_t v13 = v12;
  if (!PKDGetSystemCPC(&v140))
  {
    CFAllocatorRef v14 = (const __CFAllocator *)FigGetAllocatorForMedia();
    uint64_t v15 = FigAlternateAllowedCPCFilterCreate(v14, (uint64_t)v140, &v139);
    if (v15) {
      goto LABEL_220;
    }
    uint64_t v15 = FigAlternateSelectionBossAddFilter(*(void *)(v11 + 40), v139);
    if (v15) {
      goto LABEL_220;
    }
  }
  uint64_t v16 = FigGetAllocatorForMedia();
  uint64_t v15 = FigAlternateMediaValidationFilterCreate(v16, *(unsigned char *)(v11 + 557) == 0, &v136);
  if (v15
    || (uint64_t v15 = FigAlternateSelectionBossAddFilter(*(void *)(v11 + 40), v136), v15)
    || (uint64_t v15 = fpfsi_SetupSupportedAudioFormatFilter((uint64_t)a1), v15)
    || (uint64_t v15 = fpfsi_ConfigureAlternateSelectionBossForHighestAtmosFiltering(), v15)
    || (uint64_t v15 = fpfsi_ConfigureAlternateSelectionBossPreferExclusiveAudioPassthroughFiltering(), v15)
    || (uint64_t v15 = fpfsi_ConfigureAlternateSelectionBossForNeroSupportedVideoFormat(v11, *(unsigned __int8 *)(v13 + 462)),
        v15)
    || (uint64_t v15 = fpfsi_setUpVideoLayoutFilters((uint64_t)a1), v15))
  {
LABEL_220:
    uint64_t v10 = v15;
    goto LABEL_42;
  }
  uint64_t v17 = CMBaseObjectGetDerivedStorage();
  uint64_t v18 = CMBaseObjectGetDerivedStorage();
  cf[0] = 0;
  uint64_t v142 = 0;
  CFTypeRef v141 = 0;
  if (*(void *)(v17 + 40))
  {
    uint64_t v19 = v18;
    uint64_t v20 = FigGetAllocatorForMedia();
    uint64_t v21 = FigAlternateSuppressDoVi5StereoFilterCreate(v20, cf);
    if (!v21)
    {
      uint64_t v21 = FigAlternateSelectionBossAddFilter(*(void *)(v17 + 40), cf[0]);
      if (!v21)
      {
        if (!*(unsigned char *)(v19 + 873)
          || (uint64_t v22 = FigGetAllocatorForMedia(),
              uint64_t v21 = FigAlternateMediaValidationForStereoVideoFilterCreate(v22, &v141),
              !v21)
          && (uint64_t v21 = FigAlternateSelectionBossAddFilter(*(void *)(v17 + 40), v141), !v21))
        {
          uint64_t v23 = FigGetAllocatorForMedia();
          uint64_t v21 = FigAlternateSuppressDoVi20MonoFilterCreate(v23, &v142);
          if (!v21) {
            uint64_t v21 = FigAlternateSelectionBossAddFilter(*(void *)(v17 + 40), v142);
          }
        }
      }
    }
    uint64_t v10 = v21;
  }
  else
  {
    uint64_t v10 = 0;
  }
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  if (v142) {
    CFRelease(v142);
  }
  if (v141) {
    CFRelease(v141);
  }
  if (!v10)
  {
    uint64_t v24 = CMBaseObjectGetDerivedStorage();
    cf[0] = 0;
    if (*(void *)(v24 + 40))
    {
      uint64_t v25 = v24;
      CFAllocatorRef v26 = (const __CFAllocator *)FigGetAllocatorForMedia();
      uint64_t v27 = FigAlternatePreferVideoCodecsWithHardwareDecodeFilterCreate(v26, cf);
      if (!v27) {
        uint64_t v27 = FigAlternateSelectionBossAddFilter(*(void *)(v25 + 40), cf[0]);
      }
      uint64_t v10 = v27;
      if (cf[0]) {
        CFRelease(cf[0]);
      }
      goto LABEL_42;
    }
LABEL_221:
    uint64_t v10 = 0;
  }
LABEL_42:
  if (v139) {
    CFRelease(v139);
  }
  if (v136) {
    CFRelease(v136);
  }
  if (v10) {
    goto LABEL_213;
  }
  cf[0] = 0;
  uint64_t v28 = CMBaseObjectGetDerivedStorage();
  if (*(void *)(v28 + 40))
  {
    uint64_t v29 = v28;
    if (*(void *)(v28 + 400))
    {
      ArrayCFStringRef Value = FigCFDictionaryGetArrayValue();
      uint64_t v31 = FigCFDictionaryGetArrayValue();
      if (ArrayValue | v31)
      {
        CFArrayRef v32 = (const __CFArray *)v31;
        CFAllocatorRef v33 = (const __CFAllocator *)FigGetAllocatorForMedia();
        uint64_t v34 = FigAlternateAllowableMediaSubtypeFilterCreate(v33, (const __CFArray *)ArrayValue, v32, cf);
        CFTypeRef v35 = cf[0];
        if (v34)
        {
          uint64_t v10 = v34;
          if (!cf[0])
          {
LABEL_53:
            if (v10) {
              goto LABEL_213;
            }
            goto LABEL_54;
          }
        }
        else
        {
          uint64_t v10 = FigAlternateSelectionBossAddFilter(*(void *)(v29 + 40), cf[0]);
          CFTypeRef v35 = cf[0];
          if (!cf[0]) {
            goto LABEL_53;
          }
        }
        CFRelease(v35);
        goto LABEL_53;
      }
    }
  }
LABEL_54:
  uint64_t v5 = fpfsi_ConfigureAlternateSelectionBossForScanningRole();
  if (v5) {
    goto LABEL_219;
  }
  uint64_t v5 = fpfsi_ConfigureAlternateSelectionBossForSuppressAudioOnly();
  if (v5) {
    goto LABEL_219;
  }
  uint64_t v5 = fpfsi_ConfigureAlternateSelectionBossForPlayRate((uint64_t)a1, *(float *)(v4 + 108));
  if (v5) {
    goto LABEL_219;
  }
  uint64_t v5 = fpfsi_CreateAndAddCombinedAudioPreferenceFilter((uint64_t)a1);
  if (v5) {
    goto LABEL_219;
  }
  uint64_t v5 = fpfsi_ConfigurePlaybackMonitorForBandwidthCap((uint64_t)a1, *(_DWORD *)(DerivedStorage + 2384));
  if (v5) {
    goto LABEL_219;
  }
  uint64_t v36 = CMBaseObjectGetDerivedStorage();
  if (*(void *)(v36 + 96))
  {
    uint64_t v37 = v36;
    uint64_t v38 = *(void *)(v36 + 40);
    if (v38)
    {
      CFTypeRef v39 = *(const void **)(v37 + 128);
      if (!v39)
      {
        uint64_t v40 = FigGetAllocatorForMedia();
        uint64_t v5 = FigAlternatePassthroughFilterCreate(v40, @"PlayerPassThroughFilter", 625, (void *)(v37 + 128));
        if (v5) {
          goto LABEL_219;
        }
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterAddWeakListener();
        *(unsigned char *)(v37 + 136) = 1;
        uint64_t v38 = *(void *)(v37 + 40);
        CFTypeRef v39 = *(const void **)(v37 + 128);
      }
      uint64_t v5 = FigAlternateSelectionBossAddFilter(v38, v39);
      if (v5) {
        goto LABEL_219;
      }
    }
  }
  uint64_t v41 = FigGetAllocatorForMedia();
  uint64_t v5 = FigAlternateMediaSelectionAudibleFilterCreate(v41, *(const void **)(DerivedStorage + 1792), &v133);
  if (v5) {
    goto LABEL_219;
  }
  uint64_t v5 = FigAlternateSelectionBossAddFilter(*(void *)(DerivedStorage + 40), v133);
  if (v5) {
    goto LABEL_219;
  }
  uint64_t v142 = 0;
  uint64_t v42 = CMBaseObjectGetDerivedStorage();
  uint64_t v43 = CMBaseObjectGetDerivedStorage();
  CFTypeRef v140 = 0;
  CFTypeRef v141 = 0;
  CFTypeRef v139 = 0;
  if (!*(void *)(v42 + 56))
  {
    CFAllocatorRef v44 = (const __CFAllocator *)FigGetAllocatorForMedia();
    uint64_t updated = FigAlternateFilterMonitorCreateForHDCP(v44, 0, 0, (CFTypeRef *)(v42 + 56));
    if (updated) {
      goto LABEL_146;
    }
    uint64_t updated = fpfsi_updateDisplayListForHDCPMonitor();
    if (updated) {
      goto LABEL_146;
    }
    FigAlternateFilterMonitorForHDCPNeedsNewExternalProtectionMonitorIfNecessary(*(void **)(v42 + 56), *(unsigned __int8 *)(v43 + 462), *(const void **)(v43 + 488));
    uint64_t updated = FigAlternateSelectionBossAddMonitor(*(const void **)(v42 + 40), *(const void **)(v42 + 56));
    if (updated) {
      goto LABEL_146;
    }
  }
  uint64_t v46 = (uint64_t *)(v42 + 64);
  if (*(void *)(v42 + 64))
  {
LABEL_72:
    if (!*(void *)(v42 + 72))
    {
      CFAllocatorRef v58 = (const __CFAllocator *)FigGetAllocatorForMedia();
      uint64_t updated = FigAlternateFilterMonitorCreateForSupportedFramerateBucketCap(v58, (CFTypeRef *)(v42 + 72));
      if (updated) {
        goto LABEL_146;
      }
      uint64_t v59 = *(void *)(v42 + 72);
      uint64_t v60 = *(void *)(v43 + 672);
      uint64_t v61 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v61) {
        uint64_t v62 = v61;
      }
      else {
        uint64_t v62 = 0;
      }
      uint64_t v75 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v62 + 56);
      if (!v75) {
        goto LABEL_147;
      }
      uint64_t updated = v75(v59, @"AlternateFilterMonitorProperty_DisplayList", v60);
      if (updated) {
        goto LABEL_146;
      }
      uint64_t updated = fpfsi_updateSupportedFramerateBucketCapMonitorFromFVT();
      if (updated) {
        goto LABEL_146;
      }
      uint64_t updated = FigAlternateSelectionBossAddMonitor(*(const void **)(v42 + 40), *(const void **)(v42 + 72));
      if (updated) {
        goto LABEL_146;
      }
    }
    if (*(void *)(v42 + 80))
    {
LABEL_74:
      uint64_t updated = fpfsi_setOverrideDisplaysSupportedVideoRange();
      if (updated) {
        goto LABEL_146;
      }
      CFAllocatorRef v47 = (const __CFAllocator *)FigGetAllocatorForMedia();
      uint64_t updated = FigAlternateFilterMonitorCreateForLowPowerMode(v47, &v141);
      if (updated) {
        goto LABEL_146;
      }
      uint64_t updated = FigAlternateSelectionBossAddMonitor(*(const void **)(v42 + 40), v141);
      if (updated) {
        goto LABEL_146;
      }
      if (v141) {
        CFRelease(v141);
      }
      CFAllocatorRef v48 = (const __CFAllocator *)FigGetAllocatorForMedia();
      uint64_t updated = FigAlternateFilterMonitorCreateForStreamingRestrictions(v48, &v140);
      if (updated) {
        goto LABEL_146;
      }
      CFTypeRef v49 = v140;
      uint64_t v50 = *(void *)(v42 + 2544);
      uint64_t v51 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v51) {
        uint64_t v52 = v51;
      }
      else {
        uint64_t v52 = 0;
      }
      uint64_t v68 = *(uint64_t (**)(CFTypeRef, __CFString *, uint64_t))(v52 + 56);
      if (v68)
      {
        uint64_t updated = v68(v49, @"AlternateFilterMonitorProperty_ReportingAgent", v50);
        if (updated) {
          goto LABEL_146;
        }
        uint64_t updated = FigAlternateSelectionBossAddMonitor(*(const void **)(v42 + 40), v140);
        if (updated) {
          goto LABEL_146;
        }
        if (!CelestialShouldLimitHDRFrameRateForPlayback() || *(void *)(v42 + 88))
        {
          uint64_t v10 = 0;
          goto LABEL_148;
        }
        CFAllocatorRef v77 = (const __CFAllocator *)FigGetAllocatorForMedia();
        *(_OWORD *)CFTypeRef cf = xmmword_194993110;
        long long v138 = unk_194993120;
        uint64_t updated = FigAlternateFilterMonitorCreateForVideoRangeFramerateCap(v77, (uint64_t)cf, (CFTypeRef *)(v42 + 88));
        if (updated) {
          goto LABEL_146;
        }
        uint64_t v78 = *(void *)(v42 + 88);
        uint64_t v79 = *(void *)(v43 + 672);
        uint64_t v80 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v81 = v80 ? v80 : 0;
        uint64_t v95 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v81 + 56);
        if (v95)
        {
          uint64_t updated = v95(v78, @"AlternateFilterMonitorProperty_DisplayList", v79);
          if (!updated) {
            uint64_t updated = FigAlternateSelectionBossAddMonitor(*(const void **)(v42 + 40), *(const void **)(v42 + 88));
          }
          goto LABEL_146;
        }
      }
      goto LABEL_147;
    }
    CFAllocatorRef v63 = (const __CFAllocator *)FigGetAllocatorForMedia();
    uint64_t updated = FigAlternateFilterMonitorCreateForSupportedVideoRange(v63, (CFTypeRef *)(v42 + 80));
    if (updated)
    {
LABEL_146:
      uint64_t v10 = updated;
      goto LABEL_148;
    }
    uint64_t v64 = *(void *)(v42 + 80);
    uint64_t v65 = *(void *)(v43 + 672);
    uint64_t v66 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v66) {
      uint64_t v67 = v66;
    }
    else {
      uint64_t v67 = 0;
    }
    __int16 v76 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v67 + 56);
    if (v76)
    {
      uint64_t updated = v76(v64, @"AlternateFilterMonitorProperty_DisplayList", v65);
      if (!updated)
      {
        uint64_t updated = FigAlternateSelectionBossAddMonitor(*(const void **)(v42 + 40), *(const void **)(v42 + 80));
        if (!updated) {
          goto LABEL_74;
        }
      }
      goto LABEL_146;
    }
LABEL_147:
    uint64_t v10 = 4294954514;
    goto LABEL_148;
  }
  CFAllocatorRef v53 = (const __CFAllocator *)FigGetAllocatorForMedia();
  uint64_t updated = FigAlternateFilterMonitorCreateForPreferredVideoFormat(v53, (CFTypeRef *)(v42 + 64));
  if (updated) {
    goto LABEL_146;
  }
  uint64_t v54 = *v46;
  uint64_t v55 = *(void *)(v43 + 672);
  uint64_t v56 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v56) {
    uint64_t v57 = v56;
  }
  else {
    uint64_t v57 = 0;
  }
  float v69 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v57 + 56);
  if (!v69) {
    goto LABEL_147;
  }
  uint64_t updated = v69(v54, @"AlternateFilterMonitorProperty_DisplayList", v55);
  if (updated) {
    goto LABEL_146;
  }
  uint64_t v70 = *(void *)(v42 + 936);
  if (v70)
  {
    uint64_t v71 = FigGetAllocatorForMedia();
    uint64_t FigBaseObject = FigBytePumpGetFigBaseObject(v70);
    uint64_t v73 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v73) {
      uint64_t v74 = v73;
    }
    else {
      uint64_t v74 = 0;
    }
    uint64_t v82 = *(void (**)(uint64_t, uint64_t, uint64_t, const void **))(v74 + 48);
    if (v82)
    {
      v82(FigBaseObject, 0x1EE53EC58, v71, &v142);
      uint64_t v83 = v142;
    }
    else
    {
      uint64_t v83 = 0;
    }
    uint64_t v84 = *v46;
    uint64_t v85 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v85) {
      uint64_t v86 = v85;
    }
    else {
      uint64_t v86 = 0;
    }
    uint64_t v87 = *(uint64_t (**)(uint64_t, __CFString *, const void *))(v86 + 56);
    if (!v87) {
      goto LABEL_147;
    }
    uint64_t updated = v87(v84, @"AlternateFilterMonitorProperty_MaxContentFrameRate", v83);
    if (updated) {
      goto LABEL_146;
    }
  }
  uint64_t v88 = CMBaseObjectGetDerivedStorage();
  uint64_t v89 = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)(v88 + 896)
    && ((*(_DWORD *)(v89 + 808) - 1) > 1 || !CelestialShouldLimitHDRConcurrentPlayback()))
  {
    goto LABEL_140;
  }
  LODWORD(cf[0]) = 1;
  CFNumberRef v90 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, cf);
  uint64_t v91 = *v46;
  uint64_t v92 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v92) {
    uint64_t v93 = v92;
  }
  else {
    uint64_t v93 = 0;
  }
  uint64_t v94 = *(uint64_t (**)(uint64_t, __CFString *, CFNumberRef))(v93 + 56);
  if (v94) {
    uint64_t v10 = v94(v91, @"AlternateFilterMonitorProperty_PreferredVideoRange", v90);
  }
  else {
    uint64_t v10 = 4294954514;
  }
  if (v90) {
    CFRelease(v90);
  }
  if (!v10)
  {
LABEL_140:
    uint64_t updated = FigAlternateSelectionBossAddMonitor(*(const void **)(v42 + 40), *(const void **)(v42 + 64));
    if (updated) {
      goto LABEL_146;
    }
    goto LABEL_72;
  }
LABEL_148:
  if (v140) {
    CFRelease(v140);
  }
  if (v142) {
    CFRelease(v142);
  }
  if (!v10)
  {
    uint64_t v5 = fpfsi_UpdateResourceSpecifierOnResourceArbiter((uint64_t)a1);
    if (v5) {
      goto LABEL_219;
    }
    uint64_t v5 = fpfsi_SetupResolutionCapFilter((uint64_t)a1);
    if (v5) {
      goto LABEL_219;
    }
    if (*(unsigned char *)(v4 + 841))
    {
      if (CelestialShouldLimit4kConcurrentPlayback())
      {
        uint64_t v96 = CMBaseObjectGetDerivedStorage();
        if (*(float *)(v96 + 108) != 0.0
          && fpfs_CanRenderVideo(v96, 0)
          && !fpfs_GrabPlayer4kPlaybackBaton(*(const void **)DerivedStorage))
        {
          uint64_t v5 = fpfsi_addHDResolutionCap();
          if (v5) {
            goto LABEL_219;
          }
        }
      }
    }
    CFAllocatorRef v97 = (const __CFAllocator *)FigGetAllocatorForMedia();
    uint64_t v5 = FigAlternatePreferBestFormatForVideoRangeFilterCreate(v97, 1, &v134);
    if (v5) {
      goto LABEL_219;
    }
    uint64_t v5 = FigAlternateSelectionBossAddFilter(*(void *)(DerivedStorage + 40), v134);
    if (v5) {
      goto LABEL_219;
    }
    uint64_t v98 = CMBaseObjectGetDerivedStorage();
    uint64_t v99 = CMBaseObjectGetDerivedStorage();
    if (!*(void *)(v98 + 40)) {
      goto LABEL_205;
    }
    if (!*(void *)(v98 + 96))
    {
      uint64_t v127 = FigSignalErrorAt();
LABEL_204:
      uint64_t v10 = v127;
      if (v127) {
        goto LABEL_213;
      }
LABEL_205:
      uint64_t v5 = FigAlternateSelectionBossApplyFilters(*(const void **)(DerivedStorage + 40));
      if (!v5)
      {
        uint64_t v128 = *(void *)(DerivedStorage + 40);
        uint64_t v129 = FigGetAllocatorForMedia();
        uint64_t v10 = FigAlternateSelectionBossCopyProperty(v128, @"FilteredAlternateList", v129, &theArray);
        CFArrayRef v130 = theArray;
        if (v10)
        {
LABEL_210:
          if (v130) {
            CFRelease(v130);
          }
          goto LABEL_213;
        }
        if (theArray)
        {
          CFIndex Count = CFArrayGetCount(theArray);
          CFArrayRef v130 = theArray;
          if (Count >= 1)
          {
            fpfsi_UpdateValidAlternateListAndEvaluateCurrentAlternateAgaintValidAlternateList(a1, theArray);
            CFArrayRef v130 = theArray;
          }
          goto LABEL_210;
        }
LABEL_218:
        uint64_t v10 = 0;
        goto LABEL_213;
      }
      goto LABEL_219;
    }
    uint64_t v100 = v99;
    CFDictionaryRef CurrentAudioPersistentIDFromMediaOption = fpfsi_GetCurrentAudioPersistentIDFromMediaOption();
    if (CurrentAudioPersistentIDFromMediaOption)
    {
      CFDictionaryRef v102 = CurrentAudioPersistentIDFromMediaOption;
      uint64_t v103 = *(void *)(v98 + 96);
      uint64_t v104 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v104) {
        uint64_t v105 = v104;
      }
      else {
        uint64_t v105 = 0;
      }
      long long v106 = *(uint64_t (**)(uint64_t, __CFString *, const __CFDictionary *))(v105 + 56);
      if (!v106) {
        goto LABEL_212;
      }
      uint64_t v5 = v106(v103, @"AfmfpbProperty_AudibleMediaSelectionOptionPersistentID", v102);
      if (v5) {
        goto LABEL_219;
      }
    }
    if (a1
      && *(void *)(v98 + 2456)
      && ((*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 560) & 4) != 0
       || FigGetCFPreferenceNumberWithDefault()))
    {
      uint64_t v107 = *(void *)(v98 + 96);
      uint64_t v108 = *(void *)(v98 + 2456);
      uint64_t v109 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v109) {
        uint64_t v110 = v109;
      }
      else {
        uint64_t v110 = 0;
      }
      CMTime v111 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v110 + 56);
      if (!v111) {
        goto LABEL_212;
      }
      uint64_t v5 = v111(v107, @"AfmfpbProperty_TransitionAttributes", v108);
      if (v5) {
        goto LABEL_219;
      }
    }
    uint64_t v5 = FigAlternateSelectionBossAddMonitor(*(const void **)(v98 + 40), *(const void **)(v98 + 96));
    if (v5) {
      goto LABEL_219;
    }
    uint64_t v5 = fpfsi_setPlaybackMonitorAutoSwitchStreamQuality();
    if (v5) {
      goto LABEL_219;
    }
    int v112 = *(_DWORD *)(v98 + 2868);
    if (v112 != -1)
    {
      uint64_t v113 = *(void *)(v98 + 96);
      if (v112 == 1) {
        uint64_t v114 = (void *)MEMORY[0x1E4F1CFD0];
      }
      else {
        uint64_t v114 = (void *)MEMORY[0x1E4F1CFC8];
      }
      uint64_t v115 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v115) {
        uint64_t v116 = v115;
      }
      else {
        uint64_t v116 = 0;
      }
      uint64_t v117 = *(uint64_t (**)(uint64_t, __CFString *, void))(v116 + 56);
      if (!v117) {
        goto LABEL_212;
      }
      uint64_t v5 = v117(v113, @"AfmfpbProperty_StartsOnFirstEligibleVariant", *v114);
      if (v5) {
        goto LABEL_219;
      }
    }
    uint64_t v118 = *(void *)(v98 + 576);
    if (v118)
    {
      uint64_t v119 = *(void *)(v98 + 96);
      uint64_t v120 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v120) {
        uint64_t v121 = v120;
      }
      else {
        uint64_t v121 = 0;
      }
      uint64_t v122 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v121 + 56);
      if (!v122) {
        goto LABEL_212;
      }
      uint64_t v5 = v122(v119, @"AfmfpbProperty_Timebase", v118);
      if (v5) {
        goto LABEL_219;
      }
    }
    if (!*(unsigned char *)(v98 + 137))
    {
LABEL_203:
      fpfsi_setAndPerformResourceConservation(a1, (int *)(v100 + 764));
      uint64_t v127 = FigAlternateFilterMonitorForPlaybackBitrateStartup(*(const void **)(v98 + 96));
      goto LABEL_204;
    }
    uint64_t v123 = *(void *)(v98 + 96);
    uint64_t v124 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v124) {
      uint64_t v125 = v124;
    }
    else {
      uint64_t v125 = 0;
    }
    uint64_t v126 = *(uint64_t (**)(uint64_t, __CFString *, void))(v125 + 56);
    if (v126)
    {
      uint64_t v5 = v126(v123, @"AfmfpbProperty_DisableTrialSwitchUpTimer", *MEMORY[0x1E4F1CFD0]);
      if (v5) {
        goto LABEL_219;
      }
      goto LABEL_203;
    }
LABEL_212:
    uint64_t v10 = 4294954514;
  }
LABEL_213:
  if (v134) {
    CFRelease(v134);
  }
  if (v133) {
    CFRelease(v133);
  }
  return v10;
}

void fpfsi_UpdateSourceFormatInfoIfNecessary(uint64_t a1)
{
  CFTypeRef cf = 0;
  CFTypeRef v16 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = CMBaseObjectGetDerivedStorage();
  if (*(void *)(v3 + 80) == a1)
  {
    uint64_t v4 = *(void *)(DerivedStorage + 40);
    if (v4)
    {
      uint64_t v5 = v3;
      uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
      FigAlternateSelectionBossCopyProperty(v4, @"HasMultiChannelAudio", AllocatorForMedia, (const __CFArray **)&v16);
      uint64_t v7 = *(void *)(DerivedStorage + 40);
      uint64_t v8 = FigGetAllocatorForMedia();
      FigAlternateSelectionBossCopyProperty(v7, @"HasAtmosAlternates", v8, (const __CFArray **)&cf);
      if (*(void *)(v5 + 536))
      {
        if (FigCFEqual())
        {
          int v9 = FigCFEqual();
          uint64_t v10 = (uint64_t *)MEMORY[0x1E4F768E0];
          if (!v9) {
            uint64_t v10 = (uint64_t *)MEMORY[0x1E4F768E8];
          }
        }
        else
        {
          uint64_t v10 = (uint64_t *)MEMORY[0x1E4F768F0];
        }
        uint64_t v11 = *(void *)(v5 + 536);
        if (v11)
        {
          uint64_t v12 = *v10;
          uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v13)
          {
            CFAllocatorRef v14 = *(void (**)(uint64_t, void, uint64_t))(v13 + 56);
            if (v14) {
              v14(v11, *MEMORY[0x1E4F75F50], v12);
            }
          }
        }
      }
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v16) {
    CFRelease(v16);
  }
}

uint64_t fpfsi_RTCReportingUpdateAvailableAlternateHDCPLevels(uint64_t result, int a2, int a3, int a4, int a5, unsigned int a6)
{
  uint64_t v9 = result;
  if (a2)
  {
    uint64_t v10 = *(void *)(result + 2544);
    if (v10)
    {
      uint64_t VTable = CMBaseObjectGetVTable();
      uint64_t v14 = *(void *)(VTable + 16);
      uint64_t result = VTable + 16;
      uint64_t v13 = v14;
      uint64_t v15 = v14 ? v13 : 0;
      CFTypeRef v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, void))(v15 + 56);
      if (v16) {
        uint64_t result = v16(v10, 0x1EE582B78, 0x1EE561618, a3, 0);
      }
    }
  }
  if (a4)
  {
    uint64_t v17 = *(void *)(v9 + 2544);
    if (v17)
    {
      uint64_t v18 = CMBaseObjectGetVTable();
      uint64_t v20 = *(void *)(v18 + 16);
      uint64_t result = v18 + 16;
      uint64_t v19 = v20;
      uint64_t v21 = v20 ? v19 : 0;
      uint64_t v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, void))(v21 + 56);
      if (v22) {
        uint64_t result = v22(v17, 0x1EE582B78, 0x1EE561638, a5, 0);
      }
    }
  }
  uint64_t v23 = *(void *)(v9 + 2544);
  if (v23)
  {
    uint64_t v24 = CMBaseObjectGetVTable();
    uint64_t v26 = *(void *)(v24 + 16);
    uint64_t result = v24 + 16;
    uint64_t v25 = v26;
    uint64_t v27 = v26 ? v25 : 0;
    uint64_t v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, void))(v27 + 56);
    if (v28)
    {
      return v28(v23, 0x1EE582B78, 0x1EE561658, a6, 0);
    }
  }
  return result;
}

uint64_t fpfsi_UpdateValidAlternateListAndEvaluateCurrentAlternateAgaintValidAlternateList(const __CFArray *a1, const __CFArray *a2)
{
  uint64_t v255 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v233 = CMBaseObjectGetDerivedStorage();
  long long v235 = 0;
  CFDictionaryRef CurrentAudioPersistentIDFromMediaOption = fpfsi_GetCurrentAudioPersistentIDFromMediaOption();
  if (*(unsigned char *)(DerivedStorage + 49))
  {
    CFDictionaryRef v6 = CurrentAudioPersistentIDFromMediaOption;
    CFArrayRef v7 = *(const __CFArray **)(DerivedStorage + 1688);
    if (v7 && CFArrayGetCount(v7))
    {
      CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
      CFArrayRef MutableCopy = CFArrayCreateMutableCopy(AllocatorForMedia, 0, *(CFArrayRef *)(DerivedStorage + 1688));
    }
    else
    {
      CFArrayRef MutableCopy = 0;
    }
    uint64_t updated = fpfsi_UpdateValidAlternateListAndSuggestAnAlternate((uint64_t)a1, a2, &v235);
    if (updated) {
      goto LABEL_27;
    }
    if (!*(void *)(DerivedStorage + 1704))
    {
      int CurrentDisplayVideoRangeFromMonitor = fpfsi_GetCurrentDisplayVideoRangeFromMonitor();
      VideoRangeStringFromFPSupportunsigned int VideoRange = fpfs_getVideoRangeStringFromFPSupportVideoRange(CurrentDisplayVideoRangeFromMonitor);
      fpfs_RTCReportingSetDisplayVideoRange(DerivedStorage, (uint64_t)VideoRangeStringFromFPSupportVideoRange);
    }
    uint64_t v13 = (uint64_t)v235;
    uint64_t v14 = CMBaseObjectGetDerivedStorage();
    uint64_t v15 = *(void *)(v14 + 1768);
    if (*(void *)(v14 + 96))
    {
      if (v15)
      {
        BOOL v16 = FigCFEqual() != 0;
        FigAlternateGetPeakBitRate(*(void *)(v14 + 1768));
        FigAlternateGetPeakBitRate(v13);
LABEL_15:
        uint64_t v17 = *(const void **)(v14 + 1768);
        if (v17)
        {
          CFTypeRef v18 = CFRetain(v17);
          uint64_t v19 = v18;
          if (v15) {
            char v20 = v16;
          }
          else {
            char v20 = 1;
          }
          if (v20)
          {
            uint64_t v21 = v18;
            if (v18) {
              goto LABEL_33;
            }
          }
          else
          {
            uint64_t v24 = fpfs_CancelTrialSwitch((uint64_t)a1);
            if (v24)
            {
              uint64_t v23 = v24;
              uint64_t v21 = v19;
              if (!MutableCopy) {
                goto LABEL_352;
              }
              goto LABEL_351;
            }
            if (v19) {
              CFRelease(v19);
            }
          }
LABEL_32:
          uint64_t v21 = 0;
          uint64_t v19 = *(const void **)(DerivedStorage + 1704);
          if (!v19)
          {
            CFArrayRef v232 = MutableCopy;
            int v234 = 0;
            uint64_t v19 = 0;
            goto LABEL_37;
          }
LABEL_33:
          if (!FigCFEqual())
          {
            uint64_t v31 = (uint64_t)v235;
            uint64_t v32 = CMBaseObjectGetDerivedStorage();
            unsigned int VideoRange = FigAlternateGetVideoRange(*(void *)(v32 + 1704));
            unsigned int v34 = FigAlternateGetVideoRange(v31);
            if (VideoRange <= 1 && v34 >= 2)
            {
              if (CelestialShouldLimitHDRConcurrentPlayback())
              {
                uint64_t v35 = CMBaseObjectGetDerivedStorage();
                if (*(float *)(v35 + 108) != 0.0 && fpfs_CanRenderVideo(v35, 0) && !fpfs_GrabPlayerHDRPlaybackBaton())
                {
                  if (dword_1E9350BB0)
                  {
                    CFArrayRef v107 = MutableCopy;
                    LODWORD(lhs.value) = 0;
                    LOBYTE(rhs.value) = 0;
                    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                    unsigned int value = lhs.value;
                    if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, rhs.value)) {
                      unsigned int v110 = value;
                    }
                    else {
                      unsigned int v110 = value & 0xFFFFFFFE;
                    }
                    if (v110)
                    {
                      CMTime v111 = *(const void **)DerivedStorage;
                      if (v111) {
                        int v112 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
                      }
                      else {
                        int v112 = "";
                      }
                      if (a1) {
                        uint64_t v129 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
                      }
                      else {
                        uint64_t v129 = "";
                      }
                      LODWORD(valuePtr.value) = 136316162;
                      *(CMTimeValue *)((char *)&valuePtr.value + 4) = (CMTimeValue)"fpfsi_UpdateValidAlternateListAndEval"
                                                                                   "uateCurrentAlternateAgaintValidAlternateList";
                      LOWORD(valuePtr.flags) = 2048;
                      *(void *)((char *)&valuePtr.flags + 2) = v111;
                      HIWORD(valuePtr.epoch) = 2082;
                      CFTypeRef v243 = v112;
                      __int16 v244 = 2048;
                      CFArrayRef v245 = a1;
                      __int16 v246 = 2082;
                      CMTimeFlags v247 = v129;
                      _os_log_send_and_compose_impl();
                    }
                    fig_log_call_emit_and_clean_up_after_send_and_compose();
                    CFArrayRef MutableCopy = v107;
                  }
                  uint64_t v23 = fpfsi_UpdateValidAlternateListAndSuggestAnAlternate((uint64_t)a1, MutableCopy, 0);
                  if (!v23)
                  {
                    fpfsi_SwitchBetweenHDRAndSDR((uint64_t)a1, 1);
                    if (!MutableCopy) {
                      goto LABEL_352;
                    }
                    goto LABEL_351;
                  }
                  goto LABEL_350;
                }
              }
            }
            uint64_t v36 = (uint64_t)v235;
            uint64_t v37 = CMBaseObjectGetDerivedStorage();
            if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 841))
            {
              int v38 = FigAlternateIs4k(*(void *)(v37 + 1704));
              int v39 = FigAlternateIs4k(v36);
              if (v38 != v39)
              {
                if (v39)
                {
                  if (CelestialShouldLimit4kConcurrentPlayback())
                  {
                    uint64_t v40 = CMBaseObjectGetDerivedStorage();
                    if (*(float *)(v40 + 108) != 0.0
                      && fpfs_CanRenderVideo(v40, 0)
                      && !fpfs_GrabPlayer4kPlaybackBaton(*(const void **)DerivedStorage))
                    {
                      uint64_t v23 = fpfsi_UpdateValidAlternateListAndSuggestAnAlternate((uint64_t)a1, MutableCopy, 0);
                      if (!v23)
                      {
                        fpfsi_SwitchBetween4kAndHD((uint64_t)a1, 1);
                        if (!MutableCopy) {
                          goto LABEL_352;
                        }
                        goto LABEL_351;
                      }
                      goto LABEL_350;
                    }
                  }
                }
              }
            }
          }
          if (FigCFEqual()) {
            goto LABEL_349;
          }
          CFArrayRef v232 = MutableCopy;
          int v234 = 1;
LABEL_37:
          uint64_t v25 = CMBaseObjectGetDerivedStorage();
          int v26 = -2;
          LODWORD(valuePtr.value) = -2;
          uint64_t v27 = *(void *)(v25 + 56);
          if (v27)
          {
            *(void *)CMTime time1 = 0;
            uint64_t v28 = FigGetAllocatorForMedia();
            uint64_t v29 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v29) {
              uint64_t v30 = v29;
            }
            else {
              uint64_t v30 = 0;
            }
            uint64_t v41 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, unsigned char *))(v30 + 48);
            if (v41)
            {
              int v42 = v41(v27, @"AlternateFilterMonitorProperty_MaxProtectedAlternateHDCPLevel", v28, time1);
              uint64_t v43 = *(const void **)time1;
              if (!v42 && *(void *)time1)
              {
                CFNumberGetValue(*(CFNumberRef *)time1, kCFNumberSInt32Type, &valuePtr);
                uint64_t v43 = *(const void **)time1;
              }
              if (v43) {
                CFRelease(v43);
              }
            }
            int v26 = valuePtr.value;
          }
          CFDictionaryRef v230 = v6;
          uint64_t v44 = (uint64_t)v235;
          uint64_t v45 = CMBaseObjectGetDerivedStorage();
          uint64_t v46 = CMBaseObjectGetDerivedStorage();
          uint64_t v47 = *(void *)(v45 + 1704);
          if (!v47)
          {
            BOOL v52 = 0;
            goto LABEL_81;
          }
          unsigned int v48 = FigAlternateGetVideoRange(v47);
          unsigned int v49 = FigAlternateGetVideoRange(v44);
          if (v48 >= 2 && v49 <= 1)
          {
            int v50 = fpfsi_GetCurrentDisplayVideoRangeFromMonitor();
            uint64_t v51 = fpfs_getVideoRangeStringFromFPSupportVideoRange(v50);
            fpfs_RTCReportingSetDisplayVideoRange(v45, (uint64_t)v51);
            if (*(_DWORD *)(v46 + 808) == 2)
            {
              if (v50 == 1)
              {
                BOOL v52 = 1;
                goto LABEL_81;
              }
            }
            else
            {
              int ShouldLimitHDRConcurrentPlayback = CelestialShouldLimitHDRConcurrentPlayback();
              BOOL v52 = 1;
              if (v50 == 1 || ShouldLimitHDRConcurrentPlayback) {
                goto LABEL_81;
              }
            }
          }
          int HDCPLevel = FigAlternateGetHDCPLevel(*(void *)(v45 + 1704));
          int v55 = FigAlternateGetHDCPLevel(v44);
          BOOL v52 = HDCPLevel >= 0 && HDCPLevel != v55 && HDCPLevel > v26;
LABEL_81:
          BOOL v228 = v52;
          CFAllocatorRef v58 = (long long *)MEMORY[0x1E4F1F9F8];
          CMTimeValue v240 = *MEMORY[0x1E4F1F9F8];
          CMTimeScale timescale = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 8);
          unsigned int SwitchOptions = GetSwitchOptions(DerivedStorage, 1);
          LODWORD(valuePtr.value) = 0;
          *(void *)CMTime time1 = 0;
          uint64_t v59 = *(void *)(DerivedStorage + 56);
          if (v59)
          {
            uint64_t v60 = FigGetAllocatorForMedia();
            uint64_t v61 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v61) {
              uint64_t v62 = v61;
            }
            else {
              uint64_t v62 = 0;
            }
            CFAllocatorRef v63 = *(unsigned int (**)(uint64_t, __CFString *, uint64_t, unsigned char *))(v62 + 48);
            if (v63 && !v63(v59, @"AlternateFilterMonitorProperty_HDCPErrorCount", v60, time1))
            {
              if (!*(void *)time1) {
                goto LABEL_100;
              }
              CFNumberGetValue(*(CFNumberRef *)time1, kCFNumberSInt32Type, &valuePtr);
              if (LODWORD(valuePtr.value))
              {
                unsigned int v64 = *(_DWORD *)(DerivedStorage + 52);
                uint64_t v65 = LODWORD(valuePtr.value) - v64;
                if (LODWORD(valuePtr.value) != v64)
                {
                  if (LODWORD(valuePtr.value) > v64)
                  {
                    uint64_t v66 = *(void *)(DerivedStorage + 2544);
                    if (v66)
                    {
                      uint64_t v67 = *(void *)(CMBaseObjectGetVTable() + 16);
                      uint64_t v68 = v67 ? v67 : 0;
                      float v69 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v68 + 32);
                      if (v69) {
                        v69(v66, 0x1EE582B78, 0x1EE584D38, v65);
                      }
                    }
                  }
                  *(_DWORD *)(DerivedStorage + 52) = valuePtr.value;
                }
              }
            }
            if (*(void *)time1) {
              CFRelease(*(CFTypeRef *)time1);
            }
          }
LABEL_100:
          uint64_t v70 = *(void *)(DerivedStorage + 2544);
          if (v70)
          {
            uint64_t v71 = *(void *)(CMBaseObjectGetVTable() + 16);
            uint64_t v72 = v71 ? v71 : 0;
            uint64_t v73 = *(void (**)(uint64_t, uint64_t, uint64_t, void, void))(v72 + 56);
            if (v73) {
              v73(v70, 0x1EE582B78, 0x1EE5615D8, v26, 0);
            }
          }
          CMTimeEpoch v74 = *((void *)v58 + 2);
          if (v234)
          {
            memset(time1, 0, 24);
            fpfs_GetNextTimeToPlayIfEstablished((uint64_t)a1, (uint64_t)time1);
            CMTime lhs = *(CMTime *)time1;
            CMTime rhs = *(CMTime *)(DerivedStorage + 1184);
            CMTimeAdd(&valuePtr, &lhs, &rhs);
            CMTimeValue v240 = valuePtr.value;
            CMTimeFlags flags = valuePtr.flags;
            CMTimeScale timescale = valuePtr.timescale;
            CMTimeEpoch epoch = valuePtr.epoch;
          }
          else
          {
            CMTimeFlags flags = *((_DWORD *)v58 + 3);
            CMTimeEpoch epoch = *((void *)v58 + 2);
          }
          uint64_t v75 = *(void *)(DerivedStorage + 96);
          BOOL v76 = !v75
             || !*(unsigned char *)(v233 + 458)
             || FigAlternatePlaybackBitrateMonitorIsAlternateStillValid(v75, (uint64_t)v19) == 0;
          if (v234)
          {
            int PeakBitRate = FigAlternateGetPeakBitRate((uint64_t)v19);
            BOOL v227 = PeakBitRate < (int)FigAlternateGetPeakBitRate((uint64_t)v235);
          }
          else
          {
            BOOL v227 = 0;
          }
          CMTimeEpoch v229 = v74;
          BOOL v223 = v76;
          if (v76) {
            goto LABEL_285;
          }
          uint64_t v78 = CMBaseObjectGetDerivedStorage();
          uint64_t v79 = *(void *)(v78 + 1704);
          if (v79 && fpfs_isAlternateValid((uint64_t)a1, v79))
          {
            if (v227)
            {
              if (*(_DWORD *)(v78 + 524) != 1)
              {
                if (!dword_1E9350BB0) {
                  goto LABEL_280;
                }
                LODWORD(lhs.value) = 0;
                LOBYTE(rhs.value) = 0;
                uint64_t v98 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                unsigned int v99 = lhs.value;
                if (os_log_type_enabled(v98, rhs.value)) {
                  unsigned int v100 = v99;
                }
                else {
                  unsigned int v100 = v99 & 0xFFFFFFFE;
                }
                if (!v100) {
                  goto LABEL_279;
                }
                uint64_t v101 = *(void *)v78;
                if (*(void *)v78) {
                  CFDictionaryRef v102 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
                }
                else {
                  CFDictionaryRef v102 = "";
                }
                if (a1) {
                  uint64_t v127 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
                }
                else {
                  uint64_t v127 = "";
                }
                int v128 = *(_DWORD *)(v78 + 524);
                LODWORD(valuePtr.value) = 136316418;
                *(CMTimeValue *)((char *)&valuePtr.value + 4) = (CMTimeValue)"fpfsi_OkayToSwitch";
                LOWORD(valuePtr.flags) = 2048;
                *(void *)((char *)&valuePtr.flags + 2) = v101;
                HIWORD(valuePtr.epoch) = 2082;
                CFTypeRef v243 = v102;
                __int16 v244 = 2048;
                CFArrayRef v245 = a1;
                __int16 v246 = 2082;
                CMTimeFlags v247 = v127;
                __int16 v248 = 1024;
                *(_DWORD *)CFTypeRef v249 = v128;
LABEL_278:
                _os_log_send_and_compose_impl();
                goto LABEL_279;
              }
              for (uint64_t i = *(void *)(v78 + 1048); i; uint64_t i = *(void *)(i + 8))
              {
                unsigned int v81 = *(_DWORD *)(i + 152);
                if (v81 < 2)
                {
                  if (!*(unsigned char *)(i + 184))
                  {
LABEL_192:
                    if (dword_1E9350BB0)
                    {
                      LODWORD(lhs.value) = 0;
                      LOBYTE(rhs.value) = 0;
                      uint64_t v116 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                      unsigned int v117 = lhs.value;
                      if (os_log_type_enabled(v116, rhs.value)) {
                        unsigned int v118 = v117;
                      }
                      else {
                        unsigned int v118 = v117 & 0xFFFFFFFE;
                      }
                      if (v118)
                      {
                        uint64_t v119 = *(void *)v78;
                        if (*(void *)v78) {
                          uint64_t v120 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
                        }
                        else {
                          uint64_t v120 = "";
                        }
                        if (a1) {
                          CFTypeRef v133 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
                        }
                        else {
                          CFTypeRef v133 = "";
                        }
                        uint64_t v134 = *(void *)(i + 16);
                        int v135 = *(_DWORD *)(i + 152);
                        LODWORD(valuePtr.value) = 136316674;
                        *(CMTimeValue *)((char *)&valuePtr.value + 4) = (CMTimeValue)"fpfsi_OkayToSwitch";
                        LOWORD(valuePtr.flags) = 2048;
                        *(void *)((char *)&valuePtr.flags + 2) = v119;
                        HIWORD(valuePtr.epoch) = 2082;
                        CFTypeRef v243 = v120;
                        __int16 v244 = 2048;
                        CFArrayRef v245 = a1;
                        __int16 v246 = 2082;
                        CMTimeFlags v247 = v133;
                        __int16 v248 = 1024;
                        *(_DWORD *)CFTypeRef v249 = v134;
                        *(_WORD *)&v249[4] = 1024;
                        *(_DWORD *)&v249[6] = v135;
                        _os_log_send_and_compose_impl();
                      }
                      goto LABEL_279;
                    }
LABEL_280:
                    if (v234)
                    {
LABEL_281:
                      uint64_t v23 = 0;
                      goto LABEL_282;
                    }
LABEL_285:
                    AudioChannelCFIndex Count = FigAlternateGetAudioChannelCount(v235, v230, 0);
                    *(void *)CMTime time1 = 0;
                    uint64_t v144 = *(void *)(CMBaseObjectGetDerivedStorage() + 128);
                    if (!v144
                      || ((uint64_t v145 = FigGetAllocatorForMedia(), (v146 = *(void *)(CMBaseObjectGetVTable() + 8)) == 0)
                        ? (uint64_t v147 = 0)
                        : (uint64_t v147 = v146),
                          (uint64_t v148 = *(void (**)(uint64_t, __CFString *, uint64_t, unsigned char *))(v147 + 48)) == 0
                       || (v148(v144, @"FAFProperty_AlternateList", v145, time1),
                           (CFArrayRef v149 = *(const __CFArray **)time1) == 0)))
                    {
LABEL_305:
                      long long v158 = v235;
                      lhs.unsigned int value = 0;
                      LODWORD(rhs.value) = 0;
                      uint64_t v159 = CMBaseObjectGetDerivedStorage();
                      CFDictionaryRef v160 = fpfsi_GetCurrentAudioPersistentIDFromMediaOption();
                      if (*(void *)(v159 + 1704))
                      {
                        CFDictionaryRef v161 = v160;
                        if (CMTimebaseGetRate(*(CMTimebaseRef *)(v159 + 576)) != 0.0)
                        {
                          CMTimebaseGetTime((CMTime *)time1, *(CMTimebaseRef *)(v159 + 576));
                          CMTime valuePtr = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
                          if ((CMTimeCompare((CMTime *)time1, &valuePtr) & 0x80000000) == 0)
                          {
                            if (*(unsigned char *)(v159 + 3090))
                            {
                              int v162 = FigAlternateGetPeakBitRate((uint64_t)v158);
                              if (v162 > (int)FigAlternateGetPeakBitRate(*(void *)(v159 + 1704)))
                              {
                                if (fpfsi_IsSpatializationAllowed((uint64_t)a1))
                                {
                                  int AudioChannelCounts = FigAlternateGetAudioChannelCounts(v158, v161, &rhs, 0);
                                  if (AudioChannelCounts - LODWORD(rhs.value) >= 3 && !*(void *)(v159 + 3096))
                                  {
                                    if (fpfsi_AttemptToSetupInhibitMultichannelTimer_onceToken != -1) {
                                      dispatch_once(&fpfsi_AttemptToSetupInhibitMultichannelTimer_onceToken, &__block_literal_global_239);
                                    }
                                    uint64_t v181 = *(NSObject **)(v159 + 600);
                                    uint64_t v182 = *(void **)(v159 + 16);
                                    dispatch_time_t v183 = dispatch_time(0, 1000000000* fpfsi_AttemptToSetupInhibitMultichannelTimer_inhibitMultichannelPeriodSeconds);
                                    *(void *)(v159 + 3096) = fpfs_TimerDispatchSourceCreate(v181, v182, v183, (void (__cdecl *)(void *))fpfsi_MultichannelUninhibitedCallback, 0);
                                    if (*(void *)(v159 + 40))
                                    {
                                      CFAllocatorRef v184 = (const __CFAllocator *)FigGetAllocatorForMedia();
                                      int v185 = FigAlternateMultichannelAudioFilterCreate(v184, v161, 0, 0, &lhs);
                                      CFTypeRef v186 = (const void *)lhs.value;
                                      if (!v185)
                                      {
                                        FigAlternateSelectionBossAddFilter(*(void *)(v159 + 40), (const void *)lhs.value);
                                        CFTypeRef v186 = (const void *)lhs.value;
                                      }
                                      if (v186) {
                                        CFRelease(v186);
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                      CFAllocatorRef v58 = (long long *)MEMORY[0x1E4F1F9F8];
                      if (!*(unsigned char *)(DerivedStorage + 3090) || AudioChannelCount <= 2) {
                        goto LABEL_315;
                      }
                      uint64_t v23 = 0;
                      goto LABEL_415;
                    }
                    CFIndex v150 = 0;
                    do
                    {
                      if (v149)
                      {
                        CFIndex Count = CFArrayGetCount(v149);
                        CFArrayRef v149 = *(const __CFArray **)time1;
                      }
                      else
                      {
                        CFIndex Count = 0;
                      }
                      if (v150 >= Count)
                      {
                        CFRelease(v149);
                        goto LABEL_305;
                      }
                      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v149, v150);
                      MaxAudioChannelCFIndex Count = FigAlternateGetMaxAudioChannelCount(ValueAtIndex);
                      CFArrayRef v149 = *(const __CFArray **)time1;
                      ++v150;
                    }
                    while (MaxAudioChannelCount < 3);
                    CFRelease(*(CFTypeRef *)time1);
                    if (AudioChannelCount > 2) {
                      goto LABEL_305;
                    }
                    __int16 v154 = v235;
                    uint64_t v155 = CMBaseObjectGetDerivedStorage();
                    LODWORD(lhs.value) = 0;
                    LODWORD(rhs.value) = 0;
                    CFDictionaryRef v156 = fpfsi_GetCurrentAudioPersistentIDFromMediaOption();
                    if (*(void *)(v155 + 1704))
                    {
                      CFDictionaryRef v157 = v156;
                      if (CMTimebaseGetRate(*(CMTimebaseRef *)(v155 + 576)) != 0.0)
                      {
                        CMTimebaseGetTime((CMTime *)time1, *(CMTimebaseRef *)(v155 + 576));
                        CMTime valuePtr = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
                        if ((CMTimeCompare((CMTime *)time1, &valuePtr) & 0x80000000) == 0)
                        {
                          if (*(unsigned char *)(v155 + 3090))
                          {
                            if (!fpfs_isAlternateValid((uint64_t)a1, *(void *)(v155 + 1704))) {
                              fpfsi_EmancipateItemFromMultichannelInhibitionsAndApplyFilters();
                            }
                          }
                          else
                          {
                            int v197 = FigAlternateGetPeakBitRate((uint64_t)v154);
                            if (v197 < (int)FigAlternateGetPeakBitRate(*(void *)(v155 + 1704)))
                            {
                              if (fpfsi_IsSpatializationAllowed((uint64_t)a1))
                              {
                                int v198 = FigAlternateGetAudioChannelCounts(*(const void **)(v155 + 1704), v157, &lhs, 0);
                                int v199 = FigAlternateGetAudioChannelCounts(v154, v157, &rhs, 0);
                                if (v199 - LODWORD(rhs.value) <= 2)
                                {
                                  int v200 = v198 - LODWORD(lhs.value);
                                  fpfs_ReleaseAndClearDispatchSource((dispatch_object_t *)(v155 + 3096));
                                  if (v200 >= 3) {
                                    *(unsigned char *)(v155 + 3090) = 1;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
LABEL_315:
                    uint64_t v164 = (uint64_t)v235;
                    uint64_t v165 = CMBaseObjectGetDerivedStorage();
                    if (*(void *)(v165 + 1728)
                      && FigCFEqual()
                      && fpfs_ScheduleRecoverySwitch((uint64_t)a1, v164, 0))
                    {
                      memset(&lhs, 0, sizeof(lhs));
                      fpfs_GetNextTimeToPlay(v165, 0, (uint64_t)&rhs);
                      *(_OWORD *)CMTime time1 = *(_OWORD *)(v165 + 1184);
                      *(void *)&time1[16] = *(void *)(v165 + 1200);
                      CMTimeAdd(&lhs, &rhs, (CMTime *)time1);
                      uint64_t v166 = *(void *)v165;
                      *(CMTime *)CMTime time1 = lhs;
                      *(_OWORD *)&valuePtr.unsigned int value = *v58;
                      CMTimeEpoch v167 = v229;
                      valuePtr.CMTimeEpoch epoch = v229;
                      if (!fpfs_SetAlternateWithContext(v166, a1, v164, 33)
                        && fpfs_InitiateSwitchRecovery(v165, 0)
                        && fpfs_InitiateSwitchRecovery(v165, 1u))
                      {
                        uint64_t v23 = 0;
                        goto LABEL_327;
                      }
                    }
                    else
                    {
                      CMTimeEpoch v167 = v229;
                    }
                    uint64_t v168 = (uint64_t)v235;
                    uint64_t v169 = CMBaseObjectGetDerivedStorage();
                    long long v231 = *v58;
                    *(_OWORD *)&rhs.unsigned int value = *v58;
                    rhs.CMTimeEpoch epoch = v167;
                    uint64_t v254 = 0;
                    long long v252 = 0u;
                    long long v253 = 0u;
                    memset(time1, 0, sizeof(time1));
                    if (*(void *)(v169 + 1704))
                    {
                      uint64_t v170 = v169;
                      if (*(unsigned char *)(v169 + 553))
                      {
                        int v171 = FigAlternateGetPeakBitRate(v168);
                        if (v171 < (int)FigAlternateGetPeakBitRate(*(void *)(v170 + 1704)))
                        {
                          fpfs_CancelTrialSwitch((uint64_t)a1);
                          fpfs_GetItemBufferedDuration(a1, &rhs, time1, 0);
                          uint64_t v172 = *(void *)v170;
                          uint64_t v173 = GetSwitchOptions(v170, 1);
                          fpfs_GetNextTimeToPlay(v170, 0, (uint64_t)&v236);
                          CMTime valuePtr = *(CMTime *)(v170 + 1184);
                          CMTimeAdd(&v237, &v236, &valuePtr);
                          CMTime lhs = rhs;
                          CMTime valuePtr = v237;
                          uint64_t v174 = fpfs_SetAlternateWithContext(v172, a1, v168, v173);
                          uint64_t v23 = 0;
                          if (!v174) {
                            goto LABEL_327;
                          }
                          uint64_t v23 = v174;
LABEL_415:
                          CFArrayRef MutableCopy = v232;
                          if (!v232)
                          {
LABEL_352:
                            if (v21) {
                              CFRelease(v21);
                            }
                            return v23;
                          }
LABEL_351:
                          CFRelease(MutableCopy);
                          goto LABEL_352;
                        }
                      }
                    }
                    *(_OWORD *)&rhs.unsigned int value = v231;
                    rhs.CMTimeEpoch epoch = v167;
                    uint64_t v254 = 0;
                    long long v252 = 0u;
                    long long v253 = 0u;
                    memset(time1, 0, sizeof(time1));
                    uint64_t v217 = GetSwitchOptions(DerivedStorage, 0);
                    fpfs_GetItemBufferedDuration(a1, &rhs, time1, 0);
                    if ((v234 & flags) == 1)
                    {
                      uint64_t v218 = *(const void **)DerivedStorage;
                      valuePtr.unsigned int value = v240;
                      CMTime lhs = rhs;
                      valuePtr.CMTimeScale timescale = timescale;
                      valuePtr.CMTimeFlags flags = flags;
                      valuePtr.CMTimeEpoch epoch = epoch;
                      uint64_t v219 = fpfs_SetAlternateWithContext(v218, a1, v235, v217);
                      BOOL v220 = v223;
                      if (!v219) {
                        BOOL v220 = 0;
                      }
                      if (v219 == -12644)
                      {
                        if (v227 && *(unsigned char *)(v233 + 458) && !v220) {
                          goto LABEL_281;
                        }
                        goto LABEL_412;
                      }
                      if (v220) {
                        goto LABEL_412;
                      }
                      uint64_t v23 = v219;
                      if (!v219)
                      {
LABEL_327:
                        lhs.unsigned int value = 0;
                        uint64_t v175 = CMBaseObjectGetDerivedStorage();
                        if (v175)
                        {
                          CFAllocatorRef v176 = (uint64_t *)v175;
                          uint64_t v177 = *(void *)(v175 + 96);
                          if (!v177) {
                            goto LABEL_341;
                          }
                          uint64_t v178 = FigGetAllocatorForMedia();
                          uint64_t v179 = *(void *)(CMBaseObjectGetVTable() + 8);
                          uint64_t v180 = v179 ? v179 : 0;
                          uint64_t v187 = *(unsigned int (**)(uint64_t, __CFString *, uint64_t, CMTime *))(v180 + 48);
                          if (!v187
                            || v187(v177, @"AfmfpbProperty_CandidateAlternatesForAdaptiveBitrateSwitching", v178, &lhs))
                          {
                            goto LABEL_341;
                          }
                          if (lhs.value)
                          {
                            if (CFArrayGetCount((CFArrayRef)lhs.value) >= 1)
                            {
                              CFArrayRef v189 = (const __CFArray *)lhs.value;
                              if (lhs.value
                                && (CFIndex v190 = CFArrayGetCount((CFArrayRef)lhs.value), v191 = v190 - 1, v190 >= 1))
                              {
                                CFIndex v192 = 0;
                                do
                                {
                                  uint64_t v193 = CFArrayGetValueAtIndex(v189, v192);
                                  double RankingScore = FigAlternateGetRankingScore((uint64_t)v193);
                                  BOOL v195 = RankingScore == -1.0;
                                }
                                while (RankingScore != -1.0 && v191 != v192++);
                              }
                              else
                              {
                                BOOL v195 = 0;
                              }
                              CFIndex v201 = 0;
                              CFIndex v202 = 0;
                              int v203 = 0;
                              double v204 = 0.0;
                              while (1)
                              {
                                CMTimeValue v205 = lhs.value;
                                if (lhs.value) {
                                  CMTimeValue v205 = CFArrayGetCount((CFArrayRef)lhs.value);
                                }
                                if (v201 >= v205) {
                                  break;
                                }
                                CFAllocatorRef v206 = CFArrayGetValueAtIndex((CFArrayRef)lhs.value, v201);
                                if (v195)
                                {
                                  int v207 = FigAlternateGetPeakBitRate((uint64_t)v206);
                                  if (v207 > v203)
                                  {
                                    CFIndex v202 = v201;
                                    int v203 = v207;
                                  }
                                }
                                else
                                {
                                  double v208 = FigAlternateGetRankingScore((uint64_t)v206);
                                  if (v208 > v204)
                                  {
                                    CFIndex v202 = v201;
                                    double v204 = v208;
                                  }
                                }
                                ++v201;
                              }
                              if (dword_1E9350BB0)
                              {
                                LODWORD(rhs.value) = 0;
                                LOBYTE(v237.value) = 0;
                                uint64_t v209 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                                unsigned int v210 = rhs.value;
                                if (os_log_type_enabled(v209, v237.value)) {
                                  unsigned int v211 = v210;
                                }
                                else {
                                  unsigned int v211 = v210 & 0xFFFFFFFE;
                                }
                                if (v211)
                                {
                                  uint64_t v212 = *v176;
                                  if (v212) {
                                    uint64_t v213 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
                                  }
                                  else {
                                    uint64_t v213 = "";
                                  }
                                  if (a1) {
                                    CFArrayRef v214 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
                                  }
                                  else {
                                    CFArrayRef v214 = "";
                                  }
                                  if (v195) {
                                    uint64_t v215 = "peak bitrate";
                                  }
                                  else {
                                    uint64_t v215 = "score";
                                  }
                                  uint64_t v216 = CFArrayGetValueAtIndex((CFArrayRef)lhs.value, v202);
                                  LODWORD(valuePtr.value) = 136316674;
                                  *(CMTimeValue *)((char *)&valuePtr.value + 4) = (CMTimeValue)"fpfsi_logHighestEligibleAlternate";
                                  LOWORD(valuePtr.flags) = 2048;
                                  *(void *)((char *)&valuePtr.flags + 2) = v212;
                                  HIWORD(valuePtr.epoch) = 2082;
                                  CFTypeRef v243 = v213;
                                  __int16 v244 = 2048;
                                  CFArrayRef v245 = a1;
                                  __int16 v246 = 2082;
                                  CMTimeFlags v247 = v214;
                                  __int16 v248 = 2080;
                                  *(void *)CFTypeRef v249 = v215;
                                  *(_WORD *)&v249[8] = 2112;
                                  __int16 v250 = v216;
                                  _os_log_send_and_compose_impl();
                                }
                                fig_log_call_emit_and_clean_up_after_send_and_compose();
                              }
                            }
LABEL_341:
                            if (lhs.value) {
                              CFRelease((CFTypeRef)lhs.value);
                            }
                          }
                        }
                        fpfsi_SetupSkipBitrateRangeFilter((uint64_t)a1);
                        CFArrayRef MutableCopy = v232;
                        BOOL v142 = v228;
LABEL_344:
                        if (!v23)
                        {
                          if (v142) {
                            fpfs_stopResetDisturbReprepareAndResume(*(const void **)DerivedStorage, a1, 1);
                          }
                          if (*(double *)(DerivedStorage + 2472) > 0.0) {
                            fpfsi_SetupIFramePrefetch((uint64_t)a1);
                          }
LABEL_349:
                          uint64_t v23 = 0;
                        }
LABEL_350:
                        if (!MutableCopy) {
                          goto LABEL_352;
                        }
                        goto LABEL_351;
                      }
                    }
                    else
                    {
LABEL_412:
                      int v222 = *(const void **)DerivedStorage;
                      valuePtr.unsigned int value = v240;
                      CMTime lhs = rhs;
                      valuePtr.CMTimeScale timescale = timescale;
                      valuePtr.CMTimeFlags flags = flags;
                      valuePtr.CMTimeEpoch epoch = epoch;
                      uint64_t v23 = 0;
                      if (!fpfs_SetAlternateWithContext(v222, a1, v235, SwitchOptions)) {
                        goto LABEL_327;
                      }
                    }
LABEL_282:
                    CFTypeRef v141 = *(const void **)(DerivedStorage + 96);
                    if (v141) {
                      FigAlternatePlaybackBitrateMonitorRejectSwitch(v141, *(const void **)(DerivedStorage + 1704));
                    }
                    BOOL v142 = 0;
                    CFArrayRef MutableCopy = v232;
                    goto LABEL_344;
                  }
                }
                else if (v81 == 5)
                {
                  goto LABEL_192;
                }
              }
              uint64_t v82 = 0;
              uint64_t v83 = 1000;
              do
              {
                if ((((*(_DWORD *)(v78 + 1096) & 3u) >> v82) & 1) != 0 && !*(void *)(v78 + v83))
                {
                  if (!dword_1E9350BB0) {
                    goto LABEL_280;
                  }
                  LODWORD(lhs.value) = 0;
                  LOBYTE(rhs.value) = 0;
                  uint64_t v121 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  unsigned int v122 = lhs.value;
                  if (os_log_type_enabled(v121, rhs.value)) {
                    unsigned int v123 = v122;
                  }
                  else {
                    unsigned int v123 = v122 & 0xFFFFFFFE;
                  }
                  if (v123)
                  {
                    uint64_t v124 = *(void *)v78;
                    if (*(void *)v78) {
                      uint64_t v125 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
                    }
                    else {
                      uint64_t v125 = "";
                    }
                    if (a1) {
                      CFTypeRef v136 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
                    }
                    else {
                      CFTypeRef v136 = "";
                    }
                    LODWORD(valuePtr.value) = 136316418;
                    *(CMTimeValue *)((char *)&valuePtr.value + 4) = (CMTimeValue)"fpfsi_OkayToSwitch";
                    LOWORD(valuePtr.flags) = 2048;
                    *(void *)((char *)&valuePtr.flags + 2) = v124;
                    HIWORD(valuePtr.epoch) = 2082;
                    CFTypeRef v243 = v125;
                    __int16 v244 = 2048;
                    CFArrayRef v245 = a1;
                    __int16 v246 = 2082;
                    CMTimeFlags v247 = v136;
                    __int16 v248 = 1024;
                    *(_DWORD *)CFTypeRef v249 = v82;
                    _os_log_send_and_compose_impl();
                  }
                  goto LABEL_279;
                }
                ++v82;
                v83 += 16;
              }
              while (v82 != 3);
              *(_OWORD *)CMTime time1 = *v58;
              *(void *)&time1[16] = v74;
              fpfs_GetItemBufferedDuration(a1, time1, 0, 0);
              if ((time1[12] & 1) == 0) {
                goto LABEL_280;
              }
              CMTime valuePtr = *(CMTime *)time1;
              CMTime lhs = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
              if (CMTimeCompare(&valuePtr, &lhs) <= 0) {
                goto LABEL_280;
              }
              if (*(void *)(v78 + 1760))
              {
                if (!dword_1E9350BB0) {
                  goto LABEL_280;
                }
                LODWORD(lhs.value) = 0;
                LOBYTE(rhs.value) = 0;
                uint64_t v84 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                unsigned int v85 = lhs.value;
                if (os_log_type_enabled(v84, rhs.value)) {
                  unsigned int v86 = v85;
                }
                else {
                  unsigned int v86 = v85 & 0xFFFFFFFE;
                }
                if (!v86) {
                  goto LABEL_279;
                }
                uint64_t v87 = *(void *)v78;
                if (*(void *)v78) {
                  uint64_t v88 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
                }
                else {
                  uint64_t v88 = "";
                }
                if (!a1)
                {
                  uint64_t v126 = "";
                  goto LABEL_277;
                }
              }
              else if (*(void *)(v78 + 1768))
              {
                if (!dword_1E9350BB0) {
                  goto LABEL_280;
                }
                LODWORD(lhs.value) = 0;
                LOBYTE(rhs.value) = 0;
                CFArrayRef v130 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                unsigned int v131 = lhs.value;
                if (os_log_type_enabled(v130, rhs.value)) {
                  unsigned int v132 = v131;
                }
                else {
                  unsigned int v132 = v131 & 0xFFFFFFFE;
                }
                if (!v132)
                {
LABEL_279:
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                  CFAllocatorRef v58 = (long long *)MEMORY[0x1E4F1F9F8];
                  goto LABEL_280;
                }
                uint64_t v87 = *(void *)v78;
                if (*(void *)v78) {
                  uint64_t v88 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
                }
                else {
                  uint64_t v88 = "";
                }
                if (!a1)
                {
                  uint64_t v126 = "";
                  goto LABEL_277;
                }
              }
              else
              {
                if (*(unsigned char *)(v78 + 2880) != 1) {
                  goto LABEL_285;
                }
                if (!dword_1E9350BB0) {
                  goto LABEL_280;
                }
                LODWORD(lhs.value) = 0;
                LOBYTE(rhs.value) = 0;
                long long v138 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                unsigned int v139 = lhs.value;
                if (os_log_type_enabled(v138, rhs.value)) {
                  unsigned int v140 = v139;
                }
                else {
                  unsigned int v140 = v139 & 0xFFFFFFFE;
                }
                if (!v140) {
                  goto LABEL_279;
                }
                uint64_t v87 = *(void *)v78;
                if (*(void *)v78) {
                  uint64_t v88 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
                }
                else {
                  uint64_t v88 = "";
                }
                if (!a1)
                {
                  uint64_t v126 = "";
                  goto LABEL_277;
                }
              }
              goto LABEL_275;
            }
            if (fpfsi_TrialSwitchDownInProgress(v78))
            {
              if (!dword_1E9350BB0) {
                goto LABEL_280;
              }
              LODWORD(lhs.value) = 0;
              LOBYTE(rhs.value) = 0;
              uint64_t v95 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              unsigned int v96 = lhs.value;
              if (os_log_type_enabled(v95, rhs.value)) {
                unsigned int v97 = v96;
              }
              else {
                unsigned int v97 = v96 & 0xFFFFFFFE;
              }
              if (!v97) {
                goto LABEL_279;
              }
              uint64_t v87 = *(void *)v78;
              if (*(void *)v78) {
                uint64_t v88 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
              }
              else {
                uint64_t v88 = "";
              }
              if (!a1)
              {
                uint64_t v126 = "";
LABEL_277:
                LODWORD(valuePtr.value) = 136316162;
                *(CMTimeValue *)((char *)&valuePtr.value + 4) = (CMTimeValue)"fpfsi_OkayToSwitch";
                LOWORD(valuePtr.flags) = 2048;
                *(void *)((char *)&valuePtr.flags + 2) = v87;
                HIWORD(valuePtr.epoch) = 2082;
                CFTypeRef v243 = v88;
                __int16 v244 = 2048;
                CFArrayRef v245 = a1;
                __int16 v246 = 2082;
                CMTimeFlags v247 = v126;
                goto LABEL_278;
              }
            }
            else if (*(unsigned char *)(v78 + 2880) == 1)
            {
              if (!dword_1E9350BB0) {
                goto LABEL_280;
              }
              LODWORD(lhs.value) = 0;
              LOBYTE(rhs.value) = 0;
              uint64_t v104 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              unsigned int v105 = lhs.value;
              if (os_log_type_enabled(v104, rhs.value)) {
                unsigned int v106 = v105;
              }
              else {
                unsigned int v106 = v105 & 0xFFFFFFFE;
              }
              if (!v106) {
                goto LABEL_279;
              }
              uint64_t v87 = *(void *)v78;
              if (*(void *)v78) {
                uint64_t v88 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
              }
              else {
                uint64_t v88 = "";
              }
              if (!a1)
              {
                uint64_t v126 = "";
                goto LABEL_277;
              }
            }
            else
            {
              if (!*(unsigned char *)(v78 + 470)) {
                goto LABEL_285;
              }
              if (!dword_1E9350BB0) {
                goto LABEL_280;
              }
              LODWORD(lhs.value) = 0;
              LOBYTE(rhs.value) = 0;
              uint64_t v113 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              unsigned int v114 = lhs.value;
              if (os_log_type_enabled(v113, rhs.value)) {
                unsigned int v115 = v114;
              }
              else {
                unsigned int v115 = v114 & 0xFFFFFFFE;
              }
              if (!v115) {
                goto LABEL_279;
              }
              uint64_t v87 = *(void *)v78;
              if (*(void *)v78) {
                uint64_t v88 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
              }
              else {
                uint64_t v88 = "";
              }
              if (!a1)
              {
                uint64_t v126 = "";
                goto LABEL_277;
              }
            }
LABEL_275:
            uint64_t v126 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
            goto LABEL_277;
          }
          if (!dword_1E9350BB0) {
            goto LABEL_285;
          }
          LODWORD(lhs.value) = 0;
          LOBYTE(rhs.value) = 0;
          uint64_t v89 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v90 = lhs.value;
          if (os_log_type_enabled(v89, rhs.value)) {
            unsigned int v91 = v90;
          }
          else {
            unsigned int v91 = v90 & 0xFFFFFFFE;
          }
          if (!v91)
          {
LABEL_168:
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            CFAllocatorRef v58 = (long long *)MEMORY[0x1E4F1F9F8];
            goto LABEL_285;
          }
          uint64_t v92 = *(void *)v78;
          if (*(void *)v78)
          {
            uint64_t v93 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
            if (a1)
            {
LABEL_148:
              uint64_t v94 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
LABEL_167:
              uint64_t v103 = *(void *)(v78 + 1704);
              LODWORD(valuePtr.value) = 136316418;
              *(CMTimeValue *)((char *)&valuePtr.value + 4) = (CMTimeValue)"fpfsi_OkayToSwitch";
              LOWORD(valuePtr.flags) = 2048;
              *(void *)((char *)&valuePtr.flags + 2) = v92;
              HIWORD(valuePtr.epoch) = 2082;
              CFTypeRef v243 = v93;
              __int16 v244 = 2048;
              CFArrayRef v245 = a1;
              __int16 v246 = 2082;
              CMTimeFlags v247 = v94;
              __int16 v248 = 2112;
              *(void *)CFTypeRef v249 = v103;
              _os_log_send_and_compose_impl();
              goto LABEL_168;
            }
          }
          else
          {
            uint64_t v93 = "";
            if (a1) {
              goto LABEL_148;
            }
          }
          uint64_t v94 = "";
          goto LABEL_167;
        }
        if (v15) {
          char v22 = v16;
        }
        else {
          char v22 = 1;
        }
        if (v22) {
          goto LABEL_32;
        }
        uint64_t updated = fpfs_CancelTrialSwitch((uint64_t)a1);
        if (!updated) {
          goto LABEL_32;
        }
LABEL_27:
        uint64_t v23 = updated;
        uint64_t v21 = 0;
        if (!MutableCopy) {
          goto LABEL_352;
        }
        goto LABEL_351;
      }
    }
    else if (v15)
    {
      BOOL v16 = FigCFArrayContainsValue() != 0;
      goto LABEL_15;
    }
    BOOL v16 = 0;
    goto LABEL_15;
  }
  if (dword_1E9350BB0)
  {
    LODWORD(lhs.value) = 0;
    LOBYTE(rhs.value) = 0;
    long long v137 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v137, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return 0;
}

void fpfsi_updateNetworkCostMonitorMaximumMediaBitrate()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)(DerivedStorage + 2256))
  {
    uint64_t v1 = DerivedStorage;
    int valuePtr = 0;
    CFNumberRef number = 0;
    uint64_t v2 = *(void *)(CMBaseObjectGetDerivedStorage() + 96);
    if (v2)
    {
      uint64_t v3 = *MEMORY[0x1E4F1CF80];
      uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v4) {
        uint64_t v5 = v4;
      }
      else {
        uint64_t v5 = 0;
      }
      CFDictionaryRef v6 = *(unsigned int (**)(uint64_t, __CFString *, uint64_t, CFNumberRef *))(v5 + 48);
      if (v6 && !v6(v2, @"AfmfpbProperty_HighestValidPeakBitrate", v3, &number))
      {
        if (number) {
          CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr);
        }
        else {
          FigSignalErrorAt();
        }
      }
      if (number) {
        CFRelease(number);
      }
    }
    uint64_t SInt32 = FigCFNumberCreateSInt32();
    if (SInt32)
    {
      uint64_t v8 = (const void *)SInt32;
      uint64_t v9 = *(void *)(v1 + 2256);
      uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v10) {
        uint64_t v11 = v10;
      }
      else {
        uint64_t v11 = 0;
      }
      uint64_t v12 = *(void (**)(uint64_t, uint64_t, const void *))(v11 + 56);
      if (v12) {
        v12(v9, 0x1EE57E4B8, v8);
      }
      CFRelease(v8);
    }
  }
}

uint64_t fpfsi_setHasDiscoveredVideoAndNotify(const void *a1, const void *a2)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)(result + 779))
  {
    uint64_t v5 = result;
    uint64_t result = fpfs_EnqueueNotification(a1, @"HasDiscoveredVideo", a2, 0);
    *(unsigned char *)(v5 + 779) = 1;
  }
  return result;
}

const void **fpfsi_setStereoAudioSpatializationByDefaultForVideoItem(const void *a1)
{
  uint64_t result = (const void **)CMBaseObjectGetDerivedStorage();
  if (!*((unsigned char *)result + 894))
  {
    uint64_t v3 = result;
    if (!*((unsigned char *)result + 895))
    {
      if (*((unsigned char *)result + 779))
      {
        *((unsigned char *)result + 894) = 1;
        if (dword_1E9350BB0)
        {
          os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        return (const void **)fpfs_EnqueueNotification(*v3, @"AllowedSpatializationChanged", a1, 0);
      }
    }
  }
  return result;
}

uint64_t fpfsi_SetupAlternateSelectionBossWithPreferPlaybackFromCache(uint64_t a1)
{
  CFTypeRef v10 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  fpfsi_CopyCacheRefFromPump(a1, &v10);
  uint64_t v3 = *(void *)(DerivedStorage + 40);
  if (v3)
  {
    if (*(unsigned char *)(DerivedStorage + 3176))
    {
      uint64_t v4 = (uint64_t)v10;
      if (!v10) {
        return v4;
      }
      CFAllocatorRef AllocatorForMedia = (void *)FigGetAllocatorForMedia();
      uint64_t v6 = FigAlternateOfflinePlayableForMediaSelectionFilterCreate(AllocatorForMedia, v4, *(const __CFArray **)(DerivedStorage + 1792), 0, &cf);
      CFTypeRef v7 = cf;
      if (!v6)
      {
        uint64_t v4 = FigAlternateSelectionBossAddFilter(*(void *)(DerivedStorage + 40), cf);
        CFTypeRef v7 = cf;
        if (!cf) {
          goto LABEL_8;
        }
        goto LABEL_6;
      }
      uint64_t v4 = v6;
      if (cf) {
LABEL_6:
      }
        CFRelease(v7);
    }
    else
    {
      uint64_t v4 = FigAlternateSelectionBossRemoveFilter(v3, @"OfflinePlayable");
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
LABEL_8:
  if (v10) {
    CFRelease(v10);
  }
  return v4;
}

uint64_t fpfsi_ConfigureAlternateSelectionBossForScanningRole()
{
  cf[26] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = CMBaseObjectGetDerivedStorage();
  CFTypeRef v11 = 0;
  cf[0] = 0;
  CFTypeRef v10 = 0;
  uint64_t v2 = CMBaseObjectGetDerivedStorage();
  if (!*(void *)(v2 + 40) || !*(unsigned char *)(v2 + 48) || !*(unsigned char *)(v2 + 49)) {
    goto LABEL_15;
  }
  if (dword_1E9350BB0)
  {
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(_DWORD *)(v1 + 808) != 1)
  {
    uint64_t v5 = FigAlternateSelectionBossRemoveFilter(*(void *)(DerivedStorage + 40), @"IFramesOnly");
    if (!v5)
    {
      uint64_t v5 = FigAlternateSelectionBossRemoveFilter(*(void *)(DerivedStorage + 40), @"ResolutionClosestHeight");
      if (!v5) {
        uint64_t v5 = FigAlternateSelectionBossRemoveFilter(*(void *)(DerivedStorage + 40), @"LowestPeakBitRate");
      }
    }
    goto LABEL_19;
  }
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  uint64_t v5 = FigAlternateIFramesOnlyFilterCreate(AllocatorForMedia, cf);
  if (!v5)
  {
    uint64_t v5 = FigAlternateSelectionBossAddFilter(*(void *)(DerivedStorage + 40), cf[0]);
    if (!v5)
    {
      if (*(double *)(DerivedStorage + 2472) != 0.0 && *(double *)(DerivedStorage + 2464) != 0.0)
      {
        CFAllocatorRef v6 = (const __CFAllocator *)FigGetAllocatorForMedia();
        uint64_t v5 = FigAlternateResolutionClosestHeightFilterCreate(v6, &v11, *(double *)(DerivedStorage + 2464), *(double *)(DerivedStorage + 2472));
        if (!v5)
        {
          uint64_t v5 = FigAlternateSelectionBossAddFilter(*(void *)(DerivedStorage + 40), v11);
          if (!v5)
          {
            uint64_t v7 = FigGetAllocatorForMedia();
            uint64_t v5 = FigAlternateLowestPeakBitRateFilterCreate(v7, &v10);
            if (!v5) {
              uint64_t v5 = FigAlternateSelectionBossAddFilter(*(void *)(DerivedStorage + 40), v10);
            }
          }
        }
        goto LABEL_19;
      }
LABEL_15:
      uint64_t v8 = 0;
      goto LABEL_20;
    }
  }
LABEL_19:
  uint64_t v8 = v5;
LABEL_20:
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  if (v11) {
    CFRelease(v11);
  }
  if (v10) {
    CFRelease(v10);
  }
  return v8;
}

uint64_t fpfsi_ConfigureAlternateSelectionBossForSuppressAudioOnly()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  uint64_t v1 = *(void *)(DerivedStorage + 40);
  if (!v1) {
    return 0;
  }
  if (*(unsigned char *)(DerivedStorage + 558))
  {
    CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    uint64_t v3 = FigAlternateSuppressAudioOnlyFilterCreate(AllocatorForMedia, &cf);
    CFTypeRef v4 = cf;
    if (v3)
    {
      uint64_t v5 = v3;
      if (!cf) {
        return v5;
      }
    }
    else
    {
      uint64_t v5 = FigAlternateSelectionBossAddFilter(*(void *)(DerivedStorage + 40), cf);
      CFTypeRef v4 = cf;
      if (!cf) {
        return v5;
      }
    }
    CFRelease(v4);
    return v5;
  }

  return FigAlternateSelectionBossRemoveFilter(v1, @"SuppressAudioOnly");
}

uint64_t fpfsi_ConfigureAlternateSelectionBossForPlayRate(uint64_t a1, float a2)
{
  CMBaseObjectGetDerivedStorage();
  UInt8 v4 = a2 < 0.0 || a2 > 2.0;
  if (dword_1E9350BB0)
  {
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return fpfsi_CreateAndAddScanningModeFilterToBoss(a1, v4);
}

uint64_t fpfsi_ConfigurePlaybackMonitorForBandwidthCap(uint64_t a1, int a2)
{
  int valuePtr = a2;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_DWORD *)(DerivedStorage + 2384) = a2;
  if (!*(void *)(DerivedStorage + 40)) {
    return 0;
  }
  uint64_t v4 = DerivedStorage;
  CFNumberRef v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
  uint64_t v6 = fpfsi_setPlaybackRateMonitorProperty(v4, @"AfmfpbProperty_BandwidthCap", (uint64_t)v5);
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v7 = *(void *)(v4 + 2544);
  if (v7)
  {
    uint64_t v8 = valuePtr;
    uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v9) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
    CFTypeRef v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v10 + 56);
    if (v11) {
      v11(v7, 0x1EE582B78, 0x1EE5621F8, v8, 0);
    }
  }
  return v6;
}

uint64_t fpfsi_addHDResolutionCap()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  uint64_t v1 = FigAlternateResolutionCapFilterCreate((const __CFAllocator *)*MEMORY[0x1E4F1CF80], @"ResolutionCapFor4kBaton", 700, &cf, 1920.0, 1080.0);
  if (!v1) {
    uint64_t v1 = FigAlternateSelectionBossAddFilter(*(void *)(DerivedStorage + 40), cf);
  }
  if (cf) {
    CFRelease(cf);
  }
  return v1;
}

uint64_t fpfsi_SetupSupportedAudioFormatFilter(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  int v14 = 0;
  unsigned int IsDecodable = FigAudioCodecTypeIsDecodable();
  uint64_t v4 = FigAudioCodecTypeIsDecodable();
  uint64_t AtmosDecodePolicy = fpfsi_GetAtmosDecodePolicy(a1, &v14);
  uint64_t v6 = CMBaseObjectGetDerivedStorage();
  if (*(void *)(v6 + 536)) {
    BOOL v7 = *(unsigned char *)(v6 + 562) != 0;
  }
  else {
    BOOL v7 = 0;
  }
  CMBaseObjectGetDerivedStorage();
  CMBaseObjectGetDerivedStorage();
  uint64_t v8 = (int)FigStreamAlternateGetAudioMaximumDecodeChannelCount(0x6F707573u) > 2;
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  uint64_t v10 = FigAlternateSupportedAudioFormatFilterCreate(AllocatorForMedia, (AtmosDecodePolicy << 40) | (v8 << 48) | (v4 << 32) | ((unint64_t)IsDecodable << 24) | v7, &cf);
  if (v10 || (uint64_t v10 = FigAlternateSelectionBossAddFilter(*(void *)(DerivedStorage + 40), cf), v10))
  {
    uint64_t v12 = v10;
  }
  else
  {
    BOOL v11 = 1;
    fpfsi_RTCReportingUpdateATMOSMetricVar(DerivedStorage, (unsigned char *)(DerivedStorage + 2577), (unsigned char *)(DerivedStorage + 2573), BYTE2(v14), 1, 1);
    if (!(v14 | BYTE1(v14))) {
      BOOL v11 = HIBYTE(v14) != 0;
    }
    fpfsi_RTCReportingUpdateATMOSMetricVar(DerivedStorage, (unsigned char *)(DerivedStorage + 2578), (unsigned char *)(DerivedStorage + 2574), v11, 1, 1);
    uint64_t v12 = 0;
  }
  if (cf) {
    CFRelease(cf);
  }
  return v12;
}

uint64_t fpfsi_ConfigureAlternateSelectionBossForHighestAtmosFiltering()
{
  CFTypeRef cf = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(void *)(DerivedStorage + 40)) {
    return 0;
  }
  uint64_t v1 = DerivedStorage;
  if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 561) || !*(unsigned char *)(v1 + 564))
  {
    CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    uint64_t v3 = FigAlternateHighestAtmosBitrateFilterCreate(AllocatorForMedia, &cf);
    CFTypeRef v4 = cf;
    if (v3)
    {
      uint64_t v5 = v3;
      if (!cf) {
        return v5;
      }
    }
    else
    {
      uint64_t v5 = FigAlternateSelectionBossAddFilter(*(void *)(v1 + 40), cf);
      CFTypeRef v4 = cf;
      if (!cf) {
        return v5;
      }
    }
    CFRelease(v4);
    return v5;
  }
  uint64_t v7 = *(void *)(v1 + 40);

  return FigAlternateSelectionBossRemoveFilter(v7, @"HighestAtmosBitrateFilter");
}

uint64_t fpfsi_ConfigureAlternateSelectionBossPreferExclusiveAudioPassthroughFiltering()
{
  CFTypeRef cf = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(void *)(DerivedStorage + 40)) {
    return 0;
  }
  uint64_t v1 = DerivedStorage;
  uint64_t v2 = CMBaseObjectGetDerivedStorage();
  if (*(void *)(v2 + 536)) {
    BOOL v3 = *(unsigned char *)(v2 + 562) != 0;
  }
  else {
    BOOL v3 = 0;
  }
  CMBaseObjectGetDerivedStorage();
  CMBaseObjectGetDerivedStorage();
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  uint64_t v5 = FigAlternatePreferExclusiveAudioPassthroughFilterCreate(AllocatorForMedia, v3, &cf);
  CFTypeRef v6 = cf;
  if (v5)
  {
    uint64_t v7 = v5;
    if (!cf) {
      return v7;
    }
    goto LABEL_7;
  }
  uint64_t v7 = FigAlternateSelectionBossAddFilter(*(void *)(v1 + 40), cf);
  CFTypeRef v6 = cf;
  if (cf) {
LABEL_7:
  }
    CFRelease(v6);
  return v7;
}

uint64_t fpfsi_ConfigureAlternateSelectionBossForNeroSupportedVideoFormat(uint64_t a1, int a2)
{
  CFTypeRef cf = 0;
  if (a2)
  {
    CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    uint64_t v4 = FigAlternateNeroSupportedVideoFormatFilterCreate(AllocatorForMedia, &cf);
    CFTypeRef v5 = cf;
    if (v4)
    {
      uint64_t v6 = v4;
      if (!cf) {
        return v6;
      }
    }
    else
    {
      uint64_t v6 = FigAlternateSelectionBossAddFilter(*(void *)(a1 + 40), cf);
      CFTypeRef v5 = cf;
      if (!cf) {
        return v6;
      }
    }
    CFRelease(v5);
    return v6;
  }
  uint64_t v8 = *(void *)(a1 + 40);

  return FigAlternateSelectionBossRemoveFilter(v8, @"NeroSupportedVideoFormat");
}

uint64_t fpfsi_setUpVideoLayoutFilters(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = CMBaseObjectGetDerivedStorage();
  CFArrayRef v2 = 0;
  CFIndex v3 = 0;
  CFTypeRef v41 = 0;
  CFTypeRef v42 = 0;
  uint64_t v4 = *MEMORY[0x1E4F21E08];
  CMTagValue v5 = *(void *)(MEMORY[0x1E4F21E08] + 8);
  uint64_t v35 = v1;
  while (1)
  {
    CFArrayRef Count = *(const __CFArray **)(v1 + 432);
    if (Count) {
      CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
    }
    if (v3 >= (uint64_t)Count) {
      break;
    }
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v1 + 432), v3);
    CFArrayRef theArray = 0;
    uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
    uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v9) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
    BOOL v11 = *(uint64_t (**)(const void *, uint64_t, CFArrayRef *))(v10 + 48);
    if (!v11)
    {
      uint64_t v23 = 0;
      uint64_t v32 = 4294954514;
      goto LABEL_63;
    }
    uint64_t v12 = v11(ValueAtIndex, AllocatorForMedia, &theArray);
    if (v12) {
      goto LABEL_62;
    }
    if (theArray)
    {
      if (CFArrayGetCount(theArray))
      {
        CFIndex v36 = v3;
        CFArrayRef v37 = v2;
        CFArrayRef v13 = theArray;
        if (theArray) {
          CFIndex v39 = CFArrayGetCount(theArray);
        }
        else {
          CFIndex v39 = 0;
        }
        CFAllocatorRef v14 = (const __CFAllocator *)FigGetAllocatorForMedia();
        CFMutableDictionaryRef Mutable = CFArrayCreateMutable(v14, 0, MEMORY[0x1E4F1D510]);
        if (Mutable && v39 >= 1)
        {
          CFIndex v15 = 0;
          while (1)
          {
            CFArrayRef v16 = v13;
            uint64_t v17 = CFArrayGetValueAtIndex(v13, v15);
            CFTypeRef cf = 0;
            CFIndex CountOfDataChannels = FigDataChannelGroupGetCountOfDataChannels((uint64_t)v17);
            if (CountOfDataChannels >= 1) {
              break;
            }
LABEL_25:
            CFTypeRef v22 = cf;
            CFArrayRef v13 = v16;
            if (cf) {
              goto LABEL_31;
            }
LABEL_33:
            if (++v15 == v39) {
              goto LABEL_34;
            }
          }
          CFIndex v19 = CountOfDataChannels;
          CFIndex v20 = 0;
          while (1)
          {
            DataChannelByIndex = (const OpaqueCMTagCollection *)FigDataChannelGroupGetDataChannelByIndex((uint64_t)v17, v20);
            *(void *)&v44.category = 0x40000005706C7972;
            v44.unsigned int value = 1634630006;
            if (CMTagCollectionContainsTag(DataChannelByIndex, v44))
            {
              FPSupport_CreateDefaultTagCollectionForVideo((CMTagCollectionRef *)&cf);
              goto LABEL_25;
            }
            *(void *)&v45.category = v4;
            v45.unsigned int value = v5;
            if (CMTagCollectionContainsTag(DataChannelByIndex, v45)) {
              break;
            }
            if (v19 == ++v20) {
              goto LABEL_25;
            }
          }
          if (DataChannelByIndex) {
            CFTypeRef v22 = CFRetain(DataChannelByIndex);
          }
          else {
            CFTypeRef v22 = 0;
          }
          CFArrayRef v13 = v16;
          CFTypeRef cf = v22;
          if (!v22) {
            goto LABEL_33;
          }
LABEL_31:
          CFArrayAppendValue(Mutable, v22);
          if (cf) {
            CFRelease(cf);
          }
          goto LABEL_33;
        }
LABEL_34:
        uint64_t v23 = Mutable;
        if (Mutable)
        {
          CFArrayGetCount(Mutable);
          CFIndex v3 = v36;
          CFArrayRef v2 = v37;
          uint64_t v1 = v35;
          if (v37)
          {
            if (CFArrayGetCount(Mutable) && !FigCFEqual())
            {
              uint64_t v32 = FigSignalErrorAt();
              goto LABEL_63;
            }
          }
          else
          {
            CFArrayRef v2 = (const __CFArray *)CFRetain(Mutable);
          }
          CFRelease(Mutable);
        }
        else
        {
          CFIndex v3 = v36;
          CFArrayRef v2 = v37;
          uint64_t v1 = v35;
        }
      }
      if (theArray) {
        CFRelease(theArray);
      }
    }
    ++v3;
  }
  FigAlternateSelectionBossRemoveFilter(*(void *)(DerivedStorage + 40), @"VideoLayoutPinning");
  if (v2 && CFArrayGetCount(v2))
  {
    CFAllocatorRef v24 = (const __CFAllocator *)FigGetAllocatorForMedia();
    uint64_t v25 = FigAlternateVideoLayoutCapabilityFilterCreate(v24, v2, &v42);
    if (v25) {
      goto LABEL_74;
    }
    uint64_t v25 = FigAlternateSelectionBossAddFilter(*(void *)(DerivedStorage + 40), v42);
    if (v25) {
      goto LABEL_74;
    }
    goto LABEL_60;
  }
  CFTypeRef cf = 0;
  CFAllocatorRef v26 = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFArrayRef v2 = CFArrayCreateMutable(v26, 0, MEMORY[0x1E4F1D510]);
  if (!v2)
  {
LABEL_78:
    uint64_t v32 = 0;
    uint64_t v23 = 0;
    goto LABEL_65;
  }
  int DefaultTagCollectionForVideo = FPSupport_CreateDefaultTagCollectionForVideo((CMTagCollectionRef *)&cf);
  CFTypeRef v28 = cf;
  if (DefaultTagCollectionForVideo)
  {
    CFArrayRef v29 = v2;
    CFArrayRef v2 = 0;
    if (!cf)
    {
LABEL_56:
      if (!v29) {
        goto LABEL_58;
      }
      goto LABEL_57;
    }
LABEL_55:
    CFRelease(v28);
    goto LABEL_56;
  }
  if (cf)
  {
    CFArrayAppendValue(v2, cf);
    CFArrayRef v29 = 0;
    CFTypeRef v28 = cf;
    if (!cf) {
      goto LABEL_56;
    }
    goto LABEL_55;
  }
  CFArrayRef v29 = v2;
  CFArrayRef v2 = 0;
LABEL_57:
  CFRelease(v29);
LABEL_58:
  if (!v2) {
    goto LABEL_78;
  }
  FigAlternateSelectionBossRemoveFilter(*(void *)(DerivedStorage + 40), @"VideoLayoutCapability");
  FigAlternateSelectionBossRemoveFilter(*(void *)(DerivedStorage + 40), @"VideoLayoutPreference");
LABEL_60:
  uint64_t v30 = (void *)FigGetAllocatorForMedia();
  uint64_t v25 = FigAlternateVideoLayoutPreferenceFilterCreate(v30, v2, &v41);
  if (v25)
  {
LABEL_74:
    uint64_t v32 = v25;
    uint64_t v23 = 0;
LABEL_64:
    fpfs_StopPlayingItemWithOSStatus(v1, a1, v32);
    goto LABEL_65;
  }
  uint64_t v12 = FigAlternateSelectionBossAddFilter(*(void *)(DerivedStorage + 40), v41);
LABEL_62:
  uint64_t v32 = v12;
  uint64_t v23 = 0;
LABEL_63:
  if (v32) {
    goto LABEL_64;
  }
LABEL_65:
  if (v42) {
    CFRelease(v42);
  }
  if (v41) {
    CFRelease(v41);
  }
  if (v2) {
    CFRelease(v2);
  }
  if (v23) {
    CFRelease(v23);
  }
  return v32;
}

BOOL fpfsi_GetAtmosDecodePolicy(uint64_t a1, unsigned char *a2)
{
  CMBaseObjectGetDerivedStorage();
  if (!*a2) {
    *a2 = fpfsi_IsSpatializationAllowed(a1);
  }
  if (!a2[1])
  {
    uint64_t v4 = *(void *)(CMBaseObjectGetDerivedStorage() + 504);
    if (v4)
    {
      CFTypeRef cf = 0;
      uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
      uint64_t CMBaseObject = FigBufferedAirPlayOutputGetCMBaseObject(v4);
      uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v7) {
        uint64_t v8 = v7;
      }
      else {
        uint64_t v8 = 0;
      }
      uint64_t v10 = *(void (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v8 + 48);
      if (v10)
      {
        v10(CMBaseObject, @"AtmosIsSupported", AllocatorForMedia, &cf);
        BOOL v9 = cf == (CFTypeRef)*MEMORY[0x1E4F1CFD0];
        if (cf) {
          CFRelease(cf);
        }
      }
      else
      {
        BOOL v9 = *MEMORY[0x1E4F1CFD0] == 0;
      }
    }
    else
    {
      BOOL v9 = 0;
    }
    a2[1] = v9;
  }
  if (!a2[2]) {
    a2[2] = *(unsigned char *)(CMBaseObjectGetDerivedStorage() + 561);
  }
  int v11 = a2[3];
  if (!a2[3])
  {
    int v15 = 0;
    uint64_t v12 = *(void *)(CMBaseObjectGetDerivedStorage() + 536);
    if (v12)
    {
      if (FPSupport_GetAudioSessionOutputChannelCount(v12, &v15)) {
        BOOL v13 = 0;
      }
      else {
        BOOL v13 = v15 == 16;
      }
      int v11 = v13;
    }
    else
    {
      int v11 = 0;
    }
    a2[3] = v11;
  }
  return *a2 || a2[1] || (a2[2] | v11) != 0;
}

uint64_t fpfsi_updateDisplayListForHDCPMonitor()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = CMBaseObjectGetDerivedStorage();
  if (!*(void *)(DerivedStorage + 56)) {
    return 0;
  }
  uint64_t v2 = v1;
  CFArrayRef v3 = *(const __CFArray **)(v1 + 672);
  if (!v3
    || CFArrayGetCount(v3) < 1
    || (CFAllocatorRef v4 = (const __CFAllocator *)FigGetAllocatorForMedia(),
        (CFMutableArrayRef MutableCopy = CFArrayCreateMutableCopy(v4, 0, *(CFArrayRef *)(v2 + 672))) == 0))
  {
    CFStringRef v6 = FPSupport_CopyMainDisplayCAName();
    if (v6)
    {
      CFStringRef v7 = v6;
      CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
      CFMutableDictionaryRef Mutable = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D510]);
      CFMutableArrayRef MutableCopy = Mutable;
      if (Mutable) {
        CFArrayAppendValue(Mutable, v7);
      }
      CFRelease(v7);
    }
    else
    {
      CFMutableArrayRef MutableCopy = 0;
    }
  }
  uint64_t v10 = *(void *)(DerivedStorage + 56);
  uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  BOOL v13 = *(uint64_t (**)(uint64_t, __CFString *, CFMutableArrayRef))(v12 + 56);
  if (v13)
  {
    uint64_t v14 = v13(v10, @"AlternateFilterMonitorProperty_DisplayList", MutableCopy);
    if (!MutableCopy) {
      return v14;
    }
    goto LABEL_17;
  }
  uint64_t v14 = 4294954514;
  if (MutableCopy) {
LABEL_17:
  }
    CFRelease(MutableCopy);
  return v14;
}

uint64_t fpfsi_updateSupportedFramerateBucketCapMonitorFromFVT()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = CMBaseObjectGetDerivedStorage();
  double valuePtr = 0.0;
  CMTime v24 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA10];
  uint64_t v2 = CMBaseObjectGetDerivedStorage();
  if (!*(void *)(v2 + 40) || !*(unsigned char *)(v2 + 48) || !*(unsigned char *)(v2 + 49)) {
    return 0;
  }
  CFIndex v3 = 0;
  uint64_t v4 = 0;
  memset(&v25, 0, sizeof(v25));
  double v5 = 0.0;
  CFStringRef v6 = (CMTime *)MEMORY[0x1E4F1FA48];
  while (1)
  {
    CFArrayRef Count = *(const __CFArray **)(v1 + 432);
    if (Count) {
      CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
    }
    if (v3 >= (uint64_t)Count) {
      break;
    }
    CFTypeRef cf = 0;
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v1 + 432), v3);
    uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
    uint64_t CMBaseObject = FigVideoTargetGetCMBaseObject(ValueAtIndex);
    uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v11) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    BOOL v13 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v12 + 48);
    if (v13)
    {
      uint64_t v4 = v13(CMBaseObject, @"RefreshRate", AllocatorForMedia, &cf);
      CFTypeRef v14 = cf;
      if (v4 || !cf) {
        goto LABEL_19;
      }
      FigCFDictionaryGetCMTimeIfPresent();
      CMTime time1 = v25;
      CMTime v21 = *v6;
      if (CMTimeCompare(&time1, &v21) < 1)
      {
        uint64_t v4 = 0;
        goto LABEL_21;
      }
      CMTime time1 = v25;
      CMTime v21 = v24;
      if (CMTimeCompare(&time1, &v21) < 0)
      {
        CMTime v24 = v25;
        CMTime time1 = v25;
        uint64_t v4 = 0;
        double v5 = 1.0 / CMTimeGetSeconds(&time1);
        double valuePtr = v5;
      }
      else
      {
        uint64_t v4 = 0;
      }
    }
    else
    {
      uint64_t v4 = 4294954514;
    }
    CFTypeRef v14 = cf;
LABEL_19:
    if (v14) {
      CFRelease(v14);
    }
LABEL_21:
    ++v3;
  }
  if (v5 != 0.0)
  {
    CFNumberRef v15 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberDoubleType, &valuePtr);
    uint64_t v16 = *(void *)(DerivedStorage + 72);
    uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v17) {
      uint64_t v18 = v17;
    }
    else {
      uint64_t v18 = 0;
    }
    CFIndex v19 = *(uint64_t (**)(uint64_t, __CFString *, CFNumberRef))(v18 + 56);
    if (v19)
    {
      uint64_t v4 = v19(v16, @"AlternateFilterMonitorProperty_PreferredFrameRate", v15);
      if (!v15) {
        return v4;
      }
LABEL_33:
      CFRelease(v15);
    }
    else
    {
      uint64_t v4 = 4294954514;
      if (v15) {
        goto LABEL_33;
      }
    }
  }
  return v4;
}

uint64_t fpfsi_setOverrideDisplaysSupportedVideoRange()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = CMBaseObjectGetDerivedStorage();
  CFNumberRef v2 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, (const void *)(v1 + 680));
  uint64_t v3 = *(void *)(DerivedStorage + 80);
  if (v3)
  {
    uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v4) {
      uint64_t v5 = v4;
    }
    else {
      uint64_t v5 = 0;
    }
    CFStringRef v6 = *(uint64_t (**)(uint64_t, __CFString *, CFNumberRef))(v5 + 56);
    if (!v6) {
      goto LABEL_15;
    }
    uint64_t v7 = v6(v3, @"AlternateFilterMonitorProperty_OverrideVideoRange", v2);
    if (v7)
    {
LABEL_14:
      uint64_t v11 = v7;
      goto LABEL_16;
    }
  }
  uint64_t v8 = *(void *)(DerivedStorage + 64);
  if (!v8)
  {
    uint64_t v11 = 0;
    goto LABEL_16;
  }
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v12 = *(uint64_t (**)(uint64_t, __CFString *, CFNumberRef))(v10 + 56);
  if (v12)
  {
    uint64_t v7 = v12(v8, @"AlternateFilterMonitorProperty_OverrideVideoRange", v2);
    goto LABEL_14;
  }
LABEL_15:
  uint64_t v11 = 4294954514;
LABEL_16:
  if (v2) {
    CFRelease(v2);
  }
  return v11;
}

uint64_t fpfsi_setPlaybackMonitorAutoSwitchStreamQuality()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = CMBaseObjectGetDerivedStorage();
  uint64_t v2 = *(void *)(DerivedStorage + 96);
  if (!v2) {
    return 0;
  }
  if (*(unsigned char *)(v1 + 458)) {
    uint64_t v3 = (uint64_t *)MEMORY[0x1E4F1CFD0];
  }
  else {
    uint64_t v3 = (uint64_t *)MEMORY[0x1E4F1CFC8];
  }
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  CFStringRef v6 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v5 + 56);
  if (!v6) {
    return 4294954514;
  }
  uint64_t v7 = *v3;

  return v6(v2, @"AfmfpbProperty_SwitchesQualityGearAutomatically", v7);
}

uint64_t fpfsi_setAndPerformResourceConservation(const void *a1, int *a2)
{
  int v3 = *a2;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMBaseObjectGetDerivedStorage();
  if (*(void *)(DerivedStorage + 96))
  {
    uint64_t SInt32 = (const void *)FigCFNumberCreateSInt32();
    uint64_t v6 = *(void *)(DerivedStorage + 96);
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t v9 = *(void (**)(uint64_t, __CFString *, const void *))(v8 + 56);
    if (v9) {
      v9(v6, @"AfmfpbProperty_ResourceConservationLevelWhenPaused", SInt32);
    }
    fpfsi_performCurrentResourceConservationAction(a1, v3);
    if (SInt32) {
      CFRelease(SInt32);
    }
  }
  else
  {
    fpfsi_performCurrentResourceConservationAction(a1, v3);
  }
  return 0;
}

uint64_t FigAudioSessionSetMXSessionProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a1) {
    return 4294948075;
  }
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (!v6) {
    return 4294948075;
  }
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 56);
  if (!v7) {
    return 4294948071;
  }

  return v7(a1, a2, a3);
}

CFNumberRef fpfsi_GetCurrentDisplayVideoRangeFromMonitor()
{
  CFNumberRef number = 0;
  unsigned int valuePtr = 0;
  uint64_t v0 = *(void *)(CMBaseObjectGetDerivedStorage() + 80);
  if (!v0) {
    return 0;
  }
  uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 8);
  uint64_t v3 = v2 ? v2 : 0;
  uint64_t v4 = *(void (**)(uint64_t, __CFString *, uint64_t, CFNumberRef *))(v3 + 48);
  if (!v4) {
    return 0;
  }
  v4(v0, @"AlternateFilterMonitorProperty_CurrentDisplayVideoRange", AllocatorForMedia, &number);
  CFNumberRef result = number;
  if (number)
  {
    CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr);
    CFRelease(number);
    return (CFNumberRef)valuePtr;
  }
  return result;
}

uint64_t fpfs_RTCReportingSetDisplayVideoRange(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 2544);
  if (v2)
  {
    uint64_t VTable = CMBaseObjectGetVTable();
    uint64_t v6 = *(void *)(VTable + 16);
    CFNumberRef result = VTable + 16;
    uint64_t v5 = v6;
    uint64_t v7 = v6 ? v5 : 0;
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v7 + 48);
    if (v8)
    {
      return v8(v2, 0x1EE582B78, 0x1EE584C18, a2, 0);
    }
  }
  return result;
}

__CFString *fpfs_getVideoRangeStringFromFPSupportVideoRange(int a1)
{
  CFNumberRef result = @"Internal (HDR OK)";
  switch(a1)
  {
    case 0:
      goto LABEL_7;
    case 1:
      uint64_t v3 = kFigAlternateVideoRangeString_SDR;
      return *v3;
    case 2:
      uint64_t v3 = kFigAlternateVideoRangeString_HLG;
      return *v3;
    case 3:
      uint64_t v3 = kFigAlternateVideoRangeString_HDR10;
      return *v3;
    case 4:
      uint64_t v3 = kFigAlternateVideoRangeString_DoVi;
      return *v3;
    case 5:
      return result;
    default:
      os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_7:
      uint64_t v3 = kFigAlternateVideoRangeString_Unknown;
      return *v3;
  }
}

uint64_t GetSwitchOptions(uint64_t a1, int a2)
{
  uint64_t v2 = (a2 != 0) | (2 * (*(float *)(a1 + 848) == 0.0));
  if (*(unsigned char *)(a1 + 553))
  {
    uint64_t v4 = *(void *)(a1 + 1704);
    if (v4)
    {
      if ((uint64_t v5 = *(void *)(a1 + 96)) != 0
        && FigAlternatePlaybackBitrateMonitorIsAlternateStillValid(v5, v4)
        || FigCFArrayContainsValue())
      {
        uint64_t v6 = *(void *)(a1 + 1048);
        if (v6)
        {
          while (*(_DWORD *)(v6 + 152) != 6)
          {
            uint64_t v6 = *(void *)(v6 + 8);
            if (!v6) {
              return v2;
            }
          }
          return v2 | 4;
        }
      }
    }
  }
  return v2;
}

double fpfs_GetNextTimeToPlayIfEstablished@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  long long v8 = 0uLL;
  uint64_t v9 = 0;
  if (fpfsi_GetDuration(a1, &v8)
    || (BYTE12(v8) & 0x11) != 0x11
    || *(unsigned char *)(DerivedStorage + 592)
    || (*(unsigned char *)(DerivedStorage + 332) & 1) != 0)
  {
    return fpfs_GetNextTimeToPlay(DerivedStorage, 0, a2);
  }
  uint64_t v5 = MEMORY[0x1E4F1F9F8];
  long long v6 = *MEMORY[0x1E4F1F9F8];
  *(_OWORD *)a2 = *MEMORY[0x1E4F1F9F8];
  *(void *)(a2 + 16) = *(void *)(v5 + 16);
  return *(double *)&v6;
}

uint64_t fpfs_isAlternateValid(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(CMBaseObjectGetDerivedStorage() + 96);
  if (result)
  {
    return FigAlternatePlaybackBitrateMonitorIsAlternateStillValid(result, a2);
  }
  return result;
}

uint64_t fpfsi_EmancipateItemFromMultichannelInhibitionsAndApplyFilters()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = DerivedStorage;
  *(unsigned char *)(DerivedStorage + 3090) = 0;
  if (*(void *)(DerivedStorage + 3096)) {
    fpfs_ReleaseAndClearDispatchSource((dispatch_object_t *)(DerivedStorage + 3096));
  }
  uint64_t result = *(void *)(v1 + 40);
  if (result)
  {
    FigAlternateSelectionBossRemoveFilter(result, @"MultichannelAudio");
    uint64_t v3 = *(const void **)(v1 + 40);
    return FigAlternateSelectionBossApplyFilters(v3);
  }
  return result;
}

void fpfsi_MultichannelUninhibitedCallback(uint64_t a1)
{
  CFTypeRef v6 = 0;
  CFTypeRef cf = 0;
  if (fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer(a1, &cf, &v6))
  {
    CFTypeRef v3 = v6;
    if (v6) {
LABEL_5:
    }
      CFRelease(v3);
  }
  else
  {
    CFTypeRef v1 = cf;
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    CFTypeRef v3 = v6;
    if (*(void *)(CMBaseObjectGetDerivedStorage() + 936))
    {
      id v4 = *(id *)(DerivedStorage + 776);
      voucher_adopt();
      fpfsi_EmancipateItemFromMultichannelInhibitionsAndApplyFilters();
    }
    fpfs_UnlockAndPostNotificationsWithCaller(v1);
    if (v3) {
      goto LABEL_5;
    }
  }
  CFTypeRef v5 = cf;
  if (cf)
  {
    CFRelease(v5);
  }
}

uint64_t fpfs_ScheduleRecoverySwitch(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMBaseObjectGetDerivedStorage();
  int v7 = FigStreamAlternateSubstreamURLsMatchBetweenVariants(*(void *)(DerivedStorage + 1704), a2, *(const __CFArray **)(DerivedStorage + 1792), 1) == 0;
  if (!FigStreamAlternateSubstreamURLsMatchBetweenVariants(*(void *)(DerivedStorage + 1704), a2, *(const __CFArray **)(DerivedStorage + 1792), 2))v7 |= 2u; {
  if (FigAlternateIsIFrameOnly(a2) || (uint64_t result = fpfs_isAlternateValid(a1, a2), result))
  }
  {
    uint64_t v9 = *(void *)(DerivedStorage + 1048);
    if (!v9) {
      return 0;
    }
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    do
    {
      *(unsigned char *)(v9 + 187) = 0;
      if (*(_DWORD *)(v9 + 152) == 6 && !*(unsigned char *)(v9 + 184))
      {
        int v12 = *(_DWORD *)(v9 + 32);
        if (v12 == 1936684398) {
          uint64_t v13 = v9;
        }
        else {
          uint64_t v13 = v11;
        }
        if (v12 == 1986618469) {
          uint64_t v10 = v9;
        }
        else {
          uint64_t v11 = v13;
        }
      }
      uint64_t v9 = *(void *)(v9 + 8);
    }
    while (v9);
    if (v10)
    {
      if (FigCFEqual() && ((1 << *(unsigned char *)(v10 + 180)) & v7) != 0)
      {
        if (*(unsigned char *)(v10 + 189)) {
          unsigned int v14 = 0;
        }
        else {
          unsigned int v14 = 1 << *(unsigned char *)(v10 + 180);
        }
        if (*(unsigned char *)(v10 + 189)) {
          uint64_t v15 = 0;
        }
        else {
          uint64_t v15 = v10;
        }
      }
      else
      {
        unsigned int v14 = 0;
        uint64_t v15 = 0;
      }
      uint64_t v16 = v10;
    }
    else
    {
      uint64_t v16 = 0;
      unsigned int v14 = 0;
      uint64_t v15 = 0;
    }
    int v25 = v7;
    if (v11)
    {
      if (FigCFEqual() && (int v17 = 1 << *(unsigned char *)(v11 + 180), (v17 & v7) != 0))
      {
        if (*(unsigned char *)(v11 + 189)) {
          int v17 = 0;
        }
        v14 |= v17;
        if (*(unsigned char *)(v11 + 189)) {
          uint64_t v18 = 0;
        }
        else {
          uint64_t v18 = v11;
        }
      }
      else
      {
        uint64_t v18 = 0;
      }
      uint64_t v19 = v11;
      if (!v10)
      {
LABEL_43:
        if (v11 && !v18) {
          v14 &= ~(1 << *(unsigned char *)(v19 + 180));
        }
        CFIndex v20 = &PerformOneTimeAssetTableInitialization_sAssetTableInit;
        if (v15)
        {
          uint64_t v21 = v15;
          if ((v14 >> *(unsigned char *)(v15 + 180)))
          {
            uint64_t v21 = v15;
            if (dword_1E9350BB0)
            {
              os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              uint64_t v21 = v15;
              CFIndex v20 = &PerformOneTimeAssetTableInitialization_sAssetTableInit;
              if (!v18) {
                goto LABEL_56;
              }
              goto LABEL_52;
            }
          }
        }
        else
        {
          uint64_t v21 = 0;
        }
        if (!v18)
        {
LABEL_56:
          uint64_t v23 = 0;
LABEL_57:
          uint64_t result = 0;
          if (v14 && v14 == v25)
          {
            if (!a3 && v15) {
              *(unsigned char *)(v21 + 187) = 1;
            }
            uint64_t result = 1;
            if (!a3)
            {
              if (v18) {
                *(unsigned char *)(v23 + 187) = 1;
              }
            }
          }
          return result;
        }
LABEL_52:
        uint64_t v23 = v18;
        if ((v14 >> *(unsigned char *)(v18 + 180)))
        {
          uint64_t v23 = v18;
          if (*((_DWORD *)v20 + 748))
          {
            CMTime v24 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            uint64_t v23 = v18;
          }
        }
        goto LABEL_57;
      }
    }
    else
    {
      uint64_t v19 = 0;
      uint64_t v18 = 0;
      if (!v10) {
        goto LABEL_43;
      }
    }
    if (!v15) {
      v14 &= ~(1 << *(unsigned char *)(v16 + 180));
    }
    goto LABEL_43;
  }
  return result;
}

uint64_t fpfs_InitiateSwitchRecovery(uint64_t a1, unsigned int a2)
{
  queueOut[16] = *(CMBufferQueueRef *)MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 1048);
  if (v2)
  {
    uint64_t v27 = 0;
    uint64_t v5 = a2;
    CFTypeRef v28 = (void *)(a1 + 16 * a2 + 1000);
    CFStringRef key = (const __CFString *)*MEMORY[0x1E4F21A30];
    uint64_t v30 = a1 + 1128;
    CFTypeRef v6 = &PerformOneTimeAssetTableInitialization_sAssetTableInit;
    while (1)
    {
      if (!*(unsigned char *)(v2 + 187) || *(unsigned __int8 *)(v2 + 180) != a2) {
        goto LABEL_41;
      }
      *(unsigned char *)(v2 + 187) = 0;
      uint64_t v7 = *(void *)(v2 + 96);
      if (v7 && *(_DWORD *)(v2 + 32) == 1936684398)
      {
        queueOut[0] = 0;
        CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
        CallbacksForUnsortedSampleBuffers = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
        if (CMBufferQueueCreate(AllocatorForMedia, 0, CallbacksForUnsortedSampleBuffers, queueOut))
        {
          int v10 = 0;
        }
        else
        {
          MEMORY[0x199709540](*(void *)(v7 + 40), fpfs_StealBuffer, queueOut[0]);
          if (CMBufferQueueIsEmpty(queueOut[0]))
          {
            int v10 = 0;
          }
          else
          {
            CMBufferRef v11 = CMBufferQueueDequeueAndRetain(queueOut[0]);
            if (v11)
            {
              int v12 = (void *)v11;
              do
              {
                if (!fpfs_IsMarkerOnly((opaqueCMSampleBuffer *)v12) || !CMGetAttachment(v12, key, 0)) {
                  CMBufferQueueEnqueue(*(CMBufferQueueRef *)(v7 + 40), v12);
                }
                CFRelease(v12);
                int v12 = (void *)CMBufferQueueDequeueAndRetain(queueOut[0]);
              }
              while (v12);
            }
            int v10 = 1;
          }
          FigBufferQueueRelease();
        }
        if (*((_DWORD *)v6 + 748))
        {
          os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
      else
      {
        int v10 = 1;
      }
      if (a2 < 3)
      {
        if (*v28)
        {
          if (!v10) {
            goto LABEL_37;
          }
        }
        else
        {
          StoreCurrentManifold(a1, a2, 0, *(const void **)(v2 + 48));
          uint64_t v27 = *(void *)(v2 + 48);
          if (!v10)
          {
LABEL_37:
            uint64_t result = (uint64_t)fpfs_cloneTrackAndAddToTrackList(v2, 1);
            if (!result) {
              return result;
            }
            long long v22 = *(_OWORD *)(v2 + 216);
            *(void *)(result + 208) = *(void *)(v2 + 232);
            *(_OWORD *)(result + 192) = v22;
            fpfs_ChangeTrackState(result, 4u);
            if (*((_DWORD *)v6 + 748))
            {
              uint64_t v23 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              CFTypeRef v6 = &PerformOneTimeAssetTableInitialization_sAssetTableInit;
            }
            goto LABEL_40;
          }
        }
      }
      else
      {
        FigSignalErrorAt();
        if (!v10) {
          goto LABEL_37;
        }
      }
      *(unsigned char *)(v2 + 182) = 0;
      uint64_t v14 = *(void *)(v2 + 96);
      if (v14) {
        fpfs_SetFeederTrack(v14, v2);
      }
      fpfs_ReleaseAndClearTimebaseTimer(*(OpaqueCMTimebase **)(a1 + 576), (dispatch_object_t *)(v2 + 112));
      uint64_t v15 = *(void *)(v2 + 48);
      uint64_t v16 = *(unsigned int *)(v2 + 24);
      uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v17) {
        uint64_t v18 = v17;
      }
      else {
        uint64_t v18 = 0;
      }
      uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t (**)(int, int, int, CMFormatDescriptionRef), uint64_t))(v18 + 32);
      if (v19) {
        v19(v15, v16, &kManifoldOutputCallbacks, v2);
      }
      if (*((_DWORD *)v6 + 748))
      {
        CFIndex v20 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
LABEL_40:
      *(void *)(v30 + 8 * v5) = *(void *)(v2 + 64);
LABEL_41:
      uint64_t v2 = *(void *)(v2 + 8);
      if (!v2)
      {
        if (v27)
        {
          CMTime v24 = *(void **)(CMBaseObjectGetVTable() + 16);
          if (v24) {
            int v25 = v24;
          }
          else {
            int v25 = 0;
          }
          if (*v25 >= 2uLL)
          {
            CFAllocatorRef v26 = (void (*)(uint64_t))v25[7];
            if (v26) {
              v26(v27);
            }
          }
        }
        return 1;
      }
    }
  }
  return 1;
}

uint64_t fpfs_CreateAppliedMediaArray(uint64_t a1, CFTypeRef *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  if (!a2) {
    return 0;
  }
  uint64_t v5 = DerivedStorage;
  *a2 = 0;
  if (*(unsigned char *)(DerivedStorage + 705))
  {
    CFTypeRef v6 = fpfs_CopyMediaSelectionArrayAndMarkOptionsAvailableOffline(a1);
    uint64_t v7 = FigAutomaticMediaSelectionCreateSelectedMediaArrayForCriteriaWithLegibleFallbackCriteria((uint64_t)v6, *(const __CFArray **)(a1 + 1784), *(const __CFDictionary **)(v5 + 688), *(const __CFDictionary **)(v5 + 696), *(unsigned __int8 *)(v5 + 704), *(unsigned __int8 *)(a1 + 1836), &cf);
    if (v6) {
      CFRelease(v6);
    }
    CFTypeRef v8 = cf;
    if (v7)
    {
      if (cf) {
        CFRelease(cf);
      }
      return v7;
    }
  }
  else
  {
    CFTypeRef v8 = *(CFTypeRef *)(a1 + 1784);
    CFTypeRef cf = v8;
    if (v8) {
      CFRetain(v8);
    }
  }
  uint64_t CFStringForOSTypeValue = FigGetCFStringForOSTypeValue();
  if (fpfs_FindMediaTypeInMediaArray((const __CFArray *)v8, CFStringForOSTypeValue, 0)) {
    fpfs_updateClosedCaptionsDisplay(*(const void **)a1, (const __CFArray *)cf);
  }
  uint64_t v7 = 0;
  *a2 = cf;
  return v7;
}

void fpfs_FindAndSetForcedSubtitle(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 1800);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 1800) = 0;
  }
  if (fpfs_IsClosedCaptioningSelected(a1, 0))
  {
    CFTypeRef v3 = fpfs_CopyMediaSelectionArrayAndMarkOptionsAvailableOffline(a1);
    uint64_t CFStringForOSTypeValue = FigGetCFStringForOSTypeValue();
    CFDictionaryRef MediaTypeInMediaArray = fpfs_FindMediaTypeInMediaArray(v3, CFStringForOSTypeValue, 0);
    uint64_t v6 = FigGetCFStringForOSTypeValue();
    fpfs_FindMediaTypeInMediaArray(v3, v6, 0);
    *(void *)(a1 + 1800) = FigAutomaticMediaSelectionCreateSecondaryForcedSubtitlesSelectedMediaDictionary(*(const __CFArray **)(a1 + 1792), MediaTypeInMediaArray);
    if (v3)
    {
      CFRelease(v3);
    }
  }
}

__CFArray *fpfs_CopyMediaSelectionArrayAndMarkOptionsAvailableOffline(uint64_t a1)
{
  if (!a1
    || !*(void *)(a1 + 1696)
    || !*(unsigned char *)(a1 + 1836)
    || !*(void *)(a1 + 936)
    || !CMBaseObjectGetDerivedStorage())
  {
    goto LABEL_14;
  }
  CFTypeRef cf = 0;
  uint64_t v2 = *(void *)(a1 + 936);
  uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
  uint64_t FigBaseObject = FigBytePumpGetFigBaseObject(v2);
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
  uint64_t v6 = v5 ? v5 : 0;
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v6 + 48);
  if (!v7) {
    goto LABEL_14;
  }
  v7(FigBaseObject, 0x1EE53E498, AllocatorForMedia, &cf);
  if (!cf) {
    goto LABEL_14;
  }
  CFTypeRef v8 = FigCopyMediaSelectionArrayAndMarkOptionsAvailableOffline(*(const void **)(a1 + 1696), *(const void **)(a1 + 32), (uint64_t)cf);
  if (cf) {
    CFRelease(cf);
  }
  if (!v8)
  {
LABEL_14:
    uint64_t v9 = *(const void **)(a1 + 1696);
    if (v9) {
      return (__CFArray *)CFRetain(v9);
    }
    else {
      return 0;
    }
  }
  return v8;
}

uint64_t fpfsi_RTCReportingUpdateProgressive(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = *(void *)(result + 2544);
  if (v3)
  {
    uint64_t VTable = CMBaseObjectGetVTable();
    uint64_t v8 = *(void *)(VTable + 16);
    uint64_t result = VTable + 16;
    uint64_t v7 = v8;
    uint64_t v9 = v8 ? v7 : 0;
    int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, void))(v9 + 56);
    if (v10)
    {
      return v10(v3, 0x1EE582B78, a2, a3, 0);
    }
  }
  return result;
}

void fpfsi_highSpeedHighPowerTransportChangedCallback(uint64_t a1, uint64_t a2, int a3)
{
  CFTypeRef v13 = 0;
  CFTypeRef cf = 0;
  if (fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer(a2, &v13, &cf))
  {
    CFTypeRef v11 = v13;
    if (v13) {
LABEL_15:
    }
      CFRelease(v11);
  }
  else
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    *(unsigned char *)(DerivedStorage + 2264) = a3;
    uint64_t v5 = *(void *)(DerivedStorage + 2256);
    if (v5)
    {
      BOOL v6 = *(int *)(DerivedStorage + 2268) < 1 || a3 == 0;
      uint64_t v7 = (void *)(v6 ? MEMORY[0x1E4F1CFC8] : MEMORY[0x1E4F1CFD0]);
      uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v9 = v8 ? v8 : 0;
      int v10 = *(void (**)(uint64_t, uint64_t, void))(v9 + 56);
      if (v10) {
        v10(v5, 0x1EE57E4D8, *v7);
      }
    }
    CFTypeRef v11 = v13;
    fpfs_UnlockAndPostNotificationsWithCaller(v13);
    if (v11) {
      goto LABEL_15;
    }
  }
  CFTypeRef v12 = cf;
  if (cf)
  {
    CFRelease(v12);
  }
}

void fpfsi_expensiveNetworkChangedCallback(uint64_t a1, uint64_t a2, unsigned int a3)
{
  CFTypeRef cf = 0;
  CFTypeRef v22 = 0;
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionaryRef v7 = Mutable;
  uint64_t v8 = (const void **)MEMORY[0x1E4F1CFC8];
  if (a3) {
    uint64_t v8 = (const void **)MEMORY[0x1E4F1CFD0];
  }
  CFDictionarySetValue(Mutable, @"NetworkIsExpensive", *v8);
  CFAllocatorRef v9 = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFDictionaryRef Copy = CFDictionaryCreateCopy(v9, v7);
  if (!fpfsi_CopyPlayerAndItemFromItemRetainProxy(a2, &cf, &v22))
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    uint64_t v12 = *(void *)(DerivedStorage + 2544);
    if (v12)
    {
      uint64_t v13 = DerivedStorage;
      uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v14) {
        uint64_t v15 = v14;
      }
      else {
        uint64_t v15 = 0;
      }
      uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t, void, void))(v15 + 56);
      if (v16) {
        v16(v12, 0x1EE582B78, 0x1EE584898, a3, 0);
      }
      uint64_t v17 = *(void *)(v13 + 2544);
      if (v17)
      {
        uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v19 = v18 ? v18 : 0;
        CFIndex v20 = *(void (**)(uint64_t, uint64_t, uint64_t, void, void))(v19 + 8);
        if (v20) {
          v20(v17, 0x1EE582B78, 3001, 0, 0);
        }
      }
    }
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
  }
  if (Copy) {
    CFRelease(Copy);
  }
  if (v7) {
    CFRelease(v7);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v22) {
    CFRelease(v22);
  }
}

void fpfs_BytePumpFn(uint64_t a1, uint64_t a2, OpaqueCMBlockBuffer *a3, unsigned int a4, int a5, int a6, uint64_t a7, CMTime *a8, const void *a9, int a10, uint64_t a11, CFErrorRef err, CMTime *a13, int *a14)
{
  LODWORD(v17) = a5;
  uint64_t v405 = *MEMORY[0x1E4F143B8];
  if (err) {
    CFIndex Code = CFErrorGetCode(err);
  }
  else {
    CFIndex Code = 0;
  }
  CFTypeRef v379 = 0;
  CFTypeRef v378 = 0;
  memset(&v377, 0, sizeof(v377));
  if (v17 > 2) {
    return;
  }
  if (fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer(a2, &v378, &v379)) {
    goto LABEL_721;
  }
  v355 = a8;
  theBuffer = a3;
  uint64_t v346 = a7;
  CFTypeRef v22 = (void *)v378;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFArrayRef v24 = (const __CFArray *)v379;
  uint64_t v25 = CMBaseObjectGetDerivedStorage();
  if (!*(void *)(v25 + 936))
  {
    CFArrayRef v37 = 0;
    int v39 = 1;
    uint64_t v35 = v25;
    goto LABEL_682;
  }
  uint64_t v348 = v25 + 16 * v17;
  uint64_t v353 = *(void *)(v348 + 1008);
  uint64_t v360 = DerivedStorage;
  if (*(_DWORD *)(DerivedStorage + 32))
  {
    uint64_t v26 = v25;
    if (*(unsigned char *)(v25 + 462)) {
      BOOL v27 = 1;
    }
    else {
      BOOL v27 = Code == 0;
    }
    if (v27) {
      goto LABEL_23;
    }
  }
  else
  {
    uint64_t v26 = v25;
    if (!Code)
    {
      CFArrayRef v37 = 0;
      int v39 = 1;
      uint64_t v35 = v25;
      goto LABEL_695;
    }
  }
  lhs.unsigned int value = 0;
  uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
  uint64_t FigBaseObject = FigBytePumpGetFigBaseObject(a1);
  uint64_t v30 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v30) {
    uint64_t v31 = v30;
  }
  else {
    uint64_t v31 = 0;
  }
  uint64_t v32 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, CMTime *))(v31 + 48);
  if (!v32)
  {
    CFArrayRef v37 = 0;
    size_t v38 = 0;
    int v39 = 1;
    uint64_t v35 = v26;
LABEL_26:
    uint64_t v40 = Code;
    goto LABEL_27;
  }
  int v33 = v32(FigBaseObject, 0x1EE53E2B8, AllocatorForMedia, &lhs);
  if (lhs.value) {
    CFRelease((CFTypeRef)lhs.value);
  }
  if (v33)
  {
    CFArrayRef v37 = 0;
    size_t v38 = 0;
    int v39 = 1;
    uint64_t v35 = v26;
    uint64_t DerivedStorage = v360;
    goto LABEL_26;
  }
  uint64_t DerivedStorage = v360;
  if (!*(_DWORD *)(v360 + 32))
  {
    CFArrayRef v37 = 0;
    int v39 = 1;
    goto LABEL_714;
  }
LABEL_23:
  uint64_t v34 = v17;
  if ((a4 & 0x1000) != 0)
  {
    uint64_t v35 = v26;
    unsigned int v36 = (a4 >> 12) & 1;
    if (!*(void *)(v35 + 1768) && !*(void *)(v35 + 16 * v17 + 8 * v36 + 1000)) {
      unsigned int v36 = 0;
    }
  }
  else
  {
    uint64_t v35 = v26;
    unsigned int v36 = 0;
  }
  if (*(_DWORD *)(v35 + 12 * v36 + 4 * v17 + 952) != a6)
  {
    CFArrayRef v37 = 0;
    int v39 = 1;
LABEL_682:
    if (!Code) {
      goto LABEL_695;
    }
    goto LABEL_714;
  }
  uint64_t v41 = v36;
  *(_DWORD *)(v35 + 12 * v36 + 4 * v17 + 976) = a6;
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  *(CFAbsoluteTime *)(v35 + 8 * v17 + 3000) = Current;
  if ((a4 & 0x10000) != 0)
  {
    lhs.unsigned int value = 0;
    uint64_t v44 = *(void *)(v35 + 40);
    uint64_t v45 = FigGetAllocatorForMedia();
    if (!FigAlternateSelectionBossCopyProperty(v44, @"FilteredAlternateList", v45, (const __CFArray **)&lhs))fpfsi_UpdateValidAlternateListAndEvaluateCurrentAlternateAgaintValidAlternateList(v24, (const __CFArray *)lhs.value); {
    if (lhs.value)
    }
      CFRelease((CFTypeRef)lhs.value);
    CFArrayRef v37 = 0;
    int v39 = 1;
    if (!Code) {
      goto LABEL_695;
    }
    goto LABEL_714;
  }
  unsigned int v350 = v36;
  uint64_t v344 = v36 | (2 * v36);
  if ((a4 & 8) != 0) {
    *(unsigned char *)(v35 + v344 + v17 + 3066) = 0;
  }
  unsigned int v363 = v17;
  uint64_t v354 = v17;
  uint64_t v339 = v36;
  uint64_t v40 = Code;
  if ((a4 & 0x800) != 0)
  {
    uint64_t v46 = v35 + v344 + v17;
    a4 |= *(unsigned char *)(v46 + 3066) == 0;
    *(unsigned char *)(v46 + 3066) = 1;
    uint64_t v47 = theBuffer;
    if (v17 > 1) {
      uint64_t v47 = 0;
    }
    theBuffer = v47;
    if (dword_1E9350BB0)
    {
      uint64_t v48 = v35;
      unsigned int v49 = a4;
      LODWORD(v381.value) = 0;
      LOBYTE(type.value) = 0;
      os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int value = v381.value;
      if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type.value)) {
        unsigned int v52 = value;
      }
      else {
        unsigned int v52 = value & 0xFFFFFFFE;
      }
      if (v52)
      {
        if (v22) {
          uint64_t v17 = CMBaseObjectGetDerivedStorage() + 824;
        }
        else {
          uint64_t v17 = (uint64_t)"";
        }
        if (v24) {
          CFAllocatorRef v53 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
        }
        else {
          CFAllocatorRef v53 = "";
        }
        LODWORD(rhs.value) = 136316418;
        *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"fpfs_BytePumpFn";
        LOWORD(rhs.flags) = 2048;
        *(void *)((char *)&rhs.flags + 2) = v22;
        HIWORD(rhs.epoch) = 2082;
        uint64_t v383 = v17;
        *(_WORD *)v384 = 2048;
        *(void *)&v384[2] = v24;
        __int16 v385 = 2082;
        v386 = v53;
        __int16 v387 = 2114;
        *(void *)v388 = a9;
        _os_log_send_and_compose_impl();
        LODWORD(v17) = v363;
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      a4 = v49;
      uint64_t v35 = v48;
      uint64_t v34 = v354;
    }
    uint64_t v54 = *(void *)(v35 + 2544);
    if (v54)
    {
      uint64_t v55 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t DerivedStorage = v360;
      if (v55) {
        uint64_t v56 = v55;
      }
      else {
        uint64_t v56 = 0;
      }
      uint64_t v57 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v56 + 32);
      if (v57) {
        v57(v54, 0x1EE582B78, 0x1EE5623D8, 1);
      }
    }
    else
    {
      uint64_t DerivedStorage = v360;
    }
    uint64_t v41 = v339;
  }
  else if (theBuffer)
  {
    uint64_t v43 = v35 + v344 + v17;
    a4 |= *(unsigned char *)(v43 + 3066) != 0;
    *(unsigned char *)(v43 + 3066) = 0;
  }
  else
  {
    theBuffer = 0;
  }
  BOOL v58 = *(void *)(v35 + 24 * v41 + 8 * v34 + 1128) != a11;
  if ((v58 & ((a4 & 4) >> 2)) != 0) {
    a4 ^= 4u;
  }
  int v337 = v58 | a4;
  if (*(unsigned char *)(v35 + v34 + 518))
  {
    *(unsigned char *)(v35 + v34 + 518) = 0;
    if (!((((v58 | a4) & 1) == 0) | (a4 >> 2) & 1) || (a4 & 8) != 0)
    {
      for (uint64_t i = 0; i != 3; ++i)
      {
        if ((*(_DWORD *)(v35 + 1096) & (1 << i)) != 0 && *(unsigned char *)(v35 + 518 + i)) {
          fpfs_PrepareForSeek(v24, 1 << i, 1);
        }
      }
      a4 |= 8u;
      LODWORD(v17) = v363;
      uint64_t DerivedStorage = v360;
      uint64_t v34 = v354;
    }
    else
    {
      LODWORD(Current) = *(_DWORD *)(DerivedStorage + 108);
      if (*(float *)&Current <= 2.0 && *(float *)&Current >= 0.0 || *(void *)(v35 + 2968))
      {
        uint64_t v59 = 518;
        while (!*(unsigned char *)(v35 + v59))
        {
          if (++v59 == 521)
          {
            fpfs_SetRateWithFadeInternal(*(void *)v35, MEMORY[0x1E4F1F9F8], MEMORY[0x1E4F1F9F8], MEMORY[0x1E4F1F9F8], Current);
            break;
          }
        }
      }
    }
  }
  uint64_t v61 = *(void *)(v35 + 1704);
  if (v61) {
    BOOL v335 = FigAlternateIsIFrameOnly(v61) != 0;
  }
  else {
    BOOL v335 = 0;
  }
  if ((a4 & 0x10) != 0 || Code && (a4 & 0x20) != 0) {
    *(unsigned char *)(v35 + 1564) = 0;
  }
  int v343 = a4 & 0x20;
  if ((a4 & 0x20) == 0) {
    goto LABEL_106;
  }
  if (!Code)
  {
    int IsEmpty = CMBlockBufferIsEmpty(theBuffer);
    BOOL v63 = v335;
    if (IsEmpty != 1) {
      BOOL v63 = 0;
    }
    if (!v63) {
      goto LABEL_105;
    }
    goto LABEL_103;
  }
  if (Code == -12648)
  {
    fpfs_FrameStepHitEnd(v24);
LABEL_105:
    uint64_t v40 = 0;
    goto LABEL_106;
  }
  if (v335)
  {
LABEL_103:
    int v64 = *(_DWORD *)(v35 + 2204);
    if (v64) {
      fpfs_SeekDidFail(v22, v24, v64, 0);
    }
    goto LABEL_105;
  }
LABEL_106:
  unsigned int v362 = a4;
  if ((a4 & 2) == 0) {
    goto LABEL_151;
  }
  if (dword_1E9350BB0)
  {
    LODWORD(v381.value) = 0;
    LOBYTE(type.value) = 0;
    uint64_t v65 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v66 = v381.value;
    if (os_log_type_enabled(v65, type.value)) {
      unsigned int v67 = v66;
    }
    else {
      unsigned int v67 = v66 & 0xFFFFFFFE;
    }
    if (v67)
    {
      if (v22) {
        uint64_t v17 = CMBaseObjectGetDerivedStorage() + 824;
      }
      else {
        uint64_t v17 = (uint64_t)"";
      }
      if (v24) {
        uint64_t v68 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
      }
      else {
        uint64_t v68 = "";
      }
      fpfs_CurrentSubStreamBufferedDuration(v363, (uint64_t)&time);
      Float64 Seconds = CMTimeGetSeconds(&time);
      LODWORD(rhs.value) = 136316930;
      *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"fpfs_BytePumpFn";
      LOWORD(rhs.flags) = 2048;
      *(void *)((char *)&rhs.flags + 2) = v22;
      HIWORD(rhs.epoch) = 2082;
      uint64_t v383 = v17;
      LODWORD(v17) = v363;
      *(_WORD *)v384 = 2048;
      *(void *)&v384[2] = v24;
      __int16 v385 = 2082;
      v386 = v68;
      __int16 v387 = 1024;
      *(_DWORD *)v388 = v363;
      *(_WORD *)&v388[4] = 2048;
      *(Float64 *)&v388[6] = Seconds;
      *(_WORD *)&v388[14] = 2112;
      *(void *)&v388[16] = err;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    uint64_t v41 = v339;
  }
  uint64_t v70 = 0;
  uint64_t v71 = 0;
  *(unsigned char *)(v35 + v344 + v354 + 471) = 1;
  do
  {
    int v72 = *(unsigned __int8 *)(v35 + v71 + 471);
    if (!*(unsigned char *)(v35 + 553)) {
      goto LABEL_126;
    }
    if (!*(unsigned char *)(v35 + v71 + 471)) {
      goto LABEL_128;
    }
    if (*(void *)(v35 + 1768))
    {
      int v72 = *(unsigned __int8 *)(v35 + v71 + 474);
LABEL_126:
      if (!v72) {
        goto LABEL_128;
      }
    }
    ++v70;
LABEL_128:
    ++v71;
  }
  while (v71 != 3);
  uint64_t DerivedStorage = v360;
  if (!v350 && *(void *)(v35 + 1112) == v354) {
    fpfs_ReleaseAndClearTimebaseTimer(*(OpaqueCMTimebase **)(v35 + 576), (dispatch_object_t *)(v35 + 2304));
  }
  BOOL v27 = *(void *)(v35 + 1104) == v70;
  uint64_t v34 = v354;
  if (v27)
  {
    if (dword_1E9350BB0)
    {
      LODWORD(v381.value) = 0;
      LOBYTE(type.value) = 0;
      uint64_t v73 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v74 = v381.value;
      if (os_log_type_enabled(v73, type.value)) {
        unsigned int v75 = v74;
      }
      else {
        unsigned int v75 = v74 & 0xFFFFFFFE;
      }
      if (v75)
      {
        if (v22) {
          uint64_t v17 = CMBaseObjectGetDerivedStorage() + 824;
        }
        else {
          uint64_t v17 = (uint64_t)"";
        }
        if (v24) {
          BOOL v76 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
        }
        else {
          BOOL v76 = "";
        }
        LODWORD(rhs.value) = 136316674;
        *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"fpfs_BytePumpFn";
        LOWORD(rhs.flags) = 2048;
        *(void *)((char *)&rhs.flags + 2) = v22;
        HIWORD(rhs.epoch) = 2082;
        uint64_t v383 = v17;
        *(_WORD *)v384 = 2048;
        *(void *)&v384[2] = v24;
        __int16 v385 = 2082;
        v386 = v76;
        __int16 v387 = 1024;
        *(_DWORD *)v388 = v40;
        *(_WORD *)&v388[4] = 2082;
        *(void *)&v388[6] = "Yes";
        _os_log_send_and_compose_impl();
        LODWORD(v17) = v363;
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      a4 = v362;
      uint64_t DerivedStorage = v360;
      uint64_t v34 = v354;
      uint64_t v41 = v339;
    }
    uint64_t v77 = CMBaseObjectGetDerivedStorage();
    if (*(unsigned char *)(v77 + 470) != 1) {
      *(unsigned char *)(v77 + 470) = 1;
    }
    fpfs_AssessItemTransition(v22);
  }
LABEL_151:
  if (v40)
  {
    size_t v342 = 0;
    CFTypeRef v345 = 0;
    int v39 = 1;
    CFErrorRef v155 = err;
    if (err) {
      goto LABEL_604;
    }
    goto LABEL_685;
  }
  char v78 = v337;
  if (v337 & 1 | ((a4 & 0xC) != 0)) {
    *(unsigned char *)(v35 + v344 + v34 + 512) = (a4 & 0x14) == 4;
  }
  if (a9 && *(void *)(v35 + 1112) == v34 && (v355->flags & 0x1D) == 1)
  {
    uint64_t v79 = *(const void **)(v35 + 1592);
    if (v79) {
      CFRelease(v79);
    }
    *(void *)(v35 + 1592) = CFRetain(a9);
    CMTimeEpoch epoch = v355->epoch;
    *(_OWORD *)(v35 + 1568) = *(_OWORD *)&v355->value;
    *(void *)(v35 + 1584) = epoch;
  }
  if (*(void *)(v35 + 1600) && *(void *)(v35 + 1112) == v34 && (unsigned int v81 = *(const void **)(v35 + 1592)) != 0) {
    CFTypeRef v345 = CFRetain(v81);
  }
  else {
    CFTypeRef v345 = 0;
  }
  if ((a4 & 0x14) == 4)
  {
    if (dword_1E9350BB0)
    {
      LODWORD(v381.value) = 0;
      LOBYTE(type.value) = 0;
      uint64_t v82 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v83 = v381.value;
      if (os_log_type_enabled(v82, type.value)) {
        unsigned int v84 = v83;
      }
      else {
        unsigned int v84 = v83 & 0xFFFFFFFE;
      }
      if (v84)
      {
        if (v22) {
          unsigned int v85 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
        }
        else {
          unsigned int v85 = "";
        }
        if (v24) {
          unsigned int v91 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
        }
        else {
          unsigned int v91 = "";
        }
        LODWORD(rhs.value) = 136316674;
        *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"fpfs_BytePumpFn";
        LOWORD(rhs.flags) = 2048;
        *(void *)((char *)&rhs.flags + 2) = v22;
        HIWORD(rhs.epoch) = 2082;
        uint64_t v383 = (uint64_t)v85;
        *(_WORD *)v384 = 2048;
        *(void *)&v384[2] = v24;
        __int16 v385 = 2082;
        v386 = v91;
        __int16 v387 = 1024;
        *(_DWORD *)v388 = v363;
        *(_WORD *)&v388[4] = 1024;
        *(_DWORD *)&v388[6] = v350;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      a4 = v362;
    }
    if (!v350)
    {
      if ((a4 & 0x200) == 0)
      {
        fpfs_WeakStreamEnd(v35, v363, 0);
        StoreCurrentManifold(v35, v363, 0, 0);
      }
      fpfs_DeleteStrandedTracksUponSwitch((uint64_t)v24, v363, 0);
    }
    goto LABEL_250;
  }
  if (((v337 | (a4 >> 3)) & 1) == 0) {
    goto LABEL_250;
  }
  char v86 = a4;
  if (dword_1E9350BB0)
  {
    LODWORD(v381.value) = 0;
    LOBYTE(type.value) = 0;
    uint64_t v87 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v88 = v381.value;
    if (os_log_type_enabled(v87, type.value)) {
      unsigned int v89 = v88;
    }
    else {
      unsigned int v89 = v88 & 0xFFFFFFFE;
    }
    if (v89)
    {
      if (v22) {
        unsigned int v90 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
      }
      else {
        unsigned int v90 = "";
      }
      if (v24) {
        uint64_t v92 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
      }
      else {
        uint64_t v92 = "";
      }
      uint64_t v93 = "TimeJumped - ";
      LODWORD(rhs.value) = 136317442;
      *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"fpfs_BytePumpFn";
      LOWORD(rhs.flags) = 2048;
      *(void *)((char *)&rhs.flags + 2) = v22;
      if (((a4 >> 3) & 1) == 0) {
        uint64_t v93 = "";
      }
      uint64_t v383 = (uint64_t)v90;
      uint64_t v94 = "discontinuity - ";
      HIWORD(rhs.epoch) = 2082;
      if ((a4 >> 3)) {
        uint64_t v94 = "";
      }
      *(_WORD *)v384 = 2048;
      *(void *)&v384[2] = v24;
      __int16 v385 = 2082;
      v386 = v92;
      __int16 v387 = 2082;
      *(void *)v388 = v93;
      *(_WORD *)&v388[8] = 2082;
      *(void *)&v388[10] = v94;
      *(_WORD *)&v388[18] = 1024;
      *(_DWORD *)&v388[20] = v363;
      *(_WORD *)&v388[24] = 1024;
      *(_DWORD *)&v388[26] = v350;
      LOWORD(v389) = 1024;
      *(_DWORD *)((char *)&v389 + 2) = a11;
      _os_log_send_and_compose_impl();
      char v78 = v337;
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    a4 = v362;
    uint64_t DerivedStorage = v360;
    uint64_t v41 = v339;
  }
  if ((v86 & 8) != 0)
  {
    char v102 = v78;
    char v103 = v78 | ~v335;
    LODWORD(v17) = v363;
    if (v103)
    {
      fpfs_PrepareForSeek(v24, 1 << v363, 1);
    }
    else if (!v363 && (v355->flags & 0x1D) == 1)
    {
      CMTime lhs = *v355;
      CMTime rhs = *(CMTime *)(v35 + 1184);
      CMTimeSubtract(&v375, &lhs, &rhs);
      uint64_t IFrameTrack = fpfs_PrepareToReuseLastIFrameTrack((uint64_t)v24, (long long *)&v375.value, 1);
      if (IFrameTrack)
      {
        uint64_t v40 = IFrameTrack;
        size_t v38 = 0;
        CFArrayRef v37 = v345;
        int v39 = 1;
        goto LABEL_27;
      }
    }
    char v78 = v102;
    if (v363 != 2 && a10 && *(void *)(v35 + 1112) == v354) {
      *(_DWORD *)(v35 + 2200) = a10;
    }
  }
  if (v78)
  {
    uint64_t v95 = CMBaseObjectGetDerivedStorage();
    uint64_t v96 = v363;
    if (dword_1E9350BB0)
    {
      LODWORD(v381.value) = 0;
      LOBYTE(type.value) = 0;
      unsigned int v97 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v98 = v381.value;
      if (os_log_type_enabled(v97, type.value)) {
        unsigned int v99 = v98;
      }
      else {
        unsigned int v99 = v98 & 0xFFFFFFFE;
      }
      if (v99)
      {
        uint64_t v100 = *(void *)v95;
        if (*(void *)v95) {
          uint64_t v101 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
        }
        else {
          uint64_t v101 = "";
        }
        if (v24) {
          unsigned int v105 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
        }
        else {
          unsigned int v105 = "";
        }
        LODWORD(rhs.value) = 136316930;
        *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"fpfs_StartNewDiscontinuity";
        LOWORD(rhs.flags) = 2048;
        *(void *)((char *)&rhs.flags + 2) = v100;
        HIWORD(rhs.epoch) = 2082;
        uint64_t v383 = (uint64_t)v101;
        *(_WORD *)v384 = 2048;
        *(void *)&v384[2] = v24;
        __int16 v385 = 2082;
        v386 = v105;
        __int16 v387 = 2048;
        *(void *)v388 = a11;
        *(_WORD *)&v388[8] = 1024;
        uint64_t v96 = v363;
        *(_DWORD *)&v388[10] = v363;
        *(_WORD *)&v388[14] = 1024;
        *(_DWORD *)&v388[16] = v350;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      a4 = v362;
      uint64_t v41 = v339;
    }
    fpfs_EndCurrentDiscontinuity(v24, v96, v350, 0);
    unsigned int v106 = (long long *)MEMORY[0x1E4F1F9F8];
    uint64_t v107 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
    *(void *)(v95 + 1536) = v107;
    long long v108 = *v106;
    *(_OWORD *)(v95 + 1520) = *v106;
    uint64_t v109 = v95 + 24 * v354;
    *(void *)(v109 + 264) = v107;
    *(_OWORD *)(v109 + 248) = v108;
    *(void *)(v95 + 24 * v41 + 8 * v354 + 1128) = a11;
    CMBufferQueueReset(*(CMBufferQueueRef *)(v95 + 856));
    if (*(void *)(v95 + 16 * v354 + 8 * v41 + 1000)) {
      StoreCurrentManifold(v95, v96, v350, 0);
    }
    uint64_t v110 = *(void *)(v95 + 1048);
    if (v110)
    {
      do
      {
        uint64_t v111 = *(void *)(v110 + 8);
        if (v111) {
          uint64_t v112 = *(void *)(v111 + 16);
        }
        else {
          uint64_t v112 = -1;
        }
        uint64_t v113 = *(unsigned __int8 *)(v110 + 180);
        if (*(void *)(v110 + 48) == *(void *)(v95 + 16 * v113 + 1008)
          && v113 == v363
          && *(void *)(v110 + 64) < a11)
        {
          fpfs_DeleteTrack(v24, v110);
        }
        if (v112 < 0)
        {
LABEL_247:
          if (!v111) {
            break;
          }
          uint64_t v115 = *(void *)(v95 + 1048);
        }
        else
        {
          uint64_t v115 = *(void *)(v95 + 1048);
          if (!v115) {
            break;
          }
          uint64_t v111 = *(void *)(v95 + 1048);
          while (*(void *)(v111 + 16) != v112)
          {
            uint64_t v111 = *(void *)(v111 + 8);
            if (!v111)
            {
              uint64_t v111 = *(void *)(v95 + 1048);
              goto LABEL_247;
            }
          }
        }
        uint64_t v110 = v111;
      }
      while (v115);
    }
  }
LABEL_250:
  uint64_t v17 = v363;
  uint64_t v116 = v354;
  unsigned int v117 = theBuffer;
  if (!*(unsigned char *)(v35 + 592) && v363 != 2 && (v355->flags & 0x1D) == 1)
  {
    if (dword_1E9350BB0)
    {
      LODWORD(v381.value) = 0;
      LOBYTE(type.value) = 0;
      unsigned int v118 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v119 = v381.value;
      if (os_log_type_enabled(v118, type.value)) {
        unsigned int v120 = v119;
      }
      else {
        unsigned int v120 = v119 & 0xFFFFFFFE;
      }
      if (v120)
      {
        CFTypeRef v121 = v378;
        if (v378) {
          unsigned int v122 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
        }
        else {
          unsigned int v122 = "";
        }
        CFTypeRef v123 = v379;
        if (v379) {
          uint64_t v124 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
        }
        else {
          uint64_t v124 = "";
        }
        CMTime lhs = *v355;
        Float64 v125 = CMTimeGetSeconds(&lhs);
        LODWORD(rhs.value) = 136316418;
        *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"fpfs_BytePumpFn";
        LOWORD(rhs.flags) = 2048;
        *(void *)((char *)&rhs.flags + 2) = v121;
        HIWORD(rhs.epoch) = 2082;
        uint64_t v383 = (uint64_t)v122;
        *(_WORD *)v384 = 2048;
        *(void *)&v384[2] = v123;
        __int16 v385 = 2082;
        v386 = v124;
        __int16 v387 = 2048;
        *(Float64 *)v388 = v125;
        _os_log_send_and_compose_impl();
        uint64_t v17 = v363;
        uint64_t v116 = v354;
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      a4 = v362;
      unsigned int v117 = theBuffer;
    }
    uint64_t v126 = *(OpaqueCMTimebase **)(v35 + 576);
    CMTime lhs = *v355;
    CMTimebaseSetTime(v126, &lhs);
    CFTypeRef v127 = v378;
    CFTypeRef v128 = v379;
    CMTime lhs = *v355;
    CMTime rhs = *(CMTime *)(v35 + 1184);
    CMTimeSubtract(&v374, &lhs, &rhs);
    fpfs_CancelSeekIfNeeded(v127, v128);
    *(unsigned char *)(v35 + 592) = 1;
  }
  if (!v350 && (v355->flags & 0x1D) == 1)
  {
    if ((a4 & 8) != 0 && v17 != 2 && a10)
    {
      memset(&v381, 0, sizeof(v381));
      CMTime lhs = *v355;
      CMTime rhs = *(CMTime *)(v35 + 1184);
      CMTimeSubtract(&v381, &lhs, &rhs);
      CMTime lhs = v381;
      long long v340 = *MEMORY[0x1E4F1FA48];
      *(_OWORD *)&rhs.unsigned int value = *MEMORY[0x1E4F1FA48];
      CMTimeEpoch v129 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
      rhs.CMTimeEpoch epoch = v129;
      if (CMTimeCompare(&lhs, &rhs) < 0)
      {
        *(_OWORD *)&v381.unsigned int value = v340;
        v381.CMTimeEpoch epoch = v129;
      }
      uint64_t v116 = v354;
      if ((*(unsigned char *)(v35 + 332) & 1) == 0) {
        goto LABEL_276;
      }
      CMTime lhs = *(CMTime *)(v35 + 320);
      CMTime rhs = v381;
      CMTimeSubtract(&v372, &lhs, &rhs);
      CMTimeAbsoluteValue(&time1, &v372);
      CMTimeMake(&time2, 1, 1);
      if (CMTimeCompare(&time1, &time2) >= 1 && (*(_DWORD *)(v35 + 392) & 0xF) != 5)
      {
        if ((*(unsigned char *)(v35 + 356) & 1) == 0
          || (lhs = v381, CMTime rhs = *(CMTime *)(v35 + 344), (CMTimeCompare(&lhs, &rhs) & 0x80000000) == 0))
        {
          if ((*(unsigned char *)(v35 + 380) & 1) == 0
            || (lhs = v381, CMTime rhs = *(CMTime *)(v35 + 368), CMTimeCompare(&lhs, &rhs) <= 0))
          {
LABEL_276:
            if (dword_1E9350BB0)
            {
              LODWORD(type.value) = 0;
              LOBYTE(v369.value) = 0;
              CFArrayRef v130 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              unsigned int v131 = type.value;
              if (os_log_type_enabled(v130, OS_LOG_TYPE_DEFAULT)) {
                unsigned int v132 = v131;
              }
              else {
                unsigned int v132 = v131 & 0xFFFFFFFE;
              }
              if (v132)
              {
                CFTypeRef v133 = v378;
                if (v378) {
                  uint64_t v134 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
                }
                else {
                  uint64_t v134 = "";
                }
                v341 = v134;
                CFTypeRef v135 = v379;
                if (v379) {
                  CFTypeRef v136 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
                }
                else {
                  CFTypeRef v136 = "";
                }
                if (*(_DWORD *)(v35 + 332)) {
                  long long v137 = "New time differs the seek request more than 1s.";
                }
                else {
                  long long v137 = "TimeJump while no seek request.";
                }
                CMTime lhs = v381;
                Float64 v138 = CMTimeGetSeconds(&lhs);
                CMTime lhs = *(CMTime *)(v35 + 1184);
                Float64 v139 = CMTimeGetSeconds(&lhs);
                LODWORD(rhs.value) = 136316930;
                *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"fpfs_BytePumpFn";
                LOWORD(rhs.flags) = 2048;
                *(void *)((char *)&rhs.flags + 2) = v133;
                HIWORD(rhs.epoch) = 2082;
                uint64_t v383 = (uint64_t)v341;
                *(_WORD *)v384 = 2048;
                *(void *)&v384[2] = v135;
                __int16 v385 = 2082;
                v386 = v136;
                __int16 v387 = 2082;
                *(void *)v388 = v137;
                *(_WORD *)&v388[8] = 2048;
                *(Float64 *)&v388[10] = v138;
                *(_WORD *)&v388[18] = 2048;
                *(Float64 *)&v388[20] = v139;
                _os_log_send_and_compose_impl();
                uint64_t v17 = v363;
                a4 = v362;
                uint64_t v116 = v354;
                unsigned int v117 = theBuffer;
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            CMTime lhs = v381;
            fpfsi_setLastSeekTimeSet(v35, (uint64_t)&lhs);
          }
        }
      }
      CFTypeRef v140 = v379;
      fpfs_GetNextTimeToPlay(v35, 0, (uint64_t)&v370);
      fpfsi_PrepareToStartWhenLikelyToKeepUp((uint64_t)v140, &v370);
    }
    if ((a4 & 0x4000) != 0
      && *(void *)(v35 + 1112) == v116
      && (*(unsigned char *)(v35 + 465) || *(unsigned char *)(v35 + 593) && *(unsigned char *)(v35 + 553)))
    {
      uint64_t v141 = MEMORY[0x1E4F1FA48];
      *(_OWORD *)(v35 + 408) = *MEMORY[0x1E4F1FA48];
      *(void *)(v35 + 424) = *(void *)(v141 + 16);
    }
    long long v142 = *(_OWORD *)&v355->value;
    uint64_t v143 = v35 + 24 * v116;
    *(void *)(v143 + 1224) = v355->epoch;
    *(_OWORD *)(v143 + 1208) = v142;
    memset(&lhs, 0, sizeof(lhs));
    fpfs_GetTime(v35, (uint64_t)&lhs);
  }
  if (v117) {
    size_t DataLength = CMBlockBufferGetDataLength(v117);
  }
  else {
    size_t DataLength = 0;
  }
  uint64_t updated = fpfs_UpdateSubStreamRoleInPumpFunc(v35, v353, v17, v350);
  uint64_t v146 = updated;
  uint64_t v147 = v35 + 16 * v116 + 8 * updated;
  size_t v342 = DataLength;
  if (!*(void *)(v147 + 1000))
  {
    if (!v117)
    {
      BOOL v364 = 1;
      if ((a4 & 2) != 0 && *(void *)(v35 + 1112) == v116)
      {
        uint64_t v170 = v35;
        CMTime lhs = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
        CFTypeRef v171 = v379;
        fpfs_GetItemBufferedDuration(v379, &lhs, 0, 0);
        CMTime rhs = lhs;
        CMTime v381 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
        int32_t v172 = CMTimeCompare(&rhs, &v381);
        uint64_t v173 = *(unsigned int *)(v360 + 632);
        uint64_t v174 = *(void *)(v360 + 80);
        CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(v360 + 72));
        if (v174) {
          uint64_t v176 = Count + 1;
        }
        else {
          uint64_t v176 = Count;
        }
        if (FigPlaybackGetEffectiveActionAtEnd(v173, v176) || v172 >= 1)
        {
          BOOL v364 = 1;
          uint64_t v35 = v170;
          uint64_t v116 = v354;
          goto LABEL_316;
        }
        fpfs_StopPlayingItemWithOSStatus(v360, (uint64_t)v171, 0);
        int v39 = 1;
        uint64_t v35 = v170;
        goto LABEL_423;
      }
LABEL_316:
      CFTypeRef v149 = v379;
      CFTypeRef v356 = v378;
      uint64_t v150 = CMBaseObjectGetDerivedStorage();
      uint64_t v151 = v150;
      uint64_t v152 = *(void *)(v150 + 1048);
      if (v152)
      {
        while (*(unsigned __int8 *)(v152 + 180) != v17
             || *(void *)(v152 + 48) != *(void *)(v150 + 16 * v116 + 1000))
        {
          uint64_t v152 = *(void *)(v152 + 8);
          if (!v152) {
            goto LABEL_320;
          }
        }
        char v153 = 1;
        if ((a4 & 0x8000) != 0) {
          *(unsigned char *)(v152 + 188) = 1;
        }
      }
      else
      {
LABEL_320:
        char v153 = 0;
      }
      unsigned int v351 = v146;
      if ((a4 & 0x840) == 0x40)
      {
        char v154 = v153 ^ 1;
        if (*(void *)(v150 + 1112) != v116) {
          char v154 = 1;
        }
        if ((v154 & 1) == 0 && !*(unsigned char *)(v152 + 188))
        {
          if (dword_1E9350BB0)
          {
            LODWORD(v381.value) = 0;
            LOBYTE(type.value) = 0;
            int v200 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int v201 = v381.value;
            if (os_log_type_enabled(v200, type.value)) {
              unsigned int v202 = v201;
            }
            else {
              unsigned int v202 = v201 & 0xFFFFFFFE;
            }
            if (v202)
            {
              if (v356) {
                int v203 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
              }
              else {
                int v203 = "";
              }
              if (v149) {
                v303 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
              }
              else {
                v303 = "";
              }
              LODWORD(rhs.value) = 136316418;
              *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"fpfsi_checkIfActiveSubstreamSegmentProduceSample";
              LOWORD(rhs.flags) = 2048;
              *(void *)((char *)&rhs.flags + 2) = v356;
              HIWORD(rhs.epoch) = 2082;
              uint64_t v383 = (uint64_t)v203;
              *(_WORD *)v384 = 2048;
              *(void *)&v384[2] = v149;
              __int16 v385 = 2082;
              v386 = v303;
              __int16 v387 = 2114;
              *(void *)v388 = a9;
              _os_log_send_and_compose_impl();
              uint64_t v17 = v363;
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            a4 = v362;
            uint64_t v116 = v354;
            unsigned int v117 = theBuffer;
            uint64_t v146 = v351;
          }
          uint64_t v304 = *(void *)(v151 + 2544);
          if (v304)
          {
            uint64_t v305 = *(void *)(CMBaseObjectGetVTable() + 16);
            uint64_t v306 = v305 ? v305 : 0;
            v307 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v306 + 32);
            if (v307) {
              v307(v304, 0x1EE582B78, 0x1EE5623B8, 1);
            }
          }
        }
      }
      CFErrorRef v155 = err;
      if (v117)
      {
        uint64_t v156 = *(void *)(v35 + 1176);
        if (v156)
        {
          uint64_t v157 = *(void *)(v35 + 1048);
          if (v157)
          {
            while (*(void *)(v157 + 16) != v156)
            {
              uint64_t v157 = *(void *)(v157 + 8);
              if (!v157) {
                goto LABEL_398;
              }
            }
            BOOL v177 = *(void *)(v157 + 48) == *(void *)(v35 + 16 * *(unsigned __int8 *)(v157 + 180) + 1008)
                && (uint64_t)fpfs_IsTrialReadyToComplete(v35, v157);
            if (fpfs_CheckVideoSyncQueue(v157, v177))
            {
              uint64_t v204 = fpfs_FinishVideoSync(v157);
              if (v204)
              {
                uint64_t v40 = v204;
                uint64_t v329 = v35;
                LODWORD(v381.value) = 0;
                LOBYTE(type.value) = 0;
                v330 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                unsigned int v331 = v381.value;
                if (os_log_type_enabled(v330, type.value)) {
                  unsigned int v332 = v331;
                }
                else {
                  unsigned int v332 = v331 & 0xFFFFFFFE;
                }
                if (v332)
                {
                  LODWORD(rhs.value) = 136316162;
                  *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"fpfs_BytePumpFn";
                  LOWORD(rhs.flags) = 1024;
                  *(CMTimeFlags *)((char *)&rhs.flags + 2) = v40;
                  WORD1(rhs.epoch) = 1024;
                  HIDWORD(rhs.epoch) = v156;
                  LOWORD(v383) = 1024;
                  *(_DWORD *)((char *)&v383 + 2) = v363;
                  HIWORD(v383) = 1024;
                  *(_DWORD *)v384 = v351;
                  _os_log_send_and_compose_impl();
                }
                fig_log_call_emit_and_clean_up_after_send_and_compose();
                LODWORD(v17) = v363;
                int v39 = v364;
                LOBYTE(a4) = v362;
                uint64_t v35 = v329;
                uint64_t DerivedStorage = v360;
                CFArrayRef v37 = v345;
                goto LABEL_515;
              }
            }
          }
        }
LABEL_398:
        *(void *)(v35 + 1176) = 0;
        uint64_t v116 = v354;
        uint64_t v146 = v351;
      }
      if (v343)
      {
        uint64_t v205 = *(void *)(v35 + 16 * v116 + 8 * v146 + 1000);
        if (v205)
        {
          uint64_t v206 = *(void *)(CMBaseObjectGetVTable() + 16);
          uint64_t v207 = v206 ? v206 : 0;
          double v208 = *(void (**)(uint64_t))(v207 + 40);
          if (v208) {
            v208(v205);
          }
        }
      }
      if (v17 != 2 && (a4 & 8) != 0) {
        fpfs_EnqueueNotification(v356, @"TimeJumped", v149, 0);
      }
      memset(&lhs, 0, sizeof(lhs));
      CMTime rhs = *(CMTime *)(v35 + 1328);
      if (!fpfsi_GetDuration((uint64_t)v149, (long long *)&lhs.value))
      {
        CMTime v381 = rhs;
        CMTime type = lhs;
        if (CMTimeCompare(&v381, &type))
        {
          NotificationPayloadForProperties = fpfs_CreateNotificationPayloadForProperties(v356, (uint64_t)v149, v216, v217, v218, v219, v220, v221, @"CurrentDuration", 0);
          fpfs_EnqueueNotification(v356, @"DurationChanged", v149, NotificationPayloadForProperties);
          if (NotificationPayloadForProperties) {
            CFRelease(NotificationPayloadForProperties);
          }
        }
      }
      if (v117)
      {
        uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
        if ((a4 & 0x40) != 0 || UpTimeNanoseconds - *(void *)(v35 + 2344) >= 500000001) {
          fpfsi_EnqueuePlayableRangeChangedNotification(v149);
        }
      }
      int v39 = v364;
      if ((a4 & 2) != 0)
      {
        fpfs_EndCurrentDiscontinuity((const __CFArray *)v149, v17, v146, 1);
        if (*(unsigned char *)(v35 + 470))
        {
          memset(&lhs, 0, sizeof(lhs));
          fpfsi_LastNonSparseSampleEnd((uint64_t)v149, (uint64_t)&lhs);
          if (lhs.flags)
          {
            *(CMTime *)(v35 + 480) = lhs;
            fpfsi_EnqueueEndTimeChangedNotification(v149);
          }
          if (*(unsigned char *)(v35 + 332))
          {
            if (!*(void *)(v35 + 1048)
              || (*(unsigned char *)(v35 + 1508) & 1) != 0
              && (CMTime rhs = *(CMTime *)(v35 + 1496), v381 = *(CMTime *)(v35 + 480), CMTimeCompare(&rhs, &v381) > 0))
            {
              fpfs_StopPlayingItem(v360, v149, 0);
LABEL_423:
              CFArrayRef v37 = v345;
              goto LABEL_695;
            }
          }
        }
      }
      fpfsi_TrimCachedSamplesFromItem((uint64_t)v149);
      if ((a4 & 0x40) != 0)
      {
        CMTime lhs = *(CMTime *)(v35 + 1472);
        if (fpfsi_PlaybackHasBufferedBeyondTime((uint64_t)v149, (uint64_t)&lhs)) {
          fpfs_SignalImageQueueGaugeEnqueueingCompleteAfterClampTime();
        }
      }
      uint64_t v210 = *(void *)(v35 + 1600);
      if (v210 && (*(unsigned char *)(v35 + 1508) & 1) == 0 && v345 && !*(void *)(v35 + 1592))
      {
        CMTime v381 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
        LODWORD(type.value) = 0;
        BOOL v211 = fpsi_TryDateSeekWithSeekID((uint64_t)v149, v210, (int *)&type, (uint64_t)&v381, *(unsigned int *)(v35 + 2200), *(unsigned int *)(v35 + 2224), 0);
        if (dword_1E9350BB0)
        {
          LODWORD(v369.value) = 0;
          v402[0] = OS_LOG_TYPE_DEFAULT;
          uint64_t v212 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v213 = v369.value;
          if (os_log_type_enabled(v212, v402[0])) {
            unsigned int v214 = v213;
          }
          else {
            unsigned int v214 = v213 & 0xFFFFFFFE;
          }
          if (v214)
          {
            if (v356) {
              uint64_t v215 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
            }
            else {
              uint64_t v215 = "";
            }
            CMBlockBufferRef theBuffera = (CMBlockBufferRef)v215;
            if (v149) {
              char v264 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
            }
            else {
              char v264 = "";
            }
            uint64_t v265 = *(void *)(v35 + 1600);
            if (v211) {
              CMTime v266 = "proceeding";
            }
            else {
              CMTime v266 = "failed";
            }
            CMTime lhs = v381;
            Float64 v267 = CMTimeGetSeconds(&lhs);
            CMTime lhs = *(CMTime *)(v35 + 1568);
            Float64 v268 = CMTimeGetSeconds(&lhs);
            LODWORD(rhs.value) = 136317442;
            *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"fpfs_BytePumpFn";
            LOWORD(rhs.flags) = 2048;
            *(void *)((char *)&rhs.flags + 2) = v356;
            HIWORD(rhs.epoch) = 2082;
            uint64_t v383 = (uint64_t)theBuffera;
            *(_WORD *)v384 = 2048;
            *(void *)&v384[2] = v149;
            __int16 v385 = 2082;
            v386 = v264;
            __int16 v387 = 2114;
            *(void *)v388 = v265;
            *(_WORD *)&v388[8] = 2080;
            *(void *)&v388[10] = v266;
            *(_WORD *)&v388[18] = 2048;
            *(Float64 *)&v388[20] = v267;
            *(_WORD *)&v388[28] = 2048;
            Float64 v389 = v268;
            __int16 v390 = 1024;
            int v391 = type.value;
            _os_log_send_and_compose_impl();
            LODWORD(v17) = v363;
            uint64_t v116 = v354;
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          a4 = v362;
          CFErrorRef v155 = err;
          LODWORD(v146) = v351;
          int v39 = v364;
        }
        if (!v211)
        {
          if (LODWORD(type.value))
          {
            int v269 = *(_DWORD *)(v35 + 2200);
            if (v269) {
              fpfs_SeekDidFail(v356, v149, v269, type.value);
            }
          }
          v270 = *(const void **)(v35 + 1600);
          if (v270)
          {
            CFRelease(v270);
            *(void *)(v35 + 1600) = 0;
          }
        }
      }
      fpfs_CheckPrebufferedLevels(&v377, v149, 1, v116, 0);
      if (!v343
        || *(float *)(v360 + 108) == 0.0
        || !*(void *)(v35 + 16 * v116 + 8 * v146 + 1000)
        || *(unsigned char *)(v35 + 1564))
      {
        goto LABEL_550;
      }
      memset(&v381, 0, sizeof(v381));
      CMTime lhs = *(CMTime *)(v35 + 1208);
      CMTime rhs = *(CMTime *)(v35 + 1184);
      CMTimeSubtract(&v381, &lhs, &rhs);
      memset(&type, 0, sizeof(type));
      if (v381.flags)
      {
        CMTime type = v381;
      }
      else
      {
        fpfs_GetTime(v35, (uint64_t)&v368);
        CMTime lhs = v377;
        fpfs_TimeAfterPlayback(v360, &v368, &lhs, &type);
      }
      if (type.flags)
      {
        if (dword_1E9350BB0)
        {
          LODWORD(v369.value) = 0;
          v402[0] = OS_LOG_TYPE_DEFAULT;
          v294 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v295 = v369.value;
          if (os_log_type_enabled(v294, v402[0])) {
            unsigned int v296 = v295;
          }
          else {
            unsigned int v296 = v295 & 0xFFFFFFFE;
          }
          if (v296)
          {
            if (v356) {
              uint64_t v17 = CMBaseObjectGetDerivedStorage() + 824;
            }
            else {
              uint64_t v17 = (uint64_t)"";
            }
            if (v149) {
              v312 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
            }
            else {
              v312 = "";
            }
            CMTime lhs = type;
            Float64 v313 = CMTimeGetSeconds(&lhs);
            CMTime lhs = v377;
            Float64 v314 = CMTimeGetSeconds(&lhs);
            LODWORD(rhs.value) = 136316674;
            *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"fpfs_BytePumpFn";
            LOWORD(rhs.flags) = 2048;
            *(void *)((char *)&rhs.flags + 2) = v356;
            HIWORD(rhs.epoch) = 2082;
            uint64_t v383 = v17;
            *(_WORD *)v384 = 2048;
            *(void *)&v384[2] = v149;
            __int16 v385 = 2082;
            v386 = v312;
            __int16 v387 = 2048;
            *(Float64 *)v388 = v313;
            *(_WORD *)&v388[8] = 2048;
            *(Float64 *)&v388[10] = v314;
            _os_log_send_and_compose_impl();
            LODWORD(v17) = v363;
            int v39 = v364;
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          a4 = v362;
          CFErrorRef v155 = err;
        }
        CMTime lhs = type;
        CMTime rhs = v377;
        uint64_t v40 = fpfs_RequestNextIFrameStepUnlocked(v149, &lhs, &rhs);
      }
      else
      {
LABEL_550:
        uint64_t v40 = 0;
      }
      uint64_t v271 = *(void *)(v35 + 96);
      if (v271)
      {
        BOOL v272 = (~a4 & 0xC0) == 0 || *(_DWORD *)(v35 + 1888) == 1;
        __int16 v273 = (void *)(v272 ? MEMORY[0x1E4F1CFD0] : MEMORY[0x1E4F1CFC8]);
        uint64_t v274 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v275 = v274 ? v274 : 0;
        v276 = *(void (**)(uint64_t, __CFString *, void))(v275 + 56);
        if (v276) {
          v276(v271, @"AfmfpbProperty_IsBufferFull", *v273);
        }
      }
      if ((a4 & 0x40) != 0)
      {
        if (!*(unsigned char *)(v35 + 2128))
        {
          *(unsigned char *)(v35 + 2128) = 1;
          fpfs_EnqueueNotification(v356, @"NewAccessLogEntry", v149, 0);
        }
        if (dword_1E9350BB0)
        {
          LODWORD(v381.value) = 0;
          LOBYTE(type.value) = 0;
          __int16 v277 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v278 = v381.value;
          if (os_log_type_enabled(v277, type.value)) {
            unsigned int v279 = v278;
          }
          else {
            unsigned int v279 = v278 & 0xFFFFFFFE;
          }
          if (v279)
          {
            if (v356) {
              uint64_t v17 = CMBaseObjectGetDerivedStorage() + 824;
            }
            else {
              uint64_t v17 = (uint64_t)"";
            }
            if (v149) {
              CMTimeValue v280 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
            }
            else {
              CMTimeValue v280 = "";
            }
            CMTime lhs = v377;
            Float64 v281 = CMTimeGetSeconds(&lhs);
            fpfs_GetTime(v35, (uint64_t)&v367);
            Float64 v282 = CMTimeGetSeconds(&v367);
            LODWORD(rhs.value) = 136316930;
            *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"fpfs_BytePumpFn";
            LOWORD(rhs.flags) = 2048;
            *(void *)((char *)&rhs.flags + 2) = v356;
            HIWORD(rhs.epoch) = 2082;
            uint64_t v383 = v17;
            *(_WORD *)v384 = 2048;
            *(void *)&v384[2] = v149;
            __int16 v385 = 2082;
            v386 = v280;
            __int16 v387 = 1024;
            LODWORD(v17) = v363;
            *(_DWORD *)v388 = v363;
            *(_WORD *)&v388[4] = 2048;
            *(Float64 *)&v388[6] = v281;
            *(_WORD *)&v388[14] = 2048;
            *(Float64 *)&v388[16] = v282;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          CFErrorRef v155 = err;
          int v39 = v364;
        }
        if ((*(unsigned char *)(v35 + 1460) & 1) != 0 && *(unsigned char *)(v35 + 466) && GetCurrentManifold(v35, v17, v351))
        {
          uint64_t CurrentManifold = GetCurrentManifold(v35, v17, v351);
          FigManifoldFlush(CurrentManifold);
        }
        uint64_t v284 = *(void *)(CMBaseObjectGetDerivedStorage() + 1048);
        if (v284)
        {
          CFStringRef v285 = (const __CFString *)*MEMORY[0x1E4F1F2E0];
          v286 = (const void *)*MEMORY[0x1E4F1CFD0];
          do
          {
            if (!*(unsigned char *)(v284 + 182) && *(unsigned __int8 *)(v284 + 180) == v363 && !*(unsigned char *)(v284 + 184))
            {
              lhs.unsigned int value = 0;
              CFAllocatorRef v287 = (const __CFAllocator *)FigGetAllocatorForMedia();
              if (!CMSampleBufferCreate(v287, 0, 1u, 0, 0, 0, 0, 0, 0, 0, 0, (CMSampleBufferRef *)&lhs))
              {
                CMSetAttachment((CMAttachmentBearerRef)lhs.value, v285, v286, 0);
                CMBufferQueueEnqueue(*(CMBufferQueueRef *)(v284 + 80), (CMBufferRef)lhs.value);
                CFRelease((CFTypeRef)lhs.value);
              }
            }
            uint64_t v284 = *(void *)(v284 + 8);
          }
          while (v284);
        }
        if ((*(unsigned char *)(v35 + 1460) & 1) != 0 && *(unsigned char *)(v35 + 466))
        {
          CMTime lhs = *(CMTime *)(v35 + 1448);
          fpfsi_applyTimeToPausePlayback(v149, (long long *)&lhs.value, 1, 1);
        }
        fpfsi_RTCReportingUpdateItemStats((uint64_t)v149);
        LOBYTE(a4) = v362;
        if (*(void *)(v35 + 1760))
        {
          uint64_t v288 = *(void *)(v35 + 1048);
          if (v288)
          {
            while (*(_DWORD *)(v288 + 32) != 1986618469
                 || *(void *)(v288 + 48) != *(void *)(v35 + 16 * *(unsigned __int8 *)(v288 + 180) + 1000)
                 || *(_DWORD *)(v288 + 152) != 6)
            {
              uint64_t v288 = *(void *)(v288 + 8);
              if (!v288) {
                goto LABEL_601;
              }
            }
            uint64_t SwitchOptions = GetSwitchOptions(v35, 0);
            memset(&type, 0, sizeof(type));
            memset(&v369, 0, sizeof(v369));
            fpfs_GetNextTimeToPlay(v35, 0, (uint64_t)&v366);
            CMTime lhs = *(CMTime *)(v35 + 1184);
            CMTimeAdd(&v369, &v366, &lhs);
            if (dword_1E9350BB0)
            {
              LODWORD(v381.value) = 0;
              v402[0] = OS_LOG_TYPE_DEFAULT;
              v298 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              unsigned int v299 = v381.value;
              if (os_log_type_enabled(v298, v402[0])) {
                unsigned int v300 = v299;
              }
              else {
                unsigned int v300 = v299 & 0xFFFFFFFE;
              }
              if (v300)
              {
                uint64_t v301 = SwitchOptions;
                if (v356) {
                  v302 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
                }
                else {
                  v302 = "";
                }
                if (v149) {
                  v319 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
                }
                else {
                  v319 = "";
                }
                LODWORD(rhs.value) = 136316162;
                *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"fpfs_BytePumpFn";
                LOWORD(rhs.flags) = 2048;
                *(void *)((char *)&rhs.flags + 2) = v356;
                HIWORD(rhs.epoch) = 2082;
                uint64_t v383 = (uint64_t)v302;
                *(_WORD *)v384 = 2048;
                *(void *)&v384[2] = v149;
                __int16 v385 = 2082;
                v386 = v319;
                _os_log_send_and_compose_impl();
                uint64_t SwitchOptions = v301;
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              LOBYTE(a4) = v362;
              CFErrorRef v155 = err;
              int v39 = v364;
            }
            fpfs_GetItemBufferedDuration(v149, &type, &lhs, 0);
            uint64_t v320 = *(void *)(v35 + 1760);
            CMTime rhs = v369;
            CMTime v381 = type;
            if (!fpfs_SetAlternateWithContext(v356, v149, v320, SwitchOptions))
            {
              v321 = *(const void **)(v35 + 1760);
              if (v321)
              {
                CFRelease(v321);
                *(void *)(v35 + 1760) = 0;
              }
            }
          }
        }
LABEL_601:
        LODWORD(v17) = v363;
        if (a13)
        {
          fpfs_GetTime(v35, (uint64_t)&v365);
          CMTime rhs = *(CMTime *)(v35 + 1184);
          CMTimeAdd(&lhs, &v365, &rhs);
          *a13 = lhs;
        }
      }
      fpfsi_MakeNextItemReadyForInspectionIfItemEndedOrBeyondFwdEnd(v149);
      uint64_t DerivedStorage = v360;
      if (v155)
      {
LABEL_604:
        uint64_t v289 = v35;
        CFTypeRef v290 = v379;
        uint64_t v291 = CMBaseObjectGetDerivedStorage();
        uint64_t v292 = CMBaseObjectGetDerivedStorage();
        memset(&lhs, 0, sizeof(lhs));
        fpfs_GetItemBufferedDuration(v290, &lhs, 0, 0);
        if (*(float *)(v291 + 848) == 0.0 || (CMTime rhs = lhs, CMTimeGetSeconds(&rhs) <= 0.0))
        {
          fpfs_StopPlayingItem(v292, v290, v155);
          uint64_t v35 = v289;
          size_t v38 = v342;
        }
        else
        {
          v293 = *(const void **)(v291 + 504);
          *(void *)(v291 + 504) = v155;
          CFRetain(v155);
          uint64_t v35 = v289;
          size_t v38 = v342;
          if (v293) {
            CFRelease(v293);
          }
        }
        LODWORD(v40) = 0;
        CFArrayRef v37 = v345;
        goto LABEL_687;
      }
LABEL_685:
      CFArrayRef v37 = v345;
      size_t v38 = v342;
LABEL_686:
      if (v40) {
        goto LABEL_27;
      }
      goto LABEL_687;
    }
    uint64_t v158 = MEMORY[0x1E4F1F9F8];
    uint64_t v159 = v116;
    CMTimeValue v160 = *MEMORY[0x1E4F1F9F8];
    unsigned int v352 = updated;
    unsigned int v161 = updated;
    CMTimeValue v396 = v160;
    CMTimeScale v162 = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 8);
    CMTimeScale v397 = v162;
    CMTimeValue v394 = v160;
    CMTimeScale v395 = v162;
    memset(&v369, 0, sizeof(v369));
    CMTime lhs = *v355;
    CMTime rhs = *(CMTime *)(v35 + 1184);
    CMTimeSubtract(&v369, &lhs, &rhs);
    uint64_t v163 = v35 + 24 * v161 + 8 * v159;
    uint64_t v166 = *(OpaqueCMBlockBuffer **)(v163 + 176);
    uint64_t v165 = (CFTypeRef *)(v163 + 176);
    uint64_t v164 = v166;
    v357 = (CMBlockBufferRef *)v165;
    unsigned int v338 = a4 & 0x10;
    if (v166)
    {
      if (CMBlockBufferGetDataLength(v117))
      {
        uint64_t appended = CMBlockBufferAppendBufferReference(v164, v117, 0, 0, 0);
        if (appended)
        {
          uint64_t v40 = appended;
          BOOL v364 = 1;
          LODWORD(v17) = v363;
          LOBYTE(a4) = v362;
          uint64_t DerivedStorage = v360;
          CFArrayRef v37 = v345;
          size_t v38 = v342;
          goto LABEL_499;
        }
      }
    }
    else
    {
      *uint64_t v165 = CFRetain(v117);
    }
    uint64_t v178 = 0;
    v347 = (uint64_t *)(v348 + 1008);
    uint64_t v349 = v35;
    CMTimeValue v392 = v369.value;
    CMTimeScale timescale = v369.timescale;
    *(void *)v402 = v369.value;
    CMTimeScale v403 = v369.timescale;
    CMTimeValue v400 = v160;
    CMTimeScale v401 = v162;
    uint64_t v179 = *(unsigned int *)(v158 + 12);
    lhs.unsigned int value = v35 + 1048;
    *(void *)&lhs.CMTimeScale timescale = v35 + 1064;
    lhs.CMTimeEpoch epoch = v35 + 1080;
    CMTimeEpoch v334 = v369.epoch;
    CMTimeEpoch v180 = v369.epoch;
    CMTimeFlags flags = v369.flags;
    CMTimeFlags v181 = v369.flags;
    CMTimeEpoch v182 = *(void *)(v158 + 16);
    do
    {
      uint64_t v183 = **((void **)&lhs.value + v178);
      if (v183)
      {
        CMTimeEpoch v184 = v182;
        uint64_t v185 = v179;
        do
        {
          if (*(void *)(v183 + 64) != a11) {
            goto LABEL_369;
          }
          CMTime v381 = *(CMTime *)(v183 + 216);
          CMTime type = *(CMTime *)(v183 + 128);
          CMTimeSubtract(&rhs, &v381, &type);
          CMTimeValue v398 = rhs.value;
          uint64_t v179 = rhs.flags;
          CMTimeScale v399 = rhs.timescale;
          if ((rhs.flags & 0x1D) != 1) {
            goto LABEL_369;
          }
          CMTimeEpoch v182 = rhs.epoch;
          if ((v181 & 1) == 0
            || (rhs.unsigned int value = v398,
                rhs.CMTimeScale timescale = v399,
                v381.unsigned int value = *(void *)v402,
                v381.CMTimeScale timescale = v403,
                v381.CMTimeFlags flags = v181,
                v381.CMTimeEpoch epoch = v180,
                CMTimeCompare(&rhs, &v381) >= 1))
          {
            *(void *)v402 = v398;
            CMTimeScale v403 = v399;
            CMTimeFlags v181 = v179;
            CMTimeEpoch v180 = v182;
          }
          int v186 = *(_DWORD *)(v183 + 32);
          if (v186 != 1986618469 && v186 != 1936684398) {
            goto LABEL_369;
          }
          if (v185)
          {
            rhs.unsigned int value = v398;
            rhs.CMTimeScale timescale = v399;
            rhs.CMTimeFlags flags = v179;
            rhs.CMTimeEpoch epoch = v182;
            v381.unsigned int value = v400;
            v381.CMTimeScale timescale = v401;
            v381.CMTimeFlags flags = v185;
            v381.CMTimeEpoch epoch = v184;
            if (CMTimeCompare(&rhs, &v381) < 1) {
              goto LABEL_369;
            }
          }
          if (*(unsigned __int8 *)(v183 + 180) == v363)
          {
            CMTimeValue v400 = v398;
            CMTimeScale v401 = v399;
          }
          else
          {
LABEL_369:
            uint64_t v179 = v185;
            CMTimeEpoch v182 = v184;
          }
          uint64_t v183 = *(void *)(v183 + 8);
          CMTimeEpoch v184 = v182;
          uint64_t v185 = v179;
        }
        while (v183);
      }
      int v187 = v179 & 0x1D;
      BOOL v188 = (v181 & 0x1D) == 1;
      if ((v181 & 0x1D) == 1 && v187 == 1)
      {
        BOOL v188 = 1;
        goto LABEL_377;
      }
      ++v178;
    }
    while (v178 != 3);
    if (v187 != 1)
    {
      CMTimeValue v400 = v392;
      CMTimeScale v401 = timescale;
      LODWORD(v179) = flags;
      CMTimeEpoch v182 = v334;
    }
LABEL_377:
    a4 = v362;
    CMTimeValue v396 = *(void *)v402;
    CMTimeScale v397 = v403;
    CMTimeValue v394 = v400;
    CMTimeScale v395 = v401;
    CFTypeRef v189 = v379;
    CFIndex v190 = (OpaqueCMBlockBuffer *)*v165;
    CFIndex v191 = (void *)CMBaseObjectGetDerivedStorage();
    rhs.unsigned int value = 0;
    v381.unsigned int value = 0;
    ArrayCFStringRef Value = (const __CFArray *)v191[50];
    if (ArrayValue) {
      ArrayCFStringRef Value = (const __CFArray *)FigCFDictionaryGetArrayValue();
    }
    lhs.unsigned int value = v394;
    lhs.CMTimeScale timescale = v395;
    lhs.CMTimeFlags flags = v179;
    lhs.CMTimeEpoch epoch = v182;
    uint64_t v40 = FigManifoldFactoryCreateManifold(0, v190, 1u, &lhs, v363 == 1, (uint64_t)fpfs_NewTrackNote, (uint64_t)fpfs_MPEG2ManifoldErrorCallback, 0, ArrayValue, 31, (uint64_t)v189, &rhs);
    uint64_t v193 = (const void *)rhs.value;
    if (v40)
    {
      uint64_t v17 = v363;
      CFArrayRef v37 = v345;
    }
    else
    {
      CFArrayRef v37 = v345;
      if (rhs.value)
      {
        BOOL v194 = !v188;
        uint64_t v17 = v363;
        unsigned int v117 = theBuffer;
        if (!v194)
        {
          CFAllocatorRef v195 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
          lhs.unsigned int value = v396;
          lhs.CMTimeScale timescale = v397;
          lhs.CMTimeFlags flags = v181;
          lhs.CMTimeEpoch epoch = v180;
          CFDictionaryRef v196 = CMTimeCopyAsDictionary(&lhs, v195);
          uint64_t v193 = (const void *)rhs.value;
          if (v196)
          {
            CFDictionaryRef v197 = v196;
            uint64_t v198 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v198) {
              uint64_t v199 = v198;
            }
            else {
              uint64_t v199 = 0;
            }
            CFTypeRef v241 = *(void (**)(const void *, __CFString *, CFDictionaryRef))(v199 + 56);
            if (v241) {
              v241(v193, @"FMFD_HintForStartTime", v197);
            }
            CFRelease(v197);
            uint64_t v193 = (const void *)rhs.value;
          }
        }
LABEL_472:
        if (v40)
        {
LABEL_479:
          uint64_t v35 = v349;
          goto LABEL_480;
        }
        uint64_t v35 = v349;
        if (!v193)
        {
LABEL_480:
          if (v193) {
            CFRelease(v193);
          }
          uint64_t DerivedStorage = v360;
          if (v381.value) {
            CFRelease((CFTypeRef)v381.value);
          }
          goto LABEL_484;
        }
        if (_os_feature_enabled_impl())
        {
          if (!v191[425])
          {
            uint64_t v242 = FigSampleAttachmentCollectionRulesCopyForManifold(*MEMORY[0x1E4F1CF80], 0, v191 + 425);
            if (v242)
            {
              uint64_t v333 = v242;
              FigSignalErrorAt();
              uint64_t v40 = v333;
              uint64_t v35 = v349;
              uint64_t DerivedStorage = v360;
LABEL_484:
              size_t v38 = v342;
              if (v352) {
                uint64_t v353 = *v347;
              }
              if (v40 == -16048 || v40 == -16044)
              {
                size_t v248 = CMBlockBufferGetDataLength(*v357);
                unint64_t v249 = 0x20000;
                if (v40 == -16048) {
                  unint64_t v249 = 0x200000;
                }
                BOOL v364 = 1;
                if (v248 > v249) {
                  goto LABEL_499;
                }
              }
              else
              {
                if (v40)
                {
                  BOOL v364 = 1;
                  goto LABEL_499;
                }
                fpfs_prepareDataForInject(*v357);
                uint64_t v243 = GetCurrentManifold(v35, v17, v352);
                uint64_t v40 = FigManifoldInjectData(v243, 0, (v362 >> 6) & 4 | (v338 >> 4) | (v362 >> 5) & 2, (uint64_t)*v357);
                BOOL v364 = v40 != 0;
                unsigned int v352 = fpfs_UpdateSubStreamRoleInPumpFunc(v35, v353, v17, v352);
                uint64_t v244 = v35 + 24 * v352 + 8 * v354;
                CMTimeFlags v247 = *(const void **)(v244 + 176);
                __int16 v246 = (void *)(v244 + 176);
                CFArrayRef v245 = v247;
                if (v247)
                {
                  CFRelease(v245);
                  *__int16 v246 = 0;
                }
                uint64_t DerivedStorage = v360;
                if (!GetCurrentManifold(v35, v17, v352))
                {
                  if (dword_1E9350BB0)
                  {
                    LODWORD(v381.value) = 0;
                    LOBYTE(type.value) = 0;
                    long long v253 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                    unsigned int v254 = v381.value;
                    if (os_log_type_enabled(v253, type.value)) {
                      unsigned int v255 = v254;
                    }
                    else {
                      unsigned int v255 = v254 & 0xFFFFFFFE;
                    }
                    if (v255)
                    {
                      CFTypeRef v256 = v378;
                      if (v378) {
                        uint64_t v17 = CMBaseObjectGetDerivedStorage() + 824;
                      }
                      else {
                        uint64_t v17 = (uint64_t)"";
                      }
                      CFTypeRef v315 = v379;
                      if (v379) {
                        v316 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
                      }
                      else {
                        v316 = "";
                      }
                      LODWORD(rhs.value) = 136316930;
                      *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"fpfs_BytePumpFn";
                      LOWORD(rhs.flags) = 2048;
                      *(void *)((char *)&rhs.flags + 2) = v256;
                      HIWORD(rhs.epoch) = 2082;
                      uint64_t v383 = v17;
                      *(_WORD *)v384 = 2048;
                      *(void *)&v384[2] = v315;
                      __int16 v385 = 2082;
                      v386 = v316;
                      __int16 v387 = 1024;
                      *(_DWORD *)v388 = v40;
                      *(_WORD *)&v388[4] = 1024;
                      LODWORD(v17) = v363;
                      *(_DWORD *)&v388[6] = v363;
                      *(_WORD *)&v388[10] = 1024;
                      *(_DWORD *)&v388[12] = v352;
                      _os_log_send_and_compose_impl();
                      uint64_t DerivedStorage = v360;
                      CFArrayRef v37 = v345;
                    }
                    else
                    {
                      uint64_t DerivedStorage = v360;
                    }
                    size_t v38 = v342;
                    fig_log_call_emit_and_clean_up_after_send_and_compose();
                    uint64_t v40 = 0;
                    LOBYTE(a4) = v362;
                    uint64_t v35 = v349;
                  }
                  else
                  {
                    uint64_t v40 = 0;
                  }
                  goto LABEL_499;
                }
                if (v40)
                {
LABEL_499:
                  int v39 = v364;
                  goto LABEL_686;
                }
              }
              uint64_t v116 = v354;
              uint64_t v146 = v352;
              goto LABEL_316;
            }
          }
        }
        if (!v352)
        {
          CMTimeValue v250 = rhs.value;
          uint64_t v251 = *(void *)(CMBaseObjectGetVTable() + 8);
          uint64_t v252 = v251 ? v251 : 0;
          uint64_t v259 = *(void (**)(CMTimeValue, __CFString *, void, CMTime *))(v252 + 48);
          if (v259)
          {
            v259(v250, @"FMFD_Type", *MEMORY[0x1E4F1CF80], &v381);
            CMTimeValue v260 = v381.value;
            if (v17 || !v381.value)
            {
              if (v17 != 1) {
                goto LABEL_478;
              }
              if (!v381.value) {
                goto LABEL_478;
              }
              uint64_t v261 = v191[318];
              if (!v261) {
                goto LABEL_478;
              }
              uint64_t v308 = *(void *)(CMBaseObjectGetVTable() + 16);
              uint64_t v309 = v308 ? v308 : 0;
              v317 = *(void (**)(uint64_t, uint64_t, uint64_t, CMTimeValue, void))(v309 + 48);
              if (!v317) {
                goto LABEL_478;
              }
              uint64_t v318 = 0x1EE585358;
            }
            else
            {
              uint64_t v261 = v191[318];
              if (!v261) {
                goto LABEL_478;
              }
              uint64_t v262 = *(void *)(CMBaseObjectGetVTable() + 16);
              uint64_t v263 = v262 ? v262 : 0;
              v317 = *(void (**)(uint64_t, uint64_t, uint64_t, CMTimeValue, void))(v263 + 48);
              if (!v317) {
                goto LABEL_478;
              }
              uint64_t v318 = 0x1EE585338;
            }
            v317(v261, 0x1EE582B78, v318, v260, 0);
          }
        }
LABEL_478:
        StoreCurrentManifold((uint64_t)v191, v17, v352, (const void *)rhs.value);
        uint64_t v193 = (const void *)rhs.value;
        goto LABEL_479;
      }
      uint64_t v17 = v363;
    }
    unsigned int v117 = theBuffer;
    goto LABEL_472;
  }
  if (!v117 && !a4
    || (uint64_t v148 = (a4 >> 6) & 4 | ((a4 & 0x10) >> 4) | (a4 >> 5) & 2, !v117) && !v148)
  {
    BOOL v364 = 1;
    goto LABEL_316;
  }
  uint64_t v168 = (uint64_t *)(v147 + 1000);
  uint64_t v169 = *(void *)(v35 + 1048);
  if (v169)
  {
    while (*(unsigned __int8 *)(v169 + 180) != v17
         || *(void *)(v169 + 48) != *(void *)(v35 + 16 * v354 + 1000))
    {
      uint64_t v169 = *(void *)(v169 + 8);
      if (!v169) {
        goto LABEL_443;
      }
    }
    if ((a4 & 0x8100) == 0x100) {
      *(unsigned char *)(v169 + 188) = 0;
    }
  }
LABEL_443:
  fpfs_prepareDataForInject(v117);
  uint64_t v223 = *v168;
  uint64_t v224 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v224) {
    uint64_t v225 = v224;
  }
  else {
    uint64_t v225 = 0;
  }
  CFArrayRef v37 = v345;
  uint64_t v116 = v354;
  int v226 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, OpaqueCMBlockBuffer *))(v225 + 8);
  if (v226)
  {
    uint64_t v227 = v226(v223, v346, v148, v117);
    uint64_t v228 = v146;
    uint64_t v40 = v227;
    uint64_t v229 = fpfs_UpdateSubStreamRoleInPumpFunc(v35, v353, v17, v228);
    if (!v40)
    {
      BOOL v364 = 0;
      uint64_t v146 = v229;
      goto LABEL_316;
    }
  }
  else
  {
    LODWORD(v229) = fpfs_UpdateSubStreamRoleInPumpFunc(v35, v353, v17, v146);
    uint64_t v40 = 4294954514;
  }
  int v230 = v229;
  if (*(void *)(v35 + 16 * v354 + 8 * v229 + 1000))
  {
    uint64_t v231 = v35;
    LODWORD(v381.value) = 0;
    LOBYTE(type.value) = 0;
    CFArrayRef v232 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v233 = v381.value;
    if (os_log_type_enabled(v232, type.value)) {
      unsigned int v234 = v233;
    }
    else {
      unsigned int v234 = v233 & 0xFFFFFFFE;
    }
    if (v234)
    {
      CFTypeRef v235 = v378;
      if (v378) {
        uint64_t v17 = CMBaseObjectGetDerivedStorage() + 824;
      }
      else {
        uint64_t v17 = (uint64_t)"";
      }
      CFTypeRef v257 = v379;
      if (v379) {
        uint64_t v258 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
      }
      else {
        uint64_t v258 = "";
      }
      LODWORD(rhs.value) = 136316930;
      *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"fpfs_BytePumpFn";
      LOWORD(rhs.flags) = 2048;
      *(void *)((char *)&rhs.flags + 2) = v235;
      HIWORD(rhs.epoch) = 2082;
      uint64_t v383 = v17;
      *(_WORD *)v384 = 2048;
      *(void *)&v384[2] = v257;
      __int16 v385 = 2082;
      v386 = v258;
      __int16 v387 = 1024;
      *(_DWORD *)v388 = v40;
      *(_WORD *)&v388[4] = 1024;
      LODWORD(v17) = v363;
      *(_DWORD *)&v388[6] = v363;
      *(_WORD *)&v388[10] = 1024;
      *(_DWORD *)&v388[12] = v230;
      _os_log_send_and_compose_impl();
      CFArrayRef v37 = v345;
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    LOBYTE(a4) = v362;
    uint64_t v35 = v231;
    int v39 = 1;
    uint64_t DerivedStorage = v360;
LABEL_515:
    size_t v38 = v342;
LABEL_27:
    fpfs_StopPlayingItemWithOSStatus(DerivedStorage, (uint64_t)v379, v40);
  }
  else if (dword_1E9350BB0)
  {
    uint64_t v236 = v35;
    LODWORD(v381.value) = 0;
    LOBYTE(type.value) = 0;
    CMTime v237 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v238 = v381.value;
    if (os_log_type_enabled(v237, type.value)) {
      unsigned int v239 = v238;
    }
    else {
      unsigned int v239 = v238 & 0xFFFFFFFE;
    }
    if (v239)
    {
      CFTypeRef v240 = v378;
      if (v378) {
        uint64_t v17 = CMBaseObjectGetDerivedStorage() + 824;
      }
      else {
        uint64_t v17 = (uint64_t)"";
      }
      CFTypeRef v310 = v379;
      if (v379) {
        v311 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
      }
      else {
        v311 = "";
      }
      LODWORD(rhs.value) = 136316930;
      *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"fpfs_BytePumpFn";
      LOWORD(rhs.flags) = 2048;
      *(void *)((char *)&rhs.flags + 2) = v240;
      HIWORD(rhs.epoch) = 2082;
      uint64_t v383 = v17;
      *(_WORD *)v384 = 2048;
      *(void *)&v384[2] = v310;
      __int16 v385 = 2082;
      v386 = v311;
      __int16 v387 = 1024;
      *(_DWORD *)v388 = v40;
      *(_WORD *)&v388[4] = 1024;
      LODWORD(v17) = v363;
      *(_DWORD *)&v388[6] = v363;
      *(_WORD *)&v388[10] = 1024;
      *(_DWORD *)&v388[12] = v230;
      _os_log_send_and_compose_impl();
      CFArrayRef v37 = v345;
    }
    size_t v38 = v342;
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    LODWORD(v40) = 0;
    LOBYTE(a4) = v362;
    uint64_t v35 = v236;
    int v39 = 1;
  }
  else
  {
    LODWORD(v40) = 0;
    int v39 = 1;
    size_t v38 = v342;
  }
LABEL_687:
  if (v38)
  {
    uint64_t v322 = *(void *)(v35 + 2544);
    if (v322)
    {
      uint64_t v323 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v324 = v323 ? v323 : 0;
      v325 = *(void (**)(uint64_t, uint64_t, uint64_t, size_t))(v324 + 32);
      if (v325) {
        v325(v322, 0x1EE582B78, 0x1EE5615B8, v38);
      }
    }
  }
  if (v40) {
    goto LABEL_714;
  }
LABEL_695:
  if ((a4 & 0x40) == 0
    || v17 && (*(unsigned char *)(v35 + 1096) & 1) != 0
    || (v326 = *(const void **)(v35 + 96)) == 0)
  {
LABEL_714:
    v328 = a14;
    fpfs_UnlockAndPostNotificationsWithCaller(v378);
    CFTypeRef v327 = 0;
    goto LABEL_715;
  }
  CFTypeRef v327 = CFRetain(v326);
  fpfs_UnlockAndPostNotificationsWithCaller(v378);
  v328 = a14;
  if (v327 && FigAlternatePlaybackBitrateMonitorTryToSwitchUp(v327)) {
    v39 |= 2u;
  }
LABEL_715:
  if (v328) {
    int *v328 = v39;
  }
  if (v327) {
    CFRelease(v327);
  }
  if (v37) {
    CFRelease(v37);
  }
LABEL_721:
  if (v379) {
    CFRelease(v379);
  }
  if (v378) {
    CFRelease(v378);
  }
}

void fpfsi_DateMappingCallback(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  CFTypeRef v27 = 0;
  uint64_t v25 = 0;
  CFTypeRef cf = 0;
  int v8 = fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer(a2, &v27, &cf);
  CFTypeRef v9 = cf;
  if (!v8)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    CFTypeRef v11 = v27;
    uint64_t v12 = CMBaseObjectGetDerivedStorage();
    if (*(void *)(DerivedStorage + 936))
    {
      uint64_t v13 = v12;
      uint64_t v14 = *(void *)(DerivedStorage + 1616);
      if (!a3) {
        fpfsi_RemoveDateEntryQueue(DerivedStorage, 1);
      }
      if (a4 < 1)
      {
LABEL_9:
        if (!v14) {
          fpfsi_UpdateTaggedRangeMetadataFromPumpAndNotifyIfNeeded(v11, v9, 0, 1);
        }
      }
      else
      {
        uint64_t v15 = DerivedStorage + 1184;
        uint64_t v16 = (uint64_t *)(a5 + 32);
        uint64_t v17 = (long long *)MEMORY[0x1E4F1F9F8];
        while (1)
        {
          uint64_t v18 = (const void *)*(v16 - 1);
          uint64_t v19 = *v16;
          long long v23 = *((_OWORD *)v16 - 2);
          uint64_t v24 = *(v16 - 2);
          long long v21 = *(_OWORD *)v15;
          uint64_t v22 = *(void *)(v15 + 16);
          uint64_t v20 = fpfsi_AddDateToQueue((uint64_t)v9, v18, (uint64_t)&v23, &v21, v17, (uint64_t)v17, v19, &v25, 0);
          if (v20) {
            break;
          }
          v16 += 5;
          if (!--a4) {
            goto LABEL_9;
          }
        }
        fpfs_StopPlayingItemWithOSStatus(v13, (uint64_t)v9, v20);
      }
    }
    fpfs_UnlockAndPostNotificationsWithCaller(v11);
  }
  if (v9) {
    CFRelease(v9);
  }
  if (v27) {
    CFRelease(v27);
  }
}

void fpfs_CancelSeekIfNeeded(const void *a1, const void *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  double v13 = 0.0;
  double v14 = 0.0;
  CFArrayRef theArray = 0;
  if (*(unsigned char *)(DerivedStorage + 332))
  {
    uint64_t v5 = DerivedStorage;
    if (*(void *)(DerivedStorage + 936))
    {
      int v6 = fpfsi_copySeekableTime((uint64_t)a2, &theArray);
      CFArrayRef v7 = theArray;
      if (v6 || !theArray)
      {
        if (!theArray) {
          return;
        }
      }
      else
      {
        CFArrayGetValueAtIndex(theArray, 0);
        if (FigCFDictionaryGetDoubleIfPresent() && FigCFDictionaryGetDoubleIfPresent())
        {
          if (*(unsigned char *)(v5 + 1508))
          {
            CMTime time = *(CMTime *)(v5 + 1496);
            double Seconds = CMTimeGetSeconds(&time);
            *(_OWORD *)&time.unsigned int value = *(_OWORD *)(v5 + 1496);
            CMTimeEpoch v9 = *(void *)(v5 + 1512);
          }
          else
          {
            if (*(unsigned char *)(v5 + 356)) {
              CMTime time = *(CMTime *)(v5 + 344);
            }
            else {
              CMTime time = *(CMTime *)(v5 + 320);
            }
            double Seconds = CMTimeGetSeconds(&time);
            if (*(unsigned char *)(v5 + 380))
            {
              *(_OWORD *)&time.unsigned int value = *(_OWORD *)(v5 + 368);
              CMTimeEpoch v9 = *(void *)(v5 + 384);
            }
            else
            {
              *(_OWORD *)&time.unsigned int value = *(_OWORD *)(v5 + 320);
              CMTimeEpoch v9 = *(void *)(v5 + 336);
            }
          }
          time.CMTimeEpoch epoch = v9;
          double v10 = CMTimeGetSeconds(&time);
          if (v10 < v14 || Seconds > v13)
          {
            if (dword_1E9350BB0)
            {
              os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            fpfs_SeekDidFail(a1, a2, *(_DWORD *)(v5 + 2204), 0);
          }
          else
          {
            *(_DWORD *)(v5 + 2200) = *(_DWORD *)(v5 + 2204);
          }
        }
      }
      CFRelease(v7);
    }
  }
}

uint64_t fpfs_UpdateSubStreamRoleInPumpFunc(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a2)
  {
    if (a3 < 3)
    {
      uint64_t v6 = *(void *)(a1 + 16 * a3 + 1000);
    }
    else
    {
      FigSignalErrorAt();
      uint64_t v6 = -1;
    }
    if (v6 == a2) {
      return 0;
    }
    else {
      return a4;
    }
  }
  return a4;
}

void fpfs_prepareDataForInject(const void *a1)
{
  CMAttachmentMode attachmentModeOut = 0;
  CFTypeRef v2 = CMGetAttachment(a1, @"FBPAKey_Decryptor", &attachmentModeOut);
  if (v2)
  {
    CMSetAttachment(a1, @"FMFD_BufferDecryptor", v2, attachmentModeOut);
    CMRemoveAttachment(a1, @"FBPAKey_Decryptor");
  }
  CFTypeRef v3 = CMGetAttachment(a1, @"FBPAKey_AudioDecryptor", &attachmentModeOut);
  if (v3)
  {
    CMSetAttachment(a1, @"FMFD_BufferAudioDecryptor", v3, attachmentModeOut);
    CMRemoveAttachment(a1, @"FBPAKey_AudioDecryptor");
  }
}

uint64_t FigManifoldInjectData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  double v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 8);
  if (!v10) {
    return 4294954514;
  }

  return v10(a1, a2, a3, a4);
}

void fpfsi_EnqueuePlayableRangeChangedNotification(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v3 = *(const void **)DerivedStorage;
  NotificationPayloadForProperties = fpfs_CreateNotificationPayloadForProperties(*(const void **)DerivedStorage, (uint64_t)a1, v4, v5, v6, v7, v8, v9, @"PlayableTimeIntervals", @"BufferState");
  fpfs_EnqueueNotification(v3, @"PlayableRangeChanged", a1, NotificationPayloadForProperties);
  *(void *)(DerivedStorage + 2344) = FigGetUpTimeNanoseconds();
  if (NotificationPayloadForProperties)
  {
    CFRelease(NotificationPayloadForProperties);
  }
}

uint64_t fpfs_EndCurrentDiscontinuity(const __CFArray *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v9 = DerivedStorage;
  if (a4)
  {
    fpfs_WeakStreamEnd(DerivedStorage, a2, a3);
    goto LABEL_3;
  }
  if (a2 <= 2)
  {
    uint64_t v15 = *(void *)(DerivedStorage + 16 * a2 + 8 * a3 + 1000);
    if (!v15) {
      goto LABEL_3;
    }
  }
  else
  {
    FigSignalErrorAt();
    FigSignalErrorAt();
    uint64_t v15 = -1;
  }
  uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v16) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = 0;
  }
  uint64_t v18 = *(void (**)(uint64_t, void))(v17 + 16);
  if (v18) {
    v18(v15, 0);
  }
LABEL_3:
  fpfs_PerformInitialResolveOfAllWaitingTracks(a1);
  uint64_t v10 = *(void *)(v9 + 1048);
  while (v10)
  {
    if (!*(void *)(v9 + 1048)) {
      return fpfs_PerformInitialResolveOfAllWaitingTracks(a1);
    }
    uint64_t v11 = v10;
    int v12 = *(unsigned __int8 *)(v10 + 180);
    if (!a3 && v12 == a2) {
      *(unsigned char *)(v10 + 189) = 1;
    }
    uint64_t v10 = *(void *)(v10 + 8);
    if (v12 == a2 && *(unsigned char *)(v11 + 182) == 1)
    {
      unsigned int v13 = *(_DWORD *)(v11 + 152);
      if (a3 || v13 != 1)
      {
        if (a3 == 1 && v13 == 1)
        {
          if (!fpfs_CompleteTrialSync((uint64_t)a1, v11)) {
            continue;
          }
        }
        else if (v13 > 7 || ((1 << v13) & 0x95) == 0 && (v13 != 5 || *(void *)(v11 + 264)) || *(void *)(v11 + 112))
        {
          continue;
        }
        goto LABEL_30;
      }
      if (*(void *)(v11 + 264))
      {
        memset(&v22, 0, sizeof(v22));
        CMTime lhs = *(CMTime *)(v11 + 216);
        CMTime rhs = *(CMTime *)(v11 + 272);
        CMTimeSubtract(&v22, &lhs, &rhs);
        CMTimeMake(&time2, 50, 1000);
        CMTime lhs = v22;
        if (CMTimeCompare(&lhs, &time2) < 0 || CMTimebaseGetRate(*(CMTimebaseRef *)(v9 + 576)) == 0.0) {
          fpfs_ReleaseAndClearDispatchSource((dispatch_object_t *)(v11 + 264));
        }
      }
      if (*(_DWORD *)(v11 + 32) == 1936684398)
      {
        CMTime v22 = *(CMTime *)(v11 + 192);
        if (fpfs_FinishAudioSyncAndStart((void *)v11, &v22) == -16042
          || !fpfsi_isTrackInLists(v9, v11, 1u)
          || *(_DWORD *)(v11 + 152) == 6)
        {
          continue;
        }
LABEL_30:
        fpfs_DeleteTrack(a1, v11);
        continue;
      }
      if (!*(void *)(v11 + 264)) {
        goto LABEL_30;
      }
    }
  }
  return fpfs_PerformInitialResolveOfAllWaitingTracks(a1);
}

uint64_t fpfsi_TrimCachedSamplesFromItem(uint64_t a1)
{
  uint64_t v107 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = CMBaseObjectGetDerivedStorage();
  memset(&v81, 0, sizeof(v81));
  fpfs_GetNextTimeToPlay(DerivedStorage, 1, (uint64_t)&v81);
  uint64_t v4 = MEMORY[0x1E4F1FA48];
  CMTimeValue v105 = *MEMORY[0x1E4F1FA48];
  CMTimeScale v106 = *(_DWORD *)(MEMORY[0x1E4F1FA48] + 8);
  uint64_t v5 = MEMORY[0x1E4F1FA08];
  CMTimeValue v103 = *MEMORY[0x1E4F1FA08];
  CMTimeScale v104 = *(_DWORD *)(MEMORY[0x1E4F1FA08] + 8);
  uint64_t v6 = CMBaseObjectGetDerivedStorage();
  uint64_t v7 = CMBaseObjectGetDerivedStorage();
  memset(&time1, 0, sizeof(time1));
  fpfs_GetNextTimeToPlay(v6, 1, (uint64_t)&time1);
  float v8 = *(float *)(v7 + 108);
  int v9 = *(_DWORD *)(v6 + 2280);
  if (v8 <= 2.0 && v8 >= 0.0 || *(void *)(v6 + 2968))
  {
    if (v9 < 1)
    {
      int64_t v10 = 50;
      int32_t v11 = 1000;
    }
    else
    {
      if (v8 < 0.0) {
        int v9 = -v9;
      }
      int64_t v10 = v9;
      int32_t v11 = 1;
    }
    CMTimeMake(&rhs, v10, v11);
  }
  else
  {
    CMTimeMakeWithSeconds(&rhs, (float)(v8 * 10.0), 1000);
  }
  CMTime lhs = time1;
  CMTimeSubtract(&time2, &lhs, &rhs);
  CMTimeValue value = time2.value;
  CMTimeFlags flags = time2.flags;
  CMTimeScale timescale = time2.timescale;
  CMTimeEpoch epoch = time2.epoch;
  memset(&rhs, 0, sizeof(rhs));
  CMTime time1 = *(CMTime *)(DerivedStorage + 1352);
  CMTime time2 = *(CMTime *)(DerivedStorage + 1184);
  uint64_t result = (uint64_t)CMTimeSubtract(&rhs, &time1, &time2);
  float v14 = *(float *)(v3 + 108);
  BOOL v72 = v14 < 0.0;
  int v15 = (v14 > 2.0 || v14 < 0.0) && *(void *)(DerivedStorage + 2968) == 0;
  if ((v81.flags & 0x1D) == 1)
  {
    uint64_t v71 = a1;
    CMTimeFlags v16 = *(_DWORD *)(v4 + 12);
    CMTimeEpoch v17 = *(void *)(v4 + 16);
    uint64_t v73 = (uint64_t *)DerivedStorage;
    if ((rhs.flags & 0x1D) == 1)
    {
      *(_OWORD *)&time1.CMTimeValue value = *(_OWORD *)v4;
      time1.CMTimeEpoch epoch = v17;
      CMTime time2 = rhs;
      if (CMTimeCompare(&time1, &time2) < 0)
      {
        CMTimeMake(&v79, 50, 1000);
        CMTime time1 = v81;
        CMTimeSubtract(&v80, &time1, &v79);
        CMTime time2 = rhs;
        CMTimeMinimum(&time1, &time2, &v80);
        CMTimeValue v105 = time1.value;
        CMTimeFlags v16 = time1.flags;
        CMTimeScale v106 = time1.timescale;
        CMTimeEpoch v17 = time1.epoch;
        fpfsi_TrimFromAllTracks(DerivedStorage, &time1, v72, v15);
        if (dword_1E9350BB0 >= 5)
        {
          int v70 = v15;
          LODWORD(lhs.value) = 0;
          LOBYTE(type) = 0;
          os_log_and_send_and_compose_flags_and_os_log_CMTimeValue type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v19 = lhs.value;
          if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, (os_log_type_t)type)) {
            unsigned int v20 = v19;
          }
          else {
            unsigned int v20 = v19 & 0xFFFFFFFE;
          }
          if (v20)
          {
            uint64_t v21 = *(void *)DerivedStorage;
            if (*(void *)DerivedStorage) {
              CMTime v22 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
            }
            else {
              CMTime v22 = "";
            }
            unsigned int v74 = v22;
            if (v71) {
              long long v23 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
            }
            else {
              long long v23 = "";
            }
            float v69 = v23;
            time1.CMTimeValue value = v105;
            time1.CMTimeScale timescale = v106;
            time1.CMTimeFlags flags = v16;
            time1.CMTimeEpoch epoch = v17;
            Float64 Seconds = CMTimeGetSeconds(&time1);
            time1.CMTimeValue value = value;
            time1.CMTimeScale timescale = timescale;
            time1.CMTimeFlags flags = flags;
            time1.CMTimeEpoch epoch = epoch;
            Float64 v25 = CMTimeGetSeconds(&time1);
            CMTime time1 = v81;
            Float64 v26 = CMTimeGetSeconds(&time1);
            LODWORD(time2.value) = 136317186;
            *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpfsi_TrimCachedSamplesFromItem";
            LOWORD(time2.flags) = 2048;
            *(void *)((char *)&time2.flags + 2) = v21;
            HIWORD(time2.epoch) = 2082;
            uint64_t v87 = v74;
            __int16 v88 = 2048;
            uint64_t v89 = v71;
            __int16 v90 = 2082;
            unsigned int v91 = v69;
            __int16 v92 = 2048;
            Float64 v93 = Seconds;
            __int16 v94 = 2048;
            Float64 v95 = v25;
            __int16 v96 = 2048;
            Float64 v97 = v26;
            __int16 v98 = 2048;
            unint64_t v99 = 0;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          int v15 = v70;
        }
      }
    }
    if (v14 < 0.0 || (v15 & 1) != 0) {
      goto LABEL_46;
    }
    int v27 = *(_DWORD *)(v3 + 752);
    int v28 = *(_DWORD *)(DerivedStorage + 2244);
    if (v27 >= v28) {
      int v29 = *(_DWORD *)(DerivedStorage + 2244);
    }
    else {
      int v29 = *(_DWORD *)(v3 + 752);
    }
    if (v28) {
      int v30 = *(_DWORD *)(DerivedStorage + 2244);
    }
    else {
      int v30 = 50;
    }
    if (!v28) {
      int v29 = *(_DWORD *)(v3 + 752);
    }
    if (!v27) {
      int v29 = v30;
    }
    if (v28 | v27 && v29 <= 50)
    {
LABEL_46:
      time1.CMTimeValue value = value;
      time1.CMTimeScale timescale = timescale;
      time1.CMTimeFlags flags = flags;
      time1.CMTimeEpoch epoch = epoch;
      fpfsi_TrimFromAllTracks(DerivedStorage, &time1, v72, v15);
      goto LABEL_47;
    }
    BOOL v76 = (CMTime *)(DerivedStorage + 1064);
    uint64_t v39 = fpfsi_TotalBytesInBuffer((uint64_t *)(DerivedStorage + 1064));
    unsigned int v75 = (CMTime *)(DerivedStorage + 1048);
    if ((unint64_t)(fpfsi_TotalBytesInBuffer((uint64_t *)(DerivedStorage + 1048)) + v39) <= *(void *)(DerivedStorage + 536))
    {
LABEL_47:
      uint64_t v31 = fpfsi_TotalBytesInBuffer((uint64_t *)(DerivedStorage + 1064));
      uint64_t result = fpfsi_TotalBytesInBuffer((uint64_t *)(DerivedStorage + 1048));
      uint64_t v32 = *(void *)(DerivedStorage + 2544);
      if (v32)
      {
        uint64_t v33 = result;
        uint64_t VTable = CMBaseObjectGetVTable();
        uint64_t v36 = *(void *)(VTable + 16);
        uint64_t result = VTable + 16;
        uint64_t v35 = v36;
        if (v36) {
          uint64_t v37 = v35;
        }
        else {
          uint64_t v37 = 0;
        }
        size_t v38 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v37 + 40);
        if (v38) {
          return v38(v32, 0x1EE582B78, 0x1EE583CF8, (unint64_t)(v33 + v31) >> 10);
        }
      }
      return result;
    }
    CMTimeFlags v40 = *(_DWORD *)(v5 + 12);
    CMTimeEpoch v41 = *(void *)(v5 + 16);
    CMTimeFlags v66 = flags;
    while (1)
    {
      time1.CMTimeValue value = v105;
      time1.CMTimeScale timescale = v106;
      time1.CMTimeFlags flags = v16;
      time1.CMTimeEpoch epoch = v17;
      time2.CMTimeValue value = value;
      time2.CMTimeScale timescale = timescale;
      time2.CMTimeFlags flags = flags;
      time2.CMTimeEpoch epoch = epoch;
      if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0) {
        goto LABEL_47;
      }
      uint64_t v42 = CMBaseObjectGetDerivedStorage();
      for (uint64_t i = *(void *)(v42 + 1064); i; uint64_t i = *(void *)(i + 8))
      {
        if (*(_DWORD *)(i + 32) == 1986618469) {
          fpfsi_SetNextVideoGOPRangeToTrimForTrack(i);
        }
      }
      for (uint64_t j = *(void *)(v42 + 1048); j; uint64_t j = *(void *)(j + 8))
      {
        if (*(_DWORD *)(j + 32) == 1986618469) {
          fpfsi_SetNextVideoGOPRangeToTrimForTrack(j);
        }
      }
      fpfsi_FindEarliestVideoGOPEndInTrackList(v76, (uint64_t)&time1);
      CMTimeValue type = time1.value;
      CMTimeFlags v45 = time1.flags;
      CMTimeScale v85 = time1.timescale;
      if ((time1.flags & 1) == 0)
      {
        fpfsi_FindEarliestVideoGOPEndInTrackList(v75, (uint64_t)&time1);
        CMTimeValue type = time1.value;
        CMTimeFlags v45 = time1.flags;
        CMTimeScale v85 = time1.timescale;
      }
      if (v45) {
        break;
      }
      CMTimeValue v46 = v76->value;
      if (v76->value)
      {
        while (*(_DWORD *)(v46 + 32) != 1936684398 || !*(void *)(v46 + 96))
        {
          CMTimeValue v46 = *(void *)(v46 + 8);
          if (!v46) {
            goto LABEL_72;
          }
        }
      }
      else
      {
LABEL_72:
        CMTimeValue v46 = v75->value;
        if (!v75->value) {
          goto LABEL_84;
        }
        while (*(_DWORD *)(v46 + 32) != 1936684398 || !*(void *)(v46 + 96))
        {
          CMTimeValue v46 = *(void *)(v46 + 8);
          if (!v46) {
            goto LABEL_84;
          }
        }
      }
      uint64_t v47 = *(opaqueCMBufferQueue **)(v46 + 80);
      if (v47) {
        CMBufferQueueGetMinPresentationTimeStamp(&time1, v47);
      }
      else {
        CMTime time1 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
      }
      CMTimeValue v105 = time1.value;
      CMTimeScale v106 = time1.timescale;
      if ((time1.flags & 0x1D) != 1)
      {
LABEL_84:
        if (dword_1E9350BB0)
        {
          LODWORD(lhs.value) = 0;
          uint64_t v48 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v49 = lhs.value;
          if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v50 = v49;
          }
          else {
            unsigned int v50 = v49 & 0xFFFFFFFE;
          }
          if (v50)
          {
            uint64_t v51 = *(void *)DerivedStorage;
            if (*(void *)DerivedStorage)
            {
              unsigned int v52 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
              if (v71) {
                goto LABEL_91;
              }
LABEL_94:
              CFAllocatorRef v53 = "";
            }
            else
            {
              unsigned int v52 = "";
              if (!v71) {
                goto LABEL_94;
              }
LABEL_91:
              CFAllocatorRef v53 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
            }
            LODWORD(time2.value) = 136316162;
            *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpfsi_TrimCachedSamplesFromItem";
            LOWORD(time2.flags) = 2048;
            *(void *)((char *)&time2.flags + 2) = v51;
            HIWORD(time2.epoch) = 2082;
            uint64_t v87 = v52;
            __int16 v88 = 2048;
            uint64_t v89 = v71;
            __int16 v90 = 2082;
            unsigned int v91 = v53;
            _os_log_send_and_compose_impl();
            uint64_t DerivedStorage = (uint64_t)v73;
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        CMTimeValue v105 = value;
        CMTimeScale v106 = timescale;
        CMTimeEpoch v17 = epoch;
        CMTimeFlags v16 = flags;
        goto LABEL_98;
      }
      time2.CMTimeValue value = v105;
      time2.CMTimeScale timescale = v106;
      time2.CMTimeFlags flags = time1.flags;
      time2.CMTimeEpoch epoch = time1.epoch;
      lhs.CMTimeValue value = v103;
      lhs.CMTimeScale timescale = v104;
      lhs.CMTimeFlags flags = v40;
      lhs.CMTimeEpoch epoch = v41;
      CMTimeMaximum(&time1, &time2, &lhs);
      CMTimeValue v105 = time1.value;
      CMTimeFlags v16 = time1.flags;
      CMTimeScale v106 = time1.timescale;
      CMTimeEpoch v17 = time1.epoch;
      if ((v40 & 0x1D) == 1)
      {
        CMTimeMake(&v78, 10, 1);
        time2.CMTimeValue value = v105;
        time2.CMTimeScale timescale = v106;
        time2.CMTimeFlags flags = v16;
        time2.CMTimeEpoch epoch = v17;
        CMTimeAdd(&time1, &time2, &v78);
        CMTimeScale v106 = time1.timescale;
        CMTimeValue v105 = time1.value;
        CMTime time2 = time1;
        goto LABEL_78;
      }
LABEL_98:
      CMTimeValue v103 = v105;
      CMTimeScale v104 = v106;
      time1.CMTimeValue value = v105;
      time1.CMTimeScale timescale = v106;
      time1.CMTimeFlags flags = v16;
      time1.CMTimeEpoch epoch = v17;
      fpfsi_TrimFromAllTracks(DerivedStorage, &time1, v72, v15);
      uint64_t v54 = fpfsi_TotalBytesInBuffer(&v76->value);
      unint64_t v55 = fpfsi_TotalBytesInBuffer(&v75->value) + v54;
      if (dword_1E9350BB0 >= 5)
      {
        LODWORD(lhs.value) = 0;
        uint64_t v56 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v57 = lhs.value;
        if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v58 = v57;
        }
        else {
          unsigned int v58 = v57 & 0xFFFFFFFE;
        }
        if (v58)
        {
          uint64_t v59 = *v73;
          if (*v73) {
            uint64_t v60 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
          }
          else {
            uint64_t v60 = "";
          }
          uint64_t v68 = v60;
          if (v71) {
            uint64_t v61 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
          }
          else {
            uint64_t v61 = "";
          }
          unsigned int v67 = v61;
          time1.CMTimeValue value = v105;
          time1.CMTimeScale timescale = v106;
          time1.CMTimeFlags flags = v16;
          time1.CMTimeEpoch epoch = v17;
          Float64 v62 = CMTimeGetSeconds(&time1);
          time1.CMTimeValue value = value;
          CMTimeFlags flags = v66;
          time1.CMTimeScale timescale = timescale;
          time1.CMTimeFlags flags = v66;
          time1.CMTimeEpoch epoch = epoch;
          Float64 v63 = CMTimeGetSeconds(&time1);
          CMTime time1 = v81;
          Float64 v64 = CMTimeGetSeconds(&time1);
          LODWORD(time2.value) = 136317186;
          *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpfsi_TrimCachedSamplesFromItem";
          LOWORD(time2.flags) = 2048;
          *(void *)((char *)&time2.flags + 2) = v59;
          HIWORD(time2.epoch) = 2082;
          uint64_t v87 = v68;
          __int16 v88 = 2048;
          uint64_t v89 = v71;
          __int16 v90 = 2082;
          unsigned int v91 = v67;
          __int16 v92 = 2048;
          Float64 v93 = v62;
          __int16 v94 = 2048;
          Float64 v95 = v63;
          __int16 v96 = 2048;
          Float64 v97 = v64;
          __int16 v98 = 2048;
          unint64_t v99 = v55;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      CMTimeFlags v40 = v16;
      CMTimeEpoch v41 = v17;
      BOOL v65 = v55 > v73[67];
      uint64_t DerivedStorage = (uint64_t)v73;
      if (!v65) {
        goto LABEL_47;
      }
    }
    time2.CMTimeValue value = type;
    time2.CMTimeScale timescale = v85;
    time2.CMTimeFlags flags = v45;
    time2.CMTimeEpoch epoch = time1.epoch;
LABEL_78:
    lhs.CMTimeValue value = value;
    lhs.CMTimeScale timescale = timescale;
    lhs.CMTimeFlags flags = flags;
    lhs.CMTimeEpoch epoch = epoch;
    CMTimeMinimum(&time1, &time2, &lhs);
    CMTimeValue v105 = time1.value;
    CMTimeFlags v16 = time1.flags;
    CMTimeScale v106 = time1.timescale;
    CMTimeEpoch v17 = time1.epoch;
    goto LABEL_98;
  }
  return result;
}

BOOL fpsi_TryDateSeekWithSeekID(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v15 = MEMORY[0x1E4F1F9F8];
  *(_OWORD *)a4 = *MEMORY[0x1E4F1F9F8];
  *(void *)(a4 + 16) = *(void *)(v15 + 16);
  if (!*(void *)(DerivedStorage + 1616)) {
    return 0;
  }
  uint64_t v16 = DerivedStorage;
  uint64_t v17 = *(void *)(DerivedStorage + 936);
  if (v17)
  {
    memset(&v43, 0, sizeof(v43));
    memset(v42, 0, sizeof(v42));
    uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v18) {
      uint64_t v19 = v18;
    }
    else {
      uint64_t v19 = 0;
    }
    long long v23 = *(uint64_t (**)(uint64_t, uint64_t, CMTime *, void *))(v19 + 40);
    if (v23)
    {
      int v22 = v23(v17, a2, &v43, v42);
      if (!v22)
      {
LABEL_18:
        CMTime lhs = v43;
        fpfs_GetPreciseTimeForDate(v16, a2, &lhs, (uint64_t)&time);
        CMTimeValue value = time.value;
        CMTimeFlags flags = time.flags;
        CMTimeScale timescale = time.timescale;
        if (time.flags)
        {
          CMTimeEpoch epoch = time.epoch;
          if (dword_1E9350BB0)
          {
            CMTimeEpoch v39 = time.epoch;
            LODWORD(v44.value) = 0;
            os_log_type_t type = OS_LOG_TYPE_DEFAULT;
            os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int v30 = v44.value;
            BOOL v31 = os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            unsigned int v32 = v30 & 0xFFFFFFFE;
            if (v31) {
              unsigned int v32 = v30;
            }
            if (v32)
            {
              uint64_t v33 = *(void *)v16;
              if (v33) {
                uint64_t v34 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
              }
              else {
                uint64_t v34 = "";
              }
              size_t v38 = v34;
              if (a1) {
                uint64_t v35 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
              }
              else {
                uint64_t v35 = "";
              }
              time.CMTimeValue value = value;
              time.CMTimeScale timescale = timescale;
              time.CMTimeFlags flags = flags;
              time.CMTimeEpoch epoch = v39;
              Float64 Seconds = CMTimeGetSeconds(&time);
              LODWORD(lhs.value) = 136316418;
              *(CMTimeValue *)((char *)&lhs.value + 4) = (CMTimeValue)"fpsi_TryDateSeekWithSeekID";
              LOWORD(lhs.flags) = 2048;
              *(void *)((char *)&lhs.flags + 2) = v33;
              HIWORD(lhs.epoch) = 2082;
              CMTimeValue v46 = v38;
              __int16 v47 = 2048;
              uint64_t v48 = a1;
              __int16 v49 = 2082;
              unsigned int v50 = v35;
              __int16 v51 = 2048;
              Float64 v52 = Seconds;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            CMTimeEpoch epoch = v39;
          }
          time.CMTimeValue value = value;
          time.CMTimeScale timescale = timescale;
          time.CMTimeFlags flags = flags;
          time.CMTimeEpoch epoch = epoch;
          CMTime lhs = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA08];
          CMTime v44 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA10];
          int v21 = 1;
          int v22 = fpfsi_SetCurrentTimeWithRangeAndSeekIDGuts(a1, &time, 5, &lhs, &v44, a5, 0, a6, 16842753, a7, 1);
        }
        else
        {
          CMTimeMake(&rhs, 1, 1000);
          CMTime lhs = v43;
          CMTimeAdd(&time, &lhs, &rhs);
          CMTime v43 = time;
          CMTime lhs = time;
          CMTime v44 = *(CMTime *)(v16 + 1184);
          CMTimeSubtract(&time, &lhs, &v44);
          int v21 = 0;
          int v22 = 0;
          CMTime v43 = time;
        }
        *(CMTime *)a4 = v43;
        goto LABEL_37;
      }
      if (v22 == -12783)
      {
        uint64_t v24 = *(void **)(v16 + 1616);
        if (v24)
        {
          Float64 v25 = *(void **)(v16 + 1616);
          do
          {
            double v26 = MEMORY[0x199707BD0](v25[2]);
            if (v26 <= MEMORY[0x199707BD0](a2)) {
              uint64_t v24 = v25;
            }
            Float64 v25 = (void *)*v25;
          }
          while (v25);
          if (v24)
          {
            CMTime v43 = *(CMTime *)((unsigned char *)v24 + 1);
            goto LABEL_18;
          }
        }
        int v21 = 0;
        int v22 = -12783;
      }
      else
      {
        int v21 = 0;
      }
    }
    else
    {
      int v21 = 0;
      int v22 = -12782;
    }
  }
  else
  {
    int v21 = 0;
    int v22 = 0;
  }
LABEL_37:
  *a3 = v22;
  return v21 && v22 == 0;
}

void fpfsi_RTCReportingUpdateItemStats(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  memset(&v5, 0, sizeof(v5));
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  fpfs_GetItemBufferedDuration(a1, &v5, v6, 0);
  CMTime v4 = v5;
  double Seconds = CMTimeGetSeconds(&v4);
  fpfsi_RTCReportingUpdateBufferDuration(DerivedStorage, (uint64_t)v6, Seconds);
}

uint64_t fpfsi_copySeekableTime(uint64_t a1, CFArrayRef *a2)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(void *)(DerivedStorage + 936)) {
    return 4294954432;
  }
  uint64_t v5 = DerivedStorage;
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 5, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  values = Mutable;
  if (Mutable)
  {
    float v8 = Mutable;
    long long v50 = 0u;
    long long v51 = 0u;
    long long v49 = 0u;
    Float64 Seconds = 0.0;
    Float64 valuePtr = 0.0;
    if (fpfsi_getPumpAvailableTimeRange(v5, &v49))
    {
      fpfsi_TotalTimeRangeInBuffer(a1, (uint64_t)&range);
      CMTimeValue value = range.start.value;
      CMTimeFlags flags = range.start.flags;
      CMTimeScale timescale = range.start.timescale;
      if ((range.start.flags & 1) == 0)
      {
        uint64_t v10 = 4294954513;
        goto LABEL_41;
      }
      CMTimeFlags v13 = range.duration.flags;
      uint64_t v10 = 4294954513;
      if ((range.duration.flags & 1) == 0) {
        goto LABEL_41;
      }
      if (range.duration.epoch) {
        goto LABEL_41;
      }
      CMTimeValue v11 = range.duration.value;
      if (range.duration.value < 0) {
        goto LABEL_41;
      }
      CMTimeEpoch v15 = 0;
      CMTimeEpoch epoch = range.start.epoch;
      CMTimeScale v14 = range.duration.timescale;
      int v16 = 1;
    }
    else
    {
      CMTimeValue value = v49;
      CMTimeFlags flags = HIDWORD(v49);
      CMTimeScale timescale = DWORD2(v49);
      CMTimeValue v11 = *((void *)&v50 + 1);
      CMTimeEpoch epoch = v50;
      CMTimeScale v14 = v51;
      CMTimeFlags v13 = DWORD1(v51);
      CMTimeEpoch v15 = *((void *)&v51 + 1);
      int v16 = BYTE12(v49) & 1;
    }
    range.start.CMTimeValue value = value;
    range.start.CMTimeScale timescale = timescale;
    range.start.CMTimeFlags flags = flags;
    range.start.CMTimeEpoch epoch = epoch;
    range.duration.CMTimeValue value = v11;
    range.duration.CMTimeScale timescale = v14;
    range.duration.CMTimeFlags flags = v13;
    range.duration.CMTimeEpoch epoch = v15;
    CMTimeRangeGetEnd((CMTime *)&v53, &range);
    CMTimeValue v58 = v53;
    CMTimeFlags v17 = HIDWORD(v53);
    CMTimeScale v59 = DWORD2(v53);
    CMTimeEpoch v18 = v54;
    uint64_t v19 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
    if (v16)
    {
      range.start.CMTimeValue value = value;
      range.start.CMTimeScale timescale = timescale;
      range.start.CMTimeFlags flags = flags;
      range.start.CMTimeEpoch epoch = epoch;
      Float64 valuePtr = CMTimeGetSeconds(&range.start);
      CFNumberRef v20 = CFNumberCreate(*v19, kCFNumberDoubleType, &valuePtr);
      if (!v20)
      {
        uint64_t v10 = FigSignalErrorAt();
LABEL_41:
        if (values) {
          CFRelease(values);
        }
        return v10;
      }
      CFNumberRef v21 = v20;
      CFDictionarySetValue(v8, @"start", v20);
      if ((v17 & 1) == 0) {
        goto LABEL_14;
      }
    }
    else
    {
      CFNumberRef v21 = 0;
      if ((BYTE12(v53) & 1) == 0)
      {
LABEL_14:
        CFNumberRef v22 = 0;
        goto LABEL_18;
      }
    }
    range.start.CMTimeValue value = v58;
    range.start.CMTimeScale timescale = v59;
    range.start.CMTimeFlags flags = v17;
    range.start.CMTimeEpoch epoch = v18;
    Float64 Seconds = CMTimeGetSeconds(&range.start);
    CFNumberRef v23 = CFNumberCreate(*v19, kCFNumberDoubleType, &Seconds);
    if (!v23)
    {
      uint64_t v10 = FigSignalErrorAt();
      goto LABEL_39;
    }
    CFNumberRef v22 = v23;
    CFDictionarySetValue(v8, @"end", v23);
LABEL_18:
    CFAllocatorRef v24 = (const __CFAllocator *)FigGetAllocatorForMedia();
    range.start.CMTimeValue value = value;
    range.start.CMTimeScale timescale = timescale;
    range.start.CMTimeFlags flags = flags;
    range.start.CMTimeEpoch epoch = epoch;
    CFDictionaryRef v25 = CMTimeCopyAsDictionary(&range.start, v24);
    if (v25)
    {
      CFDictionaryRef v26 = v25;
      CFDictionarySetValue(v8, @"startTime", v25);
      CFAllocatorRef v27 = (const __CFAllocator *)FigGetAllocatorForMedia();
      range.start.CMTimeValue value = v58;
      range.start.CMTimeScale timescale = v59;
      range.start.CMTimeFlags flags = v17;
      range.start.CMTimeEpoch epoch = v18;
      CFDictionaryRef v28 = CMTimeCopyAsDictionary(&range.start, v27);
      if (v28)
      {
        CFDictionaryRef v29 = v28;
        CFDictionarySetValue(v8, @"endTime", v28);
        if ((*(_DWORD *)(v5 + 1340) & 0x1D) != 1)
        {
          uint64_t v30 = *(void *)(v5 + 936);
          if (v30)
          {
            CFTypeRef cf = 0;
            uint64_t v31 = FigGetAllocatorForMedia();
            uint64_t FigBaseObject = FigBytePumpGetFigBaseObject(v30);
            uint64_t v33 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v33) {
              uint64_t v34 = v33;
            }
            else {
              uint64_t v34 = 0;
            }
            uint64_t v35 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v34 + 48);
            if (v35)
            {
              v35(FigBaseObject, 0x1EE53E678, v31, &cf);
              CFDictionaryRef v36 = (const __CFDictionary *)cf;
            }
            else
            {
              CFDictionaryRef v36 = 0;
            }
            CMTimeRangeMakeFromDictionary(&range, v36);
            long long v53 = *(_OWORD *)&range.start.value;
            long long v54 = *(_OWORD *)&range.start.epoch;
            CMTimeFlags v37 = range.duration.flags;
            CMTimeScale v55 = range.duration.timescale;
            if ((range.duration.flags & 0x1D) == 1)
            {
              CMTimeEpoch v38 = range.duration.epoch;
              CFAllocatorRef v39 = (const __CFAllocator *)FigGetAllocatorForMedia();
              range.start.CMTimeValue value = *((void *)&v54 + 1);
              range.start.CMTimeScale timescale = v55;
              range.start.CMTimeFlags flags = v37;
              range.start.CMTimeEpoch epoch = v38;
              CFDictionaryRef v40 = CMTimeCopyAsDictionary(&range.start, v39);
              if (v40)
              {
                CFDictionaryRef v41 = v40;
                CFDictionarySetValue(v8, @"liveEdgeDuration", v40);
                CFRelease(v41);
              }
            }
            if (cf) {
              CFRelease(cf);
            }
          }
        }
        CFAllocatorRef v42 = (const __CFAllocator *)FigGetAllocatorForMedia();
        CFArrayRef v43 = CFArrayCreate(v42, (const void **)&values, 1, MEMORY[0x1E4F1D510]);
        if (v43)
        {
          uint64_t v10 = 0;
          *a2 = v43;
        }
        else
        {
          uint64_t v10 = FigSignalErrorAt();
        }
        CFRelease(v29);
      }
      else
      {
        uint64_t v10 = FigSignalErrorAt();
      }
      CFRelease(v26);
      if (!v22) {
        goto LABEL_39;
      }
      goto LABEL_38;
    }
    uint64_t v10 = FigSignalErrorAt();
    if (v22) {
LABEL_38:
    }
      CFRelease(v22);
LABEL_39:
    if (v21) {
      CFRelease(v21);
    }
    goto LABEL_41;
  }

  return FigSignalErrorAt();
}

uint64_t fpfs_NewTrackNote(const void *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v91 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v9 = CMBaseObjectGetDerivedStorage();
  CFArrayRef Next = fpfs_getNext(v9, 0);
  CFArrayRef theArray = 0;
  int v11 = 1;
  if (a3 <= 1935832171)
  {
    if (a3 != 1668047728 && a3 != 1835365473) {
LABEL_8:
    }
      int v11 = 0;
  }
  else
  {
    if (a3 != 1935832172)
    {
      if (a3 == 1986618469) {
        goto LABEL_10;
      }
      if (a3 == 1936684398)
      {
        int v11 = 2;
        goto LABEL_10;
      }
      goto LABEL_8;
    }
    int v11 = 4;
  }
LABEL_10:
  char v86 = 0;
  uint64_t v87 = 0;
  if (!a1) {
    goto LABEL_18;
  }
  uint64_t v12 = 0;
  uint64_t v13 = 1000;
  do
  {
    if (*(const void **)(DerivedStorage + v13) == a1)
    {
      unsigned int v15 = 0;
      goto LABEL_20;
    }
    ++v12;
    v13 += 16;
  }
  while (v12 != 3);
  if (!*(void *)(DerivedStorage + 1768)) {
    goto LABEL_18;
  }
  uint64_t v12 = 0;
  CMTimeScale v14 = (const void **)(DerivedStorage + 1008);
  unsigned int v15 = 1;
  while (*v14 != a1)
  {
    ++v12;
    v14 += 2;
    if (v12 == 3) {
      goto LABEL_18;
    }
  }
LABEL_20:
  if (v12 >= 3u)
  {
LABEL_18:
    uint64_t v16 = FigSignalErrorAt();
    goto LABEL_164;
  }
  CFArrayRef v80 = Next;
  uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v17) {
    uint64_t v18 = v17;
  }
  else {
    uint64_t v18 = 0;
  }
  uint64_t v19 = *(void (**)(const void *, uint64_t, const opaqueCMFormatDescription **))(v18 + 24);
  if (v19) {
    v19(a1, a4, &v87);
  }
  unsigned int v83 = a4;
  if (a3 == 1835365473)
  {
    CFNumberRef v20 = v87;
    CMBaseObjectGetDerivedStorage();
    CMFormatDescriptionGetMediaSubType(v20);
  }
  uint64_t v21 = *(void *)(DerivedStorage + 1048);
  int v81 = 1;
  uint64_t v84 = a2;
  if (!v21)
  {
    int v82 = 0;
    uint64_t v33 = 0;
    goto LABEL_73;
  }
  uint64_t v79 = 0;
  int v82 = 0;
  CFNumberRef v22 = (void *)(DerivedStorage + 24 * v15 + 8 * v12 + 1128);
  while (*(void *)(DerivedStorage + 1048))
  {
    uint64_t v23 = v21;
    uint64_t v21 = *(void *)(v21 + 8);
    if (*(_DWORD *)(v23 + 32) == a3 && *(void *)(v23 + 64) == *v22)
    {
      if (*(const void **)(v23 + 48) == a1 && a3 != 1835365473 && !*(unsigned char *)(v23 + 182)) {
        break;
      }
      char v86 = (const opaqueCMFormatDescription *)FigFormatDescriptionRetain();
      if (!v86)
      {
        uint64_t v26 = *(void *)(v23 + 48);
        uint64_t v27 = *(unsigned int *)(v23 + 24);
        uint64_t v28 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v29 = v28 ? v28 : 0;
        uint64_t v30 = *(void (**)(uint64_t, uint64_t, const opaqueCMFormatDescription **))(v29 + 24);
        if (v30) {
          v30(v26, v27, &v86);
        }
      }
      int v24 = *(unsigned __int8 *)(v23 + 180);
      if (v24 != v12)
      {
        if (*(_DWORD *)(v23 + 152) == 6)
        {
          unsigned int v25 = *(_DWORD *)(DerivedStorage + 1096);
          if (((v25 >> v24) & 1) == 0) {
            goto LABEL_68;
          }
          if (a3 != 1835365473)
          {
LABEL_56:
            if ((v25 & v11) != 0)
            {
              int v31 = 1 << *(unsigned char *)(v23 + 180);
LABEL_61:
              if (v31 == v11) {
                break;
              }
            }
            FigFormatDescriptionRelease();
            char v86 = 0;
            fpfs_StopFeedingTrack(v23, 0, 0);
            uint64_t v32 = *(void *)(v23 + 96);
            if (v32) {
              fpfs_FlushPrimaryAndAuxRenderChains(v32, 1);
            }
            fpfs_DeleteTrack(v84, v23);
            goto LABEL_65;
          }
LABEL_54:
          if (!fpfs_areMetadataFormatsRivals(v87, v86)) {
            goto LABEL_67;
          }
          unsigned int v25 = *(_DWORD *)(DerivedStorage + 1096);
          goto LABEL_56;
        }
        if (a3 != 1835365473)
        {
LABEL_60:
          int v31 = 1 << v24;
          goto LABEL_61;
        }
LABEL_58:
        if (!fpfs_areMetadataFormatsRivals(v87, v86))
        {
LABEL_67:
          ++v79;
          goto LABEL_68;
        }
        LOBYTE(v24) = *(unsigned char *)(v23 + 180);
        goto LABEL_60;
      }
      if (a3 == 1835365473 && !fpfsi_canMetadataFormatsSync(v87, v86))
      {
        if (*(_DWORD *)(v23 + 152) == 6)
        {
          if (((*(_DWORD *)(DerivedStorage + 1096) >> *(unsigned char *)(v23 + 180)) & 1) == 0) {
            goto LABEL_68;
          }
          goto LABEL_54;
        }
        goto LABEL_58;
      }
      int v82 = *(_DWORD *)(v23 + 28);
LABEL_68:
      FigFormatDescriptionRelease();
      char v86 = 0;
      if (!v21)
      {
LABEL_69:
        int v81 = 1;
        goto LABEL_72;
      }
    }
    else
    {
LABEL_65:
      if (!v21) {
        goto LABEL_69;
      }
    }
  }
  int v81 = 0;
LABEL_72:
  a2 = v84;
  uint64_t v33 = v79;
LABEL_73:
  uint64_t v34 = v83;
  if (a3 != 1986618469 || !(_BYTE)v12)
  {
    if (a3 == 1986618469)
    {
      int v44 = v81;
      if (v33 >= 5) {
        int v44 = 0;
      }
      if (v44 == 1)
      {
        uint64_t v45 = *(void *)(DerivedStorage + 1704);
        if (!v45 || !FigAlternateIsAudioOnly(v45) || !dword_1E9350BB0) {
          goto LABEL_150;
        }
        goto LABEL_149;
      }
    }
    else
    {
      uint64_t v38 = *(void *)(DerivedStorage + 1704);
      if (v38 && FigAlternateIsIFrameOnly(v38))
      {
LABEL_116:
        uint64_t v54 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v54) {
          uint64_t v55 = v54;
        }
        else {
          uint64_t v55 = 0;
        }
        CFArrayRef v56 = v80;
        unsigned int v57 = *(void (**)(const void *, uint64_t, void, void))(v55 + 32);
        if (v57)
        {
          v57(a1, v34, 0, 0);
          CFArrayRef v56 = v80;
        }
        uint64_t v16 = 0;
        goto LABEL_158;
      }
      char v39 = v81;
      if (v33 >= 5) {
        char v39 = 0;
      }
      if (v39)
      {
        if (a3 != 1936684398) {
          goto LABEL_150;
        }
        uint64_t v40 = *(void *)(DerivedStorage + 1704);
        if (!v40) {
          goto LABEL_150;
        }
        if (FigAlternateIsIFrameOnly(*(void *)(DerivedStorage + 1704)))
        {
          BOOL v41 = 1;
        }
        else
        {
          if (!FigAlternateHasVideo(v40))
          {
LABEL_150:
            uint64_t v71 = fpfs_AddNewTrack(a2, v83, a1, v12, a3, v82);
            if (!v71) {
              goto LABEL_143;
            }
            BOOL v72 = v71;
            uint64_t v73 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v73) {
              uint64_t v74 = v73;
            }
            else {
              uint64_t v74 = 0;
            }
            CFArrayRef v56 = v80;
            unsigned int v75 = *(uint64_t (**)(const void *, void, void, void *))(v74 + 32);
            if (v75)
            {
              uint64_t v69 = v75(a1, v83, &kManifoldOutputCallbacks, v72);
              goto LABEL_156;
            }
            uint64_t v16 = 4294954514;
LABEL_158:
            if (a3 == 1936684398 && v56 == (const __CFArray *)a2)
            {
              uint64_t RenderingTrackofType = fpfs_LastRenderingTrackofType(a2, 1936684398, 0);
              if (RenderingTrackofType) {
                fpfs_CancelGaplessTransitionThatDependsOnTrack(*(const void **)DerivedStorage, RenderingTrackofType, 1);
              }
            }
            goto LABEL_162;
          }
          BOOL v41 = FigAlternateHasAudio(v40) == 0;
        }
        if (!v41 || !dword_1E9350BB0) {
          goto LABEL_150;
        }
LABEL_149:
        LODWORD(v85) = 0;
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        a2 = v84;
        goto LABEL_150;
      }
    }
    if (v33 >= 5 && dword_1E9350BB0)
    {
      LODWORD(v85) = 0;
      CMTimeValue v46 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      a2 = v84;
      uint64_t v34 = v83;
    }
    goto LABEL_116;
  }
  if (*(unsigned char *)(DerivedStorage + 1096))
  {
    uint64_t v42 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v42) {
      uint64_t v43 = v42;
    }
    else {
      uint64_t v43 = 0;
    }
    long long v49 = *(void (**)(const void *, uint64_t, void, void))(v43 + 32);
    if (!v49) {
      goto LABEL_115;
    }
    long long v50 = a1;
    uint64_t v51 = v83;
    goto LABEL_114;
  }
  uint64_t v35 = *(void *)(DerivedStorage + 1704);
  if (!v35)
  {
    uint64_t v47 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v47) {
      uint64_t v48 = v47;
    }
    else {
      uint64_t v48 = 0;
    }
    uint64_t v51 = v83;
    long long v49 = *(void (**)(const void *, uint64_t, void, void))(v48 + 32);
    if (!v49) {
      goto LABEL_115;
    }
    long long v50 = a1;
LABEL_114:
    v49(v50, v51, 0, 0);
LABEL_115:
    uint64_t v16 = 0;
    goto LABEL_164;
  }
  uint64_t v85 = 0;
  uint64_t v36 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v36) {
    uint64_t v37 = v36;
  }
  else {
    uint64_t v37 = 0;
  }
  Float64 v52 = *(void (**)(const void *, void, void, void))(v37 + 32);
  if (v52) {
    v52(a1, v83, 0, 0);
  }
  if (dword_1E9350BB0)
  {
    long long v53 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    a2 = v84;
  }
  uint64_t updated = FigAlternateSetLateDiscoveredMediaType(v35, 1986618469);
  if (!updated)
  {
    CMTimeScale v59 = *(const void **)(DerivedStorage + 40);
    if (!v59) {
      goto LABEL_129;
    }
    uint64_t updated = FigAlternateSelectionBossApplyFilters(v59);
    if (!updated)
    {
      uint64_t v60 = *(void *)(DerivedStorage + 40);
      uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
      uint64_t updated = FigAlternateSelectionBossCopyProperty(v60, @"FilteredAlternateList", AllocatorForMedia, &theArray);
      if (!updated)
      {
        if (!theArray || CFArrayGetCount(theArray) < 1) {
          goto LABEL_143;
        }
        uint64_t updated = fpfsi_UpdateValidAlternateListAndSuggestAnAlternate(a2, theArray, &v85);
        if (!updated)
        {
LABEL_129:
          if (v85)
          {
            uint64_t v62 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v62) {
              uint64_t v63 = v62;
            }
            else {
              uint64_t v63 = 0;
            }
            Float64 v64 = *(void (**)(const void *, void))(v63 + 16);
            if (v64) {
              v64(a1, 0);
            }
            uint64_t v65 = *(void *)(DerivedStorage + 1048);
            if (v65)
            {
              do
              {
                if (!*(void *)(DerivedStorage + 1048)) {
                  break;
                }
                uint64_t v66 = *(void *)(v65 + 8);
                if (*(const void **)(v65 + 48) == a1)
                {
                  if (dword_1E9350BB0)
                  {
                    unsigned int v67 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                    os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT);
                    fig_log_call_emit_and_clean_up_after_send_and_compose();
                  }
                  fpfs_DeleteTrack(v84, v65);
                }
                uint64_t v65 = v66;
              }
              while (v66);
            }
            uint64_t v68 = *(const void **)DerivedStorage;
            long long v89 = *MEMORY[0x1E4F1F9F8];
            uint64_t v90 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
            a2 = v84;
            uint64_t v69 = fpfs_SetAlternateWithContext(v68, v84, v85, 1);
LABEL_156:
            uint64_t v16 = v69;
            CFArrayRef v56 = v80;
            goto LABEL_158;
          }
LABEL_143:
          uint64_t updated = FigSignalErrorAt();
        }
      }
    }
  }
  uint64_t v16 = updated;
LABEL_162:
  if (v16)
  {
    uint64_t v77 = CMBaseObjectGetDerivedStorage();
    fpfs_StopPlayingItemWithOSStatus(v77, a2, v16);
  }
LABEL_164:
  FigFormatDescriptionRelease();
  FigFormatDescriptionRelease();
  if (theArray) {
    CFRelease(theArray);
  }
  return v16;
}

uint64_t fpfs_MPEG2ManifoldErrorCallback()
{
  uint64_t v0 = (const void *)FigCFCopyCompactDescription();
  if (v0) {
    CFRelease(v0);
  }
  return 0;
}

BOOL fpfs_areMetadataFormatsRivals(const opaqueCMFormatDescription *a1, const opaqueCMFormatDescription *a2)
{
  return fpfsi_canMetadataFormatsSync(a1, a2)
      || CMFormatDescriptionGetMediaSubType(a1) == 1768174368
      || CMFormatDescriptionGetMediaSubType(a2) == 1768174368;
}

void fpfsi_TrimFromAllTracks(uint64_t a1, CMTime *a2, int a3, int a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v9 = (CFTypeRef *)(a1 + 2616);
  if (!*(void *)(a1 + 2616))
  {
    CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    CallbacksForUnsortedSampleBuffers = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
    CMBufferQueueCreate(AllocatorForMedia, 0, CallbacksForUnsortedSampleBuffers, (CMBufferQueueRef *)(a1 + 2616));
  }
  uint64_t v12 = *(void *)(a1 + 1064);
  if (v12)
  {
    do
    {
      uint64_t v13 = *(void *)(v12 + 8);
      CMTimeScale v14 = (opaqueCMBufferQueue *)*v9;
      CMTime v18 = *a2;
      fpfsi_TrimCachedSamplesFromTrack(v12, v14, &v18, a3, a4, 1);
      if (!v13) {
        break;
      }
      uint64_t v12 = v13;
    }
    while (*(void *)(a1 + 1064));
  }
  for (uint64_t i = *(void *)(a1 + 1048); i; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v16 = (opaqueCMBufferQueue *)*v9;
    CMTime v18 = *a2;
    fpfsi_TrimCachedSamplesFromTrack(i, v16, &v18, a3, a4, 0);
  }
  if (*v9 && CMBufferQueueGetBufferCount((CMBufferQueueRef)*v9) >= 1)
  {
    CFRetain(*v9);
    CFTypeRef v17 = *v9;
    fpfs_SendBufferQueueToChomper(DerivedStorage, (uint64_t)v17);
  }
}

uint64_t fpfsi_TotalBytesInBuffer(uint64_t *a1)
{
  uint64_t v1 = *a1;
  for (i = 0; v1; uint64_t v1 = *(void *)(v1 + 8))
  {
    uint64_t v3 = *(opaqueCMBufferQueue **)(v1 + 80);
    if (v3)
    {
      i += CMBufferQueueGetTotalSize(v3);
      CMBaseObjectGetDerivedStorage();
      if (dword_1E9350BB0 >= 0xA)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
  }
  if (dword_1E9350BB0 >= 5)
  {
    uint64_t v5 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return i;
}

CMTime *fpfsi_FindEarliestVideoGOPEndInTrackList@<X0>(CMTime *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = MEMORY[0x1E4F1F9F8];
  *(_OWORD *)a2 = *MEMORY[0x1E4F1F9F8];
  *(void *)(a2 + 16) = *(void *)(v3 + 16);
  for (CMTimeValue i = result->value; i; CMTimeValue i = *(void *)(i + 8))
  {
    if (*(_DWORD *)(i + 32) == 1986618469
      && (*(unsigned char *)(i + 508) & 1) != 0
      && (*(unsigned char *)(i + 532) & 1) != 0
      && !*(void *)(i + 536)
      && (*(void *)(i + 520) & 0x8000000000000000) == 0)
    {
      long long v5 = *(_OWORD *)(i + 512);
      *(_OWORD *)&range.start.CMTimeValue value = *(_OWORD *)(i + 496);
      *(_OWORD *)&range.start.CMTimeEpoch epoch = v5;
      *(_OWORD *)&range.duration.CMTimeScale timescale = *(_OWORD *)(i + 528);
      CMTimeRangeGetEnd(&time1, &range);
      *(_OWORD *)&range.start.CMTimeValue value = *(_OWORD *)a2;
      range.start.CMTimeEpoch epoch = *(void *)(a2 + 16);
      uint64_t result = (CMTime *)CMTimeCompare(&time1, &range.start);
      if ((result & 0x80000000) != 0)
      {
        long long v6 = *(_OWORD *)(i + 512);
        *(_OWORD *)&range.start.CMTimeValue value = *(_OWORD *)(i + 496);
        *(_OWORD *)&range.start.CMTimeEpoch epoch = v6;
        *(_OWORD *)&range.duration.CMTimeScale timescale = *(_OWORD *)(i + 528);
        uint64_t result = CMTimeRangeGetEnd(&v7, &range);
        *(CMTime *)a2 = v7;
      }
    }
  }
  return result;
}

void fpfsi_TrimCachedSamplesFromTrack(uint64_t a1, opaqueCMBufferQueue *a2, CMTime *a3, int a4, int a5, int a6)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(a1 + 32) != 1986618469)
  {
    if (a5) {
      goto LABEL_22;
    }
    if (!a4 && *(unsigned char *)(a1 + 420))
    {
      CMTime time2 = *a3;
      fpfs_DecodeTimeForAudioRandomAccessInBufferQueue(a1, &time2, (uint64_t)time1);
      *(_OWORD *)&a3->CMTimeValue value = *(_OWORD *)&time1[0].start.value;
      a3->CMTimeEpoch epoch = time1[0].start.epoch;
    }
LABEL_21:
    *(_OWORD *)&time1[0].start.CMTimeValue value = *(_OWORD *)&a3->value;
    time1[0].start.CMTimeEpoch epoch = a3->epoch;
    fpfsi_ReleaseCachedSamplesFromTrack(a1, a2, &time1[0].start, a4);
    goto LABEL_22;
  }
  if (*(unsigned char *)(a1 + 184)) {
    goto LABEL_21;
  }
  if (!a5)
  {
    fpfsi_SetNextVideoGOPRangeToTrimForTrack(a1);
    if ((*(unsigned char *)(a1 + 508) & 1) == 0
      || (*(unsigned char *)(a1 + 532) & 1) == 0
      || *(void *)(a1 + 536)
      || (*(void *)(a1 + 520) & 0x8000000000000000) != 0)
    {
      return;
    }
    uint64_t v12 = (_OWORD *)(a1 + 496);
    uint64_t v13 = (_OWORD *)MEMORY[0x1E4F1FA20];
    if (!a4) {
      goto LABEL_11;
    }
    while (1)
    {
      *(_OWORD *)&time1[0].start.CMTimeValue value = *v12;
      time1[0].start.CMTimeEpoch epoch = *(void *)(a1 + 512);
      CMTime time2 = *a3;
      if (CMTimeCompare(&time1[0].start, &time2) < 0) {
        break;
      }
      while (1)
      {
        if (*(unsigned char *)(a1 + 182))
        {
          long long v15 = *(_OWORD *)(a1 + 512);
          *(_OWORD *)&time1[0].start.CMTimeValue value = *v12;
          *(_OWORD *)&time1[0].start.CMTimeEpoch epoch = v15;
          *(_OWORD *)&time1[0].duration.CMTimeScale timescale = *(_OWORD *)(a1 + 528);
          CMTimeRangeGetEnd(&v20, time1);
          *(_OWORD *)&time1[0].start.CMTimeValue value = *(_OWORD *)(a1 + 216);
          time1[0].start.CMTimeEpoch epoch = *(void *)(a1 + 232);
          if (!CMTimeCompare(&v20, &time1[0].start))
          {
            uint64_t v16 = MEMORY[0x1E4F1FA10];
            *(_OWORD *)&a3->CMTimeValue value = *MEMORY[0x1E4F1FA10];
            a3->CMTimeEpoch epoch = *(void *)(v16 + 16);
          }
        }
        *(_OWORD *)&time1[0].start.CMTimeValue value = *(_OWORD *)&a3->value;
        time1[0].start.CMTimeEpoch epoch = a3->epoch;
        fpfsi_ReleaseCachedSamplesFromTrack(a1, a2, &time1[0].start, a4);
        long long v17 = v13[1];
        *uint64_t v12 = *v13;
        *(_OWORD *)(a1 + 512) = v17;
        *(_OWORD *)(a1 + 528) = v13[2];
        fpfsi_SetNextVideoGOPRangeToTrimForTrack(a1);
        if (a4) {
          break;
        }
LABEL_11:
        long long v14 = *(_OWORD *)(a1 + 512);
        *(_OWORD *)&time1[0].start.CMTimeValue value = *v12;
        *(_OWORD *)&time1[0].start.CMTimeEpoch epoch = v14;
        *(_OWORD *)&time1[0].duration.CMTimeScale timescale = *(_OWORD *)(a1 + 528);
        CMTimeRangeGetEnd(&v21, time1);
        *(_OWORD *)&time1[0].start.CMTimeValue value = *(_OWORD *)&a3->value;
        time1[0].start.CMTimeEpoch epoch = a3->epoch;
        if (CMTimeCompare(&v21, &time1[0].start) >= 1) {
          goto LABEL_22;
        }
      }
    }
  }
LABEL_22:
  int IsEmpty = CMBufferQueueIsEmpty(*(CMBufferQueueRef *)(a1 + 80));
  if (a6 && IsEmpty)
  {
    if (dword_1E9350BB0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    fpfs_DeleteTrack(*(void *)a1, a1);
  }
}

opaqueCMSampleBuffer *fpfsi_ReleaseCachedSamplesFromTrack(uint64_t a1, opaqueCMBufferQueue *a2, CMTime *a3, int a4)
{
  CMBaseObjectGetDerivedStorage();
  while (1)
  {
    uint64_t result = (opaqueCMSampleBuffer *)CMBufferQueueGetHead(*(CMBufferQueueRef *)(a1 + 80));
    if (!result) {
      break;
    }
    memset(&v12, 0, sizeof(v12));
    CMSampleBufferGetOutputPresentationTimeStamp(&v12, result);
    if (a4)
    {
      if (v12.flags)
      {
        CMTime time1 = v12;
        CMTime v10 = *a3;
        uint64_t result = (opaqueCMSampleBuffer *)CMTimeCompare(&time1, &v10);
        if ((int)result <= 0) {
          return result;
        }
      }
    }
    else if (v12.flags)
    {
      CMTime time1 = v12;
      CMTime v10 = *a3;
      uint64_t result = (opaqueCMSampleBuffer *)CMTimeCompare(&time1, &v10);
      if ((result & 0x80000000) == 0) {
        return result;
      }
    }
    CMBufferRef v9 = CMBufferQueueDequeueAndRetain(*(CMBufferQueueRef *)(a1 + 80));
    if (a2) {
      CMBufferQueueEnqueue(a2, v9);
    }
    if (v9) {
      CFRelease(v9);
    }
  }
  return result;
}

double fpfsi_SetNextVideoGOPRangeToTrimForTrack(uint64_t a1)
{
  long long v6 = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 16);
  long long v7 = *MEMORY[0x1E4F1FA20];
  *(_OWORD *)&refcon.start.CMTimeValue value = *MEMORY[0x1E4F1FA20];
  *(_OWORD *)&refcon.start.CMTimeEpoch epoch = v6;
  long long v5 = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 32);
  *(_OWORD *)&refcon.duration.CMTimeScale timescale = v5;
  CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(a1 + 32) == 1986618469
    && !*(unsigned char *)(a1 + 184)
    && ((*(unsigned char *)(a1 + 508) & 1) == 0
     || (*(unsigned char *)(a1 + 532) & 1) == 0
     || *(void *)(a1 + 536)
     || (*(void *)(a1 + 520) & 0x8000000000000000) != 0))
  {
    CMBufferQueueCallForEachBuffer(*(CMBufferQueueRef *)(a1 + 80), (OSStatus (__cdecl *)(CMBufferRef, void *))fpfs_FindVideoGOPRangeInBufferQueue, &refcon);
    if ((refcon.start.flags & 1) == 0
      || (refcon.duration.flags & 1) == 0
      || refcon.duration.epoch
      || refcon.duration.value < 0)
    {
LABEL_8:
      long long v3 = *(_OWORD *)&refcon.start.epoch;
      *(_OWORD *)(a1 + 496) = *(_OWORD *)&refcon.start.value;
      *(_OWORD *)(a1 + 512) = v3;
      double result = *(double *)&refcon.duration.timescale;
      *(_OWORD *)(a1 + 528) = *(_OWORD *)&refcon.duration.timescale;
      return result;
    }
    if ((~refcon.start.flags & 0x11) != 0 && (refcon.duration.flags & 0x11) != 0x11)
    {
LABEL_21:
      if ((refcon.start.flags & 1) != 0
        && (refcon.duration.flags & 1) != 0
        && !refcon.duration.epoch
        && (refcon.duration.value & 0x8000000000000000) == 0)
      {
        CMTimeMakeWithSeconds(&v9, 30.0, 1);
        v15.CMTime start = refcon.duration;
        if (CMTimeCompare(&v15.start, &v9) >= 1)
        {
          CMTimeMakeWithSeconds(&v8, 30.0, 1);
          CMTime start = refcon.start;
          CMTimeRangeMake(&v15, &start, &v8);
          CMTimeRange refcon = v15;
        }
      }
      goto LABEL_8;
    }
    if (*(unsigned char *)(a1 + 182))
    {
      CMTime start = refcon.start;
      CMTime end = *(CMTime *)(a1 + 216);
      CMTimeRangeFromTimeToTime(&v15, &start, &end);
    }
    else
    {
      *(_OWORD *)&v15.start.CMTimeValue value = *(_OWORD *)(a1 + 216);
      v15.start.CMTimeEpoch epoch = *(void *)(a1 + 232);
      CMTime start = refcon.start;
      CMTimeSubtract(&time1, &v15.start, &start);
      CMTimeMakeWithSeconds(&time2, 30.0, 1);
      if (CMTimeCompare(&time1, &time2) < 1)
      {
        *(_OWORD *)&refcon.start.CMTimeValue value = v7;
        *(_OWORD *)&refcon.start.CMTimeEpoch epoch = v6;
        long long v4 = v5;
        goto LABEL_20;
      }
      CMTimeMakeWithSeconds(&duration, 30.0, 1);
      CMTime start = refcon.start;
      CMTimeRangeMake(&v15, &start, &duration);
    }
    *(_OWORD *)&refcon.start.CMTimeValue value = *(_OWORD *)&v15.start.value;
    *(_OWORD *)&refcon.start.CMTimeEpoch epoch = *(_OWORD *)&v15.start.epoch;
    long long v4 = *(_OWORD *)&v15.duration.timescale;
LABEL_20:
    *(_OWORD *)&refcon.duration.CMTimeScale timescale = v4;
    goto LABEL_21;
  }
  return result;
}

uint64_t fpfs_FindVideoGOPRangeInBufferQueue(opaqueCMSampleBuffer *a1, uint64_t a2)
{
  memset(&v10, 0, sizeof(v10));
  CMSampleBufferGetOutputPresentationTimeStamp(&v10, a1);
  if (fpfs_IsMarkerOnly(a1)) {
    return 0;
  }
  if (fpfs_IsVideoSync(a1)
    && (*(unsigned char *)(a2 + 12) & 1) != 0
    && (*(unsigned char *)(a2 + 36) & 1) != 0
    && !*(void *)(a2 + 40)
    && (*(void *)(a2 + 24) & 0x8000000000000000) == 0
    && (v8.CMTime start = v10, CMTime start = *(CMTime *)a2, CMTimeCompare(&v8.start, &start) >= 1))
  {
    CMTime start = *(CMTime *)a2;
    CMTime v7 = v10;
    CMTimeRangeFromTimeToTime(&v8, &start, &v7);
    long long v6 = *(_OWORD *)&v8.start.epoch;
    *(_OWORD *)a2 = *(_OWORD *)&v8.start.value;
    *(_OWORD *)(a2 + 16) = v6;
    *(_OWORD *)(a2 + 32) = *(_OWORD *)&v8.duration.timescale;
    return 0xFFFFFFFFLL;
  }
  else
  {
    if ((*(unsigned char *)(a2 + 12) & 1) != 0
      && (*(unsigned char *)(a2 + 36) & 1) != 0
      && !*(void *)(a2 + 40)
      && (*(void *)(a2 + 24) & 0x8000000000000000) == 0)
    {
      return 0;
    }
    CMTime start = v10;
    CMTime v7 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F0];
    CMTimeRangeMake(&v8, &start, &v7);
    uint64_t result = 0;
    long long v5 = *(_OWORD *)&v8.start.epoch;
    *(_OWORD *)a2 = *(_OWORD *)&v8.start.value;
    *(_OWORD *)(a2 + 16) = v5;
    *(_OWORD *)(a2 + 32) = *(_OWORD *)&v8.duration.timescale;
  }
  return result;
}

void fpfs_GetPreciseTimeForDate(uint64_t a1@<X0>, uint64_t a2@<X1>, CMTime *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = MEMORY[0x1E4F1F9F8];
  long long v19 = *MEMORY[0x1E4F1F9F8];
  *(_OWORD *)a4 = *MEMORY[0x1E4F1F9F8];
  CMTimeEpoch v9 = *(void *)(v8 + 16);
  *(void *)(a4 + 16) = v9;
  memset(&v33, 0, sizeof(v33));
  int epoch_high = 0;
  uint64_t v36 = 0;
  memset(&v32, 0, sizeof(v32));
  CMTimeMake(&v32, 2, 1);
  *(_OWORD *)&v30.CMTimeValue value = v19;
  v30.CMTimeEpoch epoch = v9;
  memset(&v31, 0, sizeof(v31));
  CFTypeRef v28 = 0;
  CFTypeRef v29 = 0;
  CMTime rhs = *a3;
  CMTime v10 = *(uint64_t **)(a1 + 1616);
  if (v10)
  {
    CMTime time1 = *(CMTime *)((unsigned char *)v10 + 1);
    CMTime time2 = *a3;
    int v11 = 0;
    if (CMTimeCompare(&time1, &time2) < 0)
    {
      while (1)
      {
        CMTime v12 = (CMTime *)v10;
        if (*((unsigned char *)v10 + 84)) {
          int v11 = (CMTime *)v10;
        }
        CMTime v10 = (uint64_t *)*v10;
        if (!v10) {
          break;
        }
        CMTime time1 = *(CMTime *)((unsigned char *)v10 + 1);
        CMTime time2 = rhs;
        if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0) {
          goto LABEL_4;
        }
      }
    }
    else
    {
      CMTime v12 = 0;
LABEL_4:
      CMTime time1 = *(CMTime *)((unsigned char *)v10 + 1);
      CMTime time2 = rhs;
      if (CMTimeCompare(&time1, &time2))
      {
        if (!v12)
        {
          CMTime v12 = *(CMTime **)(a1 + 1616);
          if (!v12) {
            goto LABEL_25;
          }
          CMTime time1 = rhs;
          CMTime time2 = v12[1];
          if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0) {
            goto LABEL_25;
          }
        }
      }
      else
      {
        CMTime v12 = (CMTime *)v10;
      }
    }
    if ((v12[3].flags & 1) != 0 || (CMTime v12 = v11) != 0)
    {
      double v13 = MEMORY[0x199707BD0](a2);
      double v14 = MEMORY[0x199707BD0](v12->epoch);
      CMTimeMake(&v31, (uint64_t)((v13 - v14) * 90000.0), 90000);
      CMTime time2 = v12[3];
      CMTime rhs = v31;
      CMTimeAdd(&time1, &time2, &rhs);
      CMTimeValue value = time1.value;
      uint64_t v36 = *(void *)&time1.flags;
      CMTimeScale timescale = time1.timescale;
      int epoch_high = HIDWORD(time1.epoch);
      CMTime time1 = v12[1];
      CMTime time2 = v31;
      CMTimeAdd(&v30, &time1, &time2);
      CMTime time2 = v30;
      CMTime rhs = v12[2];
      CMTimeSubtract(&time1, &time2, &rhs);
      CMTime v30 = time1;
      CMTime time1 = *(CMTime *)(a1 + 1184);
      CMTime time2 = v12[2];
      CMTimeSubtract(&time, &time1, &time2);
      CMTimeAbsoluteValue(&v25, &time);
      CMTime time2 = v32;
      CMTimeAdd(&time1, &time2, &v25);
      CMTime v32 = time1;
      if (timescale == 90000) {
        CMTimeValue v17 = value & 0x1FFFFFFFFLL;
      }
      else {
        CMTimeValue v17 = value;
      }
      time1.CMTimeValue value = value;
      *(void *)&time1.CMTimeFlags flags = v36;
      time1.CMTimeScale timescale = timescale;
      HIDWORD(time1.epoch) = epoch_high;
      CMTime time2 = v12[4];
      CMTimeAdd(&v33, &time1, &time2);
      CMTime time1 = v30;
      CMTime time2 = v32;
      CMTimeSubtract(&v23, &time1, &time2);
      CMTime time1 = v33;
      if (CMTimeCompare(&v23, &time1) < 0)
      {
        CMTime time1 = v30;
        CMTime time2 = v32;
        CMTimeAdd(&v22, &time1, &time2);
        CMTime time1 = v33;
        if (CMTimeCompare(&time1, &v22) < 0) {
          goto LABEL_24;
        }
      }
      time2.CMTimeValue value = v17;
      *(void *)&time2.CMTimeFlags flags = v36;
      time2.CMTimeScale timescale = timescale;
      HIDWORD(time2.epoch) = epoch_high;
      CMTime rhs = v12[4];
      CMTimeAdd(&time1, &time2, &rhs);
      CMTime v33 = time1;
      CMTime time1 = v30;
      CMTime time2 = v32;
      CMTimeSubtract(&v21, &time1, &time2);
      CMTime time1 = v33;
      if (CMTimeCompare(&v21, &time1) < 0)
      {
        CMTime time1 = v30;
        CMTime time2 = v32;
        CMTimeAdd(&v20, &time1, &time2);
        CMTime time1 = v33;
        if (CMTimeCompare(&time1, &v20) < 0) {
LABEL_24:
        }
          *(CMTime *)a4 = v33;
      }
      return;
    }
  }
LABEL_25:
  if (!fpfsi_CopyPlayerAndItemFromItemRetainProxy(*(void *)(a1 + 16), &v29, &v28))
  {
    if (dword_1E9350BB0)
    {
      LODWORD(rhs.value) = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (v28) {
      CFRelease(v28);
    }
    if (v29) {
      CFRelease(v29);
    }
  }
}

void fpfsi_RTCReportingUpdateBufferDuration(uint64_t a1, uint64_t a2, double a3)
{
  if (a2)
  {
    if (*(unsigned char *)(a1 + 1096) & 1) != 0 && (*(unsigned char *)(a2 + 12))
    {
      uint64_t v6 = *(void *)(a1 + 2544);
      CMTime v28 = *(CMTime *)a2;
      double Seconds = CMTimeGetSeconds(&v28);
      if (v6)
      {
        double v8 = Seconds;
        uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v10 = v9 ? v9 : 0;
        int v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v10 + 56);
        if (v11) {
          v11(v6, 0x1EE582B78, 0x1EE583998, (uint64_t)(v8 * 1000.0), 0);
        }
      }
    }
    if (*(unsigned char *)(a1 + 1096) & 2) != 0 && (*(unsigned char *)(a2 + 36))
    {
      uint64_t v12 = *(void *)(a1 + 2544);
      CMTime v28 = *(CMTime *)(a2 + 24);
      double v13 = CMTimeGetSeconds(&v28);
      if (v12)
      {
        double v14 = v13;
        uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v16 = v15 ? v15 : 0;
        CMTimeValue v17 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v16 + 56);
        if (v17) {
          v17(v12, 0x1EE582B78, 0x1EE5839D8, (uint64_t)(v14 * 1000.0), 0);
        }
      }
    }
    if (*(unsigned char *)(a1 + 1096) & 4) != 0 && (*(unsigned char *)(a2 + 60))
    {
      uint64_t v18 = *(void *)(a1 + 2544);
      CMTime v28 = *(CMTime *)(a2 + 48);
      double v19 = CMTimeGetSeconds(&v28);
      if (v18)
      {
        double v20 = v19;
        uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v22 = v21 ? v21 : 0;
        CMTime v23 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v22 + 56);
        if (v23) {
          v23(v18, 0x1EE582B78, 0x1EE5839F8, (uint64_t)(v20 * 1000.0), 0);
        }
      }
    }
    uint64_t v24 = *(void *)(a1 + 2544);
    if (v24)
    {
      uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v25) {
        uint64_t v26 = v25;
      }
      else {
        uint64_t v26 = 0;
      }
      uint64_t v27 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v26 + 56);
      if (v27) {
        v27(v24, 0x1EE582B78, 0x1EE5839B8, (uint64_t)(a3 * 1000.0), 0);
      }
    }
  }
}

void fpfsi_RemoveDateEntryQueue(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)(a1 + 1616);
  if (v3)
  {
    do
    {
      uint64_t v5 = *(void *)v3;
      if (!a2 || (*(unsigned char *)(v3 + 84) & 1) == 0) {
        fpfsi_RemoveDateEntry(a1, (uint64_t *)v3);
      }
      uint64_t v3 = v5;
    }
    while (v5);
  }
}

uint64_t fpfsi_AddDateToQueue(uint64_t a1, const void *a2, uint64_t a3, long long *a4, long long *a5, uint64_t a6, uint64_t a7, void *a8, char a9)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v17 = DerivedStorage;
  if (a8) {
    uint64_t v18 = a8;
  }
  else {
    uint64_t v18 = (void *)(DerivedStorage + 1616);
  }
  do
  {
    uint64_t v18 = (void *)*v18;
    if (!v18)
    {
      uint64_t v21 = malloc_type_calloc(1uLL, 0x80uLL, 0x10E0040A18345ADuLL);
      if (!v21) {
        return FigSignalErrorAt();
      }
      uint64_t v18 = v21;
      void *v21 = 0;
      uint64_t v22 = *(void **)(v17 + 1624);
      v21[1] = v22;
      *uint64_t v22 = v21;
      *(void *)(v17 + 1624) = v21;
LABEL_11:
      v18[2] = CFRetain(a2);
      uint64_t v23 = *(void *)(a3 + 16);
      *(_OWORD *)(v18 + 3) = *(_OWORD *)a3;
      v18[5] = v23;
LABEL_12:
      long long v24 = *a4;
      v18[8] = *((void *)a4 + 2);
      *((_OWORD *)v18 + 3) = v24;
      long long v25 = *a5;
      v18[11] = *((void *)a5 + 2);
      *(_OWORD *)(v18 + 9) = v25;
      uint64_t v26 = *(void *)(a6 + 16);
      *((_OWORD *)v18 + 6) = *(_OWORD *)a6;
      v18[14] = v26;
      v18[15] = a7;
      if (!a8) {
        return 0;
      }
LABEL_13:
      uint64_t result = 0;
      *a8 = v18;
      return result;
    }
    CMTime time1 = *(CMTime *)((unsigned char *)v18 + 1);
    CMTime v28 = *(CMTime *)a3;
  }
  while (CMTimeCompare(&time1, &v28) < 0);
  CMTime time1 = *(CMTime *)((unsigned char *)v18 + 1);
  CMTime v28 = *(CMTime *)a3;
  if (!CMTimeCompare(&time1, &v28))
  {
    if (!a9) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  double v19 = malloc_type_calloc(1uLL, 0x80uLL, 0x10E0040A18345ADuLL);
  if (v19)
  {
    uint64_t v20 = v18[1];
    *double v19 = v18;
    v19[1] = v20;
    *(void *)v18[1] = v19;
    v18[1] = v19;
    uint64_t v18 = v19;
    goto LABEL_11;
  }
  return FigSignalErrorAt();
}

double fpfs_ReadjustDimensions(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    if (*(unsigned char *)(v5 + 608))
    {
      uint64_t v20 = 0;
      uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
      uint64_t FigBaseObject = FigPlaybackItemGetFigBaseObject(a1);
      uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v10 = v9 ? v9 : 0;
      int v11 = *(unsigned int (**)(uint64_t, __CFString *, uint64_t, const void **))(v10 + 48);
      if (v11)
      {
        if (!v11(FigBaseObject, @"VideoTrackMatrix", AllocatorForMedia, &v20) && v20 != 0)
        {
          FigGetCGAffineTransformFrom3x3MatrixArray(v20, (uint64_t)v19);
          int RotationAngleAndFlipsFromCGAffineTransform = FigGetRotationAngleAndFlipsFromCGAffineTransform(v19, 0, 0);
          CFRelease(v20);
          if (RotationAngleAndFlipsFromCGAffineTransform == 270 || RotationAngleAndFlipsFromCGAffineTransform == 90) {
            *(int8x16_t *)a2 = vextq_s8(*(int8x16_t *)a2, *(int8x16_t *)a2, 8uLL);
          }
        }
      }
    }
    double result = *(double *)a2;
    if (*(double *)a2 == *MEMORY[0x1E4F1DB30]
      && *(double *)(a2 + 8) == *(double *)(MEMORY[0x1E4F1DB30] + 8)
      && *(unsigned char *)(DerivedStorage + 468) == 1)
    {
      CFArrayRef v15 = *(const __CFArray **)(DerivedStorage + 1696);
      if (v15)
      {
        uint64_t CFStringForOSTypeValue = FigGetCFStringForOSTypeValue();
        if (fpfs_FindMediaTypeInMediaArray(v15, CFStringForOSTypeValue, 0)
          || (CFArrayRef v17 = *(const __CFArray **)(DerivedStorage + 1696),
              uint64_t v18 = FigGetCFStringForOSTypeValue(),
              fpfs_FindMediaTypeInMediaArray(v17, v18, 0)))
        {
          double result = 1280.0;
          *(_OWORD *)a2 = xmmword_194993030;
        }
      }
    }
  }
  return result;
}

uint64_t fpfs_setDisplaySizeAndItemVideoSizeOnTextRenderPipeline(uint64_t a1, double a2, double a3, uint64_t a4, uint64_t a5)
{
  if (a2 >= 1.0 && a3 >= 1.0)
  {
    CFDictionaryRef DictionaryRepresentation = CGSizeCreateDictionaryRepresentation(*(CGSize *)&a2);
    if (DictionaryRepresentation)
    {
      CFDictionaryRef v11 = DictionaryRepresentation;
      fpfs_setPropertyOnPrimaryAndAuxRenderPipelines(a1, @"ScreenSize", (uint64_t)DictionaryRepresentation);
      if (!a5)
      {
        CFRelease(v11);
        return 0;
      }
      float v30 = 1.0;
      float v31 = 1.0;
      uint64_t Dimensions = fpfsi_GetDimensions(a5, &v31, &v30);
      if (!Dimensions)
      {
        BOOL v13 = v31 < 1.0;
        if (v30 < 1.0) {
          BOOL v13 = 1;
        }
        if (v13) {
          float v14 = a3;
        }
        else {
          float v14 = v30;
        }
        if (v13) {
          float v15 = a2;
        }
        else {
          float v15 = v31;
        }
        double v16 = v15;
        double v17 = v14;
        int v18 = FigCFEqual();
        v33.double width = v15;
        v33.double height = v14;
        CFDictionaryRef v19 = CGSizeCreateDictionaryRepresentation(v33);
        if (v19)
        {
          CFDictionaryRef v20 = v19;
          float v21 = a2 / v16;
          float v22 = a3 / v17;
          if (v21 >= v22) {
            float v23 = a3 / v17;
          }
          else {
            float v23 = a2 / v16;
          }
          if (v21 <= v22) {
            float v21 = a3 / v17;
          }
          if (!v18) {
            float v21 = v23;
          }
          CGFloat v24 = (float)(v15 * v21);
          CGFloat v25 = (float)(v14 * v21);
          fpfs_setPropertyOnPrimaryAndAuxRenderPipelines(a1, @"OriginalVideoSize", (uint64_t)v19);
          v34.origin.x = (a2 - v24) * 0.5;
          v34.origin.y = (a3 - v25) * 0.5;
          v34.size.double width = v24;
          v34.size.double height = v25;
          CFDictionaryRef v26 = CGRectCreateDictionaryRepresentation(v34);
          if (v26)
          {
            fpfs_setPropertyOnPrimaryAndAuxRenderPipelines(a1, @"VideoDisplayRect", (uint64_t)v26);
            uint64_t v27 = 0;
          }
          else
          {
            uint64_t v27 = FigSignalErrorAt();
          }
          CFRelease(v11);
          CFRelease(v20);
          if (!v26) {
            return v27;
          }
          CFDictionaryRef v28 = v26;
          goto LABEL_28;
        }
        uint64_t Dimensions = FigSignalErrorAt();
      }
      uint64_t v27 = Dimensions;
      CFDictionaryRef v28 = v11;
LABEL_28:
      CFRelease(v28);
      return v27;
    }
  }

  return FigSignalErrorAt();
}

uint64_t fpfsi_GetDimensions(uint64_t a1, float *a2, float *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMTime v7 = *(const void **)DerivedStorage;
  float64x2_t v13 = *(float64x2_t *)MEMORY[0x1E4F1DB30];
  fpfs_LockMutexWithCaller(v7);
  if (FigRetainProxyIsInvalidated())
  {
    uint64_t v8 = FigSignalErrorAt();
  }
  else
  {
    float64x2_t v13 = vcvtq_f64_f32(*(float32x2_t *)(DerivedStorage + 780));
    fpfs_ReadjustDimensions(a1, (uint64_t)&v13);
    uint64_t v8 = 0;
    double v9 = v13.f64[1];
    float v10 = v13.f64[0];
    *a2 = v10;
    float v11 = v9;
    *a3 = v11;
  }
  fpfs_UnlockAndPostNotificationsWithCaller(v7);
  return v8;
}

__CFDictionary *fpfsi_CreatePlayableTimeEntryFromTimeRange(uint64_t a1)
{
  memset(&v15, 0, sizeof(v15));
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 4, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
    FigSignalErrorAt();
    return Mutable;
  }
  Float64 Seconds = 0.0;
  Float64 valuePtr = 0.0;
  CFAllocatorRef v4 = (const __CFAllocator *)FigGetAllocatorForMedia();
  *(_OWORD *)&v14.start.CMTimeValue value = *(_OWORD *)a1;
  v14.start.CMTimeEpoch epoch = *(void *)(a1 + 16);
  CFDictionaryRef v5 = CMTimeCopyAsDictionary(&v14.start, v4);
  if (!v5)
  {
    CFDictionaryRef v8 = 0;
    goto LABEL_15;
  }
  CFDictionarySetValue(Mutable, @"startTime", v5);
  long long v6 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)&v14.start.CMTimeValue value = *(_OWORD *)a1;
  *(_OWORD *)&v14.start.CMTimeEpoch epoch = v6;
  *(_OWORD *)&v14.duration.CMTimeScale timescale = *(_OWORD *)(a1 + 32);
  CMTimeRangeGetEnd(&v15, &v14);
  CFAllocatorRef v7 = (const __CFAllocator *)FigGetAllocatorForMedia();
  v14.CMTime start = v15;
  CFDictionaryRef v8 = CMTimeCopyAsDictionary(&v14.start, v7);
  if (!v8)
  {
LABEL_15:
    CFNumberRef v10 = 0;
    goto LABEL_16;
  }
  CFDictionarySetValue(Mutable, @"endTime", v8);
  *(_OWORD *)&v14.start.CMTimeValue value = *(_OWORD *)a1;
  v14.start.CMTimeEpoch epoch = *(void *)(a1 + 16);
  Float64 valuePtr = CMTimeGetSeconds(&v14.start);
  CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFNumberRef v10 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberDoubleType, &valuePtr);
  if (!v10
    || (CFDictionarySetValue(Mutable, @"start", v10),
        v14.CMTime start = v15,
        Float64 Seconds = CMTimeGetSeconds(&v14.start),
        (CFNumberRef v11 = CFNumberCreate(v9, kCFNumberDoubleType, &Seconds)) == 0))
  {
LABEL_16:
    if (FigSignalErrorAt())
    {
      CFRelease(Mutable);
      CFMutableDictionaryRef Mutable = 0;
    }
    if (!v10) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  CFNumberRef v12 = v11;
  CFDictionarySetValue(Mutable, @"end", v11);
  CFRelease(v12);
LABEL_7:
  CFRelease(v10);
LABEL_8:
  if (v8) {
    CFRelease(v8);
  }
  if (v5) {
    CFRelease(v5);
  }
  return Mutable;
}

uint64_t fpfsi_findLastPlayingTracksForMediaType(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  long long v6 = DerivedStorage;
  uint64_t v7 = DerivedStorage[131];
  if (v7)
  {
    uint64_t v8 = 0x7FFFFFFFLL;
    do
    {
      if (v8 >= *(void *)(v7 + 64)) {
        uint64_t v8 = *(void *)(v7 + 64);
      }
      uint64_t v7 = *(void *)(v7 + 8);
    }
    while (v7);
  }
  else
  {
    uint64_t v8 = 0x7FFFFFFFLL;
  }
  TracksInListOfCMMediaType MediaType = fpfsi_findTracksInListOfMediaType(a2, DerivedStorage[135], DerivedStorage[136], v8, a3, 0, 1);
  uint64_t v10 = fpfsi_findTracksInListOfMediaType(a2, v6[133], v6[134], v8, a3, TracksInListOfMediaType, 1);
  uint64_t v11 = v6[131];
  uint64_t v12 = v6[132];

  return fpfsi_findTracksInListOfMediaType(a2, v11, v12, v8, a3, v10, 0);
}

uint64_t fpfs_setPlaythroughPredictionAndNotify(const void *a1, int a2)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  int v5 = *(_DWORD *)(result + 524);
  if (v5 != a2)
  {
    *(_DWORD *)(result + 524) = a2;
    if (a2 == 1 || v5 == 1)
    {
      return fpfs_EnqueuePlaythroughPredictionNotification(a1);
    }
  }
  return result;
}

CFDictionaryRef fpfs_GetOptionsDictionaryForSelectedMediaType(uint64_t a1)
{
  uint64_t CFStringForOSTypeValue = FigGetCFStringForOSTypeValue();
  CFDictionaryRef MediaTypeInMediaArray = fpfs_FindMediaTypeInMediaArray(*(const __CFArray **)(a1 + 1792), CFStringForOSTypeValue, 0);
  if (!MediaTypeInMediaArray) {
    return 0;
  }
  CFDictionaryGetValue(MediaTypeInMediaArray, @"MediaSelectionOptionsPersistentID");
  CFDictionaryRef v4 = fpfs_FindMediaTypeInMediaArray(*(const __CFArray **)(a1 + 1696), CFStringForOSTypeValue, 0);
  if (!v4) {
    return 0;
  }
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(v4, @"MediaSelectionGroupOptions");
  if (!Value) {
    return 0;
  }
  CFArrayRef v6 = Value;
  CFIndex Count = CFArrayGetCount(Value);
  if (Count < 1) {
    return 0;
  }
  CFIndex v8 = Count;
  CFIndex v9 = 0;
  while (1)
  {
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v6, v9);
    CFDictionaryGetValue(ValueAtIndex, @"MediaSelectionOptionsPersistentID");
    if (FigCFEqual()) {
      break;
    }
    if (v8 == ++v9) {
      return 0;
    }
  }
  return ValueAtIndex;
}

void fpfsi_ExternalProtectionStatusChanged(uint64_t a1, uint64_t a2)
{
  CFTypeRef v4 = 0;
  CFTypeRef cf = 0;
  FigRetainProxyRetain();
  if (fpfsi_CopyPlayerAndItemFromItemRetainProxy(a2, &cf, &v4))
  {
    FigRetainProxyRelease();
  }
  else
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CFTypeRef v3 = v4;
    CMBaseObjectGetDerivedStorage();
    FigGetAllocatorForMedia();
    FigDeferNotificationToDispatchQueue();
    if (v3) {
      CFRelease(v3);
    }
    if (cf) {
      CFRelease(cf);
    }
  }
}

void fpfsi_ExternalProtectionRequiredChanged(uint64_t a1, uint64_t a2)
{
  CFTypeRef v4 = 0;
  CFTypeRef cf = 0;
  FigRetainProxyRetain();
  if (fpfsi_CopyPlayerAndItemFromItemRetainProxy(a2, &cf, &v4))
  {
    FigRetainProxyRelease();
  }
  else
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CFTypeRef v3 = v4;
    CMBaseObjectGetDerivedStorage();
    FigGetAllocatorForMedia();
    FigDeferNotificationToDispatchQueue();
    if (v3) {
      CFRelease(v3);
    }
    if (cf) {
      CFRelease(cf);
    }
  }
}

uint64_t fpfs_deferredExternalProtectionStatusChanged(uint64_t a1, uint64_t a2)
{
  CFTypeRef cf = 0;
  CFTypeRef v12 = 0;
  if (!fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer(a2, &v12, &cf))
  {
    CFTypeRef v9 = v12;
    fpfs_ExternalProtectionStatusChangedGuts(v12, v2, v3, v4, v5, v6, v7, v8);
    fpfs_UnlockAndPostNotificationsWithCaller(v9);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v12) {
    CFRelease(v12);
  }

  return FigRetainProxyRelease();
}

void fpfs_ExternalProtectionStatusChangedGuts(const void *a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  NotificationPayloadForProperties = fpfs_CreateNotificationPayloadForProperties(a1, 0, a3, a4, a5, a6, a7, a8, @"ExternalProtectionStatus", 0);
  fpfs_EnqueueNotification(a1, @"ExternalProtectionStatusChanged", a1, NotificationPayloadForProperties);
  if (NotificationPayloadForProperties)
  {
    CFRelease(NotificationPayloadForProperties);
  }
}

uint64_t fpfsi_deferredExternalProtectionRequiredChanged(uint64_t a1, uint64_t a2)
{
  CFTypeRef cf = 0;
  CFTypeRef v6 = 0;
  int v2 = fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer(a2, &v6, &cf);
  CFTypeRef v3 = cf;
  if (v2)
  {
    if (!cf) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  fpfsi_PostExternalProtectionRequiredChangedNotification(cf);
  fpfs_UnlockAndPostNotificationsWithCaller(v6);
  if (v3) {
LABEL_3:
  }
    CFRelease(v3);
LABEL_4:
  if (v6) {
    CFRelease(v6);
  }

  return FigRetainProxyRelease();
}

void fpfsi_SetTrackMediaType(uint64_t a1, uint64_t a2, int a3)
{
  if (*(void *)(a1 + 168))
  {
    *(_DWORD *)(a2 + 32) = a3;
    uint64_t v4 = a2 + 32;
    CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFNumberRef v6 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, (const void *)(a2 + 32));
    uint64_t v7 = *(void *)(a1 + 168);
    int valuePtr = *(void *)(v4 - 16);
    CFDictionaryRef theDict = 0;
    if (v7 && @"MediaType")
    {
      FigPropertyStorageCopyValue(v7, @"TrackPropertyStorages", &theDict);
      CFDictionaryRef v8 = theDict;
      CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
      if (v8) {
        CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(AllocatorForMedia, 0, theDict);
      }
      else {
        CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      }
      CFDictionaryRef v11 = MutableCopy;
      if (MutableCopy)
      {
        CFNumberRef v12 = CFNumberCreate(v5, kCFNumberSInt32Type, &valuePtr);
        if (v12)
        {
          CFNumberRef v13 = v12;
          CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v11, v12);
          CFAllocatorRef v15 = (const __CFAllocator *)FigGetAllocatorForMedia();
          if (Value) {
            CFMutableDictionaryRef Mutable = CFDictionaryCreateMutableCopy(v15, 0, Value);
          }
          else {
            CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v15, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          }
          double v17 = Mutable;
          if (Mutable)
          {
            CFDictionarySetValue(Mutable, @"MediaType", v6);
            CFDictionarySetValue(v11, v13, v17);
            FigPropertyStorageSetValue(v7, @"TrackPropertyStorages", v11);
            CFRelease(v13);
          }
          else
          {
            double v17 = v13;
          }
          CFRelease(v17);
        }
        CFRelease(v11);
      }
      if (theDict) {
        CFRelease(theDict);
      }
    }
    if (v6) {
      CFRelease(v6);
    }
  }
}

uint64_t fpfs_PushSampleBuffer(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, opaqueCMSampleBuffer *a6)
{
  uint64_t v265 = *MEMORY[0x1E4F143B8];
  CFDictionaryRef v8 = *(__CFString **)a3;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v10 = CMBaseObjectGetDerivedStorage();
  memset(&v231, 0, sizeof(v231));
  CMSampleBufferGetPresentationTimeStamp(&v231, a6);
  memset(&v230, 0, sizeof(v230));
  memset(&v229, 0, sizeof(v229));
  memset(&v228, 0, sizeof(v228));
  memset(&v227, 0, sizeof(v227));
  fpfs_GetTimeOffsetIntoSegment(a6, (uint64_t)&v227);
  if (a6) {
    CFRetain(a6);
  }
  *(unsigned char *)(a3 + 188) = 1;
  CFStringRef v11 = (const __CFString *)*MEMORY[0x1E4F21A20];
  CFTypeRef v12 = CMGetAttachment(a6, (CFStringRef)*MEMORY[0x1E4F21A20], 0);
  if (v12)
  {
    CFNumberRef v13 = v12;
    CFTypeID v14 = CFGetTypeID(v12);
    if (v14 == CFDictionaryGetTypeID())
    {
      CFAllocatorRef v15 = *(const void **)(a3 + 464);
      *(void *)(a3 + 464) = v13;
      CFRetain(v13);
      if (v15) {
        CFRelease(v15);
      }
      fpfsi_applyLoudnessInfo(DerivedStorage, a3, 1);
    }
    if (CMSampleBufferGetNumSamples(a6) < 1) {
      goto LABEL_443;
    }
    CMRemoveAttachment(a6, v11);
  }
  CMBufferQueueEnqueue(*(CMBufferQueueRef *)(a3 + 80), a6);
  if (!*(_DWORD *)(v10 + 32))
  {
LABEL_443:
    uint64_t v151 = 0;
    goto LABEL_406;
  }
  if (!*(void *)(a3 + 40))
  {
LABEL_404:
    uint64_t updated = FigSignalErrorAt();
    goto LABEL_405;
  }
  if (*(void *)(a3 + 384))
  {
    FigBasicAESCPECryptorGetClassID();
    if (!CMBaseObjectIsMemberOfClass()
      || ((LODWORD(lhs.value) = 0, uint64_t v16 = *(void *)(a3 + 384), (v17 = *(void *)(CMBaseObjectGetVTable() + 16)) == 0)
        ? (uint64_t v18 = 0)
        : (uint64_t v18 = v17),
          (CFDictionaryRef v19 = *(unsigned int (**)(uint64_t, CMTime *))(v18 + 16)) == 0
       || v19(v16, &lhs)
       || LODWORD(lhs.value)))
    {
      FigSampleBufferSetDecryptor();
    }
  }
  BOOL v20 = *(_DWORD *)(a3 + 32) == 1936684398 && *(_DWORD *)(a3 + 152) != 6;
  int v21 = 0;
  float v22 = (CMTime *)(a3 + 128);
  int v218 = (_OWORD *)(a3 + 192);
  int v221 = (void *)(DerivedStorage + 1048);
  uint64_t v206 = (CMTime *)(DerivedStorage + 1496);
  uint64_t v209 = (_OWORD *)(a3 + 396);
  uint64_t v205 = *MEMORY[0x1E4F1CFD0];
  CMTimeFlags v208 = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 12);
  CMTimeEpoch v220 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  CFStringRef key = (const __CFString *)*MEMORY[0x1E4F21A48];
  CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  int v219 = (_OWORD *)(a3 + 128);
  while (2)
  {
    int v23 = *(_DWORD *)(a3 + 140) & 0x1D;
    if (v21)
    {
      if (v23 != 1) {
        goto LABEL_465;
      }
      memset(&lhs, 0, sizeof(lhs));
      memset(&rhs, 0, sizeof(rhs));
      CMSampleBufferGetOutputDuration(&rhs, a6);
      CMSampleBufferGetOutputPresentationTimeStamp(&v247, a6);
      CMTime v230 = v247;
      if ((a4 & 1) != 0 && *(_DWORD *)(a3 + 32) == 1986618469)
      {
        uint64_t v175 = (_OWORD *)(DerivedStorage + 1520);
        if ((*(unsigned char *)(DerivedStorage + 1532) & 1) != 0 && !*(unsigned char *)(a3 + 184))
        {
          memset(&v247, 0, sizeof(v247));
          CMTime type = v230;
          *(_OWORD *)&v245.unsigned int value = *v175;
          v245.CMTimeEpoch epoch = *(void *)(DerivedStorage + 1536);
          CMTimeSubtract(&v247, &type, &v245);
          double v176 = *(double *)(DerivedStorage + 1552);
          CMTime type = v247;
          *(double *)(DerivedStorage + 1552) = (fabs(CMTimeGetSeconds(&type)) + v176 * 4.0) / 5.0;
        }
        *uint64_t v175 = *(_OWORD *)&v230.value;
        *(void *)(DerivedStorage + 1536) = v230.epoch;
      }
      if ((rhs.flags & 0x1D) == 1)
      {
        CMTime v247 = v230;
        CMTime type = rhs;
        CMTimeAdd(&lhs, &v247, &type);
      }
      else
      {
        CMTime lhs = v230;
      }
      BOOL v177 = (_OWORD *)(a3 + 216);
      if ((*(unsigned char *)(a3 + 228) & 1) == 0
        || (*(_OWORD *)&v247.unsigned int value = *v177,
            v247.CMTimeEpoch epoch = *(void *)(a3 + 232),
            CMTime type = lhs,
            CMTimeCompare(&v247, &type) < 0))
      {
        _OWORD *v177 = *(_OWORD *)&lhs.value;
        *(void *)(a3 + 232) = lhs.epoch;
      }
      if (*(unsigned char *)(DerivedStorage + 492))
      {
        *(_OWORD *)&v247.unsigned int value = *v177;
        v247.CMTimeEpoch epoch = *(void *)(a3 + 232);
        CMTime type = *(CMTime *)(DerivedStorage + 480);
        if (CMTimeCompare(&v247, &type) >= 1)
        {
          *(_OWORD *)(DerivedStorage + 480) = *MEMORY[0x1E4F1F9F8];
          *(void *)(DerivedStorage + 496) = v220;
          fpfsi_EnqueueEndTimeChangedNotification(v8);
        }
      }
      if (!fpfs_UseTrackToSetPumpOffset(a3)) {
        goto LABEL_465;
      }
      memset(&v247, 0, sizeof(v247));
      CMSampleBufferGetPresentationTimeStamp(&v222, a6);
      CMTime type = *v22;
      CMTimeAdd(&v247, &v222, &type);
      CMTime v245 = v247;
      CMTime v244 = v227;
      CMTimeSubtract(&type, &v245, &v244);
      CMTime v247 = type;
      if (*(_DWORD *)(a3 + 32) != 1986618469 || !*(unsigned char *)(a3 + 184) || fpfs_IsVideoSync(a6))
      {
        uint64_t v178 = DerivedStorage + 24 * *(unsigned __int8 *)(a3 + 180);
        CMTime type = v247;
        CMTime v245 = *(CMTime *)(v178 + 1208);
        fpfs_UpdatePumpOffset((uint64_t)v8, &type, &v245);
      }
      if (!*(void *)(DerivedStorage + 1592) && !*(void *)(DerivedStorage + 1600)
        || (uint64_t updated = fpfs_UpdateDateInfo(a3, a6), !updated))
      {
LABEL_465:
        if (*(_DWORD *)(a3 + 32) == 1986618469)
        {
          uint64_t v179 = *(void *)(a3 + 8);
          if (v179)
          {
            while (*(_DWORD *)(v179 + 32) != 1986618469
                 || *(_DWORD *)(v179 + 152) != 1
                 || *(void *)(v179 + 48) != *(void *)(DerivedStorage + 16 * *(unsigned __int8 *)(v179 + 180) + 1008))
            {
              uint64_t v179 = *(void *)(v179 + 8);
              if (!v179) {
                goto LABEL_441;
              }
            }
            *(void *)(DerivedStorage + 1176) = *(void *)(v179 + 16);
          }
        }
LABEL_441:
        if (*(unsigned char *)(DerivedStorage + 529)) {
          fpfs_CallDispatchHandlerWithItemAndTrack(v8, 0, (void (*)(void))fpfs_endTimerProc);
        }
        goto LABEL_443;
      }
      goto LABEL_405;
    }
    if (v23 == 1)
    {
      CMTime lhs = v231;
      CMTime rhs = *v22;
      CMTimeAdd(&v230, &lhs, &rhs);
      if (*(unsigned char *)(a3 + 184))
      {
        if (*(_DWORD *)(a3 + 32) == 1986618469)
        {
          CMTime lhs = v230;
          long long v211 = *MEMORY[0x1E4F1FA48];
          *(_OWORD *)&rhs.unsigned int value = *MEMORY[0x1E4F1FA48];
          CMTimeEpoch v24 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
          rhs.CMTimeEpoch epoch = v24;
          if (CMTimeCompare(&lhs, &rhs) < 0)
          {
            *(_OWORD *)&v230.unsigned int value = v211;
            v230.CMTimeEpoch epoch = v24;
          }
        }
      }
      CMTime lhs = v230;
      CMSampleBufferSetOutputPresentationTimeStamp(a6, &lhs);
    }
    else
    {
      *(_OWORD *)&v230.unsigned int value = *MEMORY[0x1E4F1F9F8];
      v230.CMTimeEpoch epoch = v220;
    }
    if (!v20) {
      goto LABEL_49;
    }
    if (!*(_DWORD *)(a3 + 152))
    {
LABEL_55:
      if ((a4 & 2) != 0) {
        *(unsigned char *)(a3 + 456) = 1;
      }
      if ((v231.flags & 0x1D) == 1)
      {
        CMTime lhs = v231;
        CFDictionaryRef v28 = CMTimeCopyAsDictionary(&lhs, allocator);
        for (uint64_t i = *v221; i; uint64_t i = *(void *)(i + 8))
        {
          if (*(void *)(i + 64) == *(void *)(a3 + 64) && (*(_DWORD *)(i + 228) & 0x1D) != 1 && v28 != 0)
          {
            uint64_t v31 = *(void *)(i + 48);
            uint64_t v32 = *(void *)(CMBaseObjectGetVTable() + 8);
            uint64_t v33 = v32 ? v32 : 0;
            CGRect v34 = *(void (**)(uint64_t, __CFString *, CFDictionaryRef))(v33 + 56);
            if (v34) {
              v34(v31, @"FMFD_HintForStartTime", v28);
            }
          }
        }
        if (v28) {
          CFRelease(v28);
        }
      }
      uint64_t updated = fpfs_SetTrackStartTimeAndTimeOffset(a3, a6, 1);
      if (!updated)
      {
        uint64_t v36 = *(void *)(a3 + 48);
        uint64_t v37 = DerivedStorage + 16 * *(unsigned __int8 *)(a3 + 180);
        if ((v36 == *(void *)(v37 + 1000) || v36 == *(void *)(v37 + 1008)) && (*(_DWORD *)(a3 + 140) & 0x1D) == 1)
        {
          long long v38 = *(_OWORD *)&v22->value;
          uint64_t v39 = DerivedStorage + 24 * *(unsigned __int8 *)(a3 + 180);
          *(void *)(v39 + 264) = v22->epoch;
          *(_OWORD *)(v39 + 248) = v38;
        }
        if (!*(_DWORD *)(a3 + 152)) {
          fpfs_ChangeTrackState(a3, 2u);
        }
        if (dword_1E9350BB0)
        {
          uint64_t v212 = (uint64_t *)DerivedStorage;
          LODWORD(v247.value) = 0;
          LOBYTE(type.value) = 0;
          os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int value = v247.value;
          if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type.value)) {
            unsigned int v42 = value;
          }
          else {
            unsigned int v42 = value & 0xFFFFFFFE;
          }
          if (v42)
          {
            uint64_t v43 = *v212;
            if (*v212) {
              int v44 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
            }
            else {
              int v44 = "";
            }
            int v203 = v44;
            int v200 = a6;
            if (v8) {
              unsigned int v202 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
            }
            else {
              unsigned int v202 = "";
            }
            uint64_t v73 = *(void *)(a3 + 16);
            CMTime lhs = v231;
            *(_OWORD *)&rhs.unsigned int value = *v219;
            rhs.CMTimeEpoch epoch = *(void *)(a3 + 144);
            CMTimeAdd(&time, &lhs, &rhs);
            Float64 Seconds = CMTimeGetSeconds(&time);
            *(_OWORD *)&lhs.unsigned int value = *v218;
            lhs.CMTimeEpoch epoch = *(void *)(a3 + 208);
            Float64 v75 = CMTimeGetSeconds(&lhs);
            *(_OWORD *)&lhs.unsigned int value = *v219;
            lhs.CMTimeEpoch epoch = *(void *)(a3 + 144);
            Float64 v76 = CMTimeGetSeconds(&lhs);
            CMTime lhs = v231;
            double v77 = CMTimeGetSeconds(&lhs);
            uint64_t v78 = *(void *)(a3 + 64);
            uint64_t v79 = "(gap track)";
            if (!*(unsigned char *)(a3 + 456)) {
              uint64_t v79 = "";
            }
            LODWORD(rhs.value) = 136317954;
            *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"fpfs_PushSampleBuffer";
            LOWORD(rhs.flags) = 2048;
            *(void *)((char *)&rhs.flags + 2) = v43;
            HIWORD(rhs.epoch) = 2082;
            unint64_t v249 = v203;
            __int16 v250 = 2048;
            uint64_t v251 = v8;
            __int16 v252 = 2082;
            long long v253 = v202;
            __int16 v254 = 1024;
            *(_DWORD *)unsigned int v255 = v73;
            *(_WORD *)&v255[4] = 2048;
            *(Float64 *)&v255[6] = Seconds;
            __int16 v256 = 2048;
            Float64 v257 = v75;
            __int16 v258 = 2048;
            *(Float64 *)uint64_t v259 = v76;
            *(_WORD *)&v259[8] = 2048;
            *(double *)&v259[10] = v77;
            *(_WORD *)&v259[18] = 1024;
            *(_DWORD *)&v259[20] = v78;
            __int16 v260 = 2080;
            uint64_t v261 = v79;
            _os_log_send_and_compose_impl();
            a6 = v200;
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          uint64_t DerivedStorage = (uint64_t)v212;
          float v22 = (CMTime *)(a3 + 128);
        }
        if (*(_DWORD *)(a3 + 152)) {
          goto LABEL_175;
        }
        if (dword_1E9350BB0)
        {
          CMTimeFlags v181 = (uint64_t *)DerivedStorage;
          CMTimeEpoch v182 = v8;
          LODWORD(v247.value) = 0;
          LOBYTE(type.value) = 0;
          uint64_t v183 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v184 = v247.value;
          if (os_log_type_enabled(v183, type.value)) {
            unsigned int v185 = v184;
          }
          else {
            unsigned int v185 = v184 & 0xFFFFFFFE;
          }
          if (v185)
          {
            uint64_t v186 = *v181;
            if (*v181) {
              int v187 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
            }
            else {
              int v187 = "";
            }
            if (v182) {
              BOOL v188 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
            }
            else {
              BOOL v188 = "";
            }
            uint64_t v189 = *(void *)(a3 + 16);
            LODWORD(rhs.value) = 136316418;
            *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"fpfs_PushSampleBuffer";
            LOWORD(rhs.flags) = 2048;
            *(void *)((char *)&rhs.flags + 2) = v186;
            HIWORD(rhs.epoch) = 2082;
            unint64_t v249 = v187;
            __int16 v250 = 2048;
            uint64_t v251 = v182;
            __int16 v252 = 2082;
            long long v253 = v188;
            __int16 v254 = 1024;
            *(_DWORD *)unsigned int v255 = v189;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        goto LABEL_443;
      }
LABEL_445:
      if (updated == -12863) {
        goto LABEL_443;
      }
LABEL_405:
      uint64_t v151 = updated;
      goto LABEL_406;
    }
    if (!a6) {
      return 0;
    }
    CMBaseObjectGetDerivedStorage();
    if (*(unsigned char *)(a3 + 420)
      && (CMBufferQueueGetMinPresentationTimeStamp(&lhs, *(CMBufferQueueRef *)(a3 + 72)), (lhs.flags & 1) == 0)
      && (rhs.unsigned int value = 0,
          FigCreateReplacementAudioSBufByOmittingLeadingDependentPackets(a6, 0, (CMSampleBufferRef *)&rhs)))
    {
      CGFloat v25 = (opaqueCMSampleBuffer *)rhs.value;
      if (rhs.value) {
        CFRetain((CFTypeRef)rhs.value);
      }
      CFRelease(a6);
      if (rhs.value) {
        CFRelease((CFTypeRef)rhs.value);
      }
      if (!v25) {
        return 0;
      }
    }
    else
    {
      CGFloat v25 = a6;
    }
    CMSampleBufferGetPresentationTimeStamp(&lhs, v25);
    CMTime v231 = lhs;
    if ((*(_DWORD *)(a3 + 140) & 0x1D) == 1)
    {
      CMSampleBufferGetOutputPresentationTimeStamp(&lhs, v25);
      CMTime v230 = lhs;
    }
    a6 = v25;
LABEL_49:
    BOOL v20 = 0;
    switch(*(_DWORD *)(a3 + 152))
    {
      case 0:
        goto LABEL_55;
      case 1:
      case 5:
        if ((a4 & 2) != 0) {
          *(unsigned char *)(a3 + 456) = 1;
        }
        if (*(unsigned char *)(a3 + 184) && *(_DWORD *)(a3 + 32) == 1986618469)
        {
          uint64_t v26 = a3;
          unsigned int v27 = 2;
LABEL_173:
          fpfs_ChangeTrackState(v26, v27);
LABEL_174:
          BOOL v20 = 0;
LABEL_175:
          int v21 = 0;
          goto LABEL_332;
        }
        uint64_t v213 = DerivedStorage;
        memset(&type, 0, sizeof(type));
        uint64_t v45 = *(void *)a3;
        uint64_t v46 = CMBaseObjectGetDerivedStorage();
        uint64_t v201 = CMBaseObjectGetDerivedStorage();
        CMSampleBufferGetPresentationTimeStamp(&v247, a6);
        if (*(unsigned char *)(a3 + 140)) {
          goto LABEL_309;
        }
        CMTimeValue v263 = *MEMORY[0x1E4F1F9F8];
        CMTimeScale v264 = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 8);
        memset(&v245, 0, sizeof(v245));
        fpfs_GetTime(v46, (uint64_t)&v245);
        uint64_t v47 = *(void *)(v46 + 1048);
        if (v47)
        {
          uint64_t v199 = 0;
          CMTimeFlags v48 = v208;
          CMTimeEpoch v49 = v220;
          while (1)
          {
            if (v47 == a3) {
              goto LABEL_100;
            }
            if ((*(_DWORD *)(v47 + 140) & 0x1D) == 1
              && !*(unsigned char *)(v47 + 456)
              && *(void *)(v47 + 64) == *(void *)(a3 + 64))
            {
              long long v50 = *(_OWORD *)(v47 + 128);
              *(void *)(a3 + 144) = *(void *)(v47 + 144);
              *int v219 = v50;
              uint64_t v199 = v47;
            }
            CMTimeFlags v51 = *(_DWORD *)(v47 + 228);
            if ((v51 & 1) == 0) {
              goto LABEL_100;
            }
            uint64_t v52 = *(void *)(v47 + 64);
            uint64_t v53 = *(void *)(a3 + 64);
            if (v52 > v53) {
              goto LABEL_100;
            }
            if (v52 < v53) {
              goto LABEL_99;
            }
            if (fpfsi_areTracksSyncPairs(v47, a3)) {
              break;
            }
LABEL_100:
            uint64_t v47 = *(void *)(v47 + 8);
            if (!v47) {
              goto LABEL_181;
            }
          }
          CMTimeFlags v51 = *(_DWORD *)(v47 + 228);
LABEL_99:
          CMTimeValue v263 = *(void *)(v47 + 216);
          CMTimeScale v264 = *(_DWORD *)(v47 + 224);
          CMTimeEpoch v49 = *(void *)(v47 + 232);
          CMTimeFlags v48 = v51;
          goto LABEL_100;
        }
        uint64_t v199 = 0;
        CMTimeEpoch v49 = v220;
        CMTimeFlags v48 = v208;
LABEL_181:
        *(void *)int v218 = v263;
        *(_DWORD *)(a3 + 200) = v264;
        *(_DWORD *)(a3 + 204) = v48;
        *(void *)(a3 + 208) = v49;
        LOBYTE(v82) = v48;
        if ((v48 & 0x1D) != 1)
        {
          LOBYTE(v82) = v48;
          if ((*(_DWORD *)(a3 + 140) & 0x1D) == 1)
          {
            CMTime rhs = v247;
            *(_OWORD *)&v244.unsigned int value = *v219;
            v244.CMTimeEpoch epoch = *(void *)(a3 + 144);
            CMTimeAdd(&lhs, &rhs, &v244);
            *int v218 = *(_OWORD *)&lhs.value;
            *(void *)(a3 + 208) = lhs.epoch;
            int v82 = *(_DWORD *)(a3 + 204);
          }
        }
        if ((v82 & 0x1D) != 1
          || (*(_OWORD *)&lhs.value = *v218, lhs.CMTimeEpoch epoch = *(void *)(a3 + 208),
                                             CMTime rhs = v245,
                                             CMTimeCompare(&lhs, &rhs) < 0))
        {
          *int v218 = *(_OWORD *)&v245.value;
          *(void *)(a3 + 208) = v245.epoch;
        }
        if (*(_DWORD *)(a3 + 32) == 1936684398)
        {
          uint64_t TrackOfType = fpfs_LastTrackOfType(v45, 1936684398, a3);
          if (TrackOfType)
          {
            if (fpfs_canCrossfade(v201, TrackOfType, a3))
            {
              *(_OWORD *)&rhs.unsigned int value = *v218;
              rhs.CMTimeEpoch epoch = *(void *)(a3 + 208);
              CMTime v244 = *(CMTime *)gFSPAudioCrossfadeDuration;
              CMTimeSubtract(&lhs, &rhs, &v244);
              *int v218 = *(_OWORD *)&lhs.value;
              CMTimeEpoch epoch = lhs.epoch;
              *(void *)(a3 + 208) = lhs.epoch;
              *(_OWORD *)&rhs.unsigned int value = *v218;
              rhs.CMTimeEpoch epoch = epoch;
              *(_OWORD *)&v244.unsigned int value = kAudioRampingDownSilenceDuration;
              v244.CMTimeEpoch epoch = 0;
              CMTimeSubtract(&lhs, &rhs, &v244);
              *int v218 = *(_OWORD *)&lhs.value;
              *(void *)(a3 + 208) = lhs.epoch;
            }
          }
        }
        int v85 = *(_DWORD *)(a3 + 140);
        uint64_t v204 = v45;
        if (v85)
        {
          CMTimeEpoch v191 = v49;
          *(_OWORD *)&v244.unsigned int value = *v218;
          v244.CMTimeEpoch epoch = *(void *)(a3 + 208);
          memset(&v243, 0, sizeof(v243));
          int valuePtr = 0;
          CFNumberRef number = 0;
          uint64_t v86 = *(void *)(v46 + 936);
          uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
          FigBytePumpGetFigBaseObject(v86);
          uint64_t v89 = v88;
          uint64_t v90 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v90) {
            uint64_t v91 = v90;
          }
          else {
            uint64_t v91 = 0;
          }
          unint64_t v99 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, CFNumberRef *))(v91 + 48);
          if (v99 && !v99(v89, 0x1EE53EA18, AllocatorForMedia, &number) && number)
          {
            CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr);
            CFRelease(number);
          }
          fpfs_GetTime(v46, (uint64_t)&lhs);
          CMTime v245 = lhs;
          CMTime lhs = v244;
          CMTime rhs = v245;
          if (CMTimeCompare(&lhs, &rhs) >= 1) {
            CMTime v244 = v245;
          }
          uint64_t v100 = *(int *)(v46 + 2240);
          CMTimeEpoch v49 = v191;
          if (valuePtr <= (int)v100)
          {
            CMTimeMake(&v239, 2 * v100, 1);
            CMTime rhs = v244;
            CMTimeSubtract(&lhs, &rhs, &v239);
            CMTime v244 = lhs;
          }
          else
          {
            CMTimeMake(&v240, 2 * valuePtr, 1);
            CMTime lhs = v244;
            CMTimeSubtract(&v244, &lhs, &v240);
          }
          CMTimeMake(&v238, *(int *)(v46 + 2240), 1);
          *(_OWORD *)&lhs.unsigned int value = *v218;
          lhs.CMTimeEpoch epoch = *(void *)(a3 + 208);
          CMTimeAdd(&v243, &lhs, &v238);
          CMTime lhs = v247;
          *(_OWORD *)&rhs.unsigned int value = *v219;
          rhs.CMTimeEpoch epoch = *(void *)(a3 + 144);
          CMTimeAdd(&type, &lhs, &rhs);
          if (dword_1E9350BB0)
          {
            unsigned int v237 = 0;
            os_log_type_t v236 = OS_LOG_TYPE_DEFAULT;
            uint64_t v101 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int v102 = v237;
            if (os_log_type_enabled(v101, v236)) {
              unsigned int v103 = v102;
            }
            else {
              unsigned int v103 = v102 & 0xFFFFFFFE;
            }
            if (v103)
            {
              CMTimeScale v104 = *(const void **)v46;
              if (*(void *)v46) {
                CMTimeValue v105 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
              }
              else {
                CMTimeValue v105 = "";
              }
              CFIndex v190 = v105;
              if (v204) {
                unsigned int v114 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
              }
              else {
                unsigned int v114 = "";
              }
              CFAllocatorRef v195 = v8;
              int v115 = *(_DWORD *)(a3 + 16);
              *(_OWORD *)&lhs.unsigned int value = *v218;
              lhs.CMTimeEpoch epoch = *(void *)(a3 + 208);
              Float64 v116 = CMTimeGetSeconds(&lhs);
              *(_OWORD *)&lhs.unsigned int value = *v219;
              lhs.CMTimeEpoch epoch = *(void *)(a3 + 144);
              Float64 v117 = CMTimeGetSeconds(&lhs);
              if (v199) {
                int v118 = *(_DWORD *)(v199 + 16);
              }
              else {
                int v118 = -1;
              }
              CMTime lhs = type;
              Float64 v119 = CMTimeGetSeconds(&lhs);
              CMTime lhs = v247;
              double v120 = CMTimeGetSeconds(&lhs);
              CFTypeRef v121 = "";
              if (*(unsigned char *)(a3 + 456)) {
                CFTypeRef v121 = "(gap track)";
              }
              LODWORD(rhs.value) = 136317954;
              *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"fpfs_SyncSampleBuffer";
              LOWORD(rhs.flags) = 2048;
              *(void *)((char *)&rhs.flags + 2) = v104;
              HIWORD(rhs.epoch) = 2082;
              unint64_t v249 = v190;
              __int16 v250 = 2048;
              uint64_t v251 = (__CFString *)v204;
              __int16 v252 = 2082;
              long long v253 = v114;
              __int16 v254 = 1024;
              *(_DWORD *)unsigned int v255 = v115;
              *(_WORD *)&v255[4] = 2048;
              *(Float64 *)&v255[6] = v116;
              __int16 v256 = 2048;
              Float64 v257 = v117;
              __int16 v258 = 1024;
              *(_DWORD *)uint64_t v259 = v118;
              *(_WORD *)&v259[4] = 2048;
              *(Float64 *)&v259[6] = v119;
              *(_WORD *)&v259[14] = 2048;
              *(double *)&v259[16] = v120;
              __int16 v260 = 2080;
              uint64_t v261 = v121;
              _os_log_send_and_compose_impl();
              CFDictionaryRef v8 = v195;
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            uint64_t v45 = v204;
            CMTimeEpoch v49 = v191;
          }
          if (!*(unsigned char *)(a3 + 184))
          {
            CMTime lhs = type;
            CMTime rhs = v244;
            if (CMTimeCompare(&lhs, &rhs) < 0 || (lhs = type, CMTime rhs = v243, CMTimeCompare(&lhs, &rhs) >= 1))
            {
              *int v219 = *MEMORY[0x1E4F1F9F8];
              *(void *)(a3 + 144) = v220;
            }
          }
          int v85 = *(_DWORD *)(a3 + 140);
        }
        if ((v85 & 1) == 0)
        {
          *(_OWORD *)&rhs.unsigned int value = *v218;
          rhs.CMTimeEpoch epoch = *(void *)(a3 + 208);
          CMTime v244 = v247;
          CMTimeSubtract(&lhs, &rhs, &v244);
          *int v219 = *(_OWORD *)&lhs.value;
          *(void *)(a3 + 144) = lhs.epoch;
          if (dword_1E9350BB0)
          {
            CMTimeEpoch v192 = v49;
            LODWORD(v244.value) = 0;
            LOBYTE(v243.value) = 0;
            unsigned int v122 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int v123 = v244.value;
            if (os_log_type_enabled(v122, v243.value)) {
              unsigned int v124 = v123;
            }
            else {
              unsigned int v124 = v123 & 0xFFFFFFFE;
            }
            if (v124)
            {
              Float64 v125 = *(const void **)v46;
              if (*(void *)v46) {
                uint64_t v126 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
              }
              else {
                uint64_t v126 = "";
              }
              CFDictionaryRef v196 = v8;
              if (v204) {
                CFTypeRef v127 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
              }
              else {
                CFTypeRef v127 = "";
              }
              uint64_t v128 = *(void *)(a3 + 16);
              *(_OWORD *)&lhs.unsigned int value = *v219;
              lhs.CMTimeEpoch epoch = *(void *)(a3 + 144);
              Float64 v129 = CMTimeGetSeconds(&lhs);
              LODWORD(rhs.value) = 136316674;
              *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"fpfs_SyncSampleBuffer";
              LOWORD(rhs.flags) = 2048;
              *(void *)((char *)&rhs.flags + 2) = v125;
              HIWORD(rhs.epoch) = 2082;
              unint64_t v249 = v126;
              __int16 v250 = 2048;
              uint64_t v251 = (__CFString *)v204;
              __int16 v252 = 2082;
              long long v253 = v127;
              __int16 v254 = 1024;
              *(_DWORD *)unsigned int v255 = v128;
              *(_WORD *)&v255[4] = 2048;
              *(Float64 *)&v255[6] = v129;
              _os_log_send_and_compose_impl();
              CFDictionaryRef v8 = v196;
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            uint64_t v45 = v204;
            CMTimeEpoch v49 = v192;
          }
        }
        if (v48)
        {
          int v130 = *(_DWORD *)(a3 + 32);
          if (v130 == 1986618469)
          {
            CMTime rhs = *(CMTime *)(v46 + 2752);
            v244.unsigned int value = v263;
            v244.CMTimeScale timescale = v264;
            v244.CMTimeFlags flags = v48;
            v244.CMTimeEpoch epoch = v49;
            CMTimeMaximum(&lhs, &rhs, &v244);
            *(CMTime *)(v46 + 2752) = lhs;
            CMTime rhs = v247;
            *(_OWORD *)&v244.unsigned int value = *v219;
            v244.CMTimeEpoch epoch = *(void *)(a3 + 144);
            CMTimeAdd(&lhs, &rhs, &v244);
            *(CMTime *)(v46 + 2728) = lhs;
          }
          else if (v130 == 1936684398)
          {
            CMTime rhs = *(CMTime *)(v46 + 2704);
            v244.unsigned int value = v263;
            v244.CMTimeScale timescale = v264;
            v244.CMTimeFlags flags = v48;
            v244.CMTimeEpoch epoch = v49;
            CMTimeMaximum(&lhs, &rhs, &v244);
            *(CMTime *)(v46 + 2704) = lhs;
            CMTime rhs = v247;
            *(_OWORD *)&v244.unsigned int value = *v219;
            v244.CMTimeEpoch epoch = *(void *)(a3 + 144);
            CMTimeAdd(&lhs, &rhs, &v244);
            *(CMTime *)(v46 + 2680) = lhs;
          }
        }
        if (dword_1E9350BB0)
        {
          LODWORD(v244.value) = 0;
          LOBYTE(v243.value) = 0;
          unsigned int v131 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v132 = v244.value;
          if (os_log_type_enabled(v131, v243.value)) {
            unsigned int v133 = v132;
          }
          else {
            unsigned int v133 = v132 & 0xFFFFFFFE;
          }
          if (v133)
          {
            uint64_t v134 = *(const void **)v46;
            if (*(void *)v46) {
              CFTypeRef v135 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
            }
            else {
              CFTypeRef v135 = "";
            }
            uint64_t v193 = v135;
            CFDictionaryRef v197 = v8;
            if (v204) {
              CFTypeRef v136 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
            }
            else {
              CFTypeRef v136 = "";
            }
            uint64_t v137 = *(void *)(a3 + 16);
            CMTime lhs = v247;
            *(_OWORD *)&rhs.unsigned int value = *v219;
            rhs.CMTimeEpoch epoch = *(void *)(a3 + 144);
            CMTimeAdd(&v235, &lhs, &rhs);
            Float64 v138 = CMTimeGetSeconds(&v235);
            *(_OWORD *)&lhs.unsigned int value = *v218;
            lhs.CMTimeEpoch epoch = *(void *)(a3 + 208);
            Float64 v139 = CMTimeGetSeconds(&lhs);
            CMTime lhs = v247;
            Float64 v140 = CMTimeGetSeconds(&lhs);
            uint64_t v141 = *(void *)(a3 + 64);
            fpfs_GetTime(v46, (uint64_t)&v234);
            Float64 v142 = CMTimeGetSeconds(&v234);
            LODWORD(rhs.value) = 136317698;
            *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"fpfs_SyncSampleBuffer";
            LOWORD(rhs.flags) = 2048;
            *(void *)((char *)&rhs.flags + 2) = v134;
            HIWORD(rhs.epoch) = 2082;
            unint64_t v249 = v193;
            __int16 v250 = 2048;
            uint64_t v251 = (__CFString *)v204;
            __int16 v252 = 2082;
            long long v253 = v136;
            __int16 v254 = 1024;
            *(_DWORD *)unsigned int v255 = v137;
            *(_WORD *)&v255[4] = 2048;
            *(Float64 *)&v255[6] = v138;
            __int16 v256 = 2048;
            Float64 v257 = v139;
            __int16 v258 = 2048;
            *(Float64 *)uint64_t v259 = v140;
            *(_WORD *)&v259[8] = 1024;
            *(_DWORD *)&v259[10] = v141;
            *(_WORD *)&v259[14] = 2048;
            *(Float64 *)&v259[16] = v142;
            _os_log_send_and_compose_impl();
            CFDictionaryRef v8 = v197;
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          uint64_t v45 = v204;
        }
        uint64_t v143 = *(void *)(a3 + 48);
        uint64_t v144 = v46 + 16 * *(unsigned __int8 *)(a3 + 180);
        float v22 = (CMTime *)(a3 + 128);
        if (v143 == *(void *)(v144 + 1000) || v143 == *(void *)(v144 + 1008))
        {
          long long v145 = *v219;
          uint64_t v146 = v46 + 24 * *(unsigned __int8 *)(a3 + 180);
          *(void *)(v146 + 264) = *(void *)(a3 + 144);
          *(_OWORD *)(v146 + 248) = v145;
        }
        if (fpfs_UseTrackToSetPumpOffset(a3))
        {
          CFDictionaryRef v147 = (const __CFDictionary *)CMGetAttachment(a6, key, 0);
          memset(&lhs, 0, sizeof(lhs));
          CMTime rhs = v247;
          *(_OWORD *)&v244.unsigned int value = *v219;
          v244.CMTimeEpoch epoch = *(void *)(a3 + 144);
          CMTimeAdd(&lhs, &rhs, &v244);
          if (v147)
          {
            CMTimeMakeFromDictionary(&rhs, v147);
            CMTime lhs = rhs;
            CMTime v244 = rhs;
            *(_OWORD *)&v243.unsigned int value = *v219;
            v243.CMTimeEpoch epoch = *(void *)(a3 + 144);
            CMTimeAdd(&rhs, &v244, &v243);
            CMTime lhs = rhs;
          }
          uint64_t v148 = v46 + 24 * *(unsigned __int8 *)(a3 + 180);
          CMTime rhs = lhs;
          CMTime v244 = *(CMTime *)(v148 + 1208);
          fpfs_UpdatePumpOffset(v45, &rhs, &v244);
          if (*(void *)(v46 + 1592))
          {
            uint64_t started = fpfs_UpdateDateInfo(a3, a6);
            if (started) {
              goto LABEL_312;
            }
          }
        }
        if (*(_DWORD *)(a3 + 32) == 1936684398
          && !fpfs_LastTrackOfType(v45, 1936684398, a3)
          && *(void *)(a3 + 48) != *(void *)(v46 + 16 * *(unsigned __int8 *)(a3 + 180) + 1008))
        {
          if (*(void *)(a3 + 96)
            || *(unsigned char *)(v46 + 2880)
            || *(unsigned char *)(v201 + 523)
            || (uint64_t v170 = *(void *)(v201 + 536)) == 0
            || !FPSupport_IsAnAudioDeviceAvailable(v170)
            || (uint64_t started = fpfs_EnsureRenderChainForTrack(*(const void **)v46, (const __CFString **)a3, 1),
                !started))
          {
            CMTime rhs = v247;
            *(_OWORD *)&v244.unsigned int value = *v219;
            v244.CMTimeEpoch epoch = *(void *)(a3 + 144);
            CMTimeAdd(&lhs, &rhs, &v244);
            CMTime type = lhs;
            CMSampleBufferSetOutputPresentationTimeStamp(a6, &lhs);
            fpfs_ChangeTrackState(a3, 4u);
            uint64_t started = fpfs_PushToNonVideoLateJoiner(a3, a6);
          }
          goto LABEL_312;
        }
LABEL_309:
        CMTime rhs = v247;
        CMTime v245 = *v22;
        CMTimeAdd(&lhs, &rhs, &v245);
        CMTime type = lhs;
        CMSampleBufferSetOutputPresentationTimeStamp(a6, &lhs);
        int v150 = *(_DWORD *)(a3 + 32);
        if (v150 != 1986618469)
        {
          if (v150 == 1936684398)
          {
            uint64_t started = fpfs_SyncAudioBuffer(v46, a3, a6);
            goto LABEL_312;
          }
          if (*(unsigned char *)(a3 + 184))
          {
            memset(&lhs, 0, sizeof(lhs));
            fpfs_GetEndOutputPresentationTimeStamp(a6, &lhs);
            CMTime rhs = lhs;
            *(_OWORD *)&v245.unsigned int value = *v218;
            v245.CMTimeEpoch epoch = *(void *)(a3 + 208);
            if (CMTimeCompare(&rhs, &v245) < 1
              || (fpfs_GetTime(v46, (uint64_t)&v232), CMTime rhs = lhs, CMTimeCompare(&rhs, &v232) < 0)
              || (CMBufferQueueEnqueue(*(CMBufferQueueRef *)(a3 + 72), a6),
                  CMTime rhs = type,
                  *(_OWORD *)&v245.unsigned int value = *MEMORY[0x1E4F1F9F8],
                  v245.CMTimeEpoch epoch = v220,
                  uint64_t started = fpfs_StartTrackPlaying(v46, a3, &rhs, MEMORY[0x1E4F1FA08], &v245),
                  !started))
            {
              uint64_t v151 = 0;
LABEL_327:
              if (v151 != -12863 && v151 != -12785 && v151)
              {
                uint64_t v180 = CMBaseObjectGetDerivedStorage();
                fpfs_StopPlayingItemWithOSStatus(v180, v45, v151);
                goto LABEL_406;
              }
              if (v151) {
                goto LABEL_406;
              }
              goto LABEL_331;
            }
LABEL_312:
            uint64_t v151 = started;
            goto LABEL_327;
          }
LABEL_331:
          BOOL v20 = 0;
          int v21 = 1;
          uint64_t DerivedStorage = v213;
          goto LABEL_332;
        }
        int IsVideoSync = fpfs_IsVideoSync(a6);
        if (!*(void *)(a3 + 96)) {
          fpfs_PreallocateVideoRendering((uint64_t *)a3);
        }
        if (IsVideoSync && (*(unsigned char *)(a3 + 284) & 1) == 0) {
          *(CMTime *)(a3 + 272) = type;
        }
        CMBufferRef Head = CMBufferQueueGetHead(*(CMBufferQueueRef *)(a3 + 72));
        if (IsVideoSync || Head)
        {
          if (IsVideoSync)
          {
            fpfs_GetTime(v46, (uint64_t)&v233);
            CMTime lhs = type;
            if (!fpfs_TimeIsAtOrAfter(v201, &lhs, &v233))
            {
              CMBufferQueueReset(*(CMBufferQueueRef *)(a3 + 72));
              uint64_t v158 = *(void *)(a3 + 96);
              if (v158)
              {
                uint64_t v159 = *(opaqueCMBufferQueue **)(v158 + 40);
                if (*(void *)(v158 + 56)) {
                  CMBufferQueueReset(v159);
                }
                else {
                  MEMORY[0x199709540](v159, fpfs_PreserveResumeTag);
                }
              }
              *(unsigned char *)(a3 + 185) = 1;
            }
          }
        }
        else if (!*(unsigned char *)(a3 + 183))
        {
          goto LABEL_331;
        }
        CMBufferQueueEnqueue(*(CMBufferQueueRef *)(a3 + 72), a6);
        if (*(void *)(a3 + 48) == *(void *)(v46 + 16 * *(unsigned __int8 *)(a3 + 180) + 1008))
        {
          BOOL IsTrialReadyToComplete = fpfs_IsTrialReadyToComplete(v46, a3);
          if (!IsVideoSync) {
            goto LABEL_388;
          }
        }
        else
        {
          BOOL IsTrialReadyToComplete = 0;
          if (!IsVideoSync) {
            goto LABEL_388;
          }
        }
        if (fpfs_CheckVideoSyncQueue(a3, IsTrialReadyToComplete))
        {
          uint64_t started = fpfs_FinishVideoSync(a3);
          if (started) {
            goto LABEL_312;
          }
          goto LABEL_389;
        }
LABEL_388:
        *(void *)(v46 + 1176) = *(void *)(a3 + 16);
LABEL_389:
        if (*(unsigned char *)(a3 + 184) && *(_DWORD *)(a3 + 152) != 6) {
          *(unsigned char *)(v46 + 1564) = 1;
        }
        goto LABEL_331;
      case 2:
        if (*(_DWORD *)(a3 + 32) != 1986618469)
        {
          if (CMSampleBufferGetNumSamples(a6) >= 1)
          {
            uint64_t v26 = a3;
            unsigned int v27 = 3;
            goto LABEL_173;
          }
LABEL_244:
          BOOL v20 = 0;
LABEL_245:
          int v21 = 1;
LABEL_332:
          char v154 = v221;
          do
          {
            uint64_t v155 = *v154;
            char v154 = (void *)(*v154 + 8);
            if (v155) {
              BOOL v156 = v155 == a3;
            }
            else {
              BOOL v156 = 1;
            }
          }
          while (!v156);
          if (!v155)
          {
            uint64_t v157 = *(void *)(DerivedStorage + 1064);
            if (!v157) {
              goto LABEL_398;
            }
            while (v157 != a3)
            {
              uint64_t v157 = *(void *)(v157 + 8);
              if (!v157) {
                goto LABEL_398;
              }
            }
            if (!a3)
            {
LABEL_398:
              LODWORD(v247.value) = 0;
              LOBYTE(type.value) = 0;
              CFTypeRef v171 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              unsigned int v172 = v247.value;
              if (os_log_type_enabled(v171, type.value)) {
                unsigned int v173 = v172;
              }
              else {
                unsigned int v173 = v172 & 0xFFFFFFFE;
              }
              if (v173)
              {
                LODWORD(rhs.value) = 136315138;
                *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"fpfs_PushSampleBuffer";
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              goto LABEL_404;
            }
          }
          continue;
        }
        if (!*(unsigned char *)(a3 + 184))
        {
          if (a4)
          {
            uint64_t updated = CMBufferQueueEnqueue(*(CMBufferQueueRef *)(a3 + 72), a6);
            if (updated) {
              goto LABEL_405;
            }
            fpfs_ChangeTrackState(a3, 3u);
LABEL_152:
            BOOL v20 = 0;
            int v21 = 1;
            goto LABEL_332;
          }
          goto LABEL_244;
        }
        uint64_t v54 = DerivedStorage;
        CFStringRef v55 = *(const __CFString **)a3;
        uint64_t v56 = CMBaseObjectGetDerivedStorage();
        uint64_t v57 = CMBaseObjectGetDerivedStorage();
        memset(&lhs, 0, sizeof(lhs));
        CMSampleBufferGetOutputPresentationTimeStamp(&lhs, a6);
        uint64_t v58 = *(void *)(v56 + 1048);
        if (v58)
        {
          do
          {
            uint64_t v59 = *(void *)(v58 + 8);
            if (v58 != a3 && (!*(unsigned char *)(v58 + 184) || *(_DWORD *)(v58 + 32) != 1986618469)) {
              fpfs_DeleteTrack(v55, v58);
            }
            if (!v59) {
              break;
            }
            uint64_t v58 = v59;
          }
          while (*(void *)(v56 + 1048));
        }
        *(_DWORD *)(v56 + 1560) = 1044549468;
        long long v214 = *MEMORY[0x1E4F1F9F8];
        *(_OWORD *)(v56 + 1520) = *MEMORY[0x1E4F1F9F8];
        *(void *)(v56 + 1536) = v220;
        CMBufferQueueEnqueue(*(CMBufferQueueRef *)(a3 + 72), a6);
        if (fpfs_CanRenderVideo(v57, (uint64_t)v55))
        {
          CMTime rhs = lhs;
          *(_OWORD *)&v247.unsigned int value = v214;
          v247.CMTimeEpoch epoch = v220;
          uint64_t updated = fpfs_StartTrackPlaying(v56, a3, &rhs, MEMORY[0x1E4F1FA08], &v247);
          float v22 = (CMTime *)(a3 + 128);
          if (updated) {
            goto LABEL_396;
          }
          if ((*(unsigned char *)(v56 + 332) & 1) != 0 && !*(unsigned char *)(a3 + 104))
          {
            CMTime rhs = lhs;
            fpfs_SetTime((uint64_t)v55, &rhs);
            int v60 = *(_DWORD *)(v56 + 2200);
            if (!v60) {
              int v60 = *(_DWORD *)(v56 + 2204);
            }
            uint64_t v61 = *(const void **)v56;
            CMTime rhs = lhs;
            fpfs_SeekDidComplete(v61, v55, v60, 0, 0, &rhs);
            *(_DWORD *)(v56 + 2200) = 0;
          }
        }
        else
        {
          fpfs_ChangeTrackState(a3, 0);
          float v22 = (CMTime *)(a3 + 128);
        }
        fpfs_UpdateDimensions(v55, 1);
        CMTime rhs = lhs;
        uint64_t updated = fpfs_StepIFrame(a3, (long long *)&rhs.value);
        if (!updated) {
          uint64_t updated = fpfs_CheckIfLikelyToKeepUpAndNotify(*(void **)v56, (const __CFArray *)v55, MEMORY[0x1E4F1FA48], 1, MEMORY[0x1E4F1F9F8], MEMORY[0x1E4F1F9F8], 0);
        }
        if (!updated)
        {
          BOOL v20 = 0;
          int v21 = 1;
          uint64_t DerivedStorage = v54;
          goto LABEL_332;
        }
LABEL_396:
        uint64_t v151 = 0;
        if (updated != -12863) {
          goto LABEL_405;
        }
LABEL_406:
        if (a6) {
          CFRelease(a6);
        }
        return v151;
      case 3:
        if ((*(unsigned char *)(DerivedStorage + 1508) & 1) != 0 && (*(_DWORD *)(a3 + 140) & 0x1D) == 1)
        {
          CMTime lhs = *v206;
          *(_OWORD *)&rhs.unsigned int value = *v209;
          rhs.CMTimeEpoch epoch = *(void *)(a3 + 412);
          CMTimeSubtract(&time2, &lhs, &rhs);
          CMTime lhs = v230;
          if (CMTimeCompare(&lhs, &time2) <= 0)
          {
            if (*(_DWORD *)(a3 + 32) == 1986618469)
            {
              char v112 = a4 & (*(_DWORD *)(a3 + 32) == 1986618469);
            }
            else
            {
              uint64_t v160 = *(void *)(a3 + 64);
              uint64_t v161 = CMBaseObjectGetDerivedStorage();
              uint64_t v162 = *(void *)(v161 + 1048);
              if (v162)
              {
                char v112 = 0;
                char v163 = 0;
                do
                {
                  if (*(void *)(v162 + 64) == v160 && (*(_DWORD *)(v162 + 140) & 0x1D) == 1)
                  {
                    int v164 = *(_DWORD *)(v162 + 32);
                    if (v164 == 1936684398) {
                      char v163 = 1;
                    }
                    if (v164 == 1986618469) {
                      char v112 = 1;
                    }
                  }
                  uint64_t v162 = *(void *)(v162 + 8);
                }
                while (v162);
              }
              else
              {
                char v163 = 0;
                char v112 = 0;
              }
              if (*(void *)(v161 + 1112)) {
                char v112 = v163;
              }
            }
            if (v112)
            {
              if (*(unsigned char *)(a3 + 420))
              {
                CMTime lhs = v230;
                fpfs_TrimAudioTrack(a3, &lhs);
              }
              else
              {
                CMBufferQueueReset(*(CMBufferQueueRef *)(a3 + 72));
              }
            }
          }
        }
        uint64_t v62 = (opaqueCMSampleBuffer *)CMBufferQueueGetHead(*(CMBufferQueueRef *)(a3 + 72));
        if (!v62) {
          goto LABEL_127;
        }
        CMSampleBufferGetPresentationTimeStamp(&v229, v62);
        CMTimeMake(&v224, 100, 1000);
        CMTime lhs = v229;
        CMTimeAdd(&v228, &lhs, &v224);
        CMTime rhs = v228;
        *(_OWORD *)&v247.unsigned int value = *v209;
        v247.CMTimeEpoch epoch = *(void *)(a3 + 412);
        CMTimeAdd(&lhs, &rhs, &v247);
        CMTime v228 = lhs;
        CMTime lhs = v231;
        CMTime rhs = v228;
        if (CMTimeCompare(&lhs, &rhs) < 0
          || !fpfs_AreTracksReadyToPlay((const __CFArray *)v8, *(void *)(a3 + 64), 0))
        {
          goto LABEL_127;
        }
        uint64_t updated = fpfs_PerformInitialResolveOfAllWaitingTracks((const __CFArray *)v8);
        if (updated) {
          goto LABEL_445;
        }
        unsigned int v63 = *(_DWORD *)(a3 + 152);
        if (v63 <= 8 && ((1 << v63) & 0x1D0) != 0) {
          goto LABEL_174;
        }
LABEL_127:
        CMBufferQueueEnqueue(*(CMBufferQueueRef *)(a3 + 72), a6);
        goto LABEL_244;
      case 4:
        if (*(_DWORD *)(a3 + 32) == 1986618469 && !*(unsigned char *)(a3 + 456))
        {
          fpfs_ChangeTrackState(a3, 5u);
          BOOL v20 = 0;
          int v21 = 0;
          *(unsigned char *)(DerivedStorage + 469) = 0;
          goto LABEL_332;
        }
        uint64_t updated = fpfs_PushToNonVideoLateJoiner(a3, a6);
        if (updated) {
          goto LABEL_405;
        }
        goto LABEL_152;
      case 6:
        if (!*(unsigned char *)(a3 + 184) || *(_DWORD *)(a3 + 32) != 1986618469) {
          goto LABEL_243;
        }
        if (*(unsigned char *)(DerivedStorage + 1564)) {
          goto LABEL_443;
        }
        if (fpfs_IsVideoSync(a6))
        {
          CMTime lhs = v230;
          long long v215 = *MEMORY[0x1E4F1FA48];
          *(_OWORD *)&rhs.unsigned int value = *MEMORY[0x1E4F1FA48];
          CMTimeEpoch v64 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
          rhs.CMTimeEpoch epoch = v64;
          if (CMTimeCompare(&lhs, &rhs) < 0)
          {
            *(_OWORD *)&v230.unsigned int value = v215;
            v230.CMTimeEpoch epoch = v64;
          }
          CMTime lhs = v230;
          CMSampleBufferSetOutputPresentationTimeStamp(a6, &lhs);
          fpfs_RenderBuffer(a3, a6);
          CMTime lhs = v230;
          uint64_t updated = fpfs_StepIFrame(a3, (long long *)&lhs.value);
          if (updated) {
            goto LABEL_396;
          }
          BOOL v20 = 0;
          int v21 = 1;
        }
        else
        {
          if (dword_1E9350BB0 < 2) {
            goto LABEL_244;
          }
          uint64_t v106 = DerivedStorage;
          LODWORD(v247.value) = 0;
          LOBYTE(type.value) = 0;
          uint64_t v107 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v108 = v247.value;
          if (os_log_type_enabled(v107, type.value)) {
            unsigned int v109 = v108;
          }
          else {
            unsigned int v109 = v108 & 0xFFFFFFFE;
          }
          if (v109)
          {
            uint64_t v110 = *(void *)v106;
            if (*(void *)v106) {
              uint64_t v111 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
            }
            else {
              uint64_t v111 = "";
            }
            uint64_t v198 = v8;
            CFStringRef v165 = *(const __CFString **)a3;
            if (*(void *)a3) {
              uint64_t v166 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
            }
            else {
              uint64_t v166 = "";
            }
            CMTime lhs = v231;
            Float64 v167 = CMTimeGetSeconds(&lhs);
            int v168 = *(_DWORD *)(v106 + 952);
            LODWORD(rhs.value) = 136316674;
            *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"fpfs_PushSampleBuffer";
            LOWORD(rhs.flags) = 2048;
            *(void *)((char *)&rhs.flags + 2) = v110;
            HIWORD(rhs.epoch) = 2082;
            unint64_t v249 = v111;
            __int16 v250 = 2048;
            uint64_t v251 = (__CFString *)v165;
            __int16 v252 = 2082;
            long long v253 = v166;
            __int16 v254 = 2048;
            *(Float64 *)unsigned int v255 = v167;
            *(_WORD *)&v255[8] = 1024;
            *(_DWORD *)&v255[10] = v168;
            _os_log_send_and_compose_impl();
            CFDictionaryRef v8 = v198;
            float v22 = (CMTime *)(a3 + 128);
          }
          else
          {
            float v22 = (CMTime *)(a3 + 128);
          }
          int v21 = 1;
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          BOOL v20 = 0;
          uint64_t DerivedStorage = v106;
        }
        goto LABEL_332;
      case 7:
        fpfs_GetEndOutputPresentationTimeStamp(a6, &time1);
        *(_OWORD *)&lhs.unsigned int value = *v218;
        lhs.CMTimeEpoch epoch = *(void *)(a3 + 208);
        if (CMTimeCompare(&time1, &lhs) < 0)
        {
          if (fpfs_IsVideoSync(a6))
          {
            uint64_t v80 = *(void *)(a3 + 96);
            if (v80)
            {
              int v81 = *(opaqueCMBufferQueue **)(v80 + 40);
              if (*(void *)(v80 + 56)) {
                CMBufferQueueReset(v81);
              }
              else {
                MEMORY[0x199709540](v81, fpfs_PreserveResumeTag);
              }
            }
            *(unsigned char *)(a3 + 185) = 1;
          }
          fpfs_DoNotDisplay(a6);
LABEL_243:
          fpfs_RenderBuffer(a3, a6);
          goto LABEL_244;
        }
        uint64_t v65 = *(void *)(a3 + 96);
        if (v65)
        {
          uint64_t v66 = *v221;
          if (*v221 != a3 && v66)
          {
            do
            {
              if (*(void *)(v66 + 96) == v65) {
                break;
              }
              uint64_t v66 = *(void *)(v66 + 8);
            }
            while (v66 != a3 && v66 != 0);
          }
          if (v66 == a3)
          {
            uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(*(void *)(v65 + 32));
            uint64_t v93 = *(void *)(CMBaseObjectGetVTable() + 8);
            uint64_t v94 = v93 ? v93 : 0;
            uint64_t v113 = *(void (**)(uint64_t, __CFString *, uint64_t))(v94 + 56);
            if (v113) {
              v113(FigBaseObject, @"Suspended", v205);
            }
          }
        }
        CMBufferQueueEnqueue(*(CMBufferQueueRef *)(a3 + 72), a6);
        *(_OWORD *)&lhs.unsigned int value = *v218;
        lhs.CMTimeEpoch epoch = *(void *)(a3 + 208);
        *(_OWORD *)&rhs.unsigned int value = *MEMORY[0x1E4F1F9F8];
        rhs.CMTimeEpoch epoch = v220;
        uint64_t updated = fpfs_StartTrackPlaying(DerivedStorage, a3, &lhs, MEMORY[0x1E4F1FA08], &rhs);
        if (updated) {
          goto LABEL_405;
        }
        goto LABEL_152;
      case 8:
        if (!dword_1E9350BB0) {
          goto LABEL_244;
        }
        int v216 = (uint64_t *)DerivedStorage;
        LODWORD(v247.value) = 0;
        LOBYTE(type.value) = 0;
        uint64_t v68 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v69 = v247.value;
        if (os_log_type_enabled(v68, type.value)) {
          unsigned int v70 = v69;
        }
        else {
          unsigned int v70 = v69 & 0xFFFFFFFE;
        }
        if (v70)
        {
          uint64_t v71 = *v216;
          if (*v216) {
            BOOL v72 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
          }
          else {
            BOOL v72 = "";
          }
          BOOL v194 = v8;
          CFStringRef v95 = *(const __CFString **)a3;
          if (*(void *)a3) {
            __int16 v96 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
          }
          else {
            __int16 v96 = "";
          }
          uint64_t v97 = *(void *)(a3 + 16);
          CMTime lhs = v230;
          Float64 v98 = CMTimeGetSeconds(&lhs);
          LODWORD(rhs.value) = 136316674;
          *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"fpfs_PushSampleBuffer";
          LOWORD(rhs.flags) = 2048;
          *(void *)((char *)&rhs.flags + 2) = v71;
          HIWORD(rhs.epoch) = 2082;
          unint64_t v249 = v72;
          __int16 v250 = 2048;
          uint64_t v251 = (__CFString *)v95;
          __int16 v252 = 2082;
          long long v253 = v96;
          __int16 v254 = 1024;
          *(_DWORD *)unsigned int v255 = v97;
          *(_WORD *)&v255[4] = 2048;
          *(Float64 *)&v255[6] = v98;
          _os_log_send_and_compose_impl();
          CFDictionaryRef v8 = v194;
          float v22 = (CMTime *)(a3 + 128);
        }
        else
        {
          float v22 = (CMTime *)(a3 + 128);
        }
        int v21 = 1;
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        BOOL v20 = 0;
        uint64_t DerivedStorage = (uint64_t)v216;
        goto LABEL_332;
      default:
        goto LABEL_245;
    }
  }
}

uint64_t fpfs_TrackEnd(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return fpfs_StopFeedingTrack(a3, a4, a4 == 0);
}

uint64_t fpfs_PushToNonVideoLateJoiner(uint64_t a1, opaqueCMSampleBuffer *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  memset(&v13, 0, sizeof(v13));
  fpfs_GetEndOutputPresentationTimeStamp(a2, &v13);
  CMTime v12 = *(CMTime *)(a1 + 192);
  memset(&v11, 0, sizeof(v11));
  fpfs_GetTime(DerivedStorage, (uint64_t)&v11);
  if (*(_DWORD *)(a1 + 32) == 1986618469 && !*(unsigned char *)(a1 + 456)) {
    return 0;
  }
  CMTime time1 = v12;
  CMTime time2 = v11;
  if (CMTimeCompare(&time1, &time2) < 0) {
    CMTime v12 = v11;
  }
  CMTime time1 = v13;
  CMTime time2 = v11;
  if (CMTimeCompare(&time1, &time2) <= 0)
  {
    CMTime time1 = v12;
    CMTime time2 = *(CMTime *)(a1 + 396);
    CMTimeSubtract(&v8, &time1, &time2);
    CMTime time1 = v13;
    if (CMTimeCompare(&time1, &v8) < 1) {
      return 0;
    }
  }
  if (*(_DWORD *)(a1 + 32) != 1936684398)
  {
    CMTime time1 = v12;
    CMTime time2 = *(CMTime *)(a1 + 396);
    CMTimeSubtract(&v6, &time1, &time2);
    CMTime time1 = v13;
    if (CMTimeCompare(&time1, &v6) >= 1)
    {
      CMBufferQueueEnqueue(*(CMBufferQueueRef *)(a1 + 72), a2);
      CMTime time1 = v13;
      CMTime time2 = v12;
      uint64_t result = CMTimeCompare(&time1, &time2) > 0;
      if (!result) {
        return result;
      }
      goto LABEL_14;
    }
    return 0;
  }
  memset(&time1, 0, sizeof(time1));
  CMTimeMake(&time1, 250, 1000);
  if (*(float *)(DerivedStorage + 848) != 0.0)
  {
    CMTime time2 = v12;
    CMTime rhs = time1;
    CMTimeAdd(&v12, &time2, &rhs);
  }
  CMTime time2 = v12;
  uint64_t result = (uint64_t)fpfs_IsAudioTrackReadyToStart(a1, a2, &time2, 0);
  if (result)
  {
LABEL_14:
    CMTime time1 = v12;
    CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
    uint64_t result = fpfs_StartTrackPlaying(DerivedStorage, a1, &time1, MEMORY[0x1E4F1FA08], &time2);
    if (result) {
      return result;
    }
    if (fpfs_FirstRenderingTrackofType(*(void *)a1, 1936684398) == a1) {
      fpfs_SetRateOnTrack((uint64_t *)a1, MEMORY[0x1E4F1F9F8], MEMORY[0x1E4F1F9F8], *(float *)(DerivedStorage + 848));
    }
    return 0;
  }
  return result;
}

void fpfs_PreserveResumeTag(const void *a1, uint64_t a2)
{
  CFTypeRef v3 = CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E4F1F2C0], 0);
  if (v3)
  {
    uint64_t v4 = *(const void **)(a2 + 56);
    *(void *)(a2 + 56) = v3;
    CFRetain(v3);
    if (v4)
    {
      CFRelease(v4);
    }
  }
}

BOOL fpfs_UseTrackToSetPumpOffset(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  BOOL valid = fpfs_audioOnlyValidAlternateList(DerivedStorage);
  if ((*(unsigned char *)(DerivedStorage + 24 * *(unsigned __int8 *)(a1 + 180) + 1220) & 1) == 0
    || *(void *)(a1 + 48) == *(void *)(DerivedStorage + 16 * *(unsigned __int8 *)(a1 + 180) + 1008))
  {
    return 0;
  }
  int v4 = *(_DWORD *)(a1 + 32);
  if (v4 == 1986618469) {
    return 1;
  }
  return valid && v4 == 1936684398;
}

uint64_t fpfs_UpdatePumpOffset(uint64_t a1, CMTime *a2, CMTime *a3)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  uint64_t result = CMBaseObjectGetDerivedStorage();
  uint64_t v6 = result;
  uint64_t v7 = (CMTime *)(result + 1304);
  int v8 = *(_DWORD *)(result + 1316);
  CFTypeRef v9 = (long long *)MEMORY[0x1E4F1F9F8];
  if (v8)
  {
    memset(&v41, 0, sizeof(v41));
    CMTime lhs = *a3;
    CMTime rhs = *(CMTime *)(result + 1280);
    CMTimeSubtract(&v41, &lhs, &rhs);
    memset(&v40, 0, sizeof(v40));
    CMTime lhs = *a2;
    CMTime rhs = *v7;
    CMTimeSubtract(&v40, &lhs, &rhs);
    memset(&v39, 0, sizeof(v39));
    memset(&v38, 0, sizeof(v38));
    CMTimeMake(&v38, 1, 1);
    CMTime lhs = v41;
    CMTime rhs = v40;
    if (CMTimeCompare(&lhs, &rhs) < 0)
    {
      CMTime lhs = v40;
      *(_OWORD *)&rhs.unsigned int value = *(_OWORD *)&v41.value;
      CMTimeEpoch epoch = v41.epoch;
    }
    else
    {
      CMTime lhs = v41;
      *(_OWORD *)&rhs.unsigned int value = *(_OWORD *)&v40.value;
      CMTimeEpoch epoch = v40.epoch;
    }
    rhs.CMTimeEpoch epoch = epoch;
    CMTimeSubtract(&v39, &lhs, &rhs);
    CMTime lhs = v39;
    CMTime rhs = v38;
    uint64_t result = CMTimeCompare(&lhs, &rhs);
    if ((result & 0x80000000) == 0)
    {
      if (dword_1E9350BB0)
      {
        int v37 = 0;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        uint64_t result = fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      long long v11 = *v9;
      *(_OWORD *)&v7->unsigned int value = *v9;
      CMTimeEpoch v12 = *((void *)v9 + 2);
      v7->CMTimeEpoch epoch = v12;
      *(_OWORD *)(v6 + 1280) = v11;
      *(void *)(v6 + 1296) = v12;
    }
    int v8 = *(_DWORD *)(v6 + 1316);
  }
  if ((v8 & 1) == 0)
  {
    CMTime rhs = *a3;
    CMTime v41 = *a2;
    CMTimeSubtract(&lhs, &rhs, &v41);
    *(_OWORD *)(v6 + 1184) = *(_OWORD *)&lhs.value;
    CMTimeEpoch v13 = lhs.epoch;
    *(void *)(v6 + 1200) = lhs.epoch;
    uint64_t v14 = *(void *)(v6 + 96);
    *(_OWORD *)&lhs.unsigned int value = *(_OWORD *)(v6 + 1184);
    lhs.CMTimeEpoch epoch = v13;
    uint64_t result = FigAlternatePlaybackBitrateMonitorSetPumpOffset(v14, (uint64_t)&lhs);
    if (dword_1E9350BB0)
    {
      LODWORD(v41.value) = 0;
      LOBYTE(v40.value) = 0;
      CFAllocatorRef v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int value = v41.value;
      if (os_log_type_enabled(v15, v40.value)) {
        unsigned int v17 = value;
      }
      else {
        unsigned int v17 = value & 0xFFFFFFFE;
      }
      if (v17)
      {
        uint64_t v18 = *(void *)v6;
        if (*(void *)v6) {
          CFDictionaryRef v19 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
        }
        else {
          CFDictionaryRef v19 = "";
        }
        uint64_t v32 = v19;
        if (a1) {
          BOOL v20 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
        }
        else {
          BOOL v20 = "";
        }
        uint64_t v31 = v20;
        CMTime lhs = *(CMTime *)(v6 + 1184);
        Float64 Seconds = CMTimeGetSeconds(&lhs);
        fpfs_GetTime(v6, (uint64_t)&time);
        Float64 v22 = CMTimeGetSeconds(&time);
        CMTime lhs = *a3;
        Float64 v23 = CMTimeGetSeconds(&lhs);
        CMTime lhs = *a2;
        Float64 v24 = CMTimeGetSeconds(&lhs);
        LODWORD(rhs.value) = 136317186;
        *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"fpfs_UpdatePumpOffset";
        LOWORD(rhs.flags) = 2048;
        *(void *)((char *)&rhs.flags + 2) = v18;
        HIWORD(rhs.epoch) = 2082;
        uint64_t v43 = v32;
        __int16 v44 = 2048;
        uint64_t v45 = a1;
        __int16 v46 = 2082;
        uint64_t v47 = v31;
        __int16 v48 = 2048;
        Float64 v49 = Seconds;
        __int16 v50 = 2048;
        Float64 v51 = v22;
        __int16 v52 = 2048;
        Float64 v53 = v23;
        __int16 v54 = 2048;
        Float64 v55 = v24;
        _os_log_send_and_compose_impl();
        CFTypeRef v9 = (long long *)MEMORY[0x1E4F1F9F8];
      }
      uint64_t result = fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    long long v25 = *(_OWORD *)&a2->value;
    v7->CMTimeEpoch epoch = a2->epoch;
    *(_OWORD *)&v7->unsigned int value = v25;
    long long v26 = *(_OWORD *)&a3->value;
    *(void *)(v6 + 1296) = a3->epoch;
    *(_OWORD *)(v6 + 1280) = v26;
  }
  uint64_t v27 = 0;
  long long v28 = *v9;
  uint64_t v29 = *((void *)v9 + 2);
  do
  {
    uint64_t v30 = v6 + 1208 + v27;
    *(_OWORD *)uint64_t v30 = v28;
    *(void *)(v30 + 16) = v29;
    v27 += 24;
  }
  while (v27 != 72);
  return result;
}

uint64_t fpfs_UpdateDateInfo(uint64_t a1, opaqueCMSampleBuffer *a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if ((*(_DWORD *)(a1 + 140) & 0x1D) == 1)
  {
    uint64_t v5 = DerivedStorage;
    uint64_t v6 = (_OWORD *)(a1 + 128);
    uint64_t v7 = *(const void **)(DerivedStorage + 1592);
    if (v7)
    {
      uint64_t v8 = *(void *)a1;
      CMSampleBufferGetPresentationTimeStamp(&v21, a2);
      uint64_t v9 = *(void *)(a1 + 64);
      CMTime rhs = *(CMTime *)(v5 + 1568);
      CMTime time2 = *(CMTime *)(v5 + 1184);
      *(_OWORD *)&v20.CMTimeValue value = *v6;
      v20.CMTimeEpoch epoch = *(void *)(a1 + 144);
      uint64_t result = fpfsi_AddDateToQueue(v8, v7, (uint64_t)&rhs, (long long *)&time2.value, (long long *)&v21.value, (uint64_t)&v20, v9, 0, 1);
      if (result) {
        return result;
      }
      long long v11 = *(const void **)(v5 + 1592);
      if (v11)
      {
        CFRelease(v11);
        *(void *)(v5 + 1592) = 0;
      }
    }
    if (*(void *)(v5 + 1600) && (*(unsigned char *)(v5 + 1508) & 1) != 0)
    {
      CMTimeEpoch v12 = (CMTimeValue *)(v5 + 1496);
      memset(&v20, 0, sizeof(v20));
      CMSampleBufferGetPresentationTimeStamp(&lhs, a2);
      *(_OWORD *)&rhs.CMTimeValue value = *v6;
      rhs.CMTimeEpoch epoch = *(void *)(a1 + 144);
      CMTimeAdd(&v20, &lhs, &rhs);
      memset(&v18, 0, sizeof(v18));
      CMTime rhs = v20;
      CMTime time2 = *(CMTime *)(v5 + 1184);
      CMTimeAdd(&v18, &rhs, &time2);
      uint64_t v13 = *(void *)(v5 + 1600);
      CMTime time2 = v18;
      fpfs_GetPreciseTimeForDate(v5, v13, &time2, (uint64_t)&rhs);
      CMTimeValue value = rhs.value;
      CMTimeFlags flags = rhs.flags;
      CMTimeScale timescale = rhs.timescale;
      if (rhs.flags)
      {
        CMTimeEpoch epoch = rhs.epoch;
        *CMTimeEpoch v12 = value;
        *(_DWORD *)(v5 + 1504) = timescale;
        *(_DWORD *)(v5 + 1508) = flags;
        *(void *)(v5 + 1512) = epoch;
      }
      CMTime rhs = *(CMTime *)(a1 + 192);
      *(_OWORD *)&time2.CMTimeValue value = *(_OWORD *)v12;
      time2.CMTimeEpoch epoch = *(void *)(v5 + 1512);
      if (CMTimeCompare(&rhs, &time2) >= 1 || dword_1E9350BB0)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      unsigned int v17 = *(const void **)(v5 + 1600);
      if (v17)
      {
        CFRelease(v17);
        *(void *)(v5 + 1600) = 0;
      }
    }
  }
  return 0;
}

void fpfs_CallDispatchHandlerWithItemAndTrack(void *a1, uint64_t a2, void (*a3)(void))
{
  CFArrayRef ItemAndTrackNumberPayload = fpfs_CreateItemAndTrackNumberPayload(a1, a2);
  if (ItemAndTrackNumberPayload)
  {
    CFArrayRef v5 = ItemAndTrackNumberPayload;
    a3();
    CFRelease(v5);
  }
}

uint64_t fpfs_SyncAudioBuffer(uint64_t a1, uint64_t a2, opaqueCMSampleBuffer *a3)
{
  uint64_t v97 = *MEMORY[0x1E4F143B8];
  memset(&v77, 0, sizeof(v77));
  memset(&v76, 0, sizeof(v76));
  CMSampleBufferGetOutputPresentationTimeStamp(&v76, a3);
  memset(&v74, 0, sizeof(v74));
  if (*(void *)(a2 + 48) == *(void *)(a1 + 16 * *(unsigned __int8 *)(a2 + 180) + 1000))
  {
    *(_OWORD *)&v73.unsigned int value = *(_OWORD *)(a2 + 192);
    CMTimeEpoch v6 = *(void *)(a2 + 208);
  }
  else
  {
    *(_OWORD *)&v73.unsigned int value = *MEMORY[0x1E4F1FA10];
    CMTimeEpoch v6 = *(void *)(MEMORY[0x1E4F1FA10] + 16);
  }
  v73.CMTimeEpoch epoch = v6;
  memset(&v75, 0, sizeof(v75));
  if (!*(unsigned char *)(a2 + 183) && !CMBufferQueueIsEmpty(*(CMBufferQueueRef *)(a1 + 856)))
  {
    memset(&v72, 0, sizeof(v72));
    CMBufferRef Head = (opaqueCMSampleBuffer *)CMBufferQueueGetHead(*(CMBufferQueueRef *)(a1 + 856));
    CMSampleBufferGetPresentationTimeStamp(&v72, Head);
    memset(&v71, 0, sizeof(v71));
    CMSampleBufferGetPresentationTimeStamp(&v71, a3);
    CMTime time1 = v72;
    CMTime time2 = v71;
    if (CMTimeCompare(&time1, &time2) <= 0)
    {
      memset(&refcon[16], 0, 32);
      CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
      *(void *)CMTimeRange refcon = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D510]);
      *(void *)&refcon[8] = a3;
      *(_OWORD *)&refcon[24] = *MEMORY[0x1E4F1F9F8];
      uint64_t v9 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
      *(void *)&refcon[16] = 0;
      *(void *)&refcon[40] = v9;
      CMSampleBufferGetDuration(&rhs, a3);
      CMTime time2 = *(CMTime *)(a2 + 320);
      CMTimeAdd(&time1, &time2, &rhs);
      *(CMTime *)(a2 + 320) = time1;
      if (*(void *)refcon)
      {
        CMBufferQueueCallForEachBuffer(*(CMBufferQueueRef *)(a1 + 856), (OSStatus (__cdecl *)(CMBufferRef, void *))fpfs_QueueSearch, refcon);
        if ((refcon[36] & 1) != 0 && FPSupport_AudioSamplesAreDiverse(a3))
        {
          memset(&v68, 0, sizeof(v68));
          CMTime time1 = *(CMTime *)&refcon[24];
          CMTime time2 = v76;
          CMTimeSubtract(&v68, &time1, &time2);
          CMTime time1 = v68;
          long long v61 = *MEMORY[0x1E4F1FA48];
          *(_OWORD *)&time2.unsigned int value = *MEMORY[0x1E4F1FA48];
          CMTimeEpoch v10 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
          time2.CMTimeEpoch epoch = v10;
          if (CMTimeCompare(&time1, &time2))
          {
            if (dword_1E9350BB0)
            {
              LODWORD(v66.value) = 0;
              os_log_type_t type = OS_LOG_TYPE_DEFAULT;
              os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            CMTime time2 = *(CMTime *)(a2 + 128);
            CMTime v66 = v68;
            CMTimeAdd(&time1, &time2, &v66);
            *(CMTime *)(a2 + 128) = time1;
            uint64_t v13 = *(void *)(a2 + 48);
            uint64_t v14 = a1 + 16 * *(unsigned __int8 *)(a2 + 180);
            if (v13 == *(void *)(v14 + 1000) || v13 == *(void *)(v14 + 1008))
            {
              long long v15 = *(_OWORD *)(a2 + 128);
              uint64_t v16 = a1 + 24 * *(unsigned __int8 *)(a2 + 180);
              *(void *)(v16 + 264) = *(void *)(a2 + 144);
              *(_OWORD *)(v16 + 248) = v15;
            }
            CMTime time2 = v76;
            CMTime v66 = v68;
            CMTimeAdd(&time1, &time2, &v66);
            CMTime v76 = time1;
            CMSampleBufferSetOutputPresentationTimeStamp(a3, &time1);
            CMTime time2 = *(CMTime *)(a2 + 216);
            CMTime v66 = v68;
            CMTimeAdd(&time1, &time2, &v66);
            *(CMTime *)(a2 + 216) = time1;
          }
          else if (dword_1E9350BB0)
          {
            LODWORD(v66.value) = 0;
            os_log_type_t type = OS_LOG_TYPE_DEFAULT;
            CMTimeEpoch v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          *(unsigned char *)(a2 + 183) = 1;
          if (!*(unsigned char *)(a2 + 420)) {
            CMBufferQueueReset(*(CMBufferQueueRef *)(a2 + 72));
          }
          CMTime time2 = v76;
          CMTime v66 = *(CMTime *)(a2 + 396);
          CMTimeAdd(&time1, &time2, &v66);
          *(CMTime *)(a2 + 296) = time1;
          uint64_t v17 = *(void *)(a1 + 1048);
          if (v17)
          {
            CMTime v18 = (CMTime *)(a2 + 128);
            do
            {
              if (!*(void *)(a1 + 1048)) {
                break;
              }
              uint64_t v19 = v17;
              uint64_t v17 = *(void *)(v17 + 8);
              if (*(void *)(v19 + 48) == *(void *)(a2 + 48) && (*(unsigned char *)(v19 + 140) & 1) != 0)
              {
                CMTime v20 = (_OWORD *)(v19 + 128);
                CMTime time2 = *v18;
                CMTime v66 = *(CMTime *)(v19 + 128);
                CMTimeSubtract(&time1, &time2, &v66);
                CMTime v68 = time1;
                *(_OWORD *)&time2.unsigned int value = v61;
                time2.CMTimeEpoch epoch = v10;
                if (CMTimeCompare(&time1, &time2))
                {
                  if (dword_1E9350BB0)
                  {
                    LODWORD(v66.value) = 0;
                    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
                    CMTime v21 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                    unsigned int value = v66.value;
                    BOOL v23 = os_log_type_enabled(v21, type);
                    unsigned int v24 = value & 0xFFFFFFFE;
                    if (v23) {
                      unsigned int v24 = value;
                    }
                    if (v24)
                    {
                      CMTimeEpoch v60 = v10;
                      uint64_t v25 = *(void *)a1;
                      if (*(void *)a1) {
                        uint64_t v26 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
                      }
                      else {
                        uint64_t v26 = "";
                      }
                      uint64_t v59 = v26;
                      uint64_t v27 = *(void *)a2;
                      if (*(void *)a2) {
                        long long v28 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
                      }
                      else {
                        long long v28 = "";
                      }
                      uint64_t v29 = *(void *)(v19 + 16);
                      CMTime time1 = v68;
                      Float64 Seconds = CMTimeGetSeconds(&time1);
                      LODWORD(time2.value) = 136316674;
                      *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpfs_SyncAudioBuffer";
                      LOWORD(time2.flags) = 2048;
                      *(void *)((char *)&time2.flags + 2) = v25;
                      HIWORD(time2.epoch) = 2082;
                      uint64_t v79 = v59;
                      __int16 v80 = 2048;
                      uint64_t v81 = v27;
                      __int16 v82 = 2082;
                      unsigned int v83 = v28;
                      __int16 v84 = 2048;
                      *(void *)int v85 = v29;
                      *(_WORD *)&v85[8] = 2048;
                      *(Float64 *)&v85[10] = Seconds;
                      _os_log_send_and_compose_impl();
                      CMTimeEpoch v10 = v60;
                    }
                    fig_log_call_emit_and_clean_up_after_send_and_compose();
                    CMTime v18 = (CMTime *)(a2 + 128);
                  }
                  *(_OWORD *)&time2.unsigned int value = *v20;
                  time2.CMTimeEpoch epoch = *(void *)(v19 + 144);
                  CMTime v66 = v68;
                  CMTimeAdd(&time1, &time2, &v66);
                  *CMTime v20 = *(_OWORD *)&time1.value;
                  *(void *)(v19 + 144) = time1.epoch;
                  CMTime time2 = *(CMTime *)(v19 + 216);
                  CMTime v66 = v68;
                  CMTimeAdd(&time1, &time2, &v66);
                  *(CMTime *)(v19 + 216) = time1;
                  CMTime time2 = *(CMTime *)(v19 + 272);
                  CMTime v66 = v68;
                  CMTimeAdd(&time1, &time2, &v66);
                  *(CMTime *)(v19 + 272) = time1;
                  CMBufferQueueCallForEachBuffer(*(CMBufferQueueRef *)(v19 + 72), (OSStatus (__cdecl *)(CMBufferRef, void *))fpfs_AdjustTime, (void *)v19);
                  if (*(void *)(v19 + 264)) {
                    fpfs_VideoSyncTimerProc(*(void *)(a1 + 16), *(void *)(v19 + 16));
                  }
                }
              }
            }
            while (v17);
          }
        }
        free(*(void **)&refcon[16]);
        CFRelease(*(CFTypeRef *)refcon);
      }
    }
  }
  fpfs_GetTime(a1, (uint64_t)&v74);
  if (*(unsigned char *)(a2 + 183))
  {
    int v31 = *(void *)(a2 + 48) == *(void *)(a1 + 16 * *(unsigned __int8 *)(a2 + 180) + 1008)
       && fpfs_IsTrialReadyToComplete(a1, a2);
    CMTime time1 = v74;
    CMTime time2 = v73;
    uint64_t result = fpfs_CheckAudioSync(a1, a2, a3, &time1, &time2, v31, &v75);
    if (result)
    {
      uint64_t v35 = (opaqueCMSampleBuffer *)CMBufferQueueGetHead(*(CMBufferQueueRef *)(a2 + 72));
      memset(refcon, 0, 24);
      CMSampleBufferGetOutputPresentationTimeStamp((CMTime *)refcon, v35);
      if (dword_1E9350BB0)
      {
        LODWORD(v72.value) = 0;
        LOBYTE(v71.value) = 0;
        uint64_t v36 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v37 = v72.value;
        if (os_log_type_enabled(v36, v71.value)) {
          unsigned int v38 = v37;
        }
        else {
          unsigned int v38 = v37 & 0xFFFFFFFE;
        }
        if (v38)
        {
          uint64_t v39 = *(void *)a1;
          if (v39) {
            CMTime v40 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
          }
          else {
            CMTime v40 = "";
          }
          uint64_t v62 = v40;
          uint64_t v47 = *(void *)a2;
          if (*(void *)a2) {
            __int16 v48 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
          }
          else {
            __int16 v48 = "";
          }
          uint64_t v49 = *(void *)refcon;
          int v50 = *(_DWORD *)&refcon[8];
          CMTime time1 = *(CMTime *)refcon;
          Float64 v51 = CMTimeGetSeconds(&time1);
          fpfs_GetEndOutputPresentationTimeStamp(v35, &time);
          Float64 v52 = CMTimeGetSeconds(&time);
          CMSampleBufferGetPresentationTimeStamp(&v64, v35);
          Float64 v53 = CMTimeGetSeconds(&v64);
          LODWORD(time2.value) = 136318210;
          *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpfs_SyncAudioBuffer";
          LOWORD(time2.flags) = 2048;
          *(void *)((char *)&time2.flags + 2) = v39;
          HIWORD(time2.epoch) = 2082;
          uint64_t v79 = v62;
          __int16 v80 = 2048;
          uint64_t v81 = v47;
          __int16 v82 = 2082;
          unsigned int v83 = v48;
          __int16 v84 = 2048;
          *(void *)int v85 = v49;
          *(_WORD *)&v85[8] = 1024;
          *(_DWORD *)&v85[10] = v50;
          *(_WORD *)&v85[14] = 2048;
          *(Float64 *)&v85[16] = v51;
          __int16 v86 = 2048;
          Float64 v87 = v52;
          __int16 v88 = 2048;
          Float64 v89 = v53;
          __int16 v90 = 2048;
          CMTimeValue v91 = v75.value;
          __int16 v92 = 1024;
          CMTimeScale timescale = v75.timescale;
          __int16 v94 = 2048;
          double v95 = (double)v75.value / (double)v75.timescale;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      CMTime time1 = v75;
      return fpfs_FinishAudioSyncAndStart((void *)a2, &time1);
    }
    return result;
  }
  memset(refcon, 0, 24);
  if (*(void *)(a2 + 48) == *(void *)(a1 + 16 * *(unsigned __int8 *)(a2 + 180) + 1008))
  {
    int64_t v32 = 50;
    int32_t v33 = 1000;
  }
  else
  {
    int64_t v32 = 4;
    int32_t v33 = 1;
  }
  CMTimeMake((CMTime *)refcon, v32, v33);
  fpfs_GetEndOutputPresentationTimeStamp(a3, &v77);
  CMTime time1 = v77;
  CMTime time2 = v74;
  if (CMTimeCompare(&time1, &time2) <= 0)
  {
    if (*(unsigned char *)(a2 + 420))
    {
      CMTime time1 = v74;
      fpfs_TrimAudioTrack(a2, &time1);
      CMTime time1 = v74;
      fpfsi_TrimCachedSamplesFromTrack(a2, 0, &time1, 0, 0, 0);
    }
    else
    {
      CMBufferQueueReset(*(CMBufferQueueRef *)(a2 + 72));
      CMBufferQueueReset(*(CMBufferQueueRef *)(a2 + 80));
    }
    return 0;
  }
  CMTime time1 = *(CMTime *)(a2 + 320);
  CMTime time2 = *(CMTime *)refcon;
  if (CMTimeCompare(&time1, &time2) <= 0 && !CMBufferQueueIsEmpty(*(CMBufferQueueRef *)(a1 + 856)))
  {
    CMTime time1 = v77;
    CMTime time2 = v73;
    if (CMTimeCompare(&time1, &time2) < 0)
    {
      CMBufferQueueEnqueue(*(CMBufferQueueRef *)(a2 + 72), a3);
      return 0;
    }
  }
  CMTime v41 = (opaqueCMSampleBuffer *)CMBufferQueueGetHead(*(CMBufferQueueRef *)(a2 + 72));
  memset(&v72, 0, sizeof(v72));
  if (v41) {
    CMSampleBufferGetOutputPresentationTimeStamp(&v72, v41);
  }
  else {
    CMTime v72 = v76;
  }
  if (dword_1E9350BB0)
  {
    LODWORD(v71.value) = 0;
    LOBYTE(v68.value) = 0;
    unsigned int v42 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v43 = v71.value;
    if (os_log_type_enabled(v42, v68.value)) {
      unsigned int v44 = v43;
    }
    else {
      unsigned int v44 = v43 & 0xFFFFFFFE;
    }
    if (v44)
    {
      uint64_t v45 = *(void *)a1;
      if (*(void *)a1) {
        __int16 v46 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
      }
      else {
        __int16 v46 = "";
      }
      unsigned int v63 = v46;
      uint64_t v54 = *(void *)a2;
      if (*(void *)a2) {
        Float64 v55 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
      }
      else {
        Float64 v55 = "";
      }
      uint64_t v56 = *(void *)(a2 + 16);
      CMTime time1 = v74;
      Float64 v57 = CMTimeGetSeconds(&time1);
      CMTime time1 = v76;
      Float64 v58 = CMTimeGetSeconds(&time1);
      LODWORD(time2.value) = 136316930;
      *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpfs_SyncAudioBuffer";
      LOWORD(time2.flags) = 2048;
      *(void *)((char *)&time2.flags + 2) = v45;
      HIWORD(time2.epoch) = 2082;
      uint64_t v79 = v63;
      __int16 v80 = 2048;
      uint64_t v81 = v54;
      __int16 v82 = 2082;
      unsigned int v83 = v55;
      __int16 v84 = 1024;
      *(_DWORD *)int v85 = v56;
      *(_WORD *)&v85[4] = 2048;
      *(Float64 *)&v85[6] = v57;
      *(_WORD *)&v85[14] = 2048;
      *(Float64 *)&v85[16] = v58;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  *(unsigned char *)(a2 + 183) = 1;
  *(unsigned char *)(a2 + 185) = 1;
  CMTime time2 = v72;
  CMTime v71 = *(CMTime *)(a2 + 396);
  CMTimeAdd(&time1, &time2, &v71);
  *(CMTime *)(a2 + 296) = time1;
  return fpfs_SyncAudioBuffer(a1, a2, a3);
}

uint64_t fpfs_PreallocateVideoRendering(uint64_t *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)(DerivedStorage + 2880))
  {
    uint64_t v4 = result;
    CFArrayRef v5 = *(void **)(DerivedStorage + 792);
    if (v5 && *v5 == 1) {
      fpfs_ClearRenderChains(*a1, 1);
    }
    uint64_t result = fpfs_CanRenderVideo(v4, *a1);
    if (result)
    {
      if (*(uint64_t *)(v4 + 616) <= 3)
      {
        uint64_t result = fpfs_EnsureRenderChainForTrack(*(const void **)DerivedStorage, (const __CFString **)a1, 1);
        if (!result)
        {
          uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(*(void *)(a1[12] + 32));
          uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v7) {
            uint64_t v8 = v7;
          }
          else {
            uint64_t v8 = 0;
          }
          uint64_t v9 = *(void (**)(uint64_t, __CFString *, void))(v8 + 56);
          if (v9) {
            v9(FigBaseObject, @"Suspended", *MEMORY[0x1E4F1CFC8]);
          }
          uint64_t v10 = a1[12];
          uint64_t v11 = *MEMORY[0x1E4F1CFD0];
          return fpfs_setPropertyOnPrimaryAndAuxRenderPipelines(v10, @"VideoDecoderIsSecondary", v11);
        }
      }
    }
  }
  return result;
}

uint64_t fpfs_QueueSearch(opaqueCMSampleBuffer *a1, uint64_t a2)
{
  memset(&v23, 0, sizeof(v23));
  CMSampleBufferGetPresentationTimeStamp(&v23, a1);
  memset(&v22, 0, sizeof(v22));
  CMSampleBufferGetPresentationTimeStamp(&v22, *(CMSampleBufferRef *)(a2 + 8));
  CMItemCount v20 = 0;
  CFIndex v21 = 0;
  if (fpfs_IsMarkerOnly(a1)) {
    return 0;
  }
  uint64_t v4 = 1;
  CMTimeMake(&rhs, 2, 1);
  lhs.CMTime duration = v23;
  CMTimeSubtract(&time2, &lhs.duration, &rhs);
  lhs.CMTime duration = v22;
  if (CMTimeCompare(&lhs.duration, &time2) < 0) {
    return v4;
  }
  CMTimeMake(&v16, 2, 1);
  lhs.CMTime duration = v23;
  CMTimeAdd(&v17, &lhs.duration, &v16);
  lhs.CMTime duration = v22;
  if (CMTimeCompare(&lhs.duration, &v17) > 0) {
    return 0;
  }
  CFArrayAppendValue(*(CFMutableArrayRef *)a2, a1);
  if (!FPSupport_FindSampleStream(*(const __CFArray **)a2, *(opaqueCMSampleBuffer **)(a2 + 8), (CFIndex **)(a2 + 16), &v21, &v20))return 0; {
  memset(&lhs, 0, sizeof(lhs));
  }
  CFDictionaryRef ValueAtIndex = (opaqueCMSampleBuffer *)CFArrayGetValueAtIndex(*(CFArrayRef *)a2, v21);
  memset(&v14, 0, sizeof(v14));
  CMSampleBufferGetOutputPresentationTimeStamp(&v13, ValueAtIndex);
  CMSampleBufferGetPresentationTimeStamp(&v12, ValueAtIndex);
  CMTimeSubtract(&v14, &v13, &v12);
  CMSampleBufferGetSampleTimingInfo(ValueAtIndex, v20, &lhs);
  CFDictionaryRef v7 = (const __CFDictionary *)CMGetAttachment(ValueAtIndex, (CFStringRef)*MEMORY[0x1E4F1F308], 0);
  if (v7)
  {
    memset(&v11, 0, sizeof(v11));
    CMTimeMakeFromDictionary(&v11, v7);
    CMTime v9 = v14;
    CMTime v8 = v11;
    CMTimeSubtract(&presentationTimeStamp, &v9, &v8);
    CMTime v14 = presentationTimeStamp;
  }
  CMTime presentationTimeStamp = lhs.presentationTimeStamp;
  CMTime v9 = v14;
  CMTimeAdd(&v11, &presentationTimeStamp, &v9);
  *(CMTime *)(a2 + 24) = v11;
  return v4;
}

uint64_t FigManifoldCopyTrackProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  CMTime v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 48);
  if (!v12) {
    return 4294954514;
  }

  return v12(a1, a2, a3, a4, a5);
}

uint64_t fpfs_ensureDecryptorHasStarted(uint64_t a1)
{
  v10[26] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(unsigned int *)(a1 + 392);
  if (!v1)
  {
    v10[0] = 0;
    uint64_t v3 = *(void *)(a1 + 384);
    uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v4) {
      uint64_t v5 = v4;
    }
    else {
      uint64_t v5 = 0;
    }
    CMTimeEpoch v6 = *(uint64_t (**)(uint64_t, void *))(v5 + 8);
    if (v6)
    {
      unsigned int v7 = v6(v3, v10);
      uint64_t v1 = 0;
      if (v7 != -12782 && v7)
      {
        if (v7 == -12785) {
          uint64_t v1 = 4294954373;
        }
        else {
          uint64_t v1 = v7;
        }
        *(_DWORD *)(a1 + 392) = v1;
        CMBaseObjectGetDerivedStorage();
        if (dword_1E9350BB0)
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return v1;
}

void fpfs_FreeDeadTracks(void *a1)
{
  uint64_t v1 = (void *)a1[135];
  if (v1)
  {
    uint64_t v3 = a1 + 135;
    CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    do
    {
      uint64_t v5 = v1[1];
      *uint64_t v3 = v5;
      if (!v5) {
        a1[136] = v3;
      }
      uint64_t v6 = a1[21];
      int valuePtr = v1[2];
      CFDictionaryRef theDict = 0;
      if (v6)
      {
        FigPropertyStorageCopyValue(v6, @"TrackPropertyStorages", &theDict);
        if (theDict)
        {
          CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
          CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(AllocatorForMedia, 0, theDict);
          if (MutableCopy)
          {
            CMTime v9 = MutableCopy;
            CFNumberRef v10 = CFNumberCreate(v4, kCFNumberSInt32Type, &valuePtr);
            if (v10)
            {
              CFNumberRef v11 = v10;
              CFDictionaryRemoveValue(v9, v10);
              FigPropertyStorageSetValue(v6, @"TrackPropertyStorages", v9);
              CFRelease(v11);
            }
            CFRelease(v9);
          }
          if (theDict) {
            CFRelease(theDict);
          }
        }
      }
      fpfs_FreeTrack(v1);
      uint64_t v1 = (void *)*v3;
    }
    while (*v3);
  }
}

uint64_t fpfsi_CanReuseRenderChainForTrack(uint64_t a1, uint64_t a2)
{
  CMBaseObjectGetDerivedStorage();
  if (!a1) {
    return 0;
  }
  if (*(void *)(a2 + 96) == a1
    && fpfs_FormatsAreCompatible(*(void *)a2, *(const opaqueCMFormatDescription **)(a1 + 16), *(const opaqueCMFormatDescription **)(a2 + 40)))
  {
    return 1;
  }
  if (*(_DWORD *)(a2 + 32) == 1936684398)
  {
    uint64_t v14 = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
    uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(v4);
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    CMTime v13 = *(void (**)(uint64_t, __CFString *, uint64_t, uint64_t *))(v8 + 48);
    if (v13) {
      v13(FigBaseObject, @"SupportsGaplessTransitionsAcrossFormatChanges", AllocatorForMedia, &v14);
    }
    return *(void *)(CMBaseObjectGetDerivedStorage() + 504)
        && *MEMORY[0x1E4F1CFD0] == v14
        && (_os_feature_enabled_impl() & 1) != 0;
  }
  uint64_t v9 = *(void *)a2;
  CFNumberRef v10 = *(const opaqueCMFormatDescription **)(a1 + 16);
  CFNumberRef v11 = *(const opaqueCMFormatDescription **)(a2 + 40);

  return fpfs_FormatsAreCompatible(v9, v10, v11);
}

void fpfs_associateCrossTalkerToRenderChain(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFTypeRef cf = 0;
  uint64_t v4 = *(void *)(a1 + 1048);
  if (v4)
  {
    do
    {
      if (v4 != a2 && *(void *)(v4 + 64) == *(void *)(a2 + 64))
      {
        int v6 = *(_DWORD *)(v4 + 32);
        BOOL v7 = v6 == 1668047728 || v6 == 1986618469;
        if (v7 || v6 == 1935832172)
        {
          uint64_t v9 = *(void *)(v4 + 96);
          if (v9)
          {
            uint64_t v10 = *(void *)(v9 + 32);
            uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
            uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(v10);
            uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
            uint64_t v14 = v13 ? v13 : 0;
            long long v15 = *(unsigned int (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v14 + 48);
            if (v15)
            {
              if (!v15(FigBaseObject, @"HDRCrossTalker", AllocatorForMedia, &cf)) {
                break;
              }
            }
          }
        }
      }
      uint64_t v4 = *(void *)(v4 + 8);
    }
    while (v4);
    CFTypeRef v16 = cf;
    if (cf) {
      goto LABEL_21;
    }
  }
  uint64_t v17 = FigGetAllocatorForMedia();
  FigCrossTalkerCreate(v17, &cf);
  CFTypeRef v16 = cf;
  if (cf)
  {
LABEL_21:
    uint64_t v18 = FigRenderPipelineGetFigBaseObject(*(void *)(a3 + 32));
    uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v19) {
      uint64_t v20 = v19;
    }
    else {
      uint64_t v20 = 0;
    }
    CFIndex v21 = *(void (**)(uint64_t, __CFString *, CFTypeRef))(v20 + 56);
    if (v21) {
      v21(v18, @"HDRCrossTalker", v16);
    }
    if (cf) {
      CFRelease(cf);
    }
  }
}

uint64_t fpfs_canSendMetadataTrackToVideoTargets(uint64_t a1, const opaqueCMFormatDescription *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = fpfs_isKnownMebxMetadataForRendering(a2);
  if (result)
  {
    for (CFIndex i = 0; ; ++i)
    {
      CFArrayRef Count = *(const __CFArray **)(DerivedStorage + 432);
      if (Count) {
        CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
      }
      if (i >= (uint64_t)Count) {
        break;
      }
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 432), i);
      uint64_t result = FPSupport_fvtSupportsMetadataTrack((uint64_t)ValueAtIndex, a2);
      if (result) {
        return result;
      }
    }
    return 0;
  }
  return result;
}

uint64_t fpfs_createMetadataRenderChainForDataQueue(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5 = malloc_type_calloc(1uLL, 0x90uLL, 0x1060040EF867D01uLL);
  if (v5)
  {
    CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    uint64_t v7 = FigRenderPipelineCreateForFanOutToArrayOfSampleBufferConsumers(AllocatorForMedia, 0, v5 + 4);
    if (v7)
    {
      uint64_t v15 = v7;
    }
    else
    {
      if (dword_1E9350BB0)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      uint64_t v9 = v5[4];
      uint64_t v10 = FigGetAllocatorForMedia();
      uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(v9);
      uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v12) {
        uint64_t v13 = v12;
      }
      else {
        uint64_t v13 = 0;
      }
      uint64_t v14 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, void *))(v13 + 48);
      if (v14)
      {
        uint64_t v15 = v14(FigBaseObject, @"SourceSampleBufferQueue", v10, v5 + 5);
        if (!v15)
        {
          v5[2] = FigFormatDescriptionRetain();
          *uint64_t v5 = 1;
          *a4 = v5;
          return v15;
        }
      }
      else
      {
        uint64_t v15 = 4294954514;
      }
    }
  }
  else
  {
    uint64_t v15 = FigSignalErrorAt();
    if (!v15) {
      return v15;
    }
  }
  CFTypeRef v16 = (const void *)v5[5];
  if (v16) {
    CFRelease(v16);
  }
  uint64_t v17 = (const void *)v5[2];
  if (v17) {
    CFRelease(v17);
  }
  uint64_t v18 = (const void *)v5[4];
  if (v18) {
    CFRelease(v18);
  }
  free(v5);
  return v15;
}

uint64_t fpfsi_ensureTrackIsSetupToDeliverMetadataToVideoDestination(uint64_t a1, uint64_t a2)
{
  CFTypeRef cf = 0;
  CMBaseObjectGetDerivedStorage();
  uint64_t v4 = *(void *)(a1 + 88);
  if (!v4)
  {
    uint64_t OutputDestinationForMetadata = fpfsi_createOutputDestinationForMetadata(a1);
    if (OutputDestinationForMetadata) {
      goto LABEL_14;
    }
    uint64_t v4 = *(void *)(a1 + 88);
  }
  uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
  uint64_t CMBaseObject = FigAggregateVideoDestinationGetCMBaseObject(v4);
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v9 + 48);
  if (!v10) {
    goto LABEL_15;
  }
  uint64_t OutputDestinationForMetadata = v10(CMBaseObject, @"SampleBufferConsumersForDataQueues", AllocatorForMedia, &cf);
  if (OutputDestinationForMetadata)
  {
LABEL_14:
    uint64_t v17 = OutputDestinationForMetadata;
    goto LABEL_16;
  }
  uint64_t v11 = *(void *)(a2 + 32);
  CFTypeRef v12 = cf;
  uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(v11);
  uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v14) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0;
  }
  CFTypeRef v16 = *(uint64_t (**)(uint64_t, __CFString *, CFTypeRef))(v15 + 56);
  if (v16)
  {
    uint64_t OutputDestinationForMetadata = v16(FigBaseObject, @"OutputArrayOfSampleBufferConsumers", v12);
    goto LABEL_14;
  }
LABEL_15:
  uint64_t v17 = 4294954514;
LABEL_16:
  if (cf) {
    CFRelease(cf);
  }
  return v17;
}

uint64_t fpfs_createLegibleOutputRenderChainsAndAttachToPrimary(uint64_t a1, uint64_t a2, const void *a3, void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v29 = 0;
  if (!*(void *)(DerivedStorage + 1864)) {
    return 0;
  }
  uint64_t v8 = DerivedStorage;
  if (!*(void *)(DerivedStorage + 1872)) {
    return 0;
  }
  fpfsi_GetDimensions(a2, (float *)&v29 + 1, (float *)&v29);
  FigLegibleOutputManagerSetVideoDisplaySize(*(dispatch_queue_t **)(v8 + 1864), *((float *)&v29 + 1), *(float *)&v29);
  CFArrayRef v9 = FigLegibleOutputManagerCreateAndRegisterRenderPipelinesForFormat(*(dispatch_queue_t **)(v8 + 1864), a3);
  if (!v9) {
    return 0;
  }
  CFArrayRef v10 = v9;
  CFIndex Count = CFArrayGetCount(v9);
  if (Count < 1)
  {
LABEL_18:
    CFRelease(v10);
    return 0;
  }
  CFIndex v12 = Count;
  CFIndex v13 = 0;
  uint64_t v14 = a4;
  while (1)
  {
    uint64_t v15 = malloc_type_calloc(1uLL, 0x90uLL, 0x1060040EF867D01uLL);
    if (!v15) {
      break;
    }
    CFTypeRef v16 = v15;
    v14[11] = v15;
    ++*v15;
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v10, v13);
    v16[4] = ValueAtIndex;
    CFRetain(ValueAtIndex);
    if (CMFormatDescriptionGetMediaType((CMFormatDescriptionRef)a3) == 1935832172)
    {
      uint64_t v18 = fpfsi_prepareSubtitleRenderPipeline(a2, v16[4]);
      if (v18) {
        goto LABEL_27;
      }
    }
    else if (CMFormatDescriptionGetMediaType((CMFormatDescriptionRef)a3) == 1668047728)
    {
      uint64_t v18 = fpfs_prepareClosedCaptionRenderPipeline(a1, a2, v16[4]);
      if (v18)
      {
LABEL_27:
        uint64_t v25 = v18;
        goto LABEL_22;
      }
    }
    uint64_t v19 = v16[4];
    uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
    uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(v19);
    uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v22) {
      uint64_t v23 = v22;
    }
    else {
      uint64_t v23 = 0;
    }
    unsigned int v24 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, void *))(v23 + 48);
    if (!v24)
    {
      uint64_t v25 = 4294954514;
LABEL_22:
      CFRelease(v10);
      uint64_t v27 = a4;
      goto LABEL_23;
    }
    uint64_t v18 = v24(FigBaseObject, @"SourceSampleBufferQueue", AllocatorForMedia, v16 + 5);
    if (v18) {
      goto LABEL_27;
    }
    int v16[2] = FigFormatDescriptionRetain();
    ++v13;
    uint64_t v14 = v16;
    if (v12 == v13) {
      goto LABEL_18;
    }
  }
  uint64_t v25 = FigSignalErrorAt();
  CFRelease(v10);
  uint64_t v27 = a4;
  if (!v25) {
    return v25;
  }
LABEL_23:
  if (v27[11])
  {
    fpfs_releaseRenderChain(a2);
    v27[11] = 0;
  }
  return v25;
}

uint64_t fpfs_applyEQPreset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v6 = DerivedStorage;
  if (a2 || (uint64_t Next = (uint64_t)fpfs_getNext(DerivedStorage, 0)) != 0)
  {
    uint64_t v8 = CMBaseObjectGetDerivedStorage();
    int v9 = *(_DWORD *)(v6 + 172);
    if (*(_DWORD *)(v8 + 876)) {
      int v9 = *(_DWORD *)(v8 + 876);
    }
    int valuePtr = v9;
    CFNumberRef v10 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (a3)
    {
      uint64_t v11 = *(void *)(a3 + 96);
      if (v11 && *(_DWORD *)(a3 + 32) == 1936684398)
      {
        uint64_t Next = fpfs_setPropertyOnPrimaryAndAuxRenderPipelines(v11, @"EQPreset", (uint64_t)v10);
LABEL_17:
        CFRelease(v10);
        return Next;
      }
    }
    else
    {
      uint64_t v12 = *(void *)(v8 + 1048);
      if (v12)
      {
        do
        {
          uint64_t v13 = *(void *)(v12 + 96);
          if (v13 && *(_DWORD *)(v12 + 32) == 1936684398) {
            uint64_t Next = fpfs_setPropertyOnPrimaryAndAuxRenderPipelines(v13, @"EQPreset", (uint64_t)v10);
          }
          else {
            uint64_t Next = 0;
          }
          uint64_t v12 = *(void *)(v12 + 8);
        }
        while (v12);
        goto LABEL_17;
      }
    }
    uint64_t Next = 0;
    goto LABEL_17;
  }
  return Next;
}

uint64_t fpfs_applySoftwareVolumeToTrack(uint64_t a1, int a2, float a3, float a4)
{
  float v20 = a4;
  float valuePtr = a3;
  CMBaseObjectGetDerivedStorage();
  if (!*(void *)(a1 + 96)) {
    return 0;
  }
  uint64_t v7 = @"SoftwareVolume1RampDuration";
  if (a4 < 0.0) {
    float v20 = 0.0;
  }
  if (a2 == 5)
  {
    CFNumberRef v10 = kFigAudioRenderPipelineProperty_SoftwareVolume5;
LABEL_10:
    int v9 = *v10;
    char v8 = 1;
    goto LABEL_12;
  }
  if (a2 == 3)
  {
    CFNumberRef v10 = kFigAudioRenderPipelineProperty_SoftwareVolume3;
    goto LABEL_10;
  }
  char v8 = 0;
  if (a2 == 2)
  {
    int v9 = @"SoftwareVolume2";
    uint64_t v7 = @"SoftwareVolume2RampDuration";
  }
  else
  {
    int v9 = @"SoftwareVolume1";
  }
LABEL_12:
  if (*(unsigned char *)(a1 + 190) && CFEqual(v9, @"SoftwareVolume1")) {
    float valuePtr = 0.0;
  }
  CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFNumberRef v12 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberFloatType, &valuePtr);
  if (!v12) {
    return FigSignalErrorAt();
  }
  CFNumberRef v13 = v12;
  if (v8)
  {
    CFNumberRef v14 = 0;
LABEL_21:
    unsigned int v18 = fpfs_setPropertyOnPrimaryAndAuxRenderPipelines(*(void *)(a1 + 96), (uint64_t)v9, (uint64_t)v13);
    if (v18 == -4) {
      uint64_t v17 = 0;
    }
    else {
      uint64_t v17 = v18;
    }
    if (!v14) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  CFNumberRef v15 = CFNumberCreate(v11, kCFNumberFloatType, &v20);
  if (!v15)
  {
    uint64_t v17 = FigSignalErrorAt();
    goto LABEL_26;
  }
  CFNumberRef v14 = v15;
  uint64_t v16 = fpfs_setPropertyOnPrimaryAndAuxRenderPipelines(*(void *)(a1 + 96), (uint64_t)v7, (uint64_t)v15);
  if (!v16) {
    goto LABEL_21;
  }
  uint64_t v17 = v16;
  if (v16 == -4) {
    goto LABEL_21;
  }
LABEL_25:
  CFRelease(v14);
LABEL_26:
  CFRelease(v13);
  return v17;
}

uint64_t fpfsi_createOutputDestinationForMetadata(uint64_t a1)
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  uint64_t v3 = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(a1 + 32) != 1835365473) {
    return 0;
  }
  uint64_t v4 = v3;
  if (!fpfs_canSendMetadataTrackToVideoTargets(*DerivedStorage, *(const opaqueCMFormatDescription **)(a1 + 40)))return 0; {
  uint64_t v5 = DerivedStorage[131];
  }
  if (!v5) {
    goto LABEL_13;
  }
  uint64_t v6 = 0;
  do
  {
    if (*(void *)(v5 + 96) == *(void *)(a1 + 96) && v5 != a1) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = *(void *)(v5 + 8);
  }
  while (v5);
  if (v6)
  {
    CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    CFArrayRef v9 = *(const __CFArray **)(v4 + 432);
    CFNumberRef v10 = (const void *)DerivedStorage[72];
    CFAllocatorRef v11 = *(const opaqueCMFormatDescription **)(a1 + 40);
    CFNumberRef v12 = (void *)(a1 + 88);
    uint64_t v13 = *(void *)(v6 + 88);
  }
  else
  {
LABEL_13:
    CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    CFArrayRef v9 = *(const __CFArray **)(v4 + 432);
    CFNumberRef v10 = (const void *)DerivedStorage[72];
    CFNumberRef v12 = (void *)(a1 + 88);
    CFAllocatorRef v11 = *(const opaqueCMFormatDescription **)(a1 + 40);
    uint64_t v13 = 0;
  }
  uint64_t v14 = FigAggregateVideoDestinationForDataQueueCreate(AllocatorForMedia, v9, v10, v11, v13, v12);
  if (!v14)
  {
    CFAllocatorRef v15 = (const __CFAllocator *)FigGetAllocatorForMedia();
    CFStringRef v16 = CFStringCreateWithFormat(v15, 0, @"M.%d", *(void *)(a1 + 16));
    if (v16)
    {
      CFStringRef v17 = v16;
      uint64_t CMBaseObject = FigAggregateVideoDestinationGetCMBaseObject(*(void *)(a1 + 88));
      uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v19) {
        uint64_t v20 = v19;
      }
      else {
        uint64_t v20 = 0;
      }
      CFIndex v21 = *(uint64_t (**)(uint64_t, __CFString *, CFStringRef))(v20 + 56);
      if (v21) {
        uint64_t v14 = v21(CMBaseObject, @"VideoConfigID", v17);
      }
      else {
        uint64_t v14 = 4294954514;
      }
      CFRelease(v17);
      return v14;
    }
    return 0;
  }
  return v14;
}

uint64_t fpfs_updateCaptionOrSubtitleHintOnVideoPipeline()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = *(void *)(DerivedStorage + 80);
  if (result)
  {
    uint64_t result = CMBaseObjectGetDerivedStorage();
    BOOL v4 = result
      && ((v2 = *(void *)(result + 824), *(unsigned char *)(DerivedStorage + 210)) ? (BOOL v3 = v2 == 0) : (BOOL v3 = 1), !v3)
      && *(void *)(v2 + 32) != 0;
    if (*(void *)(DerivedStorage + 80))
    {
      uint64_t v5 = *(void *)(result + 1048);
      if (v5)
      {
        if (v4) {
          uint64_t v6 = (uint64_t *)MEMORY[0x1E4F1CFD0];
        }
        else {
          uint64_t v6 = (uint64_t *)MEMORY[0x1E4F1CFC8];
        }
        uint64_t v7 = *v6;
        do
        {
          if (*(_DWORD *)(v5 + 32) == 1986618469)
          {
            uint64_t result = *(void *)(v5 + 96);
            if (result) {
              uint64_t result = fpfs_setPropertyOnPrimaryAndAuxRenderPipelines(result, @"CAImageQueueCaptionsMayAppearHint", v7);
            }
          }
          uint64_t v5 = *(void *)(v5 + 8);
        }
        while (v5);
      }
    }
  }
  return result;
}

CFStringRef fpfs_createNextRenderPipelineIdentifierString()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  ++*(_DWORD *)(DerivedStorage + 836);
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  return CFStringCreateWithFormat(AllocatorForMedia, 0, @"R%s.%02d", DerivedStorage + 824, *(unsigned int *)(DerivedStorage + 836));
}

CFMutableDictionaryRef fpfs_createSpeedRampRenderPipelineOptions()
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  FigCFDictionarySetValue();
  return Mutable;
}

CFTypeRef fpfsi_copyPreviousImageQueueGauge(const void *a1)
{
  uint64_t v16 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)(DerivedStorage + 463)) {
    return 0;
  }
  uint64_t v3 = DerivedStorage;
  uint64_t v4 = CMBaseObjectGetDerivedStorage();
  if (*(const void **)(v4 + 80) != a1)
  {
    uint64_t v5 = v4;
    CFArrayRef v6 = *(const __CFArray **)(v4 + 72);
    if (v6)
    {
      v7.length = CFArrayGetCount(v6);
      CFArrayRef v6 = *(const __CFArray **)(v5 + 72);
    }
    else
    {
      v7.length = 0;
    }
    v7.location = 0;
    FirstIndexOfCFDictionaryRef Value = CFArrayGetFirstIndexOfValue(v6, v7, a1);
    if (FirstIndexOfValue)
    {
      if (FirstIndexOfValue >= 1)
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v5 + 72), FirstIndexOfValue - 1);
        if (ValueAtIndex) {
          goto LABEL_9;
        }
      }
    }
    else
    {
      CFDictionaryRef ValueAtIndex = *(const void **)(v5 + 80);
      if (ValueAtIndex)
      {
LABEL_9:
        uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
        uint64_t FigBaseObject = FigPlaybackItemGetFigBaseObject(ValueAtIndex);
        uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v12) {
          uint64_t v13 = v12;
        }
        else {
          uint64_t v13 = 0;
        }
        CFAllocatorRef v15 = *(void (**)(uint64_t, __CFString *, uint64_t, uint64_t *))(v13 + 48);
        if (v15)
        {
          v15(FigBaseObject, @"ImageQueueGauge", AllocatorForMedia, &v16);
          return (CFTypeRef)v16;
        }
        return 0;
      }
    }
  }
  CFTypeRef result = *(CFTypeRef *)(v3 + 728);
  if (result)
  {
    return CFRetain(result);
  }
  return result;
}

uint64_t fpfs_cleanupAllImageQueues(const void *a1, int a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = CMBaseObjectGetDerivedStorage();
  CFArrayRef v6 = (CFTypeRef *)(DerivedStorage + 656);
  uint64_t v7 = *(void *)(DerivedStorage + 656);
  CFArrayRef v8 = *(const __CFArray **)(DerivedStorage + 664);
  if (a2 && *(uint64_t *)(v5 + 400) >= 1)
  {
    if (!v8 || CFArrayGetCount(v8) < 1) {
      goto LABEL_14;
    }
    if (!*(unsigned char *)(DerivedStorage + 874) && !*(void *)(v5 + 416))
    {
      *(_OWORD *)(v5 + 416) = *(_OWORD *)v6;
      *(void *)(DerivedStorage + 664) = 0;
      goto LABEL_13;
    }
    CFArrayRef v8 = *(const __CFArray **)(DerivedStorage + 664);
    goto LABEL_9;
  }
  if (v8)
  {
LABEL_9:
    FPSupport_DeleteCASlotsInArray(v8);
    CFArrayRef v9 = *(const void **)(DerivedStorage + 664);
    if (v9)
    {
      CFRelease(v9);
      *(void *)(DerivedStorage + 664) = 0;
    }
  }
  if (!*v6) {
    goto LABEL_14;
  }
  CFRelease(*v6);
LABEL_13:
  *CFArrayRef v6 = 0;
LABEL_14:
  uint64_t v10 = CMBaseObjectGetDerivedStorage();
  uint64_t v11 = CMBaseObjectGetDerivedStorage();
  uint64_t v12 = CMBaseObjectGetDerivedStorage();
  CFArrayRef theArray = 0;
  fpfsi_copyCurrentImageQueueArrayAndOptions((uint64_t)a1, (uint64_t *)&theArray);
  if (theArray && CFArrayGetCount(theArray) || (uint64_t v13 = *(void *)(v12 + 840)) == 0)
  {
LABEL_26:
    if (theArray) {
      CFRelease(theArray);
    }
    goto LABEL_28;
  }
  if (theArray)
  {
    CFRelease(theArray);
    CFArrayRef theArray = 0;
    uint64_t v13 = *(void *)(v12 + 840);
  }
  uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v14) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0;
  }
  uint64_t v16 = *(void (**)(uint64_t, CFArrayRef *, void))(v15 + 24);
  if (v16) {
    v16(v13, &theArray, 0);
  }
  if (theArray)
  {
    CFArrayGetCount(theArray);
    goto LABEL_26;
  }
LABEL_28:
  if (*(unsigned char *)(v11 + 896))
  {
    uint64_t result = fpfsi_updateOutputsForAllAggregateVideoDestinations((uint64_t)a1, 0);
  }
  else
  {
    uint64_t result = *(void *)(v10 + 720);
    if (result) {
      uint64_t result = FigImageQueueTableRemoveAllValues(result);
    }
  }
  if (v7) {
    return fpfs_EnqueueNotificationWithoutLocking(*(void *)DerivedStorage, @"DidRemoveImageQueue", a1, 0);
  }
  return result;
}

void fpfs_releaseTransitionImageQueuesAndSlots()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFArrayRef v1 = *(const __CFArray **)(DerivedStorage + 424);
  if (v1)
  {
    FPSupport_DeleteCASlotsInArray(v1);
    uint64_t v2 = *(const void **)(DerivedStorage + 424);
    if (v2)
    {
      CFRelease(v2);
      *(void *)(DerivedStorage + 424) = 0;
    }
  }
  uint64_t v3 = *(const void **)(DerivedStorage + 416);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(DerivedStorage + 416) = 0;
  }
}

uint64_t fpfs_createOrUpdateLayerSync(uint64_t a1)
{
  CFTypeRef cf = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = CMBaseObjectGetDerivedStorage();
  fpfs_ensureTransaction(a1, (uint64_t *)&cf);
  uint64_t v4 = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D510]);
  if (Mutable)
  {
    CFArrayRef v8 = *(const __CFArray **)(v4 + 384);
    if (v8)
    {
      v17.length = CFArrayGetCount(*(CFArrayRef *)(v4 + 384));
      v17.location = 0;
      CFArrayAppendArray(Mutable, v8, v17);
    }
    CFArrayRef v9 = *(const __CFArray **)(v5 + 696);
    if (v9)
    {
      v18.length = CFArrayGetCount(v9);
      v18.location = 0;
      CFArrayAppendArray(Mutable, v9, v18);
    }
    uint64_t v10 = *(const void **)(v4 + 816);
    long long v15 = *MEMORY[0x1E4F1F9F8];
    uint64_t v16 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
    FPSupport_AppendDeferredTransactionChangeForSettingDurationOnLayers(v10, &v15, Mutable, (uint64_t)"fpfs_createLayerSyncLayerArrayAndSetLayerFillMode");
  }
  MEMORY[0x19970E910](*(void *)(v3 + 672));
  uint64_t v11 = *(void *)(v3 + 680);
  if (v11)
  {
    uint64_t v12 = 0;
  }
  else
  {
    uint64_t v12 = FigLayerSynchronizerCreate((void *)(v3 + 680));
    uint64_t v11 = *(void *)(v3 + 680);
    if (!v11) {
      goto LABEL_11;
    }
  }
  FigLayerSynchronizerSetLayerArraysWithDeferredTransaction(v11, *(const __CFArray **)(DerivedStorage + 384), *(const __CFArray **)(v3 + 696), *(const void **)(DerivedStorage + 816));
LABEL_11:
  MEMORY[0x19970E930](*(void *)(v3 + 672));
  fpfs_commitTransaction(a1, (uint64_t)cf);
  if (cf) {
    CFRelease(cf);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v12;
}

uint64_t fpfsi_syncMomentSourceCallback(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = FigRetainProxyIsInvalidated();
  if (!result)
  {
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 672));
    if (*(void *)(DerivedStorage + 680))
    {
      int v5 = pthread_main_np();
      CFArrayRef v6 = *(const void **)(DerivedStorage + 680);
      if (v5) {
        FigLayerSynchronizerSynchronizeToMoment((uint64_t)v6, a2, 0);
      }
      else {
        FigLayerSynchronizerSynchronizeToMomentWithDeferredTransaction(v6, a2, 0, (uint64_t)"fpfsi_syncMomentSourceCallback", 0);
      }
    }
    JUMPOUT(0x19970E930);
  }
  return result;
}

void fpfs_UpdateNeroPlaybackActiveStateAndNotifyIfNeeded(const void *a1, uint64_t a2, int a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned __int8 *)(DerivedStorage + 463) != a3)
  {
    uint64_t v6 = DerivedStorage;
    *(unsigned char *)(DerivedStorage + 463) = a3;
    CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFArrayRef v9 = Mutable;
    uint64_t v10 = (const void *)*MEMORY[0x1E4F1CFD0];
    uint64_t v11 = (const void *)*MEMORY[0x1E4F1CFC8];
    if (*(unsigned char *)(v6 + 463)) {
      uint64_t v12 = (const void *)*MEMORY[0x1E4F1CFD0];
    }
    else {
      uint64_t v12 = (const void *)*MEMORY[0x1E4F1CFC8];
    }
    CFDictionarySetValue(Mutable, @"CurrentIsNeroPlaybackActive", v12);
    if (*(unsigned char *)(v6 + 463)) {
      uint64_t v13 = v10;
    }
    else {
      uint64_t v13 = v11;
    }
    FigPropertyStorageSetValue(*(void *)(v6 + 16), @"IsNeroPlaybackActive", v13);
    fpfs_EnqueueNotification(a1, @"IsNeroPlaybackActiveDidChange", a1, v9);
    if (v9) {
      CFRelease(v9);
    }
    if (*(unsigned char *)(v6 + 463))
    {
      if (!dword_1E9350BB0) {
        return;
      }
    }
    else if (!dword_1E9350BB0)
    {
      return;
    }
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
}

uint64_t fpfs_EnqueueNotificationWithoutLocking(uint64_t a1, const void *a2, const void *a3, const void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v8 = DerivedStorage;
  CFArrayRef v9 = (void *)(DerivedStorage + 88);
  if (*(void *)(DerivedStorage + 88))
  {
    uint64_t v10 = *(void *)(DerivedStorage + 96);
    if (*(const void **)(v10 - 24) == a3 && *(const void **)(v10 - 16) == a4 && CFEqual(*(CFTypeRef *)(v10 - 32), a2)) {
      return 0;
    }
  }
  uint64_t v11 = malloc_type_malloc(0x28uLL, 0xE0040CDB25F8DuLL);
  if (v11)
  {
    uint64_t v12 = v11;
    if (CFEqual(a2, @"StreamLikelyToKeepUp"))
    {
      uint64_t v13 = *v9;
      while (v13)
      {
        while (1)
        {
          uint64_t v14 = v13;
          uint64_t v13 = *(void *)(v13 + 32);
          if (CFEqual(*(CFTypeRef *)v14, @"StreamUnlikelyToKeepUp"))
          {
            if (*(const void **)(v14 + 8) == a3) {
              break;
            }
          }
          if (!v13) {
            goto LABEL_23;
          }
        }
        uint64_t v15 = *v9;
        if (*v9 == v14)
        {
          uint64_t v20 = *(void *)(v14 + 32);
          *CFArrayRef v9 = v20;
          CFRange v18 = v9;
          if (v20) {
            goto LABEL_15;
          }
        }
        else
        {
          do
          {
            uint64_t v16 = v15;
            uint64_t v15 = *(void *)(v15 + 32);
          }
          while (v15 != v14);
          uint64_t v17 = *(void *)(v14 + 32);
          *(void *)(v16 + 32) = v17;
          CFRange v18 = (void *)(v16 + 32);
          if (v17) {
            goto LABEL_15;
          }
        }
        *(void *)(v8 + 96) = v18;
LABEL_15:
        if (a3) {
          CFRelease(a3);
        }
        uint64_t v19 = *(const void **)(v14 + 16);
        if (v19) {
          CFRelease(v19);
        }
        free((void *)v14);
      }
    }
LABEL_23:
    *uint64_t v12 = a2;
    if (a3) {
      CFTypeRef v21 = CFRetain(a3);
    }
    else {
      CFTypeRef v21 = 0;
    }
    v12[1] = v21;
    if (a4) {
      CFTypeRef v22 = CFRetain(a4);
    }
    else {
      CFTypeRef v22 = 0;
    }
    v12[2] = v22;
    v12[3] = MEMORY[0x19970ED80]();
    v12[4] = 0;
    **(void **)(v8 + 96) = v12;
    *(void *)(v8 + 96) = v12 + 4;
    return 0;
  }

  return FigSignalErrorAt();
}

uint64_t fpfsi_updateOutputsForAllAggregateVideoDestinations(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = *(void *)(DerivedStorage + 1048);
  if (v4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    do
    {
      if (*(_DWORD *)(v4 + 32) == 1986618469)
      {
        uint64_t v7 = *(void *)(v4 + 88);
        if (!v7) {
          break;
        }
        if (v5) {
          uint64_t v6 = *(void *)(v5 + 88);
        }
        uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v8) {
          uint64_t v9 = v8;
        }
        else {
          uint64_t v9 = 0;
        }
        uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 8);
        if (!v10) {
          return 4294954514;
        }
        uint64_t result = v10(v7, v6, a2);
        uint64_t v5 = v4;
        if (result) {
          return result;
        }
      }
      uint64_t v4 = *(void *)(v4 + 8);
    }
    while (v4);
    if (v5) {
      return 0;
    }
  }
  uint64_t v12 = *(void *)(DerivedStorage + 840);
  if (v12)
  {
    uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v13) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    uint64_t v15 = *(void (**)(uint64_t, void, uint64_t))(v14 + 8);
    if (v15) {
      v15(v12, 0, a2);
    }
  }
  return 0;
}

uint64_t fpfs_ensureTransaction(uint64_t a1, uint64_t *a2)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    uint64_t v4 = result;
    if (!*(void *)(result + 816))
    {
      uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
      uint64_t result = FigDeferredTransactionCreate(AllocatorForMedia, a2);
      *(void *)(v4 + 816) = *a2;
    }
  }
  return result;
}

uint64_t fpfs_commitTransaction(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)(DerivedStorage + 816) == a2) {
    *(void *)(DerivedStorage + 816) = 0;
  }

  return FigDeferredTransactionCommit(a2);
}

void fpfs_TimedDataRenderCallback(void *a1, const void *a2)
{
  values = a1;
  if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 459))
  {
    if (a1)
    {
      CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
      CFDictionaryRef v5 = CFDictionaryCreate(AllocatorForMedia, (const void **)&kFigPlayerTimedMetadataNotificationKey_ValueArray, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      fpfs_PostNotificationWhenUnlocked(a2, @"TimedMetadata", a2, v5);
      if (v5) {
        CFRelease(v5);
      }
    }
    else
    {
      fpfs_PostNotificationWhenUnlocked(a2, @"TimedMetadata", a2, 0);
    }
  }
}

void fpfs_postSubtitleCallback(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, uint64_t a5, const __CFDictionary *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  CFTypeRef v23 = 0;
  CFTypeRef v24 = 0;
  CFTypeRef cf = 0;
  if (a10 && !fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer(a10, &v23, &v24))
  {
    CFTypeRef v15 = v24;
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    CFTypeRef v17 = v23;
    uint64_t v18 = CMBaseObjectGetDerivedStorage();
    if (!*(unsigned char *)(DerivedStorage + 875))
    {
      uint64_t v19 = v18;
      if (!FigSubtitleSampleCreatePropertyList(a6, 1, 1, (CFDictionaryRef *)&cf, a1, a2, a3, a4))
      {
        CFTypeRef v20 = cf;
        if (cf)
        {
          CFTypeRef v21 = *(const void **)(v19 + 368);
          *(void *)(v19 + 368) = cf;
          CFRetain(v20);
          if (v21) {
            CFRelease(v21);
          }
          fpfs_PostNotificationWhenUnlocked(v17, @"SubtitleChanged", v17, cf);
          if (cf) {
            CFRelease(cf);
          }
        }
      }
    }
    fpfs_UnlockAndPostNotificationsWithCaller(v17);
    if (v15) {
      CFRelease(v15);
    }
    if (v17) {
      CFRelease(v17);
    }
  }
}

void fpfs_postCaptionCallback(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, uint64_t a5, const __CFDictionary *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  CFTypeRef v23 = 0;
  CFTypeRef v24 = 0;
  CFTypeRef cf = 0;
  if (a10 && !fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer(a10, &v23, &v24))
  {
    CFTypeRef v15 = v24;
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    CFTypeRef v17 = v23;
    uint64_t v18 = CMBaseObjectGetDerivedStorage();
    if (!*(unsigned char *)(DerivedStorage + 875))
    {
      uint64_t v19 = v18;
      if (!FigSubtitleSampleCreatePropertyList(a6, 1, 1, (CFDictionaryRef *)&cf, a1, a2, a3, a4))
      {
        CFTypeRef v20 = cf;
        if (cf)
        {
          CFTypeRef v21 = *(const void **)(v19 + 368);
          *(void *)(v19 + 368) = cf;
          CFRetain(v20);
          if (v21) {
            CFRelease(v21);
          }
          fpfs_PostNotificationWhenUnlocked(v17, @"SubtitleChanged", v17, cf);
          if (cf) {
            CFRelease(cf);
          }
        }
      }
    }
    fpfs_UnlockAndPostNotificationsWithCaller(v17);
    if (v15) {
      CFRelease(v15);
    }
    if (v17) {
      CFRelease(v17);
    }
  }
}

uint64_t fpfsi_prepareSubtitleRenderPipeline(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = CMBaseObjectGetDerivedStorage();
  uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(a2);
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(void (**)(uint64_t, __CFString *, void))(v7 + 56);
  if (v8) {
    v8(FigBaseObject, @"DisplayNonForcedSubtitles", *MEMORY[0x1E4F1CFD0]);
  }
  uint64_t v9 = *(void *)(DerivedStorage + 1816);
  if (!v9) {
    return 0;
  }
  if (!*(unsigned char *)(v4 + 460))
  {
    uint64_t v10 = FigRenderPipelineGetFigBaseObject(a2);
    uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v14) {
      uint64_t v15 = v14;
    }
    else {
      uint64_t v15 = 0;
    }
    uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 56);
    if (v16)
    {
      uint64_t v17 = 0x1EE5743D8;
      goto LABEL_19;
    }
    return 4294954514;
  }
  uint64_t v10 = FigRenderPipelineGetFigBaseObject(a2);
  uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 56);
  if (!v16) {
    return 4294954514;
  }
  uint64_t v17 = 0x1EE54F778;
LABEL_19:

  return v16(v10, v17, v9);
}

uint64_t fpfs_prepareClosedCaptionRenderPipeline(uint64_t a1, uint64_t a2, uint64_t a3)
{
  ClosedCaptionType = fpfsi_GetClosedCaptionType();
  if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 210)) {
    CFDictionaryRef v5 = (void *)MEMORY[0x1E4F1CFD0];
  }
  else {
    CFDictionaryRef v5 = (void *)MEMORY[0x1E4F1CFC8];
  }
  uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(a3);
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t, __CFString *, void))(v8 + 56);
  if (!v9) {
    return 4294954514;
  }
  uint64_t result = v9(FigBaseObject, @"DisplayClosedCaptions", *v5);
  if (result) {
    return result;
  }
  uint64_t v11 = FigRenderPipelineGetFigBaseObject(a3);
  uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
  uint64_t v13 = v12 ? v12 : 0;
  uint64_t v14 = *(uint64_t (**)(uint64_t, __CFString *, const void *))(v13 + 56);
  if (!v14) {
    return 4294954514;
  }

  return v14(v11, @"CCRPP_ClosedCaptionType", ClosedCaptionType);
}

const void *fpfsi_GetClosedCaptionType()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFArrayRef v1 = *(const __CFArray **)(DerivedStorage + 1792);
  uint64_t CFStringForOSTypeValue = FigGetCFStringForOSTypeValue();
  CFDictionaryRef MediaTypeInMediaArray = fpfs_FindMediaTypeInMediaArray(v1, CFStringForOSTypeValue, 0);
  if (!MediaTypeInMediaArray) {
    return 0;
  }
  CFDictionaryRef Value = CFDictionaryGetValue(MediaTypeInMediaArray, @"MediaSelectionOptionsPersistentID");
  if (!Value) {
    return 0;
  }
  CFDictionaryRef v5 = Value;
  uint64_t v6 = *(void *)(DerivedStorage + 1704);
  if (!v6) {
    return 0;
  }
  CFDictionaryRef ClosedCaptionGroupLocatorMap = (const __CFDictionary *)FigAlternateGetClosedCaptionGroupLocatorMap(v6);
  if (!ClosedCaptionGroupLocatorMap) {
    return 0;
  }
  CFDictionaryRef v8 = (const __CFDictionary *)CFDictionaryGetValue(ClosedCaptionGroupLocatorMap, v5);
  if (!v8) {
    return 0;
  }

  return CFDictionaryGetValue(v8, @"FBPAEGLMK_ClosedCaptionType");
}

void fpfs_postClosedCaptionNotificationIfEnabled(uint64_t a1, uint64_t a2, const __CFDictionary *a3, uint64_t a4, uint64_t a5)
{
  if (a5)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    CFDictionaryRef v8 = *(const void **)DerivedStorage;
    uint64_t v9 = CMBaseObjectGetDerivedStorage();
    if (*(unsigned char *)(v9 + 208))
    {
      CFTypeRef cf = 0;
      if (!FigCaptionCommandCreatePropertyList(a2, a3, (CFDictionaryRef *)&cf))
      {
        fpfs_EnqueueNotification(v8, @"ClosedCaptionCommand", *(const void **)DerivedStorage, cf);
        CFRelease(cf);
      }
    }
    else
    {
      uint64_t v10 = v9;
      if (*(unsigned char *)(v9 + 210))
      {
        if (!*(unsigned char *)(DerivedStorage + 875))
        {
          uint64_t v11 = *(void *)(v9 + 80);
          if (v11)
          {
            if (fpfs_FirstRenderingTrackofType(v11, 1668047728))
            {
              MEMORY[0x19970E290](*(void *)(v10 + 224));
              CFArrayRef v12 = *(const __CFArray **)(v10 + 216);
              if (v12)
              {
                CFIndex Count = CFArrayGetCount(v12);
                uint64_t v14 = (void *)MEMORY[0x199711A30]();
                if (Count >= 1)
                {
                  for (CFIndex i = 0; i != Count; ++i)
                    objc_msgSend((id)CFArrayGetValueAtIndex(*(CFArrayRef *)(v10 + 216), i), "processCaptionCommand:data:", a2, a3);
                }
              }
              else
              {
                uint64_t v14 = (void *)MEMORY[0x199711A30]();
              }
              JUMPOUT(0x19970E2B0);
            }
          }
        }
      }
    }
  }
}

uint64_t fpfsi_setItemRateTimebaseAndAnchor(float a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v10 = DerivedStorage;
  if (!a3) {
    goto LABEL_6;
  }
  uint64_t v11 = *(OpaqueCMTimebase **)(DerivedStorage + 576);
  if (!v11) {
    goto LABEL_6;
  }
  if ((*(unsigned char *)(a4 + 12) & 1) == 0 || (*(unsigned char *)(a5 + 12) & 1) == 0)
  {
    CMTime timebaseTime = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
    CMTime v13 = timebaseTime;
    uint64_t result = CMTimebaseSetRateAndAnchorTimeWithFlags();
    if (result) {
      return result;
    }
    goto LABEL_6;
  }
  CMTime timebaseTime = *(CMTime *)a4;
  CMTime v13 = *(CMTime *)a5;
  uint64_t result = CMTimebaseSetRateAndAnchorTime(v11, a1, &timebaseTime, &v13);
  if (!result)
  {
LABEL_6:
    *(float *)(v10 + 848) = a1;
    fpfsi_updateMaxPlayThroughTime();
    return 0;
  }
  return result;
}

uint64_t fpfs_setRateOnPrimaryAndAuxRenderPipelines(uint64_t a1, long long *a2, long long *a3, float a4, float a5)
{
  uint64_t v9 = *(void *)(a1 + 88);
  uint64_t v10 = *(void *)(a1 + 32);
  long long v23 = *a2;
  uint64_t v25 = *((void *)a2 + 2);
  long long v19 = *a3;
  uint64_t v21 = *((void *)a3 + 2);
  uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  CMTime v13 = *(uint64_t (**)(uint64_t, long long *, long long *, float, float))(v12 + 8);
  if (!v13) {
    return 4294954514;
  }
  long long v29 = v23;
  uint64_t v30 = v25;
  long long v27 = v19;
  uint64_t v28 = v21;
  uint64_t result = v13(v10, &v29, &v27, a4, a5);
  if (!result && v9)
  {
    do
    {
      uint64_t v15 = *(void *)(v9 + 32);
      long long v24 = *a2;
      uint64_t v26 = *((void *)a2 + 2);
      long long v20 = *a3;
      uint64_t v22 = *((void *)a3 + 2);
      uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v16) {
        uint64_t v17 = v16;
      }
      else {
        uint64_t v17 = 0;
      }
      uint64_t v18 = *(void (**)(uint64_t, long long *, long long *, float, float))(v17 + 8);
      if (v18)
      {
        long long v29 = v24;
        uint64_t v30 = v26;
        long long v27 = v20;
        uint64_t v28 = v22;
        v18(v15, &v29, &v27, a4, a5);
      }
      uint64_t v9 = *(void *)(v9 + 88);
    }
    while (v9);
    return 0;
  }
  return result;
}

uint64_t fpfs_UnlockMutexCompletelyWithCaller(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = *(void *)(DerivedStorage + 8);
  *(void *)(DerivedStorage + 8) = 0;
  if (v3 >= 1)
  {
    uint64_t v4 = (void *)DerivedStorage;
    fpfs_CheckIfPlaybackStateChangedAndNotifyBeforeUnlock(a1);
    uint64_t v5 = v3;
    do
    {
      MEMORY[0x19970E2B0](*v4);
      --v5;
    }
    while (v5);
  }
  return v3;
}

void fpfs_CheckIfPlaybackStateChangedAndNotifyBeforeUnlock(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v5 = 0;
  fpfs_getPlaybackState(a1, &v5, 0);
  if (v5 != *(_DWORD *)(DerivedStorage + 164))
  {
    CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    FigCFDictionarySetInt32();
    fpfs_EnqueueNotificationWithoutLocking((uint64_t)a1, @"PlaybackStateDidChange", a1, Mutable);
    if (Mutable)
    {
      CFRelease(Mutable);
    }
  }
}

uint64_t fpfsi_setAudioSessionPreferredAudioHardwareFormat(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = *(void *)(result + 536);
  if (v5)
  {
    uint64_t VTable = CMBaseObjectGetVTable();
    uint64_t v8 = *(void *)(VTable + 16);
    uint64_t result = VTable + 16;
    uint64_t v7 = v8;
    if (v8)
    {
      uint64_t v9 = *(uint64_t (**)(uint64_t, void, uint64_t))(v7 + 56);
      if (v9) {
        uint64_t result = v9(v5, *MEMORY[0x1E4F76418], a3);
      }
    }
  }
  if (dword_1E9350BB0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return result;
}

void fpfs_setPreferredNumberOfAudioOutputChannels(uint64_t a1, const opaqueCMFormatDescription *a2, int a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(void *)(DerivedStorage + 504))
  {
    uint64_t v6 = DerivedStorage;
    if (*(void *)(DerivedStorage + 536))
    {
      AudioChannelCFIndex Count = 2;
      int valuePtr = 2;
      int AudioDeviceMaxMixablePhysicalOutputChannelCountFromFigAudioSession = fpfs_GetAudioDeviceMaxMixablePhysicalOutputChannelCountFromFigAudioSession();
      if (a2)
      {
        AudioChannelCFIndex Count = fpfs_GetAudioChannelCount(a2);
        int valuePtr = AudioChannelCount;
      }
      if (AudioChannelCount > AudioDeviceMaxMixablePhysicalOutputChannelCountFromFigAudioSession)
      {
        if (dword_1E9350BB0)
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        int valuePtr = AudioDeviceMaxMixablePhysicalOutputChannelCountFromFigAudioSession;
      }
      CFNumberRef v10 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
      if (v10)
      {
        CFNumberRef v11 = v10;
        if (!a3 || *(_DWORD *)(v6 + 32) == 2)
        {
          uint64_t v13 = *(void *)(v6 + 536);
          if (!v13) {
            goto LABEL_26;
          }
          uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (!v14) {
            goto LABEL_26;
          }
          uint64_t v15 = *(unsigned int (**)(uint64_t, void, CFNumberRef))(v14 + 56);
          if (!v15 || v15(v13, *MEMORY[0x1E4F76490], v11)) {
            goto LABEL_26;
          }
          uint64_t v16 = *(const void **)(v6 + 552);
          *(void *)(v6 + 552) = v11;
          CFRetain(v11);
          if (v16) {
            CFRelease(v16);
          }
          char v17 = dword_1E9350BB0;
          if (dword_1E9350BB0)
          {
            uint64_t v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            char v17 = 0;
          }
        }
        else
        {
          if (dword_1E9350BB0)
          {
            uint64_t v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          long long v19 = *(const void **)(v6 + 552);
          *(void *)(v6 + 552) = v11;
          CFRetain(v11);
          if (v19) {
            CFRelease(v19);
          }
          char v17 = 1;
        }
        *(unsigned char *)(v6 + 560) = v17;
LABEL_26:
        CFRelease(v11);
      }
    }
  }
}

uint64_t fpfsi_DetermineRateSnapping(uint64_t a1, uint64_t a2)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    uint64_t result = FigCFEqual();
    uint64_t v4 = 0x420000003D000000;
    if (!result)
    {
      uint64_t result = FigCFEqual();
      if (!result)
      {
        uint64_t result = FigCFEqual();
        if (!result)
        {
          uint64_t result = FigCFEqual();
          if (result)
          {
            uint64_t v4 = 0;
            char v5 = 1;
            goto LABEL_6;
          }
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          uint64_t result = fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
    }
    char v5 = 0;
LABEL_6:
    *(unsigned char *)a2 = v5;
    *(void *)(a2 + 4) = v4;
  }
  return result;
}

uint64_t fpfs_ConfigureRatePlan(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5, float a6, float a7)
{
  if ((_BYTE)a3) {
    *(float *)&a4 = 2.1;
  }
  if (a6 < 0.0) {
    return 0;
  }
  *(unsigned char *)(a5 + 8) = 0;
  *(float *)a5 = a6;
  if ((_BYTE)a1 && *((float *)&a1 + 1) > a7 || (a1 & 0xFF00) != 0 && *(float *)&a2 < a7) {
    goto LABEL_8;
  }
  if (*(float *)&a4 >= a7)
  {
    if (a7 > 0.0 && (_BYTE)a3)
    {
      uint64_t v9 = FPSupport_ConfigSnapRateForLQZL((float *)(a5 + 4), (float *)a5, a7);
    }
    else
    {
      if (a7 == 0.0)
      {
        *(_DWORD *)(a5 + 4) = 1065353216;
      }
      else
      {
        if (*((float *)&a3 + 1) > a7)
        {
LABEL_8:
          uint64_t v9 = 1;
          *(unsigned char *)(a5 + 8) = 1;
          *(_DWORD *)(a5 + 4) = 1065353216;
          goto LABEL_9;
        }
        *(float *)(a5 + 4) = a7;
      }
      uint64_t v9 = 1;
    }
  }
  else
  {
    uint64_t v9 = 0;
    *(_DWORD *)a5 = 0;
  }
LABEL_9:
  if (dword_1E9350BB0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return v9;
}

void fpfsi_synchronizeLayerToTimebaseWithTransaction(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 672));
  uint64_t v4 = *(const void **)(DerivedStorage + 680);
  if (v4) {
    FigLayerSynchronizerSynchronizeToTimebaseWithDeferredTransaction(v4, *(const void **)(DerivedStorage + 576), 0, (uint64_t)"fpfsi_synchronizeLayerToTimebaseWithTransaction", a2);
  }

  JUMPOUT(0x19970E930);
}

void fpfs_PullNextItem(void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1) {
    CFRetain(a1);
  }
  uint64_t v3 = *(NSObject **)(DerivedStorage + 24);

  dispatch_async_f(v3, a1, (dispatch_function_t)fpfs_PullNextCallback);
}

uint64_t fpfs_applySoftwareVolume(float a1, float a2, uint64_t a3, int a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = (uint64_t)fpfs_getNext(DerivedStorage, 0);
  if (result)
  {
    uint64_t result = fpfs_FirstRenderingTrackofType(result, 1936684398);
    if (result)
    {
      uint64_t result = fpfs_applySoftwareVolumeToTrack(result, 1, a1, a2);
      if (a2 > 0.0 && a4 && !result)
      {
        return usleep((a2 * 1000.0 * 1000.0));
      }
    }
  }
  return result;
}

uint64_t fpfsi_applySoftwareVolume(float a1, float a2, uint64_t a3, int a4)
{
  uint64_t v7 = *(void *)(CMBaseObjectGetDerivedStorage() + 1048);
  if (!v7) {
    return 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)(v7 + 96);
    if (v8 && *(_DWORD *)(v7 + 32) == 1936684398)
    {
      uint64_t v9 = v7;
      while (1)
      {
        uint64_t v9 = *(void *)(v9 + 8);
        if (!v9) {
          break;
        }
        if (*(void *)(v9 + 96) == v8) {
          goto LABEL_9;
        }
      }
      uint64_t result = fpfs_applySoftwareVolumeToTrack(v7, a4, a1, a2);
      if (result) {
        return result;
      }
    }
LABEL_9:
    uint64_t v7 = *(void *)(v7 + 8);
    if (!v7) {
      return 0;
    }
  }
}

void fpfs_PullNextCallback(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  fpfs_LockMutexWithCaller(a1);
  if (*(unsigned char *)(DerivedStorage + 51)) {
    goto LABEL_3;
  }
  char v31 = 0;
  uint64_t v3 = CMBaseObjectGetDerivedStorage();
  uint64_t v30 = 0;
  if (*(void *)(v3 + 80)) {
    goto LABEL_3;
  }
  uint64_t v4 = v3;
  if (*(_DWORD *)(v3 + 32) && CFArrayGetCount(*(CFArrayRef *)(v3 + 72)) >= 1)
  {
    CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v4 + 72), 0);
    uint64_t v6 = CMBaseObjectGetDerivedStorage();
    *(void *)(v4 + 80) = CFRetain(ValueAtIndex);
    double Current = CFAbsoluteTimeGetCurrent();
    uint64_t v8 = *(void *)(v6 + 2544);
    if (v8)
    {
      double v9 = Current;
      double v10 = *(double *)(v6 + 2032);
      uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v12 = v11 ? v11 : 0;
      uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v12 + 56);
      if (v14) {
        v14(v8, 0x1EE582B78, 0x1EE584BB8, (uint64_t)((v9 - v10) * 1000.0), 0);
      }
    }
    if (*(void *)(v6 + 2072))
    {
      if (!*(unsigned char *)(v6 + 2081))
      {
        uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
        uint64_t v23 = *(void *)(v6 + 2544);
        if (v23)
        {
          uint64_t v24 = UpTimeNanoseconds;
          uint64_t v25 = *(void *)(v6 + 2072);
          uint64_t v26 = *(void *)(CMBaseObjectGetVTable() + 16);
          uint64_t v27 = v26 ? v26 : 0;
          uint64_t v28 = *(void (**)(uint64_t, uint64_t, uint64_t, unint64_t, void))(v27 + 56);
          if (v28) {
            v28(v23, 0x1EE582CD8, 0x1EE585C38, (v24 - v25) / 0xF4240uLL, 0);
          }
        }
      }
    }
    fpfsi_RTCReportingUpdateAutomaticallyWaitsToMinimizeStalling(v6, *(unsigned __int8 *)(v4 + 160));
    CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v4 + 72), 0);
    fpfs_EnqueueNotification(a1, @"ItemBecameCurrent", ValueAtIndex, 0);
    fpfs_updateClosedCaptionsDisplay(*(const void **)v6, 0);
    if (*(unsigned char *)(v6 + 2448))
    {
      *(unsigned char *)(v6 + 2448) = 0;
    }
    else if (!fpfsi_MakeReadyForInspection((uint64_t)ValueAtIndex, 0, &v31) && v31)
    {
      fpfsi_NowReadyForInspection((const __CFArray *)ValueAtIndex);
    }
    if (*(float *)(v4 + 108) != 0.0) {
      fpfs_notifyExternalStartupTasksOfEvents((uint64_t)a1, 1, 0, 0, MEMORY[0x1E4F1F9F8]);
    }
    if (*(unsigned char *)(v4 + 462)) {
      fpfsi_ResumeAllWaitingVideoTracks(ValueAtIndex);
    }
    fpfs_ResolveAllWaitingTracks((const __CFArray *)ValueAtIndex);
    fpfs_CheckPrebufferedLevels(v29, ValueAtIndex, 1, -1, 0);
    fpfs_EnqueueCurrentItemDidChangeNotification(a1, (uint64_t)ValueAtIndex);
    fpfsi_checkCoordinatedPlaybackCapability(ValueAtIndex);
    if (fpfs_FirstRenderingTrackofType((uint64_t)ValueAtIndex, 1986618469))
    {
      CFStringRef v15 = ValueAtIndex;
      uint64_t v16 = 0;
      int v17 = 0;
    }
    else
    {
      fpfs_disassociatePlayerVideoLayer((uint64_t)a1, 0);
      fpfs_releaseTransitionImageQueuesAndSlots();
      CFStringRef v15 = ValueAtIndex;
      uint64_t v16 = 2;
      int v17 = 1;
    }
    fpfsi_scheduleFVTTransitionsForItem(v15, v16, v17);
    CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    FigCFDictionarySetInt32();
    uint64_t GlobalSingleton = fpfs_SetRateWithOptionsGuts(a1, Mutable, 0, *(float *)(v4 + 108));
    if (GlobalSingleton)
    {
LABEL_37:
      uint64_t v20 = GlobalSingleton;
      if (!Mutable) {
        goto LABEL_32;
      }
      goto LABEL_31;
    }
    fpfsi_UpdateSourceFormatInfoIfNecessary((uint64_t)ValueAtIndex);
    fpfsi_MakeNextItemReadyForInspectionIfItemEndedOrBeyondFwdEnd(ValueAtIndex);
    fpfsi_UpdateResourceSpecifierOnResourceArbiter((uint64_t)ValueAtIndex);
  }
  else
  {
    CFMutableDictionaryRef Mutable = 0;
  }
  if (!*(void *)(v4 + 80))
  {
    uint64_t GlobalSingleton = FigPlayerResourceArbiterGetGlobalSingleton(&v30);
    if (!GlobalSingleton) {
      uint64_t GlobalSingleton = FigPlayerResourceArbiterSetSpecifierForConsumer(v30, 0, *(void *)(v4 + 864));
    }
    goto LABEL_37;
  }
  uint64_t v20 = 0;
  if (Mutable) {
LABEL_31:
  }
    CFRelease(Mutable);
LABEL_32:
  if (v20)
  {
    uint64_t v21 = *(void *)(DerivedStorage + 80);
    if (v21) {
      fpfs_StopPlayingItemWithOSStatus(DerivedStorage, v21, v20);
    }
  }
LABEL_3:
  fpfs_UnlockAndPostNotificationsWithCaller(a1);
  CFRelease(a1);
}

uint64_t fpfsi_RTCReportingUpdateAutomaticallyWaitsToMinimizeStalling(uint64_t result, unsigned int a2)
{
  uint64_t v2 = *(void *)(result + 2544);
  if (v2)
  {
    uint64_t VTable = CMBaseObjectGetVTable();
    uint64_t v6 = *(void *)(VTable + 16);
    uint64_t result = VTable + 16;
    uint64_t v5 = v6;
    uint64_t v7 = v6 ? v5 : 0;
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, void))(v7 + 56);
    if (v8)
    {
      return v8(v2, 0x1EE582B78, 0x1EE583EF8, a2, 0);
    }
  }
  return result;
}

void fpfsi_ResumeAllWaitingVideoTracks(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = *(void *)(DerivedStorage + 1048);
  if (v3)
  {
    uint64_t v4 = DerivedStorage;
    do
    {
      uint64_t v5 = *(void *)(v3 + 8);
      if (*(_DWORD *)(v3 + 32) == 1986618469 && *(_DWORD *)(v3 + 152) == 5)
      {
        uint64_t v6 = CMBaseObjectGetDerivedStorage();
        uint64_t v7 = CMBaseObjectGetDerivedStorage();
        memset(&v11, 0, sizeof(v11));
        fpfs_GetTime(v7, (uint64_t)&v11);
        CMTimeRange refcon = 0;
        if (fpfs_CanRenderVideo(v6, (uint64_t)a1) && *(_DWORD *)(v3 + 32) == 1986618469 && *(_DWORD *)(v3 + 152) == 5)
        {
          if (*(float *)(v6 + 108) >= 0.0
            && *(unsigned char *)(v3 + 182)
            && (*(unsigned char *)(v3 + 228) & 1) != 0
            && (time1 = v11, CMTime v8 = *(CMTime *)(v3 + 216), CMTimeCompare(&time1, &v8) >= 1))
          {
            fpfs_DeleteTrack(a1, v3);
          }
          else
          {
            CMTime v8 = v11;
            fpfsi_PrepareTrackForReplay(v3, (long long *)&v8.value, (uint64_t)&time1);
            CMBufferQueueCallForEachBuffer(*(CMBufferQueueRef *)(v3 + 72), (OSStatus (__cdecl *)(CMBufferRef, void *))fpfs_GetFirstNonMarkerSBuf, &refcon);
            if (refcon && fpfs_IsVideoSync(refcon))
            {
              CMSampleBufferGetOutputPresentationTimeStamp(&v8, refcon);
              *(CMTime *)(v3 + 272) = v8;
              if (!*(void *)(v3 + 96)) {
                fpfs_PreallocateVideoRendering((uint64_t *)v3);
              }
              if (fpfs_CheckVideoSyncQueue(v3, 0)) {
                fpfs_FinishVideoSync(v3);
              }
            }
          }
        }
      }
      if (!v5) {
        break;
      }
      uint64_t v3 = v5;
    }
    while (*(void *)(v4 + 1048));
  }
}

void fpfs_EnqueueCurrentItemDidChangeNotification(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(const void **)CMBaseObjectGetDerivedStorage() == a1)
  {
    if (*MEMORY[0x1E4F1EBA8] == 1)
    {
      if (a1) {
        double v10 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
      }
      else {
        double v10 = "";
      }
      strncpy(__dst, v10, 8uLL);
      if (a2) {
        CMTime v11 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
      }
      else {
        CMTime v11 = "";
      }
      strncpy(__dst, v11, 8uLL);
      kdebug_trace();
    }
    uint64_t v12 = *(__CFString **)(DerivedStorage + 648);
    if (!v12) {
      uint64_t v12 = @"ReasonAdvanceAtEnd";
    }
    uint64_t v13 = fpfs_CreateCurrentItemDidChangeNotificationPayloadWithProperties(a1, a2, v12, v5, v6, v7, v8, v9);
    fpfs_EnqueueNotification(a1, @"CurrentItemDidChange", a1, v13);
    *(void *)(DerivedStorage + 648) = 0;
    uint64_t v14 = *(const void **)(DerivedStorage + 640);
    if (v14)
    {
      CFRelease(v14);
      *(void *)(DerivedStorage + 640) = 0;
    }
    if (v13) {
      CFRelease(v13);
    }
  }
}

uint64_t fpfs_disassociatePlayerVideoLayer(uint64_t a1, char a2)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  CFArrayRef v4 = *(const __CFArray **)(result + 384);
  if (v4)
  {
    int v5 = *(const void **)(result + 816);
    return FPSupport_AppendDeferredTransactionChangeForClearingFigVideoLayers(v5, v4, a2, (uint64_t)"fpfs_disassociatePlayerVideoLayer");
  }
  return result;
}

__CFDictionary *fpfs_CreateCurrentItemDidChangeNotificationPayloadWithProperties(const void *a1, uint64_t a2, const void *a3, int a4, int a5, int a6, int a7, int a8)
{
  NotificationPayloadForProperties = fpfs_CreateNotificationPayloadForProperties(a1, a2, (int)a3, a4, a5, a6, a7, a8, @"CurrentDuration", @"VideoSlotArray");
  double v10 = NotificationPayloadForProperties;
  if (a3 && NotificationPayloadForProperties) {
    CFDictionarySetValue(NotificationPayloadForProperties, @"ReasonForCurrentItemDidChange", a3);
  }
  return v10;
}

uint64_t fpfsi_isPlaying4k()
{
  uint64_t result = *(void *)(CMBaseObjectGetDerivedStorage() + 1704);
  if (result) {
    return FigAlternateIs4k(result);
  }
  return result;
}

uint64_t fpfs_EnterBestEffortTrickplayMode(uint64_t a1, const __CFString *a2, float a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  long long v7 = *MEMORY[0x1E4F1F9F8];
  *(_OWORD *)&v30.CMTimeValue value = *MEMORY[0x1E4F1F9F8];
  CMTimeEpoch v8 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  v30.CMTimeEpoch epoch = v8;
  if (a3 == 0.0) {
    return 0;
  }
  uint64_t v9 = DerivedStorage;
  if (!*(void *)(DerivedStorage + 936)) {
    return 0;
  }
  long long v20 = v7;
  fpfsi_getSeekableTimeRange((uint64_t)a2, &lhs);
  CMTimeValue value = lhs.value;
  CMTimeFlags flags = lhs.flags;
  CMTimeScale timescale = lhs.timescale;
  if ((lhs.flags & 1) == 0 || (v28 & 1) == 0 || v29 || v26 < 0) {
    return (__int16)FigSignalErrorAt();
  }
  CMTimeEpoch epoch = lhs.epoch;
  lhs.CMTimeValue value = value;
  lhs.CMTimeScale timescale = timescale;
  rhs.CMTimeValue value = v26;
  rhs.CMTimeScale timescale = v27;
  rhs.CMTimeFlags flags = v28;
  rhs.CMTimeEpoch epoch = 0;
  CMTimeAdd(&v30, &lhs, &rhs);
  fpfs_GetTime(v9, (uint64_t)&time1);
  lhs.CMTimeValue value = value;
  lhs.CMTimeScale timescale = timescale;
  lhs.CMTimeFlags flags = flags;
  lhs.CMTimeEpoch epoch = epoch;
  int32_t v13 = CMTimeCompare(&time1, &lhs);
  if (a3 < 0.0 && v13 < 1) {
    return 0;
  }
  fpfs_GetTime(v9, (uint64_t)&v22);
  CMTime lhs = v30;
  int32_t v14 = CMTimeCompare(&v22, &lhs);
  if (a3 > 0.0 && (v14 & 0x80000000) == 0) {
    return 0;
  }
  *(_OWORD *)&lhs.CMTimeValue value = v20;
  lhs.CMTimeEpoch epoch = v8;
  *(_OWORD *)&rhs.CMTimeValue value = v20;
  rhs.CMTimeEpoch epoch = v8;
  fpfs_setRateInternal(a1, a2, (uint64_t)&lhs, (uint64_t)&rhs, 0.0);
  CFStringRef v15 = (CMTimebaseRef *)(v9 + 2968);
  uint64_t v16 = *(OpaqueCMTimebase **)(v9 + 2968);
  if (!v16)
  {
    CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    HostTimeClock = CMClockGetHostTimeClock();
    __int16 v11 = CMTimebaseCreateWithSourceClock(AllocatorForMedia, HostTimeClock, (CMTimebaseRef *)(v9 + 2968));
    if (v11) {
      return v11;
    }
    uint64_t v16 = *v15;
  }
  CMTimebaseGetTime(&time, *(CMTimebaseRef *)(v9 + 576));
  __int16 v11 = CMTimebaseSetTime(v16, &time);
  if (!v11)
  {
    __int16 v11 = CMTimebaseSetRate(*v15, a3);
    if (!v11)
    {
      *(void *)(v9 + 2920) = FigGetUpTimeNanoseconds();
      return (__int16)fpfsi_HandleNextBestEffortTrickplayModeSeek();
    }
  }
  return v11;
}

uint64_t fpfs_IsItemReadyToStart(uint64_t a1, CMTime *a2, uint64_t a3, float *a4, CMTime *a5, uint64_t a6)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  memset(&v52, 0, sizeof(v52));
  fpfs_GetApproximateTime(DerivedStorage, (uint64_t)&v52);
  uint64_t v12 = DerivedStorage;
  CMTime v51 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  CMTime v49 = v51;
  CMTime v50 = v51;
  uint64_t v13 = *(void *)(DerivedStorage + 1048);
  uint64_t v45 = DerivedStorage;
  if (!v13)
  {
    int v17 = 0;
    char v14 = 0;
    goto LABEL_41;
  }
  unsigned int v42 = a5;
  uint64_t v43 = a6;
  char v14 = 0;
  int v15 = 0;
  int v16 = 0;
  int v17 = 0;
  while (1)
  {
    uint64_t v18 = *(unsigned __int8 *)(v13 + 180);
    uint64_t v19 = *(void *)(v12 + 16 * v18 + 1000);
    int v20 = *(_DWORD *)(v13 + 32);
    int v21 = (1 << v18) | v17;
    if (v20 == 1936684398) {
      int v22 = 1;
    }
    else {
      int v22 = v16;
    }
    if (v20 != 1935832172 && v20 != 1986618469 && v20 != 1936684398)
    {
      int v21 = v17;
      int v22 = v16;
    }
    if (*(void *)(v13 + 48) == v19)
    {
      int v17 = v21;
      int v16 = v22;
    }
    int v25 = *(_DWORD *)(v13 + 152);
    if (v25 == 6) {
      char v14 = 1;
    }
    if (v20 == 1986618469 && v25 == 5)
    {
      uint64_t v27 = CMBaseObjectGetDerivedStorage();
      BOOL CanRenderVideo = fpfs_CanRenderVideo(v27, a1);
      uint64_t v12 = DerivedStorage;
      if (!CanRenderVideo) {
        int v15 = 1;
      }
    }
    if (v14 && *(unsigned char *)(v13 + 104)) {
      break;
    }
    uint64_t v13 = *(void *)(v13 + 8);
    if (!v13) {
      goto LABEL_31;
    }
  }
  char v14 = 0;
LABEL_31:
  if (v14)
  {
    a5 = v42;
    a6 = v43;
    goto LABEL_41;
  }
  if (!v15)
  {
    a5 = v42;
    goto LABEL_40;
  }
  if ((_BYTE)v16) {
    goto LABEL_37;
  }
  if (!dword_1E9350BB0)
  {
    char v14 = 1;
LABEL_37:
    a5 = v42;
    goto LABEL_40;
  }
  LODWORD(rhs.value) = 0;
  LOBYTE(type.value) = 0;
  os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  a5 = v42;
  char v14 = 1;
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  uint64_t v12 = DerivedStorage;
LABEL_40:
  a6 = v43;
LABEL_41:
  int v30 = *(_DWORD *)(v12 + 1096);
  if (v17 == v30) {
    goto LABEL_63;
  }
  int v31 = *(unsigned __int8 *)(v12 + 471);
  if (*(unsigned char *)(v12 + 553))
  {
    if (!*(unsigned char *)(v12 + 471)) {
      goto LABEL_48;
    }
    if (!*(void *)(v12 + 1768))
    {
      v17 |= 1u;
      if (!*(unsigned char *)(v12 + 472)) {
        goto LABEL_54;
      }
      goto LABEL_50;
    }
    int v31 = *(unsigned __int8 *)(v12 + 474);
  }
  if (v31) {
    v17 |= 1u;
  }
LABEL_48:
  int v32 = *(unsigned __int8 *)(v12 + 472);
  if (*(unsigned char *)(v12 + 553))
  {
    if (!*(unsigned char *)(v12 + 472)) {
      goto LABEL_54;
    }
LABEL_50:
    if (!*(void *)(v12 + 1768))
    {
      v17 |= 2u;
      if (!*(unsigned char *)(v12 + 473)) {
        goto LABEL_61;
      }
LABEL_56:
      if (!*(void *)(v12 + 1768))
      {
LABEL_59:
        int v34 = v17 | 4;
        goto LABEL_62;
      }
      int v33 = *(unsigned __int8 *)(v12 + 476);
      goto LABEL_58;
    }
    int v32 = *(unsigned __int8 *)(v12 + 475);
  }
  if (v32) {
    v17 |= 2u;
  }
LABEL_54:
  int v33 = *(unsigned __int8 *)(v12 + 473);
  if (*(unsigned char *)(v12 + 553))
  {
    if (!*(unsigned char *)(v12 + 473)) {
      goto LABEL_61;
    }
    goto LABEL_56;
  }
LABEL_58:
  if (v33) {
    goto LABEL_59;
  }
LABEL_61:
  int v34 = v17;
LABEL_62:
  int v17 = *(_DWORD *)(v12 + 1096);
  if (v34 != v30)
  {
    uint64_t v35 = v34 & 3;
LABEL_69:
    if (a4)
    {
      CMTime v54 = *a2;
      CMTime lhs = v52;
      fpfs_CheckCanKeepUp(a1, (uint64_t)&v54, &lhs, v35, a3, a4, (uint64_t)&v49, a6);
      uint64_t v12 = DerivedStorage;
      uint64_t v36 = 0;
      *a4 = fminf(*a4, 0.9);
      goto LABEL_76;
    }
    goto LABEL_75;
  }
LABEL_63:
  uint64_t v35 = v17 & 3;
  if (!v14) {
    goto LABEL_69;
  }
  if (!*(unsigned char *)(v12 + 470))
  {
    CMTime v54 = *a2;
    CMTime lhs = v52;
    uint64_t v36 = fpfs_CheckCanKeepUp(a1, (uint64_t)&v54, &lhs, v35, a3, a4, (uint64_t)&v49, a6);
    uint64_t v12 = DerivedStorage;
    if (v36) {
      goto LABEL_76;
    }
    if (*(_DWORD *)(DerivedStorage + 1888) == 1)
    {
      if (dword_1E9350BB0)
      {
        LODWORD(rhs.value) = 0;
        LOBYTE(type.value) = 0;
        unsigned int v37 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT);
        uint64_t v36 = 1;
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        uint64_t v12 = DerivedStorage;
        goto LABEL_76;
      }
      goto LABEL_67;
    }
LABEL_75:
    uint64_t v36 = 0;
    goto LABEL_76;
  }
  if (a4) {
    *a4 = 1.0;
  }
LABEL_67:
  uint64_t v36 = 1;
LABEL_76:
  if (v49.flags)
  {
    uint64_t v38 = v12;
    uint64_t v39 = CMBaseObjectGetDerivedStorage();
    CMTime lhs = v49;
    CMTime rhs = *(CMTime *)(v38 + 1184);
    CMTimeSubtract(&v54, &lhs, &rhs);
    CMTime v49 = v54;
    float v40 = *(float *)(v39 + 108);
    if (v40 <= 2.0 && v40 >= 0.0 && (*(unsigned char *)(v45 + 420) & 1) != 0)
    {
      memset(&v54, 0, sizeof(v54));
      CMTime lhs = v49;
      CMTime rhs = *(CMTime *)(v45 + 408);
      CMTimeSubtract(&v54, &lhs, &rhs);
      memset(&lhs, 0, sizeof(lhs));
      CMTime rhs = v50;
      CMTimeMultiplyByRatio(&lhs, &rhs, 1, 2);
      CMTime rhs = v54;
      CMTime type = lhs;
      CMTimeSubtract(&time2, &rhs, &type);
      CMTime rhs = v52;
      if (CMTimeCompare(&rhs, &time2) < 0)
      {
        uint64_t v36 = 0;
        CMTime v51 = v54;
      }
    }
  }
  if (a5) {
    *a5 = v51;
  }
  return v36;
}

void fpfs_enqueuePrerollDidCompleteNotificationIfNeeded()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(DerivedStorage + 2208))
  {
    uint64_t v1 = DerivedStorage;
    CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!FigCFDictionarySetInt32())
    {
      fpfs_EnqueueNotification(*(const void **)v1, @"PrerollDidComplete", *(const void **)v1, Mutable);
      *(_DWORD *)(v1 + 2208) = 0;
    }
    if (Mutable)
    {
      CFRelease(Mutable);
    }
  }
}

void fpfsi_networkActivitySubmitMetricsForInitialStartupIfAvailable()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = *(void *)(DerivedStorage + 3240);
  if (v1)
  {
    double v2 = *(double *)(DerivedStorage + 2032);
    if (v2 != 0.0)
    {
      double v3 = *(double *)(DerivedStorage + 2992);
      if (v3 != 0.0)
      {
        double v4 = *(double *)(DerivedStorage + 2064);
        if (v4 != 0.0)
        {
          FigNWActivitySubmitMetricsForInitialStartup(v1, v2, v3, v4);
          int v5 = *(const void **)(DerivedStorage + 3240);
          if (v5)
          {
            CFRelease(v5);
            *(void *)(DerivedStorage + 3240) = 0;
          }
        }
      }
    }
  }
}

uint64_t fpfsi_SetCurrentTimeWithSeekID(uint64_t a1, long long *a2, uint64_t a3, char a4)
{
  long long v10 = *a2;
  uint64_t v11 = *((void *)a2 + 2);
  long long v8 = *MEMORY[0x1E4F1FA08];
  uint64_t v9 = *(void *)(MEMORY[0x1E4F1FA08] + 16);
  long long v6 = *MEMORY[0x1E4F1FA10];
  uint64_t v7 = *(void *)(MEMORY[0x1E4F1FA10] + 16);
  return fpfsi_SetCurrentTimeWithRangeAndSeekIDGuts(a1, &v10, a3, &v8, &v6, 0, 0, 0, 16842753, 0, a4);
}

uint64_t fpfsi_SetLastTimestampClientDidPauseOnContentSteeringMonitor(uint64_t a1, uint64_t a2)
{
  uint64_t valuePtr = a2;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(void *)(DerivedStorage + 120)) {
    return 0;
  }
  uint64_t v3 = DerivedStorage;
  CFNumberRef v4 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt64Type, &valuePtr);
  if (!v4) {
    return FigSignalErrorAt();
  }
  CFNumberRef v5 = v4;
  uint64_t v6 = *(void *)(v3 + 120);
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t, __CFString *, CFNumberRef))(v8 + 56);
  if (v9) {
    uint64_t v10 = v9(v6, @"AlternateFilterMonitorProperty_LastTimestampClientDidPause", v5);
  }
  else {
    uint64_t v10 = 4294954514;
  }
  CFRelease(v5);
  return v10;
}

void fpfs_PostNotificationFromDispatch(__CFString **a1)
{
  if (*a1 == @"PlayableRangeChanged") {
    unsigned int v2 = 3;
  }
  else {
    unsigned int v2 = 1;
  }
  if (v2 <= dword_1E9350BB0)
  {
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  CFNumberRef v4 = a1[1];
  if (v4) {
    CFRelease(v4);
  }
  CFNumberRef v5 = a1[2];
  if (v5) {
    CFRelease(v5);
  }
  free(a1);
}

void fpfsi_ResetPlaybackItem(const __CFArray *a1, int a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v49 = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = MEMORY[0x1E4F1F9F8];
  long long v50 = *MEMORY[0x1E4F1F9F8];
  long long v54 = *MEMORY[0x1E4F1F9F8];
  uint64_t v6 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  uint64_t v55 = v6;
  fpfs_tearDownManifoldsAndStream();
  for (uint64_t i = 0; i != 3; ++i)
  {
    uint64_t v8 = 0;
    char v9 = 1;
    do
    {
      char v10 = v9;
      StoreCurrentManifold(DerivedStorage, i, v8, 0);
      uint64_t v11 = DerivedStorage + i + 3 * v8;
      *(unsigned char *)(v11 + 471) = 0;
      uint64_t v12 = DerivedStorage + 24 * v8 + 8 * i;
      int v15 = *(const void **)(v12 + 176);
      char v14 = (void *)(v12 + 176);
      uint64_t v13 = v15;
      v14[119] = 0;
      if (v15)
      {
        CFRelease(v13);
        *char v14 = 0;
      }
      char v9 = 0;
      *(unsigned char *)(v11 + 512) = 0;
      uint64_t v8 = 1;
    }
    while ((v10 & 1) != 0);
    uint64_t v16 = DerivedStorage + 24 * i;
    *(_OWORD *)(v16 + 248) = v50;
    *(void *)(v16 + 264) = v6;
  }
  fpfs_ReleaseAndClearTimebaseTimer(*(OpaqueCMTimebase **)(DerivedStorage + 576), (dispatch_object_t *)(DerivedStorage + 1632));
  *(_OWORD *)(DerivedStorage + 1640) = v50;
  *(void *)(DerivedStorage + 1656) = v6;
  *(_OWORD *)(DerivedStorage + 1664) = v50;
  *(void *)(DerivedStorage + 1680) = v6;
  fpfs_ReleaseAndClearTimebaseTimer(*(OpaqueCMTimebase **)(DerivedStorage + 576), (dispatch_object_t *)(DerivedStorage + 2304));
  fpfs_ReleaseAndClearTimebaseTimer(*(OpaqueCMTimebase **)(DerivedStorage + 576), (dispatch_object_t *)(DerivedStorage + 2336));
  fpfsi_EmancipateItemFromMultichannelInhibitionsAndApplyFilters();
  *(_OWORD *)(DerivedStorage + 224) = v50;
  *(void *)(DerivedStorage + 240) = v6;
  fpfsi_setLastSeekTimeSet(DerivedStorage, v5);
  *(_OWORD *)(DerivedStorage + 408) = v50;
  *(void *)(DerivedStorage + 424) = v6;
  *(unsigned char *)(DerivedStorage + 460) = 0;
  *(unsigned char *)(DerivedStorage + 462) = 0;
  *(unsigned char *)(DerivedStorage + 464) = 0;
  *(_WORD *)(DerivedStorage + 468) = 0;
  uint64_t v17 = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(v17 + 470)) {
    *(unsigned char *)(v17 + 470) = 0;
  }
  *(_OWORD *)(DerivedStorage + 480) = v50;
  *(void *)(DerivedStorage + 496) = v6;
  *(_DWORD *)(DerivedStorage + 524) = 0;
  fpfsi_setPlaybackMonitorOkayToAttemptSwitchUp(DerivedStorage, 0);
  fpfsi_removeLayerSync();
  uint64_t v18 = CMBaseObjectGetDerivedStorage();
  fpfs_ClearRenderChains(a1, 255);
  *(void *)(v18 + 780) = 0;
  fpfs_cleanupAllImageQueues(a1, a2);
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  uint64_t v19 = *(const void **)(DerivedStorage + 840);
  if (v19)
  {
    CFRelease(v19);
    *(void *)(DerivedStorage + 840) = 0;
  }
  int v20 = (long long *)MEMORY[0x1E4F1F9F8];
  fpfsi_setItemRateTimebaseAndAnchor(0.0, (uint64_t)a1, 1, MEMORY[0x1E4F1F9F8], MEMORY[0x1E4F1F9F8]);
  int v21 = *(opaqueCMBufferQueue **)(DerivedStorage + 856);
  if (v21) {
    CMBufferQueueReset(v21);
  }
  uint64_t v22 = *(void *)(DerivedStorage + 1048);
  if (v22)
  {
    while (1)
    {
      uint64_t v23 = *(void *)(v22 + 8);
      if (!v23) {
        break;
      }
      uint64_t v24 = *(void *)(v23 + 16);
      fpfs_DeleteTrack(a1, v22);
      uint64_t v22 = v23;
      if ((v24 & 0x8000000000000000) == 0)
      {
        if (!*(void *)(DerivedStorage + 1048)) {
          goto LABEL_24;
        }
        uint64_t v22 = *(void *)(DerivedStorage + 1048);
        while (*(void *)(v22 + 16) != v24)
        {
          uint64_t v22 = *(void *)(v22 + 8);
          if (!v22)
          {
            uint64_t v22 = *(void *)(DerivedStorage + 1048);
            break;
          }
        }
      }
      if (!*(void *)(DerivedStorage + 1048)) {
        goto LABEL_24;
      }
    }
    fpfs_DeleteTrack(a1, v22);
  }
LABEL_24:
  uint64_t v25 = *(void *)(DerivedStorage + 1064);
  if (v25)
  {
    do
    {
      uint64_t v26 = *(void *)(v25 + 8);
      fpfs_DeleteTrack(a1, v25);
      if (!v26) {
        break;
      }
      uint64_t v25 = v26;
    }
    while (*(void *)(DerivedStorage + 1064));
  }
  fpfs_FreeDeadTracks((void *)DerivedStorage);
  if (fpfs_getNext(v49, 0) == a1) {
    fpfs_enqueuePrerollWasCancelledNotificationIfNeeded(a1);
  }
  fpfs_GetNextTimeToPlay(DerivedStorage, 0, (uint64_t)&v54);
  fpfs_EstablishTimebase(a1);
  *(_WORD *)(DerivedStorage + 592) = 256;
  *(_DWORD *)(DerivedStorage + 1096) = 1;
  *(_OWORD *)(DerivedStorage + 1104) = xmmword_194993040;
  *(void *)(DerivedStorage + 1176) = 0;
  *(unsigned char *)(DerivedStorage + 779) = 0;
  uint64_t v27 = MEMORY[0x1E4F1FA48];
  long long v28 = *MEMORY[0x1E4F1FA48];
  *(_OWORD *)(DerivedStorage + 1184) = *MEMORY[0x1E4F1FA48];
  uint64_t v29 = *(void *)(v27 + 16);
  *(void *)(DerivedStorage + 1200) = v29;
  uint64_t v30 = *(void *)(DerivedStorage + 96);
  long long v52 = v28;
  uint64_t v53 = v29;
  FigAlternatePlaybackBitrateMonitorSetPumpOffset(v30, (uint64_t)&v52);
  long long v31 = *v20;
  *(_OWORD *)(DerivedStorage + 1280) = *v20;
  uint64_t v32 = *((void *)v20 + 2);
  *(void *)(DerivedStorage + 1296) = v32;
  *(_OWORD *)(DerivedStorage + 1304) = v31;
  *(void *)(DerivedStorage + 1320) = v32;
  *(_OWORD *)(DerivedStorage + 1328) = v31;
  *(void *)(DerivedStorage + 1344) = v32;
  *(_OWORD *)(DerivedStorage + 1496) = v54;
  *(void *)(DerivedStorage + 1512) = v55;
  *(void *)(DerivedStorage + 1536) = v32;
  *(_OWORD *)(DerivedStorage + 1520) = v31;
  *(void *)(DerivedStorage + 2328) = v32;
  *(_OWORD *)(DerivedStorage + 2312) = v31;
  *(unsigned char *)(DerivedStorage + 2880) = 0;
  *(_WORD *)(DerivedStorage + 2448) = 0;
  *(_OWORD *)(DerivedStorage + 3276) = v31;
  *(void *)(DerivedStorage + 3292) = v32;
  *(_OWORD *)(DerivedStorage + 3304) = 0u;
  *(_OWORD *)(DerivedStorage + 3320) = v31;
  *(void *)(DerivedStorage + 3336) = v32;
  *(void *)(DerivedStorage + 1552) = 0x4024000000000000;
  long long v51 = v31;
  *(_OWORD *)(DerivedStorage + 1568) = v31;
  *(void *)(DerivedStorage + 1584) = v32;
  int v33 = *(const void **)(DerivedStorage + 1592);
  if (v33)
  {
    CFRelease(v33);
    *(void *)(DerivedStorage + 1592) = 0;
  }
  int v34 = *(const void **)(DerivedStorage + 1600);
  if (v34)
  {
    CFRelease(v34);
    *(void *)(DerivedStorage + 1600) = 0;
  }
  uint64_t v35 = *(const void **)(DerivedStorage + 1608);
  if (v35)
  {
    CFRelease(v35);
    *(void *)(DerivedStorage + 1608) = 0;
  }
  uint64_t v36 = *(const void **)(DerivedStorage + 1760);
  if (v36)
  {
    CFRelease(v36);
    *(void *)(DerivedStorage + 1760) = 0;
  }
  unsigned int v37 = *(const void **)(DerivedStorage + 1768);
  if (v37)
  {
    CFRelease(v37);
    *(void *)(DerivedStorage + 1768) = 0;
  }
  uint64_t v38 = *(uint64_t **)(DerivedStorage + 1616);
  if (v38)
  {
    do
    {
      uint64_t v39 = *v38;
      fpfsi_RemoveDateEntry(DerivedStorage, v38);
      uint64_t v38 = (uint64_t *)v39;
    }
    while (v39);
  }
  float v40 = *(const void **)(DerivedStorage + 1704);
  if (v40)
  {
    CFRelease(v40);
    *(void *)(DerivedStorage + 1704) = 0;
  }
  CMTime v41 = *(const void **)(DerivedStorage + 1728);
  if (v41)
  {
    CFRelease(v41);
    *(void *)(DerivedStorage + 1728) = 0;
  }
  unsigned int v42 = *(const void **)(DerivedStorage + 1712);
  if (v42)
  {
    CFRelease(v42);
    *(void *)(DerivedStorage + 1712) = 0;
  }
  uint64_t v43 = *(const void **)(DerivedStorage + 1744);
  if (v43)
  {
    CFRelease(v43);
    *(void *)(DerivedStorage + 1744) = 0;
  }
  fpfsi_TearDownIFramePrefetcher();
  unsigned int v44 = *(const void **)(DerivedStorage + 728);
  if (v44)
  {
    CFRelease(v44);
    *(void *)(DerivedStorage + 728) = 0;
  }
  uint64_t v45 = *(const void **)(DerivedStorage + 736);
  if (v45)
  {
    CFRelease(v45);
    *(void *)(DerivedStorage + 736) = 0;
  }
  __int16 v46 = *(const void **)(DerivedStorage + 2848);
  if (v46)
  {
    CFRelease(v46);
    *(void *)(DerivedStorage + 2848) = 0;
  }
  *(_DWORD *)(DerivedStorage + 1888) = 0;
  *(void *)(DerivedStorage + 1928) = 0;
  uint64_t v47 = *(const void **)(DerivedStorage + 2232);
  if (v47)
  {
    CFRelease(v47);
    *(void *)(DerivedStorage + 2232) = 0;
  }
  *(void *)(DerivedStorage + 2344) = 0;
  *(_DWORD *)(DerivedStorage + 2976) = 0;
  *(unsigned char *)(DerivedStorage + 3065) = 0;
  *(_OWORD *)(DerivedStorage + 608) = v51;
  *(void *)(DerivedStorage + 624) = v32;
  __int16 v48 = *(const void **)(DerivedStorage + 3400);
  if (v48)
  {
    CFRelease(v48);
    *(void *)(DerivedStorage + 3400) = 0;
  }
}

void fpfs_ResetAudioHardwareFormat(uint64_t a1)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  uint64_t v3 = DerivedStorage;
  if (DerivedStorage[67] && !DerivedStorage[63])
  {
    if (DerivedStorage[68])
    {
      uint64_t v4 = *MEMORY[0x1E4F75A28];
      if (!FigCFEqual())
      {
        uint64_t v5 = v3[67];
        if (v5)
        {
          uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v6)
          {
            uint64_t v7 = *(void (**)(uint64_t, void, uint64_t))(v6 + 56);
            if (v7) {
              v7(v5, *MEMORY[0x1E4F76418], v4);
            }
          }
        }
        if (!dword_1E9350BB0) {
          goto LABEL_13;
        }
        os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    if (dword_1E9350BB0)
    {
      char v9 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
LABEL_13:
    fpfs_setPreferredNumberOfAudioOutputChannels(a1, 0, 0);
  }
  char v10 = (const void *)v3[68];
  if (v10)
  {
    CFRelease(v10);
    v3[68] = 0;
  }
  uint64_t v11 = (const void *)v3[69];
  if (v11)
  {
    CFRelease(v11);
    v3[69] = 0;
  }
  *((unsigned char *)v3 + 560) = 0;
}

uint64_t fpfsi_removeLayerSync()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  uint64_t v1 = CMBaseObjectGetDerivedStorage();
  unsigned int v2 = (const void *)DerivedStorage[86];
  if (v2)
  {
    FigSyncMomentSourceDestroy(v2);
    DerivedStorage[86] = 0;
  }
  uint64_t result = DerivedStorage[84];
  if (result)
  {
    MEMORY[0x19970E910]();
    uint64_t v4 = DerivedStorage[85];
    if (v4)
    {
      FigLayerSynchronizerSetLayerArrayWithDeferredTransaction(v4, 0, *(const void **)(v1 + 816));
      uint64_t v5 = (const void *)DerivedStorage[85];
      if (v5)
      {
        CFRelease(v5);
        DerivedStorage[85] = 0;
      }
    }
    JUMPOUT(0x19970E930);
  }
  return result;
}

uint64_t fpfs_tearDownManifoldsAndStream()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  fpfs_haltStream();
  for (uint64_t i = 0; i != 3; ++i)
  {
    uint64_t v2 = 0;
    char v3 = 1;
    do
    {
      char v4 = v3;
      uint64_t result = *(void *)(DerivedStorage + 16 * i + 8 * v2 + 1000);
      if (result)
      {
        uint64_t result = FigManifoldGetFigBaseObject(result);
        if (result)
        {
          uint64_t v6 = result;
          uint64_t VTable = CMBaseObjectGetVTable();
          uint64_t v9 = *(void *)(VTable + 8);
          uint64_t result = VTable + 8;
          uint64_t v8 = v9;
          if (v9) {
            uint64_t v10 = v8;
          }
          else {
            uint64_t v10 = 0;
          }
          uint64_t v11 = *(uint64_t (**)(uint64_t))(v10 + 24);
          if (v11) {
            uint64_t result = v11(v6);
          }
        }
      }
      char v3 = 0;
      uint64_t v2 = 1;
    }
    while ((v4 & 1) != 0);
  }
  return result;
}

void fpfs_sendEmptyConfigurationToEachVideoTarget(uint64_t a1, const __CFArray *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  CFTypeRef v18 = 0;
  if (a2) {
    CFIndex Count = CFArrayGetCount(a2);
  }
  else {
    CFIndex Count = 0;
  }
  CFStringRef v6 = *(const __CFString **)(DerivedStorage + 80);
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  if (fpfs_createDataChannelConfigurationAndSetIdentifiers(a1, v6, 0, 0, 0, AllocatorForMedia, (uint64_t *)&v18, (CFMutableStringRef *)&cf))BOOL v8 = 1; {
  else
  }
    BOOL v8 = Count < 1;
  if (!v8)
  {
    CFIndex v9 = 0;
    CFIndex v10 = Count - 1;
    do
    {
      CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(a2, v9);
      CFTypeRef v12 = v18;
      uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v13) {
        uint64_t v14 = v13;
      }
      else {
        uint64_t v14 = 0;
      }
      int v15 = *(unsigned int (**)(const void *, CFTypeRef))(v14 + 72);
      if (!v15) {
        break;
      }
      if (v15(ValueAtIndex, v12)) {
        break;
      }
    }
    while (v10 != v9++);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v18) {
    CFRelease(v18);
  }
}

uint64_t fpfs_HaveHDRItem()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)(DerivedStorage + 80) && fpfsi_isPlayingHDR()) {
    return 1;
  }
  for (CFIndex i = 0; ; ++i)
  {
    CFArrayRef Count = *(const __CFArray **)(DerivedStorage + 72);
    if (Count) {
      CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
    }
    if (i >= (uint64_t)Count) {
      break;
    }
    CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 72), i);
    if (fpfsi_isPlayingHDR()) {
      return 1;
    }
  }
  return 0;
}

CFIndex fpfs_PostRemovedFromPlayQueueNotifications(const void *a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 467))
  {
    CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    CFDictionaryRef v6 = CFDictionaryCreate(AllocatorForMedia, (const void **)&kFigPlaybackItemParameter_AsRequested, MEMORY[0x1E4F1CFD0], 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    fpfs_EnqueueNotification(a1, @"ItemWasRemovedFromPlayQueue", a2, v6);
    if (v6) {
      CFRelease(v6);
    }
  }
  else
  {
    fpfs_EnqueueNotification(a1, @"ItemWasRemovedFromPlayQueue", a2, 0);
  }
  *(unsigned char *)(DerivedStorage + 467) = 0;

  return fpfs_PostPlayQueueNotificationIfHungry(a1);
}

uint64_t fpfsi_copyPerformanceDictionary(uint64_t a1, const __CFAllocator *a2, __CFDictionary **a3)
{
  CMTimeValue value = 0;
  if (!a1)
  {
    uint64_t v11 = 0;
    uint64_t v10 = 0;
    goto LABEL_77;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v45 = 0;
  uint64_t v7 = CMBaseObjectGetDerivedStorage();
  if (!*(void *)(DerivedStorage + 1896))
  {
    CFMutableDictionaryRef Mutable = 0;
LABEL_7:
    if (*(void *)(DerivedStorage + 1904))
    {
      CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
      CFMutableArrayRef MutableCopy = CFArrayCreateMutableCopy(AllocatorForMedia, 0, *(CFArrayRef *)(DerivedStorage + 1904));
      if (!MutableCopy) {
        goto LABEL_78;
      }
    }
    else
    {
      CFMutableArrayRef MutableCopy = 0;
    }
    uint64_t RenderingTrackofType = fpfs_FirstRenderingTrackofType(a1, 1986618469);
    if (RenderingTrackofType)
    {
      uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(*(void *)(*(void *)(RenderingTrackofType + 96) + 32));
      uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v17 = v16 ? v16 : 0;
      CFTypeRef v18 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, void **))(v17 + 48);
      if (v18)
      {
        int v19 = v18(FigBaseObject, @"PerformanceDictionary", a2, &value);
        int v20 = value;
        if (!v19 && value != 0)
        {
          if (!Mutable)
          {
            CFAllocatorRef v22 = (const __CFAllocator *)FigGetAllocatorForMedia();
            CFMutableDictionaryRef Mutable = CFArrayCreateMutable(v22, 0, MEMORY[0x1E4F1D510]);
            if (!Mutable) {
              goto LABEL_78;
            }
            int v20 = value;
          }
          CFArrayAppendValue(Mutable, v20);
          if (value)
          {
            CFRelease(value);
            CMTimeValue value = 0;
          }
        }
      }
    }
    uint64_t v23 = fpfs_FirstRenderingTrackofType(a1, 1936684398);
    if (!v23)
    {
      uint64_t v11 = CFDictionaryCreateMutable(a2, 20, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (!v11) {
        goto LABEL_78;
      }
LABEL_48:
      if (Mutable) {
        CFDictionarySetValue(v11, @"VideoTracks", Mutable);
      }
      if (MutableCopy) {
        CFDictionarySetValue(v11, @"AudioTracks", MutableCopy);
      }
      if (*(unsigned char *)(v7 + 462)) {
        int v34 = (double *)(v7 + 464);
      }
      else {
        int v34 = (double *)(DerivedStorage + 752);
      }
      if (*(unsigned char *)(v7 + 462)) {
        uint64_t v35 = (double *)(v7 + 472);
      }
      else {
        uint64_t v35 = (double *)(DerivedStorage + 760);
      }
      if (*v34 != *MEMORY[0x1E4F1DB30] || *v35 != *(double *)(MEMORY[0x1E4F1DB30] + 8)) {
        FigCFDictionarySetCGSize();
      }
      CFDictionaryRef DictionaryRepresentation = CGSizeCreateDictionaryRepresentation(*(CGSize *)(DerivedStorage + 2488));
      if (DictionaryRepresentation)
      {
        CFDictionaryRef v38 = DictionaryRepresentation;
        FigCFDictionarySetValue();
        CFRelease(v38);
      }
      uint64_t Dimensions = fpfsi_GetDimensions(a1, (float *)&v45 + 1, (float *)&v45);
      if (Dimensions)
      {
        uint64_t v10 = Dimensions;
      }
      else
      {
        v47.double width = *((float *)&v45 + 1);
        v47.double height = *(float *)&v45;
        CFDictionaryRef v40 = CGSizeCreateDictionaryRepresentation(v47);
        if (v40)
        {
          CFDictionaryRef v41 = v40;
          FigCFDictionarySetValue();
          CFRelease(v41);
        }
        CMTime v44 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
        fpfs_GetItemBufferedDuration(a1, &v44, 0, 0);
        if (v44.flags)
        {
          CMTime v43 = v44;
          CMTimeGetSeconds(&v43);
          FigCFDictionarySetDouble();
        }
        FigCFDictionarySetInt64();
        FigCFDictionarySetInt64();
        uint64_t v10 = 0;
      }
      goto LABEL_71;
    }
    uint64_t v24 = (uint64_t *)v23;
    uint64_t v25 = FigRenderPipelineGetFigBaseObject(*(void *)(*(void *)(v23 + 96) + 32));
    uint64_t v26 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v26) {
      uint64_t v27 = v26;
    }
    else {
      uint64_t v27 = 0;
    }
    long long v28 = *(unsigned int (**)(uint64_t, __CFString *, const __CFAllocator *, void **))(v27 + 48);
    if (v28)
    {
      if (!v28(v25, @"PerformanceDictionary", a2, &value))
      {
        uint64_t v29 = value;
        if (value)
        {
          if (!MutableCopy)
          {
            CFAllocatorRef v30 = (const __CFAllocator *)FigGetAllocatorForMedia();
            CFMutableArrayRef MutableCopy = CFArrayCreateMutable(v30, 0, MEMORY[0x1E4F1D510]);
            if (!MutableCopy) {
              goto LABEL_78;
            }
            uint64_t v29 = value;
          }
          CFArrayAppendValue(MutableCopy, v29);
          if (value)
          {
            CFRelease(value);
            CMTimeValue value = 0;
          }
        }
      }
    }
    CFMutableDictionaryRef v31 = CFDictionaryCreateMutable(a2, 20, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (v31)
    {
      uint64_t v11 = v31;
      int AudioFormatDescriptionSpatializationEligibility = FPSupport_GetAudioFormatDescriptionSpatializationEligibility(v24[5], 0);
      if (AudioFormatDescriptionSpatializationEligibility == 1)
      {
        if (!fpfsi_IsSpatializationAllowed(*v24)) {
          fpfsi_IsSpatializationAllowed(*v24);
        }
      }
      else if (AudioFormatDescriptionSpatializationEligibility != 2 {
             || !fpfsi_IsSpatializationAllowed(*v24))
      }
      {
        FigCFDictionarySetValue();
        goto LABEL_48;
      }
      uint64_t SInt32 = (const void *)FigCFNumberCreateSInt32();
      FigCFDictionarySetValue();
      if (SInt32) {
        CFRelease(SInt32);
      }
      goto LABEL_48;
    }
LABEL_78:
    uint64_t v10 = FigSignalErrorAt();
    uint64_t v11 = 0;
    goto LABEL_71;
  }
  CFAllocatorRef v8 = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFMutableDictionaryRef Mutable = CFArrayCreateMutableCopy(v8, 0, *(CFArrayRef *)(DerivedStorage + 1896));
  if (Mutable) {
    goto LABEL_7;
  }
  uint64_t v10 = FigSignalErrorAt();
  uint64_t v11 = 0;
  CFMutableArrayRef MutableCopy = 0;
LABEL_71:
  if (value)
  {
    CFRelease(value);
    CMTimeValue value = 0;
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
LABEL_77:
  *a3 = v11;
  return v10;
}

uint64_t fpfsi_isPlayingHDR()
{
  uint64_t result = *(void *)(CMBaseObjectGetDerivedStorage() + 1704);
  if (result) {
    return FigAlternateGetVideoRange(result) > 1;
  }
  return result;
}

CFIndex fpfs_PostPlayQueueNotificationIfHungry(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = *(void *)(DerivedStorage + 80);
  CFIndex result = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 72));
  if (v3) {
    uint64_t v5 = result + 1;
  }
  else {
    uint64_t v5 = result;
  }
  if (v5 <= 1)
  {
    return fpfs_EnqueueNotification(a1, @"PlayQueueBecameHungry", a1, 0);
  }
  return result;
}

BOOL fpfs_SubstreamNeedsFlowControl(uint64_t a1, unsigned int a2)
{
  if (((*(_DWORD *)(a1 + 1096) >> a2) & 1) == 0) {
    return 0;
  }
  int v2 = *(unsigned __int8 *)(a1 + a2 + 471);
  if (*(unsigned char *)(a1 + 553) && *(unsigned char *)(a1 + a2 + 471))
  {
    if (*(void *)(a1 + 1768)) {
      int v2 = *(unsigned __int8 *)(a1 + a2 + 474);
    }
    else {
      int v2 = 1;
    }
  }
  return v2 == 0;
}

uint64_t fpfsi_PlaybackHasBufferedBeyondTimeToPauseBuffering(uint64_t a1)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (result)
  {
    long long v3 = *(_OWORD *)(result + 1424);
    uint64_t v4 = *(void *)(result + 1440);
    return fpfsi_PlaybackHasBufferedBeyondTime(a1, (uint64_t)&v3) != 0;
  }
  return result;
}

void fpfs_needsMoreTimerProc(uint64_t a1)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  CFTypeRef v35 = 0;
  CFTypeRef v36 = 0;
  if (!fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer(a1, &v35, &v36))
  {
    CFTypeRef v1 = v36;
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    CFTypeRef v3 = v35;
    id v4 = *(id *)(CMBaseObjectGetDerivedStorage() + 776);
    voucher_adopt();
    uint64_t v5 = CMBaseObjectGetDerivedStorage();
    if ((*(unsigned char *)(DerivedStorage + 1676) & 1) == 0)
    {
LABEL_10:
      uint64_t v12 = MEMORY[0x1E4F1F9F8];
      *(_OWORD *)(DerivedStorage + 1640) = *MEMORY[0x1E4F1F9F8];
      *(void *)(DerivedStorage + 1656) = *(void *)(v12 + 16);
      memset(&time2, 0, sizeof(time2));
      memset(&rhs, 0, sizeof(rhs));
      fpfs_GetTime(DerivedStorage, (uint64_t)&rhs);
      if (dword_1E9350BB0)
      {
        LODWORD(v41.value) = 0;
        LOBYTE(v40.value) = 0;
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int value = v41.value;
        if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, v40.value)) {
          unsigned int v15 = value;
        }
        else {
          unsigned int v15 = value & 0xFFFFFFFE;
        }
        if (v15)
        {
          if (v3) {
            uint64_t v16 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
          }
          else {
            uint64_t v16 = "";
          }
          if (v1) {
            uint64_t v17 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
          }
          else {
            uint64_t v17 = "";
          }
          CMTime time = rhs;
          Float64 Seconds = CMTimeGetSeconds(&time);
          LODWORD(lhs.value) = 136316418;
          *(CMTimeValue *)((char *)&lhs.value + 4) = (CMTimeValue)"fpfs_needsMoreTimerProc";
          LOWORD(lhs.flags) = 2048;
          *(void *)((char *)&lhs.flags + 2) = v3;
          HIWORD(lhs.epoch) = 2082;
          uint64_t v45 = v16;
          __int16 v46 = 2048;
          CFTypeRef v47 = v1;
          __int16 v48 = 2082;
          uint64_t v49 = v17;
          __int16 v50 = 2048;
          Float64 v51 = Seconds;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (*(void *)(DerivedStorage + 936)) {
        fpfs_CheckPrebufferedLevels(&time, v1, 0, -1, 1);
      }
      uint64_t v19 = *(void *)(DerivedStorage + 1704);
      if (v19 && FigAlternateIsIFrameOnly(v19) && *(unsigned char *)(DerivedStorage + 1565))
      {
        if (*(unsigned char *)(DerivedStorage + 1220))
        {
          CMTime time = *(CMTime *)(DerivedStorage + 1208);
          CMTime lhs = *(CMTime *)(DerivedStorage + 1184);
          CMTimeSubtract(&time2, &time, &lhs);
        }
        else
        {
          CMTime time2 = *(CMTime *)(DerivedStorage + 1520);
        }
        fpfs_CurrentSubStreamBufferedDuration(*(unsigned __int8 *)(DerivedStorage + 1112), (uint64_t)&v34);
        CMTime time = time2;
        fpfs_RequestNextIFrameStepUnlocked(v1, &time, &v34);
      }
      fpfsi_TrimCachedSamplesFromItem((uint64_t)v1);
LABEL_34:

      fpfs_UnlockAndPostNotificationsWithCaller(v3);
      CFRelease(v1);
      CFRelease(v3);
      return;
    }
    CFDictionaryRef v6 = (uint64_t *)v5;
    uint64_t v7 = (_OWORD *)(DerivedStorage + 1664);
    uint64_t v8 = CMBaseObjectGetDerivedStorage();
    memset(&time, 0, sizeof(time));
    fpfs_GetTime((uint64_t)v6, (uint64_t)&time);
    float v9 = *(float *)(v8 + 108);
    if (v9 >= 0.0)
    {
      CMTime lhs = time;
      *(_OWORD *)&rhs.unsigned int value = kTimerScheduleTime;
      rhs.CMTimeEpoch epoch = 0;
      CMTimeAdd(&time2, &lhs, &rhs);
      *(_OWORD *)&lhs.unsigned int value = *v7;
      lhs.CMTimeEpoch epoch = *(void *)(DerivedStorage + 1680);
      if (CMTimeCompare(&lhs, &time2) >= 1)
      {
        uint64_t v10 = (OpaqueCMTimebase *)v6[72];
        uint64_t v11 = *(NSObject **)(DerivedStorage + 1632);
        *(_OWORD *)&lhs.unsigned int value = *v7;
        lhs.CMTimeEpoch epoch = *(void *)(DerivedStorage + 1680);
        CMTimebaseSetTimerDispatchSourceNextFireTime(v10, v11, &lhs, 1u);
        fpfs_GetTime((uint64_t)v6, (uint64_t)&v41);
        *(_OWORD *)&lhs.unsigned int value = *v7;
        lhs.CMTimeEpoch epoch = *(void *)(DerivedStorage + 1680);
        if (CMTimeCompare(&lhs, &v41) <= 0) {
          goto LABEL_10;
        }
LABEL_37:
        *(_OWORD *)(DerivedStorage + 1640) = *v7;
        *(void *)(DerivedStorage + 1656) = *(void *)(DerivedStorage + 1680);
        uint64_t v22 = MEMORY[0x1E4F1F9F8];
        *uint64_t v7 = *MEMORY[0x1E4F1F9F8];
        *(void *)(DerivedStorage + 1680) = *(void *)(v22 + 16);
        if (dword_1E9350BB0)
        {
          LODWORD(rhs.value) = 0;
          os_log_type_t type = OS_LOG_TYPE_DEFAULT;
          uint64_t v23 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v24 = rhs.value;
          if (os_log_type_enabled(v23, type)) {
            unsigned int v25 = v24;
          }
          else {
            unsigned int v25 = v24 & 0xFFFFFFFE;
          }
          if (v25)
          {
            uint64_t v26 = *v6;
            if (*v6) {
              uint64_t v27 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
            }
            else {
              uint64_t v27 = "";
            }
            int v33 = v27;
            if (v1) {
              long long v28 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
            }
            else {
              long long v28 = "";
            }
            uint64_t v32 = v28;
            fpfs_GetTime((uint64_t)v6, (uint64_t)&v37);
            Float64 v29 = CMTimeGetSeconds(&v37);
            if (v6 == (uint64_t *)DerivedStorage) {
              CFAllocatorRef v30 = "needsMoreTimer";
            }
            else {
              CFAllocatorRef v30 = "testTimer";
            }
            CMTime time = *(CMTime *)(DerivedStorage + 1640);
            Float64 v31 = CMTimeGetSeconds(&time);
            LODWORD(lhs.value) = 136316930;
            *(CMTimeValue *)((char *)&lhs.value + 4) = (CMTimeValue)"fpfs_deferTimeTillDryTimer";
            LOWORD(lhs.flags) = 2048;
            *(void *)((char *)&lhs.flags + 2) = v26;
            HIWORD(lhs.epoch) = 2082;
            uint64_t v45 = v33;
            __int16 v46 = 2048;
            CFTypeRef v47 = v1;
            __int16 v48 = 2082;
            uint64_t v49 = v32;
            __int16 v50 = 2048;
            Float64 v51 = v29;
            __int16 v52 = 2082;
            uint64_t v53 = v30;
            __int16 v54 = 2048;
            Float64 v55 = v31;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        goto LABEL_34;
      }
      float v9 = *(float *)(v8 + 108);
    }
    if (v9 >= 0.0) {
      goto LABEL_10;
    }
    CMTime lhs = time;
    *(_OWORD *)&rhs.unsigned int value = kTimerScheduleTime;
    rhs.CMTimeEpoch epoch = 0;
    CMTimeSubtract(&v40, &lhs, &rhs);
    *(_OWORD *)&lhs.unsigned int value = *v7;
    lhs.CMTimeEpoch epoch = *(void *)(DerivedStorage + 1680);
    if ((CMTimeCompare(&lhs, &v40) & 0x80000000) == 0) {
      goto LABEL_10;
    }
    int v20 = (OpaqueCMTimebase *)v6[72];
    int v21 = *(NSObject **)(DerivedStorage + 1632);
    *(_OWORD *)&lhs.unsigned int value = *v7;
    lhs.CMTimeEpoch epoch = *(void *)(DerivedStorage + 1680);
    CMTimebaseSetTimerDispatchSourceNextFireTime(v20, v21, &lhs, 1u);
    fpfs_GetTime((uint64_t)v6, (uint64_t)&v39);
    *(_OWORD *)&lhs.unsigned int value = *v7;
    lhs.CMTimeEpoch epoch = *(void *)(DerivedStorage + 1680);
    if (CMTimeCompare(&lhs, &v39) >= 0) {
      goto LABEL_10;
    }
    goto LABEL_37;
  }
}

void fpfs_deferredSynchronousFrameEnqueued(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  fpfs_LockMutexWithCaller(a2);
  *(_DWORD *)(DerivedStorage + 744) = 0;
  FigMemoryBarrier();
  if (!*(unsigned char *)(DerivedStorage + 51))
  {
    CFArrayRef v4 = *(const __CFArray **)(DerivedStorage + 384);
    if (v4)
    {
      if (CFArrayGetCount(v4) >= 1)
      {
        CFTypeRef cf = 0;
        uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
        FigDeferredTransactionCreate(AllocatorForMedia, (uint64_t *)&cf);
        FPSupport_AppendDeferredTransactionChangeForCallingSetContentsChangedOnLayers(cf, *(CFArrayRef *)(DerivedStorage + 384), (uint64_t)"fpfs_deferredSynchronousFrameEnqueued");
        FigDeferredTransactionCommit((uint64_t)cf);
        if (cf) {
          CFRelease(cf);
        }
      }
    }
  }
  fpfs_UnlockAndPostNotificationsWithCaller(a2);
  CFRelease(a2);
}

uint64_t fpfsi_deferredCompletedDecodeForPreroll(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  CFTypeRef v27 = 0;
  CFTypeRef cf = 0;
  if (fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer(a2, &cf, &v27))
  {
    CFTypeRef v7 = cf;
    if (!cf) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  CFTypeRef v9 = v27;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int valuePtr = 0;
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a5, @"RequestID");
  if (Value)
  {
    CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
    uint64_t v12 = *(void *)(DerivedStorage + 1048);
    if (v12)
    {
      while (1)
      {
        if (valuePtr == *(_DWORD *)(v12 + 16))
        {
          uint64_t v13 = *(void *)(v12 + 96);
          if (v13)
          {
            if (*(void *)(v13 + 32) == a4 && *(unsigned char *)(v12 + 104)) {
              break;
            }
          }
        }
        uint64_t v12 = *(void *)(v12 + 8);
        if (!v12) {
          goto LABEL_14;
        }
      }
      uint64_t RenderingTrackofType = fpfs_FirstRenderingTrackofType((uint64_t)v9, 1986618469);
      int v15 = *(_DWORD *)(DerivedStorage + 332);
      if (dword_1E9350BB0)
      {
        int v21 = *(_DWORD *)(DerivedStorage + 332);
        LODWORD(v25.value) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        LOBYTE(v15) = v21;
      }
      *(unsigned char *)(v12 + 104) = 0;
      if (*(_DWORD *)(v12 + 32) == 1986618469 && (v15 & 1) != 0 && v12 == RenderingTrackofType)
      {
        memset(&v25, 0, sizeof(v25));
        fpfs_GetNextTimeToPlay(DerivedStorage, 0, (uint64_t)&v25);
        if (*(unsigned char *)(v12 + 184))
        {
          dictionaryRepresentation[0].unsigned int value = 0;
          uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
          if (!FigRenderPipelineCopyProperty(a4, @"EndPresentationTimeForDecodedSamples", AllocatorForMedia, (uint64_t)dictionaryRepresentation))
          {
            CMTimeMakeFromDictionary(&v25, (CFDictionaryRef)dictionaryRepresentation[0].value);
            CFRelease((CFTypeRef)dictionaryRepresentation[0].value);
          }
        }
        if (v25.flags)
        {
          if (dword_1E9350BB0)
          {
            *(_DWORD *)os_log_type_t type = 0;
            os_log_type_t v23 = OS_LOG_TYPE_DEFAULT;
            CFTypeRef v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          dictionaryRepresentation[0] = v25;
          fpfs_JumpToTime(v9, dictionaryRepresentation, 0);
        }
        if (!*(void *)(DerivedStorage + 1600))
        {
          CFTypeRef v19 = cf;
          int v20 = *(_DWORD *)(DerivedStorage + 2200);
          if (!v20) {
            int v20 = *(_DWORD *)(DerivedStorage + 2204);
          }
          fpfs_GetTime(DerivedStorage, (uint64_t)&v22);
          fpfs_SeekDidComplete(v19, v9, v20, 0, 0, &v22);
          *(_DWORD *)(DerivedStorage + 2200) = 0;
        }
      }
      fpfs_CheckPrebufferedLevels(dictionaryRepresentation, v9, 1, -1, 0);
    }
  }
LABEL_14:
  CFTypeRef v7 = cf;
  fpfs_UnlockAndPostNotificationsWithCaller(cf);
  if (v7) {
LABEL_3:
  }
    CFRelease(v7);
LABEL_4:
  if (v27) {
    CFRelease(v27);
  }
  return FigRetainProxyRelease();
}

uint64_t fpfsi_deferredRenderPipelineLostDecoderState(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  v13[25] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  CFTypeRef v12 = 0;
  v13[0] = 0;
  if (!fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer(a2, v13, &v12))
  {
    CFTypeRef v5 = v13[0];
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    CFTypeRef v7 = v12;
    if (v12 == *(CFTypeRef *)(DerivedStorage + 80))
    {
      CFArrayRef v8 = (const __CFArray *)v12;
      if (dword_1E9350BB0)
      {
        uint64_t v9 = DerivedStorage;
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        CFArrayRef v8 = *(const __CFArray **)(v9 + 80);
      }
      fpfs_stopResetDisturbReprepareAndResume(v5, v8, 0);
    }
    fpfs_UnlockAndPostNotificationsWithCaller(v5);
    if (v5) {
      CFRelease(v5);
    }
    if (v7) {
      CFRelease(v7);
    }
  }
  if (a4) {
    CFRelease(a4);
  }
  return FigRetainProxyRelease();
}

void fpfs_BufferChomper(opaqueCMBufferQueue **a1)
{
  int v2 = *a1;
  int v3 = 100;
  while (1)
  {
    CMBufferRef v4 = CMBufferQueueDequeueAndRetain(v2);
    if (!v4) {
      break;
    }
    CFRelease(v4);
    if (!--v3)
    {
      if (CMBufferQueueGetBufferCount(v2) >= 1)
      {
        dispatch_time_t v5 = dispatch_time(0, 20000000);
        global_CMBufferQueueRef queue = dispatch_get_global_queue(-2, 0);
        dispatch_after_f(v5, global_queue, a1, (dispatch_function_t)fpfs_BufferChomper);
        return;
      }
      break;
    }
  }
  if (v2) {
    CFRelease(v2);
  }
  dispatch_time_t v7 = dispatch_time(0, 3000000000);
  CFArrayRef v8 = dispatch_get_global_queue(-2, 0);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __fpfs_BufferChomper_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = a1;
  dispatch_after(v7, v8, block);
}

uint64_t fpfs_GetMinSampleInStartupQueue(opaqueCMSampleBuffer *a1, CMSampleBufferRef *a2)
{
  memset(&v8, 0, sizeof(v8));
  CMSampleBufferGetPresentationTimeStamp(&v8, a1);
  memset(&v7, 0, sizeof(v7));
  CMSampleBufferGetDecodeTimeStamp(&v7, a1);
  if (fpfs_IsMarkerOnly(a1)) {
    return 0;
  }
  if (v7.flags)
  {
    if (!*a2 || (CMSampleBufferGetPresentationTimeStamp(&time2, *a2), CMTime v5 = v8, CMTimeCompare(&v5, &time2) < 0)) {
      *a2 = a1;
    }
    if (fpfs_IsVideoSync(a1)) {
      return 4294954433;
    }
    else {
      return 0;
    }
  }
  else
  {
    *a2 = a1;
    return 4294954433;
  }
}

uint64_t __fpfsi_waitForVenueDescriptionProcessing_block_invoke()
{
  uint64_t result = FigGetCFPreferenceNumberWithDefault();
  fpfsi_waitForVenueDescriptionProcessing_checkForVenueDescriptionProcessing = result;
  return result;
}

void fpfs_PostNotificationListFromDispatch(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    do
    {
      uint64_t v3 = *(void *)(v2 + 32);
      fpfs_PostNotificationFromDispatch((__CFString **)v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }

  free(a1);
}

void fpfs_PlayerResourceBudgetChanged(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  fpfs_LockMutexWithCaller((uint64_t)a2);
  if (!*(unsigned char *)(DerivedStorage + 51) && *(void *)(DerivedStorage + 80)) {
    fpfs_PlayQueueCallForEachItem((uint64_t)a2, (uint64_t (*)(const __CFArray *, uint64_t))fpfsi_HandleResourceBudgetChange, 0);
  }

  fpfs_UnlockAndPostNotificationsWithCaller(a2);
}

uint64_t fpfsi_HandleResourceBudgetChange(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(void *)(DerivedStorage + 40)) {
    return 0;
  }
  uint64_t v3 = DerivedStorage;
  uint64_t v4 = CMBaseObjectGetDerivedStorage();
  if (!*(void *)(v4 + 40) || !*(unsigned char *)(v4 + 48) || !*(unsigned char *)(v4 + 49)) {
    return 0;
  }
  uint64_t result = fpfsi_SetupResolutionCapFilter(a1);
  if (!result)
  {
    CFDictionaryRef v6 = *(const void **)(v3 + 40);
    return FigAlternateSelectionBossApplyFilters(v6);
  }
  return result;
}

uint64_t fpfs_handleAvailableAudioFormatChange_Apply(const __CFString *a1, unsigned __int8 *a2)
{
  if (a2) {
    LODWORD(a2) = *a2;
  }
  return fpfsi_handleAvailableAudioFormatChange(a1, (int)a2, 0);
}

uint64_t fpfsi_handleAvailableAudioFormatChange(const __CFString *a1, int a2, char *a3)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMTime v7 = *(const void **)DerivedStorage;
  uint64_t v8 = CMBaseObjectGetDerivedStorage();
  CFArrayRef theArray = 0;
  if (*(void *)(DerivedStorage + 40))
  {
    uint64_t v9 = v8;
    if (*(_DWORD *)(v8 + 32))
    {
      if (*(void *)(DerivedStorage + 1704))
      {
        *(void *)uint64_t v53 = 0;
        uint64_t updated = fpfsi_SetupSupportedAudioFormatFilter((uint64_t)a1);
        if (updated) {
          goto LABEL_120;
        }
        uint64_t updated = fpfsi_CreateAndAddCombinedAudioPreferenceFilter((uint64_t)a1);
        if (updated) {
          goto LABEL_120;
        }
        uint64_t updated = fpfsi_ConfigureAlternateSelectionBossForHighestAtmosFiltering();
        if (updated) {
          goto LABEL_120;
        }
        uint64_t updated = fpfsi_ConfigureAlternateSelectionBossPreferExclusiveAudioPassthroughFiltering();
        if (updated) {
          goto LABEL_120;
        }
        fpfsi_EmancipateItemFromMultichannelInhibitionsAndApplyFilters();
        uint64_t v11 = *(void *)(DerivedStorage + 40);
        uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
        uint64_t updated = FigAlternateSelectionBossCopyProperty(v11, @"FilteredAlternateList", AllocatorForMedia, &theArray);
        if (updated) {
          goto LABEL_120;
        }
        if (!theArray || CFArrayGetCount(theArray) < 1)
        {
          uint64_t v27 = FigSignalErrorAt();
          if (!v27) {
            goto LABEL_31;
          }
          goto LABEL_30;
        }
        uint64_t updated = fpfsi_UpdateValidAlternateListAndSuggestAnAlternate((uint64_t)a1, theArray, v53);
        if (updated)
        {
LABEL_120:
          uint64_t v27 = updated;
LABEL_30:
          fpfs_StopPlayingItemWithOSStatus(v9, (uint64_t)a1, v27);
          goto LABEL_31;
        }
        int v49 = a2;
        if (!FigAlternateIsIFrameOnly(*(void *)(DerivedStorage + 1704))
          && !fpfs_isAlternateValid((uint64_t)a1, *(void *)(DerivedStorage + 1704)))
        {
          int v52 = 0;
          int v13 = *(_DWORD *)(DerivedStorage + 1096);
          memset(&v51, 0, sizeof(v51));
          fpfs_GetNextTimeToPlay(DerivedStorage, 0, (uint64_t)&v51);
          long long v48 = *MEMORY[0x1E4F1F9F8];
          *(_OWORD *)&lhs.unsigned int value = v48;
          CMTimeEpoch v14 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
          lhs.CMTimeEpoch epoch = v14;
          *(_OWORD *)&rhs.unsigned int value = v48;
          rhs.CMTimeEpoch epoch = v14;
          fpfs_setRateInternal((uint64_t)v7, a1, (uint64_t)&lhs, (uint64_t)&rhs, 0.0);
          *(unsigned char *)(DerivedStorage + 464) = 0;
          int v15 = *(const void **)v53;
          CMTime lhs = v51;
          CMTime rhs = *(CMTime *)(DerivedStorage + 1184);
          CMTimeAdd(&v50, &lhs, &rhs);
          CMTime lhs = v50;
          *(_OWORD *)&rhs.unsigned int value = v48;
          rhs.CMTimeEpoch epoch = v14;
          uint64_t updated = fpfs_SetAlternateWithContext((uint64_t)v7, a1, v15, 1u, &lhs, (uint64_t)&rhs, 0, &v52, 0, 7u);
          if (!updated)
          {
            char v16 = v52;
            char v17 = v52;
            if (dword_1E9350BB0)
            {
              os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              char v17 = v52;
            }
            fpfs_DeleteTracksWhenSubstreamChanges(a1, v13, v17);
            fpfs_setUnlikelyToKeepUpAndRanDry(a1);
            char v19 = 1;
            if ((v16 & 2) != 0)
            {
LABEL_110:
              uint64_t v27 = 0;
              if (!a3) {
                goto LABEL_112;
              }
              goto LABEL_111;
            }
LABEL_19:
            uint64_t RenderingTrackofType = fpfs_FirstRenderingTrackofType((uint64_t)a1, 1936684398);
            int SpatializationConfiguration = fpfsi_GetSpatializationConfiguration((uint64_t)a1);
            if (!RenderingTrackofType
              || fpfs_ShouldEnableSpatializationForTrack(RenderingTrackofType) == (SpatializationConfiguration == 1))
            {
              goto LABEL_39;
            }
            if (!dword_1E9350BB0)
            {
              int v49 = 1;
              goto LABEL_39;
            }
            LODWORD(v51.value) = 0;
            v53[0] = OS_LOG_TYPE_DEFAULT;
            CMTime v22 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int value = v51.value;
            if (os_log_type_enabled(v22, v53[0])) {
              unsigned int v24 = value;
            }
            else {
              unsigned int v24 = value & 0xFFFFFFFE;
            }
            if (!v24)
            {
LABEL_38:
              int v49 = 1;
              fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_39:
              CMBaseObjectGetDerivedStorage();
              CMBaseObjectGetDerivedStorage();
              if (fpfs_FirstRenderingTrackofType((uint64_t)a1, 1936684398))
              {
                BOOL v28 = 1;
              }
              else
              {
                uint64_t TrackWithFormatDescriptionOfType = fpfs_FirstTrackWithFormatDescriptionOfType((uint64_t)a1, 1936684398);
                if (TrackWithFormatDescriptionOfType) {
                  BOOL v28 = *(_DWORD *)(TrackWithFormatDescriptionOfType + 152) == 6;
                }
                else {
                  BOOL v28 = 0;
                }
              }
              if (*(void *)(CMBaseObjectGetDerivedStorage() + 504))
              {
                int v30 = 6;
              }
              else if (FigCFEqual())
              {
                int v30 = 2;
              }
              else if (FigCFEqual())
              {
                int v30 = 5;
              }
              else
              {
                int v30 = v28;
              }
              CMBaseObjectGetDerivedStorage();
              uint64_t v31 = fpfs_FirstTrackWithFormatDescriptionOfType((uint64_t)a1, 1936684398);
              LODWORD(rhs.value) = 0;
              uint64_t v32 = *(void *)(CMBaseObjectGetDerivedStorage() + 504);
              if (!v31)
              {
                if (v32) {
                  int v36 = 6;
                }
                else {
                  int v36 = 0;
                }
                goto LABEL_86;
              }
              int v33 = fpfs_WantAudioHardwarePassthroughForTrack(v31, (int *)&rhs);
              CMTime v34 = *(const opaqueCMFormatDescription **)(v31 + 40);
              signed int MediaSubType = CMFormatDescriptionGetMediaSubType(v34);
              int v36 = 1;
              if (MediaSubType > 1885692722)
              {
                if (MediaSubType <= 1902469938)
                {
                  if (MediaSubType != 1885692723)
                  {
                    int v37 = 1902324531;
LABEL_70:
                    if (MediaSubType != v37) {
                      goto LABEL_84;
                    }
                    goto LABEL_81;
                  }
                  goto LABEL_72;
                }
                if (MediaSubType == 2053464883) {
                  goto LABEL_72;
                }
                if (MediaSubType == 2053319475) {
                  goto LABEL_81;
                }
                int v38 = 1902469939;
              }
              else
              {
                if (MediaSubType > 1700997938)
                {
                  if (MediaSubType == 1700997939) {
                    goto LABEL_81;
                  }
                  if (MediaSubType != 1700998451)
                  {
                    int v37 = 1885547315;
                    goto LABEL_70;
                  }
LABEL_72:
                  lhs.unsigned int value = 0;
                  FormatList = CMAudioFormatDescriptionGetFormatList(v34, (size_t *)&lhs);
                  if (FormatList && lhs.value > 0x2FuLL)
                  {
                    int mFormatID = FormatList->mASBD.mFormatID;
                    if (mFormatID <= 1885547314)
                    {
                      if (mFormatID == 1667574579) {
                        goto LABEL_81;
                      }
                      int v41 = 1700997939;
                    }
                    else
                    {
                      if (mFormatID == 1885547315 || mFormatID == 1902324531) {
                        goto LABEL_81;
                      }
                      int v41 = 2053319475;
                    }
                    if (mFormatID == v41)
                    {
LABEL_81:
                      if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 561)) {
                        int v36 = 5;
                      }
                      else {
                        int v36 = 1;
                      }
LABEL_84:
                      if (v32)
                      {
LABEL_85:
                        int v36 = 6;
                        goto LABEL_86;
                      }
                      goto LABEL_99;
                    }
                  }
                  int v36 = 1;
                  if (v32) {
                    goto LABEL_85;
                  }
LABEL_99:
                  if (v33)
                  {
                    switch(LODWORD(rhs.value))
                    {
                      case 0x61632D33:
                        int v36 = 2;
                        break;
                      case 0x65632B33:
                        int v36 = 4;
                        break;
                      case 0x65632D33:
                        int v36 = 3;
                        break;
                      default:
                        int v36 = 0;
                        break;
                    }
                  }
LABEL_86:
                  CMBaseObjectGetDerivedStorage();
                  if (v30 == v36 || !v36)
                  {
                    if (!v49) {
                      goto LABEL_110;
                    }
                  }
                  else if (dword_1E9350BB0)
                  {
                    LODWORD(v51.value) = 0;
                    v53[0] = OS_LOG_TYPE_DEFAULT;
                    unsigned int v42 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                    unsigned int v43 = v51.value;
                    if (os_log_type_enabled(v42, v53[0])) {
                      unsigned int v44 = v43;
                    }
                    else {
                      unsigned int v44 = v43 & 0xFFFFFFFE;
                    }
                    if (!v44) {
                      goto LABEL_108;
                    }
                    if (v7)
                    {
                      uint64_t v45 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
                      if (a1)
                      {
LABEL_95:
                        __int16 v46 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
LABEL_107:
                        LODWORD(rhs.value) = 136316162;
                        *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"fpfsi_handleAvailableAudioFormatChange";
                        LOWORD(rhs.flags) = 2048;
                        *(void *)((char *)&rhs.flags + 2) = v7;
                        HIWORD(rhs.epoch) = 2082;
                        uint64_t v56 = v45;
                        __int16 v57 = 2048;
                        CFStringRef v58 = a1;
                        __int16 v59 = 2082;
                        CMTimeEpoch v60 = v46;
                        _os_log_send_and_compose_impl();
LABEL_108:
                        fig_log_call_emit_and_clean_up_after_send_and_compose();
                        goto LABEL_109;
                      }
                    }
                    else
                    {
                      uint64_t v45 = "";
                      if (a1) {
                        goto LABEL_95;
                      }
                    }
                    __int16 v46 = "";
                    goto LABEL_107;
                  }
LABEL_109:
                  fpfs_stopResetDisturbReprepareAndResume(v7, (const __CFArray *)a1, 0);
                  goto LABEL_110;
                }
                if (MediaSubType == 1667574579) {
                  goto LABEL_81;
                }
                int v38 = 1667575091;
              }
              if (MediaSubType != v38) {
                goto LABEL_84;
              }
              goto LABEL_72;
            }
            if (v7)
            {
              CMTime v25 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
              if (a1)
              {
LABEL_28:
                uint64_t v26 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
LABEL_37:
                LODWORD(rhs.value) = 136316162;
                *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"fpfsi_handleAvailableAudioFormatChange";
                LOWORD(rhs.flags) = 2048;
                *(void *)((char *)&rhs.flags + 2) = v7;
                HIWORD(rhs.epoch) = 2082;
                uint64_t v56 = v25;
                __int16 v57 = 2048;
                CFStringRef v58 = a1;
                __int16 v59 = 2082;
                CMTimeEpoch v60 = v26;
                _os_log_send_and_compose_impl();
                goto LABEL_38;
              }
            }
            else
            {
              CMTime v25 = "";
              if (a1) {
                goto LABEL_28;
              }
            }
            uint64_t v26 = "";
            goto LABEL_37;
          }
          goto LABEL_120;
        }
      }
      else
      {
        int v49 = a2;
      }
      char v19 = 0;
      goto LABEL_19;
    }
  }
  uint64_t v27 = 0;
LABEL_31:
  char v19 = 0;
  if (a3) {
LABEL_111:
  }
    *a3 = v19;
LABEL_112:
  if (theArray) {
    CFRelease(theArray);
  }
  return v27;
}

void fpfs_DeleteTracksWhenSubstreamChanges(const void *a1, char a2, char a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a3)
  {
    fpfs_DeleteAllTracksForSubstream(a1, 0);
    if ((a3 & 2) == 0)
    {
LABEL_3:
      if ((a3 & 4) == 0) {
        return;
      }
      goto LABEL_15;
    }
  }
  else if ((a3 & 2) == 0)
  {
    goto LABEL_3;
  }
  if ((a2 & 3) == 1 && (*(unsigned char *)(DerivedStorage + 1096) & 2) != 0)
  {
    uint64_t v7 = *(void *)(DerivedStorage + 1048);
    if (v7)
    {
      do
      {
        uint64_t v8 = *(void *)(v7 + 8);
        if (!*(unsigned char *)(v7 + 180) && *(_DWORD *)(v7 + 32) == 1936684398) {
          fpfs_DeleteTrack(a1, v7);
        }
        if (!v8) {
          break;
        }
        uint64_t v7 = v8;
      }
      while (*(void *)(DerivedStorage + 1048));
    }
  }
  fpfs_DeleteAllTracksForSubstream(a1, 1);
  CMBufferQueueReset(*(CMBufferQueueRef *)(DerivedStorage + 856));
  if ((a3 & 4) != 0)
  {
LABEL_15:
    fpfs_DeleteAllTracksForSubstream(a1, 2);
  }
}

void fpfs_DeleteAllTracksForSubstream(const void *a1, int a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = *(void *)(DerivedStorage + 1048);
  if (v5)
  {
    uint64_t v6 = DerivedStorage;
    char v7 = 0;
    do
    {
      uint64_t v8 = *(void *)(v5 + 8);
      if (*(unsigned __int8 *)(v5 + 180) == a2)
      {
        if (*(_DWORD *)(v5 + 32) == 1986618469) {
          char v7 = 1;
        }
        fpfs_DeleteTrack(a1, v5);
      }
      if (!v8) {
        break;
      }
      uint64_t v5 = v8;
    }
    while (*(void *)(v6 + 1048));
    if (v7)
    {
      *(unsigned char *)(v6 + 528) = 1;
      fpfs_ClearRenderChains((const __CFArray *)a1, 1u);
    }
  }
}

void fpfs_applyAutoSelectionCriteria(const void *a1)
{
  cf[24] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf[0] = 0;
  fpfs_LockMutexWithCaller((uint64_t)a1);
  if (!*(unsigned char *)(DerivedStorage + 51) && *(unsigned char *)(DerivedStorage + 705) && *(void *)(DerivedStorage + 80))
  {
    uint64_t v3 = CMBaseObjectGetDerivedStorage();
    if (dword_1E9350BB0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    int AppliedMediaArray = fpfs_CreateAppliedMediaArray(v3, cf);
    CFTypeRef v6 = cf[0];
    if (!AppliedMediaArray)
    {
      if (!cf[0]) {
        goto LABEL_2;
      }
      fpfs_ApplyMediaArray(*(const __CFString **)(DerivedStorage + 80), (const __CFArray *)cf[0]);
      CFTypeRef v6 = cf[0];
    }
    if (v6) {
      CFRelease(v6);
    }
  }
LABEL_2:
  fpfs_UnlockAndPostNotificationsWithCaller(a1);
}

uint64_t fpfs_ApplyMediaArray(const __CFString *a1, const __CFArray *a2)
{
  uint64_t v175 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFArrayRef theArray = a2;
  CFIndex Count = CFArrayGetCount(a2);
  CFTypeRef CFStringForOSTypeValue = (CFTypeRef)FigGetCFStringForOSTypeValue();
  CFTypeRef v138 = (CFTypeRef)FigGetCFStringForOSTypeValue();
  FigGetCFStringForOSTypeValue();
  CFTypeRef cf2 = (CFTypeRef)FigGetCFStringForOSTypeValue();
  uint64_t v4 = *(void *)(DerivedStorage + 1704);
  CFArrayRef v166 = 0;
  Float64 v167 = (const void *)v4;
  uint64_t v5 = *(void *)(DerivedStorage + 1792);
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  if (v5)
  {
    CFMutableArrayRef MutableCopy = CFArrayCreateMutableCopy(AllocatorForMedia, 0, *(CFArrayRef *)(DerivedStorage + 1792));
LABEL_4:
    uint64_t v145 = DerivedStorage;
    if (Count < 1)
    {
      int v37 = 0;
      int v36 = 0;
      int v137 = 0;
      LOBYTE(v140) = 0;
      CFTypeRef v141 = 0;
      CFTypeRef v142 = 0;
      LODWORD(v144) = 0;
      LODWORD(v135) = 0;
      LOBYTE(v146) = 0;
      BOOL v35 = 1;
      BOOL v34 = 1;
      int v139 = 1;
      goto LABEL_87;
    }
    uint64_t v144 = 0;
    unint64_t v134 = 0;
    uint64_t v135 = 0;
    int v137 = 0;
    CFIndex v8 = 0;
    int v140 = 0;
    CFTypeRef v141 = 0;
    CFTypeRef v142 = 0;
    int v146 = 0;
    int v139 = 1;
    while (1)
    {
      idx.unsigned int value = 0;
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v8);
      CFNumberRef Value = CFDictionaryGetValue(ValueAtIndex, @"MediaSelectionGroupMediaType");
      CFDictionaryRef MediaTypeInMediaArray = fpfs_FindMediaTypeInMediaArray(*(const __CFArray **)(DerivedStorage + 1792), (uint64_t)Value, &idx.value);
      unint64_t v12 = (unint64_t)CFDictionaryGetValue(ValueAtIndex, @"MediaSelectionOptionsPersistentID");
      int v13 = CFDictionaryGetValue(ValueAtIndex, @"MediaSelectionOptionsUniqueOutOfBandID");
      if (Value) {
        break;
      }
      LODWORD(v164.value) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      uint64_t DerivedStorage = v145;
LABEL_70:
      if (Count == ++v8)
      {
        BOOL v34 = v134 == 0;
        BOOL v35 = BYTE4(v134) == 0;
        if (v134)
        {
          int v36 = HIDWORD(v135);
          int v37 = HIDWORD(v144);
          if (!BYTE4(v134)) {
            goto LABEL_87;
          }
LABEL_129:
          uint64_t updated = FigSignalErrorAt();
LABEL_130:
          uint64_t v43 = updated;
LABEL_131:
          CFTypeRef v44 = 0;
          if (!v43)
          {
LABEL_132:
            CFMutableArrayRef v60 = MutableCopy;
            uint64_t v62 = v141;
            long long v61 = v142;
            if (!MutableCopy) {
              goto LABEL_256;
            }
LABEL_255:
            CFRelease(v60);
            goto LABEL_256;
          }
LABEL_250:
          unsigned int v131 = *(const void **)(DerivedStorage + 1792);
          CFMutableArrayRef v60 = MutableCopy;
          *(void *)(DerivedStorage + 1792) = MutableCopy;
          if (MutableCopy) {
            CFRetain(MutableCopy);
          }
LABEL_252:
          uint64_t v62 = v141;
          long long v61 = v142;
          if (v131) {
            CFRelease(v131);
          }
          if (v60) {
            goto LABEL_255;
          }
LABEL_256:
          if (v61) {
            CFRelease(v61);
          }
          if (v62) {
            CFRelease(v62);
          }
          goto LABEL_260;
        }
        int v36 = HIDWORD(v135);
        int v37 = HIDWORD(v144);
LABEL_87:
        uint64_t v39 = *(void *)(DerivedStorage + 1704);
        if (v39)
        {
          if (*(_DWORD *)(DerivedStorage + 1096) == 1 && !v35) {
            goto LABEL_129;
          }
          if (FigAlternateIsAudioOnly(v39) && !v34) {
            goto LABEL_129;
          }
        }
        if (!v37)
        {
          uint64_t v43 = 0;
          CFTypeRef v44 = 0;
          int v45 = 0;
          goto LABEL_199;
        }
        fpfs_FindAndSetForcedSubtitle(DerivedStorage);
        if (v139)
        {
          CFDictionaryRef v42 = *(const __CFDictionary **)(DerivedStorage + 1800);
          if (v42)
          {
            CFDictionaryGetValue(v42, @"MediaSelectionOptionsPersistentID");
            CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 1800), @"MediaSelectionOptionsUniqueOutOfBandID");
            if (FigCFEqual())
            {
              if (FigCFEqual())
              {
                if (v36 | v137)
                {
                  if (*(unsigned char *)(DerivedStorage + 460))
                  {
                    fpfsi_postSelectedMediaOptionsDidChangeNotification(a1);
                    uint64_t v43 = 0;
                    CFTypeRef v44 = 0;
                    int v45 = 0;
                    if (!v36) {
                      goto LABEL_198;
                    }
LABEL_180:
                    uint64_t v86 = *(void *)(DerivedStorage + 824);
                    if (v86)
                    {
                      ClosedCaptionType = fpfsi_GetClosedCaptionType();
                      fpfs_setPropertyOnPrimaryAndAuxRenderPipelines(v86, @"CCRPP_ClosedCaptionType", (uint64_t)ClosedCaptionType);
                    }
                    if (dword_1E9350BB0)
                    {
                      LODWORD(idx.value) = 0;
                      LOBYTE(v164.value) = 0;
                      __int16 v88 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                      unsigned int v89 = idx.value;
                      if (os_log_type_enabled(v88, v164.value)) {
                        unsigned int v90 = v89;
                      }
                      else {
                        unsigned int v90 = v89 & 0xFFFFFFFE;
                      }
                      if (v90)
                      {
                        CMTimeValue v91 = *(const void **)DerivedStorage;
                        if (v91) {
                          __int16 v92 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
                        }
                        else {
                          __int16 v92 = "";
                        }
                        CFStringRef v93 = a1;
                        if (a1)
                        {
                          __int16 v94 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
                          CFStringRef v93 = a1;
                        }
                        else
                        {
                          __int16 v94 = "";
                        }
                        LODWORD(rhs.value) = 136316162;
                        *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"fpfs_ApplyMediaArray";
                        LOWORD(rhs.flags) = 2048;
                        *(void *)((char *)&rhs.flags + 2) = v91;
                        HIWORD(rhs.epoch) = 2082;
                        uint64_t v169 = v92;
                        __int16 v170 = 2048;
                        CFStringRef v171 = v93;
                        __int16 v172 = 2082;
                        unsigned int v173 = v94;
                        _os_log_send_and_compose_impl();
                        uint64_t DerivedStorage = v145;
                      }
                      fig_log_call_emit_and_clean_up_after_send_and_compose();
                    }
                  }
                  else
                  {
                    uint64_t v43 = 0;
                    CFTypeRef v44 = 0;
                    int v45 = 0;
                    *(unsigned char *)(DerivedStorage + 461) = 1;
                    if (v36) {
                      goto LABEL_180;
                    }
                  }
LABEL_198:
                  fpfs_updateClosedCaptionsDisplay(*(const void **)DerivedStorage, 0);
                }
                else
                {
                  uint64_t v43 = 0;
                  CFTypeRef v44 = 0;
                  int v45 = 0;
                }
                goto LABEL_199;
              }
            }
          }
        }
        if (!*(void *)(DerivedStorage + 936) || !*(void *)(DerivedStorage + 1704))
        {
          uint64_t v43 = 0;
          CFTypeRef v44 = 0;
          int v45 = 1;
          goto LABEL_199;
        }
        uint64_t v46 = CMBaseObjectGetDerivedStorage();
        memset(&idx, 0, sizeof(idx));
        memset(&v164, 0, sizeof(v164));
        memset(type, 0, sizeof(type));
        uint64_t v163 = 0;
        unsigned int v47 = *(_DWORD *)(DerivedStorage + 2204);
        int v48 = *(_DWORD *)(DerivedStorage + 1096);
        int v161 = 0;
        char cfa = *(unsigned char *)(DerivedStorage + 332);
        memset(&v160, 0, sizeof(v160));
        if (v135 && *(void *)(DerivedStorage + 40))
        {
          uint64_t v49 = CMBaseObjectGetDerivedStorage();
          lhs.unsigned int value = 0;
          uint64_t v50 = FigGetAllocatorForMedia();
          uint64_t v51 = FigAlternateMediaSelectionAudibleFilterCreate(v50, *(const void **)(v49 + 1792), &lhs);
          if (v51)
          {
            uint64_t v43 = v51;
          }
          else
          {
            uint64_t v52 = FigAlternateSelectionBossAddFilter(*(void *)(v49 + 40), (const void *)lhs.value);
            if (!v52)
            {
              uint64_t v52 = fpfsi_SetupAlternateSelectionBossWithPreferPlaybackFromCache((uint64_t)a1);
              if (!v52)
              {
                uint64_t v52 = fpfsi_CreateAndAddCombinedAudioPreferenceFilter((uint64_t)a1);
                if (!v52) {
                  uint64_t v52 = FigAlternateSelectionBossApplyFilters(*(const void **)(v49 + 40));
                }
              }
            }
            uint64_t v43 = v52;
          }
          if (lhs.value) {
            CFRelease((CFTypeRef)lhs.value);
          }
          if (v43) {
            goto LABEL_131;
          }
          uint64_t v53 = *(void *)(DerivedStorage + 40);
          uint64_t v54 = FigGetAllocatorForMedia();
          uint64_t v55 = FigAlternateSelectionBossCopyProperty(v53, @"FilteredAlternateList", v54, &v166);
          if (!v55)
          {
            if (v166 && CFArrayGetCount(v166) > 0)
            {
              uint64_t updated = fpfsi_UpdateValidAlternateListAndSuggestAnAlternate((uint64_t)a1, v166, &v167);
              uint64_t DerivedStorage = v145;
              if (updated) {
                goto LABEL_130;
              }
              goto LABEL_122;
            }
            uint64_t v55 = FigSignalErrorAt();
          }
          uint64_t v43 = v55;
          CFTypeRef v44 = 0;
LABEL_169:
          uint64_t DerivedStorage = v145;
          if (!v43) {
            goto LABEL_132;
          }
          goto LABEL_250;
        }
LABEL_122:
        unsigned int v151 = v47;
        CFTypeRef v44 = FigBytePumpRetain(*(CFTypeRef *)(DerivedStorage + 936));
        if (v167 == *(const void **)(DerivedStorage + 1704))
        {
          uint64_t v63 = FigGetCFStringForOSTypeValue();
          fpfs_FindMediaTypeInMediaArray(MutableCopy, v63, 0);
          CMTime v64 = (const void *)FigCFDictionaryGetValue();
          CFDictionaryRef CurrentAudioPersistentIDFromMediaOption = fpfsi_GetCurrentAudioPersistentIDFromMediaOption();
          FigAlternateGetAudioInstreamID((uint64_t)v167, v64);
          uint64_t AudioInstreamID = FigAlternateGetAudioInstreamID((uint64_t)v167, CurrentAudioPersistentIDFromMediaOption);
          if (AudioInstreamID)
          {
            uint64_t v67 = AudioInstreamID;
            if (!FigCFEqual())
            {
              for (uint64_t i = *(void *)(v145 + 1048); i; uint64_t i = *(void *)(i + 8))
              {
                if (*(_DWORD *)(i + 32) == 1936684398)
                {
                  uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(*(void *)(*(void *)(i + 96) + 32));
                  uint64_t v70 = *(void *)(CMBaseObjectGetVTable() + 8);
                  uint64_t v71 = v70 ? v70 : 0;
                  CMTime v72 = *(void (**)(uint64_t, __CFString *, uint64_t))(v71 + 56);
                  if (v72) {
                    v72(FigBaseObject, @"SceneCompositionPreset", v67);
                  }
                }
              }
              LOBYTE(v140) = 0;
            }
          }
        }
        CFStringRef key = (float *)v46;
        __int16 v57 = (CMTime *)MEMORY[0x1E4F1F9F8];
        if ((_BYTE)v140 || (cfa)
          && (uint64_t v58 = *(void *)v145,
              CMTime lhs = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8],
              CMTime rhs = lhs,
              fpfs_setRateInternal(v58, a1, (uint64_t)&lhs, (uint64_t)&rhs, 0.0),
              *(unsigned char *)(v145 + 464) = 0,
              (cfa & 1) != 0))
        {
          CMTime idx = *(CMTime *)(v145 + 320);
          CMTime v160 = idx;
          CMTime v164 = *(CMTime *)(v145 + 344);
          uint64_t v163 = *(void *)(v145 + 384);
          *(_OWORD *)os_log_type_t type = *(_OWORD *)(v145 + 368);
          unsigned int v59 = *(_DWORD *)(v145 + 392);
          int theArraya = *(_DWORD *)(v145 + 2224);
        }
        else
        {
          fpfs_GetNextTimeToPlayIfEstablished((uint64_t)a1, (uint64_t)&v160);
          CMTime lhs = v160;
          *(_OWORD *)&rhs.unsigned int value = kSeekToCurrentFudge;
          rhs.CMTimeEpoch epoch = 0;
          CMTimeSubtract(&idx, &lhs, &rhs);
          int theArraya = 0;
          CMTime v164 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA08];
          *(_OWORD *)os_log_type_t type = *MEMORY[0x1E4F1FA10];
          uint64_t v163 = *(void *)(MEMORY[0x1E4F1FA10] + 16);
          unsigned int v59 = 5;
        }
        uint64_t DerivedStorage = v145;
        uint64_t v73 = fpfs_FlowControlPump(v145, 0xFFu, 0, 0);
        if (!v73)
        {
          uint64_t v74 = *(void *)v145;
          CMTime v75 = v167;
          CMTime lhs = v160;
          CMTime rhs = *(CMTime *)(v145 + 1184);
          CMTimeAdd(&v159, &lhs, &rhs);
          CMTime lhs = v159;
          CMTime rhs = *v57;
          uint64_t v76 = fpfs_SetAlternateWithContext(v74, a1, v75, 1u, &lhs, (uint64_t)&rhs, 0, &v161, 0, 9u);
          if (v76)
          {
            uint64_t v43 = v76;
            goto LABEL_169;
          }
          if (!v34 && v48 == 1 && *(_DWORD *)(v145 + 1096) == 1)
          {
            uint64_t v43 = 4294954514;
            goto LABEL_169;
          }
          if (*(unsigned char *)(v145 + 460)) {
            fpfsi_postSelectedMediaOptionsDidChangeNotification(a1);
          }
          else {
            *(unsigned char *)(v145 + 461) = 1;
          }
          if ((cfa & 1) == 0)
          {
            if ((~v48 & 3) != 0 || ((*(_DWORD *)(v145 + 1096) & 3) == 1 ? (BOOL v77 = v34) : (BOOL v77 = 0), !v77 || !v35))
            {
              CMTimeMake(&v156, 50, 1000);
              float v78 = key[27];
              if (v78 > 2.0 || v78 < 0.0)
              {
                uint64_t DerivedStorage = v145;
                BOOL v79 = *(void *)(v145 + 2968) == 0;
              }
              else
              {
                BOOL v79 = 0;
                uint64_t DerivedStorage = v145;
              }
              fpfsi_TrimFromAllTracks(DerivedStorage, &v156, v78 < 0.0, v79);
              if (v139)
              {
                fpfs_DeleteAllTracksForSubstream(a1, 2);
              }
              else
              {
                fpfs_DeleteTracksWhenSubstreamChanges(a1, v48, v161);
                if ((_BYTE)v140) {
                  fpfs_setUnlikelyToKeepUpAndRanDry(a1);
                }
              }
LABEL_176:
              uint64_t v43 = fpfs_FlowControlPump(DerivedStorage, 0, 1, 255);
              if ((_BYTE)v146) {
                fpfs_PrepareAndEnqueueTracksChangedNotification(*(const void **)DerivedStorage, a1, v80, v81, v82, v83, v84, v85);
              }
              int v45 = 1;
              if (v36 | v137)
              {
                if (!v36) {
                  goto LABEL_198;
                }
                goto LABEL_180;
              }
LABEL_199:
              uint64_t v95 = CMBaseObjectGetDerivedStorage();
              uint64_t v96 = CMBaseObjectGetDerivedStorage();
              uint64_t v97 = v96;
              if (!v45 || !v144)
              {
                if (!*(unsigned char *)(v96 + 720)) {
                  fpfsi_clearOutOfBandSubtitleObjects();
                }
                goto LABEL_249;
              }
              fpfsi_clearOutOfBandSubtitleObjects();
              CFDictionaryRef v98 = *(const __CFDictionary **)(v95 + 904);
              if (v98)
              {
                if (!*(unsigned char *)(v97 + 462))
                {
                  BOOL v99 = 0;
                  if (!*(unsigned char *)(v97 + 720)) {
                    goto LABEL_208;
                  }
                  goto LABEL_209;
                }
                BOOL v99 = *(unsigned char *)(v97 + 463) != 0;
                if (*(unsigned char *)(v97 + 720)) {
                  goto LABEL_209;
                }
LABEL_208:
                if (v99)
                {
LABEL_209:
                  CFStringRef v100 = (const __CFString *)CFDictionaryGetValue(v98, @"MediaSelectionOptionsURL");
                  if (!v100) {
                    goto LABEL_249;
                  }
                  CFStringRef v101 = v100;
                  if (!FigCFStringFind()) {
                    goto LABEL_249;
                  }
                  CFAllocatorRef v102 = (const __CFAllocator *)FigGetAllocatorForMedia();
                  CFURLRef v103 = CFURLCreateWithString(v102, v101, 0);
                  if (!v103) {
                    goto LABEL_249;
                  }
                  CFURLRef v104 = v103;
                  uint64_t v105 = CMBaseObjectGetDerivedStorage();
                  CFAllocatorRef v106 = (const __CFAllocator *)FigGetAllocatorForMedia();
                  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v106, 3, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                  if (!Mutable) {
                    goto LABEL_271;
                  }
                  unsigned int v108 = Mutable;
                  uint64_t v109 = *(void *)(v105 + 32);
                  if (v109)
                  {
                    CFURLRef cfb = v104;
                    lhs.unsigned int value = 0;
                    rhs.unsigned int value = 0;
                    uint64_t v110 = FigGetAllocatorForMedia();
                    uint64_t CMBaseObject = FigAssetGetCMBaseObject(v109);
                    uint64_t v112 = *(void *)(CMBaseObjectGetVTable() + 8);
                    if (v112) {
                      uint64_t v113 = v112;
                    }
                    else {
                      uint64_t v113 = 0;
                    }
                    unsigned int v114 = *(void (**)(uint64_t, __CFString *, uint64_t, CMTime *))(v113 + 48);
                    if (v114)
                    {
                      v114(CMBaseObject, @"assetProperty_CreationURL", v110, &lhs);
                      if (lhs.value)
                      {
                        CFDictionarySetValue(v108, @"ReferenceSecurityPolicyFlagBaseURL", (const void *)lhs.value);
                        CFRelease((CFTypeRef)lhs.value);
                      }
                    }
                    uint64_t v115 = *(void *)(v105 + 32);
                    uint64_t v116 = FigGetAllocatorForMedia();
                    uint64_t v117 = FigAssetGetCMBaseObject(v115);
                    uint64_t v118 = *(void *)(CMBaseObjectGetVTable() + 8);
                    if (v118) {
                      uint64_t v119 = v118;
                    }
                    else {
                      uint64_t v119 = 0;
                    }
                    CFURLRef v104 = cfb;
                    double v120 = *(void (**)(uint64_t, __CFString *, uint64_t, CMTime *))(v119 + 48);
                    if (v120)
                    {
                      v120(v117, @"assetProperty_CreationFlags", v116, &rhs);
                      if (rhs.value)
                      {
                        idx.unsigned int value = 0;
                        CFNumberGetValue((CFNumberRef)rhs.value, kCFNumberSInt64Type, &idx);
                        CFRelease((CFTypeRef)rhs.value);
                        if (((LODWORD(idx.value) >> 1) & 0x1E) != 0) {
                          FigCFDictionarySetInt32();
                        }
                      }
                    }
                  }
                  uint64_t v121 = FigGetAllocatorForMedia();
                  unsigned int v122 = (uint64_t *)(v95 + 912);
                  FigOutOfBandTrackControllerCreate(v121, v104, v108, (uint64_t *)(v95 + 912));
                  CFRelease(v108);
                  if (*(void *)(v95 + 912))
                  {
                    CMNotificationCenterGetDefaultLocalCenter();
                    FigNotificationCenterAddWeakListener();
                    CMNotificationCenterGetDefaultLocalCenter();
                    FigNotificationCenterAddWeakListener();
                    fpfs_GetTime(v95, (uint64_t)&lhs);
                    if ((lhs.flags & 0x1D) == 1)
                    {
                      uint64_t v123 = *(void *)(v95 + 912);
                      fpfs_GetTime(v95, (uint64_t)&rhs);
                      FigOutOfBandTrackControllerSetCurrentTime(v123, (long long *)&rhs.value);
                    }
                    unsigned int v124 = *(const void **)(v95 + 1816);
                    if (v124) {
                      FigOutOfBandTrackControllerSetProperty(*v122, @"TextMarkupArray", v124);
                    }
                    Float64 v125 = *(const void **)(v95 + 1824);
                    if (v125) {
                      FigOutOfBandTrackControllerSetProperty(*v122, @"TextHighlightArray", v125);
                    }
                    if (v99)
                    {
                      LODWORD(idx.value) = 0;
                      LODWORD(v164.value) = 0;
                      CFAllocatorRef v126 = (const __CFAllocator *)FigGetAllocatorForMedia();
                      CFTypeRef v127 = CFDictionaryCreateMutable(v126, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                      if (v127)
                      {
                        uint64_t v128 = v127;
                        Float64 v129 = (const void **)MEMORY[0x1E4F1CFD0];
                        if (!*(unsigned char *)(v97 + 462)) {
                          Float64 v129 = (const void **)MEMORY[0x1E4F1CFC8];
                        }
                        CFDictionarySetValue(v127, @"Visuals", *v129);
                        if (*(unsigned char *)(v97 + 462)) {
                          CFDictionarySetValue(v128, @"NeroTransport", *(const void **)(v97 + 488));
                        }
                        FigOutOfBandTrackControllerSetProperty(*v122, @"UsingNeroVideo", v128);
                        fpfsi_GetDimensions((uint64_t)a1, (float *)&idx, (float *)&v164);
                        v176.double width = *(float *)&idx.value;
                        v176.double height = *(float *)&v164.value;
                        CFDictionaryRef DictionaryRepresentation = CGSizeCreateDictionaryRepresentation(v176);
                        if (DictionaryRepresentation) {
                          FigOutOfBandTrackControllerSetProperty(*v122, @"NeroVideoDimensions", DictionaryRepresentation);
                        }
                        fpfs_setDisplaySizeOnOutOfBandSubtitleController(*v122, *(double *)(v97 + 464), *(double *)(v97 + 472));
                        FigOutOfBandTrackControllerSetProperty(*v122, @"NeroVideoGravity", *(const void **)(v97 + 480));
                        if (DictionaryRepresentation) {
                          CFRelease(DictionaryRepresentation);
                        }
                        CFRelease(v128);
                        goto LABEL_245;
                      }
LABEL_271:
                      FigSignalErrorAt();
LABEL_248:
                      uint64_t DerivedStorage = v145;
                      goto LABEL_249;
                    }
LABEL_245:
                    if (!FigOutOfBandTrackControllerPrepare(*v122)) {
                      FigSyncMomentSourceCreateWithDispatchQueue((uint64_t)fpfsi_synchronizeOOBSController, (uint64_t)a1, *(const void **)(v95 + 576), *(NSObject **)(v95 + 600), (uint64_t *)(v95 + 920));
                    }
                  }
                  CFRelease(v104);
                  goto LABEL_248;
                }
              }
LABEL_249:
              fpfs_updateCaptionOrSubtitleHintOnVideoPipeline();
              if (!v43) {
                goto LABEL_132;
              }
              goto LABEL_250;
            }
          }
          CMTime lhs = idx;
          CMTime rhs = v164;
          long long v157 = *(_OWORD *)type;
          uint64_t v158 = v163;
          uint64_t v73 = fpfsi_SetCurrentTimeWithRangeAndSeekIDGuts((const __CFArray *)a1, &lhs, v59, (uint64_t)&rhs, &v157, v151, 0, theArraya, 0, 0, 1, 1, 0, 0);
          uint64_t DerivedStorage = v145;
          if (!v73) {
            goto LABEL_176;
          }
        }
        uint64_t v43 = v73;
        goto LABEL_250;
      }
    }
    unint64_t v14 = (unint64_t)v13;
    if (FigCFEqual())
    {
      LODWORD(v164.value) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      int v38 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      goto LABEL_129;
    }
    if (MediaTypeInMediaArray)
    {
      int v15 = CFDictionaryGetValue(MediaTypeInMediaArray, @"MediaSelectionOptionsPersistentID");
      if (v15) {
        CFTypeRef v16 = CFRetain(v15);
      }
      else {
        CFTypeRef v16 = 0;
      }
      char v19 = CFDictionaryGetValue(MediaTypeInMediaArray, @"MediaSelectionOptionsUniqueOutOfBandID");
      if (v19) {
        CFTypeRef v18 = CFRetain(v19);
      }
      else {
        CFTypeRef v18 = 0;
      }
      if (FigCFEqual() && FigCFEqual())
      {
        int v20 = (const void *)FigCFCopyCompactDescription();
        if (dword_1E9350BB0)
        {
          LODWORD(v164.value) = 0;
          type[0] = OS_LOG_TYPE_DEFAULT;
          int v21 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          if (!v20) {
            goto LABEL_66;
          }
          goto LABEL_65;
        }
LABEL_64:
        if (!v20)
        {
LABEL_66:
          if (v16) {
            CFRelease(v16);
          }
          if (v18) {
            CFRelease(v18);
          }
          goto LABEL_70;
        }
LABEL_65:
        CFRelease(v20);
        goto LABEL_66;
      }
      CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(DerivedStorage + 1792), idx.value);
      CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 1792), ValueAtIndex);
      CFTypeRef cf = v16;
      if (v14)
      {
        CFTypeRef v22 = v18;
        os_log_type_t v23 = *(const void **)(DerivedStorage + 904);
        *(void *)(DerivedStorage + 904) = ValueAtIndex;
        if (ValueAtIndex) {
          CFRetain(ValueAtIndex);
        }
        if (v23) {
          CFRelease(v23);
        }
        LODWORD(v144) = 1;
        CFTypeRef v18 = v22;
LABEL_37:
        int v20 = (const void *)FigCFCopyCompactDescription();
        int v25 = v146;
        if (!(v12 | v14)) {
          int v25 = 1;
        }
        int v146 = v25;
        uint64_t v26 = v18;
        if (!*(void *)(DerivedStorage + 1704)) {
          goto LABEL_61;
        }
        if (!CFEqual(Value, cf2))
        {
          if (CFEqual(Value, v138) || CFEqual(Value, CFStringForOSTypeValue))
          {
            if (cf) {
              BOOL v28 = v12 == 0;
            }
            else {
              BOOL v28 = 1;
            }
            int v29 = v140;
            if (!v28) {
              int v29 = 1;
            }
            int v140 = v29;
            if (v12)
            {
              int v139 = 0;
              LODWORD(v135) = 1;
            }
            else
            {
              int v31 = CFEqual(Value, v138);
              int v139 = 0;
              if (v31) {
                int v32 = 1;
              }
              else {
                int v32 = HIDWORD(v134);
              }
              int v33 = v134;
              if (!v31) {
                int v33 = 1;
              }
              unint64_t v134 = __PAIR64__(v32, v33);
            }
          }
          else
          {
            int v139 = 0;
            int v140 = 1;
          }
          goto LABEL_61;
        }
        CFDictionaryRef ClosedCaptionGroupLocatorMap = (const __CFDictionary *)FigAlternateGetClosedCaptionGroupLocatorMap(*(void *)(DerivedStorage + 1704));
        if (cf)
        {
          CFTypeRef v142 = CFRetain(cf);
          if (v26) {
            goto LABEL_43;
          }
        }
        else
        {
          CFTypeRef v142 = 0;
          if (v26)
          {
LABEL_43:
            CFTypeRef v141 = CFRetain(v26);
            if (!ClosedCaptionGroupLocatorMap) {
              goto LABEL_59;
            }
LABEL_56:
            if (v12 && CFDictionaryContainsKey(ClosedCaptionGroupLocatorMap, (const void *)v12))
            {
              HIDWORD(v135) = 1;
LABEL_60:
              CFTypeRef v18 = v26;
LABEL_61:
              if (dword_1E9350BB0)
              {
                LODWORD(v164.value) = 0;
                type[0] = OS_LOG_TYPE_DEFAULT;
                int v30 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
                CFTypeRef v18 = v26;
              }
              HIDWORD(v144) = 1;
              CFTypeRef v16 = cf;
              goto LABEL_64;
            }
LABEL_59:
            int v137 = 1;
            goto LABEL_60;
          }
        }
        CFTypeRef v141 = 0;
        if (!ClosedCaptionGroupLocatorMap) {
          goto LABEL_59;
        }
        goto LABEL_56;
      }
      if (!v18) {
        goto LABEL_37;
      }
      unsigned int v24 = *(const void **)(DerivedStorage + 904);
      if (v24)
      {
        CFRelease(v24);
        *(void *)(DerivedStorage + 904) = 0;
      }
    }
    else
    {
      CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 1792), ValueAtIndex);
      if (!v14)
      {
        CFTypeRef cf = 0;
        CFTypeRef v18 = 0;
        goto LABEL_37;
      }
      CFTypeRef v18 = *(CFTypeRef *)(DerivedStorage + 904);
      *(void *)(DerivedStorage + 904) = ValueAtIndex;
      if (ValueAtIndex) {
        CFRetain(ValueAtIndex);
      }
      if (v18)
      {
        CFRelease(v18);
        CFTypeRef cf = 0;
        CFTypeRef v18 = 0;
      }
      else
      {
        CFTypeRef cf = 0;
      }
    }
    LODWORD(v144) = 1;
    goto LABEL_37;
  }
  CFMutableArrayRef v7 = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D510]);
  CFMutableArrayRef MutableCopy = 0;
  *(void *)(DerivedStorage + 1792) = v7;
  if (v7) {
    goto LABEL_4;
  }
  uint64_t v43 = FigSignalErrorAt();
  if (v43)
  {
    CFMutableArrayRef v60 = 0;
    CFTypeRef v141 = 0;
    CFTypeRef v142 = 0;
    CFTypeRef v44 = 0;
    unsigned int v131 = *(const void **)(DerivedStorage + 1792);
    *(void *)(DerivedStorage + 1792) = 0;
    goto LABEL_252;
  }
  CFTypeRef v44 = 0;
LABEL_260:
  if (v166) {
    CFRelease(v166);
  }
  if (v44) {
    CFRelease(v44);
  }
  return v43;
}

void fpfsi_clearOutOfBandSubtitleObjects()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v1 = *(const void **)(DerivedStorage + 920);
  if (v1)
  {
    FigSyncMomentSourceDestroy(v1);
    *(void *)(DerivedStorage + 920) = 0;
  }
  uint64_t v2 = *(void *)(DerivedStorage + 912);
  if (v2)
  {
    FigOutOfBandTrackControllerInvalidate(v2);
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterBarrier();
    uint64_t v3 = *(const void **)(DerivedStorage + 912);
    if (v3)
    {
      CFRelease(v3);
      *(void *)(DerivedStorage + 912) = 0;
    }
  }
}

void fpfsi_handleOutOfBandTrackSubtitleChanged(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a5)
  {
    uint64_t v7 = DerivedStorage;
    if (!FigRetainProxyIsInvalidated()
      && !*(unsigned char *)(v7 + 875)
      && !*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 51))
    {
      CFIndex v8 = *(const void **)v7;
      uint64_t v9 = *(const void **)v7;
      fpfs_PostNotificationWhenUnlocked(v8, @"SubtitleChanged", v9, a5);
    }
  }
}

void fpfsi_handleOutOfBandTrackPlaybackFailed()
{
  uint64_t v0 = (const void *)FigCFCopyCompactDescription();
  if (v0)
  {
    CFRelease(v0);
  }
}

void fpfs_setDisplaySizeOnOutOfBandSubtitleController(uint64_t a1, double a2, double a3)
{
  CFDictionaryRef DictionaryRepresentation = CGSizeCreateDictionaryRepresentation(*(CGSize *)&a2);
  if (DictionaryRepresentation)
  {
    CFDictionaryRef v5 = DictionaryRepresentation;
    FigOutOfBandTrackControllerSetProperty(a1, @"NeroDisplaySize", DictionaryRepresentation);
    CFRelease(v5);
  }
}

uint64_t fpfsi_synchronizeOOBSController(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = FigRetainProxyIsInvalidated();
  if (!result)
  {
    if (a2)
    {
      uint64_t result = *(void *)(DerivedStorage + 912);
      if (result)
      {
        if ((*(unsigned char *)(a2 + 4) & 3) != 0)
        {
          float v5 = *(double *)(a2 + 8);
          long long v8 = *(_OWORD *)(a2 + 16);
          uint64_t v9 = *(void *)(a2 + 32);
          long long v6 = *(_OWORD *)(a2 + 40);
          uint64_t v7 = *(void *)(a2 + 56);
          return FigOutOfBandTrackControllerSetRateAndAnchorTime(result, &v8, &v6, v5);
        }
      }
    }
  }
  return result;
}

uint64_t fpfs_Invalidate(void *cf)
{
  if (dword_1E9350BB0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CFRetain(cf);
  fpfs_InvalidateGuts(cf);
  CFRelease(cf);
  return 0;
}

uint64_t fpfs_Finalize(void *a1)
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  fpfs_InvalidateGuts(a1);
  uint64_t v3 = (const void *)DerivedStorage[2];
  if (v3)
  {
    CFRelease(v3);
    DerivedStorage[2] = 0;
  }
  uint64_t v4 = DerivedStorage[3];
  if (v4)
  {
    dispatch_release(v4);
    DerivedStorage[3] = 0;
  }
  float v5 = (const void *)DerivedStorage[46];
  if (v5) {
    CFRelease(v5);
  }
  long long v6 = (const void *)DerivedStorage[24];
  if (v6) {
    CFRelease(v6);
  }
  FPSupport_releaseClosedCaptions(DerivedStorage + 26);
  uint64_t result = *DerivedStorage;
  if (*DerivedStorage)
  {
    uint64_t result = FigSimpleMutexDestroy();
    *uint64_t DerivedStorage = 0;
  }
  return result;
}

uint64_t fpfs_CopyProperty(const void *a1, const void *a2, const __CFAllocator *a3, __CFDictionary **a4)
{
  if (a2 && a1 && a4)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (!FigPropertyStorageCopyValue(*(void *)(DerivedStorage + 16), (uint64_t)a2, a4)) {
      return 0;
    }
    fpfs_LockMutexWithCaller((uint64_t)a1);
    if (*(unsigned char *)(DerivedStorage + 51)) {
      goto LABEL_101;
    }
    if (CFEqual(a2, @"PerformanceDictionary"))
    {
      uint64_t v9 = CMBaseObjectGetDerivedStorage();
      CFArrayRef Next = fpfs_getNext(v9, 0);
      uint64_t v11 = fpfsi_copyPerformanceDictionary((uint64_t)Next, a3, a4);
LABEL_8:
      uint64_t v12 = v11;
LABEL_21:
      fpfs_UnlockAndPostNotificationsWithCaller(a1);
      return v12;
    }
    if (CFEqual(a2, @"GatherPerformanceHistoryArray"))
    {
      unint64_t v14 = (const void **)MEMORY[0x1E4F1CFD0];
      int v15 = *(unsigned __int8 *)(DerivedStorage + 656);
LABEL_15:
      CFTypeRef v16 = (const void **)MEMORY[0x1E4F1CFC8];
      goto LABEL_16;
    }
    if (CFEqual(a2, @"PerformanceHistoryArray"))
    {
      if (!*(unsigned char *)(DerivedStorage + 656)) {
        goto LABEL_101;
      }
      CFArrayRef v18 = *(const __CFArray **)(DerivedStorage + 664);
      if (v18)
      {
        CFArrayRef Copy = CFArrayCreateCopy(a3, v18);
        *a4 = Copy;
        if (Copy)
        {
LABEL_27:
          uint64_t v12 = 0;
          goto LABEL_21;
        }
LABEL_101:
        uint64_t v11 = FigSignalErrorAt();
        goto LABEL_8;
      }
LABEL_30:
      uint64_t v12 = 0;
      *a4 = 0;
      goto LABEL_21;
    }
    if (CFEqual(a2, @"FigAudioSession"))
    {
      char v17 = *(void **)(DerivedStorage + 536);
      if (v17) {
        goto LABEL_19;
      }
      goto LABEL_30;
    }
    if (CFEqual(a2, @"IsValid"))
    {
      unint64_t v14 = (const void **)MEMORY[0x1E4F1CFD0];
      goto LABEL_18;
    }
    if (CFEqual(a2, @"LastSentSubtitleSample"))
    {
      char v17 = *(void **)(DerivedStorage + 368);
      if (!v17) {
        goto LABEL_20;
      }
      goto LABEL_19;
    }
    if (CFEqual(a2, @"PlayerVolume"))
    {
      CFAllocatorRef v20 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      p_int valuePtr = (int *)(DerivedStorage + 104);
      CFNumberType v22 = kCFNumberFloatType;
      goto LABEL_40;
    }
    if (CFEqual(a2, @"EQPreset"))
    {
      int valuePtr = *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 172);
      CFAllocatorRef v20 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      p_int valuePtr = &valuePtr;
      CFNumberType v22 = kCFNumberIntType;
      goto LABEL_40;
    }
    if (CFEqual(a2, @"STSLabel"))
    {
      char v17 = *(void **)(DerivedStorage + 192);
      if (!v17) {
        goto LABEL_20;
      }
      goto LABEL_19;
    }
    if (CFEqual(a2, @"DisplayClosedCaptions"))
    {
      unint64_t v14 = (const void **)MEMORY[0x1E4F1CFD0];
      int v15 = *(unsigned __int8 *)(DerivedStorage + 209);
      goto LABEL_15;
    }
    if (CFEqual(a2, @"RequiredNumberOfCAContextsForClosedCaptionLayers"))
    {
      CFAllocatorRef v20 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      p_int valuePtr = (int *)(DerivedStorage + 232);
      goto LABEL_49;
    }
    if (CFEqual(a2, @"ClosedCaptionCAContextIDArray"))
    {
      CFArrayRef v23 = *(const __CFArray **)(DerivedStorage + 240);
      if (v23)
      {
        CFIndex Count = CFArrayGetCount(v23);
        if (Count >= 1)
        {
          CFIndex v25 = Count;
          CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
          CFMutableArrayRef Mutable = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D510]);
          BOOL v28 = (void *)MEMORY[0x199711A30]();
          for (CFIndex i = 0; i != v25; ++i)
          {
            objc_msgSend((id)CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 240), i), "contextId");
            FigCFArrayAppendInt32();
          }
          uint64_t v12 = 0;
          *a4 = Mutable;
          goto LABEL_21;
        }
      }
      goto LABEL_101;
    }
    if (CFEqual(a2, @"ActionAtEnd"))
    {
      switch(*(_DWORD *)(DerivedStorage + 632))
      {
        case 0:
          unint64_t v14 = (const void **)&kFigPlayerAction_Advance;
          goto LABEL_18;
        case 1:
          unint64_t v14 = (const void **)&kFigPlayerAction_Stop;
          goto LABEL_18;
        case 2:
          unint64_t v14 = (const void **)&kFigPlayerAction_None;
          goto LABEL_18;
        case 3:
          unint64_t v14 = (const void **)&kFigPlayerAction_StopAtEndOfQueue;
          goto LABEL_18;
        default:
          goto LABEL_27;
      }
    }
    if (CFEqual(a2, @"ApplyVideoTrackMatrix"))
    {
      unint64_t v14 = (const void **)MEMORY[0x1E4F1CFD0];
      int v15 = *(unsigned __int8 *)(DerivedStorage + 608);
      goto LABEL_15;
    }
    if (CFEqual(a2, @"VideoLayerArray"))
    {
      CFArrayRef v30 = *(const __CFArray **)(DerivedStorage + 376);
      if (v30)
      {
        char v17 = CFArrayCreateCopy(a3, v30);
      }
      else
      {
        CFAllocatorRef v31 = (const __CFAllocator *)FigGetAllocatorForMedia();
        char v17 = CFArrayCreate(v31, 0, 0, MEMORY[0x1E4F1D510]);
      }
      goto LABEL_20;
    }
    if (CFEqual(a2, @"VideoLayerDestinationIsTVOut"))
    {
      unint64_t v14 = (const void **)MEMORY[0x1E4F1CFC8];
      int v15 = *(unsigned __int8 *)(DerivedStorage + 408);
      CFTypeRef v16 = (const void **)MEMORY[0x1E4F1CFD0];
LABEL_16:
      if (!v15) {
        unint64_t v14 = v16;
      }
      goto LABEL_18;
    }
    if (CFEqual(a2, @"PreventDisplaySleepDuringVideoPlayback"))
    {
      unint64_t v14 = (const void **)MEMORY[0x1E4F1CFD0];
      int v15 = *(unsigned __int8 *)(DerivedStorage + 408);
      goto LABEL_15;
    }
    if (CFEqual(a2, @"CurrentlyDisplayedCVPixelBuffer"))
    {
      if (*(void *)(DerivedStorage + 80))
      {
        uint64_t v32 = CMBaseObjectGetDerivedStorage();
        uint64_t v11 = FPSupport_CopyCurrentlyDisplayedPixelBufferFromCAImageQueueArray(*(CFArrayRef *)(v32 + 656), a3, a4);
        goto LABEL_8;
      }
      goto LABEL_30;
    }
    if (CFEqual(a2, @"CurrentVideoFrameRate"))
    {
      CFArrayRef v33 = fpfs_getNext(DerivedStorage, 0);
      if (!v33 || (uint64_t RenderingTrackofType = fpfs_FirstRenderingTrackofType((uint64_t)v33, 1986618469)) == 0)
      {
        uint64_t v12 = 4294954513;
        goto LABEL_21;
      }
      uint64_t v11 = FigRenderPipelineCopyProperty(*(void *)(*(void *)(RenderingTrackofType + 96) + 32), @"CurrentVideoFrameRate", (uint64_t)a3, (uint64_t)a4);
      goto LABEL_8;
    }
    if (CFEqual(a2, @"AudioDeviceUID"))
    {
      *a4 = *(__CFDictionary **)(DerivedStorage + 176);
      BOOL v35 = *(const void **)(DerivedStorage + 176);
      if (v35) {
        CFRetain(v35);
      }
      goto LABEL_27;
    }
    if (CFEqual(a2, @"EnableHardwareAcceleratedVideoDecoder"))
    {
      unint64_t v14 = (const void **)MEMORY[0x1E4F1CFD0];
      if (*(_DWORD *)(DerivedStorage + 592) != 1) {
        unint64_t v14 = (const void **)MEMORY[0x1E4F1CFC8];
      }
      goto LABEL_18;
    }
    if (CFEqual(a2, @"PreferredVideoDecoderGPURegistryID"))
    {
      char v17 = *(void **)(DerivedStorage + 600);
      if (!v17) {
        goto LABEL_20;
      }
      goto LABEL_19;
    }
    if (CFEqual(a2, @"DisplayTimedMetadata"))
    {
      unint64_t v14 = (const void **)MEMORY[0x1E4F1CFD0];
      int v15 = *(unsigned __int8 *)(DerivedStorage + 459);
      goto LABEL_15;
    }
    if (CFEqual(a2, @"SendToNero"))
    {
      int v36 = *(unsigned __int8 *)(DerivedStorage + 462);
      int v37 = *(const void **)(DerivedStorage + 488);
      int v38 = CFDictionaryCreateMutable(a3, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (v38)
      {
        uint64_t v39 = v38;
        if (v36) {
          CMTime v40 = (const void *)*MEMORY[0x1E4F1CFD0];
        }
        else {
          CMTime v40 = (const void *)*MEMORY[0x1E4F1CFC8];
        }
        CFDictionarySetValue(v38, @"Visuals", v40);
        if (v37) {
          CFDictionarySetValue(v39, @"NeroTransport", v37);
        }
        uint64_t v12 = 0;
        *a4 = v39;
        goto LABEL_21;
      }
      goto LABEL_101;
    }
    if (CFEqual(a2, @"DisplayList"))
    {
      char v17 = *(void **)(DerivedStorage + 672);
      if (!v17) {
        goto LABEL_20;
      }
      goto LABEL_19;
    }
    if (CFEqual(a2, @"ExternalProtectionStatus"))
    {
      uint64_t v11 = fpfs_CopyExternalProtectionStatus((uint64_t)a1, a3, a4);
      goto LABEL_8;
    }
    if (CFEqual(a2, @"MediaSelectionCriteria"))
    {
      char v17 = *(void **)(DerivedStorage + 688);
      if (!v17) {
        goto LABEL_20;
      }
      goto LABEL_19;
    }
    if (CFEqual(a2, @"DefaultMediaSelectionCriteria"))
    {
      FigGetAllocatorForMedia();
      char v17 = FigAutomaticMediaSelectionCopyDefaultCriteria();
      goto LABEL_20;
    }
    if (CFEqual(a2, @"LegibleFallbackMediaSelectionCriteria"))
    {
      char v17 = *(void **)(DerivedStorage + 696);
      if (!v17) {
        goto LABEL_20;
      }
      goto LABEL_19;
    }
    if (CFEqual(a2, @"AllowsLegibleFallbackMediaSelectionCriteriaForAllAudibleMediaSelections"))
    {
      unint64_t v14 = (const void **)MEMORY[0x1E4F1CFD0];
      int v15 = *(unsigned __int8 *)(DerivedStorage + 704);
      goto LABEL_15;
    }
    if (CFEqual(a2, @"AppliesMediaSelectionCriteriaAutomatically"))
    {
      unint64_t v14 = (const void **)MEMORY[0x1E4F1CFD0];
      int v15 = *(unsigned __int8 *)(DerivedStorage + 705);
      goto LABEL_15;
    }
    if (CFEqual(a2, @"MinRateForAudioPlayback"))
    {
      if (!*(unsigned char *)(DerivedStorage + 708)) {
        goto LABEL_30;
      }
      CFAllocatorRef v20 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      p_int valuePtr = (int *)(DerivedStorage + 712);
    }
    else
    {
      if (!CFEqual(a2, @"MaxRateForAudioPlayback"))
      {
        if (CFEqual(a2, @"DestinationPixelBufferAttributes"))
        {
          char v17 = *(void **)(DerivedStorage + 584);
          if (!v17) {
            goto LABEL_20;
          }
          goto LABEL_19;
        }
        if (CFEqual(a2, @"AllowPixelBufferPoolSharing"))
        {
          char v17 = *(void **)(DerivedStorage + 624);
          if (v17) {
            goto LABEL_19;
          }
          unint64_t v14 = (const void **)MEMORY[0x1E4F1CFC8];
          goto LABEL_18;
        }
        if (CFEqual(a2, @"PlayQueueIsHungry"))
        {
          CFIndex v41 = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 72));
          unint64_t v14 = (const void **)MEMORY[0x1E4F1CFD0];
          if (v41) {
            unint64_t v14 = (const void **)MEMORY[0x1E4F1CFC8];
          }
          goto LABEL_18;
        }
        if (CFEqual(a2, @"MultichannelAudioStrategy"))
        {
          char v17 = *(void **)(DerivedStorage + 728);
          goto LABEL_19;
        }
        if (CFEqual(a2, @"BandwidthCap"))
        {
          CFAllocatorRef v20 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
          p_int valuePtr = (int *)(DerivedStorage + 748);
        }
        else if (CFEqual(a2, @"PreferredMaximumBufferDuration"))
        {
          CFAllocatorRef v20 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
          p_int valuePtr = (int *)(DerivedStorage + 752);
        }
        else
        {
          if (CFEqual(a2, @"LimitsBandwidthForCellularAccess"))
          {
            unint64_t v14 = (const void **)MEMORY[0x1E4F1CFD0];
            int v15 = *(unsigned __int8 *)(DerivedStorage + 768);
            goto LABEL_15;
          }
          if (CFEqual(a2, @"AutomaticallyWaitsToMinimizeStalling"))
          {
            unint64_t v14 = (const void **)MEMORY[0x1E4F1CFD0];
            int v15 = *(unsigned __int8 *)(DerivedStorage + 160);
            goto LABEL_15;
          }
          if (!CFEqual(a2, @"PlaybackState"))
          {
            if (CFEqual(a2, @"CaptionPlaybackStrategy"))
            {
              if (*(unsigned char *)(DerivedStorage + 461)) {
                unint64_t v14 = (const void **)&kFigPlayerCaptionRenderingStrategy_CoreTextSubtitleRenderer;
              }
              else {
                unint64_t v14 = (const void **)&kFigPlayerCaptionRenderingStrategy_CaptionDisplayService;
              }
              goto LABEL_18;
            }
            if (CFEqual(a2, @"CaptionPipelineStrategy"))
            {
              if (*(unsigned char *)(DerivedStorage + 460)) {
                unint64_t v14 = (const void **)&kFigPlayerCaptionPipelineStrategy_AttributedStrings;
              }
              else {
                unint64_t v14 = (const void **)&kFigPlayerCaptionPipelineStrategy_FigCaptions;
              }
              goto LABEL_18;
            }
            if (CFEqual(a2, @"PlayerRole"))
            {
              int v42 = *(_DWORD *)(DerivedStorage + 808);
              if (v42 == 2)
              {
                unint64_t v14 = (const void **)&kFigPlayerRole_PIP;
              }
              else
              {
                if (v42 != 1) {
                  goto LABEL_30;
                }
                unint64_t v14 = (const void **)&kFigPlayerRole_Scanning;
              }
LABEL_18:
              char v17 = (void *)*v14;
LABEL_19:
              char v17 = (void *)CFRetain(v17);
LABEL_20:
              uint64_t v12 = 0;
              *a4 = (__CFDictionary *)v17;
              goto LABEL_21;
            }
            if (!CFEqual(a2, @"RequiresNumVideoSlots"))
            {
              uint64_t v12 = 4294954512;
              goto LABEL_21;
            }
            CFAllocatorRef v20 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
            p_int valuePtr = (int *)(DerivedStorage + 400);
            CFNumberType v22 = kCFNumberCFIndexType;
LABEL_40:
            char v17 = CFNumberCreate(v20, v22, p_valuePtr);
            goto LABEL_20;
          }
          int v43 = 0;
          fpfs_getPlaybackState((uint64_t)a1, &v43, 0);
          CFAllocatorRef v20 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
          p_int valuePtr = &v43;
        }
LABEL_49:
        CFNumberType v22 = kCFNumberSInt32Type;
        goto LABEL_40;
      }
      if (!*(unsigned char *)(DerivedStorage + 709)) {
        goto LABEL_30;
      }
      CFAllocatorRef v20 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      p_int valuePtr = (int *)(DerivedStorage + 716);
    }
    CFNumberType v22 = kCFNumberFloat32Type;
    goto LABEL_40;
  }

  return FigSignalErrorAt();
}

uint64_t fpfs_SetProperty(uint64_t a1, const void *a2, uint64_t a3)
{
  return FPSupport_HandlePlayerSetPropertyAndCopyModification(a1, a2, a3, 0, (uint64_t)fpfs_handleSetProperty, 0, 0, 0);
}

void fpfs_InvalidateGuts(void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v40 = 0;
  uint64_t v3 = (void *)MEMORY[0x199711A30]();
  CFTypeRef cf = 0;
  fpfs_RemoveFromPlayQueueGuts(a1, 0, 0);
  fpfs_LockMutexWithCaller((uint64_t)a1);
  if (*(unsigned char *)(DerivedStorage + 51))
  {
    fpfs_UnlockWithCaller();
    CFTypeRef v4 = 0;
  }
  else
  {
    CMNotificationCenterGetDefaultLocalCenter();
    JNvfYIDgz();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    JNvfYIDgz();
    CMNotificationCenterBarrier();
    if (*(unsigned char *)(DerivedStorage + 706))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigGetNotifyingObjectForSelectionCriteriaChanged();
      FigNotificationCenterRemoveWeakListener();
      *(unsigned char *)(DerivedStorage + 706) = 0;
      CMNotificationCenterGetDefaultLocalCenter();
      FigGetNotifyingObjectForSelectionCriteriaChanged();
      CMNotificationCenterBarrier();
    }
    float v5 = *(const void **)(DerivedStorage + 64);
    if (v5)
    {
      CFAllocatorRef v6 = CFGetAllocator(v5);
      CFSetRef Copy = CFSetCreateCopy(v6, *(CFSetRef *)(DerivedStorage + 64));
      if (Copy)
      {
        CFSetRef v8 = Copy;
        CFSetApplyFunction(Copy, (CFSetApplierFunction)fpfs_InvalidateItem, 0);
        CFRelease(v8);
      }
      CFRelease(*(CFTypeRef *)(DerivedStorage + 64));
      *(void *)(DerivedStorage + 64) = 0;
    }
    uint64_t v9 = *(const void **)(DerivedStorage + 72);
    if (v9)
    {
      CFRelease(v9);
      *(void *)(DerivedStorage + 72) = 0;
    }
    fpfs_ResetAudioHardwareFormat((uint64_t)a1);
    uint64_t v10 = *(const void **)(DerivedStorage + 536);
    if (v10)
    {
      CFRelease(v10);
      *(void *)(DerivedStorage + 536) = 0;
    }
    uint64_t v11 = *(const void **)(DerivedStorage + 528);
    if (v11)
    {
      CFRelease(v11);
      *(void *)(DerivedStorage + 528) = 0;
    }
    uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
    FigDeferredTransactionCreate(AllocatorForMedia, (uint64_t *)&cf);
    CFArrayRef v13 = *(const __CFArray **)(DerivedStorage + 384);
    if (v13)
    {
      FPSupport_AppendDeferredTransactionChangeForClearingFigVideoLayers(0, v13, 1, (uint64_t)"fpfs_InvalidateGuts");
      uint64_t v14 = *(void *)(DerivedStorage + 384);
      *(void *)(DerivedStorage + 384) = 0;
    }
    else
    {
      uint64_t v14 = 0;
    }
    uint64_t v15 = *(void *)(DerivedStorage + 376);
    if (v15)
    {
      FPSupport_AppendDeferredTransactionChangeToRelease(cf, v15, (uint64_t)"fpfs_InvalidateGuts");
      *(void *)(DerivedStorage + 376) = 0;
    }
    uint64_t v16 = *(void *)(DerivedStorage + 200);
    if (v16)
    {
      FPSupport_AppendDeferredTransactionChangeToRelease(cf, v16, (uint64_t)"fpfs_InvalidateGuts");
      *(void *)(DerivedStorage + 200) = 0;
    }
    fpfs_releaseTransitionImageQueuesAndSlots();
    fpfs_removeFVTNotificationListeners(*(CFArrayRef *)(DerivedStorage + 432));
    fpfs_removeFVTNotificationListeners(*(CFArrayRef *)(DerivedStorage + 432));
    fpfs_sendEmptyConfigurationToEachVideoTarget((uint64_t)a1, *(const __CFArray **)(DerivedStorage + 432));
    char v17 = *(const void **)(DerivedStorage + 432);
    if (v17)
    {
      CFRelease(v17);
      *(void *)(DerivedStorage + 432) = 0;
    }
    CFArrayRef v18 = *(const void **)(DerivedStorage + 176);
    if (v18)
    {
      CFRelease(v18);
      *(void *)(DerivedStorage + 176) = 0;
    }
    char v19 = *(const void **)(DerivedStorage + 184);
    if (v19)
    {
      CFRelease(v19);
      *(void *)(DerivedStorage + 184) = 0;
    }
    CFAllocatorRef v20 = *(const void **)(DerivedStorage + 584);
    if (v20)
    {
      CFRelease(v20);
      *(void *)(DerivedStorage + 584) = 0;
    }
    int v21 = *(const void **)(DerivedStorage + 688);
    if (v21)
    {
      CFRelease(v21);
      *(void *)(DerivedStorage + 688) = 0;
    }
    CFNumberType v22 = *(const void **)(DerivedStorage + 696);
    if (v22)
    {
      CFRelease(v22);
      *(void *)(DerivedStorage + 696) = 0;
    }
    fpfs_ReleasePlayerHDRPlaybackBaton();
    fpfs_ReleasePlayer4kPlaybackBaton(a1);
    CFArrayRef v23 = *(const void **)(DerivedStorage + 664);
    if (v23)
    {
      CFRelease(v23);
      *(void *)(DerivedStorage + 664) = 0;
    }
    unsigned int v24 = *(const void **)(DerivedStorage + 672);
    if (v24)
    {
      CFRelease(v24);
      *(void *)(DerivedStorage + 672) = 0;
    }
    CFIndex v25 = *(const void **)(DerivedStorage + 904);
    if (v25)
    {
      CFRelease(v25);
      *(void *)(DerivedStorage + 904) = 0;
    }
    CFArrayRef v26 = *(const __CFArray **)(DerivedStorage + 880);
    if (v26)
    {
      while (1)
      {
        CFIndex Count = CFArrayGetCount(v26);
        CFArrayRef v28 = *(const __CFArray **)(DerivedStorage + 880);
        if (!Count) {
          break;
        }
        CFArrayGetValueAtIndex(v28, 0);
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterRemoveWeakListener();
        CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(DerivedStorage + 880), 0);
        CFArrayRef v26 = *(const __CFArray **)(DerivedStorage + 880);
        if (!v26) {
          goto LABEL_46;
        }
      }
      if (v28)
      {
        CFRelease(v28);
        *(void *)(DerivedStorage + 880) = 0;
      }
    }
LABEL_46:
    int v29 = *(const void **)(DerivedStorage + 888);
    if (v29)
    {
      CFRelease(v29);
      *(void *)(DerivedStorage + 888) = 0;
    }
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    if (FPSupport_GetAudioSpatializationPreferencesMonitor())
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FPSupport_GetAudioSpatializationPreferencesMonitor();
      FigNotificationCenterRemoveWeakListener();
    }
    CFArrayRef v30 = *(const void **)(DerivedStorage + 480);
    if (v30)
    {
      CFRelease(v30);
      *(void *)(DerivedStorage + 480) = 0;
    }
    CFAllocatorRef v31 = *(const void **)(DerivedStorage + 488);
    if (v31)
    {
      CFRelease(v31);
      *(void *)(DerivedStorage + 488) = 0;
    }
    if (*(void *)(CMBaseObjectGetDerivedStorage() + 504))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      uint64_t v32 = *(const void **)(DerivedStorage + 504);
      if (v32)
      {
        CFRelease(v32);
        *(void *)(DerivedStorage + 504) = 0;
      }
    }
    CFArrayRef v33 = *(const void **)(DerivedStorage + 56);
    if (v33)
    {
      CFRelease(v33);
      *(void *)(DerivedStorage + 56) = 0;
    }
    BOOL v34 = *(const void **)(DerivedStorage + 728);
    if (v34)
    {
      CFRelease(v34);
      *(void *)(DerivedStorage + 728) = 0;
    }
    BOOL v35 = *(void **)(DerivedStorage + 776);
    if (v35)
    {

      *(void *)(DerivedStorage + 776) = 0;
    }
    int v36 = *(const void **)(DerivedStorage + 600);
    if (v36)
    {
      CFRelease(v36);
      *(void *)(DerivedStorage + 600) = 0;
    }
    int v37 = *(const void **)(DerivedStorage + 848);
    if (v37)
    {
      CFRelease(v37);
      *(void *)(DerivedStorage + 848) = 0;
    }
    int v38 = *(const void **)(DerivedStorage + 856);
    if (v38)
    {
      CFRelease(v38);
      *(void *)(DerivedStorage + 856) = 0;
    }
    FigPropertyStorageInvalidate(*(dispatch_queue_t **)(DerivedStorage + 16));
    FigPlayerResourceArbiterGetGlobalSingleton(&v40);
    if (v40)
    {
      FigPlayerResourceArbiterUnregisterConsumer(v40);
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
    }
    *(unsigned char *)(DerivedStorage + 51) = 1;
    fpfs_UnlockWithCaller();
    CFTypeRef v4 = cf;
    if (v14)
    {
      FPSupport_AppendDeferredTransactionChangeToRelease(cf, v14, (uint64_t)"fpfs_InvalidateGuts");
      CFTypeRef v4 = cf;
    }
  }
  FigDeferredTransactionCommit((uint64_t)v4);
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t fpfs_RemoveFromPlayQueueGuts(void *a1, const void *ValueAtIndex, char a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1E9350BB0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CFSetRef v8 = (_DWORD *)MEMORY[0x1E4F1EBA8];
  if (*MEMORY[0x1E4F1EBA8] == 1)
  {
    if (a1) {
      uint64_t v9 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
    }
    else {
      uint64_t v9 = "";
    }
    strncpy(__dst, v9, 8uLL);
    if (ValueAtIndex) {
      uint64_t v10 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
    }
    else {
      uint64_t v10 = "";
    }
    strncpy(__dst, v10, 8uLL);
    kdebug_trace();
  }
  fpfs_LockMutexWithCaller((uint64_t)a1);
  if (*(unsigned char *)(DerivedStorage + 51))
  {
    uint64_t v20 = 4294954511;
  }
  else
  {
    if (!ValueAtIndex)
    {
      if (CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 72)) < 1)
      {
        CFDictionaryRef ValueAtIndex = 0;
      }
      else
      {
        do
        {
          CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 72), 0);
          CFRetain(ValueAtIndex);
          CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(DerivedStorage + 72), 0);
          CFArrayRef v18 = (unsigned char *)CMBaseObjectGetDerivedStorage();
          v18[463] = 0;
          v18[530] = 1;
          v18[467] = a3;
          fpfsi_ResetPlaybackItem((const __CFArray *)ValueAtIndex, 0);
          fpfs_PostRemovedFromPlayQueueNotifications(a1, ValueAtIndex);
          CFRelease(ValueAtIndex);
        }
        while (CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 72)) > 0);
      }
      if (*(void *)(DerivedStorage + 80))
      {
        uint64_t v19 = CMBaseObjectGetDerivedStorage();
        *(unsigned char *)(v19 + 467) = a3;
        *(unsigned char *)(v19 + 530) = 1;
      }
      *(void *)(DerivedStorage + 648) = @"ReasonRemoveFromPlayqueue";
      fpfs_FlushCurrentPlayback();
      goto LABEL_29;
    }
    if (fpfs_CheckItem((uint64_t)a1, ValueAtIndex))
    {
      uint64_t v11 = (unsigned char *)CMBaseObjectGetDerivedStorage();
      if (!v11[463])
      {
LABEL_33:
        uint64_t v20 = 0;
        goto LABEL_34;
      }
      uint64_t v12 = v11;
      v11[530] = 1;
      v11[467] = a3;
      CFArrayRef v13 = *(const __CFArray **)(DerivedStorage + 72);
      v26.length = CFArrayGetCount(v13);
      v26.location = 0;
      FirstIndexOfCFNumberRef Value = CFArrayGetFirstIndexOfValue(v13, v26, ValueAtIndex);
      if (FirstIndexOfValue == -1)
      {
        *(void *)(DerivedStorage + 648) = @"ReasonRemoveFromPlayqueue";
        fpfs_FlushCurrentPlayback();
        if (!*(void *)(DerivedStorage + 80)) {
          fpfs_PullNextItem(a1);
        }
      }
      else
      {
        CFIndex v15 = FirstIndexOfValue;
        CFArrayRef Next = fpfs_getNext(DerivedStorage, ValueAtIndex);
        CFRetain(ValueAtIndex);
        fpfsi_ResetPlaybackItem((const __CFArray *)ValueAtIndex, 0);
        CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(DerivedStorage + 72), v15);
        v12[463] = 0;
        fpfs_PostRemovedFromPlayQueueNotifications(a1, ValueAtIndex);
        CFRelease(ValueAtIndex);
        char v17 = *(const void **)(DerivedStorage + 80);
        if (v17) {
          fpfsi_MakeNextItemReadyForInspectionIfItemEndedOrBeyondFwdEnd(v17);
        }
        if (Next) {
          fpfs_PerformInitialResolveOfAllWaitingTracks(Next);
        }
      }
LABEL_29:
      if (!fpfs_HaveHDRItem()) {
        fpfs_ReleasePlayerHDRPlaybackBaton();
      }
      if (!fpfs_PlayQueueCallForEachItem((uint64_t)a1, (uint64_t (*)(const __CFArray *, uint64_t))fpfsi_isPlaying4k, 0))fpfs_ReleasePlayer4kPlaybackBaton(a1); {
      goto LABEL_33;
      }
    }
    uint64_t v20 = FigSignalErrorAt();
  }
LABEL_34:
  fpfs_UnlockAndPostNotificationsWithCaller(a1);
  if (*v8 == 1)
  {
    if (a1) {
      int v21 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
    }
    else {
      int v21 = "";
    }
    strncpy(__dst, v21, 8uLL);
    if (ValueAtIndex) {
      CFNumberType v22 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
    }
    else {
      CFNumberType v22 = "";
    }
    strncpy(__dst, v22, 8uLL);
    kdebug_trace();
  }
  return v20;
}

uint64_t fpfs_InvalidateItem(uint64_t a1)
{
  uint64_t result = FigPlaybackItemGetFigBaseObject(a1);
  if (result)
  {
    uint64_t v2 = result;
    uint64_t VTable = CMBaseObjectGetVTable();
    uint64_t v5 = *(void *)(VTable + 8);
    uint64_t result = VTable + 8;
    uint64_t v4 = v5;
    uint64_t v6 = v5 ? v4 : 0;
    uint64_t v7 = *(uint64_t (**)(uint64_t))(v6 + 24);
    if (v7)
    {
      return v7(v2);
    }
  }
  return result;
}

CFIndex fpfs_removeFVTNotificationListeners(CFArrayRef theArray)
{
  CFIndex v2 = 0;
  if (!theArray) {
    goto LABEL_3;
  }
LABEL_2:
  for (CFIndex result = CFArrayGetCount(theArray); v2 < result; CFIndex result = 0)
  {
    CFArrayGetValueAtIndex(theArray, v2);
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    ++v2;
    if (theArray) {
      goto LABEL_2;
    }
LABEL_3:
    ;
  }
  return result;
}

uint64_t fpfs_clientRenderOptionChanged(uint64_t a1, const void *a2)
{
  CMBaseObjectGetDerivedStorage();
  if (a2) {
    CFRetain(a2);
  }
  CMNotificationCenterGetDefaultLocalCenter();
  FigGetAllocatorForMedia();

  return FigDeferNotificationToDispatchQueue();
}

uint64_t fpfs_FVTPreferredDataChannelGroupsChanged(uint64_t a1, const void *a2)
{
  CMBaseObjectGetDerivedStorage();
  if (a2) {
    CFRetain(a2);
  }
  CMNotificationCenterGetDefaultLocalCenter();
  FigGetAllocatorForMedia();

  return FigDeferNotificationToDispatchQueue();
}

void fpfs_externalStartupTaskCompleted(uint64_t a1, const void *a2, uint64_t a3, const void *a4)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  fpfs_LockMutexWithCaller((uint64_t)a2);
  if (*(unsigned char *)(DerivedStorage + 51))
  {
    FigSignalErrorAt();
  }
  else
  {
    CFArrayRef v7 = *(const __CFArray **)(DerivedStorage + 888);
    v12.length = CFArrayGetCount(v7);
    v12.location = 0;
    FirstIndexOfCFNumberRef Value = CFArrayGetFirstIndexOfValue(v7, v12, a4);
    if (FigPlayerStartupTaskDoesAllowStartup((uint64_t)a4)
      && FirstIndexOfValue != -1
      && *(void *)(DerivedStorage + 80))
    {
      if (dword_1E9350BB0)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(DerivedStorage + 888), FirstIndexOfValue);
      fpfs_CheckPrebufferedLevels(*(void *)(DerivedStorage + 80), 1, -1, 0, (uint64_t)v10);
    }
  }
  fpfs_UnlockAndPostNotificationsWithCaller(a2);
}

uint64_t fpfs_prerollLost(uint64_t a1, const void *a2)
{
  CMBaseObjectGetDerivedStorage();
  if (a2) {
    CFRetain(a2);
  }
  CMNotificationCenterGetDefaultLocalCenter();
  FigGetAllocatorForMedia();

  return FigDeferNotificationToDispatchQueue();
}

BOOL fpfs_CheckItem(uint64_t a1, CFTypeRef cf)
{
  if (!cf) {
    return 0;
  }
  CFTypeID v4 = CFGetTypeID(cf);
  if (v4 == FigPlaybackItemGetTypeID()
    && (FigPlaybackItemGetFigBaseObject(cf), (_UNKNOWN *)CMBaseObjectGetVTable() == &kFigPlaybackItemFigVTable)
    && *(void *)CMBaseObjectGetDerivedStorage() == a1)
  {
    return FigRetainProxyIsInvalidated() == 0;
  }
  else
  {
    return 0;
  }
}

void fpfs_FlushCurrentPlayback()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = *(void *)(DerivedStorage + 80);
  if (v1)
  {
    uint64_t v2 = DerivedStorage;
    int v3 = *(_DWORD *)(DerivedStorage + 632);
    *(_DWORD *)(DerivedStorage + 632) = 0;
    fpfs_StopPlayingItemWithOSStatus(DerivedStorage, v1, 4294951599);
    *(_DWORD *)(v2 + 632) = v3;
  }
}

uint64_t fpfsi_Invalidate(const void *a1)
{
  uint64_t v2 = *(void **)CMBaseObjectGetDerivedStorage();
  if (dword_1E9350BB0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!FigRetainProxyIsInvalidated())
  {
    CFRetain(a1);
    fpfs_RemoveFromPlayQueueGuts(v2, a1, 0);
    fpfsi_InvalidateGuts(a1);
    CFRelease(a1);
  }
  return 0;
}

void fpfsi_Finalize(const void *a1)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  fpfsi_InvalidateGuts(a1);
  int v3 = (const void *)DerivedStorage[90];
  if (v3) {
    CFRelease(v3);
  }
  CFTypeID v4 = DerivedStorage[75];
  if (v4)
  {
    dispatch_release(v4);
    DerivedStorage[75] = 0;
  }
  FigRetainProxyRelease();
  DerivedStorage[2] = 0;
  FigSimpleMutexDestroy();
  DerivedStorage[1] = 0;
  FigSimpleMutexDestroy();
  uint64_t v5 = (const void *)DerivedStorage[316];
  if (v5)
  {
    CFRelease(v5);
    DerivedStorage[316] = 0;
  }
  uint64_t v6 = (const void *)DerivedStorage[299];
  if (v6)
  {
    CFRelease(v6);
    DerivedStorage[299] = 0;
  }
  CFArrayRef v7 = (const void *)DerivedStorage[21];
  if (v7)
  {
    CFRelease(v7);
    DerivedStorage[21] = 0;
  }
  CFSetRef v8 = (const void *)DerivedStorage[233];
  if (v8) {
    CFRelease(v8);
  }
  uint64_t v9 = (const void *)DerivedStorage[235];
  if (v9)
  {
    CFRelease(v9);
    DerivedStorage[235] = 0;
  }
  uint64_t v10 = (const void *)DerivedStorage[419];
  if (v10)
  {
    CFRelease(v10);
    DerivedStorage[419] = 0;
  }
  uint64_t v11 = (const void *)DerivedStorage[420];
  if (v11) {
    CFRelease(v11);
  }

  bzero(DerivedStorage, 0xD68uLL);
}

uint64_t fpfsi_CopyProperty(const void *a1, const void *a2, const __CFAllocator *a3, CFArrayRef *a4)
{
  uint64_t v90 = *MEMORY[0x1E4F143B8];
  if (a4)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    uint64_t v9 = *(const void **)DerivedStorage;
    CMBaseObjectGetDerivedStorage();
    if (!FigPropertyStorageCopyValue(*(void *)(DerivedStorage + 168), (uint64_t)a2, a4)) {
      return 0;
    }
    fpfs_LockMutexWithCaller((uint64_t)v9);
    if (FigRetainProxyIsInvalidated()) {
      goto LABEL_31;
    }
    if (CFEqual(a2, @"SeekableTimeIntervals"))
    {
      uint64_t TrackIDArray = fpfsi_copySeekableTime((uint64_t)a1, a4);
LABEL_16:
      uint64_t Duration = TrackIDArray;
LABEL_17:
      fpfs_UnlockAndPostNotificationsWithCaller(v9);
      return Duration;
    }
    if (CFEqual(a2, @"PlayableTimeIntervals"))
    {
      uint64_t TrackIDArray = fpfsi_copyPlayableTime((uint64_t)a1, (CFTypeRef *)a4);
      goto LABEL_16;
    }
    if (CFEqual(a2, @"currentDate"))
    {
      uint64_t TrackIDArray = fpfsi_CopyCurrentDate((uint64_t)a1, a4);
      goto LABEL_16;
    }
    if (CFEqual(a2, @"currentDateAndTime"))
    {
      uint64_t TrackIDArray = fpfsi_CopyCurrentDateAndTime((uint64_t)a1, a4);
      goto LABEL_16;
    }
    if (CFEqual(a2, @"estimatedCurrentDate"))
    {
      long long valuePtr = 0uLL;
      *(void *)&valuePtr_16[0] = 0;
      fpfs_GetTime(DerivedStorage, (uint64_t)&valuePtr);
      memset(&time, 0, sizeof(time));
      *(_OWORD *)&lhs.unsigned int value = valuePtr;
      lhs.CMTimeEpoch epoch = *(void *)&valuePtr_16[0];
      CMTime rhs = *(CMTime *)(DerivedStorage + 1184);
      CMTimeAdd(&time, &lhs, &rhs);
      uint64_t v13 = *(void *)(DerivedStorage + 936);
      if (v13)
      {
        CMTime lhs = time;
        uint64_t TrackIDArray = FigBytePumpCopyEstimatedDateForTime(v13, (long long *)&lhs.value, (uint64_t)a4);
        goto LABEL_16;
      }
LABEL_33:
      uint64_t Duration = 4294954513;
      goto LABEL_17;
    }
    if (CFEqual(a2, @"currentDatePeriod"))
    {
      uint64_t TrackIDArray = fpfsi_CopyCurrentDatePeriod((uint64_t)a1, a4);
      goto LABEL_16;
    }
    if (CFEqual(a2, @"Timebase"))
    {
      CFStringRef Tag = *(CFStringRef *)(DerivedStorage + 584);
      if (!Tag)
      {
LABEL_27:
        uint64_t Duration = 0;
LABEL_28:
        *a4 = (CFArrayRef)Tag;
        goto LABEL_17;
      }
LABEL_26:
      CFStringRef Tag = (CFStringRef)CFRetain(Tag);
      goto LABEL_27;
    }
    if (CFEqual(a2, @"Lyrics"))
    {
      uint64_t Duration = 4294954514;
      goto LABEL_17;
    }
    if (CFEqual(a2, @"AvailableAlternateTrackGroups")) {
      goto LABEL_33;
    }
    if (CFEqual(a2, @"ChosenAlternateTrackIDDictionary"))
    {
      uint64_t TrackIDArray = fpfsi_copyChosenAlternateTrackIDsDictionary((uint64_t)a1, a3, a4);
      goto LABEL_16;
    }
    if (CFEqual(a2, @"EstimatedDuration"))
    {
      long long valuePtr = 0uLL;
      *(void *)&valuePtr_16[0] = 0;
      uint64_t Duration = fpfsi_GetDuration((uint64_t)a1, &valuePtr);
      if (Duration) {
        goto LABEL_17;
      }
      *(_OWORD *)&time.unsigned int value = valuePtr;
      time.CMTimeEpoch epoch = *(void *)&valuePtr_16[0];
      p_CMTime time = &time;
      goto LABEL_39;
    }
    if (CFEqual(a2, @"AccurateDuration")) {
      goto LABEL_33;
    }
    if (CFEqual(a2, @"EndTime"))
    {
      if ((*(_DWORD *)(DerivedStorage + 1388) & 0x1D) == 1)
      {
        long long valuePtr = *(_OWORD *)(DerivedStorage + 1376);
        uint64_t v16 = *(void *)(DerivedStorage + 1392);
      }
      else
      {
        if ((*(unsigned char *)(DerivedStorage + 492) & 1) == 0)
        {
          memset(&time, 0, sizeof(time));
          uint64_t Duration = fpfsi_GetDuration((uint64_t)a1, (long long *)&time.value);
          if (Duration || (time.flags & 0x1D) != 1)
          {
            long long valuePtr = *(_OWORD *)&time.value;
            *(void *)&valuePtr_16[0] = time.epoch;
            p_CMTime time = (CMTime *)&valuePtr;
          }
          else
          {
            memset(valuePtr_16, 0, sizeof(valuePtr_16));
            long long valuePtr = 0u;
            fpfsi_getSeekableTimeRange((uint64_t)a1, &valuePtr);
            *(_OWORD *)&lhs.unsigned int value = valuePtr;
            lhs.CMTimeEpoch epoch = *(void *)&valuePtr_16[0];
            CMTime rhs = *(CMTime *)((char *)valuePtr_16 + 8);
            CMTimeAdd(&v84, &lhs, &rhs);
            p_CMTime time = &v84;
          }
LABEL_39:
          CFStringRef Tag = (CFStringRef)CMTimeCopyAsDictionary(p_time, a3);
          goto LABEL_28;
        }
        long long valuePtr = *(_OWORD *)(DerivedStorage + 480);
        uint64_t v16 = *(void *)(DerivedStorage + 496);
      }
      goto LABEL_53;
    }
    if (CFEqual(a2, @"ReverseEndTime"))
    {
      memset(valuePtr_16, 0, sizeof(valuePtr_16));
      long long valuePtr = 0u;
      fpfsi_getSeekableTimeRange((uint64_t)a1, &valuePtr);
      *(_OWORD *)&time.unsigned int value = valuePtr;
      time.CMTimeEpoch epoch = *(void *)&valuePtr_16[0];
      p_long long valuePtr = &time;
LABEL_55:
      CFAllocatorRef v18 = a3;
LABEL_56:
      CFStringRef Tag = (CFStringRef)CMTimeCopyAsDictionary(p_valuePtr, v18);
      goto LABEL_27;
    }
    if (CFEqual(a2, @"TimeToPauseBuffering"))
    {
      long long valuePtr = *(_OWORD *)(DerivedStorage + 1424);
      uint64_t v16 = *(void *)(DerivedStorage + 1440);
LABEL_53:
      *(void *)&valuePtr_16[0] = v16;
LABEL_54:
      p_long long valuePtr = (CMTime *)&valuePtr;
      goto LABEL_55;
    }
    if (CFEqual(a2, @"TimeToPausePlayback"))
    {
      uint64_t v19 = (long long *)(DerivedStorage + 1448);
      uint64_t v20 = *(void *)(DerivedStorage + 1464);
LABEL_60:
      *(void *)&valuePtr_16[0] = v20;
      long long valuePtr = *v19;
      goto LABEL_54;
    }
    if (CFEqual(a2, @"BasicsReadyForInspection"))
    {
      int v21 = (CFStringRef *)MEMORY[0x1E4F1CFD0];
      int v22 = *(unsigned __int8 *)(DerivedStorage + 460);
LABEL_63:
      CFArrayRef v23 = (CFStringRef *)MEMORY[0x1E4F1CFC8];
      goto LABEL_64;
    }
    if (CFEqual(a2, @"CleanApertureRectangle"))
    {
      uint64_t RenderingTrackofType = fpfs_FirstRenderingTrackofType((uint64_t)a1, 1986618469);
      if (!RenderingTrackofType) {
        goto LABEL_33;
      }
      uint64_t v25 = *(const opaqueCMFormatDescription **)(RenderingTrackofType + 40);
      if (!v25) {
        goto LABEL_33;
      }
      CGRect CleanAperture = CMVideoFormatDescriptionGetCleanAperture(v25, 0);
      CFDictionaryRef DictionaryRepresentation = CGRectCreateDictionaryRepresentation(CleanAperture);
      goto LABEL_75;
    }
    if (CFEqual(a2, @"EncodedDimensions"))
    {
      uint64_t v27 = fpfs_FirstRenderingTrackofType((uint64_t)a1, 1986618469);
      if (!v27) {
        goto LABEL_33;
      }
      CFArrayRef v28 = *(const opaqueCMFormatDescription **)(v27 + 40);
      if (!v28) {
        goto LABEL_33;
      }
      CMVideoDimensions Dimensions = CMVideoFormatDescriptionGetDimensions(v28);
      v92.double width = (double)Dimensions.width;
      v92.double height = (double)Dimensions.height;
      CFDictionaryRef DictionaryRepresentation = CGSizeCreateDictionaryRepresentation(v92);
LABEL_75:
      *a4 = DictionaryRepresentation;
      goto LABEL_33;
    }
    if (CFEqual(a2, @"VideoTrackMatrix"))
    {
      CFArrayRef v30 = *(const void **)(DerivedStorage + 3344);
      if (v30)
      {
        CFStringRef Tag = (CFStringRef)CFRetain(v30);
      }
      else
      {
        long long v31 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 16);
        long long valuePtr = *MEMORY[0x1E4F1DAB8];
        long long v32 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 32);
        valuePtr_16[0] = v31;
        valuePtr_16[1] = v32;
        CFStringRef Tag = (CFStringRef)FigCreate3x3MatrixArrayFromCGAffineTransform(a3, &valuePtr);
      }
      if (Tag) {
        goto LABEL_27;
      }
LABEL_31:
      uint64_t TrackIDArray = FigSignalErrorAt();
      goto LABEL_16;
    }
    if (CFEqual(a2, @"TrackIDArray") || CFEqual(a2, @"ChosenTrackIDArray"))
    {
      uint64_t TrackIDArray = fpfsi_createTrackIDArray(a3, (uint64_t)a1, a4);
      goto LABEL_16;
    }
    if (CFEqual(a2, @"HasEnabledAudio"))
    {
      int v21 = (CFStringRef *)MEMORY[0x1E4F1CFD0];
      int v22 = *(unsigned __int8 *)(DerivedStorage + 777);
      goto LABEL_63;
    }
    if (CFEqual(a2, @"HasEnabledVideo"))
    {
      int v21 = (CFStringRef *)MEMORY[0x1E4F1CFD0];
      int v22 = *(unsigned __int8 *)(DerivedStorage + 778);
      goto LABEL_63;
    }
    if (CFEqual(a2, @"HasDiscoveredVideo"))
    {
      int v21 = (CFStringRef *)MEMORY[0x1E4F1CFD0];
      int v22 = *(unsigned __int8 *)(DerivedStorage + 779);
      goto LABEL_63;
    }
    if (CFEqual(a2, @"EQPreset"))
    {
      CFAllocatorRef v33 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      p_CMTime rhs = (CMTime *)(DerivedStorage + 876);
      CFNumberType v35 = kCFNumberIntType;
LABEL_93:
      CFStringRef Tag = (CFStringRef)CFNumberCreate(v33, v35, p_rhs);
      goto LABEL_27;
    }
    if (CFEqual(a2, @"SynchronizedLayers"))
    {
      CFStringRef Tag = *(CFStringRef *)(DerivedStorage + 696);
      if (!Tag) {
        goto LABEL_27;
      }
      goto LABEL_26;
    }
    if (CFEqual(a2, @"ReadBandwidth"))
    {
      uint64_t v36 = *(void *)(DerivedStorage + 936);
      if (!v36) {
        goto LABEL_33;
      }
      int v37 = @"FBP_NetworkBandwidth";
      goto LABEL_100;
    }
    if (CFEqual(a2, @"AvailableFileSize") || CFEqual(a2, @"FileSize")) {
      goto LABEL_33;
    }
    if (CFEqual(a2, @"AudioDeviceChannelMap"))
    {
      *a4 = *(CFArrayRef *)(DerivedStorage + 1808);
      int v38 = *(const void **)(DerivedStorage + 1808);
      if (v38) {
        CFRetain(v38);
      }
      goto LABEL_106;
    }
    if (CFEqual(a2, @"MovieMatrix")
      || CFEqual(a2, @"ChapterNames")
      || CFEqual(a2, @"ChapterImageInfoArray")
      || CFEqual(a2, @"ChapterHREFs"))
    {
      goto LABEL_33;
    }
    if (CFEqual(a2, @"ApertureMode"))
    {
      if (*(unsigned char *)(DerivedStorage + 872))
      {
        int v21 = (CFStringRef *)&kFigPlaybackItemApertureMode_CleanAperture;
        int v22 = *(unsigned __int8 *)(DerivedStorage + 873);
        CFArrayRef v23 = (CFStringRef *)&kFigPlaybackItemApertureMode_ProductionAperture;
LABEL_64:
        if (!v22) {
          int v21 = v23;
        }
        goto LABEL_66;
      }
      int v21 = (CFStringRef *)&kFigPlaybackItemApertureMode_EncodedPixels;
LABEL_66:
      CFStringRef Tag = *v21;
      goto LABEL_26;
    }
    if (CFEqual(a2, @"QualityGear"))
    {
      if (*(void *)(DerivedStorage + 936) && *(void *)(DerivedStorage + 1704))
      {
        uint64_t TrackIDArray = fpfsi_copyPlaybackRateMonitorProperty(DerivedStorage, @"AfmfpbProperty_QualityGear", (uint64_t)a4);
        goto LABEL_16;
      }
      goto LABEL_33;
    }
    if (CFEqual(a2, @"AlternateStreamInformation"))
    {
      uint64_t TrackIDArray = fpfsi_copyAlternateStreamInformation(DerivedStorage, a3, a4);
      goto LABEL_16;
    }
    if (CFEqual(a2, @"BufferState"))
    {
      if (*(_DWORD *)(DerivedStorage + 1888)) {
        int v21 = (CFStringRef *)&kFigPlaybackItemBufferState_Full;
      }
      else {
        int v21 = (CFStringRef *)&kFigPlaybackItemBufferState_Filling;
      }
      goto LABEL_66;
    }
    if (CFEqual(a2, @"WillKeepUpPrediction"))
    {
      if (*(_DWORD *)(DerivedStorage + 524) == 1) {
        int v21 = (CFStringRef *)&kFigPlaybackItemWillKeepUpPrediction_LikelyToKeepUp;
      }
      else {
        int v21 = (CFStringRef *)&kFigPlaybackItemWillKeepUpPrediction_UnlikelyToKeepUp;
      }
      goto LABEL_66;
    }
    if (CFEqual(a2, @"RestrictsAutomaticMediaSelectionToAvailableOfflineOptions"))
    {
      int v21 = (CFStringRef *)MEMORY[0x1E4F1CFD0];
      int v22 = *(unsigned __int8 *)(DerivedStorage + 1836);
      goto LABEL_63;
    }
    if (CFEqual(a2, @"RequiresExternalProtection"))
    {
      CFArrayRef v39 = (const __CFArray *)*MEMORY[0x1E4F1CFC8];
      CFNumberRef v40 = *(const __CFNumber **)(DerivedStorage + 1840);
      if (v40)
      {
        *(void *)&long long valuePtr = 0;
        CFNumberGetValue(v40, kCFNumberSInt64Type, &valuePtr);
        CFArrayRef v41 = (const __CFArray *)*MEMORY[0x1E4F1CFD0];
        if ((void)valuePtr) {
          CFArrayRef v42 = (const __CFArray *)*MEMORY[0x1E4F1CFD0];
        }
        else {
          CFArrayRef v42 = v39;
        }
        if (v42 != v39) {
          goto LABEL_147;
        }
      }
      else
      {
        CFArrayRef v41 = (const __CFArray *)*MEMORY[0x1E4F1CFD0];
      }
      int ExternalProtectionMethodRequiredForPlayback = fpfsi_GetExternalProtectionMethodRequiredForPlayback();
      if (ExternalProtectionMethodRequiredForPlayback) {
        CFArrayRef v42 = v41;
      }
      else {
        CFArrayRef v42 = v39;
      }
      *(_DWORD *)(DerivedStorage + 2976) = ExternalProtectionMethodRequiredForPlayback;
LABEL_147:
      uint64_t Duration = 0;
      *a4 = v42;
      goto LABEL_17;
    }
    if (CFEqual(a2, @"AccessLog"))
    {
      if (!*(void *)(DerivedStorage + 1912)) {
        goto LABEL_33;
      }
      *(void *)&long long valuePtr = 0;
      fpfs_UpdateCurrentAccessLogEntryPlayTimes(DerivedStorage);
      if (*(unsigned char *)(DerivedStorage + 2128))
      {
        BOOL v43 = fpfs_CreateAccessLogEntryWithUnlock((uint64_t)a1, (CFMutableDictionaryRef *)&valuePtr) == 0;
        CFTypeRef v44 = (__CFDictionary *)valuePtr;
      }
      else
      {
        CFTypeRef v44 = 0;
        BOOL v43 = 1;
      }
      if (v44) {
        uint64_t Duration = v43;
      }
      else {
        uint64_t Duration = 0;
      }
      CFArrayRef v47 = *(const __CFArray **)(DerivedStorage + 1912);
      if (v47)
      {
        CFMutableArrayRef MutableCopy = CFArrayCreateMutableCopy(a3, 0, v47);
        if (MutableCopy)
        {
          if (Duration)
          {
            uint64_t v49 = *(const void **)(DerivedStorage + 2584);
            if (v49) {
              CFDictionarySetValue(v44, @"c-startup_perf", v49);
            }
            CFArrayAppendValue(MutableCopy, v44);
            uint64_t Duration = 0;
            *a4 = MutableCopy;
LABEL_177:
            uint64_t v52 = v44;
            goto LABEL_329;
          }
        }
        else
        {
          uint64_t Duration = FigSignalErrorAt();
        }
      }
      else
      {
        CFMutableArrayRef MutableCopy = 0;
        uint64_t Duration = 0;
      }
      *a4 = MutableCopy;
      if (!v44) {
        goto LABEL_17;
      }
      goto LABEL_177;
    }
    if (CFEqual(a2, @"ErrorLog"))
    {
      uint64_t v46 = *(void *)(DerivedStorage + 936);
      if (v46)
      {
        if (*(void *)(DerivedStorage + 1920))
        {
          CFRelease(*(CFTypeRef *)(DerivedStorage + 1920));
          *(void *)(DerivedStorage + 1920) = 0;
          uint64_t v46 = *(void *)(DerivedStorage + 936);
        }
        uint64_t Duration = FigBytePumpCopyProperty(v46, 0x1EE53E3D8, (uint64_t)a3, DerivedStorage + 1920);
      }
      else
      {
        uint64_t Duration = 0;
      }
      CFArrayRef v50 = *(const __CFArray **)(DerivedStorage + 1920);
      if (!v50) {
        goto LABEL_33;
      }
      PublicCFArrayRef Copy = FigErrorLogCreatePublicCopy(a3, v50);
      *a4 = PublicCopy;
      if (PublicCopy) {
        goto LABEL_17;
      }
      goto LABEL_31;
    }
    if (CFEqual(a2, @"CanPlayFastForward")
      || CFEqual(a2, @"CanPlayFastReverse")
      || CFEqual(a2, @"CanPlayReverse"))
    {
      if (!*(void *)(DerivedStorage + 936)) {
        goto LABEL_33;
      }
      if (*(void *)(DerivedStorage + 40) && *(unsigned char *)(DerivedStorage + 1737) == 1) {
        goto LABEL_366;
      }
LABEL_367:
      int v21 = (CFStringRef *)MEMORY[0x1E4F1CFC8];
      goto LABEL_66;
    }
    if (CFEqual(a2, @"SupportsFrameStepping")) {
      goto LABEL_367;
    }
    if (CFEqual(a2, @"MediaSelectionArray"))
    {
      CFStringRef Tag = *(CFStringRef *)(DerivedStorage + 1696);
      if (!Tag) {
        goto LABEL_33;
      }
      goto LABEL_26;
    }
    if (CFEqual(a2, @"SelectedMediaArray"))
    {
      CFArrayRef v53 = *(const __CFArray **)(DerivedStorage + 1792);
      if (!v53) {
        goto LABEL_33;
      }
LABEL_203:
      CFArrayRef Copy = CFArrayCreateCopy(a3, v53);
      *a4 = Copy;
      if (!Copy) {
        goto LABEL_31;
      }
LABEL_106:
      uint64_t Duration = 0;
      goto LABEL_17;
    }
    if (CFEqual(a2, @"PreferredMaximumBufferDuration"))
    {
      CFAllocatorRef v54 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      uint64_t v55 = (const void *)(DerivedStorage + 2240);
LABEL_270:
      CFNumberType v57 = kCFNumberSInt32Type;
LABEL_271:
      CFStringRef Tag = (CFStringRef)CFNumberCreate(v54, v57, v55);
      if (!Tag)
      {
        uint64_t Duration = 4294954510;
        goto LABEL_17;
      }
      goto LABEL_27;
    }
    if (CFEqual(a2, @"MaximumTrailingBufferDuration"))
    {
      CFAllocatorRef v54 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      uint64_t v55 = (const void *)(DerivedStorage + 2288);
      goto LABEL_270;
    }
    if (CFEqual(a2, @"TextMarkupArray"))
    {
      CFStringRef Tag = *(CFStringRef *)(DerivedStorage + 1816);
      if (!Tag) {
        goto LABEL_27;
      }
      goto LABEL_26;
    }
    if (CFEqual(a2, @"TextHighlightArray"))
    {
      CFStringRef Tag = *(CFStringRef *)(DerivedStorage + 1824);
      if (!Tag) {
        goto LABEL_27;
      }
      goto LABEL_26;
    }
    if (CFEqual(a2, @"LegibleOutputs"))
    {
      CFStringRef Tag = *(CFStringRef *)(DerivedStorage + 1872);
      if (!Tag) {
        goto LABEL_27;
      }
      goto LABEL_26;
    }
    if (CFEqual(a2, @"MetadataOutputs"))
    {
      CFStringRef Tag = (CFStringRef)FigXMLNodeGetTag(*(void *)(DerivedStorage + 1880));
      if (!Tag) {
        goto LABEL_27;
      }
      goto LABEL_26;
    }
    if (CFEqual(a2, @"VisualContextArray"))
    {
      CFArrayRef v53 = *(const __CFArray **)(DerivedStorage + 864);
      if (v53) {
        goto LABEL_203;
      }
LABEL_381:
      uint64_t Duration = 0;
      *a4 = 0;
      goto LABEL_17;
    }
    if (CFEqual(a2, @"Volume"))
    {
      CFAllocatorRef v54 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      uint64_t v55 = (const void *)(DerivedStorage + 1832);
      CFNumberType v57 = kCFNumberFloat32Type;
      goto LABEL_271;
    }
    if (CFEqual(a2, @"DisplayNonForcedSubtitles"))
    {
      uint64_t v58 = (CFStringRef *)MEMORY[0x1E4F1CFD0];
      int v59 = *(unsigned __int8 *)(DerivedStorage + 531);
    }
    else if (CFEqual(a2, @"allowProgressiveSwitchUp"))
    {
      uint64_t v58 = (CFStringRef *)MEMORY[0x1E4F1CFD0];
      int v59 = *(unsigned __int8 *)(DerivedStorage + 554);
    }
    else if (CFEqual(a2, @"allowProgressiveStartup"))
    {
      uint64_t v58 = (CFStringRef *)MEMORY[0x1E4F1CFD0];
      int v59 = *(unsigned __int8 *)(DerivedStorage + 555);
    }
    else
    {
      if (!CFEqual(a2, @"allowProgressiveResume"))
      {
        if (CFEqual(a2, @"AutomaticallyLoadedAssetProperties"))
        {
          CFStringRef Tag = *(CFStringRef *)(DerivedStorage + 144);
          if (!Tag) {
            goto LABEL_27;
          }
          goto LABEL_26;
        }
        if (CFEqual(a2, @"AutomaticallyLoadedAssetTrackProperties"))
        {
          CFStringRef Tag = *(CFStringRef *)(DerivedStorage + 152);
          if (!Tag) {
            goto LABEL_27;
          }
          goto LABEL_26;
        }
        if (CFEqual(a2, @"MediaKind"))
        {
          CFStringRef Tag = *(CFStringRef *)(DerivedStorage + 2368);
          if (!Tag) {
            goto LABEL_27;
          }
          goto LABEL_26;
        }
        if (CFEqual(a2, @"TimePitchAlgorithm"))
        {
          CFStringRef Tag = *(CFStringRef *)(DerivedStorage + 880);
          if (!Tag) {
            goto LABEL_27;
          }
          goto LABEL_26;
        }
        if (CFEqual(a2, @"CanPlayUpTo2xForward")) {
          goto LABEL_366;
        }
        if (CFEqual(a2, @"BandwidthCap"))
        {
          CFAllocatorRef v54 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
          uint64_t v55 = (const void *)(DerivedStorage + 2388);
          goto LABEL_270;
        }
        if (CFEqual(a2, @"BandwidthCapForExpensiveNetwork"))
        {
          CFStringRef Tag = *(CFStringRef *)(DerivedStorage + 2392);
          if (!Tag) {
            goto LABEL_27;
          }
          goto LABEL_26;
        }
        if (CFEqual(a2, @"TimeOffsetFromLive"))
        {
          uint64_t v36 = *(void *)(DerivedStorage + 936);
          if (!v36)
          {
            uint64_t v19 = (long long *)(DerivedStorage + 632);
            uint64_t v20 = *(void *)(DerivedStorage + 648);
            goto LABEL_60;
          }
          int v37 = @"FBP_PrebufferReservation";
LABEL_100:
          uint64_t TrackIDArray = FigBytePumpCopyProperty(v36, (uint64_t)v37, (uint64_t)a3, (uint64_t)a4);
          goto LABEL_16;
        }
        if (CFEqual(a2, @"RecommendedTimeOffsetFromLive"))
        {
          uint64_t TrackIDArray = fpfsi_CopyPumpSecondsPropertyAsTime(DerivedStorage, 0x1EE53E698, a3, a4);
          goto LABEL_16;
        }
        if (CFEqual(a2, @"AutomaticallyPreservesTimeOffsetFromLive"))
        {
          int v21 = (CFStringRef *)MEMORY[0x1E4F1CFD0];
          int v22 = *(unsigned __int8 *)(DerivedStorage + 465);
          goto LABEL_63;
        }
        if (CFEqual(a2, @"HasEnqueuedFirstVideoFrame"))
        {
          CFTypeRef v60 = fpfsi_copyCurrentVideoDestination((uint64_t)a1);
          if (v60)
          {
            long long v61 = v60;
            int IsAnyOutputReadyToRender = FigAggregateVideoDestinationIsAnyOutputReadyToRender((uint64_t)v60);
            CFRelease(v61);
          }
          else
          {
            uint64_t v63 = *(void *)(DerivedStorage + 720);
            if (!v63) {
              goto LABEL_367;
            }
            int IsAnyOutputReadyToRender = FigImageQueueTableWasFirstImageEnqueued(v63);
          }
          if (!IsAnyOutputReadyToRender) {
            goto LABEL_367;
          }
        }
        else
        {
          if (CFEqual(a2, @"ImageQueueGauge"))
          {
            CFStringRef Tag = (CFStringRef)fpfsi_copyImageQueueGauge(a1);
            goto LABEL_27;
          }
          if (CFEqual(a2, @"PriorImageQueueGauge"))
          {
            CFStringRef Tag = *(CFStringRef *)(DerivedStorage + 728);
            if (!Tag) {
              goto LABEL_27;
            }
            goto LABEL_26;
          }
          if (CFEqual(a2, @"TaggedRangeMetadataArray"))
          {
            CMTime v64 = *(const void **)(DerivedStorage + 2600);
            if (v64) {
              *a4 = (CFArrayRef)CFRetain(v64);
            }
            else {
              fpfsi_UpdateTaggedRangeMetadataFromPumpAndNotifyIfNeeded(v9, a1, 0, 0);
            }
            if (*(void *)(DerivedStorage + 2600)) {
              uint64_t Duration = 0;
            }
            else {
              uint64_t Duration = 4294954513;
            }
            goto LABEL_17;
          }
          if (CFEqual(a2, @"CountOfTaggedRangeMetadataArrayListeners"))
          {
            CFAllocatorRef v54 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
            uint64_t v55 = (const void *)(DerivedStorage + 2608);
            CFNumberType v57 = kCFNumberCFIndexType;
            goto LABEL_271;
          }
          if (CFEqual(a2, @"MinimizeNetworkingWhilePaused"))
          {
            int v21 = (CFStringRef *)MEMORY[0x1E4F1CFD0];
            int v22 = *(unsigned __int8 *)(DerivedStorage + 532);
            goto LABEL_63;
          }
          if (CFEqual(a2, @"VariantPreferences"))
          {
            CFAllocatorRef v54 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
            uint64_t v55 = (const void *)(DerivedStorage + 560);
            goto LABEL_270;
          }
          if (CFEqual(a2, @"AudioSampleRateCap"))
          {
            CFAllocatorRef v33 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
            p_CMTime rhs = (CMTime *)(DerivedStorage + 2520);
            CFNumberType v35 = kCFNumberDoubleType;
            goto LABEL_93;
          }
          if (CFEqual(a2, @"SuppressesAudioOnlyVariants"))
          {
            int v21 = (CFStringRef *)MEMORY[0x1E4F1CFD0];
            int v22 = *(unsigned __int8 *)(DerivedStorage + 558);
            goto LABEL_63;
          }
          if (CFEqual(a2, @"LiveUpdateInterval"))
          {
            *(void *)&long long valuePtr = 0;
            uint64_t v65 = *(void *)(DerivedStorage + 936);
            if (!v65) {
              goto LABEL_33;
            }
            uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
            unsigned int v67 = FigBytePumpCopyProperty(v65, 0x1EE53E9F8, AllocatorForMedia, (uint64_t)&valuePtr);
            CFArrayRef v42 = (const __CFArray *)valuePtr;
            if (!(void)valuePtr || v67)
            {
              if (v67) {
                uint64_t Duration = v67;
              }
              else {
                uint64_t Duration = 4294954510;
              }
              goto LABEL_17;
            }
            goto LABEL_147;
          }
          if (CFEqual(a2, @"ProgressToPlayThrough"))
          {
            LODWORD(rhs.value) = 0;
            if (*(_DWORD *)(DerivedStorage + 524) == 1
              || (uint64_t v68 = *(void *)(DerivedStorage + 1704)) != 0 && FigAlternateIsIFrameOnly(v68)
              || *(void *)(DerivedStorage + 2968))
            {
              LODWORD(rhs.value) = 1065353216;
            }
            else if (*(void *)(DerivedStorage + 936))
            {
              memset(&time, 0, sizeof(time));
              fpfs_GetItemBufferedDuration((const __CFArray *)a1, &time, (CMTime *)&valuePtr, 0);
              CMTime lhs = time;
              fpfs_IsItemReadyToStart((uint64_t)a1, &lhs, (uint64_t)&valuePtr, (float *)&rhs, 0, 0);
            }
            CFAllocatorRef v33 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
            p_CMTime rhs = &rhs;
            CFNumberType v35 = kCFNumberFloat32Type;
            goto LABEL_93;
          }
          if (CFEqual(a2, @"AudioSpatializationAllowed"))
          {
            int v21 = (CFStringRef *)MEMORY[0x1E4F1CFD0];
            int v22 = *(unsigned __int8 *)(DerivedStorage + 893);
            goto LABEL_63;
          }
          if (CFEqual(a2, @"StereoAudioSpatializationAllowed"))
          {
            int v21 = (CFStringRef *)MEMORY[0x1E4F1CFD0];
            int v22 = *(unsigned __int8 *)(DerivedStorage + 894);
            goto LABEL_63;
          }
          if (CFEqual(a2, @"IsRenderingSpatialAudio"))
          {
            uint64_t v69 = fpfs_FirstRenderingTrackofType((uint64_t)a1, 1936684398);
            uint64_t v70 = (CFStringRef *)MEMORY[0x1E4F1CFC8];
            if (v69)
            {
              uint64_t v71 = v69;
              CFDictionaryRef CurrentAudioPersistentIDFromMediaOption = fpfsi_GetCurrentAudioPersistentIDFromMediaOption();
              LODWORD(v71) = FigAlternateGetImmersiveAudioCapability(*(const void **)(v71 + 440), CurrentAudioPersistentIDFromMediaOption);
              int SpatializationConfiguration = fpfsi_GetSpatializationConfiguration((uint64_t)a1);
              if (v71 == 3 || SpatializationConfiguration == 1) {
                uint64_t v70 = (CFStringRef *)MEMORY[0x1E4F1CFD0];
              }
            }
            CFStringRef Tag = *v70;
            goto LABEL_26;
          }
          if (CFEqual(a2, @"LoudnessInfo"))
          {
            CFStringRef Tag = *(CFStringRef *)(DerivedStorage + 2376);
            if (!Tag) {
              goto LABEL_27;
            }
            goto LABEL_26;
          }
          if (CFEqual(a2, @"AudioProcessingTap"))
          {
            CFStringRef Tag = *(CFStringRef *)(DerivedStorage + 3112);
            if (!Tag) {
              goto LABEL_27;
            }
            goto LABEL_26;
          }
          if (CFEqual(a2, @"AudioProcessingUnits"))
          {
            CFStringRef Tag = *(CFStringRef *)(DerivedStorage + 3120);
            if (!Tag) {
              goto LABEL_27;
            }
            goto LABEL_26;
          }
          if (CFEqual(a2, @"AudioCurves"))
          {
            CFStringRef Tag = *(CFStringRef *)(DerivedStorage + 3128);
            if (!Tag) {
              goto LABEL_27;
            }
            goto LABEL_26;
          }
          if (CFEqual(a2, @"PreferSDRVideo"))
          {
            int v21 = (CFStringRef *)MEMORY[0x1E4F1CFD0];
            int v22 = *(unsigned __int8 *)(DerivedStorage + 896);
            goto LABEL_63;
          }
          if (CFEqual(a2, @"ConfigurationGroup"))
          {
            uint64_t v75 = *(void *)(DerivedStorage + 936);
            if (!v75) {
              goto LABEL_33;
            }
            *(void *)&long long valuePtr = 0;
            uint64_t v76 = FigGetAllocatorForMedia();
            FigBytePumpCopyProperty(v75, 0x1EE53E6D8, v76, (uint64_t)&valuePtr);
            CFDictionaryRef v77 = FigRCLCopyConfigurationGroupName((CFDictionaryRef)valuePtr);
            if (v77)
            {
              CFDictionaryRef v78 = v77;
              *a4 = (CFArrayRef)CFRetain(v77);
              CFRelease(v78);
              uint64_t Duration = 0;
            }
            else
            {
              uint64_t Duration = 4294954513;
            }
            uint64_t v52 = (__CFDictionary *)valuePtr;
            if (!(void)valuePtr) {
              goto LABEL_17;
            }
LABEL_329:
            CFRelease(v52);
            goto LABEL_17;
          }
          if (CFEqual(a2, @"StartsOnFirstEligibleVariant"))
          {
            int v21 = (CFStringRef *)MEMORY[0x1E4F1CFD0];
            if (*(_DWORD *)(DerivedStorage + 2868) != 1) {
              int v21 = (CFStringRef *)MEMORY[0x1E4F1CFC8];
            }
            goto LABEL_66;
          }
          if (CFEqual(a2, @"CurrentStableVariantID"))
          {
            uint64_t v79 = *(void *)(DerivedStorage + 1704);
            if (!v79) {
              goto LABEL_33;
            }
            CFStringRef Tag = (CFStringRef)FigAlternateGetStableStreamIdentifier(v79);
            if (!Tag) {
              goto LABEL_27;
            }
            goto LABEL_26;
          }
          if (CFEqual(a2, @"CoordinationIdentifier"))
          {
            CFStringRef Tag = *(CFStringRef *)(DerivedStorage + 3192);
            if (!Tag)
            {
              int v80 = (CFStringRef *)(DerivedStorage + 3192);
              FPSupport_CreateDefaultCoordinationIdentifierForPlaybackItem((uint64_t)a1, v80);
              CFStringRef Tag = *v80;
              if (!*v80) {
                goto LABEL_33;
              }
            }
            goto LABEL_26;
          }
          if (CFEqual(a2, @"ParticipatesInCoordinatedPlayback"))
          {
            int v21 = (CFStringRef *)MEMORY[0x1E4F1CFD0];
            int v22 = *(unsigned __int8 *)(DerivedStorage + 3200);
            goto LABEL_63;
          }
          if (CFEqual(a2, @"interstitialEvents"))
          {
            CFStringRef Tag = *(CFStringRef *)(DerivedStorage + 3216);
            if (!Tag) {
              goto LABEL_27;
            }
            goto LABEL_26;
          }
          if (CFEqual(a2, @"currentInterstitialEvent"))
          {
            CFStringRef Tag = *(CFStringRef *)(DerivedStorage + 3208);
            if (!Tag) {
              goto LABEL_27;
            }
            goto LABEL_26;
          }
          if (CFEqual(a2, @"InterstitialEventItemTimeOffset"))
          {
            CFStringRef Tag = *(CFStringRef *)(DerivedStorage + 3224);
            if (!Tag) {
              goto LABEL_27;
            }
            goto LABEL_26;
          }
          if (CFEqual(a2, @"TransientTimebaseForCoordinatedPlaybackSynchronization"))
          {
            CFStringRef Tag = *(CFStringRef *)(DerivedStorage + 568);
            if (!Tag) {
              goto LABEL_33;
            }
            goto LABEL_26;
          }
          if (CFEqual(a2, @"IsCoordinatedPlaybackSupported"))
          {
            int v21 = (CFStringRef *)MEMORY[0x1E4F1CFD0];
            int v22 = *(unsigned __int8 *)(DerivedStorage + 3232);
            goto LABEL_63;
          }
          if (CFEqual(a2, @"ReportingAgent"))
          {
            CFStringRef Tag = *(CFStringRef *)(DerivedStorage + 2544);
            if (!Tag) {
              goto LABEL_27;
            }
            goto LABEL_26;
          }
          if (CFEqual(a2, @"IsReadyForPlayback"))
          {
            int v21 = (CFStringRef *)MEMORY[0x1E4F1CFD0];
            int v22 = *(unsigned __int8 *)(DerivedStorage + 468);
            goto LABEL_63;
          }
          if (CFEqual(a2, @"AutoSwitchAtmosVariants"))
          {
            int v21 = (CFStringRef *)MEMORY[0x1E4F1CFD0];
            int v22 = *(unsigned __int8 *)(DerivedStorage + 564);
            goto LABEL_63;
          }
          if (CFEqual(a2, @"MaximumTimePlayedToSinceLastSeek"))
          {
            fpfsi_updateMaxPlayThroughTime();
            CFAllocatorRef v18 = (const __CFAllocator *)FigGetAllocatorForMedia();
            long long valuePtr = *(_OWORD *)(DerivedStorage + 3248);
            *(void *)&valuePtr_16[0] = *(void *)(DerivedStorage + 3264);
            p_long long valuePtr = (CMTime *)&valuePtr;
            goto LABEL_56;
          }
          if (!CFEqual(a2, @"IsPlayingIFrameOnly"))
          {
            if (CFEqual(a2, @"PrefersConcurrentSwitching"))
            {
              int v21 = (CFStringRef *)MEMORY[0x1E4F1CFD0];
              int v22 = *(unsigned __int8 *)(DerivedStorage + 553);
              goto LABEL_63;
            }
            if (CFEqual(a2, @"SpeedRampData"))
            {
              CFStringRef Tag = *(CFStringRef *)(DerivedStorage + 3352);
              if (!Tag) {
                goto LABEL_27;
              }
              goto LABEL_26;
            }
            if (CFEqual(a2, @"OverlapRange"))
            {
              CFStringRef Tag = *(CFStringRef *)(DerivedStorage + 3360);
              if (!Tag) {
                goto LABEL_27;
              }
              goto LABEL_26;
            }
            if (CFEqual(a2, @"UniqueInstanceIdentifier"))
            {
              CFStringRef v82 = *(const __CFString **)(DerivedStorage + 3368);
              if (v82)
              {
                CFStringRef Tag = CFStringCreateCopy(a3, v82);
                goto LABEL_27;
              }
            }
            else
            {
              if (!CFEqual(a2, @"MetricEventTimeline"))
              {
                if (!CFEqual(a2, @"OfflineInterstitialURLs"))
                {
                  uint64_t Duration = 4294954512;
                  goto LABEL_17;
                }
                *(void *)&long long valuePtr = 0;
                uint64_t v83 = *(void *)(DerivedStorage + 936);
                if (v83)
                {
                  uint64_t Duration = FigBytePumpCopyProperty(v83, 0x1EE53E318, (uint64_t)a3, (uint64_t)&valuePtr);
                  if (Duration) {
                    goto LABEL_17;
                  }
                  CFArrayRef v42 = (const __CFArray *)valuePtr;
                }
                else
                {
                  CFArrayRef v42 = 0;
                }
                goto LABEL_147;
              }
              CFStringRef Tag = *(CFStringRef *)(DerivedStorage + 3376);
              if (Tag) {
                goto LABEL_26;
              }
            }
            goto LABEL_381;
          }
          uint64_t v81 = *(void *)(DerivedStorage + 1704);
          if (!v81 || !FigAlternateIsIFrameOnly(v81)) {
            goto LABEL_367;
          }
        }
LABEL_366:
        int v21 = (CFStringRef *)MEMORY[0x1E4F1CFD0];
        goto LABEL_66;
      }
      uint64_t v58 = (CFStringRef *)MEMORY[0x1E4F1CFD0];
      int v59 = *(unsigned __int8 *)(DerivedStorage + 556);
    }
    if (!v59) {
      uint64_t v58 = (CFStringRef *)MEMORY[0x1E4F1CFC8];
    }
    CFStringRef Tag = *v58;
    if (!*v58) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }

  return FigSignalErrorAt();
}

uint64_t fpfsi_SetProperty(uint64_t a1, const void *a2, uint64_t a3)
{
  return FPSupport_HandlePlayerSetPropertyAndCopyModification(a1, a2, a3, 0, (uint64_t)fpfsi_handleSetProperty, 0, 0, 0);
}

void fpfsi_InvalidateGuts(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v3 = *(const void **)DerivedStorage;
  uint64_t v4 = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)(DerivedStorage + 24))
  {
    uint64_t v5 = v4;
    fpfs_LockMutexWithCaller((uint64_t)v3);
    if (!*(unsigned char *)(DerivedStorage + 24))
    {
      FigStopForwardingMediaServicesProcessDeathNotification();
      FigRetainProxyInvalidate();
      MEMORY[0x19970E910](*(void *)(DerivedStorage + 8));
      *(unsigned char *)(DerivedStorage + 24) = 1;
      MEMORY[0x19970E930](*(void *)(DerivedStorage + 8));
      CFSetRemoveValue(*(CFMutableSetRef *)(v5 + 64), a1);
      fpfs_haltStream();
      if (*(void *)(DerivedStorage + 32))
      {
        FigStopForwardingMediaServicesProcessDeathNotification();
        uint64_t CMBaseObject = FigAssetGetCMBaseObject(*(void *)(DerivedStorage + 32));
        CFArrayRef v7 = *(void **)(CMBaseObjectGetVTable() + 8);
        if (v7) {
          CFSetRef v8 = v7;
        }
        else {
          CFSetRef v8 = 0;
        }
        if (*v8 >= 2uLL)
        {
          uint64_t v9 = (void (*)(uint64_t))v8[8];
          if (v9) {
            v9(CMBaseObject);
          }
        }
        uint64_t v10 = *(const void **)(DerivedStorage + 32);
        if (v10)
        {
          CFRelease(v10);
          *(void *)(DerivedStorage + 32) = 0;
        }
      }
      if (FPSupport_GetDisplayModeSwitchMonitor())
      {
        CMNotificationCenterGetDefaultLocalCenter();
        FPSupport_GetDisplayModeSwitchMonitor();
        FigNotificationCenterRemoveWeakListener();
      }
      uint64_t v11 = 0;
      char v12 = 1;
      do
      {
        uint64_t v13 = 0;
        char v14 = v12;
        uint64_t v15 = DerivedStorage + 176 + 24 * v11;
        do
        {
          uint64_t v16 = *(const void **)(v15 + v13);
          if (v16)
          {
            CFRelease(v16);
            *(void *)(v15 + v13) = 0;
          }
          v13 += 8;
        }
        while (v13 != 24);
        char v12 = 0;
        uint64_t v11 = 1;
      }
      while ((v14 & 1) != 0);
      char v17 = *(const void **)(DerivedStorage + 1808);
      if (v17)
      {
        CFRelease(v17);
        *(void *)(DerivedStorage + 1808) = 0;
      }
      uint64_t v18 = *(void *)(DerivedStorage + 1064);
      if (v18)
      {
        do
        {
          uint64_t v19 = *(void *)(v18 + 8);
          fpfs_DeleteTrack(a1, v18);
          if (!v19) {
            break;
          }
          uint64_t v18 = v19;
        }
        while (*(void *)(DerivedStorage + 1064));
      }
      fpfs_FreeDeadTracks((void *)DerivedStorage);
      uint64_t v20 = CMBaseObjectGetDerivedStorage();
      fpfs_ClearRenderChains((const __CFArray *)a1, 0xFFu);
      *(void *)(v20 + 780) = 0;
      fpfsi_clearOutOfBandSubtitleObjects();
      int v21 = *(const void **)(DerivedStorage + 688);
      if (v21)
      {
        FigSyncMomentSourceDestroy(v21);
        *(void *)(DerivedStorage + 688) = 0;
      }
      int v22 = *(const void **)(DerivedStorage + 696);
      if (v22)
      {
        CFRelease(v22);
        *(void *)(DerivedStorage + 696) = 0;
      }
      CFArrayRef v23 = *(const void **)(DerivedStorage + 680);
      if (v23)
      {
        CFRelease(v23);
        *(void *)(DerivedStorage + 680) = 0;
      }
      if (*(void *)(DerivedStorage + 672))
      {
        FigSimpleMutexDestroy();
        *(void *)(DerivedStorage + 672) = 0;
      }
      unsigned int v24 = *(const void **)(DerivedStorage + 704);
      if (v24)
      {
        CFRelease(v24);
        *(void *)(DerivedStorage + 704) = 0;
      }
      fpfs_cleanupAllImageQueues(a1, 0);
      fpfs_ReleaseAndClearTimebaseTimer(*(OpaqueCMTimebase **)(DerivedStorage + 576), (dispatch_object_t *)(DerivedStorage + 1632));
      uint64_t v25 = MEMORY[0x1E4F1F9F8];
      long long v26 = *MEMORY[0x1E4F1F9F8];
      *(_OWORD *)(DerivedStorage + 1640) = *MEMORY[0x1E4F1F9F8];
      uint64_t v27 = *(void *)(v25 + 16);
      *(void *)(DerivedStorage + 1656) = v27;
      long long v103 = v26;
      *(_OWORD *)(DerivedStorage + 1664) = v26;
      *(void *)(DerivedStorage + 1680) = v27;
      if (*(void *)(DerivedStorage + 576))
      {
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterRemoveWeakListener();
        CMTimebaseNotificationBarrier(*(CMTimebaseRef *)(DerivedStorage + 576));
        CFArrayRef v28 = *(const void **)(DerivedStorage + 576);
        if (v28) {
          CFRelease(v28);
        }
        *(void *)(DerivedStorage + 576) = 0;
      }
      int v29 = *(const void **)(DerivedStorage + 584);
      if (v29)
      {
        CFRelease(v29);
        *(void *)(DerivedStorage + 584) = 0;
      }
      if (*(void *)(DerivedStorage + 3168))
      {
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterRemoveWeakListener();
      }
      CFArrayRef v30 = *(uint64_t **)(DerivedStorage + 1616);
      if (v30)
      {
        do
        {
          uint64_t v31 = *v30;
          fpfsi_RemoveDateEntry(DerivedStorage, v30);
          CFArrayRef v30 = (uint64_t *)v31;
        }
        while (v31);
      }
      long long v32 = *(const void **)(DerivedStorage + 1592);
      if (v32) {
        CFRelease(v32);
      }
      *(void *)(DerivedStorage + 1592) = 0;
      CFAllocatorRef v33 = *(const void **)(DerivedStorage + 1600);
      if (v33) {
        CFRelease(v33);
      }
      *(void *)(DerivedStorage + 1600) = 0;
      BOOL v34 = *(const void **)(DerivedStorage + 864);
      if (v34)
      {
        CFRelease(v34);
        *(void *)(DerivedStorage + 864) = 0;
      }
      CFNumberType v35 = *(const void **)(DerivedStorage + 1704);
      if (v35)
      {
        CFRelease(v35);
        *(void *)(DerivedStorage + 1704) = 0;
      }
      uint64_t v36 = *(const void **)(DerivedStorage + 1728);
      if (v36)
      {
        CFRelease(v36);
        *(void *)(DerivedStorage + 1728) = 0;
      }
      int v37 = *(const void **)(DerivedStorage + 1720);
      if (v37)
      {
        CFRelease(v37);
        *(void *)(DerivedStorage + 1720) = 0;
      }
      int v38 = *(const void **)(DerivedStorage + 1688);
      if (v38)
      {
        CFRelease(v38);
        *(void *)(DerivedStorage + 1688) = 0;
      }
      CFArrayRef v39 = *(const void **)(DerivedStorage + 1696);
      if (v39)
      {
        CFRelease(v39);
        *(void *)(DerivedStorage + 1696) = 0;
      }
      CFNumberRef v40 = *(const void **)(DerivedStorage + 1792);
      if (v40)
      {
        CFRelease(v40);
        *(void *)(DerivedStorage + 1792) = 0;
      }
      CFArrayRef v41 = *(const void **)(DerivedStorage + 1784);
      if (v41)
      {
        CFRelease(v41);
        *(void *)(DerivedStorage + 1784) = 0;
      }
      CFArrayRef v42 = *(const void **)(DerivedStorage + 1800);
      if (v42)
      {
        CFRelease(v42);
        *(void *)(DerivedStorage + 1800) = 0;
      }
      BOOL v43 = *(const void **)(DerivedStorage + 904);
      if (v43)
      {
        CFRelease(v43);
        *(void *)(DerivedStorage + 904) = 0;
      }
      CFTypeRef v44 = *(const void **)(DerivedStorage + 1816);
      if (v44)
      {
        CFRelease(v44);
        *(void *)(DerivedStorage + 1816) = 0;
      }
      int v45 = *(const void **)(DerivedStorage + 1824);
      if (v45)
      {
        CFRelease(v45);
        *(void *)(DerivedStorage + 1824) = 0;
      }
      uint64_t v46 = *(const void **)(DerivedStorage + 1872);
      if (v46)
      {
        CFRelease(v46);
        *(void *)(DerivedStorage + 1872) = 0;
      }
      FPSupport_InvalidateMetadataStorage(*(void **)(DerivedStorage + 1880));
      CFArrayRef v47 = *(const void **)(DerivedStorage + 1896);
      if (v47)
      {
        CFRelease(v47);
        *(void *)(DerivedStorage + 1896) = 0;
      }
      int v48 = *(const void **)(DerivedStorage + 1904);
      if (v48)
      {
        CFRelease(v48);
        *(void *)(DerivedStorage + 1904) = 0;
      }
      uint64_t v49 = *(const void **)(DerivedStorage + 1912);
      if (v49)
      {
        CFRelease(v49);
        *(void *)(DerivedStorage + 1912) = 0;
      }
      CFArrayRef v50 = *(const void **)(DerivedStorage + 1920);
      if (v50)
      {
        CFRelease(v50);
        *(void *)(DerivedStorage + 1920) = 0;
      }
      uint64_t v51 = *(const void **)(DerivedStorage + 504);
      if (v51)
      {
        CFRelease(v51);
        *(void *)(DerivedStorage + 504) = 0;
      }
      uint64_t v52 = *(const void **)(DerivedStorage + 944);
      if (v52)
      {
        CFRelease(v52);
        *(void *)(DerivedStorage + 944) = 0;
      }
      CFArrayRef v53 = *(const void **)(DerivedStorage + 1608);
      if (v53)
      {
        CFRelease(v53);
        *(void *)(DerivedStorage + 1608) = 0;
      }
      CFAllocatorRef v54 = *(const void **)(DerivedStorage + 2232);
      if (v54)
      {
        CFRelease(v54);
        *(void *)(DerivedStorage + 2232) = 0;
      }
      uint64_t v55 = *(const void **)(DerivedStorage + 856);
      if (v55)
      {
        CFRelease(v55);
        *(void *)(DerivedStorage + 856) = 0;
      }
      uint64_t v56 = *(const void **)(DerivedStorage + 1840);
      if (v56)
      {
        CFRelease(v56);
        *(void *)(DerivedStorage + 1840) = 0;
      }
      CFNumberType v57 = *(const void **)(DerivedStorage + 2352);
      if (v57)
      {
        CFRelease(v57);
        *(void *)(DerivedStorage + 2352) = 0;
      }
      uint64_t v58 = *(const void **)(DerivedStorage + 2360);
      if (v58)
      {
        CFRelease(v58);
        *(void *)(DerivedStorage + 2360) = 0;
      }
      int v59 = *(const void **)(DerivedStorage + 2368);
      if (v59)
      {
        CFRelease(v59);
        *(void *)(DerivedStorage + 2368) = 0;
      }
      CFTypeRef v60 = *(const void **)(DerivedStorage + 2376);
      if (v60)
      {
        CFRelease(v60);
        *(void *)(DerivedStorage + 2376) = 0;
      }
      long long v61 = *(const void **)(DerivedStorage + 3112);
      if (v61)
      {
        CFRelease(v61);
        *(void *)(DerivedStorage + 3112) = 0;
      }
      uint64_t v62 = *(const void **)(DerivedStorage + 3120);
      if (v62)
      {
        CFRelease(v62);
        *(void *)(DerivedStorage + 3120) = 0;
      }
      uint64_t v63 = *(const void **)(DerivedStorage + 3128);
      if (v63)
      {
        CFRelease(v63);
        *(void *)(DerivedStorage + 3128) = 0;
      }
      CMTime v64 = *(const void **)(DerivedStorage + 3136);
      if (v64)
      {
        CFRelease(v64);
        *(void *)(DerivedStorage + 3136) = 0;
      }
      uint64_t v65 = *(const void **)(DerivedStorage + 880);
      if (v65)
      {
        CFRelease(v65);
        *(void *)(DerivedStorage + 880) = 0;
      }
      CMTime v66 = *(const void **)(DerivedStorage + 3144);
      if (v66)
      {
        CFRelease(v66);
        *(void *)(DerivedStorage + 3144) = 0;
      }
      unsigned int v67 = *(const void **)(DerivedStorage + 3152);
      if (v67)
      {
        CFRelease(v67);
        *(void *)(DerivedStorage + 3152) = 0;
      }
      uint64_t v68 = *(const void **)(DerivedStorage + 144);
      if (v68)
      {
        CFRelease(v68);
        *(void *)(DerivedStorage + 144) = 0;
      }
      uint64_t v69 = *(const void **)(DerivedStorage + 152);
      if (v69)
      {
        CFRelease(v69);
        *(void *)(DerivedStorage + 152) = 0;
      }
      uint64_t v70 = *(const void **)(DerivedStorage + 400);
      if (v70)
      {
        CFRelease(v70);
        *(void *)(DerivedStorage + 400) = 0;
      }
      uint64_t v71 = *(const void **)(DerivedStorage + 2600);
      if (v71)
      {
        CFRelease(v71);
        *(void *)(DerivedStorage + 2600) = 0;
      }
      CMTime v72 = *(const void **)(DerivedStorage + 3072);
      if (v72)
      {
        CFRelease(v72);
        *(void *)(DerivedStorage + 3072) = 0;
      }
      uint64_t v73 = *(const void **)(DerivedStorage + 2616);
      if (v73)
      {
        CFRelease(v73);
        *(void *)(DerivedStorage + 2616) = 0;
      }
      fpfsi_TearDownIFramePrefetcher();
      uint64_t v74 = *(const void **)(DerivedStorage + 3192);
      if (v74)
      {
        CFRelease(v74);
        *(void *)(DerivedStorage + 3192) = 0;
      }
      uint64_t v75 = *(const void **)(DerivedStorage + 568);
      if (v75)
      {
        CFRelease(v75);
        *(void *)(DerivedStorage + 568) = 0;
      }
      uint64_t v76 = *(const void **)(DerivedStorage + 3208);
      if (v76)
      {
        CFRelease(v76);
        *(void *)(DerivedStorage + 3208) = 0;
      }
      CFDictionaryRef v77 = *(const void **)(DerivedStorage + 3216);
      if (v77)
      {
        CFRelease(v77);
        *(void *)(DerivedStorage + 3216) = 0;
      }
      CFDictionaryRef v78 = *(const void **)(DerivedStorage + 3224);
      if (v78)
      {
        CFRelease(v78);
        *(void *)(DerivedStorage + 3224) = 0;
      }
      uint64_t v79 = *(const void **)(DerivedStorage + 3344);
      if (v79)
      {
        CFRelease(v79);
        *(void *)(DerivedStorage + 3344) = 0;
      }
      int v80 = *(const void **)(DerivedStorage + 2536);
      if (v80)
      {
        CFRelease(v80);
        *(void *)(DerivedStorage + 2536) = 0;
      }
      uint64_t v81 = *(const void **)(DerivedStorage + 2584);
      if (v81)
      {
        CFRelease(v81);
        *(void *)(DerivedStorage + 2584) = 0;
      }
      *(_OWORD *)(DerivedStorage + 1328) = v103;
      *(void *)(DerivedStorage + 1344) = v27;
      *(void *)(DerivedStorage + 2200) = 0;
      *(_DWORD *)(DerivedStorage + 2224) = 0;
      while (1)
      {
        CFStringRef v82 = *(uint64_t **)(DerivedStorage + 2888);
        if (!v82) {
          break;
        }
        fpfsi_RemoveEntryFromBestEffortTrickplayModeHistory(DerivedStorage, v82);
      }
      uint64_t v83 = *(const void **)(DerivedStorage + 2968);
      if (v83)
      {
        CFRelease(v83);
        *(void *)(DerivedStorage + 2968) = 0;
      }
      CMTime v84 = *(const void **)(DerivedStorage + 3104);
      if (v84)
      {
        CFRelease(v84);
        *(void *)(DerivedStorage + 3104) = 0;
      }
      int v85 = *(const void **)(DerivedStorage + 3168);
      if (v85)
      {
        CFRelease(v85);
        *(void *)(DerivedStorage + 3168) = 0;
      }
      uint64_t v86 = *(const void **)(DerivedStorage + 2256);
      if (v86)
      {
        CFRelease(v86);
        *(void *)(DerivedStorage + 2256) = 0;
      }
      Float64 v87 = *(const void **)(DerivedStorage + 2456);
      if (v87)
      {
        CFRelease(v87);
        *(void *)(DerivedStorage + 2456) = 0;
      }
      __int16 v88 = *(const void **)(DerivedStorage + 3368);
      if (v88)
      {
        CFRelease(v88);
        *(void *)(DerivedStorage + 3368) = 0;
      }
      fpfsi_RTCReportingUpdatePlayingTrackStats(DerivedStorage);
      uint64_t v89 = *(void *)(DerivedStorage + 2544);
      if (v89)
      {
        uint64_t v90 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v90) {
          uint64_t v91 = v90;
        }
        else {
          uint64_t v91 = 0;
        }
        CGSize v92 = *(void (**)(uint64_t))(v91 + 24);
        if (v92) {
          v92(v89);
        }
        CFStringRef v93 = *(const void **)(DerivedStorage + 2544);
        if (v93) {
          CFRelease(v93);
        }
      }
      *(void *)(DerivedStorage + 2544) = 0;
      fpfsi_EmancipateItemFromMultichannelInhibitionsAndApplyFilters();
      __int16 v94 = *(const void **)(DerivedStorage + 2216);
      if (v94)
      {
        CFRelease(v94);
        *(void *)(DerivedStorage + 2216) = 0;
      }
      uint64_t v95 = *(const void **)(DerivedStorage + 3376);
      if (v95)
      {
        CFRelease(v95);
        *(void *)(DerivedStorage + 3376) = 0;
      }
      uint64_t v96 = *(const void **)(DerivedStorage + 3384);
      if (v96)
      {
        CFRelease(v96);
        *(void *)(DerivedStorage + 3384) = 0;
      }
      uint64_t v97 = *(const void **)(DerivedStorage + 2848);
      if (v97)
      {
        CFRelease(v97);
        *(void *)(DerivedStorage + 2848) = 0;
      }
      CFDictionaryRef v98 = *(const void **)(DerivedStorage + 3392);
      if (v98)
      {
        CFRelease(v98);
        *(void *)(DerivedStorage + 3392) = 0;
      }
      BOOL v99 = *(const void **)(DerivedStorage + 736);
      if (v99)
      {
        CFRelease(v99);
        *(void *)(DerivedStorage + 736) = 0;
      }
    }
    if (*(void *)(DerivedStorage + 600))
    {
      uint64_t v100 = fpfs_UnlockMutexCompletelyWithCaller(v3);
      dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 600), 0, (dispatch_function_t)fpfs_noop);
      uint64_t v101 = CMBaseObjectGetDerivedStorage();
      do
        fpfs_LockMutexWithCaller((uint64_t)v3);
      while (*(void *)(v101 + 8) < v100);
    }
    fpfs_UnlockAndPostNotificationsWithCaller(v3);
    CFAllocatorRef v102 = *(dispatch_queue_t **)(DerivedStorage + 168);
    if (v102)
    {
      FigPropertyStorageInvalidate(v102);
    }
  }
}

void fpfs_DisplayModeChangeNote(uint64_t a1, uint64_t a2)
{
  CFTypeRef v6 = 0;
  uint64_t v5 = 0;
  if (!fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer(a2, &v6, (CFTypeRef *)&v5))
  {
    CFTypeRef v2 = (CFTypeRef)v5;
    fpfs_CheckPrebufferedLevels(v5, 1, -1, 0, (uint64_t)v4);
    CFTypeRef v3 = v6;
    fpfs_UnlockAndPostNotificationsWithCaller(v6);
    CFRelease(v2);
    CFRelease(v3);
  }
}

uint64_t fpfsi_CopyCurrentDateAndTime(uint64_t a1, CFMutableDictionaryRef *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  memset(&v18, 0, sizeof(v18));
  fpfs_GetNextTimeToPlay(DerivedStorage, 0, (uint64_t)&v18);
  CFDateRef v17 = 0;
  if ((v18.flags & 0x1D) != 1) {
    return 4294950069;
  }
  CMTime v11 = v18;
  int v5 = fpfsi_CopyDateForTime(a1, &v11, &v17);
  CFDateRef v6 = v17;
  if (v5)
  {
    char v7 = 0;
    double v8 = 0.0;
  }
  else
  {
    double v8 = MEMORY[0x199707BD0](v17);
    char v7 = 1;
  }
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  CMTime v11 = v18;
  double v12 = v8;
  char v13 = 1;
  char v14 = v7;
  int v15 = 0;
  __int16 v16 = 0;
  *a2 = FigDateTimeMomentCopyAsDictionary((uint64_t)&v11, AllocatorForMedia);
  if (v6) {
    CFRelease(v6);
  }
  return 0;
}

uint64_t FigBytePumpCopyEstimatedDateForTime(uint64_t a1, long long *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  double v8 = *(uint64_t (**)(uint64_t, long long *, uint64_t))(v7 + 48);
  if (!v8) {
    return 4294954514;
  }
  long long v10 = *a2;
  uint64_t v11 = *((void *)a2 + 2);
  return v8(a1, &v10, a3);
}

uint64_t fpfsi_CopyCurrentDatePeriod(uint64_t a1, __CFDictionary **a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  long long v30 = 0uLL;
  CMTimeEpoch v31 = 0;
  fpfs_GetNextTimeToPlay(DerivedStorage, 0, (uint64_t)&v30);
  memset(&v29, 0, sizeof(v29));
  if ((BYTE12(v30) & 0x1D) != 1) {
    return 4294950069;
  }
  *(_OWORD *)&range.start.unsigned int value = v30;
  range.start.CMTimeEpoch epoch = v31;
  uint64_t DateEntryForTime = fpfsi_getDateEntryForTime(a1, &range.start, 0);
  if (!DateEntryForTime) {
    return 4294954513;
  }
  uint64_t v6 = (uint64_t *)DateEntryForTime;
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFAbsoluteTime v8 = MEMORY[0x199707BD0](v6[2]);
  CFDateRef v9 = CFDateCreate(AllocatorForMedia, v8);
  if (v9)
  {
    CFDateRef v10 = v9;
    fpfsi_getDateEntryTimelineOrigin((uint64_t)v6, &v29.start);
    uint64_t v11 = *v6;
    if (*v6)
    {
      memset(&range, 0, 24);
      fpfsi_getDateEntryTimelineOrigin(v11, &range.start);
      long long v27 = *(_OWORD *)&range.start.value;
      CMTimeEpoch epoch = range.start.epoch;
      CMTime start = v29.start;
      p_CMTime lhs = (CMTime *)&v27;
      p_CMTime start = &start;
    }
    else
    {
      long long v27 = *MEMORY[0x1E4F1F9F8];
      CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
      uint64_t Duration = fpfsi_GetDuration(a1, &v27);
      if (Duration) {
        goto LABEL_22;
      }
      if ((BYTE12(v27) & 0x1D) == 1)
      {
        v29.CMTime duration = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA10];
LABEL_11:
        CFAllocatorRef v15 = (const __CFAllocator *)FigGetAllocatorForMedia();
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v15, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        if (Mutable)
        {
          CFDateRef v17 = Mutable;
          CFAllocatorRef v18 = (const __CFAllocator *)FigGetAllocatorForMedia();
          CMTimeRange range = v29;
          CFDictionaryRef v19 = CMTimeRangeCopyAsDictionary(&range, v18);
          if (v19)
          {
            CFDictionaryRef v20 = v19;
            CFDictionarySetValue(v17, @"date", v10);
            CFDictionarySetValue(v17, @"timeRange", v20);
            *a2 = v17;
            CFRelease(v20);
            uint64_t v21 = 0;
          }
          else
          {
            uint64_t v21 = FigSignalErrorAt();
            CFRelease(v17);
          }
          goto LABEL_14;
        }
        uint64_t Duration = FigSignalErrorAt();
LABEL_22:
        uint64_t v21 = Duration;
LABEL_14:
        CFRelease(v10);
        return v21;
      }
      memset(&range, 0, sizeof(range));
      fpfsi_getSeekableTimeRange(a1, &range);
      memset(&start, 0, sizeof(start));
      CMTime lhs = range.start;
      CMTime v23 = range.duration;
      CMTimeAdd(&start, &lhs, &v23);
      CMTime lhs = start;
      CMTime v23 = v29.start;
      p_CMTime lhs = &lhs;
      p_CMTime start = &v23;
    }
    CMTimeSubtract(&v29.duration, p_lhs, p_start);
    goto LABEL_11;
  }

  return FigSignalErrorAt();
}

uint64_t fpfsi_copyChosenAlternateTrackIDsDictionary(uint64_t a1, const __CFAllocator *a2, __CFDictionary **a3)
{
  uint64_t TrackOfType = fpfs_LastTrackOfType(a1, 1936684398, 0);
  if (!TrackOfType) {
    return 4294954513;
  }
  uint64_t v6 = TrackOfType;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a2, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable) {
    return 4294954510;
  }
  CFAbsoluteTime v8 = Mutable;
  int valuePtr = *(void *)(v6 + 16);
  CFNumberRef v9 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, &valuePtr);
  CFDictionarySetValue(v8, @"Audio", v9);
  CFRelease(v9);
  uint64_t result = 0;
  *a3 = v8;
  return result;
}

uint64_t fpfsi_createTrackIDArray(const __CFAllocator *a1, uint64_t a2, CFArrayRef *a3)
{
  uint64_t v6 = 0;
  CFIndex v7 = 0;
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v25 = 0;
  long long v23 = 0u;
  long long v24 = 0u;
  *(_OWORD *)values = 0u;
  long long v22 = 0u;
  do
  {
    uint64_t v20 = 0;
    memset(v19, 0, sizeof(v19));
    LastPlayingTracksForCMMediaType MediaType = fpfsi_findLastPlayingTracksForMediaType(a2, *(_DWORD *)&kCommonTypes[4 * v6], (uint64_t)v19);
    uint64_t v9 = LastPlayingTracksForMediaType;
    if (v6 == 2)
    {
      if (LastPlayingTracksForMediaType > 4) {
        goto LABEL_22;
      }
    }
    else if (LastPlayingTracksForMediaType > 1)
    {
LABEL_22:
      uint64_t v14 = 4294950069;
      goto LABEL_17;
    }
    if (LastPlayingTracksForMediaType >= 1)
    {
      CFDateRef v10 = v19;
      do
      {
        if (*(void *)v10)
        {
          int valuePtr = *(void *)(*(void *)v10 + 16);
          CFNumberRef v11 = CFNumberCreate(a1, kCFNumberSInt32Type, &valuePtr);
          values[v7] = v11;
          if (!v11) {
            goto LABEL_16;
          }
          ++v7;
        }
        CFDateRef v10 = (_OWORD *)((char *)v10 + 8);
        --v9;
      }
      while (v9);
    }
    ++v6;
  }
  while (v6 != 5);
  if (v7 >= 1
    && (CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia(),
        CFArrayRef v13 = CFArrayCreate(AllocatorForMedia, (const void **)values, v7, MEMORY[0x1E4F1D510]),
        (*a3 = v13) != 0))
  {
    uint64_t v14 = 0;
  }
  else
  {
LABEL_16:
    uint64_t v14 = FigSignalErrorAt();
  }
LABEL_17:
  for (uint64_t i = 0; i != 9; ++i)
  {
    __int16 v16 = values[i];
    if (v16) {
      CFRelease(v16);
    }
  }
  return v14;
}

uint64_t fpfsi_copyPlaybackRateMonitorProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 96);
  if (!v3) {
    return 4294954368;
  }
  uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v9) {
    return 4294954514;
  }

  return v9(v3, a2, AllocatorForMedia, a3);
}

uint64_t fpfsi_copyAlternateStreamInformation(uint64_t a1, const __CFAllocator *a2, CFDictionaryRef *a3)
{
  keys[2] = *(void **)MEMORY[0x1E4F143B8];
  int v29 = 0;
  CFArrayRef v6 = *(const __CFArray **)(a1 + 1688);
  if (!v6) {
    goto LABEL_18;
  }
  CFIndex Count = CFArrayGetCount(v6);
  if (Count < 1) {
    goto LABEL_18;
  }
  CFIndex v8 = Count;
  uint64_t v9 = *(void *)(a1 + 1704);
  CFArrayRef v28 = a3;
  unsigned int v10 = v9 ? FigAlternateGetPeakBitRate(v9) : 0;
  CFIndex v11 = 0;
  uint64_t v12 = 0;
  int v13 = 0;
  uint64_t v14 = 2;
  do
  {
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 1688), v11);
    unsigned int PeakBitRate = FigAlternateGetPeakBitRate((uint64_t)ValueAtIndex);
    if (++v11 >= v8) {
      goto LABEL_15;
    }
    uint64_t v17 = v14;
    do
    {
      CFAllocatorRef v18 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 1688), v17 - 1);
      int v19 = FigAlternateGetPeakBitRate((uint64_t)v18);
    }
    while (v19 != PeakBitRate && v17++ < v8);
    if (v19 != PeakBitRate)
    {
LABEL_15:
      ++v12;
      if (PeakBitRate < v10) {
        ++v13;
      }
    }
    ++v14;
  }
  while (v11 != v8);
  uint64_t valuePtr = v12;
  int v29 = v13;
  a3 = v28;
  if (!v12) {
LABEL_18:
  }
    uint64_t valuePtr = 1;
  keys[0] = @"StreamCount";
  CFAllocatorRef v21 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  long long v22 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberCFIndexType, &valuePtr);
  values = v22;
  keys[1] = @"CurrentStreamIndex";
  CFNumberRef v23 = CFNumberCreate(v21, kCFNumberIntType, &v29);
  CFTypeRef cf = v23;
  uint64_t v24 = 4294954510;
  if (v22) {
    BOOL v25 = v23 == 0;
  }
  else {
    BOOL v25 = 1;
  }
  if (!v25)
  {
    CFDictionaryRef v26 = CFDictionaryCreate(a2, (const void **)keys, (const void **)&values, 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    *a3 = v26;
    if (v26) {
      uint64_t v24 = 0;
    }
    else {
      uint64_t v24 = 4294954510;
    }
    long long v22 = values;
  }
  if (v22) {
    CFRelease(v22);
  }
  if (cf) {
    CFRelease(cf);
  }
  return v24;
}

uint64_t fpfsi_CopyPumpSecondsPropertyAsTime(uint64_t a1, uint64_t a2, const __CFAllocator *a3, CFDictionaryRef *a4)
{
  uint64_t v4 = *(void *)(a1 + 936);
  if (!v4) {
    return 4294954513;
  }
  CFNumberRef number = 0;
  uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
  FigBytePumpGetFigBaseObject(v4);
  uint64_t v10 = v9;
  uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFNumberRef *))(v12 + 48);
  if (!v14) {
    return 4294954514;
  }
  uint64_t result = v14(v10, a2, AllocatorForMedia, &number);
  if (!result)
  {
    Float64 valuePtr = 0.0;
    CFNumberGetValue(number, kCFNumberDoubleType, &valuePtr);
    CMTimeMakeWithSeconds(&v16, valuePtr, 1000000);
    CMTime v15 = v16;
    *a4 = CMTimeCopyAsDictionary(&v15, a3);
    if (number) {
      CFRelease(number);
    }
    return 0;
  }
  return result;
}

uint64_t FigAggregateVideoDestinationIsAnyOutputReadyToRender(uint64_t a1)
{
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(uint64_t (**)(uint64_t))(v3 + 64);
  if (!v4) {
    return 0;
  }

  return v4(a1);
}

uint64_t fpfsi_handleSetProperty(const __CFString *a1, uint64_t a2, const void *a3, const __CFDictionary *a4, unsigned char *a5)
{
  uint64_t v167 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v10 = *(const void **)DerivedStorage;
  uint64_t v11 = CMBaseObjectGetDerivedStorage();
  *a5 = 1;
  fpfs_LockMutexWithCaller((uint64_t)v10);
  if (FigRetainProxyIsInvalidated()) {
    goto LABEL_57;
  }
  if (CFEqual(a3, @"PlaybackItemProperties"))
  {
    if (a4)
    {
      CFTypeID TypeID = CFDictionaryGetTypeID();
      if (TypeID == CFGetTypeID(a4))
      {
        valuePtr.unsigned int value = 0;
        CFNumberRef Value = CFDictionaryGetValue(a4, @"AVItemPlaybackProperties_StartTime");
        if (Value)
        {
          uint64_t v14 = Value;
          if (CFDictionaryGetCount(a4) == 1)
          {
            CFTypeID v15 = CFGetTypeID(v14);
            if (v15 == CFNumberGetTypeID())
            {
              CFNumberGetValue((CFNumberRef)v14, kCFNumberDoubleType, &valuePtr);
              CMTimeMakeWithSeconds(&time, *(Float64 *)&valuePtr.value, 1000);
              uint64_t updated = 0;
              *(CMTime *)(DerivedStorage + 224) = time;
            }
            else
            {
              uint64_t updated = 4294954516;
            }
            goto LABEL_51;
          }
        }
LABEL_11:
        uint64_t updated = 4294954514;
        goto LABEL_51;
      }
    }
LABEL_50:
    uint64_t updated = 0;
    goto LABEL_51;
  }
  if (CFEqual(a3, @"OutputQTESFilePath") || CFEqual(a3, @"AvailableFileSize")) {
    goto LABEL_11;
  }
  if (CFEqual(a3, @"ChosenAlternateTrackIDDictionary"))
  {
    uint64_t updated = 4294954513;
    goto LABEL_51;
  }
  if (CFEqual(a3, @"EndTime"))
  {
    if (a4)
    {
      CFTypeID v17 = CFDictionaryGetTypeID();
      if (v17 != CFGetTypeID(a4)) {
        goto LABEL_50;
      }
    }
    CFAllocatorRef v18 = (_OWORD *)(DerivedStorage + 1376);
    uint64_t v19 = MEMORY[0x1E4F1F9F8];
    *(_OWORD *)(DerivedStorage + 1376) = *MEMORY[0x1E4F1F9F8];
    *(void *)(DerivedStorage + 1392) = *(void *)(v19 + 16);
    fpfsi_EnqueueEndTimeChangedNotification(a1);
    if (a4)
    {
      CMTimeMakeFromDictionary(&time, a4);
      *CFAllocatorRef v18 = *(_OWORD *)&time.value;
      *(void *)(DerivedStorage + 1392) = time.epoch;
    }
    if ((*(_DWORD *)(DerivedStorage + 1388) & 0x1D) == 1)
    {
      uint64_t v20 = *(void *)(DerivedStorage + 2544);
      *(_OWORD *)&time.unsigned int value = *v18;
      time.CMTimeEpoch epoch = *(void *)(DerivedStorage + 1392);
      Float64 Seconds = CMTimeGetSeconds(&time);
      FigReportingAgentStatsSetIntValue(v20, 0x1EE582B78, 0x1EE585218, (uint64_t)(Seconds * 1000.0));
    }
    CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    *(_OWORD *)&time.unsigned int value = *v18;
    time.CMTimeEpoch epoch = *(void *)(DerivedStorage + 1392);
    CFStringRef v23 = CMTimeCopyDescription(AllocatorForMedia, &time);
    if (dword_1E9350BB0)
    {
      int v164 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (v23) {
      CFRelease(v23);
    }
    if (*(void *)(DerivedStorage + 576))
    {
      if (fpfsi_PlaybackHasBufferedBeyondForwardEndTime((uint64_t)a1))
      {
        for (uint64_t i = *(void *)(DerivedStorage + 1048); i; uint64_t i = *(void *)(i + 8))
        {
          uint64_t v28 = *(void *)(i + 48);
          uint64_t v29 = DerivedStorage + 16 * *(unsigned __int8 *)(i + 180);
          if ((v28 == *(void *)(v29 + 1000) || v28 == *(void *)(v29 + 1008)) && !*(void *)(i + 112)) {
            fpfs_EnsureEndTimerProcForTrack(i);
          }
        }
      }
      fpfsi_applyForwardEndTime();
      fpfsi_MakeNextItemReadyForInspectionIfItemEndedOrBeyondFwdEnd(a1);
    }
    if (!*(unsigned char *)(DerivedStorage + 470)
      || *(void *)(DerivedStorage + 1048)
      || (uint64_t v30 = fpfsi_SeekToCurrentTime((const __CFArray *)a1), !v30))
    {
      if (fpfsi_PlaybackHasBufferedBeyondForwardEndTime((uint64_t)a1)
        || (uint64_t v30 = fpfs_FlowControlPump(DerivedStorage, 0, 1, 255), !v30))
      {
        fpfs_CheckPrebufferedLevels((uint64_t)a1, 1, -1, 0, (uint64_t)&time);
        fpfs_endEndedTracks(DerivedStorage);
        goto LABEL_50;
      }
    }
LABEL_58:
    uint64_t updated = v30;
    goto LABEL_51;
  }
  if (CFEqual(a3, @"TimeToPauseBuffering"))
  {
    if (a4)
    {
      CFTypeID v25 = CFDictionaryGetTypeID();
      if (v25 != CFGetTypeID(a4)) {
        goto LABEL_50;
      }
      memset(&time, 0, sizeof(time));
      CMTimeMakeFromDictionary(&time, a4);
    }
    else
    {
      CMTime time = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
    }
    CMTime valuePtr = time;
    fpfsi_applyTimeToPauseBuffering((uint64_t)a1, (long long *)&valuePtr.value);
    goto LABEL_50;
  }
  if (CFEqual(a3, @"TimeToPausePlayback"))
  {
    if (a4)
    {
      CFTypeID v26 = CFDictionaryGetTypeID();
      if (v26 != CFGetTypeID(a4)) {
        goto LABEL_50;
      }
      memset(&time, 0, sizeof(time));
      CMTimeMakeFromDictionary(&time, a4);
    }
    else
    {
      CMTime time = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
    }
    CMTime valuePtr = time;
    p_CMTime valuePtr = &valuePtr;
LABEL_56:
    fpfsi_applyTimeToPausePlayback(a1, (long long *)&p_valuePtr->value, 0, 1);
    goto LABEL_50;
  }
  if (CFEqual(a3, @"AssociatedPlaybackDurationWhilePaused"))
  {
    CMTimeMakeFromDictionary(&time, a4);
    uint64_t updated = 0;
    *(CMTime *)(DerivedStorage + 3320) = time;
    goto LABEL_51;
  }
  if (CFEqual(a3, @"SnapTimeToPausePlayback"))
  {
    int v33 = FigCFEqual();
    if (*(unsigned __int8 *)(DerivedStorage + 466) == v33) {
      goto LABEL_50;
    }
    *(unsigned char *)(DerivedStorage + 466) = v33;
    CMTime time = *(CMTime *)(DerivedStorage + 1448);
    p_CMTime valuePtr = &time;
    goto LABEL_56;
  }
  if (CFEqual(a3, @"ReverseEndTime")) {
    goto LABEL_11;
  }
  if (CFEqual(a3, @"EQPreset"))
  {
    LODWORD(time.value) = 0;
    if (a4 && CFNumberGetValue(a4, kCFNumberIntType, &time)) {
      fpfsi_setEQPreset((uint64_t)a1, time.value);
    }
    goto LABEL_50;
  }
  if (CFEqual(a3, @"AudioDeviceChannelMap"))
  {
    if (a4)
    {
      CFTypeID v34 = CFDataGetTypeID();
      if (v34 != CFGetTypeID(a4)) {
        goto LABEL_50;
      }
    }
    time.unsigned int value = (CMTimeValue)@"AudioDeviceChannelMap";
    *(void *)&time.CMTimeScale timescale = a4;
    CFNumberType v35 = *(const void **)(DerivedStorage + 1808);
    *(void *)(DerivedStorage + 1808) = a4;
    if (!a4)
    {
LABEL_73:
      if (v35) {
        CFRelease(v35);
      }
      fpfsi_setPropertyOnAllAudioRenderPipelines((uint64_t)a1, &time.value);
      goto LABEL_50;
    }
LABEL_72:
    CFRetain(a4);
    goto LABEL_73;
  }
  if (CFEqual(a3, @"QualityGear"))
  {
    uint64_t updated = fpfsi_setPlaybackRateMonitorProperty(DerivedStorage, @"AfmfpbProperty_QualityGear", (uint64_t)a4);
    *(unsigned char *)(v11 + 458) = 0;
    goto LABEL_51;
  }
  if (CFEqual(a3, @"SynchronizedLayers"))
  {
    uint64_t v36 = (void *)MEMORY[0x199711A30]();
    if (!a4 || (CFTypeID v37 = CFArrayGetTypeID(), v37 == CFGetTypeID(a4)))
    {
      int v38 = *(const void **)(DerivedStorage + 696);
      if (v38)
      {
        CFRelease(v38);
        *(void *)(DerivedStorage + 696) = 0;
      }
      if (a4)
      {
        CFAllocatorRef v39 = (const __CFAllocator *)FigGetAllocatorForMedia();
        CFArrayRef Copy = CFArrayCreateCopy(v39, a4);
        *(void *)(DerivedStorage + 696) = Copy;
        if (!Copy)
        {
          uint64_t updated = FigSignalErrorAt();
          goto LABEL_87;
        }
      }
      if (*(const __CFString **)(v11 + 80) == a1)
      {
        time.unsigned int value = 0;
        fpfs_ensureTransaction((uint64_t)v10, &time.value);
        uint64_t updated = fpfs_createOrUpdateLayerSync(*(void *)DerivedStorage);
        if (!updated && *(void *)(DerivedStorage + 680)) {
          fpfsi_synchronizeLayerToTimebaseWithTransaction((uint64_t)a1, *(const void **)(v11 + 816));
        }
        fpfs_commitTransaction((uint64_t)v10, time.value);
        if (time.value) {
          CFRelease((CFTypeRef)time.value);
        }
        goto LABEL_87;
      }
    }
    uint64_t updated = 0;
LABEL_87:
    goto LABEL_51;
  }
  if (CFEqual(a3, @"VideoEnhancementMode"))
  {
    if (a4)
    {
      CFTypeID v41 = CFGetTypeID(a4);
      if (v41 == CFStringGetTypeID())
      {
        if (!FigCFEqual())
        {
          CFArrayRef v42 = *(const void **)(DerivedStorage + 704);
          *(void *)(DerivedStorage + 704) = a4;
          CFRetain(a4);
          if (v42) {
            CFRelease(v42);
          }
          fpfsi_setVideoEnhancementModeOnImageQueues((uint64_t)a1, (uint64_t)a4);
        }
        goto LABEL_50;
      }
    }
    goto LABEL_57;
  }
  if (CFEqual(a3, @"RestrictsAutomaticMediaSelectionToAvailableOfflineOptions"))
  {
    if (a4)
    {
      CFTypeID v43 = CFGetTypeID(a4);
      if (v43 == CFBooleanGetTypeID())
      {
        uint64_t updated = 0;
        *(unsigned char *)(DerivedStorage + 1836) = CFBooleanGetValue(a4);
        goto LABEL_51;
      }
    }
    goto LABEL_57;
  }
  if (CFEqual(a3, @"RequiresExternalProtection"))
  {
    if (a4)
    {
      CFTypeID v44 = CFGetTypeID(a4);
      if (v44 == CFBooleanGetTypeID())
      {
        if (CFBooleanGetValue(a4))
        {
          time.unsigned int value = 1;
          CFNumberRef v45 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt64Type, &time);
          CFNumberRef v46 = v45;
          CFArrayRef v47 = *(const void **)(DerivedStorage + 1840);
          *(void *)(DerivedStorage + 1840) = v45;
          if (v45) {
            CFRetain(v45);
          }
          if (v47) {
            CFRelease(v47);
          }
          uint64_t v48 = *(void *)(DerivedStorage + 936);
          if (v48) {
            FigBytePumpSetProperty(v48, 0x1EE53E5B8, (uint64_t)v46);
          }
          goto LABEL_121;
        }
      }
    }
    goto LABEL_57;
  }
  if (CFEqual(a3, @"estimatedCurrentDate"))
  {
    if (*(void *)(DerivedStorage + 936)) {
      goto LABEL_57;
    }
    CFNumberRef v46 = *(CFNumberRef *)(DerivedStorage + 1608);
    *(void *)(DerivedStorage + 1608) = a4;
    if (a4) {
      goto LABEL_120;
    }
LABEL_121:
    if (v46) {
      CFRelease(v46);
    }
    goto LABEL_50;
  }
  if (CFEqual(a3, @"currentDate"))
  {
    uint64_t v30 = fpfsi_SeekToDateWithID(a1, a4, 0);
    goto LABEL_58;
  }
  if (CFEqual(a3, @"SelectedMediaArray"))
  {
    if (a4)
    {
      CFTypeID v49 = CFGetTypeID(a4);
      if (v49 == CFArrayGetTypeID())
      {
        uint64_t v30 = fpfs_SetClientMediaArray(a1, a4);
        goto LABEL_58;
      }
    }
    goto LABEL_57;
  }
  if (CFEqual(a3, @"PreferredMaximumBufferDuration"))
  {
    if (a4)
    {
      CFTypeID v50 = CFGetTypeID(a4);
      if (v50 == CFNumberGetTypeID())
      {
        LODWORD(time.value) = 0;
        CFNumberGetValue(a4, kCFNumberSInt32Type, &time);
        if ((time.value & 0x80000000) == 0)
        {
          *(_DWORD *)(DerivedStorage + 2244) = time.value;
          fpfsi_UpdateHighWaterSecs(v11, (uint64_t)a1);
          goto LABEL_50;
        }
      }
    }
    goto LABEL_57;
  }
  if (CFEqual(a3, @"MaximumTrailingBufferDuration"))
  {
    if (a4)
    {
      CFTypeID v51 = CFGetTypeID(a4);
      if (v51 == CFNumberGetTypeID())
      {
        LODWORD(time.value) = 0;
        CFNumberGetValue(a4, kCFNumberSInt32Type, &time);
        *(_DWORD *)(DerivedStorage + 2288) = time.value;
        fpfsi_UpdateCacheBehindSecs(v11, (uint64_t)a1);
        goto LABEL_50;
      }
    }
    goto LABEL_57;
  }
  if (CFEqual(a3, @"TextMarkupArray"))
  {
    uint64_t v52 = *(void *)(DerivedStorage + 816);
    if (a4)
    {
      CFTypeID v53 = CFGetTypeID(a4);
      if (v53 == CFArrayGetTypeID())
      {
        CFAllocatorRef v54 = *(const void **)(DerivedStorage + 1816);
        if (v54)
        {
          CFRelease(v54);
          *(void *)(DerivedStorage + 1816) = 0;
        }
        uint64_t updated = 0;
        *(void *)(DerivedStorage + 1816) = CFRetain(a4);
      }
      else
      {
        uint64_t updated = FigSignalErrorAt();
      }
    }
    else
    {
      uint64_t v58 = *(const void **)(DerivedStorage + 1816);
      if (v58)
      {
        CFRelease(v58);
        uint64_t updated = 0;
        *(void *)(DerivedStorage + 1816) = 0;
      }
      else
      {
        uint64_t updated = 0;
      }
    }
    if (!updated && v52)
    {
      uint64_t v61 = *(void *)(DerivedStorage + 1048);
      if (!v61) {
        goto LABEL_538;
      }
      uint64_t updated = 0;
      uint64_t v62 = 0;
      do
      {
        if (*(_DWORD *)(v61 + 32) == 1935832172)
        {
          uint64_t v63 = *(void *)(v61 + 96);
          if (v63 && v63 != v62)
          {
            if (*(unsigned char *)(v11 + 460)) {
              uint64_t v65 = 0x1EE54F778;
            }
            else {
              uint64_t v65 = 0x1EE5743D8;
            }
            uint64_t updated = fpfs_setPropertyOnPrimaryAndAuxRenderPipelines(*(void *)(v61 + 96), v65, *(void *)(DerivedStorage + 1816));
            uint64_t v62 = v63;
          }
        }
        uint64_t v61 = *(void *)(v61 + 8);
      }
      while (v61);
      if (v52 != v62)
      {
LABEL_538:
        if (*(unsigned char *)(v11 + 460)) {
          CMTime v66 = &kFigSubtitleRenderPipelineProperty_TextMarkupArray;
        }
        else {
          CMTime v66 = &kFigCaptionRenderPipelineProperty_TextMarkupArray;
        }
        uint64_t updated = fpfs_setPropertyOnPrimaryAndAuxRenderPipelines(v52, *v66, *(void *)(DerivedStorage + 1816));
      }
    }
    uint64_t v67 = *(void *)(DerivedStorage + 912);
    if (v67)
    {
      uint64_t v68 = @"TextMarkupArray";
      uint64_t v69 = *(const void **)(DerivedStorage + 1816);
LABEL_207:
      FigOutOfBandTrackControllerSetProperty(v67, v68, v69);
      goto LABEL_51;
    }
    goto LABEL_51;
  }
  if (!CFEqual(a3, @"TextHighlightArray"))
  {
    if (CFEqual(a3, @"LegibleOutputs"))
    {
      if (!a4 || (CFTypeID v59 = CFGetTypeID(a4), v59 == CFDictionaryGetTypeID()))
      {
        fpfsi_setLegibleOutputsDictionary((const __CFArray *)a1, a4);
        goto LABEL_50;
      }
      goto LABEL_57;
    }
    if (CFEqual(a3, @"MetadataOutputs"))
    {
      if (!a4 || (CFTypeID v70 = CFGetTypeID(a4), v70 == CFDictionaryGetTypeID()))
      {
        uint64_t v30 = fpfsi_setMetadataOutputsDictionary((const __CFArray *)a1, a4);
        goto LABEL_58;
      }
      goto LABEL_57;
    }
    if (CFEqual(a3, @"VisualContextArray"))
    {
      fpfsi_setVisualContextArray((const __CFArray *)a1, a4);
      goto LABEL_50;
    }
    if (CFEqual(a3, @"SuppressVideoLayers"))
    {
      fpfsi_setSuppressVideoLayers((const __CFArray *)a1, *MEMORY[0x1E4F1CFD0] == (void)a4);
      goto LABEL_50;
    }
    if (CFEqual(a3, @"SuppressLegibleRendering"))
    {
      uint64_t updated = 0;
      *(unsigned char *)(DerivedStorage + 875) = *MEMORY[0x1E4F1CFD0] == (void)a4;
      goto LABEL_51;
    }
    if (CFEqual(a3, @"ApertureMode"))
    {
      if (a4)
      {
        CFTypeID v77 = CFGetTypeID(a4);
        if (v77 == CFStringGetTypeID())
        {
          if (CFEqual(a4, @"CleanAperture"))
          {
            uint64_t updated = 0;
            __int16 v78 = 257;
          }
          else
          {
            if (!CFEqual(a4, @"ProductionAperture"))
            {
              if (CFEqual(a4, @"EncodedPixels"))
              {
                uint64_t updated = 0;
                *(_WORD *)(DerivedStorage + 872) = 0;
                goto LABEL_51;
              }
              goto LABEL_57;
            }
            uint64_t updated = 0;
            __int16 v78 = 1;
          }
          *(_WORD *)(DerivedStorage + 872) = v78;
          goto LABEL_51;
        }
      }
LABEL_57:
      uint64_t v30 = FigSignalErrorAt();
      goto LABEL_58;
    }
    if (CFEqual(a3, @"Volume"))
    {
      if (!a4) {
        goto LABEL_57;
      }
      CFTypeID v79 = CFGetTypeID(a4);
      if (v79 != CFNumberGetTypeID()) {
        goto LABEL_57;
      }
      LODWORD(time.value) = 1065353216;
      CFNumberGetValue(a4, kCFNumberFloat32Type, &time);
      float v80 = *(float *)&time.value;
      if (*(float *)&time.value <= 1.0)
      {
        if (*(float *)&time.value < 0.0)
        {
          LODWORD(time.value) = 0;
          float v80 = 0.0;
        }
      }
      else
      {
        LODWORD(time.value) = 1065353216;
        float v80 = 1.0;
      }
      if (v80 == *(float *)(DerivedStorage + 1832)) {
        goto LABEL_50;
      }
      uint64_t updated = fpfsi_applySoftwareVolume(v80, 0.0, (uint64_t)a1, 3);
      if (!updated) {
        *(_DWORD *)(DerivedStorage + 1832) = time.value;
      }
      goto LABEL_51;
    }
    if (CFEqual(a3, @"DisplayNonForcedSubtitles"))
    {
      fpfsi_setNonForcedSubtitlesEnabled(a1, *MEMORY[0x1E4F1CFD0] == (void)a4);
      goto LABEL_50;
    }
    if (CFEqual(a3, @"ClientAuditToken"))
    {
      if (!a4) {
        goto LABEL_57;
      }
      CFTypeID v81 = CFDataGetTypeID();
      if (v81 != CFGetTypeID(a4)) {
        goto LABEL_57;
      }
      CFStringRef v82 = *(const void **)(DerivedStorage + 2352);
      *(void *)(DerivedStorage + 2352) = a4;
      CFRetain(a4);
      if (v82) {
        CFRelease(v82);
      }
      uint64_t v83 = *(void *)(DerivedStorage + 936);
      if (!v83) {
        goto LABEL_50;
      }
      uint64_t v84 = 0x1EE53E618;
LABEL_236:
      FigBytePumpSetProperty(v83, v84, (uint64_t)a4);
      goto LABEL_50;
    }
    if (CFEqual(a3, @"ServiceIdentifier"))
    {
      if (!a4) {
        goto LABEL_57;
      }
      CFTypeID v85 = CFStringGetTypeID();
      if (v85 != CFGetTypeID(a4)) {
        goto LABEL_57;
      }
      CFNumberRef v46 = *(CFNumberRef *)(DerivedStorage + 2360);
      *(void *)(DerivedStorage + 2360) = a4;
      goto LABEL_120;
    }
    if (CFEqual(a3, @"allowProgressiveSwitchUp"))
    {
      unsigned int v86 = *MEMORY[0x1E4F1CFD0] == (void)a4;
      *(unsigned char *)(DerivedStorage + 554) = v86;
      uint64_t v87 = 0x1EE561218;
LABEL_254:
      fpfsi_RTCReportingUpdateProgressive(DerivedStorage, v87, v86);
      goto LABEL_50;
    }
    if (CFEqual(a3, @"allowProgressiveStartup"))
    {
      unsigned int v86 = *MEMORY[0x1E4F1CFD0] == (void)a4;
      *(unsigned char *)(DerivedStorage + 555) = v86;
      uint64_t v87 = 0x1EE561238;
      goto LABEL_254;
    }
    if (CFEqual(a3, @"allowProgressiveResume"))
    {
      unsigned int v86 = *MEMORY[0x1E4F1CFD0] == (void)a4;
      *(unsigned char *)(DerivedStorage + 556) = v86;
      uint64_t v87 = 0x1EE561258;
      goto LABEL_254;
    }
    if (CFEqual(a3, @"AutomaticallyLoadedAssetProperties"))
    {
      if (!a4)
      {
        CFNumberRef v46 = *(CFNumberRef *)(DerivedStorage + 144);
        *(void *)(DerivedStorage + 144) = 0;
        goto LABEL_121;
      }
      CFTypeID v88 = CFArrayGetTypeID();
      if (v88 != CFGetTypeID(a4)) {
        goto LABEL_57;
      }
      CFNumberRef v46 = *(CFNumberRef *)(DerivedStorage + 144);
      *(void *)(DerivedStorage + 144) = a4;
      goto LABEL_120;
    }
    if (CFEqual(a3, @"AutomaticallyLoadedAssetTrackProperties"))
    {
      if (!a4)
      {
        CFNumberRef v46 = *(CFNumberRef *)(DerivedStorage + 152);
        *(void *)(DerivedStorage + 152) = 0;
        goto LABEL_121;
      }
      CFTypeID v89 = CFArrayGetTypeID();
      if (v89 != CFGetTypeID(a4)) {
        goto LABEL_57;
      }
      CFNumberRef v46 = *(CFNumberRef *)(DerivedStorage + 152);
      *(void *)(DerivedStorage + 152) = a4;
      goto LABEL_120;
    }
    if (CFEqual(a3, @"MediaKind"))
    {
      if (a4)
      {
        CFTypeID v90 = CFStringGetTypeID();
        if (v90 != CFGetTypeID(a4)) {
          goto LABEL_57;
        }
        uint64_t v91 = *(const void **)(DerivedStorage + 2368);
        *(void *)(DerivedStorage + 2368) = a4;
LABEL_268:
        CFRetain(a4);
        if (!v91) {
          goto LABEL_276;
        }
        goto LABEL_275;
      }
      uint64_t v91 = *(const void **)(DerivedStorage + 2368);
      *(void *)(DerivedStorage + 2368) = 0;
      if (!v91)
      {
LABEL_276:
        fpfsi_applyLoudnessInfo(DerivedStorage, 0, 1);
        goto LABEL_50;
      }
      goto LABEL_275;
    }
    if (CFEqual(a3, @"TimePitchAlgorithm"))
    {
      if (*(unsigned char *)(DerivedStorage + 553)) {
        goto LABEL_50;
      }
      uint64_t v30 = fpfsi_setTimePitchAlgorithm((const __CFArray *)a1, a4);
      goto LABEL_58;
    }
    if (CFEqual(a3, @"AdjustTargetLevel"))
    {
      if (a4)
      {
        CFTypeID v92 = CFNumberGetTypeID();
        if (v92 == CFGetTypeID(a4))
        {
          CFStringRef v93 = *(const void **)(DerivedStorage + 3144);
          *(void *)(DerivedStorage + 3144) = a4;
          CFRetain(a4);
          if (v93) {
            CFRelease(v93);
          }
          fpfsi_applyAdjustTargetLevel(DerivedStorage, 0);
          goto LABEL_50;
        }
      }
      goto LABEL_57;
    }
    if (CFEqual(a3, @"AdjustCompressionProfile"))
    {
      if (a4)
      {
        CFTypeID v94 = CFNumberGetTypeID();
        if (v94 == CFGetTypeID(a4))
        {
          uint64_t v95 = *(const void **)(DerivedStorage + 3152);
          *(void *)(DerivedStorage + 3152) = a4;
          CFRetain(a4);
          if (v95) {
            CFRelease(v95);
          }
          fpfsi_applyAdjustCompressionProfile(DerivedStorage, 0);
          goto LABEL_50;
        }
      }
      goto LABEL_57;
    }
    if (CFEqual(a3, @"BandwidthCap"))
    {
      if (a4)
      {
        CFTypeID v96 = CFNumberGetTypeID();
        if (v96 == CFGetTypeID(a4))
        {
          LODWORD(time.value) = 0;
          CFNumberGetValue(a4, kCFNumberSInt32Type, &time);
          *(_DWORD *)(DerivedStorage + 2388) = time.value;
          uint64_t v30 = fpfsi_UpdateBandwidthCap(v11, (uint64_t)a1);
          goto LABEL_58;
        }
      }
      goto LABEL_57;
    }
    if (CFEqual(a3, @"BandwidthCapForExpensiveNetwork"))
    {
      if (a4)
      {
        CFTypeID v97 = CFNumberGetTypeID();
        if (v97 != CFGetTypeID(a4)) {
          goto LABEL_57;
        }
        CFDictionaryRef v98 = *(const void **)(DerivedStorage + 2392);
        *(void *)(DerivedStorage + 2392) = a4;
        CFRetain(a4);
      }
      else
      {
        CFDictionaryRef v98 = *(const void **)(DerivedStorage + 2392);
        *(void *)(DerivedStorage + 2392) = 0;
      }
      if (v98) {
        CFRelease(v98);
      }
      uint64_t v30 = fpfsi_setPreferredBitrateForExpensiveNetworks(a1, (uint64_t)a4);
      goto LABEL_58;
    }
    if (CFEqual(a3, @"TimeOffsetFromLive"))
    {
      if (!a4) {
        goto LABEL_57;
      }
      CFTypeID v99 = CFDictionaryGetTypeID();
      if (v99 != CFGetTypeID(a4)) {
        goto LABEL_57;
      }
      CMTimeMakeFromDictionary(&time, a4);
      *(CMTime *)(DerivedStorage + 632) = time;
      uint64_t v100 = *(void *)(DerivedStorage + 936);
      if (!v100 || (*(_DWORD *)(DerivedStorage + 644) & 0x1D) != 1) {
        goto LABEL_50;
      }
      uint64_t updated = FigBytePumpSetProperty(v100, @"FBP_PrebufferReservation", (uint64_t)a4);
      fpfs_GetNextTimeToPlayIfEstablished((uint64_t)a1, (uint64_t)&time);
      valuePtr.unsigned int value = time.value;
      CMTimeFlags flags = time.flags;
      valuePtr.CMTimeScale timescale = time.timescale;
      if ((time.flags & 0x1D) == 1)
      {
        CMTimeEpoch epoch = time.epoch;
        fpfsi_GetPumpMaxTimeAvailable(DerivedStorage, (uint64_t)&time2);
        time.unsigned int value = valuePtr.value;
        time.CMTimeScale timescale = valuePtr.timescale;
        time.CMTimeFlags flags = flags;
        time.CMTimeEpoch epoch = epoch;
        if (CMTimeCompare(&time, &time2) >= 1) {
          fpfsi_SetCurrentTimeWithSeekID((uint64_t)a1, MEMORY[0x1E4F1FA10], 4, 1);
        }
      }
      goto LABEL_51;
    }
    if (CFEqual(a3, @"AutomaticallyPreservesTimeOffsetFromLive"))
    {
      if (a4)
      {
        CFTypeID v103 = CFBooleanGetTypeID();
        if (v103 == CFGetTypeID(a4))
        {
          int v104 = *MEMORY[0x1E4F1CFD0] == (void)a4;
          if (*(unsigned __int8 *)(DerivedStorage + 465) != v104)
          {
            *(unsigned char *)(DerivedStorage + 465) = v104;
            uint64_t v105 = MEMORY[0x1E4F1F9F8];
            *(_OWORD *)(DerivedStorage + 408) = *MEMORY[0x1E4F1F9F8];
            *(void *)(DerivedStorage + 424) = *(void *)(v105 + 16);
            fpfs_GetNextTimeToPlay(DerivedStorage, 0, (uint64_t)&v161);
            fpfsi_PrepareToStartWhenLikelyToKeepUp((uint64_t)a1, &v161);
          }
          goto LABEL_50;
        }
      }
      goto LABEL_57;
    }
    if (CFEqual(a3, @"IFramePrefetchTargetDimensions"))
    {
      time.unsigned int value = 0;
      *(void *)&time.CMTimeScale timescale = 0;
      double v106 = 0.0;
      if (a4)
      {
        CFTypeID v107 = CFGetTypeID(a4);
        if (v107 == CFDictionaryGetTypeID())
        {
          CGSizeMakeWithDictionaryRepresentation(a4, (CGSize *)&time);
          double v106 = *(double *)&time.timescale;
        }
      }
      unsigned int v108 = (double *)(DerivedStorage + 2464);
      if (v106 == *(double *)(DerivedStorage + 2472) && *(double *)&time.value == *v108) {
        goto LABEL_50;
      }
      *(_OWORD *)unsigned int v108 = *(_OWORD *)&time.value;
      if (*(double *)(DerivedStorage + 2472) * *(double *)(DerivedStorage + 2464) <= 0.0) {
        goto LABEL_50;
      }
      *(_DWORD *)(v11 + 808) = 1;
      if (!*(void *)(DerivedStorage + 40)) {
        goto LABEL_50;
      }
      uint64_t v30 = fpfsi_UpdateResourceSpecifierOnResourceArbiter((uint64_t)a1);
      if (!v30)
      {
        uint64_t v30 = fpfsi_ConfigureAlternateSelectionBossForScanningRole();
        if (!v30)
        {
          uint64_t v30 = FigAlternateSelectionBossApplyFilters(*(const void **)(DerivedStorage + 40));
          if (!v30) {
            goto LABEL_50;
          }
        }
      }
      goto LABEL_58;
    }
    if (CFEqual(a3, @"ResolutionCap"))
    {
      *(_OWORD *)&time.unsigned int value = *MEMORY[0x1E4F1DB30];
      if (!a4) {
        goto LABEL_57;
      }
      CFTypeID v109 = CFGetTypeID(a4);
      if (v109 != CFDictionaryGetTypeID()
        || !CGSizeMakeWithDictionaryRepresentation(a4, (CGSize *)&time)
        || *(double *)&time.value < 0.0
        || *(double *)&time.timescale < 0.0)
      {
        goto LABEL_57;
      }
      if (*(double *)(DerivedStorage + 2488) == *(double *)&time.value
        && *(double *)(DerivedStorage + 2496) == *(double *)&time.timescale)
      {
        goto LABEL_50;
      }
      uint64_t v110 = (_OWORD *)(DerivedStorage + 2488);
LABEL_353:
      _OWORD *v110 = *(_OWORD *)&time.value;
      uint64_t v30 = fpfsi_HandleResolutionCapOrDisplaySizeChange((uint64_t)a1);
      goto LABEL_58;
    }
    if (CFEqual(a3, @"ResolutionCapForExpensiveNetwork"))
    {
      *(_OWORD *)&time.unsigned int value = *MEMORY[0x1E4F1DB30];
      if (a4)
      {
        CFTypeID v111 = CFGetTypeID(a4);
        if (v111 == CFDictionaryGetTypeID()
          && CGSizeMakeWithDictionaryRepresentation(a4, (CGSize *)&time)
          && *(double *)&time.value >= 0.0
          && *(double *)&time.timescale >= 0.0)
        {
          uint64_t v112 = *(const void **)(DerivedStorage + 2528);
          *(void *)(DerivedStorage + 2528) = a4;
          CFRetain(a4);
          if (v112) {
            CFRelease(v112);
          }
          uint64_t v30 = fpfsi_setResolutionCapForExpensiveNetworks(a1, *(const __CFDictionary **)(DerivedStorage + 2528));
          goto LABEL_58;
        }
      }
      goto LABEL_57;
    }
    if (CFEqual(a3, @"ResolutionFloor"))
    {
      *(_OWORD *)&time.unsigned int value = *MEMORY[0x1E4F1DB30];
      if (!a4) {
        goto LABEL_57;
      }
      CFTypeID v113 = CFGetTypeID(a4);
      if (v113 != CFDictionaryGetTypeID()
        || !CGSizeMakeWithDictionaryRepresentation(a4, (CGSize *)&time)
        || *(double *)&time.value < 0.0
        || *(double *)&time.timescale < 0.0)
      {
        goto LABEL_57;
      }
      if (*(double *)(DerivedStorage + 2504) == *(double *)&time.value
        && *(double *)(DerivedStorage + 2512) == *(double *)&time.timescale)
      {
        goto LABEL_50;
      }
      uint64_t v110 = (_OWORD *)(DerivedStorage + 2504);
      goto LABEL_353;
    }
    if (CFEqual(a3, @"MinimizeNetworkingWhilePaused"))
    {
      *(unsigned char *)(DerivedStorage + 532) = *MEMORY[0x1E4F1CFD0] == (void)a4;
      uint64_t v83 = *(void *)(DerivedStorage + 936);
      if (!v83) {
        goto LABEL_50;
      }
      uint64_t v84 = 0x1EE53E858;
      goto LABEL_236;
    }
    if (CFEqual(a3, @"CountOfTaggedRangeMetadataArrayListeners"))
    {
      if (a4)
      {
        CFTypeID v114 = CFGetTypeID(a4);
        if (v114 == CFNumberGetTypeID())
        {
          uint64_t v115 = *(void *)(DerivedStorage + 2608);
          CFNumberGetValue(a4, kCFNumberCFIndexType, (void *)(DerivedStorage + 2608));
          if (v115 >= *(void *)(DerivedStorage + 2608)) {
            goto LABEL_50;
          }
          uint64_t v30 = fpfsi_EnqueueTaggedRangeMetadataChangedNotificationIfNeeded(*(const void **)DerivedStorage, a1);
          goto LABEL_58;
        }
      }
      goto LABEL_57;
    }
    if (CFEqual(a3, @"VariantPreferences"))
    {
      if (!a4) {
        goto LABEL_57;
      }
      CFTypeID v116 = CFGetTypeID(a4);
      if (v116 != CFNumberGetTypeID()) {
        goto LABEL_57;
      }
      LODWORD(time.value) = 0;
      CFNumberGetValue(a4, kCFNumberSInt32Type, &time);
      uint64_t updated = 0;
      if (LODWORD(time.value) == *(_DWORD *)(DerivedStorage + 560)) {
        goto LABEL_51;
      }
      *(_DWORD *)(DerivedStorage + 560) = time.value;
      goto LABEL_434;
    }
    if (CFEqual(a3, @"AudioSampleRateCap"))
    {
      if (!a4) {
        goto LABEL_57;
      }
      CFTypeID v117 = CFGetTypeID(a4);
      if (v117 != CFNumberGetTypeID()) {
        goto LABEL_57;
      }
      time.unsigned int value = 0;
      CFNumberGetValue(a4, kCFNumberDoubleType, &time);
      uint64_t updated = 0;
      if (*(double *)&time.value < 0.0 || *(double *)&time.value == *(double *)(DerivedStorage + 2520)) {
        goto LABEL_51;
      }
      *(void *)(DerivedStorage + 2520) = time.value;
LABEL_434:
      uint64_t v30 = fpfsi_handleVariantPreferencesChanged(a1);
      goto LABEL_58;
    }
    if (CFEqual(a3, @"SuppressesAudioOnlyVariants"))
    {
      if (a4)
      {
        CFTypeID v118 = CFGetTypeID(a4);
        if (v118 == CFBooleanGetTypeID())
        {
          *(unsigned char *)(DerivedStorage + 558) = *MEMORY[0x1E4F1CFD0] == (void)a4;
          uint64_t v30 = fpfsi_handleSuppressedAudioOnlyVariantsChanged(a1);
          goto LABEL_58;
        }
      }
      goto LABEL_57;
    }
    if (CFEqual(a3, @"AudioSpatializationAllowed"))
    {
      if (a4)
      {
        CFTypeID v119 = CFGetTypeID(a4);
        if (v119 == CFBooleanGetTypeID())
        {
          fpfsi_setAudioSpatializationAllowed(a1, *MEMORY[0x1E4F1CFD0] == (void)a4);
          goto LABEL_50;
        }
      }
      goto LABEL_57;
    }
    if (CFEqual(a3, @"StereoAudioSpatializationAllowed"))
    {
      if (a4)
      {
        CFTypeID v120 = CFGetTypeID(a4);
        if (v120 == CFBooleanGetTypeID())
        {
          fpfsi_setStereoAudioSpatializationAllowed(a1, *MEMORY[0x1E4F1CFD0] == (void)a4);
          goto LABEL_50;
        }
      }
      goto LABEL_57;
    }
    if (CFEqual(a3, @"LoudnessInfo"))
    {
      if (a4)
      {
        CFTypeID v121 = CFGetTypeID(a4);
        if (v121 != CFDictionaryGetTypeID()) {
          goto LABEL_57;
        }
        uint64_t v91 = *(const void **)(DerivedStorage + 2376);
        *(void *)(DerivedStorage + 2376) = a4;
        goto LABEL_268;
      }
      uint64_t v91 = *(const void **)(DerivedStorage + 2376);
      *(void *)(DerivedStorage + 2376) = 0;
      if (!v91) {
        goto LABEL_276;
      }
LABEL_275:
      CFRelease(v91);
      goto LABEL_276;
    }
    if (CFEqual(a3, @"AudioProcessingTap"))
    {
      if (!a4
        || (CFTypeID v122 = MTAudioProcessingTapGetTypeID(), v122 == CFGetTypeID(a4))
        && (MTAudioProcessingTapIsMultitrackTap((uint64_t)a4)
         || MTAudioProcessingTapIsProxyTap((uint64_t)a4)))
      {
        fpfsi_setAudioProcessingTap((const __CFArray *)a1, a4);
        goto LABEL_50;
      }
      goto LABEL_57;
    }
    if (CFEqual(a3, @"ResetAudioBufferedAhead"))
    {
      if (*(void *)(CMBaseObjectGetDerivedStorage() + 504))
      {
        if (dword_1E9350BB0)
        {
          int v164 = 0;
          os_log_type_t type = OS_LOG_TYPE_DEFAULT;
          uint64_t v123 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v123, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        fpfs_stopResetDisturbReprepareAndResume(*(const void **)DerivedStorage, (const __CFArray *)a1, 1);
      }
      goto LABEL_50;
    }
    if (CFEqual(a3, @"AudioProcessingUnits"))
    {
      if (!a4 || (CFTypeID v124 = CFGetTypeID(a4), v124 == CFArrayGetTypeID()))
      {
        fpfsi_setAudioProcessingUnits((const __CFArray *)a1, a4);
        goto LABEL_50;
      }
      goto LABEL_57;
    }
    if (CFEqual(a3, @"AudioCurves"))
    {
      if (!a4 || (CFTypeID v125 = CFGetTypeID(a4), v125 == CFDictionaryGetTypeID()))
      {
        time.unsigned int value = (CMTimeValue)@"SecondaryAudioCurves";
        *(void *)&time.CMTimeScale timescale = a4;
        CFNumberType v35 = *(const void **)(DerivedStorage + 3128);
        *(void *)(DerivedStorage + 3128) = a4;
        if (!a4) {
          goto LABEL_73;
        }
        goto LABEL_72;
      }
      goto LABEL_57;
    }
    if (CFEqual(a3, @"AudioClockDevice"))
    {
      if (!a4 || (CFTypeID v126 = CFGetTypeID(a4), v126 == CFStringGetTypeID()))
      {
        time.unsigned int value = (CMTimeValue)@"AudioQueueClockDevice";
        *(void *)&time.CMTimeScale timescale = a4;
        CFNumberType v35 = *(const void **)(DerivedStorage + 3136);
        *(void *)(DerivedStorage + 3136) = a4;
        if (!a4) {
          goto LABEL_73;
        }
        goto LABEL_72;
      }
      goto LABEL_57;
    }
    if (CFEqual(a3, @"VideoSlotUsage"))
    {
      if (a4)
      {
        CFTypeID v127 = CFGetTypeID(a4);
        if (v127 == CFArrayGetTypeID())
        {
          fpfsi_updateVideoSlotUsage((uint64_t)a1, a4);
          goto LABEL_50;
        }
      }
      goto LABEL_57;
    }
    if (CFEqual(a3, @"PreferSDRVideo"))
    {
      if (a4)
      {
        CFTypeID v128 = CFGetTypeID(a4);
        if (v128 == CFBooleanGetTypeID())
        {
          fpfsi_setPreferSDRVideo((uint64_t)a1, *MEMORY[0x1E4F1CFD0] == (void)a4);
          goto LABEL_50;
        }
      }
      goto LABEL_57;
    }
    if (CFEqual(a3, @"StartsOnFirstEligibleVariant"))
    {
      if (a4)
      {
        CFTypeID v129 = CFGetTypeID(a4);
        if (v129 == CFBooleanGetTypeID())
        {
          int v130 = *MEMORY[0x1E4F1CFD0] == (void)a4;
          uint64_t v131 = CMBaseObjectGetDerivedStorage();
          if (*(_DWORD *)(v131 + 2868) != v130)
          {
            uint64_t updated = 0;
            *(_DWORD *)(v131 + 2868) = v130;
            goto LABEL_51;
          }
          goto LABEL_50;
        }
      }
      goto LABEL_57;
    }
    if (CFEqual(a3, @"DisableTrialSwitchUpTimer"))
    {
      uint64_t v132 = *(void *)(DerivedStorage + 96);
      if (!v132)
      {
        uint64_t updated = 0;
        *(unsigned char *)(DerivedStorage + 137) = 1;
        goto LABEL_51;
      }
      uint64_t v30 = FigCPECryptorSetProperty(v132, @"AfmfpbProperty_DisableTrialSwitchUpTimer", (uint64_t)a4);
      goto LABEL_58;
    }
    if (CFEqual(a3, @"PrefersOfflinePlayableVariants"))
    {
      if (!a4) {
        goto LABEL_57;
      }
      CFTypeID v133 = CFGetTypeID(a4);
      if (v133 != CFBooleanGetTypeID()) {
        goto LABEL_57;
      }
      int v134 = *MEMORY[0x1E4F1CFD0] == (void)a4;
      if (*(unsigned __int8 *)(DerivedStorage + 3176) == v134) {
        goto LABEL_50;
      }
      *(unsigned char *)(DerivedStorage + 3176) = v134;
      fpfsi_SetupAlternateSelectionBossWithPreferPlaybackFromCache((uint64_t)a1);
      goto LABEL_434;
    }
    if (CFEqual(a3, @"CoordinationIdentifier"))
    {
      if (a4)
      {
        CFTypeID v135 = CFGetTypeID(a4);
        if (v135 != CFStringGetTypeID()) {
          goto LABEL_57;
        }
      }
      if (FigCFEqual()) {
        goto LABEL_50;
      }
      fpfs_EnqueueNotification(v10, @"CoordinationIdentifierChanged", a1, 0);
      CFNumberRef v46 = *(CFNumberRef *)(DerivedStorage + 3192);
      *(void *)(DerivedStorage + 3192) = a4;
      if (!a4) {
        goto LABEL_121;
      }
      goto LABEL_120;
    }
    if (CFEqual(a3, @"ParticipatesInCoordinatedPlayback"))
    {
      if (a4)
      {
        CFTypeID v136 = CFGetTypeID(a4);
        if (v136 == CFBooleanGetTypeID())
        {
          uint64_t updated = 0;
          *(unsigned char *)(DerivedStorage + 3200) = *MEMORY[0x1E4F1CFD0] == (void)a4;
          goto LABEL_51;
        }
      }
      goto LABEL_57;
    }
    if (CFEqual(a3, @"TransientTimebaseForCoordinatedPlaybackSynchronization"))
    {
      if (a4)
      {
        CFTypeID v137 = CFGetTypeID(a4);
        if (v137 != CMTimebaseGetTypeID()) {
          goto LABEL_57;
        }
        CFTypeRef v138 = *(const void **)(DerivedStorage + 568);
        *(void *)(DerivedStorage + 568) = a4;
        CFRetain(a4);
      }
      else
      {
        CFTypeRef v138 = *(const void **)(DerivedStorage + 568);
        *(void *)(DerivedStorage + 568) = 0;
      }
      if (v138) {
        CFRelease(v138);
      }
      if (a4)
      {
        if (!dword_1E9350BB0) {
          goto LABEL_50;
        }
      }
      else if (!dword_1E9350BB0)
      {
        goto LABEL_50;
      }
      int v164 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      uint64_t v144 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v144, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      goto LABEL_50;
    }
    if (CFEqual(a3, @"currentInterstitialEvent"))
    {
      int v139 = *(const void **)(DerivedStorage + 3208);
      *(void *)(DerivedStorage + 3208) = a4;
      if (a4) {
        CFRetain(a4);
      }
      if (v139) {
        CFRelease(v139);
      }
      int v140 = (const void **)&kFigPlaybackItemNotification_CurrentInterstitialEventChanged;
    }
    else
    {
      if (!CFEqual(a3, @"interstitialEvents"))
      {
        if (!CFEqual(a3, @"InterstitialEventItemTimeOffset"))
        {
          if (CFEqual(a3, @"timeToSwapPlayback")) {
            goto LABEL_50;
          }
          if (CFEqual(a3, @"AutoSwitchAtmosVariants"))
          {
            if (a4)
            {
              CFTypeID v143 = CFGetTypeID(a4);
              if (v143 == CFBooleanGetTypeID())
              {
                uint64_t v30 = fpfsi_handleAutoSwitchAtmosVariantsChanged(a1, *MEMORY[0x1E4F1CFD0] == (void)a4);
                goto LABEL_58;
              }
            }
            goto LABEL_57;
          }
          if (CFEqual(a3, @"interstitialPlaybackSuccessCount"))
          {
            if (!a4) {
              goto LABEL_50;
            }
            CFTypeID v145 = CFGetTypeID(a4);
            if (v145 != CFNumberGetTypeID()) {
              goto LABEL_50;
            }
            LODWORD(time.value) = 0;
            CFNumberGetValue(a4, kCFNumberSInt32Type, &time);
            uint64_t v146 = *(void *)(DerivedStorage + 2544);
            uint64_t v147 = 0x1EE585B78;
          }
          else if (CFEqual(a3, @"interstitialPlaybackFailureCount"))
          {
            if (!a4) {
              goto LABEL_50;
            }
            CFTypeID v148 = CFGetTypeID(a4);
            if (v148 != CFNumberGetTypeID()) {
              goto LABEL_50;
            }
            LODWORD(time.value) = 0;
            CFNumberGetValue(a4, kCFNumberSInt32Type, &time);
            uint64_t v146 = *(void *)(DerivedStorage + 2544);
            uint64_t v147 = 0x1EE585B98;
          }
          else
          {
            if (!CFEqual(a3, @"interstitialPlaybackDeadTime"))
            {
              if (CFEqual(a3, @"RTCReportingCategory"))
              {
                if (a4)
                {
                  CFTypeID v150 = CFGetTypeID(a4);
                  if (v150 == CFStringGetTypeID())
                  {
                    uint64_t v151 = *(void *)(DerivedStorage + 2544);
                    if (v151) {
                      FigReportingAgentStatsSetCFTypeValue(v151, 0x1EE582B78, 0x1EE578EF8, (uint64_t)a4);
                    }
                  }
                }
                goto LABEL_50;
              }
              if (CFEqual(a3, @"ClientReportingValues"))
              {
                if (a4)
                {
                  CFTypeID v152 = CFGetTypeID(a4);
                  if (v152 == CFDictionaryGetTypeID()) {
                    FigReportingAgentSetStatsForAllKeys(*(void *)(DerivedStorage + 2544), 0x1EE582B78);
                  }
                }
                goto LABEL_50;
              }
              if (CFEqual(a3, @"SaveDownloadedDataToDiskWhenDone"))
              {
                uint64_t v30 = fpfsi_setSaveDownloadedDataToDiskWhenDone((uint64_t)a1, *MEMORY[0x1E4F1CFD0] == (void)a4);
                goto LABEL_58;
              }
              if (CFEqual(a3, @"SpeedRampData"))
              {
                if (!*(unsigned char *)(v11 + 912)) {
                  goto LABEL_50;
                }
                if (a4)
                {
                  CFTypeID v153 = CFGetTypeID(a4);
                  if (v153 != CFDataGetTypeID() || !FigSpeedRampDataIsValid(a4)) {
                    goto LABEL_57;
                  }
                  char v154 = *(const void **)(DerivedStorage + 3352);
                  if (v154)
                  {
                    CFRelease(v154);
                    *(void *)(DerivedStorage + 3352) = 0;
                  }
                  CFAllocatorRef v155 = (const __CFAllocator *)FigGetAllocatorForMedia();
                  *(void *)(DerivedStorage + 3352) = CFDataCreateCopy(v155, a4);
                }
                else
                {
                  uint64_t v158 = *(const void **)(DerivedStorage + 3352);
                  if (v158)
                  {
                    CFRelease(v158);
                    *(void *)(DerivedStorage + 3352) = 0;
                  }
                }
                fpfsi_updateSpeedRampDataOnAllRenderPipelines();
                goto LABEL_50;
              }
              if (!CFEqual(a3, @"OverlapRange"))
              {
                if (!CFEqual(a3, @"PriorImageQueueGauge"))
                {
                  uint64_t updated = 4294954512;
                  goto LABEL_51;
                }
                CMTime v159 = *(const void **)(DerivedStorage + 728);
                *(void *)(DerivedStorage + 728) = a4;
                if (a4) {
                  CFRetain(a4);
                }
                if (v159) {
                  CFRelease(v159);
                }
                fpfsi_updatePriorImageQueueGaugeOnVideoRenderPipelines(a1);
                goto LABEL_50;
              }
              if (a4)
              {
                CFTypeID v156 = CFGetTypeID(a4);
                if (v156 != CFDictionaryGetTypeID()) {
                  goto LABEL_57;
                }
                long long v157 = *(const void **)(DerivedStorage + 3360);
                *(void *)(DerivedStorage + 3360) = a4;
                CFRetain(a4);
                if (v157) {
                  CFRelease(v157);
                }
              }
              else
              {
                CMTime v160 = *(const void **)(DerivedStorage + 3360);
                if (v160)
                {
                  CFRelease(v160);
                  *(void *)(DerivedStorage + 3360) = 0;
                }
              }
              fpfsi_updateOverlapRangeOnAllRenderPipelines();
              goto LABEL_50;
            }
            if (!a4) {
              goto LABEL_50;
            }
            CFTypeID v149 = CFGetTypeID(a4);
            if (v149 != CFNumberGetTypeID()) {
              goto LABEL_50;
            }
            LODWORD(time.value) = 0;
            CFNumberGetValue(a4, kCFNumberSInt32Type, &time);
            uint64_t v146 = *(void *)(DerivedStorage + 2544);
            uint64_t v147 = 0x1EE585BB8;
          }
          FigReportingAgentStatsUpdateSampleValue(v146, 0x1EE582B78, v147, SLODWORD(time.value));
          goto LABEL_50;
        }
        CFNumberRef v46 = *(CFNumberRef *)(DerivedStorage + 3224);
        *(void *)(DerivedStorage + 3224) = a4;
        if (!a4) {
          goto LABEL_121;
        }
LABEL_120:
        CFRetain(a4);
        goto LABEL_121;
      }
      if (a4)
      {
        CFTypeID v141 = CFGetTypeID(a4);
        if (v141 != CFArrayGetTypeID()) {
          goto LABEL_57;
        }
        CFTypeRef v142 = *(const void **)(DerivedStorage + 3216);
        *(void *)(DerivedStorage + 3216) = a4;
        CFRetain(a4);
      }
      else
      {
        CFTypeRef v142 = *(const void **)(DerivedStorage + 3216);
        *(void *)(DerivedStorage + 3216) = 0;
      }
      if (v142) {
        CFRelease(v142);
      }
      int v140 = (const void **)&kFigPlaybackItemNotification_InterstitialEventsChanged;
    }
    fpfs_EnqueueNotification(v10, *v140, a1, 0);
    goto LABEL_50;
  }
  uint64_t v55 = *(void *)(DerivedStorage + 816);
  if (a4)
  {
    CFTypeID v56 = CFGetTypeID(a4);
    if (v56 == CFArrayGetTypeID())
    {
      CFNumberType v57 = *(const void **)(DerivedStorage + 1824);
      if (v57)
      {
        CFRelease(v57);
        *(void *)(DerivedStorage + 1824) = 0;
      }
      uint64_t updated = 0;
      *(void *)(DerivedStorage + 1824) = CFRetain(a4);
    }
    else
    {
      uint64_t updated = FigSignalErrorAt();
    }
  }
  else
  {
    CFTypeRef v60 = *(const void **)(DerivedStorage + 1824);
    if (v60)
    {
      CFRelease(v60);
      uint64_t updated = 0;
      *(void *)(DerivedStorage + 1824) = 0;
    }
    else
    {
      uint64_t updated = 0;
    }
  }
  if (!updated && v55)
  {
    uint64_t v71 = *(void *)(DerivedStorage + 1048);
    if (!v71) {
      goto LABEL_539;
    }
    uint64_t updated = 0;
    uint64_t v72 = 0;
    do
    {
      if (*(_DWORD *)(v71 + 32) == 1935832172)
      {
        uint64_t v73 = *(void *)(v71 + 96);
        if (v73 && v73 != v72)
        {
          if (*(unsigned char *)(v11 + 460)) {
            uint64_t v75 = 0x1EE54F798;
          }
          else {
            uint64_t v75 = 0x1EE5743F8;
          }
          uint64_t updated = fpfs_setPropertyOnPrimaryAndAuxRenderPipelines(*(void *)(v71 + 96), v75, *(void *)(DerivedStorage + 1824));
          uint64_t v72 = v73;
        }
      }
      uint64_t v71 = *(void *)(v71 + 8);
    }
    while (v71);
    if (v55 != v72)
    {
LABEL_539:
      if (*(unsigned char *)(v11 + 460)) {
        uint64_t v76 = &kFigSubtitleRenderPipelineProperty_TextHighlightArray;
      }
      else {
        uint64_t v76 = &kFigCaptionRenderPipelineProperty_TextHighlightArray;
      }
      uint64_t updated = fpfs_setPropertyOnPrimaryAndAuxRenderPipelines(v55, *v76, *(void *)(DerivedStorage + 1824));
    }
  }
  uint64_t v67 = *(void *)(DerivedStorage + 912);
  if (v67)
  {
    uint64_t v68 = @"TextHighlightArray";
    uint64_t v69 = *(const void **)(DerivedStorage + 1824);
    goto LABEL_207;
  }
LABEL_51:
  fpfs_UnlockAndPostNotificationsWithCaller(v10);
  return updated;
}

uint64_t fpfsi_applyForwardEndTime()
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = *(void *)(result + 1048);
  if (v1)
  {
    uint64_t v2 = result;
    do
    {
      uint64_t result = fpfs_scheduleForwardEndTimeForTrack(v2, v1, 0);
      uint64_t v1 = *(void *)(v1 + 8);
    }
    while (v1);
  }
  return result;
}

uint64_t fpfsi_setEQPreset(uint64_t a1, int a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_DWORD *)(DerivedStorage + 876) = a2;
  uint64_t v5 = *(void *)DerivedStorage;

  return fpfs_applyEQPreset(v5, a1, 0);
}

uint64_t fpfsi_setPropertyOnAllAudioRenderPipelines(uint64_t a1, uint64_t *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = DerivedStorage;
  if (DerivedStorage)
  {
    uint64_t v5 = *(void *)(DerivedStorage + 800);
    if (v5) {
      fpfs_setPropertyOnPrimaryAndAuxRenderPipelines(*(void *)(DerivedStorage + 800), *a2, a2[1]);
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  for (uint64_t i = *(void *)(v4 + 1048); i; uint64_t i = *(void *)(i + 8))
  {
    if (*(_DWORD *)(i + 32) == 1936684398)
    {
      uint64_t v7 = *(void *)(i + 96);
      if (v7) {
        BOOL v8 = v7 == v5;
      }
      else {
        BOOL v8 = 1;
      }
      if (!v8) {
        fpfs_setPropertyOnPrimaryAndAuxRenderPipelines(v7, *a2, a2[1]);
      }
    }
  }
  return 0;
}

uint64_t fpfsi_setVideoEnhancementModeOnImageQueues(uint64_t a1, uint64_t a2)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  for (uint64_t i = *(void *)(result + 1048); i; uint64_t i = *(void *)(i + 8))
  {
    if (*(_DWORD *)(i + 32) == 1986618469)
    {
      uint64_t v5 = *(void *)(i + 96);
      if (v5)
      {
        uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(*(void *)(v5 + 32));
        uint64_t VTable = CMBaseObjectGetVTable();
        uint64_t v9 = *(void *)(VTable + 8);
        uint64_t result = VTable + 8;
        uint64_t v8 = v9;
        if (v9) {
          uint64_t v10 = v8;
        }
        else {
          uint64_t v10 = 0;
        }
        uint64_t v11 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v10 + 56);
        if (v11) {
          uint64_t result = v11(FigBaseObject, @"VideoEnhancementMode", a2);
        }
      }
    }
  }
  return result;
}

uint64_t fpfsi_SeekToDateWithID(const void *a1, const void *a2, uint64_t a3)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  unsigned int v32 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v7 = *(const void **)DerivedStorage;
  CMBaseObjectGetDerivedStorage();
  CMTimeValue v29 = 0;
  uint64_t v30 = 0;
  CMTimeEpoch v31 = 0;
  uint64_t v8 = MEMORY[0x1E4F1F9F8];
  CMTimeValue value = *MEMORY[0x1E4F1F9F8];
  CMTimeScale timescale = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 8);
  char v28 = 0;
  BOOL v22 = a3 != 0;
  fpfs_LockMutexWithCaller((uint64_t)v7);
  if (!a2 || (CFTypeID v9 = CFGetTypeID(a2), v9 != CFDateGetTypeID()) || FigRetainProxyIsInvalidated())
  {
    uint64_t v17 = FigSignalErrorAt();
LABEL_36:
    fpfs_UnlockAndPostNotificationsWithCaller(v7);
    return v17;
  }
  if (dword_1E9350BB0)
  {
    LODWORD(lhs.value) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CMTimeEpoch epoch = *(void *)(v8 + 16);
  uint64_t v12 = *(const void **)(DerivedStorage + 1600);
  if (v12)
  {
    CFTypeRef v13 = CFRetain(v12);
    uint64_t v14 = *(const void **)(DerivedStorage + 1600);
    uint64_t v15 = DerivedStorage + 1496;
    long long v34 = *(_OWORD *)(DerivedStorage + 1496);
    uint64_t v35 = *(void *)(DerivedStorage + 1512);
    if (v14)
    {
      CFRelease(v14);
      *(void *)(DerivedStorage + 1600) = 0;
    }
  }
  else
  {
    CFTypeRef v13 = 0;
    uint64_t v15 = DerivedStorage + 1496;
    uint64_t v35 = *(void *)(DerivedStorage + 1512);
    long long v34 = *(_OWORD *)(DerivedStorage + 1496);
  }
  *(_OWORD *)uint64_t v15 = *(_OWORD *)v8;
  *(void *)(v15 + 16) = epoch;
  if (*(void *)(DerivedStorage + 936))
  {
    BOOL v16 = fpsi_TryDateSeekWithSeekID((uint64_t)a1, (uint64_t)a2, (int *)&v32, (uint64_t)&v29, a3, a3 != 0, (uint64_t)&v28);
    uint64_t v17 = v32;
    if (v32) {
      goto LABEL_35;
    }
  }
  else
  {
    BOOL v16 = 0;
  }
  CMTimeFlags flags = *(_DWORD *)(v8 + 12);
  if (!*(void *)(DerivedStorage + 936) || v16)
  {
    if (v16 && v28)
    {
LABEL_24:
      if (flags)
      {
        uint64_t v20 = MEMORY[0x1E4F1FA48];
        *(_OWORD *)(DerivedStorage + 224) = *MEMORY[0x1E4F1FA48];
        *(void *)(DerivedStorage + 240) = *(void *)(v20 + 16);
        fpfs_GetTime(DerivedStorage, (uint64_t)&time2);
        time1.CMTimeValue value = value;
        time1.CMTimeScale timescale = timescale;
        time1.CMTimeFlags flags = flags;
        time1.CMTimeEpoch epoch = epoch;
        if (!CMTimeCompare(&time1, &time2))
        {
          CMTimeMake(&rhs, 1, 90000);
          lhs.CMTimeValue value = value;
          lhs.CMTimeScale timescale = timescale;
          lhs.CMTimeFlags flags = flags;
          lhs.CMTimeEpoch epoch = epoch;
          CMTimeAdd(&time1, &lhs, &rhs);
          CMTimeValue value = time1.value;
          CMTimeFlags flags = time1.flags;
          CMTimeScale timescale = time1.timescale;
          CMTimeEpoch epoch = time1.epoch;
        }
      }
      goto LABEL_27;
    }
LABEL_20:
    int v19 = *(_DWORD *)(DerivedStorage + 2204);
    if (v19 && v19 != a3) {
      fpfs_SeekDidFail(v7, a1, v19, 0);
    }
    *(void *)(DerivedStorage + 1600) = CFRetain(a2);
    *(_DWORD *)(DerivedStorage + 2204) = a3;
    *(_DWORD *)(DerivedStorage + 2224) = v22;
    goto LABEL_24;
  }
  if ((v30 & 0x100000000) != 0)
  {
    CMTimeValue value = v29;
    CMTimeScale timescale = v30;
    CMTimeEpoch epoch = v31;
    CMTimeFlags flags = HIDWORD(v30);
    goto LABEL_20;
  }
  uint64_t v17 = FigSignalErrorAt();
  if (v17)
  {
LABEL_35:
    *(void *)(DerivedStorage + 1600) = v13;
    *(_OWORD *)uint64_t v15 = v34;
    *(void *)(v15 + 16) = v35;
    goto LABEL_36;
  }
LABEL_27:
  if (flags)
  {
    time1.CMTimeValue value = value;
    time1.CMTimeScale timescale = timescale;
    time1.CMTimeFlags flags = flags;
    time1.CMTimeEpoch epoch = epoch;
    CMTime lhs = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA08];
    *(_OWORD *)os_log_type_t type = *MEMORY[0x1E4F1FA10];
    uint64_t v24 = *(void *)(MEMORY[0x1E4F1FA10] + 16);
    uint64_t v17 = fpfsi_SetCurrentTimeWithRangeAndSeekIDGuts((const __CFArray *)a1, &time1, 0, (uint64_t)&lhs, (long long *)type, a3, 0, v22, 0, 0, 1, 1, 0, 1);
  }
  else
  {
    uint64_t v17 = 0;
  }
  fpfs_UnlockAndPostNotificationsWithCaller(v7);
  if (v13) {
    CFRelease(v13);
  }
  return v17;
}

uint64_t fpfs_SetClientMediaArray(const __CFString *a1, const __CFArray *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  CFArrayRef Mutable = *(const __CFArray **)(DerivedStorage + 1784);
  if (Mutable
    || (CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia(),
        CFArrayRef Mutable = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D510]),
        (*(void *)(DerivedStorage + 1784) = Mutable) != 0))
  {
    uint64_t v7 = FigAutomaticMediaSelectionCoalesceSelectedMediaArrays(Mutable, a2, 1);
    if (v7) {
      return v7;
    }
    uint64_t v8 = fpfs_CreateAppliedMediaArray(DerivedStorage, &cf);
    CFTypeRef v9 = cf;
    if (!v8 && cf)
    {
      uint64_t v8 = fpfs_ApplyMediaArray(a1, (const __CFArray *)cf);
      CFTypeRef v9 = cf;
    }
    if (v9) {
      CFRelease(v9);
    }
    return v8;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t fpfsi_UpdateHighWaterSecs(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v5 = *(_DWORD *)(a1 + 752);
  int v6 = *(_DWORD *)(DerivedStorage + 2244);
  if (v5 >= v6) {
    int v7 = *(_DWORD *)(DerivedStorage + 2244);
  }
  else {
    int v7 = *(_DWORD *)(a1 + 752);
  }
  if (!v6)
  {
    int v6 = 50;
    int v7 = *(_DWORD *)(a1 + 752);
  }
  if (v5) {
    int v8 = v7;
  }
  else {
    int v8 = v6;
  }
  if (v8 <= 5) {
    uint64_t v9 = 5;
  }
  else {
    uint64_t v9 = v8;
  }
  *(_DWORD *)(DerivedStorage + 2240) = v9;
  if (v9 >= 0x32) {
    int v10 = 50;
  }
  else {
    int v10 = v9;
  }
  *(_DWORD *)(DerivedStorage + 2248) = v10;
  uint64_t v11 = *(void *)(DerivedStorage + 2544);
  if (v11)
  {
    uint64_t v12 = DerivedStorage;
    uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v13) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v14 + 56);
    if (v15) {
      v15(v11, 0x1EE582B78, 0x1EE585238, v9, 0);
    }
    uint64_t v16 = *(void *)(v12 + 2544);
    if (v16)
    {
      uint64_t v17 = *(int *)(v12 + 2248);
      uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v18) {
        uint64_t v19 = v18;
      }
      else {
        uint64_t v19 = 0;
      }
      uint64_t v20 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v19 + 56);
      if (v20) {
        v20(v16, 0x1EE582B78, 0x1EE585258, v17, 0);
      }
      uint64_t v21 = *(void *)(v12 + 2544);
      if (v21)
      {
        uint64_t v22 = *(int *)(a1 + 752);
        uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v23) {
          uint64_t v24 = v23;
        }
        else {
          uint64_t v24 = 0;
        }
        CFTypeID v25 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v24 + 56);
        if (v25) {
          v25(v21, 0x1EE582B78, 0x1EE585278, v22, 0);
        }
        uint64_t v26 = *(void *)(v12 + 2544);
        if (v26)
        {
          uint64_t v27 = *(int *)(v12 + 2244);
          uint64_t v28 = *(void *)(CMBaseObjectGetVTable() + 16);
          uint64_t v29 = v28 ? v28 : 0;
          uint64_t v30 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v29 + 56);
          if (v30) {
            v30(v26, 0x1EE582B78, 0x1EE585298, v27, 0);
          }
        }
      }
    }
  }
  if (*(void *)(a1 + 80) == a2) {
    fpfs_CheckPrebufferedLevels(a2, 1, -1, 0, (uint64_t)v32);
  }
  return 0;
}

uint64_t fpfsi_UpdateCacheBehindSecs(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  int v5 = *(_DWORD *)(a1 + 756);
  int v6 = DerivedStorage[572];
  if (v5 < 0)
  {
    if (v6 < 0) {
      int v6 = DerivedStorage[571];
    }
  }
  else if (v6 < 0)
  {
    int v6 = *(_DWORD *)(a1 + 756);
  }
  else
  {
    int v6 = DerivedStorage[570];
    if (v5 < v6) {
      int v6 = *(_DWORD *)(a1 + 756);
    }
  }
  DerivedStorage[570] = v6;
  fpfsi_TrimCachedSamplesFromItem(a2);
  return 0;
}

void fpfsi_setLegibleOutputsDictionary(const __CFArray *a1, const __CFDictionary *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)(DerivedStorage + 1864))
  {
    uint64_t v5 = DerivedStorage;
    if (a2 && !CFDictionaryGetCount(a2)) {
      a2 = 0;
    }
    if (!FigCFEqual())
    {
      int v6 = *(const void **)(v5 + 1872);
      *(void *)(v5 + 1872) = a2;
      if (a2) {
        CFRetain(a2);
      }
      if (v6) {
        CFRelease(v6);
      }
      FigLegibleOutputManagerSetLegibleOutputsDict(*(dispatch_queue_t **)(v5 + 1864), *(CFTypeRef *)(v5 + 1872));
      if (*(const __CFArray **)(CMBaseObjectGetDerivedStorage() + 80) == a1)
      {
        int v7 = *(const void **)v5;
        fpfs_stopResetDisturbReprepareAndResume(v7, a1, 0);
      }
    }
  }
}

uint64_t fpfsi_setMetadataOutputsDictionary(const __CFArray *a1, const __CFDictionary *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFDictionaryRef Tag = (const __CFDictionary *)FigXMLNodeGetTag(*(void *)(DerivedStorage + 1880));
  if (!Tag)
  {
    CFIndex Count = 0;
    if (a2) {
      goto LABEL_3;
    }
LABEL_5:
    CFIndex v7 = 0;
    goto LABEL_6;
  }
  CFIndex Count = CFDictionaryGetCount(Tag);
  if (!a2) {
    goto LABEL_5;
  }
LABEL_3:
  CFIndex v7 = CFDictionaryGetCount(a2);
LABEL_6:
  uint64_t updated = FPSupport_UpdateMetadataOutputs(*(void **)(DerivedStorage + 1880), a2);
  if (!updated && *(const __CFArray **)(CMBaseObjectGetDerivedStorage() + 80) == a1 && (Count != v7 || v7 >= 1)) {
    fpfs_stopResetDisturbReprepareAndResume(*(const void **)DerivedStorage, a1, 0);
  }
  return updated;
}

uint64_t fpfsi_setVisualContextArray(const __CFArray *a1, const __CFArray *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2 || !CFArrayGetCount(a2)) {
    a2 = 0;
  }
  uint64_t result = FigCFEqual();
  if (!result)
  {
    v9[2] = 0;
    v9[0] = FigVisualContextGetTypeID();
    if (a2) {
      CFIndex Count = CFArrayGetCount(a2);
    }
    else {
      CFIndex Count = 0;
    }
    CFArrayRef v7 = *(const __CFArray **)(DerivedStorage + 864);
    if (v7)
    {
      CFArrayRef v7 = (const __CFArray *)CFArrayGetCount(v7);
      int v8 = *(const void **)(DerivedStorage + 864);
    }
    else
    {
      int v8 = 0;
    }
    v9[1] = Count - (void)v7;
    *(void *)(DerivedStorage + 864) = a2;
    if (a2) {
      CFRetain(a2);
    }
    if (v8) {
      CFRelease(v8);
    }
    return fpfsi_handleVideoOutputsChanged(a1, v9);
  }
  return result;
}

void fpfsi_setSuppressVideoLayers(const __CFArray *a1, int a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned __int8 *)(DerivedStorage + 874) == a2) {
    return;
  }
  *(unsigned char *)(DerivedStorage + 874) = a2;
  if (!a2)
  {
    uint64_t RenderingTrackofType = fpfs_FirstRenderingTrackofType((uint64_t)a1, 1986618469);
    if (!RenderingTrackofType) {
      return;
    }
    int v6 = *(const opaqueCMFormatDescription **)(RenderingTrackofType + 40);
    uint64_t v7 = CMBaseObjectGetDerivedStorage();
    uint64_t v8 = CMBaseObjectGetDerivedStorage();
    CFArrayRef v9 = *(const __CFArray **)(v8 + 384);
    if (v9) {
      uint64_t Count = CFArrayGetCount(v9);
    }
    else {
      uint64_t Count = 0;
    }
    CMVideoDimensions Dimensions = CMVideoFormatDescriptionGetDimensions(v6);
    CFTypeRef v12 = fpfsi_copyCurrentVideoDestination((uint64_t)a1);
    if (!*(unsigned char *)(v8 + 462))
    {
      if (Count >= 1)
      {
        CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
        CFMutableArrayRef Mutable = CFArrayCreateMutable(AllocatorForMedia, Count, MEMORY[0x1E4F1D510]);
        if (!Mutable) {
          goto LABEL_30;
        }
        uint64_t v15 = Mutable;
        CFArrayRef v16 = *(const __CFArray **)(v7 + 656);
        if (v16) {
          CFIndex v17 = CFArrayGetCount(v16);
        }
        else {
          CFIndex v17 = 0;
        }
        for (CFIndex i = 0; i != Count; ++i)
        {
          CMTimeValue value = 0;
          if (i >= v17
            || (CMTimeValue value = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v7 + 656), i),
                CFRetain(value),
                (uint64_t v19 = value) == 0))
          {
            FPSupport_EnsureCAImageQueue((CFTypeRef *)&value, 0, Dimensions.width, Dimensions.height);
            uint64_t v19 = value;
          }
          CFArrayAppendValue(v15, v19);
          CFRelease(value);
        }
        if (!v17) {
          *(unsigned char *)(v7 + 3024) = 1;
        }
        uint64_t v20 = *(const void **)(v7 + 656);
        *(void *)(v7 + 656) = v15;
        CFRetain(v15);
        if (v20) {
          CFRelease(v20);
        }
        CFRelease(v15);
      }
      uint64_t v21 = *(void *)(v7 + 720);
      if (!v21 || !FigImageQueueTableWasFirstImageEnqueued(v21))
      {
        if (!v12) {
          return;
        }
        uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v23 = v22 ? v22 : 0;
        uint64_t v24 = *(unsigned int (**)(CFTypeRef))(v23 + 64);
        if (!v24 || !v24(v12)) {
          goto LABEL_38;
        }
      }
      fpfsi_assignCAImageQueuesToLayers(a1);
    }
LABEL_30:
    if (!v12) {
      return;
    }
LABEL_38:
    CFRelease(v12);
    return;
  }

  fpfs_cleanupAllImageQueues(a1, 0);
}

uint64_t fpfsi_UpdateBandwidthCap(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v5 = *(_DWORD *)(a1 + 748);
  int v6 = *(_DWORD *)(DerivedStorage + 2388);
  if (v5 >= v6) {
    int v7 = *(_DWORD *)(DerivedStorage + 2388);
  }
  else {
    int v7 = *(_DWORD *)(a1 + 748);
  }
  if (!v6) {
    int v7 = *(_DWORD *)(a1 + 748);
  }
  if (v5) {
    int v8 = v7;
  }
  else {
    int v8 = *(_DWORD *)(DerivedStorage + 2388);
  }

  return fpfsi_ConfigurePlaybackMonitorForBandwidthCap(a2, v8);
}

uint64_t fpfsi_SetCurrentTime(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(_OWORD *)a2;
  uint64_t v5 = *(void *)(a2 + 16);
  return fpfsi_SetCurrentTimeWithSeekID(a1, &v4, a3, 1);
}

uint64_t fpfsi_handleVariantPreferencesChanged(const void *a1)
{
  if (!*(void *)(CMBaseObjectGetDerivedStorage() + 40)) {
    return 0;
  }
  uint64_t result = fpfsi_CreateAndAddCombinedAudioPreferenceFilter((uint64_t)a1);
  if (!result)
  {
    return fpfsi_ApplyFiltersAndSwitchVariantIfNecessary(a1, 0);
  }
  return result;
}

uint64_t fpfsi_handleSuppressedAudioOnlyVariantsChanged(const void *a1)
{
  if (!*(void *)(CMBaseObjectGetDerivedStorage() + 40)) {
    return 0;
  }
  uint64_t result = fpfsi_ConfigureAlternateSelectionBossForSuppressAudioOnly();
  if (!result)
  {
    return fpfsi_ApplyFiltersAndSwitchVariantIfNecessary(a1, 1);
  }
  return result;
}

uint64_t fpfsi_setAudioSpatializationAllowed(const __CFString *a1, int a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (*(unsigned __int8 *)(result + 893) != a2)
  {
    char v7 = 0;
    *(unsigned char *)(result + 893) = a2;
    uint64_t result = fpfsi_handleAvailableAudioFormatChange(a1, 0, &v7);
    if (v7) {
      BOOL v5 = dword_1E9350BB0 == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      return fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  return result;
}

uint64_t fpfsi_setStereoAudioSpatializationAllowed(const __CFString *a1, int a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t result = CMBaseObjectGetDerivedStorage();
  *(unsigned char *)(result + 895) = 1;
  if (*(unsigned __int8 *)(result + 894) != a2)
  {
    char v7 = 0;
    *(unsigned char *)(result + 894) = a2;
    uint64_t result = fpfsi_handleAvailableAudioFormatChange(a1, 0, &v7);
    if (v7) {
      BOOL v5 = dword_1E9350BB0 == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      return fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  return result;
}

void fpfsi_setAudioProcessingTap(const __CFArray *a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  BOOL v5 = *(const void **)(DerivedStorage + 3112);
  if (v5 != a2)
  {
    int v6 = (const void **)DerivedStorage;
    *(void *)(DerivedStorage + 3112) = a2;
    if (a2) {
      CFRetain(a2);
    }
    if (v5) {
      CFRelease(v5);
    }
    char v7 = *v6;
    fpfs_stopResetDisturbReprepareAndResume(v7, a1, 0);
  }
}

void fpfsi_setAudioProcessingUnits(const __CFArray *a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (FPSupport_AudioProcessingUnitsConfigurationsAreDifferent())
  {
    BOOL v5 = *(const void **)(DerivedStorage + 3120);
    *(void *)(DerivedStorage + 3120) = a2;
    if (a2) {
      CFRetain(a2);
    }
    if (v5) {
      CFRelease(v5);
    }
    int v6 = *(const void **)DerivedStorage;
    fpfs_stopResetDisturbReprepareAndResume(v6, a1, 0);
  }
}

void fpfsi_updateVideoSlotUsage(uint64_t a1, const __CFArray *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)(DerivedStorage + 664)) {
    BOOL v4 = a2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    uint64_t v5 = DerivedStorage;
    CFIndex Count = CFArrayGetCount(a2);
    if (Count >= 1)
    {
      CFIndex v7 = Count;
      for (CFIndex i = 0; v7 != i; ++i)
      {
        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a2, i);
        if (!ValueAtIndex) {
          continue;
        }
        CFDictionaryRef v10 = ValueAtIndex;
        CFTypeID v11 = CFGetTypeID(ValueAtIndex);
        if (v11 != CFDictionaryGetTypeID()) {
          continue;
        }
        CFNumberRef Value = CFDictionaryGetValue(v10, @"SlotNumber");
        uint64_t v13 = CFDictionaryGetValue(v10, @"UsedForScrubbingOnly");
        if (!Value) {
          continue;
        }
        uint64_t v14 = v13;
        if (!v13) {
          continue;
        }
        CFArrayRef v15 = *(const __CFArray **)(v5 + 664);
        v32.length = CFArrayGetCount(v15);
        v32.location = 0;
        FirstIndexOfCFNumberRef Value = CFArrayGetFirstIndexOfValue(v15, v32, Value);
        if (FirstIndexOfValue == -1) {
          continue;
        }
        CFIndex v17 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v5 + 656), FirstIndexOfValue);
        CFTypeRef cf = 0;
        uint64_t v18 = CMBaseObjectGetDerivedStorage();
        CFTypeRef v19 = fpfsi_copyCurrentVideoDestination(a1);
        if (v19)
        {
          uint64_t v20 = v19;
          uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v21) {
            uint64_t v22 = v21;
          }
          else {
            uint64_t v22 = 0;
          }
          CFTypeID v25 = *(void (**)(const void *, const void *, CFTypeRef *))(v22 + 48);
          if (v25) {
            v25(v20, v17, &cf);
          }
          CFRelease(v20);
        }
        else
        {
          uint64_t v23 = *(void *)(v18 + 720);
          if (v23)
          {
            uint64_t v24 = FigImageQueueTableCopyFigImageQueueForVisualContext(v23, v17);
            CFTypeRef cf = v24;
            if (v24) {
              goto LABEL_23;
            }
            continue;
          }
        }
        uint64_t v24 = cf;
        if (cf)
        {
LABEL_23:
          uint64_t FigBaseObject = FigImageQueueGetFigBaseObject(v24);
          uint64_t v27 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v27) {
            uint64_t v28 = v27;
          }
          else {
            uint64_t v28 = 0;
          }
          uint64_t v29 = *(void (**)(uint64_t, __CFString *, const void *))(v28 + 56);
          if (v29) {
            v29(FigBaseObject, @"ForScrubbingOnly", v14);
          }
          CFRelease(cf);
        }
      }
    }
  }
}

uint64_t fpfsi_setPreferSDRVideo(uint64_t a1, int a2)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (*(unsigned __int8 *)(result + 896) != a2)
  {
    *(unsigned char *)(result + 896) = a2;
    uint64_t result = fpfsi_SwitchBetweenHDRAndSDR(a1, a2);
    if (dword_1E9350BB0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      return fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  return result;
}

uint64_t fpfsi_handleAutoSwitchAtmosVariantsChanged(const void *a1, int a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned __int8 *)(DerivedStorage + 564) == a2) {
    return 0;
  }
  *(unsigned char *)(DerivedStorage + 564) = a2;
  if (!*(void *)(DerivedStorage + 40)) {
    return 0;
  }
  uint64_t result = fpfsi_ConfigureAlternateSelectionBossForHighestAtmosFiltering();
  if (!result)
  {
    return fpfsi_ApplyFiltersAndSwitchVariantIfNecessary(a1, 0);
  }
  return result;
}

uint64_t fpfsi_setSaveDownloadedDataToDiskWhenDone(uint64_t a1, int a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned __int8 *)(DerivedStorage + 3177) == a2) {
    return 0;
  }
  *(unsigned char *)(DerivedStorage + 3177) = a2;
  uint64_t result = *(void *)(DerivedStorage + 936);
  if (result)
  {
    if (a2) {
      uint64_t v5 = (uint64_t *)MEMORY[0x1E4F1CFD0];
    }
    else {
      uint64_t v5 = (uint64_t *)MEMORY[0x1E4F1CFC8];
    }
    FigBytePumpGetFigBaseObject(result);
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    CFDictionaryRef v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 56);
    if (v10)
    {
      uint64_t v11 = *v5;
      return v10(v7, 0x1EE53E518, v11);
    }
    else
    {
      return 4294954514;
    }
  }
  return result;
}

uint64_t fpfsi_updateSpeedRampDataOnAllRenderPipelines()
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = *(void *)(result + 1048);
  if (v1)
  {
    uint64_t v2 = result;
    do
    {
      uint64_t result = *(void *)(v1 + 96);
      if (result) {
        uint64_t result = fpfs_setPropertyOnPrimaryAndAuxRenderPipelines(result, 0x1EE54A2F8, *(void *)(v2 + 3352));
      }
      uint64_t v1 = *(void *)(v1 + 8);
    }
    while (v1);
  }
  return result;
}

uint64_t fpfsi_updateOverlapRangeOnAllRenderPipelines()
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = *(void *)(result + 1048);
  if (v1)
  {
    uint64_t v2 = result;
    do
    {
      uint64_t result = *(void *)(v1 + 96);
      if (result) {
        uint64_t result = fpfs_setPropertyOnPrimaryAndAuxRenderPipelines(result, @"OverlapRange", *(void *)(v2 + 3360));
      }
      uint64_t v1 = *(void *)(v1 + 8);
    }
    while (v1);
  }
  return result;
}

void fpfsi_updatePriorImageQueueGaugeOnVideoRenderPipelines(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v3 = fpfsi_copyPreviousImageQueueGauge(a1);
  for (uint64_t i = *(void *)(DerivedStorage + 1048); i; uint64_t i = *(void *)(i + 8))
  {
    if (*(_DWORD *)(i + 32) == 1986618469)
    {
      uint64_t v5 = *(void *)(i + 96);
      if (v5)
      {
        if (!*(unsigned char *)(i + 184)) {
          fpfs_setPropertyOnPrimaryAndAuxRenderPipelines(v5, @"PriorImageQueueGauge", (uint64_t)v3);
        }
      }
    }
  }
  if (v3)
  {
    CFRelease(v3);
  }
}

uint64_t fpfsi_handleVideoOutputsChanged(const __CFArray *a1, uint64_t *a2)
{
  uint64_t v93 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = *(const void **)DerivedStorage;
  uint64_t v6 = CMBaseObjectGetDerivedStorage();
  BOOL CanRenderVideo = fpfs_CanRenderVideo(v6, (uint64_t)a1);
  uint64_t v84 = 0;
  CFArrayRef v8 = *(const __CFArray **)(v6 + 432);
  uint64_t v77 = v6;
  __int16 v78 = v5;
  if (v8) {
    int Count = CFArrayGetCount(v8);
  }
  else {
    int Count = 0;
  }
  fpfsi_RTCReportingUpdateFVTCount(DerivedStorage, Count);
  uint64_t v10 = *a2;
  if (v10 != CAImageQueueGetTypeID()) {
    goto LABEL_39;
  }
  int v11 = *((unsigned __int8 *)a2 + 16);
  uint64_t v12 = CMBaseObjectGetDerivedStorage();
  uint64_t v13 = (void *)CMBaseObjectGetDerivedStorage();
  CFArrayRef v14 = (const __CFArray *)v13[47];
  CFIndex v15 = v14 ? CFArrayGetCount(v14) : 0;
  uint64_t v16 = v13[50];
  CFArrayRef v17 = *(const __CFArray **)(v12 + 664);
  CFIndex v18 = v17 ? CFArrayGetCount(v17) : 0;
  CFIndex v19 = v16 + v15;
  CFArrayRef v20 = *(const __CFArray **)(v12 + 656);
  CFIndex v21 = v20 ? CFArrayGetCount(v20) : 0;
  if (v21 <= v19 || v11 && v18 <= v13[50]) {
    goto LABEL_39;
  }
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFMutableArrayRef Mutable = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D510]);
  if (!Mutable)
  {
    uint64_t v37 = FigSignalErrorAt();
    goto LABEL_38;
  }
  CFMutableArrayRef v24 = Mutable;
  uint64_t v83 = a2;
  CFAllocatorRef v25 = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFMutableArrayRef v26 = CFArrayCreateMutable(v25, 0, MEMORY[0x1E4F1D510]);
  if (!v26)
  {
    uint64_t v37 = FigSignalErrorAt();
    CFRelease(v24);
    goto LABEL_38;
  }
  uint64_t v27 = v26;
  do
  {
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v12 + 656), --v21);
    CFArrayAppendValue(v24, ValueAtIndex);
    CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v12 + 656), v21);
  }
  while (v21 > v19);
  if (v11)
  {
    while (v18 > v19)
    {
      CMTimeEpoch v31 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v12 + 664), --v18);
      CFArrayAppendValue(v27, v31);
      CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v12 + 664), v18);
    }
    CFAllocatorRef v32 = (const __CFAllocator *)FigGetAllocatorForMedia();
    CFArrayRef Copy = CFArrayCreateCopy(v32, *(CFArrayRef *)(v12 + 664));
    FigPropertyStorageSetValue(*(void *)(v12 + 168), @"VideoSlotArray", Copy);
    if (Copy) {
      CFRelease(Copy);
    }
    ConcatenationOfTwoArrays = (const void *)FigCFArrayCreateConcatenationOfTwoArrays();
    if (!ConcatenationOfTwoArrays)
    {
      uint64_t v37 = FigSignalErrorAt();
      uint64_t v29 = 0;
      goto LABEL_34;
    }
    long long v34 = (const void *)FigCFArrayCreateConcatenationOfTwoArrays();
    uint64_t v29 = v34;
    if (!v34)
    {
      uint64_t v37 = FigSignalErrorAt();
      goto LABEL_34;
    }
    uint64_t v35 = (const void *)v13[52];
    v13[52] = v34;
    CFRetain(v34);
    if (v35) {
      CFRelease(v35);
    }
    uint64_t v36 = (const void *)v13[53];
    v13[53] = ConcatenationOfTwoArrays;
    CFRetain(ConcatenationOfTwoArrays);
    if (v36) {
      CFRelease(v36);
    }
  }
  else
  {
    uint64_t v29 = 0;
    ConcatenationOfTwoArrays = 0;
  }
  uint64_t v37 = 0;
LABEL_34:
  CFRelease(v24);
  CFRelease(v27);
  if (ConcatenationOfTwoArrays) {
    CFRelease(ConcatenationOfTwoArrays);
  }
  a2 = v83;
  if (v29) {
    CFRelease(v29);
  }
LABEL_38:
  if (v37) {
    goto LABEL_117;
  }
LABEL_39:
  if (!CanRenderVideo)
  {
    long long v80 = *MEMORY[0x1E4F1F9F8];
    *(_OWORD *)&v90.CFArrayRef value = *MEMORY[0x1E4F1F9F8];
    CMTimeEpoch v79 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
    v90.CMTimeEpoch epoch = v79;
    if (a1)
    {
      uint64_t v42 = CMBaseObjectGetDerivedStorage();
      fpfs_GetTime(v42, (uint64_t)&v90);
      if (dword_1E9350BB0)
      {
        LODWORD(v88.value) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      *(void *)os_log_type_t type = 0;
      uint64_t RenderingTrackofType = fpfs_FirstRenderingTrackofType((uint64_t)a1, 1986618469);
      if (RenderingTrackofType)
      {
        uint64_t v54 = RenderingTrackofType;
        uint64_t v55 = 0;
        while (!*(unsigned char *)(v54 + 184))
        {
          uint64_t v56 = *(void *)(v54 + 96);
          fpfs_SetFeederTrack(v56, 0);
          if (v56 != v55)
          {
            if (*(void *)type)
            {
              CFRelease(*(CFTypeRef *)type);
              *(void *)os_log_type_t type = 0;
            }
            CFAllocatorRef v57 = (const __CFAllocator *)FigGetAllocatorForMedia();
            CallbacksForUnsortedSampleBuffers = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
            CMBufferQueueCreate(v57, 0, CallbacksForUnsortedSampleBuffers, (CMBufferQueueRef *)type);
            if (*(void *)type) {
              MEMORY[0x199709540](*(void *)(v56 + 40), fpfs_StealBuffer);
            }
          }
          CFTypeID v59 = *(NSObject **)(v54 + 120);
          if (v59)
          {
            CFTypeRef v60 = *(OpaqueCMTimebase **)(v42 + 576);
            CMTime time = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA10];
            CMTimebaseSetTimerDispatchSourceNextFireTime(v60, v59, &time, 1u);
            *(_OWORD *)(v54 + 156) = v80;
            *(void *)(v54 + 172) = v79;
          }
          fpfs_ReleaseAndClearTimebaseTimer(*(OpaqueCMTimebase **)(v42 + 576), (dispatch_object_t *)(v54 + 112));
          fpfs_ReleaseAndClearDispatchSource((dispatch_object_t *)(v54 + 264));
          if (*(void *)type)
          {
            if (*(_DWORD *)(v54 + 152) == 6)
            {
              CMBufferRef Head = (opaqueCMSampleBuffer *)CMBufferQueueGetHead(*(CMBufferQueueRef *)type);
              if (Head)
              {
                int v62 = 0;
                uint64_t v81 = v56;
                do
                {
                  memset(&v88, 0, sizeof(v88));
                  CMSampleBufferGetOutputPresentationTimeStamp(&v88, Head);
                  if (v88.flags)
                  {
                    CMTime time = v88;
                    CMTime time2 = *(CMTime *)(v54 + 216);
                    if (CMTimeCompare(&time, &time2) >= 1) {
                      break;
                    }
                  }
                  uint64_t v63 = (opaqueCMSampleBuffer *)CMBufferQueueDequeueAndRetain(*(CMBufferQueueRef *)type);
                  CMTime v64 = v63;
                  if (!v62)
                  {
                    if (!fpfs_IsVideoSync(v63))
                    {
                      int v62 = 0;
                      if (!v64) {
                        goto LABEL_86;
                      }
LABEL_85:
                      CFRelease(v64);
                      goto LABEL_86;
                    }
                    CMSampleBufferGetOutputPresentationTimeStamp(&time, v64);
                    *(CMTime *)(v54 + 272) = time;
                    if (dword_1E9350BB0)
                    {
                      int v87 = 0;
                      os_log_type_t v86 = OS_LOG_TYPE_DEFAULT;
                      uint64_t v65 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                      os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT);
                      int v62 = 1;
                      fig_log_call_emit_and_clean_up_after_send_and_compose();
                      uint64_t v56 = v81;
                    }
                    else
                    {
                      int v62 = 1;
                    }
                  }
                  CMBufferQueueEnqueue(*(CMBufferQueueRef *)(v54 + 72), v64);
                  if (v64) {
                    goto LABEL_85;
                  }
LABEL_86:
                  CMBufferRef Head = (opaqueCMSampleBuffer *)CMBufferQueueGetHead(*(CMBufferQueueRef *)type);
                }
                while (Head);
              }
            }
          }
          fpfs_ReleaseTrackRenderChain(v54);
          CMTime time = *(CMTime *)(v54 + 192);
          CMTime time2 = v90;
          if (CMTimeCompare(&time, &time2) < 0) {
            *(CMTime *)(v54 + 192) = v90;
          }
          fpfs_ChangeTrackState(v54, 5u);
          fpfs_CheckVideoSyncQueue(v54, 0);
          uint64_t v54 = fpfs_FirstRenderingTrackofType((uint64_t)a1, 1986618469);
          uint64_t v55 = v56;
          if (!v54) {
            goto LABEL_99;
          }
        }
        fpfs_ReleaseTrackRenderChain(v54);
        fpfs_ChangeTrackState(v54, 2u);
      }
LABEL_99:
      if (*(void *)type) {
        CFRelease(*(CFTypeRef *)type);
      }
      fpfs_ClearRenderChains(a1, 1u);
      uint64_t v66 = *(void *)(v42 + 1704);
      if (v66 && FigAlternateIsIFrameOnly(v66) || *(void *)(v42 + 2968)) {
        fpfs_SetRateWithFade(*(void **)v42, 0.0);
      }
      fpfs_cleanupAllImageQueues(a1, 0);
    }
    if (!CelestialShouldLimitHDRConcurrentPlayback()
      || (uint64_t v67 = CMBaseObjectGetDerivedStorage(), *(float *)(v67 + 108) == 0.0)
      || !fpfs_CanRenderVideo(v67, 0))
    {
      fpfs_ReleasePlayerHDRPlaybackBaton();
    }
    if (!CelestialShouldLimit4kConcurrentPlayback()
      || (uint64_t v68 = CMBaseObjectGetDerivedStorage(), *(float *)(v68 + 108) == 0.0)
      || !fpfs_CanRenderVideo(v68, 0))
    {
      fpfs_ReleasePlayer4kPlaybackBaton(v78);
    }
    uint64_t GlobalSingleton = FigPlayerResourceArbiterGetGlobalSingleton(&v84);
    if (!GlobalSingleton) {
      uint64_t GlobalSingleton = FigPlayerResourceArbiterSetSpecifierForConsumer(v84, 0, *(void *)(v77 + 864));
    }
    uint64_t v37 = GlobalSingleton;
    goto LABEL_117;
  }
  uint64_t v38 = CMBaseObjectGetDerivedStorage();
  uint64_t v39 = *(void *)(v38 + 1048);
  if (v39)
  {
    CFNumberRef v40 = (uint64_t *)v38;
    while (1)
    {
      int v41 = *(_DWORD *)(v39 + 32);
      if (v41 == 1986618469)
      {
        if (!FPSupport_CanVideoRenderPipelineSupportChangingFigImageQueues(*(const opaqueCMFormatDescription **)(v39 + 40))) {
          break;
        }
        int v41 = *(_DWORD *)(v39 + 32);
      }
      if (v41 == 1835365473
        && fpfs_canSendMetadataTrackToVideoTargets(*v40, *(const opaqueCMFormatDescription **)(v39 + 40)))
      {
        break;
      }
      uint64_t v39 = *(void *)(v39 + 8);
      if (!v39) {
        goto LABEL_53;
      }
    }
    LODWORD(v39) = 1;
  }
LABEL_53:
  if (fpfs_FirstTrackWithFormatDescriptionOfType((uint64_t)a1, 1986618469)) {
    BOOL v44 = *(float *)(DerivedStorage + 848) == 0.0;
  }
  else {
    BOOL v44 = 0;
  }
  if (v44 | v39)
  {
    fpfs_stopResetDisturbReprepareAndResume(*(const void **)DerivedStorage, a1, 0);
LABEL_58:
    uint64_t v37 = 0;
    goto LABEL_117;
  }
  if (!fpfs_FirstRenderingTrackofType((uint64_t)a1, 1986618469))
  {
    fpfsi_ResumeAllWaitingVideoTracks(a1);
    goto LABEL_58;
  }
  fpfsi_copyCurrentImageQueueArrayAndOptions((uint64_t)a1, (uint64_t *)&cf);
  uint64_t v45 = *a2;
  if (v45 != CAImageQueueGetTypeID()
    || !*a2
    || (uint64_t v46 = fpfs_FirstRenderingTrackofType((uint64_t)a1, 1986618469),
        uint64_t v37 = fpfsi_addCAImageQueuesAndSlots(a1, v46, *((unsigned __int8 *)a2 + 16)),
        !v37))
  {
    time.CFArrayRef value = 0;
    time2.CFArrayRef value = 0;
    uint64_t v47 = CMBaseObjectGetDerivedStorage();
    uint64_t v48 = CMBaseObjectGetDerivedStorage();
    uint64_t v49 = fpfs_FirstRenderingTrackofType((uint64_t)a1, 1986618469);
    if (!v49)
    {
      CFArrayRef value = 0;
LABEL_131:
      uint64_t v37 = 0;
      goto LABEL_132;
    }
    fpfs_CreateFigImageQueueOutputsArray((uint64_t)a1, v49, (CFTypeRef *)&time);
    CFArrayRef value = (const __CFArray *)time.value;
    uint64_t v51 = CMBaseObjectGetDerivedStorage();
    if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 896))
    {
      uint64_t updated = fpfsi_updateOutputsForAllAggregateVideoDestinations((uint64_t)a1, (uint64_t)value);
    }
    else
    {
      uint64_t v71 = *(void *)(v51 + 720);
      if (!v71)
      {
LABEL_124:
        uint64_t v73 = *(void *)(v47 + 720);
        if (v73) {
          FigImageQueueTableSetTimebase(v73, *(void **)(v47 + 576));
        }
        fpfsi_copyCurrentImageQueueArrayAndOptions((uint64_t)a1, &time2.value);
        fpfsi_updateFigImageQueueListeners((uint64_t)a1, 0);
        for (uint64_t i = *(void *)(v47 + 1048); i; uint64_t i = *(void *)(i + 8))
        {
          if (*(_DWORD *)(i + 32) == 1986618469)
          {
            uint64_t v75 = *(void *)(i + 96);
            if (v75) {
              FPSupport_AppendDeferredTransactionChangeForSettingFigImageQueuesOnRenderPipeline(*(const void **)(v48 + 816), (const void *)time2.value, *(const void **)(v75 + 32), (uint64_t)"fpfsi_UpdateWithNewFigImageQueues");
            }
          }
        }
        goto LABEL_131;
      }
      uint64_t matched = FigImageQueueTableUpdateToMatchOutputsArray(v71, value, 0, 0, 0, 0);
      if (matched)
      {
        uint64_t v37 = matched;
LABEL_132:
        if (time2.value) {
          CFRelease((CFTypeRef)time2.value);
        }
        if (value) {
          CFRelease(value);
        }
        if (!v37)
        {
          uint64_t v76 = *a2;
          if (v76 == FigVideoTargetGetTypeID()) {
            fpfsi_scheduleFVTTransitionsForItem((const __CFString *)a1, 0, 1);
          }
          goto LABEL_58;
        }
        goto LABEL_117;
      }
      uint64_t updated = FigImageQueueTableSetTimebase(*(void *)(v51 + 720), *(void **)(v51 + 576));
    }
    uint64_t v37 = updated;
    if (updated) {
      goto LABEL_132;
    }
    goto LABEL_124;
  }
LABEL_117:
  if (cf) {
    CFRelease(cf);
  }
  return v37;
}

uint64_t fpfsi_RTCReportingUpdateFVTCount(uint64_t result, int a2)
{
  uint64_t v2 = *(void *)(result + 2544);
  if (v2)
  {
    uint64_t VTable = CMBaseObjectGetVTable();
    uint64_t v6 = *(void *)(VTable + 16);
    uint64_t result = VTable + 16;
    uint64_t v5 = v6;
    uint64_t v7 = v6 ? v5 : 0;
    CFArrayRef v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, void))(v7 + 56);
    if (v8)
    {
      return v8(v2, 0x1EE582B78, 0x1EE583758, a2, 0);
    }
  }
  return result;
}

uint64_t fpfsi_ApplyFiltersAndSwitchVariantIfNecessary(const void *a1, int a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v16 = 0;
  CFArrayRef theArray = 0;
  uint64_t v5 = *(const void **)(DerivedStorage + 40);
  if (!v5) {
    goto LABEL_8;
  }
  uint64_t updated = FigAlternateSelectionBossApplyFilters(v5);
  if (updated) {
    goto LABEL_10;
  }
  uint64_t v7 = *(void *)(DerivedStorage + 40);
  uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
  uint64_t updated = FigAlternateSelectionBossCopyProperty(v7, @"FilteredAlternateList", AllocatorForMedia, &theArray);
  if (updated) {
    goto LABEL_10;
  }
  if (!theArray || CFArrayGetCount(theArray) <= 0)
  {
    uint64_t updated = FigSignalErrorAt();
    goto LABEL_10;
  }
  uint64_t updated = fpfsi_UpdateValidAlternateListAndSuggestAnAlternate((uint64_t)a1, theArray, &v16);
  if (updated)
  {
LABEL_10:
    uint64_t v9 = updated;
    goto LABEL_14;
  }
  if (FigCFEqual())
  {
LABEL_8:
    uint64_t v9 = 0;
    goto LABEL_14;
  }
  memset(&v15, 0, sizeof(v15));
  fpfs_GetNextTimeToPlay(DerivedStorage, 0, (uint64_t)&v15);
  uint64_t v10 = *(const void **)DerivedStorage;
  int v11 = v16;
  CMTime lhs = v15;
  CMTime rhs = *(CMTime *)(DerivedStorage + 1184);
  CMTimeAdd(&v14, &lhs, &rhs);
  CMTime lhs = v14;
  CMTime rhs = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  uint64_t v12 = fpfs_SetAlternateWithContext((uint64_t)v10, a1, v11, 1u, &lhs, (uint64_t)&rhs, 0, 0, 0, 0x10u);
  uint64_t v9 = v12;
  if (a2 && !v12) {
    fpfs_stopResetDisturbReprepareAndResume(*(const void **)DerivedStorage, (const __CFArray *)a1, 1);
  }
LABEL_14:
  if (theArray) {
    CFRelease(theArray);
  }
  return v9;
}

uint64_t fpfsi_CopyTrackProperty(uint64_t a1, int a2, const void *a3, const __CFAllocator *a4, const void **a5)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (a3)
    {
      if (a5)
      {
        uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
        if (!FigRetainProxyIsInvalidated())
        {
          int v11 = *(const void **)DerivedStorage;
          uint64_t v12 = *(void *)(DerivedStorage + 168);
          LODWORD(valuePtr) = a2;
          theDict[0] = 0;
          uint64_t v13 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
          if (!v12) {
            goto LABEL_21;
          }
          int v14 = FigPropertyStorageCopyValue(v12, @"TrackPropertyStorages", theDict);
          if (!v14)
          {
            if (theDict[0])
            {
              CFNumberRef v15 = CFNumberCreate(*v13, kCFNumberSInt32Type, &valuePtr);
              if (v15)
              {
                CFNumberRef v16 = v15;
                CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict[0], v15);
                CFRelease(v16);
                int v18 = -12784;
                if (Value)
                {
                  int v18 = CFDictionaryGetValueIfPresent(Value, a3, a5) ? 0 : -12784;
                  if (*a5) {
                    CFRetain(*a5);
                  }
                }
LABEL_18:
                if (theDict[0]) {
                  CFRelease(theDict[0]);
                }
                if (!v18) {
                  return 0;
                }
LABEL_21:
                uint64_t v45 = 0;
                fpfs_LockMutexWithCaller((uint64_t)v11);
                uint64_t v19 = a2;
                fpfs_GetItemLivingTrack(DerivedStorage, a2, &v45);
                uint64_t v20 = v45;
                if (!v45)
                {
                  uint64_t v20 = *(void *)(DerivedStorage + 1080);
                  if (!v20)
                  {
LABEL_30:
                    uint64_t v24 = 4294954453;
                    goto LABEL_91;
                  }
                  while (*(void *)(v20 + 16) != v19)
                  {
                    uint64_t v20 = *(void *)(v20 + 8);
                    if (!v20) {
                      goto LABEL_30;
                    }
                  }
                  uint64_t v45 = v20;
                }
                if (CFEqual(a3, @"FormatDescriptionArray"))
                {
                  uint64_t v22 = *(void *)(v20 + 40);
                  CFIndex v21 = (const void **)(v20 + 40);
                  if (v22)
                  {
                    CFArrayRef v23 = CFArrayCreate(a4, v21, 1, MEMORY[0x1E4F1D510]);
                    *a5 = v23;
                    if (v23)
                    {
LABEL_25:
                      uint64_t v24 = 0;
LABEL_91:
                      fpfs_UnlockAndPostNotificationsWithCaller(v11);
                      return v24;
                    }
                    goto LABEL_43;
                  }
LABEL_90:
                  uint64_t v24 = 4294954513;
                  goto LABEL_91;
                }
                if (CFEqual(a3, @"Dimensions"))
                {
                  float width = 0.0;
                  float height = 0.0;
                  if (*(_DWORD *)(v20 + 32) == 1986618469)
                  {
                    CMVideoDimensions Dimensions = CMVideoFormatDescriptionGetDimensions(*(CMVideoFormatDescriptionRef *)(v20 + 40));
                    float width = (float)Dimensions.width;
                    float height = (float)Dimensions.height;
                  }
                  float v46 = height;
                  float v47 = width;
                  long long valuePtr = xmmword_1E5791090;
                  CFAllocatorRef v28 = *v13;
                  CFDictionaryRef v29 = CFNumberCreate(*v13, kCFNumberFloat32Type, &v47);
                  theDict[0] = v29;
                  CFDictionaryRef v30 = CFNumberCreate(v28, kCFNumberFloat32Type, &v46);
                  theDict[1] = v30;
                  if (v29) {
                    BOOL v31 = v30 == 0;
                  }
                  else {
                    BOOL v31 = 1;
                  }
                  if (v31)
                  {
                    CFDictionaryRef v32 = 0;
                    if (!v29)
                    {
LABEL_40:
                      if (theDict[1]) {
                        CFRelease(theDict[1]);
                      }
                      *a5 = v32;
                      if (v32) {
                        goto LABEL_25;
                      }
                      goto LABEL_43;
                    }
                  }
                  else
                  {
                    CFDictionaryRef v32 = CFDictionaryCreate(a4, (const void **)&valuePtr, (const void **)theDict, 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                    CFDictionaryRef v29 = theDict[0];
                    if (!theDict[0]) {
                      goto LABEL_40;
                    }
                  }
                  CFRelease(v29);
                  goto LABEL_40;
                }
                if (CFEqual(a3, @"EstimatedDataRate"))
                {
                  uint64_t v34 = *(void *)(v20 + 48);
                  if (v34)
                  {
                    uint64_t v33 = FigManifoldCopyTrackProperty(v34, *(unsigned int *)(v20 + 24), @"FMFD_TrackEstimatedDataRate", (uint64_t)a4, (uint64_t)a5);
                    goto LABEL_44;
                  }
                  goto LABEL_90;
                }
                if (CFEqual(a3, @"NominalFrameRate") || CFEqual(a3, @"CurrentVideoFrameRate"))
                {
                  uint64_t v35 = *(void *)(v20 + 96);
                  if (!v35) {
                    goto LABEL_90;
                  }
                  uint64_t v36 = *(void *)(v35 + 32);
                  if (!v36) {
                    goto LABEL_90;
                  }
                  uint64_t v37 = kFigRenderPipelineProperty_CurrentVideoFrameRate;
LABEL_54:
                  uint64_t v33 = FigRenderPipelineCopyProperty(v36, (uint64_t)*v37, (uint64_t)a4, (uint64_t)a5);
                  goto LABEL_44;
                }
                if (CFEqual(a3, @"Matrix"))
                {
                  long long v38 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 16);
                  *(_OWORD *)CFDictionaryRef theDict = *MEMORY[0x1E4F1DAB8];
                  long long v49 = v38;
                  long long v50 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 32);
                  uint64_t v39 = FigCreate3x3MatrixArrayFromCGAffineTransform(a4, theDict);
                  if (!v39)
                  {
LABEL_43:
                    uint64_t v33 = FigSignalErrorAt();
LABEL_44:
                    uint64_t v24 = v33;
                    goto LABEL_91;
                  }
                }
                else
                {
                  if (CFEqual(a3, @"Enabled"))
                  {
                    CFNumberRef v40 = (const void *)*MEMORY[0x1E4F1CFD0];
                  }
                  else
                  {
                    if (CFEqual(a3, @"MediaCharacteristicArray"))
                    {
                      *(_OWORD *)CFDictionaryRef theDict = fpfsi_CopyTrackProperty_trackInformationCallbacks;
                      long long v49 = *(_OWORD *)algn_1EE500F70;
                      *(void *)&long long v50 = off_1EE500F80;
                      uint64_t v33 = FigMediaCharacteristicsCopyMediaCharacteristicsWithTrackCallbacks((uint64_t)a4, v20, (uint64_t (**)(uint64_t, int *))theDict, (__CFArray **)a5);
                      goto LABEL_44;
                    }
                    if (CFEqual(a3, @"EffectiveLoudnessInfo"))
                    {
                      if (*(_DWORD *)(v20 + 32) == 1936684398)
                      {
                        uint64_t v33 = fpfsi_copyLoudnessInfoWithItemMediaKindAndLID(DerivedStorage, v20, (__CFDictionary **)a5);
                        goto LABEL_44;
                      }
                      goto LABEL_43;
                    }
                    if (CFEqual(a3, @"EffectiveEQPreset"))
                    {
                      if (*(_DWORD *)(v20 + 32) != 1936684398) {
                        goto LABEL_90;
                      }
                      uint64_t v41 = *(void *)(v20 + 96);
                      if (!v41) {
                        goto LABEL_90;
                      }
                      uint64_t v36 = *(void *)(v41 + 32);
                      if (!v36) {
                        goto LABEL_90;
                      }
                      uint64_t v37 = kFigAudioRenderPipelineProperty_EQPreset;
                      goto LABEL_54;
                    }
                    if (CFEqual(a3, @"WillTrimShortDurationAudioSamples"))
                    {
                      if (*(_DWORD *)(v20 + 32) != 1936684398) {
                        goto LABEL_90;
                      }
                      uint64_t v42 = *(void *)(v20 + 96);
                      if (!v42) {
                        goto LABEL_90;
                      }
                      uint64_t v36 = *(void *)(v42 + 32);
                      if (!v36) {
                        goto LABEL_90;
                      }
                      uint64_t v37 = kFigAudioRenderPipelineProperty_WillTrimShortDurationSamples;
                      goto LABEL_54;
                    }
                    if (CFEqual(a3, @"EmploysHardwarePassthrough"))
                    {
                      if (*(_DWORD *)(v20 + 32) != 1936684398) {
                        goto LABEL_90;
                      }
                      uint64_t v43 = *(void *)(v20 + 96);
                      if (!v43) {
                        goto LABEL_90;
                      }
                      uint64_t v36 = *(void *)(v43 + 32);
                      if (!v36) {
                        goto LABEL_90;
                      }
                      uint64_t v37 = kFigAudioRenderPipelineProperty_EmploysHardwarePassthrough;
                      goto LABEL_54;
                    }
                    if (!CFEqual(a3, @"RenderPipeline"))
                    {
                      uint64_t v24 = 4294954512;
                      goto LABEL_91;
                    }
                    uint64_t v44 = *(void *)(v20 + 96);
                    if (!v44) {
                      goto LABEL_90;
                    }
                    CFNumberRef v40 = *(const void **)(v44 + 32);
                    if (!v40) {
                      goto LABEL_90;
                    }
                  }
                  uint64_t v39 = (void *)CFRetain(v40);
                }
                uint64_t v24 = 0;
                *a5 = v39;
                goto LABEL_91;
              }
            }
            int v14 = FigSignalErrorAt();
          }
          int v18 = v14;
          goto LABEL_18;
        }
      }
    }
  }

  return FigSignalErrorAt();
}

uint64_t fpfsi_SetCurrentTimeWithRange(const __CFArray *a1, CMTime *a2, unsigned int a3, uint64_t a4, long long *a5)
{
  CMTime v10 = *a2;
  long long v8 = *(_OWORD *)a4;
  uint64_t v9 = *(void *)(a4 + 16);
  long long v6 = *a5;
  uint64_t v7 = *((void *)a5 + 2);
  return fpfsi_SetCurrentTimeWithRangeAndSeekID(a1, &v10, a3, &v8, (uint64_t)&v6, 0);
}

uint64_t fpfsi_SetCurrentTimeWithRangeAndSeekID(const __CFArray *a1, CMTime *a2, unsigned int a3, long long *a4, uint64_t a5, unsigned int a6)
{
  CMTime v11 = *a2;
  long long v9 = *a4;
  uint64_t v10 = *((void *)a4 + 2);
  long long v7 = *(_OWORD *)a5;
  uint64_t v8 = *(void *)(a5 + 16);
  return fpfsi_SetCurrentTimeWithRangeAndSeekIDGuts(a1, &v11, a3, (uint64_t)&v9, &v7, a6, 0, 0, 1, 0, 1, 1, 0, 1);
}

uint64_t fpfsi_CopyAsset(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  BOOL v4 = (const void *)*DerivedStorage;
  fpfs_LockMutexWithCaller(*DerivedStorage);
  if (FigRetainProxyIsInvalidated())
  {
    uint64_t v6 = FigSignalErrorAt();
  }
  else
  {
    CFTypeRef v5 = (CFTypeRef)DerivedStorage[4];
    if (v5) {
      CFTypeRef v5 = CFRetain(v5);
    }
    uint64_t v6 = 0;
    *a2 = v5;
  }
  fpfs_UnlockAndPostNotificationsWithCaller(v4);
  return v6;
}

uint64_t fpfsi_SetProperties(uint64_t a1, const __CFDictionary *a2, void *a3)
{
  return FPSupport_HandlePlaybackItemSetPropertiesAndCopyModification(a1, a2, 0, (uint64_t)fpfsi_handleSetProperty, 0, 0, a3);
}

uint64_t fpfsi_SetCurrentTimeWithOptions(const __CFArray *a1, CMTime *a2)
{
  int v16 = 0;
  long long v14 = *MEMORY[0x1E4F1F9F8];
  uint64_t v15 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  long long v12 = v14;
  uint64_t v13 = v15;
  uint64_t v11 = 0;
  FigCFDictionaryGetInt32IfPresent();
  FigCFDictionaryGetCMTimeIfPresent();
  FigCFDictionaryGetCMTimeIfPresent();
  FigCFDictionaryGetInt32IfPresent();
  CFDictionaryRef Value = (const void *)FigCFDictionaryGetValue();
  FigCFDictionaryGetInt32IfPresent();
  CMTime v10 = *a2;
  long long v8 = v14;
  uint64_t v9 = v15;
  long long v6 = v14;
  uint64_t v7 = v15;
  return fpfsi_SetCurrentTimeWithRangeAndSeekIDGuts(a1, &v10, 0, (uint64_t)&v8, &v6, 0, Value, 0, 1, 0, 1, 1, 0, 1);
}

uint64_t fpfsi_GetTrackMediaType(uint64_t a1, _DWORD *a2)
{
  *a2 = *(_DWORD *)(a1 + 32);
  return 0;
}

uint64_t fpfsi_CopyTaggedCharacteristics(uint64_t a1, const __CFAllocator *a2, __CFArray **a3)
{
  int v5 = *(_DWORD *)(a1 + 32);
  long long v6 = *(const void **)(a1 + 440);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFMutableArrayRef Mutable = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D510]);
  CFArrayRef theArray = 0;
  *a3 = 0;
  if (v5 == 1668047728) {
    int v5 = 1935832172;
  }
  CFArrayRef v10 = *(const __CFArray **)(DerivedStorage + 1792);
  uint64_t CFStringForOSTypeValue = FigGetCFStringForOSTypeValue();
  CFDictionaryRef MediaTypeInMediaArray = fpfs_FindMediaTypeInMediaArray(v10, CFStringForOSTypeValue, 0);
  if (!MediaTypeInMediaArray) {
    goto LABEL_15;
  }
  CFDictionaryRef v13 = MediaTypeInMediaArray;
  uint64_t v14 = FigMediaCharacteristicsCreateMediaCharacteristicsForMediaOption(a2, 0, MediaTypeInMediaArray, &theArray);
  if (!v14)
  {
    CFArrayRef v15 = theArray;
    if (theArray)
    {
      v22.length = CFArrayGetCount(theArray);
      v22.location = 0;
      CFArrayAppendArray(Mutable, v15, v22);
    }
    CFDictionaryRef Value = CFDictionaryGetValue(v13, @"MediaSelectionOptionsPersistentID");
    if (!v6 || v5 != 1936684398 || !Value) {
      goto LABEL_15;
    }
    int ImmersiveAudioCapability = FigAlternateGetImmersiveAudioCapability(v6, Value);
    if (ImmersiveAudioCapability == 3)
    {
      int v18 = kFigStdAssetMediaCharacteristic_TaggedBinauralForHeadphones;
    }
    else
    {
      if (ImmersiveAudioCapability != 2)
      {
LABEL_15:
        uint64_t v19 = 0;
        *a3 = Mutable;
        goto LABEL_16;
      }
      int v18 = kFigStdAssetMediaCharacteristic_TaggedDownmix;
    }
    CFArrayAppendValue(Mutable, *v18);
    goto LABEL_15;
  }
  uint64_t v19 = v14;
  if (Mutable) {
    CFRelease(Mutable);
  }
LABEL_16:
  if (theArray) {
    CFRelease(theArray);
  }
  return v19;
}

uint64_t fpfsi_CopyFormatDescriptions(uint64_t a1, CFAllocatorRef allocator, CFArrayRef *a3)
{
  values = *(void **)(a1 + 40);
  if (values) {
    CFArrayRef v4 = CFArrayCreate(allocator, (const void **)&values, 1, MEMORY[0x1E4F1D510]);
  }
  else {
    CFArrayRef v4 = 0;
  }
  *a3 = v4;
  return 0;
}

void fpfs_deferredClientRenderOptionChanged(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  fpfs_LockMutexWithCaller((uint64_t)a2);
  if (!*(unsigned char *)(DerivedStorage + 51)) {
    fpfs_PlayQueueCallForEachItem((uint64_t)a2, (uint64_t (*)(const __CFArray *, uint64_t))fpfsi_handleFVTClientRenderOptionChanged, 0);
  }
  fpfs_UnlockAndPostNotificationsWithCaller(a2);
  if (a2)
  {
    CFRelease(a2);
  }
}

uint64_t fpfsi_handleFVTClientRenderOptionChanged()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(void *)(DerivedStorage + 40)) {
    return 0;
  }
  uint64_t v1 = DerivedStorage;
  uint64_t v2 = CMBaseObjectGetDerivedStorage();
  if (!*(void *)(v2 + 40) || !*(unsigned char *)(v2 + 48) || !*(unsigned char *)(v2 + 49)) {
    return 0;
  }
  uint64_t result = fpfsi_updateSupportedFramerateBucketCapMonitorFromFVT();
  if (!result)
  {
    CFArrayRef v4 = *(const void **)(v1 + 40);
    return FigAlternateSelectionBossApplyFilters(v4);
  }
  return result;
}

void fpfs_deferredFVTPreferredDataChannelChanged(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  fpfs_LockMutexWithCaller((uint64_t)a2);
  if (!*(unsigned char *)(DerivedStorage + 51)) {
    fpfs_PlayQueueCallForEachItem((uint64_t)a2, (uint64_t (*)(const __CFArray *, uint64_t))fpfsi_handleVideoLayoutPreferenceChanged, 0);
  }
  fpfs_UnlockAndPostNotificationsWithCaller(a2);
  if (a2)
  {
    CFRelease(a2);
  }
}

uint64_t fpfsi_handleVideoLayoutPreferenceChanged(const void *a1)
{
  if (!*(void *)(CMBaseObjectGetDerivedStorage() + 40)) {
    return 0;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(void *)(DerivedStorage + 40) || !*(unsigned char *)(DerivedStorage + 48) || !*(unsigned char *)(DerivedStorage + 49)) {
    return 0;
  }
  uint64_t result = fpfsi_setUpVideoLayoutFilters((uint64_t)a1);
  if (!result)
  {
    return fpfsi_ApplyFiltersAndSwitchVariantIfNecessary(a1, 1);
  }
  return result;
}

void fpfs_deferredRedoPreroll(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  fpfs_LockMutexWithCaller((uint64_t)a2);
  if (!*(unsigned char *)(DerivedStorage + 51))
  {
    CFArrayRef v4 = *(const __CFArray **)(DerivedStorage + 80);
    if (v4)
    {
      if (dword_1E9350BB0)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        CFArrayRef v4 = *(const __CFArray **)(DerivedStorage + 80);
      }
      fpfs_stopResetDisturbReprepareAndResume(a2, v4, 0);
    }
  }
  fpfs_UnlockAndPostNotificationsWithCaller(a2);
  if (a2) {
    CFRelease(a2);
  }
}

uint64_t fpfs_CopyExternalProtectionStatus(uint64_t a1, const __CFAllocator *a2, CFDictionaryRef *a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v6 = CMBaseObjectGetDerivedStorage();
  if (v6)
  {
    uint64_t v20 = a3;
    if (*(unsigned char *)(DerivedStorage + 462)) {
      BOOL v7 = *(unsigned char *)(v6 + 1736) == 0;
    }
    else {
      BOOL v7 = 0;
    }
    int v9 = 1;
    int v21 = 1;
    for (uint64_t i = *(void *)(v6 + 1048); i; uint64_t i = *(void *)(i + 8))
    {
      if (!v7 || *(_DWORD *)(i + 32) == 1986618469)
      {
        uint64_t v11 = *(void *)(i + 384);
        if (v11)
        {
          uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v12) {
            uint64_t v13 = v12;
          }
          else {
            uint64_t v13 = 0;
          }
          uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v13 + 24);
          if (v14) {
            uint64_t v8 = v14(v11, 7, &v21);
          }
          else {
            uint64_t v8 = 4294954514;
          }
          if (dword_1E9350BB0 >= 2)
          {
            os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          int v9 = v21;
          if (v8) {
            goto LABEL_23;
          }
          if (v21 != 4 && v21 != 1) {
            break;
          }
        }
      }
    }
    uint64_t v8 = 0;
LABEL_23:
    a3 = v20;
  }
  else
  {
    uint64_t v8 = 0;
    int v9 = 1;
    int v21 = 1;
  }
  if (v9 == 1 || v9 == 4) {
    CFArrayRef v17 = (const void **)&kFigPlayerExternalProtectionStatus_Protected;
  }
  else {
    CFArrayRef v17 = (const void **)&kFigPlayerExternalProtectionStatus_NotProtected;
  }
  CFDictionaryRef v18 = CFDictionaryCreate(a2, (const void **)&kFigPlayerExternalProtectionStatusKey_Video, v17, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (v18)
  {
    if (v8)
    {
      CFRelease(v18);
      CFDictionaryRef v18 = 0;
    }
  }
  else
  {
    uint64_t v8 = 4294954510;
  }
  *a3 = v18;
  return v8;
}

uint64_t fpfs_handleSetProperty(void *a1, uint64_t a2, const void *a3, const void *a4, unsigned char *a5)
{
  uint64_t v211 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = a4;
  if (a1 && a3)
  {
    *a5 = 1;
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (CFEqual(a3, @"PlayerRole"))
    {
      uint64_t v8 = (const void *)FigCFCopyCompactDescription();
      if (dword_1E9350BB0)
      {
        LODWORD(v204.origin.x) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (v8) {
        CFRelease(v8);
      }
    }
    fpfs_LockMutexWithCaller((uint64_t)a1);
    if (*(unsigned char *)(DerivedStorage + 51)) {
      goto LABEL_484;
    }
    if (CFEqual(a3, @"DestinationPixelBufferAttributes"))
    {
      if (!cf || (CFTypeID v10 = CFGetTypeID(cf), v10 == CFDictionaryGetTypeID()))
      {
        uint64_t v11 = *(const void **)(DerivedStorage + 584);
        if (v11) {
          CFRelease(v11);
        }
        CFTypeRef v12 = cf;
        *(void *)(DerivedStorage + 584) = cf;
        if (v12) {
          CFRetain(v12);
        }
        goto LABEL_46;
      }
      goto LABEL_484;
    }
    if (CFEqual(a3, @"ClosedCaptionLayerArray"))
    {
      uint64_t v13 = CMBaseObjectGetDerivedStorage();
      if (!FigCFEqual())
      {
        uint64_t v14 = *(void *)(v13 + 200);
        if (cf) {
          CFArrayRef v15 = (const __CFArray *)CFRetain(cf);
        }
        else {
          CFArrayRef v15 = 0;
        }
        *(void *)(v13 + 200) = v15;
        FPSupport_updateClosedCaptionLayer(v13 + 208, v15);
        FPSupport_AppendDeferredTransactionChangeToRelease(*(const void **)(v13 + 816), v14, (uint64_t)"fpfs_setClientClosedCaptionLayerArray");
      }
      goto LABEL_46;
    }
    if (CFEqual(a3, @"ClosedCaptionLayerBoundsUpdate"))
    {
      *(_DWORD *)os_log_type_t type = 0;
      CGSize v16 = *(CGSize *)(MEMORY[0x1E4F1DB28] + 16);
      rect.origin = (CGPoint)*MEMORY[0x1E4F1DB28];
      rect.size = v16;
      v204.origin = rect.origin;
      v204.size = v16;
      long long v17 = *(_OWORD *)(MEMORY[0x1E4F216C0] + 16);
      unsigned long long valuePtr = *MEMORY[0x1E4F216C0];
      long long v18 = *(_OWORD *)(MEMORY[0x1E4F216C0] + 32);
      long long v19 = *(_OWORD *)(MEMORY[0x1E4F216C0] + 48);
      long long v208 = v17;
      long long v209 = v18;
      long long v210 = v19;
      if (cf && (CFTypeID TypeID = CFDictionaryGetTypeID(), TypeID == CFGetTypeID(cf)))
      {
        CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)cf, @"ClosedCaptionLayerBoundsUpdate_LayerBounds");
        if (Value) {
          CGRectMakeWithDictionaryRepresentation(Value, &rect);
        }
        CFDictionaryRef v22 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)cf, @"ClosedCaptionLayerBoundsUpdate_LayerVideoRelativeToViewport");
        CFDictionaryRef v23 = v22;
        if (v22) {
          CGRectMakeWithDictionaryRepresentation(v22, &v204);
        }
        if (CFDictionaryGetValue((CFDictionaryRef)cf, @"ClosedCaptionLayerBoundsUpdate_LayerCaptionsAvoidanceMargins"))
        {
          FigGeometryMarginsMakeFromDictionary();
          int v24 = 1;
        }
        else
        {
          int v24 = 0;
        }
        CFNumberRef v42 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, @"ClosedCaptionLayerBoundsUpdate_LayerIndex");
        if (v42)
        {
          CFNumberGetValue(v42, kCFNumberIntType, type);
          unsigned int v43 = *(_DWORD *)type;
          if ((*(_DWORD *)type & 0x80000000) != 0) {
            goto LABEL_46;
          }
        }
        else
        {
          unsigned int v43 = 0;
        }
        uint64_t v25 = 0;
        uint64_t v27 = DerivedStorage + 208;
        uint64_t v28 = *(void *)(DerivedStorage + 200);
        CFIndex v26 = v43;
        if (v23)
        {
          CFDictionaryRef v29 = &v204;
          goto LABEL_31;
        }
      }
      else
      {
        uint64_t v25 = FigSignalErrorAt();
        CFIndex v26 = 0;
        int v24 = 0;
        uint64_t v27 = DerivedStorage + 208;
        uint64_t v28 = *(void *)(DerivedStorage + 200);
      }
      CFDictionaryRef v29 = 0;
LABEL_31:
      if (v24) {
        p_unsigned long long valuePtr = (long long *)&valuePtr;
      }
      else {
        p_unsigned long long valuePtr = 0;
      }
      FPSupport_updateClosedCaptionLayerBounds(v27, rect.origin.x, rect.origin.y, rect.size.width, rect.size.height, v28, v26, v29, p_valuePtr);
      goto LABEL_47;
    }
    if (CFEqual(a3, @"ClosedCaptionLayerSetOptions"))
    {
      LODWORD(valuePtr) = 0;
      if (!cf || (CFTypeID v31 = CFDictionaryGetTypeID(), v31 != CFGetTypeID(cf)))
      {
        uint64_t v25 = FigSignalErrorAt();
        uint64_t v35 = 0;
        uint64_t v34 = 0;
        unsigned int v36 = 0;
LABEL_50:
        FPSupport_setClosedCaptionLayerOptions(DerivedStorage + 208, *(void *)(DerivedStorage + 200), v36, v34, v35);
        goto LABEL_47;
      }
      CFNumberRef v32 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, @"ClosedCaptionLayerSetOption_LayerIndex");
      if (v32) {
        CFNumberGetValue(v32, kCFNumberIntType, &valuePtr);
      }
      uint64_t v33 = FigCFDictionaryGetValue();
      if (v33)
      {
        uint64_t v34 = (const void *)v33;
        uint64_t v35 = (const void *)FigCFDictionaryGetValue();
        if (v35)
        {
          uint64_t v25 = 0;
          unsigned int v36 = valuePtr;
          if ((valuePtr & 0x80000000) != 0) {
            goto LABEL_47;
          }
          goto LABEL_50;
        }
      }
LABEL_484:
      uint64_t updated = FigSignalErrorAt();
      goto LABEL_485;
    }
    if (CFEqual(a3, @"ClosedCaptionLayerSetSeparated"))
    {
      LODWORD(valuePtr) = 0;
      if (cf && (CFTypeID v38 = CFDictionaryGetTypeID(), v38 == CFGetTypeID(cf)))
      {
        CFNumberRef v39 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, @"ClosedCaptionLayerSetSeparated_LayerIndex");
        if (v39) {
          CFNumberGetValue(v39, kCFNumberIntType, &valuePtr);
        }
        CFBooleanRef v40 = (const __CFBoolean *)FigCFDictionaryGetValue();
        if (v40) {
          int v41 = CFBooleanGetValue(v40);
        }
        else {
          int v41 = 0;
        }
        uint64_t v25 = 0;
      }
      else
      {
        uint64_t v25 = FigSignalErrorAt();
        int v41 = 0;
      }
      if ((valuePtr & 0x80000000) == 0) {
        FPSupport_setClosedCaptionLayerSeparated(DerivedStorage + 208, *(void *)(DerivedStorage + 200), valuePtr, v41);
      }
      goto LABEL_47;
    }
    if (CFEqual(a3, @"ImageQueueSlotTransitionFinished"))
    {
      fpfs_releaseTransitionImageQueuesAndSlots();
      goto LABEL_46;
    }
    if (CFEqual(a3, @"VideoLayerArray"))
    {
      if (cf)
      {
        CFTypeID v44 = CFArrayGetTypeID();
        if (v44 != CFGetTypeID(cf)) {
          goto LABEL_484;
        }
        CFArrayRef v45 = (const __CFArray *)cf;
      }
      else
      {
        CFArrayRef v45 = 0;
      }
      uint64_t updated = fpfs_setClientVideoLayerArray((uint64_t)a1, v45);
      goto LABEL_485;
    }
    if (CFEqual(a3, @"VideoLayer"))
    {
      CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
      CFArrayRef v47 = CFArrayCreate(AllocatorForMedia, &cf, cf != 0, MEMORY[0x1E4F1D510]);
      if (v47)
      {
        CFArrayRef v48 = v47;
        uint64_t v25 = fpfs_setClientVideoLayerArray((uint64_t)a1, v47);
        CFRelease(v48);
        goto LABEL_47;
      }
      goto LABEL_484;
    }
    if (CFEqual(a3, @"RequiresNumVideoSlots"))
    {
      *(void *)os_log_type_t type = 0;
      if (!cf) {
        goto LABEL_484;
      }
      CFTypeID v50 = CFGetTypeID(cf);
      if (v50 != CFNumberGetTypeID()) {
        goto LABEL_484;
      }
      CFNumberGetValue((CFNumberRef)cf, kCFNumberCFIndexType, type);
      if (*(void *)type != *(void *)(DerivedStorage + 400))
      {
        v204.size.float width = 0.0;
        uint64_t v51 = CAImageQueueGetTypeID();
        uint64_t v52 = *(void *)(DerivedStorage + 400);
        *(void *)&v204.origin.x = v51;
        *(void *)&v204.origin.y = *(void *)type - v52;
        LOBYTE(v204.size.width) = 1;
        CFArrayRef Next = fpfs_getNext(DerivedStorage, 0);
        if (dword_1E9350BB0)
        {
          uint64_t v54 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        uint64_t v63 = *(void *)type;
        if (*(uint64_t *)type >= 1 && Next)
        {
          fpfs_EnqueueNotification(a1, @"TimebaseChanged", Next, 0);
          uint64_t v63 = *(void *)type;
        }
        *(void *)(DerivedStorage + 400) = v63;
        *(unsigned char *)(DerivedStorage + 456) = 1;
        CMTime v64 = (uint64_t (*)(const __CFArray *, uint64_t))fpfsi_handleVideoOutputsChanged;
        uint64_t v65 = &v204;
LABEL_109:
        uint64_t v66 = (uint64_t)a1;
LABEL_110:
        uint64_t updated = fpfs_PlayQueueCallForEachItem(v66, v64, (uint64_t)v65);
        goto LABEL_485;
      }
LABEL_46:
      uint64_t v25 = 0;
LABEL_47:
      fpfs_UnlockAndPostNotificationsWithCaller(a1);
      return v25;
    }
    if (CFEqual(a3, @"VideoLayerDestinationIsTVOut")
      || CFEqual(a3, @"PreventDisplaySleepDuringVideoPlayback"))
    {
      if (!cf) {
        goto LABEL_484;
      }
      CFTypeID v55 = CFBooleanGetTypeID();
      if (v55 != CFGetTypeID(cf)) {
        goto LABEL_484;
      }
      int v56 = CFEqual(a3, @"PreventDisplaySleepDuringVideoPlayback");
      int v57 = CFBooleanGetValue((CFBooleanRef)cf);
      if (v56) {
        int v58 = v57;
      }
      else {
        int v58 = v57 == 0;
      }
      if (*(unsigned __int8 *)(DerivedStorage + 408) != v58)
      {
        CFArrayRef v59 = fpfs_getNext(DerivedStorage, 0);
        *(unsigned char *)(DerivedStorage + 408) = v58;
        if (v59)
        {
          uint64_t v60 = CMBaseObjectGetDerivedStorage();
          if (v60)
          {
            uint64_t v61 = *(void *)(v60 + 792);
            if (v61)
            {
              int v62 = (uint64_t *)MEMORY[0x1E4F1CFD0];
              if (!*(unsigned char *)(DerivedStorage + 408)) {
                int v62 = (uint64_t *)MEMORY[0x1E4F1CFC8];
              }
              uint64_t updated = fpfs_setPropertyOnPrimaryAndAuxRenderPipelines(v61, @"PreventDisplaySleepDuringVideoPlayback", *v62);
              goto LABEL_485;
            }
          }
        }
      }
      goto LABEL_46;
    }
    if (CFEqual(a3, @"AudioPipelineEarlyDump"))
    {
      if (!cf) {
        goto LABEL_484;
      }
      CFTypeID v67 = CFGetTypeID(cf);
      if (v67 != CFNumberGetTypeID()) {
        goto LABEL_484;
      }
      CFNumberRef v68 = (const __CFNumber *)cf;
      uint64_t v69 = (void *)(DerivedStorage + 572);
      goto LABEL_119;
    }
    if (CFEqual(a3, @"VideoPipelineEarlyDump"))
    {
      if (!cf) {
        goto LABEL_484;
      }
      CFTypeID v70 = CFGetTypeID(cf);
      if (v70 != CFNumberGetTypeID()) {
        goto LABEL_484;
      }
      CFNumberRef v68 = (const __CFNumber *)cf;
      uint64_t v69 = (void *)(DerivedStorage + 576);
LABEL_119:
      CFNumberGetValue(v68, kCFNumberIntType, v69);
      goto LABEL_46;
    }
    if (CFEqual(a3, @"DisallowVideoLayerDisplayCompositing"))
    {
      if (cf)
      {
        CFTypeID v71 = CFGetTypeID(cf);
        if (v71 == CFBooleanGetTypeID())
        {
          uint64_t v25 = 0;
          *(unsigned char *)(DerivedStorage + 392) = CFBooleanGetValue((CFBooleanRef)cf);
          goto LABEL_47;
        }
      }
      goto LABEL_484;
    }
    if (CFEqual(a3, @"AllowGaplessTransitions"))
    {
      uint64_t v25 = 0;
      *(unsigned char *)(DerivedStorage + 49) = cf != (CFTypeRef)*MEMORY[0x1E4F1CFC8];
      goto LABEL_47;
    }
    if (CFEqual(a3, @"NetworkCacheURL"))
    {
LABEL_128:
      uint64_t v25 = 4294954514;
      goto LABEL_47;
    }
    if (CFEqual(a3, @"PlayerVolume"))
    {
      uint64_t updated = fpfs_setVolume(a1, (const __CFNumber *)cf);
      goto LABEL_485;
    }
    if (CFEqual(a3, @"PlayerMuted"))
    {
      uint64_t updated = fpfs_setMuted(a1, cf);
      goto LABEL_485;
    }
    if (CFEqual(a3, @"EQPreset"))
    {
      LODWORD(valuePtr) = 0;
      if (!cf) {
        goto LABEL_484;
      }
      CFTypeID v72 = CFGetTypeID(cf);
      if (v72 != CFNumberGetTypeID()) {
        goto LABEL_484;
      }
      CFNumberGetValue((CFNumberRef)cf, kCFNumberIntType, &valuePtr);
      uint64_t updated = fpfs_setEQPreset((uint64_t)a1, valuePtr);
      goto LABEL_485;
    }
    if (CFEqual(a3, @"SetVideoLayerBoundsAutomatically"))
    {
      if (cf)
      {
        CFTypeID v73 = CFGetTypeID(cf);
        if (v73 == CFBooleanGetTypeID())
        {
          uint64_t v25 = 0;
          *(unsigned char *)(DerivedStorage + 457) = CFBooleanGetValue((CFBooleanRef)cf);
          goto LABEL_47;
        }
      }
      goto LABEL_484;
    }
    if (CFEqual(a3, @"PrimaryVideoOutputSize"))
    {
      unsigned long long valuePtr = 0uLL;
      if (!cf) {
        goto LABEL_484;
      }
      CFTypeID v74 = CFGetTypeID(cf);
      if (v74 != CFDictionaryGetTypeID()
        || !CGSizeMakeWithDictionaryRepresentation((CFDictionaryRef)cf, (CGSize *)&valuePtr))
      {
        goto LABEL_484;
      }
      if (*(double *)&valuePtr == *(double *)(DerivedStorage + 440)
        && *((double *)&valuePtr + 1) == *(double *)(DerivedStorage + 448))
      {
        goto LABEL_46;
      }
      *(_OWORD *)(DerivedStorage + 440) = valuePtr;
      uint64_t v75 = (uint64_t (*)())fpfsi_HandleResolutionCapOrDisplaySizeChange;
      goto LABEL_149;
    }
    if (CFEqual(a3, @"PostClosedCaptionCommands"))
    {
      if (cf)
      {
        CFTypeID v76 = CFGetTypeID(cf);
        if (v76 == CFBooleanGetTypeID())
        {
          uint64_t v25 = 0;
          *(unsigned char *)(DerivedStorage + 208) = CFBooleanGetValue((CFBooleanRef)cf);
          goto LABEL_47;
        }
      }
      goto LABEL_484;
    }
    if (CFEqual(a3, @"DisplayClosedCaptions"))
    {
      if (cf)
      {
        CFTypeID v77 = CFGetTypeID(cf);
        if (v77 == CFBooleanGetTypeID())
        {
          int v78 = CFBooleanGetValue((CFBooleanRef)cf);
          if (v78 != *(unsigned __int8 *)(DerivedStorage + 209))
          {
            *(unsigned char *)(DerivedStorage + 209) = v78;
            fpfs_updateClosedCaptionsDisplay(a1, 0);
          }
          goto LABEL_46;
        }
      }
      goto LABEL_484;
    }
    if (CFEqual(a3, @"RequiredNumberOfCAContextsForClosedCaptionLayers"))
    {
      if (cf)
      {
        CFTypeID v79 = CFGetTypeID(cf);
        if (v79 == CFNumberGetTypeID())
        {
          LODWORD(valuePtr) = 0;
          CFNumberGetValue((CFNumberRef)cf, kCFNumberSInt32Type, &valuePtr);
          if (valuePtr != *(_DWORD *)(DerivedStorage + 232))
          {
            *(_DWORD *)(DerivedStorage + 232) = valuePtr;
            FPSupport_updateClosedCaptionLayer(DerivedStorage + 208, *(const __CFArray **)(DerivedStorage + 200));
          }
        }
      }
      goto LABEL_46;
    }
    if (CFEqual(a3, @"DisplayNonForcedSubtitles") || CFEqual(a3, @"PreferredLanguageList"))
    {
      uint64_t v25 = 4294954513;
      goto LABEL_47;
    }
    if (CFEqual(a3, @"ActionAtEnd"))
    {
      int v80 = *(_DWORD *)(DerivedStorage + 632);
      CFArrayRef v81 = fpfs_getNext(DerivedStorage, 0);
      uint64_t ActionAtEndForString = FigPlaybackGetActionAtEndForString(cf);
      uint64_t v25 = 0;
      *(_DWORD *)(DerivedStorage + 632) = ActionAtEndForString;
      if (v80 == ActionAtEndForString || !v81) {
        goto LABEL_47;
      }
      uint64_t v83 = ActionAtEndForString;
      uint64_t v84 = *(void *)(DerivedStorage + 80);
      CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 72));
      if (v84) {
        uint64_t v86 = Count + 1;
      }
      else {
        uint64_t v86 = Count;
      }
      if (FigPlaybackGetEffectiveActionAtEnd(v83, v86))
      {
        uint64_t RenderingTrackofType = fpfs_LastRenderingTrackofType((uint64_t)v81, 1936684398, 0);
        if (RenderingTrackofType) {
          fpfs_CancelGaplessTransitionThatDependsOnTrack(a1, RenderingTrackofType, 1);
        }
      }
      fpfs_AdvanceToNextItemIfNecessary();
      goto LABEL_46;
    }
    if (CFEqual(a3, @"ApplyVideoTrackMatrix"))
    {
      if (cf)
      {
        CFTypeID v88 = CFGetTypeID(cf);
        if (v88 == CFBooleanGetTypeID())
        {
          int v89 = CFBooleanGetValue((CFBooleanRef)cf);
          if (v89 != *(unsigned __int8 *)(DerivedStorage + 608))
          {
            uint64_t v25 = 0;
            *(unsigned char *)(DerivedStorage + 608) = v89;
            goto LABEL_47;
          }
          goto LABEL_46;
        }
      }
      goto LABEL_484;
    }
    if (CFEqual(a3, @"TimeAccuracy")) {
      goto LABEL_128;
    }
    if (CFEqual(a3, @"FigAudioSession"))
    {
      if (cf)
      {
        CFTypeID v90 = CFGetTypeID(cf);
        if (v90 != FigAudioSessionGetTypeID()) {
          goto LABEL_484;
        }
        CFTypeRef v91 = cf;
        CFTypeID v92 = (void *)(DerivedStorage + 536);
        uint64_t v93 = *(const void **)(DerivedStorage + 536);
        *(void *)(DerivedStorage + 536) = cf;
        CFRetain(v91);
      }
      else
      {
        CFTypeID v92 = (void *)(DerivedStorage + 536);
        uint64_t v93 = *(const void **)(DerivedStorage + 536);
        *(void *)(DerivedStorage + 536) = 0;
      }
      if (v93) {
        CFRelease(v93);
      }
      fpfs_setCachedRouteInfo();
      uint64_t v96 = *(void *)(DerivedStorage + 80);
      if ((!v96 || fpfs_FirstRenderingTrackofType(v96, 1936684398)) && *v92) {
        fpfs_stopResetDisturbReprepareAndResume(a1, *(const __CFArray **)(DerivedStorage + 80), 0);
      }
      if (!*(void *)(DerivedStorage + 528)) {
        fpfs_FetchClientBundleIdentifierFromAudioSession(a1);
      }
      goto LABEL_46;
    }
    if (CFEqual(a3, @"FigAudioSession2")) {
      goto LABEL_46;
    }
    if (CFEqual(a3, @"ClientName"))
    {
      if (!cf || (CFTypeID v94 = CFStringGetTypeID(), v94 == CFGetTypeID(cf)))
      {
        uint64_t v95 = *(const void **)(DerivedStorage + 184);
        if (v95)
        {
          CFRelease(v95);
          *(void *)(DerivedStorage + 184) = 0;
        }
        if (cf)
        {
          uint64_t v25 = 0;
          *(void *)(DerivedStorage + 184) = CFRetain(cf);
          goto LABEL_47;
        }
        goto LABEL_46;
      }
LABEL_211:
      uint64_t v25 = 4294954436;
      goto LABEL_47;
    }
    if (CFEqual(a3, @"STSLabel"))
    {
      if (cf)
      {
        CFTypeID v97 = CFStringGetTypeID();
        if (v97 != CFGetTypeID(cf)) {
          goto LABEL_211;
        }
        CFTypeRef v98 = cf;
      }
      else
      {
        CFTypeRef v98 = 0;
      }
      *(void *)&unsigned long long valuePtr = @"STSLabel";
      *((void *)&valuePtr + 1) = v98;
      uint64_t v100 = *(const void **)(DerivedStorage + 192);
      *(void *)(DerivedStorage + 192) = v98;
      if (v98) {
        CFRetain(v98);
      }
      if (v100) {
        CFRelease(v100);
      }
      CMTime v64 = (uint64_t (*)(const __CFArray *, uint64_t))fpfsi_setPropertyOnAllAudioRenderPipelines;
      uint64_t v65 = (CGRect *)&valuePtr;
      goto LABEL_109;
    }
    if (CFEqual(a3, @"AudioDeviceUID"))
    {
      if (cf)
      {
        CFTypeID v99 = CFStringGetTypeID();
        if (v99 != CFGetTypeID(cf)) {
          goto LABEL_211;
        }
      }
      if (FigCFEqual()) {
        goto LABEL_46;
      }
      CFTypeID v103 = *(const void **)(DerivedStorage + 176);
      CFTypeRef v104 = cf;
      *(void *)(DerivedStorage + 176) = cf;
      if (v104) {
        CFRetain(v104);
      }
      if (v103) {
        CFRelease(v103);
      }
      LOBYTE(valuePtr) = 0;
LABEL_231:
      fpfs_PlayQueueCallForEachItem((uint64_t)a1, (uint64_t (*)(const __CFArray *, uint64_t))fpfs_handleAvailableAudioFormatChange_Apply, (uint64_t)&valuePtr);
      goto LABEL_46;
    }
    if (CFEqual(a3, @"EnableHardwareAcceleratedVideoDecoder"))
    {
      if (!cf)
      {
        uint64_t v25 = 0;
        *(_DWORD *)(DerivedStorage + 592) = 0;
        goto LABEL_47;
      }
      CFTypeID v101 = CFGetTypeID(cf);
      if (v101 == CFBooleanGetTypeID())
      {
        uint64_t v25 = 0;
        if (cf == (CFTypeRef)*MEMORY[0x1E4F1CFC8]) {
          int v102 = 2;
        }
        else {
          int v102 = 1;
        }
        *(_DWORD *)(DerivedStorage + 592) = v102;
        goto LABEL_47;
      }
      goto LABEL_235;
    }
    if (CFEqual(a3, @"PreferredVideoDecoderGPURegistryID"))
    {
      if (cf)
      {
        CFTypeID v105 = CFNumberGetTypeID();
        if (v105 != CFGetTypeID(cf))
        {
LABEL_235:
          uint64_t v25 = 4294954516;
          goto LABEL_47;
        }
      }
      if (FigCFEqual()) {
        goto LABEL_46;
      }
      CFTypeID v109 = *(const void **)(DerivedStorage + 600);
      CFTypeRef v110 = cf;
      *(void *)(DerivedStorage + 600) = cf;
      if (v110) {
        CFRetain(v110);
      }
      if (v109) {
        CFRelease(v109);
      }
LABEL_249:
      fpfs_stopResetDisturbReprepareAndResume(a1, *(const __CFArray **)(DerivedStorage + 80), 0);
      goto LABEL_46;
    }
    if (CFEqual(a3, @"GatherPerformanceHistoryArray"))
    {
      if (cf)
      {
        CFTypeID v106 = CFBooleanGetTypeID();
        if (v106 == CFGetTypeID(cf))
        {
          int v107 = CFBooleanGetValue((CFBooleanRef)cf);
          if (v107 != *(unsigned __int8 *)(DerivedStorage + 656))
          {
            *(unsigned char *)(DerivedStorage + 656) = v107;
            if (!v107)
            {
              unsigned int v108 = *(const void **)(DerivedStorage + 664);
              if (v108)
              {
                CFRelease(v108);
                uint64_t v25 = 0;
                *(void *)(DerivedStorage + 664) = 0;
                goto LABEL_47;
              }
            }
          }
          goto LABEL_46;
        }
      }
      goto LABEL_484;
    }
    if (CFEqual(a3, @"DisplayTimedMetadata"))
    {
      if (cf)
      {
        CFTypeID v111 = CFGetTypeID(cf);
        if (v111 == CFBooleanGetTypeID())
        {
          uint64_t v25 = 0;
          *(unsigned char *)(DerivedStorage + 459) = CFBooleanGetValue((CFBooleanRef)cf);
          goto LABEL_47;
        }
      }
      goto LABEL_484;
    }
    if (CFEqual(a3, @"SendToNero"))
    {
      if (!cf) {
        goto LABEL_484;
      }
      CFTypeID v112 = CFDictionaryGetTypeID();
      if (v112 != CFGetTypeID(cf)) {
        goto LABEL_484;
      }
      CFBooleanRef v113 = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)cf, @"Visuals");
      if (v113 && (CFBooleanRef v114 = v113, v115 = *(unsigned __int8 *)(DerivedStorage + 462), v115 != CFBooleanGetValue(v113)))
      {
        Boolean v123 = CFBooleanGetValue(v114);
        *(unsigned char *)(DerivedStorage + 462) = v123;
        BOOL v116 = (*(unsigned char *)(DerivedStorage + 463) | v123) == 0;
      }
      else
      {
        BOOL v116 = 1;
      }
      if (*(unsigned char *)(DerivedStorage + 462))
      {
        CFTypeID v124 = CFDictionaryGetValue((CFDictionaryRef)cf, @"NeroTransport");
        if (v124)
        {
          CFTypeID v125 = *(const void **)(DerivedStorage + 488);
          *(void *)(DerivedStorage + 488) = v124;
          CFRetain(v124);
          if (v125) {
            CFRelease(v125);
          }
        }
        else
        {
          FigSignalErrorAt();
        }
      }
      else
      {
        CFTypeID v126 = *(const void **)(DerivedStorage + 488);
        if (v126)
        {
          CFRelease(v126);
          *(void *)(DerivedStorage + 488) = 0;
        }
      }
      if (v116) {
        goto LABEL_46;
      }
      uint64_t updated = fpfs_PlayQueueCallForEachItem((uint64_t)a1, (uint64_t (*)(const __CFArray *, uint64_t))fpfsi_updateNeroChange, 0);
      if (!updated)
      {
        if (*(unsigned char *)(DerivedStorage + 462)) {
          fpfs_RTCReportingSetSendingVisualsToNero(DerivedStorage);
        }
        goto LABEL_46;
      }
      goto LABEL_485;
    }
    if (CFEqual(a3, @"NeroDisplaySize"))
    {
      if (!cf) {
        goto LABEL_484;
      }
      CFTypeID v117 = CFDictionaryGetTypeID();
      if (v117 != CFGetTypeID(cf)) {
        goto LABEL_484;
      }
      unsigned long long valuePtr = *MEMORY[0x1E4F1DB30];
      if (!CGSizeMakeWithDictionaryRepresentation((CFDictionaryRef)cf, (CGSize *)&valuePtr)) {
        goto LABEL_484;
      }
      if (*(double *)&valuePtr == *(double *)(DerivedStorage + 464)
        && *((double *)&valuePtr + 1) == *(double *)(DerivedStorage + 472))
      {
        goto LABEL_46;
      }
      *(_OWORD *)(DerivedStorage + 464) = valuePtr;
      if (!*(unsigned char *)(DerivedStorage + 462) || !*(unsigned char *)(DerivedStorage + 463) || !*(void *)(DerivedStorage + 80)) {
        goto LABEL_332;
      }
      uint64_t v118 = CMBaseObjectGetDerivedStorage();
      uint64_t v119 = v118;
      if (v118)
      {
        uint64_t v120 = *(void *)(v118 + 816);
        uint64_t v121 = *(void *)(v118 + 824);
        if (v121 && *(void *)(v121 + 32)) {
          uint64_t v25 = fpfs_setDisplaySizeAndItemVideoSizeOnTextRenderPipeline(v121, *(double *)(DerivedStorage + 464), *(double *)(DerivedStorage + 472), *(void *)(DerivedStorage + 480), *(void *)(DerivedStorage + 80));
        }
        else {
          uint64_t v25 = 0;
        }
        if (v25 || !v120)
        {
LABEL_329:
          if (v25)
          {
LABEL_333:
            fpfs_PlayQueueCallForEachItem((uint64_t)a1, (uint64_t (*)(const __CFArray *, uint64_t))fpfsi_HandleResolutionCapOrDisplaySizeChange, 0);
            goto LABEL_47;
          }
          goto LABEL_330;
        }
        if (*(void *)(v120 + 32))
        {
          uint64_t v25 = fpfs_setDisplaySizeAndItemVideoSizeOnTextRenderPipeline(v120, *(double *)(DerivedStorage + 464), *(double *)(DerivedStorage + 472), *(void *)(DerivedStorage + 480), *(void *)(DerivedStorage + 80));
          goto LABEL_329;
        }
      }
LABEL_330:
      uint64_t v139 = *(void *)(v119 + 912);
      if (v139) {
        fpfs_setDisplaySizeOnOutOfBandSubtitleController(v139, *(double *)(DerivedStorage + 464), *(double *)(DerivedStorage + 472));
      }
LABEL_332:
      uint64_t v25 = 0;
      goto LABEL_333;
    }
    if (CFEqual(a3, @"NeroVideoGravity"))
    {
      if (cf)
      {
        CFTypeID v122 = CFStringGetTypeID();
        if (v122 != CFGetTypeID(cf)) {
          goto LABEL_484;
        }
      }
      if (FigCFEqual()) {
        goto LABEL_46;
      }
      int v130 = *(const void **)(DerivedStorage + 480);
      CFTypeRef v131 = cf;
      *(void *)(DerivedStorage + 480) = cf;
      if (v131) {
        CFRetain(v131);
      }
      if (v130) {
        CFRelease(v130);
      }
      if (!*(unsigned char *)(DerivedStorage + 462) || !*(unsigned char *)(DerivedStorage + 463) || !*(void *)(DerivedStorage + 80)) {
        goto LABEL_46;
      }
      uint64_t v132 = CMBaseObjectGetDerivedStorage();
      CFTypeID v133 = (void *)v132;
      if (!v132) {
        goto LABEL_343;
      }
      uint64_t v134 = *(void *)(v132 + 792);
      if (v134 && *(void *)(v134 + 32)) {
        uint64_t v25 = fpfs_setPropertyOnPrimaryAndAuxRenderPipelines(v134, @"NeroVideoGravity", *(void *)(DerivedStorage + 480));
      }
      else {
        uint64_t v25 = 0;
      }
      uint64_t v140 = v133[103];
      if (v140 && *(void *)(v140 + 32)) {
        uint64_t v25 = fpfs_setDisplaySizeAndItemVideoSizeOnTextRenderPipeline(v140, *(double *)(DerivedStorage + 464), *(double *)(DerivedStorage + 472), *(void *)(DerivedStorage + 480), *(void *)(DerivedStorage + 80));
      }
      if (!v25)
      {
        uint64_t v141 = v133[102];
        if (v141)
        {
          if (!*(void *)(v141 + 32))
          {
LABEL_343:
            uint64_t v142 = v133[114];
            if (!v142) {
              goto LABEL_46;
            }
            uint64_t updated = FigOutOfBandTrackControllerSetProperty(v142, @"NeroVideoGravity", *(const void **)(DerivedStorage + 480));
LABEL_485:
            uint64_t v25 = updated;
            goto LABEL_47;
          }
          uint64_t v25 = fpfs_setDisplaySizeAndItemVideoSizeOnTextRenderPipeline(v141, *(double *)(DerivedStorage + 464), *(double *)(DerivedStorage + 472), *(void *)(DerivedStorage + 480), *(void *)(DerivedStorage + 80));
        }
      }
      if (v25) {
        goto LABEL_47;
      }
      goto LABEL_343;
    }
    if (CFEqual(a3, @"AllowVideoRenderingIfSendingVisualsToNero"))
    {
      if (cf)
      {
        CFTypeID v127 = CFBooleanGetTypeID();
        if (v127 == CFGetTypeID(cf))
        {
          int v128 = *(unsigned __int8 *)(DerivedStorage + 496);
          if (v128 != CFBooleanGetValue((CFBooleanRef)cf))
          {
            *(unsigned char *)(DerivedStorage + 496) = CFBooleanGetValue((CFBooleanRef)cf);
            if (*(unsigned char *)(DerivedStorage + 462))
            {
              if (*(void *)(DerivedStorage + 80))
              {
                *(void *)&long long v208 = 0;
                *(void *)&unsigned long long valuePtr = FigVisualContextGetTypeID();
                uint64_t v129 = -1;
                if (*(unsigned char *)(DerivedStorage + 496)) {
                  uint64_t v129 = 1;
                }
                *((void *)&valuePtr + 1) = v129;
                fpfsi_handleVideoOutputsChanged(*(const __CFArray **)(DerivedStorage + 80), (uint64_t *)&valuePtr);
              }
            }
          }
        }
      }
      goto LABEL_46;
    }
    if (CFEqual(a3, @"AutoSwitchStreamQuality"))
    {
      if (!cf) {
        goto LABEL_484;
      }
      CFTypeID v135 = CFGetTypeID(cf);
      if (v135 != CFBooleanGetTypeID()) {
        goto LABEL_484;
      }
      *(unsigned char *)(DerivedStorage + 458) = CFBooleanGetValue((CFBooleanRef)cf);
      uint64_t v75 = fpfsi_setPlaybackMonitorAutoSwitchStreamQuality;
      goto LABEL_149;
    }
    if (CFEqual(a3, @"ClientSuspended"))
    {
      if (cf)
      {
        CFTypeID v136 = CFBooleanGetTypeID();
        if (v136 == CFGetTypeID(cf))
        {
          *(unsigned char *)(DerivedStorage + 50) = CFBooleanGetValue((CFBooleanRef)cf);
          fpfs_UnlockAndPostNotificationsWithCaller(a1);
          if (*(unsigned char *)(DerivedStorage + 50))
          {
            int v137 = 0;
          }
          else if (*(unsigned char *)(DerivedStorage + 48) && *(_DWORD *)(DerivedStorage + 32) != 2)
          {
            int v137 = 1;
          }
          else
          {
            int v137 = 2;
          }
          return fpfs_updatePlayerActiveState(a1, v137);
        }
      }
      goto LABEL_484;
    }
    if (CFEqual(a3, @"SystemWillSleep"))
    {
      if (cf)
      {
        CFTypeID v138 = CFBooleanGetTypeID();
        if (v138 == CFGetTypeID(cf))
        {
          if (CFBooleanGetValue((CFBooleanRef)cf)) {
            fpfs_DoAnyItemsHaveFairPlayEncryptedContent();
          }
          goto LABEL_46;
        }
      }
      goto LABEL_484;
    }
    if (CFEqual(a3, @"SystemHasPoweredOn"))
    {
      if (cf)
      {
        CFBooleanGetTypeID();
        CFGetTypeID(cf);
      }
      goto LABEL_484;
    }
    if (CFEqual(a3, @"DisplayList"))
    {
      if (cf)
      {
        CFTypeID v143 = CFArrayGetTypeID();
        if (v143 != CFGetTypeID(cf)) {
          goto LABEL_484;
        }
        CFAllocatorRef v144 = (const __CFAllocator *)FigGetAllocatorForMedia();
        CFArrayRef Copy = CFArrayCreateCopy(v144, (CFArrayRef)cf);
        if (!Copy)
        {
          uint64_t v25 = 4294954510;
          goto LABEL_47;
        }
        BOOL shouldApplyResolutionCapForBuiltinDisplay = fpfs_shouldApplyResolutionCapForBuiltinDisplay();
        uint64_t v198 = *(const void **)(DerivedStorage + 672);
        *(void *)(DerivedStorage + 672) = Copy;
        CFRetain(Copy);
        char v202 = 0;
      }
      else
      {
        BOOL shouldApplyResolutionCapForBuiltinDisplay = fpfs_shouldApplyResolutionCapForBuiltinDisplay();
        CFArrayRef Copy = 0;
        uint64_t v198 = *(const void **)(DerivedStorage + 672);
        *(void *)(DerivedStorage + 672) = 0;
        char v202 = 1;
      }
      if (v198) {
        CFRelease(v198);
      }
      if ((v202 & 1) == 0) {
        CFRelease(Copy);
      }
      if (!fpfs_PlayQueueCallForEachItem((uint64_t)a1, (uint64_t (*)(const __CFArray *, uint64_t))fpfsi_updateDisplayListOnCryptors, 0)&& !fpfs_PlayQueueCallForEachItem((uint64_t)a1, (uint64_t (*)(const __CFArray *, uint64_t))fpfsi_updateDisplayListForHDCPMonitor, 0)&& !fpfs_PlayQueueCallForEachItem((uint64_t)a1, (uint64_t (*)(const __CFArray *, uint64_t))fpfsi_updateDisplayListForVideoRangeMonitors, 0)&& (shouldApplyResolutionCapForBuiltinDisplay == fpfs_shouldApplyResolutionCapForBuiltinDisplay()|| !fpfs_PlayQueueCallForEachItem((uint64_t)a1, (uint64_t (*)(const __CFArray *, uint64_t))fpfsi_HandleResolutionCapOrDisplaySizeChange, 0)))
      {
        goto LABEL_46;
      }
      goto LABEL_484;
    }
    if (CFEqual(a3, @"OverrideDisplaySupportedVideoRange"))
    {
      if (!cf) {
        goto LABEL_484;
      }
      CFTypeID v146 = CFNumberGetTypeID();
      if (v146 != CFGetTypeID(cf)) {
        goto LABEL_484;
      }
      LODWORD(valuePtr) = 0;
      CFNumberGetValue((CFNumberRef)cf, kCFNumberSInt32Type, &valuePtr);
      if (valuePtr >= 6) {
        goto LABEL_484;
      }
      *(_DWORD *)(DerivedStorage + 680) = valuePtr;
      uint64_t v75 = fpfsi_setOverrideDisplaysSupportedVideoRangeForEachItem;
LABEL_149:
      CMTime v64 = (uint64_t (*)(const __CFArray *, uint64_t))v75;
      uint64_t v66 = (uint64_t)a1;
      uint64_t v65 = 0;
      goto LABEL_110;
    }
    if (CFEqual(a3, @"MediaSelectionCriteria"))
    {
      if (cf)
      {
        CFTypeID v147 = CFDictionaryGetTypeID();
        if (v147 != CFGetTypeID(cf)) {
          goto LABEL_484;
        }
      }
      if (FigCFEqual()) {
        goto LABEL_497;
      }
      uint64_t v199 = *(const void **)(DerivedStorage + 688);
      CFTypeRef v200 = cf;
      *(void *)(DerivedStorage + 688) = cf;
      if (!v200) {
        goto LABEL_494;
      }
      goto LABEL_493;
    }
    if (CFEqual(a3, @"LegibleFallbackMediaSelectionCriteria"))
    {
      if (cf)
      {
        CFTypeID v148 = CFDictionaryGetTypeID();
        if (v148 != CFGetTypeID(cf)) {
          goto LABEL_484;
        }
      }
      if (FigCFEqual()) {
        goto LABEL_497;
      }
      uint64_t v199 = *(const void **)(DerivedStorage + 696);
      CFTypeRef v200 = cf;
      *(void *)(DerivedStorage + 696) = cf;
      if (!v200) {
        goto LABEL_494;
      }
LABEL_493:
      CFRetain(v200);
LABEL_494:
      if (v199) {
        CFRelease(v199);
      }
      goto LABEL_497;
    }
    if (CFEqual(a3, @"AllowsLegibleFallbackMediaSelectionCriteriaForAllAudibleMediaSelections"))
    {
      if (!cf) {
        goto LABEL_484;
      }
      CFTypeID v149 = CFGetTypeID(cf);
      if (v149 != CFBooleanGetTypeID()) {
        goto LABEL_484;
      }
      int v150 = *(unsigned char *)(DerivedStorage + 704) != 0;
      int v151 = CFBooleanGetValue((CFBooleanRef)cf);
      *(unsigned char *)(DerivedStorage + 704) = v151;
      if (v151 == v150) {
        goto LABEL_46;
      }
LABEL_497:
      fpfs_applyAutoSelectionCriteria(a1);
      goto LABEL_46;
    }
    if (CFEqual(a3, @"AppliesMediaSelectionCriteriaAutomatically"))
    {
      if (!cf) {
        goto LABEL_484;
      }
      CFTypeID v152 = CFGetTypeID(cf);
      if (v152 != CFBooleanGetTypeID()) {
        goto LABEL_484;
      }
      int v153 = *(unsigned __int8 *)(DerivedStorage + 705);
      int v154 = CFBooleanGetValue((CFBooleanRef)cf);
      uint64_t v25 = 0;
      *(unsigned char *)(DerivedStorage + 705) = v154;
      if (!v154 || v153) {
        goto LABEL_47;
      }
      goto LABEL_497;
    }
    if (CFEqual(a3, @"MinRateForAudioPlayback"))
    {
      if (!cf)
      {
        uint64_t v156 = *(void *)(DerivedStorage + 708);
        int v157 = *(_DWORD *)(DerivedStorage + 716);
        *(unsigned char *)(DerivedStorage + 708) = 0;
        goto LABEL_500;
      }
      CFTypeID v155 = CFNumberGetTypeID();
      if (v155 != CFGetTypeID(cf)) {
        goto LABEL_484;
      }
      uint64_t v156 = *(void *)(DerivedStorage + 708);
      int v157 = *(_DWORD *)(DerivedStorage + 716);
      CFTypeID v158 = CFNumberGetTypeID();
      if (v158 != CFGetTypeID(cf)) {
        goto LABEL_500;
      }
      *(unsigned char *)(DerivedStorage + 708) = 1;
      CFNumberRef v159 = (const __CFNumber *)cf;
      CMTime v160 = (void *)(DerivedStorage + 712);
    }
    else
    {
      if (!CFEqual(a3, @"MaxRateForAudioPlayback"))
      {
        if (CFEqual(a3, @"AllowPixelBufferPoolSharing"))
        {
          if (cf)
          {
            CFTypeID v163 = CFGetTypeID(cf);
            if (v163 == CFBooleanGetTypeID() || (CFTypeID v164 = CFGetTypeID(cf), v164 == CFNumberGetTypeID()))
            {
              uint64_t v25 = *(void *)(DerivedStorage + 624);
              CFTypeRef v165 = cf;
              *(void *)(DerivedStorage + 624) = cf;
              CFRetain(v165);
              if (!v25) {
                goto LABEL_47;
              }
              CFRelease((CFTypeRef)v25);
              goto LABEL_46;
            }
          }
          goto LABEL_484;
        }
        if (CFEqual(a3, @"AllowOutOfBandTextTrackRendering"))
        {
          if (!cf) {
            goto LABEL_484;
          }
          CFTypeID v166 = CFGetTypeID(cf);
          if (v166 != CFBooleanGetTypeID()) {
            goto LABEL_484;
          }
          int v167 = CFBooleanGetValue((CFBooleanRef)cf);
          if (v167 == *(unsigned __int8 *)(DerivedStorage + 720)) {
            goto LABEL_46;
          }
          *(unsigned char *)(DerivedStorage + 720) = v167;
          goto LABEL_249;
        }
        if (CFEqual(a3, @"MultichannelAudioStrategy"))
        {
          if (cf)
          {
            CFTypeID v168 = CFStringGetTypeID();
            if (v168 == CFGetTypeID(cf))
            {
              if (!FigCFEqual()
                && (CFEqual(cf, @"MatchMultichannelTrackPreferenceToAudioDevice")
                 || CFEqual(cf, @"PreferAC3ViaExclusivePassthrough")
                 || CFEqual(cf, @"PreferExclusivePassthrough")
                 || CFEqual(cf, @"PreferStereo")))
              {
                fpfs_setMultiAudioChannelStrategy((uint64_t)a1, cf);
              }
              goto LABEL_46;
            }
          }
          goto LABEL_484;
        }
        if (CFEqual(a3, @"BandwidthCap"))
        {
          int v169 = (int)cf;
          if (cf)
          {
            CFTypeID v170 = CFNumberGetTypeID();
            if (v170 != CFGetTypeID(cf)) {
              goto LABEL_484;
            }
            LODWORD(valuePtr) = 0;
            CFNumberGetValue((CFNumberRef)cf, kCFNumberSInt32Type, &valuePtr);
            int v169 = valuePtr;
          }
          else
          {
            LODWORD(valuePtr) = 0;
          }
          *(_DWORD *)(DerivedStorage + 748) = v169;
          uint64_t v201 = (uint64_t (*)(uint64_t))fpfsi_UpdateBandwidthCap;
        }
        else if (CFEqual(a3, @"PreferredMaximumBufferDuration"))
        {
          int v171 = (int)cf;
          if (cf)
          {
            CFTypeID v172 = CFNumberGetTypeID();
            if (v172 != CFGetTypeID(cf)) {
              goto LABEL_484;
            }
            LODWORD(valuePtr) = 0;
            CFNumberGetValue((CFNumberRef)cf, kCFNumberSInt32Type, &valuePtr);
            int v171 = valuePtr;
            if ((valuePtr & 0x80000000) != 0) {
              goto LABEL_484;
            }
          }
          else
          {
            LODWORD(valuePtr) = 0;
          }
          *(_DWORD *)(DerivedStorage + 752) = v171;
          uint64_t v201 = (uint64_t (*)(uint64_t))fpfsi_UpdateHighWaterSecs;
        }
        else
        {
          if (!CFEqual(a3, @"MaximumTrailingBufferDuration"))
          {
            if (CFEqual(a3, @"ReleaseResourcesWhenPaused"))
            {
              uint64_t updated = fpfs_SetReleaseResourcesWhenPaused((uint64_t)a1, cf == (CFTypeRef)*MEMORY[0x1E4F1CFD0]);
              goto LABEL_485;
            }
            if (CFEqual(a3, @"ResourceConservationLevelWhenPaused"))
            {
              if (cf)
              {
                CFTypeID v175 = CFNumberGetTypeID();
                if (v175 != CFGetTypeID(cf)) {
                  goto LABEL_484;
                }
                LODWORD(valuePtr) = 0;
                CFNumberGetValue((CFNumberRef)cf, kCFNumberSInt32Type, &valuePtr);
                int v176 = valuePtr;
              }
              else
              {
                int v176 = 0;
                LODWORD(valuePtr) = 0;
              }
              uint64_t updated = fpfs_SetResourceConservationLevelWhenPaused((uint64_t)a1, v176);
              goto LABEL_485;
            }
            if (CFEqual(a3, @"PlayerRole"))
            {
              if (cf)
              {
                if (CFEqual(cf, @"Scanning"))
                {
                  uint64_t v177 = (uint64_t)a1;
                  int v178 = 1;
                }
                else
                {
                  if (!CFEqual(cf, @"PIP")) {
                    goto LABEL_46;
                  }
                  uint64_t v177 = (uint64_t)a1;
                  int v178 = 2;
                }
              }
              else
              {
                uint64_t v177 = (uint64_t)a1;
                int v178 = 0;
              }
              uint64_t updated = fpfs_SetPlayerRole(v177, v178);
              goto LABEL_485;
            }
            if (CFEqual(a3, @"LimitsBandwidthForCellularAccess"))
            {
              CFTypeRef v179 = cf;
              if (cf)
              {
                CFTypeID v180 = CFBooleanGetTypeID();
                if (v180 != CFGetTypeID(cf)) {
                  goto LABEL_484;
                }
                CFTypeRef v179 = cf;
              }
              uint64_t v25 = 0;
              *(unsigned char *)(DerivedStorage + 768) = v179 != (CFTypeRef)*MEMORY[0x1E4F1CFC8];
              goto LABEL_47;
            }
            if (CFEqual(a3, @"BufferedAirPlayOutput"))
            {
              CFTypeRef v181 = cf;
              if (cf)
              {
                uint64_t v182 = FigBufferedAirPlayOutputGetTypeID();
                if (v182 != CFGetTypeID(cf)) {
                  goto LABEL_484;
                }
                CFTypeRef v181 = cf;
              }
              if (*(CFTypeRef *)(DerivedStorage + 504) == v181) {
                goto LABEL_46;
              }
              uint64_t v183 = CMBaseObjectGetDerivedStorage();
              if (*(void *)(CMBaseObjectGetDerivedStorage() + 504))
              {
                CMNotificationCenterGetDefaultLocalCenter();
                FigNotificationCenterRemoveWeakListener();
              }
              fpfs_PlayQueueCallForEachItem((uint64_t)a1, (uint64_t (*)(const __CFArray *, uint64_t))fpfsi_ClearAudioRenderChains, 0);
              fpfs_ResetAudioHardwareFormat((uint64_t)a1);
              unsigned int v184 = *(const void **)(DerivedStorage + 504);
              CFTypeRef v185 = cf;
              *(void *)(DerivedStorage + 504) = cf;
              if (v185) {
                CFRetain(v185);
              }
              if (v184) {
                CFRelease(v184);
              }
              fpfsi_RTCReportingUpdateBufferedAirPlayOutput(v183, *(void *)(DerivedStorage + 504) != 0);
              if (*(void *)(CMBaseObjectGetDerivedStorage() + 504))
              {
                CMNotificationCenterGetDefaultLocalCenter();
                FigNotificationCenterAddWeakListener();
              }
              LOBYTE(valuePtr) = 1;
              goto LABEL_231;
            }
            if (CFEqual(a3, @"AutomaticallyWaitsToMinimizeStalling"))
            {
              if (cf)
              {
                CFTypeID v186 = CFBooleanGetTypeID();
                if (v186 == CFGetTypeID(cf))
                {
                  uint64_t v187 = CMBaseObjectGetDerivedStorage();
                  unsigned int v188 = CFBooleanGetValue((CFBooleanRef)cf);
                  *(unsigned char *)(DerivedStorage + 160) = v188;
                  if (v187)
                  {
                    fpfsi_RTCReportingUpdateAutomaticallyWaitsToMinimizeStalling(v187, v188);
                    unsigned int v188 = *(unsigned __int8 *)(DerivedStorage + 160);
                  }
                  if (!v188)
                  {
                    uint64_t v189 = *(void *)(DerivedStorage + 80);
                    if (v189) {
                      fpfs_CheckPrebufferedLevels(v189, 1, -1, 0, (uint64_t)&valuePtr);
                    }
                  }
                  goto LABEL_46;
                }
              }
              goto LABEL_484;
            }
            if (CFEqual(a3, @"CaptionPlaybackStrategy"))
            {
              if (cf)
              {
                CFTypeID v190 = CFStringGetTypeID();
                if (v190 == CFGetTypeID(cf))
                {
                  if (CFEqual(cf, @"CoreTextSubtitleRenderer"))
                  {
                    uint64_t v25 = 0;
                    *(unsigned char *)(DerivedStorage + 461) = 1;
                    goto LABEL_47;
                  }
                  if (CFEqual(cf, @"CaptionDisplayService"))
                  {
                    uint64_t v25 = 0;
                    *(unsigned char *)(DerivedStorage + 461) = 0;
                    goto LABEL_47;
                  }
                }
              }
              goto LABEL_484;
            }
            if (CFEqual(a3, @"CaptionPipelineStrategy"))
            {
              if (cf)
              {
                CFTypeID v191 = CFStringGetTypeID();
                if (v191 == CFGetTypeID(cf))
                {
                  if (CFEqual(cf, @"CFAttributedStrings"))
                  {
                    uint64_t v25 = 0;
                    *(unsigned char *)(DerivedStorage + 460) = 1;
                    goto LABEL_47;
                  }
                  if (CFEqual(cf, @"FigCaptions"))
                  {
                    uint64_t v25 = 0;
                    *(unsigned char *)(DerivedStorage + 460) = 0;
                    goto LABEL_47;
                  }
                }
              }
              goto LABEL_484;
            }
            if (CFEqual(a3, @"AutomaticallyResumesRenderingAfterConfigurationChange"))
            {
              if (cf)
              {
                CFTypeID v192 = CFGetTypeID(cf);
                if (v192 == CFBooleanGetTypeID())
                {
                  uint64_t v25 = 0;
                  *(unsigned char *)(DerivedStorage + 568) = cf == (CFTypeRef)*MEMORY[0x1E4F1CFD0];
                  goto LABEL_47;
                }
              }
              goto LABEL_484;
            }
            if (!CFEqual(a3, @"SuppressAudioRendering"))
            {
              if (!CFEqual(a3, @"VideoTargetArray"))
              {
                uint64_t v25 = 4294954512;
                goto LABEL_47;
              }
              if (cf)
              {
                CFTypeID v195 = CFGetTypeID(cf);
                if (v195 != CFArrayGetTypeID()) {
                  goto LABEL_484;
                }
                CFArrayRef v196 = (const __CFArray *)cf;
              }
              else
              {
                CFArrayRef v196 = 0;
              }
              uint64_t updated = fpfs_setVideoTargetArray((uint64_t)a1, v196);
              goto LABEL_485;
            }
            if (!cf) {
              goto LABEL_484;
            }
            CFTypeID v193 = CFGetTypeID(cf);
            if (v193 != CFBooleanGetTypeID()) {
              goto LABEL_484;
            }
            int v194 = cf == (CFTypeRef)*MEMORY[0x1E4F1CFD0];
            if (*(unsigned __int8 *)(DerivedStorage + 523) == v194) {
              goto LABEL_46;
            }
            *(unsigned char *)(DerivedStorage + 523) = v194;
            goto LABEL_249;
          }
          if (cf)
          {
            CFTypeID v173 = CFNumberGetTypeID();
            if (v173 != CFGetTypeID(cf)) {
              goto LABEL_484;
            }
            LODWORD(valuePtr) = 0;
            CFNumberGetValue((CFNumberRef)cf, kCFNumberSInt32Type, &valuePtr);
            int v174 = valuePtr;
          }
          else
          {
            int v174 = -1;
            LODWORD(valuePtr) = -1;
          }
          *(_DWORD *)(DerivedStorage + 756) = v174;
          uint64_t v201 = (uint64_t (*)(uint64_t))fpfsi_UpdateCacheBehindSecs;
        }
        uint64_t updated = fpfs_UpdatePlayerOverrideForAllItems(DerivedStorage, v201);
        goto LABEL_485;
      }
      if (!cf)
      {
        uint64_t v156 = *(void *)(DerivedStorage + 708);
        int v157 = *(_DWORD *)(DerivedStorage + 716);
        *(unsigned char *)(DerivedStorage + 709) = 0;
        goto LABEL_500;
      }
      CFTypeID v161 = CFNumberGetTypeID();
      if (v161 != CFGetTypeID(cf)) {
        goto LABEL_484;
      }
      uint64_t v156 = *(void *)(DerivedStorage + 708);
      int v157 = *(_DWORD *)(DerivedStorage + 716);
      CFTypeID v162 = CFNumberGetTypeID();
      if (v162 != CFGetTypeID(cf)) {
        goto LABEL_500;
      }
      CMTime v160 = (void *)(DerivedStorage + 716);
      *(unsigned char *)(DerivedStorage + 709) = 1;
      CFNumberRef v159 = (const __CFNumber *)cf;
    }
    CFNumberGetValue(v159, kCFNumberFloat32Type, v160);
LABEL_500:
    fpfs_handlePlayerAudibleRateRangeChangeIfNecessary(a1, v156, v157);
    goto LABEL_46;
  }

  return FigSignalErrorAt();
}

uint64_t fpfs_setClientVideoLayerArray(uint64_t a1, const __CFArray *a2)
{
  v46[16] = *MEMORY[0x1E4F143B8];
  CFArrayRef v4 = (void *)MEMORY[0x199711A30]();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFArrayRef v6 = *(const __CFArray **)(DerivedStorage + 80);
  uint64_t v7 = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  *(unsigned char *)(DerivedStorage + 456) = 1;
  if (FigCFEqual())
  {
    CFMutableArrayRef Mutable = 0;
    CFArrayRef v9 = 0;
    CFTypeRef v10 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    goto LABEL_49;
  }
  if (a2) {
    uint64_t Count = CFArrayGetCount(a2);
  }
  else {
    uint64_t Count = 0;
  }
  uint64_t v41 = v7;
  CFArrayRef v16 = *(const __CFArray **)(DerivedStorage + 376);
  if (v16) {
    CFIndex v17 = CFArrayGetCount(v16);
  }
  else {
    CFIndex v17 = 0;
  }
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFMutableArrayRef Mutable = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D510]);
  if (Mutable)
  {
    CFAllocatorRef v19 = (const __CFAllocator *)FigGetAllocatorForMedia();
    CFArrayRef v9 = CFArrayCreateMutable(v19, 0, MEMORY[0x1E4F1D510]);
    if (v9)
    {
      CFTypeID v44 = (const void *)a1;
      if (Count >= 1)
      {
        for (CFIndex i = 0; i != Count; ++i)
        {
          CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(a2, i);
          CFArrayRef v22 = *(const __CFArray **)(DerivedStorage + 376);
          if (!v22
            || (v47.location = 0,
                v47.length = v17,
                int v23 = CFArrayContainsValue(v22, v47, ValueAtIndex),
                int v24 = Mutable,
                !v23))
          {
            int v24 = v9;
          }
          CFArrayAppendValue(v24, ValueAtIndex);
        }
      }
      v48.length = CFArrayGetCount(v9);
      v48.location = 0;
      CFArrayAppendArray(Mutable, v9, v48);
      a1 = (uint64_t)v44;
      fpfs_ensureTransaction((uint64_t)v44, (uint64_t *)&cf);
      CFTypeRef v10 = CFRetain(v44);
      fpfs_disassociatePlayerVideoLayer((uint64_t)v44, 1);
      uint64_t v42 = *(void *)(DerivedStorage + 376);
      uint64_t v43 = *(void *)(DerivedStorage + 384);
      *(void *)(DerivedStorage + 384) = 0;
      CFArrayRef v25 = (const __CFArray *)CFRetain(Mutable);
      *(void *)(DerivedStorage + 376) = v25;
      if (v25 && CFArrayGetCount(v25) >= 1)
      {
        CFArrayRef v39 = v6;
        CFBooleanRef v40 = v4;
        CFAllocatorRef v26 = (const __CFAllocator *)FigGetAllocatorForMedia();
        uint64_t v11 = CFArrayCreateMutable(v26, Count, MEMORY[0x1E4F1D510]);
        if (Count >= 1)
        {
          uint64_t v27 = Count;
          while (1)
          {
            uint64_t v28 = [[FigVideoLayer alloc] initWithDeferredTransaction:*(void *)(DerivedStorage + 816)];
            if (!v28) {
              break;
            }
            CFDictionaryRef v29 = v28;
            if (*(unsigned char *)(DerivedStorage + 392)) {
              FBLSupportAppendDeferredTransactionChangeToSetAllowsDisplayCompositing(*(const void **)(DerivedStorage + 816), v28, 0, (uint64_t)"fpfs_setClientVideoLayerArray");
            }
            CFArrayAppendValue(v11, v29);
            if (!--v27) {
              goto LABEL_25;
            }
          }
          uint64_t v14 = 4294954434;
          CFArrayRef v4 = v40;
          a1 = (uint64_t)v44;
          goto LABEL_41;
        }
LABEL_25:
        FPSupport_AppendDeferredTransactionChangeToRelease(*(const void **)(DerivedStorage + 816), *(void *)(DerivedStorage + 384), (uint64_t)"fpfs_setClientVideoLayerArray");
        if (v11)
        {
          *(void *)(DerivedStorage + 384) = CFRetain(v11);
          CFRelease(v11);
        }
        else
        {
          *(void *)(DerivedStorage + 384) = 0;
        }
        CFArrayRef v4 = v40;
        CFDictionaryRef v30 = (const void *)FigCFCopyCompactDescription();
        uint64_t v31 = FigCFCopyCompactDescription();
        CFNumberRef v32 = (const void *)v31;
        if (dword_1E9350BB0)
        {
          CFTypeID v38 = (const void *)v31;
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          CFNumberRef v32 = v38;
        }
        if (v30) {
          CFRelease(v30);
        }
        a1 = (uint64_t)v44;
        CFArrayRef v6 = v39;
        if (v32) {
          CFRelease(v32);
        }
        FPSupport_AppendDeferredTransactionChangeForAttachingFigVideoLayersToClientLayers(*(const void **)(DerivedStorage + 816), *(const __CFArray **)(DerivedStorage + 376), *(CFArrayRef *)(DerivedStorage + 384), (uint64_t)"fpfs_setClientVideoLayerArray");
      }
      if (*(void *)(DerivedStorage + 80)) {
        fpfsi_removeLayerSync();
      }
      uint64_t v34 = Count - v17;
      if (!v34
        || (v46[2] = 0,
            v46[0] = CAImageQueueGetTypeID(),
            v46[1] = v34,
            uint64_t v35 = fpfs_PlayQueueCallForEachItem(a1, (uint64_t (*)(const __CFArray *, uint64_t))fpfsi_handleVideoOutputsChanged, (uint64_t)v46), !v35))
      {
        uint64_t v13 = v43;
        if (v6)
        {
          uint64_t v36 = fpfsi_assignCAImageQueuesToLayers(v6);
          if (v36)
          {
            uint64_t v14 = v36;
            uint64_t v11 = 0;
            goto LABEL_48;
          }
          fpfs_createOrUpdateLayerSync(a1);
          if (!*(void *)(v41 + 688)) {
            FigSyncMomentSourceCreateWithDispatchQueue((uint64_t)fpfsi_syncMomentSourceCallback, (uint64_t)v6, *(const void **)(v41 + 576), *(NSObject **)(v41 + 600), (uint64_t *)(v41 + 688));
          }
        }
        uint64_t v11 = 0;
        uint64_t v14 = 0;
        goto LABEL_48;
      }
      uint64_t v14 = v35;
      uint64_t v11 = 0;
LABEL_41:
      uint64_t v13 = v43;
LABEL_48:
      uint64_t v12 = v42;
      goto LABEL_49;
    }
    uint64_t v14 = FigSignalErrorAt();
  }
  else
  {
    uint64_t v14 = FigSignalErrorAt();
    CFArrayRef v9 = 0;
  }
  CFTypeRef v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
LABEL_49:
  FPSupport_AppendDeferredTransactionChangeToRelease(*(const void **)(DerivedStorage + 816), v12, (uint64_t)"fpfs_setClientVideoLayerArray");
  FPSupport_AppendDeferredTransactionChangeToRelease(*(const void **)(DerivedStorage + 816), v13, (uint64_t)"fpfs_setClientVideoLayerArray");
  FPSupport_AppendDeferredTransactionChangeToRelease(*(const void **)(DerivedStorage + 816), (uint64_t)v11, (uint64_t)"fpfs_setClientVideoLayerArray");
  fpfs_commitTransaction(a1, (uint64_t)cf);
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  if (v9) {
    CFRelease(v9);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v10) {
    CFRelease(v10);
  }
  return v14;
}

uint64_t fpfs_setVolume(const void *a1, const __CFNumber *a2)
{
  keys[1] = *(void **)MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFArrayRef Next = fpfs_getNext(DerivedStorage, 0);
  float valuePtr = 0.0;
  if (a2 && (CFArrayRef v6 = Next, v7 = CFGetTypeID(a2), v7 == CFNumberGetTypeID()))
  {
    CFNumberGetValue(a2, kCFNumberFloat32Type, &valuePtr);
    if (valuePtr == *(float *)(DerivedStorage + 104)) {
      return 0;
    }
    values = a2;
    keys[0] = @"AVController_Volume";
    CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    CFDictionaryRef v9 = CFDictionaryCreate(AllocatorForMedia, (const void **)keys, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    *(float *)(DerivedStorage + 104) = valuePtr;
    if (v6 && (uint64_t v10 = *(void *)(CMBaseObjectGetDerivedStorage() + 1048)) != 0)
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      do
      {
        uint64_t v13 = *(void *)(v10 + 96);
        if (v13)
        {
          if (*(_DWORD *)(v10 + 32) == 1936684398 && v13 != v11)
          {
            uint64_t v12 = fpfs_setPropertyOnPrimaryAndAuxRenderPipelines(v13, @"SoftwareVolume1", (uint64_t)a2);
            uint64_t v11 = *(void *)(v10 + 96);
          }
        }
        uint64_t v10 = *(void *)(v10 + 8);
      }
      while (v10);
    }
    else
    {
      uint64_t v12 = 0;
    }
    fpfs_EnqueueNotification(a1, @"VolumeDidChange", a1, v9);
    if (v9) {
      CFRelease(v9);
    }
    return v12;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t fpfs_setMuted(const void *a1, const void *a2)
{
  uint64_t v14 = a2;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2) {
    return 4294954436;
  }
  uint64_t v5 = DerivedStorage;
  CFTypeID TypeID = CFBooleanGetTypeID();
  if (TypeID != CFGetTypeID(a2)) {
    return 4294954436;
  }
  int Value = CFBooleanGetValue((CFBooleanRef)a2);
  if (*(unsigned __int8 *)(v5 + 521) == Value) {
    return 0;
  }
  int v8 = Value;
  *(unsigned char *)(v5 + 521) = Value;
  uint64_t result = fpfsi_UpdateResourceSpecifierOnResourceArbiter(*(void *)(v5 + 80));
  if (!result)
  {
    uint64_t result = fpfs_PlayQueueCallForEachItem((uint64_t)a1, (uint64_t (*)(const __CFArray *, uint64_t))fpfsi_setMutedApply, (uint64_t)&v14);
    if (!result)
    {
      CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
      CFMutableArrayRef Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      uint64_t v12 = Mutable;
      uint64_t v13 = (const void **)MEMORY[0x1E4F1CFC8];
      if (v8) {
        uint64_t v13 = (const void **)MEMORY[0x1E4F1CFD0];
      }
      CFDictionarySetValue(Mutable, @"CurrentMuted", *v13);
      FigPropertyStorageSetValue(*(void *)(v5 + 16), @"PlayerMuted", v14);
      fpfs_EnqueueNotification(a1, @"MutedDidChange", a1, v12);
      if (v12) {
        CFRelease(v12);
      }
      return 0;
    }
  }
  return result;
}

uint64_t fpfs_setEQPreset(uint64_t a1, int a2)
{
  *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 172) = a2;

  return fpfs_applyEQPreset(a1, 0, 0);
}

void fpfs_AdvanceToNextItemIfNecessary()
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFArrayRef Next = fpfs_getNext(DerivedStorage, 0);
  if (Next)
  {
    CFArrayRef v2 = Next;
    uint64_t v3 = CMBaseObjectGetDerivedStorage();
    fpfs_GetNextTimeToPlay(v3, 0, (uint64_t)&time1);
    CMTimeValue value = time1.value;
    CMTimeFlags flags = time1.flags;
    CMTimeScale timescale = time1.timescale;
    CMTimeEpoch epoch = time1.epoch;
    fpfsi_PredictedEndTime(v2, &time1);
    CMTimeValue v17 = time1.value;
    CMTimeFlags v6 = time1.flags;
    CMTimeScale v18 = time1.timescale;
    CMTimeEpoch v7 = time1.epoch;
    uint64_t v8 = *(unsigned int *)(DerivedStorage + 632);
    uint64_t v9 = *(void *)(DerivedStorage + 80);
    CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 72));
    uint64_t v11 = v9 ? Count + 1 : Count;
    if (!FigPlaybackGetEffectiveActionAtEnd(v8, v11))
    {
      if ((flags & 0x1F) == 3 || (v6 & 0x1F) == 3)
      {
        memset(&time1, 0, sizeof(time1));
        rhs.CMTimeEpoch epoch = v7;
        lhs.CMTimeValue value = value;
        lhs.CMTimeScale timescale = timescale;
        lhs.CMTimeFlags flags = flags;
        lhs.CMTimeEpoch epoch = epoch;
        rhs.CMTimeValue value = v17;
        rhs.CMTimeScale timescale = v18;
        rhs.CMTimeFlags flags = v6;
        CMTimeSubtract(&time, &lhs, &rhs);
        CMTimeAbsoluteValue(&time1, &time);
        CMTimeMake(&v12, 1, 1000000000);
        CMTime lhs = time1;
        if (CMTimeCompare(&lhs, &v12) <= 0) {
          goto LABEL_10;
        }
      }
      time1.CMTimeValue value = value;
      time1.CMTimeScale timescale = timescale;
      time1.CMTimeFlags flags = flags;
      time1.CMTimeEpoch epoch = epoch;
      lhs.CMTimeValue value = v17;
      lhs.CMTimeScale timescale = v18;
      lhs.CMTimeFlags flags = v6;
      lhs.CMTimeEpoch epoch = v7;
      if ((CMTimeCompare(&time1, &lhs) & 0x80000000) == 0) {
LABEL_10:
      }
        fpfs_StopPlayingItem(DerivedStorage, v2, 0);
    }
  }
}

void fpfs_setCachedRouteInfo()
{
  CFBooleanRef v13 = 0;
  CFBooleanRef BOOLean = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(void *)(DerivedStorage + 536))
  {
    Boolean Value = 0;
    *(unsigned char *)(DerivedStorage + 561) = 0;
    goto LABEL_17;
  }
  if (FigAudioCodecTypeIsDecodable())
  {
    uint64_t v1 = *(void *)(DerivedStorage + 536);
    uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
    if (v1)
    {
      uint64_t v3 = AllocatorForMedia;
      uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v4)
      {
        uint64_t v5 = *(unsigned int (**)(uint64_t, void, uint64_t, CFBooleanRef *))(v4 + 48);
        if (v5)
        {
          if (!v5(v1, *MEMORY[0x1E4F76338], v3, &BOOLean) && BOOLean != 0) {
            *(unsigned char *)(DerivedStorage + 561) = CFBooleanGetValue(BOOLean);
          }
        }
      }
    }
  }
  uint64_t v7 = *(void *)(DerivedStorage + 536);
  uint64_t v8 = FigGetAllocatorForMedia();
  if (v7)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v10)
    {
      uint64_t v11 = *(unsigned int (**)(uint64_t, void, uint64_t, CFBooleanRef *))(v10 + 48);
      if (v11)
      {
        if (!v11(v7, *MEMORY[0x1E4F75E48], v9, &v13))
        {
          Boolean Value = CFBooleanGetValue(v13);
LABEL_17:
          *(unsigned char *)(DerivedStorage + 562) = Value;
        }
      }
    }
  }
  if (BOOLean) {
    CFRelease(BOOLean);
  }
  if (v13) {
    CFRelease(v13);
  }
}

void fpfs_FetchClientBundleIdentifierFromAudioSession(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)(DerivedStorage + 536))
  {
    uint64_t v3 = DerivedStorage;
    uint64_t v4 = malloc_type_calloc(1uLL, 0x10uLL, 0x20040A4A59CD2uLL);
    if (v4)
    {
      uint64_t v5 = v4;
      if (a1) {
        CFTypeRef v6 = CFRetain(a1);
      }
      else {
        CFTypeRef v6 = 0;
      }
      *uint64_t v5 = v6;
      CFTypeRef v7 = *(CFTypeRef *)(v3 + 536);
      if (v7) {
        CFTypeRef v7 = CFRetain(v7);
      }
      v5[1] = v7;
      global_CMBufferQueueRef queue = dispatch_get_global_queue(0, 0);
      dispatch_async_f(global_queue, v5, (dispatch_function_t)fpfs_FetchClientBundleIdentifierFromAudioSessionDispatch);
    }
    else
    {
      FigSignalErrorAt();
    }
  }
}

uint64_t fpfsi_updateNeroChange(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = CMBaseObjectGetDerivedStorage();
  if (!*(void *)(DerivedStorage + 40) || !*(void *)(DerivedStorage + 56)) {
    return 0;
  }
  uint64_t v4 = v3;
  uint64_t result = fpfsi_ConfigureAlternateSelectionBossForNeroSupportedVideoFormat(DerivedStorage, *(unsigned __int8 *)(v3 + 462));
  if (!result)
  {
    uint64_t result = FigAlternateFilterMonitorForHDCPNeedsNewExternalProtectionMonitorIfNecessary(*(void **)(DerivedStorage + 56), *(unsigned __int8 *)(v4 + 462), *(const void **)(v4 + 488));
    if (!result)
    {
      fpfsi_ConfigurePumpForPlayerAndRelock();
      uint64_t result = fpfsi_ApplyFiltersAndSwitchVariantIfNecessary(a1, 0);
      if (!result)
      {
        fpfs_stopResetDisturbReprepareAndResume(*(const void **)DerivedStorage, (const __CFArray *)a1, 1);
        return 0;
      }
    }
  }
  return result;
}

uint64_t fpfs_RTCReportingSetSendingVisualsToNero(uint64_t a1)
{
  uint64_t result = (uint64_t)fpfs_getNext(a1, 0);
  if (result)
  {
    uint64_t result = CMBaseObjectGetDerivedStorage();
    uint64_t v2 = *(void *)(result + 2544);
    if (v2)
    {
      uint64_t VTable = CMBaseObjectGetVTable();
      uint64_t v5 = *(void *)(VTable + 16);
      uint64_t result = VTable + 16;
      uint64_t v4 = v5;
      uint64_t v6 = v5 ? v4 : 0;
      CFTypeRef v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v6 + 56);
      if (v7)
      {
        return v7(v2, 0x1EE582B78, 0x1EE584BF8, 1, 0);
      }
    }
  }
  return result;
}

uint64_t fpfs_updatePlayerActiveState(void *a1, int a2)
{
  cf[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(DerivedStorage + 32) != a2)
  {
    uint64_t v6 = DerivedStorage;
    fpfs_LockMutexWithCaller((uint64_t)a1);
    if ((a2 - 1) > 1)
    {
      cf[0] = 0;
      CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
      FPSupport_CreateSetRateOptions(AllocatorForMedia, 26, (CFMutableDictionaryRef *)cf);
      CFTypeRef v10 = cf[0];
      uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v11) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = 0;
      }
      CFBooleanRef v13 = *(void (**)(void *, CFTypeRef, double))(v12 + 104);
      if (v13) {
        v13(a1, v10, 0.0);
      }
      if (cf[0])
      {
        CFRelease(cf[0]);
        cf[0] = 0;
      }
      *(_DWORD *)(v6 + 32) = 0;
      uint64_t updated = fpfsi_UpdateResourceSpecifierOnResourceArbiter(*(void *)(v6 + 80));
      if (!updated)
      {
        uint64_t v5 = fpfs_UpdatePlayerOverrideForAllItems(v6, (uint64_t (*)(uint64_t))fpfsi_UpdateActiveStateForPlaybackItem);
        fpfs_releaseTransitionImageQueuesAndSlots();
        fpfs_sendEmptyConfigurationToEachVideoTarget((uint64_t)a1, *(const __CFArray **)(v6 + 432));
        fpfs_ResetAudioHardwareFormat((uint64_t)a1);
LABEL_24:
        fpfs_UnlockAndPostNotificationsWithCaller(a1);
        return v5;
      }
    }
    else
    {
      int v7 = *(_DWORD *)(v6 + 32);
      *(_DWORD *)(v6 + 32) = a2;
      *(void *)(v6 + 40) = FigGetUpTimeNanoseconds();
      if (v7 == 1)
      {
        if (*(void *)(v6 + 536))
        {
          uint64_t v14 = *(void *)(v6 + 80);
          if (v14)
          {
            uint64_t v15 = *(void *)(v6 + 544);
            if (v15)
            {
              if (!*(void *)(v6 + 504))
              {
                fpfsi_setAudioSessionPreferredAudioHardwareFormat((uint64_t)a1, v14, v15);
                if (FigCFEqual())
                {
                  if (*(unsigned char *)(v6 + 560))
                  {
                    uint64_t v17 = *(void *)(v6 + 552);
                    if (v17)
                    {
                      uint64_t v5 = FigAudioSessionSetMXSessionProperty(*(void *)(v6 + 536), *MEMORY[0x1E4F76490], v17);
                      if (!v5)
                      {
                        if (dword_1E9350BB0)
                        {
                          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                          fig_log_call_emit_and_clean_up_after_send_and_compose();
                        }
                        uint64_t v5 = 0;
                        *(unsigned char *)(v6 + 560) = 0;
                      }
                      goto LABEL_24;
                    }
                  }
                }
              }
            }
          }
        }
        goto LABEL_23;
      }
      if (v7)
      {
LABEL_23:
        uint64_t v5 = 0;
        goto LABEL_24;
      }
      uint64_t updated = fpfsi_UpdateResourceSpecifierOnResourceArbiter(*(void *)(v6 + 80));
      if (!updated)
      {
        uint64_t updated = fpfs_UpdatePlayerOverrideForAllItems(v6, (uint64_t (*)(uint64_t))fpfsi_UpdateActiveStateForPlaybackItem);
        if (!updated)
        {
          if (!*(void *)(v6 + 80)) {
            fpfs_PullNextItem(a1);
          }
          goto LABEL_23;
        }
      }
    }
    uint64_t v5 = updated;
    goto LABEL_24;
  }
  return 0;
}

CFArrayRef fpfs_DoAnyItemsHaveFairPlayEncryptedContent()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFArrayRef result = fpfs_getNext(DerivedStorage, 0);
  if (result)
  {
    CFArrayRef v2 = result;
    uint64_t v3 = *MEMORY[0x1E4F1CFC8];
    uint64_t v4 = *MEMORY[0x1E4F1CFD0];
    do
    {
      uint64_t v14 = v3;
      if (DerivedStorage)
      {
        uint64_t v5 = CMBaseObjectGetDerivedStorage();
        uint64_t v6 = v3;
        if (!FigRetainProxyIsInvalidated())
        {
          uint64_t v7 = *(void *)(v5 + 936);
          uint64_t v6 = v3;
          if (v7)
          {
            uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
            FigBytePumpGetFigBaseObject(v7);
            uint64_t v10 = v9;
            uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v11) {
              uint64_t v12 = v11;
            }
            else {
              uint64_t v12 = 0;
            }
            CFBooleanRef v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(v12 + 48);
            uint64_t v6 = v3;
            if (v13)
            {
              v13(v10, 0x1EE53ED18, AllocatorForMedia, &v14);
              uint64_t v6 = v14;
            }
          }
        }
      }
      else
      {
        FigSignalErrorAt();
        uint64_t v6 = v3;
      }
      CFArrayRef result = fpfs_getNext(DerivedStorage, v2);
      if (v6 == v4) {
        break;
      }
      CFArrayRef v2 = result;
    }
    while (result);
  }
  return result;
}

uint64_t fpfsi_updateDisplayListOnCryptors()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = CMBaseObjectGetDerivedStorage();
  uint64_t v2 = *(void *)(DerivedStorage + 1048);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = v1;
  while (1)
  {
    uint64_t v4 = *(void *)(v2 + 384);
    if (!v4) {
      goto LABEL_13;
    }
    uint64_t v5 = *(void *)(v3 + 672);
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v7 = v6 ? v6 : 0;
    uint64_t v8 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v7 + 56);
    if (!v8) {
      return 4294954514;
    }
    uint64_t result = v8(v4, @"DisplayList", v5);
    if ((result + 12785) >= 2 && result != 0) {
      return result;
    }
LABEL_13:
    uint64_t v2 = *(void *)(v2 + 8);
    if (!v2) {
      return 0;
    }
  }
}

uint64_t fpfsi_updateDisplayListForVideoRangeMonitors()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  uint64_t v1 = CMBaseObjectGetDerivedStorage();
  uint64_t v2 = v1;
  uint64_t v3 = DerivedStorage[11];
  if (v3)
  {
    uint64_t v4 = *(void *)(v1 + 672);
    uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v5) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = 0;
    }
    uint64_t v7 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v6 + 56);
    if (!v7) {
      return 4294954514;
    }
    uint64_t result = v7(v3, @"AlternateFilterMonitorProperty_DisplayList", v4);
    if (result) {
      return result;
    }
  }
  uint64_t v9 = DerivedStorage[10];
  if (v9)
  {
    uint64_t v10 = *(void *)(v2 + 672);
    uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v11) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    CFBooleanRef v13 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v12 + 56);
    if (!v13) {
      return 4294954514;
    }
    uint64_t result = v13(v9, @"AlternateFilterMonitorProperty_DisplayList", v10);
    if (result) {
      return result;
    }
  }
  uint64_t v14 = DerivedStorage[8];
  if (!v14) {
    goto LABEL_19;
  }
  uint64_t v15 = *(void *)(v2 + 672);
  uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v16) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = 0;
  }
  CMTimeScale v18 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v17 + 56);
  if (!v18) {
    return 4294954514;
  }
  uint64_t result = v18(v14, @"AlternateFilterMonitorProperty_DisplayList", v15);
  if (result) {
    return result;
  }
LABEL_19:
  uint64_t v19 = DerivedStorage[9];
  if (!v19) {
    return 0;
  }
  uint64_t v20 = *(void *)(v2 + 672);
  uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v21) {
    uint64_t v22 = v21;
  }
  else {
    uint64_t v22 = 0;
  }
  int v23 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v22 + 56);
  if (!v23) {
    return 4294954514;
  }

  return v23(v19, @"AlternateFilterMonitorProperty_DisplayList", v20);
}

void fpfs_handlePlayerAudibleRateRangeChangeIfNecessary(const void *a1, uint64_t a2, int a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFArrayRef Next = fpfs_getNext(DerivedStorage, 0);
  uint64_t v8 = (uint64_t)Next;
  uint64_t v9 = *(void *)(DerivedStorage + 708);
  int v10 = *(int *)(DerivedStorage + 716);
  if (((v9 ^ a2) & 0xFF00) != 0) {
    goto LABEL_18;
  }
  BOOL v11 = (v9 ^ a2) != 0;
  if (*(float *)&a3 != *(float *)&v10) {
    BOOL v11 = 1;
  }
  if (*((float *)&a2 + 1) != *((float *)&v9 + 1)) {
    BOOL v11 = 1;
  }
  if (v11)
  {
LABEL_18:
    if (Next)
    {
      CMBaseObjectGetDerivedStorage();
      float v12 = *(float *)(DerivedStorage + 108);
      if (v12 <= 2.0 && v12 >= 0.0)
      {
        if (fpfs_FirstRenderingTrackofType(v8, 1936684398))
        {
          int v19 = 0;
          uint64_t v18 = 0;
          int v17 = 0;
          uint64_t v16 = 0;
          int v15 = 0;
          uint64_t v14 = 0;
          fpfsi_DetermineRateSnapping(v8, (uint64_t)&v18);
          int v13 = fpfs_ConfigureRatePlan(a2, a3, v18, v19, (uint64_t)&v16, *(float *)(DerivedStorage + 108), *(float *)(DerivedStorage + 108));
          if (v13 != fpfs_ConfigureRatePlan(v9, v10, v18, v19, (uint64_t)&v14, *(float *)(DerivedStorage + 108), *(float *)(DerivedStorage + 108))|| *((float *)&v16 + 1) != *((float *)&v14 + 1)|| *(float *)&v16 != *(float *)&v14|| v17 != v15)
          {
            fpfs_stopResetDisturbReprepareAndResume(a1, *(const __CFArray **)(DerivedStorage + 80), 0);
          }
        }
      }
    }
  }
}

uint64_t fpfs_setMultiAudioChannelStrategy(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = *(const void **)(DerivedStorage + 728);
  *(void *)(DerivedStorage + 728) = a2;
  if (a2) {
    CFRetain(a2);
  }
  if (v5) {
    CFRelease(v5);
  }
  if (CFEqual(a2, @"PreferExclusivePassthrough") || CFEqual(a2, @"PreferAC3ViaExclusivePassthrough")) {
    FPSupport_ReleasePassthroughHelper();
  }
  char v7 = 0;
  return fpfs_PlayQueueCallForEachItem(a1, (uint64_t (*)(const __CFArray *, uint64_t))fpfs_handleAvailableAudioFormatChange_Apply, (uint64_t)&v7);
}

uint64_t fpfs_UpdatePlayerOverrideForAllItems(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  if (*(void *)(a1 + 80))
  {
    uint64_t v4 = a2(a1);
    if (v4) {
      return v4;
    }
  }
  CFArrayRef v5 = *(const __CFArray **)(a1 + 72);
  if (!v5) {
    return 0;
  }
  CFIndex Count = CFArrayGetCount(v5);
  CFIndex v7 = Count - 1;
  if (Count < 1) {
    return 0;
  }
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFArrayRef Copy = CFArrayCreateCopy(AllocatorForMedia, *(CFArrayRef *)(a1 + 72));
  if (Copy)
  {
    CFArrayRef v10 = Copy;
    CFIndex v11 = 0;
    do
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v10, v11);
      uint64_t v13 = ((uint64_t (*)(uint64_t, const void *))a2)(a1, ValueAtIndex);
      if (v13) {
        break;
      }
    }
    while (v7 != v11++);
    CFRelease(v10);
    return v13;
  }

  return FigSignalErrorAt();
}

uint64_t fpfs_SetReleaseResourcesWhenPaused(uint64_t a1, int a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned __int8 *)(DerivedStorage + 760) == a2) {
    return 0;
  }
  uint64_t v4 = DerivedStorage;
  *(unsigned char *)(DerivedStorage + 760) = a2;
  uint64_t result = *(void *)(DerivedStorage + 80);
  if (result)
  {
    uint64_t v6 = CMBaseObjectGetDerivedStorage();
    if (!fpfs_shouldReleaseRenderChainForPausing(*(void *)(v4 + 80))) {
      return 0;
    }
    if (!*(unsigned char *)(v6 + 464)) {
      return 0;
    }
    uint64_t result = fpfsi_ReleaseRenderChainsForPausing(*(const void **)(v4 + 80));
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t fpfs_SetResourceConservationLevelWhenPaused(uint64_t a1, int a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v6 = *(_DWORD *)(DerivedStorage + 764);
  if (v6 == a2) {
    return 0;
  }
  *(_DWORD *)(DerivedStorage + 764) = a2;
  return fpfs_PlayQueueCallForEachItem(a1, (uint64_t (*)(const __CFArray *, uint64_t))fpfsi_setAndPerformResourceConservation, (uint64_t)&v6);
}

uint64_t fpfs_SetPlayerRole(uint64_t a1, int a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v5 = *(_DWORD *)(DerivedStorage + 808);
  if (v5 == a2) {
    return 0;
  }
  uint64_t v6 = DerivedStorage;
  *(_DWORD *)(DerivedStorage + 808) = a2;
  fpfsi_UpdateResourceSpecifierOnResourceArbiter(*(void *)(DerivedStorage + 80));
  CFIndex v7 = (uint64_t (*)(const __CFArray *, uint64_t))fpfsi_EnsureIFrameModeForScanningPlayer;
  if (a2 != 1 && v5 != 1)
  {
    CFIndex v7 = (uint64_t (*)(const __CFArray *, uint64_t))fpfsi_EnsureVideoModeForPIPPlayer;
    if (a2 != 2 && v5 != 2) {
      return 0;
    }
  }

  return fpfs_PlayQueueCallForEachItem(a1, v7, v6 + 808);
}

uint64_t fpfsi_ClearAudioRenderChains(const __CFArray *a1)
{
  return 0;
}

uint64_t fpfsi_RTCReportingUpdateBufferedAirPlayOutput(uint64_t result, unsigned int a2)
{
  if (result)
  {
    uint64_t v2 = *(void *)(result + 2544);
    if (v2)
    {
      uint64_t VTable = CMBaseObjectGetVTable();
      uint64_t v6 = *(void *)(VTable + 16);
      uint64_t result = VTable + 16;
      uint64_t v5 = v6;
      uint64_t v7 = v6 ? v5 : 0;
      uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, void))(v7 + 56);
      if (v8)
      {
        return v8(v2, 0x1EE582B78, 0x1EE584C98, a2, 0);
      }
    }
  }
  return result;
}

uint64_t fpfs_setVideoTargetArray(uint64_t a1, const __CFArray *a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2) {
    CFIndex Count = CFArrayGetCount(a2);
  }
  else {
    CFIndex Count = 0;
  }
  uint64_t TypeID = 0;
  CFIndex v21 = 0;
  uint64_t v22 = 0;
  if (dword_1E9350BB0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CFArrayRef v7 = *(const __CFArray **)(DerivedStorage + 432);
  if (v7) {
    CFIndex v8 = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 432));
  }
  else {
    CFIndex v8 = 0;
  }
  if (FigCFEqual()) {
    return 0;
  }
  if (Count) {
    CFArrayRef v10 = a2;
  }
  else {
    CFArrayRef v10 = 0;
  }
  if (v8 < 1)
  {
    uint64_t v13 = 0;
  }
  else
  {
    CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    CFMutableArrayRef Mutable = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D510]);
    if (!Mutable) {
      return FigSignalErrorAt();
    }
    uint64_t v13 = Mutable;
    for (CFIndex i = 0; i != v8; ++i)
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v7, i);
      if (!FigCFArrayContainsValue())
      {
        CFArrayAppendValue(v13, ValueAtIndex);
        fpfs_traceVideoTargetEvent(a1, (uint64_t)ValueAtIndex);
      }
    }
  }
  uint64_t v16 = *(const void **)(DerivedStorage + 432);
  *(void *)(DerivedStorage + 432) = v10;
  if (v10) {
    CFRetain(v10);
  }
  if (v16) {
    CFRelease(v16);
  }
  if (Count >= 1)
  {
    for (CFIndex j = 0; j != Count; ++j)
    {
      uint64_t v18 = CFArrayGetValueAtIndex(v10, j);
      fpfs_traceVideoTargetEvent(a1, (uint64_t)v18);
    }
  }
  if (v13 && CFArrayGetCount(v13) > 0)
  {
    fpfs_sendEmptyConfigurationToEachVideoTarget(a1, v13);
    fpfs_removeFVTNotificationListeners(v13);
    fpfs_removeFVTNotificationListeners(v13);
  }
  else
  {
    fpfs_addFVTNotificationListeners(v10);
    fpfs_addFVTNotificationListeners(v10);
  }
  fpfs_PlayQueueCallForEachItem(a1, (uint64_t (*)(const __CFArray *, uint64_t))fpfsi_HandleResolutionCapOrDisplaySizeChange, 0);
  fpfs_PlayQueueCallForEachItem(a1, (uint64_t (*)(const __CFArray *, uint64_t))fpfsi_handleFVTClientRenderOptionChanged, 0);
  fpfs_PlayQueueCallForEachItem(a1, (uint64_t (*)(const __CFArray *, uint64_t))fpfsi_handleVideoLayoutPreferenceChanged, 0);
  fpfs_PlayQueueCallForEachItem(a1, (uint64_t (*)(const __CFArray *, uint64_t))fpfsi_UpdateVenueDescriptionMetadataSupplier, 0);
  uint64_t TypeID = FigVideoTargetGetTypeID();
  CFIndex v21 = Count - v8;
  uint64_t v9 = fpfs_PlayQueueCallForEachItem(a1, (uint64_t (*)(const __CFArray *, uint64_t))fpfsi_handleVideoOutputsChanged, (uint64_t)&TypeID);
  if (v13) {
    CFRelease(v13);
  }
  return v9;
}

uint64_t fpfsi_setMutedApply(uint64_t a1, uint64_t *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 522)) {
    return 0;
  }
  uint64_t v5 = *(void *)(DerivedStorage + 1048);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = 0;
  uint64_t result = 0;
  uint64_t v7 = *a2;
  do
  {
    uint64_t v8 = *(void *)(v5 + 96);
    if (v8)
    {
      if (*(_DWORD *)(v5 + 32) == 1936684398 && v8 != v6)
      {
        uint64_t result = fpfs_setPropertyOnPrimaryAndAuxRenderPipelines(*(void *)(v5 + 96), @"Muted", v7);
        uint64_t v6 = *(void *)(v5 + 96);
      }
    }
    uint64_t v5 = *(void *)(v5 + 8);
  }
  while (v5);
  return result;
}

void fpfs_FetchClientBundleIdentifierFromAudioSessionDispatch(const void **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  CFTypeRef cf = 0;
  uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
  if (v3)
  {
    uint64_t v5 = AllocatorForMedia;
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v6)
    {
      uint64_t v7 = *(void (**)(const void *, void, uint64_t, CFTypeRef *))(v6 + 48);
      if (v7)
      {
        v7(v3, *MEMORY[0x1E4F761A0], v5, &cf);
        if (cf)
        {
          fpfs_LockMutexWithCaller((uint64_t)v2);
          uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
          if (!*(unsigned char *)(DerivedStorage + 51))
          {
            uint64_t v9 = *(const void **)(DerivedStorage + 528);
            CFTypeRef v10 = cf;
            *(void *)(DerivedStorage + 528) = cf;
            if (v10) {
              CFRetain(v10);
            }
            if (v9) {
              CFRelease(v9);
            }
          }
          fpfs_UnlockWithCaller();
          if (cf) {
            CFRelease(cf);
          }
        }
      }
    }
    CFRelease(v3);
  }
  if (v2) {
    CFRelease(v2);
  }
  free(a1);
}

uint64_t fpfsi_UpdateActiveStateForPlaybackItem(uint64_t a1, const __CFString *cf)
{
  if (cf)
  {
    CFRetain(cf);
    if (!a1)
    {
      uint64_t updated = FigSignalErrorAt();
LABEL_80:
      uint64_t v21 = updated;
      goto LABEL_72;
    }
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (FigRetainProxyIsInvalidated())
    {
LABEL_77:
      uint64_t v21 = 0;
LABEL_72:
      CFRelease(cf);
      return v21;
    }
    if (*(_DWORD *)(a1 + 32))
    {
      uint64_t v6 = *(void *)(DerivedStorage + 2544);
      if (v6)
      {
        uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v8 = v7 ? v7 : 0;
        uint64_t v13 = *(void (**)(uint64_t, void))(v8 + 104);
        if (v13) {
          v13(v6, 0);
        }
      }
      if (*(void *)(DerivedStorage + 936))
      {
        uint64_t v14 = *(void *)(DerivedStorage + 2256);
        if (v14)
        {
          uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v15) {
            uint64_t v16 = v15;
          }
          else {
            uint64_t v16 = 0;
          }
          int v17 = *(void (**)(uint64_t, uint64_t, void))(v16 + 56);
          if (v17) {
            v17(v14, 0x1EE57E518, *MEMORY[0x1E4F1CFC8]);
          }
        }
        uint64_t updated = fpfsi_CoordinateWithAssetDownloader();
        if (!updated)
        {
          uint64_t updated = fpfsi_UpdateValidAlternateListAndEvaluateCurrentAlternateAgaintValidAlternateList((const __CFArray *)cf, 0);
          if (!updated)
          {
            uint64_t updated = fpfsi_handleAvailableAudioFormatChange(cf, 0, 0);
            if (!updated)
            {
              if (!*(unsigned char *)(DerivedStorage + 532)
                || (long long v19 = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 16),
                    long long v45 = *MEMORY[0x1E4F1FA20],
                    long long v46 = v19,
                    long long v47 = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 32),
                    fpfsi_getPumpAvailableTimeRange(DerivedStorage, &v45))
                || (BYTE12(v45) & 1) != 0
                && (BYTE4(v47) & 1) != 0
                && !*((void *)&v47 + 1)
                && (*((void *)&v46 + 1) & 0x8000000000000000) == 0)
              {
                uint64_t v20 = fpfsi_SeekToCurrentTime((const __CFArray *)cf);
                if (v20)
                {
                  uint64_t v21 = v20;
                  if (v20 != -12782) {
                    goto LABEL_36;
                  }
                }
                uint64_t v21 = fpfs_FlowControlPump(DerivedStorage, 0, 1, 255);
              }
              else
              {
                fpfs_FlowControlPump(DerivedStorage, 0xFFu, 1, 0);
                uint64_t v21 = 0;
              }
              fpfsi_RTCReportingReportIRATEventIfNeeded(DerivedStorage, 800);
LABEL_36:
              uint64_t v22 = *(void *)(DerivedStorage + 2480);
              if (v22) {
                FigFramePrefetcherActivate(v22);
              }
              goto LABEL_72;
            }
          }
        }
        goto LABEL_80;
      }
      goto LABEL_77;
    }
    if (*(void *)(DerivedStorage + 936))
    {
      uint64_t v10 = *(void *)(DerivedStorage + 2256);
      if (v10)
      {
        uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v12 = v11 ? v11 : 0;
        uint64_t v23 = *(void (**)(uint64_t, uint64_t, void))(v12 + 56);
        if (v23) {
          v23(v10, 0x1EE57E518, *MEMORY[0x1E4F1CFD0]);
        }
      }
      uint64_t TimestampClientDidPauseOnContentSteeringMonitor = fpfs_FlowControlPump(DerivedStorage, 0xFFu, 0, 0);
      if (TimestampClientDidPauseOnContentSteeringMonitor) {
        goto LABEL_78;
      }
      fpfsi_RTCReportingReportIRATEventIfNeeded(DerivedStorage, 801);
      uint64_t v25 = *(void *)(DerivedStorage + 936);
      uint64_t v26 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v26) {
        uint64_t v27 = v26;
      }
      else {
        uint64_t v27 = 0;
      }
      uint64_t v28 = *(void (**)(uint64_t))(v27 + 112);
      if (v28) {
        v28(v25);
      }
      uint64_t v29 = *(void *)(DerivedStorage + 936);
      uint64_t v30 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v30) {
        uint64_t v31 = v30;
      }
      else {
        uint64_t v31 = 0;
      }
      CFNumberRef v32 = *(void (**)(uint64_t))(v31 + 152);
      if (v32) {
        v32(v29);
      }
      uint64_t v33 = *(const void **)(CMBaseObjectGetDerivedStorage() + 16);
      if (v33) {
        uint64_t v34 = (void *)CFRetain(v33);
      }
      else {
        uint64_t v34 = 0;
      }
      dispatch_time_t v35 = dispatch_time(0, 10000000000);
      global_CMBufferQueueRef queue = dispatch_get_global_queue(0, 0);
      dispatch_after_f(v35, global_queue, v34, (dispatch_function_t)fpfsi_AllowCoordinatedDownloadsToContinueAfterDelayDispatchFunc);
      CMBaseObjectGetDerivedStorage();
      if (!*(_DWORD *)(DerivedStorage + 2292)) {
        *(_DWORD *)(DerivedStorage + 2292) = 5;
      }
      uint64_t v37 = *(void *)(DerivedStorage + 1704);
      if (v37 && FigAlternateIsIFrameOnly(v37))
      {
        fpfs_GetTime(DerivedStorage, (uint64_t)&v44);
        uint64_t TimestampClientDidPauseOnContentSteeringMonitor = fpfs_PrepareToReuseLastIFrameTrack((uint64_t)cf, &v44, 0);
        if (TimestampClientDidPauseOnContentSteeringMonitor) {
          goto LABEL_78;
        }
      }
      else
      {
        fpfs_PrepareForSeek((const __CFArray *)cf, 0xFFu, 1);
      }
      uint64_t v38 = CMBaseObjectGetDerivedStorage();
      fpfs_ClearRenderChains((const __CFArray *)cf, 0xFFu);
      *(void *)(v38 + 780) = 0;
      fpfs_cleanupAllImageQueues(cf, 0);
      fpfsi_EnqueuePlayableRangeChangedNotification(cf);
      uint64_t TimestampClientDidPauseOnContentSteeringMonitor = fpfsi_SetLastTimestampClientDidPauseOnContentSteeringMonitor((uint64_t)cf, 0x8000000000000000);
      if (TimestampClientDidPauseOnContentSteeringMonitor)
      {
LABEL_78:
        uint64_t v21 = TimestampClientDidPauseOnContentSteeringMonitor;
        goto LABEL_66;
      }
      *(unsigned char *)(DerivedStorage + 469) = 0;
      uint64_t v39 = *(void *)(DerivedStorage + 2480);
      if (v39) {
        FigFramePrefetcherDeactivate(v39);
      }
    }
    uint64_t v21 = 0;
LABEL_66:
    uint64_t v40 = *(void *)(DerivedStorage + 2544);
    if (v40)
    {
      uint64_t v41 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v42 = v41 ? v41 : 0;
      uint64_t v43 = *(void (**)(uint64_t))(v42 + 112);
      if (v43) {
        v43(v40);
      }
    }
    goto LABEL_72;
  }
  return FigSignalErrorAt();
}

void fpfsi_AllowCoordinatedDownloadsToContinueAfterDelayDispatchFunc(const void *a1)
{
  CFTypeRef v20 = 0;
  CFTypeRef v21 = 0;
  uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  if (!fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer((uint64_t)a1, &v21, &v20))
  {
    CFTypeRef v3 = v21;
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (!*(_DWORD *)(DerivedStorage + 32)
      && (double)(UpTimeNanoseconds + 100000000) + -10.0 > (double)*(uint64_t *)(DerivedStorage + 40))
    {
      uint64_t v5 = CMBaseObjectGetDerivedStorage();
      uint64_t v6 = v5;
      CFTypeRef cf = 0;
      CFTypeRef v23 = 0;
      if (*(void *)(v5 + 936))
      {
        if (*(unsigned char *)(v5 + 2873))
        {
          if (!FigAssetDownloadCoordinatorCopyDestinationURLForAsset(*(void *)(v5 + 32), &cf)
            && cf != 0)
          {
            uint64_t v8 = *(void *)(v6 + 936);
            uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
            FigBytePumpGetFigBaseObject(v8);
            uint64_t v11 = v10;
            uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
            uint64_t v13 = v12 ? v12 : 0;
            uint64_t v14 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v13 + 48);
            if (v14 && !v14(v11, 0x1EE53E498, AllocatorForMedia, &v23) && v23)
            {
              FigBytePumpGetFigBaseObject(*(void *)(v6 + 936));
              uint64_t v16 = v15;
              uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 8);
              uint64_t v18 = v17 ? v17 : 0;
              long long v19 = *(unsigned int (**)(uint64_t, uint64_t, void))(v18 + 56);
              if (v19)
              {
                if (!v19(v16, 0x1EE53E498, 0)) {
                  FigStreamingCacheInvalidate((uint64_t)v23);
                }
              }
            }
          }
        }
      }
      else
      {
        FigSignalErrorAt();
      }
      if (*(unsigned char *)(v6 + 2873))
      {
        FigAssetDownloadCoordinatorUnmarkAssetForInteractivity(*(const void **)(v6 + 32));
        *(unsigned char *)(v6 + 2873) = 0;
      }
      if (cf) {
        CFRelease(cf);
      }
      if (v23) {
        CFRelease(v23);
      }
    }
    fpfs_UnlockAndPostNotificationsWithCaller(v3);
  }
  if (v20) {
    CFRelease(v20);
  }
  if (v21) {
    CFRelease(v21);
  }
  if (a1) {
    CFRelease(a1);
  }
}

uint64_t fpfsi_EnsureIFrameModeForScanningPlayer(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = CMBaseObjectGetDerivedStorage();
  if (!*(void *)(DerivedStorage + 40)) {
    return 0;
  }
  uint64_t v4 = v3;
  uint64_t v5 = fpfsi_ConfigureAlternateSelectionBossForScanningRole();
  if (v5)
  {
    uint64_t v6 = v5;
    goto LABEL_4;
  }
  uint64_t v6 = FigAlternateSelectionBossApplyFilters(*(const void **)(DerivedStorage + 40));
  if (v6) {
LABEL_4:
  }
    fpfs_StopPlayingItemWithOSStatus(v4, a1, v6);
  return v6;
}

uint64_t fpfsi_EnsureVideoModeForPIPPlayer(uint64_t a1, _DWORD *a2)
{
  CMBaseObjectGetDerivedStorage();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  BOOL v5 = *a2 == 2;
  if (CelestialShouldLimitHDRConcurrentPlayback())
  {
    uint64_t v6 = fpfsi_SwitchBetweenHDRAndSDR(a1, v5);
    if (v6) {
      goto LABEL_5;
    }
  }
  if (!CelestialShouldLimit4kConcurrentPlayback()) {
    return 0;
  }
  uint64_t v6 = fpfsi_SwitchBetween4kAndHD(a1, v5);
  if (v6) {
LABEL_5:
  }
    fpfs_StopPlayingItemWithOSStatus(DerivedStorage, a1, v6);
  return v6;
}

void fpfs_traceVideoTargetEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  CFStringRef theString = 0;
  __int16 v10 = 0;
  *(void *)buffer = 1280070990;
  uint64_t CMBaseObject = FigVideoTargetGetCMBaseObject(a2);
  uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  BOOL v5 = *(unsigned int (**)(uint64_t, uint64_t, void, CFStringRef *))(v4 + 48);
  if (v5)
  {
    if (!v5(CMBaseObject, 0x1EE552058, *MEMORY[0x1E4F1CF80], &theString) && theString != 0) {
      CFStringGetCString(theString, buffer, 10, 0x600u);
    }
  }
  if (*MEMORY[0x1E4F1EBA8] == 1)
  {
    strncpy(__dst, buffer, 8uLL);
    kdebug_trace();
  }
  if (theString) {
    CFRelease(theString);
  }
}

CFIndex fpfs_addFVTNotificationListeners(CFArrayRef theArray)
{
  CFIndex v2 = 0;
  if (!theArray) {
    goto LABEL_3;
  }
LABEL_2:
  for (CFIndex result = CFArrayGetCount(theArray); v2 < result; CFIndex result = 0)
  {
    CFArrayGetValueAtIndex(theArray, v2);
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListener();
    ++v2;
    if (theArray) {
      goto LABEL_2;
    }
LABEL_3:
    ;
  }
  return result;
}

uint64_t fpfsi_UpdateVenueDescriptionMetadataSupplier(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = CMBaseObjectGetDerivedStorage();
  uint64_t result = fpfsi_EnsureVenueDescriptionMetadataSupplierIfNecessary(a1);
  if (!result)
  {
    uint64_t v5 = *(void *)(DerivedStorage + 744);
    if (v5)
    {
      uint64_t v6 = *(void *)(v3 + 432);
      uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v7) {
        uint64_t v8 = v7;
      }
      else {
        uint64_t v8 = 0;
      }
      uint64_t v9 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v8 + 56);
      if (v9)
      {
        return v9(v5, @"SMS_VideoTargetArray", v6);
      }
      else
      {
        return 4294954514;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t fpfs_AddToPlayQueue(void *a1, const void *a2, const void *a3)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1E9350BB0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v8 = (_DWORD *)MEMORY[0x1E4F1EBA8];
  if (*MEMORY[0x1E4F1EBA8] == 1)
  {
    if (a1) {
      uint64_t v9 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
    }
    else {
      uint64_t v9 = "";
    }
    strncpy(__dst, v9, 8uLL);
    if (a2) {
      __int16 v10 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
    }
    else {
      __int16 v10 = "";
    }
    strncpy(__dst, v10, 8uLL);
    if (a3) {
      uint64_t v11 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
    }
    else {
      uint64_t v11 = "";
    }
    strncpy(__dst, v11, 8uLL);
    kdebug_trace();
  }
  fpfs_LockMutexWithCaller((uint64_t)a1);
  if (*(unsigned char *)(DerivedStorage + 51) || !fpfs_CheckItem((uint64_t)a1, a2) || a3 && !fpfs_CheckItem((uint64_t)a1, a3)) {
    goto LABEL_99;
  }
  uint64_t v12 = CMBaseObjectGetDerivedStorage();
  if (!CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 72)) && !*(void *)(DerivedStorage + 80))
  {
    *(unsigned char *)(v12 + 3272) = 1;
    *(void *)(DerivedStorage + 648) = @"ReasonAddToPlayQueue";
  }
  int v13 = *(_DWORD *)(DerivedStorage + 748);
  int v14 = *(_DWORD *)(v12 + 2388);
  if (v13 >= v14) {
    int v15 = *(_DWORD *)(v12 + 2388);
  }
  else {
    int v15 = *(_DWORD *)(DerivedStorage + 748);
  }
  if (!v14) {
    int v15 = *(_DWORD *)(DerivedStorage + 748);
  }
  if (v13) {
    int v16 = v15;
  }
  else {
    int v16 = *(_DWORD *)(v12 + 2388);
  }
  *(_DWORD *)(v12 + 2384) = v16;
  int v17 = *(_DWORD *)(DerivedStorage + 752);
  int v18 = *(_DWORD *)(v12 + 2244);
  if (v17 >= v18) {
    int v19 = *(_DWORD *)(v12 + 2244);
  }
  else {
    int v19 = *(_DWORD *)(DerivedStorage + 752);
  }
  if (!v18)
  {
    int v18 = 50;
    int v19 = *(_DWORD *)(DerivedStorage + 752);
  }
  if (v17) {
    int v20 = v19;
  }
  else {
    int v20 = v18;
  }
  *(_DWORD *)(v12 + 2240) = v20;
  int v21 = *(_DWORD *)(DerivedStorage + 756);
  int v22 = *(_DWORD *)(v12 + 2288);
  if (v21 < 0)
  {
    if (v22 < 0) {
      int v22 = *(_DWORD *)(v12 + 2284);
    }
  }
  else if (v22 < 0)
  {
    int v22 = *(_DWORD *)(DerivedStorage + 756);
  }
  else
  {
    int v22 = *(_DWORD *)(v12 + 2280);
    if (v21 < v22) {
      int v22 = *(_DWORD *)(DerivedStorage + 756);
    }
  }
  *(_DWORD *)(v12 + 2280) = v22;
  if (!a3)
  {
    if (!*(unsigned char *)(v12 + 463))
    {
      CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 72), a2);
      goto LABEL_56;
    }
    goto LABEL_99;
  }
  uint64_t v23 = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(v12 + 463) || !*(unsigned char *)(v23 + 463)) {
    goto LABEL_99;
  }
  if (*(const void **)(DerivedStorage + 80) != a3)
  {
    CFArrayRef v24 = *(const __CFArray **)(DerivedStorage + 72);
    v59.length = CFArrayGetCount(v24);
    v59.location = 0;
    FirstIndexOfBoolean Value = CFArrayGetFirstIndexOfValue(v24, v59, a3);
    if (FirstIndexOfValue != -1)
    {
      CFIndex v26 = FirstIndexOfValue + 1;
      if (FirstIndexOfValue + 1 < CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 72)))
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 72), v26);
        fpfs_CancelGaplessAttempt(a1, ValueAtIndex, 1);
      }
      goto LABEL_55;
    }
LABEL_99:
    uint64_t v45 = FigSignalErrorAt();
    goto LABEL_81;
  }
  CFIndex v26 = 0;
LABEL_55:
  CFArrayInsertValueAtIndex(*(CFMutableArrayRef *)(DerivedStorage + 72), v26, a2);
LABEL_56:
  double Current = CFAbsoluteTimeGetCurrent();
  uint64_t v29 = *(void *)(v12 + 2544);
  if (v29)
  {
    double v30 = Current;
    double v31 = *(double *)(v12 + 2032);
    uint64_t v32 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v33 = v32 ? v32 : 0;
    uint64_t v34 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v33 + 56);
    if (v34) {
      v34(v29, 0x1EE582B78, 0x1EE584B98, (uint64_t)((v30 - v31) * 1000.0), 0);
    }
  }
  uint64_t v35 = *(void *)(v12 + 2544);
  if (v35)
  {
    uint64_t v36 = *(unsigned __int8 *)(v12 + 3272);
    uint64_t v37 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v38 = v37 ? v37 : 0;
    uint64_t v39 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v38 + 56);
    if (v39) {
      v39(v35, 0x1EE582B78, 0x1EE585AD8, v36, 0);
    }
  }
  if (*(void *)(v12 + 2072))
  {
    if (!*(unsigned char *)(v12 + 2081))
    {
      uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
      uint64_t v48 = *(void *)(v12 + 2544);
      if (v48)
      {
        uint64_t v49 = UpTimeNanoseconds;
        uint64_t v50 = *(void *)(v12 + 2072);
        uint64_t v51 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v52 = v51 ? v51 : 0;
        int v56 = *(void (**)(uint64_t, uint64_t, uint64_t, unint64_t, void))(v52 + 56);
        if (v56) {
          v56(v48, 0x1EE582CD8, 0x1EE585C18, (v49 - v50) / 0xF4240uLL, 0);
        }
      }
    }
  }
  *(_WORD *)(v12 + 463) = 1;
  *(unsigned char *)(v12 + 468) = 0;
  *(unsigned char *)(v12 + 530) = 0;
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(v12 + 1912));
  uint64_t v40 = *(const void **)(v12 + 1896);
  if (v40)
  {
    CFRelease(v40);
    *(void *)(v12 + 1896) = 0;
  }
  uint64_t v41 = *(const void **)(v12 + 1904);
  if (v41)
  {
    CFRelease(v41);
    *(void *)(v12 + 1904) = 0;
  }
  fpfs_AdvanceToNextItemIfNecessary();
  uint64_t v42 = *(const void **)(DerivedStorage + 80);
  if (v42) {
    fpfsi_MakeNextItemReadyForInspectionIfItemEndedOrBeyondFwdEnd(v42);
  }
  else {
    fpfs_PullNextItem(a1);
  }
  CFArrayRef v43 = *(const __CFArray **)(DerivedStorage + 432);
  if (v43) {
    int Count = CFArrayGetCount(v43);
  }
  else {
    int Count = 0;
  }
  fpfsi_RTCReportingUpdateFVTCount(v12, Count);
  fpfs_PostPlayQueueNotificationIfHungry(a1);
  uint64_t v45 = 0;
LABEL_81:
  fpfs_UnlockAndPostNotificationsWithCaller(a1);
  if (*v8 == 1)
  {
    if (a1) {
      long long v46 = (const char *)(CMBaseObjectGetDerivedStorage() + 824);
    }
    else {
      long long v46 = "";
    }
    strncpy(__dst, v46, 8uLL);
    if (a2) {
      CFTypeID v53 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
    }
    else {
      CFTypeID v53 = "";
    }
    strncpy(__dst, v53, 8uLL);
    if (a3) {
      uint64_t v54 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
    }
    else {
      uint64_t v54 = "";
    }
    strncpy(__dst, v54, 8uLL);
    kdebug_trace();
  }
  return v45;
}

uint64_t fpfs_RemoveFromPlayQueue(void *a1, const void *a2)
{
  return fpfs_RemoveFromPlayQueueGuts(a1, a2, 1);
}

uint64_t fpfs_CopyPlayQueueItem(const void *a1, const void *a2, const __CFArray **a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  fpfs_LockMutexWithCaller((uint64_t)a1);
  if (a3)
  {
    if (*(unsigned char *)(DerivedStorage + 51)
      || a2 && (!fpfs_CheckItem((uint64_t)a1, a2) || !*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 463)))
    {
      uint64_t v9 = FigSignalErrorAt();
      CFArrayRef v8 = 0;
    }
    else
    {
      CFArrayRef Next = fpfs_getNext(DerivedStorage, a2);
      CFArrayRef v8 = Next;
      if (Next) {
        CFRetain(Next);
      }
      uint64_t v9 = 0;
    }
    *a3 = v8;
  }
  else
  {
    uint64_t v9 = FigSignalErrorAt();
  }
  fpfs_UnlockAndPostNotificationsWithCaller(a1);
  return v9;
}

uint64_t fpfs_SetRate(void *a1, float a2)
{
  if (dword_1E9350BB0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return fpfs_SetRateWithOptionsGuts(a1, 0, 1, a2);
}

uint64_t fpfs_GetRate(const void *a1, _DWORD *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  fpfs_LockMutexWithCaller((uint64_t)a1);
  *a2 = *(_DWORD *)(DerivedStorage + 108);
  fpfs_UnlockAndPostNotificationsWithCaller(a1);
  return 0;
}

uint64_t fpfs_StartPreroll(const void *a1, int a2, float a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1E9350BB0 >= 2)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!*(unsigned char *)(DerivedStorage + 51) && a3 != 0.0)
  {
    fpfs_LockMutexWithCaller((uint64_t)a1);
    CFArrayRef Next = fpfs_getNext(DerivedStorage, 0);
    if (Next)
    {
      CFArrayRef v11 = Next;
      uint64_t v12 = CMBaseObjectGetDerivedStorage();
      if (*(float *)(v12 + 848) != 0.0)
      {
        uint64_t v8 = FigSignalErrorAt();
        goto LABEL_15;
      }
      uint64_t v13 = v12;
      if (!*(unsigned char *)(v12 + 464))
      {
        fpfs_enqueuePrerollWasCancelledNotificationIfNeeded(v11);
        uint64_t v8 = 0;
        *(_DWORD *)(v13 + 2208) = a2;
LABEL_15:
        fpfs_UnlockAndPostNotificationsWithCaller(a1);
        return v8;
      }
      *(_DWORD *)(v12 + 2208) = a2;
      fpfs_enqueuePrerollDidCompleteNotificationIfNeeded();
    }
    else if (dword_1E9350BB0 >= 2)
    {
      int v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v8 = 0;
    goto LABEL_15;
  }
  return FigSignalErrorAt();
}

uint64_t fpfs_SetRateAndAnchorTime(void *a1, CMTime *a2, uint64_t a3, char a4, float a5)
{
  CMTime v8 = *a2;
  long long v6 = *(_OWORD *)a3;
  uint64_t v7 = *(void *)(a3 + 16);
  return fpfs_SetRateWithOptionsAndAnchorTime(a1, a5, 0, &v8, &v6, a4, 1);
}

uint64_t fpfs_CreatePlaybackItemFromAsset(const void *a1, CFTypeRef cf, uint64_t a3, const __CFDictionary *a4, CFTypeRef *a5)
{
  uint64_t v167 = *MEMORY[0x1E4F143B8];
  CFTypeRef v131 = 0;
  if (cf)
  {
    CFAllocatorRef v9 = CFGetAllocator(cf);
    uint64_t CMBaseObject = FigAssetGetCMBaseObject(cf);
    uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v11) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v13 = *(uint64_t (**)(uint64_t, __CFString *, CFAllocatorRef, CFTypeRef *))(v12 + 48);
    if (!v13)
    {
      uint64_t v27 = 4294954514;
      goto LABEL_167;
    }
    uint64_t v14 = v13(CMBaseObject, @"assetProperty_CreationURL", v9, &v131);
    if (v14)
    {
LABEL_166:
      uint64_t v27 = v14;
      goto LABEL_167;
    }
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    CFTypeRef v143 = 0;
    CFTypeRef v144 = 0;
    uint64_t v15 = gNextItemOrdinal++;
    CFTypeRef cfa = 0;
    CMTimeValue value = 0;
    uint64_t v139 = 0;
    CFTypeRef v140 = 0;
    CFTypeRef v137 = 0;
    CFTypeRef v138 = 0;
    memset(__str, 0, sizeof(__str));
    memset(buffer, 0, sizeof(buffer));
    CFTypeRef v135 = 0;
    CFTypeRef v136 = 0;
    if (!a1 || !a5)
    {
      uint64_t v27 = FigSignalErrorAt();
      goto LABEL_164;
    }
    int v128 = a5;
    fpfs_LockMutexWithCaller((uint64_t)a1);
    CFGetAllocator(a1);
    FigPlaybackItemGetClassID();
    CMDerivedObjectCreate();
    int v16 = (_DWORD *)MEMORY[0x1E4F1EB90];
    if (!v144)
    {
      uint64_t v27 = FigSignalErrorAt();
      goto LABEL_152;
    }
    if (*MEMORY[0x1E4F1EBA0])
    {
      int v17 = fig_log_handle();
      if (os_signpost_enabled(v17))
      {
        *(_DWORD *)buf = 134218496;
        CFTypeID v158 = a1;
        __int16 v159 = 2048;
        CFTypeRef v160 = v144;
        __int16 v161 = 2048;
        uint64_t v162 = v15;
        _os_signpost_emit_with_name_impl(&dword_193E8D000, v17, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "PlayerStream_CreateItem", " enableTelemetry=YES player=%llu, item=%llu, itemOrdinal=%ld", buf, 0x20u);
      }
    }
    if (*v16) {
      fig_gm_ktrace_wrapper();
    }
    uint64_t v18 = CMBaseObjectGetDerivedStorage();
    *(void *)uint64_t v18 = a1;
    uint64_t v19 = FigSimpleMutexCreate();
    *(void *)(v18 + 8) = v19;
    if (v19)
    {
      FigGetAllocatorForMedia();
      uint64_t started = FigRetainProxyCreate();
      if (!started)
      {
        *(void *)(v18 + 160) = v15;
        uint64_t started = FigStartForwardingMediaServicesProcessDeathNotification();
        if (!started)
        {
          *(unsigned char *)(v18 + 3080) = 0;
          if (a4 && CFDictionaryGetValueIfPresent(a4, @"LoggingIdentifier", (const void **)&value)) {
            CFStringGetCString((CFStringRef)value, (char *)(v18 + 3080), 10, 0x600u);
          }
          uint64_t v127 = v15;
          if (dword_1E9350BB0)
          {
            LODWORD(v134) = 0;
            type[0] = OS_LOG_TYPE_DEFAULT;
            os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int v22 = v134;
            if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type[0])) {
              unsigned int v23 = v22;
            }
            else {
              unsigned int v23 = v22 & 0xFFFFFFFE;
            }
            if (v23)
            {
              uint64_t v24 = CMBaseObjectGetDerivedStorage() + 824;
              CFTypeRef v25 = v144;
              if (v144) {
                CFIndex v26 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
              }
              else {
                CFIndex v26 = "";
              }
              int v145 = 136316418;
              CFTypeID v146 = "fpfs_CreatePlaybackItem";
              __int16 v147 = 2048;
              CFTypeRef v148 = a1;
              __int16 v149 = 2082;
              uint64_t v150 = v24;
              __int16 v151 = 2048;
              CFTypeRef v152 = v25;
              __int16 v153 = 2082;
              int v154 = v26;
              __int16 v155 = 1024;
              int v156 = v127;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          if (FigCFDictionaryGetValueIfPresent())
          {
            CFTypeRef v28 = cfa;
            if (cfa) {
              CFTypeRef v28 = CFRetain(cfa);
            }
            *(void *)(v18 + 3368) = v28;
          }
          if (FigCFDictionaryGetValueIfPresent())
          {
            CFTypeRef v29 = v140;
            if (v140) {
              CFTypeRef v29 = CFRetain(v140);
            }
            *(void *)(v18 + 3192) = v29;
          }
          if (FigCFDictionaryGetValueIfPresent()) {
            *(unsigned char *)(v18 + 3200) = *MEMORY[0x1E4F1CFD0] == v139;
          }
          uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
          FigPropertyStorageCreate(AllocatorForMedia, (uint64_t *)(v18 + 168));
          CFTypeRef v134 = 0;
          if (FigIsItOKToLogURLs()) {
            BOOL v31 = FPSupport_GetAssetDoNotLogURLs((uint64_t)cf) == 0;
          }
          else {
            BOOL v31 = 0;
          }
          *(unsigned char *)(v18 + 25) = v31;
          CFTypeRef v32 = CFRetain(cf);
          *(void *)(v18 + 32) = v32;
          uint64_t v33 = FigGetAllocatorForMedia();
          uint64_t v34 = FigAssetGetCMBaseObject(v32);
          uint64_t v35 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v35) {
            uint64_t v36 = v35;
          }
          else {
            uint64_t v36 = 0;
          }
          uint64_t v37 = *(void (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v36 + 48);
          if (v37) {
            v37(v34, @"assetProperty_CreationURL", v33, &v134);
          }
          CFTypeRef v38 = v134;
          if (v134)
          {
            if (dword_1E9350BB0)
            {
              *(_DWORD *)os_log_type_t type = 0;
              os_log_type_t v132 = OS_LOG_TYPE_DEFAULT;
              uint64_t v39 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              unsigned int v40 = *(_DWORD *)type;
              if (os_log_type_enabled(v39, v132)) {
                unsigned int v41 = v40;
              }
              else {
                unsigned int v41 = v40 & 0xFFFFFFFE;
              }
              if (v41)
              {
                if (*(unsigned char *)(v18 + 25)) {
                  uint64_t v42 = (__CFString *)v134;
                }
                else {
                  uint64_t v42 = @"<redacted>";
                }
                CFArrayRef v43 = *(const void **)(v18 + 32);
                int v145 = 136315906;
                CFTypeID v146 = "fpfs_CreatePlaybackItem";
                __int16 v147 = 2048;
                CFTypeRef v148 = v144;
                __int16 v149 = 2112;
                uint64_t v150 = (uint64_t)v42;
                __int16 v151 = 2048;
                CFTypeRef v152 = v43;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              CFTypeRef v38 = v134;
            }
            CFRelease(v38);
          }
          *(_WORD *)(v18 + 893) = 1;
          *(unsigned char *)(v18 + 895) = 0;
          uint64_t v44 = *(void *)(DerivedStorage + 536);
          if (v44) {
            *(unsigned char *)(v18 + 894) = FPSupport_CopyAndCheckClientOnAllowListForPrefDomainKey(v44, 1, 0x1EE54F7F8, &v138);
          }
          if (v138) {
            CFRelease(v138);
          }
          uint64_t v45 = *(void *)(v18 + 32);
          uint64_t v46 = FigGetAllocatorForMedia();
          uint64_t v47 = FigAssetGetCMBaseObject(v45);
          uint64_t v48 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v48) {
            uint64_t v49 = v48;
          }
          else {
            uint64_t v49 = 0;
          }
          uint64_t v50 = *(void (**)(uint64_t, __CFString *, uint64_t, uint64_t))(v49 + 48);
          if (v50) {
            v50(v47, @"assetProperty_CreationOptionsDictionary", v46, v18 + 400);
          }
          *(void *)(v18 + 1616) = 0;
          *(void *)(v18 + 1624) = v18 + 1616;
          fpfsi_ResetPlaybackItem((const __CFArray *)v144, 0);
          if (*(void *)(v18 + 400))
          {
            DataBoolean Value = (const __CFData *)FigCFDictionaryGetDataValue();
            if (DataValue)
            {
              CFStringRef v52 = (const __CFString *)FigCFHTTPCopyClientProcessName(DataValue);
              if (v52)
              {
                CFStringRef v53 = v52;
                CFStringGetCString(v52, (char *)buffer, 128, 0x8000100u);
                CFRelease(v53);
              }
            }
          }
          if (v144) {
            uint64_t v54 = (const char *)(CMBaseObjectGetDerivedStorage() + 3080);
          }
          else {
            uint64_t v54 = "";
          }
          snprintf((char *)__str, 0x50uLL, "com.apple.coremedia.fpfs.timer(%s).%s", (const char *)buffer, v54);
          uint64_t v55 = FigDispatchQueueCreateWithPriority();
          *(void *)(v18 + 600) = v55;
          if (v55)
          {
            *(void *)(v18 + 1048) = 0;
            *(void *)(v18 + 1056) = v18 + 1048;
            *(void *)(v18 + 1080) = 0;
            *(void *)(v18 + 1088) = v18 + 1080;
            *(void *)(v18 + 1064) = 0;
            *(void *)(v18 + 1072) = v18 + 1064;
            CFAllocatorRef v56 = (const __CFAllocator *)FigGetAllocatorForMedia();
            CallbacksForUnsortedSampleBuffers = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
            uint64_t OnlyTimebase = CMBufferQueueCreate(v56, 0, CallbacksForUnsortedSampleBuffers, (CMBufferQueueRef *)(v18 + 856));
            if (OnlyTimebase) {
              goto LABEL_180;
            }
            CFAllocatorRef v59 = CFGetAllocator(a1);
            CFMutableArrayRef Mutable = CFArrayCreateMutable(v59, 0, MEMORY[0x1E4F1D510]);
            *(void *)(v18 + 1912) = Mutable;
            if (Mutable)
            {
              *(void *)(v18 + 2888) = 0;
              *(void *)(v18 + 2896) = v18 + 2888;
              CelestialGetStreamingBackBufferDuration();
              *(_DWORD *)(v18 + 2280) = (int)v61;
              *(_DWORD *)(v18 + 2284) = (int)v61;
              *(_DWORD *)(v18 + 2288) = -1;
              *(_DWORD *)(v18 + 1832) = 1065353216;
              *(_OWORD *)(v18 + 2488) = 0u;
              long long v126 = *MEMORY[0x1E4F1DB30];
              *(_OWORD *)(v18 + 2504) = *MEMORY[0x1E4F1DB30];
              *(void *)(v18 + 2624) = -1;
              *(void *)(v18 + 2104) = 0;
              *(_OWORD *)(v18 + 1952) = 0u;
              *(_DWORD *)(v18 + 1752) = -1;
              *(void *)(v18 + 2776) = 0;
              *(_OWORD *)(v18 + 2632) = 0u;
              *(_OWORD *)(v18 + 2648) = 0u;
              *(void *)(v18 + 2664) = 0;
              int v62 = (long long *)MEMORY[0x1E4F1F9F8];
              uint64_t v63 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
              *(void *)(v18 + 2696) = v63;
              long long v129 = *v62;
              *(_OWORD *)(v18 + 2680) = *v62;
              uint64_t v64 = MEMORY[0x1E4F1FA08];
              long long v65 = *MEMORY[0x1E4F1FA08];
              *(_OWORD *)(v18 + 2704) = *MEMORY[0x1E4F1FA08];
              uint64_t v66 = *(void *)(v64 + 16);
              *(void *)(v18 + 2720) = v66;
              *(_OWORD *)(v18 + 2728) = v129;
              *(void *)(v18 + 2744) = v63;
              *(_OWORD *)(v18 + 2752) = v65;
              *(void *)(v18 + 2768) = v66;
              *(void *)(v18 + 2828) = -1;
              *(void *)(v18 + 2800) = -1;
              *(unsigned char *)(v18 + 2808) = 0;
              *(unsigned char *)(v18 + 2816) = 0;
              *(_DWORD *)(v18 + 2820) = 0;
              *(_WORD *)(v18 + 2824) = 0;
              *(_DWORD *)(v18 + 2844) = 0;
              *(void *)(v18 + 2672) = 0;
              *(void *)(v18 + 2784) = 0;
              *(void *)(v18 + 2792) = 0;
              *(void *)(v18 + 2856) = 0xFFFFFFFF00000000;
              *(unsigned char *)(v18 + 2872) = 0;
              *(unsigned char *)(v18 + 1736) = 0;
              *(_WORD *)(v18 + 557) = 1;
              *(_DWORD *)(v18 + 2868) = -1;
              *(_DWORD *)(v18 + 560) = 0;
              *(unsigned char *)(v18 + 564) = 1;
              *(_DWORD *)(v18 + 876) = 0;
              *(void *)(v18 + 880) = CFRetain(@"TimeDomain");
              *(_DWORD *)(v18 + 888) = 1065353216;
              *(_WORD *)(v18 + 872) = 257;
              *(_OWORD *)(v18 + 1376) = v129;
              *(void *)(v18 + 1392) = v63;
              *(_OWORD *)(v18 + 1400) = v129;
              *(void *)(v18 + 1416) = v63;
              *(void *)(v18 + 2520) = 0;
              *(_DWORD *)(v18 + 2208) = 0;
              *(_OWORD *)(v18 + 3248) = v129;
              *(void *)(v18 + 3264) = v63;
              CFTypeID v67 = *(const void **)(v18 + 2536);
              if (v67)
              {
                CFRelease(v67);
                *(void *)(v18 + 2536) = 0;
              }
              uint64_t v68 = *(void *)(v18 + 32);
              uint64_t v69 = FigGetAllocatorForMedia();
              uint64_t v70 = FigAssetGetCMBaseObject(v68);
              uint64_t v71 = *(void *)(CMBaseObjectGetVTable() + 8);
              if (v71) {
                uint64_t v72 = v71;
              }
              else {
                uint64_t v72 = 0;
              }
              CFTypeID v73 = *(void (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v72 + 48);
              if (v73) {
                v73(v70, @"assetProperty_InstanceUUID", v69, &v136);
              }
              CFTypeRef v74 = v136;
              if (v136) {
                CFTypeRef v74 = CFRetain(v136);
              }
              *(void *)(v18 + 2536) = v74;
              uint64_t v75 = (uint64_t *)(v18 + 2544);
              FigReportingAgentCreateFromAsset(*(void *)(v18 + 32), 1, 0, (void *)(v18 + 2544));
              uint64_t v76 = *(void *)(v18 + 2544);
              if (v76)
              {
                uint64_t v77 = *(void *)(CMBaseObjectGetVTable() + 16);
                if (v77) {
                  uint64_t v78 = v77;
                }
                else {
                  uint64_t v78 = 0;
                }
                CFTypeID v79 = *(void (**)(uint64_t, void))(v78 + 104);
                if (v79) {
                  v79(v76, 0);
                }
                if (*v75)
                {
                  fpfsi_RTCReportingUpdateAutomaticallyWaitsToMinimizeStalling(v18, *(unsigned __int8 *)(DerivedStorage + 160));
                  uint64_t v80 = *(void *)(v18 + 32);
                  uint64_t v81 = FigGetAllocatorForMedia();
                  uint64_t v82 = FigAssetGetCMBaseObject(v80);
                  uint64_t v83 = *(void *)(CMBaseObjectGetVTable() + 8);
                  if (v83) {
                    uint64_t v84 = v83;
                  }
                  else {
                    uint64_t v84 = 0;
                  }
                  CFTypeID v85 = *(void (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v84 + 48);
                  if (v85) {
                    v85(v82, @"assetProperty_CreationTime", v81, &v137);
                  }
                  if (v137)
                  {
                    *(void *)(v18 + 2072) = FigCFNumberGetSInt64();
                    uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
                    uint64_t v87 = *(void *)(v18 + 2072);
                    if (v87)
                    {
                      if (!*(unsigned char *)(v18 + 2081))
                      {
                        uint64_t v121 = *v75;
                        if (*v75)
                        {
                          uint64_t v122 = UpTimeNanoseconds;
                          uint64_t v123 = *(void *)(CMBaseObjectGetVTable() + 16);
                          uint64_t v124 = v123 ? v123 : 0;
                          CFTypeID v125 = *(void (**)(uint64_t, uint64_t, uint64_t, unint64_t, void))(v124 + 56);
                          if (v125) {
                            v125(v121, 0x1EE582CD8, 0x1EE585BF8, (v122 - v87) / 0xF4240uLL, 0);
                          }
                        }
                      }
                    }
                  }
                  fpfsi_RTCReportingUpdateBufferedAirPlayOutput(v18, *(void *)(DerivedStorage + 504) != 0);
                }
              }
              *(_DWORD *)(v18 + 2568) = 0;
              *(CFAbsoluteTime *)(v18 + 2032) = CFAbsoluteTimeGetCurrent();
              if (FigRenderedLegibleOutputManagerIsSupported())
              {
                uint64_t v88 = FigGetAllocatorForMedia();
                uint64_t v27 = FigLegibleOutputManagerCreate(v88, (uint64_t)fpfs_postLegibleOutputNotification, (uint64_t)fpfs_postLegibleOutputFlushNotification, *(void *)(v18 + 16), (CFTypeRef *)(v18 + 1864));
                FigLegibleOutputManagerSetCaptionPipelineStrategy(*(dispatch_queue_t **)(v18 + 1864), *(unsigned char *)(DerivedStorage + 460) == 0);
                FigLegibleOutputManagerSetCaptionRenderingStrategy(*(dispatch_queue_t **)(v18 + 1864), *(unsigned char *)(DerivedStorage + 461) == 0);
                if (v27) {
                  goto LABEL_181;
                }
              }
              uint64_t OnlyTimebase = FigMetadataStorageCreate(&v143);
              if (!OnlyTimebase)
              {
                CFTypeRef v89 = v143;
                *(void *)(v18 + 1880) = v143;
                CFTypeRef v143 = 0;
                FPSupport_SetMetadataOutputCallbacks((uint64_t)v89, (uint64_t)fpfsi_postMetadataOutputChanged, (uint64_t)fpfsi_postMetadataOutputFlushed);
                uint64_t v90 = FigSimpleMutexCreate();
                *(void *)(v18 + 672) = v90;
                if (v90)
                {
                  CFTypeRef v91 = *(dispatch_queue_t **)(v18 + 1864);
                  if (v91) {
                    FigLegibleOutputManagerSetNonForcedEnabledForMediaType(v91, 1668047728, *(unsigned char *)(DerivedStorage + 210));
                  }
                  if ((unint64_t)CelestialGetSystemMemorySize() >= 0x10000001) {
                    uint64_t v92 = 0x2000000;
                  }
                  else {
                    uint64_t v92 = 0x1000000;
                  }
                  int CFPreferenceNumberWithDefault = FigGetCFPreferenceNumberWithDefault();
                  uint64_t v94 = (uint64_t)CFPreferenceNumberWithDefault << 20;
                  if (!CFPreferenceNumberWithDefault) {
                    uint64_t v94 = v92;
                  }
                  *(void *)(v18 + 536) = v94;
                  FigGetCFPreferenceOrOptionDoubleWithDefault();
                  float v96 = v95;
                  if (v96 < 0.0) {
                    float v96 = 3.0;
                  }
                  *(float *)(v18 + 928) = v96;
                  if (FPSupport_GetDisplayModeSwitchMonitor())
                  {
                    CMNotificationCenterGetDefaultLocalCenter();
                    FPSupport_GetDisplayModeSwitchMonitor();
                    FigNotificationCenterAddWeakListener();
                  }
                  uint64_t OnlyTimebase = fpfs_EstablishTimebase((const __CFArray *)v144);
                  if (OnlyTimebase) {
                    goto LABEL_180;
                  }
                  FigGetAllocatorForMedia();
                  CFTypeID v97 = (uint64_t *)(v18 + 584);
                  uint64_t OnlyTimebase = CMTimebaseCreateReadOnlyTimebase();
                  if (OnlyTimebase) {
                    goto LABEL_180;
                  }
                  uint64_t v98 = *v75;
                  if (v98)
                  {
                    uint64_t v99 = *v97;
                    uint64_t v100 = *(void *)(CMBaseObjectGetVTable() + 8);
                    uint64_t v101 = v100 ? v100 : 0;
                    int v102 = *(void (**)(uint64_t, uint64_t, uint64_t))(v101 + 56);
                    if (v102) {
                      v102(v98, 0x1EE547298, v99);
                    }
                  }
                  *(_WORD *)(v18 + 592) = 256;
                  *(_DWORD *)(v18 + 2976) = 0;
                  *(_OWORD *)(v18 + 3028) = v129;
                  *(void *)(v18 + 3044) = v63;
                  *(_DWORD *)(v18 + 3184) = FPSupport_InitialSeekIDForSource(1);
                  *(_OWORD *)(v18 + 3408) = xmmword_194993050;
                  *(void *)(v18 + 3424) = 0;
                  FigGetCFPreferenceNumberWithDefault();
                  *(unsigned char *)(v18 + 554) = FigGetCFPreferenceNumberWithDefault() != 0;
                  *(unsigned char *)(v18 + 555) = FigGetCFPreferenceNumberWithDefault() != 0;
                  *(unsigned char *)(v18 + 556) = FigGetCFPreferenceNumberWithDefault() != 0;
                  *(unsigned char *)(v18 + 465) = FigGetCFPreferenceNumberWithDefault() != 0;
                  *(_OWORD *)(v18 + 752) = v126;
                  uint64_t v103 = FigSimpleMutexCreate();
                  *(void *)(v18 + 768) = v103;
                  if (v103)
                  {
                    *(_WORD *)(v18 + 3176) = 257;
                    *(unsigned char *)(v18 + 3232) = 1;
                    fpfsi_UpdateHighWaterSecs(DerivedStorage, (uint64_t)v144);
                    if (*(unsigned char *)(DerivedStorage + 842))
                    {
                      CFTypeRef v104 = kFigReportingPlayerType_Interstitial;
                      CFTypeID v105 = v128;
                    }
                    else
                    {
                      CFTypeID v105 = v128;
                      if (*(_DWORD *)(DerivedStorage + 808) != 1) {
                        goto LABEL_137;
                      }
                      CFTypeRef v104 = kFigReportingPlayerType_Scrubber;
                    }
                    fpfsi_RTCReportingUpdatePlayerType(v18, (uint64_t)*v104);
LABEL_137:
                    FigCFDictionaryGetValueIfPresent();
                    if (v135)
                    {
                      CFTypeRef v106 = CFRetain(v135);
                      *(void *)(v18 + 3376) = v106;
                      if (v106)
                      {
                        CFTypeRef v107 = v106;
                        uint64_t v108 = *v97;
                        uint64_t v109 = *(void *)(CMBaseObjectGetVTable() + 8);
                        if (v109) {
                          uint64_t v110 = v109;
                        }
                        else {
                          uint64_t v110 = 0;
                        }
                        CFTypeID v111 = *(void (**)(CFTypeRef, void, uint64_t))(v110 + 56);
                        if (v111) {
                          v111(v107, *MEMORY[0x1E4F218B8], v108);
                        }
                        uint64_t v112 = *(void *)(v18 + 3376);
                        uint64_t v113 = *(void *)(v18 + 2536);
                        uint64_t v114 = *(void *)(CMBaseObjectGetVTable() + 8);
                        if (v114) {
                          uint64_t v115 = v114;
                        }
                        else {
                          uint64_t v115 = 0;
                        }
                        BOOL v116 = *(void (**)(uint64_t, void, uint64_t))(v115 + 56);
                        if (v116) {
                          v116(v112, *MEMORY[0x1E4F218B0], v113);
                        }
                        goto LABEL_151;
                      }
                    }
                    else
                    {
                      *(void *)(v18 + 3376) = 0;
                    }
                    FigGetAllocatorForMedia();
                    FigMetricEventTimelineCreate();
                    CFTypeID v105 = v128;
LABEL_151:
                    uint64_t v117 = FigGetAllocatorForMedia();
                    FigMetricEventSummarySubscriberCreate(v117, *(void *)(v18 + 3376), (uint64_t *)(v18 + 3384));
                    CFAllocatorRef v118 = (const __CFAllocator *)FigGetAllocatorForMedia();
                    FigMetricEventInitialLikelyToKeepUpSubscriberCreate(v118, *(void *)(v18 + 3376), (uint64_t *)(v18 + 3392));
                    CFSetAddValue(*(CFMutableSetRef *)(DerivedStorage + 64), v144);
                    fpfsi_RTCReportingUpdateAutomaticallyWaitsToMinimizeStalling(v18, *(unsigned __int8 *)(DerivedStorage + 160));
                    uint64_t v27 = 0;
                    *CFTypeID v105 = v144;
                    CFTypeRef v144 = 0;
                    uint64_t v15 = v127;
                    int v16 = (_DWORD *)MEMORY[0x1E4F1EB90];
LABEL_152:
                    if (v136) {
                      CFRelease(v136);
                    }
                    if (v137) {
                      CFRelease(v137);
                    }
                    if (v143) {
                      CFRelease(v143);
                    }
                    if (*MEMORY[0x1E4F1EBA0])
                    {
                      uint64_t v119 = fig_log_handle();
                      if (os_signpost_enabled(v119))
                      {
                        *(_DWORD *)buf = 134218752;
                        CFTypeID v158 = a1;
                        __int16 v159 = 2048;
                        CFTypeRef v160 = v144;
                        __int16 v161 = 2048;
                        uint64_t v162 = v15;
                        __int16 v163 = 2048;
                        uint64_t v164 = (int)v27;
                        _os_signpost_emit_with_name_impl(&dword_193E8D000, v119, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "PlayerStream_CreateItem", " enableTelemetry=YES player=%llu, item=%llu, itemOrdinal=%ld, error=%llu", buf, 0x2Au);
                      }
                    }
                    if (*v16) {
                      fig_gm_ktrace_wrapper();
                    }
                    fpfs_UnlockAndPostNotificationsWithCaller(a1);
LABEL_164:
                    if (!v27)
                    {
                      uint64_t v14 = FigStartForwardingMediaServicesProcessDeathNotification();
                      goto LABEL_166;
                    }
LABEL_167:
                    if (v131) {
                      CFRelease(v131);
                    }
                    return v27;
                  }
                }
                goto LABEL_179;
              }
LABEL_180:
              uint64_t v27 = OnlyTimebase;
LABEL_181:
              uint64_t v15 = v127;
              goto LABEL_185;
            }
          }
LABEL_179:
          uint64_t OnlyTimebase = FigSignalErrorAt();
          goto LABEL_180;
        }
      }
      uint64_t v27 = started;
    }
    else
    {
      uint64_t v27 = 4294954510;
    }
LABEL_185:
    int v16 = (_DWORD *)MEMORY[0x1E4F1EB90];
    if (v144) {
      CFRelease(v144);
    }
    goto LABEL_152;
  }

  return FigSignalErrorAt();
}

uint64_t fpfs_SetRateWithOptions(void *a1, uint64_t a2, float a3)
{
  return fpfs_SetRateWithOptionsGuts(a1, a2, 1, a3);
}

uint64_t fpfs_SetProperties(uint64_t a1, const __CFDictionary *a2, void *a3)
{
  return FPSupport_HandlePlayerSetPropertiesAndCopyModification(a1, a2, 0, (uint64_t)fpfs_handleSetProperty, 0, 0, a3);
}

uint64_t fpfs_ReevaluateRouteConfiguration(const void *a1)
{
  cf[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  CFTypeRef v33 = 0;
  if (a1)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    fpfs_LockMutexWithCaller((uint64_t)a1);
    CFArrayRef v3 = *(const __CFArray **)(DerivedStorage + 80);
    uint64_t v4 = (const void *)FigCFCopyCompactDescription();
    if (dword_1E9350BB0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (v4) {
      CFRelease(v4);
    }
    fpfs_setCachedRouteInfo();
    uint64_t v6 = *(void *)(DerivedStorage + 504);
    if (!v6) {
      goto LABEL_13;
    }
    uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
    uint64_t CMBaseObject = FigBufferedAirPlayOutputGetCMBaseObject(v6);
    uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v9) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v11 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v10 + 48);
    if (v11)
    {
      uint64_t v12 = v11(CMBaseObject, @"IsActiveConfigurationInvalid", AllocatorForMedia, &v33);
      if (v12) {
        goto LABEL_49;
      }
      if (v33 != (CFTypeRef)*MEMORY[0x1E4F1CFD0])
      {
LABEL_13:
        if (v3)
        {
LABEL_14:
          uint64_t v13 = CMBaseObjectGetDerivedStorage();
          LOBYTE(cf[0]) = 0;
          uint64_t v12 = fpfs_PlayQueueCallForEachItem((uint64_t)a1, (uint64_t (*)(const __CFArray *, uint64_t))fpfs_handleAvailableAudioFormatChange_Apply, (uint64_t)cf);
          if (!v12)
          {
            uint64_t v14 = CMBaseObjectGetDerivedStorage();
            cf[0] = 0;
            uint64_t v15 = *(void *)(v14 + 1048);
            if (v15)
            {
              int v16 = 0;
              CFTypeRef v17 = (CFTypeRef)*MEMORY[0x1E4F1CFD0];
              do
              {
                if (*(_DWORD *)(v15 + 32) == 1936684398)
                {
                  uint64_t v18 = *(void *)(v15 + 96);
                  if (v18)
                  {
                    uint64_t v19 = *(void *)(v18 + 32);
                    if (v19)
                    {
                      uint64_t v20 = FigGetAllocatorForMedia();
                      uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(v19);
                      uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 8);
                      if (v22) {
                        uint64_t v23 = v22;
                      }
                      else {
                        uint64_t v23 = 0;
                      }
                      uint64_t v24 = *(void (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v23 + 48);
                      if (v24) {
                        v24(FigBaseObject, @"IsPausedForConfigurationChange", v20, cf);
                      }
                      if (cf[0] == v17) {
                        int v16 = 1;
                      }
                      if (cf[0])
                      {
                        CFRelease(cf[0]);
                        cf[0] = 0;
                      }
                    }
                  }
                }
                uint64_t v15 = *(void *)(v15 + 8);
              }
              while (v15);
              if (v16)
              {
                uint64_t RenderingTrackofType = fpfs_FirstRenderingTrackofType((uint64_t)v3, 1936684398);
                fpfsi_restartAudioRendering((uint64_t)a1, (uint64_t)v3, v13, *(void *)(*(void *)(RenderingTrackofType + 96) + 32));
              }
            }
            goto LABEL_32;
          }
LABEL_49:
          uint64_t v26 = v12;
          goto LABEL_43;
        }
LABEL_32:
        uint64_t v26 = 0;
LABEL_43:
        fpfs_UnlockAndPostNotificationsWithCaller(a1);
        if (v33) {
          CFRelease(v33);
        }
        return v26;
      }
      if (dword_1E9350BB0)
      {
        uint64_t v27 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      uint64_t v28 = *(void *)(DerivedStorage + 504);
      uint64_t v29 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v29) {
        uint64_t v30 = v29;
      }
      else {
        uint64_t v30 = 0;
      }
      BOOL v31 = *(uint64_t (**)(uint64_t))(v30 + 48);
      if (v31)
      {
        uint64_t v12 = v31(v28);
        if (v12) {
          goto LABEL_49;
        }
        fpfs_stopResetDisturbReprepareAndResume(a1, v3, 0);
        if (v3) {
          goto LABEL_14;
        }
        goto LABEL_32;
      }
    }
    uint64_t v26 = 4294954514;
    goto LABEL_43;
  }

  return FigSignalErrorAt();
}

uint64_t fpfs_AddExternalStartupTask(const void *a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  fpfs_LockMutexWithCaller((uint64_t)a1);
  if (*(unsigned char *)(DerivedStorage + 51))
  {
    uint64_t v5 = FigSignalErrorAt();
  }
  else
  {
    CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 880), a2);
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListener();
    uint64_t v5 = 0;
  }
  fpfs_UnlockAndPostNotificationsWithCaller(a1);
  return v5;
}

uint64_t fpfs_RemoveExternalStartupTask(const void *a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2) {
    return 0;
  }
  uint64_t v5 = DerivedStorage;
  CFRetain(a2);
  fpfs_LockMutexWithCaller((uint64_t)a1);
  if (*(unsigned char *)(v5 + 51))
  {
    uint64_t v10 = FigSignalErrorAt();
  }
  else
  {
    CFArrayRef v6 = *(const __CFArray **)(v5 + 880);
    v12.length = CFArrayGetCount(v6);
    v12.location = 0;
    FirstIndexOfBoolean Value = CFArrayGetFirstIndexOfValue(v6, v12, a2);
    if (FirstIndexOfValue != -1)
    {
      CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v5 + 880), FirstIndexOfValue);
      CFArrayRef v8 = *(const __CFArray **)(v5 + 888);
      v13.length = CFArrayGetCount(v8);
      v13.location = 0;
      CFIndex v9 = CFArrayGetFirstIndexOfValue(v8, v13, a2);
      if (v9 != -1) {
        CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v5 + 888), v9);
      }
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
    }
    uint64_t v10 = 0;
  }
  fpfs_UnlockAndPostNotificationsWithCaller(a1);
  CFRelease(a2);
  return v10;
}

uint64_t fpfs_TransferOwnershipOfPlaybackItemFromPlayer(const void *a1, const void *a2, uint64_t a3)
{
  if (a3 && a1 && a2)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (dword_1E9350BB0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    fpfs_LockMutexWithCaller(a3);
    if (*(void *)DerivedStorage != a3 || *(unsigned char *)(DerivedStorage + 463))
    {
      uint64_t v12 = FigSignalErrorAt();
    }
    else
    {
      if ((const void *)a3 != a1)
      {
        uint64_t v8 = CMBaseObjectGetDerivedStorage();
        CFSetRemoveValue(*(CFMutableSetRef *)(v8 + 64), a2);
        fpfs_LockMutexWithCaller((uint64_t)a1);
        MEMORY[0x19970E910](*(void *)(DerivedStorage + 8));
        *(void *)uint64_t DerivedStorage = a1;
        MEMORY[0x19970E930](*(void *)(DerivedStorage + 8));
        fpfs_UnlockWithCaller();
        uint64_t v9 = CMBaseObjectGetDerivedStorage();
        uint64_t v10 = v9;
        if (*(void *)(DerivedStorage + 2544))
        {
          fpfsi_RTCReportingUpdateAutomaticallyWaitsToMinimizeStalling(DerivedStorage, *(unsigned __int8 *)(v9 + 160));
          fpfsi_RTCReportingUpdateBufferedAirPlayOutput(DerivedStorage, *(void *)(v10 + 504) != 0);
        }
        fpfsi_UpdateHighWaterSecs(v10, (uint64_t)a2);
        uint64_t v11 = *(dispatch_queue_t **)(DerivedStorage + 1864);
        if (v11)
        {
          FigLegibleOutputManagerSetCaptionPipelineStrategy(v11, *(unsigned char *)(v10 + 460) == 0);
          FigLegibleOutputManagerSetCaptionRenderingStrategy(*(dispatch_queue_t **)(DerivedStorage + 1864), *(unsigned char *)(v10 + 461) == 0);
          FigLegibleOutputManagerSetNonForcedEnabledForMediaType(*(dispatch_queue_t **)(DerivedStorage + 1864), 1668047728, *(unsigned char *)(v10 + 210));
        }
        CFSetAddValue(*(CFMutableSetRef *)(v10 + 64), a2);
        fpfs_UnlockAndPostNotificationsWithCaller(a1);
        return 0;
      }
      uint64_t v12 = 0;
    }
    fpfs_UnlockWithCaller();
    return v12;
  }

  return FigSignalErrorAt();
}

uint64_t fpfs_CopyDisplayedCVPixelBuffer(const void *a1, uint64_t a2, CVPixelBufferRef *a3)
{
  values = 0;
  if (a1 && a3)
  {
    fpfs_LockMutexWithCaller((uint64_t)a1);
    if (!*(void *)(CMBaseObjectGetDerivedStorage() + 80) || (uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage()) == 0)
    {
      uint64_t v13 = FigSignalErrorAt();
      fpfs_UnlockAndPostNotificationsWithCaller(a1);
      return v13;
    }
    uint64_t v6 = DerivedStorage;
    if ((FigCFDictionaryGetValueIfPresent() || FigCFDictionaryGetValueIfPresent())
      && FigCFArrayGetFirstIndexOfValue() != -1
      && (values = (void *)FigCFArrayGetValueAtIndex()) != 0)
    {
      CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
      CFArrayRef v8 = CFArrayCreate(AllocatorForMedia, (const void **)&values, 1, MEMORY[0x1E4F1D510]);
    }
    else
    {
      uint64_t v9 = *(const void **)(v6 + 656);
      if (!v9)
      {
        CFArrayRef v10 = 0;
        goto LABEL_14;
      }
      CFArrayRef v8 = (const __CFArray *)CFRetain(v9);
    }
    CFArrayRef v10 = v8;
LABEL_14:
    fpfs_UnlockAndPostNotificationsWithCaller(a1);
    uint64_t v11 = FPSupport_CopyCurrentlyDisplayedPixelBufferFromCAImageQueueArray(v10, (const __CFAllocator *)*MEMORY[0x1E4F1CF80], a3);
    if (v10) {
      CFRelease(v10);
    }
    return v11;
  }

  return FigSignalErrorAt();
}

void fpfs_postLegibleOutputNotification(const void *a1, uint64_t a2)
{
  CFTypeRef v5 = 0;
  CFTypeRef v6 = 0;
  if (!fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer(a2, &v5, &v6))
  {
    CFTypeRef v4 = v5;
    CFTypeRef v3 = v6;
    fpfs_EnqueueNotification(v5, @"LegibleOutputChanged", v6, a1);
    fpfs_UnlockAndPostNotificationsWithCaller(v4);
    if (v4) {
      CFRelease(v4);
    }
    if (v3)
    {
      CFRelease(v3);
    }
  }
}

void fpfs_postLegibleOutputFlushNotification(void *a1, uint64_t a2)
{
  CFTypeRef cf = 0;
  values = a1;
  CFTypeRef v6 = 0;
  if (!fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer(a2, &v6, &cf))
  {
    CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    CFDictionaryRef v3 = CFDictionaryCreate(AllocatorForMedia, (const void **)&kFigPlaybackItemParameter_LegibleOutputKey, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFTypeRef v4 = v6;
    if (v3)
    {
      CFDictionaryRef v5 = v3;
      fpfs_EnqueueNotification(v6, @"LegibleOutputWasFlushed", cf, v3);
      CFRelease(v5);
    }
    fpfs_UnlockAndPostNotificationsWithCaller(v4);
    if (v4) {
      CFRelease(v4);
    }
    if (cf) {
      CFRelease(cf);
    }
  }
}

void fpfsi_postMetadataOutputChanged(const void *a1, uint64_t a2, const __CFArray *a3, uint64_t a4)
{
  CFTypeRef cf = 0;
  CFTypeRef v15 = 0;
  if (fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer(a4, &v15, &cf))
  {
    CFTypeRef v13 = v15;
    if (v15) {
LABEL_14:
    }
      CFRelease(v13);
  }
  else
  {
    if (CFArrayGetCount(a3) >= 1)
    {
      int v6 = 0;
      CFIndex v7 = 0;
      CFStringRef v8 = (const __CFString *)*MEMORY[0x1E4F21A60];
      do
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(a3, v7);
        int valuePtr = 0;
        CFNumberRef v10 = (const __CFNumber *)CMGetAttachment(ValueAtIndex, v8, 0);
        if (v10)
        {
          CFNumberGetValue(v10, kCFNumberSInt32Type, &valuePtr);
          int v11 = valuePtr;
        }
        else
        {
          int v11 = 0;
        }
        if (!v6) {
          int v6 = v11;
        }
        ++v7;
      }
      while (v7 < CFArrayGetCount(a3));
    }
    MetadataOutputDataCallbackPayload = FPSupport_CreateMetadataOutputDataCallbackPayload(a3, a1);
    CFTypeRef v13 = v15;
    fpfs_EnqueueNotification(v15, @"MetadataOutputChanged", cf, MetadataOutputDataCallbackPayload);
    fpfs_UnlockAndPostNotificationsWithCaller(v13);
    if (MetadataOutputDataCallbackPayload) {
      CFRelease(MetadataOutputDataCallbackPayload);
    }
    if (v13) {
      goto LABEL_14;
    }
  }
  if (cf) {
    CFRelease(cf);
  }
}

void fpfsi_postMetadataOutputFlushed(void *a1, uint64_t a2)
{
  CFTypeRef cf = 0;
  CFTypeRef v7 = 0;
  if (fpfsi_CopyPlayerAndItemFromItemRetainProxyAndLockPlayer(a2, &v7, &cf))
  {
    CFTypeRef v4 = v7;
    if (v7) {
LABEL_5:
    }
      CFRelease(v4);
  }
  else
  {
    CFDictionaryRef MedadataOutputFlushCallbackPayload = FPSupport_CreateMedadataOutputFlushCallbackPayload(a1);
    CFTypeRef v4 = v7;
    fpfs_EnqueueNotification(v7, @"MetadataOutputWasFlushed", cf, MedadataOutputFlushCallbackPayload);
    fpfs_UnlockAndPostNotificationsWithCaller(v4);
    if (MedadataOutputFlushCallbackPayload) {
      CFRelease(MedadataOutputFlushCallbackPayload);
    }
    if (v4) {
      goto LABEL_5;
    }
  }
  CFTypeRef v5 = cf;
  if (cf)
  {
    CFRelease(v5);
  }
}

uint64_t fpfs_SetConnectionActive(void *a1, int a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1E9350BB0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a2) {
    int v6 = 2;
  }
  else {
    int v6 = *(unsigned char *)(DerivedStorage + 48) && !*(unsigned char *)(DerivedStorage + 50);
  }
  uint64_t updated = fpfs_updatePlayerActiveState(a1, v6);
  if (dword_1E9350BB0)
  {
    CFStringRef v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return updated;
}

uint64_t fpfs_DuckVolume(const void *a1, int a2, float a3, float a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1E9350BB0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  fpfs_LockMutexWithCaller((uint64_t)a1);
  if (*(unsigned char *)(DerivedStorage + 51))
  {
    uint64_t v15 = FigSignalErrorAt();
    goto LABEL_20;
  }
  float v10 = 0.0;
  if (a3 >= 0.0) {
    float v10 = a3;
  }
  if (a2)
  {
    if (v10 >= 1.0 || *(unsigned char *)(DerivedStorage + 512) != 0) {
      goto LABEL_19;
    }
    *(float *)(DerivedStorage + 516) = v10;
    char v12 = 1;
  }
  else
  {
    char v12 = 0;
    if (!*(unsigned char *)(DerivedStorage + 512))
    {
LABEL_19:
      uint64_t v15 = 0;
      goto LABEL_20;
    }
  }
  *(unsigned char *)(DerivedStorage + 512) = v12;
  uint64_t v13 = *(void *)(DerivedStorage + 80);
  if (!v13) {
    goto LABEL_19;
  }
  uint64_t v14 = fpfsi_applySoftwareVolume(v10, a4, v13, 2);
  uint64_t v15 = v14;
  if (a2 && a4 > 0.0 && !v14) {
    usleep((a4 * 1000.0 * 1000.0));
  }
LABEL_20:
  fpfs_UnlockAndPostNotificationsWithCaller(a1);
  return v15;
}

uint64_t fpfs_SilentMute(const void *a1, int a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1E9350BB0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  fpfs_LockMutexWithCaller((uint64_t)a1);
  if (!*(unsigned char *)(DerivedStorage + 51))
  {
    if (a2)
    {
      if (*(unsigned char *)(DerivedStorage + 520)) {
        goto LABEL_13;
      }
      char v6 = 1;
    }
    else
    {
      char v6 = 0;
      if (!*(unsigned char *)(DerivedStorage + 520)) {
        goto LABEL_13;
      }
    }
    *(unsigned char *)(DerivedStorage + 520) = v6;
    uint64_t v7 = *(void *)(DerivedStorage + 80);
    if (v7)
    {
      float v8 = 0.0;
      if (!a2) {
        float v8 = 1.0;
      }
      uint64_t v9 = fpfsi_applySoftwareVolume(v8, 0.0, v7, 5);
      goto LABEL_12;
    }
LABEL_13:
    uint64_t v10 = 0;
    goto LABEL_14;
  }
  uint64_t v9 = FigSignalErrorAt();
LABEL_12:
  uint64_t v10 = v9;
LABEL_14:
  fpfs_UnlockAndPostNotificationsWithCaller(a1);
  return v10;
}

uint64_t FigVCPTimedSampleGetTypeID()
{
  return sVCPTimedSampleClassID;
}

uint64_t vcp_timedSample_Register()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sVCPTimedSampleClassID = result;
  return result;
}

uint64_t FigVCPTimedSampleCreateWithPixelBuffer(uint64_t a1, CFTypeRef cf, uint64_t *a3)
{
  if (!cf)
  {
    int v7 = 2;
    goto LABEL_5;
  }
  CFTypeID v6 = CFGetTypeID(cf);
  if (v6 == CVPixelBufferGetTypeID())
  {
    int v7 = 0;
LABEL_5:
    long long v9 = *(_OWORD *)a1;
    uint64_t v10 = *(void *)(a1 + 16);
    return vcp_timedSample_createCommon(&v9, cf, v7, a3);
  }
  if (a3) {
    *a3 = 0;
  }

  return FigSignalErrorAt();
}

uint64_t vcp_timedSample_createCommon(long long *a1, const void *a2, int a3, uint64_t *a4)
{
  if ((*((_DWORD *)a1 + 3) & 0x1D) == 1)
  {
    MEMORY[0x19970EE10](&FigVCPTimedSampleGetTypeID_once, vcp_timedSample_Register);
    uint64_t Instance = _CFRuntimeCreateInstance();
    uint64_t v9 = Instance;
    if (Instance)
    {
      long long v10 = *a1;
      *(void *)(Instance + 32) = *((void *)a1 + 2);
      *(_OWORD *)(Instance + 16) = v10;
      if (a2) {
        CFTypeRef v11 = CFRetain(a2);
      }
      else {
        CFTypeRef v11 = 0;
      }
      uint64_t v12 = 0;
      *(void *)(v9 + 40) = v11;
      *(_DWORD *)(v9 + 48) = a3;
    }
    else
    {
      uint64_t v12 = FigSignalErrorAt();
    }
  }
  else
  {
    uint64_t v12 = FigSignalErrorAt();
    uint64_t v9 = 0;
  }
  if (a4)
  {
    *a4 = v9;
  }
  else if (v9)
  {
    CFRelease((CFTypeRef)v9);
  }
  return v12;
}

uint64_t FigVCPTimedSampleCreateWithSampleBuffer(uint64_t a1, CFTypeRef cf, uint64_t *a3)
{
  if (!cf)
  {
    int v7 = 2;
    goto LABEL_5;
  }
  CFTypeID v6 = CFGetTypeID(cf);
  if (v6 == CMSampleBufferGetTypeID())
  {
    int v7 = 1;
LABEL_5:
    long long v9 = *(_OWORD *)a1;
    uint64_t v10 = *(void *)(a1 + 16);
    return vcp_timedSample_createCommon(&v9, cf, v7, a3);
  }
  if (a3) {
    *a3 = 0;
  }

  return FigSignalErrorAt();
}

uint64_t FigVCPTimedSampleCreateWithNULL(uint64_t a1, uint64_t *a2)
{
  long long v3 = *(_OWORD *)a1;
  uint64_t v4 = *(void *)(a1 + 16);
  return vcp_timedSample_createCommon(&v3, 0, 2, a2);
}

uint64_t FigVCPTimedSampleGetPTS@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = MEMORY[0x1E4F1F9F8];
  *(_OWORD *)a2 = *MEMORY[0x1E4F1F9F8];
  *(void *)(a2 + 16) = *(void *)(v2 + 16);
  if (!result) {
    return FigSignalErrorAt();
  }
  *(_OWORD *)a2 = *(_OWORD *)(result + 16);
  *(void *)(a2 + 16) = *(void *)(result + 32);
  return result;
}

uint64_t FigVCPTimedSampleGetPixelBuffer(uint64_t a1, void *a2)
{
  if (a1)
  {
    uint64_t v3 = *(void *)(a1 + 40);
    if (!v3 || !*(_DWORD *)(a1 + 48))
    {
      uint64_t result = 0;
      if (!a2) {
        return result;
      }
      goto LABEL_5;
    }
  }
  uint64_t result = FigSignalErrorAt();
  if (a2)
  {
    uint64_t v3 = 0;
    if (result) {
LABEL_5:
    }
      *a2 = v3;
  }
  return result;
}

uint64_t FigVCPTimedSampleGetSampleBuffer(uint64_t a1, void *a2)
{
  if (a1)
  {
    uint64_t v3 = *(void *)(a1 + 40);
    if (!v3 || *(_DWORD *)(a1 + 48) == 1)
    {
      uint64_t result = 0;
      if (!a2) {
        return result;
      }
      goto LABEL_5;
    }
  }
  uint64_t result = FigSignalErrorAt();
  if (a2)
  {
    uint64_t v3 = 0;
    if (result) {
LABEL_5:
    }
      *a2 = v3;
  }
  return result;
}

BOOL FigVCPTimedSampleContainsNULL(BOOL result)
{
  if (result) {
    return *(_DWORD *)(result + 48) == 2;
  }
  return result;
}

BOOL FigVCPTimedSampleContainsPixelBuffer(BOOL result)
{
  if (result) {
    return *(_DWORD *)(result + 48) == 0;
  }
  return result;
}

BOOL FigVCPTimedSampleContainsSampleBuffer(BOOL result)
{
  if (result) {
    return *(_DWORD *)(result + 48) == 1;
  }
  return result;
}

CFArrayRef FigVCPGetTimedSampleAtTimeFromOrderedArray(const __CFArray *result, CMTime *a2)
{
  memset(&v12, 0, sizeof(v12));
  if (result)
  {
    CFArrayRef v3 = result;
    CFIndex Count = CFArrayGetCount(result);
    if (Count < 1)
    {
      return 0;
    }
    else
    {
      CFIndex v5 = Count;
      CFIndex v6 = 0;
      long long v9 = *MEMORY[0x1E4F1FA08];
      CMTimeEpoch v7 = *(void *)(MEMORY[0x1E4F1FA08] + 16);
      do
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v3, v6);
        FigVCPTimedSampleGetPTS((uint64_t)ValueAtIndex, (uint64_t)&v12);
        *(_OWORD *)&time1.CMTimeValue value = v9;
        time1.CMTimeEpoch epoch = v7;
        CMTime time2 = *a2;
        if (CMTimeCompare(&time1, &time2) <= 0)
        {
          CMTime time1 = v12;
          CMTime time2 = *a2;
          if (CMTimeCompare(&time1, &time2) >= 1) {
            break;
          }
        }
        ++v6;
      }
      while (v5 != v6);
      return (const __CFArray *)FigCFArrayGetValueAtIndex();
    }
  }
  return result;
}

uint64_t FigVCPGetPTSInTimedSampleArrayAtIndex@<X0>(uint64_t a1@<X8>)
{
  uint64_t ValueAtIndex = FigCFArrayGetValueAtIndex();

  return FigVCPTimedSampleGetPTS(ValueAtIndex, a1);
}

double vcp_timedSample_Init(uint64_t a1)
{
  *(void *)(a1 + 48) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

__n128 vcp_timedSample_Finalize(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 40);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 40) = 0;
  }
  uint64_t v3 = MEMORY[0x1E4F1F9F8];
  __n128 result = *(__n128 *)MEMORY[0x1E4F1F9F8];
  *(_OWORD *)(a1 + 16) = *MEMORY[0x1E4F1F9F8];
  *(void *)(a1 + 32) = *(void *)(v3 + 16);
  return result;
}

BOOL vcp_timedSample_Equal(_DWORD *cf, _DWORD *a2)
{
  if (cf == a2) {
    return 1;
  }
  uint64_t v14 = v2;
  uint64_t v15 = v3;
  if (!cf) {
    return 0;
  }
  if (!a2) {
    return 0;
  }
  CFTypeID v6 = CFGetTypeID(cf);
  MEMORY[0x19970EE10](&FigVCPTimedSampleGetTypeID_once, vcp_timedSample_Register);
  if (v6 != sVCPTimedSampleClassID) {
    return 0;
  }
  CFTypeID v7 = CFGetTypeID(a2);
  MEMORY[0x19970EE10](&FigVCPTimedSampleGetTypeID_once, vcp_timedSample_Register);
  if (v7 != sVCPTimedSampleClassID) {
    return 0;
  }
  memset(&v13, 0, sizeof(v13));
  FigVCPTimedSampleGetPTS((uint64_t)cf, (uint64_t)&v13);
  memset(&v12, 0, sizeof(v12));
  FigVCPTimedSampleGetPTS((uint64_t)a2, (uint64_t)&v12);
  CMTime time1 = v13;
  CMTime v10 = v12;
  if (CMTimeCompare(&time1, &v10)) {
    return 0;
  }
  int v8 = cf[12];
  if (!v8)
  {
    time1.CMTimeValue value = 0;
    v10.CMTimeValue value = 0;
    FigVCPTimedSampleGetPixelBuffer((uint64_t)cf, &time1);
    FigVCPTimedSampleGetPixelBuffer((uint64_t)a2, &v10);
    return time1.value && v10.value && time1.value == v10.value;
  }
  if (v8 != 2)
  {
    time1.CMTimeValue value = 0;
    v10.CMTimeValue value = 0;
    FigVCPTimedSampleGetSampleBuffer((uint64_t)cf, &time1);
    FigVCPTimedSampleGetSampleBuffer((uint64_t)a2, &v10);
    return time1.value && v10.value && time1.value == v10.value;
  }
  return a2[12] == 2;
}

CFStringRef vcp_timedSample_CopyFormattingDesc(uint64_t a1, CFDictionaryRef formatOptions)
{
  if (a1)
  {
    uint64_t v4 = *(int *)(a1 + 48);
    if (v4 > 2) {
      CFIndex v5 = "Unknown";
    }
    else {
      CFIndex v5 = off_1E57910A0[v4];
    }
    CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CMTime time = *(CMTime *)(a1 + 16);
    Float64 Seconds = CMTimeGetSeconds(&time);
    return CFStringCreateWithFormat(v8, formatOptions, @"<FigVCPTimedSample: %p> PTS %1.3f %s <%p>", a1, *(void *)&Seconds, v5, *(void *)(a1 + 40));
  }
  else
  {
    CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    return CFStringCreateWithFormat(v6, formatOptions, @"NULL FigVCPTimedSample");
  }
}

CFStringRef vcp_timedSample_CopyDebugDesc(uint64_t a1)
{
  return vcp_timedSample_CopyFormattingDesc(a1, 0);
}

uint64_t FigManifoldStartServer()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2000000000;
  int v6 = 0;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __FigManifoldStartServer_block_invoke;
  block[3] = &unk_1E57910C0;
  block[4] = &v3;
  if (FigManifoldStartServer_sFigManifoldServerSetupOnce != -1) {
    dispatch_once(&FigManifoldStartServer_sFigManifoldServerSetupOnce, block);
  }
  uint64_t v0 = *((unsigned int *)v4 + 6);
  _Block_object_dispose(&v3, 8);
  return v0;
}

void __FigManifoldStartServer_block_invoke(uint64_t a1)
{
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    CFMutableDictionaryRef v4 = Mutable;
    FigCFDictionarySetInt32();
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = FigXPCServerStart();
    CFRelease(v4);
  }
  else
  {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = FigSignalErrorAt();
  }
}

uint64_t manifoldServer_replyingMessageHandler(_xpc_connection_s *a1, void *a2, void *a3)
{
  int v99 = 0;
  CFTypeRef v97 = 0;
  CFTypeRef v98 = 0;
  OpCFIndex Code = FigXPCMessageGetOpCode();
  if (OpCode) {
    goto LABEL_19;
  }
  OpCFIndex Code = manifoldServer_copyManifoldAndCompanion((int)a1, a2, &v98, &v97);
  if (OpCode) {
    goto LABEL_19;
  }
  uint64_t v7 = 4294951138;
  if (v99 > 1768121971)
  {
    if (v99 > 1768846944)
    {
      if (v99 != 1768846945)
      {
        if (v99 != 1853056356)
        {
          if (v99 != 1920300146) {
            goto LABEL_113;
          }
          CFTypeRef v8 = v97;
          CFTypeRef v9 = v98;
          CMTime v12 = *(void **)(CMBaseObjectGetVTable() + 16);
          if (v12) {
            CMTime v13 = v12;
          }
          else {
            CMTime v13 = 0;
          }
          if (*v13 >= 2uLL)
          {
            CFAllocatorRef v59 = (uint64_t (*)(CFTypeRef))v13[7];
            if (v59) {
              goto LABEL_82;
            }
          }
          goto LABEL_112;
        }
        CFTypeRef v22 = v97;
        CFTypeRef v44 = v98;
        uint64_t OSStatus = FigXPCMessageGetOSStatus();
        uint64_t v46 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v46) {
          uint64_t v47 = v46;
        }
        else {
          uint64_t v47 = 0;
        }
        int v62 = *(uint64_t (**)(CFTypeRef, uint64_t))(v47 + 16);
        if (v62)
        {
          uint64_t v54 = v62(v44, OSStatus);
          goto LABEL_87;
        }
        goto LABEL_112;
      }
      uint64_t FigBaseObject = FigManifoldGetFigBaseObject(v98);
      if (!FigBaseObject)
      {
        uint64_t v7 = 4294954516;
        goto LABEL_113;
      }
      uint64_t v33 = FigBaseObject;
      uint64_t v34 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v34) {
        uint64_t v35 = v34;
      }
      else {
        uint64_t v35 = 0;
      }
      uint64_t v76 = *(uint64_t (**)(uint64_t))(v35 + 24);
      if (!v76) {
        goto LABEL_112;
      }
      OpCFIndex Code = v76(v33);
LABEL_19:
      uint64_t v7 = OpCode;
      goto LABEL_113;
    }
    if (v99 == 1768121972)
    {
      CFTypeRef v22 = v97;
      CFTypeRef v23 = v98;
      CFTypeRef cf = 0;
      uint64_t v101 = 0;
      int v102 = 0;
      uint64_t Int32 = FigXPCMessageGetInt32();
      if (xpc_dictionary_get_BOOL(a2, "installFormatDescriptionOrDecryptorChangedCallback")) {
        CFTypeRef cf = manifoldServer_formatDescriptionOrDecryptorChangedCallback;
      }
      if (xpc_dictionary_get_BOOL(a2, "installPushSampleBufferCallback")) {
        uint64_t v101 = manifoldServer_pushSampleBufferCallback;
      }
      if (xpc_dictionary_get_BOOL(a2, "installTrackEndedCallback")) {
        int v102 = manifoldServer_trackEndedCallback;
      }
      uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v25) {
        uint64_t v26 = v25;
      }
      else {
        uint64_t v26 = 0;
      }
      CFStringRef v53 = *(uint64_t (**)(CFTypeRef, uint64_t, CFTypeRef *, CFTypeRef))(v26 + 32);
      if (v53)
      {
        uint64_t v54 = v53(v23, Int32, &cf, v22);
LABEL_87:
        uint64_t v7 = v54;
        if (v54) {
          goto LABEL_113;
        }
        uint64_t v60 = a3;
        uint64_t v61 = (uint64_t)v22;
        goto LABEL_89;
      }
LABEL_112:
      uint64_t v7 = 4294954514;
      goto LABEL_113;
    }
    if (v99 != 1768186228) {
      goto LABEL_113;
    }
    if (v97)
    {
      CFArrayRemoveAllValues(*((CFMutableArrayRef *)v97 + 11));
      uint64_t v14 = v97;
    }
    else
    {
      uint64_t v14 = 0;
    }
    CFTypeRef v48 = v98;
    CFTypeRef cf = 0;
    uint64_t v105 = 0;
    CMBlockBufferRef blockBufferOut = 0;
    CFTypeRef v103 = 0;
    CFTypeRef value = 0;
    int64_t int64 = xpc_dictionary_get_int64(a2, "dataStartReference");
    uint64_t int64 = xpc_dictionary_get_uint64(a2, "injectFlags");
    if (xpc_dictionary_get_value(a2, "emptyData"))
    {
      CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
      uint64_t Empty = CMBlockBufferCreateEmpty(AllocatorForMedia, 0, 0, (CMBlockBufferRef *)&cf);
    }
    else
    {
      if (!xpc_dictionary_get_value(a2, "data")) {
        goto LABEL_59;
      }
      FigGetAllocatorForMedia();
      uint64_t Empty = FigXPCMessageCopyBlockBufferUsingMemoryRecipient();
    }
    uint64_t v7 = Empty;
    if (Empty)
    {
LABEL_162:
      if (value) {
        CFRelease(value);
      }
      if (v103) {
        CFRelease(v103);
      }
      if (blockBufferOut) {
        CFRelease(blockBufferOut);
      }
      if (v105) {
        CFRelease((CFTypeRef)v105);
      }
      goto LABEL_25;
    }
LABEL_59:
    if (!xpc_dictionary_get_BOOL(a2, "UseAESCryptor"))
    {
      if (!xpc_dictionary_get_uint64(a2, "cryptorObjectID")
        || (FigGetAllocatorForMedia(), uint64_t updated = FigCPECryptorRemoteRetainCopiedCryptor(), !updated))
      {
        if (!xpc_dictionary_get_uint64(a2, "audioCryptorObjectID")) {
          goto LABEL_148;
        }
        FigGetAllocatorForMedia();
        uint64_t updated = FigCPECryptorRemoteRetainCopiedCryptor();
        if (!updated) {
          goto LABEL_148;
        }
      }
      goto LABEL_160;
    }
    if (xpc_dictionary_get_BOOL(a2, "UseExistingAESCryptor"))
    {
      uint64_t v55 = (void *)v14[14];
      if (v55) {
        uint64_t v55 = (void *)CFRetain(v55);
      }
      CMBlockBufferRef blockBufferOut = (CMBlockBufferRef)v55;
    }
    else
    {
      uint64_t v71 = v14[13];
      if (!v71)
      {
        uint64_t v72 = FigGetAllocatorForMedia();
        uint64_t updated = FigCPEProtectorCreateForScheme(v72, @"com.apple.basicAES", 0, (uint64_t)(v14 + 13));
        if (updated) {
          goto LABEL_160;
        }
        uint64_t v71 = v14[13];
      }
      uint64_t v73 = FigGetAllocatorForMedia();
      uint64_t v74 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v74) {
        uint64_t v75 = v74;
      }
      else {
        uint64_t v75 = 0;
      }
      CFTypeID v79 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, CMBlockBufferRef *))(v75 + 104);
      if (!v79) {
        goto LABEL_161;
      }
      uint64_t updated = v79(v71, v73, 1, 0, &blockBufferOut);
      if (updated)
      {
LABEL_160:
        uint64_t v7 = updated;
        goto LABEL_162;
      }
      uint64_t v80 = (const void *)v14[14];
      CMBlockBufferRef v81 = blockBufferOut;
      v14[14] = blockBufferOut;
      if (v81) {
        CFRetain(v81);
      }
      if (v80) {
        CFRelease(v80);
      }
      uint64_t v55 = blockBufferOut;
    }
    if (!v55) {
      goto LABEL_148;
    }
    uint64_t updated = FigXPCMessageCopyCFData();
    if (!updated)
    {
      uint64_t updated = FigXPCMessageCopyCFData();
      if (!updated)
      {
        CFTypeRef v82 = value;
        if (!value) {
          goto LABEL_142;
        }
        CMBlockBufferRef v83 = blockBufferOut;
        uint64_t v84 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v84) {
          uint64_t v85 = v84;
        }
        else {
          uint64_t v85 = 0;
        }
        uint64_t v86 = *(uint64_t (**)(CMBlockBufferRef, void, CFTypeRef))(v85 + 56);
        if (!v86) {
          goto LABEL_161;
        }
        uint64_t updated = v86(v83, *MEMORY[0x1E4F1FDB8], v82);
        if (!updated)
        {
LABEL_142:
          CFTypeRef v87 = v103;
          if (!v103) {
            goto LABEL_148;
          }
          CMBlockBufferRef v88 = blockBufferOut;
          uint64_t v89 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v89) {
            uint64_t v90 = v89;
          }
          else {
            uint64_t v90 = 0;
          }
          CFTypeRef v91 = *(uint64_t (**)(CMBlockBufferRef, void, CFTypeRef))(v90 + 56);
          if (!v91) {
            goto LABEL_161;
          }
          uint64_t updated = v91(v88, *MEMORY[0x1E4F1FDA8], v87);
          if (!updated)
          {
LABEL_148:
            if (blockBufferOut)
            {
              CMSetAttachment(cf, @"FMFD_BufferDecryptor", blockBufferOut, 1u);
              if (v105) {
                CMSetAttachment(cf, @"FMFD_BufferAudioDecryptor", (CFTypeRef)v105, 1u);
              }
            }
            if (xpc_dictionary_get_BOOL(a2, "timedMetadata")) {
              CMSetAttachment(cf, @"FBPAKey_TimedData", @"FBPA_TimedData_ICY", 1u);
            }
            uint64_t updated = FigMemoryOriginUpdateRecipientStateFromXPCMessage();
            if (updated) {
              goto LABEL_160;
            }
            CFTypeRef v92 = cf;
            uint64_t v93 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v93) {
              uint64_t v94 = v93;
            }
            else {
              uint64_t v94 = 0;
            }
            double v95 = *(uint64_t (**)(CFTypeRef, int64_t, uint64_t, CFTypeRef))(v94 + 8);
            if (v95)
            {
              uint64_t updated = v95(v48, int64, uint64, v92);
              if (!updated)
              {
                manifoldServer_copyPendingCallbacksIntoReply(a3, (uint64_t)v14);
                uint64_t updated = FigMemoryRecipientAppendRecipientStateUpdateToXPCMessage();
              }
              goto LABEL_160;
            }
LABEL_161:
            uint64_t v7 = 4294954514;
            goto LABEL_162;
          }
        }
      }
    }
    goto LABEL_160;
  }
  if (v99 > 1668310627)
  {
    if (v99 != 1668310628)
    {
      if (v99 != 1668575856)
      {
        if (v99 != 1718383464) {
          goto LABEL_113;
        }
        CFTypeRef v8 = v97;
        CFTypeRef v9 = v98;
        uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v10) {
          uint64_t v11 = v10;
        }
        else {
          uint64_t v11 = 0;
        }
        CFAllocatorRef v59 = *(uint64_t (**)(CFTypeRef))(v11 + 40);
        if (v59)
        {
LABEL_82:
          uint64_t v7 = v59(v9);
          if (v7) {
            goto LABEL_113;
          }
          uint64_t v60 = a3;
          uint64_t v61 = (uint64_t)v8;
LABEL_89:
          manifoldServer_copyPendingCallbacksIntoReply(v60, v61);
          goto LABEL_113;
        }
        goto LABEL_112;
      }
      CFTypeRef v36 = v97;
      CFTypeRef v37 = v98;
      CFTypeRef cf = 0;
      CMBlockBufferRef blockBufferOut = 0;
      uint64_t v38 = FigXPCMessageCopyCFString();
      if (!v38)
      {
        if (cf)
        {
          uint64_t v39 = FigXPCMessageGetInt32();
          CFTypeRef v40 = cf;
          uint64_t v41 = FigGetAllocatorForMedia();
          uint64_t v42 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v42) {
            uint64_t v43 = v42;
          }
          else {
            uint64_t v43 = 0;
          }
          uint64_t v70 = *(uint64_t (**)(CFTypeRef, uint64_t, CFTypeRef, uint64_t, CMBlockBufferRef *))(v43 + 48);
          if (!v70)
          {
            uint64_t v7 = 4294954514;
            goto LABEL_179;
          }
          uint64_t v38 = v70(v37, v39, v40, v41, &blockBufferOut);
          if (!v38)
          {
            uint64_t v7 = FigXPCMessageSetCFObject();
            if (!v7) {
              manifoldServer_copyPendingCallbacksIntoReply(a3, (uint64_t)v36);
            }
            goto LABEL_179;
          }
        }
        else
        {
          uint64_t v38 = FigSignalErrorAt();
        }
      }
      uint64_t v7 = v38;
      goto LABEL_179;
    }
    CFTypeRef v27 = v97;
    CFTypeRef v28 = v98;
    CFTypeRef cf = 0;
    uint64_t v29 = FigXPCMessageGetInt32();
    uint64_t v30 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v30) {
      uint64_t v31 = v30;
    }
    else {
      uint64_t v31 = 0;
    }
    int v57 = *(uint64_t (**)(CFTypeRef, uint64_t, CFTypeRef *))(v31 + 24);
    if (v57)
    {
      uint64_t v58 = v57(v28, v29, &cf);
      if (v58)
      {
        uint64_t v7 = v58;
      }
      else
      {
        uint64_t v7 = FigXPCMessageSetFormatDescription();
        if (!v7) {
          manifoldServer_copyPendingCallbacksIntoReply(a3, (uint64_t)v27);
        }
      }
    }
    else
    {
      uint64_t v7 = 4294954514;
    }
LABEL_25:
    uint64_t v15 = cf;
    if (!cf) {
      goto LABEL_113;
    }
    goto LABEL_26;
  }
  if (v99 != 778268793)
  {
    if (v99 != 779314548) {
      goto LABEL_113;
    }
    OpCFIndex Code = FigXPCHandleStdSetPropertyMessage();
    goto LABEL_19;
  }
  CFTypeRef v16 = v98;
  CFTypeRef cf = 0;
  uint64_t v105 = 0;
  CMBlockBufferRef blockBufferOut = 0;
  CFTypeRef value = 0;
  uint64_t v17 = FigXPCMessageCopyCFString();
  if (v17) {
    goto LABEL_138;
  }
  CFTypeRef v18 = cf;
  if (!cf)
  {
    uint64_t v17 = FigSignalErrorAt();
    goto LABEL_138;
  }
  uint64_t v19 = FigGetAllocatorForMedia();
  uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v20) {
    uint64_t v21 = v20;
  }
  else {
    uint64_t v21 = 0;
  }
  uint64_t v63 = *(uint64_t (**)(CFTypeRef, CFTypeRef, uint64_t, CMBlockBufferRef *))(v21 + 48);
  if (!v63) {
    goto LABEL_176;
  }
  uint64_t v17 = v63(v16, v18, v19, &blockBufferOut);
  if (v17)
  {
LABEL_138:
    uint64_t v7 = v17;
    goto LABEL_177;
  }
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      if (blockBufferOut)
      {
        CFTypeID v78 = CFGetTypeID(blockBufferOut);
        if (v78 == CMBlockBufferGetTypeID()) {
          FigXPCMessageSetBlockBuffer();
        }
      }
      goto LABEL_122;
    }
    uint64_t v17 = FigXPCMessageSetCFObject();
    goto LABEL_138;
  }
  if (!blockBufferOut || (CFTypeID v64 = CFGetTypeID(blockBufferOut), v64 != FigAssetGetTypeID()))
  {
LABEL_122:
    uint64_t v7 = 0;
    goto LABEL_177;
  }
  CMBlockBufferRef v65 = blockBufferOut;
  uint64_t v66 = FigGetAllocatorForMedia();
  uint64_t CMBaseObject = FigAssetGetCMBaseObject(v65);
  uint64_t v68 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v68) {
    uint64_t v69 = v68;
  }
  else {
    uint64_t v69 = 0;
  }
  float v96 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, uint64_t *))(v69 + 48);
  if (v96)
  {
    uint64_t v17 = v96(CMBaseObject, @"assetProperty_FormatReader", v66, &v105);
    if (!v17)
    {
      if (!v105)
      {
        uint64_t v7 = 0;
        goto LABEL_179;
      }
      uint64_t v7 = FigXPCFormatReaderServerAssociateCopiedNeighborFormatReader(a1, v105);
      if (!v7) {
        xpc_dictionary_set_uint64(a3, "formatReader", (uint64_t)value);
      }
      goto LABEL_177;
    }
    goto LABEL_138;
  }
LABEL_176:
  uint64_t v7 = 4294954514;
LABEL_177:
  if (v105) {
    CFRelease((CFTypeRef)v105);
  }
LABEL_179:
  if (cf) {
    CFRelease(cf);
  }
  uint64_t v15 = blockBufferOut;
  if (blockBufferOut) {
LABEL_26:
  }
    CFRelease(v15);
LABEL_113:
  if (v97) {
    CFRelease(v97);
  }
  if (v98) {
    CFRelease(v98);
  }
  return v7;
}

uint64_t manifoldServer_noReplyMessageHandler(int a1, void *a2)
{
  int v15 = 0;
  CFTypeRef v13 = 0;
  CFTypeRef v14 = 0;
  OpCFIndex Code = manifoldServer_copyManifoldAndCompanion(a1, a2, &v14, &v13);
  if (OpCode || (OpCFIndex Code = FigXPCMessageGetOpCode(), OpCode))
  {
    uint64_t v10 = OpCode;
  }
  else if (v15 == 1684632432)
  {
    CFTypeRef cf = 0;
    CFTypeRef v17 = 0;
    xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E4F20280]);
    uint64_t v5 = manifoldServer_copyManifoldAndCompanion(a1, a2, &v17, &cf);
    if (!v5)
    {
      uint64_t FigBaseObject = FigManifoldGetFigBaseObject(v17);
      if (FigBaseObject)
      {
        uint64_t v7 = FigBaseObject;
        uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v9 = v8 ? v8 : 0;
        uint64_t v11 = *(void (**)(uint64_t))(v9 + 24);
        if (v11) {
          v11(v7);
        }
      }
      uint64_t v5 = FigXPCServerDisassociateObjectWithConnection();
    }
    uint64_t v10 = v5;
    if (cf) {
      CFRelease(cf);
    }
    if (v17) {
      CFRelease(v17);
    }
  }
  else
  {
    uint64_t v10 = 4294951138;
  }
  if (v13) {
    CFRelease(v13);
  }
  if (v14) {
    CFRelease(v14);
  }
  return v10;
}

uint64_t manifoldServer_copyManifoldAndCompanion(int a1, xpc_object_t xdict, void *a3, void *a4)
{
  if (!xpc_dictionary_get_uint64(xdict, (const char *)*MEMORY[0x1E4F20280])) {
    return FigSignalErrorAt();
  }
  uint64_t v6 = FigXPCServerLookupAndRetainAssociatedObject();
  if (v6) {
    return v6;
  }
  if (a3) {
    *a3 = 0;
  }
  uint64_t v7 = 0;
  if (a4) {
    *a4 = 0;
  }
  return v7;
}

uint64_t manifoldServer_newTrackCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v15[0] = manifoldServer_formatDescriptionOrDecryptorChangedCallback;
  v15[1] = manifoldServer_pushSampleBufferCallback;
  v15[2] = manifoldServer_trackEndedCallback;
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(v8 + 32);
  if (v9)
  {
    uint64_t v10 = v9(a1, a4, v15, a2);
    if (v10 || (uint64_t v10 = manifoldServer_ensurePendingCallbacksState(a2), v10))
    {
      uint64_t v13 = v10;
    }
    else
    {
      xpc_object_t empty = xpc_dictionary_create_empty();
      CMTime v12 = empty;
      if (empty)
      {
        xpc_dictionary_set_uint64(empty, "callbackType", 1uLL);
        FigXPCMessageSetInt32();
        FigXPCMessageSetInt32();
        xpc_array_append_value(*(xpc_object_t *)(a2 + 64), v12);
        uint64_t v13 = 0;
      }
      else
      {
        uint64_t v13 = FigSignalErrorAt();
      }
    }
  }
  else
  {
    uint64_t v13 = 4294954514;
  }
  FigXPCRelease();
  return v13;
}

uint64_t manifoldServer_allNewTracksReadyCallback(uint64_t a1, uint64_t a2)
{
  if (!manifoldServer_ensurePendingCallbacksState(a2))
  {
    xpc_object_t empty = xpc_dictionary_create_empty();
    CFMutableDictionaryRef v4 = empty;
    if (empty)
    {
      xpc_dictionary_set_uint64(empty, "callbackType", 0);
      xpc_array_append_value(*(xpc_object_t *)(a2 + 64), v4);
    }
    else
    {
      FigSignalErrorAt();
    }
  }

  return FigXPCRelease();
}

uint64_t manifoldServer_errorCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = manifoldServer_ensurePendingCallbacksState(a3);
  if (v4)
  {
    uint64_t v7 = v4;
  }
  else
  {
    xpc_object_t empty = xpc_dictionary_create_empty();
    uint64_t v6 = empty;
    if (empty)
    {
      xpc_dictionary_set_uint64(empty, "callbackType", 2uLL);
      FigXPCMessageSetInt32();
      FigXPCMessageSetOSStatus();
      FigXPCMessageSetCFDictionary();
      xpc_array_append_value(*(xpc_object_t *)(a3 + 64), v6);
      uint64_t v7 = 0;
    }
    else
    {
      uint64_t v7 = FigSignalErrorAt();
    }
  }
  FigXPCRelease();
  return v7;
}

void manifoldServer_companionDestructor(CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t __FigManifoldServerCompanionGetTypeID_block_invoke()
{
  uint64_t result = _CFRuntimeRegisterClass();
  gServerCompanionuint64_t TypeID = result;
  return result;
}

void manifoldServerCompanion_finalize(void *a1)
{
  uint64_t FigBaseObject = FigManifoldGetFigBaseObject(a1[7]);
  if (FigBaseObject)
  {
    uint64_t v3 = FigBaseObject;
    uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v5 = v4 ? v4 : 0;
    uint64_t v6 = *(void (**)(uint64_t))(v5 + 24);
    if (v6) {
      v6(v3);
    }
  }
  uint64_t v7 = (void *)a1[2];
  if (v7)
  {
    a1[2] = 0;
    xpc_release(v7);
  }
  uint64_t v8 = (void *)a1[8];
  if (v8)
  {
    a1[8] = 0;
    xpc_release(v8);
  }
  uint64_t v9 = (const void *)a1[4];
  if (v9)
  {
    CFRelease(v9);
    a1[4] = 0;
  }
  uint64_t v10 = (const void *)a1[5];
  if (v10)
  {
    CFRelease(v10);
    a1[5] = 0;
  }
  uint64_t v11 = (const void *)a1[7];
  if (v11)
  {
    CFRelease(v11);
    a1[7] = 0;
  }
  CMTime v12 = (const void *)a1[11];
  if (v12)
  {
    CFRelease(v12);
    a1[11] = 0;
  }
  uint64_t v13 = (const void *)a1[9];
  if (v13)
  {
    CFRelease(v13);
    a1[9] = 0;
  }
  CFTypeRef v14 = (const void *)a1[10];
  if (v14)
  {
    CFRelease(v14);
    a1[10] = 0;
  }
  int v15 = (const void *)a1[12];
  if (v15)
  {
    CFRelease(v15);
    a1[12] = 0;
  }
  CFTypeRef v16 = (const void *)a1[13];
  if (v16)
  {
    CFRelease(v16);
    a1[13] = 0;
  }
  CFTypeRef v17 = (const void *)a1[14];
  if (v17)
  {
    CFRelease(v17);
    a1[14] = 0;
  }
  CFTypeRef v18 = (void *)a1[6];
  if (v18)
  {
    os_release(v18);
    a1[6] = 0;
  }
}

CFStringRef manifoldServerCompanion_copyDebugDesc(uint64_t a1)
{
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  return CFStringCreateWithFormat(AllocatorForMedia, 0, @"[FigManifoldServerCompanion %p objectID %lld]", a1, *(void *)(a1 + 24));
}

uint64_t manifoldServer_formatDescriptionOrDecryptorChangedCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = manifoldServer_ensurePendingCallbacksState(a3);
  if (v8)
  {
    uint64_t v12 = v8;
    goto LABEL_11;
  }
  xpc_object_t empty = xpc_dictionary_create_empty();
  uint64_t v10 = empty;
  if (!empty)
  {
    uint64_t ID = FigSignalErrorAt();
    goto LABEL_14;
  }
  xpc_dictionary_set_uint64(empty, "callbackType", 3uLL);
  FigXPCMessageSetInt32();
  if (a4)
  {
    uint64_t ID = FigXPCMessageSetFormatDescription();
    if (ID) {
      goto LABEL_14;
    }
  }
  if (a5)
  {
    FigBasicAESCPECryptorGetClassID();
    if (CMBaseObjectIsMemberOfClass())
    {
      xpc_dictionary_set_BOOL(v10, "useDummyAESCryptor", 1);
LABEL_9:
      xpc_dictionary_set_uint64(v10, "cryptorObjectID", 0);
      goto LABEL_10;
    }
    uint64_t ID = FigCPECryptorRemoteGetID();
    if (!ID) {
      goto LABEL_9;
    }
LABEL_14:
    uint64_t v12 = ID;
    goto LABEL_11;
  }
LABEL_10:
  xpc_array_append_value(*(xpc_object_t *)(a3 + 64), v10);
  uint64_t v12 = 0;
LABEL_11:
  FigXPCRelease();
  return v12;
}

uint64_t manifoldServer_pushSampleBufferCallback(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, int64_t a5, const void *a6)
{
  uint64_t v10 = manifoldServer_ensurePendingCallbacksState(a3);
  if (v10)
  {
    uint64_t v13 = v10;
  }
  else
  {
    xpc_object_t empty = xpc_dictionary_create_empty();
    uint64_t v12 = empty;
    if (empty)
    {
      xpc_dictionary_set_uint64(empty, "callbackType", 4uLL);
      FigXPCMessageSetInt32();
      xpc_dictionary_set_uint64(v12, "pushSampleFlags", a4);
      xpc_dictionary_set_int64(v12, "dataStartReference", a5);
      uint64_t v13 = FigXPCMessageAddCMSampleBuffer();
      if (!v13)
      {
        xpc_array_append_value(*(xpc_object_t *)(a3 + 64), v12);
        CFArrayAppendValue(*(CFMutableArrayRef *)(a3 + 88), a6);
      }
    }
    else
    {
      uint64_t v13 = FigSignalErrorAt();
    }
  }
  FigXPCRelease();
  return v13;
}

uint64_t manifoldServer_trackEndedCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = manifoldServer_ensurePendingCallbacksState(a3);
  if (v4)
  {
    uint64_t v7 = v4;
  }
  else
  {
    xpc_object_t empty = xpc_dictionary_create_empty();
    uint64_t v6 = empty;
    if (empty)
    {
      xpc_dictionary_set_uint64(empty, "callbackType", 5uLL);
      FigXPCMessageSetInt32();
      FigXPCMessageSetOSStatus();
      xpc_array_append_value(*(xpc_object_t *)(a3 + 64), v6);
      uint64_t v7 = 0;
    }
    else
    {
      uint64_t v7 = FigSignalErrorAt();
    }
  }
  FigXPCRelease();
  return v7;
}

uint64_t manifoldServer_ensurePendingCallbacksState(uint64_t a1)
{
  if (*(void *)(a1 + 64)) {
    return 0;
  }
  xpc_object_t empty = xpc_array_create_empty();
  *(void *)(a1 + 64) = empty;
  if (empty) {
    return 0;
  }

  return FigSignalErrorAt();
}

void manifoldServer_copyPendingCallbacksIntoReply(void *a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a2 + 64);
  if (v2)
  {
    xpc_dictionary_set_value(a1, "pendingCallbacks", v2);
    uint64_t v4 = *(void **)(a2 + 64);
    if (v4)
    {
      *(void *)(a2 + 64) = 0;
      xpc_release(v4);
    }
  }
}

uint64_t FigPlayerAsyncCreateWithOptions(uint64_t a1, const void *a2, const __CFDictionary *a3, void *a4)
{
  CFTypeRef cf = 0;
  CFTypeRef v20 = 0;
  CFTypeRef value = 0;
  if (!a4 || (*a4 = 0, !a2))
  {
    uint64_t Common = FigSignalErrorAt();
LABEL_22:
    uint64_t v11 = Common;
    goto LABEL_18;
  }
  uint64_t Common = playerasync_createCommon();
  if (Common) {
    goto LABEL_22;
  }
  CFTypeRef v8 = v20;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(void *)(DerivedStorage + 16) = CFRetain(a2);
  CMNotificationCenterGetDefaultLocalCenter();
  uint64_t Common = FigNotificationCenterAddWeakListener();
  if (Common) {
    goto LABEL_22;
  }
  *(unsigned char *)(DerivedStorage + 5) = 1;
  uint64_t Common = fpa_checkSubPlayerHealth((uint64_t)a2);
  if (Common) {
    goto LABEL_22;
  }
  if (a3)
  {
    CFDictionaryGetValueIfPresent(a3, @"InterstitialPrimaryPlayerName", (const void **)&value);
    BOOL v10 = value != 0;
  }
  else
  {
    BOOL v10 = 0;
  }
  *(unsigned char *)(DerivedStorage + 144) = v10;
  uint64_t v11 = FigDispatchQueueHolderCreateWithDispatchQueue();
  CFTypeRef v12 = cf;
  if (!v11)
  {
    uint64_t FigBaseObject = FigPlayerGetFigBaseObject(a2);
    uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v14) {
      uint64_t v15 = v14;
    }
    else {
      uint64_t v15 = 0;
    }
    CFTypeRef v16 = *(void (**)(uint64_t, uint64_t, CFTypeRef))(v15 + 56);
    if (v16) {
      v16(FigBaseObject, 0x1EE546078, v12);
    }
    *a4 = v8;
    CFTypeRef v20 = 0;
    CFTypeRef v12 = cf;
  }
  if (v12) {
    CFRelease(v12);
  }
LABEL_18:
  if (v20) {
    CFRelease(v20);
  }
  return v11;
}

uint64_t playerasync_createCommon()
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  CFTypeRef value = 0;
  CFTypeRef cf = 0;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v6 = 0u;
  long long v7 = 0u;
  *(_OWORD *)__str = 0u;
  FigKTraceInit();
  FigPlayerGetClassID();
  uint64_t v0 = CMDerivedObjectCreate();
  if (!v0) {
    uint64_t v0 = FigSignalErrorAt();
  }
  uint64_t v2 = v0;
  if (cf) {
    CFRelease(cf);
  }
  return v2;
}

uint64_t fpa_checkSubPlayerHealth(uint64_t a1)
{
  CFNumberRef number = 0;
  uint64_t FigBaseObject = FigPlayerGetFigBaseObject(a1);
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(uint64_t (**)(uint64_t, __CFString *, void, CFNumberRef *))(v3 + 48);
  if (v4)
  {
    uint64_t v5 = v4(FigBaseObject, @"Status", *MEMORY[0x1E4F1CF80], &number);
    if ((v5 + 12782) > 0xFFFFFFFD)
    {
      uint64_t v6 = 0;
    }
    else
    {
      uint64_t v6 = v5;
      if (!v5)
      {
        if (!number) {
          return 0;
        }
        unsigned int valuePtr = 0;
        CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr);
        uint64_t v6 = valuePtr;
      }
    }
  }
  else
  {
    uint64_t v6 = 4294954514;
  }
  if (number) {
    CFRelease(number);
  }
  return v6;
}

uint64_t FigPlayerSetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t FigBaseObject = FigPlayerGetFigBaseObject(a1);
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  long long v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 56);
  if (!v8) {
    return 4294954514;
  }

  return v8(FigBaseObject, a2, a3);
}

uint64_t FigPlayerAsyncCreateWithEngineTopologyAndOptions(uint64_t a1, int a2, const void *a3, void *a4)
{
  uint64_t v15 = 0;
  CFTypeRef v16 = 0;
  if (!a4)
  {
    uint64_t v14 = FigSignalErrorAt();
    fpa_releaseCommand(0);
    return v14;
  }
  *a4 = 0;
  uint64_t Common = playerasync_createCommon();
  long long v8 = v16;
  if (Common)
  {
    uint64_t v12 = Common;
    uint64_t v10 = 0;
    goto LABEL_13;
  }
  uint64_t v9 = playerasync_createCommand(v16, 1, 0, &v15);
  uint64_t v10 = (void *)v15;
  if (v9)
  {
    uint64_t v12 = v9;
LABEL_13:
    fpa_releaseCommand(v10);
    if (v8) {
      CFRelease(v8);
    }
    return v12;
  }
  *(_DWORD *)(v15 + 32) = a2 & 0xFFFFFFBF;
  if (a3) {
    CFTypeRef v11 = CFRetain(a3);
  }
  else {
    CFTypeRef v11 = 0;
  }
  v10[5] = v11;
  playerasync_runAsynchronousCommand(v8, v10);
  *a4 = v8;
  fpa_releaseCommand(0);
  return 0;
}

void playerasync_runAsynchronousCommand(void *a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970ED80]();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 104));
  *a2 = 0;
  **(void **)(DerivedStorage + 120) = a2;
  *(void *)(DerivedStorage + 120) = a2;
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 104));
  CFRetain(a1);
  uint64_t v5 = *(NSObject **)(DerivedStorage + 56);

  dispatch_async_f(v5, a1, (dispatch_function_t)playerasync_runAsynchronousCommandOnQueue);
}

uint64_t FigPlayerAsyncCreateWithEngineTopology(uint64_t a1, int a2, void *a3)
{
  return FigPlayerAsyncCreateWithEngineTopologyAndOptions(a1, a2, 0, a3);
}

uint64_t FigPlayerAsyncDispatchToPlayerQueue(uint64_t a1, void *a2)
{
  if (a1
    && (FigPlayerGetClassID(), CMBaseObjectIsMemberOfClass())
    && (_UNKNOWN *)CMBaseObjectGetVTable() == &kFigPlayerAsyncVTable)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    dispatch_async(*(dispatch_queue_t *)(DerivedStorage + 56), a2);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void playerasync_InvalidateOnQueue(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 5))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    *(unsigned char *)(DerivedStorage + 5) = 0;
  }
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 104));
  *(_OWORD *)uint64_t v13 = *(_OWORD *)(DerivedStorage + 112);
  *(void *)(DerivedStorage + 112) = 0;
  *(void *)(DerivedStorage + 120) = DerivedStorage + 112;
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 104));
  for (CFIndex i = (void **)v13[0]; v13[0]; CFIndex i = (void **)v13[0])
  {
    v13[0] = *i;
    if (!v13[0]) {
      v13[1] = v13;
    }
    fpa_releaseCommand(i);
  }
  if (*(void *)(DerivedStorage + 24)) {
    FigCFWeakReferenceTableApplyFunction();
  }
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 40));
  CFSetRef v4 = *(const __CFSet **)(DerivedStorage + 32);
  if (v4)
  {
    CFSetRef Copy = CFSetCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v4);
    MEMORY[0x19970E930](*(void *)(DerivedStorage + 40));
    if (Copy)
    {
      CFSetApplyFunction(Copy, (CFSetApplierFunction)playerasync_InvalidateItem, 0);
      char v6 = 0;
      goto LABEL_14;
    }
  }
  else
  {
    MEMORY[0x19970E930](*(void *)(DerivedStorage + 40));
    CFSetRef Copy = 0;
  }
  char v6 = 1;
LABEL_14:
  uint64_t v7 = *(void *)(DerivedStorage + 16);
  if (v7)
  {
    uint64_t FigBaseObject = FigPlayerGetFigBaseObject(v7);
    if (FigBaseObject)
    {
      uint64_t v9 = FigBaseObject;
      uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v11 = v10 ? v10 : 0;
      uint64_t v12 = *(void (**)(uint64_t))(v11 + 24);
      if (v12) {
        v12(v9);
      }
    }
  }
  if ((v6 & 1) == 0) {
    CFRelease(Copy);
  }
  CFRelease(a1);
}

void playerasync_InvalidateItemTable(uint64_t a1, const void *a2)
{
}

void itemasync_InvalidateInternal(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (v3) {
    uint64_t v4 = CMBaseObjectGetDerivedStorage();
  }
  else {
    uint64_t v4 = 0;
  }
  if (*(unsigned char *)(DerivedStorage + 4))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    *(unsigned char *)(DerivedStorage + 4) = 0;
  }
  if (v3)
  {
    MEMORY[0x19970E910](*(void *)(v4 + 136));
    *(_DWORD *)(DerivedStorage + 8) = -12785;
    MEMORY[0x19970CC00](*(void *)(v4 + 128));
    MEMORY[0x19970E930](*(void *)(v4 + 136));
    if (*(void *)(DerivedStorage + 16))
    {
      FigCFWeakReferenceTableRemoveValue();
    }
    else
    {
      MEMORY[0x19970E910](*(void *)(v4 + 40));
      CFSetRemoveValue(*(CFMutableSetRef *)(v4 + 32), a1);
      MEMORY[0x19970E930](*(void *)(v4 + 40));
    }
    uint64_t v10 = CMBaseObjectGetDerivedStorage();
    if (!*(_DWORD *)v10)
    {
      uint64_t v11 = v10;
      MEMORY[0x19970E910](*(void *)(v10 + 104));
      for (CFIndex i = *(uint64_t **)(v11 + 112); i; CFIndex i = (uint64_t *)*i)
      {
        if ((const void *)i[2] == a1) {
          *((_DWORD *)i + 6) |= 0x10000u;
        }
      }
      uint64_t v10 = MEMORY[0x19970E930](*(void *)(v11 + 104));
    }
    if (*(void *)(DerivedStorage + 16))
    {
      uint64_t v13 = *(void *)(v4 + 72);
      if (v13 == MEMORY[0x19970ED80](v10))
      {
        uint64_t FigBaseObject = FigPlaybackItemGetFigBaseObject(*(void *)(DerivedStorage + 16));
        if (FigBaseObject)
        {
          uint64_t v20 = FigBaseObject;
          uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 8);
          uint64_t v22 = v21 ? v21 : 0;
          uint64_t v25 = *(void (**)(uint64_t))(v22 + 24);
          if (v25) {
            v25(v20);
          }
        }
      }
      else
      {
        uint64_t v14 = MEMORY[0x19970E910](*(void *)(v4 + 64));
        *(void *)(v4 + 72) = MEMORY[0x19970ED80](v14);
        uint64_t v15 = FigPlaybackItemGetFigBaseObject(*(void *)(DerivedStorage + 16));
        if (v15)
        {
          uint64_t v16 = v15;
          uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 8);
          uint64_t v18 = v17 ? v17 : 0;
          CFTypeRef v23 = *(void (**)(uint64_t))(v18 + 24);
          if (v23) {
            v23(v16);
          }
        }
        *(void *)(v4 + 72) = 0;
        MEMORY[0x19970E930](*(void *)(v4 + 64));
      }
    }
    playerasync_removeItemFromPlayQueueWithoutInformingSubPlayer((uint64_t)v3, a1);
    CFRelease(v3);
  }
  else
  {
    uint64_t v5 = *(void *)(DerivedStorage + 16);
    if (v5)
    {
      uint64_t v6 = FigPlaybackItemGetFigBaseObject(v5);
      if (v6)
      {
        uint64_t v7 = v6;
        uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v9 = v8 ? v8 : 0;
        uint64_t v24 = *(void (**)(uint64_t))(v9 + 24);
        if (v24)
        {
          v24(v7);
        }
      }
    }
  }
}

void playerasync_runSynchronousCommand(uint64_t a1, _DWORD *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)DerivedStorage)
  {
    a2[7] = FigSignalErrorAt();
  }
  else
  {
    uint64_t v4 = DerivedStorage;
    uint64_t v5 = *(void *)(DerivedStorage + 72);
    if (v5 == MEMORY[0x19970ED80]())
    {
      playerasync_runSynchronousCommandOnQueue((uint64_t)a2);
    }
    else
    {
      uint64_t v6 = *(NSObject **)(v4 + 56);
      dispatch_sync_f(v6, a2, (dispatch_function_t)playerasync_runSynchronousCommandOnQueue);
    }
  }
}

void playerasync_runImmediateCommand(const void *a1, uint64_t a2, int a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)DerivedStorage)
  {
    *(_DWORD *)(a2 + 28) = FigSignalErrorAt();
  }
  else
  {
    uint64_t v7 = DerivedStorage;
    uint64_t v8 = *(void *)(DerivedStorage + 72);
    if (v8 == MEMORY[0x19970ED80]())
    {
      playerasync_runOneCommand(a1, a2);
    }
    else
    {
      if (a3)
      {
        if (FigSimpleMutexTryLock()) {
          goto LABEL_5;
        }
      }
      else if (!MEMORY[0x19970E910](*(void *)(v7 + 64)))
      {
LABEL_5:
        *(void *)(v7 + 72) = MEMORY[0x19970ED80]();
        playerasync_runOneCommand(a1, a2);
        *(void *)(v7 + 72) = 0;
        JUMPOUT(0x19970E930);
      }
      *(_DWORD *)(a2 + 28) = -12783;
    }
  }
}

uint64_t playerasync_runSynchronousCommandOnQueue(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 8);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_DWORD *)DerivedStorage)
  {
    uint64_t v4 = DerivedStorage;
    uint64_t v5 = MEMORY[0x19970E910](*(void *)(DerivedStorage + 64));
    *(void *)(v4 + 72) = MEMORY[0x19970ED80](v5);
    playerasync_runOneCommand(v2, a1);
    *(void *)(v4 + 72) = 0;
    JUMPOUT(0x19970E930);
  }
  uint64_t result = FigSignalErrorAt();
  *(_DWORD *)(a1 + 28) = result;
  return result;
}

void playerasync_runOneCommand(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  CFTypeRef v47 = 0;
  *(_DWORD *)(a2 + 28) = 0;
  int v5 = *(_DWORD *)(a2 + 24);
  if ((v5 & 0x10000) == 0)
  {
    uint64_t v6 = DerivedStorage;
    if (*DerivedStorage)
    {
      *(_DWORD *)(a2 + 28) = FigSignalErrorAt();
      return;
    }
    if (*(void *)(a2 + 16))
    {
      uint64_t v7 = CMBaseObjectGetDerivedStorage();
      int v5 = *(_DWORD *)(a2 + 24);
    }
    else
    {
      uint64_t v7 = 0;
    }
    if (v5 == 1)
    {
      uint64_t v8 = *(const void **)(a2 + 16);
      if (!v8)
      {
LABEL_9:
        CFAllocatorRef v9 = CFGetAllocator(a1);
        int v10 = FigSharedPlayerCreateWithOptions(v9, *(_DWORD *)(a2 + 32) & 0xFFFFFFBF, *(void *)(a2 + 40), &v47);
        *(_DWORD *)(a2 + 28) = v10;
        if (v10
          || (CMNotificationCenterGetDefaultLocalCenter(),
              int v10 = FigNotificationCenterAddWeakListener(),
              (*(_DWORD *)(a2 + 28) = v10) != 0))
        {
          MEMORY[0x19970E910](*((void *)v6 + 17));
        }
        else
        {
          *((unsigned char *)v6 + 5) = 1;
          int v10 = fpa_checkSubPlayerHealth((uint64_t)v47);
          *(_DWORD *)(a2 + 28) = v10;
          MEMORY[0x19970E910](*((void *)v6 + 17));
          if (!v10)
          {
            CFTypeRef v13 = v47;
            if (v47) {
              CFTypeRef v13 = CFRetain(v47);
            }
            int v10 = 0;
            *((void *)v6 + 2) = v13;
            char v11 = 1;
            goto LABEL_13;
          }
        }
        char v11 = 0;
LABEL_13:
        v6[2] = v10;
        MEMORY[0x19970CC00](*((void *)v6 + 16));
        MEMORY[0x19970E930](*((void *)v6 + 17));
        if ((v11 & 1) == 0) {
          playerasync_postPlayerStatusChanged();
        }
LABEL_71:
        if (v47) {
          CFRelease(v47);
        }
        return;
      }
    }
    else
    {
      if (!*((void *)v6 + 2)) {
        goto LABEL_85;
      }
      uint64_t v8 = *(const void **)(a2 + 16);
      if (!v8) {
        goto LABEL_21;
      }
      if (v5 == 16)
      {
LABEL_18:
        int SubItem = playerasync_createSubItem((uint64_t)a1, v8, *(void *)(a2 + 32), *(unsigned int *)(a2 + 40), *(void *)(a2 + 48));
        *(_DWORD *)(a2 + 28) = SubItem;
        if (SubItem) {
          itemasync_postItemStatusChanged();
        }
        goto LABEL_71;
      }
    }
    if (*(void *)(v7 + 16))
    {
LABEL_21:
      switch(v5)
      {
        case 1:
          goto LABEL_9;
        case 2:
          playerasync_runCopyPropertyCommand(a2);
          break;
        case 3:
          int Rate = FigPlayerSetProperty(*((void *)v6 + 2), *(void *)(a2 + 32), *(void *)(a2 + 40));
          goto LABEL_70;
        case 4:
          int Rate = FigPlayerSetProperties(*((void *)v6 + 2), *(void *)(a2 + 32), a2 + 40);
          goto LABEL_70;
        case 6:
          if (*(void *)(a2 + 32))
          {
            uint64_t v15 = CMBaseObjectGetDerivedStorage();
            uint64_t v16 = *((void *)v6 + 2);
            uint64_t v17 = *(void *)(v7 + 16);
            if (v15) {
              uint64_t v18 = *(void *)(v15 + 16);
            }
            else {
              uint64_t v18 = 0;
            }
          }
          else
          {
            uint64_t v18 = 0;
            uint64_t v16 = *((void *)v6 + 2);
            uint64_t v17 = *(void *)(v7 + 16);
          }
          int v40 = FigPlayerAddToPlayQueue(v16, v17, v18);
          *(_DWORD *)(a2 + 28) = v40;
          if (!v40 && !*v6) {
            CFSetAddValue(*((CFMutableSetRef *)v6 + 6), *(const void **)(a2 + 16));
          }
          break;
        case 7:
          if (v7) {
            uint64_t v19 = *(void *)(v7 + 16);
          }
          else {
            uint64_t v19 = 0;
          }
          int v37 = FigPlayerRemoveFromPlayQueue(*((void *)v6 + 2), v19);
          *(_DWORD *)(a2 + 28) = v37;
          if (!v37 && !*v6)
          {
            uint64_t v38 = *(const void **)(a2 + 16);
            uint64_t v39 = (__CFSet *)*((void *)v6 + 6);
            if (v38) {
              CFSetRemoveValue(v39, v38);
            }
            else {
              CFSetRemoveAllValues(v39);
            }
          }
          break;
        case 8:
          playerasync_runCopyPlayQueueItemCommand(a2);
          break;
        case 9:
          int Rate = FigPlayerSetRate(*((void *)v6 + 2), *(float *)(a2 + 32));
          goto LABEL_70;
        case 10:
          int Rate = FigPlayerGetRate(*((void *)v6 + 2), *(void *)(a2 + 32));
          goto LABEL_70;
        case 11:
          uint64_t v20 = *((void *)v6 + 2);
          float v21 = *(float *)(a2 + 32);
          long long v45 = *(_OWORD *)(a2 + 36);
          uint64_t v46 = *(void *)(a2 + 52);
          int Rate = FigPlayerSetRateWithFade(v20, &v45, v21);
          goto LABEL_70;
        case 12:
          int Rate = FigPlayerStartPreroll(*((void *)v6 + 2), *(unsigned int *)(a2 + 36), *(float *)(a2 + 32));
          goto LABEL_70;
        case 13:
          int Rate = FigPlayerStepByCount(*((void *)v6 + 2), *(unsigned int *)(a2 + 32));
          goto LABEL_70;
        case 15:
          uint64_t v22 = *((void *)v6 + 2);
          float v23 = *(float *)(a2 + 32);
          uint64_t v24 = *(unsigned int *)(a2 + 84);
          long long v45 = *(_OWORD *)(a2 + 36);
          uint64_t v46 = *(void *)(a2 + 52);
          long long v43 = *(_OWORD *)(a2 + 60);
          uint64_t v44 = *(void *)(a2 + 76);
          int Rate = FigPlayerSetRateAndAnchorTime(v22, &v45, &v43, v24, v23);
          goto LABEL_70;
        case 16:
          goto LABEL_18;
        case 17:
          int Rate = FigPlayerSetRateWithOptions(*((void *)v6 + 2), *(void *)(a2 + 64), *(float *)(a2 + 32));
          goto LABEL_70;
        case 18:
          int Rate = FigPlayerAddExternalStartupTask(*((void *)v6 + 2), *(void *)(a2 + 32));
          goto LABEL_70;
        case 19:
          int Rate = FigPlayerRemoveExternalStartupTask(*((void *)v6 + 2), *(void *)(a2 + 32));
          goto LABEL_70;
        case 20:
          int Rate = FigPlayerBeginInterruption(*((void *)v6 + 2));
          goto LABEL_70;
        case 21:
          int Rate = FigPlayerEndInterruption(*((void *)v6 + 2), *(void *)(a2 + 32));
          goto LABEL_70;
        case 22:
          int Rate = FigPlayerSetConnectionActive(*((void *)v6 + 2), *(unsigned __int8 *)(a2 + 32));
          goto LABEL_70;
        case 23:
          int Rate = FigPlayerDuckVolume(*((void *)v6 + 2), *(unsigned __int8 *)(a2 + 32), *(float *)(a2 + 36), *(float *)(a2 + 40));
          goto LABEL_70;
        case 24:
          int Rate = FigPlayerSilentMute(*((void *)v6 + 2), *(unsigned __int8 *)(a2 + 32));
          goto LABEL_70;
        case 25:
          int Rate = FigPlaybackItemCopyProperty(*(void *)(v7 + 16), *(void *)(a2 + 32), *(void *)(a2 + 40), *(void *)(a2 + 48));
          goto LABEL_70;
        case 26:
          int Rate = FigPlaybackItemSetProperty(*(void *)(v7 + 16), *(void *)(a2 + 32), *(void *)(a2 + 40));
          goto LABEL_70;
        case 27:
          int Rate = FigPlaybackItemSetProperties(*(void *)(v7 + 16), *(void *)(a2 + 32), a2 + 40);
          goto LABEL_70;
        case 28:
          int Rate = FigPlaybackItemGetDimensions(*(void *)(v7 + 16), *(void *)(a2 + 32), *(void *)(a2 + 40));
          goto LABEL_70;
        case 29:
          int Rate = FigPlaybackItemGetDuration(*(void *)(v7 + 16), *(void *)(a2 + 32));
          goto LABEL_70;
        case 30:
          uint64_t v25 = *(void *)(v7 + 16);
          uint64_t v26 = *(unsigned int *)(a2 + 56);
          long long v45 = *(_OWORD *)(a2 + 32);
          uint64_t v46 = *(void *)(a2 + 48);
          int Rate = FigPlaybackItemSetCurrentTime(v25, &v45, v26);
          goto LABEL_70;
        case 31:
          int Rate = FigPlaybackItemGetCurrentTime(*(void *)(v7 + 16), *(void *)(a2 + 32));
          goto LABEL_70;
        case 32:
          int Rate = FigPlaybackItemCopyTrackProperty(*(void *)(v7 + 16), *(unsigned int *)(a2 + 32), *(void *)(a2 + 40), *(void *)(a2 + 48), *(void *)(a2 + 56));
          goto LABEL_70;
        case 33:
          int Rate = FigPlaybackItemMakeReadyForInspection(*(void *)(v7 + 16), *(void *)(a2 + 32), *(void *)(a2 + 40));
          goto LABEL_70;
        case 35:
          int Rate = FigPlaybackItemCopyCommonMetadata(*(void *)(v7 + 16), *(void *)(a2 + 32), *(void *)(a2 + 40), *(void *)(a2 + 48));
          goto LABEL_70;
        case 36:
          int Rate = FigPlaybackItemCopyChapterImageData(*(void *)(v7 + 16), *(void *)(a2 + 32), *(void *)(a2 + 40), *(void *)(a2 + 48));
          goto LABEL_70;
        case 37:
          uint64_t v27 = *(void *)(v7 + 16);
          uint64_t v28 = *(unsigned int *)(a2 + 56);
          uint64_t v29 = *(void *)(a2 + 64);
          long long v45 = *(_OWORD *)(a2 + 32);
          uint64_t v46 = *(void *)(a2 + 48);
          int Rate = FigPlaybackItemGetNextThumbnailTime(v27, &v45, v28, v29);
          goto LABEL_70;
        case 40:
          uint64_t v30 = *(void *)(v7 + 16);
          uint64_t v31 = *(unsigned int *)(a2 + 56);
          long long v45 = *(_OWORD *)(a2 + 32);
          uint64_t v46 = *(void *)(a2 + 48);
          long long v43 = *(_OWORD *)(a2 + 60);
          uint64_t v44 = *(void *)(a2 + 76);
          long long v41 = *(_OWORD *)(a2 + 84);
          uint64_t v42 = *(void *)(a2 + 100);
          int Rate = FigPlaybackItemSetCurrentTimeWithRange(v30, &v45, v31, &v43, &v41);
          goto LABEL_70;
        case 41:
          int Rate = FigPlaybackItemSetTrackProperty(*(void *)(v7 + 16), *(unsigned int *)(a2 + 32), *(void *)(a2 + 40), *(void *)(a2 + 48));
          goto LABEL_70;
        case 42:
          int Rate = FigPlaybackItemCopyFormatReader(*(void *)(v7 + 16), *(void *)(a2 + 32));
          goto LABEL_70;
        case 43:
          int Rate = FigPlaybackItemSeekToDateWithID(*(void *)(v7 + 16), *(void *)(a2 + 32), *(unsigned int *)(a2 + 40));
          goto LABEL_70;
        case 44:
          uint64_t v32 = *(void *)(v7 + 16);
          uint64_t v33 = *(unsigned int *)(a2 + 56);
          uint64_t v34 = *(unsigned int *)(a2 + 108);
          long long v45 = *(_OWORD *)(a2 + 32);
          uint64_t v46 = *(void *)(a2 + 48);
          long long v43 = *(_OWORD *)(a2 + 60);
          uint64_t v44 = *(void *)(a2 + 76);
          long long v41 = *(_OWORD *)(a2 + 84);
          uint64_t v42 = *(void *)(a2 + 100);
          int Rate = FigPlaybackItemSetCurrentTimeWithRangeAndID(v32, &v45, v33, &v43, &v41, v34);
          goto LABEL_70;
        case 45:
          int Rate = FigPlaybackItemCopyAsset(*(void *)(v7 + 16), *(void *)(a2 + 32));
          goto LABEL_70;
        case 46:
          int Rate = FigPlaybackItemExtractAndRetainNextSampleBuffer(*(void *)(v7 + 16), *(unsigned int *)(a2 + 32), *(unsigned int *)(a2 + 36), *(void *)(a2 + 40));
          goto LABEL_70;
        case 47:
          uint64_t v35 = *(void *)(v7 + 16);
          long long v45 = *(_OWORD *)(a2 + 32);
          uint64_t v36 = *(void *)(a2 + 56);
          uint64_t v46 = *(void *)(a2 + 48);
          int Rate = FigPlaybackItemSetCurrentTimeWithOptions(v35, &v45, v36);
          goto LABEL_70;
        case 48:
          int Rate = FigPlayerCopyDisplayedCVPixelBuffer(*((void *)v6 + 2), *(void *)(a2 + 32), *(void *)(a2 + 40));
          goto LABEL_70;
        default:
          goto LABEL_71;
      }
      goto LABEL_71;
    }
LABEL_85:
    int Rate = FigSignalErrorAt();
LABEL_70:
    *(_DWORD *)(a2 + 28) = Rate;
    goto LABEL_71;
  }
}

void playerasync_postPlayerStatusChanged()
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    CFMutableDictionaryRef v1 = Mutable;
    if (!FigCFDictionarySetInt32())
    {
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
    }
    CFRelease(v1);
  }
  else
  {
    FigSignalErrorAt();
  }
}

uint64_t playerasync_runCopyPropertyCommand(uint64_t a1)
{
  uint64_t v3 = *(const void **)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v4 = *(CFTypeRef **)(a1 + 48);
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage[2])
  {
    uint64_t result = FigSignalErrorAt();
    goto LABEL_22;
  }
  if (!CFEqual(v3, @"SynchronizedNULL"))
  {
    if (CFEqual(v3, @"UserVolume"))
    {
      MEMORY[0x19970E910](DerivedStorage[10]);
      CFTypeRef v7 = (CFTypeRef)DerivedStorage[11];
      if (v7) {
        CFTypeRef v7 = CFRetain(v7);
      }
      *uint64_t v4 = v7;
      MEMORY[0x19970E930](DerivedStorage[10]);
      if (*v4)
      {
LABEL_8:
        uint64_t result = 0;
        goto LABEL_22;
      }
      uint64_t FigBaseObject = FigPlayerGetFigBaseObject(DerivedStorage[2]);
      uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v12) {
        uint64_t v13 = v12;
      }
      else {
        uint64_t v13 = 0;
      }
      uint64_t v15 = *(uint64_t (**)(uint64_t, const void *, uint64_t, CFTypeRef *))(v13 + 48);
      if (v15)
      {
        uint64_t result = v15(FigBaseObject, v3, v2, v4);
        if (result) {
          goto LABEL_22;
        }
        if (*v4)
        {
          MEMORY[0x19970E910](DerivedStorage[10]);
          DerivedStorage[11] = CFRetain(*v4);
          MEMORY[0x19970E930](DerivedStorage[10]);
        }
        goto LABEL_8;
      }
    }
    else
    {
      uint64_t v8 = FigPlayerGetFigBaseObject(DerivedStorage[2]);
      uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v9) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = 0;
      }
      uint64_t v14 = *(uint64_t (**)(uint64_t, const void *, uint64_t, CFTypeRef *))(v10 + 48);
      if (v14)
      {
        uint64_t result = v14(v8, v3, v2, v4);
        goto LABEL_22;
      }
    }
    uint64_t result = 4294954514;
    goto LABEL_22;
  }
  uint64_t result = 0;
  *uint64_t v4 = 0;
LABEL_22:
  *(_DWORD *)(a1 + 28) = result;
  return result;
}

uint64_t FigPlayerSetProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 112);
  if (!v8) {
    return 4294954514;
  }

  return v8(a1, a2, a3);
}

uint64_t FigPlayerAddToPlayQueue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  if (!v8) {
    return 4294954514;
  }

  return v8(a1, a2, a3);
}

uint64_t FigPlayerRemoveFromPlayQueue(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 24);
  if (!v6) {
    return 4294954514;
  }

  return v6(a1, a2);
}

void playerasync_runCopyPlayQueueItemCommand(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  CFTypeRef cf = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (v2)
  {
    uint64_t v2 = *(void *)(CMBaseObjectGetDerivedStorage() + 16);
    if (!v2)
    {
      int v8 = FigSignalErrorAt();
      goto LABEL_16;
    }
  }
  uint64_t v4 = *(void *)(DerivedStorage + 16);
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *))(v6 + 32);
  if (!v7)
  {
    uint64_t v10 = 0;
    int v8 = -12782;
    goto LABEL_17;
  }
  int v8 = v7(v4, v2, &cf);
  CFTypeRef v9 = cf;
  if (!cf)
  {
LABEL_16:
    uint64_t v10 = 0;
    goto LABEL_17;
  }
  if (*(_DWORD *)DerivedStorage)
  {
    uint64_t v10 = 0;
    int v8 = -12785;
  }
  else
  {
    uint64_t v10 = FigCFWeakReferenceTableCopyValue();
    if (!v10) {
      int v8 = -12785;
    }
    CFTypeRef v9 = cf;
  }
  CFRelease(v9);
LABEL_17:
  *(_DWORD *)(a1 + 28) = v8;
  **(void **)(a1 + 32) = v10;
}

uint64_t FigPlayerSetRate(uint64_t a1, float a2)
{
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(uint64_t (**)(uint64_t, __n128))(v6 + 40);
  if (!v7) {
    return 4294954514;
  }
  v5.n128_f32[0] = a2;

  return v7(a1, v5);
}

uint64_t FigPlayerSetRateWithFade(uint64_t a1, long long *a2, float a3)
{
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  int v8 = *(uint64_t (**)(uint64_t, long long *, float))(v7 + 56);
  if (!v8) {
    return 4294954514;
  }
  long long v10 = *a2;
  uint64_t v11 = *((void *)a2 + 2);
  return v8(a1, &v10, a3);
}

uint64_t FigPlayerStartPreroll(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v8 = v6;
  }
  else {
    uint64_t v8 = 0;
  }
  CFTypeRef v9 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v8 + 64);
  if (!v9) {
    return 4294954514;
  }
  v7.n128_f32[0] = a3;

  return v9(a1, a2, v7);
}

uint64_t FigPlayerStepByCount(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 72);
  if (!v6) {
    return 4294954514;
  }

  return v6(a1, a2);
}

uint64_t FigPlayerSetRateAndAnchorTime(uint64_t a1, long long *a2, long long *a3, uint64_t a4, float a5)
{
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = *(uint64_t (**)(uint64_t, long long *, long long *, uint64_t, float))(v11 + 88);
  if (!v12) {
    return 4294954514;
  }
  long long v16 = *a2;
  uint64_t v17 = *((void *)a2 + 2);
  long long v14 = *a3;
  uint64_t v15 = *((void *)a3 + 2);
  return v12(a1, &v16, &v14, a4, a5);
}

uint64_t playerasync_createSubItem(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v10 = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  uint64_t v11 = *(void *)(DerivedStorage + 16);
  if (v11 && a3)
  {
    uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v12) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    long long v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, CFTypeRef *))(v13 + 96);
    if (v14)
    {
      uint64_t v15 = v14(v11, a3, a4, a5, &cf);
      if (!v15)
      {
        CMNotificationCenterGetDefaultLocalCenter();
        uint64_t v16 = FigNotificationCenterAddWeakListener();
        if (!v16)
        {
          *(unsigned char *)(v10 + 4) = 1;
          MEMORY[0x19970E910](*(void *)(DerivedStorage + 40));
          CFSetRemoveValue(*(CFMutableSetRef *)(DerivedStorage + 32), a2);
          MEMORY[0x19970E930](*(void *)(DerivedStorage + 40));
          FigCFWeakReferenceTableAddValueAssociatedWithKey();
          MEMORY[0x19970E910](*(void *)(DerivedStorage + 136));
          CFTypeRef v17 = cf;
          if (cf) {
            CFTypeRef v17 = CFRetain(cf);
          }
          goto LABEL_11;
        }
        uint64_t v15 = v16;
      }
    }
    else
    {
      uint64_t v15 = 4294954514;
    }
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 136));
  }
  else
  {
    uint64_t v15 = FigSignalErrorAt();
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 136));
    if (!v15)
    {
      CFTypeRef v17 = 0;
LABEL_11:
      uint64_t v15 = 0;
      *(void *)(v10 + 16) = v17;
    }
  }
  *(_DWORD *)(v10 + 8) = v15;
  MEMORY[0x19970CC00](*(void *)(DerivedStorage + 128));
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 136));
  if (cf) {
    CFRelease(cf);
  }
  return v15;
}

void itemasync_postItemStatusChanged()
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    CFMutableDictionaryRef v1 = Mutable;
    if (!FigCFDictionarySetInt32())
    {
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
    }
    CFRelease(v1);
  }
  else
  {
    FigSignalErrorAt();
  }
}

uint64_t FigPlayerSetRateWithOptions(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v8 = v6;
  }
  else {
    uint64_t v8 = 0;
  }
  CFTypeRef v9 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v8 + 104);
  if (!v9) {
    return 4294954514;
  }
  v7.n128_f32[0] = a3;

  return v9(a1, a2, v7);
}

uint64_t FigPlayerAddExternalStartupTask(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 128);
  if (!v6) {
    return 4294954514;
  }

  return v6(a1, a2);
}

uint64_t FigPlayerRemoveExternalStartupTask(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 136);
  if (!v6) {
    return 4294954514;
  }

  return v6(a1, a2);
}

uint64_t FigPlayerBeginInterruption(uint64_t a1)
{
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 24);
  if (!v2) {
    return 4294954514;
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v2 + 8);
  if (!v3) {
    return 4294954514;
  }

  return v3(a1);
}

uint64_t FigPlayerEndInterruption(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 24);
  if (!v4) {
    return 4294954514;
  }
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 16);
  if (!v5) {
    return 4294954514;
  }

  return v5(a1, a2);
}

uint64_t FigPlayerDuckVolume(uint64_t a1, uint64_t a2, float a3, float a4)
{
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 32);
  if (!v8) {
    return 4294954514;
  }
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, __n128, __n128))(v8 + 8);
  if (!v11) {
    return 4294954514;
  }
  v9.n128_f32[0] = a3;
  v10.n128_f32[0] = a4;

  return v11(a1, a2, v9, v10);
}

uint64_t FigPlayerSilentMute(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 32);
  if (!v4) {
    return 4294954514;
  }
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 16);
  if (!v5) {
    return 4294954514;
  }

  return v5(a1, a2);
}

uint64_t FigPlaybackItemCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t FigBaseObject = FigPlaybackItemGetFigBaseObject(a1);
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  __n128 v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (!v10) {
    return 4294954514;
  }

  return v10(FigBaseObject, a2, a3, a4);
}

{
  uint64_t FigBaseObject;
  uint64_t VTable;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t vars8;

  uint64_t FigBaseObject = FigPlaybackItemGetFigBaseObject(a1);
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v11 = *(void *)(VTable + 8);
  uint64_t result = VTable + 8;
  __n128 v10 = v11;
  if (v11) {
    uint64_t v12 = v10;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 48);
  if (v13)
  {
    return v13(FigBaseObject, a2, a3, a4);
  }
  return result;
}

uint64_t FigPlaybackItemSetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t FigBaseObject = FigPlaybackItemGetFigBaseObject(a1);
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 56);
  if (!v8) {
    return 4294954514;
  }

  return v8(FigBaseObject, a2, a3);
}

uint64_t FigPlaybackItemSetProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 160);
  if (!v8) {
    return 4294954514;
  }

  return v8(a1, a2, a3);
}

uint64_t FigPlaybackItemGetDimensions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 8);
  if (!v8) {
    return 4294954514;
  }

  return v8(a1, a2, a3);
}

uint64_t FigPlaybackItemGetDuration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 16);
  if (!v6) {
    return 4294954514;
  }

  return v6(a1, a2);
}

uint64_t FigPlaybackItemSetCurrentTime(uint64_t a1, long long *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, long long *, uint64_t))(v7 + 24);
  if (!v8) {
    return 4294954514;
  }
  long long v10 = *a2;
  uint64_t v11 = *((void *)a2 + 2);
  return v8(a1, &v10, a3);
}

uint64_t FigPlaybackItemSetCurrentTimeWithOptions(uint64_t a1, long long *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, long long *, uint64_t))(v7 + 176);
  if (!v8) {
    return 4294954514;
  }
  long long v10 = *a2;
  uint64_t v11 = *((void *)a2 + 2);
  return v8(a1, &v10, a3);
}

uint64_t FigPlaybackItemGetCurrentTime(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 32);
  if (!v6) {
    return 4294954514;
  }

  return v6(a1, a2);
}

uint64_t FigPlaybackItemCopyTrackProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 40);
  if (!v12) {
    return 4294954514;
  }

  return v12(a1, a2, a3, a4, a5);
}

uint64_t FigPlaybackItemCopyCommonMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 64);
  if (!v10) {
    return 4294954514;
  }

  return v10(a1, a2, a3, a4);
}

uint64_t FigPlaybackItemCopyChapterImageData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 72);
  if (!v10) {
    return 4294954514;
  }

  return v10(a1, a2, a3, a4);
}

uint64_t FigPlaybackItemGetNextThumbnailTime(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t))(v9 + 80);
  if (!v10) {
    return 4294954514;
  }
  long long v12 = *a2;
  uint64_t v13 = *((void *)a2 + 2);
  return v10(a1, &v12, a3, a4);
}

uint64_t FigPlaybackItemSetCurrentTimeWithRange(uint64_t a1, long long *a2, uint64_t a3, long long *a4, long long *a5)
{
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  long long v12 = *(uint64_t (**)(uint64_t, long long *, uint64_t, long long *, long long *))(v11 + 104);
  if (!v12) {
    return 4294954514;
  }
  long long v18 = *a2;
  uint64_t v19 = *((void *)a2 + 2);
  long long v16 = *a4;
  uint64_t v17 = *((void *)a4 + 2);
  long long v14 = *a5;
  uint64_t v15 = *((void *)a5 + 2);
  return v12(a1, &v18, a3, &v16, &v14);
}

uint64_t FigPlaybackItemSetTrackProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 112);
  if (!v10) {
    return 4294954514;
  }

  return v10(a1, a2, a3, a4);
}

uint64_t FigPlaybackItemCopyFormatReader(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 120);
  if (!v6) {
    return 4294954514;
  }

  return v6(a1, a2);
}

uint64_t FigPlaybackItemSeekToDateWithID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 128);
  if (!v8) {
    return 4294954514;
  }

  return v8(a1, a2, a3);
}

uint64_t FigPlaybackItemSetCurrentTimeWithRangeAndID(uint64_t a1, long long *a2, uint64_t a3, long long *a4, long long *a5, uint64_t a6)
{
  uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v12) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  long long v14 = *(uint64_t (**)(uint64_t, long long *, uint64_t, long long *, long long *, uint64_t))(v13 + 144);
  if (!v14) {
    return 4294954514;
  }
  long long v20 = *a2;
  uint64_t v21 = *((void *)a2 + 2);
  long long v18 = *a4;
  uint64_t v19 = *((void *)a4 + 2);
  long long v16 = *a5;
  uint64_t v17 = *((void *)a5 + 2);
  return v14(a1, &v20, a3, &v18, &v16, a6);
}

uint64_t FigPlaybackItemCopyAsset(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 152);
  if (!v6) {
    return 4294954514;
  }

  return v6(a1, a2);
}

uint64_t FigPlaybackItemExtractAndRetainNextSampleBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 168);
  if (!v10) {
    return 4294954514;
  }

  return v10(a1, a2, a3, a4);
}

uint64_t FigPlayerCopyDisplayedCVPixelBuffer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 152);
  if (!v8) {
    return 4294954514;
  }

  return v8(a1, a2, a3);
}

uint64_t playerasync_handleSetProperty(const void *a1, uint64_t a2, const void *a3, const void *a4, unsigned char *a5, CFTypeRef *a6, void *a7)
{
  uint64_t DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (!*DerivedStorage && a3)
  {
    long long v14 = DerivedStorage;
    if (CFEqual(@"WantsVolumeChangesWhenPausedOrInactive", a3))
    {
      MEMORY[0x19970E910](*((void *)v14 + 10));
      uint64_t v15 = (const void *)*((void *)v14 + 11);
      if (v15)
      {
        CFRelease(v15);
        *((void *)v14 + 11) = 0;
      }
      MEMORY[0x19970E930](*((void *)v14 + 10));
    }
    else if (CFEqual(@"OnMediaServer", a3))
    {
      *((unsigned char *)v14 + 4) = *MEMORY[0x1E4F1CFD0] == (void)a4;
    }
    else if (CFEqual(@"AudioDeviceUID", a3))
    {
      uint64_t v23 = 0;
      uint64_t v19 = playerasync_createCommand(a1, 3, 0, &v23);
      if (v19) {
        return v19;
      }
      CFTypeRef v20 = CFRetain(a3);
      uint64_t v21 = v23;
      *(void *)(v23 + 32) = v20;
      if (a4) {
        CFTypeRef v22 = CFRetain(a4);
      }
      else {
        CFTypeRef v22 = 0;
      }
      *(void *)(v21 + 40) = v22;
      playerasync_runSynchronousCommand((uint64_t)a1, (_DWORD *)v21);
      uint64_t v17 = *(unsigned int *)(v21 + 28);
      fpa_releaseCommand((void *)v21);
      *a5 = 1;
      return v17;
    }
    *a5 = 0;
    *a6 = CFRetain(a3);
    if (a4) {
      CFTypeRef v16 = CFRetain(a4);
    }
    else {
      CFTypeRef v16 = 0;
    }
    *a7 = v16;
    if (CFEqual(a3, @"UserVolume") || CFEqual(a3, @"UserMuted") || CFEqual(a3, @"EQPreset")) {
      playerasync_cancelQueuedCommandsMatching(a1, 3u, 0);
    }
    return 0;
  }

  return FigSignalErrorAt();
}

void playerasync_cancelQueuedCommandsMatching(const void *a1, unsigned int a2, const void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v13 = 0;
  long long v14 = 0;
  uint64_t v15 = &v14;
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 104));
  uint64_t v7 = *(uint64_t **)(DerivedStorage + 112);
  if (v7)
  {
    while (1)
    {
      if (*((_DWORD *)v7 + 6) != a2 || (const void *)v7[2] != a3) {
        goto LABEL_21;
      }
      if (a2 != 26)
      {
        unsigned int v8 = a2;
        if (a2 != 3) {
          goto LABEL_8;
        }
      }
      if (FigCFEqual()) {
        break;
      }
LABEL_21:
      uint64_t v7 = (uint64_t *)*v7;
      if (!v7) {
        goto LABEL_22;
      }
    }
    unsigned int v8 = *((_DWORD *)v7 + 6);
LABEL_8:
    if (v8 > 0x2F || ((1 << v8) & 0x980000000000) == 0)
    {
LABEL_20:
      *((_DWORD *)v7 + 6) = v8 | 0x10000;
      goto LABEL_21;
    }
    int v12 = 0;
    switch(v8)
    {
      case '+':
        int v9 = *((_DWORD *)v7 + 10);
        break;
      case '/':
        FigCFDictionaryGetInt32IfPresent();
        goto LABEL_17;
      case ',':
        int v9 = *((_DWORD *)v7 + 27);
        break;
      default:
LABEL_17:
        playerasync_createCommand(a1, 44, a3, &v13);
        uint64_t v10 = (void *)v13;
        if (v13)
        {
          *(_DWORD *)(v13 + 108) = v12;
          *uint64_t v10 = 0;
          *uint64_t v15 = v10;
          uint64_t v15 = v10;
        }
        unsigned int v8 = *((_DWORD *)v7 + 6);
        goto LABEL_20;
    }
    int v12 = v9;
    goto LABEL_17;
  }
LABEL_22:
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 104));
  for (CFIndex i = v14; v14; CFIndex i = v14)
  {
    long long v14 = (void *)*i;
    if (!v14) {
      uint64_t v15 = &v14;
    }
    itemasync_postSeekWasCanceled();
    fpa_releaseCommand(i);
  }
}

void itemasync_postSeekWasCanceled()
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    CFMutableDictionaryRef v1 = Mutable;
    if (!FigCFDictionarySetInt32())
    {
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
    }
    CFRelease(v1);
  }
  else
  {
    FigSignalErrorAt();
  }
}

uint64_t playerasync_CopyPlayQueueItem(const void *a1, const void *a2, void *a3)
{
  uint64_t v14 = 0;
  uint64_t DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    uint64_t v7 = (_DWORD *)CMBaseObjectGetDerivedStorage();
    if (a3) {
      goto LABEL_3;
    }
LABEL_6:
    return FigSignalErrorAt();
  }
  uint64_t v7 = 0;
  if (!a3) {
    goto LABEL_6;
  }
LABEL_3:
  *a3 = 0;
  if (*DerivedStorage) {
    goto LABEL_6;
  }
  if (!v7)
  {
    uint64_t v10 = 0;
LABEL_14:
    uint64_t v13 = playerasync_createCommand(a1, 8, a2, &v14);
    int v12 = (_DWORD *)v14;
    if (v13)
    {
      uint64_t v11 = v13;
    }
    else
    {
      *(void *)(v14 + 32) = a3;
      playerasync_runSynchronousCommand((uint64_t)a1, v12);
      uint64_t v11 = v12[7];
    }
    goto LABEL_16;
  }
  if (*v7) {
    goto LABEL_6;
  }
  uint64_t v9 = FigCFWeakReferenceHolderCopyReferencedObject();
  uint64_t v10 = a1;
  if ((const void *)v9 == a1) {
    goto LABEL_14;
  }
  uint64_t v10 = (const void *)v9;
  uint64_t v11 = FigSignalErrorAt();
  int v12 = 0;
LABEL_16:
  fpa_releaseCommand(v12);
  if (v10) {
    CFRelease(v10);
  }
  return v11;
}

uint64_t playerasync_SetRateWithFade(void *a1, long long *a2, float a3)
{
  uint64_t v10 = 0;
  if (*(_DWORD *)CMBaseObjectGetDerivedStorage())
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v7 = playerasync_createCommand(a1, 11, 0, &v10);
    unsigned int v8 = v10;
    if (!v7)
    {
      *((float *)v10 + 8) = a3;
      long long v9 = *a2;
      *(void *)((char *)v8 + 52) = *((void *)a2 + 2);
      *(_OWORD *)((char *)v8 + 36) = v9;
      playerasync_runAsynchronousCommand(a1, v8);
      unsigned int v8 = 0;
    }
    fpa_releaseCommand(v8);
    return v7;
  }
}

uint64_t playerasync_StartPreroll(void *a1, int a2, float a3)
{
  long long v9 = 0;
  if (*(_DWORD *)CMBaseObjectGetDerivedStorage())
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v7 = playerasync_createCommand(a1, 12, 0, &v9);
    unsigned int v8 = v9;
    if (!v7)
    {
      *((float *)v9 + 8) = a3;
      *((_DWORD *)v8 + 9) = a2;
      playerasync_runAsynchronousCommand(a1, v8);
      unsigned int v8 = 0;
    }
    fpa_releaseCommand(v8);
    return v7;
  }
}

uint64_t playerasync_StepByCount(void *a1, int a2)
{
  uint64_t v7 = 0;
  if (*(_DWORD *)CMBaseObjectGetDerivedStorage())
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v5 = playerasync_createCommand(a1, 13, 0, &v7);
    uint64_t v6 = v7;
    if (!v5)
    {
      *((_DWORD *)v7 + 8) = a2;
      playerasync_runAsynchronousCommand(a1, v6);
      uint64_t v6 = 0;
    }
    fpa_releaseCommand(v6);
    return v5;
  }
}

uint64_t playerasync_SetRateAndAnchorTime(void *a1, long long *a2, long long *a3, int a4, float a5)
{
  uint64_t v15 = 0;
  if (*(_DWORD *)CMBaseObjectGetDerivedStorage())
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v11 = playerasync_createCommand(a1, 15, 0, &v15);
    int v12 = v15;
    if (!v11)
    {
      *((float *)v15 + 8) = a5;
      long long v13 = *a2;
      *(void *)((char *)v12 + 52) = *((void *)a2 + 2);
      *(_OWORD *)((char *)v12 + 36) = v13;
      long long v14 = *a3;
      *(void *)((char *)v12 + 76) = *((void *)a3 + 2);
      *(_OWORD *)((char *)v12 + 60) = v14;
      *((_DWORD *)v12 + 21) = a4;
      playerasync_runAsynchronousCommand(a1, v12);
      int v12 = 0;
    }
    fpa_releaseCommand(v12);
    return v11;
  }
}

uint64_t playerasync_CreatePlaybackItemFromAsset(void *a1, const void *a2, int a3, const __CFDictionary *a4, CFTypeRef *a5)
{
  CFTypeRef cf = 0;
  uint64_t v21 = 0;
  CFTypeRef value = 0;
  if (a5)
  {
    *a5 = 0;
    CFGetAllocator(a1);
    FigPlaybackItemGetClassID();
    CMDerivedObjectCreate();
    if (!cf) {
      goto LABEL_19;
    }
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    *(unsigned char *)(DerivedStorage + 32) = 0;
    if (a4 && CFDictionaryGetValueIfPresent(a4, @"LoggingIdentifier", (const void **)&value)) {
      CFStringGetCString((CFStringRef)value, (char *)(DerivedStorage + 32), 10, 0x600u);
    }
    uint64_t v11 = FigCFWeakReferenceHolderCreateWithReferencedObject();
    *(void *)(DerivedStorage + 24) = v11;
    if (v11)
    {
      *(_DWORD *)(DerivedStorage + 8) = 0;
      uint64_t v12 = CMBaseObjectGetDerivedStorage();
      MEMORY[0x19970E910](*(void *)(v12 + 40));
      CFSetAddValue(*(CFMutableSetRef *)(v12 + 32), cf);
      MEMORY[0x19970E930](*(void *)(v12 + 40));
      uint64_t v13 = playerasync_createCommand(a1, 16, cf, &v21);
      if (!v13)
      {
        if (a2) {
          CFTypeRef v14 = CFRetain(a2);
        }
        else {
          CFTypeRef v14 = 0;
        }
        CFTypeRef v16 = v21;
        *((void *)v21 + 4) = v14;
        v16[10] = a3;
        if (a4) {
          CFTypeRef v17 = CFRetain(a4);
        }
        else {
          CFTypeRef v17 = 0;
        }
        *((void *)v16 + 6) = v17;
        playerasync_runAsynchronousCommand(a1, v16);
        uint64_t v18 = 0;
        *a5 = cf;
        CFTypeRef cf = 0;
        uint64_t v21 = 0;
LABEL_18:
        fpa_releaseCommand(v21);
        return v18;
      }
    }
    else
    {
LABEL_19:
      uint64_t v13 = FigSignalErrorAt();
    }
    uint64_t v18 = v13;
    if (cf) {
      CFRelease(cf);
    }
    goto LABEL_18;
  }

  return FigSignalErrorAt();
}

uint64_t playerasync_SetRateWithOptions(void *a1, const void *a2, float a3)
{
  uint64_t v10 = 0;
  if (*(_DWORD *)CMBaseObjectGetDerivedStorage())
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v7 = playerasync_createCommand(a1, 17, 0, &v10);
    unsigned int v8 = v10;
    if (!v7)
    {
      *((float *)v10 + 8) = a3;
      if (a2) {
        CFTypeRef v9 = CFRetain(a2);
      }
      else {
        CFTypeRef v9 = 0;
      }
      v8[8] = v9;
      playerasync_runAsynchronousCommand(a1, v8);
      unsigned int v8 = 0;
    }
    fpa_releaseCommand(v8);
    return v7;
  }
}

uint64_t playerasync_SetProperties(void *a1, const __CFDictionary *a2, CFTypeRef *a3)
{
  CFTypeRef cf = 0;
  uint64_t v15 = 0;
  uint64_t DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  BOOL v13 = 0;
  CFTypeRef v12 = 0;
  if (!a2)
  {
    uint64_t v10 = FigSignalErrorAt();
    goto LABEL_13;
  }
  if (*DerivedStorage)
  {
    uint64_t v7 = FigSignalErrorAt();
  }
  else
  {
    uint64_t v7 = FPSupport_HandlePlayerSetPropertiesAndCopyModification((uint64_t)a1, a2, 0, (uint64_t)playerasync_handleSetProperty, &v13, &cf, &v12);
    if (!v7)
    {
      if (v13)
      {
LABEL_10:
        uint64_t v10 = 0;
        goto LABEL_11;
      }
      uint64_t v7 = playerasync_createCommand(a1, 4, 0, &v15);
      if (!v7)
      {
        CFTypeRef v8 = cf;
        if (cf) {
          CFTypeRef v8 = CFRetain(cf);
        }
        CFTypeRef v9 = v15;
        *((void *)v15 + 4) = v8;
        v9[5] = 0;
        playerasync_runAsynchronousCommand(a1, v9);
        uint64_t v15 = 0;
        if (a3)
        {
          uint64_t v10 = 0;
          *a3 = v12;
          CFTypeRef v12 = 0;
          goto LABEL_13;
        }
        goto LABEL_10;
      }
    }
  }
  uint64_t v10 = v7;
LABEL_11:
  if (v12) {
    CFRelease(v12);
  }
LABEL_13:
  if (cf) {
    CFRelease(cf);
  }
  fpa_releaseCommand(v15);
  return v10;
}

uint64_t playerasync_AddExternalStartupTask(void *a1, const void *a2)
{
  uint64_t v10 = 0;
  uint64_t DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (!a2 || *DerivedStorage)
  {
    uint64_t v5 = FigSignalErrorAt();
  }
  else
  {
    uint64_t v5 = playerasync_createCommand(a1, 18, 0, &v10);
    if (v5)
    {
      CFTypeRef v8 = v10;
      goto LABEL_6;
    }
    CFTypeRef v6 = CFRetain(a2);
    uint64_t v7 = v10;
    v10[4] = v6;
    playerasync_runAsynchronousCommand(a1, v7);
  }
  CFTypeRef v8 = 0;
LABEL_6:
  fpa_releaseCommand(v8);
  return v5;
}

uint64_t playerasync_RemoveExternalStartupTask(void *a1, const void *a2)
{
  uint64_t v10 = 0;
  uint64_t DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (!a2 || *DerivedStorage)
  {
    uint64_t v5 = FigSignalErrorAt();
  }
  else
  {
    uint64_t v5 = playerasync_createCommand(a1, 19, 0, &v10);
    if (v5)
    {
      CFTypeRef v8 = v10;
      goto LABEL_6;
    }
    CFTypeRef v6 = CFRetain(a2);
    uint64_t v7 = v10;
    v10[4] = v6;
    playerasync_runAsynchronousCommand(a1, v7);
  }
  CFTypeRef v8 = 0;
LABEL_6:
  fpa_releaseCommand(v8);
  return v5;
}

uint64_t playerasync_CopyDisplayedCVPixelBuffer(const void *a1, const void *a2, uint64_t a3)
{
  uint64_t v11 = 0;
  uint64_t v6 = playerasync_createCommand(a1, 48, 0, &v11);
  if (v6)
  {
    CFTypeRef v9 = v11;
  }
  else
  {
    if (a2) {
      CFTypeRef v7 = CFRetain(a2);
    }
    else {
      CFTypeRef v7 = 0;
    }
    CFTypeRef v8 = v11;
    v11[4] = v7;
    v8[5] = a3;
    playerasync_runSynchronousCommand((uint64_t)a1, v8);
    CFTypeRef v9 = 0;
  }
  fpa_releaseCommand(v9);
  return v6;
}

void itemasync_InvalidateOnQueue(const void *a1)
{
  itemasync_InvalidateInternal(a1);

  CFRelease(a1);
}

uint64_t itemasync_handleSetProperty(uint64_t a1, uint64_t a2, const void *a3, const void *a4, unsigned char *a5, CFTypeRef *a6, void *a7)
{
  if (!*(_DWORD *)CMBaseObjectGetDerivedStorage() && a3 && (uint64_t v12 = FigCFWeakReferenceHolderCopyReferencedObject()) != 0)
  {
    BOOL v13 = (const void *)v12;
    if (*(_DWORD *)CMBaseObjectGetDerivedStorage())
    {
      uint64_t v15 = FigSignalErrorAt();
    }
    else
    {
      *a5 = 0;
      *a6 = CFRetain(a3);
      if (a4) {
        CFTypeRef v14 = CFRetain(a4);
      }
      else {
        CFTypeRef v14 = 0;
      }
      uint64_t v15 = 0;
      *a7 = v14;
    }
    CFRelease(v13);
    return v15;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t itemasync_CopyTrackProperty(const void *a1, int a2, const void *a3, const void *a4, void *a5)
{
  uint64_t DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  uint64_t v19 = 0;
  if (a5 && (*a5 = 0, !*DerivedStorage) && a3)
  {
    uint64_t v11 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v11)
    {
      uint64_t v12 = (const void *)v11;
      if (*(_DWORD *)CMBaseObjectGetDerivedStorage())
      {
        uint64_t v17 = FigSignalErrorAt();
        uint64_t v14 = 0;
      }
      else
      {
        uint64_t v13 = playerasync_createCommand(v12, 32, a1, &v19);
        uint64_t v14 = v19;
        if (v13)
        {
          uint64_t v17 = v13;
        }
        else
        {
          *(_DWORD *)(v19 + 32) = a2;
          *(void *)(v14 + 40) = CFRetain(a3);
          if (a4) {
            CFTypeRef v15 = CFRetain(a4);
          }
          else {
            CFTypeRef v15 = 0;
          }
          *(void *)(v14 + 48) = v15;
          *(void *)(v14 + 56) = a5;
          playerasync_runSynchronousCommand((uint64_t)v12, (_DWORD *)v14);
          uint64_t v17 = *(unsigned int *)(v14 + 28);
        }
      }
      fpa_releaseCommand((void *)v14);
      CFRelease(v12);
      return v17;
    }
    else
    {
      uint64_t v18 = FigSignalErrorAt();
      fpa_releaseCommand(0);
      return v18;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t itemasync_CopyCommonMetadata(const void *a1, const void *a2, const void *a3, void *a4)
{
  uint64_t v18 = 0;
  uint64_t DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (a4 && (*a4 = 0, !*DerivedStorage))
  {
    uint64_t v10 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v10)
    {
      uint64_t v11 = (const void *)v10;
      if (*(_DWORD *)CMBaseObjectGetDerivedStorage())
      {
        uint64_t v16 = FigSignalErrorAt();
        uint64_t v14 = 0;
      }
      else
      {
        uint64_t v12 = playerasync_createCommand(v11, 35, a1, &v18);
        if (v12)
        {
          uint64_t v16 = v12;
          uint64_t v14 = v18;
        }
        else
        {
          if (a2) {
            CFTypeRef v13 = CFRetain(a2);
          }
          else {
            CFTypeRef v13 = 0;
          }
          uint64_t v14 = v18;
          *(void *)(v18 + 32) = v13;
          if (a3) {
            CFTypeRef v15 = CFRetain(a3);
          }
          else {
            CFTypeRef v15 = 0;
          }
          *(void *)(v14 + 40) = v15;
          *(void *)(v14 + 48) = a4;
          playerasync_runSynchronousCommand((uint64_t)v11, (_DWORD *)v14);
          uint64_t v16 = *(unsigned int *)(v14 + 28);
        }
      }
      fpa_releaseCommand((void *)v14);
      CFRelease(v11);
      return v16;
    }
    else
    {
      uint64_t v17 = FigSignalErrorAt();
      fpa_releaseCommand(0);
      return v17;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t itemasync_CopyChapterImageData(const void *a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v16 = 0;
  uint64_t DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (a3 && (*a3 = 0, a4) && (*a4 = 0, !*DerivedStorage))
  {
    uint64_t v10 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v10)
    {
      uint64_t v11 = (const void *)v10;
      if (*(_DWORD *)CMBaseObjectGetDerivedStorage())
      {
        uint64_t v14 = FigSignalErrorAt();
        uint64_t v13 = 0;
      }
      else
      {
        uint64_t v12 = playerasync_createCommand(v11, 36, a1, &v16);
        uint64_t v13 = v16;
        if (v12)
        {
          uint64_t v14 = v12;
        }
        else
        {
          *(void *)(v16 + 32) = a2;
          *(void *)(v13 + 40) = a3;
          *(void *)(v13 + 48) = a4;
          playerasync_runSynchronousCommand((uint64_t)v11, (_DWORD *)v13);
          uint64_t v14 = *(unsigned int *)(v13 + 28);
        }
      }
      fpa_releaseCommand((void *)v13);
      CFRelease(v11);
      return v14;
    }
    else
    {
      uint64_t v15 = FigSignalErrorAt();
      fpa_releaseCommand(0);
      return v15;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t itemasync_GetNextThumbnailTime(const void *a1, long long *a2, int a3, uint64_t a4)
{
  uint64_t v18 = 0;
  uint64_t DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (a4
    && (uint64_t v9 = MEMORY[0x1E4F1F9F8],
        *(_OWORD *)a4 = *MEMORY[0x1E4F1F9F8],
        *(void *)(a4 + 16) = *(void *)(v9 + 16),
        !*DerivedStorage))
  {
    uint64_t v11 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v11)
    {
      uint64_t v12 = (const void *)v11;
      if (*(_DWORD *)CMBaseObjectGetDerivedStorage())
      {
        uint64_t v16 = FigSignalErrorAt();
        uint64_t v14 = 0;
      }
      else
      {
        uint64_t v13 = playerasync_createCommand(v12, 37, a1, &v18);
        uint64_t v14 = v18;
        if (v13)
        {
          uint64_t v16 = v13;
        }
        else
        {
          long long v15 = *a2;
          *(void *)(v18 + 48) = *((void *)a2 + 2);
          *(_OWORD *)(v14 + 32) = v15;
          *(_DWORD *)(v14 + 56) = a3;
          *(void *)(v14 + 64) = a4;
          playerasync_runSynchronousCommand((uint64_t)v12, (_DWORD *)v14);
          uint64_t v16 = *(unsigned int *)(v14 + 28);
        }
      }
      fpa_releaseCommand((void *)v14);
      CFRelease(v12);
      return v16;
    }
    else
    {
      uint64_t v17 = FigSignalErrorAt();
      fpa_releaseCommand(0);
      return v17;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t itemasync_SetCurrentTimeWithRange(const void *a1, long long *a2, int a3, long long *a4, long long *a5)
{
  uint64_t v19 = 0;
  if (!*(_DWORD *)CMBaseObjectGetDerivedStorage())
  {
    uint64_t v11 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (!v11)
    {
      uint64_t v18 = FigSignalErrorAt();
      fpa_releaseCommand(0);
      return v18;
    }
    uint64_t v12 = (void *)v11;
    if (*(_DWORD *)CMBaseObjectGetDerivedStorage())
    {
      uint64_t v13 = FigSignalErrorAt();
    }
    else
    {
      playerasync_removeQueuedSeekCommands(v12, a1);
      uint64_t v13 = playerasync_createCommand(v12, 40, a1, &v19);
      uint64_t v14 = v19;
      if (v13)
      {
LABEL_10:
        fpa_releaseCommand(v14);
        CFRelease(v12);
        return v13;
      }
      long long v15 = *a2;
      *((void *)v19 + 6) = *((void *)a2 + 2);
      *((_OWORD *)v14 + 2) = v15;
      *((_DWORD *)v14 + 14) = a3;
      long long v16 = *a4;
      *(void *)((char *)v14 + 76) = *((void *)a4 + 2);
      *(_OWORD *)((char *)v14 + 60) = v16;
      long long v17 = *a5;
      *(void *)((char *)v14 + 100) = *((void *)a5 + 2);
      *(_OWORD *)((char *)v14 + 84) = v17;
      playerasync_runAsynchronousCommand(v12, v14);
    }
    uint64_t v14 = 0;
    goto LABEL_10;
  }

  return FigSignalErrorAt();
}

uint64_t itemasync_SetTrackProperty(const void *a1, int a2, const void *a3, const void *a4)
{
  uint64_t v17 = 0;
  uint64_t DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (a3 && !*DerivedStorage)
  {
    uint64_t v10 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v10)
    {
      uint64_t v11 = (void *)v10;
      if (*(_DWORD *)CMBaseObjectGetDerivedStorage())
      {
        uint64_t v15 = FigSignalErrorAt();
        uint64_t v13 = 0;
      }
      else
      {
        uint64_t v12 = playerasync_createCommand(v11, 41, a1, &v17);
        uint64_t v13 = (void *)v17;
        if (v12)
        {
          uint64_t v15 = v12;
        }
        else
        {
          *(_DWORD *)(v17 + 32) = a2;
          v13[5] = CFRetain(a3);
          if (a4) {
            CFTypeRef v14 = CFRetain(a4);
          }
          else {
            CFTypeRef v14 = 0;
          }
          v13[6] = v14;
          playerasync_runAsynchronousCommand(v11, v13);
          uint64_t v13 = 0;
          uint64_t v15 = 0;
        }
      }
      fpa_releaseCommand(v13);
      CFRelease(v11);
      return v15;
    }
    else
    {
      uint64_t v16 = FigSignalErrorAt();
      fpa_releaseCommand(0);
      return v16;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t itemasync_CopyFormatReader(const void *a1, uint64_t a2)
{
  uint64_t v12 = 0;
  uint64_t DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (a2 && !*DerivedStorage)
  {
    uint64_t v6 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v6)
    {
      CFTypeRef v7 = (const void *)v6;
      if (*(_DWORD *)CMBaseObjectGetDerivedStorage())
      {
        uint64_t v10 = FigSignalErrorAt();
        uint64_t v9 = 0;
      }
      else
      {
        uint64_t v8 = playerasync_createCommand(v7, 42, a1, &v12);
        uint64_t v9 = (_DWORD *)v12;
        if (v8)
        {
          uint64_t v10 = v8;
        }
        else
        {
          *(void *)(v12 + 32) = a2;
          playerasync_runSynchronousCommand((uint64_t)v7, v9);
          uint64_t v10 = v9[7];
        }
      }
      fpa_releaseCommand(v9);
      CFRelease(v7);
      return v10;
    }
    else
    {
      uint64_t v11 = FigSignalErrorAt();
      fpa_releaseCommand(0);
      return v11;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t itemasync_SeekToDateWithID(const void *a1, const void *a2, int a3)
{
  uint64_t v15 = 0;
  uint64_t DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (a2 && !*DerivedStorage)
  {
    uint64_t v8 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (!v8)
    {
      uint64_t v14 = FigSignalErrorAt();
      fpa_releaseCommand(0);
      return v14;
    }
    uint64_t v9 = (void *)v8;
    if (*(_DWORD *)CMBaseObjectGetDerivedStorage())
    {
      uint64_t v10 = FigSignalErrorAt();
    }
    else
    {
      playerasync_removeQueuedSeekCommands(v9, a1);
      uint64_t v10 = playerasync_createCommand(v9, 43, a1, &v15);
      if (v10)
      {
        uint64_t v13 = v15;
        goto LABEL_11;
      }
      CFTypeRef v11 = CFRetain(a2);
      uint64_t v12 = v15;
      v15[4] = v11;
      *((_DWORD *)v12 + 10) = a3;
      playerasync_runAsynchronousCommand(v9, v12);
    }
    uint64_t v13 = 0;
LABEL_11:
    fpa_releaseCommand(v13);
    CFRelease(v9);
    return v10;
  }

  return FigSignalErrorAt();
}

uint64_t itemasync_SetCurrentTimeWithRangeAndID(const void *a1, long long *a2, int a3, long long *a4, long long *a5, int a6)
{
  uint64_t v21 = 0;
  if (!*(_DWORD *)CMBaseObjectGetDerivedStorage())
  {
    uint64_t v13 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (!v13)
    {
      uint64_t v20 = FigSignalErrorAt();
      fpa_releaseCommand(0);
      return v20;
    }
    uint64_t v14 = (void *)v13;
    if (*(_DWORD *)CMBaseObjectGetDerivedStorage())
    {
      uint64_t v15 = FigSignalErrorAt();
    }
    else
    {
      playerasync_removeQueuedSeekCommands(v14, a1);
      uint64_t v15 = playerasync_createCommand(v14, 44, a1, &v21);
      uint64_t v16 = v21;
      if (v15)
      {
LABEL_10:
        fpa_releaseCommand(v16);
        CFRelease(v14);
        return v15;
      }
      long long v17 = *a2;
      *((void *)v21 + 6) = *((void *)a2 + 2);
      *((_OWORD *)v16 + 2) = v17;
      *((_DWORD *)v16 + 14) = a3;
      long long v18 = *a4;
      *(void *)((char *)v16 + 76) = *((void *)a4 + 2);
      *(_OWORD *)((char *)v16 + 60) = v18;
      long long v19 = *a5;
      *(void *)((char *)v16 + 100) = *((void *)a5 + 2);
      *(_OWORD *)((char *)v16 + 84) = v19;
      *((_DWORD *)v16 + 27) = a6;
      playerasync_runAsynchronousCommand(v14, v16);
    }
    uint64_t v16 = 0;
    goto LABEL_10;
  }

  return FigSignalErrorAt();
}

uint64_t itemasync_CopyAsset(const void *a1, uint64_t a2)
{
  uint64_t v12 = 0;
  uint64_t DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (a2 && !*DerivedStorage)
  {
    uint64_t v6 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v6)
    {
      CFTypeRef v7 = (const void *)v6;
      if (*(_DWORD *)CMBaseObjectGetDerivedStorage())
      {
        uint64_t v10 = FigSignalErrorAt();
        uint64_t v9 = 0;
      }
      else
      {
        uint64_t v8 = playerasync_createCommand(v7, 45, a1, &v12);
        uint64_t v9 = (_DWORD *)v12;
        if (v8)
        {
          uint64_t v10 = v8;
        }
        else
        {
          *(void *)(v12 + 32) = a2;
          playerasync_runSynchronousCommand((uint64_t)v7, v9);
          uint64_t v10 = v9[7];
        }
      }
      fpa_releaseCommand(v9);
      CFRelease(v7);
      return v10;
    }
    else
    {
      uint64_t v11 = FigSignalErrorAt();
      fpa_releaseCommand(0);
      return v11;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t itemasync_SetProperties(const void *a1, const __CFDictionary *a2, CFTypeRef *a3)
{
  CFTypeRef cf = 0;
  long long v17 = 0;
  BOOL v15 = 0;
  CFTypeRef v14 = 0;
  if (*(_DWORD *)CMBaseObjectGetDerivedStorage() || !a2)
  {
    uint64_t v12 = FigSignalErrorAt();
    uint64_t v11 = 0;
    uint64_t v6 = 0;
    goto LABEL_13;
  }
  uint64_t v6 = (void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v6 || *(_DWORD *)CMBaseObjectGetDerivedStorage())
  {
    uint64_t v7 = FigSignalErrorAt();
    goto LABEL_21;
  }
  uint64_t v7 = FPSupport_HandlePlaybackItemSetPropertiesAndCopyModification((uint64_t)a1, a2, 0, (uint64_t)itemasync_handleSetProperty, &v15, &cf, &v14);
  if (v7)
  {
LABEL_21:
    uint64_t v12 = v7;
    uint64_t v11 = 0;
    goto LABEL_13;
  }
  if (v15)
  {
LABEL_12:
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    goto LABEL_13;
  }
  uint64_t v8 = playerasync_createCommand(v6, 27, a1, &v17);
  if (!v8)
  {
    CFTypeRef v9 = cf;
    if (cf) {
      CFTypeRef v9 = CFRetain(cf);
    }
    uint64_t v10 = v17;
    v17[4] = v9;
    v10[5] = 0;
    playerasync_runAsynchronousCommand(v6, v10);
    if (a3)
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      *a3 = v14;
      CFTypeRef v14 = 0;
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  uint64_t v12 = v8;
  uint64_t v11 = v17;
LABEL_13:
  fpa_releaseCommand(v11);
  if (cf) {
    CFRelease(cf);
  }
  if (v14) {
    CFRelease(v14);
  }
  if (v6) {
    CFRelease(v6);
  }
  return v12;
}

uint64_t itemasync_ExtractAndRetainNextSampleBuffer(const void *a1, int a2, int a3, uint64_t a4)
{
  uint64_t v16 = 0;
  uint64_t DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (a4 && !*DerivedStorage)
  {
    uint64_t v10 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v10)
    {
      uint64_t v11 = (const void *)v10;
      if (*(_DWORD *)CMBaseObjectGetDerivedStorage())
      {
        uint64_t v14 = FigSignalErrorAt();
        uint64_t v13 = 0;
      }
      else
      {
        uint64_t v12 = playerasync_createCommand(v11, 46, a1, &v16);
        uint64_t v13 = v16;
        if (v12)
        {
          uint64_t v14 = v12;
        }
        else
        {
          *(_DWORD *)(v16 + 32) = a2;
          *(_DWORD *)(v13 + 36) = a3;
          *(void *)(v13 + 40) = a4;
          playerasync_runSynchronousCommand((uint64_t)v11, (_DWORD *)v13);
          uint64_t v14 = *(unsigned int *)(v13 + 28);
        }
      }
      fpa_releaseCommand((void *)v13);
      CFRelease(v11);
      return v14;
    }
    else
    {
      uint64_t v15 = FigSignalErrorAt();
      fpa_releaseCommand(0);
      return v15;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t itemasync_SetCurrentTimeWithOptions(const void *a1, long long *a2, const void *a3)
{
  uint64_t v15 = 0;
  if (*(_DWORD *)CMBaseObjectGetDerivedStorage())
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v7 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v7)
    {
      uint64_t v8 = (void *)v7;
      if (*(_DWORD *)CMBaseObjectGetDerivedStorage())
      {
        uint64_t v13 = FigSignalErrorAt();
        uint64_t v10 = 0;
      }
      else
      {
        playerasync_removeQueuedSeekCommands(v8, a1);
        uint64_t v9 = playerasync_createCommand(v8, 47, a1, &v15);
        uint64_t v10 = v15;
        if (v9)
        {
          uint64_t v13 = v9;
        }
        else
        {
          long long v11 = *a2;
          *(void *)(v15 + 48) = *((void *)a2 + 2);
          *(_OWORD *)(v10 + 32) = v11;
          if (a3) {
            CFTypeRef v12 = CFRetain(a3);
          }
          else {
            CFTypeRef v12 = 0;
          }
          *(void *)(v10 + 56) = v12;
          playerasync_runAsynchronousCommand(v8, (void *)v10);
          uint64_t v10 = 0;
          uint64_t v13 = 0;
        }
      }
      fpa_releaseCommand((void *)v10);
      CFRelease(v8);
      return v13;
    }
    else
    {
      uint64_t v14 = FigSignalErrorAt();
      fpa_releaseCommand(0);
      return v14;
    }
  }
}

void playerasync_removeQueuedSeekCommands(const void *a1, const void *a2)
{
  playerasync_cancelQueuedCommandsMatching(a1, 0x1Eu, a2);
  playerasync_cancelQueuedCommandsMatching(a1, 0x28u, a2);
  playerasync_cancelQueuedCommandsMatching(a1, 0x2Cu, a2);
  playerasync_cancelQueuedCommandsMatching(a1, 0x2Bu, a2);

  playerasync_cancelQueuedCommandsMatching(a1, 0x2Fu, a2);
}

uint64_t playerasync_BeginInterruption(const void *a1)
{
  uint64_t v6 = 0;
  uint64_t v2 = playerasync_createCommand(a1, 20, 0, &v6);
  uint64_t v3 = v6;
  if (v2)
  {
    uint64_t v4 = v2;
  }
  else
  {
    playerasync_runSynchronousCommand((uint64_t)a1, v6);
    uint64_t v4 = v3[7];
  }
  fpa_releaseCommand(v3);
  return v4;
}

uint64_t playerasync_EndInterruption(const void *a1, const void *a2)
{
  uint64_t v9 = 0;
  uint64_t v4 = playerasync_createCommand(a1, 21, 0, &v9);
  if (v4)
  {
    uint64_t v7 = v4;
    uint64_t v6 = (_DWORD *)v9;
  }
  else
  {
    if (a2) {
      CFTypeRef v5 = CFRetain(a2);
    }
    else {
      CFTypeRef v5 = 0;
    }
    uint64_t v6 = (_DWORD *)v9;
    *(void *)(v9 + 32) = v5;
    playerasync_runSynchronousCommand((uint64_t)a1, v6);
    uint64_t v7 = v6[7];
  }
  fpa_releaseCommand(v6);
  return v7;
}

uint64_t playerasync_SetConnectionActive(const void *a1, char a2)
{
  uint64_t v8 = 0;
  uint64_t v4 = playerasync_createCommand(a1, 22, 0, &v8);
  CFTypeRef v5 = (_DWORD *)v8;
  if (v4)
  {
    uint64_t v6 = v4;
  }
  else
  {
    *(unsigned char *)(v8 + 32) = a2;
    playerasync_runSynchronousCommand((uint64_t)a1, v5);
    uint64_t v6 = v5[7];
  }
  fpa_releaseCommand(v5);
  return v6;
}

uint64_t playerasync_DuckVolume(const void *a1, char a2, float a3, float a4)
{
  uint64_t v12 = 0;
  if (*(_DWORD *)CMBaseObjectGetDerivedStorage())
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v9 = playerasync_createCommand(a1, 23, 0, &v12);
    uint64_t v10 = v12;
    if (v9)
    {
      uint64_t v11 = v9;
    }
    else
    {
      *(unsigned char *)(v12 + 32) = a2;
      *(float *)(v10 + 36) = a3;
      *(float *)(v10 + 40) = a4;
      playerasync_runImmediateCommand(a1, v10, 0);
      uint64_t v11 = *(unsigned int *)(v10 + 28);
    }
    fpa_releaseCommand((void *)v10);
    return v11;
  }
}

uint64_t playerasync_SilentMute(const void *a1, char a2)
{
  uint64_t v8 = 0;
  if (*(_DWORD *)CMBaseObjectGetDerivedStorage())
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v5 = playerasync_createCommand(a1, 24, 0, &v8);
    uint64_t v6 = v8;
    if (v5)
    {
      uint64_t v7 = v5;
    }
    else
    {
      *(unsigned char *)(v8 + 32) = a2;
      playerasync_runImmediateCommand(a1, v6, 0);
      uint64_t v7 = *(unsigned int *)(v6 + 28);
    }
    fpa_releaseCommand((void *)v6);
    return v7;
  }
}

void playerasync_runAsynchronousCommandOnQueue(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 104));
  uint64_t v3 = (void *)(DerivedStorage + 112);
  uint64_t v4 = *(void *)(DerivedStorage + 112);
  if (!v4)
  {
    MEMORY[0x19970E930](*(void *)(DerivedStorage + 104));
    goto LABEL_27;
  }
  uint64_t v5 = *(void *)v4;
  *uint64_t v3 = *(void *)v4;
  if (!v5) {
    *(void *)(DerivedStorage + 120) = v3;
  }
  unsigned int v6 = *(_DWORD *)(v4 + 24);
  char v7 = 1;
  BOOL v8 = v6 > 0x11;
  int v9 = (1 << v6) & 0x28A00;
  if (!v8 && v9 != 0)
  {
    *(unsigned char *)(DerivedStorage + 6) = 1;
    char v7 = 0;
  }
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 104));
  if (*(_DWORD *)DerivedStorage)
  {
    *(_DWORD *)(v4 + 28) = -12785;
  }
  else
  {
    uint64_t v11 = MEMORY[0x19970E910](*(void *)(DerivedStorage + 64));
    *(void *)(DerivedStorage + 72) = MEMORY[0x19970ED80](v11);
    playerasync_runOneCommand(a1, v4);
    if ((v7 & 1) == 0) {
      *(unsigned char *)(DerivedStorage + 6) = 0;
    }
    *(void *)(DerivedStorage + 72) = 0;
    MEMORY[0x19970E930](*(void *)(DerivedStorage + 64));
    if (!*(_DWORD *)(v4 + 28)) {
      goto LABEL_27;
    }
  }
  int v12 = *(_DWORD *)(v4 + 24);
  if (v12 > 43)
  {
    if (v12 != 44)
    {
      if (v12 != 47) {
        goto LABEL_27;
      }
      FigCFDictionaryGetInt32IfPresent();
    }
    goto LABEL_26;
  }
  if (v12 != 12)
  {
    if (v12 != 43) {
      goto LABEL_27;
    }
LABEL_26:
    itemasync_postSeekWasCanceled();
    goto LABEL_27;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    CFMutableDictionaryRef v14 = Mutable;
    if (!FigCFDictionarySetInt32())
    {
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
    }
    CFRelease(v14);
  }
  else
  {
    FigSignalErrorAt();
  }
LABEL_27:
  fpa_releaseCommand((void *)v4);
  if (a1) {
    CFRelease(a1);
  }
}

uint64_t FigSampleBufferAudioRendererCentralCreateWithOptions(uint64_t a1, const void *a2, CFDictionaryRef theDict, uint64_t *a4)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  CFTypeRef value = 0;
  if (theDict)
  {
    CFDataRef v8 = (const __CFData *)CFDictionaryGetValue(theDict, @"ClientAuditToken");
    if (v8)
    {
      CFDataRef v9 = v8;
      memset(buffer, 0, 32);
      CFTypeID v10 = CFGetTypeID(v8);
      if (v10 != CFDataGetTypeID() || CFDataGetLength(v9) != 32) {
        return 4294950915;
      }
      v31.location = 0;
      v31.length = 32;
      CFDataGetBytes(v9, v31, buffer);
      long long v27 = *(_OWORD *)buffer;
      long long v28 = *(_OWORD *)&buffer[16];
      CFTypeRef cf = 0;
      *(void *)os_log_type_t type = 0;
      FigNote_AllowInternalDefaultLogs();
      fig_note_initialize_category_with_default_work_cf();
      fig_note_initialize_category_with_default_work_cf();
      uint64_t Internal = 4294950916;
      if (!a2 || !a4)
      {
LABEL_19:
        if (cf) {
          CFRelease(cf);
        }
        if (!Internal)
        {
          uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
          *(unsigned char *)(DerivedStorage + 96) = 0;
          CFMutableDictionaryRef v14 = (char *)(DerivedStorage + 96);
          goto LABEL_23;
        }
        return Internal;
      }
      if (FigPreferAudioSessionOverCMSession())
      {
        *(_OWORD *)uint64_t v25 = v27;
        long long v26 = v28;
        uint64_t v12 = FigAudioSessionCreateUsingPrimaryAVAudioSessionSiblingForAuditToken(a1, v25, @"SBAR", &cf);
        if (v12) {
          goto LABEL_42;
        }
      }
      else
      {
        *(_OWORD *)uint64_t v25 = v27;
        long long v26 = v28;
        uint64_t v12 = FigAudioSessionCreateUsingPrimaryCMSessionForAuditToken(a1, (uint64_t)v25, &cf);
        if (v12) {
          goto LABEL_42;
        }
      }
      if (cf)
      {
        *(_OWORD *)uint64_t v25 = v27;
        long long v26 = v28;
        uint64_t Internal = audioRendererCentral_createInternal(a1, a2, (uint64_t)cf, v25, (CFTypeRef *)type);
        if (Internal)
        {
          if (*(void *)type) {
            CFRelease(*(CFTypeRef *)type);
          }
        }
        else
        {
          *a4 = *(void *)type;
        }
        goto LABEL_19;
      }
      uint64_t v12 = FigSignalErrorAt();
LABEL_42:
      uint64_t Internal = v12;
      goto LABEL_19;
    }
  }
  v25[0] = 0;
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  uint64_t Internal = 4294950916;
  if (!a2 || !a4) {
    return Internal;
  }
  uint64_t Internal = audioRendererCentral_createInternal(a1, a2, 0, xmmword_194993198, v25);
  if (!Internal)
  {
    *a4 = (uint64_t)v25[0];
    uint64_t v13 = CMBaseObjectGetDerivedStorage();
    *(unsigned char *)(v13 + 96) = 0;
    CFMutableDictionaryRef v14 = (char *)(v13 + 96);
    if (!theDict)
    {
LABEL_25:
      if (dword_1E9350BD0)
      {
        LODWORD(v27) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v17 = v27;
        if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type[0])) {
          unsigned int v18 = v17;
        }
        else {
          unsigned int v18 = v17 & 0xFFFFFFFE;
        }
        if (v18)
        {
          uint64_t v19 = *a4;
          if (v19) {
            uint64_t v20 = (const char *)(CMBaseObjectGetDerivedStorage() + 96);
          }
          else {
            uint64_t v20 = "";
          }
          *(_DWORD *)buffer = 136315650;
          *(void *)&buffer[4] = "FigSampleBufferAudioRendererCentralCreateWithOptions";
          *(_WORD *)&buffer[12] = 2048;
          *(void *)&buffer[14] = v19;
          *(_WORD *)&buffer[22] = 2082;
          *(void *)&buffer[24] = v20;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      return 0;
    }
LABEL_23:
    if (CFDictionaryGetValueIfPresent(theDict, @"LoggingIdentifier", (const void **)&value)) {
      CFStringGetCString((CFStringRef)value, v14, 10, 0x600u);
    }
    goto LABEL_25;
  }
  if (v25[0]) {
    CFRelease(v25[0]);
  }
  return Internal;
}

uint64_t audioRendererCentral_createInternal(uint64_t a1, const void *a2, uint64_t a3, _OWORD *a4, CFTypeRef *a5)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v20 = 0;
  uint64_t v21 = &v20;
  uint64_t v22 = 0x2020000000;
  int v23 = 0;
  CFTypeRef cf = 0;
  FigSampleBufferAudioRendererGetClassID();
  int v9 = CMDerivedObjectCreate();
  CFTypeID v10 = v21;
  *((_DWORD *)v21 + 6) = v9;
  if (!v9)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    *(void *)uint64_t DerivedStorage = a2;
    CFRetain(a2);
    long long v12 = a4[1];
    *(_OWORD *)(DerivedStorage + 16) = *a4;
    *(_OWORD *)(DerivedStorage + 32) = v12;
    __snprintf_chk(label, 0x80uLL, 0, 0x80uLL, "com.apple.coremedia.samplebufferaudiorenderercentral.state[%p]", cf);
    dispatch_queue_t v13 = dispatch_queue_create(label, 0);
    *(void *)(DerivedStorage + 56) = v13;
    if (v13
      && (__snprintf_chk(label, 0x80uLL, 0, 0x80uLL, "com.apple.coremedia.samplebufferaudiorenderercentral.notificationQueue[%p]", cf), dispatch_queue_t v14 = dispatch_queue_create(label, 0), (*(void *)(DerivedStorage + 8) = v14) != 0))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
      if (a3)
      {
        uint64_t v15 = *(NSObject **)(DerivedStorage + 56);
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 3221225472;
        block[2] = __audioRendererCentral_createInternal_block_invoke;
        block[3] = &unk_1E5791110;
        block[4] = &v20;
        void block[5] = cf;
        block[6] = a3;
        dispatch_sync(v15, block);
      }
      CFTypeID v10 = v21;
      if (!*((_DWORD *)v21 + 6))
      {
        *a5 = cf;
        goto LABEL_8;
      }
    }
    else
    {
      CFTypeID v10 = v21;
      *((_DWORD *)v21 + 6) = -16382;
    }
  }
  if (cf)
  {
    CFRelease(cf);
    CFTypeID v10 = v21;
  }
LABEL_8:
  uint64_t v16 = *((unsigned int *)v10 + 6);
  _Block_object_dispose(&v20, 8);
  return v16;
}

void sub_19401E44C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t audioRendererCentral_subRendererNotificationHandler()
{
  CMNotificationCenterGetDefaultLocalCenter();

  return CMNotificationCenterPostNotification();
}

void audioRendererCentral_subRendererBufferedAirPlayInUseNotificationHandler()
{
  CMBaseObjectGetDerivedStorage();

  audioRendererCentral_updateBufferedAirPlayAudioInUseFromSubRenderer();
}

uint64_t __audioRendererCentral_createInternal_block_invoke(uint64_t a1)
{
  uint64_t result = audioRendererCentral_setFigAudioSession(*(void *)(a1 + 40), *(const void **)(a1 + 48));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t audioRendererCentral_setFigAudioSession(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v26 = 0;
  CFTypeRef cf = 0;
  uint64_t v4 = *MEMORY[0x1E4F1CF80];
  uint64_t SInt32 = (const void *)FigCFNumberCreateSInt32();
  if (!a2) {
    goto LABEL_12;
  }
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (!v6) {
    goto LABEL_12;
  }
  char v7 = *(uint64_t (**)(const void *, void, const void *))(v6 + 56);
  if (!v7)
  {
LABEL_18:
    uint64_t v15 = 4294948071;
    goto LABEL_13;
  }
  uint64_t v8 = v7(a2, *MEMORY[0x1E4F75FD8], SInt32);
  if (v8)
  {
LABEL_35:
    uint64_t v15 = v8;
    goto LABEL_13;
  }
  audioRendererCentral_removeAudioSessionListeners();
  audioRendererCentral_clearAudioSessionPlayingAndInterruptState();
  int v9 = *(const void **)(DerivedStorage + 64);
  *(void *)(DerivedStorage + 64) = a2;
  CFRetain(a2);
  if (v9) {
    CFRelease(v9);
  }
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (!v10)
  {
LABEL_12:
    uint64_t v15 = 4294948075;
    goto LABEL_13;
  }
  uint64_t v11 = *(uint64_t (**)(const void *, __CFString *, uint64_t, uint64_t *))(v10 + 16);
  if (!v11) {
    goto LABEL_18;
  }
  uint64_t v8 = v11(a2, @"FAS_AudioSessionID", v4, &v26);
  if (v8) {
    goto LABEL_35;
  }
  *(_DWORD *)(DerivedStorage + 48) = FigCFNumberGetSInt32();
  uint64_t v12 = *(void *)DerivedStorage;
  uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v13) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  unsigned int v17 = *(void (**)(uint64_t, __CFString *, const void *))(v14 + 56);
  if (v17) {
    v17(v12, @"FigAudioSession", a2);
  }
  audioRendererCentral_updateBufferedAirPlayAudioInUseFromSubRenderer();
  audioRendererCentral_updateRoutingContextFromAudioSession();
  if (*(void *)(CMBaseObjectGetDerivedStorage() + 64))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListener();
  }
  uint64_t v18 = *(void *)(DerivedStorage + 64);
  if (v18
    && (uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 16)) != 0
    && (uint64_t v20 = *(void (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v19 + 8)) != 0)
  {
    v20(v18, @"FAS_IsActive", v4, &cf);
    CFTypeRef v21 = cf;
  }
  else
  {
    CFTypeRef v21 = 0;
  }
  uint64_t v22 = *(void *)DerivedStorage;
  uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v23) {
    uint64_t v24 = v23;
  }
  else {
    uint64_t v24 = 0;
  }
  uint64_t v25 = *(void (**)(uint64_t, __CFString *, CFTypeRef))(v24 + 56);
  if (v25) {
    v25(v22, @"IsActiveAudioSessionApp", v21);
  }
  uint64_t v15 = 0;
LABEL_13:
  if (cf) {
    CFRelease(cf);
  }
  if (SInt32) {
    CFRelease(SInt32);
  }
  return v15;
}

void audioRendererCentral_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)DerivedStorage)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    if (*(void *)DerivedStorage)
    {
      CFRelease(*(CFTypeRef *)DerivedStorage);
      *(void *)uint64_t DerivedStorage = 0;
    }
  }
  audioRendererCentral_removeAudioSessionListeners();
  audioRendererCentral_clearAudioSessionPlayingAndInterruptState();
  CFMutableDictionaryRef v1 = *(const void **)(DerivedStorage + 64);
  if (v1)
  {
    CFRelease(v1);
    *(void *)(DerivedStorage + 64) = 0;
  }
  uint64_t v2 = *(NSObject **)(DerivedStorage + 56);
  if (v2)
  {
    dispatch_release(v2);
    *(void *)(DerivedStorage + 56) = 0;
  }
  uint64_t v3 = *(void **)(DerivedStorage + 88);
  if (v3)
  {

    *(void *)(DerivedStorage + 88) = 0;
  }
  uint64_t v4 = *(NSObject **)(DerivedStorage + 8);
  if (v4)
  {
    dispatch_release(v4);
    *(void *)(DerivedStorage + 8) = 0;
  }
}

__CFString *audioRendererCentral_CopyDebugDesc(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = CFGetAllocator(a1);
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(v3, 0);
  CFIndex v5 = CFGetRetainCount(a1);
  CFAllocatorRef v6 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, @"<FigSampleBufferAudioRendererCentral=%p retainCount=%d allocator=%p", a1, v5, v6);
  CFStringAppendFormat(Mutable, 0, @" subRenderer=%p", *(void *)DerivedStorage);
  CFStringAppendFormat(Mutable, 0, @" audioSession=%@", *(void *)(DerivedStorage + 64));
  if (*(unsigned char *)(DerivedStorage + 80)) {
    char v7 = "Yes";
  }
  else {
    char v7 = "No";
  }
  CFStringAppendFormat(Mutable, 0, @" didSetAudioSessionStateToPlaying=%s", v7);
  if (*(unsigned char *)(DerivedStorage + 81)) {
    uint64_t v8 = "Yes";
  }
  else {
    uint64_t v8 = "No";
  }
  CFStringAppendFormat(Mutable, 0, @" didCallActivateOnAudioSession=%s", v8);
  CFStringAppendFormat(Mutable, 0, @">");
  return Mutable;
}

uint64_t audioRendererCentral_CopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  if (FigCFEqual())
  {
    if (*(_DWORD *)(DerivedStorage + 48))
    {
      CFTypeRef cf = (CFTypeRef)FigCFNumberCreateUInt32();
      if (cf) {
        uint64_t v8 = 0;
      }
      else {
        uint64_t v8 = 4294950914;
      }
    }
    else
    {
      uint64_t v8 = 4294954513;
    }
  }
  else
  {
    uint64_t v9 = *(void *)DerivedStorage;
    uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v10) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v11 + 48);
    if (v12) {
      uint64_t v8 = v12(v9, a2, a3, &cf);
    }
    else {
      uint64_t v8 = 4294954514;
    }
  }
  if (a4)
  {
    *a4 = cf;
  }
  else if (cf)
  {
    CFRelease(cf);
  }
  return v8;
}

uint64_t audioRendererCentral_SetProperty(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  uint64_t v35 = 0;
  uint64_t v36 = &v35;
  uint64_t v37 = 0x2020000000;
  int v38 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  if (FigCFEqual())
  {
    if (a3)
    {
      CFTypeID v7 = CFGetTypeID(a3);
      if (v7 == CFNumberGetTypeID())
      {
        uint64_t SInt32 = FigCFNumberGetSInt32();
        long long v9 = *(_OWORD *)(DerivedStorage + 32);
        long long v40 = *(_OWORD *)(DerivedStorage + 16);
        long long v41 = v9;
        if (FigPreferAudioSessionOverCMSession())
        {
          uint64_t v10 = *MEMORY[0x1E4F1CF80];
          v39[0] = v40;
          v39[1] = v41;
          int v11 = FigAudioSessionCreateWithAVAudioSessionSiblingForAudioSessionID(v10, SInt32, v39, @"SBAR", &cf);
        }
        else
        {
          uint64_t v15 = (const void *)AudioSessionCopyCMSessionForSessionID();
          uint64_t v10 = *MEMORY[0x1E4F1CF80];
          int v11 = FigAudioSessionCreateWithCMSession(*MEMORY[0x1E4F1CF80], v15, &cf);
          if (v15) {
            CFRelease(v15);
          }
        }
        *((_DWORD *)v36 + 6) = v11;
        if (v11) {
          goto LABEL_40;
        }
        CFTypeRef v16 = cf;
        unsigned int v17 = *(const void **)(DerivedStorage + 72);
        *(void *)&v39[0] = 0;
        *(void *)&long long v40 = 0;
        if (!v17)
        {
          if (cf) {
            goto LABEL_28;
          }
          CFTypeRef v13 = 0;
          int v20 = 0;
          goto LABEL_34;
        }
        uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v18)
        {
          uint64_t v19 = *(uint64_t (**)(const void *, __CFString *, uint64_t, _OWORD *))(v18 + 8);
          if (!v19) {
            goto LABEL_32;
          }
          int v20 = v19(v17, @"FAS_CoreSessionID", v10, v39);
          if (v20)
          {
            CFTypeRef v13 = 0;
            goto LABEL_34;
          }
          if (v16)
          {
            uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v21)
            {
              uint64_t v22 = *(uint64_t (**)(CFTypeRef, __CFString *, uint64_t, long long *))(v21 + 8);
              if (v22)
              {
                int v20 = v22(v16, @"FAS_CoreSessionID", v10, &v40);
                uint64_t v23 = (const void *)v40;
                if (!v20)
                {
                  if (FigCFEqual()) {
                    CFTypeRef v16 = v17;
                  }
LABEL_28:
                  CFTypeRef v13 = CFRetain(v16);
                  int v20 = 0;
                  uint64_t v23 = (const void *)v40;
                  if (!(void)v40) {
                    goto LABEL_34;
                  }
                  goto LABEL_29;
                }
                CFTypeRef v13 = 0;
                if ((void)v40) {
LABEL_29:
                }
                  CFRelease(v23);
LABEL_34:
                if (*(void *)&v39[0]) {
                  CFRelease(*(CFTypeRef *)&v39[0]);
                }
                *((_DWORD *)v36 + 6) = v20;
                if (!v20)
                {
                  if (v13)
                  {
                    long long v27 = *(NSObject **)(DerivedStorage + 56);
                    v33[0] = MEMORY[0x1E4F143A8];
                    v33[1] = 3221225472;
                    v33[2] = __audioRendererCentral_SetProperty_block_invoke;
                    v33[3] = &unk_1E5791110;
                    v33[4] = &v35;
                    v33[5] = a1;
                    v33[6] = v13;
                    dispatch_sync(v27, v33);
                    goto LABEL_39;
                  }
                  goto LABEL_48;
                }
                goto LABEL_10;
              }
LABEL_32:
              CFTypeRef v13 = 0;
              int v20 = -19225;
              goto LABEL_34;
            }
          }
        }
        CFTypeRef v13 = 0;
        int v20 = -19221;
        goto LABEL_34;
      }
    }
LABEL_48:
    int v31 = FigSignalErrorAt();
LABEL_47:
    *((_DWORD *)v36 + 6) = v31;
    goto LABEL_40;
  }
  if (!FigCFEqual())
  {
    uint64_t v24 = *(void *)DerivedStorage;
    uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v25) {
      uint64_t v26 = v25;
    }
    else {
      uint64_t v26 = 0;
    }
    uint64_t v30 = *(uint64_t (**)(uint64_t, uint64_t, const void *))(v26 + 56);
    if (v30) {
      int v31 = v30(v24, a2, a3);
    }
    else {
      int v31 = -12782;
    }
    goto LABEL_47;
  }
  if (!a3) {
    goto LABEL_48;
  }
  CFTypeID v12 = CFGetTypeID(a3);
  if (v12 != FigAudioSessionGetTypeID()) {
    goto LABEL_48;
  }
  CFTypeRef v13 = CFRetain(a3);
  uint64_t v14 = *(NSObject **)(DerivedStorage + 56);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __audioRendererCentral_SetProperty_block_invoke_2;
  block[3] = &unk_1E5791110;
  block[4] = &v35;
  void block[5] = a1;
  block[6] = v13;
  dispatch_sync(v14, block);
LABEL_10:
  if (v13) {
LABEL_39:
  }
    CFRelease(v13);
LABEL_40:
  if (cf) {
    CFRelease(cf);
  }
  uint64_t v28 = *((unsigned int *)v36 + 6);
  _Block_object_dispose(&v35, 8);
  return v28;
}

void sub_19401F29C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t audioRendererCentral_removeAudioSessionListeners()
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (*(void *)(result + 64))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    return FigNotificationCenterRemoveWeakListener();
  }
  return result;
}

uint64_t audioRendererCentral_clearAudioSessionPlayingAndInterruptState()
{
  uint64_t result = audioRendererCentral_maybeSetAudioSessionStateToNotPlaying();
  if (!result)
  {
    uint64_t result = CMBaseObjectGetDerivedStorage();
    if (*(unsigned char *)(result + 81) == 1)
    {
      if (*(void *)(result + 64)) {
        *(unsigned char *)(result + 81) = 0;
      }
    }
  }
  return result;
}

void audioRendererCentral_interruptionNotificationListener(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a5 && *(void *)(DerivedStorage + 64) == a4 && FigCFDictionaryGetInt32IfPresent())
  {
    if (dword_1E9350BD0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    audioRendererCentral_postNotification(a2, @"Interrupted");
  }
}

void audioRendererCentral_commonFigAudioSessionPropertyDidChangeNotificationListener(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(void *)(CMBaseObjectGetDerivedStorage() + 64) == a4)
  {
    audioRendererCentral_updateRoutingContextFromAudioSession();
  }
}

uint64_t *audioRendererCentral_isActiveDidChangeNotificationListener(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  uint64_t result = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (a5)
  {
    uint64_t v8 = result;
    if (result[8] == a4)
    {
      uint64_t result = (uint64_t *)CFDictionaryGetValue(a5, (const void *)*MEMORY[0x1E4F75CC8]);
      if (result)
      {
        long long v9 = result;
        CFTypeID v10 = CFGetTypeID(result);
        uint64_t result = (uint64_t *)CFBooleanGetTypeID();
        if ((uint64_t *)v10 == result)
        {
          uint64_t v11 = *v8;
          uint64_t VTable = CMBaseObjectGetVTable();
          uint64_t v14 = *(void *)(VTable + 8);
          uint64_t result = (uint64_t *)(VTable + 8);
          uint64_t v13 = v14;
          uint64_t v15 = v14 ? v13 : 0;
          CFTypeRef v16 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t *))(v15 + 56);
          if (v16)
          {
            return (uint64_t *)v16(v11, @"IsActiveAudioSessionApp", v9);
          }
        }
      }
    }
  }
  return result;
}

uint64_t audioRendererCentral_applicationStateDidChangeNotificationListener(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (*(void *)(result + 64) == a4)
  {
    uint64_t result = FigCFDictionaryGetInt32IfPresent();
    if (dword_1E9350BD0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      return fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  return result;
}

void audioRendererCentral_postNotification(const void *a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFRetain(a1);
  CFRetain(a2);
  CFIndex v5 = *(NSObject **)(DerivedStorage + 8);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __audioRendererCentral_postNotification_block_invoke;
  block[3] = &__block_descriptor_56_e5_v8__0l;
  block[4] = a2;
  void block[5] = a1;
  block[6] = 0;
  dispatch_async(v5, block);
}

void __audioRendererCentral_postNotification_block_invoke(uint64_t a1)
{
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  CFRelease(*(CFTypeRef *)(a1 + 40));
  CFRelease(*(CFTypeRef *)(a1 + 32));
  uint64_t v2 = *(const void **)(a1 + 48);
  if (v2)
  {
    CFRelease(v2);
  }
}

void audioRendererCentral_updateRoutingContextFromAudioSession()
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  CFTypeRef v30 = 0;
  CFTypeRef v31 = 0;
  int CFPreferenceNumberWithDefault = FigGetCFPreferenceNumberWithDefault();
  uint64_t v2 = (const void **)MEMORY[0x1E4F76580];
  if (!CFPreferenceNumberWithDefault)
  {
    if (!DerivedStorage[8]) {
      goto LABEL_37;
    }
    int valuePtr = 8;
    uint64_t v3 = *(void *)(CMBaseObjectGetDerivedStorage() + 64);
    uint64_t v4 = *MEMORY[0x1E4F1CF80];
    CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    CFAllocatorRef v6 = Mutable;
    CFTypeRef cf = 0;
    char v32 = 0;
    if (v3 && Mutable)
    {
      CFArrayAppendValue(Mutable, (const void *)*MEMORY[0x1E4F75EC8]);
      CFArrayAppendValue(v6, (const void *)*MEMORY[0x1E4F76248]);
      CFArrayAppendValue(v6, (const void *)*MEMORY[0x1E4F761A0]);
      CFArrayAppendValue(v6, (const void *)*MEMORY[0x1E4F764E0]);
      CFArrayAppendValue(v6, *v2);
      uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v7)
      {
        uint64_t v8 = *(void (**)(uint64_t, __CFArray *, CFTypeRef *, void))(v7 + 112);
        if (v8) {
          v8(v3, v6, &cf, 0);
        }
      }
      FigCFDictionaryGetValue();
      CFNumberRef Value = (const __CFNumber *)FigCFDictionaryGetValue();
      if (Value) {
        CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
      }
      FigCFDictionaryGetValue();
      uint64_t v10 = FigCFDictionaryGetValue();
      FigCFDictionaryGetBooleanIfPresent();
      int v11 = 0;
      if ((valuePtr == 32 || valuePtr == 16) && v10 == 0)
      {
LABEL_29:
        CFRelease(v6);
        if (cf) {
          CFRelease(cf);
        }
        if (!v11) {
          goto LABEL_37;
        }
        goto LABEL_32;
      }
      if (FigCFEqual()
        || FigCFEqual() && !v10
        || FigCFEqual()
        || FigCFEqual()
        || FigCFEqual()
        || FigCFEqual())
      {
        int v11 = 0;
        goto LABEL_29;
      }
    }
    else if (!Mutable)
    {
LABEL_32:
      uint64_t v14 = DerivedStorage[8];
      if (v14)
      {
        uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v15)
        {
          CFTypeRef v16 = *(void (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v15 + 8);
          if (v16) {
            v16(v14, @"FAS_RoutingContext", v4, &v31);
          }
        }
      }
      goto LABEL_37;
    }
    int v11 = 1;
    goto LABEL_29;
  }
  if (FigServer_IsAirplayd() || FigServer_IsMediaplaybackd())
  {
    if (FigRoutingContextRemoteCopySystemMusicContext()) {
      goto LABEL_46;
    }
  }
  else if (FigRoutingContextCopySystemMusicContext())
  {
    goto LABEL_46;
  }
LABEL_37:
  uint64_t v17 = DerivedStorage[8];
  if (!v17
    || (uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16)) == 0
    || (uint64_t v19 = *(unsigned int (**)(uint64_t, const void *, void, CFTypeRef *))(v18 + 48)) == 0
    || v19(v17, *v2, 0, &v30)
    || ((uint64_t v25 = *DerivedStorage, v26 = v30, (v27 = *(void *)(CMBaseObjectGetVTable() + 8)) == 0)
      ? (uint64_t v28 = 0)
      : (uint64_t v28 = v27),
        (uint64_t v29 = *(unsigned int (**)(uint64_t, __CFString *, CFTypeRef))(v28 + 56)) != 0
     && !v29(v25, @"RemoteDeviceID", v26)))
  {
    uint64_t v20 = *DerivedStorage;
    CFTypeRef v21 = v31;
    uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v23 = v22 ? v22 : 0;
    uint64_t v24 = *(void (**)(uint64_t, __CFString *, CFTypeRef))(v23 + 56);
    if (v24) {
      v24(v20, @"RoutingContext", v21);
    }
  }
LABEL_46:
  if (v30) {
    CFRelease(v30);
  }
  if (v31) {
    CFRelease(v31);
  }
}

uint64_t audioRendererCentral_maybeSetAudioSessionStateToNotPlaying()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 80) != 1) {
    return 0;
  }
  uint64_t v1 = DerivedStorage;
  uint64_t v2 = *(void *)(DerivedStorage + 64);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (!v3) {
    return 4294948075;
  }
  uint64_t v4 = *(uint64_t (**)(uint64_t, void, void))(v3 + 56);
  if (!v4) {
    return 4294948071;
  }
  uint64_t result = v4(v2, *MEMORY[0x1E4F762D8], *MEMORY[0x1E4F1CFC8]);
  if (!result) {
    *(unsigned char *)(v1 + 80) = 0;
  }
  return result;
}

__CFString *audioRendererCentral_synchronizerCentralClientAccessProtocolCopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"FigSampleBufferAudioRenderer_Central <FigSampleBufferRenderSynchronizerCentralClientAccessProtocol> on <%p>", a1);
  return Mutable;
}

uint64_t audioRendererCentral_ProcessRateChange(uint64_t a1, char a2, float a3)
{
  uint64_t v12 = 0;
  uint64_t v13 = &v12;
  uint64_t v14 = 0x2020000000;
  int v15 = 0;
  CFAllocatorRef v6 = *(NSObject **)(CMBaseObjectGetDerivedStorage() + 56);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __audioRendererCentral_ProcessRateChange_block_invoke;
  block[3] = &unk_1E5791158;
  block[4] = &v12;
  void block[5] = a1;
  char v11 = a2;
  float v10 = a3;
  dispatch_sync(v6, block);
  uint64_t v7 = *((unsigned int *)v13 + 6);
  _Block_object_dispose(&v12, 8);
  return v7;
}

void sub_194020CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t audioRendererCentral_QueueIsAboveHighWaterLevel()
{
  uint64_t v0 = *(void *)CMBaseObjectGetDerivedStorage();
  uint64_t v1 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v1) {
    uint64_t v2 = v1;
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v2 + 8);
  if (!v3) {
    return 1;
  }

  return v3(v0);
}

uint64_t audioRendererCentral_EnqueueSampleBuffer(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  uint64_t v5 = *DerivedStorage;
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 16);
  if (!v8) {
    return 4294954514;
  }
  uint64_t result = v8(v5, a2);
  if (!result)
  {
    float v10 = DerivedStorage[7];
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __audioRendererCentral_EnqueueSampleBuffer_block_invoke;
    block[3] = &__block_descriptor_40_e5_v8__0l;
    block[4] = a1;
    dispatch_sync(v10, block);
    return 0;
  }
  return result;
}

uint64_t audioRendererCentral_Flush()
{
  uint64_t v0 = *(void *)CMBaseObjectGetDerivedStorage();
  uint64_t v1 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v1) {
    uint64_t v2 = v1;
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v2 + 24);
  if (!v3) {
    return 4294954514;
  }

  return v3(v0);
}

uint64_t audioRendererCentral_AttachToSynchronizer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (!a2) {
    goto LABEL_11;
  }
  CMTimebaseRef timebase = 0;
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  long long v9 = *(uint64_t (**)(uint64_t, CMTimebaseRef *))(v8 + 32);
  if (!v9) {
    return 4294954514;
  }
  uint64_t v10 = v9(a2, &timebase);
  CMTimebaseRef v11 = timebase;
  if (!v10)
  {
    float Rate = CMTimebaseGetRate(timebase);
    uint64_t v10 = audioRendererCentral_ProcessRateChange(a1, 1, Rate);
    CMTimebaseRef v11 = timebase;
  }
  if (v11) {
    CFRelease(v11);
  }
  if (!v10)
  {
LABEL_11:
    uint64_t v13 = *DerivedStorage;
    uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v14) {
      uint64_t v15 = v14;
    }
    else {
      uint64_t v15 = 0;
    }
    CFTypeRef v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 32);
    if (v16)
    {
      uint64_t v17 = v16(v13, a2, a3);
      uint64_t v10 = v17;
      if (!a2 && !v17) {
        return audioRendererCentral_ProcessRateChange(a1, 0, 0.0);
      }
      return v10;
    }
    return 4294954514;
  }
  return v10;
}

uint64_t audioRendererCentral_CopyClock(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 40);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t audioRendererCentral_SetRateAndTime(float a1, uint64_t a2, long long *a3)
{
  uint64_t v5 = *(void *)CMBaseObjectGetDerivedStorage();
  long long v10 = *a3;
  uint64_t v11 = *((void *)a3 + 2);
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, long long *, float))(v7 + 48);
  if (!v8) {
    return 4294954514;
  }
  long long v12 = v10;
  uint64_t v13 = v11;
  return v8(v5, &v12, a1);
}

uint64_t audioRendererCentral_FlushFromMediaTime(uint64_t a1, long long *a2, void (*a3)(uint64_t, uint64_t), uint64_t a4)
{
  uint64_t v7 = *(void *)CMBaseObjectGetDerivedStorage();
  long long v13 = *a2;
  uint64_t v14 = *((void *)a2 + 2);
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  long long v10 = *(uint64_t (**)(uint64_t, long long *, void (*)(uint64_t, uint64_t), uint64_t))(v9 + 56);
  if (v10)
  {
    long long v15 = v13;
    uint64_t v16 = v14;
    return v10(v7, &v15, a3, a4);
  }
  else
  {
    uint64_t v11 = 4294954514;
    if (a3) {
      a3(4294954514, a4);
    }
  }
  return v11;
}

uint64_t audioRendererCentral_SetRateAndAnchorTime(float a1, uint64_t a2, long long *a3, long long *a4)
{
  uint64_t v7 = *(void *)CMBaseObjectGetDerivedStorage();
  long long v14 = *a3;
  uint64_t v15 = *((void *)a3 + 2);
  long long v12 = *a4;
  uint64_t v13 = *((void *)a4 + 2);
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  long long v10 = *(uint64_t (**)(uint64_t, long long *, long long *, float))(v9 + 64);
  if (!v10) {
    return 4294954514;
  }
  long long v18 = v14;
  uint64_t v19 = v15;
  long long v16 = v12;
  uint64_t v17 = v13;
  return v10(v7, &v18, &v16, a1);
}

void audioRendererCentral_updateBufferedAirPlayAudioInUseFromSubRenderer()
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  if (DerivedStorage[8])
  {
    uint64_t v1 = *DerivedStorage;
    uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v2) {
      uint64_t v3 = v2;
    }
    else {
      uint64_t v3 = 0;
    }
    uint64_t v4 = *(void (**)(uint64_t, __CFString *, void, CFTypeRef *))(v3 + 48);
    if (v4)
    {
      v4(v1, @"BufferedAirPlayInUse", *MEMORY[0x1E4F1CF80], &cf);
      if (cf) {
        CFRelease(cf);
      }
    }
  }
}

uint64_t FigPlayerFileCreateWithOptions(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long __str = 0u;
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  FPSupport_CheckPlayerPerformanceTrace();
  FigPlayerGetClassID();
  uint64_t v4 = CMDerivedObjectCreate();
  FigSignalErrorAt();
  *a3 = 0;
  if (dword_1E9350BF0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*MEMORY[0x1E4F1EBA8] == 1)
  {
    strncpy(__dst, (const char *)0x3B0, 8uLL);
    kdebug_trace();
  }
  return v4;
}

uint64_t playerfig_autoSelectionCriteriaChanged()
{
  CMBaseObjectGetDerivedStorage();

  return FigDeferNotificationToDispatchQueue();
}

uint64_t playerfig_spatialAudioPreferencesChanged(uint64_t a1, uint64_t a2)
{
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v6 = *(void *)(VTable + 16);
  uint64_t result = VTable + 16;
  uint64_t v5 = v6;
  if (v6) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, void))(v7 + 120);
  if (v8)
  {
    return v8(a2, 0);
  }
  return result;
}

uint64_t playerfig_ValeriaEnabled()
{
  CMBaseObjectGetDerivedStorage();

  return FigDeferNotificationToDispatchQueue();
}

void playerfig_deferredAutoSelectionCriteriaChanged(uint64_t a1, uint64_t a2)
{
}

void playerfig_applyAutoSelectionCriteriaInternal(uint64_t a1, int a2, unsigned char *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)DerivedStorage)
  {
    uint64_t v6 = DerivedStorage;
    if (*(unsigned char *)(DerivedStorage + 760))
    {
      MEMORY[0x19970E290](*(void *)(DerivedStorage + 496));
      CFArrayRef v7 = *(const __CFArray **)(v6 + 504);
      if (!v7
        || !CFArrayGetCount(v7)
        || (uint64_t ValueAtIndex = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v6 + 504), 0)) == 0)
      {
        JUMPOUT(0x19970E2B0);
      }
      long long v9 = ValueAtIndex;
      CFRetain(ValueAtIndex);
      MEMORY[0x19970E2B0](*(void *)(v6 + 496));
      itemfig_updateSelectedMediaArrayInternal(v9, 0, a2, a3);
      CFRelease(v9);
    }
  }
}

uint64_t itemfig_updateSelectedMediaArrayInternal(void *a1, const __CFArray *a2, int a3, unsigned char *a4)
{
  CFTypeRef cf = 0;
  __int16 v28 = 0;
  char v27 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 1208));
  long long v9 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v9) {
    goto LABEL_42;
  }
  uint64_t v10 = CMBaseObjectGetDerivedStorage();
  if (!a2) {
    goto LABEL_6;
  }
  CFArrayRef Mutable = *(const __CFArray **)(DerivedStorage + 1816);
  if (!Mutable)
  {
    CFArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    *(void *)(DerivedStorage + 1816) = Mutable;
    if (!Mutable)
    {
LABEL_42:
      uint64_t v12 = FigSignalErrorAt();
      goto LABEL_43;
    }
  }
  uint64_t v12 = FigAutomaticMediaSelectionCoalesceSelectedMediaArrays(Mutable, a2, 1);
  if (v12)
  {
LABEL_43:
    uint64_t v17 = v12;
    goto LABEL_44;
  }
LABEL_6:
  if (*(void *)(DerivedStorage + 1792))
  {
    if (!*(unsigned char *)(DerivedStorage + 1200)
      || (uint64_t v12 = itemfig_createCoalescedClientAndAutomaticSelectedMediaArray(a1, &cf), !v12)
      && (!cf
       || (uint64_t v12 = itemfig_applySelectedMediaArray((uint64_t)a1, (const __CFArray *)cf, (char *)&v28 + 1, &v27, (char *)&v28), !v12)))
    {
      MEMORY[0x19970E930](*(void *)(DerivedStorage + 1208));
      int v13 = HIBYTE(v28);
      if (!HIBYTE(v28) && (_BYTE)v28)
      {
        int v14 = *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 996);
        *(void *)&long long v32 = 0;
        if (v14)
        {
          uint64_t TrackStorage = itemfig_getTrackStorage((uint64_t)a1, v14, &v32);
          if (TrackStorage)
          {
LABEL_40:
            uint64_t v17 = TrackStorage;
            goto LABEL_32;
          }
          uint64_t v16 = itemfig_applyAudioSceneCompositionPresetToTrack(v32);
        }
        else
        {
          uint64_t v16 = FigSignalErrorAt();
        }
        uint64_t v17 = v16;
        if (v16) {
          goto LABEL_32;
        }
        int v13 = HIBYTE(v28);
      }
      if (!v13 && FigRenderedLegibleOutputManagerIsSupported())
      {
        playerfig_updateClosedCaptionsDisplayForItem(v9, (uint64_t)a1);
        playerfig_updateSubtitleDisplayForItem((uint64_t)v9, a1);
        playerfig_updateCaptionOrSubtitleHintOnVideoPipeline((uint64_t)v9, a1);
      }
      if (!*(void *)(DerivedStorage + 352) || !(HIBYTE(v28) | a3))
      {
LABEL_31:
        uint64_t v17 = 0;
        goto LABEL_32;
      }
      MEMORY[0x19970E290](*(void *)(v10 + 496));
      if (*(void **)(v10 + 512) == a1)
      {
        char v18 = v27 == 0;
        if (!itemfig_rebuildRenderPipelinesAndBossGuts(a1, 0, 0, 1, 0, 0, 1, v27 == 0)
          && !itemfig_rebuildRenderPipelinesAndBossGuts(a1, 1, 1, 1, 0, 0, 0, v18))
        {
          playerfig_scheduleVideoTargetImageQueueConfigurationTransitionForItem(v9, *(const __CFString **)(v10 + 512), MEMORY[0x1E4F1F9F8]);
          MEMORY[0x19970E2B0](*(void *)(v10 + 496));
LABEL_27:
          NotificationPayloadForProperties = playerfig_createNotificationPayloadForProperties(v9, (uint64_t)a1, v19, v20, v21, v22, v23, v24, @"SelectedMediaArray", 0);
          CMNotificationCenterGetDefaultLocalCenter();
          CMNotificationCenterPostNotification();
          if (NotificationPayloadForProperties) {
            CFRelease(NotificationPayloadForProperties);
          }
          if (a4)
          {
            uint64_t v17 = 0;
            *a4 = 1;
            goto LABEL_32;
          }
          goto LABEL_31;
        }
      }
      MEMORY[0x19970E2B0](*(void *)(v10 + 496));
      long long v32 = *MEMORY[0x1E4F1F9F8];
      uint64_t v33 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
      long long v30 = v32;
      uint64_t v31 = v33;
      uint64_t TrackStorage = playerfig_stopResetDisturbReprepareAndResumeWithTransaction(v9, (uint64_t)&v32, (uint64_t)&v30, 0);
      if (!TrackStorage) {
        goto LABEL_27;
      }
      goto LABEL_40;
    }
    goto LABEL_43;
  }
  uint64_t v17 = 0;
LABEL_44:
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 1208));
LABEL_32:
  if (cf) {
    CFRelease(cf);
  }
  if (v9) {
    CFRelease(v9);
  }
  return v17;
}

uint64_t itemfig_createCoalescedClientAndAutomaticSelectedMediaArray(void *a1, CFTypeRef *a2)
{
  v18[20] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  v18[0] = 0;
  uint64_t v5 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v5 || (uint64_t v6 = CMBaseObjectGetDerivedStorage(), *(unsigned char *)v6))
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    uint64_t v14 = 0;
    goto LABEL_20;
  }
  uint64_t v7 = v6;
  if (!*(unsigned char *)(v6 + 760))
  {
    uint64_t SelectedMediaArray = itemfig_createSelectedMediaArray((const __CFAllocator *)*MEMORY[0x1E4F1CF80], a1, (__CFArray **)&cf);
    if (SelectedMediaArray
      || (v18[0] = (CFTypeRef)FigCFArrayCreateMutableCopy(),
          uint64_t SelectedMediaArray = FigAutomaticMediaSelectionCoalesceSelectedMediaArrays((const __CFArray *)v18[0], *(CFArrayRef *)(DerivedStorage + 1816), 1), SelectedMediaArray))
    {
      uint64_t v14 = SelectedMediaArray;
      goto LABEL_20;
    }
    CFDictionaryRef v11 = 0;
    CFDictionaryRef v9 = 0;
LABEL_14:
    uint64_t v14 = 0;
    if (a2)
    {
      *a2 = v18[0];
      v18[0] = 0;
    }
    if (!v9) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  MEMORY[0x19970E910](*(void *)(v6 + 752));
  uint64_t v8 = *(const void **)(v7 + 728);
  if (v8) {
    CFDictionaryRef v9 = (const __CFDictionary *)CFRetain(v8);
  }
  else {
    CFDictionaryRef v9 = 0;
  }
  uint64_t v12 = *(const void **)(v7 + 736);
  if (v12) {
    CFDictionaryRef v11 = (const __CFDictionary *)CFRetain(v12);
  }
  else {
    CFDictionaryRef v11 = 0;
  }
  MEMORY[0x19970E930](*(void *)(v7 + 752));
  uint64_t SelectedMediaArrayForCriteriaWithLegibleFallbackCriteria = FigAutomaticMediaSelectionCreateSelectedMediaArrayForCriteriaWithLegibleFallbackCriteria(*(void *)(DerivedStorage + 1792), *(const __CFArray **)(DerivedStorage + 1816), v9, v11, *(unsigned __int8 *)(v7 + 744), 0, v18);
  if (!SelectedMediaArrayForCriteriaWithLegibleFallbackCriteria) {
    goto LABEL_14;
  }
  uint64_t v14 = SelectedMediaArrayForCriteriaWithLegibleFallbackCriteria;
  if (v9) {
LABEL_17:
  }
    CFRelease(v9);
LABEL_18:
  if (v11) {
    CFRelease(v11);
  }
LABEL_20:
  if (cf) {
    CFRelease(cf);
  }
  if (v18[0]) {
    CFRelease(v18[0]);
  }
  if (v5) {
    CFRelease(v5);
  }
  return v14;
}

uint64_t itemfig_applySelectedMediaArray(uint64_t a1, const __CFArray *a2, char *a3, unsigned char *a4, char *a5)
{
  v232[16] = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(void *)(DerivedStorage + 1792))
  {
    char v177 = 0;
    CFTypeRef v198 = 0;
    char v178 = 0;
    char HasAnySourceTracksInArray = 0;
    BOOL v197 = 0;
    CFArrayRef v208 = 0;
    uint64_t v12 = 0;
LABEL_365:
    CFTypeID v175 = a5;
    int v174 = a4;
    int v176 = a3;
    goto LABEL_334;
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (!Mutable)
  {
    uint64_t v12 = FigSignalErrorAt();
    char v177 = 0;
    CFTypeRef v198 = 0;
    char v178 = 0;
    char HasAnySourceTracksInArray = 0;
    BOOL v197 = 0;
    CFArrayRef v208 = 0;
    goto LABEL_365;
  }
  CFArrayRef v208 = Mutable;
  uint64_t v9 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v9)
  {
    uint64_t v12 = FigSignalErrorAt();
    char v177 = 0;
    CFTypeRef v198 = 0;
    char v178 = 0;
    char HasAnySourceTracksInArray = 0;
    BOOL v197 = 0;
    goto LABEL_365;
  }
  CFTypeRef v198 = (CFTypeRef)v9;
  CFIndex Count = CFArrayGetCount(a2);
  if (Count < 1)
  {
    char v199 = 0;
    LOBYTE(v203) = 0;
    BOOL v197 = 0;
    uint64_t v12 = 0;
LABEL_327:
    uint64_t v172 = *(void *)(DerivedStorage + 808);
    if (v172) {
      char HasAnySourceTracksInArray = FigVideoCompositionProcessorHasAnySourceTracksInArray(v172, v208);
    }
    else {
      char HasAnySourceTracksInArray = 0;
    }
    CFTypeID v175 = a5;
    int v174 = a4;
    int v176 = a3;
    char v177 = v199;
    char v178 = v203;
    goto LABEL_334;
  }
  CFIndex v11 = Count;
  uint64_t v12 = 0;
  BOOL v197 = 0;
  int v203 = 0;
  CFIndex v13 = 0;
  char v199 = 0;
  CFArrayRef v210 = a2;
  uint64_t v211 = DerivedStorage;
  CFIndex v209 = Count;
  uint64_t v217 = a1;
  while (1)
  {
    uint64_t v218 = 0;
    uint64_t valuePtr = 0;
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a2, v13);
    if (!ValueAtIndex || (CFDictionaryRef v15 = ValueAtIndex, v16 = CFGetTypeID(ValueAtIndex), v16 != CFDictionaryGetTypeID()))
    {
      uint64_t TrackStorage = FigSignalErrorAt();
LABEL_330:
      uint64_t v12 = TrackStorage;
      CFTypeID v175 = a5;
      int v174 = a4;
      int v176 = a3;
      goto LABEL_331;
    }
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v15, @"MediaSelectionOptionsPersistentID");
    if (Value)
    {
      CFNumberRef v18 = Value;
      CFTypeID v19 = CFGetTypeID(Value);
      if (v19 != CFNumberGetTypeID()) {
        goto LABEL_21;
      }
      CFNumberGetValue(v18, kCFNumberSInt32Type, &valuePtr);
      uint64_t TrackStorage = itemfig_getTrackStorage(a1, valuePtr, &v218);
      if (TrackStorage) {
        goto LABEL_330;
      }
      CFIndex v216 = v13;
      if (*(_DWORD *)(v218 + 4) == 1668047728)
      {
        CFDictionaryRef SecondaryForcedSubtitlesSelectedMediaDictionary = (const __CFDictionary *)FigAutomaticMediaSelectionCreateSecondaryForcedSubtitlesSelectedMediaDictionary(a2, *(const __CFDictionary **)(DerivedStorage + 1808));
        if (SecondaryForcedSubtitlesSelectedMediaDictionary)
        {
          CFDictionaryRef v22 = SecondaryForcedSubtitlesSelectedMediaDictionary;
          CFNumberRef v23 = (const __CFNumber *)CFDictionaryGetValue(SecondaryForcedSubtitlesSelectedMediaDictionary, @"MediaSelectionOptionsPersistentID");
          if (v23)
          {
            CFNumberRef v24 = v23;
            CFTypeID v25 = CFGetTypeID(v23);
            if (v25 == CFNumberGetTypeID()) {
              CFNumberGetValue(v24, kCFNumberSInt32Type, (char *)&valuePtr + 4);
            }
          }
          CFRelease(v22);
        }
        uint64_t v212 = 0;
        uint64_t v12 = 0;
        int v204 = 1;
        int v206 = 0;
        goto LABEL_26;
      }
      uint64_t v212 = 0;
      int v204 = 0;
      uint64_t v12 = 0;
    }
    else
    {
      CFTypeRef v26 = CFDictionaryGetValue(v15, @"MediaSelectionOptionsUniqueOutOfBandID");
      if (v26)
      {
        uint64_t v212 = v26;
        CFTypeID v27 = CFGetTypeID(v26);
        if (v27 != CFNumberGetTypeID())
        {
LABEL_21:
          uint64_t v12 = FigSignalErrorAt();
          goto LABEL_41;
        }
        CFIndex v216 = v13;
      }
      else
      {
        CFIndex v216 = v13;
        uint64_t v212 = 0;
      }
      int v204 = 0;
    }
    int v206 = 1;
LABEL_26:
    __int16 v28 = CFDictionaryGetValue(v15, @"MediaSelectionGroupID");
    uint64_t v29 = CFDictionaryGetValue(v15, @"MediaSelectionGroupMediaType");
    uint64_t v30 = CMBaseObjectGetDerivedStorage();
    uint64_t v31 = *(const void **)(v30 + 1792);
    if (v31)
    {
      CFTypeID v32 = CFGetTypeID(v31);
      if (v32 == CFArrayGetTypeID())
      {
        CFIndex v33 = CFArrayGetCount(*(CFArrayRef *)(v30 + 1792));
        if (v33 >= 1)
        {
          CFIndex v34 = v33;
          CFIndex v35 = 0;
          while (1)
          {
            CFDictionaryRef v36 = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v30 + 1792), v35);
            if (v36)
            {
              CFDictionaryRef v37 = v36;
              CFTypeID v38 = CFGetTypeID(v36);
              if (v38 == CFDictionaryGetTypeID())
              {
                CFDictionaryGetValue(v37, @"MediaSelectionGroupID");
                CFDictionaryGetValue(v37, @"MediaSelectionGroupMediaType");
                if (FigCFEqual())
                {
                  if (FigCFEqual()) {
                    break;
                  }
                }
              }
            }
            if (v34 == ++v35) {
              goto LABEL_35;
            }
          }
          CFTypeID v42 = CFGetTypeID(v37);
          if (v42 == CFDictionaryGetTypeID()) {
            break;
          }
        }
      }
    }
LABEL_35:
    *(_DWORD *)uint64_t v225 = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v40 = *(_DWORD *)v225;
    if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type[0])) {
      unsigned int v41 = v40;
    }
    else {
      unsigned int v41 = v40 & 0xFFFFFFFE;
    }
    if (v41)
    {
      *(_DWORD *)CMTime v227 = 136315650;
      *(void *)&v227[4] = "itemfig_applySelectedMediaArray";
      __int16 v228 = 2114;
      CMTime v229 = v28;
      __int16 v230 = 2114;
      CMTime v231 = v29;
      _os_log_send_and_compose_impl();
    }
    a1 = v217;
    a2 = v210;
    uint64_t DerivedStorage = v211;
    CFIndex v11 = v209;
    CFIndex v13 = v216;
    fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_41:
    if (++v13 == v11) {
      goto LABEL_327;
    }
  }
  CFArrayRef v43 = (const __CFArray *)CFDictionaryGetValue(v37, @"MediaSelectionGroupOptions");
  if (!v43 || (CFArrayRef v44 = v43, v45 = CFGetTypeID(v43), v45 != CFArrayGetTypeID()))
  {
    uint64_t v169 = FigSignalErrorAt();
    goto LABEL_359;
  }
  CFIndex v46 = CFArrayGetCount(v44);
  LODWORD(v232[0]) = 1061109567;
  a1 = v217;
  if (!v46
    || (FigCFArrayGetValueAtIndex(),
        FigCFDictionaryGetStringValue(),
        FigCFStringGetOSTypeValue(),
        LODWORD(v232[0]) != 1936684398))
  {
    CFIndex v55 = CFArrayGetCount(v44);
    if (v55 < 1) {
      goto LABEL_323;
    }
    CFIndex v56 = v55;
    CFArrayRef theArray = v44;
    Boolean v188 = 0;
    int v190 = 0;
    int v195 = 0;
    int v57 = 0;
    CFIndex v58 = 0;
    while (1)
    {
      *(_DWORD *)CMTime v227 = 0;
      v232[0] = 0;
      CFDictionaryRef v59 = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v58);
      CFArrayRef v60 = (const __CFArray *)CFDictionaryGetValue(v59, @"MediaSelectionOptionsFallbackIDs");
      if (v60) {
        CFIndex v61 = CFArrayGetCount(v60);
      }
      else {
        CFIndex v61 = 0;
      }
      *(_DWORD *)uint64_t v225 = 1061109567;
      if (!v59 || (CFTypeID v62 = CFGetTypeID(v59), v62 != CFDictionaryGetTypeID()))
      {
LABEL_355:
        uint64_t v85 = FigSignalErrorAt();
LABEL_356:
        uint64_t v12 = v85;
        a1 = v217;
LABEL_357:
        CFTypeID v175 = a5;
        int v174 = a4;
        int v176 = a3;
        goto LABEL_360;
      }
      CFDictionaryGetValue(v59, @"MediaSelectionOptionsMediaType");
      FigCFStringGetOSTypeValue();
      CFNumberRef v63 = (const __CFNumber *)CFDictionaryGetValue(v59, @"MediaSelectionOptionsPersistentID");
      if (v63)
      {
        CFNumberRef v64 = v63;
        CFIndex v65 = v56;
        CFTypeID v66 = CFGetTypeID(v63);
        if (v66 != CFNumberGetTypeID()) {
          goto LABEL_355;
        }
        CFNumberGetValue(v64, kCFNumberSInt32Type, v227);
        int v67 = FigCFEqual();
        BOOL v68 = v67;
        if (*(_DWORD *)v225 == 1935832172)
        {
          if (v67) {
            BOOL v75 = 1;
          }
          else {
            BOOL v75 = *(_DWORD *)v227 == HIDWORD(valuePtr);
          }
          BOOL v68 = v75;
        }
        else if (*(_DWORD *)v225 == 1668047728)
        {
          if (v67)
          {
            int v190 = 1;
            BOOL v68 = 1;
          }
          else
          {
            if (v206) {
              BOOL v68 = *(_DWORD *)v227 == *(_DWORD *)(v211 + 1008);
            }
            else {
              BOOL v68 = 0;
            }
            int v190 = 1;
          }
        }
        uint64_t v77 = CFDictionaryGetValue(v59, @"MediaSelectionOptionsDisplaysNonForcedSubtitles");
        if (v77) {
          int v57 = 1;
        }
        int v192 = v57;
        int v78 = v68;
        if (v68)
        {
          if (v77)
          {
            if (*(_DWORD *)v227 != HIDWORD(valuePtr))
            {
              CFBooleanRef v79 = (const __CFBoolean *)CFDictionaryGetValue(v15, @"MediaSelectionOptionsDisplaysNonForcedSubtitles");
              if (v79)
              {
                CFBooleanRef v80 = v79;
                CFTypeID v81 = CFGetTypeID(v79);
                BOOL v53 = v81 == CFBooleanGetTypeID();
                BOOL v68 = v78;
                if (v53) {
                  Boolean v188 = CFBooleanGetValue(v80);
                }
              }
            }
          }
        }
        int v82 = v195;
        if (*(_DWORD *)v225 == 1952807028) {
          int v82 = 1;
        }
        int v195 = v82;
        int v83 = *(_DWORD *)v227;
        if (v68)
        {
          if (v61)
          {
            *(_DWORD *)os_log_type_t type = 0;
            if (FigCFArrayGetInt32AtIndex()) {
              int v83 = *(_DWORD *)type;
            }
          }
        }
        if (v61 >= 1)
        {
          for (uint64_t i = 0; v61 != i; ++i)
          {
            *(_DWORD *)os_log_type_t type = 0;
            FigCFArrayGetInt32AtIndex();
            if (*(_DWORD *)type != v83)
            {
              uint64_t v85 = itemfig_getTrackStorage(v217, *(int *)type, v232);
              if (v85) {
                goto LABEL_356;
              }
              uint64_t v86 = v232[0];
              if (*(unsigned char *)(v232[0] + 8))
              {
                FigCFArrayAppendInt32();
                itemfig_setTrackEnabled(v217, v86, 0);
                uint64_t updated = itemfig_updateDefaultTrackID(v217, *(int *)type, (char *)&v223);
                if (updated)
                {
                  uint64_t v12 = updated;
                  CFTypeID v175 = a5;
                  int v174 = a4;
                  int v176 = a3;
                  a1 = v217;
                  goto LABEL_349;
                }
                int v203 = 1;
              }
            }
          }
        }
        a1 = v217;
        uint64_t v88 = itemfig_getTrackStorage(v217, v83, v232);
        if (v88)
        {
          uint64_t v12 = v88;
          goto LABEL_357;
        }
        uint64_t v89 = v232[0];
        CFIndex v56 = v65;
        if (*(unsigned __int8 *)(v232[0] + 8) != v78)
        {
          FigCFArrayAppendInt32();
          itemfig_setTrackEnabled(v217, v89, v78);
          uint64_t v12 = itemfig_updateDefaultTrackID(v217, v83, (char *)type);
          int v57 = v192;
          if (v12)
          {
            CFTypeID v175 = a5;
            int v174 = a4;
            int v176 = a3;
LABEL_349:
            char v177 = v199;
            char HasAnySourceTracksInArray = 0;
            char v178 = 1;
            uint64_t DerivedStorage = v211;
LABEL_350:
            if (*(unsigned char *)(DerivedStorage + 1202))
            {
              char v180 = v177;
              char v181 = v178;
              itemfig_postSelectedMediaOptionsDidChangeNotification(a1);
              char v178 = v181;
              char v177 = v180;
              int v176 = a3;
              CFTypeID v175 = a5;
              int v174 = a4;
              if (!a3) {
                goto LABEL_339;
              }
            }
            else
            {
              *(unsigned char *)(DerivedStorage + 1201) = 1;
              if (!v176) {
                goto LABEL_339;
              }
            }
LABEL_338:
            *int v176 = v178;
            goto LABEL_339;
          }
          goto LABEL_116;
        }
        uint64_t v12 = 0;
        int v57 = v192;
      }
      else
      {
        uint64_t v69 = CFDictionaryGetValue(v59, @"MediaSelectionOptionsUniqueOutOfBandID");
        if (!v69) {
          goto LABEL_117;
        }
        CFTypeID v70 = CFGetTypeID(v69);
        if (v70 != CFNumberGetTypeID()) {
          goto LABEL_117;
        }
        if (!FigCFEqual())
        {
          if (v212) {
            goto LABEL_117;
          }
          uint64_t v76 = *(const void **)(v211 + 1848);
          if (!v76) {
            goto LABEL_117;
          }
          CFRelease(v76);
          *(void *)(v211 + 1848) = 0;
          goto LABEL_116;
        }
        uint64_t v71 = v211;
        CFDictionaryRef v72 = *(const __CFDictionary **)(v211 + 1848);
        if (!v72) {
          goto LABEL_121;
        }
        CFDictionaryGetValue(v72, @"MediaSelectionOptionsUniqueOutOfBandID");
        int v73 = FigCFEqual();
        uint64_t v74 = *(const void **)(v211 + 1848);
        if (!v73)
        {
          uint64_t v71 = v211;
          if (v74) {
            CFRelease(v74);
          }
LABEL_121:
          *(void *)(v71 + 1848) = v59;
          CFRetain(v59);
LABEL_116:
          int v203 = 1;
          goto LABEL_117;
        }
        uint64_t v71 = v211;
        if (!v74) {
          goto LABEL_121;
        }
      }
LABEL_117:
      if (++v58 == v56)
      {
        a1 = v217;
        if (v57)
        {
          *(unsigned char *)(v211 + 1022) = HIDWORD(valuePtr) != 0;
          itemfig_setDisplayNonForcedSubtitlesEnabled(v217, v188);
        }
        if ((_BYTE)v203 && (_BYTE)v195) {
          playerfig_resetSubtitleRenderPipeline();
        }
        if (v190)
        {
          a2 = v210;
          uint64_t DerivedStorage = v211;
          CFIndex v11 = v209;
          if (v197)
          {
            BOOL v197 = 1;
            CFIndex v13 = v216;
            char v93 = v204;
          }
          else
          {
            char v93 = v204;
            BOOL v197 = *(unsigned __int8 *)(v211 + 1012) != v204;
            CFIndex v13 = v216;
          }
          *(unsigned char *)(v211 + 1012) = v93;
          goto LABEL_41;
        }
LABEL_323:
        a2 = v210;
        uint64_t DerivedStorage = v211;
        CFIndex v11 = v209;
        CFIndex v13 = v216;
        goto LABEL_41;
      }
    }
  }
  uint64_t v47 = -1;
  FigCFDictionaryGetCFIndexIfPresent();
  int SInt32 = FigCFNumberGetSInt32();
  CFIndex v215 = CFArrayGetCount(v44);
  CFIndex v49 = CFArrayGetCount(v44);
  if (v49 < 1)
  {
    unsigned int v54 = 0;
  }
  else
  {
    CFIndex v50 = v49;
    uint64_t v51 = 0;
    while (1)
    {
      CFDictionaryRef v52 = (const __CFDictionary *)FigCFArrayGetValueAtIndex();
      unsigned int v221 = 0;
      uint64_t v220 = -1;
      FigCFDictionaryGetInt32IfPresent();
      FigCFDictionaryGetCFIndexIfPresent();
      BOOL v53 = v221 == SInt32 && v220 == -1;
      if (v53) {
        break;
      }
      if (v50 == ++v51)
      {
        unsigned int v54 = 0;
        uint64_t v47 = -1;
        goto LABEL_294;
      }
    }
    ArrayCFNumberRef Value = (const __CFArray *)FigCFDictionaryGetArrayValue();
    if (ArrayValue && CFArrayGetCount(ArrayValue) >= 1)
    {
      CMBaseObjectGetDerivedStorage();
      CFArrayRef v91 = (const __CFArray *)CFDictionaryGetValue(v52, @"MediaSelectionOptionsFallbackIDs");
      if (v91) {
        CFIndex v92 = CFArrayGetCount(v91);
      }
      else {
        CFIndex v92 = 0;
      }
      *(void *)os_log_type_t type = -1;
      LODWORD(v232[0]) = 0;
      if (itemfig_getMaximumNumberOfSpatializedOutputChannels(v217, (int *)v232)) {
        BOOL v94 = 1;
      }
      else {
        BOOL v94 = SLODWORD(v232[0]) < 3;
      }
      int v95 = v94;
      CFIndex v96 = v92 - 1;
      if (v92 < 1)
      {
        BOOL v183 = 0;
      }
      else
      {
        uint64_t v97 = 0;
        char v98 = 1;
        int v213 = v95;
        do
        {
          while (1)
          {
            LODWORD(v232[0]) = 0;
            FigCFArrayGetInt32AtIndex();
            if (!itemfig_isTrackAC3(v217, LODWORD(v232[0]))) {
              break;
            }
            if (!itemfig_canTrackPassthrough(v217, LODWORD(v232[0]))) {
              goto LABEL_152;
            }
            char v98 = 0;
            BOOL v53 = v96 == v97++;
            if (v53) {
              goto LABEL_156;
            }
          }
          ++v97;
        }
        while (v92 != v97);
        if (v98)
        {
LABEL_152:
          BOOL v183 = 0;
          goto LABEL_157;
        }
LABEL_156:
        BOOL v183 = itemfig_isAC3PassthroughSupported() != 0;
LABEL_157:
        uint64_t v99 = 0;
        char v100 = 1;
        do
        {
          while (1)
          {
            LODWORD(v232[0]) = 0;
            FigCFArrayGetInt32AtIndex();
            uint64_t v101 = LODWORD(v232[0]);
            if (!itemfig_isTrackEnhancedAC3(v217, LODWORD(v232[0]))
              || itemfig_isTrackAtmos(v217, v101))
            {
              break;
            }
            if (!itemfig_canTrackPassthrough(v217, LODWORD(v232[0]))) {
              goto LABEL_168;
            }
            char v100 = 0;
            BOOL v53 = v96 == v99++;
            if (v53) {
              goto LABEL_167;
            }
          }
          ++v99;
        }
        while (v92 != v99);
        if (v100) {
          goto LABEL_168;
        }
LABEL_167:
        itemfig_isEC3PassthroughSupported();
LABEL_168:
        uint64_t v102 = 0;
        char v103 = 1;
        int v95 = v213;
        do
        {
          while (1)
          {
            LODWORD(v232[0]) = 0;
            FigCFArrayGetInt32AtIndex();
            if (!itemfig_isTrackAtmos(v217, LODWORD(v232[0]))) {
              break;
            }
            if (!itemfig_canTrackPassthrough(v217, LODWORD(v232[0]))) {
              goto LABEL_178;
            }
            char v103 = 0;
            BOOL v53 = v96 == v102++;
            if (v53) {
              goto LABEL_177;
            }
          }
          ++v102;
        }
        while (v92 != v102);
        if (v103) {
          goto LABEL_178;
        }
LABEL_177:
        itemfig_isEC3PassthroughSupported();
      }
LABEL_178:
      int isAtmosSupported = itemfig_isAtmosSupported(v217);
      uint64_t v105 = FigCFWeakReferenceHolderCopyReferencedObject();
      uint64_t v106 = CMBaseObjectGetDerivedStorage();
      if (v105)
      {
        uint64_t v107 = v106;
        if (CFEqual(*(CFTypeRef *)(v106 + 904), @"PreferExclusivePassthrough"))
        {
          BOOL v108 = v183;
          if (isAtmosSupported) {
            int v109 = 1;
          }
          else {
            int v109 = v183;
          }
        }
        else
        {
          BOOL v108 = v183;
          if (CFEqual(*(CFTypeRef *)(v107 + 904), @"PreferAC3ViaExclusivePassthrough")) {
            int v109 = v183;
          }
          else {
            int v109 = 0;
          }
        }
        int v191 = 100000;
        CFTypeRef cf = (CFTypeRef)v105;
        if (!isAtmosSupported || v109)
        {
          if ((v95 | v109) == 1)
          {
            if (v108) {
              unsigned int v111 = 10000;
            }
            else {
              unsigned int v111 = 100000;
            }
            if (v108) {
              int v112 = 100000;
            }
            else {
              int v112 = 10;
            }
            int v187 = v112;
            if (v108) {
              int v113 = 10;
            }
            else {
              int v113 = 100;
            }
            int v189 = v113;
            if (v108) {
              unsigned int v110 = 1000;
            }
            else {
              unsigned int v110 = 10000;
            }
            if (v108) {
              int v114 = 100;
            }
            else {
              int v114 = 1000;
            }
            int v191 = v114;
          }
          else
          {
            int v189 = 1000;
            int v191 = 10000;
            int v187 = 100;
            unsigned int v111 = 10;
            unsigned int v110 = 100000;
          }
        }
        else
        {
          unsigned int v110 = 10000;
          int v187 = 100;
          int v189 = 1000;
          unsigned int v111 = 10;
        }
        if (v111 <= v110) {
          unsigned int v115 = v110;
        }
        else {
          unsigned int v115 = v111;
        }
        unsigned int v186 = v115;
        if (v92 >= 1)
        {
          unsigned int v184 = v110;
          unsigned int v185 = v111;
          unsigned int v205 = 0;
          uint64_t v116 = 0;
          int v193 = -1;
          uint64_t v196 = -1;
          while (1)
          {
            CFIndex v117 = v92;
            unsigned int v222 = 0;
            FigCFArrayGetInt32AtIndex();
            uint64_t v118 = itemfig_getTrackStorage(v217, v222, &v223);
            if (v118)
            {
              uint64_t v12 = v118;
              uint64_t v160 = -1;
              a1 = v217;
              goto LABEL_292;
            }
            TrackAudioChannelCFIndex Count = itemfig_getTrackAudioChannelCount(v217, v222);
            int isTrackAC3 = itemfig_isTrackAC3(v217, v222);
            int isTrackEnhancedAC3 = itemfig_isTrackEnhancedAC3(v217, v222);
            int isTrackAtmos = itemfig_isTrackAtmos(v217, v222);
            uint64_t v121 = v222;
            uint64_t v122 = CMBaseObjectGetDerivedStorage();
            v232[0] = 0;
            *(_DWORD *)uint64_t v225 = 0;
            uint64_t v123 = *(const void **)(v122 + 968);
            uint64_t v124 = *(void *)(CMBaseObjectGetVTable() + 16);
            uint64_t v125 = v124 ? v124 : 0;
            long long v126 = *(uint64_t (**)(const void *, uint64_t, uint64_t *, char *))(v125 + 56);
            if (v126)
            {
              int v127 = v126(v123, v121, v232, v225);
              LODWORD(v123) = 0;
              int v128 = (const void *)v232[0];
              if (!v127 && *(_DWORD *)v225 == 1936684398)
              {
                *(void *)CMTime v227 = 0;
                if (itemfig_copyFormatDescription(v232[0], (uint64_t *)v227)
                  || (uint64_t v123 = *(const void **)v227) != 0
                  && (FourCharCode MediaSubType = CMFormatDescriptionGetMediaSubType(*(CMFormatDescriptionRef *)v227),
                      CFRelease(v123),
                      LODWORD(v123) = 1,
                      MediaSubType != 1634754915)
                  && MediaSubType != 1667330147
                  && MediaSubType != 1902211171)
                {
                  LODWORD(v123) = 0;
                }
                int v128 = (const void *)v232[0];
              }
              if (v128) {
                CFRelease(v128);
              }
            }
            else
            {
              LODWORD(v123) = 0;
            }
            uint64_t v130 = v222;
            uint64_t v131 = CMBaseObjectGetDerivedStorage();
            v232[0] = 0;
            int v226 = 0;
            uint64_t v132 = *(void *)(v131 + 968);
            uint64_t v133 = *(void *)(CMBaseObjectGetVTable() + 16);
            uint64_t v134 = v133 ? v133 : 0;
            CFTypeRef v135 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t *, int *))(v134 + 56);
            if (v135) {
              break;
            }
            BOOL v137 = 0;
LABEL_252:
            BOOL isTrackDecodable = itemfig_isTrackDecodable(v217, v222);
            if (isTrackAC3) {
              BOOL v144 = v108;
            }
            else {
              BOOL v144 = 0;
            }
            if (isTrackDecodable || v144)
            {
              int v145 = v191;
              if (isTrackAtmos)
              {
                BOOL v146 = 0;
              }
              else
              {
                int v145 = 0;
                BOOL v146 = isTrackEnhancedAC3 == 0;
              }
              BOOL v148 = !v146 || isTrackAC3 != 0 || TrackAudioChannelCount < 3;
              unsigned int v149 = v184;
              if (v148) {
                unsigned int v149 = 0;
              }
              unsigned int v150 = v185;
              unsigned int v151 = v186;
              if (TrackAudioChannelCount >= 3) {
                unsigned int v150 = 0;
              }
              int v152 = v187;
              if (!isTrackAC3) {
                int v152 = 0;
              }
              unsigned int v153 = v152 + v150;
              int v154 = v189;
              if (!isTrackEnhancedAC3) {
                int v154 = 0;
              }
              if (!v137) {
                unsigned int v151 = 0;
              }
              int v155 = v153 + v154 + v145 + v123 + v149 + v151;
              int v156 = v193;
              BOOL v157 = v155 <= v193;
              if (v155 > v193) {
                int v156 = v155;
              }
              int v193 = v156;
              unsigned int v158 = v205;
              if (!v157) {
                unsigned int v158 = v222;
              }
              unsigned int v205 = v158;
              uint64_t v159 = v196;
              if (!v157) {
                uint64_t v159 = v116;
              }
              uint64_t v196 = v159;
            }
            ++v116;
            CFIndex v92 = v117;
            if (v117 == v116) {
              goto LABEL_288;
            }
          }
          int v136 = v135(v132, v130, v232, &v226);
          BOOL v137 = 0;
          CFTypeRef v138 = (const void *)v232[0];
          if (v136 || v226 != 1936684398) {
            goto LABEL_250;
          }
          *(void *)CMTime v227 = 0;
          if (itemfig_copyFormatDescription(v232[0], (uint64_t *)v227))
          {
            BOOL v137 = 0;
          }
          else
          {
            CFArrayRef v139 = v44;
            CFTypeRef v140 = *(const void **)v227;
            if (*(void *)v227)
            {
              BOOL v141 = FigAudioFormatDescriptionGetCinematicAudioEffectEligibility() != 0;
              CFRelease(v140);
            }
            else
            {
              BOOL v141 = 0;
            }
            *(void *)uint64_t v225 = 0;
            int v142 = itemfig_getTrackStorage(v217, v130, v225);
            BOOL v137 = 0;
            if (v141 && !v142)
            {
              CFArrayRef v44 = v139;
              BOOL v108 = v183;
              if (*(void *)v225) {
                BOOL v137 = *(unsigned char *)(*(void *)v225 + 161)
              }
                    || *(unsigned char *)(*(void *)v225 + 162)
                    || *(unsigned char *)(*(void *)v225 + 160);
LABEL_249:
              CFTypeRef v138 = (const void *)v232[0];
LABEL_250:
              if (v138) {
                CFRelease(v138);
              }
              goto LABEL_252;
            }
            CFArrayRef v44 = v139;
          }
          BOOL v108 = v183;
          goto LABEL_249;
        }
        unsigned int v205 = 0;
LABEL_288:
        if (FigCFDictionaryGetArrayValue())
        {
          FigCFArrayGetCFIndexAtIndex();
          uint64_t v12 = 0;
          uint64_t v160 = *(void *)type;
        }
        else
        {
          uint64_t v12 = 0;
          uint64_t v160 = -1;
        }
        a1 = v217;
LABEL_292:
        unsigned int v221 = v205;
        uint64_t v220 = v160;
        CFRelease(cf);
        if (v12) {
          goto LABEL_357;
        }
      }
      else
      {
        unsigned int v221 = 0;
        uint64_t v220 = -1;
      }
    }
    unsigned int v54 = v221;
    uint64_t v47 = v220;
  }
LABEL_294:
  if (v215 < 1)
  {
    char v199 = 0;
    uint64_t v12 = 0;
    goto LABEL_323;
  }
  uint64_t v161 = 0;
  char v162 = 0;
  char v163 = 0;
  while (2)
  {
    FigCFArrayGetValueAtIndex();
    CFArrayRef v164 = (const __CFArray *)FigCFDictionaryGetArrayValue();
    if (!v164)
    {
      v227[0] = 0;
      v225[0] = 0;
LABEL_310:
      LODWORD(v232[0]) = 0;
      FigCFDictionaryGetInt32IfPresent();
      if (LODWORD(v232[0]) == v54) {
        uint64_t v170 = v47;
      }
      else {
        uint64_t v170 = -1;
      }
      uint64_t v169 = itemfig_enableAudioTrackAndSetCompositionPresetIndexForEnabledTrack(v217, LODWORD(v232[0]) == v54, v232[0], v170, v227, v225);
      if (v169) {
        goto LABEL_359;
      }
      if (v227[0]) {
        char v163 = 1;
      }
      if (v225[0]) {
        char v162 = 1;
      }
LABEL_318:
      if (++v161 == v215)
      {
        uint64_t v12 = 0;
        int v171 = v203;
        if (v163) {
          int v171 = 1;
        }
        int v203 = v171;
        char v199 = v162;
        a1 = v217;
        goto LABEL_323;
      }
      continue;
    }
    break;
  }
  CFIndex v165 = CFArrayGetCount(v164);
  v227[0] = 0;
  v225[0] = 0;
  if (v165 < 1) {
    goto LABEL_310;
  }
  CFIndex v166 = v165;
  uint64_t v167 = 0;
  while (1)
  {
    LODWORD(v232[0]) = 0;
    FigCFArrayGetInt32AtIndex();
    uint64_t v168 = LODWORD(v232[0]) == v54 ? v47 : -1;
    uint64_t v169 = itemfig_enableAudioTrackAndSetCompositionPresetIndexForEnabledTrack(v217, LODWORD(v232[0]) == v54, v232[0], v168, v227, v225);
    if (v169) {
      break;
    }
    if (v227[0]) {
      char v163 = 1;
    }
    if (v225[0]) {
      char v162 = 1;
    }
    if (v166 == ++v167) {
      goto LABEL_318;
    }
  }
LABEL_359:
  uint64_t v12 = v169;
  CFTypeID v175 = a5;
  int v174 = a4;
  int v176 = a3;
  a1 = v217;
LABEL_360:
  uint64_t DerivedStorage = v211;
LABEL_331:
  char v177 = v199;
  char v178 = v203;
  char HasAnySourceTracksInArray = 0;
LABEL_334:
  if (v178 || v197 || v177) {
    goto LABEL_350;
  }
  char v178 = 0;
  char v177 = 0;
  if (v176) {
    goto LABEL_338;
  }
LABEL_339:
  if (v175) {
    *CFTypeID v175 = v177;
  }
  if (v174) {
    unsigned char *v174 = HasAnySourceTracksInArray;
  }
  if (v198) {
    CFRelease(v198);
  }
  if (v208) {
    CFRelease(v208);
  }
  return v12;
}

void playerfig_updateClosedCaptionsDisplayForItem(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v5 = *(unsigned __int8 *)(DerivedStorage + 297);
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 496));
  if (CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 504)) < 1)
  {
    uint64_t v8 = 0;
    goto LABEL_10;
  }
  CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), 0);
  if (!ValueAtIndex)
  {
    uint64_t v8 = 0;
LABEL_11:
    char v9 = 1;
    goto LABEL_12;
  }
  uint64_t v7 = CMBaseObjectGetDerivedStorage();
  uint64_t v8 = v7;
  if (v5) {
    int v5 = 1;
  }
  else {
    int v5 = *(unsigned char *)(v7 + 1012) != 0;
  }
  if (!*(unsigned char *)(v7 + 1288))
  {
LABEL_10:
    CFDictionaryRef ValueAtIndex = 0;
    goto LABEL_11;
  }
  CFRetain(ValueAtIndex);
  char v9 = 0;
LABEL_12:
  MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 496));
  if (a2 && ValueAtIndex != (const void *)a2) {
    goto LABEL_36;
  }
  if (ValueAtIndex && v5)
  {
    if (*(unsigned char *)(v8 + 1020)) {
      int v5 = 0;
    }
    goto LABEL_19;
  }
  if (ValueAtIndex)
  {
LABEL_19:
    uint64_t v10 = *(dispatch_queue_t **)(CMBaseObjectGetDerivedStorage() + 1744);
    if (v10) {
      FigLegibleOutputManagerSetNonForcedEnabledForMediaType(v10, 1668047728, v5);
    }
  }
  uint64_t v11 = *(void *)(DerivedStorage + 576);
  if (v11)
  {
    if (v5) {
      uint64_t v12 = (void *)MEMORY[0x1E4F1CFD0];
    }
    else {
      uint64_t v12 = (void *)MEMORY[0x1E4F1CFC8];
    }
    uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(v11);
    uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v14) {
      uint64_t v15 = v14;
    }
    else {
      uint64_t v15 = 0;
    }
    CFTypeID v16 = *(void (**)(uint64_t, __CFString *, void))(v15 + 56);
    if (v16) {
      v16(FigBaseObject, @"DisplayClosedCaptions", *v12);
    }
    if (v5 && *(void *)(DerivedStorage + 584)) {
      playerfig_resetSubtitleRenderPipeline();
    }
  }
  if (v5 != *(unsigned __int8 *)(DerivedStorage + 298))
  {
    *(unsigned char *)(DerivedStorage + 298) = v5;
    FPSupport_updateClosedCaptionLayer(DerivedStorage + 296, *(const __CFArray **)(DerivedStorage + 288));
    NotificationPayloadForProperties = playerfig_createNotificationPayloadForProperties(a1, a2, v17, v18, v19, v20, v21, v22, @"DisplayingClosedCaptions", 0);
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    if (NotificationPayloadForProperties) {
      CFRelease(NotificationPayloadForProperties);
    }
  }
LABEL_36:
  if ((v9 & 1) == 0)
  {
    CFRelease(ValueAtIndex);
  }
}

void playerfig_updateSubtitleDisplayForItem(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 496));
  if (CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 504)) < 1)
  {
    uint64_t v5 = 0;
  }
  else
  {
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), 0);
    if (!ValueAtIndex)
    {
      uint64_t v5 = 0;
      goto LABEL_8;
    }
    uint64_t v5 = CMBaseObjectGetDerivedStorage();
    if (*(unsigned char *)(v5 + 1288))
    {
      CFRetain(ValueAtIndex);
      char v6 = 0;
      goto LABEL_9;
    }
  }
  CFDictionaryRef ValueAtIndex = 0;
LABEL_8:
  char v6 = 1;
LABEL_9:
  MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 496));
  if (a2)
  {
    if (!v5 || ValueAtIndex != a2) {
      goto LABEL_26;
    }
  }
  else if (!v5)
  {
    goto LABEL_26;
  }
  uint64_t v7 = *(void *)(DerivedStorage + 584);
  if (v7)
  {
    uint64_t v8 = (uint64_t *)(*(unsigned char *)(DerivedStorage + 688) && *(unsigned char *)(v5 + 1020)
                   ? MEMORY[0x1E4F1CFD0]
                   : MEMORY[0x1E4F1CFC8]);
    uint64_t v9 = *v8;
    uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(v7);
    uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v11) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    CFIndex v13 = *(void (**)(uint64_t, __CFString *, uint64_t))(v12 + 56);
    if (v13) {
      v13(FigBaseObject, @"DisplayNonForcedSubtitles", v9);
    }
    CFArrayRef v14 = *(const __CFArray **)(v5 + 1816);
    if (!v14 || !CFArrayGetCount(v14))
    {
      playerfig_resetSubtitleRenderPipeline();
      if (v6) {
        return;
      }
      goto LABEL_29;
    }
  }
LABEL_26:
  if (v6) {
    return;
  }
LABEL_29:

  CFRelease(ValueAtIndex);
}

void playerfig_updateCaptionOrSubtitleHintOnVideoPipeline(uint64_t a1, const void *a2)
{
  CFTypeRef cf = a2;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = DerivedStorage;
  if (*(unsigned char *)(DerivedStorage + 298)) {
    BOOL v6 = *(void *)(DerivedStorage + 576) != 0;
  }
  else {
    BOOL v6 = 0;
  }
  if (!a2)
  {
    uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v10 = v9 ? v9 : 0;
    uint64_t v11 = *(void (**)(uint64_t, void, CFTypeRef *))(v10 + 32);
    if (!v11 || (v11(a1, 0, &cf), !cf))
    {
      BOOL v8 = 0;
      goto LABEL_18;
    }
  }
  uint64_t v7 = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(v5 + 688) && *(unsigned char *)(v7 + 1020))
  {
    BOOL v8 = 1;
    if (a2) {
      goto LABEL_18;
    }
  }
  else
  {
    BOOL v8 = *(unsigned char *)(v7 + 1021) != 0;
    if (a2) {
      goto LABEL_18;
    }
  }
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
LABEL_18:
  int v12 = v6 || v8;
  if (*(unsigned __int8 *)(v5 + 704) != v12)
  {
    uint64_t v13 = *(void *)(v5 + 568);
    if (v13)
    {
      *(unsigned char *)(v5 + 704) = v12;
      if (v12) {
        CFArrayRef v14 = (void *)MEMORY[0x1E4F1CFD0];
      }
      else {
        CFArrayRef v14 = (void *)MEMORY[0x1E4F1CFC8];
      }
      uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(v13);
      uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v16) {
        uint64_t v17 = v16;
      }
      else {
        uint64_t v17 = 0;
      }
      int v18 = *(void (**)(uint64_t, __CFString *, void))(v17 + 56);
      if (v18) {
        v18(FigBaseObject, @"CAImageQueueCaptionsMayAppearHint", *v14);
      }
    }
  }
}

uint64_t playerfig_scheduleVideoTargetImageQueueConfigurationTransitionForItem(const void *a1, const __CFString *a2, long long *a3)
{
  uint64_t v145 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v138 = 0;
  CFTypeRef v136 = 0;
  CFTypeRef v137 = 0;
  CMTagCollectionRef tagCollection = 0;
  CFTypeRef v135 = 0;
  CFTypeRef v132 = 0;
  CFTypeRef v133 = 0;
  CFTypeRef v130 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v125 = a1;
  if (!playerfig_hasVideoTargets())
  {
    CFMutableArrayRef Mutable = 0;
    goto LABEL_146;
  }
  uint64_t v126 = DerivedStorage;
  uint64_t v5 = *(void *)(DerivedStorage + 824);
  if (v5) {
    goto LABEL_3;
  }
  *(void *)&long long v141 = 0;
  uint64_t v38 = DerivedStorage;
  int v101 = *(_DWORD *)(DerivedStorage + 1000);
  if (!v101)
  {
    CFMutableArrayRef Mutable = 0;
    int v37 = 1;
    goto LABEL_48;
  }
  uint64_t TrackStorage = itemfig_getTrackStorage((uint64_t)a2, v101, &v141);
  if (TrackStorage) {
    goto LABEL_220;
  }
  uint64_t v5 = *(void *)(v141 + 48);
  if (v5)
  {
LABEL_3:
    uint64_t TrackStorage = FigImageQueueTableCopyVideoTargets(v5, &v138);
    if (!TrackStorage)
    {
      if (v138)
      {
        CFIndex Count = CFArrayGetCount(v138);
        if (Count >= 1)
        {
          CFIndex v8 = Count;
          CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
          CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v138, 0);
          uint64_t v11 = FigImageQueueTableCopyFigImageQueueForVideoTarget(v5, ValueAtIndex);
          uint64_t DataChannelConfigurationAndSetIdentifiers = playerfig_createDataChannelConfigurationAndSetIdentifiers((int)a1, a2, v9, (uint64_t *)&v136);
          if (DataChannelConfigurationAndSetIdentifiers)
          {
            uint64_t v100 = DataChannelConfigurationAndSetIdentifiers;
            CFMutableArrayRef Mutable = 0;
            goto LABEL_157;
          }
          CFIndex v13 = 1;
          long long v119 = *MEMORY[0x1E4F21E68];
          long long v121 = *MEMORY[0x1E4F21E08];
          while (1)
          {
            uint64_t v14 = FigTagMakeWithSInt64Value();
            long long v141 = v121;
            long long v142 = v119;
            uint64_t v143 = v14;
            uint64_t v144 = v15;
            FigTagCollectionCreate();
            CFMutableArrayRef Mutable = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
            if (!Mutable) {
              break;
            }
            uint64_t v17 = *(unsigned int *)(v126 + 1000);
            if (v17)
            {
              itemfig_transferItemTrackPropertyToVideoTargetConfigurationDataChannelSettings((uint64_t)a2, v17, @"Matrix", Mutable, @"TrackMatrix");
              uint64_t v18 = *(void *)(v126 + 968);
              uint64_t v19 = *(unsigned int *)(v126 + 1000);
              uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 16);
              uint64_t v21 = v20 ? v20 : 0;
              int v22 = *(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *, void))(v21 + 56);
              if (v22 && !v22(v18, v19, &cf, 0))
              {
                CFTypeRef v31 = cf;
                CFAllocatorRef v32 = CFGetAllocator(v125);
                uint64_t FigBaseObject = FigTrackReaderGetFigBaseObject(v31);
                uint64_t v34 = *(void *)(CMBaseObjectGetVTable() + 8);
                uint64_t v35 = v34 ? v34 : 0;
                CFDictionaryRef v36 = *(void (**)(uint64_t, __CFString *, CFAllocatorRef, CFTypeRef *))(v35 + 48);
                if (v36) {
                  v36(FigBaseObject, @"TrackFormatDescriptionArray", v32, &v130);
                }
              }
            }
            uint64_t v23 = FigDataChannelConfigurationAddFigImageQueue((uint64_t)v136, v11, (uint64_t)v137, (uint64_t)Mutable, (const __CFArray *)v130);
            if (v23) {
              goto LABEL_217;
            }
            CFTypeRef v24 = v136;
            if (*((unsigned char *)a3 + 12))
            {
              *(_OWORD *)int v128 = *a3;
              uint64_t v129 = *((void *)a3 + 2);
              uint64_t v27 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v27) {
                uint64_t v28 = v27;
              }
              else {
                uint64_t v28 = 0;
              }
              uint64_t v30 = *(uint64_t (**)(const void *, CFTypeRef, long long *))(v28 + 64);
              if (!v30)
              {
LABEL_156:
                uint64_t v100 = 4294954514;
                goto LABEL_157;
              }
              long long v139 = *(_OWORD *)v128;
              uint64_t v140 = v129;
              uint64_t v23 = v30(ValueAtIndex, v24, &v139);
              if (v23) {
                goto LABEL_217;
              }
            }
            else
            {
              uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v25) {
                uint64_t v26 = v25;
              }
              else {
                uint64_t v26 = 0;
              }
              uint64_t v29 = *(uint64_t (**)(const void *, CFTypeRef))(v26 + 72);
              if (!v29) {
                goto LABEL_156;
              }
              uint64_t v23 = v29(ValueAtIndex, v24);
              if (v23) {
                goto LABEL_217;
              }
            }
            if (cf)
            {
              CFRelease(cf);
              CFTypeRef cf = 0;
            }
            if (v130)
            {
              CFRelease(v130);
              CFTypeRef v130 = 0;
            }
            if (v136)
            {
              CFRelease(v136);
              CFTypeRef v136 = 0;
            }
            if (v11) {
              CFRelease(v11);
            }
            if (v8 == v13) {
              goto LABEL_46;
            }
            CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v138, v13);
            uint64_t v11 = FigImageQueueTableCopyFigImageQueueForVideoTarget(v5, ValueAtIndex);
            uint64_t v23 = playerfig_createDataChannelConfigurationAndSetIdentifiers((int)v125, a2, v9, (uint64_t *)&v136);
            ++v13;
            if (v23) {
              goto LABEL_217;
            }
          }
          uint64_t v23 = FigSignalErrorAt();
LABEL_217:
          uint64_t v100 = v23;
LABEL_157:
          CFDictionaryRef v42 = 0;
          CFArrayRef v98 = 0;
          CFArrayRef v99 = 0;
          CFIndex v55 = 0;
          goto LABEL_160;
        }
      }
      CFMutableArrayRef Mutable = 0;
LABEL_46:
      int v37 = 0;
      goto LABEL_47;
    }
LABEL_220:
    uint64_t v100 = TrackStorage;
    CFMutableArrayRef Mutable = 0;
LABEL_221:
    CFDictionaryRef v42 = 0;
LABEL_222:
    CFArrayRef v98 = 0;
    CFArrayRef v99 = 0;
    CFIndex v55 = 0;
    uint64_t v11 = 0;
    goto LABEL_160;
  }
  CFMutableArrayRef Mutable = 0;
  int v37 = 1;
LABEL_47:
  uint64_t v38 = v126;
LABEL_48:
  CFArrayRef v39 = *(const __CFArray **)(v38 + 1048);
  if (!v39 || (CFIndex v118 = CFArrayGetCount(v39), v118 < 1))
  {
    if (v37)
    {
      uint64_t v84 = CMBaseObjectGetDerivedStorage();
      MEMORY[0x19970E910](*(void *)(v84 + 240));
      CFTypeRef v85 = *(CFTypeRef *)(v84 + 248);
      if (v85) {
        CFTypeRef v85 = CFRetain(v85);
      }
      CFTypeRef v138 = (__CFArray *)v85;
      MEMORY[0x19970E930](*(void *)(v84 + 240));
      uint64_t v86 = playerfig_createDataChannelConfigurationAndSetIdentifiers((int)v125, a2, (CFAllocatorRef)*MEMORY[0x1E4F1CF80], (uint64_t *)&v136);
      if (!v86)
      {
        if (!v138 || (CFIndex v87 = CFArrayGetCount(v138), v87 < 1))
        {
LABEL_143:
          CFDictionaryRef v42 = 0;
          goto LABEL_144;
        }
        CFIndex v88 = v87;
        CFIndex v89 = 0;
        while (1)
        {
          uint64_t v90 = CFArrayGetValueAtIndex(v138, v89);
          CFTypeRef v91 = v136;
          if (*((unsigned char *)a3 + 12))
          {
            long long v139 = *a3;
            uint64_t v140 = *((void *)a3 + 2);
            uint64_t v94 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v94) {
              uint64_t v95 = v94;
            }
            else {
              uint64_t v95 = 0;
            }
            uint64_t v97 = *(uint64_t (**)(const void *, CFTypeRef, long long *))(v95 + 64);
            if (!v97)
            {
LABEL_159:
              CFDictionaryRef v42 = 0;
              CFArrayRef v98 = 0;
              CFArrayRef v99 = 0;
              CFIndex v55 = 0;
              uint64_t v11 = 0;
              uint64_t v100 = 4294954514;
              goto LABEL_160;
            }
            long long v141 = v139;
            *(void *)&long long v142 = v140;
            uint64_t v86 = v97(v90, v91, &v141);
            if (v86) {
              break;
            }
          }
          else
          {
            uint64_t v92 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v92) {
              uint64_t v93 = v92;
            }
            else {
              uint64_t v93 = 0;
            }
            CFIndex v96 = *(uint64_t (**)(const void *, CFTypeRef))(v93 + 72);
            if (!v96) {
              goto LABEL_159;
            }
            uint64_t v86 = v96(v90, v91);
            if (v86) {
              break;
            }
          }
          if (v88 == ++v89) {
            goto LABEL_143;
          }
        }
      }
      uint64_t v100 = v86;
      goto LABEL_221;
    }
LABEL_146:
    CFDictionaryRef v42 = 0;
    CFArrayRef v98 = 0;
    CFArrayRef v99 = 0;
    CFIndex v55 = 0;
    uint64_t v11 = 0;
    uint64_t v100 = 0;
    goto LABEL_160;
  }
  CFAllocatorRef v40 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef v41 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionaryRef v42 = v41;
  if (!v41)
  {
    uint64_t v100 = FigSignalErrorAt();
    goto LABEL_222;
  }
  CFIndex v117 = Mutable;
  uint64_t v43 = 0;
  uint64_t v44 = 1;
  CFDictionaryRef v123 = v41;
  while (1)
  {
    *(void *)&long long v141 = 0;
    FigCFArrayGetInt32AtIndex();
    itemfig_getTrackStorage((uint64_t)a2, 0, &v141);
    CFTypeID v45 = (unsigned int *)v141;
    if (!(void)v141)
    {
      uint64_t v100 = FigSignalErrorAt();
      CFIndex v55 = 0;
      uint64_t v11 = 0;
      CFMutableArrayRef Mutable = v117;
      CFDictionaryRef v42 = v123;
      goto LABEL_155;
    }
    uint64_t v46 = *(void *)(v38 + 968);
    uint64_t v47 = *(unsigned int *)v141;
    uint64_t v48 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v48) {
      uint64_t v49 = v48;
    }
    else {
      uint64_t v49 = 0;
    }
    CFIndex v50 = *(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *, void))(v49 + 56);
    if (v50 && !v50(v46, v47, &cf, 0))
    {
      uint64_t v80 = FigTrackReaderGetFigBaseObject(cf);
      uint64_t v81 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v82 = v81 ? v81 : 0;
      int v83 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v82 + 48);
      if (v83) {
        v83(v80, @"TrackFormatDescriptionArray", v40, &v130);
      }
    }
    if (v45[1] == 1986618469)
    {
      *(void *)&long long v139 = 0;
      v128[0] = 0;
      uint64_t v51 = *(void *)(v38 + 968);
      uint64_t v52 = *v45;
      uint64_t v53 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v53) {
        uint64_t v54 = v53;
      }
      else {
        uint64_t v54 = 0;
      }
      CFIndex v56 = *(unsigned int (**)(uint64_t, uint64_t, long long *, void))(v54 + 56);
      if (v56 && !v56(v51, v52, &v139, 0))
      {
        if (!itemfig_copyFormatDescription(v139, (uint64_t *)v128))
        {
          FPSupport_CreateFigTagCollectionFromFormatDescriptionExtensions((const opaqueCMFormatDescription *)v128[0], &v133);
          if (v133)
          {
            if (CMTagCollectionContainsCategory((CMTagCollectionRef)v133, kCMTagCategory_StereoView))
            {
              FigTagCollectionCreateMutableCopy();
              if (v132) {
                CMTagCollectionRemoveAllTagsOfCategory((CMMutableTagCollectionRef)v132, kCMTagCategory_StereoView);
              }
            }
          }
        }
        if ((void)v139) {
          CFRelease((CFTypeRef)v139);
        }
        if (v128[0]) {
          CFRelease(v128[0]);
        }
      }
      CFIndex v55 = CFDictionaryCreateMutable(v40, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (v55) {
        itemfig_transferItemTrackPropertyToVideoTargetConfigurationDataChannelSettings((uint64_t)a2, 0, @"Matrix", v55, @"TrackMatrix");
      }
    }
    else
    {
      CFIndex v55 = 0;
    }
    CFDictionaryRef v42 = v123;
    CFArrayRef v57 = (const __CFArray *)*((void *)v45 + 27);
    uint64_t v120 = v43;
    if (v57)
    {
      CFIndex v122 = CFArrayGetCount(v57);
      if (v122 >= 1) {
        break;
      }
    }
LABEL_102:
    if (v133)
    {
      CFRelease(v133);
      CFTypeRef v133 = 0;
    }
    if (v132)
    {
      CFRelease(v132);
      CFTypeRef v132 = 0;
    }
    if (v55) {
      CFRelease(v55);
    }
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    uint64_t v38 = v126;
    if (v130)
    {
      CFRelease(v130);
      CFTypeRef v130 = 0;
    }
    uint64_t v43 = v120 + 1;
    if (v120 + 1 == v118)
    {
      uint64_t v103 = FigCFDictionaryGetCount();
      CFMutableArrayRef Mutable = v117;
      if (v103 >= 1)
      {
        CFArrayRef v98 = (const __CFArray *)FigCFDictionaryCopyArrayOfKeys();
        CFArrayRef v99 = (const __CFArray *)FigCFDictionaryCopyArrayOfValues();
        if (v98) {
          CFIndex v104 = CFArrayGetCount(v98);
        }
        else {
          CFIndex v104 = 0;
        }
        if (v99) {
          CFIndex v105 = CFArrayGetCount(v99);
        }
        else {
          CFIndex v105 = 0;
        }
        if (v104 != v105)
        {
          uint64_t v116 = FigSignalErrorAt();
LABEL_228:
          uint64_t v100 = v116;
          CFIndex v55 = 0;
          uint64_t v11 = 0;
LABEL_215:
          CFDictionaryRef v42 = v123;
          goto LABEL_160;
        }
        if (v104 >= 1)
        {
          for (CFIndex i = 0; v104 != i; ++i)
          {
            uint64_t v107 = CFArrayGetValueAtIndex(v98, i);
            BOOL v108 = CFArrayGetValueAtIndex(v99, i);
            CFNumberRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(v126 + 1096), v107);
            if (Value) {
              FigDataChannelConfigurationAddDataChannelResource((uint64_t)v108, (uint64_t)Value);
            }
            if (*((unsigned char *)a3 + 12))
            {
              long long v139 = *a3;
              uint64_t v140 = *((void *)a3 + 2);
              uint64_t v112 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v112) {
                uint64_t v113 = v112;
              }
              else {
                uint64_t v113 = 0;
              }
              unsigned int v115 = *(uint64_t (**)(const void *, const void *, long long *))(v113 + 64);
              if (!v115)
              {
                CFIndex v55 = 0;
                uint64_t v11 = 0;
                uint64_t v100 = 4294954514;
                goto LABEL_215;
              }
              long long v141 = v139;
              *(void *)&long long v142 = v140;
              uint64_t v116 = v115(v107, v108, &v141);
              if (v116) {
                goto LABEL_228;
              }
            }
            else
            {
              uint64_t v110 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v110) {
                uint64_t v111 = v110;
              }
              else {
                uint64_t v111 = 0;
              }
              int v114 = *(void (**)(const void *, const void *))(v111 + 72);
              if (v114) {
                v114(v107, v108);
              }
            }
          }
        }
        CFDictionaryRef v42 = v123;
LABEL_145:
        CFIndex v55 = 0;
        uint64_t v11 = 0;
        uint64_t v100 = 0;
        *(unsigned char *)(v126 + 876) = 0;
        goto LABEL_160;
      }
LABEL_144:
      CFArrayRef v98 = 0;
      CFArrayRef v99 = 0;
      goto LABEL_145;
    }
  }
  CFIndex v58 = 0;
  while (1)
  {
    *(void *)&long long v139 = 0;
    CFDictionaryRef v59 = CFArrayGetValueAtIndex(*((CFArrayRef *)v45 + 27), v58);
    *(void *)&long long v139 = CFDictionaryGetValue(v42, v59);
    if (!(void)v139)
    {
      uint64_t v60 = playerfig_createDataChannelConfigurationAndSetIdentifiers((int)v125, a2, v40, (uint64_t *)&v139);
      if (v60)
      {
        uint64_t v100 = v60;
        uint64_t v11 = 0;
        goto LABEL_154;
      }
      CFDictionarySetValue(v42, v59, (const void *)v139);
      CFRelease((CFTypeRef)v139);
    }
    CFArrayRef v61 = (const __CFArray *)*((void *)v45 + 28);
    if (v61)
    {
      CFIndex v62 = CFArrayGetCount(v61);
      if (v62 >= 1) {
        break;
      }
    }
LABEL_94:
    CFDictionaryRef v72 = (const __CFDictionary *)*((void *)v45 + 30);
    if (v72 && (int v73 = CFDictionaryGetValue(v72, v59)) != 0)
    {
      uint64_t v74 = v73;
      uint64_t MutableCopy = FigTagCollectionCreateMutableCopy();
      if (MutableCopy
        || (uint64_t v76 = (OpaqueCMTagCollection *)v135,
            uint64_t v77 = FigTagMakeWithSInt64Value(),
            CMTagValue v79 = v78,
            *(void *)&v147.category = v77,
            v147.CFTypeRef value = v79,
            CMTagCollectionAddTag(v76, v147),
            uint64_t MutableCopy = FigDataChannelConfigurationAddFigDataQueue(v139, v74, (uint64_t)v135, 0, (const __CFArray *)v130), MutableCopy))
      {
        uint64_t v100 = MutableCopy;
        uint64_t v11 = 0;
        goto LABEL_153;
      }
      ++v44;
      CFDictionaryRef v42 = v123;
      if (v135)
      {
        CFRelease(v135);
        CFTypeRef v135 = 0;
      }
    }
    else
    {
      CFDictionaryRef v42 = v123;
    }
    if (++v58 == v122) {
      goto LABEL_102;
    }
  }
  CFIndex v63 = v62;
  CFIndex v64 = 0;
  while (1)
  {
    CFIndex v65 = CFArrayGetValueAtIndex(*((CFArrayRef *)v45 + 28), v64);
    CFTypeID v66 = FigImageQueueTableCopyFigImageQueueForVideoTarget((uint64_t)v65, v59);
    if (!v66) {
      goto LABEL_93;
    }
    uint64_t v11 = v66;
    uint64_t v67 = FigTagCollectionCreateMutableCopy();
    if (v67) {
      goto LABEL_152;
    }
    BOOL v68 = tagCollection;
    uint64_t v69 = FigTagMakeWithSInt64Value();
    CMTagValue v71 = v70;
    *(void *)&v146.category = v69;
    v146.CFTypeRef value = v71;
    CMTagCollectionAddTag(v68, v146);
    if (!FigCFArrayGetValueAtIndex()) {
      break;
    }
    FigTagCollectionAddTagsFromCollection();
LABEL_87:
    if (v133)
    {
      CMTagCollectionContainsCategory(tagCollection, kCMTagCategory_StereoView);
      FigTagCollectionAddTagsFromCollection();
    }
    uint64_t v67 = FigDataChannelConfigurationAddFigImageQueue(v139, v11, (uint64_t)tagCollection, (uint64_t)v55, (const __CFArray *)v130);
    if (v67) {
      goto LABEL_152;
    }
    if (tagCollection)
    {
      CFRelease(tagCollection);
      CMTagCollectionRef tagCollection = 0;
    }
    ++v44;
    CFRelease(v11);
LABEL_93:
    if (v63 == ++v64) {
      goto LABEL_94;
    }
  }
  if (!v64)
  {
    uint64_t v67 = FPSupport_AddDefaultVideoTagsToChannelDescriptionForMissingCategories();
    if (v67) {
      goto LABEL_152;
    }
    goto LABEL_87;
  }
  uint64_t v67 = FigSignalErrorAt();
LABEL_152:
  uint64_t v100 = v67;
LABEL_153:
  CFDictionaryRef v42 = v123;
LABEL_154:
  CFMutableArrayRef Mutable = v117;
LABEL_155:
  CFArrayRef v98 = 0;
  CFArrayRef v99 = 0;
LABEL_160:
  if (v137) {
    CFRelease(v137);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v133) {
    CFRelease(v133);
  }
  if (v55) {
    CFRelease(v55);
  }
  if (v135) {
    CFRelease(v135);
  }
  if (tagCollection) {
    CFRelease(tagCollection);
  }
  if (v42) {
    CFRelease(v42);
  }
  if (v98) {
    CFRelease(v98);
  }
  if (v99) {
    CFRelease(v99);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v130) {
    CFRelease(v130);
  }
  if (v138) {
    CFRelease(v138);
  }
  if (v11) {
    CFRelease(v11);
  }
  if (v136) {
    CFRelease(v136);
  }
  return v100;
}

__CFDictionary *playerfig_createNotificationPayloadForProperties(const void *a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, void *value, uint64_t a10)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  uint64_t v18 = (const void **)&a10;
  CFIndex v13 = value;
  if (value)
  {
    do
    {
      CFArrayAppendValue(Mutable, v13);
      uint64_t v14 = v18++;
      CFIndex v13 = *v14;
    }
    while (*v14);
  }
  if (a1 || !a2)
  {
    if (!a1) {
      goto LABEL_14;
    }
    CFRetain(a1);
LABEL_9:
    NotificationPayloadForProperties = FPSupport_CreateNotificationPayloadForProperties((uint64_t)a1, a2, Mutable);
    char v16 = 0;
    if (!Mutable) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  CMBaseObjectGetDerivedStorage();
  a1 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (a1) {
    goto LABEL_9;
  }
LABEL_14:
  NotificationPayloadForProperties = 0;
  char v16 = 1;
  if (Mutable) {
LABEL_10:
  }
    CFRelease(Mutable);
LABEL_11:
  if ((v16 & 1) == 0) {
    CFRelease(a1);
  }
  return NotificationPayloadForProperties;
}

uint64_t itemfig_createSelectedMediaArray(const __CFAllocator *a1, void *a2, __CFArray **a3)
{
  v82[16] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = itemfig_assureBasicsReadyForInspection(a2);
  if (v6) {
    return v6;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(void *)(DerivedStorage + 1792))
  {
    uint64_t v10 = 0;
LABEL_95:
    uint64_t v65 = 0;
    if (!a3) {
      goto LABEL_98;
    }
    goto LABEL_96;
  }
  uint64_t v8 = DerivedStorage;
  CFAllocatorRef allocator = a1;
  CFMutableArrayRef Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E4F1D510]);
  if (!Mutable) {
    return 4294954510;
  }
  uint64_t v10 = Mutable;
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(v8 + 1792));
  if (Count < 1) {
    goto LABEL_95;
  }
  uint64_t v69 = a3;
  CFIndex v11 = 0;
  int v75 = 0;
  BOOL v68 = (const void *)*MEMORY[0x1E4F1CFD0];
  while (1)
  {
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v8 + 1792), v11);
    if (!ValueAtIndex) {
      break;
    }
    CFDictionaryRef v13 = ValueAtIndex;
    CFTypeID v14 = CFGetTypeID(ValueAtIndex);
    if (v14 != CFDictionaryGetTypeID()) {
      break;
    }
    CFNumberRef Value = CFDictionaryGetValue(v13, @"MediaSelectionGroupID");
    char v16 = CFDictionaryGetValue(v13, @"MediaSelectionGroupMediaType");
    CFArrayRef v17 = (const __CFArray *)CFDictionaryGetValue(v13, @"MediaSelectionGroupMediaCharacteristics");
    CFIndex v76 = v11;
    if (v17)
    {
      CFArrayRef v18 = v17;
      CFTypeID v19 = CFGetTypeID(v17);
      if (v19 == CFArrayGetTypeID() && CFArrayGetCount(v18) >= 1)
      {
        v83.length = CFArrayGetCount(v18);
        v83.location = 0;
        LODWORD(v17) = CFArrayContainsValue(v18, v83, @"public.legible");
      }
      else
      {
        LODWORD(v17) = 0;
      }
    }
    int v73 = Value;
    if (!v75 && (CFDictionaryRef v27 = *(const __CFDictionary **)(v8 + 1848)) != 0 && v17)
    {
      int v75 = 1;
LABEL_60:
      uint64_t MutableCopy = CFDictionaryCreateMutableCopy(allocator, 0, v27);
      if (!MutableCopy) {
        break;
      }
      uint64_t v51 = MutableCopy;
      if (Value) {
        CFDictionaryAddValue(MutableCopy, @"MediaSelectionGroupID", Value);
      }
      if (v16) {
        CFDictionaryAddValue(v51, @"MediaSelectionGroupMediaType", v16);
      }
      uint64_t v52 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
      uint64_t v53 = CMBaseObjectGetDerivedStorage();
      if (v53 && *(unsigned char *)(v53 + 760))
      {
        CFArrayRef v54 = *(const __CFArray **)(v8 + 1816);
        if (v54 && (CFIndex v55 = CFArrayGetCount(*(CFArrayRef *)(v8 + 1816)), v55 >= 1))
        {
          CFIndex v56 = v55;
          CFIndex v57 = 0;
          while (1)
          {
            CFDictionaryRef v58 = (const __CFDictionary *)CFArrayGetValueAtIndex(v54, v57);
            if (v58)
            {
              CFDictionaryRef v59 = v58;
              CFTypeID v60 = CFGetTypeID(v58);
              if (v60 == CFDictionaryGetTypeID())
              {
                CFDictionaryGetValue(v59, @"MediaSelectionGroupID");
                if (FigCFEqual()) {
                  break;
                }
              }
            }
            if (v56 == ++v57) {
              goto LABEL_74;
            }
          }
        }
        else
        {
LABEL_74:
          CFDictionaryAddValue(v51, @"AutomaticallySelected", v68);
        }
      }
      if (v52) {
        CFRelease(v52);
      }
      CFArrayAppendValue(v10, v51);
      CFRelease(v51);
    }
    else
    {
      CFArrayRef v20 = (const __CFArray *)CFDictionaryGetValue(v13, @"MediaSelectionGroupOptions");
      if (!v20) {
        break;
      }
      CFArrayRef v21 = v20;
      CFTypeID v22 = CFGetTypeID(v20);
      if (v22 != CFArrayGetTypeID()) {
        break;
      }
      CMTagValue v71 = v16;
      CFIndex v23 = CFArrayGetCount(v21);
      if (!v23)
      {
        LODWORD(v77) = 0;
        LOBYTE(valuePtr) = 0;
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v63 = v77;
        if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, (os_log_type_t)valuePtr)) {
          unsigned int v64 = v63;
        }
        else {
          unsigned int v64 = v63 & 0xFFFFFFFE;
        }
        CFIndex v61 = v76;
        if (v64)
        {
          *(_DWORD *)CMTagValue v79 = 136315394;
          *(void *)&v79[4] = "itemfig_createSelectedMediaArray";
          __int16 v80 = 2114;
          CFDictionaryRef v81 = v13;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        goto LABEL_85;
      }
      CFIndex v24 = v23;
      if (v23 >= 1)
      {
        CFIndex v25 = 0;
        uint64_t v72 = v8;
        do
        {
          v82[0] = 0;
          int valuePtr = -1;
          CFDictionaryRef v26 = (const __CFDictionary *)CFArrayGetValueAtIndex(v21, v25);
          if (!v26) {
            goto LABEL_88;
          }
          CFDictionaryRef v27 = v26;
          CFTypeID v28 = CFGetTypeID(v26);
          if (v28 != CFDictionaryGetTypeID()) {
            goto LABEL_88;
          }
          CFNumberRef v29 = (const __CFNumber *)CFDictionaryGetValue(v27, @"MediaSelectionOptionsPersistentID");
          if (v29)
          {
            CFNumberRef v30 = v29;
            CFTypeID v31 = CFGetTypeID(v29);
            if (v31 != CFNumberGetTypeID()) {
              goto LABEL_88;
            }
            CFNumberGetValue(v30, kCFNumberSInt32Type, &valuePtr);
            uint64_t TrackStorage = itemfig_getTrackStorage((uint64_t)a2, valuePtr, v82);
            if (TrackStorage) {
              goto LABEL_89;
            }
            if (valuePtr == *(_DWORD *)(v8 + 1008))
            {
              if (*(unsigned char *)(v8 + 1012)) {
                goto LABEL_87;
              }
            }
            else
            {
              *(void *)CMTagValue v79 = -1;
              uint64_t v35 = v82[0];
              if (*(_DWORD *)(v82[0] + 4) == 1936684398)
              {
                FigCFDictionaryGetCFIndexIfPresent();
                ArrayCFNumberRef Value = FigCFDictionaryGetArrayValue();
              }
              else
              {
                ArrayCFNumberRef Value = 0;
              }
              if (*(unsigned char *)(v35 + 8))
              {
                int v37 = v10;
              }
              else
              {
                int v37 = v10;
                CFArrayRef v43 = (const __CFArray *)CFDictionaryGetValue(v27, @"MediaSelectionOptionsFallbackIDs");
                if (v43)
                {
                  uint64_t v67 = ArrayValue;
                  CFIndex v44 = CFArrayGetCount(v43);
                  if (v44 >= 1)
                  {
                    CFIndex v45 = v44;
                    uint64_t v46 = 0;
                    while (1)
                    {
                      FigCFArrayGetInt32AtIndex();
                      uint64_t v47 = itemfig_getTrackStorage((uint64_t)a2, valuePtr, v82);
                      if (v47)
                      {
                        uint64_t v65 = v47;
                        uint64_t v10 = v37;
                        goto LABEL_98;
                      }
                      uint64_t v35 = v82[0];
                      if (*(unsigned char *)(v82[0] + 8)) {
                        break;
                      }
                      if (v45 == ++v46) {
                        goto LABEL_35;
                      }
                    }
                    if (v67) {
                      FigCFArrayGetCFIndexAtIndex();
                    }
                  }
                }
              }
LABEL_35:
              uint64_t v10 = v37;
              uint64_t v8 = v72;
              if (*(unsigned char *)(v35 + 8))
              {
                int v38 = *(_DWORD *)(v35 + 4);
                if (v38 == 1936684398)
                {
                  uint64_t v48 = -1;
                  uint64_t v77 = -1;
                  CFNumberRef v49 = *(const __CFNumber **)(v35 + 144);
                  if (v49)
                  {
                    CFNumberGetValue(v49, kCFNumberCFIndexType, &v77);
                    uint64_t v48 = v77;
                  }
                  if (v48 == *(void *)v79)
                  {
LABEL_87:
                    CFNumberRef Value = v73;
                    char v16 = v71;
                    goto LABEL_60;
                  }
                }
                else
                {
                  if (v38 != 1935832172) {
                    goto LABEL_87;
                  }
                  if (!*(unsigned char *)(v72 + 1022))
                  {
                    CFBooleanRef v39 = (const __CFBoolean *)CFDictionaryGetValue(v27, @"MediaSelectionOptionsDisplaysNonForcedSubtitles");
                    if (v39)
                    {
                      CFBooleanRef v40 = v39;
                      CFTypeID v41 = CFGetTypeID(v39);
                      if (v41 == CFBooleanGetTypeID())
                      {
                        int v42 = *(unsigned __int8 *)(v72 + 1020);
                        if (v42 == CFBooleanGetValue(v40)) {
                          goto LABEL_87;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          else
          {
            CFIndex v33 = CFDictionaryGetValue(v27, @"MediaSelectionOptionsUniqueOutOfBandID");
            if (!v33) {
              goto LABEL_88;
            }
            CFTypeID v34 = CFGetTypeID(v33);
            if (v34 != CFNumberGetTypeID()) {
              goto LABEL_88;
            }
          }
        }
        while (++v25 != v24);
      }
    }
    CFIndex v61 = v76;
LABEL_85:
    CFIndex v11 = v61 + 1;
    if (v11 == Count)
    {
      uint64_t v65 = 0;
      goto LABEL_90;
    }
  }
LABEL_88:
  uint64_t TrackStorage = FigSignalErrorAt();
LABEL_89:
  uint64_t v65 = TrackStorage;
LABEL_90:
  a3 = v69;
  if (!v69)
  {
LABEL_98:
    if (v10) {
      CFRelease(v10);
    }
    return v65;
  }
LABEL_96:
  if (v65) {
    goto LABEL_98;
  }
  *a3 = v10;
  return v65;
}

uint64_t itemfig_getTrackStorage(uint64_t a1, int a2, void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = itemfig_ensureTrackStorageArray();
  if (!result)
  {
    CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 648));
    if (Count < 1)
    {
LABEL_6:
      return FigSignalErrorAt();
    }
    else
    {
      CFIndex v8 = Count;
      CFIndex v9 = 0;
      while (1)
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 648), v9);
        if (*ValueAtIndex == a2) {
          break;
        }
        if (v8 == ++v9) {
          goto LABEL_6;
        }
      }
      CFIndex v11 = ValueAtIndex;
      uint64_t result = 0;
      *a3 = v11;
    }
  }
  return result;
}

uint64_t itemfig_assureBasicsReadyUsingAsset(void *a1)
{
  if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 1200)) {
    return 0;
  }

  return itemfig_setBasicInspectables(a1);
}

uint64_t itemfig_setBasicInspectables(void *a1)
{
  values[16] = *(void **)MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v122 = 0;
  uint64_t v3 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v3)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 0;
  }
  uint64_t v4 = (const void *)v3;
  uint64_t v5 = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (*v5)
  {
    LODWORD(cf) = 0;
    LOBYTE(valuePtr) = 0;
    int v109 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v109, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    uint64_t v7 = 0;
    goto LABEL_133;
  }
  uint64_t v6 = v5;
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 1208));
  if (!*(unsigned char *)(DerivedStorage + 1200))
  {
    CFTypeRef cf = 0;
    uint64_t v8 = itemfig_setFormatReader(a1);
    if (v8) {
      goto LABEL_173;
    }
    uint64_t v9 = *(void *)(DerivedStorage + 1216);
    CFAllocatorRef v10 = CFGetAllocator(a1);
    uint64_t CMBaseObject = FigAssetGetCMBaseObject(v9);
    uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v12) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    CFTypeID v14 = *(uint64_t (**)(uint64_t, __CFString *, CFAllocatorRef, uint64_t))(v13 + 48);
    if (!v14) {
      goto LABEL_131;
    }
    uint64_t v15 = (uint64_t *)(DerivedStorage + 128);
    uint64_t v8 = v14(CMBaseObject, @"assetProperty_ContentByteStream", v10, DerivedStorage + 128);
    if (v8)
    {
LABEL_173:
      uint64_t v7 = v8;
      goto LABEL_132;
    }
    if (*v15)
    {
      CMByteStreamGetCMBaseObject();
      FigCRABSGetClassID();
      if (CMBaseObjectIsMemberOfClass())
      {
        values[0] = 0;
        if (*(unsigned char *)(DerivedStorage + 1))
        {
          char v16 = *(const void **)(DerivedStorage + 1384);
          if (v16)
          {
            CFRelease(v16);
            *(void *)(DerivedStorage + 1384) = 0;
          }
          uint64_t v17 = CMByteStreamGetCMBaseObject();
          uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v18) {
            uint64_t v19 = v18;
          }
          else {
            uint64_t v19 = 0;
          }
          CFArrayRef v20 = *(void (**)(uint64_t, __CFString *, void, uint64_t))(v19 + 48);
          if (v20) {
            v20(v17, @"CRABS_InteractivePlaybackAssertion", 0, DerivedStorage + 1384);
          }
        }
        if (*(unsigned char *)(DerivedStorage + 1696))
        {
          *(void *)CFNumberRef number = 0;
          uint64_t v21 = CMByteStreamGetCMBaseObject();
          uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 8);
          uint64_t v23 = v22 ? v22 : 0;
          CFIndex v24 = *(void (**)(uint64_t, __CFString *, void, unsigned char *))(v23 + 48);
          if (v24)
          {
            v24(v21, @"CRABS_ReadAheadStartTime", 0, number);
            if (*(void *)number)
            {
              double valuePtr = 0.0;
              CFNumberGetValue(*(CFNumberRef *)number, kCFNumberDoubleType, &valuePtr);
              CFRelease(*(CFTypeRef *)number);
              double v25 = *(double *)(DerivedStorage + 1552);
              if (v25 >= valuePtr) {
                double v25 = valuePtr;
              }
              *(double *)(DerivedStorage + 1552) = v25;
            }
          }
        }
        *(unsigned char *)(DerivedStorage + 1697) = 1;
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterAddWeakListener();
        uint64_t v26 = CMByteStreamGetCMBaseObject();
        uint64_t v27 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v27) {
          uint64_t v28 = v27;
        }
        else {
          uint64_t v28 = 0;
        }
        CFNumberRef v29 = *(unsigned int (**)(uint64_t, __CFString *, void, void **))(v28 + 48);
        if (v29)
        {
          if (!v29(v26, @"CRABS_ConnectionState", 0, values))
          {
            CFDictionaryRef v30 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)kFigCachedReadAheadByteStreamParameter_ConnectionState, (const void **)values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
            uint64_t DefaultLocalCenter = CMNotificationCenterGetDefaultLocalCenter();
            itemfig_ConnectionStateChanged(DefaultLocalCenter, a1, v32, *v15, v30);
            if (v30) {
              CFRelease(v30);
            }
          }
        }
        if (values[0]) {
          CFRelease(values[0]);
        }
        if (!*(void *)(DerivedStorage + 2008))
        {
          uint64_t v37 = CMByteStreamGetCMBaseObject();
          uint64_t v38 = *(void *)(CMBaseObjectGetVTable() + 8);
          uint64_t v39 = v38 ? v38 : 0;
          uint64_t v97 = *(void (**)(uint64_t, __CFString *, void, uint64_t))(v39 + 48);
          if (v97) {
            v97(v37, @"CRABS_ClientNetworkActivity", 0, DerivedStorage + 2008);
          }
        }
        CFAllocatorRef v33 = CFGetAllocator(a1);
        uint64_t v34 = CMByteStreamGetCMBaseObject();
        uint64_t v35 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v35) {
          uint64_t v36 = v35;
        }
        else {
          uint64_t v36 = 0;
        }
        CFBooleanRef v40 = *(void (**)(uint64_t, __CFString *, CFAllocatorRef, uint64_t))(v36 + 48);
        if (v40) {
          v40(v34, @"CRABS_NetworkUrgencyMonitor", v33, DerivedStorage + 632);
        }
      }
      else
      {
        *(unsigned char *)(DerivedStorage + 1330) = 1;
      }
      itemfig_reportingAgentSetup((uint64_t)a1);
    }
    uint64_t v41 = *(void *)(DerivedStorage + 1216);
    CFAllocatorRef v42 = CFGetAllocator(a1);
    uint64_t v43 = FigAssetGetCMBaseObject(v41);
    uint64_t v44 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v44) {
      uint64_t v45 = v44;
    }
    else {
      uint64_t v45 = 0;
    }
    uint64_t v46 = *(uint64_t (**)(uint64_t, __CFString *, CFAllocatorRef, CFTypeRef *))(v45 + 48);
    if (v46) {
      uint64_t v7 = v46(v43, @"assetProperty_Tracks", v42, &cf);
    }
    else {
      uint64_t v7 = 4294954514;
    }
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    if (v7) {
      goto LABEL_132;
    }
    uint64_t v47 = CMBaseObjectGetDerivedStorage();
    uint64_t v48 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v48)
    {
      CFNumberRef v49 = (const void *)v48;
      uint64_t v50 = CMBaseObjectGetDerivedStorage();
      if (!*(unsigned char *)v50)
      {
        uint64_t v51 = v50;
        MEMORY[0x19970E910](*(void *)(v50 + 712));
        uint64_t v52 = *(const void **)(v51 + 720);
        if (v52) {
          CFDictionaryRef v53 = (const __CFDictionary *)CFRetain(v52);
        }
        else {
          CFDictionaryRef v53 = 0;
        }
        MEMORY[0x19970E930](*(void *)(v51 + 712));
        CFIndex v118 = (const void **)(v47 + 984);
        uint64_t v54 = FPSupport_BuildAlternateTrackGroups(*(void *)(v47 + 968), (__CFDictionary **)(v47 + 984));
        if (!v54)
        {
          CFDictionaryRef v119 = v53;
          int v55 = *(_DWORD *)(v51 + 784);
          if (v55 == 1) {
            char v56 = 1;
          }
          else {
            char v56 = 4 * (v55 == 2);
          }
          if (*(unsigned char *)(v51 + 857)) {
            char v57 = v56 | 2;
          }
          else {
            char v57 = v56;
          }
          FPSupport_GetDefaultTrackIDForMediaType(*(void *)(v47 + 968), 1986618469, v47 + 1000, v57);
          itemfig_updateHasEnabledVideo();
          itemfig_updateListenersForVideoTrack((uint64_t)a1, *(unsigned int *)(v47 + 1000));
          uint64_t v58 = *(unsigned int *)(v47 + 1008);
          if (v58
            || (FPSupport_GetDefaultTrackIDForMediaType(*(void *)(v47 + 968), 1668047728, v47 + 1008, 0),
                uint64_t v58 = *(unsigned int *)(v47 + 1008),
                v58))
          {
            itemfig_hintTrackIfPreload((uint64_t)a1, v58);
          }
          CFDictionaryRef v59 = (int *)(v47 + 996);
          uint64_t v60 = *(unsigned int *)(v47 + 996);
          if (v60 && fp_getTrackIDMediaType(*(void *)(v47 + 968), v60) != 1936684398)
          {
            CFIndex v61 = v6;
            LODWORD(valuePtr) = 0;
            os_log_type_t type = OS_LOG_TYPE_DEFAULT;
            CFIndex v62 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int v63 = LODWORD(valuePtr);
            if (os_log_type_enabled(v62, type)) {
              unsigned int v64 = v63;
            }
            else {
              unsigned int v64 = v63 & 0xFFFFFFFE;
            }
            if (v64)
            {
              int v65 = *v59;
              *(_DWORD *)CFNumberRef number = 136315394;
              *(void *)&number[4] = "itemfig_establishTrackIDs";
              __int16 v125 = 1024;
              LODWORD(v126) = v65;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            *CFDictionaryRef v59 = 0;
            uint64_t v6 = v61;
          }
          CFTypeID v66 = (unsigned int *)(v47 + 1016);
          uint64_t v67 = *(unsigned int *)(v47 + 1016);
          if (v67)
          {
            TrackIDCMMediaType MediaType = fp_getTrackIDMediaType(*(void *)(v47 + 968), v67);
            if (TrackIDMediaType != 1935832172 && TrackIDMediaType != 1952807028)
            {
              uint64_t v69 = v6;
              LODWORD(valuePtr) = 0;
              os_log_type_t type = OS_LOG_TYPE_DEFAULT;
              CMTagValue v70 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              unsigned int v71 = LODWORD(valuePtr);
              if (os_log_type_enabled(v70, type)) {
                unsigned int v72 = v71;
              }
              else {
                unsigned int v72 = v71 & 0xFFFFFFFE;
              }
              if (v72)
              {
                int v73 = *v66;
                *(_DWORD *)CFNumberRef number = 136315394;
                *(void *)&number[4] = "itemfig_establishTrackIDs";
                __int16 v125 = 1024;
                LODWORD(v126) = v73;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              *CFTypeID v66 = 0;
              uint64_t v6 = v69;
              CFDictionaryRef v53 = v119;
            }
          }
          uint64_t v74 = (int *)(v47 + 1040);
          uint64_t v75 = *(unsigned int *)(v47 + 1040);
          if (v75 && fp_getTrackIDMediaType(*(void *)(v47 + 968), v75) != 1751216244)
          {
            LODWORD(valuePtr) = 0;
            os_log_type_t type = OS_LOG_TYPE_DEFAULT;
            CFIndex v76 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int v77 = LODWORD(valuePtr);
            if (os_log_type_enabled(v76, type)) {
              unsigned int v78 = v77;
            }
            else {
              unsigned int v78 = v77 & 0xFFFFFFFE;
            }
            if (v78)
            {
              int v79 = *v74;
              *(_DWORD *)CFNumberRef number = 136315394;
              *(void *)&number[4] = "itemfig_establishTrackIDs";
              __int16 v125 = 1024;
              LODWORD(v126) = v79;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            *uint64_t v74 = 0;
            CFDictionaryRef v53 = v119;
          }
          if (*v59) {
            goto LABEL_190;
          }
          FPSupport_GetDefaultTrackIDForMediaType(*(void *)(v47 + 968), 1936684398, v47 + 996, 0);
          if (!*(_DWORD *)(v47 + 996)) {
            FPSupport_GetFirstEnabledTrackIDForMediaType(*(void *)(v47 + 968), 1936684398, v47 + 996);
          }
          uint64_t v54 = FPSupport_ChooseTrackIDsUsingPreferredLanguageLists(*v118, v53, @"Audio", (_DWORD *)(v47 + 996));
          if (!v54)
          {
LABEL_190:
            if (*v66)
            {
LABEL_108:
              if (!*v74)
              {
                FPSupport_GetDefaultTrackIDForMediaType(*(void *)(v47 + 968), 1751216244, v47 + 1040, 0);
                uint64_t v81 = *(unsigned int *)(v47 + 1040);
                if (v81) {
                  itemfig_hintTrackIfPreload((uint64_t)a1, v81);
                }
              }
              uint64_t v7 = 0;
LABEL_112:
              uint64_t v82 = (void *)(DerivedStorage + 128);
              if (v53) {
                CFRelease(v53);
              }
              CFRelease(v49);
              if (v7) {
                goto LABEL_132;
              }
LABEL_115:
              uint64_t v83 = *(void *)(DerivedStorage + 1216);
              CFAllocatorRef v84 = CFGetAllocator(a1);
              uint64_t v85 = FigAssetGetCMBaseObject(v83);
              uint64_t v86 = *(void *)(CMBaseObjectGetVTable() + 8);
              if (v86) {
                uint64_t v87 = v86;
              }
              else {
                uint64_t v87 = 0;
              }
              CFIndex v88 = *(uint64_t (**)(uint64_t, __CFString *, CFAllocatorRef, uint64_t))(v87 + 48);
              if (v88)
              {
                uint64_t v8 = v88(v85, @"MediaSelectionArray", v84, DerivedStorage + 1792);
                if (!v8)
                {
                  FigAutomaticMediaSelectionGetMediaSelectionGroupsForMajorIntrinsicCharacteristics(*(void *)(DerivedStorage + 1792), 0, (const __CFDictionary **)(DerivedStorage + 1800), (const __CFDictionary **)(DerivedStorage + 1808));
                  itemfig_checkForShortAudioTrack();
                  uint64_t v89 = CMBaseObjectGetDerivedStorage();
                  uint64_t v90 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
                  CFTypeRef v91 = (unsigned char *)CMBaseObjectGetDerivedStorage();
                  if (v90)
                  {
                    if (!*v91
                      && !*(unsigned char *)(v89 + 1394)
                      && FPSupport_HasTrackOfType(*(void *)(v89 + 968), 1986618469))
                    {
                      *(unsigned char *)(v89 + 1393) = 1;
                      if (dword_1E9350BF0)
                      {
                        LODWORD(valuePtr) = 0;
                        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
                        uint64_t v92 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                        unsigned int v93 = LODWORD(valuePtr);
                        if (os_log_type_enabled(v92, type)) {
                          unsigned int v94 = v93;
                        }
                        else {
                          unsigned int v94 = v93 & 0xFFFFFFFE;
                        }
                        if (v94)
                        {
                          if (a1) {
                            uint64_t v95 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
                          }
                          else {
                            uint64_t v95 = "";
                          }
                          *(_DWORD *)CFNumberRef number = 136315650;
                          *(void *)&number[4] = "itemfig_establishStereoAudioSpatializationPreferenceForAsset";
                          __int16 v125 = 2048;
                          uint64_t v126 = a1;
                          __int16 v127 = 2082;
                          int v128 = v95;
                          _os_log_send_and_compose_impl();
                        }
                        fig_log_call_emit_and_clean_up_after_send_and_compose();
                        uint64_t v82 = (void *)(DerivedStorage + 128);
                      }
                      CMNotificationCenterGetDefaultLocalCenter();
                      FigDispatchAsyncPostNotification();
                    }
                    CFRelease(v90);
                  }
                  *(unsigned char *)(DerivedStorage + 1200) = 1;
                  *(CFAbsoluteTime *)(DerivedStorage + 1576) = CFAbsoluteTimeGetCurrent();
                  if (*(unsigned char *)(DerivedStorage + 1382))
                  {
                    if (*v82)
                    {
                      CMByteStreamGetCMBaseObject();
                      FigCRABSGetClassID();
                      if (CMBaseObjectIsMemberOfClass())
                      {
                        CFArrayRef v98 = (void *)(*(unsigned char *)(DerivedStorage + 1381) ? MEMORY[0x1E4F1CFD0] : MEMORY[0x1E4F1CFC8]);
                        uint64_t v99 = CMByteStreamGetCMBaseObject();
                        uint64_t v100 = *(void *)(CMBaseObjectGetVTable() + 8);
                        uint64_t v101 = v100 ? v100 : 0;
                        uint64_t v102 = *(void (**)(uint64_t, __CFString *, void))(v101 + 56);
                        if (v102) {
                          v102(v99, @"CRABS_ReadAheadAllowBackfill", *v98);
                        }
                      }
                    }
                  }
                  uint64_t v103 = CMBaseObjectGetDerivedStorage();
                  CFIndex v104 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
                  CFDictionaryRef v105 = *(const __CFDictionary **)(v103 + 1272);
                  if (v105)
                  {
                    CFDictionaryApplyFunction(v105, (CFDictionaryApplierFunction)itemfig_transferPendingTrackProperties, a1);
                    uint64_t v106 = *(const void **)(v103 + 1272);
                    if (v106)
                    {
                      CFRelease(v106);
                      *(void *)(v103 + 1272) = 0;
                    }
                  }
                  if (v104) {
                    CFRelease(v104);
                  }
                  uint64_t v7 = itemfig_createCoalescedClientAndAutomaticSelectedMediaArray(a1, &v122);
                  CFTypeRef v107 = v122;
                  if (!v7)
                  {
                    if (v122) {
                      itemfig_applySelectedMediaArray((uint64_t)a1, (const __CFArray *)v122, 0, 0, 0);
                    }
                    MEMORY[0x19970E930](*(void *)(DerivedStorage + 1208), v107);
                    MEMORY[0x19970E290](*((void *)v6 + 62));
                    if (*(unsigned char *)(DerivedStorage + 1)) {
                      playerfig_configureDownloadInPlayQueue();
                    }
                    else {
                      itemfig_configureDownloadForItem((uint64_t)a1, *(unsigned __int8 *)(DerivedStorage + 1329));
                    }
                    MEMORY[0x19970E2B0](*((void *)v6 + 62));
                    CFTypeRef v107 = v122;
                  }
                  if (v107) {
                    CFRelease(v107);
                  }
                  if (!v7) {
                    goto LABEL_133;
                  }
                  goto LABEL_132;
                }
                goto LABEL_173;
              }
LABEL_131:
              uint64_t v7 = 4294954514;
              goto LABEL_132;
            }
            FPSupport_GetDefaultTrackIDForMediaType(*(void *)(v47 + 968), 1935832172, v47 + 1016, 0);
            if (!*(_DWORD *)(v47 + 1016)) {
              FPSupport_GetDefaultTrackIDForMediaType(*(void *)(v47 + 968), 1952807028, v47 + 1016, 0);
            }
            uint64_t v54 = FPSupport_ChooseTrackIDsUsingPreferredLanguageLists(*v118, v53, @"Subtitle", (_DWORD *)(v47 + 1016));
            if (!v54)
            {
              uint64_t v80 = *v66;
              if (v80) {
                itemfig_hintTrackIfPreload((uint64_t)a1, v80);
              }
              goto LABEL_108;
            }
          }
        }
        uint64_t v7 = v54;
        goto LABEL_112;
      }
      int v114 = v49;
      uint64_t v110 = v6;
      LODWORD(valuePtr) = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      unsigned int v115 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v116 = LODWORD(valuePtr);
      if (os_log_type_enabled(v115, type)) {
        unsigned int v117 = v116;
      }
      else {
        unsigned int v117 = v116 & 0xFFFFFFFE;
      }
      if (v117)
      {
        *(_DWORD *)CFNumberRef number = 136315138;
        *(void *)&number[4] = "itemfig_establishTrackIDs";
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      CFRelease(v114);
    }
    else
    {
      uint64_t v110 = v6;
      LODWORD(valuePtr) = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      uint64_t v111 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v112 = LODWORD(valuePtr);
      if (os_log_type_enabled(v111, type)) {
        unsigned int v113 = v112;
      }
      else {
        unsigned int v113 = v112 & 0xFFFFFFFE;
      }
      if (v113)
      {
        *(_DWORD *)CFNumberRef number = 136315138;
        *(void *)&number[4] = "itemfig_establishTrackIDs";
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v6 = v110;
    uint64_t v82 = (void *)(DerivedStorage + 128);
    goto LABEL_115;
  }
  uint64_t v7 = 0;
LABEL_132:
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 1208));
LABEL_133:
  CFRelease(v4);
  return v7;
}

uint64_t itemfig_setFormatReader(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 1200)) {
    return 0;
  }
  uint64_t v3 = DerivedStorage;
  if (*(void *)(DerivedStorage + 968)) {
    return 0;
  }
  uint64_t v5 = *(void *)(DerivedStorage + 1216);
  CFAllocatorRef v6 = CFGetAllocator(a1);
  uint64_t CMBaseObject = FigAssetGetCMBaseObject(v5);
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  CFAllocatorRef v10 = *(uint64_t (**)(uint64_t, __CFString *, CFAllocatorRef, void *))(v9 + 48);
  if (!v10) {
    return 4294954514;
  }
  CFIndex v11 = (void *)(v3 + 968);
  uint64_t result = v10(CMBaseObject, @"assetProperty_FormatReader", v6, v11);
  if (!result)
  {
    if (*v11) {
      return 0;
    }
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t CMByteStreamCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t CMBaseObject = CMByteStreamGetCMBaseObject();
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  CFAllocatorRef v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (!v10) {
    return 4294954514;
  }

  return v10(CMBaseObject, a2, a3, a4);
}

uint64_t itemfig_ConnectionStateChanged(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, const void *a5)
{
  values[16] = *(void **)MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (a5)
  {
    CFTypeID v9 = CFGetTypeID(a5);
    uint64_t result = CFDictionaryGetTypeID();
    if (v9 == result)
    {
      uint64_t result = FigCFDictionaryGetInt32IfPresent();
      if (result)
      {
        values[0] = @"Connected";
        MEMORY[0x19970E290](*(void *)(DerivedStorage + 1400));
        if (@"Connected" == *(__CFString **)(DerivedStorage + 1416))
        {
          return MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 1400));
        }
        else
        {
          *(void **)(DerivedStorage + 1416) = values[0];
          CFDictionaryRef v10 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)&kFigPlaybackItemParameter_ConnectionState, (const void **)values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          uint64_t result = MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 1400));
          if (v10)
          {
            CFRetain(a2);
            return FigDeferNotificationToDispatchQueue();
          }
        }
      }
    }
  }
  return result;
}

void itemfig_reportingAgentSetup(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1)
  {
    uint64_t v3 = DerivedStorage;
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 1896));
    if (*(void *)(v3 + 1904) || (uint64_t v4 = FigCFWeakReferenceHolderCopyReferencedObject()) == 0)
    {
      JUMPOUT(0x19970E930);
    }
    uint64_t v5 = (const void *)v4;
    uint64_t v6 = CMBaseObjectGetDerivedStorage();
    if (!v6) {
      goto LABEL_67;
    }
    uint64_t v7 = v6;
    uint64_t v8 = (uint64_t *)(v3 + 1904);
    if (!*(void *)(v3 + 128)) {
      goto LABEL_60;
    }
    CMByteStreamGetCMBaseObject();
    FigCRABSGetClassID();
    if (!CMBaseObjectIsMemberOfClass())
    {
LABEL_13:
      if (FigReportingAgentCreate(*(const void **)(v7 + 936), *(const void **)(v7 + 8), 0, 0, 0, 4, 0, *(unsigned char *)(v3 + 1241), (void *)(v3 + 1904)))goto LABEL_67; {
      goto LABEL_14;
      }
    }
    uint64_t CMBaseObject = CMByteStreamGetCMBaseObject();
    uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v10) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    uint64_t v12 = *(uint64_t (**)(uint64_t, __CFString *, void, uint64_t))(v11 + 48);
    if (v12)
    {
      int v13 = v12(CMBaseObject, @"CRABS_ReportingAgent", *MEMORY[0x1E4F1CF80], v3 + 1904);
      int v14 = v13;
      if (v13 == -12784)
      {
        if (FigReportingAgentCreateFromAsset(*(void *)(v3 + 1216), 2, 0, (void *)(v3 + 1904))) {
          goto LABEL_13;
        }
LABEL_24:
        uint64_t v23 = *v8;
        BOOL v24 = *(void *)(v7 + 168) != 0;
        if (*v8)
        {
          uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 16);
          uint64_t v26 = v25 ? v25 : 0;
          uint64_t v32 = *(void (**)(uint64_t, uint64_t, uint64_t, BOOL, void))(v26 + 56);
          if (v32) {
            v32(v23, 0x1EE582B78, 0x1EE584C98, v24, 0);
          }
        }
        uint64_t v33 = *(void *)(v3 + 1904);
        if (v33)
        {
          uint64_t v34 = *(unsigned __int8 *)(v3 + 1696);
          uint64_t v35 = *(void *)(CMBaseObjectGetVTable() + 16);
          uint64_t v36 = v35 ? v35 : 0;
          uint64_t v37 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v36 + 56);
          if (v37) {
            v37(v33, 0x1EE582B78, 0x1EE585AD8, v34, 0);
          }
        }
        uint64_t v38 = *v8;
        if (*v8)
        {
          uint64_t v39 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v39) {
            uint64_t v40 = v39;
          }
          else {
            uint64_t v40 = 0;
          }
          uint64_t v41 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v40 + 48);
          if (v41) {
            v41(v38, 0x1EE582B78, 0x1EE583C78, 0x1EE582DD8, 0);
          }
          uint64_t v42 = *v8;
          if (*v8)
          {
            uint64_t v43 = *(unsigned __int8 *)(v7 + 57);
            uint64_t v44 = *(void *)(CMBaseObjectGetVTable() + 16);
            uint64_t v45 = v44 ? v44 : 0;
            uint64_t v46 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v45 + 56);
            if (v46) {
              v46(v42, 0x1EE582B78, 0x1EE583EF8, v43, 0);
            }
          }
        }
        if (v14 != -12784) {
          goto LABEL_60;
        }
LABEL_14:
        uint64_t v15 = *v8;
        if (*v8)
        {
          uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 16);
          uint64_t v17 = v16 ? v16 : 0;
          uint64_t v18 = *(unsigned int (**)(uint64_t, void))(v17 + 104);
          if (v18)
          {
            if (!v18(v15, 0))
            {
              uint64_t v19 = *v8;
              if (*v8)
              {
                uint64_t v20 = *(void *)(v7 + 936);
                uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 16);
                uint64_t v22 = v21 ? v21 : 0;
                uint64_t v27 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v22 + 48);
                if (v27) {
                  v27(v19, 0x1EE582B78, 0x1EE584C58, v20, 0);
                }
              }
              if (*(void *)(v3 + 128))
              {
                CFTypeRef cf = 0;
                uint64_t v28 = CMByteStreamGetCMBaseObject();
                uint64_t v29 = *(void *)(CMBaseObjectGetVTable() + 8);
                if (v29) {
                  uint64_t v30 = v29;
                }
                else {
                  uint64_t v30 = 0;
                }
                CFTypeID v31 = *(unsigned int (**)(uint64_t, void, void, CFTypeRef *))(v30 + 48);
                if (v31)
                {
                  if (!v31(v28, *MEMORY[0x1E4F1EC50], *MEMORY[0x1E4F1CF80], &cf))
                  {
                    uint64_t v52 = *v8;
                    uint64_t SInt64 = FigCFNumberGetSInt64();
                    if (v52)
                    {
                      uint64_t v54 = SInt64;
                      uint64_t v55 = *(void *)(CMBaseObjectGetVTable() + 16);
                      uint64_t v56 = v55 ? v55 : 0;
                      char v57 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v56 + 56);
                      if (v57) {
                        v57(v52, 0x1EE582B78, 0x1EE55E018, v54, 0);
                      }
                    }
                  }
                }
                if (cf) {
                  CFRelease(cf);
                }
              }
              goto LABEL_60;
            }
          }
        }
LABEL_67:
        MEMORY[0x19970E930](*(void *)(v3 + 1896));
        CFRelease(v5);
        return;
      }
      if (!v13) {
        goto LABEL_24;
      }
    }
LABEL_60:
    uint64_t v47 = *(void *)(v3 + 1912);
    if (v47)
    {
      uint64_t v48 = *v8;
      if (v48)
      {
        uint64_t v49 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v49) {
          uint64_t v50 = v49;
        }
        else {
          uint64_t v50 = 0;
        }
        uint64_t v51 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v50 + 48);
        if (v51) {
          v51(v48, 0x1EE582B78, 0x1EE578EF8, v47, 0);
        }
      }
    }
    goto LABEL_67;
  }
}

void itemfig_checkForShortAudioTrack()
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v46 = 0;
  uint64_t v47 = 0;
  CFTypeRef v44 = 0;
  CFTypeRef v45 = 0;
  memset(v43, 0, sizeof(v43));
  CFDictionaryRef dictionaryRepresentation = 0;
  memset(&v41, 0, sizeof(v41));
  *(unsigned char *)(DerivedStorage + 992) = 0;
  if (!*(_DWORD *)(DerivedStorage + 996)) {
    goto LABEL_54;
  }
  uint64_t v1 = DerivedStorage;
  uint64_t v2 = *(void *)(DerivedStorage + 968);
  uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v4 = v3 ? v3 : 0;
  uint64_t v5 = *(unsigned int (**)(uint64_t, uint64_t *))(v4 + 8);
  if (!v5 || v5(v2, &v47) || v47 == 1) {
    goto LABEL_54;
  }
  uint64_t v6 = *(void *)(v1 + 968);
  uint64_t v7 = *(unsigned int *)(v1 + 996);
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v9 = v8 ? v8 : 0;
  uint64_t v10 = *(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *, void))(v9 + 56);
  if (!v10 || v10(v6, v7, &v46, 0)) {
    goto LABEL_54;
  }
  uint64_t v11 = *MEMORY[0x1E4F1CF80];
  uint64_t FigBaseObject = FigTrackReaderGetFigBaseObject(v46);
  uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v13) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t v15 = *(void (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v14 + 48);
  if (v15) {
    v15(FigBaseObject, @"SecondaryEditCursorService", v11, &v45);
  }
  CFTypeRef v16 = v45;
  if (v45) {
    goto LABEL_25;
  }
  uint64_t v17 = FigTrackReaderGetFigBaseObject(v46);
  uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v18) {
    uint64_t v19 = v18;
  }
  else {
    uint64_t v19 = 0;
  }
  uint64_t v20 = *(void (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v19 + 48);
  if (v20) {
    v20(v17, @"EditCursorService", v11, &v45);
  }
  CFTypeRef v16 = v45;
  if (v45)
  {
LABEL_25:
    uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v21) {
      uint64_t v22 = v21;
    }
    else {
      uint64_t v22 = 0;
    }
    uint64_t v23 = *(uint64_t (**)(CFTypeRef, CMTimeRange *, CFTypeRef *))(v22 + 8);
    if (!v23) {
      goto LABEL_54;
    }
    *(_OWORD *)&range.start.CMTimeValue value = *MEMORY[0x1E4F1FA10];
    range.start.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1FA10] + 16);
    int v24 = v23(v16, &range, &v44);
    if (v24 == -12521)
    {
LABEL_30:
      *(unsigned char *)(v1 + 992) = 1;
      goto LABEL_54;
    }
    if (v24) {
      goto LABEL_54;
    }
    CFTypeRef v25 = v44;
    uint64_t v26 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v27 = v26 ? v26 : 0;
    CFTypeID v31 = *(unsigned int (**)(CFTypeRef, CMTimeRange *))(v27 + 24);
    if (!v31 || v31(v25, v43)) {
      goto LABEL_54;
    }
    CMTimeRange range = v43[1];
    CMTimeRangeGetEnd(&v41, &range);
  }
  else
  {
    uint64_t v28 = FigTrackReaderGetFigBaseObject(v46);
    uint64_t v29 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v29) {
      uint64_t v30 = v29;
    }
    else {
      uint64_t v30 = 0;
    }
    uint64_t v32 = *(unsigned int (**)(uint64_t, __CFString *, uint64_t, CFDictionaryRef *))(v30 + 48);
    if (!v32 || v32(v28, @"UneditedTrackDuration", v11, &dictionaryRepresentation)) {
      goto LABEL_54;
    }
    CMTimeMakeFromDictionary(&v41, dictionaryRepresentation);
    if (dictionaryRepresentation)
    {
      CFRelease(dictionaryRepresentation);
      CFDictionaryRef dictionaryRepresentation = 0;
    }
  }
  CMTimeValue value = *(void *)(v1 + 140);
  CMTimeFlags flags = *(_DWORD *)(v1 + 152);
  CMTimeScale timescale = *(_DWORD *)(v1 + 148);
  if ((flags & 0x1D) == 1)
  {
    CMTimeEpoch epoch = *(void *)(v1 + 156);
  }
  else
  {
    uint64_t v35 = FigFormatReaderGetFigBaseObject(*(void *)(v1 + 968));
    uint64_t v36 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v36) {
      uint64_t v37 = v36;
    }
    else {
      uint64_t v37 = 0;
    }
    uint64_t v38 = *(unsigned int (**)(uint64_t, __CFString *, uint64_t, CFDictionaryRef *))(v37 + 48);
    if (!v38 || v38(v35, @"NominalDuration", v11, &dictionaryRepresentation)) {
      goto LABEL_54;
    }
    CMTimeMakeFromDictionary(&range.start, dictionaryRepresentation);
    CMTimeValue value = range.start.value;
    CMTimeFlags flags = range.start.flags;
    CMTimeScale timescale = range.start.timescale;
    CMTimeEpoch epoch = range.start.epoch;
  }
  range.CMTime start = v41;
  time2.CMTimeValue value = value;
  time2.CMTimeScale timescale = timescale;
  time2.CMTimeFlags flags = flags;
  time2.CMTimeEpoch epoch = epoch;
  if (CMTimeCompare(&range.start, &time2) < 0) {
    goto LABEL_30;
  }
LABEL_54:
  if (v45) {
    CFRelease(v45);
  }
  if (v44) {
    CFRelease(v44);
  }
  if (dictionaryRepresentation) {
    CFRelease(dictionaryRepresentation);
  }
  if (v46) {
    CFRelease(v46);
  }
}

uint64_t CMByteStreamSetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t CMBaseObject = CMByteStreamGetCMBaseObject();
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 56);
  if (!v8) {
    return 4294954514;
  }

  return v8(CMBaseObject, a2, a3);
}

void playerfig_configureDownloadInPlayQueue()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 496));
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 504));
  CFIndex v2 = Count;
  if (*(_DWORD *)(DerivedStorage + 60)) {
    char v3 = *(_DWORD *)(DerivedStorage + 72) < 1;
  }
  else {
    char v3 = 0;
  }
  if (Count >= 1)
  {
    CFIndex v4 = 0;
    do
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), v4);
      uint64_t v6 = CMBaseObjectGetDerivedStorage();
      if (v3)
      {
        char v3 = itemfig_configureDownloadForItem((uint64_t)ValueAtIndex, *(unsigned __int8 *)(v6 + 1328)) ^ 1;
      }
      else
      {
        itemfig_configureDownloadForItem((uint64_t)ValueAtIndex, 0);
        char v3 = 0;
      }
      ++v4;
    }
    while (v2 != v4);
  }

  JUMPOUT(0x19970E2B0);
}

uint64_t itemfig_configureDownloadForItem(uint64_t a1, int a2)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = *(void *)(DerivedStorage + 8);
  uint64_t v6 = CMBaseObjectGetDerivedStorage();
  if (a2 && !*(unsigned char *)(v6 + 65) && !*(unsigned char *)(DerivedStorage + 1330))
  {
    if ((*(_DWORD *)(DerivedStorage + 1368) & 0x1D) != 1 || !*(unsigned char *)(DerivedStorage + 1)) {
      goto LABEL_105;
    }
    CFTypeRef cf = 0;
    uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v12) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v27 = *(void (**)(uint64_t, void, CFTypeRef *))(v13 + 32);
    if (v27)
    {
      v27(v5, 0, &cf);
      CFTypeRef v28 = cf;
    }
    else
    {
      CFTypeRef v28 = 0;
    }
    CFTypeRef v29 = (CFTypeRef)a1;
    if (v28 != (CFTypeRef)a1)
    {
      if (!*(unsigned char *)(DerivedStorage + 1380))
      {
        if (*(void *)(DerivedStorage + 128))
        {
          CMTime v57 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
          if ((*(_DWORD *)(DerivedStorage + 36) & 0x1D) == 1) {
            CMTime v57 = *(CMTime *)(DerivedStorage + 24);
          }
          CMTime start = v57;
          CMTime duration = *(CMTime *)(DerivedStorage + 1356);
          CMTimeRangeMake(&v51, &start, &duration);
          if (itemfig_HintStreamForTimeRange(a1, (long long *)&v51.start.value)) {
            *(unsigned char *)(DerivedStorage + 1380) = 1;
          }
        }
        else
        {
          itemfig_makePlaybackPrerequisitePropertiesReady(a1, 0);
        }
      }
      CFTypeRef v29 = cf;
    }
    if (v29) {
      CFRelease(v29);
    }
    if (v28 == (CFTypeRef)a1)
    {
LABEL_105:
      if (*(void *)(DerivedStorage + 1336))
      {
LABEL_54:
        unsigned int v15 = 0;
        goto LABEL_21;
      }
      if (*(void *)(DerivedStorage + 128))
      {
        CMByteStreamGetCMBaseObject();
        FigCRABSGetClassID();
        if (CMBaseObjectIsMemberOfClass())
        {
          uint64_t v30 = (uint64_t *)(DerivedStorage + 1336);
          if (*(unsigned char *)(DerivedStorage + 137))
          {
            uint64_t CMBaseObject = FigAssetGetCMBaseObject(*(void *)(DerivedStorage + 1216));
            uint64_t v32 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v32) {
              uint64_t v33 = v32;
            }
            else {
              uint64_t v33 = 0;
            }
            uint64_t v39 = *(void (**)(uint64_t, __CFString *, void, uint64_t))(v33 + 48);
            if (v39) {
              v39(CMBaseObject, @"assetProperty_OriginalReadAheadAssertion", 0, DerivedStorage + 1336);
            }
            *(unsigned char *)(DerivedStorage + 137) = 0;
          }
          uint64_t v40 = *v30;
          if (*v30) {
            goto LABEL_86;
          }
          uint64_t v41 = CMByteStreamGetCMBaseObject();
          uint64_t v42 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v42) {
            uint64_t v43 = v42;
          }
          else {
            uint64_t v43 = 0;
          }
          CFTypeRef v44 = *(void (**)(uint64_t, __CFString *, void, uint64_t))(v43 + 48);
          if (v44) {
            v44(v41, @"CRABS_ReadAheadAssertion", 0, DerivedStorage + 1336);
          }
          uint64_t v40 = *v30;
          if (*v30) {
LABEL_86:
          }
            FigAssertionSetProperty(v40, @"Assertion_HolderName", @"Play-While-Download");
          goto LABEL_54;
        }
      }
      double v34 = *(double *)(DerivedStorage + 2064);
      if (v34 > 0.0)
      {
        if (dword_1E9350BF0)
        {
          LODWORD(duration.value) = 0;
          LOBYTE(cf) = 0;
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int value = duration.value;
          if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, (os_log_type_t)cf)) {
            unsigned int v37 = value;
          }
          else {
            unsigned int v37 = value & 0xFFFFFFFE;
          }
          if (v37)
          {
            if (a1) {
              uint64_t v38 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
            }
            else {
              uint64_t v38 = "";
            }
            uint64_t v45 = *(void *)(DerivedStorage + 2064);
            LODWORD(start.value) = 136315906;
            *(CMTimeValue *)((char *)&start.value + 4) = (CMTimeValue)"itemfig_configureDownloadForItem";
            LOWORD(start.flags) = 2048;
            *(void *)((char *)&start.flags + 2) = a1;
            HIWORD(start.epoch) = 2082;
            uint64_t v54 = v38;
            __int16 v55 = 2048;
            uint64_t v56 = v45;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          double v34 = *(double *)(DerivedStorage + 2064);
        }
        usleep((v34 * 1000000.0));
        if (dword_1E9350BF0)
        {
          LODWORD(duration.value) = 0;
          LOBYTE(cf) = 0;
          CFTypeRef v46 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v47 = duration.value;
          if (os_log_type_enabled(v46, (os_log_type_t)cf)) {
            unsigned int v48 = v47;
          }
          else {
            unsigned int v48 = v47 & 0xFFFFFFFE;
          }
          if (v48)
          {
            if (a1) {
              uint64_t v49 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
            }
            else {
              uint64_t v49 = "";
            }
            LODWORD(start.value) = 136315650;
            *(CMTimeValue *)((char *)&start.value + 4) = (CMTimeValue)"itemfig_configureDownloadForItem";
            LOWORD(start.flags) = 2048;
            *(void *)((char *)&start.flags + 2) = a1;
            HIWORD(start.epoch) = 2082;
            uint64_t v54 = v49;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
      itemfig_makePlaybackPrerequisitePropertiesReady(a1, 0);
      unsigned int v15 = 1;
LABEL_21:
      uint64_t v17 = CMBaseObjectGetDerivedStorage();
      MEMORY[0x19970E910](*(void *)(v17 + 2096));
      if (*(unsigned char *)(v17 + 2129) != 1) {
        goto LABEL_39;
      }
      CFURLRef v18 = *(const __CFURL **)(v17 + 2104);
      if (!v18 || !*(void *)(v17 + 2088)) {
        goto LABEL_39;
      }
      uint64_t v19 = *(void *)(v17 + 2112);
      if (v19)
      {
        if (FigSetNameForAssetAtURL(v18, v19)) {
          goto LABEL_39;
        }
        uint64_t v20 = *(const void **)(v17 + 2112);
        if (v20)
        {
          CFRelease(v20);
          *(void *)(v17 + 2112) = 0;
        }
      }
      CFDataRef v21 = *(const __CFData **)(v17 + 2120);
      if (!v21)
      {
LABEL_32:
        if (*(void *)(v17 + 2088))
        {
          CFAllocatorRef v23 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
          CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
          CFDateRef v25 = CFDateCreate(v23, Current);
          if (v25)
          {
            CFDateRef v26 = v25;
            if (!FigAssetDownloadStorageManagementSetContentTypeForAssetAtURL(*(const __CFURL **)(v17 + 2104), *(const void **)(v17 + 2088), @"CacheManagementContentType_DownloadedAsset")&& !FigAssetDownloadStorageManagementSetDownloadStartDateForAssetAtURL(*(const __CFURL **)(v17 + 2104), *(const void **)(v17 + 2088), (uint64_t)v26))
            {
              *(unsigned char *)(v17 + 2129) = 0;
            }
            CFRelease(v26);
          }
          else
          {
            FigSignalErrorAt();
          }
        }
        else
        {
          *(unsigned char *)(v17 + 2129) = 0;
        }
        goto LABEL_39;
      }
      if (!FigSetImageDataForAssetAtURL(*(const __CFURL **)(v17 + 2104), v21))
      {
        uint64_t v22 = *(const void **)(v17 + 2120);
        if (v22)
        {
          CFRelease(v22);
          *(void *)(v17 + 2120) = 0;
        }
        goto LABEL_32;
      }
LABEL_39:
      MEMORY[0x19970E930](*(void *)(v17 + 2096));
      if (*(void *)(DerivedStorage + 1336)) {
        return 1;
      }
      else {
        return v15;
      }
    }
  }
  uint64_t v7 = (const void **)(DerivedStorage + 1336);
  uint64_t v8 = *(const void **)(DerivedStorage + 1336);
  if (v8) {
    goto LABEL_19;
  }
  if (*(unsigned char *)(DerivedStorage + 137))
  {
    if (*(void *)(DerivedStorage + 128))
    {
      CMByteStreamGetCMBaseObject();
      FigCRABSGetClassID();
      if (CMBaseObjectIsMemberOfClass())
      {
        uint64_t v9 = FigAssetGetCMBaseObject(*(void *)(DerivedStorage + 1216));
        uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v10) {
          uint64_t v11 = v10;
        }
        else {
          uint64_t v11 = 0;
        }
        uint64_t v14 = *(void (**)(uint64_t, __CFString *, void, uint64_t))(v11 + 48);
        if (v14) {
          v14(v9, @"assetProperty_OriginalReadAheadAssertion", 0, DerivedStorage + 1336);
        }
        *(unsigned char *)(DerivedStorage + 137) = 0;
      }
    }
  }
  uint64_t v8 = *v7;
  if (*v7)
  {
LABEL_19:
    CFRelease(v8);
    *uint64_t v7 = 0;
  }
  unsigned int v15 = 0;
  uint64_t result = 0;
  if (a2) {
    goto LABEL_21;
  }
  return result;
}

void itemfig_DeferredPostNotificationOnDispatchQueue(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, const void *a5)
{
  if (!*(unsigned char *)CMBaseObjectGetDerivedStorage())
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
  }
  CFRelease(a2);
  if (a5)
  {
    CFRelease(a5);
  }
}

void itemfig_updateHasEnabledVideo()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  CMBaseObjectGetDerivedStorage();
  if (v1)
  {
    int v2 = *(unsigned __int8 *)(DerivedStorage + 2018);
    int v3 = *(_DWORD *)(DerivedStorage + 1000);
    *(unsigned char *)(DerivedStorage + 2018) = v3 != 0;
    if (v3)
    {
      int v4 = 1;
    }
    else
    {
      int v4 = *(void *)(DerivedStorage + 656) != 0;
      *(unsigned char *)(DerivedStorage + 2018) = v4;
    }
    if (v2 != v4)
    {
      CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      uint64_t v6 = Mutable;
      uint64_t v7 = (const void **)MEMORY[0x1E4F1CFD0];
      if (!*(unsigned char *)(DerivedStorage + 2018)) {
        uint64_t v7 = (const void **)MEMORY[0x1E4F1CFC8];
      }
      CFDictionarySetValue(Mutable, @"HasEnabledVideo", *v7);
      CMNotificationCenterGetDefaultLocalCenter();
      FigDispatchAsyncPostNotification();
      if (v6) {
        CFRelease(v6);
      }
    }
    if (!*(unsigned char *)(DerivedStorage + 2019) && *(unsigned char *)(DerivedStorage + 2018))
    {
      *(unsigned char *)(DerivedStorage + 2019) = 1;
      CMNotificationCenterGetDefaultLocalCenter();
      FigDispatchAsyncPostNotification();
    }
    CFRelease(v1);
  }
}

void itemfig_updateListenersForVideoTrack(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v14 = 0;
  CFTypeRef cf = 0;
  uint64_t v4 = *(void *)(DerivedStorage + 968);
  if (!v4) {
    goto LABEL_16;
  }
  uint64_t v5 = DerivedStorage;
  uint64_t v6 = *(unsigned int *)(DerivedStorage + 1004);
  if (v6)
  {
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t v9 = *(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *, void))(v8 + 56);
    if (!v9 || v9(v4, v6, &cf, 0)) {
      goto LABEL_16;
    }
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    *(_DWORD *)(v5 + 1004) = 0;
  }
  if (a2)
  {
    uint64_t v10 = *(void *)(v5 + 968);
    uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v12 = v11 ? v11 : 0;
    uint64_t v13 = *(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *, void))(v12 + 56);
    if (v13)
    {
      if (!v13(v10, a2, &v14, 0))
      {
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterAddWeakListener();
        *(_DWORD *)(v5 + 1004) = a2;
      }
    }
  }
LABEL_16:
  if (cf) {
    CFRelease(cf);
  }
  if (v14) {
    CFRelease(v14);
  }
}

void itemfig_hintTrackIfPreload(uint64_t a1, uint64_t a2)
{
  v26[22] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v25 = 0;
  v26[0] = 0;
  CFTypeRef v24 = 0;
  CFTypeRef cf = 0;
  if (*(void *)(DerivedStorage + 128))
  {
    if (*(void *)(DerivedStorage + 968))
    {
      CMByteStreamGetCMBaseObject();
      FigCRABSGetClassID();
      if (CMBaseObjectIsMemberOfClass())
      {
        uint64_t v4 = *(void *)(DerivedStorage + 968);
        uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v5) {
          uint64_t v6 = v5;
        }
        else {
          uint64_t v6 = 0;
        }
        int v23 = 0;
        int valuePtr = 0;
        uint64_t v7 = *(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *, int *))(v6 + 56);
        if (v7 && !v7(v4, a2, v26, &v23))
        {
          uint64_t FigBaseObject = FigTrackReaderGetFigBaseObject(v26[0]);
          uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
          uint64_t v10 = v9 ? v9 : 0;
          uint64_t v11 = *(unsigned int (**)(uint64_t, __CFString *, void, CFTypeRef *))(v10 + 48);
          if (v11)
          {
            if (!v11(FigBaseObject, @"TrackQTLoadSettings", *MEMORY[0x1E4F1CF80], &cf))
            {
              if (cf)
              {
                CFTypeID TypeID = CFDictionaryGetTypeID();
                if (TypeID == CFGetTypeID(cf))
                {
                  CFNumberRef Value = CFDictionaryGetValue((CFDictionaryRef)cf, @"PreloadFlags");
                  if (Value)
                  {
                    CFTypeRef v14 = Value;
                    CFTypeID v15 = CFNumberGetTypeID();
                    if (v15 == CFGetTypeID(v14)
                      && CFNumberGetValue((CFNumberRef)v14, kCFNumberSInt32Type, &valuePtr)
                      && (valuePtr & 3) != 0)
                    {
                      uint64_t v19 = 0;
                      uint64_t v20 = 0;
                      uint64_t v17 = 0;
                      uint64_t v18 = 0;
                      if (!FigTrackReaderCopySampleCursorService((uint64_t)v26[0], (uint64_t)&v25)
                        && !FigSampleCursorServiceCreateCursorAtFirstSampleInDecodeOrder((uint64_t)v25, (uint64_t)&v24)&& !FigSampleCursorCopySampleLocation((uint64_t)v24, (uint64_t)&v19, 0))
                      {
                        if (v24)
                        {
                          CFRelease(v24);
                          CFTypeRef v24 = 0;
                        }
                        if (!FigSampleCursorServiceCreateCursorAtLastSampleInDecodeOrder((uint64_t)v25, (uint64_t)&v24)&& !FigSampleCursorCopySampleLocation((uint64_t)v24, (uint64_t)&v18, (uint64_t)&v17))
                        {
                          if ((unint64_t)(v18 - v19 + v17) > 0x80000)
                          {
                            os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                            fig_log_call_emit_and_clean_up_after_send_and_compose();
                          }
                          else
                          {
                            uint64_t v20 = v18 - v19 + v17;
                            FigCRABSHintActiveRanges(*(void *)(DerivedStorage + 128), 1, (uint64_t)&v19);
                          }
                        }
                      }
                      if (v24) {
                        CFRelease(v24);
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (v25) {
          CFRelease(v25);
        }
        if (cf) {
          CFRelease(cf);
        }
        if (v26[0]) {
          CFRelease(v26[0]);
        }
      }
    }
  }
}

uint64_t fp_getTrackIDMediaType(uint64_t a1, uint64_t a2)
{
  unsigned int v8 = 0;
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, void, unsigned int *))(v5 + 56);
  if (!v6) {
    return 0;
  }
  v6(a1, a2, 0, &v8);
  return v8;
}

void itemfig_TrackPropertiesChanged(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, const void *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  unsigned int v8 = *(const void **)(DerivedStorage + 8);
  uint64_t v9 = CMBaseObjectGetDerivedStorage();
  if (a5)
  {
    uint64_t v10 = v9;
    CFTypeID v11 = CFGetTypeID(a5);
    if (v11 == CFDictionaryGetTypeID())
    {
      uint64_t v12 = (const void *)*MEMORY[0x1E4F1CFD0];
      if (v12 == CFDictionaryGetValue((CFDictionaryRef)a5, @"TrackMatrix"))
      {
        MEMORY[0x19970E910](*(void *)(v10 + 224));
        playerfig_updateVideoLayerSize(v8, 0);
        MEMORY[0x19970E930](*(void *)(v10 + 224));
        if (*(unsigned char *)(DerivedStorage + 1200))
        {
          itemfig_GetDimensions(a2, &v21, &v20);
          NotificationPayloadForProperties = playerfig_createNotificationPayloadForProperties(v8, (uint64_t)a2, v13, v14, v15, v16, v17, v18, @"CurrentDimensions", 0);
          CMNotificationCenterGetDefaultLocalCenter();
          FigDispatchAsyncPostNotification();
          if (NotificationPayloadForProperties) {
            CFRelease(NotificationPayloadForProperties);
          }
        }
      }
    }
  }
}

uint64_t itemfig_getVideoMatrixRotationAngleAndFlips(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  uint64_t v12 = 0;
  uint64_t FigBaseObject = FigPlaybackItemGetFigBaseObject(a1);
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  unsigned int v8 = *(void (**)(uint64_t, __CFString *, void, const void **))(v7 + 48);
  if (!v8) {
    return 0;
  }
  v8(FigBaseObject, @"VideoTrackMatrix", *MEMORY[0x1E4F1CF80], &v12);
  if (!v12) {
    return 0;
  }
  FigGetCGAffineTransformFrom3x3MatrixArray(v12, (uint64_t)v11);
  uint64_t RotationAngleAndFlipsFromCGAffineTransform = FigGetRotationAngleAndFlipsFromCGAffineTransform(v11, a2, a3);
  CFRelease(v12);
  return RotationAngleAndFlipsFromCGAffineTransform;
}

BOOL itemfig_IsThereMediaTrack(BOOL result, uint64_t a2)
{
  int v7 = 0;
  if (result)
  {
    uint64_t v2 = *(void *)(result + 968);
    if (v2
      && ((v4 = *(void *)(CMBaseObjectGetVTable() + 16)) == 0 ? (uint64_t v5 = 0) : (uint64_t v5 = v4),
          (uint64_t v6 = *(void (**)(uint64_t, void, uint64_t, void, int *))(v5 + 64)) != 0))
    {
      v6(v2, 0, a2, 0, &v7);
      return v7 != 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t FigTrackReaderCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t FigBaseObject = FigTrackReaderGetFigBaseObject();
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (!v10) {
    return 4294954514;
  }

  return v10(FigBaseObject, a2, a3, a4);
}

uint64_t FigTrackReaderCopySampleCursorService(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 32);
  if (!v6) {
    return 4294954514;
  }

  return v6(a1, a2);
}

uint64_t FigSampleCursorServiceCreateCursorAtFirstSampleInDecodeOrder(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 24);
  if (!v6) {
    return 4294954514;
  }

  return v6(a1, a2);
}

uint64_t FigSampleCursorCopySampleLocation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, void))(v7 + 144);
  if (!v8) {
    return 4294954514;
  }

  return v8(a1, a2, a3, 0, 0);
}

uint64_t FigSampleCursorServiceCreateCursorAtLastSampleInDecodeOrder(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 32);
  if (!v6) {
    return 4294954514;
  }

  return v6(a1, a2);
}

uint64_t FigFormatReaderCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t FigBaseObject = FigFormatReaderGetFigBaseObject(a1);
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (!v10) {
    return 4294954514;
  }

  return v10(FigBaseObject, a2, a3, a4);
}

void itemfig_transferPendingTrackProperties(unsigned int a1, CFDictionaryRef theDict, uint64_t a3)
{
  v3[0] = a3;
  v3[1] = a1;
  CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)itemfig_transferPendingTrackProperty, v3);
}

uint64_t itemfig_transferPendingTrackProperty(const void *a1, const void *a2, uint64_t a3)
{
  return itemfig_setTrackPropertyInternal(*(void **)a3, *(unsigned int *)(a3 + 8), a1, a2, 0);
}

uint64_t itemfig_setTrackPropertyInternal(void *a1, uint64_t a2, const void *a3, const void *a4, int a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v82 = 0;
  uint64_t v11 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v11 && !*(unsigned char *)DerivedStorage)
  {
    int v13 = (const void *)v11;
    uint64_t TrackStorage = itemfig_getTrackStorage((uint64_t)a1, a2, &v82);
    if (TrackStorage)
    {
      UpdatedExtractionTable = (const void *)TrackStorage;
      goto LABEL_206;
    }
    uint64_t v15 = CMBaseObjectGetDerivedStorage();
    uint64_t v16 = v15;
    if (a5)
    {
      MEMORY[0x19970E290](*(void *)(v15 + 496));
      int v17 = 1;
    }
    else
    {
      int v17 = 0;
    }
    if (CFEqual(a3, @"AudioCurves"))
    {
      uint64_t v18 = v82;
      if (*(_DWORD *)(v82 + 4) == 1936684398 && fp_isValidAudioCurves(a4))
      {
        if (a4)
        {
          LOBYTE(valuePtr) = 0;
          LOBYTE(v83) = 0;
          fp_checkForCinematicAudioParametersInAudioCurves((uint64_t)a4, 0, (BOOL *)&valuePtr, (BOOL *)&v83);
          *(unsigned char *)(v18 + 161) = valuePtr;
          *(unsigned char *)(v18 + 162) = v83;
          uint64_t v19 = *(const void **)(v18 + 80);
          *(void *)(v18 + 80) = a4;
          CFRetain(a4);
          if (!v19)
          {
LABEL_16:
            itemfig_applyTrackAudioCurvesToTrack(v18);
LABEL_17:
            int v26 = 0;
            goto LABEL_18;
          }
        }
        else
        {
          *(_WORD *)(v18 + 161) = 0;
          uint64_t v19 = *(const void **)(v18 + 80);
          *(void *)(v18 + 80) = 0;
          if (!v19) {
            goto LABEL_16;
          }
        }
        CFRelease(v19);
        goto LABEL_16;
      }
      goto LABEL_199;
    }
    if (CFEqual(a3, @"AudioProcessingUnits"))
    {
      uint64_t v28 = v82;
      if (*(_DWORD *)(v82 + 4) == 1936684398)
      {
        if (!a4 || (CFTypeID v29 = CFGetTypeID(a4), v29 == CFArrayGetTypeID()))
        {
          if (!FPSupport_AudioProcessingUnitsConfigurationsAreDifferent()) {
            goto LABEL_17;
          }
          uint64_t v30 = *(const void **)(v28 + 96);
          *(void *)(v28 + 96) = a4;
          if (a4) {
            CFRetain(a4);
          }
          if (v30) {
            CFRelease(v30);
          }
          if (!*(void *)(DerivedStorage + 352)) {
            goto LABEL_17;
          }
          if (a5) {
            MEMORY[0x19970E2B0](*(void *)(v16 + 496));
          }
          CFTypeID v31 = *(const void **)(DerivedStorage + 8);
          long long valuePtr = *MEMORY[0x1E4F1F9F8];
          uint64_t v86 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
          long long v83 = valuePtr;
          uint64_t v84 = v86;
          goto LABEL_33;
        }
      }
      goto LABEL_199;
    }
    if (CFEqual(a3, @"Enabled"))
    {
      CFTypeID v32 = CFGetTypeID(a4);
      if (v32 != CFBooleanGetTypeID()) {
        goto LABEL_199;
      }
      uint64_t v33 = v82;
      int v34 = *(unsigned __int8 *)(v82 + 8);
      LOBYTE(cf) = 0;
      Boolean Value = CFBooleanGetValue((CFBooleanRef)a4);
      itemfig_setTrackEnabled((uint64_t)a1, v33, Value);
      itemfig_updateDefaultTrackID((uint64_t)a1, a2, (char *)&cf);
      if (v34 == *(unsigned __int8 *)(v33 + 8) && !(_BYTE)cf) {
        goto LABEL_17;
      }
      itemfig_bumpBossControlTokenAndMarkBossAsNonIdle((uint64_t)a1, 0);
      if (!*(void *)(DerivedStorage + 352)) {
        goto LABEL_17;
      }
      if (a5)
      {
        if (*(void **)(v16 + 512) == a1
          && !itemfig_rebuildRenderPipelinesAndBossGuts(a1, 0, 0, 1, 0, 0, 1, 0)
          && !itemfig_rebuildRenderPipelinesAndBossGuts(a1, 1, 1, 1, 0, 0, 0, 0))
        {
          playerfig_scheduleVideoTargetImageQueueConfigurationTransitionForItem(v13, *(const __CFString **)(v16 + 512), MEMORY[0x1E4F1F9F8]);
          MEMORY[0x19970E2B0](*(void *)(v16 + 496));
          goto LABEL_45;
        }
        MEMORY[0x19970E2B0](*(void *)(v16 + 496));
      }
      long long valuePtr = *MEMORY[0x1E4F1F9F8];
      uint64_t v86 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
      long long v83 = valuePtr;
      uint64_t v84 = v86;
      playerfig_stopResetDisturbReprepareAndResumeWithTransaction(v13, (uint64_t)&valuePtr, (uint64_t)&v83, 0);
LABEL_45:
      int v17 = 0;
      int v26 = 1;
LABEL_18:
      UpdatedExtractionTable = 0;
      if (!v17) {
        goto LABEL_203;
      }
      goto LABEL_202;
    }
    if (CFEqual(a3, @"VideoFieldMode"))
    {
      uint64_t v36 = v82;
      if (*(_DWORD *)(v82 + 4) != 1986618469) {
        goto LABEL_199;
      }
      if (a4)
      {
        CFTypeID TypeID = CFStringGetTypeID();
        if (TypeID != CFGetTypeID(a4)) {
          goto LABEL_199;
        }
      }
      if (FigCFEqual()) {
        goto LABEL_17;
      }
      uint64_t v38 = *(const void **)(v36 + 24);
      *(void *)(v36 + 24) = a4;
      if (a4) {
        CFRetain(a4);
      }
      if (v38) {
        CFRelease(v38);
      }
      if (!*(void *)(DerivedStorage + 352)) {
        goto LABEL_17;
      }
      if (a5) {
        MEMORY[0x19970E2B0](*(void *)(v16 + 496));
      }
      long long valuePtr = *MEMORY[0x1E4F1F9F8];
      uint64_t v86 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
      long long v83 = valuePtr;
      uint64_t v84 = v86;
LABEL_97:
      CFTypeID v31 = v13;
LABEL_33:
      playerfig_stopResetDisturbReprepareAndResumeWithTransaction(v31, (uint64_t)&valuePtr, (uint64_t)&v83, 0);
      UpdatedExtractionTable = 0;
LABEL_206:
      CFRelease(v13);
      return (uint64_t)UpdatedExtractionTable;
    }
    if (CFEqual(a3, @"AudioProcessingTap"))
    {
      uint64_t v39 = v82;
      if (*(_DWORD *)(v82 + 4) != 1936684398) {
        goto LABEL_199;
      }
      if (a4)
      {
        CFTypeID v40 = MTAudioProcessingTapGetTypeID();
        if (v40 != CFGetTypeID(a4)) {
          goto LABEL_199;
        }
        UpdatedExtractionTable = *(const void **)(v39 + 88);
        if (UpdatedExtractionTable == a4) {
          goto LABEL_17;
        }
        *(void *)(v39 + 88) = a4;
        CFRetain(a4);
        if (!UpdatedExtractionTable) {
          goto LABEL_93;
        }
      }
      else
      {
        UpdatedExtractionTable = *(const void **)(v82 + 88);
        if (!UpdatedExtractionTable) {
          goto LABEL_201;
        }
        *(void *)(v82 + 88) = 0;
      }
      CFRelease(UpdatedExtractionTable);
LABEL_93:
      if (!*(void *)(DerivedStorage + 352)) {
        goto LABEL_17;
      }
      if (a5) {
        MEMORY[0x19970E2B0](*(void *)(v16 + 496));
      }
      long long valuePtr = *MEMORY[0x1E4F1F9F8];
      uint64_t v86 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
      long long v83 = valuePtr;
      uint64_t v84 = v86;
      goto LABEL_97;
    }
    if (CFEqual(a3, @"LoudnessInfo"))
    {
      uint64_t v41 = v82;
      if (*(_DWORD *)(v82 + 4) == 1936684398)
      {
        if (a4)
        {
          CFTypeID v42 = CFGetTypeID(a4);
          if (v42 != CFDictionaryGetTypeID()) {
            goto LABEL_199;
          }
          uint64_t v43 = *(const void **)(v41 + 104);
          *(void *)(v41 + 104) = a4;
          CFRetain(a4);
        }
        else
        {
          uint64_t v43 = *(const void **)(v82 + 104);
          *(void *)(v82 + 104) = 0;
        }
        if (v43) {
          CFRelease(v43);
        }
        itemfig_applyLoudnessInfo(a1, a2, 1, 0);
        goto LABEL_17;
      }
LABEL_199:
      uint64_t v53 = FigSignalErrorAt();
      goto LABEL_200;
    }
    if (CFEqual(a3, @"TimePitchAlgorithm"))
    {
      uint64_t v44 = v82;
      if (*(_DWORD *)(v82 + 4) != 1936684398) {
        goto LABEL_199;
      }
      if (a4)
      {
        CFTypeID v45 = CFStringGetTypeID();
        if (v45 != CFGetTypeID(a4)) {
          goto LABEL_199;
        }
      }
      if (FigCFEqual()) {
        goto LABEL_17;
      }
      CFTypeRef v46 = @"TimeDomain";
      if (FigCFEqual()
        || (CFTypeRef v46 = @"Spectral", FigCFEqual())
        || (CFTypeRef v46 = @"Varispeed", FigCFEqual())
        || (CFTypeRef v46 = @"LowQualityZeroLatency", FigCFEqual()))
      {
        unsigned int v47 = *(const void **)(v44 + 112);
        *(void *)(v44 + 112) = v46;
        if (v46) {
          CFRetain(v46);
        }
        if (!v47) {
          goto LABEL_86;
        }
      }
      else
      {
        if (a4)
        {
          uint64_t v53 = FigSignalErrorAt();
          if (v53) {
            goto LABEL_200;
          }
        }
        unsigned int v47 = *(const void **)(v44 + 112);
        *(void *)(v44 + 112) = 0;
        if (!v47) {
          goto LABEL_86;
        }
      }
      CFRelease(v47);
LABEL_86:
      if (!*(void *)(DerivedStorage + 352)) {
        goto LABEL_17;
      }
      if (a5) {
        MEMORY[0x19970E2B0](*(void *)(v16 + 496));
      }
      long long valuePtr = *MEMORY[0x1E4F1F9F8];
      uint64_t v86 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
      long long v83 = valuePtr;
      uint64_t v84 = v86;
      goto LABEL_97;
    }
    if (CFEqual(a3, @"SweepFilterConfiguration"))
    {
      LOBYTE(cf) = 0;
      UpdatedExtractionTable = (const void *)itemfig_setSweepFilterConfgurationPropertyInternal((uint64_t)a1, a2, a4, &cf);
      if (!UpdatedExtractionTable && (_BYTE)cf && *(void *)(DerivedStorage + 352))
      {
        if (a5) {
          MEMORY[0x19970E2B0](*(void *)(v16 + 496));
        }
        long long valuePtr = *MEMORY[0x1E4F1F9F8];
        uint64_t v86 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
        long long v83 = valuePtr;
        uint64_t v84 = v86;
        goto LABEL_106;
      }
      goto LABEL_201;
    }
    if (CFEqual(a3, @"SweepFilterSweepValue"))
    {
      uint64_t v48 = v82;
      if (*(_DWORD *)(v82 + 4) != 1936684398) {
        goto LABEL_199;
      }
      if (!a4) {
        goto LABEL_199;
      }
      CFTypeID v49 = CFGetTypeID(a4);
      if (v49 != CFNumberGetTypeID()) {
        goto LABEL_199;
      }
      LODWORD(valuePtr) = 0;
      float v50 = *(float *)(v48 + 136);
      CFNumberGetValue((CFNumberRef)a4, kCFNumberFloat32Type, &valuePtr);
      int v51 = valuePtr;
      if (*(float *)&valuePtr == v50 || (uint64_t v52 = *(void *)(v48 + 16)) == 0)
      {
LABEL_122:
        UpdatedExtractionTable = 0;
        *(_DWORD *)(v48 + 136) = v51;
        goto LABEL_201;
      }
      uint64_t v53 = FigRenderPipelineSetProperty_0(v52, @"SweepFilterSweepValue", (uint64_t)a4);
      if (!v53)
      {
        int v51 = valuePtr;
        goto LABEL_122;
      }
    }
    else
    {
      if (CFEqual(a3, @"CinematicAudioParameters"))
      {
        uint64_t v54 = v82;
        if (*(_DWORD *)(v82 + 4) != 1936684398) {
          goto LABEL_199;
        }
        if (a4)
        {
          CFTypeID v55 = CFGetTypeID(a4);
          if (v55 != CFDataGetTypeID()) {
            goto LABEL_199;
          }
        }
        if (FigCFEqual()) {
          goto LABEL_17;
        }
        uint64_t v56 = *(const void **)(v54 + 152);
        *(void *)(v54 + 152) = a4;
        if (a4) {
          CFRetain(a4);
        }
        if (v56) {
          CFRelease(v56);
        }
        *(unsigned char *)(v54 + 160) = a4 != 0;
        uint64_t v57 = *(void *)(v54 + 16);
        if (v57)
        {
          if ((a4 == 0) != (v56 == 0))
          {
            long long valuePtr = *MEMORY[0x1E4F1F9F8];
            uint64_t v86 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
            long long v83 = valuePtr;
            uint64_t v84 = v86;
            playerfig_stopResetDisturbReprepareAndResumeWithTransaction(v13, (uint64_t)&valuePtr, (uint64_t)&v83, 0);
          }
          else
          {
            uint64_t v53 = FigRenderPipelineSetProperty_0(v57, @"CinematicAudioParameters", (uint64_t)a4);
            if (v53) {
              goto LABEL_200;
            }
          }
        }
        playerfig_dispatchAsyncAutoSelectionCriteriaChangedForItem((uint64_t)v13, a1);
        goto LABEL_17;
      }
      if (CFEqual(a3, @"VideoEnhancementFilterOptions"))
      {
        uint64_t v58 = v82;
        if (*(_DWORD *)(v82 + 4) == 1986618469)
        {
          if (a4)
          {
            CFTypeID v59 = CFGetTypeID(a4);
            if (v59 != CFDictionaryGetTypeID()) {
              goto LABEL_199;
            }
            uint64_t v60 = *(const void **)(v58 + 56);
            *(void *)(v58 + 56) = a4;
            CFRetain(a4);
          }
          else
          {
            uint64_t v60 = *(const void **)(v82 + 56);
            *(void *)(v82 + 56) = 0;
          }
          if (v60) {
            CFRelease(v60);
          }
          itemfig_applyEnhancementFilterOptions((uint64_t)a1, a2);
          goto LABEL_17;
        }
        goto LABEL_199;
      }
      if (CFEqual(a3, @"DisableColorMatching"))
      {
        uint64_t v61 = v82;
        if (*(_DWORD *)(v82 + 4) == 1986618469)
        {
          if (a4)
          {
            CFTypeID v62 = CFGetTypeID(a4);
            if (v62 != CFBooleanGetTypeID()) {
              goto LABEL_199;
            }
            unsigned int v63 = *(const void **)(v61 + 64);
            *(void *)(v61 + 64) = a4;
            CFRetain(a4);
          }
          else
          {
            unsigned int v63 = *(const void **)(v82 + 64);
            *(void *)(v82 + 64) = 0;
          }
          if (v63) {
            CFRelease(v63);
          }
          itemfig_applyDisableColorMatching((uint64_t)a1, a2);
          goto LABEL_17;
        }
        goto LABEL_199;
      }
      if (CFEqual(a3, @"ActiveHapticChannelIndex"))
      {
        uint64_t v64 = v82;
        if (*(_DWORD *)(v82 + 4) != 1751216244) {
          goto LABEL_199;
        }
        if (!a4) {
          goto LABEL_199;
        }
        CFTypeID v65 = CFGetTypeID(a4);
        if (v65 != CFNumberGetTypeID()) {
          goto LABEL_199;
        }
        CFTypeID v66 = *(const void **)(v64 + 176);
        *(void *)(v64 + 176) = a4;
        CFRetain(a4);
        if (v66) {
          CFRelease(v66);
        }
        uint64_t v67 = *(void *)(v64 + 16);
        if (!v67) {
          goto LABEL_17;
        }
        BOOL v68 = kFigRenderPipelineProperty_ActiveHapticChannelIndex;
      }
      else if (CFEqual(a3, @"Volume"))
      {
        uint64_t v69 = v82;
        if (*(_DWORD *)(v82 + 4) != 1751216244) {
          goto LABEL_199;
        }
        if (!a4) {
          goto LABEL_199;
        }
        CFTypeID v70 = CFGetTypeID(a4);
        if (v70 != CFNumberGetTypeID()) {
          goto LABEL_199;
        }
        unsigned int v71 = *(const void **)(v69 + 184);
        *(void *)(v69 + 184) = a4;
        CFRetain(a4);
        if (v71) {
          CFRelease(v71);
        }
        uint64_t v67 = *(void *)(v69 + 16);
        if (!v67) {
          goto LABEL_17;
        }
        BOOL v68 = kFigAudioRenderPipelineProperty_SoftwareVolume1;
      }
      else
      {
        if (!CFEqual(a3, @"Muted"))
        {
          if (!CFEqual(a3, @"ExtractionIDArray"))
          {
            if (CFEqual(a3, @"ExtractionIDToPipelineLatencyDict"))
            {
              if (a4)
              {
                CFTypeID v79 = CFGetTypeID(a4);
                if (v79 == CFDictionaryGetTypeID())
                {
                  uint64_t v80 = v82;
                  if (!*(void *)(v82 + 296)) {
                    *(void *)(v80 + 296) = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                  }
                  FigCFDictionaryAddEntriesToDictionaryWithRecursion();
                  goto LABEL_17;
                }
              }
            }
            goto LABEL_199;
          }
          if (a4)
          {
            CFTypeID v74 = CFGetTypeID(a4);
            if (v74 != CFArrayGetTypeID()) {
              goto LABEL_199;
            }
          }
          CFTypeRef cf = 0;
          uint64_t v75 = v82;
          UpdatedExtractionTable = (const void *)itemfig_createUpdatedExtractionTable((uint64_t)a1, a2, *(void *)(v82 + 168), (uint64_t)a4, (const __CFArray **)&cf);
          if (!UpdatedExtractionTable)
          {
            CFIndex v76 = *(const void **)(v75 + 168);
            CFTypeRef v77 = cf;
            *(void *)(v75 + 168) = cf;
            if (v77) {
              CFRetain(v77);
            }
            if (v76) {
              CFRelease(v76);
            }
            if (v77) {
              CFRelease(v77);
            }
            if (*(void *)(DerivedStorage + 352))
            {
              if (a5)
              {
                if (*(void **)(v16 + 512) == a1
                  && !itemfig_rebuildRenderPipelinesAndBossGuts(a1, 0, 0, 1, 0, 0, 1, 0)
                  && !itemfig_rebuildRenderPipelinesAndBossGuts(a1, 1, 1, 1, 0, 0, 0, 0))
                {
                  playerfig_scheduleVideoTargetImageQueueConfigurationTransitionForItem(v13, *(const __CFString **)(v16 + 512), MEMORY[0x1E4F1F9F8]);
                  MEMORY[0x19970E2B0](*(void *)(v16 + 496));
                  goto LABEL_107;
                }
                MEMORY[0x19970E2B0](*(void *)(v16 + 496));
              }
              long long valuePtr = *MEMORY[0x1E4F1F9F8];
              uint64_t v86 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
              long long v83 = valuePtr;
              uint64_t v84 = v86;
LABEL_106:
              playerfig_stopResetDisturbReprepareAndResumeWithTransaction(v13, (uint64_t)&valuePtr, (uint64_t)&v83, 0);
LABEL_107:
              int v17 = 0;
            }
          }
LABEL_201:
          int v26 = 0;
          if (!v17)
          {
LABEL_203:
            if (v26)
            {
              NotificationPayloadForProperties = playerfig_createNotificationPayloadForProperties(v13, (uint64_t)a1, v20, v21, v22, v23, v24, v25, @"SelectedMediaArray", 0);
              CMNotificationCenterGetDefaultLocalCenter();
              CMNotificationCenterPostNotification();
              if (NotificationPayloadForProperties) {
                CFRelease(NotificationPayloadForProperties);
              }
            }
            goto LABEL_206;
          }
LABEL_202:
          MEMORY[0x19970E2B0](*(void *)(v16 + 496));
          goto LABEL_203;
        }
        uint64_t v72 = v82;
        if (*(_DWORD *)(v82 + 4) != 1751216244) {
          goto LABEL_199;
        }
        if (!a4) {
          goto LABEL_199;
        }
        CFTypeID v73 = CFGetTypeID(a4);
        if (v73 != CFBooleanGetTypeID()) {
          goto LABEL_199;
        }
        *(unsigned char *)(v72 + 9) = CFBooleanGetValue((CFBooleanRef)a4);
        uint64_t v67 = *(void *)(v72 + 16);
        if (!v67) {
          goto LABEL_17;
        }
        BOOL v68 = kFigRenderPipelineProperty_Muted;
      }
      uint64_t v53 = FigRenderPipelineSetProperty_0(v67, (uint64_t)*v68, (uint64_t)a4);
    }
LABEL_200:
    UpdatedExtractionTable = (const void *)v53;
    goto LABEL_201;
  }

  return FigSignalErrorAt();
}

uint64_t fp_isValidAudioCurves(const void *a1)
{
  if (!a1) {
    return 1;
  }
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (TypeID != CFGetTypeID(a1)) {
    return 0;
  }
  Boolean Value = CFDictionaryGetValue((CFDictionaryRef)a1, @"AudioCurve_Volume");
  CMTime v20 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA08];
  if (Value)
  {
    uint64_t v4 = Value;
    CFTypeID v5 = CFArrayGetTypeID();
    if (v5 != CFGetTypeID(v4)) {
      return 0;
    }
    CFIndex Count = CFArrayGetCount((CFArrayRef)v4);
    if (0xAAAAAAAAAAAAAAABLL * Count + 0x2AAAAAAAAAAAAAAALL > 0x5555555555555554) {
      return 0;
    }
    CFIndex v8 = Count;
    if (Count >= 1)
    {
      CFIndex v9 = 0;
      while (1)
      {
        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)v4, v9);
        memset(&v19, 0, sizeof(v19));
        CMTimeMakeFromDictionary(&v19, ValueAtIndex);
        uint64_t v11 = CFArrayGetValueAtIndex((CFArrayRef)v4, v9 + 1);
        CFIndex v12 = v9 + 2;
        int v13 = CFArrayGetValueAtIndex((CFArrayRef)v4, v12);
        if ((v19.flags & 0x1D) != 1) {
          break;
        }
        int v14 = v13;
        CMTime time1 = v20;
        CMTime v17 = v19;
        if (CMTimeCompare(&time1, &v17) > 0) {
          break;
        }
        CMTime v20 = v19;
        CFTypeID v15 = CFNumberGetTypeID();
        if (v15 != CFGetTypeID(v11)) {
          break;
        }
        if (!v14) {
          break;
        }
        CFTypeID v16 = CFGetTypeID(v14);
        if (v16 != CFStringGetTypeID()) {
          break;
        }
        CFIndex v9 = v12 + 1;
        if (v9 >= v8) {
          return 1;
        }
      }
      return 0;
    }
  }
  return 1;
}

uint64_t fp_checkForCinematicAudioParametersInAudioCurves(uint64_t result, BOOL *a2, BOOL *a3, BOOL *a4)
{
  if (result)
  {
    BOOL v7 = FigCFDictionaryGetValue() != 0;
    uint64_t result = FigCFDictionaryGetValue();
    BOOL v8 = result != 0;
    if (!a2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  BOOL v7 = 0;
  BOOL v8 = 0;
  if (a2) {
LABEL_3:
  }
    *a2 = v7 || v8;
LABEL_4:
  if (a3) {
    *a3 = v7;
  }
  if (a4) {
    *a4 = v8;
  }
  return result;
}

uint64_t itemfig_applyTrackAudioCurvesToTrack(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 80);
    uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(result);
    uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v5) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = 0;
    }
    BOOL v7 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v6 + 56);
    if (v7)
    {
      return v7(FigBaseObject, @"AudioCurves", v3);
    }
    else
    {
      return 4294954514;
    }
  }
  return result;
}

uint64_t itemfig_setTrackEnabled(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(unsigned char *)(a2 + 8) = a3;
  uint64_t result = *(void *)(DerivedStorage + 352);
  if (result)
  {
    int v7 = *(_DWORD *)a2;
    return FigPlaybackBossSetTrackEnableForStepping(result, v7, a3);
  }
  return result;
}

uint64_t itemfig_updateDefaultTrackID(uint64_t a1, int a2, char *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  *a3 = 0;
  uint64_t v7 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v7) {
    return 0;
  }
  BOOL v8 = (const void *)v7;
  CFIndex v9 = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (*v9) {
    goto LABEL_35;
  }
  uint64_t v10 = v9;
  uint64_t TrackStorage = itemfig_getTrackStorage(a1, a2, &v23);
  if (TrackStorage) {
    goto LABEL_38;
  }
  uint64_t v12 = v23;
  int v13 = *(_DWORD *)(v23 + 4);
  if (v13 > 1936684397)
  {
    switch(v13)
    {
      case 1936684398:
        int v14 = (int *)(DerivedStorage + 996);
        int v15 = v10[120];
        break;
      case 1952807028:
        goto LABEL_13;
      case 1986618469:
        int v14 = (int *)(DerivedStorage + 1000);
        int v15 = v10[121];
        break;
      default:
        goto LABEL_33;
    }
    BOOL v16 = v15 == 0;
    goto LABEL_19;
  }
  switch(v13)
  {
    case 1668047728:
      int v14 = (int *)(DerivedStorage + 1008);
      goto LABEL_15;
    case 1751216244:
      BOOL v16 = 0;
      int v14 = (int *)(DerivedStorage + 1040);
      goto LABEL_19;
    case 1935832172:
LABEL_13:
      int v14 = (int *)(DerivedStorage + 1016);
LABEL_15:
      BOOL v16 = 1;
LABEL_19:
      int v17 = *v14;
      if (!*(unsigned char *)(v23 + 8))
      {
        if (v17 != a2)
        {
LABEL_32:
          int v13 = *(_DWORD *)(v12 + 4);
          break;
        }
        BOOL v18 = a2 == 0;
        a2 = 0;
LABEL_28:
        char v19 = !v18;
        *a3 = v19;
        *int v14 = a2;
        goto LABEL_32;
      }
      if (!v17 || v17 == a2)
      {
LABEL_25:
        BOOL v18 = *v14 == a2;
        goto LABEL_28;
      }
      uint64_t TrackStorage = itemfig_getTrackStorage(a1, v17, &v22);
      if (!TrackStorage)
      {
        if (v16) {
          itemfig_setTrackEnabled(a1, v22, 0);
        }
        goto LABEL_25;
      }
LABEL_38:
      uint64_t v20 = TrackStorage;
      goto LABEL_36;
  }
LABEL_33:
  if (v13 == 1986618469)
  {
    itemfig_updateHasEnabledVideo();
    itemfig_updateListenersForVideoTrack(a1, *(unsigned int *)(DerivedStorage + 1000));
  }
LABEL_35:
  uint64_t v20 = 0;
LABEL_36:
  CFRelease(v8);
  return v20;
}

void itemfig_bumpBossControlTokenAndMarkBossAsNonIdle(uint64_t a1, int a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 504));
  *(unsigned char *)(DerivedStorage + 496) = 0;
  *(unsigned char *)(DerivedStorage + 994) = 0;
  uint64_t v4 = *(const void **)(DerivedStorage + 512);
  if (v4) {
    CFRelease(v4);
  }
  ++*(_DWORD *)(DerivedStorage + 520);
  *(void *)(DerivedStorage + 512) = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, (const void *)(DerivedStorage + 520));
  int v5 = *(_DWORD *)(DerivedStorage + 540);
  *(_DWORD *)(DerivedStorage + 540) = a2;
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 504));
  uint64_t v6 = FigCFWeakReferenceHolderCopyReferencedObject();
  uint64_t v7 = (const void *)v6;
  if (v6 && v5)
  {
    playerfig_postDeferredPrerollWasCancelledNotification(v6, v5);
  }
  else if (!v6)
  {
    return;
  }

  CFRelease(v7);
}

void itemfig_applyLoudnessInfo(const void *a1, uint64_t a2, int a3, int a4)
{
  v19[27] = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFIndex v9 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  uint64_t v10 = CMBaseObjectGetDerivedStorage();
  if (v9)
  {
    if (!*(unsigned char *)v10)
    {
      if (*(const void **)(v10 + 512) != a1 || !*(void *)(v10 + 560))
      {
        if (dword_1E9350BF0)
        {
LABEL_5:
          LODWORD(v19[0]) = 0;
          type[0] = OS_LOG_TYPE_DEFAULT;
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
LABEL_21:
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
LABEL_22:
        CFRelease(v9);
        return;
      }
      if (a3 && CFArrayGetValueAtIndex(*(CFArrayRef *)(v10 + 504), 0) != a1)
      {
        if (dword_1E9350BF0) {
          goto LABEL_5;
        }
        goto LABEL_22;
      }
      v19[0] = 0;
      if (a2 || (a2 = *(unsigned int *)(DerivedStorage + 996), a2))
      {
        itemfig_getTrackStorage((uint64_t)a1, a2, v19);
        uint64_t v12 = v19[0];
        if (v19[0] && *(void *)(v19[0] + 16))
        {
          *(void *)os_log_type_t type = 0;
          itemfig_copyCombinedLoudnessInfoDictionary((uint64_t)a1, a2, (__CFDictionary **)type);
          int v13 = *(const void **)type;
          if (*(void *)type)
          {
            int v14 = (const void *)FigCFCopyCompactDescription();
            if (a4 == 1)
            {
              if (dword_1E9350BF0)
              {
                int v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              fp_sendLoudnessInfoMarkerSampleBufferToAudioRenderPipeline(*(void *)(v12 + 16), v13);
            }
            else
            {
              if (dword_1E9350BF0)
              {
                int v17 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              FigRenderPipelineSetProperty_0(*(void *)(v12 + 16), @"LoudnessInfo", (uint64_t)v13);
            }
            CFRelease(v13);
            if (v14) {
              CFRelease(v14);
            }
          }
          goto LABEL_22;
        }
        if (dword_1E9350BF0)
        {
          *(_DWORD *)os_log_type_t type = 0;
          BOOL v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
          goto LABEL_21;
        }
        goto LABEL_22;
      }
    }
    FigSignalErrorAt();
    goto LABEL_22;
  }
}

uint64_t itemfig_setSweepFilterConfgurationPropertyInternal(uint64_t a1, int a2, const void *a3, unsigned char *a4)
{
  CMBaseObjectGetDerivedStorage();
  uint64_t v21 = 0;
  *a4 = 0;
  uint64_t TrackStorage = itemfig_getTrackStorage(a1, a2, &v21);
  if (TrackStorage) {
    return TrackStorage;
  }
  uint64_t v9 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v9)
  {
    uint64_t v10 = (const void *)v9;
    CMBaseObjectGetDerivedStorage();
    uint64_t v11 = v21;
    if (*(_DWORD *)(v21 + 4) == 1936684398)
    {
      if (a3)
      {
        CFTypeID v12 = CFGetTypeID(a3);
        if (v12 == CFDictionaryGetTypeID())
        {
          if (CFDictionaryContainsKey((CFDictionaryRef)a3, @"Enabled"))
          {
            CFBooleanRef Value = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)a3, @"Enabled");
            if (Value)
            {
              CFBooleanRef v14 = Value;
              CFTypeID v15 = CFGetTypeID(Value);
              if (v15 == CFBooleanGetTypeID())
              {
                if (!CFBooleanGetValue(v14))
                {
                  if (*(unsigned char *)(v11 + 120))
                  {
                    BOOL v18 = *(const void **)(v11 + 128);
                    *(void *)(v11 + 128) = a3;
                    CFRetain(a3);
                    if (v18) {
                      CFRelease(v18);
                    }
                    uint64_t v17 = 0;
                    *(unsigned char *)(v11 + 120) = 0;
                    goto LABEL_24;
                  }
LABEL_25:
                  uint64_t v17 = 0;
                  goto LABEL_29;
                }
                if (CFDictionaryContainsKey((CFDictionaryRef)a3, @"MinimumCutOffFrequency")
                  && CFDictionaryContainsKey((CFDictionaryRef)a3, @"MaximumCutOffFrequency")
                  && CFDictionaryContainsKey((CFDictionaryRef)a3, @"BypassThreshold"))
                {
                  if (!*(unsigned char *)(v11 + 120))
                  {
                    *(unsigned char *)(v11 + 120) = 1;
                    char v19 = *(const void **)(v11 + 128);
                    *(void *)(v11 + 128) = a3;
                    CFRetain(a3);
                    if (v19) {
                      CFRelease(v19);
                    }
                    uint64_t v17 = 0;
                    *a4 = 1;
                    goto LABEL_29;
                  }
                  CFDictionaryGetValue((CFDictionaryRef)a3, @"MinimumCutOffFrequency");
                  CFDictionaryGetValue(*(CFDictionaryRef *)(v11 + 128), @"MinimumCutOffFrequency");
                  if (!FigCFEqual()
                    || (CFDictionaryGetValue((CFDictionaryRef)a3, @"MaximumCutOffFrequency"),
                        CFDictionaryGetValue(*(CFDictionaryRef *)(v11 + 128), @"MaximumCutOffFrequency"),
                        !FigCFEqual())
                    || (CFDictionaryGetValue((CFDictionaryRef)a3, @"BypassThreshold"),
                        CFDictionaryGetValue(*(CFDictionaryRef *)(v11 + 128), @"BypassThreshold"),
                        !FigCFEqual()))
                  {
                    BOOL v16 = *(const void **)(v11 + 128);
                    *(void *)(v11 + 128) = a3;
                    CFRetain(a3);
                    if (v16) {
                      CFRelease(v16);
                    }
                    uint64_t v17 = 0;
LABEL_24:
                    *a4 = 1;
LABEL_29:
                    CFRelease(v10);
                    return v17;
                  }
                  goto LABEL_25;
                }
              }
            }
          }
        }
      }
    }
    uint64_t v17 = FigSignalErrorAt();
    goto LABEL_29;
  }

  return FigSignalErrorAt();
}

uint64_t FigRenderPipelineSetProperty_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(a1);
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  BOOL v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 56);
  if (!v8) {
    return 4294954514;
  }

  return v8(FigBaseObject, a2, a3);
}

void playerfig_dispatchAsyncAutoSelectionCriteriaChangedForItem(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2) {
    CFRetain(a2);
  }
  uint64_t v4 = *(NSObject **)(DerivedStorage + 96);

  dispatch_async_f(v4, a2, (dispatch_function_t)itemfig_autoSelectionCriteriaChangedForItemAsync);
}

uint64_t itemfig_applyEnhancementFilterOptions(uint64_t a1, int a2)
{
  uint64_t v17 = 0;
  uint64_t result = itemfig_getTrackStorage(a1, a2, &v17);
  if (!result)
  {
    uint64_t v3 = v17;
    if (v17)
    {
      uint64_t v4 = *(void *)(v17 + 16);
      if (v4)
      {
        uint64_t v5 = *(void *)(v17 + 56);
        uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(v4);
        uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v8 = v7 ? v7 : 0;
        uint64_t v9 = *(void (**)(uint64_t, __CFString *, uint64_t))(v8 + 56);
        if (v9) {
          v9(FigBaseObject, @"EnhancementFilterOptions", v5);
        }
      }
      uint64_t result = *(void *)(v3 + 248);
      if (result)
      {
        uint64_t v10 = *(void *)(v3 + 56);
        uint64_t v11 = FigRenderPipelineGetFigBaseObject(result);
        uint64_t VTable = CMBaseObjectGetVTable();
        uint64_t v14 = *(void *)(VTable + 8);
        uint64_t result = VTable + 8;
        uint64_t v13 = v14;
        uint64_t v15 = v14 ? v13 : 0;
        BOOL v16 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v15 + 56);
        if (v16)
        {
          return v16(v11, @"EnhancementFilterOptions", v10);
        }
      }
    }
  }
  return result;
}

uint64_t itemfig_applyDisableColorMatching(uint64_t a1, int a2)
{
  uint64_t v17 = 0;
  uint64_t result = itemfig_getTrackStorage(a1, a2, &v17);
  if (!result)
  {
    uint64_t v3 = v17;
    if (v17)
    {
      uint64_t v4 = *(void *)(v17 + 16);
      if (v4)
      {
        uint64_t v5 = *(void *)(v17 + 64);
        uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(v4);
        uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v8 = v7 ? v7 : 0;
        uint64_t v9 = *(void (**)(uint64_t, __CFString *, uint64_t))(v8 + 56);
        if (v9) {
          v9(FigBaseObject, @"DisableColorMatching", v5);
        }
      }
      uint64_t result = *(void *)(v3 + 248);
      if (result)
      {
        uint64_t v10 = *(void *)(v3 + 64);
        uint64_t v11 = FigRenderPipelineGetFigBaseObject(result);
        uint64_t VTable = CMBaseObjectGetVTable();
        uint64_t v14 = *(void *)(VTable + 8);
        uint64_t result = VTable + 8;
        uint64_t v13 = v14;
        uint64_t v15 = v14 ? v13 : 0;
        BOOL v16 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v15 + 56);
        if (v16)
        {
          return v16(v11, @"DisableColorMatching", v10);
        }
      }
    }
  }
  return result;
}

uint64_t itemfig_createUpdatedExtractionTable(uint64_t a1, int a2, uint64_t a3, uint64_t a4, const __CFArray **a5)
{
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFArrayRef MutableCopy = (const __CFArray *)FigCFArrayCreateMutableCopy();
  CFArrayRef v8 = (const __CFArray *)FigCFArrayCreateMutableCopy();
  CFArrayRef v9 = v8;
  if (v8)
  {
    CFIndex Count = CFArrayGetCount(v8);
    if (Count >= 1)
    {
      CFIndex v11 = Count;
      CFIndex v12 = 0;
      do
      {
        CFArrayGetValueAtIndex(v9, v12);
        int SInt32 = (const void *)FigCFNumberCreateSInt32();
        if (MutableCopy) {
          v14.length = CFArrayGetCount(MutableCopy);
        }
        else {
          v14.length = 0;
        }
        v14.location = 0;
        CountOfCFBooleanRef Value = CFArrayGetCountOfValue(MutableCopy, v14, SInt32);
        if (CountOfValue == 1)
        {
          v32.length = CFArrayGetCount(MutableCopy);
          v32.location = 0;
          FirstIndexOfCFBooleanRef Value = CFArrayGetFirstIndexOfValue(MutableCopy, v32, SInt32);
          if (FirstIndexOfValue == -1)
          {
LABEL_38:
            uint64_t v27 = FigSignalErrorAt();
            goto LABEL_31;
          }
          CFArrayRemoveValueAtIndex(MutableCopy, FirstIndexOfValue);
          ++v12;
          if (!SInt32) {
            continue;
          }
        }
        else
        {
          if (CountOfValue) {
            goto LABEL_38;
          }
          CFArrayRemoveValueAtIndex(v9, v12);
          --v11;
          if (!SInt32) {
            continue;
          }
        }
        CFRelease(SInt32);
      }
      while (v12 < v11);
    }
  }
  CFTypeID v29 = a5;
  if (!MutableCopy || (CFIndex v17 = CFArrayGetCount(MutableCopy), v17 < 1))
  {
LABEL_30:
    int SInt32 = 0;
    uint64_t v27 = 0;
    const void *v29 = v9;
    CFArrayRef v9 = 0;
    goto LABEL_31;
  }
  CFIndex v18 = v17;
  uint64_t v19 = 0;
  uint64_t v20 = (CMTime *)MEMORY[0x1E4F1F9F8];
  while (1)
  {
    FigCFArrayGetInt32AtIndex();
    if (trackExtraction_GetTypeID_sRegisterFigFigPlaybackItemTrackExtractionTypeOnce != -1) {
      dispatch_once_f(&trackExtraction_GetTypeID_sRegisterFigFigPlaybackItemTrackExtractionTypeOnce, &trackExtraction_GetTypeID_sFigFigPlaybackItemTrackExtractionTypeID, (dispatch_function_t)trackExtraction_RegisterCFType);
    }
    uint64_t Instance = _CFRuntimeCreateInstance();
    if (!Instance) {
      break;
    }
    uint64_t v22 = Instance;
    *(void *)(Instance + 16) = FigCFWeakReferenceHolderCreateWithReferencedObject();
    *(_DWORD *)(v22 + 24) = a2;
    *(_DWORD *)(v22 + 28) = 0;
    CallbacksForUnsortedSampleBuffers = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
    uint64_t v24 = CMBufferQueueCreate(v6, 0, CallbacksForUnsortedSampleBuffers, (CMBufferQueueRef *)(v22 + 32));
    if (v24
      || (CMNotificationCenterGetDefaultLocalCenter(), uint64_t v24 = FigNotificationCenterAddWeakListener(), v24)
      || (int v25 = *(opaqueCMBufferQueue **)(v22 + 32),
          CMTime time = *v20,
          uint64_t v24 = CMBufferQueueInstallTrigger(v25, (CMBufferQueueTriggerCallback)trackExtraction_dataBecameReady, (void *)v22, 7, &time, (CMBufferQueueTriggerToken *)(v22 + 40)), v24))
    {
      uint64_t v27 = v24;
      CFRelease((CFTypeRef)v22);
      goto LABEL_40;
    }
    CFArrayAppendValue(v9, (const void *)v22);
    CFRelease((CFTypeRef)v22);
LABEL_26:
    if (v18 == ++v19) {
      goto LABEL_30;
    }
  }
  uint64_t v26 = FigSignalErrorAt();
  if (!v26)
  {
    CFArrayAppendValue(v9, 0);
    goto LABEL_26;
  }
  uint64_t v27 = v26;
LABEL_40:
  int SInt32 = 0;
LABEL_31:
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  if (v9) {
    CFRelease(v9);
  }
  if (SInt32) {
    CFRelease(SInt32);
  }
  return v27;
}

void playerfig_postDeferredPrerollWasCancelledNotification(uint64_t a1, int a2)
{
  int valuePtr = a2;
  CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFTypeRef cf = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, &valuePtr);
  CFDictionaryRef v3 = CFDictionaryCreate(v2, (const void **)&kFigPlayerParameter_PrerollID, &cf, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CMNotificationCenterGetDefaultLocalCenter();
  FigDispatchAsyncPostNotification();
  if (cf) {
    CFRelease(cf);
  }
  if (v3) {
    CFRelease(v3);
  }
}

uint64_t itemfig_copyCombinedLoudnessInfoDictionary(uint64_t a1, uint64_t a2, __CFDictionary **a3)
{
  uint64_t v24 = 0;
  CFTypeRef cf = 0;
  if (a2
    && (uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage(),
        uint64_t TrackStorage = itemfig_getTrackStorage(a1, a2, &v24),
        uint64_t v8 = v24,
        uint64_t v9 = *MEMORY[0x1E4F1CF80],
        (CFDictionaryRef MutableCopy = (const __CFDictionary *)FigCFDictionaryCreateMutableCopy()) != 0))
  {
    CFIndex v11 = MutableCopy;
    if (!CFDictionaryContainsKey(MutableCopy, @"precalculated sc adjustment"))
    {
      float v12 = *(float *)(DerivedStorage + 1440);
      if (v12 != 0.0)
      {
        __exp10((float)(v12 / 20.0));
        FigCFDictionarySetFloat32();
      }
    }
    if (!CFDictionaryContainsKey(v11, @"media kind"))
    {
      uint64_t v13 = *(const void **)(DerivedStorage + 1448);
      if (v13) {
        CFDictionarySetValue(v11, @"media kind", v13);
      }
    }
    if (v8)
    {
      CFTypeRef v23 = 0;
      uint64_t v14 = *(void *)(DerivedStorage + 1216);
      uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v16 = v15 ? v15 : 0;
      CFIndex v17 = *(void (**)(uint64_t, uint64_t, CFTypeRef *))(v16 + 40);
      if (v17)
      {
        v17(v14, a2, &v23);
        if (v23)
        {
          uint64_t CMBaseObject = FigAssetTrackGetCMBaseObject(v23);
          uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v19) {
            uint64_t v20 = v19;
          }
          else {
            uint64_t v20 = 0;
          }
          uint64_t v22 = *(void (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v20 + 48);
          if (v22) {
            v22(CMBaseObject, @"LoudnessInfo", v9, &cf);
          }
          CFRelease(v23);
        }
      }
    }
    if (FigCFDictionaryGetCount() >= 1) {
      FigCFDictionaryAddEntriesToDictionaryWithRecursion();
    }
    if (CFDictionaryGetCount(v11) < 1) {
      CFRelease(v11);
    }
    else {
      *a3 = v11;
    }
  }
  else
  {
    uint64_t TrackStorage = FigSignalErrorAt();
  }
  if (cf) {
    CFRelease(cf);
  }
  return TrackStorage;
}

void fp_sendLoudnessInfoMarkerSampleBufferToAudioRenderPipeline(uint64_t a1, const void *a2)
{
  CFTypeRef cf = 0;
  CMAttachmentBearerRef target = 0;
  uint64_t v4 = *MEMORY[0x1E4F1CF80];
  if (!CMSampleBufferCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 1u, 0, 0, 0, 0, 0, 0, 0, 0, (CMSampleBufferRef *)&target))
  {
    CMSetAttachment(target, (CFStringRef)*MEMORY[0x1E4F21A20], a2, 0);
    uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(a1);
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v7 = v6 ? v6 : 0;
    uint64_t v8 = *(unsigned int (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v7 + 48);
    if (v8)
    {
      if (!v8(FigBaseObject, @"SourceSampleBufferQueue", v4, &cf)) {
        CMBufferQueueEnqueue((CMBufferQueueRef)cf, target);
      }
    }
  }
  if (target) {
    CFRelease(target);
  }
  if (cf) {
    CFRelease(cf);
  }
}

void itemfig_autoSelectionCriteriaChangedForItemAsync(const void *a1)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  uint64_t v3 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v3)
  {
    uint64_t v4 = (const void *)v3;
    uint64_t v5 = CMBaseObjectGetDerivedStorage();
    if (!*DerivedStorage && *(unsigned char *)(v5 + 760)) {
      itemfig_updateSelectedMediaArrayInternal(a1, 0, 0, 0);
    }
    CFRelease(v4);
  }
  if (a1)
  {
    CFRelease(a1);
  }
}

void trackExtraction_ResetOutput()
{
  uint64_t v0 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v0)
  {
    uint64_t v1 = (const void *)v0;
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    FigCFDictionarySetInt32();
    FigCFDictionarySetInt32();
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    if (Mutable) {
      CFRelease(Mutable);
    }
    CFRelease(v1);
  }
}

void trackExtraction_dataBecameReady()
{
  uint64_t v0 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v0)
  {
    uint64_t v1 = (const void *)v0;
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    FigCFDictionarySetInt32();
    FigCFDictionarySetInt32();
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    if (Mutable) {
      CFRelease(Mutable);
    }
    CFRelease(v1);
  }
}

uint64_t trackExtraction_RegisterCFType(uint64_t *a1)
{
  uint64_t result = _CFRuntimeRegisterClass();
  *a1 = result;
  return result;
}

double trackExtraction_Init(uint64_t a1)
{
  *(void *)(a1 + 48) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

void trackExtraction_Finalize(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CFAllocatorRef v2 = *(opaqueCMBufferQueueTriggerToken **)(a1 + 40);
    if (v2) {
      CMBufferQueueRemoveTrigger(*(CMBufferQueueRef *)(a1 + 32), v2);
    }
    uint64_t v3 = *(const void **)(a1 + 32);
    if (v3)
    {
      CFRelease(v3);
      *(void *)(a1 + 32) = 0;
    }
  }
  uint64_t v4 = *(const void **)(a1 + 48);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 48) = 0;
  }
  uint64_t v5 = *(const void **)(a1 + 16);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(a1 + 16) = 0;
  }
}

__CFString *trackExtraction_CopyDebugDesc(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(0, 0);
  CFStringAppendFormat(Mutable, 0, @"FigFigPlaybackItemTrackExtraction %p trackID %d extractionID %d bufferQueue %@ renderPipeline %@", a1, *(unsigned int *)(a1 + 24), *(unsigned int *)(a1 + 28), *(void *)(a1 + 32), *(void *)(a1 + 48));
  return Mutable;
}

uint64_t itemfig_HintStreamForTimeRange(uint64_t a1, long long *a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  long long v23 = xmmword_194993050;
  uint64_t v5 = MEMORY[0x1E4F1F9F8];
  uint64_t v22 = 0;
  CMTimeValue value = *MEMORY[0x1E4F1F9F8];
  CMTimeScale timescale = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 8);
  if ((*((unsigned char *)a2 + 12) & 1) == 0
    || (*((unsigned char *)a2 + 36) & 1) == 0
    || *((void *)a2 + 5)
    || (*((void *)a2 + 3) & 0x8000000000000000) != 0)
  {
    FigSignalErrorAt();
    return 0;
  }
  uint64_t v7 = DerivedStorage;
  long long v20 = *a2;
  CMTimeEpoch v21 = *((void *)a2 + 2);
  *(_OWORD *)&time1[0].start.CMTimeValue value = *(long long *)((char *)a2 + 24);
  time1[0].start.CMTimeEpoch epoch = *((void *)a2 + 5);
  CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  if (CMTimeCompare(&time1[0].start, &time2))
  {
    long long v8 = a2[1];
    *(_OWORD *)&time1[0].start.CMTimeValue value = *a2;
    *(_OWORD *)&time1[0].start.CMTimeEpoch epoch = v8;
    *(_OWORD *)&time1[0].duration.CMTimeScale timescale = a2[2];
    CMTimeRangeGetEnd(&time2, time1);
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    CMTimeValue value = time2.value;
    CMTimeFlags flags = time2.flags;
    CMTimeScale timescale = time2.timescale;
    CMTimeEpoch epoch = time2.epoch;
  }
  else
  {
    CMTimeFlags flags = *(_DWORD *)(v5 + 12);
    CMTimeEpoch epoch = *(void *)(v5 + 16);
    uint64_t v9 = 1;
    *((void *)&v23 + 1) = 1;
    uint64_t v10 = 2;
  }
  uint64_t result = *(void *)(v7 + 128);
  if (result)
  {
    CMByteStreamGetCMBaseObject();
    FigCRABSGetClassID();
    uint64_t result = CMBaseObjectIsMemberOfClass();
    if (result)
    {
      uint64_t v13 = *(unsigned int *)(v7 + 996);
      if (v13)
      {
        *(_OWORD *)&time1[0].start.CMTimeValue value = v20;
        time1[0].start.CMTimeEpoch epoch = v21;
        if (itemfig_getTrackHintLocationForTime(a1, v13, (long long *)&time1[0].start.value, &v22))
        {
          uint64_t v14 = v22;
          *(void *)&long long v23 = v22;
        }
        else
        {
          uint64_t v14 = 0x7FFFFFFFFFFFFFFFLL;
        }
        if ((flags & 0x1D) == 1)
        {
          uint64_t v15 = *(unsigned int *)(v7 + 996);
          time1[0].start.CMTimeValue value = value;
          time1[0].start.CMTimeScale timescale = timescale;
          time1[0].start.CMTimeFlags flags = flags;
          time1[0].start.CMTimeEpoch epoch = epoch;
          if (itemfig_getTrackHintLocationForTime(a1, v15, (long long *)&time1[0].start.value, &v22))
          {
            if (v22 > v14)
            {
              *((void *)&v23 + 1) = v22 - v14;
              uint64_t v9 = v22 - v14;
            }
          }
        }
      }
      else
      {
        uint64_t v14 = 0x7FFFFFFFFFFFFFFFLL;
      }
      uint64_t v16 = *(unsigned int *)(v7 + 1000);
      if (v16)
      {
        *(_OWORD *)&time1[0].start.CMTimeValue value = v20;
        time1[0].start.CMTimeEpoch epoch = v21;
        if (itemfig_getTrackHintLocationForTime(a1, v16, (long long *)&time1[0].start.value, &v22)
          && v14 > v22)
        {
          *(void *)&long long v23 = v22;
          uint64_t v14 = v22;
        }
        if ((flags & 0x1D) == 1)
        {
          uint64_t v17 = *(unsigned int *)(v7 + 1000);
          time1[0].start.CMTimeValue value = value;
          time1[0].start.CMTimeScale timescale = timescale;
          time1[0].start.CMTimeFlags flags = flags;
          time1[0].start.CMTimeEpoch epoch = epoch;
          if (itemfig_getTrackHintLocationForTime(a1, v17, (long long *)&time1[0].start.value, &v22))
          {
            if (v9 + v14 < v22)
            {
              uint64_t v9 = v22 - v14;
              *((void *)&v23 + 1) = v22 - v14;
            }
          }
        }
      }
      uint64_t result = 0;
      if (v14 != 0x7FFFFFFFFFFFFFFFLL)
      {
        if (v9)
        {
          if (dword_1E9350BF0)
          {
            os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          if (!FigCRABSHintActiveRanges(*(void *)(v7 + 128), v10, (uint64_t)&v23)) {
            return 1;
          }
          CFIndex v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t itemfig_makePlaybackPrerequisitePropertiesReady(uint64_t a1, unsigned char *a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  char v23 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v4) {
    goto LABEL_22;
  }
  if (*(unsigned char *)(DerivedStorage + 1264) || *(_DWORD *)(DerivedStorage + 1256)) {
    goto LABEL_20;
  }
  CFArrayRef v5 = (CFArrayRef)fp_PrerequisiteAssetPropertiesArray_sPrerequisiteAssetPropertyArray;
  if (!fp_PrerequisiteAssetPropertiesArray_sPrerequisiteAssetPropertyArray)
  {
    values = @"assetProperty_ContentByteStream";
    int v25 = @"assetProperty_FormatReader";
    uint64_t v26 = @"assetProperty_Tracks";
    uint64_t v27 = @"MediaSelectionArray";
    uint64_t v28 = @"iTunesGaplessInfo";
    CFTypeID v29 = @"iTunesSoundCheckVolumeNormalization";
    uint64_t v30 = @"assetProperty_ProtectedStatus";
    CFTypeID v31 = @"assetProperty_CPEProtector";
    CFRange v32 = @"assetProperty_InitialSamples";
    CFArrayRef v5 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)&values, 9, MEMORY[0x1E4F1D510]);
    fp_PrerequisiteAssetPropertiesArray_sPrerequisiteAssetPropertyArray = (uint64_t)v5;
  }
  *(CFAbsoluteTime *)(DerivedStorage + 1568) = CFAbsoluteTimeGetCurrent();
  *(CFAbsoluteTime *)(DerivedStorage + 1936) = CFAbsoluteTimeGetCurrent();
  if (*(void *)(DerivedStorage + 1224))
  {
    CFDictionaryRef MutableCopy = (__CFArray *)FigCFArrayCreateMutableCopy();
    CFArrayRef v7 = *(const __CFArray **)(DerivedStorage + 1224);
    v34.length = CFArrayGetCount(v7);
    v34.location = 0;
    CFArrayAppendArray(MutableCopy, v7, v34);
    CFArrayRef v5 = MutableCopy;
  }
  else
  {
    CFDictionaryRef MutableCopy = 0;
  }
  uint64_t v8 = *(void *)(DerivedStorage + 1216);
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  CFIndex v11 = *(uint64_t (**)(uint64_t, CFArrayRef, char *, uint64_t))(v10 + 16);
  if (v11)
  {
    uint64_t v12 = v11(v8, v5, &v23, DerivedStorage + 1256);
    if (!MutableCopy) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  uint64_t v12 = 4294954514;
  if (MutableCopy) {
LABEL_16:
  }
    CFRelease(MutableCopy);
LABEL_17:
  if (v12)
  {
LABEL_46:
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_23;
  }
  if (v23) {
    *(unsigned char *)(DerivedStorage + 1264) = 1;
  }
LABEL_20:
  if (*(unsigned char *)(DerivedStorage + 1265) || *(_DWORD *)(DerivedStorage + 1260)) {
    goto LABEL_22;
  }
  uint64_t v15 = (__CFArray *)fp_PrerequisiteAssetTrackPropertiesArray_sPrerequisiteAssetTrackPropertyArray;
  if (!fp_PrerequisiteAssetTrackPropertiesArray_sPrerequisiteAssetTrackPropertyArray)
  {
    values = @"LoudnessInfo";
    int v25 = @"IsEnabled";
    uint64_t v26 = @"MediaCharacteristicArray";
    uint64_t v27 = @"MinSampleDuration";
    uint64_t v15 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)&values, 4, MEMORY[0x1E4F1D510]);
    fp_PrerequisiteAssetTrackPropertiesArray_sPrerequisiteAssetTrackPropertyArray = (uint64_t)v15;
  }
  if (*(void *)(DerivedStorage + 1232))
  {
    uint64_t v15 = (__CFArray *)FigCFArrayCreateMutableCopy();
    CFArrayRef v16 = *(const __CFArray **)(DerivedStorage + 1232);
    v35.length = CFArrayGetCount(v16);
    v35.location = 0;
    CFArrayAppendArray(v15, v16, v35);
    uint64_t v17 = v15;
  }
  else
  {
    uint64_t v17 = 0;
  }
  uint64_t v18 = *(void *)(DerivedStorage + 1216);
  uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v19) {
    uint64_t v20 = v19;
  }
  else {
    uint64_t v20 = 0;
  }
  CMTimeEpoch v21 = *(uint64_t (**)(uint64_t, void, __CFArray *, char *, uint64_t))(v20 + 80);
  if (!v21)
  {
    uint64_t v12 = 4294954514;
    if (!v17) {
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  uint64_t v12 = v21(v18, 0, v15, &v23, DerivedStorage + 1260);
  if (v17) {
LABEL_42:
  }
    CFRelease(v17);
LABEL_43:
  if (v12) {
    goto LABEL_46;
  }
  if (!v23)
  {
LABEL_22:
    uint64_t v12 = 0;
    goto LABEL_23;
  }
  uint64_t v12 = 0;
  *(unsigned char *)(DerivedStorage + 1265) = 1;
LABEL_23:
  if (a2)
  {
    char v13 = *(unsigned char *)(DerivedStorage + 1264);
    if (v13) {
      char v13 = *(unsigned char *)(DerivedStorage + 1265) != 0;
    }
    *a2 = v13;
  }
  if (v4) {
    CFRelease(v4);
  }
  return v12;
}

uint64_t itemfig_getTrackHintLocationForTime(uint64_t a1, uint64_t a2, long long *a3, void *a4)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  CFTypeRef v41 = 0;
  uint64_t valuePtr = 0;
  uint64_t v7 = *(void *)(CMBaseObjectGetDerivedStorage() + 968);
  if (!v7) {
    return 0;
  }
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v9 = v8 ? v8 : 0;
  uint64_t v10 = *(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *, void))(v9 + 56);
  if (!v10) {
    return 0;
  }
  CFTypeRef cf = 0;
  CFTypeRef v40 = 0;
  uint64_t v37 = 0;
  if (v10(v7, a2, &v41, 0)) {
    return 0;
  }
  CFTypeRef v11 = v41;
  uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v12) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  uint64_t v15 = *(unsigned int (**)(CFTypeRef, CFTypeRef *))(v13 + 32);
  if (!v15 || v15(v11, &v40))
  {
    uint64_t v14 = 0;
    goto LABEL_47;
  }
  CFTypeRef v16 = v40;
  long long v42 = *a3;
  uint64_t v43 = *((void *)a3 + 2);
  uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v17) {
    uint64_t v18 = v17;
  }
  else {
    uint64_t v18 = 0;
  }
  uint64_t v19 = *(unsigned int (**)(CFTypeRef, long long *, void, CFTypeRef *, void, void))(v18 + 16);
  if (v19)
  {
    long long v44 = v42;
    uint64_t v45 = v43;
    if (!v19(v16, &v44, 0, &cf, 0, 0))
    {
      CFTypeRef v20 = cf;
      uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v21) {
        uint64_t v22 = v21;
      }
      else {
        uint64_t v22 = 0;
      }
      char v23 = *(uint64_t (**)(CFTypeRef, void, void, uint64_t *, void, void, void, void, void, void))(v22 + 152);
      if (v23 && (int v24 = v23(v20, 0, 0, &valuePtr, 0, 0, 0, 0, 0, 0), v24 != -12782)
        || ((CFTypeRef v25 = cf, (v26 = *(void *)(CMBaseObjectGetVTable() + 16)) == 0) ? (v27 = 0) : (v27 = v26),
            (uint64_t v28 = *(uint64_t (**)(CFTypeRef, uint64_t *, uint64_t *, void, void))(v27 + 144)) != 0
         && (int v24 = v28(v25, &valuePtr, &v37, 0, 0), v24 != -12782)))
      {
LABEL_43:
        if (v24)
        {
          uint64_t v14 = 0;
        }
        else
        {
          *a4 = valuePtr;
          uint64_t v14 = 1;
        }
        CFRelease(cf);
        goto LABEL_46;
      }
      CFNumberRef number = 0;
      uint64_t FigBaseObject = FigSampleCursorGetFigBaseObject(cf);
      uint64_t v30 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v30) {
        uint64_t v31 = v30;
      }
      else {
        uint64_t v31 = 0;
      }
      CFRange v32 = *(uint64_t (**)(uint64_t, __CFString *, void, CFNumberRef *))(v31 + 48);
      if (v32)
      {
        int v24 = v32(FigBaseObject, @"ApproximateSampleLocation", 0, &number);
        CFNumberRef v33 = number;
        if (v24 || !number)
        {
LABEL_41:
          if (v33) {
            CFRelease(v33);
          }
          goto LABEL_43;
        }
        CFNumberGetValue(number, kCFNumberSInt64Type, &valuePtr);
        if (dword_1E9350BF0)
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        int v24 = 0;
      }
      else
      {
        int v24 = -12782;
      }
      CFNumberRef v33 = number;
      goto LABEL_41;
    }
  }
  uint64_t v14 = 0;
LABEL_46:
  CFRelease(v40);
LABEL_47:
  if (v41) {
    CFRelease(v41);
  }
  return v14;
}

uint64_t itemfig_ensureTrackStorageArray()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v31 = 0;
  uint64_t v32 = 0;
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 640));
  if (*(void *)(DerivedStorage + 648)) {
    goto LABEL_2;
  }
  if (!*(void *)(DerivedStorage + 968)
    || (uint64_t v2 = *MEMORY[0x1E4F1CF80],
        CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0),
        (*(void *)(DerivedStorage + 648) = Mutable) == 0))
  {
LABEL_45:
    uint64_t v8 = FigSignalErrorAt();
    goto LABEL_46;
  }
  uint64_t v4 = *(void *)(DerivedStorage + 968);
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t *))(v6 + 8);
  if (!v7)
  {
LABEL_41:
    uint64_t v1 = 4294954514;
    goto LABEL_42;
  }
  uint64_t v8 = v7(v4, &v32);
  if (!v8)
  {
    if (v32 < 1)
    {
LABEL_2:
      uint64_t v1 = 0;
      goto LABEL_42;
    }
    uint64_t v9 = 0;
    CFTypeRef v10 = (CFTypeRef)*MEMORY[0x1E4F1CFC8];
    CFTypeRef v11 = (CFTypeRef)*MEMORY[0x1E4F1CFD0];
    while (1)
    {
      CFTypeRef cf = 0;
      uint64_t v12 = malloc_type_calloc(0x130uLL, 1uLL, 0xFD65450CuLL);
      if (!v12) {
        goto LABEL_45;
      }
      uint64_t v13 = v12;
      CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 648), v12);
      uint64_t v14 = *(void *)(DerivedStorage + 968);
      uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v15) {
        uint64_t v16 = v15;
      }
      else {
        uint64_t v16 = 0;
      }
      uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, unsigned char *, unsigned char *))(v16 + 48);
      if (!v17) {
        goto LABEL_41;
      }
      uint64_t v8 = v17(v14, v9, &v31, v13 + 4, v13);
      if (v8) {
        break;
      }
      uint64_t FigBaseObject = FigTrackReaderGetFigBaseObject(v31);
      uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v19) {
        uint64_t v20 = v19;
      }
      else {
        uint64_t v20 = 0;
      }
      uint64_t v21 = *(void (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v20 + 48);
      if (v21) {
        v21(FigBaseObject, @"TrackEnabled", v2, &cf);
      }
      CFTypeRef v22 = cf;
      if (v10 != cf) {
        v13[8] = 1;
      }
      if (v22) {
        CFRelease(v22);
      }
      v13[9] = 0;
      if (*((_DWORD *)v13 + 1) == 1986618469)
      {
        CFTypeRef v29 = 0;
        uint64_t v23 = FigTrackReaderGetFigBaseObject(v31);
        uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v24) {
          uint64_t v25 = v24;
        }
        else {
          uint64_t v25 = 0;
        }
        uint64_t v26 = *(void (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v25 + 48);
        if (v26) {
          v26(v23, @"ContainsChapters", v2, &v29);
        }
        CFTypeRef v27 = v29;
        if (v11 == v29) {
          v13[72] = 1;
        }
        if (v27) {
          CFRelease(v27);
        }
      }
      if (v31)
      {
        CFRelease(v31);
        CFTypeRef v31 = 0;
      }
      if (++v9 >= v32) {
        goto LABEL_2;
      }
    }
  }
LABEL_46:
  uint64_t v1 = v8;
LABEL_42:
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 640));
  if (v31) {
    CFRelease(v31);
  }
  return v1;
}

void itemfig_setDisplayNonForcedSubtitlesEnabled(uint64_t a1, int a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  uint64_t v6 = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (v5)
  {
    if (*v6)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    else if (*(unsigned __int8 *)(DerivedStorage + 1020) != a2)
    {
      *(unsigned char *)(DerivedStorage + 1020) = a2;
      uint64_t v13 = *(dispatch_queue_t **)(DerivedStorage + 1744);
      if (v13) {
        FigLegibleOutputManagerSetNonForcedEnabledForMediaType(v13, 1935832172, a2);
      }
      uint64_t v14 = *(dispatch_queue_t **)(DerivedStorage + 1776);
      if (v14) {
        FigRenderedLegibleOutputManagerSetNonForcedEnabledForMediaType(v14, 1935832172, *(unsigned char *)(DerivedStorage + 1020));
      }
      NotificationPayloadForProperties = playerfig_createNotificationPayloadForProperties(v5, a1, v7, v8, v9, v10, v11, v12, @"DisplayNonForcedSubtitles", @"SelectedMediaArray");
      CMNotificationCenterGetDefaultLocalCenter();
      FigDispatchAsyncPostNotification();
      if (NotificationPayloadForProperties) {
        CFRelease(NotificationPayloadForProperties);
      }
    }
    CFRelease(v5);
  }
}

void playerfig_resetSubtitleRenderPipeline()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int valuePtr = 0x7FFFFFFF;
  CMAttachmentBearerRef target = 0;
  if (*(void *)(DerivedStorage + 584))
  {
    uint64_t v1 = DerivedStorage;
    values = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (values)
    {
      CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFDictionaryRef v3 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], MEMORY[0x1E4F1F328], (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (v3)
      {
        OSStatus v4 = CMSampleBufferCreate(v2, 0, 1u, 0, 0, 0, 0, 0, 0, 0, 0, (CMSampleBufferRef *)&target);
        CMAttachmentBearerRef v5 = target;
        if (!v4)
        {
          CMSetAttachment(target, (CFStringRef)*MEMORY[0x1E4F1F2C0], values, 1u);
          CFTypeRef cf = 0;
          uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(*(void *)(v1 + 584));
          uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v7) {
            uint64_t v8 = v7;
          }
          else {
            uint64_t v8 = 0;
          }
          int v9 = *(unsigned int (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v8 + 48);
          if (v9 && !v9(FigBaseObject, @"SourceSampleBufferQueue", v2, &cf) && cf)
          {
            CMNotificationCenterGetDefaultLocalCenter();
            CMNotificationCenterPostNotification();
            CMNotificationCenterGetDefaultLocalCenter();
            CMNotificationCenterPostNotification();
            CMBufferQueueEnqueue((CMBufferQueueRef)cf, target);
            CFRelease(cf);
          }
          CMAttachmentBearerRef v5 = target;
        }
        if (v5)
        {
          CFRelease(v5);
          CMAttachmentBearerRef target = 0;
        }
      }
      else
      {
        FigSignalErrorAt();
      }
    }
    else
    {
      FigSignalErrorAt();
      CFDictionaryRef v3 = 0;
    }
    if (values)
    {
      CFRelease(values);
      values = 0;
    }
    if (v3) {
      CFRelease(v3);
    }
  }
}

void itemfig_postSelectedMediaOptionsDidChangeNotification(uint64_t a1)
{
  CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v2 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  CMBaseObjectGetDerivedStorage();
  if (v2)
  {
    NotificationPayloadForProperties = playerfig_createNotificationPayloadForProperties(v2, a1, v3, v4, v5, v6, v7, v8, @"SelectedMediaArray", 0);
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    if (NotificationPayloadForProperties) {
      CFRelease(NotificationPayloadForProperties);
    }
    CFRelease(v2);
  }
}

uint64_t itemfig_enableAudioTrackAndSetCompositionPresetIndexForEnabledTrack(uint64_t a1, int a2, int a3, uint64_t a4, char *a5, char *a6)
{
  uint64_t v20 = 0;
  uint64_t valuePtr = a4;
  uint64_t result = itemfig_getTrackStorage(a1, a3, &v20);
  if (result) {
    return result;
  }
  uint64_t v13 = v20;
  if (*(unsigned __int8 *)(v20 + 8) == a2)
  {
    char v14 = 0;
    if (!a2) {
      goto LABEL_11;
    }
  }
  else
  {
    itemfig_setTrackEnabled(a1, v20, a2);
    uint64_t result = itemfig_updateDefaultTrackID(a1, a3, &v19);
    if (result) {
      return result;
    }
    char v14 = 1;
    if (!a2)
    {
LABEL_11:
      uint64_t result = 0;
      *a5 = v14;
      *a6 = 0;
      return result;
    }
  }
  if (a4 == -1) {
    goto LABEL_11;
  }
  CFNumberRef v15 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberCFIndexType, &valuePtr);
  if (!v15) {
    return FigSignalErrorAt();
  }
  CFNumberRef v16 = v15;
  if (FigCFEqual())
  {
    char v17 = 0;
  }
  else
  {
    uint64_t v18 = *(const void **)(v13 + 144);
    *(void *)(v13 + 144) = v16;
    CFRetain(v16);
    if (v18) {
      CFRelease(v18);
    }
    char v17 = 1;
  }
  *a5 = v14;
  *a6 = v17;
  CFRelease(v16);
  return 0;
}

uint64_t itemfig_isAC3PassthroughSupported()
{
  BOOLean[16] = *(CFBooleanRef *)MEMORY[0x1E4F143B8];
  CMBaseObjectGetDerivedStorage();
  uint64_t v0 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!v0) {
    return 0;
  }
  uint64_t v2 = DerivedStorage;
  if (*(unsigned char *)DerivedStorage)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  else
  {
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 456));
    int v3 = *(const void **)(v2 + 464);
    if (v3)
    {
      CFTypeRef v4 = CFRetain(v3);
      MEMORY[0x19970E930](*(void *)(v2 + 456));
      if (v4)
      {
        BOOLean[0] = 0;
        uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v5 && (int v6 = *(uint64_t (**)(CFTypeRef, void, void, CFBooleanRef *))(v5 + 48)) != 0)
        {
          int v7 = v6(v4, *MEMORY[0x1E4F75E48], *MEMORY[0x1E4F1CF80], BOOLean);
          CFBooleanRef v8 = BOOLean[0];
          if (v7) {
            BOOL v9 = 1;
          }
          else {
            BOOL v9 = BOOLean[0] == 0;
          }
          if (v9)
          {
            uint64_t Value = 0;
          }
          else
          {
            uint64_t Value = CFBooleanGetValue(BOOLean[0]);
            CFBooleanRef v8 = BOOLean[0];
          }
          if (v8) {
            CFRelease(v8);
          }
        }
        else
        {
          uint64_t Value = 0;
        }
        CFRelease(v4);
        goto LABEL_17;
      }
    }
    else
    {
      MEMORY[0x19970E930](*(void *)(v2 + 456));
    }
  }
  uint64_t Value = 0;
LABEL_17:
  CFRelease(v0);
  return Value;
}

void itemfig_isEC3PassthroughSupported()
{
  CMBaseObjectGetDerivedStorage();
  uint64_t v0 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  CMBaseObjectGetDerivedStorage();
  if (v0)
  {
    CFRelease(v0);
  }
}

uint64_t itemfig_isAtmosSupported(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  CMBaseObjectGetDerivedStorage();
  uint64_t v2 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (!v2) {
    return 0;
  }
  if (*DerivedStorage) {
    goto LABEL_29;
  }
  if (!playerfig_isMATAtmosEnabled())
  {
    if (itemfig_isSpatializationAllowed(a1, 0))
    {
      if (dword_1E9350BF0) {
        goto LABEL_5;
      }
      goto LABEL_21;
    }
    LOBYTE(v15[0]) = 0;
    if (fp_bufferedAirPlayActiveAndSupportsAtmos((uint64_t)v2, v15) && LOBYTE(v15[0]))
    {
      if (!dword_1E9350BF0) {
        goto LABEL_21;
      }
LABEL_12:
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      goto LABEL_22;
    }
    v15[0] = 0;
    CMBaseObjectGetDerivedStorage();
    int v6 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    uint64_t v7 = CMBaseObjectGetDerivedStorage();
    if (v6)
    {
      uint64_t v8 = v7;
      if (*(unsigned char *)v7)
      {
        CFRelease(v6);
      }
      else
      {
        MEMORY[0x19970E910](*(void *)(v7 + 456));
        uint64_t v9 = *(void *)(v8 + 464);
        if (v9) {
          BOOL v10 = FPSupport_GetAudioSessionOutputChannelCount(v9, v15) != 0;
        }
        else {
          BOOL v10 = 0;
        }
        MEMORY[0x19970E930](*(void *)(v8 + 456));
        int v11 = v15[0];
        CFRelease(v6);
        if (!v10 && v11 == 16)
        {
          if (!dword_1E9350BF0) {
            goto LABEL_21;
          }
          goto LABEL_12;
        }
      }
    }
    if (dword_1E9350BF0)
    {
      char v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
LABEL_29:
    uint64_t v12 = 0;
    goto LABEL_23;
  }
  if (dword_1E9350BF0)
  {
LABEL_5:
    CFTypeRef v4 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
LABEL_22:
    uint64_t v12 = 1;
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_23;
  }
LABEL_21:
  uint64_t v12 = 1;
LABEL_23:
  CFRelease(v2);
  return v12;
}

uint64_t itemfig_isTrackAC3(uint64_t a1, uint64_t a2)
{
  CFTypeRef cf = 0;
  int v15 = 0;
  uint64_t v3 = *(void *)(CMBaseObjectGetDerivedStorage() + 968);
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  int v6 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, int *))(v5 + 56);
  if (!v6) {
    return 0;
  }
  int v7 = v6(v3, a2, &cf, &v15);
  CFTypeRef v8 = cf;
  if (v7) {
    BOOL v9 = 0;
  }
  else {
    BOOL v9 = v15 == 1936684398;
  }
  if (!v9)
  {
    uint64_t v10 = 0;
    if (!cf) {
      return v10;
    }
    goto LABEL_23;
  }
  CMFormatDescriptionRef desc = 0;
  if (itemfig_copyFormatDescription((uint64_t)cf, (uint64_t *)&desc))
  {
LABEL_21:
    uint64_t v10 = 0;
    goto LABEL_22;
  }
  uint64_t v10 = (uint64_t)desc;
  if (!desc) {
    goto LABEL_22;
  }
  signed int MediaSubType = CMFormatDescriptionGetMediaSubType(desc);
  CFRelease((CFTypeRef)v10);
  uint64_t v10 = 1;
  if (MediaSubType > 1885430578)
  {
    if (MediaSubType != 1885430579 && MediaSubType != 1902207795)
    {
      int v12 = 2053202739;
LABEL_20:
      if (MediaSubType == v12) {
        goto LABEL_22;
      }
      goto LABEL_21;
    }
  }
  else if (MediaSubType != 1633889587 && MediaSubType != 1667312947)
  {
    int v12 = 1667326771;
    goto LABEL_20;
  }
LABEL_22:
  CFTypeRef v8 = cf;
  if (cf) {
LABEL_23:
  }
    CFRelease(v8);
  return v10;
}

uint64_t itemfig_isTrackEnhancedAC3(uint64_t a1, uint64_t a2)
{
  CFTypeRef cf = 0;
  int v15 = 0;
  uint64_t v3 = *(void *)(CMBaseObjectGetDerivedStorage() + 968);
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  int v6 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, int *))(v5 + 56);
  if (!v6) {
    return 0;
  }
  int v7 = v6(v3, a2, &cf, &v15);
  CFTypeRef v8 = cf;
  if (v7) {
    BOOL v9 = 0;
  }
  else {
    BOOL v9 = v15 == 1936684398;
  }
  if (!v9)
  {
    uint64_t v10 = 0;
    if (!cf) {
      return v10;
    }
    goto LABEL_22;
  }
  CMFormatDescriptionRef desc = 0;
  if (itemfig_copyFormatDescription((uint64_t)cf, (uint64_t *)&desc))
  {
LABEL_20:
    uint64_t v10 = 0;
    goto LABEL_21;
  }
  uint64_t v10 = (uint64_t)desc;
  if (!desc) {
    goto LABEL_21;
  }
  signed int MediaSubType = CMFormatDescriptionGetMediaSubType(desc);
  CFRelease((CFTypeRef)v10);
  uint64_t v10 = 1;
  if (MediaSubType <= 1885692722)
  {
    if (MediaSubType == 1667575091) {
      goto LABEL_21;
    }
    int v12 = 1700998451;
LABEL_19:
    if (MediaSubType == v12) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  if (MediaSubType != 1885692723 && MediaSubType != 1902469939)
  {
    int v12 = 2053464883;
    goto LABEL_19;
  }
LABEL_21:
  CFTypeRef v8 = cf;
  if (cf) {
LABEL_22:
  }
    CFRelease(v8);
  return v10;
}

uint64_t itemfig_isTrackAtmos(uint64_t a1, uint64_t a2)
{
  CFTypeRef cf = 0;
  int v20 = 0;
  uint64_t v3 = *(void *)(CMBaseObjectGetDerivedStorage() + 968);
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  int v6 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, int *))(v5 + 56);
  if (!v6) {
    return 0;
  }
  int v7 = v6(v3, a2, &cf, &v20);
  CFTypeRef v8 = cf;
  if (v7) {
    BOOL v9 = 0;
  }
  else {
    BOOL v9 = v20 == 1936684398;
  }
  if (!v9)
  {
    uint64_t v12 = 0;
    if (!cf) {
      return v12;
    }
    goto LABEL_42;
  }
  CMFormatDescriptionRef desc = 0;
  if (itemfig_copyFormatDescription((uint64_t)cf, (uint64_t *)&desc))
  {
    uint64_t v12 = 0;
    goto LABEL_41;
  }
  uint64_t v10 = desc;
  signed int MediaSubType = CMFormatDescriptionGetMediaSubType(desc);
  uint64_t v12 = 1;
  if (MediaSubType <= 1885692722)
  {
    if (MediaSubType > 1700997938)
    {
      if (MediaSubType == 1700997939) {
        goto LABEL_39;
      }
      if (MediaSubType != 1700998451)
      {
        int v13 = 1885547315;
        goto LABEL_27;
      }
      goto LABEL_29;
    }
    if (MediaSubType == 1667574579) {
      goto LABEL_39;
    }
    int v14 = 1667575091;
LABEL_23:
    if (MediaSubType != v14)
    {
LABEL_38:
      uint64_t v12 = 0;
      goto LABEL_39;
    }
    goto LABEL_29;
  }
  if (MediaSubType > 1902469938)
  {
    if (MediaSubType == 2053464883) {
      goto LABEL_29;
    }
    if (MediaSubType == 2053319475) {
      goto LABEL_39;
    }
    int v14 = 1902469939;
    goto LABEL_23;
  }
  if (MediaSubType != 1885692723)
  {
    int v13 = 1902324531;
LABEL_27:
    if (MediaSubType == v13) {
      goto LABEL_39;
    }
    goto LABEL_38;
  }
LABEL_29:
  size_t sizeOut = 0;
  FormatList = CMAudioFormatDescriptionGetFormatList(v10, &sizeOut);
  uint64_t v12 = 0;
  if (FormatList && sizeOut >= 0x30)
  {
    int mFormatID = FormatList->mASBD.mFormatID;
    uint64_t v12 = 1;
    if (mFormatID <= 1885547314)
    {
      if (mFormatID == 1667574579) {
        goto LABEL_39;
      }
      int v17 = 1700997939;
LABEL_37:
      if (mFormatID == v17) {
        goto LABEL_39;
      }
      goto LABEL_38;
    }
    if (mFormatID != 1885547315 && mFormatID != 1902324531)
    {
      int v17 = 2053319475;
      goto LABEL_37;
    }
  }
LABEL_39:
  if (v10) {
    CFRelease(v10);
  }
LABEL_41:
  CFTypeRef v8 = cf;
  if (cf) {
LABEL_42:
  }
    CFRelease(v8);
  return v12;
}

BOOL itemfig_isTrackDecodable(uint64_t a1, uint64_t a2)
{
  CMAudioFormatDescriptionRef desc = 0;
  CFTypeRef cf = 0;
  uint64_t v3 = *(void *)(CMBaseObjectGetDerivedStorage() + 968);
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  int v6 = *(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *, void))(v5 + 56);
  if (!v6 || v6(v3, a2, &cf, 0))
  {
    BOOL v9 = 0;
  }
  else
  {
    int v7 = itemfig_copyFormatDescription((uint64_t)cf, (uint64_t *)&desc);
    CMAudioFormatDescriptionRef v8 = desc;
    if (!v7)
    {
      BOOL v9 = CMAudioFormatDescriptionGetRichestDecodableFormat(desc) != 0;
      if (!v8) {
        goto LABEL_10;
      }
      goto LABEL_8;
    }
    BOOL v9 = 0;
    if (desc) {
LABEL_8:
    }
      CFRelease(v8);
  }
LABEL_10:
  if (cf) {
    CFRelease(cf);
  }
  return v9;
}

uint64_t itemfig_getMaximumNumberOfSpatializedOutputChannels(uint64_t a1, int *a2)
{
  int v9 = 2;
  CMBaseObjectGetDerivedStorage();
  uint64_t v4 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v4)
  {
    uint64_t v5 = (const void *)v4;
    uint64_t DeviceMaximumNumberOfPhysicalOutputChannels = playerfig_getDeviceMaximumNumberOfPhysicalOutputChannels(v4, &v9, 0);
    if (!DeviceMaximumNumberOfPhysicalOutputChannels)
    {
      if (itemfig_isSpatializationAllowed(a1, 0) || itemfig_isSpatializationAllowed(a1, 1))
      {
        int v7 = 0;
        if (v9 >= 0) {
          int v7 = v9;
        }
      }
      else
      {
        int v7 = v9;
      }
      *a2 = v7;
    }
    CFRelease(v5);
    return DeviceMaximumNumberOfPhysicalOutputChannels;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t playerfig_getDeviceMaximumNumberOfPhysicalOutputChannels(uint64_t a1, int *a2, int *a3)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  int valuePtr = 2;
  CFTypeRef cf = 0;
  if (!FigCFEqual())
  {
    MEMORY[0x19970E910](DerivedStorage[22]);
    int v11 = (const void *)DerivedStorage[21];
    if (v11)
    {
      CFTypeRef v8 = CFRetain(v11);
      MEMORY[0x19970E930](DerivedStorage[22]);
      if (v8)
      {
        uint64_t CMBaseObject = FigBufferedAirPlayOutputGetCMBaseObject(v8);
        uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v13) {
          uint64_t v14 = v13;
        }
        else {
          uint64_t v14 = 0;
        }
        char v19 = *(uint64_t (**)(uint64_t, __CFString *, void, CFTypeRef *))(v14 + 48);
        if (!v19)
        {
          CFTypeRef v7 = 0;
          uint64_t v9 = 4294954514;
          goto LABEL_6;
        }
        uint64_t v20 = v19(CMBaseObject, @"MaximumNumberOfOutputChannels", *MEMORY[0x1E4F1CF80], &cf);
        if (v20)
        {
          uint64_t v9 = v20;
          CFTypeRef v7 = 0;
          goto LABEL_6;
        }
        CFNumberGetValue((CFNumberRef)cf, kCFNumberSInt32Type, &valuePtr);
        CFTypeRef v7 = 0;
        int v6 = 1;
        goto LABEL_4;
      }
    }
    else
    {
      MEMORY[0x19970E930](DerivedStorage[22]);
    }
    MEMORY[0x19970E910](DerivedStorage[57]);
    int v15 = (const void *)DerivedStorage[58];
    if (v15)
    {
      CFTypeRef v7 = CFRetain(v15);
      MEMORY[0x19970E930](DerivedStorage[57]);
      if (v7)
      {
        uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (!v16)
        {
          CFTypeRef v8 = 0;
          uint64_t v9 = 4294948075;
          goto LABEL_6;
        }
        int v17 = *(uint64_t (**)(CFTypeRef, void, void, CFTypeRef *))(v16 + 48);
        if (!v17)
        {
          CFTypeRef v8 = 0;
          uint64_t v9 = 4294948071;
          goto LABEL_6;
        }
        uint64_t v18 = v17(v7, *MEMORY[0x1E4F76358], *MEMORY[0x1E4F1CF80], &cf);
        if (v18)
        {
          uint64_t v9 = v18;
          CFTypeRef v8 = 0;
          goto LABEL_6;
        }
        if (cf) {
          CFNumberGetValue((CFNumberRef)cf, kCFNumberSInt32Type, &valuePtr);
        }
      }
      int v6 = 0;
      goto LABEL_3;
    }
    MEMORY[0x19970E930](DerivedStorage[57]);
  }
  int v6 = 0;
  CFTypeRef v7 = 0;
LABEL_3:
  CFTypeRef v8 = 0;
LABEL_4:
  *a2 = valuePtr;
  uint64_t v9 = 0;
  if (a3) {
    *a3 = v6;
  }
LABEL_6:
  if (cf) {
    CFRelease(cf);
  }
  if (v7) {
    CFRelease(v7);
  }
  if (v8) {
    CFRelease(v8);
  }
  return v9;
}

uint64_t itemfig_isSpatializationAllowed(uint64_t a1, int a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  uint64_t v5 = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (v4)
  {
    if (!*v5)
    {
      if (FPSupport_HasTrackOfType(*(void *)(DerivedStorage + 968), 1986618469)) {
        int v6 = 1836019574;
      }
      else {
        int v6 = 1936684398;
      }
      uint64_t v7 = CMBaseObjectGetDerivedStorage();
      CFDictionaryRef v15 = 0;
      MEMORY[0x19970E910](*(void *)(v7 + 456));
      CFTypeRef v8 = *(const void **)(v7 + 464);
      if (v8)
      {
        CFTypeRef v9 = CFRetain(v8);
        MEMORY[0x19970E930](*(void *)(v7 + 456));
        if (v9)
        {
          if (FPSupport_CreateAudioSessionSpatializationCapabilities((uint64_t)v9, v6, (CFTypeRef *)&v15))
          {
            CFRelease(v9);
          }
          else
          {
            CFDictionaryRef v10 = v15;
            CFRelease(v9);
            if (v10)
            {
              CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(v10, @"SpatialCapabilitiesKey_spatialAudioSources");
              if (Value)
              {
                CFArrayRef v12 = Value;
                FigCFDictionaryGetBooleanIfPresent();
                if (CFArrayGetCount(v12) >= 1)
                {
                  CFIndex v13 = 0;
                  do
                  {
                    FigCFArrayGetInt32AtIndex();
                    ++v13;
                  }
                  while (v13 < CFArrayGetCount(v12));
                }
                if (!a2)
                {
                  if (*(unsigned char *)(DerivedStorage + 1392))
                  {
                    CMBaseObjectGetDerivedStorage();
                    if (!FigCFEqual() && !FigCFEqual()) {
                      FigCFEqual();
                    }
                  }
                }
              }
              CFRelease(v10);
            }
          }
        }
      }
      else
      {
        MEMORY[0x19970E930](*(void *)(v7 + 456));
      }
    }
    CFRelease(v4);
  }
  return 0;
}

uint64_t FigAudioSessionCopyMXSessionProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (!v8) {
    return 4294948075;
  }
  CFTypeRef v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v9) {
    return 4294948071;
  }

  return v9(a1, a2, a3, a4);
}

uint64_t itemfig_canTrackPassthrough(uint64_t a1, uint64_t a2)
{
  CFTypeRef cf = 0;
  int v14 = 0;
  uint64_t v3 = *(void *)(CMBaseObjectGetDerivedStorage() + 968);
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  int v6 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, int *))(v5 + 56);
  if (!v6) {
    return 0;
  }
  int v7 = v6(v3, a2, &cf, &v14);
  CFTypeRef v8 = cf;
  if (v7) {
    BOOL v9 = 0;
  }
  else {
    BOOL v9 = v14 == 1936684398;
  }
  if (!v9)
  {
    uint64_t IsPassthroughSupported = 0;
    if (!cf) {
      return IsPassthroughSupported;
    }
    goto LABEL_16;
  }
  CFIndex v13 = 0;
  if (itemfig_copyFormatDescription((uint64_t)cf, (uint64_t *)&v13) || (CFDictionaryRef v10 = v13) == 0)
  {
    uint64_t IsPassthroughSupported = 0;
  }
  else
  {
    uint64_t IsPassthroughSupported = FigAudioQueueRenderPipelineIsPassthroughSupported(v13);
    CFRelease(v10);
  }
  CFTypeRef v8 = cf;
  if (cf) {
LABEL_16:
  }
    CFRelease(v8);
  return IsPassthroughSupported;
}

uint64_t playerfig_isMATAtmosEnabled()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 456));
  uint64_t v1 = *(const void **)(DerivedStorage + 464);
  if (!v1)
  {
    MEMORY[0x19970E930](*(void *)(DerivedStorage + 456));
    return 0;
  }
  CFTypeRef v2 = CFRetain(v1);
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 456));
  if (!v2) {
    return 0;
  }
  CFTypeRef cf = 0;
  uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v3 && (uint64_t v4 = *(unsigned int (**)(CFTypeRef, void, void, CFTypeRef *))(v3 + 48)) != 0)
  {
    if (v4(v2, *MEMORY[0x1E4F76338], *MEMORY[0x1E4F1CF80], &cf)) {
      BOOL v5 = 0;
    }
    else {
      BOOL v5 = cf == (CFTypeRef)*MEMORY[0x1E4F1CFD0];
    }
    uint64_t v6 = v5;
    if (cf) {
      CFRelease(cf);
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  CFRelease(v2);
  return v6;
}

uint64_t fp_bufferedAirPlayActiveAndSupportsAtmos(uint64_t a1, unsigned char *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = DerivedStorage;
  if (a2) {
    *a2 = 0;
  }
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 176));
  BOOL v5 = *(const void **)(v4 + 168);
  if (v5)
  {
    CFRetain(*(CFTypeRef *)(v4 + 168));
    MEMORY[0x19970E930](*(void *)(v4 + 176));
    CFArrayRef v12 = 0;
    if (a2)
    {
      uint64_t CMBaseObject = FigBufferedAirPlayOutputGetCMBaseObject(v5);
      uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v7) {
        uint64_t v8 = v7;
      }
      else {
        uint64_t v8 = 0;
      }
      CFDictionaryRef v10 = *(void (**)(uint64_t, __CFString *, void, const void **))(v8 + 48);
      if (v10)
      {
        v10(CMBaseObject, @"AtmosIsSupported", *MEMORY[0x1E4F1CF80], &v12);
        int v11 = v12;
      }
      else
      {
        int v11 = 0;
      }
      if (v11 == (const void *)*MEMORY[0x1E4F1CFD0]) {
        *a2 = 1;
      }
      if (v11) {
        CFRelease(v11);
      }
    }
    CFRelease(v5);
    return 1;
  }
  else
  {
    MEMORY[0x19970E930](*(void *)(v4 + 176));
    return 0;
  }
}

uint64_t itemfig_getTrackAudioChannelCount(uint64_t a1, uint64_t a2)
{
  CFTypeRef cf = 0;
  int v14 = 0;
  uint64_t v3 = *(void *)(CMBaseObjectGetDerivedStorage() + 968);
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, int *))(v5 + 56);
  if (!v6) {
    return 2;
  }
  int v7 = v6(v3, a2, &cf, &v14);
  CFTypeRef v8 = cf;
  if (v7) {
    BOOL v9 = 0;
  }
  else {
    BOOL v9 = v14 == 1936684398;
  }
  if (!v9)
  {
    CodecOutputChannelCFIndex Count = 2;
    if (!cf) {
      return CodecOutputChannelCount;
    }
    goto LABEL_16;
  }
  CFIndex v13 = 0;
  if (itemfig_copyFormatDescription((uint64_t)cf, (uint64_t *)&v13) || (CFDictionaryRef v10 = v13) == 0)
  {
    CodecOutputChannelCFIndex Count = 2;
  }
  else
  {
    CodecOutputChannelCFIndex Count = FigAudioFormatDescriptionGetCodecOutputChannelCount();
    CFRelease(v10);
  }
  CFTypeRef v8 = cf;
  if (cf) {
LABEL_16:
  }
    CFRelease(v8);
  return CodecOutputChannelCount;
}

uint64_t itemfig_applyAudioSceneCompositionPresetToTrack(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 144);
  if (!v1) {
    return 0;
  }
  uint64_t result = *(void *)(a1 + 16);
  if (result)
  {
    uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(result);
    uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v4) {
      uint64_t v5 = v4;
    }
    else {
      uint64_t v5 = 0;
    }
    uint64_t v6 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v5 + 56);
    if (v6)
    {
      return v6(FigBaseObject, @"SceneCompositionPreset", v1);
    }
    else
    {
      return 4294954514;
    }
  }
  return result;
}

uint64_t itemfig_rebuildRenderPipelinesAndBossGuts(const void *a1, int a2, int a3, int a4, const __CFAllocator *a5, const void *a6, int a7, char a8)
{
  uint64_t v1050 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  v933 = *(const void **)(DerivedStorage + 8);
  uint64_t v14 = CMBaseObjectGetDerivedStorage();
  CFTypeRef v1019 = 0;
  int v925 = *(unsigned __int8 *)(DerivedStorage + 2017);
  long long v1045 = 0u;
  long long v1046 = 0u;
  long long v1043 = 0u;
  long long v1044 = 0u;
  long long v1041 = 0u;
  long long v1042 = 0u;
  long long v1040 = 0u;
  uint64_t v938 = v14;
  int v942 = a7;
  CFTypeRef v934 = a6;
  v930 = (void *)MEMORY[0x199711A30]();
  if (!a6 && !a7)
  {
    unsigned int v15 = FigDeferredTransactionCreate(*MEMORY[0x1E4F1CF80], (uint64_t *)&v1019);
    if (v15)
    {
      unsigned int alloc = v15;
      CFTypeRef v44 = 0;
      CFDictionaryRef v45 = 0;
      uint64_t v46 = 0;
      CFMutableArrayRef v998 = 0;
      int theArraya = 0;
      CFTypeRef v934 = 0;
      free(0);
      goto LABEL_1713;
    }
    CFTypeRef v934 = v1019;
    goto LABEL_8;
  }
  if (!a7)
  {
LABEL_8:
    MEMORY[0x19970E910](*(void *)(v14 + 872));
    uint64_t v16 = *(const void **)(v14 + 888);
    if (v16)
    {
      CFRelease(v16);
      *(void *)(v14 + 888) = 0;
    }
    int v939 = 1;
    *(unsigned char *)(v14 + 896) = 1;
    MEMORY[0x19970E930](*(void *)(v14 + 872));
    goto LABEL_11;
  }
  if (!*(void *)(DerivedStorage + 352))
  {
    CFTypeRef v44 = 0;
    CFDictionaryRef v45 = 0;
    uint64_t v46 = 0;
    CFMutableArrayRef v998 = 0;
    int theArraya = 0;
    unsigned int alloc = -12863;
    free(0);
    goto LABEL_1713;
  }
  int v939 = 0;
LABEL_11:
  CFArrayRef v17 = *(const __CFArray **)(v14 + 504);
  int v989 = v17 && CFArrayGetCount(v17) && CFArrayGetValueAtIndex(*(CFArrayRef *)(v14 + 504), 0) == a1;
  unsigned int v18 = itemfig_assureBasicsReadyForInspection(a1);
  if (v18) {
    goto LABEL_1214;
  }
  if (!*(void *)(DerivedStorage + 352))
  {
    double PlayableDurationAtCurrentTime = itemfig_getPlayableDurationAtCurrentTime((uint64_t)a1);
    itemfig_monitorPlayability(a1);
    *(double *)(DerivedStorage + 1648) = PlayableDurationAtCurrentTime;
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 1896));
    uint64_t v20 = *(void *)(DerivedStorage + 1904);
    if (v20)
    {
      uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v22 = v21 ? v21 : 0;
      uint64_t v23 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v22 + 56);
      if (v23) {
        v23(v20, 0x1EE582B78, 0x1EE55E298, (uint64_t)(PlayableDurationAtCurrentTime * 1000.0), 0);
      }
    }
    MEMORY[0x19970E930](*(void *)(DerivedStorage + 1896));
  }
  unsigned int v18 = itemfig_ensureTrackStorageArray();
  if (v18)
  {
LABEL_1214:
    unsigned int alloc = v18;
    CFTypeRef v44 = 0;
    CFDictionaryRef v45 = 0;
    uint64_t v46 = 0;
    CFMutableArrayRef v998 = 0;
    int theArraya = 0;
    free(0);
    goto LABEL_1713;
  }
  if (!a7 && *(unsigned char *)(DerivedStorage + 1697)) {
    itemfig_accumulateFrameDropCountFromAllVideoPipelines((uint64_t)a1);
  }
  uint64_t v988 = DerivedStorage;
  v982 = a1;
  uint64_t v24 = CMBaseObjectGetDerivedStorage();
  uint64_t v25 = *(void *)(v24 + 8);
  uint64_t v26 = CMBaseObjectGetDerivedStorage();
  cf.CMTimeValue value = 0;
  v1026.CMTimeValue value = 0;
  v1048[0] = 0;
  memset(v1047, 0, sizeof(v1047));
  int v27 = *(unsigned __int8 *)(v26 + 1105);
  MEMORY[0x19970E910](*(void *)(v26 + 456));
  uint64_t v28 = *(const void **)(v26 + 464);
  if (v28) {
    CFTypeRef v29 = CFRetain(v28);
  }
  else {
    CFTypeRef v29 = 0;
  }
  MEMORY[0x19970E930](*(void *)(v26 + 456));
  int IsAnAudioDeviceAvailable = FPSupport_IsAnAudioDeviceAvailable((uint64_t)v29);
  *(unsigned char *)(v26 + 1106) = IsAnAudioDeviceAvailable;
  CFAllocatorRef allocator = a5;
  uint64_t theArray = v25;
  if (!IsAnAudioDeviceAvailable)
  {
    if (dword_1E9350BF0)
    {
      LODWORD(valuePtr.value) = 0;
      LOBYTE(type.value) = 0;
      os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v41 = valuePtr.value;
      if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type.value)) {
        unsigned int v42 = v41;
      }
      else {
        unsigned int v42 = v41 & 0xFFFFFFFE;
      }
      uint64_t DerivedStorage = v988;
      if (v42)
      {
        if (v25) {
          uint64_t v43 = (const char *)(CMBaseObjectGetDerivedStorage() + 944);
        }
        else {
          uint64_t v43 = "";
        }
        if (v982) {
          unsigned int v153 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
        }
        else {
          unsigned int v153 = "";
        }
        *(_DWORD *)CMTimeValue value = 136316162;
        *(void *)&value[4] = "itemfig_createRenderTriplesForAudio";
        *(_WORD *)&value[12] = 2048;
        *(void *)&value[14] = v25;
        *(_WORD *)&value[22] = 2082;
        *(void *)&value[24] = v43;
        *(_WORD *)&value[32] = 2048;
        *(void *)&value[34] = v982;
        *(_WORD *)v1031 = 2082;
        *(void *)&v1031[2] = v153;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      uint64_t v64 = 0;
      char v65 = 0;
      unsigned int alloc = 0;
      int v66 = 2;
      a1 = v982;
      if (!v29) {
        goto LABEL_94;
      }
LABEL_93:
      CFRelease(v29);
      goto LABEL_94;
    }
    goto LABEL_90;
  }
  if (*(double *)(v24 + 1968) == 0.0) {
    *(CFAbsoluteTime *)(v24 + 1968) = CFAbsoluteTimeGetCurrent();
  }
  if (!*(unsigned char *)(v26 + 120) || (CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(v24 + 648)), Count < 1))
  {
    int v38 = 0;
    int v39 = 1;
    goto LABEL_55;
  }
  CFIndex v32 = Count;
  int v33 = a4;
  CFTypeRef v34 = v29;
  int v35 = 0;
  CFIndex v36 = 0;
  while (1)
  {
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v24 + 648), v36);
    if (ValueAtIndex[1] != 1936684398 || !*((unsigned char *)ValueAtIndex + 8)) {
      goto LABEL_41;
    }
    if (v35 >= 1) {
      break;
    }
    ++v35;
LABEL_41:
    if (v32 == ++v36)
    {
      int v38 = 0;
      int v39 = 1;
      goto LABEL_54;
    }
  }
  CMNotificationCenterGetDefaultLocalCenter();
  int v38 = 1;
  FigDispatchAsyncPostNotification();
  int v39 = 0;
LABEL_54:
  CFTypeRef v29 = v34;
  a4 = v33;
LABEL_55:
  if (v29) {
    BOOL v47 = 0;
  }
  else {
    BOOL v47 = v27 == 0;
  }
  if (v47) {
    int v27 = 1;
  }
  if ((v939 & 1) == 0)
  {
    if (v27)
    {
LABEL_90:
      uint64_t v64 = 0;
      char v65 = 0;
      unsigned int alloc = 0;
LABEL_91:
      int v66 = 2;
      a1 = v982;
      goto LABEL_92;
    }
    if (!v39)
    {
      uint64_t v64 = 0;
      char v65 = 0;
      unsigned int alloc = -12863;
      goto LABEL_91;
    }
    a1 = v982;
    if (!*(void *)(v26 + 632))
    {
      uint64_t v163 = *(unsigned int *)(v24 + 996);
      if (!v163)
      {
        uint64_t v64 = 0;
        char v65 = 0;
        unsigned int alloc = 0;
        goto LABEL_252;
      }
      if (!itemfig_canTrackPassthrough((uint64_t)v982, v163)) {
        goto LABEL_372;
      }
      if (itemfig_isTrackAtmos((uint64_t)v982, *(unsigned int *)(v24 + 996))) {
        itemfig_isEC3PassthroughSupported();
      }
      if (itemfig_isTrackEnhancedAC3((uint64_t)v982, *(unsigned int *)(v24 + 996))) {
        itemfig_isEC3PassthroughSupported();
      }
      if (itemfig_isTrackAC3((uint64_t)v982, *(unsigned int *)(v24 + 996)))
      {
        int isAC3PassthroughSupported = itemfig_isAC3PassthroughSupported();
        int v165 = isAC3PassthroughSupported != 0;
        if (isAC3PassthroughSupported) {
          int v166 = 1633889587;
        }
        else {
          int v166 = 0;
        }
      }
      else
      {
LABEL_372:
        int v166 = 0;
        int v165 = 0;
      }
      if (v29)
      {
        LODWORD(valuePtr.value) = 2;
        formatDescriptionOut[0].start.CMTimeValue value = 0;
        int v205 = FigAudioSessionCopyMXSessionProperty((uint64_t)v29, *MEMORY[0x1E4F76358], *MEMORY[0x1E4F1CF80], (uint64_t)formatDescriptionOut);
        if (!v205 && formatDescriptionOut[0].start.value)
        {
          TrackAudioChannelCFIndex Count = itemfig_getTrackAudioChannelCount((uint64_t)v982, *(unsigned int *)(v24 + 996));
          CFNumberGetValue((CFNumberRef)formatDescriptionOut[0].start.value, kCFNumberSInt32Type, &valuePtr);
          int v207 = valuePtr.value;
          if (SLODWORD(valuePtr.value) < 3) {
            goto LABEL_381;
          }
          if (TrackAudioChannelCount < SLODWORD(valuePtr.value)) {
            int v207 = TrackAudioChannelCount;
          }
          int v208 = *(_DWORD *)(v26 + 928);
          if (v207 > 2 || v208 >= 3)
          {
            if (v208 == v207) {
              int v205 = 0;
            }
            else {
              int v205 = -12863;
            }
          }
          else
          {
LABEL_381:
            int v205 = 0;
          }
        }
        unsigned int v234 = v205;
        if (itemfig_isTrackDecodable((uint64_t)v982, *(unsigned int *)(v24 + 996)))
        {
          *(_DWORD *)CMTimeValue value = 0;
          if (!itemfig_getMaximumNumberOfSpatializedOutputChannels((uint64_t)v982, (int *)value)
            && *(_DWORD *)value >= 3)
          {
            int v166 = 0;
            int v165 = 0;
          }
        }
        if (formatDescriptionOut[0].start.value) {
          CFRelease((CFTypeRef)formatDescriptionOut[0].start.value);
        }
      }
      else
      {
        unsigned int v234 = 0;
      }
      if (*(unsigned __int8 *)(v26 + 920) == v165 && *(_DWORD *)(v26 + 924) == v166)
      {
        unsigned int alloc = v234;
        uint64_t v64 = 0;
        char v65 = 0;
        goto LABEL_252;
      }
    }
    uint64_t v64 = 0;
    char v65 = 0;
    unsigned int alloc = -12863;
LABEL_252:
    int v66 = 2;
LABEL_92:
    uint64_t DerivedStorage = v988;
    if (!v29) {
      goto LABEL_94;
    }
    goto LABEL_93;
  }
  CFAllocatorRef alloca = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, &kRenderTripleArrayCallbacks);
  if (!Mutable)
  {
    unsigned int alloc = FigSignalErrorAt();
    uint64_t v64 = 0;
    char v65 = 0;
    goto LABEL_91;
  }
  v999 = Mutable;
  if (!*(void *)(v24 + 920) && !*(void *)(v24 + 928))
  {
    uint64_t v154 = *(void *)(v24 + 1216);
    if (v154)
    {
      uint64_t CMBaseObject = FigAssetGetCMBaseObject(v154);
      uint64_t v156 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v157 = v156 ? v156 : 0;
      uint64_t v201 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, uint64_t))(v157 + 48);
      if (v201) {
        v201(CMBaseObject, @"iTunesGaplessInfo", alloca, v24 + 928);
      }
    }
  }
  CFArrayRef v49 = *(const __CFArray **)(v26 + 632);
  uint64_t v50 = theArray;
  if (v49)
  {
    if (CFArrayGetCount(v49) >= 1)
    {
      do
      {
        int v51 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v26 + 632), 0);
        playerfig_removeAudioRenderPipelineListeners(theArray, (uint64_t)v51);
        CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v26 + 632), 0);
      }
      while (CFArrayGetCount(*(CFArrayRef *)(v26 + 632)) > 0);
    }
    uint64_t v52 = *(const void **)(v26 + 632);
    if (v52)
    {
      CFRelease(v52);
      *(void *)(v26 + 632) = 0;
    }
  }
  *(unsigned char *)(v24 + 1826) = 1;
  if (v27) {
    char v53 = 1;
  }
  else {
    char v53 = v39;
  }
  if ((v53 & 1) == 0)
  {
    uint64_t v142 = *(void *)(v26 + 560);
    a1 = v982;
    if (v142)
    {
      if (dword_1E9350BF0 >= 2)
      {
        LODWORD(valuePtr.value) = 0;
        LOBYTE(type.value) = 0;
        uint64_t v143 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v144 = valuePtr.value;
        if (os_log_type_enabled(v143, type.value)) {
          unsigned int v145 = v144;
        }
        else {
          unsigned int v145 = v144 & 0xFFFFFFFE;
        }
        if (v145)
        {
          if (v982) {
            CMTag v146 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
          }
          else {
            CMTag v146 = "";
          }
          *(_DWORD *)CMTimeValue value = 136315650;
          *(void *)&value[4] = "itemfig_createRenderTriplesForAudio";
          *(_WORD *)&value[12] = 2048;
          *(void *)&value[14] = v982;
          *(_WORD *)&value[22] = 2082;
          *(void *)&value[24] = v146;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        uint64_t v142 = *(void *)(v26 + 560);
        a1 = v982;
        uint64_t v50 = theArray;
      }
      playerfig_removeAudioRenderPipelineListeners(v50, v142);
      CFTypeID v175 = *(const void **)(v26 + 560);
      if (v175)
      {
        CFRelease(v175);
        *(void *)(v26 + 560) = 0;
      }
      int v176 = *(const void **)(v26 + 656);
      if (v176)
      {
        CFRelease(v176);
        *(void *)(v26 + 656) = 0;
      }
      char v177 = *(const void **)(v26 + 600);
      if (v177)
      {
        CFRelease(v177);
        *(void *)(v26 + 600) = 0;
      }
      char v178 = *(const void **)(v26 + 608);
      if (v178)
      {
        CFRelease(v178);
        *(void *)(v26 + 608) = 0;
      }
      CFTypeRef v179 = *(const void **)(v26 + 616);
      if (v179)
      {
        CFRelease(v179);
        *(void *)(v26 + 616) = 0;
      }
    }
    FPSupport_ReleasePassthroughHelper();
    *(void *)(v26 + 912) = 0;
    *(void *)(v26 + 632) = CFArrayCreateMutable(alloca, 0, MEMORY[0x1E4F1D510]);
    CFIndex v180 = CFArrayGetCount(*(CFArrayRef *)(v24 + 648));
    if (v180 < 1)
    {
      char v65 = 0;
      int v66 = 2;
    }
    else
    {
      CFIndex v181 = v180;
      char v65 = 0;
      CFIndex v182 = 0;
      int v66 = 2;
      do
      {
        BOOL v183 = (unsigned int *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v24 + 648), v182);
        if (v183[1] == 1936684398)
        {
          unsigned int v184 = v183;
          if (*((unsigned char *)v183 + 8))
          {
            BOOL shouldEnableSpatializationForTrack = itemfig_shouldEnableSpatializationForTrack((uint64_t)a1, *v183);
            int v187 = v184 + 2;
            unsigned int v186 = (const void *)v184[2];
            if (v186)
            {
              CFRelease(v186);
              *int v187 = 0;
            }
            char v188 = shouldEnableSpatializationForTrack;
            a1 = v982;
            if (!fp_buildAudioRenderPipelineForTrack(theArray, (uint64_t)v982, *(unsigned int *)v184, 0, 0, v188, v184 + 2))
            {
              CFArrayAppendValue(*(CFMutableArrayRef *)(v26 + 632), (const void *)v184[2]);
              *(_DWORD *)v1047 = *(_DWORD *)v184;
              *(void *)&v1047[8] = 0;
              *(void *)&v1047[24] = CFRetain((CFTypeRef)v184[2]);
              v1048[0] = 0;
              itemfig_updateVolumeOffset((uint64_t)v982);
              itemfig_applyLoudnessInfo(v982, *(unsigned int *)v184, 0, 0);
              itemfig_applyAudioProcessingUnitsToTrack(v24, (uint64_t)v184);
              if (!itemfig_applyTrackAudioCurvesToTrack((uint64_t)v184)) {
                itemfig_applyItemAudioCurvesToTrack(v24, (uint64_t)v184);
              }
              itemfig_applyAdjustTargetLevel((uint64_t)v982);
              itemfig_applyAdjustCompressionProfile((uint64_t)v982);
              CFNumberRef v189 = CFNumberCreate(alloca, kCFNumberSInt32Type, v184);
              uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(v184[2]);
              uint64_t v191 = *(void *)(CMBaseObjectGetVTable() + 8);
              if (v191) {
                uint64_t v192 = v191;
              }
              else {
                uint64_t v192 = 0;
              }
              int v193 = *(void (**)(uint64_t, __CFString *, CFNumberRef))(v192 + 56);
              if (v193) {
                v193(FigBaseObject, @"TrackID", v189);
              }
              if (v189) {
                CFRelease(v189);
              }
              uint64_t v194 = v184[11];
              if (!v194) {
                uint64_t v194 = *(void *)(v24 + 1432);
              }
              uint64_t v195 = FigRenderPipelineGetFigBaseObject(*v187);
              uint64_t v196 = *(void *)(CMBaseObjectGetVTable() + 8);
              if (v196) {
                uint64_t v197 = v196;
              }
              else {
                uint64_t v197 = 0;
              }
              CFTypeRef v198 = *(void (**)(uint64_t, __CFString *, uint64_t))(v197 + 56);
              if (v198) {
                v198(v195, @"AudioProcessingTap", v194);
              }
              a1 = v982;
              itemfig_applyTimePitchAlgorithmToTrack((uint64_t)v982, (uint64_t)v184);
              char v65 = 1;
              fp_createAudioRenderPipelineOptionsForTrack(v982, *(unsigned int *)v184, 1, v1048);
              CFArrayAppendValue(v999, v1047);
              itemfig_resetRenderTriple((uint64_t)v1047);
              int v66 = 0;
            }
          }
        }
        ++v182;
      }
      while (v181 != v182);
    }
    uint64_t v50 = theArray;
    playerfig_applyEQPreset(theArray);
    playerfig_applySoftwareVolume(theArray, @"SoftwareVolume1", 0, *(float *)(v26 + 764), 0.0);
    if (*(unsigned char *)(v26 + 772)) {
      playerfig_applySoftwareVolume(theArray, @"SoftwareVolume2", 1, *(float *)(v26 + 768), 0.0);
    }
    float v199 = 1.0;
    if (*(unsigned char *)(v26 + 773)) {
      float v199 = 0.0;
    }
    playerfig_applySoftwareVolume(theArray, @"SoftwareVolume5", 1, v199, 0.0);
    goto LABEL_1761;
  }
  int v967 = a4;
  uint64_t v54 = (int *)(v24 + 996);
  uint64_t v55 = *(unsigned int *)(v24 + 996);
  if (!v55 || v27)
  {
    uint64_t v148 = *(void *)(v26 + 560);
    if (v148)
    {
      if (dword_1E9350BF0 >= 2)
      {
        LODWORD(valuePtr.value) = 0;
        LOBYTE(type.value) = 0;
        unsigned int v149 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v150 = valuePtr.value;
        if (os_log_type_enabled(v149, type.value)) {
          unsigned int v151 = v150;
        }
        else {
          unsigned int v151 = v150 & 0xFFFFFFFE;
        }
        if (v151)
        {
          if (v982) {
            int v152 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
          }
          else {
            int v152 = "";
          }
          *(_DWORD *)CMTimeValue value = 136315650;
          *(void *)&value[4] = "itemfig_createRenderTriplesForAudio";
          *(_WORD *)&value[12] = 2048;
          *(void *)&value[14] = v982;
          *(_WORD *)&value[22] = 2082;
          *(void *)&value[24] = v152;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        uint64_t v148 = *(void *)(v26 + 560);
        uint64_t v50 = theArray;
        uint64_t v54 = (int *)(v24 + 996);
      }
      playerfig_removeAudioRenderPipelineListeners(v50, v148);
      CMTime v224 = *(const void **)(v26 + 560);
      if (v224)
      {
        CFRelease(v224);
        *(void *)(v26 + 560) = 0;
      }
      uint64_t v225 = *(const void **)(v26 + 656);
      if (v225)
      {
        CFRelease(v225);
        *(void *)(v26 + 656) = 0;
      }
    }
    if (*(unsigned char *)(v26 + 1105) && ((*v54 == 0) & ~v38) == 0)
    {
      if (dword_1E9350BF0)
      {
        LODWORD(valuePtr.value) = 0;
        LOBYTE(type.value) = 0;
        int v226 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v227 = valuePtr.value;
        if (os_log_type_enabled(v226, type.value)) {
          unsigned int v228 = v227;
        }
        else {
          unsigned int v228 = v227 & 0xFFFFFFFE;
        }
        if (v228)
        {
          if (v982) {
            CMTime v229 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
          }
          else {
            CMTime v229 = "";
          }
          *(_DWORD *)CMTimeValue value = 136315650;
          *(void *)&value[4] = "itemfig_createRenderTriplesForAudio";
          *(_WORD *)&value[12] = 2048;
          *(void *)&value[14] = v982;
          *(_WORD *)&value[22] = 2082;
          *(void *)&value[24] = v229;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        uint64_t v50 = theArray;
      }
      playerfig_removeAudioRenderPipelineListeners(v50, *(void *)(v26 + 560));
    }
    FPSupport_ReleasePassthroughHelper();
    char v65 = 0;
    *(void *)(v26 + 912) = 0;
    int v66 = 2;
    a1 = v982;
    goto LABEL_1761;
  }
  valuePtr.CMTimeValue value = 0;
  a1 = v982;
  int isTrackAC3 = itemfig_isTrackAC3((uint64_t)v982, v55);
  int isTrackEnhancedAC3 = itemfig_isTrackEnhancedAC3((uint64_t)v982, *v54);
  int isTrackAtmos = itemfig_isTrackAtmos((uint64_t)v982, *v54);
  int canTrackPassthrough = itemfig_canTrackPassthrough((uint64_t)v982, *v54);
  BOOL isTrackDecodable = itemfig_isTrackDecodable((uint64_t)v982, *v54);
  LODWORD(formatDescriptionOut[0].start.value) = 0;
  int MaximumNumberOfSpatializedOutputChannels = itemfig_getMaximumNumberOfSpatializedOutputChannels((uint64_t)v982, (int *)formatDescriptionOut);
  if (!v29) {
    goto LABEL_272;
  }
  int v60 = 0;
  BOOL v62 = SLODWORD(formatDescriptionOut[0].start.value) < 3
     || MaximumNumberOfSpatializedOutputChannels != 0
     || !isTrackDecodable;
  if (v62 && isTrackAC3)
  {
    int v63 = 0;
    if (!canTrackPassthrough) {
      goto LABEL_298;
    }
    if (itemfig_isAC3PassthroughSupported())
    {
      int v63 = 1;
      int v60 = 1633889587;
      goto LABEL_298;
    }
LABEL_272:
    int v60 = 0;
    int v63 = 0;
  }
  else
  {
    int v63 = 0;
  }
LABEL_298:
  int v943 = v60;
  int v956 = v63;
  if (dword_1E9350BF0 <= 1)
  {
    if (isTrackDecodable) {
      int v174 = 1;
    }
    else {
      int v174 = v63;
    }
  }
  else
  {
    LODWORD(type.value) = 0;
    v1029[0] = OS_LOG_TYPE_DEFAULT;
    uint64_t v170 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v171 = type.value;
    if (os_log_type_enabled(v170, v1029[0])) {
      unsigned int v172 = v171;
    }
    else {
      unsigned int v172 = v171 & 0xFFFFFFFE;
    }
    if (v172)
    {
      if (v982) {
        CFTypeID v173 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
      }
      else {
        CFTypeID v173 = "";
      }
      *(_DWORD *)CMTimeValue value = 136316418;
      *(void *)&value[4] = "itemfig_createRenderTriplesForAudio";
      *(_WORD *)&value[12] = 2082;
      *(void *)&value[14] = v173;
      *(_WORD *)&value[22] = 1024;
      *(_DWORD *)&value[24] = isTrackDecodable;
      *(_WORD *)&value[28] = 1024;
      *(_DWORD *)&value[30] = isTrackAC3;
      *(_WORD *)&value[34] = 1024;
      *(_DWORD *)&value[36] = isTrackEnhancedAC3;
      *(_WORD *)&value[40] = 1024;
      *(_DWORD *)v1031 = isTrackAtmos;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    if (isTrackDecodable) {
      int v174 = 1;
    }
    else {
      int v174 = v956;
    }
    uint64_t v54 = (int *)(v24 + 996);
    if (v174)
    {
      a1 = v982;
    }
    else
    {
      a1 = v982;
      if (dword_1E9350BF0 >= 2)
      {
        LODWORD(type.value) = 0;
        v1029[0] = OS_LOG_TYPE_DEFAULT;
        char v202 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v203 = type.value;
        if (os_log_type_enabled(v202, v1029[0])) {
          unsigned int v204 = v203;
        }
        else {
          unsigned int v204 = v203 & 0xFFFFFFFE;
        }
        if (v204)
        {
          *(_DWORD *)CMTimeValue value = 136315138;
          *(void *)&value[4] = "itemfig_createRenderTriplesForAudio";
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        int v174 = 0;
        a1 = v982;
      }
    }
  }
  int TrackStorage = itemfig_getTrackStorage((uint64_t)a1, *v54, &valuePtr);
  if (TrackStorage) {
    goto LABEL_408;
  }
  CMTimeValue v210 = valuePtr.value;
  uint64_t v211 = *(const void **)(valuePtr.value + 16);
  if (v211)
  {
    CFRelease(v211);
    *(void *)(v210 + 16) = 0;
  }
  if (!v174)
  {
    uint64_t v216 = *(void *)(v26 + 560);
    uint64_t v50 = theArray;
    if (v216)
    {
      if (dword_1E9350BF0 >= 2)
      {
        LODWORD(type.value) = 0;
        v1029[0] = OS_LOG_TYPE_DEFAULT;
        uint64_t v217 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v218 = type.value;
        if (os_log_type_enabled(v217, v1029[0])) {
          unsigned int v219 = v218;
        }
        else {
          unsigned int v219 = v218 & 0xFFFFFFFE;
        }
        if (v219)
        {
          if (v982) {
            uint64_t v220 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
          }
          else {
            uint64_t v220 = "";
          }
          *(_DWORD *)CMTimeValue value = 136315650;
          *(void *)&value[4] = "itemfig_createRenderTriplesForAudio";
          *(_WORD *)&value[12] = 2048;
          *(void *)&value[14] = v982;
          *(_WORD *)&value[22] = 2082;
          *(void *)&value[24] = v220;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        uint64_t v216 = *(void *)(v26 + 560);
        a1 = v982;
        uint64_t v50 = theArray;
      }
      playerfig_removeAudioRenderPipelineListeners(v50, v216);
      CMTime v235 = *(const void **)(v26 + 560);
      if (v235)
      {
        CFRelease(v235);
        *(void *)(v26 + 560) = 0;
      }
      os_log_type_t v236 = *(const void **)(v26 + 656);
      if (v236)
      {
        CFRelease(v236);
        *(void *)(v26 + 656) = 0;
      }
    }
    FPSupport_ReleasePassthroughHelper();
    char v65 = 0;
    *(void *)(v26 + 912) = 0;
    int v66 = 2;
    goto LABEL_1761;
  }
  *(_DWORD *)v1047 = *v54;
  int TrackStorage = fp_createAudioRenderPipelineOptionsForTrack(a1, *(unsigned int *)v1047, 0, &v1047[8]);
  if (TrackStorage) {
    goto LABEL_408;
  }
  uint64_t v212 = *(void *)(v24 + 968);
  uint64_t v213 = *(unsigned int *)(v24 + 996);
  uint64_t v214 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v214) {
    uint64_t v215 = v214;
  }
  else {
    uint64_t v215 = 0;
  }
  unsigned int v221 = *(uint64_t (**)(uint64_t, uint64_t, CMTime *, void))(v215 + 56);
  if (!v221)
  {
    int TrackStorage = -12782;
    goto LABEL_408;
  }
  int TrackStorage = v221(v212, v213, &cf, 0);
  if (TrackStorage || (int TrackStorage = itemfig_copyFormatDescription(cf.value, &v1026.value)) != 0)
  {
LABEL_408:
    int v66 = 2;
LABEL_409:
    unsigned int alloc = TrackStorage;
    char v65 = 0;
    a1 = v982;
    goto LABEL_1766;
  }
  uint64_t v222 = *(void *)(v24 + 368);
  a1 = v982;
  if (v222) {
    itemfig_reuseExistingRenderPipeline(v222, (uint64_t)v1047);
  }
  uint64_t v223 = *(const void **)&v1047[24];
  if (*(void *)&v1047[24])
  {
    int v66 = 2;
    goto LABEL_1759;
  }
  if (*(void *)(v26 + 560))
  {
    if (v967
      && playerfig_doingGapless()
      && itemfig_canItemAudioTrackReusePreviousItemAudioRenderPipeline((uint64_t)v982))
    {
      if (dword_1E9350BF0)
      {
        LODWORD(type.value) = 0;
        v1029[0] = OS_LOG_TYPE_DEFAULT;
        __int16 v230 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v231 = type.value;
        if (os_log_type_enabled(v230, v1029[0])) {
          unsigned int v232 = v231;
        }
        else {
          unsigned int v232 = v231 & 0xFFFFFFFE;
        }
        if (v232)
        {
          if (v982) {
            CMTime v233 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
          }
          else {
            CMTime v233 = "";
          }
          uint64_t v893 = *(void *)(v26 + 560);
          *(_DWORD *)CMTimeValue value = 136315906;
          *(void *)&value[4] = "itemfig_createRenderTriplesForAudio";
          *(_WORD *)&value[12] = 2048;
          *(void *)&value[14] = v982;
          *(_WORD *)&value[22] = 2082;
          *(void *)&value[24] = v233;
          *(_WORD *)&value[32] = 2048;
          *(void *)&value[34] = v893;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        a1 = v982;
      }
      *(void *)&v1047[24] = CFRetain(*(CFTypeRef *)(v26 + 560));
      v894 = *(const void **)(v26 + 656);
      v895 = (const void *)v1026.value;
      *(void *)(v26 + 656) = v1026.value;
      if (v895) {
        CFRetain(v895);
      }
      if (v894) {
        CFRelease(v894);
      }
      int v66 = 1;
      int TrackStorage = fp_createAudioRenderPipelineOptionsForTrack(a1, *v54, 1, v1048);
      if (!TrackStorage)
      {
        *(unsigned char *)(v24 + 1724) = 1;
        goto LABEL_1757;
      }
      goto LABEL_408;
    }
    int v237 = v943;
    if (dword_1E9350BF0 >= 2)
    {
      LODWORD(type.value) = 0;
      v1029[0] = OS_LOG_TYPE_DEFAULT;
      CMTime v238 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v239 = type.value;
      if (os_log_type_enabled(v238, v1029[0])) {
        unsigned int v240 = v239;
      }
      else {
        unsigned int v240 = v239 & 0xFFFFFFFE;
      }
      if (v240)
      {
        if (v982) {
          CFTypeRef v241 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
        }
        else {
          CFTypeRef v241 = "";
        }
        *(_DWORD *)CMTimeValue value = 136315650;
        *(void *)&value[4] = "itemfig_createRenderTriplesForAudio";
        *(_WORD *)&value[12] = 2048;
        *(void *)&value[14] = v982;
        *(_WORD *)&value[22] = 2082;
        *(void *)&value[24] = v241;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      a1 = v982;
      int v237 = v943;
    }
    playerfig_removeAudioRenderPipelineListeners(theArray, *(void *)(v26 + 560));
    v643 = *(const void **)(v26 + 560);
    if (v643)
    {
      CFRelease(v643);
      *(void *)(v26 + 560) = 0;
    }
    int v66 = 2;
  }
  else
  {
    if (dword_1E9350BF0 < 2)
    {
      int v66 = 2;
    }
    else
    {
      LODWORD(type.value) = 0;
      v1029[0] = OS_LOG_TYPE_DEFAULT;
      CMTime v243 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v244 = type.value;
      if (os_log_type_enabled(v243, v1029[0])) {
        unsigned int v245 = v244;
      }
      else {
        unsigned int v245 = v244 & 0xFFFFFFFE;
      }
      if (v245)
      {
        if (v982) {
          __int16 v246 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
        }
        else {
          __int16 v246 = "";
        }
        *(_DWORD *)CMTimeValue value = 136315650;
        *(void *)&value[4] = "itemfig_createRenderTriplesForAudio";
        *(_WORD *)&value[12] = 2048;
        *(void *)&value[14] = v982;
        *(_WORD *)&value[22] = 2082;
        *(void *)&value[24] = v246;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      int v66 = 2;
      a1 = v982;
    }
LABEL_1757:
    int v237 = v943;
  }
  uint64_t v223 = *(const void **)&v1047[24];
  if (*(void *)&v1047[24])
  {
LABEL_1759:
    *(void *)(v210 + 16) = CFRetain(v223);
    goto LABEL_1760;
  }
  char v896 = itemfig_shouldEnableSpatializationForTrack((uint64_t)a1, *v54);
  int TrackStorage = fp_createAudioRenderPipelineOptionsForTrack(a1, *v54, 1, v1048);
  if (TrackStorage) {
    goto LABEL_409;
  }
  int TrackStorage = fp_buildAudioRenderPipelineForTrack(theArray, (uint64_t)a1, *v54, 1, v956, v896, &v1047[24]);
  if (TrackStorage) {
    goto LABEL_409;
  }
  char v973 = v896;
  if (dword_1E9350BF0)
  {
    v963 = v54;
    LODWORD(type.value) = 0;
    v1029[0] = OS_LOG_TYPE_DEFAULT;
    v897 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v898 = type.value;
    if (os_log_type_enabled(v897, v1029[0])) {
      unsigned int v899 = v898;
    }
    else {
      unsigned int v899 = v898 & 0xFFFFFFFE;
    }
    if (v899)
    {
      if (v982) {
        v900 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
      }
      else {
        v900 = "";
      }
      *(_DWORD *)CMTimeValue value = 136315906;
      *(void *)&value[4] = "itemfig_createRenderTriplesForAudio";
      *(_WORD *)&value[12] = 2048;
      *(void *)&value[14] = v982;
      *(_WORD *)&value[22] = 2082;
      *(void *)&value[24] = v900;
      *(_WORD *)&value[32] = 2048;
      *(void *)&value[34] = *(void *)&v1047[24];
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    a1 = v982;
    uint64_t v54 = v963;
  }
  CFTypeRef v901 = *(CFTypeRef *)&v1047[24];
  if (*(void *)&v1047[24]) {
    CFTypeRef v901 = CFRetain(*(CFTypeRef *)&v1047[24]);
  }
  *(void *)(v26 + 560) = v901;
  *(unsigned char *)(v26 + 920) = v956;
  *(_DWORD *)(v26 + 924) = v237;
  v902 = *(const void **)(v26 + 656);
  v903 = (const void *)v1026.value;
  *(void *)(v26 + 656) = v1026.value;
  if (v903) {
    CFRetain(v903);
  }
  if (v902) {
    CFRelease(v902);
  }
  playerfig_applyEQPreset(theArray);
  playerfig_applySoftwareVolume(theArray, @"SoftwareVolume1", 0, *(float *)(v26 + 764), 0.0);
  if (*(unsigned char *)(v26 + 772)) {
    playerfig_applySoftwareVolume(theArray, @"SoftwareVolume2", 1, *(float *)(v26 + 768), 0.0);
  }
  float v904 = 1.0;
  if (*(unsigned char *)(v26 + 773)) {
    float v904 = 0.0;
  }
  playerfig_applySoftwareVolume(theArray, @"SoftwareVolume5", 1, v904, 0.0);
  CFTypeRef v905 = *(CFTypeRef *)&v1047[24];
  if (*(void *)&v1047[24]) {
    CFTypeRef v905 = CFRetain(*(CFTypeRef *)&v1047[24]);
  }
  *(void *)(v210 + 16) = v905;
  *(unsigned char *)(v24 + 1826) = 0;
  itemfig_applyLoudnessInfo(a1, *(unsigned int *)(v24 + 996), 0, 0);
  itemfig_updateVolumeOffset((uint64_t)a1);
  itemfig_applyAudioProcessingUnitsToTrack(v24, v210);
  itemfig_applyAllAudioCurvesToTrack(v24, v210);
  itemfig_applyAdjustTargetLevel((uint64_t)a1);
  itemfig_applyAdjustCompressionProfile((uint64_t)a1);
  CFNumberRef v906 = CFNumberCreate(alloca, kCFNumberSInt32Type, v54);
  FigRenderPipelineSetProperty_0(*(void *)(v210 + 16), @"TrackID", (uint64_t)v906);
  if (v906) {
    CFRelease(v906);
  }
  v907 = *(const void **)(v210 + 88);
  if (!v907) {
    v907 = *(const void **)(v24 + 1432);
  }
  FigRenderPipelineSetProperty_0(*(void *)(v210 + 16), @"AudioProcessingTap", (uint64_t)v907);
  v908 = *(const void **)(v26 + 600);
  *(void *)(v26 + 600) = v907;
  if (v907) {
    CFRetain(v907);
  }
  if (v908) {
    CFRelease(v908);
  }
  *(unsigned char *)(v26 + 624) = v973;
  a1 = v982;
  itemfig_applyTimePitchAlgorithmToTrack((uint64_t)v982, v210);
  itemfig_applyAudioSceneCompositionPresetToTrack(v210);
  int v66 = 0;
LABEL_1760:
  CFArrayAppendValue(v999, v1047);
  itemfig_resetRenderTriple((uint64_t)v1047);
  char v65 = 1;
  uint64_t v50 = theArray;
LABEL_1761:
  if (v989)
  {
    if (*(_DWORD *)(v26 + 60) == 2)
    {
      playerfig_UpdateAudioSessionPreferredDeviceFormat();
      playerfig_UpdateAudioSessionPreferredDeviceSampleRate();
      playerfig_UpdateAudioSessionPreferredNumberOfAudioOutputChannels(v50);
    }
    itemfig_InformStakeholdersOfBestAvailableAudioContentType((uint64_t)a1);
  }
  unsigned int alloc = 0;
LABEL_1766:
  uint64_t DerivedStorage = v988;
  uint64_t v64 = v999;
  if (v29) {
    goto LABEL_93;
  }
LABEL_94:
  *(void *)&long long v1040 = v64;
  itemfig_resetRenderTriple((uint64_t)v1047);
  if (cf.value) {
    CFRelease((CFTypeRef)cf.value);
  }
  if (v1026.value) {
    CFRelease((CFTypeRef)v1026.value);
  }
  unsigned int v67 = alloc;
  if (!v942 && !alloc) {
    *(unsigned char *)(v24 + 2017) = v65;
  }
  if (allocator) {
    *(_DWORD *)CFAllocatorRef allocator = v66;
  }
  if (*(double *)(v24 + 1976) == 0.0)
  {
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    unsigned int v67 = alloc;
    *(CFAbsoluteTime *)(v24 + 1976) = Current;
  }
  if (v67) {
    goto LABEL_1736;
  }
  uint64_t v69 = CMBaseObjectGetDerivedStorage();
  CFArrayRef v70 = *(const __CFArray **)(v69 + 648);
  if (v70) {
    CFIndex v71 = CFArrayGetCount(v70);
  }
  else {
    CFIndex v71 = 0;
  }
  memset(value, 0, 40);
  if ((v939 & 1) == 0)
  {
    FigXMLNodeGetTag(*(void *)(v69 + 1760));
    CFTypeID v74 = 0;
    if (FigCFDictionaryGetCount() < 1 || v71 < 1) {
      goto LABEL_144;
    }
    CFIndex v88 = 0;
    while (*((_DWORD *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v69 + 648), v88) + 1) != 1835365473)
    {
      if (v71 == ++v88)
      {
        CFTypeID v74 = 0;
        goto LABEL_144;
      }
    }
    itemfig_resetRenderTriple((uint64_t)value);
    CFTypeRef v44 = 0;
    CFDictionaryRef v45 = 0;
    uint64_t v46 = 0;
    CMTag v147 = 0;
    CFMutableArrayRef v998 = 0;
    allocatorb = 0;
    int theArraya = 0;
    *((void *)&v1040 + 1) = 0;
    unsigned int alloc = -12863;
    goto LABEL_248;
  }
  CFAllocatorRef v72 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef v73 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, &kRenderTripleArrayCallbacks);
  if (!v73)
  {
    unsigned int v644 = FigSignalErrorAt();
    itemfig_resetRenderTriple((uint64_t)value);
    *((void *)&v1040 + 1) = 0;
    if (!v644) {
      goto LABEL_145;
    }
    unsigned int alloc = v644;
    goto LABEL_1744;
  }
  CFTypeID v74 = v73;
  FigXMLNodeGetTag(*(void *)(v69 + 1760));
  if (FigCFDictionaryGetCount() >= 1)
  {
    CFDictionaryRef MutableCopy = CFArrayCreateMutableCopy(v72, 0, *(CFArrayRef *)(v69 + 1768));
    if (v71 >= 1)
    {
      for (CFIndex i = 0; i != v71; ++i)
      {
        CFTypeRef v77 = (unsigned int *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v69 + 648), i);
        unsigned int v78 = *v77;
        cf.CMTimeValue value = 0;
        if (v77[1] == 1835365473)
        {
          int v79 = FPSupport_CreateAndAddMetadataOutputRenderPipelinesForTrackWithID(*(void *)(v69 + 1760), v78, &cf);
          if (v79)
          {
            int v80 = v79;
            LODWORD(v1026.value) = 0;
            LOBYTE(valuePtr.value) = 0;
            uint64_t v81 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int v82 = v1026.value;
            if (os_log_type_enabled(v81, valuePtr.value)) {
              unsigned int v83 = v82;
            }
            else {
              unsigned int v83 = v82 & 0xFFFFFFFE;
            }
            if (v83)
            {
              *(_DWORD *)v1047 = 136315394;
              *(void *)&v1047[4] = "itemfig_createRenderTriplesForMetadataOutputs";
              *(_WORD *)&v1047[12] = 1024;
              *(_DWORD *)&v1047[14] = v80;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            uint64_t DerivedStorage = v988;
          }
          else if (CFArrayGetCount((CFArrayRef)cf.value) >= 1)
          {
            CFIndex v84 = 0;
            do
            {
              uint64_t v85 = CFArrayGetValueAtIndex((CFArrayRef)cf.value, v84);
              CFArrayAppendValue(MutableCopy, v85);
              *(_DWORD *)CMTimeValue value = v78;
              if (v85) {
                CFTypeRef v86 = CFRetain(v85);
              }
              else {
                CFTypeRef v86 = 0;
              }
              *(void *)&value[24] = v86;
              CFArrayAppendValue(v74, value);
              itemfig_resetRenderTriple((uint64_t)value);
              ++v84;
            }
            while (v84 < CFArrayGetCount((CFArrayRef)cf.value));
          }
          if (cf.value) {
            CFRelease((CFTypeRef)cf.value);
          }
        }
      }
    }
    uint64_t v87 = *(const void **)(v69 + 1768);
    *(void *)(v69 + 1768) = MutableCopy;
    if (MutableCopy) {
      CFRetain(MutableCopy);
    }
    if (v87) {
      CFRelease(v87);
    }
    if (MutableCopy) {
      CFRelease(MutableCopy);
    }
  }
LABEL_144:
  itemfig_resetRenderTriple((uint64_t)value);
  *((void *)&v1040 + 1) = v74;
LABEL_145:
  uint64_t v89 = CMBaseObjectGetDerivedStorage();
  uint64_t v90 = CMBaseObjectGetDerivedStorage();
  CFIndex v91 = CFArrayGetCount(*(CFArrayRef *)(v89 + 648));
  int v92 = *(unsigned __int8 *)(v89 + 1023);
  MEMORY[0x19970E910](*(void *)(v90 + 456));
  unsigned int v93 = *(const void **)(v90 + 464);
  if (v93) {
    CFTypeRef v94 = CFRetain(v93);
  }
  else {
    CFTypeRef v94 = 0;
  }
  MEMORY[0x19970E930](*(void *)(v90 + 456));
  if (v94) {
    BOOL v95 = 1;
  }
  else {
    BOOL v95 = v92 == 0;
  }
  if (v95) {
    int v96 = v92;
  }
  else {
    int v96 = 0;
  }
  if (v942 && v91 >= 1)
  {
    for (CFIndex j = 0; v91 != j; ++j)
    {
      CFArrayRef v98 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v89 + 648), j);
      if (*((_DWORD *)v98 + 1) == 1751216244)
      {
        if (v96 && *((unsigned char *)v98 + 8))
        {
          if (!v98[2]) {
            goto LABEL_445;
          }
        }
        else if (v98[2])
        {
LABEL_445:
          theArrayb = 0;
          CFTypeRef v108 = 0;
          LODWORD(v107) = -12863;
          goto LABEL_1230;
        }
      }
    }
  }
  if (v91 < 1)
  {
    CFIndex v100 = 0;
  }
  else
  {
    CFIndex v99 = 0;
    CFIndex v100 = 0;
    do
    {
      uint64_t v101 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v89 + 648), v99);
      if (*((_DWORD *)v101 + 1) == 1751216244)
      {
        uint64_t v102 = v101;
        if (v96 && *((unsigned char *)v101 + 8))
        {
          ++v100;
        }
        else
        {
          uint64_t v103 = (const void *)v101[2];
          if (v103)
          {
            CFRelease(v103);
            v102[2] = 0;
          }
        }
      }
      ++v99;
    }
    while (v91 != v99);
  }
  CFIndex v104 = *(const void **)(v90 + 648);
  if (v104)
  {
    CFRelease(v104);
    *(void *)(v90 + 648) = 0;
  }
  CFAllocatorRef allocatora = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  theArrayb = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v100, &kRenderTripleArrayCallbacks);
  if (!theArrayb)
  {
    LODWORD(v107) = FigSignalErrorAt();
    theArrayb = 0;
    goto LABEL_1229;
  }
  if (v100 <= 0)
  {
    CFTypeRef v107 = *(const void **)(v89 + 1024);
    a1 = v982;
    uint64_t v106 = v938;
    if (v107)
    {
      CFRelease(v107);
      LODWORD(v107) = 0;
      CFTypeRef v108 = 0;
      *(void *)(v89 + 1024) = 0;
    }
    else
    {
      CFTypeRef v108 = 0;
    }
    goto LABEL_221;
  }
  CFMutableArrayRef v105 = CFArrayCreateMutable(allocatora, v100, MEMORY[0x1E4F1D510]);
  *(void *)(v90 + 648) = v105;
  if (!v105)
  {
    LODWORD(v107) = FigSignalErrorAt();
LABEL_1229:
    CFTypeRef v108 = 0;
LABEL_1230:
    a1 = v982;
    uint64_t v106 = v938;
    goto LABEL_221;
  }
  uint64_t v106 = v938;
  if (*(void *)(v89 + 1024))
  {
    if (v91 < 1)
    {
      LODWORD(v107) = 0;
      CFTypeRef v108 = 0;
      goto LABEL_220;
    }
LABEL_185:
    CFTypeRef v952 = v94;
    CFIndex v109 = 0;
    CFTypeRef v108 = 0;
    CFTypeRef v959 = (CFTypeRef)*MEMORY[0x1E4F1CFD0];
    do
    {
      uint64_t v110 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v89 + 648), v109);
      if (*((_DWORD *)v110 + 1) == 1751216244)
      {
        uint64_t v111 = v110;
        if (*((unsigned char *)v110 + 8))
        {
          unsigned int v112 = v110 + 2;
          if (v110[2]
            || !FigHapticRenderPipelineCreate(allocatora, 0, *(const void **)(v89 + 1024), (CFTypeRef *)v110 + 2))
          {
            MEMORY[0x19970E910](*(void *)(v90 + 24));
            unsigned int v113 = *(const void **)(v90 + 16);
            if (v113)
            {
              CFTypeRef v108 = CFRetain(v113);
              MEMORY[0x19970E930](*(void *)(v90 + 24));
              if (v108)
              {
                uint64_t v114 = FigRenderPipelineGetFigBaseObject(*v112);
                uint64_t v115 = *(void *)(CMBaseObjectGetVTable() + 8);
                uint64_t v116 = v115 ? v115 : 0;
                unsigned int v117 = *(void (**)(uint64_t, __CFString *, CFTypeRef))(v116 + 56);
                if (v117) {
                  v117(v114, @"STSLabel", v108);
                }
              }
            }
            else
            {
              MEMORY[0x19970E930](*(void *)(v90 + 24));
              CFTypeRef v108 = 0;
            }
            uint64_t v118 = v111[22];
            if (v118)
            {
              uint64_t v119 = FigRenderPipelineGetFigBaseObject(*v112);
              uint64_t v120 = *(void *)(CMBaseObjectGetVTable() + 8);
              uint64_t v121 = v120 ? v120 : 0;
              CFTypeRef v122 = *(void (**)(uint64_t, __CFString *, uint64_t))(v121 + 56);
              if (v122) {
                v122(v119, @"ActiveHapticChannelIndex", v118);
              }
            }
            uint64_t v123 = v111[23];
            if (v123)
            {
              uint64_t v124 = FigRenderPipelineGetFigBaseObject(*v112);
              uint64_t v125 = *(void *)(CMBaseObjectGetVTable() + 8);
              uint64_t v126 = v125 ? v125 : 0;
              __int16 v127 = *(void (**)(uint64_t, __CFString *, uint64_t))(v126 + 56);
              if (v127) {
                v127(v124, @"SoftwareVolume1", v123);
              }
            }
            uint64_t DerivedStorage = v988;
            if (*((unsigned char *)v111 + 9))
            {
              uint64_t v128 = FigRenderPipelineGetFigBaseObject(*v112);
              uint64_t v129 = *(void *)(CMBaseObjectGetVTable() + 8);
              uint64_t v130 = v129 ? v129 : 0;
              uint64_t v131 = *(void (**)(uint64_t, __CFString *, CFTypeRef))(v130 + 56);
              if (v131) {
                v131(v128, @"Muted", v959);
              }
            }
            CFArrayAppendValue(*(CFMutableArrayRef *)(v90 + 648), (const void *)v111[2]);
            memset(formatDescriptionOut, 0, 40);
            LODWORD(formatDescriptionOut[0].start.value) = *(_DWORD *)v111;
            formatDescriptionOut[0].duration.CMTimeValue value = v111[2];
            CFArrayAppendValue(theArrayb, formatDescriptionOut);
          }
        }
      }
      ++v109;
    }
    while (v91 != v109);
    LODWORD(v107) = 0;
    a1 = v982;
    uint64_t v106 = v938;
    CFTypeRef v94 = v952;
  }
  else
  {
    LODWORD(v107) = FigHapticEngineCreate((uint64_t)allocatora, (uint64_t)v94, *(void **)(v89 + 1032), (uint64_t *)(v89 + 1024));
    CFTypeRef v108 = 0;
    if (!v107 && v91 > 0) {
      goto LABEL_185;
    }
LABEL_220:
    a1 = v982;
  }
LABEL_221:
  unsigned int alloc = v107;
  if (v94)
  {
    CFRelease(v94);
    LODWORD(v107) = alloc;
  }
  if (v108)
  {
    CFRelease(v108);
    LODWORD(v107) = alloc;
  }
  *(void *)&long long v1041 = theArrayb;
  if (v107) {
    goto LABEL_1736;
  }
  unsigned int RenderTriplesForVideo = itemfig_createRenderTriplesForVideo(a1, v942, a8 & 1, v989, a2, a3, v934, (__CFArray **)&v1041 + 1, (__CFArray **)&v1044, (__CFArray **)&v1046);
  if (RenderTriplesForVideo)
  {
    unsigned int alloc = RenderTriplesForVideo;
    goto LABEL_1736;
  }
  if (!FigRenderedLegibleOutputManagerIsSupported()) {
    goto LABEL_537;
  }
  uint64_t v133 = CMBaseObjectGetDerivedStorage();
  uint64_t v134 = CMBaseObjectGetDerivedStorage();
  *(void *)v1047 = 0;
  cf.CMTimeValue value = 0;
  memset(formatDescriptionOut, 0, 40);
  if (!v939)
  {
    unsigned int alloc = 0;
    CFTypeRef v136 = 0;
    goto LABEL_491;
  }
  uint64_t v135 = v134;
  CFTypeRef v136 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, &kRenderTripleArrayCallbacks);
  if (!v136)
  {
    unsigned int CommonRenderPipelineOptionsForTrack = FigSignalErrorAt();
LABEL_1738:
    unsigned int alloc = CommonRenderPipelineOptionsForTrack;
    goto LABEL_491;
  }
  CFTypeRef v137 = *(const void **)(v135 + 576);
  if (v137)
  {
    CFRelease(v137);
    *(void *)(v135 + 576) = 0;
  }
  FPSupport_resetClosedCaptionLayer(v135 + 296);
  uint64_t v138 = *(unsigned int *)(v133 + 1008);
  if (!v138 || *(unsigned char *)(v133 + 1825)) {
    goto LABEL_490;
  }
  LODWORD(formatDescriptionOut[0].start.value) = *(_DWORD *)(v133 + 1008);
  *(_OWORD *)theArrayc = *MEMORY[0x1E4F1F9F8];
  *(_OWORD *)CMTimeValue value = *MEMORY[0x1E4F1F9F8];
  uint64_t v139 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  *(void *)&value[16] = v139;
  unsigned int CommonRenderPipelineOptionsForTrack = fp_createCommonRenderPipelineOptionsForTrack(v982, 0, (uint64_t)value, v138, 1668047728, 0, (__CFDictionary **)&formatDescriptionOut[0].start.timescale);
  if (CommonRenderPipelineOptionsForTrack) {
    goto LABEL_1738;
  }
  itemfig_reuseExistingRenderPipeline(*(void *)(v133 + 400), (uint64_t)formatDescriptionOut);
  long long v141 = (const void *)formatDescriptionOut[0].duration.value;
  if (*(unsigned char *)(v135 + 122) && formatDescriptionOut[0].duration.value)
  {
    CFRelease((CFTypeRef)formatDescriptionOut[0].duration.value);
    formatDescriptionOut[0].duration.CMTimeValue value = 0;
    goto LABEL_274;
  }
  if (formatDescriptionOut[0].duration.value)
  {
LABEL_482:
    long long v141 = CFRetain(v141);
    goto LABEL_483;
  }
LABEL_274:
  uint64_t v158 = *(unsigned int *)(v133 + 1008);
  *(_OWORD *)CMTimeValue value = *(_OWORD *)theArrayc;
  *(void *)&value[16] = v139;
  unsigned int CommonRenderPipelineOptionsForTrack = fp_createCommonRenderPipelineOptionsForTrack(v982, 0, (uint64_t)value, v158, 1668047728, 1, (__CFDictionary **)&formatDescriptionOut[0].duration.timescale);
  if (CommonRenderPipelineOptionsForTrack) {
    goto LABEL_1738;
  }
  uint64_t v159 = *(void *)(v133 + 968);
  uint64_t v160 = *(unsigned int *)(v133 + 1008);
  uint64_t v161 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v161) {
    uint64_t v162 = v161;
  }
  else {
    uint64_t v162 = 0;
  }
  uint64_t v167 = *(uint64_t (**)(uint64_t, uint64_t, unsigned char *, void))(v162 + 56);
  if (!v167)
  {
    unsigned int alloc = -12782;
    goto LABEL_491;
  }
  unsigned int CommonRenderPipelineOptionsForTrack = v167(v159, v160, v1047, 0);
  if (CommonRenderPipelineOptionsForTrack) {
    goto LABEL_1738;
  }
  unsigned int CommonRenderPipelineOptionsForTrack = itemfig_copyFormatDescription(*(uint64_t *)v1047, &cf.value);
  if (CommonRenderPipelineOptionsForTrack) {
    goto LABEL_1738;
  }
  if (*(unsigned char *)(v135 + 122) && *(unsigned char *)(v135 + 123))
  {
    MEMORY[0x19970E910](*(void *)(v135 + 152));
    uint64_t v168 = *(const void **)(v135 + 160);
    if (v168) {
      CFTypeRef v169 = CFRetain(v168);
    }
    else {
      CFTypeRef v169 = 0;
    }
    MEMORY[0x19970E930](*(void *)(v135 + 152));
    CFTypeRef v200 = (const opaqueCMFormatDescription *)cf.value;
    unsigned int CommonRenderPipelineOptionsForTrack = FigCreateOctaviaClosedCaptionsRenderPipeline((const opaqueCMFormatDescription *)cf.value, 0, v169, (CFTypeRef *)&formatDescriptionOut[0].duration);
    if (v169)
    {
      unsigned int v242 = CommonRenderPipelineOptionsForTrack;
      CFRelease(v169);
      unsigned int CommonRenderPipelineOptionsForTrack = v242;
    }
    if (!CommonRenderPipelineOptionsForTrack)
    {
      if (formatDescriptionOut[0].duration.value) {
        unsigned int CommonRenderPipelineOptionsForTrack = fp_setDisplaySizeAndItemVideoSizeOnTextRenderPipeline(formatDescriptionOut[0].duration.value, *(double *)(v135 + 128), *(double *)(v135 + 136), *(void *)(v135 + 144), v982);
      }
      else {
        unsigned int CommonRenderPipelineOptionsForTrack = 0;
      }
    }
  }
  else
  {
    CFTypeRef v200 = (const opaqueCMFormatDescription *)cf.value;
    *(_OWORD *)CMTimeValue value = *MEMORY[0x1E4F1FA48];
    *(void *)&value[16] = *(void *)(MEMORY[0x1E4F1FA48] + 16);
    unsigned int CommonRenderPipelineOptionsForTrack = FigCreateClosedCaptionRenderPipeline((const opaqueCMFormatDescription *)cf.value, (uint64_t)fp_postClosedCaptionNotificationIfEnabled, (uint64_t)v982, 0, 0, (long long *)value, 0, (CFTypeRef *)&formatDescriptionOut[0].duration);
  }
  if (CommonRenderPipelineOptionsForTrack) {
    goto LABEL_1738;
  }
  unsigned int CommonRenderPipelineOptionsForTrack = itemfig_prepareClosedCaptionRenderPipeline(formatDescriptionOut[0].duration.value, v200);
  if (CommonRenderPipelineOptionsForTrack) {
    goto LABEL_1738;
  }
  CMTime v247 = *(const void **)(v135 + 664);
  *(void *)(v135 + 664) = v200;
  if (v200) {
    CFRetain(v200);
  }
  if (v247) {
    CFRelease(v247);
  }
  long long v141 = (const void *)formatDescriptionOut[0].duration.value;
  if (formatDescriptionOut[0].duration.value) {
    goto LABEL_482;
  }
LABEL_483:
  *(void *)(v135 + 576) = v141;
  CFArrayAppendValue(v136, formatDescriptionOut);
  uint64_t v248 = *(void *)(v133 + 1840);
  if (v248)
  {
    uint64_t v249 = FigRenderPipelineGetFigBaseObject(*(void *)(v135 + 576));
    uint64_t v250 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v251 = v250 ? v250 : 0;
    __int16 v252 = *(void (**)(uint64_t, __CFString *, uint64_t))(v251 + 56);
    if (v252) {
      v252(v249, @"CCRPP_TextHighlightArray", v248);
    }
  }
  itemfig_resetRenderTriple((uint64_t)formatDescriptionOut);
LABEL_490:
  unsigned int alloc = 0;
LABEL_491:
  a1 = v982;
  itemfig_resetRenderTriple((uint64_t)formatDescriptionOut);
  *(void *)&long long v1042 = v136;
  if (*(void *)v1047) {
    CFRelease(*(CFTypeRef *)v1047);
  }
  if (cf.value) {
    CFRelease((CFTypeRef)cf.value);
  }
  if (alloc) {
    goto LABEL_1736;
  }
  uint64_t v253 = CMBaseObjectGetDerivedStorage();
  *(void *)v1047 = 0;
  cf.CMTimeValue value = 0;
  memset(formatDescriptionOut, 0, 40);
  if (!v939)
  {
    CFArrayRef v267 = 0;
    unsigned int v255 = 0;
LABEL_510:
    unsigned int alloc = 0;
    goto LABEL_529;
  }
  uint64_t v254 = v253;
  unsigned int v255 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, &kRenderTripleArrayCallbacks);
  if (!v255)
  {
    unsigned int alloc = FigSignalErrorAt();
    CFArrayRef v267 = 0;
    goto LABEL_529;
  }
  CFArrayRef v256 = *(const __CFArray **)(v254 + 408);
  if (v256)
  {
    CFIndex v257 = CFArrayGetCount(v256);
    if (v257 >= 1)
    {
      CFIndex v258 = v257;
      for (CFIndex k = 0; k != v258; ++k)
      {
        __int16 v260 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v254 + 408), k);
        if (*(_DWORD *)v260 != *(_DWORD *)(v254 + 1008)) {
          FigLegibleOutputManagerForgetAboutLegibleOutputRenderPipeline(*(void *)(v254 + 1744), v260[3]);
        }
      }
    }
  }
  if (!*(void *)(v254 + 1752))
  {
    CFArrayRef v267 = 0;
LABEL_512:
    unsigned int alloc = 0;
    goto LABEL_528;
  }
  a1 = v982;
  if (!*(_DWORD *)(v254 + 1008))
  {
    CFArrayRef v267 = 0;
    goto LABEL_510;
  }
  LODWORD(v1026.value) = 0;
  LODWORD(valuePtr.value) = 0;
  itemfig_GetDimensions(v982, (float *)&v1026, (float *)&valuePtr);
  FigLegibleOutputManagerSetVideoDisplaySize(*(dispatch_queue_t **)(v254 + 1744), *(float *)&v1026.value, *(float *)&valuePtr.value);
  uint64_t v261 = *(unsigned int *)(v254 + 1008);
  *(_OWORD *)CMTimeValue value = *MEMORY[0x1E4F1F9F8];
  *(void *)&value[16] = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  int v262 = fp_createCommonRenderPipelineOptionsForTrack(v982, 0, (uint64_t)value, v261, 1668047728, 1, (__CFDictionary **)&formatDescriptionOut[0].duration.timescale);
  if (v262)
  {
LABEL_527:
    unsigned int alloc = v262;
    CFArrayRef v267 = 0;
    goto LABEL_528;
  }
  uint64_t v263 = *(void *)(v254 + 968);
  uint64_t v264 = *(unsigned int *)(v254 + 1008);
  uint64_t v265 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v265) {
    uint64_t v266 = v265;
  }
  else {
    uint64_t v266 = 0;
  }
  Float64 v268 = *(uint64_t (**)(uint64_t, uint64_t, unsigned char *, void))(v266 + 56);
  if (!v268)
  {
    int v262 = -12782;
    goto LABEL_527;
  }
  int v262 = v268(v263, v264, v1047, 0);
  if (v262) {
    goto LABEL_527;
  }
  int v262 = itemfig_copyFormatDescription(*(uint64_t *)v1047, &cf.value);
  if (v262) {
    goto LABEL_527;
  }
  int v269 = (const opaqueCMFormatDescription *)cf.value;
  CFArrayRef v270 = FigLegibleOutputManagerEnsureRenderPipelinesForFormat(*(dispatch_queue_t **)(v254 + 1744), (const void *)cf.value);
  CFArrayRef v267 = v270;
  if (!v270) {
    goto LABEL_512;
  }
  CFIndex v271 = CFArrayGetCount(v270);
  if (v271 < 1) {
    goto LABEL_512;
  }
  CFIndex v272 = v271;
  CFIndex v273 = 0;
  while (1)
  {
    LODWORD(formatDescriptionOut[0].start.value) = *(_DWORD *)(v254 + 1008);
    uint64_t v274 = CFArrayGetValueAtIndex(v267, v273);
    if (v274) {
      uint64_t v274 = CFRetain(v274);
    }
    formatDescriptionOut[0].duration.CMTimeValue value = (CMTimeValue)v274;
    unsigned int v275 = itemfig_prepareClosedCaptionRenderPipeline((uint64_t)v274, v269);
    if (v275) {
      break;
    }
    CFArrayAppendValue(v255, formatDescriptionOut);
    itemfig_resetRenderTriple((uint64_t)formatDescriptionOut);
    if (v272 == ++v273) {
      goto LABEL_512;
    }
  }
  unsigned int alloc = v275;
LABEL_528:
  a1 = v982;
LABEL_529:
  itemfig_resetRenderTriple((uint64_t)formatDescriptionOut);
  *((void *)&v1042 + 1) = v255;
  if (*(void *)v1047) {
    CFRelease(*(CFTypeRef *)v1047);
  }
  uint64_t v106 = v938;
  if (cf.value) {
    CFRelease((CFTypeRef)cf.value);
  }
  if (v267) {
    CFRelease(v267);
  }
  if (alloc) {
    goto LABEL_1736;
  }
  playerfig_updateClosedCaptionsDisplayForItem(v933, (uint64_t)a1);
LABEL_537:
  if (!FigRenderedLegibleOutputManagerIsSupported()) {
    goto LABEL_677;
  }
  uint64_t v276 = CMBaseObjectGetDerivedStorage();
  uint64_t v277 = *(void *)(v276 + 8);
  uint64_t v278 = CMBaseObjectGetDerivedStorage();
  *(void *)v1047 = 0;
  cf.CMTimeValue value = 0;
  memset(formatDescriptionOut, 0, 40);
  if (!v939)
  {
    unsigned int alloc = 0;
    Float64 v281 = 0;
    goto LABEL_606;
  }
  uint64_t v279 = v278;
  uint64_t v280 = *MEMORY[0x1E4F1CF80];
  Float64 v281 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, &kRenderTripleArrayCallbacks);
  if (!v281)
  {
    int v285 = FigSignalErrorAt();
    goto LABEL_567;
  }
  Float64 v282 = *(const void **)(v279 + 584);
  if (v282)
  {
    CFRelease(v282);
    *(void *)(v279 + 584) = 0;
  }
  uint64_t v283 = *(unsigned int *)(v276 + 1016);
  if (!v283 || *(unsigned char *)(v276 + 1825)) {
    goto LABEL_605;
  }
  LODWORD(formatDescriptionOut[0].start.value) = *(_DWORD *)(v276 + 1016);
  *(_OWORD *)theArrayd = *MEMORY[0x1E4F1F9F8];
  *(_OWORD *)CMTimeValue value = *MEMORY[0x1E4F1F9F8];
  uint64_t v284 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  *(void *)&value[16] = v284;
  int v285 = fp_createCommonRenderPipelineOptionsForTrack(v982, 0, (uint64_t)value, v283, 1935832172, 0, (__CFDictionary **)&formatDescriptionOut[0].start.timescale);
  if (v285) {
    goto LABEL_567;
  }
  itemfig_reuseExistingRenderPipeline(*(void *)(v276 + 416), (uint64_t)formatDescriptionOut);
  v286 = (const void *)formatDescriptionOut[0].duration.value;
  if (*(unsigned char *)(v279 + 122) && formatDescriptionOut[0].duration.value)
  {
    CFRelease((CFTypeRef)formatDescriptionOut[0].duration.value);
    formatDescriptionOut[0].duration.CMTimeValue value = 0;
    goto LABEL_550;
  }
  if (formatDescriptionOut[0].duration.value)
  {
LABEL_603:
    v286 = CFRetain(v286);
    goto LABEL_604;
  }
LABEL_550:
  v1026.CMTimeValue value = 0;
  uint64_t v287 = *(unsigned int *)(v276 + 1016);
  *(_OWORD *)CMTimeValue value = *(_OWORD *)theArrayd;
  *(void *)&value[16] = v284;
  int v285 = fp_createCommonRenderPipelineOptionsForTrack(v982, 0, (uint64_t)value, v287, 1935832172, 1, (__CFDictionary **)&formatDescriptionOut[0].duration.timescale);
  if (v285) {
    goto LABEL_567;
  }
  uint64_t v288 = *(void *)(v276 + 968);
  uint64_t v289 = *(unsigned int *)(v276 + 1016);
  uint64_t v290 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v290) {
    uint64_t v291 = v290;
  }
  else {
    uint64_t v291 = 0;
  }
  uint64_t v292 = *(uint64_t (**)(uint64_t, uint64_t, unsigned char *, void))(v291 + 56);
  if (!v292)
  {
    int v285 = -12782;
LABEL_567:
    unsigned int alloc = v285;
    goto LABEL_606;
  }
  int v285 = v292(v288, v289, v1047, 0);
  if (v285) {
    goto LABEL_567;
  }
  int v285 = itemfig_copyFormatDescription(*(uint64_t *)v1047, &cf.value);
  if (v285) {
    goto LABEL_567;
  }
  v293 = *(const void **)(v279 + 672);
  v294 = (const void *)cf.value;
  *(void *)(v279 + 672) = cf.value;
  if (v294) {
    CFRetain(v294);
  }
  if (v293) {
    CFRelease(v293);
  }
  if (*(unsigned char *)(v279 + 122) && *(unsigned char *)(v279 + 123) || *(unsigned char *)(v279 + 185))
  {
    MEMORY[0x19970E910](*(void *)(v279 + 152));
    unsigned int v295 = *(const void **)(v279 + 160);
    if (v295) {
      CFTypeRef v296 = CFRetain(v295);
    }
    else {
      CFTypeRef v296 = 0;
    }
    MEMORY[0x19970E930](*(void *)(v279 + 152));
    int OctaviaSubtitleRenderPipeline = FigCreateOctaviaSubtitleRenderPipeline((const opaqueCMFormatDescription *)v294, 0, v296, (CFTypeRef *)&formatDescriptionOut[0].duration);
    if (v296)
    {
      int v298 = OctaviaSubtitleRenderPipeline;
      CFRelease(v296);
      int OctaviaSubtitleRenderPipeline = v298;
    }
    int v299 = OctaviaSubtitleRenderPipeline;
    if (!OctaviaSubtitleRenderPipeline && formatDescriptionOut[0].duration.value)
    {
      int SubtitleRenderPipeline = fp_setDisplaySizeAndItemVideoSizeOnTextRenderPipeline(formatDescriptionOut[0].duration.value, *(double *)(v279 + 128), *(double *)(v279 + 136), *(void *)(v279 + 144), v982);
      goto LABEL_577;
    }
  }
  else
  {
    if (*(unsigned char *)(v279 + 781))
    {
      *(_OWORD *)CMTimeValue value = *MEMORY[0x1E4F1FA48];
      *(void *)&value[16] = *(void *)(MEMORY[0x1E4F1FA48] + 16);
      int SubtitleRenderPipeline = FigCreateSubtitleRenderPipeline((uint64_t)v294, (uint64_t)playerfig_postSubtitleNotificationIfEnabled, v277, 0, 0, 0, 0, 0, (long long *)value, 0, (CFTypeRef *)&formatDescriptionOut[0].duration);
    }
    else
    {
      *(_OWORD *)CMTimeValue value = *MEMORY[0x1E4F1FA48];
      *(void *)&value[16] = *(void *)(MEMORY[0x1E4F1FA48] + 16);
      int SubtitleRenderPipeline = FigCreateCaptionRenderPipeline((uint64_t)v294, (uint64_t)playerfig_postCaptionNotificationIfEnabled, v277, 0, 0, 0, 0, 0, (long long *)value, 0, (CFTypeRef *)&formatDescriptionOut[0].duration);
    }
LABEL_577:
    int v299 = SubtitleRenderPipeline;
  }
  int v285 = v299;
  if (v299) {
    goto LABEL_567;
  }
  if (*(unsigned char *)(v279 + 688) && *(unsigned char *)(v276 + 1020)) {
    uint64_t v301 = (uint64_t *)MEMORY[0x1E4F1CFD0];
  }
  else {
    uint64_t v301 = (uint64_t *)MEMORY[0x1E4F1CFC8];
  }
  uint64_t v302 = *v301;
  uint64_t v303 = FigRenderPipelineGetFigBaseObject(formatDescriptionOut[0].duration.value);
  uint64_t v304 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v304) {
    uint64_t v305 = v304;
  }
  else {
    uint64_t v305 = 0;
  }
  uint64_t v306 = *(void (**)(uint64_t, __CFString *, uint64_t))(v305 + 56);
  if (v306) {
    v306(v303, @"DisplayNonForcedSubtitles", v302);
  }
  uint64_t v307 = FigTrackReaderGetFigBaseObject(*(void *)v1047);
  uint64_t v308 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v308) {
    uint64_t v309 = v308;
  }
  else {
    uint64_t v309 = 0;
  }
  CFTypeRef v310 = *(void (**)(uint64_t, __CFString *, uint64_t, CMTime *))(v309 + 48);
  if (v310)
  {
    v310(v307, @"ExtendedLanguageTagString", v280, &v1026);
    if (v1026.value)
    {
      if (*(unsigned char *)(v279 + 781)) {
        v311 = (uint64_t *)kFigSubtitleRenderPipelineProperty_ExtendedLanguageTagString;
      }
      else {
        v311 = &kFigCaptionRenderPipelineProperty_ExtendedLanguageTagString;
      }
      FigRenderPipelineSetProperty_0(formatDescriptionOut[0].duration.value, *v311, v1026.value);
      CFRelease((CFTypeRef)v1026.value);
    }
  }
  uint64_t v312 = *(void *)(v276 + 1832);
  if (v312)
  {
    if (*(unsigned char *)(v279 + 781)) {
      Float64 v313 = &kFigSubtitleRenderPipelineProperty_TextMarkupArray;
    }
    else {
      Float64 v313 = &kFigCaptionRenderPipelineProperty_TextMarkupArray;
    }
    FigRenderPipelineSetProperty_0(formatDescriptionOut[0].duration.value, *v313, v312);
  }
  v286 = (const void *)formatDescriptionOut[0].duration.value;
  if (formatDescriptionOut[0].duration.value) {
    goto LABEL_603;
  }
LABEL_604:
  *(void *)(v279 + 584) = v286;
  CFArrayAppendValue(v281, formatDescriptionOut);
  itemfig_resetRenderTriple((uint64_t)formatDescriptionOut);
LABEL_605:
  unsigned int alloc = 0;
LABEL_606:
  a1 = v982;
  itemfig_resetRenderTriple((uint64_t)formatDescriptionOut);
  *(void *)&long long v1043 = v281;
  if (*(void *)v1047) {
    CFRelease(*(CFTypeRef *)v1047);
  }
  if (cf.value) {
    CFRelease((CFTypeRef)cf.value);
  }
  if (alloc) {
    goto LABEL_1736;
  }
  uint64_t v314 = CMBaseObjectGetDerivedStorage();
  *(void *)v1047 = 0;
  cf.CMTimeValue value = 0;
  memset(formatDescriptionOut, 0, 40);
  if (!v939)
  {
    unsigned int alloc = 0;
    CFArrayRef v337 = 0;
    CFArrayRef v338 = 0;
    v317 = 0;
LABEL_633:
    uint64_t v318 = 0;
    goto LABEL_668;
  }
  uint64_t v315 = v314;
  CFAllocatorRef v316 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  v317 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, &kRenderTripleArrayCallbacks);
  if (!v317)
  {
    unsigned int alloc = FigSignalErrorAt();
    CFArrayRef v337 = 0;
    CFArrayRef v338 = 0;
    goto LABEL_633;
  }
  uint64_t v318 = CFArrayCreateMutable(v316, 0, &kRenderTripleArrayCallbacks);
  if (!v318)
  {
    int v332 = FigSignalErrorAt();
    goto LABEL_642;
  }
  CFArrayRef v319 = *(const __CFArray **)(v315 + 424);
  if (v319)
  {
    CFIndex v320 = CFArrayGetCount(v319);
    if (v320 >= 1)
    {
      CFIndex v321 = v320;
      for (CFIndex m = 0; m != v321; ++m)
      {
        uint64_t v323 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v315 + 424), m);
        if (*(_DWORD *)v323 != *(_DWORD *)(v315 + 1016)) {
          FigLegibleOutputManagerForgetAboutLegibleOutputRenderPipeline(*(void *)(v315 + 1744), v323[3]);
        }
      }
    }
  }
  CFArrayRef v324 = *(const __CFArray **)(v315 + 472);
  if (v324)
  {
    CFIndex v325 = CFArrayGetCount(v324);
    if (v325 >= 1)
    {
      CFIndex v326 = v325;
      for (CFIndex n = 0; n != v326; ++n)
      {
        v328 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v315 + 472), n);
        if (*(_DWORD *)v328 != *(_DWORD *)(v315 + 1016)) {
          FigRenderedLegibleOutputManagerForgetAboutRenderedLegibleOutputRenderPipeline(*(void *)(v315 + 1776), v328[3]);
        }
      }
    }
  }
  if (!*(void *)(v315 + 1752) && !*(void *)(v315 + 1784) || !*(_DWORD *)(v315 + 1016))
  {
    unsigned int alloc = 0;
LABEL_643:
    CFArrayRef v337 = 0;
    CFArrayRef v338 = 0;
    goto LABEL_668;
  }
  LODWORD(v1026.value) = 0;
  LODWORD(valuePtr.value) = 0;
  itemfig_GetDimensions(v982, (float *)&v1026, (float *)&valuePtr);
  float v329 = *(float *)&v1026.value;
  float v330 = *(float *)&valuePtr.value;
  uint64_t v331 = *(unsigned int *)(v315 + 1016);
  *(_OWORD *)CMTimeValue value = *MEMORY[0x1E4F1F9F8];
  *(void *)&value[16] = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  int v332 = fp_createCommonRenderPipelineOptionsForTrack(v982, 0, (uint64_t)value, v331, 1935832172, 1, (__CFDictionary **)&formatDescriptionOut[0].duration.timescale);
  if (v332)
  {
LABEL_642:
    unsigned int alloc = v332;
    goto LABEL_643;
  }
  uint64_t v333 = *(void *)(v315 + 968);
  uint64_t v334 = *(unsigned int *)(v315 + 1016);
  uint64_t v335 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v335) {
    uint64_t v336 = v335;
  }
  else {
    uint64_t v336 = 0;
  }
  uint64_t v339 = *(uint64_t (**)(uint64_t, uint64_t, unsigned char *, void))(v336 + 56);
  if (!v339)
  {
    int v332 = -12782;
    goto LABEL_642;
  }
  int v332 = v339(v333, v334, v1047, 0);
  if (v332) {
    goto LABEL_642;
  }
  int v332 = itemfig_copyFormatDescription(*(uint64_t *)v1047, &cf.value);
  if (v332) {
    goto LABEL_642;
  }
  if (*(void *)(v315 + 1752))
  {
    FigLegibleOutputManagerSetVideoDisplaySize(*(dispatch_queue_t **)(v315 + 1744), v329, v330);
    CFArrayRef v337 = FigLegibleOutputManagerEnsureRenderPipelinesForFormat(*(dispatch_queue_t **)(v315 + 1744), (const void *)cf.value);
  }
  else
  {
    CFArrayRef v337 = 0;
  }
  if (*(void *)(v315 + 1784))
  {
    *(void *)CMTimeValue value = 0;
    uint64_t v340 = FigTrackReaderGetFigBaseObject(*(void *)v1047);
    uint64_t v341 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v341) {
      uint64_t v342 = v341;
    }
    else {
      uint64_t v342 = 0;
    }
    int v343 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, unsigned char *))(v342 + 48);
    if (v343)
    {
      v343(v340, @"ExtendedLanguageTagString", v316, value);
      uint64_t v344 = *(void *)value;
    }
    else
    {
      uint64_t v344 = 0;
    }
    CFArrayRef v338 = FigRenderedLegibleOutputManagerEnsureRenderPipelinesForFormat(*(void *)(v315 + 1776), cf.value, *(void *)(v315 + 1832), v344);
    if (*(void *)value) {
      CFRelease(*(CFTypeRef *)value);
    }
  }
  else
  {
    CFArrayRef v338 = 0;
  }
  if (v337)
  {
    CFIndex v345 = CFArrayGetCount(v337);
    if (v345 >= 1)
    {
      CFIndex v346 = v345;
      for (iCFIndex i = 0; ii != v346; ++ii)
      {
        LODWORD(formatDescriptionOut[0].start.value) = *(_DWORD *)(v315 + 1016);
        uint64_t v348 = CFArrayGetValueAtIndex(v337, ii);
        if (v348) {
          uint64_t v348 = CFRetain(v348);
        }
        formatDescriptionOut[0].duration.CMTimeValue value = (CMTimeValue)v348;
        CFArrayAppendValue(v317, formatDescriptionOut);
        itemfig_resetRenderTriple((uint64_t)formatDescriptionOut);
      }
    }
  }
  if (v338)
  {
    CFIndex v349 = CFArrayGetCount(v338);
    if (v349 >= 1)
    {
      CFIndex v350 = v349;
      for (jCFIndex j = 0; jj != v350; ++jj)
      {
        LODWORD(formatDescriptionOut[0].start.value) = *(_DWORD *)(v315 + 1016);
        unsigned int v352 = CFArrayGetValueAtIndex(v338, jj);
        if (v352) {
          unsigned int v352 = CFRetain(v352);
        }
        formatDescriptionOut[0].duration.CMTimeValue value = (CMTimeValue)v352;
        CFArrayAppendValue(v318, formatDescriptionOut);
        itemfig_resetRenderTriple((uint64_t)formatDescriptionOut);
      }
    }
  }
  unsigned int alloc = 0;
LABEL_668:
  a1 = v982;
  itemfig_resetRenderTriple((uint64_t)formatDescriptionOut);
  *((void *)&v1043 + 1) = v317;
  *((void *)&v1046 + 1) = v318;
  if (v337) {
    CFRelease(v337);
  }
  uint64_t v106 = v938;
  if (v338) {
    CFRelease(v338);
  }
  if (*(void *)v1047) {
    CFRelease(*(CFTypeRef *)v1047);
  }
  if (cf.value) {
    CFRelease((CFTypeRef)cf.value);
  }
  if (alloc) {
    goto LABEL_1736;
  }
LABEL_677:
  MEMORY[0x19970E910](*(void *)(v106 + 240));
  CFArrayRef v353 = *(const __CFArray **)(v106 + 264);
  if (!v353)
  {
    MEMORY[0x19970E930](*(void *)(v106 + 240));
    goto LABEL_1275;
  }
  CFIndex v354 = CFArrayGetCount(v353);
  uint64_t v355 = v106;
  uint64_t v356 = v354;
  MEMORY[0x19970E930](*(void *)(v355 + 240));
  if (v356 < 1) {
    goto LABEL_1275;
  }
  uint64_t v357 = CMBaseObjectGetDerivedStorage();
  *(void *)CMTimeValue value = 0;
  *(void *)v1047 = 0;
  cf.CMTimeValue value = 0;
  v1026.CMTimeValue value = 0;
  valuePtr.CMTimeValue value = 0;
  if (!*(void *)(v357 + 648))
  {
    unsigned int alloc = FigSignalErrorAt();
    goto LABEL_750;
  }
  uint64_t v358 = v357;
  MEMORY[0x19970E910](*(void *)(v357 + 640));
  CFIndex v359 = CFArrayGetCount(*(CFArrayRef *)(v358 + 648));
  if (v359 < 1)
  {
    unsigned int alloc = 0;
    goto LABEL_748;
  }
  CFIndex v360 = v359;
  CFIndex v361 = 0;
  CFTypeRef v953 = *(CFTypeRef *)(MEMORY[0x1E4F21E00] + 8);
  uint64_t v957 = *MEMORY[0x1E4F21E00];
  CMTagValue v944 = *(void *)(MEMORY[0x1E4F21DF8] + 8);
  uint64_t v948 = *MEMORY[0x1E4F21DF8];
  uint64_t v940 = *MEMORY[0x1E4F21E08];
  v935 = *(void **)(MEMORY[0x1E4F21E08] + 8);
  uint64_t allocatorc = 1;
  uint64_t taga = 1;
  uint64_t v1000 = 1;
  uint64_t v990 = 1;
  CFStringRef key = (void *)*MEMORY[0x1E4F1EE58];
  uint64_t allocb = 1;
  uint64_t v362 = 1;
  uint64_t v968 = 1;
  CFArrayRef v926 = (CFArrayRef)*MEMORY[0x1E4F1EE50];
  CFAllocatorRef theArraye = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  while (2)
  {
    unsigned int v363 = (unsigned int *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v358 + 648), v361);
    if (*((void *)v363 + 24)) {
      goto LABEL_729;
    }
    BOOL v364 = v363;
    unsigned int v365 = FigTagCollectionCreateMutable();
    if (v365) {
      goto LABEL_1164;
    }
    CMTime v366 = *(OpaqueCMTagCollection **)value;
    uint64_t v367 = FigTagMakeWithSInt64Value();
    CMTagValue v369 = v368;
    *(void *)&v1051.category = v367;
    v1051.CMTimeValue value = v369;
    CMTagCollectionAddTag(v366, v1051);
    int v370 = v364[1];
    if (v370 > 1936684397)
    {
      switch(v370)
      {
        case 1936684398:
          uint64_t v374 = FigTagMakeWithSInt64Value();
          CMTagValue v376 = v380;
          ++v1000;
          CMTagValue v373 = v944;
          uint64_t v371 = v948;
          break;
        case 1952807028:
          uint64_t v371 = FigTagMakeWithOSTypeValue();
          CMTagValue v373 = v384;
          uint64_t v374 = FigTagMakeWithSInt64Value();
          CMTagValue v376 = v385;
          ++allocb;
          break;
        case 1986618469:
          uint64_t v374 = FigTagMakeWithSInt64Value();
          CMTagValue v376 = v377;
          ++allocatorc;
          CMTagValue v373 = (CMTagValue)v935;
          uint64_t v371 = v940;
          break;
        default:
          goto LABEL_695;
      }
    }
    else
    {
      switch(v370)
      {
        case 1635088502:
          uint64_t v371 = FigTagMakeWithOSTypeValue();
          CMTagValue v373 = v378;
          uint64_t v374 = FigTagMakeWithSInt64Value();
          CMTagValue v376 = v379;
          ++taga;
          break;
        case 1835365473:
          uint64_t v374 = FigTagMakeWithSInt64Value();
          CMTagValue v376 = v383;
          ++v990;
          CMTagValue v373 = (CMTagValue)v953;
          uint64_t v371 = v957;
          break;
        case 1935832172:
          uint64_t v371 = FigTagMakeWithOSTypeValue();
          CMTagValue v373 = v372;
          uint64_t v374 = FigTagMakeWithSInt64Value();
          CMTagValue v376 = v375;
          ++v362;
          break;
        default:
LABEL_695:
          uint64_t v371 = FigTagMakeWithOSTypeValue();
          CMTagValue v373 = v381;
          uint64_t v374 = FigTagMakeWithSInt64Value();
          CMTagValue v376 = v382;
          ++v968;
          break;
      }
    }
    *(void *)&v1052.category = v371;
    v1052.CMTimeValue value = v373;
    CMTagCollectionAddTag(*(CMMutableTagCollectionRef *)value, v1052);
    *(void *)&v1053.category = v374;
    v1053.CMTimeValue value = v376;
    CMTagCollectionAddTag(*(CMMutableTagCollectionRef *)value, v1053);
    uint64_t v386 = *(void *)(v358 + 968);
    uint64_t v387 = *v364;
    uint64_t v388 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v388) {
      uint64_t v389 = v388;
    }
    else {
      uint64_t v389 = 0;
    }
    uint64_t DerivedStorage = v988;
    __int16 v390 = *(uint64_t (**)(uint64_t, uint64_t, unsigned char *, void))(v389 + 56);
    if (!v390)
    {
      unsigned int alloc = -12782;
      goto LABEL_747;
    }
    unsigned int v365 = v390(v386, v387, v1047, 0);
    if (v365) {
      goto LABEL_1164;
    }
    itemfig_copyFormatDescription(*(uint64_t *)v1047, &cf.value);
    int v391 = (const opaqueCMFormatDescription *)cf.value;
    if (cf.value)
    {
      if (CMFormatDescriptionGetMediaSubType((CMFormatDescriptionRef)cf.value))
      {
        CMTimeValue v392 = *(OpaqueCMTagCollection **)value;
        uint64_t v393 = FigTagMakeWithOSTypeValue();
        CMTagValue v395 = v394;
        *(void *)&v1054.category = v393;
        v1054.CMTimeValue value = v395;
        CMTagCollectionAddTag(v392, v1054);
      }
      if (v364[1] == 1986618469)
      {
        if (CMFormatDescriptionGetMediaSubType(v391) != 1768972832) {
          goto LABEL_733;
        }
        LOBYTE(formatDescriptionOut[0].start.value) = 0;
        LOBYTE(type.value) = 0;
        CMFormatDescriptionGetExtensions(v391);
        int v396 = 0;
        if (FigCFDictionaryGetBooleanIfPresent() && LOBYTE(formatDescriptionOut[0].start.value))
        {
          if (FigCFDictionaryGetBooleanIfPresent()) {
            BOOL v397 = LOBYTE(type.value) == 0;
          }
          else {
            BOOL v397 = 1;
          }
          int v396 = !v397;
        }
        if ((int)FigGetCFPreferenceNumberWithDefault() >= 2 && !v396)
        {
          formatDescriptionOut[0].start.CMTimeValue value = 0;
          CMVideoDimensions Dimensions = CMVideoFormatDescriptionGetDimensions(v391);
          CMFormatDescriptionGetExtensions(v391);
          CMTimeScale v399 = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
          if (v399)
          {
            CMTimeValue v400 = v399;
            CFDictionaryRemoveValue(v399, key);
            CFDictionaryRemoveValue(v400, v926);
            FigCFDictionarySetBoolean();
            FigCFDictionarySetBoolean();
            OSStatus v401 = CMVideoFormatDescriptionCreate(theArraye, 0x69706220u, Dimensions.width, Dimensions.height, v400, (CMVideoFormatDescriptionRef *)formatDescriptionOut);
            v402 = (const void *)formatDescriptionOut[0].start.value;
            if (v401)
            {
              if (formatDescriptionOut[0].start.value) {
                CFRelease((CFTypeRef)formatDescriptionOut[0].start.value);
              }
              CFRelease(v400);
LABEL_733:
              int v396 = 0;
            }
            else
            {
              formatDescriptionOut[0].start.CMTimeValue value = 0;
              CFRelease(v400);
              if (!v402) {
                goto LABEL_733;
              }
              cf.CMTimeValue value = (CMTimeValue)v402;
              CFRetain(v402);
              CFRelease(v391);
              CFRelease(v402);
              int v396 = 1;
              int v391 = (const opaqueCMFormatDescription *)v402;
            }
          }
          else
          {
            FigSignalErrorAt();
            int v396 = 0;
          }
        }
        if (VTIsStereoMVHEVCDecodeSupported() | v396)
        {
          uint64_t DerivedStorage = v988;
          if (CMVideoFormatDescriptionCopyTagCollectionArray(v391, (CFArrayRef *)&v1026) && v1026.value)
          {
            CFRelease((CFTypeRef)v1026.value);
            v1026.CMTimeValue value = 0;
          }
          if (!FPSupport_CreateTagCollectionFromVideoFormatDescriptionExtensionsWithDefaults(v391, &valuePtr))goto LABEL_725; {
        }
          }
        else
        {
          uint64_t DerivedStorage = v988;
          if (!FPSupport_CreateTagCollectionFromVideoFormatDescriptionExtensionsWithDefaults(0, &valuePtr))goto LABEL_725; {
        }
          }
        if (valuePtr.value)
        {
          CFRelease((CFTypeRef)valuePtr.value);
          valuePtr.CMTimeValue value = 0;
        }
      }
LABEL_725:
      uint64_t v403 = *(void *)value;
      *(void *)CMTimeValue value = 0;
      CMTimeValue v404 = v1026.value;
      v1026.CMTimeValue value = 0;
      CMTimeValue v405 = valuePtr.value;
      *((void *)v364 + 24) = v403;
      *((void *)v364 + 25) = v405;
      *((void *)v364 + 26) = v404;
      valuePtr.CMTimeValue value = 0;
      if (*(void *)v1047)
      {
        CFRelease(*(CFTypeRef *)v1047);
        *(void *)v1047 = 0;
      }
      if (v391)
      {
        CFRelease(v391);
        cf.CMTimeValue value = 0;
      }
LABEL_729:
      if (v360 == ++v361)
      {
        unsigned int alloc = 0;
        goto LABEL_747;
      }
      continue;
    }
    break;
  }
  if (v364[1] != 1986618469)
  {
    int v391 = 0;
    goto LABEL_725;
  }
  unsigned int v365 = FigSignalErrorAt();
LABEL_1164:
  unsigned int alloc = v365;
LABEL_747:
  a1 = v982;
LABEL_748:
  MEMORY[0x19970E930](*(void *)(v358 + 640));
  if (*(void *)value) {
    CFRelease(*(CFTypeRef *)value);
  }
LABEL_750:
  if (*(void *)v1047) {
    CFRelease(*(CFTypeRef *)v1047);
  }
  if (v1026.value) {
    CFRelease((CFTypeRef)v1026.value);
  }
  if (valuePtr.value) {
    CFRelease((CFTypeRef)valuePtr.value);
  }
  if (alloc)
  {
LABEL_1736:
    CFTypeRef v44 = 0;
    CFDictionaryRef v45 = 0;
    uint64_t v46 = 0;
    CMTag v147 = 0;
    CFMutableArrayRef v998 = 0;
    allocatorb = 0;
    int theArraya = 0;
    goto LABEL_1708;
  }
  uint64_t v406 = CMBaseObjectGetDerivedStorage();
  formatDescriptionOut[0].start.CMTimeValue value = 0;
  LOBYTE(cf.value) = 0;
  *(void *)CMTimeValue value = 0;
  *(void *)v1047 = 0;
  if (*(unsigned char *)v406)
  {
    FigSignalErrorAt();
  }
  else
  {
    uint64_t v407 = v406;
    if (!*(unsigned char *)(v406 + 1056))
    {
      uint64_t v408 = *MEMORY[0x1E4F1CF80];
      uint64_t v409 = FigAssetGetCMBaseObject(*(void *)(v406 + 1216));
      uint64_t v410 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v410) {
        uint64_t v411 = v410;
      }
      else {
        uint64_t v411 = 0;
      }
      v412 = *(void (**)(uint64_t, __CFString *, uint64_t, CMTimeRange *))(v411 + 48);
      if (v412) {
        v412(v409, @"assetProperty_CreationOptionsDictionary", v408, formatDescriptionOut);
      }
      FigCFDictionaryGetBooleanIfPresent();
      if (LOBYTE(cf.value))
      {
        if (!itemfig_assureBasicsReadyForInspection(a1))
        {
          uint64_t v413 = FigFormatReaderGetFigBaseObject(*(void *)(v407 + 968));
          uint64_t v414 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v414) {
            uint64_t v415 = v414;
          }
          else {
            uint64_t v415 = 0;
          }
          v416 = *(void (**)(uint64_t, __CFString *, uint64_t, unsigned char *))(v415 + 48);
          if (v416
            && (v416(v413, @"QuickTimeMetadataReader", v408, value), (uint64_t v417 = *(void *)value) != 0)
            && ((uint64_t v418 = *(void *)(CMBaseObjectGetVTable() + 16)) == 0 ? (v419 = 0) : (v419 = v418),
                (v420 = *(void (**)(uint64_t, __CFString *, __CFString *, void, uint64_t, unsigned char *, void))(v419 + 8)) != 0
             && (v420(v417, @"mdta", @"com.apple.quicktime.aime-data", 0, v408, v1047, 0),
                 *(void *)v1047)))
          {
            FigCFDictionaryGetInt64IfPresent();
            FigCFDictionaryGetInt64IfPresent();
            if ((*(void *)(v407 + 1064) & 0x8000000000000000) == 0 && *(uint64_t *)(v407 + 1072) >= 1)
            {
              char v421 = 1;
              goto LABEL_781;
            }
          }
          else
          {
            char v421 = 0;
LABEL_781:
            *(unsigned char *)(v407 + 1057) = v421;
            *(unsigned char *)(v407 + 1056) = 1;
          }
        }
      }
      else
      {
        *(_WORD *)(v407 + 1056) = 1;
      }
    }
  }
  if (*(void *)value) {
    CFRelease(*(CFTypeRef *)value);
  }
  if (*(void *)v1047) {
    CFRelease(*(CFTypeRef *)v1047);
  }
  if (formatDescriptionOut[0].start.value) {
    CFRelease((CFTypeRef)formatDescriptionOut[0].start.value);
  }
  uint64_t v941 = CMBaseObjectGetDerivedStorage();
  uint64_t v422 = *(void *)(v941 + 8);
  uint64_t v423 = CMBaseObjectGetDerivedStorage();
  memset(value, 0, 40);
  CFTypeRef v1022 = 0;
  CFArrayRef v1023 = 0;
  if ((v939 & 1) == 0)
  {
    CMBaseObjectGetDerivedStorage();
    v428 = 0;
    memset(formatDescriptionOut, 0, 40);
    goto LABEL_1297;
  }
  uint64_t v424 = v423;
  MEMORY[0x19970E910](*(void *)(v423 + 240));
  v425 = *(const void **)(v424 + 264);
  if (!v425)
  {
    MEMORY[0x19970E930](*(void *)(v424 + 240));
    v429 = 0;
    v430 = 0;
    v431 = 0;
    v432 = 0;
    CFArrayRef v426 = 0;
LABEL_797:
    unsigned int alloc = 0;
    goto LABEL_1260;
  }
  CFArrayRef v426 = (const __CFArray *)CFRetain(v425);
  MEMORY[0x19970E930](*(void *)(v424 + 240));
  if (!v426 || CFArrayGetCount(v426) < 1)
  {
    v429 = 0;
    v430 = 0;
    v431 = 0;
    v432 = 0;
    goto LABEL_797;
  }
  v427 = *(__CFArray **)(v941 + 1048);
  uint64_t v922 = v422;
  uint64_t v923 = v424;
  if (v427)
  {
    CFArrayRemoveAllValues(v427);
  }
  else
  {
    CFMutableArrayRef v433 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    *(void *)(v941 + 1048) = v433;
    if (!v433)
    {
LABEL_1252:
      unsigned int alloc = FigSignalErrorAt();
      v429 = 0;
      v430 = 0;
      v431 = 0;
      v432 = 0;
      goto LABEL_1193;
    }
  }
  CFArrayRef v434 = *(const __CFArray **)(v941 + 648);
  if (v434)
  {
    CFIndex v435 = CFArrayGetCount(v434);
    if (v435 >= 1)
    {
      CFIndex v436 = v435;
      CFIndex v437 = 0;
      CFAllocatorRef v438 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      v439 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
      do
      {
        v440 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v941 + 648), v437);
        v441 = (__CFArray *)*((void *)v440 + 27);
        if (v441)
        {
          CFArrayRemoveAllValues(v441);
        }
        else
        {
          CFMutableArrayRef v442 = CFArrayCreateMutable(v438, 0, v439);
          *((void *)v440 + 27) = v442;
          if (!v442) {
            goto LABEL_1252;
          }
        }
        ++v437;
      }
      while (v436 != v437);
    }
  }
  v443 = *(__CFArray **)(v941 + 1088);
  if (v443)
  {
    CFArrayRemoveAllValues(v443);
    a1 = v982;
  }
  else
  {
    CFMutableArrayRef v444 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    *(void *)(v941 + 1088) = v444;
    a1 = v982;
    if (!v444)
    {
      unsigned int v623 = FigSignalErrorAt();
      goto LABEL_1823;
    }
  }
  CFArrayRef v927 = v426;
  CFIndex v924 = CFArrayGetCount(v426);
  if (v924 < 1)
  {
    unsigned int alloc = 0;
    goto LABEL_949;
  }
  CFIndex v445 = 0;
  CFAllocatorRef v446 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFAllocatorRef allocatord = *(CFAllocatorRef *)(MEMORY[0x1E4F21E50] + 8);
  uint64_t theArrayf = *MEMORY[0x1E4F21E50];
  while (2)
  {
    keya = (char *)v445;
    v936 = (void *)CFArrayGetValueAtIndex(v927, v445);
    uint64_t v447 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v447) {
      uint64_t v448 = v447;
    }
    else {
      uint64_t v448 = 0;
    }
    v449 = *(uint64_t (**)(void *, const __CFAllocator *, CFArrayRef *))(v448 + 48);
    if (v449) {
      unsigned int alloc = v449(v936, v446, &v1023);
    }
    else {
      unsigned int alloc = -12782;
    }
    if (!v1023 || (CFIndex v960 = CFArrayGetCount(v1023), v960 < 1))
    {
LABEL_938:
      LODWORD(cf.value) = 0;
      LOBYTE(v1026.value) = 0;
      v496 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v497 = cf.value;
      if (os_log_type_enabled(v496, v1026.value)) {
        unsigned int v498 = v497;
      }
      else {
        unsigned int v498 = v497 & 0xFFFFFFFE;
      }
      if (v498)
      {
        *(_DWORD *)v1047 = 136315394;
        *(void *)&v1047[4] = "itemfig_createRenderTriplesForMultichannelVideoTargets";
        *(_WORD *)&v1047[12] = 2112;
        *(void *)&v1047[14] = v1023;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      goto LABEL_944;
    }
    CFIndex v450 = 0;
    BOOL v451 = 1;
    while (2)
    {
      v452 = CFArrayGetValueAtIndex(v1023, v450);
      uint64_t v453 = CMBaseObjectGetDerivedStorage();
      formatDescriptionOut[0].start.CMTimeValue value = 0;
      CFIndex CountOfDataChannels = FigDataChannelGroupGetCountOfDataChannels((uint64_t)v452);
      BOOL v958 = v451;
      if (CountOfDataChannels < 1 || (CFIndex v455 = CountOfDataChannels, (v456 = *(const __CFArray **)(v453 + 648)) == 0))
      {
        char v487 = 0;
        CFArrayRef v488 = 0;
        CFArrayRef v474 = 0;
        v467 = 0;
        uint64_t UInt32 = 0;
        v459 = 0;
        goto LABEL_890;
      }
      CFIndex v964 = v450;
      CFIndex v457 = CFArrayGetCount(v456);
      if (v457 < 1)
      {
        char v487 = 0;
        CFArrayRef v488 = 0;
        CFArrayRef v474 = 0;
        v467 = 0;
        uint64_t UInt32 = 0;
        v459 = 0;
        goto LABEL_888;
      }
      CFIndex v458 = v457;
      v459 = CFDictionaryCreateMutable(v446, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (!v459)
      {
        char v487 = 0;
        CFArrayRef v488 = 0;
        CFArrayRef v474 = 0;
        v467 = 0;
        uint64_t UInt32 = 0;
        goto LABEL_888;
      }
      LOBYTE(v969) = 0;
      int v1001 = 0;
      CFIndex v460 = 0;
      v945 = (char *)v455;
      v949 = v452;
      do
      {
        v954 = (char *)v460;
        DataChannelByIndex = (const OpaqueCMTagCollection *)FigDataChannelGroupGetDataChannelByIndex((uint64_t)v452, v460);
        CFIndex v462 = 0;
        int v463 = 0;
        do
        {
          v464 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v453 + 648), v462);
          if (FigTagCollectionCreateMutableCopy())
          {
            CFArrayRef v488 = 0;
            CFArrayRef v474 = 0;
            v467 = 0;
            uint64_t UInt32 = 0;
            char v487 = 0;
            goto LABEL_887;
          }
          if (v464[25]) {
            FigTagCollectionAddTagsFromCollection();
          }
          if (*(unsigned char *)(v453 + 1057))
          {
            v1055.CMTimeValue value = (CMTagValue)allocatord;
            *(void *)&v1055.category = theArrayf;
            CMTagCollectionAddTag((CMMutableTagCollectionRef)formatDescriptionOut[0].start.value, v1055);
          }
          if (CMTagCollectionContainsTagsOfCollection((CMTagCollectionRef)formatDescriptionOut[0].start.value, DataChannelByIndex)|| (*(void *)&v1056.category = 0x40000005706C7972, v1056.CMTimeValue value = 1634630006, CMTagCollectionContainsTag(DataChannelByIndex, v1056))&& *(_DWORD *)(v453 + 1000) == *(_DWORD *)v464)
          {
            *(void *)v1047 = 0;
            uint64_t UInt32 = (const void *)FigCFNumberCreateUInt32();
            if (!UInt32 || (uint64_t v466 = FigCFNumberCreateUInt32()) == 0)
            {
              int v489 = FigSignalErrorAt();
              CFArrayRef v474 = 0;
              CFArrayRef v488 = 0;
              uint64_t DerivedStorage = v988;
              CFIndex v450 = v964;
              goto LABEL_907;
            }
            v467 = (const void *)v466;
            if (FigCFDictionaryGetValueIfPresent())
            {
              if (*(void *)v1047)
              {
                CFIndex v468 = CFArrayGetCount(*(CFArrayRef *)v1047);
                if (v468 >= 1)
                {
                  CFIndex v469 = v468;
                  CFIndex v470 = 0;
                  while (1)
                  {
                    CFArrayGetValueAtIndex(*(CFArrayRef *)v1047, v470);
                    if (FigCFEqual()) {
                      break;
                    }
                    if (v469 == ++v470) {
                      goto LABEL_845;
                    }
                  }
                  char v487 = 0;
                  CFArrayRef v488 = 0;
                  CFArrayRef v474 = 0;
LABEL_887:
                  uint64_t DerivedStorage = v988;
LABEL_888:
                  CFIndex v450 = v964;
                  goto LABEL_890;
                }
              }
            }
            else
            {
              CFMutableArrayRef v471 = CFArrayCreateMutable(v446, 0, MEMORY[0x1E4F1D510]);
              CFDictionarySetValue(v459, v467, v471);
              *(void *)v1047 = v471;
              CFRelease(v471);
            }
LABEL_845:
            CFArrayAppendValue(*(CFMutableArrayRef *)v1047, UInt32);
            if (*(unsigned char *)(v453 + 1057))
            {
              v1057.CMTimeValue value = (CMTagValue)allocatord;
              *(void *)&v1057.category = theArrayf;
              int v472 = CMTagCollectionContainsTag(DataChannelByIndex, v1057);
              int v473 = v1001;
              if (v472) {
                int v473 = 1;
              }
              int v1001 = v473;
            }
            CFRelease(UInt32);
            CFRelease(v467);
            int v463 = 1;
          }
          if (formatDescriptionOut[0].start.value)
          {
            CFRelease((CFTypeRef)formatDescriptionOut[0].start.value);
            formatDescriptionOut[0].start.CMTimeValue value = 0;
          }
          ++v462;
        }
        while (v462 != v458);
        if (!v463)
        {
          char v487 = 0;
          CFArrayRef v488 = 0;
          CFArrayRef v474 = 0;
          v467 = 0;
          uint64_t UInt32 = 0;
          goto LABEL_887;
        }
        v452 = v949;
        CFIndex v460 = (CFIndex)(v954 + 1);
        LOBYTE(v969) = 1;
      }
      while (v954 + 1 != v945);
      CFArrayRef v474 = (const __CFArray *)FigCFDictionaryCopyArrayOfKeys();
      if (CFArrayGetCount(v474) < 1)
      {
        LOBYTE(v969) = 1;
        CFIndex v450 = v964;
        goto LABEL_913;
      }
      CFIndex v475 = 0;
      int v476 = 1;
      while (2)
      {
        v477 = CFArrayGetValueAtIndex(v474, v475);
        int SInt32 = FigCFNumberGetSInt32();
        CFArrayRef v479 = (const __CFArray *)CFDictionaryGetValue(v459, v477);
        CFArrayRef v480 = v479;
        if (!v479 || (CFIndex v481 = CFArrayGetCount(v479), v481 < 2))
        {
          int v969 = v476;
          goto LABEL_880;
        }
        int v955 = v476;
        CFIndex v482 = v481 + 1;
        while (2)
        {
          CFArrayGetValueAtIndex(v480, v482 - 2);
          int v483 = FigCFNumberGetSInt32();
          uint64_t v484 = CMBaseObjectGetDerivedStorage();
          int v969 = 0;
          if (SInt32 > 1935832171)
          {
            if (SInt32 <= 1952807027)
            {
              if (SInt32 != 1935832172)
              {
                if (SInt32 != 1936684398) {
                  goto LABEL_880;
                }
                v485 = (int *)(v484 + 996);
                goto LABEL_874;
              }
LABEL_872:
              v485 = (int *)(v484 + 1016);
              goto LABEL_874;
            }
            if (SInt32 == 1952807028) {
              goto LABEL_872;
            }
            if (SInt32 != 1986618469) {
              goto LABEL_880;
            }
LABEL_871:
            v485 = (int *)(v484 + 1000);
            goto LABEL_874;
          }
          switch(SInt32)
          {
            case 1635088502:
              goto LABEL_871;
            case 1668047728:
              v485 = (int *)(v484 + 1008);
              break;
            case 1751216244:
              v485 = (int *)(v484 + 1040);
              break;
            default:
              goto LABEL_880;
          }
LABEL_874:
          int v486 = *v485;
          if (v486)
          {
            if (v483 != v486) {
              CFArrayRemoveValueAtIndex(v480, v482 - 2);
            }
            if ((unint64_t)--v482 <= 1)
            {
              int v969 = v955;
              goto LABEL_880;
            }
            continue;
          }
          break;
        }
        int v969 = 0;
LABEL_880:
        if (CFArrayGetCount(v480) == 1) {
          int v476 = v969;
        }
        else {
          int v476 = 0;
        }
        ++v475;
        CFIndex v450 = v964;
        if (v475 < CFArrayGetCount(v474)) {
          continue;
        }
        break;
      }
      if (!(_BYTE)v476)
      {
        char v487 = 0;
        CFArrayRef v488 = 0;
        v467 = 0;
        uint64_t UInt32 = 0;
        uint64_t DerivedStorage = v988;
        goto LABEL_890;
      }
LABEL_913:
      CFArrayRef v488 = (const __CFArray *)FigCFDictionaryCopyArrayOfValues();
      CFIndex v490 = 0;
      uint64_t DerivedStorage = v988;
      if (v488)
      {
LABEL_914:
        CFIndex v491 = CFArrayGetCount(v488);
        goto LABEL_916;
      }
      while (1)
      {
        CFIndex v491 = 0;
LABEL_916:
        if (v490 >= v491)
        {
          if (v1001) {
            CFArrayAppendValue(*(CFMutableArrayRef *)(v453 + 1088), v936);
          }
          v467 = 0;
          uint64_t UInt32 = 0;
          char v487 = v969;
          goto LABEL_890;
        }
        *(void *)v1047 = 0;
        CFArrayGetValueAtIndex(v488, v490);
        LODWORD(cf.value) = 0;
        FigCFArrayGetInt32AtIndex();
        if (!LODWORD(cf.value)) {
          break;
        }
        int v489 = itemfig_getTrackStorage((uint64_t)v982, cf.value, v1047);
        if (v489) {
          goto LABEL_935;
        }
        uint64_t v492 = *(void *)v1047;
        CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)v1047 + 216), v936);
        if (!FigCFArrayContainsInt32()) {
          FigCFArrayAppendInt32();
        }
        int v493 = *(_DWORD *)(v492 + 4);
        if (v493 == 1986618469 || v493 == 1635088502)
        {
          CFArrayRef v494 = *(const __CFArray **)(v492 + 208);
          if (v494)
          {
            if (CFArrayGetCount(v494) >= 1)
            {
              v495 = *(const void **)(v492 + 232);
              if (v495)
              {
                CFRelease(v495);
                *(void *)(v492 + 232) = 0;
              }
              *(void *)(v492 + 232) = CFArrayCreateMutableCopy(v446, 0, *(CFArrayRef *)(v492 + 208));
            }
          }
        }
        ++v490;
        if (v488) {
          goto LABEL_914;
        }
      }
      int v489 = FigSignalErrorAt();
LABEL_935:
      uint64_t UInt32 = 0;
LABEL_907:
      char v487 = v969;
      v467 = 0;
      if (v489) {
        char v487 = 0;
      }
LABEL_890:
      if (v459) {
        CFRelease(v459);
      }
      if (formatDescriptionOut[0].start.value) {
        CFRelease((CFTypeRef)formatDescriptionOut[0].start.value);
      }
      a1 = v982;
      if (UInt32) {
        CFRelease(UInt32);
      }
      if (v467) {
        CFRelease(v467);
      }
      if (v474) {
        CFRelease(v474);
      }
      if (v488) {
        CFRelease(v488);
      }
      if (!v487)
      {
        BOOL v451 = ++v450 < v960;
        if (v450 == v960) {
          goto LABEL_938;
        }
        continue;
      }
      break;
    }
    if (!v958) {
      goto LABEL_938;
    }
LABEL_944:
    if (v1023)
    {
      CFRelease(v1023);
      CFArrayRef v1023 = 0;
    }
    CFIndex v445 = (CFIndex)(keya + 1);
    if (keya + 1 != (char *)v924) {
      continue;
    }
    break;
  }
LABEL_949:
  CFArrayRef v499 = *(const __CFArray **)(v941 + 1088);
  if (!v499 || CFArrayGetCount(v499) < 1)
  {
    itemfig_releaseAIMEDataAndAllAIMEDataChannelResources();
    CFArrayRef v426 = v927;
    goto LABEL_957;
  }
  uint64_t v500 = CMBaseObjectGetDerivedStorage();
  CFArrayRef v426 = v927;
  if (!*(void *)(v500 + 1080))
  {
    uint64_t v501 = v500;
    v431 = *(__CFArray **)(v500 + 128);
    if (v431)
    {
      if (*(unsigned char *)(v500 + 1057))
      {
        formatDescriptionOut[0].start.CMTimeValue value = 0;
        uint64_t v502 = *(void *)(v500 + 1072);
        uint64_t v503 = *(void *)(v500 + 1064);
        uint64_t v504 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v504) {
          uint64_t v505 = v504;
        }
        else {
          uint64_t v505 = 0;
        }
        v622 = *(uint64_t (**)(__CFArray *, uint64_t, uint64_t, uint64_t, CMTimeRange *))(v505 + 32);
        if (v622)
        {
          unsigned int v623 = v622(v431, v502, v503, v501 + 1080, formatDescriptionOut);
          a1 = v982;
          if (!v623) {
            goto LABEL_1171;
          }
LABEL_1823:
          unsigned int alloc = v623;
LABEL_1824:
          v429 = 0;
          v430 = 0;
          v431 = 0;
          v432 = 0;
          goto LABEL_1260;
        }
        v429 = 0;
        v430 = 0;
        v431 = 0;
        v432 = 0;
        unsigned int alloc = -12782;
LABEL_1193:
        a1 = v982;
        goto LABEL_1260;
      }
      v429 = 0;
      v430 = 0;
      v431 = 0;
    }
    else
    {
      v429 = 0;
      v430 = 0;
    }
    v432 = 0;
    unsigned int alloc = -12928;
    goto LABEL_1260;
  }
LABEL_1171:
  uint64_t v624 = CMBaseObjectGetDerivedStorage();
  *(void *)v1047 = 0;
  cf.CMTimeValue value = 0;
  *(_OWORD *)&formatDescriptionOut[0].start.CMTimeValue value = *MEMORY[0x1E4F21E50];
  OSStatus v625 = CMTagCollectionCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const CMTag *)formatDescriptionOut, 1, (CMTagCollectionRef *)&cf);
  if (v625)
  {
    unsigned int alloc = v625;
    goto LABEL_1217;
  }
  CFArrayRef v626 = *(const __CFArray **)(v624 + 1088);
  if (!v626 || (CFIndex v627 = CFArrayGetCount(v626), v627 < 1))
  {
    unsigned int alloc = 0;
    goto LABEL_1217;
  }
  CFIndex v628 = v627;
  CFIndex v629 = 0;
  while (2)
  {
    v630 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v624 + 1088), v629);
    if (CFDictionaryContainsKey(*(CFDictionaryRef *)(v624 + 1096), v630))
    {
LABEL_1190:
      if (v628 == ++v629)
      {
        unsigned int alloc = 0;
        a1 = v982;
        goto LABEL_1217;
      }
      continue;
    }
    break;
  }
  if (*(void *)(v624 + 1080))
  {
    CMTimeValue v631 = cf.value;
    uint64_t v632 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v632) {
      uint64_t v633 = v632;
    }
    else {
      uint64_t v633 = 0;
    }
    v634 = *(uint64_t (**)(const void *, void, CMTimeValue, unsigned char *))(v633 + 40);
    if (!v634)
    {
      unsigned int alloc = -12782;
      goto LABEL_1216;
    }
    unsigned int v635 = v634(v630, 0, v631, v1047);
    if (v635) {
      goto LABEL_1839;
    }
    CMNotificationCenterGetDefaultLocalCenter();
    unsigned int v635 = FigNotificationCenterAddWeakListener();
    if (v635) {
      goto LABEL_1839;
    }
    uint64_t v636 = *(void *)v1047;
    uint64_t v637 = *(void *)(v624 + 1080);
    uint64_t v638 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v638) {
      uint64_t v639 = v638;
    }
    else {
      uint64_t v639 = 0;
    }
    v640 = *(void (**)(uint64_t, uint64_t))(v639 + 32);
    if (v640) {
      v640(v636, v637);
    }
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(v624 + 1096), v630, *(const void **)v1047);
    CFArrayRef v426 = v927;
    if (*(void *)v1047)
    {
      CFRelease(*(CFTypeRef *)v1047);
      *(void *)v1047 = 0;
    }
    goto LABEL_1190;
  }
  unsigned int v635 = FigSignalErrorAt();
LABEL_1839:
  unsigned int alloc = v635;
LABEL_1216:
  a1 = v982;
  CFArrayRef v426 = v927;
LABEL_1217:
  if (cf.value) {
    CFRelease((CFTypeRef)cf.value);
  }
  if (*(void *)v1047) {
    CFRelease(*(CFTypeRef *)v1047);
  }
  if (alloc) {
    goto LABEL_1824;
  }
  unsigned int alloc = 0;
LABEL_957:
  CFArrayRef v506 = *(const __CFArray **)(v941 + 1048);
  if (!v506 || (CFIndex v507 = CFArrayGetCount(v506), v507 < 1))
  {
    allocatore = 0;
    v430 = 0;
LABEL_1162:
    v431 = 0;
    v432 = 0;
    *((void *)&v1044 + 1) = allocatore;
    *(void *)&long long v1045 = v430;
    v429 = 0;
    v430 = 0;
    a1 = v982;
    uint64_t DerivedStorage = v988;
    goto LABEL_1260;
  }
  CFIndex v508 = v507;
  v430 = 0;
  allocatore = 0;
  uint64_t v509 = 0;
  CFAllocatorRef v510 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t tagb = *MEMORY[0x1E4F1CFD0];
  uint64_t v965 = *MEMORY[0x1E4F1CFC8];
  CFIndex v950 = v507;
  CFAllocatorRef theArrayg = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  while (1)
  {
    int v1021 = 0;
    v1020 = 0;
    FigCFArrayGetInt32AtIndex();
    itemfig_getTrackStorage((uint64_t)v982, v1021, &v1020);
    v511 = v1020;
    if (!v1020) {
      goto LABEL_1248;
    }
    CFArrayRef v512 = (const __CFArray *)*((void *)v1020 + 27);
    if (!v512 || CFArrayGetCount(v512) < 1) {
      goto LABEL_1153;
    }
    unsigned int v513 = v511[1];
    if (v513 != 1986618469 && v513 != 1635088502) {
      break;
    }
    uint64_t v991 = v509;
    v970 = v430;
    formatDescriptionOut[0].start.CMTimeValue value = 0;
    *(void *)v1047 = 0;
    cf.CMTimeValue value = 0;
    itemfig_getTrackStorage((uint64_t)v982, v1021, formatDescriptionOut);
    CMTimeValue v515 = formatDescriptionOut[0].start.value;
    if (formatDescriptionOut[0].start.value)
    {
      if (!FigTagCollectionCreateMutableCopy())
      {
        if (*(void *)(v515 + 200)) {
          FigTagCollectionAddTagsFromCollection();
        }
        v516 = *(const void **)(v515 + 264);
        if (v516)
        {
          CFRelease(v516);
          *(void *)(v515 + 264) = 0;
        }
        CFArrayRef v517 = *(const __CFArray **)(v515 + 216);
        if (v517)
        {
          CFIndex v518 = CFArrayGetCount(v517);
          if (v518 >= 1)
          {
            CFIndex v519 = v518;
            for (kCFIndex k = 0; kk != v519; ++kk)
            {
              v521 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v515 + 216), kk);
              uint64_t v522 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v522) {
                uint64_t v523 = v522;
              }
              else {
                uint64_t v523 = 0;
              }
              v524 = *(void (**)(const void *, const __CFAllocator *, CMTime *))(v523 + 56);
              if (v524) {
                v524(v521, v510, &cf);
              }
              if (cf.value)
              {
                CFIndex v525 = CFArrayGetCount((CFArrayRef)cf.value);
                if (v525 >= 1)
                {
                  CFIndex v526 = v525;
                  CFIndex v527 = 0;
                  while (1)
                  {
                    CFDictionaryRef v528 = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)cf.value, v527);
                    v529 = (const OpaqueCMTagCollection *)CFDictionaryGetValue(v528, @"ChannelDescription");
                    if (CMTagCollectionContainsTagsOfCollection(*(CMTagCollectionRef *)v1047, v529))
                    {
                      CFDictionaryRef v530 = (const __CFDictionary *)CFDictionaryGetValue(v528, @"ChannelSpecificSettings");
                      v531 = CFDictionaryGetValue(v530, @"DestinationPixelBufferAttributes");
                      if (v531) {
                        break;
                      }
                    }
                    if (v526 == ++v527) {
                      goto LABEL_991;
                    }
                  }
                  v532 = *(const void **)(v515 + 264);
                  *(void *)(v515 + 264) = v531;
                  CFRetain(v531);
                  if (v532) {
                    CFRelease(v532);
                  }
                }
LABEL_991:
                CFAllocatorRef v510 = theArrayg;
                if (cf.value)
                {
                  CFRelease((CFTypeRef)cf.value);
                  cf.CMTimeValue value = 0;
                }
              }
            }
          }
        }
      }
    }
    else
    {
      FigSignalErrorAt();
    }
    if (*(void *)v1047) {
      CFRelease(*(CFTypeRef *)v1047);
    }
    CFArrayRef v426 = v927;
    uint64_t v533 = v923;
    if (a3)
    {
      v534 = (const void *)*((void *)v511 + 33);
      if (v534)
      {
        CFDictionaryRef v535 = (const __CFDictionary *)CFRetain(v534);
      }
      else
      {
        MEMORY[0x19970E910](*(void *)(v923 + 488));
        v566 = *(const void **)(v923 + 480);
        if (v566) {
          CFDictionaryRef v535 = (const __CFDictionary *)CFRetain(v566);
        }
        else {
          CFDictionaryRef v535 = 0;
        }
        MEMORY[0x19970E930](*(void *)(v923 + 488));
      }
      unsigned int FigImageQueueArrayForVideoRenderPipeline = FPSupport_CopyDestinationPixelBufferAttributesWithIOSurfaceSupport(v535, 1, (CFDictionaryRef *)&v1022);
      if (v535)
      {
        unsigned int v574 = FigImageQueueArrayForVideoRenderPipeline;
        CFRelease(v535);
        unsigned int FigImageQueueArrayForVideoRenderPipeline = v574;
        uint64_t v533 = v923;
      }
      if (FigImageQueueArrayForVideoRenderPipeline) {
        goto LABEL_1246;
      }
    }
    if (!allocatore)
    {
      allocatore = CFArrayCreateMutable(v510, 0, &kRenderTripleArrayCallbacks);
      if (!allocatore)
      {
        unsigned int matched = FigSignalErrorAt();
        v429 = 0;
        v431 = 0;
        v432 = 0;
        a1 = v982;
        uint64_t DerivedStorage = v988;
        CFArrayRef v426 = v927;
        goto LABEL_1258;
      }
    }
    v575 = v1020;
    v576 = (const void *)*((void *)v1020 + 31);
    if (v576)
    {
      CFRelease(v576);
      *((void *)v575 + 31) = 0;
    }
    v577 = (__CFArray *)*((void *)v575 + 28);
    if (v577) {
      CFArrayRemoveAllValues(v577);
    }
    else {
      *((void *)v575 + 28) = CFArrayCreateMutable(v510, 0, MEMORY[0x1E4F1D510]);
    }
    CFArrayRef v578 = (const __CFArray *)*((void *)v575 + 29);
    if (v578) {
      CFArrayRef v578 = (const __CFArray *)CFArrayGetCount(v578);
    }
    if ((unint64_t)v578 <= 1) {
      uint64_t v579 = 1;
    }
    else {
      uint64_t v579 = (uint64_t)v578;
    }
    if (v579 >= 1)
    {
      uint64_t v580 = v579 + 1;
      while (1)
      {
        formatDescriptionOut[0].start.CMTimeValue value = 0;
        unsigned int matched = FigImageQueueTableCreate(v510, formatDescriptionOut);
        if (matched) {
          break;
        }
        CFArrayAppendValue(*((CFMutableArrayRef *)v575 + 28), (const void *)formatDescriptionOut[0].start.value);
        if (formatDescriptionOut[0].start.value) {
          CFRelease((CFTypeRef)formatDescriptionOut[0].start.value);
        }
        if (--v580 <= 1) {
          goto LABEL_1082;
        }
      }
LABEL_1195:
      v431 = 0;
      v432 = 0;
      goto LABEL_1257;
    }
LABEL_1082:
    *(_DWORD *)CMTimeValue value = *v575;
    *(_OWORD *)alloce = *MEMORY[0x1E4F1F9F8];
    *(_OWORD *)&formatDescriptionOut[0].start.CMTimeValue value = *MEMORY[0x1E4F1F9F8];
    CMTimeEpoch v581 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
    formatDescriptionOut[0].start.CMTimeEpoch epoch = v581;
    unsigned int matched = fp_createCommonRenderPipelineOptionsForTrack(v982, 0, (uint64_t)formatDescriptionOut, *(unsigned int *)value, 1986618469, 0, (__CFDictionary **)&value[8]);
    if (matched) {
      goto LABEL_1195;
    }
    if (!*(void *)&value[24])
    {
      *(void *)v1047 = 0;
      uint64_t v582 = *v575;
      *(_OWORD *)&formatDescriptionOut[0].start.CMTimeValue value = *(_OWORD *)alloce;
      formatDescriptionOut[0].start.CMTimeEpoch epoch = v581;
      unsigned int matched = fp_createCommonRenderPipelineOptionsForTrack(v982, 0, (uint64_t)formatDescriptionOut, v582, 1986618469, 1, (__CFDictionary **)&value[32]);
      if (matched) {
        goto LABEL_1195;
      }
      CFArrayRef v583 = (const __CFArray *)*((void *)v575 + 28);
      if (v583
        && CFArrayGetCount(v583) == 1
        && ((CFArrayRef v584 = (const __CFArray *)*((void *)v575 + 29)) == 0 || !CFArrayGetCount(v584)))
      {
        v621 = CFArrayGetValueAtIndex(*((CFArrayRef *)v575 + 28), 0);
        unsigned int FigImageQueueArrayForVideoRenderPipeline = fp_createFigImageQueueArrayForVideoRenderPipeline((uint64_t)v982, *v575, 0, 0, 0, 0, 0, 0, *((const __CFArray **)v575 + 27), (uint64_t)v621, 1, v1047);
        if (FigImageQueueArrayForVideoRenderPipeline)
        {
          CFArrayRef v426 = v927;
LABEL_1246:
          unsigned int alloc = FigImageQueueArrayForVideoRenderPipeline;
          v431 = 0;
          v432 = 0;
          a1 = v982;
          uint64_t DerivedStorage = v988;
          v429 = allocatore;
          v430 = v970;
          goto LABEL_1260;
        }
        v432 = 0;
        v431 = *(__CFArray **)v1047;
      }
      else
      {
        v585 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
        v431 = CFArrayCreateMutable(v510, 0, MEMORY[0x1E4F1D510]);
        CFMutableArrayRef v586 = CFArrayCreateMutable(v510, 0, v585);
        v432 = v586;
        if (!v431 || !v586)
        {
LABEL_1256:
          unsigned int matched = FigSignalErrorAt();
LABEL_1257:
          a1 = v982;
          uint64_t DerivedStorage = v988;
          CFArrayRef v426 = v927;
          v429 = allocatore;
LABEL_1258:
          v430 = v970;
          goto LABEL_1259;
        }
        for (mCFIndex m = 0; ; ++mm)
        {
          CFArrayRef v588 = (const __CFArray *)*((void *)v575 + 28);
          if (v588) {
            CFArrayRef v588 = (const __CFArray *)CFArrayGetCount(v588);
          }
          if (mm >= (uint64_t)v588) {
            break;
          }
          cf.CMTimeValue value = 0;
          v589 = CFArrayGetValueAtIndex(*((CFArrayRef *)v575 + 28), mm);
          unsigned int matched = FigImageQueueTableUpdateToMatchOutputsArray((uint64_t)v589, *((const __CFArray **)v575 + 27), *(void **)(v941 + 328), (void (*)(void *, uint64_t))fp_imageQueueTableCreatedImageQueueCallback, (void (*)(const void *, uint64_t))fp_imageQueueTableWillReleaseImageQueueCallback, (uint64_t)v982);
          if (matched) {
            goto LABEL_1257;
          }
          unsigned int matched = FigImageQueueTableCopyFigImageQueueArray((uint64_t)v589, &cf.value);
          if (matched) {
            goto LABEL_1257;
          }
          uint64_t v590 = CFArrayGetCount((CFArrayRef)cf.value);
          v1058.locatioCFIndex n = 0;
          v1058.length = v590;
          CFArrayAppendArray(v431, (CFArrayRef)cf.value, v1058);
          if (cf.value) {
            CFRelease((CFTypeRef)cf.value);
          }
          if (v590 >= 1)
          {
            CFArrayRef v591 = (const __CFArray *)*((void *)v575 + 29);
            if (v591) {
              CFArrayRef v591 = (const __CFArray *)CFArrayGetCount(v591);
            }
            if (mm < (uint64_t)v591)
            {
              formatDescriptionOut[0].start.CMTimeValue value = 0;
              *(void *)&formatDescriptionOut[0].start.CMTimeScale timescale = 0;
              v1026.CMTimeValue value = 0;
              if (!FigCFArrayGetValueAtIndex()) {
                goto LABEL_1256;
              }
              FigTagCollectionGetTagsWithCategory();
              if (v1026.value != 1) {
                goto LABEL_1256;
              }
              FigTagGetSInt64Value();
              CFMutableDictionaryRef v592 = CFDictionaryCreateMutable(v510, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
              if (!v592) {
                goto LABEL_1256;
              }
              CFMutableDictionaryRef v593 = v592;
              FigCFDictionarySetInt32();
              unint64_t v594 = v590 + 1;
              do
              {
                CFArrayAppendValue(v432, v593);
                --v594;
              }
              while (v594 > 1);
              CFRelease(v593);
              CFAllocatorRef v510 = theArrayg;
            }
          }
        }
        uint64_t v533 = v923;
      }
      unsigned int matched = fp_buildVideoRenderPipelineForTrack(v922, (uint64_t)v982, *v575, v1022, 0, *((void *)v575 + 3), 0, 1, v431, v432, 0, &value[24]);
      if (v431)
      {
        unsigned int v595 = matched;
        CFRelease(v431);
        unsigned int matched = v595;
        uint64_t v533 = v923;
      }
      if (v432)
      {
        unsigned int v596 = matched;
        CFRelease(v432);
        unsigned int matched = v596;
      }
      if (matched) {
        goto LABEL_1195;
      }
    }
    if (v1022)
    {
      CFRelease(v1022);
      CFTypeRef v1022 = 0;
    }
    CFTypeRef v597 = *(CFTypeRef *)&value[24];
    if (*(void *)&value[24]) {
      CFTypeRef v597 = CFRetain(*(CFTypeRef *)&value[24]);
    }
    *((void *)v575 + 31) = v597;
    CFArrayAppendValue(allocatore, value);
    itemfig_resetRenderTriple((uint64_t)value);
    CFIndex v598 = 0;
    v599 = v1020;
    CFArrayRef v426 = v927;
    while (1)
    {
      CFArrayRef v600 = (const __CFArray *)*((void *)v599 + 28);
      if (v600) {
        CFArrayRef v600 = (const __CFArray *)CFArrayGetCount(v600);
      }
      if (v598 >= (uint64_t)v600) {
        break;
      }
      v601 = CFArrayGetValueAtIndex(*((CFArrayRef *)v599 + 28), v598);
      FigImageQueueTableSetTimebase((uint64_t)v601, *(void **)(v941 + 328));
      ++v598;
    }
    if (*(unsigned char *)(v533 + 232)) {
      uint64_t v602 = tagb;
    }
    else {
      uint64_t v602 = v965;
    }
    uint64_t v603 = FigRenderPipelineGetFigBaseObject(*((void *)v599 + 31));
    uint64_t v604 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v604) {
      uint64_t v605 = v604;
    }
    else {
      uint64_t v605 = 0;
    }
    v606 = *(void (**)(uint64_t, __CFString *, uint64_t))(v605 + 56);
    if (v606) {
      v606(v603, @"PreventDisplaySleepDuringVideoPlayback", v602);
    }
    uint64_t v607 = *(void *)(v941 + 1144);
    if (v607)
    {
      uint64_t v608 = FigRenderPipelineGetFigBaseObject(*((void *)v599 + 31));
      uint64_t v609 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v610 = v609 ? v609 : 0;
      v611 = *(void (**)(uint64_t, __CFString *, uint64_t))(v610 + 56);
      if (v611) {
        v611(v608, @"VideoEnhancementMode", v607);
      }
    }
    uint64_t v612 = FigRenderPipelineGetFigBaseObject(*((void *)v599 + 31));
    uint64_t v613 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v613) {
      uint64_t v614 = v613;
    }
    else {
      uint64_t v614 = 0;
    }
    v615 = *(void (**)(uint64_t, __CFString *, uint64_t))(v614 + 56);
    if (v615) {
      v615(v612, @"ObeyEmptyMediaMarkers", tagb);
    }
    if (*(unsigned char *)(v941 + 1137)) {
      uint64_t v616 = tagb;
    }
    else {
      uint64_t v616 = v965;
    }
    uint64_t v617 = FigRenderPipelineGetFigBaseObject(*((void *)v599 + 31));
    uint64_t v618 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v618) {
      uint64_t v619 = v618;
    }
    else {
      uint64_t v619 = 0;
    }
    v620 = *(void (**)(uint64_t, __CFString *, uint64_t))(v619 + 56);
    if (v620) {
      v620(v617, @"PropagatePerFrameHDRDisplayMetadata", v616);
    }
    itemfig_updateRotationOnVideoRenderPipeline((uint64_t)v982, *v599);
    itemfig_applyEnhancementFilterOptions((uint64_t)v982, *v599);
    itemfig_applyDisableColorMatching((uint64_t)v982, *v599);
    unsigned int alloc = 0;
    v430 = v970;
    CFIndex v508 = v950;
    uint64_t v509 = v991;
LABEL_1153:
    if (++v509 == v508) {
      goto LABEL_1162;
    }
  }
  if (!v430)
  {
    v430 = CFArrayCreateMutable(v510, 0, &kRenderTripleArrayCallbacks);
    if (!v430) {
      goto LABEL_1248;
    }
  }
  v536 = (const void *)*((void *)v511 + 32);
  if (v536)
  {
    CFRelease(v536);
    *((void *)v511 + 32) = 0;
  }
  if (!*((void *)v511 + 30))
  {
    CFMutableDictionaryRef v537 = CFDictionaryCreateMutable(v510, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    *((void *)v511 + 30) = v537;
    if (!v537)
    {
LABEL_1248:
      unsigned int matched = FigSignalErrorAt();
      goto LABEL_1249;
    }
  }
  int v538 = v511[1];
  *(_DWORD *)CMTimeValue value = *v511;
  *(_OWORD *)allocc = *MEMORY[0x1E4F1F9F8];
  *(_OWORD *)&formatDescriptionOut[0].start.CMTimeValue value = *MEMORY[0x1E4F1F9F8];
  CMTimeEpoch v539 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  formatDescriptionOut[0].start.CMTimeEpoch epoch = v539;
  unsigned int matched = fp_createCommonRenderPipelineOptionsForTrack(v982, 0, (uint64_t)formatDescriptionOut, *(unsigned int *)value, v538, 0, (__CFDictionary **)&value[8]);
  if (matched) {
    goto LABEL_1249;
  }
  itemfig_reuseExistingRenderPipeline(*(void *)(v941 + 448), (uint64_t)value);
  v541 = *(void **)&value[24];
  if (!*(void *)&value[24])
  {
    uint64_t v542 = *v511;
    int v543 = v511[1];
    *(_OWORD *)&formatDescriptionOut[0].start.CMTimeValue value = *(_OWORD *)allocc;
    formatDescriptionOut[0].start.CMTimeEpoch epoch = v539;
    unsigned int matched = fp_createCommonRenderPipelineOptionsForTrack(v982, 0, (uint64_t)formatDescriptionOut, v542, v543, 1, (__CFDictionary **)&value[32]);
    if (matched) {
      goto LABEL_1249;
    }
    unsigned int matched = FigRenderPipelineCreateForFanOutToArrayOfSampleBufferConsumers(v510, 0, &value[24]);
    if (matched) {
      goto LABEL_1249;
    }
    v541 = *(void **)&value[24];
  }
  v937 = v541;
  CFArrayRef v544 = (const __CFArray *)*((void *)v511 + 27);
  CFDictionaryRef v992 = (const __CFDictionary *)*((void *)v511 + 30);
  uint64_t v946 = CMBaseObjectGetDerivedStorage();
  *(void *)v1029 = 0;
  CFTypeRef v1028 = 0;
  *(_OWORD *)&cf.CMTimeValue value = *(_OWORD *)allocc;
  cf.CMTimeEpoch epoch = v539;
  *(_OWORD *)&v1026.CMTimeValue value = *(_OWORD *)allocc;
  v1026.CMTimeEpoch epoch = v539;
  FPSupport_getDataQueueWaterLevels(&cf, &v1026);
  if (!v544)
  {
    v547 = CFArrayCreateMutable(v510, 0, MEMORY[0x1E4F1D510]);
    if (v547) {
      goto LABEL_1041;
    }
LABEL_1158:
    int v570 = FigSignalErrorAt();
    CFArrayRef v426 = v927;
    goto LABEL_1051;
  }
  uint64_t v545 = CFArrayGetCount(v544);
  CFMutableArrayRef v546 = CFArrayCreateMutable(v510, v545, MEMORY[0x1E4F1D510]);
  if (!v546) {
    goto LABEL_1158;
  }
  v547 = v546;
  if (v545 < 1)
  {
LABEL_1041:
    v961 = v547;
    uint64_t v567 = FigRenderPipelineGetFigBaseObject(v937);
    uint64_t v568 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v568) {
      uint64_t v569 = v568;
    }
    else {
      uint64_t v569 = 0;
    }
    CFArrayRef v426 = v927;
    v571 = *(uint64_t (**)(uint64_t, __CFString *, __CFArray *))(v569 + 56);
    if (v571) {
      int v570 = v571(v567, @"OutputArrayOfSampleBufferConsumers", v961);
    }
    else {
      int v570 = -12782;
    }
    goto LABEL_1050;
  }
  v971 = v430;
  CFArrayRef allocd = v544;
  CFIndex v548 = 0;
  v961 = v546;
  while (1)
  {
    uint64_t v549 = v545;
    v550 = CFArrayGetValueAtIndex(allocd, v548);
    v551 = CFDictionaryGetValue(v992, v550);
    *(void *)v1029 = v551;
    if (v551)
    {
      CFRetain(v551);
      goto LABEL_1027;
    }
    CMTime valuePtr = v1026;
    CMTime type = cf;
    uint64_t v552 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v552) {
      uint64_t v553 = v552;
    }
    else {
      uint64_t v553 = 0;
    }
    v554 = *(uint64_t (**)(const void *, void, CMTimeRange *, unsigned char *, os_log_type_t *))(v553 + 32);
    if (!v554)
    {
LABEL_1043:
      int v570 = -12782;
LABEL_1044:
      v430 = v971;
      goto LABEL_1045;
    }
    formatDescriptionOut[0].CMTime start = valuePtr;
    *(CMTime *)v1047 = type;
    int v555 = v554(v550, 0, formatDescriptionOut, v1047, v1029);
    if (v555) {
      break;
    }
    uint64_t v556 = *(void *)(v946 + 328);
    uint64_t v557 = FigDataQueueGetCMBaseObject(*(void *)v1029);
    uint64_t v558 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v558) {
      uint64_t v559 = v558;
    }
    else {
      uint64_t v559 = 0;
    }
    v560 = *(void (**)(uint64_t, __CFString *, uint64_t))(v559 + 56);
    if (v560) {
      v560(v557, @"ControlTimebase", v556);
    }
    CFDictionarySetValue(v992, v550, *(const void **)v1029);
    CFAllocatorRef v510 = theArrayg;
    v547 = v961;
LABEL_1027:
    uint64_t v561 = FigDataQueueGetCMBaseObject(*(void *)v1029);
    uint64_t v562 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v562) {
      uint64_t v563 = v562;
    }
    else {
      uint64_t v563 = 0;
    }
    v564 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v563 + 48);
    if (!v564) {
      goto LABEL_1043;
    }
    int v565 = v564(v561, @"SampleBufferConsumer", v510, &v1028);
    if (v565)
    {
      int v570 = v565;
      goto LABEL_1044;
    }
    CFArrayAppendValue(v547, v1028);
    uint64_t v545 = v549;
    if (*(void *)v1029)
    {
      CFRelease(*(CFTypeRef *)v1029);
      *(void *)v1029 = 0;
    }
    if (v1028)
    {
      CFRelease(v1028);
      CFTypeRef v1028 = 0;
    }
    if (v549 == ++v548)
    {
      v430 = v971;
      goto LABEL_1041;
    }
  }
  int v570 = v555;
  v430 = v971;
  CFAllocatorRef v510 = theArrayg;
LABEL_1045:
  CFArrayRef v426 = v927;
LABEL_1050:
  CFRelease(v961);
LABEL_1051:
  if (*(void *)v1029) {
    CFRelease(*(CFTypeRef *)v1029);
  }
  if (v1028) {
    CFRelease(v1028);
  }
  if (!v570)
  {
    CFTypeRef v572 = *(CFTypeRef *)&value[24];
    CFIndex v508 = v950;
    if (*(void *)&value[24]) {
      CFTypeRef v572 = CFRetain(*(CFTypeRef *)&value[24]);
    }
    *((void *)v511 + 32) = v572;
    CFArrayAppendValue(v430, value);
    itemfig_resetRenderTriple((uint64_t)value);
    unsigned int alloc = 0;
    goto LABEL_1153;
  }
  unsigned int matched = v570;
LABEL_1249:
  v431 = 0;
  v432 = 0;
  a1 = v982;
  uint64_t DerivedStorage = v988;
  v429 = allocatore;
LABEL_1259:
  unsigned int alloc = matched;
LABEL_1260:
  if (v1022) {
    CFRelease(v1022);
  }
  if (v429) {
    CFRelease(v429);
  }
  if (v430) {
    CFRelease(v430);
  }
  if (v426) {
    CFRelease(v426);
  }
  if (v1023) {
    CFRelease(v1023);
  }
  if (v431) {
    CFRelease(v431);
  }
  if (v432) {
    CFRelease(v432);
  }
  if (alloc) {
    goto LABEL_1736;
  }
LABEL_1275:
  uint64_t v645 = CMBaseObjectGetDerivedStorage();
  v428 = 0;
  memset(formatDescriptionOut, 0, 40);
  if (!v939)
  {
LABEL_1297:
    itemfig_resetRenderTriple((uint64_t)formatDescriptionOut);
    *((void *)&v1045 + 1) = v428;
LABEL_1298:
    if (v942)
    {
      CFTypeRef v44 = 0;
      CFDictionaryRef v45 = 0;
      uint64_t v46 = 0;
      CMTag v147 = 0;
      CFMutableArrayRef v998 = 0;
      allocatorb = 0;
      int theArraya = 0;
      unsigned int alloc = 0;
      goto LABEL_1708;
    }
    CFArrayRef v665 = *(const __CFArray **)(DerivedStorage + 648);
    if (v665)
    {
      CFIndex v666 = CFArrayGetCount(v665);
      BOOL v993 = v666 > 0;
      if (v666 < 1)
      {
        BOOL v993 = 0;
      }
      else
      {
        for (nCFIndex n = 0; nn != v666; ++nn)
        {
          v668 = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 648), nn);
          v669 = v668;
          v670 = (const void *)v668[2];
          if (v670)
          {
            int v671 = *((_DWORD *)v668 + 1);
            BOOL v672 = v671 == 1986618469 || v671 == 1635088502;
            if (!v672
              || (FigStopForwardingMediaServicesProcessDeathNotification(), (v670 = (const void *)v669[2]) != 0))
            {
              CFRelease(v670);
              v669[2] = 0;
            }
          }
          v673 = (const void *)v669[31];
          if (v673)
          {
            CFRelease(v673);
            v669[31] = 0;
          }
          v674 = (const void *)v669[32];
          if (v674)
          {
            CFRelease(v674);
            v669[32] = 0;
          }
          CFArrayRef v675 = (const __CFArray *)v669[21];
          if (v675)
          {
            CFIndex v676 = CFArrayGetCount(v675);
            if (v676 >= 1)
            {
              CFIndex v677 = v676;
              for (CFIndex i1 = 0; i1 != v677; ++i1)
              {
                v679 = CFArrayGetValueAtIndex((CFArrayRef)v669[21], i1);
                v680 = (const void *)v679[6];
                if (v680)
                {
                  CFRelease(v680);
                  v679[6] = 0;
                }
              }
            }
          }
        }
      }
    }
    else
    {
      BOOL v993 = 0;
      CFIndex v666 = 0;
    }
    uint64_t v681 = 0;
    size_t v682 = 0;
    do
    {
      CFIndex v683 = *(void *)((char *)&v1040 + v681);
      if (v683) {
        CFIndex v683 = CFArrayGetCount((CFArrayRef)v683);
      }
      v682 += v683;
      v681 += 8;
    }
    while (v681 != 112);
    allocatorb = (int *)malloc_type_calloc(v682, 4uLL, 0x100004052888210uLL);
    if (allocatorb)
    {
      int theArraya = (const void **)malloc_type_calloc(v682, 8uLL, 0x2004093837F09uLL);
      if (theArraya)
      {
        v972 = (uint64_t *)(DerivedStorage + 352);
        CFMutableArrayRef v998 = (CFMutableArrayRef)malloc_type_calloc(v682, 8uLL, 0x6004044C4A2DFuLL);
        if (!v998)
        {
          unsigned int alloc = FigSignalErrorAt();
          CFTypeRef v44 = 0;
          CFDictionaryRef v45 = 0;
          uint64_t v46 = 0;
          CMTag v147 = 0;
          CFMutableArrayRef v998 = 0;
          goto LABEL_248;
        }
        unint64_t v684 = 0;
        formatDescriptionOut[0].start.CMTimeValue value = 0;
        CFAllocatorRef allocg = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        do
        {
          CFArrayRef v685 = (const __CFArray *)*((void *)&v1040 + v684);
          if (v685) {
            CFIndex v686 = CFArrayGetCount(*((CFArrayRef *)&v1040 + v684));
          }
          else {
            CFIndex v686 = 0;
          }
          if (v684 <= 6 && ((1 << v684) & 0x58) != 0 && v686 >= 1)
          {
            CFIndex v687 = 0;
            do
            {
              while (1)
              {
                uint64_t v688 = *((void *)CFArrayGetValueAtIndex(v685, v687) + 3);
                if (v688)
                {
                  uint64_t v689 = FigRenderPipelineGetFigBaseObject(v688);
                  uint64_t v690 = *(void *)(CMBaseObjectGetVTable() + 8);
                  uint64_t v691 = v690 ? v690 : 0;
                  v692 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, CMTimeRange *))(v691 + 48);
                  if (v692) {
                    break;
                  }
                }
                if (++v687 >= v686) {
                  goto LABEL_1356;
                }
              }
              int v693 = v692(v689, @"HDRCrossTalker", allocg, formatDescriptionOut);
              if (formatDescriptionOut[0].start.value) {
                BOOL v694 = v693 == 0;
              }
              else {
                BOOL v694 = 0;
              }
              ++v687;
            }
            while (!v694 && v687 < v686);
          }
LABEL_1356:
          if (v684 > 0xC) {
            break;
          }
          ++v684;
        }
        while (!formatDescriptionOut[0].start.value);
        if (formatDescriptionOut[0].start.value
          || (FigCrossTalkerCreate((uint64_t)allocg, formatDescriptionOut), formatDescriptionOut[0].start.value))
        {
          for (uint64_t i2 = 0; i2 != 14; ++i2)
          {
            CFArrayRef v697 = (const __CFArray *)*((void *)&v1040 + i2);
            if (v697) {
              CFIndex v698 = CFArrayGetCount(*((CFArrayRef *)&v1040 + i2));
            }
            else {
              CFIndex v698 = 0;
            }
            if (i2 <= 6 && ((1 << i2) & 0x58) != 0 && v698 >= 1)
            {
              for (CFIndex i3 = 0; i3 != v698; ++i3)
              {
                uint64_t v700 = *((void *)CFArrayGetValueAtIndex(v697, i3) + 3);
                if (v700)
                {
                  CMTimeValue v701 = formatDescriptionOut[0].start.value;
                  uint64_t v702 = FigRenderPipelineGetFigBaseObject(v700);
                  uint64_t v703 = *(void *)(CMBaseObjectGetVTable() + 8);
                  uint64_t v704 = v703 ? v703 : 0;
                  v705 = *(void (**)(uint64_t, __CFString *, CMTimeValue))(v704 + 56);
                  if (v705) {
                    v705(v702, @"HDRCrossTalker", v701);
                  }
                }
              }
            }
          }
          if (formatDescriptionOut[0].start.value) {
            CFRelease((CFTypeRef)formatDescriptionOut[0].start.value);
          }
        }
        uint64_t v706 = 0;
        uint64_t v707 = 0;
        uint64_t DerivedStorage = v988;
        do
        {
          uint64_t tagd = v706;
          CFArrayRef v708 = (const __CFArray *)*((void *)&v1040 + v706);
          if (v708)
          {
            CFIndex v709 = CFArrayGetCount(*((CFArrayRef *)&v1040 + v706));
            if (v709 >= 1)
            {
              CFIndex v710 = v709;
              for (CFIndex i4 = 0; i4 != v710; ++i4)
              {
                v712 = CFArrayGetValueAtIndex(v708, i4);
                allocatorb[v707] = *(_DWORD *)v712;
                theArraya[v707] = (const void *)v712[3];
                *((void *)v998 + v707) = v712[4];
                if (v993)
                {
                  v713 = v712;
                  CFIndex v714 = 0;
                  while (1)
                  {
                    v715 = (const __CFArray **)CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 648), v714);
                    if (*(_DWORD *)v715 == *(_DWORD *)v713) {
                      break;
                    }
                    if (v666 == ++v714) {
                      goto LABEL_1386;
                    }
                  }
                  v716 = v715;
                  switch(tagd)
                  {
                    case 0xB:
                      CFArrayRef v719 = v715[21];
                      if (v719)
                      {
                        CFIndex v720 = CFArrayGetCount(v719);
                        if (v720 >= 1)
                        {
                          CFIndex v721 = v720;
                          for (CFIndex i5 = 0; i5 != v721; ++i5)
                          {
                            v723 = CFArrayGetValueAtIndex(v716[21], i5);
                            if (*((_DWORD *)v723 + 7) == *((_DWORD *)v713 + 4))
                            {
                              v724 = v723;
                              if (!v723[6])
                              {
                                CFTypeRef v725 = (CFTypeRef)v713[3];
                                if (v725) {
                                  CFTypeRef v725 = CFRetain(v725);
                                }
                                v724[6] = v725;
                              }
                            }
                            uint64_t DerivedStorage = v988;
                          }
                        }
                      }
                      break;
                    case 0xA:
                      if (!v715[32])
                      {
                        CFTypeRef v718 = (CFTypeRef)v713[3];
                        if (v718) {
                          CFTypeRef v718 = CFRetain(v718);
                        }
                        v716[32] = (CFArrayRef)v718;
                      }
                      break;
                    case 9:
                      if (!v715[31])
                      {
                        CFTypeRef v717 = (CFTypeRef)v713[3];
                        if (v717) {
                          CFTypeRef v717 = CFRetain(v717);
                        }
                        v716[31] = (CFArrayRef)v717;
                      }
                      break;
                    default:
                      if (!v715[2])
                      {
                        v726 = (const void *)v713[3];
                        if (v726)
                        {
                          CFArrayRef v727 = (const __CFArray *)CFRetain(v726);
                          v716[2] = v727;
                          if (v727)
                          {
                            int v728 = *((_DWORD *)v716 + 1);
                            if (v728 == 1986618469 || v728 == 1635088502) {
                              FigStartForwardingMediaServicesProcessDeathNotification();
                            }
                          }
                        }
                        else
                        {
                          v716[2] = 0;
                        }
                      }
                      break;
                  }
                }
LABEL_1386:
                ++v707;
              }
            }
          }
          uint64_t v706 = tagd + 1;
        }
        while (tagd != 13);
        uint64_t v46 = CFSetCreateMutable(allocg, 0, MEMORY[0x1E4F1D548]);
        v730 = v972;
        if (v707 >= 1)
        {
          v731 = theArraya;
          uint64_t v732 = v707;
          do
          {
            if (*v731) {
              CFSetAddValue(v46, *v731);
            }
            ++v731;
            --v732;
          }
          while (v732);
        }
        if (*(void *)(v938 + 168))
        {
          if (*(void *)(DerivedStorage + 128))
          {
            CMByteStreamGetCMBaseObject();
            FigCRABSGetClassID();
            if (CMBaseObjectIsMemberOfClass())
            {
              v733 = (const void *)FigCFNumberCreateSInt32();
              uint64_t v734 = CMByteStreamGetCMBaseObject();
              uint64_t v735 = *(void *)(CMBaseObjectGetVTable() + 8);
              if (v735) {
                uint64_t v736 = v735;
              }
              else {
                uint64_t v736 = 0;
              }
              v737 = *(void (**)(uint64_t, void, const void *))(v736 + 56);
              if (v737) {
                v737(v734, *MEMORY[0x1E4F1FB88], v733);
              }
              if (v733) {
                CFRelease(v733);
              }
            }
          }
        }
        if (*v972)
        {
          unsigned int v738 = FigPlaybackBossSetTrackList(*v972, v707, allocatorb, theArraya, (uint64_t)v998);
          CFTypeRef v44 = 0;
          if (!v738)
          {
            CFDictionaryRef v45 = 0;
            CMTag v147 = 0;
            goto LABEL_1526;
          }
          unsigned int alloc = v738;
          CFDictionaryRef v45 = 0;
          CMTag v147 = 0;
LABEL_248:
          a1 = v982;
          goto LABEL_1708;
        }
        char v739 = *(unsigned char *)(v938 + 78) != 0;
        uint64_t v740 = CMBaseObjectGetDerivedStorage();
        formatDescriptionOut[0].start.CMTimeValue value = 0;
        uint64_t v741 = *(void *)(v740 + 128);
        if (v46 && v741)
        {
          *(_DWORD *)CMTimeValue value = 0;
          CFSetApplyFunction(v46, (CFSetApplierFunction)fp_interrogateRenderPipeline, value);
          if (value[0]) {
            goto LABEL_1451;
          }
          BOOL v742 = ((*(_DWORD *)value >> 1) & 1) == 0;
        }
        else
        {
          if (!v741) {
            goto LABEL_1451;
          }
          BOOL v742 = 1;
        }
        *(void *)CMTimeValue value = 0;
        uint64_t v743 = CMByteStreamGetCMBaseObject();
        uint64_t v744 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v744) {
          uint64_t v745 = v744;
        }
        else {
          uint64_t v745 = 0;
        }
        v746 = *(void (**)(uint64_t, void, void, unsigned char *))(v745 + 48);
        if (v746)
        {
          v746(v743, *MEMORY[0x1E4F1FB20], 0, value);
          uint64_t v747 = *(void *)value;
          uint64_t v748 = *MEMORY[0x1E4F1CFD0];
          if (*(void *)value) {
            CFRelease(*(CFTypeRef *)value);
          }
          if (v748 == v747) {
            goto LABEL_1451;
          }
LABEL_1453:
          uint64_t v749 = CMByteStreamGetCMBaseObject();
          uint64_t v750 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v750) {
            uint64_t v751 = v750;
          }
          else {
            uint64_t v751 = 0;
          }
          v752 = *(unsigned int (**)(uint64_t, void, void, CMTimeRange *))(v751 + 48);
          if (!v752
            || v752(v749, *MEMORY[0x1E4F1FB30], 0, formatDescriptionOut)
            || !formatDescriptionOut[0].start.value)
          {
            goto LABEL_1461;
          }
          if (v748 != formatDescriptionOut[0].start.value)
          {
LABEL_1460:
            CFRelease((CFTypeRef)formatDescriptionOut[0].start.value);
LABEL_1461:
            v739 |= 8u;
            goto LABEL_1462;
          }
          CMByteStreamGetCMBaseObject();
          FigCachedFileByteStreamGetClassID();
          if (CMBaseObjectIsMemberOfClass())
          {
            if (!v742) {
              goto LABEL_1460;
            }
            uint64_t v881 = CMBaseObjectGetDerivedStorage();
            CFIndex v882 = CFArrayGetCount(*(CFArrayRef *)(v881 + 648));
            if (v882 >= 1)
            {
              CFIndex v883 = v882;
              CFIndex v884 = 0;
              do
              {
                v885 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v881 + 648), v884);
                if (v885[1] == 1986618469 && !*((unsigned char *)v885 + 72)) {
                  goto LABEL_1460;
                }
              }
              while (v883 != ++v884);
            }
            playerfig_setReadCacheEnabled();
          }
          CFRelease((CFTypeRef)formatDescriptionOut[0].start.value);
          goto LABEL_1462;
        }
        uint64_t v748 = *MEMORY[0x1E4F1CFD0];
        if (*MEMORY[0x1E4F1CFD0]) {
          goto LABEL_1453;
        }
LABEL_1451:
        playerfig_setReadCacheEnabled();
LABEL_1462:
        CMTag v147 = CFDictionaryCreateMutable(allocg, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        v753 = (_OWORD *)(DerivedStorage + 236);
        if ((*(_DWORD *)(DerivedStorage + 248) & 0x1D) == 1)
        {
          *(_OWORD *)&formatDescriptionOut[0].start.CMTimeValue value = *v753;
          formatDescriptionOut[0].start.CMTimeEpoch epoch = *(void *)(DerivedStorage + 252);
          CMTag v994 = (CMTag)*MEMORY[0x1E4F1FA48];
          *(_OWORD *)CMTimeValue value = *MEMORY[0x1E4F1FA48];
          uint64_t v754 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
          *(void *)&value[16] = v754;
          if ((CMTimeCompare(&formatDescriptionOut[0].start, (CMTime *)value) & 0x80000000) == 0
            && (*(_DWORD *)(DerivedStorage + 272) & 0x1D) == 1)
          {
            *(_OWORD *)&formatDescriptionOut[0].start.CMTimeValue value = *(_OWORD *)(DerivedStorage + 260);
            formatDescriptionOut[0].start.CMTimeEpoch epoch = *(void *)(DerivedStorage + 276);
            *(CMTag *)CMTimeValue value = v994;
            *(void *)&value[16] = v754;
            if (CMTimeCompare(&formatDescriptionOut[0].start, (CMTime *)value) >= 1)
            {
              long long v755 = *(_OWORD *)(DerivedStorage + 252);
              *(_OWORD *)&formatDescriptionOut[0].start.CMTimeValue value = *v753;
              *(_OWORD *)&formatDescriptionOut[0].start.CMTimeEpoch epoch = v755;
              *(_OWORD *)&formatDescriptionOut[0].duration.CMTimeScale timescale = *(_OWORD *)(DerivedStorage + 268);
              FigCFDictionarySetCMTimeRange();
            }
          }
        }
        if (*(unsigned char *)(DerivedStorage + 2048))
        {
          CFStringRef v756 = CFStringCreateWithCString(allocg, (const char *)(DerivedStorage + 2048), 0x600u);
          if (v756)
          {
            CFStringRef v757 = v756;
            CFDictionarySetValue(v147, @"Boss_ItemIdentifier", v756);
            CFRelease(v757);
          }
        }
        if (a2) {
          uint64_t v758 = *(void *)(DerivedStorage + 328);
        }
        else {
          uint64_t v758 = 1;
        }
        unsigned int v759 = FigPlaybackBossCreate(allocg, *(const void **)(DerivedStorage + 968), v707, allocatorb, theArraya, (uint64_t)v998, *(const void **)(DerivedStorage + 976), (const void *)v758, *(OpaqueCMClock **)(v938 + 88), v739, v147, v972);
        if (v759)
        {
          unsigned int alloc = v759;
          *(_DWORD *)v1047 = 0;
          LOBYTE(cf.value) = 0;
          v909 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v910 = *(_DWORD *)v1047;
          if (os_log_type_enabled(v909, cf.value)) {
            unsigned int v911 = v910;
          }
          else {
            unsigned int v911 = v910 & 0xFFFFFFFE;
          }
          if (v911)
          {
            if (v982) {
              v912 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
            }
            else {
              v912 = "";
            }
            *(_DWORD *)CMTimeValue value = 136315906;
            *(void *)&value[4] = "itemfig_rebuildRenderPipelinesAndBossGuts";
            *(_WORD *)&value[12] = 2048;
            *(void *)&value[14] = v982;
            *(_WORD *)&value[22] = 2082;
            *(void *)&value[24] = v912;
            *(_WORD *)&value[32] = 1024;
            *(_DWORD *)&value[34] = alloc;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          CFTypeRef v44 = 0;
          CFDictionaryRef v45 = 0;
          a1 = v982;
          goto LABEL_1324;
        }
        a1 = v982;
        CMBaseObjectGetDerivedStorage();
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterAddWeakListeners();
        CMNotificationCenterGetDefaultLocalCenter();
        FigPlaybackBossGetTimebase(*v972);
        FigNotificationCenterAddWeakListener();
        MEMORY[0x19970E910](*(void *)(v938 + 456));
        v760 = *(const void **)(v938 + 464);
        if (v760)
        {
          CFTypeRef v44 = CFRetain(v760);
          MEMORY[0x19970E930](*(void *)(v938 + 456));
          if (v44)
          {
            CFNumberRef v761 = CFNumberCreate(allocg, kCFNumberSInt32Type, (const void *)(v938 + 472));
            unsigned int v762 = FigPlaybackBossSetClientPID(*v972, (uint64_t)v761);
            if (v761)
            {
              unsigned int v763 = v762;
              CFRelease(v761);
              unsigned int v762 = v763;
            }
            if (v762)
            {
              unsigned int alloc = v762;
LABEL_1480:
              CFDictionaryRef v45 = 0;
              goto LABEL_1708;
            }
            CFRelease(v44);
          }
        }
        else
        {
          MEMORY[0x19970E930](*(void *)(v938 + 456));
        }
        itemfig_bumpBossControlTokenAndMarkBossAsNonIdle((uint64_t)v982, 0);
        uint64_t v764 = *(void *)(DerivedStorage + 808);
        if (v764)
        {
          Timebase = (void *)FigPlaybackBossGetTimebase(*v972);
          unsigned int v766 = FigVideoCompositionProcessorSetProperty(v764, @"VideoCompositionProcessorProperty_Timebase", Timebase);
          if (v766)
          {
            unsigned int alloc = v766;
            CFTypeRef v44 = 0;
            goto LABEL_1480;
          }
          if ((*(_DWORD *)(DerivedStorage + 248) & 0x1D) != 1) {
            goto LABEL_1491;
          }
          *(_OWORD *)&formatDescriptionOut[0].start.CMTimeValue value = *v753;
          formatDescriptionOut[0].start.CMTimeEpoch epoch = *(void *)(DerivedStorage + 252);
          CMTag v995 = (CMTag)*MEMORY[0x1E4F1FA48];
          *(_OWORD *)CMTimeValue value = *MEMORY[0x1E4F1FA48];
          uint64_t v767 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
          *(void *)&value[16] = v767;
          if (CMTimeCompare(&formatDescriptionOut[0].start, (CMTime *)value) < 0) {
            goto LABEL_1491;
          }
          if ((*(_DWORD *)(DerivedStorage + 272) & 0x1D) == 1
            && (*(_OWORD *)&formatDescriptionOut[0].start.CMTimeValue value = *(_OWORD *)(DerivedStorage + 260),
                formatDescriptionOut[0].start.CMTimeEpoch epoch = *(void *)(DerivedStorage + 276),
                *(CMTag *)CMTimeValue value = v995,
                *(void *)&value[16] = v767,
                CMTimeCompare(&formatDescriptionOut[0].start, (CMTime *)value) >= 1))
          {
            long long v768 = *(_OWORD *)(DerivedStorage + 252);
            *(_OWORD *)&formatDescriptionOut[0].start.CMTimeValue value = *v753;
            *(_OWORD *)&formatDescriptionOut[0].start.CMTimeEpoch epoch = v768;
            *(_OWORD *)&formatDescriptionOut[0].duration.CMTimeScale timescale = *(_OWORD *)(DerivedStorage + 268);
            CFDictionaryRef v45 = CMTimeRangeCopyAsDictionary(formatDescriptionOut, allocg);
            unsigned int v769 = FigVideoCompositionProcessorSetProperty(*(void *)(DerivedStorage + 808), @"VideoCompositionProcessorProperty_LoopTimeRange", v45);
            if (v769)
            {
LABEL_1495:
              unsigned int alloc = v769;
LABEL_1705:
              CFTypeRef v44 = 0;
              goto LABEL_1708;
            }
          }
          else
          {
LABEL_1491:
            unsigned int v770 = FigVideoCompositionProcessorSetProperty(*(void *)(DerivedStorage + 808), @"VideoCompositionProcessorProperty_LoopTimeRange", 0);
            CFTypeRef v44 = 0;
            if (v770)
            {
              unsigned int alloc = v770;
              CFDictionaryRef v45 = 0;
              goto LABEL_1708;
            }
            CFDictionaryRef v45 = 0;
          }
          uint64_t v771 = v938;
          unsigned int v769 = FigPlaybackBossSetVideoCompositionProcessor(*(void *)(DerivedStorage + 352), *(const void **)(DerivedStorage + 808));
          if (v769) {
            goto LABEL_1495;
          }
          unsigned int v769 = FigPlaybackBossSetSeekingWaitsForVideoCompositionRendering(*(void *)(DerivedStorage + 352), *(unsigned __int8 *)(DerivedStorage + 545));
          if (v769) {
            goto LABEL_1495;
          }
        }
        else
        {
          CFDictionaryRef v45 = 0;
          uint64_t v771 = v938;
        }
        if ((*(_DWORD *)(DerivedStorage + 36) & 0x1D) == 1)
        {
          uint64_t v772 = DerivedStorage + 24;
          if (*(void *)(DerivedStorage + 128))
          {
            CMByteStreamGetCMBaseObject();
            FigCRABSGetClassID();
            uint64_t v771 = v938;
            if (CMBaseObjectIsMemberOfClass())
            {
              *(_OWORD *)&formatDescriptionOut[0].start.CMTimeValue value = *(_OWORD *)v772;
              formatDescriptionOut[0].start.CMTimeEpoch epoch = *(void *)(DerivedStorage + 40);
              *(_OWORD *)CMTimeValue value = *MEMORY[0x1E4F1FA48];
              *(void *)&value[16] = *(void *)(MEMORY[0x1E4F1FA48] + 16);
              CMTimeRangeMake(&v1018, &formatDescriptionOut[0].start, (CMTime *)value);
              itemfig_HintStreamForTimeRange((uint64_t)v982, (long long *)&v1018.start.value);
            }
          }
          if ((*(_DWORD *)(DerivedStorage + 96) & 0xFu) - 1 >= 5)
          {
            if (*(float *)(v771 + 48) >= 0.0) {
              unsigned int v773 = 1;
            }
            else {
              unsigned int v773 = 2;
            }
          }
          else
          {
            unsigned int v773 = dword_194993280[(*(_DWORD *)(DerivedStorage + 96) & 0xF) - 1];
          }
          if (dword_1E9350BF0 >= 2)
          {
            v996 = v147;
            *(_DWORD *)v1047 = 0;
            LOBYTE(cf.value) = 0;
            v774 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int v775 = *(_DWORD *)v1047;
            if (os_log_type_enabled(v774, cf.value)) {
              unsigned int v776 = v775;
            }
            else {
              unsigned int v776 = v775 & 0xFFFFFFFE;
            }
            if (v776)
            {
              if (v933) {
                v777 = (const char *)(CMBaseObjectGetDerivedStorage() + 944);
              }
              else {
                v777 = "";
              }
              v966 = v777;
              if (v982) {
                v778 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
              }
              else {
                v778 = "";
              }
              v962 = v778;
              *(_OWORD *)&formatDescriptionOut[0].start.CMTimeValue value = *(_OWORD *)v772;
              formatDescriptionOut[0].start.CMTimeEpoch epoch = *(void *)(DerivedStorage + 40);
              Float64 Seconds = CMTimeGetSeconds(&formatDescriptionOut[0].start);
              uint64_t DerivedStorage = v988;
              *(_OWORD *)&formatDescriptionOut[0].start.CMTimeValue value = *(_OWORD *)(v988 + 48);
              formatDescriptionOut[0].start.CMTimeEpoch epoch = *(void *)(v988 + 64);
              Float64 v780 = CMTimeGetSeconds(&formatDescriptionOut[0].start);
              *(_OWORD *)&formatDescriptionOut[0].start.CMTimeValue value = *(_OWORD *)(v988 + 72);
              formatDescriptionOut[0].start.CMTimeEpoch epoch = *(void *)(v988 + 88);
              Float64 v781 = CMTimeGetSeconds(&formatDescriptionOut[0].start);
              *(_DWORD *)CMTimeValue value = 136317186;
              *(void *)&value[4] = "itemfig_rebuildRenderPipelinesAndBossGuts";
              *(_WORD *)&value[12] = 2048;
              *(void *)&value[14] = v933;
              *(_WORD *)&value[22] = 2082;
              *(void *)&value[24] = v966;
              *(_WORD *)&value[32] = 2048;
              *(void *)&value[34] = v982;
              *(_WORD *)v1031 = 2082;
              *(void *)&v1031[2] = v962;
              __int16 v1032 = 2048;
              Float64 v1033 = Seconds;
              __int16 v1034 = 1024;
              unsigned int v1035 = v773;
              __int16 v1036 = 2048;
              Float64 v1037 = v780;
              __int16 v1038 = 2048;
              Float64 v1039 = v781;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            CMTag v147 = v996;
          }
          uint64_t v782 = *(void *)(DerivedStorage + 352);
          v783 = *(const void **)(DerivedStorage + 512);
          int v784 = *(_DWORD *)(DerivedStorage + 524);
          *(_OWORD *)&formatDescriptionOut[0].start.CMTimeValue value = *(_OWORD *)v772;
          formatDescriptionOut[0].start.CMTimeEpoch epoch = *(void *)(v772 + 16);
          *(_OWORD *)CMTimeValue value = *(_OWORD *)(DerivedStorage + 48);
          *(void *)&value[16] = *(void *)(DerivedStorage + 64);
          *(_OWORD *)v1047 = *(_OWORD *)(DerivedStorage + 72);
          *(void *)&v1047[16] = *(void *)(DerivedStorage + 88);
          FigPlaybackBossSetTimeWithRange(v782, &formatDescriptionOut[0].start, v773, (CMTime *)value, (CMTime *)v1047, v783, v784);
          uint64_t v771 = v938;
          v730 = v972;
          if (*(unsigned char *)(DerivedStorage + 1697))
          {
            float v785 = 0.0;
            if (*(_DWORD *)(v938 + 52) == 4) {
              float v785 = *(float *)(v938 + 48);
            }
            itemfig_updateAccessLogEntry(v785);
          }
          itemfig_reportingAgentReportPlayStartMovieTime();
        }
        itemfig_setEndTimeOnBoss();
        uint64_t v786 = *(void *)(DerivedStorage + 352);
        *(_OWORD *)&formatDescriptionOut[0].start.CMTimeValue value = *(_OWORD *)(DerivedStorage + 164);
        formatDescriptionOut[0].start.CMTimeEpoch epoch = *(void *)(DerivedStorage + 180);
        FigPlaybackBossSetReverseEndTime(v786, (long long *)&formatDescriptionOut[0].start.value);
        FigPlaybackBossSetStopAtEnd(*(unsigned char **)(DerivedStorage + 352), *(_DWORD *)(v771 + 776) == 1);
        uint64_t v787 = *(void *)(DerivedStorage + 352);
        *(_OWORD *)&formatDescriptionOut[0].start.CMTimeValue value = *(_OWORD *)(DerivedStorage + 188);
        formatDescriptionOut[0].start.CMTimeEpoch epoch = *(void *)(DerivedStorage + 204);
        FigPlaybackBossSetAdvanceTimeForOverlappedPlayback(v787, (long long *)&formatDescriptionOut[0].start.value);
LABEL_1526:
        v997 = v147;
        if (*(unsigned char *)(DerivedStorage + 284)) {
          FigPlaybackBossSetReversalLimits(*v730, 10, 3);
        }
        uint64_t v788 = CMBaseObjectGetDerivedStorage();
        uint64_t v789 = CMBaseObjectGetDerivedStorage();
        float v790 = *(float *)(v789 + 804);
        float v791 = *(float *)(v789 + 808);
        float v792 = 1.0;
        float v793 = fmaxf(v790, 1.0);
        if (!*(unsigned char *)(v789 + 801)) {
          float v793 = 1.0;
        }
        float v794 = fminf(v791, 1.0);
        if (*(unsigned char *)(v789 + 802)) {
          float v792 = v794;
        }
        if (*(unsigned char *)(v789 + 920)) {
          char v795 = 1;
        }
        else {
          char v795 = *(unsigned char *)(v789 + 801);
        }
        if (*(unsigned char *)(v789 + 920)) {
          char v796 = 1;
        }
        else {
          char v796 = *(unsigned char *)(v789 + 802);
        }
        if (*(unsigned char *)(v789 + 920))
        {
          float v790 = v793;
          float v791 = v792;
        }
        FigPlaybackBossSetAudibleRateRange(*(void *)(v788 + 352), v795, v796, v790, v791);
        uint64_t v797 = CMBaseObjectGetDerivedStorage();
        CFIndex v798 = CFArrayGetCount(*(CFArrayRef *)(v797 + 648));
        if (v798 < 1)
        {
          v800 = 0;
        }
        else
        {
          CFIndex v799 = v798;
          v800 = 0;
          CFIndex v801 = 0;
          while (1)
          {
            v802 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v797 + 648), v801);
            if (*((_DWORD *)v802 + 1) == 1936684398 && *((unsigned char *)v802 + 8))
            {
              v803 = (__CFString *)*((void *)v802 + 14);
              if (!v803) {
                v803 = *(__CFString **)(v797 + 1464);
              }
              v804 = v800 ? v800 : v803;
              BOOL v805 = @"LowQualityZeroLatency" == v803 || @"LowQualityZeroLatency" == v800;
              v800 = v805 ? @"LowQualityZeroLatency" : v804;
              if (v800 == @"LowQualityZeroLatency") {
                break;
              }
            }
            if (v799 == ++v801) {
              goto LABEL_1560;
            }
          }
          v800 = @"LowQualityZeroLatency";
        }
LABEL_1560:
        if (v800 == @"TimeDomain" || v800 == @"Spectral" || v800 == @"Varispeed")
        {
          FigPlaybackBossSetRateSnapping(*(void *)(v797 + 352), 0, 0.03125, 32.0);
          a1 = v982;
          uint64_t DerivedStorage = v988;
          v808 = v972;
        }
        else
        {
          uint64_t v809 = *(void *)(v797 + 352);
          a1 = v982;
          uint64_t DerivedStorage = v988;
          v808 = v972;
          if (v800 == @"LowQualityZeroLatency")
          {
            FigPlaybackBossSetRateSnapping(v809, 1, 0.0, 0.0);
          }
          else
          {
            FigPlaybackBossSetRateSnapping(v809, 0, 0.03125, 32.0);
            if (v800)
            {
              *(_DWORD *)v1047 = 0;
              LOBYTE(cf.value) = 0;
              v810 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              unsigned int v811 = *(_DWORD *)v1047;
              if (os_log_type_enabled(v810, cf.value)) {
                unsigned int v812 = v811;
              }
              else {
                unsigned int v812 = v811 & 0xFFFFFFFE;
              }
              if (v812)
              {
                *(_DWORD *)CMTimeValue value = 136315138;
                *(void *)&value[4] = "itemfig_setRateSnappingOnBoss";
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              a1 = v982;
            }
          }
        }
        FigPlaybackBossSetContinuePlayingDuringPrerollForSeek(*(void *)(DerivedStorage + 352), *(unsigned char *)(DerivedStorage + 287));
        FigPlaybackBossSetContinuePlayingDuringPrerollForRateChange(*(void *)(DerivedStorage + 352), *(unsigned char *)(DerivedStorage + 288));
        if (*(unsigned char *)(DerivedStorage + 290)) {
          FigPlaybackBossSetIFrameOnlySpeedThreshold(*(void *)(DerivedStorage + 352), *(float *)(DerivedStorage + 292));
        }
        FigPlaybackBossSetUseIFrameOnlyPlaybackForHighRateScaledEdits(*(void *)(DerivedStorage + 352), *(unsigned char *)(DerivedStorage + 289));
        uint64_t v813 = *(void *)(DerivedStorage + 352);
        *(_OWORD *)&formatDescriptionOut[0].start.CMTimeValue value = *(_OWORD *)(DerivedStorage + 296);
        formatDescriptionOut[0].start.CMTimeEpoch epoch = *(void *)(DerivedStorage + 312);
        FigPlaybackBossSetMinimumIntervalForIFrameOnlyPlayback(v813, (long long *)&formatDescriptionOut[0].start.value);
        FigPlaybackBossSetThoroughlyRefreshClosedCaptionsWhenSeeking(*(void *)(DerivedStorage + 352), *(unsigned char *)(DerivedStorage + 320));
        v814 = *(const void **)(DerivedStorage + 360);
        *(void *)(DerivedStorage + 360) = v46;
        if (v46) {
          CFRetain(v46);
        }
        if (v814) {
          CFRelease(v814);
        }
        uint64_t v815 = 0;
        uint64_t v816 = DerivedStorage + 368;
        do
        {
          long long v817 = *(_OWORD *)(v816 + v815);
          *(_OWORD *)(v816 + v815) = *(long long *)((char *)&v1040 + v815);
          *(long long *)((char *)&v1040 + v815) = v817;
          v815 += 16;
        }
        while (v815 != 112);
        uint64_t v818 = v938;
        if (v707 >= 1)
        {
          if (*(void *)(DerivedStorage + 128))
          {
            MEMORY[0x19970E290](*(void *)(DerivedStorage + 616));
            v819 = (uint64_t *)(DerivedStorage + 600);
            v820 = *(void **)(DerivedStorage + 600);
            if (!v820
              || !FigPlayabilityMonitorCanReuse(v820, *(void *)(DerivedStorage + 968), allocatorb, v707, *(void *)(DerivedStorage + 128))|| !FigPlayabilityMonitorSetRenderPipelines((void *)*v819, v707, (uint64_t)theArraya)|| (uint64_t v821 = *v819, v822 = (const void *)FigPlaybackBossGetTimebase(*v808), !FigPlayabilityMonitorSetPlaybackTimebase(v821, v822)))
            {
              itemfig_unregisterAndDestroyPlayabilityMonitorNotification();
            }
            if (*v819)
            {
              MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 616));
              uint64_t v818 = v938;
            }
            else
            {
              v824 = *(const void **)(DerivedStorage + 968);
              v825 = *(const void **)(DerivedStorage + 128);
              v826 = (const void *)FigPlaybackBossGetTimebase(*(void *)(DerivedStorage + 352));
              v827 = v825;
              a1 = v982;
              unsigned int v828 = FigPlayabilityMonitorCreate(v824, allocatorb, theArraya, v707, v827, v826, *(_DWORD *)(DerivedStorage + 1352), (UInt8 **)(DerivedStorage + 600));
              MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 616));
              unsigned int v829 = v828;
              uint64_t v818 = v938;
              if (v829)
              {
                unsigned int alloc = v829;
                *(_DWORD *)v1047 = 0;
                LOBYTE(cf.value) = 0;
                v913 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                unsigned int v914 = *(_DWORD *)v1047;
                if (os_log_type_enabled(v913, cf.value)) {
                  unsigned int v915 = v914;
                }
                else {
                  unsigned int v915 = v914 & 0xFFFFFFFE;
                }
                if (v915)
                {
                  if (v982) {
                    v916 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
                  }
                  else {
                    v916 = "";
                  }
                  *(_DWORD *)CMTimeValue value = 136315906;
                  *(void *)&value[4] = "itemfig_rebuildRenderPipelinesAndBossGuts";
                  *(_WORD *)&value[12] = 2048;
                  *(void *)&value[14] = v982;
                  *(_WORD *)&value[22] = 2082;
                  *(void *)&value[24] = v916;
                  *(_WORD *)&value[32] = 1024;
                  *(_DWORD *)&value[34] = alloc;
                  _os_log_send_and_compose_impl();
                }
                fig_log_call_emit_and_clean_up_after_send_and_compose();
                CFTypeRef v44 = 0;
                a1 = v982;
                uint64_t DerivedStorage = v988;
                CMTag v147 = v997;
                goto LABEL_1708;
              }
            }
            itemfig_registerPlayabilityMonitorNotification(a1);
          }
          else
          {
            uint64_t DefaultLocalCenter = CMNotificationCenterGetDefaultLocalCenter();
            itemfig_LikelyToKeepUp(DefaultLocalCenter, a1);
          }
        }
        v830 = *(const void **)(DerivedStorage + 1864);
        if (v830)
        {
          FigSyncMomentSourceDestroy(v830);
          *(void *)(DerivedStorage + 1864) = 0;
        }
        v831 = (CFTypeRef *)(DerivedStorage + 1856);
        uint64_t v832 = *(void *)(DerivedStorage + 1856);
        if (v832)
        {
          FigOutOfBandTrackControllerInvalidate(v832);
          CMNotificationCenterGetDefaultLocalCenter();
          FigNotificationCenterRemoveWeakListener();
          CMNotificationCenterGetDefaultLocalCenter();
          FigNotificationCenterRemoveWeakListener();
          if (*v831)
          {
            CFRelease(*v831);
            CFTypeRef *v831 = 0;
          }
        }
        CFDictionaryRef v833 = *(const __CFDictionary **)(DerivedStorage + 1848);
        if (!v833) {
          goto LABEL_1702;
        }
        if (*(unsigned char *)(v818 + 122))
        {
          BOOL v834 = *(unsigned char *)(v818 + 123) != 0;
          if (*(unsigned char *)(v818 + 184)) {
            goto LABEL_1609;
          }
        }
        else
        {
          BOOL v834 = 0;
          if (*(unsigned char *)(v818 + 184)) {
            goto LABEL_1609;
          }
        }
        if (!v834)
        {
LABEL_1702:
          unsigned int alloc = itemfig_setMuted((uint64_t)a1, *(unsigned __int8 *)(v818 + 774));
          playerfig_updateCaptionOrSubtitleHintOnVideoPipeline((uint64_t)v933, a1);
          if (*(_DWORD *)(v818 + 52) == 4)
          {
            CMTag v147 = v997;
            if (*(float *)(v818 + 48) != 0.0) {
              itemfig_ReportAudioPlaybackThroughFigLog((uint64_t)a1);
            }
            goto LABEL_1705;
          }
          CFTypeRef v44 = 0;
LABEL_1707:
          CMTag v147 = v997;
          goto LABEL_1708;
        }
LABEL_1609:
        CFStringRef v835 = (const __CFString *)CFDictionaryGetValue(v833, @"MediaSelectionOptionsURL");
        if (!v835)
        {
          *(_DWORD *)v1047 = 0;
          LOBYTE(cf.value) = 0;
          v853 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v854 = *(_DWORD *)v1047;
          if (os_log_type_enabled(v853, cf.value)) {
            unsigned int v855 = v854;
          }
          else {
            unsigned int v855 = v854 & 0xFFFFFFFE;
          }
          if (v855)
          {
            if (v982) {
              v856 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
            }
            else {
              v856 = "";
            }
            *(_DWORD *)CMTimeValue value = 136315650;
            *(void *)&value[4] = "itemfig_rebuildRenderPipelinesAndBossGuts";
            *(_WORD *)&value[12] = 2048;
            *(void *)&value[14] = v982;
            *(_WORD *)&value[22] = 2082;
            *(void *)&value[24] = v856;
            _os_log_send_and_compose_impl();
          }
          uint64_t v818 = v938;
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          a1 = v982;
          goto LABEL_1702;
        }
        CFStringRef v836 = v835;
        if (CFStringFind(v835, @"://", 0).location == -1
          || (CFURLRef v837 = CFURLCreateWithString(allocg, v836, 0)) == 0)
        {
          int v848 = *(unsigned __int8 *)(DerivedStorage + 1241);
          *(_DWORD *)v1047 = 0;
          LOBYTE(cf.value) = 0;
          v849 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v850 = *(_DWORD *)v1047;
          if (os_log_type_enabled(v849, cf.value)) {
            unsigned int v851 = v850;
          }
          else {
            unsigned int v851 = v850 & 0xFFFFFFFE;
          }
          if (v851)
          {
            if (v982) {
              v852 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
            }
            else {
              v852 = "";
            }
            *(void *)&value[4] = "itemfig_rebuildRenderPipelinesAndBossGuts";
            v880 = @"<redacted>";
            *(_DWORD *)CMTimeValue value = 136315907;
            *(_WORD *)&value[12] = 2048;
            if (v848) {
              v880 = (__CFString *)v836;
            }
            *(void *)&value[14] = v982;
            *(_WORD *)&value[22] = 2082;
            *(void *)&value[24] = v852;
            *(_WORD *)&value[32] = 2113;
            *(void *)&value[34] = v880;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          a1 = v982;
          goto LABEL_1701;
        }
        CFURLRef v838 = v837;
        uint64_t v839 = CMBaseObjectGetDerivedStorage();
        if (!v839
          || (uint64_t v840 = v839,
              (v841 = CFDictionaryCreateMutable(allocg, 3, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540])) == 0))
        {
          int v917 = FigSignalErrorAt();
          *(_DWORD *)v1047 = 0;
          LOBYTE(cf.value) = 0;
          v918 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v919 = *(_DWORD *)v1047;
          if (os_log_type_enabled(v918, cf.value)) {
            unsigned int v920 = v919;
          }
          else {
            unsigned int v920 = v919 & 0xFFFFFFFE;
          }
          if (v920)
          {
            if (v982) {
              v921 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
            }
            else {
              v921 = "";
            }
            *(_DWORD *)CMTimeValue value = 136315906;
            *(void *)&value[4] = "itemfig_rebuildRenderPipelinesAndBossGuts";
            *(_WORD *)&value[12] = 2048;
            *(void *)&value[14] = v982;
            *(_WORD *)&value[22] = 2082;
            *(void *)&value[24] = v921;
            *(_WORD *)&value[32] = 1024;
            *(_DWORD *)&value[34] = v917;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          a1 = v982;
          uint64_t DerivedStorage = v988;
          goto LABEL_1700;
        }
        v842 = v841;
        v843 = *(const void **)(v840 + 112);
        if (v843) {
          CFDictionarySetValue(v841, @"ReferenceSecurityPolicyFlagBaseURL", v843);
        }
        uint64_t v844 = CMBaseObjectGetDerivedStorage();
        formatDescriptionOut[0].start.CMTimeValue value = 0;
        uint64_t v845 = FigAssetGetCMBaseObject(*(void *)(v844 + 1216));
        uint64_t v846 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v846) {
          uint64_t v847 = v846;
        }
        else {
          uint64_t v847 = 0;
        }
        v857 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, CMTimeRange *))(v847 + 48);
        if (v857)
        {
          int v858 = v857(v845, @"assetProperty_CreationFlags", allocg, formatDescriptionOut);
          int v859 = 0;
          v860 = (const void *)formatDescriptionOut[0].start.value;
          if (!v858 && formatDescriptionOut[0].start.value)
          {
            *(void *)CMTimeValue value = 0;
            CFNumberGetValue((CFNumberRef)formatDescriptionOut[0].start.value, kCFNumberSInt64Type, value);
            int v859 = (*(_DWORD *)value >> 1) & 0x1E;
            v860 = (const void *)formatDescriptionOut[0].start.value;
          }
          if (v860) {
            CFRelease(v860);
          }
          if (v859) {
            FigCFDictionarySetInt32();
          }
        }
        int v861 = FigOutOfBandTrackControllerCreate((uint64_t)allocg, v838, v842, (uint64_t *)(DerivedStorage + 1856));
        CFRelease(v842);
        if (*v831)
        {
          CMNotificationCenterGetDefaultLocalCenter();
          a1 = v982;
          FigNotificationCenterAddWeakListener();
          CMNotificationCenterGetDefaultLocalCenter();
          FigNotificationCenterAddWeakListener();
          if ((*(_DWORD *)(DerivedStorage + 36) & 0x1D) == 1)
          {
            uint64_t v862 = *(void *)(DerivedStorage + 1856);
            *(_OWORD *)&formatDescriptionOut[0].start.CMTimeValue value = *(_OWORD *)(DerivedStorage + 24);
            formatDescriptionOut[0].start.CMTimeEpoch epoch = *(void *)(DerivedStorage + 40);
            FigOutOfBandTrackControllerSetCurrentTime(v862, (long long *)&formatDescriptionOut[0].start.value);
          }
          v863 = *(const void **)(DerivedStorage + 1832);
          if (v863) {
            FigOutOfBandTrackControllerSetProperty((uint64_t)*v831, @"TextMarkupArray", v863);
          }
          if (v834)
          {
            LODWORD(formatDescriptionOut[0].start.value) = 0;
            *(_DWORD *)CMTimeValue value = 0;
            v864 = CFDictionaryCreateMutable(allocg, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
            if (!v864)
            {
              unsigned int alloc = FigSignalErrorAt();
              CFTypeRef v44 = 0;
              a1 = v982;
              goto LABEL_1707;
            }
            v865 = v864;
            v866 = (const void *)*MEMORY[0x1E4F1CFD0];
            if (*(unsigned char *)(v938 + 122)) {
              v867 = (const void *)*MEMORY[0x1E4F1CFD0];
            }
            else {
              v867 = (const void *)*MEMORY[0x1E4F1CFC8];
            }
            CFDictionarySetValue(v864, @"Visuals", v867);
            MEMORY[0x19970E910](*(void *)(v938 + 152));
            if (*(unsigned char *)(v938 + 122)) {
              CFDictionarySetValue(v865, @"NeroTransport", *(const void **)(v938 + 160));
            }
            MEMORY[0x19970E930](*(void *)(v938 + 152));
            FigOutOfBandTrackControllerSetProperty((uint64_t)*v831, @"UsingNeroVideo", v866);
            itemfig_GetDimensions(v982, (float *)formatDescriptionOut, (float *)value);
            v1059.float width = *(float *)&formatDescriptionOut[0].start.value;
            v1059.float height = *(float *)value;
            CFDictionaryRef DictionaryRepresentation = CGSizeCreateDictionaryRepresentation(v1059);
            if (DictionaryRepresentation) {
              FigOutOfBandTrackControllerSetProperty((uint64_t)*v831, @"NeroVideoDimensions", DictionaryRepresentation);
            }
            CFDictionaryRef v869 = CGSizeCreateDictionaryRepresentation(*(CGSize *)(v938 + 128));
            if (v869) {
              FigOutOfBandTrackControllerSetProperty((uint64_t)*v831, @"NeroDisplaySize", v869);
            }
            FigOutOfBandTrackControllerSetProperty((uint64_t)*v831, @"NeroVideoGravity", *(const void **)(v938 + 144));
            if (DictionaryRepresentation) {
              CFRelease(DictionaryRepresentation);
            }
            if (v869) {
              CFRelease(v869);
            }
            CFRelease(v865);
            a1 = v982;
          }
          int v870 = FigOutOfBandTrackControllerPrepare(*v831);
          if (!v870)
          {
            v871 = (const void *)FigPlaybackBossGetTimebase(*(void *)(DerivedStorage + 352));
            int v870 = FigSyncMomentSourceCreateWithDispatchQueue((uint64_t)itemfig_synchronizeOOBSController, (uint64_t)a1, v871, *(NSObject **)(DerivedStorage + 104), (uint64_t *)(DerivedStorage + 1864));
            if (!v870) {
              goto LABEL_1700;
            }
          }
          *(_DWORD *)v1047 = 0;
          LOBYTE(cf.value) = 0;
          v872 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v873 = *(_DWORD *)v1047;
          if (os_log_type_enabled(v872, cf.value)) {
            unsigned int v874 = v873;
          }
          else {
            unsigned int v874 = v873 & 0xFFFFFFFE;
          }
          if (!v874) {
            goto LABEL_1699;
          }
          if (v982) {
            v875 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
          }
          else {
            v875 = "";
          }
          *(_DWORD *)CMTimeValue value = 136315906;
          *(void *)&value[4] = "itemfig_rebuildRenderPipelinesAndBossGuts";
          *(_WORD *)&value[12] = 2048;
          *(void *)&value[14] = v982;
          *(_WORD *)&value[22] = 2082;
          *(void *)&value[24] = v875;
          *(_WORD *)&value[32] = 1024;
          *(_DWORD *)&value[34] = v870;
        }
        else
        {
          *(_DWORD *)v1047 = 0;
          LOBYTE(cf.value) = 0;
          v876 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v877 = *(_DWORD *)v1047;
          if (os_log_type_enabled(v876, cf.value)) {
            unsigned int v878 = v877;
          }
          else {
            unsigned int v878 = v877 & 0xFFFFFFFE;
          }
          if (!v878) {
            goto LABEL_1699;
          }
          if (v982) {
            v879 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
          }
          else {
            v879 = "";
          }
          *(_DWORD *)CMTimeValue value = 136315906;
          *(void *)&value[4] = "itemfig_rebuildRenderPipelinesAndBossGuts";
          *(_WORD *)&value[12] = 2048;
          *(void *)&value[14] = v982;
          *(_WORD *)&value[22] = 2082;
          *(void *)&value[24] = v879;
          *(_WORD *)&value[32] = 1024;
          *(_DWORD *)&value[34] = v861;
        }
        _os_log_send_and_compose_impl();
LABEL_1699:
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        a1 = v982;
LABEL_1700:
        CFRelease(v838);
LABEL_1701:
        uint64_t v818 = v938;
        goto LABEL_1702;
      }
      unsigned int alloc = FigSignalErrorAt();
      CFTypeRef v44 = 0;
      CFDictionaryRef v45 = 0;
      uint64_t v46 = 0;
      CMTag v147 = 0;
      CFMutableArrayRef v998 = 0;
LABEL_1746:
      int theArraya = 0;
      goto LABEL_248;
    }
    unsigned int alloc = FigSignalErrorAt();
LABEL_1744:
    CFTypeRef v44 = 0;
    CFDictionaryRef v45 = 0;
    uint64_t v46 = 0;
    CMTag v147 = 0;
    CFMutableArrayRef v998 = 0;
    allocatorb = 0;
    goto LABEL_1746;
  }
  uint64_t v646 = v645;
  CFAllocatorRef allocatorf = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef v647 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, &kRenderTripleArrayCallbacks);
  if (!v647)
  {
    unsigned int v892 = FigSignalErrorAt();
    itemfig_resetRenderTriple((uint64_t)formatDescriptionOut);
    *((void *)&v1045 + 1) = 0;
    if (!v892) {
      goto LABEL_1298;
    }
    unsigned int alloc = v892;
    goto LABEL_1736;
  }
  v428 = v647;
  alloCMTime cf = CFArrayGetCount(*(CFArrayRef *)(v646 + 648));
  if (allocf < 1) {
    goto LABEL_1297;
  }
  CFIndex v648 = 0;
  uint64_t v649 = MEMORY[0x1E4F1F9F8];
  while (1)
  {
    CFIndex tagc = v648;
    v650 = (unsigned int *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v646 + 648), v648);
    CFArrayRef v651 = (const __CFArray *)*((void *)v650 + 21);
    if (v651)
    {
      CFIndex v652 = CFArrayGetCount(v651);
      if (v652 >= 1) {
        break;
      }
    }
LABEL_1295:
    CFIndex v648 = tagc + 1;
    if (tagc + 1 == allocf)
    {
      uint64_t DerivedStorage = v988;
      goto LABEL_1297;
    }
  }
  CFIndex v653 = v652;
  CFIndex v654 = 0;
  CFIndex theArrayh = v652;
  while (1)
  {
    v655 = CFArrayGetValueAtIndex(*((CFArrayRef *)v650 + 21), v654);
    uint64_t v656 = *v650;
    int v657 = *((_DWORD *)v655 + 7);
    LODWORD(formatDescriptionOut[0].start.value) = *v650;
    LODWORD(formatDescriptionOut[0].start.epoch) = v657;
    v658 = (const void *)*((void *)v655 + 6);
    if (v658)
    {
      CFRelease(v658);
      *((void *)v655 + 6) = 0;
      uint64_t v656 = *v650;
    }
    *(_OWORD *)CMTimeValue value = *(_OWORD *)v649;
    *(void *)&value[16] = *(void *)(v649 + 16);
    unsigned int v659 = fp_createCommonRenderPipelineOptionsForTrack(a1, 0, (uint64_t)value, v656, 0, 0, (__CFDictionary **)&formatDescriptionOut[0].duration.timescale);
    if (v659) {
      break;
    }
    itemfig_reuseExistingRenderPipeline(*(void *)(v646 + 456), (uint64_t)formatDescriptionOut);
    v660 = (const void *)formatDescriptionOut[0].duration.value;
    if (formatDescriptionOut[0].duration.value) {
      goto LABEL_1293;
    }
    v661 = v428;
    v662 = (const void *)FigCFNumberCreateSInt32();
    if (FigCFDictionaryGetValue())
    {
      CFDictionaryRef v663 = CFDictionaryCreateMutable(allocatorf, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      FigCFDictionarySetValue();
    }
    else
    {
      CFDictionaryRef v663 = 0;
    }
    unsigned int v659 = FigRenderPipelineCreateForBufferQueue((uint64_t)allocatorf, *((const void **)v655 + 4), v663, (CFTypeRef *)&formatDescriptionOut[0].duration);
    a1 = v982;
    if (v662)
    {
      unsigned int v664 = v659;
      CFRelease(v662);
      unsigned int v659 = v664;
    }
    v428 = v661;
    if (v659) {
      break;
    }
    v660 = (const void *)formatDescriptionOut[0].duration.value;
    uint64_t v649 = MEMORY[0x1E4F1F9F8];
    CFIndex v653 = theArrayh;
    if (formatDescriptionOut[0].duration.value) {
LABEL_1293:
    }
      v660 = CFRetain(v660);
    *((void *)v655 + 6) = v660;
    CFArrayAppendValue(v428, formatDescriptionOut);
    itemfig_resetRenderTriple((uint64_t)formatDescriptionOut);
    if (v653 == ++v654) {
      goto LABEL_1295;
    }
  }
  unsigned int alloc = v659;
  itemfig_resetRenderTriple((uint64_t)formatDescriptionOut);
  CFTypeRef v44 = 0;
  CFDictionaryRef v45 = 0;
  uint64_t v46 = 0;
  CMTag v147 = 0;
  CFMutableArrayRef v998 = 0;
  allocatorb = 0;
  int theArraya = 0;
  *((void *)&v1045 + 1) = v428;
LABEL_1324:
  uint64_t DerivedStorage = v988;
LABEL_1708:
  if (*(unsigned char *)(DerivedStorage + 1697)) {
    itemfig_getFrameDropCountFromAllVideoPipelines((uint64_t)a1, (void *)(DerivedStorage + 1672));
  }
  if (v147) {
    CFRelease(v147);
  }
  free(allocatorb);
LABEL_1713:
  free(theArraya);
  free(v998);
  if (v46) {
    CFRelease(v46);
  }
  if (v45) {
    CFRelease(v45);
  }
  for (uint64_t i6 = 0; i6 != 112; i6 += 8)
  {
    v887 = *(const void **)((char *)&v1040 + i6);
    if (v887) {
      CFRelease(v887);
    }
  }
  if (alloc)
  {
    itemfig_unregisterAndDestroyPlayabilityMonitorNotification();
    playeritemfig_releaseRenderPipelines(v933, (uint64_t)a1, v934);
  }
  FigDeferredTransactionCommit((uint64_t)v1019);
  if (v1019) {
    CFRelease(v1019);
  }
  if (!v942 && v925 != *(unsigned __int8 *)(DerivedStorage + 2017))
  {
    v888 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    v889 = v888;
    v890 = (const void **)MEMORY[0x1E4F1CFD0];
    if (!*(unsigned char *)(DerivedStorage + 2017)) {
      v890 = (const void **)MEMORY[0x1E4F1CFC8];
    }
    CFDictionarySetValue(v888, @"HasEnabledAudio", *v890);
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    if (v889) {
      CFRelease(v889);
    }
  }
  if (v44) {
    CFRelease(v44);
  }
  return alloc;
}

Float64 itemfig_getPlayableDurationAtCurrentTime(uint64_t a1)
{
  long long v2 = *MEMORY[0x1E4F1FA48];
  v9.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1FA48] + 16);
  long long v3 = *(_OWORD *)(MEMORY[0x1E4F1FA30] + 16);
  *(_OWORD *)&v8.start.CMTimeValue value = *MEMORY[0x1E4F1FA30];
  *(_OWORD *)&v8.start.CMTimeEpoch epoch = v3;
  *(_OWORD *)&v8.duration.CMTimeScale timescale = *(_OWORD *)(MEMORY[0x1E4F1FA30] + 32);
  *(_OWORD *)&v9.CMTimeValue value = v2;
  itemfig_getNonNegativeCurrentTime(a1, &v9);
  range.CMTime start = v9;
  itemfig_getPlayableRangeAtTime(a1, &range.start, &v8);
  CMTimeRange range = v8;
  CMTime time = v9;
  if (!CMTimeRangeContainsTime(&range, &time)) {
    return 0.0;
  }
  memset(&time, 0, sizeof(time));
  CMTimeRange range = v8;
  CMTimeRangeGetEnd(&lhs, &range);
  range.CMTime start = v9;
  CMTimeSubtract(&time, &lhs, &range.start);
  range.CMTime start = time;
  return CMTimeGetSeconds(&range.start);
}

uint64_t itemfig_monitorPlayability(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 616));
  uint64_t v4 = *(void *)(DerivedStorage + 600);
  MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 616));
  if (v4)
  {
    CFArrayRef v5 = 0;
    goto LABEL_3;
  }
  uint64_t v9 = itemfig_assureBasicsReadyForInspection(a1);
  if (v9)
  {
    uint64_t v6 = v9;
    goto LABEL_57;
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (!Mutable)
  {
    uint64_t v6 = FigSignalErrorAt();
    if (!v6) {
      return v6;
    }
LABEL_57:
    itemfig_unregisterAndDestroyPlayabilityMonitorNotification();
    return v6;
  }
  CFArrayRef v5 = Mutable;
  if (*(unsigned char *)(v3 + 120))
  {
    uint64_t v11 = itemfig_ensureTrackStorageArray();
    if (v11)
    {
      uint64_t v6 = v11;
      char v7 = 1;
      goto LABEL_6;
    }
    CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 648));
    if (Count >= 1)
    {
      CFIndex v13 = Count;
      for (CFIndex i = 0; i != v13; ++i)
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 648), i);
        if (ValueAtIndex[1] == 1936684398 && *((unsigned char *)ValueAtIndex + 8)) {
          FigCFArrayAppendInt32();
        }
      }
    }
  }
  else if (*(_DWORD *)(DerivedStorage + 996))
  {
    FigCFArrayAppendInt32();
  }
  if (*(_DWORD *)(DerivedStorage + 1008)) {
    FigCFArrayAppendInt32();
  }
  if (*(_DWORD *)(DerivedStorage + 1016)) {
    FigCFArrayAppendInt32();
  }
  if (*(_DWORD *)(DerivedStorage + 1040)) {
    FigCFArrayAppendInt32();
  }
  MEMORY[0x19970E290](*(void *)(v3 + 496));
  if (*(void *)(DerivedStorage + 656))
  {
    uint64_t v16 = itemfig_ensureTrackStorageArray();
    if (v16)
    {
      uint64_t v6 = v16;
      char v7 = 0;
      goto LABEL_5;
    }
    CFIndex v17 = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 648));
    if (v17 >= 1)
    {
      CFIndex v18 = v17;
      for (CFIndex j = 0; j != v18; ++j)
      {
        uint64_t v20 = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 648), j);
        if (v20[1] == 1986618469 && *((unsigned char *)v20 + 8)) {
          FigCFArrayAppendInt32();
        }
      }
    }
  }
  else if (!*(unsigned char *)(v3 + 121) && *(_DWORD *)(DerivedStorage + 1000))
  {
    FigCFArrayAppendInt32();
  }
  MEMORY[0x19970E2B0](*(void *)(v3 + 496));
  if (!*(void *)(DerivedStorage + 128) || CFArrayGetCount(v5) < 1) {
    goto LABEL_3;
  }
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 616));
  if (*(void *)(DerivedStorage + 600))
  {
    MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 616));
    goto LABEL_3;
  }
  CFIndex v21 = CFArrayGetCount(v5);
  uint64_t v22 = malloc_type_calloc(v21, 4uLL, 0x100004052888210uLL);
  if (!v22)
  {
    uint64_t v6 = FigSignalErrorAt();
    goto LABEL_4;
  }
  uint64_t v23 = v22;
  if (v21 >= 1)
  {
    uint64_t v24 = 0;
    uint64_t v25 = v22;
    do
    {
      FigCFArrayGetInt32AtIndex();
      ++v24;
      ++v25;
    }
    while (v21 != v24);
  }
  uint64_t v6 = FigPlayabilityMonitorCreate(*(const void **)(DerivedStorage + 968), v23, 0, v21, *(const void **)(DerivedStorage + 128), *(const void **)(DerivedStorage + 328), *(_DWORD *)(DerivedStorage + 1352), (UInt8 **)(DerivedStorage + 600));
  if (dword_1E9350BF0)
  {
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  free(v23);
  MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 616));
  if (!v6)
  {
LABEL_3:
    itemfig_registerPlayabilityMonitorNotification(a1);
    uint64_t v6 = 0;
LABEL_4:
    char v7 = 1;
    goto LABEL_5;
  }
  int v27 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT);
  char v7 = 1;
  fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_5:
  if (v5) {
LABEL_6:
  }
    CFRelease(v5);
  if (v6) {
    itemfig_unregisterAndDestroyPlayabilityMonitorNotification();
  }
  if ((v7 & 1) == 0) {
    MEMORY[0x19970E2B0](*(void *)(v3 + 496));
  }
  return v6;
}

void itemfig_accumulateFrameDropCountFromAllVideoPipelines(uint64_t a1)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  itemfig_getFrameDropCountFromAllVideoPipelines(a1, DerivedStorage + 210);
  DerivedStorage[208] += DerivedStorage[210] - DerivedStorage[209];
  DerivedStorage[210] = 0;
  DerivedStorage[209] = 0;
}

uint64_t itemfig_createRenderTriplesForVideo(const void *a1, int a2, int a3, int a4, int a5, int a6, const void *a7, __CFArray **a8, __CFArray **a9, __CFArray **a10)
{
  uint64_t v349 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFIndex v18 = *(const void **)(DerivedStorage + 8);
  uint64_t v19 = CMBaseObjectGetDerivedStorage();
  CFTypeRef v337 = 0;
  CFTypeRef v336 = 0;
  CFTypeRef v335 = 0;
  CFTypeRef v334 = 0;
  CFTypeRef v333 = 0;
  __n128 v20 = *(__n128 *)MEMORY[0x1E4F1F9F8];
  *(_OWORD *)&v332.CMTimeValue value = *MEMORY[0x1E4F1F9F8];
  CMTimeEpoch v21 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  v332.CMTimeEpoch epoch = v21;
  CFTypeRef v331 = 0;
  CFTypeRef v330 = 0;
  v329[0] = 0;
  *(_OWORD *)CFTypeRef v327 = 0u;
  *(_OWORD *)v328 = 0u;
  CFTypeRef v325 = 0;
  CFTypeRef v326 = 0;
  if (a2)
  {
    CFArrayRef v317 = 0;
    CFArrayRef theArray = 0;
    CFArrayRef v22 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    CFArrayRef v26 = 0;
    uint64_t v27 = *(void *)(DerivedStorage + 656);
    uint64_t v28 = 0;
    if (v27) {
      BOOL v29 = a3 == 0;
    }
    else {
      BOOL v29 = 0;
    }
    CFMutableArrayRef Mutable = 0;
    if (v29) {
      uint64_t v31 = 4294954433;
    }
    else {
      uint64_t v31 = 0;
    }
    goto LABEL_320;
  }
  CFIndex v32 = (void *)v19;
  int v303 = a3;
  CMTimeEpoch v306 = v21;
  __n128 v309 = v20;
  CFAllocatorRef v33 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, &kRenderTripleArrayCallbacks);
  if (!Mutable || (uint64_t v305 = CFArrayCreateMutable(v33, 0, &kRenderTripleArrayCallbacks)) == 0)
  {
    uint64_t v31 = FigSignalErrorAt();
    CFArrayRef v317 = 0;
    CFArrayRef theArray = 0;
    CFArrayRef v22 = 0;
    uint64_t v23 = 0;
    uint64_t v28 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    CFArrayRef v26 = 0;
    goto LABEL_320;
  }
  CFMutableArrayRef v34 = CFArrayCreateMutable(v33, 0, &kRenderTripleArrayCallbacks);
  if (!v34)
  {
    uint64_t v31 = FigSignalErrorAt();
    CFArrayRef v317 = 0;
    CFArrayRef theArray = 0;
    CFArrayRef v22 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    CFArrayRef v26 = 0;
    uint64_t v28 = v305;
    goto LABEL_320;
  }
  uint64_t v307 = v34;
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 1736));
  int v35 = *(const void **)(DerivedStorage + 1728);
  if (v35) {
    CFArrayRef theArray = (const __CFArray *)CFRetain(v35);
  }
  else {
    CFArrayRef theArray = 0;
  }
  unsigned int v300 = a7;
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 1736));
  MEMORY[0x19970E910](v32[28]);
  CFIndex v36 = (const void *)v32[26];
  if (v36) {
    CFArrayRef v26 = (const __CFArray *)CFRetain(v36);
  }
  else {
    CFArrayRef v26 = 0;
  }
  MEMORY[0x19970E930](v32[28]);
  MEMORY[0x19970E910](v32[30]);
  uint64_t v37 = (const void *)v32[32];
  if (v37) {
    CFArrayRef v317 = (const __CFArray *)CFRetain(v37);
  }
  else {
    CFArrayRef v317 = 0;
  }
  MEMORY[0x19970E930](v32[30]);
  BOOL shouldEnableMainVideo = itemfig_shouldEnableMainVideo();
  int v38 = (const void *)v32[71];
  if (v38)
  {
    CFRelease(v38);
    v32[71] = 0;
  }
  int v39 = (const void *)v32[80];
  if (v39)
  {
    CFRelease(v39);
    v32[80] = 0;
  }
  CFAllocatorRef allocator = v33;
  int v301 = a5;
  CFTypeRef v40 = (const void *)v32[74];
  if (v40)
  {
    CFRelease(v40);
    v32[74] = 0;
  }
  int v299 = a4;
  uint64_t v314 = v32;
  uint64_t v41 = *(void *)(DerivedStorage + 656);
  BOOL v42 = v41 != 0;
  BOOL v43 = *(void *)(DerivedStorage + 816) != 0;
  if (v41)
  {
    if (!a6) {
      goto LABEL_42;
    }
  }
  else
  {
    playeritemfig_releaseVideoCompositionObjects((uint64_t)a1);
    if (!a6) {
      goto LABEL_42;
    }
  }
  if (shouldEnableMainVideo)
  {
    CFIndex Count = (CFIndex)theArray;
    if (theArray) {
      CFIndex Count = CFArrayGetCount(theArray);
    }
    BOOL v45 = Count > 0;
    if (v317 && CFArrayGetCount(v317) > 0) {
      BOOL v45 = 1;
    }
    MEMORY[0x19970E910](v314[61]);
    uint64_t v46 = (const void *)v314[60];
    if (v46) {
      CFDictionaryRef v47 = (const __CFDictionary *)CFRetain(v46);
    }
    else {
      CFDictionaryRef v47 = 0;
    }
    MEMORY[0x19970E930](v314[61]);
    uint64_t v31 = FPSupport_CopyDestinationPixelBufferAttributesWithIOSurfaceSupport(v47, v45, (CFDictionaryRef *)&v337);
    if (v47) {
      CFRelease(v47);
    }
    if (v31) {
      goto LABEL_315;
    }
  }
LABEL_42:
  char v48 = v42 ^ v43 ^ 1;
  if (!shouldEnableMainVideo) {
    char v48 = 1;
  }
  CFAllocatorRef v49 = allocator;
  if ((v48 & 1) == 0)
  {
    CFArrayRef v50 = *(const __CFArray **)(DerivedStorage + 1104);
    if (v50)
    {
      if (CFArrayGetCount(v50) >= 1)
      {
        CMNotificationCenterGetDefaultLocalCenter();
        FigDispatchAsyncPostNotification();
        itemfig_handleReadyToDisplayVideoLatch((uint64_t)a1, 1, v300);
        if ((uint64_t)v314[27] < 1)
        {
          MEMORY[0x19970E910](*(void *)(DerivedStorage + 1120));
          int v51 = *(const void **)(DerivedStorage + 1104);
          if (v51)
          {
            CFRelease(v51);
            *(void *)(DerivedStorage + 1104) = 0;
          }
          uint64_t v52 = *(const void **)(DerivedStorage + 1112);
          if (v52)
          {
            CFRelease(v52);
            *(void *)(DerivedStorage + 1112) = 0;
          }
          MEMORY[0x19970E930](*(void *)(DerivedStorage + 1120));
        }
        else
        {
          itemfig_stashTransitionImageQueuesAndSlots();
        }
      }
    }
  }
  int v53 = _os_feature_enabled_impl();
  BOOL v54 = 0;
  uint64_t v304 = Mutable;
  CFArrayRef v302 = v26;
  uint64_t v308 = a1;
  if (shouldEnableMainVideo)
  {
    uint64_t v31 = 0;
    int v55 = v303;
    if (!v53) {
      goto LABEL_163;
    }
    if (*(void *)(DerivedStorage + 2152)) {
      FigCFArrayRemoveAllValues();
    }
    uint64_t v56 = *(unsigned int *)(DerivedStorage + 1000);
    if (v56)
    {
      cf[0] = 0;
      uint64_t v57 = *(void *)(DerivedStorage + 968);
      uint64_t v58 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v58) {
        uint64_t v59 = v58;
      }
      else {
        uint64_t v59 = 0;
      }
      int v60 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, void))(v59 + 56);
      if (v60)
      {
        uint64_t v31 = v60(v57, v56, cf, 0);
        if (!v31) {
          itemfig_copyFormatDescription((uint64_t)cf[0], (uint64_t *)&v330);
        }
      }
      else
      {
        uint64_t v31 = 4294954514;
      }
      if (cf[0]) {
        CFRelease(cf[0]);
      }
    }
    else
    {
      uint64_t v31 = 0;
    }
    v297 = v18;
    CFIndex v61 = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 648));
    if (v61 >= 1)
    {
      CFIndex v62 = v61;
      CFIndex v63 = 0;
      uint64_t v64 = 0;
      CFArrayRef v65 = *(const __CFArray **)(DerivedStorage + 648);
      do
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v65, v63);
        if (ValueAtIndex[1] == 1986618469 && *((unsigned char *)ValueAtIndex + 8) == 1) {
          ++v64;
        }
        ++v63;
      }
      while (v62 != v63);
      CFIndex v67 = 0;
      unsigned int v295 = (_OWORD *)(DerivedStorage + 692);
      while (1)
      {
        BOOL v68 = (unsigned int *)CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 648), v67);
        if (v68[1] == 1835365473) {
          break;
        }
LABEL_160:
        if (++v67 == v62) {
          goto LABEL_161;
        }
      }
      uint64_t v69 = v68;
      v324.CMTimeValue value = 0;
      type.CMTimeValue value = 0;
      uint64_t v70 = *(void *)(DerivedStorage + 968);
      uint64_t v71 = *v68;
      uint64_t v72 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v72) {
        uint64_t v73 = v72;
      }
      else {
        uint64_t v73 = 0;
      }
      CFTypeID v74 = *(uint64_t (**)(uint64_t, uint64_t, CMTime *, void))(v73 + 56);
      if (!v74)
      {
        uint64_t v31 = 4294954514;
LABEL_297:
        CFArrayRef v22 = 0;
        uint64_t v23 = 0;
        uint64_t v25 = 0;
        goto LABEL_298;
      }
      uint64_t CommonRenderPipelineOptionsForTrack = v74(v70, v71, &v324, 0);
      if (CommonRenderPipelineOptionsForTrack) {
        goto LABEL_541;
      }
      uint64_t v31 = itemfig_copyFormatDescription(v324.value, &type.value);
      if (v324.value)
      {
        CFRelease((CFTypeRef)v324.value);
        v324.CMTimeValue value = 0;
      }
      if (v31) {
        goto LABEL_297;
      }
      CFTypeRef v76 = v331;
      if (!v331)
      {
        uint64_t CommonRenderPipelineOptionsForTrack = FigSampleAttachmentCollectionRulesCopyForFilePlayback((uint64_t)allocator, v330, &v331);
        if (CommonRenderPipelineOptionsForTrack) {
          goto LABEL_541;
        }
        CFTypeRef v76 = v331;
      }
      CFTypeRef v77 = (const void *)type.value;
      uint64_t v78 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v78) {
        uint64_t v79 = v78;
      }
      else {
        uint64_t v79 = 0;
      }
      int v80 = *(uint64_t (**)(CFTypeRef, const void *))(v79 + 8);
      if (v80)
      {
        int v81 = v80(v76, v77);
        if (!v77) {
          goto LABEL_97;
        }
      }
      else
      {
        int v81 = 0;
        if (!v77)
        {
LABEL_97:
          if (!v81) {
            goto LABEL_159;
          }
          int v82 = 0;
          int v83 = *v69;
          int v84 = *(_DWORD *)(DerivedStorage + 1000);
          cf[0] = 0;
          theDict[0] = 0;
          value[0] = 0;
          if (v83 && v84)
          {
            uint64_t v85 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v85) {
              uint64_t v86 = v85;
            }
            else {
              uint64_t v86 = 0;
            }
            uint64_t v87 = *(unsigned int (**)(const void *, CFTypeRef *))(v86 + 120);
            if (v87
              && !v87(v308, cf)
              && ((uint64_t FigBaseObject = FigFormatReaderGetFigBaseObject(cf[0]),
                   (uint64_t v89 = *(void *)(CMBaseObjectGetVTable() + 8)) == 0)
                ? (uint64_t v90 = 0)
                : (uint64_t v90 = v89),
                  (CFIndex v91 = *(unsigned int (**)(uint64_t, __CFString *, const __CFAllocator *, CFDictionaryRef *))(v90 + 48)) != 0
               && !v91(FigBaseObject, @"TrackReferenceDictionary", allocator, theDict)
               && theDict[0]
               && CFDictionaryGetValueIfPresent(theDict[0], @"rndr", (const void **)value)
               && value[0]))
            {
              CFIndex v92 = CFArrayGetCount((CFArrayRef)value[0]);
              int v82 = 0;
              if (v92 >= 1)
              {
                CFIndex v93 = v92;
                if ((v92 & 1) == 0)
                {
                  for (CFIndex i = 0; i < v93; i += 2)
                  {
                    uint64_t v338 = 0;
                    FigCFArrayGetInt32AtIndex();
                    FigCFArrayGetInt32AtIndex();
                    BOOL v95 = HIDWORD(v338) == v83 && v338 == v84;
                    int v82 = v95;
                    if (v95) {
                      break;
                    }
                  }
                }
              }
            }
            else
            {
              int v82 = 0;
            }
          }
          if (cf[0]) {
            CFRelease(cf[0]);
          }
          CFMutableArrayRef Mutable = v304;
          if (theDict[0]) {
            CFRelease(theDict[0]);
          }
          int v96 = v64 == 1 ? v82 : 0;
          a1 = v308;
          if (v96 != 1) {
            goto LABEL_159;
          }
          if (!*(void *)(DerivedStorage + 2152))
          {
            CFMutableArrayRef v97 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E4F1D510]);
            *(void *)(DerivedStorage + 2152) = v97;
            if (!v97) {
              goto LABEL_540;
            }
          }
          if (*(void *)(DerivedStorage + 464))
          {
            LODWORD(v327[0]) = *v69;
            *(_OWORD *)CMTime cf = *v295;
            *(void *)uint64_t v340 = *(void *)(DerivedStorage + 708);
            uint64_t CommonRenderPipelineOptionsForTrack = fp_createCommonRenderPipelineOptionsForTrack(v308, 0, (uint64_t)cf, LODWORD(v327[0]), 1835365473, 0, (__CFDictionary **)&v327[1]);
            if (CommonRenderPipelineOptionsForTrack) {
              goto LABEL_541;
            }
            itemfig_reuseExistingRenderPipeline(*(void *)(DerivedStorage + 464), (uint64_t)v327);
            if (!v328[1]) {
              goto LABEL_148;
            }
            cf[0] = 0;
            uint64_t v98 = FigRenderPipelineGetFigBaseObject(v328[1]);
            uint64_t v99 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v99) {
              uint64_t v100 = v99;
            }
            else {
              uint64_t v100 = 0;
            }
            uint64_t v101 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v100 + 48);
            if (v101) {
              v101(v98, @"SourceSampleBufferQueue", allocator, cf);
            }
            if (!cf[0])
            {
LABEL_540:
              uint64_t CommonRenderPipelineOptionsForTrack = FigSignalErrorAt();
              goto LABEL_541;
            }
            CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 2152), cf[0]);
            if (cf[0]) {
              CFRelease(cf[0]);
            }
          }
          if (v328[1])
          {
LABEL_158:
            CFArrayAppendValue(v307, v327);
            itemfig_resetRenderTriple((uint64_t)v327);
LABEL_159:
            uint64_t v31 = 0;
            goto LABEL_160;
          }
LABEL_148:
          theDict[0] = 0;
          uint64_t v103 = (CFTypeRef *)(v69 + 4);
          uint64_t v102 = (const void *)*((void *)v69 + 2);
          if (v102)
          {
            CFRelease(v102);
            *uint64_t v103 = 0;
          }
          CallbacksForUnsortedSampleBuffers = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
          uint64_t CommonRenderPipelineOptionsForTrack = CMBufferQueueCreate(allocator, 0, CallbacksForUnsortedSampleBuffers, theDict);
          if (CommonRenderPipelineOptionsForTrack) {
            goto LABEL_541;
          }
          CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 2152), theDict[0]);
          uint64_t v31 = FigRenderPipelineCreateForBufferQueue((uint64_t)allocator, theDict[0], 0, (CFTypeRef *)v69 + 2);
          if (theDict[0])
          {
            CFRelease(theDict[0]);
            theDict[0] = 0;
          }
          if (v31) {
            goto LABEL_297;
          }
          LODWORD(v327[0]) = *v69;
          *(_OWORD *)CMTime cf = *v295;
          *(void *)uint64_t v340 = *(void *)(DerivedStorage + 708);
          uint64_t CommonRenderPipelineOptionsForTrack = fp_createCommonRenderPipelineOptionsForTrack(v308, 0, (uint64_t)cf, LODWORD(v327[0]), 1835365473, 0, (__CFDictionary **)v329);
          if (CommonRenderPipelineOptionsForTrack) {
            goto LABEL_541;
          }
          v328[1] = CFRetain(*v103);
          CFTypeRef v105 = v329[0];
          if (v329[0]) {
            CFTypeRef v105 = CFRetain(v329[0]);
          }
          v327[1] = v105;
          goto LABEL_158;
        }
      }
      CFRelease(v77);
      goto LABEL_97;
    }
LABEL_161:
    BOOL v54 = CFArrayGetCount(v307) > 0;
    CFArrayRef v26 = v302;
    CFIndex v18 = v297;
    CFAllocatorRef v49 = allocator;
  }
  else
  {
    uint64_t v31 = 0;
  }
  int v55 = v303;
LABEL_163:
  if (!shouldEnableMainVideo)
  {
    if (*((unsigned char *)v314 + 121))
    {
LABEL_315:
      CFArrayRef v22 = 0;
LABEL_316:
      uint64_t v23 = 0;
LABEL_317:
      uint64_t v25 = 0;
      goto LABEL_318;
    }
LABEL_189:
    itemfig_removeAllImageQueues((uint64_t)a1);
    playerfig_freeTransitionImageQueueAndSlot();
    goto LABEL_315;
  }
  if (!*(void *)(DerivedStorage + 656))
  {
    if (*((unsigned char *)v314 + 121)) {
      goto LABEL_315;
    }
    int v124 = *(_DWORD *)(DerivedStorage + 1000);
    if (v124)
    {
      BOOL v293 = v54;
      theDict[0] = 0;
      uint64_t TrackStorage = itemfig_getTrackStorage((uint64_t)a1, v124, theDict);
      if (!TrackStorage)
      {
        CFDictionaryRef v126 = theDict[0];
        if (*((void *)theDict[0] + 2))
        {
          FigStopForwardingMediaServicesProcessDeathNotification();
          __int16 v127 = (const void *)*((void *)v126 + 2);
          if (v127)
          {
            CFRelease(v127);
            *((void *)v126 + 2) = 0;
          }
        }
        uint64_t v128 = (uint64_t *)((char *)v126 + 48);
        uint64_t v129 = v314;
        if (!*((void *)v126 + 6)) {
          FigImageQueueTableCreate(allocator, (void *)v126 + 6);
        }
        uint64_t v130 = *(unsigned int *)(DerivedStorage + 1000);
        LODWORD(v327[0]) = *(_DWORD *)(DerivedStorage + 1000);
        if (!*((unsigned char *)v314 + 122)) {
          goto LABEL_481;
        }
        *(__n128 *)CMTime cf = v309;
        *(void *)uint64_t v340 = v306;
        uint64_t TrackStorage = fp_createCommonRenderPipelineOptionsForTrack(a1, 1, (uint64_t)cf, v130, 1986618469, 0, (__CFDictionary **)&v327[1]);
        if (!TrackStorage)
        {
          itemfig_reuseExistingRenderPipeline(*(void *)(DerivedStorage + 392), (uint64_t)v327);
          uint64_t v129 = v314;
          if (v328[1]) {
            goto LABEL_481;
          }
          value[0] = 0;
          uint64_t v131 = *(unsigned int *)(DerivedStorage + 1000);
          *(__n128 *)CMTime cf = v309;
          *(void *)uint64_t v340 = v306;
          uint64_t TrackStorage = fp_createCommonRenderPipelineOptionsForTrack(a1, 1, (uint64_t)cf, v131, 1986618469, 1, (__CFDictionary **)v329);
          if (!TrackStorage)
          {
            CFTypeRef v132 = *(CFTypeRef *)(DerivedStorage + 1104);
            if (v132) {
              CFTypeRef v132 = CFRetain(v132);
            }
            uint64_t v129 = v314;
            CFTypeRef v326 = v132;
            CFTypeRef v133 = *(CFTypeRef *)(DerivedStorage + 1112);
            if (v133) {
              CFTypeRef v133 = CFRetain(v133);
            }
            CFIndex v134 = 0;
            CFTypeRef v325 = v133;
            if (*(unsigned char *)(DerivedStorage + 1824)) {
              CFArrayRef v135 = 0;
            }
            else {
              CFArrayRef v135 = v26;
            }
            if (!*(unsigned char *)(DerivedStorage + 1824)) {
              CFIndex v134 = v314[27];
            }
            if (fp_createFigImageQueueArrayForVideoRenderPipeline((uint64_t)a1, *(unsigned int *)(DerivedStorage + 1000), 1, theArray, v135, v134, (CFArrayRef *)&v326, (CFArrayRef *)&v325, 0, *v128, 1, value))
            {
              int v136 = 1;
              CFTypeRef v137 = value[0];
            }
            else
            {
              CFTypeRef v137 = value[0];
              int v136 = fp_buildVideoRenderPipelineForTrack((uint64_t)v18, (uint64_t)a1, *(unsigned int *)(DerivedStorage + 1000), v337, 1, *((void *)v126 + 3), (const void *)v314[108], 1, (const __CFArray *)value[0], 0, 0, &v328[1]);
            }
            if (v137) {
              CFRelease(v137);
            }
            if (v136)
            {
              if (v327[1])
              {
                CFRelease(v327[1]);
                v327[1] = 0;
              }
              if (v329[0])
              {
                CFRelease(v329[0]);
                v329[0] = 0;
              }
              if (v328[1])
              {
                CFRelease(v328[1]);
                v328[1] = 0;
              }
              uint64_t v254 = v314[70];
              if (v254)
              {
                unsigned int v255 = (uint64_t *)MEMORY[0x1E4F1CFD0];
LABEL_480:
                FigRenderPipelineSetProperty_0(v254, @"ShouldCompensateForNeroScreenLatency", *v255);
              }
            }
            else
            {
              MEMORY[0x19970E910](*(void *)(DerivedStorage + 1120));
              CFArrayRef v256 = *(const void **)(DerivedStorage + 1104);
              CFTypeRef v257 = v326;
              *(void *)(DerivedStorage + 1104) = v326;
              if (v257) {
                CFRetain(v257);
              }
              if (v256) {
                CFRelease(v256);
              }
              CFIndex v258 = *(const void **)(DerivedStorage + 1112);
              CFTypeRef v259 = v325;
              *(void *)(DerivedStorage + 1112) = v325;
              if (v259) {
                CFRetain(v259);
              }
              if (v258) {
                CFRelease(v258);
              }
              MEMORY[0x19970E930](*(void *)(DerivedStorage + 1120));
              itemfig_removeAllImageQueues((uint64_t)a1);
              playerfig_freeTransitionImageQueueAndSlot();
              *((unsigned char *)v314 + 123) = 1;
              NotificationPayloadForProperties = playerfig_createNotificationPayloadForProperties(v18, (uint64_t)a1, v260, v261, v262, v263, v264, v265, @"IsNeroPlaybackActive", 0);
              CMNotificationCenterGetDefaultLocalCenter();
              FigDispatchAsyncPostNotification();
              if (NotificationPayloadForProperties) {
                CFRelease(NotificationPayloadForProperties);
              }
              uint64_t v254 = v314[70];
              if (v254)
              {
                unsigned int v255 = (uint64_t *)MEMORY[0x1E4F1CFC8];
                goto LABEL_480;
              }
            }
LABEL_481:
            if (!v328[1])
            {
              uint64_t v267 = *(unsigned int *)(DerivedStorage + 1000);
              *(__n128 *)CMTime cf = v309;
              *(void *)uint64_t v340 = v306;
              uint64_t v268 = fp_createCommonRenderPipelineOptionsForTrack(a1, 0, (uint64_t)cf, v267, 1986618469, 0, (__CFDictionary **)&v327[1]);
              if (v268) {
                goto LABEL_543;
              }
              itemfig_reuseExistingRenderPipeline(*(void *)(DerivedStorage + 392), (uint64_t)v327);
              uint64_t v129 = v314;
              if (!v328[1])
              {
                value[0] = 0;
                uint64_t v269 = *(unsigned int *)(DerivedStorage + 1000);
                *(__n128 *)CMTime cf = v309;
                *(void *)uint64_t v340 = v306;
                uint64_t v268 = fp_createCommonRenderPipelineOptionsForTrack(a1, 0, (uint64_t)cf, v269, 1986618469, 1, (__CFDictionary **)v329);
                if (!v268)
                {
                  CFTypeRef v270 = *(CFTypeRef *)(DerivedStorage + 1104);
                  CFArrayRef v26 = v302;
                  if (v270) {
                    CFTypeRef v270 = CFRetain(v270);
                  }
                  CFTypeRef v326 = v270;
                  CFTypeRef v271 = *(CFTypeRef *)(DerivedStorage + 1112);
                  if (v271) {
                    CFTypeRef v271 = CFRetain(v271);
                  }
                  CFIndex v272 = 0;
                  CFTypeRef v325 = v271;
                  if (*(unsigned char *)(DerivedStorage + 1824)) {
                    CFArrayRef v273 = 0;
                  }
                  else {
                    CFArrayRef v273 = v302;
                  }
                  if (!*(unsigned char *)(DerivedStorage + 1824)) {
                    CFIndex v272 = v314[27];
                  }
                  uint64_t TrackStorage = fp_createFigImageQueueArrayForVideoRenderPipeline((uint64_t)a1, *(unsigned int *)(DerivedStorage + 1000), 0, theArray, v273, v272, (CFArrayRef *)&v326, (CFArrayRef *)&v325, v317, *v128, 1, value);
                  if (!TrackStorage)
                  {
                    uint64_t v274 = value[0];
                    char v275 = v293;
                    if (v293) {
                      char v275 = *((_DWORD *)v126 + 1) == 1986618469;
                    }
                    uint64_t v31 = fp_buildVideoRenderPipelineForTrack((uint64_t)v18, (uint64_t)a1, *(unsigned int *)(DerivedStorage + 1000), v337, 0, *((void *)v126 + 3), (const void *)v314[108], 1, (const __CFArray *)value[0], 0, v275, &v328[1]);
                    if (v274) {
                      CFRelease(v274);
                    }
                    if (v31) {
                      goto LABEL_531;
                    }
                    MEMORY[0x19970E910](*(void *)(DerivedStorage + 1120));
                    uint64_t v276 = *(const void **)(DerivedStorage + 1104);
                    CFTypeRef v277 = v326;
                    *(void *)(DerivedStorage + 1104) = v326;
                    if (v277) {
                      CFRetain(v277);
                    }
                    uint64_t v129 = v314;
                    if (v276) {
                      CFRelease(v276);
                    }
                    uint64_t v278 = *(const void **)(DerivedStorage + 1112);
                    CFTypeRef v279 = v325;
                    *(void *)(DerivedStorage + 1112) = v325;
                    if (v279) {
                      CFRetain(v279);
                    }
                    if (v278) {
                      CFRelease(v278);
                    }
                    MEMORY[0x19970E930](*(void *)(DerivedStorage + 1120));
                    goto LABEL_509;
                  }
                  goto LABEL_542;
                }
LABEL_543:
                uint64_t v31 = v268;
                CFArrayRef v26 = v302;
                goto LABEL_531;
              }
            }
LABEL_509:
            FigStartForwardingMediaServicesProcessDeathNotification();
            CFTypeRef v280 = v328[1];
            if (v328[1])
            {
              CFTypeRef v281 = CFRetain(v328[1]);
              CFTypeRef v280 = v328[1];
              *((void *)v126 + 2) = v281;
              CFArrayRef v26 = v302;
              if (v280) {
                CFTypeRef v280 = CFRetain(v280);
              }
            }
            else
            {
              *((void *)v126 + 2) = 0;
              CFArrayRef v26 = v302;
            }
            v129[71] = v280;
            Float64 v282 = (const void *)*v128;
            if (*v128) {
              Float64 v282 = CFRetain(v282);
            }
            v129[74] = v282;
            CFArrayAppendValue(Mutable, v327);
            itemfig_resetRenderTriple((uint64_t)v327);
            uint64_t v283 = v129[74];
            if (v283)
            {
              cf[0] = 0;
              FigImageQueueTableCopyMappedImageQueueArray(v283, *(void *)(DerivedStorage + 1104), (uint64_t *)cf);
              FigImageQueueArraySetProperty();
              FigImageQueueArraySetProperty();
              itemfig_enableImageQueueTimingAndSetDurationOnFigImageQueueArray((uint64_t)a1);
              if (cf[0]) {
                CFRelease(cf[0]);
              }
            }
            if (v301) {
              FigImageQueueTableSetTimebase(v129[74], *(void **)(DerivedStorage + 328));
            }
            FigRenderPipelineSetProperty_0(v129[71], @"AttachmentCollectorMetadataSourceBuffers", *(void *)(DerivedStorage + 2152));
            uint64_t v284 = *MEMORY[0x1E4F1CFD0];
            uint64_t v285 = *MEMORY[0x1E4F1CFC8];
            if (*((unsigned char *)v129 + 232)) {
              uint64_t v286 = *MEMORY[0x1E4F1CFD0];
            }
            else {
              uint64_t v286 = *MEMORY[0x1E4F1CFC8];
            }
            FigRenderPipelineSetProperty_0(v129[71], @"PreventDisplaySleepDuringVideoPlayback", v286);
            uint64_t v287 = *(void *)(DerivedStorage + 1144);
            if (v287) {
              FigRenderPipelineSetProperty_0(*((void *)v126 + 2), @"VideoEnhancementMode", v287);
            }
            FigRenderPipelineSetProperty_0(*((void *)v126 + 2), @"ObeyEmptyMediaMarkers", v284);
            if (*(unsigned char *)(DerivedStorage + 1137)) {
              uint64_t v288 = v284;
            }
            else {
              uint64_t v288 = v285;
            }
            FigRenderPipelineSetProperty_0(*((void *)v126 + 2), @"PropagatePerFrameHDRDisplayMetadata", v288);
            itemfig_updateRotationOnVideoRenderPipeline((uint64_t)a1, *(_DWORD *)(DerivedStorage + 1000));
            itemfig_applyEnhancementFilterOptions((uint64_t)a1, *(_DWORD *)(DerivedStorage + 1000));
            itemfig_applyDisableColorMatching((uint64_t)a1, *(_DWORD *)(DerivedStorage + 1000));
            itemfig_updatePriorImageQueueGaugeOnRenderPipelines((uint64_t)a1);
            if (v299) {
              itemfig_handleReadyToDisplayVideoLatch((uint64_t)a1, 3, v300);
            }
            uint64_t v31 = 0;
            goto LABEL_531;
          }
        }
      }
LABEL_542:
      uint64_t v31 = TrackStorage;
LABEL_531:
      uint64_t v28 = v305;
      goto LABEL_532;
    }
    goto LABEL_189;
  }
  if (v55 && *(void *)(DerivedStorage + 808))
  {
    uint64_t v106 = CMBaseObjectGetDerivedStorage();
    CMBaseObjectGetDerivedStorage();
    CFArrayRef v107 = *(const __CFArray **)(v106 + 648);
    if (v107)
    {
      CFIndex v108 = CFArrayGetCount(v107);
      *(_OWORD *)CMTime cf = 0u;
      memset(v340, 0, 24);
      if (v108 >= 1)
      {
        CFIndex v109 = v108;
        CFIndex v110 = 0;
        uint64_t v311 = *MEMORY[0x1E4F1CFD0];
        while (1)
        {
          uint64_t v111 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v106 + 648), v110);
          unsigned int v112 = v111;
          int v113 = v111[1];
          if (v113 == 1986618469) {
            goto LABEL_173;
          }
          if (v113 != 1835365473) {
            break;
          }
          int SInt32 = (const void *)FigCFNumberCreateSInt32();
          int v116 = FigCFArrayContainsValue();
          if (SInt32) {
            CFRelease(SInt32);
          }
          uint64_t v114 = v305;
          if (!v116) {
            goto LABEL_186;
          }
LABEL_178:
          int v117 = v112[1];
          LODWORD(cf[0]) = *v112;
          *(_OWORD *)CFDictionaryRef theDict = *(_OWORD *)(v106 + 692);
          *(void *)CFIndex v320 = *(void *)(v106 + 708);
          uint64_t v118 = fp_createCommonRenderPipelineOptionsForTrack(v308, 0, (uint64_t)theDict, LODWORD(cf[0]), v117, 0, (__CFDictionary **)&cf[1]);
          if (v118)
          {
            uint64_t v31 = v118;
            goto LABEL_303;
          }
          itemfig_reuseExistingRenderPipeline(*(void *)(v106 + 392), (uint64_t)cf);
          if (!*(void *)&v340[8])
          {
            uint64_t v31 = 4294950069;
            goto LABEL_303;
          }
          CFTypeRef v119 = CFRetain(*(CFTypeRef *)&v340[8]);
          *((void *)v112 + 2) = v119;
          uint64_t v120 = FigRenderPipelineGetFigBaseObject(v119);
          uint64_t v121 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v121) {
            uint64_t v122 = v121;
          }
          else {
            uint64_t v122 = 0;
          }
          uint64_t v123 = *(void (**)(uint64_t, __CFString *, uint64_t))(v122 + 56);
          if (v123) {
            v123(v120, @"ObeyEmptyMediaMarkers", v311);
          }
          CFArrayAppendValue(v114, cf);
          itemfig_resetRenderTriple((uint64_t)cf);
LABEL_186:
          if (v109 == ++v110) {
            goto LABEL_300;
          }
        }
        if (v113 != 1635088502) {
          goto LABEL_186;
        }
LABEL_173:
        uint64_t v114 = v304;
        if (!*((unsigned char *)v111 + 8)) {
          goto LABEL_186;
        }
        goto LABEL_178;
      }
    }
    else
    {
      *(_OWORD *)CMTime cf = 0u;
      memset(v340, 0, 24);
    }
LABEL_300:
    if (v301) {
      FigImageQueueTableSetTimebase(*(void *)(v106 + 824), *(void **)(v106 + 328));
    }
    uint64_t v31 = 0;
LABEL_303:
    CFMutableArrayRef Mutable = v304;
    uint64_t v28 = v305;
    CFArrayRef v26 = v302;
    itemfig_resetRenderTriple((uint64_t)cf);
LABEL_532:
    CFArrayRef v22 = 0;
    uint64_t v23 = 0;
    uint64_t v25 = 0;
    goto LABEL_319;
  }
  playeritemfig_releaseVideoCompositionObjects((uint64_t)a1);
  if (v26 && CFArrayGetCount(v26) > 0 || (uint64_t)v314[27] >= 1)
  {
    CFTypeRef v138 = *(CFTypeRef *)(DerivedStorage + 1104);
    if (v138) {
      CFTypeRef v138 = CFRetain(v138);
    }
    CFTypeRef v326 = v138;
    CFTypeRef v139 = *(CFTypeRef *)(DerivedStorage + 1112);
    if (v139) {
      CFTypeRef v139 = CFRetain(v139);
    }
    double v140 = *(float *)(DerivedStorage + 736);
    int v141 = (*(double *)(DerivedStorage + 720) * v140);
    CFTypeRef v325 = v139;
    uint64_t v142 = fp_buildImageQueueArray(v141, (*(double *)(DerivedStorage + 728) * v140), v26, v314[27], (CFArrayRef *)&v326, (CFArrayRef *)&v325);
    if (v142)
    {
LABEL_314:
      uint64_t v31 = v142;
      goto LABEL_315;
    }
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 1120));
    uint64_t v143 = *(const void **)(DerivedStorage + 1104);
    CFTypeRef v144 = v326;
    *(void *)(DerivedStorage + 1104) = v326;
    if (v144) {
      CFRetain(v144);
    }
    if (v143) {
      CFRelease(v143);
    }
    unsigned int v145 = *(const void **)(DerivedStorage + 1112);
    CFTypeRef v146 = v325;
    *(void *)(DerivedStorage + 1112) = v325;
    if (v146) {
      CFRetain(v146);
    }
    if (v145) {
      CFRelease(v145);
    }
    MEMORY[0x19970E930](*(void *)(DerivedStorage + 1120));
  }
  fp_visualContextArrayIfVideoOutputAllowed(theArray, *(void *)(DerivedStorage + 1160));
  ConcatenationOfTwoArrays = (const void *)FigCFArrayCreateConcatenationOfTwoArrays();
  CFArrayRef v22 = (const __CFArray *)FigCFArrayCreateConcatenationOfTwoArrays();
  if (ConcatenationOfTwoArrays) {
    CFRelease(ConcatenationOfTwoArrays);
  }
  uint64_t v148 = (uint64_t *)(DerivedStorage + 824);
  uint64_t v149 = *(void *)(DerivedStorage + 824);
  if (!v149)
  {
    uint64_t matched = FigImageQueueTableCreate(v49, v148);
    if (matched)
    {
LABEL_537:
      uint64_t v31 = matched;
      goto LABEL_316;
    }
    uint64_t v149 = *(void *)(DerivedStorage + 824);
    uint64_t v148 = (uint64_t *)(DerivedStorage + 824);
  }
  CFTypeRef v296 = v148;
  uint64_t matched = FigImageQueueTableUpdateToMatchOutputsArray(v149, v22, *(void **)(DerivedStorage + 328), (void (*)(void *, uint64_t))fp_imageQueueTableCreatedImageQueueCallback, (void (*)(const void *, uint64_t))fp_imageQueueTableWillReleaseImageQueueCallback, (uint64_t)a1);
  if (matched) {
    goto LABEL_537;
  }
  BOOL v294 = v54;
  uint64_t v298 = (uint64_t)v18;
  if (v22) {
    CFRelease(v22);
  }
  unsigned int v151 = (CFTypeRef *)(DerivedStorage + 816);
  CFArrayRef v152 = *(const __CFArray **)(DerivedStorage + 1104);
  if (v152)
  {
    CFIndex v153 = CFArrayGetCount(v152);
    if (v153 >= 1)
    {
      CFIndex v154 = v153;
      CFIndex v155 = 0;
      uint64_t v156 = *MEMORY[0x1E4F1CFD0];
      uint64_t v157 = *MEMORY[0x1E4F1CFC8];
      do
      {
        uint64_t v158 = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 1104), v155);
        uint64_t v159 = FigImageQueueTableCopyFigImageQueueForVisualContext(*(void *)(DerivedStorage + 824), v158);
        CAImageQueueSetFlags();
        CAImageQueueSetFlags();
        uint64_t v160 = FigImageQueueGetFigBaseObject(v159);
        uint64_t v161 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v161) {
          uint64_t v162 = v161;
        }
        else {
          uint64_t v162 = 0;
        }
        uint64_t v163 = *(void (**)(uint64_t, __CFString *, uint64_t))(v162 + 56);
        if (v163) {
          v163(v160, @"FigImageQueueProperty_EnqueueResetsSystemSleepTimer", v156);
        }
        if (*((unsigned char *)v314 + 232)) {
          uint64_t v164 = v156;
        }
        else {
          uint64_t v164 = v157;
        }
        uint64_t v165 = FigImageQueueGetFigBaseObject(v159);
        uint64_t v166 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v166) {
          uint64_t v167 = v166;
        }
        else {
          uint64_t v167 = 0;
        }
        uint64_t v168 = *(void (**)(uint64_t, __CFString *, uint64_t))(v167 + 56);
        if (v168) {
          v168(v165, @"PreventDisplaySleepDuringVideoPlayback", v164);
        }
        uint64_t v169 = *(void *)(DerivedStorage + 1144);
        if (v169)
        {
          uint64_t v170 = FigImageQueueGetFigBaseObject(v159);
          uint64_t v171 = *(void *)(CMBaseObjectGetVTable() + 8);
          uint64_t v172 = v171 ? v171 : 0;
          CFTypeID v173 = *(void (**)(uint64_t, __CFString *, uint64_t))(v172 + 56);
          if (v173) {
            v173(v170, @"VideoEnhancementMode", v169);
          }
        }
        uint64_t v174 = FigImageQueueGetFigBaseObject(v159);
        uint64_t v175 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v175) {
          uint64_t v176 = v175;
        }
        else {
          uint64_t v176 = 0;
        }
        __n128 v177 = v309;
        char v178 = *(void (**)(uint64_t, __CFString *, uint64_t, __n128))(v176 + 56);
        if (v178)
        {
          v178(v174, @"EnableImageQueueTiming", v156, v309);
          __n128 v177 = v309;
        }
        *(__n128 *)CMTime cf = v177;
        *(void *)uint64_t v340 = v306;
        if (!itemfig_getDurationIfReady((uint64_t)a1, (uint64_t)cf) && (BYTE4(cf[1]) & 1) != 0)
        {
          *(_OWORD *)CFDictionaryRef theDict = *(_OWORD *)cf;
          *(void *)CFIndex v320 = *(void *)v340;
          CFDictionaryRef v179 = CMTimeCopyAsDictionary((CMTime *)theDict, allocator);
          uint64_t v180 = FigImageQueueGetFigBaseObject(v159);
          uint64_t v181 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v181) {
            uint64_t v182 = v181;
          }
          else {
            uint64_t v182 = 0;
          }
          BOOL v183 = *(void (**)(uint64_t, __CFString *, CFDictionaryRef))(v182 + 56);
          if (v183) {
            v183(v180, @"Duration", v179);
          }
          if (v179) {
            CFRelease(v179);
          }
        }
        if (v159) {
          CFRelease(v159);
        }
        ++v155;
      }
      while (v154 != v155);
    }
  }
  if (*v151) {
    CFRelease(*v151);
  }
  FigImageQueueTableCopyFigImageQueueArray(*v296, (uint64_t *)(DerivedStorage + 816));
  CFMutableArrayRef Mutable = v304;
  if (*v151)
  {
    CFIndex v184 = CFArrayGetCount((CFArrayRef)*v151);
    if (v184 >= 1)
    {
      CFIndex v185 = v184;
      for (CFIndex j = 0; j != v185; ++j)
      {
        int v187 = CFArrayGetValueAtIndex((CFArrayRef)*v151, j);
        BOOL v188 = *((float *)v314 + 12) != 0.0;
        uint64_t v189 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v189) {
          uint64_t v190 = v189;
        }
        else {
          uint64_t v190 = 0;
        }
        uint64_t v191 = *(void (**)(const void *, BOOL))(v190 + 40);
        if (v191) {
          v191(v187, v188);
        }
        uint64_t v192 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v192) {
          uint64_t v193 = v192;
        }
        else {
          uint64_t v193 = 0;
        }
        uint64_t v194 = *(void (**)(const void *, float))(v193 + 48);
        if (v194) {
          v194(v187, 1.0);
        }
      }
    }
  }
  CFAllocatorRef v195 = allocator;
  uint64_t CommonRenderPipelineOptionsForTrack = FigActivitySchedulerCreateForNewThread((uint64_t)allocator, 23, @"com.apple.coremedia.videoprocessor", &v336);
  if (CommonRenderPipelineOptionsForTrack)
  {
LABEL_541:
    uint64_t v31 = CommonRenderPipelineOptionsForTrack;
    goto LABEL_297;
  }
  CFDictionaryRef DictionaryRepresentation = CGSizeCreateDictionaryRepresentation(*(CGSize *)(DerivedStorage + 720));
  uint64_t v197 = FigVideoCompositorGetFigBaseObject(*(void *)(DerivedStorage + 656));
  uint64_t v198 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v198) {
    uint64_t v199 = v198;
  }
  else {
    uint64_t v199 = 0;
  }
  CFArrayRef v26 = v302;
  CFTypeRef v200 = *(uint64_t (**)(uint64_t, __CFString *, CFDictionaryRef))(v199 + 56);
  if (v200) {
    uint64_t v31 = v200(v197, @"RenderDimensions", DictionaryRepresentation);
  }
  else {
    uint64_t v31 = 4294954514;
  }
  if (DictionaryRepresentation) {
    CFRelease(DictionaryRepresentation);
  }
  if (v31) {
    goto LABEL_315;
  }
  uint64_t v201 = (uint64_t *)(DerivedStorage + 808);
  uint64_t v202 = CMBaseObjectGetDerivedStorage();
  *(_OWORD *)CMTime cf = xmmword_194993238;
  *(void *)uint64_t v340 = 0;
  *(_OWORD *)CFDictionaryRef theDict = xmmword_194993250;
  *(void *)CFIndex v320 = 0;
  if (*(unsigned char *)(v202 + 688))
  {
    *(void *)uint64_t v340 = 0;
    *(_OWORD *)CMTime cf = kFigPlayerFileLowWaterLevelDuration_Minimum;
    *(void *)CFIndex v320 = 0;
    *(_OWORD *)CFDictionaryRef theDict = kFigPlayerFileLowWaterLevelDuration_Minimum;
  }
  *(_OWORD *)CMTimeValue value = *(_OWORD *)cf;
  *(void *)&long long v344 = *(void *)v340;
  *(_OWORD *)&v324.CMTimeValue value = *(_OWORD *)theDict;
  v324.CMTimeEpoch epoch = *(void *)v320;
  unsigned int v203 = *(const void **)(DerivedStorage + 656);
  int v204 = *(_DWORD *)(DerivedStorage + 716);
  CFArrayRef v205 = *(const __CFArray **)(DerivedStorage + 816);
  *(_OWORD *)CMTime cf = *(_OWORD *)(DerivedStorage + 692);
  *(void *)uint64_t v340 = *(void *)(DerivedStorage + 708);
  *(_OWORD *)CFDictionaryRef theDict = *(_OWORD *)value;
  *(void *)CFIndex v320 = v344;
  CMTime type = v324;
  uint64_t v142 = FigVideoCompositionProcessorCreateWithImageQueueArray(allocator, 0, v203, (CMTime *)cf, v204, v205, (CMTime *)theDict, &type, v336, (uint64_t *)(DerivedStorage + 808));
  if (v142) {
    goto LABEL_314;
  }
  uint64_t v142 = FigVideoCompositionProcessorSetCompositionInstructionCallback(*v201, (uint64_t)itemfig_copyCompositionInstructionAtTime, (uint64_t)a1);
  if (v142) {
    goto LABEL_314;
  }
  CFNumberRef v207 = CFNumberCreate(allocator, kCFNumberFloatType, (const void *)(DerivedStorage + 736));
  uint64_t v31 = FigVideoCompositionProcessorSetProperty(*(void *)(DerivedStorage + 808), @"VideoCompositionProcessor_RenderScale", v207);
  if (v207) {
    CFRelease(v207);
  }
  if (v31) {
    goto LABEL_315;
  }
  int v208 = (const void *)v314[108];
  uint64_t v312 = (uint64_t *)(DerivedStorage + 808);
  if (v208)
  {
    uint64_t v23 = (void *)CFRetain(v208);
  }
  else
  {
    cf[0] = (CFTypeRef)(*v201 | 0x8000000000000000);
    uint64_t v23 = CFNumberCreate(allocator, kCFNumberSInt64Type, cf);
    if (!v23)
    {
      uint64_t v209 = FigSignalErrorAt();
      goto LABEL_545;
    }
  }
  uint64_t v209 = FigVideoCompositionProcessorSetProperty(*v312, @"VideoCompositionProcessor_PixelBufferPoolSharingID", v23);
  if (v209) {
    goto LABEL_545;
  }
  if (*((_DWORD *)v314 + 118))
  {
    CFNumberRef v210 = CFNumberCreate(allocator, kCFNumberSInt32Type, v314 + 59);
    if (v210)
    {
      CFNumberRef v211 = v210;
      uint64_t v31 = FigVideoCompositionProcessorSetProperty(*v312, @"VideoCompositionProcessor_ClientPID", v210);
      CFRelease(v211);
      if (v31) {
        goto LABEL_362;
      }
    }
  }
  uint64_t v209 = FigVideoCompositionProcessorSetProperty(*v312, @"VideoCompositionProcessor_DestinationPixelBufferDesiredAttributes", (void *)v337);
  if (v209) {
    goto LABEL_545;
  }
  uint64_t v212 = *(void **)(DerivedStorage + 744);
  if (v212)
  {
    uint64_t v209 = FigVideoCompositionProcessorSetProperty(*v312, @"VideoCompositionProcessor_CompositionColorPrimaries", v212);
    if (v209) {
      goto LABEL_545;
    }
  }
  if ((uint64_t v213 = *(void **)(DerivedStorage + 752)) != 0
    && (uint64_t v209 = FigVideoCompositionProcessorSetProperty(*v312, @"VideoCompositionProcessor_CompositionYCbCrMatrix", v213), v209)|| (v214 = *(void **)(DerivedStorage + 760)) != 0&& (uint64_t v209 = FigVideoCompositionProcessorSetProperty(*v312, @"VideoCompositionProcessor_CompositionTransferFunction", v214), v209)|| (v215 = *(void **)(DerivedStorage + 768)) != 0&& (uint64_t v209 = FigVideoCompositionProcessorSetProperty(*v312, @"VideoCompositionProcessor_HDRDisplayMetadataPolicy", v215), v209)|| (uint64_t v209 = FigVideoCompositionProcessorCopyProperty(*v312, @"VideoCompositionProcessor_SourcePixelBufferAttributes",
                 (uint64_t)allocator,
                 &v335),
        v209))
  {
LABEL_545:
    uint64_t v31 = v209;
LABEL_362:
    CFArrayRef v22 = 0;
    goto LABEL_317;
  }
  CMNotificationCenterGetDefaultLocalCenter();
  uint64_t v31 = FigNotificationCenterAddWeakListener();
  CFIndex v315 = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 648));
  if (v315 < 1)
  {
    uint64_t v25 = 0;
LABEL_449:
    uint64_t v253 = *v296;
    CFMutableArrayRef Mutable = v304;
    if (*v296)
    {
      cf[0] = 0;
      FigImageQueueTableCopyMappedImageQueueArray(v253, *(void *)(DerivedStorage + 1104), (uint64_t *)cf);
      FigImageQueueArraySetProperty();
      FigImageQueueArraySetProperty();
      if (cf[0]) {
        CFRelease(cf[0]);
      }
    }
    if (v301) {
      FigImageQueueTableSetTimebase(*(void *)(DerivedStorage + 824), *(void **)(DerivedStorage + 328));
    }
    CFArrayRef v22 = 0;
    goto LABEL_318;
  }
  CFIndex v216 = 0;
  uint64_t v25 = 0;
  uint64_t v290 = (_OWORD *)(DerivedStorage + 692);
  uint64_t v289 = *MEMORY[0x1E4F1CFD0];
  while (1)
  {
    uint64_t v217 = (unsigned int *)CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 648), v216);
    unsigned int v218 = v217;
    unsigned int v219 = v217[1];
    if (v219 != 1986618469)
    {
      if (v219 == 1835365473)
      {
        uint64_t v25 = (const void *)FigCFNumberCreateSInt32();
        *(_OWORD *)CFDictionaryRef theDict = *MEMORY[0x1E4F1FA48];
        *(void *)CFIndex v320 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
        uint64_t v228 = *(void *)v320;
        *(_OWORD *)&v320[8] = *(_OWORD *)theDict;
        *(void *)&v320[24] = *(void *)v320;
        long long v321 = *(_OWORD *)theDict;
        *(void *)uint64_t v322 = *(void *)v320;
        long long v292 = *(_OWORD *)theDict;
        *(_OWORD *)&v322[8] = *(_OWORD *)theDict;
        *(void *)&v322[24] = *(void *)v320;
        CMTime v229 = *(const void **)(DerivedStorage + 800);
        if (v229
          && (uint64_t v31 = FigVideoCompositionWindowGetFromSerializedConfigurationForTrack(v229, *v218, theDict), v31))
        {
          int v234 = 2;
        }
        else
        {
          int v230 = FigCFArrayContainsValue();
          *(_OWORD *)&v340[16] = *(_OWORD *)&v320[16];
          long long v341 = v321;
          *(_OWORD *)uint64_t v342 = *(_OWORD *)v322;
          *(_OWORD *)&v342[16] = *(_OWORD *)&v322[16];
          *(_OWORD *)CMTime cf = *(_OWORD *)theDict;
          *(_OWORD *)uint64_t v340 = *(_OWORD *)v320;
          BOOL IsZero = FigVideoCompositionTimeWindowDurationIsZero((uint64_t)cf);
          if (v25) {
            CFRelease(v25);
          }
          if (IsZero && !v230) {
            goto LABEL_394;
          }
          unsigned int v232 = (const void *)*((void *)v218 + 2);
          if (v232)
          {
            CFRelease(v232);
            *((void *)v218 + 2) = 0;
          }
          CMTime v233 = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
          CFAllocatorRef v195 = allocator;
          if (CMBufferQueueCreate(allocator, 0, v233, (CMBufferQueueRef *)&v333)
            || FigRenderPipelineCreateForBufferQueue((uint64_t)allocator, v333, 0, (CFTypeRef *)v218 + 2))
          {
            uint64_t v25 = 0;
            uint64_t v31 = 0;
            int v234 = 110;
          }
          else
          {
            MEMORY[0x19970E910](*(void *)(DerivedStorage + 672));
            CFArrayRef v242 = *(const __CFArray **)(DerivedStorage + 680);
            CMTime v243 = v308;
            if (v242)
            {
              CFIndex v244 = CFArrayGetCount(v242);
              if (v244 >= 1)
              {
                CFDictionaryRef v245 = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 680), v244 - 1);
                if (v245)
                {
                  CFDictionaryRef v246 = (const __CFDictionary *)CFDictionaryGetValue(v245, @"EndTime");
                  if (v246) {
                    CMTimeMakeFromDictionary(&v332, v246);
                  }
                }
              }
            }
            *(_OWORD *)CMTime cf = *(_OWORD *)&v332.value;
            *(void *)uint64_t v340 = v332.epoch;
            *(__n128 *)CMTimeValue value = v309;
            *(void *)&long long v344 = v306;
            if (!CMTimeCompare((CMTime *)cf, (CMTime *)value))
            {
              LODWORD(v324.value) = 0;
              LOBYTE(type.value) = 0;
              os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              unsigned int v248 = v324.value;
              if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type.value)) {
                unsigned int v249 = v248;
              }
              else {
                unsigned int v249 = v248 & 0xFFFFFFFE;
              }
              if (v249)
              {
                LODWORD(value[0]) = 136315138;
                *(void **)((char *)value + 4) = "itemfig_createRenderTriplesForVideo";
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              CMTime v243 = v308;
            }
            MEMORY[0x19970E930](*(void *)(DerivedStorage + 672));
            *(_OWORD *)CMTime cf = v292;
            *(void *)uint64_t v340 = v228;
            *(_OWORD *)&v340[8] = v292;
            *(void *)&v340[24] = v228;
            long long v341 = v292;
            *(void *)uint64_t v342 = v228;
            *(_OWORD *)&v342[8] = v292;
            *(void *)&v342[24] = v228;
            uint64_t v250 = FigVideoCompositionWindowGetFromSerializedConfigurationForTrack(*(CFTypeRef *)(DerivedStorage + 800), *v218, cf);
            if (v250)
            {
              uint64_t v31 = v250;
            }
            else
            {
              uint64_t v251 = *v312;
              int v252 = *v218;
              long long v345 = *(_OWORD *)&v340[16];
              long long v346 = v341;
              long long v347 = *(_OWORD *)v342;
              long long v348 = *(_OWORD *)&v342[16];
              *(_OWORD *)CMTimeValue value = *(_OWORD *)cf;
              long long v344 = *(_OWORD *)v340;
              CMTime v324 = v332;
              uint64_t v31 = FigVideoCompositionProcessorSetSourceBufferQueue(v251, v252, value, (opaqueCMBufferQueue *)v333, (uint64_t)&v324);
              if (v333)
              {
                CFRelease(v333);
                CFTypeRef v333 = 0;
              }
              if (!v31)
              {
                LODWORD(v327[0]) = *v218;
                *(_OWORD *)CMTimeValue value = *v290;
                *(void *)&long long v344 = *(void *)(DerivedStorage + 708);
                uint64_t v31 = fp_createCommonRenderPipelineOptionsForTrack(v243, 0, (uint64_t)value, LODWORD(v327[0]), 1835365473, 0, (__CFDictionary **)v329);
                v328[1] = CFRetain(*((CFTypeRef *)v218 + 2));
                v327[1] = CFRetain(v329[0]);
                CFArrayAppendValue(v305, v327);
                itemfig_resetRenderTriple((uint64_t)v327);
LABEL_394:
                uint64_t v25 = 0;
LABEL_419:
                CFAllocatorRef v195 = allocator;
                goto LABEL_424;
              }
            }
            uint64_t v25 = 0;
            int v234 = 2;
            CFAllocatorRef v195 = allocator;
          }
        }
        goto LABEL_423;
      }
      if (v219 != 1635088502) {
        goto LABEL_424;
      }
    }
    if (!*((unsigned char *)v217 + 8)) {
      goto LABEL_424;
    }
    v324.CMTimeValue value = 0;
    *(_OWORD *)CMTime cf = *MEMORY[0x1E4F1FA48];
    *(void *)uint64_t v340 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
    uint64_t v220 = *(void *)v340;
    *(_OWORD *)&v340[8] = *(_OWORD *)cf;
    *(void *)&v340[24] = *(void *)v340;
    long long v341 = *(_OWORD *)cf;
    *(void *)uint64_t v342 = *(void *)v340;
    *(void *)&v342[24] = *(void *)v340;
    long long v291 = *(_OWORD *)cf;
    *(_OWORD *)&v342[8] = *(_OWORD *)cf;
    unsigned int v221 = *(const void **)(DerivedStorage + 792);
    if (!v221
      || (uint64_t v222 = FigVideoCompositionWindowGetFromSerializedConfigurationForTrack(v221, *v218, cf), !v222))
    {
      uint64_t v222 = FigVisualContextCreateBasic((uint64_t)v195, 0, &v334);
      if (!v222) {
        break;
      }
    }
    uint64_t v31 = v222;
    int v234 = 2;
LABEL_422:
    CFArrayRef v26 = v302;
LABEL_423:
    if (v234 != 110)
    {
      CFArrayRef v22 = 0;
      CFMutableArrayRef Mutable = v304;
      goto LABEL_318;
    }
LABEL_424:
    if (v315 == ++v216) {
      goto LABEL_449;
    }
  }
  uint64_t v223 = (CFTypeRef *)(v218 + 4);
  if (*((void *)v218 + 2))
  {
    FigStopForwardingMediaServicesProcessDeathNotification();
    if (*v223)
    {
      CFRelease(*v223);
      *uint64_t v223 = 0;
    }
  }
  CFArrayRef v224 = CFArrayCreate(v195, &v334, 1, MEMORY[0x1E4F1D510]);
  CFAllocatorRef v225 = v195;
  CFArrayRef v226 = v224;
  if (*((void *)v218 + 6))
  {
    uint64_t v227 = (uint64_t)v308;
    itemfig_clearTrackImageQueueTable((uint64_t)v308, (uint64_t)v218);
  }
  else
  {
    FigImageQueueTableCreate(v225, (void *)v218 + 6);
    uint64_t v227 = (uint64_t)v308;
  }
  int v235 = fp_createFigImageQueueArrayForVideoRenderPipeline(v227, *v218, 0, v226, 0, 0, 0, 0, 0, *((void *)v218 + 6), 0, &v324);
  if (!v235)
  {
    char v236 = v294;
    if (v294) {
      char v236 = v218[1] == 1986618469;
    }
    int v235 = fp_buildVideoRenderPipelineForTrack(v298, (uint64_t)v308, *v218, v335, 0, *((void *)v218 + 3), v23, 0, (const __CFArray *)v324.value, 0, v236, (void *)v218 + 2);
  }
  if (v226) {
    CFRelease(v226);
  }
  if (v324.value) {
    CFRelease((CFTypeRef)v324.value);
  }
  CFAllocatorRef v195 = allocator;
  if (v235)
  {
    if (v334)
    {
      CFRelease(v334);
      uint64_t v31 = 0;
      CFTypeRef v334 = 0;
    }
    else
    {
      uint64_t v31 = 0;
    }
    int v234 = 110;
    goto LABEL_422;
  }
  FigStartForwardingMediaServicesProcessDeathNotification();
  FigRenderPipelineSetProperty_0(*((void *)v218 + 2), @"ObeyEmptyMediaMarkers", v289);
  FigRenderPipelineSetProperty_0(*((void *)v218 + 2), @"AttachmentCollectorMetadataSourceBuffers", *(void *)(DerivedStorage + 2152));
  *(_OWORD *)CFDictionaryRef theDict = v291;
  *(void *)CFIndex v320 = v220;
  *(_OWORD *)&v320[8] = v291;
  *(void *)&v320[24] = v220;
  long long v321 = v291;
  *(void *)uint64_t v322 = v220;
  *(_OWORD *)&v322[8] = v291;
  *(void *)&v322[24] = v220;
  uint64_t v237 = FigVideoCompositionWindowGetFromSerializedConfigurationForTrack(*(CFTypeRef *)(DerivedStorage + 792), *v218, theDict);
  if (!v237)
  {
    uint64_t v238 = *v312;
    int v239 = *v218;
    int v240 = v218[1];
    long long v345 = *(_OWORD *)&v320[16];
    long long v346 = v321;
    long long v347 = *(_OWORD *)v322;
    long long v348 = *(_OWORD *)&v322[16];
    *(_OWORD *)CMTimeValue value = *(_OWORD *)theDict;
    long long v344 = *(_OWORD *)v320;
    uint64_t v237 = FigVideoCompositionProcessorSetSourceVisualContext(v238, v239, v240, (long long *)value, v334);
    if (!v237)
    {
      CFArrayRef v26 = v302;
      if (v334)
      {
        CFRelease(v334);
        CFTypeRef v334 = 0;
      }
      LODWORD(v327[0]) = *v218;
      *(_OWORD *)CMTimeValue value = *v290;
      *(void *)&long long v344 = *(void *)(DerivedStorage + 708);
      uint64_t v237 = fp_createCommonRenderPipelineOptionsForTrack(v308, 0, (uint64_t)value, LODWORD(v327[0]), 1986618469, 0, (__CFDictionary **)&v327[1]);
      if (!v237)
      {
        uint64_t v241 = *v218;
        *(_OWORD *)CMTimeValue value = *v290;
        *(void *)&long long v344 = *(void *)(DerivedStorage + 708);
        uint64_t v31 = fp_createCommonRenderPipelineOptionsForTrack(v308, 0, (uint64_t)value, v241, 1986618469, 1, (__CFDictionary **)v329);
        if (v31) {
          goto LABEL_539;
        }
        v328[1] = CFRetain(*v223);
        CFArrayAppendValue(v304, v327);
        itemfig_resetRenderTriple((uint64_t)v327);
        goto LABEL_419;
      }
    }
  }
  uint64_t v31 = v237;
LABEL_539:
  CFArrayRef v22 = 0;
  CFMutableArrayRef Mutable = v304;
LABEL_298:
  CFArrayRef v26 = v302;
LABEL_318:
  uint64_t v28 = v305;
LABEL_319:
  uint64_t v24 = v307;
LABEL_320:
  itemfig_resetRenderTriple((uint64_t)v327);
  *a8 = Mutable;
  *a9 = v28;
  *a10 = v24;
  if (v331) {
    CFRelease(v331);
  }
  if (v330) {
    CFRelease(v330);
  }
  if (v25) {
    CFRelease(v25);
  }
  if (v326) {
    CFRelease(v326);
  }
  if (v325) {
    CFRelease(v325);
  }
  if (theArray) {
    CFRelease(theArray);
  }
  if (v337) {
    CFRelease(v337);
  }
  if (v22) {
    CFRelease(v22);
  }
  if (v336) {
    CFRelease(v336);
  }
  if (v335) {
    CFRelease(v335);
  }
  if (v334) {
    CFRelease(v334);
  }
  if (v333) {
    CFRelease(v333);
  }
  if (v23) {
    CFRelease(v23);
  }
  if (v26) {
    dispatch_async_f(MEMORY[0x1E4F14428], v26, (dispatch_function_t)itemfig_releaseVideoLayerArray);
  }
  if (v317) {
    CFRelease(v317);
  }
  return v31;
}

void itemfig_updateAccessLogEntry(float a1)
{
  CMBaseObjectGetDerivedStorage();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = *(void *)(DerivedStorage + 352);
  if (v3)
  {
    if (a1 != 0.0 && *(unsigned char *)(DerivedStorage + 1689) == 0)
    {
      memset(&v7, 0, sizeof(v7));
      FigPlaybackBossGetTime(v3, &v7);
      double Seconds = 0.0;
      if (v7.flags)
      {
        CMTime v6 = v7;
        double Seconds = CMTimeGetSeconds(&v6);
      }
      *(double *)(DerivedStorage + 1528) = Seconds;
      *(unsigned char *)(DerivedStorage + 1689) = 1;
    }
    if (a1 == 0.0)
    {
      if (!*(unsigned char *)(DerivedStorage + 1688)) {
        return;
      }
    }
    else
    {
      *(unsigned char *)(DerivedStorage + 1688) = 1;
    }
    if (*(double *)(DerivedStorage + 1544) != 0.0)
    {
      *(double *)(DerivedStorage + 1536) = *(double *)(DerivedStorage + 1536)
                                         + (CFAbsoluteTimeGetCurrent() - *(double *)(DerivedStorage + 1544))
                                         * fabsf(*(float *)(DerivedStorage + 1600));
      *(void *)(DerivedStorage + 1544) = 0;
    }
    if (a1 != 0.0) {
      *(CFAbsoluteTime *)(DerivedStorage + 1544) = CFAbsoluteTimeGetCurrent();
    }
    *(float *)(DerivedStorage + 1600) = a1;
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
  }
}

CMTime *itemfig_reportingAgentReportPlayStartMovieTime()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  memset(&v9, 0, sizeof(v9));
  uint64_t result = CMTimebaseGetTime(&v9, *(CMTimebaseRef *)(DerivedStorage + 328));
  if (v9.flags)
  {
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 1896));
    uint64_t v2 = *(void *)(DerivedStorage + 1904);
    CMTime v8 = v9;
    v3.n128_f64[0] = CMTimeGetSeconds(&v8);
    if (v2)
    {
      double v4 = v3.n128_f64[0];
      uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v5) {
        uint64_t v6 = v5;
      }
      else {
        uint64_t v6 = 0;
      }
      CMTime v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v6 + 56);
      if (v7) {
        v7(v2, 0x1EE582B78, 0x1EE583D58, (uint64_t)(v4 * 1000.0), 0);
      }
    }
    return (CMTime *)MEMORY[0x19970E930](*(void *)(DerivedStorage + 1896), v3);
  }
  return result;
}

uint64_t itemfig_setEndTimeOnBoss()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  long long v4 = *(_OWORD *)(DerivedStorage + 140);
  uint64_t v5 = *(void *)(DerivedStorage + 156);
  uint64_t result = *(void *)(DerivedStorage + 352);
  if (result)
  {
    if (*(void *)(DerivedStorage + 2072))
    {
      CFDataGetLength(*(CFDataRef *)(DerivedStorage + 2072));
      CFDataGetBytePtr(*(CFDataRef *)(DerivedStorage + 2072));
      long long v2 = v4;
      uint64_t v3 = v5;
      CMSpeedRampMapTimeFromTargetToSource();
      uint64_t result = *(void *)(DerivedStorage + 352);
    }
    long long v2 = v4;
    uint64_t v3 = v5;
    return FigPlaybackBossSetEndTime(result, &v2);
  }
  return result;
}

void itemfig_unregisterAndDestroyPlayabilityMonitorNotification()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  itemfig_unregisterPlayabilityMonitorNotification();
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 616));
  uint64_t v1 = *(void *)(DerivedStorage + 600);
  if (v1)
  {
    FigPlayabilityMonitorDestroy(v1);
    *(void *)(DerivedStorage + 600) = 0;
  }

  JUMPOUT(0x19970E2B0);
}

void itemfig_registerPlayabilityMonitorNotification(const void *a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 616));
  if (!*(void *)(DerivedStorage + 600) || *(unsigned char *)(DerivedStorage + 608))
  {
    JUMPOUT(0x19970E2B0);
  }
  uint64_t DefaultLocalCenter = CMNotificationCenterGetDefaultLocalCenter();
  int v14 = 0;
  BOOL v13 = 0;
  FigNotificationCenterAddWeakListener();
  FigNotificationCenterAddWeakListener();
  FigNotificationCenterAddWeakListener();
  FigNotificationCenterAddWeakListener();
  FigNotificationCenterAddWeakListener();
  *(unsigned char *)(DerivedStorage + 608) = 1;
  int PlaythroughInfo = FigPlayabilityMonitorGetPlaythroughInfo(*(void *)(DerivedStorage + 600), &v14, &v13, 0);
  MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 616));
  if (!PlaythroughInfo)
  {
    switch(v14)
    {
      case 0:
        break;
      case 1:
        double PlayableDurationAtCurrentTime = itemfig_getPlayableDurationAtCurrentTime((uint64_t)a1);
        CFDictionaryRef DurationDictionary = fpm_createDurationDictionary(PlayableDurationAtCurrentTime);
        if (dword_1E9350BF0)
        {
          os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        itemfig_LikelyToKeepUp(DefaultLocalCenter, a1);
        if (DurationDictionary) {
          CFRelease(DurationDictionary);
        }
        break;
      case 2:
        if (dword_1E9350BF0)
        {
          CMTime v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        itemfig_UnlikelyToKeepUp(DefaultLocalCenter, a1);
        break;
      case 3:
        if (dword_1E9350BF0)
        {
          CMTime v9 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        itemfig_StallWarning(DefaultLocalCenter, a1);
        break;
      default:
        CFDictionaryRef v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        break;
    }
    if (v13)
    {
      CFDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      FigCFDictionarySetValue();
      itemfig_PlayableRangeChanged(DefaultLocalCenter, a1, 0x1EE5405B8, 0, Mutable);
      if (Mutable) {
        CFRelease(Mutable);
      }
    }
    else
    {
      if (dword_1E9350BF0)
      {
        CFArrayRef v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      itemfig_BufferFull(DefaultLocalCenter, a1);
    }
  }
}

uint64_t itemfig_handleOutOfBandTrackPlaybackFailed()
{
  os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  return fig_log_call_emit_and_clean_up_after_send_and_compose();
}

void itemfig_handleOutOfBandTrackSubtitleChanged(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  Boolean v12 = 0;
  if (a5)
  {
    if (!*DerivedStorage)
    {
      CMTime v7 = (unsigned char *)CMBaseObjectGetDerivedStorage();
      if (!*v7)
      {
        CMTime v8 = v7;
        FigSubtitleSampleCreateFromPropertyList(a5, (const __CFDictionary **)&cf, &v12, 0, 0);
        CFTypeRef v9 = cf;
        if (v8[688]) {
          BOOL v10 = 0;
        }
        else {
          BOOL v10 = v12 == 0;
        }
        BOOL v11 = !v10 || cf == 0;
        if (!v11
          || (CMNotificationCenterGetDefaultLocalCenter(), CMNotificationCenterPostNotification(), (CFTypeRef v9 = cf) != 0))
        {
          CFRelease(v9);
        }
      }
    }
  }
}

uint64_t itemfig_synchronizeOOBSController(uint64_t a1, uint64_t a2)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)result)
  {
    if (a2)
    {
      uint64_t result = *(void *)(result + 1856);
      if (result)
      {
        if ((*(unsigned char *)(a2 + 4) & 3) != 0)
        {
          float v4 = *(double *)(a2 + 8);
          long long v7 = *(_OWORD *)(a2 + 16);
          uint64_t v8 = *(void *)(a2 + 32);
          long long v5 = *(_OWORD *)(a2 + 40);
          uint64_t v6 = *(void *)(a2 + 56);
          return FigOutOfBandTrackControllerSetRateAndAnchorTime(result, &v7, &v5, v4);
        }
      }
    }
  }
  return result;
}

uint64_t itemfig_setMuted(uint64_t a1, int a2)
{
  uint64_t result = *(void *)(CMBaseObjectGetDerivedStorage() + 352);
  if (result)
  {
    return FigPlaybackBossSetMuted(result, a2);
  }
  return result;
}

void itemfig_ReportAudioPlaybackThroughFigLog(uint64_t a1)
{
  v21[34] = *MEMORY[0x1E4F143B8];
  CFTypeRef v20 = 0;
  v21[0] = 0;
  CFTypeRef cf = 0;
  CMAudioFormatDescriptionRef desc = 0;
  uint64_t v17 = 0;
  if (a1)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    uint64_t v3 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    if (v3)
    {
      if (!*(unsigned char *)CMBaseObjectGetDerivedStorage())
      {
        uint64_t v4 = *(unsigned int *)(DerivedStorage + 996);
        if (v4)
        {
          uint64_t v5 = *(void *)(DerivedStorage + 968);
          uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
          uint64_t v7 = v6 ? v6 : 0;
          uint64_t v8 = *(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *, void))(v7 + 56);
          if (v8)
          {
            if (!v8(v5, v4, &v20, 0) && !itemfig_copyFormatDescription((uint64_t)v20, (uint64_t *)&desc))
            {
              CMAudioFormatDescriptionRef v9 = desc;
              if (CMAudioFormatDescriptionGetRichestDecodableFormat(desc))
              {
                if (!itemfig_getTrackStorage(a1, *(_DWORD *)(DerivedStorage + 996), v21))
                {
                  uint64_t v10 = *(void *)(v21[0] + 16);
                  if (v10)
                  {
                    uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(v10);
                    uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
                    if (v12) {
                      uint64_t v13 = v12;
                    }
                    else {
                      uint64_t v13 = 0;
                    }
                    int v14 = *(void (**)(uint64_t, __CFString *, void, CFTypeRef *))(v13 + 48);
                    if (v14) {
                      v14(FigBaseObject, @"SpatializationEnabled", *MEMORY[0x1E4F1CF80], &cf);
                    }
                    FPSupport_GetAudioFormatDescriptionSpatializationEligibility((uint64_t)v9, &v17);
                    itemfig_isSpatializationAllowed(a1, 0);
                    itemfig_isSpatializationAllowed(a1, 1);
                    CFTypeRef v15 = cf;
                    if (dword_1E9350BF0)
                    {
                      os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                      fig_log_call_emit_and_clean_up_after_send_and_compose();
                      CFTypeRef v15 = cf;
                    }
                    if (v15) {
                      CFRelease(v15);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  if (v20) {
    CFRelease(v20);
  }
  if (desc) {
    CFRelease(desc);
  }
  if (v3) {
    CFRelease(v3);
  }
}

void itemfig_getFrameDropCountFromAllVideoPipelines(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 640));
  uint64_t v4 = *(void *)(DerivedStorage + 648);
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 640));
  if (v4)
  {
    CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 648));
    if (Count < 1)
    {
      uint64_t v4 = 0;
    }
    else
    {
      CFIndex v6 = Count;
      CFIndex v7 = 0;
      uint64_t v4 = 0;
      uint64_t v8 = @"PerformanceDictionary";
      uint64_t v9 = *MEMORY[0x1E4F1CF80];
      uint64_t v21 = *MEMORY[0x1E4F1CF80];
      do
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 648), v7);
        if (*((_DWORD *)ValueAtIndex + 1) == 1986618469)
        {
          uint64_t v11 = ValueAtIndex[2];
          if (v11)
          {
            CFDictionaryRef theDict = 0;
            uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(v11);
            uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
            uint64_t v14 = v13 ? v13 : 0;
            CFTypeRef v15 = *(unsigned int (**)(uint64_t, __CFString *, uint64_t, CFDictionaryRef *))(v14 + 48);
            if (v15)
            {
              if (!v15(FigBaseObject, v8, v9, &theDict))
              {
                CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(theDict, @"ImageQueuePerformanceArray");
                if (Value)
                {
                  CFArrayRef v17 = Value;
                  CFIndex v18 = v8;
                  if (CFArrayGetCount(Value) >= 1)
                  {
                    CFTypeRef v20 = a2;
                    CFIndex v19 = 0;
                    do
                    {
                      CFArrayGetValueAtIndex(v17, v19);
                      if (FigCFDictionaryGetInt32IfPresent()) {
                        break;
                      }
                      ++v19;
                    }
                    while (CFArrayGetCount(v17) > v19);
                    a2 = v20;
                  }
                }
                else
                {
                  CFIndex v18 = v8;
                }
                FigCFDictionaryGetCFIndexIfPresent();
                FigCFDictionaryGetCFIndexIfPresent();
                CFRelease(theDict);
                uint64_t v8 = v18;
                uint64_t v9 = v21;
              }
            }
          }
        }
        ++v7;
      }
      while (v7 != v6);
    }
  }
  *a2 = v4;
}

double itemfig_getNonNegativeCurrentTime(uint64_t a1, CMTime *a2)
{
  CMTime v8 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  itemfig_GetCurrentTime(a1, (uint64_t)&v8);
  uint64_t v3 = (long long *)MEMORY[0x1E4F1FA48];
  if ((v8.flags & 0x1D) != 1
    || (time1 = v8, CMTime v6 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48], CMTimeCompare(&time1, &v6) < 0))
  {
    long long v4 = *v3;
    CMTime v8 = *(CMTime *)v3;
  }
  if (a2)
  {
    *(void *)&long long v4 = v8.value;
    *a2 = v8;
  }
  return *(double *)&v4;
}

double itemfig_getPlayableRangeAtTime(uint64_t a1, CMTime *a2, _OWORD *a3)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  *(_OWORD *)&v17.CMTimeValue value = *MEMORY[0x1E4F1FA48];
  CMTimeEpoch v7 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
  v17.CMTimeEpoch epoch = v7;
  long long v11 = *(_OWORD *)&v17.value;
  *(_OWORD *)&v16.CMTimeValue value = *(_OWORD *)&v17.value;
  v16.CMTimeEpoch epoch = v7;
  MEMORY[0x19970E290](DerivedStorage[77]);
  uint64_t v8 = DerivedStorage[75];
  if (v8)
  {
    FigPlayabilityMonitorGetPlayableRange(v8, (uint64_t)&v17, &v16);
  }
  else if (DerivedStorage[44])
  {
    itemfig_getDurationIfReady(a1, (uint64_t)&v16);
  }
  MEMORY[0x19970E2B0](DerivedStorage[77]);
  time1.CMTime start = v16;
  *(_OWORD *)&time2.CMTimeValue value = v11;
  time2.CMTimeEpoch epoch = v7;
  if (!CMTimeCompare(&time1.start, &time2)
    || (time1.start = v17, CMTime time2 = *a2, CMTimeCompare(&time1.start, &time2) > 0)
    || (time1.CMTime start = v17,
        CMTime time2 = v16,
        CMTimeAdd(&v14, &time1.start, &time2),
        *(_OWORD *)&time1.start.CMTimeValue value = *(_OWORD *)&a2->value,
        time1.start.CMTimeEpoch epoch = a2->epoch,
        CMTimeCompare(&time1.start, &v14) >= 1))
  {
    CMTime v17 = *a2;
    double result = *(double *)&v11;
    *(_OWORD *)&v16.CMTimeValue value = v11;
    v16.CMTimeEpoch epoch = v7;
  }
  if (a3)
  {
    CMTime time2 = v17;
    CMTime duration = v16;
    CMTimeRangeMake(&time1, &time2, &duration);
    long long v10 = *(_OWORD *)&time1.start.epoch;
    *a3 = *(_OWORD *)&time1.start.value;
    a3[1] = v10;
    double result = *(double *)&time1.duration.timescale;
    a3[2] = *(_OWORD *)&time1.duration.timescale;
  }
  return result;
}

uint64_t itemfig_getDurationIfReady(uint64_t a1, uint64_t a2)
{
  int v21 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFDictionaryRef v20 = 0;
  int v19 = 0;
  if (*(unsigned char *)DerivedStorage || !a2)
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v5 = DerivedStorage;
    if ((*(_DWORD *)(DerivedStorage + 248) & 0x1D) == 1)
    {
      CMTime time1 = *(CMTime *)(DerivedStorage + 236);
      long long v16 = *MEMORY[0x1E4F1FA48];
      *(_OWORD *)&time2.CMTimeValue value = *MEMORY[0x1E4F1FA48];
      CMTimeEpoch v6 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
      time2.CMTimeEpoch epoch = v6;
      if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0 && (*(_DWORD *)(v5 + 272) & 0x1D) == 1)
      {
        CMTime time1 = *(CMTime *)(v5 + 260);
        *(_OWORD *)&time2.CMTimeValue value = v16;
        time2.CMTimeEpoch epoch = v6;
        if (CMTimeCompare(&time1, &time2) >= 1)
        {
          uint64_t result = 0;
          uint64_t v7 = MEMORY[0x1E4F1FA10];
LABEL_22:
          *(_OWORD *)a2 = *(_OWORD *)v7;
          *(void *)(a2 + 16) = *(void *)(v7 + 16);
          return result;
        }
      }
    }
    uint64_t v8 = *(void *)(v5 + 1216);
    if (!v8) {
      return FigSignalErrorAt();
    }
    uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v9) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
    long long v11 = *(uint64_t (**)(uint64_t, __CFString *, int *, int *, void))(v10 + 8);
    if (!v11) {
      return 4294954514;
    }
    uint64_t result = v11(v8, @"Duration", &v19, &v21, 0);
    if (result) {
      return result;
    }
    if (v19 != 2)
    {
      uint64_t result = 0;
      uint64_t v7 = MEMORY[0x1E4F1F9F0];
      goto LABEL_22;
    }
    uint64_t CMBaseObject = FigAssetGetCMBaseObject(*(void *)(v5 + 1216));
    uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v14 = v13 ? v13 : 0;
    CFTypeRef v15 = *(uint64_t (**)(uint64_t, __CFString *, void, const __CFDictionary **))(v14 + 48);
    if (v15)
    {
      uint64_t result = v15(CMBaseObject, @"Duration", *MEMORY[0x1E4F1CF80], &v20);
      if (!result)
      {
        CMTimeMakeFromDictionary(&time1, v20);
        *(CMTime *)a2 = time1;
        uint64_t result = (uint64_t)v20;
        if (v20)
        {
          CFRelease(v20);
          return 0;
        }
      }
    }
    else
    {
      return 4294954514;
    }
  }
  return result;
}

uint64_t playerfig_removeAudioRenderPipelineListeners(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    return FigNotificationCenterRemoveWeakListener();
  }
  return result;
}

BOOL itemfig_shouldEnableSpatializationForTrack(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  uint64_t v18 = 0;
  CMFormatDescriptionRef desc = 0;
  uint64_t v5 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v5) {
    goto LABEL_17;
  }
  uint64_t v6 = *(void *)(DerivedStorage + 968);
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v8 = v7 ? v7 : 0;
  uint64_t v9 = *(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *, void))(v8 + 56);
  if (!v9) {
    goto LABEL_17;
  }
  if (v9(v6, a2, &cf, 0)) {
    goto LABEL_17;
  }
  if (itemfig_copyFormatDescription((uint64_t)cf, (uint64_t *)&desc)) {
    goto LABEL_17;
  }
  CMFormatDescriptionRef v10 = desc;
  if (CMFormatDescriptionGetMediaType(desc) != 1936684398) {
    goto LABEL_17;
  }
  int AudioFormatDescriptionSpatializationEligibility = FPSupport_GetAudioFormatDescriptionSpatializationEligibility((uint64_t)v10, 0);
  playerfig_getDeviceMaximumNumberOfPhysicalOutputChannels((uint64_t)v5, (int *)&v18 + 1, 0);
  switch(AudioFormatDescriptionSpatializationEligibility)
  {
    case 0:
      goto LABEL_17;
    case 2:
      uint64_t v12 = a1;
      int v13 = 0;
LABEL_14:
      if (!itemfig_isSpatializationAllowed(v12, v13)) {
        goto LABEL_17;
      }
      break;
    case 1:
      uint64_t v12 = a1;
      int v13 = 1;
      goto LABEL_14;
  }
  if (!itemfig_getMaximumNumberOfSpatializedOutputChannels(a1, (int *)&v18))
  {
    BOOL v14 = (int)v18 > SHIDWORD(v18);
    goto LABEL_18;
  }
LABEL_17:
  BOOL v14 = 0;
LABEL_18:
  if (cf) {
    CFRelease(cf);
  }
  if (desc) {
    CFRelease(desc);
  }
  if (v5) {
    CFRelease(v5);
  }
  return v14;
}

uint64_t fp_buildAudioRenderPipelineForTrack(uint64_t a1, uint64_t a2, uint64_t a3, int a4, char a5, char a6, void *a7)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v14 = CMBaseObjectGetDerivedStorage();
  uint64_t v184 = 0;
  CMAudioFormatDescriptionRef desc = 0;
  CFTypeRef v183 = 0;
  CFTypeRef cf = 0;
  Hasuint64_t TrackOfType = FPSupport_HasTrackOfType(*(void *)(v14 + 968), 1986618469);
  uint64_t TrackStorage = itemfig_getTrackStorage(a2, a3, &v184);
  if (TrackStorage)
  {
    uint64_t RenderPipelineOptions = TrackStorage;
    CFTypeRef v28 = 0;
    NextRenderPipelineIdentifierString = 0;
    CFNumberRef v30 = 0;
    CFBooleanRef v20 = 0;
    goto LABEL_18;
  }
  char v176 = a6;
  char v177 = a5;
  long long v16 = *(__SecTask **)(DerivedStorage + 840);
  if (v16)
  {
    CFBooleanRef v17 = (const __CFBoolean *)SecTaskCopyValueForEntitlement(v16, @"com.apple.coremedia.allow-protected-content-playback", 0);
    if (v17)
    {
      CFBooleanRef v18 = v17;
      BOOL v19 = CFBooleanGetValue(v17) != 0;
      CFRelease(v18);
    }
    else
    {
      BOOL v19 = 0;
    }
    CFBooleanRef v21 = (const __CFBoolean *)SecTaskCopyValueForEntitlement(*(SecTaskRef *)(DerivedStorage + 840), @"com.apple.coreaudio.allow-amr-decode", 0);
    CFBooleanRef v20 = v21;
    if (v21)
    {
      CFBooleanGetValue(v21);
      char v179 = 0;
      goto LABEL_10;
    }
  }
  else
  {
    CFBooleanRef v20 = 0;
    BOOL v19 = 0;
  }
  char v179 = 1;
LABEL_10:
  uint64_t v22 = *(void *)(v14 + 968);
  uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v23) {
    uint64_t v24 = v23;
  }
  else {
    uint64_t v24 = 0;
  }
  uint64_t v25 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, void))(v24 + 56);
  if (!v25)
  {
    CFTypeRef v28 = 0;
    NextRenderPipelineIdentifierString = 0;
    CFNumberRef v30 = 0;
    uint64_t RenderPipelineOptions = 4294954514;
    goto LABEL_18;
  }
  int v175 = v19;
  uint64_t v26 = v25(v22, a3, &v183, 0);
  if (v26 || (uint64_t v26 = itemfig_copyFormatDescription((uint64_t)v183, (uint64_t *)&desc), v26))
  {
    uint64_t RenderPipelineOptions = v26;
    CFTypeRef v28 = 0;
    NextRenderPipelineIdentifierString = 0;
    CFNumberRef v30 = 0;
    goto LABEL_18;
  }
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 456));
  CFIndex v32 = *(const void **)(DerivedStorage + 464);
  if (v32) {
    CMTimeValue value = (void *)CFRetain(v32);
  }
  else {
    CMTimeValue value = 0;
  }
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 456));
  CFMutableArrayRef v34 = (const __CFAllocator **)MEMORY[0x1E4F1CF80];
  uint64_t v171 = a7;
  uint64_t v172 = value;
  if (!a4) {
    goto LABEL_90;
  }
  formatDescriptionOut.CMTimeValue value = 0;
  sizeOut.CMTimeValue value = 0;
  v190[0] = 0;
  uint64_t v35 = CMBaseObjectGetDerivedStorage();
  values = 0;
  int v36 = PKDIsContentKeyBossEnabled();
  uint64_t v37 = *(void *)(v35 + 1216);
  CFAllocatorRef allocator = *v34;
  if (v36)
  {
    uint64_t CMBaseObject = FigAssetGetCMBaseObject(v37);
    uint64_t v39 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v39) {
      uint64_t v40 = v39;
    }
    else {
      uint64_t v40 = 0;
    }
    CFTypeRef v44 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, CMTime *))(v40 + 48);
    if (v44)
    {
      int v45 = v44(CMBaseObject, @"assetProperty_ContentKeyBoss", allocator, &sizeOut);
      int v46 = 1;
      if (v45
        || !sizeOut.value
        || FigContentKeySpecifierCreate(3, @"AudibleGroupID", 0, 0, (uint64_t *)&values))
      {
        goto LABEL_67;
      }
      CMTimeValue v47 = sizeOut.value;
      char v48 = values;
      uint64_t v49 = *(void *)(CMBaseObjectGetVTable() + 16);
      CFArrayRef v50 = v49 ? (void *)v49 : 0;
      int v55 = (uint64_t (*)(CMTimeValue, void *, size_t *))v50[13];
      if (v55)
      {
        if (*v50 >= 2uLL)
        {
          int v56 = v55(v47, v48, v190);
          BOOL v57 = 1;
          int v46 = 1;
          if (v56) {
            goto LABEL_67;
          }
          goto LABEL_62;
        }
      }
    }
LABEL_66:
    int v46 = 1;
    goto LABEL_67;
  }
  uint64_t v41 = FigAssetGetCMBaseObject(v37);
  uint64_t v42 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v42) {
    uint64_t v43 = v42;
  }
  else {
    uint64_t v43 = 0;
  }
  int v51 = *(unsigned int (**)(uint64_t, __CFString *, const __CFAllocator *, CMTime *))(v43 + 48);
  if (!v51) {
    goto LABEL_66;
  }
  if (v51(v41, @"assetProperty_DefaultContentKeySession", allocator, &formatDescriptionOut)) {
    goto LABEL_66;
  }
  CMTimeValue v52 = formatDescriptionOut.value;
  if (!formatDescriptionOut.value) {
    goto LABEL_66;
  }
  uint64_t v53 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v54 = v53 ? v53 : 0;
  uint64_t v58 = *(uint64_t (**)(CMTimeValue, __CFString *, size_t *))(v54 + 80);
  if (!v58) {
    goto LABEL_66;
  }
  BOOL v57 = v58(v52, @"AudibleGroupID", v190) == 0;
LABEL_62:
  int v46 = 1;
  if (v57 && v190[0] && CFDataGetLength((CFDataRef)v190[0]) == 4)
  {
    int v46 = 0;
    *(_DWORD *)(v35 + 912) = *(_DWORD *)CFDataGetBytePtr((CFDataRef)v190[0]);
  }
LABEL_67:
  if (values) {
    CFRelease(values);
  }
  int v59 = v175;
  if (sizeOut.value) {
    CFRelease((CFTypeRef)sizeOut.value);
  }
  if (v190[0]) {
    CFRelease((CFTypeRef)v190[0]);
  }
  if (formatDescriptionOut.value) {
    CFRelease((CFTypeRef)formatDescriptionOut.value);
  }
  if (!v46) {
    int v59 = 1;
  }
  int v175 = v59;
  int v60 = desc;
  int valuePtr = *(_DWORD *)(v14 + 912);
  if (valuePtr)
  {
    formatDescriptionOut.CMTimeValue value = 0;
    sizeOut.CMTimeValue value = 0;
    v190[0] = 0;
    keys = @"AudibleGroupID";
    StreamBasicDescriptioCFIndex n = CMAudioFormatDescriptionGetStreamBasicDescription(desc);
    ChannelLayout = CMAudioFormatDescriptionGetChannelLayout(v60, (size_t *)&sizeOut);
    CFDictionaryRef Extensions = CMFormatDescriptionGetExtensions(v60);
    MagicCookie = CMAudioFormatDescriptionGetMagicCookie(v60, v190);
    CFNumberRef v65 = CFNumberCreate(allocator, kCFNumberSInt32Type, &valuePtr);
    values = v65;
    if (!v65)
    {
      CMTimeValue value = v172;
      goto LABEL_89;
    }
    if (Extensions)
    {
      CFNumberRef v66 = v65;
      CFIndex Count = CFDictionaryGetCount(Extensions);
      CFDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(allocator, Count + 1, Extensions);
      CFDictionaryAddValue(MutableCopy, @"AudibleGroupID", v66);
    }
    else
    {
      CFDictionaryRef MutableCopy = CFDictionaryCreate(allocator, (const void **)&keys, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    }
    if (MutableCopy) {
      OSStatus v69 = CMAudioFormatDescriptionCreate(allocator, StreamBasicDescription, sizeOut.value, ChannelLayout, v190[0], MagicCookie, MutableCopy, (CMAudioFormatDescriptionRef *)&formatDescriptionOut);
    }
    else {
      OSStatus v69 = 0;
    }
    CMTimeValue value = v172;
    if (values) {
      CFRelease(values);
    }
    if (MutableCopy) {
      CFRelease(MutableCopy);
    }
    if (!v69)
    {
LABEL_89:
      uint64_t v70 = (const opaqueCMFormatDescription *)formatDescriptionOut.value;
      if (formatDescriptionOut.value) {
        goto LABEL_91;
      }
    }
  }
LABEL_90:
  uint64_t v70 = (const opaqueCMFormatDescription *)FigFormatDescriptionRetain();
LABEL_91:
  if (*(void *)(DerivedStorage + 912)) {
    uint64_t AudioDeviceUIDFromPassthroughHelper = FPSupport_GetAudioDeviceUIDFromPassthroughHelper();
  }
  else {
    uint64_t AudioDeviceUIDFromPassthroughHelper = *(void *)(DerivedStorage + 680);
  }
  if (itemfig_isAtmosSupported(a2))
  {
    signed int MediaSubType = CMFormatDescriptionGetMediaSubType(v70);
    char v73 = 0;
    char v74 = 1;
    if (MediaSubType > 1885692722)
    {
      if (MediaSubType <= 1902469938)
      {
        if (MediaSubType != 1885692723)
        {
          int v75 = 1902324531;
LABEL_111:
          if (MediaSubType != v75) {
            goto LABEL_124;
          }
          goto LABEL_122;
        }
        goto LABEL_113;
      }
      if (MediaSubType == 2053464883)
      {
LABEL_113:
        formatDescriptionOut.CMTimeValue value = 0;
        FormatList = CMAudioFormatDescriptionGetFormatList(v70, (size_t *)&formatDescriptionOut);
        if (!FormatList || formatDescriptionOut.value <= 0x2FuLL) {
          goto LABEL_123;
        }
        int mFormatID = FormatList->mASBD.mFormatID;
        if (mFormatID > 1885547314)
        {
          if (mFormatID == 1885547315 || mFormatID == 2053319475) {
            goto LABEL_122;
          }
          int v79 = 1902324531;
LABEL_121:
          if (mFormatID == v79) {
            goto LABEL_122;
          }
LABEL_123:
          char v73 = 0;
          goto LABEL_124;
        }
        if (mFormatID != 1667574579)
        {
          int v79 = 1700997939;
          goto LABEL_121;
        }
LABEL_122:
        FPSupport_IsDisplayModeSwitchInProgress();
        char v74 = 0;
        char v73 = 1;
        goto LABEL_124;
      }
      if (MediaSubType == 2053319475) {
        goto LABEL_122;
      }
      int v76 = 1902469939;
    }
    else
    {
      if (MediaSubType > 1700997938)
      {
        if (MediaSubType == 1700997939) {
          goto LABEL_122;
        }
        if (MediaSubType != 1700998451)
        {
          int v75 = 1885547315;
          goto LABEL_111;
        }
        goto LABEL_113;
      }
      if (MediaSubType == 1667574579) {
        goto LABEL_122;
      }
      int v76 = 1667575091;
    }
    if (MediaSubType != v76) {
      goto LABEL_124;
    }
    goto LABEL_113;
  }
  char v73 = 0;
  char v74 = 1;
LABEL_124:
  NextRenderPipelineIdentifierString = (__CFString *)fp_createNextRenderPipelineIdentifierString();
  if (NextRenderPipelineIdentifierString)
  {
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 176));
    int v80 = *(const void **)(DerivedStorage + 168);
    CFAllocatorRef allocatora = (CFAllocatorRef)AudioDeviceUIDFromPassthroughHelper;
    char v169 = v73;
    if (v80)
    {
      CFTypeRef v81 = CFRetain(v80);
      MEMORY[0x19970E930](*(void *)(DerivedStorage + 176));
      if (v81)
      {
        CFBooleanRef v170 = v20;
        uint64_t v168 = v70;
        BOOL v82 = (v179 & 1) == 0 && CFBooleanGetValue(v20) && *(unsigned char *)(DerivedStorage + 856) == 0;
        uint64_t v83 = CMBaseObjectGetDerivedStorage();
        formatDescriptionOut.CMTimeValue value = 0;
        CFAllocatorRef v84 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        uint64_t v85 = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
        uint64_t v86 = v85;
        CFTypeRef cf = 0;
        uint64_t v87 = (const void **)MEMORY[0x1E4F1CFD0];
        if (v175) {
          CFDictionarySetValue(v85, @"AllowAudibleContent", (const void *)*MEMORY[0x1E4F1CFD0]);
        }
        if (v82) {
          CFDictionarySetValue(v86, @"AllowAMRDecode", *v87);
        }
        if ((v74 & 1) == 0) {
          CFDictionarySetValue(v86, @"AllowAtmosDecode", *v87);
        }
        MEMORY[0x19970E910](*(void *)(v83 + 456));
        CFIndex v88 = *(const void **)(v83 + 464);
        uint64_t v70 = v168;
        if (v88)
        {
          CFTypeRef v89 = CFRetain(v88);
          MEMORY[0x19970E930](*(void *)(v83 + 456));
          CFBooleanRef v20 = v170;
          if (v89) {
            CFDictionarySetValue(v86, @"AudioSession", v89);
          }
        }
        else
        {
          MEMORY[0x19970E930](*(void *)(v83 + 456));
          CFTypeRef v89 = 0;
          CFBooleanRef v20 = v170;
        }
        CFDictionarySetValue(v86, @"LoggingID", NextRenderPipelineIdentifierString);
        FigCFDictionarySetValue();
        uint64_t RenderPipelineOptions = FigBufferedAirPlayAudioRenderPipelineCreate(v84, v81, v86, &formatDescriptionOut.value);
        if (!RenderPipelineOptions)
        {
          CFTypeRef cf = (CFTypeRef)formatDescriptionOut.value;
          formatDescriptionOut.CMTimeValue value = 0;
        }
        if (v89) {
          CFRelease(v89);
        }
        if (v86) {
          CFRelease(v86);
        }
        if (formatDescriptionOut.value) {
          CFRelease((CFTypeRef)formatDescriptionOut.value);
        }
        CFRelease(v81);
      }
      else
      {
        uint64_t RenderPipelineOptions = 0;
      }
      CMTimeValue value = v172;
    }
    else
    {
      MEMORY[0x19970E930](*(void *)(DerivedStorage + 176));
      uint64_t RenderPipelineOptions = 0;
    }
    if (!cf)
    {
      int v90 = *(_DWORD *)(DerivedStorage + 112);
      if (v179)
      {
        BOOL v91 = 0;
        int v92 = v175;
      }
      else
      {
        int v92 = v175;
        if (CFBooleanGetValue(v20)) {
          BOOL v91 = *(unsigned char *)(DerivedStorage + 856) == 0;
        }
        else {
          BOOL v91 = 0;
        }
      }
      v190[0] = 0;
      CFAllocatorRef v93 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CMTimeMake(&formatDescriptionOut, 1, 2);
      CMTimeMake(&sizeOut, 1, 1);
      uint64_t RenderPipelineOptions = FPSupport_createRenderPipelineOptions(v93, v70, v90, (uint64_t)&formatDescriptionOut, (uint64_t)&sizeOut, allocatora, v92, v91, v177, 0, 0, v169, v176, HasTrackOfType == 0, 0, 0, value, 0, NextRenderPipelineIdentifierString,
                                (__CFDictionary **)v190);
      if (!RenderPipelineOptions)
      {
        uint64_t RenderPipelineOptions = FigAudioQueueRenderPipelineCreate(v93, (const __CFDictionary *)v190[0], &cf);
        if (!RenderPipelineOptions)
        {
          uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(cf);
          uint64_t v95 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v95) {
            uint64_t v96 = v95;
          }
          else {
            uint64_t v96 = 0;
          }
          CFMutableArrayRef v97 = *(void (**)(uint64_t, __CFString *, void))(v96 + 56);
          if (v97) {
            v97(FigBaseObject, @"HandleFormatDescriptionChanges", *MEMORY[0x1E4F1CFD0]);
          }
          uint64_t RenderPipelineOptions = 0;
        }
      }
      if (v190[0]) {
        CFRelease((CFTypeRef)v190[0]);
      }
    }
    if (RenderPipelineOptions) {
      goto LABEL_274;
    }
    if (!*(unsigned char *)(DerivedStorage + 1107)) {
      goto LABEL_186;
    }
    formatDescriptionOut.CMTimeValue value = 0;
    CFDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    FigCFDictionarySetValue();
    CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    CFTypeRef v100 = cf;
    FigGetDefaultLowWaterDurationForSpeedRampRenderPipelines(&v180);
    uint64_t RenderPipelineOptions = FigSpeedRampRenderPipelineCreate(AllocatorForMedia, v100, &v180, Mutable, (void **)&formatDescriptionOut);
    if (formatDescriptionOut.value)
    {
      uint64_t v101 = *(void *)(v14 + 2072);
      uint64_t v102 = FigRenderPipelineGetFigBaseObject(formatDescriptionOut.value);
      uint64_t v103 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v103) {
        uint64_t v104 = v103;
      }
      else {
        uint64_t v104 = 0;
      }
      CFTypeRef v105 = *(void (**)(uint64_t, uint64_t, uint64_t))(v104 + 56);
      if (v105) {
        v105(v102, 0x1EE54A2F8, v101);
      }
      CFTypeRef v106 = cf;
      CFTypeRef cf = (CFTypeRef)formatDescriptionOut.value;
      if (formatDescriptionOut.value) {
        CFRetain((CFTypeRef)formatDescriptionOut.value);
      }
      if (v106) {
        CFRelease(v106);
      }
      if (formatDescriptionOut.value) {
        CFRelease((CFTypeRef)formatDescriptionOut.value);
      }
    }
    if (Mutable) {
      CFRelease(Mutable);
    }
    if (RenderPipelineOptions)
    {
LABEL_274:
      CFNumberRef v30 = 0;
      CFTypeRef v28 = 0;
    }
    else
    {
LABEL_186:
      uint64_t v107 = *(void *)(v14 + 2080);
      if (v107)
      {
        uint64_t v108 = FigRenderPipelineGetFigBaseObject(cf);
        uint64_t v109 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v110 = v109 ? v109 : 0;
        uint64_t v111 = *(void (**)(uint64_t, __CFString *, uint64_t))(v110 + 56);
        if (v111) {
          v111(v108, @"OverlapRange", v107);
        }
      }
      unsigned int v112 = (void *)MEMORY[0x1E4F1CFC8];
      if (cf && *(unsigned char *)(DerivedStorage + 123))
      {
        uint64_t v113 = FigRenderPipelineGetFigBaseObject(cf);
        uint64_t v114 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v115 = v114 ? v114 : 0;
        int v116 = *(void (**)(uint64_t, __CFString *, void))(v115 + 56);
        if (v116) {
          v116(v113, @"ShouldCompensateForNeroScreenLatency", *v112);
        }
      }
      if (*(void *)(DerivedStorage + 8)) {
        int v117 = *(__CFString **)(DerivedStorage + 8);
      }
      else {
        int v117 = @"Unknown FigPlayer";
      }
      uint64_t v118 = FigRenderPipelineGetFigBaseObject(cf);
      uint64_t v119 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v119) {
        uint64_t v120 = v119;
      }
      else {
        uint64_t v120 = 0;
      }
      uint64_t v121 = *(void (**)(uint64_t, __CFString *, __CFString *))(v120 + 56);
      if (v121) {
        v121(v118, @"ClientName", v117);
      }
      MEMORY[0x19970E910](*(void *)(DerivedStorage + 24));
      uint64_t v122 = *(const void **)(DerivedStorage + 16);
      if (v122)
      {
        CFTypeRef v28 = CFRetain(v122);
        MEMORY[0x19970E930](*(void *)(DerivedStorage + 24));
        if (v28)
        {
          uint64_t v123 = FigRenderPipelineGetFigBaseObject(cf);
          uint64_t v124 = *(void *)(CMBaseObjectGetVTable() + 8);
          uint64_t v125 = v124 ? v124 : 0;
          CFDictionaryRef v126 = *(void (**)(uint64_t, __CFString *, CFTypeRef))(v125 + 56);
          if (v126) {
            v126(v123, @"STSLabel", v28);
          }
        }
      }
      else
      {
        MEMORY[0x19970E930](*(void *)(DerivedStorage + 24));
        CFTypeRef v28 = 0;
      }
      if (value)
      {
        formatDescriptionOut.CMTimeValue value = 0;
        uint64_t v127 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v127)
        {
          uint64_t v128 = *(void (**)(void *, void, void, CMTime *))(v127 + 48);
          if (v128) {
            v128(value, *MEMORY[0x1E4F75EA0], *MEMORY[0x1E4F1CF80], &formatDescriptionOut);
          }
        }
        CMTimeValue v129 = formatDescriptionOut.value;
        if (formatDescriptionOut.value)
        {
          uint64_t v130 = FigRenderPipelineGetFigBaseObject(cf);
          uint64_t v131 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v131) {
            uint64_t v132 = v131;
          }
          else {
            uint64_t v132 = 0;
          }
          CFTypeRef v133 = *(void (**)(uint64_t, __CFString *, CMTimeValue))(v132 + 56);
          if (v133) {
            v133(v130, @"AllowedToUseHardware", v129);
          }
          CFRelease((CFTypeRef)formatDescriptionOut.value);
        }
      }
      CFIndex v134 = (void *)v184;
      if (*(unsigned char *)(v184 + 120) && *(void *)(v184 + 128))
      {
        uint64_t v135 = FigRenderPipelineGetFigBaseObject(cf);
        uint64_t v136 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v136) {
          uint64_t v137 = v136;
        }
        else {
          uint64_t v137 = 0;
        }
        CFTypeRef v138 = *(void (**)(uint64_t, __CFString *, void))(v137 + 56);
        if (v138) {
          v138(v135, @"EnableSweepFilter", *MEMORY[0x1E4F1CFD0]);
        }
        uint64_t v139 = v134[16];
        uint64_t v140 = FigRenderPipelineGetFigBaseObject(cf);
        uint64_t v141 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v141) {
          uint64_t v142 = v141;
        }
        else {
          uint64_t v142 = 0;
        }
        uint64_t v143 = *(void (**)(uint64_t, __CFString *, uint64_t))(v142 + 56);
        if (v143) {
          v143(v140, @"SweepFilterConfiguration", v139);
        }
        CFNumberRef v30 = CFNumberCreate(0, kCFNumberFloat32Type, v134 + 17);
        uint64_t v144 = FigRenderPipelineGetFigBaseObject(cf);
        uint64_t v145 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v145) {
          uint64_t v146 = v145;
        }
        else {
          uint64_t v146 = 0;
        }
        CMTag v147 = *(void (**)(uint64_t, __CFString *, CFNumberRef))(v146 + 56);
        if (v147) {
          v147(v144, @"SweepFilterSweepValue", v30);
        }
      }
      else
      {
        CFNumberRef v30 = 0;
      }
      uint64_t v148 = v134[19];
      if (v148)
      {
        uint64_t v149 = FigRenderPipelineGetFigBaseObject(cf);
        uint64_t v150 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v151 = v150 ? v150 : 0;
        CFArrayRef v152 = *(void (**)(uint64_t, __CFString *, uint64_t))(v151 + 56);
        if (v152) {
          v152(v149, @"CinematicAudioParameters", v148);
        }
      }
      uint64_t v153 = *(void *)(v14 + 944);
      if (v153)
      {
        uint64_t v154 = FigRenderPipelineGetFigBaseObject(cf);
        uint64_t v155 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v156 = v155 ? v155 : 0;
        uint64_t v157 = *(void (**)(uint64_t, __CFString *, uint64_t))(v156 + 56);
        if (v157) {
          v157(v154, @"AudioDeviceChannelMap", v153);
        }
      }
      uint64_t v158 = *(void *)(v14 + 1488);
      if (v158)
      {
        uint64_t v159 = FigRenderPipelineGetFigBaseObject(cf);
        uint64_t v160 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v161 = v160 ? v160 : 0;
        uint64_t v162 = *(void (**)(uint64_t, __CFString *, uint64_t))(v161 + 56);
        if (v162) {
          v162(v159, @"AudioQueueClockDevice", v158);
        }
      }
      uint64_t v163 = FigRenderPipelineGetFigBaseObject(cf);
      uint64_t v164 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v164) {
        uint64_t v165 = v164;
      }
      else {
        uint64_t v165 = 0;
      }
      uint64_t v166 = *(void (**)(uint64_t, __CFString *, void))(v165 + 56);
      if (v166) {
        v166(v163, @"AllowsPrebuffering", *v112);
      }
      if (cf)
      {
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterAddWeakListener();
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterAddWeakListener();
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterAddWeakListener();
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterAddWeakListener();
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterAddWeakListener();
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterAddWeakListener();
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterAddWeakListener();
        CFTypeRef v167 = cf;
      }
      else
      {
        CFTypeRef v167 = 0;
      }
      uint64_t RenderPipelineOptions = 0;
      *uint64_t v171 = v167;
      CFTypeRef cf = 0;
    }
  }
  else
  {
    CFNumberRef v30 = 0;
    CFTypeRef v28 = 0;
    uint64_t RenderPipelineOptions = 4294954510;
  }
  if (value) {
    CFRelease(value);
  }
LABEL_18:
  FigFormatDescriptionRelease();
  FigFormatDescriptionRelease();
  if (cf) {
    CFRelease(cf);
  }
  if (v20) {
    CFRelease(v20);
  }
  if (v183) {
    CFRelease(v183);
  }
  if (v30) {
    CFRelease(v30);
  }
  if (NextRenderPipelineIdentifierString) {
    CFRelease(NextRenderPipelineIdentifierString);
  }
  if (v28) {
    CFRelease(v28);
  }
  return RenderPipelineOptions;
}

void itemfig_updateVolumeOffset(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    uint64_t v3 = DerivedStorage;
    if (*(unsigned char *)(DerivedStorage + 1200))
    {
      int v4 = *(_DWORD *)(DerivedStorage + 996);
      if (v4)
      {
        uint64_t v14 = 0;
        int TrackStorage = itemfig_getTrackStorage(a1, v4, &v14);
        uint64_t v6 = v14;
        if (!TrackStorage && v14 != 0)
        {
          if (*(void *)(v14 + 16))
          {
            CFNumberRef v8 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberFloat32Type, (const void *)(v3 + 1428));
            if (v8)
            {
              CFNumberRef v9 = v8;
              uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(*(void *)(v6 + 16));
              uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
              if (v11) {
                uint64_t v12 = v11;
              }
              else {
                uint64_t v12 = 0;
              }
              int v13 = *(void (**)(uint64_t, __CFString *, CFNumberRef))(v12 + 56);
              if (v13) {
                v13(FigBaseObject, @"SoftwareVolume3", v9);
              }
              CFRelease(v9);
            }
          }
        }
      }
    }
  }
}

void itemfig_applyAudioProcessingUnitsToTrack(uint64_t a1, uint64_t a2)
{
  int v4 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (v4)
  {
    if (*(void *)(a2 + 16) && *(void *)(a1 + 1480) | *(void *)(a2 + 96))
    {
      uint64_t v6 = DerivedStorage;
      uint64_t MutableCopy = FigCFArrayCreateMutableCopy();
      if (MutableCopy)
      {
        CFNumberRef v8 = (__CFArray *)MutableCopy;
        CFArrayRef v9 = *(const __CFArray **)(a1 + 1480);
        if (v9)
        {
          v16.length = CFArrayGetCount(v9);
          v16.locatioCFIndex n = 0;
          CFArrayAppendArray(v8, v9, v16);
        }
        uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(*(void *)(a2 + 16));
        uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v11) {
          uint64_t v12 = v11;
        }
        else {
          uint64_t v12 = 0;
        }
        int v13 = *(unsigned int (**)(uint64_t, __CFString *, __CFArray *))(v12 + 56);
        if (v13)
        {
          if (!v13(FigBaseObject, @"AudioProcessingUnits", v8) && *(void *)(a2 + 16) == *(void *)(v6 + 560))
          {
            uint64_t v14 = *(const void **)(v6 + 608);
            *(void *)(v6 + 608) = v8;
            CFRetain(v8);
            if (v14) {
              CFRelease(v14);
            }
          }
        }
        CFRelease(v8);
      }
      else
      {
        FigSignalErrorAt();
      }
    }
    CFRelease(v4);
  }
}

uint64_t itemfig_applyAllAudioCurvesToTrack(uint64_t a1, uint64_t a2)
{
  uint64_t result = itemfig_applyTrackAudioCurvesToTrack(a2);
  if (!result)
  {
    return itemfig_applyItemAudioCurvesToTrack(a1, a2);
  }
  return result;
}

uint64_t itemfig_applyAdjustTargetLevel(uint64_t a1)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (result)
  {
    uint64_t v3 = result;
    uint64_t v11 = 0;
    uint64_t result = itemfig_getTrackStorage(a1, *(_DWORD *)(result + 996), &v11);
    if (!result)
    {
      if (v11)
      {
        uint64_t result = *(void *)(v11 + 16);
        if (result)
        {
          uint64_t v4 = *(void *)(v3 + 1496);
          if (v4)
          {
            uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(result);
            uint64_t VTable = CMBaseObjectGetVTable();
            uint64_t v8 = *(void *)(VTable + 8);
            uint64_t result = VTable + 8;
            uint64_t v7 = v8;
            if (v8) {
              uint64_t v9 = v7;
            }
            else {
              uint64_t v9 = 0;
            }
            CMFormatDescriptionRef v10 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v9 + 56);
            if (v10) {
              return v10(FigBaseObject, @"AdjustTargetLevel", v4);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t itemfig_applyAdjustCompressionProfile(uint64_t a1)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (result)
  {
    uint64_t v3 = result;
    uint64_t v11 = 0;
    uint64_t result = itemfig_getTrackStorage(a1, *(_DWORD *)(result + 996), &v11);
    if (!result)
    {
      if (v11)
      {
        uint64_t result = *(void *)(v11 + 16);
        if (result)
        {
          uint64_t v4 = *(void *)(v3 + 1504);
          if (v4)
          {
            uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(result);
            uint64_t VTable = CMBaseObjectGetVTable();
            uint64_t v8 = *(void *)(VTable + 8);
            uint64_t result = VTable + 8;
            uint64_t v7 = v8;
            if (v8) {
              uint64_t v9 = v7;
            }
            else {
              uint64_t v9 = 0;
            }
            CMFormatDescriptionRef v10 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v9 + 56);
            if (v10) {
              return v10(FigBaseObject, @"AdjustCompressionProfile", v4);
            }
          }
        }
      }
    }
  }
  return result;
}

void itemfig_applyTimePitchAlgorithmToTrack(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  uint64_t v5 = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (v4)
  {
    uint64_t v6 = v5;
    if (!*v5)
    {
      uint64_t v7 = *(const void **)(a2 + 112);
      if (!v7) {
        uint64_t v7 = *(const void **)(DerivedStorage + 1464);
      }
      uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(*(void *)(a2 + 16));
      uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v9) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = 0;
      }
      uint64_t v11 = *(void (**)(uint64_t, __CFString *, const void *))(v10 + 56);
      if (v11) {
        v11(FigBaseObject, @"TimePitchAlgorithm", v7);
      }
      if (*(void *)(a2 + 16) == *((void *)v6 + 70))
      {
        uint64_t v12 = (const void *)*((void *)v6 + 77);
        *((void *)v6 + 77) = v7;
        if (v7) {
          CFRetain(v7);
        }
        if (v12) {
          CFRelease(v12);
        }
      }
    }
    CFRelease(v4);
  }
}

uint64_t fp_createAudioRenderPipelineOptionsForTrack(const void *a1, uint64_t a2, int a3, void *a4)
{
  keys[3] = *(void **)MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v75 = 0;
  CFTypeRef cf = 0;
  memset(keys, 0, 24);
  memset(values, 0, sizeof(values));
  CFTypeRef v73 = 0;
  CFTypeRef v74 = 0;
  v85[0] = 0;
  v85[1] = 0;
  CFTypeRef v72 = 0;
  CMTime lhs = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  uint64_t CommonRenderPipelineOptionsForTrack = fp_createCommonRenderPipelineOptionsForTrack(a1, 0, (uint64_t)&lhs, a2, 1936684398, a3, v85);
  if (CommonRenderPipelineOptionsForTrack)
  {
    uint64_t v26 = CommonRenderPipelineOptionsForTrack;
    uint64_t v11 = 0;
LABEL_104:
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    CFMutableDictionaryRef DefaultEnhanced = 0;
    goto LABEL_82;
  }
  uint64_t v10 = v85[0];
  uint64_t v11 = v85[0] != 0;
  uint64_t v12 = *(void *)(DerivedStorage + 968);
  uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v13) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  CFTypeRef v15 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, void))(v14 + 56);
  if (!v15)
  {
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    CFMutableDictionaryRef DefaultEnhanced = 0;
    uint64_t v26 = 4294954514;
    goto LABEL_82;
  }
  uint64_t v16 = v15(v12, a2, &cf, 0);
  if (v16 || (uint64_t v16 = itemfig_copyFormatDescription((uint64_t)cf, (uint64_t *)&v75), v16))
  {
    uint64_t v26 = v16;
    goto LABEL_104;
  }
  int v59 = a4;
  CFBooleanRef v17 = (const opaqueCMFormatDescription *)v75;
  CFDictionaryRef v18 = *(const __CFDictionary **)(DerivedStorage + 920);
  if (!v18) {
    CFDictionaryRef v18 = *(const __CFDictionary **)(DerivedStorage + 928);
  }
  CFMutableDictionaryRef DefaultEnhanced = FigGaplessInfoCopyAndEnhance_CorrectingWithTrackReader((const AudioFormatListItem *)v75, (uint64_t)cf, v18);
  CFBooleanRef v20 = (const __CFAllocator **)MEMORY[0x1E4F1CF80];
  if (dword_1E9350BF0)
  {
    int64_t value = 0;
    int32_t timescale = 0;
    FigCFDictionaryGetInt64IfPresent();
    FigCFDictionaryGetInt32IfPresent();
    if (*(unsigned char *)(DerivedStorage + 152))
    {
      CFDictionaryRef dictionaryRepresentation = 0;
      uint64_t FigBaseObject = FigTrackReaderGetFigBaseObject(cf);
      uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v23 = v22 ? v22 : 0;
      uint64_t v27 = *(unsigned int (**)(uint64_t, __CFString *, const __CFAllocator *, CFDictionaryRef *))(v23 + 48);
      if (v27)
      {
        if (!v27(FigBaseObject, @"UneditedTrackDuration", *v20, &dictionaryRepresentation))
        {
          memset(&v68, 0, sizeof(v68));
          CMTimeMakeFromDictionary(&v68, dictionaryRepresentation);
          if (dictionaryRepresentation) {
            CFRelease(dictionaryRepresentation);
          }
          if (value >= 1)
          {
            memset(&v67, 0, sizeof(v67));
            CMTimeMake(&v67, value, timescale);
            memset(&v66, 0, sizeof(v66));
            CMTime lhs = v68;
            CMTime rhs = v67;
            CMTimeSubtract(&time, &lhs, &rhs);
            CMTimeAbsoluteValue(&v66, &time);
            CMTimeMakeWithSeconds(&time2, 10.0, v66.timescale);
            CMTime lhs = v66;
            if (CMTimeCompare(&lhs, &time2) >= 1)
            {
              if (dword_1E9350BF0)
              {
                *(_DWORD *)CFIndex v63 = 0;
                os_log_type_t type = OS_LOG_TYPE_DEFAULT;
                os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
            }
          }
          if (*(unsigned char *)(DerivedStorage + 152))
          {
            CFTypeRef v28 = (CMTime *)(DerivedStorage + 140);
            memset(&v67, 0, sizeof(v67));
            CMTime lhs = v68;
            CMTime rhs = *(CMTime *)(DerivedStorage + 140);
            CMTimeSubtract(&v61, &lhs, &rhs);
            CMTimeAbsoluteValue(&v67, &v61);
            CMTimeMakeWithSeconds(&v60, 10.0, v67.timescale);
            CMTime lhs = v67;
            if (CMTimeCompare(&lhs, &v60) >= 1)
            {
              if (dword_1E9350BF0)
              {
                LODWORD(v66.value) = 0;
                v63[0] = OS_LOG_TYPE_DEFAULT;
                BOOL v29 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                unsigned int v30 = v66.value;
                if (os_log_type_enabled(v29, v63[0])) {
                  unsigned int v31 = v30;
                }
                else {
                  unsigned int v31 = v30 & 0xFFFFFFFE;
                }
                if (v31)
                {
                  if (a1) {
                    CFIndex v32 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
                  }
                  else {
                    CFIndex v32 = "";
                  }
                  CMTime lhs = *v28;
                  Float64 Seconds = CMTimeGetSeconds(&lhs);
                  CMTime lhs = v68;
                  Float64 v34 = CMTimeGetSeconds(&lhs);
                  LODWORD(rhs.value) = 136316162;
                  *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"fp_createAudioRenderPipelineOptionsForTrack";
                  LOWORD(rhs.flags) = 2048;
                  *(void *)((char *)&rhs.flags + 2) = a1;
                  HIWORD(rhs.epoch) = 2082;
                  uint64_t v78 = v32;
                  __int16 v79 = 2048;
                  Float64 v80 = Seconds;
                  __int16 v81 = 2048;
                  Float64 v82 = v34;
                  _os_log_send_and_compose_impl();
                }
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
            }
          }
        }
      }
    }
  }
  if (DefaultEnhanced)
  {
    BOOL v35 = 0;
  }
  else
  {
    CFMutableDictionaryRef DefaultEnhanced = FigGaplessInfoCreateDefaultEnhanced(v17);
    BOOL v35 = DefaultEnhanced != 0;
  }
  GradualDecoderRefresh = (void *)FigGaplessInfoCreateGradualDecoderRefresh(v17);
  uint64_t v25 = GradualDecoderRefresh;
  if (GradualDecoderRefresh)
  {
    keys[0] = @"gdrCount";
    values[0] = GradualDecoderRefresh;
    CFIndex v37 = 1;
  }
  else
  {
    CFIndex v37 = 0;
  }
  CFAllocatorRef v38 = *v20;
  uint64_t v39 = FigTrackReaderGetFigBaseObject(cf);
  uint64_t v40 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v40) {
    uint64_t v41 = v40;
  }
  else {
    uint64_t v41 = 0;
  }
  uint64_t v42 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v41 + 48);
  if (v42) {
    v42(v39, @"EditsExcludePrimingAndRemainderDuration", v38, &v74);
  }
  CFTypeRef v43 = (CFTypeRef)*MEMORY[0x1E4F1CFD0];
  if (v74 == (CFTypeRef)*MEMORY[0x1E4F1CFD0])
  {
    if (DefaultEnhanced) {
      char v44 = v35;
    }
    else {
      char v44 = 1;
    }
    if (v44)
    {
      if (!DefaultEnhanced) {
        goto LABEL_64;
      }
    }
    else
    {
      LODWORD(v68.value) = 0;
      LOBYTE(v67.value) = 0;
      int v45 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v46 = v68.value;
      if (os_log_type_enabled(v45, v67.value)) {
        unsigned int v47 = v46;
      }
      else {
        unsigned int v47 = v46 & 0xFFFFFFFE;
      }
      if (v47)
      {
        LODWORD(rhs.value) = 136315138;
        *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"fp_createAudioRenderPipelineOptionsForTrack";
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CFRelease(DefaultEnhanced);
    CFMutableDictionaryRef DefaultEnhanced = 0;
    goto LABEL_64;
  }
  if (DefaultEnhanced)
  {
    keys[v37] = @"iTunesGaplessInfo";
    values[v37++] = DefaultEnhanced;
  }
LABEL_64:
  a4 = v59;
  uint64_t v48 = FigTrackReaderGetFigBaseObject(cf);
  uint64_t v49 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v49) {
    uint64_t v50 = v49;
  }
  else {
    uint64_t v50 = 0;
  }
  int v51 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v50 + 48);
  if (v51)
  {
    v51(v48, @"HasSeamSamples", v38, &v73);
    CFTypeRef v52 = v73;
  }
  else
  {
    CFTypeRef v52 = 0;
  }
  if (v52 == v43)
  {
    int SInt32 = (void *)FigCFNumberCreateSInt32();
    if (SInt32)
    {
      uint64_t v24 = SInt32;
      keys[v37] = @"BossTrack_BonusAudioPrimingPacketCountAtStart";
      values[v37++] = SInt32;
      goto LABEL_75;
    }
  }
  uint64_t v24 = 0;
  if (v37)
  {
LABEL_75:
    v85[v11] = CFDictionaryCreate(v38, (const void **)keys, (const void **)values, v37, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (v10)
    {
      uint64_t v11 = 2;
      FigCFCreateCombinedDictionary();
      uint64_t v26 = 0;
      goto LABEL_82;
    }
    uint64_t v10 = v85[0];
    uint64_t v11 = 1;
  }
  CFTypeRef v54 = 0;
  if (v11 && v10) {
    CFTypeRef v54 = CFRetain(v10);
  }
  uint64_t v26 = 0;
  CFTypeRef v72 = v54;
LABEL_82:
  if (cf) {
    CFRelease(cf);
  }
  if (DefaultEnhanced) {
    CFRelease(DefaultEnhanced);
  }
  if (v75)
  {
    CFRelease(v75);
    CFTypeRef v75 = 0;
  }
  if (v25) {
    CFRelease(v25);
  }
  if (v74)
  {
    CFRelease(v74);
    CFTypeRef v74 = 0;
  }
  if (v73)
  {
    CFRelease(v73);
    CFTypeRef v73 = 0;
  }
  if (v24) {
    CFRelease(v24);
  }
  if (v11)
  {
    uint64_t v55 = 8 * v11;
    do
    {
      int v56 = *(const void **)&v84[v55];
      if (v56) {
        CFRelease(v56);
      }
      v55 -= 8;
    }
    while (v55);
  }
  *a4 = v72;
  return v26;
}

void itemfig_resetRenderTriple(uint64_t a1)
{
  *(_DWORD *)a1 = 0;
  long long v2 = *(const void **)(a1 + 8);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 8) = 0;
  }
  uint64_t v3 = *(const void **)(a1 + 24);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 24) = 0;
  }
  uint64_t v4 = *(const void **)(a1 + 32);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 32) = 0;
  }
}

uint64_t itemfig_reuseExistingRenderPipeline(uint64_t result, uint64_t a2)
{
  if (result)
  {
    CFArrayRef v3 = (const __CFArray *)result;
    uint64_t result = CFArrayGetCount((CFArrayRef)result);
    if (result >= 1)
    {
      uint64_t v4 = result;
      CFIndex v5 = 0;
      while (1)
      {
        uint64_t result = (uint64_t)CFArrayGetValueAtIndex(v3, v5);
        if (*(_DWORD *)result == *(_DWORD *)a2)
        {
          uint64_t v6 = result;
          if (*(_DWORD *)(result + 16) == *(_DWORD *)(a2 + 16))
          {
            uint64_t result = FigCFEqual();
            if (result)
            {
              uint64_t v7 = *(void *)(v6 + 24);
              if (v7) {
                break;
              }
            }
          }
        }
        if (v4 == ++v5) {
          return result;
        }
      }
      uint64_t v8 = *(void *)(v6 + 32);
      *(void *)(a2 + 24) = v7;
      *(void *)(a2 + 32) = v8;
      *(void *)(v6 + 24) = 0;
      *(void *)(v6 + 32) = 0;
    }
  }
  return result;
}

uint64_t itemfig_canItemAudioTrackReusePreviousItemAudioRenderPipeline(uint64_t a1)
{
  v20[29] = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  v20[0] = 0;
  CFTypeRef v18 = 0;
  if (!*(void *)(v3 + 560))
  {
    if (!dword_1E9350BF0) {
      goto LABEL_40;
    }
LABEL_6:
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
LABEL_39:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_40;
  }
  uint64_t v4 = v3;
  if (!*(void *)(v3 + 656))
  {
    if (!dword_1E9350BF0) {
      goto LABEL_40;
    }
    goto LABEL_6;
  }
  uint64_t v5 = *(void *)(DerivedStorage + 968);
  uint64_t v6 = *(unsigned int *)(DerivedStorage + 996);
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v10 = *(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *, void))(v8 + 56);
  if (!v10
    || v10(v5, v6, &cf, 0)
    || itemfig_copyFormatDescription((uint64_t)cf, (uint64_t *)&v18)
    || itemfig_getTrackStorage(a1, *(_DWORD *)(DerivedStorage + 996), v20))
  {
    goto LABEL_40;
  }
  char v11 = _os_feature_enabled_impl();
  if (*(void *)(v4 + 168))
  {
    if (_os_feature_enabled_impl()) {
      goto LABEL_19;
    }
  }
  else if (v11)
  {
    goto LABEL_19;
  }
  if (!FPSupport_RenderPipelineSupportsGaplessTransitionWithFormats(*(void *)(v4 + 560), *(CMAudioFormatDescriptionRef *)(v4 + 656), (CMAudioFormatDescriptionRef)v18))
  {
    if (dword_1E9350BF0) {
      goto LABEL_38;
    }
    goto LABEL_40;
  }
LABEL_19:
  uint64_t v12 = *(void *)(v20[0] + 88);
  if (!v12) {
    uint64_t v12 = *(void *)(DerivedStorage + 1432);
  }
  if (v12 != *(void *)(v4 + 600))
  {
    if (dword_1E9350BF0) {
      goto LABEL_38;
    }
    goto LABEL_40;
  }
  uint64_t v13 = *(void *)(v20[0] + 112);
  if (v13)
  {
    if (v13 != *(void *)(v4 + 616))
    {
      if (dword_1E9350BF0) {
        goto LABEL_38;
      }
      goto LABEL_40;
    }
  }
  else if (*(void *)(DerivedStorage + 1464) != *(void *)(v4 + 616))
  {
    if (dword_1E9350BF0) {
      goto LABEL_38;
    }
    goto LABEL_40;
  }
  if (itemfig_shouldEnableSpatializationForTrack(a1, *(unsigned int *)(DerivedStorage + 996)) != *(unsigned char *)(v4 + 624))
  {
    if (dword_1E9350BF0)
    {
LABEL_38:
      uint64_t v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
      goto LABEL_39;
    }
LABEL_40:
    uint64_t v15 = 0;
    goto LABEL_41;
  }
  if (FPSupport_AudioProcessingUnitsConfigurationsAreDifferent())
  {
    if (dword_1E9350BF0) {
      goto LABEL_38;
    }
    goto LABEL_40;
  }
  if (dword_1E9350BF0)
  {
    CFBooleanRef v17 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
    uint64_t v15 = 1;
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  else
  {
    uint64_t v15 = 1;
  }
LABEL_41:
  if (cf) {
    CFRelease(cf);
  }
  if (v18) {
    CFRelease(v18);
  }
  return v15;
}

BOOL playerfig_UpdateAudioSessionPreferredDeviceFormat()
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 456));
  uint64_t v1 = *(const void **)(DerivedStorage + 464);
  if (!v1)
  {
    MEMORY[0x19970E930](*(void *)(DerivedStorage + 456));
    return 0;
  }
  CFTypeRef v2 = CFRetain(v1);
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 456));
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v3)
  {
    uint64_t v4 = *(unsigned int (**)(CFTypeRef, void, void, CFTypeRef *))(v3 + 48);
    if (v4)
    {
      uint64_t v5 = *MEMORY[0x1E4F76418];
      if (!v4(v2, *MEMORY[0x1E4F76418], *MEMORY[0x1E4F1CF80], &cf))
      {
        if (CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 504)) >= 1 && *(_DWORD *)(DerivedStorage + 60) == 2)
        {
          CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), 0);
          uint64_t v7 = CMBaseObjectGetDerivedStorage();
          if (!itemfig_assureBasicsReadyForInspection(ValueAtIndex))
          {
            uint64_t v8 = *(unsigned int *)(v7 + 996);
            if (v8)
            {
              uint64_t v34 = v5;
              int isTrackAC3 = itemfig_isTrackAC3((uint64_t)ValueAtIndex, v8);
              int isTrackAtmos = itemfig_isTrackAtmos((uint64_t)ValueAtIndex, *(unsigned int *)(v7 + 996));
              BOOL isTrackDecodable = itemfig_isTrackDecodable((uint64_t)ValueAtIndex, *(unsigned int *)(v7 + 996));
              int isAC3PassthroughSupported = itemfig_isAC3PassthroughSupported();
              v36[0] = 0;
              int MaximumNumberOfSpatializedOutputChannels = itemfig_getMaximumNumberOfSpatializedOutputChannels((uint64_t)ValueAtIndex, v36);
              int v14 = v36[0];
              int isMATAtmosEnabled = playerfig_isMATAtmosEnabled();
              int canTrackPassthrough = itemfig_canTrackPassthrough((uint64_t)ValueAtIndex, *(unsigned int *)(v7 + 996));
              BOOL v17 = !isTrackDecodable;
              if (MaximumNumberOfSpatializedOutputChannels) {
                BOOL v18 = 1;
              }
              else {
                BOOL v18 = v14 < 3;
              }
              if (v18) {
                BOOL v17 = 1;
              }
              if (!isTrackAC3) {
                BOOL v17 = 0;
              }
              if (!canTrackPassthrough) {
                BOOL v17 = 0;
              }
              BOOL v20 = !v17 || isAC3PassthroughSupported == 0;
              BOOL v19 = (uint64_t *)MEMORY[0x1E4F75A28];
              if (!v20) {
                BOOL v19 = (uint64_t *)MEMORY[0x1E4F75A20];
              }
              if (isMATAtmosEnabled) {
                BOOL v20 = isTrackAtmos == 0;
              }
              else {
                BOOL v20 = 1;
              }
              if (!v20 && isTrackDecodable) {
                BOOL v19 = (uint64_t *)MEMORY[0x1E4F75A30];
              }
              uint64_t v22 = *v19;
              if (dword_1E9350BF0 >= 2)
              {
                os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              uint64_t v29 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v29)
              {
                unsigned int v30 = *(unsigned int (**)(CFTypeRef, uint64_t, uint64_t))(v29 + 56);
                if (v30)
                {
                  if (!v30(v2, v34, v22))
                  {
                    int v28 = FigCFEqual();
                    goto LABEL_44;
                  }
                }
              }
              unsigned int v31 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
          }
        }
        else
        {
          uint64_t v24 = *MEMORY[0x1E4F75A28];
          if (!FigCFEqual())
          {
            if (dword_1E9350BF0 >= 2)
            {
              uint64_t v25 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            uint64_t v26 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v26)
            {
              uint64_t v27 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t))(v26 + 56);
              if (v27)
              {
                int v28 = v27(v2, v5, v24);
LABEL_44:
                BOOL v23 = v28 == 0;
                goto LABEL_47;
              }
            }
          }
        }
      }
    }
  }
  BOOL v23 = 0;
LABEL_47:
  CFRelease(v2);
  if (cf) {
    CFRelease(cf);
  }
  return v23;
}

uint64_t playerfig_UpdateAudioSessionPreferredDeviceSampleRate()
{
  sizeOut[16] = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  CMAudioFormatDescriptionRef desc = 0;
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 456));
  uint64_t v1 = *(const void **)(DerivedStorage + 464);
  if (!v1)
  {
    MEMORY[0x19970E930](*(void *)(DerivedStorage + 456));
    goto LABEL_9;
  }
  CFTypeRef v2 = CFRetain(v1);
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 456));
  if (!v2)
  {
LABEL_9:
    uint64_t v5 = 0;
    goto LABEL_37;
  }
  if (CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 504)) < 1) {
    goto LABEL_31;
  }
  CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), 0);
  uint64_t v4 = CMBaseObjectGetDerivedStorage();
  if (itemfig_assureBasicsReadyForInspection(ValueAtIndex)) {
    goto LABEL_31;
  }
  uint64_t v5 = *(unsigned int *)(v4 + 996);
  if (!v5)
  {
LABEL_32:
    CFNumberRef v13 = 0;
    goto LABEL_33;
  }
  uint64_t v6 = *(void *)(v4 + 968);
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v8 = v7 ? v7 : 0;
  uint64_t v9 = *(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *, void))(v8 + 56);
  if (!v9 || v9(v6, v5, &cf, 0) || itemfig_copyFormatDescription((uint64_t)cf, (uint64_t *)&desc))
  {
LABEL_31:
    uint64_t v5 = 0;
    goto LABEL_32;
  }
  uint64_t v10 = desc;
  RichestDecodableFormat = CMAudioFormatDescriptionGetRichestDecodableFormat(desc);
  if (RichestDecodableFormat) {
    goto LABEL_19;
  }
  if (!itemfig_isTrackAC3((uint64_t)ValueAtIndex, *(unsigned int *)(v4 + 996)))
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_31;
  }
  sizeOut[0] = 0;
  FormatList = CMAudioFormatDescriptionGetFormatList(v10, sizeOut);
  if (!FormatList || !sizeOut[0])
  {
    FigSignalErrorAt();
    goto LABEL_31;
  }
  RichestDecodableFormat = FormatList;
LABEL_19:
  CFNumberRef v13 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberFloat64Type, RichestDecodableFormat);
  if (*(unsigned char *)(DerivedStorage + 1104))
  {
    if (dword_1E9350BF0 < 2)
    {
LABEL_30:
      uint64_t v5 = 0;
      goto LABEL_33;
    }
LABEL_29:
    BOOL v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_30;
  }
  if (dword_1E9350BF0 >= 2)
  {
    int v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (!v16) {
    goto LABEL_29;
  }
  BOOL v17 = *(unsigned int (**)(CFTypeRef, void, CFNumberRef))(v16 + 56);
  if (!v17 || v17(v2, *MEMORY[0x1E4F76440], v13)) {
    goto LABEL_29;
  }
  uint64_t v5 = 1;
LABEL_33:
  CFRelease(v2);
  if (cf) {
    CFRelease(cf);
  }
  if (v13) {
    CFRelease(v13);
  }
LABEL_37:
  if (desc) {
    CFRelease(desc);
  }
  return v5;
}

BOOL playerfig_UpdateAudioSessionPreferredNumberOfAudioOutputChannels(uint64_t a1)
{
  cf[23] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf[0] = 0;
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 456));
  uint64_t v3 = *(const void **)(DerivedStorage + 464);
  if (!v3)
  {
    MEMORY[0x19970E930](*(void *)(DerivedStorage + 456));
    goto LABEL_12;
  }
  CFTypeRef v4 = CFRetain(v3);
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 456));
  if (!v4)
  {
LABEL_12:
    BOOL v10 = 0;
    goto LABEL_13;
  }
  if (CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 504)) < 1
    || (CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), 0),
        uint64_t v6 = CMBaseObjectGetDerivedStorage(),
        itemfig_assureBasicsReadyForInspection(ValueAtIndex))
    || (uint64_t v7 = *(unsigned int *)(v6 + 996), !v7))
  {
    CFRelease(v4);
    goto LABEL_12;
  }
  TrackAudioChannelCFIndex Count = itemfig_getTrackAudioChannelCount((uint64_t)ValueAtIndex, v7);
  int v22 = 2;
  int v23 = TrackAudioChannelCount;
  uint64_t valuePtr = 0;
  if (playerfig_getDeviceMaximumNumberOfPhysicalOutputChannels(a1, &v22, (int *)&valuePtr)) {
    goto LABEL_28;
  }
  if (v22 <= 2)
  {
    if (dword_1E9350BF0 < 2)
    {
LABEL_30:
      BOOL v10 = 0;
      CFNumberRef v17 = 0;
      goto LABEL_31;
    }
LABEL_9:
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_30;
  }
  if (valuePtr == 1)
  {
    if (dword_1E9350BF0 < 2) {
      goto LABEL_30;
    }
    goto LABEL_9;
  }
  if (TrackAudioChannelCount > v22) {
    int v23 = v22;
  }
  uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (!v12
    || (CFNumberRef v13 = *(unsigned int (**)(CFTypeRef, void, void, CFTypeRef *))(v12 + 48)) == 0
    || (uint64_t v14 = *MEMORY[0x1E4F76490],
        CFAllocatorRef v15 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80],
        v13(v4, *MEMORY[0x1E4F76490], *MEMORY[0x1E4F1CF80], cf)))
  {
LABEL_28:
    CFNumberRef v17 = 0;
LABEL_29:
    BOOL v10 = 0;
    goto LABEL_31;
  }
  if (cf[0]) {
    CFNumberGetValue((CFNumberRef)cf[0], kCFNumberSInt32Type, (char *)&valuePtr + 4);
  }
  if (dword_1E9350BF0 >= 2)
  {
    uint64_t v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CFNumberRef v17 = CFNumberCreate(v15, kCFNumberSInt32Type, &v23);
  uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (!v18) {
    goto LABEL_29;
  }
  BOOL v19 = *(unsigned int (**)(CFTypeRef, uint64_t, CFNumberRef))(v18 + 56);
  if (!v19 || v19(v4, v14, v17)) {
    goto LABEL_29;
  }
  int v20 = v23;
  *(_DWORD *)(DerivedStorage + 928) = v23;
  BOOL v10 = HIDWORD(valuePtr) != v20;
LABEL_31:
  CFRelease(v4);
  if (v17) {
    CFRelease(v17);
  }
LABEL_13:
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  return v10;
}

void itemfig_InformStakeholdersOfBestAvailableAudioContentType(uint64_t a1)
{
  if (a1)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    uint64_t v3 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v3)
    {
      CFTypeRef v4 = (const void *)v3;
      uint64_t v5 = CMBaseObjectGetDerivedStorage();
      if (*(unsigned char *)(DerivedStorage + 1288))
      {
        uint64_t v6 = v5;
        uint64_t v7 = *(unsigned int *)(DerivedStorage + 996);
        if (v7)
        {
          BOOL v8 = (int)itemfig_getTrackAudioChannelCount(a1, v7) > 2;
          int isTrackAtmos = itemfig_isTrackAtmos(a1, *(unsigned int *)(DerivedStorage + 996));
        }
        else
        {
          BOOL v8 = 0;
          int isTrackAtmos = 0;
        }
        MEMORY[0x19970E910](*(void *)(v6 + 456));
        BOOL v10 = *(const void **)(v6 + 464);
        if (v10)
        {
          CFTypeRef v11 = CFRetain(v10);
          MEMORY[0x19970E930](*(void *)(v6 + 456));
          if (v11)
          {
            uint64_t v12 = (void *)MEMORY[0x1E4F768E8];
            if (isTrackAtmos) {
              uint64_t v12 = (void *)MEMORY[0x1E4F768E0];
            }
            if (v8) {
              CFNumberRef v13 = v12;
            }
            else {
              CFNumberRef v13 = (void *)MEMORY[0x1E4F768F0];
            }
            uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v14)
            {
              CFAllocatorRef v15 = *(void (**)(CFTypeRef, void, void))(v14 + 56);
              if (v15) {
                v15(v11, *MEMORY[0x1E4F75F50], *v13);
              }
            }
            CFRelease(v11);
          }
        }
        else
        {
          MEMORY[0x19970E930](*(void *)(v6 + 456));
        }
      }
      CFRelease(v4);
    }
    else
    {
      FigSignalErrorAt();
    }
  }
}

void *itemfig_renderTripleCopy(const __CFAllocator *a1, uint64_t a2)
{
  uint64_t v3 = CFAllocatorAllocate(a1, 40, 0);
  *(_DWORD *)uint64_t v3 = *(_DWORD *)a2;
  CFTypeRef v4 = *(CFTypeRef *)(a2 + 8);
  if (v4) {
    CFTypeRef v4 = CFRetain(v4);
  }
  v3[1] = v4;
  *((_DWORD *)v3 + 4) = *(_DWORD *)(a2 + 16);
  CFTypeRef v5 = *(CFTypeRef *)(a2 + 24);
  if (v5) {
    CFTypeRef v5 = CFRetain(v5);
  }
  v3[3] = v5;
  CFTypeRef v6 = *(CFTypeRef *)(a2 + 32);
  if (v6) {
    CFTypeRef v6 = CFRetain(v6);
  }
  v3[4] = v6;
  return v3;
}

void itemfig_renderTripleRelease(CFAllocatorRef allocator, void *ptr)
{
  CFTypeRef v4 = (const void *)ptr[1];
  if (v4) {
    CFRelease(v4);
  }
  CFTypeRef v5 = (const void *)ptr[3];
  if (v5) {
    CFRelease(v5);
  }
  CFTypeRef v6 = (const void *)ptr[4];
  if (v6) {
    CFRelease(v6);
  }

  CFAllocatorDeallocate(allocator, ptr);
}

__CFString *itemfig_renderTripleCopyDescription(unsigned int *a1)
{
  CFDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  uint64_t v3 = (const void *)FigCFCopyCompactDescription();
  CFTypeRef v4 = (const void *)FigCFCopyCompactDescription();
  CFStringAppendFormat(Mutable, 0, @"<RenderTriple: %p trackID: %d extractionID: %d renderPipeline: %@ options: %@>", a1, *a1, a1[4], v3, v4);
  if (v3) {
    CFRelease(v3);
  }
  if (v4) {
    CFRelease(v4);
  }
  return Mutable;
}

uint64_t itemfig_renderTripleEqual(_DWORD *a1, _DWORD *a2)
{
  if (*a1 != *a2 || a1[4] != a2[4]) {
    return 0;
  }
  uint64_t result = FigCFEqual();
  if (result)
  {
    uint64_t result = FigCFEqual();
    if (result) {
      return FigCFEqual() != 0;
    }
  }
  return result;
}

void playerfig_AudioDecoderError(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, const void *a5)
{
  if (a2)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (!*(unsigned char *)DerivedStorage)
    {
      if (*(void *)(DerivedStorage + 512))
      {
        if (!*(void *)(DerivedStorage + 568)
          || a5
          && (CFTypeID v8 = CFGetTypeID(a5), v8 == CFDictionaryGetTypeID())
          && (CFNumberRef v9 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a5, @"OSStatus")) != 0
          && (CFNumberRef v10 = v9, v11 = CFGetTypeID(v9), v11 == CFNumberGetTypeID())
          && (int valuePtr = 0,
              CFNumberGetValue(v10, kCFNumberSInt32Type, &valuePtr),
              (valuePtr + 41999) >= 0xFFFFFC18))
        {
          CFNumberRef Value = (const __CFNumber *)FigCFDictionaryGetValue();
          playerfig_TryFailingCurrentItemForRenderPipelineError(a2, Value);
        }
      }
    }
  }
}

void playerfig_AudioPlayResourcePreempted(uint64_t a1, const void *a2)
{
  if (a2)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (!*(unsigned char *)DerivedStorage)
    {
      if (*(void *)(DerivedStorage + 512))
      {
        playerfig_pauseForInternalReason(a2, 0x1Eu);
        long long v6 = *MEMORY[0x1E4F1F9F8];
        uint64_t v7 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
        long long v4 = v6;
        uint64_t v5 = v7;
        playerfig_stopResetDisturbReprepareAndResumeWithTransaction(a2, (uint64_t)&v6, (uint64_t)&v4, 0);
      }
    }
  }
}

uint64_t playerfig_latencyChanged()
{
  CMBaseObjectGetDerivedStorage();

  return FigDeferNotificationToDispatchQueue();
}

void playerfig_RenderPipelineFailedToStart(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  int valuePtr = 0;
  if (a2)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (!*(unsigned char *)DerivedStorage)
    {
      uint64_t v8 = DerivedStorage;
      if (*(void *)(DerivedStorage + 512))
      {
        CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a5, @"OSStatus");
        if (Value
          && (CFNumberRef v10 = Value, v11 = CFGetTypeID(Value), v11 == CFNumberGetTypeID())
          && CFNumberGetValue(v10, kCFNumberSInt32Type, &valuePtr))
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        else
        {
          CFNumberRef v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          CFNumberRef v10 = 0;
        }
        if (!playerfig_TryFailingCurrentItemForRenderPipelineError(a2, v10)) {
          dispatch_async_f(*(dispatch_queue_t *)(v8 + 96), a2, (dispatch_function_t)playerfig_RenderPipelineFailedToStart_setRateForInternalReason_0_f);
        }
      }
    }
  }
}

uint64_t playerfig_renderPipelineRequiresManualRestart(uint64_t a1, const void *a2)
{
  if (a2)
  {
    CMBaseObjectGetDerivedStorage();
    CFRetain(a2);
    return FigDeferNotificationToDispatchQueue();
  }
  return result;
}

uint64_t playerfig_renderPipelineWantsRebuildToIncreaseFidelity(uint64_t a1, const void *a2)
{
  CMBaseObjectGetDerivedStorage();
  if (a2) {
    CFRetain(a2);
  }

  return FigDeferNotificationToDispatchQueue();
}

uint64_t playerfig_renderPipelineDeviceHasDisconnected(uint64_t a1, const void *a2)
{
  CMBaseObjectGetDerivedStorage();
  if (a2) {
    CFRetain(a2);
  }

  return FigDeferNotificationToDispatchQueue();
}

uint64_t playerfig_TryFailingCurrentItemForRenderPipelineError(const void *a1, const __CFNumber *a2)
{
  FailedNotificationPayloadWithContentStreaCFIndex m = a2;
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  values = a2;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = FigReentrantMutexTryLock();
  if (!result) {
    return result;
  }
  if (CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 504)) <= 0)
  {
    MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 496));
    return 0;
  }
  CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), 0);
  CFRetain(ValueAtIndex);
  MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 496));
  if (!ValueAtIndex) {
    return 0;
  }
  uint64_t v7 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  if (FailedNotificationPayloadWithContentStream)
  {
    CFTypeID TypeID = CFNumberGetTypeID();
    if (TypeID == CFGetTypeID(FailedNotificationPayloadWithContentStream))
    {
      CFNumberRef v9 = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
      if (*(unsigned char *)v9)
      {
        FailedNotificationPayloadWithContentStreaCFIndex m = CFDictionaryCreate(*v7, (const void **)&kFigPlaybackItemParameter_Result, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      }
      else
      {
        CFNumberRef v10 = v9;
        valuePtr[0] = 0;
        CFNumberGetValue(FailedNotificationPayloadWithContentStream, kCFNumberSInt32Type, valuePtr);
        FailedNotificationPayloadWithContentStreaCFIndex m = itemfig_createFailedNotificationPayloadWithContentStream(v10[16], FailedNotificationPayloadWithContentStream);
        CFNumberRef Value = (__CFError *)CFDictionaryGetValue(FailedNotificationPayloadWithContentStream, @"CFError");
        itemfig_reportingAgentReportError((uint64_t)ValueAtIndex, Value, @"CoreMediaErrorDomain", @"Failed to play to end due to render pipeline error", valuePtr[0]);
      }
    }
    else
    {
      FailedNotificationPayloadWithContentStreaCFIndex m = 0;
    }
  }
  os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  if (a1) {
    CFRetain(a1);
  }
  CMNotificationCenterGetDefaultLocalCenter();
  dispatch_get_global_queue(0, 0);
  FigDeferNotificationToDispatchQueue();
  if (FailedNotificationPayloadWithContentStream) {
    CFRelease(FailedNotificationPayloadWithContentStream);
  }
  return 1;
}

__CFDictionary *itemfig_createFailedNotificationPayloadWithContentStream(CFTypeRef a1, __CFDictionary *a2)
{
  FailedNotificationPayload = a2;
  CFTypeRef cf = 0;
  if (a2)
  {
    if (a1)
    {
      uint64_t CMBaseObject = CMByteStreamGetCMBaseObject();
      uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v4) {
        uint64_t v5 = v4;
      }
      else {
        uint64_t v5 = 0;
      }
      long long v6 = *(void (**)(uint64_t, void, void, CFTypeRef *))(v5 + 48);
      if (v6)
      {
        v6(CMBaseObject, *MEMORY[0x1E4F1FB50], *MEMORY[0x1E4F1CF80], &cf);
        a1 = cf;
      }
      else
      {
        a1 = 0;
      }
    }
    FailedNotificationPayload = itemfig_createFailedNotificationPayload(a1, FailedNotificationPayload);
    if (cf) {
      CFRelease(cf);
    }
  }
  return FailedNotificationPayload;
}

void itemfig_reportingAgentReportError(uint64_t a1, __CFError *a2, CFErrorDomain a3, CFStringRef a4, int a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    uint64_t v10 = DerivedStorage;
    if (a2)
    {
      CFStringRef v11 = CFErrorCopyDescription(a2);
      DomaiCFIndex n = CFErrorGetDomain(a2);
    }
    else
    {
      CFStringRef v11 = 0;
      DomaiCFIndex n = 0;
    }
    MEMORY[0x19970E910](*(void *)(v10 + 1896));
    uint64_t v13 = *(void *)(v10 + 1904);
    if (Domain) {
      a3 = Domain;
    }
    if (v13)
    {
      uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v15 = v14 ? v14 : 0;
      uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t, CFErrorDomain, void))(v15 + 48);
      if (v16) {
        v16(v13, 0x1EE582B78, 0x1EE5840F8, a3, 0);
      }
    }
    uint64_t v17 = *(void *)(v10 + 1904);
    if (v11) {
      a4 = v11;
    }
    if (v17)
    {
      uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v18) {
        uint64_t v19 = v18;
      }
      else {
        uint64_t v19 = 0;
      }
      int v20 = *(void (**)(uint64_t, uint64_t, uint64_t, CFStringRef, void))(v19 + 48);
      if (v20) {
        v20(v17, 0x1EE582B78, 0x1EE5840D8, a4, 0);
      }
      uint64_t v21 = *(void *)(v10 + 1904);
      if (v21)
      {
        uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v22) {
          uint64_t v23 = v22;
        }
        else {
          uint64_t v23 = 0;
        }
        uint64_t v24 = *(void (**)(uint64_t, uint64_t, uint64_t, void, void))(v23 + 56);
        if (v24) {
          v24(v21, 0x1EE582B78, 0x1EE5840B8, a5, 0);
        }
        uint64_t v25 = *(void *)(v10 + 1904);
        if (v25)
        {
          uint64_t v26 = *(void *)(CMBaseObjectGetVTable() + 16);
          uint64_t v27 = v26 ? v26 : 0;
          int v28 = *(void (**)(uint64_t, uint64_t, uint64_t, void, void))(v27 + 8);
          if (v28) {
            v28(v25, 0x1EE582B78, 307, 0, 0);
          }
        }
      }
    }
    MEMORY[0x19970E930](*(void *)(v10 + 1896));
    if (v11)
    {
      CFRelease(v11);
    }
  }
}

void itemfig_playbackFailed(uint64_t a1, const __CFString *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = *(const void **)(DerivedStorage + 8);
  if (!*(unsigned char *)DerivedStorage)
  {
    uint64_t v5 = (CFArrayRef *)CMBaseObjectGetDerivedStorage();
    if (!*(unsigned char *)v5)
    {
      long long v6 = v5;
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
      uint64_t v7 = *((unsigned int *)v6 + 194);
      CFIndex Count = CFArrayGetCount(v6[63]);
      if (FigPlaybackGetEffectiveActionAtEnd(v7, Count))
      {
        uint64_t v9 = *((unsigned int *)v6 + 194);
        CFIndex v10 = CFArrayGetCount(v6[63]);
        if (FigPlaybackGetEffectiveActionAtEnd(v9, v10) == 1) {
          playerfig_pauseForInternalReason(v4, 3u);
        }
      }
      else
      {
        itemfig_removeFromPlayQueueIfAdvanceAtEnd(a2);
      }
    }
  }
  if (v4) {
    CFRelease(v4);
  }
  if (a2)
  {
    CFRelease(a2);
  }
}

__CFDictionary *itemfig_createFailedNotificationPayload(const void *a1, const void *a2)
{
  if (!a2) {
    return 0;
  }
  CFDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v5 = Mutable;
  if (Mutable)
  {
    CFDictionarySetValue(Mutable, @"Result", a2);
    if (a1) {
      CFDictionarySetValue(v5, @"CFError", a1);
    }
  }
  return v5;
}

void itemfig_removeFromPlayQueueIfAdvanceAtEnd(const __CFString *a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  uint64_t v3 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  uint64_t v4 = CMBaseObjectGetDerivedStorage();
  if (dword_1E9350BF0)
  {
    int v8 = 0;
    v7[1] = 0;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (v3) {
    BOOL v6 = *DerivedStorage == 0;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6)
  {
    v7[0] = 0;
    MEMORY[0x19970E290](*(void *)(v4 + 496));
    if (DerivedStorage[1] && !*(_DWORD *)(v4 + 776)) {
      playerfig_gracefullyRemoveItemFromPlayQueue(v3, a1, 0, 0, 1, v7);
    }
    MEMORY[0x19970E2B0](*(void *)(v4 + 496));
    if (v7[0])
    {
      long long v11 = *MEMORY[0x1E4F1F9F8];
      uint64_t v12 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
      long long v9 = v11;
      uint64_t v10 = v12;
      playerfig_stopResetDisturbReprepareAndResumeWithTransaction(v3, (uint64_t)&v11, (uint64_t)&v9, 0);
      playerfig_postDeferredCurrentItemDidChangeNotificationWithReason(v3, @"ReasonAdvanceDueToError");
    }
    playerfig_updatePlaybackStateAndBossRate(v3, 7, 0);
    goto LABEL_14;
  }
  if (v3) {
LABEL_14:
  }
    CFRelease(v3);
}

uint64_t playerfig_pauseForInternalReason(const void *a1, unsigned int a2)
{
  float valuePtr = 0.0;
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFTypeRef cf = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberFloat32Type, &valuePtr);
  if (cf)
  {
    CFDictionaryRef v5 = CFDictionaryCreate(v4, (const void **)&kFigPlayerParameter_Remote_NewRate, &cf, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (v5)
    {
      CFDictionaryRef v6 = v5;
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
      CFRelease(v6);
    }
    CFRelease(cf);
  }
  return playerfig_setRateForReason(a1, a2, valuePtr);
}

void playerfig_postDeferredCurrentItemDidChangeNotificationWithReason(const void *a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 496));
  if (CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 504)) >= 1
    && (CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), 0)) != 0)
  {
    CFTypeRef v6 = CFRetain(ValueAtIndex);
  }
  else
  {
    CFTypeRef v6 = 0;
  }
  MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 496));
  if (*MEMORY[0x1E4F1EBA8] == 1)
  {
    if (a1) {
      uint64_t v13 = (const char *)(CMBaseObjectGetDerivedStorage() + 944);
    }
    else {
      uint64_t v13 = "";
    }
    strncpy(__dst, v13, 8uLL);
    if (v6) {
      uint64_t v14 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
    }
    else {
      uint64_t v14 = "";
    }
    strncpy(__dst, v14, 8uLL);
    kdebug_trace();
  }
  NotificationPayloadForProperties = playerfig_createNotificationPayloadForProperties(a1, (uint64_t)v6, v7, v8, v9, v10, v11, v12, @"VideoSlotArray", @"VideoTrackMatrix");
  uint64_t v16 = NotificationPayloadForProperties;
  if (NotificationPayloadForProperties)
  {
    if (a2) {
      CFDictionarySetValue(NotificationPayloadForProperties, @"ReasonForCurrentItemDidChange", a2);
    }
    if (v6)
    {
      *(_OWORD *)__dst = *MEMORY[0x1E4F1F9F8];
      uint64_t v18 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
      itemfig_getDurationIfReady((uint64_t)v6, (uint64_t)__dst);
      if ((__dst[12] & 0x1D) == 1) {
        FigCFDictionarySetCMTime();
      }
    }
  }
  else
  {
    FigSignalErrorAt();
  }
  CMNotificationCenterGetDefaultLocalCenter();
  FigDispatchAsyncPostNotification();
  if (v16) {
    CFRelease(v16);
  }
  if (v6) {
    CFRelease(v6);
  }
}