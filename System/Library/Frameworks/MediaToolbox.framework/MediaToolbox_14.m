uint64_t figAssetExportSession_totalSizeOfTracksIsWithinFileLengthLimit(uint64_t a1, CFArrayRef theArray, CFDictionaryRef theDict)
{
  CFNumberRef Value;
  BOOL v6;
  CFIndex Count;
  CFIndex v8;
  CFIndex v9;
  uint64_t v10;
  uint64_t v11;
  const void *ValueAtIndex;
  uint64_t CMBaseObject;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, __CFString *, uint64_t, CFNumberRef *);
  CFNumberRef number;
  uint64_t v19;
  uint64_t valuePtr;

  valuePtr = 0;
  if (theDict)
  {
    Value = (const __CFNumber *)CFDictionaryGetValue(theDict, @"maxFileSize");
    if (Value) {
      CFNumberGetValue(Value, kCFNumberSInt64Type, &valuePtr);
    }
  }
  if (*(void *)(a1 + 328))
  {
    valuePtr = *(void *)(a1 + 328);
    if (!theArray) {
      return 1;
    }
  }
  else
  {
    if (valuePtr) {
      v6 = theArray == 0;
    }
    else {
      v6 = 1;
    }
    if (v6) {
      return 1;
    }
  }
  Count = CFArrayGetCount(theArray);
  if (Count < 1) {
    return 1;
  }
  v8 = Count;
  v9 = 0;
  v10 = 0;
  v11 = *MEMORY[0x1E4F1CF80];
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(theArray, v9);
    number = 0;
    v19 = 0;
    CMBaseObject = FigAssetTrackGetCMBaseObject(ValueAtIndex);
    v14 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v14) {
      v15 = v14;
    }
    else {
      v15 = 0;
    }
    v16 = *(void (**)(uint64_t, __CFString *, uint64_t, CFNumberRef *))(v15 + 48);
    if (v16) {
      v16(CMBaseObject, @"TotalSampleDataLength", v11, &number);
    }
    if (number)
    {
      CFNumberGetValue(number, kCFNumberSInt64Type, &v19);
      CFRelease(number);
    }
    v10 += v19;
    if (v10 > valuePtr) {
      break;
    }
    if (v8 == ++v9) {
      return 1;
    }
  }
  return 0;
}

const void *figAssetExportSession_isAudioMixdownRequired(const void *result, CFErrorRef *a2)
{
  if (result)
  {
    uint64_t v5 = 0;
    int Preset = FigAudioCompressionOptionsGetPreset(result, &v5, 0, 0, 0);
    if (Preset)
    {
      if (a2)
      {
        CFErrorRef v4 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], @"FigAssetExportSession_ErrorDomain", Preset, 0);
        result = 0;
        *a2 = v4;
      }
      else
      {
        return 0;
      }
    }
    else
    {
      return (const void *)(*(_DWORD *)(v5 + 28) != 0);
    }
  }
  return result;
}

uint64_t figAssetExportSession_GetVideoCodecType(uint64_t a1)
{
  uint64_t result = 1851876449;
  if (a1)
  {
    FigCFDictionaryGetInt32IfPresent();
    FigCFDictionaryGetBooleanIfPresent();
    return 1851876449;
  }
  return result;
}

void figAssetExportSession_createProfileLevel(uint64_t a1, uint64_t a2, const __CFArray *a3, void *a4)
{
  CFTypeRef cf = 0;
  if ((!a1
     || (!FigCFEqual()
      || !FigVideoCompositorCopyDeviceSpecificCompositorName(1, &cf)
      && (FigCFEqual() || FigCFEqual()))
     && !FigCFEqual()
     && !FigCFEqual())
    && figAssetExportSession_GetVideoCodecType(a2) == 1752589105)
  {
    int MaximumBitsPerComponent = FigExportSettings_GetMaximumBitsPerComponent(a3);
    if (a4)
    {
      if (MaximumBitsPerComponent >= 10)
      {
        CFTypeRef v8 = (CFTypeRef)*MEMORY[0x1E4F452A8];
        if (*MEMORY[0x1E4F452A8]) {
          CFTypeRef v8 = CFRetain(v8);
        }
        *a4 = v8;
      }
    }
  }
  if (cf) {
    CFRelease(cf);
  }
}

__CFDictionary *figAssetExportSession_createVideoEncoderSpecification(const void *a1, const __CFDictionary *a2, const void *a3)
{
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (a2)
  {
    Value = CFDictionaryGetValue(a2, @"usageMode");
    if (Value) {
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F44B68], Value);
    }
  }
  if (a1)
  {
    v9 = Mutable;
    v10 = a1;
  }
  else
  {
    v10 = (const void *)*MEMORY[0x1E4F1CFD0];
    v9 = Mutable;
  }
  CFDictionaryAddValue(v9, (const void *)*MEMORY[0x1E4F45648], v10);
  if (a3)
  {
    v11 = CFDictionaryCreateMutable(v6, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFDictionaryAddValue(v11, (const void *)*MEMORY[0x1E4F44AA0], a3);
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F45670], v11);
    if (v11) {
      CFRelease(v11);
    }
  }
  return Mutable;
}

void figAssetExportSession_applyFileSize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(CMBaseObjectGetDerivedStorage() + 328))
  {
    uint64_t SInt64 = FigCFNumberCreateSInt64();
    if (SInt64)
    {
      uint64_t v5 = (const void *)SInt64;
      uint64_t FigBaseObject = FigRemakerGetFigBaseObject(a3);
      uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v7) {
        uint64_t v8 = v7;
      }
      else {
        uint64_t v8 = 0;
      }
      v9 = *(void (**)(uint64_t, __CFString *, const void *))(v8 + 56);
      if (v9) {
        v9(FigBaseObject, @"Remaker_MaxFileSize", v5);
      }
      CFRelease(v5);
    }
  }
  else
  {
    FigCFDictionaryGetInt64IfPresent();
  }
}

BOOL figAssetExportSession_isAlternateTrack(uint64_t a1)
{
  CFTypeRef cf = 0;
  uint64_t CMBaseObject = FigAssetTrackGetCMBaseObject(a1);
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  CFErrorRef v4 = *(void (**)(uint64_t, __CFString *, void, CFTypeRef *))(v3 + 48);
  if (v4) {
    v4(CMBaseObject, @"AlternateGroupID", *MEMORY[0x1E4F1CF80], &cf);
  }
  uint64_t UInt64 = FigCFNumberGetUInt64();
  if (cf) {
    CFRelease(cf);
  }
  return UInt64 != 0;
}

uint64_t figAssetExportSession_handleAudioAlternateTrack(int a1, uint64_t a2)
{
  CFTypeRef cf = (CFTypeRef)*MEMORY[0x1E4F1CFC8];
  uint64_t CMBaseObject = FigAssetTrackGetCMBaseObject(a2);
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(void (**)(uint64_t, __CFString *, void, CFTypeRef *))(v6 + 48);
  if (v7) {
    v7(CMBaseObject, @"IsEnabled", *MEMORY[0x1E4F1CF80], &cf);
  }
  int v13 = 0;
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  v10 = *(void (**)(uint64_t, int *, void))(v9 + 32);
  if (v10) {
    v10(a2, &v13, 0);
  }
  if (a1 == 1)
  {
    FigCFArrayAppendInt32();
    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v11 = FigSignalErrorAt();
  }
  if (cf) {
    CFRelease(cf);
  }
  return v11;
}

uint64_t FigRemakerAddAudioMixdownTrackWithPreset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 104);
  if (!v12) {
    return 4294954514;
  }

  return v12(a1, a2, a3, a4, a5);
}

void figAssetExportSession_transferTrackProperties(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeRef v45 = 0;
  CFTypeRef v46 = 0;
  uint64_t CMBaseObject = FigAssetGetCMBaseObject(*(void *)(a1 + 16));
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  int v44 = 0;
  uint64_t v11 = *(unsigned int (**)(uint64_t, __CFString *, void, CFTypeRef *))(v10 + 48);
  if (v11)
  {
    uint64_t v12 = *MEMORY[0x1E4F1CF80];
    if (!v11(CMBaseObject, @"assetProperty_FormatReader", *MEMORY[0x1E4F1CF80], &v45))
    {
      CFTypeRef v13 = v45;
      uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v15 = v14 ? v14 : 0;
      v16 = *(unsigned int (**)(CFTypeRef, uint64_t, CFTypeRef *, int *))(v15 + 56);
      if (v16)
      {
        if (!v16(v13, a3, &v46, &v44))
        {
          CFTypeRef cf = 0;
          uint64_t FigBaseObject = FigTrackReaderGetFigBaseObject(v46);
          uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v18) {
            uint64_t v19 = v18;
          }
          else {
            uint64_t v19 = 0;
          }
          v20 = *(void (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v19 + 48);
          if (v20) {
            v20(FigBaseObject, @"TrackLanguageCode", v12, &cf);
          }
          CFTypeRef v21 = cf;
          if (cf)
          {
            uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v22) {
              uint64_t v23 = v22;
            }
            else {
              uint64_t v23 = 0;
            }
            v24 = *(void (**)(uint64_t, uint64_t, __CFString *, CFTypeRef))(v23 + 40);
            if (v24) {
              v24(a2, a4, @"LanguageTag", v21);
            }
            CFRelease(cf);
          }
          CFTypeRef v42 = 0;
          uint64_t v25 = FigTrackReaderGetFigBaseObject(v46);
          uint64_t v26 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v26) {
            uint64_t v27 = v26;
          }
          else {
            uint64_t v27 = 0;
          }
          v28 = *(void (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v27 + 48);
          if (v28)
          {
            v28(v25, @"ExtendedLanguageTagString", v12, &v42);
            CFTypeRef v29 = v42;
            if (v42)
            {
              uint64_t v30 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v30) {
                uint64_t v31 = v30;
              }
              else {
                uint64_t v31 = 0;
              }
              v32 = *(void (**)(uint64_t, uint64_t, __CFString *, CFTypeRef))(v31 + 40);
              if (v32) {
                v32(a2, a4, @"ExtendedLanguageTag", v29);
              }
              CFRelease(v42);
            }
          }
          if (*(_DWORD *)(a1 + 344) && v44 == 1936684398)
          {
            CFTypeRef v41 = 0;
            uint64_t v33 = FigTrackReaderGetFigBaseObject(v46);
            uint64_t v34 = *(void *)(CMBaseObjectGetVTable() + 8);
            uint64_t v35 = v34 ? v34 : 0;
            v36 = *(void (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v35 + 48);
            if (v36)
            {
              v36(v33, @"AlternateGroupID", v12, &v41);
              CFTypeRef v37 = v41;
              if (v41)
              {
                uint64_t v38 = *(void *)(CMBaseObjectGetVTable() + 16);
                if (v38) {
                  uint64_t v39 = v38;
                }
                else {
                  uint64_t v39 = 0;
                }
                v40 = *(void (**)(uint64_t, uint64_t, __CFString *, CFTypeRef))(v39 + 40);
                if (v40) {
                  v40(a2, a4, @"AlternateGroupID", v37);
                }
                CFRelease(v41);
              }
            }
          }
        }
      }
    }
  }
  if (v46) {
    CFRelease(v46);
  }
  if (v45) {
    CFRelease(v45);
  }
}

uint64_t FigRemakerAddVideoCompositionTrack(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, long long *a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, int a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v29 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v29) {
    uint64_t v30 = v29;
  }
  else {
    uint64_t v30 = 0;
  }
  uint64_t v31 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int, uint64_t, void, void, long long *, uint64_t, uint64_t, int, uint64_t, int, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v30 + 112);
  if (!v31) {
    return 4294954514;
  }
  long long v33 = *a11;
  uint64_t v34 = *((void *)a11 + 2);
  return v31(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, 0, 0, &v33, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21);
}

uint64_t figAssetExportSession_canPerformFastFrameRateConversionWithPreset(uint64_t a1, const __CFDictionary *a2, const void *a3)
{
  CMTime v17 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  unsigned int v16 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v6 = DerivedStorage;
  if (*(unsigned char *)(DerivedStorage + 280)
    || *(void *)(DerivedStorage + 184)
    || !FigCFEqual()
    || FigCFEqual())
  {
    goto LABEL_2;
  }
  if (!a2 || !CFDictionaryGetValue(a2, @"maxFrameRate"))
  {
    if ((*(_DWORD *)(v6 + 268) & 0x1D) != 1)
    {
      *(unsigned char *)(v6 + 280) = 1;
      goto LABEL_2;
    }
    CMTime v17 = *(CMTime *)(v6 + 256);
    if (a3) {
      goto LABEL_9;
    }
LABEL_15:
    FigSignalErrorAt();
    goto LABEL_2;
  }
  value.CMTime value = 0;
  FigCFDictionaryGetInt64IfPresent();
  FigCFDictionaryGetIntIfPresent();
  CMTimeMake(&v17, 0, 0);
  if (!a3) {
    goto LABEL_15;
  }
LABEL_9:
  CFTypeID v8 = CFGetTypeID(a3);
  uint64_t v9 = *(void *)(v6 + 16);
  int v10 = figAssetExportSession_IsAlphaPreset(*(void **)(v6 + 72));
  if (!remakerFamily_GetDefaultSourceVideoTrackFromAsset(v8, v9, v10, *(unsigned __int8 *)(v6 + 98), &v16)&& v16)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListener();
    *(unsigned char *)(v6 + 296) = 1;
    uint64_t v11 = v16;
    CMTime timescale = v17;
    uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v12) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = *(unsigned int (**)(const void *, uint64_t, CMTime *))(v13 + 128);
    if (v14)
    {
      CMTime value = timescale;
      if (!v14(a3, v11, &value))
      {
        dispatch_semaphore_wait(*(dispatch_semaphore_t *)(v6 + 304), 0xFFFFFFFFFFFFFFFFLL);
        FigNotificationCenterRemoveWeakListener();
      }
    }
  }
LABEL_2:
  *(unsigned char *)(v6 + 296) = 0;
  return *(unsigned __int8 *)(v6 + 280);
}

uint64_t FigRemakerAddPassthroughTrackWithOptions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 120);
  if (!v10) {
    return 4294954514;
  }

  return v10(a1, a2, a3, a4);
}

_DWORD *FAES_TrackMappingRetain(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t result = malloc_type_malloc(0xCuLL, 0x10000403E1C8BA9uLL);
  int v4 = *(_DWORD *)(a2 + 8);
  *(void *)uint64_t result = *(void *)a2;
  result[2] = v4;
  return result;
}

void FAES_TrackMappingRelease(int a1, void *a2)
{
  if (a2) {
    free(a2);
  }
}

CFStringRef FAES_TrackMappingCopyDescription(_DWORD *a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  long long v6 = 0u;
  long long v7 = 0u;
  *(_OWORD *)__str = 0u;
  long long v5 = 0u;
  snprintf(__str, 0x40uLL, "source trackID = %d, intermediate trackID = %d, mediaType = %c%c%c%c", *a1, a1[1], HIBYTE(a1[2]), BYTE2(a1[2]), BYTE1(a1[2]), a1[2]);
  CFAllocatorRef v1 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFStringEncoding SystemEncoding = CFStringGetSystemEncoding();
  return CFStringCreateWithCString(v1, __str, SystemEncoding);
}

float figAssetExportSession_getSourceVideoFrameRate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFTypeRef cf = 0;
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, CFTypeRef *))(v7 + 48);
  float v9 = 0.0;
  if (!v8) {
    return v9;
  }
  v8(a1, 1986618469, &cf);
  if (!cf) {
    return v9;
  }
  if (a2)
  {
    CMTime time = *(CMTime *)(a2 + 16);
    float v9 = 1.0 / CMTimeGetSeconds(&time);
    goto LABEL_8;
  }
  CFIndex Count = CFArrayGetCount((CFArrayRef)cf);
  if (Count >= 1)
  {
    CFIndex v12 = Count;
    CFIndex v13 = 0;
    uint64_t v14 = *MEMORY[0x1E4F1CF80];
    do
    {
      time.CMTime value = 0;
      float valuePtr = 0.0;
      CFTypeRef v23 = 0;
      if (a3)
      {
        uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v15) {
          uint64_t v16 = v15;
        }
        else {
          uint64_t v16 = 0;
        }
        uint64_t v18 = *(void (**)(uint64_t, uint64_t, CFTypeRef *))(v16 + 40);
        if (v18) {
          v18(a1, a3, &v23);
        }
      }
      else
      {
        ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)cf, v13);
        CFTypeRef v23 = ValueAtIndex;
        if (!ValueAtIndex) {
          goto LABEL_34;
        }
        CFRetain(ValueAtIndex);
      }
      if (v23)
      {
        uint64_t CMBaseObject = FigAssetTrackGetCMBaseObject(v23);
        uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v20) {
          uint64_t v21 = v20;
        }
        else {
          uint64_t v21 = 0;
        }
        uint64_t v22 = *(void (**)(uint64_t, __CFString *, uint64_t, CMTime *))(v21 + 48);
        if (v22) {
          v22(CMBaseObject, @"NominalFrameRate", v14, &time);
        }
        if (time.value)
        {
          CFNumberGetValue((CFNumberRef)time.value, kCFNumberFloat32Type, &valuePtr);
          CFRelease((CFTypeRef)time.value);
        }
        if (v9 <= valuePtr) {
          float v9 = valuePtr;
        }
        if (v23) {
          CFRelease(v23);
        }
        if (a3) {
          break;
        }
      }
LABEL_34:
      ++v13;
    }
    while (v12 != v13);
  }
LABEL_8:
  if (cf) {
    CFRelease(cf);
  }
  return v9;
}

CFDictionaryRef figAssetExportSession_CopyEffectiveColorProperties(uint64_t a1, const __CFDictionary *a2, const __CFArray *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (*(void *)(DerivedStorage + 184))
  {
    FigCFDictionarySetValue();
    FigCFDictionarySetValue();
    FigCFDictionarySetValue();
  }
  CFDictionaryRef v7 = FigExportSettings_CopyEffectiveColorPropertyForPresetAndInputOutputFormat(a2, a3, Mutable);
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v7;
}

void spatialFormatDescriptionExtensionApplierFunction(const void *a1, const void *a2, __CFDictionary *a3)
{
  v21[24] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *MEMORY[0x1E4F44950];
  v21[0] = *MEMORY[0x1E4F1EDC8];
  v21[1] = v3;
  uint64_t v4 = *MEMORY[0x1E4F44958];
  v21[2] = *MEMORY[0x1E4F1EDD0];
  v21[3] = v4;
  uint64_t v5 = *MEMORY[0x1E4F44948];
  v21[4] = *MEMORY[0x1E4F21618];
  v21[5] = v5;
  uint64_t v6 = *MEMORY[0x1E4F44940];
  v21[6] = *MEMORY[0x1E4F1EDC0];
  v21[7] = v6;
  uint64_t v7 = *MEMORY[0x1E4F44960];
  v21[8] = *MEMORY[0x1E4F1EDD8];
  v21[9] = v7;
  uint64_t v8 = *MEMORY[0x1E4F44B20];
  v21[10] = *MEMORY[0x1E4F1EE30];
  v21[11] = v8;
  uint64_t v9 = *MEMORY[0x1E4F44968];
  v21[12] = *MEMORY[0x1E4F1EDE0];
  v21[13] = v9;
  uint64_t v10 = *MEMORY[0x1E4F44AA8];
  v21[14] = *MEMORY[0x1E4F21648];
  v21[15] = v10;
  uint64_t v11 = *MEMORY[0x1E4F44BA0];
  v21[16] = *MEMORY[0x1E4F21668];
  v21[17] = v11;
  uint64_t v12 = *MEMORY[0x1E4F44BA8];
  v21[18] = *MEMORY[0x1E4F21670];
  v21[19] = v12;
  uint64_t v13 = *MEMORY[0x1E4F44B60];
  v21[20] = *MEMORY[0x1E4F21658];
  v21[21] = v13;
  uint64_t v14 = *MEMORY[0x1E4F44970];
  v21[22] = *MEMORY[0x1E4F1EDE8];
  v21[23] = v14;
  if (a1)
  {
    CFTypeID v18 = CFGetTypeID(a1);
    if (v18 == CFStringGetTypeID())
    {
      uint64_t v19 = 0;
      while (!CFEqual(a1, (CFTypeRef)v21[v19]))
      {
        v19 += 2;
        if (v19 == 24) {
          return;
        }
      }
      uint64_t v20 = (const void *)v21[v19 + 1];
      CFDictionarySetValue(a3, v20, a2);
    }
  }
}

CFArrayRef figAssetExportSession_CreateTemporalMetadataPresetBlacklistOnce(CFArrayRef *a1)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  v3[0] = xmmword_1E57A90E0;
  v3[1] = *(_OWORD *)&off_1E57A90F0;
  v3[2] = xmmword_1E57A9100;
  v3[3] = *(_OWORD *)off_1E57A9110;
  CFArrayRef result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)v3, 8, MEMORY[0x1E4F1D510]);
  *a1 = result;
  return result;
}

uint64_t RegisterFigAssetExportSessionClassOnce()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

CFStringRef assetExportSessionCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigAssetExportSession %p]", a1);
}

double figAssetExportSessionVideoCompositionInit(_OWORD *a1)
{
  double result = 0.0;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[1] = 0u;
  return result;
}

void figAssetExportSessionVideoCompositionFinalize(void *a1)
{
  uint64_t v2 = (const void *)a1[5];
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)a1[7];
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (const void *)a1[8];
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = (const void *)a1[10];
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v6 = (const void *)a1[11];
  if (v6) {
    CFRelease(v6);
  }
  uint64_t v7 = (const void *)a1[14];
  if (v7) {
    CFRelease(v7);
  }
  uint64_t v8 = (const void *)a1[15];
  if (v8) {
    CFRelease(v8);
  }
  uint64_t v9 = (const void *)a1[16];
  if (v9) {
    CFRelease(v9);
  }
  uint64_t v10 = (const void *)a1[21];
  if (v10) {
    CFRelease(v10);
  }
  uint64_t v11 = (const void *)a1[22];
  if (v11) {
    CFRelease(v11);
  }
  uint64_t v12 = (const void *)a1[23];
  if (v12)
  {
    CFRelease(v12);
  }
}

uint64_t figAssetExportSession_completePendingTaskWithError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return FigAssetExportSessionTaskCompleteWithError(a2, a3);
}

void FigAssetExportSessionTaskExecuteAndComplete(uint64_t a1)
{
  CFTypeRef cf = 0;
  if (FigAtomicCompareAndSwap32())
  {
    (*(void (**)(void, CFTypeRef *))(a1 + 32))(*(void *)(a1 + 48), &cf);
    (*(void (**)(void, CFTypeRef))(a1 + 40))(*(void *)(a1 + 48), cf);
    if (cf) {
      CFRelease(cf);
    }
  }
  else
  {
    FigSignalErrorAt();
  }
}

uint64_t FigAssetExportSessionTaskCompleteWithError(uint64_t a1, uint64_t a2)
{
  if (FigAtomicCompareAndSwap32())
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 40);
    uint64_t v4 = *(void *)(a1 + 48);
    return v5(v4, a2);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

CFDictionaryRef FigAssetExportSession_actualSettingForPreset(uint64_t a1, uint64_t a2, _OWORD *a3, CGSize *a4, __CFString *a5, uint64_t a6)
{
  if (FigCFEqual() || FigCFEqual())
  {
    CFTypeRef v12 = figAssetExportSession_CopySourceVideoTrack(a1, a2);
    if (figAssetExportSession_trackContainsStereoVideo((uint64_t)v12)) {
      a5 = @"AVAssetExportPresetHighestQuality";
    }
    if (v12) {
      CFRelease(v12);
    }
  }
  CFDictionaryRef v13 = (const __CFDictionary *)FigExportSettingsForExportPreset(a5);
  CFDictionaryRef v14 = v13;
  if (v13)
  {
    CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(v13, @"mediaTiers");
    if (Value)
    {
      CFArrayRef v16 = Value;
      double UntransformedSourceDimension = FigAssetExportSession_getUntransformedSourceDimension(a1, a2, a4);
      double v19 = v18;
      if (a6) {
        double v20 = (float)((float)(a6 - 30720) * 0.99);
      }
      else {
        double v20 = 9.1311384e18;
      }
      memset(&v46, 0, sizeof(v46));
      figAssetExportSession_getAssetDuration(a1, &v46);
      memset(&v45, 0, sizeof(v45));
      *(_OWORD *)&start.start.CMTime value = *MEMORY[0x1E4F1FA48];
      start.start.epoch = *(void *)(MEMORY[0x1E4F1FA48] + 16);
      CMTime duration = v46;
      CMTimeRangeMake(&otherRange, &start.start, &duration);
      long long v21 = a3[1];
      *(_OWORD *)&start.start.CMTime value = *a3;
      *(_OWORD *)&start.start.epoch = v21;
      *(_OWORD *)&start.duration.CMTime timescale = a3[2];
      CMTimeRangeGetIntersection(&v45, &start, &otherRange);
      int v22 = FigCFEqual();
      CFIndex Count = CFArrayGetCount(v16);
      if (Count >= 1)
      {
        CFIndex v23 = 0;
        CFDictionaryRef v24 = 0;
        uint64_t v39 = 0;
        CFDictionaryRef v40 = 0;
        double v25 = 0.0;
        uint64_t v26 = 0x7FFFFFFFFFFFFFFFLL;
        double v27 = 0.0;
        while (1)
        {
          CFArrayRef v28 = v16;
          CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v16, v23);
          uint64_t v30 = CFDictionaryGetValue(ValueAtIndex, @"Video");
          uint64_t v31 = CFDictionaryGetValue(ValueAtIndex, @"Audio");
          CMTimeValue v32 = 0;
          if (v30 && !v22)
          {
            start.start.CMTime value = 0;
            if (FigCFDictionaryGetInt64IfPresent()) {
              CMTimeValue v32 = start.start.value / 8;
            }
            else {
              CMTimeValue v32 = start.start.value;
            }
          }
          if (FigCFEqual()) {
            CMTimeValue v32 = (uint64_t)((double)v32 * 1.6);
          }
          if (v31) {
            uint64_t v33 = figAssetExportSession_computeAudioTrackByteRate((uint64_t)v31, 0);
          }
          else {
            uint64_t v33 = 0;
          }
          uint64_t v34 = v33 + v32;
          start.CMTimeRange start = v45.duration;
          if (CMTimeGetSeconds(&start.start) * (double)(v33 + v32) > v20) {
            goto LABEL_37;
          }
          if (v22)
          {
            uint64_t v35 = v39;
            CFDictionaryRef v36 = v40;
            if (v34 > v39)
            {
              CFDictionaryRef v36 = ValueAtIndex;
              uint64_t v35 = v34;
            }
            uint64_t v39 = v35;
            CFDictionaryRef v40 = v36;
            goto LABEL_37;
          }
          start.start.CMTime value = 0;
          *(void *)&start.start.CMTime timescale = 0;
          FigCFDictionaryGetCGFloatIfPresent();
          FigCFDictionaryGetCGFloatIfPresent();
          if (v40)
          {
            if (*(double *)&start.start.value < UntransformedSourceDimension) {
              goto LABEL_37;
            }
            double v37 = *(double *)&start.start.timescale;
            if (*(double *)&start.start.timescale < v19
              || *(double *)&start.start.value >= v27
              || *(double *)&start.start.timescale >= v25)
            {
              goto LABEL_37;
            }
          }
          else
          {
            double v37 = *(double *)&start.start.timescale;
          }
          CFDictionaryRef v40 = ValueAtIndex;
          double v27 = *(double *)&start.start.value;
          double v25 = v37;
LABEL_37:
          if (v34 < v26)
          {
            CFDictionaryRef v24 = ValueAtIndex;
            uint64_t v26 = v34;
          }
          ++v23;
          CFArrayRef v16 = v28;
          if (Count == v23) {
            goto LABEL_42;
          }
        }
      }
      CFDictionaryRef v40 = 0;
      CFDictionaryRef v24 = 0;
LABEL_42:
      if (v40) {
        return v40;
      }
      else {
        return v24;
      }
    }
  }
  return v14;
}

uint64_t figAssetExportSession_trackContainsStereoVideo(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  CFArrayRef theArray = 0;
  uint64_t CMBaseObject = FigAssetTrackGetCMBaseObject(a1);
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(void (**)(uint64_t, __CFString *, void, CFArrayRef *))(v3 + 48);
  if (!v4) {
    goto LABEL_11;
  }
  v4(CMBaseObject, @"FormatDescriptionArray", *MEMORY[0x1E4F1CF80], &theArray);
  if (!theArray) {
    return 0;
  }
  CFIndex Count = CFArrayGetCount(theArray);
  if (Count >= 1)
  {
    CFIndex v6 = Count;
    CFIndex v7 = 0;
    while (1)
    {
      CFArrayGetValueAtIndex(theArray, v7);
      if (FigVideoFormatDescriptionContainsStereoMultiviewVideo()) {
        break;
      }
      if (v6 == ++v7) {
        goto LABEL_11;
      }
    }
    uint64_t v8 = 1;
    goto LABEL_12;
  }
LABEL_11:
  uint64_t v8 = 0;
LABEL_12:
  if (theArray) {
    CFRelease(theArray);
  }
  return v8;
}

__n128 figAssetExportSession_getAssetDuration@<Q0>(uint64_t a1@<X0>, CMTime *a2@<X8>)
{
  CFDictionaryRef dictionaryRepresentation = 0;
  uint64_t v3 = MEMORY[0x1E4F1FA48];
  __n128 v12 = *(__n128 *)MEMORY[0x1E4F1FA48];
  *(_OWORD *)&a2->CMTime value = *MEMORY[0x1E4F1FA48];
  CMTimeEpoch v4 = *(void *)(v3 + 16);
  a2->epoch = v4;
  uint64_t CMBaseObject = FigAssetGetCMBaseObject(a1);
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v6) {
    uint64_t v8 = v6;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t, __CFString *, void, CFDictionaryRef *))(v8 + 48);
  if (v9)
  {
    int v10 = v9(CMBaseObject, @"Duration", *MEMORY[0x1E4F1CF80], &dictionaryRepresentation);
    CFDictionaryRef v11 = dictionaryRepresentation;
    if (!v10)
    {
      if (!dictionaryRepresentation)
      {
        __n128 result = v12;
        *(__n128 *)&a2->CMTime value = v12;
        a2->epoch = v4;
        return result;
      }
      CMTimeMakeFromDictionary(a2, dictionaryRepresentation);
      CFDictionaryRef v11 = dictionaryRepresentation;
    }
    if (v11) {
      CFRelease(v11);
    }
  }
  return result;
}

uint64_t figAssetExportSession_computeVideoTrackByteRate(uint64_t a1, int a2)
{
  if (a2) {
    FigCFDictionaryGetInt64IfPresent();
  }
  if (FigCFDictionaryGetInt64IfPresent()) {
    return 0;
  }
  else {
    return 0;
  }
}

uint64_t figAssetExportSession_computeAudioTrackByteRate(uint64_t result, int a2)
{
  uint64_t v16 = 0;
  if (result)
  {
    CFArrayRef Value = CFDictionaryGetValue((CFDictionaryRef)result, @"audioPreset");
    if (FigCFEqual())
    {
      return 0;
    }
    else
    {
      if (!a2) {
        goto LABEL_8;
      }
      int Int64IfPresent = FigCFDictionaryGetInt64IfPresent();
      __n128 result = v16;
      if (Int64IfPresent)
      {
        __n128 result = v16 >> 3;
        v16 >>= 3;
      }
      if (!result)
      {
LABEL_8:
        int v5 = FigCFDictionaryGetInt64IfPresent();
        uint64_t v6 = v16;
        if (v5)
        {
          if (v16 < 0) {
            uint64_t v6 = v16 + 7;
          }
          v6 >>= 3;
          uint64_t v16 = v6;
        }
        if (Value) {
          BOOL v7 = v6 == 0;
        }
        else {
          BOOL v7 = 0;
        }
        if (v7)
        {
          uint64_t v14 = 0;
          uint64_t v15 = 0;
          uint64_t v12 = 0;
          uint64_t v13 = 0;
          FigAudioCompressionOptionsGetPreset(Value, &v15, &v13, &v14, &v12);
          int v8 = FigCFDictionaryGetInt64IfPresent();
          uint64_t v6 = v16;
          if (v8) {
            uint64_t v6 = v16 / 8;
          }
          if (v6) {
            BOOL v9 = 1;
          }
          else {
            BOOL v9 = v15 == 0;
          }
          if (!v9)
          {
            unsigned int v10 = *(_DWORD *)(v15 + 20);
            if (v10)
            {
              *(double *)&unint64_t v11 = (double)v10;
              LODWORD(v11) = *(_DWORD *)(v15 + 16);
              uint64_t v6 = (uint64_t)(*(double *)v15 / (double)v10 * (double)v11);
            }
            else
            {
              uint64_t v6 = 0;
            }
          }
        }
        if (v6) {
          return v6;
        }
        else {
          return 21000;
        }
      }
    }
  }
  return result;
}

dispatch_queue_t figAssetExportSession_CreateAsynchronousConcurrentDispatchQueueOnce(dispatch_queue_t *a1)
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  FigKTraceInit();
  dispatch_queue_t result = dispatch_queue_create("com.apple.MediaToolbox.FigAssetExportSession.Concurrent", MEMORY[0x1E4F14430]);
  *a1 = result;
  return result;
}

uint64_t figAssetExportSessionTask_RegisterOnce()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sFigAssetExportSessionTaskID = result;
  return result;
}

double figAssetExportSessionTask_Init(_OWORD *a1)
{
  double result = 0.0;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[1] = 0u;
  return result;
}

void figAssetExportSessionTask_Finalize(void *a1)
{
  uint64_t v2 = (const void *)a1[2];
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)a1[3];
  if (v3) {
    CFRelease(v3);
  }
  CMTimeEpoch v4 = (void *)a1[6];

  free(v4);
}

CFStringRef figAssetExportSessionTask_CopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigAssetExportSessionTask %p] execution: %p completion: %p", a1, *(void *)(a1 + 32), *(void *)(a1 + 40));
}

CFStringRef figAssetExportSessionTask_CopyDebugDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigAssetExportSessionTask %p] execution: %p completion: %p", a1, *(void *)(a1 + 32), *(void *)(a1 + 40));
}

void figAssetExportSession_runTaskAfterLoadingRequiredAssetPropertiesDispatched(void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  char v13 = 0;
  int v12 = 0;
  uint64_t v3 = *(void *)(DerivedStorage + 16);
  uint64_t v4 = a1[3];
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  BOOL v7 = *(uint64_t (**)(uint64_t, uint64_t, char *, int *))(v6 + 16);
  if (!v7)
  {
    int v8 = -12782;
    goto LABEL_9;
  }
  int v8 = v7(v3, v4, &v13, &v12);
  if (v8)
  {
LABEL_9:
    CFErrorRef CFError = figAssetExportSession_createCFError(v8, "Failed to FigAssetLoadValuesAsyncForProperties.");
    FigAssetExportSessionTaskCompleteWithError((uint64_t)a1, (uint64_t)CFError);
    if (!CFError) {
      goto LABEL_12;
    }
    CFErrorRef v10 = CFError;
LABEL_11:
    CFRelease(v10);
    goto LABEL_12;
  }
  if (!v13)
  {
    SInt32 = (void *)FigCFNumberCreateSInt32();
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(DerivedStorage + 352), SInt32, a1);
    if (!SInt32) {
      goto LABEL_12;
    }
    CFErrorRef v10 = (CFErrorRef)SInt32;
    goto LABEL_11;
  }
  FigAssetExportSessionTaskExecuteAndComplete((uint64_t)a1);
LABEL_12:
  CFRelease(a1);
}

CFErrorRef figAssetExportSession_createCFError(int a1, const char *a2)
{
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (a2)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!Mutable) {
      return 0;
    }
    uint64_t v6 = Mutable;
    CFStringRef v7 = CFStringCreateWithCString(v3, a2, 0x8000100u);
    CFDictionarySetValue(v6, (const void *)*MEMORY[0x1E4F1D138], v7);
    CFErrorRef v8 = CFErrorCreate(v3, @"FigAssetExportSession_ErrorDomain", a1, v6);
    if (v7) {
      CFRelease(v7);
    }
    CFRelease(v6);
    return v8;
  }
  else
  {
    CFIndex v10 = a1;
    CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    return CFErrorCreate(v11, @"FigAssetExportSession_ErrorDomain", v10, 0);
  }
}

CFTypeRef figAssetExportSession_copySourceTransferFunction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFArrayRef theArray = 0;
  if (a3)
  {
    CFAllocatorRef v3 = *(const void **)(a3 + 128);
    if (v3) {
      CFTypeRef v4 = CFRetain(v3);
    }
    else {
      CFTypeRef v4 = 0;
    }
    uint64_t v6 = 0;
    goto LABEL_19;
  }
  CFTypeRef v5 = figAssetExportSession_CopySourceVideoTrack(a1, a2);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v5;
  uint64_t CMBaseObject = FigAssetTrackGetCMBaseObject(v5);
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  CFIndex v10 = *(unsigned int (**)(uint64_t, __CFString *, void, CFArrayRef *))(v9 + 48);
  if (!v10 || v10(CMBaseObject, @"FormatDescriptionArray", *MEMORY[0x1E4F1CF80], &theArray)) {
    goto LABEL_18;
  }
  if (!theArray)
  {
    CFTypeRef v4 = 0;
LABEL_22:
    CFRelease(v6);
    return v4;
  }
  if (CFArrayGetCount(theArray) < 1) {
    goto LABEL_18;
  }
  CFDictionaryRef ValueAtIndex = (const opaqueCMFormatDescription *)CFArrayGetValueAtIndex(theArray, 0);
  CFPropertyListRef Extension = CMFormatDescriptionGetExtension(ValueAtIndex, (CFStringRef)*MEMORY[0x1E4F24BC8]);
  CFTypeRef v4 = Extension;
  if (!Extension) {
    goto LABEL_19;
  }
  CFTypeID v13 = CFGetTypeID(Extension);
  if (v13 == CFStringGetTypeID()) {
    CFRetain(v4);
  }
  else {
LABEL_18:
  }
    CFTypeRef v4 = 0;
LABEL_19:
  if (theArray) {
    CFRelease(theArray);
  }
  if (v6) {
    goto LABEL_22;
  }
  return v4;
}

uint64_t figAssetExportSession_isHEVCHDRPreset()
{
  if (FigCFEqual()) {
    return 1;
  }
  if (FigCFEqual()) {
    return 1;
  }
  if (FigCFEqual()) {
    return 1;
  }
  if (FigCFEqual()) {
    return 1;
  }
  if (FigCFEqual()) {
    return 1;
  }
  if (FigCFEqual()) {
    return 1;
  }
  if (FigCFEqual()) {
    return 1;
  }
  if (FigCFEqual()) {
    return 1;
  }
  if (FigCFEqual()) {
    return 1;
  }
  if (FigCFEqual()) {
    return 1;
  }
  uint64_t result = FigCFEqual();
  if (result) {
    return 1;
  }
  return result;
}

uint64_t figAssetExportSession_computeAudioByteRate(uint64_t a1, CFDictionaryRef theDict, int a3, char a4)
{
  CFTypeRef cf = 0;
  CFArrayRef Value = CFDictionaryGetValue(theDict, @"audioPreset");
  CFTypeRef v47 = 0;
  if (FigCFEqual())
  {
    CFMutableArrayRef Mutable = 0;
    uint64_t v10 = 0;
    goto LABEL_3;
  }
  uint64_t v10 = figAssetExportSession_computeAudioTrackByteRate((uint64_t)theDict, 0);
  if (!a3 && theDict && Value)
  {
    unsigned int v12 = figAssetExportSession_isAudioMixdownRequired(Value, (CFErrorRef *)&cf);
    if (cf)
    {
      CFErrorGetCode((CFErrorRef)cf);
      goto LABEL_14;
    }
    if (!v12)
    {
      CFArrayRef theArray = 0;
      CFTypeID v13 = (const void *)*MEMORY[0x1E4F1CFC8];
      CFTypeRef v49 = (CFTypeRef)*MEMORY[0x1E4F1CFC8];
      uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v14) {
        uint64_t v15 = v14;
      }
      else {
        uint64_t v15 = 0;
      }
      uint64_t v16 = *(unsigned int (**)(uint64_t, uint64_t, CFArrayRef *))(v15 + 48);
      if (!v16 || v16(a1, 1936684398, &theArray)) {
        goto LABEL_34;
      }
      if (!theArray)
      {
        int v20 = 0;
        goto LABEL_38;
      }
      CFIndex Count = CFArrayGetCount(theArray);
      if (Count < 1)
      {
LABEL_34:
        int v20 = 0;
      }
      else
      {
        CFIndex v18 = Count;
        CFIndex v19 = 0;
        int v20 = 0;
        uint64_t v21 = *MEMORY[0x1E4F1CF80];
        CFTypeRef v22 = (CFTypeRef)*MEMORY[0x1E4F1CFD0];
        do
        {
          CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v19);
          CFTypeRef v49 = v13;
          uint64_t CMBaseObject = FigAssetTrackGetCMBaseObject(ValueAtIndex);
          uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v25) {
            uint64_t v26 = v25;
          }
          else {
            uint64_t v26 = 0;
          }
          double v27 = *(unsigned int (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v26 + 48);
          if (!v27 || v27(CMBaseObject, @"IsEnabled", v21, &v49)) {
            break;
          }
          if (v49 == v22) {
            ++v20;
          }
          ++v19;
        }
        while (v18 != v19);
      }
      if (theArray) {
        CFRelease(theArray);
      }
LABEL_38:
      v10 *= v20;
      if ((a4 & 1) == 0) {
        goto LABEL_14;
      }
      goto LABEL_39;
    }
  }
  if ((a4 & 1) == 0)
  {
LABEL_14:
    CFMutableArrayRef Mutable = 0;
    goto LABEL_15;
  }
LABEL_39:
  uint64_t v28 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v28) {
    uint64_t v29 = v28;
  }
  else {
    uint64_t v29 = 0;
  }
  uint64_t v30 = *(void (**)(uint64_t, uint64_t, CFTypeRef *))(v29 + 48);
  if (!v30 || (v30(a1, 1936684398, &v47), !v47))
  {
    CFMutableArrayRef Mutable = 0;
    goto LABEL_3;
  }
  uint64_t v31 = *MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  CFIndex v32 = CFArrayGetCount((CFArrayRef)v47);
  if (v32 >= 1)
  {
    CFIndex v33 = v32;
    CFIndex v34 = 0;
    CFArrayRef v35 = (const __CFArray *)*MEMORY[0x1E4F1CFC8];
    do
    {
      CFDictionaryRef v36 = CFArrayGetValueAtIndex((CFArrayRef)v47, v34);
      CFArrayRef theArray = v35;
      uint64_t v37 = FigAssetTrackGetCMBaseObject(v36);
      uint64_t v38 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v38) {
        uint64_t v39 = v38;
      }
      else {
        uint64_t v39 = 0;
      }
      CFDictionaryRef v40 = *(void (**)(uint64_t, __CFString *, uint64_t, CFArrayRef *))(v39 + 48);
      if (v40) {
        v40(v37, @"IsEnabled", v31, &theArray);
      }
      if (figAssetExportSession_isAlternateTrack((uint64_t)v36) && theArray == v35)
      {
        CFTypeRef v49 = 0;
        uint64_t v42 = FigAssetTrackGetCMBaseObject(v36);
        uint64_t v43 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v43) {
          uint64_t v44 = v43;
        }
        else {
          uint64_t v44 = 0;
        }
        CMTimeRange v45 = *(void (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v44 + 48);
        if (v45) {
          v45(v42, @"EstimatedDataRate", v31, &v49);
        }
        uint64_t SInt64 = FigCFNumberGetSInt64();
        if (v49) {
          CFRelease(v49);
        }
        v10 += SInt64;
      }
      ++v34;
    }
    while (v33 != v34);
  }
LABEL_15:
  if (v47) {
    CFRelease(v47);
  }
LABEL_3:
  if (cf) {
    CFRelease(cf);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v10;
}

double figAssetExportSession_getTotalByteRateOfAllAssetTracks(uint64_t a1)
{
  CFTypeRef v35 = 0;
  CFTypeRef v36 = 0;
  CFTypeRef v34 = 0;
  CFDictionaryRef dictionaryRepresentation = 0;
  CMTime v32 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  uint64_t CMBaseObject = FigAssetGetCMBaseObject(a1);
  uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  CFTypeRef v5 = *(unsigned int (**)(uint64_t, __CFString *, void, CFDictionaryRef *))(v4 + 48);
  double v6 = 0.0;
  if (v5)
  {
    uint64_t v7 = *MEMORY[0x1E4F1CF80];
    if (!v5(CMBaseObject, @"Duration", *MEMORY[0x1E4F1CF80], &dictionaryRepresentation))
    {
      CMTimeMakeFromDictionary(&v32, dictionaryRepresentation);
      CMTime time1 = v32;
      CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
      if (CMTimeCompare(&time1, &time2))
      {
        uint64_t v29 = 0;
        uint64_t v8 = FigAssetGetCMBaseObject(a1);
        uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v10 = v9 ? v9 : 0;
        CFAllocatorRef v11 = *(unsigned int (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v10 + 48);
        if (v11 && !v11(v8, @"assetProperty_FormatReader", v7, &v34))
        {
          CFTypeRef v12 = v34;
          uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
          uint64_t v14 = v13 ? v13 : 0;
          uint64_t v15 = *(unsigned int (**)(CFTypeRef, uint64_t *))(v14 + 8);
          if (v15)
          {
            if (!v15(v12, &v29))
            {
              if (v29 < 1)
              {
LABEL_36:
                CMTime time1 = v32;
                double v6 = v6 / CMTimeGetSeconds(&time1) + 0.0;
              }
              else
              {
                uint64_t v16 = 0;
                uint64_t v17 = 0;
                while (1)
                {
                  CFTypeRef v18 = v34;
                  uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 16);
                  uint64_t v20 = v19 ? v19 : 0;
                  uint64_t v21 = *(unsigned int (**)(CFTypeRef, uint64_t, CFTypeRef *, void, void))(v20 + 48);
                  if (!v21 || v21(v18, v16, &v36, 0, 0)) {
                    break;
                  }
                  uint64_t FigBaseObject = FigTrackReaderGetFigBaseObject(v36);
                  uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 8);
                  uint64_t v24 = v23 ? v23 : 0;
                  uint64_t v25 = *(unsigned int (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v24 + 48);
                  if (!v25) {
                    break;
                  }
                  if (v25(FigBaseObject, @"UneditedNumDataBytes", v7, &v35)) {
                    break;
                  }
                  FigCFNumberGetFloat64();
                  if (v26 == 0.0) {
                    break;
                  }
                  double v27 = v26;
                  if (v35)
                  {
                    CFRelease(v35);
                    CFTypeRef v35 = 0;
                  }
                  if (v36)
                  {
                    CFRelease(v36);
                    CFTypeRef v36 = 0;
                  }
                  uint64_t v17 = (uint64_t)(v27 + (double)v17);
                  if (v29 <= ++v16)
                  {
                    double v6 = (double)v17;
                    goto LABEL_36;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (dictionaryRepresentation) {
    CFRelease(dictionaryRepresentation);
  }
  if (v35) {
    CFRelease(v35);
  }
  if (v36) {
    CFRelease(v36);
  }
  if (v34) {
    CFRelease(v34);
  }
  return v6;
}

void figAssetExportSession_FilterSPIPresets(void *value, CFSetRef *a2)
{
  if (!CFSetContainsValue(*a2, value) && !CFSetContainsValue(a2[1], value))
  {
    CFArrayAppendValue(a2[2], value);
    uint64_t v4 = *a2;
    CFSetAddValue(v4, value);
  }
}

CFComparisonResult figAssetExportSession_StringArrayNumericalComparatorFunction(const __CFString *a1, const __CFString *a2)
{
  return CFStringCompare(a1, a2, 0x40uLL);
}

void figAssetExportSession_CategorizePresetsOnce(const __CFArray ***a1)
{
  if (FigAssetExportSessionGetAllPresets_onceToken != -1) {
    dispatch_once_f(&FigAssetExportSessionGetAllPresets_onceToken, &FigAssetExportSessionGetAllPresets_sAllPresets, (dispatch_function_t)figAssetExportSession_CreateAllPresetsOnce);
  }
  CFArrayRef v2 = (const __CFArray *)FigAssetExportSessionGetAllPresets_sAllPresets;
  if (!FigAssetExportSessionGetAllPresets_sAllPresets) {
    return;
  }
  if (figAssetExportSession_GetAudioOnlyPresets_onceToken != -1) {
    dispatch_once_f(&figAssetExportSession_GetAudioOnlyPresets_onceToken, &figAssetExportSession_GetAudioOnlyPresets_sAudioOnlyPresets, (dispatch_function_t)figAssetExportSession_CreateAudioOnlyPresetsOnce);
  }
  CFArrayRef v3 = (const __CFArray *)figAssetExportSession_GetAudioOnlyPresets_sAudioOnlyPresets;
  if (!figAssetExportSession_GetAudioOnlyPresets_sAudioOnlyPresets) {
    return;
  }
  CFIndex Count = CFArrayGetCount(v2);
  CFIndex v5 = CFArrayGetCount(v3);
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (!Mutable) {
    return;
  }
  CFMutableArrayRef v25 = CFArrayCreateMutable(v6, 0, MEMORY[0x1E4F1D510]);
  if (!v25)
  {
    CFMutableArrayRef v19 = Mutable;
    goto LABEL_46;
  }
  CFMutableArrayRef v7 = CFArrayCreateMutable(v6, 0, MEMORY[0x1E4F1D510]);
  if (!v7)
  {
    CFMutableArrayRef v9 = 0;
    CFMutableArrayRef v10 = 0;
    CFMutableArrayRef v8 = 0;
LABEL_38:
    CFRelease(Mutable);
    CFRelease(v25);
    if (v7) {
      CFRelease(v7);
    }
    if (v8) {
      CFRelease(v8);
    }
    if (v9) {
      CFRelease(v9);
    }
    if (!v10) {
      return;
    }
    CFMutableArrayRef v19 = v10;
LABEL_46:
    CFRelease(v19);
    return;
  }
  CFMutableArrayRef v8 = CFArrayCreateMutable(v6, 0, MEMORY[0x1E4F1D510]);
  if (!v8)
  {
    CFMutableArrayRef v9 = 0;
    goto LABEL_37;
  }
  CFMutableArrayRef v9 = CFArrayCreateMutable(v6, 0, MEMORY[0x1E4F1D510]);
  if (!v9)
  {
LABEL_37:
    CFMutableArrayRef v10 = 0;
    goto LABEL_38;
  }
  CFMutableArrayRef v10 = CFArrayCreateMutable(v6, 0, MEMORY[0x1E4F1D510]);
  if (!v10) {
    goto LABEL_38;
  }
  uint64_t v23 = v7;
  uint64_t v24 = v8;
  CFMutableArrayRef v11 = CFArrayCreateMutable(v6, 0, MEMORY[0x1E4F1D510]);
  if (!v11) {
    goto LABEL_38;
  }
  CFTypeRef v12 = v11;
  CFArrayRef theArray = v9;
  CFTypeRef v22 = v10;
  uint64_t v20 = a1;
  if (Count >= 1)
  {
    for (CFIndex i = 0; Count != i; ++i)
    {
      CFDictionaryRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(v2, i);
      v28.location = 0;
      v28.length = v5;
      int v15 = CFArrayContainsValue(v3, v28, ValueAtIndex);
      unsigned int v16 = figAssetExportSession_IsAlphaPreset(ValueAtIndex);
      unsigned int v17 = figAssetExportSession_IsStereoPreset(ValueAtIndex);
      if (v17)
      {
        if (v16) {
          goto LABEL_18;
        }
      }
      else
      {
        CFArrayAppendValue(Mutable, ValueAtIndex);
        if (v16) {
          goto LABEL_18;
        }
      }
      CFArrayAppendValue(v25, ValueAtIndex);
LABEL_18:
      if (v17 | v16)
      {
        if (!v15) {
          goto LABEL_31;
        }
      }
      else
      {
        CFArrayAppendValue(v23, ValueAtIndex);
        if (!v15) {
LABEL_31:
        }
          CFArrayAppendValue(v24, ValueAtIndex);
      }
      if (!(v17 | v15)) {
        CFArrayAppendValue(theArray, ValueAtIndex);
      }
      int v18 = v16 | v15;
      if (!v18) {
        CFArrayAppendValue(v22, ValueAtIndex);
      }
      if (!(v18 | v17)) {
        CFArrayAppendValue(v12, ValueAtIndex);
      }
    }
  }
  **uint64_t v20 = v2;
  v29.length = CFArrayGetCount(Mutable);
  v29.location = 0;
  CFArraySortValues(Mutable, v29, (CFComparatorFunction)figAssetExportSession_StringArrayNumericalComparatorFunction, 0);
  *v20[1] = Mutable;
  v30.length = CFArrayGetCount(v25);
  v30.location = 0;
  CFArraySortValues(v25, v30, (CFComparatorFunction)figAssetExportSession_StringArrayNumericalComparatorFunction, 0);
  *v20[2] = v25;
  v31.length = CFArrayGetCount(v23);
  v31.location = 0;
  CFArraySortValues(v23, v31, (CFComparatorFunction)figAssetExportSession_StringArrayNumericalComparatorFunction, 0);
  *v20[3] = v23;
  v32.length = CFArrayGetCount(v24);
  v32.location = 0;
  CFArraySortValues(v24, v32, (CFComparatorFunction)figAssetExportSession_StringArrayNumericalComparatorFunction, 0);
  *v20[4] = v24;
  v33.length = CFArrayGetCount(theArray);
  v33.location = 0;
  CFArraySortValues(theArray, v33, (CFComparatorFunction)figAssetExportSession_StringArrayNumericalComparatorFunction, 0);
  *v20[5] = theArray;
  v34.length = CFArrayGetCount(v22);
  v34.location = 0;
  CFArraySortValues(v22, v34, (CFComparatorFunction)figAssetExportSession_StringArrayNumericalComparatorFunction, 0);
  *v20[6] = v22;
  v35.length = CFArrayGetCount(v12);
  v35.location = 0;
  CFArraySortValues(v12, v35, (CFComparatorFunction)figAssetExportSession_StringArrayNumericalComparatorFunction, 0);
  *v20[7] = v12;
}

void *figAssetExportSessionProperty_AudioMix_CFDictionaryRetainCallBack(uint64_t a1, void *a2)
{
  if (FigAtomicIncrement32() == 1)
  {
    CFArrayRef v3 = (const void *)a2[1];
    if (v3) {
      CFRetain(v3);
    }
    uint64_t v4 = (const void *)a2[2];
    if (v4) {
      CFRetain(v4);
    }
    CFIndex v5 = (const void *)a2[3];
    if (v5) {
      CFRetain(v5);
    }
  }
  return a2;
}

void figAssetExportSessionProperty_AudioMix_CFDictionaryReleaseCallBack(const __CFAllocator *a1, void *a2)
{
  if (!FigAtomicDecrement32())
  {
    uint64_t v4 = (const void *)a2[1];
    if (v4) {
      CFRelease(v4);
    }
    CFIndex v5 = (const void *)a2[2];
    if (v5) {
      CFRelease(v5);
    }
    CFAllocatorRef v6 = (const void *)a2[3];
    if (v6) {
      CFRelease(v6);
    }
    CFAllocatorDeallocate(a1, a2);
  }
}

uint64_t FigCPEOctaviaCreateNeroCryptor(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, void *a5, void *a6)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)keys = 0u;
  long long v32 = 0u;
  *(_OWORD *)values = 0u;
  long long v30 = 0u;
  CMBlockBufferRef theSourceBuffer = 0;
  CFTypeRef cf = 0;
  uint64_t destination = 0;
  uint64_t v28 = 0;
  uint64_t v6 = 4294955146;
  if (!a1 || !a5) {
    goto LABEL_25;
  }
  keys[0] = @"ProtectionScheme";
  uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v12) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  uint64_t v14 = *(uint64_t (**)(uint64_t, void, void, void **))(v13 + 48);
  if (!v14)
  {
    uint64_t v6 = 4294954514;
    goto LABEL_25;
  }
  CFAllocatorRef v15 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v16 = v14(a1, *MEMORY[0x1E4F1FDE0], *MEMORY[0x1E4F1CF80], values);
  if (v16)
  {
    uint64_t v6 = v16;
    goto LABEL_25;
  }
  if (!a2)
  {
    CFIndex v19 = 1;
    if (!a3) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  uint64_t v24 = 0;
  FigCPEExternalProtectionMonitorGetSerializationToken(a2, &v24);
  keys[1] = @"OctaviaExternalProtectionMonitorSerializationToken";
  uint64_t CFNumberFromRemoteObjectRef = FigTransportCreateCFNumberFromRemoteObjectRef();
  if (!CFNumberFromRemoteObjectRef)
  {
    CFIndex v19 = 2;
    if (!a3)
    {
LABEL_14:
      CFDictionaryRef v18 = CFDictionaryCreate(v15, (const void **)keys, (const void **)values, v19, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (v18)
      {
        uint64_t SerializedAtomDataBlockBufferForCFType = FigRemote_CreateSerializedAtomDataBlockBufferForCFType();
        if (SerializedAtomDataBlockBufferForCFType
          || (FigTransportGetRemoteRootObject(),
              uint64_t SerializedAtomDataBlockBufferForCFType = NeroTransportSendSyncMessageCreatingReply(),
              SerializedAtomDataBlockBufferForCFType)
          || (uint64_t SerializedAtomDataBlockBufferForCFType = CMBlockBufferCopyDataBytes(theSourceBuffer, 0, 8uLL, &destination), SerializedAtomDataBlockBufferForCFType))
        {
          uint64_t v6 = SerializedAtomDataBlockBufferForCFType;
        }
        else
        {
          uint64_t v6 = CMBlockBufferCopyDataBytes(theSourceBuffer, 8uLL, 8uLL, &v28);
          if (!v6)
          {
            uint64_t v21 = v28;
            *a5 = destination;
            *a6 = v21;
            uint64_t destination = 0;
            uint64_t v28 = 0;
          }
        }
      }
      else
      {
        uint64_t v6 = 4294955145;
      }
      goto LABEL_20;
    }
LABEL_13:
    keys[v19] = @"SerializedState";
    values[v19++] = (void *)CFRetain(a3);
    goto LABEL_14;
  }
  uint64_t v6 = CFNumberFromRemoteObjectRef;
  CFDictionaryRef v18 = 0;
  CFIndex v19 = 1;
  do
  {
LABEL_20:
    CFTypeRef v22 = values[v19 - 1];
    if (v22) {
      CFRelease(v22);
    }
    --v19;
  }
  while ((unint64_t)(v19 + 1) > 1);
  if (v18) {
    CFRelease(v18);
  }
LABEL_25:
  if (cf) {
    CFRelease(cf);
  }
  if (theSourceBuffer) {
    CFRelease(theSourceBuffer);
  }
  if (destination) {
    NeroTransportSendAsyncMessage();
  }
  return v6;
}

uint64_t FigCPEOctaviaReleaseRemoteCryptor(uint64_t result)
{
  if (result) {
    return NeroTransportSendAsyncMessage();
  }
  return result;
}

uint64_t FigOctaviaCPECryptorCreate(const void *a1, const void *a2, void *a3, const void *a4, uint64_t a5, const void *a6, void *a7)
{
  uint64_t NeroCryptor = 4294955146;
  if (a6 && a1 && a2 && a3 && a7)
  {
    MEMORY[0x19970EE10](&FigOctaviaCPECryptorGetClassID_sRegisterFigOctaviaCPECryptorTypeOnce, RegisterFigOctaviaCPECryptorType);
    uint64_t v14 = CMDerivedObjectCreate();
    if (v14) {
      return v14;
    }
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (!DerivedStorage) {
      return 4294955145;
    }
    uint64_t v16 = (void *)DerivedStorage;
    uint64_t v17 = FigSimpleMutexCreate();
    v16[7] = v17;
    if (!v17) {
      return 4294955145;
    }
    *uint64_t v16 = CFRetain(a1);
    v16[3] = CFRetain(a2);
    CFTypeRef v18 = CFRetain(a6);
    v16[8] = v18;
    uint64_t v14 = FigCPEOctaviaExternalProtectionMonitorCreate(*MEMORY[0x1E4F1CF80], a3, 0, v18, v16 + 5);
    if (v14) {
      return v14;
    }
    FigCPEExternalProtectionMonitorBeginMonitoring(v16[5]);
    uint64_t NeroCryptor = FigCPEOctaviaCreateNeroCryptor(0, v16[5], a4, v16[8], v16 + 1, v16 + 2);
    if (!NeroCryptor) {
      *a7 = 0;
    }
  }
  return NeroCryptor;
}

BOOL FigOctaviaCPECryptorEqual(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t FigOctaviaCPECryptorInvalidate()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 56));
  *(unsigned char *)(DerivedStorage + 48) = 1;
  uint64_t v1 = *(void *)(DerivedStorage + 40);
  if (v1)
  {
    FigCPEExternalProtectionMonitorEndMonitoring(v1);
    CFArrayRef v2 = *(const void **)(DerivedStorage + 40);
    if (v2)
    {
      CFRelease(v2);
      *(void *)(DerivedStorage + 40) = 0;
    }
  }
  if (*(void *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(void *)uint64_t DerivedStorage = 0;
  }
  CFArrayRef v3 = *(const void **)(DerivedStorage + 24);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(DerivedStorage + 24) = 0;
  }
  uint64_t v4 = *(const void **)(DerivedStorage + 64);
  if (*(void *)(DerivedStorage + 8))
  {
    NeroTransportSendAsyncMessage();
    uint64_t v4 = *(const void **)(DerivedStorage + 64);
  }
  *(void *)(DerivedStorage + 8) = 0;
  *(void *)(DerivedStorage + 16) = 0;
  if (v4)
  {
    CFRelease(v4);
    *(void *)(DerivedStorage + 64) = 0;
  }
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 56));
  return 0;
}

uint64_t FigOctaviaCPECryptorFinalize()
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (*(void *)(result + 56))
  {
    uint64_t v1 = result;
    FigOctaviaCPECryptorInvalidate();
    uint64_t result = FigSimpleMutexDestroy();
    *(void *)(v1 + 56) = 0;
  }
  return result;
}

__CFString *FigOctaviaCPECryptorCopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = CFGetAllocator(a1);
  CFMutableArrayRef Mutable = CFStringCreateMutable(v3, 0);
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 56));
  if (*(unsigned char *)(DerivedStorage + 48)) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = Mutable == 0;
  }
  if (!v5) {
    CFStringAppendFormat(Mutable, 0, @"<FigOctaviaCPECryptor: protectorParent<%@> >", *(void *)DerivedStorage);
  }
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 56));
  return Mutable;
}

uint64_t FigOctaviaCPECryptorCopyProperty(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2) {
    return 4294955146;
  }
  uint64_t v8 = DerivedStorage;
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 56));
  if (!*(unsigned char *)(v8 + 48))
  {
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FD80]))
    {
      uint64_t v9 = 0;
      *a4 = *MEMORY[0x1E4F1CFC8];
      goto LABEL_6;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FDF8]))
    {
      uint64_t SerializedAtomDataBlockBufferForCFType = FigRemote_CreateSerializedAtomDataBlockBufferForCFType();
      if (!SerializedAtomDataBlockBufferForCFType)
      {
        uint64_t SerializedAtomDataBlockBufferForCFType = NeroTransportSendSyncMessageCreatingReply();
        if (!SerializedAtomDataBlockBufferForCFType) {
          uint64_t SerializedAtomDataBlockBufferForCFType = FigRemote_CreateCFTypeFromSerializedAtomDataBlockBuffer();
        }
      }
      uint64_t v9 = SerializedAtomDataBlockBufferForCFType;
      goto LABEL_6;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FDE0]))
    {
      CFTypeRef v12 = *(CFTypeRef *)(v8 + 24);
      if (!v12)
      {
LABEL_16:
        uint64_t v9 = 0;
        *a4 = v12;
        goto LABEL_6;
      }
    }
    else
    {
      if (!CFEqual(a2, @"BC70EF27-5C84-4D7C-9C87-F8A091DFDC77"))
      {
        uint64_t v9 = FigCPECryptorCopyProperty(*(void *)v8, (uint64_t)a2, a3, (uint64_t)a4);
        goto LABEL_6;
      }
      CFTypeRef v12 = *(CFTypeRef *)(v8 + 32);
      if (!v12) {
        goto LABEL_16;
      }
    }
    CFTypeRef v12 = CFRetain(v12);
    goto LABEL_16;
  }
  uint64_t v9 = 4294954511;
LABEL_6:
  MEMORY[0x19970E930](*(void *)(v8 + 56));
  return v9;
}

uint64_t FigOctaviaCPECryptorSetProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2) {
    return 4294955146;
  }
  uint64_t v6 = DerivedStorage;
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 56));
  if (*(unsigned char *)(v6 + 48))
  {
    uint64_t v7 = 4294954511;
  }
  else if (CFEqual(a2, @"BC70EF27-5C84-4D7C-9C87-F8A091DFDC77"))
  {
    uint64_t v8 = *(const void **)(v6 + 32);
    *(void *)(v6 + 32) = a3;
    if (a3) {
      CFRetain(a3);
    }
    if (v8) {
      CFRelease(v8);
    }
    uint64_t v7 = 0;
  }
  else if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FDD8]) {
         || CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FDE8])
  }
         || CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FDC0])
         || CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FD70])
         || CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FDF8]))
  {
    uint64_t SerializedAtomDataBlockBufferForKeyValuePair = FigRemote_CreateSerializedAtomDataBlockBufferForKeyValuePair();
    if (!SerializedAtomDataBlockBufferForKeyValuePair) {
      uint64_t SerializedAtomDataBlockBufferForKeyValuePair = NeroTransportSendAsyncMessage();
    }
    uint64_t v7 = SerializedAtomDataBlockBufferForKeyValuePair;
  }
  else
  {
    uint64_t v7 = FigCPECryptorSetProperty(*(void *)v6, (uint64_t)a2, (uint64_t)a3);
  }
  MEMORY[0x19970E930](*(void *)(v6 + 56));
  return v7;
}

uint64_t FigOctaviaCPECryptorGetExternalProtectionMethods(uint64_t a1, _DWORD *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2) {
    return 4294955146;
  }
  uint64_t v4 = DerivedStorage;
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 56));
  if (*(unsigned char *)(v4 + 48))
  {
    uint64_t v5 = 4294954511;
  }
  else
  {
    uint64_t v5 = 0;
    *a2 = 7;
  }
  MEMORY[0x19970E930](*(void *)(v4 + 56));
  return v5;
}

uint64_t FigOctaviaCPECryptorGetAggregateExternalProtectionStatus(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a3) {
    return 4294955146;
  }
  uint64_t v5 = DerivedStorage;
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 56));
  if (*(unsigned char *)(v5 + 48))
  {
    uint64_t v6 = 4294954511;
  }
  else
  {
    uint64_t v7 = *(void *)v5;
    uint64_t v8 = *(void **)(CMBaseObjectGetVTable() + 16);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    if (*v9 && (CFMutableArrayRef v10 = (uint64_t (*)(uint64_t, uint64_t))v9[9]) != 0) {
      uint64_t v6 = v10(v7, a3);
    }
    else {
      uint64_t v6 = 4294954514;
    }
  }
  MEMORY[0x19970E930](*(void *)(v5 + 56));
  return v6;
}

uint64_t FigOctaviaCPECryptorCreateKeyRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a4) {
    return 4294955146;
  }
  uint64_t v6 = DerivedStorage;
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 56));
  if (*(unsigned char *)(v6 + 48))
  {
    uint64_t SerializedAtomDataBlockBufferForCFType = 4294954511;
  }
  else
  {
    uint64_t SerializedAtomDataBlockBufferForCFType = FigRemote_CreateSerializedAtomDataBlockBufferForCFType();
    if (!SerializedAtomDataBlockBufferForCFType)
    {
      uint64_t SerializedAtomDataBlockBufferForCFType = NeroTransportSendSyncMessageCreatingReply();
      if (!SerializedAtomDataBlockBufferForCFType) {
        uint64_t SerializedAtomDataBlockBufferForCFType = FigRemote_CreateCFTypeFromSerializedAtomDataBlockBuffer();
      }
    }
  }
  MEMORY[0x19970E930](*(void *)(v6 + 56));
  return SerializedAtomDataBlockBufferForCFType;
}

uint64_t FigOctaviaCPECryptorSetKeyRequestResponse(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2) {
    return 4294955146;
  }
  uint64_t v6 = DerivedStorage;
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 56));
  if (*(unsigned char *)(v6 + 48))
  {
    uint64_t SerializedAtomDataBlockBufferForCFType = 4294954511;
  }
  else
  {
    CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 2, 0, 0);
    CFDictionaryAddValue(Mutable, @"KeyRequestResponse", a2);
    if (a3) {
      CFDictionaryAddValue(Mutable, @"KeyResponseOptions", a3);
    }
    uint64_t SerializedAtomDataBlockBufferForCFType = FigRemote_CreateSerializedAtomDataBlockBufferForCFType();
    if (!SerializedAtomDataBlockBufferForCFType) {
      uint64_t SerializedAtomDataBlockBufferForCFType = NeroTransportSendSyncMessageCreatingReply();
    }
    if (Mutable) {
      CFRelease(Mutable);
    }
  }
  MEMORY[0x19970E930](*(void *)(v6 + 56));
  return SerializedAtomDataBlockBufferForCFType;
}

uint64_t FigOctaviaCPECryptorGetSerializationToken(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2) {
    return 4294955146;
  }
  uint64_t v4 = DerivedStorage;
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 56));
  if (*(unsigned char *)(v4 + 48))
  {
    uint64_t v5 = 4294954511;
  }
  else
  {
    uint64_t v5 = 0;
    *a2 = *(void *)(v4 + 16);
  }
  MEMORY[0x19970E930](*(void *)(v4 + 56));
  return v5;
}

uint64_t FigOctaviaCPECryptorTestAndSetKeyRequestState(uint64_t a1, uint64_t a2, uint64_t a3, BOOL *a4, void *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 56));
  if (*(unsigned char *)(DerivedStorage + 48))
  {
    CFMutableArrayRef Mutable = 0;
    SInt32 = 0;
    CFMutableArrayRef v10 = 0;
    uint64_t v11 = 4294954511;
    goto LABEL_10;
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (!Mutable)
  {
    SInt32 = 0;
    goto LABEL_22;
  }
  SInt32 = (const void *)FigCFNumberCreateSInt32();
  if (!SInt32)
  {
LABEL_22:
    CFMutableArrayRef v10 = 0;
    goto LABEL_23;
  }
  CFMutableArrayRef v10 = (const void *)FigCFNumberCreateSInt32();
  if (!v10)
  {
LABEL_23:
    uint64_t v11 = 4294955145;
    goto LABEL_10;
  }
  CFArrayAppendValue(Mutable, SInt32);
  CFArrayAppendValue(Mutable, v10);
  uint64_t SerializedAtomDataBlockBufferForCFType = FigRemote_CreateSerializedAtomDataBlockBufferForCFType();
  if (!SerializedAtomDataBlockBufferForCFType)
  {
    uint64_t SerializedAtomDataBlockBufferForCFType = NeroTransportSendSyncMessageCreatingReply();
    if (!SerializedAtomDataBlockBufferForCFType) {
      uint64_t SerializedAtomDataBlockBufferForCFType = FigRemote_CreateCFTypeFromSerializedAtomDataBlockBuffer();
    }
  }
  uint64_t v11 = SerializedAtomDataBlockBufferForCFType;
LABEL_10:
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 56));
  if (a4) {
    *a4 = *MEMORY[0x1E4F1CFD0] == 0;
  }
  if (a5) {
    *a5 = 0;
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (SInt32) {
    CFRelease(SInt32);
  }
  if (v10) {
    CFRelease(v10);
  }
  return v11;
}

uint64_t RegisterFigOctaviaCPECryptorType()
{
  FigCPECryptorGetClassID();

  return FigBaseClassRegisterClass();
}

CFTypeRef FigOctaviaCPECryptorCopyFormattingDesc()
{
  return CFRetain(@"[FigOctaviaCPECryptor]");
}

uint64_t bvc_SimpleMixing_420v_420v_420v_arm(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, void *a7, uint64_t a8, int16x8_t a9)
{
  if (a2)
  {
    uint64_t v12 = a2;
    a9.i32[0] = vcvts_n_u32_f32(*(float *)a9.i32, 8uLL);
    v13.i64[0] = 0x100010001000100;
    v13.i64[1] = 0x100010001000100;
    a9.i16[1] = vsubq_s16(v13, a9).u16[0];
    uint64_t v14 = *a3 - a1;
    uint64_t v15 = *a5 - a1;
    uint64_t v16 = *a7 - a1;
    uint64_t v17 = *(_OWORD **)a4;
    CFTypeRef v18 = *(_OWORD **)a6;
    CFIndex v19 = *(int8x16_t **)a8;
    do
    {
      for (uint64_t i = a1 >> 6; i; v19 += 4)
      {
        uint8x16_t v21 = *(uint8x16_t *)v17;
        uint8x16_t v22 = *((uint8x16_t *)v17 + 1);
        uint8x16_t v23 = *((uint8x16_t *)v17 + 2);
        uint8x16_t v24 = *((uint8x16_t *)v17 + 3);
        v17 += 4;
        uint8x16_t v25 = *(uint8x16_t *)v18;
        uint8x16_t v26 = *((uint8x16_t *)v18 + 1);
        uint8x16_t v27 = *((uint8x16_t *)v18 + 2);
        uint8x16_t v28 = *((uint8x16_t *)v18 + 3);
        v18 += 4;
        int16x8_t v29 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v21.i8);
        int16x8_t v30 = (int16x8_t)vmovl_high_u8(v21);
        int16x8_t v31 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v22.i8);
        int16x8_t v32 = (int16x8_t)vmovl_high_u8(v22);
        int16x8_t v33 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v25.i8);
        int16x8_t v34 = (int16x8_t)vmovl_high_u8(v25);
        int16x8_t v10 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v27.i8);
        int16x8_t v11 = vmlaq_lane_s16(vmulq_n_s16(v29, a9.i16[0]), v33, *(int16x4_t *)a9.i8, 1);
        int16x8_t v9 = (int16x8_t)vshrn_high_n_s16(vshrn_n_s16(v11, 8uLL), vmlaq_lane_s16(vmulq_n_s16(v30, a9.i16[0]), v34, *(int16x4_t *)a9.i8, 1), 8uLL);
        --i;
        *CFIndex v19 = (int8x16_t)v9;
        v19[1] = vshrn_high_n_s16(vshrn_n_s16(vmlaq_lane_s16(vmulq_n_s16(v31, a9.i16[0]), (int16x8_t)vmovl_u8(*(uint8x8_t *)v26.i8), *(int16x4_t *)a9.i8, 1), 8uLL), vmlaq_lane_s16(vmulq_n_s16(v32, a9.i16[0]), (int16x8_t)vmovl_high_u8(v26), *(int16x4_t *)a9.i8, 1), 8uLL);
        v19[2] = vshrn_high_n_s16(vshrn_n_s16(vmlaq_lane_s16(vmulq_n_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)v23.i8), a9.i16[0]), v10, *(int16x4_t *)a9.i8, 1), 8uLL), vmlaq_lane_s16(vmulq_n_s16((int16x8_t)vmovl_high_u8(v23), a9.i16[0]), (int16x8_t)vmovl_high_u8(v27), *(int16x4_t *)a9.i8, 1), 8uLL);
        v19[3] = vshrn_high_n_s16(vshrn_n_s16(vmlaq_lane_s16(vmulq_n_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)v24.i8), a9.i16[0]), (int16x8_t)vmovl_u8(*(uint8x8_t *)v28.i8), *(int16x4_t *)a9.i8, 1), 8uLL), vmlaq_lane_s16(vmulq_n_s16((int16x8_t)vmovl_high_u8(v24), a9.i16[0]), (int16x8_t)vmovl_high_u8(v28), *(int16x4_t *)a9.i8, 1), 8uLL);
      }
      for (j = (a1 & 0x3F) >> 3; j; CFIndex v19 = (int8x16_t *)((char *)v19 + 8))
      {
        uint8x8_t v36 = *(uint8x8_t *)v17;
        uint64_t v17 = (_OWORD *)((char *)v17 + 8);
        v10.i64[0] = *(void *)v18;
        CFTypeRef v18 = (_OWORD *)((char *)v18 + 8);
        int16x8_t v11 = vmlaq_lane_s16(vmulq_n_s16((int16x8_t)vmovl_u8(v36), a9.i16[0]), (int16x8_t)vmovl_u8(*(uint8x8_t *)v10.i8), *(int16x4_t *)a9.i8, 1);
        *(int8x8_t *)v9.i8 = vshrn_n_s16(v11, 8uLL);
        --j;
        v19->i64[0] = v9.i64[0];
      }
      uint64_t v37 = a1 & 7;
      if ((a1 & 7) != 0)
      {
        do
        {
          __int8 v38 = *(unsigned char *)v17;
          uint64_t v17 = (_OWORD *)((char *)v17 + 1);
          v11.i8[0] = v38;
          __int8 v39 = *(unsigned char *)v18;
          CFTypeRef v18 = (_OWORD *)((char *)v18 + 1);
          v9.i8[0] = v39;
          int16x8_t v11 = vmlaq_lane_s16(vmulq_n_s16(v11, a9.i16[0]), v9, *(int16x4_t *)a9.i8, 1);
          --v37;
          v19->i8[0] = v11.i8[1];
          CFIndex v19 = (int8x16_t *)((char *)v19 + 1);
        }
        while (v37);
      }
      uint64_t v17 = (_OWORD *)((char *)v17 + v14);
      CFTypeRef v18 = (_OWORD *)((char *)v18 + v15);
      CFIndex v19 = (int8x16_t *)((char *)v19 + v16);
      --v12;
    }
    while (v12);
    uint64_t v40 = a2 >> 1;
    uint64_t v41 = a1 >> 1;
    uint64_t v42 = a3[1] - 2 * v41;
    uint64_t v43 = a5[1] - 2 * v41;
    uint64_t v44 = a7[1] - 2 * v41;
    CMTimeRange v45 = *(uint8x16_t **)(a4 + 8);
    CMTime v46 = *(int16x8_t **)(a6 + 8);
    uint64_t v47 = *(void *)(a8 + 8);
    do
    {
      for (uint64_t k = v41 >> 5; k; v47 += 64)
      {
        uint8x16_t v49 = *v45;
        uint8x16_t v50 = v45[1];
        uint8x16_t v51 = v45[2];
        uint8x16_t v52 = v45[3];
        v45 += 4;
        uint8x16_t v53 = *(uint8x16_t *)v46;
        uint8x16_t v54 = (uint8x16_t)v46[1];
        uint8x16_t v55 = (uint8x16_t)v46[2];
        uint8x16_t v56 = (uint8x16_t)v46[3];
        v46 += 4;
        int16x8_t v57 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v49.i8);
        int16x8_t v58 = (int16x8_t)vmovl_high_u8(v49);
        int16x8_t v59 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v50.i8);
        int16x8_t v60 = (int16x8_t)vmovl_high_u8(v50);
        int16x8_t v61 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v53.i8);
        int16x8_t v62 = (int16x8_t)vmovl_high_u8(v53);
        int16x8_t v10 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v55.i8);
        int16x8_t v9 = (int16x8_t)vshrn_high_n_s16(vshrn_n_s16(vmlaq_lane_s16(vmulq_n_s16(v57, a9.i16[0]), v61, *(int16x4_t *)a9.i8, 1), 8uLL), vmlaq_lane_s16(vmulq_n_s16(v58, a9.i16[0]), v62, *(int16x4_t *)a9.i8, 1), 8uLL);
        --k;
        *(int16x8_t *)uint64_t v47 = v9;
        *(int8x16_t *)(v47 + 16) = vshrn_high_n_s16(vshrn_n_s16(vmlaq_lane_s16(vmulq_n_s16(v59, a9.i16[0]), (int16x8_t)vmovl_u8(*(uint8x8_t *)v54.i8), *(int16x4_t *)a9.i8, 1), 8uLL), vmlaq_lane_s16(vmulq_n_s16(v60, a9.i16[0]), (int16x8_t)vmovl_high_u8(v54), *(int16x4_t *)a9.i8, 1), 8uLL);
        *(int8x16_t *)(v47 + 32) = vshrn_high_n_s16(vshrn_n_s16(vmlaq_lane_s16(vmulq_n_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)v51.i8), a9.i16[0]), v10, *(int16x4_t *)a9.i8, 1), 8uLL), vmlaq_lane_s16(vmulq_n_s16((int16x8_t)vmovl_high_u8(v51), a9.i16[0]), (int16x8_t)vmovl_high_u8(v55), *(int16x4_t *)a9.i8, 1), 8uLL);
        *(int8x16_t *)(v47 + 48) = vshrn_high_n_s16(vshrn_n_s16(vmlaq_lane_s16(vmulq_n_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)v52.i8), a9.i16[0]), (int16x8_t)vmovl_u8(*(uint8x8_t *)v56.i8), *(int16x4_t *)a9.i8, 1), 8uLL), vmlaq_lane_s16(vmulq_n_s16((int16x8_t)vmovl_high_u8(v52), a9.i16[0]), (int16x8_t)vmovl_high_u8(v56), *(int16x4_t *)a9.i8, 1), 8uLL);
      }
      for (uint64_t m = (v41 & 0x1F) >> 3; m; v47 += 16)
      {
        uint8x16_t v64 = *v45++;
        int16x8_t v10 = *v46++;
        int16x8_t v9 = (int16x8_t)vshrn_high_n_s16(vshrn_n_s16(vmlaq_lane_s16(vmulq_n_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)v64.i8), a9.i16[0]), (int16x8_t)vmovl_u8(*(uint8x8_t *)v10.i8), *(int16x4_t *)a9.i8, 1), 8uLL), vmlaq_lane_s16(vmulq_n_s16((int16x8_t)vmovl_high_u8(v64), a9.i16[0]), (int16x8_t)vmovl_high_u8((uint8x16_t)v10), *(int16x4_t *)a9.i8, 1), 8uLL);
        --m;
        *(int16x8_t *)uint64_t v47 = v9;
      }
      uint64_t v65 = v41 & 7;
      if ((v41 & 7) != 0)
      {
        do
        {
          __int16 v66 = v45->i16[0];
          CMTimeRange v45 = (uint8x16_t *)((char *)v45 + 2);
          v9.i16[0] = v66;
          __int16 v67 = v46->i16[0];
          CMTime v46 = (int16x8_t *)((char *)v46 + 2);
          v10.i16[0] = v67;
          *(int8x8_t *)v9.i8 = vshrn_n_s16(vmlaq_lane_s16(vmulq_n_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)v9.i8), a9.i16[0]), (int16x8_t)vmovl_u8(*(uint8x8_t *)v10.i8), *(int16x4_t *)a9.i8, 1), 8uLL);
          --v65;
          *(_WORD *)uint64_t v47 = v9.i16[0];
          v47 += 2;
        }
        while (v65);
      }
      CMTimeRange v45 = (uint8x16_t *)((char *)v45 + v42);
      CMTime v46 = (int16x8_t *)((char *)v46 + v43);
      v47 += v44;
      --v40;
    }
    while (v40);
  }
  return 0;
}

uint64_t bvc_SimpleMixingOpaque_420v_420v_420v_arm(uint64_t a1, uint64_t a2, void *a3, long long **a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8)
{
  if (a2)
  {
    uint64_t v10 = a2;
    uint64_t v11 = *a3 - a1;
    uint64_t v12 = *a7 - a1;
    int16x8_t v13 = *a4;
    uint64_t v14 = *(_OWORD **)a8;
    do
    {
      for (uint64_t i = a1 >> 6; i; v14 += 4)
      {
        long long v16 = *v13;
        long long v17 = v13[1];
        long long v18 = v13[2];
        long long v19 = v13[3];
        v13 += 4;
        --i;
        *uint64_t v14 = v16;
        v14[1] = v17;
        v14[2] = v18;
        v14[3] = v19;
      }
      for (j = (a1 & 0x3F) >> 3; j; uint64_t v14 = (_OWORD *)((char *)v14 + 8))
      {
        uint64_t v21 = *(void *)v13;
        int16x8_t v13 = (long long *)((char *)v13 + 8);
        --j;
        *(void *)uint64_t v14 = v21;
      }
      uint64_t v22 = a1 & 7;
      if ((a1 & 7) != 0)
      {
        do
        {
          char v23 = *(unsigned char *)v13;
          int16x8_t v13 = (long long *)((char *)v13 + 1);
          --v22;
          *(unsigned char *)uint64_t v14 = v23;
          uint64_t v14 = (_OWORD *)((char *)v14 + 1);
        }
        while (v22);
      }
      int16x8_t v13 = (long long *)((char *)v13 + v11);
      v9 += v8;
      uint64_t v14 = (_OWORD *)((char *)v14 + v12);
      --v10;
    }
    while (v10);
    uint64_t v24 = a2 >> 1;
    uint64_t v25 = a1 >> 1;
    uint64_t v26 = a3[1] - 2 * v25;
    uint64_t v27 = a7[1] - 2 * v25;
    uint8x16_t v28 = a4[1];
    int16x8_t v29 = *(_OWORD **)(a8 + 8);
    do
    {
      for (uint64_t k = v25 >> 5; k; v29 += 4)
      {
        long long v31 = *v28;
        long long v32 = v28[1];
        long long v33 = v28[2];
        long long v34 = v28[3];
        v28 += 4;
        --k;
        *int16x8_t v29 = v31;
        v29[1] = v32;
        v29[2] = v33;
        v29[3] = v34;
      }
      for (uint64_t m = (v25 & 0x1F) >> 3; m; ++v29)
      {
        long long v36 = *v28++;
        --m;
        *int16x8_t v29 = v36;
      }
      uint64_t v37 = v25 & 7;
      if ((v25 & 7) != 0)
      {
        do
        {
          __int16 v38 = *(_WORD *)v28;
          uint8x16_t v28 = (long long *)((char *)v28 + 2);
          --v37;
          *(_WORD *)int16x8_t v29 = v38;
          int16x8_t v29 = (_OWORD *)((char *)v29 + 2);
        }
        while (v37);
      }
      uint8x16_t v28 = (long long *)((char *)v28 + v26);
      v9 += v8;
      int16x8_t v29 = (_OWORD *)((char *)v29 + v27);
      --v24;
    }
    while (v24);
  }
  return 0;
}

uint64_t bvc_FullCompositionYInner_420v_420v_arm(uint64_t a1, unsigned __int16 a2, uint64_t *a3, uint64_t a4, uint64_t a5, signed __int32 a6, int *a7, int *a8, int32x4_t a9, int a10, int a11, int *a12, int *a13, unsigned int a14, unsigned int a15, int a16, int a17)
{
  if (a1)
  {
    a9.i16[0] = a2;
    a9.i16[1] = 256 - a2;
    a9.i32[1] = a6;
    a9.i32[2] = 4;
    uint64_t v19 = *a3;
    int v20 = *a7;
    int v21 = *a8;
    int v22 = *a12;
    int v23 = *a13;
    v24.i32[0] = 0;
    v24.i32[1] = a14;
    int32x4_t v25 = vshlq_n_s32(vdupq_n_s32(a14), 2uLL);
    v26.i32[0] = 0;
    v26.i32[1] = a15;
    int32x4_t v27 = vshlq_n_s32(vdupq_n_s32(a15), 2uLL);
    do
    {
      uint64_t v28 = (v20 >> 16);
      int16x8_t v29 = (uint8x8_t *)(v19 + v28);
      unsigned int v30 = v22 + a14 * v28;
      unsigned int v31 = v23 + a15 * v28;
      LODWORD(v28) = (v21 >> 16) - v28;
      int v32 = v28 & 0xF;
      int v33 = (int)v28 >> 4;
      int32x4_t v34 = vdupq_n_s32(v31);
      int32x4_t v35 = vdupq_n_s32(v30);
      if (v33)
      {
        v26.i32[3] = 3 * a15;
        v26.i32[2] = 2 * a15;
        int32x4_t v34 = vaddq_s32(v34, v26);
        int32x4_t v36 = vaddq_s32(v34, v27);
        int32x4_t v37 = vaddq_s32(v36, v27);
        int32x4_t v38 = vaddq_s32(v37, v27);
        v24.i32[3] = 3 * a14;
        v24.i32[2] = 2 * a14;
        int32x4_t v35 = vaddq_s32(v35, v24);
        int32x4_t v39 = vaddq_s32(v35, v25);
        int32x4_t v40 = vaddq_s32(v39, v25);
        int32x4_t v41 = vaddq_s32(v40, v25);
        do
        {
          int16x8_t v42 = (int16x8_t)vsraq_n_u32((uint32x4_t)vmulq_lane_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v34, 0x10uLL), *(int32x2_t *)a9.i8, 1), (uint32x4_t)v35, 0x10uLL);
          int16x8_t v43 = (int16x8_t)vsraq_n_u32((uint32x4_t)vmulq_lane_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v36, 0x10uLL), *(int32x2_t *)a9.i8, 1), (uint32x4_t)v39, 0x10uLL);
          uint32x4_t v44 = vsraq_n_u32((uint32x4_t)vmulq_lane_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v37, 0x10uLL), *(int32x2_t *)a9.i8, 1), (uint32x4_t)v40, 0x10uLL);
          uint32x4_t v45 = vsraq_n_u32((uint32x4_t)vmulq_lane_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v38, 0x10uLL), *(int32x2_t *)a9.i8, 1), (uint32x4_t)v41, 0x10uLL);
          v42.i16[0] = *(unsigned __int8 *)(v42.u32[0] + a5);
          v42.i16[1] = *(unsigned __int8 *)(v42.u32[1] + a5);
          v42.i16[2] = *(unsigned __int8 *)(v42.u32[2] + a5);
          v42.i16[3] = *(unsigned __int8 *)(v42.u32[3] + a5);
          v42.i16[4] = *(unsigned __int8 *)(v43.u32[0] + a5);
          v42.i16[5] = *(unsigned __int8 *)(v43.u32[1] + a5);
          v42.i16[6] = *(unsigned __int8 *)(v43.u32[2] + a5);
          v42.i16[7] = *(unsigned __int8 *)(v43.u32[3] + a5);
          v43.i16[0] = *(unsigned __int8 *)(v44.u32[0] + a5);
          v43.i16[1] = *(unsigned __int8 *)(v44.u32[1] + a5);
          v43.i16[2] = *(unsigned __int8 *)(v44.u32[2] + a5);
          v43.i16[3] = *(unsigned __int8 *)(v44.u32[3] + a5);
          v43.i16[4] = *(unsigned __int8 *)(v45.u32[0] + a5);
          v43.i16[5] = *(unsigned __int8 *)(v45.u32[1] + a5);
          v43.i16[6] = *(unsigned __int8 *)(v45.u32[2] + a5);
          v43.i16[7] = *(unsigned __int8 *)(v45.u32[3] + a5);
          int32x4_t v35 = vmlaq_laneq_s32(v35, v25, a9, 2);
          int32x4_t v39 = vmlaq_laneq_s32(v39, v25, a9, 2);
          int32x4_t v40 = vmlaq_laneq_s32(v40, v25, a9, 2);
          int32x4_t v41 = vmlaq_laneq_s32(v41, v25, a9, 2);
          int32x4_t v34 = vmlaq_laneq_s32(v34, v27, a9, 2);
          int32x4_t v36 = vmlaq_laneq_s32(v36, v27, a9, 2);
          int32x4_t v37 = vmlaq_laneq_s32(v37, v27, a9, 2);
          int32x4_t v38 = vmlaq_laneq_s32(v38, v27, a9, 2);
          int16x8_t v18 = (int16x8_t)vmovl_u8(*v29);
          int16x4_t v17 = (int16x4_t)vshrn_n_s16(vmlaq_lane_s16(vmulq_n_s16(v42, a9.i16[0]), v18, *(int16x4_t *)a9.i8, 1), 8uLL);
          *(int8x8_t *)v43.i8 = vshrn_n_s16(vmlaq_lane_s16(vmulq_n_s16(v43, a9.i16[0]), (int16x8_t)vmovl_high_u8(*(uint8x16_t *)v29->i8), *(int16x4_t *)a9.i8, 1), 8uLL);
          --v33;
          *int16x8_t v29 = (uint8x8_t)v17;
          v29[1] = *(uint8x8_t *)v43.i8;
          v29 += 2;
        }
        while (v33);
      }
      if (v32)
      {
        uint64_t v46 = v35.u32[0];
        int v47 = v34.i32[0];
        do
        {
          uint64_t v48 = a5 + (v46 >> 16);
          uint64_t v46 = v46 + a14;
          v18.i8[0] = v29->i8[0];
          uint8x16_t v49 = (__int8 *)(v48 + (v47 >> 16) * (uint64_t)a6);
          v47 += a15;
          v17.i8[0] = *v49;
          --v32;
          int16x4_t v17 = vmla_lane_s16(vmul_n_s16(v17, a9.i16[0]), *(int16x4_t *)v18.i8, *(int16x4_t *)a9.i8, 1);
          v29->i8[0] = v17.i8[1];
          int16x8_t v29 = (uint8x8_t *)((char *)v29 + 1);
        }
        while (v32);
      }
      --a1;
      v19 += a4;
      v20 += a10;
      v21 += a11;
      v22 += a16;
      v23 += a17;
    }
    while (a1);
    *a3 = v19;
    *a7 = v20;
    *a8 = v21;
    *a12 = v22;
    *a13 = v23;
  }
  return 0;
}

uint64_t bvc_FullCompositionCbCrInner_420v_420v_arm(uint64_t a1, unsigned __int16 a2, uint64_t *a3, uint64_t a4, uint64_t a5, signed __int32 a6, int *a7, int *a8, int32x4_t a9, int a10, int a11, int *a12, int *a13, unsigned int a14, unsigned int a15, int a16, int a17)
{
  if (a1)
  {
    a9.i16[0] = a2;
    a9.i16[1] = 256 - a2;
    a9.i32[1] = a6;
    a9.i32[2] = 2;
    uint64_t v19 = *a3;
    int v20 = *a7;
    int v21 = *a8;
    int v22 = *a12;
    int v23 = *a13;
    v24.i32[0] = 0;
    v24.i32[1] = a14;
    int32x4_t v25 = vshlq_n_s32(vdupq_n_s32(a14), 2uLL);
    v26.i32[0] = 0;
    v26.i32[1] = a15;
    int32x4_t v27 = vshlq_n_s32(vdupq_n_s32(a15), 2uLL);
    do
    {
      uint64_t v28 = (v20 >> 16);
      int16x8_t v29 = (uint8x8_t *)(v19 + 2 * v28);
      unsigned int v30 = v22 + a14 * v28;
      unsigned int v31 = v23 + a15 * v28;
      LODWORD(v28) = (v21 >> 16) - v28;
      int v32 = v28 & 7;
      int v33 = (int)v28 >> 3;
      int32x4_t v34 = vdupq_n_s32(v31);
      int32x4_t v35 = vdupq_n_s32(v30);
      if (v33)
      {
        v26.i32[3] = 3 * a15;
        v26.i32[2] = 2 * a15;
        int32x4_t v34 = vaddq_s32(v34, v26);
        int32x4_t v36 = vaddq_s32(v34, v27);
        v24.i32[3] = 3 * a14;
        v24.i32[2] = 2 * a14;
        int32x4_t v35 = vaddq_s32(v35, v24);
        int32x4_t v37 = vaddq_s32(v35, v25);
        do
        {
          int32x4_t v38 = vmlaq_lane_s32(vshlq_n_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v35, 0x10uLL), 1uLL), (int32x4_t)vshrq_n_u32((uint32x4_t)v34, 0x10uLL), *(int32x2_t *)a9.i8, 1);
          int32x4_t v39 = vmlaq_lane_s32(vshlq_n_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v37, 0x10uLL), 1uLL), (int32x4_t)vshrq_n_u32((uint32x4_t)v36, 0x10uLL), *(int32x2_t *)a9.i8, 1);
          v38.i16[0] = *(_WORD *)(v38.u32[0] + a5);
          v38.i16[1] = *(_WORD *)(v38.u32[1] + a5);
          v38.i16[2] = *(_WORD *)(v38.u32[2] + a5);
          v38.i16[3] = *(_WORD *)(v38.u32[3] + a5);
          v39.i16[0] = *(_WORD *)(v39.u32[0] + a5);
          v39.i16[1] = *(_WORD *)(v39.u32[1] + a5);
          v39.i16[2] = *(_WORD *)(v39.u32[2] + a5);
          v39.i16[3] = *(_WORD *)(v39.u32[3] + a5);
          int32x4_t v35 = vmlaq_laneq_s32(v35, v25, a9, 2);
          int32x4_t v37 = vmlaq_laneq_s32(v37, v25, a9, 2);
          int32x4_t v34 = vmlaq_laneq_s32(v34, v27, a9, 2);
          int32x4_t v36 = vmlaq_laneq_s32(v36, v27, a9, 2);
          int16x8_t v18 = (int16x8_t)vmovl_u8(*v29);
          uint8x8_t v17 = (uint8x8_t)vshrn_n_s16(vmlaq_lane_s16(vmulq_n_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)v38.i8), a9.i16[0]), v18, *(int16x4_t *)a9.i8, 1), 8uLL);
          *(int8x8_t *)v39.i8 = vshrn_n_s16(vmlaq_lane_s16(vmulq_n_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)v39.i8), a9.i16[0]), (int16x8_t)vmovl_high_u8(*(uint8x16_t *)v29->i8), *(int16x4_t *)a9.i8, 1), 8uLL);
          --v33;
          *int16x8_t v29 = v17;
          v29[1] = *(uint8x8_t *)v39.i8;
          v29 += 2;
        }
        while (v33);
      }
      if (v32)
      {
        __int32 v40 = v35.i32[0];
        int v41 = v34.i32[0];
        do
        {
          uint64_t v42 = v40 & 0xFFFF0000;
          v40 += a14;
          v18.i16[0] = v29->i16[0];
          v18.i64[0] = vmovl_u8(*(uint8x8_t *)v18.i8).u64[0];
          int16x8_t v43 = (__int16 *)(a5 + (v42 >> 15) + (v41 >> 16) * (uint64_t)a6);
          v41 += a15;
          v17.i16[0] = *v43;
          --v32;
          int16x8_t v44 = (int16x8_t)vmovl_u8(v17);
          *(int16x4_t *)v44.i8 = vmla_lane_s16(vmul_n_s16(*(int16x4_t *)v44.i8, a9.i16[0]), *(int16x4_t *)v18.i8, *(int16x4_t *)a9.i8, 1);
          uint8x8_t v17 = (uint8x8_t)vshrn_n_s16(v44, 8uLL);
          v29->i16[0] = v17.i16[0];
          int16x8_t v29 = (uint8x8_t *)((char *)v29 + 2);
        }
        while (v32);
      }
      --a1;
      v19 += a4;
      v20 += a10;
      v21 += a11;
      v22 += a16;
      v23 += a17;
    }
    while (a1);
    *a3 = v19;
    *a7 = v20;
    *a8 = v21;
    *a12 = v22;
    *a13 = v23;
  }
  return 0;
}

uint64_t bvc_FullCompositionOpaqueYInner_420v_420v_arm(uint64_t a1, unsigned __int16 a2, uint64_t *a3, uint64_t a4, uint64_t a5, signed __int32 a6, int *a7, int *a8, int32x4_t a9, int a10, int a11, int *a12, int *a13, unsigned int a14, unsigned int a15, int a16, int a17)
{
  if (a1)
  {
    a9.i16[0] = a2;
    a9.i16[1] = 256 - a2;
    a9.i32[1] = a6;
    a9.i32[2] = 4;
    uint64_t v17 = *a3;
    int v18 = *a7;
    int v19 = *a8;
    int v20 = *a12;
    int v21 = *a13;
    v22.i32[0] = 0;
    v22.i32[1] = a14;
    int32x4_t v23 = vshlq_n_s32(vdupq_n_s32(a14), 2uLL);
    v24.i32[0] = 0;
    v24.i32[1] = a15;
    int32x4_t v25 = vshlq_n_s32(vdupq_n_s32(a15), 2uLL);
    do
    {
      uint64_t v26 = (v18 >> 16);
      int32x4_t v27 = (int8x8_t *)(v17 + v26);
      unsigned int v28 = v20 + a14 * v26;
      unsigned int v29 = v21 + a15 * v26;
      LODWORD(v26) = (v19 >> 16) - v26;
      int v30 = v26 & 0xF;
      int v31 = (int)v26 >> 4;
      int32x4_t v32 = vdupq_n_s32(v29);
      int32x4_t v33 = vdupq_n_s32(v28);
      if (v31)
      {
        v24.i32[3] = 3 * a15;
        v24.i32[2] = 2 * a15;
        int32x4_t v32 = vaddq_s32(v32, v24);
        int32x4_t v34 = vaddq_s32(v32, v25);
        int32x4_t v35 = vaddq_s32(v34, v25);
        int32x4_t v36 = vaddq_s32(v35, v25);
        v22.i32[3] = 3 * a14;
        v22.i32[2] = 2 * a14;
        int32x4_t v33 = vaddq_s32(v33, v22);
        int32x4_t v37 = vaddq_s32(v33, v23);
        int32x4_t v38 = vaddq_s32(v37, v23);
        int32x4_t v39 = vaddq_s32(v38, v23);
        do
        {
          int16x8_t v40 = (int16x8_t)vsraq_n_u32((uint32x4_t)vmulq_lane_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v32, 0x10uLL), *(int32x2_t *)a9.i8, 1), (uint32x4_t)v33, 0x10uLL);
          int16x8_t v41 = (int16x8_t)vsraq_n_u32((uint32x4_t)vmulq_lane_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v34, 0x10uLL), *(int32x2_t *)a9.i8, 1), (uint32x4_t)v37, 0x10uLL);
          uint32x4_t v42 = vsraq_n_u32((uint32x4_t)vmulq_lane_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v35, 0x10uLL), *(int32x2_t *)a9.i8, 1), (uint32x4_t)v38, 0x10uLL);
          uint32x4_t v43 = vsraq_n_u32((uint32x4_t)vmulq_lane_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v36, 0x10uLL), *(int32x2_t *)a9.i8, 1), (uint32x4_t)v39, 0x10uLL);
          v40.i16[0] = *(unsigned __int8 *)(v40.u32[0] + a5);
          v40.i16[1] = *(unsigned __int8 *)(v40.u32[1] + a5);
          v40.i16[2] = *(unsigned __int8 *)(v40.u32[2] + a5);
          v40.i16[3] = *(unsigned __int8 *)(v40.u32[3] + a5);
          v40.i16[4] = *(unsigned __int8 *)(v41.u32[0] + a5);
          v40.i16[5] = *(unsigned __int8 *)(v41.u32[1] + a5);
          v40.i16[6] = *(unsigned __int8 *)(v41.u32[2] + a5);
          v40.i16[7] = *(unsigned __int8 *)(v41.u32[3] + a5);
          v41.i16[0] = *(unsigned __int8 *)(v42.u32[0] + a5);
          v41.i16[1] = *(unsigned __int8 *)(v42.u32[1] + a5);
          v41.i16[2] = *(unsigned __int8 *)(v42.u32[2] + a5);
          v41.i16[3] = *(unsigned __int8 *)(v42.u32[3] + a5);
          v41.i16[4] = *(unsigned __int8 *)(v43.u32[0] + a5);
          v41.i16[5] = *(unsigned __int8 *)(v43.u32[1] + a5);
          v41.i16[6] = *(unsigned __int8 *)(v43.u32[2] + a5);
          v41.i16[7] = *(unsigned __int8 *)(v43.u32[3] + a5);
          int32x4_t v33 = vmlaq_laneq_s32(v33, v23, a9, 2);
          int32x4_t v37 = vmlaq_laneq_s32(v37, v23, a9, 2);
          int32x4_t v38 = vmlaq_laneq_s32(v38, v23, a9, 2);
          int32x4_t v39 = vmlaq_laneq_s32(v39, v23, a9, 2);
          int32x4_t v32 = vmlaq_laneq_s32(v32, v25, a9, 2);
          int32x4_t v34 = vmlaq_laneq_s32(v34, v25, a9, 2);
          int32x4_t v35 = vmlaq_laneq_s32(v35, v25, a9, 2);
          int32x4_t v36 = vmlaq_laneq_s32(v36, v25, a9, 2);
          --v31;
          *int32x4_t v27 = vmovn_s16(v40);
          v27[1] = vmovn_s16(v41);
          v27 += 2;
        }
        while (v31);
      }
      if (v30)
      {
        uint64_t v44 = v33.u32[0];
        int v45 = v32.i32[0];
        do
        {
          uint64_t v46 = a5 + (v44 >> 16);
          uint64_t v44 = v44 + a14;
          int v47 = (__int8 *)(v46 + (v45 >> 16) * (uint64_t)a6);
          v45 += a15;
          --v30;
          v27->i8[0] = *v47;
          int32x4_t v27 = (int8x8_t *)((char *)v27 + 1);
        }
        while (v30);
      }
      --a1;
      v17 += a4;
      v18 += a10;
      v19 += a11;
      v20 += a16;
      v21 += a17;
    }
    while (a1);
    *a3 = v17;
    *a7 = v18;
    *a8 = v19;
    *a12 = v20;
    *a13 = v21;
  }
  return 0;
}

uint64_t bvc_FullCompositionOpaqueCbCrInner_420v_420v_arm(uint64_t a1, unsigned __int16 a2, uint64_t *a3, uint64_t a4, uint64_t a5, signed __int32 a6, int *a7, int *a8, int32x4_t a9, int a10, int a11, int *a12, int *a13, unsigned int a14, unsigned int a15, int a16, int a17)
{
  if (a1)
  {
    a9.i16[0] = a2;
    a9.i16[1] = 256 - a2;
    a9.i32[1] = a6;
    a9.i32[2] = 2;
    uint64_t v17 = *a3;
    int v18 = *a7;
    int v19 = *a8;
    int v20 = *a12;
    int v21 = *a13;
    v22.i32[0] = 0;
    v22.i32[1] = a14;
    int32x4_t v23 = vshlq_n_s32(vdupq_n_s32(a14), 2uLL);
    v24.i32[0] = 0;
    v24.i32[1] = a15;
    int32x4_t v25 = vshlq_n_s32(vdupq_n_s32(a15), 2uLL);
    do
    {
      uint64_t v26 = (v18 >> 16);
      int32x4_t v27 = (void *)(v17 + 2 * v26);
      unsigned int v28 = v20 + a14 * v26;
      unsigned int v29 = v21 + a15 * v26;
      LODWORD(v26) = (v19 >> 16) - v26;
      int v30 = v26 & 7;
      int v31 = (int)v26 >> 3;
      int32x4_t v32 = vdupq_n_s32(v29);
      int32x4_t v33 = vdupq_n_s32(v28);
      if (v31)
      {
        v24.i32[3] = 3 * a15;
        v24.i32[2] = 2 * a15;
        int32x4_t v32 = vaddq_s32(v32, v24);
        int32x4_t v34 = vaddq_s32(v32, v25);
        v22.i32[3] = 3 * a14;
        v22.i32[2] = 2 * a14;
        int32x4_t v33 = vaddq_s32(v33, v22);
        int32x4_t v35 = vaddq_s32(v33, v23);
        do
        {
          int32x4_t v36 = vmlaq_lane_s32(vshlq_n_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v33, 0x10uLL), 1uLL), (int32x4_t)vshrq_n_u32((uint32x4_t)v32, 0x10uLL), *(int32x2_t *)a9.i8, 1);
          int32x4_t v37 = vmlaq_lane_s32(vshlq_n_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v35, 0x10uLL), 1uLL), (int32x4_t)vshrq_n_u32((uint32x4_t)v34, 0x10uLL), *(int32x2_t *)a9.i8, 1);
          v36.i16[0] = *(_WORD *)(v36.u32[0] + a5);
          v36.i16[1] = *(_WORD *)(v36.u32[1] + a5);
          v36.i16[2] = *(_WORD *)(v36.u32[2] + a5);
          v36.i16[3] = *(_WORD *)(v36.u32[3] + a5);
          v37.i16[0] = *(_WORD *)(v37.u32[0] + a5);
          v37.i16[1] = *(_WORD *)(v37.u32[1] + a5);
          v37.i16[2] = *(_WORD *)(v37.u32[2] + a5);
          v37.i16[3] = *(_WORD *)(v37.u32[3] + a5);
          int32x4_t v33 = vmlaq_laneq_s32(v33, v23, a9, 2);
          int32x4_t v35 = vmlaq_laneq_s32(v35, v23, a9, 2);
          int32x4_t v32 = vmlaq_laneq_s32(v32, v25, a9, 2);
          int32x4_t v34 = vmlaq_laneq_s32(v34, v25, a9, 2);
          --v31;
          *int32x4_t v27 = v36.i64[0];
          v27[1] = v37.i64[0];
          v27 += 2;
        }
        while (v31);
      }
      if (v30)
      {
        __int32 v38 = v33.i32[0];
        int v39 = v32.i32[0];
        do
        {
          uint64_t v40 = v38 & 0xFFFF0000;
          v38 += a14;
          int16x8_t v41 = (_WORD *)(a5 + (v40 >> 15) + (v39 >> 16) * (uint64_t)a6);
          v39 += a15;
          --v30;
          *(_WORD *)int32x4_t v27 = *v41;
          int32x4_t v27 = (void *)((char *)v27 + 2);
        }
        while (v30);
      }
      --a1;
      v17 += a4;
      v18 += a10;
      v19 += a11;
      v20 += a16;
      v21 += a17;
    }
    while (a1);
    *a3 = v17;
    *a7 = v18;
    *a8 = v19;
    *a12 = v20;
    *a13 = v21;
  }
  return 0;
}

uint64_t bvc_SimpleMixing_32BGRA_420v601_420v601_arm(uint64_t a1, uint64_t a2, void *a3, const char **a4, void *a5, uint8x16_t **a6, uint64_t *a7, int8x8_t **a8, float a9)
{
  uint64_t v11 = a2 >> 1;
  if (v11)
  {
    uint64_t v12 = a1 >> 1;
    v28.i16[0] = vcvts_n_u32_f32(a9, 8uLL);
    v28.i16[1] = (v28.u16[0] << 8) / 0xFFu;
    int16x8_t v13 = *a4;
    uint64_t v14 = &(*a4)[*a3];
    uint64_t v15 = 2 * *a3 - 8 * v12;
    long long v16 = *a6;
    uint64_t v17 = (const char *)a6[1];
    int v18 = (uint8x16_t *)((char *)*a6 + *a5);
    uint64_t v19 = 2 * *a5 - 2 * v12;
    uint64_t v20 = a5[1] - 2 * v12;
    uint64_t v21 = *a7;
    int32x4_t v22 = *a8;
    uint64_t v23 = a7[1];
    int32x4_t v24 = a8[1];
    int32x4_t v25 = (int8x8_t *)((char *)v22 + *a7);
    uint64_t v26 = 2 * v21 - 2 * v12;
    uint64_t v27 = v23 - 2 * v12;
    v28.i32[1] = 1082132552;
    v28.i64[1] = 0xED060C93407C20DCLL;
    do
    {
      for (uint64_t i = v12 >> 3; i; v24 += 2)
      {
        int8x16x4_t v108 = vld4q_s8(v13);
        v13 += 64;
        int8x16x4_t v109 = vld4q_s8(v14);
        v14 += 64;
        int16x8_t v30 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v108.val[0].i8);
        int16x8_t v31 = (int16x8_t)vmovl_high_u8((uint8x16_t)v108.val[0]);
        int16x8_t v32 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v108.val[1].i8);
        int16x8_t v33 = (int16x8_t)vmovl_high_u8((uint8x16_t)v108.val[1]);
        int16x8_t v34 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v109.val[0].i8);
        int16x8_t v35 = (int16x8_t)vmovl_high_u8((uint8x16_t)v109.val[0]);
        int16x8_t v36 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v109.val[1].i8);
        int16x8_t v37 = (int16x8_t)vmovl_high_u8((uint8x16_t)v109.val[1]);
        int32x4_t v38 = vmull_laneq_s16(*(int16x4_t *)v30.i8, v28, 6);
        int32x4_t v39 = vmull_high_laneq_s16(v30, v28, 6);
        int32x4_t v40 = vmull_laneq_s16(*(int16x4_t *)v31.i8, v28, 6);
        int32x4_t v41 = vmull_high_laneq_s16(v31, v28, 6);
        int32x4_t v42 = vmull_laneq_s16(*(int16x4_t *)v34.i8, v28, 6);
        int32x4_t v43 = vmull_high_laneq_s16(v34, v28, 6);
        int32x4_t v44 = vmull_laneq_s16(*(int16x4_t *)v35.i8, v28, 6);
        int32x4_t v45 = vmull_high_laneq_s16(v35, v28, 6);
        int16x8_t v46 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v108.val[2].i8);
        int16x8_t v47 = (int16x8_t)vmovl_high_u8((uint8x16_t)v108.val[2]);
        int16x8_t v48 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v109.val[2].i8);
        int16x8_t v49 = (int16x8_t)vmovl_high_u8((uint8x16_t)v109.val[2]);
        int32x4_t v50 = vmlal_laneq_s16(v38, *(int16x4_t *)v32.i8, v28, 5);
        int32x4_t v51 = vmlal_high_laneq_s16(v39, v32, v28, 5);
        int32x4_t v52 = vmlal_laneq_s16(v40, *(int16x4_t *)v33.i8, v28, 5);
        int32x4_t v53 = vmlal_high_laneq_s16(v41, v33, v28, 5);
        int32x4_t v54 = vmlal_laneq_s16(v42, *(int16x4_t *)v36.i8, v28, 5);
        int32x4_t v55 = vmlal_high_laneq_s16(v43, v36, v28, 5);
        int32x4_t v56 = vmlal_laneq_s16(v44, *(int16x4_t *)v37.i8, v28, 5);
        int32x4_t v57 = vmlal_high_laneq_s16(v45, v37, v28, 5);
        int16x8_t v58 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v108.val[3].i8);
        int16x8_t v59 = (int16x8_t)vmovl_high_u8((uint8x16_t)v108.val[3]);
        int16x8_t v60 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v109.val[3].i8);
        int16x8_t v61 = (int16x8_t)vmovl_high_u8((uint8x16_t)v109.val[3]);
        uint8x16_t v62 = *v16++;
        uint8x16_t v63 = *v18++;
        int32x4_t v64 = vmlal_laneq_s16(v50, *(int16x4_t *)v46.i8, v28, 4);
        int32x4_t v65 = vmlal_high_laneq_s16(v51, v46, v28, 4);
        int32x4_t v66 = vmlal_laneq_s16(v52, *(int16x4_t *)v47.i8, v28, 4);
        int32x4_t v67 = vmlal_high_laneq_s16(v53, v47, v28, 4);
        int32x4_t v68 = vmlal_laneq_s16(v54, *(int16x4_t *)v48.i8, v28, 4);
        int32x4_t v69 = vmlal_high_laneq_s16(v55, v48, v28, 4);
        int32x4_t v70 = vmlal_laneq_s16(v56, *(int16x4_t *)v49.i8, v28, 4);
        int32x4_t v71 = vmlal_high_laneq_s16(v57, v49, v28, 4);
        uint16x8_t v72 = vmovl_u8(*(uint8x8_t *)v62.i8);
        uint16x8_t v73 = vmovl_high_u8(v62);
        uint16x8_t v74 = vmovl_u8(*(uint8x8_t *)v63.i8);
        uint16x8_t v75 = vmovl_high_u8(v63);
        int16x8_t v76 = vshrn_high_n_s32(vshrn_n_s32(vmlal_lane_s16(v64, *(int16x4_t *)v58.i8, *(int16x4_t *)v28.i8, 2), 0xFuLL), vmlal_high_lane_s16(v65, v58, *(int16x4_t *)v28.i8, 2), 0xFuLL);
        int16x8_t v77 = vshrn_high_n_s32(vshrn_n_s32(vmlal_lane_s16(v66, *(int16x4_t *)v59.i8, *(int16x4_t *)v28.i8, 2), 0xFuLL), vmlal_high_lane_s16(v67, v59, *(int16x4_t *)v28.i8, 2), 0xFuLL);
        int16x8_t v78 = vshrn_high_n_s32(vshrn_n_s32(vmlal_lane_s16(v68, *(int16x4_t *)v60.i8, *(int16x4_t *)v28.i8, 2), 0xFuLL), vmlal_high_lane_s16(v69, v60, *(int16x4_t *)v28.i8, 2), 0xFuLL);
        int16x8_t v79 = vshrn_high_n_s32(vshrn_n_s32(vmlal_lane_s16(v70, *(int16x4_t *)v61.i8, *(int16x4_t *)v28.i8, 2), 0xFuLL), vmlal_high_lane_s16(v71, v61, *(int16x4_t *)v28.i8, 2), 0xFuLL);
        v64.i64[0] = 0x1000000010000;
        v64.i64[1] = 0x1000000010000;
        v65.i64[0] = 0x1000000010000;
        v65.i64[1] = 0x1000000010000;
        v66.i64[0] = 0x1000000010000;
        v66.i64[1] = 0x1000000010000;
        v67.i64[0] = 0x1000000010000;
        v67.i64[1] = 0x1000000010000;
        v68.i64[0] = 0x1000000010000;
        v68.i64[1] = 0x1000000010000;
        v69.i64[0] = 0x1000000010000;
        v69.i64[1] = 0x1000000010000;
        v70.i64[0] = 0x1000000010000;
        v70.i64[1] = 0x1000000010000;
        v71.i64[0] = 0x1000000010000;
        v71.i64[1] = 0x1000000010000;
        int16x8_t v80 = vshrn_high_n_s32(vshrn_n_s32(vmulq_s32((int32x4_t)vmlsl_lane_u16((uint32x4_t)v64, *(uint16x4_t *)v58.i8, *(uint16x4_t *)v28.i8, 1), (int32x4_t)vmovl_u16(*(uint16x4_t *)v72.i8)), 8uLL), vmulq_s32((int32x4_t)vmlsl_high_lane_u16((uint32x4_t)v65, (uint16x8_t)v58, *(uint16x4_t *)v28.i8, 1), (int32x4_t)vmovl_high_u16(v72)), 8uLL);
        int16x8_t v81 = vshrn_high_n_s32(vshrn_n_s32(vmulq_s32((int32x4_t)vmlsl_lane_u16((uint32x4_t)v66, *(uint16x4_t *)v59.i8, *(uint16x4_t *)v28.i8, 1), (int32x4_t)vmovl_u16(*(uint16x4_t *)v73.i8)), 8uLL), vmulq_s32((int32x4_t)vmlsl_high_lane_u16((uint32x4_t)v67, (uint16x8_t)v59, *(uint16x4_t *)v28.i8, 1), (int32x4_t)vmovl_high_u16(v73)), 8uLL);
        int16x8_t v82 = vshrn_high_n_s32(vshrn_n_s32(vmulq_s32((int32x4_t)vmlsl_lane_u16((uint32x4_t)v70, *(uint16x4_t *)v61.i8, *(uint16x4_t *)v28.i8, 1), (int32x4_t)vmovl_u16(*(uint16x4_t *)v75.i8)), 8uLL), vmulq_s32((int32x4_t)vmlsl_high_lane_u16((uint32x4_t)v71, (uint16x8_t)v61, *(uint16x4_t *)v28.i8, 1), (int32x4_t)vmovl_high_u16(v75)), 8uLL);
        int16x8_t v83 = (int16x8_t)vpaddlq_u8((uint8x16_t)v109.val[0]);
        int16x8_t v84 = (int16x8_t)vpaddlq_u8((uint8x16_t)v109.val[1]);
        v109.val[0] = (int8x16_t)vld2_s8(v17);
        v17 += 16;
        *(int8x8_t *)v65.i8 = vaddhn_s16(v81, vmulq_n_s16(v77, v28.i16[0]));
        *(int8x8_t *)v67.i8 = vaddhn_s16(v82, vmulq_n_s16(v79, v28.i16[0]));
        int16x8_t v85 = (int16x8_t)vpaddlq_u8((uint8x16_t)v109.val[2]);
        int16x8_t v86 = (int16x8_t)vpaddlq_u8((uint8x16_t)v109.val[3]);
        *int32x4_t v22 = vaddhn_s16(v80, vmulq_n_s16(v76, v28.i16[0]));
        v22[1] = *(int8x8_t *)v65.i8;
        v22 += 2;
        *int32x4_t v25 = vaddhn_s16(vshrn_high_n_s32(vshrn_n_s32(vmulq_s32((int32x4_t)vmlsl_lane_u16((uint32x4_t)v68, *(uint16x4_t *)v60.i8, *(uint16x4_t *)v28.i8, 1), (int32x4_t)vmovl_u16(*(uint16x4_t *)v74.i8)), 8uLL), vmulq_s32((int32x4_t)vmlsl_high_lane_u16((uint32x4_t)v69, (uint16x8_t)v60, *(uint16x4_t *)v28.i8, 1), (int32x4_t)vmovl_high_u16(v74)), 8uLL), vmulq_n_s16(v78, v28.i16[0]));
        v25[1] = *(int8x8_t *)v67.i8;
        v25 += 2;
        v109.val[2] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v109.val[0].i8);
        v109.val[3] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v109.val[1].i8);
        v108.val[0] = (int8x16_t)vaddq_s16((int16x8_t)vpaddlq_u8((uint8x16_t)v108.val[0]), v83);
        v108.val[1] = (int8x16_t)vaddq_s16((int16x8_t)vpaddlq_u8((uint8x16_t)v108.val[1]), v84);
        v72.i64[0] = 0x1000000010000;
        v72.i64[1] = 0x1000000010000;
        v83.i64[0] = 0x1000000010000;
        v83.i64[1] = 0x1000000010000;
        v74.i64[0] = 0x1000000010000;
        v74.i64[1] = 0x1000000010000;
        v84.i64[0] = 0x1000000010000;
        v84.i64[1] = 0x1000000010000;
        v108.val[0] = (int8x16_t)vshrq_n_u16((uint16x8_t)v108.val[0], 2uLL);
        v108.val[1] = (int8x16_t)vshrq_n_u16((uint16x8_t)v108.val[1], 2uLL);
        v108.val[2] = (int8x16_t)vshrq_n_u16((uint16x8_t)vaddq_s16((int16x8_t)vpaddlq_u8((uint8x16_t)v108.val[2]), v85), 2uLL);
        v108.val[3] = (int8x16_t)vshrq_n_u16((uint16x8_t)vaddq_s16((int16x8_t)vpaddlq_u8((uint8x16_t)v108.val[3]), v86), 2uLL);
        int32x4_t v9 = (int32x4_t)vmlsl_high_lane_u16((uint32x4_t)v83, (uint16x8_t)v108.val[3], *(uint16x4_t *)v28.i8, 1);
        int32x4_t v10 = vmlal_lane_s16(vmlal_laneq_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v108.val[0].i8, (int16x4_t)0xF6D4D0F83838DAC4, 1), *(int16x4_t *)v108.val[1].i8, (int16x4_t)0xF6D4D0F83838DAC4, 0), *(int16x4_t *)v108.val[2].i8, v28, 7), *(int16x4_t *)v108.val[3].i8, *(int16x4_t *)v28.i8, 3);
        --i;
        *(int8x8_t *)v109.val[0].i8 = vaddhn_s16(vshrn_high_n_s32(vshrn_n_s32(vmulq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v109.val[2].i8), (int32x4_t)vmlsl_lane_u16((uint32x4_t)v72, *(uint16x4_t *)v108.val[3].i8, *(uint16x4_t *)v28.i8, 1)), 8uLL), vmulq_s32((int32x4_t)vmovl_high_u16((uint16x8_t)v109.val[2]), v9), 8uLL), vmulq_n_s16(vshrn_high_n_s32(vshrn_n_s32(v10, 0xFuLL), vmlal_high_lane_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmull_high_lane_s16(
                                                    (int16x8_t)v108.val[0],
                                                    (int16x4_t)0xF6D4D0F83838DAC4,
                                                    1),
                                                  (int16x8_t)v108.val[1],
                                                  (int16x4_t)0xF6D4D0F83838DAC4,
                                                  0),
                                                (int16x8_t)v108.val[2],
                                                v28,
                                                7),
                                              (int16x8_t)v108.val[3],
                                              *(int16x4_t *)v28.i8,
                                              3),
                                            0xFuLL),
                                          v28.i16[0]));
        *(int8x8_t *)v109.val[1].i8 = vaddhn_s16(vshrn_high_n_s32(vshrn_n_s32(vmulq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v109.val[3].i8), (int32x4_t)vmlsl_lane_u16((uint32x4_t)v74, *(uint16x4_t *)v108.val[3].i8, *(uint16x4_t *)v28.i8, 1)), 8uLL), vmulq_s32((int32x4_t)vmovl_high_u16((uint16x8_t)v109.val[3]), (int32x4_t)vmlsl_high_lane_u16((uint32x4_t)v84, (uint16x8_t)v108.val[3], *(uint16x4_t *)v28.i8, 1)), 8uLL), vmulq_n_s16(
                                          vshrn_high_n_s32(vshrn_n_s32(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v108.val[0].i8, (int16x4_t)0xF6D4D0F83838DAC4, 3), *(int16x4_t *)v108.val[1].i8, (int16x4_t)0xF6D4D0F83838DAC4, 2), *(int16x4_t *)v108.val[2].i8, (int16x4_t)0xF6D4D0F83838DAC4, 1), *(int16x4_t *)v108.val[3].i8, *(int16x4_t *)v28.i8, 3), 0xFuLL), vmlal_high_lane_s16(
                                              vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16((int16x8_t)v108.val[0], (int16x4_t)0xF6D4D0F83838DAC4, 3), (int16x8_t)v108.val[1], (int16x4_t)0xF6D4D0F83838DAC4, 2), (int16x8_t)v108.val[2], (int16x4_t)0xF6D4D0F83838DAC4, 1), (int16x8_t)v108.val[3], *(int16x4_t *)v28.i8, 3), 0xFuLL), v28.i16[0]));
        *int32x4_t v24 = vzip1_s8(*(int8x8_t *)v109.val[0].i8, *(int8x8_t *)v109.val[1].i8);
        v24[1] = vzip2_s8(*(int8x8_t *)v109.val[0].i8, *(int8x8_t *)v109.val[1].i8);
      }
      uint64_t v87 = v12 & 7;
      if ((v12 & 7) != 0)
      {
        do
        {
          int8x8_t v88 = *(int8x8_t *)v13;
          v13 += 8;
          int8x8_t v89 = v88;
          int8x8_t v90 = *(int8x8_t *)v14;
          v14 += 8;
          int8x8_t v91 = vuzp1_s8(v89, v90);
          int8x8_t v92 = vuzp2_s8(v89, v90);
          uint16x8_t v93 = vmovl_u8((uint8x8_t)vuzp1_s8(v91, v92));
          uint16x8_t v94 = vmovl_u8((uint8x8_t)vuzp2_s8(v91, v92));
          v90.i16[0] = v16->i16[0];
          long long v16 = (uint8x16_t *)((char *)v16 + 2);
          v92.i16[0] = v90.i16[0];
          v92.i16[1] = v18->i16[0];
          int v18 = (uint8x16_t *)((char *)v18 + 2);
          v95.i64[0] = 0x1000000010000;
          v95.i64[1] = 0x1000000010000;
          int16x4_t v96 = vpadd_s16(*(int16x4_t *)v93.i8, *(int16x4_t *)v93.i8);
          int16x4_t v97 = vpadd_s16((int16x4_t)v93.u64[1], (int16x4_t)v93.u64[1]);
          int16x4_t v98 = vpadd_s16(*(int16x4_t *)v94.i8, *(int16x4_t *)v94.i8);
          int16x4_t v99 = vpadd_s16((int16x4_t)v94.u64[1], (int16x4_t)v94.u64[1]);
          int16x8_t v100 = (int16x8_t)vmlal_lane_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v93.i8, v28, 6), (int16x4_t)v93.u64[1], v28, 5), *(int16x4_t *)v94.i8, v28, 4), (int16x4_t)v94.u64[1], *(int16x4_t *)v28.i8, 2);
          int16x4_t v101 = (int16x4_t)vshr_n_u16((uint16x4_t)vpadd_s16(v96, v96), 2uLL);
          int16x4_t v102 = (int16x4_t)vshr_n_u16((uint16x4_t)vpadd_s16(v97, v97), 2uLL);
          int16x4_t v103 = (int16x4_t)vshr_n_u16((uint16x4_t)vpadd_s16(v98, v98), 2uLL);
          int16x4_t v104 = (int16x4_t)vshr_n_u16((uint16x4_t)vpadd_s16(v99, v99), 2uLL);
          v90.i16[0] = *(_WORD *)v17;
          v17 += 2;
          v9.i16[0] = v90.i16[0];
          v9.i64[0] = vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v9.i8)).u64[0];
          *(int16x4_t *)v100.i8 = vadd_s16(vmul_n_s16(vshrn_n_s32((int32x4_t)v100, 0xFuLL), v28.i16[0]), vshrn_n_s32(vmulq_s32((int32x4_t)vmlsl_lane_u16(v95, (uint16x4_t)v94.u64[1], *(uint16x4_t *)v28.i8, 1), (int32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)v92))), 8uLL));
          v100.i32[0] = vshrn_n_s16(v100, 8uLL).u32[0];
          v22->i16[0] = v100.i16[0];
          int32x4_t v22 = (int8x8_t *)((char *)v22 + 2);
          v25->i16[0] = v100.i16[1];
          int32x4_t v25 = (int8x8_t *)((char *)v25 + 2);
          int16x8_t v105 = (int16x8_t)vmlal_lane_s16(vmlal_laneq_s16(vmlal_lane_s16(vmull_lane_s16(v101, (int16x4_t)0xF6D4D0F83838DAC4, 1), v102, (int16x4_t)0xF6D4D0F83838DAC4, 0), v103, v28, 7), v104, *(int16x4_t *)v28.i8, 3);
          int16x8_t v106 = (int16x8_t)vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v101, (int16x4_t)0xF6D4D0F83838DAC4, 3), v102, (int16x4_t)0xF6D4D0F83838DAC4, 2), v103, (int16x4_t)0xF6D4D0F83838DAC4, 1), v104, *(int16x4_t *)v28.i8, 3);
          v10.i64[0] = 0x1000000010000;
          v105.i32[1] = v106.i32[0];
          int32x4_t v10 = (int32x4_t)vmlsl_lane_u16((uint32x4_t)v10, (uint16x4_t)v104, *(uint16x4_t *)v28.i8, 1);
          *(int16x4_t *)v105.i8 = vshrn_n_s32((int32x4_t)v105, 0xFuLL);
          *(int32x2_t *)v10.i8 = vmul_s32(*(int32x2_t *)v9.i8, *(int32x2_t *)v10.i8);
          *(int16x4_t *)v106.i8 = vadd_s16(vshrn_n_s32(v10, 8uLL), (int16x4_t)*(_OWORD *)&vmulq_n_s16(v105, v28.i16[0]));
          v24->i16[0] = vshrn_n_s16(v106, 8uLL).u16[0];
          int32x4_t v24 = (int8x8_t *)((char *)v24 + 2);
          --v87;
        }
        while (v87);
      }
      --v11;
      int32x4_t v22 = (int8x8_t *)((char *)v22 + v26);
      int32x4_t v25 = (int8x8_t *)((char *)v25 + v26);
      int32x4_t v24 = (int8x8_t *)((char *)v24 + v27);
      v13 += v15;
      v14 += v15;
      long long v16 = (uint8x16_t *)((char *)v16 + v19);
      int v18 = (uint8x16_t *)((char *)v18 + v19);
      v17 += v20;
    }
    while (v11);
  }
  return 0;
}

uint64_t bvc_SimpleMixing_32BGRA_420v709_420v709_arm(uint64_t a1, uint64_t a2, void *a3, const char **a4, void *a5, uint8x16_t **a6, uint64_t *a7, int8x8_t **a8, float a9)
{
  uint64_t v11 = a2 >> 1;
  if (v11)
  {
    uint64_t v12 = a1 >> 1;
    v28.i16[0] = vcvts_n_u32_f32(a9, 8uLL);
    v28.i16[1] = (v28.u16[0] << 8) / 0xFFu;
    int16x8_t v13 = *a4;
    uint64_t v14 = &(*a4)[*a3];
    uint64_t v15 = 2 * *a3 - 8 * v12;
    long long v16 = *a6;
    uint64_t v17 = (const char *)a6[1];
    int v18 = (uint8x16_t *)((char *)*a6 + *a5);
    uint64_t v19 = 2 * *a5 - 2 * v12;
    uint64_t v20 = a5[1] - 2 * v12;
    uint64_t v21 = *a7;
    int32x4_t v22 = *a8;
    uint64_t v23 = a7[1];
    int32x4_t v24 = a8[1];
    int32x4_t v25 = (int8x8_t *)((char *)v22 + *a7);
    uint64_t v26 = 2 * v21 - 2 * v12;
    uint64_t v27 = v23 - 2 * v12;
    v28.i32[1] = 1082132552;
    v28.i64[1] = 0xF31E07F04E9F175FLL;
    do
    {
      for (uint64_t i = v12 >> 3; i; v24 += 2)
      {
        int8x16x4_t v108 = vld4q_s8(v13);
        v13 += 64;
        int8x16x4_t v109 = vld4q_s8(v14);
        v14 += 64;
        int16x8_t v30 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v108.val[0].i8);
        int16x8_t v31 = (int16x8_t)vmovl_high_u8((uint8x16_t)v108.val[0]);
        int16x8_t v32 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v108.val[1].i8);
        int16x8_t v33 = (int16x8_t)vmovl_high_u8((uint8x16_t)v108.val[1]);
        int16x8_t v34 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v109.val[0].i8);
        int16x8_t v35 = (int16x8_t)vmovl_high_u8((uint8x16_t)v109.val[0]);
        int16x8_t v36 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v109.val[1].i8);
        int16x8_t v37 = (int16x8_t)vmovl_high_u8((uint8x16_t)v109.val[1]);
        int32x4_t v38 = vmull_laneq_s16(*(int16x4_t *)v30.i8, v28, 6);
        int32x4_t v39 = vmull_high_laneq_s16(v30, v28, 6);
        int32x4_t v40 = vmull_laneq_s16(*(int16x4_t *)v31.i8, v28, 6);
        int32x4_t v41 = vmull_high_laneq_s16(v31, v28, 6);
        int32x4_t v42 = vmull_laneq_s16(*(int16x4_t *)v34.i8, v28, 6);
        int32x4_t v43 = vmull_high_laneq_s16(v34, v28, 6);
        int32x4_t v44 = vmull_laneq_s16(*(int16x4_t *)v35.i8, v28, 6);
        int32x4_t v45 = vmull_high_laneq_s16(v35, v28, 6);
        int16x8_t v46 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v108.val[2].i8);
        int16x8_t v47 = (int16x8_t)vmovl_high_u8((uint8x16_t)v108.val[2]);
        int16x8_t v48 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v109.val[2].i8);
        int16x8_t v49 = (int16x8_t)vmovl_high_u8((uint8x16_t)v109.val[2]);
        int32x4_t v50 = vmlal_laneq_s16(v38, *(int16x4_t *)v32.i8, v28, 5);
        int32x4_t v51 = vmlal_high_laneq_s16(v39, v32, v28, 5);
        int32x4_t v52 = vmlal_laneq_s16(v40, *(int16x4_t *)v33.i8, v28, 5);
        int32x4_t v53 = vmlal_high_laneq_s16(v41, v33, v28, 5);
        int32x4_t v54 = vmlal_laneq_s16(v42, *(int16x4_t *)v36.i8, v28, 5);
        int32x4_t v55 = vmlal_high_laneq_s16(v43, v36, v28, 5);
        int32x4_t v56 = vmlal_laneq_s16(v44, *(int16x4_t *)v37.i8, v28, 5);
        int32x4_t v57 = vmlal_high_laneq_s16(v45, v37, v28, 5);
        int16x8_t v58 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v108.val[3].i8);
        int16x8_t v59 = (int16x8_t)vmovl_high_u8((uint8x16_t)v108.val[3]);
        int16x8_t v60 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v109.val[3].i8);
        int16x8_t v61 = (int16x8_t)vmovl_high_u8((uint8x16_t)v109.val[3]);
        uint8x16_t v62 = *v16++;
        uint8x16_t v63 = *v18++;
        int32x4_t v64 = vmlal_laneq_s16(v50, *(int16x4_t *)v46.i8, v28, 4);
        int32x4_t v65 = vmlal_high_laneq_s16(v51, v46, v28, 4);
        int32x4_t v66 = vmlal_laneq_s16(v52, *(int16x4_t *)v47.i8, v28, 4);
        int32x4_t v67 = vmlal_high_laneq_s16(v53, v47, v28, 4);
        int32x4_t v68 = vmlal_laneq_s16(v54, *(int16x4_t *)v48.i8, v28, 4);
        int32x4_t v69 = vmlal_high_laneq_s16(v55, v48, v28, 4);
        int32x4_t v70 = vmlal_laneq_s16(v56, *(int16x4_t *)v49.i8, v28, 4);
        int32x4_t v71 = vmlal_high_laneq_s16(v57, v49, v28, 4);
        uint16x8_t v72 = vmovl_u8(*(uint8x8_t *)v62.i8);
        uint16x8_t v73 = vmovl_high_u8(v62);
        uint16x8_t v74 = vmovl_u8(*(uint8x8_t *)v63.i8);
        uint16x8_t v75 = vmovl_high_u8(v63);
        int16x8_t v76 = vshrn_high_n_s32(vshrn_n_s32(vmlal_lane_s16(v64, *(int16x4_t *)v58.i8, *(int16x4_t *)v28.i8, 2), 0xFuLL), vmlal_high_lane_s16(v65, v58, *(int16x4_t *)v28.i8, 2), 0xFuLL);
        int16x8_t v77 = vshrn_high_n_s32(vshrn_n_s32(vmlal_lane_s16(v66, *(int16x4_t *)v59.i8, *(int16x4_t *)v28.i8, 2), 0xFuLL), vmlal_high_lane_s16(v67, v59, *(int16x4_t *)v28.i8, 2), 0xFuLL);
        int16x8_t v78 = vshrn_high_n_s32(vshrn_n_s32(vmlal_lane_s16(v68, *(int16x4_t *)v60.i8, *(int16x4_t *)v28.i8, 2), 0xFuLL), vmlal_high_lane_s16(v69, v60, *(int16x4_t *)v28.i8, 2), 0xFuLL);
        int16x8_t v79 = vshrn_high_n_s32(vshrn_n_s32(vmlal_lane_s16(v70, *(int16x4_t *)v61.i8, *(int16x4_t *)v28.i8, 2), 0xFuLL), vmlal_high_lane_s16(v71, v61, *(int16x4_t *)v28.i8, 2), 0xFuLL);
        v64.i64[0] = 0x1000000010000;
        v64.i64[1] = 0x1000000010000;
        v65.i64[0] = 0x1000000010000;
        v65.i64[1] = 0x1000000010000;
        v66.i64[0] = 0x1000000010000;
        v66.i64[1] = 0x1000000010000;
        v67.i64[0] = 0x1000000010000;
        v67.i64[1] = 0x1000000010000;
        v68.i64[0] = 0x1000000010000;
        v68.i64[1] = 0x1000000010000;
        v69.i64[0] = 0x1000000010000;
        v69.i64[1] = 0x1000000010000;
        v70.i64[0] = 0x1000000010000;
        v70.i64[1] = 0x1000000010000;
        v71.i64[0] = 0x1000000010000;
        v71.i64[1] = 0x1000000010000;
        int16x8_t v80 = vshrn_high_n_s32(vshrn_n_s32(vmulq_s32((int32x4_t)vmlsl_lane_u16((uint32x4_t)v64, *(uint16x4_t *)v58.i8, *(uint16x4_t *)v28.i8, 1), (int32x4_t)vmovl_u16(*(uint16x4_t *)v72.i8)), 8uLL), vmulq_s32((int32x4_t)vmlsl_high_lane_u16((uint32x4_t)v65, (uint16x8_t)v58, *(uint16x4_t *)v28.i8, 1), (int32x4_t)vmovl_high_u16(v72)), 8uLL);
        int16x8_t v81 = vshrn_high_n_s32(vshrn_n_s32(vmulq_s32((int32x4_t)vmlsl_lane_u16((uint32x4_t)v66, *(uint16x4_t *)v59.i8, *(uint16x4_t *)v28.i8, 1), (int32x4_t)vmovl_u16(*(uint16x4_t *)v73.i8)), 8uLL), vmulq_s32((int32x4_t)vmlsl_high_lane_u16((uint32x4_t)v67, (uint16x8_t)v59, *(uint16x4_t *)v28.i8, 1), (int32x4_t)vmovl_high_u16(v73)), 8uLL);
        int16x8_t v82 = vshrn_high_n_s32(vshrn_n_s32(vmulq_s32((int32x4_t)vmlsl_lane_u16((uint32x4_t)v70, *(uint16x4_t *)v61.i8, *(uint16x4_t *)v28.i8, 1), (int32x4_t)vmovl_u16(*(uint16x4_t *)v75.i8)), 8uLL), vmulq_s32((int32x4_t)vmlsl_high_lane_u16((uint32x4_t)v71, (uint16x8_t)v61, *(uint16x4_t *)v28.i8, 1), (int32x4_t)vmovl_high_u16(v75)), 8uLL);
        int16x8_t v83 = (int16x8_t)vpaddlq_u8((uint8x16_t)v109.val[0]);
        int16x8_t v84 = (int16x8_t)vpaddlq_u8((uint8x16_t)v109.val[1]);
        v109.val[0] = (int8x16_t)vld2_s8(v17);
        v17 += 16;
        *(int8x8_t *)v65.i8 = vaddhn_s16(v81, vmulq_n_s16(v77, v28.i16[0]));
        *(int8x8_t *)v67.i8 = vaddhn_s16(v82, vmulq_n_s16(v79, v28.i16[0]));
        int16x8_t v85 = (int16x8_t)vpaddlq_u8((uint8x16_t)v109.val[2]);
        int16x8_t v86 = (int16x8_t)vpaddlq_u8((uint8x16_t)v109.val[3]);
        *int32x4_t v22 = vaddhn_s16(v80, vmulq_n_s16(v76, v28.i16[0]));
        v22[1] = *(int8x8_t *)v65.i8;
        v22 += 2;
        *int32x4_t v25 = vaddhn_s16(vshrn_high_n_s32(vshrn_n_s32(vmulq_s32((int32x4_t)vmlsl_lane_u16((uint32x4_t)v68, *(uint16x4_t *)v60.i8, *(uint16x4_t *)v28.i8, 1), (int32x4_t)vmovl_u16(*(uint16x4_t *)v74.i8)), 8uLL), vmulq_s32((int32x4_t)vmlsl_high_lane_u16((uint32x4_t)v69, (uint16x8_t)v60, *(uint16x4_t *)v28.i8, 1), (int32x4_t)vmovl_high_u16(v74)), 8uLL), vmulq_n_s16(v78, v28.i16[0]));
        v25[1] = *(int8x8_t *)v67.i8;
        v25 += 2;
        v109.val[2] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v109.val[0].i8);
        v109.val[3] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v109.val[1].i8);
        v108.val[0] = (int8x16_t)vaddq_s16((int16x8_t)vpaddlq_u8((uint8x16_t)v108.val[0]), v83);
        v108.val[1] = (int8x16_t)vaddq_s16((int16x8_t)vpaddlq_u8((uint8x16_t)v108.val[1]), v84);
        v72.i64[0] = 0x1000000010000;
        v72.i64[1] = 0x1000000010000;
        v83.i64[0] = 0x1000000010000;
        v83.i64[1] = 0x1000000010000;
        v74.i64[0] = 0x1000000010000;
        v74.i64[1] = 0x1000000010000;
        v84.i64[0] = 0x1000000010000;
        v84.i64[1] = 0x1000000010000;
        v108.val[0] = (int8x16_t)vshrq_n_u16((uint16x8_t)v108.val[0], 2uLL);
        v108.val[1] = (int8x16_t)vshrq_n_u16((uint16x8_t)v108.val[1], 2uLL);
        v108.val[2] = (int8x16_t)vshrq_n_u16((uint16x8_t)vaddq_s16((int16x8_t)vpaddlq_u8((uint8x16_t)v108.val[2]), v85), 2uLL);
        v108.val[3] = (int8x16_t)vshrq_n_u16((uint16x8_t)vaddq_s16((int16x8_t)vpaddlq_u8((uint8x16_t)v108.val[3]), v86), 2uLL);
        int32x4_t v9 = (int32x4_t)vmlsl_high_lane_u16((uint32x4_t)v83, (uint16x8_t)v108.val[3], *(uint16x4_t *)v28.i8, 1);
        int32x4_t v10 = vmlal_lane_s16(vmlal_laneq_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v108.val[0].i8, (int16x4_t)0xFADBCCEF3838D4ABLL, 1), *(int16x4_t *)v108.val[1].i8, (int16x4_t)0xFADBCCEF3838D4ABLL, 0), *(int16x4_t *)v108.val[2].i8, v28, 7), *(int16x4_t *)v108.val[3].i8, *(int16x4_t *)v28.i8, 3);
        --i;
        *(int8x8_t *)v109.val[0].i8 = vaddhn_s16(vshrn_high_n_s32(vshrn_n_s32(vmulq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v109.val[2].i8), (int32x4_t)vmlsl_lane_u16((uint32x4_t)v72, *(uint16x4_t *)v108.val[3].i8, *(uint16x4_t *)v28.i8, 1)), 8uLL), vmulq_s32((int32x4_t)vmovl_high_u16((uint16x8_t)v109.val[2]), v9), 8uLL), vmulq_n_s16(vshrn_high_n_s32(vshrn_n_s32(v10, 0xFuLL), vmlal_high_lane_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmull_high_lane_s16(
                                                    (int16x8_t)v108.val[0],
                                                    (int16x4_t)0xFADBCCEF3838D4ABLL,
                                                    1),
                                                  (int16x8_t)v108.val[1],
                                                  (int16x4_t)0xFADBCCEF3838D4ABLL,
                                                  0),
                                                (int16x8_t)v108.val[2],
                                                v28,
                                                7),
                                              (int16x8_t)v108.val[3],
                                              *(int16x4_t *)v28.i8,
                                              3),
                                            0xFuLL),
                                          v28.i16[0]));
        *(int8x8_t *)v109.val[1].i8 = vaddhn_s16(vshrn_high_n_s32(vshrn_n_s32(vmulq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v109.val[3].i8), (int32x4_t)vmlsl_lane_u16((uint32x4_t)v74, *(uint16x4_t *)v108.val[3].i8, *(uint16x4_t *)v28.i8, 1)), 8uLL), vmulq_s32((int32x4_t)vmovl_high_u16((uint16x8_t)v109.val[3]), (int32x4_t)vmlsl_high_lane_u16((uint32x4_t)v84, (uint16x8_t)v108.val[3], *(uint16x4_t *)v28.i8, 1)), 8uLL), vmulq_n_s16(
                                          vshrn_high_n_s32(vshrn_n_s32(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v108.val[0].i8, (int16x4_t)0xFADBCCEF3838D4ABLL, 3), *(int16x4_t *)v108.val[1].i8, (int16x4_t)0xFADBCCEF3838D4ABLL, 2), *(int16x4_t *)v108.val[2].i8, (int16x4_t)0xFADBCCEF3838D4ABLL, 1), *(int16x4_t *)v108.val[3].i8, *(int16x4_t *)v28.i8, 3), 0xFuLL), vmlal_high_lane_s16(
                                              vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16((int16x8_t)v108.val[0], (int16x4_t)0xFADBCCEF3838D4ABLL, 3), (int16x8_t)v108.val[1], (int16x4_t)0xFADBCCEF3838D4ABLL, 2), (int16x8_t)v108.val[2], (int16x4_t)0xFADBCCEF3838D4ABLL, 1), (int16x8_t)v108.val[3], *(int16x4_t *)v28.i8, 3), 0xFuLL), v28.i16[0]));
        *int32x4_t v24 = vzip1_s8(*(int8x8_t *)v109.val[0].i8, *(int8x8_t *)v109.val[1].i8);
        v24[1] = vzip2_s8(*(int8x8_t *)v109.val[0].i8, *(int8x8_t *)v109.val[1].i8);
      }
      uint64_t v87 = v12 & 7;
      if ((v12 & 7) != 0)
      {
        do
        {
          int8x8_t v88 = *(int8x8_t *)v13;
          v13 += 8;
          int8x8_t v89 = v88;
          int8x8_t v90 = *(int8x8_t *)v14;
          v14 += 8;
          int8x8_t v91 = vuzp1_s8(v89, v90);
          int8x8_t v92 = vuzp2_s8(v89, v90);
          uint16x8_t v93 = vmovl_u8((uint8x8_t)vuzp1_s8(v91, v92));
          uint16x8_t v94 = vmovl_u8((uint8x8_t)vuzp2_s8(v91, v92));
          v90.i16[0] = v16->i16[0];
          long long v16 = (uint8x16_t *)((char *)v16 + 2);
          v92.i16[0] = v90.i16[0];
          v92.i16[1] = v18->i16[0];
          int v18 = (uint8x16_t *)((char *)v18 + 2);
          v95.i64[0] = 0x1000000010000;
          v95.i64[1] = 0x1000000010000;
          int16x4_t v96 = vpadd_s16(*(int16x4_t *)v93.i8, *(int16x4_t *)v93.i8);
          int16x4_t v97 = vpadd_s16((int16x4_t)v93.u64[1], (int16x4_t)v93.u64[1]);
          int16x4_t v98 = vpadd_s16(*(int16x4_t *)v94.i8, *(int16x4_t *)v94.i8);
          int16x4_t v99 = vpadd_s16((int16x4_t)v94.u64[1], (int16x4_t)v94.u64[1]);
          int16x8_t v100 = (int16x8_t)vmlal_lane_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v93.i8, v28, 6), (int16x4_t)v93.u64[1], v28, 5), *(int16x4_t *)v94.i8, v28, 4), (int16x4_t)v94.u64[1], *(int16x4_t *)v28.i8, 2);
          int16x4_t v101 = (int16x4_t)vshr_n_u16((uint16x4_t)vpadd_s16(v96, v96), 2uLL);
          int16x4_t v102 = (int16x4_t)vshr_n_u16((uint16x4_t)vpadd_s16(v97, v97), 2uLL);
          int16x4_t v103 = (int16x4_t)vshr_n_u16((uint16x4_t)vpadd_s16(v98, v98), 2uLL);
          int16x4_t v104 = (int16x4_t)vshr_n_u16((uint16x4_t)vpadd_s16(v99, v99), 2uLL);
          v90.i16[0] = *(_WORD *)v17;
          v17 += 2;
          v9.i16[0] = v90.i16[0];
          v9.i64[0] = vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v9.i8)).u64[0];
          *(int16x4_t *)v100.i8 = vadd_s16(vmul_n_s16(vshrn_n_s32((int32x4_t)v100, 0xFuLL), v28.i16[0]), vshrn_n_s32(vmulq_s32((int32x4_t)vmlsl_lane_u16(v95, (uint16x4_t)v94.u64[1], *(uint16x4_t *)v28.i8, 1), (int32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)v92))), 8uLL));
          v100.i32[0] = vshrn_n_s16(v100, 8uLL).u32[0];
          v22->i16[0] = v100.i16[0];
          int32x4_t v22 = (int8x8_t *)((char *)v22 + 2);
          v25->i16[0] = v100.i16[1];
          int32x4_t v25 = (int8x8_t *)((char *)v25 + 2);
          int16x8_t v105 = (int16x8_t)vmlal_lane_s16(vmlal_laneq_s16(vmlal_lane_s16(vmull_lane_s16(v101, (int16x4_t)0xFADBCCEF3838D4ABLL, 1), v102, (int16x4_t)0xFADBCCEF3838D4ABLL, 0), v103, v28, 7), v104, *(int16x4_t *)v28.i8, 3);
          int16x8_t v106 = (int16x8_t)vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v101, (int16x4_t)0xFADBCCEF3838D4ABLL, 3), v102, (int16x4_t)0xFADBCCEF3838D4ABLL, 2), v103, (int16x4_t)0xFADBCCEF3838D4ABLL, 1), v104, *(int16x4_t *)v28.i8, 3);
          v10.i64[0] = 0x1000000010000;
          v105.i32[1] = v106.i32[0];
          int32x4_t v10 = (int32x4_t)vmlsl_lane_u16((uint32x4_t)v10, (uint16x4_t)v104, *(uint16x4_t *)v28.i8, 1);
          *(int16x4_t *)v105.i8 = vshrn_n_s32((int32x4_t)v105, 0xFuLL);
          *(int32x2_t *)v10.i8 = vmul_s32(*(int32x2_t *)v9.i8, *(int32x2_t *)v10.i8);
          *(int16x4_t *)v106.i8 = vadd_s16(vshrn_n_s32(v10, 8uLL), (int16x4_t)*(_OWORD *)&vmulq_n_s16(v105, v28.i16[0]));
          v24->i16[0] = vshrn_n_s16(v106, 8uLL).u16[0];
          int32x4_t v24 = (int8x8_t *)((char *)v24 + 2);
          --v87;
        }
        while (v87);
      }
      --v11;
      int32x4_t v22 = (int8x8_t *)((char *)v22 + v26);
      int32x4_t v25 = (int8x8_t *)((char *)v25 + v26);
      int32x4_t v24 = (int8x8_t *)((char *)v24 + v27);
      v13 += v15;
      v14 += v15;
      long long v16 = (uint8x16_t *)((char *)v16 + v19);
      int v18 = (uint8x16_t *)((char *)v18 + v19);
      v17 += v20;
    }
    while (v11);
  }
  return 0;
}

uint64_t FigDataChannelGroupGetTypeID()
{
  if (FigDataChannelGroupGetTypeID_sRegisterDataChannelGroupTypeOnce != -1) {
    dispatch_once(&FigDataChannelGroupGetTypeID_sRegisterDataChannelGroupTypeOnce, &__block_literal_global_126);
  }
  return FigDataChannelGroupGetTypeID_sDataChannelGroupTypeID;
}

uint64_t __FigDataChannelGroupGetTypeID_block_invoke()
{
  uint64_t result = _CFRuntimeRegisterClass();
  FigDataChannelGroupGetTypeID_sDataChannelGroupTypeID = result;
  return result;
}

uint64_t dataChannelGroup_init(uint64_t result)
{
  *(void *)(result + 16) = 0;
  return result;
}

void dataChannelGroup_finalize(uint64_t a1)
{
  CFArrayRef v2 = *(const void **)(a1 + 16);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 16) = 0;
  }
}

uint64_t dataChannelGroup_equal()
{
  return FigCFEqual();
}

CFHashCode dataChannelGroup_hash(uint64_t a1)
{
  return CFHash(*(CFTypeRef *)(a1 + 16));
}

__CFString *dataChannelGroup_copyDebugDesc(void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  CFMutableArrayRef Mutable = CFStringCreateMutable(v2, 0);
  CFStringAppendFormat(Mutable, 0, @"<FigChannelDataGroup %p>: %@", a1, a1[2]);
  return Mutable;
}

uint64_t FigDataChannelGroupCreate(const __CFAllocator *a1, void *a2)
{
  if (a2) {
    return dataChannelGroup_createDataChannelGroup(a1, a2);
  }
  else {
    return FigSignalErrorAt();
  }
}

uint64_t dataChannelGroup_createDataChannelGroup(const __CFAllocator *a1, void *a2)
{
  if (FigDataChannelGroupGetTypeID_sRegisterDataChannelGroupTypeOnce != -1) {
    dispatch_once(&FigDataChannelGroupGetTypeID_sRegisterDataChannelGroupTypeOnce, &__block_literal_global_126);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    uint64_t v5 = (void *)Instance;
    CFMutableArrayRef Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E4F1D510]);
    v5[2] = Mutable;
    if (Mutable)
    {
      *a2 = v5;
      return 0;
    }
    else
    {
      uint64_t v8 = FigSignalErrorAt();
      CFRelease(v5);
      return v8;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigDataChannelGroupCreateFromDataChannelList(const __CFAllocator *a1, CFArrayRef theArray, void *a3)
{
  CFTypeRef cf = 0;
  if (a3 && theArray && CFArrayGetCount(theArray) > 0)
  {
    uint64_t v6 = dataChannelGroup_createDataChannelGroup(a1, &cf);
    CFTypeRef v7 = cf;
    if (v6)
    {
      uint64_t v9 = v6;
      if (cf) {
        CFRelease(cf);
      }
    }
    else
    {
      uint64_t v8 = (__CFArray *)*((void *)cf + 2);
      v13.length = CFArrayGetCount(theArray);
      v13.location = 0;
      CFArrayAppendArray(v8, theArray, v13);
      uint64_t v9 = 0;
      *a3 = v7;
    }
    return v9;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigDataChannelGroupCreateForUseCase(const __CFAllocator *a1, int a2, void *a3)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  uint8x16_t v62 = 0;
  if (a3)
  {
    LODWORD(v4) = a2;
    uint64_t v5 = dataChannelGroup_createDataChannelGroup(a1, &v62);
    if (v5)
    {
LABEL_8:
      uint64_t v9 = v5;
LABEL_23:
      uint64_t v6 = v62;
LABEL_24:
      if (!v6) {
        return v9;
      }
LABEL_25:
      CFRelease(v6);
      return v9;
    }
    if (v4)
    {
      if (v4 <= 4)
      {
        uint64_t v6 = v62;
        uint64_t v4 = v4;
        CFTypeRef v7 = (long long *)MEMORY[0x1E4F21E08];
        while (v4)
        {
          long long v64 = *v7;
          *(void *)&long long v65 = FigTagMakeWithSInt64Value();
          *((void *)&v65 + 1) = v8;
          uint64_t v5 = FigDataChannelGroupAddDataChannelWithFigTags((uint64_t)v6, (uint64_t)&v64, 2);
          --v4;
          if (v5) {
            goto LABEL_8;
          }
        }
        goto LABEL_46;
      }
      if (v4 <= 0xC)
      {
        v63[0] = xmmword_19499C3B0;
        uint64_t v6 = v62;
        uint64_t v12 = FigDataChannelGroupAddDataChannelWithFigTags((uint64_t)v62, (uint64_t)v63, 1);
        if (v12)
        {
          uint64_t v9 = v12;
          if (!v6) {
            return v9;
          }
          goto LABEL_25;
        }
        if (v4 <= 0xB
          && (((1 << v4) & 0x220) != 0 || ((1 << v4) & 0x440) != 0 || ((1 << v4) & 0x880) != 0))
        {
          *(void *)&long long v64 = FigTagMakeWithOSTypeValue();
          *((void *)&v64 + 1) = v15;
        }
        else
        {
          if ((v4 & 0xFFFFFFFB) != 8) {
            goto LABEL_46;
          }
          long long v64 = *MEMORY[0x1E4F21E00];
        }
        *(void *)&long long v65 = FigTagMakeWithSInt64Value();
        *((void *)&v65 + 1) = v16;
        uint64_t v9 = FigDataChannelGroupAddDataChannelWithFigTags((uint64_t)v6, (uint64_t)&v64, 2);
        if (v9) {
          goto LABEL_23;
        }
LABEL_46:
        uint64_t v9 = 0;
        *a3 = v6;
        return v9;
      }
      switch((int)v4)
      {
        case 'd':
          long long v64 = *MEMORY[0x1E4F21E08];
          *(void *)&long long v65 = FigTagMakeWithSInt64Value();
          *((void *)&v65 + 1) = v13;
          long long v14 = *MEMORY[0x1E4F21E58];
          long long v66 = *MEMORY[0x1E4F21E20];
          long long v67 = v14;
          goto LABEL_30;
        case 'e':
          long long v64 = *MEMORY[0x1E4F21E08];
          *(void *)&long long v65 = FigTagMakeWithSInt64Value();
          *((void *)&v65 + 1) = v17;
          *(void *)&long long v66 = FigTagMakeWithOSTypeValue();
          *((void *)&v66 + 1) = v18;
          *(void *)&long long v67 = FigTagMakeWithFlagsValue();
          *((void *)&v67 + 1) = v19;
LABEL_30:
          uint64_t v20 = (long long *)MEMORY[0x1E4F21E30];
          goto LABEL_32;
        case 'f':
          long long v64 = *MEMORY[0x1E4F21E08];
          *(void *)&long long v65 = FigTagMakeWithSInt64Value();
          *((void *)&v65 + 1) = v21;
          *(void *)&long long v66 = FigTagMakeWithOSTypeValue();
          *((void *)&v66 + 1) = v22;
          *(void *)&long long v67 = FigTagMakeWithFlagsValue();
          *((void *)&v67 + 1) = v23;
          uint64_t v20 = (long long *)MEMORY[0x1E4F21E40];
LABEL_32:
          long long v68 = *v20;
          uint64_t v6 = v62;
          uint64_t v10 = (uint64_t)v62;
          int v11 = 5;
          goto LABEL_10;
        case 'g':
          long long v64 = *MEMORY[0x1E4F21E08];
          *(void *)&long long v65 = FigTagMakeWithSInt64Value();
          *((void *)&v65 + 1) = v24;
          long long v25 = *MEMORY[0x1E4F21E58];
          long long v66 = *MEMORY[0x1E4F21E20];
          long long v67 = v25;
          goto LABEL_35;
        case 'h':
          long long v64 = *MEMORY[0x1E4F21E08];
          *(void *)&long long v65 = FigTagMakeWithSInt64Value();
          *((void *)&v65 + 1) = v26;
          *(void *)&long long v66 = FigTagMakeWithOSTypeValue();
          *((void *)&v66 + 1) = v27;
          *(void *)&long long v67 = FigTagMakeWithFlagsValue();
          *((void *)&v67 + 1) = v28;
LABEL_35:
          unsigned int v29 = (long long *)MEMORY[0x1E4F21E30];
          goto LABEL_37;
        case 'i':
          long long v64 = *MEMORY[0x1E4F21E08];
          *(void *)&long long v65 = FigTagMakeWithSInt64Value();
          *((void *)&v65 + 1) = v30;
          *(void *)&long long v66 = FigTagMakeWithOSTypeValue();
          *((void *)&v66 + 1) = v31;
          *(void *)&long long v67 = FigTagMakeWithFlagsValue();
          *((void *)&v67 + 1) = v32;
          unsigned int v29 = (long long *)MEMORY[0x1E4F21E40];
LABEL_37:
          long long v33 = *v29;
          int16x8_t v34 = (long long *)MEMORY[0x1E4F21E48];
          goto LABEL_43;
        case 'j':
          long long v64 = *MEMORY[0x1E4F21E08];
          *(void *)&long long v65 = FigTagMakeWithSInt64Value();
          *((void *)&v65 + 1) = v35;
          long long v36 = *MEMORY[0x1E4F21E58];
          long long v66 = *MEMORY[0x1E4F21E20];
          long long v67 = v36;
          goto LABEL_40;
        case 'k':
          long long v64 = *MEMORY[0x1E4F21E08];
          *(void *)&long long v65 = FigTagMakeWithSInt64Value();
          *((void *)&v65 + 1) = v37;
          *(void *)&long long v66 = FigTagMakeWithOSTypeValue();
          *((void *)&v66 + 1) = v38;
          *(void *)&long long v67 = FigTagMakeWithFlagsValue();
          *((void *)&v67 + 1) = v39;
LABEL_40:
          int32x4_t v40 = (long long *)MEMORY[0x1E4F21E30];
          goto LABEL_42;
        case 'l':
          long long v64 = *MEMORY[0x1E4F21E08];
          *(void *)&long long v65 = FigTagMakeWithSInt64Value();
          *((void *)&v65 + 1) = v41;
          *(void *)&long long v66 = FigTagMakeWithOSTypeValue();
          *((void *)&v66 + 1) = v42;
          *(void *)&long long v67 = FigTagMakeWithFlagsValue();
          *((void *)&v67 + 1) = v43;
          int32x4_t v40 = (long long *)MEMORY[0x1E4F21E40];
LABEL_42:
          long long v33 = *v40;
          int16x8_t v34 = (long long *)MEMORY[0x1E4F21E50];
LABEL_43:
          long long v44 = *v34;
          long long v68 = v33;
          long long v69 = v44;
          uint64_t v6 = v62;
          uint64_t v10 = (uint64_t)v62;
          int v11 = 6;
          goto LABEL_10;
        case 'm':
          long long v45 = *MEMORY[0x1E4F21E10];
          long long v64 = *MEMORY[0x1E4F21E08];
          long long v65 = v45;
          long long v46 = *MEMORY[0x1E4F21E30];
          long long v66 = *MEMORY[0x1E4F21E58];
          long long v67 = v46;
          long long v47 = *MEMORY[0x1E4F21DF0];
          v63[0] = *MEMORY[0x1E4F21E00];
          v63[1] = v47;
          uint64_t v6 = v62;
          uint64_t v5 = FigDataChannelGroupAddDataChannelWithFigTags((uint64_t)v62, (uint64_t)&v64, 4);
          if (!v5)
          {
            uint64_t v5 = FigDataChannelGroupAddDataChannelWithFigTags((uint64_t)v6, (uint64_t)v63, 2);
            if (!v5) {
              goto LABEL_46;
            }
          }
          goto LABEL_8;
        case 'n':
          long long v49 = *MEMORY[0x1E4F21E10];
          long long v64 = *MEMORY[0x1E4F21E08];
          long long v65 = v49;
          int32x4_t v50 = (long long *)MEMORY[0x1E4F21E68];
          goto LABEL_54;
        case 'o':
          long long v51 = *MEMORY[0x1E4F21E20];
          long long v64 = *MEMORY[0x1E4F21E08];
          long long v65 = v51;
          int32x4_t v52 = (long long *)MEMORY[0x1E4F21E68];
          goto LABEL_57;
        case 'p':
          long long v53 = *MEMORY[0x1E4F21E08];
          int32x4_t v54 = (long long *)MEMORY[0x1E4F21E10];
          goto LABEL_53;
        case 'q':
          long long v55 = *MEMORY[0x1E4F21E08];
          int32x4_t v56 = (long long *)MEMORY[0x1E4F21E10];
          goto LABEL_56;
        case 'r':
          long long v53 = *MEMORY[0x1E4F21E08];
          int32x4_t v54 = (long long *)MEMORY[0x1E4F21E18];
LABEL_53:
          long long v57 = *v54;
          long long v64 = v53;
          long long v65 = v57;
          int32x4_t v50 = (long long *)MEMORY[0x1E4F21E58];
LABEL_54:
          long long v58 = *v50;
          int16x8_t v59 = (long long *)MEMORY[0x1E4F21E28];
          break;
        case 's':
          long long v55 = *MEMORY[0x1E4F21E08];
          int32x4_t v56 = (long long *)MEMORY[0x1E4F21E20];
LABEL_56:
          long long v60 = *v56;
          long long v64 = v55;
          long long v65 = v60;
          int32x4_t v52 = (long long *)MEMORY[0x1E4F21E58];
LABEL_57:
          long long v58 = *v52;
          int16x8_t v59 = (long long *)MEMORY[0x1E4F21E38];
          break;
        default:
          uint64_t v9 = 4294951536;
          goto LABEL_23;
      }
      long long v61 = *v59;
      long long v66 = v58;
      long long v67 = v61;
      uint64_t v6 = v62;
      uint64_t v10 = (uint64_t)v62;
      int v11 = 4;
    }
    else
    {
      long long v64 = xmmword_19499C3B0;
      uint64_t v6 = v62;
      uint64_t v10 = (uint64_t)v62;
      int v11 = 1;
    }
LABEL_10:
    uint64_t v9 = FigDataChannelGroupAddDataChannelWithFigTags(v10, (uint64_t)&v64, v11);
    if (v9) {
      goto LABEL_24;
    }
    goto LABEL_46;
  }

  return FigSignalErrorAt();
}

uint64_t FigDataChannelGroupAddDataChannelWithFigTags(uint64_t a1, uint64_t a2, int a3)
{
  if (!a1)
  {
    return FigSignalErrorAt();
  }
  if (!a2) {
    return FigSignalErrorAt();
  }
  if (a3 <= 0) {
    return FigSignalErrorAt();
  }
  uint64_t result = FigTagCollectionCreate();
  if (!result) {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t FigDataChannelGroupCopyDataChannelList(uint64_t a1, CFAllocatorRef allocator, CFArrayRef *a3)
{
  if (a1)
  {
    if (a3)
    {
      CFArrayRef Copy = CFArrayCreateCopy(allocator, *(CFArrayRef *)(a1 + 16));
      *a3 = Copy;
      if (Copy) {
        return 0;
      }
    }
  }

  return FigSignalErrorAt();
}

CFIndex FigDataChannelGroupGetCountOfDataChannels(uint64_t a1)
{
  if (!a1)
  {
    FigSignalErrorAt();
    return 0;
  }
  CFArrayRef v1 = *(const __CFArray **)(a1 + 16);
  if (!v1) {
    return 0;
  }

  return CFArrayGetCount(v1);
}

uint64_t FigDataChannelGroupAddDataChannel(uint64_t a1, void *value)
{
  if (a1 && value)
  {
    CFArrayRef v4 = *(const __CFArray **)(a1 + 16);
    if (!v4 || (CFIndex Count = CFArrayGetCount(v4), Count < 1))
    {
LABEL_8:
      CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 16), value);
      return 0;
    }
    CFIndex v6 = Count;
    CFIndex v7 = 0;
    while (1)
    {
      CFDictionaryRef ValueAtIndex = (const OpaqueCMTagCollection *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), v7);
      if (CMTagCollectionContainsTagsOfCollection(ValueAtIndex, (CMTagCollectionRef)value)) {
        break;
      }
      if (v6 == ++v7) {
        goto LABEL_8;
      }
    }
  }

  return FigSignalErrorAt();
}

const void *FigDataChannelGroupGetDataChannelByIndex(uint64_t a1, CFIndex idx)
{
  if (!a1 || idx < 0) {
    goto LABEL_9;
  }
  CFArrayRef Count = *(const __CFArray **)(a1 + 16);
  if (Count) {
    CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
  }
  if ((uint64_t)Count <= idx)
  {
LABEL_9:
    FigSignalErrorAt();
    return 0;
  }
  else
  {
    CFArrayRef v5 = *(const __CFArray **)(a1 + 16);
    return CFArrayGetValueAtIndex(v5, idx);
  }
}

uint64_t FigDataChannelGroupRemoveDataChannelByIndex(uint64_t a1, CFIndex idx)
{
  if (!a1 || idx < 0) {
    goto LABEL_7;
  }
  CFArrayRef Count = *(const __CFArray **)(a1 + 16);
  if (Count) {
    CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
  }
  if ((uint64_t)Count <= idx)
  {
LABEL_7:
    return FigSignalErrorAt();
  }
  else
  {
    CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 16), idx);
    return 0;
  }
}

uint64_t channelgroup_copyAsDictionary(uint64_t a1, CFAllocatorRef allocator, CFDictionaryRef *a3)
{
  values = 0;
  if (a1)
  {
    if (!a3) {
      goto LABEL_14;
    }
    CFMutableArrayRef Mutable = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E4F1D510]);
    values = Mutable;
    if (Mutable)
    {
      CFIndex v7 = Mutable;
      CFArrayRef v8 = *(const __CFArray **)(a1 + 16);
      if (v8 && (CFIndex Count = CFArrayGetCount(v8), Count >= 1))
      {
        CFIndex v10 = Count;
        CFIndex v11 = 0;
        while (1)
        {
          CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), v11);
          uint64_t v13 = (const void *)MEMORY[0x19970EA60](ValueAtIndex, allocator);
          if (!v13) {
            break;
          }
          long long v14 = v13;
          CFArrayAppendValue(v7, v13);
          CFRelease(v14);
          if (v10 == ++v11) {
            goto LABEL_9;
          }
        }
      }
      else
      {
LABEL_9:
        CFDictionaryRef v15 = CFDictionaryCreate(allocator, (const void **)kFigDataChannelGroupKey_ChannelList, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        if (v15)
        {
          uint64_t v16 = 0;
          *a3 = v15;
LABEL_11:
          if (values) {
            CFRelease(values);
          }
          return v16;
        }
      }
LABEL_14:
      uint64_t v16 = FigSignalErrorAt();
      goto LABEL_11;
    }
  }

  return FigSignalErrorAt();
}

uint64_t channelgroup_createFromDictionary(const __CFAllocator *a1, CFDictionaryRef theDict, void *a3)
{
  CFTypeRef cf = 0;
  if (theDict)
  {
    if (a3)
    {
      CFArrayRef v5 = (const __CFArray *)CFDictionaryGetValue(theDict, @"ChannelList");
      if (v5)
      {
        CFArrayRef v6 = v5;
        uint64_t v7 = dataChannelGroup_createDataChannelGroup(a1, &cf);
        if (v7)
        {
LABEL_23:
          uint64_t v17 = v7;
          goto LABEL_14;
        }
        CFIndex Count = CFArrayGetCount(v6);
        if (Count <= 0)
        {
          CFIndex v11 = 0;
          CFTypeRef v15 = cf;
LABEL_12:
          uint64_t v17 = 0;
          *a3 = v15;
          CFTypeRef cf = 0;
          if (!v11) {
            goto LABEL_14;
          }
          goto LABEL_13;
        }
        CFIndex v9 = Count;
        CFMutableArrayRef Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E4F1D510]);
        if (Mutable)
        {
          CFIndex v11 = Mutable;
          CFIndex v12 = 0;
          while (1)
          {
            CMTime value = 0;
            CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v6, v12);
            uint64_t v14 = MEMORY[0x19970EAB0](ValueAtIndex, a1, &value);
            if (v14) {
              break;
            }
            CFArrayAppendValue(v11, value);
            CFRelease(value);
            if (v9 == ++v12)
            {
              CFTypeRef v15 = cf;
              uint64_t v16 = (__CFArray *)*((void *)cf + 2);
              v22.length = CFArrayGetCount(v11);
              v22.location = 0;
              CFArrayAppendArray(v16, v11, v22);
              goto LABEL_12;
            }
          }
          uint64_t v17 = v14;
LABEL_13:
          CFRelease(v11);
LABEL_14:
          if (cf) {
            CFRelease(cf);
          }
          return v17;
        }
      }
    }
    uint64_t v7 = FigSignalErrorAt();
    goto LABEL_23;
  }

  return FigSignalErrorAt();
}

uint64_t FigDataChannelGroupsArrayCopyAsDictionary(const __CFArray *a1, CFAllocatorRef allocator, CFDictionaryRef *a3)
{
  values = 0;
  if (a1)
  {
    if (!a3) {
      goto LABEL_18;
    }
    CFMutableArrayRef Mutable = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E4F1D510]);
    values = Mutable;
    if (Mutable)
    {
      uint64_t v7 = Mutable;
      CFIndex Count = CFArrayGetCount(a1);
      if (Count >= 1)
      {
        CFIndex v9 = Count;
        CFIndex v10 = 0;
        do
        {
          CMTime value = 0;
          CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(a1, v10);
          uint64_t v12 = channelgroup_copyAsDictionary((uint64_t)ValueAtIndex, allocator, (CFDictionaryRef *)&value);
          if (v12) {
            goto LABEL_19;
          }
          CFArrayAppendValue(v7, value);
          CFRelease(value);
        }
        while (v9 != ++v10);
      }
      CFDictionaryRef v13 = CFDictionaryCreate(allocator, (const void **)&kFigDataChannelGroupKey_GroupsList, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (v13)
      {
        uint64_t v14 = 0;
        *a3 = v13;
LABEL_10:
        if (values) {
          CFRelease(values);
        }
        return v14;
      }
LABEL_18:
      uint64_t v12 = FigSignalErrorAt();
LABEL_19:
      uint64_t v14 = v12;
      goto LABEL_10;
    }
  }

  return FigSignalErrorAt();
}

uint64_t FigDataChannelGroupsArrayCreateFromDictionary(const __CFAllocator *a1, CFDictionaryRef theDict, __CFArray **a3)
{
  if (theDict
    && a3
    && (CFArrayRef v5 = (const __CFArray *)CFDictionaryGetValue(theDict, @"DataChannelGroupsList")) != 0
    && (CFArrayRef v6 = v5, Count = CFArrayGetCount(v5), Count > 0)
    && (CFIndex v8 = Count, (Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E4F1D510])) != 0))
  {
    CFIndex v10 = Mutable;
    CFIndex v11 = 0;
    while (1)
    {
      CMTime value = 0;
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v6, v11);
      uint64_t v13 = channelgroup_createFromDictionary(a1, ValueAtIndex, &value);
      if (v13) {
        break;
      }
      CFArrayAppendValue(v10, value);
      CFRelease(value);
      if (v8 == ++v11)
      {
        uint64_t v14 = 0;
        *a3 = v10;
        return v14;
      }
    }
    uint64_t v14 = v13;
    CFRelease(v10);
    return v14;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

BOOL FigNetworkInterfaceReporterECNRefused(uint64_t a1)
{
  return *(_DWORD *)(a1 + 8) == 0;
}

uint64_t FigNetworkInterfaceReporterDoesSupportSACK(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 12);
}

uint64_t FigNetworkInterfaceReporterGetPredictedWirelessThroughput()
{
  uint64_t v8 = 0;
  CFIndex v9 = &v8;
  uint64_t v10 = 0x2020000000;
  int v11 = 0;
  v0 = (void *)MEMORY[0x199711A30]();
  FigGetUpTimeNanoseconds();
  id v1 = objc_alloc_init((Class)getWRM_iRATInterfaceClass[0]());
  if (v1)
  {
    CFAllocatorRef v2 = dispatch_semaphore_create(0);
    if (v2)
    {
      CFAllocatorRef v3 = dispatch_queue_create("com.apple.coremedia.wirelesscoex", 0);
      if (v3)
      {
        FigGetUpTimeNanoseconds();
        [v1 registerClient:34 queue:v3];
        FigGetUpTimeNanoseconds();
        v7[0] = MEMORY[0x1E4F143A8];
        v7[1] = 3221225472;
        v7[2] = __FigNetworkInterfaceReporterGetPredictedWirelessThroughput_block_invoke;
        v7[3] = &unk_1E57A97D8;
        v7[4] = v2;
        v7[5] = &v8;
        [v1 getMLPredictedThroughput:v7 options:0];
        dispatch_time_t v4 = dispatch_time(0, 1000000000);
        dispatch_semaphore_wait(v2, v4);
        FigGetUpTimeNanoseconds();
        [v1 unregisterClient];
      }
    }
    else
    {
      CFAllocatorRef v3 = 0;
    }
  }
  else
  {
    CFAllocatorRef v3 = 0;
    CFAllocatorRef v2 = 0;
  }

  if (v3) {
    dispatch_release(v3);
  }
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v5 = *((unsigned int *)v9 + 6);
  _Block_object_dispose(&v8, 8);
  return v5;
}

void sub_1946B6370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

intptr_t __FigNetworkInterfaceReporterGetPredictedWirelessThroughput_block_invoke(uint64_t a1, int a2)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a2;
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void FigNetworkInterfaceReporterSamplePhysicalStatistics(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v264 = *MEMORY[0x1E4F143B8];
  CFDictionaryRef theDict = 0;
  if (a1)
  {
    if (!a2)
    {
      if (!*(void *)(a1 + 328)) {
        goto LABEL_43;
      }
      uint64_t v12 = (uint64_t *)(a1 + 328);
      goto LABEL_7;
    }
    CFBooleanRef BOOLean = 0;
    uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v10) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    uint64_t v19 = *(unsigned int (**)(uint64_t, uint64_t, void, CFDictionaryRef *))(v11 + 48);
    if (!v19 || v19(a2, 0x1EE57B6B8, *MEMORY[0x1E4F1CF80], &theDict)) {
      goto LABEL_43;
    }
    uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
    uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v21) {
      uint64_t v22 = v21;
    }
    else {
      uint64_t v22 = 0;
    }
    uint64_t v23 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, CFBooleanRef *))(v22 + 48);
    if (v23 && !v23(a2, 0x1EE57B8B8, AllocatorForMedia, &BOOLean))
    {
      int Value = CFBooleanGetValue(BOOLean);
      if (!a3) {
        goto LABEL_324;
      }
    }
    else
    {
      int Value = 0;
      if (!a3) {
        goto LABEL_324;
      }
    }
    if (!a4) {
      goto LABEL_324;
    }
    CFDictionaryRef v25 = theDict;
    if (!theDict) {
      goto LABEL_313;
    }
    buffer[0] = 0;
    LOBYTE(v262) = 0;
    CFStringRef v26 = (const __CFString *)CFDictionaryGetValue(theDict, @"_kCFNTimingDataNetworkProtocolName");
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetBooleanIfPresent();
    if (v26)
    {
      if (CFStringCompare(v26, @"http/1.1", 1uLL) == kCFCompareEqualTo)
      {
        if (!buffer[0])
        {
          uint64_t v42 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v42) {
            uint64_t v43 = v42;
          }
          else {
            uint64_t v43 = 0;
          }
          int32x4_t v40 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v43 + 32);
          if (v40)
          {
            uint64_t v41 = 0x1EE584698;
            goto LABEL_89;
          }
          goto LABEL_90;
        }
        uint64_t v34 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v34) {
          uint64_t v35 = v34;
        }
        else {
          uint64_t v35 = 0;
        }
        int32x4_t v40 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v35 + 32);
        if (!v40) {
          goto LABEL_90;
        }
        uint64_t v41 = 0x1EE5846B8;
LABEL_89:
        v40(a3, a4, v41, 1);
        goto LABEL_90;
      }
      if (CFStringCompare(v26, @"h2", 1uLL) == kCFCompareEqualTo)
      {
        if (buffer[0])
        {
          uint64_t v38 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v38) {
            uint64_t v39 = v38;
          }
          else {
            uint64_t v39 = 0;
          }
          int32x4_t v40 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v39 + 32);
          if (v40)
          {
            uint64_t v41 = 0x1EE5846F8;
            goto LABEL_89;
          }
        }
        else
        {
          uint64_t v46 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v46) {
            uint64_t v47 = v46;
          }
          else {
            uint64_t v47 = 0;
          }
          int32x4_t v40 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v47 + 32);
          if (v40)
          {
            uint64_t v41 = 0x1EE5846D8;
            goto LABEL_89;
          }
        }
        goto LABEL_90;
      }
      if (CFStringHasPrefix(v26, @"h3"))
      {
        if (buffer[0])
        {
          uint64_t v27 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v27) {
            uint64_t v28 = v27;
          }
          else {
            uint64_t v28 = 0;
          }
          int32x4_t v40 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 32);
          if (v40)
          {
            uint64_t v41 = 0x1EE584678;
            goto LABEL_89;
          }
        }
        else
        {
          uint64_t v44 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v44) {
            uint64_t v45 = v44;
          }
          else {
            uint64_t v45 = 0;
          }
          int32x4_t v40 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v45 + 32);
          if (v40)
          {
            uint64_t v41 = 0x1EE584658;
            goto LABEL_89;
          }
        }
LABEL_90:
        double v257 = 0.0;
        *(double *)buffer = 0.0;
        *(void *)&long long v262 = 0;
        if (FigCFDictionaryGetDoubleIfPresent()
          && *(double *)buffer > 0.0
          && FigCFDictionaryGetDoubleIfPresent()
          && *(double *)&v262 > 0.0
          && FigCFDictionaryGetDoubleIfPresent()
          && v257 > 0.0
          && v257 > *(double *)buffer
          && *(double *)&v262 > *(double *)buffer)
        {
          uint64_t v48 = (uint64_t)((v257 - *(double *)buffer) * 1000.0);
          uint64_t v49 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v49) {
            uint64_t v50 = v49;
          }
          else {
            uint64_t v50 = 0;
          }
          long long v51 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v50 + 32);
          if (v51) {
            v51(a3, a4, 0x1EE584058, v48);
          }
          if (Value)
          {
            uint64_t v52 = *(void *)(CMBaseObjectGetVTable() + 16);
            uint64_t v53 = v52 ? v52 : 0;
            int32x4_t v54 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v53 + 32);
            if (v54) {
              v54(a3, a4, 0x1EE584078, v48);
            }
          }
          if (!*(void *)(a1 + 312))
          {
            unint64_t v57 = (unint64_t)(*(double *)buffer * -1000.0 + *(double *)&v262 * 1000.0);
            *(void *)(a1 + 312) = v57;
            uint64_t v58 = *(void *)(CMBaseObjectGetVTable() + 16);
            uint64_t v59 = v58 ? v58 : 0;
            v117 = *(void (**)(uint64_t, uint64_t, uint64_t, unint64_t, void))(v59 + 56);
            if (v117) {
              v117(a3, a4, 0x1EE583E18, v57, 0);
            }
          }
          if (a5)
          {
            uint64_t v55 = *(void *)(CMBaseObjectGetVTable() + 16);
            uint64_t v56 = v55 ? v55 : 0;
            long long v60 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v56 + 56);
            if (v60) {
              v60(a3, a4, 0x1EE5845B8, v48, 0);
            }
          }
        }
        CFStringRef v61 = (const __CFString *)CFDictionaryGetValue(v25, @"_kCFNTimingDataNetworkProtocolName");
        if (!v61) {
          goto LABEL_313;
        }
        CFStringRef v62 = v61;
        uint64_t v63 = FigCFDictionaryGetValue();
        if (v63)
        {
          CFStringRef v64 = (const __CFString *)v63;
          LODWORD(v257) = 0;
          MEMORY[0x19970E910](sFigNetworkInterfaceNameToTypeMutex);
          int Int32IfPresent = FigCFDictionaryGetInt32IfPresent();
          MEMORY[0x19970E930](sFigNetworkInterfaceNameToTypeMutex);
          if (!Int32IfPresent)
          {
            int v66 = socket(2, 2, 0);
            if ((v66 & 0x80000000) == 0)
            {
              int v67 = v66;
              long long v262 = 0u;
              long long v263 = 0u;
              if (CFStringGetCString(v64, buffer, 256, 0x8000100u))
              {
                __strlcpy_chk();
                if ((ioctl(v67, 0xC02069ADuLL, &v262) & 0x80000000) == 0) {
                  LODWORD(v257) = v263;
                }
                close(v67);
                MEMORY[0x19970E910](sFigNetworkInterfaceNameToTypeMutex);
                FigCFDictionarySetInt32();
                MEMORY[0x19970E930](sFigNetworkInterfaceNameToTypeMutex);
              }
            }
          }
          int v68 = LODWORD(v257);
          uint64_t v69 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v69) {
            uint64_t v70 = v69;
          }
          else {
            uint64_t v70 = 0;
          }
          int32x4_t v71 = *(void (**)(uint64_t, uint64_t, uint64_t, void))(v70 + 96);
          if (v71) {
            v71(a3, a4, 0x1EE583A58, v68);
          }
          if (v68 == 3)
          {
            uint64_t v72 = *(void *)(a1 + 320);
            if (v72)
            {
              uint64_t v73 = *(void *)(v72 + 32);
              uint64_t v74 = *(void *)(CMBaseObjectGetVTable() + 16);
              uint64_t v75 = v74 ? v74 : 0;
              int16x8_t v76 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v75 + 48);
              if (v76) {
                v76(a3, a4, 0x1EE585378, v73, 0);
              }
            }
          }
          int v77 = *(_DWORD *)(a1 + 152);
          if (v77 && v77 != v68)
          {
            uint64_t v78 = *(void *)(CMBaseObjectGetVTable() + 16);
            uint64_t v79 = v78 ? v78 : 0;
            int16x8_t v80 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v79 + 32);
            if (v80) {
              v80(a3, a4, 0x1EE583A78, 1);
            }
          }
          if (v68) {
            *(_DWORD *)(a1 + 152) = v68;
          }
        }
        if (CFStringCompare(v62, @"http/1.1", 1uLL) && CFStringCompare(v62, @"h2", 1uLL))
        {
          if (CFStringHasPrefix(v62, @"h3"))
          {
            *(_DWORD *)buffer = 0;
            int16x8_t v81 = CFDictionaryGetValue(v25, @"_kCFNTimingDataConnectionStartTimeCounts");
            if (v81)
            {
              uint64_t v82 = (uint64_t)v81;
              int16x8_t v83 = CFDictionaryGetValue(v25, @"_kCFNTimingDataConnectionStopTimeCounts");
              if (v83)
              {
                uint64_t v84 = (uint64_t)v83;
                if (CFDictionaryGetValue(v25, @"_kCFNTimingDataConnectionUUID"))
                {
                  FigCFDictionaryGetIntIfPresent();
                  int v85 = *(_DWORD *)buffer;
                  uint64_t v86 = *(void *)(CMBaseObjectGetVTable() + 16);
                  if (v86) {
                    uint64_t v87 = v86;
                  }
                  else {
                    uint64_t v87 = 0;
                  }
                  v229 = *(void (**)(uint64_t, uint64_t, uint64_t, void))(v87 + 40);
                  if (v229) {
                    v229(a3, a4, 0x1EE5844D8, v85 / 1000);
                  }
                  figNetworkInterfaceAddToCountValue(v82, v84, @"_kCFNTimingDataQConnStatsBytesReceived", a3, a4, 0x1EE5844F8);
                  figNetworkInterfaceAddToCountValue(v82, v84, @"_kCFNTimingDataQConnPacketsReordered", a3, a4, 0x1EE584518);
                  figNetworkInterfaceAddToCountValue(v82, v84, @"_kCFNTimingDataQConnStatsPacketsReceived", a3, a4, 0x1EE584538);
                  if (a5)
                  {
                    int v230 = *(_DWORD *)buffer;
                    uint64_t v231 = *(void *)(CMBaseObjectGetVTable() + 16);
                    if (v231) {
                      uint64_t v232 = v231;
                    }
                    else {
                      uint64_t v232 = 0;
                    }
                    v233 = *(void (**)(uint64_t, uint64_t, uint64_t, void, void))(v232 + 56);
                    if (v233) {
                      v233(a3, a4, 0x1EE584558, v230 / 1000, 0);
                    }
                    figNetworkInterfaceAddToCountValue(v82, v84, @"_kCFNTimingDataQConnStatsBytesReceived", a3, a4, 0x1EE584578);
                    figNetworkInterfaceAddToCountValue(v82, v84, @"_kCFNTimingDataQConnStatsStreamBytesReceived", a3, a4, 0x1EE584598);
                  }
                }
              }
            }
          }
          goto LABEL_313;
        }
        CFDictionaryRef v88 = (const __CFDictionary *)CFDictionaryGetValue(v25, @"_kCFNTimingDataTCPInfoAtStart");
        if (v88)
        {
          CFDictionaryRef v89 = v88;
          CFDictionaryRef v90 = (const __CFDictionary *)CFDictionaryGetValue(v25, @"_kCFNTimingDataTCPInfoAtStop");
          if (v90)
          {
            CFDictionaryRef v91 = v90;
            int8x8_t v92 = CFDictionaryGetValue(v25, @"_kCFNTimingDataConnectionInterfaceIdentifier");
            if (v92)
            {
              uint16x8_t v93 = v92;
              if (CFDictionaryGetValue(v25, @"_kCFNTimingDataConnectionUUID"))
              {
                CFDataRef v94 = (const __CFData *)CFDictionaryGetValue(v89, v93);
                if (v94)
                {
                  CFDataRef v95 = v94;
                  CFDataRef v96 = (const __CFData *)CFDictionaryGetValue(v91, v93);
                  if (v96)
                  {
                    CFDataRef v97 = v96;
                    BytePtr = CFDataGetBytePtr(v95);
                    if (BytePtr)
                    {
                      int16x4_t v99 = BytePtr;
                      int16x8_t v100 = CFDataGetBytePtr(v97);
                      if (v100)
                      {
                        int16x4_t v101 = v100;
                        if (*((_DWORD *)v99 + 70) == *((_DWORD *)v100 + 70))
                        {
                          unsigned int v102 = v100[1];
                          if ((v102 & 8) != 0) {
                            int v103 = 2;
                          }
                          else {
                            int v103 = ((*((_DWORD *)v100 + 61) >> 15) & 1) == 0;
                          }
                          *(_DWORD *)(a1 + 8) = v103;
                          *(_DWORD *)(a1 + 12) = (v102 >> 1) & 1;
                          uint64_t v259 = 0;
                          uint64_t v260 = 0;
                          uint64_t v261 = 0;
                          int16x4_t v104 = CFDictionaryGetValue(v25, @"_kCFNTimingDataTCPInfoAtStart");
                          int v254 = a5;
                          if (v104
                            && (double v105 = *(double *)&v104,
                                (CFDictionaryRef v106 = (const __CFDictionary *)CFDictionaryGetValue(v25, @"_kCFNTimingDataTCPInfoAtStop")) != 0))
                          {
                            *(double *)buffer = v105;
                            CFDictionaryApplyFunction(v106, (CFDictionaryApplierFunction)figNetworkInterfaceTCPInfoGetByteCountsForEachInterface, buffer);
                            uint64_t v252 = v260;
                            uint64_t v250 = v259;
                            uint64_t v251 = v261;
                          }
                          else
                          {
                            uint64_t v251 = 0;
                            uint64_t v252 = 0;
                            uint64_t v250 = 0;
                          }
                          int v107 = *(_DWORD *)(a1 + 152);
                          unint64_t v108 = *((unsigned int *)v101 + 61);
                          uint64_t v109 = *(void *)(CMBaseObjectGetVTable() + 16);
                          if (v109) {
                            uint64_t v110 = v109;
                          }
                          else {
                            uint64_t v110 = 0;
                          }
                          v111 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v110 + 56);
                          if (v111) {
                            v111(a3, a4, 0x1EE584358, (v108 >> 17) & 1, 0);
                          }
                          uint64_t v112 = *((unsigned int *)v101 + 6);
                          int v253 = v107;
                          if ((v101[246] & 2) != 0)
                          {
                            uint64_t v115 = *(void *)(CMBaseObjectGetVTable() + 16);
                            if (v115) {
                              uint64_t v116 = v115;
                            }
                            else {
                              uint64_t v116 = 0;
                            }
                            v122 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v116 + 40);
                            if (v122) {
                              v122(a3, a4, 0x1EE584378, v112);
                            }
                            uint64_t v123 = *((unsigned int *)v101 + 7);
                            uint64_t v124 = *(void *)(CMBaseObjectGetVTable() + 16);
                            if (v124) {
                              uint64_t v125 = v124;
                            }
                            else {
                              uint64_t v125 = 0;
                            }
                            v131 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v125 + 40);
                            if (v131) {
                              v131(a3, a4, 0x1EE584398, v123);
                            }
                            uint64_t v132 = *(void *)(v101 + 124);
                            uint64_t v133 = *(void *)(v99 + 124);
                            uint64_t v134 = *(void *)(CMBaseObjectGetVTable() + 16);
                            if (v134) {
                              uint64_t v135 = v134;
                            }
                            else {
                              uint64_t v135 = 0;
                            }
                            v141 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v135 + 32);
                            if (v141) {
                              v141(a3, a4, 0x1EE584458, v132 - v133);
                            }
                            uint64_t v142 = *(void *)(v101 + 108);
                            uint64_t v143 = *(void *)(v99 + 108);
                            uint64_t v144 = *(void *)(CMBaseObjectGetVTable() + 16);
                            if (v144) {
                              uint64_t v145 = v144;
                            }
                            else {
                              uint64_t v145 = 0;
                            }
                            v154 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v145 + 32);
                            if (v154) {
                              v154(a3, a4, 0x1EE584478, v142 - v143);
                            }
                            int v247 = *((_DWORD *)v99 + 67);
                            int v249 = *((_DWORD *)v101 + 67);
                            int v245 = *((_DWORD *)v101 + 65);
                            int v155 = *((_DWORD *)v99 + 65);
                            int v156 = *((_DWORD *)v101 + 68);
                            int v157 = *((_DWORD *)v99 + 68);
                            int v158 = *((_DWORD *)v101 + 69);
                            int v159 = *((_DWORD *)v99 + 69);
                            uint64_t v160 = *(void *)(CMBaseObjectGetVTable() + 16);
                            if (v160) {
                              uint64_t v161 = v160;
                            }
                            else {
                              uint64_t v161 = 0;
                            }
                            v169 = *(void (**)(uint64_t, uint64_t, uint64_t, void))(v161 + 32);
                            if (v169) {
                              v169(a3, a4, 0x1EE584498, (v249 + v245 + v156 + v158 - (v247 + v155 + v157 + v159)));
                            }
                            uint64_t v170 = *(void *)(v101 + 100);
                            uint64_t v171 = *(void *)(v99 + 100);
                            uint64_t v172 = *(void *)(v101 + 68);
                            uint64_t v173 = *(void *)(v99 + 68);
                            uint64_t v174 = *(void *)(CMBaseObjectGetVTable() + 16);
                            if (v174) {
                              uint64_t v175 = v174;
                            }
                            else {
                              uint64_t v175 = 0;
                            }
                            v181 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v175 + 32);
                            if (v181) {
                              v181(a3, a4, 0x1EE5844B8, v170 + v172 - (v171 + v173));
                            }
                            int v182 = *((_DWORD *)v101 + 62);
                            int v183 = *((_DWORD *)v99 + 62);
                            uint64_t v184 = *(void *)(CMBaseObjectGetVTable() + 16);
                            if (v184) {
                              uint64_t v185 = v184;
                            }
                            else {
                              uint64_t v185 = 0;
                            }
                            int v186 = v253;
                            v190 = *(void (**)(uint64_t, uint64_t, uint64_t, void))(v185 + 32);
                            if (v190) {
                              v190(a3, a4, 0x1EE584418, (v182 - v183));
                            }
                            int v191 = *((_DWORD *)v101 + 63);
                            int v192 = *((_DWORD *)v99 + 63);
                            uint64_t v193 = *(void *)(CMBaseObjectGetVTable() + 16);
                            if (v193) {
                              uint64_t v194 = v193;
                            }
                            else {
                              uint64_t v194 = 0;
                            }
                            v195 = *(void (**)(uint64_t, uint64_t, uint64_t, void))(v194 + 32);
                            if (v195) {
                              v195(a3, a4, 0x1EE584438, (v191 - v192));
                            }
                            int v196 = *((_DWORD *)v101 + 66);
                            int v197 = *((_DWORD *)v99 + 66);
                            uint64_t v198 = *(void *)(CMBaseObjectGetVTable() + 16);
                            if (v198) {
                              uint64_t v199 = v198;
                            }
                            else {
                              uint64_t v199 = 0;
                            }
                            v187 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v199 + 32);
                            if (v187)
                            {
                              uint64_t v188 = (v196 - v197);
                              uint64_t v189 = 0x1EE5843D8;
                              goto LABEL_259;
                            }
                          }
                          else
                          {
                            uint64_t v113 = *(void *)(CMBaseObjectGetVTable() + 16);
                            if (v113) {
                              uint64_t v114 = v113;
                            }
                            else {
                              uint64_t v114 = 0;
                            }
                            v118 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v114 + 40);
                            if (v118) {
                              v118(a3, a4, 0x1EE584238, v112);
                            }
                            uint64_t v119 = *((unsigned int *)v101 + 7);
                            uint64_t v120 = *(void *)(CMBaseObjectGetVTable() + 16);
                            if (v120) {
                              uint64_t v121 = v120;
                            }
                            else {
                              uint64_t v121 = 0;
                            }
                            v126 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v121 + 40);
                            if (v126) {
                              v126(a3, a4, 0x1EE584258, v119);
                            }
                            uint64_t v127 = *(void *)(v101 + 124);
                            uint64_t v128 = *(void *)(v99 + 124);
                            uint64_t v129 = *(void *)(CMBaseObjectGetVTable() + 16);
                            if (v129) {
                              uint64_t v130 = v129;
                            }
                            else {
                              uint64_t v130 = 0;
                            }
                            v136 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v130 + 32);
                            if (v136) {
                              v136(a3, a4, 0x1EE5842D8, v127 - v128);
                            }
                            uint64_t v137 = *(void *)(v101 + 108);
                            uint64_t v138 = *(void *)(v99 + 108);
                            uint64_t v139 = *(void *)(CMBaseObjectGetVTable() + 16);
                            if (v139) {
                              uint64_t v140 = v139;
                            }
                            else {
                              uint64_t v140 = 0;
                            }
                            v146 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v140 + 32);
                            if (v146) {
                              v146(a3, a4, 0x1EE5842F8, v137 - v138);
                            }
                            int v246 = *((_DWORD *)v99 + 67);
                            int v248 = *((_DWORD *)v101 + 67);
                            int v147 = *((_DWORD *)v101 + 65);
                            int v148 = *((_DWORD *)v99 + 65);
                            int v149 = *((_DWORD *)v101 + 68);
                            int v244 = *((_DWORD *)v99 + 68);
                            int v150 = *((_DWORD *)v101 + 69);
                            int v151 = *((_DWORD *)v99 + 69);
                            uint64_t v152 = *(void *)(CMBaseObjectGetVTable() + 16);
                            if (v152) {
                              uint64_t v153 = v152;
                            }
                            else {
                              uint64_t v153 = 0;
                            }
                            v162 = *(void (**)(uint64_t, uint64_t, uint64_t, void))(v153 + 32);
                            if (v162) {
                              v162(a3, a4, 0x1EE584318, (v248 + v147 + v149 + v150 - (v246 + v148 + v244 + v151)));
                            }
                            uint64_t v163 = *(void *)(v101 + 100);
                            uint64_t v164 = *(void *)(v99 + 100);
                            uint64_t v165 = *(void *)(v101 + 68);
                            uint64_t v166 = *(void *)(v99 + 68);
                            uint64_t v167 = *(void *)(CMBaseObjectGetVTable() + 16);
                            if (v167) {
                              uint64_t v168 = v167;
                            }
                            else {
                              uint64_t v168 = 0;
                            }
                            v176 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v168 + 32);
                            if (v176) {
                              v176(a3, a4, 0x1EE584338, v163 + v165 - (v164 + v166));
                            }
                            int v177 = *((_DWORD *)v101 + 66);
                            int v178 = *((_DWORD *)v99 + 66);
                            uint64_t v179 = *(void *)(CMBaseObjectGetVTable() + 16);
                            if (v179) {
                              uint64_t v180 = v179;
                            }
                            else {
                              uint64_t v180 = 0;
                            }
                            int v186 = v253;
                            v187 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v180 + 32);
                            if (v187)
                            {
                              uint64_t v188 = (v177 - v178);
                              uint64_t v189 = 0x1EE584298;
LABEL_259:
                              v187(a3, a4, v189, v188);
                            }
                          }
                          uint64_t v200 = *(void *)(CMBaseObjectGetVTable() + 16);
                          if (v200) {
                            uint64_t v201 = v200;
                          }
                          else {
                            uint64_t v201 = 0;
                          }
                          v202 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v201 + 32);
                          if (v202) {
                            v202(a3, a4, 0x1EE583A98, v250);
                          }
                          uint64_t v203 = *(void *)(CMBaseObjectGetVTable() + 16);
                          if (v203) {
                            uint64_t v204 = v203;
                          }
                          else {
                            uint64_t v204 = 0;
                          }
                          v205 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v204 + 32);
                          if (v205) {
                            v205(a3, a4, 0x1EE583AF8, v251);
                          }
                          if (v186 == 4)
                          {
                            uint64_t v206 = *(void *)(CMBaseObjectGetVTable() + 16);
                            if (v206) {
                              uint64_t v207 = v206;
                            }
                            else {
                              uint64_t v207 = 0;
                            }
                            v210 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v207 + 32);
                            if (v210)
                            {
                              uint64_t v211 = 0x1EE583AD8;
LABEL_281:
                              v210(a3, a4, v211, v252);
                            }
                          }
                          else
                          {
                            uint64_t v208 = *(void *)(CMBaseObjectGetVTable() + 16);
                            if (v208) {
                              uint64_t v209 = v208;
                            }
                            else {
                              uint64_t v209 = 0;
                            }
                            v210 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v209 + 32);
                            if (v210)
                            {
                              uint64_t v211 = 0x1EE583AB8;
                              goto LABEL_281;
                            }
                          }
                          if (v254)
                          {
                            uint64_t v212 = *((unsigned int *)v101 + 5);
                            uint64_t v213 = *(void *)(CMBaseObjectGetVTable() + 16);
                            if (v213) {
                              uint64_t v214 = v213;
                            }
                            else {
                              uint64_t v214 = 0;
                            }
                            v215 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v214 + 56);
                            if (v215) {
                              v215(a3, a4, 0x1EE584618, v212, 0);
                            }
                            uint64_t v216 = *((unsigned int *)v101 + 6);
                            uint64_t v217 = *(void *)(CMBaseObjectGetVTable() + 16);
                            if (v217) {
                              uint64_t v218 = v217;
                            }
                            else {
                              uint64_t v218 = 0;
                            }
                            v219 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v218 + 56);
                            if (v219) {
                              v219(a3, a4, 0x1EE5845F8, v216, 0);
                            }
                            uint64_t v220 = *((unsigned int *)v101 + 7);
                            uint64_t v221 = *(void *)(CMBaseObjectGetVTable() + 16);
                            if (v221) {
                              uint64_t v222 = v221;
                            }
                            else {
                              uint64_t v222 = 0;
                            }
                            v223 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v222 + 56);
                            if (v223) {
                              v223(a3, a4, 0x1EE584638, v220, 0);
                            }
                            uint64_t v224 = *(void *)(v101 + 108);
                            uint64_t v225 = *(void *)(v99 + 108);
                            uint64_t v226 = *(void *)(CMBaseObjectGetVTable() + 16);
                            if (v226) {
                              uint64_t v227 = v226;
                            }
                            else {
                              uint64_t v227 = 0;
                            }
                            v228 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v227 + 56);
                            if (v228) {
                              v228(a3, a4, 0x1EE5845D8, v224 - v225, 0);
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
LABEL_313:
        uint64_t v234 = *(void *)(a1 + 320);
        if (v234)
        {
          uint64_t v235 = *(void *)(v234 + 64);
          uint64_t v236 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v236) {
            uint64_t v237 = v236;
          }
          else {
            uint64_t v237 = 0;
          }
          v238 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v237 + 56);
          if (v238) {
            v238(a3, a4, 0x1EE581A78, v235 << 10, 0);
          }
          uint64_t v239 = *(void *)(*(void *)(a1 + 320) + 72);
          uint64_t v240 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v240) {
            uint64_t v241 = v240;
          }
          else {
            uint64_t v241 = 0;
          }
          v242 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v241 + 56);
          if (v242) {
            v242(a3, a4, 0x1EE581A98, v239 << 10, 0);
          }
        }
LABEL_324:
        if (!*(void *)(a1 + 328)) {
          goto LABEL_43;
        }
        int v243 = *(_DWORD *)(a1 + 152);
        uint64_t v12 = (uint64_t *)(a1 + 328);
        if (v243)
        {
          if (*(_DWORD *)a1)
          {
            if (*(_DWORD *)a1 != v243) {
              *(unsigned char *)(a1 + 4) = 1;
            }
            if ((v243 - 3) <= 1) {
              goto LABEL_336;
            }
          }
          else
          {
            *(_DWORD *)a1 = v243;
            if ((v243 - 5) > 0xFFFFFFFD)
            {
LABEL_336:
              if (!*(void *)(a1 + 320)) {
                *(void *)(a1 + 320) = figNetworkInterfaceRetainGlobalWifiMonitor();
              }
              goto LABEL_7;
            }
            if (*(void *)(a1 + 320))
            {
              if (sFigNetworkinterfaceWifiMonitor) {
                dispatch_sync((dispatch_queue_t)sFigNetworkInterfaceMonitorDispatchQueue, &__block_literal_global_123);
              }
              *(void *)(a1 + 320) = 0;
            }
          }
        }
LABEL_7:
        uint64_t v13 = *(void *)(a1 + 320);
        if (v13)
        {
          float v14 = *(float *)(v13 + 40);
          if (v14 != -1.0)
          {
            double v15 = v14;
            uint64_t v16 = *v12;
            if (!*v12)
            {
LABEL_36:
              if (a3 && a4)
              {
                uint64_t v29 = *(void *)(CMBaseObjectGetVTable() + 16);
                if (v29) {
                  uint64_t v30 = v29;
                }
                else {
                  uint64_t v30 = 0;
                }
                uint64_t v31 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v30 + 40);
                if (v31) {
                  v31(a3, a4, 0x1EE582E38, (uint64_t)(v15 * 1000.0));
                }
              }
              goto LABEL_43;
            }
            int v17 = *(_DWORD *)(v16 + 32);
            if (v17)
            {
              if (*(double *)v16 > v15) {
                *(double *)uint64_t v16 = v15;
              }
              uint64_t v18 = (double *)(v16 + 8);
              if (*(double *)(v16 + 8) >= v15) {
                goto LABEL_35;
              }
            }
            else
            {
              *(double *)uint64_t v16 = v15;
              uint64_t v18 = (double *)(v16 + 8);
            }
            *uint64_t v18 = v15;
LABEL_35:
            *(double *)(v16 + 16) = *(double *)(v16 + 16) + v15;
            *(double *)(v16 + 24) = v15;
            *(_DWORD *)(v16 + 32) = v17 + 1;
            goto LABEL_36;
          }
        }
LABEL_43:
        if (theDict) {
          CFRelease(theDict);
        }
        return;
      }
    }
    if (buffer[0])
    {
      uint64_t v32 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v32) {
        uint64_t v33 = v32;
      }
      else {
        uint64_t v33 = 0;
      }
      int32x4_t v40 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v33 + 32);
      if (!v40) {
        goto LABEL_90;
      }
      uint64_t v41 = 0x1EE584738;
    }
    else
    {
      uint64_t v36 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v36) {
        uint64_t v37 = v36;
      }
      else {
        uint64_t v37 = 0;
      }
      int32x4_t v40 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v37 + 32);
      if (!v40) {
        goto LABEL_90;
      }
      uint64_t v41 = 0x1EE584718;
    }
    goto LABEL_89;
  }
}

void FigAccessLogUpdateWithPhysicalStatistcs(__CFDictionary *a1, CFDictionaryRef theDict)
{
  CMTime value = 0;
  if (theDict)
  {
    if (CFDictionaryGetValueIfPresent(theDict, @"rssi", (const void **)&value)) {
      CFDictionarySetValue(a1, @"c-rssi", value);
    }
    if (CFDictionaryGetValueIfPresent(theDict, @"rsmn", (const void **)&value)) {
      CFDictionarySetValue(a1, @"c-rssi-min", value);
    }
    if (CFDictionaryGetValueIfPresent(theDict, @"rsmx", (const void **)&value)) {
      CFDictionarySetValue(a1, @"c-rssi-max", value);
    }
    if (CFDictionaryGetValueIfPresent(theDict, @"rsav", (const void **)&value)) {
      CFDictionarySetValue(a1, @"c-rssi-avg", value);
    }
  }
}

void FigReportingAgentUpdateFinalTransactionMetrics(uint64_t a1, uint64_t a2, BOOL a3, int a4)
{
  CFTypeRef v71 = 0;
  unsigned int v70 = 0;
  obuint64_t j = 0;
  nw_data_transfer_report_t report = 0;
  unint64_t v66 = 0;
  unint64_t v67 = 0;
  unint64_t v64 = 0;
  unint64_t v65 = 0;
  unint64_t v62 = 0;
  unint64_t v63 = 0;
  char v61 = 0;
  unint64_t v60 = 0;
  if (a1 && a2)
  {
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v9 = v8 ? v8 : 0;
    uint64_t v10 = *(unsigned int (**)(uint64_t, unint64_t *, unint64_t *, void, unint64_t *, unint64_t *, unint64_t *, unint64_t *, char *, unint64_t *, unsigned int *, nw_data_transfer_report_t *, void **))(v9 + 40);
    if (v10)
    {
      if (!v10(a2, &v67, &v66, 0, &v65, &v64, &v63, &v62, &v61, &v60, &v70, &report, &obj))
      {
        if (a4 == 1)
        {
          unint64_t v11 = v67;
          uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v12) {
            uint64_t v13 = v12;
          }
          else {
            uint64_t v13 = 0;
          }
          float v14 = *(void (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v13 + 40);
          if (v14) {
            v14(a1, 0x1EE582C18, 0x1EE585798, v11 / 0xF4240);
          }
          unint64_t v15 = v66;
          uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v16) {
            uint64_t v17 = v16;
          }
          else {
            uint64_t v17 = 0;
          }
          uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v17 + 40);
          if (v18) {
            v18(a1, 0x1EE582C18, 0x1EE5857B8, v15 / 0xF4240);
          }
          unint64_t v19 = v65;
          uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v20) {
            uint64_t v21 = v20;
          }
          else {
            uint64_t v21 = 0;
          }
          uint64_t v22 = *(void (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v21 + 40);
          if (v22) {
            v22(a1, 0x1EE582C18, 0x1EE5857D8, v19 / 0xF4240);
          }
          unint64_t v23 = v64;
          uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v24) {
            uint64_t v25 = v24;
          }
          else {
            uint64_t v25 = 0;
          }
          CFStringRef v26 = *(void (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v25 + 40);
          if (v26) {
            v26(a1, 0x1EE582C18, 0x1EE5857F8, v23 / 0xF4240);
          }
          unint64_t v27 = v63;
          uint64_t v28 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v28) {
            uint64_t v29 = v28;
          }
          else {
            uint64_t v29 = 0;
          }
          uint64_t v30 = *(void (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v29 + 40);
          if (v30) {
            v30(a1, 0x1EE582C18, 0x1EE585818, v27 / 0xF4240);
          }
          unint64_t v31 = v62;
          uint64_t v32 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v32) {
            uint64_t v33 = v32;
          }
          else {
            uint64_t v33 = 0;
          }
          uint64_t v34 = *(void (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v33 + 40);
          if (v34) {
            v34(a1, 0x1EE582C18, 0x1EE585838, v31 / 0xF4240);
          }
          uint64_t v35 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v35) {
            uint64_t v36 = v35;
          }
          else {
            uint64_t v36 = 0;
          }
          uint64_t v37 = *(void (**)(uint64_t, uint64_t, uint64_t, void))(v36 + 40);
          if (v37) {
            v37(a1, 0x1EE582C18, 0x1EE585858, 0);
          }
          unint64_t v38 = v60;
          uint64_t v39 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v39) {
            uint64_t v40 = v39;
          }
          else {
            uint64_t v40 = 0;
          }
          uint64_t v41 = *(void (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v40 + 40);
          if (v41) {
            v41(a1, 0x1EE582C18, 0x1EE585878, v38 / 0xF4240);
          }
        }
        if (!a3)
        {
          uint64_t v42 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v42) {
            uint64_t v43 = v42;
          }
          else {
            uint64_t v43 = 0;
          }
          uint64_t v44 = *(uint64_t (**)(uint64_t, uint64_t, void, CFTypeRef *))(v43 + 48);
          if (v44) {
            a3 = v44(a2, 0x1EE57B638, *MEMORY[0x1E4F1CF80], &v71) == 0;
          }
          else {
            a3 = 0;
          }
        }
        figReportingAgentUpdatePrivacyStance(a1, v70, a3);
        uint64_t v45 = report;
        if (report)
        {
          uint32_t path_count = nw_data_transfer_report_get_path_count(report);
          if (path_count)
          {
            uint32_t v47 = path_count;
            for (uint32_t i = 0; i != v47; ++i)
            {
              nw_interface_radio_type_t path_radio_type = nw_data_transfer_report_get_path_radio_type(v45, i);
              uint64_t received_application_byte_count = nw_data_transfer_report_get_received_application_byte_count(v45, i);
              switch(path_radio_type)
              {
                case nw_interface_radio_type_cell_lte:
                  long long v51 = kFigReportingEventKey_PerRATRxBytes_4G;
                  break;
                case nw_interface_radio_type_cell_endc_sub6:
                  long long v51 = kFigReportingEventKey_PerRATRxBytes_5G_NSA_FR1;
                  break;
                case nw_interface_radio_type_cell_endc_mmw:
                  long long v51 = kFigReportingEventKey_PerRATRxBytes_5G_NSA_FR2;
                  break;
                case nw_interface_radio_type_cell_nr_sa_sub6:
                  long long v51 = kFigReportingEventKey_PerRATRxBytes_5G_SA_FR1;
                  break;
                case nw_interface_radio_type_cell_nr_sa_mmw:
                  long long v51 = kFigReportingEventKey_PerRATRxBytes_5G_SA_FR2;
                  break;
                case nw_interface_radio_type_cell_wcdma:
                case nw_interface_radio_type_cell_evdo:
                  long long v51 = kFigReportingEventKey_PerRATRxBytes_3G;
                  break;
                case nw_interface_radio_type_cell_gsm:
                case nw_interface_radio_type_cell_cdma:
                  long long v51 = kFigReportingEventKey_PerRATRxBytes_LegacyCell;
                  break;
                default:
                  if (path_radio_type - 1 >= 6) {
                    long long v51 = kFigReportingEventKey_PerRATRxBytes_Other;
                  }
                  else {
                    long long v51 = kFigReportingEventKey_PerRATRxBytes_Wifi;
                  }
                  break;
              }
              uint64_t v52 = *v51;
              if (*v51)
              {
                uint64_t v53 = *(void *)(CMBaseObjectGetVTable() + 16);
                uint64_t v54 = v53 ? v53 : 0;
                uint64_t v55 = *(void (**)(uint64_t, uint64_t, __CFString *, uint64_t))(v54 + 32);
                if (v55) {
                  v55(a1, 0x1EE582B78, v52, received_application_byte_count);
                }
              }
            }
          }
        }
        if (obj)
        {
          uint64_t v72 = 0;
          nw_establishment_report_get_accurate_ecn_state();
          if (HIDWORD(v72) <= 9)
          {
            uint64_t v56 = (uint64_t)*off_1E57A9818[SHIDWORD(v72)];
            if (v56)
            {
              uint64_t v57 = *(void *)(CMBaseObjectGetVTable() + 16);
              uint64_t v58 = v57 ? v57 : 0;
              uint64_t v59 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v58 + 32);
              if (v59) {
                v59(a1, 0x1EE582B78, v56, 1);
              }
            }
          }
        }
      }
    }
  }
  if (v71) {
    CFRelease(v71);
  }
  if (report) {
    nw_release(report);
  }
  if (obj) {
    nw_release(obj);
  }
}

uint64_t figReportingAgentUpdatePrivacyStance(uint64_t result, unsigned int a2, int a3)
{
  if (a2 <= 4)
  {
    CFAllocatorRef v3 = &off_1E57A9868[a2];
    if (!a3) {
      CFAllocatorRef v3 = &off_1E57A9890[a2];
    }
    dispatch_time_t v4 = **v3;
    if (v4)
    {
      uint64_t v5 = result;
      if (result)
      {
        uint64_t VTable = CMBaseObjectGetVTable();
        uint64_t v8 = *(void *)(VTable + 16);
        uint64_t result = VTable + 16;
        uint64_t v7 = v8;
        uint64_t v9 = v8 ? v7 : 0;
        uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, __CFString *, uint64_t))(v9 + 32);
        if (v10)
        {
          return v10(v5, 0x1EE582B78, v4, 1);
        }
      }
    }
  }
  return result;
}

uint64_t FigReportingAgentUpdateFinalReportFromCustomURLResponse(uint64_t result, CFDictionaryRef theDict, int a3)
{
  CMTime value = 0;
  if (theDict)
  {
    uint64_t v4 = result;
    uint64_t result = CFDictionaryGetValueIfPresent(theDict, (const void *)*MEMORY[0x1E4F202D0], (const void **)&value);
    if (result)
    {
      unsigned int SInt64 = FigCFNumberGetSInt64();
      return figReportingAgentUpdatePrivacyStance(v4, SInt64, a3);
    }
  }
  return result;
}

__CFDictionary *FigNetworkInterfaceReporterCopyPhysicalStatistics(uint64_t a1)
{
  if (!a1 || !*(void *)(a1 + 328)) {
    return 0;
  }
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 4, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    if (*(void *)(a1 + 320))
    {
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = __FigNetworkInterfaceReporterCopyPhysicalStatistics_block_invoke;
      block[3] = &__block_descriptor_48_e5_v8__0l;
      block[4] = a1;
      block[5] = Mutable;
      dispatch_sync((dispatch_queue_t)sFigNetworkInterfaceMonitorDispatchQueue, block);
    }
    uint64_t v4 = *(void *)(a1 + 328);
    if (v4)
    {
      CFNumberRef v5 = CFNumberCreate(v2, kCFNumberDoubleType, (const void *)(v4 + 24));
      CFNumberRef v6 = CFNumberCreate(v2, kCFNumberDoubleType, (const void *)v4);
      CFNumberRef v7 = CFNumberCreate(v2, kCFNumberDoubleType, (const void *)(v4 + 8));
      unsigned int v8 = *(_DWORD *)(v4 + 32);
      if (v8) {
        double v9 = *(double *)(v4 + 16) / (double)v8;
      }
      else {
        double v9 = 0.0;
      }
      double valuePtr = v9;
      CFNumberRef v10 = CFNumberCreate(v2, kCFNumberDoubleType, &valuePtr);
      if (v5) {
        CFDictionarySetValue(Mutable, @"rssi", v5);
      }
      if (v6) {
        CFDictionarySetValue(Mutable, @"rsmn", v6);
      }
      if (v7) {
        CFDictionarySetValue(Mutable, @"rsmx", v7);
      }
      if (v10) {
        CFDictionarySetValue(Mutable, @"rsav", v10);
      }
      if (v5) {
        CFRelease(v5);
      }
      if (v6) {
        CFRelease(v6);
      }
      if (v7) {
        CFRelease(v7);
      }
      if (v10) {
        CFRelease(v10);
      }
    }
  }
  return Mutable;
}

void __FigNetworkInterfaceReporterCopyPhysicalStatistics_block_invoke(uint64_t a1)
{
  id v1 = *(const void **)(*(void *)(*(void *)(a1 + 32) + 320) + 32);
  if (v1) {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 40), @"freq", v1);
  }
}

CFMutableDictionaryRef FigNetworkInterfaceReporterCopyBandwidthEstimates(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = 0;
  if (a1 && (sFigIRATPermanentlyDisabled & 1) == 0)
  {
    BOOL v3 = *(_DWORD *)a1 > 4u || ((1 << *(_DWORD *)a1) & 0x19) == 0;
    if (!v3
      && (*(void *)(a1 + 320)
       || (uint64_t v4 = figNetworkInterfaceRetainGlobalWifiMonitor(), (*(void *)(a1 + 320) = v4) != 0)))
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (Mutable)
      {
        FigCFDictionarySetInt64();
        FigCFDictionarySetInt64();
      }
    }
    else
    {
      return 0;
    }
  }
  return Mutable;
}

uint64_t figNetworkInterfaceRetainGlobalWifiMonitor()
{
  uint64_t v4 = 0;
  CFNumberRef v5 = &v4;
  uint64_t v6 = 0x2020000000;
  uint64_t v7 = 0;
  if (sFigNetworkInterfaceMonitorWifiOnce != -1) {
    dispatch_once_f(&sFigNetworkInterfaceMonitorWifiOnce, 0, (dispatch_function_t)figNetworkinterfaceMonitorInitWifiOnce);
  }
  if (sFigNetworkInterfaceMonitorDispatchQueue) {
    BOOL v0 = sFigNetworkInterfaceMonitorWifiManagerMessagingQueue == 0;
  }
  else {
    BOOL v0 = 1;
  }
  if (!v0)
  {
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __figNetworkInterfaceRetainGlobalWifiMonitor_block_invoke;
    block[3] = &unk_1E57982D0;
    block[4] = &v4;
    dispatch_sync((dispatch_queue_t)sFigNetworkInterfaceMonitorDispatchQueue, block);
  }
  uint64_t v1 = v5[3];
  _Block_object_dispose(&v4, 8);
  return v1;
}

uint64_t FigNetworkInterfaceReporterReportStreamingActivity(const __CFDictionary *a1)
{
  uint64_t v10 = 0;
  CMTime value = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v7 = 0;
  uint64_t v6 = 0;
  char v5 = 0;
  if (!a1 || (sFigIRATPermanentlyDisabled & 1) != 0) {
    return 0;
  }
  figNetworkMonitorInterfaceIRATEnsureService();
  if (sFigNetworkInterfaceMonitorDispatchQueue)
  {
    FigCFDictionaryGetInt64IfPresent();
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetInt64IfPresent();
    FigCFDictionaryGetInt64IfPresent();
    FigCFDictionaryGetInt64IfPresent();
    FigCFDictionaryGetInt64IfPresent();
    CFDictionaryGetValueIfPresent(a1, @"_CMSessID", (const void **)&value);
    if (value)
    {
      CFRetain(a1);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = __FigNetworkInterfaceReporterReportStreamingActivity_block_invoke;
      block[3] = &__block_descriptor_49_e5_v8__0l;
      char v4 = v5;
      block[4] = value;
      void block[5] = a1;
      dispatch_async((dispatch_queue_t)sFigNetworkInterfaceMonitorDispatchQueue, block);
    }
    return 0;
  }

  return FigSignalErrorAt();
}

void figNetworkMonitorInterfaceIRATEnsureService()
{
  if (sFigNetworkInterfaceMonitorOnce != -1) {
    dispatch_once_f(&sFigNetworkInterfaceMonitorOnce, 0, (dispatch_function_t)figNetworkinterfaceMonitorInitOnce);
  }
  BOOL v0 = sFigNetworkInterfaceMonitorDispatchQueue;
  if (sFigNetworkInterfaceMonitorDispatchQueue) {
    BOOL v1 = sFigIRATXPCConnection == 0;
  }
  else {
    BOOL v1 = 0;
  }
  if (v1)
  {
    dispatch_async(v0, &__block_literal_global_109);
  }
}

void __FigNetworkInterfaceReporterReportStreamingActivity_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (CFStringGetCString(*(CFStringRef *)(a1 + 32), buffer, 256, 0x8000100u)) {
    BOOL v2 = sFigIRATXPCConnection == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (!v2)
  {
    xpc_object_t IRATStatusUpdateMessageApplicationEntry = figNetworkMonitorInterfaceCreateIRATStatusUpdateMessageApplicationEntry();
    if (IRATStatusUpdateMessageApplicationEntry)
    {
      char v4 = IRATStatusUpdateMessageApplicationEntry;
      xpc_dictionary_set_uint64(IRATStatusUpdateMessageApplicationEntry, "kWRMVideoStreamingStarted", *(unsigned char *)(a1 + 48) != 0);
      if (*(unsigned char *)(a1 + 48)) {
        int v5 = gFigNetworkInterfaceReporter_block_invoke_sFigInterfaceReportingStreamingActivityCount + 1;
      }
      else {
        int v5 = gFigNetworkInterfaceReporter_block_invoke_sFigInterfaceReportingStreamingActivityCount - 1;
      }
      gFigNetworkInterfaceReporter_block_invoke_sFigInterfaceReportingStreamingActivityCFIndex Count = v5;
      IRATStatusUpdateMessage = figNetworkMonitorInterfaceCreateIRATStatusUpdateMessage(v4);
      if (IRATStatusUpdateMessage)
      {
        uint64_t v7 = IRATStatusUpdateMessage;
        xpc_connection_send_message((xpc_connection_t)sFigIRATXPCConnection, IRATStatusUpdateMessage);
        xpc_release(v7);
      }
      xpc_release(v4);
    }
  }
  uint64_t v8 = *(const void **)(a1 + 40);
  if (v8) {
    CFRelease(v8);
  }
}

xpc_object_t figNetworkMonitorInterfaceCreateIRATStatusUpdateMessageApplicationEntry()
{
  xpc_object_t v0 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v1 = v0;
  if (v0) {
    xpc_dictionary_set_uint64(v0, "kWRMApplicationType", 0xC8uLL);
  }
  return v1;
}

void *figNetworkMonitorInterfaceCreateIRATStatusUpdateMessage(void *a1)
{
  xpc_object_t v2 = xpc_array_create(0, 0);
  if (!v2) {
    return 0;
  }
  BOOL v3 = v2;
  xpc_array_append_value(v2, a1);
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    int v5 = v4;
    xpc_dictionary_set_value(v4, "kWRMApplicationTypeList", v3);
    xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
    uint64_t v7 = v6;
    if (v6)
    {
      xpc_dictionary_set_uint64(v6, "kMessageId", 0x195uLL);
      xpc_dictionary_set_value(v7, "kMessageArgs", v5);
    }
    xpc_release(v3);
  }
  else
  {
    uint64_t v7 = 0;
    int v5 = v3;
  }
  xpc_release(v5);
  return v7;
}

uint64_t FigNetworkInterfaceReporterReportEstimatedMaximumDemand(const void *a1, uint64_t a2)
{
  if (sFigIRATPermanentlyDisabled) {
    return 0;
  }
  figNetworkMonitorInterfaceIRATEnsureService();
  xpc_object_t v4 = sFigNetworkInterfaceMonitorDispatchQueue;
  if (sFigNetworkInterfaceMonitorDispatchQueue)
  {
    if (a1)
    {
      CFRetain(a1);
      xpc_object_t v4 = sFigNetworkInterfaceMonitorDispatchQueue;
    }
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    v6[2] = __FigNetworkInterfaceReporterReportEstimatedMaximumDemand_block_invoke;
    v6[3] = &__block_descriptor_48_e5_v8__0l;
    v6[4] = a2;
    v6[5] = a1;
    dispatch_async(v4, v6);
    return 0;
  }

  return FigSignalErrorAt();
}

void __FigNetworkInterfaceReporterReportEstimatedMaximumDemand_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if ((unint64_t)(v2 - 1) < 0x3FF) {
    uint64_t v3 = 1;
  }
  else {
    uint64_t v3 = v2 >> 10;
  }
  if (sFigIRATXPCConnection)
  {
    xpc_object_t IRATStatusUpdateMessageApplicationEntry = figNetworkMonitorInterfaceCreateIRATStatusUpdateMessageApplicationEntry();
    if (IRATStatusUpdateMessageApplicationEntry)
    {
      int v5 = IRATStatusUpdateMessageApplicationEntry;
      xpc_dictionary_set_uint64(IRATStatusUpdateMessageApplicationEntry, "kMaxElgBrate", v3);
      if (!*(void *)(a1 + 40) || !FigXPCMessageSetCFString())
      {
        xpc_object_t v6 = xpc_array_create(0, 0);
        if (v6)
        {
          uint64_t v7 = v6;
          xpc_array_append_value(v6, v5);
          xpc_object_t v8 = xpc_dictionary_create(0, 0, 0);
          if (v8)
          {
            uint64_t v9 = v8;
            xpc_dictionary_set_value(v8, "kWRMApplicationTypeList", v7);
            xpc_object_t v10 = xpc_dictionary_create(0, 0, 0);
            if (v10)
            {
              unint64_t v11 = v10;
              xpc_dictionary_set_uint64(v10, "kMessageId", 0x1A2uLL);
              xpc_dictionary_set_value(v11, "kMessageArgs", v9);
              xpc_release(v7);
              xpc_release(v9);
              xpc_connection_send_message((xpc_connection_t)sFigIRATXPCConnection, v11);
              uint64_t v9 = v11;
            }
            else
            {
              xpc_release(v7);
            }
          }
          else
          {
            uint64_t v9 = v7;
          }
          xpc_release(v9);
        }
      }
      xpc_release(v5);
    }
  }
  uint64_t v12 = *(const void **)(a1 + 40);
  if (v12)
  {
    CFRelease(v12);
  }
}

unsigned char *FigNetworkInterfaceReporterGetInterfaceType(unsigned char *result)
{
  if (result)
  {
    if (result[4]) {
      return 0;
    }
    else {
      return (unsigned char *)*(unsigned int *)result;
    }
  }
  return result;
}

uint64_t FigNetworkInterfaceResetStatistics(uint64_t result)
{
  if (result)
  {
    *(unsigned char *)(result + 4) = 0;
    *(_DWORD *)uint64_t result = 0;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(void *)(result + 152) = 0;
    uint64_t v1 = *(void *)(result + 328);
    if (v1)
    {
      *(_DWORD *)(v1 + 32) = 0;
      *(_OWORD *)uint64_t v1 = 0uLL;
      *(_OWORD *)(v1 + 16) = 0uLL;
    }
  }
  return result;
}

void FigNetworkInterfaceReporterDestroy(void *a1)
{
  if (a1)
  {
    if (a1[40])
    {
      if (sFigNetworkinterfaceWifiMonitor) {
        dispatch_sync((dispatch_queue_t)sFigNetworkInterfaceMonitorDispatchQueue, &__block_literal_global_123);
      }
      a1[40] = 0;
    }
    uint64_t v2 = (void *)a1[41];
    if (v2)
    {
      free(v2);
      a1[41] = 0;
    }
    if (sFigPeriodicBandwidthMonitor && sFigPeriodicBandwidthMonitorQueue) {
      dispatch_sync_f((dispatch_queue_t)sFigPeriodicBandwidthMonitorQueue, 0, (dispatch_function_t)fni_releasePeriodicBandwidthMonitor);
    }
    free(a1);
  }
}

void *FigNetworkInterfaceReporterCreate()
{
  xpc_object_t v0 = malloc_type_calloc(1uLL, 0x150uLL, 0x102004042D7ED1DuLL);
  if (v0)
  {
    if (sFigNetworkInterfaceMonitorOnce != -1) {
      dispatch_once_f(&sFigNetworkInterfaceMonitorOnce, 0, (dispatch_function_t)figNetworkinterfaceMonitorInitOnce);
    }
    if (sFigNetworkInterfaceMonitorDispatchQueue
      && sFigNetworkInterfaceMonitorWifiManagerMessagingQueue
      && (uint64_t v1 = malloc_type_calloc(1uLL, 0x28uLL, 0x10000407A37F5ACuLL), (v0[41] = v1) != 0))
    {
      v0[40] = figNetworkInterfaceRetainGlobalWifiMonitor();
      if (sFigPeriodicBandwidthMonitorOnce != -1) {
        dispatch_once_f(&sFigPeriodicBandwidthMonitorOnce, 0, (dispatch_function_t)figPeriodicBandwidthMonitorInitOnce);
      }
      if (sFigPeriodicBandwidthMonitor && sFigPeriodicBandwidthMonitorQueue) {
        dispatch_sync_f((dispatch_queue_t)sFigPeriodicBandwidthMonitorQueue, 0, (dispatch_function_t)fni_retainPeriodicBandwidthMonitor);
      }
    }
    else
    {
      FigNetworkInterfaceReporterDestroy(v0);
      return 0;
    }
  }
  return v0;
}

uint64_t figNetworkinterfaceMonitorInitOnce()
{
  sFigNetworkInterfaceMonitorDispatchQueue = (uint64_t)dispatch_queue_create("com.apple.coremedia.FigNetworkInterfaceMonitor", 0);
  sFigNetworkInterfaceMonitorWifiManagerMessagingQueue = (uint64_t)dispatch_queue_create("com.apple.coremedia.FigNetworkInterfaceMonitor.setup", 0);
  sFigNetworkInterfaceNameToTypeMap = (uint64_t)CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t result = FigSimpleMutexCreate();
  sFigNetworkInterfaceNameToTypeMutex = result;
  return result;
}

Class initWRM_iRATInterface()
{
  if (WirelessCoexLibrary_sOnce != -1) {
    dispatch_once(&WirelessCoexLibrary_sOnce, &__block_literal_global_127);
  }
  Class result = objc_getClass("WRM_iRATInterface");
  classWRM_iRATInterface = (uint64_t)result;
  getWRM_iRATInterfaceClass[0] = WRM_iRATInterfaceFunction;
  return result;
}

uint64_t WRM_iRATInterfaceFunction()
{
  return classWRM_iRATInterface;
}

void *__WirelessCoexLibrary_block_invoke()
{
  Class result = dlopen("/System/Library/PrivateFrameworks/WirelessCoex.framework/WirelessCoex", 2);
  WirelessCoexLibrary_sLib = (uint64_t)result;
  return result;
}

void *figNetworkInterfaceTCPInfoGetByteCountsForEachInterface(const void *a1, CFDataRef theData, uint64_t a3)
{
  Class result = CFDataGetBytePtr(theData);
  if (result)
  {
    xpc_object_t v6 = result;
    Class result = CFDictionaryGetValue(*(CFDictionaryRef *)a3, a1);
    if (result && (Class result = CFDataGetBytePtr((CFDataRef)result)) != 0)
    {
      uint64_t v7 = result[27];
      uint64_t v8 = result[23];
      uint64_t v9 = result[19];
    }
    else
    {
      uint64_t v7 = 0;
      uint64_t v8 = 0;
      uint64_t v9 = 0;
    }
    uint64_t v10 = *(void *)(a3 + 16);
    uint64_t v11 = v6[23];
    *(void *)(a3 + 8) += v6[27] - v7;
    *(void *)(a3 + 16) = v11 - v8 + v10;
    *(void *)(a3 + 24) += v6[19] - v9;
  }
  return result;
}

uint64_t figNetworkInterfaceAddToCountValue(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (result && a2 && a3)
  {
    if (a6)
    {
      FigCFDictionaryGetInt64IfPresent();
      return FigCFDictionaryGetInt64IfPresent();
    }
  }
  return result;
}

void figNetworkinterfaceMonitorInitWifiOnce()
{
  if (sFigNetworkInterfaceMonitorOnce != -1) {
    dispatch_once_f(&sFigNetworkInterfaceMonitorOnce, 0, (dispatch_function_t)figNetworkinterfaceMonitorInitOnce);
  }
  if (sFigNetworkInterfaceMonitorDispatchQueue) {
    BOOL v0 = sFigNetworkInterfaceMonitorWifiManagerMessagingQueue == 0;
  }
  else {
    BOOL v0 = 1;
  }
  if (!v0)
  {
    dispatch_async((dispatch_queue_t)sFigNetworkInterfaceMonitorWifiManagerMessagingQueue, &__block_literal_global_80_1);
    figNetworkMonitorInterfaceIRATEnsureService();
  }
}

void __figNetworkInterfaceRetainGlobalWifiMonitor_block_invoke(uint64_t a1)
{
  if (sFigNetworkinterfaceWifiMonitor) {
    BOOL v1 = sFigNetworkInterfaceMonitorWifiManagerClient == 0;
  }
  else {
    BOOL v1 = 1;
  }
  if (!v1)
  {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = sFigNetworkinterfaceWifiMonitor;
    uint64_t v3 = *(void *)(a1 + 32);
    xpc_object_t v4 = *(int **)(*(void *)(v3 + 8) + 24);
    int v5 = *v4;
    if (!*v4)
    {
      xpc_object_t v6 = *((void *)v4 + 1);
      if (v6)
      {
        dispatch_source_cancel(v6);
        dispatch_release(*(dispatch_object_t *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 8));
        *(void *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 8) = 0;
        uint64_t v3 = *(void *)(a1 + 32);
      }
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = __figNetworkInterfaceRetainGlobalWifiMonitor_block_invoke_2;
      block[3] = &unk_1E57982D0;
      block[4] = v3;
      dispatch_async((dispatch_queue_t)sFigNetworkInterfaceMonitorWifiManagerMessagingQueue, block);
      xpc_object_t v4 = *(int **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
      int v5 = *v4;
    }
    *xpc_object_t v4 = v5 + 1;
  }
}

uint64_t __figNetworkInterfaceRetainGlobalWifiMonitor_block_invoke_2(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(result + 32) + 8) + 24);
  if (v1)
  {
    uint64_t v2 = result;
    Class result = *(void *)(v1 + 24);
    if (result)
    {
      sMobileWiFiWiFiDeviceClientRegisterLQMCallback(result, figNetworkInterfaceMonitorWiFiLQMCallback, v1);
      uint64_t v3 = (uint64_t (*)(uint64_t, void (*)(int, CFTypeRef, uint64_t)))sMobileWiFiWiFiDeviceClientRegisterBssidChangeCallback;
      uint64_t v4 = *(void *)(*(void *)(*(void *)(*(void *)(v2 + 32) + 8) + 24) + 24);
      return v3(v4, figNetworkInterfaceMonitorBssidChangedCallback);
    }
  }
  return result;
}

void figNetworkInterfaceMonitorWiFiLQMCallback(int a1, CFTypeRef cf, uint64_t a3)
{
  if (cf)
  {
    CFRetain(cf);
    v5[0] = MEMORY[0x1E4F143A8];
    v5[1] = 3221225472;
    v5[2] = __figNetworkInterfaceMonitorWiFiLQMCallback_block_invoke;
    v5[3] = &__block_descriptor_48_e5_v8__0l;
    v5[4] = a3;
    v5[5] = cf;
    dispatch_async((dispatch_queue_t)sFigNetworkInterfaceMonitorDispatchQueue, v5);
  }
}

void figNetworkInterfaceMonitorBssidChangedCallback(int a1, CFTypeRef cf, uint64_t a3)
{
  if (cf)
  {
    CFRetain(cf);
    v5[0] = MEMORY[0x1E4F143A8];
    v5[1] = 3221225472;
    v5[2] = __figNetworkInterfaceMonitorBssidChangedCallback_block_invoke;
    v5[3] = &__block_descriptor_48_e5_v8__0l;
    v5[4] = a3;
    v5[5] = cf;
    dispatch_async((dispatch_queue_t)sFigNetworkInterfaceMonitorDispatchQueue, v5);
  }
}

void __figNetworkMonitorInterfaceMobileWifiInit_block_invoke()
{
  BOOL v0 = dlopen("/System/Library/PrivateFrameworks/MobileWiFi.framework/MobileWiFi", 1);
  if (v0)
  {
    uint64_t v1 = v0;
    sMobileWiFiWiFiManagerClientCopyDevices = (uint64_t (*)(void))dlsym(v0, "WiFiManagerClientCopyDevices");
    if (sMobileWiFiWiFiManagerClientCopyDevices)
    {
      sMobileWiFiWiFiManagerClientGetDevice = (uint64_t)dlsym(v1, "WiFiManagerClientGetDevice");
      if (sMobileWiFiWiFiManagerClientGetDevice)
      {
        sMobileWiFiWiFiManagerClientCreate = (uint64_t (*)(void, void))dlsym(v1, "WiFiManagerClientCreate");
        if (sMobileWiFiWiFiManagerClientCreate)
        {
          sMobileWiFiDeviceClientGetuint64_t InterfaceName = (uint64_t (*)(void))dlsym(v1, "WiFiDeviceClientGetInterfaceName");
          if (sMobileWiFiDeviceClientGetInterfaceName)
          {
            sMobileWiFiWiFiDeviceClientCopyCurrentNetworuint64_t k = (uint64_t (*)(void))dlsym(v1, "WiFiDeviceClientCopyCurrentNetwork");
            if (sMobileWiFiWiFiDeviceClientCopyCurrentNetwork)
            {
              sMobileWiFiWiFiNetworkGetChannel = (uint64_t (*)(void))dlsym(v1, "WiFiNetworkGetChannel");
              if (sMobileWiFiWiFiNetworkGetChannel)
              {
                sMobileWiFiWiFiNetworkGetChannelFreqBand = (uint64_t (*)(void))dlsym(v1, "WiFiNetworkGetChannelFreqBand");
                if (sMobileWiFiWiFiNetworkGetChannelFreqBand)
                {
                  sMobileWiFiWiFiDeviceClientRegisterBssidChangeCallbacuint64_t k = dlsym(v1, "WiFiDeviceClientRegisterBssidChangeCallback");
                  if (sMobileWiFiWiFiDeviceClientRegisterBssidChangeCallback)
                  {
                    sMobileWiFiWiFiDeviceClientRegisterLQMCallbacuint64_t k = (uint64_t (*)(void, void, void))dlsym(v1, "WiFiDeviceClientRegisterLQMCallback");
                    if (sMobileWiFiWiFiDeviceClientRegisterLQMCallback)
                    {
                      sMobileWiFiWiFiManagerClientScheduleWithRunLoop = dlsym(v1, "WiFiManagerClientScheduleWithRunLoop");
                      if (sMobileWiFiWiFiManagerClientScheduleWithRunLoop)
                      {
                        sFigNetworkInterfaceMonitorWifiManagerClient = sMobileWiFiWiFiManagerClientCreate(*MEMORY[0x1E4F1CF80], 0);
                        if (sFigNetworkInterfaceMonitorWifiManagerClient)
                        {
                          CFArrayRef v2 = (const __CFArray *)sMobileWiFiWiFiManagerClientCopyDevices();
                          if (v2)
                          {
                            CFArrayRef v3 = v2;
                            if (CFArrayGetCount(v2) >= 1)
                            {
                              CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v3, 0);
                              if (ValueAtIndex)
                              {
                                int v5 = ValueAtIndex;
                                uint64_t InterfaceName = sMobileWiFiDeviceClientGetInterfaceName();
                                if (InterfaceName)
                                {
                                  uint64_t v7 = (const void *)InterfaceName;
                                  uint64_t v8 = malloc_type_calloc(1uLL, 0x58uLL, 0x10E0040EF2F2C8EuLL);
                                  if (v8)
                                  {
                                    uint64_t v9 = v8;
                                    v8[3] = CFRetain(v5);
                                    v9[2] = CFRetain(v7);
                                    *(_DWORD *)uint64_t v9 = 0;
                                    *((_DWORD *)v9 + 10) = -1082130432;
                                    CFNumberRef v10 = (const __CFNumber *)sMobileWiFiWiFiDeviceClientCopyCurrentNetwork(v9[3]);
                                    if (v10)
                                    {
                                      CFNumberRef v11 = v10;
                                      figNetworkInterfaceMonitorCopyWifiFrequency(v10, (const __CFNumber **)v9 + 4);
                                      CFRelease(v11);
                                    }
                                    block[0] = MEMORY[0x1E4F143A8];
                                    block[1] = 3221225472;
                                    block[2] = __figNetworkMonitorInterfaceMobileWifiInit_block_invoke_2;
                                    block[3] = &__block_descriptor_40_e5_v8__0l;
                                    block[4] = v9;
                                    dispatch_sync((dispatch_queue_t)sFigNetworkInterfaceMonitorDispatchQueue, block);
                                    uint64_t v12 = (void (*)(uint64_t, uint64_t, void))sMobileWiFiWiFiManagerClientScheduleWithRunLoop;
                                    uint64_t v13 = sFigNetworkInterfaceMonitorWifiManagerClient;
                                    uint64_t GlobalNetworkBufferingRunloop = FigThreadGetGlobalNetworkBufferingRunloop();
                                    v12(v13, GlobalNetworkBufferingRunloop, *MEMORY[0x1E4F1D418]);
                                  }
                                }
                              }
                            }
                            CFRelease(v3);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

CFNumberRef figNetworkInterfaceMonitorCopyWifiFrequency(const __CFNumber *result, const __CFNumber **a2)
{
  if (result)
  {
    Class result = (const __CFNumber *)sMobileWiFiWiFiNetworkGetChannel();
    if (result)
    {
      uint64_t v4 = 0;
      CFNumberGetValue(result, kCFNumberCFIndexType, &v4);
      Class result = (const __CFNumber *)sMobileWiFiWiFiNetworkGetChannelFreqBand(v4);
      if (result == 1)
      {
        int v3 = 2;
      }
      else
      {
        if (result != 2) {
          return result;
        }
        int v3 = 5;
      }
      int valuePtr = v3;
      Class result = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
      *a2 = result;
    }
  }
  return result;
}

uint64_t __figNetworkMonitorInterfaceMobileWifiInit_block_invoke_2(uint64_t result)
{
  sFigNetworkinterfaceWifiMonitor = *(void *)(result + 32);
  return result;
}

void __figNetworkInterfaceMonitorWiFiLQMCallback_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), @"SCALED_RSSI");
  CFNumberRef v4 = (const __CFNumber *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), @"SCALED_LQM");
  CFNumberRef v5 = (const __CFNumber *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), @"CCA");
  CFNumberRef v6 = (const __CFNumber *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), @"NOISE");
  CFNumberRef v7 = (const __CFNumber *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), @"SNR");
  if (Value)
  {
    double valuePtr = 0.0;
    CFNumberGetValue(Value, kCFNumberDoubleType, &valuePtr);
    float v8 = valuePtr;
    *(float *)(v2 + 40) = v8;
  }
  if (v4)
  {
    double valuePtr = 0.0;
    CFNumberGetValue(v4, kCFNumberDoubleType, &valuePtr);
    float v9 = valuePtr;
    *(float *)(v2 + 52) = v9;
  }
  if (v5)
  {
    double valuePtr = 0.0;
    CFNumberGetValue(v5, kCFNumberDoubleType, &valuePtr);
    float v10 = valuePtr;
    *(float *)(v2 + 44) = v10;
  }
  if (v6)
  {
    double valuePtr = 0.0;
    CFNumberGetValue(v6, kCFNumberDoubleType, &valuePtr);
    float v11 = valuePtr;
    *(float *)(v2 + 48) = v11;
  }
  if (v7)
  {
    LODWORD(valuePtr) = 0;
    CFNumberGetValue(v7, kCFNumberIntType, &valuePtr);
    *(_DWORD *)(v2 + 56) = LODWORD(valuePtr);
  }
  CFRelease(*(CFTypeRef *)(a1 + 40));
}

void __figNetworkInterfaceMonitorBssidChangedCallback_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  CFNumberRef v5 = *(const void **)(v2 + 32);
  CFNumberRef v4 = (const __CFNumber **)(v2 + 32);
  int v3 = v5;
  if (v5)
  {
    CFRelease(v3);
    *CFNumberRef v4 = 0;
  }
  figNetworkInterfaceMonitorCopyWifiFrequency(*(const __CFNumber **)(a1 + 40), v4);
  CFNumberRef v6 = *(const void **)(a1 + 40);

  CFRelease(v6);
}

void __figNetworkMonitorInterfaceIRATEnsureService_block_invoke()
{
  if ((sFigIRATPermanentlyDisabled & 1) == 0) {
    figNetworkMonitorInterfaceIRATInit();
  }
}

void figNetworkMonitorInterfaceIRATInit()
{
  if (sFigIRATPermanentlyDisabled) {
    return;
  }
  if (sFigIRATXPCConnection) {
    return;
  }
  mach_service = xpc_connection_create_mach_service("com.apple.WirelessCoexManager", (dispatch_queue_t)sFigNetworkInterfaceMonitorDispatchQueue, 0);
  sFigIRATXPCConnection = (uint64_t)mach_service;
  if (!mach_service) {
    return;
  }
  xpc_connection_set_event_handler(mach_service, &__block_literal_global_113_0);
  xpc_connection_set_target_queue((xpc_connection_t)sFigIRATXPCConnection, (dispatch_queue_t)sFigNetworkInterfaceMonitorDispatchQueue);
  xpc_connection_resume((xpc_connection_t)sFigIRATXPCConnection);
  xpc_object_t v1 = xpc_dictionary_create(0, 0, 0);
  if (!v1) {
    return;
  }
  uint64_t v2 = v1;
  xpc_dictionary_set_uint64(v1, "kWCMRegisterProcess_ProcessId", 0xDuLL);
  xpc_object_t v3 = xpc_dictionary_create(0, 0, 0);
  if (v3)
  {
    CFNumberRef v4 = v3;
    xpc_dictionary_set_uint64(v3, "kMessageId", 1uLL);
    xpc_dictionary_set_value(v4, "kMessageArgs", v2);
    xpc_release(v2);
    xpc_connection_send_message((xpc_connection_t)sFigIRATXPCConnection, v4);
    xpc_release(v4);
    xpc_object_t v5 = xpc_dictionary_create(0, 0, 0);
    if (!v5) {
      return;
    }
    CFNumberRef v6 = v5;
    xpc_dictionary_set_uint64(v5, "kWRMApplicationType", 0xC8uLL);
    xpc_object_t v7 = xpc_array_create(0, 0);
    if (v7)
    {
      float v8 = v7;
      xpc_array_append_value(v7, v6);
      xpc_object_t v9 = xpc_dictionary_create(0, 0, 0);
      float v10 = v9;
      if (v9)
      {
        xpc_dictionary_set_value(v9, "kWRMApplicationTypeList", v8);
        xpc_object_t v11 = xpc_dictionary_create(0, 0, 0);
        uint64_t v2 = v11;
        if (v11)
        {
          xpc_dictionary_set_uint64(v11, "kMessageId", 0x194uLL);
          xpc_dictionary_set_value(v2, "kMessageArgs", v10);
        }
      }
      else
      {
        uint64_t v2 = 0;
      }
      xpc_release(v6);
      xpc_release(v8);
      if (!v10) {
        goto LABEL_13;
      }
    }
    else
    {
      uint64_t v2 = 0;
      float v10 = v6;
    }
    xpc_release(v10);
LABEL_13:
    if (!v2) {
      return;
    }
    xpc_connection_send_message((xpc_connection_t)sFigIRATXPCConnection, v2);
  }

  xpc_release(v2);
}

void __figNetworkMonitorInterfaceIRATInit_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3 = MEMORY[0x199712630](a2);
  if (v3 == MEMORY[0x1E4F145A8])
  {
    uint64_t v16 = (const char *)*MEMORY[0x1E4F14530];
    if (a2 == (void *)MEMORY[0x1E4F14528])
    {
      xpc_dictionary_get_string(MEMORY[0x1E4F14528], v16);
      sFigIRATPermanentlyDisabled = 1;
      uint64_t v18 = (void *)sFigIRATXPCConnection;
      if (sFigIRATXPCConnection)
      {
        sFigIRATXPCConnection = 0;
        xpc_release(v18);
      }
    }
    else
    {
      xpc_dictionary_get_string(a2, v16);
      uint64_t v17 = (void *)sFigIRATXPCConnection;
      if (sFigIRATXPCConnection)
      {
        sFigIRATXPCConnection = 0;
        xpc_release(v17);
      }
      figNetworkMonitorInterfaceIRATInit();
    }
  }
  else
  {
    uint64_t v4 = v3;
    xpc_object_t v5 = (void *)MEMORY[0x199712470](a2);
    if (v5) {
      free(v5);
    }
    uint64_t v6 = MEMORY[0x1E4F14590];
    if (v4 == MEMORY[0x1E4F14590] && xpc_dictionary_get_uint64(a2, "kMessageId") == 1302)
    {
      xpc_object_t value = xpc_dictionary_get_value(a2, "kMessageArgs");
      if (value)
      {
        float v8 = value;
        if (MEMORY[0x199712630]() == v6)
        {
          xpc_object_t v9 = xpc_dictionary_get_value(v8, "kWRMApplicationTypeList");
          if (v9)
          {
            float v10 = v9;
            if (MEMORY[0x199712630]() == MEMORY[0x1E4F14568])
            {
              size_t count = xpc_array_get_count(v10);
              if (count)
              {
                size_t v12 = count;
                size_t v13 = 0;
                while (1)
                {
                  xpc_object_t v14 = xpc_array_get_value(v10, v13);
                  if (v14)
                  {
                    unint64_t v15 = v14;
                    if (MEMORY[0x199712630]() == v6 && xpc_dictionary_get_uint64(v15, "kWRMApplicationType") == 200) {
                      break;
                    }
                  }
                  if (v12 == ++v13) {
                    return;
                  }
                }
                if (xpc_dictionary_get_uint64(v15, "kWRMLinkType") == 1)
                {
                  uint64_t v19 = sFigNetworkinterfaceWifiMonitor;
                  if (sFigNetworkinterfaceWifiMonitor)
                  {
                    uint64_t uint64 = xpc_dictionary_get_uint64(v15, "kWRMCurrentLinkBandwidthEstimateMin");
                    uint64_t v21 = xpc_dictionary_get_uint64(v15, "kWRMCurrentLinkBandwidthEstimateMax");
                    *(void *)(v19 + 64) = uint64;
                    *(void *)(v19 + 72) = v21;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

void __figNetworkInterfaceReleaseGlobalWifiMonitor_block_invoke()
{
  uint64_t v0 = sFigNetworkinterfaceWifiMonitor;
  if ((*(_DWORD *)sFigNetworkinterfaceWifiMonitor)-- == 1)
  {
    uint64_t v2 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, (dispatch_queue_t)sFigNetworkInterfaceMonitorDispatchQueue);
    *(void *)(v0 + 8) = v2;
    dispatch_time_t v3 = dispatch_time(0, 5000000000);
    dispatch_source_set_timer(v2, v3, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
    uint64_t v4 = *(NSObject **)(v0 + 8);
    handler[0] = MEMORY[0x1E4F143A8];
    handler[1] = 3221225472;
    handler[2] = __figNetworkInterfaceReleaseGlobalWifiMonitor_block_invoke_2;
    handler[3] = &__block_descriptor_40_e5_v8__0l;
    handler[4] = v0;
    dispatch_source_set_event_handler(v4, handler);
    dispatch_resume(*(dispatch_object_t *)(v0 + 8));
  }
}

void __figNetworkInterfaceReleaseGlobalWifiMonitor_block_invoke_2(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(int *)v1 <= 0)
  {
    if (*(void *)(v1 + 24))
    {
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = __figNetworkInterfaceReleaseGlobalWifiMonitor_block_invoke_3;
      block[3] = &__block_descriptor_40_e5_v8__0l;
      block[4] = v1;
      dispatch_async((dispatch_queue_t)sFigNetworkInterfaceMonitorWifiManagerMessagingQueue, block);
      uint64_t v1 = *(void *)(a1 + 32);
    }
    dispatch_time_t v3 = *(NSObject **)(v1 + 8);
    if (v3)
    {
      dispatch_release(v3);
      *(void *)(*(void *)(a1 + 32) + 8) = 0;
    }
  }
}

uint64_t __figNetworkInterfaceReleaseGlobalWifiMonitor_block_invoke_3(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (v1)
  {
    uint64_t v2 = result;
    Class result = *(void *)(v1 + 24);
    if (result)
    {
      sMobileWiFiWiFiDeviceClientRegisterLQMCallback(result, 0, 0);
      dispatch_time_t v3 = sMobileWiFiWiFiDeviceClientRegisterBssidChangeCallback;
      uint64_t v4 = *(void *)(*(void *)(v2 + 32) + 24);
      return ((uint64_t (*)(uint64_t, void, void))v3)(v4, 0, 0);
    }
  }
  return result;
}

void fni_releasePeriodicBandwidthMonitor()
{
  uint64_t v0 = (dispatch_object_t *)sFigPeriodicBandwidthMonitor;
  if ((*(_DWORD *)sFigPeriodicBandwidthMonitor)-- == 1)
  {
    uint64_t v2 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, (dispatch_queue_t)sFigPeriodicBandwidthMonitorQueue);
    v0[1] = v2;
    dispatch_time_t v3 = dispatch_time(0, 15000000000);
    dispatch_source_set_timer(v2, v3, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
    dispatch_set_context(v0[1], v0);
    dispatch_source_set_event_handler_f(v0[1], (dispatch_function_t)periodicBandwidthMonitorTimer);
    uint64_t v4 = v0[1];
    dispatch_resume(v4);
  }
}

void periodicBandwidthMonitorTimer(uint64_t a1)
{
  if (*(int *)a1 <= 0)
  {
    uint64_t v2 = *(NSObject **)(a1 + 16);
    if (v2) {
      dispatch_suspend(v2);
    }
    dispatch_time_t v3 = *(NSObject **)(a1 + 8);
    if (v3)
    {
      dispatch_release(v3);
      *(void *)(a1 + 8) = 0;
    }
  }
}

void figPeriodicBandwidthMonitorInitOnce()
{
  figNetworkMonitorInterfaceIRATEnsureService();
  sFigPeriodicBandwidthMonitorQueue = (uint64_t)dispatch_queue_create("com.apple.coremedia.FigPeriodicBandwidthMonitor", 0);
  uint64_t v0 = malloc_type_calloc(1uLL, 0x20uLL, 0x10A00402946438FuLL);
  if (v0)
  {
    uint64_t v1 = v0;
    FigNetworkHistoryGetGlobal();
    if (!FigNetworkHistoryCopySharedPredictor())
    {
      dispatch_source_t v2 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, (dispatch_queue_t)sFigPeriodicBandwidthMonitorQueue);
      if (v2)
      {
        dispatch_time_t v3 = v2;
        dispatch_time_t v4 = dispatch_time(0, 5000000000);
        dispatch_source_set_timer(v3, v4, 0x12A05F200uLL, 0);
        dispatch_set_context(v3, 0);
        dispatch_source_set_event_handler_f(v3, (dispatch_function_t)figPeriodicBandwidthMonitorTimerCallback);
        v1[2] = v3;
LABEL_5:
        *(_DWORD *)uint64_t v1 = 0;
        sFigPeriodicBandwidthMonitor = (uint64_t)v1;
        return;
      }
      if (!FigSignalErrorAt()) {
        goto LABEL_5;
      }
    }
    free(v1);
  }
}

void fni_retainPeriodicBandwidthMonitor()
{
  uint64_t v0 = sFigPeriodicBandwidthMonitor;
  if (sFigPeriodicBandwidthMonitor)
  {
    if (!*(_DWORD *)sFigPeriodicBandwidthMonitor)
    {
      uint64_t v1 = *(NSObject **)(sFigPeriodicBandwidthMonitor + 8);
      if (v1)
      {
        dispatch_source_cancel(v1);
        dispatch_release(*(dispatch_object_t *)(v0 + 8));
        *(void *)(v0 + 8) = 0;
      }
      else
      {
        dispatch_resume(*(dispatch_object_t *)(sFigPeriodicBandwidthMonitor + 16));
      }
    }
    ++*(_DWORD *)v0;
  }
}

void figPeriodicBandwidthMonitorTimerCallback()
{
  uint64_t v14 = 0;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v11 = 0u;
  memset(v10, 0, sizeof(v10));
  uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  uint64_t v1 = *(void *)(sFigPeriodicBandwidthMonitor + 24);
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  dispatch_time_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t *, _OWORD *))(v3 + 8);
  if (v4)
  {
    blocuint64_t k = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 5000000000;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    uint64_t v27 = 9;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    int v5 = v4(v1, UpTimeNanoseconds, &block, v10);
    if (((v5 + 17738) < 2 || !v5) && (sFigIRATPermanentlyDisabled & 1) == 0)
    {
      if (sFigNetworkInterfaceMonitorDispatchQueue && sFigNetworkinterfaceWifiMonitor)
      {
        uint64_t v6 = *(void *)&v10[0] / 1000;
        unint64_t v7 = (unint64_t)v11 / 0xF4240;
        unint64_t v8 = (unint64_t)v12 / 0xF4240;
        unint64_t v9 = (unint64_t)v12 / 0xF4240 * (*(void *)&v10[0] / 8000);
        figNetworkMonitorInterfaceIRATEnsureService();
        blocuint64_t k = MEMORY[0x1E4F143A8];
        uint64_t v16 = 3221225472;
        uint64_t v17 = (uint64_t)__figNetworkInterfaceReporterReportPeriodicDownloadActivity_block_invoke;
        *(void *)&long long v18 = &__block_descriptor_64_e5_v8__0l;
        *((void *)&v18 + 1) = v6;
        *(void *)&long long v19 = v7;
        *((void *)&v19 + 1) = v9;
        *(void *)&long long v20 = v8;
        dispatch_async((dispatch_queue_t)sFigNetworkInterfaceMonitorDispatchQueue, &block);
      }
      else
      {
        FigSignalErrorAt();
      }
    }
  }
}

void __figNetworkInterfaceReporterReportPeriodicDownloadActivity_block_invoke(uint64_t *a1)
{
  if (sFigIRATXPCConnection)
  {
    xpc_object_t IRATStatusUpdateMessageApplicationEntry = figNetworkMonitorInterfaceCreateIRATStatusUpdateMessageApplicationEntry();
    if (IRATStatusUpdateMessageApplicationEntry)
    {
      uint64_t v3 = IRATStatusUpdateMessageApplicationEntry;
      xpc_dictionary_set_uint64(IRATStatusUpdateMessageApplicationEntry, "kWRMCurrentLinkBandwidthAchieved", a1[4]);
      xpc_dictionary_set_uint64(v3, "kSesLatency", a1[5]);
      xpc_dictionary_set_uint64(v3, "kWRMStreamingDataSentCount", a1[6] >> 10);
      xpc_dictionary_set_uint64(v3, "kWRMStreamingDataSentDuration", a1[7]);
      IRATStatusUpdateMessage = figNetworkMonitorInterfaceCreateIRATStatusUpdateMessage(v3);
      if (IRATStatusUpdateMessage)
      {
        int v5 = IRATStatusUpdateMessage;
        xpc_connection_send_message((xpc_connection_t)sFigIRATXPCConnection, IRATStatusUpdateMessage);
        xpc_release(v5);
      }
      xpc_release(v3);
    }
  }
}

uint64_t FigSessionDataParserStartServer()
{
  uint64_t v3 = 0;
  dispatch_time_t v4 = &v3;
  uint64_t v5 = 0x2000000000;
  int v6 = 0;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __FigSessionDataParserStartServer_block_invoke;
  block[3] = &unk_1E57A98C0;
  block[4] = &v3;
  if (FigSessionDataParserStartServer_sFigSessionDataParserServerSetupOnce != -1) {
    dispatch_once(&FigSessionDataParserStartServer_sFigSessionDataParserServerSetupOnce, block);
  }
  uint64_t v0 = *((unsigned int *)v4 + 6);
  _Block_object_dispose(&v3, 8);
  return v0;
}

uint64_t __FigSessionDataParserStartServer_block_invoke(uint64_t a1)
{
  uint64_t result = FigXPCServerStart();
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t fsd_replyingMessageHandler()
{
  uint64_t OpCode = FigXPCMessageGetOpCode();
  if (OpCode) {
    return OpCode;
  }
  else {
    return 4294951138;
  }
}

__CFString *FigMediaCharacteristicsGetMajorIntrinsicCharacteristicForMediaType(int a1)
{
  uint64_t result = 0;
  if (a1 > 1936684397)
  {
    if (a1 == 1936684398)
    {
      uint64_t v3 = kFigStdAssetMediaCharacteristic_Audible;
      return *v3;
    }
    if (a1 != 1952807028)
    {
      if (a1 != 1986618469) {
        return result;
      }
      uint64_t v3 = kFigStdAssetMediaCharacteristic_Visual;
      return *v3;
    }
LABEL_8:
    uint64_t v3 = kFigStdAssetMediaCharacteristic_Legible;
    return *v3;
  }
  if (a1 == 1668047728 || a1 == 1935832172) {
    goto LABEL_8;
  }
  return result;
}

uint64_t FigMediaCharacteristicsCopyMediaCharacteristicsForMediaType(const __CFAllocator *a1, int a2, __CFArray **a3)
{
  if (!a3) {
    return 0;
  }
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E4F1D510]);
  if (Mutable)
  {
    int v6 = Mutable;
    if (a2 <= 1936684397)
    {
      if (a2 != 1668047728 && a2 != 1935832172) {
        goto LABEL_19;
      }
    }
    else
    {
      if (a2 == 1986618469)
      {
        unint64_t v7 = kFigStdAssetMediaCharacteristic_Visual;
        goto LABEL_12;
      }
      if (a2 != 1952807028)
      {
        if (a2 == 1936684398)
        {
          unint64_t v7 = kFigStdAssetMediaCharacteristic_Audible;
LABEL_12:
          if (*v7) {
            CFArrayAppendValue(Mutable, *v7);
          }
          if (a2 == 1668047728 || a2 == 1952807028 || a2 == 1935832172)
          {
            CFArrayAppendValue(v6, @"public.visual");
            if (a2 == 1668047728)
            {
              CFArrayAppendValue(v6, @"public.accessibility.transcribes-spoken-dialog");
              CFArrayAppendValue(v6, @"public.accessibility.describes-music-and-sound");
            }
          }
        }
LABEL_19:
        *a3 = v6;
        return 0;
      }
    }
    unint64_t v7 = kFigStdAssetMediaCharacteristic_Legible;
    goto LABEL_12;
  }

  return FigSignalErrorAt();
}

uint64_t FigMediaCharacteristicsCreateMediaCharacteristicsForMediaOption(const __CFAllocator *a1, const __CFArray *a2, const __CFDictionary *a3, __CFArray **a4)
{
  if (!a4) {
    return 0;
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E4F1D510]);
  if (Mutable)
  {
    unint64_t v8 = Mutable;
    if (a2)
    {
      v15.length = CFArrayGetCount(a2);
      v15.location = 0;
      CFArrayAppendArray(v8, a2, v15);
    }
    CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(a3, @"MediaSelectionOptionsTaggedMediaCharacteristics");
    if (Value)
    {
      CFArrayRef v10 = Value;
      v16.length = CFArrayGetCount(Value);
      v16.location = 0;
      CFArrayAppendArray(v8, v10, v16);
    }
    CFBooleanRef v11 = (const __CFBoolean *)CFDictionaryGetValue(a3, @"MediaSelectionOptionsIsAuxiliaryContent");
    if (v11 && CFBooleanGetValue(v11)) {
      long long v12 = kFigStdAssetMediaCharacteristic_TaggedIsAuxiliaryContent;
    }
    else {
      long long v12 = kFigStdAssetMediaCharacteristic_TaggedIsMainProgramContent;
    }
    CFArrayAppendValue(v8, *v12);
    CFDictionaryGetValue(a3, @"MediaSelectionOptionsMediaType");
    FigCFStringGetOSTypeValue();
    *a4 = v8;
    return 0;
  }

  return FigSignalErrorAt();
}

uint64_t FigMediaCharacteristicsCopyTaggedMediaCharacteristicsForTrackReader(uint64_t a1, uint64_t a2, void *a3)
{
  unint64_t v7 = 0;
  unint64_t v8 = 0;
  if (a3)
  {
    uint64_t v4 = _produceUserDataAssetTrackProperty(a2, &v8);
    uint64_t v5 = v8;
    if (v4 || !v8)
    {
      if (!v8)
      {
LABEL_7:
        *a3 = v7;
        return v4;
      }
    }
    else
    {
      uint64_t v4 = _createTaggedMediaCharacteristicsFromUserData(v8, &v7);
    }
    CFRelease(v5);
    goto LABEL_7;
  }

  return FigSignalErrorAt();
}

uint64_t _produceUserDataAssetTrackProperty(uint64_t a1, __CFArray **a2)
{
  CFTypeRef cf = 0;
  CFArrayRef theArray = 0;
  CFTypeRef v26 = 0;
  CFTypeRef v27 = 0;
  CFTypeRef v25 = 0;
  uint64_t FigBaseObject = FigTrackReaderGetFigBaseObject(a1);
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  unint64_t v7 = *(void (**)(uint64_t, __CFString *, void, CFArrayRef *))(v6 + 48);
  if (!v7
    || (CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80],
        v7(FigBaseObject, @"MetadataReaderTypes", *MEMORY[0x1E4F1CF80], &theArray),
        !theArray))
  {
    uint64_t v13 = 0;
    goto LABEL_31;
  }
  CFIndex Count = CFArrayGetCount(theArray);
  v30.location = 0;
  v30.length = Count;
  if (!CFArrayContainsValue(theArray, v30, @"QuickTimeUserDataReader")
    || ((v10 = FigTrackReaderGetFigBaseObject(a1), (uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8)) == 0)
      ? (uint64_t v12 = 0)
      : (uint64_t v12 = v11),
        (uint64_t v14 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v12 + 48)) == 0
     || (v14(v10, @"QuickTimeUserDataReader", v8, &cf), !cf)
     || (uint64_t v15 = _copyAllMetadataItems(v8, (uint64_t)cf, (__CFArray **)&v27), !v15)))
  {
    v31.location = 0;
    v31.length = Count;
    if (!CFArrayContainsValue(theArray, v31, @"ISOUserDataReader")
      || ((uint64_t v16 = FigTrackReaderGetFigBaseObject(a1), (v17 = *(void *)(CMBaseObjectGetVTable() + 8)) == 0)
        ? (uint64_t v18 = 0)
        : (uint64_t v18 = v17),
          (long long v19 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v18 + 48)) == 0
       || (v19(v16, @"ISOUserDataReader", v8, &v26), !v26)))
    {
      long long v21 = (__CFArray *)v27;
      if (!v27)
      {
        CFArrayRef v20 = 0;
        goto LABEL_28;
      }
LABEL_26:
      uint64_t v13 = 0;
      *a2 = v21;
      CFTypeRef v27 = 0;
      goto LABEL_29;
    }
    uint64_t v15 = _copyAllMetadataItems(v8, (uint64_t)v26, (__CFArray **)&v25);
    if (!v15)
    {
      CFArrayRef v20 = (const __CFArray *)v25;
      long long v21 = (__CFArray *)v27;
      if (v27 && v25)
      {
        MutableCFArrayRef Copy = FigCFArrayCreateMutableCopy();
        if (MutableCopy)
        {
          long long v23 = (__CFArray *)MutableCopy;
          v32.length = CFArrayGetCount(v20);
          v32.location = 0;
          CFArrayAppendArray(v23, v20, v32);
          uint64_t v13 = 0;
          *a2 = v23;
          goto LABEL_29;
        }
        uint64_t v15 = FigSignalErrorAt();
        goto LABEL_43;
      }
      if (!v27)
      {
LABEL_28:
        uint64_t v13 = 0;
        *a2 = v20;
        CFTypeRef v25 = 0;
        goto LABEL_29;
      }
      goto LABEL_26;
    }
  }
LABEL_43:
  uint64_t v13 = v15;
LABEL_29:
  if (theArray) {
    CFRelease(theArray);
  }
LABEL_31:
  if (cf) {
    CFRelease(cf);
  }
  if (v27) {
    CFRelease(v27);
  }
  if (v26) {
    CFRelease(v26);
  }
  if (v25) {
    CFRelease(v25);
  }
  return v13;
}

uint64_t _createTaggedMediaCharacteristicsFromUserData(const __CFArray *a1, __CFArray **a2)
{
  CFArrayRef theArray = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (theArray)
  {
    uint64_t v15 = a2;
    CFIndex Count = CFArrayGetCount(a1);
    if (Count >= 1)
    {
      CFIndex v5 = Count;
      for (CFIndex i = 0; v5 != i; ++i)
      {
        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, i);
        CFArrayRef Value = CFDictionaryGetValue(ValueAtIndex, @"keyspace");
        if (CFEqual(@"udta", Value) || CFEqual(@"uiso", Value))
        {
          unint64_t v9 = CFDictionaryGetValue(ValueAtIndex, @"key");
          if (v9)
          {
            uint64_t v10 = v9;
            CFTypeID v11 = CFGetTypeID(v9);
            if (v11 == CFStringGetTypeID())
            {
              if (CFEqual(v10, @"tagc")) {
                goto LABEL_14;
              }
            }
            else
            {
              CFTypeID v12 = CFGetTypeID(v10);
              if (v12 != CFNumberGetTypeID()
                || (unsigned int v18 = 0,
                    !FigMetadataStringKeyToOSTypeKeyWithKeySpace((uint64_t)Value, @"tagc", &v18))
                || (int valuePtr = 0, CFNumberGetValue((CFNumberRef)v10, kCFNumberSInt32Type, &valuePtr)) && v18 == valuePtr)
              {
LABEL_14:
                uint64_t v13 = CFDictionaryGetValue(ValueAtIndex, @"value");
                if (v13) {
                  CFArrayAppendValue(theArray, v13);
                }
              }
            }
          }
        }
      }
    }
    if (v15) {
      *uint64_t v15 = theArray;
    }
    else {
      CFRelease(theArray);
    }
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigMediaCharacteristicsCopyMediaCharacteristicsWithTrackCallbacks(uint64_t a1, uint64_t a2, uint64_t (**a3)(uint64_t, int *), __CFArray **a4)
{
  int v45 = 0;
  CFTypeRef cf = 0;
  CFArrayRef theArray = 0;
  CFArrayRef v41 = 0;
  CFArrayRef v42 = 0;
  char v40 = 0;
  if (!*a3 || (uint64_t v4 = a4, !a3[1]) && !a3[2] || !a3[4])
  {
    uint64_t v8 = FigSignalErrorAt();
    goto LABEL_86;
  }
  if (!a4)
  {
    CFMutableArrayRef Mutable = 0;
    goto LABEL_32;
  }
  uint64_t v8 = (*a3)(a2, &v45);
  if (v8)
  {
LABEL_86:
    uint64_t v14 = v8;
    goto LABEL_73;
  }
  CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (!Mutable)
  {
LABEL_32:
    uint64_t v14 = 0;
    goto LABEL_74;
  }
  uint64_t v11 = FigMediaCharacteristicsCopyMediaCharacteristicsForMediaType(v9, v45, &theArray);
  if (v11) {
    goto LABEL_87;
  }
  CFArrayRef v12 = theArray;
  if (theArray)
  {
    v47.length = CFArrayGetCount(theArray);
    v47.location = 0;
    CFArrayAppendArray(Mutable, v12, v47);
  }
  uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t, CFArrayRef *))a3[1];
  if (v13)
  {
    uint64_t v14 = v13(a2, a1, &v42);
LABEL_13:
    CFArrayRef v15 = v42;
    if (v42)
    {
      v48.length = CFArrayGetCount(v42);
      v48.location = 0;
      CFArrayAppendArray(Mutable, v15, v48);
    }
    uint64_t v16 = (uint64_t (*)(uint64_t, char *))a3[3];
    if (v16)
    {
      uint64_t v14 = v16(a2, &v40);
      if (v40) {
        CFArrayAppendValue(Mutable, @"public.auxiliary-content");
      }
      v46.length = CFArrayGetCount(Mutable);
      v46.location = 0;
      if (!CFArrayContainsValue(Mutable, v46, @"public.auxiliary-content")) {
        CFArrayAppendValue(Mutable, @"public.main-program-content");
      }
    }
    if (v45 != 1935832172)
    {
      if (v45 == 1986618469)
      {
        uint64_t v11 = ((uint64_t (*)(uint64_t, uint64_t, CFArrayRef *))a3[4])(a2, a1, &v41);
        if (!v11)
        {
          if (!v41) {
            goto LABEL_71;
          }
          CFIndex Count = CFArrayGetCount(v41);
          if (Count < 1) {
            goto LABEL_71;
          }
          CFIndex v24 = Count;
          uint64_t v35 = v4;
          uint64_t v36 = Mutable;
          CFIndex v25 = 0;
          int v26 = 0;
          int v38 = 0;
          int v27 = 0;
          int v28 = 0;
          int v29 = 0;
          int v30 = 0;
          CFStringRef v31 = (const __CFString *)*MEMORY[0x1E4F215E0];
          CFStringRef extensionKey = (const __CFString *)*MEMORY[0x1E4F21638];
          CFStringRef v32 = (const __CFString *)*MEMORY[0x1E4F1EDE8];
          do
          {
            CFDictionaryRef ValueAtIndex = (const opaqueCMFormatDescription *)CFArrayGetValueAtIndex(v41, v25);
            if (FigVideoFormatDescriptionContainsWideColor()) {
              int v30 = 1;
            }
            if (FigVideoFormatDescriptionContainsHDR()) {
              int v29 = 1;
            }
            if (FigVideoFormatDescriptionContainsAlphaChannel()) {
              int v28 = 1;
            }
            if (FigVideoFormatDescriptionContainsStereoMultiviewVideo()) {
              int v27 = 1;
            }
            if (CMFormatDescriptionGetExtension(ValueAtIndex, v31)
              || CMFormatDescriptionGetExtension(ValueAtIndex, extensionKey))
            {
              int v38 = 1;
            }
            if (CMFormatDescriptionGetExtension(ValueAtIndex, v32)) {
              int v26 = 1;
            }
            ++v25;
          }
          while (v24 != v25);
          CFMutableArrayRef Mutable = v36;
          if (v30) {
            CFArrayAppendValue(v36, @"public.uses-wide-gamut-color-space");
          }
          if (v29) {
            CFArrayAppendValue(v36, @"public.contains-hdr-video");
          }
          if (v28) {
            CFArrayAppendValue(v36, @"public.contains-alpha-channel");
          }
          if (v27) {
            CFArrayAppendValue(v36, @"public.contains-stereo-multiview-video");
          }
          if (v38) {
            CFArrayAppendValue(v36, @"com.apple.quicktime.video.stereo-metadata");
          }
          uint64_t v4 = v35;
          if (!v26) {
            goto LABEL_71;
          }
          CFArrayRef v20 = kFigStdAssetMediaCharacteristic_IndicatesHorizontalFieldOfView;
LABEL_70:
          CFArrayAppendValue(Mutable, *v20);
LABEL_71:
          uint64_t v14 = 0;
          goto LABEL_72;
        }
        goto LABEL_87;
      }
      if (v45 != 1952807028)
      {
LABEL_72:
        *uint64_t v4 = Mutable;
LABEL_73:
        CFMutableArrayRef Mutable = 0;
        goto LABEL_74;
      }
    }
    uint64_t v11 = ((uint64_t (*)(uint64_t, uint64_t, CFArrayRef *))a3[4])(a2, a1, &v41);
    if (!v11)
    {
      if (!v41) {
        goto LABEL_71;
      }
      CFIndex v17 = CFArrayGetCount(v41);
      if (v17 < 1) {
        goto LABEL_71;
      }
      CFIndex v18 = v17;
      CFIndex v19 = 0;
      CFArrayRef v20 = kFigStdAssetMediaCharacteristic_TaggedContainsOnlyForcedSubtitles;
      while (1)
      {
        long long v21 = (const opaqueCMFormatDescription *)CFArrayGetValueAtIndex(v41, v19);
        CMTextDisplayFlags displayFlagsOut = 0;
        if (CMTextFormatDescriptionGetDisplayFlags(v21, &displayFlagsOut) || (displayFlagsOut & 0x80000000) == 0) {
          break;
        }
        if (v18 == ++v19) {
          goto LABEL_70;
        }
      }
      if (v18 != v19) {
        goto LABEL_71;
      }
      CFArrayRef v20 = kFigStdAssetMediaCharacteristic_TaggedContainsOnlyForcedSubtitles;
      goto LABEL_70;
    }
LABEL_87:
    uint64_t v14 = v11;
    goto LABEL_74;
  }
  long long v22 = (uint64_t (*)(uint64_t, uint64_t, CFTypeRef *))a3[2];
  if (!v22)
  {
    uint64_t v14 = 0;
    goto LABEL_13;
  }
  uint64_t v14 = v22(a2, a1, &cf);
  if (!cf) {
    goto LABEL_13;
  }
  uint64_t v14 = _createTaggedMediaCharacteristicsFromUserData((const __CFArray *)cf, &v42);
  if (!v14) {
    goto LABEL_13;
  }
LABEL_74:
  if (theArray) {
    CFRelease(theArray);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v42) {
    CFRelease(v42);
  }
  if (v41) {
    CFRelease(v41);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v14;
}

uint64_t FigMediaCharacteristicsCopyMediaCharacteristicsForTrackReader(uint64_t a1, uint64_t a2, __CFArray **a3)
{
  return FigMediaCharacteristicsCopyMediaCharacteristicsWithTrackCallbacks(a1, a2, (uint64_t (**)(uint64_t, int *))&off_1EE51F998, a3);
}

uint64_t FigTrackReaderGetMediaType(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, void, uint64_t))(v5 + 8);
  if (!v6) {
    return 4294954514;
  }

  return v6(a1, 0, a2);
}

uint64_t FigTrackReaderCopyUserData(uint64_t a1, uint64_t a2, __CFArray **a3)
{
  return _produceUserDataAssetTrackProperty(a1, a3);
}

uint64_t FigTrackReaderGetIsExcludedFromAutoSelection(uint64_t a1, BOOL *a2)
{
  CFTypeRef cf = 0;
  uint64_t FigBaseObject = FigTrackReaderGetFigBaseObject(a1);
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(void (**)(uint64_t, __CFString *, void, CFTypeRef *))(v5 + 48);
  if (v6)
  {
    v6(FigBaseObject, @"TrackExcludeFromAutoSelection", *MEMORY[0x1E4F1CF80], &cf);
    CFTypeRef v7 = cf;
    *a2 = cf == (CFTypeRef)*MEMORY[0x1E4F1CFD0];
    if (v7) {
      CFRelease(v7);
    }
  }
  else
  {
    *a2 = *MEMORY[0x1E4F1CFD0] == 0;
  }
  return 0;
}

uint64_t FigTrackReaderCopyFormatDescriptions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t FigBaseObject = FigTrackReaderGetFigBaseObject(a1);
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, uint64_t))(v7 + 48);
  if (!v8) {
    return 4294954514;
  }

  return v8(FigBaseObject, @"TrackFormatDescriptionArray", a2, a3);
}

uint64_t FigMediaCharacteristicsCopyMediaCharacteristicsForTrackInformation(uint64_t a1, uint64_t a2, __CFArray **a3)
{
  return FigMediaCharacteristicsCopyMediaCharacteristicsWithTrackCallbacks(a1, a2, (uint64_t (**)(uint64_t, int *))&off_1EE51F9C0, a3);
}

uint64_t FigTrackInformationGetMediaType(uint64_t a1, _DWORD *a2)
{
  return MovieTrackGetBasicInfo(a1, a2, 0);
}

uint64_t FigTrackInformationCopyUserData(uint64_t a1, uint64_t a2, __CFArray **a3)
{
  CFDictionaryRef TrackMetadataItemArray = MovieTrackGetTrackMetadataItemArray(a1, @"com.apple.quicktime.udta");
  CFDictionaryRef v6 = MovieTrackGetTrackMetadataItemArray(a1, @"org.mp4ra");
  CFArrayRef v7 = v6;
  if (TrackMetadataItemArray) {
    BOOL v8 = v6 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
    if (TrackMetadataItemArray)
    {
      CFDictionaryRef v6 = TrackMetadataItemArray;
    }
    else if (!v6)
    {
      uint64_t v11 = 0;
      goto LABEL_12;
    }
    uint64_t v11 = (__CFArray *)CFRetain(v6);
LABEL_12:
    *a3 = v11;
    return 0;
  }
  MutableCFArrayRef Copy = FigCFArrayCreateMutableCopy();
  if (MutableCopy)
  {
    uint64_t v10 = (__CFArray *)MutableCopy;
    v14.length = CFArrayGetCount(v7);
    v14.location = 0;
    CFArrayAppendArray(v10, v7, v14);
    *a3 = v10;
    return 0;
  }

  return FigSignalErrorAt();
}

uint64_t FigTrackInformationGetIsExcludedFromAutoSelection(uint64_t a1, unsigned char *a2)
{
  *a2 = MovieTrackIsExcludedFromAutoSelection(a1);
  return 0;
}

uint64_t FigTrackInformationCopyFormatDescriptions(uint64_t a1, uint64_t a2, CFArrayRef *a3)
{
  *a3 = MovieTrackCopyFormatDescriptionArray(a1);
  return 0;
}

uint64_t FigMediaCharacteristicsCopyTaggedMediaCharacteristicsForAudioCompositionPresetDescription(uint64_t a1, uint64_t a2, __CFArray **a3)
{
  if (_getAPACAudioCharacteristicToTaggedMediaCharacteristicMapping_sOnceToken != -1) {
    dispatch_once_f(&_getAPACAudioCharacteristicToTaggedMediaCharacteristicMapping_sOnceToken, 0, (dispatch_function_t)_createAPACCharacteristicToTaggedMediaCharacteristicMappingOnce);
  }
  ArrayCFArrayRef Value = (const __CFArray *)FigCFDictionaryGetArrayValue();
  if (ArrayValue)
  {
    CFIndex Count = CFArrayGetCount(ArrayValue);
    if (Count >= 1)
    {
      CFIndex v6 = Count;
      uint64_t v7 = 0;
      CFMutableArrayRef Mutable = 0;
      CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      uint64_t v10 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
      while (1)
      {
        FigCFArrayGetValueAtIndex();
        StringCFArrayRef Value = FigCFDictionaryGetStringValue();
        if (StringValue)
        {
          CFArrayRef v12 = (const void *)StringValue;
          if (!Mutable)
          {
            CFMutableArrayRef Mutable = CFArrayCreateMutable(v9, 0, v10);
            if (!Mutable)
            {
              return FigSignalErrorAt();
            }
          }
          CFArrayAppendValue(Mutable, v12);
        }
        if (v6 == ++v7) {
          goto LABEL_13;
        }
      }
    }
  }
  CFMutableArrayRef Mutable = 0;
LABEL_13:
  *a3 = Mutable;
  return 0;
}

uint64_t _copyAllMetadataItems(const __CFAllocator *a1, uint64_t a2, __CFArray **a3)
{
  xpc_object_t value = 0;
  CFDictionaryRef theDict = 0;
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  BOOL v8 = *(uint64_t (**)(uint64_t, void, void))(v7 + 40);
  if (!v8 || (CFIndex v9 = v8(a2, 0, 0)) == 0)
  {
    CFMutableArrayRef Mutable = 0;
LABEL_28:
    uint64_t v20 = 0;
    goto LABEL_29;
  }
  uint64_t v10 = v9;
  CFMutableArrayRef Mutable = CFArrayCreateMutable(a1, v9, MEMORY[0x1E4F1D510]);
  if (Mutable)
  {
    if (v10 >= 1)
    {
      for (uint64_t i = 0; i != v10; ++i)
      {
        uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v13) {
          uint64_t v14 = v13;
        }
        else {
          uint64_t v14 = 0;
        }
        CFArrayRef v15 = *(uint64_t (**)(uint64_t, void, void, uint64_t, const __CFAllocator *, void **, CFDictionaryRef *))(v14 + 48);
        if (v15) {
          int v16 = v15(a2, 0, 0, i, a1, &value, &theDict);
        }
        else {
          int v16 = -12782;
        }
        CFDictionaryRef v17 = theDict;
        if (!v16 && value && theDict)
        {
          MutableCFArrayRef Copy = CFDictionaryCreateMutableCopy(a1, 0, theDict);
          if (!MutableCopy) {
            break;
          }
          CFIndex v19 = MutableCopy;
          CFDictionaryAddValue(MutableCopy, @"value", value);
          CFArrayAppendValue(Mutable, v19);
          CFRelease(v19);
          CFDictionaryRef v17 = theDict;
        }
        if (v17)
        {
          CFRelease(v17);
          CFDictionaryRef theDict = 0;
        }
        if (value)
        {
          CFRelease(value);
          xpc_object_t value = 0;
        }
      }
      if (theDict)
      {
        CFRelease(theDict);
        uint64_t v20 = 0;
        CFDictionaryRef theDict = 0;
        goto LABEL_29;
      }
    }
    goto LABEL_28;
  }
  uint64_t v20 = FigSignalErrorAt();
LABEL_29:
  if (value)
  {
    CFRelease(value);
    xpc_object_t value = 0;
  }
  if (v20 && Mutable)
  {
    CFRelease(Mutable);
    CFMutableArrayRef Mutable = 0;
  }
  *a3 = Mutable;
  return v20;
}

CFDictionaryRef _createAPACCharacteristicToTaggedMediaCharacteristicMappingOnce()
{
  keys[7] = *(void **)MEMORY[0x1E4F143B8];
  uint64_t v0 = (void *)*MEMORY[0x1E4F21730];
  keys[0] = *(void **)MEMORY[0x1E4F21728];
  keys[1] = v0;
  uint64_t v1 = (void *)*MEMORY[0x1E4F21748];
  keys[2] = *(void **)MEMORY[0x1E4F21750];
  keys[3] = v1;
  uint64_t v2 = (void *)*MEMORY[0x1E4F21758];
  keys[4] = *(void **)MEMORY[0x1E4F21738];
  keys[5] = v2;
  keys[6] = *(void **)MEMORY[0x1E4F21740];
  values[0] = @"public.accessibility.describes-video";
  values[1] = @"public.auxiliary-content";
  values[2] = @"public.original-content";
  values[3] = @"public.translation";
  values[4] = @"public.translation.dubbed";
  values[5] = @"public.translation.voice-over";
  values[6] = @"public.accessibility.enhances-speech-intelligibility";
  CFDictionaryRef result = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)keys, (const void **)values, 7, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  sAPACAudioCharacteristicToTaggedMediaCharacteristicMapping = (uint64_t)result;
  return result;
}

uint64_t FigClosedCaptionStringConformerNew(void *a1)
{
  if (a1 && (uint64_t v2 = malloc_type_calloc(1uLL, 0x18uLL, 0x6004045F868BCuLL)) != 0)
  {
    uint64_t v3 = v2;
    v2[2] = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, MEMORY[0x1E4F1D510]);
  }
  else
  {
    uint64_t v6 = FigSignalErrorAt();
    if (v6)
    {
      uint64_t v4 = v6;
      keyManager_releaseCallbackContext(0);
      return v4;
    }
    uint64_t v3 = 0;
  }
  uint64_t v4 = 0;
  *a1 = v3;
  return v4;
}

const void *FigClosedCaptionStringConformerPushCommand(uint64_t a1, int a2, const __CFDictionary *a3, int a4, char *a5, double a6, double a7)
{
  long long v85 = 0u;
  long long v86 = 0u;
  long long v83 = 0u;
  long long v84 = 0u;
  long long v81 = 0u;
  long long v82 = 0u;
  long long v79 = 0u;
  long long v80 = 0u;
  long long v77 = 0u;
  long long v78 = 0u;
  long long v75 = 0u;
  long long v76 = 0u;
  long long v74 = 0u;
  if (a1)
  {
    FigCaptionLayoutGetMAXSettingsForPreferringContentAsAuthored((uint64_t)value);
    long long v84 = v71;
    long long v85 = v72;
    long long v86 = v73;
    long long v80 = v67;
    long long v81 = v68;
    long long v82 = v69;
    long long v83 = v70;
    long long v76 = v63;
    long long v77 = v64;
    long long v78 = v65;
    long long v79 = v66;
    long long v74 = *(_OWORD *)value;
    long long v75 = v62;
    switch(a2)
    {
      case 1:
        long long v51 = a5;
        CFTypeRef v15 = ccstringconformer_copyFontDescriptorAttributeForMediaAccessibilityFontStyle((const __CFString *)*MEMORY[0x1E4F245A8]);
        if (!a4) {
          FigCaptionLayoutCopyMAXCaptionSystemSettings((uint64_t)&v74);
        }
        CFArrayRef v17 = *(const __CFArray **)a1;
        CFArrayRef v16 = *(const __CFArray **)(a1 + 8);
        uint64_t v87 = 0;
        *(_OWORD *)xpc_object_t value = *MEMORY[0x1E4F1DB30];
        valuePtr[0] = 0;
        CFIndex v18 = FigCaptionLayoutCopyEffectiveFontNamePlusInfoAndCreateElementGeometryArrays(v15, 1, v16, v17, 0, 0, 0, 1, 0.0, 0.0, a6, a7, (uint64_t)&v74, 0, valuePtr, 0, 0, 0, 0,
                &v87,
                (double *)value,
                0);
        CFRelease(v18);
        CFArrayRef v19 = v87;
        CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        CFArrayRef theArray = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
        if (v19)
        {
          CFIndex Count = CFArrayGetCount(v19);
          if (Count >= 1)
          {
            CFIndex v21 = Count;
            CFIndex v22 = 0;
            uint64_t v50 = (const void *)*MEMORY[0x1E4F1F508];
            uint64_t v52 = (const void *)*MEMORY[0x1E4F1F518];
            long long v23 = (const void *)*MEMORY[0x1E4F1F528];
            CFIndex v53 = Count;
            CFArrayRef v54 = v19;
            do
            {
              CFDictionaryRef ValueAtIndex = (const __CFArray **)CFArrayGetValueAtIndex(v19, v22);
              CFIndex v25 = ValueAtIndex;
              if ((ValueAtIndex[18] & 0xFFFFFFFD) == 1)
              {
                CFIndex v57 = v22;
                CFArrayRef v26 = ValueAtIndex[14];
                CFMutableArrayRef Mutable = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E4F1D510]);
                if (CFArrayGetCount(v26) >= 1)
                {
                  CFIndex v28 = 0;
                  CFArrayRef v58 = v26;
                  do
                  {
                    CFIndex v59 = v28;
                    int v29 = CFArrayGetValueAtIndex(v26, v28);
                    CFTypeID v30 = CFGetTypeID(v29);
                    if (v30 == CFArrayGetTypeID() && CFArrayGetCount((CFArrayRef)v29) >= 1)
                    {
                      CFIndex v31 = 0;
                      do
                      {
                        value[0] = 0;
                        CFStringRef v32 = CFArrayGetValueAtIndex((CFArrayRef)v29, v31);
                        CFTypeID v33 = CFGetTypeID(v32);
                        if (v33 == CFDictionaryGetTypeID())
                        {
                          uint64_t v34 = CFDictionaryGetValue((CFDictionaryRef)v32, @"S");
                          CFTypeID v35 = CFGetTypeID(v34);
                          if (v35 == CFAttributedStringGetTypeID())
                          {
                            CFIndex Length = CFAttributedStringGetLength((CFAttributedStringRef)v34);
                            valuePtr[0] = 0;
                            CFNumberRef v37 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v32, @"OffsetXKey");
                            if (v37)
                            {
                              CFNumberRef v38 = v37;
                              CFTypeID v39 = CFGetTypeID(v37);
                              if (v39 == CFNumberGetTypeID())
                              {
                                CFNumberGetValue(v38, kCFNumberCGFloatType, valuePtr);
                                char v40 = CTLineCreateWithAttributedString((CFAttributedStringRef)v34);
                                FigCaptionLayoutGetLineWidthWithRange(v40, 0, Length);
                                if (v40) {
                                  CFRelease(v40);
                                }
                                if (ccstringConformer_getFontSizeForAnnotatedElementAttributedString((const __CFAttributedString *)v34) > 0.0)
                                {
                                  int ConformedAttributedStringFromCommandDataStringAndSuggestedAlignment = ccstringconformer_c608_createConformedAttributedStringFromCommandDataStringAndSuggestedAlignment((const __CFAttributedString *)v34, v23, a4, (__CFAttributedString **)value);
                                  CFArrayRef v42 = value[0];
                                  if (!ConformedAttributedStringFromCommandDataStringAndSuggestedAlignment) {
                                    CFArrayAppendValue(Mutable, value[0]);
                                  }
                                  if (v42) {
                                    CFRelease(v42);
                                  }
                                }
                              }
                            }
                          }
                        }
                        ++v31;
                      }
                      while (v31 < CFArrayGetCount((CFArrayRef)v29));
                    }
                    CFArrayRef v26 = v58;
                    CFIndex v28 = v59 + 1;
                  }
                  while (v59 + 1 < CFArrayGetCount(v58));
                }
                v89.length = CFArrayGetCount(Mutable);
                v89.location = 0;
                CFArrayAppendArray(theArray, Mutable, v89);
                CFRelease(Mutable);
                CFIndex v21 = v53;
                CFArrayRef v19 = v54;
                CFIndex v22 = v57;
              }
              else
              {
                value[0] = 0;
                CFAttributedStringRef JoinedStringFromElementWithSeparator = FigCaptionLayoutCreateJoinedStringFromElementWithSeparator(ValueAtIndex[14], @" ");
                int v44 = FigCaptionLayoutDetectAndChooseAlignmentForCaptionElement(v25[13]);
                if (v44 == 4)
                {
                  int v45 = v50;
                }
                else
                {
                  int v45 = v52;
                  if (v44 != 2)
                  {
                    int v45 = 0;
                    if (v44 == 1) {
                      int v45 = v23;
                    }
                  }
                }
                if (ccstringConformer_getFontSizeForAnnotatedElementAttributedString(JoinedStringFromElementWithSeparator) > 0.0) {
                  ccstringconformer_c608_createConformedAttributedStringFromCommandDataStringAndSuggestedAlignment(JoinedStringFromElementWithSeparator, v45, a4, (__CFAttributedString **)value);
                }
                if (JoinedStringFromElementWithSeparator) {
                  CFRelease(JoinedStringFromElementWithSeparator);
                }
                CFRange v46 = value[0];
                if (value[0])
                {
                  CFArrayAppendValue(theArray, value[0]);
                  CFRelease(v46);
                }
              }
              ++v22;
            }
            while (v22 != v21);
          }
        }
        FigCaptionLayoutReleaseCaptionElementArray(v87);
        CFRange v47 = *(const void **)(a1 + 16);
        if (v47) {
          CFRelease(v47);
        }
        *(void *)(a1 + 16) = theArray;
        a5 = v51;
        if (v15) {
          CFRelease(v15);
        }
        uint64_t v14 = 0;
        char v48 = 1;
        if (v51) {
          goto LABEL_56;
        }
        goto LABEL_57;
      case 7:
        uint64_t v13 = CFDictionaryGetValue(a3, @"C");
        uint64_t v14 = *(const void **)(a1 + 8);
        *(void *)(a1 + 8) = v13;
        if (!v13) {
          goto LABEL_52;
        }
        break;
      case 6:
        uint64_t v13 = CFDictionaryGetValue(a3, @"W");
        uint64_t v14 = *(const void **)a1;
        *(void *)a1 = v13;
        if (!v13)
        {
LABEL_52:
          if (!v14) {
            goto LABEL_55;
          }
          CFRelease(v14);
          goto LABEL_54;
        }
        break;
      default:
LABEL_54:
        uint64_t v14 = 0;
        goto LABEL_55;
    }
    CFRetain(v13);
    goto LABEL_52;
  }
  uint64_t v14 = (const void *)FigSignalErrorAt();
LABEL_55:
  char v48 = 0;
  if (a5) {
LABEL_56:
  }
    *a5 = v48;
LABEL_57:
  FigCaptionLayoutClearMAXCaptionSettings((uint64_t)&v74);
  return v14;
}

CFTypeRef FigClosedCaptionStringConformerCopyCurrentConformedStrings(uint64_t a1)
{
  CFTypeRef result = *(CFTypeRef *)(a1 + 16);
  if (result) {
    return CFRetain(result);
  }
  return result;
}

CFTypeRef ccstringconformer_copyFontDescriptorAttributeForMediaAccessibilityFontStyle(const __CFString *a1)
{
  uint64_t v2 = MACaptionAppearanceCopyFontDescriptorForStyle(kMACaptionAppearanceDomainDefault, 0, kMACaptionAppearanceFontStyleMonospacedWithSerif);
  CFTypeRef v3 = CTFontDescriptorCopyAttribute(v2, a1);
  if (v2) {
    CFRelease(v2);
  }
  return v3;
}

double ccstringConformer_getFontSizeForAnnotatedElementAttributedString(const __CFAttributedString *a1)
{
  v9.location = 0;
  v9.length = 0;
  uint64_t Length = CFAttributedStringGetLength(a1);
  double v3 = 0.0;
  if (a1)
  {
    v4.length = Length;
    if (Length >= 1)
    {
      v4.location = 0;
      AttributeAndLongestEffectiveRange = (const __CTFont *)CFAttributedStringGetAttributeAndLongestEffectiveRange(a1, 0, (CFStringRef)*MEMORY[0x1E4F243F0], v4, &v9);
      if (AttributeAndLongestEffectiveRange)
      {
        uint64_t v6 = AttributeAndLongestEffectiveRange;
        CFTypeID v7 = CFGetTypeID(AttributeAndLongestEffectiveRange);
        if (v7 == CTFontGetTypeID()) {
          return CTFontGetSize(v6);
        }
      }
    }
  }
  return v3;
}

uint64_t ccstringconformer_c608_createConformedAttributedStringFromCommandDataStringAndSuggestedAlignment(const __CFAttributedString *a1, const void *a2, int a3, __CFAttributedString **a4)
{
  CFMutableArrayRef Mutable = CFAttributedStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFIndex Length = CFAttributedStringGetLength(a1);
  CFStringRef String = CFAttributedStringGetString(a1);
  v55.location = 0;
  v55.length = 0;
  CFAttributedStringReplaceString(Mutable, v55, String);
  if (CFAttributedStringGetLength(a1) >= 1)
  {
    CFIndex v8 = 0;
    CFStringRef attribute = (const __CFString *)*MEMORY[0x1E4F24538];
    CFStringRef attrName = (const __CFString *)*MEMORY[0x1E4F1F5E0];
    CFStringRef v45 = (const __CFString *)*MEMORY[0x1E4F1F558];
    int v44 = (const void *)*MEMORY[0x1E4F1CFD0];
    uint64_t v43 = (const void *)*MEMORY[0x1E4F1F750];
    CFStringRef v42 = (const __CFString *)*MEMORY[0x1E4F1F5A0];
    CFStringRef v53 = (const __CFString *)*MEMORY[0x1E4F1F608];
    uint64_t v52 = (const void *)*MEMORY[0x1E4F1F7D0];
    CFRange v9 = (const void *)*MEMORY[0x1E4F1CFC8];
    CFStringRef v51 = (const __CFString *)*MEMORY[0x1E4F1F630];
    CFStringRef v50 = (const __CFString *)*MEMORY[0x1E4F1F718];
    CFStringRef v48 = (const __CFString *)*MEMORY[0x1E4F1F600];
    CFStringRef v47 = (const __CFString *)*MEMORY[0x1E4F1F598];
    do
    {
      effectiveRange.location = 0;
      effectiveRange.length = 0;
      CFDictionaryRef Attributes = CFAttributedStringGetAttributes(a1, v8, &effectiveRange);
      if (a3)
      {
        CFRange v11 = effectiveRange;
        CFArrayRef v12 = Mutable;
        uint64_t v14 = v52;
        CFStringRef v13 = v53;
      }
      else
      {
        CFTypeRef v15 = MACaptionAppearanceCopyFontDescriptorForStyle(kMACaptionAppearanceDomainUser, 0, kMACaptionAppearanceFontStyleDefault);
        CFTypeRef v16 = CTFontDescriptorCopyAttribute(v15, attribute);
        if (v15) {
          CFRelease(v15);
        }
        if (!v16)
        {
          CFTypeRef v16 = ccstringconformer_copyFontDescriptorAttributeForMediaAccessibilityFontStyle(attribute);
          if (!v16) {
            CFTypeRef v16 = CFRetain(@"Courier New");
          }
        }
        CFAttributedStringSetAttribute(Mutable, effectiveRange, attrName, v16);
        CFRelease(v16);
        uint64_t result = FigCFAttributedStringSetDouble();
        if (result) {
          return result;
        }
        CFAttributedStringSetAttribute(Mutable, effectiveRange, v45, v44);
        MACaptionAppearanceTextEdgeStyle TextEdgeStyle = MACaptionAppearanceGetTextEdgeStyle(kMACaptionAppearanceDomainUser, 0);
        uint64_t v19 = FigStringConformerEdgeStyleForMediaAccessibilityEdgeStyle(TextEdgeStyle);
        CFStringRef v13 = v42;
        if (v19) {
          uint64_t v14 = (const void *)v19;
        }
        else {
          uint64_t v14 = v43;
        }
        CFRange v11 = effectiveRange;
        CFArrayRef v12 = Mutable;
      }
      CFAttributedStringSetAttribute(v12, v11, v13, v14);
      CFArrayRef Value = CFDictionaryGetValue(Attributes, @"i");
      if (Value) {
        BOOL v21 = 0;
      }
      else {
        BOOL v21 = a3 == 0;
      }
      if (v21) {
        CFIndex v22 = v9;
      }
      else {
        CFIndex v22 = Value;
      }
      if (v22) {
        CFAttributedStringSetAttribute(Mutable, effectiveRange, v51, v22);
      }
      long long v23 = CFDictionaryGetValue(Attributes, @"u");
      if (v23) {
        BOOL v24 = 0;
      }
      else {
        BOOL v24 = a3 == 0;
      }
      if (v24) {
        CFIndex v25 = v9;
      }
      else {
        CFIndex v25 = v23;
      }
      if (v25) {
        CFAttributedStringSetAttribute(Mutable, effectiveRange, v50, v25);
      }
      WhiteARGBColorArray = (const void *)FigTextMarkupCreateWhiteARGBColorArray();
      if (CFDictionaryGetValue(Attributes, @"t"))
      {
        ARGBColorArrayFromCGColor = (const void *)FigTextMarkupCreateARGBColorArrayFromCGColor();
        CFIndex v28 = ARGBColorArrayFromCGColor;
        if (a3)
        {
          if (!ARGBColorArrayFromCGColor) {
            goto LABEL_36;
          }
          ResolvedForegroundARGBColorArrayUsingMAXColorAndOpacity = CFRetain(ARGBColorArrayFromCGColor);
          CFRelease(WhiteARGBColorArray);
LABEL_39:
          CFRelease(v28);
          goto LABEL_40;
        }
      }
      else
      {
        if (a3)
        {
LABEL_36:
          CFTypeID v30 = WhiteARGBColorArray;
          goto LABEL_42;
        }
        CFIndex v28 = 0;
      }
      ResolvedForegroundARGBColorArrayUsingMAXColorAndOpacity = FigStringConformerCreateResolvedForegroundARGBColorArrayUsingMAXColorAndOpacity(v28, WhiteARGBColorArray);
      CFRelease(WhiteARGBColorArray);
      if (v28) {
        goto LABEL_39;
      }
LABEL_40:
      if (!ResolvedForegroundARGBColorArrayUsingMAXColorAndOpacity) {
        goto LABEL_43;
      }
      CFAttributedStringSetAttribute(Mutable, effectiveRange, v48, ResolvedForegroundARGBColorArrayUsingMAXColorAndOpacity);
      CFTypeID v30 = ResolvedForegroundARGBColorArrayUsingMAXColorAndOpacity;
LABEL_42:
      CFRelease(v30);
LABEL_43:
      BlackARGBColorArray = (const void *)FigTextMarkupCreateBlackARGBColorArray();
      if (!CFDictionaryGetValue(Attributes, @"b"))
      {
        if (a3)
        {
LABEL_48:
          CFTypeID v35 = BlackARGBColorArray;
LABEL_54:
          CFRelease(v35);
          goto LABEL_55;
        }
        CFTypeID v33 = 0;
LABEL_50:
        ResolvedBackgroundARGBColorArrayUsingMAXColorAndOpacity = FigStringConformerCreateResolvedBackgroundARGBColorArrayUsingMAXColorAndOpacity(v33, BlackARGBColorArray);
        CFRelease(BlackARGBColorArray);
        if (!v33) {
          goto LABEL_52;
        }
        goto LABEL_51;
      }
      CFStringRef v32 = (const void *)FigTextMarkupCreateARGBColorArrayFromCGColor();
      CFTypeID v33 = v32;
      if (!a3) {
        goto LABEL_50;
      }
      if (!v32) {
        goto LABEL_48;
      }
      ResolvedBackgroundARGBColorArrayUsingMAXColorAndOpacity = CFRetain(v32);
      CFRelease(BlackARGBColorArray);
LABEL_51:
      CFRelease(v33);
LABEL_52:
      if (ResolvedBackgroundARGBColorArrayUsingMAXColorAndOpacity)
      {
        CFAttributedStringSetAttribute(Mutable, effectiveRange, v47, ResolvedBackgroundARGBColorArrayUsingMAXColorAndOpacity);
        CFTypeID v35 = ResolvedBackgroundARGBColorArrayUsingMAXColorAndOpacity;
        goto LABEL_54;
      }
LABEL_55:
      CFIndex v8 = effectiveRange.length + effectiveRange.location;
    }
    while (v8 < CFAttributedStringGetLength(a1));
  }
  if (a2)
  {
    v56.location = 0;
    v56.length = Length;
    CFAttributedStringSetAttribute(Mutable, v56, (CFStringRef)*MEMORY[0x1E4F1F538], a2);
  }
  ClearARGBColorArray = (const void *)FigTextMarkupCreateClearARGBColorArray();
  CFNumberRef v37 = ClearARGBColorArray;
  if (a3) {
    goto LABEL_61;
  }
  ResolvedWindowARGBColorArrayUsingMAXColorAndOpacity = FigStringConformerCreateResolvedWindowARGBColorArrayUsingMAXColorAndOpacity(0, ClearARGBColorArray);
  CFRelease(v37);
  if (ResolvedWindowARGBColorArrayUsingMAXColorAndOpacity)
  {
    v57.location = 0;
    v57.length = Length;
    CFAttributedStringSetAttribute(Mutable, v57, (CFStringRef)*MEMORY[0x1E4F1F548], ResolvedWindowARGBColorArrayUsingMAXColorAndOpacity);
    ClearARGBColorArray = ResolvedWindowARGBColorArrayUsingMAXColorAndOpacity;
LABEL_61:
    CFRelease(ClearARGBColorArray);
  }
  uint64_t result = FigCFAttributedStringSetDouble();
  if (!result)
  {
    uint64_t result = FigCFAttributedStringSetDouble();
    if (!result)
    {
      uint64_t result = FigCFAttributedStringSetDouble();
      if (!result)
      {
        if (a3 || (uint64_t result = FigCFAttributedStringSetDouble(), !result))
        {
          uint64_t result = 0;
          *a4 = Mutable;
        }
      }
    }
  }
  return result;
}

uint64_t FigNetworkPredictionArbiterCreate(const void *a1, const void *a2, const __CFDictionary *a3, void *a4)
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a4) {
    return FigSignalErrorAt();
  }
  FigNetworkPredictorGetClassID();
  uint64_t v8 = CMDerivedObjectCreate();
  if (v8) {
    return v8;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v10 = a2 ? CFRetain(a2) : 0;
  *(void *)uint64_t DerivedStorage = v10;
  uint64_t v8 = FigNetworkHistoryCopySharedPredictor();
  if (v8) {
    return v8;
  }
  FigNetworkHistoryGetGlobal();
  uint64_t v8 = FigNetworkHistoryCopySharedPredictor();
  if (v8) {
    return v8;
  }
  if (a3)
  {
    CFArrayRef Value = CFDictionaryGetValue(a3, @"NetworkPredictorCreateOption_StoreBag");
    if (Value) {
      CFArrayRef Value = CFRetain(Value);
    }
    *(void *)(DerivedStorage + 32) = Value;
  }
  if (_os_feature_enabled_impl())
  {
    uint64_t v12 = CMBaseObjectGetDerivedStorage();
    if (!CelestialIs1GBAudioAccessory()
      || !FigRCLGetNumberWithDefault(*(const __CFDictionary **)(v12 + 32), @"disableMLOn1GBAudioAccessory"))
    {
      uint64_t v8 = FigMLBandwidthPredictorCreate(a1, (void *)(DerivedStorage + 24));
      if (v8) {
        return v8;
      }
      uint64_t v13 = *(void *)(DerivedStorage + 24);
      uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v14) {
        uint64_t v15 = v14;
      }
      else {
        uint64_t v15 = 0;
      }
      CFTypeRef v16 = *(uint64_t (**)(uint64_t, void, const void *))(v15 + 56);
      if (!v16) {
        return 4294954514;
      }
      uint64_t v8 = v16(v13, *MEMORY[0x1E4F218D0], a2);
      if (v8) {
        return v8;
      }
    }
  }
  uint64_t v17 = FigSimpleMutexCreate();
  *(void *)(DerivedStorage + 40) = v17;
  if (!v17) {
    return FigSignalErrorAt();
  }
  *(void *)(DerivedStorage + 48) = (uint64_t)FigRCLGetDoubleWithDefault(*(const __CFDictionary **)(DerivedStorage + 32), @"mlMixingWindowSize");
  *(void *)(DerivedStorage + 56) = 0;
  *(_DWORD *)(DerivedStorage + 64) = 0;
  *(unsigned char *)(DerivedStorage + 68) = 0;
  if (dword_1E9351768)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v19 = 0;
  *a4 = 0;
  return v19;
}

void fnpa_finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigSimpleMutexDestroy();
  if (*(void *)DerivedStorage) {
    CFRelease(*(CFTypeRef *)DerivedStorage);
  }
  uint64_t v1 = *(const void **)(DerivedStorage + 8);
  if (v1) {
    CFRelease(v1);
  }
  uint64_t v2 = *(const void **)(DerivedStorage + 16);
  if (v2) {
    CFRelease(v2);
  }
  double v3 = *(const void **)(DerivedStorage + 32);
  if (v3) {
    CFRelease(v3);
  }
  CFRange v4 = *(const void **)(DerivedStorage + 24);
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = *(const void **)(DerivedStorage + 80);
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v6 = *(const void **)(DerivedStorage + 104);
  if (v6)
  {
    CFRelease(v6);
  }
}

uint64_t fnpa_copyProperty(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 40));
  uint64_t v7 = *MEMORY[0x1E4F218D0];
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F218D0]))
  {
    uint64_t v8 = *(void *)(DerivedStorage + 8);
    uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v9) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(v10 + 48);
    if (v12) {
      uint64_t v11 = v12(v8, v7, *MEMORY[0x1E4F1CF80], a4);
    }
    else {
      uint64_t v11 = 4294954514;
    }
  }
  else
  {
    uint64_t v11 = 4294949566;
  }
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 40));
  return v11;
}

uint64_t fnpa_setProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 40));
  int valuePtr = 0;
  if (CFEqual(a2, @"NetworkPredictorProperty_EnableMLTraining"))
  {
    if (a3)
    {
      CFTypeID v6 = CFGetTypeID(a3);
      if (v6 == CFBooleanGetTypeID())
      {
        uint64_t v7 = *(void *)(DerivedStorage + 24);
        if (v7)
        {
          uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v8) {
            uint64_t v9 = v8;
          }
          else {
            uint64_t v9 = 0;
          }
          uint64_t v11 = *(uint64_t (**)(uint64_t, __CFString *, const void *))(v9 + 56);
          if (v11)
          {
            uint64_t v12 = @"NetworkPredictorProperty_EnableMLTraining";
LABEL_13:
            uint64_t v13 = v11(v7, v12, a3);
LABEL_14:
            uint64_t v14 = v13;
            goto LABEL_47;
          }
          goto LABEL_46;
        }
        goto LABEL_22;
      }
    }
    goto LABEL_73;
  }
  if (CFEqual(a2, @"NetworkPredictorProperty_EnableMLPredictions"))
  {
    *(unsigned char *)(DerivedStorage + 68) = *MEMORY[0x1E4F1CFD0] == (void)a3;
    if (dword_1E9351768)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    goto LABEL_22;
  }
  if (!CFEqual(a2, @"NetworkPredictorProperty_InterfaceType"))
  {
    if (CFEqual(a2, @"NetworkPredictorProperty_CMSessionID"))
    {
      if (a3)
      {
        CFTypeID v20 = CFGetTypeID(a3);
        if (v20 == CFStringGetTypeID())
        {
          uint64_t v7 = *(void *)(DerivedStorage + 24);
          if (v7)
          {
            uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v21) {
              uint64_t v22 = v21;
            }
            else {
              uint64_t v22 = 0;
            }
            uint64_t v11 = *(uint64_t (**)(uint64_t, __CFString *, const void *))(v22 + 56);
            if (v11)
            {
              uint64_t v12 = @"NetworkPredictorProperty_CMSessionID";
              goto LABEL_13;
            }
LABEL_46:
            uint64_t v14 = 4294954514;
            goto LABEL_47;
          }
LABEL_22:
          uint64_t v14 = 0;
          goto LABEL_47;
        }
      }
LABEL_73:
      uint64_t v13 = FigSignalErrorAt();
      goto LABEL_14;
    }
    if (CFEqual(a2, @"NetworkPredictorProperty_ReportingAgent"))
    {
      if (a3)
      {
        CFIndex v25 = *(const void **)(DerivedStorage + 80);
        *(void *)(DerivedStorage + 80) = a3;
        CFRetain(a3);
        if (v25) {
          CFRelease(v25);
        }
        uint64_t v26 = *(void *)(DerivedStorage + 24);
        if (!v26) {
          goto LABEL_22;
        }
        int v27 = @"NetworkPredictorProperty_ReportingAgent";
        goto LABEL_53;
      }
    }
    else
    {
      if (CFEqual(a2, @"NetworkPredictorProperty_ClientBundleIdentifier"))
      {
        if (!a3) {
          goto LABEL_73;
        }
        CFTypeID v29 = CFGetTypeID(a3);
        if (v29 != CFStringGetTypeID()) {
          goto LABEL_73;
        }
        uint64_t v26 = *(void *)(DerivedStorage + 24);
        if (!v26) {
          goto LABEL_22;
        }
        int v27 = @"NetworkPredictorProperty_ClientBundleIdentifier";
LABEL_53:
        uint64_t v13 = FigCPECryptorSetProperty(v26, (uint64_t)v27, (uint64_t)a3);
        goto LABEL_14;
      }
      if (CFEqual(a2, @"NetworkPredictorProperty_SSID"))
      {
        if (a3)
        {
          CFTypeID v30 = CFGetTypeID(a3);
          if (v30 == CFStringGetTypeID())
          {
            if (!FigCFEqual())
            {
              *(void *)(DerivedStorage + 56) = FigGetUpTimeNanoseconds();
              *(_DWORD *)(DerivedStorage + 64) = 3;
            }
            CFIndex v31 = *(const void **)(DerivedStorage + 104);
            *(void *)(DerivedStorage + 104) = a3;
            CFRetain(a3);
            if (v31) {
              CFRelease(v31);
            }
            goto LABEL_22;
          }
        }
        goto LABEL_73;
      }
      if (CFEqual(a2, @"NetworkPredictorProperty_RSSI"))
      {
        if (!a3) {
          goto LABEL_73;
        }
        CFTypeID v32 = CFGetTypeID(a3);
        if (v32 != CFNumberGetTypeID()) {
          goto LABEL_73;
        }
        uint64_t UInt64 = FigCFNumberGetUInt64();
        if (UInt64 <= -40) {
          int v34 = 2;
        }
        else {
          int v34 = 3;
        }
        if (UInt64 < -60) {
          int v35 = 1;
        }
        else {
          int v35 = v34;
        }
        if (*(_DWORD *)(DerivedStorage + 112) != v35)
        {
          *(void *)(DerivedStorage + 56) = FigGetUpTimeNanoseconds();
          *(_DWORD *)(DerivedStorage + 64) = 4;
        }
        uint64_t v14 = 0;
        *(_DWORD *)(DerivedStorage + 112) = v35;
        goto LABEL_47;
      }
    }
    uint64_t v14 = 4294949566;
    goto LABEL_47;
  }
  if (!a3) {
    goto LABEL_73;
  }
  CFTypeID v15 = CFGetTypeID(a3);
  if (v15 != CFNumberGetTypeID()) {
    goto LABEL_73;
  }
  CFNumberGetValue((CFNumberRef)a3, kCFNumberIntType, &valuePtr);
  int v16 = valuePtr;
  if (!valuePtr) {
    goto LABEL_22;
  }
  uint64_t v17 = *(void *)(DerivedStorage + 24);
  if (v17)
  {
    uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v18) {
      uint64_t v19 = v18;
    }
    else {
      uint64_t v19 = 0;
    }
    long long v23 = *(uint64_t (**)(uint64_t, __CFString *, const void *))(v19 + 56);
    if (!v23) {
      goto LABEL_46;
    }
    uint64_t v13 = v23(v17, @"NetworkPredictorProperty_InterfaceType", a3);
    if (v13) {
      goto LABEL_14;
    }
    int v16 = valuePtr;
  }
  int v24 = *(_DWORD *)(DerivedStorage + 72);
  if (v24 && v16 != v24)
  {
    *(void *)(DerivedStorage + 56) = FigGetUpTimeNanoseconds();
    *(_DWORD *)(DerivedStorage + 64) = 2;
    int v16 = valuePtr;
  }
  uint64_t v14 = 0;
  *(_DWORD *)(DerivedStorage + 72) = v16;
LABEL_47:
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 40));
  return v14;
}

uint64_t fnpa_makePrediction(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4)
{
  uint64_t v196 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 40));
  if (!FigRCLGetNumberWithDefault(*(const __CFDictionary **)(DerivedStorage + 32), @"useAdaptiveBayesianNetworkPrediction")|| (*((void *)a3 + 21) & 0xFLL) == 1)
  {
    uint64_t v9 = *((void *)a3 + 21);
    if (*(unsigned char *)(DerivedStorage + 68)) {
      BOOL v10 = 1;
    }
    else {
      BOOL v10 = (*((void *)a3 + 21) & 0xFLL) == 2;
    }
    if (!v10)
    {
      long long v22 = a3[11];
      *(_OWORD *)&v179[96] = a3[10];
      *(_OWORD *)uint64_t v180 = v22;
      long long v23 = a3[13];
      *(_OWORD *)&v180[16] = a3[12];
      long long v181 = v23;
      long long v24 = a3[7];
      *(_OWORD *)&v179[32] = a3[6];
      *(_OWORD *)&v179[48] = v24;
      long long v25 = a3[9];
      *(_OWORD *)&v179[64] = a3[8];
      *(_OWORD *)&v179[80] = v25;
      long long v26 = a3[3];
      *(_OWORD *)&v178[32] = a3[2];
      *(_OWORD *)&v178[48] = v26;
      long long v27 = a3[5];
      *(_OWORD *)uint64_t v179 = a3[4];
      *(_OWORD *)&v179[16] = v27;
      long long v28 = a3[1];
      *(_OWORD *)int v178 = *a3;
      *(_OWORD *)&v178[16] = v28;
      uint64_t HeuristicPrediction = fnpa_makeHeuristicPrediction(a1, a2, (long long *)v178, a4);
LABEL_12:
      uint64_t v30 = HeuristicPrediction;
      goto LABEL_143;
    }
    long long v11 = a3[9];
    long long v193 = a3[8];
    long long v194 = v11;
    uint64_t v195 = *((void *)a3 + 20);
    long long v12 = a3[5];
    long long v189 = a3[4];
    long long v190 = v12;
    long long v13 = a3[7];
    long long v191 = a3[6];
    long long v192 = v13;
    long long v14 = a3[1];
    long long v185 = *a3;
    long long v186 = v14;
    long long v15 = a3[3];
    long long v187 = a3[2];
    long long v188 = v15;
    long long v16 = a3[12];
    long long v182 = a3[11];
    long long v183 = v16;
    long long v184 = a3[13];
    double v177 = 0.0;
    long long v175 = 0u;
    long long v176 = 0u;
    long long v174 = 0u;
    memset(v173, 0, sizeof(v173));
    uint64_t v172 = 0;
    long long v170 = 0u;
    long long v171 = 0u;
    long long v169 = 0u;
    memset(v168, 0, sizeof(v168));
    uint64_t v167 = 0;
    long long v165 = 0u;
    long long v166 = 0u;
    long long v164 = 0u;
    memset(v163, 0, sizeof(v163));
    uint64_t v17 = CMBaseObjectGetDerivedStorage();
    if ((~v9 & 0xC) == 0)
    {
      uint64_t HeuristicPrediction = FigSignalErrorAt();
      goto LABEL_12;
    }
    uint64_t v18 = v17;
    if ((v9 & 4) != 0)
    {
      uint64_t v43 = *(void *)(v17 + 16);
      uint64_t v44 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v44) {
        uint64_t v45 = v44;
      }
      else {
        uint64_t v45 = 0;
      }
      long long v66 = *(uint64_t (**)(uint64_t, uint64_t, unsigned char *, _OWORD *))(v45 + 8);
      if (v66)
      {
        *(_OWORD *)&v179[64] = v193;
        *(_OWORD *)&v179[80] = v194;
        *(_OWORD *)uint64_t v179 = v189;
        *(_OWORD *)&v179[16] = v190;
        *(_OWORD *)&v179[32] = v191;
        *(_OWORD *)&v179[48] = v192;
        *(_OWORD *)int v178 = v185;
        *(_OWORD *)&v178[16] = v186;
        *(_OWORD *)&v178[32] = v187;
        *(_OWORD *)&v178[48] = v188;
        *(void *)&v179[96] = v195;
        *(void *)&v179[104] = v9;
        *(_OWORD *)uint64_t v180 = v182;
        *(_OWORD *)&v180[16] = v183;
        long long v181 = v184;
        uint64_t v19 = a2;
        int v67 = v66(v43, a2, v178, v168);
        uint64_t v68 = *(void *)&v168[0];
      }
      else
      {
        uint64_t v19 = a2;
        uint64_t v68 = 0;
        int v67 = -12782;
      }
      unsigned int v156 = 0;
      unsigned int v158 = v67;
    }
    else
    {
      if ((v9 & 8) == 0)
      {
        uint64_t v19 = a2;
        unsigned int v158 = 0;
        unsigned int v156 = 0;
        BOOL v20 = 0;
        double v21 = 0.0;
        goto LABEL_59;
      }
      uint64_t v53 = *(void *)(v17 + 8);
      uint64_t v54 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v54) {
        uint64_t v55 = v54;
      }
      else {
        uint64_t v55 = 0;
      }
      long long v72 = *(uint64_t (**)(uint64_t, uint64_t, unsigned char *, _OWORD *))(v55 + 8);
      if (v72)
      {
        *(_OWORD *)&v179[64] = v193;
        *(_OWORD *)&v179[80] = v194;
        *(_OWORD *)uint64_t v179 = v189;
        *(_OWORD *)&v179[16] = v190;
        *(_OWORD *)&v179[32] = v191;
        *(_OWORD *)&v179[48] = v192;
        *(_OWORD *)int v178 = v185;
        *(_OWORD *)&v178[16] = v186;
        *(_OWORD *)&v178[32] = v187;
        *(_OWORD *)&v178[48] = v188;
        *(void *)&v179[96] = v195;
        *(void *)&v179[104] = v9;
        *(_OWORD *)uint64_t v180 = v182;
        *(_OWORD *)&v180[16] = v183;
        long long v181 = v184;
        uint64_t v19 = a2;
        int v67 = v72(v53, a2, v178, v173);
        uint64_t v68 = *(void *)&v173[0];
      }
      else
      {
        uint64_t v19 = a2;
        uint64_t v68 = 0;
        int v67 = -12782;
      }
      unsigned int v158 = 0;
      unsigned int v156 = v67;
    }
    BOOL v20 = (v67 + 17736) < 0xFFFFFFFE;
    double v21 = (double)v68;
LABEL_59:
    uint64_t v161 = DerivedStorage;
    double v73 = 0.0;
    if ((v9 & 2) != 0)
    {
      uint64_t v75 = *(void *)(v18 + 24);
      if (v75)
      {
        uint64_t v76 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v76) {
          uint64_t v77 = v76;
        }
        else {
          uint64_t v77 = 0;
        }
        long long v78 = *(uint64_t (**)(uint64_t, uint64_t, unsigned char *, _OWORD *))(v77 + 8);
        if (v78)
        {
          *(_OWORD *)&v179[64] = v193;
          *(_OWORD *)&v179[80] = v194;
          *(_OWORD *)uint64_t v179 = v189;
          *(_OWORD *)&v179[16] = v190;
          *(_OWORD *)&v179[32] = v191;
          *(_OWORD *)&v179[48] = v192;
          *(_OWORD *)int v178 = v185;
          *(_OWORD *)&v178[16] = v186;
          *(_OWORD *)&v178[32] = v187;
          *(_OWORD *)&v178[48] = v188;
          *(void *)&v179[96] = v195;
          *(void *)&v179[104] = v9;
          *(_OWORD *)uint64_t v180 = v182;
          *(_OWORD *)&v180[16] = v183;
          long long v181 = v184;
          uint64_t v30 = v78(v75, v19, v178, v163);
          double v73 = (double)*(uint64_t *)&v163[0];
        }
        else
        {
          uint64_t v30 = 4294954514;
        }
        BOOL v74 = v30 == 0;
      }
      else
      {
        BOOL v74 = 0;
        uint64_t v30 = 4294948281;
      }
    }
    else
    {
      uint64_t v30 = 0;
      BOOL v74 = 0;
    }
    char v79 = (~v9 & 6) != 0 || v20;
    if ((v79 & 1) == 0)
    {
      FigNetworkHistoryGetGlobal();
      *(void *)(v18 + 56) = FigNetworkHistoryGetFirstActiveTimestamp();
      *(_DWORD *)(v18 + 64) = 1;
    }
    long long v80 = &v170;
    if (v74 && v20)
    {
      uint64_t v82 = v19 - *(void *)(v18 + 56);
      uint64_t v83 = CMBaseObjectGetDerivedStorage();
      double v84 = 1.0 / (exp(((double)v82 + (double)*(uint64_t *)(v83 + 48) * -0.5) / -1000000000.0) + 1.0);
      double v85 = 1.0 - v84;
      if ((v9 & 2) != 0)
      {
LABEL_80:
        long long v162 = *(_OWORD *)((char *)v163 + 8);
        *(_OWORD *)int v178 = v165;
        *(_OWORD *)&v178[16] = v166;
        *(void *)&v178[32] = v167;
        if ((v9 & 4) != 0) {
          uint64_t v86 = v169;
        }
        else {
          uint64_t v86 = v174;
        }
        double v87 = *((double *)&v169 + 1);
        if ((v9 & 4) != 0) {
          double v88 = *((double *)&v169 + 1);
        }
        else {
          double v88 = *((double *)&v174 + 1);
        }
        uint64_t v89 = 0x3FECCCCCCCCCCCCDLL;
        uint64_t v90 = v19;
        if ((v9 & 1) == 0 || v30 != -19015)
        {
LABEL_103:
          uint64_t v92 = (uint64_t)(v73 * (v85 * (1.0 / (v85 + v84))) + v84 * (1.0 / (v85 + v84)) * v21);
          *(void *)a4 = v92;
          *(_OWORD *)(a4 + 8) = v162;
          *(void *)(a4 + 24) = v89;
          *(void *)(a4 + 32) = v86;
          *(double *)(a4 + 40) = v88;
          long long v93 = *(_OWORD *)&v178[16];
          *(_OWORD *)(a4 + 48) = *(_OWORD *)v178;
          *(_OWORD *)(a4 + 64) = v93;
          *(void *)(a4 + 80) = *(void *)&v178[32];
          if (v74)
          {
            uint64_t v94 = *(int *)(v18 + 64);
            if (v94)
            {
              uint64_t v95 = *(void *)(v18 + 80);
              if (v95)
              {
                uint64_t v96 = *(void *)(CMBaseObjectGetVTable() + 16);
                uint64_t v97 = v96 ? v96 : 0;
                int16x4_t v98 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v97 + 56);
                if (v98) {
                  v98(v95, 0x1EE582BB8, 0x1EE5860D8, v94, 0);
                }
              }
            }
            uint64_t DerivedStorage = v161;
            if (v90 - *(void *)(v18 + 56) < *(void *)(v18 + 48))
            {
              uint64_t v99 = *(void *)(v18 + 80);
              if (v99)
              {
                uint64_t v100 = *(void *)(CMBaseObjectGetVTable() + 16);
                if (v100) {
                  uint64_t v101 = v100;
                }
                else {
                  uint64_t v101 = 0;
                }
                unsigned int v102 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v101 + 40);
                if (v102) {
                  v102(v99, 0x1EE582BB8, 0x1EE5860F8, v92);
                }
              }
            }
            goto LABEL_143;
          }
LABEL_142:
          uint64_t DerivedStorage = v161;
          goto LABEL_143;
        }
        if ((v9 & 4) == 0)
        {
          long long v162 = *(_OWORD *)((char *)v173 + 8);
          double v84 = 1.0;
          double v85 = 0.0;
          uint64_t v89 = *((void *)&v173[1] + 1);
          uint64_t v30 = v156;
          double v87 = *((double *)&v174 + 1);
          uint64_t v86 = v174;
LABEL_98:
          long long v80 = &v175;
LABEL_102:
          long long v91 = v80[1];
          *(_OWORD *)int v178 = *v80;
          *(_OWORD *)&v178[16] = v91;
          *(void *)&v178[32] = *((void *)v80 + 4);
          double v88 = v87;
          goto LABEL_103;
        }
        long long v162 = *(_OWORD *)((char *)v168 + 8);
        double v84 = 1.0;
        double v85 = 0.0;
        uint64_t v89 = *((void *)&v168[1] + 1);
        uint64_t v86 = v169;
        goto LABEL_101;
      }
    }
    else
    {
      double v84 = 1.0;
      if (v74) {
        double v85 = 1.0;
      }
      else {
        double v85 = 0.0;
      }
      if (v74) {
        double v84 = 0.0;
      }
      if ((v9 & 2) != 0) {
        goto LABEL_80;
      }
    }
    uint64_t v90 = v19;
    if ((v9 & 4) == 0)
    {
      long long v162 = *(_OWORD *)((char *)v173 + 8);
      uint64_t v89 = *((void *)&v173[1] + 1);
      double v87 = *((double *)&v174 + 1);
      uint64_t v86 = v174;
      uint64_t v30 = v156;
      goto LABEL_98;
    }
    long long v162 = *(_OWORD *)((char *)v168 + 8);
    uint64_t v89 = *((void *)&v168[1] + 1);
    double v87 = *((double *)&v169 + 1);
    uint64_t v86 = v169;
LABEL_101:
    uint64_t v30 = v158;
    goto LABEL_102;
  }
  uint64_t v161 = DerivedStorage;
  long long v31 = *(long long *)((char *)a3 + 24);
  v163[0] = *(long long *)((char *)a3 + 8);
  v163[1] = v31;
  long long v164 = *(long long *)((char *)a3 + 40);
  uint64_t v32 = *((void *)a3 + 8);
  *(void *)&long long v165 = *((void *)a3 + 7);
  long long v33 = *(long long *)((char *)a3 + 120);
  long long v34 = *(long long *)((char *)a3 + 152);
  long long v189 = *(long long *)((char *)a3 + 136);
  long long v190 = v34;
  *(void *)&long long v191 = *((void *)a3 + 21);
  long long v35 = *(long long *)((char *)a3 + 88);
  long long v185 = *(long long *)((char *)a3 + 72);
  long long v186 = v35;
  long long v187 = *(long long *)((char *)a3 + 104);
  long long v188 = v33;
  char v154 = *((unsigned char *)a3 + 176);
  char v36 = *((unsigned char *)a3 + 185);
  char v37 = *((unsigned char *)a3 + 186);
  uint64_t v157 = *(void *)((char *)a3 + 177);
  uint64_t v159 = *((void *)a3 + 25);
  *(void *)((char *)&v182 + 5) = *((void *)a3 + 24);
  *(void *)&long long v182 = *(void *)((char *)a3 + 187);
  uint64_t v38 = *((void *)a3 + 26);
  uint64_t v155 = *((void *)a3 + 27);
  uint64_t v160 = a1;
  uint64_t v39 = CMBaseObjectGetDerivedStorage();
  double v177 = 0.0;
  long long v175 = 0u;
  long long v176 = 0u;
  long long v174 = 0u;
  memset(v173, 0, sizeof(v173));
  uint64_t v172 = 0;
  long long v170 = 0u;
  long long v171 = 0u;
  long long v169 = 0u;
  memset(v168, 0, sizeof(v168));
  uint64_t v40 = *(void *)(v39 + 8);
  uint64_t v41 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v41) {
    uint64_t v42 = v41;
  }
  else {
    uint64_t v42 = 0;
  }
  CFRange v46 = *(uint64_t (**)(uint64_t, uint64_t, unsigned char *, _OWORD *))(v42 + 8);
  if (v46)
  {
    *(_OWORD *)&v178[8] = v163[0];
    *(_OWORD *)&v178[24] = v163[1];
    *(_OWORD *)&v178[40] = v164;
    *(_OWORD *)&v179[56] = v188;
    *(_OWORD *)&v179[72] = v189;
    *(_OWORD *)&v179[88] = v190;
    *(_OWORD *)&v179[8] = v185;
    *(_OWORD *)&v179[24] = v186;
    *(void *)int v178 = 7;
    *(void *)&v178[56] = v165;
    *(void *)uint64_t v179 = v32;
    *(void *)&v179[104] = v191;
    *(_OWORD *)&v179[40] = v187;
    v180[0] = v154;
    *(void *)&v180[1] = v157;
    v180[9] = v36;
    v180[10] = v37;
    *(void *)&v180[16] = *(void *)((char *)&v182 + 5);
    *(void *)&v180[11] = v182;
    *(void *)&v180[24] = v159;
    *(void *)&long long v181 = v38;
    *((void *)&v181 + 1) = v155;
    int v47 = v46(v40, a2, v178, v173);
  }
  else
  {
    int v47 = -12782;
  }
  unsigned int v48 = v47 + 17736;
  BOOL v49 = (v47 + 17736) < 0xFFFFFFFE;
  uint64_t FirstActiveTimestamp = FigNetworkHistoryGetFirstActiveTimestamp();
  int v51 = *(_DWORD *)(v39 + 64);
  if (v51 == 2 || v51 == 3 || v51 == 4)
  {
    uint64_t v52 = *(void *)(v39 + 56);
    *(void *)(v39 + 88) = v52;
  }
  else
  {
    uint64_t v52 = *(void *)(v39 + 88);
  }
  if (FirstActiveTimestamp <= v52) {
    uint64_t v56 = v52;
  }
  else {
    uint64_t v56 = FirstActiveTimestamp;
  }
  unint64_t v57 = a2 - v56;
  if (a2 - v56 < v32 && v48 <= 0xFFFFFFFD)
  {
    uint64_t v58 = *(void *)(v39 + 8);
    uint64_t v59 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v59) {
      uint64_t v60 = v59;
    }
    else {
      uint64_t v60 = 0;
    }
    long long v69 = *(unsigned int (**)(uint64_t, uint64_t, unsigned char *, _OWORD *))(v60 + 8);
    if (!v69) {
      goto LABEL_141;
    }
    *(_OWORD *)&v178[8] = v163[0];
    *(_OWORD *)&v178[24] = v163[1];
    *(_OWORD *)&v178[40] = v164;
    *(_OWORD *)&v179[56] = v188;
    *(_OWORD *)&v179[72] = v189;
    *(_OWORD *)&v179[88] = v190;
    *(_OWORD *)&v179[8] = v185;
    *(_OWORD *)&v179[24] = v186;
    *(void *)int v178 = 7;
    *(void *)&v178[56] = v165;
    *(void *)uint64_t v179 = v32;
    *(void *)&v179[104] = v191;
    *(_OWORD *)&v179[40] = v187;
    v180[0] = v154;
    *(void *)&v180[1] = v157;
    v180[9] = 0;
    v180[10] = v49;
    *(void *)&v180[11] = v182;
    *(void *)&v180[16] = *(void *)((char *)&v182 + 5);
    *(void *)&v180[24] = v159;
    *(void *)&long long v181 = 0;
    *((void *)&v181 + 1) = v155;
    if (v69(v58, a2, v178, v173)) {
      goto LABEL_141;
    }
    char v65 = 0;
    uint64_t v56 = 0;
    unint64_t v70 = (unint64_t)(((((5 * v57) >> 8) & 0x7FFFFFFFFFFFFFLL) * (unsigned __int128)0x44B82FA09B5A53uLL) >> 64) >> 11;
    goto LABEL_122;
  }
  if (v57 <= 0xDF84757FFLL && v48 <= 0xFFFFFFFD)
  {
    uint64_t v61 = *(void *)(v39 + 8);
    uint64_t v62 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v62) {
      uint64_t v63 = v62;
    }
    else {
      uint64_t v63 = 0;
    }
    int v103 = *(unsigned int (**)(uint64_t, uint64_t, unsigned char *, _OWORD *))(v63 + 8);
    if (!v103) {
      goto LABEL_141;
    }
    *(_OWORD *)&v178[8] = v163[0];
    *(_OWORD *)&v178[24] = v163[1];
    *(_OWORD *)&v178[40] = v164;
    *(_OWORD *)&v179[56] = v188;
    *(_OWORD *)&v179[72] = v189;
    *(_OWORD *)&v179[88] = v190;
    *(_OWORD *)&v179[8] = v185;
    *(_OWORD *)&v179[24] = v186;
    *(void *)int v178 = 7;
    *(void *)&v178[56] = v165;
    *(void *)uint64_t v179 = v32;
    *(void *)&v179[104] = v191;
    *(_OWORD *)&v179[40] = v187;
    v180[0] = v154;
    *(void *)&v180[1] = v157;
    v180[9] = 0;
    v180[10] = v49;
    *(void *)&v180[11] = v182;
    *(void *)&v180[16] = *(void *)((char *)&v182 + 5);
    *(void *)&v180[24] = v159;
    *(void *)&long long v181 = v56;
    *((void *)&v181 + 1) = v155;
    if (v103(v61, a2, v178, v173)) {
      goto LABEL_141;
    }
    char v65 = 0;
    unint64_t v70 = v57 / 0x5F5E100;
LABEL_122:
    double v71 = (double)v70;
    goto LABEL_123;
  }
  if (v48 > 0xFFFFFFFD)
  {
    char v65 = 0;
    double v71 = 0.0;
  }
  else
  {
    uint64_t v64 = *(void *)(v39 + 96);
    if (v64 && (unint64_t)(a2 - v64) < 0x45D964B801)
    {
      char v65 = 0;
    }
    else
    {
      *(void *)(v39 + 96) = a2;
      char v65 = 1;
    }
    uint64_t v111 = *(void *)(v39 + 8);
    uint64_t v112 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v112) {
      uint64_t v113 = v112;
    }
    else {
      uint64_t v113 = 0;
    }
    uint64_t v114 = *(unsigned int (**)(uint64_t, uint64_t, unsigned char *, _OWORD *))(v113 + 8);
    if (!v114) {
      goto LABEL_141;
    }
    *(_OWORD *)&v178[8] = v163[0];
    *(_OWORD *)&v178[24] = v163[1];
    *(_OWORD *)&v178[40] = v164;
    *(_OWORD *)&v179[56] = v188;
    *(_OWORD *)&v179[72] = v189;
    *(_OWORD *)&v179[88] = v190;
    *(_OWORD *)&v179[8] = v185;
    *(_OWORD *)&v179[24] = v186;
    *(void *)int v178 = 7;
    *(void *)&v178[56] = v165;
    *(void *)uint64_t v179 = v32;
    *(void *)&v179[104] = v191;
    *(_OWORD *)&v179[40] = v187;
    v180[0] = v154;
    *(void *)&v180[1] = v157;
    v180[9] = v65;
    v180[10] = v49;
    *(void *)&v180[16] = *(void *)((char *)&v182 + 5);
    *(void *)&v180[11] = v182;
    *(void *)&v180[24] = v159;
    *(void *)&long long v181 = v56;
    *((void *)&v181 + 1) = v155;
    if (v114(v111, a2, v178, v173)) {
      goto LABEL_141;
    }
    double v71 = (double)((unint64_t)(((((5 * v57) >> 8) & 0x7FFFFFFFFFFFFFLL) * (unsigned __int128)0x44B82FA09B5A53uLL) >> 64) >> 11);
    uint64_t v159 = v176;
  }
LABEL_123:
  uint64_t v104 = *(void *)(v39 + 24);
  uint64_t v105 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v105) {
    uint64_t v106 = v105;
  }
  else {
    uint64_t v106 = 0;
  }
  int v107 = *(unsigned int (**)(uint64_t, uint64_t, unsigned char *, _OWORD *))(v106 + 8);
  if (!v107) {
    goto LABEL_141;
  }
  *(_OWORD *)&v178[8] = v163[0];
  *(_OWORD *)&v178[24] = v163[1];
  *(_OWORD *)&v178[40] = v164;
  *(_OWORD *)&v179[56] = v188;
  *(_OWORD *)&v179[72] = v189;
  *(_OWORD *)&v179[88] = v190;
  *(_OWORD *)&v179[8] = v185;
  *(_OWORD *)&v179[24] = v186;
  *(void *)int v178 = 7;
  *(void *)&v178[56] = v165;
  *(void *)uint64_t v179 = v32;
  *(void *)&v179[104] = v191;
  *(_OWORD *)&v179[40] = v187;
  v180[0] = 1;
  *(void *)&v180[1] = v157;
  v180[9] = v65;
  v180[10] = v49;
  *(void *)&v180[11] = v182;
  *(void *)&v180[16] = *(void *)((char *)&v182 + 5);
  *(void *)&v180[24] = v159;
  *(void *)&long long v181 = v56;
  *((void *)&v181 + 1) = v155;
  if (v107(v104, a2, v178, v168))
  {
LABEL_141:
    long long v115 = a3[11];
    *(_OWORD *)&v179[96] = a3[10];
    *(_OWORD *)uint64_t v180 = v115;
    long long v116 = a3[13];
    *(_OWORD *)&v180[16] = a3[12];
    long long v181 = v116;
    long long v117 = a3[7];
    *(_OWORD *)&v179[32] = a3[6];
    *(_OWORD *)&v179[48] = v117;
    long long v118 = a3[9];
    *(_OWORD *)&v179[64] = a3[8];
    *(_OWORD *)&v179[80] = v118;
    long long v119 = a3[3];
    *(_OWORD *)&v178[32] = a3[2];
    *(_OWORD *)&v178[48] = v119;
    long long v120 = a3[5];
    *(_OWORD *)uint64_t v179 = a3[4];
    *(_OWORD *)&v179[16] = v120;
    long long v121 = a3[1];
    *(_OWORD *)int v178 = *a3;
    *(_OWORD *)&v178[16] = v121;
    uint64_t v30 = fnpa_makeHeuristicPrediction(v160, a2, (long long *)v178, a4);
    goto LABEL_142;
  }
  uint64_t v108 = *(void *)&v168[0];
  if (!*(void *)&v168[0] || *((double *)v168 + 1) == 2.22044605e-16)
  {
    double v110 = 0.0;
    double v109 = v177;
  }
  else
  {
    double v109 = v177;
    if (*((double *)v168 + 1) != 1.0 || v177 == 0.0) {
      double v110 = 1.0 / *((double *)v168 + 1);
    }
    else {
      double v110 = v177;
    }
  }
  uint64_t DerivedStorage = v161;
  uint64_t v123 = *((void *)&v176 + 1);
  uint64_t v124 = (uint64_t)((v110 * (double)*(uint64_t *)&v168[0] + v71 * v109 * (double)*((uint64_t *)&v176 + 1))
                 / (v110 + v71 * v109));
  *(void *)a4 = v124;
  *(_OWORD *)(a4 + 8) = 0u;
  *(_OWORD *)(a4 + 24) = 0u;
  *(_OWORD *)(a4 + 40) = 0u;
  *(_OWORD *)(a4 + 56) = 0u;
  *(_OWORD *)(a4 + 72) = 0u;
  uint64_t v125 = *(void *)(v39 + 80);
  if (v125)
  {
    uint64_t v126 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v126) {
      uint64_t v127 = v126;
    }
    else {
      uint64_t v127 = 0;
    }
    uint64_t v128 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v127 + 40);
    if (v128) {
      v128(v125, 0x1EE582BB8, 0x1EE5862B8, (uint64_t)v71);
    }
    uint64_t v129 = *(void *)(v39 + 80);
    if (v129)
    {
      uint64_t v130 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v130) {
        uint64_t v131 = v130;
      }
      else {
        uint64_t v131 = 0;
      }
      uint64_t v132 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v131 + 40);
      if (v132) {
        v132(v129, 0x1EE582BB8, 0x1EE5862D8, v123);
      }
      uint64_t v133 = *(void *)(v39 + 80);
      if (v133)
      {
        uint64_t v134 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v134) {
          uint64_t v135 = v134;
        }
        else {
          uint64_t v135 = 0;
        }
        v136 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v135 + 40);
        if (v136) {
          v136(v133, 0x1EE582BB8, 0x1EE5862F8, (uint64_t)v109);
        }
        uint64_t v137 = *(void *)(v39 + 80);
        if (v137)
        {
          uint64_t v138 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v138) {
            uint64_t v139 = v138;
          }
          else {
            uint64_t v139 = 0;
          }
          uint64_t v140 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v139 + 40);
          if (v140) {
            v140(v137, 0x1EE582BB8, 0x1EE586318, v108);
          }
          uint64_t v141 = *(void *)(v39 + 80);
          if (v141)
          {
            uint64_t v142 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v142) {
              uint64_t v143 = v142;
            }
            else {
              uint64_t v143 = 0;
            }
            uint64_t v144 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v143 + 40);
            if (v144) {
              v144(v141, 0x1EE582BB8, 0x1EE586338, (uint64_t)v110);
            }
            uint64_t v145 = *(void *)(v39 + 80);
            if (v145)
            {
              uint64_t v146 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v146) {
                uint64_t v147 = v146;
              }
              else {
                uint64_t v147 = 0;
              }
              int v148 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v147 + 40);
              if (v148) {
                v148(v145, 0x1EE582BB8, 0x1EE586358, v124);
              }
              uint64_t v149 = *(void *)(v39 + 80);
              if (v149)
              {
                uint64_t v150 = v176;
                uint64_t v151 = *(void *)(CMBaseObjectGetVTable() + 16);
                uint64_t v152 = v151 ? v151 : 0;
                uint64_t v153 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v152 + 40);
                if (v153) {
                  v153(v149, 0x1EE582BB8, 0x1EE586378, v150);
                }
              }
            }
          }
        }
      }
    }
  }
  uint64_t v30 = 0;
LABEL_143:
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 40));
  return v30;
}

uint64_t fnpa_makeHeuristicPrediction(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v8 = 16;
  if ((*((void *)a3 + 21) & 4) == 0) {
    uint64_t v8 = 8;
  }
  uint64_t v9 = *(void *)(DerivedStorage + v8);
  long long v24 = a3[10];
  long long v25 = a3[11];
  long long v26 = a3[12];
  long long v27 = a3[13];
  long long v20 = a3[6];
  long long v21 = a3[7];
  long long v22 = a3[8];
  long long v23 = a3[9];
  long long v16 = a3[2];
  long long v17 = a3[3];
  long long v18 = a3[4];
  long long v19 = a3[5];
  long long v14 = *a3;
  long long v15 = a3[1];
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  long long v12 = *(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(v11 + 8);
  if (!v12) {
    return 4294954514;
  }
  v28[10] = v24;
  v28[11] = v25;
  v28[12] = v26;
  v28[13] = v27;
  v28[6] = v20;
  v28[7] = v21;
  v28[8] = v22;
  v28[9] = v23;
  v28[2] = v16;
  v28[3] = v17;
  v28[4] = v18;
  v28[5] = v19;
  v28[0] = v14;
  v28[1] = v15;
  return v12(v9, a2, v28, a4);
}

uint64_t FigCSSTokenGetTypeID()
{
  return sFigCSSTokenID;
}

uint64_t figCSSTokenRegisterFigCSSToken()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sFigCSSTokenID = result;
  return result;
}

uint64_t FigCSSTokenGetTokenType(uint64_t a1, _DWORD *a2)
{
  if (!a2) {
    return FigSignalErrorAt();
  }
  *a2 = *(_DWORD *)(a1 + 16);
  return 0;
}

uint64_t FigCSSTokenCopyAttributes(uint64_t a1, void *a2)
{
  if (a2)
  {
    CFTypeRef v4 = *(CFTypeRef *)(a1 + 32);
    if (v4) {
      CFTypeRef v4 = CFRetain(v4);
    }
    *a2 = v4;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigCSSBaseTokenCreate(uint64_t a1, int a2, uint64_t a3, uint64_t *a4)
{
  if (a4
    && (MEMORY[0x19970EE10](&FigCSSTokenGetTypeID_sRegisterFigCSSTokenOnce, figCSSTokenRegisterFigCSSToken),
        (uint64_t Instance = _CFRuntimeCreateInstance()) != 0))
  {
    uint64_t v7 = Instance;
    *(_DWORD *)(Instance + 16) = a2;
    *(void *)(Instance + 32) = FigCFDictionaryCreateMutableCopy();
    uint64_t v8 = FigCSSTokenMapTokenTypeToName(a2);
    if (v8) {
      uint64_t v8 = CFRetain(v8);
    }
    *(void *)(v7 + 24) = v8;
    *a4 = v7;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void *figCSSToken_Init(void *result)
{
  result[2] = 0;
  result[3] = 0;
  result[4] = 0;
  return result;
}

void figCSSToken_Finalize(uint64_t a1)
{
  *(_DWORD *)(a1 + 16) = 0;
  uint64_t v2 = *(const void **)(a1 + 32);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 32) = 0;
  }
  double v3 = *(const void **)(a1 + 24);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 24) = 0;
  }
}

CFStringRef figCSSToken_CopyFormattingDesc(uint64_t a1)
{
  if (FigCFDictionaryGetCount() <= 0)
  {
    double v3 = FigCSSTokenMapTokenTypeToName(*(_DWORD *)(a1 + 16));
  }
  else
  {
    uint64_t v2 = (const void *)FigCFCopyCompactDescription();
    double v3 = FigCSSTokenMapTokenTypeToName(*(_DWORD *)(a1 + 16));
    if (v2)
    {
      CFStringRef v4 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"FigCSSToken: <%p> %@ %@ attributesDict = <%p>", a1, v3, v2, *(void *)(a1 + 32));
      CFRelease(v2);
      return v4;
    }
  }
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"FigCSSToken: <%p> %@ attributesDict = <%p>", a1, v3, *(void *)(a1 + 32));
}

CFStringRef figCSSToken_CopyDebugDesc(uint64_t a1)
{
  if (FigCFDictionaryGetCount() <= 0)
  {
    double v3 = FigCSSTokenMapTokenTypeToName(*(_DWORD *)(a1 + 16));
  }
  else
  {
    uint64_t v2 = (const void *)FigCFCopyCompactDescription();
    double v3 = FigCSSTokenMapTokenTypeToName(*(_DWORD *)(a1 + 16));
    if (v2)
    {
      CFStringRef v4 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"FigCSSToken: <%p> %@ %@ attributesDict = <%p>", a1, v3, v2, *(void *)(a1 + 32));
      CFRelease(v2);
      return v4;
    }
  }
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"FigCSSToken: <%p> %@ attributesDict = <%p>", a1, v3, *(void *)(a1 + 32));
}

uint64_t FigReportingAgentOfflineAirPlayGetTypeID()
{
  if (FigReportingAgentOfflineAirPlayGetTypeID_sRegisterFigReportingAgentOfflineAirPlayTypeOnce != -1) {
    dispatch_once_f(&FigReportingAgentOfflineAirPlayGetTypeID_sRegisterFigReportingAgentOfflineAirPlayTypeOnce, 0, (dispatch_function_t)registerFigReportingAgentOfflineAirPlayType);
  }
  return sFigReportingAgentOfflineAirPlayID;
}

uint64_t registerFigReportingAgentOfflineAirPlayType()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sFigReportingAgentOfflineAirPlayID = result;
  return result;
}

uint64_t fraoa_CreateOfflineAirPlayReportingPayload(uint64_t a1, __CFDictionary **a2)
{
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  MutableCFArrayRef Copy = FigCFDictionaryCreateMutableCopy();
  if (MutableCopy)
  {
    uint64_t v5 = (__CFDictionary *)MutableCopy;
    if (a2)
    {
      for (uint64_t i = 0; i != 184; i += 8)
      {
        uint64_t v7 = *(const void **)((char *)&FigReportingAgentOffilineAirplay_RTCJSMetadataKeys + i);
        if (FigCFDictionaryGetValueIfPresent())
        {
          CFStringRef v8 = CFStringCreateWithFormat(v3, 0, @"%@%@", v7, @"_OA");
          if (!v8) {
            goto LABEL_10;
          }
          CFStringRef v9 = v8;
          CFDictionaryRemoveValue(v5, v7);
          FigCFDictionarySetValue();
          CFRelease(v9);
        }
      }
      uint64_t v10 = 0;
      *a2 = v5;
    }
    else
    {
LABEL_10:
      uint64_t v10 = FigSignalErrorAt();
      CFRelease(v5);
    }
    return v10;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigReportingAgentOfflineAirPlayIssueReportingEvent(uint64_t a1, uint64_t a2)
{
  CFTypeRef cf = 0;
  if (!FigCFDictionaryGetInt32IfPresent() || !FigCFDictionaryGetInt32IfPresent()) {
    return FigSignalErrorAt();
  }
  uint64_t OfflineAirPlayReportingPayload = fraoa_CreateOfflineAirPlayReportingPayload(a2, (__CFDictionary **)&cf);
  CFTypeRef v5 = cf;
  if (OfflineAirPlayReportingPayload)
  {
    uint64_t v6 = OfflineAirPlayReportingPayload;
    if (!cf) {
      return v6;
    }
    goto LABEL_5;
  }
  uint64_t v6 = FigRTCReportingSendMsgWithErrors(*(void *)(a1 + 16), 0, 0, (uint64_t)cf);
  CFTypeRef v5 = cf;
  if (cf) {
LABEL_5:
  }
    CFRelease(v5);
  return v6;
}

uint64_t FigReportingAgentOfflineAirPlayCreate(void *a1)
{
  uint32_t v2 = arc4random();
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFUUIDRef v4 = CFUUIDCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80]);
  if (!v4) {
    FigReportingAgentOfflineAirPlayCreate_cold_1();
  }
  CFUUIDRef v5 = v4;
  CFStringRef v6 = CFUUIDCreateString(v3, v4);
  if (v6)
  {
    CFStringRef v7 = v6;
    if (!a1) {
      goto LABEL_13;
    }
    if (FigReportingAgentOfflineAirPlayGetTypeID_sRegisterFigReportingAgentOfflineAirPlayTypeOnce != -1) {
      dispatch_once_f(&FigReportingAgentOfflineAirPlayGetTypeID_sRegisterFigReportingAgentOfflineAirPlayTypeOnce, 0, (dispatch_function_t)registerFigReportingAgentOfflineAirPlayType);
    }
    uint64_t Instance = _CFRuntimeCreateInstance();
    if (Instance)
    {
      CFStringRef v9 = (const void *)Instance;
      uint64_t v10 = FigRTCReportingCreate(v2, (uint64_t)v7, 5, @"OfflineAirPlay", @"com.apple.hlsjs.offline", 0, 0, 0, 1u, 0, (uint64_t *)(Instance + 16));
      if (v10) {
        CFRelease(v9);
      }
      else {
        *a1 = v9;
      }
    }
    else
    {
LABEL_13:
      uint64_t v10 = FigSignalErrorAt();
    }
    CFRelease(v5);
  }
  else
  {
    uint64_t v10 = FigSignalErrorAt();
    CFStringRef v7 = (CFStringRef)v5;
  }
  CFRelease(v7);
  return v10;
}

uint64_t FigReportingAgentOfflineAirPlay_Init(uint64_t result)
{
  *(void *)(result + 16) = 0;
  return result;
}

void FigReportingAgentOfflineAirPlay_Finalize(uint64_t a1)
{
  uint32_t v2 = *(const void **)(a1 + 16);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 16) = 0;
  }
}

CFStringRef FigReportingAgentOfflineAirPlay_CopyFormattingDescription(const void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, @"<FigReportingAgentOfflineAirPlayRef %p>", a1);
}

CFStringRef FigReportingAgentOfflineAirPlay_CopyDebugDescription(const void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, @"<FigReportingAgentOfflineAirPlayRef %p>", a1);
}

uint64_t FigPlayerResourceArbiterRegisterConsumer(uint64_t a1, const void *a2, int a3, uint64_t *a4)
{
  if (a1 && a4)
  {
    MEMORY[0x19970E290](*(void *)(a1 + 16));
    FigGetAllocatorForMedia();
    uint64_t UInt64 = (const void *)FigCFNumberCreateUInt64();
    if (UInt64)
    {
      ++*(void *)(a1 + 24);
      if (a2)
      {
        uint64_t v9 = 0;
        while (1)
        {
          CFArrayRef Count = *(const __CFArray **)(a1 + 32);
          if (Count) {
            CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
          }
          if (v9 >= (uint64_t)Count) {
            break;
          }
          FigCFArrayGetValueAtIndex();
          BytePtr = (void *)FigStorageRefGetBytePtr();
          ++v9;
          if (FigCFEqual()) {
            goto LABEL_16;
          }
        }
      }
      uint64_t v12 = FigStorageCreate();
      if (v12) {
        goto LABEL_32;
      }
      BytePtr = (void *)FigStorageRefGetBytePtr();
      if (a2) {
        CFTypeRef v13 = CFRetain(a2);
      }
      else {
        CFTypeRef v13 = 0;
      }
      void *BytePtr = v13;
      CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 32), 0);
LABEL_16:
      if (a3 == 1)
      {
        uint64_t v16 = BytePtr[2];
        long long v14 = (CFTypeRef *)(BytePtr + 2);
        if (!v16) {
          goto LABEL_22;
        }
      }
      else
      {
        if (a3)
        {
LABEL_23:
          *a4 = FigCFNumberGetUInt64();
          if (dword_1E9351788)
          {
            os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          uint64_t v18 = 0;
          goto LABEL_26;
        }
        uint64_t v15 = BytePtr[1];
        long long v14 = (CFTypeRef *)(BytePtr + 1);
        if (!v15)
        {
          uint64_t v12 = FigStorageCreate();
          if (!v12)
          {
            CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 40), UInt64, 0);
LABEL_22:
            *long long v14 = CFRetain(UInt64);
            goto LABEL_23;
          }
LABEL_32:
          uint64_t v18 = v12;
LABEL_26:
          MEMORY[0x19970E2B0](*(void *)(a1 + 16));
          goto LABEL_27;
        }
      }
    }
    uint64_t v12 = FigSignalErrorAt();
    goto LABEL_32;
  }
  uint64_t v18 = FigSignalErrorAt();
  uint64_t UInt64 = 0;
LABEL_27:
  if (UInt64) {
    CFRelease(UInt64);
  }
  return v18;
}

uint64_t FigPlayerResourceArbiterUnregisterConsumer(uint64_t a1)
{
  if (a1 && (FigGetAllocatorForMedia(), (uint64_t v2 = FigCFNumberCreateUInt64()) != 0))
  {
    CFAllocatorRef v3 = (const void *)v2;
    MEMORY[0x19970E290](*(void *)(a1 + 16));
    if (dword_1E9351788)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 40), v3);
    FigGetAllocatorForMedia();
    uint64_t UInt64 = (const void *)FigCFNumberCreateUInt64();
    for (CFIndex i = 0; ; ++i)
    {
      CFArrayRef Count = *(const __CFArray **)(a1 + 32);
      if (Count) {
        CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
      }
      if (i >= (uint64_t)Count) {
        goto LABEL_19;
      }
      FigCFArrayGetValueAtIndex();
      uint64_t BytePtr = FigStorageRefGetBytePtr();
      if (FigCFEqual())
      {
        uint64_t v9 = *(const void **)(BytePtr + 8);
        if (v9)
        {
          CFRelease(v9);
          *(void *)(BytePtr + 8) = 0;
        }
        goto LABEL_17;
      }
      if (FigCFEqual()) {
        break;
      }
    }
    uint64_t v10 = *(const void **)(BytePtr + 16);
    if (v10)
    {
      CFRelease(v10);
      *(void *)(BytePtr + 16) = 0;
    }
    if (!*(void *)(BytePtr + 8))
    {
LABEL_17:
      if (!*(void *)(BytePtr + 16)) {
        CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 32), i);
      }
    }
LABEL_19:
    if (UInt64) {
      CFRelease(UInt64);
    }
    int v11 = fpra_determineAndDistributeBudgetToConsumers(a1);
    MEMORY[0x19970E2B0](*(void *)(a1 + 16));
    if (v11)
    {
      CFStringRef v12 = CFCopyDescription((CFTypeRef)a1);
      if (dword_1E9351788)
      {
        CFTypeRef v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (v12) {
        CFRelease(v12);
      }
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
    }
    CFRelease(v3);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t fpra_determineAndDistributeBudgetToConsumers(uint64_t a1)
{
  int64_t Count = FigCFDictionaryGetCount();
  if (Count < 1)
  {
    CFUUIDRef v4 = 0;
    goto LABEL_11;
  }
  int64_t v3 = Count;
  CFUUIDRef v4 = (const void **)malloc_type_calloc(Count, 8uLL, 0x6004044C4A2DFuLL);
  if (!v4)
  {
LABEL_11:
    uint64_t v5 = 0;
    goto LABEL_5;
  }
  CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(a1 + 40), v4, 0);
  uint64_t v5 = 0;
  for (uint64_t i = 0; i != v3; ++i)
  {
    ConsumerInfoFromConsumerCFNumber = fpra_getConsumerInfoFromConsumerCFNumber(a1, v4[i]);
    v5 += fpra_isActiveConsumer((uint64_t)ConsumerInfoFromConsumerCFNumber);
  }
LABEL_5:
  free(v4);
  long long v12 = 0u;
  long long v13 = 0u;
  long long v11 = 0u;
  uint64_t context = a1;
  if (v5 >= 1)
  {
    uint64_t v8 = *(void *)(a1 + 48);
    if (v8 != -1)
    {
      *(void *)&long long v12 = v8 - *(void *)(a1 + 56) * (v5 - 1);
      *((void *)&v12 + 1) = v12;
      CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 40), (CFDictionaryApplierFunction)fpra_firstPassToAllocateAndSumPlayerNeeds, &context);
      if (*((void *)&v11 + 1))
      {
        fpra_allocateBudgetToConsumerByWeight((uint64_t)&context, *((uint64_t **)&v11 + 1), 1.0);
        *(void *)&long long v12 = v12 - *(void *)(*((void *)&v11 + 1) + 8);
        *(void *)&long long v13 = *((void *)&v13 + 1);
        CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 40), (CFDictionaryApplierFunction)fpra_secondPassAdjustRunningPixels, &context);
        CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 40), (CFDictionaryApplierFunction)fpra_allocateBudgetToEachConsumerByWeight, &context);
      }
    }
  }
  return v11;
}

uint64_t FigPlayerResourceArbiterSetSpecifierForConsumer(void *a1, const void *a2, uint64_t a3)
{
  if (a1)
  {
    MEMORY[0x19970E290](a1[2]);
    uint64_t PrimaryConsumer = fpra_getPrimaryConsumer((uint64_t)a1, a3);
    ConsumerInfo = fpra_getConsumerInfo((uint64_t)a1);
    if (ConsumerInfo)
    {
      if (PrimaryConsumer == a3)
      {
        uint64_t v8 = (const void *)ConsumerInfo[2];
        ConsumerInfo[2] = a2;
        if (a2) {
          CFRetain(a2);
        }
        if (v8) {
          CFRelease(v8);
        }
      }
      if (a2) {
        FigPlayerResourceArbiterPlayerSpecifierMarkAsImmutable((uint64_t)a2);
      }
      int v9 = fpra_determineAndDistributeBudgetToConsumers((uint64_t)a1);
      MEMORY[0x19970E2B0](a1[2]);
      if (v9)
      {
        CFStringRef v10 = CFCopyDescription(a1);
        if (dword_1E9351788)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if (v10) {
          CFRelease(v10);
        }
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterPostNotification();
      }
      return 0;
    }
    else
    {
      uint64_t v13 = FigSignalErrorAt();
      MEMORY[0x19970E2B0](a1[2]);
      return v13;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t fpra_getPrimaryConsumer(uint64_t a1, uint64_t a2)
{
  FigGetAllocatorForMedia();
  uint64_t UInt64 = (const void *)FigCFNumberCreateUInt64();
  uint64_t v5 = 0;
  while (1)
  {
    CFArrayRef Count = *(const __CFArray **)(a1 + 32);
    if (Count) {
      CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
    }
    if (v5 >= (uint64_t)Count) {
      break;
    }
    FigCFArrayGetValueAtIndex();
    FigStorageRefGetBytePtr();
    if (!FigCFEqual())
    {
      ++v5;
      if (!FigCFEqual()) {
        continue;
      }
    }
    a2 = FigCFNumberGetUInt64();
    break;
  }
  if (UInt64) {
    CFRelease(UInt64);
  }
  return a2;
}

const void *fpra_getConsumerInfo(uint64_t a1)
{
  FigGetAllocatorForMedia();
  uint64_t result = (const void *)FigCFNumberCreateUInt64();
  if (result)
  {
    int64_t v3 = result;
    ConsumerInfoFromConsumerCFNumber = fpra_getConsumerInfoFromConsumerCFNumber(a1, result);
    CFRelease(v3);
    return ConsumerInfoFromConsumerCFNumber;
  }
  return result;
}

uint64_t FigPlayerResourceArbiterGetBudgetForConsumer(uint64_t a1, uint64_t a2, void *a3)
{
  if (a1 && a3)
  {
    MEMORY[0x19970E290](*(void *)(a1 + 16));
    fpra_getPrimaryConsumer(a1, a2);
    ConsumerInfo = fpra_getConsumerInfo(a1);
    if (ConsumerInfo)
    {
      uint64_t v7 = 0;
      *a3 = ConsumerInfo[1];
    }
    else
    {
      uint64_t v7 = FigSignalErrorAt();
    }
    MEMORY[0x19970E2B0](*(void *)(a1 + 16));
    return v7;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigPlayerResourceArbiterGetGlobalSingleton(void *a1)
{
  if (a1)
  {
    if (FigPlayerResourceArbiterGetGlobalSingleton_sFigPlayerResourceAribtratorSetupOnce != -1) {
      dispatch_once_f(&FigPlayerResourceArbiterGetGlobalSingleton_sFigPlayerResourceAribtratorSetupOnce, &FigPlayerResourceArbiterGetGlobalSingleton_globalResourceArbiterRec, (dispatch_function_t)fpra_getGlobalSingleton);
    }
    *a1 = FigPlayerResourceArbiterGetGlobalSingleton_globalResourceArbiterRec;
    return dword_1E93507B8;
  }
  else
  {
    uint64_t result = FigSignalErrorAt();
    dword_1E93507B8 = result;
  }
  return result;
}

uint64_t fpra_getGlobalSingleton(uint64_t a1)
{
  uint64_t CFPreferenceLongNumberWithDefault = FigGetCFPreferenceLongNumberWithDefault();
  uint64_t v3 = FigGetCFPreferenceLongNumberWithDefault();
  uint64_t result = FigPlayerResourceArbiterCreateForTestOnly(CFPreferenceLongNumberWithDefault, v3, (void *)a1);
  *(_DWORD *)(a1 + 8) = result;
  return result;
}

uint64_t FigPlayerResourceArbiterCreateForTestOnly(uint64_t a1, uint64_t a2, void *a3)
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (a3
    && (FigGetAllocatorForMedia(),
        MEMORY[0x19970EE10](&FigPlayerResourceArbiterGetTypeID_sFigPlayerResourceArbiterRegisterOnce, FigPlayerResourceArbiter_initOnce_0), (uint64_t Instance = _CFRuntimeCreateInstance()) != 0))
  {
    uint64_t v7 = (void *)Instance;
    uint64_t v8 = FigReentrantMutexCreate();
    v7[2] = v8;
    if (v8
      && (v7[3] = 0,
          CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia(),
          CFMutableArrayRef Mutable = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D510]),
          (v7[4] = Mutable) != 0)
      && (CFAllocatorRef v11 = (const __CFAllocator *)FigGetAllocatorForMedia(),
          CFMutableDictionaryRef v12 = CFDictionaryCreateMutable(v11, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]),
          (v7[5] = v12) != 0))
    {
      void v7[6] = a1;
      v7[7] = a2;
      CFStringRef v13 = CFCopyDescription(v7);
      if (dword_1E9351788)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      *a3 = v7;
      if (v13) {
        CFRelease(v13);
      }
      return 0;
    }
    else
    {
      uint64_t v16 = FigSignalErrorAt();
      CFRelease(v7);
      return v16;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void groupInfoDeallocateCallback(uint64_t a1)
{
  uint64_t v2 = *(const void **)a1;
  if (v2)
  {
    CFRelease(v2);
    *(void *)a1 = 0;
  }
  uint64_t v3 = *(const void **)(a1 + 8);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 8) = 0;
  }
  CFUUIDRef v4 = *(const void **)(a1 + 16);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 16) = 0;
  }
}

void consumerInfoDeallocateCallback(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 16);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 16) = 0;
  }
}

unint64_t fpra_firstPassToAllocateAndSumPlayerNeeds(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t BytePtr = (void *)FigStorageRefGetBytePtr();
  unint64_t result = fpra_isActiveConsumer((uint64_t)BytePtr);
  if (result)
  {
    unint64_t v6 = fpra_consumerInfoMaxPixelsNeeded((uint64_t)BytePtr);
    double ResolutionFloor = FigPlayerResourceArbiterPlayerSpecifierGetResolutionFloor(BytePtr[2]);
    unint64_t v9 = (unint64_t)(ResolutionFloor * v8);
    void *BytePtr = BytePtr[1];
    *(int64x2_t *)(a3 + 40) = vaddq_s64(*(int64x2_t *)(a3 + 40), vdupq_n_s64(v6));
    BytePtr[1] = v9;
    *(void *)(a3 + 32) -= v9;
    unint64_t result = *(void *)(a3 + 16);
    if (!result || (unint64_t result = fpra_consumerInfoMaxPixelsNeeded(result), v6 > result)) {
      *(void *)(a3 + 16) = BytePtr;
    }
  }
  return result;
}

unint64_t fpra_allocateBudgetToConsumerByWeight(uint64_t a1, uint64_t *a2, float a3)
{
  unint64_t result = fpra_consumerInfoAdjustedPixelsNeeded((void *)a1, (uint64_t)a2);
  unint64_t v7 = *(void *)(a1 + 32);
  float v8 = (float)v7 * a3;
  if (v8 >= (float)result) {
    float v8 = (float)result;
  }
  uint64_t v9 = *a2;
  unint64_t v10 = a2[1] + (unint64_t)v8;
  if (v10 <= 1) {
    unint64_t v10 = 1;
  }
  a2[1] = v10;
  if (v9 != v10) {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)(a1 + 48) -= result;
  *(void *)(a1 + 32) = v7 - (unint64_t)v8;
  return result;
}

unint64_t fpra_secondPassAdjustRunningPixels(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t BytePtr = FigStorageRefGetBytePtr();
  unint64_t result = fpra_isActiveConsumer(BytePtr);
  if (result)
  {
    if (BytePtr != a3[2])
    {
      uint64_t v6 = fpra_consumerInfoMaxPixelsNeeded(BytePtr);
      unint64_t result = fpra_consumerInfoAdjustedPixelsNeeded(a3, BytePtr);
      a3[6] += result - v6;
    }
  }
  return result;
}

unint64_t fpra_allocateBudgetToEachConsumerByWeight(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t BytePtr = (uint64_t *)FigStorageRefGetBytePtr();
  unint64_t result = fpra_isActiveConsumer((uint64_t)BytePtr);
  if (result && BytePtr != (uint64_t *)a3[2])
  {
    float v6 = (float)fpra_consumerInfoAdjustedPixelsNeeded(a3, (uint64_t)BytePtr) / (float)(unint64_t)a3[6];
    return fpra_allocateBudgetToConsumerByWeight((uint64_t)a3, BytePtr, v6);
  }
  return result;
}

const void *fpra_getConsumerInfoFromConsumerCFNumber(uint64_t a1, const void *a2)
{
  unint64_t result = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), a2);
  if (result)
  {
    return (const void *)FigStorageRefGetBytePtr();
  }
  return result;
}

uint64_t fpra_isActiveConsumer(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result)
  {
    FigPlayerResourceArbiterPlayerSpecifierGetPlayerRole(result);
    return FigCFEqual() == 0;
  }
  return result;
}

uint64_t fpra_consumerInfoMaxPixelsNeeded(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result)
  {
    double DisplaySize = FigPlayerResourceArbiterPlayerSpecifierGetDisplaySize(result);
    unint64_t v5 = (unint64_t)(DisplaySize * v4);
    double ResolutionCeiling = FigPlayerResourceArbiterPlayerSpecifierGetResolutionCeiling(*(void *)(a1 + 16));
    unint64_t v8 = (unint64_t)(ResolutionCeiling * v7);
    double ResolutionFloor = FigPlayerResourceArbiterPlayerSpecifierGetResolutionFloor(*(void *)(a1 + 16));
    double v11 = ResolutionFloor * v10;
    if (v8 >= v5) {
      unint64_t v12 = v5;
    }
    else {
      unint64_t v12 = v8;
    }
    if (!v5) {
      unint64_t v12 = v8;
    }
    if (v12 <= (unint64_t)v11) {
      return (unint64_t)v11;
    }
    else {
      return v12;
    }
  }
  return result;
}

unint64_t fpra_consumerInfoAdjustedPixelsNeeded(void *a1, uint64_t a2)
{
  uint64_t v4 = fpra_consumerInfoMaxPixelsNeeded(a2);
  if (a1[2] == a2)
  {
    float v5 = 1.0;
    if (v4)
    {
LABEL_5:
      float v6 = (float)*(unint64_t *)(a2 + 8) / (float)(unint64_t)v4;
      goto LABEL_8;
    }
  }
  else
  {
    float v5 = (float)(unint64_t)a1[5] / (float)(unint64_t)a1[3];
    if (v5 < 1.0) {
      float v5 = 1.0;
    }
    if (v4) {
      goto LABEL_5;
    }
  }
  float v6 = 0.0;
LABEL_8:
  float v7 = v5 * v6;
  double v8 = 1.0 - v7;
  BOOL v9 = v7 < 1.0;
  double v10 = 0.0;
  if (v9) {
    double v10 = v8;
  }
  return (unint64_t)(v10 * (double)(unint64_t)v4);
}

uint64_t FigPlayerResourceArbiter_initOnce_0()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sFigPlayerResourceArbiterID = result;
  return result;
}

double fpra_init(_OWORD *a1)
{
  double result = 0.0;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[1] = 0u;
  return result;
}

void fpra_finalize(uint64_t a1)
{
  FigSimpleMutexDestroy();
  uint64_t v2 = *(const void **)(a1 + 32);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 32) = 0;
  }
  uint64_t v3 = *(const void **)(a1 + 40);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 40) = 0;
  }
}

__CFString *fpra_copyFormattingDesc(uint64_t a1)
{
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFMutableArrayRef Mutable = CFStringCreateMutable(AllocatorForMedia, 0);
  MEMORY[0x19970E290](*(void *)(a1 + 16));
  int64_t Count = FigCFDictionaryGetCount();
  CFStringAppendFormat(Mutable, 0, @"%p: [Budget: %llu] [StepCost: %llu] {", a1, *(void *)(a1 + 48), *(void *)(a1 + 56));
  if (Count < 1)
  {
    float v5 = 0;
  }
  else
  {
    float v5 = (const void **)malloc_type_calloc(Count, 8uLL, 0x6004044C4A2DFuLL);
    if (v5)
    {
      CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(a1 + 40), v5, 0);
      for (uint64_t i = 0; i != Count; ++i)
      {
        ConsumerInfoFromConsumerCFNumber = fpra_getConsumerInfoFromConsumerCFNumber(a1, v5[i]);
        double v8 = (const void *)ConsumerInfoFromConsumerCFNumber[2];
        if (v8)
        {
          CFStringRef v9 = CFCopyDescription(v8);
          uint64_t UInt64 = FigCFNumberGetUInt64();
          CFStringAppendFormat(Mutable, 0, @"\n\t%lld: %@ [Budget: %llu]", UInt64, v9, ConsumerInfoFromConsumerCFNumber[1]);
          if (v9) {
            CFRelease(v9);
          }
        }
      }
    }
  }
  double v11 = (const void *)FigCFCopyCompactDescription();
  CFStringAppendFormat(Mutable, 0, @"\n Groups: %@", v11);
  CFStringAppendFormat(Mutable, 0, @"\n}");
  MEMORY[0x19970E2B0](*(void *)(a1 + 16));
  free(v5);
  if (v11) {
    CFRelease(v11);
  }
  return Mutable;
}

uint64_t FigPartialSampleTableGetTypeID()
{
  if (sRegisterFigPartialSampleTableTypeOnce != -1) {
    dispatch_once_f(&sRegisterFigPartialSampleTableTypeOnce, 0, (dispatch_function_t)fpst_registerFigPartialSampleTableType);
  }
  return sFigPartialSampleTableID;
}

uint64_t fpst_registerFigPartialSampleTableType()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sFigPartialSampleTableID = result;
  return result;
}

uint64_t FigPartialSampleTableTryAppendSampleInformation(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (!a1 || !*(void *)(a1 + 176) || !a2) {
    goto LABEL_166;
  }
  float v6 = *(uint64_t **)(a1 + 16);
  uint64_t v7 = v6[1];
  if (*(void *)(a1 + 160) <= 0x260uLL)
  {
    if (v7 > 0)
    {
      uint64_t result = 0;
LABEL_7:
      uint64_t v9 = 0;
      goto LABEL_163;
    }
LABEL_166:
    uint64_t result = FigSignalErrorAt();
    goto LABEL_7;
  }
  uint64_t v10 = *v6;
  if ((v10 & 8) != 0)
  {
    time1.CMTimeValue value = 0;
    double v11 = *(void **)(a1 + 216);
    if (!v11
      || (v12 = v11[1], uint64_t v13 = v7 - *v11, v14 = v11[2], *(void *)a2 != v12 + v14 * v13)
      || *(void *)(a2 + 8) != v14)
    {
      if (!*(void *)(a1 + 224))
      {
        uint64_t result = fpst_writing_reserveMemoryForChangeType((void *)a1, 1, 8uLL, (void **)(a1 + 224));
        if (result) {
          goto LABEL_7;
        }
      }
      uint64_t result = fpst_writing_reserveMemoryForChangeType((void *)a1, 1, 0x18uLL, (void **)&time1);
      if (result) {
        goto LABEL_7;
      }
      CMTimeValue value = time1.value;
      *(void *)time1.CMTimeValue value = v7;
      *(_OWORD *)(value + 8) = *(_OWORD *)a2;
      ++**(void **)(a1 + 224);
      *(void *)(a1 + 216) = value;
      uint64_t v10 = **(void **)(a1 + 16);
    }
  }
  if ((~(_BYTE)v10 & 0x18) == 0)
  {
    time1.CMTimeValue value = 0;
    uint64_t v16 = *(void *)(a1 + 256);
    if (!v16 || *(void *)(a2 + 24) && *(void *)(a2 + 16) - *(void *)a2 != *(void *)(v16 + 8))
    {
      if (!*(void *)(a1 + 264))
      {
        uint64_t result = fpst_writing_reserveMemoryForChangeType((void *)a1, 2, 8uLL, (void **)(a1 + 264));
        if (result) {
          goto LABEL_7;
        }
      }
      uint64_t result = fpst_writing_reserveMemoryForChangeType((void *)a1, 2, 0x10uLL, (void **)&time1);
      if (result) {
        goto LABEL_7;
      }
      CMTimeValue v17 = time1.value;
      *(void *)time1.CMTimeValue value = v7;
      *(void *)(v17 + 8) = *(void *)(a2 + 16) - *(void *)a2;
      ++**(void **)(a1 + 264);
      *(void *)(a1 + 256) = v17;
    }
    time1.CMTimeValue value = 0;
    uint64_t v18 = *(void *)(a1 + 296);
    if (!v18 || *(void *)(a2 + 24) != *(void *)(v18 + 8))
    {
      if (!*(void *)(a1 + 304))
      {
        uint64_t result = fpst_writing_reserveMemoryForChangeType((void *)a1, 3, 8uLL, (void **)(a1 + 304));
        if (result) {
          goto LABEL_7;
        }
      }
      uint64_t result = fpst_writing_reserveMemoryForChangeType((void *)a1, 3, 0x10uLL, (void **)&time1);
      if (result) {
        goto LABEL_7;
      }
      CMTimeValue v19 = time1.value;
      *(void *)time1.CMTimeValue value = v7;
      *(void *)(v19 + 8) = *(void *)(a2 + 24);
      ++**(void **)(a1 + 304);
      *(void *)(a1 + 296) = v19;
    }
    uint64_t v10 = **(void **)(a1 + 16);
  }
  if ((v10 & 4) != 0)
  {
    time1.CMTimeValue value = 0;
    uint64_t v20 = *(void *)(a1 + 456);
    if (!v20
      || *(unsigned __int8 *)(a2 + 58) != *(unsigned __int8 *)(v20 + 18)
      || *(unsigned __int8 *)(a2 + 56) != *(unsigned __int8 *)(v20 + 16)
      || *(unsigned __int8 *)(a2 + 57) != *(unsigned __int8 *)(v20 + 17)
      || *(void *)(a2 + 48) != *(void *)(v20 + 8)
      || *(void *)(a2 + 64) != *(void *)(v20 + 24) + v7 - *(void *)v20)
    {
      if (!*(void *)(a1 + 464))
      {
        uint64_t result = fpst_writing_reserveMemoryForChangeType((void *)a1, 7, 8uLL, (void **)(a1 + 464));
        if (result) {
          goto LABEL_7;
        }
      }
      uint64_t result = fpst_writing_reserveMemoryForChangeType((void *)a1, 7, 0x20uLL, (void **)&time1);
      if (result) {
        goto LABEL_7;
      }
      CMTimeValue v21 = time1.value;
      *(void *)time1.CMTimeValue value = v7;
      *(void *)(v21 + 24) = *(void *)(a2 + 64);
      *(_OWORD *)(v21 + 8) = *(_OWORD *)(a2 + 48);
      ++**(void **)(a1 + 464);
      *(void *)(a1 + 456) = v21;
    }
    time1.CMTimeValue value = 0;
    uint64_t v22 = *(void *)(a1 + 336);
    if (!v22 || *(void *)(a2 + 32) != *(void *)(v22 + 8) || *(void *)(a2 + 40) != *(void *)(v22 + 16))
    {
      if (!*(void *)(a1 + 344))
      {
        uint64_t result = fpst_writing_reserveMemoryForChangeType((void *)a1, 4, 8uLL, (void **)(a1 + 344));
        if (result) {
          goto LABEL_7;
        }
      }
      uint64_t result = fpst_writing_reserveMemoryForChangeType((void *)a1, 4, 0x18uLL, (void **)&time1);
      if (result) {
        goto LABEL_7;
      }
      CMTimeValue v23 = time1.value;
      *(void *)time1.CMTimeValue value = v7;
      *(_OWORD *)(v23 + 8) = *(_OWORD *)(a2 + 32);
      ++**(void **)(a1 + 344);
      *(void *)(a1 + 336) = v23;
    }
    uint64_t v10 = **(void **)(a1 + 16);
  }
  if ((v10 & 0xC) != 0)
  {
    if ((v10 & 0x40) != 0)
    {
      time1.CMTimeValue value = 0;
      uint64_t v26 = *(void *)(a1 + 376);
      if (!v26 || *(void *)(a2 + 72) != *(void *)(v26 + 8))
      {
        if (!*(void *)(a1 + 384))
        {
          uint64_t result = fpst_writing_reserveMemoryForChangeType((void *)a1, 5, 8uLL, (void **)(a1 + 384));
          if (result) {
            goto LABEL_7;
          }
        }
        uint64_t result = fpst_writing_reserveMemoryForChangeType((void *)a1, 5, 0x10uLL, (void **)&time1);
        if (result) {
          goto LABEL_7;
        }
        CMTimeValue v27 = time1.value;
        *(void *)time1.CMTimeValue value = v7;
        *(void *)(v27 + 8) = *(void *)(a2 + 72);
        ++**(void **)(a1 + 384);
        *(void *)(a1 + 376) = v27;
      }
    }
    else
    {
      time1.CMTimeValue value = 0;
      uint64_t v24 = *(void *)(a1 + 416);
      if (!v24 || *(void *)(a2 + 80) != *(void *)(v24 + 16) || *(void *)(a2 + 72) != *(void *)(v24 + 8))
      {
        if (!*(void *)(a1 + 424))
        {
          uint64_t result = fpst_writing_reserveMemoryForChangeType((void *)a1, 6, 8uLL, (void **)(a1 + 424));
          if (result) {
            goto LABEL_7;
          }
        }
        uint64_t result = fpst_writing_reserveMemoryForChangeType((void *)a1, 6, 0x18uLL, (void **)&time1);
        if (result) {
          goto LABEL_7;
        }
        CMTimeValue v25 = time1.value;
        *(void *)time1.CMTimeValue value = v7;
        *(void *)(v25 + 8) = *(void *)(a2 + 72);
        *(void *)(v25 + 16) = *(void *)(a2 + 80);
        ++**(void **)(a1 + 424);
        *(void *)(a1 + 416) = v25;
      }
    }
  }
  uint64_t v83 = 0;
  long long v28 = (CMTime *)MEMORY[0x1E4F1FA48];
  if ((*(unsigned char *)(a2 + 100) & 1) == 0 || (*(unsigned char *)(a2 + 148) & 1) == 0) {
    goto LABEL_167;
  }
  CFTypeID v29 = (_OWORD *)(a2 + 136);
  long long v81 = *MEMORY[0x1E4F1FA48];
  *(_OWORD *)&time1.CMTimeValue value = *MEMORY[0x1E4F1FA48];
  CMTimeEpoch v30 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
  time1.CMTimeEpoch epoch = v30;
  if (*(unsigned char *)(a2 + 220))
  {
    CMTime lhs = *(CMTime *)(a2 + 208);
    *(_OWORD *)&rhs.CMTimeValue value = *v29;
    rhs.CMTimeEpoch epoch = *(void *)(a2 + 152);
    CMTimeSubtract(&time1, &lhs, &rhs);
  }
  uint64_t v31 = *(void *)(a1 + 576);
  if (v31)
  {
    CMTime lhs = time1;
    CMTime rhs = *(CMTime *)(v31 + 32);
    if (!CMTimeCompare(&lhs, &rhs)) {
      goto LABEL_78;
    }
  }
  memset(&time1, 0, sizeof(time1));
  CMTimeMake(&time1, 0, *(_DWORD *)(a2 + 96));
  if (!*(void *)(a1 + 584))
  {
    uint64_t result = fpst_writing_reserveMemoryForChangeType((void *)a1, 10, 8uLL, (void **)(a1 + 584));
    if (result) {
      goto LABEL_77;
    }
  }
  uint64_t result = fpst_writing_reserveMemoryForChangeType((void *)a1, 10, 0x38uLL, (void **)&v83);
  if (result) {
    goto LABEL_77;
  }
  if (*(unsigned char *)(a2 + 220))
  {
    CMTime rhs = *(CMTime *)(a2 + 208);
    *(_OWORD *)&time2.CMTimeValue value = *v29;
    time2.CMTimeEpoch epoch = *(void *)(a2 + 152);
    CMTimeSubtract(&lhs, &rhs, &time2);
    CMTime time1 = lhs;
    *(_OWORD *)&rhs.CMTimeValue value = v81;
    rhs.CMTimeEpoch epoch = v30;
    if (CMTimeCompare(&lhs, &rhs) <= 0)
    {
LABEL_167:
      uint64_t result = FigSignalErrorAt();
      if (result) {
        goto LABEL_7;
      }
      goto LABEL_78;
    }
  }
  uint64_t result = 0;
  uint64_t v32 = v83;
  *uint64_t v83 = v7;
  uint64_t v33 = *(void *)(a2 + 152);
  *(_OWORD *)(v32 + 1) = *v29;
  v32[3] = v33;
  *(CMTime *)(v32 + 4) = time1;
  ++**(void **)(a1 + 584);
  *(void *)(a1 + 576) = v32;
LABEL_77:
  if (result) {
    goto LABEL_7;
  }
LABEL_78:
  rhs.CMTimeValue value = 0;
  if ((*(unsigned char *)(a2 + 100) & 1) == 0
    || (long long v34 = (_OWORD *)(a2 + 88), time1 = *(CMTime *)(a2 + 88), lhs = *v28, CMTimeCompare(&time1, &lhs) < 0))
  {
    uint64_t result = FigSignalErrorAt();
    if (result) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v35 = *(void *)(a1 + 616);
    if (!v35
      || (*(_OWORD *)&time1.CMTimeValue value = *v34,
          time1.CMTimeEpoch epoch = *(void *)(a2 + 104),
          long long v36 = *(_OWORD *)(v35 + 8),
          lhs.CMTimeEpoch epoch = *(void *)(v35 + 24),
          *(_OWORD *)&lhs.CMTimeValue value = v36,
          CMTimeCompare(&time1, &lhs)))
    {
      if (!*(void *)(a1 + 624))
      {
        uint64_t result = fpst_writing_reserveMemoryForChangeType((void *)a1, 11, 8uLL, (void **)(a1 + 624));
        if (result) {
          goto LABEL_7;
        }
      }
      uint64_t result = fpst_writing_reserveMemoryForChangeType((void *)a1, 11, 0x20uLL, (void **)&rhs);
      if (result) {
        goto LABEL_7;
      }
      CMTimeValue v37 = rhs.value;
      *(void *)rhs.CMTimeValue value = v7;
      uint64_t v38 = *(void *)(a2 + 104);
      *(_OWORD *)(v37 + 8) = *v34;
      *(void *)(v37 + 24) = v38;
      ++**(void **)(a1 + 624);
      *(void *)(a1 + 616) = v37;
    }
  }
  uint64_t v83 = 0;
  uint64_t v39 = (_OWORD *)(a2 + 136);
  if (*(unsigned char *)(a2 + 148) & 1) != 0 && (*(unsigned char *)(a2 + 124))
  {
    uint64_t v40 = (_OWORD *)(a2 + 112);
    memset(&time1, 0, sizeof(time1));
    CMTime lhs = *(CMTime *)(a2 + 112);
    *(_OWORD *)&rhs.CMTimeValue value = *v39;
    rhs.CMTimeEpoch epoch = *(void *)(a2 + 152);
    CMTimeSubtract(&time1, &lhs, &rhs);
    long long v82 = *MEMORY[0x1E4F1F9F8];
    *(_OWORD *)&lhs.CMTimeValue value = *MEMORY[0x1E4F1F9F8];
    CMTimeEpoch v41 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
    lhs.CMTimeEpoch epoch = v41;
    if (*(unsigned char *)(a2 + 244))
    {
      CMTime rhs = *(CMTime *)(a2 + 232);
      *(_OWORD *)&time2.CMTimeValue value = *v40;
      time2.CMTimeEpoch epoch = *(void *)(a2 + 128);
      CMTimeSubtract(&lhs, &rhs, &time2);
    }
    uint64_t v42 = *(void *)(a1 + 656);
    if (!v42
      || (CMTime rhs = time1,
          long long v43 = *(_OWORD *)(v42 + 8),
          time2.CMTimeEpoch epoch = *(void *)(v42 + 24),
          *(_OWORD *)&time2.CMTimeValue value = v43,
          CMTimeCompare(&rhs, &time2))
      || (uint64_t v44 = *(void *)(a1 + 656), rhs = lhs, time2 = *(CMTime *)(v44 + 32), CMTimeCompare(&rhs, &time2)))
    {
      if (!*(void *)(a1 + 664))
      {
        uint64_t result = fpst_writing_reserveMemoryForChangeType((void *)a1, 12, 8uLL, (void **)(a1 + 664));
        if (result) {
          goto LABEL_7;
        }
      }
      uint64_t result = fpst_writing_reserveMemoryForChangeType((void *)a1, 12, 0x38uLL, (void **)&v83);
      if (result) {
        goto LABEL_7;
      }
      uint64_t v45 = v83;
      *uint64_t v83 = v7;
      *(_OWORD *)&lhs.CMTimeValue value = *v40;
      lhs.CMTimeEpoch epoch = *(void *)(a2 + 128);
      *(_OWORD *)&rhs.CMTimeValue value = *v39;
      rhs.CMTimeEpoch epoch = *(void *)(a2 + 152);
      CMTimeSubtract(&time1, &lhs, &rhs);
      CMTimeEpoch epoch = time1.epoch;
      *(_OWORD *)(v45 + 1) = *(_OWORD *)&time1.value;
      v45[3] = epoch;
      v45[6] = v41;
      *((_OWORD *)v45 + 2) = v82;
      if (*(unsigned char *)(a2 + 244))
      {
        CMTime lhs = *(CMTime *)(a2 + 232);
        *(_OWORD *)&rhs.CMTimeValue value = *v40;
        rhs.CMTimeEpoch epoch = *(void *)(a2 + 128);
        CMTimeSubtract(&time1, &lhs, &rhs);
        *(CMTime *)(v45 + 4) = time1;
      }
      ++**(void **)(a1 + 664);
      *(void *)(a1 + 656) = v45;
    }
  }
  else
  {
    uint64_t result = FigSignalErrorAt();
    if (result) {
      goto LABEL_7;
    }
  }
  uint64_t v47 = **(void **)(a1 + 16);
  if ((v47 & 0x100) != 0)
  {
    rhs.CMTimeValue value = 0;
    uint64_t v48 = *(void *)(a1 + 776);
    if (!v48
      || (CMTime time1 = *(CMTime *)(a2 + 256),
          long long v49 = *(_OWORD *)(v48 + 8),
          lhs.CMTimeEpoch epoch = *(void *)(v48 + 24),
          *(_OWORD *)&lhs.CMTimeValue value = v49,
          CMTimeCompare(&time1, &lhs))
      || (uint64_t v50 = *(void *)(a1 + 776),
          CMTime time1 = *(CMTime *)(a2 + 280),
          CMTime lhs = *(CMTime *)(v50 + 32),
          CMTimeCompare(&time1, &lhs)))
    {
      if (!*(void *)(a1 + 784))
      {
        uint64_t result = fpst_writing_reserveMemoryForChangeType((void *)a1, 15, 8uLL, (void **)(a1 + 784));
        if (result) {
          goto LABEL_7;
        }
      }
      uint64_t result = fpst_writing_reserveMemoryForChangeType((void *)a1, 15, 0x38uLL, (void **)&rhs);
      if (result) {
        goto LABEL_7;
      }
      CMTimeValue v51 = rhs.value;
      uint64_t v52 = *(void *)(a2 + 272);
      *(_OWORD *)(rhs.value + 8) = *(_OWORD *)(a2 + 256);
      *(void *)(v51 + 24) = v52;
      uint64_t v53 = *(void *)(a2 + 296);
      *(_OWORD *)(v51 + 32) = *(_OWORD *)(a2 + 280);
      *(void *)(v51 + 48) = v53;
      *(void *)CMTimeValue v51 = v7;
      ++**(void **)(a1 + 784);
      *(void *)(a1 + 776) = v51;
    }
    uint64_t v47 = **(void **)(a1 + 16);
  }
  if ((v47 & 0x200) != 0)
  {
    rhs.CMTimeValue value = 0;
    uint64_t v54 = *(void *)(a1 + 816);
    if (!v54
      || (CMTime time1 = *(CMTime *)(a2 + 304),
          long long v55 = *(_OWORD *)(v54 + 8),
          lhs.CMTimeEpoch epoch = *(void *)(v54 + 24),
          *(_OWORD *)&lhs.CMTimeValue value = v55,
          CMTimeCompare(&time1, &lhs))
      || (uint64_t v56 = *(void *)(a1 + 816),
          CMTime time1 = *(CMTime *)(a2 + 328),
          CMTime lhs = *(CMTime *)(v56 + 32),
          CMTimeCompare(&time1, &lhs)))
    {
      if (!*(void *)(a1 + 824)
        && (LODWORD(result) = fpst_writing_reserveMemoryForChangeType((void *)a1, 16, 8uLL, (void **)(a1 + 824)),
            result)
        || (LODWORD(result) = fpst_writing_reserveMemoryForChangeType((void *)a1, 16, 0x38uLL, (void **)&rhs),
            result))
      {
        uint64_t result = result;
        if ((_BYTE)result) {
          goto LABEL_7;
        }
      }
      else
      {
        CMTimeValue v57 = rhs.value;
        uint64_t v58 = *(void *)(a2 + 320);
        *(_OWORD *)(rhs.value + 8) = *(_OWORD *)(a2 + 304);
        *(void *)(v57 + 24) = v58;
        uint64_t v59 = *(void *)(a2 + 344);
        *(_OWORD *)(v57 + 32) = *(_OWORD *)(a2 + 328);
        *(void *)(v57 + 48) = v59;
        *(void *)CMTimeValue v57 = v7;
        ++**(void **)(a1 + 824);
        *(void *)(a1 + 816) = v57;
      }
    }
  }
  uint64_t v60 = *(uint64_t **)(a1 + 16);
  uint64_t v61 = *v60;
  if ((*v60 & 0x80) != 0)
  {
    uint64_t v83 = 0;
    if (!*(void *)(a1 + 736)) {
      goto LABEL_178;
    }
    CMTime lhs = *(CMTime *)(a2 + 160);
    *(_OWORD *)&rhs.CMTimeValue value = *v39;
    rhs.CMTimeEpoch epoch = *(void *)(a2 + 152);
    CMTimeSubtract(&time1, &lhs, &rhs);
    uint64_t v62 = *(void *)(a1 + 736);
    long long v63 = *(_OWORD *)(v62 + 8);
    lhs.CMTimeEpoch epoch = *(void *)(v62 + 24);
    *(_OWORD *)&lhs.CMTimeValue value = v63;
    if (CMTimeCompare(&time1, &lhs)
      || (CMTime lhs = *(CMTime *)(a2 + 184),
          *(_OWORD *)&rhs.CMTimeValue value = *v39,
          rhs.CMTimeEpoch epoch = *(void *)(a2 + 152),
          CMTimeSubtract(&time2, &lhs, &rhs),
          CMTime lhs = *(CMTime *)(*(void *)(a1 + 736) + 32),
          CMTimeCompare(&time2, &lhs)))
    {
LABEL_178:
      if (!*(void *)(a1 + 744))
      {
        uint64_t result = fpst_writing_reserveMemoryForChangeType((void *)a1, 14, 8uLL, (void **)(a1 + 744));
        if (result) {
          goto LABEL_7;
        }
      }
      uint64_t result = fpst_writing_reserveMemoryForChangeType((void *)a1, 14, 0x38uLL, (void **)&v83);
      if (result) {
        goto LABEL_7;
      }
      uint64_t v64 = v83;
      *uint64_t v83 = v7;
      CMTime lhs = *(CMTime *)(a2 + 160);
      *(_OWORD *)&rhs.CMTimeValue value = *v39;
      rhs.CMTimeEpoch epoch = *(void *)(a2 + 152);
      CMTimeSubtract(&time1, &lhs, &rhs);
      CMTimeEpoch v65 = time1.epoch;
      *(_OWORD *)(v64 + 1) = *(_OWORD *)&time1.value;
      v64[3] = v65;
      CMTime lhs = *(CMTime *)(a2 + 184);
      *(_OWORD *)&rhs.CMTimeValue value = *v39;
      rhs.CMTimeEpoch epoch = *(void *)(a2 + 152);
      CMTimeSubtract(&time1, &lhs, &rhs);
      *(CMTime *)(v64 + 4) = time1;
      ++**(void **)(a1 + 744);
      *(void *)(a1 + 736) = v64;
    }
    uint64_t v60 = *(uint64_t **)(a1 + 16);
    uint64_t v61 = *v60;
  }
  if (v61)
  {
    time1.CMTimeValue value = 0;
    uint64_t v66 = *(void *)(a1 + 536);
    if (!v66 || *(void *)(a2 + 352) != *(void *)(v66 + 8))
    {
      if (!*(void *)(a1 + 544))
      {
        uint64_t result = fpst_writing_reserveMemoryForChangeType((void *)a1, 9, 8uLL, (void **)(a1 + 544));
        if (result) {
          goto LABEL_7;
        }
      }
      uint64_t result = fpst_writing_reserveMemoryForChangeType((void *)a1, 9, 0x18uLL, (void **)&time1);
      if (result) {
        goto LABEL_7;
      }
      CMTimeValue v67 = time1.value;
      *(void *)time1.CMTimeValue value = v7;
      *(void *)(v67 + 8) = *(void *)(a2 + 352);
      ++**(void **)(a1 + 544);
      *(void *)(a1 + 536) = v67;
      uint64_t v60 = *(uint64_t **)(a1 + 16);
    }
    uint64_t v61 = *v60;
  }
  if ((v61 & 2) != 0)
  {
    time1.CMTimeValue value = 0;
    uint64_t v68 = *(void *)(a1 + 496);
    if (!v68
      || ((int v69 = *(_DWORD *)(v68 + 8), v70 = *(unsigned __int16 *)(v68 + 12), *(_DWORD *)(a2 + 360) == v69)
        ? (BOOL v71 = *(unsigned __int16 *)(a2 + 364) == v70)
        : (BOOL v71 = 0),
          !v71))
    {
      if (!*(void *)(a1 + 504))
      {
        uint64_t result = fpst_writing_reserveMemoryForChangeType((void *)a1, 8, 8uLL, (void **)(a1 + 504));
        if (result) {
          goto LABEL_7;
        }
      }
      uint64_t result = fpst_writing_reserveMemoryForChangeType((void *)a1, 8, 0x10uLL, (void **)&time1);
      if (result) {
        goto LABEL_7;
      }
      CMTimeValue v72 = time1.value;
      *(void *)time1.CMTimeValue value = v7;
      __int16 v73 = *(_WORD *)(a2 + 364);
      *(_DWORD *)(v72 + 8) = *(_DWORD *)(a2 + 360);
      *(_WORD *)(v72 + 12) = v73;
      ++**(void **)(a1 + 504);
      *(void *)(a1 + 496) = v72;
      uint64_t v60 = *(uint64_t **)(a1 + 16);
    }
    uint64_t v61 = *v60;
  }
  if ((v61 & 0x20) != 0)
  {
    time1.CMTimeValue value = 0;
    uint64_t v74 = *(void *)(a1 + 696);
    if (!v74 || memcmp((const void *)(a2 + 366), (const void *)(v74 + 8), 0x28uLL))
    {
      if (!*(void *)(a1 + 704))
      {
        uint64_t result = fpst_writing_reserveMemoryForChangeType((void *)a1, 13, 8uLL, (void **)(a1 + 704));
        if (result) {
          goto LABEL_7;
        }
      }
      uint64_t result = fpst_writing_reserveMemoryForChangeType((void *)a1, 13, 0x30uLL, (void **)&time1);
      if (result) {
        goto LABEL_7;
      }
      CMTimeValue v75 = time1.value;
      *(void *)time1.CMTimeValue value = v7;
      uint64_t v76 = *(void *)(a2 + 398);
      long long v77 = *(_OWORD *)(a2 + 382);
      *(_OWORD *)(v75 + 8) = *(_OWORD *)(a2 + 366);
      *(_OWORD *)(v75 + 24) = v77;
      *(void *)(v75 + 40) = v76;
      ++**(void **)(a1 + 704);
      *(void *)(a1 + 696) = v75;
    }
  }
  time1.CMTimeValue value = 0;
  uint64_t v78 = *(void *)(a1 + 856);
  if (!v78 || *(void *)(a2 + 408) != *(void *)(v78 + 8))
  {
    if (!*(void *)(a1 + 864))
    {
      uint64_t result = fpst_writing_reserveMemoryForChangeType((void *)a1, 17, 8uLL, (void **)(a1 + 864));
      if (result) {
        goto LABEL_7;
      }
    }
    uint64_t result = fpst_writing_reserveMemoryForChangeType((void *)a1, 17, 0x10uLL, (void **)&time1);
    if (result) {
      goto LABEL_7;
    }
    CMTimeValue v79 = time1.value;
    *(void *)time1.CMTimeValue value = v7;
    *(void *)(v79 + 8) = *(void *)(a2 + 408);
    ++**(void **)(a1 + 864);
    *(void *)(a1 + 856) = v79;
  }
  long long v80 = *(void **)(a1 + 16);
  if ((*v80 & 7) == 4 && *(unsigned char *)(a2 + 58) && *(unsigned char *)(a2 + 56) && *(unsigned char *)(a2 + 57))
  {
    uint64_t result = 0;
    uint64_t v9 = *(void *)(a2 + 48) - *(void *)(a2 + 64);
    v80[1] += v9;
  }
  else
  {
    uint64_t result = 0;
    ++v80[1];
    uint64_t v9 = 1;
  }
LABEL_163:
  if (a3) {
    *a3 = v9;
  }
  return result;
}

uint64_t FigPartialSampleTableFinishWriting(uint64_t a1)
{
  if (!a1 || !*(void *)(a1 + 176))
  {
    return FigSignalErrorAt();
  }
  size_t v2 = *(void *)(a1 + 168);
  uint64_t v3 = *(void **)(a1 + 184);
  if (v3) {
    v2 += *v3;
  }
  uint64_t v4 = 0;
  uint64_t v5 = 16;
  while (1)
  {
    uint64_t v7 = (size_t *)(a1 + v4 + 192);
    size_t v6 = *v7;
    if (v7 == *(size_t **)(a1 + 184))
    {
      if (v6) {
        *(void *)(*(void *)(a1 + 16) + v5) = *(void *)(a1 + 168);
      }
      goto LABEL_14;
    }
    if (v6) {
      break;
    }
LABEL_14:
    v4 += 40;
    v5 += 8;
    if (v4 == 680) {
      goto LABEL_15;
    }
  }
  uint64_t destination = 0;
  size_t lengthAtOffsetOut = 0;
  if (*v7 <= CMBlockBufferGetDataLength(*(CMBlockBufferRef *)(a1 + v4 + 208)))
  {
    uint64_t result = CMBlockBufferGetDataPointer(*(CMBlockBufferRef *)(a1 + 176), v2, &lengthAtOffsetOut, 0, (char **)&destination);
    if (result) {
      return result;
    }
    uint64_t result = CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(a1 + v4 + 208), 0, *v7, destination);
    if (result) {
      return result;
    }
    *(void *)(*(void *)(a1 + 16) + v5) = v2;
    v2 += *v7;
    goto LABEL_14;
  }
  uint64_t result = FigSignalErrorAt();
  if (!result)
  {
LABEL_15:
    uint64_t result = 0;
    *(void *)(a1 + 24) = *(void *)(a1 + 176);
    *(void *)(a1 + 176) = 0;
  }
  return result;
}

uint64_t FigPartialSampleTableCreateForWriting(int a1, CMBlockBufferRef theBuffer, uint64_t a3, uint64_t *a4)
{
  size_t totalLengthOut = 0;
  dataPointerOut = 0;
  if (!a4 || !theBuffer)
  {
    return FigSignalErrorAt();
  }
  uint64_t DataPointer = CMBlockBufferAssureBlockMemory(theBuffer);
  if (DataPointer) {
    return DataPointer;
  }
  uint64_t DataPointer = CMBlockBufferGetDataPointer(theBuffer, 0, 0, &totalLengthOut, &dataPointerOut);
  if (DataPointer) {
    return DataPointer;
  }
  if ((dataPointerOut & 3) != 0 || !CMBlockBufferIsRangeContiguous(theBuffer, 0, totalLengthOut)) {
    return FigSignalErrorAt();
  }
  if (sRegisterFigPartialSampleTableTypeOnce != -1) {
    dispatch_once_f(&sRegisterFigPartialSampleTableTypeOnce, 0, (dispatch_function_t)fpst_registerFigPartialSampleTableType);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (!Instance) {
    return FigSignalErrorAt();
  }
  uint64_t v9 = Instance;
  *(void *)(Instance + 160) = totalLengthOut;
  *(void *)(Instance + 176) = theBuffer;
  CFRetain(theBuffer);
  uint64_t v10 = CMBlockBufferGetDataPointer(*(CMBlockBufferRef *)(v9 + 176), 0, 0, 0, (char **)(v9 + 16));
  if (v10) {
    goto LABEL_30;
  }
  uint64_t v11 = *(void *)(v9 + 16);
  *(void *)(v11 + 144) = 0;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 16) = 0u;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)uint64_t v11 = 0u;
  **(void **)(v9 + 16) = a3;
  *(void *)(v9 + 160) -= 152;
  *(void *)(v9 + 168) = 152;
  CFAllocatorRef v12 = CFGetAllocator((CFTypeRef)v9);
  CMBlockBufferRef blockBufferOut = 0;
  if (!*(void *)(v9 + 16))
  {
    uint64_t v10 = FigSignalErrorAt();
    if (!v10)
    {
LABEL_18:
      uint64_t v19 = 0;
      *a4 = v9;
      return v19;
    }
LABEL_30:
    uint64_t v19 = v10;
    goto LABEL_22;
  }
  CFAllocatorRef v13 = v12;
  uint64_t v14 = 0;
  char v15 = 1;
  while (1)
  {
    uint64_t v16 = v9 + v14;
    if (!v14) {
      break;
    }
    uint64_t v17 = fpst_sizeForChangeType(v15);
    *(void *)(v16 + 200) = 8;
    CMBlockBufferCreateWithMemoryBlock(v13, 0, 4 * v17 + 40, v13, 0, 0, 4 * v17 + 40, 0, &blockBufferOut);
LABEL_17:
    *(void *)(v9 + v14 + 208) = blockBufferOut;
    CMBlockBufferRef blockBufferOut = 0;
    ++v15;
    v14 += 40;
    if (v14 == 680) {
      goto LABEL_18;
    }
  }
  uint64_t v18 = CMBlockBufferCreateWithBufferReference(v13, *(CMBlockBufferRef *)(v9 + 176), *(void *)(v9 + 168), *(void *)(v9 + 160), 0, &blockBufferOut);
  if (!v18)
  {
    *(void *)(v9 + 184) = v16 + 192;
    goto LABEL_17;
  }
  uint64_t v19 = v18;
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
LABEL_22:
  CFRelease((CFTypeRef)v9);
  return v19;
}

uint64_t FigPartialSampleTableCreateFromBlockBufferUsingTranslationCallbacks(const __CFAllocator *a1, OpaqueCMBlockBuffer *a2, void *a3, const void *a4, uint64_t *a5)
{
  uint64_t v22 = 0;
  CMBlockBufferRef blockBufferOut = 0;
  if (!a5)
  {
    uint64_t v20 = FigSignalErrorAt();
    goto LABEL_24;
  }
  if (sRegisterFigPartialSampleTableTypeOnce != -1) {
    dispatch_once_f(&sRegisterFigPartialSampleTableTypeOnce, 0, (dispatch_function_t)fpst_registerFigPartialSampleTableType);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  DataCFIndex Length = CMBlockBufferGetDataLength(a2);
  if (CMBlockBufferIsRangeContiguous(a2, 0, DataLength))
  {
    CMBlockBufferRef blockBufferOut = a2;
    CFRetain(a2);
    goto LABEL_8;
  }
  size_t v12 = CMBlockBufferGetDataLength(a2);
  uint64_t DataPointer = CMBlockBufferCreateContiguous(a1, a2, a1, 0, 0, v12, 0, &blockBufferOut);
  if (!DataPointer)
  {
    a2 = blockBufferOut;
LABEL_8:
    uint64_t DataPointer = CMBlockBufferGetDataPointer(a2, 0, 0, 0, &v22);
    if (!DataPointer)
    {
      if ((v22 & 3) != 0)
      {
        uint64_t DataPointer = FigSignalErrorAt();
      }
      else
      {
        CMBlockBufferRef v14 = blockBufferOut;
        *(void *)(Instance + 16) = v22;
        *(void *)(Instance + 24) = v14;
        CFRetain(v14);
        if (a3)
        {
          if (a4) {
            CFTypeRef v15 = CFRetain(a4);
          }
          else {
            CFTypeRef v15 = 0;
          }
          *(void *)(Instance + 72) = v15;
          __copy_assignment_8_8_t0w8_pa0_7864_8_pa0_3127_16_pa0_23876_24_pa0_18371_32((void *)(Instance + 32), a3);
        }
        size_t v16 = CMBlockBufferGetDataLength(*(CMBlockBufferRef *)(Instance + 24));
        uint64_t v17 = *(void **)(Instance + 16);
        if ((uint64_t)v17[1] >= 1 && *v17 <= 0x3FFuLL)
        {
          uint64_t v18 = 2;
          while (1)
          {
            int64_t v19 = v17[v18];
            if (v19 < 0 || v19 > (uint64_t)(v16 - 9)) {
              break;
            }
            if (++v18 == 19) {
              goto LABEL_23;
            }
          }
        }
        uint64_t DataPointer = FigSignalErrorAt();
        if (!DataPointer)
        {
LABEL_23:
          uint64_t v20 = 0;
          *a5 = Instance;
          goto LABEL_24;
        }
      }
    }
  }
  uint64_t v20 = DataPointer;
  if (Instance) {
    CFRelease((CFTypeRef)Instance);
  }
LABEL_24:
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  return v20;
}

void *__copy_assignment_8_8_t0w8_pa0_7864_8_pa0_3127_16_pa0_23876_24_pa0_18371_32(void *result, void *a2)
{
  *uint64_t result = *a2;
  result[1] = a2[1];
  result[2] = a2[2];
  result[3] = a2[3];
  result[4] = a2[4];
  return result;
}

uint64_t FigPartialSampleTableCreateFromBlockBufferUsingOutOfBandObjectRegistry(const __CFAllocator *a1, OpaqueCMBlockBuffer *a2, const void *a3, uint64_t *a4)
{
  v5[0] = 0;
  v5[1] = fpst_outOfBandRegistry_copyByteStreamTranslatedFromOutOfBandID;
  v5[2] = fpst_outOfBandRegistry_copyDataSourceTranslatedFromOutOfBandID;
  v5[3] = fpst_outOfBandRegistry_copyFormatDescriptionTranslatedFromOutOfBandID;
  v5[4] = 0;
  return FigPartialSampleTableCreateFromBlockBufferUsingTranslationCallbacks(a1, a2, v5, a3, a4);
}

uint64_t fpst_outOfBandRegistry_copyByteStreamTranslatedFromOutOfBandID(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  CFTypeRef cf = 0;
  uint64_t v4 = FigPartialSampleTableOutOfBandObjectRegistryLookupAndRetainObjectForID(a1, @"ByteStream", a2, &cf);
  if (v4) {
    goto LABEL_7;
  }
  if (!cf || (CFTypeID v5 = CFGetTypeID(cf), v5 != CMByteStreamBaseGetTypeID()))
  {
    uint64_t v4 = FigSignalErrorAt();
LABEL_7:
    uint64_t v6 = v4;
    goto LABEL_8;
  }
  uint64_t v6 = 0;
  if (a3)
  {
    *a3 = cf;
    return v6;
  }
LABEL_8:
  if (cf) {
    CFRelease(cf);
  }
  return v6;
}

uint64_t fpst_outOfBandRegistry_copyDataSourceTranslatedFromOutOfBandID(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  CFTypeRef cf = 0;
  uint64_t v4 = FigPartialSampleTableOutOfBandObjectRegistryLookupAndRetainObjectForID(a1, @"DataSourceURL", a2, &cf);
  if (v4) {
    goto LABEL_7;
  }
  if (!cf || (CFTypeID v5 = CFGetTypeID(cf), v5 != CFURLGetTypeID()))
  {
    uint64_t v4 = FigSignalErrorAt();
LABEL_7:
    uint64_t v6 = v4;
    goto LABEL_8;
  }
  uint64_t v6 = 0;
  if (a3)
  {
    *a3 = cf;
    return v6;
  }
LABEL_8:
  if (cf) {
    CFRelease(cf);
  }
  return v6;
}

uint64_t fpst_outOfBandRegistry_copyFormatDescriptionTranslatedFromOutOfBandID(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  CFTypeRef cf = 0;
  uint64_t v4 = FigPartialSampleTableOutOfBandObjectRegistryLookupAndRetainObjectForID(a1, @"FormatDescription", a2, &cf);
  if (v4) {
    goto LABEL_7;
  }
  if (!cf || (CFTypeID v5 = CFGetTypeID(cf), v5 != CMFormatDescriptionGetTypeID()))
  {
    uint64_t v4 = FigSignalErrorAt();
LABEL_7:
    uint64_t v6 = v4;
    goto LABEL_8;
  }
  uint64_t v6 = 0;
  if (a3)
  {
    *a3 = cf;
    return v6;
  }
LABEL_8:
  if (cf) {
    CFRelease(cf);
  }
  return v6;
}

uint64_t FigPartialSampleTableCreateFromBlockBuffer(const __CFAllocator *a1, OpaqueCMBlockBuffer *a2, uint64_t *a3)
{
  return FigPartialSampleTableCreateFromBlockBufferUsingTranslationCallbacks(a1, a2, 0, 0, a3);
}

uint64_t FigPartialSampleTableCreateAccessorAtIndex(void *a1, uint64_t a2, void *a3)
{
  if (!a1 || a2 < 0 || *(void *)(a1[2] + 8) <= a2)
  {
    uint64_t v7 = FigSignalErrorAt();
    goto LABEL_8;
  }
  uint64_t v6 = (char *)malloc_type_calloc(1uLL, 0x98uLL, 0x102004019573705uLL);
  *(_OWORD *)(v6 + 8) = 0u;
  *(_OWORD *)(v6 + 24) = 0u;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 104) = 0u;
  *(_OWORD *)(v6 + 120) = 0u;
  *(_OWORD *)(v6 + 136) = 0u;
  if (*(void *)v6) {
    CFRelease(*(CFTypeRef *)v6);
  }
  *(void *)uint64_t v6 = a1;
  CFRetain(a1);
  uint64_t v7 = fpst_accessor_moveToSampleIndex((uint64_t *)v6, a2);
  if (!v7)
  {
    *a3 = v6;
LABEL_8:
    uint64_t v6 = 0;
  }
  free(v6);
  return v7;
}

uint64_t fpst_accessor_moveToSampleIndex(uint64_t *a1, uint64_t a2)
{
  if (a1[18] == a2) {
    return 0;
  }
  uint64_t v4 = *a1;
  for (uint64_t i = 1; i != 18; ++i)
  {
    if (a2)
    {
      uint64_t v6 = a1[18];
      if (*(void *)(*(void *)(v4 + 16) + 8) - 1 == a2)
      {
        dataPointerOut = 0;
        uint64_t result = fpst_reading_runForType(v4, (char)i, &dataPointerOut);
        if (result == -17712) {
          continue;
        }
        if (result) {
          return result;
        }
        a1[i] = *(void *)dataPointerOut - 1;
      }
      if (v6 >= a2)
      {
LABEL_16:
        if (v6 > a2)
        {
          for (uint64_t j = &a1[i]; ; *uint64_t j = v12)
          {
            CFAllocatorRef v13 = 0;
            dataPointerOut = 0;
            uint64_t result = fpst_reading_runForType(v4, (char)i, &v13);
            if (result == -17712) {
              break;
            }
            if (result) {
              return result;
            }
            if (!v13) {
              break;
            }
            uint64_t v12 = *j - 1;
            if (*j < 1) {
              break;
            }
            uint64_t result = fpst_reading_runSegmentAtIndex(v4, (char)i, *j, &dataPointerOut);
            if (result) {
              return result;
            }
            if (*(void *)dataPointerOut <= a2) {
              break;
            }
          }
        }
      }
      else
      {
        double v8 = &a1[i];
        while (1)
        {
          CFAllocatorRef v13 = 0;
          dataPointerOut = 0;
          uint64_t result = fpst_reading_runForType(v4, (char)i, &v13);
          if (result == -17712) {
            break;
          }
          if (result) {
            return result;
          }
          uint64_t v9 = *v8 + 1;
          if (v9 >= *(void *)v13) {
            break;
          }
          uint64_t result = fpst_reading_runSegmentAtIndex(v4, (char)i, *v8 + 1, &dataPointerOut);
          if (result) {
            return result;
          }
          uint64_t v10 = dataPointerOut;
          if (*(void *)dataPointerOut > a2) {
            break;
          }
          *double v8 = v9;
          uint64_t v6 = *(void *)v10;
          if (*(void *)v10 >= a2) {
            goto LABEL_16;
          }
        }
      }
    }
    else
    {
      a1[i] = 0;
    }
  }
  uint64_t result = 0;
  a1[18] = a2;
  return result;
}

uint64_t FigPartialSampleTableAccessorStepInDecodeOrder(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  if (!a1)
  {
    uint64_t result = FigSignalErrorAt();
    goto LABEL_15;
  }
  if (!a2)
  {
    uint64_t result = 0;
LABEL_15:
    uint64_t v8 = 0;
    if (!a3) {
      return result;
    }
    goto LABEL_10;
  }
  uint64_t v4 = a1[18];
  uint64_t v5 = v4 + a2;
  if (v4 + a2 < 0 != __OFADD__(v4, a2)) {
    uint64_t v6 = -v4;
  }
  else {
    uint64_t v6 = a2;
  }
  uint64_t v7 = *(void *)(*(void *)(*a1 + 16) + 8);
  if (v5 >= v7) {
    uint64_t v8 = ~v5 + a2 + v7;
  }
  else {
    uint64_t v8 = v6;
  }
  uint64_t result = fpst_accessor_moveToSampleIndex(a1, v8 + v4);
  if (a3)
  {
LABEL_10:
    if (!result) {
      *a3 = v8;
    }
  }
  return result;
}

uint64_t FigPartialSampleTableAccessorStepByDecodeTime(uint64_t *a1, CMTime *a2, char *a3)
{
  CMTime v4 = *a2;
  return fpst_accessor_stepByDecodeTimeInternal(a1, &v4, 0, a3);
}

uint64_t fpst_accessor_stepByDecodeTimeInternal(uint64_t *a1, CMTime *a2, int a3, char *a4)
{
  if (a1)
  {
    CMTime time1 = *a2;
    long long v32 = *MEMORY[0x1E4F1FA48];
    *(_OWORD *)&time2.CMTimeValue value = *MEMORY[0x1E4F1FA48];
    CMTimeEpoch v9 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
    time2.CMTimeEpoch epoch = v9;
    if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
    {
      CMTime v34 = *a2;
      CMTime time1 = *a2;
      CMTimeEpoch v41 = 0;
      *(_OWORD *)&time2.CMTimeValue value = v32;
      time2.CMTimeEpoch epoch = v9;
      uint64_t result = CMTimeCompare(&time1, &time2);
      if (!result) {
        return result;
      }
      CMTime time1 = v34;
      *(_OWORD *)&time2.CMTimeValue value = v32;
      time2.CMTimeEpoch epoch = v9;
      if (CMTimeCompare(&time1, &time2) < 0) {
        return FigSignalErrorAt();
      }
      uint64_t v11 = a1[18];
      uint64_t v12 = a1[10];
      uint64_t result = fpst_reading_runSegmentAtIndex(*a1, 10, v12, &v41);
      if (result) {
        return result;
      }
      uint64_t v13 = *a1;
      dataPointerOut = 0;
      int64_t v14 = *(void *)(*(void *)(v13 + 16) + 88);
      if (v14 >= 1)
      {
        uint64_t result = CMBlockBufferGetDataPointer(*(CMBlockBufferRef *)(v13 + 24), v14, 0, 0, &dataPointerOut);
        if (result) {
          return result;
        }
        CFTypeRef v15 = v41;
        if (!v41)
        {
          uint64_t v21 = 0;
          char v22 = 0;
          goto LABEL_34;
        }
        uint64_t v16 = v12 + 1;
        while (1)
        {
          uint64_t v35 = 0;
          uint64_t v17 = *a1;
          if (v16 >= *(void *)dataPointerOut)
          {
            uint64_t v18 = 0;
            int64_t v19 = (uint64_t *)(*(void *)(v17 + 16) + 8);
          }
          else
          {
            uint64_t result = fpst_reading_runSegmentAtIndex(v17, 10, v16, &v35);
            if (result) {
              return result;
            }
            uint64_t v18 = v35;
            int64_t v19 = (uint64_t *)v35;
          }
          uint64_t v20 = *v19;
          memset(&time1, 0, sizeof(time1));
          CMTime time2 = *(CMTime *)(v15 + 32);
          CMTimeMultiply(&time1, &time2, v20 - v11);
          CMTime time2 = time1;
          CMTime rhs = v34;
          if (CMTimeCompare(&time2, &rhs) >= 1) {
            break;
          }
          CMTime time2 = v34;
          CMTime rhs = time1;
          CMTimeSubtract(&v34, &time2, &rhs);
          ++v16;
          uint64_t v11 = v20;
          CFTypeRef v15 = v18;
          if (!v18)
          {
            uint64_t v21 = v20 - 1;
            char v22 = 1;
            goto LABEL_34;
          }
        }
        CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
        CMTime rhs = v34;
        CMTime v36 = *(CMTime *)(v15 + 32);
        uint64_t v29 = CMTimeDivide();
        if (!a3 || (rhs = time2, *(_OWORD *)&v36.CMTimeValue value = v32, v36.epoch = v9, !CMTimeCompare(&rhs, &v36)))
        {
          char v22 = 0;
          uint64_t v21 = v29 + v11;
LABEL_34:
          uint64_t result = fpst_accessor_moveToSampleIndex(a1, v21);
          if (a4)
          {
            if (!result) {
              *a4 = v22;
            }
          }
          return result;
        }
        return FigSignalErrorAt();
      }
      return 4294949584;
    }
    CMTime time1 = *a2;
    CMTimeAbsoluteValue(&v33, &time1);
    v34.CMTimeValue value = 0;
    CMTime time1 = v33;
    *(_OWORD *)&time2.CMTimeValue value = v32;
    time2.CMTimeEpoch epoch = v9;
    uint64_t result = CMTimeCompare(&time1, &time2);
    if (!result) {
      return result;
    }
    CMTime time1 = v33;
    *(_OWORD *)&time2.CMTimeValue value = v32;
    time2.CMTimeEpoch epoch = v9;
    if (CMTimeCompare(&time1, &time2) <= 0) {
      return FigSignalErrorAt();
    }
    uint64_t v23 = a1[18];
    uint64_t v24 = a1[10];
    uint64_t result = fpst_reading_runSegmentAtIndex(*a1, 10, v24, &v34);
    if (result) {
      return result;
    }
    uint64_t v25 = *a1;
    CMTimeEpoch v41 = 0;
    int64_t v26 = *(void *)(*(void *)(v25 + 16) + 88);
    if (v26 < 1) {
      return 4294949584;
    }
    uint64_t result = CMBlockBufferGetDataPointer(*(CMBlockBufferRef *)(v25 + 24), v26, 0, 0, &v41);
    if (result) {
      return result;
    }
    CMTimeValue value = v34.value;
    if (v34.value)
    {
      while (1)
      {
        dataPointerOut = 0;
        uint64_t v28 = *(void *)value;
        memset(&time1, 0, sizeof(time1));
        CMTime time2 = *(CMTime *)(value + 32);
        CMTimeMultiply(&time1, &time2, v23 - v28);
        CMTime time2 = time1;
        CMTime rhs = v33;
        if ((CMTimeCompare(&time2, &rhs) & 0x80000000) == 0) {
          break;
        }
        uint64_t v23 = v28;
        CMTime rhs = v33;
        CMTime v36 = time1;
        CMTimeSubtract(&time2, &rhs, &v36);
        CMTime v33 = time2;
        if (v24 > 0)
        {
          uint64_t result = fpst_reading_runSegmentAtIndex(*a1, 10, --v24, &dataPointerOut);
          if (result) {
            return result;
          }
          CMTimeValue value = (CMTimeValue)dataPointerOut;
          if (dataPointerOut) {
            continue;
          }
        }
        uint64_t result = fpst_accessor_moveToSampleIndex(a1, v28);
        if (!result) {
          *a4 = 1;
        }
        return result;
      }
      CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
      CMTime rhs = v33;
      CMTime v36 = *(CMTime *)(value + 32);
      uint64_t v31 = CMTimeDivide();
      if (!a3 || (rhs = time2, *(_OWORD *)&v36.CMTimeValue value = v32, v36.epoch = v9, !CMTimeCompare(&rhs, &v36)))
      {
        uint64_t v30 = v23 - v31;
        return fpst_accessor_moveToSampleIndex(a1, v30);
      }
      return FigSignalErrorAt();
    }
    uint64_t v30 = 0;
    return fpst_accessor_moveToSampleIndex(a1, v30);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigPartialSampleTableAccessorStepInPresentationOrder(uint64_t *a1, uint64_t a2, void *a3, CMTime *a4)
{
  long long v5 = *MEMORY[0x1E4F1F9F8];
  *(_OWORD *)&v25.CMTimeValue value = *MEMORY[0x1E4F1F9F8];
  CMTimeEpoch v6 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  v25.CMTimeEpoch epoch = v6;
  long long v7 = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 16);
  *(_OWORD *)&v24.start.CMTimeValue value = *MEMORY[0x1E4F1FA20];
  *(_OWORD *)&v24.start.CMTimeEpoch epoch = v7;
  *(_OWORD *)&v24.duration.CMTime timescale = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 32);
  if (a1)
  {
    long long v15 = v5;
    FigPartialSampleTableGetDecodeTimeRange(*a1, &v24, 0);
    uint64_t v11 = 0;
    if (a2)
    {
      if (a2 > 0) {
        uint64_t v12 = 1;
      }
      else {
        uint64_t v12 = -1;
      }
      while (1)
      {
        CMTimeEpoch v23 = 0;
        long long v22 = 0u;
        memset(v21, 0, sizeof(v21));
        uint64_t v20 = 0;
        char v18 = 0;
        uint64_t result = fpst_reading_runSegmentAtIndex(*a1, 14, a1[14], &v20);
        if (result) {
          break;
        }
        int64_t v14 = (CMTime *)(v20 + 8);
        if (a2 <= 0) {
          int64_t v14 = (CMTime *)(v20 + 32);
        }
        CMTime v19 = *v14;
        uint64_t result = FigPartialSampleTableAccessorGetSampleTiming(a1, (uint64_t)v21);
        if (result) {
          break;
        }
        *(_OWORD *)&lhs.start.CMTimeValue value = v22;
        lhs.start.CMTimeEpoch epoch = v23;
        CMTime rhs = v19;
        CMTimeAdd(&v25, &lhs.start, &rhs);
        CMTimeRange lhs = v24;
        CMTime rhs = v25;
        if (!CMTimeRangeContainsTime(&lhs, &rhs))
        {
          if (!a4) {
            goto LABEL_18;
          }
          uint64_t result = 0;
          *a4 = v25;
          break;
        }
        lhs.CMTimeRange start = v19;
        uint64_t result = fpst_accessor_stepByDecodeTimeInternal(a1, &lhs.start, 1, &v18);
        if (result) {
          break;
        }
        if (v18)
        {
          uint64_t result = FigSignalErrorAt();
          break;
        }
        v11 += v12;
        if (a2 == v11) {
          goto LABEL_14;
        }
      }
    }
    else
    {
LABEL_14:
      if (a4)
      {
        uint64_t result = 0;
        *(_OWORD *)&a4->CMTimeValue value = v15;
        a4->CMTimeEpoch epoch = v6;
      }
      else
      {
LABEL_18:
        uint64_t result = 0;
      }
    }
  }
  else
  {
    uint64_t result = FigSignalErrorAt();
    uint64_t v11 = 0;
  }
  if (a3)
  {
    if (!result) {
      *a3 = v11;
    }
  }
  return result;
}

uint64_t FigPartialSampleTableGetDecodeTimeRange(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v25 = 0;
  int64_t v26 = 0;
  uint64_t v24 = 0;
  long long v3 = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 16);
  *(_OWORD *)&v23.start.CMTimeValue value = *MEMORY[0x1E4F1FA20];
  *(_OWORD *)&v23.start.CMTimeEpoch epoch = v3;
  *(_OWORD *)&v23.duration.CMTime timescale = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 32);
  long long v21 = *MEMORY[0x1E4F1F9F8];
  uint64_t v22 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  if (!a2 || !a1)
  {
    uint64_t v13 = FigSignalErrorAt();
    CMTimeEpoch v9 = 0;
    goto LABEL_16;
  }
  long long v7 = (_OWORD *)(a1 + 104);
  if ((*(unsigned char *)(a1 + 116) & 1) == 0
    || (*(unsigned char *)(a1 + 140) & 1) == 0
    || *(void *)(a1 + 144)
    || (*(void *)(a1 + 128) & 0x8000000000000000) != 0)
  {
    memset(v18, 0, sizeof(v18));
    uint64_t SampleTiming = FigPartialSampleTableCreateAccessorAtIndex((void *)a1, 0, &v26);
    CMTimeEpoch v9 = v26;
    if (!SampleTiming)
    {
      uint64_t SampleTiming = FigPartialSampleTableAccessorGetSampleTiming(v26, (uint64_t)v18);
      if (!SampleTiming)
      {
        CMTime v20 = v18[2];
        uint64_t SampleTiming = FigPartialSampleTableAccessorStepInDecodeOrder(v9, *(void *)(*(void *)(a1 + 16) + 8) - 1, &v25);
        if (!SampleTiming)
        {
          if (v25 == *(void *)(*(void *)(a1 + 16) + 8) - 1)
          {
            uint64_t SampleTiming = FigPartialSampleTableAccessorGetSampleTiming(v9, (uint64_t)v18);
            if (!SampleTiming)
            {
              CMTime v19 = v18[2];
              uint64_t SampleTiming = fpst_reading_runSegmentAtIndex(*v9, 10, v9[10], &v24);
              if (!SampleTiming)
              {
                uint64_t v10 = v24;
                CMTime lhs = v19;
                CMTime v16 = *(CMTime *)(v24 + 32);
                CMTimeAdd(&v19, &lhs, &v16);
                CMTime lhs = v20;
                CMTime v16 = v19;
                CMTimeRangeFromTimeToTime(&v23, &lhs, &v16);
                long long v21 = *(_OWORD *)(v10 + 32);
                uint64_t v22 = *(void *)(v10 + 48);
                if (!*(void *)(a1 + 176))
                {
                  long long v11 = *(_OWORD *)&v23.start.epoch;
                  *long long v7 = *(_OWORD *)&v23.start.value;
                  *(_OWORD *)(a1 + 120) = v11;
                  *(_OWORD *)(a1 + 136) = *(_OWORD *)&v23.duration.timescale;
                  *(_OWORD *)(a1 + 80) = v21;
                  *(void *)(a1 + 96) = v22;
                }
                goto LABEL_14;
              }
            }
          }
          else
          {
            uint64_t SampleTiming = FigSignalErrorAt();
          }
        }
      }
    }
    uint64_t v13 = SampleTiming;
    goto LABEL_16;
  }
  CMTimeEpoch v9 = 0;
  long long v15 = *(_OWORD *)(a1 + 120);
  *(_OWORD *)&v23.start.CMTimeValue value = *v7;
  *(_OWORD *)&v23.start.CMTimeEpoch epoch = v15;
  *(_OWORD *)&v23.duration.CMTime timescale = *(_OWORD *)(a1 + 136);
  long long v21 = *(_OWORD *)(a1 + 80);
  uint64_t v22 = *(void *)(a1 + 96);
LABEL_14:
  long long v12 = *(_OWORD *)&v23.start.epoch;
  *a2 = *(_OWORD *)&v23.start.value;
  a2[1] = v12;
  a2[2] = *(_OWORD *)&v23.duration.timescale;
  uint64_t v13 = 0;
  if (a3)
  {
    *(_OWORD *)a3 = v21;
    *(void *)(a3 + 16) = v22;
  }
LABEL_16:
  FigPartialSampleTableAccessorDestroy((const void **)v9);
  return v13;
}

uint64_t FigPartialSampleTableAccessorGetSampleTiming(uint64_t *a1, uint64_t a2)
{
  uint64_t v19 = 0;
  if (a1)
  {
    if (!a2) {
      return 0;
    }
    long long v13 = *MEMORY[0x1E4F1F9F8];
    *(_OWORD *)&v18.CMTimeValue value = *MEMORY[0x1E4F1F9F8];
    CMTimeEpoch v4 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
    v18.CMTimeEpoch epoch = v4;
    uint64_t v5 = fpst_reading_runSegmentAtIndex(*a1, 10, a1[10], &v19);
    if (!v5)
    {
      uint64_t v6 = v19;
      uint64_t v7 = a1[18] - *(void *)v19;
      if (v7 >= 0x80000000)
      {
        return FigSignalErrorAt();
      }
      else
      {
        CMTime time = *(CMTime *)(v19 + 32);
        CMTimeMultiply(&rhs, &time, v7);
        long long v8 = *(_OWORD *)(v6 + 8);
        time.CMTimeEpoch epoch = *(void *)(v6 + 24);
        *(_OWORD *)&time.CMTimeValue value = v8;
        CMTimeAdd(&v18, &time, &rhs);
        *(CMTime *)(a2 + 48) = v18;
        uint64_t v5 = fpst_reading_runSegmentAtIndex(*a1, 11, a1[11], &v19);
        if (!v5)
        {
          uint64_t v9 = *(void *)(v19 + 24);
          *(_OWORD *)a2 = *(_OWORD *)(v19 + 8);
          *(void *)(a2 + 16) = v9;
          *(_OWORD *)&time.CMTimeValue value = v13;
          time.CMTimeEpoch epoch = v4;
          uint64_t v10 = fpst_reading_runSegmentAtIndex(*a1, 12, a1[12], &v19);
          if (!v10)
          {
            CMTime lhs = v18;
            long long v11 = *(_OWORD *)(v19 + 8);
            v14.CMTimeEpoch epoch = *(void *)(v19 + 24);
            *(_OWORD *)&v14.CMTimeValue value = v11;
            CMTimeAdd(&time, &lhs, &v14);
            *(CMTime *)(a2 + 24) = time;
          }
          return v10;
        }
      }
    }
    return v5;
  }

  return FigSignalErrorAt();
}

uint64_t FigPartialSampleTableAccessorGetUnrefinedSampleLocationInByteStreamOrDataSourceURL(uint64_t *a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  CMTime v18 = 0;
  if (!a1)
  {
LABEL_17:
    return FigSignalErrorAt();
  }
  if (a2 | a3)
  {
    uint64_t result = fpst_reading_runSegmentAtIndex(*a1, 1, a1[1], &v18);
    if (result) {
      return result;
    }
    uint64_t v11 = v18[2];
    uint64_t v12 = v18[1] + (a1[18] - *v18) * v11;
    if (a2)
    {
      *(void *)a2 = v12;
      *(void *)(a2 + 8) = v11;
    }
    if (a3)
    {
      uint64_t result = fpst_reading_runSegmentAtIndex(*a1, 2, a1[2], &v18);
      if (result == -17712)
      {
        uint64_t v14 = 0;
        int v15 = 0;
        int v13 = 1;
      }
      else
      {
        if (result) {
          return result;
        }
        int v13 = 0;
        uint64_t v14 = v18[1] + v12;
        int v15 = 1;
      }
      *(void *)a3 = v14;
      uint64_t result = fpst_reading_runSegmentAtIndex(*a1, 3, a1[3], &v18);
      if (v15 && result == -17712) {
        goto LABEL_17;
      }
      int v16 = result ? 0 : v13;
      if (v16 == 1) {
        goto LABEL_17;
      }
      if (result == -17712)
      {
        uint64_t v17 = 0;
      }
      else
      {
        if (result) {
          return result;
        }
        uint64_t v17 = v18[1];
      }
      *(void *)(a3 + 8) = v17;
    }
  }
  if (a4 | a5)
  {
    uint64_t result = fpst_reading_runSegmentAtIndex(*a1, 6, a1[6], &v18);
    if (result) {
      return result;
    }
    if (a4) {
      *(void *)a4 = v18[1];
    }
    if (a5)
    {
      uint64_t result = 0;
      *(void *)a5 = v18[2];
      return result;
    }
  }
  return 0;
}

uint64_t FigPartialSampleTableAccessorGetUnrefinedSampleLocationInByteSource(uint64_t *a1, unint64_t a2, unint64_t a3, void *a4)
{
  int v16 = 0;
  if (!a1)
  {
LABEL_17:
    return FigSignalErrorAt();
  }
  if (a2 | a3)
  {
    uint64_t result = fpst_reading_runSegmentAtIndex(*a1, 1, a1[1], &v16);
    if (result) {
      return result;
    }
    uint64_t v9 = v16[2];
    uint64_t v10 = v16[1] + (a1[18] - *v16) * v9;
    if (a2)
    {
      *(void *)a2 = v10;
      *(void *)(a2 + 8) = v9;
    }
    if (a3)
    {
      uint64_t result = fpst_reading_runSegmentAtIndex(*a1, 2, a1[2], &v16);
      if (result == -17712)
      {
        uint64_t v12 = 0;
        int v13 = 0;
        int v11 = 1;
      }
      else
      {
        if (result) {
          return result;
        }
        int v11 = 0;
        uint64_t v12 = v16[1] + v10;
        int v13 = 1;
      }
      *(void *)a3 = v12;
      uint64_t result = fpst_reading_runSegmentAtIndex(*a1, 3, a1[3], &v16);
      if (v13 && result == -17712) {
        goto LABEL_17;
      }
      int v14 = result ? 0 : v11;
      if (v14 == 1) {
        goto LABEL_17;
      }
      if (result == -17712)
      {
        uint64_t v15 = 0;
      }
      else
      {
        if (result) {
          return result;
        }
        uint64_t v15 = v16[1];
      }
      *(void *)(a3 + 8) = v15;
    }
  }
  if (!a4) {
    return 0;
  }
  uint64_t result = fpst_reading_runSegmentAtIndex(*a1, 5, a1[5], &v16);
  if (!result) {
    *a4 = v16[1];
  }
  return result;
}

uint64_t FigPartialSampleTableAccessorGetChunkDetailsInByteSource(uint64_t *a1, _OWORD *a2, void *a3, unint64_t a4, unint64_t a5)
{
  uint64_t v12 = 0;
  if (a1)
  {
    if (a2)
    {
      uint64_t result = fpst_reading_runSegmentAtIndex(*a1, 4, a1[4], &v12);
      if (result) {
        return result;
      }
      *a2 = *(_OWORD *)(v12 + 8);
    }
    if (a3)
    {
      uint64_t result = fpst_reading_runSegmentAtIndex(*a1, 5, a1[5], &v12);
      if (result) {
        return result;
      }
      *a3 = *(void *)(v12 + 8);
    }
    if (!(a4 | a5)) {
      return 0;
    }
    uint64_t result = fpst_reading_runSegmentAtIndex(*a1, 7, a1[7], &v12);
    if (result) {
      return result;
    }
    if (a4) {
      *(_OWORD *)a4 = *(_OWORD *)(v12 + 8);
    }
    if (!a5) {
      return 0;
    }
    uint64_t v11 = a1[18] - *(void *)v12 + *(void *)(v12 + 24);
    if (v11 != 0x7FFFFFFFFFFFFFFFLL)
    {
      uint64_t result = 0;
      *(void *)a5 = v11;
      return result;
    }
  }

  return FigSignalErrorAt();
}

uint64_t FigPartialSampleTableAccessorGetChunkDetailsInByteStreamOrDataSourceURL(uint64_t *a1, _OWORD *a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6)
{
  uint64_t v14 = 0;
  if (a1)
  {
    if (a2)
    {
      uint64_t result = fpst_reading_runSegmentAtIndex(*a1, 4, a1[4], &v14);
      if (result) {
        return result;
      }
      *a2 = *(_OWORD *)(v14 + 8);
    }
    if (a3 | a4)
    {
      uint64_t result = fpst_reading_runSegmentAtIndex(*a1, 6, a1[6], &v14);
      if (result) {
        return result;
      }
      if (a3) {
        *(void *)a3 = *(void *)(v14 + 8);
      }
      if (a4) {
        *(void *)a4 = *(void *)(v14 + 16);
      }
    }
    if (!(a5 | a6)) {
      return 0;
    }
    uint64_t result = fpst_reading_runSegmentAtIndex(*a1, 7, a1[7], &v14);
    if (result) {
      return result;
    }
    if (a5) {
      *(_OWORD *)a5 = *(_OWORD *)(v14 + 8);
    }
    if (!a6) {
      return 0;
    }
    uint64_t v13 = a1[18] - *(void *)v14 + *(void *)(v14 + 24);
    if (v13 != 0x7FFFFFFFFFFFFFFFLL)
    {
      uint64_t result = 0;
      *(void *)a6 = v13;
      return result;
    }
  }

  return FigSignalErrorAt();
}

uint64_t FigPartialSampleTableAccessorGetFormatDescriptionIdentifier(uint64_t *a1, void *a2)
{
  uint64_t v4 = 0;
  if (a1)
  {
    if (a2)
    {
      uint64_t result = fpst_reading_runSegmentAtIndex(*a1, 17, a1[17], &v4);
      if (!result) {
        *a2 = *(void *)(v4 + 8);
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t FigPartialSampleTableAccessorGetSyncInfo(uint64_t *a1, void *a2)
{
  uint64_t v4 = 0;
  if (a1)
  {
    if (a2)
    {
      uint64_t result = fpst_reading_runSegmentAtIndex(*a1, 9, a1[9], &v4);
      if (!result) {
        *a2 = *(void *)(v4 + 8);
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t FigPartialSampleTableAccessorGetMinimumUpcomingPresentationTime(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v18 = 0;
  if (a1)
  {
    if ((*(unsigned char *)(*(void *)(*a1 + 16) + 1) & 2) == 0) {
      return 4294949584;
    }
    if (!a3) {
      return 0;
    }
    uint64_t result = fpst_reading_runSegmentAtIndex(*a1, 16, a1[16], &v18);
    if (!result)
    {
      uint64_t v8 = v18;
      uint64_t v9 = *(void *)(v18 + 24);
      *(_OWORD *)a3 = *(_OWORD *)(v18 + 8);
      *(void *)(a3 + 16) = v9;
      CMTimeValue v19 = *(void *)(v8 + 32);
      CMTimeScale v10 = *(_DWORD *)(v8 + 40);
      CMTimeFlags v11 = *(_DWORD *)(v8 + 44);
      CMTimeEpoch v12 = *(void *)(v8 + 48);
      *(void *)a4 = v19;
      CMTimeScale v20 = v10;
      *(_DWORD *)(a4 + 8) = v10;
      *(_DWORD *)(a4 + 12) = v11;
      *(void *)(a4 + 16) = v12;
      if (a2)
      {
        if (v11)
        {
          memset(v17, 0, sizeof(v17));
          FigPartialSampleTableAccessorGetSampleTiming(a2, (uint64_t)v17);
          time1.CMTime timescale = v20;
          time1.flags = v11;
          time1.CMTimeEpoch epoch = v12;
          CMTime v15 = v17[2];
          time1.CMTimeValue value = v19;
          if (CMTimeCompare(&time1, &v15) >= 1)
          {
            uint64_t v13 = MEMORY[0x1E4F1FA10];
            *(_OWORD *)a3 = *MEMORY[0x1E4F1FA10];
            uint64_t v14 = MEMORY[0x1E4F1F9F8];
            *(void *)(a3 + 16) = *(void *)(v13 + 16);
            *(_OWORD *)a4 = *(_OWORD *)v14;
            *(void *)(a4 + 16) = *(void *)(v14 + 16);
            return 4294949584;
          }
          return 0;
        }
      }
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t FigPartialSampleTableAccessorGetPresentationTimeRange(uint64_t *a1, _OWORD *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v16 = 0;
  if (a1)
  {
    if (!a2) {
      return 0;
    }
    uint64_t v4 = MEMORY[0x1E4F1FA20];
    long long v5 = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 16);
    *a2 = *MEMORY[0x1E4F1FA20];
    a2[1] = v5;
    a2[2] = *(_OWORD *)(v4 + 32);
    uint64_t v15 = 0;
    long long v14 = 0u;
    memset(v13, 0, sizeof(v13));
    uint64_t result = FigPartialSampleTableAccessorGetSampleTiming(a1, (uint64_t)v13);
    if (!result)
    {
      uint64_t result = fpst_reading_runSegmentAtIndex(*a1, 12, a1[12], &v16);
      if (!result)
      {
        CMTimeValue v17 = *(void *)(v16 + 32);
        CMTimeFlags v7 = *(_DWORD *)(v16 + 44);
        CMTimeScale v18 = *(_DWORD *)(v16 + 40);
        if ((v7 & 0x1D) == 1)
        {
          CMTimeEpoch v8 = *(void *)(v16 + 48);
          time1.start.CMTimeValue value = *(void *)(v16 + 32);
          time1.start.CMTime timescale = *(_DWORD *)(v16 + 40);
          time1.start.flags = v7;
          time1.start.CMTimeEpoch epoch = v8;
          CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
          if (CMTimeCompare(&time1.start, &time2))
          {
            CMTime time2 = v13[1];
            duration.CMTimeValue value = v17;
            duration.CMTime timescale = v18;
            duration.flags = v7;
            duration.CMTimeEpoch epoch = v8;
            CMTimeRangeMake(&time1, &time2, &duration);
            long long v9 = *(_OWORD *)&time1.start.epoch;
            *a2 = *(_OWORD *)&time1.start.value;
            a2[1] = v9;
            a2[2] = *(_OWORD *)&time1.duration.timescale;
          }
        }
        return 0;
      }
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t FigPartialSampleTableAccessorGetDependencyInfo(uint64_t *a1, uint64_t a2)
{
  uint64_t v5 = 0;
  if (a1)
  {
    if (a2)
    {
      uint64_t result = fpst_reading_runSegmentAtIndex(*a1, 8, a1[8], &v5);
      if (!result)
      {
        __int16 v4 = *(_WORD *)(v5 + 12);
        *(_DWORD *)a2 = *(_DWORD *)(v5 + 8);
        *(_WORD *)(a2 + 4) = v4;
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t FigPartialSampleTableAccessorGetExtendedDependencyAttributeInfo(uint64_t *a1, uint64_t a2)
{
  uint64_t v6 = 0;
  if (a1)
  {
    if (a2)
    {
      uint64_t result = fpst_reading_runSegmentAtIndex(*a1, 13, a1[13], &v6);
      if (!result)
      {
        uint64_t v4 = *(void *)(v6 + 40);
        long long v5 = *(_OWORD *)(v6 + 24);
        *(_OWORD *)a2 = *(_OWORD *)(v6 + 8);
        *(_OWORD *)(a2 + 16) = v5;
        *(void *)(a2 + 32) = v4;
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t FigPartialSampleTableAccessorCopy(uint64_t a1, void *a2)
{
  if (a1 && a2 && *(void *)a1)
  {
    uint64_t v4 = malloc_type_calloc(1uLL, 0x98uLL, 0x102004019573705uLL);
    long long v5 = *(_OWORD *)(a1 + 16);
    *uint64_t v4 = *(_OWORD *)a1;
    v4[1] = v5;
    long long v6 = *(_OWORD *)(a1 + 80);
    long long v8 = *(_OWORD *)(a1 + 32);
    long long v7 = *(_OWORD *)(a1 + 48);
    v4[4] = *(_OWORD *)(a1 + 64);
    v4[5] = v6;
    v4[2] = v8;
    v4[3] = v7;
    long long v10 = *(_OWORD *)(a1 + 112);
    long long v9 = *(_OWORD *)(a1 + 128);
    long long v11 = *(_OWORD *)(a1 + 96);
    *((void *)v4 + 18) = *(void *)(a1 + 144);
    v4[7] = v10;
    v4[8] = v9;
    v4[6] = v11;
    CFRetain(*(CFTypeRef *)v4);
    *a2 = v4;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void FigPartialSampleTableAccessorDestroy(const void **a1)
{
  if (a1)
  {
    size_t v2 = *a1;
    if (v2) {
      CFRelease(v2);
    }
    free(a1);
  }
}

uint64_t FigPartialSampleTableAccessorGetDecodeToPresentationTimeDeltaRange(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = 0;
  if (a1)
  {
    uint64_t result = fpst_reading_runSegmentAtIndex(*a1, 15, a1[15], &v8);
    if (!result)
    {
      if (a2)
      {
        uint64_t v6 = *(void *)(v8 + 24);
        *(_OWORD *)a2 = *(_OWORD *)(v8 + 8);
        *(void *)(a2 + 16) = v6;
      }
      uint64_t result = 0;
      if (a3)
      {
        uint64_t v7 = *(void *)(v8 + 48);
        *(_OWORD *)a3 = *(_OWORD *)(v8 + 32);
        *(void *)(a3 + 16) = v7;
      }
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t FigPartialSampleTableGetSampleCount(uint64_t a1, void *a2)
{
  if (!a2 || !a1) {
    return FigSignalErrorAt();
  }
  *a2 = *(void *)(*(void *)(a1 + 16) + 8);
  return 0;
}

uint64_t FigPartialSampleTableRecommendSampleTableFlagsForCursor(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  if (a3)
  {
    unint64_t v6 = a1 & 0xFFFFFFFFFFFFFFBFLL;
    if ((a1 & 8) != 0)
    {
      if ((a1 & 0x10) != 0)
      {
        uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v8 = v7 ? v7 : 0;
        if (!*(void *)(v8 + 192)) {
          unint64_t v6 = a1 & 0xFFFFFFFFFFFFFFAFLL;
        }
      }
      if ((v6 & 0x10) == 0)
      {
        uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v10 = v9 ? v9 : 0;
        if (!*(void *)(v10 + 144)) {
          v6 &= 0xFFFFFFFFFFFFFFB7;
        }
      }
    }
    else if ((a1 & 0x10) != 0)
    {
      unint64_t v6 = a1 & 0xFFFFFFFFFFFFFFAFLL;
    }
    unint64_t v11 = v6 & 0xFFFFFFFFFFFFFFFDLL;
    if ((v6 & 4) != 0)
    {
      uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v13 = v12 ? v12 : 0;
      if (!*(void *)(v13 + 152)) {
        unint64_t v11 = v6 & 0xFFFFFFFFFFFFFFF9;
      }
    }
    if ((v11 & 0x100) != 0)
    {
      uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v14) {
        uint64_t v15 = v14;
      }
      else {
        uint64_t v15 = 0;
      }
      if (!*(void *)(v15 + 200)) {
        v11 &= 0xFFFFFFFFFFFFFEFDLL;
      }
    }
    *a3 = v11 & 0xFFFFFFFFFFFFFFDFLL;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigPartialSampleTableAccessorCopyUnrefinedSampleLocationInTranslatedByteStreamOrDataSourceURL(uint64_t *a1, unint64_t a2, unint64_t a3, CFTypeRef *a4, CFTypeRef *a5)
{
  CFTypeRef v16 = 0;
  CFTypeRef cf = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  if (!a1) {
    goto LABEL_15;
  }
  uint64_t v7 = *a1;
  uint64_t v8 = *(void *)(*a1 + 72);
  uint64_t UnrefinedSampleLocationInByteStreamOrDataSourceURL = FigPartialSampleTableAccessorGetUnrefinedSampleLocationInByteStreamOrDataSourceURL(a1, a2, a3, (unint64_t)&v15, (unint64_t)&v14);
  if (UnrefinedSampleLocationInByteStreamOrDataSourceURL) {
    goto LABEL_16;
  }
  if (a4 && v15)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t))(v7 + 40);
    if (v10)
    {
      uint64_t UnrefinedSampleLocationInByteStreamOrDataSourceURL = v10(v8);
      if (!UnrefinedSampleLocationInByteStreamOrDataSourceURL) {
        goto LABEL_7;
      }
LABEL_16:
      uint64_t v12 = UnrefinedSampleLocationInByteStreamOrDataSourceURL;
      goto LABEL_17;
    }
LABEL_15:
    uint64_t UnrefinedSampleLocationInByteStreamOrDataSourceURL = FigSignalErrorAt();
    goto LABEL_16;
  }
LABEL_7:
  if (!a5 || !v14) {
    goto LABEL_11;
  }
  unint64_t v11 = *(uint64_t (**)(uint64_t))(v7 + 48);
  if (!v11) {
    goto LABEL_15;
  }
  uint64_t UnrefinedSampleLocationInByteStreamOrDataSourceURL = v11(v8);
  if (UnrefinedSampleLocationInByteStreamOrDataSourceURL) {
    goto LABEL_16;
  }
LABEL_11:
  if (a4)
  {
    *a4 = cf;
    CFTypeRef cf = 0;
  }
  uint64_t v12 = 0;
  if (a5)
  {
    *a5 = v16;
    CFTypeRef v16 = 0;
  }
LABEL_17:
  if (cf) {
    CFRelease(cf);
  }
  if (v16) {
    CFRelease(v16);
  }
  return v12;
}

uint64_t FigPartialSampleTableAccessorCopyTranslatedFormatDescription(uint64_t *a1, CFTypeRef *a2)
{
  uint64_t v8 = 0;
  CFTypeRef cf = 0;
  if (a1)
  {
    uint64_t v3 = *a1;
    uint64_t v4 = *(void *)(*a1 + 72);
    uint64_t FormatDescriptionIdentifier = FigPartialSampleTableAccessorGetFormatDescriptionIdentifier(a1, &v8);
    if (!FormatDescriptionIdentifier && a2 && v8)
    {
      unint64_t v6 = *(uint64_t (**)(uint64_t))(v3 + 56);
      if (v6)
      {
        uint64_t FormatDescriptionIdentifier = v6(v4);
        if (FormatDescriptionIdentifier)
        {
          if (cf) {
            CFRelease(cf);
          }
        }
        else
        {
          *a2 = cf;
        }
      }
      else
      {
        return FigSignalErrorAt();
      }
    }
    return FormatDescriptionIdentifier;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigPartialSampleTableAccessorCopyTranslatedSampleDependencyAttributes(void *a1, void *a2)
{
  if (a1)
  {
    uint64_t v3 = 0;
    if (!a2 || a1[18] == -1) {
      return v3;
    }
    uint64_t v4 = *(uint64_t (**)(void))(*a1 + 64);
    if (v4)
    {
      uint64_t v3 = v4(*(void *)(*a1 + 72));
      if (!v3) {
        *a2 = 0;
      }
      return v3;
    }
  }

  return FigSignalErrorAt();
}

uint64_t FigPartialSampleTableAccessorCopyChunkDetailsInTranslatedByteStreamOrDataSourceURL(uint64_t *a1, _OWORD *a2, CFTypeRef *a3, CFTypeRef *a4, unint64_t a5, unint64_t a6)
{
  CFTypeRef v17 = 0;
  CFTypeRef cf = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  if (!a1) {
    goto LABEL_15;
  }
  uint64_t v8 = *a1;
  uint64_t v9 = *(void *)(*a1 + 72);
  uint64_t ChunkDetailsInByteStreamOrDataSourceURL = FigPartialSampleTableAccessorGetChunkDetailsInByteStreamOrDataSourceURL(a1, a2, (unint64_t)&v16, (unint64_t)&v15, a5, a6);
  if (ChunkDetailsInByteStreamOrDataSourceURL) {
    goto LABEL_16;
  }
  if (a3 && v16)
  {
    unint64_t v11 = *(uint64_t (**)(uint64_t))(v8 + 40);
    if (v11)
    {
      uint64_t ChunkDetailsInByteStreamOrDataSourceURL = v11(v9);
      if (!ChunkDetailsInByteStreamOrDataSourceURL) {
        goto LABEL_7;
      }
LABEL_16:
      uint64_t v13 = ChunkDetailsInByteStreamOrDataSourceURL;
      goto LABEL_17;
    }
LABEL_15:
    uint64_t ChunkDetailsInByteStreamOrDataSourceURL = FigSignalErrorAt();
    goto LABEL_16;
  }
LABEL_7:
  if (!a4 || !v15) {
    goto LABEL_11;
  }
  uint64_t v12 = *(uint64_t (**)(uint64_t))(v8 + 48);
  if (!v12) {
    goto LABEL_15;
  }
  uint64_t ChunkDetailsInByteStreamOrDataSourceURL = v12(v9);
  if (ChunkDetailsInByteStreamOrDataSourceURL) {
    goto LABEL_16;
  }
LABEL_11:
  if (a3)
  {
    *a3 = cf;
    CFTypeRef cf = 0;
  }
  uint64_t v13 = 0;
  if (a4)
  {
    *a4 = v17;
    CFTypeRef v17 = 0;
  }
LABEL_17:
  if (cf) {
    CFRelease(cf);
  }
  if (v17) {
    CFRelease(v17);
  }
  return v13;
}

uint64_t FigPartialSampleTableBuildFromFigSampleCursorAndWriteToBlockBuffer(const void *a1, OpaqueCMBlockBuffer *a2, void *a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, unsigned __int8 a8, int a9, int a10, CMTimeValue *a11, _DWORD *a12, char *a13)
{
  uint64_t v269 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  CFTypeRef v243 = 0;
  CFTypeRef v240 = 0;
  CFTypeRef v241 = 0;
  uint64_t v13 = (_OWORD *)MEMORY[0x1E4F1F9F8];
  uint64_t v239 = 0;
  CMTimeValue value = *MEMORY[0x1E4F1F9F8];
  CMTimeScale timescale = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 8);
  if (a10 <= 0)
  {
LABEL_442:
    uint64_t v28 = FigSignalErrorAt();
LABEL_443:
    uint64_t v96 = v28;
    goto LABEL_422;
  }
  CMTimeFlags flags = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 12);
  CMTimeEpoch v225 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  if (a10 >= a9) {
    int v18 = a9;
  }
  else {
    int v18 = a10;
  }
  int v219 = v18;
  uint64_t v218 = *MEMORY[0x1E4F1CF80];
  int v230 = a10;
  int v221 = a8;
  if (!a6
    || (char)a8 < 1
    || ((CFDictionaryRef dictionaryRepresentation = 0,
         uint64_t FigBaseObject = FigSampleCursorGetFigBaseObject(a1),
         (uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 8)) == 0)
      ? (uint64_t v21 = 0)
      : (uint64_t v21 = v20),
        (uint64_t v22 = *(void (**)(uint64_t, __CFString *, uint64_t, CFDictionaryRef *))(v21 + 48)) == 0))
  {
    CMTimeEpoch epoch = v225;
LABEL_15:
    CMTimeEpoch v216 = epoch;
    goto LABEL_16;
  }
  v22(FigBaseObject, @"CursorPlayableHorizon", v218, &dictionaryRepresentation);
  CMTimeEpoch v216 = v225;
  if (dictionaryRepresentation)
  {
    *(_OWORD *)&range.start.CMTimeValue value = *v13;
    range.start.CMTimeEpoch epoch = v225;
    memset(time2, 0, 24);
    CMTimeMakeFromDictionary((CMTime *)time2, dictionaryRepresentation);
    CFRelease(dictionaryRepresentation);
    uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v23) {
      uint64_t v24 = v23;
    }
    else {
      uint64_t v24 = 0;
    }
    uint64_t v214 = *(void (**)(const void *, CMTimeRange *))(v24 + 40);
    if (v214) {
      v214(a1, &range);
    }
    CMTime start = range.start;
    CMTime v236 = *(CMTime *)time2;
    CMTimeAdd(&v238, &start, &v236);
    CMTimeValue value = v238.value;
    CMTimeFlags flags = v238.flags;
    CMTimeScale timescale = v238.timescale;
    CMTimeEpoch epoch = v238.epoch;
    goto LABEL_15;
  }
LABEL_16:
  int v26 = 0;
  uint64_t v231 = 0;
  int v226 = 0;
  v223 = (uint64_t (**)(uint64_t))(a3 + 1);
  v228 = (uint64_t (**)(uint64_t))(a3 + 2);
  v215 = a3 + 3;
  CMTimeValue v232 = -1;
  char v224 = 1;
  long long v27 = *v13;
  long long v227 = *v13;
  while (1)
  {
    *(_OWORD *)&v238.CMTimeValue value = v27;
    v238.CMTimeEpoch epoch = v225;
    uint64_t v28 = FigPartialSampleTableCreateForWriting(v218, a2, a5, (uint64_t *)&v243);
    if (v28) {
      goto LABEL_443;
    }
    uint64_t v29 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v29) {
      uint64_t v30 = v29;
    }
    else {
      uint64_t v30 = 0;
    }
    uint64_t v31 = *(uint64_t (**)(const void *, CFTypeRef *))(v30 + 8);
    if (!v31) {
      goto LABEL_421;
    }
    uint64_t v28 = v31(a1, &cf);
    if (v28) {
      goto LABEL_443;
    }
    uint64_t v32 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v33 = v32 ? v32 : 0;
    CMTime v34 = *(uint64_t (**)(const void *, CMTime *))(v33 + 48);
    if (!v34) {
      goto LABEL_421;
    }
    uint64_t v28 = v34(a1, &v238);
    if (v28) {
      goto LABEL_443;
    }
    int v35 = v221;
    if ((v221 & 0x80) != 0)
    {
      if ((*(unsigned char *)(a7 + 12) & 1) == 0) {
        goto LABEL_70;
      }
      if ((*(unsigned char *)(a7 + 36) & 1) == 0) {
        goto LABEL_70;
      }
      if (*(void *)(a7 + 40)) {
        goto LABEL_70;
      }
      if ((*(void *)(a7 + 24) & 0x8000000000000000) != 0) {
        goto LABEL_70;
      }
      long long v211 = *(_OWORD *)(a7 + 16);
      *(_OWORD *)&range.start.CMTimeValue value = *(_OWORD *)a7;
      *(_OWORD *)&range.start.CMTimeEpoch epoch = v211;
      *(_OWORD *)&range.duration.CMTimeScale timescale = *(_OWORD *)(a7 + 32);
      CMTimeRangeGetEnd(&v235, &range);
      range.CMTime start = v238;
      if (CMTimeCompare(&range.start, &v235) < 0) {
        goto LABEL_70;
      }
      int v35 = 1;
    }
    else if (!v221)
    {
      if (a1) {
        CFTypeRef v61 = CFRetain(a1);
      }
      else {
        CFTypeRef v61 = 0;
      }
      int v221 = 0;
      goto LABEL_135;
    }
    int v221 = v35;
    if ((*(unsigned char *)(a7 + 12) & 1) != 0
      && (*(unsigned char *)(a7 + 36) & 1) != 0
      && !*(void *)(a7 + 40)
      && (*(void *)(a7 + 24) & 0x8000000000000000) == 0)
    {
      range.CMTime start = v238;
      *(_OWORD *)CMTime time2 = *(_OWORD *)a7;
      *(void *)&time2[16] = *(void *)(a7 + 16);
      if (CMTimeCompare(&range.start, (CMTime *)time2) <= 0)
      {
        int v221 = 255;
LABEL_70:
        CFTypeRef v54 = cf;
        uint64_t v55 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v55) {
          uint64_t v56 = v55;
        }
        else {
          uint64_t v56 = 0;
        }
        CMTimeEpoch v65 = *(void (**)(CFTypeRef, uint64_t, void))(v56 + 168);
        if (v65) {
          v65(v54, -15, 0);
        }
        uint64_t v66 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v66) {
          uint64_t v67 = v66;
        }
        else {
          uint64_t v67 = 0;
        }
        uint64_t v68 = *(uint64_t (**)(const void *, CFTypeRef *))(v67 + 8);
        if (!v68) {
          goto LABEL_421;
        }
        uint64_t v28 = v68(a1, &v240);
        if (v28) {
          goto LABEL_443;
        }
        if (v219 >= 1)
        {
          uint64_t v69 = 1;
          while ((*(unsigned char *)(a7 + 12) & 1) != 0
               && (*(unsigned char *)(a7 + 36) & 1) != 0
               && !*(void *)(a7 + 40)
               && (*(void *)(a7 + 24) & 0x8000000000000000) == 0)
          {
            CFTypeRef v81 = v240;
            uint64_t v82 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v82) {
              uint64_t v83 = v82;
            }
            else {
              uint64_t v83 = 0;
            }
            double v84 = *(uint64_t (**)(CFTypeRef, CMTime *))(v83 + 48);
            if (!v84) {
              goto LABEL_421;
            }
            uint64_t v28 = v84(v81, &v238);
            if (v28) {
              goto LABEL_443;
            }
            *(_OWORD *)&range.start.CMTimeValue value = *(_OWORD *)a7;
            range.start.CMTimeEpoch epoch = *(void *)(a7 + 16);
            *(CMTime *)CMTime time2 = v238;
            if (CMTimeCompare(&range.start, (CMTime *)time2) < 1) {
              goto LABEL_136;
            }
LABEL_109:
            CFTypeRef v76 = v240;
            uint64_t v77 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v77) {
              uint64_t v78 = v77;
            }
            else {
              uint64_t v78 = 0;
            }
            CMTimeValue v79 = *(void (**)(CFTypeRef, uint64_t, uint64_t *))(v78 + 168);
            if (v79) {
              v79(v76, 1, &v239);
            }
            if (v239 == 1)
            {
              BOOL v47 = v69++ < v219;
              if (v47) {
                continue;
              }
            }
            goto LABEL_128;
          }
          uint64_t v70 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v70) {
            uint64_t v71 = v70;
          }
          else {
            uint64_t v71 = 0;
          }
          if (!*(void *)(v71 + 80)) {
            goto LABEL_128;
          }
          CFTypeRef v72 = v240;
          uint64_t v73 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v73)
          {
            uint64_t v74 = v73;
            if (a1)
            {
LABEL_105:
              uint64_t v75 = *(void *)(CMBaseObjectGetVTable() + 16);
LABEL_108:
              if (v74 == v75)
              {
                long long v80 = *(unsigned int (**)(CFTypeRef, const void *, uint64_t))(v74 + 80);
                if (v80)
                {
                  if (v80(v72, a1, 1)) {
                    goto LABEL_136;
                  }
                }
              }
              goto LABEL_109;
            }
          }
          else
          {
            uint64_t v74 = 0;
            if (a1) {
              goto LABEL_105;
            }
          }
          uint64_t v75 = 0;
          goto LABEL_108;
        }
LABEL_128:
        if (v240)
        {
          CFRelease(v240);
          CFTypeRef v240 = 0;
        }
        if (a1) {
          CFTypeRef v61 = CFRetain(a1);
        }
        else {
          CFTypeRef v61 = 0;
        }
LABEL_135:
        CFTypeRef v240 = v61;
        goto LABEL_136;
      }
    }
    if (v219 >= 1)
    {
      uint64_t v36 = 1;
      while ((*(unsigned char *)(a7 + 12) & 1) != 0
           && (*(unsigned char *)(a7 + 36) & 1) != 0
           && !*(void *)(a7 + 40)
           && (*(void *)(a7 + 24) & 0x8000000000000000) == 0)
      {
        CFTypeRef v49 = cf;
        uint64_t v50 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v50) {
          uint64_t v51 = v50;
        }
        else {
          uint64_t v51 = 0;
        }
        uint64_t v52 = *(uint64_t (**)(CFTypeRef, CMTime *))(v51 + 48);
        if (!v52) {
          goto LABEL_421;
        }
        uint64_t v28 = v52(v49, &v238);
        if (v28) {
          goto LABEL_443;
        }
        long long v53 = *(_OWORD *)(a7 + 16);
        *(_OWORD *)&range.start.CMTimeValue value = *(_OWORD *)a7;
        *(_OWORD *)&range.start.CMTimeEpoch epoch = v53;
        *(_OWORD *)&range.duration.CMTimeScale timescale = *(_OWORD *)(a7 + 32);
        CMTimeRangeGetEnd(&time1, &range);
        range.CMTime start = v238;
        if ((CMTimeCompare(&time1, &range.start) & 0x80000000) == 0) {
          goto LABEL_136;
        }
LABEL_48:
        CFTypeRef v43 = cf;
        uint64_t v44 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v44) {
          uint64_t v45 = v44;
        }
        else {
          uint64_t v45 = 0;
        }
        CFRange v46 = *(void (**)(CFTypeRef, uint64_t, uint64_t *))(v45 + 168);
        if (v46) {
          v46(v43, -1, &v239);
        }
        if (v239 == -1)
        {
          BOOL v47 = v36++ < v219;
          if (v47) {
            continue;
          }
        }
        goto LABEL_72;
      }
      uint64_t v37 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v37) {
        uint64_t v38 = v37;
      }
      else {
        uint64_t v38 = 0;
      }
      if (!*(void *)(v38 + 80)) {
        goto LABEL_72;
      }
      CFTypeRef v39 = cf;
      uint64_t v40 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v40)
      {
        uint64_t v41 = v40;
        if (a1)
        {
LABEL_44:
          uint64_t v42 = *(void *)(CMBaseObjectGetVTable() + 16);
LABEL_47:
          if (v41 == v42)
          {
            uint64_t v48 = *(unsigned int (**)(CFTypeRef, const void *, void))(v41 + 80);
            if (v48)
            {
              if (v48(v39, a1, 0)) {
                goto LABEL_136;
              }
            }
          }
          goto LABEL_48;
        }
      }
      else
      {
        uint64_t v41 = 0;
        if (a1) {
          goto LABEL_44;
        }
      }
      uint64_t v42 = 0;
      goto LABEL_47;
    }
LABEL_72:
    CFTypeRef v57 = cf;
    uint64_t v58 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v58)
    {
      uint64_t v59 = v58;
      if (!v57) {
        goto LABEL_78;
      }
    }
    else
    {
      uint64_t v59 = 0;
      if (!v57)
      {
LABEL_78:
        uint64_t v60 = 0;
        goto LABEL_79;
      }
    }
    uint64_t v60 = *(void *)(CMBaseObjectGetVTable() + 16);
LABEL_79:
    if (v59 == v60)
    {
      uint64_t v62 = *(uint64_t (**)(const void *, CFTypeRef))(v59 + 32);
      if (v62)
      {
        if (v62(a1, v57))
        {
          if (cf)
          {
            CFRelease(cf);
            CFTypeRef cf = 0;
          }
          uint64_t v63 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v63) {
            uint64_t v64 = v63;
          }
          else {
            uint64_t v64 = 0;
          }
          uint64_t v212 = *(uint64_t (**)(const void *, CFTypeRef *))(v64 + 8);
          if (!v212) {
            goto LABEL_421;
          }
          uint64_t v28 = v212(a1, &cf);
          if (v28) {
            goto LABEL_443;
          }
        }
      }
    }
LABEL_136:
    CFTypeRef v85 = cf;
    uint64_t v86 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v86) {
      uint64_t v87 = v86;
    }
    else {
      uint64_t v87 = 0;
    }
    double v88 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(v87 + 8);
    if (!v88) {
      goto LABEL_421;
    }
    uint64_t v28 = v88(v85, &v241);
    if (v28) {
      goto LABEL_443;
    }
    CFTypeRef v89 = v241;
    uint64_t v90 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v91 = v90 ? v90 : 0;
    uint64_t v92 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t *))(v91 + 168);
    if (!v92)
    {
LABEL_421:
      uint64_t v96 = 4294954514;
      break;
    }
    uint64_t v93 = v92(v89, 1, &v239);
    BOOL v94 = v230 == 1 && v93 == -12840;
    int v95 = HIDWORD(v231);
    if (v94) {
      int v95 = 1;
    }
    HIDWORD(v231) = v95;
    if (v93)
    {
      uint64_t v96 = v93;
      if (v93 != -12840) {
        break;
      }
    }
    if (v239 != 1 && v241)
    {
      CFRelease(v241);
      CFTypeRef v241 = 0;
    }
    int v229 = 0;
    CMTimeValue v97 = 0;
    do
    {
      int v98 = v26;
      uint64_t v233 = 0;
      CFTypeRef v99 = v241;
      if (!v241)
      {
        if (v226) {
          goto LABEL_442;
        }
        int v226 = 1;
      }
      CFTypeRef v101 = cf;
      CFTypeRef v100 = v243;
      long long v268 = 0u;
      memset(v267, 0, sizeof(v267));
      memset(v266, 0, sizeof(v266));
      memset(v265, 0, sizeof(v265));
      memset(v264, 0, sizeof(v264));
      memset(v263, 0, sizeof(v263));
      long long v261 = 0u;
      memset(v262, 0, sizeof(v262));
      long long v260 = 0u;
      memset(&range, 0, sizeof(range));
      start.CMTimeValue value = 0;
      v236.CMTimeValue value = 0;
      CFDictionaryRef dictionaryRepresentation = 0;
      CFTypeRef v255 = 0;
      CFTypeRef v254 = 0;
      CFTypeRef v253 = 0;
      if ((a5 & 8) != 0)
      {
        CMTimeEpoch v102 = 0;
        CMTimeValue v103 = 0;
        *(void *)CMTime time2 = 0;
        CMTimeEpoch v252 = 0;
        if ((a5 & 0x10) == 0)
        {
          uint64_t v104 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v104) {
            uint64_t v105 = v104;
          }
          else {
            uint64_t v105 = 0;
          }
          uint64_t v106 = *(uint64_t (**)(CFTypeRef, unsigned char *, CMTimeEpoch *, CMTime *, CMTime *))(v105 + 144);
          if (!v106) {
            goto LABEL_289;
          }
          uint64_t appended = v106(v101, time2, &v252, &start, &v236);
          if (appended) {
            goto LABEL_255;
          }
          CMTimeValue v103 = *(void *)time2;
          CMTimeEpoch v102 = v252;
        }
        range.start.CMTimeValue value = v103;
        *(void *)&range.start.CMTimeScale timescale = v102;
        range.start.CMTimeEpoch epoch = 0;
        range.duration.CMTimeValue value = 0;
      }
      if ((a5 & 4) != 0)
      {
        *(void *)CMTime time2 = 0;
        CMTimeEpoch v252 = 0;
        uint64_t v251 = 0;
        uint64_t v250 = 0;
        __int16 v249 = 0;
        char v248 = 0;
        uint64_t v111 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v111) {
          uint64_t v112 = v111;
        }
        else {
          uint64_t v112 = 0;
        }
        long long v115 = *(uint64_t (**)(CFTypeRef, CFTypeRef *, CFTypeRef *, unsigned char *, CMTimeEpoch *, uint64_t *, uint64_t *, char *, __int16 *, char *))(v112 + 152);
        if (!v115) {
          goto LABEL_289;
        }
        uint64_t appended = v115(v101, &v255, &v254, time2, &v252, &v251, &v250, (char *)&v249 + 1, &v249, &v248);
        if (appended) {
          goto LABEL_255;
        }
        BYTE10(v260) = v248;
        BYTE8(v260) = HIBYTE(v249);
        BYTE9(v260) = v249;
        *(void *)&long long v260 = v251;
        *(void *)&range.duration.CMTimeScale timescale = *(void *)time2;
        range.duration.CMTimeEpoch epoch = v252;
        *(void *)&long long v261 = v250;
        double v109 = v223;
        if (v236.value)
        {
          if ((CFTypeRef)v236.value != v254) {
            goto LABEL_254;
          }
        }
        else
        {
          v236.CMTimeValue value = (CMTimeValue)v254;
          CFTypeRef v254 = 0;
        }
        CMTimeValue v108 = start.value;
        CFTypeRef v119 = v255;
        if (start.value)
        {
          if ((CFTypeRef)start.value != v255) {
            goto LABEL_254;
          }
        }
        else
        {
          start.CMTimeValue value = (CMTimeValue)v255;
          CFTypeRef v255 = 0;
          CMTimeValue v108 = (CMTimeValue)v119;
        }
      }
      else
      {
        CMTimeValue v108 = start.value;
        double v109 = v223;
      }
      double v110 = v228;
      if (v108)
      {
        *(void *)CMTime time2 = 0;
        if (!*v109) {
          goto LABEL_254;
        }
        uint64_t appended = (*v109)(a4);
        if (appended) {
          goto LABEL_255;
        }
        *((void *)&v261 + 1) = *(void *)time2;
        double v110 = v228;
      }
      else
      {
        *((void *)&v261 + 1) = 0;
      }
      if (v236.value)
      {
        *(void *)CMTime time2 = 0;
        if (!*v110) {
          goto LABEL_254;
        }
        uint64_t appended = (*v110)(a4);
        if (appended) {
          goto LABEL_255;
        }
        v262[0] = *(void *)time2;
      }
      else
      {
        v262[0] = 0;
      }
      uint64_t v247 = 0;
      long long v245 = 0u;
      long long v246 = 0u;
      memset(time2, 0, sizeof(time2));
      uint64_t v113 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v113) {
        uint64_t v114 = v113;
      }
      else {
        uint64_t v114 = 0;
      }
      long long v116 = *(uint64_t (**)(CFTypeRef, long long *))(v114 + 48);
      if (v116)
      {
        uint64_t appended = v116(v101, &v246);
        if (appended) {
          goto LABEL_255;
        }
        uint64_t v117 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v118 = v117 ? v117 : 0;
        long long v120 = *(uint64_t (**)(CFTypeRef, unsigned char *))(v118 + 40);
        if (v120)
        {
          uint64_t appended = v120(v101, &time2[24]);
          if (appended) {
            goto LABEL_255;
          }
          uint64_t v121 = *(void *)(CMBaseObjectGetVTable() + 16);
          uint64_t v122 = v121 ? v121 : 0;
          uint64_t v123 = *(uint64_t (**)(CFTypeRef, unsigned char *))(v122 + 56);
          if (v123)
          {
            uint64_t appended = v123(v101, time2);
            if (appended) {
              goto LABEL_255;
            }
            *(_OWORD *)&v262[5] = v245;
            *(_OWORD *)&v262[7] = v246;
            v262[9] = v247;
            *(_OWORD *)&v262[1] = *(_OWORD *)time2;
            *(_OWORD *)&v262[3] = *(_OWORD *)&time2[16];
            if ((a5 & 0x100) != 0)
            {
              uint64_t v124 = *(void *)(CMBaseObjectGetVTable() + 16);
              uint64_t v125 = v124 ? v124 : 0;
              if (*(void *)(v125 + 200))
              {
                uint64_t v126 = *(void *)(CMBaseObjectGetVTable() + 16);
                if (v126) {
                  uint64_t v127 = v126;
                }
                else {
                  uint64_t v127 = 0;
                }
                uint64_t v128 = *(uint64_t (**)(CFTypeRef, _OWORD *, char *))(v127 + 200);
                if (!v128) {
                  goto LABEL_289;
                }
                uint64_t appended = v128(v101, v265, (char *)&v265[1] + 8);
                if (appended) {
                  goto LABEL_255;
                }
              }
            }
            if ((a5 & 0x200) != 0) {
              FigSampleCursorUtilityGetMinimumUpcomingPresentationTime((uint64_t)v101, 0, v266, &v266[1]);
            }
            if (v99)
            {
              uint64_t v129 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v129) {
                uint64_t v130 = v129;
              }
              else {
                uint64_t v130 = 0;
              }
              uint64_t v131 = *(uint64_t (**)(CFTypeRef, _OWORD *))(v130 + 48);
              if (!v131) {
                goto LABEL_289;
              }
              uint64_t appended = v131(v99, v264);
              if (appended) {
                goto LABEL_255;
              }
            }
            if ((a5 & 0x80) != 0)
            {
              CMTimeEpoch v252 = 0;
              uint64_t v134 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v134) {
                uint64_t v135 = v134;
              }
              else {
                uint64_t v135 = 0;
              }
              v136 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(v135 + 8);
              if (!v136) {
                goto LABEL_289;
              }
              uint64_t appended = v136(v101, &v253);
              if (appended) {
                goto LABEL_255;
              }
              CFTypeRef v137 = v253;
              uint64_t v138 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v138) {
                uint64_t v139 = v138;
              }
              else {
                uint64_t v139 = 0;
              }
              uint64_t v142 = *(unsigned int (**)(CFTypeRef, uint64_t, CMTimeEpoch *))(v139 + 176);
              if (v142 && !v142(v137, 1, &v252) && v252 == 1)
              {
                CFTypeRef v143 = v253;
                uint64_t v144 = *(void *)(CMBaseObjectGetVTable() + 16);
                if (v144) {
                  uint64_t v145 = v144;
                }
                else {
                  uint64_t v145 = 0;
                }
                uint64_t v150 = *(uint64_t (**)(CFTypeRef, _OWORD *))(v145 + 48);
                if (!v150) {
                  goto LABEL_289;
                }
                uint64_t appended = v150(v143, v263);
                if (appended) {
                  goto LABEL_255;
                }
                CFTypeRef v151 = v253;
                uint64_t v152 = *(void *)(CMBaseObjectGetVTable() + 16);
                uint64_t v153 = v152 ? v152 : 0;
                char v154 = *(uint64_t (**)(CFTypeRef, char *))(v153 + 40);
                if (!v154) {
                  goto LABEL_289;
                }
                uint64_t appended = v154(v151, (char *)&v264[1] + 8);
                if (appended) {
                  goto LABEL_255;
                }
              }
              if (v253)
              {
                CFRelease(v253);
                CFTypeRef v253 = 0;
              }
              uint64_t v155 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v155) {
                uint64_t v156 = v155;
              }
              else {
                uint64_t v156 = 0;
              }
              uint64_t v157 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(v156 + 8);
              if (!v157) {
                goto LABEL_289;
              }
              uint64_t appended = v157(v101, &v253);
              if (appended) {
                goto LABEL_255;
              }
              CFTypeRef v158 = v253;
              uint64_t v159 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v159) {
                uint64_t v160 = v159;
              }
              else {
                uint64_t v160 = 0;
              }
              uint64_t v161 = *(unsigned int (**)(CFTypeRef, uint64_t, CMTimeEpoch *))(v160 + 176);
              if (v161 && !v161(v158, -1, &v252) && v252 == -1)
              {
                CFTypeRef v162 = v253;
                uint64_t v163 = *(void *)(CMBaseObjectGetVTable() + 16);
                if (v163) {
                  uint64_t v164 = v163;
                }
                else {
                  uint64_t v164 = 0;
                }
                long long v165 = *(uint64_t (**)(CFTypeRef, char *))(v164 + 48);
                if (!v165) {
                  goto LABEL_289;
                }
                uint64_t appended = v165(v162, (char *)&v263[1] + 8);
                if (appended) {
                  goto LABEL_255;
                }
              }
              if (v253)
              {
                CFRelease(v253);
                CFTypeRef v253 = 0;
              }
            }
            if (a5)
            {
              uint64_t v132 = *(void *)(CMBaseObjectGetVTable() + 16);
              uint64_t v133 = v132 ? v132 : 0;
              if (*(void *)(v133 + 64))
              {
                uint64_t v140 = *(void *)(CMBaseObjectGetVTable() + 16);
                uint64_t v141 = v140 ? v140 : 0;
                uint64_t v146 = *(void (**)(CFTypeRef, unsigned char *, unsigned char *, unsigned char *, unsigned char *))(v141 + 64);
                if (v146) {
                  v146(v101, v267, &v267[1], &v267[4], &v267[2]);
                }
              }
            }
            *(void *)CMTime time2 = 0;
            if (!*v215)
            {
LABEL_254:
              uint64_t appended = FigSignalErrorAt();
LABEL_255:
              uint64_t v96 = appended;
              goto LABEL_290;
            }
            uint64_t v147 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v147) {
              uint64_t v148 = v147;
            }
            else {
              uint64_t v148 = 0;
            }
            uint64_t v149 = *(uint64_t (**)(CFTypeRef, CFDictionaryRef *))(v148 + 160);
            if (v149)
            {
              uint64_t appended = v149(v101, &dictionaryRepresentation);
              if (!appended)
              {
                uint64_t appended = ((uint64_t (*)(uint64_t, CFDictionaryRef, unsigned char *))*v215)(a4, dictionaryRepresentation, time2);
                if (!appended)
                {
                  *((void *)&v268 + 1) = *(void *)time2;
                  uint64_t appended = FigPartialSampleTableTryAppendSampleInformation((uint64_t)v100, (uint64_t)&range, &v233);
                }
              }
              goto LABEL_255;
            }
          }
        }
      }
LABEL_289:
      uint64_t v96 = 4294954514;
LABEL_290:
      if (start.value) {
        CFRelease((CFTypeRef)start.value);
      }
      if (v255) {
        CFRelease(v255);
      }
      if (v236.value) {
        CFRelease((CFTypeRef)v236.value);
      }
      if (v254) {
        CFRelease(v254);
      }
      if (dictionaryRepresentation) {
        CFRelease(dictionaryRepresentation);
      }
      if (v253) {
        CFRelease(v253);
      }
      if (v96) {
        goto LABEL_422;
      }
      uint64_t v166 = v233;
      CFTypeRef v167 = v241;
      if (v233 >= 2)
      {
        if (!v241)
        {
          char v224 = 0;
          goto LABEL_325;
        }
        uint64_t v168 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v168) {
          uint64_t v169 = v168;
        }
        else {
          uint64_t v169 = 0;
        }
        long long v170 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t *))(v169 + 168);
        if (!v170) {
          goto LABEL_421;
        }
        uint64_t v171 = v170(v167, v166 - 1, &v239);
        if (v171)
        {
          uint64_t v96 = v171;
          if (v171 != -12840) {
            goto LABEL_422;
          }
        }
        char v224 = 0;
        CFTypeRef v167 = v241;
        if (v239 != v166 - 1 && v241)
        {
          CFRelease(v241);
          char v224 = 0;
          CFTypeRef v241 = 0;
          goto LABEL_325;
        }
      }
      if (v167 && (flags & 0x1D) == 1)
      {
        *(_OWORD *)&range.start.CMTimeValue value = v227;
        range.start.CMTimeEpoch epoch = v225;
        uint64_t v172 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v172) {
          uint64_t v173 = v172;
        }
        else {
          uint64_t v173 = 0;
        }
        long long v174 = *(void (**)(CFTypeRef, CMTimeRange *))(v173 + 40);
        if (v174) {
          v174(v167, &range);
        }
        if ((range.start.flags & 0x1D) == 1)
        {
          *(_OWORD *)CMTime time2 = *(_OWORD *)&range.start.value;
          *(void *)&time2[16] = range.start.epoch;
          start.CMTimeValue value = value;
          start.CMTimeScale timescale = timescale;
          start.CMTimeFlags flags = flags;
          start.CMTimeEpoch epoch = v216;
          LOBYTE(v231) = CMTimeCompare((CMTime *)time2, &start) >= 0;
        }
        else
        {
          LOBYTE(v231) = 0;
        }
      }
LABEL_325:
      if (v232 != -1 || v233 < 1) {
        goto LABEL_334;
      }
      CFTypeRef v175 = cf;
      uint64_t v176 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v176)
      {
        uint64_t v177 = v176;
        if (!a1) {
          goto LABEL_331;
        }
      }
      else
      {
        uint64_t v177 = 0;
        if (!a1)
        {
LABEL_331:
          uint64_t v178 = 0;
          goto LABEL_332;
        }
      }
      uint64_t v178 = *(void *)(CMBaseObjectGetVTable() + 16);
LABEL_332:
      if (v177 != v178
        || (int v197 = *(uint64_t (**)(CFTypeRef, const void *))(v177 + 32)) == 0
        || !v197(v175, a1))
      {
        int v229 = 1;
        CMTimeValue v232 = v97;
        goto LABEL_334;
      }
      if (v233 < 2)
      {
LABEL_381:
        CMTimeValue v232 = -1;
        goto LABEL_334;
      }
      CFTypeRef v198 = v241;
      if (!v241) {
        goto LABEL_384;
      }
      uint64_t v199 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v199)
      {
        uint64_t v200 = v199;
        if (!a1) {
          goto LABEL_379;
        }
      }
      else
      {
        uint64_t v200 = 0;
        if (!a1)
        {
LABEL_379:
          uint64_t v201 = 0;
          goto LABEL_380;
        }
      }
      uint64_t v201 = *(void *)(CMBaseObjectGetVTable() + 16);
LABEL_380:
      if (v200 != v201) {
        goto LABEL_381;
      }
      v202 = *(uint64_t (**)(CFTypeRef, const void *))(v200 + 32);
      if (!v202 || v202(v198, a1) != 1) {
        goto LABEL_381;
      }
LABEL_384:
      range.start.CMTimeValue value = 0;
      *(void *)CMTime time2 = 0;
      start.CMTimeValue value = 0;
      v236.CMTimeValue value = 0;
      uint64_t v203 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v203) {
        uint64_t v204 = v203;
      }
      else {
        uint64_t v204 = 0;
      }
      v205 = *(uint64_t (**)(const void *, void, void, CMTime *, void, void, CMTimeRange *, void, void, void))(v204 + 152);
      if (!v205) {
        goto LABEL_421;
      }
      uint64_t v28 = v205(a1, 0, 0, &start, 0, 0, &range, 0, 0, 0);
      if (v28) {
        goto LABEL_443;
      }
      CFTypeRef v206 = cf;
      uint64_t v207 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v208 = v207 ? v207 : 0;
      uint64_t v209 = *(uint64_t (**)(CFTypeRef, void, void, CMTime *, void, void, unsigned char *, void, void, void))(v208 + 152);
      if (!v209) {
        goto LABEL_421;
      }
      uint64_t v28 = v209(v206, 0, 0, &v236, 0, 0, time2, 0, 0, 0);
      if (v28) {
        goto LABEL_443;
      }
      if (v236.value != start.value) {
        goto LABEL_442;
      }
      CMTimeValue v232 = range.start.value + v97 - *(void *)time2;
      int v229 = 1;
LABEL_334:
      if (BYTE4(v231))
      {
        CMTimeValue v232 = v233 - 1;
        goto LABEL_399;
      }
      if ((_BYTE)v231 && v229) {
        goto LABEL_399;
      }
      CFTypeRef v179 = v241;
      if (v241)
      {
        uint64_t v180 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v180) {
          uint64_t v181 = v180;
        }
        else {
          uint64_t v181 = 0;
        }
        long long v182 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t *))(v181 + 168);
        if (!v182) {
          goto LABEL_421;
        }
        uint64_t v183 = v182(v179, 1, &v239);
        if (v183)
        {
          uint64_t v96 = v183;
          if (v183 != -12840) {
            goto LABEL_422;
          }
        }
        if (v239 != 1 && v241)
        {
          CFRelease(v241);
          CFTypeRef v241 = 0;
        }
      }
      CFTypeRef v184 = v240;
      if (v240)
      {
        CFTypeRef v185 = cf;
        uint64_t v186 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v186) {
          uint64_t v187 = v186;
        }
        else {
          uint64_t v187 = 0;
        }
        if (v187 == *(void *)(CMBaseObjectGetVTable() + 16)
          && (uint64_t v196 = *(uint64_t (**)(CFTypeRef, CFTypeRef))(v187 + 32)) != 0)
        {
          uint64_t v189 = v196(v185, v184);
        }
        else
        {
          uint64_t v189 = 0;
        }
        BOOL v188 = v189 == -1;
      }
      else
      {
        BOOL v188 = 1;
      }
      CFTypeRef v190 = cf;
      uint64_t v191 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v191) {
        uint64_t v192 = v191;
      }
      else {
        uint64_t v192 = 0;
      }
      long long v193 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t *))(v192 + 168);
      if (v193) {
        int v194 = v193(v190, v166, &v239);
      }
      else {
        int v194 = -12782;
      }
      if (v166 <= 0 || !v188) {
        break;
      }
      if (v98 >= v230) {
        break;
      }
      if (v194) {
        break;
      }
      v97 += v166;
      int v26 = v98 + 1;
    }
    while (v239 == v166);
    if (!v229)
    {
      int v219 = 0;
      int v210 = 0;
      int v230 = 1;
      goto LABEL_401;
    }
LABEL_399:
    uint64_t v28 = FigPartialSampleTableFinishWriting((uint64_t)v243);
    if (v28) {
      goto LABEL_443;
    }
    int v210 = 1;
LABEL_401:
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    if (v241)
    {
      CFRelease(v241);
      CFTypeRef v241 = 0;
    }
    if (v240)
    {
      CFRelease(v240);
      CFTypeRef v240 = 0;
    }
    if (v243)
    {
      CFRelease(v243);
      CFTypeRef v243 = 0;
    }
    int v26 = v98 + 1;
    long long v27 = v227;
    if (v210)
    {
      if (a12) {
        *a12 = v98 + 1;
      }
      if (a11) {
        *a11 = v232;
      }
      uint64_t v96 = 0;
      if (a13) {
        *a13 = v224;
      }
      break;
    }
  }
LABEL_422:
  if (cf) {
    CFRelease(cf);
  }
  if (v241) {
    CFRelease(v241);
  }
  if (v240) {
    CFRelease(v240);
  }
  if (v243) {
    CFRelease(v243);
  }
  return v96;
}

uint64_t FigPartialSampleTableOutOfBandObjectRegistryGetTypeID()
{
  if (FigPartialSampleTableOutOfBandObjectRegistryGetTypeID_sRegisterFigPartialSampleTableOutOfBandObjectRegistryTypeOnce != -1) {
    dispatch_once_f(&FigPartialSampleTableOutOfBandObjectRegistryGetTypeID_sRegisterFigPartialSampleTableOutOfBandObjectRegistryTypeOnce, 0, (dispatch_function_t)registerFigPartialSampleTableOutOfBandObjectRegistryType);
  }
  return sFigPartialSampleTableOutOfBandObjectRegistryID;
}

uint64_t registerFigPartialSampleTableOutOfBandObjectRegistryType()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sFigPartialSampleTableOutOfBandObjectRegistryID = result;
  return result;
}

uint64_t FigPartialSampleTableOutOfBandObjectRegistryCreate(uint64_t a1, void *a2)
{
  if (!a2) {
    goto LABEL_9;
  }
  if (FigPartialSampleTableOutOfBandObjectRegistryGetTypeID_sRegisterFigPartialSampleTableOutOfBandObjectRegistryTypeOnce != -1) {
    dispatch_once_f(&FigPartialSampleTableOutOfBandObjectRegistryGetTypeID_sRegisterFigPartialSampleTableOutOfBandObjectRegistryTypeOnce, 0, (dispatch_function_t)registerFigPartialSampleTableOutOfBandObjectRegistryType);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    uint64_t v4 = (void *)Instance;
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    v4[3] = Mutable;
    if (Mutable && (uint64_t v6 = FigSimpleMutexCreate(), (v4[2] = v6) != 0))
    {
      *a2 = v4;
      return 0;
    }
    else
    {
      uint64_t v8 = FigSignalErrorAt();
      CFRelease(v4);
      return v8;
    }
  }
  else
  {
LABEL_9:
    return FigSignalErrorAt();
  }
}

uint64_t FigPartialSampleTableOutOfBandObjectRegistryLookupAndRetainObjectForID(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  if (a1 && a2 && a3 && a4)
  {
    MEMORY[0x19970E910](*(void *)(a1 + 16));
    CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 24), a2);
    if (Value && (CFArrayRef v9 = Value, v10 = a3 - 1, CFArrayGetCount(Value) > v10))
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v9, v10);
      if (ValueAtIndex) {
        CFDictionaryRef ValueAtIndex = CFRetain(ValueAtIndex);
      }
      uint64_t v12 = 0;
      *a4 = ValueAtIndex;
    }
    else
    {
      uint64_t v12 = FigSignalErrorAt();
    }
    MEMORY[0x19970E930](*(void *)(a1 + 16));
    return v12;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigPartialSampleTableOutOfBandObjectRegistryRegisterObjectForKnownID(uint64_t a1, const void *a2, uint64_t a3, CFTypeRef cf)
{
  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        if (cf)
        {
          CFTypeID v8 = CFGetTypeID(cf);
          if (v8 != CFNullGetTypeID())
          {
            MEMORY[0x19970E910](*(void *)(a1 + 16));
            CFArrayRef Value = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 24), a2);
            if (!Value)
            {
              CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
              if (!Mutable) {
                goto LABEL_22;
              }
              CFArrayRef Value = Mutable;
              CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 24), a2, Mutable);
              CFRelease(Value);
            }
            CFIndex v11 = a3 - 1;
            if (CFArrayGetCount((CFArrayRef)Value) <= v11)
            {
              if (CFArrayGetCount((CFArrayRef)Value) < v11)
              {
                uint64_t v14 = (const void *)*MEMORY[0x1E4F1D260];
                do
                  CFArrayAppendValue((CFMutableArrayRef)Value, v14);
                while (CFArrayGetCount((CFArrayRef)Value) < v11);
              }
              CFArrayAppendValue((CFMutableArrayRef)Value, cf);
              goto LABEL_17;
            }
            CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)Value, v11);
            if (ValueAtIndex)
            {
              CFTypeID v13 = CFGetTypeID(ValueAtIndex);
              if (v13 == CFNullGetTypeID())
              {
                CFArraySetValueAtIndex((CFMutableArrayRef)Value, v11, cf);
LABEL_17:
                uint64_t v15 = 0;
LABEL_18:
                MEMORY[0x19970E930](*(void *)(a1 + 16));
                return v15;
              }
            }
LABEL_22:
            uint64_t v15 = FigSignalErrorAt();
            goto LABEL_18;
          }
        }
      }
    }
  }

  return FigSignalErrorAt();
}

uint64_t FigPartialSampleTableOutOfBandObjectRegistryLookupOrMakeIDForObjectOfType(uint64_t a1, const void *a2, CFTypeRef cf, void *a4, char *a5)
{
  if (a1)
  {
    if (a2)
    {
      if (cf)
      {
        if (a4)
        {
          CFTypeID v10 = CFGetTypeID(cf);
          if (v10 != CFNullGetTypeID())
          {
            MEMORY[0x19970E910](*(void *)(a1 + 16));
            CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 24), a2);
            if (Value)
            {
              CFArrayRef v12 = Value;
              v19.length = CFArrayGetCount(Value);
              v19.location = 0;
              FirstIndexOfCFArrayRef Value = CFArrayGetFirstIndexOfValue(v12, v19, cf);
              if (FirstIndexOfValue != -1)
              {
                char v14 = 0;
                goto LABEL_13;
              }
            }
            else
            {
              CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
              if (!Mutable) {
                goto LABEL_19;
              }
              CFArrayRef v12 = Mutable;
              CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 24), a2, Mutable);
              CFRelease(v12);
            }
            if (CFArrayGetCount(v12) != -2)
            {
              CFArrayAppendValue(v12, cf);
              FirstIndexOfCFArrayRef Value = CFArrayGetCount(v12) - 1;
              char v14 = 1;
LABEL_13:
              *a4 = FirstIndexOfValue + 1;
              uint64_t v16 = 0;
              if (a5) {
                *a5 = v14;
              }
              goto LABEL_15;
            }
LABEL_19:
            uint64_t v16 = FigSignalErrorAt();
LABEL_15:
            MEMORY[0x19970E930](*(void *)(a1 + 16));
            return v16;
          }
        }
      }
    }
  }

  return FigSignalErrorAt();
}

void fpst_init(uint64_t a1)
{
}

void fpst_finalize(void *a1)
{
  for (uint64_t i = 26; i != 111; i += 5)
  {
    uint64_t v3 = (const void *)a1[i];
    if (v3) {
      CFRelease(v3);
    }
  }
  uint64_t v4 = (const void *)a1[22];
  if (v4) {
    CFRelease(v4);
  }
  long long v5 = (const void *)a1[3];
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v6 = (const void *)a1[9];
  if (v6)
  {
    CFRelease(v6);
  }
}

__CFString *fpst_copyFormattingDescription(uint64_t a1)
{
  CFAllocatorRef v2 = CFGetAllocator((CFTypeRef)a1);
  CFMutableArrayRef Mutable = CFStringCreateMutable(v2, 0);
  CFStringAppendFormat(Mutable, 0, @"<FigPartialSampleTable %p", a1);
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
    CFStringAppendFormat(Mutable, 0, @"NO header>");
    return Mutable;
  }
  if (*(void *)(a1 + 176))
  {
    long long v5 = *(char **)(a1 + 584);
    dataPointerOut = v5;
    if (!v5)
    {
LABEL_9:
      CFTypeID v8 = (void *)CFRetain(@"-");
      goto LABEL_10;
    }
  }
  else
  {
    dataPointerOut = 0;
    int64_t v6 = *(void *)(v4 + 88);
    if (v6 < 1) {
      goto LABEL_9;
    }
    CMBlockBufferGetDataPointer(*(CMBlockBufferRef *)(a1 + 24), v6, 0, 0, &dataPointerOut);
    long long v5 = dataPointerOut;
    if (!dataPointerOut) {
      goto LABEL_9;
    }
  }
  CMTime v13 = *(CMTime *)(v5 + 16);
  CFAllocatorRef v7 = CFGetAllocator(Mutable);
  CMTime time = v13;
  CFTypeID v8 = (void *)CMTimeCopyDescription(v7, &time);
LABEL_10:
  CFArrayRef v9 = v8;
  CFTypeID v10 = "WRITING";
  if (!*(void *)(a1 + 176)) {
    CFTypeID v10 = "READING";
  }
  CFStringAppendFormat(Mutable, 0, @" (%s) (flags=0x%llx) - %lld samples - first DTS: %@>", v10, **(void **)(a1 + 16), *(void *)(*(void *)(a1 + 16) + 8), v8);
  if (v9) {
    CFRelease(v9);
  }
  return Mutable;
}

__CFString *fpst_copyDebugDescription(uint64_t a1)
{
  CFAllocatorRef v2 = CFGetAllocator((CFTypeRef)a1);
  CFMutableArrayRef Mutable = CFStringCreateMutable(v2, 0);
  CFStringAppendFormat(Mutable, 0, @"<FigPartialSampleTable %p", a1);
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
    CFStringAppendFormat(Mutable, 0, @"\tNO header");
    return Mutable;
  }
  if (*(void *)(a1 + 176))
  {
    long long v5 = *(char **)(a1 + 584);
    dataPointerOut = v5;
    if (!v5)
    {
LABEL_9:
      CFTypeID v8 = (void *)CFRetain(@"-");
      goto LABEL_10;
    }
  }
  else
  {
    dataPointerOut = 0;
    int64_t v6 = *(void *)(v4 + 88);
    if (v6 < 1) {
      goto LABEL_9;
    }
    CMBlockBufferGetDataPointer(*(CMBlockBufferRef *)(a1 + 24), v6, 0, 0, &dataPointerOut);
    long long v5 = dataPointerOut;
    if (!dataPointerOut) {
      goto LABEL_9;
    }
  }
  CMTime v31 = *(CMTime *)(v5 + 16);
  CFAllocatorRef v7 = CFGetAllocator(Mutable);
  CMTime time = v31;
  CFTypeID v8 = (void *)CMTimeCopyDescription(v7, &time);
LABEL_10:
  CFArrayRef v9 = v8;
  if (*(void *)(a1 + 176)) {
    CFTypeID v10 = "WRITING";
  }
  else {
    CFTypeID v10 = "READING";
  }
  CFStringAppendFormat(Mutable, 0, @" (%s) (flags=0x%llx) - first DTS: %@", v10, **(void **)(a1 + 16), v8);
  if (v9) {
    CFRelease(v9);
  }
  CFIndex v11 = *(OpaqueCMBlockBuffer **)(a1 + 176);
  if (v11)
  {
    uint64_t v12 = *(void *)(*(void *)(a1 + 16) + 8);
    if (v12 <= 0)
    {
      uint64_t v15 = *(void *)(a1 + 160);
      double v16 = 0.0;
      double v13 = 0.0;
    }
    else
    {
      double v13 = (double)CMBlockBufferGetDataLength(v11) / (double)*(uint64_t *)(*(void *)(a1 + 16) + 8);
      DataCFIndex Length = CMBlockBufferGetDataLength(*(CMBlockBufferRef *)(a1 + 176));
      uint64_t v15 = *(void *)(a1 + 160);
      uint64_t v12 = *(void *)(*(void *)(a1 + 16) + 8);
      double v16 = (double)(DataLength - v15) / (double)v12;
    }
    uint64_t v21 = "samples";
    if (v12 == 1) {
      uint64_t v21 = "sample";
    }
    CFStringAppendFormat(Mutable, 0, @"\n\t%lld %s - %.2f used bytes per sample / %.2f bbuf bytes per sample - %zu bytes available", v12, v21, *(void *)&v16, *(void *)&v13, v15);
  }
  else
  {
    CFTypeRef v17 = *(OpaqueCMBlockBuffer **)(a1 + 24);
    if (v17)
    {
      uint64_t v18 = *(void *)(*(void *)(a1 + 16) + 8);
      if (v18 < 1)
      {
        double v20 = 0.0;
      }
      else
      {
        size_t v19 = CMBlockBufferGetDataLength(v17);
        uint64_t v18 = *(void *)(*(void *)(a1 + 16) + 8);
        double v20 = (double)v19 / (double)v18;
      }
      CFStringAppendFormat(Mutable, 0, @"\n\t%lld samples - %.2f bbuf bytes per sample", v18, *(void *)&v20, v29);
    }
  }
  uint64_t v22 = 1;
  uint64_t v23 = 224;
  do
  {
    v31.CMTimeValue value = 0;
    if (*(void *)(a1 + 176))
    {
      CMTimeValue value = *(void **)(a1 + v23);
      v31.CMTimeValue value = (CMTimeValue)value;
    }
    else
    {
      fpst_reading_runForType(a1, (char)v22, (char **)&v31);
      CMTimeValue value = (void *)v31.value;
    }
    uint64_t v25 = fpst_descriptionForChangeType((char)v22);
    if (value)
    {
      if (*value == 1) {
        int v26 = "segment";
      }
      else {
        int v26 = "segments";
      }
      CFStringAppendFormat(Mutable, 0, @"\n\t\t[%s] run - %lld %s", v25, *value, v26);
    }
    else
    {
      CFStringAppendFormat(Mutable, 0, @"\n\t\t[%s] run - no segments", v25, v28, v29);
    }
    ++v22;
    v23 += 40;
  }
  while (v22 != 18);
  return Mutable;
}

uint64_t fpst_reading_runForType(uint64_t a1, int a2, char **dataPointerOut)
{
  char *dataPointerOut = 0;
  int64_t v3 = *(void *)(*(void *)(a1 + 16) + 8 * a2 + 8);
  if (v3 < 1) {
    return 4294949584;
  }
  else {
    return CMBlockBufferGetDataPointer(*(CMBlockBufferRef *)(a1 + 24), v3, 0, 0, dataPointerOut);
  }
}

const char *fpst_descriptionForChangeType(int a1)
{
  uint64_t v1 = a1 - 1;
  if (v1 > 0x10) {
    return "Unknown";
  }
  else {
    return off_1E57A9AC8[v1];
  }
}

uint64_t fpst_writing_reserveMemoryForChangeType(void *a1, int a2, size_t a3, void **a4)
{
  uint64_t v24 = 0;
  size_t lengthAtOffsetOut = 0;
  size_t v4 = a1[20];
  BOOL v5 = v4 > a3;
  size_t v6 = v4 - a3;
  if (!v5)
  {
    return FigSignalErrorAt();
  }
  int v11 = a2 - 1;
  a1[20] = v6;
  uint64_t v12 = &a1[5 * a2 - 5];
  char v14 = (OpaqueCMBlockBuffer *)v12[26];
  double v13 = (CMBlockBufferRef *)(v12 + 26);
  uint64_t result = CMBlockBufferAssureBlockMemory(v14);
  if (result) {
    return result;
  }
  double v16 = &a1[5 * v11 + 24];
  DataCFIndex Length = CMBlockBufferGetDataLength(*v13);
  size_t v18 = *v16;
  if (DataLength != *v16) {
    goto LABEL_9;
  }
  CFAllocatorRef v19 = CFGetAllocator(a1);
  uint64_t v20 = fpst_sizeForChangeType(a2);
  uint64_t v21 = &a1[5 * v11];
  uint64_t v22 = v21[25];
  uint64_t v23 = 2 * v22;
  if (v22 >= 512) {
    uint64_t v23 = 1024;
  }
  void v21[25] = v23;
  uint64_t result = CMBlockBufferAppendMemoryBlock(*v13, 0, (v20 + 8) * v22, v19, 0, 0, (v20 + 8) * v22, 1u);
  if (!result)
  {
    size_t v18 = *v16;
LABEL_9:
    uint64_t result = CMBlockBufferGetDataPointer(*v13, v18, &lengthAtOffsetOut, 0, (char **)&v24);
    if (!result)
    {
      if (lengthAtOffsetOut < a3)
      {
        return FigSignalErrorAt();
      }
      else
      {
        bzero(v24, a3);
        uint64_t result = 0;
        *v16 += a3;
        *a4 = v24;
      }
    }
  }
  return result;
}

uint64_t fpst_sizeForChangeType(int a1)
{
  uint64_t v1 = a1 - 1;
  if (v1 > 0x10) {
    return 0;
  }
  else {
    return qword_19499C3C0[v1];
  }
}

uint64_t fpst_reading_runSegmentAtIndex(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  dataPointerOut = 0;
  uint64_t result = fpst_reading_runForType(a1, a2, &dataPointerOut);
  if (!result)
  {
    CFTypeID v8 = dataPointerOut;
    if (*(void *)dataPointerOut <= a3)
    {
      return FigSignalErrorAt();
    }
    else
    {
      uint64_t v9 = fpst_sizeForChangeType(a2);
      uint64_t result = 0;
      *a4 = &v8[(v9 + 8) * a3 + 8];
    }
  }
  return result;
}

uint64_t FigPartialSampleTableOutOfBandObjectRegistry_Init(uint64_t result)
{
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  return result;
}

void FigPartialSampleTableOutOfBandObjectRegistry_Finalize(uint64_t a1)
{
  FigSimpleMutexDestroy();
  *(void *)(a1 + 16) = 0;
  CFAllocatorRef v2 = *(const void **)(a1 + 24);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 24) = 0;
  }
}

__CFString *FigPartialSampleTableOutOfBandObjectRegistry_CopyDescription(const void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  CFMutableArrayRef Mutable = CFStringCreateMutable(v2, 0);
  CFStringAppendFormat(Mutable, 0, @"<FigPartialSampleTableOutOfBandObjectRegistry %p>", a1);
  return Mutable;
}

uint64_t FigAgglomeratorNew(const void ***a1)
{
  CFAllocatorRef v2 = (const void **)malloc_type_calloc(1uLL, 0x10uLL, 0x20040A4A59CD2uLL);
  if (v2 && (uint64_t v3 = FigReadWriteLockCreate(), (v2[1] = (const void *)v3) != 0))
  {
    *CFAllocatorRef v2 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, MEMORY[0x1E4F1D540]);
  }
  else
  {
    uint64_t v6 = FigSignalErrorAt();
    if (v6)
    {
      uint64_t v4 = v6;
      FigAgglomeratorDispose(v2);
      return v4;
    }
  }
  uint64_t v4 = 0;
  *a1 = v2;
  return v4;
}

void FigAgglomeratorDispose(const void **a1)
{
  if (a1)
  {
    CFAllocatorRef v2 = *a1;
    if (v2) {
      CFRelease(v2);
    }
    if (a1[1]) {
      FigReadWriteLockDestroy();
    }
    free(a1);
  }
}

uint64_t FigAgglomeratorSetObjectForKey(__CFDictionary **a1, const void *a2, const void *a3)
{
  if (a1 && a3)
  {
    FigReadWriteLockLockForWrite();
    uint64_t v6 = *a1;
    if (a2) {
      CFDictionarySetValue(v6, a3, a2);
    }
    else {
      CFDictionaryRemoveValue(v6, a3);
    }
    FigReadWriteLockUnlockForWrite();
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

CFMutableArrayRef FigAgglomeratorCopyCurrentAgglomeration(CFDictionaryRef *a1)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  FigReadWriteLockLockForRead();
  CFDictionaryApplyFunction(*a1, (CFDictionaryApplierFunction)agglomerator_addDictionaryValueToMutableArray, Mutable);
  FigReadWriteLockUnlockForRead();
  return Mutable;
}

void agglomerator_addDictionaryValueToMutableArray(int a1, const void *a2, CFMutableArrayRef theArray)
{
}

uint64_t FigSampleBufferAudioRendererCreateWithOptions(const __CFAllocator *a1, const __CFDictionary *a2, CFTypeRef *a3)
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  CMTimeValue value = 0;
  CFTypeRef v65 = 0;
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a3)
  {
    uint64_t v58 = 0;
    uint64_t v43 = 4294950916;
    goto LABEL_89;
  }
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  FigSampleBufferAudioRendererGetClassID();
  uint64_t v7 = CMDerivedObjectCreate();
  if (v7)
  {
    uint64_t v43 = v7;
    uint64_t v58 = 0;
    goto LABEL_89;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(unsigned char *)(DerivedStorage + 448) = 0;
  if (a2 && CFDictionaryGetValueIfPresent(a2, @"LoggingIdentifier", (const void **)&value)) {
    CFStringGetCString((CFStringRef)value, (char *)(DerivedStorage + 448), 10, 0x600u);
  }
  uint64_t v9 = FigReentrantMutexCreate();
  *(void *)uint64_t DerivedStorage = v9;
  if (!v9) {
    goto LABEL_83;
  }
  snprintf(__str, 0x80uLL, "com.apple.coremedia.audiorenderer.notification[%p]", v65);
  dispatch_queue_t v10 = dispatch_queue_create(__str, 0);
  *(void *)(DerivedStorage + 8) = v10;
  if (!v10) {
    goto LABEL_83;
  }
  snprintf(__str, 0x80uLL, "com.apple.coremedia.audiorenderer.task[%p]", v65);
  dispatch_queue_t v11 = dispatch_queue_create(__str, 0);
  *(void *)(DerivedStorage + 16) = v11;
  if (!v11) {
    goto LABEL_83;
  }
  *(_DWORD *)(DerivedStorage + 96) = 0;
  *(unsigned char *)(DerivedStorage + 100) = 0;
  *(unsigned char *)(DerivedStorage + 104) = 0;
  *(_DWORD *)(DerivedStorage + 108) = 1065353216;
  *(void *)(DerivedStorage + 112) = 0;
  *(void *)(DerivedStorage + 120) = 0;
  uint64_t v12 = MEMORY[0x1E4F1F9F8];
  *(_OWORD *)(DerivedStorage + 220) = *MEMORY[0x1E4F1F9F8];
  *(void *)(DerivedStorage + 236) = *(void *)(v12 + 16);
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v6, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  *(void *)(DerivedStorage + 80) = Mutable;
  if (!Mutable) {
    goto LABEL_83;
  }
  *(unsigned char *)(DerivedStorage + 136) = 0;
  char v14 = (unsigned char *)(DerivedStorage + 136);
  FigCFDictionaryGetBooleanIfPresent();
  if (*(unsigned char *)(DerivedStorage + 136)) {
    uint64_t v15 = 0;
  }
  else {
    uint64_t v15 = @"TimeDomain";
  }
  *(void *)(DerivedStorage + 128) = v15;
  double v16 = (const void *)*MEMORY[0x1E4F1CFD0];
  *(void *)(DerivedStorage + 176) = CFRetain((CFTypeRef)*MEMORY[0x1E4F1CFD0]);
  CFTypeRef v17 = (const void *)*MEMORY[0x1E4F1CFC8];
  *(void *)(DerivedStorage + 184) = CFRetain((CFTypeRef)*MEMORY[0x1E4F1CFC8]);
  *(unsigned char *)(DerivedStorage + 192) = 0;
  *(void *)(DerivedStorage + 200) = CFRetain(v17);
  size_t v18 = (const void *)FigCFDictionaryGetValue();
  if (v18) {
    size_t v18 = CFRetain(v18);
  }
  *(void *)(DerivedStorage + 168) = v18;
  if (FPSupport_GetAudioSpatializationPreferencesMonitor())
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FPSupport_GetAudioSpatializationPreferencesMonitor();
    FigNotificationCenterAddWeakListener();
  }
  dispatch_source_t v19 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, *(dispatch_queue_t *)(DerivedStorage + 16));
  *(void *)(DerivedStorage + 360) = v19;
  if (!v19 || (uint64_t v20 = (const void *)FigCFWeakReferenceHolderCreateWithReferencedObject()) == 0)
  {
LABEL_83:
    uint64_t v58 = 0;
    uint64_t v43 = 4294950914;
    goto LABEL_89;
  }
  uint64_t v21 = v20;
  CFAllocatorRef alloc = v6;
  CFDictionaryRef v62 = a2;
  uint64_t v22 = *(NSObject **)(DerivedStorage + 360);
  uint64_t v23 = (void *)CFRetain(v20);
  dispatch_set_context(v22, v23);
  dispatch_source_set_event_handler_f(*(dispatch_source_t *)(DerivedStorage + 360), (dispatch_function_t)audioRenderer_underrunTimerFire);
  dispatch_source_set_cancel_handler_f(*(dispatch_source_t *)(DerivedStorage + 360), MEMORY[0x1E4F1C278]);
  dispatch_resume(*(dispatch_object_t *)(DerivedStorage + 360));
  CFTypeRef v24 = v65;
  CMClockRef clockOut = 0;
  uint64_t v25 = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = v21;
  if (!FigPreferAudioSessionClock())
  {
    OSStatus v32 = CMAudioDeviceClockCreate(a1, @"VirtualAudioDevice_Default", &clockOut);
    if (!dword_1E93517A8)
    {
LABEL_41:
      long long v27 = clockOut;
      goto LABEL_42;
    }
    OSStatus v33 = v32;
    int valuePtr = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v35 = valuePtr;
    if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v36 = v35;
    }
    else {
      unsigned int v36 = v35 & 0xFFFFFFFE;
    }
    if (v36)
    {
      if (v24) {
        uint64_t v37 = (const char *)(CMBaseObjectGetDerivedStorage() + 448);
      }
      else {
        uint64_t v37 = "";
      }
      int v68 = 136316162;
      uint64_t v69 = "audioRenderer_copyDefaultClock";
      __int16 v70 = 2048;
      CFTypeRef v71 = v24;
      __int16 v72 = 2082;
      uint64_t v73 = v37;
      __int16 v74 = 2112;
      *(void *)uint64_t v75 = @"VirtualAudioDevice_Default";
      *(_WORD *)&v75[8] = 1024;
      LODWORD(v76) = v33;
      _os_log_send_and_compose_impl();
    }
LABEL_40:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_41;
  }
  HostTimeClocuint64_t k = CMClockGetHostTimeClock();
  long long v27 = (OpaqueCMClock *)CFRetain(HostTimeClock);
  CMClockRef clockOut = v27;
  if (dword_1E93517A8)
  {
    int valuePtr = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    uint64_t v28 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v29 = valuePtr;
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v30 = v29;
    }
    else {
      unsigned int v30 = v29 & 0xFFFFFFFE;
    }
    if (v30)
    {
      if (v24) {
        CMTime v31 = (const char *)(CMBaseObjectGetDerivedStorage() + 448);
      }
      else {
        CMTime v31 = "";
      }
      uint64_t v38 = *(void *)(v25 + 160);
      int v68 = 136316162;
      uint64_t v69 = "audioRenderer_copyDefaultClock";
      __int16 v70 = 2048;
      CFTypeRef v71 = v24;
      __int16 v72 = 2082;
      uint64_t v73 = v31;
      __int16 v74 = 2112;
      *(void *)uint64_t v75 = v38;
      *(_WORD *)&v75[8] = 1024;
      LODWORD(v76) = 0;
      _os_log_send_and_compose_impl();
    }
    goto LABEL_40;
  }
LABEL_42:
  if (!v27)
  {
    CMClockRef v39 = CMClockGetHostTimeClock();
    long long v27 = (OpaqueCMClock *)CFRetain(v39);
  }
  *(void *)(DerivedStorage + 64) = v27;
  *(unsigned char *)(DerivedStorage + 32) = 1;
  audioRenderer_setPropertyOnAudioRenderPipeline((uint64_t)v65, @"IsTimebaseStarter", v16, 1);
  CFTypeRef v40 = v65;
  uint64_t v41 = (void *)CMBaseObjectGetDerivedStorage();
  timebaseOut[0] = 0;
  MEMORY[0x19970E290](*v41);
  if (*((unsigned char *)v41 + 433))
  {
    uint64_t v43 = 0;
  }
  else
  {
    uint64_t v42 = CMTimebaseCreateWithSourceClock(0, (CMClockRef)v41[8], timebaseOut);
    if (!v42) {
      uint64_t v42 = audioRenderer_setMasterTimebase((uint64_t)v40, timebaseOut[0]);
    }
    uint64_t v43 = v42;
  }
  MEMORY[0x19970E2B0](*v41);
  if (timebaseOut[0]) {
    CFRelease(timebaseOut[0]);
  }
  if (!v43)
  {
    *(_WORD *)(DerivedStorage + 101) = 0;
    *(unsigned char *)(DerivedStorage + 103) = 1;
    int valuePtr = 500;
    *(_DWORD *)type = 1000;
    CMClockRef clockOut = 0;
    if (v62)
    {
      if (CFDictionaryGetValueIfPresent(v62, @"LowWaterMarkMs", (const void **)&clockOut))
      {
        if (clockOut)
        {
          CFTypeID v44 = CFGetTypeID(clockOut);
          if (v44 == CFNumberGetTypeID()) {
            CFNumberGetValue(clockOut, kCFNumberIntType, &valuePtr);
          }
        }
      }
      if (CFDictionaryGetValueIfPresent(v62, @"HighWaterMarkMs", (const void **)&clockOut))
      {
        if (clockOut)
        {
          CFTypeID v45 = CFGetTypeID(clockOut);
          if (v45 == CFNumberGetTypeID()) {
            CFNumberGetValue(clockOut, kCFNumberIntType, type);
          }
        }
      }
    }
    int CFPreferenceNumberWithDefault = FigGetCFPreferenceNumberWithDefault();
    CMTimeMake((CMTime *)timebaseOut, CFPreferenceNumberWithDefault, 1000);
    *(CMTime *)(DerivedStorage + 268) = *(CMTime *)timebaseOut;
    int v47 = FigGetCFPreferenceNumberWithDefault();
    CMTimeMake((CMTime *)timebaseOut, v47, 1000);
    *(CMTime *)(DerivedStorage + 244) = *(CMTime *)timebaseOut;
    if (dword_1E93517A8)
    {
      uint64_t v48 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CFTypeRef v49 = (unsigned char *)(DerivedStorage + 292);
    *(unsigned char *)(DerivedStorage + 292) = 0;
    FigCFDictionaryGetBooleanIfPresent();
    CFStringRef v50 = CFStringCreateWithFormat(alloc, 0, @"SBAR-%p", v65);
    *(void *)(DerivedStorage + 440) = v50;
    if (v50)
    {
      if (dword_1E93517A8)
      {
        LODWORD(clockOut) = 0;
        LOBYTE(valuePtr) = 0;
        uint64_t v51 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v52 = clockOut;
        if (os_log_type_enabled(v51, (os_log_type_t)valuePtr)) {
          unsigned int v53 = v52;
        }
        else {
          unsigned int v53 = v52 & 0xFFFFFFFE;
        }
        if (v53)
        {
          CFTypeRef v54 = v65;
          if (v65) {
            uint64_t v55 = (const char *)(CMBaseObjectGetDerivedStorage() + 448);
          }
          else {
            uint64_t v55 = "";
          }
          if (*v49) {
            int v56 = 84;
          }
          else {
            int v56 = 70;
          }
          if (*v14) {
            int v57 = 84;
          }
          else {
            int v57 = 70;
          }
          int v68 = 136316162;
          uint64_t v69 = "FigSampleBufferAudioRendererCreateWithOptions";
          __int16 v70 = 2048;
          CFTypeRef v71 = v54;
          __int16 v72 = 2082;
          uint64_t v73 = v55;
          __int16 v74 = 1024;
          *(_DWORD *)uint64_t v75 = v56;
          *(_WORD *)&v75[4] = 1024;
          *(_DWORD *)&v75[6] = v57;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      uint64_t v43 = 0;
      *a3 = v65;
      CFTypeRef v65 = 0;
      uint64_t v58 = cf;
LABEL_81:
      CFRelease(v58);
      return v43;
    }
    uint64_t v43 = 4294950914;
  }
  uint64_t v58 = cf;
LABEL_89:
  if (v65) {
    CFRelease(v65);
  }
  if (v58) {
    goto LABEL_81;
  }
  return v43;
}

void audioRenderer_spatialAudioPreferencesChanged(uint64_t a1, uint64_t a2)
{
  CFTypeRef cf = 0;
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*DerivedStorage);
  if (*((unsigned char *)DerivedStorage + 433) || (uint64_t v4 = DerivedStorage[7]) == 0 || !DerivedStorage[19])
  {
    JUMPOUT(0x19970E2B0);
  }
  uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
  uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(v4);
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(void (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v8 + 48);
  if (v9)
  {
    v9(FigBaseObject, @"SpatializationEnabled", AllocatorForMedia, &cf);
    CFTypeRef v10 = cf;
  }
  else
  {
    CFTypeRef v10 = 0;
  }
  int v11 = v10 == (CFTypeRef)*MEMORY[0x1E4F1CFD0];
  if (audioRenderer_shouldEnableSpatialization(a2, DerivedStorage[19]) == v11)
  {
    MEMORY[0x19970E2B0](*DerivedStorage);
  }
  else
  {
    audioRenderer_disturbPlaybackSwapPointerRestorePlayback(a2, 0, 0, 1);
    MEMORY[0x19970E2B0](*DerivedStorage);
    audioRenderer_postNotification();
  }
  if (cf) {
    CFRelease(cf);
  }
}

void audioRenderer_underrunTimerFire()
{
  CMTime v10 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  uint64_t v0 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v0)
  {
    uint64_t v1 = (const void *)v0;
    uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
    MEMORY[0x19970E290](*DerivedStorage);
    if (DerivedStorage[48] & 1) != 0 && (DerivedStorage[51])
    {
      CMTime time1 = *(CMTime *)((char *)DerivedStorage + 396);
      __n128 v3 = audioRenderer_endUnderrun((uint64_t)v1, &time1);
    }
    uint64_t v4 = (OpaqueCMTimebase *)DerivedStorage[3];
    if (v4 && (DerivedStorage[29] & 1) != 0)
    {
      BOOL v5 = (_OWORD *)((char *)DerivedStorage + 220);
      CMTimebaseGetTime(&v10, v4);
      CMTime time1 = *(CMTime *)((char *)DerivedStorage + 220);
      CMTime v8 = v10;
      if (CMTimeCompare(&time1, &v8) < 0)
      {
        *(_OWORD *)&time1.CMTimeValue value = *v5;
        time1.CMTimeEpoch epoch = *(void *)((char *)DerivedStorage + 236);
        __n128 v3 = audioRenderer_beginUnderrun((uint64_t)v1, (__n128 *)&time1);
      }
      else
      {
        CFAllocatorRef v6 = (OpaqueCMTimebase *)DerivedStorage[3];
        uint64_t v7 = DerivedStorage[45];
        *(_OWORD *)&time1.CMTimeValue value = *v5;
        time1.CMTimeEpoch epoch = *(void *)((char *)DerivedStorage + 236);
        CMTimebaseSetTimerDispatchSourceNextFireTime(v6, v7, &time1, 0);
      }
    }
    else
    {
      *((unsigned char *)DerivedStorage + 368) = 0;
    }
    MEMORY[0x19970E2B0](*DerivedStorage, v3);
    CFRelease(v1);
  }
}

uint64_t audioRenderer_setPropertyOnAudioRenderPipeline(uint64_t a1, const void *a2, const void *a3, int a4)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  uint64_t v8 = DerivedStorage[7];
  if (!v8)
  {
    if (a4 != 1) {
      return 0;
    }
LABEL_10:
    if (!a3) {
      a3 = (const void *)*MEMORY[0x1E4F1D260];
    }
    MEMORY[0x19970E290](*DerivedStorage);
    CFDictionarySetValue((CFMutableDictionaryRef)DerivedStorage[10], a2, a3);
    MEMORY[0x19970E2B0](*DerivedStorage);
    return 0;
  }
  uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(v8);
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = *(uint64_t (**)(uint64_t, const void *, const void *))(v11 + 56);
  if (!v12) {
    return 4294954514;
  }
  uint64_t result = v12(FigBaseObject, a2, a3);
  if (a4 == 1 && !result) {
    goto LABEL_10;
  }
  return result;
}

uint64_t audioRenderer_invalidate(uint64_t a1)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  __n128 v3 = DerivedStorage;
  uint64_t v4 = *DerivedStorage;
  if (*DerivedStorage) {
    MEMORY[0x19970E290](*DerivedStorage);
  }
  if (!*((unsigned char *)v3 + 433))
  {
    *((unsigned char *)v3 + 433) = 1;
    audioRenderer_tearDownFARP(a1, 0);
    audioRenderer_removeNotificationListenerFromTimebase(a1, (OpaqueCMTimebase *)v3[3]);
    FigStopForwardingMediaServicesProcessDeathNotification();
    BOOL v5 = (const void *)v3[20];
    if (v5)
    {
      CFRelease(v5);
      v3[20] = 0;
    }
    CFAllocatorRef v6 = (const void *)v3[8];
    if (v6)
    {
      CFRelease(v6);
      v3[8] = 0;
    }
    audioRenderer_bapOutputRemoveWeakListeners(a1, v3[9]);
    uint64_t v7 = (const void *)v3[9];
    if (v7)
    {
      CFRelease(v7);
      v3[9] = 0;
    }
    uint64_t v8 = (const void *)v3[3];
    if (v8)
    {
      CFRelease(v8);
      v3[3] = 0;
    }
    uint64_t v9 = (const void *)v3[11];
    if (v9)
    {
      CFRelease(v9);
      v3[11] = 0;
    }
    uint64_t v10 = (const void *)v3[14];
    if (v10)
    {
      CFRelease(v10);
      v3[14] = 0;
    }
    uint64_t v11 = (const void *)v3[15];
    if (v11)
    {
      CFRelease(v11);
      v3[15] = 0;
    }
    uint64_t v12 = (const void *)v3[16];
    if (v12)
    {
      CFRelease(v12);
      v3[16] = 0;
    }
    double v13 = (const void *)v3[18];
    if (v13)
    {
      CFRelease(v13);
      v3[18] = 0;
    }
    char v14 = (const void *)v3[10];
    if (v14)
    {
      CFRelease(v14);
      v3[10] = 0;
    }
    uint64_t v15 = (const void *)v3[22];
    if (v15)
    {
      CFRelease(v15);
      v3[22] = 0;
    }
    double v16 = (const void *)v3[23];
    if (v16)
    {
      CFRelease(v16);
      v3[23] = 0;
    }
    CFTypeRef v17 = (const void *)v3[25];
    if (v17)
    {
      CFRelease(v17);
      v3[25] = 0;
    }
    size_t v18 = (const void *)v3[55];
    if (v18)
    {
      CFRelease(v18);
      v3[55] = 0;
    }
    dispatch_source_t v19 = (const void *)v3[21];
    if (v19)
    {
      CFRelease(v19);
      v3[21] = 0;
    }
    if (FPSupport_GetAudioSpatializationPreferencesMonitor())
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FPSupport_GetAudioSpatializationPreferencesMonitor();
      FigNotificationCenterRemoveWeakListener();
    }
    if (v3[26])
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      uint64_t v20 = (const void *)v3[26];
      if (v20)
      {
        CFRelease(v20);
        v3[26] = 0;
      }
    }
    uint64_t v21 = v3[45];
    if (v21)
    {
      dispatch_source_cancel(v21);
      uint64_t v22 = v3[45];
      if (v22)
      {
        dispatch_release(v22);
        v3[45] = 0;
      }
    }
  }
  if (v4) {
    MEMORY[0x19970E2B0](*v3);
  }
  return 0;
}

uint64_t audioRenderer_finalize(uint64_t a1)
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  audioRenderer_invalidate(a1);
  __n128 v3 = DerivedStorage[1];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = DerivedStorage[2];
  if (v4) {
    dispatch_release(v4);
  }
  uint64_t result = *DerivedStorage;
  if (*DerivedStorage)
  {
    uint64_t result = FigSimpleMutexDestroy();
    *uint64_t DerivedStorage = 0;
  }
  return result;
}

__CFString *audioRenderer_copyDebugDesc(const void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(v2, 0);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFIndex v5 = CFGetRetainCount(a1);
  if (*(unsigned char *)(DerivedStorage + 433)) {
    CFAllocatorRef v6 = " (invalidated)";
  }
  else {
    CFAllocatorRef v6 = "";
  }
  CFAllocatorRef v7 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, @"<FigSampleBufferAudioRenderer=%p retainCount=%d%s allocator=%p", a1, v5, v6, v7);
  if (*(unsigned char *)(DerivedStorage + 32)) {
    uint64_t v8 = "yes";
  }
  else {
    uint64_t v8 = "no";
  }
  CFStringAppendFormat(Mutable, 0, @" timebaseStarter=%s", v8);
  CFStringAppendFormat(Mutable, 0, @" masterControlTimebase=%@", *(void *)(DerivedStorage + 24));
  CFStringAppendFormat(Mutable, 0, @" synchronizerWeakReference=%@", *(void *)(DerivedStorage + 88));
  CFStringAppendFormat(Mutable, 0, @" audioOutputDeviceUniqueID=%@", *(void *)(DerivedStorage + 120));
  CFStringAppendFormat(Mutable, 0, @" audioTimePitchAlgorithm=%@", *(void *)(DerivedStorage + 128));
  CFStringAppendFormat(Mutable, 0, @" volume=%1.3f", *(float *)(DerivedStorage + 108));
  if (*(unsigned char *)(DerivedStorage + 104)) {
    uint64_t v9 = "yes";
  }
  else {
    uint64_t v9 = "no";
  }
  CFStringAppendFormat(Mutable, 0, @" muted=%s", v9);
  if (*(unsigned char *)(DerivedStorage + 432)) {
    uint64_t v10 = "yes";
  }
  else {
    uint64_t v10 = "no";
  }
  CFStringAppendFormat(Mutable, 0, @" silentMuted=%s", v10);
  if (*(unsigned char *)(DerivedStorage + 424)) {
    uint64_t v11 = "yes";
  }
  else {
    uint64_t v11 = "no";
  }
  CFStringAppendFormat(Mutable, 0, @" ducked=%s", v11);
  CFStringAppendFormat(Mutable, 0, @" volumeCurvesDictionary=%@", *(void *)(DerivedStorage + 112));
  CFStringAppendFormat(Mutable, 0, @">");
  return Mutable;
}

uint64_t audioRenderer_copyProperty(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  uint64_t v8 = 4294950916;
  if (a2 && a4)
  {
    uint64_t v9 = DerivedStorage;
    MEMORY[0x19970E290](*DerivedStorage);
    if (*((unsigned char *)v9 + 433))
    {
      uint64_t v8 = 4294954511;
      goto LABEL_32;
    }
    if (CFEqual(a2, @"IsBelowPrerollLevel"))
    {
      if (v9[6])
      {
        uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v10) {
          uint64_t v11 = v10;
        }
        else {
          uint64_t v11 = 0;
        }
        if (*(void *)(v11 + 104))
        {
          uint64_t v13 = v9[6];
          uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v14) {
            uint64_t v15 = v14;
          }
          else {
            uint64_t v15 = 0;
          }
          uint64_t v21 = *(unsigned int (**)(uint64_t))(v15 + 104);
          if (v21 && v21(v13)) {
            goto LABEL_27;
          }
        }
        else
        {
          uint64_t v16 = v9[6];
          uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v17) {
            uint64_t v18 = v17;
          }
          else {
            uint64_t v18 = 0;
          }
          uint64_t v20 = *(unsigned int (**)(uint64_t))(v18 + 24);
          if (v20 && v20(v16)) {
            goto LABEL_27;
          }
        }
        uint64_t v12 = (const void **)MEMORY[0x1E4F1CFC8];
        goto LABEL_29;
      }
LABEL_27:
      uint64_t v12 = (const void **)MEMORY[0x1E4F1CFD0];
LABEL_29:
      dispatch_source_t v19 = *v12;
LABEL_30:
      dispatch_source_t v19 = CFRetain(v19);
      goto LABEL_31;
    }
    if (CFEqual(a2, @"Muted"))
    {
      uint64_t v12 = (const void **)MEMORY[0x1E4F1CFD0];
      if (!*((unsigned char *)v9 + 104)) {
        uint64_t v12 = (const void **)MEMORY[0x1E4F1CFC8];
      }
      goto LABEL_29;
    }
    if (CFEqual(a2, @"Volume"))
    {
      dispatch_source_t v19 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberFloat32Type, (char *)v9 + 108);
LABEL_31:
      uint64_t v8 = 0;
      *a4 = v19;
LABEL_32:
      MEMORY[0x19970E2B0](*v9);
      return v8;
    }
    if (CFEqual(a2, @"VolumeCurves"))
    {
      dispatch_source_t v19 = (const void *)v9[14];
      if (!v19) {
        goto LABEL_31;
      }
      goto LABEL_30;
    }
    if (CFEqual(a2, @"AudioOutputDeviceUniqueID"))
    {
      dispatch_source_t v19 = (const void *)v9[15];
      if (!v19) {
        goto LABEL_31;
      }
      goto LABEL_30;
    }
    if (CFEqual(a2, @"AudioTimePitchAlgorithm"))
    {
      if (!*((unsigned char *)v9 + 136))
      {
        dispatch_source_t v19 = (const void *)v9[16];
        if (!v19) {
          goto LABEL_31;
        }
        goto LABEL_30;
      }
LABEL_68:
      uint64_t v24 = FigSignalErrorAt();
      goto LABEL_50;
    }
    if (CFEqual(a2, @"AudioProcessingTap"))
    {
      dispatch_source_t v19 = (const void *)v9[18];
      if (!v19) {
        goto LABEL_31;
      }
      goto LABEL_30;
    }
    if (CFEqual(a2, @"WillTrimShortDurationSamples"))
    {
      uint64_t v23 = v9[7];
      if (v23)
      {
        uint64_t v24 = FigRenderPipelineCopyProperty(v23, @"WillTrimShortDurationSamples", a3, (uint64_t)a4);
LABEL_50:
        uint64_t v8 = v24;
        goto LABEL_32;
      }
      uint64_t v25 = (const void **)MEMORY[0x1E4F1CFD0];
    }
    else
    {
      if (CFEqual(a2, @"ShouldFillDiscontinuitiesWithSilence"))
      {
        uint64_t v25 = (const void **)MEMORY[0x1E4F1CFD0];
        int v26 = *((unsigned __int8 *)v9 + 103);
      }
      else if (CFEqual(a2, @"ShouldAttemptImmediatePlaybackStart"))
      {
        uint64_t v25 = (const void **)MEMORY[0x1E4F1CFD0];
        int v26 = *((unsigned __int8 *)v9 + 100);
      }
      else if (CFEqual(a2, @"NonBAOPlaybackIsDisallowed"))
      {
        uint64_t v25 = (const void **)MEMORY[0x1E4F1CFD0];
        int v26 = *((unsigned __int8 *)v9 + 101);
      }
      else
      {
        if (!CFEqual(a2, @"FARPAlwaysNotifyLatencyChange"))
        {
          if (CFEqual(a2, @"IsUnaccompaniedByVisuals"))
          {
            dispatch_source_t v19 = (const void *)v9[25];
            if (!v19) {
              goto LABEL_31;
            }
            goto LABEL_30;
          }
          goto LABEL_68;
        }
        uint64_t v25 = (const void **)MEMORY[0x1E4F1CFD0];
        int v26 = *((unsigned __int8 *)v9 + 102);
      }
      if (!v26) {
        uint64_t v25 = (const void **)MEMORY[0x1E4F1CFC8];
      }
    }
    dispatch_source_t v19 = *v25;
    if (!*v25) {
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  return v8;
}

uint64_t audioRenderer_setProperty(uint64_t a1, const void *a2, const void *a3)
{
  valuePtr[16] = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2) {
    return 4294950916;
  }
  CFAllocatorRef v7 = (unsigned char *)DerivedStorage;
  if (*(unsigned char *)(DerivedStorage + 433)) {
    return 4294954511;
  }
  if (CFEqual(a2, @"Muted"))
  {
    if (a3)
    {
      CFTypeID v8 = CFGetTypeID(a3);
      if (v8 == CFBooleanGetTypeID())
      {
        uint64_t v9 = (void *)CMBaseObjectGetDerivedStorage();
        MEMORY[0x19970E290](*v9);
        if (!*((unsigned char *)v9 + 433) && CFBooleanGetValue((CFBooleanRef)a3) != *((unsigned __int8 *)v9 + 104))
        {
          uint64_t v10 = audioRenderer_setPropertyOnAudioRenderPipeline(a1, @"Muted", a3, 1);
          if (!v10) {
            *((unsigned char *)v9 + 104) = CFBooleanGetValue((CFBooleanRef)a3);
          }
          goto LABEL_26;
        }
        goto LABEL_25;
      }
    }
    return 4294950915;
  }
  if (CFEqual(a2, @"Volume"))
  {
    if (!a3) {
      return 4294950915;
    }
    CFTypeID v11 = CFGetTypeID(a3);
    if (v11 != CFNumberGetTypeID()) {
      return 4294950915;
    }
    uint64_t v9 = (void *)CMBaseObjectGetDerivedStorage();
    LODWORD(valuePtr[0]) = 0;
    MEMORY[0x19970E290](*v9);
    if (!*((unsigned char *)v9 + 433))
    {
      CFNumberGetValue((CFNumberRef)a3, kCFNumberFloat32Type, valuePtr);
      if (*(float *)valuePtr != *((float *)v9 + 27))
      {
        uint64_t v10 = audioRenderer_applySoftwareVolume(a1, @"SoftwareVolume1", 0, *(float *)valuePtr, 0.0);
        if (!v10) {
          *((_DWORD *)v9 + 27) = valuePtr[0];
        }
        goto LABEL_26;
      }
    }
LABEL_25:
    uint64_t v10 = 0;
LABEL_26:
    MEMORY[0x19970E2B0](*v9);
    return v10;
  }
  if (CFEqual(a2, @"VolumeCurves"))
  {
    if (!a3) {
      return 4294950915;
    }
    CFTypeID v12 = CFGetTypeID(a3);
    if (v12 != CFDictionaryGetTypeID()) {
      return 4294950915;
    }
    if (CFDictionaryContainsKey((CFDictionaryRef)a3, @"AudioCurve_Volume"))
    {
      uint64_t v9 = (void *)CMBaseObjectGetDerivedStorage();
      MEMORY[0x19970E290](*v9);
      if (!*((unsigned char *)v9 + 433))
      {
        uint64_t v13 = audioRenderer_setPropertyOnAudioRenderPipeline(a1, @"AudioCurves", a3, 1);
        if (v13)
        {
          uint64_t v10 = v13;
          goto LABEL_26;
        }
        uint64_t v14 = (const void *)v9[14];
        v9[14] = a3;
        CFRetain(a3);
        if (v14) {
          CFRelease(v14);
        }
      }
      goto LABEL_25;
    }
    goto LABEL_81;
  }
  if (CFEqual(a2, @"AudioOutputDeviceUniqueID"))
  {
    if (!a3) {
      return 4294950915;
    }
    CFTypeID v16 = CFGetTypeID(a3);
    if (v16 != CFStringGetTypeID()) {
      return 4294950915;
    }
    uint64_t v17 = (const void **)CMBaseObjectGetDerivedStorage();
    MEMORY[0x19970E290](*v17);
    if (*((unsigned char *)v17 + 433))
    {
      MEMORY[0x19970E2B0](*v17);
    }
    else
    {
      audioRenderer_disturbPlaybackSwapPointerRestorePlayback(a1, v17 + 15, a3, 0);
      MEMORY[0x19970E2B0](*v17);
      audioRenderer_postNotification();
    }
    return 0;
  }
  if (CFEqual(a2, @"AudioTimePitchAlgorithm"))
  {
    if (v7[136])
    {
LABEL_81:
      return FigSignalErrorAt();
    }
    if (!a3) {
      return 4294950915;
    }
    CFTypeID v18 = CFGetTypeID(a3);
    if (v18 != CFStringGetTypeID()) {
      return 4294950915;
    }
    return audioRenderer_setAudioTimePitchAlgorithm(a1, a3);
  }
  if (CFEqual(a2, @"AudioProcessingTap"))
  {
    if (a3)
    {
      CFTypeID v19 = CFGetTypeID(a3);
      if (v19 != MTAudioProcessingTapGetTypeID()) {
        return 4294950915;
      }
    }
    uint64_t v20 = a1;
    uint64_t v21 = a3;
LABEL_62:
    audioRenderer_setAudioProcessingTap(v20, v21);
    return 0;
  }
  if (CFEqual(a2, @"AudioProcessingTapID"))
  {
    if (a3)
    {
      CFTypeID v22 = CFGetTypeID(a3);
      if (v22 != CFNumberGetTypeID()) {
        return 4294950915;
      }
      valuePtr[0] = 0;
      uint64_t v40 = 0;
      CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt64Type, &v40);
      if (v40)
      {
        uint64_t v23 = MTAudioProcessingTapXPCServerCopyTapForID(v40, valuePtr);
        if (v23) {
          return v23;
        }
        uint64_t v21 = (const void *)valuePtr[0];
      }
      else
      {
        uint64_t v21 = 0;
      }
    }
    else
    {
      uint64_t v21 = 0;
      valuePtr[0] = 0;
      uint64_t v40 = 0;
    }
    uint64_t v20 = a1;
    goto LABEL_62;
  }
  if (CFEqual(a2, @"FigAudioSession"))
  {
    if (!a3) {
      return 4294950915;
    }
    CFTypeID v24 = CFGetTypeID(a3);
    if (v24 != FigAudioSessionGetTypeID()) {
      return 4294950915;
    }
    return audioRenderer_setAudioSession(a1, a3);
  }
  else if (CFEqual(a2, @"MultichannelAudioSpatializationAllowed"))
  {
    if (!a3) {
      return 4294950915;
    }
    CFTypeID v25 = CFGetTypeID(a3);
    if (v25 != CFBooleanGetTypeID()) {
      return 4294950915;
    }
    return audioRenderer_setMultichannelAudioSpatializationAllowed(a1, a3);
  }
  else if (CFEqual(a2, @"StereoAudioSpatializationAllowed"))
  {
    if (!a3) {
      return 4294950915;
    }
    CFTypeID v26 = CFGetTypeID(a3);
    if (v26 != CFBooleanGetTypeID()) {
      return 4294950915;
    }
    return audioRenderer_setStereoAudioSpatializationAllowed(a1, a3);
  }
  else if (CFEqual(a2, @"IsUnaccompaniedByVisuals"))
  {
    if (!a3) {
      return 4294950915;
    }
    CFTypeID v27 = CFGetTypeID(a3);
    if (v27 != CFBooleanGetTypeID()) {
      return 4294950915;
    }
    return audioRenderer_setIsUnaccompaniedByVisuals(a1, a3);
  }
  else if (CFEqual(a2, @"ClockDevice"))
  {
    if (!a3) {
      return 4294950915;
    }
    CFTypeID v28 = CFGetTypeID(a3);
    if (v28 != CFStringGetTypeID()) {
      return 4294950915;
    }
    return audioRenderer_setPropertyOnAudioRenderPipeline(a1, @"AudioQueueClockDevice", a3, 1);
  }
  else
  {
    if (CFEqual(a2, @"ShouldAttemptImmediatePlaybackStart"))
    {
      if (!a3) {
        return 4294950915;
      }
      CFTypeID v29 = CFGetTypeID(a3);
      if (v29 != CFBooleanGetTypeID()) {
        return 4294950915;
      }
      v7[100] = CFBooleanGetValue((CFBooleanRef)a3);
      return 0;
    }
    if (!CFEqual(a2, @"BufferedAirPlayOutput"))
    {
      if (CFEqual(a2, @"STSLabel"))
      {
        if (a3)
        {
          CFTypeID v31 = CFGetTypeID(a3);
          if (v31 != CFStringGetTypeID()) {
            return 4294950915;
          }
        }
        OSStatus v32 = kFigAudioRenderPipelineProperty_STSLabel;
      }
      else
      {
        if (CFEqual(a2, @"ShouldFillDiscontinuitiesWithSilence"))
        {
          if (!a3) {
            return 4294950915;
          }
          CFTypeID v34 = CFGetTypeID(a3);
          if (v34 != CFBooleanGetTypeID()) {
            return 4294950915;
          }
          int v35 = v7[103];
          if (v35 != CFBooleanGetValue((CFBooleanRef)a3))
          {
            v7[103] = CFBooleanGetValue((CFBooleanRef)a3);
            if (dword_1E93517A8)
            {
              os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
          }
          return 0;
        }
        if (CFEqual(a2, @"NonBAOPlaybackIsDisallowed"))
        {
          if (!a3) {
            return 4294950915;
          }
          CFTypeID v37 = CFGetTypeID(a3);
          if (v37 != CFBooleanGetTypeID()) {
            return 4294950915;
          }
          v7[101] = CFBooleanGetValue((CFBooleanRef)a3);
          return 0;
        }
        if (CFEqual(a2, @"FARPAlwaysNotifyLatencyChange"))
        {
          if (!a3) {
            return 4294950915;
          }
          CFTypeID v38 = CFGetTypeID(a3);
          if (v38 != CFBooleanGetTypeID()) {
            return 4294950915;
          }
          v7[102] = CFBooleanGetValue((CFBooleanRef)a3);
          return 0;
        }
        if (!CFEqual(a2, @"FARPMATOriginalSourceFormat")) {
          return 4294950910;
        }
        if (!a3) {
          return 4294950915;
        }
        CFTypeID v39 = CFGetTypeID(a3);
        if (v39 != CFNumberGetTypeID()) {
          return 4294950915;
        }
        OSStatus v32 = kFigAudioRenderPipelineProperty_MATOriginalSourceFormat;
      }
      unsigned int v33 = audioRenderer_setPropertyOnAudioRenderPipeline(a1, *v32, a3, 1);
      if (v33 == -12850) {
        return 0;
      }
      else {
        return v33;
      }
    }
    if (a3)
    {
      CFTypeID v30 = CFGetTypeID(a3);
      if (v30 != FigBufferedAirPlayOutputGetTypeID()) {
        return 4294950915;
      }
    }
    return audioRenderer_setBufferedAirPlayOutput(a1, a3);
  }
}

void audioRenderer_tearDownFARP(uint64_t a1, int a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  long long v23 = *MEMORY[0x1E4F1F9F8];
  *(_OWORD *)&v24.CMTimeValue value = *MEMORY[0x1E4F1F9F8];
  CMTimeEpoch v5 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  v24.CMTimeEpoch epoch = v5;
  if (dword_1E93517A8 >= 2)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(void *)(DerivedStorage + 56))
  {
    if (*(void *)(CMBaseObjectGetDerivedStorage() + 56))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
    }
    CMTimebaseGetTime(&v24, *(CMTimebaseRef *)(DerivedStorage + 24));
    uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(*(void *)(DerivedStorage + 56));
    if (FigBaseObject)
    {
      uint64_t v8 = FigBaseObject;
      uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v10 = v9 ? v9 : 0;
      CFTypeID v11 = *(void (**)(uint64_t))(v10 + 24);
      if (v11) {
        v11(v8);
      }
    }
    uint64_t v12 = CMBaseObjectGetDerivedStorage();
    uint64_t v13 = *(void *)(v12 + 48);
    if (v13)
    {
      uint64_t v14 = v12;
      uint64_t v15 = *(void *)(v12 + 40);
      uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v16) {
        uint64_t v17 = v16;
      }
      else {
        uint64_t v17 = 0;
      }
      CFTypeID v18 = *(void (**)(uint64_t, uint64_t))(v17 + 40);
      if (v18) {
        v18(v13, v15);
      }
      CFTypeID v19 = *(const void **)(v14 + 48);
      if (v19)
      {
        CFRelease(v19);
        *(void *)(v14 + 48) = 0;
      }
    }
    uint64_t v20 = *(const void **)(DerivedStorage + 56);
    if (v20)
    {
      CFRelease(v20);
      *(void *)(DerivedStorage + 56) = 0;
    }
    uint64_t v21 = *(const void **)(DerivedStorage + 152);
    if (v21)
    {
      CFRelease(v21);
      *(void *)(DerivedStorage + 152) = 0;
    }
    *(_OWORD *)(DerivedStorage + 220) = v23;
    *(void *)(DerivedStorage + 236) = v5;
    if (*(unsigned char *)(DerivedStorage + 296) && !*(unsigned char *)(DerivedStorage + 433))
    {
      float v22 = *(float *)(DerivedStorage + 300);
      v27[0] = *(CMTime *)(DerivedStorage + 304);
      long long v25 = *(_OWORD *)(DerivedStorage + 328);
      uint64_t v26 = *(void *)(DerivedStorage + 344);
      audioRenderer_setRateAndTimeWithoutFARP(v22, a1, (uint64_t)v27, (uint64_t)&v25);
      *(_WORD *)(DerivedStorage + 296) = 0;
    }
    if (a2 == 1)
    {
      v27[0] = v24;
      audioRenderer_postWasFlushedAutomaticallyNotificationForTime(a1, v27);
    }
  }
}

uint64_t audioRenderer_removeNotificationListenerFromTimebase(uint64_t a1, OpaqueCMTimebase *a2)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    uint64_t v4 = result;
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMTimeEpoch v5 = *(NSObject **)(v4 + 360);
    return CMTimebaseRemoveTimerDispatchSource(a2, v5);
  }
  return result;
}

uint64_t audioRenderer_bapOutputRemoveWeakListeners(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    return FigNotificationCenterRemoveWeakListeners();
  }
  return result;
}

void audioRenderer_readyToDecryptChanged(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*(void *)DerivedStorage);
  if (!*(unsigned char *)(DerivedStorage + 433)) {
    audioRenderer_updateFARPSuspendedState(a2, *(void *)(DerivedStorage + 56));
  }

  JUMPOUT(0x19970E2B0);
}

uint64_t audioRenderer_setRateAndTimeWithoutFARP(float a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  memset(&v17, 0, sizeof(v17));
  if (!*(unsigned char *)(DerivedStorage + 32)) {
    return 0;
  }
  uint64_t v8 = DerivedStorage;
  uint64_t v9 = *(OpaqueCMTimebase **)(DerivedStorage + 24);
  if (!v9) {
    return 0;
  }
  if (*(unsigned char *)(a3 + 12))
  {
    CMClockOrTimebaseRef v12 = CMTimebaseCopySource(v9);
    uint64_t v10 = v12;
    if (*(unsigned char *)(a4 + 12))
    {
      HostTimeClocuint64_t k = CMClockGetHostTimeClock();
      CMTime time = *(CMTime *)a4;
      CMSyncConvertTime(&v17, &time, HostTimeClock, v10);
    }
    else
    {
      CMSyncGetTime(&v17, v12);
    }
  }
  else
  {
    uint64_t v10 = 0;
    CMTime v17 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  }
  if (dword_1E93517A8)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v15 = *(OpaqueCMTimebase **)(v8 + 24);
  CMTime time = *(CMTime *)a3;
  CMTime immediateSourceTime = v17;
  uint64_t v11 = CMTimebaseSetRateAndAnchorTime(v15, a1, &time, &immediateSourceTime);
  if (v10) {
    CFRelease(v10);
  }
  return v11;
}

void audioRenderer_postWasFlushedAutomaticallyNotificationForTime(uint64_t a1, CMTime *a2)
{
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CMTime v5 = *a2;
  CFDictionaryRef v3 = CMTimeCopyAsDictionary(&v5, v2);
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v2, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionarySetValue(Mutable, @"FlushMediaTime", v3);
  audioRenderer_postNotification();
  if (v3) {
    CFRelease(v3);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
}

void audioRenderer_renderPipelineDecodeError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*(void *)DerivedStorage);
  if (!*(unsigned char *)(DerivedStorage + 433) && *(void *)(DerivedStorage + 56) == a4) {
    audioRenderer_flushWithType(a2, 1);
  }

  JUMPOUT(0x19970E2B0);
}

uint64_t audioRenderer_renderPipelineDeviceOrLatencyChanged(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (dword_1E93517A8)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x19970E290](*DerivedStorage);
  if (!*((unsigned char *)DerivedStorage + 433) && DerivedStorage[7] == a4)
  {
    if (*((unsigned char *)DerivedStorage + 296)) {
      *((unsigned char *)DerivedStorage + 297) = 1;
    }
    else {
      audioRenderer_resynchronize(a2);
    }
  }
  return MEMORY[0x19970E2B0](*DerivedStorage);
}

uint64_t audioRenderer_renderPipelinePrerollLost(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  CMTime v9 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  MEMORY[0x19970E290](*DerivedStorage);
  if (!*((unsigned char *)DerivedStorage + 433) && DerivedStorage[7] == a4)
  {
    CMTimebaseGetTime(&v9, (CMTimebaseRef)DerivedStorage[3]);
    CMTime v8 = v9;
    audioRenderer_postWasFlushedAutomaticallyNotificationForTime(a2, &v8);
  }
  return MEMORY[0x19970E2B0](*DerivedStorage);
}

void audioRenderer_renderPipelineRebuildCouldBenefitFidelity(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*(void *)DerivedStorage);
  if (!*(unsigned char *)(DerivedStorage + 433) && *(void *)(DerivedStorage + 56) == a4) {
    audioRenderer_postNotification();
  }

  JUMPOUT(0x19970E2B0);
}

uint64_t audioRenderer_flushWithType(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (dword_1E93517A8)
  {
    int v14 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x19970E290](*DerivedStorage);
  if (*((unsigned char *)DerivedStorage + 433))
  {
    MEMORY[0x19970E2B0](*DerivedStorage);
    return 4294954511;
  }
  else
  {
    uint64_t v6 = DerivedStorage[7];
    if (v6)
    {
      uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v8 = v7 ? v7 : 0;
      CMTime v9 = *(void (**)(uint64_t, uint64_t))(v8 + 64);
      if (v9) {
        v9(v6, 1);
      }
    }
    audioRenderer_tearDownFARP(a1, a2);
    v10.n128_u32[0] = *((_DWORD *)DerivedStorage + 24);
    if (v10.n128_f32[0] != 0.0)
    {
      CMTimebaseGetTime(&v12, (CMTimebaseRef)DerivedStorage[3]);
      __n128 v10 = audioRenderer_beginUnderrun(a1, (__n128 *)&v12);
    }
    MEMORY[0x19970E2B0](*DerivedStorage, v10);
    audioRenderer_postNotification();
    return 0;
  }
}

__n128 audioRenderer_beginUnderrun(uint64_t a1, __n128 *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if ((*(unsigned char *)(DerivedStorage + 384) & 1) == 0)
  {
    CMTime v5 = (__n128 *)(DerivedStorage + 372);
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      CFMutableDictionaryRef v7 = Mutable;
      FigCFDictionarySetCMTime();
      audioRenderer_postNotification();
      __n128 v8 = *a2;
      v5[1].n128_u64[0] = a2[1].n128_u64[0];
      *CMTime v5 = v8;
      CFRelease(v7);
    }
    else
    {
      __n128 result = *a2;
      v5[1].n128_u64[0] = a2[1].n128_u64[0];
      *CMTime v5 = result;
    }
  }
  return result;
}

uint64_t audioRenderer_postNotification()
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)(result + 433))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    return FigDispatchAsyncPostNotification();
  }
  return result;
}

uint64_t audioRenderer_resynchronize(uint64_t a1)
{
  if (dword_1E93517A8)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return audioRenderer_disturbPlaybackSwapPointerRestorePlayback(a1, 0, 0, 1);
}

void audioRenderer_disturbPlaybackSwapPointerRestorePlayback(uint64_t a1, const void **a2, const void *a3, int a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
  {
    if (!a4) {
      return;
    }
    if (dword_1E93517A8 >= 2)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    goto LABEL_11;
  }
  if (a4) {
    BOOL v9 = 1;
  }
  else {
    BOOL v9 = FigCFEqual() == 0;
  }
  if (dword_1E93517A8 >= 2)
  {
    uint64_t v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (v9)
  {
LABEL_11:
    if (*(void *)(DerivedStorage + 56)) {
      audioRenderer_tearDownFARP(a1, 1);
    }
    if (a2)
    {
      CMTime v12 = *a2;
      *a2 = a3;
      if (a3) {
        CFRetain(a3);
      }
      if (v12) {
        CFRelease(v12);
      }
    }
  }
}

void audioRenderer_timebaseRateChangedListener(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  if (!*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 433) && CMTimebaseGetRate((CMTimebaseRef)a4) != 0.0)
  {
    if (audioRenderer_timebaseRateChangedListener_sSetupAudioRendererTimebaseListenerQueueOnce != -1) {
      dispatch_once_f(&audioRenderer_timebaseRateChangedListener_sSetupAudioRendererTimebaseListenerQueueOnce, &audioRenderer_timebaseRateChangedListener_sAudioRendererTimebaseListenerQueue, (dispatch_function_t)audioRenderer_setupTimebaseRateChangedListenerAsyncQueue);
    }
    uint64_t v6 = malloc_type_malloc(0x10uLL, 0x20040A4A59CD2uLL);
    CFRetain(a2);
    *uint64_t v6 = a2;
    CFRetain(a4);
    v6[1] = a4;
    CFMutableDictionaryRef v7 = audioRenderer_timebaseRateChangedListener_sAudioRendererTimebaseListenerQueue;
    dispatch_async_f(v7, v6, (dispatch_function_t)audioRenderer_timebaseRateChangedListenerAsync);
  }
}

dispatch_queue_t audioRenderer_setupTimebaseRateChangedListenerAsyncQueue(dispatch_queue_t *a1)
{
  dispatch_queue_t result = dispatch_queue_create("com.apple.coremedia.audiorenderer.timebaselistener", 0);
  *a1 = result;
  return result;
}

void audioRenderer_timebaseRateChangedListenerAsync(const void **a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  CFAllocatorRef v2 = *a1;
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  uint64_t v4 = a1[1];
  MEMORY[0x19970E290](*DerivedStorage);
  if (v4 == (const void *)DerivedStorage[3])
  {
    if (dword_1E93517A8)
    {
      int v7 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    *((unsigned char *)DerivedStorage + 296) = 0;
    if (*((unsigned char *)DerivedStorage + 297))
    {
      audioRenderer_resynchronize((uint64_t)v2);
      *((unsigned char *)DerivedStorage + 297) = 0;
    }
  }
  MEMORY[0x19970E2B0](*DerivedStorage);
  CFRelease(v2);
  CFRelease(v4);
  free(a1);
}

void audioRenderer_bapOutputActiveConfigurationDidBecomeInvalid(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  cf[24] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  cf[0] = 0;
  MEMORY[0x19970E290](*DerivedStorage);
  if (!*((unsigned char *)DerivedStorage + 433) && DerivedStorage[9] == a4)
  {
    uint64_t CMBaseObject = FigBufferedAirPlayOutputGetCMBaseObject(a4);
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    __n128 v10 = *(void (**)(uint64_t, __CFString *, void, CFTypeRef *))(v9 + 48);
    if (v10) {
      v10(CMBaseObject, @"IsActiveConfigurationInvalid", *MEMORY[0x1E4F1CF80], cf);
    }
    if (FigCFEqual())
    {
      if (dword_1E93517A8)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v12) {
        uint64_t v13 = v12;
      }
      else {
        uint64_t v13 = 0;
      }
      int v14 = *(void (**)(uint64_t))(v13 + 48);
      if (v14) {
        v14(a4);
      }
      audioRenderer_disturbPlaybackSwapPointerRestorePlayback(a2, 0, 0, 1);
    }
  }
  MEMORY[0x19970E2B0](*DerivedStorage);
  if (cf[0]) {
    CFRelease(cf[0]);
  }
}

void audioRenderer_updateFARPSuspendedState(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  if (a2 && !*(unsigned char *)(DerivedStorage + 433))
  {
    uint64_t v4 = *(void *)(DerivedStorage + 208);
    CMTime v5 = (uint64_t *)MEMORY[0x1E4F1CFC8];
    if (v4)
    {
      uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v6) {
        uint64_t v7 = v6;
      }
      else {
        uint64_t v7 = 0;
      }
      uint64_t v8 = *(void (**)(uint64_t, void, void, CFTypeRef *))(v7 + 48);
      if (v8) {
        v8(v4, *MEMORY[0x1E4F1FDF8], *MEMORY[0x1E4F1CF80], &cf);
      }
      uint64_t v9 = (uint64_t *)MEMORY[0x1E4F1CFD0];
      if (!FigCFEqual()) {
        CMTime v5 = v9;
      }
    }
    uint64_t v10 = *v5;
    uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(a2);
    uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v12) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    int v14 = *(void (**)(uint64_t, __CFString *, uint64_t))(v13 + 56);
    if (v14) {
      v14(FigBaseObject, @"Suspended", v10);
    }
  }
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t audioRenderer_setAudioTimePitchAlgorithm(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = (const void **)CMBaseObjectGetDerivedStorage();
  if (!a2) {
    return 4294950916;
  }
  CMTime v5 = DerivedStorage;
  MEMORY[0x19970E290](*DerivedStorage);
  if (*((unsigned char *)v5 + 433))
  {
    MEMORY[0x19970E2B0](*v5);
  }
  else
  {
    audioRenderer_disturbPlaybackSwapPointerRestorePlayback(a1, v5 + 16, a2, 0);
    MEMORY[0x19970E2B0](*v5);
    audioRenderer_postNotification();
  }
  return 0;
}

uint64_t audioRenderer_setAudioProcessingTap(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*DerivedStorage);
  if (*((unsigned char *)DerivedStorage + 433))
  {
    JUMPOUT(0x19970E2B0);
  }
  audioRenderer_disturbPlaybackSwapPointerRestorePlayback(a1, (const void **)DerivedStorage + 18, a2, 0);
  MEMORY[0x19970E2B0](*DerivedStorage);

  return audioRenderer_postNotification();
}

uint64_t audioRenderer_setAudioSession(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (!a2) {
    return 4294950916;
  }
  CMTime v5 = DerivedStorage;
  MEMORY[0x19970E290](*DerivedStorage);
  if (*((unsigned char *)v5 + 433) || (uint64_t v6 = (const void *)v5[20], v6 == a2))
  {
    uint64_t started = 0;
LABEL_10:
    MEMORY[0x19970E2B0](*v5);
    return started;
  }
  if (v6) {
    FigStopForwardingMediaServicesProcessDeathNotification();
  }
  audioRenderer_disturbPlaybackSwapPointerRestorePlayback(a1, (const void **)v5 + 20, a2, 0);
  uint64_t started = FigStartForwardingMediaServicesProcessDeathNotification();
  if (started) {
    goto LABEL_10;
  }
  MEMORY[0x19970E2B0](*v5);
  audioRenderer_postNotification();
  return started;
}

uint64_t audioRenderer_setMultichannelAudioSpatializationAllowed(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = (const void **)CMBaseObjectGetDerivedStorage();
  if (!a2) {
    return 4294950916;
  }
  CMTime v5 = DerivedStorage;
  MEMORY[0x19970E290](*DerivedStorage);
  if (*((unsigned char *)v5 + 433))
  {
    MEMORY[0x19970E2B0](*v5);
  }
  else
  {
    audioRenderer_disturbPlaybackSwapPointerRestorePlayback(a1, v5 + 22, a2, 0);
    MEMORY[0x19970E2B0](*v5);
    audioRenderer_postNotification();
  }
  return 0;
}

uint64_t audioRenderer_setStereoAudioSpatializationAllowed(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = (const void **)CMBaseObjectGetDerivedStorage();
  if (!a2) {
    return 4294950916;
  }
  CMTime v5 = DerivedStorage;
  MEMORY[0x19970E290](*DerivedStorage);
  if (*((unsigned char *)v5 + 433))
  {
    MEMORY[0x19970E2B0](*v5);
  }
  else
  {
    audioRenderer_disturbPlaybackSwapPointerRestorePlayback(a1, v5 + 23, a2, 0);
    *((unsigned char *)v5 + 192) = 1;
    MEMORY[0x19970E2B0](*v5);
    audioRenderer_postNotification();
  }
  return 0;
}

uint64_t audioRenderer_setIsUnaccompaniedByVisuals(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = (const void **)CMBaseObjectGetDerivedStorage();
  if (!a2) {
    return 4294950916;
  }
  CMTime v5 = DerivedStorage;
  MEMORY[0x19970E290](*DerivedStorage);
  if (*((unsigned char *)v5 + 433))
  {
    MEMORY[0x19970E2B0](*v5);
  }
  else
  {
    audioRenderer_disturbPlaybackSwapPointerRestorePlayback(a1, v5 + 25, a2, 0);
    MEMORY[0x19970E2B0](*v5);
    audioRenderer_postNotification();
  }
  return 0;
}

uint64_t audioRenderer_setBufferedAirPlayOutput(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = (const char *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*(void *)DerivedStorage);
  uint64_t v5 = *((void *)DerivedStorage + 9);
  if ((const void *)v5 != a2)
  {
    audioRenderer_bapOutputRemoveWeakListeners(a1, v5);
    uint64_t v6 = (const void *)*((void *)DerivedStorage + 9);
    *((void *)DerivedStorage + 9) = a2;
    if (a2) {
      CFRetain(a2);
    }
    if (v6) {
      CFRelease(v6);
    }
    if (*((void *)DerivedStorage + 9)
      && (CMNotificationCenterGetDefaultLocalCenter(),
          FigNotificationCenterAddWeakListeners(),
          *((void *)DerivedStorage + 9)))
    {
      CFStringRef v7 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], DerivedStorage + 448, 0x8000100u);
      if (v7)
      {
        CFStringRef v8 = v7;
        uint64_t CMBaseObject = FigBufferedAirPlayOutputGetCMBaseObject(*((void *)DerivedStorage + 9));
        uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v10) {
          uint64_t v11 = v10;
        }
        else {
          uint64_t v11 = 0;
        }
        uint64_t v13 = *(uint64_t (**)(uint64_t, __CFString *, CFStringRef))(v11 + 56);
        if (v13) {
          uint64_t v12 = v13(CMBaseObject, @"LoggingID", v8);
        }
        else {
          uint64_t v12 = 4294954514;
        }
        uint64_t v14 = *((void *)DerivedStorage + 20);
        if (v14)
        {
          uint64_t v15 = FigBufferedAirPlayOutputGetCMBaseObject(*((void *)DerivedStorage + 9));
          uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v16) {
            uint64_t v17 = v16;
          }
          else {
            uint64_t v17 = 0;
          }
          CFTypeID v18 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v17 + 56);
          if (!v18) {
            goto LABEL_30;
          }
          uint64_t v12 = v18(v15, @"FigAudioSession", v14);
          if (v12) {
            goto LABEL_31;
          }
        }
        uint64_t v19 = *((void *)DerivedStorage + 21);
        if (!v19)
        {
LABEL_29:
          audioRenderer_tearDownFARP(a1, 1);
          goto LABEL_31;
        }
        uint64_t v20 = FigBufferedAirPlayOutputGetCMBaseObject(*((void *)DerivedStorage + 9));
        uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v21) {
          uint64_t v22 = v21;
        }
        else {
          uint64_t v22 = 0;
        }
        long long v23 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v22 + 56);
        if (v23)
        {
          uint64_t v12 = v23(v20, @"ClientAuditToken", v19);
          if (!v12) {
            goto LABEL_29;
          }
LABEL_31:
          CFRelease(v8);
          goto LABEL_32;
        }
LABEL_30:
        uint64_t v12 = 4294954514;
        goto LABEL_31;
      }
    }
    else
    {
      audioRenderer_tearDownFARP(a1, 1);
    }
  }
  uint64_t v12 = 0;
LABEL_32:
  MEMORY[0x19970E2B0](*(void *)DerivedStorage);
  return v12;
}

uint64_t audioRenderer_applySoftwareVolume(uint64_t a1, CFTypeRef cf1, int a3, float a4, float a5)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  float v20 = a5;
  float valuePtr = a4;
  if (dword_1E93517A8)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (CFEqual(cf1, @"SoftwareVolume1"))
  {
    char v10 = 0;
    uint64_t v11 = kFigAudioRenderPipelineProperty_SoftwareVolume1RampDuration;
LABEL_7:
    uint64_t v12 = *v11;
    goto LABEL_8;
  }
  if (CFEqual(cf1, @"SoftwareVolume2"))
  {
    char v10 = 0;
    uint64_t v11 = kFigAudioRenderPipelineProperty_SoftwareVolume2RampDuration;
    goto LABEL_7;
  }
  if (!CFEqual(cf1, @"SoftwareVolume5")) {
    return FigSignalErrorAt();
  }
  uint64_t v12 = 0;
  char v10 = 1;
LABEL_8:
  if (a5 < 0.0) {
    float v20 = 0.0;
  }
  CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFNumberRef v14 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberFloatType, &valuePtr);
  CFNumberRef v15 = CFNumberCreate(v13, kCFNumberFloatType, &v20);
  if ((v10 & 1) != 0 || (uint64_t v16 = audioRenderer_setPropertyOnAudioRenderPipeline(a1, v12, v15, 0), !v16))
  {
    uint64_t v17 = audioRenderer_setPropertyOnAudioRenderPipeline(a1, cf1, v14, 1);
    uint64_t v18 = v17;
    if (a3 == 1 && !v17)
    {
      if (v20 > 0.0) {
        usleep((v20 * 1000.0 * 1000.0));
      }
      uint64_t v18 = 0;
    }
    if (!v15) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  uint64_t v18 = v16;
  if (v15) {
LABEL_18:
  }
    CFRelease(v15);
LABEL_19:
  if (v14) {
    CFRelease(v14);
  }
  return v18;
}

__CFString *audioRenderer_deviceRendererProtocolCopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"FigSampleBufferAudioRenderer <FigSampleBufferAudioDeviceRendererProtocol> on <%p>", a1);
  return Mutable;
}

uint64_t audioRenderer_DuckVolume(uint64_t a1, int a2, float a3, float a4)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*DerivedStorage);
  if (dword_1E93517A8)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*((unsigned char *)DerivedStorage + 433))
  {
    uint64_t v12 = 4294954511;
    goto LABEL_16;
  }
  float v10 = 0.0;
  if (a3 >= 0.0) {
    float v10 = a3;
  }
  if (a2)
  {
    if (v10 < 1.0 && *((unsigned char *)DerivedStorage + 424) == 0)
    {
      *((float *)DerivedStorage + 107) = v10;
      *((unsigned char *)DerivedStorage + 424) = 1;
      audioRenderer_applySoftwareVolume(a1, @"SoftwareVolume2", 1, v10, a4);
    }
    goto LABEL_15;
  }
  if (!*((unsigned char *)DerivedStorage + 424))
  {
LABEL_15:
    uint64_t v12 = 0;
    goto LABEL_16;
  }
  audioRenderer_applySoftwareVolume(a1, @"SoftwareVolume2", 0, v10, a4);
  uint64_t v12 = 0;
  *((unsigned char *)DerivedStorage + 424) = 0;
LABEL_16:
  MEMORY[0x19970E2B0](*DerivedStorage);
  return v12;
}

uint64_t audioRenderer_SilentMute(uint64_t a1, int a2)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*DerivedStorage);
  if (dword_1E93517A8)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*((unsigned char *)DerivedStorage + 433))
  {
    uint64_t v8 = 4294954511;
    goto LABEL_11;
  }
  if (!a2)
  {
    if (*((unsigned char *)DerivedStorage + 432))
    {
      char v6 = 0;
      float v7 = 1.0;
      goto LABEL_9;
    }
LABEL_10:
    uint64_t v8 = 0;
    goto LABEL_11;
  }
  if (*((unsigned char *)DerivedStorage + 432)) {
    goto LABEL_10;
  }
  char v6 = 1;
  float v7 = 0.0;
LABEL_9:
  audioRenderer_applySoftwareVolume(a1, @"SoftwareVolume5", 1, v7, 0.0);
  uint64_t v8 = 0;
  *((unsigned char *)DerivedStorage + 432) = v6;
LABEL_11:
  MEMORY[0x19970E2B0](*DerivedStorage);
  return v8;
}

uint64_t audioRenderer_queueIsAboveHighWaterLevel()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*DerivedStorage);
  if (*((unsigned char *)DerivedStorage + 433))
  {
    uint64_t v5 = 1;
  }
  else if (DerivedStorage[7] {
         && ((v1 = DerivedStorage[6], (uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 16)) == 0) ? (v3 = 0) : (v3 = v2),
  }
             (uint64_t v4 = *(uint64_t (**)(uint64_t))(v3 + 16)) != 0))
  {
    uint64_t v5 = v4(v1);
  }
  else
  {
    uint64_t v5 = 0;
  }
  MEMORY[0x19970E2B0](*DerivedStorage);
  return v5;
}

uint64_t audioRenderer_enqueueSampleBuffer(uint64_t a1, opaqueCMSampleBuffer *a2)
{
  uint64_t v229 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  CMTime v195 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  if (!a2) {
    return 4294950916;
  }
  uint64_t v5 = DerivedStorage;
  MEMORY[0x19970E290](*DerivedStorage);
  if (*((unsigned char *)v5 + 433))
  {
    uint64_t v77 = 4294954511;
    goto LABEL_264;
  }
  Decryptor = (const void *)FigSampleBufferGetDecryptor();
  uint64_t v7 = CMBaseObjectGetDerivedStorage();
  uint64_t v8 = *(const void **)(v7 + 208);
  if (v8 != Decryptor)
  {
    uint64_t v9 = v7;
    if (dword_1E93517A8)
    {
      LODWORD(v226) = 0;
      LOBYTE(type.value) = 0;
      os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      uint64_t v8 = *(const void **)(v9 + 208);
    }
    if (v8)
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      uint64_t v11 = *(const void **)(v9 + 208);
    }
    else
    {
      uint64_t v11 = 0;
    }
    *(void *)(v9 + 208) = Decryptor;
    if (Decryptor) {
      CFRetain(Decryptor);
    }
    if (v11) {
      CFRelease(v11);
    }
    if (Decryptor)
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
    }
    audioRenderer_updateFARPSuspendedState(a1, *(void *)(v9 + 56));
  }
  if (v5[7]) {
    goto LABEL_202;
  }
  uint64_t v12 = (void *)CMBaseObjectGetDerivedStorage();
  valuePtr.CMTimeValue value = 0;
  MEMORY[0x19970E290](*v12);
  if (*((unsigned char *)v12 + 433))
  {
    uint64_t v77 = 4294954511;
    goto LABEL_199;
  }
  CMFormatDescriptionRef FormatDescription = CMSampleBufferGetFormatDescription(a2);
  uint64_t v14 = CMBaseObjectGetDerivedStorage();
  v206.CMTimeValue value = 0;
  v205.CMTimeValue value = 0;
  v204.CMTimeValue value = 0;
  if (!FormatDescription)
  {
    uint64_t v77 = 4294950916;
    goto LABEL_183;
  }
  uint64_t v15 = v14;
  if (FPSupport_CopyAndCheckClientOnAllowListForPrefDomainKey(*(void *)(v14 + 160), 1, 0x1EE54F7F8, (CFTypeRef *)&v204)&& !*(unsigned char *)(v15 + 192))
  {
    uint64_t v16 = *(const void **)(v15 + 184);
    uint64_t v17 = (const void *)*MEMORY[0x1E4F1CFD0];
    *(void *)(v15 + 184) = *MEMORY[0x1E4F1CFD0];
    if (v17) {
      CFRetain(v17);
    }
    if (v16) {
      CFRelease(v16);
    }
  }
  int shouldEnableSpatialization = audioRenderer_shouldEnableSpatialization(a1, (uint64_t)FormatDescription);
  uint64_t v19 = CMBaseObjectGetDerivedStorage();
  CFTypeRef v184 = FormatDescription;
  if (*(unsigned char *)(v19 + 292))
  {
    if (dword_1E93517A8)
    {
      int v185 = shouldEnableSpatialization;
      uint64_t v187 = v15;
      float v20 = FormatDescription;
      LODWORD(v226) = 0;
      LOBYTE(type.value) = 0;
      uint64_t v21 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v22 = v226;
      if (os_log_type_enabled(v21, type.value)) {
        unsigned int v23 = v22;
      }
      else {
        unsigned int v23 = v22 & 0xFFFFFFFE;
      }
      if (v23)
      {
        if (a1) {
          CMTime v24 = (const char *)(CMBaseObjectGetDerivedStorage() + 448);
        }
        else {
          CMTime v24 = "";
        }
        LODWORD(time2.value) = 136315650;
        *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"audioRenderer_shouldAllowAtmosDecode";
        LOWORD(time2.flags) = 2048;
        *(void *)((char *)&time2.flags + 2) = a1;
        HIWORD(time2.epoch) = 2082;
        uint64_t v212 = v24;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      int v35 = 0;
      CMFormatDescriptionRef FormatDescription = v20;
      goto LABEL_63;
    }
LABEL_50:
    int v35 = 0;
    goto LABEL_65;
  }
  uint64_t v25 = *MEMORY[0x1E4F1CFD0];
  if (*MEMORY[0x1E4F1CFD0] != *(void *)(v19 + 176))
  {
    if (FigGetCFPreferenceBooleanWithDefault())
    {
      if (!dword_1E93517A8) {
        goto LABEL_50;
      }
      int v185 = shouldEnableSpatialization;
      uint64_t v187 = v15;
      uint64_t v26 = FormatDescription;
      CFTypeID v27 = v12;
      LODWORD(v226) = 0;
      LOBYTE(type.value) = 0;
      uint64_t v28 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v29 = v226;
      if (os_log_type_enabled(v28, type.value)) {
        unsigned int v30 = v29;
      }
      else {
        unsigned int v30 = v29 & 0xFFFFFFFE;
      }
      if (v30)
      {
        if (!a1)
        {
          CFTypeID v34 = "";
          goto LABEL_61;
        }
LABEL_49:
        CFTypeID v34 = (const char *)(CMBaseObjectGetDerivedStorage() + 448);
LABEL_61:
        LODWORD(time2.value) = 136315650;
        *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"audioRenderer_shouldAllowAtmosDecode";
        LOWORD(time2.flags) = 2048;
        *(void *)((char *)&time2.flags + 2) = a1;
        HIWORD(time2.epoch) = 2082;
        uint64_t v212 = v34;
        _os_log_send_and_compose_impl();
        goto LABEL_62;
      }
      goto LABEL_62;
    }
    v225[0].start.CMTimeValue value = 0;
    uint64_t v36 = *(void *)(CMBaseObjectGetDerivedStorage() + 72);
    int v185 = shouldEnableSpatialization;
    if (v36)
    {
      uint64_t CMBaseObject = FigBufferedAirPlayOutputGetCMBaseObject(v36);
      uint64_t v38 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v38) {
        uint64_t v39 = v38;
      }
      else {
        uint64_t v39 = 0;
      }
      uint64_t v96 = *(void (**)(uint64_t, __CFString *, void, CMTimeRange *))(v39 + 48);
      if (v96)
      {
        v96(CMBaseObject, @"AtmosIsSupported", 0, v225);
        CMTimeValue value = v225[0].start.value;
        uint64_t v40 = v15;
        if (v225[0].start.value) {
          CFRelease((CFTypeRef)v225[0].start.value);
        }
      }
      else
      {
        uint64_t v40 = v15;
        CMTimeValue value = 0;
      }
      uint64_t v41 = v12;
      if (v25 == value)
      {
        if (dword_1E93517A8)
        {
          LODWORD(v226) = 0;
          LOBYTE(type.value) = 0;
          CMTimeEpoch v102 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v103 = v226;
          if (os_log_type_enabled(v102, type.value)) {
            unsigned int v104 = v103;
          }
          else {
            unsigned int v104 = v103 & 0xFFFFFFFE;
          }
          if (v104)
          {
            if (a1) {
              uint64_t v105 = (const char *)(CMBaseObjectGetDerivedStorage() + 448);
            }
            else {
              uint64_t v105 = "";
            }
            LODWORD(time2.value) = 136315650;
            *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"audioRenderer_shouldAllowAtmosDecode";
            LOWORD(time2.flags) = 2048;
            *(void *)((char *)&time2.flags + 2) = a1;
            HIWORD(time2.epoch) = 2082;
            uint64_t v212 = v105;
            _os_log_send_and_compose_impl();
          }
          CMFormatDescriptionRef FormatDescription = v184;
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          int v35 = 0;
          goto LABEL_290;
        }
        int v35 = 0;
        goto LABEL_285;
      }
    }
    else
    {
      uint64_t v40 = v15;
      uint64_t v41 = v12;
    }
    if (dword_1E93517A8)
    {
      LODWORD(v226) = 0;
      LOBYTE(type.value) = 0;
      int v98 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v99 = v226;
      if (os_log_type_enabled(v98, type.value)) {
        unsigned int v100 = v99;
      }
      else {
        unsigned int v100 = v99 & 0xFFFFFFFE;
      }
      if (v100)
      {
        if (a1) {
          CFTypeRef v101 = (const char *)(CMBaseObjectGetDerivedStorage() + 448);
        }
        else {
          CFTypeRef v101 = "";
        }
        LODWORD(time2.value) = 136315650;
        *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"audioRenderer_shouldAllowAtmosDecode";
        LOWORD(time2.flags) = 2048;
        *(void *)((char *)&time2.flags + 2) = a1;
        HIWORD(time2.epoch) = 2082;
        uint64_t v212 = v101;
        _os_log_send_and_compose_impl();
      }
      uint64_t v12 = v41;
      CMFormatDescriptionRef FormatDescription = v184;
      int v35 = 1;
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      goto LABEL_290;
    }
    int v35 = 1;
LABEL_285:
    uint64_t v12 = v41;
    CMFormatDescriptionRef FormatDescription = v184;
LABEL_290:
    uint64_t v15 = v40;
    goto LABEL_64;
  }
  if (!dword_1E93517A8) {
    goto LABEL_50;
  }
  int v185 = shouldEnableSpatialization;
  uint64_t v187 = v15;
  uint64_t v26 = FormatDescription;
  CFTypeID v27 = v12;
  LODWORD(v226) = 0;
  LOBYTE(type.value) = 0;
  CFTypeID v31 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  unsigned int v32 = v226;
  if (os_log_type_enabled(v31, type.value)) {
    unsigned int v33 = v32;
  }
  else {
    unsigned int v33 = v32 & 0xFFFFFFFE;
  }
  if (v33)
  {
    if (!a1)
    {
      CFTypeID v34 = "";
      goto LABEL_61;
    }
    goto LABEL_49;
  }
LABEL_62:
  uint64_t v12 = v27;
  CMFormatDescriptionRef FormatDescription = v26;
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  int v35 = 0;
LABEL_63:
  uint64_t v15 = v187;
LABEL_64:
  int shouldEnableSpatialization = v185;
LABEL_65:
  uint64_t v42 = CMBaseObjectGetDerivedStorage();
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
    uint64_t v77 = 4294950914;
    goto LABEL_183;
  }
  CFTypeID v44 = Mutable;
  BOOL v188 = v12;
  CFDictionarySetValue(Mutable, @"FormatDescription", FormatDescription);
  CFTypeID v45 = *(const void **)(v42 + 120);
  if (v45) {
    CFDictionarySetValue(v44, @"AudioDeviceUID", v45);
  }
  CFRange v46 = (const void *)*MEMORY[0x1E4F1CFD0];
  int v47 = (const void *)*MEMORY[0x1E4F1CFC8];
  if (shouldEnableSpatialization) {
    uint64_t v48 = (const void *)*MEMORY[0x1E4F1CFD0];
  }
  else {
    uint64_t v48 = (const void *)*MEMORY[0x1E4F1CFC8];
  }
  CFDictionarySetValue(v44, @"EnableSpatialization", v48);
  if (v35) {
    CFTypeRef v49 = v47;
  }
  else {
    CFTypeRef v49 = v46;
  }
  CFDictionarySetValue(v44, @"AllowAtmosDecode", v49);
  CFStringRef v50 = *(const void **)(v42 + 200);
  if (v50) {
    CFDictionarySetValue(v44, @"AudioOnly", v50);
  }
  if (*(unsigned char *)(v42 + 102)) {
    uint64_t v51 = v46;
  }
  else {
    uint64_t v51 = v47;
  }
  CFDictionarySetValue(v44, @"AlwaysNotifyLatencyChange", v51);
  if (*(unsigned char *)(v42 + 136)) {
    unsigned int v52 = v46;
  }
  else {
    unsigned int v52 = v47;
  }
  CFDictionarySetValue(v44, @"DisallowTimePitch", v52);
  unsigned int v53 = *(const void **)(v42 + 160);
  if (v53) {
    CFDictionarySetValue(v44, @"AudioSession", v53);
  }
  uint64_t v54 = *MEMORY[0x1E4F1CF80];
  CFStringRef v55 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const char *)(v42 + 448), 0x8000100u);
  if (v55)
  {
    CFStringRef v56 = v55;
    CFDictionarySetValue(v44, @"LoggingID", v55);
    CFRelease(v56);
  }
  else
  {
    uint64_t v77 = FigSignalErrorAt();
    CFRelease(v44);
    CFTypeID v44 = 0;
    if (v77)
    {
      uint64_t v12 = v188;
      goto LABEL_183;
    }
  }
  int v57 = *(const void **)(v15 + 72);
  uint64_t v186 = v54;
  if (v57)
  {
    uint64_t v58 = FigBufferedAirPlayAudioRenderPipelineCreate(0, v57, v44, &v206.value);
    if (v58) {
      goto LABEL_144;
    }
    if (!dword_1E93517A8) {
      goto LABEL_110;
    }
    LODWORD(v226) = 0;
    LOBYTE(type.value) = 0;
    uint64_t v59 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v60 = v226;
    if (os_log_type_enabled(v59, type.value)) {
      unsigned int v61 = v60;
    }
    else {
      unsigned int v61 = v60 & 0xFFFFFFFE;
    }
    if (!v61) {
      goto LABEL_109;
    }
    if (a1) {
      CFDictionaryRef v62 = (const char *)(CMBaseObjectGetDerivedStorage() + 448);
    }
    else {
      CFDictionaryRef v62 = "";
    }
    uint64_t v67 = *(void *)(v15 + 72);
    LODWORD(time2.value) = 136316162;
    *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"audioRenderer_createFARPWithFormatDescription";
    LOWORD(time2.flags) = 2048;
    *(void *)((char *)&time2.flags + 2) = a1;
    HIWORD(time2.epoch) = 2082;
    uint64_t v212 = v62;
    __int16 v213 = 2048;
    CMTimeValue v214 = v206.value;
    __int16 v215 = 2048;
    uint64_t v216 = v67;
    goto LABEL_108;
  }
  uint64_t v58 = FigAudioQueueRenderPipelineCreate(0, v44, &v206);
  if (v58) {
    goto LABEL_144;
  }
  if (dword_1E93517A8)
  {
    LODWORD(v226) = 0;
    LOBYTE(type.value) = 0;
    uint64_t v63 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v64 = v226;
    if (os_log_type_enabled(v63, type.value)) {
      unsigned int v65 = v64;
    }
    else {
      unsigned int v65 = v64 & 0xFFFFFFFE;
    }
    if (!v65) {
      goto LABEL_109;
    }
    if (a1) {
      uint64_t v66 = (const char *)(CMBaseObjectGetDerivedStorage() + 448);
    }
    else {
      uint64_t v66 = "";
    }
    LODWORD(time2.value) = 136315906;
    *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"audioRenderer_createFARPWithFormatDescription";
    LOWORD(time2.flags) = 2048;
    *(void *)((char *)&time2.flags + 2) = a1;
    HIWORD(time2.epoch) = 2082;
    uint64_t v212 = v66;
    __int16 v213 = 2048;
    CMTimeValue v214 = v206.value;
LABEL_108:
    _os_log_send_and_compose_impl();
LABEL_109:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
LABEL_110:
  uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(v206.value);
  uint64_t v69 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v69) {
    uint64_t v70 = v69;
  }
  else {
    uint64_t v70 = 0;
  }
  CFTypeRef v71 = *(uint64_t (**)(uint64_t, __CFString *, const void *))(v70 + 56);
  if (!v71)
  {
    uint64_t v77 = 4294954514;
LABEL_120:
    uint64_t v12 = v188;
    goto LABEL_181;
  }
  uint64_t v58 = v71(FigBaseObject, @"HandleFormatDescriptionChanges", v46);
  if (v58) {
    goto LABEL_144;
  }
  uint64_t v72 = *(void *)(v15 + 128);
  if (v72 && !*(unsigned char *)(v15 + 136))
  {
    uint64_t v86 = FigRenderPipelineGetFigBaseObject(v206.value);
    uint64_t v87 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v87) {
      uint64_t v88 = v87;
    }
    else {
      uint64_t v88 = 0;
    }
    uint64_t v12 = v188;
    int v95 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v88 + 56);
    if (!v95) {
      goto LABEL_180;
    }
    uint64_t v58 = v95(v86, @"TimePitchAlgorithm", v72);
    if (v58)
    {
LABEL_144:
      uint64_t v77 = v58;
      goto LABEL_120;
    }
  }
  uint64_t v73 = *(void *)(v15 + 144);
  uint64_t v74 = FigRenderPipelineGetFigBaseObject(v206.value);
  uint64_t v75 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v75) {
    uint64_t v76 = v75;
  }
  else {
    uint64_t v76 = 0;
  }
  uint64_t v12 = v188;
  uint64_t v78 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v76 + 56);
  if (!v78) {
    goto LABEL_180;
  }
  uint64_t v58 = v78(v74, @"AudioProcessingTap", v73);
  if (v58) {
    goto LABEL_144;
  }
  uint64_t v79 = (void *)v206.value;
  long long v80 = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*v80);
  CFDictionaryApplyFunction((CFDictionaryRef)v80[10], (CFDictionaryApplierFunction)audioRenderer_applyCachedPropertiesToFARPApplierFunction, v79);
  MEMORY[0x19970E2B0](*v80);
  audioRenderer_updateFARPSuspendedState(a1, v206.value);
  CMTimeValue v81 = v206.value;
  uint64_t v82 = CMBaseObjectGetDerivedStorage();
  memset(v225, 0, 24);
  audioRenderer_getLowWaterDurationScaledForRate(&v225[0].start, *(float *)(v82 + 96));
  memset(&time2, 0, sizeof(time2));
  audioRenderer_getHighWaterDurationScaledForRate(&time2, *(float *)(v82 + 96));
  cf.CMTimeValue value = 0;
  uint64_t v83 = FigRenderPipelineGetFigBaseObject(v81);
  uint64_t v84 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v84) {
    uint64_t v85 = v84;
  }
  else {
    uint64_t v85 = 0;
  }
  CFTypeRef v89 = *(unsigned int (**)(uint64_t, __CFString *, void, CMTime *))(v85 + 48);
  if (v89 && !v89(v83, @"SourceSampleBufferConsumer", 0, &v205))
  {
    uint64_t v12 = v188;
    goto LABEL_167;
  }
  uint64_t v90 = FigRenderPipelineGetFigBaseObject(v81);
  uint64_t v91 = *(void *)(CMBaseObjectGetVTable() + 8);
  uint64_t v92 = v91 ? v91 : 0;
  uint64_t v93 = *(uint64_t (**)(uint64_t, __CFString *, void, CMTime *))(v92 + 48);
  uint64_t v12 = v188;
  if (!v93)
  {
LABEL_180:
    uint64_t v77 = 4294954514;
    goto LABEL_181;
  }
  uint64_t v77 = v93(v90, @"SourceSampleBufferQueue", 0, &cf);
  BOOL v94 = (const void *)cf.value;
  if (!v77)
  {
    long long v226 = *(_OWORD *)&time2.value;
    *(void *)&long long v227 = time2.epoch;
    CMTime type = v225[0].start;
    uint64_t v77 = FigSampleBufferConsumerCreateForBufferQueue(cf.value, &v226, (long long *)&type.value, &v205);
    BOOL v94 = (const void *)cf.value;
  }
  if (v94) {
    CFRelease(v94);
  }
  if (v77) {
    goto LABEL_181;
  }
LABEL_167:
  uint64_t v106 = (const void *)v205.value;
  uint64_t v107 = CMBaseObjectGetDerivedStorage();
  if (v106)
  {
    uint64_t v108 = v107;
    *(void *)(v107 + 48) = CFRetain(v106);
    uint64_t v109 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v109) {
      uint64_t v110 = v109;
    }
    else {
      uint64_t v110 = 0;
    }
    uint64_t v111 = *(uint64_t (**)(const void *, uint64_t (*)(), uint64_t, uint64_t))(v110 + 32);
    if (v111)
    {
      uint64_t v112 = v111(v106, audioRenderer_consumerReachedLowWaterCallback, a1, v108 + 40);
      if (v112)
      {
        uint64_t v77 = v112;
      }
      else
      {
        *(void *)(v15 + 56) = v206.value;
        uint64_t v113 = *(const void **)(v15 + 152);
        *(void *)(v15 + 152) = v184;
        CFRetain(v184);
        if (v113) {
          CFRelease(v113);
        }
        v206.CMTimeValue value = 0;
        if (*(void *)(CMBaseObjectGetDerivedStorage() + 56))
        {
          CMNotificationCenterGetDefaultLocalCenter();
          FigNotificationCenterAddWeakListener();
          CMNotificationCenterGetDefaultLocalCenter();
          FigNotificationCenterAddWeakListener();
          CMNotificationCenterGetDefaultLocalCenter();
          FigNotificationCenterAddWeakListener();
          CMNotificationCenterGetDefaultLocalCenter();
          FigNotificationCenterAddWeakListener();
          CMNotificationCenterGetDefaultLocalCenter();
          FigNotificationCenterAddWeakListener();
        }
        uint64_t v114 = CMBaseObjectGetDerivedStorage();
        *(void *)&long long v226 = 0;
        uint64_t v115 = *(void *)(v114 + 56);
        if (v115)
        {
          uint64_t v116 = FigRenderPipelineGetFigBaseObject(v115);
          uint64_t v117 = *(void *)(CMBaseObjectGetVTable() + 8);
          uint64_t v118 = v117 ? v117 : 0;
          CFTypeRef v175 = *(void (**)(uint64_t, __CFString *, uint64_t, long long *))(v118 + 48);
          if (v175)
          {
            v175(v116, @"PreferredClock", v186, &v226);
            if ((void)v226)
            {
              if (CMSyncMightDrift(*(CMClockOrTimebaseRef *)(v114 + 64), (CMClockOrTimebaseRef)v226))
              {
                if (dword_1E93517A8)
                {
                  LODWORD(type.value) = 0;
                  LOBYTE(cf.value) = 0;
                  uint64_t v176 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  unsigned int v177 = type.value;
                  if (os_log_type_enabled(v176, cf.value)) {
                    unsigned int v178 = v177;
                  }
                  else {
                    unsigned int v178 = v177 & 0xFFFFFFFE;
                  }
                  if (v178)
                  {
                    if (a1) {
                      CFTypeRef v179 = (const char *)(CMBaseObjectGetDerivedStorage() + 448);
                    }
                    else {
                      CFTypeRef v179 = "";
                    }
                    CMTimeValue v180 = *(void *)(v114 + 64);
                    LODWORD(time2.value) = 136316162;
                    *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"audioRenderer_updateAudioClockFromFARP";
                    LOWORD(time2.flags) = 2048;
                    *(void *)((char *)&time2.flags + 2) = a1;
                    HIWORD(time2.epoch) = 2082;
                    uint64_t v212 = v179;
                    __int16 v213 = 2112;
                    CMTimeValue v214 = v180;
                    __int16 v215 = 2112;
                    uint64_t v216 = v226;
                    _os_log_send_and_compose_impl();
                  }
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                  uint64_t v12 = v188;
                }
                audioRenderer_postNotification();
                uint64_t v181 = *(const void **)(v114 + 64);
                long long v182 = (const void *)v226;
                *(void *)(v114 + 64) = v226;
                if (v182) {
                  CFRetain(v182);
                }
                if (v181) {
                  CFRelease(v181);
                }
              }
              if ((void)v226) {
                CFRelease((CFTypeRef)v226);
              }
            }
          }
        }
        uint64_t v77 = 0;
      }
      goto LABEL_181;
    }
    goto LABEL_180;
  }
  uint64_t v77 = 4294950916;
LABEL_181:
  if (v44) {
    CFRelease(v44);
  }
LABEL_183:
  if (v206.value) {
    CFRelease((CFTypeRef)v206.value);
  }
  if (v205.value) {
    CFRelease((CFTypeRef)v205.value);
  }
  if (v204.value) {
    CFRelease((CFTypeRef)v204.value);
  }
  if (v77) {
    goto LABEL_199;
  }
  uint64_t v119 = v12[3];
  uint64_t v120 = FigRenderPipelineGetFigBaseObject(v12[7]);
  uint64_t v121 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v121) {
    uint64_t v122 = v121;
  }
  else {
    uint64_t v122 = 0;
  }
  uint64_t v123 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v122 + 56);
  if (!v123)
  {
    uint64_t v77 = 4294954514;
LABEL_199:
    MEMORY[0x19970E2B0](*v12);
    goto LABEL_200;
  }
  uint64_t v124 = v123(v120, @"Timebase", v119);
  if (v124)
  {
    uint64_t v77 = v124;
    goto LABEL_199;
  }
  valuePtr.CMTimeValue value = CMTimebaseGetRate((CMTimebaseRef)v12[3]);
  if (*(double *)&valuePtr.value == 0.0)
  {
    uint64_t v77 = 0;
    goto LABEL_199;
  }
  CFNumberRef v125 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberFloat64Type, &valuePtr);
  uint64_t v126 = FigRenderPipelineGetFigBaseObject(v12[7]);
  uint64_t v127 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v127) {
    uint64_t v128 = v127;
  }
  else {
    uint64_t v128 = 0;
  }
  uint64_t v142 = *(void (**)(uint64_t, __CFString *, CFNumberRef))(v128 + 56);
  if (v142) {
    v142(v126, @"PipelineRate", v125);
  }
  uint64_t v143 = v12[7];
  uint64_t v144 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v144) {
    uint64_t v145 = v144;
  }
  else {
    uint64_t v145 = 0;
  }
  uint64_t v146 = *(uint64_t (**)(uint64_t))(v145 + 48);
  if (v146) {
    uint64_t v77 = v146(v143);
  }
  else {
    uint64_t v77 = 4294954514;
  }
  MEMORY[0x19970E2B0](*v12);
  if (v125) {
    CFRelease(v125);
  }
LABEL_200:
  if (!v77)
  {
    if (!v5[7])
    {
LABEL_263:
      uint64_t v77 = 0;
      goto LABEL_264;
    }
LABEL_202:
    uint64_t v129 = CMBaseObjectGetDerivedStorage();
    CMSampleBufferRef sampleBufferOut = 0;
    if ((*(unsigned char *)(v129 + 232) & 1) == 0) {
      goto LABEL_209;
    }
    uint64_t v130 = v129;
    uint64_t v131 = (CMTime *)(v129 + 220);
    CMSampleBufferGetOutputPresentationTimeStamp(&start, a2);
    CMSampleBufferGetOutputDuration(&duration, a2);
    CMTimeRangeMake(v225, &start, &duration);
    CMTimeValue v132 = v225[0].start.value;
    long long v226 = *(_OWORD *)&v225[0].start.flags;
    long long v227 = *(_OWORD *)((char *)&v225[0].duration.value + 4);
    CMTimeScale timescale = v225[0].start.timescale;
    int epoch_high = HIDWORD(v225[0].duration.epoch);
    *(_OWORD *)&v225[0].start.CMTimeValue value = *(_OWORD *)&v131->value;
    v225[0].start.CMTimeEpoch epoch = v131->epoch;
    time2.CMTimeValue value = v132;
    *(void *)&time2.CMTimeFlags flags = v226;
    time2.CMTimeScale timescale = timescale;
    HIDWORD(time2.epoch) = DWORD2(v226);
    if (!CMTimeCompare(&v225[0].start, &time2))
    {
LABEL_209:
      CFRetain(a2);
      goto LABEL_247;
    }
    v225[0].start.CMTimeValue value = v132;
    *(_OWORD *)&v225[0].start.CMTimeFlags flags = v226;
    *(_OWORD *)((char *)&v225[0].duration.value + 4) = v227;
    v225[0].start.CMTimeScale timescale = timescale;
    HIDWORD(v225[0].duration.epoch) = epoch_high;
    CMTimeRangeGetEnd(&time1, v225);
    *(_OWORD *)&v225[0].start.CMTimeValue value = *(_OWORD *)&v131->value;
    v225[0].start.CMTimeEpoch epoch = v131->epoch;
    if (CMTimeCompare(&time1, &v225[0].start) <= 0) {
      goto LABEL_263;
    }
    v225[0].start.CMTimeValue value = v132;
    *(void *)&v225[0].start.CMTimeFlags flags = v226;
    v225[0].start.CMTimeScale timescale = timescale;
    HIDWORD(v225[0].start.epoch) = DWORD2(v226);
    CMTime time2 = *v131;
    if (CMTimeCompare(&v225[0].start, &time2) < 0)
    {
      memset(&v197, 0, sizeof(v197));
      *(_OWORD *)&v225[0].start.CMTimeValue value = *(_OWORD *)&v131->value;
      v225[0].start.CMTimeEpoch epoch = v131->epoch;
      time2.CMTimeValue value = v132;
      *(void *)&time2.CMTimeFlags flags = v226;
      time2.CMTimeScale timescale = timescale;
      HIDWORD(time2.epoch) = DWORD2(v226);
      CMTimeSubtract(&v197, &v225[0].start, &time2);
      CMTime v196 = v197;
      CMSampleBufferRef v210 = 0;
      CMItemCount timingArrayEntriesNeededOut = 0;
      memset(v225, 0, 24);
      memset(&time2, 0, sizeof(time2));
      memset(&type, 0, sizeof(type));
      memset(&cf, 0, sizeof(cf));
      memset(&v206, 0, sizeof(v206));
      memset(&v205, 0, sizeof(v205));
      CFStringRef v135 = (const __CFString *)*MEMORY[0x1E4F1F308];
      CFDictionaryRef v136 = (const __CFDictionary *)CMGetAttachment(a2, (CFStringRef)*MEMORY[0x1E4F1F308], 0);
      CFTypeRef v137 = (CMTime *)MEMORY[0x1E4F1FA48];
      if (v136) {
        CMTimeMakeFromDictionary(&v206, v136);
      }
      else {
        CMTime v206 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
      }
      CMSampleBufferGetOutputPresentationTimeStamp(&v225[0].start, a2);
      CMSampleBufferGetPresentationTimeStamp(&time2, a2);
      CMTime v204 = v225[0].start;
      CMTime valuePtr = v206;
      CMTimeSubtract(&type, &v204, &valuePtr);
      CMTime v204 = type;
      CMTime valuePtr = time2;
      CMTimeSubtract(&cf, &v204, &valuePtr);
      CMSampleBufferGetSampleTimingInfoArray(a2, 0, 0, &timingArrayEntriesNeededOut);
      if (!timingArrayEntriesNeededOut)
      {
        uint64_t v77 = FigSignalErrorAt();
        if (v77) {
          goto LABEL_264;
        }
        goto LABEL_246;
      }
      uint64_t v147 = (CMSampleTimingInfo *)malloc_type_calloc(timingArrayEntriesNeededOut, 0x48uLL, 0x1000040FF89C88EuLL);
      uint64_t SampleTimingInfoArray = CMSampleBufferGetSampleTimingInfoArray(a2, timingArrayEntriesNeededOut, v147, &timingArrayEntriesNeededOut);
      if (SampleTimingInfoArray)
      {
        uint64_t v77 = SampleTimingInfoArray;
        free(v147);
        goto LABEL_264;
      }
      CMTime v204 = cf;
      CMTime valuePtr = *v137;
      int32_t v149 = CMTimeCompare(&v204, &valuePtr);
      CMItemCount v150 = timingArrayEntriesNeededOut;
      if (v149 && timingArrayEntriesNeededOut >= 1)
      {
        CMItemCount v151 = 0;
        p_presentationTimeStamp = &v147->presentationTimeStamp;
        do
        {
          long long v153 = *(_OWORD *)&p_presentationTimeStamp->value;
          valuePtr.CMTimeEpoch epoch = p_presentationTimeStamp->epoch;
          *(_OWORD *)&valuePtr.CMTimeValue value = v153;
          CMTime rhs = cf;
          CMTimeAdd(&v204, &valuePtr, &rhs);
          long long v154 = *(_OWORD *)&v204.value;
          p_presentationTimeStamp->CMTimeEpoch epoch = v204.epoch;
          *(_OWORD *)&p_presentationTimeStamp->CMTimeValue value = v154;
          p_presentationTimeStamp += 3;
          ++v151;
          CMItemCount v150 = timingArrayEntriesNeededOut;
        }
        while (timingArrayEntriesNeededOut > v151);
      }
      uint64_t v155 = CMSampleBufferCreateCopyWithNewTiming((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, v150, v147, &v210);
      if (v155)
      {
        uint64_t v77 = v155;
        CMSampleBufferRef v157 = v210;
      }
      else
      {
        CMTime v204 = v196;
        CMTime valuePtr = v206;
        CMTimeAdd(&v205, &v204, &valuePtr);
        CMTime v204 = v205;
        CFDictionaryRef v156 = CMTimeCopyAsDictionary(&v204, 0);
        CMSampleBufferRef v157 = v210;
        if (v156)
        {
          CFDictionaryRef v158 = v156;
          CMSetAttachment(v210, v135, v156, 1u);
          CMSampleBufferRef sampleBufferOut = v210;
          CMSampleBufferRef v210 = 0;
          free(v147);
          CFRelease(v158);
          goto LABEL_246;
        }
        uint64_t v77 = 4294950914;
      }
      free(v147);
      if (!v157) {
        goto LABEL_264;
      }
      CMSampleBufferRef v183 = v157;
    }
    else
    {
      uint64_t v134 = CMSampleBufferCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, &sampleBufferOut);
      if (!v134)
      {
        if (*(unsigned char *)(v130 + 103))
        {
          CMSetAttachment(sampleBufferOut, (CFStringRef)*MEMORY[0x1E4F1F278], (CFTypeRef)*MEMORY[0x1E4F1CFD0], 1u);
        }
        else if (dword_1E93517A8)
        {
          LODWORD(type.value) = 0;
          LOBYTE(cf.value) = 0;
          uint64_t v138 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v139 = type.value;
          if (os_log_type_enabled(v138, cf.value)) {
            unsigned int v140 = v139;
          }
          else {
            unsigned int v140 = v139 & 0xFFFFFFFE;
          }
          if (v140)
          {
            if (a1) {
              uint64_t v141 = (const char *)(CMBaseObjectGetDerivedStorage() + 448);
            }
            else {
              uint64_t v141 = "";
            }
            uint64_t v189 = v141;
            *(_OWORD *)&v225[0].start.CMTimeValue value = *(_OWORD *)&v131->value;
            v225[0].start.CMTimeEpoch epoch = v131->epoch;
            Float64 Seconds = CMTimeGetSeconds(&v225[0].start);
            uint64_t v160 = *(void *)(v130 + 220);
            int v161 = *(_DWORD *)(v130 + 228);
            v225[0].start.CMTimeValue value = v132;
            *(void *)&v225[0].start.CMTimeFlags flags = v226;
            v225[0].start.CMTimeScale timescale = timescale;
            HIDWORD(v225[0].start.epoch) = DWORD2(v226);
            Float64 v162 = CMTimeGetSeconds(&v225[0].start);
            LODWORD(time2.value) = 136317186;
            *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"audioRenderer_copySBufUpdatedTimingForEnqueueing";
            LOWORD(time2.flags) = 2048;
            *(void *)((char *)&time2.flags + 2) = a1;
            HIWORD(time2.epoch) = 2082;
            uint64_t v212 = v189;
            __int16 v213 = 2048;
            CMTimeValue v214 = *(void *)&Seconds;
            __int16 v215 = 2048;
            uint64_t v216 = v160;
            __int16 v217 = 1024;
            int v218 = v161;
            __int16 v219 = 2048;
            Float64 v220 = v162;
            __int16 v221 = 2048;
            CMTimeValue v222 = v132;
            __int16 v223 = 1024;
            CMTimeScale v224 = timescale;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
LABEL_246:
        a2 = sampleBufferOut;
        if (sampleBufferOut)
        {
LABEL_247:
          FigEndpointStreamAudioEngineSbufTracerDebugPrint(a2);
          uint64_t v163 = v5[6];
          uint64_t v164 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v164) {
            uint64_t v165 = v164;
          }
          else {
            uint64_t v165 = 0;
          }
          uint64_t v166 = *(uint64_t (**)(uint64_t, opaqueCMSampleBuffer *))(v165 + 8);
          if (!v166)
          {
            uint64_t v77 = 4294954514;
            goto LABEL_267;
          }
          uint64_t v167 = v166(v163, a2);
          if (v167)
          {
            uint64_t v77 = v167;
            goto LABEL_267;
          }
          CMSampleBufferGetOutputPresentationTimeStamp(&v194, a2);
          if (v194.flags)
          {
            CMSampleBufferGetOutputDuration(&v193, a2);
            if (v193.flags)
            {
              CMSampleBufferGetOutputPresentationTimeStamp(&lhs, a2);
              CMSampleBufferGetOutputDuration(&v191, a2);
              CMTimeAdd(&v225[0].start, &lhs, &v191);
              *(_OWORD *)((char *)v5 + 220) = *(_OWORD *)&v225[0].start.value;
              *(void *)((char *)v5 + 236) = v225[0].start.epoch;
            }
          }
          CMTimebaseGetTime(&v195, (CMTimebaseRef)v5[3]);
          int v168 = *((_DWORD *)v5 + 96);
          if ((v168 & 1) != 0 && (v5[51] & 1) == 0)
          {
            v225[0].CMTime start = v195;
            CMTime time2 = *(CMTime *)((char *)v5 + 220);
            if (CMTimeCompare(&v225[0].start, &time2) < 0)
            {
              CMSampleBufferGetOutputPresentationTimeStamp(&v190, a2);
              CMTime time2 = v195;
              CMTimeMaximum(&v225[0].start, &v190, &time2);
              *(_OWORD *)((char *)v5 + 396) = *(_OWORD *)&v225[0].start.value;
              CMTimeEpoch epoch = v225[0].start.epoch;
              *(void *)((char *)v5 + 412) = v225[0].start.epoch;
              uint64_t v172 = (OpaqueCMTimebase *)v5[3];
              uint64_t v173 = v5[45];
              *(_OWORD *)&v225[0].start.CMTimeValue value = *(_OWORD *)((char *)v5 + 396);
              v225[0].start.CMTimeEpoch epoch = epoch;
              CMTimebaseSetTimerDispatchSourceNextFireTime(v172, v173, &v225[0].start, 0);
              goto LABEL_266;
            }
            int v168 = *((_DWORD *)v5 + 96);
          }
          if ((v168 & 1) == 0 && !*((unsigned char *)v5 + 368))
          {
            uint64_t v169 = (OpaqueCMTimebase *)v5[3];
            long long v170 = v5[45];
            *(_OWORD *)&v225[0].start.CMTimeValue value = *(_OWORD *)((char *)v5 + 220);
            v225[0].start.CMTimeEpoch epoch = *(void *)((char *)v5 + 236);
            CMTimebaseSetTimerDispatchSourceNextFireTime(v169, v170, &v225[0].start, 0);
            uint64_t v77 = 0;
            *((unsigned char *)v5 + 368) = 1;
LABEL_267:
            MEMORY[0x19970E2B0](*v5);
            CFRelease(a2);
            return v77;
          }
LABEL_266:
          uint64_t v77 = 0;
          goto LABEL_267;
        }
        goto LABEL_263;
      }
      uint64_t v77 = v134;
      CMSampleBufferRef v183 = sampleBufferOut;
      if (!sampleBufferOut) {
        goto LABEL_264;
      }
    }
    CFRelease(v183);
  }
LABEL_264:
  MEMORY[0x19970E2B0](*v5);
  return v77;
}

uint64_t audioRenderer_flush(uint64_t a1)
{
  return audioRenderer_flushWithType(a1, 0);
}

uint64_t audioRenderer_attachToSynchronizer(uint64_t a1, uint64_t a2, OpaqueCMTimebase *a3)
{
  timebaseOut[25] = *(CMTimebaseRef *)MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  timebaseOut[0] = 0;
  uint64_t v7 = &dword_1E9351000;
  if (!a2)
  {
    if (a3) {
      return 4294950915;
    }
    HostTimeClocuint64_t k = CMClockGetHostTimeClock();
    uint64_t v12 = CMTimebaseCreateWithSourceClock(0, HostTimeClock, timebaseOut);
    if (v12)
    {
      uint64_t v19 = v12;
      uint64_t v9 = 0;
      goto LABEL_40;
    }
    if (dword_1E93517A8)
    {
      os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      char v20 = 1;
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      uint64_t v9 = 0;
      int v21 = 0;
      goto LABEL_20;
    }
    uint64_t v9 = 0;
    goto LABEL_13;
  }
  uint64_t v8 = FigCFWeakReferenceHolderCreateWithReferencedObject();
  if (!v8) {
    return 4294950914;
  }
  uint64_t v9 = (const void *)v8;
  if (a3)
  {
    timebaseOut[0] = a3;
    CFRetain(a3);
    if (dword_1E93517A8)
    {
      float v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
      char v20 = 1;
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      int v21 = 0;
      uint64_t v7 = &dword_1E9351000;
      goto LABEL_20;
    }
LABEL_13:
    int v21 = 0;
    char v20 = 1;
    goto LABEL_20;
  }
  uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v14) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0;
  }
  uint64_t v16 = *(uint64_t (**)(uint64_t, CMTimebaseRef *))(v15 + 32);
  if (v16)
  {
    uint64_t v17 = v16(a2, timebaseOut);
    if (v17)
    {
      uint64_t v19 = v17;
      goto LABEL_40;
    }
    if (dword_1E93517A8)
    {
      uint64_t v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
      int v21 = 1;
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      char v20 = 0;
    }
    else
    {
      char v20 = 0;
      int v21 = 1;
    }
LABEL_20:
    MEMORY[0x19970E290](*DerivedStorage);
    if (*((unsigned char *)DerivedStorage + 433))
    {
      uint64_t v19 = 4294954511;
      goto LABEL_39;
    }
    *((unsigned char *)DerivedStorage + 32) = v20;
    unsigned int v22 = (const void **)MEMORY[0x1E4F1CFC8];
    if (!v21) {
      unsigned int v22 = (const void **)MEMORY[0x1E4F1CFD0];
    }
    audioRenderer_setPropertyOnAudioRenderPipeline(a1, @"IsTimebaseStarter", *v22, 1);
    if (v7[490])
    {
      unsigned int v23 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v24 = audioRenderer_setMasterTimebase(a1, timebaseOut[0]);
    if (!v24)
    {
      uint64_t v25 = (const void *)DerivedStorage[11];
      DerivedStorage[11] = v9;
      if (v9) {
        CFRetain(v9);
      }
      if (v25) {
        CFRelease(v25);
      }
      if (a2)
      {
        uint64_t v19 = 0;
LABEL_39:
        MEMORY[0x19970E2B0](*DerivedStorage);
        goto LABEL_40;
      }
      uint64_t v26 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v26) {
        uint64_t v27 = v26;
      }
      else {
        uint64_t v27 = 0;
      }
      uint64_t v28 = *(uint64_t (**)(uint64_t))(v27 + 24);
      if (!v28)
      {
        uint64_t v19 = 4294954514;
        goto LABEL_39;
      }
      uint64_t v24 = v28(a1);
    }
    uint64_t v19 = v24;
    goto LABEL_39;
  }
  uint64_t v19 = 4294954514;
LABEL_40:
  if (timebaseOut[0]) {
    CFRelease(timebaseOut[0]);
  }
  if (v9) {
    CFRelease(v9);
  }
  return v19;
}

uint64_t audioRenderer_copyClock(uint64_t a1, CFTypeRef *a2)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (!a2) {
    return 4294950916;
  }
  uint64_t v4 = DerivedStorage;
  MEMORY[0x19970E290](*DerivedStorage);
  if (*((unsigned char *)v4 + 433))
  {
    uint64_t v5 = 4294954511;
  }
  else
  {
    uint64_t v5 = 0;
    *a2 = CFRetain((CFTypeRef)v4[8]);
  }
  MEMORY[0x19970E2B0](*v4);
  return v5;
}

uint64_t audioRenderer_setRateAndTime(uint64_t a1, CMTime *a2, float a3)
{
  CMTime v4 = *a2;
  return audioRenderer_setRateAndAnchorTime(a1, &v4, MEMORY[0x1E4F1F9F8], a3);
}

uint64_t audioRenderer_flushFromMediaTime(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (char *)malloc_type_calloc(1uLL, 0x30uLL, 0x10A00407482C56DuLL);
  if (a1) {
    CFTypeRef v9 = CFRetain(a1);
  }
  else {
    CFTypeRef v9 = 0;
  }
  *(void *)uint64_t v8 = v9;
  uint64_t v10 = *(void *)(a2 + 16);
  *(_OWORD *)(v8 + 8) = *(_OWORD *)a2;
  *((void *)v8 + 3) = v10;
  *((void *)v8 + 4) = a3;
  *((void *)v8 + 5) = a4;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_async_f(global_queue, v8, (dispatch_function_t)audioRenderer_flushFromMediaTimeDispatchAsync);
  return 0;
}

uint64_t audioRenderer_setRateAndAnchorTime(uint64_t a1, CMTime *a2, CMTime *a3, float a4)
{
  uint64_t v118 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  CMTime v91 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  CMTime v90 = v91;
  CMTime v89 = v91;
  CMTime v88 = v91;
  MEMORY[0x19970E290](*DerivedStorage);
  if (*((unsigned char *)DerivedStorage + 433))
  {
    CFDictionaryRef v27 = 0;
    uint64_t v20 = 0;
    goto LABEL_88;
  }
  if (dword_1E93517A8)
  {
    LODWORD(v101) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a4 != 0.0 && !DerivedStorage[9] && *((unsigned char *)DerivedStorage + 101))
  {
    if (dword_1E93517A8)
    {
      LODWORD(v101) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      uint64_t v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CFDictionaryRef v27 = 0;
    uint64_t v20 = 4294950909;
    goto LABEL_88;
  }
  *((_WORD *)DerivedStorage + 148) = 0;
  CMTimebaseGetTime(&v91, (CMTimebaseRef)DerivedStorage[3]);
  if (!DerivedStorage[7])
  {
    CMTime time = *a2;
    CMTime time2 = *a3;
    uint64_t v19 = audioRenderer_setRateAndTimeWithoutFARP(a4, a1, (uint64_t)&time, (uint64_t)&time2);
    if (!v19) {
      goto LABEL_37;
    }
    uint64_t v20 = v19;
LABEL_141:
    CFDictionaryRef v27 = 0;
    goto LABEL_88;
  }
  CMTimeValue v101 = a2->value;
  CMTimeFlags flags = a2->flags;
  CMTimeScale timescale = a2->timescale;
  CMTimeEpoch epoch = a2->epoch;
  *(void *)CMTime type = a3->value;
  CMTimeFlags v13 = a3->flags;
  CMTimeScale v100 = a3->timescale;
  CMTimeEpoch v14 = a3->epoch;
  uint64_t v15 = CMBaseObjectGetDerivedStorage();
  double valuePtr = a4;
  CFTypeRef value = 0;
  CFTypeRef v97 = 0;
  CFTypeRef cf = 0;
  CFTypeRef target = 0;
  uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(*(void *)(v15 + 56));
  uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v17) {
    uint64_t v18 = v17;
  }
  else {
    uint64_t v18 = 0;
  }
  int v21 = *(uint64_t (**)(uint64_t, __CFString *, void, CFTypeRef *))(v18 + 48);
  if (!v21)
  {
    CFDictionaryRef v23 = 0;
    goto LABEL_20;
  }
  CMTimeFlags v87 = v13;
  uint64_t v22 = v21(FigBaseObject, @"SourceSampleBufferQueue", 0, &v97);
  if (v22)
  {
    uint64_t v20 = v22;
    CFDictionaryRef v23 = 0;
    goto LABEL_144;
  }
  if (a4 == 0.0)
  {
    CFDictionaryRef v23 = 0;
    int v86 = 0;
  }
  else
  {
    CFTypeID v37 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
    if (!*(unsigned char *)(v15 + 296) && CMTimebaseGetRate(*(CMTimebaseRef *)(v15 + 24)) == 0.0)
    {
      int v86 = 0;
      CFDictionaryRef v23 = 0;
    }
    else
    {
      int v38 = *(_DWORD *)(v15 + 216);
      *(_DWORD *)(v15 + 216) = v38 + 1;
      LODWORD(time.value) = v38;
      CFTypeRef value = CFNumberCreate(0, kCFNumberIntType, &time);
      if (!value
        || (CFDictionaryRef v39 = CFDictionaryCreate(*v37, MEMORY[0x1E4F1F328], &value, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540])) == 0)
      {
        CFDictionaryRef v23 = 0;
        CMClockOrTimebaseRef v24 = 0;
        CFNumberRef v25 = 0;
LABEL_146:
        uint64_t v20 = 4294950914;
        goto LABEL_22;
      }
      CFDictionaryRef v23 = v39;
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
      int v86 = 1;
    }
    if (*(unsigned char *)(v15 + 100))
    {
      uint64_t Ready = CMSampleBufferCreateReady(*v37, 0, 0, 0, 0, 0, 0, 0, (CMSampleBufferRef *)&cf);
      if (Ready
        || (CMSetAttachment(cf, (CFStringRef)*MEMORY[0x1E4F21A28], (CFTypeRef)*MEMORY[0x1E4F1CFD0], 1u),
            uint64_t Ready = CMBufferQueueEnqueue((CMBufferQueueRef)v97, cf),
            Ready))
      {
LABEL_143:
        uint64_t v20 = Ready;
LABEL_144:
        CMClockOrTimebaseRef v24 = 0;
        CFNumberRef v25 = 0;
        goto LABEL_22;
      }
    }
  }
  CMTimeFlags v41 = v87;
  if (!*(unsigned char *)(v15 + 32))
  {
    CFNumberRef v25 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberFloat64Type, &valuePtr);
    if (!v25)
    {
LABEL_145:
      CMClockOrTimebaseRef v24 = 0;
      goto LABEL_146;
    }
    uint64_t v48 = FigRenderPipelineGetFigBaseObject(*(void *)(v15 + 56));
    uint64_t v49 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v49) {
      uint64_t v50 = v49;
    }
    else {
      uint64_t v50 = 0;
    }
    unsigned int v52 = *(uint64_t (**)(uint64_t, __CFString *, CFNumberRef))(v50 + 56);
    if (!v52)
    {
      CMClockOrTimebaseRef v24 = 0;
      goto LABEL_21;
    }
    uint64_t v53 = v52(v48, @"PipelineRate", v25);
    CMClockOrTimebaseRef v24 = 0;
    if (v53) {
      goto LABEL_148;
    }
LABEL_109:
    if (!v86)
    {
      uint64_t v20 = 0;
      goto LABEL_22;
    }
    uint64_t v20 = CMSampleBufferCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 1u, 0, 0, 0, 0, 0, 0, 0, 0, (CMSampleBufferRef *)&target);
    if (target)
    {
      CMSetAttachment(target, (CFStringRef)*MEMORY[0x1E4F1F2C0], value, 1u);
      CMBufferQueueEnqueue((CMBufferQueueRef)v97, target);
      goto LABEL_22;
    }
    goto LABEL_146;
  }
  CMTimeEpoch v84 = v14;
  CMTimeFlags v85 = flags;
  if ((v87 & 1) == 0
    || a4 == 0.0
    || (flags & 1) == 0
    || *(unsigned char *)(v15 + 296)
    || CMTimebaseGetRate(*(CMTimebaseRef *)(v15 + 24)) != 0.0)
  {
    if (dword_1E93517A8)
    {
      unsigned int v93 = 0;
      os_log_type_t v92 = OS_LOG_TYPE_DEFAULT;
      uint64_t v42 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v43 = v93;
      if (os_log_type_enabled(v42, v92)) {
        unsigned int v44 = v43;
      }
      else {
        unsigned int v44 = v43 & 0xFFFFFFFE;
      }
      if (v44)
      {
        if (a1) {
          CFTypeID v45 = (const char *)(CMBaseObjectGetDerivedStorage() + 448);
        }
        else {
          CFTypeID v45 = "";
        }
        time.CFTypeRef value = v101;
        time.CMTimeScale timescale = timescale;
        time.CMTimeFlags flags = flags;
        time.CMTimeEpoch epoch = epoch;
        Float64 Seconds = CMTimeGetSeconds(&time);
        time.CFTypeRef value = *(void *)type;
        time.CMTimeScale timescale = v100;
        time.CMTimeFlags flags = v87;
        time.CMTimeEpoch epoch = v14;
        Float64 v55 = CMTimeGetSeconds(&time);
        int v56 = *(unsigned __int8 *)(v15 + 296);
        Float64 Rate = CMTimebaseGetRate(*(CMTimebaseRef *)(v15 + 24));
        LODWORD(time2.value) = 136316930;
        *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"audioRenderer_setRateAndTimeWithFARP";
        LOWORD(time2.flags) = 2048;
        *(void *)((char *)&time2.flags + 2) = a1;
        HIWORD(time2.epoch) = 2082;
        unsigned int v104 = v45;
        __int16 v105 = 2048;
        double v106 = a4;
        __int16 v107 = 2048;
        Float64 v108 = Seconds;
        __int16 v109 = 2048;
        Float64 v110 = v55;
        __int16 v111 = 1024;
        int v112 = v56;
        __int16 v113 = 2048;
        Float64 v114 = Rate;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      CMTimeFlags v41 = v87;
    }
    uint64_t v58 = *(void *)(v15 + 56);
    uint64_t v59 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v59) {
      uint64_t v60 = v59;
    }
    else {
      uint64_t v60 = 0;
    }
    unsigned int v61 = *(uint64_t (**)(uint64_t, CMTime *, CMTime *, float, float))(v60 + 8);
    if (v61)
    {
      time.CFTypeRef value = v101;
      time.CMTimeScale timescale = timescale;
      time.CMTimeFlags flags = v85;
      time.CMTimeEpoch epoch = epoch;
      time2.CFTypeRef value = *(void *)type;
      time2.CMTimeScale timescale = v100;
      time2.CMTimeFlags flags = v41;
      time2.CMTimeEpoch epoch = v84;
      uint64_t Ready = v61(v58, &time, &time2, a4, a4);
      if (!Ready)
      {
        if (a4 == 0.0)
        {
          CMClockOrTimebaseRef v24 = 0;
          CFNumberRef v25 = 0;
        }
        else
        {
          CMTimeEpoch v62 = epoch;
          CMClockOrTimebaseRef v24 = 0;
          CFNumberRef v25 = 0;
          *(unsigned char *)(v15 + 296) = 1;
          *(void *)(v15 + 304) = v101;
          *(_DWORD *)(v15 + 312) = timescale;
          *(float *)(v15 + 300) = a4;
          *(_DWORD *)(v15 + 316) = v85;
          CMTimeValue v63 = *(void *)type;
          *(void *)(v15 + 320) = v62;
          *(void *)(v15 + 328) = v63;
          *(_DWORD *)(v15 + 336) = v100;
          *(_DWORD *)(v15 + 340) = v87;
          *(void *)(v15 + 344) = v84;
        }
        goto LABEL_109;
      }
      goto LABEL_143;
    }
LABEL_20:
    CMClockOrTimebaseRef v24 = 0;
    CFNumberRef v25 = 0;
    goto LABEL_21;
  }
  if (dword_1E93517A8)
  {
    unsigned int v93 = 0;
    os_log_type_t v92 = OS_LOG_TYPE_DEFAULT;
    unsigned int v64 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v65 = v93;
    if (os_log_type_enabled(v64, v92)) {
      unsigned int v66 = v65;
    }
    else {
      unsigned int v66 = v65 & 0xFFFFFFFE;
    }
    if (v66)
    {
      if (a1) {
        uint64_t v67 = (const char *)(CMBaseObjectGetDerivedStorage() + 448);
      }
      else {
        uint64_t v67 = "";
      }
      time.CFTypeRef value = v101;
      time.CMTimeScale timescale = timescale;
      time.CMTimeFlags flags = flags;
      time.CMTimeEpoch epoch = epoch;
      Float64 v68 = CMTimeGetSeconds(&time);
      time.CFTypeRef value = *(void *)type;
      time.CMTimeScale timescale = v100;
      time.CMTimeFlags flags = v87;
      time.CMTimeEpoch epoch = v14;
      Float64 v69 = CMTimeGetSeconds(&time);
      int v70 = *(unsigned __int8 *)(v15 + 296);
      Float64 v71 = CMTimebaseGetRate(*(CMTimebaseRef *)(v15 + 24));
      uint64_t v72 = *(void *)(v15 + 24);
      LODWORD(time2.value) = 136317186;
      *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"audioRenderer_setRateAndTimeWithFARP";
      LOWORD(time2.flags) = 2048;
      *(void *)((char *)&time2.flags + 2) = a1;
      HIWORD(time2.epoch) = 2082;
      unsigned int v104 = v67;
      __int16 v105 = 2048;
      double v106 = a4;
      __int16 v107 = 2048;
      Float64 v108 = v68;
      __int16 v109 = 2048;
      Float64 v110 = v69;
      __int16 v111 = 1024;
      int v112 = v70;
      __int16 v113 = 2048;
      Float64 v114 = v71;
      __int16 v115 = 2048;
      uint64_t v116 = v72;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CMTimeEpoch v73 = epoch;
  CFNumberRef v25 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberFloat64Type, &valuePtr);
  if (!v25) {
    goto LABEL_145;
  }
  CMClockOrTimebaseRef v24 = CMTimebaseCopySource(*(CMTimebaseRef *)(v15 + 24));
  if (v24)
  {
    uint64_t v74 = *(OpaqueCMTimebase **)(v15 + 24);
    HostTimeClocuint64_t k = CMClockGetHostTimeClock();
    time2.CFTypeRef value = *(void *)type;
    time2.CMTimeScale timescale = v100;
    time2.CMTimeFlags flags = v87;
    time2.CMTimeEpoch epoch = v84;
    CMSyncConvertTime(&time, &time2, HostTimeClock, v24);
    time2.CFTypeRef value = v101;
    time2.CMTimeScale timescale = timescale;
    time2.CMTimeFlags flags = v85;
    time2.CMTimeEpoch epoch = v73;
    uint64_t v53 = CMTimebaseSetRateAndAnchorTime(v74, a4, &time2, &time);
    if (!v53)
    {
      uint64_t v76 = FigRenderPipelineGetFigBaseObject(*(void *)(v15 + 56));
      uint64_t v77 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v77) {
        uint64_t v78 = v77;
      }
      else {
        uint64_t v78 = 0;
      }
      uint64_t v79 = *(uint64_t (**)(uint64_t, __CFString *, CFNumberRef))(v78 + 56);
      if (!v79) {
        goto LABEL_21;
      }
      uint64_t v53 = v79(v76, @"PipelineRate", v25);
      if (!v53)
      {
        uint64_t v80 = *(void *)(v15 + 56);
        uint64_t v81 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v81) {
          uint64_t v82 = v81;
        }
        else {
          uint64_t v82 = 0;
        }
        uint64_t v83 = *(uint64_t (**)(uint64_t))(v82 + 48);
        if (v83)
        {
          uint64_t v53 = v83(v80);
          if (v53) {
            goto LABEL_148;
          }
          goto LABEL_109;
        }
LABEL_21:
        uint64_t v20 = 4294954514;
        goto LABEL_22;
      }
    }
  }
  else
  {
    uint64_t v53 = FigSignalErrorAt();
  }
LABEL_148:
  uint64_t v20 = v53;
LABEL_22:
  if (cf) {
    CFRelease(cf);
  }
  if (v25) {
    CFRelease(v25);
  }
  if (v97) {
    CFRelease(v97);
  }
  if (v24) {
    CFRelease(v24);
  }
  if (target) {
    CFRelease(target);
  }
  if (v23) {
    CFRelease(v23);
  }
  if (value) {
    CFRelease(value);
  }
  if (v20) {
    goto LABEL_141;
  }
LABEL_37:
  if (a2->flags) {
    CMTime v90 = *a2;
  }
  else {
    CMTimebaseGetTime(&v90, (CMTimebaseRef)DerivedStorage[3]);
  }
  if (a4 == 0.0)
  {
    CMTime time = v91;
    __n128 v26 = audioRenderer_endUnderrun(a1, &time);
  }
  else
  {
    CMTime time = v90;
    CMTime time2 = v91;
    if (CMTimeCompare(&time, &time2) < 0)
    {
      CMTime time = v91;
      audioRenderer_endUnderrun(a1, &time);
    }
    if ((DerivedStorage[29] & 1) == 0
      || (CMTime time = *(CMTime *)((char *)DerivedStorage + 220), time2 = v90, CMTimeCompare(&time, &time2) <= 0))
    {
      CMTime time = v90;
      __n128 v26 = audioRenderer_beginUnderrun(a1, (__n128 *)&time);
    }
  }
  if (!DerivedStorage[6])
  {
    CFDictionaryRef v27 = 0;
    CFDictionaryRef v31 = 0;
LABEL_80:
    uint64_t v20 = 0;
    *((float *)DerivedStorage + 24) = a4;
    goto LABEL_82;
  }
  audioRenderer_getLowWaterDurationScaledForRate(&v89, a4);
  CMTime time = v89;
  CFDictionaryRef v27 = CMTimeCopyAsDictionary(&time, 0);
  uint64_t v28 = DerivedStorage[6];
  uint64_t v29 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v29) {
    uint64_t v30 = v29;
  }
  else {
    uint64_t v30 = 0;
  }
  unsigned int v32 = *(uint64_t (**)(uint64_t, __CFString *, CFDictionaryRef))(v30 + 56);
  if (!v32)
  {
    uint64_t v20 = 4294954514;
LABEL_88:
    MEMORY[0x19970E2B0](*DerivedStorage);
    goto LABEL_89;
  }
  uint64_t v33 = v32(v28, @"LowWaterDuration", v27);
  if (v33)
  {
    uint64_t v20 = v33;
    goto LABEL_88;
  }
  audioRenderer_getHighWaterDurationScaledForRate(&v88, a4);
  CMTime time = v88;
  CFDictionaryRef v31 = CMTimeCopyAsDictionary(&time, 0);
  uint64_t v34 = DerivedStorage[6];
  uint64_t v35 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v35) {
    uint64_t v36 = v35;
  }
  else {
    uint64_t v36 = 0;
  }
  CFRange v46 = *(uint64_t (**)(uint64_t, __CFString *, CFDictionaryRef))(v36 + 56);
  if (v46)
  {
    uint64_t v47 = v46(v34, @"HighWaterDuration", v31);
    if (!v47) {
      goto LABEL_80;
    }
    uint64_t v20 = v47;
  }
  else
  {
    uint64_t v20 = 4294954514;
  }
LABEL_82:
  MEMORY[0x19970E2B0](*DerivedStorage, v26);
  if (v31) {
    CFRelease(v31);
  }
LABEL_89:
  if (v27) {
    CFRelease(v27);
  }
  return v20;
}

uint64_t audioRenderer_shouldEnableSpatialization(uint64_t a1, uint64_t a2)
{
  uint64_t result = FPSupport_GetAudioFormatDescriptionSpatializationEligibility(a2, 0);
  if (result)
  {
    if (result == 2)
    {
      uint64_t v4 = a1;
      unsigned int v5 = 0;
    }
    else
    {
      if (result != 1) {
        return 1;
      }
      uint64_t v4 = a1;
      unsigned int v5 = 1;
    }
    uint64_t result = audioRenderer_isSpatializationAllowed(v4, v5);
    if (!result) {
      return result;
    }
    return 1;
  }
  return result;
}

uint64_t audioRenderer_isSpatializationAllowed(uint64_t a1, unsigned int a2)
{
  CMBaseObjectGetDerivedStorage();
  int v3 = FigCFEqual();
  CFDictionaryRef theDict = 0;
  uint64_t v4 = *(void *)(CMBaseObjectGetDerivedStorage() + 160);
  if (v4)
  {
    int v5 = v3 ? 1936684398 : 1836019574;
    if (!FPSupport_CreateAudioSessionSpatializationCapabilities(v4, v5, (CFTypeRef *)&theDict))
    {
      CFDictionaryRef v6 = theDict;
      if (theDict)
      {
        CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(theDict, @"SpatialCapabilitiesKey_spatialAudioSources");
        if (Value)
        {
          CFArrayRef v8 = Value;
          FigCFDictionaryGetBooleanIfPresent();
          if (CFArrayGetCount(v8) >= 1)
          {
            CFIndex v9 = 0;
            do
            {
              FigCFArrayGetInt32AtIndex();
              ++v9;
            }
            while (v9 < CFArrayGetCount(v8));
          }
          if (a2 <= 1) {
            FigCFEqual();
          }
        }
        CFRelease(v6);
      }
    }
  }
  return 0;
}

uint64_t audioRenderer_applyCachedPropertiesToFARPApplierFunction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*MEMORY[0x1E4F1D260] == a2) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = a2;
  }
  uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(a3);
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v9 = *(void *)(VTable + 8);
  uint64_t result = VTable + 8;
  uint64_t v8 = v9;
  if (v9) {
    uint64_t v10 = v8;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 56);
  if (v11)
  {
    return v11(FigBaseObject, a1, v4);
  }
  return result;
}

CMTime *audioRenderer_getLowWaterDurationScaledForRate@<X0>(CMTime *a1@<X8>, float a2@<S0>)
{
  uint64_t result = (CMTime *)CMBaseObjectGetDerivedStorage();
  uint64_t v5 = MEMORY[0x1E4F1F9F8];
  *(_OWORD *)&a1->CFTypeRef value = *MEMORY[0x1E4F1F9F8];
  a1->CMTimeEpoch epoch = *(void *)(v5 + 16);
  if (a2 <= 1.0)
  {
    long long v6 = *(_OWORD *)((char *)&result[11].value + 4);
    a1->CMTimeEpoch epoch = *(CMTimeEpoch *)((char *)&result[11].epoch + 4);
    *(_OWORD *)&a1->CFTypeRef value = v6;
  }
  else
  {
    CMTime v7 = *(CMTime *)((char *)result + 268);
    return CMTimeMultiplyByFloat64(a1, &v7, a2);
  }
  return result;
}

CMTime *audioRenderer_getHighWaterDurationScaledForRate@<X0>(CMTime *a1@<X8>, float a2@<S0>)
{
  uint64_t result = (CMTime *)CMBaseObjectGetDerivedStorage();
  uint64_t v5 = MEMORY[0x1E4F1F9F8];
  *(_OWORD *)&a1->CFTypeRef value = *MEMORY[0x1E4F1F9F8];
  a1->CMTimeEpoch epoch = *(void *)(v5 + 16);
  if (a2 <= 1.0)
  {
    long long v6 = *(_OWORD *)((char *)&result[10].value + 4);
    a1->CMTimeEpoch epoch = *(CMTimeEpoch *)((char *)&result[10].epoch + 4);
    *(_OWORD *)&a1->CFTypeRef value = v6;
  }
  else
  {
    CMTime v7 = *(CMTime *)((char *)result + 244);
    return CMTimeMultiplyByFloat64(a1, &v7, a2);
  }
  return result;
}

uint64_t audioRenderer_consumerReachedLowWaterCallback()
{
  return audioRenderer_postNotification();
}

uint64_t audioRenderer_setMasterTimebase(uint64_t a1, OpaqueCMTimebase *a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  CMTime v24 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  if (dword_1E93517A8)
  {
    int v23 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!a2) {
    return 4294950916;
  }
  MEMORY[0x19970E290](*DerivedStorage);
  if (*((unsigned char *)DerivedStorage + 433))
  {
    uint64_t v18 = 0;
    goto LABEL_23;
  }
  uint64_t v6 = DerivedStorage[7];
  if (!v6) {
    goto LABEL_11;
  }
  uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(v6);
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t, __CFString *, OpaqueCMTimebase *))(v9 + 56);
  if (!v10)
  {
    uint64_t v18 = 4294954514;
    goto LABEL_23;
  }
  uint64_t v11 = v10(FigBaseObject, @"Timebase", a2);
  if (!v11)
  {
LABEL_11:
    float Rate = CMTimebaseGetRate(a2);
    *((float *)DerivedStorage + 24) = Rate;
    CMTimeFlags v13 = (OpaqueCMTimebase *)DerivedStorage[3];
    if (v13 != a2)
    {
      if (!v13 || (CMTimebaseGetTime(&time1, v13), CMTimebaseGetTime(&time2, a2), CMTimeCompare(&time1, &time2))) {
        CMTimebaseGetTime(&v24, a2);
      }
      audioRenderer_removeNotificationListenerFromTimebase(a1, (OpaqueCMTimebase *)DerivedStorage[3]);
      CMTimeEpoch v14 = (const void *)DerivedStorage[3];
      DerivedStorage[3] = a2;
      CFRetain(a2);
      if (v14) {
        CFRelease(v14);
      }
      uint64_t v15 = (OpaqueCMTimebase *)DerivedStorage[3];
      uint64_t v16 = CMBaseObjectGetDerivedStorage();
      if (v15)
      {
        uint64_t v17 = v16;
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterAddWeakListener();
        CMTimebaseAddTimerDispatchSource(v15, *(dispatch_source_t *)(v17 + 360));
      }
      *((unsigned char *)DerivedStorage + 368) = 0;
      float Rate = *((float *)DerivedStorage + 24);
    }
    CMTime v25 = v24;
    uint64_t v11 = audioRenderer_setRateAndAnchorTime(a1, &v25, MEMORY[0x1E4F1F9F8], Rate);
  }
  uint64_t v18 = v11;
LABEL_23:
  MEMORY[0x19970E2B0](*DerivedStorage);
  return v18;
}

void audioRenderer_flushFromMediaTimeDispatchAsync(uint64_t a1)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 40);
  CFTypeRef v3 = *(CFTypeRef *)a1;
  CMTimeValue v39 = *(void *)(a1 + 8);
  CMTimeFlags v4 = *(_DWORD *)(a1 + 20);
  CMTimeScale v40 = *(_DWORD *)(a1 + 16);
  CMTimeEpoch v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v33 = v3;
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*DerivedStorage);
  if (*((unsigned char *)DerivedStorage + 433))
  {
    int v24 = -12785;
    goto LABEL_44;
  }
  if (dword_1E93517A8)
  {
    LODWORD(lhs.value) = 0;
    LOBYTE(type.value) = 0;
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if ((v4 & 1) == 0 || (v4 & 8) != 0 || (v4 & 0x10) != 0)
  {
    int v26 = FigSignalErrorAt();
LABEL_51:
    int v24 = v26;
    goto LABEL_44;
  }
  if ((DerivedStorage[29] & 1) == 0
    || (uint64_t v9 = (void *)((char *)DerivedStorage + 220),
        long long time = *(_OWORD *)((char *)DerivedStorage + 220),
        *(void *)&long long time_16 = *(void *)((char *)DerivedStorage + 236),
        time2.CFTypeRef value = v39,
        time2.CMTimeScale timescale = v40,
        time2.CMTimeFlags flags = v4,
        time2.CMTimeEpoch epoch = v5,
        CMTimeCompare((CMTime *)&time, &time2) < 1))
  {
LABEL_43:
    int v24 = 0;
    goto LABEL_44;
  }
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  if (*(void *)(v11 + 88))
  {
    uint64_t v12 = DerivedStorage[7];
    uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v13) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    CMTime v25 = *(uint64_t (**)(uint64_t, long long *))(v14 + 88);
    if (!v25)
    {
      int v24 = -12782;
      goto LABEL_44;
    }
    *(void *)&long long time = v39;
    *((void *)&time + 1) = __PAIR64__(v4, v40);
    *(void *)&long long time_16 = v5;
    int v26 = v25(v12, &time);
    if (!v26)
    {
      CMTimeValue *v9 = v39;
      *((_DWORD *)DerivedStorage + 57) = v40;
      *((_DWORD *)DerivedStorage + 58) = v4;
      *(void *)((char *)DerivedStorage + 236) = v5;
      goto LABEL_41;
    }
    goto LABEL_51;
  }
  uint64_t v15 = CMBaseObjectGetDerivedStorage();
  CMBufferQueueRef v37 = 0;
  CFTypeRef cf = 0;
  CMBufferQueueRef queueOut = 0;
  uint64_t v45 = 0;
  long long time_16 = 0u;
  long long v44 = 0u;
  long long time = 0u;
  uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(*(void *)(v15 + 56));
  uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v17) {
    uint64_t v18 = v17;
  }
  else {
    uint64_t v18 = 0;
  }
  uint64_t v19 = *(uint64_t (**)(uint64_t, __CFString *, void, CFTypeRef *))(v18 + 48);
  if (!v19)
  {
    int v24 = -12782;
    goto LABEL_34;
  }
  OSStatus v20 = v19(FigBaseObject, @"SourceSampleBufferQueue", 0, &cf);
  if (!v20)
  {
    CFAllocatorRef v21 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CallbacksForUnsortedSampleBuffers = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
    OSStatus v20 = CMBufferQueueCreate(v21, 0, CallbacksForUnsortedSampleBuffers, &queueOut);
    if (!v20)
    {
      int v23 = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
      OSStatus v20 = CMBufferQueueCreate(v21, 0, v23, &v37);
      if (!v20)
      {
        *(void *)&long long time = v33;
        *((void *)&time + 1) = queueOut;
        *(void *)&long long time_16 = v37;
        *((void *)&time_16 + 1) = v39;
        *(void *)&long long v44 = __PAIR64__(v4, v40);
        *((void *)&v44 + 1) = v5;
        LODWORD(v45) = 0;
        MEMORY[0x199709540](cf, audioRenderer_flushFromMediaTimeOnRenderPipelineInputQueueResetCallback, &time);
        if (!v45)
        {
          if (CMBufferQueueIsEmpty(*((CMBufferQueueRef *)&time + 1)))
          {
            LODWORD(v45) = -16385;
          }
          else if (!v45)
          {
            Head = (opaqueCMSampleBuffer *)CMBufferQueueGetHead(*((CMBufferQueueRef *)&time + 1));
            MEMORY[0x199709540](*((void *)&time + 1), audioRenderer_stealBuffer, cf);
            CMSampleBufferGetOutputPresentationTimeStamp(&lhs, Head);
            CMSampleBufferGetOutputDuration(&type, Head);
            CMTimeAdd(&time2, &lhs, &type);
            *(CMTime *)(v15 + 220) = time2;
            goto LABEL_33;
          }
        }
        MEMORY[0x199709540](time_16, audioRenderer_stealBuffer, cf);
LABEL_33:
        int v24 = v45;
        goto LABEL_34;
      }
    }
  }
  int v24 = v20;
LABEL_34:
  if (cf) {
    CFRelease(cf);
  }
  if (v37) {
    CFRelease(v37);
  }
  if (queueOut) {
    CFRelease(queueOut);
  }
  if (!v24)
  {
LABEL_41:
    if ((DerivedStorage[48] & 1) == 0)
    {
      CFDictionaryRef v27 = (OpaqueCMTimebase *)DerivedStorage[3];
      uint64_t v28 = DerivedStorage[45];
      long long time = *(_OWORD *)v9;
      *(void *)&long long time_16 = *(void *)((char *)DerivedStorage + 236);
      CMTimebaseSetTimerDispatchSourceNextFireTime(v27, v28, (CMTime *)&time, 0);
      int v24 = 0;
      *((unsigned char *)DerivedStorage + 368) = 1;
      goto LABEL_44;
    }
    goto LABEL_43;
  }
LABEL_44:
  uint64_t v29 = CMBaseObjectGetDerivedStorage();
  uint64_t v30 = malloc_type_calloc(1uLL, 0x20uLL, 0x10A0040D98738FAuLL);
  if (v30)
  {
    CFDictionaryRef v31 = v30;
    *uint64_t v30 = CFRetain(v33);
    v31[1] = v6;
    v31[2] = v2;
    *((_DWORD *)v31 + 6) = v24;
    dispatch_async_f(*(dispatch_queue_t *)(v29 + 8), v31, (dispatch_function_t)audioRenderer_callFlushFromMediaTimeCallbackAsync);
  }
  MEMORY[0x19970E2B0](*DerivedStorage);
  CFRelease(*(CFTypeRef *)a1);
  free((void *)a1);
}

void audioRenderer_flushFromMediaTimeOnRenderPipelineInputQueueResetCallback(void *buf, uint64_t a2)
{
  memset(&v23, 0, sizeof(v23));
  CMSampleBufferRef sampleBufferOut = 0;
  CMBufferQueueEnqueue(*(CMBufferQueueRef *)(a2 + 16), buf);
  if (!*(_DWORD *)(a2 + 48))
  {
    CMSampleBufferGetOutputPresentationTimeStamp(&v23, (CMSampleBufferRef)buf);
    *(_OWORD *)&time1.start.CFTypeRef value = *(_OWORD *)(a2 + 24);
    time1.start.CMTimeEpoch epoch = *(void *)(a2 + 40);
    time2.CMTime start = v23;
    if (CMTimeCompare(&time1.start, &time2.start) < 0)
    {
      if (CMBufferQueueIsEmpty(*(CMBufferQueueRef *)(a2 + 8))) {
        *(_DWORD *)(a2 + 48) = -16385;
      }
    }
    else
    {
      memset(&time1, 0, sizeof(time1));
      CMSampleBufferGetOutputDuration(&duration, (CMSampleBufferRef)buf);
      time2.CMTime start = v23;
      CMTimeRangeMake(&time1, &time2.start, &duration);
      CMTimeRange time2 = time1;
      CMTimeRangeGetEnd(&v19, &time2);
      *(_OWORD *)&time2.start.CFTypeRef value = *(_OWORD *)(a2 + 24);
      time2.start.CMTimeEpoch epoch = *(void *)(a2 + 40);
      if (CMTimeCompare(&v19, &time2.start) <= 0)
      {
        CMBufferQueueEnqueue(*(CMBufferQueueRef *)(a2 + 8), buf);
      }
      else
      {
        *(_OWORD *)&v17.CFTypeRef value = *MEMORY[0x1E4F1FA48];
        CMTimeEpoch v4 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
        v17.CMTimeEpoch epoch = v4;
        *(_OWORD *)&v16.CFTypeRef value = *(_OWORD *)&v17.value;
        v16.CMTimeEpoch epoch = v4;
        long long v12 = *(_OWORD *)&v17.value;
        *(_OWORD *)&v15.CFTypeRef value = *(_OWORD *)&v17.value;
        v15.CMTimeEpoch epoch = v4;
        CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        CFAllocatorRef v6 = CFGetAllocator((CFTypeRef)*MEMORY[0x1E4F1CF80]);
        OSStatus v7 = CMSampleBufferCreateCopy(v6, (CMSampleBufferRef)buf, &sampleBufferOut);
        *(_DWORD *)(a2 + 48) = v7;
        if (!v7)
        {
          CMTimeRange time2 = time1;
          CMTimeRangeGetEnd(&lhs, &time2);
          *(_OWORD *)&time2.start.CFTypeRef value = *(_OWORD *)(a2 + 24);
          time2.start.CMTimeEpoch epoch = *(void *)(a2 + 40);
          CMTimeSubtract(&v16, &lhs, &time2.start);
          CFStringRef v8 = (const __CFString *)*MEMORY[0x1E4F1F300];
          CFDictionaryRef v9 = (const __CFDictionary *)CMGetAttachment(buf, (CFStringRef)*MEMORY[0x1E4F1F300], 0);
          if (v9)
          {
            CMTimeMakeFromDictionary(&v17, v9);
          }
          else
          {
            *(_OWORD *)&v17.CFTypeRef value = v12;
            v17.CMTimeEpoch epoch = v4;
          }
          time2.CMTime start = v17;
          CMTime rhs = v16;
          CMTimeAdd(&v15, &time2.start, &rhs);
          CMSampleBufferRef v10 = sampleBufferOut;
          time2.CMTime start = v15;
          CFDictionaryRef v11 = CMTimeCopyAsDictionary(&time2.start, v5);
          CMSetAttachment(v10, v8, v11, 1u);
          if (v11) {
            CFRelease(v11);
          }
          CMBufferQueueEnqueue(*(CMBufferQueueRef *)(a2 + 8), sampleBufferOut);
        }
        if (sampleBufferOut) {
          CFRelease(sampleBufferOut);
        }
      }
    }
  }
}

uint64_t audioRenderer_stealBuffer(CMBufferRef buf, CMBufferQueueRef queue)
{
  return CMBufferQueueEnqueue(queue, buf);
}

void audioRenderer_callFlushFromMediaTimeCallbackAsync(uint64_t a1)
{
  (*(void (**)(void, void))(a1 + 8))(*(unsigned int *)(a1 + 24), *(void *)(a1 + 16));
  CFRelease(*(CFTypeRef *)a1);

  free((void *)a1);
}

__n128 audioRenderer_endUnderrun(uint64_t a1, CMTime *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 384))
  {
    uint64_t v5 = DerivedStorage;
    CFAllocatorRef v6 = (CMTime *)(DerivedStorage + 372);
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      CFMutableDictionaryRef v8 = Mutable;
      CMTime start = *v6;
      CMTime v14 = *a2;
      CMTimeRangeFromTimeToTime(&v16, &start, &v14);
      FigCFDictionarySetCMTimeRange();
      audioRenderer_postNotification();
      uint64_t v9 = MEMORY[0x1E4F1F9F8];
      long long v10 = *MEMORY[0x1E4F1F9F8];
      *(_OWORD *)&v6->CFTypeRef value = *MEMORY[0x1E4F1F9F8];
      CMTimeEpoch v11 = *(void *)(v9 + 16);
      v6->CMTimeEpoch epoch = v11;
      *(_OWORD *)(v5 + 396) = v10;
      *(void *)(v5 + 412) = v11;
      CFRelease(v8);
    }
    else
    {
      uint64_t v12 = MEMORY[0x1E4F1F9F8];
      __n128 result = *(__n128 *)MEMORY[0x1E4F1F9F8];
      *(_OWORD *)&v6->CFTypeRef value = *MEMORY[0x1E4F1F9F8];
      CMTimeEpoch v13 = *(void *)(v12 + 16);
      v6->CMTimeEpoch epoch = v13;
      *(__n128 *)(v5 + 396) = result;
      *(void *)(v5 + 412) = v13;
    }
  }
  return result;
}

uint64_t FigSampleBufferRenderSynchronizerCentralCreate(const __CFAllocator *a1, const void *a2, void *a3)
{
  uint64_t v3 = 4294950926;
  if (a2 && a3)
  {
    FigSampleBufferRenderSynchronizerGetClassID();
    uint64_t v7 = CMDerivedObjectCreate();
    if (v7)
    {
      return v7;
    }
    else
    {
      uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
      *uint64_t DerivedStorage = a2;
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
      CFRetain(a2);
      CFMutableSetRef Mutable = CFSetCreateMutable(a1, 0, MEMORY[0x1E4F1D548]);
      DerivedStorage[2] = Mutable;
      if (Mutable && (uint64_t v10 = FigSimpleMutexCreate(), (DerivedStorage[1] = v10) != 0))
      {
        uint64_t v3 = 0;
        *a3 = 0;
      }
      else
      {
        return 4294950924;
      }
    }
  }
  return v3;
}

uint64_t synchronizerCentral_subSynchronizerNotificationHandler()
{
  CMNotificationCenterGetDefaultLocalCenter();

  return CMNotificationCenterPostNotification();
}

uint64_t synchronizerCentral_Finalize(void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)DerivedStorage)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    if (*(void *)DerivedStorage)
    {
      CFRelease(*(CFTypeRef *)DerivedStorage);
      *(void *)uint64_t DerivedStorage = 0;
    }
  }
  uint64_t v3 = CMBaseObjectGetDerivedStorage();
  CFSetRef v4 = *(const __CFSet **)(v3 + 16);
  if (v4)
  {
    if (CFSetGetCount(v4) >= 1)
    {
      CFSetRef Copy = CFSetCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], *(CFSetRef *)(v3 + 16));
      CFSetApplyFunction(Copy, (CFSetApplierFunction)synchronizerCentral_unstashAllRenderersInFinalizeSetApplierFunction, a1);
      if (Copy) {
        CFRelease(Copy);
      }
    }
  }
  CFAllocatorRef v6 = *(const void **)(DerivedStorage + 16);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(DerivedStorage + 16) = 0;
  }

  return FigSimpleMutexDestroy();
}

CFMutableStringRef synchronizerCentral_CopyDebugDesc(const void *a1)
{
  CFAllocatorRef v1 = CFGetAllocator(a1);

  return CFStringCreateMutable(v1, 0);
}

uint64_t synchronizerCentral_CopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  CFTypeRef cf = 0;
  uint64_t v7 = *(void *)CMBaseObjectGetDerivedStorage();
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v9 + 48);
  if (v10) {
    uint64_t v11 = v10(v7, a2, a3, &cf);
  }
  else {
    uint64_t v11 = 4294954514;
  }
  if (a4)
  {
    *a4 = cf;
  }
  else if (cf)
  {
    CFRelease(cf);
  }
  return v11;
}

uint64_t synchronizerCentral_SetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)CMBaseObjectGetDerivedStorage();
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 56);
  if (!v8) {
    return 4294954514;
  }

  return v8(v5, a2, a3);
}

void synchronizerCentral_unstashAllRenderersInFinalizeSetApplierFunction(const void *a1, uint64_t a2)
{
}

void synchronizerCentral_unstashRenderer(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 8));
  if (CFSetContainsValue(*(CFSetRef *)(DerivedStorage + 16), a2))
  {
    CFSetRemoveValue(*(CFMutableSetRef *)(DerivedStorage + 16), a2);
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
  }

  JUMPOUT(0x19970E930);
}

void synchronizerCentral_audioRendererInterruptedNotificationHandler(uint64_t a1, unint64_t a2, uint64_t a3, const void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 8));
  if (*(unsigned char *)(DerivedStorage + 52) || !CFSetContainsValue(*(CFSetRef *)(DerivedStorage + 16), a4)) {
    goto LABEL_17;
  }
  if (*(float *)(DerivedStorage + 24) == 0.0) {
    goto LABEL_10;
  }
  uint64_t v7 = CMBaseObjectGetDerivedStorage();
  context.CMTimeEpoch epoch = 1;
  *(_OWORD *)&context.CFTypeRef value = a2;
  CFSetApplyFunction(*(CFSetRef *)(v7 + 16), (CFSetApplierFunction)synchronizerCentral_processRateChangeWithRenderersSetApplier, &context);
  uint64_t v8 = *(void *)DerivedStorage;
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(unsigned int (**)(uint64_t, CMTime *, double))(v10 + 24);
  if (v11)
  {
    CMTime context = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
    if (!v11(v8, &context, 0.0))
    {
      uint64_t v12 = CMBaseObjectGetDerivedStorage();
      context.CMTimeEpoch epoch = 0;
      *(_OWORD *)&context.CFTypeRef value = a2;
      CFSetApplyFunction(*(CFSetRef *)(v12 + 16), (CFSetApplierFunction)synchronizerCentral_processRateChangeWithRenderersSetApplier, &context);
LABEL_10:
      uint64_t v13 = *(void *)DerivedStorage;
      uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v14) {
        uint64_t v15 = v14;
      }
      else {
        uint64_t v15 = 0;
      }
      CMTimeRange v16 = *(unsigned int (**)(uint64_t, CFTypeRef *))(v15 + 32);
      if (v16 && !v16(v13, &cf))
      {
        CMTimebaseGetTime(&context, (CMTimebaseRef)cf);
        *(_OWORD *)(DerivedStorage + 28) = *(_OWORD *)&context.value;
        CMTimeEpoch epoch = context.epoch;
      }
      else
      {
        uint64_t v17 = MEMORY[0x1E4F1F9F8];
        *(_OWORD *)(DerivedStorage + 28) = *MEMORY[0x1E4F1F9F8];
        CMTimeEpoch epoch = *(void *)(v17 + 16);
      }
      *(void *)(DerivedStorage + 44) = epoch;
      *(unsigned char *)(DerivedStorage + 52) = 1;
    }
  }
LABEL_17:
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 8));
  if (cf) {
    CFRelease(cf);
  }
}

void synchronizerCentral_audioRendererInterruptionEndedNotificationHandler(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 8));
  if (*(unsigned char *)(DerivedStorage + 52) && CFSetContainsValue(*(CFSetRef *)(DerivedStorage + 16), a4))
  {
    *(unsigned char *)(DerivedStorage + 52) = 0;
    uint64_t v6 = MEMORY[0x1E4F1F9F8];
    *(_OWORD *)(DerivedStorage + 28) = *MEMORY[0x1E4F1F9F8];
    *(void *)(DerivedStorage + 44) = *(void *)(v6 + 16);
  }

  JUMPOUT(0x19970E930);
}

uint64_t synchronizerCentral_processRateChangeWithRenderersSetApplier(uint64_t result, uint64_t a2)
{
  if (!*(_DWORD *)(a2 + 8))
  {
    uint64_t v3 = result;
    FigSampleBufferRenderSynchronizerCentralClientAccessProtocolGetProtocolID();
    __n128 result = CMBaseObjectImplementsProtocol();
    if (result)
    {
      uint64_t v4 = *(unsigned __int8 *)(a2 + 16);
      float v5 = *(float *)(a2 + 12);
      FigSampleBufferRenderSynchronizerCentralClientAccessProtocolGetProtocolID();
      Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
      if (ProtocolVTable && (uint64_t v7 = *(void *)(ProtocolVTable + 16)) != 0)
      {
        uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, float))(v7 + 8);
        if (v8) {
          __n128 result = v8(v3, v4, v5);
        }
        else {
          __n128 result = 4294954514;
        }
      }
      else
      {
        __n128 result = 4294954508;
      }
      *(_DWORD *)(a2 + 8) = result;
    }
  }
  return result;
}

uint64_t synchronizerCentral_AddAudioRenderer(uint64_t a1, const void *a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, const void *))(v5 + 8);
  if (!v6) {
    return 4294954514;
  }
  uint64_t result = v6(v3, a2);
  if (!result)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 8));
    if (!CFSetContainsValue(*(CFSetRef *)(DerivedStorage + 16), a2))
    {
      CFSetAddValue(*(CFMutableSetRef *)(DerivedStorage + 16), a2);
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
    }
    MEMORY[0x19970E930](*(void *)(DerivedStorage + 8));
    return 0;
  }
  return result;
}

uint64_t synchronizerCentral_RemoveAudioRenderer(uint64_t a1, const void *a2)
{
  uint64_t v4 = *(void *)CMBaseObjectGetDerivedStorage();
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(uint64_t (**)(uint64_t, const void *))(v6 + 16);
  if (!v7) {
    return 4294954514;
  }
  uint64_t result = v7(v4, a2);
  if (!result)
  {
    synchronizerCentral_unstashRenderer(a1, a2);
    return 0;
  }
  return result;
}

uint64_t synchronizerCentral_SetRateAndTime(uint64_t a1, uint64_t a2, float a3)
{
  long long v4 = *(_OWORD *)a2;
  uint64_t v5 = *(void *)(a2 + 16);
  return synchronizerCentral_SetRateAndAnchorTime(a1, &v4, MEMORY[0x1E4F1F9F8], a3);
}

uint64_t synchronizerCentral_CopyReadOnlyTimebase(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 32);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t synchronizerCentral_AcquirePlaybackAssertion(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 40);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t synchronizerCentral_ReleasePlaybackAssertion(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 48);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t synchronizerCentral_SetRateAndAnchorTime(uint64_t a1, long long *a2, long long *a3, float a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 8));
  uint64_t v9 = CMBaseObjectGetDerivedStorage();
  uint64_t v25 = 1;
  *(void *)&long long context = a1;
  DWORD2(context) = 0;
  *((float *)&context + 3) = a4;
  CFSetApplyFunction(*(CFSetRef *)(v9 + 16), (CFSetApplierFunction)synchronizerCentral_processRateChangeWithRenderersSetApplier, &context);
  uint64_t v10 = *(void *)DerivedStorage;
  long long v20 = *a2;
  uint64_t v21 = *((void *)a2 + 2);
  long long v18 = *a3;
  uint64_t v19 = *((void *)a3 + 2);
  uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v13 = *(uint64_t (**)(uint64_t, long long *, long long *, float))(v12 + 56);
  if (v13)
  {
    long long context = v20;
    uint64_t v25 = v21;
    long long v22 = v18;
    uint64_t v23 = v19;
    uint64_t v14 = v13(v10, &context, &v22, a4);
    if (!v14)
    {
      uint64_t v15 = CMBaseObjectGetDerivedStorage();
      uint64_t v25 = 0;
      *(void *)&long long context = a1;
      DWORD2(context) = 0;
      *((float *)&context + 3) = a4;
      CFSetApplyFunction(*(CFSetRef *)(v15 + 16), (CFSetApplierFunction)synchronizerCentral_processRateChangeWithRenderersSetApplier, &context);
      *(float *)(DerivedStorage + 24) = a4;
      *(unsigned char *)(DerivedStorage + 52) = 0;
      uint64_t v16 = MEMORY[0x1E4F1F9F8];
      *(_OWORD *)(DerivedStorage + 28) = *MEMORY[0x1E4F1F9F8];
      *(void *)(DerivedStorage + 44) = *(void *)(v16 + 16);
    }
  }
  else
  {
    uint64_t v14 = 4294954514;
  }
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 8));
  return v14;
}

uint64_t synchronizerCentral_ConvertTime(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4)
{
  uint64_t v7 = *(void *)CMBaseObjectGetDerivedStorage();
  long long v12 = *a3;
  uint64_t v13 = *((void *)a3 + 2);
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t))(v9 + 64);
  if (!v10) {
    return 4294954514;
  }
  long long v14 = v12;
  uint64_t v15 = v13;
  return v10(v7, a2, &v14, a4);
}

uint64_t FigTTMLDocumentWriterCreateLanguageIdentifierInserter(uint64_t a1, const void *a2, void *a3)
{
  if (a2 && a3)
  {
    FigTTMLDocumentWriterGetClassID();
    uint64_t v5 = CMDerivedObjectCreate();
    if (!v5)
    {
      FigTTMLDocumentWriterGetCMBaseObject(0);
      uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
      *uint64_t DerivedStorage = CFRetain(a2);
      *a3 = 0;
    }
    return v5;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t figTTMLDocumentWriterLanguageIdentifierInserter_Invalidate()
{
  return 0;
}

void figTTMLDocumentWriterLanguageIdentifierInserter_Finalize(uint64_t a1)
{
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v2 = *(const void **)(DerivedStorage + 8);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(const void **)DerivedStorage;
  if (*(void *)DerivedStorage)
  {
    CFRelease(v3);
  }
}

CFStringRef figTTMLDocumentWriterLanguageIdentifierInserter_CopyDebugDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"figTTMLDocumentWriterLanguageIdentifierInserter[%p]", a1);
}

uint64_t figTTMLDocumentWriterLanguageIdentifierInserter_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2 && a4)
  {
    uint64_t v7 = DerivedStorage;
    if (CFEqual(@"languageIdentifier", a2))
    {
      uint64_t v8 = *(const void **)(v7 + 8);
      if (v8) {
        CFTypeRef v9 = CFRetain(v8);
      }
      else {
        CFTypeRef v9 = 0;
      }
      uint64_t result = 0;
      *a4 = v9;
    }
    else
    {
      return 4294954512;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t figTTMLDocumentWriterLanguageIdentifierInserter_SetProperty(uint64_t a1, const void *a2, const void *a3)
{
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2 || !a3) {
    goto LABEL_9;
  }
  uint64_t v6 = DerivedStorage;
  if (!CFEqual(@"languageIdentifier", a2)) {
    return 4294954512;
  }
  CFTypeID v7 = CFGetTypeID(a3);
  if (v7 == CFStringGetTypeID())
  {
    uint64_t v8 = *(const void **)(v6 + 8);
    *(void *)(v6 + 8) = a3;
    CFRetain(a3);
    if (v8) {
      CFRelease(v8);
    }
    return 0;
  }
  else
  {
LABEL_9:
    return FigSignalErrorAt();
  }
}

uint64_t figTTMLDocumentWriterLanguageIdentifierInserter_StartElement(uint64_t a1, uint64_t a2)
{
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  uint64_t result = FigTTMLDocumentWriterStartElement(*DerivedStorage, a2);
  if (a2 == 7 && !result)
  {
    uint64_t v6 = DerivedStorage[1];
    if (v6)
    {
      return FigTTMLDocumentWriterSetAttribute(a1, @"http://www.w3.org/XML/1998/namespace lang", v6);
    }
    else
    {
      return 4294950719;
    }
  }
  return result;
}

uint64_t figTTMLDocumentWriterLanguageIdentifierInserter_EndElement(uint64_t a1)
{
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t v1 = *(void *)CMBaseObjectGetDerivedStorage();

  return FigTTMLDocumentWriterEndElement(v1);
}

uint64_t figTTMLDocumentWriterLanguageIdentifierInserter_AddCaptionData(uint64_t a1, uint64_t a2)
{
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();

  return FigTTMLDocumentWriterAddCaptionData(v3, a2);
}

uint64_t figTTMLDocumentWriterLanguageIdentifierInserter_SetAttribute(uint64_t a1, uint64_t a2, uint64_t a3)
{
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t v5 = *(void *)CMBaseObjectGetDerivedStorage();

  return FigTTMLDocumentWriterSetAttribute(v5, a2, a3);
}

uint64_t figTTMLDocumentWriterLanguageIdentifierInserter_Flush(uint64_t a1)
{
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t v1 = *(void *)CMBaseObjectGetDerivedStorage();

  return FigTTMLDocumentWriterFlush(v1);
}

uint64_t fapu_registerClass()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t FigAudioProcessingUnitCreateWithOptions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = 0;
  uint64_t v8 = &v7;
  uint64_t v9 = 0x2000000000;
  int v10 = 0;
  if (!a4)
  {
LABEL_5:
    *((_DWORD *)v8 + 6) = FigSignalErrorAt();
    goto LABEL_6;
  }
  MEMORY[0x19970EE10](&FigAudioProcessingUnitGetClassID_sRegisterFigAudioProcessingUnitOnce, fapu_registerClass);
  int v4 = CMDerivedObjectCreate();
  *((_DWORD *)v8 + 6) = v4;
  if (!v4)
  {
    CMBaseObjectGetDerivedStorage();
    if (FigCFDictionaryGetValueIfPresent()) {
      FigCFDictionaryGetValueIfPresent();
    }
    goto LABEL_5;
  }
LABEL_6:
  uint64_t v5 = *((unsigned int *)v8 + 6);
  _Block_object_dispose(&v7, 8);
  return v5;
}

uint64_t __FigAudioProcessingUnitCreateWithOptions_block_invoke(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (!*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24))
  {
    uint64_t v5 = result;
    uint64_t v6 = *(void *)(result + 40);
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 56);
    if (v9) {
      uint64_t result = v9(v6, a2, a3);
    }
    else {
      uint64_t result = 4294954514;
    }
    *(_DWORD *)(*(void *)(*(void *)(v5 + 32) + 8) + 24) = result;
  }
  return result;
}

uint64_t fapu_updateLoggingIDCStr(unsigned int *a1, const void *a2, const void *a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (char *)(a1 + 4);
  fapu_FourCCToPrintableStr((uint64_t)v10, a1[28]);
  fapu_FourCCToPrintableStr((uint64_t)v9, a1[29]);
  fapu_FourCCToPrintableStr((uint64_t)v8, a1[30]);
  return snprintf(v6, 0x5FuLL, "FAPU %p:%p %s/%s/%s", a2, a3, v10, v9, v8);
}

uint64_t FigAudioProcessingUnitCreateCopy(uint64_t a1, const void *a2, const void *a3, const void *a4, uint64_t a5, void *a6)
{
  if (a4)
  {
    if (!a5) {
      return FigSignalErrorAt();
    }
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    MEMORY[0x19970EE10](&FigAudioProcessingUnitGetClassID_sRegisterFigAudioProcessingUnitOnce, fapu_registerClass);
    uint64_t v11 = CMDerivedObjectCreate();
    if (v11) {
      return v11;
    }
    uint64_t v12 = CMBaseObjectGetDerivedStorage();
    long long v13 = *(_OWORD *)(DerivedStorage + 112);
    *(_DWORD *)(v12 + 128) = *(_DWORD *)(DerivedStorage + 128);
    *(_OWORD *)(v12 + 112) = v13;
    *(_DWORD *)(v12 + 132) = *(_DWORD *)(DerivedStorage + 132);
    *(void *)uint64_t v12 = CFRetain(a4);
    FigAudioQueueTimingShimGetAudioQueue((uint64_t)a4);
    uint64_t v11 = ATAudioProcessingNodeInstantiate();
    if (v11) {
      return v11;
    }
    fapu_updateLoggingIDCStr((unsigned int *)v12, a2, a3);
    uint64_t v14 = *(void *)(DerivedStorage + 136);
    if (v14)
    {
      uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v15) {
        uint64_t v16 = v15;
      }
      else {
        uint64_t v16 = 0;
      }
      uint64_t v17 = *(uint64_t (**)(void, __CFString *, uint64_t))(v16 + 56);
      if (!v17) {
        return 4294954514;
      }
      uint64_t v11 = v17(0, @"prrp", v14);
      if (v11) {
        return v11;
      }
    }
    uint64_t v18 = *(void *)(DerivedStorage + 144);
    if (v18)
    {
      uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v19) {
        uint64_t v20 = v19;
      }
      else {
        uint64_t v20 = 0;
      }
      uint64_t v21 = *(uint64_t (**)(void, __CFString *, uint64_t))(v20 + 56);
      if (!v21) {
        return 4294954514;
      }
      uint64_t v11 = v21(0, @"prsp", v18);
      if (v11) {
        return v11;
      }
    }
    uint64_t v22 = *(void *)(DerivedStorage + 152);
    if (v22)
    {
      uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v23) {
        uint64_t v24 = v23;
      }
      else {
        uint64_t v24 = 0;
      }
      uint64_t v25 = *(uint64_t (**)(void, __CFString *, uint64_t))(v24 + 56);
      if (!v25) {
        return 4294954514;
      }
      uint64_t v11 = v25(0, @"ausp", v22);
      if (v11) {
        return v11;
      }
    }
    uint64_t v26 = *(void *)(DerivedStorage + 160);
    if (!v26)
    {
LABEL_29:
      uint64_t v30 = 0;
      *a6 = 0;
      return v30;
    }
    uint64_t v27 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v27) {
      uint64_t v28 = v27;
    }
    else {
      uint64_t v28 = 0;
    }
    uint64_t v29 = *(uint64_t (**)(void, __CFString *, uint64_t))(v28 + 56);
    if (v29)
    {
      uint64_t v11 = v29(0, @"grtx", v26);
      if (!v11) {
        goto LABEL_29;
      }
      return v11;
    }
    return 4294954514;
  }

  return FigSignalErrorAt();
}

CFStringRef fapu_CopyFormattingDesc(uint64_t a1)
{
  CFAllocatorRef v1 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (a1) {
    uint64_t v2 = (const char *)(CMBaseObjectGetDerivedStorage() + 16);
  }
  else {
    uint64_t v2 = "";
  }

  return CFStringCreateWithCString(v1, v2, 0x600u);
}

void fapu_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  ATAudioProcessingNodeDispose();
  *(void *)(DerivedStorage + 8) = 0;
  CFAllocatorRef v1 = *(const void **)(DerivedStorage + 136);
  if (v1)
  {
    CFRelease(v1);
    *(void *)(DerivedStorage + 136) = 0;
  }
  uint64_t v2 = *(const void **)(DerivedStorage + 144);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(DerivedStorage + 144) = 0;
  }
  uint64_t v3 = *(const void **)(DerivedStorage + 152);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(DerivedStorage + 152) = 0;
  }
  int v4 = *(const void **)(DerivedStorage + 160);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(DerivedStorage + 160) = 0;
  }
  if (*(void *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(void *)uint64_t DerivedStorage = 0;
  }
}

CFStringRef fapu_CopyDebugDescription(uint64_t a1)
{
  CFAllocatorRef v1 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (a1) {
    uint64_t v2 = (const char *)(CMBaseObjectGetDerivedStorage() + 16);
  }
  else {
    uint64_t v2 = "";
  }

  return CFStringCreateWithCString(v1, v2, 0x600u);
}

uint64_t fapu_CopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (FigCFEqual())
  {
    uint64_t v6 = (const void *)DerivedStorage[17];
LABEL_9:
    *a4 = CFRetain(v6);
    return 0;
  }
  if (FigCFEqual())
  {
    uint64_t v6 = (const void *)DerivedStorage[18];
    goto LABEL_9;
  }
  if (FigCFEqual())
  {
    uint64_t v6 = (const void *)DerivedStorage[19];
    goto LABEL_9;
  }
  if (FigCFEqual())
  {
    uint64_t v6 = (const void *)DerivedStorage[20];
    goto LABEL_9;
  }

  return FigSignalErrorAt();
}

uint64_t fapu_SetProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (FigCFEqual())
  {
    if (!FigCFEqual())
    {
      if (!DerivedStorage[17])
      {
        if (a2)
        {
          CFTypeID v6 = CFGetTypeID(a2);
          if (v6 == CFStringGetTypeID())
          {
            uint64_t v7 = (const void *)DerivedStorage[17];
            DerivedStorage[17] = a3;
            if (!a3)
            {
LABEL_8:
              if (v7) {
                CFRelease(v7);
              }
              uint64_t v8 = ATAudioProcessingNodeSetProperty();
              if (v8) {
                FigSignalErrorAt();
              }
              return v8;
            }
LABEL_7:
            CFRetain(a3);
            goto LABEL_8;
          }
        }
      }
      goto LABEL_30;
    }
    return 0;
  }
  if (FigCFEqual())
  {
    if (!FigCFEqual())
    {
      if (!DerivedStorage[18])
      {
        if (a2)
        {
          CFTypeID v9 = CFGetTypeID(a2);
          if (v9 == CFDictionaryGetTypeID())
          {
            uint64_t v7 = (const void *)DerivedStorage[18];
            DerivedStorage[18] = a3;
            if (!a3) {
              goto LABEL_8;
            }
            goto LABEL_7;
          }
        }
      }
      goto LABEL_30;
    }
    return 0;
  }
  if (FigCFEqual())
  {
    if (!FigCFEqual())
    {
      if (!DerivedStorage[19])
      {
        if (a2)
        {
          CFTypeID v10 = CFGetTypeID(a2);
          if (v10 == CFDictionaryGetTypeID())
          {
            uint64_t v7 = (const void *)DerivedStorage[19];
            DerivedStorage[19] = a3;
            if (!a3) {
              goto LABEL_8;
            }
            goto LABEL_7;
          }
        }
      }
      goto LABEL_30;
    }
    return 0;
  }
  if (!FigCFEqual()) {
    goto LABEL_30;
  }
  if (FigCFEqual()) {
    return 0;
  }
  if (!DerivedStorage[20])
  {
    if (a2)
    {
      CFTypeID v12 = CFGetTypeID(a2);
      if (v12 == CFStringGetTypeID())
      {
        uint64_t v7 = (const void *)DerivedStorage[20];
        DerivedStorage[20] = a3;
        if (!a3) {
          goto LABEL_8;
        }
        goto LABEL_7;
      }
    }
  }
LABEL_30:

  return FigSignalErrorAt();
}

uint64_t fapu_ScheduleParameters(uint64_t a1, const __CFArray *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMTime v25 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  CFTypeRef v19 = 0;
  CFTypeRef cf = 0;
  if (a2 && (int v4 = (CMTime **)DerivedStorage, v5 = CFGetTypeID(a2), v5 == CFArrayGetTypeID()))
  {
    CFIndex Count = CFArrayGetCount(a2);
    if (Count < 1)
    {
      return 0;
    }
    else
    {
      CFIndex v7 = Count;
      CFIndex v8 = 0;
      while (1)
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(a2, v8);
        if (!ValueAtIndex) {
          break;
        }
        CFTypeID v10 = CFGetTypeID(ValueAtIndex);
        if (v10 != CFDictionaryGetTypeID()) {
          break;
        }
        if (!FigCFDictionaryGetCMTimeIfPresent()) {
          break;
        }
        if (!FigCFDictionaryGetValueIfPresent()) {
          break;
        }
        if (!cf) {
          break;
        }
        CFTypeID v11 = CFGetTypeID(cf);
        if (v11 != CFDataGetTypeID()) {
          break;
        }
        if (!FigCFDictionaryGetValueIfPresent()) {
          break;
        }
        if (!v19) {
          break;
        }
        CFTypeID v12 = CFGetTypeID(v19);
        if (v12 != CFDataGetTypeID()) {
          break;
        }
        unint64_t Length = CFDataGetLength((CFDataRef)cf);
        if (Length <= 0xB) {
          break;
        }
        unint64_t v14 = Length / 0xC;
        if (12 * (Length / 0xC) != CFDataGetLength((CFDataRef)cf) || CFDataGetLength((CFDataRef)v19) != 4 * v14) {
          break;
        }
        CFDataGetBytePtr((CFDataRef)cf);
        CFDataGetBytePtr((CFDataRef)v19);
        uint64_t v15 = *v4;
        CMTime v17 = v25;
        FigAudioQueueTimingShimConvertTimingShimTimeToAQTime(v15, &v17, &v18);
        *(double *)&long long v21 = (double)v18.value;
        DWORD2(v24) = 1;
        uint64_t result = ATAudioProcessingNodeScheduleParameters();
        if (result) {
          return result;
        }
        if (v7 == ++v8) {
          return 0;
        }
      }
      return FigSignalErrorAt();
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t fapu_SetParameters(uint64_t a1, CFDictionaryRef theDict)
{
  unsigned int v4 = 0;
  context[0] = &v4;
  context[1] = a1;
  if (!theDict) {
    return 0;
  }
  CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)fapu_SetParametersApplier, context);
  return v4;
}

uint64_t fapu_CancelScheduledParameters()
{
  uint64_t v0 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);

  return MEMORY[0x1F40D4AF8](v0);
}

uint64_t fapu_SetParametersApplier(const __CFData *a1, uint64_t a2, _DWORD **a3)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (!**a3)
  {
    CFDataGetBytePtr(a1);
    FigCFNumberGetFloat32();
    uint64_t result = ATAudioProcessingNodeSetParameter();
    **a3 = result;
  }
  return result;
}

uint64_t fapu_FourCCToPrintableStr(uint64_t a1, unsigned int a2)
{
  int v4 = 0;
  int v5 = 24;
  uint64_t v6 = MEMORY[0x1E4F14390];
  do
  {
    unsigned int v7 = a2 >> v5;
    unsigned int v8 = (a2 >> v5);
    if (v8 > 0x7F) {
      int v9 = __maskrune((a2 >> v5), 0x40000uLL);
    }
    else {
      int v9 = *(_DWORD *)(v6 + 4 * (a2 >> v5) + 60) & 0x40000;
    }
    if (v9)
    {
      *(unsigned char *)(a1 + v4) = v7;
    }
    else
    {
      *(unsigned char *)(a1 + v4) = 92;
      unsigned __int8 v10 = v4 + 2;
      *(unsigned char *)(a1 + (v4 + 1)) = 120;
      if (v8 <= 0x9F) {
        char v11 = 48;
      }
      else {
        char v11 = 55;
      }
      v4 += 3;
      *(unsigned char *)(a1 + v10) = v11 + ((a2 >> v5) >> 4);
      if (((a2 >> v5) & 0xF) <= 9) {
        char v12 = 48;
      }
      else {
        char v12 = 55;
      }
      *(unsigned char *)(a1 + v4) = v12 + (v7 & 0xF);
    }
    ++v4;
    v5 -= 8;
  }
  while (v5 != -8);
  *(unsigned char *)(a1 + v4) = 0;
  return a1;
}

CFTypeRef PKDCopyDisposeStorageAllocator()
{
  if (PKDCopyDisposeStorageAllocator_once != -1) {
    dispatch_once_f(&PKDCopyDisposeStorageAllocator_once, &PKDCopyDisposeStorageAllocator_initContext, (dispatch_function_t)PKDDisposeStorageAllocatorInitOnce);
  }
  CFTypeRef result = (CFTypeRef)qword_1EC290288;
  if (qword_1EC290288)
  {
    return CFRetain(result);
  }
  return result;
}

CFAllocatorRef PKDDisposeStorageAllocatorInitOnce(uint64_t a1)
{
  memset(&v3, 0, sizeof(v3));
  v3.info = *(void **)a1;
  v3.allocate = (CFAllocatorAllocateCallBack)PKDDisposeStorageAllocatorAllocateCallback;
  v3.deallocate = (CFAllocatorDeallocateCallBack)PKDDisposeStorageAllocatorDeallocateCallback;
  CFAllocatorRef result = CFAllocatorCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], &v3);
  *(void *)(a1 + 8) = result;
  return result;
}

CFTypeRef PKDMSECopyDisposeStorageAllocator()
{
  if (PKDMSECopyDisposeStorageAllocator_once != -1) {
    dispatch_once_f(&PKDMSECopyDisposeStorageAllocator_once, &PKDMSECopyDisposeStorageAllocator_initContext, (dispatch_function_t)PKDDisposeStorageAllocatorInitOnce);
  }
  CFTypeRef result = (CFTypeRef)qword_1EC290298;
  if (qword_1EC290298)
  {
    return CFRetain(result);
  }
  return result;
}

void *PKDMovieIDCreateForPastis()
{
  CFTypeRef result = CreateCommon();
  result[2] = Qhl17oSYJtCJIxM;
  result[3] = MzdSdcDIXg8COV;
  return result;
}

void *CreateCommon()
{
  PKDMovieIDGetTypeID();
  uint64_t Instance = (void *)_CFRuntimeCreateInstance();
  if (Instance)
  {
    dispatch_queue_t v1 = dispatch_queue_create("com.apple.PKDMovieID", 0);
    Instance[4] = v1;
    if (!v1)
    {
      CFRelease(Instance);
      return 0;
    }
  }
  return Instance;
}

uint64_t PKDMovieIDGetTypeID()
{
  long long v1 = xmmword_1E57A9BF0;
  if (PKDMovieIDGetTypeID_once != -1) {
    dispatch_once_f(&PKDMovieIDGetTypeID_once, &v1, (dispatch_function_t)CFRuntimeClassRegisterOnce_0);
  }
  return PKDMovieIDGetTypeID_typeID;
}

double PKDMovieIDInit(uint64_t a1)
{
  *(void *)(a1 + 48) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

void PKDMovieIDFinalize(void *context)
{
  uint64_t v2 = context[4];
  if (v2)
  {
    dispatch_sync_f(v2, context, (dispatch_function_t)FinalizeGuts);
    CFAllocatorContext v3 = context[4];
    dispatch_release(v3);
  }
}

uint64_t CFRuntimeClassRegisterOnce_0(uint64_t a1)
{
  uint64_t result = _CFRuntimeRegisterClass();
  **(void **)(a1 + 8) = result;
  return result;
}

uint64_t PKDMovieIDGetInfo(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

uint64_t PKDMovieIDGetValue(uint64_t a1, CFDictionaryRef theDict, void *a3)
{
  CFTypeRef cf = 0;
  uint64_t v14 = 0;
  uint64_t context = a1;
  if (theDict)
  {
    uint64_t v6 = (const void *)*MEMORY[0x1E4F218F0];
    if (!CFDictionaryContainsKey(theDict, (const void *)*MEMORY[0x1E4F218F0])
      || (unsigned int v7 = (const void *)*MEMORY[0x1E4F21928], !CFDictionaryContainsKey(theDict, (const void *)*MEMORY[0x1E4F21928])))
    {
      uint64_t result = 4294955136;
      LODWORD(v14) = -12160;
      goto LABEL_8;
    }
    CFMutableSetRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFArrayRef Value = CFDictionaryGetValue(theDict, v6);
    CFDictionarySetValue(Mutable, v6, Value);
    unsigned __int8 v10 = CFDictionaryGetValue(theDict, v7);
    CFDictionarySetValue(Mutable, v7, v10);
    CFTypeRef cf = Mutable;
  }
  dispatch_sync_f(*(dispatch_queue_t *)(a1 + 32), &context, (dispatch_function_t)GetMovieIDGuts);
  uint64_t result = v14;
  if (a3 && !v14) {
    *a3 = *(void *)(a1 + 40);
  }
LABEL_8:
  if (cf)
  {
    CFRelease(cf);
    return v14;
  }
  return result;
}

void GetMovieIDGuts(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  CFDictionaryRef v3 = *(const __CFDictionary **)(*(void *)a1 + 48);
  if (v3)
  {
    if (*(void *)(a1 + 8))
    {
      int v4 = (const void *)*MEMORY[0x1E4F218F0];
      CFDictionaryGetValue(v3, (const void *)*MEMORY[0x1E4F218F0]);
      CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 8), v4);
      if (!FigCFEqual())
      {
        int v5 = FigSignalErrorAt();
        goto LABEL_6;
      }
    }
  }
  if (v2[5])
  {
    int v5 = 0;
LABEL_6:
    uint64_t v6 = 0;
    goto LABEL_20;
  }
  uint64_t v22 = 0;
  CFDataRef Value = (const __CFData *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 8), (const void *)*MEMORY[0x1E4F218F0]);
  CFArrayRef v8 = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 8), (const void *)*MEMORY[0x1E4F21928]);
  CFIndex Count = CFArrayGetCount(v8);
  CFIndex v10 = Count;
  if (Count)
  {
    CFDataRef theData = Value;
    uint64_t v6 = (char *)malloc_type_malloc(4 * Count, 0x100004052888210uLL);
    CFIndex v11 = 0;
    char v12 = v6;
    while (1)
    {
      CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v8, v11);
      if (!ValueAtIndex) {
        break;
      }
      CFNumberRef v14 = ValueAtIndex;
      CFTypeID v15 = CFGetTypeID(ValueAtIndex);
      if (v15 != CFNumberGetTypeID()) {
        break;
      }
      if (!CFNumberGetValue(v14, kCFNumberSInt32Type, v12))
      {
        int v16 = FigSignalErrorAt();
        if (v16) {
          goto LABEL_22;
        }
      }
      ++v11;
      v12 += 4;
      if (v10 == v11)
      {
        CFDataRef Value = theData;
        goto LABEL_16;
      }
    }
    int v16 = FigSignalErrorAt();
LABEL_22:
    int v5 = v16;
    goto LABEL_20;
  }
  uint64_t v6 = 0;
LABEL_16:
  CMTime v17 = (uint64_t (*)(const UInt8 *, CFIndex, char *, CFIndex, uint64_t *))v2[2];
  uint64_t BytePtr = CFDataGetBytePtr(Value);
  CFIndex Length = CFDataGetLength(Value);
  int v16 = v17(BytePtr, Length, v6, v10, &v22);
  if (v16) {
    goto LABEL_22;
  }
  CFTypeRef v20 = *(CFTypeRef *)(a1 + 8);
  if (v20) {
    CFTypeRef v20 = CFRetain(v20);
  }
  int v5 = 0;
  v2[5] = v22;
  v2[6] = v20;
LABEL_20:
  free(v6);
  *(_DWORD *)(a1 + 16) = v5;
}

uint64_t PKDGetSchemeFromSinf(const __CFData *a1, unsigned int *a2)
{
  if (a1)
  {
    int v10 = 1935894637;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t BytePtr = CFDataGetBytePtr(a1);
    CFIndex Length = CFDataGetLength(a1);
    uint64_t result = FigFairPlayGetSinfChildDataWithPath((uint64_t)BytePtr, Length, (uint64_t)&v10, 1, &v9, &v8);
    if (result)
    {
      unsigned int v7 = 0;
      if (!a2) {
        return result;
      }
      goto LABEL_11;
    }
    if (v8 != 12)
    {
      unsigned int v7 = 0;
      uint64_t result = 4294955137;
      if (!a2) {
        return result;
      }
      goto LABEL_11;
    }
    uint64_t result = 0;
    unsigned int v7 = bswap32(*(_DWORD *)(v9 + 4));
    if (a2) {
LABEL_11:
    }
      *a2 = v7;
  }
  else
  {
    unsigned int v7 = 0;
    uint64_t result = 4294955146;
    if (a2) {
      goto LABEL_11;
    }
  }
  return result;
}

uint64_t PKDCopyDefaultKeyIDFromSinf(const __CFData *a1, CFDataRef *a2)
{
  v10[1] = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v9 = 0;
    v10[0] = 0x74656E6373636869;
    unint64_t v8 = 0;
    uint64_t BytePtr = CFDataGetBytePtr(a1);
    CFIndex Length = CFDataGetLength(a1);
    uint64_t result = FigFairPlayGetSinfChildDataWithPath((uint64_t)BytePtr, Length, (uint64_t)v10, 2, &v9, &v8);
    if (result)
    {
      CFDataRef v7 = 0;
      if (!a2) {
        return result;
      }
      goto LABEL_11;
    }
    if (v8 < 0x18)
    {
      CFDataRef v7 = 0;
      uint64_t result = 4294955137;
      if (!a2) {
        return result;
      }
      goto LABEL_11;
    }
    CFDataRef v7 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const UInt8 *)(v9 + 8), 16);
    uint64_t result = 0;
    if (a2) {
LABEL_11:
    }
      *a2 = v7;
  }
  else
  {
    CFDataRef v7 = 0;
    uint64_t result = 4294955146;
    if (a2) {
      goto LABEL_11;
    }
  }
  return result;
}

uint64_t PKDDispatchKeyResponseNotification(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (!a4)
  {
    CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!Mutable)
    {
      FigSignalErrorAt();
      return a2;
    }
    CFDataRef v7 = Mutable;
    if (a2)
    {
      CFErrorRef v8 = CFErrorCreate(v5, (CFErrorDomain)*MEMORY[0x1E4F1D158], (int)a2, 0);
      if (v8)
      {
        CFErrorRef v9 = v8;
        CFDictionarySetValue(v7, (const void *)*MEMORY[0x1E4F1FD08], v8);
        FigCFDictionarySetInt64();
        dispatch_get_global_queue(0, 0);
        CMNotificationCenterGetDefaultLocalCenter();
        FigDispatchAsyncPostNotification();
        CFRelease(v7);
        int v10 = v9;
LABEL_8:
        CFRelease(v10);
        return a2;
      }
      FigSignalErrorAt();
    }
    else
    {
      FigCFDictionarySetInt64();
      dispatch_get_global_queue(0, 0);
      CMNotificationCenterGetDefaultLocalCenter();
      FigDispatchAsyncPostNotification();
    }
    int v10 = v7;
    goto LABEL_8;
  }
  return a2;
}

uint64_t PKDCopyInfoFromPackagedPersistentKey(const void *a1, void *a2, void *a3, void *a4, void *a5)
{
  if (a1)
  {
    CFTypeID v10 = CFGetTypeID(a1);
    if (v10 == CFDataGetTypeID())
    {
      CFDictionaryRef v11 = (const __CFDictionary *)CFPropertyListCreateWithData((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (CFDataRef)a1, 0, 0, 0);
      if (v11)
      {
        CFDictionaryRef v13 = v11;
        CFTypeID v14 = CFGetTypeID(v11);
        if (v14 != CFDictionaryGetTypeID()) {
          goto LABEL_28;
        }
        if (a2)
        {
          CFDataRef Value = CFDictionaryGetValue(v13, (const void *)*MEMORY[0x1E4F21970]);
          if (Value) {
            CFDataRef Value = CFRetain(Value);
          }
          *a2 = Value;
        }
        if (a3)
        {
          int v16 = CFDictionaryGetValue(v13, (const void *)*MEMORY[0x1E4F218F0]);
          if (!v16) {
            goto LABEL_27;
          }
          CFTypeRef v17 = CFRetain(v16);
          *a3 = v17;
          if (!v17) {
            goto LABEL_28;
          }
          CFTypeID v18 = CFGetTypeID(v17);
          if (v18 != CFDataGetTypeID()) {
            goto LABEL_28;
          }
        }
        if (a4)
        {
          CFTypeRef v19 = CFDictionaryGetValue(v13, (const void *)*MEMORY[0x1E4F21928]);
          if (!v19)
          {
            a3 = a4;
            goto LABEL_27;
          }
          CFTypeRef v20 = CFRetain(v19);
          *a4 = v20;
          if (!v20) {
            goto LABEL_28;
          }
          CFTypeID v21 = CFGetTypeID(v20);
          if (v21 != CFArrayGetTypeID()) {
            goto LABEL_28;
          }
        }
        if (!a5)
        {
LABEL_29:
          CFRelease(v13);
          return (uint64_t)a5;
        }
        uint64_t v22 = CFDictionaryGetValue(v13, (const void *)*MEMORY[0x1E4F21920]);
        if (v22)
        {
          CFTypeRef v23 = CFRetain(v22);
          *a5 = v23;
          if (v23)
          {
            CFTypeID v24 = CFGetTypeID(v23);
            if (v24 == CFDataGetTypeID())
            {
              a5 = 0;
              goto LABEL_29;
            }
          }
LABEL_28:
          a5 = (void *)FigSignalErrorAt();
          goto LABEL_29;
        }
        a3 = a5;
LABEL_27:
        *a3 = 0;
        goto LABEL_28;
      }
    }
  }

  return FigSignalErrorAt();
}

uint64_t PKDCopyDefaultKeyIDFromSinfArray(CFArrayRef theArray, CFDataRef *a2)
{
  unsigned int v12 = 0;
  CFDataRef v11 = 0;
  if (a2)
  {
    uint64_t v4 = 0;
    CFIndex v5 = 0;
    *a2 = 0;
    if (!theArray) {
      goto LABEL_4;
    }
LABEL_3:
    for (CFIndex i = CFArrayGetCount(theArray); ; CFIndex i = 0)
    {
      if (v5 >= i)
      {
        CFDataRef v9 = v11;
        goto LABEL_13;
      }
      CFDataRef ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(theArray, v5);
      if (ValueAtIndex)
      {
        CFDataRef v8 = ValueAtIndex;
        if (!PKDGetSchemeFromSinf(ValueAtIndex, &v12))
        {
          uint64_t v4 = PKDCopyDefaultKeyIDFromSinf(v8, &v11);
          if (!v4)
          {
            CFDataRef v9 = v11;
            if (v11) {
              break;
            }
          }
        }
      }
      ++v5;
      if (theArray) {
        goto LABEL_3;
      }
LABEL_4:
      ;
    }
    uint64_t v4 = 0;
LABEL_13:
    *a2 = v9;
    return v4;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t PKDPersistentKeyIsForCTRModeDecryption(const void *a1, unsigned char *a2)
{
  CFTypeRef cf = 0;
  if (a1 && a2)
  {
    *a2 = 0;
    uint64_t v3 = PKDCopyInfoFromPackagedPersistentKey(a1, &cf, 0, 0, 0);
    CFTypeRef v4 = cf;
    if (!v3)
    {
      *a2 = FigCFEqual();
      CFTypeRef v4 = cf;
    }
    if (v4) {
      CFRelease(v4);
    }
    return v3;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

BOOL PKDKeyRequestIDsMatch(uint64_t a1, uint64_t a2)
{
  return !FigCFDictionaryGetInt64IfPresent() || a2 == 0;
}

uint64_t PKDGetNewRequestID()
{
  return (int)FigAtomicIncrement32();
}

uint64_t PKDCopyDecryptFormatTypeFromSinfArray(CFArrayRef theArray, void *a2)
{
  unsigned int v10 = 0;
  if (!a2)
  {
    return FigSignalErrorAt();
  }
  CFIndex v4 = 0;
  *a2 = 0;
  if (!theArray) {
    goto LABEL_4;
  }
LABEL_3:
  for (CFIndex i = CFArrayGetCount(theArray); ; CFIndex i = 0)
  {
    if (v4 >= i)
    {
      CFTypeRef v7 = 0;
      goto LABEL_18;
    }
    CFDataRef ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(theArray, v4);
    if (!ValueAtIndex || PKDGetSchemeFromSinf(ValueAtIndex, &v10)) {
      goto LABEL_11;
    }
    if (v10 == 1667392306) {
      goto LABEL_14;
    }
    if (v10 == 1667591779) {
      break;
    }
    if (v10 == 1667392371)
    {
LABEL_14:
      CFDataRef v8 = kFigCPEProtectorCryptorCreationOptionDecryptFormatType_Pastis;
      goto LABEL_16;
    }
LABEL_11:
    ++v4;
    if (theArray) {
      goto LABEL_3;
    }
LABEL_4:
    ;
  }
  CFDataRef v8 = kFigCPEProtectorCryptorCreationOptionDecryptFormatType_MSE;
LABEL_16:
  CFTypeRef v7 = *v8;
  if (*v8) {
    CFTypeRef v7 = CFRetain(v7);
  }
LABEL_18:
  *a2 = v7;
  return 0;
}

uint64_t FigPKDParsePSSHAndCopyContentKeyInfo(const __CFData *a1, __CFString **a2, CFMutableArrayRef *a3)
{
  uint64_t v27 = 0;
  if (!a1
    || (uint64_t v3 = a2) == 0
    || (CFIndex v4 = a3) == 0
    || (CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80],
        (CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510])) == 0))
  {
    uint64_t v23 = FigSignalErrorAt();
    unsigned int v10 = 0;
    goto LABEL_28;
  }
  CFMutableArrayRef v8 = Mutable;
  uint64_t v9 = (uint64_t)FigFairplayPSSHAtomParserParseAndCreateRecord((uint64_t)v6, a1, &v27);
  if (v9)
  {
LABEL_30:
    uint64_t v23 = v9;
LABEL_32:
    CFRelease(v8);
    unsigned int v10 = v27;
    goto LABEL_28;
  }
  unsigned int v10 = v27;
  uint64_t v11 = v27[1];
  if (v11)
  {
    CMTime v25 = v3;
    uint64_t v26 = v4;
    unsigned int v12 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
    CFDictionaryRef v13 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
    while (1)
    {
      CFDataRef v14 = CFDataCreate(v6, (const UInt8 *)v11, 16);
      if (!v14)
      {
        uint64_t v9 = FigSignalErrorAt();
        goto LABEL_30;
      }
      CFDataRef v15 = v14;
      int v16 = CFDictionaryCreateMutable(v6, 0, v12, v13);
      if (!v16) {
        break;
      }
      CFTypeRef v17 = v16;
      CFDictionarySetValue(v16, @"PKDPSSH_KeyID", v15);
      CFDataRef v18 = *(const __CFData **)(v11 + 16);
      if (v18 && CFDataGetLength(v18) >= 1) {
        CFDictionarySetValue(v17, @"PKDPSSH_ContentIdentifier", *(const void **)(v11 + 16));
      }
      CFArrayRef v19 = *(const __CFArray **)(v11 + 24);
      if (v19 && CFArrayGetCount(v19) >= 1) {
        CFDictionarySetValue(v17, @"PKDPSSH_VersionList", *(const void **)(v11 + 24));
      }
      CFArrayAppendValue(v8, v17);
      CFRelease(v15);
      CFRelease(v17);
      uint64_t v11 = *(void *)(v11 + 32);
      if (!v11)
      {
        CFIndex v4 = v26;
        unsigned int v10 = v27;
        uint64_t v3 = v25;
        goto LABEL_18;
      }
    }
    uint64_t v23 = FigSignalErrorAt();
    CFRelease(v15);
    goto LABEL_32;
  }
LABEL_18:
  int v20 = *(_DWORD *)v10;
  if (*(_DWORD *)v10 == 1667392306 || v20 == 1667392371)
  {
    uint64_t v22 = kFigCPEProtectorCryptorCreationOptionDecryptFormatType_Pastis;
LABEL_26:
    *uint64_t v3 = *v22;
    goto LABEL_27;
  }
  if (v20 == 1667591779)
  {
    uint64_t v22 = kFigCPEProtectorCryptorCreationOptionDecryptFormatType_MSE;
    goto LABEL_26;
  }
LABEL_27:
  uint64_t v23 = 0;
  *CFIndex v4 = v8;
LABEL_28:
  FigFairplayPSSHAtomParserDestroyRecord(v10);
  return v23;
}

uint64_t PKDGetCPCBitfieldFromLabels(const __CFArray *a1, void *a2)
{
  if (a1)
  {
    if (CFArrayGetCount(a1) < 1)
    {
      uint64_t v6 = 0;
    }
    else
    {
      CFIndex v5 = 0;
      uint64_t v6 = 0;
      do
      {
        CFArrayGetValueAtIndex(a1, v5);
        for (uint64_t i = 0; i != 80; i += 16)
        {
          if (FigCFEqual())
          {
            uint64_t v9 = 1 << *(_DWORD *)((char *)&off_1E57A9C20 + i + 8);
            goto LABEL_10;
          }
        }
        uint64_t result = FigSignalErrorAt();
        if (result) {
          return result;
        }
        uint64_t v9 = 1;
LABEL_10:
        v6 |= v9;
        ++v5;
      }
      while (v5 < CFArrayGetCount(a1));
    }
    uint64_t result = 0;
    if (a2) {
      *a2 = v6;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t PKDGetSystemCPC(void *a1)
{
  if (PKDGetSystemCPC_getCPCOnceToken != -1) {
    dispatch_once(&PKDGetSystemCPC_getCPCOnceToken, &__block_literal_global_128);
  }
  if (PKDGetSystemCPC_err)
  {
    FigSignalErrorAt();
    return PKDGetSystemCPC_err;
  }
  else
  {
    uint64_t result = 0;
    if (a1) {
      *a1 = PKDGetSystemCPC_sSystemCPC;
    }
  }
  return result;
}

void __PKDGetSystemCPC_block_invoke()
{
  qtZa1uk5tFOQ7T((uint64_t)&PKDGetSystemCPC_sSystemCPC);
  PKDGetSystemCPC_err = v0;
}

uint64_t PKDCopyDecryptFormatTypeFromCodecType(int a1, void *a2)
{
  CFTypeRef v4 = 0;
  CFIndex v5 = kFigCPEProtectorCryptorCreationOptionDecryptFormatType_Pastis;
  if (a1 <= 1902407031)
  {
    if (a1 > 1902207794)
    {
      if (a1 > 1902212706)
      {
        if (a1 == 1902212707 || a1 == 1902403958) {
          goto LABEL_34;
        }
        int v6 = 1902405681;
LABEL_29:
        if (a1 != v6) {
          goto LABEL_36;
        }
        goto LABEL_34;
      }
      if (a1 == 1902207795 || a1 == 1902211171) {
        goto LABEL_34;
      }
      unsigned __int16 v7 = 30257;
LABEL_20:
      int v6 = v7 | 0x71610000;
      goto LABEL_29;
    }
    if (a1 <= 1667790434)
    {
      if (a1 != 1667331683 && a1 != 1667524657) {
        goto LABEL_36;
      }
    }
    else if (a1 != 1667790435)
    {
      if (a1 == 1700886115) {
        goto LABEL_34;
      }
      unsigned __int16 v7 = 24931;
      goto LABEL_20;
    }
    CFIndex v5 = kFigCPEProtectorCryptorCreationOptionDecryptFormatType_MSE;
    goto LABEL_34;
  }
  if (a1 > 2053202274)
  {
    if (a1 > 2053207650)
    {
      if (a1 == 2053207651) {
        goto LABEL_34;
      }
      int v6 = 2053464883;
    }
    else
    {
      if ((a1 - 2053202739) <= 0x3D && ((1 << (a1 - 51)) & 0x2020000000000001) != 0) {
        goto LABEL_34;
      }
      int v6 = 2053202275;
    }
    goto LABEL_29;
  }
  if (a1 > 1902928226)
  {
    if (a1 == 1902928227 || a1 == 1902998904) {
      goto LABEL_34;
    }
    int v6 = 1903522657;
    goto LABEL_29;
  }
  if (a1 != 1902407032 && a1 != 1902537827)
  {
    int v6 = 1902671459;
    goto LABEL_29;
  }
LABEL_34:
  CFTypeRef v4 = *v5;
  if (*v5) {
    CFTypeRef v4 = CFRetain(v4);
  }
LABEL_36:
  *a2 = v4;
  return 0;
}

uint64_t PKDCopyDecryptFormatTypeFromFormatDescription(const opaqueCMFormatDescription *a1, void *a2)
{
  FourCharCode MediaSubType = CMFormatDescriptionGetMediaSubType(a1);
  PKDCopyDecryptFormatTypeFromCodecType(MediaSubType, a2);
  return 0;
}

__CFString *PKDLogPrivateData(uint64_t a1)
{
  if (!a1) {
    return @"[]";
  }
  uint64_t v1 = a1;
  if (!FigIsItOKToLogURLs()) {
    return @"[]";
  }
  return (__CFString *)v1;
}

uint64_t PKDIsContentKeyBossEnabled()
{
  return 1;
}

uint64_t FigPKDStartAirPlaySenderSession()
{
  return 4294954514;
}

uint64_t FigPKDStopAirPlaySenderSession()
{
  return 4294954514;
}

uint64_t FigPKDStartAirPlayReceiverSession()
{
  return 4294954514;
}

uint64_t FigPKDStopAirPlayReceiverSession()
{
  return 4294954514;
}

uint64_t PKDCopyIdentifierForFormatDescription(const opaqueCMFormatDescription *a1, char *a2, void *a3)
{
  CFTypeRef v25 = 0;
  CFTypeRef cf = 0;
  CFDictionaryRef Extension = (const __CFDictionary *)CMFormatDescriptionGetExtension(a1, (CFStringRef)*MEMORY[0x1E4F1EE20]);
  if (!Extension || (v7 = Extension, CFTypeID v8 = CFGetTypeID(Extension), v8 != CFDictionaryGetTypeID()))
  {
    CFMutableArrayRef Mutable = 0;
LABEL_46:
    char v19 = 1;
LABEL_19:
    signed int MediaSubType = CMFormatDescriptionGetMediaSubType(a1);
    char v18 = 0;
    if (MediaSubType <= 2053202738)
    {
      if (MediaSubType > 1902212706)
      {
        if (MediaSubType != 1902212707)
        {
          unsigned __int16 v21 = 24931;
          goto LABEL_29;
        }
      }
      else if (MediaSubType != 1667331683)
      {
        int v22 = 1700886115;
        goto LABEL_30;
      }
    }
    else if (((MediaSubType - 2053202739) > 0x3D {
            || ((1 << (MediaSubType - 51)) & 0x2020000000000001) == 0)
    }
           && MediaSubType != 2053464883)
    {
      unsigned __int16 v21 = 30307;
LABEL_29:
      int v22 = v21 | 0x7A610000;
LABEL_30:
      if (MediaSubType != v22) {
        goto LABEL_32;
      }
    }
    CFTypeRef v25 = CFRetain(@"TransportStreamIdentifier");
    char v18 = 1;
    goto LABEL_32;
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (!Mutable)
  {
    FigSignalErrorAt();
    goto LABEL_46;
  }
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(v7, @"sinf");
  if (Value)
  {
    CFArrayRef v11 = Value;
    CFTypeID v12 = CFGetTypeID(Value);
    if (v12 == CFArrayGetTypeID())
    {
      if (CFArrayGetCount(v11) >= 1)
      {
        CFIndex v13 = 0;
        do
        {
          CFDataRef ValueAtIndex = CFArrayGetValueAtIndex(v11, v13);
          CFTypeID v15 = CFGetTypeID(ValueAtIndex);
          if (v15 == CFDataGetTypeID()) {
            CFArrayAppendValue(Mutable, ValueAtIndex);
          }
          ++v13;
        }
        while (v13 < CFArrayGetCount(v11));
      }
    }
    else
    {
      CFTypeID v16 = CFGetTypeID(v11);
      if (v16 == CFDataGetTypeID()) {
        CFArrayAppendValue(Mutable, v11);
      }
    }
  }
  if (CFArrayGetCount(Mutable) < 1)
  {
    char v19 = 0;
    goto LABEL_19;
  }
  uint64_t Base64EncodedStringFromCFData = PKDCopyDefaultKeyIDFromSinfArray(Mutable, (CFDataRef *)&cf);
  if (Base64EncodedStringFromCFData
    || (char v18 = 1,
        uint64_t Base64EncodedStringFromCFData = FigCreateBase64EncodedStringFromCFData(),
        Base64EncodedStringFromCFData))
  {
    uint64_t v23 = Base64EncodedStringFromCFData;
LABEL_37:
    CFRelease(Mutable);
    goto LABEL_38;
  }
  char v19 = 0;
LABEL_32:
  if (a2) {
    *a2 = v18;
  }
  uint64_t v23 = 0;
  if (a3)
  {
    *a3 = v25;
    CFTypeRef v25 = 0;
  }
  if ((v19 & 1) == 0) {
    goto LABEL_37;
  }
LABEL_38:
  if (cf) {
    CFRelease(cf);
  }
  if (v25) {
    CFRelease(v25);
  }
  return v23;
}

__CFString *PKDGetIdentifierForTransportStream()
{
  return @"TransportStreamIdentifier";
}

CFStringRef PKDCreateTransportStreamEncryptionInitData(uint64_t a1, uint64_t a2)
{
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFStringRef result = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"{\n  \"codc\" : %u,\n  \"mtyp\" : %u,\n  \"cont\" : \"mpts\"\n}", a2, a1);
  if (result)
  {
    CFStringRef v4 = result;
    CFDataRef ExternalRepresentation = CFStringCreateExternalRepresentation(v2, result, 0x600u, 0x20u);
    CFRelease(v4);
    return (const __CFString *)ExternalRepresentation;
  }
  return result;
}

uint64_t PKDDisposeStorageAllocatorAllocateCallback()
{
  return 0;
}

void FinalizeGuts(uint64_t a1)
{
  if (*(void *)(a1 + 40)) {
    (*(void (**)(void))(a1 + 24))();
  }
  CFAllocatorRef v2 = *(const void **)(a1 + 48);
  if (v2)
  {
    CFRelease(v2);
  }
}

uint64_t FigNeroidLayerViewCreate(uint64_t a1, void *a2)
{
  FigLayerViewGetClassID();
  uint64_t v3 = CMDerivedObjectCreate();
  if (!v3)
  {
    uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
    *uint64_t DerivedStorage = CAImageQueueCreate();
    CAImageQueueSetFlags();
    *a2 = 0;
  }
  return v3;
}

void flv_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(void *)uint64_t DerivedStorage = 0;
  }
  uint64_t v1 = *(const void **)(DerivedStorage + 8);
  if (v1)
  {
    CFRelease(v1);
    *(void *)(DerivedStorage + 8) = 0;
  }
}

__CFString *flv_CopyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<FigLayerView %p %@>", a1, *DerivedStorage);
  return Mutable;
}

uint64_t flv_CopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, __CFDictionary **a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, @"PixelBufferAttributes"))
  {
    CFMutableArrayRef Mutable = CFDictionaryCreateMutable(a3, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFMutableArrayRef v9 = CFArrayCreateMutable(a3, 0, MEMORY[0x1E4F1D510]);
    CFMutableArrayRef v10 = v9;
    if (Mutable) {
      BOOL v11 = v9 == 0;
    }
    else {
      BOOL v11 = 1;
    }
    if (v11)
    {
      if (!v9) {
        goto LABEL_14;
      }
    }
    else
    {
      FigCFArrayAppendInt32();
      FigCFArrayAppendInt32();
      CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F24D70], v10);
    }
    CFRelease(v10);
LABEL_14:
    uint64_t result = 0;
    *a4 = Mutable;
    return result;
  }
  if (CFEqual(a2, @"DisplayInfo"))
  {
    CFTypeID v12 = *(const void **)(DerivedStorage + 8);
    if (!v12)
    {
      CFMutableArrayRef Mutable = 0;
      goto LABEL_14;
    }
LABEL_13:
    CFMutableArrayRef Mutable = (__CFDictionary *)CFRetain(v12);
    goto LABEL_14;
  }
  if (CFEqual(a2, @"ImageQueue"))
  {
    CFTypeID v12 = *(const void **)DerivedStorage;
    goto LABEL_13;
  }
  return 4294954512;
}

uint64_t flv_SetProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!CFEqual(a2, @"DisplayInfo")) {
    return 4294954512;
  }
  int v6 = *(const void **)(DerivedStorage + 8);
  *(void *)(DerivedStorage + 8) = a3;
  if (a3) {
    CFRetain(a3);
  }
  if (v6) {
    CFRelease(v6);
  }
  return 0;
}

uint64_t RegisterFigFramePrefetcherType()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sFigFramePrefetcherID = result;
  return result;
}

uint64_t FigFramePrefetcherActivate(uint64_t a1)
{
  if (sInitActiveGlobalsOnce != -1) {
    dispatch_once_f(&sInitActiveGlobalsOnce, 0, (dispatch_function_t)InitActiveGlobals);
  }
  MEMORY[0x19970E290](sActivePrefetcherLock);
  if (sActivePrefetcher == a1)
  {
    uint64_t started = 0;
  }
  else
  {
    ffp_DeactivateActivePrefetcher();
    sActivePrefetcher = a1;
    FigRetainProxyLockMutex();
    if (FigRetainProxyIsInvalidated())
    {
      uint64_t started = 0;
    }
    else
    {
      *(unsigned char *)(a1 + 80) = 1;
      *(unsigned char *)(a1 + 82) = FigHTTPRequestPerformingMandatoryActivity();
      *(void *)(a1 + 96) = 0;
      *(void *)(a1 + 152) = 0;
      *(void *)(a1 + 160) = 0;
      uint64_t v3 = *(void *)(a1 + 32);
      if (v3) {
        FigStreamingCacheSetProperty(v3, @"FSC_IsDonor", (const void *)*MEMORY[0x1E4F1CFC8]);
      }
      if (*(void *)(a1 + 40) && *(void *)(a1 + 48) && (*(unsigned char *)(a1 + 68) & 1) != 0) {
        uint64_t started = ffp_StartRun(a1, 0);
      }
      else {
        uint64_t started = 0;
      }
      *(unsigned char *)(a1 + 81) = started == 0;
    }
    FigRetainProxyUnlockMutex();
    if (dword_1E93517C8)
    {
      os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  MEMORY[0x19970E2B0](sActivePrefetcherLock);
  return started;
}

uint64_t InitActiveGlobals()
{
  uint64_t result = FigReentrantMutexCreate();
  sActivePrefetcherLocuint64_t k = result;
  return result;
}

void ffp_DeactivateActivePrefetcher()
{
  uint64_t v0 = sActivePrefetcher;
  if (sActivePrefetcher)
  {
    sActivePrefetcher = 0;
    FigRetainProxyLockMutex();
    *(unsigned char *)(v0 + 80) = 0;
    uint64_t v1 = *(void *)(v0 + 32);
    if (v1) {
      FigStreamingCacheSetProperty(v1, @"FSC_IsDonor", (const void *)*MEMORY[0x1E4F1CFD0]);
    }
    FigRetainProxyUnlockMutex();
    if (dword_1E93517C8)
    {
      os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
}

uint64_t ffp_StartRun(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (a2 > 3)
  {
    ffp_Halt(a1, 0);
    return 0;
  }
  else
  {
    *(void *)(a1 + 88) = a2;
    CMTimeMakeWithSeconds(&time, kFFPRunIntervals[a2], 2);
    *(CMTime *)(a1 + 128) = time;
    uint64_t v3 = MEMORY[0x1E4F1FA48];
    *(_OWORD *)(a1 + 104) = *MEMORY[0x1E4F1FA48];
    *(void *)(a1 + 120) = *(void *)(v3 + 16);
    if (dword_1E93517C8)
    {
      os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    return ffp_TakeNextStep(a1);
  }
}

uint64_t FigFramePrefetcherDeactivate(uint64_t a1)
{
  if (sInitActiveGlobalsOnce != -1) {
    dispatch_once_f(&sInitActiveGlobalsOnce, 0, (dispatch_function_t)InitActiveGlobals);
  }
  MEMORY[0x19970E290](sActivePrefetcherLock);
  if (sActivePrefetcher == a1)
  {
    ffp_DeactivateActivePrefetcher();
    if (dword_1E93517C8)
    {
      os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  MEMORY[0x19970E2B0](sActivePrefetcherLock);
  return 0;
}

uint64_t FigFramePrefetcherCreate(uint64_t a1, uint64_t a2, const void *a3, const void *a4, void *a5)
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a5 || !a3 || !a2 || !a4) {
    goto LABEL_26;
  }
  if (sRegisterFigFramePrefetcherTypeOnce != -1) {
    dispatch_once_f(&sRegisterFigFramePrefetcherTypeOnce, 0, (dispatch_function_t)RegisterFigFramePrefetcherType);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    CFMutableArrayRef v10 = (void *)Instance;
    BOOL v11 = (uint64_t *)(Instance + 16);
    uint64_t v12 = FigRetainProxyCreate();
    if (v12)
    {
      uint64_t v22 = v12;
      CFRelease(v10);
    }
    else
    {
      v10[3] = CFRetain(a4);
      v10[4] = CFRetain(a3);
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
      CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFDictionarySetValue(Mutable, @"PlayerType", @"scrub");
      if (!FigReportingAgentCreateFromAsset(a2, 1, Mutable, v10 + 21))
      {
        uint64_t v14 = v10[21];
        if (v14)
        {
          uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
          uint64_t v16 = v15 ? v15 : 0;
          CFTypeRef v17 = *(void (**)(uint64_t, void))(v16 + 104);
          if (v17) {
            v17(v14, 0);
          }
        }
      }
      if (Mutable) {
        CFRelease(Mutable);
      }
      FigRetainProxyRetain();
      uint64_t v18 = *v11;
      uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v19) {
        uint64_t v20 = v19;
      }
      else {
        uint64_t v20 = 0;
      }
      unsigned __int16 v21 = *(uint64_t (**)(uint64_t, void, uint64_t))(v20 + 72);
      if (v21) {
        uint64_t v22 = v21(a2, ffp_PumpTransferCallback, v18);
      }
      else {
        uint64_t v22 = 4294954514;
      }
      *a5 = v10;
    }
    return v22;
  }
  else
  {
LABEL_26:
    return FigSignalErrorAt();
  }
}

uint64_t ffp_NoteMandatoryActivityLevelChange(int a1, CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  dispatch_get_global_queue(0, 0);

  return FigDeferNotificationToDispatchQueue();
}

uint64_t ffp_PumpTransferCallback(int a1, const void *a2, CFErrorRef err)
{
  cf[22] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  if (err) {
    int Code = CFErrorGetCode(err);
  }
  else {
    int Code = 0;
  }
  FigRetainProxyLockMutex();
  if (FigRetainProxyIsInvalidated()) {
    goto LABEL_74;
  }
  Owner = (void *)FigRetainProxyGetOwner();
  cf[0] = 0;
  uint64_t GlobalNetworkBufferingLowPriorityQueue = FigThreadGetGlobalNetworkBufferingLowPriorityQueue();
  if (Code) {
    BOOL v7 = 0;
  }
  else {
    BOOL v7 = a2 == 0;
  }
  if (v7) {
    int Code = -19310;
  }
  if (Code) {
    goto LABEL_73;
  }
  uint64_t v8 = GlobalNetworkBufferingLowPriorityQueue;
  Owner[5] = FigBytePumpRetain(a2);
  if (dword_1E93517C8)
  {
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v10 = Owner[21];
  if (v10)
  {
    uint64_t FigBaseObject = FigBytePumpGetFigBaseObject(Owner[5]);
    uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v13 = v12 ? v12 : 0;
    uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 56);
    if (v14) {
      v14(FigBaseObject, 0x1EE53E918, v10);
    }
  }
  uint64_t v15 = Owner[5];
  uint64_t v16 = Owner[2];
  uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v18 = v17 ? v17 : 0;
  uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t (*)(int, int, OpaqueCMBlockBuffer *, char, int, int, int, long long *, uint64_t, uint64_t, uint64_t, CFErrorRef), uint64_t (*)(), uint64_t))(v18 + 88);
  int Code = v19 ? v19(v15, ffp_BytePumpFn, ffp_DateMappingCallback, v16) : -12782;
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterAddListener();
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterAddListener();
  if (Code) {
    goto LABEL_73;
  }
  uint64_t v20 = Owner[4];
  uint64_t v21 = FigBytePumpGetFigBaseObject(Owner[5]);
  uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v22) {
    uint64_t v23 = v22;
  }
  else {
    uint64_t v23 = 0;
  }
  CFTypeID v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 56);
  if (!v24) {
    goto LABEL_72;
  }
  int Code = v24(v21, 0x1EE53E498, v20);
  if (Code) {
    goto LABEL_73;
  }
  uint64_t v25 = FigBytePumpGetFigBaseObject(Owner[5]);
  uint64_t v26 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v26) {
    uint64_t v27 = v26;
  }
  else {
    uint64_t v27 = 0;
  }
  uint64_t v28 = *(uint64_t (**)(uint64_t, uint64_t, void))(v27 + 56);
  if (!v28) {
    goto LABEL_72;
  }
  uint64_t v29 = *MEMORY[0x1E4F1CFD0];
  int Code = v28(v25, 0x1EE53E4D8, *MEMORY[0x1E4F1CFD0]);
  if (Code) {
    goto LABEL_73;
  }
  uint64_t v30 = FigBytePumpGetFigBaseObject(Owner[5]);
  uint64_t v31 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v31) {
    uint64_t v32 = v31;
  }
  else {
    uint64_t v32 = 0;
  }
  uint64_t v33 = *(uint64_t (**)(uint64_t, uint64_t, void))(v32 + 56);
  if (!v33) {
    goto LABEL_72;
  }
  uint64_t v34 = *MEMORY[0x1E4F1CFC8];
  int Code = v33(v30, 0x1EE53E4F8, *MEMORY[0x1E4F1CFC8]);
  if (Code) {
    goto LABEL_73;
  }
  uint64_t v35 = FigBytePumpGetFigBaseObject(Owner[5]);
  uint64_t v36 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v36) {
    uint64_t v37 = v36;
  }
  else {
    uint64_t v37 = 0;
  }
  int v38 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v37 + 56);
  if (!v38) {
    goto LABEL_72;
  }
  int Code = v38(v35, 0x1EE53E538, v29);
  if (Code) {
    goto LABEL_73;
  }
  uint64_t v39 = FigBytePumpGetFigBaseObject(Owner[5]);
  uint64_t v40 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v40) {
    uint64_t v41 = v40;
  }
  else {
    uint64_t v41 = 0;
  }
  uint64_t v42 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v41 + 56);
  if (!v42) {
    goto LABEL_72;
  }
  int Code = v42(v39, 0x1EE53E558, v34);
  if (Code) {
    goto LABEL_73;
  }
  uint64_t v43 = FigBytePumpGetFigBaseObject(Owner[5]);
  uint64_t v44 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v44) {
    uint64_t v45 = v44;
  }
  else {
    uint64_t v45 = 0;
  }
  uint64_t v46 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v45 + 56);
  if (!v46) {
    goto LABEL_72;
  }
  int Code = v46(v43, 0x1EE53E578, v8);
  if (Code)
  {
LABEL_73:
    ffp_Halt((uint64_t)Owner, Code);
    goto LABEL_74;
  }
  uint64_t v47 = FigBytePumpGetFigBaseObject(Owner[5]);
  uint64_t v48 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v48) {
    uint64_t v49 = v48;
  }
  else {
    uint64_t v49 = 0;
  }
  uint64_t v50 = *(uint64_t (**)(uint64_t, uint64_t, __CFString *))(v49 + 56);
  if (!v50)
  {
LABEL_72:
    int Code = -12782;
    goto LABEL_73;
  }
  int Code = v50(v47, 0x1EE53EA38, @"SFPrefetcher");
  if (Code) {
    goto LABEL_73;
  }
  uint64_t v51 = FigBytePumpGetFigBaseObject(Owner[5]);
  uint64_t v52 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v52) {
    uint64_t v53 = v52;
  }
  else {
    uint64_t v53 = 0;
  }
  uint64_t v54 = *(unsigned int (**)(uint64_t, uint64_t, void, CFTypeRef *))(v53 + 48);
  if (!v54 || v54(v51, 0x1EE53E2B8, *MEMORY[0x1E4F1CF80], cf))
  {
    uint64_t v55 = Owner[5];
    uint64_t v56 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v56) {
      uint64_t v57 = v56;
    }
    else {
      uint64_t v57 = 0;
    }
    uint64_t v58 = *(uint64_t (**)(uint64_t))(v57 + 64);
    if (v58)
    {
      int Code = v58(v55);
      if (!Code) {
        goto LABEL_74;
      }
      goto LABEL_73;
    }
    goto LABEL_72;
  }
  if (Owner[3]) {
    ffp_AlternateListChanged((uint64_t)Owner, (CFDictionaryRef)cf[0]);
  }
  CFRelease(cf[0]);
LABEL_74:
  FigRetainProxyUnlockMutex();
  return FigRetainProxyRelease();
}

double figFramePrefetcherInit(_OWORD *a1)
{
  double result = 0.0;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  return result;
}

void figFramePrefetcherFinalize(void *a1)
{
  if (dword_1E93517C8)
  {
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x19970E290](sActivePrefetcherLock);
  if ((void *)sActivePrefetcher == a1) {
    ffp_DeactivateActivePrefetcher();
  }
  MEMORY[0x19970E2B0](sActivePrefetcherLock);
  FigRetainProxyLockMutex();
  if (a1[5])
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
  }
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  FigRetainProxyInvalidate();
  uint64_t v3 = (const void *)a1[6];
  if (v3)
  {
    CFRelease(v3);
    a1[6] = 0;
  }
  CFStringRef v4 = (const void *)a1[3];
  if (v4)
  {
    CFRelease(v4);
    a1[3] = 0;
  }
  CFIndex v5 = (const void *)a1[4];
  if (v5)
  {
    CFRelease(v5);
    a1[4] = 0;
  }
  uint64_t v6 = a1[5];
  if (v6)
  {
    FigBytePumpGetFigBaseObject(v6);
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v9) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
    BOOL v11 = *(void (**)(uint64_t, uint64_t, void))(v10 + 56);
    if (v11) {
      v11(v8, 0x1EE53E498, 0);
    }
    uint64_t v12 = (const void *)a1[5];
    if (v12)
    {
      CFRelease(v12);
      a1[5] = 0;
    }
  }
  uint64_t v13 = (const void *)a1[21];
  if (v13) {
    CFRelease(v13);
  }
  a1[21] = 0;
  FigRetainProxyUnlockMutex();
  uint64_t v14 = (const void *)a1[2];
  if (v14)
  {
    CFRelease(v14);
    a1[2] = 0;
  }
}

CFStringRef figFramePrefetcherCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigFramePrefetcher %p]", a1);
}

CFStringRef figFramePrefetcherCopyDebugDesc(void *a1)
{
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFIndex v3 = CFGetRetainCount(a1);
  return CFStringCreateWithFormat(v2, 0, @"[FigFramePrefetcher %p (%d) pump %p]", a1, v3, a1[5]);
}

uint64_t ffp_NoteAlternateListChanged()
{
  FigRetainProxyLockMutex();
  if (!FigRetainProxyIsInvalidated())
  {
    uint64_t Owner = FigRetainProxyGetOwner();
    CFTypeRef cf = 0;
    uint64_t FigBaseObject = FigBytePumpGetFigBaseObject(*(void *)(Owner + 40));
    uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v2) {
      uint64_t v3 = v2;
    }
    else {
      uint64_t v3 = 0;
    }
    CFStringRef v4 = *(unsigned int (**)(uint64_t, uint64_t, void, CFTypeRef *))(v3 + 48);
    if (v4 && !v4(FigBaseObject, 0x1EE53E2B8, *MEMORY[0x1E4F1CF80], &cf) && *(void *)(Owner + 24)) {
      ffp_AlternateListChanged(Owner, (CFDictionaryRef)cf);
    }
    if (cf) {
      CFRelease(cf);
    }
  }
  return FigRetainProxyUnlockMutex();
}

uint64_t ffp_NoteDurationChanged()
{
  FigRetainProxyLockMutex();
  if (!FigRetainProxyIsInvalidated())
  {
    uint64_t Owner = FigRetainProxyGetOwner();
    ffp_EstablishDuration(Owner);
  }

  return FigRetainProxyUnlockMutex();
}

void ffp_AlternateListChanged(uint64_t a1, CFDictionaryRef theDict)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (!*(void *)(a1 + 48))
  {
    if (dword_1E93517C8)
    {
      int v22 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v6 = *(const void **)(a1 + 24);
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v10 = *(uint64_t (**)(uint64_t, const void *, void, void, void, uint64_t, CMTimeRange *, CMTime *, void, int *, void, void))(v9 + 32);
    if (v10)
    {
      int v22 = 0;
      *(_OWORD *)&start[0].start.CFTypeRef value = *MEMORY[0x1E4F1FA48];
      start[0].start.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1FA48] + 16);
      CMTimeEpoch epoch = start[0].start.epoch;
      long long v19 = *(_OWORD *)&start[0].start.value;
      CMTime duration = start[0].start;
      int v12 = v10(v7, v6, 0, 0, 0, 1, start, &duration, 0, &v22, 0, 0);
      if (v12)
      {
        int v18 = v12;
        goto LABEL_25;
      }
      uint64_t v13 = *(const void **)(a1 + 48);
      *(void *)(a1 + 48) = v6;
      if (v6) {
        CFRetain(v6);
      }
      if (v13) {
        CFRelease(v13);
      }
      uint64_t v14 = *(void *)(a1 + 40);
      *(_OWORD *)&start[0].start.CFTypeRef value = v19;
      start[0].start.CMTimeEpoch epoch = epoch;
      CMTime duration = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
      CMTimeRangeMake(&v20, &start[0].start, &duration);
      uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v15) {
        uint64_t v16 = v15;
      }
      else {
        uint64_t v16 = 0;
      }
      uint64_t v17 = *(uint64_t (**)(uint64_t, CMTimeRange *, void, void, void, CMTime *, void))(v16 + 72);
      if (v17)
      {
        start[0] = v20;
        int v18 = v17(v14, start, 0, 0, 0, &duration, 0);
        ffp_EstablishDuration(a1);
        if (!v18) {
          return;
        }
        goto LABEL_26;
      }
    }
    int v18 = -12782;
LABEL_25:
    ffp_EstablishDuration(a1);
LABEL_26:
    ffp_Halt(a1, v18);
    return;
  }
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(theDict, @"FBPAIK_FigAlternateArray");
  if (Value)
  {
    CFArrayRef v4 = Value;
    v27.length = CFArrayGetCount(Value);
    v27.location = 0;
    if (!CFArrayContainsValue(v4, v27, *(const void **)(a1 + 48)))
    {
      ffp_Halt(a1, -19312);
    }
  }
}

void ffp_EstablishDuration(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 68) & 1) == 0)
  {
    uint64_t FigBaseObject = FigBytePumpGetFigBaseObject(*(void *)(a1 + 40));
    uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v4 = v3 ? v3 : 0;
    CFIndex v5 = *(unsigned int (**)(uint64_t, __CFString *, uint64_t, CFDictionaryRef *))(v4 + 48);
    if (v5)
    {
      uint64_t v6 = *MEMORY[0x1E4F1CF80];
      CFDictionaryRef dictionaryRepresentation = 0;
      if (!v5(FigBaseObject, @"FBP_Duration", v6, &dictionaryRepresentation))
      {
        CMTimeMakeFromDictionary(&v8, dictionaryRepresentation);
        *(CMTime *)(a1 + 56) = v8;
        if (*(unsigned char *)(a1 + 81))
        {
          int started = ffp_StartRun(a1, 0);
          if (started) {
            ffp_Halt(a1, started);
          }
        }
        CFRelease(dictionaryRepresentation);
      }
    }
  }
}

void ffp_Halt(uint64_t a1, int a2)
{
  if (a2
    && (CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80],
        (CFErrorRef v4 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (CFErrorDomain)*MEMORY[0x1E4F1D158], a2, 0)) != 0))
  {
    CFErrorRef v5 = v4;
    CFMutableArrayRef Mutable = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    uint64_t v7 = Mutable;
    if (Mutable) {
      CFDictionaryAddValue(Mutable, @"FFP_Finished_Err", v5);
    }
    CFRelease(v5);
  }
  else
  {
    uint64_t v7 = 0;
  }
  if (dword_1E93517C8)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  *(unsigned char *)(a1 + 81) = 0;
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  if (v7) {
    CFRelease(v7);
  }
}

uint64_t ffp_TakeNextStep(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  memset(&v19, 0, sizeof(v19));
  CMTimeMake(&rhs, 10, 1000);
  CMTime lhs = *(CMTime *)(a1 + 104);
  CMTimeAdd(&v19, &lhs, &rhs);
  memset(&v17, 0, sizeof(v17));
  CMTime lhs = *(CMTime *)(a1 + 104);
  CMTime v20 = *(CMTime *)(a1 + 128);
  CMTimeAdd(&v17, &lhs, &v20);
  int v16 = 0;
  uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  if (*(unsigned char *)(a1 + 80) && !*(unsigned char *)(a1 + 82) && (uint64_t v4 = *(void *)(a1 + 40)) != 0)
  {
    uint64_t v5 = UpTimeNanoseconds;
    double v6 = kFFPRunIntervals[*(void *)(a1 + 88)];
    CMTime v15 = v19;
    CMTime type = v17;
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    BOOL v11 = *(uint64_t (**)(uint64_t, CMTime *, uint64_t, CMTime *, uint64_t, int *, float))(v8 + 80);
    if (!v11)
    {
      uint64_t v9 = 4294954514;
      goto LABEL_16;
    }
    float v12 = v6;
    CMTime lhs = v15;
    CMTime v20 = type;
    uint64_t v13 = v11(v4, &lhs, v5 + 10000000, &v20, 1, &v16, v12);
    uint64_t v9 = v13;
    if (v13 != -12648)
    {
      if (!v13)
      {
        *(CMTime *)(a1 + 104) = v17;
        *(unsigned char *)(a1 + 83) = 0;
        ++*(void *)(a1 + 96);
        return v9;
      }
LABEL_16:
      ffp_Halt(a1, v9);
    }
  }
  else
  {
    if (dword_1E93517C8)
    {
      os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    return 0;
  }
  return v9;
}

uint64_t ffp_DeferredNoteMandatoryActivityLevelChange()
{
  FigRetainProxyLockMutex();
  if (!FigRetainProxyIsInvalidated())
  {
    uint64_t Owner = FigRetainProxyGetOwner();
    int v1 = FigHTTPRequestPerformingMandatoryActivity();
    if (v1 != *(unsigned __int8 *)(Owner + 82))
    {
      int v2 = v1;
      *(unsigned char *)(Owner + 82) = v1;
      if (dword_1E93517C8)
      {
        os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        int v2 = *(unsigned __int8 *)(Owner + 82);
      }
      if (!v2 && *(unsigned char *)(Owner + 81)) {
        ffp_TakeNextStep(Owner);
      }
    }
  }
  FigRetainProxyUnlockMutex();
  return FigRetainProxyRelease();
}

uint64_t ffp_BytePumpFn(int a1, int a2, OpaqueCMBlockBuffer *a3, char a4, int a5, int a6, int a7, long long *a8, uint64_t a9, uint64_t a10, uint64_t a11, CFErrorRef err)
{
  if (err) {
    int Code = CFErrorGetCode(err);
  }
  else {
    int Code = 0;
  }
  FigRetainProxyLockMutex();
  if (!FigRetainProxyIsInvalidated())
  {
    uint64_t Owner = FigRetainProxyGetOwner();
    int v18 = (void *)Owner;
    if (Code == -12648)
    {
      ffp_StartRun(Owner, *(void *)(Owner + 88) + 1);
    }
    else if (Code)
    {
      ffp_Halt(Owner, Code);
    }
    else
    {
      if (a4 & 0x10) != 0 && (*((unsigned char *)a8 + 12))
      {
        long long v19 = *a8;
        *(void *)(Owner + 120) = *((void *)a8 + 2);
        *(_OWORD *)(Owner + 104) = v19;
        *(unsigned char *)(Owner + 83) = 1;
      }
      if ((a4 & 0x20) != 0 && *(unsigned char *)(Owner + 83))
      {
        if (*(void *)(Owner + 88) == 3) {
          ++*(void *)(Owner + 160);
        }
        if (ffp_TakeNextStep(Owner) == -12648) {
          ffp_StartRun((uint64_t)v18, v18[11] + 1);
        }
      }
      if (a3)
      {
        if (v18[11] == 3)
        {
          size_t v20 = v18[19] + CMBlockBufferGetDataLength(a3);
          v18[19] = v20;
          uint64_t v21 = v18[21];
          if (v21)
          {
            uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 16);
            uint64_t v23 = v22 ? v22 : 0;
            CFTypeID v24 = *(void (**)(uint64_t, uint64_t, uint64_t, size_t))(v23 + 40);
            if (v24) {
              v24(v21, 0x1EE582BD8, 0x1EE583CD8, v20 >> 10);
            }
          }
        }
      }
    }
  }

  return FigRetainProxyUnlockMutex();
}

CFStringRef FigTTMLCGColorCopyAsTTMLColorSyntax(CGColor *a1)
{
  ColorSpace = CGColorGetColorSpace(a1);
  if (CGColorSpaceGetModel(ColorSpace) == kCGColorSpaceModelRGB && CGColorGetNumberOfComponents(a1) == 4)
  {
    Components = CGColorGetComponents(a1);
    *(CGFloat *)v4.i64 = *Components;
    v4.f32[0] = *Components;
    float v5 = Components[1];
    float v6 = Components[2];
    float v7 = Components[3];
    return FigTTMLCopyRGBAColorAsColorSyntax(v4, v5, v6, v7);
  }
  else
  {
    FigSignalErrorAt();
    return 0;
  }
}

CFStringRef FigTTMLCMTimeCopyAsClockTimeSyntax(CMTime *a1, int32_t a2, CMTime *a3)
{
  memset(&v25, 0, sizeof(v25));
  CMTime time = *a3;
  CMTimeMultiply(&v25, &time, a2);
  CMTime time = *a1;
  CMTimeMultiplyByRatio(&v23, &time, v25.value, v25.timescale);
  uint64_t v5 = 0;
  uint64_t Seconds = (uint64_t)CMTimeGetSeconds(&v23);
  uint64_t v7 = a2;
  uint64_t v8 = 60 * a2;
  char v9 = 1;
  do
  {
    char v10 = v9;
    uint64_t v11 = (v5 + Seconds) / v8;
    if (FigCFEqual())
    {
      uint64_t v5 = 2 * (v11 / -10 + (v5 + Seconds) / v8);
    }
    else if (FigCFEqual())
    {
      if (v11 >= 0) {
        unint64_t v12 = (v5 + Seconds) / v8;
      }
      else {
        unint64_t v12 = v11 + 1;
      }
      uint64_t v5 = 4 * (v11 / -20 + (v12 >> 1));
    }
    char v9 = 0;
  }
  while ((v10 & 1) != 0);
  uint64_t v13 = 3600 * a2;
  uint64_t v14 = (v5 + Seconds) / v13;
  uint64_t v15 = v5 + Seconds - (int)v14 * v13;
  uint64_t v16 = v15 / v8;
  uint64_t v17 = v15 - (int)(v15 / v8) * v8;
  uint64_t v18 = v17 / v7;
  uint64_t v19 = v17 % v7;
  int v20 = FigCFEqual();
  CFAllocatorRef v21 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (v20) {
    return CFStringCreateWithFormat(v21, 0, @"%02d:%02d:%02d:%02d", v14, v16, v18, v19);
  }
  else {
    return CFStringCreateWithFormat(v21, 0, @"%02d:%02d:%02d;%02d", v14, v16, v18, v19);
  }
}

__CFString *FigTTMLCMTimeCopyAsOffsetTimeSyntax(CMTime *a1)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CMTime time = *a1;
  double Seconds = CMTimeGetSeconds(&time);
  CFStringAppendFormat(Mutable, 0, @"%lld", (uint64_t)Seconds);
  double v4 = vabdd_f64(Seconds, (double)(uint64_t)Seconds) * 100.0 + 0.5;
  if (v4) {
    CFStringAppendFormat(Mutable, 0, @".%02u", v4);
  }
  CFStringAppend(Mutable, @"s");
  return Mutable;
}

uint64_t FigTTMLDocumentWriterMapPropertyToAttribute_Identifier(const void *a1, __CFDictionary *a2)
{
  if (a1 && (CFTypeID v4 = CFGetTypeID(a1), v4 == CFStringGetTypeID()))
  {
    CFDictionarySetValue(a2, @"http://www.w3.org/XML/1998/namespace id", a1);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigTTMLDocumentWriterMapPropertyToAttribute_Position(const void *a1)
{
  if (a1 && (CFTypeID v1 = CFGetTypeID(a1), v1 == CFDictionaryGetTypeID()))
  {
    FigGeometryPointMakeFromDictionary();
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  return FigSignalErrorAt();
}

void figTTMLStringifyFigGeometryDimensionAndAppend(CFMutableStringRef theString, uint64_t a2, int a3)
{
  if (vabdd_f64(*(double *)&a2, (double)(uint64_t)*(double *)&a2) <= 0.001) {
    CFStringAppendFormat(theString, 0, @"%lld", (uint64_t)*(double *)&a2);
  }
  else {
    CFStringAppendFormat(theString, 0, @"%f", a2);
  }
  if (a3 > 1701650463)
  {
    if (a3 == 1701650464)
    {
      CFStringRef v5 = @"em";
    }
    else
    {
      if (a3 != 1886920736) {
        return;
      }
      CFStringRef v5 = @"px";
    }
  }
  else if (a3 == 622862368)
  {
    CFStringRef v5 = @"%";
  }
  else
  {
    if (a3 != 1667591276) {
      return;
    }
    CFStringRef v5 = @"c";
  }

  CFStringAppend(theString, v5);
}

uint64_t FigTTMLDocumentWriterMapPropertyToAttribute_ClipOverflow(const void *a1, __CFDictionary *a2)
{
  if (a1 && (CFTypeID v3 = CFGetTypeID(a1), v3 == CFBooleanGetTypeID()))
  {
    if (FigCFEqual()) {
      CFTypeID v4 = kFigTTML_AttributeValue_tts_overflow_hidden;
    }
    else {
      CFTypeID v4 = kFigTTML_AttributeValue_tts_overflow_visible;
    }
    CFDictionarySetValue(a2, @"http://www.w3.org/ns/ttml#styling overflow", *v4);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigTTMLDocumentWriterMapPropertyToAttribute_ShowBackground(const void *a1, __CFDictionary *a2)
{
  if (a1)
  {
    CFTypeID v3 = CFGetTypeID(a1);
    if (v3 == CFStringGetTypeID())
    {
      if (FigCFEqual())
      {
        CFTypeID v4 = kFigTTML_AttributeValue_tts_showBackground_whenActive;
LABEL_7:
        CFDictionarySetValue(a2, @"http://www.w3.org/ns/ttml#styling showBackground", *v4);
        return 0;
      }
      if (FigCFEqual())
      {
        CFTypeID v4 = kFigTTML_AttributeValue_tts_showBackground_always;
        goto LABEL_7;
      }
    }
  }

  return FigSignalErrorAt();
}

uint64_t FigTTMLDocumentWriterMapPropertyToAttribute_Opacity(const __CFNumber *a1, __CFDictionary *a2)
{
  if (a1 && (CFTypeID v4 = CFGetTypeID(a1), v4 == CFNumberGetTypeID()))
  {
    uint64_t valuePtr = 0;
    CFNumberGetValue(a1, kCFNumberFloat64Type, &valuePtr);
    CFStringRef v5 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%3.1f", valuePtr);
    CFDictionarySetValue(a2, @"http://www.w3.org/ns/ttml#styling opacity", v5);
    if (v5) {
      CFRelease(v5);
    }
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigTTMLDocumentWriterMapPropertyToAttribute_ForcedDisplay(const void *a1, __CFDictionary *a2)
{
  if (a1 && (CFTypeID v3 = CFGetTypeID(a1), v3 == CFBooleanGetTypeID()))
  {
    if (FigCFEqual()) {
      CFTypeID v4 = @"true";
    }
    else {
      CFTypeID v4 = @"false";
    }
    CFDictionarySetValue(a2, @"http://www.w3.org/ns/ttml/profile/imsc1#styling forcedDisplay", v4);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigTTMLDocumentWriterMapPropertyToAttribute_BackgroundColor(CGColor *a1, __CFDictionary *a2)
{
  if (a1 && (CFTypeID v4 = CFGetTypeID(a1), v4 == CGColorGetTypeID()))
  {
    CFStringRef v5 = FigTTMLCGColorCopyAsTTMLColorSyntax(a1);
    CFDictionarySetValue(a2, @"http://www.w3.org/ns/ttml#styling backgroundColor", v5);
    if (v5) {
      CFRelease(v5);
    }
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigTTMLDocumentWriterMapPropertyToAttribute_WritingMode(const void *a1, __CFDictionary *a2)
{
  if (a1)
  {
    CFTypeID v3 = CFGetTypeID(a1);
    if (v3 == CFStringGetTypeID())
    {
      if (FigCFEqual())
      {
        CFTypeID v4 = kFigTTML_AttributeValue_tts_writingMode_LeftToRightAndTopToBottom;
LABEL_11:
        CFDictionarySetValue(a2, @"http://www.w3.org/ns/ttml#styling writingMode", *v4);
        return 0;
      }
      if (FigCFEqual())
      {
        CFTypeID v4 = kFigTTML_AttributeValue_tts_writingMode_RightToLeftAndTopToBottom;
        goto LABEL_11;
      }
      if (FigCFEqual())
      {
        CFTypeID v4 = kFigTTML_AttributeValue_tts_writingMode_TopToBottomAndRightToLeft;
        goto LABEL_11;
      }
      if (FigCFEqual())
      {
        CFTypeID v4 = kFigTTML_AttributeValue_tts_writingMode_TopToBottomAndLeftToRight;
        goto LABEL_11;
      }
    }
  }

  return FigSignalErrorAt();
}

uint64_t FigTTMLDocumentWriterMapPropertyToAttribute_DisplayAlign(const void *a1, __CFDictionary *a2)
{
  if (a1)
  {
    CFTypeID v3 = CFGetTypeID(a1);
    if (v3 == CFStringGetTypeID())
    {
      if (FigCFEqual())
      {
        CFTypeID v4 = kFigTTML_AttributeValue_tts_displayAlign_before;
LABEL_9:
        CFDictionarySetValue(a2, @"http://www.w3.org/ns/ttml#styling displayAlign", *v4);
        return 0;
      }
      if (FigCFEqual())
      {
        CFTypeID v4 = kFigTTML_AttributeValue_tts_displayAlign_center;
        goto LABEL_9;
      }
      if (FigCFEqual())
      {
        CFTypeID v4 = kFigTTML_AttributeValue_tts_displayAlign_after;
        goto LABEL_9;
      }
    }
  }

  return FigSignalErrorAt();
}

uint64_t FigTTMLDocumentWriterMapPropertyToAttribute_Hidden(const void *a1, __CFDictionary *a2)
{
  if (a1 && (CFTypeID v3 = CFGetTypeID(a1), v3 == CFBooleanGetTypeID()))
  {
    if (FigCFEqual()) {
      CFTypeID v4 = kFigTTML_AttributeValue_tts_display_none;
    }
    else {
      CFTypeID v4 = kFigTTML_AttributeValue_tts_display_auto;
    }
    CFDictionarySetValue(a2, @"http://www.w3.org/ns/ttml#styling display", *v4);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigTTMLDocumentWriterMapPropertyToAttribute_Invisible(const void *a1, __CFDictionary *a2)
{
  if (a1 && (CFTypeID v3 = CFGetTypeID(a1), v3 == CFBooleanGetTypeID()))
  {
    if (FigCFEqual()) {
      CFTypeID v4 = kFigTTML_AttributeValue_tts_visibility_hidden;
    }
    else {
      CFTypeID v4 = kFigTTML_AttributeValue_tts_visibility_visible;
    }
    CFDictionarySetValue(a2, @"http://www.w3.org/ns/ttml#styling visibility", *v4);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigTTMLDocumentWriterMapPropertyToAttribute_Padding(const void *a1, __CFDictionary *a2)
{
  if (!a1) {
    goto LABEL_10;
  }
  CFTypeID v4 = CFGetTypeID(a1);
  if (v4 != CFDictionaryGetTypeID()) {
    goto LABEL_10;
  }
  CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x1E4F1FF90]);
  uint64_t v5 = FigGeometryDimensionMakeFromDictionary();
  uint64_t v7 = v6;
  CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x1E4F1FF98]);
  uint64_t v8 = FigGeometryDimensionMakeFromDictionary();
  uint64_t v10 = v9;
  CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x1E4F1FF88]);
  uint64_t v11 = FigGeometryDimensionMakeFromDictionary();
  uint64_t v13 = v12;
  CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x1E4F1FFA0]);
  uint64_t v14 = FigGeometryDimensionMakeFromDictionary();
  if ((v7 & 0x100000000) == 0) {
    goto LABEL_10;
  }
  if ((v10 & 0x100000000) != 0 && (v13 & 0x100000000) != 0 && (int v16 = v15, (v15 & 0x100000000) != 0))
  {
    uint64_t v17 = v14;
    CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
    figTTMLStringifyFigGeometryDimensionAndAppend(Mutable, v5, v7);
    CFStringAppend(Mutable, @" ");
    figTTMLStringifyFigGeometryDimensionAndAppend(Mutable, v8, v10);
    CFStringAppend(Mutable, @" ");
    figTTMLStringifyFigGeometryDimensionAndAppend(Mutable, v11, v13);
    CFStringAppend(Mutable, @" ");
    figTTMLStringifyFigGeometryDimensionAndAppend(Mutable, v17, v16);
    CFDictionarySetValue(a2, @"http://www.w3.org/ns/ttml#styling padding", Mutable);
    if (Mutable) {
      CFRelease(Mutable);
    }
    return 0;
  }
  else
  {
LABEL_10:
    return FigSignalErrorAt();
  }
}

uint64_t FigTTMLDocumentWriterMapPropertyToAttribute_ZIndex(const __CFNumber *a1, __CFDictionary *a2)
{
  if (a1 && (CFTypeID v4 = CFGetTypeID(a1), v4 == CFNumberGetTypeID()))
  {
    unsigned int valuePtr = 0;
    CFNumberGetValue(a1, kCFNumberIntType, &valuePtr);
    CFStringRef v5 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%d", valuePtr);
    CFDictionarySetValue(a2, @"http://www.w3.org/ns/ttml#styling zIndex", v5);
    if (v5) {
      CFRelease(v5);
    }
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigTTMLDocumentWriterMapPropertyToAttribute_DisplayAspectRatio(const void *a1, __CFDictionary *a2)
{
  if (a1
    && (CFTypeID v3 = CFGetTypeID(a1), v3 == CFDictionaryGetTypeID())
    && (unint64_t v4 = FigGeometryAspectRatioMakeFromDictionary(), FigGeometryAspectRatioIsValid()))
  {
    CFStringRef v5 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%d %d", v4, HIDWORD(v4));
    CFDictionarySetValue(a2, @"http://www.w3.org/ns/ttml/profile/imsc1#parameter aspectRatio", v5);
    if (v5) {
      CFRelease(v5);
    }
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigTTMLDocumentWriterMapPropertyToAttribute_ActiveArea(const void *a1)
{
  if (a1 && (CFTypeID v1 = CFGetTypeID(a1), v1 == CFDictionaryGetTypeID()))
  {
    FigGeometryRectMakeFromDictionary();
    return FigSignalErrorAt();
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigTTMLDocumentWriterMapPropertyToAttribute_CellResolution(const void *a1)
{
  if (a1 && (CFTypeID v1 = CFGetTypeID(a1), v1 == CFDictionaryGetTypeID()))
  {
    FigGeometrySizeMakeFromDictionary();
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  return FigSignalErrorAt();
}

uint64_t FigTTMLDocumentWriterMapPropertyToAttribute_TextColor(CGColor *a1, __CFDictionary *a2)
{
  if (a1 && (CFTypeID v4 = CFGetTypeID(a1), v4 == CGColorGetTypeID()))
  {
    CFStringRef v5 = FigTTMLCGColorCopyAsTTMLColorSyntax(a1);
    CFDictionarySetValue(a2, @"http://www.w3.org/ns/ttml#styling color", v5);
    if (v5) {
      CFRelease(v5);
    }
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigTTMLDocumentWriterMapPropertyToAttribute_FontWeight(const void *a1, __CFDictionary *a2)
{
  if (a1)
  {
    CFTypeID v4 = CFGetTypeID(a1);
    if (v4 == CFStringGetTypeID())
    {
      if (CFEqual(a1, (CFTypeRef)*MEMORY[0x1E4F20190]))
      {
        CFStringRef v5 = kFigTTML_AttributeValue_tts_fontWeight_normal;
LABEL_7:
        CFDictionarySetValue(a2, @"http://www.w3.org/ns/ttml#styling fontWeight", *v5);
        return 0;
      }
      if (CFEqual(a1, (CFTypeRef)*MEMORY[0x1E4F20188]))
      {
        CFStringRef v5 = kFigTTML_AttributeValue_tts_fontWeight_bold;
        goto LABEL_7;
      }
    }
  }

  return FigSignalErrorAt();
}

uint64_t FigTTMLDocumentWriterMapPropertyToAttribute_FontStyle(const void *a1, __CFDictionary *a2)
{
  if (a1)
  {
    CFTypeID v4 = CFGetTypeID(a1);
    if (v4 == CFStringGetTypeID())
    {
      if (CFEqual(a1, (CFTypeRef)*MEMORY[0x1E4F20170]))
      {
        CFStringRef v5 = kFigTTML_AttributeValue_tts_fontStyle_normal;
LABEL_9:
        CFDictionarySetValue(a2, @"http://www.w3.org/ns/ttml#styling fontStyle", *v5);
        return 0;
      }
      if (CFEqual(a1, (CFTypeRef)*MEMORY[0x1E4F20168]))
      {
        CFStringRef v5 = kFigTTML_AttributeValue_tts_fontStyle_italic;
        goto LABEL_9;
      }
      if (CFEqual(a1, (CFTypeRef)*MEMORY[0x1E4F20178]))
      {
        CFStringRef v5 = kFigTTML_AttributeValue_tts_fontStyle_oblique;
        goto LABEL_9;
      }
    }
  }

  return FigSignalErrorAt();
}

uint64_t FigTTMLDocumentWriterMapPropertyToAttribute_Decoration(const __CFNumber *a1, __CFDictionary *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  int valuePtr = 0;
  if (a1 && (CFTypeID v4 = CFGetTypeID(a1), v4 == CFNumberGetTypeID()))
  {
    CFNumberGetValue(a1, kCFNumberSInt32Type, &valuePtr);
    int v5 = valuePtr;
    CFMutableStringRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
    if (Mutable)
    {
      uint64_t v7 = Mutable;
      uint64_t v8 = 0;
      int v9 = 1;
      v12[0] = 1;
      uint64_t v13 = @"underline";
      int v14 = 2;
      uint64_t v15 = @"lineThrough";
      int v16 = 4;
      uint64_t v17 = @"overline";
      do
      {
        if ((v12[v8] & v5) != 0)
        {
          if (!v9) {
            CFStringAppend(v7, @" ");
          }
          CFStringAppend(v7, *(CFStringRef *)&v12[v8 + 2]);
          int v9 = 0;
        }
        v8 += 4;
      }
      while (v8 != 12);
      if (!CFStringGetLength(v7)) {
        CFStringAppend(v7, @"none");
      }
      CFDictionarySetValue(a2, @"http://www.w3.org/ns/ttml#styling textDecoration", v7);
      CFRelease(v7);
    }
    else
    {
      FigSignalErrorAt();
      CFDictionarySetValue(a2, @"http://www.w3.org/ns/ttml#styling textDecoration", 0);
    }
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigTTMLDocumentWriterMapPropertyToAttribute_TextAlign(const void *a1, __CFDictionary *a2)
{
  if (a1)
  {
    CFTypeID v3 = CFGetTypeID(a1);
    if (v3 == CFStringGetTypeID())
    {
      if (FigCFEqual())
      {
        CFTypeID v4 = kFigTTML_AttributeValue_tts_textAlign_start;
LABEL_13:
        CFDictionarySetValue(a2, @"http://www.w3.org/ns/ttml#styling textAlign", *v4);
        return 0;
      }
      if (FigCFEqual())
      {
        CFTypeID v4 = kFigTTML_AttributeValue_tts_textAlign_end;
        goto LABEL_13;
      }
      if (FigCFEqual())
      {
        CFTypeID v4 = kFigTTML_AttributeValue_tts_textAlign_center;
        goto LABEL_13;
      }
      if (FigCFEqual())
      {
        CFTypeID v4 = kFigTTML_AttributeValue_tts_textAlign_left;
        goto LABEL_13;
      }
      if (FigCFEqual())
      {
        CFTypeID v4 = kFigTTML_AttributeValue_tts_textAlign_right;
        goto LABEL_13;
      }
    }
  }

  return FigSignalErrorAt();
}

uint64_t FigTTMLDocumentWriterMapPropertyToAttribute_TextCombine(const void *a1, __CFDictionary *a2)
{
  if (a1)
  {
    CFTypeID v4 = CFGetTypeID(a1);
    if (v4 == CFStringGetTypeID())
    {
      if (CFEqual(a1, (CFTypeRef)*MEMORY[0x1E4F201E8]))
      {
        int v5 = kFigTTML_AttributeValue_tts_textCombine_none;
LABEL_7:
        CFDictionarySetValue(a2, @"http://namespace.itunes.apple.com/itt/ttml-extension#vertical combine", *v5);
        return 0;
      }
      if (CFEqual(a1, (CFTypeRef)*MEMORY[0x1E4F201D8]))
      {
        int v5 = kFigTTML_AttributeValue_tts_textCombine_all;
        goto LABEL_7;
      }
    }
  }

  return FigSignalErrorAt();
}

uint64_t FigTTMLDocumentWriterMapPropertyToAttribute_LinePadding(const void *a1, __CFDictionary *a2)
{
  CFMutableStringRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  if (!a1
    || (CFTypeID v5 = CFGetTypeID(a1), v5 != CFDictionaryGetTypeID())
    || (uint64_t v6 = FigGeometryDimensionMakeFromDictionary(), (v7 & 0x100000000) == 0))
  {
    uint64_t v8 = FigSignalErrorAt();
    if (!Mutable) {
      return v8;
    }
    goto LABEL_5;
  }
  figTTMLStringifyFigGeometryDimensionAndAppend(Mutable, v6, v7);
  CFDictionarySetValue(a2, @"urn:ebu:tt:style linePadding", Mutable);
  uint64_t v8 = 0;
  if (Mutable) {
LABEL_5:
  }
    CFRelease(Mutable);
  return v8;
}

uint64_t FigTTMLDocumentWriterMapPropertyToAttribute_LineHeight(const void *a1, __CFDictionary *a2)
{
  CFMutableStringRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  if (!a1
    || (CFTypeID v5 = CFGetTypeID(a1), v5 != CFDictionaryGetTypeID())
    || (uint64_t v6 = FigGeometryDimensionMakeFromDictionary(), (v7 & 0x100000000) == 0))
  {
    uint64_t v8 = FigSignalErrorAt();
    if (!Mutable) {
      return v8;
    }
    goto LABEL_5;
  }
  figTTMLStringifyFigGeometryDimensionAndAppend(Mutable, v6, v7);
  CFDictionarySetValue(a2, @"http://www.w3.org/ns/ttml#styling lineHeight", Mutable);
  uint64_t v8 = 0;
  if (Mutable) {
LABEL_5:
  }
    CFRelease(Mutable);
  return v8;
}

uint64_t FigTTMLDocumentWriterMapPropertyToAttribute_MultiRowAlign(const void *a1, __CFDictionary *a2)
{
  if (a1)
  {
    CFTypeID v3 = CFGetTypeID(a1);
    if (v3 == CFStringGetTypeID())
    {
      if (FigCFEqual())
      {
        CFTypeID v4 = kFigTTML_AttributeValue_ebutts_multiRowAlign_start;
LABEL_11:
        CFDictionarySetValue(a2, @"urn:ebu:tt:style multiRowAlign", *v4);
        return 0;
      }
      if (FigCFEqual())
      {
        CFTypeID v4 = kFigTTML_AttributeValue_ebutts_multiRowAlign_center;
        goto LABEL_11;
      }
      if (FigCFEqual())
      {
        CFTypeID v4 = kFigTTML_AttributeValue_ebutts_multiRowAlign_end;
        goto LABEL_11;
      }
      if (FigCFEqual())
      {
        CFTypeID v4 = kFigTTML_AttributeValue_ebutts_multiRowAlign_auto;
        goto LABEL_11;
      }
    }
  }

  return FigSignalErrorAt();
}

uint64_t FigTTMLDocumentWriterMapPropertyToAttribute_TextOutline(const void *a1, __CFDictionary *a2)
{
  CFMutableStringRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  if (!a1 || (CFTypeID v5 = CFGetTypeID(a1), v5 != FigCaptionTextOutlineGetTypeID()))
  {
    uint64_t v11 = FigSignalErrorAt();
    if (!Mutable) {
      return v11;
    }
    goto LABEL_11;
  }
  uint64_t Thickness = FigCaptionTextOutlineGetThickness();
  int v8 = v7;
  if (FigGeometryDimensionEqualToDimension())
  {
    CFStringAppend(Mutable, @"none");
    CFDictionarySetValue(a2, @"http://www.w3.org/ns/ttml#styling textOutline", Mutable);
  }
  else
  {
    Color = (CGColor *)FigCaptionTextOutlineGetColor();
    if (Color)
    {
      CFStringRef v10 = FigTTMLCGColorCopyAsTTMLColorSyntax(Color);
      CFStringAppend(Mutable, v10);
      CFStringAppend(Mutable, @" ");
    }
    else
    {
      CFStringRef v10 = 0;
    }
    figTTMLStringifyFigGeometryDimensionAndAppend(Mutable, Thickness, v8);
    CFDictionarySetValue(a2, @"http://www.w3.org/ns/ttml#styling textOutline", Mutable);
    if (v10) {
      CFRelease(v10);
    }
  }
  uint64_t v11 = 0;
  if (Mutable) {
LABEL_11:
  }
    CFRelease(Mutable);
  return v11;
}

uint64_t FigTTMLDocumentWriterMapPropertyToAttribute_PreventLineWrapping(const void *a1, __CFDictionary *a2)
{
  if (a1 && (CFTypeID v3 = CFGetTypeID(a1), v3 == CFBooleanGetTypeID()))
  {
    if (FigCFEqual()) {
      CFTypeID v4 = kFigTTML_AttributeValue_tts_wrapOption_noWrap;
    }
    else {
      CFTypeID v4 = kFigTTML_AttributeValue_tts_wrapOption_wrap;
    }
    CFDictionarySetValue(a2, @"http://www.w3.org/ns/ttml#styling wrapOption", *v4);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigTTMLDocumentWriterMapPropertyToAttribute_FontFamily(const void *a1, __CFDictionary *a2)
{
  if (a1 && (CFTypeID v3 = CFGetTypeID(a1), v3 == FigCaptionFontFamilyNameListGetTypeID()))
  {
    CFMutableStringRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
    uint64_t Count = FigCaptionFontFamilyNameListGetCount();
    if (Count)
    {
      uint64_t v6 = Count;
      uint64_t v7 = 0;
      while (1)
      {
        uint64_t v8 = FigCaptionFontFamilyNameListCopyFamilyKindAndNameAtIndex();
        if (v8) {
          break;
        }
        if (v7) {
          CFStringAppend(Mutable, @",");
        }
        MEMORY[0x19970EE10](&figTTMLDocumentWriter_getTTMLFontFamilyName_once, initMapFromFigCaptionFontFamilyToTTMLFontFamily);
        CFStringRef Value = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)sMapFromFigCaptionFontFamilyToTTMLFontFamily, 0);
        if (!Value)
        {
          uint64_t v8 = FigSignalErrorAt();
          break;
        }
        CFStringAppend(Mutable, Value);
        if (v6 == ++v7) {
          goto LABEL_10;
        }
      }
      uint64_t v10 = v8;
    }
    else
    {
LABEL_10:
      CFDictionarySetValue(a2, @"http://www.w3.org/ns/ttml#styling fontFamily", Mutable);
      uint64_t v10 = 0;
    }
  }
  else
  {
    uint64_t v10 = FigSignalErrorAt();
    CFMutableStringRef Mutable = 0;
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v10;
}

uint64_t FigTTMLDocumentWriterMapPropertyToAttribute_FontSize(const void *a1, __CFDictionary *a2)
{
  if (a1 && (CFTypeID v3 = CFGetTypeID(a1), v3 == CFDictionaryGetTypeID()))
  {
    FigGeometrySizeMakeFromDictionary();
    CFMutableStringRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
    int v5 = FigGeometryDimensionEqualToDimension();
    figTTMLStringifyFigGeometryDimensionAndAppend(Mutable, 0, 0);
    if (!v5)
    {
      CFStringAppend(Mutable, @" ");
      figTTMLStringifyFigGeometryDimensionAndAppend(Mutable, 0, 0);
    }
    CFDictionarySetValue(a2, @"http://www.w3.org/ns/ttml#styling fontSize", Mutable);
    if (Mutable) {
      CFRelease(Mutable);
    }
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigTTMLDocumentWriterMapPropertyToAttribute_WritingDirection(CFTypeRef cf, __CFDictionary *a2)
{
  if ((CFTypeRef)*MEMORY[0x1E4F1D260] == cf)
  {
    uint64_t v7 = kFigTTML_AttributeValue_tts_unicodeBidi_normal;
    goto LABEL_12;
  }
  if (cf)
  {
    CFTypeID v4 = CFGetTypeID(cf);
    if (v4 == CFNumberGetTypeID())
    {
      int valuePtr = 0;
      CFNumberGetValue((CFNumberRef)cf, kCFNumberSInt32Type, &valuePtr);
      int v5 = valuePtr & 0xE;
      if (valuePtr) {
        uint64_t v6 = kFigTTML_AttributeValue_tts_direction_rtl;
      }
      else {
        uint64_t v6 = kFigTTML_AttributeValue_tts_direction_ltr;
      }
      CFDictionarySetValue(a2, @"http://www.w3.org/ns/ttml#styling direction", *v6);
      if (v5 == 2)
      {
        uint64_t v7 = kFigTTML_AttributeValue_tts_unicodeBidi_bidiOverride;
      }
      else
      {
        if (v5) {
          return 0;
        }
        uint64_t v7 = kFigTTML_AttributeValue_tts_unicodeBidi_embed;
      }
LABEL_12:
      CFDictionarySetValue(a2, @"http://www.w3.org/ns/ttml#styling unicodeBidi", *v7);
      return 0;
    }
  }

  return FigSignalErrorAt();
}

uint64_t FigTTMLDocumentWriterMapPropertyToAttribute_FillLineGap(const void *a1, __CFDictionary *a2)
{
  if (a1 && (CFTypeID v3 = CFGetTypeID(a1), v3 == CFBooleanGetTypeID()))
  {
    if (FigCFEqual()) {
      CFTypeID v4 = @"true";
    }
    else {
      CFTypeID v4 = @"false";
    }
    CFDictionarySetValue(a2, @"http://www.w3.org/ns/ttml/profile/imsc1#styling fillLineGap", v4);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigTTMLDocumentWriterMapWidthAndHeightPropertiesToExtentAttributeAndSet(const void *a1, const void *a2, CMTime *a3, uint64_t a4)
{
  CFTypeID v4 = a3;
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  CFTypeRef v41 = 0;
  v39[0] = 0;
  v39[1] = 0;
  double v37 = 0.0;
  double v38 = 0.0;
  CMTime time = *a3;
  double Seconds = CMTimeGetSeconds(&time);
  uint64_t v8 = 0;
  v36[1] = a1;
  v36[2] = a2;
  char v9 = 1;
  do
  {
    char v10 = v9;
    InitialCFStringRef Value = (const void *)FigCaptionDynamicStyleGetInitialValue();
    if (InitialValue) {
      InitialCFStringRef Value = CFRetain(InitialValue);
    }
    char v9 = 0;
    *(&cf + v8) = InitialValue;
    uint64_t v8 = 1;
  }
  while ((v10 & 1) != 0);
  CFMutableStringRef Mutable = 0;
  if (fabs(Seconds) == INFINITY)
  {
LABEL_37:
    uint64_t v20 = 0;
    goto LABEL_38;
  }
  CFAllocatorRef alloc = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v31 = v4;
  while (cf)
  {
    CFTypeID v13 = CFGetTypeID(cf);
    if (v13 != CFDictionaryGetTypeID()) {
      break;
    }
    if (!v41) {
      break;
    }
    CFTypeID v14 = CFGetTypeID(v41);
    if (v14 != CFDictionaryGetTypeID()) {
      break;
    }
    if (Mutable) {
      CFRelease(Mutable);
    }
    CFMutableStringRef Mutable = CFStringCreateMutable(alloc, 0);
    uint64_t v15 = FigGeometryDimensionMakeFromDictionary();
    figTTMLStringifyFigGeometryDimensionAndAppend(Mutable, v15, v16);
    CFStringAppend(Mutable, @" ");
    uint64_t v17 = FigGeometryDimensionMakeFromDictionary();
    figTTMLStringifyFigGeometryDimensionAndAppend(Mutable, v17, v18);
    if ((v4->flags & 0x1D) != 1)
    {
      v36[0] = 0;
LABEL_23:
      FigTTMLDocumentWriterElementSetAttribute(a4, @"http://www.w3.org/ns/ttml#styling extent", Mutable);
      goto LABEL_24;
    }
    CMTime time = *v4;
    double v19 = Seconds - CMTimeGetSeconds(&time);
    v36[0] = 0;
    if (v19 == 0.0) {
      goto LABEL_23;
    }
    uint64_t v20 = FigTTMLDocumentWriterElementCreate((uint64_t)alloc, 1, a4, (uint64_t *)v36);
    if (!v20)
    {
      FigTTMLDocumentWriterElementSetAttribute((uint64_t)v36[0], @"http://www.w3.org/ns/ttml#styling extent", Mutable);
      CMTimeMakeWithSeconds(&time, v19, 1000);
      CFDictionaryRef v21 = CMTimeCopyAsDictionary(&time, alloc);
      FigTTMLDocumentWriterElementSetAttribute((uint64_t)v36[0], @"begin", v21);
      FigTTMLDocumentWriterElementAddChildElement(a4, v36[0]);
      if (v21) {
        CFRelease(v21);
      }
    }
    if (v36[0]) {
      CFRelease(v36[0]);
    }
    if (v20) {
      goto LABEL_38;
    }
LABEL_24:
    uint64_t v34 = Mutable;
    uint64_t v22 = 0;
    LOBYTE(time.value) = v37 <= v38;
    BYTE1(time.value) = v38 <= v37;
    char v23 = 1;
    do
    {
      char v24 = v23;
      if (*((unsigned char *)&time.value + v22))
      {
        uint64_t v25 = v39[v22] + 1;
        if (v25 == FigCaptionDynamicStyleGetKeyFrameCount())
        {
          *(&v37 + v22) = INFINITY;
        }
        else
        {
          v39[v22] = v25;
          FigCaptionDynamicStyleCopyKeyFrameValueAtIndex();
        }
      }
      char v23 = 0;
      uint64_t v22 = 1;
    }
    while ((v24 & 1) != 0);
    uint64_t v26 = 0;
    LOBYTE(v36[0]) = v37 <= v38;
    BYTE1(v36[0]) = v38 <= v37;
    char v27 = 1;
    CFMutableStringRef Mutable = v34;
    do
    {
      char v28 = v27;
      if (*((unsigned char *)v36 + v26))
      {
        uint64_t v29 = &cf + v26;
        if (*v29)
        {
          CFRelease(*v29);
          *uint64_t v29 = 0;
        }
        FigCaptionDynamicStyleCopyKeyFrameValueAtIndex();
        double Seconds = *(&v37 + v26);
      }
      char v27 = 0;
      uint64_t v26 = 1;
    }
    while ((v28 & 1) != 0);
    CFTypeID v4 = v31;
    if (fabs(Seconds) == INFINITY) {
      goto LABEL_37;
    }
  }
  uint64_t v20 = FigSignalErrorAt();
LABEL_38:
  if (cf) {
    CFRelease(cf);
  }
  if (v41) {
    CFRelease(v41);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v20;
}

void initMapFromFigCaptionFontFamilyToTTMLFontFamily()
{
  CFMutableStringRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F1FE70], @"default");
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F1FEB0], @"serif");
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F1FEA8], @"sansSerif");
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F1FE80], @"monospace");
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F1FEA0], @"proportionalSerif");
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F1FE98], @"proportionalSansSerif");
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F1FE90], @"monospaceSerif");
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F1FE88], @"monospaceSansSerif");
  sMapFromFigCaptionFontFamilyToTTMLFontFamily = (uint64_t)Mutable;
}

uint64_t FigSubtitleStringConformerCopyConformedStringsForSubtitleSample(unsigned int *a1, __CFArray **a2)
{
  uint64_t v3 = *a1;
  uint64_t v44 = *(void *)(a1 + 1);
  CFTypeID v4 = *(NSObject **)(a1 + 3);
  CFDictionaryRef theDict = *(const __CFDictionary **)(a1 + 5);
  int v50 = *((unsigned __int8 *)a1 + 29);
  unsigned int v51 = *((unsigned __int8 *)a1 + 28);
  CGFloat v55 = *((double *)a1 + 5);
  CGFloat v56 = *((double *)a1 + 4);
  CGFloat v5 = *((double *)a1 + 7);
  CGFloat v54 = *((double *)a1 + 6);
  double v6 = *((double *)a1 + 8);
  double v7 = *((double *)a1 + 9);
  uint64_t v8 = *((unsigned __int8 *)a1 + 80);
  if (!v3 && v44 || v3 == 1 && v4)
  {
    CFArrayRef v9 = (const __CFArray *)CFDictionaryGetValue(theDict, @"SubtitleContent");
    CFArrayRef v10 = v9;
    if (v9) {
      uint64_t Count = CFArrayGetCount(v9);
    }
    else {
      uint64_t Count = 0;
    }
    CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableStringRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], Count, MEMORY[0x1E4F1D510]);
    LODWORD(v59.location) = 0;
    uint64_t v49 = v4;
    FigCFDictionaryGetInt32IfPresent();
    uint64_t v13 = FigSignalErrorAt();
    CFTypeID v14 = 0;
    if (v13) {
      return v13;
    }
    if (Count >= 1)
    {
      uint64_t v42 = a2;
      CFIndex v15 = 0;
      double v47 = *(double *)(MEMORY[0x1E4F1DB20] + 8);
      double v48 = *MEMORY[0x1E4F1DB20];
      double v45 = *(double *)(MEMORY[0x1E4F1DB20] + 24);
      double v46 = *(double *)(MEMORY[0x1E4F1DB20] + 16);
      while (1)
      {
        CFDataRef ValueAtIndex = CFArrayGetValueAtIndex(v10, v15);
        CFTypeRef value = 0;
        double width = v54;
        double y = v55;
        double height = v5;
        double v20 = 0.0;
        double x = v56;
        if (!v8) {
          break;
        }
LABEL_34:
        uint64_t v40 = v14(ValueAtIndex, v8, &value, v6, v7, x, y, width, height, v20);
        if (!v40) {
          CFArrayAppendValue(Mutable, value);
        }
        if (value) {
          CFRelease(value);
        }
        if (Count == ++v15)
        {
          a2 = v42;
          goto LABEL_42;
        }
      }
      CGSize v22 = *(CGSize *)(MEMORY[0x1E4F1DB20] + 16);
      rect.origin = (CGPoint)*MEMORY[0x1E4F1DB20];
      rect.size = v22;
      CFDictionaryRef v75 = 0;
      double valuePtr = 0.0;
      CFTypeRef v74 = 0;
      CFRange longestEffectiveRange = (CFRange)rect.origin;
      CGSize v73 = v22;
      if (v3)
      {
        FigCaptionRendererSessionClear(v49, v48, v47, v46, v45);
        FigCaptionRendererSessionSetLayoutContext_Viewport((uint64_t)v49, 0.0, 0.0, v6, v7);
        FigCaptionRendererSessionSetLayoutContext_VideoSize(v49, v6, v7);
        FigCaptionRendererSessionSetLayoutContext_Gravity(v49, 0);
        FigCaptionRendererSessionSetLayoutContext_Overscan(v49, 0);
        FigSubtitleSampleCreatePropertyList(theDict, v51, v50, &v75, v56, v55, v54, v5);
        v59.location = 0;
        FigCaptionRendererLayoutContextCreate(&v59);
        if (!v59.location)
        {
          char v28 = 0;
LABEL_26:
          double x = rect.origin.x;
          double y = rect.origin.y;
          double width = rect.size.width;
          double height = rect.size.height;
          double v20 = valuePtr;
          if (v74) {
            CFRelease(v74);
          }
          if (v75) {
            CFRelease(v75);
          }
          if (v28) {
            CFRelease(v28);
          }
          if (v3 == 1) {
            double y = v7 - y - height;
          }
          goto LABEL_34;
        }
        FigCaptionRendererSessionSetCaptionSample(v49, (uint64_t)v75, v59.location);
        FigCaptionRendererSessionUpdateLegibleOutputContext(v49, v59.location);
        CFTypeRef cf = 0;
        FigCaptionRendererLayoutContextGetSubtitleSample(v59.location, &cf);
        if (cf) {
          CFTypeRef v23 = CFRetain(cf);
        }
        else {
          CFTypeRef v23 = 0;
        }
        CFTypeRef v74 = v23;
        if (v59.location) {
          CFRelease((CFTypeRef)v59.location);
        }
      }
      else
      {
        char v69 = 0;
        __int16 v68 = 0;
        long long v24 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 16);
        long long v64 = *MEMORY[0x1E4F1DAB8];
        long long v65 = v24;
        long long v66 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 32);
        MutableCFSetRef Copy = CFDictionaryCreateMutableCopy(allocator, 0, theDict);
        FigSubtitleSampleInsertInfoForRenderer(MutableCopy, v56, v55, v54, v5, 0.0, 0.0, v6, v7 * 0.15, v51, v50);
        v59.location = 0;
        v59.length = 0;
        double v60 = v6;
        double v61 = v7;
        double v62 = v6;
        double v63 = v7;
        char v67 = 0;
        uint64_t v70 = 0x3FF0000000000000;
        int v71 = 1;
        FigSubtitleRendererLayout(v44, (uint64_t)MutableCopy, &v59, (uint64_t)&longestEffectiveRange, (uint64_t)&v74);
        if (MutableCopy) {
          CFRelease(MutableCopy);
        }
        CFTypeRef v23 = v74;
      }
      CFArrayRef v26 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)v23, @"SubtitleContent");
      char v27 = CFArrayGetValueAtIndex(v26, v15);
      char v28 = v27;
      if (v27)
      {
        uint64_t v53 = ValueAtIndex;
        uint64_t v29 = v8;
        uint64_t v30 = v14;
        CFRetain(v27);
        uint64_t Length = CFAttributedStringGetLength((CFAttributedStringRef)v28);
        if (Length > 0)
        {
          CFIndex v32 = Length;
          v59.location = 0;
          v59.length = 0;
          longestEffectiveRange.location = 0;
          longestEffectiveRange.length = 0;
          v79.location = 0;
          v79.length = Length;
          uint64_t v33 = Mutable;
          uint64_t v34 = Count;
          CFArrayRef v35 = v10;
          uint64_t v36 = v3;
          CFNumberRef AttributeAndLongestEffectiveRange = (const __CFNumber *)CFAttributedStringGetAttributeAndLongestEffectiveRange((CFAttributedStringRef)v28, 0, @"kFigSubtitleRenderer_FontSizeToUse", v79, &v59);
          v80.location = 0;
          v80.length = v32;
          CFDictionaryRef v38 = (const __CFDictionary *)CFAttributedStringGetAttributeAndLongestEffectiveRange((CFAttributedStringRef)v28, 0, @"kFigSubtitleRenderer_SuggestTextLayout", v80, &longestEffectiveRange);
          CFNumberRef v39 = AttributeAndLongestEffectiveRange;
          uint64_t v3 = v36;
          CFArrayRef v10 = v35;
          uint64_t Count = v34;
          CFMutableStringRef Mutable = v33;
          CFNumberGetValue(v39, kCFNumberCGFloatType, &valuePtr);
          CGRectMakeWithDictionaryRepresentation(v38, &rect);
        }
        CFTypeID v14 = v30;
        uint64_t v8 = v29;
        CFDataRef ValueAtIndex = v53;
      }
      goto LABEL_26;
    }
    uint64_t v40 = 0;
LABEL_42:
    *a2 = Mutable;
    return v40;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t sbtlstringconformer_tx3g_createConformedAttributedStringForAttributedString(const __CFAttributedString *a1, int a2, __CFAttributedString **a3, double a4, double a5)
{
  CFMutableStringRef Mutable = CFAttributedStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringRef String = CFAttributedStringGetString(a1);
  v30.location = 0;
  v30.length = 0;
  CFAttributedStringReplaceString(Mutable, v30, String);
  if (CFAttributedStringGetLength(a1) >= 1)
  {
    CFIndex v12 = 0;
    CFStringRef v13 = (const __CFString *)*MEMORY[0x1E4F1F630];
    CFTypeID v14 = (const void *)*MEMORY[0x1E4F1CFC8];
    CFStringRef v15 = (const __CFString *)*MEMORY[0x1E4F1F718];
    do
    {
      effectiveRange.location = 0;
      effectiveRange.length = 0;
      CFDictionaryRef Attributes = CFAttributedStringGetAttributes(a1, v12, &effectiveRange);
      sbtlstringconformer_addColorAttributesToStringBasedOnContentAndMAXSettings(Mutable, Attributes, effectiveRange.location, effectiveRange.length, a2);
      CFStringRef Value = CFDictionaryGetValue(Attributes, v13);
      if (Value) {
        BOOL v18 = 0;
      }
      else {
        BOOL v18 = a2 == 0;
      }
      if (v18) {
        double v19 = v14;
      }
      else {
        double v19 = Value;
      }
      if (v19) {
        CFAttributedStringSetAttribute(Mutable, effectiveRange, v13, v19);
      }
      double v20 = CFDictionaryGetValue(Attributes, v15);
      if (v20) {
        BOOL v21 = 0;
      }
      else {
        BOOL v21 = a2 == 0;
      }
      if (v21) {
        CGSize v22 = v14;
      }
      else {
        CGSize v22 = v20;
      }
      if (v22) {
        CFAttributedStringSetAttribute(Mutable, effectiveRange, v15, v22);
      }
      sbtlstringconformer_addCharacterEdgeStyleAttributeToStringBasedOnContentAndMAXSettings(Mutable, Attributes, effectiveRange.location, effectiveRange.length, a2);
      FigCFDictionaryGetInt64IfPresent();
      if (!a2) {
        sbtlstringconformer_addPositioningAttributesToString(a4, a5);
      }
      CFIndex v12 = effectiveRange.length + effectiveRange.location;
    }
    while (v12 < CFAttributedStringGetLength(a1));
  }
  CFIndex Length = CFAttributedStringGetLength(a1);
  if (a2) {
    goto LABEL_27;
  }
  CFIndex v24 = Length;
  v31.location = 0;
  v31.length = Length;
  CFAttributedStringSetAttribute(Mutable, v31, (CFStringRef)*MEMORY[0x1E4F1F538], (CFTypeRef)*MEMORY[0x1E4F1F518]);
  FontFamilyCFDictionaryRef Attributes = sbtlstringconformer_createFontFamilyAttributes(0, 0, 0);
  v32.location = 0;
  v32.length = v24;
  CFAttributedStringSetAttributes(Mutable, v32, FontFamilyAttributes, 0);
  if (FontFamilyAttributes) {
    CFRelease(FontFamilyAttributes);
  }
  uint64_t v26 = FigCFAttributedStringSetDouble();
  if (v26
    || (v33.location = 0,
        v33.length = v24,
        CFAttributedStringSetAttribute(Mutable, v33, (CFStringRef)*MEMORY[0x1E4F1F558], (CFTypeRef)*MEMORY[0x1E4F1CFD0]),
        uint64_t v26 = FigCFAttributedStringSetDouble(),
        v26))
  {
    uint64_t v27 = v26;
    if (Mutable) {
      CFRelease(Mutable);
    }
  }
  else
  {
LABEL_27:
    uint64_t v27 = 0;
    *a3 = Mutable;
  }
  return v27;
}

uint64_t sbtlstringconformer_wvtt_createConformedAttributedStringForAttributedString(const __CFAttributedString *a1, int a2, __CFAttributedString **a3, double a4, double a5)
{
  v30[9] = *MEMORY[0x1E4F143B8];
  CFMutableStringRef Mutable = CFAttributedStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFAttributedStringGetLength(a1);
  CFStringRef String = CFAttributedStringGetString(a1);
  v31.location = 0;
  v31.length = 0;
  CFAttributedStringReplaceString(Mutable, v31, String);
  if (!a2) {
    sbtlstringconformer_addPositioningAttributesToString(a4, a5);
  }
  uint64_t v11 = *MEMORY[0x1E4F1F630];
  v30[0] = *MEMORY[0x1E4F1F558];
  v30[1] = v11;
  uint64_t v12 = *MEMORY[0x1E4F1F6B0];
  v30[2] = *MEMORY[0x1E4F1F718];
  v30[3] = v12;
  uint64_t v13 = *MEMORY[0x1E4F1F538];
  v30[4] = *MEMORY[0x1E4F1F720];
  v30[5] = v13;
  uint64_t v14 = *MEMORY[0x1E4F1F668];
  v30[6] = *MEMORY[0x1E4F1F700];
  v30[7] = v14;
  v30[8] = *MEMORY[0x1E4F1F728];
  if (CFAttributedStringGetLength(a1) >= 1)
  {
    CFIndex v15 = 0;
    int v16 = (const void *)*MEMORY[0x1E4F1F5E0];
    uint64_t v17 = (const void *)*MEMORY[0x1E4F1F608];
    do
    {
      effectiveRange.location = 0;
      effectiveRange.length = 0;
      CFDictionaryRef Attributes = CFAttributedStringGetAttributes(a1, v15, &effectiveRange);
      for (uint64_t i = 0; i != 9; ++i)
      {
        CFStringRef v20 = (const __CFString *)v30[i];
        CFStringRef Value = CFDictionaryGetValue(Attributes, v20);
        if (Value) {
          CFAttributedStringSetAttribute(Mutable, effectiveRange, v20, Value);
        }
      }
      sbtlstringconformer_addColorAttributesToStringBasedOnContentAndMAXSettings(Mutable, Attributes, effectiveRange.location, effectiveRange.length, a2);
      CGSize v22 = (__CFString *)CFDictionaryGetValue(Attributes, v16);
      CFTypeRef v23 = CFDictionaryGetValue(Attributes, v17);
      FontFamilyCFDictionaryRef Attributes = sbtlstringconformer_createFontFamilyAttributes(v22, v23, a2);
      CFAttributedStringSetAttributes(Mutable, effectiveRange, FontFamilyAttributes, 0);
      if (FontFamilyAttributes) {
        CFRelease(FontFamilyAttributes);
      }
      sbtlstringconformer_addCharacterEdgeStyleAttributeToStringBasedOnContentAndMAXSettings(Mutable, Attributes, effectiveRange.location, effectiveRange.length, a2);
      CFIndex v15 = effectiveRange.length + effectiveRange.location;
    }
    while (v15 < CFAttributedStringGetLength(a1));
  }
  if (!a2 && (uint64_t v25 = FigCFAttributedStringSetDouble(), v25))
  {
    uint64_t v26 = v25;
    if (Mutable) {
      CFRelease(Mutable);
    }
  }
  else
  {
    uint64_t v26 = 0;
    *a3 = Mutable;
  }
  return v26;
}

void sbtlstringconformer_addColorAttributesToStringBasedOnContentAndMAXSettings(__CFAttributedString *a1, const __CFDictionary *a2, CFIndex a3, CFIndex a4, int a5)
{
  WhiteARGBColorArradouble y = (const void *)FigTextMarkupCreateWhiteARGBColorArray();
  sbtlstringconformer_addColorAttributeToStringUsingResolverFunctionAndDefault((const __CFString *)*MEMORY[0x1E4F1F600], a1, a3, a4, a2, (uint64_t (*)(const void *, uint64_t))FigStringConformerCreateResolvedForegroundARGBColorArrayUsingMAXColorAndOpacity, (uint64_t)WhiteARGBColorArray, a5);
  CFRelease(WhiteARGBColorArray);
  BlackARGBColorArradouble y = (const void *)FigTextMarkupCreateBlackARGBColorArray();
  sbtlstringconformer_addColorAttributeToStringUsingResolverFunctionAndDefault((const __CFString *)*MEMORY[0x1E4F1F548], a1, a3, a4, a2, (uint64_t (*)(const void *, uint64_t))FigStringConformerCreateResolvedWindowARGBColorArrayUsingMAXColorAndOpacity, (uint64_t)BlackARGBColorArray, a5);
  CFRelease(BlackARGBColorArray);
  ClearARGBColorArradouble y = (const void *)FigTextMarkupCreateClearARGBColorArray();
  sbtlstringconformer_addColorAttributeToStringUsingResolverFunctionAndDefault((const __CFString *)*MEMORY[0x1E4F1F598], a1, a3, a4, a2, (uint64_t (*)(const void *, uint64_t))FigStringConformerCreateResolvedBackgroundARGBColorArrayUsingMAXColorAndOpacity, (uint64_t)ClearARGBColorArray, a5);

  CFRelease(ClearARGBColorArray);
}

void sbtlstringconformer_addCharacterEdgeStyleAttributeToStringBasedOnContentAndMAXSettings(__CFAttributedString *a1, CFDictionaryRef theDict, CFIndex a3, CFIndex a4, int a5)
{
  CFStringRef v9 = (const __CFString *)*MEMORY[0x1E4F1F5A0];
  CFStringRef Value = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F1F5A0]);
  if (a5) {
    goto LABEL_9;
  }
  MACaptionAppearanceBehavior behavior = kMACaptionAppearanceBehaviorUseContentIfAvailable;
  MACaptionAppearanceTextEdgeStyle TextEdgeStyle = MACaptionAppearanceGetTextEdgeStyle(kMACaptionAppearanceDomainUser, &behavior);
  if (behavior == kMACaptionAppearanceBehaviorUseValue)
  {
LABEL_5:
    CFStringRef Value = (const void *)FigStringConformerEdgeStyleForMediaAccessibilityEdgeStyle(TextEdgeStyle);
    goto LABEL_7;
  }
  if (behavior == kMACaptionAppearanceBehaviorUseContentIfAvailable)
  {
    if (Value) {
      goto LABEL_7;
    }
    goto LABEL_5;
  }
  CFStringRef Value = 0;
LABEL_7:
  if (!Value) {
    CFStringRef Value = (const void *)*MEMORY[0x1E4F1F750];
  }
LABEL_9:
  if (Value)
  {
    v13.location = a3;
    v13.length = a4;
    CFAttributedStringSetAttribute(a1, v13, v9, Value);
  }
}

uint64_t sbtlstringconformer_addPositioningAttributesToString(double a1, double a2)
{
  if (a1 > 0.0 && a2 > 0.0)
  {
    uint64_t result = FigCFAttributedStringSetDouble();
    if (!result)
    {
      uint64_t result = FigCFAttributedStringSetDouble();
      if (!result)
      {
        return FigCFAttributedStringSetDouble();
      }
    }
  }
  return result;
}

__CFDictionary *sbtlstringconformer_createFontFamilyAttributes(__CFString *a1, const void *a2, int a3)
{
  CFMutableStringRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!a3)
  {
    if (a1 || !a2)
    {
      MACaptionAppearanceFontStyle fontStyle = kMACaptionAppearanceFontStyleMonospacedWithSerif;
      uint64_t v12 = MACaptionAppearanceCopyFontDescriptorForStyle(kMACaptionAppearanceDomainUser, (MACaptionAppearanceBehavior *)&fontStyle, kMACaptionAppearanceFontStyleDefault);
      if (fontStyle == kMACaptionAppearanceFontStyleDefault
        || (CFTypeRef v10 = 0, fontStyle == kMACaptionAppearanceFontStyleMonospacedWithSerif)
        && (!a1 || (CFTypeRef v10 = CFRetain(a1)) == 0))
      {
        CFTypeRef v10 = CTFontDescriptorCopyAttribute(v12, (CFStringRef)*MEMORY[0x1E4F24538]);
      }
      if (!v12)
      {
LABEL_17:
        if (v10)
        {
LABEL_20:
          CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F1F5E0], v10);
          CFRelease(v10);
          return Mutable;
        }
        goto LABEL_18;
      }
      uint64_t v11 = v12;
    }
    else
    {
      MACaptionAppearanceFontStyle fontStyle = kMACaptionAppearanceFontStyleDefault;
      if (!FigTextMarkupMapGenericFontFamilyToMACaptionAppearanceFontStyle()
        || (uint64_t v8 = MACaptionAppearanceCopyFontDescriptorForStyle(kMACaptionAppearanceDomainUser, 0, fontStyle)) == 0)
      {
LABEL_18:
        double v7 = @"Helvetica";
        goto LABEL_19;
      }
      CFStringRef v9 = v8;
      CFTypeRef v10 = CTFontDescriptorCopyAttribute(v8, (CFStringRef)*MEMORY[0x1E4F24538]);
      uint64_t v11 = v9;
    }
    CFRelease(v11);
    goto LABEL_17;
  }
  if (!a1) {
    goto LABEL_21;
  }
  double v7 = a1;
LABEL_19:
  CFTypeRef v10 = CFRetain(v7);
  if (v10) {
    goto LABEL_20;
  }
LABEL_21:
  if (a2) {
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F1F608], a2);
  }
  return Mutable;
}

void sbtlstringconformer_addColorAttributeToStringUsingResolverFunctionAndDefault(const __CFString *key, __CFAttributedString *a2, CFIndex a3, CFIndex a4, CFDictionaryRef theDict, uint64_t (*a6)(const void *, uint64_t), uint64_t a7, int a8)
{
  CFStringRef Value = CFDictionaryGetValue(theDict, key);
  if (a8)
  {
    if (!Value) {
      return;
    }
    CFTypeRef v16 = CFRetain(Value);
  }
  else
  {
    CFTypeRef v16 = (CFTypeRef)a6(Value, a7);
  }
  uint64_t v17 = v16;
  if (v16)
  {
    v19.location = a3;
    v19.length = a4;
    CFAttributedStringSetAttribute(a2, v19, key, v16);
    CFRelease(v17);
  }
}

int64_t FigWebVTTCaptionGroupConverterFromSampleBufferCreateRemote(_OWORD *a1, uint64_t a2, void *a3)
{
  return remoteXPCFigCaptionGroupConverter_CreateConverter(a1, a2, 2004251764, a3);
}

int64_t remoteXPCFigCaptionGroupConverter_CreateConverter(_OWORD *a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (remoteXPCFigCaptionGroupConverterClient_EnsureClientEstablished_gFCGConverterRemoteClientSetupOnce != -1) {
    dispatch_once(&remoteXPCFigCaptionGroupConverterClient_EnsureClientEstablished_gFCGConverterRemoteClientSetupOnce, &__block_literal_global_129);
  }
  int64_t int64 = remoteXPCFigCaptionGroupConverterClient_EnsureClientEstablished_err;
  if (!remoteXPCFigCaptionGroupConverterClient_EnsureClientEstablished_err)
  {
    FigCaptionGroupConverterFromSampleBufferGetClassID();
    uint64_t v7 = CMDerivedObjectCreate();
    if (!v7)
    {
      uint64_t v7 = FigXPCCreateBasicMessage();
      if (!v7)
      {
        CMBaseObjectGetDerivedStorage();
        uint64_t v7 = FigXPCRemoteClientCopyMemoryOrigin();
        if (!v7)
        {
          uint64_t v7 = FigXPCRemoteClientSendSyncMessageCreatingReply();
          if (!v7)
          {
            int64_t int64 = xpc_dictionary_get_int64(0, (const char *)*MEMORY[0x1E4F20270]);
            if (int64) {
              goto LABEL_14;
            }
            uint64_t uint64 = xpc_dictionary_get_uint64(0, (const char *)*MEMORY[0x1E4F20280]);
            uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
            if (!DerivedStorage)
            {
              uint64_t v11 = FigSignalErrorAt();
LABEL_12:
              int64_t int64 = v11;
              if (!v11) {
                *a4 = 0;
              }
              goto LABEL_14;
            }
            CFTypeRef v10 = DerivedStorage;
            *uint64_t DerivedStorage = uint64;
            DerivedStorage[8] = FigSemaphoreCreate();
            *(_OWORD *)(v10 + 3) = *a1;
            uint64_t v7 = FigXPCRemoteClientAssociateObject();
            if (!v7)
            {
              v10[5] = 0;
              v10[7] = 0;
              uint64_t v11 = FigCaptionSerializerCreate();
              goto LABEL_12;
            }
          }
        }
      }
    }
    int64_t int64 = v7;
  }
LABEL_14:
  FigXPCRemoteClientKillServerOnTimeout();
  return int64;
}

int64_t FigTX3GCaptionGroupConverterFromSampleBufferCreateRemote(_OWORD *a1, uint64_t a2, void *a3)
{
  return remoteXPCFigCaptionGroupConverter_CreateConverter(a1, a2, 1954034535, a3);
}

uint64_t remoteXPCFigCaptionGroupConverterClient_DeadConnectionCallback()
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  *(unsigned char *)(result + 9) = 1;
  return result;
}

uint64_t remoteXPCFigCaptionGroupConverterClient_HandleServerMessage()
{
  uint64_t OpCode = FigXPCMessageGetOpCode();
  if (OpCode) {
    return OpCode;
  }
  else {
    return 4294951138;
  }
}

uint64_t remoteXPCFigCaptionGroupConverter_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = DerivedStorage;
  if (DerivedStorage)
  {
    if (!*(unsigned char *)(DerivedStorage + 8))
    {
      *(unsigned char *)(DerivedStorage + 8) = 1;
      if (!FigXPCRemoteClientDisassociateObject()
        && (*(unsigned char *)(v1 + 9)
         || !FigXPCCreateBasicMessage() && !FigXPCRemoteClientSendSyncMessage()))
      {
        *(void *)uint64_t v1 = 0;
      }
    }
  }
  else
  {
    FigSignalErrorAt();
  }
  FigXPCRelease();
  int v2 = *(const void **)(v1 + 40);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(v1 + 40) = 0;
  }
  uint64_t v3 = *(const void **)(v1 + 48);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(v1 + 48) = 0;
  }
  CFTypeID v4 = *(const void **)(v1 + 56);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(v1 + 56) = 0;
  }
  CGFloat v5 = *(const void **)(v1 + 16);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(v1 + 16) = 0;
  }
  return FigSemaphoreDestroy();
}

__CFString *remoteXPCFigCaptionGroupConverter_CopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = CFGetAllocator(a1);
  CFMutableStringRef Mutable = CFStringCreateMutable(v3, 0);
  CFIndex v5 = CFGetRetainCount(a1);
  if (*(unsigned char *)(DerivedStorage + 9)) {
    double v6 = " SERVER DIED";
  }
  else {
    double v6 = "";
  }
  CFStringAppendFormat(Mutable, 0, @"<FigCaptionGroupConverterRemote(XPC) %p retainCount: %ld ObjectID: %016llx%s>", a1, v5, *(void *)DerivedStorage, v6);
  return Mutable;
}

uint64_t remoteXPCFigCaptionGroupConverter_CopyProperty(uint64_t a1)
{
  uint64_t v4 = 0;
  uint64_t ObjectID = remoteXPCMutableComposition_GetObjectID(a1, &v4);
  if (!ObjectID) {
    uint64_t ObjectID = FigXPCSendStdCopyPropertyMessage();
  }
  uint64_t v2 = ObjectID;
  FigXPCRemoteClientKillServerOnTimeout();
  return v2;
}

uint64_t remoteXPCFigCaptionGroupConverter_SetProperty(uint64_t a1)
{
  uint64_t v4 = 0;
  uint64_t ObjectID = remoteXPCMutableComposition_GetObjectID(a1, &v4);
  if (!ObjectID) {
    uint64_t ObjectID = FigXPCSendStdSetPropertyMessage();
  }
  uint64_t v2 = ObjectID;
  FigXPCRemoteClientKillServerOnTimeout();
  return v2;
}

int64_t remoteXPCFigCaptionGroupConverter_AddSampleBuffer(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  uint64_t ObjectID = remoteXPCMutableComposition_GetObjectID(a1, v4);
  if (ObjectID) {
    goto LABEL_9;
  }
  if (!CMBaseObjectGetDerivedStorage())
  {
    uint64_t ObjectID = FigSignalErrorAt();
LABEL_9:
    int64_t int64 = ObjectID;
    goto LABEL_7;
  }
  uint64_t ObjectID = FigXPCCreateBasicMessage();
  if (ObjectID) {
    goto LABEL_9;
  }
  uint64_t ObjectID = FigXPCMessageAddCMSampleBuffer();
  if (ObjectID) {
    goto LABEL_9;
  }
  uint64_t ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (ObjectID) {
    goto LABEL_9;
  }
  int64_t int64 = xpc_dictionary_get_int64(0, (const char *)*MEMORY[0x1E4F20270]);
LABEL_7:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return int64;
}

uint64_t remoteXPCFigCaptionGroupConverter_Finish(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  uint64_t ObjectID = remoteXPCMutableComposition_GetObjectID(a1, v4);
  if (ObjectID) {
    goto LABEL_9;
  }
  if (!CMBaseObjectGetDerivedStorage())
  {
    uint64_t ObjectID = FigSignalErrorAt();
LABEL_9:
    uint64_t v2 = ObjectID;
    goto LABEL_7;
  }
  uint64_t ObjectID = FigXPCCreateBasicMessage();
  if (ObjectID) {
    goto LABEL_9;
  }
  uint64_t ObjectID = FigXPCRemoteClientSendSyncMessage();
  if (ObjectID) {
    goto LABEL_9;
  }
  uint64_t v2 = FigSemaphoreWaitRelative();
  if (v2) {
    FigSignalErrorAt();
  }
LABEL_7:
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v2;
}

uint64_t FigSampleBufferProcessorCreateForTemporalMetadataFilter(uint64_t a1, const void *a2, void *a3)
{
  if (a3)
  {
    FigSampleBufferProcessorGetClassID();
    uint64_t v5 = CMDerivedObjectCreate();
    if (!v5)
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      if (a2) {
        CFTypeRef v7 = CFRetain(a2);
      }
      else {
        CFTypeRef v7 = 0;
      }
      uint64_t v5 = 0;
      *(void *)(DerivedStorage + 56) = v7;
      *(unsigned char *)(DerivedStorage + 80) = 1;
      *a3 = 0;
    }
    return v5;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t sbp_tmf_invalidate()
{
  *(void *)(CMBaseObjectGetDerivedStorage() + 16) = 0;
  return 0;
}

void sbp_tmf_finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)DerivedStorage) {
    CFRelease(*(CFTypeRef *)DerivedStorage);
  }
  uint64_t v1 = *(const void **)(DerivedStorage + 8);
  if (v1) {
    CFRelease(v1);
  }
  uint64_t v2 = *(const void **)(DerivedStorage + 40);
  if (v2) {
    CFRelease(v2);
  }
  CFAllocatorRef v3 = *(const void **)(DerivedStorage + 48);
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = *(const void **)(DerivedStorage + 56);
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = *(const void **)(DerivedStorage + 64);
  if (v5) {
    CFRelease(v5);
  }
  double v6 = *(const void **)(DerivedStorage + 72);
  if (v6)
  {
    CFRelease(v6);
  }
}

__CFString *sbp_tmf_copyDebugDescription(uint64_t a1)
{
  CFMutableStringRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<FigSampleBufferProcessor_TemporalMetadataFilter %p>", a1);
  return Mutable;
}

uint64_t sbp_tmf_copyProperty(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a4 && a2)
  {
    CFTypeRef v7 = (void *)DerivedStorage;
    if (CFEqual(a2, @"SampleBufferProcessor_TransferMetadataWhitelistIdentifiers"))
    {
      uint64_t v8 = (const void *)v7[7];
      if (v8)
      {
LABEL_5:
        CFTypeRef v9 = CFRetain(v8);
LABEL_9:
        uint64_t result = 0;
        *a4 = v9;
        return result;
      }
LABEL_8:
      CFTypeRef v9 = 0;
      goto LABEL_9;
    }
    if (CFEqual(a2, @"SampleBufferProcessor_TransferMetadataBlacklistIdentifiers"))
    {
      uint64_t v8 = (const void *)v7[8];
      if (v8) {
        goto LABEL_5;
      }
      goto LABEL_8;
    }
    if (CFEqual(a2, @"SampleBufferProcessor_TransferMetadataKeepValidIdentifiers"))
    {
      uint64_t v8 = (const void *)v7[9];
      if (v8) {
        goto LABEL_5;
      }
      goto LABEL_8;
    }
    return 4294954501;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t sbp_tmf_setProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    double v6 = (void *)DerivedStorage;
    if (CFEqual(a2, @"SampleBufferProcessor_TransferMetadataWhitelistIdentifiers"))
    {
      CFTypeRef v7 = (const void *)v6[7];
      v6[7] = a3;
      if (!a3)
      {
LABEL_5:
        if (v7) {
          CFRelease(v7);
        }
        return 0;
      }
    }
    else if (CFEqual(a2, @"SampleBufferProcessor_TransferMetadataBlacklistIdentifiers"))
    {
      CFTypeRef v7 = (const void *)v6[8];
      v6[8] = a3;
      if (!a3) {
        goto LABEL_5;
      }
    }
    else
    {
      if (!CFEqual(a2, @"SampleBufferProcessor_TransferMetadataKeepValidIdentifiers")) {
        return 4294954501;
      }
      CFTypeRef v7 = (const void *)v6[9];
      v6[9] = a3;
      if (!a3) {
        goto LABEL_5;
      }
    }
    CFRetain(a3);
    goto LABEL_5;
  }

  return FigSignalErrorAt();
}

uint64_t sbp_tmf_setOutputCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(void *)(DerivedStorage + 16) = a2;
  *(void *)(DerivedStorage + 24) = a3;
  return 0;
}

uint64_t sbp_tmf_processSampleBuffer(uint64_t a1, opaqueCMSampleBuffer *a2)
{
  uint64_t v117 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMFormatDescriptionRef FormatDescription = CMSampleBufferGetFormatDescription(a2);
  targetBBuf = CMSampleBufferGetDataBuffer(a2);
  if (!FormatDescription)
  {
    if (a2)
    {
      CFTypeRef v23 = *(void (**)(void, void, opaqueCMSampleBuffer *))(DerivedStorage + 16);
      if (v23) {
        v23(*(void *)(DerivedStorage + 24), 0, a2);
      }
    }
    return 0;
  }
  uint64_t v103 = DerivedStorage;
  if (!CMFormatDescriptionEqual(*(CMFormatDescriptionRef *)DerivedStorage, FormatDescription))
  {
    CMFormatDescriptionRef v5 = *(CMFormatDescriptionRef *)DerivedStorage;
    *(void *)uint64_t DerivedStorage = FormatDescription;
    CFRetain(FormatDescription);
    if (v5) {
      CFRelease(v5);
    }
    double v6 = *(const void **)(DerivedStorage + 8);
    if (v6)
    {
      CFRelease(v6);
      *(void *)(DerivedStorage + 8) = 0;
    }
    FourCharCode MediaSubType = CMFormatDescriptionGetMediaSubType(FormatDescription);
    *(_DWORD *)(DerivedStorage + 32) = MediaSubType;
    CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    if (MediaSubType != 1835360888)
    {
      uint64_t v25 = CMFormatDescriptionCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0x6D657461u, 0x706C7374u, 0, (CMFormatDescriptionRef *)(DerivedStorage + 8));
      if (v25) {
        return v25;
      }
      goto LABEL_88;
    }
    int v98 = a2;
    CFTypeRef v9 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
    CFMutableArrayRef Mutable = CFArrayCreateMutable(v8, 0, MEMORY[0x1E4F1D510]);
    CFMutableArrayRef v11 = CFArrayCreateMutable(v8, 0, v9);
    uint64_t v12 = *(const void **)(DerivedStorage + 40);
    if (v12)
    {
      CFRelease(v12);
      *(void *)(DerivedStorage + 40) = 0;
    }
    CFRange v13 = *(const void **)(DerivedStorage + 48);
    if (v13)
    {
      CFRelease(v13);
      *(void *)(DerivedStorage + 48) = 0;
    }
    unsigned int v104 = (const opaqueCMFormatDescription **)(DerivedStorage + 8);
    CFDictionaryRef Extensions = CMFormatDescriptionGetExtensions(FormatDescription);
    CFDictionaryRef v15 = Extensions;
    CFTypeRef v16 = (const void **)MEMORY[0x1E4F1ED18];
    CFAllocatorRef allocator = v8;
    if (Extensions)
    {
      CFTypeID v17 = CFGetTypeID(Extensions);
      if (v17 == CFDictionaryGetTypeID())
      {
        CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v15, *v16);
        if (Value)
        {
          CFDictionaryRef v19 = Value;
          int64_t Count = CFDictionaryGetCount(Value);
          CFArrayRef v21 = *(const __CFArray **)(DerivedStorage + 56);
          if (v21) {
            CFIndex v22 = CFArrayGetCount(v21);
          }
          else {
            CFIndex v22 = 0;
          }
          CFArrayRef v27 = *(const __CFArray **)(v103 + 64);
          if (v27) {
            CFIndex v28 = CFArrayGetCount(v27);
          }
          else {
            CFIndex v28 = 0;
          }
          CFDictionaryRef v15 = (const __CFDictionary *)malloc_type_calloc(Count, 8uLL, 0x6004044C4A2DFuLL);
          uint64_t v26 = (const void **)malloc_type_calloc(Count, 8uLL, 0x6004044C4A2DFuLL);
          CFDictionaryGetKeysAndValues(v19, (const void **)v15, v26);
          if (Count >= 1)
          {
            CFDictionaryRef v100 = v15;
            uint64_t v29 = 0;
            while (1)
            {
              FigMetadataKeyGetLocalIDUInt32();
              IdentifierForLocalID = (const void *)FigMetadataFormatDescriptionGetIdentifierForLocalID();
              CFArrayRef v31 = *(const __CFArray **)(v103 + 56);
              if (v31)
              {
                v118.location = 0;
                v118.length = v22;
                if (CFArrayContainsValue(v31, v118, IdentifierForLocalID))
                {
                  if (FigCFArrayAppendInt32()) {
                    break;
                  }
                }
              }
              CFArrayRef v32 = *(const __CFArray **)(v103 + 64);
              if (v32)
              {
                v119.location = 0;
                v119.length = v28;
                if (CFArrayContainsValue(v32, v119, IdentifierForLocalID))
                {
                  if (FigCFArrayAppendInt32()) {
                    break;
                  }
                }
              }
              if (Count == ++v29)
              {
                uint64_t DerivedStorage = v103;
                CFDictionaryRef v15 = v100;
                goto LABEL_39;
              }
            }
            uint64_t DerivedStorage = v103;
            CFDictionaryRef v15 = v100;
LABEL_43:
            free(v26);
            free(v15);
            if (v11) {
              CFRelease(v11);
            }
            if (Mutable) {
              CFRelease(Mutable);
            }
            CMTimeEpoch v34 = *(void *)(DerivedStorage + 40);
            CMTimeEpoch v33 = *(void *)(DerivedStorage + 48);
            CFArrayRef v35 = *(OpaqueCMBlockBuffer **)(DerivedStorage + 72);
            CMBlockBufferRef blockBufferOut = 0;
            uint64_t v36 = (const opaqueCMFormatDescription *)CFRetain(FormatDescription);
            CMFormatDescriptionRef desc = v36;
            CFDictionaryRef v37 = CMFormatDescriptionGetExtensions(v36);
            a2 = v98;
            if (v37) {
              CFDictionaryRef v38 = (CFDictionaryRef)CFRetain(v37);
            }
            else {
              CFDictionaryRef v38 = 0;
            }
            CFArrayRef Identifiers = CMMetadataFormatDescriptionGetIdentifiers(FormatDescription);
            if (Identifiers)
            {
              if (v35 && !sbp_tmf_isSubsetOf(Identifiers, v35))
              {
                theBuffer[0] = FormatDescription;
                theBuffer[1] = v35;
                timingArrayOut.duration.CFTypeRef value = *MEMORY[0x1E4F1ED18];
                memset(&timingArrayOut.duration.timescale, 0, 24);
                *(void *)&timingArrayOut.presentationTimeStamp.CMTimeScale timescale = sbp_tmf_selectKeyByIdentifier;
                timingArrayOut.presentationTimeStamp.CMTimeEpoch epoch = (CMTimeEpoch)theBuffer;
                CMTimeValue v40 = *MEMORY[0x1E4F1F0E8];
                *(void *)&timingArrayOut.decodeTimeStamp.CMTimeScale timescale = 0;
                timingArrayOut.decodeTimeStamp.CMTimeEpoch epoch = 0;
                timingArrayOut.decodeTimeStamp.CFTypeRef value = v40;
                *(_OWORD *)CFTypeRef cf = 0u;
                *(_OWORD *)__int16 v111 = 0u;
                *(_OWORD *)__int16 v109 = 0u;
                LODWORD(v109[0]) = 1;
                if (v38)
                {
                  CFTypeRef v41 = (const void *)*MEMORY[0x1E4F1CFD0];
                  v109[1] = *(CFTypeRef *)MEMORY[0x1E4F1F120];
                  cf[0] = v41;
                  cf[1] = CFArrayCreateMutable(allocator, 0, 0);
                  v111[0] = CFArrayCreateMutable(allocator, 0, 0);
                  sbp_tmf_cfda_walk(0, v38, (uint64_t)&timingArrayOut, 0, 3uLL, (uint64_t)v109);
                  if (cf[1]) {
                    CFRelease(cf[1]);
                  }
                  if (v111[0]) {
                    CFRelease(v111[0]);
                  }
                  CFDictionaryRef v42 = (const __CFDictionary *)v111[1];
                  if (!v111[1]) {
                    CFDictionaryRef v42 = (const __CFDictionary *)CFRetain(v38);
                  }
                  CFRelease(v38);
                }
                else
                {
                  FigSignalErrorAt();
                  CFDictionaryRef v42 = 0;
                }
                CFDictionaryRef v38 = v42;
              }
              if (v34)
              {
                timingArrayOut.duration.CFTypeRef value = *MEMORY[0x1E4F1ED18];
                memset(&timingArrayOut.duration.timescale, 0, 24);
                *(void *)&timingArrayOut.presentationTimeStamp.CMTimeScale timescale = sbp_tmf_doesNotContainLocalID;
                timingArrayOut.presentationTimeStamp.CMTimeEpoch epoch = v34;
                CFDictionaryRef v43 = (const __CFDictionary *)sbp_tmf_CFDictionaryAccessorCreateAndRemoveValue(v38, (uint64_t)&timingArrayOut);
                if (v38) {
                  CFRelease(v38);
                }
                CFDictionaryRef v38 = v43;
              }
              if (v33)
              {
                timingArrayOut.duration.CFTypeRef value = *MEMORY[0x1E4F1ED18];
                memset(&timingArrayOut.duration.timescale, 0, 24);
                *(void *)&timingArrayOut.presentationTimeStamp.CMTimeScale timescale = sbp_tmf_containsLocalID;
                timingArrayOut.presentationTimeStamp.CMTimeEpoch epoch = v33;
                CFDictionaryRef v44 = (const __CFDictionary *)sbp_tmf_CFDictionaryAccessorCreateAndRemoveValue(v38, (uint64_t)&timingArrayOut);
                if (v38) {
                  CFRelease(v38);
                }
                CFDictionaryRef v38 = v44;
              }
              uint64_t v36 = desc;
              if (v38 != CMFormatDescriptionGetExtensions(desc))
              {
                if (v36)
                {
                  CFRelease(v36);
                  CMFormatDescriptionRef desc = 0;
                }
                uint64_t v45 = CMFormatDescriptionCreate(allocator, 0x6D657461u, 0x6D656278u, v38, &desc);
                if (v45) {
                  goto LABEL_78;
                }
                uint64_t v45 = CMMetadataFormatDescriptionCopyAsBigEndianMetadataDescriptionBlockBuffer(allocator, desc, 0, &blockBufferOut);
                if (v45) {
                  goto LABEL_78;
                }
                if (desc)
                {
                  CFRelease(desc);
                  CMFormatDescriptionRef desc = 0;
                }
                uint64_t v45 = CMMetadataFormatDescriptionCreateFromBigEndianMetadataDescriptionBlockBuffer(allocator, blockBufferOut, 0, &desc);
                if (v45)
                {
LABEL_78:
                  uint64_t v24 = v45;
                  goto LABEL_81;
                }
                uint64_t v36 = desc;
              }
            }
            uint64_t v24 = 0;
            *unsigned int v104 = v36;
            CMFormatDescriptionRef desc = 0;
LABEL_81:
            if (v38) {
              CFRelease(v38);
            }
            if (blockBufferOut) {
              CFRelease(blockBufferOut);
            }
            if (desc) {
              CFRelease(desc);
            }
            if (v24) {
              return v24;
            }
            goto LABEL_88;
          }
          uint64_t DerivedStorage = v103;
        }
        else
        {
          CFDictionaryRef v15 = 0;
          uint64_t v26 = 0;
        }
LABEL_39:
        if (*(void *)(DerivedStorage + 56))
        {
          *(void *)(DerivedStorage + 40) = Mutable;
          CFMutableArrayRef Mutable = 0;
        }
        if (*(void *)(DerivedStorage + 64))
        {
          *(void *)(DerivedStorage + 48) = v11;
          CFMutableArrayRef v11 = 0;
        }
        goto LABEL_43;
      }
      CFDictionaryRef v15 = 0;
    }
    uint64_t v26 = 0;
    goto LABEL_43;
  }
LABEL_88:
  if (*(_DWORD *)(DerivedStorage + 32) == 1835360888)
  {
    CMFormatDescriptionRef desc = 0;
    timingArrayOut.duration.CFTypeRef value = 0;
    v109[0] = 0;
    theBuffer[0] = 0;
    CMBlockBufferRef blockBufferOut = 0;
    CFAllocatorRef allocatora = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    uint64_t appended = FigBoxedMetadataCreateFromBlockBuffer();
    if (!appended)
    {
      unsigned int v99 = a2;
      uint64_t NumberOfItems = FigBoxedMetadataGetNumberOfItems();
      if (NumberOfItems >= 1)
      {
        uint64_t v47 = 0;
        int v101 = 0;
        size_t v48 = 0;
        while (1)
        {
          LocalIDOfItemAtIndedouble x = FigBoxedMetadataGetLocalIDOfItemAtIndex();
          SizeOfItemAtIndedouble x = FigBoxedMetadataGetSizeOfItemAtIndex();
          if (SizeOfItemAtIndex) {
            break;
          }
LABEL_126:
          if (++v47 == NumberOfItems) {
            goto LABEL_145;
          }
        }
        uint64_t v51 = SizeOfItemAtIndex;
        if (v109[0])
        {
          CFRelease(v109[0]);
          v109[0] = 0;
        }
        uint64_t appended = FigBoxedMetadataCopyValueOfItemAtIndexAsCFType();
        if (appended) {
          goto LABEL_200;
        }
        size_t v52 = v51 + 8;
        CMFormatDescriptionRef v53 = *(CMFormatDescriptionRef *)DerivedStorage;
        CFTypeRef v54 = v109[0];
        CFArrayRef v55 = *(const __CFArray **)(DerivedStorage + 40);
        CFArrayRef v56 = *(const __CFArray **)(DerivedStorage + 48);
        LODWORD(valuePtr) = LocalIDOfItemAtIndex;
        if (!((unint64_t)v55 | (unint64_t)v56)) {
          goto LABEL_121;
        }
        CFMutableArrayRef v57 = CFArrayCreateMutable(allocatora, 0, MEMORY[0x1E4F1D510]);
        if (!v57)
        {
LABEL_120:
          int v101 = 1;
LABEL_125:
          v48 += v52;
          goto LABEL_126;
        }
        CFMutableArrayRef v58 = v57;
        if (v55 && !FigMetadataFormatDescriptionQuickTimeWellKnownTypeIsRecognized()
          || sbp_tmf_isARecordOrArrayCollection()
          && ((char v113 = 0, sbp_tmf_getLocalIDs((uint64_t)v53, (uint64_t)v54, v58, &v113)) || v55 && !v113))
        {
          CFRelease(v58);
          goto LABEL_120;
        }
        CFNumberRef v59 = CFNumberCreate(allocatora, kCFNumberSInt32Type, &valuePtr);
        CFArrayAppendValue(v58, v59);
        if (v55)
        {
          int isSubsetOf = sbp_tmf_isSubsetOf(v58, v55);
          BOOL v61 = isSubsetOf == 0;
          if (!isSubsetOf || !v56) {
            goto LABEL_117;
          }
        }
        else if (!v56)
        {
          goto LABEL_116;
        }
        CFIndex v62 = CFArrayGetCount(v56);
        CFIndex v63 = CFArrayGetCount(v58);
        CFIndex v64 = v63 - 1;
        if (v63 >= 1)
        {
          CFIndex v65 = 0;
          do
          {
            CFDataRef ValueAtIndex = CFArrayGetValueAtIndex(v58, v65);
            v120.location = 0;
            v120.length = v62;
            int v67 = CFArrayContainsValue(v56, v120, ValueAtIndex);
            BOOL v61 = v67 != 0;
            if (v67) {
              break;
            }
          }
          while (v64 != v65++);
LABEL_117:
          CFRelease(v58);
          if (v59) {
            CFRelease(v59);
          }
          uint64_t DerivedStorage = v103;
          if (v61) {
            goto LABEL_120;
          }
LABEL_121:
          if (theBuffer[0])
          {
            uint64_t appended = CMBlockBufferAppendBufferReference(theBuffer[0], targetBBuf, v48, v52, 0);
            if (appended) {
              goto LABEL_200;
            }
          }
          else
          {
            uint64_t appended = CMBlockBufferCreateWithBufferReference(0, targetBBuf, v48, v52, 0, theBuffer);
            if (appended) {
              goto LABEL_200;
            }
          }
          goto LABEL_125;
        }
LABEL_116:
        BOOL v61 = 0;
        goto LABEL_117;
      }
      int v101 = 0;
LABEL_145:
      CMTimeFlags v85 = theBuffer[0];
      if (theBuffer[0])
      {
        *(unsigned char *)(DerivedStorage + 80) = 1;
        int v86 = v99;
        goto LABEL_151;
      }
      int v86 = v99;
      if (!*(unsigned char *)(DerivedStorage + 80))
      {
        CMTimeFlags v85 = 0;
LABEL_151:
        DataCFIndex Length = (OpaqueCMBlockBuffer *)CMBlockBufferGetDataLength(v85);
        CMBlockBufferRef blockBufferOut = DataLength;
        if (v86) {
          CMTime v88 = (const opaqueCMFormatDescription *)CFRetain(v86);
        }
        else {
          CMTime v88 = 0;
        }
        CMFormatDescriptionRef desc = v88;
        if (*(void *)DerivedStorage == *(void *)(DerivedStorage + 8) && !v101)
        {
          CMTime v89 = 0;
          if (!DataLength) {
            goto LABEL_170;
          }
          goto LABEL_167;
        }
        CMItemCount valuePtr = 0;
        Outputuint64_t SampleTimingInfoArray = CMSampleBufferGetOutputSampleTimingInfoArray(v86, 0, 0, &valuePtr);
        uint64_t v24 = OutputSampleTimingInfoArray;
        if (!OutputSampleTimingInfoArray || OutputSampleTimingInfoArray == -12736)
        {
          CMTime v89 = (CMSampleTimingInfo *)malloc_type_calloc(valuePtr, 0x48uLL, 0x1000040FF89C88EuLL);
          if (v89)
          {
            uint64_t v91 = CMSampleBufferGetOutputSampleTimingInfoArray(v86, valuePtr, v89, 0);
            if (!v91 || (uint64_t v24 = v91, v91 == -12736))
            {
              if (v88)
              {
                CFRelease(v88);
                CMFormatDescriptionRef desc = 0;
              }
              uint64_t v92 = CMSampleBufferCreate(allocatora, theBuffer[0], 1u, 0, 0, *(CMFormatDescriptionRef *)(DerivedStorage + 8), 1, valuePtr, v89, 1, (const size_t *)&blockBufferOut, &desc);
              if (!v92)
              {
                CMPropagateAttachments(v86, desc);
                CMRemoveAttachment(desc, (CFStringRef)*MEMORY[0x1E4F1F308]);
                CMRemoveAttachment(desc, (CFStringRef)*MEMORY[0x1E4F1F300]);
                CMRemoveAttachment(desc, (CFStringRef)*MEMORY[0x1E4F1F2E8]);
                CMRemoveAttachment(desc, (CFStringRef)*MEMORY[0x1E4F1F2C8]);
                if (!blockBufferOut)
                {
LABEL_170:
                  uint64_t v24 = 0;
                  goto LABEL_171;
                }
LABEL_167:
                if (desc)
                {
                  unsigned int v93 = *(void (**)(void, void))(DerivedStorage + 16);
                  if (v93) {
                    v93(*(void *)(DerivedStorage + 24), 0);
                  }
                }
                goto LABEL_170;
              }
              uint64_t v24 = v92;
            }
          }
LABEL_171:
          free(v89);
          if (desc) {
            CFRelease(desc);
          }
          if (theBuffer[0]) {
            CFRelease(theBuffer[0]);
          }
          if (v109[0]) {
            CFRelease(v109[0]);
          }
          BOOL v94 = (const void *)timingArrayOut.duration.value;
          if (!timingArrayOut.duration.value) {
            return v24;
          }
LABEL_198:
          CFRelease(v94);
          return v24;
        }
LABEL_201:
        CMTime v89 = 0;
        goto LABEL_171;
      }
      uint64_t appended = CMBlockBufferCreateWithMemoryBlock(allocatora, &sbp_tmf_filterMetadataBox_emptyMetadata, 8uLL, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0], 0, 0, 8uLL, 0, theBuffer);
      if (!appended)
      {
        *(unsigned char *)(DerivedStorage + 80) = 0;
        CMTimeFlags v85 = theBuffer[0];
        goto LABEL_151;
      }
    }
LABEL_200:
    uint64_t v24 = appended;
    goto LABEL_201;
  }
  v109[0] = 0;
  theBuffer[0] = 0;
  CMBlockBufferRef blockBufferOut = 0;
  CMFormatDescriptionRef desc = 0;
  MetadataItemsFromSampleBuffer = FigMetadataCreateMetadataItemsFromSampleBuffer(a2);
  CFArrayRef v70 = MetadataItemsFromSampleBuffer;
  if (MetadataItemsFromSampleBuffer)
  {
    CFArrayRef v71 = *(const __CFArray **)(DerivedStorage + 56);
    CFIndex v72 = CFArrayGetCount(MetadataItemsFromSampleBuffer);
    CFAllocatorRef v73 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFTypeRef v74 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    if (v72 >= 1)
    {
      for (CFIndex i = 0; i != v72; ++i)
      {
        uint64_t v76 = CFArrayGetValueAtIndex(v70, i);
        if (sbp_tmf_isIdentifierIn((const __CFDictionary *)v76, v71)) {
          CFArrayAppendValue(v74, v76);
        }
      }
    }
  }
  else
  {
    CFAllocatorRef v73 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFTypeRef v74 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  }
  memset(&timingArrayOut, 0, sizeof(timingArrayOut));
  CFDataRef Data = CFPropertyListCreateData(v73, v74, kCFPropertyListBinaryFormat_v1_0, 0, 0);
  if (!Data)
  {
    BlockBufferWithCFDataNoCFSetRef Copy = FigSignalErrorAt();
    goto LABEL_204;
  }
  BlockBufferWithCFDataNoCFSetRef Copy = FigCreateBlockBufferWithCFDataNoCopy();
  if (BlockBufferWithCFDataNoCopy)
  {
LABEL_204:
    uint64_t v24 = BlockBufferWithCFDataNoCopy;
    uint64_t v82 = 0;
    goto LABEL_188;
  }
  CMBlockBufferRef blockBufferOut = (CMBlockBufferRef)CFDataGetLength(Data);
  p_CMSampleTimingInfo timingArrayOut = &timingArrayOut;
  CFRange v80 = a2;
  uint64_t SampleTimingInfoArray = CMSampleBufferGetSampleTimingInfoArray(a2, 1, &timingArrayOut, (CMItemCount *)&desc);
  uint64_t v82 = 0;
  if (SampleTimingInfoArray)
  {
    uint64_t v24 = SampleTimingInfoArray;
    if (SampleTimingInfoArray != -12737) {
      goto LABEL_182;
    }
    if (desc)
    {
      uint64_t v82 = 0;
      if ((unint64_t)desc > 0x38E38E38E38E38ELL) {
        goto LABEL_181;
      }
      size_t v83 = 72 * (void)desc;
      if (!(72 * (void)desc)) {
        goto LABEL_181;
      }
      malloc_type_id_t v84 = 1556728742;
    }
    else
    {
      size_t v83 = 0;
      malloc_type_id_t v84 = 1270757447;
    }
    uint64_t v82 = (CMSampleTimingInfo *)malloc_type_malloc(v83, v84);
LABEL_181:
    uint64_t v24 = CMSampleBufferGetSampleTimingInfoArray(v80, (CMItemCount)desc, v82, 0);
LABEL_182:
    p_CMSampleTimingInfo timingArrayOut = v82;
    if (v24) {
      goto LABEL_188;
    }
  }
  uint64_t Ready = CMSampleBufferCreateReady(v73, (CMBlockBufferRef)v109[0], *(CMFormatDescriptionRef *)(v103 + 8), 1, (CMItemCount)desc, p_timingArrayOut, 1, (const size_t *)&blockBufferOut, theBuffer);
  if (Ready)
  {
    uint64_t v24 = Ready;
  }
  else
  {
    CMPropagateAttachments(v80, theBuffer[0]);
    if (theBuffer[0])
    {
      uint64_t v96 = *(void (**)(void, void))(v103 + 16);
      if (v96) {
        v96(*(void *)(v103 + 24), 0);
      }
    }
    uint64_t v24 = 0;
  }
LABEL_188:
  free(v82);
  if (theBuffer[0]) {
    CFRelease(theBuffer[0]);
  }
  if (v109[0]) {
    CFRelease(v109[0]);
  }
  if (Data) {
    CFRelease(Data);
  }
  if (v70) {
    CFRelease(v70);
  }
  if (v74)
  {
    BOOL v94 = v74;
    goto LABEL_198;
  }
  return v24;
}

uint64_t sbp_tmf_isSubsetOf(const __CFArray *a1, CFArrayRef theArray)
{
  CFIndex Count = CFArrayGetCount(theArray);
  CFIndex v5 = CFArrayGetCount(a1);
  if (v5 < 1) {
    return 1;
  }
  CFIndex v6 = v5;
  CFIndex v7 = 0;
  while (1)
  {
    CFDataRef ValueAtIndex = CFArrayGetValueAtIndex(a1, v7);
    v10.location = 0;
    v10.length = Count;
    uint64_t result = CFArrayContainsValue(theArray, v10, ValueAtIndex);
    if (!result) {
      break;
    }
    if (v6 == ++v7) {
      return 1;
    }
  }
  return result;
}

uint64_t sbp_tmf_selectKeyByIdentifier(uint64_t a1, uint64_t a2)
{
  FigMetadataKeyGetLocalIDUInt32();
  FigMetadataFormatDescriptionGetIdentifierForLocalID();
  FigMetadataFormatDescriptionGetDataTypeForLocalID();
  if (CFArrayGetCount(*(CFArrayRef *)(a2 + 8)) < 2) {
    return 1;
  }
  uint64_t v3 = 0;
  for (CFIndex i = 1; ; i += 2)
  {
    CFDataRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 8), i - 1);
    CFIndex v6 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 8), i);
    if ((!ValueAtIndex || FigCFEqual()) && (!v6 || FigCFEqual())) {
      break;
    }
    ++v3;
    CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a2 + 8));
    if (Count >= 0) {
      uint64_t v8 = Count;
    }
    else {
      uint64_t v8 = Count + 1;
    }
    if (v3 >= v8 >> 1) {
      return 1;
    }
  }
  return 0;
}

BOOL sbp_tmf_doesNotContainLocalID(const __CFDictionary *a1, const __CFArray *a2)
{
  return sbp_tmf_containsLocalID(a1, a2) == 0;
}

CFTypeRef sbp_tmf_CFDictionaryAccessorCreateAndRemoveValue(const void *a1, uint64_t a2)
{
  *(_OWORD *)CFTypeRef cf = 0u;
  *(_OWORD *)uint64_t v8 = 0u;
  long long v6 = 0u;
  LODWORD(v6) = 2;
  if (a1)
  {
    if (a2)
    {
      CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      cf[1] = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0);
      v8[0] = CFArrayCreateMutable(v4, 0, 0);
      sbp_tmf_cfda_walk(0, a1, a2, 0, 2uLL, (uint64_t)&v6);
      if (cf[1]) {
        CFRelease(cf[1]);
      }
      if (v8[0]) {
        CFRelease(v8[0]);
      }
    }
    else
    {
      FigSignalErrorAt();
    }
    CFTypeRef result = v8[1];
    if (!v8[1]) {
      return CFRetain(a1);
    }
  }
  else
  {
    FigSignalErrorAt();
    return 0;
  }
  return result;
}

uint64_t sbp_tmf_containsLocalID(const __CFDictionary *a1, const __CFArray *cf)
{
  if (cf
    && (CFTypeID v4 = CFGetTypeID(cf), v4 == CFArrayGetTypeID())
    && a1
    && (CFTypeID v5 = CFGetTypeID(a1), v5 == CFDictionaryGetTypeID()))
  {
    CFDictionaryRef Value = CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E4F1F0D0]);
    v7.length = CFArrayGetCount(cf);
    v7.location = 0;
    return CFArrayContainsValue(cf, v7, Value);
  }
  else
  {
    FigSignalErrorAt();
    return 0;
  }
}

void sbp_tmf_cfda_walk(const void *a1, const void *a2, uint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  CFArrayAppendValue(*(CFMutableArrayRef *)(a6 + 24), a2);
  CFArrayAppendValue(*(CFMutableArrayRef *)(a6 + 32), 0);
  if (a4 < a5)
  {
    CFRange v13 = (const void **)(a3 + 24 * a4);
    CFTypeRef value = 0;
    if (*v13)
    {
      if (CFDictionaryGetValueIfPresent((CFDictionaryRef)a2, *v13, (const void **)&value)) {
        sbp_tmf_cfda_walk(*v13, value, a3, a4 + 1, a5, a6);
      }
    }
    else
    {
      CFArrayRef v21 = a1;
      int64_t Count = CFDictionaryGetCount((CFDictionaryRef)a2);
      CFDictionaryRef v15 = (const void **)malloc_type_calloc(Count, 8uLL, 0xC0040B8AA526DuLL);
      CFIndex v22 = (const void **)malloc_type_calloc(Count, 8uLL, 0xC0040B8AA526DuLL);
      CFTypeRef v23 = v15;
      CFDictionaryGetKeysAndValues((CFDictionaryRef)a2, v15, v22);
      if (Count >= 1)
      {
        uint64_t v16 = a3 + 24 * a4;
        CFTypeID v17 = (void *)(v16 + 8);
        BOOL v18 = (void *)(v16 + 16);
        CFDictionaryRef v19 = v22;
        CFStringRef v20 = v23;
        do
        {
          if (!*v17 || ((unsigned int (*)(const void *, void))*v17)(*v19, *v18)) {
            sbp_tmf_cfda_walk(*v20, *v19, a3, a4 + 1, a5, a6);
          }
          ++v19;
          ++v20;
          --Count;
        }
        while (Count);
      }
      free(v22);
      free(v23);
      a1 = v21;
    }
  }
  sbp_tmf_cfda_updateAfter(a1, v12, a4, a5, (int *)a6);
}

void sbp_tmf_cfda_updateAfter(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  if (a3 == a4)
  {
    int v8 = *a5;
    if (*a5 == 2)
    {
      CFArrayRef v16 = (const __CFArray *)*((void *)a5 + 4);
      CFIndex Count = CFArrayGetCount(v16);
      CFArraySetValueAtIndex(v16, Count - 1, (const void *)3);
      CFArrayRef v18 = (const __CFArray *)*((void *)a5 + 3);
      CFIndex v13 = CFArrayGetCount(v18) - 1;
      uint64_t v14 = v18;
      CFDictionaryRef v15 = 0;
    }
    else if (v8 == 1)
    {
      CFArrayRef v19 = (const __CFArray *)*((void *)a5 + 3);
      CFIndex v20 = CFArrayGetCount(v19);
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v19, v20 - 1);
      MutableCFSetRef Copy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, ValueAtIndex);
      CFDictionarySetValue(MutableCopy, *((const void **)a5 + 1), *((const void **)a5 + 2));
      CFArrayRef v23 = (const __CFArray *)*((void *)a5 + 4);
      CFIndex v24 = CFArrayGetCount(v23);
      CFArraySetValueAtIndex(v23, v24 - 1, (const void *)2);
      CFArrayRef v25 = (const __CFArray *)*((void *)a5 + 3);
      CFIndex v13 = CFArrayGetCount(v25) - 1;
      uint64_t v14 = v25;
      CFDictionaryRef v15 = MutableCopy;
    }
    else
    {
      if (v8) {
        goto LABEL_9;
      }
      CFArrayRef v9 = (const __CFArray *)*((void *)a5 + 4);
      CFIndex v10 = CFArrayGetCount(v9);
      CFArraySetValueAtIndex(v9, v10 - 1, (const void *)1);
      uint64_t v12 = (__CFDictionary *)*((void *)a5 + 2);
      CFArrayRef v11 = (const __CFArray *)*((void *)a5 + 3);
      CFIndex v13 = CFArrayGetCount(v11) - 1;
      uint64_t v14 = v11;
      CFDictionaryRef v15 = v12;
    }
    CFArraySetValueAtIndex(v14, v13, v15);
  }
LABEL_9:
  uint64_t v26 = sbp_tmf_cfda_stackPop(*((const __CFArray **)a5 + 3));
  unsigned int v27 = sbp_tmf_cfda_stackPop(*((const __CFArray **)a5 + 4));
  unsigned int v28 = v27;
  if (a3)
  {
    if (!v27) {
      return;
    }
    CFArrayRef v29 = (const __CFArray *)*((void *)a5 + 3);
    CFIndex v30 = CFArrayGetCount(v29);
    CFArrayRef v31 = (void *)CFArrayGetValueAtIndex(v29, v30 - 1);
    CFArrayRef v32 = (const __CFArray *)*((void *)a5 + 4);
    CFIndex v33 = CFArrayGetCount(v32);
    if (!CFArrayGetValueAtIndex(v32, v33 - 1))
    {
      CFArrayRef v34 = (const __CFArray *)*((void *)a5 + 3);
      CFIndex v35 = CFArrayGetCount(v34);
      CFDictionaryRef v36 = (const __CFDictionary *)CFArrayGetValueAtIndex(v34, v35 - 1);
      CFArrayRef v31 = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, v36);
      CFArrayRef v37 = (const __CFArray *)*((void *)a5 + 3);
      CFIndex v38 = CFArrayGetCount(v37);
      CFArraySetValueAtIndex(v37, v38 - 1, v31);
      CFArrayRef v39 = (const __CFArray *)*((void *)a5 + 4);
      CFIndex v40 = CFArrayGetCount(v39);
      CFArraySetValueAtIndex(v39, v40 - 1, (const void *)2);
    }
    if (v28 == 3)
    {
      CFDictionaryRemoveValue((CFMutableDictionaryRef)v31, a1);
      return;
    }
    CFDictionaryReplaceValue((CFMutableDictionaryRef)v31, a1, v26);
  }
  else
  {
    if (v26) {
      CFTypeRef v41 = CFRetain(v26);
    }
    else {
      CFTypeRef v41 = 0;
    }
    *((void *)a5 + 5) = v41;
  }
  if (v28 == 2 && v26)
  {
    CFRelease(v26);
  }
}

const void *sbp_tmf_cfda_stackPop(const __CFArray *a1)
{
  CFIndex Count = CFArrayGetCount(a1);
  CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(a1, Count - 1);
  CFIndex v4 = CFArrayGetCount(a1);
  CFArrayRemoveValueAtIndex(a1, v4 - 1);
  return ValueAtIndex;
}

CFArrayRef sbp_tmf_isARecordOrArrayCollection()
{
  CFArrayRef result = (const __CFArray *)FigMetadataFormatDescriptionGetConformingDataTypesForLocalID();
  if (result)
  {
    CFArrayRef v1 = result;
    CFIndex Count = CFArrayGetCount(result);
    v4.location = 0;
    v4.length = Count;
    int v3 = CFArrayContainsValue(v1, v4, (const void *)*MEMORY[0x1E4F217A8]);
    v5.location = 0;
    v5.length = Count;
    return (const __CFArray *)((v3 | CFArrayContainsValue(v1, v5, (const void *)*MEMORY[0x1E4F21790])) != 0);
  }
  return result;
}

uint64_t sbp_tmf_getLocalIDs(uint64_t a1, uint64_t a2, __CFArray *a3, char *a4)
{
  CFTypeRef cf = 0;
  char v17 = 0;
  uint64_t NumberOfItems = FigBoxedMetadataGetNumberOfItems();
  if (NumberOfItems < 1)
  {
LABEL_13:
    uint64_t v14 = 0;
    char v9 = 1;
    goto LABEL_15;
  }
  uint64_t v8 = NumberOfItems;
  char v9 = 0;
  uint64_t v10 = 0;
  CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  while (1)
  {
    LocalIDOfItemAtIndedouble x = 0;
    LocalIDOfItemAtIndedouble x = FigBoxedMetadataGetLocalIDOfItemAtIndex();
    if (!FigMetadataFormatDescriptionQuickTimeWellKnownTypeIsRecognized())
    {
LABEL_14:
      uint64_t v14 = 0;
      goto LABEL_15;
    }
    CFNumberRef v12 = CFNumberCreate(v11, kCFNumberSInt32Type, &LocalIDOfItemAtIndex);
    CFArrayAppendValue(a3, v12);
    if (v12) {
      CFRelease(v12);
    }
    if (sbp_tmf_isARecordOrArrayCollection()) {
      break;
    }
LABEL_12:
    if (v8 == ++v10) {
      goto LABEL_13;
    }
  }
  uint64_t LocalIDs = FigBoxedMetadataCopyValueOfItemAtIndexAsCFType();
  if (!LocalIDs)
  {
    uint64_t LocalIDs = sbp_tmf_getLocalIDs(a1, cf, a3, &v17);
    char v9 = v17;
    if (!LocalIDs)
    {
      if (!v17) {
        goto LABEL_14;
      }
      if (cf)
      {
        CFRelease(cf);
        CFTypeRef cf = 0;
      }
      goto LABEL_12;
    }
  }
  uint64_t v14 = LocalIDs;
LABEL_15:
  *a4 = v9;
  if (cf) {
    CFRelease(cf);
  }
  return v14;
}

const void *sbp_tmf_isIdentifierIn(const __CFDictionary *a1, CFArrayRef theArray)
{
  CFStringRef identifierOut = 0;
  if (theArray) {
    CFIndex Count = CFArrayGetCount(theArray);
  }
  else {
    CFIndex Count = 0;
  }
  CFDictionaryRef Value = CFDictionaryGetValue(a1, @"key");
  if (Value)
  {
    CFStringRef v6 = (const __CFString *)CFDictionaryGetValue(a1, @"keyspace");
    if (v6 && (v7 = v6, CFTypeID v8 = CFGetTypeID(v6), v8 == CFStringGetTypeID()))
    {
      OSStatus v9 = CMMetadataCreateIdentifierForKeyAndKeySpace((CFAllocatorRef)*MEMORY[0x1E4F1CF80], Value, v7, &identifierOut);
      CFDictionaryRef Value = 0;
      CFStringRef v10 = identifierOut;
      if (theArray && !v9)
      {
        v13.location = 0;
        v13.length = Count;
        CFDictionaryRef Value = (const void *)CFArrayContainsValue(theArray, v13, identifierOut);
        CFStringRef v10 = identifierOut;
      }
      if (v10) {
        CFRelease(v10);
      }
    }
    else
    {
      return 0;
    }
  }
  return Value;
}

uint64_t FigTTMLDocumentWriterRegionTimelineAddRegionSlice(uint64_t a1, long long *a2, uint64_t a3)
{
  CFArrayRef v37 = 0;
  v38[0] = 0;
  if (!a1)
  {
    uint64_t v5 = FigSignalErrorAt();
    goto LABEL_10;
  }
  if (!a3
    || (*((unsigned char *)a2 + 12) & 1) == 0
    || (*((unsigned char *)a2 + 36) & 1) == 0
    || *((void *)a2 + 5)
    || (*((void *)a2 + 3) & 0x8000000000000000) != 0)
  {
    uint64_t Mutable = FigSignalErrorAt();
    goto LABEL_7;
  }
  CFTypeID v8 = (_OWORD *)(a1 + 16);
  if ((*(unsigned char *)(a1 + 28) & 1) == 0
    || (*(unsigned char *)(a1 + 52) & 1) == 0
    || *(void *)(a1 + 56)
    || (*(void *)(a1 + 40) & 0x8000000000000000) != 0)
  {
    long long v9 = *a2;
    long long v10 = a2[2];
    *(_OWORD *)(a1 + 32) = a2[1];
    *(_OWORD *)(a1 + 48) = v10;
    *CFTypeID v8 = v9;
  }
  else
  {
    long long v30 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)&time.start.CFTypeRef value = *v8;
    *(_OWORD *)&time.start.CMTimeEpoch epoch = v30;
    *(_OWORD *)&time.duration.CMTimeScale timescale = *(_OWORD *)(a1 + 48);
    long long v31 = a2[1];
    *(_OWORD *)&otherRange.start.CFTypeRef value = *a2;
    *(_OWORD *)&otherRange.start.CMTimeEpoch epoch = v31;
    *(_OWORD *)&otherRange.duration.CMTimeScale timescale = a2[2];
    CMTimeRangeGetUnion(&v36, &time, &otherRange);
    long long v32 = *(_OWORD *)&v36.start.epoch;
    *CFTypeID v8 = *(_OWORD *)&v36.start.value;
    v8[1] = v32;
    CFTypeRef v8[2] = *(_OWORD *)&v36.duration.timescale;
  }
  uint64_t CMBaseObject = FigCaptionRegionGetCMBaseObject();
  uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v12) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  uint64_t v14 = *(uint64_t (**)(uint64_t, void, void, CFTypeRef *))(v13 + 48);
  if (!v14)
  {
LABEL_54:
    uint64_t v5 = 4294954514;
    goto LABEL_8;
  }
  uint64_t v15 = *MEMORY[0x1E4F1CF80];
  uint64_t Mutable = v14(CMBaseObject, *MEMORY[0x1E4F20078], *MEMORY[0x1E4F1CF80], v38);
  if (Mutable)
  {
LABEL_7:
    uint64_t v5 = Mutable;
    goto LABEL_8;
  }
  if (v38[0])
  {
    CFIndex Count = CFArrayGetCount((CFArrayRef)v38[0]);
    if (Count >= 1)
    {
      CFIndex v17 = Count;
      CFIndex v18 = 0;
      CFIndex v33 = Count;
      while (1)
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v38[0], v18);
        if (v37)
        {
          CFRelease(v37);
          CFArrayRef v37 = 0;
        }
        uint64_t v20 = FigCaptionRegionGetCMBaseObject();
        uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v22 = v21 ? v21 : 0;
        CFArrayRef v23 = *(uint64_t (**)(uint64_t, const void *, uint64_t, const void **))(v22 + 48);
        if (!v23) {
          goto LABEL_54;
        }
        uint64_t Mutable = v23(v20, ValueAtIndex, v15, &v37);
        if (Mutable) {
          goto LABEL_7;
        }
        if (v37)
        {
          CFTypeID v24 = CFGetTypeID(v37);
          if (v24 == FigCaptionDynamicStyleGetTypeID())
          {
            if (!CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 64), ValueAtIndex))
            {
              FigCaptionDynamicStyleGetInitialValue();
              uint64_t Mutable = FigCaptionDynamicStyleCreateMutable();
              if (Mutable) {
                goto LABEL_7;
              }
              CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 64), ValueAtIndex, 0);
            }
            long long v25 = a2[1];
            *(_OWORD *)&v36.start.CFTypeRef value = *a2;
            *(_OWORD *)&v36.start.CMTimeEpoch epoch = v25;
            *(_OWORD *)&v36.duration.CMTimeScale timescale = a2[2];
            *(_OWORD *)&time.start.CFTypeRef value = *(_OWORD *)&v36.start.value;
            time.start.CMTimeEpoch epoch = *((void *)a2 + 2);
            CMTimeGetSeconds(&time.start);
            time.CMTime start = v36.duration;
            CMTimeGetSeconds(&time.start);
            time.start.CFTypeRef value = 0;
            KeyFrameCFIndex Count = FigCaptionDynamicStyleGetKeyFrameCount();
            if (KeyFrameCount < 1)
            {
LABEL_47:
              uint64_t v5 = 0;
            }
            else
            {
              uint64_t v27 = KeyFrameCount;
              uint64_t v28 = 0;
              while (1)
              {
                otherRange.start.CFTypeRef value = 0;
                if (time.start.value)
                {
                  CFRelease((CFTypeRef)time.start.value);
                  time.start.CFTypeRef value = 0;
                }
                uint64_t v29 = FigCaptionDynamicStyleCopyKeyFrameValueAtIndex();
                if (v29) {
                  break;
                }
                uint64_t v29 = FigCaptionDynamicStyleAddKeyFrameValue();
                if (v29) {
                  break;
                }
                if (v27 == ++v28) {
                  goto LABEL_47;
                }
              }
              uint64_t v5 = v29;
            }
            CFIndex v17 = v33;
            if (time.start.value) {
              CFRelease((CFTypeRef)time.start.value);
            }
            if (v5) {
              goto LABEL_8;
            }
          }
          else if (v37)
          {
            CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 64), ValueAtIndex, v37);
          }
        }
        uint64_t v5 = 0;
        if (++v18 == v17) {
          goto LABEL_8;
        }
      }
    }
  }
  uint64_t v5 = 0;
LABEL_8:
  if (v37) {
    CFRelease(v37);
  }
LABEL_10:
  if (v38[0]) {
    CFRelease(v38[0]);
  }
  return v5;
}

uint64_t FigTTMLDocumentWriterRegionTimelineIsAnimated(uint64_t a1)
{
  unsigned __int8 context = 0;
  if (a1)
  {
    CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 64), (CFDictionaryApplierFunction)propertyIsAnimated, &context);
    return context;
  }
  else
  {
    FigSignalErrorAt();
    return 0;
  }
}

void propertyIsAnimated(int a1, CFTypeRef cf, unsigned char *a3)
{
  if (cf)
  {
    CFTypeID v4 = CFGetTypeID(cf);
    if (v4 == FigCaptionDynamicStyleGetTypeID() && FigCaptionDynamicStyleGetKeyFrameCount() >= 2) {
      *a3 = 1;
    }
  }
}

uint64_t FigTTMLDocumentWriterRegionTimelineCopyProperty(uint64_t a1, CFTypeRef cf, void *a3)
{
  if (a1)
  {
    if (cf)
    {
      CFTypeID v6 = CFGetTypeID(cf);
      if (v6 == CFStringGetTypeID())
      {
        CFDictionaryRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 64), cf);
        CFTypeID v8 = Value;
        if (Value)
        {
          CFRetain(Value);
          if (!a3)
          {
            CFRelease(v8);
            return 0;
          }
        }
        else if (!a3)
        {
          return 0;
        }
        *a3 = v8;
        return 0;
      }
    }
  }

  return FigSignalErrorAt();
}

_OWORD *FigTTMLDocumentWriterRegionTimelineGetTimeRange@<X0>(_OWORD *result@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2 = MEMORY[0x1E4F1FA20];
  long long v3 = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 16);
  *a2 = *MEMORY[0x1E4F1FA20];
  a2[1] = v3;
  a2[2] = *(_OWORD *)(v2 + 32);
  if (!result) {
    return (_OWORD *)FigSignalErrorAt();
  }
  long long v4 = result[2];
  *a2 = result[1];
  a2[1] = v4;
  a2[2] = result[3];
  return result;
}

uint64_t FigTTMLDocumentWriterRegionTimelineWriteAttributesAndSetElements(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 && a2 && a3)
  {
    v5[0] = a1;
    v5[1] = a2;
    v5[2] = a3;
    uint64_t v6 = 0;
    CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 64), (CFDictionaryApplierFunction)writeEachPropertyToAttributeAndSetElements, v5);
    return v6;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void writeEachPropertyToAttributeAndSetElements(void *key, const void *a2, uint64_t a3)
{
  CFTypeRef v25 = 0;
  CFTypeRef cf = 0;
  CFDictionaryRef Value = (uint64_t (*)(CFTypeRef, CFMutableDictionaryRef))CFDictionaryGetValue(*(CFDictionaryRef *)(a3 + 16), key);
  CFDictionaryRef v6 = 0;
  if (!a2)
  {
    CFMutableDictionaryRef Mutable = 0;
    goto LABEL_26;
  }
  CFStringRef v7 = Value;
  CFMutableDictionaryRef Mutable = 0;
  if (!Value) {
    goto LABEL_26;
  }
  CFTypeID v9 = CFGetTypeID(a2);
  if (v9 == FigCaptionDynamicStyleGetTypeID())
  {
    KeyFrameCFIndex Count = FigCaptionDynamicStyleGetKeyFrameCount();
    if (KeyFrameCount < 1)
    {
      CFDictionaryRef v6 = 0;
      CFMutableDictionaryRef Mutable = 0;
      goto LABEL_26;
    }
    uint64_t v11 = KeyFrameCount;
    uint64_t v12 = 0;
    CFDictionaryRef v6 = 0;
    CFMutableDictionaryRef Mutable = 0;
    CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    uint64_t v14 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
    while (1)
    {
      if (v25)
      {
        CFRelease(v25);
        CFTypeRef v25 = 0;
      }
      double v23 = 0.0;
      int v15 = FigCaptionDynamicStyleCopyKeyFrameValueAtIndex();
      if (v15) {
        break;
      }
      if (Mutable) {
        CFRelease(Mutable);
      }
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v13, 0, MEMORY[0x1E4F1D530], v14);
      int v15 = v7(v25, Mutable);
      if (v15) {
        break;
      }
      if (v12)
      {
        if (cf)
        {
          CFRelease(cf);
          CFTypeRef cf = 0;
        }
        int v15 = FigTTMLDocumentWriterElementCreate((uint64_t)v13, 1, *(void *)(a3 + 8), (uint64_t *)&cf);
        if (v15) {
          break;
        }
        CFDictionaryApplyFunction(Mutable, (CFDictionaryApplierFunction)setAttributeToElement_0, (void *)cf);
        long long v21 = 0u;
        long long v22 = 0u;
        long long v20 = 0u;
        FigTTMLDocumentWriterRegionTimelineGetTimeRange(*(_OWORD **)a3, &v20);
        double v16 = v23;
        *(_OWORD *)&time.CFTypeRef value = v20;
        time.CMTimeEpoch epoch = v21;
        double Seconds = CMTimeGetSeconds(&time);
        if (v6) {
          CFRelease(v6);
        }
        CMTimeMakeWithSeconds(&v18, v16 - Seconds, 1000);
        CFDictionaryRef v6 = CMTimeCopyAsDictionary(&v18, v13);
        FigTTMLDocumentWriterElementSetAttribute((uint64_t)cf, @"begin", v6);
        FigTTMLDocumentWriterElementAddChildElement(*(void *)(a3 + 8), cf);
      }
      else
      {
        CFDictionaryApplyFunction(Mutable, (CFDictionaryApplierFunction)setAttributeToElement_0, *(void **)(a3 + 8));
      }
      if (v11 == ++v12) {
        goto LABEL_26;
      }
    }
  }
  else
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    int v15 = v7(a2, Mutable);
    if (!v15)
    {
      CFDictionaryApplyFunction(Mutable, (CFDictionaryApplierFunction)setAttributeToElement_0, *(void **)(a3 + 8));
      CFDictionaryRef v6 = 0;
      goto LABEL_26;
    }
    CFDictionaryRef v6 = 0;
  }
  *(_DWORD *)(a3 + 24) = v15;
LABEL_26:
  if (cf) {
    CFRelease(cf);
  }
  if (v6) {
    CFRelease(v6);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v25) {
    CFRelease(v25);
  }
}

uint64_t FigTTMLDocumentWriterRegionTimelineCreate(void *a1)
{
  if (a1
    && (CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80],
        MEMORY[0x19970EE10](&figTTMLDocumentWriterRegionTimeline_GetTypeID_sRegisterRegionTimelineOnce, figTTMLDocumentWriterRegionTimeline_Register), (uint64_t Instance = _CFRuntimeCreateInstance()) != 0))
  {
    long long v4 = (void *)Instance;
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v2, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    v4[8] = Mutable;
    if (Mutable)
    {
      *a1 = v4;
      return 0;
    }
    else
    {
      uint64_t v7 = FigSignalErrorAt();
      CFRelease(v4);
      return v7;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void setAttributeToElement_0(const void *a1, const void *a2, uint64_t a3)
{
}

uint64_t figTTMLDocumentWriterRegionTimeline_Register()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sRegionTimelineID = result;
  return result;
}

double figTTMLDocumentWriterRegionTimeline_Init(uint64_t a1)
{
  *(void *)(a1 + 64) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

void figTTMLDocumentWriterRegionTimeline_Finalize(uint64_t a1)
{
  CFArrayRef v1 = *(const void **)(a1 + 64);
  if (v1) {
    CFRelease(v1);
  }
}

uint64_t flom_registerFigLegibleOutputManager()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sFigLegibleOutputManagerID = result;
  return result;
}

uint64_t FigLegibleOutputManagerCreate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, CFTypeRef *a5)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = a2 | a3;
  if (a4)
  {
    if (!v9) {
      goto LABEL_3;
    }
  }
  else if (v9)
  {
    goto LABEL_3;
  }
  if (a5)
  {
    *a5 = 0;
    MEMORY[0x19970EE10](&FigLegibleOutputManagerGetTypeID_sRegisterFigLegibleOutputManagerOnce, flom_registerFigLegibleOutputManager);
    uint64_t Instance = _CFRuntimeCreateInstance();
    if (Instance)
    {
      uint64_t v12 = Instance;
      CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], 0);
      *(void *)(v12 + 72) = Mutable;
      if (!Mutable
        || (CFMutableDictionaryRef v15 = CFDictionaryCreateMutable(v13, 0, MEMORY[0x1E4F1D530], 0), (*(void *)(v12 + 64) = v15) == 0))
      {
LABEL_25:
        uint64_t v21 = FigSignalErrorAt();
        goto LABEL_26;
      }
      *(unsigned char *)(v12 + 108) = 0;
      int v16 = FigSubtitleRendererUseCoreTextRendererByDefault();
      *(unsigned char *)(v12 + 109) = v16;
      if (v16)
      {
        FigCoreTextSubtitleRendererCreate((uint64_t)v13, (const void **)(v12 + 112));
LABEL_13:
        snprintf(__str, 0x100uLL, "com.apple.coremedia.legibleoutput.notificationqueue<%p>", (const void *)v12);
        dispatch_queue_t v17 = dispatch_queue_create(__str, 0);
        *(void *)(v12 + 24) = v17;
        if (v17)
        {
          snprintf(label, 0x100uLL, "com.apple.coremedia.legibleoutput.messagequeue<%p>", (const void *)v12);
          dispatch_queue_t v18 = dispatch_queue_create(label, 0);
          *(void *)(v12 + 16) = v18;
          if (v18)
          {
            if (a4 && a2 | a3)
            {
              *(void *)(v12 + 32) = a2;
              *(void *)(v12 + 40) = a3;
              *(void *)(v12 + 48) = FigCFWeakReferenceHolderCreateWithReferencedObject();
            }
            CFArrayRef v19 = 0;
            *a5 = CFRetain((CFTypeRef)v12);
            goto LABEL_24;
          }
        }
        goto LABEL_25;
      }
      long long v20 = (NSObject **)(v12 + 120);
      uint64_t v21 = FigCaptionRendererSessionCreate(0, 0, v12, (uint64_t *)(v12 + 120));
      if (!v21)
      {
        if (!*v20) {
          goto LABEL_28;
        }
        uint64_t v21 = FigCaptionSerializerCreate();
        if (!v21)
        {
          if (*(void *)(v12 + 128))
          {
            CFArrayRef v19 = FigCaptionRendererSessionSetLegibleOutputDevice(*v20, 0, 0, 1, 0.0, 0.0, 320.0, 240.0);
            if (v19)
            {
LABEL_24:
              CFRelease((CFTypeRef)v12);
              return (uint64_t)v19;
            }
            goto LABEL_13;
          }
LABEL_28:
          CFArrayRef v19 = 0;
          goto LABEL_24;
        }
      }
LABEL_26:
      CFArrayRef v19 = v21;
      goto LABEL_24;
    }
  }
LABEL_3:

  return FigSignalErrorAt();
}

uint64_t FigLegibleOutputManagerSetLegibleOutputsDict(dispatch_queue_t *cf, CFTypeRef a2)
{
  uint64_t v3 = cf;
  if (cf) {
    CFTypeRef cf = (dispatch_queue_t *)CFRetain(cf);
  }
  v6[0] = cf;
  if (a2) {
    CFTypeRef v4 = CFRetain(a2);
  }
  else {
    CFTypeRef v4 = 0;
  }
  v6[1] = v4;
  dispatch_sync_f(v3[2], v6, (dispatch_function_t)flom_setLegibleOutputsDictDo);
  return 0;
}

void flom_setLegibleOutputsDictDo(const __CFDictionary ***a1)
{
  uint64_t v3 = *a1;
  CFDictionaryRef v2 = (const __CFDictionary *)a1[1];
  CFDictionaryRef v4 = v3[7];
  v3[7] = v2;
  if (v2) {
    CFRetain(v2);
  }
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = *a1;
  CFDictionaryApplyFunction((*a1)[9], (CFDictionaryApplierFunction)flo_finalizeFigLegibleOutputApplier, 0);
  CFDictionaryRemoveAllValues(v5[9]);
  CFDictionaryRemoveAllValues(v5[8]);
  CFDictionaryRef v6 = v5[7];
  if (v6) {
    CFDictionaryApplyFunction(v6, (CFDictionaryApplierFunction)flom_rebuildFigLegibleOutputs_applier, v5);
  }
  if (*a1) {
    CFRelease(*a1);
  }
  uint64_t v7 = a1[1];
  if (v7)
  {
    CFRelease(v7);
  }
}

uint64_t FigLegibleOutputManagerSetVideoDisplaySize(dispatch_queue_t *cf, double a2, double a3)
{
  uint64_t v5 = cf;
  if (cf) {
    CFTypeRef cf = (dispatch_queue_t *)CFRetain(cf);
  }
  context[0] = cf;
  *(double *)&context[1] = a2;
  *(double *)&void context[2] = a3;
  dispatch_sync_f(v5[2], context, (dispatch_function_t)flom_setVideoDisplaySizeDo);
  return 0;
}

void flom_setVideoDisplaySizeDo(uint64_t a1)
{
  *(_OWORD *)(*(void *)a1 + 80) = *(_OWORD *)(a1 + 8);
  CFArrayRef v1 = *(const void **)a1;
  if (v1) {
    CFRelease(v1);
  }
}

uint64_t FigLegibleOutputManagerSetCaptionPipelineStrategy(dispatch_queue_t *cf, unsigned int a2)
{
  uint64_t v3 = cf;
  if (cf) {
    CFTypeRef cf = (dispatch_queue_t *)CFRetain(cf);
  }
  v5[0] = cf;
  v5[1] = a2;
  dispatch_sync_f(v3[2], v5, (dispatch_function_t)flom_setCaptionPipelineStrategyDo);
  return 0;
}

void flom_setCaptionPipelineStrategyDo(uint64_t *a1)
{
  int v1 = *((_DWORD *)a1 + 2);
  uint64_t v2 = *a1;
  *(_DWORD *)(v2 + 100) = v1;
  if (!v1)
  {
    char v3 = 1;
    goto LABEL_5;
  }
  if (v1 == 1)
  {
    char v3 = 0;
LABEL_5:
    *(unsigned char *)(v2 + 108) = v3;
  }
  CFRelease((CFTypeRef)v2);
}

uint64_t FigLegibleOutputManagerSetCaptionRenderingStrategy(dispatch_queue_t *cf, unsigned int a2)
{
  char v3 = cf;
  if (cf) {
    CFTypeRef cf = (dispatch_queue_t *)CFRetain(cf);
  }
  v5[0] = cf;
  v5[1] = a2;
  dispatch_sync_f(v3[2], v5, (dispatch_function_t)flom_setCaptionRenderingStrategyDo);
  return 0;
}

void flom_setCaptionRenderingStrategyDo(uint64_t *a1)
{
  int v1 = *((_DWORD *)a1 + 2);
  uint64_t v2 = *a1;
  *(_DWORD *)(v2 + 104) = v1;
  if (!v1)
  {
    char v3 = 1;
    goto LABEL_5;
  }
  if (v1 == 1)
  {
    char v3 = 0;
LABEL_5:
    *(unsigned char *)(v2 + 109) = v3;
  }
  CFRelease((CFTypeRef)v2);
}

uint64_t FigLegibleOutputManagerSetNonForcedEnabledForMediaType(dispatch_queue_t *cf, int a2, unsigned __int8 a3)
{
  uint64_t v5 = cf;
  if (cf) {
    CFTypeRef cf = (dispatch_queue_t *)CFRetain(cf);
  }
  uint64_t v7 = cf;
  int v8 = a2;
  int v9 = a3;
  dispatch_sync_f(v5[2], &v7, (dispatch_function_t)flom_setNonForcedEnabledForMediaTypeDo);
  return 0;
}

void flom_setNonForcedEnabledForMediaTypeDo(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 8);
  if (v2 == 1935832172)
  {
    int v6 = *(unsigned __int8 *)(a1 + 12);
    CFDictionaryRef v4 = *(CFDictionaryRef **)a1;
    *(unsigned char *)(*(void *)a1 + 97) = v6;
    if (!v6)
    {
      CFDictionaryApplyFunction(v4[9], (CFDictionaryApplierFunction)flo_clearPreviousSubtitles, 0);
      CFDictionaryRef v4 = *(CFDictionaryRef **)a1;
      uint64_t v5 = flo_clearPreviousNativeSamples;
      goto LABEL_7;
    }
  }
  else
  {
    if (v2 != 1668047728) {
      goto LABEL_8;
    }
    int v3 = *(unsigned __int8 *)(a1 + 12);
    CFDictionaryRef v4 = *(CFDictionaryRef **)a1;
    *(unsigned char *)(*(void *)a1 + 96) = v3;
    uint64_t v5 = flo_clearPreviousClosedCaptions;
    if (!v3)
    {
LABEL_7:
      CFDictionaryApplyFunction(v4[9], (CFDictionaryApplierFunction)v5, 0);
LABEL_8:
      CFDictionaryRef v4 = *(CFDictionaryRef **)a1;
      if (!*(void *)a1) {
        return;
      }
    }
  }

  CFRelease(v4);
}

CFMutableArrayRef FigLegibleOutputManagerEnsureRenderPipelinesForFormat(dispatch_queue_t *a1, const void *a2)
{
  return flom_ensureRenderPipelinesForFormat(a1, a2, 0);
}

CFMutableArrayRef flom_ensureRenderPipelinesForFormat(dispatch_queue_t *a1, const void *a2, unsigned __int8 a3)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (Mutable)
  {
    if (a1) {
      CFTypeRef v7 = CFRetain(a1);
    }
    else {
      CFTypeRef v7 = 0;
    }
    v10[0] = v7;
    if (a2) {
      CFTypeRef v8 = CFRetain(a2);
    }
    else {
      CFTypeRef v8 = 0;
    }
    void v10[2] = Mutable;
    v10[1] = v8;
    v10[3] = a3;
    dispatch_sync_f(a1[2], v10, (dispatch_function_t)flom_ensureRenderPipelinesForFormatDo);
  }
  else
  {
    FigSignalErrorAt();
  }
  return Mutable;
}

CFMutableArrayRef FigLegibleOutputManagerCreateAndRegisterRenderPipelinesForFormat(dispatch_queue_t *a1, const void *a2)
{
  return flom_ensureRenderPipelinesForFormat(a1, a2, 1u);
}

uint64_t FigLegibleOutputManagerForgetAboutLegibleOutputRenderPipelines(uint64_t a1)
{
  uint64_t context = a1;
  dispatch_sync_f(*(dispatch_queue_t *)(a1 + 16), &context, (dispatch_function_t)flom_forgetAboutLegibleOutputRenderPipelinesDo);
  return 0;
}

void flom_forgetAboutLegibleOutputRenderPipelinesDo(uint64_t a1)
{
  CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(*(void *)a1 + 64));
  CFDictionaryRef v2 = *(const __CFDictionary **)(*(void *)a1 + 72);

  CFDictionaryApplyFunction(v2, (CFDictionaryApplierFunction)flo_forgetAboutRenderPipelines, 0);
}

uint64_t FigLegibleOutputManagerForgetAboutLegibleOutputRenderPipeline(uint64_t a1, uint64_t a2)
{
  v3[0] = a1;
  v3[1] = a2;
  dispatch_sync_f(*(dispatch_queue_t *)(a1 + 16), v3, (dispatch_function_t)flom_forgetAboutLegibleOutputRenderPipelineDo);
  return 0;
}

void flom_forgetAboutLegibleOutputRenderPipelineDo(const void **a1)
{
  CFDictionaryRef Value = CFDictionaryGetValue(*((CFDictionaryRef *)*a1 + 8), a1[1]);
  if (Value)
  {
    int v3 = Value;
    CFDictionaryRef v4 = (const void *)Value[8];
    uint64_t v5 = a1[1];
    if (v4 == v5)
    {
      if (v4)
      {
        CFRelease(v4);
        v3[8] = 0;
        CFTypeRef v7 = a1[1];
      }
      else
      {
        CFTypeRef v7 = 0;
      }
      CFTypeRef v8 = (__CFDictionary ***)(v3 + 2);
    }
    else
    {
      if ((const void *)v3[9] == v5)
      {
        if (v5)
        {
          CFRelease(a1[1]);
          v3[9] = 0;
          uint64_t v5 = a1[1];
        }
        int v6 = (__CFDictionary **)v3[2];
      }
      else
      {
        FigAgglomeratorSetObjectForKey((__CFDictionary **)v3[2], 0, v5);
        int v6 = (__CFDictionary **)v3[2];
        uint64_t v5 = a1[1];
      }
      FigAgglomeratorSetObjectForKey(v6, 0, v5);
      CFTypeRef v8 = (__CFDictionary ***)(v3 + 3);
      CFTypeRef v7 = a1[1];
    }
    FigAgglomeratorSetObjectForKey(*v8, 0, v7);
    int v9 = a1[1];
    long long v10 = (__CFDictionary *)*((void *)*a1 + 8);
    CFDictionaryRemoveValue(v10, v9);
  }
}

double flom_init(uint64_t a1)
{
  *(void *)(a1 + 128) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

void flom_finalize(uint64_t a1)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  CFDictionaryRef v2 = *(const void **)(a1 + 48);
  if (v2) {
    CFRelease(v2);
  }
  int v3 = *(NSObject **)(a1 + 16);
  if (v3)
  {
    dispatch_release(v3);
    *(void *)(a1 + 16) = 0;
  }
  CFDictionaryRef v4 = *(NSObject **)(a1 + 24);
  if (v4)
  {
    dispatch_release(v4);
    *(void *)(a1 + 24) = 0;
  }
  uint64_t v5 = *(const void **)(a1 + 64);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(a1 + 64) = 0;
  }
  CFDictionaryRef v6 = *(const __CFDictionary **)(a1 + 72);
  if (v6)
  {
    CFDictionaryApplyFunction(v6, (CFDictionaryApplierFunction)flo_finalizeFigLegibleOutputApplier, 0);
    CFTypeRef v7 = *(const void **)(a1 + 72);
    if (v7)
    {
      CFRelease(v7);
      *(void *)(a1 + 72) = 0;
    }
  }
  CFTypeRef v8 = *(const void **)(a1 + 56);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(a1 + 56) = 0;
  }
  int v9 = *(const void **)(a1 + 112);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(a1 + 112) = 0;
  }
  if (!*(unsigned char *)(a1 + 109))
  {
    long long v10 = *(const void **)(a1 + 120);
    if (v10) {
      CFRelease(v10);
    }
    uint64_t v11 = *(const void **)(a1 + 128);
    if (v11)
    {
      CFRelease(v11);
    }
  }
}

__CFString *flom_CopyDebugDescription(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<FigLegibleOutputManager %p>", a1);
  return Mutable;
}

void flo_finalizeFigLegibleOutputApplier(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    int v3 = *(const void **)(a2 + 64);
    if (v3)
    {
      CFRelease(v3);
      *(void *)(a2 + 64) = 0;
    }
    CFDictionaryRef v4 = *(const void **)(a2 + 72);
    if (v4)
    {
      CFRelease(v4);
      *(void *)(a2 + 72) = 0;
    }
    keyManager_releaseCallbackContext(*(const void ***)(a2 + 8));
    *(void *)(a2 + 8) = 0;
    if (*(void *)a2)
    {
      CFRelease(*(CFTypeRef *)a2);
      *(void *)a2 = 0;
    }
    FigAgglomeratorDispose(*(const void ***)(a2 + 16));
    *(void *)(a2 + 16) = 0;
    FigAgglomeratorDispose(*(const void ***)(a2 + 24));
    free((void *)a2);
  }
}

uint64_t flom_rebuildFigLegibleOutputs_applier(const void *a1, CFDictionaryRef theDict, uint64_t a3)
{
  CMTime v12 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, @"LegibleOutputKey_AdvanceInterval");
  if (Value)
  {
    seconds.CFTypeRef value = 0;
    CFNumberGetValue(Value, kCFNumberDoubleType, &seconds);
    CMTimeMakeWithSeconds(&v12, *(Float64 *)&seconds.value, 1000);
  }
  CMTime seconds = v12;
  CFTypeRef v7 = malloc_type_calloc(1uLL, 0x50uLL, 0x10600401B4FB782uLL);
  CFTypeRef v8 = v7;
  if (!v7)
  {
    uint64_t result = FigSignalErrorAt();
    if (result) {
      return result;
    }
    goto LABEL_11;
  }
  uint64_t result = FigAgglomeratorNew((const void ***)v7 + 2);
  if (!result)
  {
    uint64_t result = FigAgglomeratorNew((const void ***)v8 + 3);
    if (!result)
    {
      uint64_t result = FigClosedCaptionStringConformerNew((void *)v8 + 1);
      if (!result)
      {
        if (a1) {
          CFTypeRef v10 = CFRetain(a1);
        }
        else {
          CFTypeRef v10 = 0;
        }
        *(void *)CFTypeRef v8 = v10;
        *(CMTime *)(v8 + 32) = seconds;
LABEL_11:
        CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a3 + 72), a1, v8);
        CFDictionaryGetValue(theDict, @"LegibleOutputKey_TextStylingResolution");
        uint64_t result = FigCFEqual();
        if (result) {
          v8[56] = 1;
        }
        else {
          v8[56] = 0;
        }
      }
    }
  }
  return result;
}

uint64_t flo_clearPreviousClosedCaptions(uint64_t a1, uint64_t a2)
{
  return FigAgglomeratorSetObjectForKey(*(__CFDictionary ***)(a2 + 16), 0, *(const void **)(a2 + 64));
}

uint64_t flo_clearPreviousSubtitles(uint64_t a1, uint64_t a2)
{
  return FigAgglomeratorSetObjectForKey(*(__CFDictionary ***)(a2 + 16), 0, *(const void **)(a2 + 72));
}

uint64_t flo_clearPreviousNativeSamples(uint64_t a1, uint64_t a2)
{
  return FigAgglomeratorSetObjectForKey(*(__CFDictionary ***)(a2 + 24), 0, *(const void **)(a2 + 72));
}

void flom_ensureRenderPipelinesForFormatDo(CFDictionaryRef **a1)
{
  CFDictionaryRef v2 = *a1;
  if (!v2[7]) {
    goto LABEL_6;
  }
  if (CFDictionaryGetCount(v2[7]) >= 1 && a1[2]) {
    CFDictionaryApplyFunction((*a1)[7], (CFDictionaryApplierFunction)flom_ensureRenderPipelinesForFormatDo_applier, a1);
  }
  CFDictionaryRef v2 = *a1;
  if (*a1) {
LABEL_6:
  }
    CFRelease(v2);
  int v3 = a1[1];
  if (v3)
  {
    CFRelease(v3);
  }
}

void flom_ensureRenderPipelinesForFormatDo_applier(void *key, const __CFDictionary *a2, CFMutableArrayRef *a3)
{
  CFNumberRef Value = (char *)CFDictionaryGetValue(*((CFDictionaryRef *)*a3 + 9), key);
  if (CMFormatDescriptionGetMediaType(a3[1]) != 1668047728)
  {
    if (CMFormatDescriptionGetMediaType(a3[1]) != 1935832172 && CMFormatDescriptionGetMediaType(a3[1]) != 1952807028) {
      return;
    }
    CFDictionaryRef v6 = (CFTypeRef *)(Value + 72);
    CFTypeRef v11 = (CFTypeRef)*((void *)Value + 9);
    if (v11)
    {
      if (!*((unsigned char *)a3 + 24)) {
        goto LABEL_19;
      }
      CFRelease(v11);
      *CFDictionaryRef v6 = 0;
    }
    CMTime v12 = CFDictionaryGetValue(a2, @"LegibleOutputKey_SubTypesForNativeSamples");
    uint64_t v14 = (uint64_t)*a3;
    uint64_t v13 = (uint64_t)a3[1];
    CFMutableDictionaryRef v15 = (long long *)(Value + 32);
    if (*((unsigned char *)*a3 + 108))
    {
      long long v22 = *v15;
      uint64_t v23 = *((void *)Value + 6);
      if (FigCreateSubtitleRenderPipeline(v13, (uint64_t)flom_subtitleRenderPipelineDidProduceStrings, v14, (uint64_t)flom_subtitleRenderPipelineDidProduceNativeSample, v14, (uint64_t)flom_renderPipelineDidFlush, v14, v12, &v22, 0, (CFTypeRef *)Value + 9))return; {
    }
      }
    else
    {
      long long v22 = *v15;
      uint64_t v23 = *((void *)Value + 6);
      if (FigCreateCaptionRenderPipeline(v13, (uint64_t)flom_FigCaptionRenderPipelineDidProduceStrings, v14, (uint64_t)flom_subtitleRenderPipelineDidProduceNativeSample, v14, (uint64_t)flom_renderPipelineDidFlush, v14, v12, &v22, 0, (CFTypeRef *)Value + 9))return; {
    }
      }
    CFTypeRef v11 = *v6;
LABEL_19:
    if (*((unsigned char *)*a3 + 97)) {
      int v16 = (void *)MEMORY[0x1E4F1CFD0];
    }
    else {
      int v16 = (void *)MEMORY[0x1E4F1CFC8];
    }
    uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(v11);
    uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v18) {
      uint64_t v19 = v18;
    }
    else {
      uint64_t v19 = 0;
    }
    long long v20 = *(unsigned int (**)(uint64_t, __CFString *, void))(v19 + 56);
    if (!v20 || v20(FigBaseObject, @"DisplayNonForcedSubtitles", *v16)) {
      return;
    }
    goto LABEL_27;
  }
  CFDictionaryRef v6 = (CFTypeRef *)(Value + 64);
  if (*((void *)Value + 8) && !*((unsigned char *)a3 + 24))
  {
LABEL_27:
    CFDictionaryRef v8 = 0;
    goto LABEL_28;
  }
  CFDictionaryRef v7 = CFDictionaryCreate(0, (const void **)kFigRenderPipelineOption_SortSampleBufferQueueByOutputPTS, MEMORY[0x1E4F1CFD0], 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!v7)
  {
    FigSignalErrorAt();
    return;
  }
  CFDictionaryRef v8 = v7;
  if (*v6)
  {
    CFRelease(*v6);
    *CFDictionaryRef v6 = 0;
  }
  uint64_t v10 = (uint64_t)*a3;
  int v9 = a3[1];
  long long v22 = *((_OWORD *)Value + 2);
  uint64_t v23 = *((void *)Value + 6);
  if (FigCreateClosedCaptionRenderPipeline(v9, (uint64_t)flom_closedCaptionRenderPipelineDidProduceCommand, v10, (uint64_t)flom_renderPipelineDidFlush, v10, &v22, v8, (CFTypeRef *)Value + 8))goto LABEL_31; {
LABEL_28:
  }
  CFTypeRef v21 = *v6;
  if (v21)
  {
    CFDictionaryAddValue(*((CFMutableDictionaryRef *)*a3 + 8), v21, Value);
    CFArrayAppendValue(a3[2], v21);
  }
  if (v8) {
LABEL_31:
  }
    CFRelease(v8);
}

void flom_closedCaptionRenderPipelineDidProduceCommand(const void *a1, int a2, const void *a3, long long *a4, void *a5)
{
  uint64_t v10 = malloc_type_calloc(1uLL, 0x38uLL, 0x10600400D19BD01uLL);
  if (a5) {
    CFTypeRef v11 = CFRetain(a5);
  }
  else {
    CFTypeRef v11 = 0;
  }
  void *v10 = v11;
  if (a1) {
    CFTypeRef v12 = CFRetain(a1);
  }
  else {
    CFTypeRef v12 = 0;
  }
  v10[1] = v12;
  *((_DWORD *)v10 + 4) = a2;
  if (a3) {
    CFTypeRef v13 = CFRetain(a3);
  }
  else {
    CFTypeRef v13 = 0;
  }
  v10[3] = v13;
  long long v14 = *a4;
  v10[6] = *((void *)a4 + 2);
  *((_OWORD *)v10 + 2) = v14;
  CFMutableDictionaryRef v15 = a5[2];

  dispatch_async_f(v15, v10, (dispatch_function_t)flom_closedCaptionRenderPipelineDidProduceCommandDo);
}

void flom_renderPipelineDidFlush(const void *a1, void *a2)
{
  CFDictionaryRef v4 = malloc_type_calloc(1uLL, 0x10uLL, 0x20040A4A59CD2uLL);
  if (a2) {
    CFTypeRef v5 = CFRetain(a2);
  }
  else {
    CFTypeRef v5 = 0;
  }
  *CFDictionaryRef v4 = v5;
  if (a1) {
    CFTypeRef v6 = CFRetain(a1);
  }
  else {
    CFTypeRef v6 = 0;
  }
  v4[1] = v6;
  CFDictionaryRef v7 = a2[2];

  dispatch_async_f(v7, v4, (dispatch_function_t)flom_renderPipelineDidFlushDo);
}

void flom_subtitleRenderPipelineDidProduceStrings(const void *a1, const void *a2, long long *a3, char a4, char a5, void *a6, double a7, double a8, double a9, double a10)
{
  long long v20 = malloc_type_calloc(1uLL, 0x60uLL, 0x106004052824D3DuLL);
  if (a6) {
    CFTypeRef v21 = CFRetain(a6);
  }
  else {
    CFTypeRef v21 = 0;
  }
  *long long v20 = v21;
  if (a1) {
    CFTypeRef v22 = CFRetain(a1);
  }
  else {
    CFTypeRef v22 = 0;
  }
  v20[1] = v22;
  CFTypeRef v23 = (CFTypeRef)a6[14];
  if (v23) {
    CFTypeRef v23 = CFRetain(v23);
  }
  v20[2] = v23;
  if (a2) {
    CFTypeRef v24 = CFRetain(a2);
  }
  else {
    CFTypeRef v24 = 0;
  }
  v20[3] = v24;
  long long v25 = *a3;
  v20[6] = *((void *)a3 + 2);
  *((_OWORD *)v20 + 2) = v25;
  *((unsigned char *)v20 + 56) = a4;
  *((unsigned char *)v20 + 57) = a5;
  *((double *)v20 + 8) = a7;
  *((double *)v20 + 9) = a8;
  *((double *)v20 + 10) = a9;
  *((double *)v20 + 11) = a10;
  uint64_t v26 = a6[2];

  dispatch_async_f(v26, v20, (dispatch_function_t)flom_subtitleRenderPipelineDidProduceStringsDo);
}

void flom_subtitleRenderPipelineDidProduceNativeSample(const void *a1, const void *a2, long long *a3, char a4, void *a5)
{
  uint64_t v10 = (char *)malloc_type_calloc(1uLL, 0x38uLL, 0x1020040F1C605A7uLL);
  if (a5) {
    CFTypeRef v11 = CFRetain(a5);
  }
  else {
    CFTypeRef v11 = 0;
  }
  *(void *)uint64_t v10 = v11;
  if (a1) {
    CFTypeRef v12 = CFRetain(a1);
  }
  else {
    CFTypeRef v12 = 0;
  }
  *((void *)v10 + 1) = v12;
  if (a2) {
    CFTypeRef v13 = CFRetain(a2);
  }
  else {
    CFTypeRef v13 = 0;
  }
  *((void *)v10 + 2) = v13;
  long long v14 = *a3;
  *((void *)v10 + 5) = *((void *)a3 + 2);
  *(_OWORD *)(v10 + 24) = v14;
  v10[48] = a4;
  CFMutableDictionaryRef v15 = a5[2];

  dispatch_async_f(v15, v10, (dispatch_function_t)flom_subtitleRenderPipelineDidProduceNativeSampleDo);
}

void flom_FigCaptionRenderPipelineDidProduceStrings(const void *a1, const void *a2, long long *a3, char a4, char a5, uint64_t a6, double a7, double a8, double a9, double a10)
{
  long long v20 = (char *)malloc_type_calloc(1uLL, 0x68uLL, 0x106004060991E7AuLL);
  if (a6) {
    CFTypeRef v21 = CFRetain((CFTypeRef)a6);
  }
  else {
    CFTypeRef v21 = 0;
  }
  *(void *)long long v20 = v21;
  if (a1) {
    CFTypeRef v22 = CFRetain(a1);
  }
  else {
    CFTypeRef v22 = 0;
  }
  *((void *)v20 + 1) = v22;
  if (*(unsigned char *)(a6 + 109))
  {
    CFTypeRef v23 = *(CFTypeRef *)(a6 + 112);
    if (v23) {
      CFTypeRef v23 = CFRetain(v23);
    }
    *((void *)v20 + 2) = v23;
    if (a2)
    {
LABEL_11:
      CFTypeRef v24 = CFRetain(a2);
      goto LABEL_16;
    }
  }
  else
  {
    CFTypeRef v25 = *(CFTypeRef *)(a6 + 120);
    if (v25) {
      CFTypeRef v25 = CFRetain(v25);
    }
    *((void *)v20 + 3) = v25;
    if (a2) {
      goto LABEL_11;
    }
  }
  CFTypeRef v24 = 0;
LABEL_16:
  *((void *)v20 + 4) = v24;
  long long v26 = *a3;
  *((void *)v20 + 7) = *((void *)a3 + 2);
  *(_OWORD *)(v20 + 40) = v26;
  v20[64] = a4;
  v20[65] = a5;
  *((double *)v20 + 9) = a7;
  *((double *)v20 + 10) = a8;
  *((double *)v20 + 11) = a9;
  *((double *)v20 + 12) = a10;
  uint64_t v27 = *(NSObject **)(a6 + 16);

  dispatch_async_f(v27, v20, (dispatch_function_t)flom_FigCaptionRenderPipelineDidProduceStringsDo);
}

void flom_closedCaptionRenderPipelineDidProduceCommandDo(char *a1)
{
  char v12 = 0;
  CFDictionaryRef v2 = (const void *)*((void *)a1 + 1);
  if (v2)
  {
    CFNumberRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(*(void *)a1 + 64), v2);
    if (Value)
    {
      uint64_t v4 = (uint64_t)Value;
      if (!FigClosedCaptionStringConformerPushCommand(Value[1], *((_DWORD *)a1 + 4), *((const __CFDictionary **)a1 + 3), *((unsigned __int8 *)Value + 56), &v12, *(double *)(*(void *)a1 + 80), *(double *)(*(void *)a1 + 88))&& *(unsigned char *)(*(void *)a1 + 96)&& v12 != 0)
      {
        CFTypeRef v6 = FigClosedCaptionStringConformerCopyCurrentConformedStrings(*(void *)(v4 + 8));
        uint64_t v7 = *(void *)a1;
        CFDictionaryRef v8 = (const void *)*((void *)a1 + 1);
        CMTime v11 = *(CMTime *)(a1 + 32);
        flom_addAttributedStringsAndInvokeCallback(v7, v4, v8, &v11, v6);
        if (v6) {
          CFRelease(v6);
        }
      }
    }
  }
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
  int v9 = (const void *)*((void *)a1 + 1);
  if (v9) {
    CFRelease(v9);
  }
  uint64_t v10 = (const void *)*((void *)a1 + 3);
  if (v10) {
    CFRelease(v10);
  }
  free(a1);
}

void flom_addAttributedStringsAndInvokeCallback(uint64_t a1, uint64_t a2, const void *a3, CMTime *a4, const void *a5)
{
  if (!FigAgglomeratorSetObjectForKey(*(__CFDictionary ***)(a2 + 16), a5, a3))
  {
    CMTime v8 = *a4;
    flom_collectAttributedStringsAndSampleBuffersAndInvokeCallbackForItemTime(a1, a2, &v8);
  }
}

void flom_collectAttributedStringsAndSampleBuffersAndInvokeCallbackForItemTime(uint64_t a1, uint64_t a2, CMTime *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  CFMutableArrayRef v6 = FigAgglomeratorCopyCurrentAgglomeration(*(CFDictionaryRef **)(a2 + 24));
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  CFArrayRef v9 = FigAgglomeratorCopyCurrentAgglomeration(*(CFDictionaryRef **)(a2 + 16));
  v21.length = CFArrayGetCount(v9);
  v21.location = 0;
  CFArrayApplyFunction(v9, v21, (CFArrayApplierFunction)flom_combineArrayOfArraysIntoFlatArray, Mutable);
  CFRelease(v9);
  CMTime time = *a3;
  CFDictionaryRef v10 = CMTimeCopyAsDictionary(&time, v7);
  CMTime v11 = *(const void **)a2;
  time.CFTypeRef value = (CMTimeValue)@"LegibleOutputKey";
  *(void *)&time.CMTimeScale timescale = @"LegibleOutputAttributedString";
  v17[0] = v11;
  v17[1] = Mutable;
  time.CMTimeEpoch epoch = (CMTimeEpoch)@"FigTime";
  uint64_t v19 = @"LegibleOutputNativeSamples";
  v17[2] = v10;
  CMTime v17[3] = v6;
  CFDictionaryRef v12 = CFDictionaryCreate(v7, (const void **)&time, v17, 4, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFRelease(v10);
  uint64_t v13 = *(void *)(a1 + 32);
  long long v14 = *(const void **)(a1 + 48);
  CFMutableDictionaryRef v15 = malloc_type_calloc(1uLL, 0x18uLL, 0xE00403260BBE2uLL);
  *CFMutableDictionaryRef v15 = CFRetain(v12);
  v15[1] = v13;
  if (v14) {
    CFTypeRef v16 = CFRetain(v14);
  }
  else {
    CFTypeRef v16 = 0;
  }
  v15[2] = v16;
  dispatch_async_f(*(dispatch_queue_t *)(a1 + 24), v15, (dispatch_function_t)flom_invokeCallbackAndDisposeContext);
  CFRelease(v12);
  CFRelease(Mutable);
  CFRelease(v6);
}

void flom_combineArrayOfArraysIntoFlatArray(const void *a1, __CFArray *a2)
{
  CFTypeID v4 = CFGetTypeID(a1);
  if (v4 == CFArrayGetTypeID())
  {
    v5.length = CFArrayGetCount((CFArrayRef)a1);
    v5.location = 0;
    CFArrayAppendArray(a2, (CFArrayRef)a1, v5);
  }
}

void flom_invokeCallbackAndDisposeContext(uint64_t a1)
{
  if (*(void *)(a1 + 8))
  {
    if (*(void *)(a1 + 16))
    {
      uint64_t v2 = FigCFWeakReferenceHolderCopyReferencedObject();
      if (v2)
      {
        int v3 = (const void *)v2;
        (*(void (**)(void, uint64_t))(a1 + 8))(*(void *)a1, v2);
        CFRelease(v3);
      }
    }
  }
  CFRelease(*(CFTypeRef *)a1);
  CFTypeID v4 = *(const void **)(a1 + 16);
  if (v4) {
    CFRelease(v4);
  }

  free((void *)a1);
}

void flom_renderPipelineDidFlushDo(void *a1)
{
  uint64_t v2 = (const void *)a1[1];
  if (v2)
  {
    CFNumberRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(*a1 + 64), v2);
    if (Value)
    {
      CFTypeID v4 = Value;
      FigAgglomeratorSetObjectForKey(*((__CFDictionary ***)Value + 2), 0, *((const void **)Value + 8));
      FigAgglomeratorSetObjectForKey(*((__CFDictionary ***)v4 + 2), 0, *((const void **)v4 + 9));
      FigAgglomeratorSetObjectForKey(*((__CFDictionary ***)v4 + 3), 0, *((const void **)v4 + 9));
      CFRange v5 = *(__CFDictionary ***)v4;
      uint64_t v7 = *(void *)(*a1 + 40);
      CFMutableArrayRef v6 = *(const void **)(*a1 + 48);
      CMTime v8 = malloc_type_calloc(1uLL, 0x18uLL, 0xE00403260BBE2uLL);
      if (v5) {
        CFTypeRef v9 = CFRetain(v5);
      }
      else {
        CFTypeRef v9 = 0;
      }
      *CMTime v8 = v9;
      v8[1] = v7;
      if (v6) {
        CFTypeRef v10 = CFRetain(v6);
      }
      else {
        CFTypeRef v10 = 0;
      }
      CFTypeRef v8[2] = v10;
      dispatch_async_f(*(dispatch_queue_t *)(*a1 + 24), v8, (dispatch_function_t)flom_invokeFlushCallbackAndDisposeContext);
    }
  }
  if (*a1) {
    CFRelease((CFTypeRef)*a1);
  }
  CMTime v11 = (const void *)a1[1];
  if (v11) {
    CFRelease(v11);
  }

  free(a1);
}

void flom_invokeFlushCallbackAndDisposeContext(void *a1)
{
  if (a1[1])
  {
    if (a1[2])
    {
      uint64_t v2 = FigCFWeakReferenceHolderCopyReferencedObject();
      if (v2)
      {
        int v3 = (const void *)v2;
        ((void (*)(void, uint64_t))a1[1])(*a1, v2);
        CFRelease(v3);
      }
    }
  }
  if (*a1) {
    CFRelease((CFTypeRef)*a1);
  }
  CFTypeID v4 = (const void *)a1[2];
  if (v4) {
    CFRelease(v4);
  }

  free(a1);
}

void flom_subtitleRenderPipelineDidProduceStringsDo(uint64_t a1)
{
  CFDictionaryRef v32 = 0;
  CFIndex v33 = 0;
  uint64_t v2 = *(const void **)(a1 + 8);
  if (!v2) {
    goto LABEL_33;
  }
  int v3 = CFDictionaryGetValue(*(CFDictionaryRef *)(*(void *)a1 + 64), v2);
  if (!v3) {
    goto LABEL_33;
  }
  uint64_t v4 = (uint64_t)v3;
  CFDictionaryRef v5 = *(const __CFDictionary **)(a1 + 24);
  if (v5)
  {
    if (*(unsigned char *)(*(void *)a1 + 97) || *(unsigned char *)(a1 + 56))
    {
      CFTypeRef value = 0;
      if (!CFDictionaryGetValueIfPresent(v5, @"SubtitleSerializedCaptionGroup", (const void **)&value))
      {
        MutableCFSetRef Copy = 0;
        CFDictionaryRef v6 = *(const __CFDictionary **)(a1 + 24);
LABEL_14:
        unint64_t v10 = *(void *)(a1 + 16);
        __int16 v11 = *(_WORD *)(a1 + 56);
        long long v12 = *(_OWORD *)(a1 + 80);
        long long v30 = *(_OWORD *)(a1 + 64);
        long long v31 = v12;
        long long v29 = *(_OWORD *)(*(void *)a1 + 80);
        char v13 = *(unsigned char *)(v4 + 56);
        *(_DWORD *)uint64_t v19 = 0;
        *(_OWORD *)&v19[4] = v10;
        *(void *)&v19[20] = v6;
        __int16 v20 = v11;
        __int16 v21 = 0;
        long long v22 = v30;
        long long v23 = v12;
        long long v24 = v29;
        char v25 = v13;
        __int16 v26 = 0;
        char v27 = 0;
        if (FigSubtitleStringConformerCopyConformedStringsForSubtitleSample((unsigned int *)v19, &v33)) {
          goto LABEL_18;
        }
        CFTypeRef v9 = v33;
        goto LABEL_16;
      }
      if (!FigCaptionSerializerCreateCaptionGroupFromCFData())
      {
        CFDictionaryRef v6 = v32;
        if (v32)
        {
          MutableCFSetRef Copy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, *(CFDictionaryRef *)(a1 + 24));
          int updated = updateSubtitleSampleWithFigCaptionGroup(MutableCopy, (uint64_t)v32);
          CFDictionaryRef v6 = MutableCopy;
          if (updated) {
            goto LABEL_18;
          }
        }
        else
        {
          MutableCFSetRef Copy = 0;
        }
        goto LABEL_14;
      }
    }
LABEL_33:
    MutableCFSetRef Copy = 0;
    goto LABEL_18;
  }
  CFTypeRef v9 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, MEMORY[0x1E4F1D510]);
  MutableCFSetRef Copy = 0;
  CFIndex v33 = v9;
LABEL_16:
  if (v9)
  {
    uint64_t v14 = *(void *)a1;
    CFMutableDictionaryRef v15 = *(const void **)(a1 + 8);
    *(_OWORD *)uint64_t v19 = *(_OWORD *)(a1 + 32);
    *(void *)&v19[16] = *(void *)(a1 + 48);
    flom_addAttributedStringsAndInvokeCallback(v14, v4, v15, (CMTime *)v19, v9);
  }
LABEL_18:
  if (v33) {
    CFRelease(v33);
  }
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  if (v32) {
    CFRelease(v32);
  }
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
  CFTypeRef v16 = *(const void **)(a1 + 16);
  if (v16) {
    CFRelease(v16);
  }
  dispatch_queue_t v17 = *(const void **)(a1 + 8);
  if (v17) {
    CFRelease(v17);
  }
  uint64_t v18 = *(const void **)(a1 + 24);
  if (v18) {
    CFRelease(v18);
  }
  free((void *)a1);
}

uint64_t updateSubtitleSampleWithFigCaptionGroup(const __CFDictionary *a1, uint64_t a2)
{
  char v113 = 0;
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFArrayRef theArray = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (!theArray) {
    return 4294954510;
  }
  int valuePtr = 0;
  CFNumberRef v5 = (const __CFNumber *)CFDictionaryGetValue(a1, @"SubtitleFormat");
  CFNumberGetValue(v5, kCFNumberSInt32Type, &valuePtr);
  if (a2)
  {
    memset(&v111, 0, sizeof(v111));
    CMTimeMake(&v111, 0, 0);
    memset(&v110, 0, sizeof(v110));
    CMTimeMake(&v110, 0, 0);
    CFArrayRef v6 = (const __CFArray *)CFDictionaryGetValue(a1, @"SubtitleTimeRange");
    if (v6)
    {
      CFArrayRef v7 = v6;
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v6, 0);
      CFDictionaryRef v9 = (const __CFDictionary *)CFArrayGetValueAtIndex(v7, 1);
      memset(&v109, 0, sizeof(v109));
      CMTimeMakeFromDictionary(&v109, ValueAtIndex);
      memset(&v108, 0, sizeof(v108));
      CMTimeMakeFromDictionary(&v108, v9);
      CMTime v111 = v109;
      CMTime v110 = v108;
    }
    SliceCFIndex Count = FigCaptionGroupGetSliceCount();
    CFDictionaryRef Mutable = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!Mutable || (CFMutableDictionaryRef v12 = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540])) == 0)
    {
      CFDictionaryRef v13 = 0;
      uint64_t v68 = 4294954510;
      if (!Mutable) {
        goto LABEL_74;
      }
      goto LABEL_73;
    }
    CFDictionaryRef v13 = v12;
    CFDictionaryRef v72 = a1;
    if (SliceCount >= 1)
    {
      uint64_t v14 = 0;
      unsigned int v97 = 0;
      kedouble y = (void *)*MEMORY[0x1E4F1F818];
      int v95 = (void *)*MEMORY[0x1E4F20048];
      BOOL v94 = (void *)*MEMORY[0x1E4F1F878];
      CMTime v90 = (void *)*MEMORY[0x1E4F1F588];
      CMTime v89 = (void *)*MEMORY[0x1E4F1F570];
      CMTime v88 = (void *)*MEMORY[0x1E4F1F578];
      CMTimeFlags v87 = (void *)*MEMORY[0x1E4F1F580];
      int v86 = (void *)*MEMORY[0x1E4F1F560];
      CMTimeFlags v85 = (void *)*MEMORY[0x1E4F1F568];
      CFStringRef attrName = (const __CFString *)*MEMORY[0x1E4F1F720];
      CFStringRef v82 = (const __CFString *)*MEMORY[0x1E4F1F728];
      CFStringRef v81 = (const __CFString *)*MEMORY[0x1E4F1F700];
      CFStringRef v78 = (const __CFString *)*MEMORY[0x1E4F1F5C0];
      CFTypeRef value = (CFTypeRef)*MEMORY[0x1E4F1F780];
      CFTypeRef v74 = (const void *)*MEMORY[0x1E4F1F788];
      CFRange v80 = (const void *)*MEMORY[0x1E4F1F790];
      CFStringRef v76 = (CFStringRef)*MEMORY[0x1E4F1F660];
      CFStringRef v75 = (const __CFString *)*MEMORY[0x1E4F1F668];
      CFStringRef v77 = (const __CFString *)*MEMORY[0x1E4F1F5B8];
      CFTypeRef v70 = (CFTypeRef)*MEMORY[0x1E4F1F768];
      CFAllocatorRef v73 = (const void *)*MEMORY[0x1E4F1F770];
      CFRange v79 = (const void *)*MEMORY[0x1E4F1F778];
      CFAllocatorRef v83 = v4;
      CFDictionaryRef v92 = v12;
      CFDictionaryRef v93 = Mutable;
      uint64_t v91 = SliceCount;
      while (1)
      {
        CaptionCFDataRef Data = FigCaptionGroupGetCaptionData();
        if (CaptionData) {
          break;
        }
LABEL_67:
        if (SliceCount == ++v14) {
          goto LABEL_71;
        }
      }
      uint64_t v16 = CaptionData;
      if (v113)
      {
        CFRelease(v113);
        char v113 = 0;
      }
      memset(&v109, 0, sizeof(v109));
      FigCaptionGroupGetDurationBeforeSlice();
      memset(&v108, 0, sizeof(v108));
      FigCaptionGroupGetDurationAfterSlice();
      CFRange effectiveRange = *(CFRange *)&v111.value;
      CMTimeEpoch epoch = v111.epoch;
      CMTime v105 = v110;
      CMTime v104 = v109;
      CMTime v103 = v108;
      unsigned int v97 = FigCaptionDataToMarkupBasedAttributedString(v4, v16, (uint64_t)&effectiveRange, &v105, &v104, (uint64_t)&v103, &v113, Mutable, v13);
      if (valuePtr != 1937142900 && valuePtr != 2021028980 && valuePtr != 2004251764
        || (v17 = v113, (CFDictionaryRef v18 = (const __CFDictionary *)CFDictionaryGetValue(Mutable, key)) == 0)
        || (CFDictionaryRef v19 = (const __CFDictionary *)CFDictionaryGetValue(v18, v95)) == 0
        || (CFDictionaryRef v20 = (const __CFDictionary *)CFDictionaryGetValue(v19, v94)) == 0)
      {
LABEL_66:
        CFArrayAppendValue(theArray, v113);
        goto LABEL_67;
      }
      CFDictionaryRef v21 = v20;
      long long v22 = CFDictionaryGetValue(v20, v90);
      CFAttributedStringRef v23 = v17;
      long long v24 = CFDictionaryGetValue(v21, v89);
      char v25 = CFDictionaryGetValue(v21, v88);
      __int16 v26 = CFDictionaryGetValue(v21, v87);
      char v27 = CFDictionaryGetValue(v21, v86);
      unsigned int v99 = CFDictionaryGetValue(v21, v85);
      FigGeometryDimensionMake();
      int v100 = v28;
      FigGeometryDimensionMake();
      int v30 = v29;
      uint64_t v31 = FigGeometryDimensionMake();
      int v101 = v32;
      double v33 = *(double *)&v31;
      FigGeometryDimensionMake();
      int v35 = v34;
      uint64_t v36 = FigGeometryDimensionMake();
      int v102 = v37;
      double v38 = *(double *)&v36;
      effectiveRange.location = 0;
      effectiveRange.length = 0;
      CFArrayRef v39 = v23;
      if (CFAttributedStringGetAttribute(v23, 0, attrName, &effectiveRange))
      {
        if (v24)
        {
          FigTextMarkupDimensionMakeFromSimplifiedDictionary();
          int v100 = v40;
        }
        if (v25)
        {
          FigTextMarkupDimensionMakeFromSimplifiedDictionary();
          int v35 = v41;
        }
        int v42 = v30;
        if (v26)
        {
          FigTextMarkupDimensionMakeFromSimplifiedDictionary();
          int v42 = v43;
        }
        SliceCFIndex Count = v91;
        if (v27)
        {
          uint64_t v44 = FigTextMarkupDimensionMakeFromSimplifiedDictionary();
          int v102 = v45;
          double v38 = *(double *)&v44;
        }
        if (v99)
        {
          uint64_t v46 = FigTextMarkupDimensionMakeFromSimplifiedDictionary();
          int v101 = v47;
          double v33 = *(double *)&v46;
        }
        if (FigCFEqual())
        {
          FigGeometryDimensionMakeMirrored();
          int v35 = v48;
          uint64_t Mirrored = FigGeometryDimensionMakeMirrored();
          int v102 = v50;
          double v38 = *(double *)&Mirrored;
        }
        CFAllocatorRef v4 = v83;
        int v51 = v100;
      }
      else
      {
        int v51 = v100;
        if (v22)
        {
          FigTextMarkupDimensionMakeFromSimplifiedDictionary();
          int v51 = v52;
        }
        int v42 = v30;
        if (v25)
        {
          FigTextMarkupDimensionMakeFromSimplifiedDictionary();
          int v42 = v53;
        }
        if (v26)
        {
          FigTextMarkupDimensionMakeFromSimplifiedDictionary();
          int v35 = v54;
        }
        SliceCFIndex Count = v91;
        if (v27)
        {
          uint64_t v55 = FigTextMarkupDimensionMakeFromSimplifiedDictionary();
          int v101 = v56;
          double v33 = *(double *)&v55;
        }
        if (v99)
        {
          uint64_t v57 = FigTextMarkupDimensionMakeFromSimplifiedDictionary();
          int v102 = v58;
          double v38 = *(double *)&v57;
        }
        CFAllocatorRef v4 = v83;
      }
      if (v51 == 622862368)
      {
        Float32 = (const void *)FigCFNumberCreateFloat32();
        CFAttributedStringSetAttribute(v39, effectiveRange, v82, Float32);
        if (Float32) {
          CFRelease(Float32);
        }
      }
      BOOL v60 = v42 == 622862368;
      CFDictionaryRef v13 = v92;
      if (v60)
      {
        BOOL v61 = (const void *)FigCFNumberCreateFloat32();
        CFAttributedStringSetAttribute(v39, effectiveRange, v81, v61);
        if (v61) {
          CFRelease(v61);
        }
      }
      if (v101 == 622862368)
      {
        CFIndex v62 = v80;
        if (v33 == 0.0 || (CFIndex v62 = v74, v33 == 50.0) || (CFIndex v62 = value, v33 == 100.0)) {
          CFAttributedStringSetAttribute(v39, effectiveRange, v78, v62);
        }
      }
      CFDictionaryRef Mutable = v93;
      if (v35 == 1818848869)
      {
        CFIndex v63 = (const void *)FigCFNumberCreateFloat32();
        CFRange v64 = effectiveRange;
        CFIndex v65 = v39;
        CFStringRef v66 = v76;
      }
      else
      {
        if (v35 != 622862368)
        {
LABEL_61:
          if (v102 == 622862368)
          {
            int v67 = v79;
            if (v38 == 0.0 || (int v67 = v73, v38 == 50.0) || (int v67 = v70, v38 == 100.0)) {
              CFAttributedStringSetAttribute(v39, effectiveRange, v77, v67);
            }
          }
          goto LABEL_66;
        }
        CFIndex v63 = (const void *)FigCFNumberCreateFloat32();
        CFRange v64 = effectiveRange;
        CFIndex v65 = v39;
        CFStringRef v66 = v75;
      }
      CFAttributedStringSetAttribute(v65, v64, v66, v63);
      if (v63) {
        CFRelease(v63);
      }
      goto LABEL_61;
    }
    unsigned int v97 = 0;
LABEL_71:
    a1 = v72;
    uint64_t v68 = v97;
  }
  else
  {
    CFDictionaryRef v13 = 0;
    CFDictionaryRef Mutable = 0;
    uint64_t v68 = 0;
  }
  CFDictionarySetValue(a1, @"SubtitleContent", theArray);
  if (Mutable) {
LABEL_73:
  }
    CFRelease(Mutable);
LABEL_74:
  if (v13) {
    CFRelease(v13);
  }
  if (v113) {
    CFRelease(v113);
  }
  CFRelease(theArray);
  return v68;
}

void flom_subtitleRenderPipelineDidProduceNativeSampleDo(void *a1)
{
  if (*(unsigned char *)(*(void *)a1 + 97) || *((unsigned char *)a1 + 48))
  {
    uint64_t v2 = (const void *)*((void *)a1 + 1);
    if (v2)
    {
      CFNumberRef Value = (__CFDictionary ***)CFDictionaryGetValue(*(CFDictionaryRef *)(*(void *)a1 + 64), v2);
      if (Value)
      {
        uint64_t v4 = (uint64_t)Value;
        if (!FigAgglomeratorSetObjectForKey(Value[3], *((const void **)a1 + 2), *((const void **)a1 + 1)))
        {
          uint64_t v5 = *(void *)a1;
          CMTime v8 = *(CMTime *)((unsigned char *)a1 + 1);
          flom_collectAttributedStringsAndSampleBuffersAndInvokeCallbackForItemTime(v5, v4, &v8);
        }
      }
    }
  }
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
  CFArrayRef v6 = (const void *)*((void *)a1 + 1);
  if (v6) {
    CFRelease(v6);
  }
  CFArrayRef v7 = (const void *)*((void *)a1 + 2);
  if (v7) {
    CFRelease(v7);
  }

  free(a1);
}

void flom_FigCaptionRenderPipelineDidProduceStringsDo(uint64_t a1)
{
  int v43 = 0;
  uint64_t v44 = 0;
  uint64_t v2 = *(const void **)(a1 + 8);
  if (!v2) {
    goto LABEL_28;
  }
  int v3 = CFDictionaryGetValue(*(CFDictionaryRef *)(*(void *)a1 + 64), v2);
  if (!v3) {
    goto LABEL_28;
  }
  uint64_t v4 = (uint64_t)v3;
  CFDictionaryRef v5 = *(const __CFDictionary **)(a1 + 32);
  if (!v5)
  {
    CFDictionaryRef v9 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, MEMORY[0x1E4F1D510]);
    MutableCFSetRef Copy = 0;
    CFArrayRef v11 = 0;
    uint64_t v44 = v9;
LABEL_32:
    if (v9)
    {
      uint64_t v24 = *(void *)a1;
      char v25 = *(const void **)(a1 + 8);
      *(_OWORD *)int v30 = *(_OWORD *)(a1 + 40);
      *(void *)&v30[16] = *(void *)(a1 + 56);
      flom_addAttributedStringsAndInvokeCallback(v24, v4, v25, (CMTime *)v30, v9);
    }
    goto LABEL_34;
  }
  if (!*(unsigned char *)(*(void *)a1 + 97) && !*(unsigned char *)(a1 + 64)) {
    goto LABEL_28;
  }
  if (*(unsigned char *)(*(void *)a1 + 109))
  {
    uint64_t v6 = 0;
    int v7 = 0;
    uint64_t v8 = *(void *)(a1 + 16);
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v6 = *(void *)(a1 + 24);
    int v7 = 1;
  }
  CFTypeRef value = 0;
  if (!CFDictionaryGetValueIfPresent(v5, @"SubtitleSerializedCaptionGroup", (const void **)&value))
  {
    MutableCFSetRef Copy = 0;
    CFArrayRef v11 = 0;
    CFMutableDictionaryRef v12 = *(__CFDictionary **)(a1 + 32);
    goto LABEL_30;
  }
  if (FigCaptionSerializerCreateCaptionGroupFromCFData())
  {
LABEL_28:
    CFArrayRef v11 = 0;
    MutableCFSetRef Copy = 0;
    goto LABEL_34;
  }
  CFMutableDictionaryRef v12 = v43;
  if (!v43)
  {
    MutableCFSetRef Copy = 0;
    CFArrayRef v11 = 0;
    goto LABEL_30;
  }
  CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  MutableCFSetRef Copy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, *(CFDictionaryRef *)(a1 + 32));
  if (FigCaptionGroupGetSliceCount() < 1)
  {
LABEL_24:
    CFArrayRef v11 = CFArrayCreate(v13, 0, 0, MEMORY[0x1E4F1D510]);
    if (v11)
    {
      CFDictionarySetValue(MutableCopy, @"SubtitleContent", v11);
      CFMutableDictionaryRef v12 = MutableCopy;
      goto LABEL_30;
    }
    goto LABEL_34;
  }
  uint64_t v14 = 0;
  while (1)
  {
    CaptionCFDataRef Data = FigCaptionGroupGetCaptionData();
    uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v17 = v16 ? v16 : 0;
    CFDictionaryRef v18 = *(uint64_t (**)(uint64_t))(v17 + 8);
    if (v18) {
      break;
    }
    CFStringRef v19 = &stru_1EE53F4B8;
    if (CaptionData) {
      goto LABEL_22;
    }
LABEL_23:
    if (++v14 >= FigCaptionGroupGetSliceCount()) {
      goto LABEL_24;
    }
  }
  CFStringRef v19 = (const __CFString *)v18(CaptionData);
  if (!CaptionData) {
    goto LABEL_23;
  }
LABEL_22:
  if (CFStringGetLength(v19) <= 0) {
    goto LABEL_23;
  }
  int updated = updateSubtitleSampleWithFigCaptionGroup(MutableCopy, (uint64_t)v43);
  CFArrayRef v11 = 0;
  CFMutableDictionaryRef v12 = MutableCopy;
  if (!updated)
  {
LABEL_30:
    __int16 v21 = *(_WORD *)(a1 + 64);
    long long v22 = *(_OWORD *)(a1 + 88);
    long long v41 = *(_OWORD *)(a1 + 72);
    long long v42 = v22;
    long long v40 = *(_OWORD *)(*(void *)a1 + 80);
    char v23 = *(unsigned char *)(v4 + 56);
    *(_DWORD *)int v30 = v7;
    *(void *)&v30[4] = v8;
    *(void *)&v30[12] = v6;
    *(void *)&v30[20] = v12;
    __int16 v31 = v21;
    __int16 v32 = 0;
    long long v33 = v41;
    long long v34 = v22;
    long long v35 = v40;
    char v36 = v23;
    __int16 v37 = 0;
    char v38 = 0;
    if (!FigSubtitleStringConformerCopyConformedStringsForSubtitleSample((unsigned int *)v30, &v44))
    {
      CFDictionaryRef v9 = v44;
      goto LABEL_32;
    }
  }
LABEL_34:
  if (v44) {
    CFRelease(v44);
  }
  if (v11) {
    CFRelease(v11);
  }
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  if (v43) {
    CFRelease(v43);
  }
  __int16 v26 = *(const void **)(a1 + 24);
  if (v26) {
    CFRelease(v26);
  }
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
  char v27 = *(const void **)(a1 + 16);
  if (v27) {
    CFRelease(v27);
  }
  int v28 = *(const void **)(a1 + 8);
  if (v28) {
    CFRelease(v28);
  }
  int v29 = *(const void **)(a1 + 32);
  if (v29) {
    CFRelease(v29);
  }
  free((void *)a1);
}

void flo_forgetAboutRenderPipelines(uint64_t a1, uint64_t a2)
{
  FigAgglomeratorSetObjectForKey(*(__CFDictionary ***)(a2 + 16), 0, *(const void **)(a2 + 64));
  int v3 = *(const void **)(a2 + 64);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a2 + 64) = 0;
  }
  FigAgglomeratorSetObjectForKey(*(__CFDictionary ***)(a2 + 16), 0, *(const void **)(a2 + 72));
  FigAgglomeratorSetObjectForKey(*(__CFDictionary ***)(a2 + 24), 0, *(const void **)(a2 + 72));
  uint64_t v4 = *(const void **)(a2 + 72);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a2 + 72) = 0;
  }
}

uint64_t CreatePesPrivateForPSLPCM(void *a1)
{
  a1[105] = PSLPCMProcessData;
  a1[106] = PSLPCMCleanPrivateData;
  a1[107] = PSLPCMDeletePrivateData;
  uint64_t v2 = malloc_type_calloc(1uLL, 0x40uLL, 0x10000401C7CE48EuLL);
  a1[6] = v2;
  if (v2) {
    return 0;
  }

  return FigSignalErrorAt();
}

uint64_t PSLPCMProcessData(uint64_t a1, CMBlockBufferRef theSourceBuffer, size_t offsetToData, char *__src, unint64_t a5, uint64_t a6)
{
  unint64_t v6 = a5;
  int v7 = __src;
  size_t v8 = offsetToData;
  uint64_t v11 = *(void *)(a1 + 48);
  int v38 = 0;
  uint64_t v36 = 0;
  unint64_t v37 = 0;
  char v35 = 0;
  size_t v34 = 0;
  if (*(unsigned char *)(a6 + 24))
  {
    long long v12 = *(_OWORD *)(a6 + 16);
    *(_OWORD *)uint64_t v11 = *(_OWORD *)a6;
    *(_OWORD *)(v11 + 16) = v12;
    unint64_t v13 = 7;
    *(void *)(v11 + 32) = 7;
  }
  else
  {
    unint64_t v13 = *(void *)(v11 + 32);
    if (!v13)
    {
      uint64_t v16 = 0;
      size_t offset = 0;
      goto LABEL_25;
    }
  }
  if (v13 >= a5) {
    size_t v14 = a5;
  }
  else {
    size_t v14 = v13;
  }
  uint64_t v15 = v11 - v13;
  if (__src)
  {
    memcpy((void *)(v15 + 63), __src, v14);
    uint64_t v16 = 0;
    size_t offset = 0;
    v7 += v14;
  }
  else
  {
    uint64_t v17 = CMBlockBufferCopyDataBytes(theSourceBuffer, offsetToData, v14, (void *)(v15 + 63));
    if (v17) {
      goto LABEL_62;
    }
    int v7 = 0;
    if (v14 == 7) {
      uint64_t v16 = theSourceBuffer;
    }
    else {
      uint64_t v16 = 0;
    }
    if (v14 == 7) {
      size_t v18 = v8;
    }
    else {
      size_t v18 = 0;
    }
    size_t offset = v18;
    v8 += v14;
  }
  v6 -= v14;
  size_t v19 = *(void *)(v11 + 32) - v14;
  *(void *)(v11 + 32) = v19;
  if (v19)
  {
LABEL_25:
    int v22 = 0;
    goto LABEL_26;
  }
  uint64_t v17 = PSLPCMCheckHeader((unsigned char *)(v11 + 56));
  if (v17)
  {
LABEL_62:
    uint64_t v28 = v17;
LABEL_63:
    PesErrorHandling(a1, v28);
    return v28;
  }
  unsigned int started = PSLPCMGetByteOffsetToStartFrameOfPacket(v11 + 56);
  uint64_t v21 = started;
  if (started > 3) {
    uint64_t v21 = started - 4;
  }
  *(void *)(v11 + 48) = v21;
  if (!v21 || !*(unsigned char *)(v11 + 40)) {
    goto LABEL_25;
  }
  int v22 = v21 - *(_DWORD *)(a1 + 624) + *(_DWORD *)(a1 + 616);
  *(void *)(v11 + 48) = 0;
LABEL_26:
  unint64_t v23 = *(void *)(v11 + 48);
  if (v23)
  {
    if (v23 >= v6) {
      unint64_t v23 = v6;
    }
    v6 -= v23;
    BOOL v24 = v7 == 0;
    if (v7) {
      v7 += v23;
    }
    else {
      int v7 = 0;
    }
    if (!v24) {
      unint64_t v23 = 0;
    }
    v8 += v23;
  }
  while (v6)
  {
    if (v35 || !*(unsigned char *)(v11 + 40))
    {
      if (!*(unsigned char *)(v11 + 24)) {
        return 0;
      }
      uint64_t v17 = PSLPCMGetSampleFrequency(v11 + 56, &v38);
      if (v17) {
        goto LABEL_62;
      }
      if (v38 != *(_DWORD *)(a1 + 768)) {
        FigMPEG2ParserSetAudioCharacteristics(a1, v38);
      }
      uint64_t v17 = PSLPCMGetSamplesPerFrame(v11 + 56, &v37);
      if (v17) {
        goto LABEL_62;
      }
      uint64_t v17 = PSLPCMGetBytesPerFrame(v11 + 56, &v36);
      if (v17) {
        goto LABEL_62;
      }
      uint64_t v25 = v36;
      unint64_t v26 = v25 * PSLPCMGetFrameCountOfPacket(v11 + 56) + 7;
      *(void *)(a1 + 624) = v26;
      if (v16) {
        uint64_t v27 = PesAddBlockBufferToFrameBlockBuffer(a1, v16, offset, 7uLL, v26, &v34, &v35);
      }
      else {
        uint64_t v27 = PesAddMemoryToFrameMemory(a1, (const void *)(v11 + 56), 7uLL, v26, &v34, &v35);
      }
      uint64_t v28 = v27;
      if (v27) {
        goto LABEL_63;
      }
      int v29 = v37;
      *(_DWORD *)(a1 + 584) = PSLPCMGetFrameCountOfPacket(v11 + 56) * v29;
      long long v30 = *(_OWORD *)(v11 + 16);
      *(_OWORD *)(a1 + 480) = *(_OWORD *)v11;
      *(_OWORD *)(a1 + 496) = v30;
      *(_WORD *)(v11 + 24) = 0;
      *(unsigned char *)(v11 + 40) = 1;
      char v35 = 0;
    }
    if (v7) {
      uint64_t v31 = PesAddMemoryToFrameMemory(a1, v7, v6, *(void *)(a1 + 624), &v34, &v35);
    }
    else {
      uint64_t v31 = PesAddBlockBufferToFrameBlockBuffer(a1, theSourceBuffer, v8, v6, *(void *)(a1 + 624), &v34, &v35);
    }
    uint64_t v28 = v31;
    if (v31) {
      goto LABEL_63;
    }
    v6 -= v34;
    v8 += v34;
    if (v35)
    {
      uint64_t v17 = FigMPEG2AudioFrameQueueEntryAdjustTimestampsAndEmit(a1, a1 + 456);
      if (v17) {
        goto LABEL_62;
      }
      v8 += v22;
      if (v22) {
        unint64_t v6 = (v22 + v6) & ~((v22 + (int)v6) >> 31);
      }
      PesCleanAfterFrameEmit(a1);
      *(unsigned char *)(v11 + 40) = 0;
    }
  }
  return 0;
}

uint64_t PSLPCMCleanPrivateData(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 48);
  *(void *)(v1 + 32) = 0;
  *(unsigned char *)(v1 + 40) = 0;
  *(void *)(v1 + 48) = 0;
  return result;
}

void PSLPCMDeletePrivateData(uint64_t a1)
{
  *(void *)(a1 + 48) = 0;
}

uint64_t FigSupportsIOSurfaceTimingInfo()
{
  return 0;
}

uint64_t FigGetIOSurfaceTimingStatsFromTimingInfoDictionary()
{
  return 4294954514;
}

uint64_t FigSampleBufferRenderSynchronizerCreateWithOptions(const __CFAllocator *a1, uint64_t a2, void *a3)
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a3) {
    return 4294950926;
  }
  FigSampleBufferRenderSynchronizerGetClassID();
  uint64_t OnlyTimebase = CMDerivedObjectCreate();
  if (OnlyTimebase) {
    return OnlyTimebase;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v7 = FigReentrantMutexCreate();
  *(void *)uint64_t DerivedStorage = v7;
  if (!v7) {
    return 4294950924;
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  *(void *)(DerivedStorage + 24) = Mutable;
  if (!Mutable) {
    return 4294950924;
  }
  CFMutableArrayRef v9 = CFArrayCreateMutable(0, 0, 0);
  *(void *)(DerivedStorage + 40) = v9;
  if (!v9) {
    return 4294950924;
  }
  *(_DWORD *)(DerivedStorage + 48) = 0;
  *(unsigned char *)(DerivedStorage + 52) = 0;
  HostTimeClocuint64_t k = CMClockGetHostTimeClock();
  uint64_t OnlyTimebase = CMTimebaseCreateWithSourceClock(a1, HostTimeClock, (CMTimebaseRef *)(DerivedStorage + 8));
  if (OnlyTimebase) {
    return OnlyTimebase;
  }
  if (*(void *)(DerivedStorage + 8))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListener();
  }
  uint64_t OnlyTimebase = CMTimebaseCreateReadOnlyTimebase();
  if (OnlyTimebase) {
    return OnlyTimebase;
  }
  if (dword_1E93517E8)
  {
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v12 = 0;
  *a3 = 0;
  return v12;
}

uint64_t synchronizer_invalidate()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)DerivedStorage) {
    MEMORY[0x19970E290]();
  }
  if (!*(unsigned char *)(DerivedStorage + 53))
  {
    *(unsigned char *)(DerivedStorage + 53) = 1;
    if (*(void *)(DerivedStorage + 8))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
    }
    uint64_t v1 = *(__CFArray **)(DerivedStorage + 24);
    if (v1)
    {
      CFArrayRemoveAllValues(v1);
      uint64_t v2 = *(const void **)(DerivedStorage + 24);
      if (v2)
      {
        CFRelease(v2);
        *(void *)(DerivedStorage + 24) = 0;
      }
    }
    int v3 = *(const void **)(DerivedStorage + 32);
    if (v3)
    {
      CFRelease(v3);
      *(void *)(DerivedStorage + 32) = 0;
    }
    uint64_t v4 = *(const void **)(DerivedStorage + 40);
    if (v4)
    {
      CFRelease(v4);
      *(void *)(DerivedStorage + 40) = 0;
    }
    CFDictionaryRef v5 = *(const void **)(DerivedStorage + 8);
    if (v5)
    {
      CFRelease(v5);
      *(void *)(DerivedStorage + 8) = 0;
    }
    unint64_t v6 = *(const void **)(DerivedStorage + 16);
    if (v6)
    {
      CFRelease(v6);
      *(void *)(DerivedStorage + 16) = 0;
    }
  }
  if (*(void *)DerivedStorage) {
    MEMORY[0x19970E2B0]();
  }
  return 0;
}

uint64_t synchronizer_finalize()
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  synchronizer_invalidate();
  uint64_t result = *DerivedStorage;
  if (*DerivedStorage)
  {
    return FigSimpleMutexDestroy();
  }
  return result;
}

__CFString *synchronizer_copyDebugDesc(const void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  CFMutableArrayRef Mutable = CFStringCreateMutable(v2, 0);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFIndex v5 = CFGetRetainCount(a1);
  if (*(unsigned char *)(DerivedStorage + 53)) {
    unint64_t v6 = " (invalidated)";
  }
  else {
    unint64_t v6 = "";
  }
  CFAllocatorRef v7 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, @"<FigSampleBufferRenderSynchronizer=%p retainCount=%d%s allocator=%p", a1, v5, v6, v7);
  CFStringAppendFormat(Mutable, 0, @" rate=%1.3f", *(float *)(DerivedStorage + 48));
  CFStringAppendFormat(Mutable, 0, @" masterTimebase=%@", *(void *)(DerivedStorage + 8));
  CFStringAppendFormat(Mutable, 0, @" readonlyTimebase=%@", *(void *)(DerivedStorage + 16));
  CFStringAppendFormat(Mutable, 0, @" audioRenderers=%@", *(void *)(DerivedStorage + 24));
  CFStringAppendFormat(Mutable, 0, @" timebaseStarter=%@", *(void *)(DerivedStorage + 32));
  CFStringAppendFormat(Mutable, 0, @" disturbPlaybackAssertions=%@", *(void *)(DerivedStorage + 40));
  CFStringAppendFormat(Mutable, 0, @">");
  return Mutable;
}

uint64_t synchronizer_copyProperty(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  uint64_t result = 4294950925;
  if (a2 && a4)
  {
    if (FigCFEqual())
    {
      MEMORY[0x19970E290](*DerivedStorage);
      size_t v8 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
      if (!*((unsigned char *)DerivedStorage + 52)) {
        size_t v8 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
      }
      *a4 = CFRetain(*v8);
      MEMORY[0x19970E2B0](*DerivedStorage);
      return 0;
    }
    else
    {
      return 4294954509;
    }
  }
  return result;
}

uint64_t synchronizer_setProperty(uint64_t a1, uint64_t a2, const void *a3)
{
  if (!FigCFEqual()) {
    return 4294954509;
  }
  if (!a3) {
    return 4294950925;
  }
  CFTypeID v4 = CFGetTypeID(a3);
  if (v4 != CFBooleanGetTypeID()) {
    return 4294950925;
  }
  int Value = CFBooleanGetValue((CFBooleanRef)a3);
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*DerivedStorage);
  if (*((unsigned __int8 *)DerivedStorage + 52) != Value)
  {
    *((unsigned char *)DerivedStorage + 52) = Value;
    FigCFArrayApplyFunction();
  }
  MEMORY[0x19970E2B0](*DerivedStorage);
  return 0;
}

uint64_t synchronizer_timebaseRateChangedListener(int a1, int a2, int a3, CMTimebaseRef timebase)
{
  if (*MEMORY[0x1E4F1EBA8] == 1)
  {
    CMTimebaseGetRate(timebase);
    return kdebug_trace();
  }
  return result;
}

uint64_t synchronizer_applyShouldAttemptImmediatePlaybackStart(uint64_t a1, uint64_t a2)
{
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v7 = *(void *)(VTable + 8);
  uint64_t result = VTable + 8;
  uint64_t v6 = v7;
  if (v7) {
    uint64_t v8 = v6;
  }
  else {
    uint64_t v8 = 0;
  }
  CFMutableArrayRef v9 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v8 + 56);
  if (v9)
  {
    return v9(a1, @"ShouldAttemptImmediatePlaybackStart", a2);
  }
  return result;
}

uint64_t synchronizer_addAudioRenderer(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2) {
    return 4294950926;
  }
  CFIndex v5 = (void *)DerivedStorage;
  CFTypeID v6 = CFGetTypeID(a2);
  if (v6 != FigSampleBufferAudioRendererGetTypeID()) {
    return 4294950925;
  }
  MEMORY[0x19970E290](*v5);
  if (dword_1E93517E8)
  {
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*((unsigned char *)v5 + 53))
  {
    uint64_t v23 = 4294954511;
    goto LABEL_31;
  }
  CFIndex Count = CFArrayGetCount((CFArrayRef)v5[3]);
  v25.location = 0;
  v25.length = Count;
  if (CFArrayContainsValue((CFArrayRef)v5[3], v25, a2))
  {
    uint64_t v13 = FigSignalErrorAt();
    goto LABEL_37;
  }
  CFArrayAppendValue((CFMutableArrayRef)v5[3], a2);
  if (*((unsigned char *)v5 + 52)) {
    CFMutableArrayRef v9 = (void *)MEMORY[0x1E4F1CFD0];
  }
  else {
    CFMutableArrayRef v9 = (void *)MEMORY[0x1E4F1CFC8];
  }
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = *(uint64_t (**)(const void *, __CFString *, void))(v11 + 56);
  if (!v12) {
    goto LABEL_30;
  }
  uint64_t v13 = v12(a2, @"ShouldAttemptImmediatePlaybackStart", *v9);
  if (v13) {
    goto LABEL_37;
  }
  uint64_t v13 = synchronizer_disturbPlayback(a1);
  if (v13) {
    goto LABEL_37;
  }
  if (Count)
  {
    uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v14) {
      uint64_t v15 = v14;
    }
    else {
      uint64_t v15 = 0;
    }
    size_t v19 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v15 + 32);
    if (v19)
    {
      CFDictionaryRef v20 = a2;
      uint64_t v21 = a1;
      uint64_t v22 = 0;
      goto LABEL_28;
    }
LABEL_30:
    uint64_t v23 = 4294954514;
    goto LABEL_31;
  }
  uint64_t v13 = synchronizer_setUpAudioRendererAsTimebaseStarter(a1, a2);
  if (v13)
  {
LABEL_37:
    uint64_t v23 = v13;
    goto LABEL_31;
  }
  uint64_t v16 = v5[1];
  uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v17) {
    uint64_t v18 = v17;
  }
  else {
    uint64_t v18 = 0;
  }
  size_t v19 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v18 + 32);
  if (!v19) {
    goto LABEL_30;
  }
  CFDictionaryRef v20 = a2;
  uint64_t v21 = a1;
  uint64_t v22 = v16;
LABEL_28:
  uint64_t v13 = v19(v20, v21, v22);
  if (v13) {
    goto LABEL_37;
  }
  synchronizer_restorePlayback(a1);
  uint64_t v23 = 0;
LABEL_31:
  MEMORY[0x19970E2B0](*v5);
  return v23;
}

uint64_t synchronizer_removeAudioRenderer(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (!a2) {
    return 4294950926;
  }
  CFIndex v5 = DerivedStorage;
  MEMORY[0x19970E290](*DerivedStorage);
  if (dword_1E93517E8)
  {
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*((unsigned char *)v5 + 53))
  {
    uint64_t v26 = 4294954511;
    goto LABEL_31;
  }
  CFIndex Count = CFArrayGetCount((CFArrayRef)v5[3]);
  if (!Count)
  {
    uint64_t v26 = 4294950925;
    goto LABEL_31;
  }
  uint64_t v8 = Count;
  v29.location = 0;
  v29.length = Count;
  FirstIndexOfint Value = CFArrayGetFirstIndexOfValue((CFArrayRef)v5[3], v29, a2);
  if (FirstIndexOfValue == -1)
  {
    uint64_t v12 = FigSignalErrorAt();
    goto LABEL_37;
  }
  CFIndex v10 = FirstIndexOfValue;
  uint64_t v11 = (const void *)v5[4];
  uint64_t v12 = synchronizer_disturbPlayback(a1);
  if (v12) {
    goto LABEL_37;
  }
  if (v11 == a2)
  {
    uint64_t v13 = CMBaseObjectGetDerivedStorage();
    uint64_t v14 = *(void *)(v13 + 32);
    if (v14)
    {
      uint64_t v15 = v13;
      CMNotificationCenterGetDefaultLocalCenter();
      FigSampleBufferAudioRendererGetFigBaseObject(v14);
      uint64_t v12 = FigNotificationCenterRemoveWeakListener();
      if (v12) {
        goto LABEL_37;
      }
      CMNotificationCenterGetDefaultLocalCenter();
      FigSampleBufferAudioRendererGetFigBaseObject(v14);
      uint64_t v12 = FigNotificationCenterRemoveWeakListener();
      if (v12) {
        goto LABEL_37;
      }
      uint64_t v16 = *(const void **)(v15 + 32);
      if (v16)
      {
        CFRelease(v16);
        *(void *)(v15 + 32) = 0;
      }
    }
  }
  CFArrayRemoveValueAtIndex((CFMutableArrayRef)v5[3], v10);
  uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v17) {
    uint64_t v18 = v17;
  }
  else {
    uint64_t v18 = 0;
  }
  size_t v19 = *(uint64_t (**)(const void *, void, void))(v18 + 32);
  if (!v19) {
    goto LABEL_30;
  }
  uint64_t v12 = v19(a2, 0, 0);
  if (v12)
  {
LABEL_37:
    uint64_t v26 = v12;
    goto LABEL_31;
  }
  if (v11 == a2)
  {
    if (v8 >= 2)
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v5[3], 0);
      uint64_t v12 = synchronizer_setUpAudioRendererAsTimebaseStarter(a1, ValueAtIndex);
      if (!v12)
      {
        uint64_t v21 = v5[1];
        uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v22) {
          uint64_t v23 = v22;
        }
        else {
          uint64_t v23 = 0;
        }
        uint64_t v27 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v23 + 32);
        if (v27)
        {
          uint64_t v26 = v27(ValueAtIndex, a1, v21);
          if (v26) {
            goto LABEL_31;
          }
          goto LABEL_25;
        }
LABEL_30:
        uint64_t v26 = 4294954514;
        goto LABEL_31;
      }
      goto LABEL_37;
    }
    BOOL v24 = (OpaqueCMTimebase *)v5[1];
    HostTimeClocuint64_t k = CMClockGetHostTimeClock();
    uint64_t v12 = CMTimebaseSetSourceClock(v24, HostTimeClock);
    if (v12) {
      goto LABEL_37;
    }
  }
LABEL_25:
  synchronizer_restorePlayback(a1);
  uint64_t v26 = 0;
LABEL_31:
  MEMORY[0x19970E2B0](*v5);
  return v26;
}

uint64_t synchronizer_setRateAndTime(uint64_t a1, long long *a2, float a3)
{
  long long v4 = *a2;
  uint64_t v5 = *((void *)a2 + 2);
  return synchronizer_setRateAndAnchorTime(a1, (uint64_t)&v4, MEMORY[0x1E4F1F9F8], a3);
}

uint64_t synchronizer_copyReadOnlyTimebase(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2) {
    return 4294950926;
  }
  uint64_t v4 = DerivedStorage;
  if (*(unsigned char *)(DerivedStorage + 53)) {
    return 0;
  }
  uint64_t v5 = *(const void **)(DerivedStorage + 16);
  if (v5)
  {
    CFRetain(v5);
    uint64_t v6 = *(void *)(v4 + 16);
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t result = 0;
  *a2 = v6;
  return result;
}

uint64_t synchronizer_acquirePlaybackAssertion(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (!a2) {
    return 4294950926;
  }
  uint64_t v4 = DerivedStorage;
  MEMORY[0x19970E290](*DerivedStorage);
  if (dword_1E93517E8)
  {
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!*((unsigned char *)v4 + 53))
  {
    CFArrayRef v6 = (const __CFArray *)v4[5];
    v8.length = CFArrayGetCount(v6);
    v8.location = 0;
    if (!CFArrayContainsValue(v6, v8, a2)) {
      CFArrayAppendValue((CFMutableArrayRef)v4[5], a2);
    }
  }
  MEMORY[0x19970E2B0](*v4);
  return 0;
}

uint64_t synchronizer_releasePlaybackAssertion(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (!a2) {
    return 4294950926;
  }
  uint64_t v4 = DerivedStorage;
  MEMORY[0x19970E290](*DerivedStorage);
  if (dword_1E93517E8)
  {
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!*((unsigned char *)v4 + 53))
  {
    CFArrayRef v6 = (const __CFArray *)v4[5];
    v10.length = CFArrayGetCount(v6);
    v10.location = 0;
    FirstIndexOfint Value = CFArrayGetFirstIndexOfValue(v6, v10, a2);
    if (FirstIndexOfValue == -1)
    {
      uint64_t v8 = 4294950925;
      goto LABEL_8;
    }
    CFArrayRemoveValueAtIndex((CFMutableArrayRef)v4[5], FirstIndexOfValue);
  }
  uint64_t v8 = 0;
LABEL_8:
  MEMORY[0x19970E2B0](*v4);
  return v8;
}

uint64_t synchronizer_setRateAndAnchorTime(uint64_t a1, uint64_t a2, long long *a3, float a4)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  if (dword_1E93517E8)
  {
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a4 < 0.0)
  {
    uint64_t v11 = 4294950925;
  }
  else
  {
    MEMORY[0x19970E290](*(void *)DerivedStorage);
    if (*(unsigned char *)(DerivedStorage + 53))
    {
      uint64_t v11 = 4294954511;
    }
    else
    {
      float v10 = *(float *)(DerivedStorage + 48);
      if (v10 == a4 && (*(unsigned char *)(a2 + 12) & 1) == 0)
      {
        uint64_t v11 = 0;
LABEL_13:
        MEMORY[0x19970E2B0](*(void *)DerivedStorage);
        goto LABEL_14;
      }
      if (a4 == 0.0
        || v10 == 0.0
        || (uint64_t v12 = synchronizer_setRateAndAnchorTimeLowLevel(0.0, a1, MEMORY[0x1E4F1F9F8], MEMORY[0x1E4F1F9F8], 0),
            !v12))
      {
        CMTime time = *(CMTime *)a2;
        long long v15 = *a3;
        uint64_t v16 = *((void *)a3 + 2);
        uint64_t v11 = synchronizer_setRateAndAnchorTimeLowLevel(a4, a1, &time, (uint64_t)&v15, &cf);
        if (!v11)
        {
          *(float *)(DerivedStorage + 48) = a4;
          goto LABEL_13;
        }
      }
      else
      {
        uint64_t v11 = v12;
      }
    }
  }
  if (a4 != 0.0) {
    synchronizer_setRateAndAnchorTimeLowLevel(0.0, a1, MEMORY[0x1E4F1F9F8], MEMORY[0x1E4F1F9F8], 0);
  }
  if (a4 >= 0.0) {
    goto LABEL_13;
  }
LABEL_14:
  if (cf) {
    CFRelease(cf);
  }
  return v11;
}

uint64_t synchronizer_convertTime(uint64_t a1, int a2, CMTime *a3, CMTime *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 53)) {
    return 4294954511;
  }
  if (!a4) {
    return 4294950926;
  }
  uint64_t v8 = DerivedStorage;
  if (a2 == 1831681640)
  {
    uint64_t v11 = *(OpaqueCMClock **)(DerivedStorage + 16);
    HostTimeClocuint64_t k = CMClockGetHostTimeClock();
    CMTime v13 = *a3;
    CMClockRef v9 = v11;
    goto LABEL_7;
  }
  if (a2 == 1747795565)
  {
    CMClockRef v9 = CMClockGetHostTimeClock();
    HostTimeClocuint64_t k = *(CMClockRef *)(v8 + 16);
    CMTime v13 = *a3;
LABEL_7:
    CMSyncConvertTime(&v14, &v13, v9, HostTimeClock);
    uint64_t result = 0;
    *a4 = v14;
    return result;
  }

  return FigSignalErrorAt();
}

uint64_t synchronizer_disturbPlayback(uint64_t a1)
{
  if (*(float *)(CMBaseObjectGetDerivedStorage() + 48) == 0.0) {
    return 0;
  }
  if (dword_1E93517E8)
  {
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return synchronizer_setRateAndAnchorTimeLowLevel(0.0, a1, MEMORY[0x1E4F1F9F8], MEMORY[0x1E4F1F9F8], 0);
}

uint64_t synchronizer_setUpAudioRendererAsTimebaseStarter(uint64_t a1, const void *a2)
{
  newSourceClock[24] = *(CMClockRef *)MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  newSourceClock[0] = 0;
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  CFArrayRef v6 = *(uint64_t (**)(const void *, CMClockRef *))(v5 + 40);
  if (v6)
  {
    uint64_t v7 = v6(a2, newSourceClock);
    if (v7) {
      goto LABEL_16;
    }
    if (dword_1E93517E8)
    {
      os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v7 = CMTimebaseSetSourceClock(*(CMTimebaseRef *)(DerivedStorage + 8), newSourceClock[0]);
    if (v7
      || (CMNotificationCenterGetDefaultLocalCenter(),
          FigSampleBufferAudioRendererGetFigBaseObject(a2),
          uint64_t v7 = FigNotificationCenterAddWeakListener(),
          v7))
    {
LABEL_16:
      uint64_t v9 = v7;
    }
    else
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigSampleBufferAudioRendererGetFigBaseObject(a2);
      uint64_t v9 = FigNotificationCenterAddWeakListener();
      if (!v9)
      {
        *(void *)(DerivedStorage + 32) = a2;
        CFRetain(a2);
      }
    }
  }
  else
  {
    uint64_t v9 = 4294954514;
  }
  if (newSourceClock[0]) {
    CFRelease(newSourceClock[0]);
  }
  return v9;
}

uint64_t synchronizer_restorePlayback(uint64_t a1)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  float v3 = *(float *)(result + 48);
  if (v3 != 0.0)
  {
    if (dword_1E93517E8)
    {
      uint64_t v4 = result;
      os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      float v3 = *(float *)(v4 + 48);
    }
    return synchronizer_setRateAndAnchorTimeLowLevel(v3, a1, MEMORY[0x1E4F1F9F8], MEMORY[0x1E4F1F9F8], 0);
  }
  return result;
}

uint64_t synchronizer_setRateAndAnchorTimeLowLevel(float a1, uint64_t a2, CMTime *a3, uint64_t a4, void *a5)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v10 = DerivedStorage;
  if (a1 != 0.0 && CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 40)))
  {
    if (dword_1E93517E8)
    {
      LODWORD(v34.value) = 0;
      os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    return 0;
  }
  if (dword_1E93517E8)
  {
    LODWORD(v34.value) = 0;
    uint64_t v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!*(void *)(v10 + 32))
  {
    if ((a3->flags & 0x1D) == 1)
    {
      CMClockOrTimebaseRef v23 = CMTimebaseCopySource(*(CMTimebaseRef *)(v10 + 8));
      BOOL v24 = v23;
      memset(&v34, 0, sizeof(v34));
      if (*(unsigned char *)(a4 + 12))
      {
        HostTimeClocuint64_t k = CMClockGetHostTimeClock();
        CMTime time = *(CMTime *)a4;
        CMSyncConvertTime(&v34, &time, HostTimeClock, v24);
      }
      else
      {
        CMSyncGetTime(&v34, v23);
      }
      if (dword_1E93517E8)
      {
        CFRange v29 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      long long v30 = *(OpaqueCMTimebase **)(v10 + 8);
      CMTime time = *a3;
      CMTime immediateSourceTime = v34;
      uint64_t v27 = CMTimebaseSetRateAndAnchorTime(v30, a1, &time, &immediateSourceTime);
      if (v24) {
        CFRelease(v24);
      }
    }
    else
    {
      if (dword_1E93517E8)
      {
        LODWORD(v34.value) = 0;
        CFRange v25 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      uint64_t v27 = CMTimebaseSetRate(*(CMTimebaseRef *)(v10 + 8), a1);
    }
    CFDictionaryRef ValueAtIndex = 0;
    if (!a5) {
      return v27;
    }
    goto LABEL_39;
  }
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(v10 + 24));
  if (Count < 2)
  {
LABEL_17:
    CFDictionaryRef ValueAtIndex = *(const void **)(v10 + 32);
    CMTime v34 = *a3;
    *(_OWORD *)&typea.CFTypeRef value = *(_OWORD *)a4;
    typea.CMTimeEpoch epoch = *(void *)(a4 + 16);
    uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v21) {
      uint64_t v22 = v21;
    }
    else {
      uint64_t v22 = 0;
    }
    uint64_t v26 = *(uint64_t (**)(const void *, CMTime *, CMTime *, float))(v22 + 64);
    if (v26)
    {
      CMTime time = v34;
      CMTime immediateSourceTime = typea;
      uint64_t v20 = v26(ValueAtIndex, &time, &immediateSourceTime, a1);
LABEL_27:
      uint64_t v27 = v20;
      if (!a5) {
        return v27;
      }
    }
    else
    {
LABEL_29:
      uint64_t v27 = 4294954514;
      if (!a5) {
        return v27;
      }
    }
LABEL_39:
    if (v27)
    {
      if (ValueAtIndex) {
        CFRetain(ValueAtIndex);
      }
      *a5 = ValueAtIndex;
    }
    return v27;
  }
  CFIndex v14 = Count;
  CFIndex v15 = 1;
  while (1)
  {
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v10 + 24), v15);
    if (!ValueAtIndex) {
      break;
    }
    CMTime v34 = *a3;
    *(_OWORD *)&type.CFTypeRef value = *(_OWORD *)a4;
    type.CMTimeEpoch epoch = *(void *)(a4 + 16);
    uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v17) {
      uint64_t v18 = v17;
    }
    else {
      uint64_t v18 = 0;
    }
    size_t v19 = *(uint64_t (**)(const void *, CMTime *, CMTime *, float))(v18 + 64);
    if (!v19) {
      goto LABEL_29;
    }
    CMTime time = v34;
    CMTime immediateSourceTime = type;
    uint64_t v20 = v19(ValueAtIndex, &time, &immediateSourceTime, a1);
    if (v20) {
      goto LABEL_27;
    }
    if (v14 == ++v15) {
      goto LABEL_17;
    }
  }
  uint64_t v27 = 4294950925;
  if (a5) {
    goto LABEL_39;
  }
  return v27;
}

void synchronizer_audioRendererClockChangedNotificationHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  newSourceClock[24] = *(CMClockRef *)MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  newSourceClock[0] = 0;
  if (dword_1E93517E8)
  {
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(unsigned int (**)(uint64_t, CMClockRef *))(v8 + 40);
  if (v9 && !v9(a4, newSourceClock))
  {
    MEMORY[0x19970E290](*DerivedStorage);
    if (!*((unsigned char *)DerivedStorage + 53))
    {
      if (DerivedStorage[4] == a4)
      {
        CMClockRef v10 = CMTimebaseCopySourceClock((CMTimebaseRef)DerivedStorage[1]);
        if (!CMTimebaseSetSourceClock((CMTimebaseRef)DerivedStorage[1], newSourceClock[0]) && dword_1E93517E8)
        {
          uint64_t v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        MEMORY[0x19970E2B0](*DerivedStorage);
        if (v10) {
          CFRelease(v10);
        }
        goto LABEL_15;
      }
      if (dword_1E93517E8)
      {
        uint64_t v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    MEMORY[0x19970E2B0](*DerivedStorage);
  }
LABEL_15:
  if (newSourceClock[0]) {
    CFRelease(newSourceClock[0]);
  }
}

uint64_t synchronizer_audioRendererEndpointPreemptedNotificationHandler(uint64_t a1, uint64_t a2)
{
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v6 = *(void *)(VTable + 16);
  uint64_t result = VTable + 16;
  uint64_t v5 = v6;
  if (v6) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, long long *, double))(v7 + 24);
  if (v8)
  {
    long long v9 = *MEMORY[0x1E4F1F9F8];
    uint64_t v10 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
    return v8(a2, &v9, 0.0);
  }
  return result;
}

__CFArray *FigStringConformerCreateResolvedForegroundARGBColorArrayUsingMAXColorAndOpacity(const void *a1, const void *a2)
{
  return stringconformer_createResolvedARGBColorUsingMAXColorAndOpacityFromFunctions(a1, a2, MEMORY[0x1E4F311D0], MEMORY[0x1E4F311E8]);
}

__CFArray *stringconformer_createResolvedARGBColorUsingMAXColorAndOpacityFromFunctions(const void *a1, const void *a2, uint64_t (*a3)(uint64_t, uint64_t *), double (*a4)(uint64_t, uint64_t *))
{
  uint64_t v20 = 1;
  uint64_t v7 = (CGColor *)a3(1, &v20);
  uint64_t v19 = 1;
  double valuePtr = a4(1, &v19);
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFNumberRef v9 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberCGFloatType, &valuePtr);
  uint64_t v10 = v19;
  if (v20 == 1)
  {
    if (a1)
    {
      uint64_t ARGBColorArrayFromCGColor = (uint64_t)CFRetain(a1);
LABEL_6:
      CFArrayRef v12 = (const __CFArray *)ARGBColorArrayFromCGColor;
      if (ARGBColorArrayFromCGColor) {
        goto LABEL_10;
      }
      goto LABEL_9;
    }
    if (v7)
    {
LABEL_3:
      uint64_t ARGBColorArrayFromCGColor = FigTextMarkupCreateARGBColorArrayFromCGColor();
      goto LABEL_6;
    }
  }
  else if (!v20)
  {
    goto LABEL_3;
  }
LABEL_9:
  CFArrayRef v12 = (const __CFArray *)CFRetain(a2);
LABEL_10:
  if (v10 == 1)
  {
    if (a1)
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)a1, 0);
      goto LABEL_17;
    }
  }
  else if (v10)
  {
    goto LABEL_18;
  }
  if (v9)
  {
    CFDictionaryRef ValueAtIndex = v9;
LABEL_17:
    CFTypeRef v14 = CFRetain(ValueAtIndex);
    if (v14) {
      goto LABEL_19;
    }
  }
LABEL_18:
  CFIndex v15 = CFArrayGetValueAtIndex((CFArrayRef)a2, 0);
  CFTypeRef v14 = CFRetain(v15);
LABEL_19:
  MutableCFSetRef Copy = CFArrayCreateMutableCopy(v8, 0, v12);
  CFArraySetValueAtIndex(MutableCopy, 0, v14);
  CFRelease(v12);
  CFRelease(v14);
  CGColorRelease(v7);
  if (v9) {
    CFRelease(v9);
  }
  return MutableCopy;
}

__CFArray *FigStringConformerCreateResolvedBackgroundARGBColorArrayUsingMAXColorAndOpacity(const void *a1, const void *a2)
{
  return stringconformer_createResolvedARGBColorUsingMAXColorAndOpacityFromFunctions(a1, a2, MEMORY[0x1E4F311C8], MEMORY[0x1E4F311E0]);
}

__CFArray *FigStringConformerCreateResolvedWindowARGBColorArrayUsingMAXColorAndOpacity(const void *a1, const void *a2)
{
  return stringconformer_createResolvedARGBColorUsingMAXColorAndOpacityFromFunctions(a1, a2, MEMORY[0x1E4F311D8], MEMORY[0x1E4F311F0]);
}

uint64_t FigStringConformerEdgeStyleForMediaAccessibilityEdgeStyle(uint64_t a1)
{
  switch(a1)
  {
    case 1:
      uint64_t v1 = (uint64_t *)MEMORY[0x1E4F1F750];
      goto LABEL_8;
    case 2:
      uint64_t v1 = (uint64_t *)MEMORY[0x1E4F1F758];
      goto LABEL_8;
    case 3:
      uint64_t v1 = (uint64_t *)MEMORY[0x1E4F1F740];
      goto LABEL_8;
    case 4:
      uint64_t v1 = (uint64_t *)MEMORY[0x1E4F1F760];
      goto LABEL_8;
    case 5:
      uint64_t v1 = (uint64_t *)MEMORY[0x1E4F1F748];
LABEL_8:
      uint64_t result = *v1;
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t FigCaptionRendererFreeLayoutRegionCreate(uint64_t a1, uint64_t a2, void *a3)
{
  if (a3)
  {
    uint64_t v19 = 0;
    MEMORY[0x19970EE10](&FigCaptionRendererFreeLayoutRegionGetClassID_sRegisterFigCaptionRendererFreeLayoutRegionBaseTypeOnce, RegisterFigCaptionRendererFreeLayoutRegionBaseType);
    uint64_t result = CMDerivedObjectCreate();
    if (!result)
    {
      uint64_t v8 = v19;
      uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
      DerivedStorage[7] = a2;
      DerivedStorage[8] = a1;
      uint64_t v18 = 0;
      FigCaptionRendererNodeCreate(&v18);
      uint64_t v10 = v18;
      *uint64_t DerivedStorage = v18;
      FigCaptionRendererNodeProtocolGetProtocolID();
      Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
      if (ProtocolVTable)
      {
        uint64_t v12 = *(void *)(ProtocolVTable + 16);
        if (v12)
        {
          CMTime v13 = *(void (**)(uint64_t, uint64_t))(v12 + 216);
          if (v13) {
            v13(v10, 1);
          }
        }
      }
      uint64_t v14 = *DerivedStorage;
      FigCaptionRendererNodeProtocolGetProtocolID();
      uint64_t v15 = CMBaseObjectGetProtocolVTable();
      if (v15)
      {
        uint64_t v16 = *(void *)(v15 + 16);
        if (v16)
        {
          uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v16 + 232);
          if (v17) {
            v17(v14, 1);
          }
        }
      }
      uint64_t result = 0;
      *a3 = v8;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

void FigCaptionRendererFreeLayoutRegionFinalize()
{
  uint64_t v0 = *(const void **)CMBaseObjectGetDerivedStorage();
  if (v0)
  {
    CFRelease(v0);
  }
}

__CFString *FigCaptionRendererFreeLayoutRegionCopyDebugDescription(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"\tFigCaptionRendererFreeLayoutRegion: <%p>", a1);
  return Mutable;
}

__CFString *FigCaptionRendererFreeLayoutRegion_FigCaptionRendererBaseProtocol_CopyDebugDescription(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"\tFigCaptionRendererFreeLayoutRegion <FigCaptionRendererBaseProtocol> on <%p>", a1);
  return Mutable;
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererBaseProtocol_GetClassName(uint64_t a1, void *a2)
{
  *a2 = "FigCaptionRendererFreeLayoutRegion";
  return 0;
}

__CFString *FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_CopyDebugDescription(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"\tFigCaptionRendererFreeLayoutRegion <FigCaptionRendererNodeProtocol> on <%p>", a1);
  return Mutable;
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_SetParentNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_GetParentNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 16);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_GetChildren(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 24);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_HasChildNode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  __s1 = 0;
  FigCaptionRendererBaseProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable || (uint64_t v8 = *(void *)(ProtocolVTable + 16)) == 0)
  {
LABEL_48:
    uint64_t v16 = 4294954508;
LABEL_49:
    FigSignalErrorAt();
    return v16;
  }
  CFNumberRef v9 = *(uint64_t (**)(uint64_t, char **))(v8 + 8);
  if (!v9)
  {
LABEL_51:
    uint64_t v16 = 4294954514;
    goto LABEL_49;
  }
  uint64_t v10 = v9(a2, &__s1);
  if (v10)
  {
LABEL_54:
    uint64_t v16 = v10;
    goto LABEL_49;
  }
  uint64_t v11 = __s1;
  if (__s1
    && (!strcmp(__s1, "FigCaptionRendererStackLayoutRegion")
     || !strcmp(v11, "FigCaptionRendererTTMLRegion")
     || !strcmp(v11, "FigCaptionRendererCellStackLayoutRegion")
     || !strcmp(v11, "FigCaptionRendereriTTRegion")
     || !strcmp(v11, "FigCaptionRendererSRTRegion")
     || !strcmp(v11, "FigCaptionRendererFreeLayoutRegion")))
  {
    CFStringRef theString1 = 0;
    FigCaptionRendererRegionProtocolGetProtocolID();
    uint64_t v17 = CMBaseObjectGetProtocolVTable();
    if (v17)
    {
      uint64_t v18 = *(void *)(v17 + 16);
      if (v18)
      {
        uint64_t v19 = *(void (**)(uint64_t, CFStringRef *))(v18 + 16);
        if (v19) {
          v19(a2, &theString1);
        }
      }
    }
    char v20 = (char)theString1;
    if (theString1)
    {
      CFArrayRef theArray = 0;
      FigCaptionRendererNodeProtocolGetProtocolID();
      CFArrayRef v21 = (const __CFArray *)CMBaseObjectGetProtocolVTable();
      if (v21)
      {
        uint64_t v22 = *((void *)v21 + 2);
        if (v22 && (CMClockOrTimebaseRef v23 = *(void (**)(uint64_t, CFArrayRef *))(v22 + 24)) != 0)
        {
          v23(a1, &theArray);
          CFArrayRef v21 = theArray;
        }
        else
        {
          CFArrayRef v21 = 0;
        }
      }
      if (CFArrayGetCount(v21) >= 1)
      {
        CFIndex v24 = 0;
        do
        {
          CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v24);
          char v35 = 0;
          FigCaptionRendererBaseProtocolGetProtocolID();
          uint64_t v26 = CMBaseObjectGetProtocolVTable();
          if (!v26) {
            goto LABEL_48;
          }
          uint64_t v27 = *(void *)(v26 + 16);
          if (!v27) {
            goto LABEL_48;
          }
          uint64_t v28 = *(uint64_t (**)(const void *, char **))(v27 + 8);
          if (!v28) {
            goto LABEL_51;
          }
          uint64_t v10 = v28(ValueAtIndex, &v35);
          if (v10) {
            goto LABEL_54;
          }
          CFRange v29 = v35;
          if (v35
            && (!strcmp(v35, "FigCaptionRendererStackLayoutRegion")
             || !strcmp(v29, "FigCaptionRendererTTMLRegion")
             || !strcmp(v29, "FigCaptionRendererCellStackLayoutRegion")
             || !strcmp(v29, "FigCaptionRendereriTTRegion")
             || !strcmp(v29, "FigCaptionRendererSRTRegion")
             || !strcmp(__s1, "FigCaptionRendererFreeLayoutRegion")))
          {
            CFStringRef theString2 = 0;
            FigCaptionRendererRegionProtocolGetProtocolID();
            uint64_t v30 = CMBaseObjectGetProtocolVTable();
            if (v30)
            {
              uint64_t v31 = *(void *)(v30 + 16);
              if (v31)
              {
                __int16 v32 = *(void (**)(const void *, CFStringRef *))(v31 + 16);
                if (v32) {
                  v32(ValueAtIndex, &theString2);
                }
              }
            }
            if (CFStringCompare(theString1, theString2, 1uLL) == kCFCompareEqualTo)
            {
              char v20 = 1;
              goto LABEL_47;
            }
          }
        }
        while (CFArrayGetCount(theArray) > ++v24);
      }
      char v20 = 0;
    }
LABEL_47:
    uint64_t v16 = 0;
    *a3 = v20;
    return v16;
  }
  uint64_t v12 = *DerivedStorage;
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t v13 = CMBaseObjectGetProtocolVTable();
  if (!v13) {
    return 4294954508;
  }
  uint64_t v14 = *(void *)(v13 + 16);
  if (!v14) {
    return 4294954508;
  }
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, char *))(v14 + 32);
  if (v15) {
    return v15(v12, a2, a3);
  }
  else {
    return 4294954514;
  }
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_AddChildNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 40);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_RemoveChildNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 48);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_RemovelAllChildrenNodes()
{
  uint64_t v0 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v2 = *(void *)(ProtocolVTable + 16);
  if (!v2) {
    return 4294954508;
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v2 + 56);
  if (!v3) {
    return 4294954514;
  }

  return v3(v0);
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_SetViewport(double a1, double a2, double a3, double a4)
{
  uint64_t v8 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v14 = *(void *)(ProtocolVTable + 16);
  if (!v14) {
    return 4294954508;
  }
  uint64_t v15 = *(uint64_t (**)(uint64_t, __n128, __n128, __n128, __n128))(v14 + 64);
  if (!v15) {
    return 4294954514;
  }
  v10.n128_f64[0] = a1;
  v11.n128_f64[0] = a2;
  v12.n128_f64[0] = a3;
  v13.n128_f64[0] = a4;

  return v15(v8, v10, v11, v12, v13);
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_GetViewport(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 72);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_SetFCRBounds(uint64_t a1, long long *a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  long long v8 = *a2;
  long long v9 = a2[1];
  long long v10 = a2[2];
  long long v11 = a2[3];
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, _OWORD *))(v5 + 80);
  if (!v6) {
    return 4294954514;
  }
  v12[0] = v8;
  v12[1] = v9;
  _DWORD v12[2] = v10;
  v12[3] = v11;
  return v6(v3, v12);
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_GetFCRBounds(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 88);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_SetCGBounds(double a1, double a2, double a3, double a4)
{
  uint64_t v8 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v14 = *(void *)(ProtocolVTable + 16);
  if (!v14) {
    return 4294954508;
  }
  uint64_t v15 = *(uint64_t (**)(uint64_t, __n128, __n128, __n128, __n128))(v14 + 96);
  if (!v15) {
    return 4294954514;
  }
  v10.n128_f64[0] = a1;
  v11.n128_f64[0] = a2;
  v12.n128_f64[0] = a3;
  v13.n128_f64[0] = a4;

  return v15(v8, v10, v11, v12, v13);
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_GetCGBounds(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 104);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_SetCGSize(double a1, double a2)
{
  uint64_t v4 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v8 = *(void *)(ProtocolVTable + 16);
  if (!v8) {
    return 4294954508;
  }
  long long v9 = *(uint64_t (**)(uint64_t, __n128, __n128))(v8 + 112);
  if (!v9) {
    return 4294954514;
  }
  v6.n128_f64[0] = a1;
  v7.n128_f64[0] = a2;

  return v9(v4, v6, v7);
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_GetCGSize(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 120);
  if (!v6) {
    return 4294954508;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_SetCGOrigin(double a1, double a2)
{
  uint64_t v4 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v8 = *(void *)(ProtocolVTable + 16);
  if (!v8) {
    return 4294954508;
  }
  long long v9 = *(uint64_t (**)(uint64_t, __n128, __n128))(v8 + 128);
  if (!v9) {
    return 4294954514;
  }
  v6.n128_f64[0] = a1;
  v7.n128_f64[0] = a2;

  return v9(v4, v6, v7);
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_GetCGOrigin(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 136);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_SetPaddings(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v15 = *(void *)(ProtocolVTable + 16);
  if (!v15) {
    return 4294954508;
  }
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 144);
  if (!v16) {
    return 4294954514;
  }

  return v16(v13, a2, a3, a4, a5, a6, a7);
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_GetInsetCGBounds(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 152);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_PurgeImageCache()
{
  uint64_t v0 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v2 = *(void *)(ProtocolVTable + 16);
  if (!v2) {
    return 4294954508;
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v2 + 160);
  if (!v3) {
    return 4294954514;
  }

  return v3(v0);
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_SetImageCache(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 168);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_GetImageCache(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 176);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_GetImageCacheWidth(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 184);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_GetImageCacheHeight(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 192);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_AllocateImageBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v9 = *(void *)(ProtocolVTable + 16);
  if (!v9) {
    return 4294954508;
  }
  __n128 v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 200);
  if (!v10) {
    return 4294954514;
  }

  return v10(v7, a2, a3, a4);
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_GetImageBuffer(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 208);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_SetNeedRedraw(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 216);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_GetNeedRedraw(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 224);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_SetNeedLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 232);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_GetNeedLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 240);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_HasActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 248);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_SetZOrder(double a1)
{
  uint64_t v2 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, __n128))(v5 + 256);
  if (!v6) {
    return 4294954514;
  }
  v4.n128_f64[0] = a1;

  return v6(v2, v4);
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_GetZOrder(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 264);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_ResetNodeTree()
{
  uint64_t v0 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v2 = *(void *)(ProtocolVTable + 16);
  if (!v2) {
    return 4294954508;
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v2 + 272);
  if (!v3) {
    return 4294954514;
  }

  return v3(v0);
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_Draw(const void *a1, uint64_t a2)
{
  CGSize v4 = *(CGSize *)(MEMORY[0x1E4F1DB20] + 16);
  v20.origin = (CGPoint)*MEMORY[0x1E4F1DB20];
  v20.CGSize size = v4;
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    uint64_t v6 = *(void *)(ProtocolVTable + 16);
    if (v6)
    {
      uint64_t v7 = *(void (**)(const void *, CGRect *))(v6 + 104);
      if (v7) {
        v7(a1, &v20);
      }
    }
  }
  if (a1)
  {
    CFDictionaryRef v8 = *(const __CFDictionary **)(a2 + 296);
    if (v8)
    {
      int Value = CFDictionaryGetValue(v8, a1);
      double MidX = CGRectGetMidX(v20);
      double MidY = CGRectGetMidY(v20);
      FigCaptionRendererOutputNodeProtocolGetProtocolID();
      uint64_t v12 = CMBaseObjectGetProtocolVTable();
      if (v12)
      {
        uint64_t v13 = *(void *)(v12 + 16);
        if (v13)
        {
          uint64_t v14 = *(void (**)(const void *, double, double))(v13 + 72);
          if (v14) {
            v14(Value, MidX, MidY);
          }
        }
      }
      CGSize size = v20.size;
      FigCaptionRendererOutputNodeProtocolGetProtocolID();
      uint64_t v16 = CMBaseObjectGetProtocolVTable();
      if (v16)
      {
        uint64_t v17 = *(void *)(v16 + 16);
        if (v17)
        {
          uint64_t v18 = *(void (**)(const void *, double, double))(v17 + 88);
          if (v18) {
            v18(Value, size.width, size.height);
          }
        }
      }
    }
  }
  return 0;
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_Layout(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  uint64_t v76 = 0;
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    uint64_t v6 = *(void *)(ProtocolVTable + 16);
    if (v6)
    {
      uint64_t v7 = *(void (**)(uint64_t, uint64_t *))(v6 + 16);
      if (v7)
      {
        v7(a1, &v76);
        if (v76)
        {
          uint64_t v8 = CMBaseObjectGetDerivedStorage();
          int v9 = *(_DWORD *)(v8 + 16);
          double v10 = (double)*(int *)(v8 + 20) * 0.0533;
          double v11 = *(double *)(v8 + 40);
          double v12 = *(double *)(v8 + 24);
          if (*(double *)(v8 + 48) / 100.0 + *(double *)(v8 + 32) / -100.0 * v10 >= 0.0) {
            double v13 = *(double *)(v8 + 48) / 100.0 + *(double *)(v8 + 32) / -100.0 * v10;
          }
          else {
            double v13 = 0.0;
          }
          uint64_t v14 = *(void *)v8;
          FigCaptionRendererNodeProtocolGetProtocolID();
          uint64_t v15 = CMBaseObjectGetProtocolVTable();
          if (v15)
          {
            uint64_t v16 = *(void *)(v15 + 16);
            if (v16)
            {
              uint64_t v17 = *(void (**)(uint64_t, long long *))(v16 + 80);
              if (v17)
              {
                LOBYTE(v78) = 1;
                *(_DWORD *)((char *)&v78 + 1) = 0;
                DWORD1(v78) = 0;
                *((double *)&v78 + 1) = v11 / 100.0 + v12 / -100.0 * ((double)v9 / 100.0);
                LOBYTE(v79.width) = 1;
                *(_DWORD *)((char *)&v79.width + 1) = 0;
                HIDWORD(v79.width) = 0;
                v79.double height = v13;
                LOBYTE(v80) = 1;
                *(_DWORD *)((char *)&v80 + 1) = 0;
                DWORD1(v80) = 0;
                *((double *)&v80 + 1) = (double)v9 / 100.0;
                LOBYTE(v81) = 1;
                *(_DWORD *)((char *)&v81 + 1) = 0;
                DWORD1(v81) = 0;
                *((double *)&v81 + 1) = v10;
                v17(v14, &v78);
              }
            }
          }
          uint64_t v18 = (uint64_t *)CMBaseObjectGetDerivedStorage();
          long long v78 = FCRRectNull;
          CGSize v79 = *(CGSize *)&byte_1949966D8;
          long long v80 = xmmword_1949966E8;
          long long v81 = *(_OWORD *)&byte_1949966F8;
          CGSize v71 = *(CGSize *)(MEMORY[0x1E4F1DB20] + 16);
          CGPoint v72 = (CGPoint)*MEMORY[0x1E4F1DB20];
          v77.origin = (CGPoint)*MEMORY[0x1E4F1DB20];
          v77.CGSize size = v71;
          FigCaptionRendererNodeProtocolGetProtocolID();
          uint64_t v19 = CMBaseObjectGetProtocolVTable();
          if (v19)
          {
            uint64_t v20 = *(void *)(v19 + 16);
            if (v20)
            {
              CFArrayRef v21 = *(void (**)(uint64_t, long long *))(v20 + 88);
              if (v21) {
                v21(a1, &v78);
              }
            }
          }
          FigCaptionRendererNodeProtocolGetProtocolID();
          uint64_t v22 = CMBaseObjectGetProtocolVTable();
          if (v22)
          {
            uint64_t v23 = *(void *)(v22 + 16);
            if (v23)
            {
              CFIndex v24 = *(void (**)(uint64_t, CGRect *))(v23 + 72);
              if (v24) {
                v24(a1, &v77);
              }
            }
          }
          if (*((double *)&v80 + 1) != -1.0)
          {
            double width = v77.size.width;
            CGFloat v53 = v77.origin.x + *((double *)&v78 + 1);
            if ((_BYTE)v78) {
              CGFloat v53 = v77.origin.x + *((double *)&v78 + 1) * v77.size.width;
            }
            double v54 = v77.origin.y + v79.height;
            if (LOBYTE(v79.width)) {
              double v54 = v77.origin.y + v79.height * v77.size.height;
            }
            double height = 1.0;
            if (!(_BYTE)v80) {
              double width = 1.0;
            }
            if ((_BYTE)v81) {
              double height = v77.size.height;
            }
            double v57 = *((double *)&v81 + 1) * height;
            double v56 = *((double *)&v80 + 1) * width;
            CGRect v82 = CGRectIntegral(*(CGRect *)&v53);
            double x = v82.origin.x;
            double y = v82.origin.y;
            double v60 = v82.size.width;
            double v61 = v82.size.height;
            uint64_t v62 = *v18;
            FigCaptionRendererNodeProtocolGetProtocolID();
            uint64_t v63 = CMBaseObjectGetProtocolVTable();
            if (v63)
            {
              uint64_t v64 = *(void *)(v63 + 16);
              if (v64)
              {
                CFIndex v65 = *(void (**)(uint64_t, double, double, double, double))(v64 + 96);
                if (v65) {
                  v65(v62, x, y, v60, v61);
                }
              }
            }
          }
          CFArrayRef theArray = 0;
          FigCaptionRendererNodeProtocolGetProtocolID();
          uint64_t v25 = CMBaseObjectGetProtocolVTable();
          if (v25)
          {
            uint64_t v26 = *(void *)(v25 + 16);
            if (v26)
            {
              uint64_t v27 = *(void (**)(uint64_t, CFArrayRef *))(v26 + 24);
              if (v27) {
                v27(a1, &theArray);
              }
            }
          }
          CFIndex Count = CFArrayGetCount(theArray);
          if (Count >= 1)
          {
            CFIndex v29 = Count + 1;
            while (1)
            {
              CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v29 - 2);
              __s1 = 0;
              FigCaptionRendererBaseProtocolGetProtocolID();
              uint64_t v31 = CMBaseObjectGetProtocolVTable();
              if (!v31) {
                break;
              }
              uint64_t v32 = *(void *)(v31 + 16);
              if (!v32) {
                break;
              }
              long long v33 = *(unsigned int (**)(const void *, char **))(v32 + 8);
              if (!v33 || v33(ValueAtIndex, &__s1)) {
                break;
              }
              if (__s1 && !strcmp(__s1, "FigCaptionRendererCaption"))
              {
                int v73 = 0;
                FigCaptionRendererCaptionProtocolGetProtocolID();
                uint64_t v34 = CMBaseObjectGetProtocolVTable();
                if (!v34) {
                  break;
                }
                uint64_t v35 = *(void *)(v34 + 16);
                if (!v35) {
                  break;
                }
                uint64_t v36 = *(unsigned int (**)(const void *, int *))(v35 + 48);
                if (!v36 || v36(ValueAtIndex, &v73)) {
                  break;
                }
                if (v73 == 3)
                {
                  long long v78 = (__int128)v72;
                  CGSize v79 = v71;
                  FigCaptionRendererNodeProtocolGetProtocolID();
                  uint64_t v37 = CMBaseObjectGetProtocolVTable();
                  if (!v37) {
                    break;
                  }
                  uint64_t v38 = *(void *)(v37 + 16);
                  if (!v38) {
                    break;
                  }
                  CFArrayRef v39 = *(unsigned int (**)(const void *, long long *))(v38 + 104);
                  if (!v39) {
                    break;
                  }
                  if (v39(ValueAtIndex, &v78)) {
                    break;
                  }
                  v77.origin = v72;
                  v77.CGSize size = v71;
                  FigCaptionRendererNodeProtocolGetProtocolID();
                  uint64_t v40 = CMBaseObjectGetProtocolVTable();
                  if (!v40) {
                    break;
                  }
                  uint64_t v41 = *(void *)(v40 + 16);
                  if (!v41) {
                    break;
                  }
                  long long v42 = *(unsigned int (**)(const void *, CGRect *))(v41 + 72);
                  if (!v42 || v42(ValueAtIndex, &v77)) {
                    break;
                  }
                  double MidX = CGRectGetMidX(v77);
                  double MidY = CGRectGetMidY(v77);
                  CGSize v45 = v79;
                  FigCaptionRendererNodeProtocolGetProtocolID();
                  uint64_t v46 = CMBaseObjectGetProtocolVTable();
                  if (v46)
                  {
                    uint64_t v47 = *(void *)(v46 + 16);
                    if (v47)
                    {
                      int v48 = *(void (**)(const void *, double, double))(v47 + 128);
                      if (v48) {
                        v48(ValueAtIndex, MidX - v45.width * 0.5, MidY - v45.height * 0.5);
                      }
                    }
                  }
                  FigCaptionRendererNodeProtocolGetProtocolID();
                  uint64_t v49 = CMBaseObjectGetProtocolVTable();
                  if (v49)
                  {
                    uint64_t v50 = *(void *)(v49 + 16);
                    if (v50)
                    {
                      int v51 = *(void (**)(const void *, uint64_t))(v50 + 232);
                      if (v51) {
                        v51(ValueAtIndex, 1);
                      }
                    }
                  }
                }
              }
              if ((unint64_t)--v29 <= 1) {
                goto LABEL_69;
              }
            }
            FigSignalErrorAt();
          }
        }
      }
    }
  }
LABEL_69:
  uint64_t v66 = *DerivedStorage;
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t v67 = CMBaseObjectGetProtocolVTable();
  if (!v67) {
    return 4294954508;
  }
  uint64_t v68 = *(void *)(v67 + 16);
  if (!v68) {
    return 4294954508;
  }
  char v69 = *(uint64_t (**)(uint64_t, uint64_t))(v68 + 288);
  if (v69) {
    return v69(v66, a2);
  }
  else {
    return 4294954514;
  }
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_ExecActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 296);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_Compose(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  __int16 v25 = 0;
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    uint64_t v6 = *(void *)(ProtocolVTable + 16);
    if (v6)
    {
      uint64_t v7 = *(void (**)(uint64_t, char *))(v6 + 248);
      if (v7)
      {
        v7(a1, (char *)&v25 + 1);
        if (HIBYTE(v25))
        {
          FigCaptionRendererNodeProtocolGetProtocolID();
          uint64_t v8 = CMBaseObjectGetProtocolVTable();
          if (v8)
          {
            uint64_t v9 = *(void *)(v8 + 16);
            if (v9)
            {
              double v10 = *(void (**)(uint64_t, uint64_t))(v9 + 296);
              if (v10) {
                v10(a1, a2);
              }
            }
          }
        }
      }
    }
  }
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t v11 = CMBaseObjectGetProtocolVTable();
  if (v11)
  {
    uint64_t v12 = *(void *)(v11 + 16);
    if (v12)
    {
      double v13 = *(void (**)(uint64_t, __int16 *))(v12 + 240);
      if (v13)
      {
        v13(a1, &v25);
        if ((_BYTE)v25)
        {
          FigCaptionRendererNodeProtocolGetProtocolID();
          uint64_t v14 = CMBaseObjectGetProtocolVTable();
          if (v14)
          {
            uint64_t v15 = *(void *)(v14 + 16);
            if (v15)
            {
              uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v15 + 288);
              if (v16) {
                v16(a1, a2);
              }
            }
          }
        }
      }
    }
  }
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t v17 = CMBaseObjectGetProtocolVTable();
  if (v17)
  {
    uint64_t v18 = *(void *)(v17 + 16);
    if (v18)
    {
      uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v18 + 280);
      if (v19) {
        v19(a1, a2);
      }
    }
  }
  uint64_t v20 = *DerivedStorage;
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t v21 = CMBaseObjectGetProtocolVTable();
  if (!v21) {
    return 4294954508;
  }
  uint64_t v22 = *(void *)(v21 + 16);
  if (!v22) {
    return 4294954508;
  }
  uint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t))(v22 + 304);
  if (v23) {
    return v23(v20, a2);
  }
  else {
    return 4294954514;
  }
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_OnChildUpdateDisplayRequest(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CGSize v4 = *(void (**)(_OWORD *))(DerivedStorage + 64);
  if (v4 && *(void *)(DerivedStorage + 56))
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    v7[0] = *(_OWORD *)a2;
    v7[1] = v5;
    uint64_t v8 = *(void *)(a2 + 32);
    v4(v7);
  }
  return 0;
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_AddAction(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 320);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_RemoveAllActions()
{
  uint64_t v0 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v2 = *(void *)(ProtocolVTable + 16);
  if (!v2) {
    return 4294954508;
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v2 + 328);
  if (!v3) {
    return 4294954514;
  }

  return v3(v0);
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_SetActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 336);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_GetActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 344);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_SelectAt(double a1, double a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v11 = *(void *)(ProtocolVTable + 16);
  if (!v11) {
    return 4294954508;
  }
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, __n128, __n128))(v11 + 352);
  if (!v12) {
    return 4294954514;
  }
  v9.n128_f64[0] = a1;
  v10.n128_f64[0] = a2;

  return v12(v7, a4, v9, v10);
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_UnselectAt(double a1, double a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v11 = *(void *)(ProtocolVTable + 16);
  if (!v11) {
    return 4294954508;
  }
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, __n128, __n128))(v11 + 360);
  if (!v12) {
    return 4294954514;
  }
  v9.n128_f64[0] = a1;
  v10.n128_f64[0] = a2;

  return v12(v7, a4, v9, v10);
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_IsSelected(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 368);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_BeginScene(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 376);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_EndScene(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 384);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

__CFString *FigCaptionRendererFreeLayoutRegion_FigCaptionRendererRegionProtocol_CopyDebugDescription(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"\tFigCaptionRendererFreeLayoutRegion <FigCaptionRendererRegionProtocol> on <%p>", a1);
  return Mutable;
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererRegionProtocol_SetRegionID(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CGSize v4 = *(const void **)(DerivedStorage + 8);
  *(void *)(DerivedStorage + 8) = a2;
  if (a2) {
    CFRetain(a2);
  }
  if (v4) {
    CFRelease(v4);
  }
  return 0;
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererRegionProtocol_GetRegionID(uint64_t a1, void *a2)
{
  *a2 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  return 0;
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererRegionProtocol_SetWidth(uint64_t a1, int a2)
{
  *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 16) = a2;
  return 0;
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererRegionProtocol_GetWidth(uint64_t a1, _DWORD *a2)
{
  *a2 = *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 16);
  return 0;
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererRegionProtocol_SetLines(uint64_t a1, int a2)
{
  *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 20) = a2;
  return 0;
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererRegionProtocol_GetLines(uint64_t a1, _DWORD *a2)
{
  *a2 = *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 20);
  return 0;
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererRegionProtocol_SetRegionAnchor(double a1, double a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(double *)(DerivedStorage + 24) = a1;
  *(double *)(DerivedStorage + 32) = a2;
  return 0;
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererRegionProtocol_GetRegionAnchor(uint64_t a1, _OWORD *a2)
{
  *a2 = *(_OWORD *)(CMBaseObjectGetDerivedStorage() + 24);
  return 0;
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererRegionProtocol_SetViewportAnchor(double a1, double a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(double *)(DerivedStorage + 40) = a1;
  *(double *)(DerivedStorage + 48) = a2;
  return 0;
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererRegionProtocol_GetViewportAnchor(uint64_t a1, _OWORD *a2)
{
  *a2 = *(_OWORD *)(CMBaseObjectGetDerivedStorage() + 40);
  return 0;
}

uint64_t RegisterFigCaptionRendererFreeLayoutRegionBaseType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

CFTypeRef FigCaptionRendererFreeLayoutRegionBaseCopyFormattingDesc()
{
  return CFRetain(@"[FigCaptionRendererFreeLayoutRegion]");
}

uint64_t FigFairPlayAirPlaySessionCreateWithProtectionInfo(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = [FigCPEFPAirPlaySession alloc];
  uint64_t v7 = [a3 objectForKey:@"RouteInfo"];
  uint64_t v8 = [a3 objectForKey:@"EndpointPlaybackSession"];
  uint64_t v9 = [a3 objectForKey:@"MediaControlUUID"];

  return (uint64_t)[(FigCPEFPAirPlaySession *)v6 initWithFairPlayContext:a1 protectionInfo:a2 routeInfo:v7 playbackSession:v8 mediaControlUUID:v9];
}

uint64_t FigFairPlayAirPlaySessionCreateWithContentInfo(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = [FigCPEFPAirPlaySession alloc];
  uint64_t v7 = [a3 objectForKey:@"RouteInfo"];
  uint64_t v8 = [a3 objectForKey:@"EndpointPlaybackSession"];
  uint64_t v9 = [a3 objectForKey:@"MediaControlUUID"];

  return (uint64_t)[(FigCPEFPAirPlaySession *)v6 initWithFairPlayContext:a1 contentInfo:a2 routeInfo:v7 playbackSession:v8 mediaControlUUID:v9];
}

void FigFairPlayAirPlaySessionDestroy(void *a1)
{
  [a1 endSession];
}

uint64_t FigFairPlayAirPlaySessionBeginAsync(void *a1, uint64_t a2, uint64_t a3)
{
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  void v4[2] = __FigFairPlayAirPlaySessionBeginAsync_block_invoke;
  v4[3] = &unk_1E57AAB38;
  v4[4] = a3;
  [a1 beginSessionWithCompletionQueue:a2 completionHandler:v4];
  return 0;
}

uint64_t __FigFairPlayAirPlaySessionBeginAsync_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void authorizeItemCompletionHandler(CFTypeRef cf, CFTypeRef a2, int a3, uint64_t a4)
{
  if (cf) {
    CFRetain(cf);
  }
  if (a2) {
    CFRetain(a2);
  }
  uint64_t v8 = *(NSObject **)(*(void *)a4 + 72);
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = __authorizeItemCompletionHandler_block_invoke;
  v9[3] = &__block_descriptor_60_e5_v8__0l;
  v9[4] = a4;
  v9[5] = cf;
  v9[6] = a2;
  int v10 = a3;
  dispatch_async(v8, v9);
}

void __authorizeItemCompletionHandler_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)MEMORY[0x199711A30]();
  objc_msgSend(**(id **)(a1 + 32), "authorizeItemCompletionHandler_objc:picData:playerGUID:error:", *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(unsigned int *)(a1 + 56));

  dispatch_release(*(dispatch_object_t *)(*(void *)(a1 + 32) + 16));
  uint64_t v3 = *(CFTypeRef **)(a1 + 32);
  if (v3[1])
  {
    CFRelease(v3[1]);
    uint64_t v3 = *(CFTypeRef **)(a1 + 32);
  }
  free(v3);
  CGSize v4 = *(const void **)(a1 + 40);
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = *(const void **)(a1 + 48);
  if (v5)
  {
    CFRelease(v5);
  }
}

BOOL FigSpeedRampIsCMTimeMappingArrayDataContinuous(const __CFData *a1)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  uint64_t BytePtr = CFDataGetBytePtr(a1);
  unint64_t Length = CFDataGetLength(a1);
  CMTimeValue v48 = *(void *)BytePtr;
  CMTimeFlags v4 = *((_DWORD *)BytePtr + 3);
  CMTimeScale v49 = *((_DWORD *)BytePtr + 2);
  CMTimeEpoch v5 = *((void *)BytePtr + 2);
  uint64_t v6 = MEMORY[0x1E4F1FA48];
  CMTimeFlags v7 = *(_DWORD *)(MEMORY[0x1E4F1FA48] + 12);
  CMTimeEpoch v8 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
  int v9 = v7 & 0x1F;
  if ((v4 & 0x1F) != 3 && v9 != 3) {
    goto LABEL_52;
  }
  memset(&time1, 0, 24);
  rhs.CMTimeEpoch epoch = v8;
  lhs.CFTypeRef value = v48;
  lhs.CMTimeScale timescale = v49;
  lhs.CMTimeFlags flags = v4;
  lhs.CMTimeEpoch epoch = v5;
  rhs.CFTypeRef value = *MEMORY[0x1E4F1FA48];
  rhs.CMTimeScale timescale = *(_DWORD *)(MEMORY[0x1E4F1FA48] + 8);
  rhs.CMTimeFlags flags = v7;
  CMTimeSubtract(&time, &lhs, &rhs);
  CMTimeAbsoluteValue(&time1.start, &time);
  CMTimeMake(&time2, 1, 1000000000);
  CMTime lhs = time1.start;
  if (CMTimeCompare(&lhs, &time2) > 0)
  {
LABEL_52:
    time1.start.CFTypeRef value = v48;
    time1.start.CMTimeScale timescale = v49;
    time1.start.CMTimeFlags flags = v4;
    time1.start.CMTimeEpoch epoch = v5;
    lhs.CFTypeRef value = *(void *)v6;
    lhs.CMTimeScale timescale = *(_DWORD *)(v6 + 8);
    lhs.CMTimeFlags flags = v7;
    lhs.CMTimeEpoch epoch = v8;
    if (CMTimeCompare(&time1.start, &lhs)) {
      return 0;
    }
  }
  CMTimeValue v48 = *((void *)BytePtr + 6);
  CMTimeFlags v11 = *((_DWORD *)BytePtr + 15);
  CMTimeScale v49 = *((_DWORD *)BytePtr + 14);
  CMTimeEpoch v12 = *((void *)BytePtr + 8);
  if ((v11 & 0x1F) != 3 && v9 != 3) {
    goto LABEL_50;
  }
  memset(&time1, 0, 24);
  CMTimeValue v13 = *((void *)BytePtr + 6);
  rhs.CMTimeEpoch epoch = v8;
  lhs.CFTypeRef value = v13;
  lhs.CMTimeScale timescale = *((_DWORD *)BytePtr + 14);
  lhs.CMTimeFlags flags = v11;
  lhs.CMTimeEpoch epoch = v12;
  rhs.CFTypeRef value = *(void *)v6;
  rhs.CMTimeScale timescale = *(_DWORD *)(v6 + 8);
  rhs.CMTimeFlags flags = v7;
  CMTimeSubtract(&time, &lhs, &rhs);
  CMTimeAbsoluteValue(&time1.start, &time);
  CMTimeMake(&time2, 1, 1000000000);
  CMTime lhs = time1.start;
  if (CMTimeCompare(&lhs, &time2) > 0)
  {
LABEL_50:
    time1.start.CFTypeRef value = v48;
    time1.start.CMTimeScale timescale = v49;
    time1.start.CMTimeFlags flags = v11;
    time1.start.CMTimeEpoch epoch = v12;
    lhs.CFTypeRef value = *(void *)v6;
    lhs.CMTimeScale timescale = *(_DWORD *)(v6 + 8);
    lhs.CMTimeFlags flags = v7;
    lhs.CMTimeEpoch epoch = v8;
    if (CMTimeCompare(&time1.start, &lhs)) {
      return 0;
    }
  }
  CMTimeFlags v14 = *((_DWORD *)BytePtr + 9);
  if ((v14 & 0x1D) != 1) {
    return 0;
  }
  CMTimeValue v48 = *((void *)BytePtr + 3);
  CMTimeScale v49 = *((_DWORD *)BytePtr + 8);
  CMTimeEpoch v15 = *((void *)BytePtr + 5);
  if ((v14 & 0x1F) == 3 || v9 == 3)
  {
    memset(&time1, 0, 24);
    CMTimeValue v16 = *((void *)BytePtr + 3);
    rhs.CMTimeEpoch epoch = v8;
    lhs.CFTypeRef value = v16;
    lhs.CMTimeScale timescale = *((_DWORD *)BytePtr + 8);
    lhs.CMTimeFlags flags = v14;
    lhs.CMTimeEpoch epoch = v15;
    rhs.CFTypeRef value = *(void *)v6;
    rhs.CMTimeScale timescale = *(_DWORD *)(v6 + 8);
    rhs.CMTimeFlags flags = v7;
    CMTimeSubtract(&time, &lhs, &rhs);
    CMTimeAbsoluteValue(&time1.start, &time);
    CMTimeMake(&time2, 1, 1000000000);
    CMTime lhs = time1.start;
    if (CMTimeCompare(&lhs, &time2) <= 0) {
      return 0;
    }
  }
  time1.start.CFTypeRef value = v48;
  time1.start.CMTimeScale timescale = v49;
  time1.start.CMTimeFlags flags = v14;
  time1.start.CMTimeEpoch epoch = v15;
  CMTimeValue v17 = *(void *)v6;
  lhs.CFTypeRef value = *(void *)v6;
  CMTimeScale v18 = *(_DWORD *)(v6 + 8);
  lhs.CMTimeScale timescale = v18;
  lhs.CMTimeFlags flags = v7;
  lhs.CMTimeEpoch epoch = v8;
  if (CMTimeCompare(&time1.start, &lhs) < 1) {
    return 0;
  }
  CMTimeFlags v19 = *((_DWORD *)BytePtr + 21);
  if ((v19 & 0x1D) != 1) {
    return 0;
  }
  CMTimeValue v48 = *((void *)BytePtr + 9);
  CMTimeScale v49 = *((_DWORD *)BytePtr + 20);
  CMTimeEpoch v20 = *((void *)BytePtr + 11);
  if ((v19 & 0x1F) == 3 || v9 == 3)
  {
    memset(&time1, 0, 24);
    CMTimeValue v21 = *((void *)BytePtr + 9);
    rhs.CMTimeEpoch epoch = v8;
    lhs.CFTypeRef value = v21;
    lhs.CMTimeScale timescale = *((_DWORD *)BytePtr + 20);
    lhs.CMTimeFlags flags = v19;
    lhs.CMTimeEpoch epoch = v20;
    rhs.CFTypeRef value = v17;
    rhs.CMTimeScale timescale = v18;
    rhs.CMTimeFlags flags = v7;
    CMTimeSubtract(&time, &lhs, &rhs);
    CMTimeAbsoluteValue(&time1.start, &time);
    CMTimeMake(&time2, 1, 1000000000);
    CMTime lhs = time1.start;
    if (CMTimeCompare(&lhs, &time2) <= 0) {
      return 0;
    }
  }
  time1.start.CFTypeRef value = v48;
  time1.start.CMTimeScale timescale = v49;
  time1.start.CMTimeFlags flags = v19;
  time1.start.CMTimeEpoch epoch = v20;
  lhs.CFTypeRef value = v17;
  lhs.CMTimeScale timescale = v18;
  lhs.CMTimeFlags flags = v7;
  lhs.CMTimeEpoch epoch = v8;
  if (CMTimeCompare(&time1.start, &lhs) < 1) {
    return 0;
  }
  if (Length >= 0xC0)
  {
    BOOL v40 = 0;
    unint64_t v23 = 2;
    if (Length / 0x60 > 2) {
      unint64_t v23 = Length / 0x60;
    }
    unint64_t v38 = v23;
    unint64_t v39 = Length / 0x60;
    CFIndex v24 = (CMTimeEpoch *)(BytePtr + 184);
    uint64_t v25 = 1;
    do
    {
      long long v26 = *(_OWORD *)(v24 - 23);
      long long v27 = *(_OWORD *)(v24 - 19);
      *(_OWORD *)&time1.start.CMTimeEpoch epoch = *(_OWORD *)(v24 - 21);
      *(_OWORD *)&time1.duration.CMTimeScale timescale = v27;
      *(_OWORD *)&time1.start.CFTypeRef value = v26;
      CMTimeRangeGetEnd(&v43, &time1);
      CMTimeValue v48 = *(v24 - 11);
      CMTimeFlags v28 = *((_DWORD *)v24 - 19);
      CMTimeScale v49 = *((_DWORD *)v24 - 20);
      CMTimeEpoch v29 = *(v24 - 9);
      if ((v43.flags & 0x1F) != 3 && (v28 & 0x1F) != 3) {
        goto LABEL_49;
      }
      memset(&time1, 0, 24);
      CMTime lhs = v43;
      rhs.CFTypeRef value = v48;
      rhs.CMTimeScale timescale = v49;
      rhs.CMTimeFlags flags = v28;
      rhs.CMTimeEpoch epoch = v29;
      CMTimeSubtract(&time, &lhs, &rhs);
      CMTimeAbsoluteValue(&time1.start, &time);
      CMTimeMake(&time2, 1, 1000000000);
      CMTime lhs = time1.start;
      if (CMTimeCompare(&lhs, &time2) > 0)
      {
LABEL_49:
        time1.CMTime start = v43;
        lhs.CFTypeRef value = v48;
        lhs.CMTimeScale timescale = v49;
        lhs.CMTimeFlags flags = v28;
        lhs.CMTimeEpoch epoch = v29;
        if (CMTimeCompare(&time1.start, &lhs)) {
          break;
        }
      }
      CMTimeValue v48 = *(v24 - 8);
      CMTimeFlags v30 = *((_DWORD *)v24 - 13);
      CMTimeScale v49 = *((_DWORD *)v24 - 14);
      CMTimeEpoch v31 = *(v24 - 6);
      if ((v30 & 0x1F) == 3 || v9 == 3)
      {
        memset(&time1, 0, 24);
        rhs.CMTimeEpoch epoch = v8;
        lhs.CFTypeRef value = v48;
        lhs.CMTimeScale timescale = v49;
        lhs.CMTimeFlags flags = v30;
        lhs.CMTimeEpoch epoch = v31;
        rhs.CFTypeRef value = v17;
        rhs.CMTimeScale timescale = v18;
        rhs.CMTimeFlags flags = v7;
        CMTimeSubtract(&time, &lhs, &rhs);
        CMTimeAbsoluteValue(&time1.start, &time);
        CMTimeMake(&time2, 1, 1000000000);
        CMTime lhs = time1.start;
        if (CMTimeCompare(&lhs, &time2) <= 0) {
          break;
        }
      }
      time1.start.CFTypeRef value = v48;
      time1.start.CMTimeScale timescale = v49;
      time1.start.CMTimeFlags flags = v30;
      time1.start.CMTimeEpoch epoch = v31;
      lhs.CFTypeRef value = v17;
      lhs.CMTimeScale timescale = v18;
      lhs.CMTimeFlags flags = v7;
      lhs.CMTimeEpoch epoch = v8;
      if (CMTimeCompare(&time1.start, &lhs) < 1) {
        break;
      }
      long long v32 = *(_OWORD *)(v24 - 17);
      long long v33 = *(_OWORD *)(v24 - 13);
      *(_OWORD *)&time1.start.CMTimeEpoch epoch = *(_OWORD *)(v24 - 15);
      *(_OWORD *)&time1.duration.CMTimeScale timescale = v33;
      *(_OWORD *)&time1.start.CFTypeRef value = v32;
      CMTimeRangeGetEnd(&v41, &time1);
      CMTimeValue v48 = *(v24 - 5);
      CMTimeFlags v34 = *((_DWORD *)v24 - 7);
      CMTimeScale v49 = *((_DWORD *)v24 - 8);
      CMTimeEpoch v35 = *(v24 - 3);
      if ((v41.flags & 0x1F) != 3 && (v34 & 0x1F) != 3) {
        goto LABEL_51;
      }
      memset(&time1, 0, 24);
      CMTime lhs = v41;
      rhs.CFTypeRef value = v48;
      rhs.CMTimeScale timescale = v49;
      rhs.CMTimeFlags flags = v34;
      rhs.CMTimeEpoch epoch = v35;
      CMTimeSubtract(&time, &lhs, &rhs);
      CMTimeAbsoluteValue(&time1.start, &time);
      CMTimeMake(&time2, 1, 1000000000);
      CMTime lhs = time1.start;
      if (CMTimeCompare(&lhs, &time2) > 0)
      {
LABEL_51:
        time1.CMTime start = v41;
        lhs.CFTypeRef value = v48;
        lhs.CMTimeScale timescale = v49;
        lhs.CMTimeFlags flags = v34;
        lhs.CMTimeEpoch epoch = v35;
        if (CMTimeCompare(&time1.start, &lhs)) {
          break;
        }
      }
      CMTimeValue v48 = *(v24 - 2);
      CMTimeFlags v36 = *((_DWORD *)v24 - 1);
      CMTimeScale v49 = *((_DWORD *)v24 - 2);
      CMTimeEpoch v37 = *v24;
      if ((v36 & 0x1F) == 3 || v9 == 3)
      {
        memset(&time1, 0, 24);
        rhs.CMTimeEpoch epoch = v8;
        lhs.CFTypeRef value = v48;
        lhs.CMTimeScale timescale = v49;
        lhs.CMTimeFlags flags = v36;
        lhs.CMTimeEpoch epoch = v37;
        rhs.CFTypeRef value = v17;
        rhs.CMTimeScale timescale = v18;
        rhs.CMTimeFlags flags = v7;
        CMTimeSubtract(&time, &lhs, &rhs);
        CMTimeAbsoluteValue(&time1.start, &time);
        CMTimeMake(&time2, 1, 1000000000);
        CMTime lhs = time1.start;
        if (CMTimeCompare(&lhs, &time2) <= 0) {
          break;
        }
      }
      time1.start.CFTypeRef value = v48;
      time1.start.CMTimeScale timescale = v49;
      time1.start.CMTimeFlags flags = v36;
      time1.start.CMTimeEpoch epoch = v37;
      lhs.CFTypeRef value = v17;
      lhs.CMTimeScale timescale = v18;
      lhs.CMTimeFlags flags = v7;
      lhs.CMTimeEpoch epoch = v8;
      if (CMTimeCompare(&time1.start, &lhs) <= 0) {
        break;
      }
      BOOL v40 = v39 <= ++v25;
      v24 += 12;
    }
    while (v38 != v25);
  }
  else
  {
    return 1;
  }
  return v40;
}

CMTime *FigGetDefaultLowWaterDurationForSpeedRampRenderPipelines@<X0>(CMTime *a1@<X8>)
{
  return CMTimeMake(a1, 1000, 1000);
}

uint64_t FigSpeedRampRenderPipelineCreate(const __CFAllocator *a1, const void *a2, CMTime *a3, const __CFDictionary *a4, void **a5)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  CFTypeRef value = 0;
  refcon = 0;
  memset(&v46, 0, sizeof(v46));
  CMTimeMake(&rhs, 1, 2);
  CMTime lhs = *a3;
  CMTimeAdd(&v46, &lhs, &rhs);
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a5 || !a2) {
    return FigSignalErrorAt();
  }
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  if (*(void *)(v11 + 8)) {
    unsigned int v13 = 3;
  }
  else {
    unsigned int v13 = 0;
  }
  uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v14) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0;
  }
  if (*(void *)(v15 + 80)) {
    v13 |= 4u;
  }
  uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v16) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = 0;
  }
  if (*(void *)(v17 + 88)) {
    v13 |= 8u;
  }
  *(void *)&lhs.CMTimeScale timescale = 0;
  lhs.CFTypeRef value = v13;
  if (sSpeedRampRenderPipelineVTableSetupOnce != -1) {
    dispatch_once_f(&sSpeedRampRenderPipelineVTableSetupOnce, 0, (dispatch_function_t)speedRampRenderPipelineSetupOnce);
  }
  dispatch_sync_f((dispatch_queue_t)sSpeedRampRenderPipelineVTableQueue, &lhs, (dispatch_function_t)speedRamp_RenderPipeline_getVTableWithOptionalMethodsWork);
  FigRenderPipelineGetClassID();
  uint64_t v18 = CMDerivedObjectCreate();
  if (v18)
  {
    uint64_t v12 = v18;
LABEL_55:
    if (refcon) {
      CFRelease(refcon);
    }
    goto LABEL_57;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(unsigned char *)(DerivedStorage + 200) = 0;
  if (a4 && CFDictionaryGetValueIfPresent(a4, @"LoggingID", (const void **)&value)) {
    CFStringGetCString((CFStringRef)value, (char *)(DerivedStorage + 200), 16, 0x600u);
  }
  long long v20 = *(_OWORD *)&a3->value;
  *(void *)(DerivedStorage + 56) = a3->epoch;
  *(_OWORD *)(DerivedStorage + 40) = v20;
  *(CMTime *)(DerivedStorage + 64) = v46;
  *(_DWORD *)(DerivedStorage + 36) = 1;
  CallbacksForUnsortedSampleBuffers = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
  uint64_t v22 = CMBufferQueueCreate(a1, 0, CallbacksForUnsortedSampleBuffers, (CMBufferQueueRef *)(DerivedStorage + 8));
  if (v22) {
    goto LABEL_61;
  }
  CFRetain(a2);
  *(void *)(DerivedStorage + 144) = a2;
  uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(a2);
  uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v24) {
    uint64_t v25 = v24;
  }
  else {
    uint64_t v25 = 0;
  }
  long long v26 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, uint64_t))(v25 + 48);
  if (!v26) {
    goto LABEL_54;
  }
  uint64_t v22 = v26(FigBaseObject, @"SourceSampleBufferQueue", a1, DerivedStorage + 152);
  if (v22) {
    goto LABEL_61;
  }
  uint64_t v27 = FigRenderPipelineGetFigBaseObject(a2);
  uint64_t v28 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v28) {
    uint64_t v29 = v28;
  }
  else {
    uint64_t v29 = 0;
  }
  CMTimeFlags v30 = *(void (**)(uint64_t, __CFString *, void))(v29 + 56);
  if (v30) {
    v30(v27, @"ExpectScaledEdits", *MEMORY[0x1E4F1CFD0]);
  }
  uint64_t v31 = FigSimpleMutexCreate();
  *(void *)(DerivedStorage + 88) = v31;
  if (!v31
    || (uint64_t v32 = FigSimpleMutexCreate(), (*(void *)(DerivedStorage + 184) = v32) == 0)
    || (CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia(),
        CFMutableArrayRef Mutable = CFArrayCreateMutable(AllocatorForMedia, 4, MEMORY[0x1E4F1D510]),
        (*(void *)(DerivedStorage + 136) = Mutable) == 0))
  {
LABEL_60:
    uint64_t v22 = FigSignalErrorAt();
    goto LABEL_61;
  }
  uint64_t v22 = FigActivitySchedulerCreateForNewThread((uint64_t)a1, 3, @"com.apple.coremedia.speedramp", (void *)(DerivedStorage + 24));
  if (v22)
  {
LABEL_61:
    uint64_t v12 = v22;
    goto LABEL_55;
  }
  uint64_t v35 = *(void *)(DerivedStorage + 24);
  CMTimeFlags v36 = refcon;
  uint64_t v37 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v37) {
    uint64_t v38 = v37;
  }
  else {
    uint64_t v38 = 0;
  }
  unint64_t v39 = *(uint64_t (**)(uint64_t, void (*)(uint64_t), void *))(v38 + 8);
  if (!v39)
  {
LABEL_54:
    uint64_t v12 = 4294954514;
    goto LABEL_55;
  }
  uint64_t v22 = v39(v35, speedramp_remapAndTransferSampleBuffersUpToHighWaterLevel, v36);
  if (v22) {
    goto LABEL_61;
  }
  *(unsigned char *)(DerivedStorage + 32) = 1;
  BOOL v40 = *(opaqueCMBufferQueue **)(DerivedStorage + 8);
  CMTime lhs = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  uint64_t v22 = CMBufferQueueInstallTrigger(v40, (CMBufferQueueTriggerCallback)speedramp_dataBecameReady, refcon, 7, &lhs, (CMBufferQueueTriggerToken *)(DerivedStorage + 160));
  if (v22) {
    goto LABEL_61;
  }
  CMTime v41 = *(opaqueCMBufferQueue **)(DerivedStorage + 152);
  CMTime lhs = *a3;
  uint64_t v22 = CMBufferQueueInstallTrigger(v41, (CMBufferQueueTriggerCallback)speedramp_downstreamBufferQueueLowWater, refcon, 2, &lhs, (CMBufferQueueTriggerToken *)(DerivedStorage + 168));
  if (v22) {
    goto LABEL_61;
  }
  if (FigSpeedRampRenderPipelineCreate_sSpeedRampRenderPipelineTimerQueueSetupOnce != -1) {
    dispatch_once_f(&FigSpeedRampRenderPipelineCreate_sSpeedRampRenderPipelineTimerQueueSetupOnce, &FigSpeedRampRenderPipelineCreate_sSpeedRampRenderPipelineTimerQueue, (dispatch_function_t)speedRampRenderPipelineTimerQueueSetupOnce);
  }
  long long v42 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, (dispatch_queue_t)FigSpeedRampRenderPipelineCreate_sSpeedRampRenderPipelineTimerQueue);
  *(void *)(DerivedStorage + 176) = v42;
  if (!v42) {
    goto LABEL_60;
  }
  dispatch_set_context(v42, refcon);
  dispatch_source_set_event_handler_f(*(dispatch_source_t *)(DerivedStorage + 176), (dispatch_function_t)speedramp_wakeUpAndCheckTheTimebase);
  dispatch_resume(*(dispatch_object_t *)(DerivedStorage + 176));
  CMNotificationCenterGetDefaultLocalCenter();
  uint64_t v22 = FigNotificationCenterAddWeakListener();
  if (v22) {
    goto LABEL_61;
  }
  CMNotificationCenterGetDefaultLocalCenter();
  uint64_t v12 = FigNotificationCenterAddWeakListener();
  if (v12) {
    goto LABEL_55;
  }
  *a5 = refcon;
  refcon = 0;
LABEL_57:
  if (dword_1E9351808)
  {
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return v12;
}

void speedramp_remapAndTransferSampleBuffersUpToHighWaterLevel(uint64_t a1)
{
  uint64_t v158 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMSampleBufferRef sampleBufferOut = 0;
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 88));
  uint64_t v2 = MEMORY[0x1E4F1F9F8];
  uint64_t v3 = (long long *)MEMORY[0x1E4F1FA48];
  CMTimeFlags v97 = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 12);
  CMTimeEpoch v109 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  CMTimeFlags v96 = *(_DWORD *)(MEMORY[0x1E4F1FA48] + 12);
  kedouble y = (const __CFString *)*MEMORY[0x1E4F1F2F8];
  CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFStringRef v105 = (const __CFString *)*MEMORY[0x1E4F1F2E8];
  CMTimeEpoch v102 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
  while (1)
  {
    if (*(void *)(DerivedStorage + 96))
    {
      uint64_t v106 = *(void *)(DerivedStorage + 104);
    }
    else
    {
      CMBufferRef v4 = CMBufferQueueDequeueIfDataReadyAndRetain(*(CMBufferQueueRef *)(DerivedStorage + 8));
      *(void *)(DerivedStorage + 96) = v4;
      if (!v4)
      {
        MEMORY[0x19970E930](*(void *)(DerivedStorage + 88));
        CFDictionaryRef v58 = 0;
        goto LABEL_146;
      }
      LODWORD(v106) = 0;
      *(void *)(DerivedStorage + 104) = 0;
    }
    CMTimeValue v5 = *(void *)v2;
    CMTimeValue v150 = *(void *)v2;
    CMTimeScale v6 = *(_DWORD *)(v2 + 8);
    CMTimeScale v151 = v6;
    uint64_t v7 = CMBaseObjectGetDerivedStorage();
    uint64_t v8 = v7;
    int v9 = *(_DWORD *)(v7 + 36);
    if (v9 == 1) {
      break;
    }
    if (v9 || !CMBufferQueueTestTrigger(*(CMBufferQueueRef *)(v7 + 152), *(CMBufferQueueTriggerToken *)(v7 + 168)))
    {
      CMTimeFlags v92 = v97;
      goto LABEL_138;
    }
    memset(time, 0, 24);
    CMBufferQueueGetDuration(&rhs, *(CMBufferQueueRef *)(v8 + 152));
    CMTime lhs = *(CMTime *)(v8 + 64);
    CMTimeSubtract(&time[0].start, &lhs, &rhs);
    CMTime start = time[0].start;
LABEL_25:
    CFTypeRef v15 = CMGetAttachment(*(CMAttachmentBearerRef *)(DerivedStorage + 96), key, 0);
    if (v15)
    {
      uint64_t v16 = v15;
      if (CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 136)) >= 2
        && v16 == CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 136), 0))
      {
        CFDictionaryRef ValueAtIndex = (OpaqueCMTimebase *)CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 136), 1);
        speedramp_setTimebase(a1, ValueAtIndex);
        CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(DerivedStorage + 136), 0);
        CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(DerivedStorage + 136), 0);
      }
    }
    CMItemCount NumSamples = CMSampleBufferGetNumSamples(*(CMSampleBufferRef *)(DerivedStorage + 96));
    CMTimeValue v19 = *(void *)(DerivedStorage + 104);
    CFIndex v20 = NumSamples - v19;
    if (NumSamples - v19 < 2) {
      goto LABEL_84;
    }
    v149.CMTimeValue value = v5;
    v149.CMTimeScale timescale = v6;
    CMTimeValue v21 = *(opaqueCMSampleBuffer **)(DerivedStorage + 96);
    time1.CMTimeValue value = 0;
    *(_OWORD *)&time[0].start.CMTimeValue value = *(_OWORD *)v2;
    time[0].start.CMTimeEpoch epoch = v109;
    if (v19 < 0)
    {
      unint64_t v23 = 0;
      CMTimeEpoch epoch = v109;
      CMTimeFlags flags = v97;
    }
    else
    {
      CMTimeFlags flags = v97;
      if (CMSampleBufferGetNumSamples(v21) <= v19)
      {
        unint64_t v23 = 0;
        CMTimeEpoch epoch = v109;
      }
      else
      {
        if (CMSampleBufferGetOutputSampleTimingInfoArray(v21, 0, 0, &time1.value))
        {
          unint64_t v23 = 0;
LABEL_153:
          int v95 = v23;
          goto LABEL_156;
        }
        if (time1.value < 1)
        {
          unint64_t v23 = 0;
LABEL_132:
          int v90 = FigSignalErrorAt();
          free(v23);
          CMTimeEpoch epoch = v109;
          if (v90) {
            goto LABEL_141;
          }
          goto LABEL_42;
        }
        unint64_t v23 = (CMSampleTimingInfo *)malloc_type_malloc(72 * time1.value, 0x1000040FF89C88EuLL);
        if (!v23) {
          goto LABEL_132;
        }
        if (CMSampleBufferGetOutputSampleTimingInfoArray(v21, time1.value, v23, 0)) {
          goto LABEL_153;
        }
        if (time1.value == 1)
        {
          long long v24 = *(_OWORD *)&v23->duration.value;
          lhs.CMTimeEpoch epoch = v23->duration.epoch;
          *(_OWORD *)&lhs.CMTimeValue value = v24;
          CMTimeMultiply(&rhs, &lhs, v19);
          CMTime lhs = v23->presentationTimeStamp;
          CMTimeAdd(&time[0].start, &lhs, &rhs);
        }
        else
        {
          if (time1.value <= v19) {
            goto LABEL_132;
          }
          uint64_t v25 = &v23[v19];
          long long v26 = *(_OWORD *)&v25->presentationTimeStamp.value;
          time[0].start.CMTimeEpoch epoch = v25->presentationTimeStamp.epoch;
          *(_OWORD *)&time[0].start.CMTimeValue value = v26;
        }
        v149.CMTimeValue value = time[0].start.value;
        CMTimeFlags flags = time[0].start.flags;
        v149.CMTimeScale timescale = time[0].start.timescale;
        CMTimeEpoch epoch = time[0].start.epoch;
      }
    }
    free(v23);
LABEL_42:
    memset(&v121, 0, sizeof(v121));
    CFDataRef v28 = *(const __CFData **)(DerivedStorage + 192);
    v152.CMTimeValue value = v149.value;
    v152.CMTimeScale timescale = v149.timescale;
    if (!v28 || (flags & 0x1D) != 1)
    {
      CMTime v121 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA10];
      goto LABEL_60;
    }
    CFIndex v98 = v20;
    CMItemCount v100 = NumSamples;
    uint64_t BytePtr = CFDataGetBytePtr(v28);
    unint64_t Length = CFDataGetLength(v28);
    if (Length < 0x60)
    {
LABEL_57:
      CMTime v121 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA10];
      goto LABEL_58;
    }
    unint64_t v30 = 0;
    unint64_t v108 = Length / 0x60;
    unint64_t v31 = Length / 0x60 - 1;
    int v32 = flags & 0x1F;
    unint64_t v33 = v31;
    while (1)
    {
      unint64_t v34 = v31 >> 1;
      uint64_t v35 = &BytePtr[96 * (v31 >> 1)];
      v155.CMTimeValue value = *(void *)v35;
      v155.CMTimeScale timescale = *((_DWORD *)v35 + 2);
      CMTimeFlags v36 = *((_DWORD *)v35 + 3);
      CMTimeEpoch v37 = *((void *)v35 + 2);
      if (v32 != 3 && (*((_DWORD *)v35 + 3) & 0x1F) != 3) {
        goto LABEL_159;
      }
      memset(time, 0, 24);
      lhs.CMTimeValue value = v152.value;
      lhs.CMTimeScale timescale = v152.timescale;
      lhs.CMTimeFlags flags = flags;
      lhs.CMTimeEpoch epoch = epoch;
      time1.CMTimeValue value = v155.value;
      time1.CMTimeScale timescale = v155.timescale;
      time1.CMTimeFlags flags = v36;
      time1.CMTimeEpoch epoch = v37;
      CMTimeSubtract(&rhs, &lhs, &time1);
      CMTimeAbsoluteValue(&time[0].start, &rhs);
      CMTimeMake(&time2, 1, 1000000000);
      CMTime lhs = time[0].start;
      if (CMTimeCompare(&lhs, &time2) > 0)
      {
LABEL_159:
        time[0].start.CMTimeValue value = v152.value;
        time[0].start.CMTimeScale timescale = v152.timescale;
        time[0].start.CMTimeFlags flags = flags;
        time[0].start.CMTimeEpoch epoch = epoch;
        lhs.CMTimeValue value = v155.value;
        lhs.CMTimeScale timescale = v155.timescale;
        lhs.CMTimeFlags flags = v36;
        lhs.CMTimeEpoch epoch = v37;
        if (CMTimeCompare(&time[0].start, &lhs) < 0)
        {
          unint64_t v33 = v34 - 1;
          goto LABEL_56;
        }
      }
      long long v38 = *(_OWORD *)v35;
      long long v39 = *((_OWORD *)v35 + 2);
      *(_OWORD *)&time[0].start.CMTimeEpoch epoch = *((_OWORD *)v35 + 1);
      *(_OWORD *)&time[0].duration.CMTimeScale timescale = v39;
      *(_OWORD *)&time[0].start.CMTimeValue value = v38;
      CMTimeRangeGetEnd(&v122, time);
      if (v32 != 3 && (v122.flags & 0x1F) != 3) {
        goto LABEL_160;
      }
      memset(time, 0, 24);
      lhs.CMTimeValue value = v152.value;
      lhs.CMTimeScale timescale = v152.timescale;
      lhs.CMTimeFlags flags = flags;
      lhs.CMTimeEpoch epoch = epoch;
      CMTime time1 = v122;
      CMTimeSubtract(&rhs, &lhs, &time1);
      CMTimeAbsoluteValue(&time[0].start, &rhs);
      CMTimeMake(&time2, 1, 1000000000);
      CMTime lhs = time[0].start;
      if (CMTimeCompare(&lhs, &time2) > 0)
      {
LABEL_160:
        time[0].start.CMTimeValue value = v152.value;
        time[0].start.CMTimeScale timescale = v152.timescale;
        time[0].start.CMTimeFlags flags = flags;
        time[0].start.CMTimeEpoch epoch = epoch;
        CMTime lhs = v122;
        if (CMTimeCompare(&time[0].start, &lhs) < 0) {
          break;
        }
      }
      unint64_t v30 = v34 + 1;
LABEL_56:
      unint64_t v31 = v33 + v30;
      if (v30 >= v108) {
        goto LABEL_57;
      }
    }
    long long v88 = *(_OWORD *)v35;
    long long v89 = *((_OWORD *)v35 + 2);
    *(_OWORD *)&time[0].start.CMTimeEpoch epoch = *((_OWORD *)v35 + 1);
    *(_OWORD *)&time[0].duration.CMTimeScale timescale = v89;
    *(_OWORD *)&time[0].start.CMTimeValue value = v88;
    CMTimeRangeGetEnd(&v121, time);
LABEL_58:
    CFIndex v20 = v98;
    CMItemCount NumSamples = v100;
LABEL_60:
    memset(&v122, 0, sizeof(v122));
    time[0].start.CMTimeValue value = v149.value;
    time[0].start.CMTimeScale timescale = v149.timescale;
    time[0].start.CMTimeFlags flags = flags;
    time[0].start.CMTimeEpoch epoch = epoch;
    CMTime rhs = start;
    CMTimeAdd(&v122, &time[0].start, &rhs);
    memset(&v155, 0, sizeof(v155));
    time[0].CMTime start = v121;
    CMTime rhs = v122;
    CMTimeMinimum(&v155, &time[0].start, &rhs);
    BOOL v40 = *(opaqueCMSampleBuffer **)(DerivedStorage + 96);
    CMTimeValue value = v155.value;
    CMTimeFlags v41 = v155.flags;
    CMTimeScale timescale = v155.timescale;
    CMTimeEpoch v42 = v155.epoch;
    CMItemCount timingArrayEntriesNeededOut = 0;
    CMItemCount v43 = CMSampleBufferGetNumSamples(v40);
    if (CMSampleBufferGetOutputSampleTimingInfoArray(v40, 0, 0, &timingArrayEntriesNeededOut))
    {
      uint64_t v44 = 0;
LABEL_155:
      int v95 = v44;
LABEL_156:
      free(v95);
LABEL_141:
      CFDictionaryRef v58 = 0;
      int v52 = 0;
      goto LABEL_144;
    }
    if (timingArrayEntriesNeededOut < 1)
    {
      uint64_t v44 = 0;
LABEL_134:
      int v91 = FigSignalErrorAt();
      free(v44);
      uint64_t v46 = 0;
      uint64_t v2 = MEMORY[0x1E4F1F9F8];
      if (!v91) {
        goto LABEL_80;
      }
      goto LABEL_141;
    }
    uint64_t v44 = (CMSampleTimingInfo *)malloc_type_malloc(72 * timingArrayEntriesNeededOut, 0x1000040FF89C88EuLL);
    if (!v44) {
      goto LABEL_134;
    }
    if (CMSampleBufferGetOutputSampleTimingInfoArray(v40, timingArrayEntriesNeededOut, v44, 0)) {
      goto LABEL_155;
    }
    if (timingArrayEntriesNeededOut == 1)
    {
      memset(time, 0, 24);
      rhs.CMTimeValue value = value;
      rhs.CMTimeScale timescale = timescale;
      rhs.CMTimeFlags flags = v41;
      rhs.CMTimeEpoch epoch = v42;
      CMTime lhs = v44->presentationTimeStamp;
      CMTimeSubtract(&time[0].start, &rhs, &lhs);
      CMTime rhs = time[0].start;
      uint64_t v45 = vcvtmd_s64_f64(CMTimeGetSeconds(&rhs) * (double)v44->duration.timescale / (double)v44->duration.value + 1.0);
      if (v43 < v45) {
        uint64_t v45 = v43;
      }
      uint64_t v46 = v45 & ~(v45 >> 63);
      goto LABEL_79;
    }
    if (timingArrayEntriesNeededOut < 1) {
      goto LABEL_134;
    }
    if (v43 < 1)
    {
      uint64_t v46 = 0;
    }
    else
    {
      CFIndex v99 = v20;
      CMItemCount v101 = NumSamples;
      uint64_t v46 = 0;
      p_CMTimeEpoch epoch = &v44->presentationTimeStamp.epoch;
      while (1)
      {
        v152.CMTimeValue value = *(p_epoch - 2);
        v152.CMTimeScale timescale = *((_DWORD *)p_epoch - 2);
        CMTimeFlags v48 = *((_DWORD *)p_epoch - 1);
        CMTimeEpoch v49 = *p_epoch;
        if ((v41 & 0x1F) != 3 && (*((_DWORD *)p_epoch - 1) & 0x1F) != 3) {
          goto LABEL_161;
        }
        memset(time, 0, 24);
        lhs.CMTimeValue value = value;
        lhs.CMTimeScale timescale = timescale;
        lhs.CMTimeFlags flags = v41;
        lhs.CMTimeEpoch epoch = v42;
        time1.CMTimeValue value = v152.value;
        time1.CMTimeScale timescale = v152.timescale;
        time1.CMTimeFlags flags = v48;
        time1.CMTimeEpoch epoch = v49;
        CMTimeSubtract(&rhs, &lhs, &time1);
        CMTimeAbsoluteValue(&time[0].start, &rhs);
        CMTimeMake(&time2, 1, 1000000000);
        CMTime lhs = time[0].start;
        if (CMTimeCompare(&lhs, &time2) > 0)
        {
LABEL_161:
          time[0].start.CMTimeValue value = value;
          time[0].start.CMTimeScale timescale = timescale;
          time[0].start.CMTimeFlags flags = v41;
          time[0].start.CMTimeEpoch epoch = v42;
          lhs.CMTimeValue value = v152.value;
          lhs.CMTimeScale timescale = v152.timescale;
          lhs.CMTimeFlags flags = v48;
          lhs.CMTimeEpoch epoch = v49;
          if (CMTimeCompare(&time[0].start, &lhs) < 0) {
            break;
          }
        }
        p_epoch += 9;
        if (v43 == ++v46)
        {
          uint64_t v46 = v43;
          break;
        }
      }
      CFIndex v20 = v99;
      CMItemCount NumSamples = v101;
    }
LABEL_79:
    free(v44);
    uint64_t v2 = MEMORY[0x1E4F1F9F8];
LABEL_80:
    uint64_t v50 = v46 - *(void *)(DerivedStorage + 104);
    if (v50 <= 1) {
      uint64_t v50 = 1;
    }
    if (v20 >= v50) {
      CFIndex v20 = v50;
    }
LABEL_84:
    int v51 = *(const void **)(DerivedStorage + 96);
    if (v51) {
      int v52 = (void *)CFRetain(v51);
    }
    else {
      int v52 = 0;
    }
    uint64_t v3 = (long long *)MEMORY[0x1E4F1FA48];
    if (NumSamples < 1)
    {
      CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
      CFDictionaryRef v58 = CMCopyDictionaryOfAttachments(AllocatorForMedia, v52, 0);
      OSStatus v59 = CMSampleBufferCreateCopy(allocator, (CMSampleBufferRef)v52, &sampleBufferOut);
      double v60 = *(const void **)(DerivedStorage + 96);
      if (v60)
      {
        CFRelease(v60);
        *(void *)(DerivedStorage + 96) = 0;
      }
      if (!v59)
      {
        int v55 = NumSamples;
        if (v58)
        {
          CMSetAttachments(sampleBufferOut, v58, 0);
          CFRelease(v58);
        }
        goto LABEL_98;
      }
      goto LABEL_144;
    }
    v159.location = *(void *)(DerivedStorage + 104);
    v159.length = v20;
    OSStatus v53 = CMSampleBufferCopySampleBufferForRange(allocator, *(CMSampleBufferRef *)(DerivedStorage + 96), v159, &sampleBufferOut);
    CMItemCount v54 = *(void *)(DerivedStorage + 104) + v20;
    *(void *)(DerivedStorage + 104) = v54;
    int v55 = NumSamples;
    if (v54 >= NumSamples)
    {
      double v56 = *(const void **)(DerivedStorage + 96);
      if (v56)
      {
        CFRelease(v56);
        *(void *)(DerivedStorage + 96) = 0;
      }
    }
    if (v53)
    {
LABEL_151:
      CFDictionaryRef v58 = 0;
      goto LABEL_144;
    }
LABEL_98:
    memset(&v149, 0, sizeof(v149));
    CMSampleBufferGetOutputPresentationTimeStamp(&v149, sampleBufferOut);
    double v61 = sampleBufferOut;
    CFDataRef v62 = *(const __CFData **)(DerivedStorage + 192);
    if (v62)
    {
      CFDataGetBytePtr(*(CFDataRef *)(DerivedStorage + 192));
      CFDataGetLength(v62);
      *(_OWORD *)&v122.CMTimeValue value = *(_OWORD *)v2;
      v122.CMTimeEpoch epoch = v109;
      *(_OWORD *)&v121.CMTimeValue value = *(_OWORD *)&v122.value;
      v121.CMTimeEpoch epoch = v109;
      double valuePtr = 1.0;
      CMSampleBufferGetOutputPresentationTimeStamp(&v122, v61);
      CMSampleBufferGetOutputDuration(&time[0].start, v61);
      CMTimeScale v63 = time[0].start.timescale;
      CMTimeFlags v64 = time[0].start.flags;
      CMTimeScale timescale = time[0].start.timescale;
      CMTimeValue v65 = time[0].start.value;
      CMTimeValue value = time[0].start.value;
      CMTimeEpoch v66 = time[0].start.epoch;
      time[0].CMTime start = v122;
      rhs.CMTimeValue value = v65;
      rhs.CMTimeScale timescale = v63;
      rhs.CMTimeFlags flags = v64;
      rhs.CMTimeEpoch epoch = v66;
      CMTimeAdd(&v121, &time[0].start, &rhs);
      CMTime v155 = v122;
      time[0].CMTime start = v122;
      CMSpeedRampMapTimeFromSourceToTarget();
      CMTime v152 = v121;
      time[0].CMTime start = v121;
      CMSpeedRampMapTimeFromSourceToTarget();
      CMTime rhs = v152;
      CMTime lhs = v155;
      CMTimeSubtract(&time[0].start, &rhs, &lhs);
      CMTimeFlags v67 = time[0].start.flags;
      CMTimeScale v154 = time[0].start.timescale;
      CMItemCount timingArrayEntriesNeededOut = time[0].start.value;
      CMTimeEpoch v68 = time[0].start.epoch;
      *(_OWORD *)&rhs.CMTimeValue value = *v3;
      rhs.CMTimeEpoch epoch = v102;
      if (CMTimeCompare(&time[0].start, &rhs))
      {
        if ((v67 & 0x1F) != 3 && (v64 & 0x1F) != 3) {
          goto LABEL_103;
        }
        memset(time, 0, 24);
        lhs.CMTimeValue value = timingArrayEntriesNeededOut;
        lhs.CMTimeScale timescale = v154;
        lhs.CMTimeFlags flags = v67;
        lhs.CMTimeEpoch epoch = v68;
        time1.CMTimeValue value = value;
        time1.CMTimeScale timescale = timescale;
        time1.CMTimeFlags flags = v64;
        time1.CMTimeEpoch epoch = v66;
        CMTimeSubtract(&rhs, &lhs, &time1);
        CMTimeAbsoluteValue(&time[0].start, &rhs);
        CMTimeMake(&time2, 1, 1000000000);
        CMTime lhs = time[0].start;
        if (CMTimeCompare(&lhs, &time2) > 0)
        {
LABEL_103:
          time[0].start.CMTimeValue value = timingArrayEntriesNeededOut;
          time[0].start.CMTimeScale timescale = v154;
          time[0].start.CMTimeFlags flags = v67;
          time[0].start.CMTimeEpoch epoch = v68;
          lhs.CMTimeValue value = value;
          lhs.CMTimeScale timescale = timescale;
          lhs.CMTimeFlags flags = v64;
          lhs.CMTimeEpoch epoch = v66;
          if (CMTimeCompare(&time[0].start, &lhs))
          {
            time[0].start.CMTimeValue value = timingArrayEntriesNeededOut;
            time[0].start.CMTimeScale timescale = v154;
            time[0].start.CMTimeFlags flags = v67;
            time[0].start.CMTimeEpoch epoch = v68;
            double Seconds = CMTimeGetSeconds(&time[0].start);
            time[0].start.CMTimeValue value = value;
            time[0].start.CMTimeScale timescale = timescale;
            time[0].start.CMTimeFlags flags = v64;
            time[0].start.CMTimeEpoch epoch = v66;
            double v70 = CMTimeGetSeconds(&time[0].start);
            CFNumberRef v71 = (const __CFNumber *)CMGetAttachment(v61, v105, 0);
            if (v71)
            {
              CFNumberRef v72 = v71;
              CFTypeID v73 = CFGetTypeID(v71);
              if (v73 == CFNumberGetTypeID()) {
                CFNumberGetValue(v72, kCFNumberDoubleType, &valuePtr);
              }
            }
            double valuePtr = valuePtr / (Seconds / v70);
            CFNumberRef v74 = CFNumberCreate(allocator, kCFNumberDoubleType, &valuePtr);
            if (v74)
            {
              CFNumberRef v75 = v74;
              CMSetAttachment(v61, v105, v74, 1u);
              CFRelease(v75);
            }
          }
        }
      }
      time[0].CMTime start = v155;
      CMSampleBufferSetOutputPresentationTimeStamp(v61, &time[0].start);
      double v61 = sampleBufferOut;
      uint64_t v2 = MEMORY[0x1E4F1F9F8];
    }
    if (CMGetAttachment(v61, v105, 0))
    {
      FigCFNumberGetFloat64();
      double v77 = v76;
    }
    else
    {
      double v77 = 1.0;
    }
    if (dword_1E9351808)
    {
      LODWORD(lhs.value) = 0;
      LOBYTE(time1.value) = 0;
      os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v79 = lhs.value;
      if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, time1.value)) {
        unsigned int v80 = v79;
      }
      else {
        unsigned int v80 = v79 & 0xFFFFFFFE;
      }
      if (v80)
      {
        uint64_t v81 = *(void *)(DerivedStorage + 104);
        time[0].CMTime start = v149;
        Float64 v82 = CMTimeGetSeconds(&time[0].start);
        CMSampleBufferRef v83 = sampleBufferOut;
        CMSampleBufferGetOutputPresentationTimeStamp(&v117, sampleBufferOut);
        Float64 v84 = CMTimeGetSeconds(&v117);
        CMSampleBufferGetOutputPresentationTimeStamp(&v116, sampleBufferOut);
        double v85 = CMTimeGetSeconds(&v116);
        CMTimebaseGetTime(&v115, *(CMTimebaseRef *)(DerivedStorage + 16));
        double v86 = v85 - CMTimeGetSeconds(&v115);
        CMTimebaseGetTime(&v114, *(CMTimebaseRef *)(DerivedStorage + 16));
        Float64 v87 = CMTimeGetSeconds(&v114);
        LODWORD(rhs.value) = 136318210;
        *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"speedramp_remapAndTransferSampleBuffersUpToHighWaterLevel";
        LOWORD(rhs.flags) = 2082;
        *(void *)((char *)&rhs.flags + 2) = DerivedStorage + 200;
        HIWORD(rhs.epoch) = 2048;
        uint64_t v127 = a1;
        __int16 v128 = 2048;
        uint64_t v129 = v52;
        __int16 v130 = 1024;
        int v131 = v106;
        __int16 v132 = 1024;
        int v133 = v81;
        __int16 v134 = 1024;
        int v135 = v55;
        __int16 v136 = 2048;
        Float64 v137 = v82;
        __int16 v138 = 2048;
        CMSampleBufferRef v139 = v83;
        __int16 v140 = 2048;
        Float64 v141 = v84;
        __int16 v142 = 2048;
        double v143 = v77;
        __int16 v144 = 2048;
        double v145 = v86;
        __int16 v146 = 2048;
        Float64 v147 = v87;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      uint64_t v3 = (long long *)MEMORY[0x1E4F1FA48];
    }
    if (CMBufferQueueEnqueue(*(CMBufferQueueRef *)(DerivedStorage + 152), sampleBufferOut)) {
      goto LABEL_151;
    }
    CMSampleBufferGetOutputPresentationTimeStamp(&v113, sampleBufferOut);
    CMSampleBufferGetOutputDuration(&v112, sampleBufferOut);
    CMTimeAdd(&time[0].start, &v113, &v112);
    *(_OWORD *)(DerivedStorage + 112) = *(_OWORD *)&time[0].start.value;
    *(void *)(DerivedStorage + 128) = time[0].start.epoch;
    if (sampleBufferOut)
    {
      CFRelease(sampleBufferOut);
      CMSampleBufferRef sampleBufferOut = 0;
    }
    if (v52) {
      CFRelease(v52);
    }
  }
  *(_OWORD *)&time[0].start.CMTimeValue value = *(_OWORD *)v2;
  time[0].start.CMTimeEpoch epoch = v109;
  *(_OWORD *)&lhs.CMTimeValue value = *(_OWORD *)&time[0].start.value;
  lhs.CMTimeEpoch epoch = v109;
  uint64_t v10 = *(opaqueCMSampleBuffer **)(v7 + 96);
  if (v10)
  {
    if (CMSampleBufferGetNumSamples(v10))
    {
      CMSampleBufferGetOutputDuration(&time1, *(CMSampleBufferRef *)(v8 + 96));
      long long v110 = *v3;
      *(_OWORD *)&time2.CMTimeValue value = *v3;
      time2.CMTimeEpoch epoch = v102;
      if (CMTimeCompare(&time1, &time2) >= 1)
      {
        memset(&time2, 0, sizeof(time2));
        CMTimebaseGetTime(&time2, *(CMTimebaseRef *)(v8 + 16));
        v149.CMTimeValue value = *(void *)v3;
        v149.CMTimeScale timescale = *((_DWORD *)v3 + 2);
        uint64_t v11 = (_OWORD *)(v8 + 112);
        CMTimeFlags v12 = v96;
        CMTimeEpoch v13 = v102;
        if ((*(_DWORD *)(v8 + 124) & 0x1D) == 1)
        {
          *(_OWORD *)&v121.CMTimeValue value = *v11;
          v121.CMTimeEpoch epoch = *(void *)(v8 + 128);
          CMTime v155 = time2;
          CMTimeSubtract(&v122, &v121, &v155);
          v149.CMTimeValue value = v122.value;
          CMTimeFlags v12 = v122.flags;
          v149.CMTimeScale timescale = v122.timescale;
          CMTimeEpoch v13 = v122.epoch;
        }
        v122.CMTimeValue value = v149.value;
        v122.CMTimeScale timescale = v149.timescale;
        v122.CMTimeFlags flags = v12;
        v122.CMTimeEpoch epoch = v13;
        CMTime v121 = *(CMTime *)(v8 + 64);
        if (CMTimeCompare(&v122, &v121) > 0)
        {
          *(_OWORD *)&v122.CMTimeValue value = *v11;
          v122.CMTimeEpoch epoch = *(void *)(v8 + 128);
          CMTime v121 = *(CMTime *)(v8 + 40);
          CMTimeSubtract(&lhs, &v122, &v121);
          int v14 = 0;
          uint64_t v2 = MEMORY[0x1E4F1F9F8];
          goto LABEL_24;
        }
        if (v12)
        {
          v152.CMTimeValue value = v149.value;
          v152.CMTimeScale timescale = v149.timescale;
          v152.CMTimeFlags flags = v12;
          v152.CMTimeEpoch epoch = v13;
        }
        else
        {
          *(_OWORD *)&v152.CMTimeValue value = v110;
          v152.CMTimeEpoch epoch = v102;
        }
        uint64_t v2 = MEMORY[0x1E4F1F9F8];
        CMTime v122 = *(CMTime *)(v8 + 64);
        CMTimeSubtract(&time[0].start, &v122, &v152);
      }
    }
    else
    {
      *(_OWORD *)&time[0].start.CMTimeValue value = *MEMORY[0x1E4F1FA10];
      time[0].start.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1FA10] + 16);
    }
    int v14 = 1;
  }
  else
  {
    int v14 = 0;
  }
LABEL_24:
  CMTime start = time[0].start;
  CMTimeValue v150 = lhs.value;
  CMTimeScale v151 = lhs.timescale;
  if (v14) {
    goto LABEL_25;
  }
  CMTimeFlags v92 = lhs.flags;
  CMTimeEpoch v109 = lhs.epoch;
LABEL_138:
  CFDictionaryRef v58 = 0;
  if (*(_DWORD *)(DerivedStorage + 36) == 1)
  {
    int v52 = 0;
    if ((v92 & 0x1D) != 1) {
      goto LABEL_144;
    }
    CFDictionaryRef v93 = *(OpaqueCMTimebase **)(DerivedStorage + 16);
    BOOL v94 = *(NSObject **)(DerivedStorage + 176);
    time[0].start.CMTimeValue value = v150;
    time[0].start.CMTimeScale timescale = v151;
    time[0].start.CMTimeFlags flags = v92;
    time[0].start.CMTimeEpoch epoch = v109;
    CMTimebaseSetTimerDispatchSourceNextFireTime(v93, v94, &time[0].start, 0);
    goto LABEL_141;
  }
  int v52 = 0;
LABEL_144:
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 88));
  if (v52) {
    CFRelease(v52);
  }
LABEL_146:
  if (sampleBufferOut) {
    CFRelease(sampleBufferOut);
  }
  if (v58) {
    CFRelease(v58);
  }
}

uint64_t speedramp_dataBecameReady()
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)result)
  {
    uint64_t v1 = *(void *)(result + 24);
    uint64_t VTable = CMBaseObjectGetVTable();
    uint64_t v4 = *(void *)(VTable + 16);
    uint64_t result = VTable + 16;
    uint64_t v3 = v4;
    uint64_t v5 = v4 ? v3 : 0;
    CMTimeScale v6 = *(uint64_t (**)(uint64_t))(v5 + 16);
    if (v6)
    {
      return v6(v1);
    }
  }
  return result;
}

uint64_t speedramp_downstreamBufferQueueLowWater()
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)result)
  {
    uint64_t v1 = *(void *)(result + 24);
    uint64_t VTable = CMBaseObjectGetVTable();
    uint64_t v4 = *(void *)(VTable + 16);
    uint64_t result = VTable + 16;
    uint64_t v3 = v4;
    uint64_t v5 = v4 ? v3 : 0;
    CMTimeScale v6 = *(uint64_t (**)(uint64_t))(v5 + 16);
    if (v6)
    {
      return v6(v1);
    }
  }
  return result;
}

uint64_t speedRampRenderPipelineTimerQueueSetupOnce(uint64_t *a1)
{
  uint64_t result = FigDispatchQueueCreateWithPriority();
  *a1 = result;
  return result;
}

uint64_t speedramp_wakeUpAndCheckTheTimebase()
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)result)
  {
    uint64_t v1 = *(void *)(result + 24);
    uint64_t VTable = CMBaseObjectGetVTable();
    uint64_t v4 = *(void *)(VTable + 16);
    uint64_t result = VTable + 16;
    uint64_t v3 = v4;
    uint64_t v5 = v4 ? v3 : 0;
    CMTimeScale v6 = *(uint64_t (**)(uint64_t))(v5 + 16);
    if (v6)
    {
      return v6(v1);
    }
  }
  return result;
}

uint64_t speedramp_reflectNotificationFromDownstreamRenderPipeline()
{
  CMBaseObjectGetDerivedStorage();
  CMNotificationCenterGetDefaultLocalCenter();

  return CMNotificationCenterPostNotification();
}

uint64_t speedramp_reflectNotificationFromUpstreamBufferQueue()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (FigCFEqual())
  {
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 88));
    uint64_t v1 = *(const void **)(DerivedStorage + 96);
    if (v1)
    {
      CFRelease(v1);
      *(void *)(DerivedStorage + 96) = 0;
    }
    uint64_t v2 = MEMORY[0x1E4F1F9F8];
    *(_OWORD *)(DerivedStorage + 112) = *MEMORY[0x1E4F1F9F8];
    *(void *)(DerivedStorage + 128) = *(void *)(v2 + 16);
    CFArrayRemoveAllValues(*(CFMutableArrayRef *)(DerivedStorage + 136));
    MEMORY[0x19970E930](*(void *)(DerivedStorage + 88));
    uint64_t v3 = *(void *)(DerivedStorage + 24);
    uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v4) {
      uint64_t v5 = v4;
    }
    else {
      uint64_t v5 = 0;
    }
    CMTimeScale v6 = *(void (**)(uint64_t))(v5 + 16);
    if (v6) {
      v6(v3);
    }
  }
  CMNotificationCenterGetDefaultLocalCenter();

  return CMNotificationCenterPostNotification();
}

CFMutableDictionaryRef speedRampRenderPipelineSetupOnce()
{
  sSpeedRampRenderPipelineVTableQueue = (uint64_t)dispatch_queue_create("com.apple.coremedia.speedramprenderpipeline.vtables", 0);
  CFMutableDictionaryRef result = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, 0);
  sSpeedRampRenderPipelineVTableDictionardouble y = (uint64_t)result;
  return result;
}

void speedRamp_RenderPipeline_getVTableWithOptionalMethodsWork(int *a1)
{
  uint64_t v2 = (const void *)*a1;
  int Value = CFDictionaryGetValue((CFDictionaryRef)sSpeedRampRenderPipelineVTableDictionary, v2);
  if (Value) {
    goto LABEL_15;
  }
  int Value = malloc_type_malloc(0x18uLL, 0x6004045F868BCuLL);
  uint64_t v4 = malloc_type_malloc(0x68uLL, 0x10C004042DEC5BDuLL);
  __copy_assignment_8_8_t0w8_pa0_57874_8_pa0_34440_16_pa0_612_24_pa0_26992_32_pa0_12599_40_pa0_51310_48_pa0_29770_56_pa0_24547_64_pa0_53210_72_pa0_23665_80_pa0_52496_88_pa0_23813_96(v4, kFigSpeedRampRenderPipeline_FigRenderPipelineClass);
  if (v2)
  {
    if ((v2 & 2) != 0) {
      goto LABEL_4;
    }
  }
  else
  {
    v4[1] = 0;
    if ((v2 & 2) != 0)
    {
LABEL_4:
      if ((v2 & 4) != 0) {
        goto LABEL_5;
      }
LABEL_11:
      v4[10] = 0;
      if ((v2 & 8) != 0) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
  }
  void v4[2] = 0;
  if ((v2 & 4) == 0) {
    goto LABEL_11;
  }
LABEL_5:
  if ((v2 & 8) == 0) {
LABEL_6:
  }
    v4[11] = 0;
LABEL_7:
  void *Value = 0;
  Value[1] = &kFigSpeedRampRenderPipeline_BaseClass;
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  Value[2] = v5;
  CFDictionarySetValue((CFMutableDictionaryRef)sSpeedRampRenderPipelineVTableDictionary, v2, Value);
LABEL_15:
  *((void *)a1 + 1) = Value;
}

void *__copy_assignment_8_8_t0w8_pa0_57874_8_pa0_34440_16_pa0_612_24_pa0_26992_32_pa0_12599_40_pa0_51310_48_pa0_29770_56_pa0_24547_64_pa0_53210_72_pa0_23665_80_pa0_52496_88_pa0_23813_96(void *result, void *a2)
{
  *CFMutableDictionaryRef result = *a2;
  result[1] = a2[1];
  result[2] = a2[2];
  result[3] = a2[3];
  result[4] = a2[4];
  result[5] = a2[5];
  result[6] = a2[6];
  result[7] = a2[7];
  result[8] = a2[8];
  result[9] = a2[9];
  result[10] = a2[10];
  result[11] = a2[11];
  result[12] = a2[12];
  return result;
}

uint64_t figSpeedRampRenderPipelineSetRateAndAnchorTime(float a1, float a2, uint64_t a3, long long *a4, long long *a5)
{
  uint64_t v9 = *(void *)(CMBaseObjectGetDerivedStorage() + 144);
  long long v16 = *a4;
  uint64_t v17 = *((void *)a4 + 2);
  long long v14 = *a5;
  uint64_t v15 = *((void *)a5 + 2);
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  CMTimeFlags v12 = *(uint64_t (**)(uint64_t, long long *, long long *, float, float))(v11 + 8);
  if (!v12) {
    return 4294954514;
  }
  long long v20 = v16;
  uint64_t v21 = v17;
  long long v18 = v14;
  uint64_t v19 = v15;
  return v12(v9, &v20, &v18, a1, a2);
}

uint64_t figSpeedRampRenderPipelineStartAndUseTimebaseAtTransition(uint64_t a1, const void *a2, long long *a3, const void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 88));
  CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 136), a4);
  CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 136), a2);
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 88));
  uint64_t v12 = *(void *)(DerivedStorage + 144);
  long long v21 = *a3;
  uint64_t v22 = *((void *)a3 + 2);
  uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v13) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t v15 = *(uint64_t (**)(uint64_t, const void *, long long *, const void *, uint64_t, uint64_t))(v14 + 16);
  if (!v15) {
    return 4294954514;
  }
  long long v23 = v21;
  uint64_t v24 = v22;
  uint64_t result = v15(v12, a2, &v23, a4, a5, a6);
  if (!result)
  {
    uint64_t v17 = *(void *)(DerivedStorage + 24);
    uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v18) {
      uint64_t v19 = v18;
    }
    else {
      uint64_t v19 = 0;
    }
    long long v20 = *(void (**)(uint64_t))(v19 + 16);
    if (v20) {
      v20(v17);
    }
    return 0;
  }
  return result;
}

uint64_t figSpeedRampRenderPipelineStartOffline(uint64_t a1, long long *a2)
{
  uint64_t v3 = *(void *)(CMBaseObjectGetDerivedStorage() + 144);
  long long v8 = *a2;
  uint64_t v9 = *((void *)a2 + 2);
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  CMTimeScale v6 = *(uint64_t (**)(uint64_t, long long *))(v5 + 24);
  if (!v6) {
    return 4294954514;
  }
  long long v10 = v8;
  uint64_t v11 = v9;
  return v6(v3, &v10);
}

uint64_t figSpeedRampRenderPipelineStopOffline()
{
  uint64_t v0 = *(void *)(CMBaseObjectGetDerivedStorage() + 144);
  uint64_t v1 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v1) {
    uint64_t v2 = v1;
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v2 + 32);
  if (!v3) {
    return 4294954514;
  }

  return v3(v0);
}

uint64_t figSpeedRampRenderPipelinePretendOutputIsLow(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  speedramp_remapAndTransferSampleBuffersUpToHighWaterLevel(a1);
  uint64_t v3 = *(void *)(DerivedStorage + 144);
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  CMTimeScale v6 = *(uint64_t (**)(uint64_t))(v5 + 40);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3);
}

uint64_t figSpeedRampRenderPipelineSynchronizeToTimebase()
{
  uint64_t v0 = *(void *)(CMBaseObjectGetDerivedStorage() + 144);
  uint64_t v1 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v1) {
    uint64_t v2 = v1;
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v2 + 48);
  if (!v3) {
    return 4294954514;
  }

  return v3(v0);
}

uint64_t figSpeedRampRenderPipelineRequestDecodeForPreroll(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  speedramp_remapAndTransferSampleBuffersUpToHighWaterLevel(a1);
  uint64_t v5 = *(void *)(DerivedStorage + 144);
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  long long v8 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 56);
  if (!v8) {
    return 4294954514;
  }

  return v8(v5, a2);
}

uint64_t figSpeedRampRenderPipelineReset(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 88));
  uint64_t v4 = *(const void **)(DerivedStorage + 96);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(DerivedStorage + 96) = 0;
  }
  uint64_t v5 = MEMORY[0x1E4F1F9F8];
  *(_OWORD *)(DerivedStorage + 112) = *MEMORY[0x1E4F1F9F8];
  *(void *)(DerivedStorage + 128) = *(void *)(v5 + 16);
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(DerivedStorage + 136));
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 88));
  uint64_t result = CMBufferQueueReset(*(CMBufferQueueRef *)(DerivedStorage + 8));
  if (!result)
  {
    uint64_t v7 = *(void *)(DerivedStorage + 144);
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    long long v10 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 64);
    if (v10)
    {
      uint64_t result = v10(v7, a2);
      if (!result)
      {
        uint64_t v11 = *(void *)(DerivedStorage + 24);
        uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v12) {
          uint64_t v13 = v12;
        }
        else {
          uint64_t v13 = 0;
        }
        uint64_t v14 = *(void (**)(uint64_t))(v13 + 16);
        if (v14) {
          v14(v11);
        }
        return 0;
      }
    }
    else
    {
      return 4294954514;
    }
  }
  return result;
}

uint64_t figSpeedRampRenderPipelineFinishSettingRate()
{
  uint64_t v0 = *(void *)(CMBaseObjectGetDerivedStorage() + 144);
  uint64_t v1 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v1) {
    uint64_t v2 = v1;
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v2 + 72);
  if (!v3) {
    return 4294954514;
  }

  return v3(v0);
}

uint64_t figSpeedRampRenderPipelineCancelAndFlushTransition(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(CMBaseObjectGetDerivedStorage() + 144);
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 80);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t figSpeedRampRenderPipelineFlushFromTime(uint64_t a1, long long *a2)
{
  uint64_t v3 = *(void *)(CMBaseObjectGetDerivedStorage() + 144);
  long long v8 = *a2;
  uint64_t v9 = *((void *)a2 + 2);
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, long long *))(v5 + 88);
  if (!v6) {
    return 4294954514;
  }
  long long v10 = v8;
  uint64_t v11 = v9;
  return v6(v3, &v10);
}

uint64_t figSpeedRampRenderPipelineDoesSupportTransitionToFormatDescription(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(CMBaseObjectGetDerivedStorage() + 144);
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 96);
  if (!v6) {
    return 0;
  }

  return v6(v3, a2);
}

uint64_t figSpeedRampRenderPipelineInvalidate()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    uint64_t v1 = DerivedStorage;
    if (!*(unsigned char *)DerivedStorage)
    {
      *(unsigned char *)uint64_t DerivedStorage = 1;
      if (*(void *)(DerivedStorage + 144))
      {
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterRemoveWeakListener();
      }
      if (*(void *)(v1 + 8))
      {
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterRemoveWeakListener();
      }
      uint64_t v2 = *(opaqueCMBufferQueueTriggerToken **)(v1 + 160);
      if (v2)
      {
        CMBufferQueueRemoveTrigger(*(CMBufferQueueRef *)(v1 + 8), v2);
        *(void *)(v1 + 160) = 0;
      }
      uint64_t v3 = *(opaqueCMBufferQueueTriggerToken **)(v1 + 168);
      if (v3)
      {
        CMBufferQueueRemoveTrigger(*(CMBufferQueueRef *)(v1 + 152), v3);
        *(void *)(v1 + 168) = 0;
      }
      uint64_t v4 = *(void *)(v1 + 24);
      if (v4 && *(unsigned char *)(v1 + 32))
      {
        uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v5) {
          uint64_t v6 = v5;
        }
        else {
          uint64_t v6 = 0;
        }
        uint64_t v7 = *(void (**)(uint64_t, void, void))(v6 + 8);
        if (v7) {
          v7(v4, 0, 0);
        }
        *(unsigned char *)(v1 + 32) = 0;
      }
      uint64_t v8 = *(void *)(v1 + 144);
      if (v8)
      {
        uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(v8);
        if (FigBaseObject)
        {
          uint64_t v10 = FigBaseObject;
          uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
          uint64_t v12 = v11 ? v11 : 0;
          uint64_t v13 = *(void (**)(uint64_t))(v12 + 24);
          if (v13) {
            v13(v10);
          }
        }
      }
      uint64_t v14 = *(NSObject **)(v1 + 176);
      if (v14)
      {
        uint64_t v15 = *(OpaqueCMTimebase **)(v1 + 16);
        if (v15)
        {
          CMTimebaseRemoveTimerDispatchSource(v15, v14);
          uint64_t v14 = *(NSObject **)(v1 + 176);
        }
        dispatch_source_cancel(v14);
      }
      if (*(void *)(v1 + 16))
      {
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterRemoveWeakListener();
      }
    }
  }
  return 0;
}

void figSpeedRampRenderPipelineFinalize()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  figSpeedRampRenderPipelineInvalidate();
  uint64_t v1 = (const void *)DerivedStorage[3];
  if (v1)
  {
    CFRelease(v1);
    DerivedStorage[3] = 0;
  }
  uint64_t v2 = (const void *)DerivedStorage[1];
  if (v2)
  {
    CFRelease(v2);
    DerivedStorage[1] = 0;
  }
  uint64_t v3 = (const void *)DerivedStorage[2];
  if (v3)
  {
    CFRelease(v3);
    DerivedStorage[2] = 0;
  }
  FigSimpleMutexDestroy();
  DerivedStorage[11] = 0;
  uint64_t v4 = (const void *)DerivedStorage[12];
  if (v4)
  {
    CFRelease(v4);
    DerivedStorage[12] = 0;
  }
  uint64_t v5 = (const void *)DerivedStorage[17];
  if (v5)
  {
    CFRelease(v5);
    DerivedStorage[17] = 0;
  }
  uint64_t v6 = (const void *)DerivedStorage[18];
  if (v6)
  {
    CFRelease(v6);
    DerivedStorage[18] = 0;
  }
  uint64_t v7 = (const void *)DerivedStorage[19];
  if (v7)
  {
    CFRelease(v7);
    DerivedStorage[19] = 0;
  }
  uint64_t v8 = DerivedStorage[22];
  if (v8)
  {
    dispatch_release(v8);
    DerivedStorage[22] = 0;
  }
  FigSimpleMutexDestroy();
  DerivedStorage[23] = 0;
  uint64_t v9 = (const void *)DerivedStorage[24];
  if (v9)
  {
    CFRelease(v9);
    DerivedStorage[24] = 0;
  }
}

__CFString *figSpeedRampRenderPipelineCopyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<FigSpeedRampRenderPipeline %p: ", a1);
  uint64_t v4 = DerivedStorage[18];
  uint64_t v5 = (opaqueCMBufferQueue *)DerivedStorage[1];
  BufferCFIndex Count = CMBufferQueueGetBufferCount(v5);
  CFStringAppendFormat(Mutable, 0, @"%s downstreamRenderPipeline %@, sourceSampleBufferQueue %p (%d sbufs)", DerivedStorage + 25, v4, v5, BufferCount);
  CFDataRef v7 = (const __CFData *)DerivedStorage[24];
  if (v7)
  {
    unint64_t Length = CFDataGetLength(v7);
    CFStringAppendFormat(Mutable, 0, @", speedRampData with %d mappings", Length / 0x60);
  }
  CFStringAppendFormat(Mutable, 0, @">");
  return Mutable;
}

uint64_t figSpeedRampRenderPipelineCopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, void *a4)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage || (uint64_t v8 = DerivedStorage, *DerivedStorage))
  {
    return FigSignalErrorAt();
  }
  if (CFEqual(@"SourceSampleBufferQueue", a2))
  {
    uint64_t v10 = (const void *)*((void *)v8 + 1);
    if (v10)
    {
LABEL_8:
      uint64_t v11 = (void *)CFRetain(v10);
LABEL_9:
      uint64_t v12 = v11;
LABEL_15:
      uint64_t result = 0;
      *a4 = v12;
      return result;
    }
LABEL_14:
    uint64_t v12 = 0;
    goto LABEL_15;
  }
  if (CFEqual(@"SourceSampleBufferConsumer", a2)) {
    return 4294954446;
  }
  if (CFEqual(@"SpeedRampData", a2))
  {
    uint64_t v10 = (const void *)*((void *)v8 + 24);
    if (v10) {
      goto LABEL_8;
    }
    goto LABEL_14;
  }
  if (CFEqual(@"PrefersConsumptionDrivenReads", a2))
  {
    uint64_t v10 = (const void *)*MEMORY[0x1E4F1CFD0];
    if (*MEMORY[0x1E4F1CFD0]) {
      goto LABEL_8;
    }
    goto LABEL_14;
  }
  if (CFEqual(@"EndPresentationTimeForQueuedSamples", a2))
  {
    memset(&v17, 0, sizeof(v17));
    CMBufferQueueGetEndPresentationTimeStamp(&v17, *((CMBufferQueueRef *)v8 + 1));
    if ((v17.flags & 1) == 0) {
      return FigRenderPipelineCopyProperty(*((void *)v8 + 18), (uint64_t)a2, (uint64_t)a3, (uint64_t)a4);
    }
    CMTime v16 = v17;
    MEMORY[0x19970E910](*((void *)v8 + 23));
    CFDataRef v14 = (const __CFData *)*((void *)v8 + 24);
    if (v14)
    {
      CFDataGetBytePtr(v14);
      CFDataGetLength(*((CFDataRef *)v8 + 24));
      CMTime v15 = v17;
      CMSpeedRampMapTimeFromSourceToTarget();
    }
    MEMORY[0x19970E930](*((void *)v8 + 23));
    CMTime v15 = v16;
    uint64_t v11 = CMTimeCopyAsDictionary(&v15, a3);
    goto LABEL_9;
  }
  uint64_t v13 = *((void *)v8 + 18);

  return FigRenderPipelineCopyProperty(v13, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4);
}

uint64_t figSpeedRampRenderPipelineSetProperty(uint64_t a1, const void *a2, void *a3)
{
  uint64_t v105 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage || (CFDataRef v7 = DerivedStorage, *DerivedStorage))
  {
LABEL_3:
    return FigSignalErrorAt();
  }
  if (CFEqual(@"SpeedRampData", a2))
  {
    if (a3)
    {
      CFTypeID v9 = CFGetTypeID(a3);
      if (v9 != CFDataGetTypeID()) {
        goto LABEL_3;
      }
    }
    CFTypeRef cf = (CFTypeRef)a1;
    uint64_t v10 = CMBaseObjectGetDerivedStorage();
    CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    uint64_t v13 = Mutable;
    CFArrayRef theArray = Mutable;
    CFDataRef v78 = (const __CFData *)a3;
    uint64_t v79 = v10;
    if (a3)
    {
      uint64_t BytePtr = CFDataGetBytePtr((CFDataRef)a3);
      unint64_t Length = CFDataGetLength((CFDataRef)a3);
      CFArrayRef v16 = v13;
      if (Length >= 0x60)
      {
        unint64_t v17 = 0;
        unint64_t v18 = Length / 0x60;
        unint64_t v19 = Length / 0x60;
        unint64_t v77 = Length / 0x60 - 1;
        unsigned int v80 = BytePtr;
        for (CFIndex i = BytePtr + 48; ; i += 960)
        {
          if ((int)v19 - (int)v17 >= 10) {
            int v21 = 10;
          }
          else {
            int v21 = v19 - v17;
          }
          uint64_t v22 = CFStringCreateMutable(v11, 0);
          int v23 = v21 + v17;
          CFStringAppendFormat(v22, 0, @"mappings %d..%d of %d, source range -> target range:", v17, (v23 - 1), v19);
          if ((int)v19 - (int)v17 >= 1)
          {
            uint64_t v24 = v23;
            uint64_t v25 = i;
            uint64_t v26 = v17;
            do
            {
              long long v27 = *((_OWORD *)v25 - 3);
              time[0].start.CMTimeEpoch epoch = *((void *)v25 - 4);
              *(_OWORD *)&time[0].start.unsigned int value = v27;
              Float64 Seconds = CMTimeGetSeconds(&time[0].start);
              long long v29 = *(_OWORD *)v25;
              time[0].start.CMTimeEpoch epoch = *((void *)v25 + 2);
              *(_OWORD *)&time[0].start.unsigned int value = v29;
              Float64 v30 = CMTimeGetSeconds(&time[0].start);
              long long v31 = *(_OWORD *)(v25 - 24);
              time[0].start.CMTimeEpoch epoch = *((void *)v25 - 1);
              *(_OWORD *)&time[0].start.unsigned int value = v31;
              double v32 = CMTimeGetSeconds(&time[0].start);
              long long v33 = *(_OWORD *)(v25 + 24);
              time[0].start.CMTimeEpoch epoch = *((void *)v25 + 5);
              *(_OWORD *)&time[0].start.unsigned int value = v33;
              Float64 v34 = CMTimeGetSeconds(&time[0].start);
              CFStringAppendFormat(v22, 0, @"\n %3d: %7.3f -> %7.3f (rate %1.2f)", v26++, *(void *)&Seconds, *(void *)&v30, v32 / v34);
              v25 += 96;
            }
            while (v26 < v24);
          }
          v17 += 10;
          CFArrayRef v16 = theArray;
          if (v18 <= v17) {
            break;
          }
          CFArrayAppendValue(theArray, v22);
          CFRelease(v22);
        }
        BOOL v40 = &v80[96 * v77];
        long long v41 = *(_OWORD *)v40;
        long long v42 = *((_OWORD *)v40 + 2);
        *(_OWORD *)&time[0].start.CMTimeEpoch epoch = *((_OWORD *)v40 + 1);
        *(_OWORD *)&time[0].duration.CMTimeScale timescale = v42;
        *(_OWORD *)&time[0].start.unsigned int value = v41;
        CMTimeRangeGetEnd(&v90, time);
        Float64 v43 = CMTimeGetSeconds(&v90);
        long long v44 = *((_OWORD *)v40 + 3);
        long long v45 = *((_OWORD *)v40 + 5);
        *(_OWORD *)&time[0].start.CMTimeEpoch epoch = *((_OWORD *)v40 + 4);
        *(_OWORD *)&time[0].duration.CMTimeScale timescale = v45;
        *(_OWORD *)&time[0].start.unsigned int value = v44;
        CMTimeRangeGetEnd(&lhs, time);
        Float64 v46 = CMTimeGetSeconds(&lhs);
        CFStringAppendFormat(v22, 0, @"\n end: %7.3f -> %7.3f", *(void *)&v43, *(void *)&v46);
        CFArrayAppendValue(theArray, v22);
        CFRelease(v22);
      }
    }
    else
    {
      CFArrayAppendValue(Mutable, @"<no mappings>");
      CFArrayRef v16 = v13;
    }
    if (v16)
    {
      CFIndex Count = CFArrayGetCount(v16);
      if (Count >= 1)
      {
        CFIndex v48 = Count;
        CFIndex v49 = 0;
        int v50 = dword_1E9351808;
        do
        {
          if (v50)
          {
            LODWORD(lhs.value) = 0;
            LOBYTE(type.value) = 0;
            os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int value = lhs.value;
            if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT)) {
              unsigned int v53 = value;
            }
            else {
              unsigned int v53 = value & 0xFFFFFFFE;
            }
            if (v53)
            {
              CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v16, v49);
              LODWORD(v90.value) = 136315906;
              *(CMTimeValue *)((char *)&v90.value + 4) = (CMTimeValue)"figSpeedRampRenderPipelineSetSpeedRampData";
              LOWORD(v90.flags) = 2082;
              *(void *)((char *)&v90.flags + 2) = v79 + 200;
              HIWORD(v90.epoch) = 2048;
              CFTypeRef v91 = cf;
              __int16 v92 = 2114;
              Float64 v93 = *(double *)&ValueAtIndex;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            int v50 = dword_1E9351808;
          }
          ++v49;
        }
        while (v48 != v49);
      }
    }
    MEMORY[0x19970E910](*(void *)(v79 + 184));
    if (v78)
    {
      MEMORY[0x19970E910](*(void *)(v79 + 88));
      if ((*(_DWORD *)(v79 + 124) & 0x1D) == 1)
      {
        int v55 = (_OWORD *)(v79 + 112);
        __n128 v85 = 0uLL;
        CMTimeEpoch v86 = 0;
        CFDataRef v56 = *(const __CFData **)(v79 + 192);
        *(_OWORD *)&time[0].start.unsigned int value = *(_OWORD *)(v79 + 112);
        time[0].start.CMTimeEpoch epoch = *(void *)(v79 + 128);
        speedramp_mapTimeFromTargetToSourceUsingMappingArrayData(v56, (__n128 *)time, &v85);
        __n128 v83 = 0uLL;
        CMTimeEpoch v84 = 0;
        *(_OWORD *)&time[0].start.unsigned int value = *(_OWORD *)(v79 + 112);
        time[0].start.CMTimeEpoch epoch = *(void *)(v79 + 128);
        speedramp_mapTimeFromTargetToSourceUsingMappingArrayData(v78, (__n128 *)time, &v83);
        CMTimeEpoch v57 = v84;
        CMTimeValue v102 = v85.n128_u64[0];
        CMTimeFlags v58 = v85.n128_u32[3];
        CMTimeScale v103 = v85.n128_i32[2];
        CMTimeEpoch v59 = v86;
        CMTimeValue v100 = v83.n128_u64[0];
        CMTimeFlags v60 = v83.n128_u32[3];
        CMTimeScale v101 = v83.n128_i32[2];
        if ((v85.n128_u8[12] & 0x1F) != 3 && (v83.n128_u8[12] & 0x1F) != 3) {
          goto LABEL_47;
        }
        memset(time, 0, 24);
        type.CMTimeEpoch epoch = v84;
        *(__n128 *)&lhs.unsigned int value = v85;
        lhs.CMTimeEpoch epoch = v86;
        *(__n128 *)&type.unsigned int value = v83;
        CMTimeSubtract(&v90, &lhs, &type);
        CMTimeAbsoluteValue(&time[0].start, &v90);
        CMTimeMake(&time2, 1, 1000000000);
        CMTime lhs = time[0].start;
        if (CMTimeCompare(&lhs, &time2) > 0)
        {
LABEL_47:
          time[0].start.unsigned int value = v102;
          time[0].start.CMTimeScale timescale = v103;
          time[0].start.CMTimeFlags flags = v58;
          time[0].start.CMTimeEpoch epoch = v59;
          lhs.unsigned int value = v100;
          lhs.CMTimeScale timescale = v101;
          lhs.CMTimeFlags flags = v60;
          lhs.CMTimeEpoch epoch = v57;
          if (CMTimeCompare(&time[0].start, &lhs))
          {
            LODWORD(lhs.value) = 0;
            LOBYTE(type.value) = 0;
            double v61 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int v62 = lhs.value;
            if (os_log_type_enabled(v61, type.value)) {
              unsigned int v63 = v62;
            }
            else {
              unsigned int v63 = v62 & 0xFFFFFFFE;
            }
            if (v63)
            {
              *(__n128 *)&time[0].start.unsigned int value = v85;
              time[0].start.CMTimeEpoch epoch = v86;
              Float64 v64 = CMTimeGetSeconds(&time[0].start);
              *(_OWORD *)&time[0].start.unsigned int value = *v55;
              time[0].start.CMTimeEpoch epoch = *(void *)(v79 + 128);
              Float64 v65 = CMTimeGetSeconds(&time[0].start);
              *(__n128 *)&time[0].start.unsigned int value = v83;
              time[0].start.CMTimeEpoch epoch = v84;
              Float64 v66 = CMTimeGetSeconds(&time[0].start);
              *(_OWORD *)&time[0].start.unsigned int value = *v55;
              time[0].start.CMTimeEpoch epoch = *(void *)(v79 + 128);
              Float64 v67 = CMTimeGetSeconds(&time[0].start);
              LODWORD(v90.value) = 136316674;
              *(CMTimeValue *)((char *)&v90.value + 4) = (CMTimeValue)"figSpeedRampRenderPipelineSetSpeedRampData";
              LOWORD(v90.flags) = 2082;
              *(void *)((char *)&v90.flags + 2) = v79 + 200;
              HIWORD(v90.epoch) = 2048;
              CFTypeRef v91 = cf;
              __int16 v92 = 2048;
              Float64 v93 = v64;
              __int16 v94 = 2048;
              Float64 v95 = v65;
              __int16 v96 = 2048;
              Float64 v97 = v66;
              __int16 v98 = 2048;
              Float64 v99 = v67;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
        }
      }
      MEMORY[0x19970E930](*(void *)(v79 + 88));
      CFNumberRef v75 = *(const void **)(v79 + 192);
      if (v75)
      {
        CFRelease(v75);
        *(void *)(v79 + 192) = 0;
      }
      CFAllocatorRef v76 = CFGetAllocator(cf);
      *(void *)(v79 + 192) = CFDataCreateCopy(v76, v78);
    }
    else
    {
      CMTimeEpoch v68 = *(const void **)(v79 + 192);
      if (v68)
      {
        CFRelease(v68);
        *(void *)(v79 + 192) = 0;
      }
    }
    MEMORY[0x19970E930](*(void *)(v79 + 184));
    if (theArray) {
      CFRelease(theArray);
    }
    return 0;
  }
  if (CFEqual(@"Timebase", a2))
  {
    if (a3)
    {
      CFTypeID v35 = CFGetTypeID(a3);
      if (v35 != CMTimebaseGetTypeID()) {
        goto LABEL_3;
      }
    }
    speedramp_setTimebase(a1, (OpaqueCMTimebase *)a3);
    uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(*((void *)v7 + 18));
    uint64_t v37 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v37) {
      uint64_t v38 = v37;
    }
    else {
      uint64_t v38 = 0;
    }
    char v69 = *(uint64_t (**)(uint64_t, const void *, void *))(v38 + 56);
    if (v69) {
      uint64_t v70 = v69(FigBaseObject, a2, a3);
    }
    else {
      uint64_t v70 = 4294954514;
    }
    uint64_t v71 = *((void *)v7 + 3);
    uint64_t v72 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v72) {
      uint64_t v73 = v72;
    }
    else {
      uint64_t v73 = 0;
    }
    CFNumberRef v74 = *(void (**)(uint64_t))(v73 + 16);
    if (v74) {
      v74(v71);
    }
    return v70;
  }
  if (CFEqual(@"ExpectScaledEdits", a2)) {
    return 0;
  }
  uint64_t v39 = *((void *)v7 + 18);

  return FigRenderPipelineSetProperty_0(v39, (uint64_t)a2, (uint64_t)a3);
}

uint64_t speedramp_timebaseTimeJumped()
{
  uint64_t v0 = *(void *)(CMBaseObjectGetDerivedStorage() + 24);
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v4 = *(void *)(VTable + 16);
  uint64_t result = VTable + 16;
  uint64_t v3 = v4;
  if (v4) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t))(v5 + 16);
  if (v6)
  {
    return v6(v0);
  }
  return result;
}

OpaqueCMTimebase *speedramp_setTimebase(uint64_t a1, OpaqueCMTimebase *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = *(OpaqueCMTimebase **)(DerivedStorage + 16);
  if (result != a2)
  {
    if (dword_1E9351808)
    {
      os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      uint64_t result = *(OpaqueCMTimebase **)(DerivedStorage + 16);
    }
    if (result)
    {
      CMTimebaseRemoveTimerDispatchSource(result, *(dispatch_source_t *)(DerivedStorage + 176));
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      uint64_t v6 = *(const void **)(DerivedStorage + 16);
    }
    else
    {
      uint64_t v6 = 0;
    }
    *(void *)(DerivedStorage + 16) = a2;
    if (a2) {
      CFRetain(a2);
    }
    if (v6) {
      CFRelease(v6);
    }
    uint64_t result = *(OpaqueCMTimebase **)(DerivedStorage + 16);
    if (result)
    {
      CMTimebaseAddTimerDispatchSource(result, *(dispatch_source_t *)(DerivedStorage + 176));
      CMNotificationCenterGetDefaultLocalCenter();
      return (OpaqueCMTimebase *)FigNotificationCenterAddWeakListener();
    }
  }
  return result;
}

__n128 speedramp_mapTimeFromTargetToSourceUsingMappingArrayData@<Q0>(CFDataRef theData@<X1>, __n128 *a2@<X0>, __n128 *a3@<X8>)
{
  if (theData)
  {
    CFDataGetBytePtr(theData);
    CFDataGetLength(theData);
    CMSpeedRampMapTimeFromTargetToSource();
  }
  else
  {
    __n128 result = *a2;
    *a3 = *a2;
    a3[1].n128_u64[0] = a2[1].n128_u64[0];
  }
  return result;
}

uint64_t FigTTMLIntervalTreeGetTypeID()
{
  return sFigTTMLIntervalTreeID;
}

uint64_t figTTMLIntervalTreeRegisterFigTTMLIntervalTree()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sFigTTMLIntervalTreeID = result;
  return result;
}

uint64_t FigTTMLIntervalTreeCreate(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  CFMutableArrayRef v6 = Mutable;
  if (!a3) {
    goto LABEL_19;
  }
  if (Mutable)
  {
    RootNode = (const void *)FigTTMLTreeGetRootNode(a2);
    uint64_t v8 = FigTTMLTreeWalkFromNode(RootNode, (uint64_t (*)(const void *, uint64_t))figTTMLIntervalCopyNodeToArray, 0, (uint64_t)v6);
    if (v8)
    {
      uint64_t v17 = v8;
LABEL_12:
      CFRelease(v6);
      return v17;
    }
    unint64_t Count = CFArrayGetCount(v6);
    if (Count >= 2)
    {
      CFIndex v10 = Count - 1;
      do
      {
        int v11 = rand();
        CFArrayExchangeValuesAtIndices(v6, v10, v11 % (v10 + 1));
        --v10;
      }
      while (v10);
    }
    MEMORY[0x19970EE10](&FigTTMLIntervalTreeGetTypeID_sRegisterFigTTMLIntervalTreeOnce, figTTMLIntervalTreeRegisterFigTTMLIntervalTree);
    uint64_t Instance = _CFRuntimeCreateInstance();
    if (Instance)
    {
      uint64_t v13 = Instance;
      Interval = (long long *)figTTMLIntervalCreateInterval();
      if (CFArrayGetCount(v6) >= 1)
      {
        CFIndex v15 = 0;
        do
        {
          CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v6, v15);
          figTTMLIntervalTreeInsert(Interval, ValueAtIndex);
          ++v15;
        }
        while (v15 < CFArrayGetCount(v6));
      }
      uint64_t v17 = 0;
      *(void *)(v13 + 16) = Interval;
      *a3 = v13;
      if (!v6) {
        return v17;
      }
      goto LABEL_12;
    }
LABEL_19:
    uint64_t v17 = FigSignalErrorAt();
    if (!v6) {
      return v17;
    }
    goto LABEL_12;
  }

  return FigSignalErrorAt();
}

uint64_t figTTMLIntervalCopyNodeToArray(void *value, CFMutableArrayRef theArray)
{
  return 0;
}

void *figTTMLIntervalCreateInterval()
{
  uint64_t v0 = malloc_type_calloc(1uLL, 0x38uLL, 0x1020040DD9C6B3AuLL);
  uint64_t v1 = MEMORY[0x1E4F1F9F8];
  *(_OWORD *)uint64_t v0 = *MEMORY[0x1E4F1F9F8];
  v0[2] = *(void *)(v1 + 16);
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v3 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
  v0[3] = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  v0[4] = CFArrayCreateMutable(v2, 0, v3);
  return v0;
}

uint64_t figTTMLIntervalTreeInsert(long long *a1, const void *a2)
{
  memset(&v9, 0, sizeof(v9));
  uint64_t result = FigTTMLNodeGetActiveTimeRange((uint64_t)a2, (uint64_t)&v9);
  if (!result)
  {
    if ((v9.start.flags & 1) == 0 || (v9.duration.flags & 1) == 0 || v9.duration.epoch || v9.duration.value < 0)
    {
      return FigSignalErrorAt();
    }
    else
    {
      time1.CMTime start = v9.duration;
      CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
      uint64_t result = CMTimeCompare(&time1.start, &time2);
      if (result)
      {
        if ((*((unsigned char *)a1 + 12) & 1) == 0)
        {
          *a1 = *(_OWORD *)&v9.start.value;
          *((void *)a1 + 2) = v9.start.epoch;
        }
        *(_OWORD *)&time1.start.unsigned int value = *(_OWORD *)&v9.start.value;
        *(_OWORD *)&time1.start.CMTimeEpoch epoch = *(_OWORD *)&v9.start.epoch;
        long long v5 = *a1;
        *(_OWORD *)&time1.duration.CMTimeScale timescale = *(_OWORD *)&v9.duration.timescale;
        *(_OWORD *)&time2.unsigned int value = v5;
        time2.CMTimeEpoch epoch = *((void *)a1 + 2);
        if (CMTimeRangeContainsTime(&time1, &time2))
        {
          figTTMLIntervalTreeInsertToSortedArray(*((const __CFArray **)a1 + 3), a2, (CFComparisonResult (__cdecl *)(const void *, const void *, void *))figTTMLIntervalTreeCompareByStart);
          figTTMLIntervalTreeInsertToSortedArray(*((const __CFArray **)a1 + 4), a2, (CFComparisonResult (__cdecl *)(const void *, const void *, void *))figTTMLIntervalTreeCompareByEnd);
          return 0;
        }
        else
        {
          CMTimeRange time1 = v9;
          CMTimeRangeGetEnd(&v6, &time1);
          *(_OWORD *)&time1.start.unsigned int value = *a1;
          time1.start.CMTimeEpoch epoch = *((void *)a1 + 2);
          if (CMTimeCompare(&v6, &time1.start) <= 0)
          {
            if (!*((void *)a1 + 5)) {
              *((void *)a1 + 5) = figTTMLIntervalCreateInterval();
            }
          }
          else if (!*((void *)a1 + 6))
          {
            *((void *)a1 + 6) = figTTMLIntervalCreateInterval();
          }
          return figTTMLIntervalTreeInsert();
        }
      }
    }
  }
  return result;
}

void figTTMLIntervalReleaseInterval(void *a1)
{
  if (a1)
  {
    CFAllocatorRef v2 = (const void *)a1[3];
    if (v2) {
      CFRelease(v2);
    }
    uint64_t v3 = (const void *)a1[4];
    if (v3) {
      CFRelease(v3);
    }
    figTTMLIntervalReleaseInterval(a1[5]);
    figTTMLIntervalReleaseInterval(a1[6]);
    free(a1);
  }
}

uint64_t FigTTMLIntervalTreeAppendActiveNodesToArray(uint64_t a1, long long *a2, __CFArray *a3)
{
  if (a3 && (*((unsigned char *)a2 + 12) & 1) != 0)
  {
    uint64_t v3 = *(void *)(a1 + 16);
    long long v5 = *a2;
    uint64_t v6 = *((void *)a2 + 2);
    figTTMLIntervalTreeAppendActiveNodesToArray(v3, (uint64_t)&v5, a3);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

CFIndex figTTMLIntervalTreeAppendActiveNodesToArray(uint64_t a1, uint64_t a2, __CFArray *a3)
{
  if (*(unsigned char *)(a2 + 12))
  {
    *(_OWORD *)&time1.start.unsigned int value = *(_OWORD *)a1;
    time1.start.CMTimeEpoch epoch = *(void *)(a1 + 16);
    *(_OWORD *)&v15.start.unsigned int value = *(_OWORD *)a2;
    v15.start.CMTimeEpoch epoch = *(void *)(a2 + 16);
    int32_t v6 = CMTimeCompare(&time1.start, &v15.start);
    if (v6 < 1)
    {
      int32_t v10 = v6;
      CFIndex result = CFArrayGetCount(*(CFArrayRef *)(a1 + 32));
      if (v10 < 0)
      {
        if (result >= 1)
        {
          CFIndex v13 = 0;
          do
          {
            CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 32), v13);
            memset(&time1, 0, sizeof(time1));
            FigTTMLNodeGetActiveTimeRange((uint64_t)ValueAtIndex, (uint64_t)&time1);
            CMTimeRange v15 = time1;
            CMTimeRangeGetEnd(&v16, &v15);
            *(_OWORD *)&v15.start.unsigned int value = *(_OWORD *)a2;
            v15.start.CMTimeEpoch epoch = *(void *)(a2 + 16);
            if (CMTimeCompare(&v16, &v15.start) < 1) {
              break;
            }
            CFArrayAppendValue(a3, ValueAtIndex);
            ++v13;
          }
          while (v13 < CFArrayGetCount(*(CFArrayRef *)(a1 + 32)));
        }
        CFIndex result = *(void *)(a1 + 48);
        if (result) {
          goto LABEL_8;
        }
      }
      else if (result >= 1)
      {
        for (CFIndex i = 0; i < result; ++i)
        {
          uint64_t v12 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 32), i);
          CFArrayAppendValue(a3, v12);
          CFIndex result = CFArrayGetCount(*(CFArrayRef *)(a1 + 32));
        }
      }
    }
    else
    {
      if (CFArrayGetCount(*(CFArrayRef *)(a1 + 24)) >= 1)
      {
        CFIndex v7 = 0;
        do
        {
          uint64_t v8 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), v7);
          memset(&time1, 0, sizeof(time1));
          FigTTMLNodeGetActiveTimeRange((uint64_t)v8, (uint64_t)&time1);
          *(_OWORD *)&v15.start.unsigned int value = *(_OWORD *)a2;
          v15.start.CMTimeEpoch epoch = *(void *)(a2 + 16);
          CMTime time2 = time1.start;
          if (CMTimeCompare(&v15.start, &time2) < 0) {
            break;
          }
          CFArrayAppendValue(a3, v8);
          ++v7;
        }
        while (v7 < CFArrayGetCount(*(CFArrayRef *)(a1 + 24)));
      }
      CFIndex result = *(void *)(a1 + 40);
      if (result)
      {
LABEL_8:
        *(_OWORD *)&time1.start.unsigned int value = *(_OWORD *)a2;
        time1.start.CMTimeEpoch epoch = *(void *)(a2 + 16);
        return figTTMLIntervalTreeAppendActiveNodesToArray(result, &time1, a3);
      }
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t figTTMLIntervalTree_Init(uint64_t result)
{
  *(void *)(result + 16) = 0;
  return result;
}

void figTTMLIntervalTree_Finalize(uint64_t a1)
{
  *(void *)(a1 + 16) = 0;
}

CFStringRef figTTMLIntervalTree_CopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigTTMLIntervalTree %p]", a1);
}

CFStringRef figTTMLIntervalTree_CopyDebugDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigTTMLIntervalTree %p]", a1);
}

void figTTMLIntervalTreeInsertToSortedArray(const __CFArray *a1, const void *a2, CFComparisonResult (__cdecl *a3)(const void *, const void *, void *))
{
  v8.length = CFArrayGetCount(a1);
  v8.location = 0;
  CFIndex Count = CFArrayBSearchValues(a1, v8, a2, a3, 0);
  if (Count > CFArrayGetCount(a1)) {
    CFIndex Count = CFArrayGetCount(a1);
  }

  CFArrayInsertValueAtIndex(a1, Count, a2);
}

uint64_t figTTMLIntervalTreeCompareByStart(uint64_t a1, uint64_t a2)
{
  long long v10 = 0u;
  long long v11 = 0u;
  long long v9 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v6 = 0u;
  FigTTMLNodeGetActiveTimeRange(a1, (uint64_t)&v9);
  FigTTMLNodeGetActiveTimeRange(a2, (uint64_t)&v6);
  *(_OWORD *)&time1.unsigned int value = v9;
  time1.CMTimeEpoch epoch = v10;
  *(_OWORD *)&v4.unsigned int value = v6;
  v4.CMTimeEpoch epoch = v7;
  return CMTimeCompare(&time1, &v4);
}

uint64_t figTTMLIntervalTreeCompareByEnd(uint64_t a1, uint64_t a2)
{
  memset(&v8, 0, sizeof(v8));
  memset(&v7, 0, sizeof(v7));
  FigTTMLNodeGetActiveTimeRange(a1, (uint64_t)&v8);
  FigTTMLNodeGetActiveTimeRange(a2, (uint64_t)&v7);
  CMTimeRange range = v7;
  CMTimeRangeGetEnd(&time1, &range);
  CMTimeRange range = v8;
  CMTimeRangeGetEnd(&time2, &range);
  return CMTimeCompare(&time1, &time2);
}

uint64_t FigCPEFairPlayCloudProtectorCreate(const void *a1, CFDictionaryRef theDict, void *a3)
{
  if (!theDict) {
    return 4294955146;
  }
  if (!CFDictionaryContainsKey(theDict, @"6519D6C3-E423-4DEA-811B-AA98B31B3180")
    || !CFDictionaryContainsKey(theDict, @"F0C26711-9A38-43E9-BA34-8DABABF5F69D"))
  {
    return 4294955136;
  }
  if (!a3) {
    return 4294955146;
  }
  MEMORY[0x19970EE10](&FigFairPlayCPEProtectorCloudGetClassID_sRegisterFigFairPlayCPEProtectorCloudTypeOnce, RegisterFigFairPlayCPEProtectorCloudType);
  uint64_t v6 = CMDerivedObjectCreate();
  if (!v6)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (DerivedStorage)
    {
      CMTimeRange v8 = (void *)DerivedStorage;
      CFDictionaryRef Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], theDict);
      v8[1] = Copy;
      CFTypeRef cf = 0;
      FigBytePumpGetFigBaseObject(Copy);
      int Value = CFDictionaryGetValue(theDict, @"StorageURL");
      if (!Value || (long long v11 = Value, v12 = CFGetTypeID(Value), v12 != CFURLGetTypeID()) || (v13 = CFRetain(v11)) == 0) {
        CFIndex v13 = FigFairPlayCopyDefaultKeybagFolderURL();
      }
      uint64_t v6 = FigFairPlaySharedContextCopyForKeybagURLAndClient(a1, v13, 0, &cf);
      if (!v6)
      {
        *CMTimeRange v8 = cf;
        CFTypeRef cf = 0;
      }
      if (v13) {
        CFRelease(v13);
      }
      if (cf) {
        CFRelease(cf);
      }
      if (!v6) {
        *a3 = 0;
      }
    }
    else
    {
      return 4294955145;
    }
  }
  return v6;
}

BOOL FigFairPlayCPEProtectorCloudEqual(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t FigFairPlayCPEProtectorCloudInvalidate(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    uint64_t v3 = DerivedStorage;
    CMTime v4 = *(const void **)(DerivedStorage + 8);
    if (v4)
    {
      CFRelease(v4);
      *(void *)(v3 + 8) = 0;
    }
    CFTypeRef v5 = *(CFTypeRef *)v3;
    if (*(void *)v3)
    {
      uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v6) {
        uint64_t v7 = v6;
      }
      else {
        uint64_t v7 = 0;
      }
      CMTimeRange v8 = *(void (**)(CFTypeRef, uint64_t))(v7 + 8);
      if (v8) {
        v8(v5, a1);
      }
      if (*(void *)v3)
      {
        CFRelease(*(CFTypeRef *)v3);
        *(void *)uint64_t v3 = 0;
      }
    }
    long long v9 = *(void **)(v3 + 16);
    if (v9)
    {
      FigFairPlayAirPlaySessionDestroy(v9);
      *(void *)(v3 + 16) = 0;
    }
  }
  return 0;
}

__CFString *FigFairPlayCPEProtectorCloudCopyDebugDescription()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFAllocatorRef v2 = Mutable;
  if (DerivedStorage && Mutable) {
    CFStringAppendFormat(Mutable, 0, @"<FigFPCCPEProtector: sharedContext<%@>", *DerivedStorage);
  }
  return v2;
}

uint64_t FigFairPlayCPEProtectorCloudCopyProperty(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  uint64_t result = 4294955146;
  if (a2 && a4)
  {
    if (CFEqual(a2, @"IsAirPlayPossible"))
    {
      if (*MEMORY[0x1E4F1CFD0]) {
        CFTypeRef v9 = CFRetain((CFTypeRef)*MEMORY[0x1E4F1CFD0]);
      }
      else {
        CFTypeRef v9 = 0;
      }
      uint64_t result = 0;
      *a4 = v9;
    }
    else
    {
      uint64_t v10 = *DerivedStorage;
      uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v11) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = 0;
      }
      CFIndex v13 = *(uint64_t (**)(uint64_t, const void *, uint64_t, void *))(v12 + 48);
      if (v13)
      {
        return v13(v10, a2, a3, a4);
      }
      else
      {
        return 4294954514;
      }
    }
  }
  return result;
}

uint64_t FigFairPlayCPEProtectorCloudSetProperty(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return 4294955144;
  }
  else {
    return 4294955146;
  }
}

CFIndex FigFairPlayCPEProtectorCloudIsApplicationAuthorizedWithEntitlement(uint64_t a1, __SecTask *a2, int a3, int *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFIndex Code = 4294955146;
  if (!a4 || !DerivedStorage) {
    return Code;
  }
  if (!a2) {
    goto LABEL_12;
  }
  CFErrorRef error = 0;
  CFTypeRef v9 = SecTaskCopyValueForEntitlement(a2, @"com.apple.coremedia.allow-protected-content-playback", &error);
  if (!error)
  {
    if (v9)
    {
      CFTypeID v11 = CFGetTypeID(v9);
      if (v11 == CFBooleanGetTypeID())
      {
        CFIndex Code = 0;
        if (CFBooleanGetValue((CFBooleanRef)v9)) {
          int v10 = a3 & 3;
        }
        else {
          int v10 = 0;
        }
      }
      else
      {
        int v10 = 0;
        CFIndex Code = 0;
      }
      goto LABEL_14;
    }
LABEL_12:
    int v10 = 0;
LABEL_18:
    CFIndex Code = 0;
    *a4 = v10 & a3;
    return Code;
  }
  CFIndex Code = CFErrorGetCode(error);
  int v10 = 0;
  if (v9) {
LABEL_14:
  }
    CFRelease(v9);
  if (error) {
    CFRelease(error);
  }
  if (!Code) {
    goto LABEL_18;
  }
  return Code;
}

uint64_t FigFairPlayCPEProtectorCloudBeginAirPlaySessionAsync(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (DerivedStorage[2])
  {
    uint64_t v14 = 4294955138;
    goto LABEL_11;
  }
  CMTimeRange v8 = DerivedStorage;
  CFNumberRef number = 0;
  unsigned int valuePtr = 0;
  uint64_t v9 = *DerivedStorage;
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = *(unsigned int (**)(uint64_t, uint64_t, void, CFNumberRef *))(v11 + 48);
  if (v12)
  {
    if (!v12(v9, 0x1EE571CB8, *MEMORY[0x1E4F1CF80], &number))
    {
      CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr);
      if (number) {
        CFRelease(number);
      }
    }
  }
  CFIndex v13 = (void *)FigFairPlayAirPlaySessionCreateWithContentInfo(valuePtr, v8[1], a2);
  CFTypeRef v8[2] = v13;
  if (!v13)
  {
    uint64_t v14 = 4294955145;
    goto LABEL_11;
  }
  uint64_t v14 = FigFairPlayAirPlaySessionBeginAsync(v13, a3, a4);
  if (v14) {
LABEL_11:
  }
    FigFairPlayCPEProtectorCloudEndAirPlaySession();
  return v14;
}

uint64_t FigFairPlayCPEProtectorCloudEndAirPlaySession()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage) {
    return 4294955146;
  }
  uint64_t v1 = DerivedStorage;
  uint64_t result = *(void *)(DerivedStorage + 16);
  if (result)
  {
    FigFairPlayAirPlaySessionDestroy((void *)result);
    uint64_t result = 0;
    *(void *)(v1 + 16) = 0;
  }
  return result;
}

uint64_t RegisterFigFairPlayCPEProtectorCloudType()
{
  FigCPEProtectorGetClassID();

  return FigBaseClassRegisterClass();
}

CFTypeRef FigFairPlayCPEProtectorCloudCopyFormattingDesc()
{
  return CFRetain(@"[FigFPCCPEProtector]");
}

uint64_t FigTTMLProfileCreate(const __CFAllocator *a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a4)
  {
    FigTTMLNodeGetClassID();
    uint64_t v8 = CMDerivedObjectCreate();
    if (!v8)
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      uint64_t v8 = FigTTMLInitializeNodeBaseStorage(DerivedStorage, (long long *)a3);
      if (!v8)
      {
        uint64_t v8 = FigTTMLAddCurrentElementAttributesToDictionary(a2, *(__CFDictionary **)(DerivedStorage + 24));
        if (!v8)
        {
          CFMutableArrayRef Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E4F1D510]);
          *(void *)(DerivedStorage + 136) = Mutable;
          if (Mutable)
          {
            CFMutableArrayRef v11 = CFArrayCreateMutable(a1, 0, MEMORY[0x1E4F1D510]);
            *(void *)(DerivedStorage + 144) = v11;
            if (v11)
            {
              *(void *)a3 = 0;
              *(void *)(a3 + 8) = 0;
              uint64_t v12 = FigTTMLParseNode(a2, (uint64_t (*)(uint64_t, uint64_t *, CFTypeRef *))figTTMLProfileConsumeChildNode, (uint64_t *)a3);
              if (!v12) {
                *a4 = 0;
              }
              return v12;
            }
          }
          return FigSignalErrorAt();
        }
      }
    }
    return v8;
  }

  return FigSignalErrorAt();
}

uint64_t figTTMLProfileConsumeChildNode(uint64_t a1, CFTypeRef *a2, void **a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v15 = 0;
  unsigned int value = 0;
  CFTypeRef cf = 0;
  uint64_t v7 = FigTTMLGetLibXMLAccess();
  if (!v7)
  {
    uint64_t v12 = FigSignalErrorAt();
    goto LABEL_18;
  }
  if ((*(unsigned int (**)(uint64_t))(v7 + 72))(a1) != 1) {
    goto LABEL_13;
  }
  uint64_t v8 = FigTTMLCopyNamespaceAndLocalNameOfCurrentNode(a1, (const char **)&v15, (CFStringRef *)&cf);
  if (v8) {
    goto LABEL_23;
  }
  if (FigCFEqual() && FigCFEqual())
  {
    CFAllocatorRef v9 = CFGetAllocator(*a2);
    uint64_t v8 = FigTTMLFeaturesCreate(v9, a1, (uint64_t)a2, &value);
    if (!v8)
    {
      uint64_t v10 = *(__CFArray **)(DerivedStorage + 136);
LABEL_12:
      CFArrayAppendValue(v10, value);
      goto LABEL_14;
    }
    goto LABEL_23;
  }
  if (!FigCFEqual() || !FigCFEqual())
  {
LABEL_13:
    uint64_t v8 = FigTTMLSkipNode(a1, (uint64_t *)a2, *(__CFArray **)(DerivedStorage + 128));
    if (!v8)
    {
LABEL_14:
      uint64_t v12 = 0;
      if (a3)
      {
        *a3 = value;
        unsigned int value = 0;
      }
      goto LABEL_16;
    }
    goto LABEL_23;
  }
  CFAllocatorRef v11 = CFGetAllocator(*a2);
  uint64_t v8 = FigTTMLExtensionsCreate(v11, a1, (uint64_t)a2, &value);
  if (!v8)
  {
    uint64_t v10 = *(__CFArray **)(DerivedStorage + 144);
    goto LABEL_12;
  }
LABEL_23:
  uint64_t v12 = v8;
LABEL_16:
  if (cf) {
    CFRelease(cf);
  }
LABEL_18:
  if (v15) {
    CFRelease(v15);
  }
  if (value) {
    CFRelease(value);
  }
  return v12;
}

void figTTMLProfile_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = *(const void **)(DerivedStorage + 136);
  if (v1) {
    CFRelease(v1);
  }
  CFAllocatorRef v2 = *(const void **)(DerivedStorage + 144);
  if (v2) {
    CFRelease(v2);
  }

  FigTTMLReleaseNodeBaseStorage(DerivedStorage);
}

CFStringRef figTTMLProfile_CopyDebugDesc()
{
  CMBaseObjectGetDerivedStorage();
  uint64_t v0 = (const void *)FigCFCopyCompactDescription();
  CFStringRef v1 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"profile: %@", v0);
  if (v0) {
    CFRelease(v0);
  }
  return v1;
}

uint64_t figTTMLProfile_CopyChildNodeArray(const void *a1, __CFArray **a2)
{
  CFAllocatorRef v3 = CFGetAllocator(a1);
  CFMutableArrayRef Mutable = CFArrayCreateMutable(v3, 0, MEMORY[0x1E4F1D510]);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    uint64_t v6 = DerivedStorage;
    CFArrayRef v7 = *(const __CFArray **)(DerivedStorage + 136);
    if (v7) {
      v8.length = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 136));
    }
    else {
      v8.length = 0;
    }
    v8.location = 0;
    CFArrayAppendArray(Mutable, v7, v8);
    CFArrayRef v9 = *(const __CFArray **)(v6 + 144);
    if (v9) {
      v10.length = CFArrayGetCount(v9);
    }
    else {
      v10.length = 0;
    }
    v10.location = 0;
    CFArrayAppendArray(Mutable, v9, v10);
    uint64_t v11 = 0;
    *a2 = Mutable;
  }
  else
  {
    uint64_t v11 = FigSignalErrorAt();
    if (Mutable) {
      CFRelease(Mutable);
    }
  }
  return v11;
}

uint64_t figTTMLProfile_GetNodeType(uint64_t a1, _DWORD *a2)
{
  if (!a2) {
    return FigSignalErrorAt();
  }
  *a2 = 15;
  return 0;
}

uint64_t FigManifoldCreateForMovieFragmentStream(const __CFAllocator *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, CFTypeRef *a7)
{
  values = @"MovieFragmentManifoldMemoryPool";
  CFTypeRef cf = 0;
  if (a2)
  {
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v25 = 0u;
    int v24 = 0;
    if (!FigAtomStreamInitWithBBuf()) {
      FigAtomStreamGetCurrentAtomTypeAndDataLength();
    }
    CFDictionaryRef v17 = 0;
    uint64_t v20 = 4294951252;
    goto LABEL_18;
  }
  FigManifoldGetClassID();
  uint64_t v13 = CMDerivedObjectCreate();
  if (v13)
  {
LABEL_17:
    uint64_t v20 = v13;
    CFDictionaryRef v17 = 0;
    goto LABEL_18;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(void *)(DerivedStorage + 8) = cf;
  *(void *)(DerivedStorage + 40) = a3;
  *(void *)(DerivedStorage + 48) = a5;
  *(void *)(DerivedStorage + 56) = a4;
  *(unsigned char *)(DerivedStorage + 64) = a6 & 1;
  *(unsigned char *)(DerivedStorage + 288) = 0;
  uint64_t v15 = FigReentrantMutexCreate();
  *(void *)(DerivedStorage + 24) = v15;
  if (!v15)
  {
    uint64_t v13 = FigSignalErrorAt();
    goto LABEL_17;
  }
  CFDictionaryRef v16 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], MEMORY[0x1E4F21788], (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionaryRef v17 = v16;
  if (!v16 || (CMMemoryPoolRef v18 = CMMemoryPoolCreate(v16), (*(void *)(DerivedStorage + 16) = v18) == 0))
  {
    Emptdouble y = FigSignalErrorAt();
    goto LABEL_15;
  }
  Emptdouble y = CMBlockBufferCreateEmpty(a1, 8u, 0, (CMBlockBufferRef *)(DerivedStorage + 80));
  if (Empty)
  {
LABEL_15:
    uint64_t v20 = Empty;
    goto LABEL_18;
  }
  uint64_t v20 = MovieInformationCreate((uint64_t)a1, 4, (uint64_t *)(DerivedStorage + 144));
  if (!v20)
  {
    *a7 = cf;
    CFTypeRef cf = 0;
LABEL_11:
    CFRelease(v17);
    return v20;
  }
LABEL_18:
  if (cf) {
    CFRelease(cf);
  }
  if (v17) {
    goto LABEL_11;
  }
  return v20;
}

uint64_t MovieFragmentManifoldInvalidate(const void *a1)
{
  return 0;
}

uint64_t MovieFragmentManifoldFinalize(uint64_t a1)
{
  CMBaseObjectGetDerivedStorage();
  fragManifold_InvalidateGuts(a1);

  return FigSimpleMutexDestroy();
}

__CFString *MovieFragmentManifoldCopyDebugDescription()
{
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringRef v1 = Mutable;
  if (Mutable) {
    CFStringAppendFormat(Mutable, 0, @"FigMovieFragmentManifold :");
  }
  return v1;
}

uint64_t MovieFragmentManifoldCopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 24));
  ++*(_DWORD *)(DerivedStorage + 32);
  if (*(unsigned char *)DerivedStorage)
  {
    CFNumberRef v8 = 0;
    CFMutableArrayRef Mutable = 0;
    uint64_t v10 = 4294954511;
    goto LABEL_34;
  }
  if (!CFEqual(a2, @"FMFD_Asset"))
  {
    if (CFEqual(a2, @"FMFD_UnconsumedData"))
    {
      CMBlockBufferRef v23 = 0;
      uint64_t v10 = CMBlockBufferCreateWithBufferReference(a3, *(CMBlockBufferRef *)(DerivedStorage + 80), 0, *(void *)(DerivedStorage + 88), 0, &v23);
      if (!v10) {
        *a4 = v23;
      }
      CFNumberRef v8 = 0;
      CFMutableArrayRef Mutable = 0;
      goto LABEL_34;
    }
    if (!CFEqual(a2, @"FMFD_ParserState"))
    {
      if (!CFEqual(a2, @"FMFD_Type"))
      {
        if (CFEqual(a2, @"FMFD_IsCollectingMetaData"))
        {
          uint64_t v10 = 0;
          CFNumberRef v8 = 0;
          CFMutableArrayRef Mutable = 0;
          if (*(void *)(DerivedStorage + 304)) {
            uint64_t v22 = (void *)MEMORY[0x1E4F1CFD0];
          }
          else {
            uint64_t v22 = (void *)MEMORY[0x1E4F1CFC8];
          }
          *a4 = *v22;
        }
        else
        {
          CFNumberRef v8 = 0;
          CFMutableArrayRef Mutable = 0;
          uint64_t v10 = 4294954512;
        }
        goto LABEL_34;
      }
      uint64_t v11 = CFStringCreateWithCString(a3, "FMP4", 0x8000100u);
LABEL_32:
      uint64_t v10 = 0;
      CFNumberRef v8 = 0;
      CFMutableArrayRef Mutable = 0;
      goto LABEL_33;
    }
    LODWORD(v23) = 0;
    if (*(unsigned char *)(DerivedStorage + 138) || *(_DWORD *)(DerivedStorage + 112) == 2)
    {
      int v18 = 2;
    }
    else
    {
      if (!*(unsigned char *)(DerivedStorage + 136) && !*(unsigned char *)(DerivedStorage + 137)) {
        goto LABEL_21;
      }
      int v18 = 1;
    }
    LODWORD(v23) = v18;
LABEL_21:
    uint64_t v11 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &v23);
    goto LABEL_32;
  }
  uint64_t v12 = (const void **)(DerivedStorage + 104);
  uint64_t v11 = *(const void **)(DerivedStorage + 104);
  if (v11)
  {
    CFMutableArrayRef Mutable = 0;
    CFNumberRef v8 = 0;
LABEL_6:
    uint64_t v11 = CFRetain(v11);
LABEL_7:
    uint64_t v10 = 0;
LABEL_33:
    *a4 = v11;
    goto LABEL_34;
  }
  if (!*(void *)(DerivedStorage + 96))
  {
    CFMutableArrayRef Mutable = 0;
    CFNumberRef v8 = 0;
    uint64_t v11 = 0;
    uint64_t v10 = 4294954513;
    goto LABEL_33;
  }
  LODWORD(v23) = 1450143565;
  CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionarySetValue(Mutable, @"assetOption_RequiresInProcessOperation", (const void *)*MEMORY[0x1E4F1CFD0]);
  uint64_t v14 = CMByteStreamCreateForBlockBuffer();
  if (v14)
  {
    uint64_t v10 = v14;
    CFNumberRef v8 = 0;
  }
  else
  {
    CFNumberRef v8 = CFNumberCreate(v13, kCFNumberSInt32Type, &v23);
    uint64_t CMBaseObject = CMByteStreamGetCMBaseObject();
    uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v16) {
      uint64_t v17 = v16;
    }
    else {
      uint64_t v17 = 0;
    }
    unint64_t v19 = *(uint64_t (**)(uint64_t, void, CFNumberRef))(v17 + 56);
    if (!v19)
    {
      uint64_t v10 = 4294954514;
      goto LABEL_34;
    }
    uint64_t v20 = v19(CMBaseObject, *MEMORY[0x1E4F1FB40], v8);
    if (!v20)
    {
      uint64_t v20 = FigAssetCreateWithByteStream((uint64_t)a3, cf, 1, Mutable, (void *)(DerivedStorage + 104));
      if (!v20)
      {
        uint64_t v11 = *v12;
        if (!*v12) {
          goto LABEL_7;
        }
        goto LABEL_6;
      }
    }
    uint64_t v10 = v20;
  }
LABEL_34:
  --*(_DWORD *)(DerivedStorage + 32);
  MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 24));
  if (v8) {
    CFRelease(v8);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v10;
}

uint64_t MovieFragmentManifoldSetProperty(uint64_t a1, const void *a2, const __CFBoolean *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 24));
  ++*(_DWORD *)(DerivedStorage + 32);
  if (*(unsigned char *)DerivedStorage)
  {
    uint64_t v8 = FigSignalErrorAt();
  }
  else if (CFEqual(a2, @"FMFD_ProhibitPrimingTrim"))
  {
    if (a3 && (CFTypeID TypeID = CFBooleanGetTypeID(), TypeID == CFGetTypeID(a3)))
    {
      Boolean Value = CFBooleanGetValue(a3);
      uint64_t v8 = 0;
      *(unsigned char *)(DerivedStorage + 288) = Value;
    }
    else
    {
      uint64_t v8 = 4294951256;
    }
  }
  else
  {
    uint64_t v8 = 4294954512;
  }
  --*(_DWORD *)(DerivedStorage + 32);
  MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 24));
  return v8;
}

void fragManifold_InvalidateGuts(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 24));
  ++*(_DWORD *)(DerivedStorage + 32);
  if (!*(unsigned char *)DerivedStorage)
  {
    *(unsigned char *)uint64_t DerivedStorage = 1;
    fragManifold_EndAllTracks(a1, 4294954511);
    fragManifold_DisposeTracks((uint64_t *)DerivedStorage);
    CFAllocatorRef v3 = *(const void **)(DerivedStorage + 144);
    if (v3)
    {
      CFRelease(v3);
      *(void *)(DerivedStorage + 144) = 0;
    }
    CMTime v4 = *(const void **)(DerivedStorage + 80);
    if (v4) {
      CFRelease(v4);
    }
    CFTypeRef v5 = *(const void **)(DerivedStorage + 96);
    if (v5) {
      CFRelease(v5);
    }
    uint64_t v6 = *(const void **)(DerivedStorage + 104);
    if (v6) {
      CFRelease(v6);
    }
    CFArrayRef v7 = *(const void **)(DerivedStorage + 248);
    if (v7)
    {
      CFRelease(v7);
      *(void *)(DerivedStorage + 248) = 0;
    }
    uint64_t v8 = *(const void **)(DerivedStorage + 256);
    if (v8)
    {
      CFRelease(v8);
      *(void *)(DerivedStorage + 256) = 0;
    }
    free(*(void **)(DerivedStorage + 224));
    free(*(void **)(DerivedStorage + 232));
    CFArrayRef v9 = *(const void **)(DerivedStorage + 296);
    if (v9)
    {
      CFRelease(v9);
      *(void *)(DerivedStorage + 296) = 0;
    }
    uint64_t v10 = *(const void **)(DerivedStorage + 304);
    if (v10)
    {
      CFRelease(v10);
      *(void *)(DerivedStorage + 304) = 0;
    }
    uint64_t v11 = *(const void **)(DerivedStorage + 16);
    if (v11)
    {
      CFRelease(v11);
      *(void *)(DerivedStorage + 16) = 0;
    }
  }
  --*(_DWORD *)(DerivedStorage + 32);

  JUMPOUT(0x19970E2B0);
}

uint64_t fragManifold_EndAllTracks(uint64_t a1, uint64_t a2)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  CMTime v4 = (uint64_t *)result;
  if (*(void *)(result + 160))
  {
    uint64_t result = MovieInformationGetTrackCount(*(void *)(result + 144));
    if (result >= 1)
    {
      uint64_t v5 = 0;
      for (uint64_t i = 0; i < result; ++i)
      {
        fragManifold_EndTrack((uint64_t)v4, (unsigned int *)(v4[20] + v5), a2);
        uint64_t result = MovieInformationGetTrackCount(v4[18]);
        v5 += 256;
      }
    }
  }
  CFArrayRef v7 = (unsigned int *)v4[34];
  if (v7) {
    uint64_t result = fragManifold_EndTrack((uint64_t)v4, v7, a2);
  }
  uint64_t v8 = (unsigned int *)v4[35];
  if (v8)
  {
    return fragManifold_EndTrack((uint64_t)v4, v8, a2);
  }
  return result;
}

void fragManifold_DisposeTracks(uint64_t *a1)
{
  if (a1[20])
  {
    fragManifold_UnprepareTracksForSampleEmission((uint64_t)a1);
    if (MovieInformationGetTrackCount(a1[18]) >= 1)
    {
      uint64_t v2 = 0;
      uint64_t v3 = 144;
      do
      {
        uint64_t v4 = a1[20];
        uint64_t v5 = *(const void **)(v4 + v3 - 88);
        if (v5)
        {
          CFRelease(v5);
          uint64_t v4 = a1[20];
          *(void *)(v4 + v3 - 88) = 0;
        }
        uint64_t v6 = *(const void **)(v4 + v3 - 80);
        if (v6)
        {
          CFRelease(v6);
          uint64_t v4 = a1[20];
          *(void *)(v4 + v3 - 80) = 0;
        }
        CFArrayRef v7 = *(const void **)(v4 + v3 - 72);
        if (v7)
        {
          CFRelease(v7);
          *(void *)(a1[20] + v3 - 72) = 0;
        }
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterRemoveWeakListener();
        uint64_t v8 = a1[20];
        CFArrayRef v9 = *(const void **)(v8 + v3);
        if (v9)
        {
          CFRelease(v9);
          uint64_t v8 = a1[20];
          *(void *)(v8 + v3) = 0;
        }
        uint64_t v10 = *(const void **)(v8 + v3 + 8);
        if (v10)
        {
          CFRelease(v10);
          uint64_t v8 = a1[20];
          *(void *)(v8 + v3 + 8) = 0;
        }
        uint64_t v11 = *(const void **)(v8 + v3 - 104);
        if (v11)
        {
          CFRelease(v11);
          *(void *)(a1[20] + v3 - 104) = 0;
        }
        ++v2;
        v3 += 256;
      }
      while (v2 < MovieInformationGetTrackCount(a1[18]));
    }
    uint64_t v12 = (CFTypeRef *)a1[34];
    if (v12)
    {
      if (v12[8])
      {
        CFRelease(v12[8]);
        uint64_t v12 = (CFTypeRef *)a1[34];
        v12[8] = 0;
      }
      a1[34] = 0;
      free(v12);
    }
    CFAllocatorRef v13 = (CFTypeRef *)a1[35];
    if (v13)
    {
      if (v13[8])
      {
        CFRelease(v13[8]);
        CFAllocatorRef v13 = (CFTypeRef *)a1[35];
        v13[8] = 0;
      }
      a1[35] = 0;
      free(v13);
    }
    uint64_t v14 = (void *)a1[20];
    if (v14)
    {
      a1[20] = 0;
      free(v14);
    }
  }
}

uint64_t fragManifold_EndTrack(uint64_t result, unsigned int *a2, uint64_t a3)
{
  uint64_t v3 = (void (*)(void, void, void, uint64_t))*((void *)a2 + 3);
  if (v3)
  {
    uint64_t v6 = result;
    *((void *)a2 + 3) = 0;
    uint64_t v7 = *(int *)(result + 32);
    *(_DWORD *)(result + 32) = 0;
    if ((int)v7 >= 1)
    {
      uint64_t v8 = v7;
      do
      {
        MEMORY[0x19970E2B0](*(void *)(v6 + 24));
        --v8;
      }
      while (v8);
    }
    v3(*(void *)(v6 + 8), *a2, *((void *)a2 + 4), a3);
    do
    {
      uint64_t result = MEMORY[0x19970E290](*(void *)(v6 + 24));
      int v9 = *(_DWORD *)(v6 + 32) + 1;
      *(_DWORD *)(v6 + 32) = v9;
    }
    while (v9 < (int)v7);
  }
  return result;
}

uint64_t fragManifold_UnprepareTracksForSampleEmission(uint64_t result)
{
  if (*(void *)(result + 160))
  {
    CFStringRef v1 = (uint64_t *)result;
    uint64_t result = MovieInformationGetTrackCount(*(void *)(result + 144));
    if (result >= 1)
    {
      uint64_t v2 = 0;
      for (uint64_t i = 0; i < result; ++i)
      {
        uint64_t v4 = v1[20];
        uint64_t v5 = *(void *)(v4 + v2 + 40);
        if (v5)
        {
          MovieTrackDisposeFragments(v5);
          uint64_t v4 = v1[20];
        }
        MovieSampleAccessorDispose(*(const void ***)(v4 + v2 + 168));
        *(void *)(v1[20] + v2 + 168) = 0;
        uint64_t result = MovieInformationGetTrackCount(v1[18]);
        v2 += 256;
      }
    }
    *(_DWORD *)(v1[18] + 184) = 0;
    v1[22] = 0;
    v1[23] = 0;
  }
  return result;
}

void fragManifold_TrackMetadataExtendedNotificationHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v16 = 0;
  uint64_t v15 = 0;
  if (a4)
  {
    if (a5)
    {
      uint64_t v8 = DerivedStorage;
      if (!MovieTrackGetBasicInfo(a4, 0, &v16)
        && !fragManifold_ObtainTrackByID((uint64_t *)v8, v16, &v15))
      {
        if (v15)
        {
          CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(a5, @"Metadata");
          if (Value)
          {
            uint64_t v10 = (const void **)&kFigMetadataFormat_QuickTimeUserData;
            if (*(unsigned char *)(v8 + 153)) {
              uint64_t v10 = (const void **)&kFigMetadataFormat_ISOUserData;
            }
            CFArrayRef v11 = (const __CFArray *)CFDictionaryGetValue(Value, *v10);
            if (v11 && CFArrayGetCount(v11) >= 1)
            {
              ConcatenationOfTwoArrays = (const void *)FigCFArrayCreateConcatenationOfTwoArrays();
              CFAllocatorRef v13 = ConcatenationOfTwoArrays;
              uint64_t v14 = *(const void **)(v15 + 144);
              *(void *)(v15 + 144) = ConcatenationOfTwoArrays;
              if (ConcatenationOfTwoArrays) {
                CFRetain(ConcatenationOfTwoArrays);
              }
              if (v14) {
                CFRelease(v14);
              }
              if (v13) {
                CFRelease(v13);
              }
            }
          }
        }
      }
    }
  }
}

uint64_t fragManifold_ObtainTrackByID(uint64_t *a1, int a2, void *a3)
{
  uint64_t v6 = (_DWORD *)a1[34];
  if (v6 && *v6 == a2 || (uint64_t v6 = (_DWORD *)a1[35]) != 0 && *v6 == a2)
  {
LABEL_11:
    if (!a3) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (MovieInformationGetTrackCount(a1[18]) < 1)
  {
LABEL_10:
    uint64_t v6 = 0;
    goto LABEL_11;
  }
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  while (1)
  {
    uint64_t v9 = a1[20];
    if (v9)
    {
      if (*(_DWORD *)(v9 + v7) == a2) {
        break;
      }
    }
    ++v8;
    v7 += 256;
    if (MovieInformationGetTrackCount(a1[18]) <= v8) {
      goto LABEL_10;
    }
  }
  uint64_t v6 = (_DWORD *)(v9 + v7);
  if (a3) {
LABEL_12:
  }
    *a3 = v6;
LABEL_13:
  if (v6) {
    return 0;
  }
  else {
    return 4294951254;
  }
}

uint64_t MovieFragmentManifoldInjectData(const void *a1, uint64_t a2, char a3, void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a4)
  {
    uint64_t v8 = DerivedStorage;
    CFRetain(a1);
    CFRetain(a4);
    MEMORY[0x19970E290](*(void *)(v8 + 24));
    ++*(_DWORD *)(v8 + 32);
    if (*(unsigned char *)v8 || *(unsigned char *)(v8 + 1))
    {
      uint64_t v9 = FigSignalErrorAt();
      goto LABEL_43;
    }
    *(_WORD *)(v8 + 1) = 1;
    if (a3)
    {
      uint64_t v9 = ConsumeBufferedBytes((CMBlockBufferRef *)v8, *(OpaqueCMBlockBuffer **)(v8 + 88));
      if (v9) {
        goto LABEL_43;
      }
      *(void *)(v8 + 72) = 0;
      fragManifold_UnprepareTracksForSampleEmission(v8);
      *(_DWORD *)(v8 + 112) = 0;
      *(unsigned char *)(v8 + 138) = 0;
    }
    CFTypeRef v10 = CMGetAttachment(a4, @"FMFD_BufferDecryptor", 0);
    CFTypeRef v11 = CMGetAttachment(a4, @"FMFD_BufferAudioDecryptor", 0);
    if (!FigCFEqual() || !FigCFEqual())
    {
      uint64_t v12 = *(const void **)(v8 + 248);
      *(void *)(v8 + 248) = v10;
      if (v10) {
        CFRetain(v10);
      }
      if (v12) {
        CFRelease(v12);
      }
      CFAllocatorRef v13 = *(const void **)(v8 + 256);
      *(void *)(v8 + 256) = v11;
      if (v11) {
        CFRetain(v11);
      }
      if (v13) {
        CFRelease(v13);
      }
      int v14 = *(unsigned __int8 *)(v8 + 264);
      *(unsigned char *)(v8 + 264) = 0;
      if (*(void *)(v8 + 248))
      {
        FigBasicAESCPECryptorGetClassID();
        if (CMBaseObjectIsMemberOfClass())
        {
          *(unsigned char *)(v8 + 264) = 1;
          if (MovieInformationGetTrackCount(*(void *)(v8 + 144)) >= 1)
          {
            uint64_t v15 = 0;
            uint64_t v16 = 0;
            do
            {
              uint64_t v9 = fragManifold_SetTrackLatestFormatDescription(v8, *(void *)(v8 + 160) + v15, *(CMFormatDescriptionRef *)(*(void *)(v8 + 160) + v15 + 64));
              if (v9) {
                goto LABEL_43;
              }
              uint64_t v9 = fragManifold_CallFormatDescriptionCallback(v8, (unsigned int *)(*(void *)(v8 + 160) + v15));
              if (v9) {
                goto LABEL_43;
              }
              ++v16;
              v15 += 256;
            }
            while (v16 < MovieInformationGetTrackCount(*(void *)(v8 + 144)));
          }
        }
        else if (*(void *)(v8 + 160) && MovieInformationGetTrackCount(*(void *)(v8 + 144)) >= 1)
        {
          uint64_t v17 = 0;
          uint64_t v18 = 0;
          do
          {
            uint64_t v19 = *(void *)(v8 + 160) + v17;
            *(unsigned char *)(v19 + 82) = 1;
            if (v14)
            {
              uint64_t v9 = fragManifold_SetTrackLatestFormatDescription(v8, v19, *(CMFormatDescriptionRef *)(v19 + 56));
              if (v9) {
                goto LABEL_43;
              }
            }
            ++v18;
            v17 += 256;
          }
          while (v18 < MovieInformationGetTrackCount(*(void *)(v8 + 144)));
        }
      }
    }
    if (!CMBlockBufferGetDataLength((CMBlockBufferRef)a4))
    {
LABEL_37:
      uint64_t v21 = 0;
LABEL_38:
      *(unsigned char *)(v8 + 1) = 0;
      --*(_DWORD *)(v8 + 32);
      MEMORY[0x19970E2B0](*(void *)(v8 + 24));
      CFRelease(a4);
      CFRelease(a1);
      return v21;
    }
    uint64_t v9 = fragManifold_PushBytes(v8, (OpaqueCMBlockBuffer *)a4);
    if (!v9)
    {
      if ((a3 & 2) != 0 && (*(void *)(v8 + 88) || *(void *)(v8 + 176)))
      {
        os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      goto LABEL_37;
    }
LABEL_43:
    uint64_t v21 = v9;
    goto LABEL_38;
  }

  return FigSignalErrorAt();
}

uint64_t MovieFragmentManifoldNoteStreamEnd(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFRetain(a1);
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 24));
  ++*(_DWORD *)(DerivedStorage + 32);
  if (*(unsigned char *)DerivedStorage)
  {
    uint64_t v5 = FigSignalErrorAt();
  }
  else
  {
    *(unsigned char *)(DerivedStorage + 2) = 1;
    fragManifold_EndAllTracks((uint64_t)a1, a2);
    uint64_t v5 = 0;
  }
  --*(_DWORD *)(DerivedStorage + 32);
  MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 24));
  CFRelease(a1);
  return v5;
}

uint64_t MovieFragmentManifoldCopyCurrentFormatDescriptionForTrack(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v6 = DerivedStorage;
  uint64_t v9 = 0;
  if (a3)
  {
    MEMORY[0x19970E290](*(void *)(DerivedStorage + 24));
    ++*(_DWORD *)(v6 + 32);
    if (*(unsigned char *)v6)
    {
      uint64_t v7 = 4294954511;
    }
    else
    {
      uint64_t v7 = fragManifold_ObtainTrackByID((uint64_t *)v6, a2, &v9);
      if (!v7) {
        *a3 = FigFormatDescriptionRetain();
      }
    }
  }
  else
  {
    uint64_t v7 = FigSignalErrorAt();
  }
  --*(_DWORD *)(v6 + 32);
  MEMORY[0x19970E2B0](*(void *)(v6 + 24));
  return v7;
}

uint64_t MovieFragmentManifoldInstallCallbacksForTrack(uint64_t a1, int a2, void *a3, uint64_t a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v13 = 0;
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 24));
  ++*(_DWORD *)(DerivedStorage + 32);
  if (a3 && *(unsigned char *)DerivedStorage)
  {
    uint64_t v11 = 4294954511;
  }
  else
  {
    uint64_t v8 = fragManifold_ObtainTrackByID((uint64_t *)DerivedStorage, a2, &v13);
    if (v8)
    {
      uint64_t v11 = v8;
    }
    else
    {
      uint64_t v9 = v13;
      CFTypeRef v10 = (void *)(v13 + 8);
      if (a3)
      {
        __copy_constructor_8_8_pa0_6124_0_pa0_43336_8_pa0_40812_16(v10, a3);
        uint64_t v9 = v13;
      }
      else
      {
        void *v10 = 0;
        v10[1] = 0;
        void v10[2] = 0;
      }
      uint64_t v11 = 0;
      *(void *)(v9 + 32) = a4;
    }
  }
  --*(_DWORD *)(DerivedStorage + 32);
  MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 24));
  return v11;
}

uint64_t MovieFragmentManifoldFlush()
{
  return 0;
}

uint64_t MovieFragmentManifoldCopyTrackProperty(uint64_t a1, int a2, const void *a3, const __CFAllocator *a4, void *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v19 = 0;
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 24));
  ++*(_DWORD *)(DerivedStorage + 32);
  if (*(unsigned char *)DerivedStorage)
  {
    uint64_t v12 = 4294954511;
    goto LABEL_24;
  }
  if (!*(void *)(DerivedStorage + 144))
  {
    uint64_t v12 = 4294954513;
    goto LABEL_24;
  }
  uint64_t v10 = fragManifold_ObtainTrackByID((uint64_t *)DerivedStorage, a2, &v19);
  if (v10)
  {
    uint64_t v12 = v10;
    goto LABEL_24;
  }
  if (*(void *)(v19 + 40))
  {
    if (CFEqual(a3, @"FMFD_TrackAudioPrimingDuration"))
    {
      if (*(_DWORD *)(v19 + 48) == 1936684398)
      {
        long long v16 = *(_OWORD *)(v19 + 120);
        *(void *)&long long v17 = *(void *)(v19 + 136);
        uint64_t v11 = CMTimeCopyAsDictionary((CMTime *)&v16, a4);
LABEL_20:
        uint64_t v12 = 0;
        *a5 = v11;
        goto LABEL_24;
      }
      goto LABEL_23;
    }
    if (CFEqual(a3, @"FMFD_TrackHasAudioDependencyInformation"))
    {
      int HasAudioDependencyInformation = MovieTrackHasAudioDependencyInformation(*(void *)(v19 + 40));
    }
    else if (CFEqual(a3, @"FMFD_TrackHasSeamSamples"))
    {
      int HasAudioDependencyInformation = MovieTrackHasSeamSamples(*(void *)(v19 + 40));
    }
    else if (CFEqual(a3, @"FMFD_TrackHasSampleEncryptionBox"))
    {
      int HasAudioDependencyInformation = MovieTrackIsSampleEncryptionAtomPresent(*(void *)(v19 + 40));
    }
    else
    {
      if (!CFEqual(a3, @"FMFD_TrackHasSampleAuxInfoBoxes"))
      {
        if (CFEqual(a3, @"FMFD_TrackMatrixArray"))
        {
          int v18 = 0;
          long long v16 = 0u;
          long long v17 = 0u;
          MovieTrackGetSpatialInformation(*(void *)(v19 + 40), 0, 0, (uint64_t)&v16);
          uint64_t v11 = FigMatrixToCFArray(a4, (uint64_t)&v16);
          goto LABEL_20;
        }
LABEL_23:
        uint64_t v12 = 4294954512;
        goto LABEL_24;
      }
      int HasAudioDependencyInformation = MovieTrackBothSampleAuxInfoAtomsPresent(*(void *)(v19 + 40));
    }
    int v14 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
    if (!HasAudioDependencyInformation) {
      int v14 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
    }
    uint64_t v11 = (void *)CFRetain(*v14);
    goto LABEL_20;
  }
  uint64_t v12 = 4294954509;
LABEL_24:
  --*(_DWORD *)(DerivedStorage + 32);
  MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 24));
  return v12;
}

uint64_t MovieFragmentReannounceUnregisteredTracks(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFRetain(a1);
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 24));
  ++*(_DWORD *)(DerivedStorage + 32);
  if (*(unsigned char *)DerivedStorage)
  {
    uint64_t v7 = 4294954511;
  }
  else
  {
    *(unsigned char *)(DerivedStorage + 2) = 0;
    if (MovieInformationGetTrackCount(*(void *)(DerivedStorage + 144)) < 1)
    {
LABEL_9:
      uint64_t v7 = 0;
    }
    else
    {
      uint64_t v3 = 0;
      uint64_t v4 = 0;
      while (1)
      {
        uint64_t v5 = *(void *)(DerivedStorage + 160) + v3;
        if (!*(void *)(v5 + 8) && !*(void *)(v5 + 16))
        {
          uint64_t v6 = fragManifold_CallNewTrackCallback(DerivedStorage, (unsigned int *)v5);
          if (v6) {
            break;
          }
          uint64_t v6 = fragManifold_CallFormatDescriptionCallback(DerivedStorage, (unsigned int *)v5);
          if (v6) {
            break;
          }
        }
        ++v4;
        v3 += 256;
        if (MovieInformationGetTrackCount(*(void *)(DerivedStorage + 144)) <= v4) {
          goto LABEL_9;
        }
      }
      uint64_t v7 = v6;
    }
  }
  --*(_DWORD *)(DerivedStorage + 32);
  MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 24));
  CFRelease(a1);
  return v7;
}

uint64_t fragManifold_PushBytes(uint64_t a1, OpaqueCMBlockBuffer *a2)
{
  uint64_t appended = CMBlockBufferAppendBufferReference(*(CMBlockBufferRef *)(a1 + 80), a2, 0, 0, 0);
  if (appended) {
    return appended;
  }
  Dataunint64_t Length = CMBlockBufferGetDataLength(*(CMBlockBufferRef *)(a1 + 80));
  uint64_t v5 = (const __CFAllocator **)MEMORY[0x1E4F1CF80];
  v379 = (CFTypeRef *)(a1 + 304);
  uint64_t v6 = (uint64_t *)MEMORY[0x1E4F1FDA8];
  uint64_t v7 = (uint64_t *)MEMORY[0x1E4F1FCF0];
  v389 = (CFTypeRef *)(a1 + 296);
  uint64_t v8 = (uint64_t *)MEMORY[0x1E4F1FCE8];
  uint64_t v9 = (uint64_t *)MEMORY[0x1E4F1FCF8];
  uint64_t v10 = (void **)MEMORY[0x1E4F1F200];
  uint64_t v11 = (void **)MEMORY[0x1E4F1CFD0];
  uint64_t v12 = (void **)MEMORY[0x1E4F1F208];
  uint64_t v13 = (const void **)MEMORY[0x1E4F1F1F8];
  int v14 = (const void **)MEMORY[0x1E4F1CFC8];
  uint64_t v15 = (const __CFString **)MEMORY[0x1E4F1F308];
  long long v16 = (void **)MEMORY[0x1E4F1F198];
  long long v17 = (void **)MEMORY[0x1E4F1F1A0];
  int v18 = (void **)MEMORY[0x1E4F1F190];
  uint64_t v19 = (void **)MEMORY[0x1E4F21A08];
  uint64_t v20 = (const __CFString **)MEMORY[0x1E4F21A20];
  uint64_t v21 = (void **)MEMORY[0x1E4F1F0F0];
  *(void *)(a1 + 88) = DataLength;
  CFAllocatorRef v22 = *v5;
  uint64_t v374 = *v7;
  uint64_t v376 = *v8;
  uint64_t v368 = *v9;
  v364 = *v10;
  unsigned int value = *v11;
  v366 = *v13;
  v367 = *v12;
  v365 = *v14;
  uint64_t v371 = *v6;
  kedouble y = *v15;
  v380 = *v17;
  v381 = *v16;
  v377 = *v18;
  v378 = *v19;
  CFStringRef v373 = *v20;
  v369 = *v21;
  CFAllocatorRef allocator = *v5;
  while (2)
  {
    switch(*(_DWORD *)(a1 + 112))
    {
      case 0:
        if (*(void *)(a1 + 88) < 8uLL) {
          return 0;
        }
        *(void *)&long long destination = 0;
        uint64_t appended = CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(a1 + 80), 0, 8uLL, &destination);
        if (appended) {
          return appended;
        }
        unsigned int v23 = destination;
        int v24 = bswap32(DWORD1(destination));
        *(_DWORD *)(a1 + 116) = v24;
        uint64_t v25 = bswap32(v23);
        *(void *)(a1 + 120) = v25;
        if (v25 <= 7) {
          return FigSignalErrorAt();
        }
        if (v24 > 1836019557)
        {
          if (v24 > 1936419183)
          {
            if (v24 == 1936419184 || v24 == 1970628964) {
              goto LABEL_457;
            }
            int v26 = 2003395685;
LABEL_456:
            if (v24 == v26)
            {
LABEL_457:
              *(_DWORD *)(a1 + 112) = 3;
              *(void *)(a1 + 128) = v25;
              goto LABEL_506;
            }
            goto LABEL_505;
          }
          if (v24 == 1836019558)
          {
            if (*(unsigned char *)(a1 + 137) && !*(unsigned char *)(a1 + 138))
            {
              *(unsigned char *)(a1 + 138) = 1;
              goto LABEL_505;
            }
          }
          else
          {
            if (v24 != 1836019574) {
              goto LABEL_505;
            }
            if (*(unsigned char *)(a1 + 136) && !*(unsigned char *)(a1 + 137))
            {
              *(unsigned char *)(a1 + 137) = 1;
              goto LABEL_505;
            }
          }
          return FigSignalErrorAt();
        }
        if (v24 <= 1718909295)
        {
          if (v24 != 1701671783)
          {
            int v26 = 1718773093;
            goto LABEL_456;
          }
LABEL_505:
          *(_DWORD *)(a1 + 112) = 1;
          goto LABEL_506;
        }
        if (v24 == 1718909296)
        {
          if (!*(unsigned char *)(a1 + 136))
          {
            *(unsigned char *)(a1 + 136) = 1;
            goto LABEL_505;
          }
        }
        else
        {
          if (v24 != 1835295092) {
            goto LABEL_505;
          }
          if (!*(unsigned char *)(a1 + 152) || *(unsigned char *)(a1 + 138))
          {
            *(void *)(a1 + 240) = *(void *)(a1 + 72) + v25;
            if (!*(void *)(a1 + 216))
            {
              *(void *)(a1 + 216) = 64;
              *(void *)(a1 + 224) = malloc_type_malloc(0x1200uLL, 0x1000040FF89C88EuLL);
              *(void *)(a1 + 232) = malloc_type_malloc(8 * *(void *)(a1 + 216), 0x100004000313F17uLL);
            }
            ConsumeBufferedBytes((CMBlockBufferRef *)a1, (OpaqueCMBlockBuffer *)8);
            if (*(void *)(a1 + 160))
            {
              TrackCFIndex Count = MovieInformationGetTrackCount(*(void *)(a1 + 144));
              uint64_t v263 = TrackCount;
              if (TrackCount >= 1)
              {
                uint64_t v264 = 0;
                uint64_t v265 = TrackCount;
                while (1)
                {
                  uint64_t v266 = *(void *)(a1 + 160) + v264;
                  uint64_t v267 = MovieSampleAccessorCreate(*(const void **)(a1 + 144), *(void *)(v266 + 40), (const void ***)(v266 + 168));
                  if (v267 && v267 != -12842) {
                    break;
                  }
                  if (*(void *)(v266 + 168))
                  {
                    uint64_t v267 = fragManifold_ObtainChunkInformation(v266);
                    if (v267) {
                      break;
                    }
                  }
                  v264 += 256;
                  if (!--v265) {
                    goto LABEL_475;
                  }
                }
                SampleDependencyAttributeDictionardouble y = v267;
                goto LABEL_731;
              }
LABEL_475:
              if (!v263)
              {
LABEL_478:
                *(unsigned char *)(a1 + 138) = 0;
                *(_DWORD *)(a1 + 112) = 2;
LABEL_506:
                LODWORD(v27) = 0;
                goto LABEL_719;
              }
              uint64_t v269 = fragManifold_SelectEligibleTrackForEmitting((uint64_t *)a1);
            }
            else
            {
              uint64_t v269 = FigSignalErrorAt();
            }
            SampleDependencyAttributeDictionardouble y = v269;
            if (v269)
            {
LABEL_731:
              fragManifold_UnprepareTracksForSampleEmission(a1);
              return SampleDependencyAttributeDictionary;
            }
            goto LABEL_478;
          }
        }
        return FigSignalErrorAt();
      case 1:
        size_t v249 = *(void *)(a1 + 120);
        if (*(void *)(a1 + 88) < v249) {
          return 0;
        }
        if (*(_DWORD *)(a1 + 116) != 1701671783)
        {
          lhs.unsigned int value = 0;
          uint64_t v259 = CMBlockBufferCreateWithBufferReference(v22, *(CMBlockBufferRef *)(a1 + 80), 0, v249, 0, (CMBlockBufferRef *)&lhs);
          if (!v259)
          {
            uint64_t v259 = MoovParseMovieLevelAtom();
            if (!v259)
            {
              int v260 = *(_DWORD *)(a1 + 116);
              if (v260 != 1836019574)
              {
                if (v260 == 1718909296)
                {
                  CMTimeValue v261 = lhs.value;
                  if (lhs.value) {
                    CMTimeValue v261 = (CMTimeValue)CFRetain((CFTypeRef)lhs.value);
                  }
                  *(void *)(a1 + 96) = v261;
                }
LABEL_486:
                v270 = *(unsigned char **)(a1 + 144);
                if (v270[81]) {
                  BOOL v271 = v270[82] == 0;
                }
                else {
                  BOOL v271 = v270[84] != 0;
                }
                *(unsigned char *)(a1 + 153) = v271;
                ConsumeBufferedBytes((CMBlockBufferRef *)a1, *(OpaqueCMBlockBuffer **)(a1 + 120));
                int v272 = *(_DWORD *)(a1 + 116);
                if (v272 != 1836019574) {
                  goto LABEL_638;
                }
                *(_DWORD *)(a1 + 312) = 0;
                *(unsigned char *)(a1 + 152) = MovieInformationCouldContainFragments(*(void *)(a1 + 144));
                if (!MovieInformationGetTrackCount(*(void *)(a1 + 144))
                  || (size_t v273 = MovieInformationGetTrackCount(*(void *)(a1 + 144)),
                      v274 = malloc_type_calloc(v273, 0x100uLL, 0x10E00401C2CD5CEuLL),
                      (*(void *)(a1 + 160) = v274) == 0))
                {
                  SampleDependencyAttributeDictionardouble y = FigSignalErrorAt();
                  if (SampleDependencyAttributeDictionary)
                  {
LABEL_605:
                    fragManifold_DisposeTracks((uint64_t *)a1);
                    goto LABEL_714;
                  }
                  goto LABEL_637;
                }
                uint64_t NthTrackOfType = MovieInformationFindNthTrackOfType(*(void *)(a1 + 144), 0, 1986618469);
                uint64_t v383 = NthTrackOfType;
                if (NthTrackOfType && (CFArrayRef v276 = MovieTrackCopyFormatDescriptionArray(NthTrackOfType)) != 0)
                {
                  CFArrayRef v277 = v276;
                  CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v276, 0);
                  if (ValueAtIndex) {
                    CFTypeRef cf = CFRetain(ValueAtIndex);
                  }
                  else {
                    CFTypeRef cf = 0;
                  }
                  CFRelease(v277);
                }
                else
                {
                  CFTypeRef cf = 0;
                }
                if (MovieInformationGetTrackCount(*(void *)(a1 + 144)) < 1)
                {
LABEL_577:
                  if (v383)
                  {
                    v319 = *(const void **)(a1 + 296);
                    if (*(int *)(a1 + 312) < 1)
                    {
                      if (v319)
                      {
                        CFRelease(*(CFTypeRef *)(a1 + 296));
                        CFTypeRef *v389 = 0;
                      }
                    }
                    else if (FigSampleAttachmentCollectorCreateSynchronous((uint64_t)v22, v319, 0, v379))
                    {
                      uint64_t v320 = FigSignalErrorAt();
                      if (v320)
                      {
                        SampleDependencyAttributeDictionardouble y = v320;
                        if (*v389)
                        {
                          CFRelease(*v389);
                          CFTypeRef *v389 = 0;
                        }
                        if (*v379)
                        {
                          CFRelease(*v379);
                          CFTypeRef *v379 = 0;
                        }
                        CFAllocatorRef v22 = allocator;
                        goto LABEL_602;
                      }
                    }
                  }
                  v321 = *(void (**)(void, void))(a1 + 56);
                  if (v321)
                  {
                    uint64_t v322 = *(int *)(a1 + 32);
                    *(_DWORD *)(a1 + 32) = 0;
                    if ((int)v322 >= 1)
                    {
                      uint64_t v323 = v322;
                      do
                      {
                        MEMORY[0x19970E2B0](*(void *)(a1 + 24));
                        --v323;
                      }
                      while (v323);
                      v321 = *(void (**)(void, void))(a1 + 56);
                    }
                    v321(*(void *)(a1 + 8), *(void *)(a1 + 48));
                    do
                    {
                      MEMORY[0x19970E290](*(void *)(a1 + 24));
                      int v324 = *(_DWORD *)(a1 + 32) + 1;
                      *(_DWORD *)(a1 + 32) = v324;
                    }
                    while (v324 < (int)v322);
                    if (*(unsigned char *)a1)
                    {
                      SampleDependencyAttributeDictionardouble y = 4294951251;
                    }
                    else if (*(unsigned char *)(a1 + 2))
                    {
                      SampleDependencyAttributeDictionardouble y = 4294951251;
                    }
                    else
                    {
                      SampleDependencyAttributeDictionardouble y = 0;
                    }
                  }
                  else
                  {
                    SampleDependencyAttributeDictionardouble y = 0;
                  }
                }
                else
                {
                  uint64_t v288 = 0;
                  while (1)
                  {
                    long long v387 = *MEMORY[0x1E4F1F9F8];
                    *(_OWORD *)&time1.unsigned int value = *MEMORY[0x1E4F1F9F8];
                    CMTimeEpoch v289 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
                    time1.CMTimeEpoch epoch = v289;
                    uint64_t v290 = *(void *)(a1 + 160);
                    CFTypeRef v291 = *(CFTypeRef *)(*(void *)(*(void *)(a1 + 144) + 320) + 8 * v288);
                    if (v291) {
                      CFTypeRef v291 = CFRetain(v291);
                    }
                    uint64_t v391 = v290;
                    uint64_t v292 = v290 + (v288 << 8);
                    *(void *)(v292 + 40) = v291;
                    v293 = (uint64_t *)(v292 + 40);
                    CMNotificationCenterGetDefaultLocalCenter();
                    FigNotificationCenterAddWeakListener();
                    v382 = (_DWORD *)(v292 + 48);
                    MovieTrackGetBasicInfo(*(void *)(v292 + 40), (_DWORD *)(v292 + 48), (_DWORD *)v292);
                    CFArrayRef v294 = MovieTrackCopyFormatDescriptionArray(*(void *)(v292 + 40));
                    if (v294)
                    {
                      CFArrayRef v295 = v294;
                      if (v383)
                      {
                        if (*v382 == 1835365473)
                        {
                          CFIndex Count = CFArrayGetCount(v294);
                          if (_os_feature_enabled_impl())
                          {
                            uint64_t v297 = *(void *)(a1 + 144);
                            uint64_t v298 = *(void *)(v297 + 328);
                            if (v298 >= 1)
                            {
                              v299 = (_DWORD *)(*(void *)(v297 + 344) + 8);
                              while (*(v299 - 1) != *(_DWORD *)v292
                                   || *(v299 - 2) != 1919837298
                                   || *v299 != *(_DWORD *)(v383 + 144))
                              {
                                v299 += 3;
                                if (!--v298) {
                                  goto LABEL_549;
                                }
                              }
                            }
                            if (Count >= 1)
                            {
                              if (!*v389
                                && FigSampleAttachmentCollectionRulesCopyForManifold((uint64_t)allocator, cf, v389))
                              {
                                uint64_t v318 = FigSignalErrorAt();
                                if (v318)
                                {
                                  SampleDependencyAttributeDictionardouble y = v318;
                                  goto LABEL_623;
                                }
                              }
                              else
                              {
                                for (CFIndex i = 0; i != Count; ++i)
                                {
                                  v301 = CFArrayGetValueAtIndex(v295, i);
                                  CFTypeRef v302 = *v389;
                                  uint64_t v303 = *(void *)(CMBaseObjectGetVTable() + 16);
                                  if (v303) {
                                    uint64_t v304 = v303;
                                  }
                                  else {
                                    uint64_t v304 = 0;
                                  }
                                  v305 = *(unsigned int (**)(CFTypeRef, const void *))(v304 + 8);
                                  if (v305 && v305(v302, v301))
                                  {
                                    *(unsigned char *)(v391 + (v288 << 8) + 176) = 1;
                                    ++*(_DWORD *)(a1 + 312);
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
LABEL_549:
                      if (CFArrayGetCount(v295) == 1)
                      {
                        v306 = (const opaqueCMFormatDescription *)CFArrayGetValueAtIndex(v295, 0);
                        uint64_t v307 = fragManifold_SetTrackLatestFormatDescription(a1, v292, v306);
                        if (v307)
                        {
                          SampleDependencyAttributeDictionardouble y = v307;
                          CFAllocatorRef v22 = allocator;
                          goto LABEL_600;
                        }
                      }
                      else
                      {
                        *(unsigned char *)(v391 + (v288 << 8) + 80) = 1;
                      }
                      CFRelease(v295);
                    }
                    uint64_t v308 = fragManifold_CallNewTrackCallback(a1, (unsigned int *)v292);
                    if (v308) {
                      break;
                    }
                    uint64_t v309 = v391 + (v288 << 8);
                    uint64_t v310 = MEMORY[0x1E4F1FA48];
                    *(_OWORD *)(v309 + 96) = *MEMORY[0x1E4F1FA48];
                    *(void *)(v309 + 112) = *(void *)(v310 + 16);
                    *(_OWORD *)(v309 + 120) = v387;
                    *(void *)(v309 + 136) = v289;
                    uint64_t v311 = *v293;
                    CFAllocatorRef v22 = allocator;
                    if (MovieTrackHasEditList(*v293) && MovieTrackGetEditSegmentCount(v311) == 1)
                    {
                      long long v312 = *(_OWORD *)(MEMORY[0x1E4F1FA00] + 48);
                      *(_OWORD *)&v402[16] = *(_OWORD *)(MEMORY[0x1E4F1FA00] + 32);
                      long long v403 = v312;
                      long long v313 = *(_OWORD *)(MEMORY[0x1E4F1FA00] + 80);
                      *(_OWORD *)v404 = *(_OWORD *)(MEMORY[0x1E4F1FA00] + 64);
                      *(_OWORD *)&v404[16] = v313;
                      long long v314 = *(_OWORD *)(MEMORY[0x1E4F1FA00] + 16);
                      long long destination = *MEMORY[0x1E4F1FA00];
                      *(_OWORD *)v402 = v314;
                      if (!MovieTrackGetEditSegmentWithIndex(v311, 0, &destination)
                        && (BYTE12(destination) & 1) != 0
                        && (v402[20] & 1) != 0
                        && !*(void *)&v402[24]
                        && (*(void *)&v402[8] & 0x8000000000000000) == 0
                        && (BYTE12(v403) & 1) != 0
                        && (v404[20] & 1) != 0
                        && !*(void *)&v404[24]
                        && (*(void *)&v404[8] & 0x8000000000000000) == 0)
                      {
                        CMTime time = *(CMTime *)&v402[8];
                        CMTime valuePtr = *(CMTime *)&v404[8];
                        if (!CMTimeCompare(&time, &valuePtr))
                        {
                          *(_OWORD *)&time.unsigned int value = v403;
                          time.CMTimeEpoch epoch = *(void *)v404;
                          *(_OWORD *)&valuePtr.unsigned int value = destination;
                          valuePtr.CMTimeEpoch epoch = *(void *)v402;
                          CMTimeSubtract(&time1, &time, &valuePtr);
                          long long v316 = *(_OWORD *)&time1.value;
                          *(void *)(v309 + 112) = time1.epoch;
                          *(_OWORD *)(v309 + 96) = v316;
                          if (*v382 == 1936684398)
                          {
                            CMTime time = time1;
                            CMTimeMultiply((CMTime *)&destination, &time, -1);
                            long long v317 = destination;
                            *(void *)(v309 + 136) = *(void *)v402;
                            *(_OWORD *)(v309 + 120) = v317;
                          }
                        }
                      }
                    }
                    if (*(void *)(v309 + 64) && (!*(unsigned char *)(a1 + 64) || !*(unsigned char *)(v391 + (v288 << 8) + 81)))
                    {
                      uint64_t v315 = fragManifold_CallFormatDescriptionCallback(a1, (unsigned int *)v292);
                      if (v315)
                      {
                        SampleDependencyAttributeDictionardouble y = v315;
                        CFArrayRef v295 = 0;
                        goto LABEL_600;
                      }
                    }
                    if (++v288 >= MovieInformationGetTrackCount(*(void *)(a1 + 144))) {
                      goto LABEL_577;
                    }
                  }
                  SampleDependencyAttributeDictionardouble y = v308;
                  CFArrayRef v295 = 0;
LABEL_623:
                  CFAllocatorRef v22 = allocator;
LABEL_600:
                  if (v295) {
                    CFRelease(v295);
                  }
                }
LABEL_602:
                if (cf) {
                  CFRelease(cf);
                }
                if (SampleDependencyAttributeDictionary) {
                  goto LABEL_605;
                }
LABEL_637:
                int v272 = *(_DWORD *)(a1 + 116);
LABEL_638:
                if ((v272 | 0x10) == 0x6D6F6F76)
                {
                  time1.unsigned int value = 0;
                  LODWORD(sampleBufferOut.CFArrayAppendValue(theArray, value) = 1819632756;
                  int LastMovieFragmentInformation = MovieInformationGetLastMovieFragmentInformation(*(void *)(a1 + 144), 0);
                  if (MovieInformationGetTrackCount(*(void *)(a1 + 144)) < 1)
                  {
                    CFNumberRef v331 = 0;
                    SampleDependencyAttributeDictionardouble y = 0;
LABEL_705:
                    if (MovieInformationGetTrackCount(*(void *)(a1 + 144)) >= 1)
                    {
                      uint64_t v359 = 0;
                      uint64_t v360 = 144;
                      do
                      {
                        uint64_t v361 = *(void *)(a1 + 160);
                        v362 = *(const void **)(v361 + v360);
                        if (v362)
                        {
                          CFRelease(v362);
                          *(void *)(v361 + v360) = 0;
                        }
                        ++v359;
                        v360 += 256;
                      }
                      while (v359 < MovieInformationGetTrackCount(*(void *)(a1 + 144)));
                    }
                    if (time1.value) {
                      CFRelease((CFTypeRef)time1.value);
                    }
                    if (v331) {
                      CFRelease(v331);
                    }
                    goto LABEL_714;
                  }
                  uint64_t v330 = 0;
                  CFNumberRef v331 = 0;
                  uint64_t v332 = 0;
                  while (1)
                  {
                    uint64_t v333 = *(void *)(a1 + 160);
                    if (*(_DWORD *)(v333 + v330 + 48) != 1936684398) {
                      goto LABEL_697;
                    }
                    if (*(unsigned char *)(a1 + 153))
                    {
                      if (LastMovieFragmentInformation)
                      {
                        CFArrayRef v334 = *(const __CFArray **)(v333 + v330 + 144);
                        if (!v334 || CFArrayGetCount(v334) < 1)
                        {
                          v340 = kFigISOUserDataKeyspace;
                          goto LABEL_658;
                        }
                        CFAllocatorRef v335 = CFGetAllocator(*(CFTypeRef *)(a1 + 144));
                        uint64_t v336 = FigMetadataReaderCreateForISOUserDataArray((uint64_t)v335, *(const void **)(v333 + v330 + 144), &time1);
                      }
                      else
                      {
                        uint64_t v336 = MovieTrackCreateISOUserDataReader(*(void *)(a1 + 144), *(uint64_t **)(v333 + v330 + 40), &time1);
                      }
                      SampleDependencyAttributeDictionardouble y = v336;
                      v340 = kFigISOUserDataKeyspace;
                      if (v336) {
                        goto LABEL_705;
                      }
                    }
                    else
                    {
                      if (LastMovieFragmentInformation)
                      {
                        CFArrayRef v337 = *(const __CFArray **)(v333 + v330 + 144);
                        if (!v337 || CFArrayGetCount(v337) < 1)
                        {
                          v340 = kFigUserDataKeyspace;
                          goto LABEL_658;
                        }
                        CFAllocatorRef v338 = CFGetAllocator(*(CFTypeRef *)(a1 + 144));
                        uint64_t v339 = FigMetadataReaderCreateForQuickTimeUserDataArray((uint64_t)v338, *(const void **)(v333 + v330 + 144), &time1);
                      }
                      else
                      {
                        uint64_t v339 = MovieTrackCreateQuickTimeUserDataReader(*(void *)(a1 + 144), *(uint64_t **)(v333 + v330 + 40), &time1);
                      }
                      SampleDependencyAttributeDictionardouble y = v339;
                      v340 = kFigUserDataKeyspace;
                      if (v339) {
                        goto LABEL_705;
                      }
                    }
LABEL_658:
                    CMTimeValue v341 = time1.value;
                    if (time1.value)
                    {
                      v342 = *v340;
                      if (v331)
                      {
                        *(void *)&long long destination = 0;
                        time.unsigned int value = 0;
                        LODWORD(rhs.CFArrayAppendValue(theArray, value) = 8;
                        valuePtr.unsigned int value = 0;
                        goto LABEL_662;
                      }
                      CFNumberRef v331 = CFNumberCreate(allocator, kCFNumberSInt32Type, &sampleBufferOut);
                      CMTimeValue v341 = time1.value;
                      *(void *)&long long destination = 0;
                      time.unsigned int value = 0;
                      LODWORD(rhs.CFArrayAppendValue(theArray, value) = 8;
                      valuePtr.unsigned int value = 0;
                      if (time1.value)
                      {
LABEL_662:
                        uint64_t v343 = *(void *)(CMBaseObjectGetVTable() + 16);
                        if (v343) {
                          uint64_t v344 = v343;
                        }
                        else {
                          uint64_t v344 = 0;
                        }
                        v345 = *(uint64_t (**)(CMTimeValue, __CFString *, CFNumberRef))(v344 + 40);
                        if (v345)
                        {
                          CFNumberRef v388 = v331;
                          uint64_t v346 = v345(v341, v342, v331);
                          uint64_t v347 = v346 - 1;
                          if (v346 < 1
                            || ((int v348 = MovieInformationGetLastMovieFragmentInformation(*(void *)(a1 + 144), 0),
                                 CFAllocatorRef v349 = CFGetAllocator(*(CFTypeRef *)(a1 + 144)),
                                 (uint64_t v350 = *(void *)(CMBaseObjectGetVTable() + 16)) == 0)
                              ? (uint64_t v351 = 0)
                              : (uint64_t v351 = v350),
                                (v352 = *(unsigned int (**)(CMTimeValue, __CFString *, const __CFNumber *, uint64_t, CFAllocatorRef, long long *, void))(v351 + 48)) == 0
                             || v352(v341, v342, v388, v347, v349, &destination, 0)))
                          {
                            CFAllocatorRef v22 = allocator;
                            goto LABEL_688;
                          }
                          CFAllocatorRef v22 = allocator;
                          if ((void)destination)
                          {
                            CFTypeID v353 = CFGetTypeID((CFTypeRef)destination);
                            if (v353 == CFDataGetTypeID())
                            {
                              uint64_t v354 = v333 + v330;
                              if ((!*(void *)(v333 + v330 + 152) || v348)
                                && !AudioFormatGetProperty(0x6C646C62u, 8u, &destination, (UInt32 *)&rhs, &time)
                                && !FigCFEqual())
                              {
                                CFAllocatorRef v355 = CFGetAllocator(*(CFTypeRef *)(a1 + 144));
                                if (!CMSampleBufferCreate(v355, 0, 1u, 0, 0, 0, 0, 0, 0, 0, 0, (CMSampleBufferRef *)&valuePtr))
                                {
                                  CMSetAttachment((CMAttachmentBearerRef)valuePtr.value, v373, (CFTypeRef)time.value, 0);
                                  if (!fragManifold_CallPushSampleCallback(a1, (unsigned int *)(v333 + v330), 0, valuePtr.value))
                                  {
                                    v356 = *(const void **)(v354 + 152);
                                    v357 = (const void *)time.value;
                                    *(void *)(v354 + 152) = time.value;
                                    if (v357) {
                                      CFRetain(v357);
                                    }
                                    if (v356) {
                                      CFRelease(v356);
                                    }
                                    int v358 = 1836019574;
                                    if (v348) {
                                      int v358 = 1836019558;
                                    }
                                    *(_DWORD *)(v333 + v330 + 160) = v358;
                                  }
                                }
                              }
                            }
LABEL_688:
                            CFNumberRef v331 = v388;
LABEL_691:
                            if ((void)destination) {
                              CFRelease((CFTypeRef)destination);
                            }
                          }
                          else
                          {
                            CFNumberRef v331 = v388;
                          }
                          if (time.value) {
                            CFRelease((CFTypeRef)time.value);
                          }
                          if (valuePtr.value) {
                            CFRelease((CFTypeRef)valuePtr.value);
                          }
LABEL_697:
                          if (time1.value)
                          {
                            CFRelease((CFTypeRef)time1.value);
                            time1.unsigned int value = 0;
                          }
                          goto LABEL_699;
                        }
                      }
                      else
                      {
                        FigSignalErrorAt();
                      }
                      CFAllocatorRef v22 = allocator;
                      goto LABEL_691;
                    }
LABEL_699:
                    ++v332;
                    v330 += 256;
                    if (v332 >= MovieInformationGetTrackCount(*(void *)(a1 + 144)))
                    {
                      SampleDependencyAttributeDictionardouble y = 0;
                      goto LABEL_705;
                    }
                  }
                }
                SampleDependencyAttributeDictionardouble y = 0;
LABEL_714:
                v329 = (const void *)lhs.value;
                if (!lhs.value) {
                  goto LABEL_716;
                }
                goto LABEL_715;
              }
              uint64_t v259 = CMBlockBufferAppendBufferReference(*(CMBlockBufferRef *)(a1 + 96), (CMBlockBufferRef)lhs.value, 0, 0, 0);
              if (!v259) {
                goto LABEL_486;
              }
            }
          }
          SampleDependencyAttributeDictionardouble y = v259;
          goto LABEL_714;
        }
        lhs.unsigned int value = 0;
        rhs.unsigned int value = 0;
        uint64_t v250 = CMBlockBufferCreateWithBufferReference(v22, *(CMBlockBufferRef *)(a1 + 80), 0, v249, 0, (CMBlockBufferRef *)&lhs);
        if (v250)
        {
          SampleDependencyAttributeDictionardouble y = v250;
          goto LABEL_617;
        }
        uint64_t EMSGInformation = EMSGParseEventMessageAtomAndCreateEMSGInformation(lhs.value, (uint64_t)&rhs);
        if (!EMSGInformation
          || (SampleDependencyAttributeDictionardouble y = EMSGInformation, EMSGInformation == -17873))
        {
          ConsumeBufferedBytes((CMBlockBufferRef *)a1, *(OpaqueCMBlockBuffer **)(a1 + 120));
          CMTimeValue v252 = rhs.value;
          if (!rhs.value)
          {
            SampleDependencyAttributeDictionardouble y = 0;
            goto LABEL_617;
          }
          valuePtr.unsigned int value = 0;
          uint64_t v253 = *(void *)(a1 + 280);
          if (v253)
          {
            SampleDependencyAttributeDictionardouble y = 0;
LABEL_517:
            if (*(void *)(v253 + 16))
            {
              time1.unsigned int value = CMBlockBufferGetDataLength(*(CMBlockBufferRef *)(v252 + 56));
              *(void *)v404 = *(void *)(MEMORY[0x1E4F1FA70] + 64);
              long long v284 = *(_OWORD *)(MEMORY[0x1E4F1FA70] + 48);
              *(_OWORD *)&v402[16] = *(_OWORD *)(MEMORY[0x1E4F1FA70] + 32);
              long long v403 = v284;
              long long v285 = *(_OWORD *)(MEMORY[0x1E4F1FA70] + 16);
              long long destination = *MEMORY[0x1E4F1FA70];
              *(_OWORD *)v402 = v285;
              int64_t v286 = *(void *)(v252 + 28);
              if (v286 == 0xFFFFFFFFLL)
              {
                v287 = (long long *)MEMORY[0x1E4F1F9F8];
                long long destination = *MEMORY[0x1E4F1F9F8];
                *(void *)v402 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
              }
              else
              {
                CMTimeMake((CMTime *)&destination, v286, *(_DWORD *)(v252 + 16));
                v287 = (long long *)MEMORY[0x1E4F1F9F8];
              }
              CMTimeMake(&time, *(void *)(v252 + 20), *(_DWORD *)(v252 + 16));
              *(CMTime *)&v402[8] = time;
              *(void *)v404 = *((void *)v287 + 2);
              long long v403 = *v287;
              uint64_t v325 = CMSampleBufferCreate(v22, *(CMBlockBufferRef *)(v252 + 56), 1u, 0, 0, *(CMFormatDescriptionRef *)(*(void *)(a1 + 280) + 64), 1, 1, (const CMSampleTimingInfo *)&destination, 1, (const size_t *)&time1, (CMSampleBufferRef *)&valuePtr);
              if (v325)
              {
                SampleDependencyAttributeDictionardouble y = v325;
                CFMutableDictionaryRef Mutable = 0;
              }
              else
              {
                CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v22, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                if (Mutable)
                {
                  FigCFDictionarySetValue();
                  FigCFDictionarySetValue();
                  FigCFDictionarySetInt32();
                  SampleAttachmentsArradouble y = CMSampleBufferGetSampleAttachmentsArray((CMSampleBufferRef)valuePtr.value, 1u);
                  if (SampleAttachmentsArray)
                  {
                    CFArrayGetValueAtIndex(SampleAttachmentsArray, 0);
                    FigCFDictionarySetValue();
                  }
                  uint64_t v328 = fragManifold_CallPushSampleCallback(a1, *(unsigned int **)(a1 + 280), 0, valuePtr.value);
                }
                else
                {
                  uint64_t v328 = FigSignalErrorAt();
                }
                SampleDependencyAttributeDictionardouble y = v328;
              }
              if (valuePtr.value) {
                CFRelease((CFTypeRef)valuePtr.value);
              }
              if (Mutable) {
                CFRelease(Mutable);
              }
            }
            goto LABEL_617;
          }
          *(void *)&long long destination = 0;
          int v279 = MovieInformationGetTrackCount(*(void *)(a1 + 144));
          do
            ++v279;
          while (fragManifold_ObtainTrackByID((uint64_t *)a1, v279, 0) != -16042);
          v280 = CFDictionaryCreateMutable(v22, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          if (v280)
          {
            CFDictionaryRef v281 = v280;
            CFDictionarySetValue(v280, v369, *(const void **)(v252 + 48));
            uint64_t v282 = CMFormatDescriptionCreate(v22, 0x6D657461u, 0x656D7367u, v281, (CMFormatDescriptionRef *)&destination);
            if (!v282)
            {
              v283 = malloc_type_calloc(1uLL, 0x100uLL, 0x10E00401C2CD5CEuLL);
              *(void *)(a1 + 280) = v283;
              if (v283)
              {
                _DWORD *v283 = v279;
                v283[12] = 1835365473;
                fragManifold_SetTrackLatestFormatDescription(a1, (uint64_t)v283, (CMFormatDescriptionRef)destination);
                uint64_t v282 = fragManifold_CallNewTrackCallback(a1, *(unsigned int **)(a1 + 280));
                if (!v282) {
                  uint64_t v282 = fragManifold_CallFormatDescriptionCallback(a1, *(unsigned int **)(a1 + 280));
                }
              }
              else
              {
                uint64_t v282 = FigSignalErrorAt();
              }
            }
            SampleDependencyAttributeDictionardouble y = v282;
            CFRelease(v281);
            if ((void)destination) {
              CFRelease((CFTypeRef)destination);
            }
          }
          else
          {
            SampleDependencyAttributeDictionardouble y = FigSignalErrorAt();
          }
          uint64_t v253 = *(void *)(a1 + 280);
          if (v253) {
            goto LABEL_517;
          }
        }
LABEL_617:
        if (lhs.value) {
          CFRelease((CFTypeRef)lhs.value);
        }
        v329 = (const void *)rhs.value;
        if (rhs.value) {
LABEL_715:
        }
          CFRelease(v329);
LABEL_716:
        if (!SampleDependencyAttributeDictionary)
        {
LABEL_717:
          LODWORD(v27) = 0;
          goto LABEL_718;
        }
        return SampleDependencyAttributeDictionary;
      case 2:
        uint64_t v27 = *(void *)(a1 + 168);
        if (!v27)
        {
          uint64_t appended = FigSignalErrorAt();
          if (!appended) {
            goto LABEL_719;
          }
          return appended;
        }
        long long v28 = 0;
        unsigned __int8 v390 = 0;
        CFTypeRef v29 = 0;
        long long v30 = (long long *)MEMORY[0x1E4F1F9F8];
        while (2)
        {
          uint64_t v31 = *(void *)(a1 + 176);
          if (!v31)
          {
            uint64_t v413 = 0;
            uint64_t v414 = 0;
            uint64_t v32 = *(void *)(v27 + 168);
            if (!v32) {
              goto LABEL_408;
            }
            if (*(_DWORD *)(v27 + 48) == 1936684398)
            {
              CMTime time = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
              uint64_t v400 = 0;
              memset(&valuePtr, 0, sizeof(valuePtr));
              long long v33 = *(_OWORD *)(v32 + 80);
              long long v35 = *(_OWORD *)(v32 + 32);
              long long v34 = *(_OWORD *)(v32 + 48);
              *(_OWORD *)v404 = *(_OWORD *)(v32 + 64);
              *(_OWORD *)&v404[16] = v33;
              *(_OWORD *)&v402[16] = v35;
              long long v403 = v34;
              long long v36 = *(_OWORD *)(v32 + 144);
              long long v38 = *(_OWORD *)(v32 + 96);
              long long v37 = *(_OWORD *)(v32 + 112);
              long long v407 = *(_OWORD *)(v32 + 128);
              long long v408 = v36;
              long long v405 = v38;
              long long v406 = v37;
              long long v40 = *(_OWORD *)(v32 + 176);
              long long v39 = *(_OWORD *)(v32 + 192);
              long long v41 = *(_OWORD *)(v32 + 160);
              uint64_t v412 = *(void *)(v32 + 208);
              long long v410 = v40;
              long long v411 = v39;
              long long v409 = v41;
              long long v42 = *(_OWORD *)(v32 + 16);
              long long destination = *(_OWORD *)v32;
              *(_OWORD *)v402 = v42;
              if (*(void *)(a1 + 216) < *(void *)(v27 + 200))
              {
                free(*(void **)(a1 + 224));
                free(*(void **)(a1 + 232));
                uint64_t v43 = *(void *)(v27 + 200) + 16;
                *(void *)(a1 + 216) = v43;
                *(void *)(a1 + 224) = malloc_type_malloc(72 * v43, 0x1000040FF89C88EuLL);
                *(void *)(a1 + 232) = malloc_type_malloc(8 * *(void *)(a1 + 216), 0x100004000313F17uLL);
              }
              if (*(unsigned char *)(v27 + 209))
              {
                long long v44 = *(CMTime **)(a1 + 224);
                MovieSampleAccessorGetDTS((uint64_t)&destination, &lhs);
                CMTime rhs = *(CMTime *)(v27 + 96);
                CMTimeAdd(&time1, &lhs, &rhs);
                v44[2] = time1;
                long long v45 = *(CMTime **)(a1 + 224);
                MovieSampleAccessorGetPTS((uint64_t)&destination, &sampleBufferOut);
                CMTime rhs = *(CMTime *)(v27 + 96);
                CMTimeAdd(&time1, &sampleBufferOut, &rhs);
                v45[1] = time1;
                uint64_t v46 = *(void *)(a1 + 224);
                CMTime valuePtr = *(CMTime *)(v27 + 212);
                CMTimeEpoch epoch = valuePtr.epoch;
                *(_OWORD *)uint64_t v46 = *(_OWORD *)&valuePtr.value;
                *(void *)(v46 + 16) = epoch;
                uint64_t v48 = 1;
              }
              else
              {
                uint64_t v48 = 0;
              }
              *(void *)(a1 + 200) = v48;
              if (*(unsigned char *)(v27 + 208))
              {
                uint64_t v400 = *(void *)(v27 + 240);
                **(void **)(a1 + 232) = v400;
                uint64_t v53 = 1;
              }
              else
              {
                uint64_t v53 = 0;
              }
              *(void *)(a1 + 208) = v53;
              uint64_t SampleLocation = MovieSampleAccessorGetSampleLocation((uint64_t)&destination, &v413, 0, 0);
              if (SampleLocation)
              {
                SampleDependencyAttributeDictionardouble y = SampleLocation;
LABEL_629:
                LODWORD(v27) = 0;
                char v254 = 1;
                if (v29) {
                  goto LABEL_439;
                }
                goto LABEL_440;
              }
              CFTypeRef v384 = v29;
              uint64_t v55 = *(void *)(v27 + 248);
              if (v55 < *(void *)(v27 + 200))
              {
                uint64_t v52 = 0;
                uint64_t v56 = 0;
                CMTimeEpoch v57 = (_OWORD *)(v27 + 96);
                while (1)
                {
                  CMTime time1 = time;
                  *(_OWORD *)&rhs.unsigned int value = fragManifold_ComputeSampleDetails_kMinAudioTime;
                  rhs.CMTimeEpoch epoch = 0;
                  if ((CMTimeCompare(&time1, &rhs) & 0x80000000) == 0) {
                    goto LABEL_41;
                  }
                  if (!*(unsigned char *)(v27 + 209))
                  {
                    uint64_t v58 = *(void *)(a1 + 224) + 72 * *(void *)(a1 + 200);
                    MovieSampleAccessorGetDTS((uint64_t)&destination, &v397);
                    *(_OWORD *)&rhs.unsigned int value = *v57;
                    rhs.CMTimeEpoch epoch = *(void *)(v27 + 112);
                    CMTimeAdd(&time1, &v397, &rhs);
                    long long v59 = *(_OWORD *)&time1.value;
                    *(void *)(v58 + 64) = time1.epoch;
                    *(_OWORD *)(v58 + 48) = v59;
                    uint64_t v60 = *(void *)(a1 + 224) + 72 * *(void *)(a1 + 200);
                    MovieSampleAccessorGetPTS((uint64_t)&destination, &v396);
                    *(_OWORD *)&rhs.unsigned int value = *v57;
                    rhs.CMTimeEpoch epoch = *(void *)(v27 + 112);
                    CMTimeAdd(&time1, &v396, &rhs);
                    long long v61 = *(_OWORD *)&time1.value;
                    *(void *)(v60 + 40) = time1.epoch;
                    *(_OWORD *)(v60 + 24) = v61;
                    uint64_t SampleDuration = MovieSampleAccessorGetSampleDuration((uint64_t)&destination, &valuePtr);
                    if (SampleDuration) {
                      goto LABEL_624;
                    }
                    uint64_t v63 = *(void *)(a1 + 224) + 72 * *(void *)(a1 + 200);
                    long long v64 = *(_OWORD *)&valuePtr.value;
                    *(void *)(v63 + 16) = valuePtr.epoch;
                    *(_OWORD *)uint64_t v63 = v64;
                    ++*(void *)(a1 + 200);
                    long long v30 = (long long *)MEMORY[0x1E4F1F9F8];
                  }
                  if (!*(unsigned char *)(v27 + 208))
                  {
                    uint64_t SampleDuration = MovieSampleAccessorGetSampleLocation((uint64_t)&destination, 0, (unint64_t)&v400, 0);
                    if (SampleDuration)
                    {
LABEL_624:
                      SampleDependencyAttributeDictionardouble y = SampleDuration;
                      CFAllocatorRef v22 = allocator;
                      CFTypeRef v29 = v384;
                      goto LABEL_629;
                    }
                    *(void *)(*(void *)(a1 + 232) + 8 * (*(void *)(a1 + 208))++) = v400;
                  }
                  CMTime time1 = time;
                  CMTime rhs = valuePtr;
                  CMTimeAdd(&time, &time1, &rhs);
                  v52 += v400;
                  uint64_t v414 = v52;
                  ++v56;
                  MovieSampleAccessorStepCursor((uint64_t)&destination, 1, 0);
                  if (v55 + v56 >= *(void *)(v27 + 200)) {
                    goto LABEL_41;
                  }
                }
              }
              uint64_t v52 = 0;
              uint64_t v56 = 0;
LABEL_41:
              *(void *)(a1 + 192) = v56;
              CFAllocatorRef v22 = allocator;
              CFTypeRef v29 = v384;
            }
            else
            {
              uint64_t v49 = MovieSampleAccessorGetSampleLocation(v32, &v413, (unint64_t)&v414, 0);
              if (v49) {
                goto LABEL_628;
              }
              *(int64x2_t *)(a1 + 192) = vdupq_n_s64(1uLL);
              *(void *)(a1 + 208) = 1;
              **(void **)(a1 + 232) = v414;
              uint64_t v50 = *(void *)(a1 + 224);
              MovieSampleAccessorGetDTS(*(void *)(v27 + 168), &v395);
              CMTime time = *(CMTime *)(v27 + 96);
              CMTimeAdd((CMTime *)&destination, &v395, &time);
              *(_OWORD *)(v50 + 48) = destination;
              *(void *)(v50 + 64) = *(void *)v402;
              uint64_t v51 = *(void *)(a1 + 224);
              MovieSampleAccessorGetPTS(*(void *)(v27 + 168), &v394);
              CMTime time = *(CMTime *)(v27 + 96);
              CMTimeAdd((CMTime *)&destination, &v394, &time);
              *(_OWORD *)(v51 + 24) = destination;
              *(void *)(v51 + 40) = *(void *)v402;
              uint64_t v49 = MovieSampleAccessorGetSampleDuration(*(void *)(v27 + 168), *(CMTime **)(a1 + 224));
              if (v49)
              {
LABEL_628:
                SampleDependencyAttributeDictionardouble y = v49;
                goto LABEL_629;
              }
              uint64_t v52 = v414;
            }
            if (v52)
            {
              uint64_t v65 = *(void *)(a1 + 72);
              uint64_t v66 = v413 - v65;
              if (v413 == v65 || v413 > v65)
              {
                SampleDependencyAttributeDictionardouble y = 0;
              }
              else
              {
                SampleDependencyAttributeDictionardouble y = FigSignalErrorAt();
                uint64_t v66 = 0;
                uint64_t v52 = v414;
              }
              *(void *)(a1 + 176) = v52;
              *(void *)(a1 + 184) = v66;
              if (SampleDependencyAttributeDictionary) {
                goto LABEL_626;
              }
            }
            else
            {
LABEL_408:
              SampleDependencyAttributeDictionardouble y = FigSignalErrorAt();
              if (SampleDependencyAttributeDictionary) {
                goto LABEL_626;
              }
            }
            uint64_t v31 = *(void *)(a1 + 176);
          }
          if (*(void *)(a1 + 88) < (unint64_t)(*(void *)(a1 + 184) + v31)) {
            goto LABEL_436;
          }
          uint64_t v68 = *(void *)(a1 + 168);
          if (*(unsigned char *)(v68 + 80))
          {
            *(void *)&long long destination = 0;
            uint64_t FormatDescription = MovieSampleAccessorGetFormatDescription(*(void *)(v68 + 168), (const void **)&destination);
            if (FormatDescription) {
              goto LABEL_625;
            }
            if (!FigCFEqual())
            {
              uint64_t FormatDescription = fragManifold_SetTrackLatestFormatDescription(a1, *(void *)(a1 + 168), (CMFormatDescriptionRef)destination);
              if (FormatDescription) {
                goto LABEL_625;
              }
              uint64_t v70 = *(void *)(a1 + 168);
              uint64_t v71 = *(const void **)(v70 + 72);
              uint64_t v72 = (const void *)destination;
              *(void *)(v70 + 72) = destination;
              if (v72) {
                CFRetain(v72);
              }
              if (v71) {
                CFRelease(v71);
              }
              uint64_t FormatDescription = fragManifold_CallFormatDescriptionCallback(a1, *(unsigned int **)(a1 + 168));
              if (FormatDescription)
              {
LABEL_625:
                SampleDependencyAttributeDictionardouble y = FormatDescription;
                goto LABEL_626;
              }
            }
            uint64_t v68 = *(void *)(a1 + 168);
          }
          int v73 = *(unsigned __int8 *)(v68 + 176);
          if (!(v73 | (*(void *)(v68 + 16) != 0))) {
            goto LABEL_266;
          }
          rhs.unsigned int value = 0;
          sampleBufferOut.unsigned int value = 0;
          v397.unsigned int value = 0;
          v396.unsigned int value = 0;
          v395.unsigned int value = 0;
          v394.unsigned int value = 0;
          if (!*(unsigned char *)(a1 + 264)) {
            goto LABEL_170;
          }
          if (!*(unsigned char *)(v68 + 83))
          {
            uint64_t v81 = *(void *)(v68 + 88);
            if (!v81) {
              goto LABEL_170;
            }
            if (*(unsigned char *)(v68 + 85))
            {
              uint64_t v82 = *(void *)(a1 + 248);
              uint64_t v83 = *(void *)(v68 + 56);
              uint64_t v84 = *(void *)(CMBaseObjectGetVTable() + 8);
              if (v84) {
                uint64_t v85 = v84;
              }
              else {
                uint64_t v85 = 0;
              }
              uint64_t v105 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v85 + 56);
              if (!v105)
              {
LABEL_117:
                unsigned __int8 v390 = 0;
                SampleDependencyAttributeDictionardouble y = 4294954514;
                goto LABEL_252;
              }
              uint64_t ContiguousBlockBuffer = v105(v82, v368, v83);
              if (ContiguousBlockBuffer) {
                goto LABEL_404;
              }
              uint64_t v81 = *(void *)(v68 + 88);
            }
            uint64_t v106 = *(void *)(a1 + 248);
            uint64_t v107 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v107) {
              uint64_t v108 = v107;
            }
            else {
              uint64_t v108 = 0;
            }
            CMTimeEpoch v109 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v108 + 56);
            if (!v109) {
              goto LABEL_117;
            }
            SampleDependencyAttributeDictionardouble y = v109(v106, v376, v81);
            if (SampleDependencyAttributeDictionary) {
              goto LABEL_103;
            }
            uint64_t v110 = *(void *)(a1 + 248);
            *(void *)&long long destination = 0;
            time.unsigned int value = 0;
            if (!v110 || *(unsigned char *)(v68 + 83)) {
              goto LABEL_130;
            }
            uint64_t v111 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v111) {
              uint64_t v112 = v111;
            }
            else {
              uint64_t v112 = 0;
            }
            CMTime v113 = *(uint64_t (**)(uint64_t, uint64_t, const __CFAllocator *, long long *))(v112 + 48);
            if (v113)
            {
              uint64_t v114 = v113(v110, v371, v22, &destination);
              if (v114) {
                goto LABEL_128;
              }
              CMTime v115 = (const void *)destination;
              if ((void)destination)
              {
                SampleDependencyAttributeDictionardouble y = 0;
                goto LABEL_131;
              }
              uint64_t v114 = FigParseHLSfMP4SecurityInfoFromFormatDescriptionAndCopyIV(*(const opaqueCMFormatDescription **)(v68 + 56), 0, 0, 0, 0, &time);
              if (v114) {
                goto LABEL_128;
              }
              CMTimeValue v116 = time.value;
              uint64_t v117 = *(void *)(CMBaseObjectGetVTable() + 8);
              if (v117) {
                uint64_t v118 = v117;
              }
              else {
                uint64_t v118 = 0;
              }
              CFRange v119 = *(uint64_t (**)(uint64_t, uint64_t, CMTimeValue))(v118 + 56);
              if (v119)
              {
                uint64_t v114 = v119(v110, v371, v116);
LABEL_128:
                SampleDependencyAttributeDictionardouble y = v114;
LABEL_130:
                CMTime v115 = (const void *)destination;
                if ((void)destination) {
LABEL_131:
                }
                  CFRelease(v115);
                if (time.value) {
                  CFRelease((CFTypeRef)time.value);
                }
                if (SampleDependencyAttributeDictionary) {
                  goto LABEL_103;
                }
                uint64_t v120 = *(void *)(a1 + 192);
                if (v120 == 1)
                {
                  uint64_t ContiguousBlockBuffer = FigMemoryPoolCreateContiguousBlockBuffer();
                  if (ContiguousBlockBuffer) {
                    goto LABEL_404;
                  }
                  size_t v121 = CMBlockBufferGetDataLength((CMBlockBufferRef)v397.value);
                  size_t v122 = CMBlockBufferGetDataLength((CMBlockBufferRef)v397.value);
                  uint64_t ContiguousBlockBuffer = CMBlockBufferCreateWithMemoryBlock(v22, 0, v121, v22, 0, 0, v122, 1u, (CMBlockBufferRef *)&rhs);
                  if (ContiguousBlockBuffer) {
                    goto LABEL_404;
                  }
                  CFTypeRef v123 = v29;
                  uint64_t v124 = *(void *)(a1 + 248);
                  CMTimeValue v125 = v397.value;
                  CMTimeValue v126 = rhs.value;
                  uint64_t v127 = *(void **)(CMBaseObjectGetVTable() + 16);
                  if (v127) {
                    __int16 v128 = v127;
                  }
                  else {
                    __int16 v128 = 0;
                  }
                  if (*v128 < 4uLL
                    || (long long v245 = (uint64_t (*)(uint64_t, CMTimeValue, CMTimeValue))v128[4]) == 0)
                  {
                    unsigned __int8 v390 = 0;
                    SampleDependencyAttributeDictionardouble y = 4294954514;
                    CFTypeRef v29 = v123;
                    goto LABEL_252;
                  }
                  uint64_t ContiguousBlockBuffer = v245(v124, v125, v126);
                  CFTypeRef v29 = v123;
                  if (ContiguousBlockBuffer)
                  {
LABEL_404:
                    SampleDependencyAttributeDictionardouble y = ContiguousBlockBuffer;
                    goto LABEL_103;
                  }
                }
                else
                {
                  *(void *)&long long destination = 0;
                  time.unsigned int value = 0;
                  valuePtr.unsigned int value = 0;
                  Emptdouble y = CMBlockBufferCreateEmpty(v22, v120, 0, (CMBlockBufferRef *)&destination);
                  if (Empty)
                  {
                    SampleDependencyAttributeDictionardouble y = Empty;
                  }
                  else
                  {
                    CFTypeRef v385 = v29;
                    if (*(uint64_t *)(a1 + 192) < 1)
                    {
LABEL_159:
                      SampleDependencyAttributeDictionardouble y = 0;
                      rhs.unsigned int value = destination;
                      *(void *)&long long destination = 0;
                    }
                    else
                    {
                      size_t v130 = 0;
                      size_t v131 = 0;
                      uint64_t v132 = 0;
                      while (1)
                      {
                        if (v132 < *(void *)(a1 + 208)) {
                          size_t v130 = *(void *)(*(void *)(a1 + 232) + 8 * v132);
                        }
                        uint64_t Contiguous = CMBlockBufferCreateContiguous(v22, *(CMBlockBufferRef *)(a1 + 80), v22, 0, v131, v130, 0, (CMBlockBufferRef *)&valuePtr);
                        if (Contiguous) {
                          break;
                        }
                        uint64_t Contiguous = CMBlockBufferCreateWithMemoryBlock(v22, 0, v130, v22, 0, 0, v130, 1u, (CMBlockBufferRef *)&time);
                        if (Contiguous) {
                          break;
                        }
                        uint64_t v134 = *(void *)(a1 + 248);
                        CMTimeValue v135 = valuePtr.value;
                        CMTimeValue v136 = time.value;
                        Float64 v137 = *(void **)(CMBaseObjectGetVTable() + 16);
                        if (v137) {
                          __int16 v138 = v137;
                        }
                        else {
                          __int16 v138 = 0;
                        }
                        if (*v138 < 4uLL
                          || (CMSampleBufferRef v139 = (uint64_t (*)(uint64_t, CMTimeValue, CMTimeValue))v138[4]) == 0)
                        {
                          SampleDependencyAttributeDictionardouble y = 4294954514;
LABEL_161:
                          CFAllocatorRef v22 = allocator;
                          goto LABEL_162;
                        }
                        uint64_t v140 = v139(v134, v135, v136);
                        if (v140)
                        {
                          SampleDependencyAttributeDictionardouble y = v140;
                          goto LABEL_161;
                        }
                        if (valuePtr.value)
                        {
                          CFRelease((CFTypeRef)valuePtr.value);
                          valuePtr.unsigned int value = 0;
                        }
                        uint64_t Contiguous = CMBlockBufferAppendBufferReference((CMBlockBufferRef)destination, (CMBlockBufferRef)time.value, 0, 0, 0);
                        CFAllocatorRef v22 = allocator;
                        if (Contiguous) {
                          break;
                        }
                        if (time.value)
                        {
                          CFRelease((CFTypeRef)time.value);
                          time.unsigned int value = 0;
                        }
                        v131 += v130;
                        if (++v132 >= *(void *)(a1 + 192)) {
                          goto LABEL_159;
                        }
                      }
                      SampleDependencyAttributeDictionardouble y = Contiguous;
                    }
LABEL_162:
                    CFTypeRef v29 = v385;
                  }
                  if (valuePtr.value) {
                    CFRelease((CFTypeRef)valuePtr.value);
                  }
                  if (time.value) {
                    CFRelease((CFTypeRef)time.value);
                  }
                  if ((void)destination) {
                    CFRelease((CFTypeRef)destination);
                  }
                  if (SampleDependencyAttributeDictionary) {
                    goto LABEL_103;
                  }
                }
                goto LABEL_170;
              }
            }
            SampleDependencyAttributeDictionardouble y = 4294954514;
            goto LABEL_130;
          }
          *(void *)&long long destination = 0;
          time.unsigned int value = 0;
          uint64_t ContiguousBlockBuffer = FigMemoryPoolCreateContiguousBlockBuffer();
          if (ContiguousBlockBuffer) {
            goto LABEL_404;
          }
          size_t v75 = CMBlockBufferGetDataLength((CMBlockBufferRef)v397.value);
          size_t v76 = CMBlockBufferGetDataLength((CMBlockBufferRef)v397.value);
          uint64_t ContiguousBlockBuffer = CMBlockBufferCreateWithMemoryBlock(v22, 0, v75, v22, 0, 0, v76, 1u, (CMBlockBufferRef *)&rhs);
          if (ContiguousBlockBuffer) {
            goto LABEL_404;
          }
          if (!FigCFEqual())
          {
            MovieSampleAccessorCopyCryptorIV(*(void *)(v68 + 168), (CFTypeRef *)&destination);
            uint64_t v77 = *(void *)(a1 + 248);
            uint64_t v78 = destination;
            uint64_t v79 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v79) {
              uint64_t v80 = v79;
            }
            else {
              uint64_t v80 = 0;
            }
            CMTimeEpoch v86 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v80 + 56);
            if (v86) {
              SampleDependencyAttributeDictionardouble y = v86(v77, v371, v78);
            }
            else {
              SampleDependencyAttributeDictionardouble y = 4294954514;
            }
            if ((void)destination) {
              CFRelease((CFTypeRef)destination);
            }
            if (SampleDependencyAttributeDictionary) {
              goto LABEL_103;
            }
          }
          MovieSampleAccessorCopyCryptorSubsampleAuxData(*(void *)(v68 + 168), (CFTypeRef *)&time);
          uint64_t v87 = *(void *)(a1 + 248);
          CMTimeValue v88 = time.value;
          uint64_t v89 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v89) {
            uint64_t v90 = v89;
          }
          else {
            uint64_t v90 = 0;
          }
          CFTypeRef v91 = *(uint64_t (**)(uint64_t, uint64_t, CMTimeValue))(v90 + 56);
          if (v91) {
            SampleDependencyAttributeDictionardouble y = v91(v87, v374, v88);
          }
          else {
            SampleDependencyAttributeDictionardouble y = 4294954514;
          }
          if (time.value) {
            CFRelease((CFTypeRef)time.value);
          }
          if (SampleDependencyAttributeDictionary) {
            goto LABEL_103;
          }
          uint64_t v92 = *(void *)(a1 + 248);
          uint64_t v93 = *(void *)(v68 + 88);
          uint64_t v94 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v94) {
            uint64_t v95 = v94;
          }
          else {
            uint64_t v95 = 0;
          }
          __int16 v96 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v95 + 56);
          if (!v96)
          {
            SampleDependencyAttributeDictionardouble y = 4294954514;
LABEL_103:
            unsigned __int8 v390 = 0;
            goto LABEL_252;
          }
          CFTypeRef v97 = v29;
          uint64_t v98 = v96(v92, v376, v93);
          if (v98)
          {
            SampleDependencyAttributeDictionardouble y = v98;
            goto LABEL_102;
          }
          uint64_t v99 = *(void *)(a1 + 248);
          CMTimeValue v100 = v397.value;
          CMTimeValue v101 = rhs.value;
          CMTimeValue v102 = *(void **)(CMBaseObjectGetVTable() + 16);
          if (v102) {
            CMTimeScale v103 = v102;
          }
          else {
            CMTimeScale v103 = 0;
          }
          if (*v103 < 4uLL || (CMTime v104 = (uint64_t (*)(uint64_t, CMTimeValue, CMTimeValue))v103[4]) == 0)
          {
            SampleDependencyAttributeDictionardouble y = 4294954514;
LABEL_102:
            CFTypeRef v29 = v97;
            goto LABEL_103;
          }
          SampleDependencyAttributeDictionardouble y = v104(v99, v100, v101);
          CFTypeRef v29 = v97;
          if (SampleDependencyAttributeDictionary) {
            goto LABEL_103;
          }
LABEL_170:
          if (!rhs.value)
          {
            uint64_t ContiguousBlockBuffer = CMBlockBufferCreateWithBufferReference(v22, *(CMBlockBufferRef *)(a1 + 80), 0, *(void *)(a1 + 176), 0, (CMBlockBufferRef *)&rhs);
            if (ContiguousBlockBuffer) {
              goto LABEL_404;
            }
          }
          if (*(unsigned char *)(v68 + 81))
          {
            uint64_t ContiguousBlockBuffer = FigVideoCreateBlockBufferAndFormatDescriptionForHoistingInStreamParameterSets();
            if (ContiguousBlockBuffer) {
              goto LABEL_404;
            }
            if (v396.value)
            {
              Float64 v141 = (const void *)rhs.value;
              rhs.unsigned int value = v396.value;
              CFRetain((CFTypeRef)v396.value);
              if (v141) {
                CFRelease(v141);
              }
            }
            if (v394.value)
            {
              uint64_t ContiguousBlockBuffer = fragManifold_SetTrackLatestFormatDescription(a1, *(void *)(a1 + 168), (CMFormatDescriptionRef)v394.value);
              if (ContiguousBlockBuffer) {
                goto LABEL_404;
              }
              uint64_t ContiguousBlockBuffer = fragManifold_CallFormatDescriptionCallback(a1, *(unsigned int **)(a1 + 168));
              if (ContiguousBlockBuffer) {
                goto LABEL_404;
              }
            }
          }
          if (*(unsigned char *)(*(void *)(a1 + 168) + 84)
            && !CMBlockBufferIsRangeContiguous((CMBlockBufferRef)rhs.value, 0, 0))
          {
            uint64_t v142 = FigMemoryPoolCreateContiguousBlockBuffer();
            if (v142) {
              goto LABEL_410;
            }
            double v143 = (const void *)rhs.value;
            rhs.unsigned int value = v395.value;
            if (v395.value) {
              CFRetain((CFTypeRef)v395.value);
            }
            if (v143) {
              CFRelease(v143);
            }
          }
          uint64_t v142 = CMSampleBufferCreate(v22, (CMBlockBufferRef)rhs.value, 1u, 0, 0, *(CMFormatDescriptionRef *)(*(void *)(a1 + 168) + 64), *(void *)(a1 + 192), *(void *)(a1 + 200), *(const CMSampleTimingInfo **)(a1 + 224), *(void *)(a1 + 208), *(const size_t **)(a1 + 232), (CMSampleBufferRef *)&sampleBufferOut);
          if (v142)
          {
LABEL_410:
            SampleDependencyAttributeDictionardouble y = v142;
            unsigned __int8 v390 = 0;
            goto LABEL_252;
          }
          uint64_t v144 = *(void *)(a1 + 168);
          if (*(_DWORD *)(v144 + 48) == 1986618469)
          {
            CFTypeRef v145 = v29;
            uint64_t v146 = *(void *)(v144 + 168);
            Float64 v147 = (opaqueCMSampleBuffer *)sampleBufferOut.value;
            LOBYTE(time.CFArrayAppendValue(theArray, value) = 0;
            LOBYTE(valuePtr.CFArrayAppendValue(theArray, value) = 0;
            LOBYTE(time1.CFArrayAppendValue(theArray, value) = 0;
            uint64_t DependencyInfo = MovieSampleAccessorGetDependencyInfo(v146, &time, &valuePtr, 0, 0, 0, (BOOL *)&time1);
            if (DependencyInfo)
            {
              SampleDependencyAttributeDictionardouble y = DependencyInfo;
              unsigned __int8 v390 = 0;
              CFTypeRef v29 = v145;
              goto LABEL_252;
            }
            CFArrayRef v149 = CMSampleBufferGetSampleAttachmentsArray(v147, 1u);
            if (!v149) {
              goto LABEL_195;
            }
            CMTimeValue v150 = (void *)CFArrayGetValueAtIndex(v149, 0);
            if (!v150) {
              goto LABEL_195;
            }
            CMTimeScale v151 = v150;
            *(void *)&long long destination = 0;
            SampleDependencyAttributeDictionardouble y = MovieSampleAccessorCreateSampleDependencyAttributeDictionary(v22, v146, (__CFDictionary **)&destination);
            if (!SampleDependencyAttributeDictionary && (void)destination)
            {
              CFDictionaryApplyFunction((CFDictionaryRef)destination, (CFDictionaryApplierFunction)fragManifold_AppendAttributesToDictionary, v151);
              CFRelease((CFTypeRef)destination);
LABEL_195:
              unsigned __int8 v390 = time.value;
              CFTypeRef v29 = v145;
              goto LABEL_197;
            }
            CFTypeRef v29 = v145;
            if (!LOBYTE(time.value)) {
              CFDictionarySetValue((CFMutableDictionaryRef)v151, v364, value);
            }
            if (LOBYTE(valuePtr.value)) {
              CFDictionarySetValue((CFMutableDictionaryRef)v151, v367, value);
            }
            if (LOBYTE(time1.value)) {
              CFDictionarySetValue((CFMutableDictionaryRef)v151, v366, v365);
            }
            unsigned __int8 v390 = time.value;
            if (SampleDependencyAttributeDictionary) {
              goto LABEL_252;
            }
          }
          else
          {
            unsigned __int8 v390 = 0;
          }
LABEL_197:
          uint64_t v152 = *(void *)(a1 + 168);
          if (*(_DWORD *)(v152 + 48) != 1936684398) {
            goto LABEL_218;
          }
          if (!*(unsigned char *)(a1 + 288))
          {
            long long v153 = (opaqueCMSampleBuffer *)sampleBufferOut.value;
            long long destination = *v30;
            *(void *)v402 = *((void *)v30 + 2);
            *(_OWORD *)&time.unsigned int value = destination;
            time.CMTimeEpoch epoch = *(void *)v402;
            *(_OWORD *)&valuePtr.unsigned int value = destination;
            valuePtr.CMTimeEpoch epoch = *(void *)v402;
            if ((*(_DWORD *)(v152 + 132) & 0x1D) == 1)
            {
              CMTime time1 = *(CMTime *)(v152 + 120);
              long long v386 = *MEMORY[0x1E4F1FA48];
              *(_OWORD *)&lhs.unsigned int value = *MEMORY[0x1E4F1FA48];
              CMTimeEpoch v154 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
              lhs.CMTimeEpoch epoch = v154;
              if (CMTimeCompare(&time1, &lhs) >= 1 && CMSampleBufferGetNumSamples(v153) >= 1)
              {
                CMSampleBufferGetDecodeTimeStamp((CMTime *)&destination, v153);
                *(_OWORD *)&time1.unsigned int value = destination;
                time1.CMTimeEpoch epoch = *(void *)v402;
                *(_OWORD *)&lhs.unsigned int value = v386;
                lhs.CMTimeEpoch epoch = v154;
                if (CMTimeCompare(&time1, &lhs) < 0)
                {
                  *(_OWORD *)&time1.unsigned int value = destination;
                  time1.CMTimeEpoch epoch = *(void *)v402;
                  CMTimeMultiply(&time, &time1, -1);
                  CMSampleBufferGetDuration(&valuePtr, v153);
                  CMTime time1 = time;
                  CMTime lhs = valuePtr;
                  if (CMTimeCompare(&time1, &lhs) >= 1) {
                    CMTime time = valuePtr;
                  }
                  CFAllocatorRef v155 = CFGetAllocator(v153);
                  CMTime time1 = time;
                  CFDictionaryRef v156 = CMTimeCopyAsDictionary(&time1, v155);
                  if (v156)
                  {
                    CFDictionaryRef v157 = v156;
                    CMSetAttachment(v153, key, v156, 1u);
                    CFRelease(v157);
                  }
                  else
                  {
                    uint64_t v246 = FigSignalErrorAt();
                    if (v246)
                    {
                      SampleDependencyAttributeDictionardouble y = v246;
                      goto LABEL_252;
                    }
                  }
                }
              }
            }
          }
          if (!FigAudioFormatDescriptionEmploysDependentPackets()) {
            goto LABEL_218;
          }
          uint64_t v158 = *(void *)(*(void *)(a1 + 168) + 168);
          CFRange v159 = (opaqueCMSampleBuffer *)sampleBufferOut.value;
          *(void *)&long long destination = 0;
          SampleDependencyAttributeDictionardouble y = MovieSampleAccessorCreate(*(const void **)v158, *(void *)(v158 + 8), (const void ***)&destination);
          uint64_t v160 = destination;
          if (SampleDependencyAttributeDictionary)
          {
            MovieSampleAccessorDispose((const void **)destination);
            goto LABEL_252;
          }
          CFTypeRef v161 = v29;
          *(_OWORD *)(destination + 80) = *(_OWORD *)(v158 + 80);
          long long v162 = *(_OWORD *)(v158 + 96);
          long long v163 = *(_OWORD *)(v158 + 112);
          long long v164 = *(_OWORD *)(v158 + 144);
          *(_OWORD *)(v160 + 128) = *(_OWORD *)(v158 + 128);
          *(_OWORD *)(v160 + 144) = v164;
          *(_OWORD *)(v160 + 96) = v162;
          *(_OWORD *)(v160 + 112) = v163;
          long long v165 = *(_OWORD *)(v158 + 160);
          long long v166 = *(_OWORD *)(v158 + 176);
          long long v167 = *(_OWORD *)(v158 + 192);
          *(void *)(v160 + 208) = *(void *)(v158 + 208);
          *(_OWORD *)(v160 + 176) = v166;
          *(_OWORD *)(v160 + 192) = v167;
          *(_OWORD *)(v160 + 160) = v165;
          CFArrayRef v168 = CMSampleBufferGetSampleAttachmentsArray(v159, 1u);
          if (!v168 || (v169 = v168, CFIndex v170 = CFArrayGetCount(v168), v170 < 1))
          {
LABEL_217:
            MovieSampleAccessorDispose((const void **)destination);
            CFTypeRef v29 = v161;
            goto LABEL_218;
          }
          CFIndex v171 = v170;
          CFIndex v172 = 0;
          while (2)
          {
            uint64_t v173 = (void *)CFArrayGetValueAtIndex(v169, v172);
            if (!v173) {
              goto LABEL_216;
            }
            long long v174 = v173;
            time.unsigned int value = 0;
            if (!MovieSampleAccessorCreateSampleDependencyAttributeDictionary(v22, destination, (__CFDictionary **)&time)&& FigCFDictionaryGetCount() >= 1)
            {
              CFDictionaryApplyFunction((CFDictionaryRef)time.value, (CFDictionaryApplierFunction)fragManifold_AppendAttributesToDictionary, v174);
              CFRelease((CFTypeRef)time.value);
LABEL_216:
              MovieSampleAccessorStepCursor(destination, 1, 0);
              if (v171 == ++v172) {
                goto LABEL_217;
              }
              continue;
            }
            break;
          }
          SampleDependencyAttributeDictionardouble y = FigSignalErrorAt();
          MovieSampleAccessorDispose((const void **)destination);
          CFTypeRef v29 = v161;
          if (SampleDependencyAttributeDictionary) {
            goto LABEL_252;
          }
LABEL_218:
          uint64_t v175 = *(void *)(a1 + 168);
          if (*(unsigned char *)(a1 + 152))
          {
            uint64_t v176 = (opaqueCMSampleBuffer *)sampleBufferOut.value;
            *(void *)&long long destination = 0;
            time.unsigned int value = 0;
            CMItemCount NumSamples = CMSampleBufferGetNumSamples((CMSampleBufferRef)sampleBufferOut.value);
            if (NumSamples)
            {
              CFIndex v178 = NumSamples;
              CFTypeRef v179 = v29;
              int v180 = MovieSampleAccessorCopyCryptorIVArray(*(void *)(v175 + 168), NumSamples, (CFArrayRef *)&destination);
              int v181 = MovieSampleAccessorCopyCryptorSubsampleAuxDataArray(*(void *)(v175 + 168), v178, (CFArrayRef *)&time);
              if (v180 | v181)
              {
                int v182 = v181;
                CFArrayRef v183 = CMSampleBufferGetSampleAttachmentsArray(v176, 1u);
                if (v183)
                {
                  CFArrayRef v184 = v183;
                  CFIndex v185 = CFArrayGetCount(v183);
                  if (v178 >= 1 && v178 == v185)
                  {
                    for (CFIndex j = 0; j != v178; ++j)
                    {
                      uint64_t v187 = (__CFDictionary *)CFArrayGetValueAtIndex(v184, j);
                      if (!v187) {
                        break;
                      }
                      BOOL v188 = v187;
                      if (v180)
                      {
                        uint64_t v189 = CFArrayGetValueAtIndex((CFArrayRef)destination, j);
                        CFDictionarySetValue(v188, v381, v189);
                      }
                      if (v182)
                      {
                        CMTime v190 = CFArrayGetValueAtIndex((CFArrayRef)time.value, j);
                        CFDictionarySetValue(v188, v380, v190);
                        if (CFDataGetLength((CFDataRef)v190) >= 8)
                        {
                          valuePtr.unsigned int value = 0;
                          v419.location = 0;
                          v419.length = 8;
                          CFDataGetBytes((CFDataRef)v190, v419, (UInt8 *)&valuePtr);
                          CFNumberRef v191 = CFNumberCreate(allocator, kCFNumberSInt32Type, &valuePtr);
                          CFDictionarySetValue(v188, v377, v191);
                          if (v191) {
                            CFRelease(v191);
                          }
                        }
                      }
                    }
                  }
                }
              }
              if ((void)destination) {
                CFRelease((CFTypeRef)destination);
              }
              CFAllocatorRef v22 = allocator;
              CFTypeRef v29 = v179;
              if (time.value) {
                CFRelease((CFTypeRef)time.value);
              }
            }
            uint64_t v175 = *(void *)(a1 + 168);
          }
          if (MovieTrackHasSeamSamples(*(void *)(v175 + 40)))
          {
            CFTypeRef v192 = v29;
            uint64_t v193 = *(void *)(*(void *)(a1 + 168) + 168);
            CMTime v194 = (opaqueCMSampleBuffer *)sampleBufferOut.value;
            *(void *)&long long destination = 0;
            SampleDependencyAttributeDictionardouble y = MovieSampleAccessorCreate(*(const void **)v193, *(void *)(v193 + 8), (const void ***)&destination);
            if (!SampleDependencyAttributeDictionary)
            {
              uint64_t v195 = destination;
              *(_OWORD *)(destination + 80) = *(_OWORD *)(v193 + 80);
              long long v196 = *(_OWORD *)(v193 + 144);
              long long v198 = *(_OWORD *)(v193 + 96);
              long long v197 = *(_OWORD *)(v193 + 112);
              *(_OWORD *)(v195 + 128) = *(_OWORD *)(v193 + 128);
              *(_OWORD *)(v195 + 144) = v196;
              *(_OWORD *)(v195 + 96) = v198;
              *(_OWORD *)(v195 + 112) = v197;
              long long v200 = *(_OWORD *)(v193 + 176);
              long long v199 = *(_OWORD *)(v193 + 192);
              long long v201 = *(_OWORD *)(v193 + 160);
              *(void *)(v195 + 208) = *(void *)(v193 + 208);
              *(_OWORD *)(v195 + 176) = v200;
              *(_OWORD *)(v195 + 192) = v199;
              *(_OWORD *)(v195 + 160) = v201;
              CFArrayRef v202 = CMSampleBufferGetSampleAttachmentsArray(v194, 1u);
              if (v202)
              {
                CFArrayRef v203 = v202;
                CFIndex v204 = CFArrayGetCount(v202);
                if (v204 >= 1)
                {
                  CFIndex v205 = v204;
                  for (CFIndex k = 0; k != v205; ++k)
                  {
                    uint64_t v207 = (__CFDictionary *)CFArrayGetValueAtIndex(v203, k);
                    if (v207)
                    {
                      uint64_t v208 = v207;
                      time.unsigned int value = 0;
                      if (MovieSampleAccessorCopySeamIdentifier(destination, (CFStringRef *)&time) && time.value != 0)
                      {
                        CFDictionarySetValue(v208, v378, (const void *)time.value);
                        CFRelease((CFTypeRef)time.value);
                      }
                    }
                    MovieSampleAccessorStepCursor(destination, 1, 0);
                  }
                }
              }
            }
            MovieSampleAccessorDispose((const void **)destination);
            CFTypeRef v29 = v192;
          }
          else
          {
            SampleDependencyAttributeDictionardouble y = 0;
          }
LABEL_252:
          if (v397.value) {
            CFRelease((CFTypeRef)v397.value);
          }
          if (rhs.value) {
            CFRelease((CFTypeRef)rhs.value);
          }
          if (v395.value) {
            CFRelease((CFTypeRef)v395.value);
          }
          if (v396.value) {
            CFRelease((CFTypeRef)v396.value);
          }
          if (v394.value) {
            CFRelease((CFTypeRef)v394.value);
          }
          long long v28 = (void *)sampleBufferOut.value;
          if (SampleDependencyAttributeDictionary && sampleBufferOut.value)
          {
            CFRelease((CFTypeRef)sampleBufferOut.value);
            LODWORD(v27) = 0;
            long long v28 = 0;
            goto LABEL_437;
          }
          if (SampleDependencyAttributeDictionary)
          {
            LODWORD(v27) = 0;
            char v254 = 1;
            goto LABEL_438;
          }
          uint64_t v68 = *(void *)(a1 + 168);
          int v73 = *(unsigned __int8 *)(v68 + 176);
LABEL_266:
          CFTypeRef v210 = *v379;
          if (!v73)
          {
            if (v210 && *(_DWORD *)(v68 + 48) == 1986618469)
            {
              *(void *)&long long destination = 0;
              uint64_t v213 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v213) {
                uint64_t v214 = v213;
              }
              else {
                uint64_t v214 = 0;
              }
              v228 = *(uint64_t (**)(CFTypeRef, void *, long long *))(v214 + 16);
              if (v228)
              {
                SampleDependencyAttributeDictionardouble y = v228(v210, v28, &destination);
                if (!v28) {
                  goto LABEL_303;
                }
LABEL_302:
                CFRelease(v28);
              }
              else
              {
                SampleDependencyAttributeDictionardouble y = 4294954514;
                if (v28) {
                  goto LABEL_302;
                }
              }
LABEL_303:
              long long v28 = (void *)destination;
              if (SampleDependencyAttributeDictionary) {
                goto LABEL_626;
              }
            }
LABEL_277:
            __int16 v217 = *(OpaqueCMBlockBuffer **)(a1 + 184);
            if (v217)
            {
              ConsumeBufferedBytes((CMBlockBufferRef *)a1, v217);
              *(void *)(a1 + 184) = 0;
            }
            uint64_t v218 = *(void *)(a1 + 168);
            if (!*(void *)(v218 + 16)) {
              goto LABEL_345;
            }
            if (*(_DWORD *)(v218 + 48) == 1935832172)
            {
              __int16 v219 = CMSampleBufferGetFormatDescription((CMSampleBufferRef)v28);
              if (CMFormatDescriptionGetMediaSubType(v219) == 1937010800)
              {
                if (v29) {
                  CFRelease(v29);
                }
                valuePtr.unsigned int value = 0;
                time.unsigned int value = 0;
                *(void *)&time.CMTimeScale timescale = v22;
                *(void *)&long long destination = fragManifold_FigCaptionGroupConverterOutputCallbackMPEG4Part30;
                *((void *)&destination + 1) = &time;
                uint64_t v220 = FigTTMLCaptionGroupConverterFromSampleBufferCreate(&destination, (uint64_t)v22, (CFTypeRef *)&valuePtr);
                if (v220) {
                  goto LABEL_414;
                }
                CMTimeValue v221 = valuePtr.value;
                uint64_t v222 = *(void *)(CMBaseObjectGetVTable() + 16);
                if (v222) {
                  uint64_t v223 = v222;
                }
                else {
                  uint64_t v223 = 0;
                }
                uint64_t v229 = *(uint64_t (**)(CMTimeValue, void *))(v223 + 8);
                if (v229)
                {
                  uint64_t v220 = v229(v221, v28);
                  if (v220) {
                    goto LABEL_414;
                  }
                  CMTimeValue v230 = valuePtr.value;
                  uint64_t v231 = *(void *)(CMBaseObjectGetVTable() + 16);
                  uint64_t v232 = v231 ? v231 : 0;
                  uint64_t v233 = *(uint64_t (**)(CMTimeValue))(v232 + 16);
                  if (v233)
                  {
                    uint64_t v220 = v233(v230);
                    if (!v220)
                    {
                      if (time.value)
                      {
                        CFTypeRef v29 = CFRetain((CFTypeRef)time.value);
                        SampleDependencyAttributeDictionardouble y = 0;
LABEL_329:
                        if (time.value)
                        {
                          CFRelease((CFTypeRef)time.value);
                          time.unsigned int value = 0;
                        }
                      }
                      else
                      {
                        SampleDependencyAttributeDictionardouble y = 0;
                        CFTypeRef v29 = 0;
                      }
                      if (valuePtr.value) {
                        CFRelease((CFTypeRef)valuePtr.value);
                      }
                      if (SampleDependencyAttributeDictionary) {
                        goto LABEL_626;
                      }
                      if (v29 && CFArrayGetCount((CFArrayRef)v29) >= 1 && CFArrayGetCount((CFArrayRef)v29) >= 1)
                      {
                        CFIndex v234 = 0;
                        do
                        {
                          CMTime v235 = CFArrayGetValueAtIndex((CFArrayRef)v29, v234);
                          uint64_t v216 = fragManifold_CallPushSampleCallback(a1, *(unsigned int **)(a1 + 168), v390, (uint64_t)v235);
                          if (v216) {
                            goto LABEL_621;
                          }
                        }
                        while (++v234 < CFArrayGetCount((CFArrayRef)v29));
                      }
LABEL_340:
                      SampleDependencyAttributeDictionardouble y = 0;
LABEL_341:
                      if (v28) {
                        CFRelease(v28);
                      }
                      if (SampleDependencyAttributeDictionary == -16045)
                      {
                        long long v28 = 0;
LABEL_436:
                        SampleDependencyAttributeDictionardouble y = 0;
                        LODWORD(v27) = 1;
                        goto LABEL_437;
                      }
                      long long v28 = 0;
                      if (SampleDependencyAttributeDictionary) {
                        goto LABEL_626;
                      }
LABEL_345:
                      ConsumeBufferedBytes((CMBlockBufferRef *)a1, *(OpaqueCMBlockBuffer **)(a1 + 176));
                      *(void *)(a1 + 176) = 0;
                      int v236 = MovieSampleAccessorStepCursor(*(void *)(*(void *)(a1 + 168) + 168), *(void *)(a1 + 192), 0);
                      uint64_t v237 = *(void *)(a1 + 168);
                      uint64_t v238 = *(void *)(v237 + 248) + *(void *)(a1 + 192);
                      *(void *)(v237 + 248) = v238;
                      if (v238 == *(void *)(v237 + 200))
                      {
                        if (v236 == -12840)
                        {
                          MovieSampleAccessorDispose(*(const void ***)(v237 + 168));
                          *(void *)(*(void *)(a1 + 168) + 168) = 0;
                        }
                        else
                        {
                          uint64_t v216 = fragManifold_ObtainChunkInformation(v237);
                          if (v216) {
                            goto LABEL_621;
                          }
                        }
                        uint64_t v216 = fragManifold_SelectEligibleTrackForEmitting((uint64_t *)a1);
                        if (v216)
                        {
LABEL_621:
                          SampleDependencyAttributeDictionardouble y = v216;
LABEL_626:
                          LODWORD(v27) = 0;
                          goto LABEL_437;
                        }
                      }
                      if (*(void *)(a1 + 72) == *(void *)(a1 + 240)
                        || (uint64_t v27 = *(void *)(a1 + 168), !*(void *)(v27 + 168)))
                      {
                        fragManifold_UnprepareTracksForSampleEmission(a1);
                        LODWORD(v27) = 0;
                        char v254 = 0;
                        SampleDependencyAttributeDictionardouble y = 0;
                        goto LABEL_438;
                      }
                      continue;
                    }
LABEL_414:
                    SampleDependencyAttributeDictionardouble y = v220;
                    CFTypeRef v29 = 0;
                    goto LABEL_329;
                  }
                }
                CFTypeRef v29 = 0;
                SampleDependencyAttributeDictionardouble y = 4294954514;
                goto LABEL_329;
              }
              uint64_t v218 = *(void *)(a1 + 168);
            }
            uint64_t v224 = fragManifold_CallPushSampleCallback(a1, (unsigned int *)v218, v390, (uint64_t)v28);
            if (v224)
            {
              SampleDependencyAttributeDictionardouble y = v224;
              goto LABEL_341;
            }
            uint64_t v225 = *(void *)(a1 + 168);
            if (*(_DWORD *)(v225 + 48) != 1986618469) {
              goto LABEL_340;
            }
            signed int MediaSubType = CMFormatDescriptionGetMediaSubType(*(CMFormatDescriptionRef *)(v225 + 64));
            SampleDependencyAttributeDictionardouble y = 0;
            if (MediaSubType > 1752589104)
            {
              if (MediaSubType > 1902405732)
              {
                if (MediaSubType > 1902671458)
                {
                  if (MediaSubType != 1902671459 && MediaSubType != 2053207651)
                  {
                    int v227 = 1902998904;
                    goto LABEL_373;
                  }
                }
                else if (MediaSubType != 1902405733 && MediaSubType != 1902407032)
                {
                  int v227 = 1902667126;
                  goto LABEL_373;
                }
              }
              else if (MediaSubType > 1902212706)
              {
                if (MediaSubType != 1902212707 && MediaSubType != 1902212709)
                {
                  int v227 = 1902405681;
                  goto LABEL_373;
                }
              }
              else if (MediaSubType != 1752589105 && MediaSubType != 1836415073)
              {
                int v227 = 1869117027;
                goto LABEL_373;
              }
            }
            else if (MediaSubType > 1685220712)
            {
              if (MediaSubType > 1700886114)
              {
                if (MediaSubType != 1700886115 && MediaSubType != 1718908520)
                {
                  int v227 = 1751479857;
                  goto LABEL_373;
                }
              }
              else if (MediaSubType != 1685220713 && MediaSubType != 1685481521)
              {
                int v227 = 1685481573;
                goto LABEL_373;
              }
            }
            else if (MediaSubType > 1667524656)
            {
              if (MediaSubType != 1667524657 && MediaSubType != 1667790435)
              {
                int v227 = 1684895096;
                goto LABEL_373;
              }
            }
            else if (MediaSubType != 1635148593 && MediaSubType != 1635148595)
            {
              int v227 = 1667331683;
LABEL_373:
              if (MediaSubType != v227) {
                goto LABEL_341;
              }
            }
            time.unsigned int value = 0;
            valuePtr.unsigned int value = 0;
            uint64_t v239 = *(void *)(a1 + 272);
            if (!v239)
            {
              uint64_t v240 = MTSampleBufferCopyClosedCaptionSEIBlockBuffer((opaqueCMSampleBuffer *)v28, (CMBlockBufferRef *)&time);
              if (!v240)
              {
                if (!time.value) {
                  goto LABEL_386;
                }
                *(void *)&long long destination = 0;
                int v241 = MovieInformationGetTrackCount(*(void *)(a1 + 144));
                do
                  ++v241;
                while (fragManifold_ObtainTrackByID((uint64_t *)a1, v241, 0) != -16042);
                uint64_t v242 = CMFormatDescriptionCreate(v22, 0x636C6370u, 0x61746363u, 0, (CMFormatDescriptionRef *)&destination);
                if (!v242)
                {
                  CFTypeRef v243 = malloc_type_calloc(1uLL, 0x100uLL, 0x10E00401C2CD5CEuLL);
                  *(void *)(a1 + 272) = v243;
                  if (v243)
                  {
                    *CFTypeRef v243 = v241;
                    v243[12] = 1668047728;
                    fragManifold_SetTrackLatestFormatDescription(a1, (uint64_t)v243, (CMFormatDescriptionRef)destination);
                    uint64_t v242 = fragManifold_CallNewTrackCallback(a1, *(unsigned int **)(a1 + 272));
                    if (!v242) {
                      uint64_t v242 = fragManifold_CallFormatDescriptionCallback(a1, *(unsigned int **)(a1 + 272));
                    }
                  }
                  else
                  {
                    uint64_t v242 = FigSignalErrorAt();
                  }
                }
                SampleDependencyAttributeDictionardouble y = v242;
                if ((void)destination) {
                  CFRelease((CFTypeRef)destination);
                }
                if (!SampleDependencyAttributeDictionary)
                {
LABEL_386:
                  uint64_t v239 = *(void *)(a1 + 272);
                  if (v239) {
                    goto LABEL_387;
                  }
LABEL_394:
                  SampleDependencyAttributeDictionardouble y = 0;
                }
LABEL_395:
                if (time.value) {
                  CFRelease((CFTypeRef)time.value);
                }
                if (valuePtr.value) {
                  CFRelease((CFTypeRef)valuePtr.value);
                }
                goto LABEL_341;
              }
LABEL_393:
              SampleDependencyAttributeDictionardouble y = v240;
              goto LABEL_395;
            }
LABEL_387:
            if (!*(void *)(v239 + 16)) {
              goto LABEL_394;
            }
            int v244 = (OpaqueCMBlockBuffer *)time.value;
            if (!time.value)
            {
              uint64_t v240 = MTSampleBufferCopyClosedCaptionSEIBlockBuffer((opaqueCMSampleBuffer *)v28, (CMBlockBufferRef *)&time);
              if (v240) {
                goto LABEL_393;
              }
              int v244 = (OpaqueCMBlockBuffer *)time.value;
              if (!time.value) {
                goto LABEL_394;
              }
            }
            *(void *)&long long destination = CMBlockBufferGetDataLength(v244);
            uint64_t v240 = CMSampleBufferCreate(v22, (CMBlockBufferRef)time.value, 1u, 0, 0, *(CMFormatDescriptionRef *)(*(void *)(a1 + 272) + 64), 1, 1, *(const CMSampleTimingInfo **)(a1 + 224), 1, (const size_t *)&destination, (CMSampleBufferRef *)&valuePtr);
            if (!v240) {
              uint64_t v240 = fragManifold_CallPushSampleCallback(a1, *(unsigned int **)(a1 + 272), 0, valuePtr.value);
            }
            goto LABEL_393;
          }
          break;
        }
        uint64_t v211 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v211) {
          uint64_t v212 = v211;
        }
        else {
          uint64_t v212 = 0;
        }
        __int16 v215 = *(uint64_t (**)(CFTypeRef, void *))(v212 + 8);
        if (v215)
        {
          uint64_t v216 = v215(v210, v28);
          if (!v216) {
            goto LABEL_277;
          }
          goto LABEL_621;
        }
        LODWORD(v27) = 0;
        SampleDependencyAttributeDictionardouble y = 4294954514;
LABEL_437:
        char v254 = 1;
LABEL_438:
        if (v29) {
LABEL_439:
        }
          CFRelease(v29);
LABEL_440:
        if (v28) {
          CFRelease(v28);
        }
        if (SampleDependencyAttributeDictionary) {
          return SampleDependencyAttributeDictionary;
        }
        if (v254) {
          goto LABEL_719;
        }
        uint64_t v255 = *(void *)(a1 + 240);
        uint64_t v256 = *(void *)(a1 + 72);
        BOOL v257 = v255 <= v256;
        uint64_t v258 = v255 - v256;
        if (!v257)
        {
          *(void *)(a1 + 128) = v258;
          *(_DWORD *)(a1 + 112) = 3;
          goto LABEL_719;
        }
LABEL_718:
        *(_DWORD *)(a1 + 112) = 0;
LABEL_719:
        if (v27) {
          return 0;
        }
        continue;
      case 3:
        if (*(void *)(a1 + 128) >= *(void *)(a1 + 88)) {
          uint64_t v247 = *(OpaqueCMBlockBuffer **)(a1 + 88);
        }
        else {
          uint64_t v247 = *(OpaqueCMBlockBuffer **)(a1 + 128);
        }
        ConsumeBufferedBytes((CMBlockBufferRef *)a1, v247);
        uint64_t v248 = *(void *)(a1 + 128) - (void)v247;
        *(void *)(a1 + 128) = v248;
        if (v248) {
          return 0;
        }
        goto LABEL_717;
      default:
        goto LABEL_506;
    }
  }
}

uint64_t ConsumeBufferedBytes(CMBlockBufferRef *blockBufferOut, OpaqueCMBlockBuffer *a2)
{
  if (blockBufferOut[11] == a2)
  {
    uint64_t v5 = blockBufferOut + 10;
    CMBlockBufferRef v4 = blockBufferOut[10];
    if (v4)
    {
      CFRelease(v4);
      *uint64_t v5 = 0;
    }
    CMBlockBufferCreateEmpty((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 8u, 0, blockBufferOut + 10);
  }
  else
  {
    CMBlockBufferRef blockBufferOuta = 0;
    uint64_t v6 = blockBufferOut[10];
    CMBlockBufferCreateEmpty((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 8u, 0, &blockBufferOuta);
    uint64_t result = CMBlockBufferAppendBufferReference(blockBufferOuta, v6, (size_t)a2, 0, 0);
    if (result) {
      return result;
    }
    blockBufferOut[10] = blockBufferOuta;
    if (v6) {
      CFRelease(v6);
    }
  }
  uint64_t v8 = blockBufferOut[10];
  blockBufferOut[9] = (OpaqueCMBlockBuffer *)((char *)a2 + (void)blockBufferOut[9]);
  Dataunint64_t Length = (OpaqueCMBlockBuffer *)CMBlockBufferGetDataLength(v8);
  uint64_t result = 0;
  blockBufferOut[11] = DataLength;
  return result;
}

uint64_t fragManifold_SetTrackLatestFormatDescription(uint64_t a1, uint64_t a2, CMFormatDescriptionRef desc)
{
  signed int MediaSubType = CMFormatDescriptionGetMediaSubType(desc);
  signed int v7 = MediaSubType;
  CMFormatDescriptionRef formatDescriptionOut = 0;
  if (MediaSubType <= 1902667125)
  {
    char v8 = 1;
    if (MediaSubType == 1902212707 || MediaSubType == 1902212709) {
      goto LABEL_10;
    }
    int v9 = 1902407032;
    goto LABEL_8;
  }
  if (MediaSubType != 1902667126 && MediaSubType != 1902998904)
  {
    int v9 = 1902671459;
LABEL_8:
    if (MediaSubType != v9) {
      goto LABEL_11;
    }
  }
  char v8 = 0;
LABEL_10:
  *(unsigned char *)(a2 + 84) = v8;
LABEL_11:
  uint64_t v10 = *(const void **)(a2 + 64);
  *(void *)(a2 + 64) = desc;
  if (desc) {
    CFRetain(desc);
  }
  if (v10) {
    CFRelease(v10);
  }
  if (!*(unsigned char *)(a1 + 264))
  {
    if (v7 != 1937010800) {
      goto LABEL_92;
    }
    CFDictionaryRef Extensions = CMFormatDescriptionGetExtensions(desc);
    *(_DWORD *)(a2 + 48) = 1935832172;
    uint64_t v14 = CMFormatDescriptionCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0x7362746Cu, 0x73747070u, Extensions, &formatDescriptionOut);
    if (v14) {
      goto LABEL_197;
    }
    goto LABEL_88;
  }
  CMVideoFormatDescriptionRef v64 = 0;
  CMVideoCodecType valuePtr = 0;
  signed int v11 = CMFormatDescriptionGetMediaSubType(desc);
  int v12 = v11;
  if (v11 > 1902403957)
  {
    if (v11 <= 1902667125)
    {
      if (v11 <= 1902407031)
      {
        if (v11 != 1902403958)
        {
          if (v11 != 1902405681 && v11 != 1902405733) {
            goto LABEL_82;
          }
          goto LABEL_52;
        }
LABEL_31:
        *(void *)(a2 + 88) = *MEMORY[0x1E4F1FCD8];
        *(unsigned char *)(a2 + 83) = 1;
LABEL_66:
        *(unsigned char *)(a2 + 85) = 1;
LABEL_67:
        uint64_t v24 = FigParseHLSfMP4SecurityInfoFromFormatDescriptionAndCopyIV(desc, (int *)&valuePtr, 0, 0, 0, 0);
        if (!v24) {
          goto LABEL_68;
        }
LABEL_81:
        long long v37 = v64;
        CMFormatDescriptionRef formatDescriptionOut = v64;
        goto LABEL_199;
      }
      if (v11 != 1902407032)
      {
        if (v11 != 1902469939)
        {
          int v15 = 1902537827;
          goto LABEL_55;
        }
LABEL_56:
        uint64_t v19 = (void *)MEMORY[0x1E4F1FCA8];
        goto LABEL_57;
      }
LABEL_52:
      uint64_t v20 = (void *)MEMORY[0x1E4F1FCD0];
LABEL_65:
      *(void *)(a2 + 88) = *v20;
      goto LABEL_66;
    }
    if (v11 <= 1902998903)
    {
      if (v11 != 1902667126 && v11 != 1902671459)
      {
        int v15 = 1902928227;
        goto LABEL_55;
      }
      goto LABEL_52;
    }
    if (v11 == 1902998904) {
      goto LABEL_52;
    }
    if (v11 == 1903522657) {
      goto LABEL_56;
    }
    if (v11 != 1903587385) {
      goto LABEL_82;
    }
    CFNumberRef Extension = (const __CFNumber *)CMFormatDescriptionGetExtension(desc, (CFStringRef)*MEMORY[0x1E4F215F0]);
    if (Extension)
    {
      CFNumberRef v17 = Extension;
      CFTypeID v18 = CFGetTypeID(Extension);
      if (v18 == CFNumberGetTypeID())
      {
        CFNumberGetValue(v17, kCFNumberSInt32Type, &valuePtr);
        *(unsigned char *)(a2 + 83) = 1;
        uint64_t v19 = (void *)MEMORY[0x1E4F1FCD8];
LABEL_57:
        *(void *)(a2 + 88) = *v19;
        goto LABEL_67;
      }
    }
LABEL_203:
    uint64_t v24 = FigSignalErrorAt();
    long long v37 = 0;
    goto LABEL_205;
  }
  if (v11 > 1902207794)
  {
    if (v11 <= 1902211170)
    {
      if ((v11 - 1902207795) > 0x3D || ((1 << (v11 - 51)) & 0x2020000000000001) == 0) {
        goto LABEL_82;
      }
    }
    else
    {
      if (v11 > 1902212706)
      {
        if (v11 != 1902212707 && v11 != 1902212709) {
          goto LABEL_82;
        }
        uint64_t v20 = (void *)MEMORY[0x1E4F1FCC0];
        goto LABEL_65;
      }
      if (v11 != 1902211171)
      {
        if (v11 != 1902212657) {
          goto LABEL_82;
        }
        goto LABEL_31;
      }
    }
    goto LABEL_56;
  }
  if (v11 > 1667790434)
  {
    if (v11 != 1667790435)
    {
      int v15 = 1902207331;
LABEL_55:
      if (v11 != v15) {
        goto LABEL_82;
      }
      goto LABEL_56;
    }
  }
  else if (v11 != 1667331683 && v11 != 1667524657)
  {
    goto LABEL_82;
  }
  CFNumberRef v21 = (const __CFNumber *)CMFormatDescriptionGetExtension(desc, (CFStringRef)*MEMORY[0x1E4F215F0]);
  if (!v21) {
    goto LABEL_203;
  }
  CFNumberRef v22 = v21;
  CFTypeID v23 = CFGetTypeID(v21);
  if (v23 != CFNumberGetTypeID()) {
    goto LABEL_203;
  }
  CFNumberGetValue(v22, kCFNumberSInt32Type, &valuePtr);
  *(void *)(a2 + 88) = *MEMORY[0x1E4F1FCC8];
  *(unsigned char *)(a2 + 83) = 1;
  if (*(_DWORD *)(a2 + 48) != 1986618469)
  {
    uint64_t v24 = 4294951255;
    goto LABEL_81;
  }
LABEL_68:
  CFDictionaryRef v25 = CMFormatDescriptionGetExtensions(desc);
  int v26 = *(_DWORD *)(a2 + 48);
  if (v26 != 1936684398)
  {
    if (v26 != 1986618469) {
      goto LABEL_82;
    }
    CMVideoDimensions Dimensions = CMVideoFormatDescriptionGetDimensions(desc);
    uint64_t v28 = CMVideoFormatDescriptionCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], valuePtr, Dimensions.width, Dimensions.height, v25, &v64);
    goto LABEL_80;
  }
  size_t v61 = 0;
  size_t sizeOut = 0;
  StreamBasicDescription = CMAudioFormatDescriptionGetStreamBasicDescription(desc);
  if (StreamBasicDescription)
  {
    long long v31 = *(_OWORD *)&StreamBasicDescription->mSampleRate;
    long long v30 = *(_OWORD *)&StreamBasicDescription->mBytesPerPacket;
    *(void *)&asbd.mBitsPerChannel = *(void *)&StreamBasicDescription->mBitsPerChannel;
    *(_OWORD *)&asbd.mSamplefloat Rate = v31;
    *(_OWORD *)&asbd.mBytesPerPacket = v30;
    asbd.mFormatID = valuePtr;
    ChannelLayout = CMAudioFormatDescriptionGetChannelLayout(desc, &sizeOut);
    MagicCookie = (char *)CMAudioFormatDescriptionGetMagicCookie(desc, &v61);
    long long v34 = MagicCookie;
    if (v12 > 1902207855)
    {
      if (v12 == 1902207856) {
        goto LABEL_78;
      }
      int v35 = 1903522657;
    }
    else
    {
      if (v12 == 1902207331) {
        goto LABEL_78;
      }
      int v35 = 1902207848;
    }
    if (v12 != v35)
    {
      size_t v36 = v61;
      goto LABEL_79;
    }
LABEL_78:
    long long v34 = MagicCookie + 8;
    size_t v36 = v61 - 8;
    v61 -= 8;
LABEL_79:
    uint64_t v28 = CMAudioFormatDescriptionCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], &asbd, sizeOut, ChannelLayout, v36, v34, v25, &v64);
LABEL_80:
    uint64_t v24 = v28;
    if (v28) {
      goto LABEL_81;
    }
LABEL_82:
    long long v37 = v64;
    CMFormatDescriptionRef formatDescriptionOut = v64;
LABEL_83:
    if (!v37) {
      goto LABEL_92;
    }
    long long v39 = *(const void **)(a2 + 56);
    long long v38 = *(const void **)(a2 + 64);
    *(void *)(a2 + 56) = v38;
    if (v38) {
      CFRetain(v38);
    }
    if (v39) {
      CFRelease(v39);
    }
LABEL_88:
    long long v40 = *(const void **)(a2 + 64);
    CMFormatDescriptionRef v41 = formatDescriptionOut;
    *(void *)(a2 + 64) = formatDescriptionOut;
    if (v41) {
      CFRetain(v41);
    }
    if (v40) {
      CFRelease(v40);
    }
LABEL_92:
    if (*(_DWORD *)(a2 + 48) != 1986618469) {
      goto LABEL_187;
    }
    signed int mSampleRate_low = CMFormatDescriptionGetMediaSubType(*(CMFormatDescriptionRef *)(a2 + 64));
    LODWORD(asbd.mSampleRate) = mSampleRate_low;
    if (mSampleRate_low <= 1902207794)
    {
      if (mSampleRate_low <= 1685220712)
      {
        if (mSampleRate_low <= 1667524656)
        {
          if (mSampleRate_low <= 1667326823)
          {
            if (mSampleRate_low == 1633771875 || mSampleRate_low == 1667312947) {
              goto LABEL_175;
            }
            unsigned __int16 v44 = 24931;
          }
          else if (mSampleRate_low > 1667330146)
          {
            if (mSampleRate_low == 1667330147) {
              goto LABEL_175;
            }
            unsigned __int16 v44 = 30307;
          }
          else
          {
            if (mSampleRate_low == 1667326824) {
              goto LABEL_175;
            }
            unsigned __int16 v44 = 25456;
          }
          int v46 = v44 | 0x63610000;
          goto LABEL_174;
        }
        if (mSampleRate_low <= 1667656802)
        {
          if (mSampleRate_low != 1667524657 && mSampleRate_low != 1667574579)
          {
            int v46 = 1667575091;
            goto LABEL_174;
          }
          goto LABEL_175;
        }
        if (mSampleRate_low <= 1668047202)
        {
          if (mSampleRate_low != 1667656803)
          {
            int v46 = 1667790435;
            goto LABEL_174;
          }
          goto LABEL_175;
        }
        if (mSampleRate_low == 1668047203) {
          goto LABEL_175;
        }
        int v46 = 1668641633;
        goto LABEL_174;
      }
      if (mSampleRate_low <= 1885430578)
      {
        if (mSampleRate_low <= 1701733237)
        {
          if (mSampleRate_low != 1685220713 && mSampleRate_low != 1700886115)
          {
            int v46 = 1701733217;
            goto LABEL_174;
          }
        }
        else if (mSampleRate_low > 1882599479)
        {
          if (mSampleRate_low != 1882599480)
          {
            int v46 = 1885430115;
            goto LABEL_174;
          }
        }
        else if (mSampleRate_low != 1701733238)
        {
          int v46 = 1869117027;
          goto LABEL_174;
        }
        goto LABEL_175;
      }
      if (mSampleRate_low <= 1885547314)
      {
        if ((mSampleRate_low - 1885430579) > 0x3D
          || ((1 << (mSampleRate_low - 51)) & 0x2020000000000001) == 0)
        {
          goto LABEL_178;
        }
        goto LABEL_175;
      }
      if (mSampleRate_low <= 1886745440)
      {
        if (mSampleRate_low != 1885547315)
        {
          int v46 = 1885692723;
          goto LABEL_174;
        }
        goto LABEL_175;
      }
      if (mSampleRate_low == 1886745441) {
        goto LABEL_175;
      }
      unsigned __int16 v45 = 24931;
    }
    else
    {
      if (mSampleRate_low > 1902667125)
      {
        if (mSampleRate_low <= 2053202738)
        {
          if (mSampleRate_low <= 1902998903)
          {
            if (mSampleRate_low != 1902667126 && mSampleRate_low != 1902671459)
            {
              int v46 = 1902928227;
              goto LABEL_174;
            }
          }
          else if (mSampleRate_low > 1903587384)
          {
            if (mSampleRate_low != 1903587385)
            {
              unsigned __int16 v43 = 24931;
              goto LABEL_164;
            }
          }
          else if (mSampleRate_low != 1902998904)
          {
            int v46 = 1903522657;
            goto LABEL_174;
          }
LABEL_175:
          CFNumberRef v48 = (const __CFNumber *)CMFormatDescriptionGetExtension(*(CMFormatDescriptionRef *)(a2 + 64), (CFStringRef)*MEMORY[0x1E4F215F0]);
          if (!v48) {
            goto LABEL_196;
          }
          CFNumberRef v49 = v48;
          CFTypeID v50 = CFGetTypeID(v48);
          if (v50 != CFNumberGetTypeID()) {
            goto LABEL_196;
          }
          CFNumberGetValue(v49, kCFNumberSInt32Type, &asbd);
          signed int mSampleRate_low = LODWORD(asbd.mSampleRate);
LABEL_178:
          if (mSampleRate_low == 1635148595 || mSampleRate_low == 1751479857 || mSampleRate_low == 1685481573)
          {
            CFDictionaryRef v51 = CMFormatDescriptionGetExtensions(*(CMFormatDescriptionRef *)(a2 + 64));
            if (v51)
            {
              CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v51, (const void *)*MEMORY[0x1E4F1EE20]);
              if (Value)
              {
                if (LODWORD(asbd.mSampleRate) == 1635148595)
                {
                  uint64_t v53 = @"avcC";
                  CFIndex v54 = 4;
LABEL_189:
                  CFArrayRef v55 = (const __CFArray *)CFDictionaryGetValue(Value, v53);
                  if (v55)
                  {
                    CFArrayRef ValueAtIndex = v55;
                    CFTypeID v57 = CFGetTypeID(v55);
                    if ((v57 != CFArrayGetTypeID()
                       || CFArrayGetCount(ValueAtIndex) == 1
                       && (CFArrayRef ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(ValueAtIndex, 0)) != 0)
                      && CFDataGetLength(ValueAtIndex) > v54
                      && (~CFDataGetBytePtr(ValueAtIndex)[v54] & 3) == 0)
                    {
                      uint64_t v24 = 0;
                      *(unsigned char *)(a2 + 81) = 1;
                      goto LABEL_198;
                    }
                  }
                  goto LABEL_196;
                }
                if (LODWORD(asbd.mSampleRate) == 1751479857 || LODWORD(asbd.mSampleRate) == 1685481573)
                {
                  uint64_t v53 = @"hvcC";
                  CFIndex v54 = 21;
                  goto LABEL_189;
                }
              }
            }
LABEL_196:
            uint64_t v14 = FigSignalErrorAt();
LABEL_197:
            uint64_t v24 = v14;
            goto LABEL_198;
          }
LABEL_187:
          uint64_t v24 = 0;
LABEL_198:
          long long v37 = formatDescriptionOut;
          goto LABEL_199;
        }
        if (mSampleRate_low <= 2053319474)
        {
          if ((mSampleRate_low - 2053202739) > 0x3D
            || ((1 << (mSampleRate_low - 51)) & 0x2020000000000001) == 0)
          {
            unsigned __int16 v43 = 30307;
LABEL_164:
            int v46 = v43 | 0x7A610000;
            goto LABEL_174;
          }
          goto LABEL_175;
        }
        if (mSampleRate_low <= 2053923170)
        {
          if (mSampleRate_low != 2053319475)
          {
            int v46 = 2053464883;
            goto LABEL_174;
          }
          goto LABEL_175;
        }
        if (mSampleRate_low == 2054517601) {
          goto LABEL_175;
        }
        int v46 = 2053923171;
LABEL_174:
        if (mSampleRate_low != v46) {
          goto LABEL_178;
        }
        goto LABEL_175;
      }
      if (mSampleRate_low > 1902324530)
      {
        if (mSampleRate_low <= 1902405732)
        {
          if (mSampleRate_low == 1902324531 || mSampleRate_low == 1902403958) {
            goto LABEL_175;
          }
          unsigned __int16 v47 = 26673;
        }
        else
        {
          if (mSampleRate_low > 1902469938)
          {
            if (mSampleRate_low == 1902469939) {
              goto LABEL_175;
            }
            int v46 = 1902537827;
            goto LABEL_174;
          }
          if (mSampleRate_low == 1902405733) {
            goto LABEL_175;
          }
          unsigned __int16 v47 = 28024;
        }
        int v46 = v47 | 0x71640000;
        goto LABEL_174;
      }
      if ((mSampleRate_low - 1902207795) <= 0x3D
        && ((1 << (mSampleRate_low - 51)) & 0x2020000000000001) != 0
        || (mSampleRate_low - 1902212657) <= 0x34
        && ((1 << (mSampleRate_low - 49)) & 0x14000000000001) != 0)
      {
        goto LABEL_175;
      }
      unsigned __int16 v45 = 28771;
    }
    int v46 = v45 | 0x71610000;
    goto LABEL_174;
  }
  uint64_t v24 = FigSignalErrorAt();
  long long v37 = v64;
LABEL_205:
  CMFormatDescriptionRef formatDescriptionOut = v37;
  if (!v24) {
    goto LABEL_83;
  }
LABEL_199:
  if (v37) {
    CFRelease(v37);
  }
  return v24;
}

uint64_t fragManifold_CallFormatDescriptionCallback(uint64_t a1, unsigned int *a2)
{
  if (!*((void *)a2 + 1)) {
    return 0;
  }
  unsigned int v4 = a2[12];
  if (v4 != 1936684398)
  {
    if (v4 == 1986618469)
    {
      uint64_t v5 = *(void *)(a1 + 248);
      if (v5)
      {
        uint64_t v6 = *((void *)a2 + 8);
        uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v8 = v7 ? v7 : 0;
        uint64_t v14 = *(void (**)(uint64_t, void, uint64_t))(v8 + 56);
        if (v14) {
          v14(v5, *MEMORY[0x1E4F1FCF8], v6);
        }
      }
    }
    else
    {
      uint64_t v5 = 0;
    }
    goto LABEL_30;
  }
  signed int MediaSubType = CMFormatDescriptionGetMediaSubType(*((CMFormatDescriptionRef *)a2 + 8));
  uint64_t v5 = 0;
  if (MediaSubType <= 1902211170)
  {
    if (((MediaSubType - 1902207795) > 0x3D
       || ((1 << (MediaSubType - 51)) & 0x2020000000000001) == 0)
      && MediaSubType != 1902207331)
    {
      goto LABEL_30;
    }
    goto LABEL_28;
  }
  if (MediaSubType > 1902537826)
  {
    if (MediaSubType != 1902537827 && MediaSubType != 1903522657)
    {
      int v11 = 1902928227;
      goto LABEL_27;
    }
LABEL_28:
    uint64_t v5 = *(void *)(a1 + 256);
    if (!v5) {
      uint64_t v5 = *(void *)(a1 + 248);
    }
    goto LABEL_30;
  }
  if (MediaSubType == 1902211171) {
    goto LABEL_28;
  }
  int v11 = 1902469939;
LABEL_27:
  if (MediaSubType == v11) {
    goto LABEL_28;
  }
LABEL_30:
  uint64_t v15 = *(int *)(a1 + 32);
  *(_DWORD *)(a1 + 32) = 0;
  if ((int)v15 >= 1)
  {
    uint64_t v16 = v15;
    do
    {
      MEMORY[0x19970E2B0](*(void *)(a1 + 24));
      --v16;
    }
    while (v16);
  }
  uint64_t v9 = (*((uint64_t (**)(void, void, void, void, uint64_t))a2 + 1))(*(void *)(a1 + 8), *a2, *((void *)a2 + 4), *((void *)a2 + 8), v5);
  do
  {
    MEMORY[0x19970E290](*(void *)(a1 + 24));
    int v17 = *(_DWORD *)(a1 + 32) + 1;
    *(_DWORD *)(a1 + 32) = v17;
  }
  while (v17 < (int)v15);
  if (!v9)
  {
    if (*(unsigned char *)a1 || *(unsigned char *)(a1 + 2))
    {
      return 4294951251;
    }
    else
    {
      uint64_t v9 = 0;
      *((unsigned char *)a2 + 82) = 0;
    }
  }
  return v9;
}

uint64_t fragManifold_ObtainChunkInformation(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 168);
  if (v2)
  {
    uint64_t v4 = 0;
    uint64_t result = MovieSampleAccessorGetChunkDetails(v2, 0, (uint64_t *)(a1 + 184), (uint64_t *)(a1 + 192), (void *)(a1 + 200), &v4, (BOOL *)(a1 + 208), (BOOL *)(a1 + 209), (unsigned char *)(a1 + 210));
    if (!result)
    {
      if (*(unsigned char *)(a1 + 209)) {
        MovieSampleAccessorGetSampleDuration(*(void *)(a1 + 168), (CMTime *)(a1 + 212));
      }
      if (*(unsigned char *)(a1 + 208)) {
        MovieSampleAccessorGetSampleLocation(*(void *)(a1 + 168), 0, a1 + 240, 0);
      }
      return 0;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t fragManifold_SelectEligibleTrackForEmitting(uint64_t *a1)
{
  if (a1[20])
  {
    TrackCFIndex Count = MovieInformationGetTrackCount(a1[18]);
    if (TrackCount >= 1)
    {
      uint64_t v3 = 0;
      uint64_t v4 = a1[20];
      uint64_t v5 = 0x7FFFFFFFFFFFFFFFLL;
      do
      {
        if (*(void *)(v4 + 168) && *(void *)(v4 + 184) < v5)
        {
          uint64_t v3 = v4;
          uint64_t v5 = *(void *)(v4 + 184);
        }
        v4 += 256;
        --TrackCount;
      }
      while (TrackCount);
      if (v3)
      {
        a1[21] = v3;
        *(void *)(v3 + 248) = 0;
      }
    }
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t fragManifold_CallPushSampleCallback(uint64_t a1, unsigned int *a2, int a3, uint64_t a4)
{
  if (!*((void *)a2 + 2)) {
    return 0;
  }
  if (*((unsigned char *)a2 + 82))
  {
    uint64_t v8 = fragManifold_CallFormatDescriptionCallback(a1, a2);
    if (v8) {
      return v8;
    }
  }
  uint64_t v9 = *(int *)(a1 + 32);
  *(_DWORD *)(a1 + 32) = 0;
  if ((int)v9 >= 1)
  {
    uint64_t v10 = v9;
    do
    {
      MEMORY[0x19970E2B0](*(void *)(a1 + 24));
      --v10;
    }
    while (v10);
  }
  uint64_t v11 = (*((uint64_t (**)(void, void, void, BOOL, void, uint64_t))a2 + 2))(*(void *)(a1 + 8), *a2, *((void *)a2 + 4), a3 != 0, *(void *)(a1 + 72), a4);
  do
  {
    MEMORY[0x19970E290](*(void *)(a1 + 24));
    int v12 = *(_DWORD *)(a1 + 32) + 1;
    *(_DWORD *)(a1 + 32) = v12;
  }
  while (v12 < (int)v9);
  if (!v11)
  {
    uint64_t v11 = 4294951251;
    if (!*(unsigned char *)a1)
    {
      if (*(unsigned char *)(a1 + 2)) {
        return 4294951251;
      }
      else {
        return 0;
      }
    }
  }
  return v11;
}

uint64_t fragManifold_CallNewTrackCallback(uint64_t a1, unsigned int *a2)
{
  if (*((unsigned char *)a2 + 176)) {
    return 0;
  }
  uint64_t v3 = *(uint64_t (**)(void, void, void, void))(a1 + 40);
  if (!v3) {
    return 0;
  }
  uint64_t v5 = *(int *)(a1 + 32);
  *(_DWORD *)(a1 + 32) = 0;
  if ((int)v5 >= 1)
  {
    uint64_t v6 = v5;
    do
    {
      MEMORY[0x19970E2B0](*(void *)(a1 + 24));
      --v6;
    }
    while (v6);
    uint64_t v3 = *(uint64_t (**)(void, void, void, void))(a1 + 40);
  }
  uint64_t v7 = v3(*(void *)(a1 + 8), *(void *)(a1 + 48), a2[12], *a2);
  do
  {
    MEMORY[0x19970E290](*(void *)(a1 + 24));
    int v8 = *(_DWORD *)(a1 + 32) + 1;
    *(_DWORD *)(a1 + 32) = v8;
  }
  while (v8 < (int)v5);
  if (!v7)
  {
    uint64_t v7 = 4294951251;
    if (!*(unsigned char *)a1)
    {
      if (*(unsigned char *)(a1 + 2)) {
        return 4294951251;
      }
      else {
        return 0;
      }
    }
  }
  return v7;
}

void fragManifold_AppendAttributesToDictionary(void *key, void *value, CFMutableDictionaryRef theDict)
{
}

uint64_t fragManifold_FigCaptionGroupConverterOutputCallbackMPEG4Part30(uint64_t a1, uint64_t a2, CFMutableArrayRef *a3)
{
  if (!*a3)
  {
    CFMutableArrayRef Mutable = CFArrayCreateMutable(a3[1], 0, MEMORY[0x1E4F1D510]);
    *a3 = Mutable;
    if (!Mutable) {
      return 4294954510;
    }
  }
  uint64_t v5 = FigSampleBufferCreateForCaptionGroup();
  if (!v5) {
    CFArrayAppendValue(*a3, 0);
  }
  return v5;
}

void FigMovieGetSampleDependencyFlagsFromSampleAttachments(uint64_t a1, char *a2, unsigned char *a3, unsigned char *a4)
{
  if (a2)
  {
    if (FigCFDictionaryGetBooleanIfPresent()) {
      char v7 = 2;
    }
    else {
      char v7 = 0;
    }
    if (FigCFDictionaryGetBooleanIfPresent()) {
      v7 |= 8u;
    }
    if (FigCFDictionaryGetBooleanIfPresent()) {
      v7 |= 0x20u;
    }
    *a2 = v7;
  }
  if (a3)
  {
    FigCFDictionaryGetBooleanIfPresent();
    *a3 = 0;
  }
  if (a4)
  {
    FigCFDictionaryGetBooleanIfPresent();
    *a4 = 0;
  }
}

double FigMovieGetVideoDefaultTrackDimensionsFromFormatDescription(const opaqueCMFormatDescription *a1, int a2)
{
  signed int MediaSubType = CMFormatDescriptionGetMediaSubType(a1);
  if (!a2)
  {
    if (MediaSubType <= 1685480223)
    {
      if (MediaSubType == 1685468526) {
        return (double)CMVideoFormatDescriptionGetDimensions(a1).width;
      }
      unsigned __int16 v8 = 13680;
    }
    else
    {
      if (MediaSubType == 1685480224 || MediaSubType == 1685483632) {
        return (double)CMVideoFormatDescriptionGetDimensions(a1).width;
      }
      unsigned __int16 v8 = 25456;
    }
    if (MediaSubType != (v8 | 0x64760000))
    {
      uint64_t v5 = a1;
      Boolean v6 = 0;
      goto LABEL_3;
    }
    return (double)CMVideoFormatDescriptionGetDimensions(a1).width;
  }
  uint64_t v5 = a1;
  Boolean v6 = 1;
LABEL_3:

  *(void *)&double result = *(_OWORD *)&CMVideoFormatDescriptionGetPresentationDimensions(v5, 1u, v6);
  return result;
}

double FigMovieGetVideoDefaultCleanApertureDimensionsFromFormatDescription(const opaqueCMFormatDescription *a1)
{
  *(void *)&double result = *(_OWORD *)&CMVideoFormatDescriptionGetPresentationDimensions(a1, 1u, 1u);
  return result;
}

double FigMovieGetVideoDefaultEncodedPixelsDimensionsFromFormatDescription(const opaqueCMFormatDescription *a1)
{
  return (double)CMVideoFormatDescriptionGetDimensions(a1).width;
}

double FigMovieGetVideoDefaultProductionApertureDimensionsFromFormatDescription(const opaqueCMFormatDescription *a1)
{
  *(void *)&double result = *(_OWORD *)&CMVideoFormatDescriptionGetPresentationDimensions(a1, 1u, 0);
  return result;
}

uint64_t FigMovieGetDefaultMediaTimeScaleFromSample(opaqueCMSampleBuffer *a1, CMTimeScale *a2)
{
  if (CMSampleBufferGetNumSamples(a1))
  {
    uint64_t FormatDescription = CMSampleBufferGetFormatDescription(a1);
    if (FormatDescription)
    {
      uint64_t v5 = FormatDescription;
      CMMediaType MediaType = CMFormatDescriptionGetMediaType(FormatDescription);
      if (MediaType == 1986618469)
      {
        CMTimeScale timescale = 600;
        goto LABEL_10;
      }
      if (MediaType != 1936684398)
      {
        memset(&v10, 0, sizeof(v10));
        CMSampleBufferGetPresentationTimeStamp(&v10, a1);
        CMTimeScale timescale = v10.timescale;
        if (v10.timescale <= 600) {
          CMTimeScale timescale = 600;
        }
        goto LABEL_10;
      }
      MostCompatibleFormat = CMAudioFormatDescriptionGetMostCompatibleFormat(v5);
      if (MostCompatibleFormat)
      {
        CMTimeScale timescale = (int)MostCompatibleFormat->mASBD.mSampleRate;
LABEL_10:
        uint64_t result = 0;
        *a2 = timescale;
        return result;
      }
    }
  }
  return 4294954516;
}

uint64_t FigMovieCreateContiguousBBufFromNonContiguousAudioSample(opaqueCMSampleBuffer *a1, const __CFAllocator *a2, CMBlockBufferRef *a3, const __CFAllocator *a4, uint64_t *a5, void *a6)
{
  char v41 = 0;
  packetDescriptionsPointerOut = 0;
  CMBlockBufferRef blockBufferOut = 0;
  size_t packetDescriptionsSizeOut = 0;
  if (!a1) {
    goto LABEL_36;
  }
  if (!a3) {
    goto LABEL_36;
  }
  if (!a5) {
    goto LABEL_36;
  }
  if (!a6) {
    goto LABEL_36;
  }
  uint64_t FormatDescription = CMSampleBufferGetFormatDescription(a1);
  CMMediaType MediaType = CMFormatDescriptionGetMediaType(FormatDescription);
  CMBlockBufferRef DataBuffer = CMSampleBufferGetDataBuffer(a1);
  if (MediaType != 1936684398) {
    goto LABEL_36;
  }
  uint64_t v15 = DataBuffer;
  if (!DataBuffer) {
    goto LABEL_36;
  }
  uint64_t AudioStreamPacketDescriptionsPtr = isNonInterleavedPCMAudioFormatDescription(FormatDescription, &v41);
  if (AudioStreamPacketDescriptionsPtr) {
    goto LABEL_37;
  }
  if (v41) {
    goto LABEL_36;
  }
  uint64_t AudioStreamPacketDescriptionsPtr = CMBlockBufferCreateEmpty(a2, 0, 0, &blockBufferOut);
  if (!AudioStreamPacketDescriptionsPtr)
  {
    uint64_t AudioStreamPacketDescriptionsPtr = CMSampleBufferGetAudioStreamPacketDescriptionsPtr(a1, (const AudioStreamPacketDescription **)&packetDescriptionsPointerOut, &packetDescriptionsSizeOut);
    if (!AudioStreamPacketDescriptionsPtr)
    {
      if (packetDescriptionsSizeOut > 0xF)
      {
        size_t v17 = packetDescriptionsSizeOut >> 4;
        CFTypeID v18 = CFAllocatorAllocate(a4, 8 * (packetDescriptionsSizeOut >> 4), 0);
        if (v18)
        {
          uint64_t v19 = v18;
          int v35 = a3;
          size_t v36 = a5;
          long long v37 = a6;
          CFAllocatorRef allocator = a4;
          uint64_t v20 = 0;
          unint64_t v21 = 0;
          SInt64 v22 = 0;
          size_t v23 = 0;
          size_t v24 = 0;
          if (v17 <= 1) {
            uint64_t v25 = 1;
          }
          else {
            uint64_t v25 = v17;
          }
          uint64_t v26 = 8 * v25;
          char v27 = 1;
          while (1)
          {
            SInt64 mStartOffset = packetDescriptionsPointerOut[v20].mStartOffset;
            uint64_t mDataByteSize = packetDescriptionsPointerOut[v20].mDataByteSize;
            if (!v21 || v22 != mStartOffset)
            {
              if (v23)
              {
                uint64_t appended = CMBlockBufferAppendBufferReference(blockBufferOut, v15, v24, v23, 0);
                if (appended)
                {
                  uint64_t v31 = appended;
                  goto LABEL_35;
                }
                size_t v23 = 0;
              }
              size_t v24 = mStartOffset;
            }
            v19[v21 / 8] = mDataByteSize;
            if (v27)
            {
              if (*v19 != mDataByteSize) {
                char v27 = 0;
              }
            }
            else
            {
              char v27 = 0;
            }
            v23 += mDataByteSize;
            SInt64 v22 = mStartOffset + mDataByteSize;
            v21 += 8;
            ++v20;
            if (v26 == v21)
            {
              uint64_t v31 = CMBlockBufferAppendBufferReference(blockBufferOut, v15, v24, v23, 0);
              if (!v31)
              {
                *int v35 = blockBufferOut;
                if (v27) {
                  uint64_t v32 = 1;
                }
                else {
                  uint64_t v32 = v17;
                }
                *size_t v36 = v32;
                *long long v37 = v19;
                return v31;
              }
LABEL_35:
              CFAllocatorDeallocate(allocator, v19);
              goto LABEL_38;
            }
          }
        }
      }
LABEL_36:
      uint64_t AudioStreamPacketDescriptionsPtr = FigSignalErrorAt();
    }
  }
LABEL_37:
  uint64_t v31 = AudioStreamPacketDescriptionsPtr;
LABEL_38:
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  return v31;
}

uint64_t isNonInterleavedPCMAudioFormatDescription(const opaqueCMFormatDescription *a1, unsigned char *a2)
{
  if (CMFormatDescriptionGetMediaType(a1) != 1936684398) {
    goto LABEL_5;
  }
  MostCompatibleFormat = CMAudioFormatDescriptionGetMostCompatibleFormat(a1);
  if (MostCompatibleFormat)
  {
    if (MostCompatibleFormat->mASBD.mFormatID == 1819304813)
    {
      int v5 = (LOBYTE(MostCompatibleFormat->mASBD.mFormatFlags) >> 5) & 1;
LABEL_6:
      *a2 = v5;
      return 0;
    }
LABEL_5:
    LOBYTE(v5) = 0;
    goto LABEL_6;
  }

  return FigSignalErrorAt();
}

uint64_t FigMovieIsNonInterleavedPCMAudioSample(opaqueCMSampleBuffer *a1, unsigned char *a2)
{
  if (a1 && a2)
  {
    uint64_t FormatDescription = CMSampleBufferGetFormatDescription(a1);
    return isNonInterleavedPCMAudioFormatDescription(FormatDescription, a2);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigMovieGetAudioRollRecoveryValueFromSampleBufferAttachment(uint64_t a1, _WORD *a2, BOOL *a3, unsigned char *a4)
{
  if (a1 && a2 && a3 && a4)
  {
    BOOL v7 = FigCFDictionaryGetInt16IfPresent() != 0;
    FigCFDictionaryGetBooleanIfPresent();
    *a2 = 0;
    *a3 = v7;
    *a4 = 0;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigMovieCopySeamIdentifierFromSampleAttachment(const __CFDictionary *a1, CFTypeRef *a2)
{
  unsigned int value = 0;
  if (a1 && a2)
  {
    if (CFDictionaryGetValueIfPresent(a1, (const void *)*MEMORY[0x1E4F21A08], (const void **)&value)) {
      BOOL v3 = value == 0;
    }
    else {
      BOOL v3 = 1;
    }
    if (v3 || (CFTypeID v4 = CFGetTypeID(value), v4 != CFStringGetTypeID())) {
      *a2 = 0;
    }
    else {
      *a2 = CFRetain(value);
    }
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigMovieGetSeamUUIDBytesFromSampleAttachmentArray(const __CFArray *a1, CFIndex a2, CFUUIDBytes *a3)
{
  CFTypeRef cf = 0;
  if (!a1) {
    return 0;
  }
  CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, a2);
  if (FigMovieCopySeamIdentifierFromSampleAttachment(ValueAtIndex, &cf)) {
    goto LABEL_3;
  }
  if (!cf) {
    return 0;
  }
  if (CFStringGetLength((CFStringRef)cf) >= 36)
  {
    CFAllocatorRef v7 = CFGetAllocator(cf);
    CFUUIDRef v8 = CFUUIDCreateFromString(v7, (CFStringRef)cf);
    CFUUIDRef v6 = v8;
    if (v8)
    {
      *a3 = CFUUIDGetUUIDBytes(v8);
      uint64_t v5 = 1;
    }
    else
    {
      uint64_t v5 = 0;
    }
    goto LABEL_4;
  }
LABEL_3:
  uint64_t v5 = 0;
  CFUUIDRef v6 = 0;
LABEL_4:
  if (cf) {
    CFRelease(cf);
  }
  if (v6) {
    CFRelease(v6);
  }
  return v5;
}

uint64_t FigMovieGetAudioIndependentSampleDecoderRefreshCountFromSampleAttachment(uint64_t a1, _WORD *a2, unsigned char *a3)
{
  if (a1 && a2 && a3)
  {
    if (FigCFDictionaryGetInt16IfPresent()) {
      FigCFDictionaryGetBooleanIfPresent();
    }
    *a2 = 0;
    *a3 = 0;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigMovieGetVideoSyncSampleEntryFromSampleAttachment(uint64_t a1, unsigned char *a2, BOOL *a3)
{
  if (a1 && a2 && a3)
  {
    BOOL v5 = FigCFDictionaryGetIntIfPresent() != 0;
    uint64_t result = 0;
    *a2 = 0;
    *a3 = v5;
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t FigMovieGetVideoTemporalLayerEntryFromSampleAttachment(const __CFDictionary *a1, uint64_t a2, char *a3)
{
  __int16 v17 = 0;
  int v16 = 0;
  if (a1 && a2 && a3)
  {
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E4F1F1E0]);
    if (!Value)
    {
      int v12 = 0;
      char v14 = 0;
      goto LABEL_18;
    }
    if (FigCFDictionaryGetIntIfPresent())
    {
      if (FigCFDictionaryGetIntIfPresent())
      {
        if (FigCFDictionaryGetIntIfPresent())
        {
          if (FigCFDictionaryGetIntIfPresent())
          {
            CFDataRef v6 = (const __CFData *)CFDictionaryGetValue(Value, (const void *)*MEMORY[0x1E4F1EF70]);
            if (v6)
            {
              CFDataRef v7 = v6;
              CFTypeID v8 = CFGetTypeID(v6);
              if (v8 == CFDataGetTypeID() && CFDataGetLength(v7) == 4)
              {
                CFDataRef v9 = (const __CFData *)CFDictionaryGetValue(Value, (const void *)*MEMORY[0x1E4F1EF60]);
                if (v9)
                {
                  CFDataRef v10 = v9;
                  CFTypeID v11 = CFGetTypeID(v9);
                  if (v11 == CFDataGetTypeID()
                    && CFDataGetLength(v10) == 6
                    && FigCFDictionaryGetIntIfPresent())
                  {
                    LOBYTE(Value) = 0;
                    int v12 = *(_DWORD *)CFDataGetBytePtr(v7);
                    uint64_t BytePtr = CFDataGetBytePtr(v10);
                    int v16 = *(_DWORD *)BytePtr;
                    __int16 v17 = *((_WORD *)BytePtr + 2);
                    char v14 = 1;
LABEL_18:
                    uint64_t result = 0;
                    *(unsigned char *)a2 = (_BYTE)Value;
                    *(unsigned char *)(a2 + 1) = 0;
                    *(_DWORD *)(a2 + 2) = v12;
                    *(_DWORD *)(a2 + 6) = v16;
                    *(_WORD *)(a2 + 10) = v17;
                    *(unsigned char *)(a2 + 12) = 0;
                    *(_DWORD *)(a2 + 13) = 0;
                    *(_DWORD *)(a2 + 16) = 0;
                    *a3 = v14;
                    return result;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  return FigSignalErrorAt();
}

uint64_t FigMetricErrorEventDeserializeAndCopy(void *a1, uint64_t a2)
{
  long long v13 = *MEMORY[0x1E4F1F9F8];
  uint64_t v14 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  CFTypeRef v11 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v10 = 0;
  if (a1 && a2)
  {
    BOOL v3 = xpc_dictionary_get_BOOL(a1, "DidRecover");
    uint64_t CMTime = FigXPCMessageGetCMTime();
    if (!CMTime)
    {
      uint64_t CMTime = FigXPCMessageCopyCFDate();
      if (!CMTime)
      {
        uint64_t CMTime = FigXPCMessageCopyCFString();
        if (!CMTime)
        {
          uint64_t CMTime = FigXPCMessageCopyCFError();
          if (!CMTime)
          {
            uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
            long long v8 = v13;
            uint64_t v9 = v14;
            uint64_t CMTime = FigMetricErrorEventCreate(AllocatorForMedia, &v8, cf, v11, v3, v10, a2);
          }
        }
      }
    }
  }
  else
  {
    uint64_t CMTime = FigSignalErrorAt();
  }
  uint64_t v6 = CMTime;
  if (cf) {
    CFRelease(cf);
  }
  if (v11) {
    CFRelease(v11);
  }
  if (v10) {
    CFRelease(v10);
  }
  return v6;
}

uint64_t FigMetricErrorEventCreate(const __CFAllocator *a1, long long *a2, const void *a3, const void *a4, char a5, const void *a6, void *a7)
{
  if (a7)
  {
    FigMetricEventGetClassID();
    uint64_t v14 = CMDerivedObjectCreate();
    if (!v14)
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      uint64_t v16 = FigSimpleMutexCreate();
      *(void *)(DerivedStorage + 72) = v16;
      if (v16)
      {
        *(unsigned char *)uint64_t DerivedStorage = 1;
        *(void *)(DerivedStorage + 8) = 12;
        if (a3)
        {
          __int16 v17 = (void *)CFRetain(a3);
        }
        else
        {
          CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
          __int16 v17 = CFDateCreate(a1, Current);
        }
        *(void *)(DerivedStorage + 16) = v17;
        long long v19 = *a2;
        *(void *)(DerivedStorage + 48) = *((void *)a2 + 2);
        *(_OWORD *)(DerivedStorage + 32) = v19;
        if (a4) {
          CFTypeRef v20 = CFRetain(a4);
        }
        else {
          CFTypeRef v20 = 0;
        }
        *(void *)(DerivedStorage + 24) = v20;
        if (a6) {
          CFTypeRef v21 = CFRetain(a6);
        }
        else {
          CFTypeRef v21 = 0;
        }
        *(void *)(DerivedStorage + 64) = v21;
        *(unsigned char *)(DerivedStorage + 56) = a5;
        uint64_t v14 = FigMetricEventClassInstallEventDeserializeHandler();
        if (!v14) {
          *a7 = 0;
        }
      }
      else
      {
        return FigSignalErrorAt();
      }
    }
    return v14;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t mee_finalize()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  CFStringRef v1 = (const void *)DerivedStorage[8];
  if (v1) {
    CFRelease(v1);
  }
  uint64_t v2 = (const void *)DerivedStorage[2];
  if (v2) {
    CFRelease(v2);
  }
  BOOL v3 = (const void *)DerivedStorage[3];
  if (v3) {
    CFRelease(v3);
  }

  return FigSimpleMutexDestroy();
}

CFStringRef mee_copyDebugDesc(uint64_t a1)
{
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  return CFStringCreateWithFormat(AllocatorForMedia, 0, @"[FigMetricErrorEvent %p]", a1);
}

void mee_setImmutable()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 72));
  *(unsigned char *)uint64_t DerivedStorage = 0;

  JUMPOUT(0x19970E930);
}

uint64_t mee_isMutable()
{
  uint64_t DerivedStorage = (unsigned __int8 *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*((void *)DerivedStorage + 9));
  uint64_t v1 = *DerivedStorage;
  MEMORY[0x19970E930](*((void *)DerivedStorage + 9));
  return v1;
}

uint64_t mee_getMetricEventID()
{
  return *(void *)(CMBaseObjectGetDerivedStorage() + 8);
}

uint64_t mee_getDate()
{
  return *(void *)(CMBaseObjectGetDerivedStorage() + 16);
}

CFTypeRef mee_copySessionID()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 72));
  uint64_t v1 = *(const void **)(DerivedStorage + 24);
  if (v1) {
    CFTypeRef v2 = CFRetain(v1);
  }
  else {
    CFTypeRef v2 = 0;
  }
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 72));
  return v2;
}

uint64_t mee_setSessionID(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 72));
  if (*(unsigned char *)DerivedStorage)
  {
    CFTypeID v4 = *(const void **)(DerivedStorage + 24);
    *(void *)(DerivedStorage + 24) = a2;
    if (a2) {
      CFRetain(a2);
    }
    if (v4) {
      CFRelease(v4);
    }
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = FigSignalErrorAt();
  }
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 72));
  return v5;
}

void mee_getMediaTime(uint64_t a1@<X8>)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 72));
  *(_OWORD *)a1 = *(_OWORD *)(DerivedStorage + 32);
  *(void *)(a1 + 16) = *(void *)(DerivedStorage + 48);

  JUMPOUT(0x19970E930);
}

uint64_t mee_setMediaTime(uint64_t a1, long long *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 72));
  if (*(unsigned char *)DerivedStorage)
  {
    uint64_t v4 = 0;
    long long v5 = *a2;
    *(void *)(DerivedStorage + 48) = *((void *)a2 + 2);
    *(_OWORD *)(DerivedStorage + 32) = v5;
  }
  else
  {
    uint64_t v4 = FigSignalErrorAt();
  }
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 72));
  return v4;
}

uint64_t mee_serialize(uint64_t a1, void *a2)
{
  void (*v10)(long long *__return_ptr, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t);
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t);
  uint64_t v23;
  uint64_t v24;
  unsigned int (*v25)(uint64_t);
  BOOL v26;
  long long v28;
  uint64_t v29;
  uint64_t vars8;

  if (a1 && a2)
  {
    uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v4) {
      uint64_t v5 = v4;
    }
    else {
      uint64_t v5 = 0;
    }
    uint64_t v6 = *(uint64_t (**)(uint64_t))(v5 + 24);
    if (v6) {
      int64_t v7 = v6(a1);
    }
    else {
      int64_t v7 = -12782;
    }
    xpc_dictionary_set_int64(a2, "EventID", v7);
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    CFTypeRef v10 = *(void (**)(long long *__return_ptr, uint64_t))(v9 + 56);
    if (v10)
    {
      v10(&v28, a1);
    }
    else
    {
      uint64_t v28 = *MEMORY[0x1E4F1F9F8];
      CFTypeRef v29 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
    }
    CFTypeRef v11 = FigXPCMessageSetCMTime();
    if (v11) {
      return v11;
    }
    int v12 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v12) {
      long long v13 = v12;
    }
    else {
      long long v13 = 0;
    }
    uint64_t v14 = *(void (**)(uint64_t))(v13 + 32);
    if (v14) {
      v14(a1);
    }
    CFTypeRef v11 = FigXPCMessageSetCFDate();
    if (v11) {
      return v11;
    }
    uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v15) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = 0;
    }
    __int16 v17 = *(uint64_t (**)(uint64_t))(v16 + 40);
    if (v17) {
      CFTypeID v18 = (const void *)v17(a1);
    }
    else {
      CFTypeID v18 = 0;
    }
    long long v19 = FigXPCMessageSetCFString();
    if (!v19)
    {
      CFTypeRef v20 = *(void *)(CMBaseObjectGetVTable() + 24);
      if (v20) {
        CFTypeRef v21 = v20;
      }
      else {
        CFTypeRef v21 = 0;
      }
      SInt64 v22 = *(void (**)(uint64_t))(v21 + 8);
      if (v22) {
        v22(a1);
      }
      FigXPCMessageSetCFError();
      size_t v23 = *(void *)(CMBaseObjectGetVTable() + 24);
      if (v23) {
        size_t v24 = v23;
      }
      else {
        size_t v24 = 0;
      }
      uint64_t v25 = *(unsigned int (**)(uint64_t))(v24 + 16);
      if (v25) {
        uint64_t v26 = v25(a1) != 0;
      }
      else {
        uint64_t v26 = 0;
      }
      xpc_dictionary_set_BOOL(a2, "DidRecover", v26);
    }
    if (v18) {
      CFRelease(v18);
    }
    return v19;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t mee_getError()
{
  return *(void *)(CMBaseObjectGetDerivedStorage() + 64);
}

uint64_t mee_didRecover()
{
  return *(unsigned __int8 *)(CMBaseObjectGetDerivedStorage() + 56);
}

uint64_t FigClosedCaptionGetClosedCaptionTypeAndChannelNumber(const __CFString *a1, int *a2, SInt32 *a3)
{
  if (!a1) {
    return 0;
  }
  int v6 = 1681272888;
  CFStringRef v7 = @"CC";
  HasPrefidouble x = closedCaptionHasPrefix(a1, @"CC");
  if (!HasPrefix)
  {
    CFStringRef v7 = @"Service";
    if (!closedCaptionHasPrefix(a1, @"Service")) {
      return 0;
    }
    int v6 = 1681338424;
  }
  CFIndex Length = CFStringGetLength(v7);
  if (!Length) {
    return 0;
  }
  CFIndex v10 = Length;
  v17.length = CFStringGetLength(a1) - Length;
  v17.location = v10;
  CFStringRef v11 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a1, v17);
  IntCFDictionaryRef Value = CFStringGetIntValue(v11);
  if (HasPrefix) {
    int v13 = 4;
  }
  else {
    int v13 = 63;
  }
  if (IntValue < 1 || v13 < IntValue)
  {
    uint64_t v15 = 0;
    if (!v11) {
      return v15;
    }
    goto LABEL_22;
  }
  if (a2) {
    *a2 = v6;
  }
  if (a3) {
    *a3 = IntValue;
  }
  uint64_t v15 = 1;
  if (v11) {
LABEL_22:
  }
    CFRelease(v11);
  return v15;
}

BOOL closedCaptionHasPrefix(const __CFString *a1, const __CFString *a2)
{
  CFIndex Length = CFStringGetLength(a1);
  if (Length < CFStringGetLength(a2)) {
    return 0;
  }
  v8.length = CFStringGetLength(a2);
  v8.location = 0;
  CFStringRef v6 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a1, v8);
  BOOL v5 = CFStringCompare(v6, a2, 1uLL) == kCFCompareEqualTo;
  if (v6) {
    CFRelease(v6);
  }
  return v5;
}

uint64_t FigClosedCaptionGetClosedCaptionServiceFormatAndServiceIndexFromFormatDescription(const opaqueCMFormatDescription *a1, unsigned int *a2, unsigned int *a3)
{
  *(void *)buffer = 0;
  if (a1 && a2 && a3)
  {
    CFDictionaryRef Extension = (const __CFDictionary *)CMFormatDescriptionGetExtension(a1, (CFStringRef)*MEMORY[0x1E4F1EE20]);
    if (Extension)
    {
      CFDictionaryRef v6 = Extension;
      CFTypeID v7 = CFGetTypeID(Extension);
      if (v7 != CFDictionaryGetTypeID()) {
        return 4294950853;
      }
      CFDataRef Value = (const __CFData *)CFDictionaryGetValue(v6, @"cccc");
      if (Value)
      {
        CFDataRef v9 = Value;
        CFTypeID v10 = CFGetTypeID(Value);
        if (v10 == CFDataGetTypeID() && CFDataGetLength(v9) == 8)
        {
          v16.location = 0;
          v16.length = 4;
          CFDataGetBytes(v9, v16, &buffer[4]);
          v17.location = 4;
          v17.length = 4;
          CFDataGetBytes(v9, v17, buffer);
          unsigned int v11 = bswap32(*(unsigned int *)&buffer[4]);
          unsigned int v12 = bswap32(*(unsigned int *)buffer);
LABEL_11:
          uint64_t result = 0;
          *a2 = v11;
          *a3 = v12;
          return result;
        }
        return 4294950853;
      }
    }
    unsigned int v12 = 0;
    unsigned int v11 = 0;
    goto LABEL_11;
  }

  return FigSignalErrorAt();
}

uint64_t FigClosedCaptionCreateClosedCaptionChannelStringFromFormatDescription(const __CFAllocator *a1, const opaqueCMFormatDescription *a2, CFStringRef *a3)
{
  unsigned int v10 = 0;
  int v9 = 0;
  if (a2 && a3)
  {
    uint64_t result = FigClosedCaptionGetClosedCaptionServiceFormatAndServiceIndexFromFormatDescription(a2, &v10, (unsigned int *)&v9);
    if (result) {
      return result;
    }
    switch(v10)
    {
      case 0u:
        goto LABEL_12;
      case 0x64363038u:
        CFDictionaryRef v6 = @"CC";
        break;
      case 0x64373038u:
        CFDictionaryRef v6 = @"Service";
        break;
      default:
        return 4294950853;
    }
    if (!v9)
    {
LABEL_12:
      CFStringRef v8 = 0;
LABEL_18:
      uint64_t result = 0;
      *a3 = v8;
      return result;
    }
    if (v10 == 1681272888) {
      signed int v7 = 4;
    }
    else {
      signed int v7 = 63;
    }
    uint64_t result = 4294950853;
    if (v9 >= 1 && v7 >= v9)
    {
      CFStringRef v8 = CFStringCreateWithFormat(a1, 0, @"%@%d", v6, v9);
      goto LABEL_18;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

__n128 FigCaptionLayoutClearMAXCaptionSettings(uint64_t a1)
{
  CFTypeRef v2 = *(const void **)a1;
  if (v2)
  {
    CFRelease(v2);
    *(void *)a1 = 0;
  }
  BOOL v3 = *(const void **)(a1 + 8);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 8) = 0;
  }
  uint64_t v4 = *(const void **)(a1 + 16);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 16) = 0;
  }
  BOOL v5 = *(const void **)(a1 + 24);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(a1 + 24) = 0;
  }
  CFDictionaryRef v6 = *(const void **)(a1 + 40);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(a1 + 40) = 0;
  }
  signed int v7 = *(const void **)(a1 + 48);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(a1 + 48) = 0;
  }
  CFStringRef v8 = *(const void **)(a1 + 56);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(a1 + 56) = 0;
  }
  int v9 = *(const void **)(a1 + 64);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(a1 + 64) = 0;
  }
  unsigned int v10 = *(const void **)(a1 + 72);
  if (v10)
  {
    CFRelease(v10);
    *(void *)(a1 + 72) = 0;
  }
  unsigned int v11 = *(const void **)(a1 + 80);
  if (v11)
  {
    CFRelease(v11);
    *(void *)(a1 + 80) = 0;
  }
  unsigned int v12 = *(const void **)(a1 + 88);
  if (v12)
  {
    CFRelease(v12);
    *(void *)(a1 + 88) = 0;
  }
  int v13 = *(const void **)(a1 + 96);
  if (v13)
  {
    CFRelease(v13);
    *(void *)(a1 + 96) = 0;
  }
  *(void *)(a1 + 32) = 0x3FF0000000000000;
  *(void *)(a1 + 120) = 0x3FF0000000000000;
  __asm { FMOV            V0.2D, #1.0 }
  *(__n128 *)(a1 + 104) = result;
  *(void *)(a1 + 136) = 0;
  return result;
}

void FigCaptionLayoutCopyMAXCaptionSystemSettings(uint64_t a1)
{
  MACaptionAppearanceBehavior v42 = kMACaptionAppearanceBehaviorUseValue;
  behavior[0] = kMACaptionAppearanceBehaviorUseValue;
  MACaptionAppearanceBehavior v40 = kMACaptionAppearanceBehaviorUseValue;
  uint64_t v41 = 1;
  MACaptionAppearanceBehavior v38 = kMACaptionAppearanceBehaviorUseValue;
  MACaptionAppearanceBehavior v39 = kMACaptionAppearanceBehaviorUseValue;
  MACaptionAppearanceBehavior v36 = kMACaptionAppearanceBehaviorUseValue;
  MACaptionAppearanceBehavior v37 = kMACaptionAppearanceBehaviorUseValue;
  CGColorRef v2 = MACaptionAppearanceCopyForegroundColor(kMACaptionAppearanceDomainUser, behavior);
  CGColorRef cf = MACaptionAppearanceCopyBackgroundColor(kMACaptionAppearanceDomainUser, &v42);
  CFTypeRef v34 = (CFTypeRef)MACaptionAppearanceCopyStrokeColor();
  CGColorRef v33 = MACaptionAppearanceCopyWindowColor(kMACaptionAppearanceDomainUser, &v40);
  CGFloat WindowRoundedCornerRadius = MACaptionAppearanceGetWindowRoundedCornerRadius(kMACaptionAppearanceDomainUser, 0);
  CTFontDescriptorRef v4 = MACaptionAppearanceCopyFontDescriptorForStyle(kMACaptionAppearanceDomainUser, 0, kMACaptionAppearanceFontStyleDefault);
  CTFontDescriptorRef v32 = MACaptionAppearanceCopyFontDescriptorForStyle(kMACaptionAppearanceDomainUser, 0, kMACaptionAppearanceFontStyleMonospacedWithSerif);
  CTFontDescriptorRef v5 = MACaptionAppearanceCopyFontDescriptorForStyle(kMACaptionAppearanceDomainUser, 0, kMACaptionAppearanceFontStyleProportionalWithSerif);
  CTFontDescriptorRef v6 = MACaptionAppearanceCopyFontDescriptorForStyle(kMACaptionAppearanceDomainUser, 0, kMACaptionAppearanceFontStyleMonospacedWithoutSerif);
  CTFontDescriptorRef v7 = MACaptionAppearanceCopyFontDescriptorForStyle(kMACaptionAppearanceDomainUser, 0, kMACaptionAppearanceFontStyleProportionalWithoutSerif);
  CTFontDescriptorRef v8 = MACaptionAppearanceCopyFontDescriptorForStyle(kMACaptionAppearanceDomainUser, 0, kMACaptionAppearanceFontStyleCasual);
  CTFontDescriptorRef v9 = MACaptionAppearanceCopyFontDescriptorForStyle(kMACaptionAppearanceDomainUser, 0, kMACaptionAppearanceFontStyleCursive);
  CTFontDescriptorRef v10 = MACaptionAppearanceCopyFontDescriptorForStyle(kMACaptionAppearanceDomainUser, 0, kMACaptionAppearanceFontStyleSmallCapital);
  ForegroundOpacitdouble y = MACaptionAppearanceGetForegroundOpacity(kMACaptionAppearanceDomainUser, 0);
  BackgroundOpacitdouble y = MACaptionAppearanceGetBackgroundOpacity(kMACaptionAppearanceDomainUser, &v39);
  WindowOpacitdouble y = MACaptionAppearanceGetWindowOpacity(kMACaptionAppearanceDomainUser, &v38);
  CGFloat RelativeCharacterSize = MACaptionAppearanceGetRelativeCharacterSize(kMACaptionAppearanceDomainUser, &v37);
  MACaptionAppearanceTextEdgeStyle TextEdgeStyle = MACaptionAppearanceGetTextEdgeStyle(kMACaptionAppearanceDomainUser, &v36);
  uint64_t v15 = *(const void **)a1;
  *(void *)a1 = v2;
  if (v2) {
    CFRetain(v2);
  }
  if (v15) {
    CFRelease(v15);
  }
  CFRange v16 = *(const void **)(a1 + 8);
  *(void *)(a1 + 8) = cf;
  if (cf) {
    CFRetain(cf);
  }
  if (v16) {
    CFRelease(v16);
  }
  CFRange v17 = *(const void **)(a1 + 16);
  *(void *)(a1 + 16) = v34;
  if (v34) {
    CFRetain(v34);
  }
  if (v17) {
    CFRelease(v17);
  }
  CFTypeID v18 = *(const void **)(a1 + 24);
  *(void *)(a1 + 24) = v33;
  if (v33) {
    CFRetain(v33);
  }
  if (v18) {
    CFRelease(v18);
  }
  long long v19 = *(const void **)(a1 + 40);
  *(void *)(a1 + 40) = v4;
  if (v4) {
    CFRetain(v4);
  }
  if (v19) {
    CFRelease(v19);
  }
  CFTypeRef v20 = *(const void **)(a1 + 48);
  *(void *)(a1 + 48) = v32;
  if (v32) {
    CFRetain(v32);
  }
  if (v20) {
    CFRelease(v20);
  }
  CFTypeRef v21 = *(const void **)(a1 + 56);
  *(void *)(a1 + 56) = v5;
  if (v5) {
    CFRetain(v5);
  }
  if (v21) {
    CFRelease(v21);
  }
  SInt64 v22 = *(const void **)(a1 + 64);
  *(void *)(a1 + 64) = v6;
  if (v6) {
    CFRetain(v6);
  }
  if (v22) {
    CFRelease(v22);
  }
  size_t v23 = *(const void **)(a1 + 72);
  *(void *)(a1 + 72) = v7;
  if (v7) {
    CFRetain(v7);
  }
  if (v23) {
    CFRelease(v23);
  }
  size_t v24 = *(const void **)(a1 + 80);
  *(void *)(a1 + 80) = v8;
  if (v8) {
    CFRetain(v8);
  }
  if (v24) {
    CFRelease(v24);
  }
  uint64_t v25 = *(const void **)(a1 + 88);
  *(void *)(a1 + 88) = v9;
  if (v9) {
    CFRetain(v9);
  }
  if (v25) {
    CFRelease(v25);
  }
  uint64_t v26 = *(const void **)(a1 + 96);
  *(void *)(a1 + 96) = v10;
  if (v10) {
    CFRetain(v10);
  }
  if (v26) {
    CFRelease(v26);
  }
  *(CGFloat *)(a1 + 32) = WindowRoundedCornerRadius;
  *(CGFloat *)(a1 + 120) = BackgroundOpacity;
  *(CGFloat *)(a1 + 128) = WindowOpacity;
  *(CGFloat *)(a1 + 104) = RelativeCharacterSize;
  *(CGFloat *)(a1 + 112) = ForegroundOpacity;
  MACaptionAppearanceBehavior v27 = behavior[0];
  *(void *)(a1 + 136) = TextEdgeStyle;
  *(void *)(a1 + 144) = v27;
  uint64_t v28 = v41;
  *(void *)(a1 + 152) = v42;
  *(void *)(a1 + 160) = v28;
  MACaptionAppearanceBehavior v29 = v40;
  *(void *)(a1 + 168) = v39;
  *(void *)(a1 + 176) = v29;
  MACaptionAppearanceBehavior v30 = v37;
  *(void *)(a1 + 184) = v38;
  *(void *)(a1 + 192) = v30;
  *(void *)(a1 + 200) = v36;
  if (v4) {
    CFRelease(v4);
  }
  if (v32) {
    CFRelease(v32);
  }
  if (v5) {
    CFRelease(v5);
  }
  if (v6) {
    CFRelease(v6);
  }
  if (v7) {
    CFRelease(v7);
  }
  if (v8) {
    CFRelease(v8);
  }
  if (v9) {
    CFRelease(v9);
  }
  if (v10) {
    CFRelease(v10);
  }
  if (v33) {
    CFRelease(v33);
  }
  if (v34) {
    CFRelease(v34);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v2) {
    CFRelease(v2);
  }
}

int64x2_t FigCaptionLayoutGetMAXSettingsForPreferringContentAsAuthored@<Q0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 32) = 0x3FF0000000000000;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)(a1 + 104) = _Q0;
  *(_OWORD *)(a1 + 120) = _Q0;
  *(_OWORD *)(a1 + 136) = xmmword_194996620;
  int64x2_t result = vdupq_n_s64(1uLL);
  *(int64x2_t *)(a1 + 152) = result;
  *(int64x2_t *)(a1 + 168) = result;
  *(int64x2_t *)(a1 + 184) = result;
  *(void *)(a1 + 200) = 1;
  return result;
}

double FigCaptionLayoutCellSizeForRect(int a1, double a2, double a3, double a4, double a5)
{
  double v5 = 16.0;
  if (a1 != 1) {
    double v5 = 4.0;
  }
  double v6 = 9.0;
  if (a1 != 1) {
    double v6 = 3.0;
  }
  double v7 = a5 * v5 / v6;
  if (v7 > a4) {
    double v7 = v5 * (a4 * v6 / v5) / v6;
  }
  double v8 = v7 * 0.800000012;
  double v9 = 32.0;
  if (a1 == 1) {
    double v9 = 42.0;
  }
  return v8 / v9;
}

CTFontRef FigCaptionLayoutCreateCTFontWithOptions(__CFString *a1, int a2, CGFloat a3)
{
  keys[1] = *(void **)MEMORY[0x1E4F143B8];
  CTFontSymbolicTraits v4 = a2 != 0;
  double v5 = (void *)*MEMORY[0x1E4F245A8];
  double v6 = @"CourierNewPSMT";
  if (a1) {
    double v6 = a1;
  }
  values = v6;
  keys[0] = v5;
  CFDictionaryRef v7 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)keys, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  double v8 = CTFontDescriptorCreateWithAttributes(v7);
  CopyWithSymbolicTraits = CTFontDescriptorCreateCopyWithSymbolicTraits(v8, v4, 3u);
  if (!CopyWithSymbolicTraits)
  {
    if (!v8)
    {
      CTFontRef v11 = CTFontCreateWithFontDescriptor(0, a3, 0);
      if (!v7) {
        return v11;
      }
      goto LABEL_11;
    }
    unsigned int v12 = (const __CTFontDescriptor *)CFRetain(v8);
    CTFontRef v11 = CTFontCreateWithFontDescriptor(v12, a3, 0);
    if (v12) {
      CFRelease(v12);
    }
    goto LABEL_9;
  }
  CTFontDescriptorRef v10 = CopyWithSymbolicTraits;
  CTFontRef v11 = CTFontCreateWithFontDescriptor(CopyWithSymbolicTraits, a3, 0);
  CFRelease(v10);
  if (v8) {
LABEL_9:
  }
    CFRelease(v8);
  if (v7) {
LABEL_11:
  }
    CFRelease(v7);
  return v11;
}

CGFloat FigCaptionLayoutStandardCaptionRect(int a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  double v9 = 16.0;
  if (a1 == 1)
  {
    double v10 = 9.0;
  }
  else
  {
    double v9 = 4.0;
    double v10 = 3.0;
  }
  double v11 = a5 * v9 / v10;
  double v12 = a5;
  if (v11 > a4)
  {
    double v12 = a4 * v10 / v9;
    double v11 = v9 * v12 / v10;
  }
  CGFloat v13 = v12 * 0.800000012;
  CGFloat v14 = v11 * 0.800000012;
  v18.origin.double x = a2;
  v18.origin.double y = a3;
  v18.size.double width = a4;
  v18.size.double height = a5;
  double Width = CGRectGetWidth(v18);
  v19.origin.double x = a2;
  v19.origin.double y = a3;
  v19.size.double width = v14;
  v19.size.double height = v13;
  CGFloat v16 = a2 + (Width - CGRectGetWidth(v19)) * 0.5;
  v20.origin.double x = a2;
  v20.origin.double y = a3;
  v20.size.double width = a4;
  v20.size.double height = a5;
  CGRectGetHeight(v20);
  v21.origin.double x = v16;
  v21.origin.double y = a3;
  v21.size.double width = v14;
  v21.size.double height = v13;
  CGRectGetHeight(v21);
  return v16;
}

double FigCaptionLayoutExpandedCaptionRect(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  double v8 = CGRectGetWidth(*(CGRect *)&a1) * 0.1;
  v16.origin.double x = a1;
  v16.origin.double y = a2;
  v16.size.double width = a3;
  v16.size.double height = a4;
  double v9 = CGRectGetHeight(v16) * 0.1;
  CGFloat v10 = a1;
  CGFloat v11 = a2;
  CGFloat v12 = a3;
  CGFloat v13 = a4;

  *(void *)&double result = (unint64_t)CGRectInset(*(CGRect *)&v10, v8, v9);
  return result;
}

uint64_t cclayout_printCFDataRects(const void *a1)
{
  CFTypeID v2 = CFGetTypeID(a1);
  if (v2 == CFArrayGetTypeID())
  {
    if (a1)
    {
      CFIndex Count = CFArrayGetCount((CFArrayRef)a1);
      uint64_t result = fprintf((FILE *)*MEMORY[0x1E4F143D8], "numValues %d\n", Count);
      if (Count >= 1)
      {
        for (CFIndex i = 0; i != Count; ++i)
        {
          CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)a1, i);
          uint64_t result = cclayout_printCFDataRects(ValueAtIndex);
        }
      }
    }
    else
    {
      return fprintf((FILE *)*MEMORY[0x1E4F143D8], "numValues %d\n");
    }
  }
  else
  {
    CFTypeID v7 = CFGetTypeID(a1);
    uint64_t result = CFDataGetTypeID();
    if (v7 == result)
    {
      uint64_t BytePtr = CFDataGetBytePtr((CFDataRef)a1);
      CGFloat v9 = *(double *)BytePtr;
      CGFloat v10 = *((double *)BytePtr + 1);
      CGFloat v11 = *((double *)BytePtr + 2);
      CGFloat v12 = *((double *)BytePtr + 3);
      CGFloat v13 = (FILE *)*MEMORY[0x1E4F143D8];
      v14.origin.double x = *(CGFloat *)BytePtr;
      v14.origin.double y = v10;
      v14.size.double width = v11;
      v14.size.double height = v12;
      CGRectGetMinX(v14);
      v15.origin.double x = v9;
      v15.origin.double y = v10;
      v15.size.double width = v11;
      v15.size.double height = v12;
      CGRectGetMinY(v15);
      v16.origin.double x = v9;
      v16.origin.double y = v10;
      v16.size.double width = v11;
      v16.size.double height = v12;
      CGRectGetMaxX(v16);
      v17.origin.double x = v9;
      v17.origin.double y = v10;
      v17.size.double width = v11;
      v17.size.double height = v12;
      CGRectGetMaxY(v17);
      v18.origin.double x = v9;
      v18.origin.double y = v10;
      v18.size.double width = v11;
      v18.size.double height = v12;
      CGRectGetWidth(v18);
      v19.origin.double x = v9;
      v19.origin.double y = v10;
      v19.size.double width = v11;
      v19.size.double height = v12;
      CGRectGetHeight(v19);
      return fprintf(v13, "Rect minX:%f minY:%f maxX:%f maxY:%f width:%f height:%f\n");
    }
  }
  return result;
}

CFAttributedStringRef FigCaptionLayoutCreateJoinedStringFromElementWithSeparator(CFArrayRef theArray, const __CFString *a2)
{
  CFArrayRef v3 = theArray;
  if (theArray) {
    CFIndex Count = CFArrayGetCount(theArray);
  }
  else {
    CFIndex Count = 0;
  }
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFAttributedStringRef aStr = CFAttributedStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFAttributedStringBeginEditing(aStr);
  if (Count >= 1)
  {
    CFIndex v6 = 0;
    CFIndex v53 = Count;
    CFStringRef v52 = a2;
    CFArrayRef v51 = v3;
    CFAllocatorRef alloc = v5;
    do
    {
      CFArrayRef ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(v3, v6);
      CFArrayRef v8 = ValueAtIndex;
      if (ValueAtIndex) {
        CFIndex v9 = CFArrayGetCount(ValueAtIndex);
      }
      else {
        CFIndex v9 = 0;
      }
      CFMutableArrayRef Mutable = CFAttributedStringCreateMutable(v5, 0);
      CFAttributedStringBeginEditing(Mutable);
      if (v9 >= 1)
      {
        for (CFIndex i = 0; i != v9; ++i)
        {
          CFDictionaryRef v12 = (const __CFDictionary *)CFArrayGetValueAtIndex(v8, i);
          CFAttributedStringRef Value = (const __CFAttributedString *)CFDictionaryGetValue(v12, @"S");
          v71.location = CFAttributedStringGetLength(Mutable);
          v71.length = 0;
          CFAttributedStringReplaceAttributedString(Mutable, v71, Value);
        }
      }
      CFAttributedStringEndEditing(Mutable);
      CFStringRef String = CFAttributedStringGetString(Mutable);
      CFIndex Length = CFStringGetLength(String);
      CFCharacterSetRef Predefined = CFCharacterSetGetPredefined(kCFCharacterSetWhitespace);
      theCFStringRef String = String;
      uint64_t v67 = 0;
      CFIndex v68 = Length;
      CharactersPtr = CFStringGetCharactersPtr(String);
      CStringPtr = 0;
      uint64_t v65 = CharactersPtr;
      if (!CharactersPtr) {
        CStringPtr = CFStringGetCStringPtr(String, 0x600u);
      }
      long long v62 = 0u;
      long long v63 = 0u;
      long long v60 = 0u;
      long long v61 = 0u;
      long long v58 = 0u;
      long long v59 = 0u;
      *(_OWORD *)buffer = 0u;
      long long v57 = 0u;
      uint64_t v66 = CStringPtr;
      CFIndex v69 = 0;
      CFIndex v70 = 0;
      if (Length < 1)
      {
        CFIndex v20 = 0;
        CFIndex v31 = 0;
      }
      else
      {
        uint64_t v19 = 0;
        CFIndex v20 = 0;
        uint64_t v21 = 64;
        while (1)
        {
          uint64_t v22 = (unint64_t)v20 >= 4 ? 4 : v20;
          CFIndex v23 = v68;
          if (v68 <= v20)
          {
            UniChar v24 = 0;
          }
          else if (v65)
          {
            UniChar v24 = v65[v20 + v67];
          }
          else if (v66)
          {
            UniChar v24 = v66[v67 + v20];
          }
          else
          {
            CFIndex v25 = v69;
            if (v70 <= v20 || v69 > v20)
            {
              uint64_t v27 = v22 + v19;
              uint64_t v28 = v21 - v22;
              CFIndex v29 = v20 - v22;
              CFIndex v30 = v29 + 64;
              if (v29 + 64 >= v68) {
                CFIndex v30 = v68;
              }
              CFIndex v69 = v29;
              CFIndex v70 = v30;
              if (v68 >= v28) {
                CFIndex v23 = v28;
              }
              v72.length = v23 + v27;
              v72.location = v29 + v67;
              CFStringGetCharacters(theString, v72, buffer);
              CFIndex v25 = v69;
            }
            UniChar v24 = buffer[v20 - v25];
          }
          if (!CFCharacterSetIsCharacterMember(Predefined, v24)) {
            break;
          }
          ++v20;
          --v19;
          ++v21;
          if (Length == v20) {
            goto LABEL_40;
          }
        }
        if (Length == v20)
        {
LABEL_40:
          CFIndex v31 = 0;
          CFIndex v20 = Length;
          goto LABEL_65;
        }
        CFIndex v31 = 0;
        CFIndex v32 = -Length;
        CFIndex v33 = Length + 64;
        uint64_t v34 = Length;
        while (1)
        {
          uint64_t v35 = (unint64_t)v34 >= 5 ? 5 : v34;
          CFIndex v36 = v68;
          if (v68 >= v34)
          {
            if (v65)
            {
              UniChar v37 = v65[v34 - 1 + v67];
            }
            else if (v66)
            {
              UniChar v37 = v66[v67 - 1 + v34];
            }
            else
            {
              CFIndex v38 = v69;
              if (v70 < v34 || v69 >= v34)
              {
                uint64_t v40 = v35 + v32;
                CFIndex v41 = v33 - v35;
                uint64_t v42 = v34 - v35;
                uint64_t v43 = v42 + 64;
                if (v42 + 64 >= v68) {
                  uint64_t v43 = v68;
                }
                CFIndex v69 = v42;
                CFIndex v70 = v43;
                if (v68 >= v41) {
                  CFIndex v36 = v41;
                }
                v73.length = v36 + v40;
                v73.location = v42 + v67;
                CFStringGetCharacters(theString, v73, buffer);
                CFIndex v38 = v69;
              }
              UniChar v37 = buffer[v34 - 1 - v38];
            }
          }
          else
          {
            UniChar v37 = 0;
          }
          if (!CFCharacterSetIsCharacterMember(Predefined, v37)) {
            break;
          }
          ++v31;
          ++v32;
          --v33;
          if (!--v34)
          {
            CFIndex v31 = Length;
            break;
          }
        }
        CFArrayRef v3 = v51;
        a2 = v52;
      }
LABEL_65:
      v76.length = Length - (v20 + v31);
      CFAllocatorRef v5 = alloc;
      v76.location = v20;
      CFAttributedStringRef v44 = CFAttributedStringCreateWithSubstring(alloc, Mutable, v76);
      if (v6)
      {
        CFDictionaryRef Attributes = CFAttributedStringGetAttributes(Mutable, 0, 0);
        CFAttributedStringRef v46 = CFAttributedStringCreate(alloc, a2, Attributes);
        unsigned __int16 v47 = aStr;
        v74.location = CFAttributedStringGetLength(aStr);
        v74.length = 0;
        CFAttributedStringReplaceAttributedString(v47, v74, v46);
        if (v46) {
          CFRelease(v46);
        }
      }
      CFNumberRef v48 = aStr;
      v75.location = CFAttributedStringGetLength(aStr);
      v75.length = 0;
      CFAttributedStringReplaceAttributedString(v48, v75, v44);
      if (v44) {
        CFRelease(v44);
      }
      if (Mutable) {
        CFRelease(Mutable);
      }
      ++v6;
    }
    while (v6 != v53);
  }
  CFAttributedStringRef v49 = aStr;
  CFAttributedStringEndEditing(aStr);
  return v49;
}

CGFloat FigCaptionLayoutGetLineWidthWithRange(const __CTLine *a1, CFIndex a2, CFIndex a3)
{
  OffsetForStringIndedouble x = CTLineGetOffsetForStringIndex(a1, a2, 0);
  return CTLineGetOffsetForStringIndex(a1, a3, 0) - OffsetForStringIndex;
}

uint64_t FigCaptionLayoutDetectAndChooseAlignmentForCaptionElement(const __CFArray *a1)
{
  if (!a1) {
    return 2;
  }
  CFIndex Count = CFArrayGetCount(a1);
  if (Count < 2) {
    return 2;
  }
  CFIndex v3 = Count;
  CFIndex v4 = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  unsigned int v7 = 7;
  do
  {
    CFArrayRef ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(a1, v4);
    if (ValueAtIndex)
    {
      CFArrayRef v9 = ValueAtIndex;
      CFIndex v10 = CFArrayGetCount(ValueAtIndex);
      if (v10)
      {
        CFIndex v11 = v10;
        CFDictionaryRef v12 = (const __CFDictionary *)CFArrayGetValueAtIndex(v9, 0);
        unsigned int v23 = 0;
        if (cclayout_getLocationFromCommandData(v12, &v23, 0))
        {
          CFDictionaryRef v13 = (const __CFDictionary *)CFArrayGetValueAtIndex(v9, v11 - 1);
          int v22 = 0;
          if (cclayout_getLocationFromCommandData(v13, &v22, 0))
          {
            CFAttributedStringRef Value = (const __CFAttributedString *)CFDictionaryGetValue(v13, @"S");
            int Length = CFAttributedStringGetLength(Value);
            uint64_t v16 = v23;
            uint64_t v17 = (Length + v22 - 1);
            if (v4)
            {
              unsigned int v18 = v7 & 0xFFFFFFFE;
              if (v6 == v23) {
                unsigned int v18 = v7;
              }
              if (v5 == v17) {
                unsigned int v7 = v18;
              }
              else {
                unsigned int v7 = v18 & 0xFFFFFFFB;
              }
            }
          }
          else
          {
            uint64_t v16 = v6;
            uint64_t v17 = v5;
          }
          uint64_t v6 = v16;
          uint64_t v5 = v17;
        }
      }
    }
    ++v4;
  }
  while (v3 != v4);
  unsigned int v19 = v7 & 2;
  if ((v7 & 4) != 0)
  {
    unsigned int v19 = 4;
    unsigned int v20 = 2;
  }
  else
  {
    unsigned int v20 = 1;
  }
  if (v7) {
    return v20;
  }
  else {
    return v19;
  }
}

double FigCaptionLayoutGetBackgroundPathRectFromDictionary(const __CFDictionary *a1)
{
  long long v1 = *(_OWORD *)(MEMORY[0x1E4F1DB20] + 16);
  v3[0] = *MEMORY[0x1E4F1DB20];
  v3[1] = v1;
  CFDictionaryApplyFunction(a1, (CFDictionaryApplierFunction)cclayout_GetRectFromPathDictionaryApplier, v3);
  return *(double *)v3;
}

void cclayout_GetRectFromPathDictionaryApplier(int a1, CGPathRef path, CGRect *a3)
{
  BoundingBodouble x = CGPathGetBoundingBox(path);
  *a3 = CGRectUnion(*a3, BoundingBox);
}

__CFString *FigCaptionLayoutCopyEffectiveFontNamePlusInfoAndCreateElementGeometryArrays(const void *a1, int a2, const __CFArray *a3, const __CFArray *a4, int a5, CFTypeRef cf, const void *a7, int a8, double a9, double a10, double a11, double a12, uint64_t a13, const __CFArray *a14, uint64_t *a15, unsigned __int8 *a16, double *a17, void *a18, void *a19, __CFArray **a20,double *a21,double *a22)
{
  uint64_t v559 = *MEMORY[0x1E4F143B8];
  if (cf) {
    UniChar v24 = (const __CTFont *)CFRetain(cf);
  }
  else {
    UniChar v24 = 0;
  }
  if (a7) {
    CFTypeRef v25 = CFRetain(a7);
  }
  else {
    CFTypeRef v25 = 0;
  }
  if (a16) {
    int v430 = *a16;
  }
  else {
    int v430 = 0;
  }
  CFTypeRef cfa = v25;
  if (a17) {
    double v26 = *a17;
  }
  else {
    double v26 = 0.0;
  }
  double TypographicBounds = v26;
  LODWORD(values.location) = -1;
  LODWORD(v539[0]) = -1;
  if (a3
    && CFArrayGetCount(a3)
    && (CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a3, 0),
        (CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(ValueAtIndex, @"R")) != 0)
    && (CFArrayRef v29 = Value, CFArrayGetCount(Value))
    && (CFArrayRef v30 = (const __CFArray *)CFArrayGetValueAtIndex(v29, 0)) != 0
    && (CFArrayRef v31 = v30, CFArrayGetCount(v30))
    && (CFDictionaryRef v32 = (const __CFDictionary *)CFArrayGetValueAtIndex(v31, 0)) != 0
    && (CFAttributedStringRef v33 = (const __CFAttributedString *)CFDictionaryGetValue(v32, @"S")) != 0)
  {
    CFAttributedStringGetAttributes(v33, 0, 0);
    FigCFDictionaryGetInt32IfPresent();
    FigCFDictionaryGetInt32IfPresent();
    switch(LODWORD(values.location))
    {
      case 1:
        uint64_t v34 = (const __CTFontDescriptor **)(a13 + 48);
        break;
      case 2:
        uint64_t v34 = (const __CTFontDescriptor **)(a13 + 56);
        break;
      case 3:
        uint64_t v34 = (const __CTFontDescriptor **)(a13 + 64);
        break;
      case 4:
        uint64_t v34 = (const __CTFontDescriptor **)(a13 + 72);
        break;
      case 5:
        uint64_t v34 = (const __CTFontDescriptor **)(a13 + 80);
        break;
      case 6:
        uint64_t v34 = (const __CTFontDescriptor **)(a13 + 88);
        break;
      case 7:
        uint64_t v34 = (const __CTFontDescriptor **)(a13 + 96);
        break;
      default:
        goto LABEL_22;
    }
  }
  else
  {
LABEL_22:
    uint64_t v34 = (const __CTFontDescriptor **)(a13 + 40);
  }
  double v35 = *(double *)(a13 + 104);
  CFIndex v36 = *v34;
  if (!a4 || !CFArrayGetCount(a4))
  {
    if (!v36) {
      goto LABEL_26;
    }
LABEL_29:
    UniChar v37 = (__CFString *)CTFontDescriptorCopyAttribute(v36, (CFStringRef)*MEMORY[0x1E4F245A8]);
    goto LABEL_30;
  }
  CFArrayGetValueAtIndex(a4, 0);
  FigCFDictionaryGetInt32IfPresent();
  if (v36) {
    goto LABEL_29;
  }
LABEL_26:
  if (!a1)
  {
    v429 = 0;
    goto LABEL_31;
  }
  UniChar v37 = (__CFString *)CFRetain(a1);
LABEL_30:
  v429 = v37;
LABEL_31:
  CFIndex v38 = v24;
  MACaptionAppearanceBehavior v39 = (const __CFAllocator **)MEMORY[0x1E4F1CF80];
  uint64_t v40 = (double *)MEMORY[0x1E4F1DB20];
  uint64_t v41 = a13;
  if (v35 <= 0.0)
  {
    CFMutableArrayRef Mutable = 0;
    CFMutableArrayRef v440 = 0;
    double v463 = *MEMORY[0x1E4F1DB30];
    double v447 = *(double *)(MEMORY[0x1E4F1DB30] + 8);
    double v345 = 0.0;
    goto LABEL_418;
  }
  CFArrayRef v42 = a14;
  *(double *)&uint64_t v445 = FigCaptionLayoutCellSizeForRect(0, a9, a10, a11, a12);
  CFMutableArrayRef Mutable = 0;
  CFMutableArrayRef v440 = 0;
  double v423 = v43 * 0.8;
  CFStringRef attrName = (const __CFString *)*MEMORY[0x1E4F24740];
  CFIndex v498 = *MEMORY[0x1E4F248A0];
  CFIndex v496 = *MEMORY[0x1E4F24788];
  CFIndex v494 = *MEMORY[0x1E4F24778];
  CFStringRef name = (const __CFString *)*MEMORY[0x1E4F1DC98];
  double v461 = v43;
  double v44 = v43 * -0.5;
  double v453 = v40[3];
  double v454 = v40[2];
  double v45 = -1.0;
  CFAllocatorRef allocator = *v39;
  CFIndex v491 = *MEMORY[0x1E4F243F0];
  double v46 = v35;
  double v448 = v44;
  double v455 = v40[1];
  double v456 = *v40;
  do
  {
    double v47 = floor(v46 * v423);
    if (v47 == 0.0) {
      double v48 = 1.0;
    }
    else {
      double v48 = v47;
    }
    double v49 = v46;
    if (!v38) {
      goto LABEL_39;
    }
    if (CTFontGetSize(v38) != v48 || !FigCFEqual())
    {
      CFRelease(v38);
LABEL_39:
      if (cfa) {
        CFRelease(cfa);
      }
      CTFontWithOptions = FigCaptionLayoutCreateCTFontWithOptions(v429, 0, v48);
      values.locatioCFIndex n = (CFIndex)CTFontWithOptions;
      CTFontRef v51 = FigCaptionLayoutCreateCTFontWithOptions(v429, 1, v48);
      CTFontSymbolicTraits SymbolicTraits = CTFontGetSymbolicTraits(CTFontWithOptions);
      CFDictionaryRef v53 = CFDictionaryCreate(allocator, MEMORY[0x1E4F243F0], (const void **)&values, 1, MEMORY[0x1E4F1D048], MEMORY[0x1E4F1D540]);
      CFAttributedStringRef v54 = CFAttributedStringCreate(allocator, @" ", v53);
      CFArrayRef v55 = CTLineCreateWithAttributedString(v54);
      double TypographicBounds = CTLineGetTypographicBounds(v55, 0, 0, 0);
      if (v55) {
        CFRelease(v55);
      }
      if (v54) {
        CFRelease(v54);
      }
      if (v53) {
        CFRelease(v53);
      }
      uint64_t v41 = a13;
      if (values.location)
      {
        uint64_t v56 = (const __CTFont *)CFRetain((CFTypeRef)values.location);
        if (v51)
        {
LABEL_49:
          CFTypeRef cfa = CFRetain(v51);
LABEL_52:
          if (values.location) {
            CFRelease((CFTypeRef)values.location);
          }
          if (v51) {
            CFRelease(v51);
          }
          int v57 = (SymbolicTraits >> 10) & 1;
          CFIndex v38 = v56;
          goto LABEL_57;
        }
      }
      else
      {
        uint64_t v56 = 0;
        if (v51) {
          goto LABEL_49;
        }
      }
      CFTypeRef cfa = 0;
      goto LABEL_52;
    }
    int v57 = v430;
LABEL_57:
    int v430 = v57;
    if (a8) {
      BOOL v58 = 1;
    }
    else {
      BOOL v58 = v57 == 0;
    }
    int v59 = !v58;
    BOOL v60 = *(double *)&v445 > TypographicBounds;
    double v432 = v49;
    double v61 = fmin(v49, 1.0) * *(double *)&v445;
    if ((v59 & v60) != 0) {
      double v62 = v61 - TypographicBounds;
    }
    else {
      double v62 = 0.0;
    }
    if ((v59 & v60) == 0) {
      double v61 = TypographicBounds;
    }
    double v463 = v61;
    if (v440) {
      CFRelease(v440);
    }
    if (Mutable) {
      CFRelease(Mutable);
    }
    CGFloat v63 = FigCaptionLayoutStandardCaptionRect(0, a9, a10, a11, a12);
    double v443 = v64;
    double v444 = v63;
    double v441 = v66;
    double v442 = v65;
    double v67 = FigCaptionLayoutExpandedCaptionRect(a9, a10, a11, a12);
    CGFloat v450 = v68;
    double v451 = v67;
    CGFloat v449 = v69;
    CGFloat rect = v70;
    if (a4) {
      CFIndex Count = CFArrayGetCount(a4);
    }
    else {
      CFIndex Count = 0;
    }
    CFIndex v72 = (CFIndex)a3;
    if (a3) {
      CFIndex v72 = CFArrayGetCount(a3);
    }
    double v447 = v432 * v461;
    if (Count >= v72) {
      CFIndex v73 = v72;
    }
    else {
      CFIndex v73 = Count;
    }
    CFAllocatorRef v74 = allocator;
    CFRange v75 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
    CFMutableArrayRef Mutable = CFArrayCreateMutable(allocator, v73, MEMORY[0x1E4F1D510]);
    CFMutableArrayRef v440 = CFArrayCreateMutable(allocator, v73, v75);
    CFIndex v434 = v73;
    v489 = v38;
    double v437 = v62;
    if (v73 > 0)
    {
      CFIndex v76 = 0;
      if (v430) {
        int v77 = 1;
      }
      else {
        int v77 = 3;
      }
      int v433 = v77;
      do
      {
        CFArrayGetValueAtIndex(a4, v76);
        CFIndex v446 = v76;
        CFDictionaryRef v78 = (const __CFDictionary *)CFArrayGetValueAtIndex(a3, v76);
        CFArrayRef v79 = (const __CFArray *)CFDictionaryGetValue(v78, @"R");
        *(_OWORD *)v534 = *MEMORY[0x1E4F1DB20];
        *(_OWORD *)&v534[16] = *(_OWORD *)(MEMORY[0x1E4F1DB20] + 16);
        CFArrayRef v458 = v79;
        if (v79) {
          CFIndex v80 = CFArrayGetCount(v79);
        }
        else {
          CFIndex v80 = 0;
        }
        uint64_t v457 = v80;
        v459 = CFArrayCreateMutable(v74, v80, MEMORY[0x1E4F1D510]);
        if (v42) {
          CFIndex v511 = CFArrayGetCount(v42);
        }
        else {
          CFIndex v511 = 0;
        }
        CFArrayRef v81 = v458;
        if (v457 >= 1)
        {
          CFIndex v82 = 0;
          while (1)
          {
            CFIndex v460 = v82;
            CFArrayRef v83 = (const __CFArray *)CFArrayGetValueAtIndex(v81, v82);
            if (v83) {
              break;
            }
            CFMutableArrayRef v86 = CFArrayCreateMutable(v74, 0, MEMORY[0x1E4F1D510]);
LABEL_268:
            CFMutableArrayRef v169 = v86;
            CFArrayAppendValue(v459, v86);
            if (v169) {
              CFRelease(v169);
            }
            CFIndex v82 = v460 + 1;
            CFArrayRef v81 = v458;
            if (v460 + 1 == v457) {
              goto LABEL_271;
            }
          }
          CFArrayRef v465 = v83;
          uint64_t v84 = CFArrayGetCount(v83);
          CFMutableArrayRef v85 = CFArrayCreateMutable(v74, v84, MEMORY[0x1E4F1D510]);
          CFMutableArrayRef v86 = v85;
          v464 = (char *)v84;
          if (v84 < 1) {
            goto LABEL_268;
          }
          v466 = v85;
          CFIndex v87 = 0;
          while (1)
          {
            v470 = (char *)v87;
            CFDictionaryRef theDict = (const __CFDictionary *)CFArrayGetValueAtIndex(v465, v87);
            CFAttributedStringRef v88 = (const __CFAttributedString *)CFDictionaryGetValue(theDict, @"S");
            double v537 = v62;
            uint64_t Length = CFAttributedStringGetLength(v88);
            longestEffectiveRange.length = 0;
            longestEffectiveRange.locatioCFIndex n = 0;
            CFAttributedStringRef v524 = v88;
            MutableCFDictionaryRef Copy = CFAttributedStringCreateMutableCopy(v74, Length, v88);
            CFAttributedStringBeginEditing(MutableCopy);
            CFAttributedStringRef aStr = MutableCopy;
            CFStringRef String = CFAttributedStringGetString(MutableCopy);
            CFMutableStringRef v92 = CFStringCreateMutableCopy(v74, 0, String);
            v567.length = CFStringGetLength(v92);
            v567.locatioCFIndex n = 0;
            CFStringFindAndReplace(v92, @"’", @"'", v567, 0);
            int v93 = FigCFStringFind();
            if (!FigCFStringFind()) {
              goto LABEL_99;
            }
            if (v93) {
              break;
            }
            if (!FigCFStringFind())
            {
LABEL_117:
              CFMutableStringRef v486 = 0;
              goto LABEL_121;
            }
LABEL_100:
            CFIndex v94 = CFStringGetLength(v92);
            values.locatioCFIndex n = 0;
            values.length = v94;
            CFMutableStringRef v486 = CFStringCreateMutableCopy(allocator, 0, v92);
            CFStringTransform(v92, &values, @"['\"]Any-Publishing", 0);
            v95.length = values.length;
            if (values.length < 1) {
              goto LABEL_115;
            }
            CFIndex v96 = 0;
            int v97 = 0;
            unsigned int v98 = 1;
            do
            {
              if (CFStringGetCharacterAtIndex(v92, v96) == 8221 || CFStringGetCharacterAtIndex(v92, v96) == 8220) {
                ++v97;
              }
              CFIndex v96 = v98;
              v95.length = values.length;
              BOOL v99 = values.length <= v98++;
            }
            while (!v99);
            if (v97 == 2)
            {
              if (values.length >= 1)
              {
                CFIndex v100 = 0;
                unsigned int v101 = 1;
                while (CFStringGetCharacterAtIndex(v92, v100) != 8220)
                {
                  if (CFStringGetCharacterAtIndex(v92, v100) == 8221)
                  {
                    v568.locatioCFIndex n = v100;
                    v568.length = 1;
                    CFStringFindAndReplace(v92, @"”", @"“", v568, 0);
                    break;
                  }
                  CFIndex v100 = v101;
                  BOOL v99 = values.length <= v101++;
                  if (v99) {
                    break;
                  }
                }
              }
              CFRange v95 = values;
              CMTimeValue v102 = aStr;
              CFStringRef v103 = v92;
            }
            else
            {
LABEL_115:
              v95.locatioCFIndex n = values.location;
              CMTimeValue v102 = aStr;
              CFStringRef v103 = v486;
            }
            CFAttributedStringReplaceString(v102, v95, v103);
LABEL_121:
            if (FigCFRangeGetLimit() < Length)
            {
              CGColorSpaceRef space = (CGColorSpaceRef)Length;
              CMTime v104 = v92;
              while (1)
              {
                *(void *)&long long v548 = 0;
                long long v546 = 0u;
                long long v547 = 0u;
                CFRange values = (CFRange)0;
                CGSize v545 = (CGSize)0;
                uint64_t v543 = 0;
                long long v542 = 0u;
                long long v540 = 0u;
                long long v541 = 0u;
                *(_OWORD *)v539 = 0u;
                CFIndex Limit = FigCFRangeGetLimit();
                v562.locatioCFIndex n = 0;
                v562.length = Length;
                CFDictionaryRef AttributesAndLongestEffectiveRange = CFAttributedStringGetAttributesAndLongestEffectiveRange(v524, Limit, v562, &longestEffectiveRange);
                CFBooleanRef v107 = (const __CFBoolean *)CFDictionaryGetValue(AttributesAndLongestEffectiveRange, @"i");
                CFBooleanRef v108 = (const __CFBoolean *)CFDictionaryGetValue(AttributesAndLongestEffectiveRange, @"u");
                LODWORD(v535) = -1;
                int valuePtr = -1;
                CMTimeEpoch v109 = CFDictionaryGetValue(AttributesAndLongestEffectiveRange, @"t");
                if (*(void *)(v41 + 144) == 1)
                {
                  if (v109) {
                    goto LABEL_126;
                  }
                }
                CMTimeEpoch v109 = *(const void **)v41;
                if (*(void *)v41) {
LABEL_126:
                }
                  DeviceRGBColor = (CGColor *)CFRetain(v109);
                else {
                  DeviceRGBColor = cclayout_createDeviceRGBColor(1.0, 1.0, 1.0, 1.0);
                }
                uint64_t v111 = DeviceRGBColor;
                double Alpha = CGColorGetAlpha(DeviceRGBColor);
                double v113 = *(double *)(v41 + 112);
                if (Alpha != v113) {
                  break;
                }
                if (v111)
                {
                  uint64_t v114 = (CGColor *)CFRetain(v111);
LABEL_131:
                  CFRelease(v111);
                  goto LABEL_133;
                }
                uint64_t v114 = 0;
LABEL_133:
                CMTime v115 = (CGColor *)CFDictionaryGetValue(AttributesAndLongestEffectiveRange, @"b");
                if (v115)
                {
                  CMTimeValue v116 = v115;
                  double v117 = CGColorGetAlpha(v115);
                  if (*(void *)(v41 + 152) == 1)
                  {
                    uint64_t v118 = v116;
                    goto LABEL_138;
                  }
                }
                else
                {
                  double v117 = -1.0;
                }
                uint64_t v118 = *(CGColor **)(v41 + 8);
                if (!v118)
                {
                  CFRange v119 = cclayout_createDeviceRGBColor(0.0, 0.0, 0.0, 1.0);
                  goto LABEL_140;
                }
LABEL_138:
                CFRange v119 = (CGColor *)CFRetain(v118);
LABEL_140:
                uint64_t v120 = v119;
                if (*(void *)(v41 + 168) != 1 || v117 == v45) {
                  double v117 = *(double *)(v41 + 120);
                }
                if (CGColorGetAlpha(v119) != v117)
                {
                  CopyWithdouble Alpha = CGColorCreateCopyWithAlpha(v120, v117);
                  if (!v120) {
                    goto LABEL_149;
                  }
                  goto LABEL_147;
                }
                if (v120)
                {
                  CopyWithdouble Alpha = (void *)CFRetain(v120);
LABEL_147:
                  CFRelease(v120);
                  goto LABEL_149;
                }
                CopyWithdouble Alpha = 0;
LABEL_149:
                FigCFDictionaryGetInt32IfPresent();
                if (*(void *)(v41 + 200) != 1 || (int v122 = v535, v535 == -1))
                {
                  unint64_t v123 = *(void *)(v41 + 136) - 2;
                  if (v123 > 3) {
                    int v122 = 0;
                  }
                  else {
                    int v122 = dword_19499C4B0[v123];
                  }
                }
                int valuePtr = v122;
                CFNumberRef v124 = CFNumberCreate(allocator, kCFNumberSInt32Type, &valuePtr);
                CMTimeValue v125 = (CGColor *)CFDictionaryGetValue(AttributesAndLongestEffectiveRange, @"e");
                if (*(void *)(v41 + 160) == 1 && (CMTimeValue v126 = v125) != 0)
                {
                  CGFloat v127 = CGColorGetAlpha(v114);
                  __int16 v128 = CGColorCreateCopyWithAlpha(v126, v127);
                }
                else
                {
                  uint64_t v129 = *(const void **)(v41 + 16);
                  if (v129)
                  {
                    __int16 v128 = (void *)CFRetain(v129);
                  }
                  else
                  {
                    CGFloat v130 = CGColorGetAlpha(v114);
                    __int16 v128 = cclayout_createDeviceRGBColor(0.0, 0.0, 0.0, v130);
                  }
                }
                size_t v131 = v128;
                if (!v107 || (uint64_t v132 = (const __CTFont *)cfa, !CFBooleanGetValue(v107))) {
                  uint64_t v132 = v489;
                }
                if (v108)
                {
                  if (CFBooleanGetValue(v108))
                  {
                    LODWORD(v535) = 1;
                    CFBooleanRef v108 = CFNumberCreate(allocator, kCFNumberSInt32Type, &v535);
                  }
                  else
                  {
                    CFBooleanRef v108 = 0;
                  }
                }
                if (v537 == 0.0)
                {
                  CFNumberRef v133 = 0;
                  CFNumberRef v134 = 0;
                }
                else
                {
                  LODWORD(v535) = 0;
                  CFNumberRef v133 = CFNumberCreate(allocator, kCFNumberSInt32Type, &v535);
                  CFNumberRef v134 = CFNumberCreate(allocator, kCFNumberCGFloatType, &v537);
                }
                uint64_t v535 = 0;
                CTFontGetSize(v132);
                MACaptionAppearanceGetStrokeWidth();
                uint64_t v535 = v135;
                CFNumberRef v136 = CFNumberCreate(allocator, kCFNumberCGFloatType, &v535);
                CFNumberRef v137 = v136;
                if (v132)
                {
                  values.locatioCFIndex n = v491;
                  v539[0] = v132;
                  CFIndex v138 = 1;
                }
                else
                {
                  CFIndex v138 = 0;
                }
                if (v114)
                {
                  *(void *)((unint64_t)&values | (8 * v138)) = attrName;
                  *(void *)((unint64_t)v539 & 0xFFFFFFFFFFFFFFF7 | (8 * (v138++ & 1))) = v114;
                }
                if (v108)
                {
                  *(&values.location + v138) = v498;
                  v539[v138++] = v108;
                }
                if (v133)
                {
                  *(&values.location + v138) = v496;
                  v539[v138++] = v133;
                }
                if (v134)
                {
                  *(&values.location + v138) = v494;
                  v539[v138++] = v134;
                }
                if (CopyWithAlpha)
                {
                  *(&values.location + v138) = 0x1EE53D9D8;
                  v539[v138++] = CopyWithAlpha;
                }
                if (v131)
                {
                  *(&values.location + v138) = 0x1EE53D9F8;
                  v539[v138++] = v131;
                }
                if (v124)
                {
                  *(&values.location + v138) = 0x1EE53DA18;
                  v539[v138++] = v124;
                }
                if (v136)
                {
                  *(&values.location + v138) = 0x1EE53DC58;
                  v539[v138++] = v136;
                }
                CFDictionaryRef v139 = CFDictionaryCreate(allocator, (const void **)&values, (const void **)v539, v138, MEMORY[0x1E4F1D048], MEMORY[0x1E4F1D540]);
                CFAttributedStringSetAttributes(aStr, longestEffectiveRange, v139, 0);
                if (v139) {
                  CFRelease(v139);
                }
                if (v133) {
                  CFRelease(v133);
                }
                if (v137) {
                  CFRelease(v137);
                }
                uint64_t v41 = a13;
                if (v134) {
                  CFRelease(v134);
                }
                if (v108) {
                  CFRelease(v108);
                }
                CFArrayRef v42 = a14;
                if (v124) {
                  CFRelease(v124);
                }
                if (v131) {
                  CFRelease(v131);
                }
                if (CopyWithAlpha) {
                  CFRelease(CopyWithAlpha);
                }
                if (v114) {
                  CFRelease(v114);
                }
                uint64_t Length = (uint64_t)space;
                CFMutableStringRef v92 = v104;
                if (FigCFRangeGetLimit() >= (uint64_t)space) {
                  goto LABEL_209;
                }
              }
              uint64_t v114 = CGColorCreateCopyWithAlpha(v111, v113);
              if (!v111) {
                goto LABEL_133;
              }
              goto LABEL_131;
            }
LABEL_209:
            CFAttributedStringEndEditing(aStr);
            CFAllocatorRef v74 = allocator;
            if (v92) {
              CFRelease(v92);
            }
            if (v486) {
              CFRelease(v486);
            }
            v467 = CFDictionaryCreateMutableCopy(allocator, 0, theDict);
            if (v511 >= 1)
            {
              for (CFIndex i = 0; i != v511; ++i)
              {
                CFDictionaryRef v141 = (const __CFDictionary *)CFArrayGetValueAtIndex(v42, i);
                if (v141)
                {
                  CFDictionaryRef v142 = v141;
                  if (CFDictionaryGetValue(v141, @"CMTextHighlightAttributeKey_StringToHighlight"))
                  {
                    uint64_t v143 = *a15;
                    CFStringRef v144 = CFAttributedStringGetString(aStr);
                    CFStringRef v145 = (const __CFString *)CFDictionaryGetValue(v142, @"CMTextHighlightAttributeKey_CueID");
                    if (!v145 || CFEqual(v144, v145))
                    {
                      CFStringRef v146 = (const __CFString *)CFDictionaryGetValue(v142, @"CMTextHighlightAttributeKey_StringToHighlight");
                      LODWORD(v539[0]) = 0;
                      CFRange values = (CFRange)0;
                      CGSize v545 = (CGSize)0;
                      Float64 v147 = CGColorSpaceCreateWithName(name);
                      uint64_t v148 = CFDictionaryGetValue(v142, @"CMTextHighlightAttributeKey_ForegroundColor");
                      for (uint64_t j = 0; j != 4; ++j)
                      {
                        if (v148)
                        {
                          if (!FigCFArrayGetFloatAtIndex())
                          {
                            CGColorRef v157 = 0;
                            CFDictionaryRef v156 = 0;
                            CGColorRef v152 = 0;
                            CMTimeScale v151 = 0;
                            goto LABEL_246;
                          }
                          double v150 = *(float *)v539;
                        }
                        else
                        {
                          double v150 = dbl_19499C4C8[j];
                        }
                        *((double *)&values.location + j) = v150;
                      }
                      spacea = v147;
                      CMTimeScale v151 = CGColorCreate(v147, (const CGFloat *)&values.location);
                      CGColorRef v152 = CGColorCreateCopyWithAlpha(v151, 0.5);
                      long long v153 = CFDictionaryGetValue(v142, @"CMTextHighlightAttributeKey_BackgroundColor");
                      for (uint64_t k = 0; k != 4; ++k)
                      {
                        if (v153)
                        {
                          if (!FigCFArrayGetFloatAtIndex())
                          {
                            CGColorRef v157 = 0;
                            CFDictionaryRef v156 = 0;
                            Float64 v147 = spacea;
                            goto LABEL_246;
                          }
                          double v155 = *(float *)v539;
                        }
                        else
                        {
                          double v155 = dbl_19499C4E8[k];
                        }
                        *((double *)&values.location + k) = v155;
                      }
                      Float64 v147 = spacea;
                      CFDictionaryRef v156 = CGColorCreate(spacea, (const CGFloat *)&values.location);
                      CGColorRef v157 = CGColorCreateCopyWithAlpha(v156, 0.7);
                      LODWORD(longestEffectiveRange.location) = 0;
                      FigCFDictionaryGetIntIfPresent();
                      LODWORD(v537) = -1;
                      FigCFDictionaryGetIntIfPresent();
                      v569.length = CFStringGetLength(v144);
                      v569.locatioCFIndex n = 0;
                      CFArrayRef Results = CFStringCreateArrayWithFindResults(allocator, v144, v146, v569, SLODWORD(longestEffectiveRange.location));
                      if (Results)
                      {
                        CFArrayRef v159 = Results;
                        CFIndex theDicta = i;
                        CGColorRef v160 = v152;
                        if (CFArrayGetCount(Results) >= 1)
                        {
                          CFIndex v161 = 0;
                          do
                          {
                            long long v162 = (CFRange *)CFArrayGetValueAtIndex(v159, v161);
                            long long v163 = v162;
                            BOOL v164 = SLODWORD(v537) == -1 || v143 + v161 == SLODWORD(v537);
                            if (v164) {
                              long long v165 = v151;
                            }
                            else {
                              long long v165 = v160;
                            }
                            long long v166 = v160;
                            if (v164) {
                              long long v167 = v156;
                            }
                            else {
                              long long v167 = v157;
                            }
                            CFAttributedStringSetAttribute(aStr, *v162, attrName, v165);
                            CFArrayRef v168 = v167;
                            CGColorRef v160 = v166;
                            CFAttributedStringSetAttribute(aStr, *v163, @"b", v168);
                            ++v161;
                          }
                          while (v161 < CFArrayGetCount(v159));
                        }
                        v143 += CFArrayGetCount(v159);
                        CFRelease(v159);
                        Float64 v147 = spacea;
                        CGColorRef v152 = v160;
                        CFIndex i = theDicta;
                      }
LABEL_246:
                      CFAllocatorRef v74 = allocator;
                      if (v147) {
                        CFRelease(v147);
                      }
                      if (v151) {
                        CFRelease(v151);
                      }
                      if (v152) {
                        CFRelease(v152);
                      }
                      if (v156) {
                        CFRelease(v156);
                      }
                      if (v157) {
                        CFRelease(v157);
                      }
                      CFArrayRef v42 = a14;
                    }
                    *a15 = v143;
                  }
                }
              }
            }
            CFDictionarySetValue(v467, @"S", aStr);
            if (aStr) {
              CFRelease(aStr);
            }
            CFArrayAppendValue(v466, v467);
            if (v467) {
              CFRelease(v467);
            }
            CFIndex v87 = (CFIndex)(v470 + 1);
            uint64_t v41 = a13;
            if (v470 + 1 == v464)
            {
              CFMutableArrayRef v86 = v466;
              goto LABEL_268;
            }
          }
          int v93 = 1;
LABEL_99:
          if (!v93) {
            goto LABEL_117;
          }
          goto LABEL_100;
        }
LABEL_271:
        FigCFDictionaryGetCGRectIfPresent();
        FigCFDictionaryGetInt32IfPresent();
        FigCFDictionaryGetInt32IfPresent();
        double PixelRectForCellRect = cclayout_getPixelRectForCellRect(v459, v433, 1, a2, v170, v171, v172, v173, *(CGFloat *)v534, *(CGFloat *)&v534[8], *(CGFloat *)&v534[16], *(CGFloat *)&v534[24], v444, v443, v442, v441, v445, *(uint64_t *)&v461, v451,
                                 *(uint64_t *)&v450,
                                 *(uint64_t *)&v449,
                                 *(uint64_t *)&rect,
                                 *(uint64_t *)&v463,
                                 *(uint64_t *)&v447);
        CGFloat v176 = v175;
        CGFloat v178 = v177;
        CGFloat v180 = v179;
        v570.origin.CGFloat x = v451;
        v570.origin.CGFloat y = v450;
        v570.size.double width = v449;
        v570.size.CGFloat height = rect;
        double Width = CGRectGetWidth(v570);
        double v487 = PixelRectForCellRect;
        v571.origin.CGFloat x = PixelRectForCellRect;
        double theDictb = v176;
        v571.origin.CGFloat y = v176;
        double v471 = v178;
        v571.size.double width = v178;
        *(double *)&CFMutableDictionaryRef v468 = v180;
        v571.size.CGFloat height = v180;
        if (Width >= CGRectGetWidth(v571))
        {
          CFArrayRef v224 = v459;
          CGFloat v226 = v450;
          CGFloat v225 = v451;
          double v44 = v448;
          CGFloat v227 = v449;
        }
        else
        {
          double v182 = v453;
          double v183 = v454;
          CFArrayRef v184 = v459;
          if (!v459 || (CFIndex v185 = CFArrayGetCount(v459), v185 < 1))
          {
LABEL_286:
            v575.origin.CGFloat y = v450;
            v575.origin.CGFloat x = v451;
            v575.size.double width = v449;
            v575.size.CGFloat height = rect;
            double v201 = CGRectGetWidth(v575);
            CFAttributedStringRef JoinedStringFromElementWithSeparator = FigCaptionLayoutCreateJoinedStringFromElementWithSeparator(v184, @" ");
            CFArrayRef v203 = CTLineCreateWithAttributedString(JoinedStringFromElementWithSeparator);
            uint64_t v204 = CFAttributedStringGetLength(JoinedStringFromElementWithSeparator);
            CFCharacterSetRef Predefined = CFCharacterSetGetPredefined(kCFCharacterSetWhitespace);
            CMTime v206 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E4F1D510]);
            CFStringRef v207 = CFAttributedStringGetString(JoinedStringFromElementWithSeparator);
            theCFStringRef String = v207;
            uint64_t v555 = 0;
            CFIndex v556 = v204;
            CharactersPtr = CFStringGetCharactersPtr(v207);
            CStringPtr = 0;
            v553 = (CFRange *)CharactersPtr;
            if (!CharactersPtr) {
              CStringPtr = CFStringGetCStringPtr(v207, 0x600u);
            }
            long long v550 = 0u;
            long long v551 = 0u;
            long long v548 = 0u;
            long long v549 = 0u;
            long long v546 = 0u;
            long long v547 = 0u;
            CFRange values = (CFRange)0;
            CGSize v545 = (CGSize)0;
            v554 = CStringPtr;
            CFIndex v557 = 0;
            CFIndex v558 = 0;
            if (v204 < 1)
            {
              CFIndex v211 = 0;
              uint64_t v212 = -1;
              double v44 = v448;
              CFAllocatorRef v213 = allocator;
LABEL_321:
              OffsetForStringIndeCGFloat x = CTLineGetOffsetForStringIndex(v203, v211, 0);
              if (CTLineGetOffsetForStringIndex(v203, v204, 0) - OffsetForStringIndex <= v201 || v212 == -1)
              {
                uint64_t v41 = a13;
                double v45 = -1.0;
              }
              else
              {
                v564.length = v212 - v211;
                v564.locatioCFIndex n = v211;
                CFAttributedStringRef v235 = CFAttributedStringCreateWithSubstring(v213, JoinedStringFromElementWithSeparator, v564);
                CFArrayAppendValue(v206, v235);
                uint64_t v41 = a13;
                double v45 = -1.0;
                if (v235) {
                  CFRelease(v235);
                }
                CFIndex v211 = v212 + 1;
              }
              double v236 = CTLineGetOffsetForStringIndex(v203, v211, 0);
              if (CTLineGetOffsetForStringIndex(v203, v204, 0) - v236 != 0.0)
              {
                v565.length = v204 - v211;
                v565.locatioCFIndex n = v211;
                CFAttributedStringRef v237 = CFAttributedStringCreateWithSubstring(allocator, JoinedStringFromElementWithSeparator, v565);
                CFArrayAppendValue(v206, v237);
                if (v237) {
                  CFRelease(v237);
                }
              }
              if (v203) {
                CFRelease(v203);
              }
              CFAllocatorRef v74 = allocator;
              CFAttributedStringRef v472 = JoinedStringFromElementWithSeparator;
              if (v206) {
                uint64_t v238 = CFArrayGetCount(v206);
              }
              else {
                uint64_t v238 = 0;
              }
              int v239 = v433;
              CGRectGetMinY(*(CGRect *)v534);
              CFMutableArrayRef v240 = CFArrayCreateMutable(allocator, v238, MEMORY[0x1E4F1D510]);
              CFArrayRef v224 = v240;
              if (v238 < 1)
              {
                double v250 = 0.0;
              }
              else
              {
                aStrb = v240;
                CFArrayRef v526 = v206;
                CFIndex v241 = 0;
                uint64_t v242 = 0;
                for (uint64_t m = v238; m != v241; v238 = m)
                {
                  CFAttributedStringRef v243 = (const __CFAttributedString *)CFArrayGetValueAtIndex(v526, v241);
                  CFIndex v244 = CFAttributedStringGetLength(v243);
                  long long v245 = CFArrayCreateMutable(v74, 0, MEMORY[0x1E4F1D510]);
                  uint64_t v246 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
                  uint64_t v247 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
                  uint64_t v248 = CFDictionaryCreateMutable(v74, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                  CFMutableDictionaryRef v249 = CFDictionaryCreateMutable(v74, 0, v246, v247);
                  CFDictionarySetValue(v248, @"S", v243);
                  FigCFDictionarySetInt32();
                  FigCFDictionarySetInt32();
                  CFDictionarySetValue(v248, @"L", v249);
                  if (v249) {
                    CFRelease(v249);
                  }
                  CFArrayAppendValue(v245, v248);
                  if (v248) {
                    CFRelease(v248);
                  }
                  CFArrayAppendValue(aStrb, v245);
                  CFAllocatorRef v74 = allocator;
                  if (v245) {
                    CFRelease(v245);
                  }
                  if (v242 <= v244) {
                    uint64_t v242 = v244;
                  }
                  ++v241;
                }
                double v250 = (double)v242;
                uint64_t v41 = a13;
                CFArrayRef v42 = a14;
                int v239 = v433;
                CMTime v206 = v526;
                CFArrayRef v224 = aStrb;
              }
              CGFloat MinY = CGRectGetMinY(*(CGRect *)v534);
              if (v206) {
                CFRelease(v206);
              }
              if (v472) {
                CFRelease(v472);
              }
              if (v459) {
                CFRelease(v459);
              }
              CGFloat v225 = v451;
              CGFloat v228 = rect;
              CGFloat v227 = v449;
              CGFloat v226 = v450;
              double v229 = cclayout_getPixelRectForCellRect(v224, v239, 1, a2, v251, v252, v253, v254, 0.0, MinY, v250, (double)v238, v444, v443, v442, v441, v445, *(uint64_t *)&v461, v451,
                       *(uint64_t *)&v450,
                       *(uint64_t *)&v449,
                       *(uint64_t *)&rect,
                       *(uint64_t *)&v463,
                       *(uint64_t *)&v447);
              goto LABEL_358;
            }
            CFIndex v210 = 0;
            CFIndex v211 = 0;
            uint64_t v212 = -1;
            double v44 = v448;
            CFAllocatorRef v213 = allocator;
            while (2)
            {
              if (v210 < 0 || (CFIndex v214 = v556, v556 <= v210))
              {
                UniChar v217 = 0;
              }
              else
              {
                p_CFRange values = v553;
                if (v553)
                {
                  CFIndex v216 = v555 + v210;
                  goto LABEL_294;
                }
                if (v554)
                {
                  UniChar v217 = v554[v555 + v210];
                }
                else
                {
                  if (v558 <= v210 || (CFIndex v222 = v557, v557 > v210))
                  {
                    CFIndex v223 = v210 - 4;
                    if ((unint64_t)v210 < 4) {
                      CFIndex v223 = 0;
                    }
                    if (v223 + 64 < v556) {
                      CFIndex v214 = v223 + 64;
                    }
                    CFIndex v557 = v223;
                    CFIndex v558 = v214;
                    v560.locatioCFIndex n = v555 + v223;
                    v560.length = v214 - v223;
                    CFStringGetCharacters(theString, v560, (UniChar *)&values);
                    CFIndex v222 = v557;
                  }
                  CFIndex v216 = v210 - v222;
                  p_CFRange values = &values;
LABEL_294:
                  UniChar v217 = *((_WORD *)&p_values->location + v216);
                }
              }
              if (CFCharacterSetIsCharacterMember(Predefined, v217))
              {
                double v218 = CTLineGetOffsetForStringIndex(v203, v211, 0);
                CGFloat v219 = CTLineGetOffsetForStringIndex(v203, v210, 0);
                CFIndex v220 = v210;
                if (v219 - v218 > v201)
                {
                  if (v212 == -1) {
                    uint64_t v212 = v210;
                  }
                  v563.length = v212 - v211;
                  v563.locatioCFIndex n = v211;
                  CFAttributedStringRef v221 = CFAttributedStringCreateWithSubstring(v213, JoinedStringFromElementWithSeparator, v563);
                  CFArrayAppendValue(v206, v221);
                  if (v221) {
                    CFRelease(v221);
                  }
                  CFIndex v211 = v212 + 1;
                  uint64_t v212 = -1;
                  CFIndex v210 = v211;
                  CFAllocatorRef v213 = allocator;
LABEL_305:
                  if (v210 >= v204) {
                    goto LABEL_321;
                  }
                  continue;
                }
              }
              else
              {
                CFIndex v220 = v212;
              }
              break;
            }
            ++v210;
            uint64_t v212 = v220;
            goto LABEL_305;
          }
          CFIndex v186 = v185;
          CFIndex v187 = 0;
          while (1)
          {
            CFArrayRef v188 = (const __CFArray *)CFArrayGetValueAtIndex(v184, v187);
            if (v188)
            {
              CFArrayRef v189 = v188;
              CFIndex v190 = CFArrayGetCount(v188);
              if (v190 >= 2) {
                break;
              }
            }
LABEL_285:
            ++v187;
            CFArrayRef v184 = v459;
            if (v187 == v186) {
              goto LABEL_286;
            }
          }
          CFIndex v191 = v190;
          CFIndex v192 = 0;
          CGFloat v193 = v182;
          double v194 = v183;
          double v195 = v455;
          double v196 = v456;
          while (1)
          {
            CGColorSpaceRef spaceb = *(CGColorSpaceRef *)&v196;
            CGFloat v512 = v195;
            CFMutableAttributedStringRef aStra = *(CFMutableAttributedStringRef *)&v194;
            CFAttributedStringRef v525 = *(CFAttributedStringRef *)&v193;
            CFDictionaryRef v197 = (const __CFDictionary *)CFArrayGetValueAtIndex(v189, v192);
            LODWORD(values.location) = 0;
            LODWORD(v539[0]) = 0;
            CGFloat v193 = v182;
            double v194 = v183;
            double v195 = v455;
            double v196 = v456;
            if (cclayout_getLocationFromCommandData(v197, &values, v539))
            {
              CFAttributedStringRef v198 = (const __CFAttributedString *)CFDictionaryGetValue(v197, @"S");
              CGFloat v193 = v182;
              double v194 = v183;
              double v195 = v455;
              double v196 = v456;
              if (v198)
              {
                CFIndex v199 = CFAttributedStringGetLength(v198);
                CGFloat v193 = v182;
                double v194 = v183;
                double v195 = v455;
                double v196 = v456;
                if (v199)
                {
                  double v196 = (double)(LODWORD(values.location) - 1);
                  double v195 = (double)(LODWORD(v539[0]) - 1);
                  double v194 = (double)v199;
                  CGFloat v193 = 1.0;
                }
              }
            }
            *(void *)&v572.origin.CGFloat x = spaceb;
            v572.origin.CGFloat y = v512;
            *(void *)&v572.size.double width = aStra;
            *(void *)&v572.size.CGFloat height = v525;
            if (!CGRectIsNull(v572))
            {
              *(void *)&v573.origin.CGFloat x = spaceb;
              v573.origin.CGFloat y = v512;
              *(void *)&v573.size.double width = aStra;
              *(void *)&v573.size.CGFloat height = v525;
              double MaxX = CGRectGetMaxX(v573);
              v574.origin.CGFloat x = v196;
              v574.origin.CGFloat y = v195;
              v574.size.double width = v194;
              v574.size.CGFloat height = v193;
              if (MaxX < CGRectGetMinX(v574)) {
                break;
              }
            }
            ++v192;
            double v182 = v453;
            double v183 = v454;
            if (v191 == v192) {
              goto LABEL_285;
            }
          }
          CFArrayRef v224 = v459;
          uint64_t v41 = a13;
          double v44 = v448;
          CGFloat v227 = v449;
          double v45 = -1.0;
          CFAllocatorRef v74 = allocator;
          CGFloat v226 = v450;
          CGFloat v225 = v451;
        }
        CGFloat v228 = rect;
        double v229 = v487;
        CGFloat v230 = theDictb;
        CGFloat v231 = v471;
        CGFloat v232 = *(double *)&v468;
LABEL_358:
        double v256 = cclayout_offsetRectToFitBoundary(v229, v230, v231, v232, v225, v226, v227, v228);
        CFIndex v258 = v257;
        CGFloat v260 = v259;
        CGFloat v262 = v261;
        CFArrayAppendValue(Mutable, v224);
        if (v224) {
          CFRelease(v224);
        }
        *(double *)&values.locatioCFIndex n = v256;
        values.length = v258;
        v545.double width = v260;
        v545.CGFloat height = v262;
        uint64_t v263 = CFDataCreateMutable(v74, 32);
        CFDataSetLength(v263, 32);
        v561.locatioCFIndex n = 0;
        v561.length = 32;
        CFDataReplaceBytes(v263, v561, (const UInt8 *)&values, 32);
        CFArrayAppendValue(v440, v263);
        if (v263) {
          CFRelease(v263);
        }
        CFIndex v76 = v446 + 1;
        double v62 = v437;
        CFAllocatorRef v74 = allocator;
      }
      while (v446 + 1 != v434);
    }
    if (v440) {
      CFArrayRef v264 = (const __CFArray *)CFRetain(v440);
    }
    else {
      CFArrayRef v264 = 0;
    }
    double v265 = v463 * -0.5;
    do
    {
      while (1)
      {
        if (v264)
        {
          CFIndex v266 = CFArrayGetCount(v264);
          uint64_t v267 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E4F1D510]);
          if (v266 >= 1)
          {
            for (CFIndex n = 0; n != v266; ++n)
            {
              uint64_t v269 = CFArrayGetValueAtIndex(v264, n);
              v270 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E4F1D510]);
              CFArrayAppendValue(v270, v269);
              CFArrayAppendValue(v267, v270);
              if (v270) {
                CFRelease(v270);
              }
            }
          }
          if (!v267)
          {
LABEL_400:
            int v287 = 0;
            if (v264) {
              goto LABEL_404;
            }
            goto LABEL_405;
          }
        }
        else
        {
          uint64_t v267 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E4F1D510]);
          if (!v267) {
            goto LABEL_400;
          }
        }
        while (1)
        {
          CFIndex v271 = CFArrayGetCount(v267);
          CFIndex v272 = v271;
          if (v271 <= 1) {
            break;
          }
          CFIndex v273 = 0;
          CFIndex v274 = v271 - 2;
          while (1)
          {
            CFIndex v275 = v273;
            CFArrayRef v276 = (void *)CFArrayGetValueAtIndex(v267, v273);
            v576.origin.CGFloat x = cclayout_unionCFDataRects(v276);
            CGRect v577 = CGRectInset(v576, v265, v44);
            if (++v273 < v272) {
              break;
            }
LABEL_380:
            if (v275 == v274) {
              goto LABEL_386;
            }
          }
          CGFloat x = v577.origin.x;
          CGFloat y = v577.origin.y;
          CGFloat v279 = v577.size.width;
          CGFloat height = v577.size.height;
          CFIndex v281 = v273;
          while (1)
          {
            uint64_t v282 = CFArrayGetValueAtIndex(v267, v281);
            v578.origin.CGFloat x = cclayout_unionCFDataRects(v282);
            CGRect v608 = CGRectInset(v578, v265, v44);
            v579.origin.CGFloat x = x;
            v579.origin.CGFloat y = y;
            v579.size.double width = v279;
            v579.size.CGFloat height = height;
            if (CGRectIntersectsRect(v579, v608)) {
              break;
            }
            if (v272 == ++v281) {
              goto LABEL_380;
            }
          }
          if (v282) {
            v283.length = CFArrayGetCount((CFArrayRef)v282);
          }
          else {
            v283.length = 0;
          }
          v283.locatioCFIndex n = 0;
          CFArrayAppendArray((CFMutableArrayRef)v276, (CFArrayRef)v282, v283);
          CFArrayRemoveValueAtIndex(v267, v281);
        }
LABEL_386:
        CFIndex v284 = CFArrayGetCount(v267);
        if (v284 < 1)
        {
          int v287 = 0;
        }
        else
        {
          CFIndex v285 = v284;
          CFIndex v286 = 0;
          int v287 = 0;
          do
          {
            CFArrayRef v288 = (const __CFArray *)CFArrayGetValueAtIndex(v267, v286);
            if (v288)
            {
              CFArrayRef v289 = v288;
              if (CFArrayGetCount(v288) >= 2)
              {
                CFIndex v290 = CFArrayGetCount(v289);
                double v527 = cclayout_unionCFDataRects(v289);
                CFMutableAttributedStringRef aStrc = v291;
                CGFloat v514 = v292;
                CGColorSpaceRef spacec = v293;
                if (v290 >= 2)
                {
                  for (iCFIndex i = 1; ii != v290; ++ii)
                  {
                    CFArrayRef v295 = CFArrayGetValueAtIndex(v289, ii - 1);
                    v296 = (void *)CFArrayGetValueAtIndex(v289, ii);
                    double v297 = cclayout_unionCFDataRects(v295);
                    CGFloat v299 = v298;
                    CGFloat v301 = v300;
                    CGFloat v303 = v302;
                    double v304 = cclayout_unionCFDataRects(v296);
                    CGFloat v308 = v304;
                    CGFloat v309 = v305;
                    CGFloat v310 = v306;
                    CGFloat v311 = v307;
                    if (a2 == 1)
                    {
                      v580.origin.CGFloat x = v297;
                      v580.origin.CGFloat y = v299;
                      v580.size.double width = v301;
                      v580.size.CGFloat height = v303;
                      double MaxY = CGRectGetMaxY(v580);
                      v581.origin.CGFloat x = v308;
                      v581.origin.CGFloat y = v309;
                      v581.size.double width = v310;
                      v581.size.CGFloat height = v311;
                      double v313 = v461 + MaxY - CGRectGetMinY(v581);
                    }
                    else
                    {
                      double v314 = CGRectGetMaxY(*(CGRect *)&v304);
                      v582.origin.CGFloat x = v297;
                      v582.origin.CGFloat y = v299;
                      v582.size.double width = v301;
                      v582.size.CGFloat height = v303;
                      double v313 = -(v461 + v314 - CGRectGetMinY(v582));
                    }
                    cclayout_offsetCFDataRects(v296, 0.0, v313);
                  }
                }
                double v315 = cclayout_unionCFDataRects(v289);
                CGFloat v317 = v316;
                CGFloat v319 = v318;
                CGFloat v321 = v320;
                v583.origin.CGFloat x = v527;
                *(void *)&v583.origin.CGFloat y = aStrc;
                v583.size.double width = v514;
                *(void *)&v583.size.CGFloat height = spacec;
                double MidY = CGRectGetMidY(v583);
                v584.origin.CGFloat x = v315;
                v584.origin.CGFloat y = v317;
                v584.size.double width = v319;
                v584.size.CGFloat height = v321;
                CGFloat v323 = CGRectGetMidY(v584);
                cclayout_offsetCFDataRects(v289, 0.0, MidY - v323);
                double v324 = cclayout_unionCFDataRects(v289);
                CGFloat v326 = v325;
                CGFloat v328 = v327;
                CGFloat v330 = v329;
                v585.origin.CGFloat x = cclayout_offsetRectToFitBoundary(v324, v325, v327, v329, v451, v450, v449, rect);
                CGFloat v331 = v585.origin.x;
                CGFloat v332 = v585.origin.y;
                CGFloat v333 = v585.size.width;
                CGFloat v334 = v585.size.height;
                double MinX = CGRectGetMinX(v585);
                v586.origin.CGFloat x = v324;
                v586.origin.CGFloat y = v326;
                v586.size.double width = v328;
                v586.size.CGFloat height = v330;
                double v529 = MinX - CGRectGetMinX(v586);
                v587.origin.CGFloat x = v331;
                v587.origin.CGFloat y = v332;
                v587.size.double width = v333;
                v587.size.CGFloat height = v334;
                double v335 = CGRectGetMinY(v587);
                v588.origin.CGFloat x = v324;
                v588.origin.CGFloat y = v326;
                v588.size.double width = v328;
                v588.size.CGFloat height = v330;
                CGFloat v336 = CGRectGetMinY(v588);
                cclayout_offsetCFDataRects(v289, v529, v335 - v336);
                int v287 = 1;
                double v44 = v448;
                double v45 = -1.0;
                double v265 = v463 * -0.5;
              }
            }
            ++v286;
          }
          while (v286 != v285);
        }
        CFRetain(v267);
        if (v264) {
LABEL_404:
        }
          CFRelease(v264);
LABEL_405:
        if (v267) {
          break;
        }
        CFArrayRef v264 = 0;
        if (!v287) {
          goto LABEL_409;
        }
      }
      CFRelease(v267);
      CFArrayRef v264 = v267;
    }
    while (v287);
    CFRelease(v267);
LABEL_409:
    v589.origin.CGFloat y = v450;
    v589.origin.CGFloat x = v451;
    v589.size.double width = v449;
    v589.size.CGFloat height = rect;
    CGRect v590 = CGRectIntegral(v589);
    CGFloat v337 = v590.origin.x;
    CGFloat v338 = v590.origin.y;
    CGFloat v339 = v590.size.width;
    CGFloat v340 = v590.size.height;
    v609.origin.CGFloat x = cclayout_unionCFDataRects(v440);
    v609.origin.CGFloat y = v341;
    v609.size.double width = v342;
    v609.size.CGFloat height = v343;
    v591.origin.CGFloat x = v337;
    v591.origin.CGFloat y = v338;
    v591.size.double width = v339;
    v591.size.CGFloat height = v340;
    BOOL v344 = CGRectContainsRect(v591, v609);
    double v46 = v432;
    if (!v344) {
      double v46 = v432 + -0.1;
    }
    if (v344)
    {
      CFIndex v38 = v489;
      uint64_t v41 = a13;
      double v345 = v437;
      break;
    }
    CFIndex v38 = v489;
    uint64_t v41 = a13;
    double v345 = v437;
  }
  while (v46 > 0.0);
LABEL_418:
  double v346 = floor(v447 * 0.2);
  double v347 = 1.0;
  if (v346 != 0.0) {
    double v347 = v346;
  }
  double v348 = *(double *)(v41 + 32);
  double v474 = v347;
  if (v348 >= v347) {
    double v348 = v347;
  }
  double v473 = v348;
  if (a4) {
    CFIndex v349 = CFArrayGetCount(a4);
  }
  else {
    CFIndex v349 = 0;
  }
  CFIndex v350 = (CFIndex)a3;
  if (a3) {
    CFIndex v350 = CFArrayGetCount(a3);
  }
  if (v349 >= v350) {
    CFIndex v349 = v350;
  }
  CFAllocatorRef aStrd = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  v475 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0);
  CFMutableDictionaryRef v469 = (CFMutableDictionaryRef)v349;
  if (v349 >= 1)
  {
    CFIndex v351 = 0;
    *(_OWORD *)namea = *(_OWORD *)(MEMORY[0x1E4F1DB20] + 16);
    *(_OWORD *)theDictc = *MEMORY[0x1E4F1DB20];
    v490 = v38;
    double v438 = v345;
    while (1)
    {
      CFDictionaryRef v352 = (const __CFDictionary *)CFArrayGetValueAtIndex(a3, v351);
      CFTypeRef v476 = CFDictionaryGetValue(v352, @"R");
      CFDictionaryRef v353 = (const __CFDictionary *)CFArrayGetValueAtIndex(a4, v351);
      color = (CGColor *)CFDictionaryGetValue(v353, @"C");
      CFArrayRef v354 = (const __CFArray *)CFArrayGetValueAtIndex(Mutable, v351);
      v477 = (char *)v351;
      CFDataRef theData = (const __CFData *)CFArrayGetValueAtIndex(v440, v351);
      *(_OWORD *)v539 = *(_OWORD *)theDictc;
      long long v540 = *(_OWORD *)namea;
      LODWORD(v537) = 0;
      CFAllocatorRef v355 = CFAllocatorAllocate(aStrd, 148, 0);
      *CFAllocatorRef v355 = 0u;
      v355[1] = 0u;
      v355[2] = 0u;
      v355[3] = 0u;
      v355[4] = 0u;
      v355[5] = 0u;
      v355[6] = 0u;
      v355[7] = 0u;
      v355[8] = 0u;
      v488 = v355;
      *((_DWORD *)v355 + 36) = 0;
      FigCFDictionaryGetCGRectIfPresent();
      FigCFDictionaryGetInt32IfPresent();
      if (v354) {
        CFIndex v356 = CFArrayGetCount(v354);
      }
      else {
        CFIndex v356 = 0;
      }
      uint64_t BytePtr = (CGFloat *)CFDataGetBytePtr(theData);
      v592.origin.CGFloat x = *BytePtr;
      double v358 = BytePtr[1];
      v592.size.double width = BytePtr[2];
      v592.size.CGFloat height = BytePtr[3];
      CGFloat v501 = *BytePtr;
      v592.origin.CGFloat y = v358;
      CGFloat v499 = v592.size.width;
      CGFloat v497 = v592.size.height;
      CGFloat v359 = CGRectGetWidth(v592);
      CFDictionaryRef v360 = CFDictionaryCreateMutable(aStrd, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      longestEffectiveRange.locatioCFIndex n = 0;
      if (v356 >= 1)
      {
        CFIndex v361 = 0;
        double v362 = v501;
        CGFloat v516 = v447;
        CFArrayRef v495 = v354;
        CFIndex v493 = v356;
        double v492 = v358;
        do
        {
          CFArrayRef v363 = (const __CFArray *)CFArrayGetValueAtIndex(v354, v361);
          CFArrayRef v364 = v363;
          if (!v361)
          {
            CFArrayGetValueAtIndex(v363, 0);
            FigCFDictionaryGetCGFloatIfPresent();
          }
          if (a2 == 1)
          {
            double v365 = v358 + (double)v361 * v447 + *(double *)&longestEffectiveRange.location;
          }
          else
          {
            v593.origin.CGFloat x = v501;
            v593.origin.CGFloat y = v358;
            v593.size.double width = v499;
            v593.size.CGFloat height = v497;
            double v365 = v358 + CGRectGetHeight(v593) - (double)(v361 + 1) * v447 - *(double *)&longestEffectiveRange.location;
          }
          double v366 = v362;
          CGFloat v367 = v359;
          CGFloat v368 = v516;
          CGRect v594 = CGRectIntegral(*(CGRect *)(&v365 - 1));
          double v362 = v594.origin.x;
          CGFloat v369 = v594.origin.y;
          CGFloat v359 = v594.size.width;
          CGFloat v516 = v594.size.height;
          CGFloat allocatora = CGRectGetHeight(v594);
          if (v364)
          {
            CFIndex v510 = CFArrayGetCount(v364);
            if (v510 >= 1)
            {
              CFIndex v503 = v361;
              double v504 = v359;
              CFIndex v370 = 0;
              char v371 = 0;
              attrNamea = 0;
              double v372 = v362 - v463;
              double v373 = 0.0;
              double v502 = v362;
              CGFloat v374 = v516;
              CFArrayRef v509 = v364;
              do
              {
                CFIndex v515 = v370;
                CFDictionaryRef v375 = (const __CFDictionary *)CFArrayGetValueAtIndex(v364, v370);
                CFAttributedStringRef v530 = (const __CFAttributedString *)CFDictionaryGetValue(v375, @"S");
                CFIndex v376 = CFAttributedStringGetLength(v530);
                values.length = 0;
                values.locatioCFIndex n = 0;
                FigCFDictionaryGetCGFloatIfPresent();
                double v362 = v362 + 0.0;
                uint64_t v377 = FigCFRangeGetLimit();
                if (v377 < FigCFRangeGetLimit())
                {
                  double v378 = v372;
                  do
                  {
                    CFIndex v379 = FigCFRangeGetLimit();
                    v566.locatioCFIndex n = 0;
                    v566.length = v376;
                    CFDictionaryRef v380 = CFAttributedStringGetAttributesAndLongestEffectiveRange(v530, v379, v566, &values);
                    CFBooleanRef v381 = (const __CFBoolean *)CFDictionaryGetValue(v380, @"d");
                    CFAttributedStringRef v382 = CFAttributedStringCreateWithSubstring(aStrd, v530, values);
                    uint64_t v383 = CTLineCreateWithAttributedString(v382);
                    CFIndex v384 = values.length;
                    double v385 = CTLineGetOffsetForStringIndex(v383, 0, 0);
                    double v386 = CTLineGetOffsetForStringIndex(v383, v384, 0);
                    CFStringRef v387 = CFAttributedStringGetString(v382);
                    CharacterAtIndeCGFloat x = CFStringGetCharacterAtIndex(v387, 0);
                    int v389 = CFStringGetCharacterAtIndex(v387, values.length - 1);
                    if (v381)
                    {
                      int v390 = CFBooleanGetValue(v381);
                      BOOL v391 = v390 == 0;
                      LODWORD(v381) = v390 != 0;
                    }
                    else
                    {
                      BOOL v391 = 1;
                    }
                    v392 = CFDictionaryGetValue(v380, @"b");
                    double v393 = v362 - v378;
                    if (v371 && v393 > 0.0)
                    {
                      if (v393 >= v463) {
                        double v394 = v463;
                      }
                      else {
                        double v394 = v362 - v378;
                      }
                      v595.origin.CGFloat x = v378;
                      v595.origin.CGFloat y = v369;
                      v595.size.double width = v394;
                      v595.size.CGFloat height = allocatora;
                      CGRect v596 = CGRectIntegral(v595);
                      cclayout_AddRectWithColorAsPath(v360, attrNamea, v596.origin.x, v596.origin.y, v596.size.width, v596.size.height);
                      v597.origin.CGFloat x = v378;
                      v597.origin.CGFloat y = v369;
                      v597.size.double width = v394;
                      v597.size.CGFloat height = allocatora;
                      double v372 = v378 + CGRectGetWidth(v597);
                      double v393 = v362 - v372;
                    }
                    else
                    {
                      double v372 = v378;
                      double v378 = v373;
                    }
                    if (CharacterAtIndex == 32) {
                      int v395 = 0;
                    }
                    else {
                      int v395 = (int)v381;
                    }
                    if (v395 == 1 && v393 > 0.0)
                    {
                      if (v393 >= v463) {
                        CGFloat v396 = v463;
                      }
                      else {
                        CGFloat v396 = v393;
                      }
                      v598.origin.CGFloat x = v378;
                      v598.origin.CGFloat y = v369;
                      v598.size.double width = v396;
                      v598.size.CGFloat height = allocatora;
                      double v373 = v362 - CGRectGetWidth(v598);
                      v599.origin.CGFloat x = v373;
                      v599.origin.CGFloat y = v369;
                      v599.size.double width = v396;
                      CGFloat v374 = v516;
                      v599.size.CGFloat height = allocatora;
                      CGRect v600 = CGRectIntegral(v599);
                      cclayout_AddRectWithColorAsPath(v360, v392, v600.origin.x, v600.origin.y, v600.size.width, v600.size.height);
                    }
                    else
                    {
                      double v373 = v378;
                    }
                    double v397 = v386 - v385;
                    v601.origin.CGFloat x = v362;
                    v601.origin.CGFloat y = v369;
                    v601.size.double width = v397;
                    v601.size.CGFloat height = v374;
                    CGRect v602 = CGRectIntegral(v601);
                    cclayout_AddRectWithColorAsPath(v360, v392, v602.origin.x, v602.origin.y, v602.size.width, v602.size.height);
                    if (!v391)
                    {
                      v603.origin.CGFloat x = v362;
                      v603.origin.CGFloat y = v369;
                      v603.size.double width = v397;
                      v603.size.CGFloat height = v374;
                      double v372 = CGRectGetMaxX(v603);
                    }
                    v398 = attrNamea;
                    if ((v381 & (v389 != 32)) != 0) {
                      v398 = v392;
                    }
                    attrNamea = v398;
                    if ((v381 & (v389 != 32)) != 0) {
                      char v371 = 1;
                    }
                    if (v383) {
                      CFRelease(v383);
                    }
                    if (v382) {
                      CFRelease(v382);
                    }
                    double v362 = v362 + v397;
                    uint64_t v399 = FigCFRangeGetLimit();
                    double v378 = v372;
                  }
                  while (v399 < FigCFRangeGetLimit());
                }
                CFIndex v370 = v515 + 1;
                CFArrayRef v364 = v509;
              }
              while (v515 + 1 != v510);
              uint64_t v41 = a13;
              CFArrayRef v354 = v495;
              CFIndex v356 = v493;
              double v358 = v492;
              CGFloat v359 = v504;
              CFIndex v361 = v503;
              double v362 = v502;
              if (v371)
              {
                v604.origin.CGFloat x = v372;
                v604.origin.CGFloat y = v369;
                v604.size.double width = v463;
                v604.size.CGFloat height = allocatora;
                CGRect v605 = CGRectIntegral(v604);
                cclayout_AddRectWithColorAsPath(v360, attrNamea, v605.origin.x, v605.origin.y, v605.size.width, v605.size.height);
              }
            }
          }
          ++v361;
        }
        while (v361 != v356);
      }
      CFRange values = *(CFRange *)theDictc;
      CGSize v545 = *(CGSize *)namea;
      CFDictionaryApplyFunction(v360, (CFDictionaryApplierFunction)cclayout_GetRectFromPathDictionaryApplier, &values);
      CGFloat v400 = *(double *)&values.location;
      CGFloat v401 = *(double *)&values.length;
      CGSize v402 = v545;
      v606.origin.CGFloat x = v501;
      v606.origin.CGFloat y = v358;
      v606.size.double width = v499;
      v606.size.CGFloat height = v497;
      double v403 = CGRectGetMinX(v606);
      v607.origin.CGFloat x = v400;
      v607.origin.CGFloat y = v401;
      v607.CGSize size = v402;
      double v404 = CGRectGetMinX(v607);
      if (v356 >= 1)
      {
        double v405 = v403 - v404;
        if (v405 > 0.0)
        {
          for (juint64_t j = 0; jj != v356; ++jj)
          {
            CFArrayRef v407 = (const __CFArray *)CFArrayGetValueAtIndex(v354, jj);
            if (v407)
            {
              CFArrayRef v408 = v407;
              if (CFArrayGetCount(v407))
              {
                CFArrayGetValueAtIndex(v408, 0);
                values.locatioCFIndex n = 0;
                FigCFDictionaryGetCGFloatIfPresent();
                *(double *)&values.locatioCFIndex n = v405 + *(double *)&values.location;
                FigCFDictionarySetCGFloat();
              }
            }
          }
        }
      }
      CFRange values = *(CFRange *)theDictc;
      CGSize v545 = *(CGSize *)namea;
      CFDictionaryApplyFunction(v360, (CFDictionaryApplierFunction)cclayout_GetRectFromPathDictionaryApplier, &values);
      *(CFRange *)attrNameb = values;
      CGSize v409 = v545;
      long long v410 = v540;
      _OWORD *v488 = *(_OWORD *)v539;
      v488[1] = v410;
      long long v411 = CFDataGetBytePtr(theData);
      long long v412 = *((_OWORD *)v411 + 1);
      v488[2] = *(_OWORD *)v411;
      v488[3] = v412;
      v488[4] = *(_OWORD *)attrNameb;
      v488[5] = v409;
      *((void *)v488 + 12) = v360;
      CFTypeRef v413 = v476;
      if (v476) {
        CFTypeRef v413 = CFRetain(v476);
      }
      double v345 = v438;
      *((void *)v488 + 13) = v413;
      CFTypeRef v414 = v354 ? CFRetain(v354) : 0;
      CFIndex v38 = v490;
      *((void *)v488 + 14) = v414;
      if (!color) {
        break;
      }
      v415 = color;
      double v416 = CGColorGetAlpha(color);
      if (*(void *)(v41 + 176) != 1) {
        goto LABEL_497;
      }
LABEL_498:
      if (*(void *)(v41 + 184) != 1 || v416 == -1.0) {
        double v416 = *(double *)(v41 + 128);
      }
      if (CGColorGetAlpha(v415) == v416)
      {
        if (v415) {
          v417 = (void *)CFRetain(v415);
        }
        else {
          v417 = 0;
        }
      }
      else
      {
        v417 = CGColorCreateCopyWithAlpha(v415, v416);
      }
      *((void *)v488 + 15) = v417;
      *((double *)v488 + 16) = v474;
      *((double *)v488 + 17) = v473;
      *((_DWORD *)v488 + 36) = LODWORD(v537);
      CFArrayAppendValue(v475, v488);
      CFIndex v351 = (CFIndex)(v477 + 1);
      if (v477 + 1 == (char *)v469) {
        goto LABEL_507;
      }
    }
    double v416 = -1.0;
LABEL_497:
    v415 = *(CGColor **)(v41 + 24);
    goto LABEL_498;
  }
LABEL_507:
  if (a18)
  {
    if (v38) {
      CFTypeRef v418 = CFRetain(v38);
    }
    else {
      CFTypeRef v418 = 0;
    }
    *a18 = v418;
  }
  v420 = a17;
  CFRange v419 = a16;
  if (a19)
  {
    CFTypeRef v421 = cfa;
    if (cfa) {
      CFTypeRef v421 = CFRetain(cfa);
    }
    *a19 = v421;
    v420 = a17;
    CFRange v419 = a16;
  }
  *a20 = v475;
  if (v419) {
    *CFRange v419 = v430;
  }
  if (v420) {
    double *v420 = TypographicBounds;
  }
  if (a22) {
    *a22 = v345;
  }
  if (a21)
  {
    *a21 = v463;
    a21[1] = v447;
  }
  if (v38) {
    CFRelease(v38);
  }
  if (cfa) {
    CFRelease(cfa);
  }
  if (v440) {
    CFRelease(v440);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v429;
}

void FigCaptionLayoutReleaseCaptionElementArray(const __CFArray *a1)
{
  if (a1)
  {
    CFIndex Count = CFArrayGetCount(a1);
    if (Count >= 1)
    {
      CFIndex v3 = Count;
      CFIndex v4 = 0;
      CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      do
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(a1, v4);
        unsigned int v7 = (const void *)ValueAtIndex[12];
        if (v7) {
          CFRelease(v7);
        }
        CFArrayRef v8 = (const void *)ValueAtIndex[13];
        if (v8) {
          CFRelease(v8);
        }
        CFArrayRef v9 = (const void *)ValueAtIndex[14];
        if (v9) {
          CFRelease(v9);
        }
        CFIndex v10 = (const void *)ValueAtIndex[15];
        if (v10) {
          CFRelease(v10);
        }
        CFAllocatorDeallocate(v5, ValueAtIndex);
        ++v4;
      }
      while (v3 != v4);
    }
    CFRelease(a1);
  }
}

__CFArray *FigCaptionLayoutCopyCaptionElementArray(CFArrayRef theArray)
{
  if (theArray) {
    CFIndex Count = CFArrayGetCount(theArray);
  }
  else {
    CFIndex Count = 0;
  }
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], Count, 0);
  if (Mutable) {
    BOOL v5 = Count < 1;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    CFIndex v6 = 0;
    do
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v6);
      CFArrayRef v8 = CFAllocatorAllocate(v3, 148, 0);
      v8[36] = 0;
      *((_OWORD *)v8 + 7) = 0u;
      *((_OWORD *)v8 + 8) = 0u;
      *((_OWORD *)v8 + 5) = 0u;
      *((_OWORD *)v8 + 6) = 0u;
      *((_OWORD *)v8 + 3) = 0u;
      *((_OWORD *)v8 + 4) = 0u;
      *((_OWORD *)v8 + 1) = 0u;
      *((_OWORD *)v8 + 2) = 0u;
      *(_OWORD *)CFArrayRef v8 = 0u;
      long long v9 = *((_OWORD *)ValueAtIndex + 1);
      *(_OWORD *)CFArrayRef v8 = *(_OWORD *)ValueAtIndex;
      *((_OWORD *)v8 + 1) = v9;
      long long v10 = *((_OWORD *)ValueAtIndex + 3);
      *((_OWORD *)v8 + 2) = *((_OWORD *)ValueAtIndex + 2);
      *((_OWORD *)v8 + 3) = v10;
      long long v11 = *((_OWORD *)ValueAtIndex + 5);
      *((_OWORD *)v8 + 4) = *((_OWORD *)ValueAtIndex + 4);
      *((_OWORD *)v8 + 5) = v11;
      CFTypeRef v12 = (CFTypeRef)*((void *)ValueAtIndex + 12);
      if (v12) {
        CFTypeRef v12 = CFRetain(v12);
      }
      *((void *)v8 + 12) = v12;
      CFTypeRef v13 = (CFTypeRef)*((void *)ValueAtIndex + 13);
      if (v13) {
        CFTypeRef v13 = CFRetain(v13);
      }
      *((void *)v8 + 13) = v13;
      CFTypeRef v14 = (CFTypeRef)*((void *)ValueAtIndex + 14);
      if (v14) {
        CFTypeRef v14 = CFRetain(v14);
      }
      *((void *)v8 + 14) = v14;
      *((void *)v8 + 15) = CGColorRetain(*((CGColorRef *)ValueAtIndex + 15));
      *((_OWORD *)v8 + 8) = *((_OWORD *)ValueAtIndex + 8);
      v8[36] = *((_DWORD *)ValueAtIndex + 36);
      CFArrayAppendValue(Mutable, v8);
      ++v6;
    }
    while (Count != v6);
  }
  return Mutable;
}

uint64_t cclayout_getLocationFromCommandData(const __CFDictionary *a1, void *a2, void *a3)
{
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(a1, @"L");
  CFDictionaryRef v6 = Value;
  if (!Value) {
    goto LABEL_10;
  }
  CFTypeID v7 = CFGetTypeID(Value);
  if (v7 == CFDictionaryGetTypeID())
  {
    CFArrayRef v8 = CFDictionaryGetValue(v6, @"x");
    long long v9 = CFDictionaryGetValue(v6, @"y");
    if (v8 && v9 != 0)
    {
      long long v11 = v9;
      MutableCFDictionaryRef Copy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, v6);
      CFDictionaryRemoveValue(MutableCopy, @"x");
      CFDictionaryRemoveValue(MutableCopy, @"y");
      CFDictionaryApplyFunction(MutableCopy, (CFDictionaryApplierFunction)cclayout_warnAboutUnhandledKeyInDictionary, "CC command data \"location\" sub-dictionary (kQTClosedCaptionLocationKey)");
      CFRelease(MutableCopy);
      CFTypeID v13 = CFGetTypeID(v8);
      if (v13 == CFNumberGetTypeID())
      {
        CFTypeID v14 = CFGetTypeID(v11);
        if (v14 == CFNumberGetTypeID())
        {
          CFNumberGetValue((CFNumberRef)v8, kCFNumberSInt32Type, a2);
          CFNumberGetValue((CFNumberRef)v11, kCFNumberSInt32Type, a3);
LABEL_10:
          unsigned int v15 = 1;
          goto LABEL_11;
        }
      }
    }
  }
  unsigned int v15 = 0;
LABEL_11:
  if (v6) {
    return v15;
  }
  else {
    return 0;
  }
}

double cclayout_getPixelRectForCellRect(CFArrayRef theArray, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CGFloat a9, CGFloat a10, CGFloat a11, CGFloat a12, double a13, double a14, double a15, double a16, uint64_t a17, uint64_t a18, double a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  CFArrayRef v25 = theArray;
  CGFloat v27 = a11;
  uint64_t v104 = *MEMORY[0x1E4F143B8];
  if (theArray)
  {
    CFIndex Count = CFArrayGetCount(theArray);
    int v101 = 0;
    if (Count >= 15) {
      uint64_t v31 = 15;
    }
    else {
      uint64_t v31 = Count;
    }
    CFArrayRef v97 = v25;
    if (a2 == 1)
    {
      if (Count >= 1)
      {
        int v87 = a3;
        int v89 = a4;
        CFIndex v32 = 0;
        if (v31 <= 1) {
          uint64_t v33 = 1;
        }
        else {
          uint64_t v33 = v31;
        }
        do
        {
          CFArrayRef ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(v25, v32);
          if (ValueAtIndex)
          {
            CFArrayRef v35 = ValueAtIndex;
            CFIndex v36 = CFArrayGetCount(ValueAtIndex);
            v105.origin.CGFloat x = a9;
            v105.origin.CGFloat y = a10;
            v105.size.double width = v27;
            v105.size.CGFloat height = a12;
            CGRectGetMinX(v105);
            if (v36 >= 1)
            {
              for (CFIndex i = 0; i != v36; ++i)
              {
                CFDictionaryRef v38 = (const __CFDictionary *)CFArrayGetValueAtIndex(v35, i);
                if (cclayout_getLocationFromCommandData(v38, &v101, 0))
                {
                  CFAttributedStringRef Value = (const __CFAttributedString *)CFDictionaryGetValue(v38, @"S");
                  CFAttributedStringGetLength(Value);
                  FigCFDictionarySetCGFloat();
                }
              }
            }
          }
          else
          {
            v106.origin.CGFloat x = a9;
            v106.origin.CGFloat y = a10;
            v106.size.double width = v27;
            v106.size.CGFloat height = a12;
            CGRectGetMinX(v106);
          }
          ++v32;
          CFArrayRef v25 = v97;
        }
        while (v32 != v33);
        a3 = v87;
        a4 = v89;
      }
LABEL_22:
      v107.origin.CGFloat x = a9;
      v107.origin.CGFloat y = a10;
      v107.size.double width = v27;
      v107.size.CGFloat height = a12;
      double v40 = *(double *)&a23 * CGRectGetWidth(v107);
      if (!v31) {
        goto LABEL_68;
      }
      goto LABEL_62;
    }
    double v40 = 0.0;
    if ((a2 & 0xFFFFFFFE) == 2)
    {
      int v85 = a2;
      int v88 = a3;
      int v90 = a4;
      double v41 = a12;
      uint64_t v103 = 0;
      memset(v102, 0, sizeof(v102));
      uint64_t v84 = Count;
      uint64_t v86 = v31;
      if (Count >= 1)
      {
        CFIndex v42 = 0;
        if (v31 <= 1) {
          uint64_t v43 = 1;
        }
        else {
          uint64_t v43 = v31;
        }
        uint64_t v94 = v43;
        do
        {
          CFArrayRef v44 = (const __CFArray *)CFArrayGetValueAtIndex(v25, v42);
          if (v44)
          {
            CFArrayRef v45 = v44;
            CFIndex v46 = CFArrayGetCount(v44);
            v108.origin.CGFloat x = a9;
            v108.origin.CGFloat y = a10;
            v108.size.double width = a11;
            v108.size.CGFloat height = v41;
            double MinX = CGRectGetMinX(v108);
            if (v46 >= 1)
            {
              int v48 = 0;
              CFIndex v49 = 0;
              int v50 = (int)(MinX + 1.0);
              do
              {
                CFDictionaryRef v51 = (const __CFDictionary *)CFArrayGetValueAtIndex(v45, v49);
                if (cclayout_getLocationFromCommandData(v51, &v101, 0))
                {
                  CFAttributedStringRef v52 = (const __CFAttributedString *)CFDictionaryGetValue(v51, @"S");
                  int Length = CFAttributedStringGetLength(v52);
                  CFAttributedStringRef v54 = CTLineCreateWithAttributedString(v52);
                  CFIndex v55 = CFAttributedStringGetLength(v52);
                  OffsetForStringIndeCGFloat x = CTLineGetOffsetForStringIndex(v54, 0, 0);
                  double v57 = CTLineGetOffsetForStringIndex(v54, v55, 0) - OffsetForStringIndex;
                  double v58 = v49 ? *(double *)&a23 * (double)(v101 - v50) : 0.0;
                  FigCFDictionarySetCGFloat();
                  int v50 = v101 + Length;
                  int v48 = (int)(v57 + v58 + (double)v48);
                  if (v54) {
                    CFRelease(v54);
                  }
                }
                ++v49;
              }
              while (v46 != v49);
              goto LABEL_43;
            }
          }
          else
          {
            v109.origin.CGFloat x = a9;
            v109.origin.CGFloat y = a10;
            v109.size.double width = a11;
            v109.size.CGFloat height = v41;
            CGRectGetMinX(v109);
          }
          int v48 = 0;
LABEL_43:
          *((double *)v102 + v42) = (double)v48;
          if (v40 <= (double)v48) {
            double v40 = (double)v48;
          }
          ++v42;
          CFArrayRef v25 = v97;
        }
        while (v42 != v94);
      }
      a12 = v41;
      if (v85 != 2)
      {
        CGFloat v27 = a11;
        a3 = v88;
        a4 = v90;
        if (!v86) {
          goto LABEL_68;
        }
        goto LABEL_62;
      }
      int v59 = FigCaptionLayoutDetectAndChooseAlignmentForCaptionElement(v25);
      CGFloat v27 = a11;
      a3 = v88;
      a4 = v90;
      uint64_t v31 = v86;
      if (v84 >= 1 && v59 != 1)
      {
        CFIndex v60 = 0;
        if (v86 <= 1) {
          uint64_t v61 = 1;
        }
        else {
          uint64_t v61 = v86;
        }
        do
        {
          CFArrayRef v62 = (const __CFArray *)CFArrayGetValueAtIndex(v25, v60);
          if (v62)
          {
            CFArrayRef v63 = v62;
            if (CFArrayGetCount(v62))
            {
              CFArrayGetValueAtIndex(v63, 0);
              FigCFDictionarySetCGFloat();
            }
          }
          ++v60;
        }
        while (v61 != v60);
      }
    }
  }
  else
  {
    int v101 = 0;
    if (a2 == 1)
    {
      uint64_t v31 = 0;
      goto LABEL_22;
    }
    double v40 = 0.0;
    if ((a2 & 0xFFFFFFFE) != 2) {
      goto LABEL_68;
    }
    if (a2 == 2) {
      FigCaptionLayoutDetectAndChooseAlignmentForCaptionElement(0);
    }
    uint64_t v31 = 0;
  }
  if (!v31) {
    goto LABEL_68;
  }
LABEL_62:
  CFArrayRef v64 = (const __CFArray *)CFArrayGetValueAtIndex(v25, 0);
  if (v64)
  {
    CFArrayRef v65 = v64;
    if (CFArrayGetCount(v64))
    {
      LODWORD(v102[0]) = 0;
      CFDictionaryRef v66 = (const __CFDictionary *)CFArrayGetValueAtIndex(v65, 0);
      if (cclayout_getLocationFromCommandData(v66, 0, v102))
      {
        if ((int)((double)(LODWORD(v102[0]) - 1) - a10)) {
          FigCFDictionarySetCGFloat();
        }
      }
    }
  }
LABEL_68:
  v110.origin.CGFloat x = a9;
  v110.origin.CGFloat y = a10;
  v110.size.double width = v27;
  v110.size.CGFloat height = a12;
  keCGFloat y = CGRectGetHeight(v110);
  double v67 = (double *)MEMORY[0x1E4F1DB20];
  CGFloat v95 = *(double *)(MEMORY[0x1E4F1DB20] + 8);
  v111.origin.CGFloat x = a9;
  v111.origin.CGFloat y = a10;
  v111.size.double width = v27;
  v111.size.CGFloat height = a12;
  double v98 = *(double *)&a17 * CGRectGetWidth(v111);
  v112.origin.CGFloat x = a9;
  v112.origin.CGFloat y = a10;
  v112.size.double width = v27;
  v112.size.CGFloat height = a12;
  double v68 = *(double *)&a18 * CGRectGetHeight(v112);
  v113.origin.CGFloat x = a9;
  v113.origin.CGFloat y = a10;
  v113.size.double width = v27;
  v113.size.CGFloat height = a12;
  double v69 = a13 + CGRectGetMinX(v113) * *(double *)&a17;
  CGFloat v92 = a12;
  v114.origin.CGFloat x = a9;
  v114.origin.CGFloat y = a10;
  v114.size.double width = v27;
  v114.size.CGFloat height = a12;
  double MinY = CGRectGetMinY(v114);
  if (a4 == 1)
  {
    double v71 = a14 + MinY * *(double *)&a18;
    CGFloat v72 = v98;
  }
  else
  {
    double v73 = a14 + (15.0 - MinY) * *(double *)&a18;
    v115.origin.CGFloat x = v69;
    v115.origin.CGFloat y = v95;
    CGFloat v72 = v98;
    v115.size.double width = v98;
    v115.size.CGFloat height = v68;
    double v71 = v73 - CGRectGetHeight(v115);
  }
  if (a3 != 2)
  {
    if (a3 != 1)
    {
      if (a3 != 3) {
        return *v67;
      }
      double v69 = a19;
    }
    double keya = *(double *)&a24 * key;
    v118.origin.CGFloat x = a9;
    v118.origin.CGFloat y = a10;
    v118.size.double width = a11;
    v118.size.CGFloat height = v92;
    if (CGRectGetMinY(v118) >= 7.0)
    {
      uint64_t v79 = *(void *)&a19;
      if (a4 == 1)
      {
        CGRectGetMaxY(*(CGRect *)&v79);
        v120.origin.CGFloat x = a9;
        v120.origin.CGFloat y = a10;
        v120.size.double width = a11;
        v120.size.CGFloat height = v92;
        CGRectGetMinY(v120);
        return v69;
      }
      CGRectGetMinY(*(CGRect *)&v79);
      v122.origin.CGFloat x = a9;
      v122.origin.CGFloat y = a10;
      v122.size.double width = a11;
      v122.size.CGFloat height = v92;
      CGRectGetMinY(v122);
    }
    else
    {
      uint64_t v75 = *(void *)&a19;
      if (a4 == 1)
      {
        CGRectGetMinY(*(CGRect *)&v75);
        v119.origin.CGFloat x = a9;
        v119.origin.CGFloat y = a10;
        v119.size.double width = a11;
        v119.size.CGFloat height = v92;
        CGRectGetMinY(v119);
        return v69;
      }
      CGRectGetMaxY(*(CGRect *)&v75);
      v121.origin.CGFloat x = a9;
      v121.origin.CGFloat y = a10;
      v121.size.double width = a11;
      v121.size.CGFloat height = v92;
      CGRectGetMinY(v121);
    }
    double v74 = v69;
    v123.origin.CGFloat x = v69;
    v123.origin.CGFloat y = v95;
    v123.size.double width = v40;
    v123.size.CGFloat height = keya;
    CGRectGetHeight(v123);
    return v74;
  }
  v116.origin.CGFloat x = v69;
  v116.origin.CGFloat y = v71;
  v116.size.double width = v72;
  v116.size.CGFloat height = v68;
  double v74 = v69 + (CGRectGetWidth(v116) - v40) * 0.5;
  v117.origin.CGFloat x = v69;
  v117.origin.CGFloat y = v71;
  v117.size.double width = v72;
  v117.size.CGFloat height = v68;
  CGRectGetHeight(v117);
  return v74;
}

double cclayout_offsetRectToFitBoundary(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  double MinX = CGRectGetMinX(*(CGRect *)&a1);
  CGFloat v15 = a5;
  v44.origin.CGFloat x = a5;
  CGFloat v16 = a6;
  v44.origin.CGFloat y = a6;
  CGFloat v17 = a7;
  v44.size.double width = a7;
  CGFloat rect = a8;
  v44.size.CGFloat height = a8;
  if (MinX >= CGRectGetMinX(v44))
  {
    v47.origin.CGFloat x = v15;
    CGFloat v18 = v16;
    CGFloat v19 = v15;
    v47.origin.CGFloat y = v18;
    CGFloat v20 = v17;
    v47.size.double width = v17;
    v47.size.CGFloat height = rect;
    double MaxX = CGRectGetMaxX(v47);
    v48.origin.CGFloat x = a1;
    v48.origin.CGFloat y = a2;
    CGFloat v23 = a3;
    CGFloat v22 = a4;
    v48.size.double width = a3;
    v48.size.CGFloat height = a4;
    CGFloat v26 = CGRectGetMaxX(v48);
    double v24 = 0.0;
    if (MaxX < v26)
    {
      v49.origin.CGFloat x = a1;
      v49.origin.CGFloat y = a2;
      v49.size.double width = a3;
      v49.size.CGFloat height = a4;
      double v27 = CGRectGetMaxX(v49);
      v50.origin.CGFloat x = v19;
      v50.origin.CGFloat y = v18;
      v50.size.double width = v20;
      v50.size.CGFloat height = rect;
      double v24 = -(v27 - CGRectGetMaxX(v50));
    }
  }
  else
  {
    v45.origin.CGFloat x = v15;
    CGFloat v18 = v16;
    CGFloat v19 = v15;
    v45.origin.CGFloat y = v18;
    CGFloat v20 = v17;
    v45.size.double width = v17;
    v45.size.CGFloat height = rect;
    double v21 = CGRectGetMinX(v45);
    v46.origin.CGFloat x = a1;
    v46.origin.CGFloat y = a2;
    CGFloat v23 = a3;
    CGFloat v22 = a4;
    v46.size.double width = a3;
    v46.size.CGFloat height = a4;
    double v24 = v21 - CGRectGetMinX(v46);
  }
  CGFloat dxa = v24;
  v51.origin.CGFloat x = a1;
  v51.origin.CGFloat y = a2;
  v51.size.double width = v23;
  v51.size.CGFloat height = v22;
  double MinY = CGRectGetMinY(v51);
  v52.origin.CGFloat x = v19;
  v52.origin.CGFloat y = v18;
  v52.size.double width = v20;
  v52.size.CGFloat height = rect;
  if (MinY >= CGRectGetMinY(v52))
  {
    v55.origin.CGFloat x = v19;
    v55.origin.CGFloat y = v18;
    v55.size.double width = v20;
    v55.size.CGFloat height = rect;
    double MaxY = CGRectGetMaxY(v55);
    v56.origin.CGFloat x = a1;
    v56.origin.CGFloat y = a2;
    v56.size.double width = v23;
    v56.size.CGFloat height = v22;
    CGFloat v32 = CGRectGetMaxY(v56);
    double v30 = 0.0;
    if (MaxY < v32)
    {
      v57.origin.CGFloat x = a1;
      v57.origin.CGFloat y = a2;
      v57.size.double width = v23;
      v57.size.CGFloat height = v22;
      double v33 = CGRectGetMaxY(v57);
      v58.origin.CGFloat x = v19;
      v58.origin.CGFloat y = v18;
      v58.size.double width = v20;
      v58.size.CGFloat height = rect;
      double v30 = -(v33 - CGRectGetMaxY(v58));
    }
  }
  else
  {
    v53.origin.CGFloat x = v19;
    v53.origin.CGFloat y = v18;
    v53.size.double width = v20;
    v53.size.CGFloat height = rect;
    double v29 = CGRectGetMinY(v53);
    v54.origin.CGFloat x = a1;
    v54.origin.CGFloat y = a2;
    v54.size.double width = v23;
    v54.size.CGFloat height = v22;
    double v30 = v29 - CGRectGetMinY(v54);
  }
  CGFloat v34 = a1;
  CGFloat v35 = a2;
  CGFloat v36 = v23;
  CGFloat v37 = v22;

  *(void *)&double result = (unint64_t)CGRectOffset(*(CGRect *)&v34, dxa, v30);
  return result;
}

CGColorRef cclayout_createDeviceRGBColor(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  components[4] = *(CGFloat *)MEMORY[0x1E4F143B8];
  components[0] = a1;
  components[1] = a2;
  components[2] = a3;
  components[3] = a4;
  CFIndex v4 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E4F1DC98]);
  CGColorRef v5 = CGColorCreate(v4, components);
  CGColorSpaceRelease(v4);
  return v5;
}

double cclayout_unionCFDataRects(const void *a1)
{
  double x = *MEMORY[0x1E4F1DB20];
  CGFloat y = *(double *)(MEMORY[0x1E4F1DB20] + 8);
  CGFloat width = *(double *)(MEMORY[0x1E4F1DB20] + 16);
  CGFloat height = *(double *)(MEMORY[0x1E4F1DB20] + 24);
  CFTypeID v6 = CFGetTypeID(a1);
  if (v6 == CFArrayGetTypeID())
  {
    if (a1)
    {
      CFIndex Count = CFArrayGetCount((CFArrayRef)a1);
      if (Count >= 1)
      {
        CFIndex v8 = Count;
        for (CFIndex i = 0; i != v8; ++i)
        {
          CFArrayRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)a1, i);
          v18.origin.double x = cclayout_unionCFDataRects(ValueAtIndex);
          v18.origin.CGFloat y = v11;
          v18.size.CGFloat width = v12;
          v18.size.CGFloat height = v13;
          v16.origin.double x = x;
          v16.origin.CGFloat y = y;
          v16.size.CGFloat width = width;
          v16.size.CGFloat height = height;
          CGRect v17 = CGRectUnion(v16, v18);
          double x = v17.origin.x;
          CGFloat y = v17.origin.y;
          CGFloat width = v17.size.width;
          CGFloat height = v17.size.height;
        }
      }
    }
  }
  else
  {
    CFTypeID v14 = CFGetTypeID(a1);
    if (v14 == CFDataGetTypeID()) {
      return *(double *)CFDataGetBytePtr((CFDataRef)a1);
    }
  }
  return x;
}

void cclayout_offsetCFDataRects(void *a1, double a2, double a3)
{
  CFTypeID v6 = CFGetTypeID(a1);
  if (v6 == CFArrayGetTypeID())
  {
    if (a1)
    {
      CFIndex Count = CFArrayGetCount((CFArrayRef)a1);
      if (Count >= 1)
      {
        CFIndex v8 = Count;
        for (CFIndex i = 0; i != v8; ++i)
        {
          CFArrayRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)a1, i);
          cclayout_offsetCFDataRects(ValueAtIndex, a2, a3);
        }
      }
    }
  }
  else
  {
    CFTypeID v11 = CFGetTypeID(a1);
    if (v11 == CFDataGetTypeID())
    {
      CGRect v14 = *(CGRect *)CFDataGetBytePtr((CFDataRef)a1);
      CGRect v12 = CGRectOffset(v14, a2, a3);
      v13.locatioCFIndex n = 0;
      v13.length = 32;
      CFDataReplaceBytes((CFMutableDataRef)a1, v13, (const UInt8 *)&v12, 32);
    }
  }
}

void cclayout_AddRectWithColorAsPath(const __CFDictionary *a1, const void *a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  CFMutableArrayRef Mutable = CGPathCreateMutable();
  v15.origin.double x = a3;
  v15.origin.CGFloat y = a4;
  v15.size.CGFloat width = a5;
  v15.size.CGFloat height = a6;
  CGPathAddRect(Mutable, 0, v15);
  CFAttributedStringRef Value = (CGPath *)CFDictionaryGetValue(a1, a2);
  if (Value) {
    CGPathAddPath(Value, 0, Mutable);
  }
  else {
    CFDictionaryAddValue(a1, a2, Mutable);
  }

  CGPathRelease(Mutable);
}

uint64_t FigTTMLTextCreate(const __CFAllocator *a1, uint64_t a2, long long *a3, void *a4)
{
  uint64_t v8 = FigTTMLGetLibXMLAccess();
  if (v8)
  {
    uint64_t v9 = v8;
    if (a4)
    {
      FigTTMLNodeGetClassID();
      uint64_t v10 = CMDerivedObjectCreate();
      if (v10)
      {
        CFRange v13 = 0;
      }
      else
      {
        uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
        uint64_t v12 = FigTTMLInitializeNodeBaseStorage(DerivedStorage, a3);
        if (v12)
        {
          uint64_t v10 = v12;
          CFRange v13 = 0;
        }
        else
        {
          CFRange v13 = (const char *)(*(uint64_t (**)(uint64_t))(v9 + 80))(a2);
          CFStringRef v14 = CFStringCreateWithCString(a1, v13, 0x8000100u);
          if (FigTTMLNodeUseDefaultWhitespaceHandling(0))
          {
            CGRect v15 = FigTTMLCopyStringWithDefaultWhitespaceHandling(v14);
            if (v14) {
              CFRelease(v14);
            }
          }
          else
          {
            CGRect v15 = (__CFString *)v14;
          }
          *(void *)(DerivedStorage + 136) = v15;
          uint64_t v10 = FigTTMLSkipNode(a2, (uint64_t *)a3, *(__CFArray **)(DerivedStorage + 128));
          if (!v10) {
            *a4 = 0;
          }
        }
      }
    }
    else
    {
      uint64_t v10 = FigSignalErrorAt();
      CFRange v13 = 0;
    }
    (*(void (**)(const char *))(v9 + 112))(v13);
    return v10;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigTTMLTextCopyContent(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    CFTypeRef v4 = *(CFTypeRef *)(DerivedStorage + 136);
    if (v4) {
      CFTypeRef v4 = CFRetain(v4);
    }
    *a2 = v4;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void figTTMLText_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  long long v1 = *(const void **)(DerivedStorage + 136);
  if (v1) {
    CFRelease(v1);
  }

  FigTTMLReleaseNodeBaseStorage(DerivedStorage);
}

CFTypeRef figTTMLText_CopyDebugDesc()
{
  CFTypeRef result = *(CFTypeRef *)(CMBaseObjectGetDerivedStorage() + 136);
  if (result)
  {
    return CFRetain(result);
  }
  return result;
}

uint64_t figTTMLText_CopyChildNodeArray(const void *a1, CFMutableArrayRef *a2)
{
  if (a2)
  {
    CFAllocatorRef v3 = CFGetAllocator(a1);
    *a2 = CFArrayCreateMutable(v3, 0, MEMORY[0x1E4F1D510]);
  }
  else
  {
    FigSignalErrorAt();
  }
  return 0;
}

uint64_t figTTMLText_GetNodeType(uint64_t a1, _DWORD *a2)
{
  if (!a2) {
    return FigSignalErrorAt();
  }
  *a2 = 14;
  return 0;
}

uint64_t FigVideoCompositorCreateCustom(const __CFAllocator *a1, uint64_t a2, void *a3)
{
  FigVideoCompositorGetClassID();
  uint64_t v5 = CMDerivedObjectCreate();
  if (v5) {
    return v5;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_DWORD *)(DerivedStorage + 112) = 0;
  *(_DWORD *)(DerivedStorage + 88) = 1065353216;
  *(_DWORD *)(DerivedStorage + 160) = 0;
  *(void *)(DerivedStorage + 360) = 0x7FFFFFFFLL;
  *(void *)(DerivedStorage + 328) = 0x7FFFFFFFLL;
  uint64_t v7 = FigSimpleMutexCreate();
  *(void *)(DerivedStorage + 16) = v7;
  if (!v7) {
    return FigSignalErrorAt();
  }
  uint64_t v8 = FigDispatchQueueCreateWithPriority();
  *(void *)(DerivedStorage + 168) = v8;
  if (!v8) {
    return FigSignalErrorAt();
  }
  uint64_t v9 = FigDispatchQueueCreateWithPriority();
  *(void *)(DerivedStorage + 192) = v9;
  if (!v9) {
    return FigSignalErrorAt();
  }
  uint64_t v10 = FigSimpleMutexCreate();
  *(void *)(DerivedStorage + 216) = v10;
  if (!v10) {
    return FigSignalErrorAt();
  }
  uint64_t v11 = FigSimpleMutexCreate();
  *(void *)(DerivedStorage + 296) = v11;
  if (!v11) {
    return FigSignalErrorAt();
  }
  uint64_t v12 = FigSemaphoreCreate();
  *(void *)(DerivedStorage + 312) = v12;
  if (!v12)
  {
    FigSignalErrorAt();
    return 0;
  }
  CFMutableSetRef Mutable = CFSetCreateMutable(a1, 0, 0);
  *(void *)(DerivedStorage + 304) = Mutable;
  if (!Mutable) {
    return FigSignalErrorAt();
  }
  uint64_t v14 = 0;
  *a3 = 0;
  return v14;
}

uint64_t customVideoCompositor_Finalize(void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFSetApplyFunction(*(CFSetRef *)(DerivedStorage + 304), (CFSetApplierFunction)customVideoCompositor_purgePendingFrame, a1);
  CFAllocatorRef v3 = *(const void **)(DerivedStorage + 304);
  if (v3) {
    CFRelease(v3);
  }
  CFTypeRef v4 = *(const void **)(DerivedStorage + 48);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(DerivedStorage + 48) = 0;
  }
  uint64_t v5 = *(const void **)(DerivedStorage + 56);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(DerivedStorage + 56) = 0;
  }
  CFTypeID v6 = *(const void **)(DerivedStorage + 72);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(DerivedStorage + 72) = 0;
  }
  uint64_t v7 = *(const void **)(DerivedStorage + 64);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(DerivedStorage + 64) = 0;
  }
  uint64_t v8 = *(const void **)(DerivedStorage + 80);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(DerivedStorage + 80) = 0;
  }
  uint64_t v9 = *(const void **)(DerivedStorage + 32);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(DerivedStorage + 32) = 0;
  }
  uint64_t v10 = *(const void **)(DerivedStorage + 40);
  if (v10)
  {
    CFRelease(v10);
    *(void *)(DerivedStorage + 40) = 0;
  }
  uint64_t v11 = *(const void **)(DerivedStorage + 24);
  if (v11)
  {
    CFRelease(v11);
    *(void *)(DerivedStorage + 24) = 0;
  }
  if (*(void *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(void *)uint64_t DerivedStorage = 0;
  }
  uint64_t v12 = *(const void **)(DerivedStorage + 8);
  if (v12)
  {
    CFRelease(v12);
    *(void *)(DerivedStorage + 8) = 0;
  }
  CFRange v13 = *(const void **)(DerivedStorage + 96);
  if (v13)
  {
    CFRelease(v13);
    *(void *)(DerivedStorage + 96) = 0;
  }
  uint64_t v14 = *(const void **)(DerivedStorage + 104);
  if (v14)
  {
    CFRelease(v14);
    *(void *)(DerivedStorage + 104) = 0;
  }
  CGRect v15 = *(void **)(DerivedStorage + 120);
  if (v15)
  {
    *(void *)(DerivedStorage + 120) = 0;
    free(v15);
  }
  CGRect v16 = *(void **)(DerivedStorage + 128);
  if (v16)
  {
    *(void *)(DerivedStorage + 128) = 0;
    free(v16);
  }
  CGRect v17 = *(void **)(DerivedStorage + 144);
  if (v17)
  {
    *(void *)(DerivedStorage + 144) = 0;
    free(v17);
  }
  CGRect v18 = *(void **)(DerivedStorage + 152);
  if (v18)
  {
    *(void *)(DerivedStorage + 152) = 0;
    free(v18);
  }
  if (*(void *)(DerivedStorage + 16))
  {
    FigSimpleMutexDestroy();
    *(void *)(DerivedStorage + 16) = 0;
  }
  CGFloat v19 = *(NSObject **)(DerivedStorage + 168);
  if (v19)
  {
    dispatch_release(v19);
    *(void *)(DerivedStorage + 168) = 0;
  }
  CGFloat v20 = *(NSObject **)(DerivedStorage + 192);
  if (v20)
  {
    dispatch_release(v20);
    *(void *)(DerivedStorage + 192) = 0;
  }
  if (*(void *)(DerivedStorage + 216))
  {
    FigSimpleMutexDestroy();
    *(void *)(DerivedStorage + 216) = 0;
  }
  if (*(void *)(DerivedStorage + 296))
  {
    FigSimpleMutexDestroy();
    *(void *)(DerivedStorage + 296) = 0;
  }
  uint64_t result = *(void *)(DerivedStorage + 312);
  if (result)
  {
    uint64_t result = FigSemaphoreDestroy();
    *(void *)(DerivedStorage + 312) = 0;
  }
  return result;
}

__CFString *customVideoCompositor_CopyDebugDescription(const void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  CFMutableSetRef Mutable = CFStringCreateMutable(v2, 0);
  CFTypeRef cf = 0;
  CFIndex v4 = CFGetRetainCount(a1);
  CFAllocatorRef v5 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, @"<FigVideoCompositor_Custom %p retainCount: %ld allocator: %p ", a1, v4, v5);
  int v6 = cvc_copyPerformanceDictionary((uint64_t)a1, (CFMutableDictionaryRef *)&cf);
  CFTypeRef v7 = cf;
  if (!v6 && cf)
  {
    CFStringAppendFormat(Mutable, 0, @", performanceDictionary %@", cf);
    CFTypeRef v7 = cf;
  }
  if (v7) {
    CFRelease(v7);
  }
  CFStringAppendFormat(Mutable, 0, @">");
  return Mutable;
}

uint64_t customVideoCompositor_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, CFMutableDictionaryRef *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 16));
  if (CFEqual(a2, @"RenderDimensions"))
  {
    *a4 = *(CFMutableDictionaryRef *)(DerivedStorage + 24);
    uint64_t v8 = *(const void **)(DerivedStorage + 24);
    if (!v8)
    {
LABEL_4:
      uint64_t v9 = 0;
      goto LABEL_5;
    }
LABEL_3:
    CFRetain(v8);
    goto LABEL_4;
  }
  if (CFEqual(a2, @"RenderPixelAspectRatio"))
  {
    *a4 = *(CFMutableDictionaryRef *)(DerivedStorage + 32);
    uint64_t v8 = *(const void **)(DerivedStorage + 32);
    if (!v8) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if (CFEqual(a2, @"RenderEdgeProcessingPixels"))
  {
    *a4 = *(CFMutableDictionaryRef *)(DerivedStorage + 40);
    uint64_t v8 = *(const void **)(DerivedStorage + 40);
    if (!v8) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if (CFEqual(a2, @"DestinationPixelBufferDesiredAttributes"))
  {
    *a4 = *(CFMutableDictionaryRef *)(DerivedStorage + 48);
    uint64_t v8 = *(const void **)(DerivedStorage + 48);
    if (!v8) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if (CFEqual(a2, @"DestinationPixelBufferDesiredYCbCrMatrix"))
  {
    *a4 = *(CFMutableDictionaryRef *)(DerivedStorage + 56);
    uint64_t v8 = *(const void **)(DerivedStorage + 56);
    if (!v8) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if (CFEqual(a2, @"DestinationPixelBufferDesiredColorPrimaries"))
  {
    *a4 = *(CFMutableDictionaryRef *)(DerivedStorage + 72);
    uint64_t v8 = *(const void **)(DerivedStorage + 72);
    if (!v8) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if (CFEqual(a2, @"DestinationPixelBufferDesiredTransferFunction"))
  {
    *a4 = *(CFMutableDictionaryRef *)(DerivedStorage + 64);
    uint64_t v8 = *(const void **)(DerivedStorage + 64);
    if (!v8) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if (CFEqual(a2, @"SourcePixelBufferAttributes"))
  {
    *a4 = *(CFMutableDictionaryRef *)(DerivedStorage + 80);
    uint64_t v8 = *(const void **)(DerivedStorage + 80);
    if (!v8) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if (CFEqual(a2, @"RenderScale"))
  {
    UInt32 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberFloatType, (const void *)(DerivedStorage + 88));
LABEL_36:
    uint64_t v9 = 0;
    *a4 = UInt32;
    goto LABEL_5;
  }
  if (CFEqual(a2, @"CanApplyRenderScale"))
  {
    uint64_t v12 = (const void **)MEMORY[0x1E4F1CFD0];
    goto LABEL_34;
  }
  if (CFEqual(a2, @"HighQualityRendering"))
  {
    uint64_t v12 = (const void **)MEMORY[0x1E4F1CFD0];
    if (!*(unsigned char *)(DerivedStorage + 116)) {
      uint64_t v12 = (const void **)MEMORY[0x1E4F1CFC8];
    }
LABEL_34:
    UInt32 = (__CFDictionary *)*v12;
    if (!*v12) {
      goto LABEL_36;
    }
LABEL_35:
    UInt32 = (__CFDictionary *)CFRetain(UInt32);
    goto LABEL_36;
  }
  if (CFEqual(a2, @"PixelBufferPoolSharingID"))
  {
    UInt32 = *(__CFDictionary **)(DerivedStorage + 96);
    if (!UInt32) {
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  if (CFEqual(a2, @"CompositorInstanceID"))
  {
    UInt32 = *(__CFDictionary **)(DerivedStorage + 104);
    if (!UInt32) {
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  if (CFEqual(a2, @"SourceColorConformanceCapabilityLevel"))
  {
    UInt32 = (__CFDictionary *)FigCFNumberCreateUInt32();
    goto LABEL_36;
  }
  if (CFEqual(a2, @"PerformanceDictionary"))
  {
    MEMORY[0x19970E930](*(void *)(DerivedStorage + 16));
    uint64_t v9 = cvc_copyPerformanceDictionary(a1, a4);
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 16));
  }
  else
  {
    uint64_t v9 = FigSignalErrorAt();
  }
LABEL_5:
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 16));
  return v9;
}

uint64_t customVideoCompositor_SetProperty(const void *a1, void *a2, const void *a3)
{
  CFRange values = a2;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 16));
  if (CFEqual(@"RenderDimensions", a2))
  {
    cf.CGFloat width = 0.0;
    cf.CGFloat height = 0.0;
    if (a3)
    {
      CFTypeID TypeID = CFDictionaryGetTypeID();
      if (TypeID == CFGetTypeID(a3)
        && CGSizeMakeWithDictionaryRepresentation((CFDictionaryRef)a3, &cf)
        && cf.width > 0.0
        && cf.height > 0.0)
      {
        uint64_t v8 = *(const void **)(DerivedStorage + 24);
        *(void *)(DerivedStorage + 24) = a3;
        CFRetain(a3);
        if (v8) {
          CFRelease(v8);
        }
        a3 = 0;
        goto LABEL_10;
      }
    }
    a3 = (const void *)FigSignalErrorAt();
    goto LABEL_12;
  }
  if (CFEqual(@"RenderPixelAspectRatio", a2))
  {
    if (a3)
    {
      CFTypeID v10 = CFDictionaryGetTypeID();
      if (v10 == CFGetTypeID(a3))
      {
        CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a3, (const void *)*MEMORY[0x1E4F24B90]);
        CFNumberRef v12 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a3, (const void *)*MEMORY[0x1E4F24BA0]);
        LODWORD(cf.width) = 0;
        int valuePtr = 0;
        if (Value)
        {
          CFNumberRef v13 = v12;
          CFTypeID v14 = CFNumberGetTypeID();
          if (v14 == CFGetTypeID(Value))
          {
            CFNumberGetValue(Value, kCFNumberIntType, &cf);
            if (SLODWORD(cf.width) >= 1)
            {
              if (v13)
              {
                CFTypeID v15 = CFNumberGetTypeID();
                if (v15 == CFGetTypeID(v13))
                {
                  CFNumberGetValue(v13, kCFNumberIntType, &valuePtr);
                  if (valuePtr >= 1)
                  {
                    CGRect v16 = *(const void **)(DerivedStorage + 32);
                    *(void *)(DerivedStorage + 32) = a3;
LABEL_58:
                    CFRetain(a3);
                    goto LABEL_59;
                  }
                }
              }
            }
          }
        }
      }
      goto LABEL_89;
    }
    CGRect v16 = *(const void **)(DerivedStorage + 32);
    *(void *)(DerivedStorage + 32) = 0;
LABEL_59:
    if (v16) {
      CFRelease(v16);
    }
    *(unsigned char *)(DerivedStorage + 117) = 1;
    goto LABEL_62;
  }
  if (CFEqual(@"RenderEdgeProcessingPixels", a2))
  {
    if (!a3)
    {
      CGRect v16 = *(const void **)(DerivedStorage + 40);
      *(void *)(DerivedStorage + 40) = 0;
      goto LABEL_59;
    }
    CFTypeID v17 = CFArrayGetTypeID();
    if (v17 == CFGetTypeID(a3) && CFArrayGetCount((CFArrayRef)a3) == 4)
    {
      CFIndex v18 = 0;
      while (1)
      {
        CFTypeID v19 = CFNumberGetTypeID();
        CFArrayRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)a3, v18);
        if (v19 != CFGetTypeID(ValueAtIndex)) {
          break;
        }
        if (++v18 == 4)
        {
          CGRect v16 = *(const void **)(DerivedStorage + 40);
          *(void *)(DerivedStorage + 40) = a3;
          goto LABEL_58;
        }
      }
    }
LABEL_89:
    a3 = (const void *)FigSignalErrorAt();
LABEL_90:
    MEMORY[0x19970E930](*(void *)(DerivedStorage + 16));
    return (uint64_t)a3;
  }
  if (CFEqual(@"DestinationPixelBufferDesiredAttributes", a2))
  {
    if (a3)
    {
      CFTypeID v21 = CFDictionaryGetTypeID();
      if (v21 != CFGetTypeID(a3)) {
        goto LABEL_89;
      }
    }
    cf.CGFloat width = 0.0;
    a3 = (const void *)customVideoCompositor_copySuitablePixelBufferAttributes(a3, 1, (CFDictionaryRef *)&cf);
    if (!a3)
    {
      CGFloat v22 = *(const void **)(DerivedStorage + 48);
      CGFloat width = cf.width;
      *(CGFloat *)(DerivedStorage + 48) = cf.width;
      if (width != 0.0) {
        CFRetain(*(CFTypeRef *)&width);
      }
      if (v22) {
        CFRelease(v22);
      }
      if (width != 0.0) {
        CFRelease(*(CFTypeRef *)&width);
      }
      goto LABEL_10;
    }
LABEL_12:
    int v9 = 0;
    goto LABEL_13;
  }
  if (CFEqual(@"DestinationPixelBufferDesiredYCbCrMatrix", a2))
  {
    if (a3)
    {
      CFTypeID v24 = CFStringGetTypeID();
      if (v24 == CFGetTypeID(a3))
      {
        CGRect v16 = *(const void **)(DerivedStorage + 56);
        *(void *)(DerivedStorage + 56) = a3;
        goto LABEL_58;
      }
      goto LABEL_89;
    }
    CGRect v16 = *(const void **)(DerivedStorage + 56);
    *(void *)(DerivedStorage + 56) = 0;
    goto LABEL_59;
  }
  if (CFEqual(@"DestinationPixelBufferDesiredColorPrimaries", a2))
  {
    if (!a3)
    {
      CGRect v16 = *(const void **)(DerivedStorage + 72);
      *(void *)(DerivedStorage + 72) = 0;
      goto LABEL_59;
    }
    CFTypeID v25 = CFStringGetTypeID();
    if (v25 == CFGetTypeID(a3))
    {
      CGRect v16 = *(const void **)(DerivedStorage + 72);
      *(void *)(DerivedStorage + 72) = a3;
      goto LABEL_58;
    }
    goto LABEL_89;
  }
  if (CFEqual(@"DestinationPixelBufferDesiredTransferFunction", a2))
  {
    if (!a3)
    {
      CGRect v16 = *(const void **)(DerivedStorage + 64);
      *(void *)(DerivedStorage + 64) = 0;
      goto LABEL_59;
    }
    CFTypeID v26 = CFStringGetTypeID();
    if (v26 == CFGetTypeID(a3))
    {
      CGRect v16 = *(const void **)(DerivedStorage + 64);
      *(void *)(DerivedStorage + 64) = a3;
      goto LABEL_58;
    }
    goto LABEL_89;
  }
  if (CFEqual(@"SourcePixelBufferAttributes", a2))
  {
    if (!a3 || (CFTypeID v30 = CFDictionaryGetTypeID(), v30 == CFGetTypeID(a3)))
    {
      cf.CGFloat width = 0.0;
      a3 = (const void *)customVideoCompositor_copySuitablePixelBufferAttributes(a3, 0, (CFDictionaryRef *)&cf);
      int v9 = 0;
      if (!a3)
      {
        uint64_t v31 = *(const void **)(DerivedStorage + 80);
        CGFloat v32 = cf.width;
        *(CGFloat *)(DerivedStorage + 80) = cf.width;
        if (v32 != 0.0) {
          CFRetain(*(CFTypeRef *)&v32);
        }
        if (v31) {
          CFRelease(v31);
        }
        if (v32 != 0.0) {
          CFRelease(*(CFTypeRef *)&v32);
        }
        int v9 = 1;
      }
LABEL_13:
      MEMORY[0x19970E930](*(void *)(DerivedStorage + 16));
      if (!v9) {
        return (uint64_t)a3;
      }
      goto LABEL_63;
    }
    goto LABEL_89;
  }
  if (CFEqual(@"RenderScale", a2))
  {
    LODWORD(cf.width) = 1065353216;
    if (a3)
    {
      CFTypeID v33 = CFGetTypeID(a3);
      if (v33 != CFNumberGetTypeID()
        || (CFNumberGetValue((CFNumberRef)a3, kCFNumberFloatType, &cf),
            float v34 = *(float *)&cf.width,
            *(float *)&cf.width <= 0.0))
      {
        a3 = (const void *)FigSignalErrorAt();
        if (a3) {
          goto LABEL_12;
        }
        float v34 = *(float *)&cf.width;
      }
    }
    else
    {
      float v34 = 1.0;
    }
    a3 = 0;
    *(float *)(DerivedStorage + 88) = v34;
LABEL_10:
    int v9 = 1;
    *(unsigned char *)(DerivedStorage + 117) = 1;
    goto LABEL_13;
  }
  if (!CFEqual(@"HighQualityRendering", a2))
  {
    if (CFEqual(@"ClientPID", a2))
    {
      if (a3)
      {
        CFTypeID v37 = CFGetTypeID(a3);
        if (v37 == CFNumberGetTypeID())
        {
          CFDictionaryRef v38 = (void *)(DerivedStorage + 164);
LABEL_103:
          CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, v38);
          goto LABEL_110;
        }
        goto LABEL_112;
      }
      *(_DWORD *)(DerivedStorage + 164) = 0;
      goto LABEL_110;
    }
    if (CFEqual(@"WorkerThreadPriority", a2))
    {
      if (a3)
      {
        CFTypeID v39 = CFGetTypeID(a3);
        if (v39 == CFNumberGetTypeID())
        {
          CFDictionaryRef v38 = (void *)(DerivedStorage + 160);
          goto LABEL_103;
        }
LABEL_112:
        a3 = 0;
        goto LABEL_90;
      }
      *(_DWORD *)(DerivedStorage + 160) = 0;
LABEL_110:
      if (*(void *)(DerivedStorage + 168)) {
        FigDispatchQueueSetPriorityAndClientPID();
      }
      goto LABEL_112;
    }
    if (CFEqual(@"CompositorInstanceID", a2))
    {
      if (a3)
      {
        CFTypeID v40 = CFGetTypeID(a3);
        if (v40 != CFNumberGetTypeID()) {
          goto LABEL_112;
        }
        double v41 = *(const void **)(DerivedStorage + 104);
        *(void *)(DerivedStorage + 104) = a3;
LABEL_115:
        CFRetain(a3);
        goto LABEL_117;
      }
      double v41 = *(const void **)(DerivedStorage + 104);
      *(void *)(DerivedStorage + 104) = 0;
    }
    else
    {
      if (!CFEqual(@"PixelBufferPoolSharingID", a2))
      {
        if (!CFEqual(@"LoopTimeRange", a2))
        {
          if (!CFEqual(@"SourceColorConformanceCapabilityLevel", a2)) {
            goto LABEL_89;
          }
          if (!a3) {
            goto LABEL_90;
          }
          CFTypeID v42 = CFGetTypeID(a3);
          if (v42 == CFNumberGetTypeID()) {
            CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, (void *)(DerivedStorage + 112));
          }
        }
        goto LABEL_112;
      }
      double v41 = *(const void **)(DerivedStorage + 96);
      *(void *)(DerivedStorage + 96) = a3;
      if (a3) {
        goto LABEL_115;
      }
    }
LABEL_117:
    if (v41) {
      CFRelease(v41);
    }
    goto LABEL_112;
  }
  if (a3)
  {
    CFTypeID v35 = CFBooleanGetTypeID();
    if (v35 != CFGetTypeID(a3)) {
      goto LABEL_89;
    }
    *(unsigned char *)(DerivedStorage + 116) = CFBooleanGetValue((CFBooleanRef)a3);
  }
  else
  {
    *(unsigned char *)(DerivedStorage + 116) = 0;
  }
LABEL_62:
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 16));
LABEL_63:
  CFAllocatorRef v27 = CFGetAllocator(a1);
  CFDictionaryRef v28 = CFDictionaryCreate(v27, (const void **)&kFigVideoCompositorParameter_ChangedProperty, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!v28) {
    return FigSignalErrorAt();
  }
  CFDictionaryRef v29 = v28;
  CMNotificationCenterGetDefaultLocalCenter();
  a3 = (const void *)CMNotificationCenterPostNotification();
  CFRelease(v29);
  return (uint64_t)a3;
}

uint64_t customVideoCompositor_purgePendingFrame(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = *(void (**)(void, uint64_t, uint64_t, void))(DerivedStorage + 176);
  if (v3) {
    v3(*(void *)(DerivedStorage + 184), a1, 4294954790, 0);
  }

  return FigSemaphoreSignal();
}

uint64_t cvc_copyPerformanceDictionary(uint64_t a1, CFMutableDictionaryRef *a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  if (!a2) {
    return 0;
  }
  long long v36 = 0u;
  long long v35 = 0u;
  long long v34 = 0u;
  long long v33 = 0u;
  long long v32 = 0u;
  long long v31 = 0u;
  long long v30 = 0u;
  long long v29 = 0u;
  long long v28 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  double valuePtr = 0.0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  keys[0] = @"NumberOfSourceFramesPassedThrough";
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  values[0] = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, (const void *)(DerivedStorage + 320));
  keys[1] = @"TotalNumberOfPreProcessedLayers";
  values[1] = CFNumberCreate(v4, kCFNumberIntType, (const void *)(DerivedStorage + 352));
  if (*(int *)(DerivedStorage + 384) < 1)
  {
    unsigned int v5 = 2;
  }
  else
  {
    double valuePtr = (float)((float)*(uint64_t *)(DerivedStorage + 360) / 1000000.0);
    *(void *)&long long v28 = 0x1EE56BF98;
    *(void *)&long long v18 = CFNumberCreate(v4, kCFNumberDoubleType, &valuePtr);
    double valuePtr = (float)((float)*(uint64_t *)(DerivedStorage + 368) / 1000000.0);
    *((void *)&v28 + 1) = 0x1EE56BFB8;
    *((void *)&v18 + 1) = CFNumberCreate(v4, kCFNumberDoubleType, &valuePtr);
    double valuePtr = (float)((float)*(uint64_t *)(DerivedStorage + 376)
                     / (float)((float)*(int *)(DerivedStorage + 384) * 1000000.0));
    *(void *)&long long v29 = 0x1EE56BFD8;
    *(void *)&long long v19 = CFNumberCreate(v4, kCFNumberDoubleType, &valuePtr);
    unsigned int v5 = 5;
  }
  if (*(int *)(DerivedStorage + 352) >= 1)
  {
    double valuePtr = (float)((float)*(uint64_t *)(DerivedStorage + 328) / 1000000.0);
    keys[v5] = @"MinPreprocessingTime";
    values[v5] = CFNumberCreate(v4, kCFNumberDoubleType, &valuePtr);
    double valuePtr = (float)((float)*(uint64_t *)(DerivedStorage + 336) / 1000000.0);
    keys[v5 + 1] = @"MaxPreprocessingTime";
    values[v5 + 1] = CFNumberCreate(v4, kCFNumberDoubleType, &valuePtr);
    double valuePtr = (float)((float)*(uint64_t *)(DerivedStorage + 344)
                     / (float)((float)*(int *)(DerivedStorage + 352) * 1000000.0));
    keys[v5 + 2] = @"AveragePreprocessingTime";
    values[v5 + 2] = CFNumberCreate(v4, kCFNumberDoubleType, &valuePtr);
    v5 += 3;
  }
  if (*(int *)(DerivedStorage + 416) >= 1)
  {
    double valuePtr = (float)((float)*(uint64_t *)(DerivedStorage + 392) / 1000000.0);
    keys[v5] = @"MinBufferReadyingTime";
    values[v5] = CFNumberCreate(v4, kCFNumberDoubleType, &valuePtr);
    double valuePtr = (float)((float)*(uint64_t *)(DerivedStorage + 400) / 1000000.0);
    keys[v5 + 1] = @"MaxBufferReadyingTime";
    values[v5 + 1] = CFNumberCreate(v4, kCFNumberDoubleType, &valuePtr);
    double valuePtr = (float)((float)*(uint64_t *)(DerivedStorage + 408)
                     / (float)((float)*(int *)(DerivedStorage + 416) * 1000000.0));
    keys[v5 + 2] = @"AverageBufferReadyingTime";
    values[v5 + 2] = CFNumberCreate(v4, kCFNumberDoubleType, &valuePtr);
    v5 += 3;
  }
  uint64_t v7 = v5;
  CFDictionaryRef v8 = CFDictionaryCreate(v4, (const void **)keys, (const void **)values, v5, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 216));
  int v9 = *(uint64_t (**)(void, CFTypeRef *))(DerivedStorage + 248);
  if (v9) {
    uint64_t v6 = v9(*(void *)(DerivedStorage + 288), &cf);
  }
  else {
    uint64_t v6 = 0;
  }
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 216));
  if (!v6)
  {
    CFDictionaryRef v10 = (const __CFDictionary *)cf;
    if (cf)
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (Mutable)
      {
        CFDictionaryApplyFunction(v10, (CFDictionaryApplierFunction)cvc_mergeDictionariesApplier, Mutable);
        CFDictionaryApplyFunction(v8, (CFDictionaryApplierFunction)cvc_mergeDictionariesApplier, Mutable);
LABEL_17:
        if (v8) {
          CFRelease(v8);
        }
        uint64_t v6 = 0;
        goto LABEL_23;
      }
      uint64_t v12 = FigSignalErrorAt();
      if (!v12) {
        goto LABEL_17;
      }
      uint64_t v6 = v12;
    }
  }
  CFMutableDictionaryRef Mutable = v8;
LABEL_23:
  *a2 = Mutable;
  CFNumberRef v13 = values;
  do
  {
    if (*v13) {
      CFRelease(*v13);
    }
    ++v13;
    --v7;
  }
  while (v7);
  if (cf) {
    CFRelease(cf);
  }
  return v6;
}

void cvc_mergeDictionariesApplier(void *key, void *value, CFMutableDictionaryRef theDict)
{
}

uint64_t customVideoCompositor_copySuitablePixelBufferAttributes(const void *a1, uint64_t a2, CFDictionaryRef *a3)
{
  CFDictionaryRef resolvedDictionaryOut = 0;
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  MutableCFDictionaryRef Copy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
  if (!MutableCopy)
  {
    uint64_t v15 = FigSignalErrorAt();
LABEL_15:
    uint64_t v12 = 0;
    goto LABEL_9;
  }
  uint64_t v7 = MutableCopy;
  CFDictionaryRemoveValue(MutableCopy, (const void *)*MEMORY[0x1E4F24E10]);
  CFDictionaryRemoveValue(v7, (const void *)*MEMORY[0x1E4F24D08]);
  CFDictionaryRemoveValue(v7, (const void *)*MEMORY[0x1E4F24CC8]);
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v5, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
    uint64_t v15 = FigSignalErrorAt();
    CFRelease(v7);
    goto LABEL_15;
  }
  CFMutableDictionaryRef v9 = Mutable;
  FigGetAlignmentForIOSurfaceOutput();
  uint64_t PixelBufferAttributesWithIOSurfaceSupport = FigCreatePixelBufferAttributesWithIOSurfaceSupport();
  if (PixelBufferAttributesWithIOSurfaceSupport)
  {
    uint64_t v15 = PixelBufferAttributesWithIOSurfaceSupport;
    uint64_t v12 = 0;
  }
  else
  {
    uint64_t v11 = CFArrayCreateMutable(v5, 0, MEMORY[0x1E4F1D510]);
    uint64_t v12 = v11;
    if (v11)
    {
      CFArrayAppendValue(v11, 0);
      CFArrayAppendValue(v12, v7);
      CFAllocatorRef v13 = CFGetAllocator(a1);
      if (CVPixelBufferCreateResolvedAttributesDictionary(v13, v12, &resolvedDictionaryOut)
        && (uint64_t v14 = FigCreatePixelBufferAttributesWithIOSurfaceSupport(), v14))
      {
        uint64_t v15 = v14;
        if (resolvedDictionaryOut) {
          CFRelease(resolvedDictionaryOut);
        }
      }
      else
      {
        uint64_t v15 = 0;
        *a3 = resolvedDictionaryOut;
        CFDictionaryRef resolvedDictionaryOut = 0;
      }
    }
    else
    {
      uint64_t v15 = FigSignalErrorAt();
    }
  }
  CFRelease(v7);
  CFRelease(v9);
LABEL_9:
  if (v12) {
    CFRelease(v12);
  }
  return v15;
}

uint64_t customVideoCompositor_RenderFrame(const void *a1, int a2, uint64_t a3, const void **a4, int a5, uint64_t a6, const void **a7, const void *a8, uint64_t a9, const void *a10)
{
  int v12 = a5;
  unsigned int value = 0;
  CFAllocatorRef v13 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  if (!a2)
  {
    CFDictionaryRef v25 = 0;
    if (a5) {
      goto LABEL_19;
    }
LABEL_16:
    long long v26 = 0;
    goto LABEL_31;
  }
  CFAllocatorRef v17 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
    CFDictionaryRef v25 = 0;
    long long v26 = 0;
    goto LABEL_50;
  }
  long long v19 = Mutable;
  if (a2 >= 1)
  {
    int v36 = v12;
    uint64_t v20 = a2;
    while (1)
    {
      if (*a4)
      {
        long long v21 = CFArrayCreateMutable(v17, 1, MEMORY[0x1E4F1D510]);
        if (!v21)
        {
          long long v26 = 0;
          long long v30 = 0;
          uint64_t v34 = 4294954510;
LABEL_45:
          CFDictionaryRef v25 = v19;
          goto LABEL_32;
        }
        long long v22 = *a4;
        *(_OWORD *)&v39.unsigned int value = *(_OWORD *)a9;
        v39.CMTimeEpoch epoch = *(void *)(a9 + 16);
        uint64_t v23 = FigVCPTimedSampleCreateWithPixelBuffer((uint64_t)&v39, v22, (uint64_t *)&value);
        if (v23)
        {
          uint64_t v34 = v23;
          long long v26 = 0;
          long long v30 = 0;
          goto LABEL_45;
        }
        CFArrayAppendValue(v21, value);
        if (value)
        {
          CFRelease(value);
          unsigned int value = 0;
        }
        uint64_t UInt64 = (const void *)FigCFNumberCreateUInt64();
        CFDictionarySetValue(v19, UInt64, v21);
        if (UInt64) {
          CFRelease(UInt64);
        }
        CFRelease(v21);
      }
      a3 += 4;
      ++a4;
      if (!--v20)
      {
        CFDictionaryRef v25 = v19;
        int v12 = v36;
        goto LABEL_18;
      }
    }
  }
  CFDictionaryRef v25 = Mutable;
LABEL_18:
  CFAllocatorRef v13 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  if (!v12) {
    goto LABEL_16;
  }
LABEL_19:
  CFAllocatorRef v27 = *v13;
  long long v26 = CFDictionaryCreateMutable(*v13, v12, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (v26)
  {
    if (v12 >= 1)
    {
      uint64_t v28 = v12;
      long long v29 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
      do
      {
        if (*a7)
        {
          long long v30 = CFArrayCreateMutable(v27, 1, v29);
          if (!v30)
          {
            long long v21 = 0;
            goto LABEL_47;
          }
          long long v31 = *a7;
          *(_OWORD *)&v39.unsigned int value = *(_OWORD *)a9;
          v39.CMTimeEpoch epoch = *(void *)(a9 + 16);
          uint64_t v32 = FigVCPTimedSampleCreateWithSampleBuffer((uint64_t)&v39, v31, (uint64_t *)&value);
          if (v32)
          {
            uint64_t v34 = v32;
            long long v21 = 0;
            goto LABEL_32;
          }
          CFArrayAppendValue(v30, value);
          if (value)
          {
            CFRelease(value);
            unsigned int value = 0;
          }
          long long v33 = (const void *)FigCFNumberCreateUInt64();
          CFDictionarySetValue(v26, v33, v30);
          if (v33) {
            CFRelease(v33);
          }
          CFRelease(v30);
        }
        a6 += 4;
        ++a7;
        --v28;
      }
      while (v28);
    }
LABEL_31:
    *(_OWORD *)&v39.unsigned int value = *(_OWORD *)a9;
    v39.CMTimeEpoch epoch = *(void *)(a9 + 16);
    uint64_t v34 = customVideoCompositor_RenderFrameFromWindow(a1, v25, v26, a8, &v39, a10, 0);
    long long v21 = 0;
    long long v30 = 0;
    goto LABEL_32;
  }
LABEL_50:
  long long v21 = 0;
  long long v30 = 0;
LABEL_47:
  uint64_t v34 = 4294954510;
LABEL_32:
  if (value) {
    CFRelease(value);
  }
  if (v21) {
    CFRelease(v21);
  }
  if (v25) {
    CFRelease(v25);
  }
  if (v30) {
    CFRelease(v30);
  }
  if (v26) {
    CFRelease(v26);
  }
  return v34;
}

uint64_t customVideoCompositor_CancelPendingFrames()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](DerivedStorage[27]);
  long long v1 = (void (*)(void))DerivedStorage[30];
  if (v1)
  {
    v1(DerivedStorage[36]);
    uint64_t v2 = 0;
  }
  else
  {
    uint64_t v2 = 4294954787;
  }
  MEMORY[0x19970E930](DerivedStorage[27]);
  return v2;
}

uint64_t customVideoCompositor_SetOutputCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = 0;
  uint64_t v11 = &v10;
  uint64_t v12 = 0x2000000000;
  int v13 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v6 = *(NSObject **)(DerivedStorage + 168);
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 0x40000000;
  v9[2] = __customVideoCompositor_SetOutputCallback_block_invoke;
  v9[3] = &unk_1E57AAC70;
  v9[6] = a2;
  void v9[7] = a3;
  v9[4] = &v10;
  v9[5] = DerivedStorage;
  dispatch_sync(v6, v9);
  uint64_t v7 = *((unsigned int *)v11 + 6);
  _Block_object_dispose(&v10, 8);
  return v7;
}

uint64_t customVideoCompositor_OutputCustomFrame(const void *a1, const void *a2, int a3, const void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 296));
  int v9 = CFSetContainsValue(*(CFSetRef *)(DerivedStorage + 304), a2);
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 296));
  if (v9)
  {
    if (a4) {
      CFRetain(a4);
    }
    if (a1) {
      CFRetain(a1);
    }
    uint64_t v10 = *(NSObject **)(DerivedStorage + 168);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __customVideoCompositor_OutputCustomFrame_block_invoke;
    block[3] = &__block_descriptor_tmp_10_13;
    int v13 = a3;
    block[4] = a1;
    void block[5] = a4;
    void block[6] = DerivedStorage;
    block[7] = a2;
    dispatch_async(v10, block);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t customVideoCompositor_SetCustomCallbacks(void *a1, void *a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v7 = DerivedStorage;
  if (a2)
  {
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 216));
    __copy_assignment_8_8_t0w8_pa0_44030_8_pa0_33393_16_pa0_15098_24_pa0_21060_32_pa0_1898_40_pa0_17456_48_pa0_31433_56((void *)(v7 + 224), a2);
  }
  else
  {
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 296));
    CFSetApplyFunction(*(CFSetRef *)(v7 + 304), (CFSetApplierFunction)customVideoCompositor_purgePendingFrame, a1);
    CFSetRemoveAllValues(*(CFMutableSetRef *)(v7 + 304));
    MEMORY[0x19970E930](*(void *)(v7 + 296));
    MEMORY[0x19970E910](*(void *)(v7 + 216));
    *(_OWORD *)(v7 + 224) = 0u;
    *(_OWORD *)(v7 + 240) = 0u;
    *(_OWORD *)(v7 + 256) = 0u;
    *(_OWORD *)(v7 + 272) = 0u;
  }
  *(void *)(v7 + 288) = a3;
  MEMORY[0x19970E930](*(void *)(v7 + 216));
  return 0;
}

uint64_t customVideoCompositor_AnticipateRendering(uint64_t a1, long long *a2, long long *a3, long long *a4, long long *a5)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](DerivedStorage[27]);
  uint64_t v10 = (uint64_t (*)(uint64_t, long long *, long long *, long long *, long long *))DerivedStorage[32];
  if (v10)
  {
    uint64_t v11 = DerivedStorage[36];
    long long v20 = *a2;
    uint64_t v21 = *((void *)a2 + 2);
    long long v18 = *a3;
    uint64_t v19 = *((void *)a3 + 2);
    long long v16 = *a4;
    uint64_t v17 = *((void *)a4 + 2);
    long long v14 = *a5;
    uint64_t v15 = *((void *)a5 + 2);
    uint64_t v12 = v10(v11, &v20, &v18, &v16, &v14);
  }
  else
  {
    uint64_t v12 = 4294954787;
  }
  MEMORY[0x19970E930](DerivedStorage[27]);
  return v12;
}

uint64_t customVideoCompositor_PrerollForRendering(uint64_t a1, long long *a2, long long *a3, long long *a4, long long *a5, uint64_t a6)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](DerivedStorage[27]);
  uint64_t v12 = (uint64_t (*)(uint64_t, long long *, long long *, long long *, long long *, uint64_t))DerivedStorage[33];
  if (v12)
  {
    uint64_t v13 = DerivedStorage[36];
    long long v22 = *a2;
    uint64_t v23 = *((void *)a2 + 2);
    long long v20 = *a3;
    uint64_t v21 = *((void *)a3 + 2);
    long long v18 = *a4;
    uint64_t v19 = *((void *)a4 + 2);
    long long v16 = *a5;
    uint64_t v17 = *((void *)a5 + 2);
    uint64_t v14 = v12(v13, &v22, &v20, &v18, &v16, a6);
  }
  else
  {
    uint64_t v14 = 4294954787;
  }
  MEMORY[0x19970E930](DerivedStorage[27]);
  return v14;
}

uint64_t customVideoCompositor_CompletePreroll(const void *a1, int a2, int a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1) {
    CFRetain(a1);
  }
  uint64_t v7 = *(NSObject **)(DerivedStorage + 192);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __customVideoCompositor_CompletePreroll_block_invoke;
  block[3] = &__block_descriptor_tmp_11_9;
  int v10 = a2;
  int v11 = a3;
  block[4] = DerivedStorage;
  void block[5] = a1;
  dispatch_async(v7, block);
  return 0;
}

uint64_t customVideoCompositor_SetCompletePrerollCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v6 = *(NSObject **)(DerivedStorage + 192);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __customVideoCompositor_SetCompletePrerollCallback_block_invoke;
  block[3] = &__block_descriptor_tmp_12_6;
  block[4] = DerivedStorage;
  void block[5] = a2;
  void block[6] = a3;
  dispatch_sync(v6, block);
  return 0;
}

uint64_t customVideoCompositor_RenderFrameFromWindow(const void *a1, const __CFDictionary *a2, const __CFDictionary *a3, const void *a4, CMTime *a5, const void *a6, uint64_t a7)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFArrayRef v87 = 0;
  uint64_t v86 = 0;
  if (!a4) {
    goto LABEL_115;
  }
  CFTypeID v15 = CFGetTypeID(a4);
  if (v15 != CFDictionaryGetTypeID()) {
    goto LABEL_115;
  }
  CFNumberRef Value = CFDictionaryGetValue((CFDictionaryRef)a4, @"PassthroughSourceVideoTrackID");
  if (!Value)
  {
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 296));
    CFIndex Count = CFSetGetCount(*(CFSetRef *)(DerivedStorage + 304));
    uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
    if (Count > 1)
    {
      do
      {
        MEMORY[0x19970E930](*(void *)(DerivedStorage + 296));
        FigSemaphoreWaitRelative();
        MEMORY[0x19970E910](*(void *)(DerivedStorage + 296));
      }
      while (CFSetGetCount(*(CFSetRef *)(DerivedStorage + 304)) > 1);
    }
    uint64_t v27 = FigGetUpTimeNanoseconds();
    uint64_t v28 = (v27 - UpTimeNanoseconds) / 1000;
    ++*(_DWORD *)(DerivedStorage + 384);
    uint64_t v29 = *(void *)(DerivedStorage + 368);
    *(void *)(DerivedStorage + 376) += v28;
    uint64_t v30 = *(void *)(DerivedStorage + 360);
    if (v30 >= v28) {
      uint64_t v30 = (v27 - UpTimeNanoseconds) / 1000;
    }
    if (v29 > v28) {
      uint64_t v28 = v29;
    }
    *(void *)(DerivedStorage + 360) = v30;
    *(void *)(DerivedStorage + 368) = v28;
    CFSetSetValue(*(CFMutableSetRef *)(DerivedStorage + 304), a6);
    MEMORY[0x19970E930](*(void *)(DerivedStorage + 296));
    CFArrayRef v31 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)a4, @"RequiredVideoTrackIDArray");
    if (FigCFDictionaryGetCount() < 1)
    {
      CFMutableDictionaryRef Mutable = 0;
    }
    else if (v31)
    {
      unsigned int v78 = a7;
      uint64_t v32 = CFArrayGetCount(v31);
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v32, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (v32 >= 1)
      {
        CFArrayRef v81 = a6;
        for (CFIndex i = 0; i != v32; ++i)
        {
          CFArrayRef ValueAtIndex = CFArrayGetValueAtIndex(v31, i);
          int v36 = (const void *)FigCFDictionaryGetValue();
          if (v36) {
            CFDictionarySetValue(Mutable, ValueAtIndex, v36);
          }
        }
        a6 = v81;
      }
      a7 = v78;
    }
    else
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2);
    }
    CFArrayRef v63 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)a4, @"RequiredSampleDataTrackIDArray");
    if (FigCFDictionaryGetCount() < 1)
    {
      CFDictionaryRef Copy = 0;
    }
    else if (v63)
    {
      unsigned int v80 = a7;
      uint64_t v64 = CFArrayGetCount(v63);
      CFDictionaryRef Copy = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v64, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (v64 >= 1)
      {
        CFArrayRef v83 = a6;
        for (CFIndex j = 0; j != v64; ++j)
        {
          double v67 = CFArrayGetValueAtIndex(v63, j);
          double v68 = (const void *)FigCFDictionaryGetValue();
          if (v68) {
            CFDictionarySetValue(Copy, v67, v68);
          }
        }
        a6 = v83;
      }
      a7 = v80;
    }
    else
    {
      CFDictionaryRef Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a3);
    }
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 216));
    double v69 = *(uint64_t (**)(uint64_t, __CFDictionary *, __CFDictionary *, const void *, CMTime *, const void *))(DerivedStorage + 272);
    if (v69)
    {
      uint64_t v71 = *(void *)(DerivedStorage + 288);
      CMTime size = *a5;
      uint64_t v72 = v69(v71, Mutable, Copy, a4, &size, a6);
      uint64_t v37 = 0;
      if (v72)
      {
        char v73 = 0;
        uint64_t v37 = v72;
        if (!Mutable) {
          goto LABEL_104;
        }
        goto LABEL_103;
      }
    }
    else
    {
      double v70 = *(uint64_t (**)(uint64_t, __CFDictionary *, __CFDictionary *, const void *, CMTime *, const void *, uint64_t))(DerivedStorage + 280);
      if (!v70)
      {
        uint64_t v37 = FigSignalErrorAt();
        char v73 = 0;
        if (!Mutable) {
          goto LABEL_104;
        }
        goto LABEL_103;
      }
      uint64_t v74 = *(void *)(DerivedStorage + 288);
      CMTime size = *a5;
      uint64_t v37 = v70(v74, Mutable, Copy, a4, &size, a6, a7);
    }
    MEMORY[0x19970E930](*(void *)(DerivedStorage + 216));
    char v73 = 1;
    if (!Mutable)
    {
LABEL_104:
      if (Copy) {
        CFRelease(Copy);
      }
      if ((v73 & 1) == 0)
      {
        MEMORY[0x19970E930](*(void *)(DerivedStorage + 216));
        MEMORY[0x19970E910](*(void *)(DerivedStorage + 296));
        CFSetRemoveValue(*(CFMutableSetRef *)(DerivedStorage + 304), a6);
        MEMORY[0x19970E930](*(void *)(DerivedStorage + 296));
        FigSemaphoreSignal();
      }
      goto LABEL_108;
    }
LABEL_103:
    CFRelease(Mutable);
    goto LABEL_104;
  }
  CFTypeID v17 = CFGetTypeID(Value);
  if (v17 != CFNumberGetTypeID()) {
    goto LABEL_115;
  }
  if (!FigCFDictionaryGetValueIfPresent())
  {
    uint64_t v37 = 0;
LABEL_108:
    CVPixelBufferPoolFlush(*(CVPixelBufferPoolRef *)(DerivedStorage + 8), 0);
    return v37;
  }
  CMTime size = *a5;
  CFArrayRef v18 = FigVCPGetTimedSampleAtTimeFromOrderedArray(v87, &size);
  if (!v18) {
    goto LABEL_115;
  }
  uint64_t PixelBuffer = FigVCPTimedSampleGetPixelBuffer((uint64_t)v18, &v86);
  if (PixelBuffer)
  {
LABEL_116:
    uint64_t v37 = PixelBuffer;
    goto LABEL_108;
  }
  long long v20 = v86;
  if (!v86)
  {
LABEL_115:
    uint64_t PixelBuffer = FigSignalErrorAt();
    goto LABEL_116;
  }
  uint64_t v21 = CMBaseObjectGetDerivedStorage();
  size.unsigned int value = 0;
  *(void *)&size.CMTimeScale timescale = 0;
  uint64_t v92 = 0;
  uint64_t v93 = 0;
  CFTypeRef v90 = 0;
  CFTypeRef v91 = 0;
  CVPixelBufferRef pixelBufferOut = 0;
  MEMORY[0x19970E910](*(void *)(v21 + 16));
  if (!CGSizeMakeWithDictionaryRepresentation(*(CFDictionaryRef *)(v21 + 24), (CGSize *)&size))
  {
    uint64_t v22 = FigSignalErrorAt();
    goto LABEL_118;
  }
  uint64_t v22 = FigVideoCompositorUtilityCopyRenderPixelBufferDimensionsAndCleanAperture(0, *(void *)(v21 + 40), &v93, &v92, 0, &v91, *(double *)&size.value, *(double *)&size.timescale, *(float *)(v21 + 88));
  if (v22)
  {
LABEL_118:
    uint64_t v37 = v22;
    MEMORY[0x19970E930](*(void *)(v21 + 16));
    uint64_t v43 = 0;
    CGRect v52 = 0;
    CFDictionaryRef v40 = 0;
    goto LABEL_70;
  }
  int v23 = *(unsigned __int8 *)(v21 + 117);
  *(unsigned char *)(v21 + 117) = 0;
  long long v24 = *(const void **)(v21 + 32);
  if (v24) {
    CFTypeRef v77 = CFRetain(v24);
  }
  else {
    CFTypeRef v77 = 0;
  }
  MEMORY[0x19970E930](*(void *)(v21 + 16));
  int Width = CVPixelBufferGetWidth(v20);
  int Height = CVPixelBufferGetHeight(v20);
  CFDictionaryRef v40 = (const __CFDictionary *)CVBufferCopyAttachment(v20, (CFStringRef)*MEMORY[0x1E4F24A78], 0);
  CFTypeRef v79 = CVBufferCopyAttachment(v20, (CFStringRef)*MEMORY[0x1E4F24B98], 0);
  size_t v41 = CVPixelBufferGetWidth(v20);
  CFIndex v82 = a6;
  if (v41 == v93)
  {
    size_t v42 = CVPixelBufferGetHeight(v20);
    if (v42 == v92
      && FigVideoCompositorUtilityArePixelAspectRatiosEqual((CFTypeID)v79, (CFTypeID)v77)
      && FigVideoCompositorUtilityAreCleanAperturesEqual(v40, Width, Height, v91, v93, v92))
    {
      uint64_t v43 = CFRetain(v20);
      MutableCFDictionaryRef Copy = 0;
      goto LABEL_66;
    }
  }
  CFDictionaryRef cf = v40;
  if (!*(void *)v21)
  {
    CFAllocatorRef v46 = CFGetAllocator(a1);
    uint64_t v47 = VTPixelTransferSessionCreate(v46, (VTPixelTransferSessionRef *)v21);
    if (v47) {
      goto LABEL_113;
    }
    uint64_t v47 = VTPixelTransferSessionSetProperty();
    if (v47) {
      goto LABEL_113;
    }
    goto LABEL_42;
  }
  if (v23)
  {
LABEL_42:
    uint64_t v47 = VTPixelTransferSessionSetProperty();
    if (!v47)
    {
      uint64_t v47 = VTPixelTransferSessionSetProperty();
      if (!v47)
      {
        VTPixelTransferSessionSetProperty();
        VTPixelTransferSessionSetProperty();
        VTPixelTransferSessionSetProperty();
        CGRect v45 = (CVPixelBufferPoolRef *)(v21 + 8);
        CGRect v48 = *(const void **)(v21 + 8);
        if (v48)
        {
          CFRelease(v48);
          *CGRect v45 = 0;
        }
        goto LABEL_46;
      }
    }
LABEL_113:
    uint64_t v37 = v47;
    uint64_t v43 = 0;
    CGRect v51 = v77;
    CGRect v52 = v79;
    if (!v77) {
      goto LABEL_70;
    }
    goto LABEL_69;
  }
  CGRect v45 = (CVPixelBufferPoolRef *)(v21 + 8);
  if (*(void *)(v21 + 8))
  {
    MutableCFDictionaryRef Copy = 0;
LABEL_59:
    uint64_t v55 = FigGetUpTimeNanoseconds();
    CFAllocatorRef v56 = CFGetAllocator(a1);
    uint64_t v54 = CVPixelBufferPoolCreatePixelBuffer(v56, *v45, &pixelBufferOut);
    if (!v54)
    {
      uint64_t v57 = VTPixelTransferSessionTransferImage(*(VTPixelTransferSessionRef *)v21, v20, pixelBufferOut);
      CFDictionaryRef v40 = cf;
      if (!v57)
      {
        uint64_t v58 = FigGetUpTimeNanoseconds();
        uint64_t v59 = (v58 - v55) / 1000;
        ++*(_DWORD *)(v21 + 352);
        uint64_t v60 = *(void *)(v21 + 336);
        *(void *)(v21 + 344) += v59;
        uint64_t v61 = *(void *)(v21 + 328);
        if (v61 >= v59) {
          uint64_t v61 = (v58 - v55) / 1000;
        }
        if (v60 > v59) {
          uint64_t v59 = v60;
        }
        *(void *)(v21 + 328) = v61;
        *(void *)(v21 + 336) = v59;
        uint64_t v43 = pixelBufferOut;
LABEL_66:
        CGRect v51 = v77;
        CGRect v52 = v79;
        uint64_t v37 = 0;
        CVPixelBufferRef pixelBufferOut = 0;
        if (!MutableCopy) {
          goto LABEL_68;
        }
        goto LABEL_67;
      }
      uint64_t v37 = v57;
      uint64_t v43 = 0;
LABEL_57:
      CGRect v51 = v77;
      CGRect v52 = v79;
      if (!MutableCopy) {
        goto LABEL_68;
      }
LABEL_67:
      CFRelease(MutableCopy);
      goto LABEL_68;
    }
LABEL_56:
    uint64_t v37 = v54;
    uint64_t v43 = 0;
    CFDictionaryRef v40 = cf;
    goto LABEL_57;
  }
LABEL_46:
  char v88 = 0;
  CFDictionaryRef v49 = *(const __CFDictionary **)(v21 + 48);
  if (!v49)
  {
    MutableCFDictionaryRef Copy = 0;
    goto LABEL_54;
  }
  MutableCFDictionaryRef Copy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, v49);
  if (MutableCopy)
  {
    uint64_t v50 = FigCFDictionarySetInt32();
    if (v50
      || (uint64_t v50 = FigCFDictionarySetInt32(), v50)
      || !CFDictionaryGetValue(MutableCopy, (const void *)*MEMORY[0x1E4F24D70])
      && (uint64_t v50 = FigCFDictionarySetInt32(), v50))
    {
      uint64_t v37 = v50;
      CFDictionaryRef v40 = cf;
      CGRect v51 = v77;
      CGRect v52 = v79;
      CFRelease(MutableCopy);
      MutableCFDictionaryRef Copy = 0;
      goto LABEL_121;
    }
    goto LABEL_54;
  }
  uint64_t v53 = FigSignalErrorAt();
  if (!v53)
  {
LABEL_54:
    uint64_t v53 = VTCreatePixelBufferPoolAttributesWithName();
    if (!v53)
    {
      CFGetAllocator(a1);
      uint64_t v54 = VTBuildPixelBufferPools2();
      if (v54) {
        goto LABEL_56;
      }
      goto LABEL_59;
    }
  }
  uint64_t v37 = v53;
  CFDictionaryRef v40 = cf;
  CGRect v51 = v77;
  CGRect v52 = v79;
LABEL_121:
  uint64_t v43 = 0;
  if (MutableCopy) {
    goto LABEL_67;
  }
LABEL_68:
  a6 = v82;
  if (v51) {
LABEL_69:
  }
    CFRelease(v51);
LABEL_70:
  if (v91) {
    CFRelease(v91);
  }
  if (pixelBufferOut) {
    CFRelease(pixelBufferOut);
  }
  if (v90) {
    CFRelease(v90);
  }
  if (v40) {
    CFRelease(v40);
  }
  if (v52) {
    CFRelease(v52);
  }
  if (!v37)
  {
    ++*(_DWORD *)(DerivedStorage + 320);
    CFArrayRef v62 = *(NSObject **)(DerivedStorage + 168);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __customVideoCompositor_RenderFrameFromWindow_block_invoke;
    block[3] = &__block_descriptor_tmp_13_6;
    block[4] = DerivedStorage;
    void block[5] = a6;
    void block[6] = v43;
    dispatch_sync(v62, block);
  }
  CVPixelBufferPoolFlush(*(CVPixelBufferPoolRef *)(DerivedStorage + 8), 0);
  if (v43) {
    CFRelease(v43);
  }
  return v37;
}

void *__copy_assignment_8_8_t0w8_pa0_44030_8_pa0_33393_16_pa0_15098_24_pa0_21060_32_pa0_1898_40_pa0_17456_48_pa0_31433_56(void *result, void *a2)
{
  *uint64_t result = *a2;
  result[1] = a2[1];
  result[2] = a2[2];
  result[3] = a2[3];
  result[4] = a2[4];
  result[5] = a2[5];
  result[6] = a2[6];
  result[7] = a2[7];
  return result;
}

uint64_t FigPhotoJPEGCreateJPEGFromSbuf()
{
  return MEMORY[0x1F410DA68]();
}

uint64_t FigPhotoJPEGCreateJPEGFromCVPixelBuffer()
{
  return MEMORY[0x1F410DA58]();
}

uint64_t FigPhotoJPEGCreateJPEGFromIOSurface()
{
  return MEMORY[0x1F410DA60]();
}

uint64_t FigPhotoJPEGCreateJPEGSbufFromBuffer()
{
  return MEMORY[0x1F410DA88]();
}

uint64_t FigPhotoJPEGCreateJPEGNativePixelFormatArray()
{
  return MEMORY[0x1F410DA70]();
}

uint64_t FigPhotoJPEGCreateJPEGNativeSubsamplingArray()
{
  return MEMORY[0x1F410DA78]();
}

uint64_t FigPhotoJPEGGetEncodeTiming()
{
  return MEMORY[0x1F410DB10]();
}

uint64_t FigVideoCompositionRemoteCopyParametersFromRenderFrameFromWindowMessage(void *a1, __CFDictionary **a2, __CFDictionary **a3, CFDictionaryRef *a4, uint64_t a5, int64_t *a6)
{
  long long v75 = 0uLL;
  uint64_t v76 = 0;
  CFDictionaryRef v74 = 0;
  CVPixelBufferRef pixelBufferOut = 0;
  unsigned int value = 0;
  CFTypeRef cf = 0;
  FigXPCMessageGetCMTime();
  int64_t int64 = xpc_dictionary_get_int64(a1, "FrameID");
  int64_t valuePtr = xpc_dictionary_get_int64(a1, "CompositionInstructionID");
  int v9 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  if (valuePtr)
  {
    values[0] = 0;
    CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    values[0] = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt64Type, &valuePtr);
    CFDictionaryRef v74 = CFDictionaryCreate(v10, (const void **)kFigVideoCompositionInstruction_InstructionID, (const void **)values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (values[0]) {
      CFRelease(values[0]);
    }
  }
  else
  {
    uint64_t v11 = FigXPCMessageCopyCFDictionary();
    if (v11)
    {
      uint64_t v17 = v11;
      long long v16 = 0;
      CFArrayRef v18 = 0;
LABEL_84:
      uint64_t v19 = 0;
      CFMutableArrayRef v20 = 0;
      goto LABEL_85;
    }
  }
  int64_t v55 = int64;
  CFAllocatorRef v56 = a6;
  xpc_object_t v12 = xpc_dictionary_get_value(a1, "SourceTimedFramesForTracks");
  uint64_t v13 = MEMORY[0x1E4F145D8];
  if (v12)
  {
    xpc_object_t v14 = v12;
    size_t count = xpc_array_get_count(v12);
    long long v16 = 0;
    uint64_t v17 = 0;
    if ((count & 1) == 0)
    {
      xarraCGFloat y = v14;
      xpc_object_t xdict = a1;
      CFArrayRef v18 = 0;
      uint64_t v19 = 0;
      CFMutableArrayRef v20 = 0;
      if (count < 2) {
        goto LABEL_85;
      }
      unint64_t v21 = count >> 1;
      CFAllocatorRef v22 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], count >> 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      uint64_t v24 = 0;
      if (v21 <= 1) {
        uint64_t v25 = 1;
      }
      else {
        uint64_t v25 = v21;
      }
      uint64_t v61 = v25;
      CFDictionaryRef theDict = Mutable;
      while (1)
      {
        xpc_array_get_uint64(xarray, 2 * v24);
        arraCGFloat y = xpc_array_get_array(xarray, (2 * v24) | 1);
        size_t v27 = xpc_array_get_count(array);
        unint64_t v28 = v27;
        if (v27) {
          break;
        }
        unint64_t v29 = v27 >> 1;
        CFArrayRef v18 = CFArrayCreateMutable(v22, v27 >> 1, MEMORY[0x1E4F1D510]);
        if (v28 >= 2)
        {
          if (v29 <= 1) {
            uint64_t v30 = 1;
          }
          else {
            uint64_t v30 = v28 >> 1;
          }
          size_t v31 = 1;
          do
          {
            values[0] = 0;
            values[1] = 0;
            uint64_t v69 = 0;
            uint64_t CMTime = FigXPCArrayGetCMTime();
            if (CMTime)
            {
LABEL_79:
              uint64_t v17 = CMTime;
LABEL_82:
              long long v16 = theDict;
              goto LABEL_84;
            }
            xpc_object_t v33 = xpc_array_get_value(array, v31);
            if (MEMORY[0x199712630]() == v13)
            {
              long long v66 = *(_OWORD *)values;
              uint64_t v67 = v69;
              uint64_t CMTime = FigVCPTimedSampleCreateWithNULL((uint64_t)&v66, (uint64_t *)&value);
              if (CMTime) {
                goto LABEL_79;
              }
            }
            else
            {
              uint64_t v34 = IOSurfaceLookupFromXPCObject(v33);
              if (!v34) {
                goto LABEL_83;
              }
              long long v35 = v34;
              CVReturn v36 = CVPixelBufferCreateWithIOSurface(v22, v34, 0, &pixelBufferOut);
              CFRelease(v35);
              if (v36)
              {
                uint64_t v17 = 0;
                goto LABEL_82;
              }
              if (!pixelBufferOut)
              {
LABEL_83:
                long long v16 = theDict;
                uint64_t v17 = FigSignalErrorAt();
                goto LABEL_84;
              }
              long long v66 = *(_OWORD *)values;
              uint64_t v67 = v69;
              uint64_t CMTime = FigVCPTimedSampleCreateWithPixelBuffer((uint64_t)&v66, pixelBufferOut, (uint64_t *)&value);
              if (CMTime) {
                goto LABEL_79;
              }
              if (pixelBufferOut)
              {
                CFRelease(pixelBufferOut);
                CVPixelBufferRef pixelBufferOut = 0;
              }
            }
            CFArrayAppendValue(v18, value);
            if (value)
            {
              CFRelease(value);
              unsigned int value = 0;
            }
            v31 += 2;
            --v30;
          }
          while (v30);
        }
        uint64_t UInt64 = (const void *)FigCFNumberCreateUInt64();
        long long v16 = theDict;
        CFDictionarySetValue(theDict, UInt64, v18);
        if (UInt64) {
          CFRelease(UInt64);
        }
        if (v18) {
          CFRelease(v18);
        }
        if (++v24 == v61)
        {
          a1 = xdict;
          int v9 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
          goto LABEL_37;
        }
      }
      uint64_t v17 = 0;
      CFArrayRef v18 = 0;
      uint64_t v19 = 0;
LABEL_104:
      CFMutableArrayRef v20 = 0;
      goto LABEL_78;
    }
    CFArrayRef v18 = 0;
    uint64_t v19 = 0;
    CFMutableArrayRef v20 = 0;
  }
  else
  {
    long long v16 = 0;
LABEL_37:
    xpc_object_t v38 = xpc_dictionary_get_value(a1, "SourceTimedSampleBuffersForTracks");
    if (v38)
    {
      CMTime v39 = v38;
      size_t v40 = xpc_array_get_count(v38);
      CFArrayRef v18 = 0;
      uint64_t v17 = 0;
      if ((v40 & 1) == 0 && v40 >= 2)
      {
        CFDictionaryRef theDict = v16;
        unint64_t v41 = v40 >> 1;
        CFAllocatorRef xarraya = *v9;
        uint64_t v19 = CFDictionaryCreateMutable(*v9, v40 >> 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        uint64_t v42 = 0;
        if (v41 <= 1) {
          uint64_t v43 = 1;
        }
        else {
          uint64_t v43 = v41;
        }
        uint64_t v62 = v43;
        while (1)
        {
          xpc_array_get_uint64(v39, 2 * v42);
          xpc_object_t v44 = xpc_array_get_array(v39, (2 * v42) | 1);
          size_t v45 = xpc_array_get_count(v44);
          unint64_t v46 = v45;
          if (v45)
          {
            uint64_t v17 = FigSignalErrorAt();
            CFArrayRef v18 = 0;
            goto LABEL_104;
          }
          unint64_t v47 = v45 >> 1;
          CFMutableArrayRef v20 = CFArrayCreateMutable(xarraya, v45 >> 1, MEMORY[0x1E4F1D510]);
          if (v46 >= 2) {
            break;
          }
LABEL_60:
          CGRect v52 = (const void *)FigCFNumberCreateUInt64();
          CFDictionarySetValue(v19, v52, v20);
          if (v52) {
            CFRelease(v52);
          }
          if (v20) {
            CFRelease(v20);
          }
          if (++v42 == v62) {
            goto LABEL_67;
          }
        }
        if (v47 <= 1) {
          uint64_t v48 = 1;
        }
        else {
          uint64_t v48 = v46 >> 1;
        }
        size_t v49 = 1;
        while (1)
        {
          values[0] = 0;
          values[1] = 0;
          uint64_t v69 = 0;
          uint64_t v50 = FigXPCArrayGetCMTime();
          if (v50) {
            break;
          }
          xpc_object_t v51 = xpc_array_get_value(v44, v49);
          if (MEMORY[0x199712630]() == v13)
          {
            long long v66 = *(_OWORD *)values;
            uint64_t v67 = v69;
            uint64_t v50 = FigVCPTimedSampleCreateWithNULL((uint64_t)&v66, (uint64_t *)&value);
            if (v50) {
              break;
            }
          }
          else
          {
            uint64_t v50 = (uint64_t)remoteVideoCompositor_copySampleBufferFromXPCData(v51);
            if (v50) {
              break;
            }
            long long v66 = *(_OWORD *)values;
            uint64_t v67 = v69;
            uint64_t v50 = FigVCPTimedSampleCreateWithSampleBuffer((uint64_t)&v66, cf, (uint64_t *)&value);
            if (v50) {
              break;
            }
            if (cf)
            {
              CFRelease(cf);
              CFTypeRef cf = 0;
            }
          }
          CFArrayAppendValue(v20, value);
          if (value)
          {
            CFRelease(value);
            unsigned int value = 0;
          }
          v49 += 2;
          if (!--v48) {
            goto LABEL_60;
          }
        }
        uint64_t v17 = v50;
        CFArrayRef v18 = 0;
LABEL_78:
        long long v16 = theDict;
        goto LABEL_85;
      }
      uint64_t v19 = 0;
      CFMutableArrayRef v20 = 0;
    }
    else
    {
      uint64_t v19 = 0;
LABEL_67:
      if (a2)
      {
        *a2 = v16;
        long long v16 = 0;
      }
      if (a3)
      {
        *a3 = v19;
        uint64_t v19 = 0;
      }
      if (a4)
      {
        *a4 = v74;
        CFDictionaryRef v74 = 0;
      }
      if (a5)
      {
        *(_OWORD *)a5 = v75;
        *(void *)(a5 + 16) = v76;
      }
      uint64_t v17 = 0;
      CFArrayRef v18 = 0;
      CFMutableArrayRef v20 = 0;
      if (v56) {
        *CFAllocatorRef v56 = v55;
      }
    }
  }
LABEL_85:
  if (v74) {
    CFRelease(v74);
  }
  if (v16) {
    CFRelease(v16);
  }
  if (v18) {
    CFRelease(v18);
  }
  if (v19) {
    CFRelease(v19);
  }
  if (v20) {
    CFRelease(v20);
  }
  if (pixelBufferOut) {
    CFRelease(pixelBufferOut);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (value) {
    CFRelease(value);
  }
  return v17;
}

void *remoteVideoCompositor_copySampleBufferFromXPCData(void *a1)
{
  CMBlockBufferRef blockBufferOut = 0;
  HIDWORD(customBlockSource.AllocateBlock) = 0;
  *(void *)&customBlockSource.versioCFIndex n = 0;
  customBlockSource.FreeBlocuint64_t k = (void (__cdecl *)(void *, void *, size_t))remoteVideoCompositor_bbufUtilXPCObjectReleaser;
  customBlockSource.refCoCFIndex n = a1;
  bytes_ptr = (void *)xpc_data_get_bytes_ptr(a1);
  if (bytes_ptr)
  {
    size_t length = xpc_data_get_length(a1);
    uint64_t SampleBufferFromSerializedAtomDataBlockBuffer = CMBlockBufferCreateWithMemoryBlock((CFAllocatorRef)*MEMORY[0x1E4F1CF80], bytes_ptr, length, 0, &customBlockSource, 0, length, 0, &blockBufferOut);
    if (!SampleBufferFromSerializedAtomDataBlockBuffer)
    {
      FigXPCRetain();
      uint64_t SampleBufferFromSerializedAtomDataBlockBuffer = FigRemote_CreateSampleBufferFromSerializedAtomDataBlockBuffer();
    }
    bytes_ptr = (void *)SampleBufferFromSerializedAtomDataBlockBuffer;
  }
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  return bytes_ptr;
}

const void *FigVCPGetTimedSampleWithMatchingPTSFromAscendingPTSTimedSampleArray(const __CFArray *a1, uint64_t a2, CFIndex a3, CFIndex a4, CFIndex *a5)
{
  memset(&v14, 0, sizeof(v14));
  FigVCPTimedSampleGetPTS(a2, (uint64_t)&v14);
  if (a3 >= a4)
  {
LABEL_6:
    CFArrayRef ValueAtIndex = 0;
  }
  else
  {
    while (1)
    {
      CFArrayRef ValueAtIndex = CFArrayGetValueAtIndex(a1, a3);
      memset(&v13, 0, sizeof(v13));
      FigVCPTimedSampleGetPTS((uint64_t)ValueAtIndex, (uint64_t)&v13);
      CMTime time1 = v13;
      CMTime v11 = v14;
      if (!CMTimeCompare(&time1, &v11)) {
        break;
      }
      CMTime time1 = v13;
      CMTime v11 = v14;
      if (CMTimeCompare(&time1, &v11) >= 1) {
        goto LABEL_6;
      }
      if (a4 == ++a3)
      {
        CFArrayRef ValueAtIndex = 0;
        a3 = a4;
        break;
      }
    }
  }
  *a5 = a3;
  return ValueAtIndex;
}

uint64_t FigVideoCompositionRemoteUpdateParametersFromIncrementalRenderFrameFromWindowMessage(void *a1, const __CFDictionary *a2, const __CFDictionary *a3, CFTypeRef *a4, uint64_t a5, int64_t *a6)
{
  CFTypeRef v21 = 0;
  if ((FigXPCMessageGetInt32() & 2) != 0)
  {
    FigCFDictionaryRemoveAllValues();
    FigCFDictionaryRemoveAllValues();
  }
  long long v22 = 0uLL;
  uint64_t v23 = 0;
  FigXPCMessageGetCMTime();
  int64_t int64 = xpc_dictionary_get_int64(a1, "FrameID");
  int64_t valuePtr = xpc_dictionary_get_int64(a1, "CompositionInstructionID");
  if (valuePtr)
  {
    CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFTypeRef cf = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt64Type, &valuePtr);
    CFTypeRef v21 = CFDictionaryCreate(v13, (const void **)kFigVideoCompositionInstruction_InstructionID, &cf, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (cf) {
      CFRelease(cf);
    }
  }
  else
  {
    uint64_t updated = FigXPCMessageCopyCFDictionary();
    if (updated)
    {
LABEL_18:
      uint64_t v17 = updated;
      goto LABEL_15;
    }
  }
  xpc_object_t value = xpc_dictionary_get_value(a1, "SourceTimedFramesForTracks");
  uint64_t updated = updateTimedSamplesForTracksWithXPCReducedSamples(value, a2, 0);
  if (updated) {
    goto LABEL_18;
  }
  xpc_object_t v16 = xpc_dictionary_get_value(a1, "SourceTimedSampleBuffersForTracks");
  uint64_t updated = updateTimedSamplesForTracksWithXPCReducedSamples(v16, a3, 1);
  if (updated) {
    goto LABEL_18;
  }
  if (a4)
  {
    *a4 = v21;
    CFTypeRef v21 = 0;
  }
  if (a5)
  {
    *(_OWORD *)a5 = v22;
    *(void *)(a5 + 16) = v23;
  }
  uint64_t v17 = 0;
  if (a6) {
    *a6 = int64;
  }
LABEL_15:
  if (v21) {
    CFRelease(v21);
  }
  return v17;
}

uint64_t updateTimedSamplesForTracksWithXPCReducedSamples(void *a1, const __CFDictionary *a2, int a3)
{
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (Mutable)
  {
    CFArrayRef v8 = Mutable;
    CFMutableArrayRef v9 = CFArrayCreateMutable(v6, 0, MEMORY[0x1E4F1D510]);
    if (v9)
    {
      CFMutableArrayRef cf = v9;
      if (!a1) {
        goto LABEL_73;
      }
      size_t count = xpc_array_get_count(a1);
      CFIndex v11 = 0;
      if ((count & 1) == 0 && count >= 2)
      {
        uint64_t v12 = 0;
        uint64_t v13 = count >> 1;
        if (count >> 1 <= 1) {
          uint64_t v13 = 1;
        }
        uint64_t v39 = v13;
        size_t v40 = a1;
        CFDictionaryRef theDict = a2;
        CFArrayRef theArray = v8;
        CFAllocatorRef allocator = v6;
        while (1)
        {
          xpc_array_get_uint64(a1, 2 * v12);
          FigCFArrayAppendInt32();
          xpc_object_t value = xpc_array_get_value(a1, (2 * v12) | 1);
          if (!a2 || (v15 = value, (uint64_t UInt64 = (void *)FigCFNumberCreateUInt64()) == 0))
          {
            CFIndex v11 = FigSignalErrorAt();
            goto LABEL_62;
          }
          keCGFloat y = UInt64;
          CFArrayRef v17 = (const __CFArray *)CFDictionaryGetValue(a2, UInt64);
          CFArrayRef v18 = v17;
          if (v17) {
            CFIndex v11 = CFArrayGetCount(v17);
          }
          else {
            CFIndex v11 = 0;
          }
          CVPixelBufferRef pixelBufferOut = 0;
          v51[0] = 0;
          CFTypeRef v49 = 0;
          size_t v19 = xpc_array_get_count(v15);
          CFMutableArrayRef v20 = CFArrayCreateMutable(v6, v19 >> 1, MEMORY[0x1E4F1D510]);
          if (v19 < 2)
          {
            int v21 = 0;
            goto LABEL_38;
          }
          if (v19 >> 1 <= 1) {
            uint64_t v22 = 1;
          }
          else {
            uint64_t v22 = v19 >> 1;
          }
          size_t v23 = 1;
          while (1)
          {
            long long v47 = 0uLL;
            uint64_t v48 = 0;
            unsigned int CMTime = FigXPCArrayGetCMTime();
            if (CMTime) {
              break;
            }
            xpc_object_t v25 = xpc_array_get_value(v15, v23);
            if (MEMORY[0x199712630]() == MEMORY[0x1E4F145D8])
            {
              long long v45 = v47;
              uint64_t v46 = v48;
              int v21 = FigVCPTimedSampleCreateWithNULL((uint64_t)&v45, (uint64_t *)v51);
            }
            else if (a3)
            {
              unsigned int CMTime = remoteVideoCompositor_copySampleBufferFromXPCData(v25);
              if (CMTime) {
                break;
              }
              long long v45 = v47;
              uint64_t v46 = v48;
              unsigned int CMTime = FigVCPTimedSampleCreateWithSampleBuffer((uint64_t)&v45, v49, (uint64_t *)v51);
              if (CMTime) {
                break;
              }
              if (!v49) {
                goto LABEL_34;
              }
              CFRelease(v49);
              int v21 = 0;
              CFTypeRef v49 = 0;
            }
            else
            {
              long long v26 = IOSurfaceLookupFromXPCObject(v25);
              if (!v26) {
                goto LABEL_67;
              }
              size_t v27 = v26;
              CVReturn v28 = CVPixelBufferCreateWithIOSurface(allocator, v26, 0, &pixelBufferOut);
              CFRelease(v27);
              if (v28)
              {
                int v21 = 0;
                goto LABEL_69;
              }
              if (!pixelBufferOut)
              {
LABEL_67:
                unsigned int CMTime = FigSignalErrorAt();
                break;
              }
              long long v45 = v47;
              uint64_t v46 = v48;
              unsigned int CMTime = FigVCPTimedSampleCreateWithPixelBuffer((uint64_t)&v45, pixelBufferOut, (uint64_t *)v51);
              if (CMTime) {
                break;
              }
              if (!pixelBufferOut)
              {
LABEL_34:
                int v21 = 0;
                goto LABEL_35;
              }
              CFRelease(pixelBufferOut);
              int v21 = 0;
              CVPixelBufferRef pixelBufferOut = 0;
            }
LABEL_35:
            CFArrayAppendValue(v20, v51[0]);
            if (v51[0])
            {
              CFRelease(v51[0]);
              v51[0] = 0;
            }
            v23 += 2;
            if (!--v22) {
              goto LABEL_38;
            }
          }
          int v21 = CMTime;
LABEL_69:
          if (v51[0]) {
            CFRelease(v51[0]);
          }
LABEL_38:
          if (pixelBufferOut) {
            CFRelease(pixelBufferOut);
          }
          if (v49) {
            CFRelease(v49);
          }
          if (v21 && v20)
          {
            CFRelease(v20);
            CFMutableArrayRef v20 = 0;
            goto LABEL_48;
          }
          if (v20)
          {
            CFIndex v29 = CFArrayGetCount(v20);
            if (!v11) {
              goto LABEL_47;
            }
LABEL_49:
            CFMutableArrayRef v31 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
            if (v31)
            {
              uint64_t v30 = v31;
              if (v29 >= 1)
              {
                CFIndex v32 = 0;
                CFIndex v33 = 0;
                do
                {
                  CFArrayRef ValueAtIndex = CFArrayGetValueAtIndex(v20, v32);
                  if (FigVCPTimedSampleContainsNULL((BOOL)ValueAtIndex))
                  {
                    *(void *)&long long v47 = 0;
                    long long v35 = FigVCPGetTimedSampleWithMatchingPTSFromAscendingPTSTimedSampleArray(v18, (uint64_t)ValueAtIndex, v33, v11, (CFIndex *)&v47);
                    if (v35)
                    {
                      CFArrayAppendValue(v30, v35);
                      CFIndex v33 = v47 + 1;
                    }
                    else
                    {
                      CFArrayAppendValue(v30, ValueAtIndex);
                      CFIndex v33 = v47;
                    }
                  }
                  else
                  {
                    CFArrayAppendValue(v30, ValueAtIndex);
                  }
                  ++v32;
                }
                while (v29 != v32);
              }
              a2 = theDict;
              CFDictionarySetValue(theDict, key, v30);
              CFRelease(key);
              CFIndex v11 = 0;
            }
            else
            {
              CFIndex v11 = FigSignalErrorAt();
              uint64_t v30 = (__CFArray *)key;
              a2 = theDict;
            }
          }
          else
          {
LABEL_48:
            CFIndex v29 = 0;
            if (v11) {
              goto LABEL_49;
            }
LABEL_47:
            a2 = theDict;
            uint64_t v30 = (__CFArray *)key;
            CFDictionarySetValue(theDict, key, v20);
          }
          CFRelease(v30);
          CFArrayRef v8 = theArray;
          if (v20) {
            CFRelease(v20);
          }
          a1 = v40;
          CFAllocatorRef v6 = allocator;
LABEL_62:
          if (v11) {
            break;
          }
          if (++v12 == v39)
          {
            CFArrayGetCount(v8);
LABEL_73:
            FigCFDictionaryApplyBlock();
            FigCFArrayApplyBlock();
            CFIndex v11 = 0;
            break;
          }
        }
      }
      CFRelease(v8);
      CFRelease(cf);
      return v11;
    }
    else
    {
      uint64_t v37 = FigSignalErrorAt();
      CFRelease(v8);
      return v37;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigVideoCompositorRemoteGetObjectID(uint64_t a1, void *a2)
{
  if (a1 && a2) {
    return remoteVideoCompositor_GetObjectID(a1, a2);
  }
  else {
    return FigSignalErrorAt();
  }
}

uint64_t remoteVideoCompositor_GetObjectID(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 8) || *(unsigned char *)(DerivedStorage + 9))
  {
    return FigSignalErrorAt();
  }
  else
  {
    *a2 = *(void *)DerivedStorage;
    return 0;
  }
}

uint64_t FigVideoCompositorCreateRemote(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v16 = 0;
  CFArrayRef v17 = &v16;
  uint64_t v18 = 0x2000000000;
  int v19 = 0;
  valueCallBacks.versioCFIndex n = MEMORY[0x1E4F143A8];
  valueCallBacks.retaiCFIndex n = (CFDictionaryRetainCallBack)0x40000000;
  valueCallBacks.release = (CFDictionaryReleaseCallBack)__remoteVideoCompositor_EnsureClientEstablished_block_invoke;
  valueCallBacks.copyDescriptioCFIndex n = (CFDictionaryCopyDescriptionCallBack)&unk_1E57AADE8;
  valueCallBacks.equal = (CFDictionaryEqualCallBack)&v16;
  if (gVCRemoteClientSetupOnce != -1) {
    dispatch_once(&gVCRemoteClientSetupOnce, &valueCallBacks);
  }
  uint64_t v4 = *((unsigned int *)v17 + 6);
  _Block_object_dispose(&v16, 8);
  if (!v4)
  {
    uint64_t v5 = FigXPCCreateBasicMessage();
    if (v5 || (uint64_t v5 = FigXPCMessageSetCFDictionary(), v5))
    {
      uint64_t v4 = v5;
      goto LABEL_15;
    }
    uint64_t v4 = FigXPCRemoteClientSendSyncMessageCreatingReply();
    if (!v4)
    {
      uint64_t uint64 = xpc_dictionary_get_uint64(0, (const char *)*MEMORY[0x1E4F20280]);
      uint64_t v16 = 0;
      valueCallBacks.copyDescriptioCFIndex n = 0;
      valueCallBacks.equal = 0;
      CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      FigVideoCompositorGetClassID();
      uint64_t v8 = CMDerivedObjectCreate();
      if (!v8)
      {
        uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
        *uint64_t DerivedStorage = uint64;
        uint64_t v10 = FigSimpleMutexCreate();
        DerivedStorage[2] = v10;
        if (v10)
        {
          valueCallBacks.versioCFIndex n = 0;
          valueCallBacks.retaiCFIndex n = (CFDictionaryRetainCallBack)remoteVideoCompositor_clonePendingFrame;
          valueCallBacks.release = (CFDictionaryReleaseCallBack)remoteVideoCompositor_freePendingFrame;
          CFMutableDictionaryRef v11 = CFDictionaryCreateMutable(v7, 0, 0, &valueCallBacks);
          DerivedStorage[13] = v11;
          if (v11)
          {
            uint64_t v12 = FigSimpleMutexCreate();
            DerivedStorage[12] = v12;
            if (v12)
            {
              CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
              DerivedStorage[14] = Mutable;
              if (Mutable)
              {
                CFMutableDictionaryRef v14 = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                DerivedStorage[15] = v14;
                if (v14)
                {
                  FigXPCRemoteClientAssociateObject();
                  uint64_t v4 = 0;
LABEL_14:
                  *a3 = v16;
                  goto LABEL_15;
                }
              }
            }
          }
        }
        uint64_t v8 = FigSignalErrorAt();
      }
      uint64_t v4 = v8;
      goto LABEL_14;
    }
  }
LABEL_15:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v4;
}

void __updateTimedSamplesForTracksWithXPCReducedSamples_block_invoke(uint64_t a1, void *value)
{
  v6.size_t length = *(void *)(a1 + 40);
  v6.locatioCFIndex n = 0;
  if (!CFArrayContainsValue(*(CFArrayRef *)(a1 + 32), v6, value))
  {
    uint64_t v4 = *(__CFArray **)(a1 + 48);
    CFArrayAppendValue(v4, value);
  }
}

void __updateTimedSamplesForTracksWithXPCReducedSamples_block_invoke_2(uint64_t a1, const void *a2)
{
}

uint64_t remoteVideoCompositor_DeadConnectionCallback()
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  *(unsigned char *)(result + 9) = 1;
  return result;
}

uint64_t remoteVideoCompositor_HandleVideoCompositorClientMessage()
{
  uint64_t OpCode = FigXPCMessageGetOpCode();
  if (OpCode) {
    return OpCode;
  }
  else {
    return 4294966630;
  }
}

void __HandleRenderFrameMessage_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(unsigned int *)(a1 + 48);
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  CFAllocatorRef v7 = *(void (**)(uint64_t, uint64_t, uint64_t, void))(v6 + 40);
  if (v7) {
    v7(v2, v3, v4, 0);
  }
  uint64_t v8 = *(const void **)(a1 + 32);

  CFRelease(v8);
}

CFMutableDictionaryRef deepCopySourceTimedSamplesForTrackIDs(const void *a1)
{
  CFAllocatorRef v1 = CFGetAllocator(a1);
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable) {
    FigCFDictionaryApplyBlock();
  }
  else {
    FigSignalErrorAt();
  }
  return Mutable;
}

void __HandleRenderFrameFromWindowMessage_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(unsigned int *)(a1 + 48);
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  CFAllocatorRef v7 = *(void (**)(uint64_t, uint64_t, uint64_t, void))(v6 + 40);
  if (v7) {
    v7(v2, v3, v4, 0);
  }
  uint64_t v8 = *(const void **)(a1 + 32);

  CFRelease(v8);
}

void __deepCopySourceTimedSamplesForTrackIDs_block_invoke(uint64_t a1, const void *a2, CFArrayRef theArray)
{
  CFArrayRef Copy = CFArrayCreateCopy(*(CFAllocatorRef *)(a1 + 32), theArray);
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 40), a2, Copy);
  if (Copy)
  {
    CFRelease(Copy);
  }
}

void *remoteVideoCompositor_clonePendingFrame(const __CFAllocator *a1, void *a2)
{
  uint64_t result = CFAllocatorAllocate(a1, 8, 0);
  *uint64_t result = *a2;
  return result;
}

uint64_t remoteVideoCompositor_Finalize()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  uint64_t v1 = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)(v1 + 8))
  {
    uint64_t v2 = v1;
    *(unsigned char *)(v1 + 8) = 1;
    FigXPCRemoteClientDisassociateObject();
    if (!*(unsigned char *)(v2 + 9) && !FigXPCCreateBasicMessage()) {
      FigXPCRemoteClientSendSyncMessage();
    }
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  uint64_t v3 = (const void *)DerivedStorage[14];
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (const void *)DerivedStorage[15];
  if (v4) {
    CFRelease(v4);
  }
  FigSimpleMutexDestroy();
  DerivedStorage[2] = 0;
  uint64_t v5 = (const void *)DerivedStorage[13];
  if (v5)
  {
    CFRelease(v5);
    DerivedStorage[13] = 0;
  }
  uint64_t result = FigSimpleMutexDestroy();
  DerivedStorage[12] = 0;
  return result;
}

__CFString *remoteVideoCompositor_CopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = CFGetAllocator(a1);
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(v3, 0);
  CFIndex v5 = CFGetRetainCount(a1);
  if (*(unsigned char *)(DerivedStorage + 8)) {
    uint64_t v6 = " (invalidated)";
  }
  else {
    uint64_t v6 = "";
  }
  CFAllocatorRef v7 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, @"<FigVideoCompositorRemote %p retainCount: %ld%s allocator: %p, ObjectID: %016llx>", a1, v5, v6, v7, *(void *)DerivedStorage);
  return Mutable;
}

uint64_t remoteVideoCompositor_CopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8 = 0;
  uint64_t ObjectID = remoteVideoCompositor_GetObjectID(a1, &v8);
  if (!ObjectID) {
    uint64_t ObjectID = FigXPCSendStdCopyPropertyMessage();
  }
  uint64_t v6 = ObjectID;
  if (a4) {
    *a4 = 0;
  }
  FigXPCRemoteClientKillServerOnTimeout();
  return v6;
}

uint64_t remoteVideoCompositor_SetProperty(uint64_t a1)
{
  uint64_t v4 = 0;
  uint64_t ObjectID = remoteVideoCompositor_GetObjectID(a1, &v4);
  if (!ObjectID) {
    uint64_t ObjectID = FigXPCSendStdSetPropertyMessage();
  }
  uint64_t v2 = ObjectID;
  FigXPCRemoteClientKillServerOnTimeout();
  return v2;
}

uint64_t remoteVideoCompositor_OutputCustomFrame(uint64_t a1, const void *a2, int a3, __CVBuffer *a4)
{
  uint64_t v18 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t ObjectID = remoteVideoCompositor_GetObjectID(a1, &v18);
  if (ObjectID) {
    goto LABEL_13;
  }
  uint64_t ObjectID = FigXPCCreateBasicMessage();
  if (ObjectID) {
    goto LABEL_13;
  }
  xpc_dictionary_set_int64(0, "FrameID", (int64_t)a2);
  xpc_dictionary_set_int64(0, "CompositionStatus", a3);
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 96));
  CFNumberRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 104), a2);
  if (Value)
  {
    CFMutableDictionaryRef v11 = Value;
    uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
    xpc_dictionary_set_int64(0, "ProcessingTime", UpTimeNanoseconds - *v11);
  }
  CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(DerivedStorage + 104), a2);
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 96));
  if (!a4) {
    goto LABEL_9;
  }
  IOSurface = CVPixelBufferGetIOSurface(a4);
  if (!IOSurface)
  {
    uint64_t ObjectID = FigSignalErrorAt();
LABEL_13:
    uint64_t v16 = ObjectID;
    goto LABEL_11;
  }
  xpc_object_t XPCObject = IOSurfaceCreateXPCObject(IOSurface);
  if (!XPCObject)
  {
    uint64_t v15 = FigSignalErrorAt();
    goto LABEL_10;
  }
  xpc_dictionary_set_value(0, "ComposedBuffer", XPCObject);
LABEL_9:
  uint64_t v15 = FigXPCRemoteClientSendSyncMessage();
LABEL_10:
  uint64_t v16 = v15;
LABEL_11:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v16;
}

uint64_t remoteVideoCompositor_SetCustomCallbacks(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  v11[1] = 0;
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 16));
  CFAllocatorRef v7 = (void *)(DerivedStorage + 24);
  if (a2)
  {
    __copy_assignment_8_8_t0w8_pa0_44030_8_pa0_33393_16_pa0_15098_24_pa0_21060_32_pa0_1898_40_pa0_17456_48_pa0_31433_56(v7, a2);
    *(void *)(DerivedStorage + 88) = a3;
    MEMORY[0x19970E930](*(void *)(DerivedStorage + 16));
    uint64_t v8 = 0;
  }
  else
  {
    *(_OWORD *)(DerivedStorage + 56) = 0u;
    *(_OWORD *)(DerivedStorage + 72) = 0u;
    *(_OWORD *)CFAllocatorRef v7 = 0u;
    *(_OWORD *)(DerivedStorage + 40) = 0u;
    *(void *)(DerivedStorage + 88) = a3;
    MEMORY[0x19970E930](*(void *)(DerivedStorage + 16));
    v11[0] = 0;
    uint64_t ObjectID = remoteVideoCompositor_GetObjectID(a1, v11);
    if (ObjectID || (uint64_t ObjectID = FigXPCCreateBasicMessage(), ObjectID))
    {
      uint64_t v8 = ObjectID;
    }
    else
    {
      uint64_t v8 = FigXPCRemoteClientSendSyncMessage();
      if (!v8)
      {
        MEMORY[0x19970E910](*(void *)(DerivedStorage + 96));
        CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(DerivedStorage + 104));
        MEMORY[0x19970E930](*(void *)(DerivedStorage + 96));
      }
    }
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v8;
}

uint64_t remoteVideoCompositor_CompletePreroll(uint64_t a1, int a2, int a3)
{
  uint64_t v8 = 0;
  uint64_t ObjectID = remoteVideoCompositor_GetObjectID(a1, &v8);
  if (ObjectID)
  {
    uint64_t v6 = ObjectID;
  }
  else
  {
    uint64_t v6 = FigXPCCreateBasicMessage();
    if (!v6)
    {
      xpc_dictionary_set_int64(0, "RequestID", a2);
      xpc_dictionary_set_int64(0, "PrerollStatus", a3);
      uint64_t v6 = FigXPCRemoteClientSendSyncMessage();
    }
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v6;
}

double CDSGetOverscanSafeRect(double a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  BOOL v7 = a1 < 1.0 && a1 != 0.0 || a1 == -1.0;
  double v8 = 1.0 - fabs(a1);
  if (!v7) {
    double v8 = 0.1;
  }
  CGFloat v9 = a4 * v8 * 0.5;
  CGFloat v10 = a5 * v8 * 0.5;
  v12.origin.double x = a2;
  v12.origin.CGFloat y = a3;
  v12.size.CGFloat width = a4;
  v12.size.CGFloat height = a5;
  *(void *)&double result = (unint64_t)CGRectInset(v12, v9, v10);
  return result;
}

uint64_t FigVirtualDisplaySourceNullCreate(uint64_t a1, void *a2)
{
  FigVirtualDisplaySourceGetClassID();
  uint64_t v3 = CMDerivedObjectCreate();
  if (v3)
  {
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  else
  {
    *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 8) = 0;
    *a2 = 0;
  }
  return v3;
}

uint64_t srcnull_finalize()
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(result + 8))
  {
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return result;
}

uint64_t srcnull_copyProperty(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  if (!CFEqual(@"sourceType", a2)) {
    return 4294954512;
  }
  CFTypeRef v5 = CFRetain(@"NullSource");
  uint64_t result = 0;
  *a4 = v5;
  return result;
}

uint64_t srcnull_setProperty()
{
  return 4294954512;
}

uint64_t srcnull_plugProcessor()
{
  return 0;
}

uint64_t srcnull_unplugProcessor()
{
  return 0;
}

uint64_t srcnull_start()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigCFDictionaryGetBooleanIfPresent();
  *(_DWORD *)(DerivedStorage + 8) = 2;
  return 0;
}

uint64_t srcnull_stop()
{
  *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 8) = 0;
  return 0;
}

uint64_t srcnull_suspend()
{
  *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 8) = 1;
  return 0;
}

uint64_t srcnull_resume()
{
  *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 8) = 2;
  return 0;
}

uint64_t FigVideoCompositionServerCreateRenderFrameFromWindowMessage(uint64_t a1, const __CFDictionary *a2, const __CFDictionary *a3, uint64_t a4, uint64_t a5, int64_t a6)
{
  if (!FigXPCCreateBasicMessage())
  {
    FigXPCMessageSetCMTime();
    xpc_dictionary_set_int64(0, "FrameID", a6);
    if (a4)
    {
      if (FigCFDictionaryGetInt64IfPresent())
      {
        xpc_dictionary_set_int64(0, "CompositionInstructionID", 0);
      }
      else if (FigXPCMessageSetCFDictionary())
      {
        goto LABEL_10;
      }
    }
    if (FigCFDictionaryGetCount())
    {
      emptCGFloat y = xpc_array_create_empty();
      CFDictionaryApplyFunction(a2, (CFDictionaryApplierFunction)AddTrackTimedFramesToXPCArray, empty);
      xpc_dictionary_set_value(0, "SourceTimedFramesForTracks", empty);
    }
    if (FigCFDictionaryGetCount())
    {
      xpc_object_t v11 = xpc_array_create_empty();
      CFDictionaryApplyFunction(a3, (CFDictionaryApplierFunction)AddTrackTimedSampleBuffersToXPCArray, v11);
      xpc_dictionary_set_value(0, "SourceTimedSampleBuffersForTracks", v11);
    }
  }
LABEL_10:
  FigXPCRelease();
  FigXPCRelease();
  return 0;
}

uint64_t AddTrackTimedFramesToXPCArray(int a1, CFArrayRef theArray, void *a3)
{
  if (!theArray || !CFArrayGetCount(theArray)) {
    goto LABEL_14;
  }
  uint64_t UInt64 = FigCFNumberGetUInt64();
  xpc_array_set_uint64(a3, 0xFFFFFFFFFFFFFFFFLL, UInt64);
  xpc_object_t v6 = xpc_array_create(0, 0);
  CFIndex Count = CFArrayGetCount(theArray);
  if (Count < 1)
  {
LABEL_12:
    FigXPCRelease();
    goto LABEL_13;
  }
  CFIndex v8 = Count;
  uint64_t v9 = 0;
  while (1)
  {
    uint64_t ValueAtIndex = FigCFArrayGetValueAtIndex();
    long long v17 = 0uLL;
    uint64_t v18 = 0;
    FigVCPTimedSampleGetPTS(ValueAtIndex, (uint64_t)&v17);
    *(_OWORD *)pixelBuffer = v17;
    uint64_t v16 = v18;
    FigXPCArrayAppendCMTime();
    pixelBuffer[0] = 0;
    if (FigVCPTimedSampleGetPixelBuffer(ValueAtIndex, pixelBuffer))
    {
      FigXPCRelease();
      goto LABEL_14;
    }
    if (pixelBuffer[0]) {
      break;
    }
    xpc_object_t XPCObject = xpc_null_create();
LABEL_11:
    xpc_array_append_value(v6, XPCObject);
    FigXPCRelease();
    if (v8 == ++v9) {
      goto LABEL_12;
    }
  }
  IOSurface = CVPixelBufferGetIOSurface(pixelBuffer[0]);
  if (IOSurface)
  {
    xpc_object_t XPCObject = IOSurfaceCreateXPCObject(IOSurface);
    if (XPCObject) {
      goto LABEL_11;
    }
  }
  int v14 = FigSignalErrorAt();
  FigXPCRelease();
  if (v14) {
    goto LABEL_14;
  }
LABEL_13:
  xpc_array_set_value(a3, 0xFFFFFFFFFFFFFFFFLL, v6);
LABEL_14:
  FigXPCRelease();
  return FigXPCRelease();
}

uint64_t AddTrackTimedSampleBuffersToXPCArray(int a1, CFArrayRef theArray, void *a3)
{
  if (theArray && CFArrayGetCount(theArray))
  {
    uint64_t UInt64 = FigCFNumberGetUInt64();
    xpc_array_set_uint64(a3, 0xFFFFFFFFFFFFFFFFLL, UInt64);
    xpc_object_t v6 = xpc_array_create(0, 0);
    CFIndex Count = CFArrayGetCount(theArray);
    if (Count < 1)
    {
LABEL_11:
      xpc_array_set_value(a3, 0xFFFFFFFFFFFFFFFFLL, v6);
    }
    else
    {
      CFIndex v8 = Count;
      uint64_t v9 = 0;
      while (1)
      {
        uint64_t ValueAtIndex = FigCFArrayGetValueAtIndex();
        long long v15 = 0uLL;
        uint64_t v16 = 0;
        FigVCPTimedSampleGetPTS(ValueAtIndex, (uint64_t)&v15);
        long long v13 = v15;
        uint64_t v14 = v16;
        FigXPCArrayAppendCMTime();
        *(void *)&long long v13 = 0;
        if (FigVCPTimedSampleGetSampleBuffer(ValueAtIndex, &v13)) {
          break;
        }
        if ((void)v13)
        {
          if (serverVideoCompositor_addSampleBufferToXPCArray(v13, v6)) {
            return FigXPCRelease();
          }
        }
        else
        {
          xpc_object_t v11 = xpc_null_create();
          xpc_array_append_value(v6, v11);
        }
        if (v8 == ++v9) {
          goto LABEL_11;
        }
      }
    }
  }
  return FigXPCRelease();
}

xpc_object_t FigVideoCompositionServerCreateIncrementalRenderFrameFromWindowMessage(uint64_t a1, const void *a2, const void **a3, const void *a4, const void **a5, uint64_t a6, uint64_t a7, int64_t a8, int a9, _DWORD *a10)
{
  uint64_t v24 = 0;
  xpc_object_t xdict = 0;
  if (!a3 || !a5)
  {
    FigSignalErrorAt();
    goto LABEL_27;
  }
  if (*a10 == a9) {
    uint64_t v16 = *a3;
  }
  else {
    uint64_t v16 = 0;
  }
  if (*a10 == a9) {
    long long v17 = *a5;
  }
  else {
    long long v17 = 0;
  }
  if (!FigCFDictionaryGetCount()) {
    FigCFDictionaryGetCount();
  }
  if (FigXPCCreateBasicMessage()) {
    goto LABEL_27;
  }
  FigXPCMessageSetCMTime();
  xpc_dictionary_set_int64(xdict, "FrameID", a8);
  uint64_t v18 = a4;
  if (a6)
  {
    if (FigCFDictionaryGetInt64IfPresent())
    {
      xpc_dictionary_set_int64(xdict, "CompositionInstructionID", 0);
      goto LABEL_16;
    }
    if (!FigXPCMessageSetCFDictionary()) {
      goto LABEL_16;
    }
LABEL_27:
    CFDictionaryRef ReducedTimedSamplesForTracks = 0;
    CFDictionaryRef v21 = 0;
    goto LABEL_21;
  }
LABEL_16:
  FigXPCMessageSetInt32();
  CFDictionaryRef ReducedTimedSamplesForTracks = createReducedTimedSamplesForTracks(a2, (uint64_t)v16, (_DWORD *)&v24 + 1);
  emptCGFloat y = xpc_array_create_empty();
  if (ReducedTimedSamplesForTracks) {
    CFDictionaryApplyFunction(ReducedTimedSamplesForTracks, (CFDictionaryApplierFunction)AddTrackTimedFramesToXPCArray, empty);
  }
  xpc_dictionary_set_value(xdict, "SourceTimedFramesForTracks", empty);
  CFDictionaryRef v21 = createReducedTimedSamplesForTracks(a4, (uint64_t)v17, &v24);
  xpc_object_t v22 = xpc_array_create_empty();
  if (v21) {
    CFDictionaryApplyFunction(v21, (CFDictionaryApplierFunction)AddTrackTimedSampleBuffersToXPCArray, v22);
  }
  xpc_dictionary_set_value(xdict, "SourceTimedSampleBuffersForTracks", v22);
  releaseAssignAndDeepCopySourceTimedSamplesForTrackIDs(a3, a2);
  releaseAssignAndDeepCopySourceTimedSamplesForTrackIDs(a5, v18);
  *a10 = a9;
LABEL_21:
  FigXPCRelease();
  FigXPCRelease();
  if (ReducedTimedSamplesForTracks) {
    CFRelease(ReducedTimedSamplesForTracks);
  }
  if (v21) {
    CFRelease(v21);
  }
  return xdict;
}

CFMutableDictionaryRef createReducedTimedSamplesForTracks(const void *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v8 = 0;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x2000000000;
  int v11 = 0;
  if (FigCFDictionaryGetCount() < 1)
  {
    CFMutableDictionaryRef Mutable = 0;
  }
  else
  {
    CFAllocatorRef v5 = CFGetAllocator(a1);
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v5, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      FigCFDictionaryApplyBlock();
      if (a3) {
        *a3 = *((_DWORD *)v9 + 6);
      }
    }
    else
    {
      FigSignalErrorAt();
    }
  }
  _Block_object_dispose(&v8, 8);
  return Mutable;
}

void releaseAssignAndDeepCopySourceTimedSamplesForTrackIDs(const void **a1, CFTypeRef cf)
{
  CFAllocatorRef v3 = CFGetAllocator(cf);
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    CFMutableDictionaryRef v5 = Mutable;
    FigCFDictionaryApplyBlock();
    if (a1)
    {
      xpc_object_t v6 = *a1;
      *a1 = v5;
      CFRetain(v5);
      if (v6) {
        CFRelease(v6);
      }
    }
    CFRelease(v5);
  }
  else
  {
    FigSignalErrorAt();
  }
}

uint64_t FigVideoCompositorServerRetainVideoCompositorForID()
{
  return FigXPCServerRetainNeighborObjectFromID();
}

uint64_t FigVideoCompositorServerStart()
{
  if (FigServer_IsMediaparserd()) {
    return FigSignalErrorAt();
  }
  FigServer_IsMediaplaybackd();
  return FigXPCServerStart();
}

uint64_t HandleVideoCompositorMessage()
{
  uint64_t OpCode = FigXPCMessageGetOpCode();
  if (OpCode) {
    return OpCode;
  }
  else {
    return 4294966630;
  }
}

uint64_t serverVideoCompositor_addSampleBufferToXPCArray(uint64_t a1, void *a2)
{
  uint64_t SerializedAtomDataForSampleBuffer = FigRemote_CreateSerializedAtomDataForSampleBuffer();
  if (SerializedAtomDataForSampleBuffer) {
    return SerializedAtomDataForSampleBuffer;
  }
  uint64_t v4 = dispatch_data_create(0, 0, 0, (dispatch_block_t)*MEMORY[0x1E4F14408]);
  if (!v4) {
    return FigSignalErrorAt();
  }
  CFMutableDictionaryRef v5 = v4;
  xpc_object_t v6 = xpc_data_create_with_dispatch_data(v4);
  dispatch_release(v5);
  if (!v6) {
    return FigSignalErrorAt();
  }
  xpc_array_append_value(a2, v6);
  xpc_release(v6);
  return 0;
}

void __createReducedTimedSamplesForTracks_block_invoke(uint64_t a1, const void *a2, const __CFArray *a3)
{
  xpc_object_t value = 0;
  CFArrayRef v6 = (const __CFArray *)FigCFDictionaryGetValue();
  CFArrayRef v7 = v6;
  if (v6)
  {
    CFIndex Count = CFArrayGetCount(v6);
    if (a3) {
      goto LABEL_3;
    }
  }
  else
  {
    CFIndex Count = 0;
    if (a3)
    {
LABEL_3:
      uint64_t v9 = CFArrayGetCount(a3);
      if (Count) {
        goto LABEL_4;
      }
LABEL_17:
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 48), a2, a3);
      *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += v9;
      goto LABEL_18;
    }
  }
  uint64_t v9 = 0;
  if (!Count) {
    goto LABEL_17;
  }
LABEL_4:
  CFMutableArrayRef Mutable = CFArrayCreateMutable(*(CFAllocatorRef *)(a1 + 56), v9, MEMORY[0x1E4F1D510]);
  CFIndex v16 = 0;
  if (v9 < 1)
  {
LABEL_13:
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 48), a2, Mutable);
    if (!Mutable) {
      goto LABEL_18;
    }
    goto LABEL_14;
  }
  uint64_t v11 = 0;
  CFIndex v12 = 0;
  while (1)
  {
    uint64_t ValueAtIndex = (const void *)FigCFArrayGetValueAtIndex();
    if (FigVCPGetTimedSampleWithMatchingPTSFromAscendingPTSTimedSampleArray(v7, (uint64_t)ValueAtIndex, v12, Count, &v16))
    {
      if (FigCFEqual()) {
        break;
      }
    }
    CFIndex v12 = v16;
    CFArrayAppendValue(Mutable, ValueAtIndex);
    ++*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
LABEL_12:
    if (v9 == ++v11) {
      goto LABEL_13;
    }
  }
  CFIndex v14 = v16;
  FigVCPTimedSampleGetPTS((uint64_t)ValueAtIndex, (uint64_t)v15);
  if (!FigVCPTimedSampleCreateWithNULL((uint64_t)v15, (uint64_t *)&value))
  {
    CFIndex v12 = v14 + 1;
    CFArrayAppendValue(Mutable, value);
    if (value)
    {
      CFRelease(value);
      xpc_object_t value = 0;
    }
    goto LABEL_12;
  }
  FigSignalErrorAt();
  if (Mutable) {
LABEL_14:
  }
    CFRelease(Mutable);
LABEL_18:
  if (value) {
    CFRelease(value);
  }
}

void __releaseAssignAndDeepCopySourceTimedSamplesForTrackIDs_block_invoke(uint64_t a1, const void *a2, CFArrayRef theArray)
{
  CFArrayRef Copy = CFArrayCreateCopy(*(CFAllocatorRef *)(a1 + 32), theArray);
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 40), a2, Copy);
  if (Copy)
  {
    CFRelease(Copy);
  }
}

void DisposeServedVCState(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = *(void *)(a1 + 16);
    if (v2)
    {
      uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v3) {
        uint64_t v4 = v3;
      }
      else {
        uint64_t v4 = 0;
      }
      CFMutableDictionaryRef v5 = *(void (**)(uint64_t, void, void))(v4 + 48);
      if (v5) {
        v5(v2, 0, 0);
      }
      ReportErrorAndForgetPendingFrames(a1, 0xFFFFCF23);
    }
    CFArrayRef v6 = *(const void **)(a1 + 80);
    if (v6) {
      CFRelease(v6);
    }
    CFArrayRef v7 = *(const void **)(a1 + 88);
    if (v7) {
      CFRelease(v7);
    }
    FigSimpleMutexDestroy();
    if (*(void *)a1)
    {
      CFRelease(*(CFTypeRef *)a1);
      *(void *)a1 = 0;
    }
    uint64_t v8 = *(const void **)(a1 + 16);
    if (v8)
    {
      CFRelease(v8);
      *(void *)(a1 + 16) = 0;
    }
    uint64_t v9 = *(void **)(a1 + 72);
    if (v9) {
      os_release(v9);
    }
    free((void *)a1);
  }
}

uint64_t VCServerRenderFrame(uint64_t a1, int a2, const void *a3, CVPixelBufferRef *a4, int a5, const void *a6, uint64_t *a7, const __CFDictionary *a8, uint64_t a9, const void *a10)
{
  LODWORD(v13) = a5;
  xpc_object_t xdict = 0;
  uint64_t v18 = FigXPCCreateBasicMessage();
  if (v18) {
    goto LABEL_35;
  }
  *(_OWORD *)xpc_object_t value = *(_OWORD *)a9;
  uint64_t v30 = *(void *)(a9 + 16);
  FigXPCMessageSetCMTime();
  xpc_dictionary_set_int64(xdict, "FrameID", (int64_t)a10);
  if (a8)
  {
    value[0] = 0;
    if (CFDictionaryGetValueIfPresent(a8, @"InstructionID", (const void **)value))
    {
      int64_t valuePtr = 0;
      CFNumberGetValue((CFNumberRef)value[0], kCFNumberSInt64Type, &valuePtr);
      if (!valuePtr)
      {
LABEL_34:
        uint64_t v18 = FigSignalErrorAt();
        goto LABEL_35;
      }
      xpc_dictionary_set_int64(xdict, "CompositionInstructionID", valuePtr);
    }
    else
    {
      uint64_t v18 = FigXPCMessageSetCFDictionary();
      if (v18)
      {
LABEL_35:
        uint64_t v26 = v18;
        goto LABEL_28;
      }
    }
  }
  if (a2)
  {
    if (!a3) {
      goto LABEL_29;
    }
    if (a4)
    {
      xpc_dictionary_set_data(xdict, "SourceTrackIDArray", a3, 4 * a2);
      xpc_object_t v19 = xpc_array_create(0, 0);
      if (v19)
      {
        if (a2 >= 1)
        {
          uint64_t v20 = a2;
          while (!*a4)
          {
            xpc_object_t v23 = xpc_null_create();
            xpc_array_append_value(v19, v23);
            if (v23) {
              goto LABEL_18;
            }
LABEL_19:
            ++a4;
            if (!--v20) {
              goto LABEL_20;
            }
          }
          IOSurface = CVPixelBufferGetIOSurface(*a4);
          if (!IOSurface) {
            goto LABEL_29;
          }
          xpc_object_t XPCObject = IOSurfaceCreateXPCObject(IOSurface);
          if (!XPCObject) {
            goto LABEL_29;
          }
          xpc_object_t v23 = XPCObject;
          xpc_array_append_value(v19, XPCObject);
LABEL_18:
          xpc_release(v23);
          goto LABEL_19;
        }
LABEL_20:
        xpc_dictionary_set_value(xdict, "SourceFrameArray", v19);
        xpc_dictionary_set_data(xdict, "SourceSampleBufferTrackIDArray", a6, 4 * (int)v13);
        xpc_object_t v24 = xpc_array_create(0, 0);
        if (!v24)
        {
          uint64_t v25 = FigSignalErrorAt();
LABEL_33:
          uint64_t v26 = v25;
          goto LABEL_28;
        }
        if ((int)v13 >= 1)
        {
          uint64_t v13 = v13;
          do
          {
            if (*a7)
            {
              uint64_t v25 = serverVideoCompositor_addSampleBufferToXPCArray(*a7, v24);
              if (v25) {
                goto LABEL_33;
              }
            }
            ++a7;
          }
          while (--v13);
        }
        xpc_dictionary_set_value(xdict, "SourceSampleBufferArray", v24);
        goto LABEL_27;
      }
LABEL_29:
      uint64_t v26 = FigSignalErrorAt();
      goto LABEL_28;
    }
    goto LABEL_34;
  }
LABEL_27:
  AddNewPendingFrame(a1, a10);
  xpc_connection_send_message(*(xpc_connection_t *)(a1 + 32), xdict);
  uint64_t v26 = 0;
LABEL_28:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRelease();
  return v26;
}

uint64_t VCServerCancelPendingFrames(uint64_t a1)
{
  uint64_t v2 = FigXPCCreateBasicMessage();
  if (!v2) {
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 32), 0);
  }
  FigXPCRelease();
  return v2;
}

uint64_t VCServerCopyPerformanceDictionary(uint64_t a1, CFDictionaryRef *a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    long long keys = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    *(_OWORD *)CFRange values = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    if (*(int *)(a1 + 64) <= 0)
    {
      *a2 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)&keys, (const void **)values, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    }
    else
    {
      double valuePtr = (float)((float)*(uint64_t *)(a1 + 40) / 1000000.0);
      *(void *)&long long keys = @"MinProcessingTime";
      values[0] = CFNumberCreate(v4, kCFNumberDoubleType, &valuePtr);
      double valuePtr = (float)((float)*(uint64_t *)(a1 + 48) / 1000000.0);
      *((void *)&keys + 1) = @"MaxProcessingTime";
      values[1] = CFNumberCreate(v4, kCFNumberDoubleType, &valuePtr);
      double valuePtr = (float)((float)*(uint64_t *)(a1 + 56) / (float)((float)*(int *)(a1 + 64) * 1000000.0));
      *(void *)&long long v21 = @"AverageProcessingTime";
      *(void *)&long long v11 = CFNumberCreate(v4, kCFNumberDoubleType, &valuePtr);
      CFDictionaryRef v5 = CFDictionaryCreate(v4, (const void **)&keys, (const void **)values, 3, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      uint64_t v6 = 0;
      *a2 = v5;
      do
      {
        CFArrayRef v7 = values[v6];
        if (v7) {
          CFRelease(v7);
        }
        ++v6;
      }
      while (v6 != 3);
    }
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t VCServerAnticipateRendering(uint64_t a1)
{
  uint64_t v2 = FigXPCCreateBasicMessage();
  if (!v2)
  {
    FigXPCMessageSetCMTime();
    FigXPCMessageSetCMTime();
    FigXPCMessageSetCMTime();
    FigXPCMessageSetCMTime();
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 32), 0);
  }
  FigXPCRelease();
  return v2;
}

uint64_t VCServerPrerollForRendering(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v8 = FigXPCCreateBasicMessage();
  if (!v8)
  {
    FigXPCMessageSetCMTime();
    FigXPCMessageSetCMTime();
    FigXPCMessageSetCMTime();
    FigXPCMessageSetCMTime();
    xpc_dictionary_set_int64(0, "RequestID", a6);
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 32), 0);
  }
  FigXPCRelease();
  return v8;
}

uint64_t VCServerRenderFrameFromWindowWithSourceSampleSeed(uint64_t a1, const __CFDictionary *a2, const __CFDictionary *a3, uint64_t a4, long long *a5, const void *a6, int a7)
{
  if (shouldUseIncrementalUpdateForRenderFrameForWindow_once != -1) {
    dispatch_once(&shouldUseIncrementalUpdateForRenderFrameForWindow_once, &__block_literal_global_131);
  }
  uint64_t v14 = *(void *)(a1 + 24);
  long long v18 = *a5;
  uint64_t v19 = *((void *)a5 + 2);
  if (shouldUseIncrementalUpdateForRenderFrameForWindow_useIncrementalUpdate) {
    uint64_t RenderFrameFromWindowMessage = FigVideoCompositionServerCreateRenderFrameFromWindowMessage(v14, a2, a3, a4, (uint64_t)&v18, (int64_t)a6);
  }
  else {
    uint64_t RenderFrameFromWindowMessage = (uint64_t)FigVideoCompositionServerCreateIncrementalRenderFrameFromWindowMessage(v14, a2, (const void **)(a1 + 80), a3, (const void **)(a1 + 88), a4, (uint64_t)&v18, (int64_t)a6, a7, (_DWORD *)(a1 + 96));
  }
  long long v16 = (void *)RenderFrameFromWindowMessage;
  AddNewPendingFrame(a1, a6);
  xpc_connection_send_message(*(xpc_connection_t *)(a1 + 32), v16);
  FigXPCRelease();
  return 0;
}

void AddNewPendingFrame(uint64_t a1, const void *a2)
{
  MEMORY[0x19970E910](*(void *)(a1 + 8));
  CFSetAddValue(*(CFMutableSetRef *)a1, a2);

  JUMPOUT(0x19970E930);
}

uint64_t __shouldUseIncrementalUpdateForRenderFrameForWindow_block_invoke()
{
  uint64_t result = (uint64_t)CFPreferencesCopyAppValue(@"RenderFrameForWindow_incremental_sample_update", @"com.apple.coremedia");
  if (result)
  {
    uint64_t result = FigCFEqual();
    if (!result) {
      shouldUseIncrementalUpdateForRenderFrameForWindow_useIncrementalUpdate = 1;
    }
  }
  return result;
}

void ReportErrorAndForgetPendingFrames(uint64_t a1, unsigned int a2)
{
  v6[0] = a1;
  v6[1] = a2;
  CFMutableSetRef Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0);
  MEMORY[0x19970E910](*(void *)(a1 + 8));
  CFSetRef v5 = *(const __CFSet **)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)a1 = Mutable;
  MEMORY[0x19970E930](v4);
  CFSetApplyFunction(v5, (CFSetApplierFunction)PendingFrameApplierFunction, v6);
  CFRelease(v5);
}

uint64_t PendingFrameApplierFunction(uint64_t a1, unsigned int *a2)
{
  uint64_t v3 = *(void *)(*(void *)a2 + 16);
  uint64_t v4 = a2[2];
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v8 = *(void *)(VTable + 16);
  uint64_t result = VTable + 16;
  uint64_t v7 = v8;
  if (v8) {
    uint64_t v9 = v7;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(v9 + 40);
  if (v10)
  {
    return v10(v3, a1, v4, 0);
  }
  return result;
}

uint64_t LookupAndRetainVCByObjectIDForConnection()
{
  uint64_t result = FigXPCServerLookupAndRetainAssociatedObject();
  if (!result) {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t FigUpstreamMonitor_CreateOrRetainSharedMonitor(char a1)
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2000000000;
  uint64_t v9 = 0;
  if (GetUpstreamMonitorQueue_once != -1) {
    dispatch_once(&GetUpstreamMonitorQueue_once, &__block_literal_global_132);
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __FigUpstreamMonitor_CreateOrRetainSharedMonitor_block_invoke;
  block[3] = &unk_1E57AAF80;
  block[4] = &v6;
  void block[5] = GetUpstreamMonitorQueue_queue;
  char v5 = a1;
  dispatch_sync((dispatch_queue_t)GetUpstreamMonitorQueue_queue, block);
  uint64_t v2 = v7[3];
  _Block_object_dispose(&v6, 8);
  return v2;
}

void FigUpstreamMonitor_ReleaseSharedMonitor(uint64_t a1)
{
  if (a1)
  {
    if (GetUpstreamMonitorQueue_once != -1) {
      dispatch_once(&GetUpstreamMonitorQueue_once, &__block_literal_global_132);
    }
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 0x40000000;
    v2[2] = __FigUpstreamMonitor_ReleaseSharedMonitor_block_invoke;
    v2[3] = &__block_descriptor_tmp_2_7;
    v2[4] = GetUpstreamMonitorQueue_queue;
    v2[5] = a1;
    dispatch_sync((dispatch_queue_t)GetUpstreamMonitorQueue_queue, v2);
  }
}

void FigUpstreamMonitor_DisposeGuts(CFTypeRef *a1)
{
  if (a1)
  {
    if (a1[6])
    {
      CMNotificationCenterRemoveListener();
      CMNotificationCenterBarrier();
      CMNotificationCenterUnregisterForBarrierSupport();
    }
    if (*a1) {
      CFRelease(*a1);
    }
    free(a1);
  }
}

uint64_t FigUpstreamMonitor_BeginMonitoring(uint64_t result)
{
  if (result)
  {
    if (*(void *)result) {
      return (*(uint64_t (**)(void))(result + 16))(*(void *)result);
    }
  }
  return result;
}

uint64_t FigUpstreamMonitor_EndMonitoring(uint64_t result)
{
  if (result)
  {
    if (*(void *)result) {
      return (*(uint64_t (**)(void))(result + 24))(*(void *)result);
    }
  }
  return result;
}

void *FigUpstreamMonitor_GetStatus(void *result, uint64_t a2, _DWORD *a3, _DWORD *a4, unsigned char *a5)
{
  uint64_t v8 = result;
  uint64_t v13 = 0;
  char v12 = 0;
  int v11 = 0;
  if (!result) {
    goto LABEL_6;
  }
  uint64_t result = (void *)*result;
  if (!*v8)
  {
    LOBYTE(v8) = 0;
LABEL_6:
    int v9 = 0;
    int v10 = 0;
    goto LABEL_4;
  }
  uint64_t result = (void *)((uint64_t (*)(void *))v8[4])(result);
  int v9 = v13;
  int v10 = HIDWORD(v13);
  LOBYTE(v8) = v12;
LABEL_4:
  *a3 = v10;
  *a4 = v9;
  *a5 = (_BYTE)v8;
  return result;
}

uint64_t FigUpstreamMonitor_GetExternalProtectionState(uint64_t result, int a2)
{
  int v6 = 0;
  if (result)
  {
    if (*(void *)result)
    {
      uint64_t result = (*(uint64_t (**)(void, int *))(result + 40))(*(void *)result, &v6);
      if (a2 != 7 && result == 2)
      {
        if ((a2 - 1) >= 2) {
          int v3 = 1;
        }
        else {
          int v3 = 2;
        }
        if (a2 == 1) {
          int v4 = 2;
        }
        else {
          int v4 = 1;
        }
        if (v6 == 1) {
          unsigned int v5 = v4;
        }
        else {
          unsigned int v5 = 2;
        }
        if (v6 == 2) {
          unsigned int v5 = v3;
        }
        if (v6) {
          return v5;
        }
        else {
          return 0;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void __GetUpstreamMonitorQueue_block_invoke()
{
  uint64_t v0 = dispatch_queue_create(0, 0);
  GetUpstreamMonitorQueue_queue = (uint64_t)v0;

  dispatch_set_context(v0, &GetUpstreamMonitorQueue_context);
}

uint64_t FigHDCPMonitorCreateWithOptions(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  *a4 = @"fake AUCMonitor";
  return 0;
}

uint64_t FigHDCPMonitorGetSecureStatusTypeAndIsDeterminedForDisplays(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4, unsigned char *a5, int *a6)
{
  *a3 = 2;
  *a5 = 1;
  *a4 = 0;
  int v6 = FigHDCPMonitorGetSecureStatusTypeAndIsDeterminedForDisplays_statusSeed++;
  *a6 = v6;
  return 0;
}

uint64_t FigHDCPMonitorGetExternalProtectionStateAndType(uint64_t a1, _DWORD *a2)
{
  *a2 = 0;
  return 0xFFFFFFFFLL;
}

void FigUpstreamMonitorProtectionStatusChangedCallback(uint64_t a1)
{
  uint64_t v2 = FigUpstreamMonitor_CreateOrRetainSharedMonitor(0);
  if (v2 == a1) {
    CMNotificationCenterPostNotification();
  }

  FigUpstreamMonitor_ReleaseSharedMonitor(v2);
}

void FigUpstreamMonitorExternalProtectionStateChangedCallback(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = FigUpstreamMonitor_CreateOrRetainSharedMonitor(0);
  if (v3 == a2) {
    CMNotificationCenterPostNotification();
  }

  FigUpstreamMonitor_ReleaseSharedMonitor(v3);
}

uint64_t FigVTTStringifyFigGeometryDimensionAndAppend(__CFString *a1, uint64_t a2, int a3)
{
  if (a1)
  {
    figTTMLStringifyFigGeometryDimensionAndAppend(a1, a2, a3);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigVTTStringifyFigGeometryPointAndAppend(__CFString *a1, uint64_t *a2)
{
  if (a1)
  {
    figTTMLStringifyFigGeometryDimensionAndAppend(a1, *a2, a2[1]);
    CFStringAppend(a1, @",");
    figTTMLStringifyFigGeometryDimensionAndAppend(a1, a2[2], a2[3]);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

CFStringRef FigVTTCopyCMTimeAsTimeStamp(CMTime *a1)
{
  if ((a1->flags & 0x1D) == 1)
  {
    CMTime time = *a1;
    CMTimeConvertScale(&v7, &time, 1000, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
    CMTimeValue v1 = v7.value - 3600000 * (int)(v7.value / 3600000);
    uint64_t v2 = v1 / 60000;
    CMTimeValue v3 = v1 - 60000 * (int)(v1 / 60000);
    return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%d:%02d:%02d.%03d", v7.value / 3600000, v2, v3 / 1000, v3 + 4294966296 * (v3 / 1000));
  }
  else
  {
    FigSignalErrorAt();
    CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    return CFStringCreateWithFormat(v5, 0, &stru_1EE53F4B8);
  }
}

CFStringRef FigVTTCopyRGBAColorAsColorSyntax(float32x4_t a1, float32_t a2, float a3, float a4)
{
  uint64_t v4 = 0;
  LODWORD(v5) = 0;
  a1.f32[1] = a2;
  a1.i64[1] = __PAIR64__(LODWORD(a4), LODWORD(a3));
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  int32x4_t v10 = vcvtq_s32_f32(vmulq_f32(a1, (float32x4_t)vdupq_n_s32(0x437F0000u)));
  do
  {
    unsigned int v6 = v10.i32[v4] & ~(v10.i32[v4] >> 31);
    if (v6 >= 0xFF) {
      unsigned int v6 = 255;
    }
    CFAllocatorRef v5 = (const void *)(v6 | (v5 << 8));
    v10.i32[v4++] = v6;
  }
  while (v4 != 4);
  MEMORY[0x19970EE10](&initRGBANamedCSSColorMaps, figVTTInitRGBANamedCSSColorMaps);
  CFNumberRef Value = CFDictionaryGetValue((CFDictionaryRef)sRGBAToNamedCSSColorMap, v5);
  if (!Value) {
    return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"rgba(%d,%d,%d,%0.2f)", v10.u32[0], v10.u32[1], v10.u32[2], (float)v10.i32[3] / 255.0);
  }
  uint64_t v8 = Value;
  CFRetain(Value);
  return (CFStringRef)v8;
}

CFStringRef FigVTTCGColorCopyAsVTTColorSyntax(CGColor *a1)
{
  ColorSpace = CGColorGetColorSpace(a1);
  if (CGColorSpaceGetModel(ColorSpace) == kCGColorSpaceModelRGB && CGColorGetNumberOfComponents(a1) == 4)
  {
    Components = CGColorGetComponents(a1);
    *(CGFloat *)v4.i64 = *Components;
    v4.f32[0] = *Components;
    float v5 = Components[1];
    float v6 = Components[2];
    float v7 = Components[3];
    return FigVTTCopyRGBAColorAsColorSyntax(v4, v5, v6, v7);
  }
  else
  {
    FigSignalErrorAt();
    return 0;
  }
}

uint64_t FigVTTCGColorCopyVTTColorAttributeValueAsCSSColorSyntax(const __CFString *a1, void *a2)
{
  if (a1 && (CFTypeID v4 = CFGetTypeID(a1), v4 == CFStringGetTypeID()))
  {
    if (CFStringFind(a1, @"rgba("), 1uLL.location == -1 {
      && (MEMORY[0x19970EE10](&initRGBANamedCSSColorMaps, figVTTInitRGBANamedCSSColorMaps),
    }
          !FigCFDictionaryGetInt32IfPresent()))
    {
      CFTypeRef v5 = 0;
    }
    else
    {
      CFTypeRef v5 = CFRetain(a1);
    }
    *a2 = v5;
  }
  else
  {
    FigSignalErrorAt();
  }
  return 0;
}

uint64_t FigVTTDocumentWriterMapPropertyToAttribute_BackgroundColor(void *a1, __CFDictionary *a2)
{
  if (a1
    && (CFTypeID v4 = CFGetTypeID(a1), v4 == CGColorGetTypeID())
    && (CFStringRef v5 = FigVTTCGColorCopyAsVTTColorSyntax((CGColor *)a1)) != 0)
  {
    CFStringRef v6 = v5;
    CFDictionarySetValue(a2, @"https://www.w3.org/Style/CSS/ background-color", v5);
    CFRelease(v6);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigVTTDocumentWriterMapPropertyToAttribute_WritingMode(const void *a1, __CFDictionary *a2)
{
  if (a1)
  {
    CFTypeID v3 = CFGetTypeID(a1);
    if (v3 == CFStringGetTypeID())
    {
      if (FigCFEqual() || FigCFEqual())
      {
        CFTypeID v4 = kFigVTT_AttributeValue_css_writingMode_horizontalTopToBottom;
LABEL_6:
        CFDictionarySetValue(a2, @"https://www.w3.org/Style/CSS/ writing-mode", *v4);
        return 0;
      }
      if (FigCFEqual())
      {
        CFTypeID v4 = kFigVTT_AttributeValue_css_writingMode_verticalRightToLeft;
        goto LABEL_6;
      }
      if (FigCFEqual())
      {
        CFTypeID v4 = kFigVTT_AttributeValue_css_writingMode_verticalLeftToRight;
        goto LABEL_6;
      }
    }
  }

  return FigSignalErrorAt();
}

uint64_t FigVTTDocumentWriterMapPropertyToAttribute_TextColor(void *a1, __CFDictionary *a2)
{
  if (a1
    && (CFTypeID v4 = CFGetTypeID(a1), v4 == CGColorGetTypeID())
    && (CFStringRef v5 = FigVTTCGColorCopyAsVTTColorSyntax((CGColor *)a1)) != 0)
  {
    CFStringRef v6 = v5;
    CFDictionarySetValue(a2, @"https://www.w3.org/Style/CSS/ color", v5);
    CFRelease(v6);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigVTTDocumentWriterMapPropertyToAttribute_FontWeight(const void *a1, __CFDictionary *a2)
{
  if (a1)
  {
    CFTypeID v4 = CFGetTypeID(a1);
    if (v4 == CFStringGetTypeID())
    {
      if (CFEqual(a1, (CFTypeRef)*MEMORY[0x1E4F20190]))
      {
        CFStringRef v5 = kFigVTT_AttributeValue_css_fontWeight_normal;
LABEL_7:
        CFDictionarySetValue(a2, @"https://www.w3.org/Style/CSS/ font-weight", *v5);
        return 0;
      }
      if (CFEqual(a1, (CFTypeRef)*MEMORY[0x1E4F20188]))
      {
        CFStringRef v5 = kFigVTT_AttributeValue_css_fontWeight_bold;
        goto LABEL_7;
      }
    }
  }

  return FigSignalErrorAt();
}

uint64_t FigVTTDocumentWriterMapPropertyToAttribute_FontStyle(const void *a1, __CFDictionary *a2)
{
  if (a1)
  {
    CFTypeID v4 = CFGetTypeID(a1);
    if (v4 == CFStringGetTypeID())
    {
      if (CFEqual(a1, (CFTypeRef)*MEMORY[0x1E4F20170]))
      {
        CFStringRef v5 = kFigVTT_AttributeValue_css_fontStyle_normal;
LABEL_9:
        CFDictionarySetValue(a2, @"https://www.w3.org/Style/CSS/ font-style", *v5);
        return 0;
      }
      if (CFEqual(a1, (CFTypeRef)*MEMORY[0x1E4F20168]))
      {
        CFStringRef v5 = kFigVTT_AttributeValue_css_fontStyle_italic;
        goto LABEL_9;
      }
      if (CFEqual(a1, (CFTypeRef)*MEMORY[0x1E4F20178]))
      {
        CFStringRef v5 = kFigVTT_AttributeValue_css_fontStyle_oblique;
        goto LABEL_9;
      }
    }
  }

  return FigSignalErrorAt();
}

uint64_t FigVTTDocumentWriterMapPropertyToAttribute_Decoration(const __CFNumber *a1, __CFDictionary *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  int valuePtr = 0;
  if (a1 && (CFTypeID v4 = CFGetTypeID(a1), v4 == CFNumberGetTypeID()))
  {
    CFNumberGetValue(a1, kCFNumberSInt32Type, &valuePtr);
    int v5 = valuePtr;
    CFMutableStringRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
    if (Mutable)
    {
      float v7 = Mutable;
      uint64_t v8 = 0;
      int v9 = 1;
      v12[0] = 1;
      uint64_t v13 = @"underline";
      int v14 = 2;
      long long v15 = @"line-through";
      int v16 = 4;
      long long v17 = @"overline";
      do
      {
        if ((v12[v8] & v5) != 0)
        {
          if (!v9) {
            CFStringAppend(v7, @" ");
          }
          CFStringAppend(v7, *(CFStringRef *)&v12[v8 + 2]);
          int v9 = 0;
        }
        v8 += 4;
      }
      while (v8 != 12);
      if (!CFStringGetLength(v7)) {
        CFStringAppend(v7, @"none");
      }
      CFDictionarySetValue(a2, @"https://www.w3.org/Style/CSS/ text-decoration", v7);
      CFRelease(v7);
    }
    else
    {
      FigSignalErrorAt();
      CFDictionarySetValue(a2, @"https://www.w3.org/Style/CSS/ text-decoration", 0);
    }
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigVTTDocumentWriterMapPropertyToAttribute_TextAlign(const void *a1, __CFDictionary *a2)
{
  if (a1)
  {
    CFTypeID v3 = CFGetTypeID(a1);
    if (v3 == CFStringGetTypeID())
    {
      if (FigCFEqual())
      {
        CFTypeID v4 = kFigVTT_AttributeValue_css_textAlign_start;
LABEL_13:
        CFDictionarySetValue(a2, @"https://www.w3.org/Style/CSS/ text-align", *v4);
        return 0;
      }
      if (FigCFEqual())
      {
        CFTypeID v4 = kFigVTT_AttributeValue_css_textAlign_end;
        goto LABEL_13;
      }
      if (FigCFEqual())
      {
        CFTypeID v4 = kFigVTT_AttributeValue_css_textAlign_center;
        goto LABEL_13;
      }
      if (FigCFEqual())
      {
        CFTypeID v4 = kFigVTT_AttributeValue_css_textAlign_left;
        goto LABEL_13;
      }
      if (FigCFEqual())
      {
        CFTypeID v4 = kFigVTT_AttributeValue_css_textAlign_right;
        goto LABEL_13;
      }
    }
  }

  return FigSignalErrorAt();
}

uint64_t FigVTTDocumentWriterMapPropertyToAttribute_FontFamily(const void *a1, __CFDictionary *a2)
{
  if (a1 && (CFTypeID v3 = CFGetTypeID(a1), v3 == FigCaptionFontFamilyNameListGetTypeID()))
  {
    CFMutableStringRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
    if (Mutable)
    {
      uint64_t Count = FigCaptionFontFamilyNameListGetCount();
      if (!Count)
      {
LABEL_11:
        CFDictionarySetValue(a2, @"https://www.w3.org/Style/CSS/ font-family", Mutable);
        uint64_t v10 = 0;
        goto LABEL_12;
      }
      uint64_t v6 = Count;
      uint64_t v7 = 0;
      while (1)
      {
        uint64_t v8 = FigCaptionFontFamilyNameListCopyFamilyKindAndNameAtIndex();
        if (v8) {
          break;
        }
        if (v7) {
          CFStringAppend(Mutable, @",");
        }
        MEMORY[0x19970EE10](&figVTTDocumentWriter_getVTTFontFamilyName_once, initMapFromFigCaptionFontFamilyToVTTFontFamily);
        CFStringRef Value = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)sMapFromFigCaptionFontFamilyToVTTFontFamily, 0);
        if (!Value) {
          goto LABEL_15;
        }
        CFStringAppend(Mutable, Value);
        if (v6 == ++v7) {
          goto LABEL_11;
        }
      }
    }
    else
    {
LABEL_15:
      uint64_t v8 = FigSignalErrorAt();
    }
    uint64_t v10 = v8;
  }
  else
  {
    uint64_t v10 = FigSignalErrorAt();
    CFMutableStringRef Mutable = 0;
  }
LABEL_12:
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v10;
}

uint64_t FigVTTDocumentWriterMapPropertyToAttribute_FontSize(const void *a1, __CFDictionary *a2)
{
  if (a1 && (CFTypeID v3 = CFGetTypeID(a1), v3 == CFDictionaryGetTypeID()))
  {
    FigGeometrySizeMakeFromDictionary();
    CFMutableStringRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
    int v5 = FigGeometryDimensionEqualToDimension();
    figTTMLStringifyFigGeometryDimensionAndAppend(Mutable, 0, 0);
    if (!v5)
    {
      CFStringAppend(Mutable, @" ");
      figTTMLStringifyFigGeometryDimensionAndAppend(Mutable, 0, 0);
    }
    CFDictionarySetValue(a2, @"https://www.w3.org/Style/CSS/ font-size", Mutable);
    if (Mutable) {
      CFRelease(Mutable);
    }
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigVTTDocumentWriterMapAttributeToCSS_BackgroundColor(const __CFString *a1, __CFDictionary *a2)
{
  uint64_t v7 = 0;
  if (a1 && (CFTypeID v4 = CFGetTypeID(a1), v4 == CFStringGetTypeID()))
  {
    FigVTTCGColorCopyVTTColorAttributeValueAsCSSColorSyntax(a1, &v7);
    int v5 = v7;
    if (v7)
    {
      CFDictionarySetValue(a2, @"name", @"background-color");
      CFDictionarySetValue(a2, @"value", v5);
      CFRelease(v5);
    }
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigVTTDocumentWriterMapAttributeToCSS_WritingMode(const void *a1, __CFDictionary *a2)
{
  if (a1)
  {
    CFTypeID v4 = CFGetTypeID(a1);
    if (v4 == CFStringGetTypeID())
    {
      if (CFEqual(a1, @"horizontal-tb"))
      {
        int v5 = kFigVTT_PropertyValue_css_writingMode_horizontalTopToBottom;
      }
      else if (CFEqual(a1, @"vertical-lr"))
      {
        int v5 = kFigVTT_PropertyValue_css_writingMode_verticalLeftToRight;
      }
      else
      {
        if (!CFEqual(a1, @"vertical-rl")) {
          return 0;
        }
        int v5 = kFigVTT_PropertyValue_css_writingMode_verticalRightToLeft;
      }
      uint64_t v6 = *v5;
      if (*v5)
      {
        CFDictionarySetValue(a2, @"name", @"writing-mode");
        CFDictionarySetValue(a2, @"value", v6);
      }
      return 0;
    }
  }

  return FigSignalErrorAt();
}

uint64_t FigVTTDocumentWriterMapAttributeToCSS_TextColor(const __CFString *a1, __CFDictionary *a2)
{
  uint64_t v7 = 0;
  if (a1 && (CFTypeID v4 = CFGetTypeID(a1), v4 == CFStringGetTypeID()))
  {
    FigVTTCGColorCopyVTTColorAttributeValueAsCSSColorSyntax(a1, &v7);
    int v5 = v7;
    if (v7)
    {
      CFDictionarySetValue(a2, @"name", @"color");
      CFDictionarySetValue(a2, @"value", v5);
      CFRelease(v5);
    }
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigVTTDocumentWriterMapAttributeToCSS_FontWeight(const void *a1, __CFDictionary *a2)
{
  if (a1)
  {
    CFTypeID v4 = CFGetTypeID(a1);
    if (v4 == CFStringGetTypeID())
    {
      if (CFEqual(a1, @"normal"))
      {
        int v5 = kFigVTT_PropertyValue_css_fontWeight_normal;
      }
      else
      {
        if (!CFEqual(a1, @"bold")) {
          return 0;
        }
        int v5 = kFigVTT_PropertyValue_css_fontWeight_bold;
      }
      uint64_t v6 = *v5;
      if (*v5)
      {
        CFDictionarySetValue(a2, @"name", @"font-weight");
        CFDictionarySetValue(a2, @"value", v6);
      }
      return 0;
    }
  }

  return FigSignalErrorAt();
}

uint64_t FigVTTDocumentWriterMapAttributeToCSS_FontStyle(const void *a1, __CFDictionary *a2)
{
  if (a1)
  {
    CFTypeID v4 = CFGetTypeID(a1);
    if (v4 == CFStringGetTypeID())
    {
      if (CFEqual(a1, @"normal"))
      {
        int v5 = kFigVTT_PropertyValue_css_fontStyle_normal;
      }
      else if (CFEqual(a1, @"italic"))
      {
        int v5 = kFigVTT_PropertyValue_css_fontStyle_italic;
      }
      else
      {
        if (!CFEqual(a1, @"oblique")) {
          return 0;
        }
        int v5 = kFigVTT_PropertyValue_css_fontStyle_oblique;
      }
      uint64_t v6 = *v5;
      if (*v5)
      {
        CFDictionarySetValue(a2, @"name", @"font-style");
        CFDictionarySetValue(a2, @"value", v6);
      }
      return 0;
    }
  }

  return FigSignalErrorAt();
}

uint64_t FigVTTDocumentWriterMapAttributeToCSS_Decoration(const void *a1, __CFDictionary *a2)
{
  if (a1)
  {
    CFTypeID v4 = CFGetTypeID(a1);
    if (v4 == CFStringGetTypeID())
    {
      if (CFEqual(a1, @"underline"))
      {
        int v5 = kFigVTT_PropertyValue_css_textDecoration_underline;
      }
      else if (CFEqual(a1, @"none"))
      {
        int v5 = kFigVTT_PropertyValue_css_textDecoration_none;
      }
      else if (CFEqual(a1, @"overline"))
      {
        int v5 = kFigVTT_PropertyValue_css_textDecoration_overline;
      }
      else
      {
        if (!CFEqual(a1, @"line-through")) {
          return 0;
        }
        int v5 = kFigVTT_PropertyValue_css_textDecoration_lineThrough;
      }
      uint64_t v6 = *v5;
      if (*v5)
      {
        CFDictionarySetValue(a2, @"name", @"text-decoration");
        CFDictionarySetValue(a2, @"value", v6);
      }
      return 0;
    }
  }

  return FigSignalErrorAt();
}

uint64_t FigVTTDocumentWriterMapAttributeToCSS_TextAlign(const void *a1, __CFDictionary *a2)
{
  if (a1)
  {
    CFTypeID v4 = CFGetTypeID(a1);
    if (v4 == CFStringGetTypeID())
    {
      if (CFEqual(a1, @"left"))
      {
        int v5 = kFigVTT_PropertyValue_css_textAlign_left;
      }
      else if (CFEqual(a1, @"right"))
      {
        int v5 = kFigVTT_PropertyValue_css_textAlign_right;
      }
      else if (CFEqual(a1, @"center"))
      {
        int v5 = kFigVTT_PropertyValue_css_textAlign_center;
      }
      else if (CFEqual(a1, @"start"))
      {
        int v5 = kFigVTT_PropertyValue_css_textAlign_start;
      }
      else
      {
        if (!CFEqual(a1, @"end")) {
          return 0;
        }
        int v5 = kFigVTT_PropertyValue_css_textAlign_end;
      }
      uint64_t v6 = *v5;
      if (*v5)
      {
        CFDictionarySetValue(a2, @"name", @"text-align");
        CFDictionarySetValue(a2, @"value", v6);
      }
      return 0;
    }
  }

  return FigSignalErrorAt();
}

uint64_t FigVTTDocumentWriterMapAttributeToCSS_FontFamily(const void *a1, __CFDictionary *a2)
{
  if (a1 && (CFTypeID v4 = CFGetTypeID(a1), v4 == CFStringGetTypeID()))
  {
    CFDictionarySetValue(a2, @"name", @"font-family");
    CFDictionarySetValue(a2, @"value", a1);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigVTTDocumentWriterMapAttributeToCSS_FontSize(const void *a1, __CFDictionary *a2)
{
  if (a1 && (CFTypeID v4 = CFGetTypeID(a1), v4 == CFStringGetTypeID()))
  {
    CFDictionarySetValue(a2, @"name", @"font-size");
    CFDictionarySetValue(a2, @"value", a1);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t figVTTInitRGBANamedCSSColorMaps()
{
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CMTimeValue v1 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
  CFMutableStringRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, MEMORY[0x1E4F1D540]);
  CFMutableDictionaryRef v3 = CFDictionaryCreateMutable(v0, 0, MEMORY[0x1E4F1D530], v1);
  CFDictionarySetValue(Mutable, (const void *)0xF0F8FFFFLL, @"aliceblue");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xFAEBD7FFLL, @"antiquewhite");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xFFFFFF, @"aqua");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x7FFFD4FF, @"aquamarine");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xF0FFFFFFLL, @"azure");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xF5F5DCFFLL, @"beige");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xFFE4C4FFLL, @"bisque");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xFF, @"black");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xFFEBCDFFLL, @"blanchedalmond");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xFFFF, @"blue");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x8A2BE2FFLL, @"blueviolet");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xA52A2AFFLL, @"brown");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xDEB887FFLL, @"burlywood");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x5F9EA0FF, @"cadetblue");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x7FFF00FF, @"chartreuse");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xD2691EFFLL, @"chocolate");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xFF7F50FFLL, @"coral");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x6495EDFF, @"cornflowerblue");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xFFF8DCFFLL, @"cornsilk");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xDC143CFFLL, @"crimson");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xFFFFFF, @"cyan");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x8BFF, @"darkblue");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x8B8BFF, @"darkcyan");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xB8860BFFLL, @"darkgoldenrod");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xA9A9A9FFLL, @"darkgray");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xA9A9A9FFLL, @"darkgrey");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x6400FF, @"darkgreen");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xBDB76BFFLL, @"darkkhaki");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x8B008BFFLL, @"darkmagenta");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x556B2FFF, @"darkolivegreen");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xFF8C00FFLL, @"darkorange");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x9932CCFFLL, @"darkorchid");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x8B0000FFLL, @"darkred");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xE9967AFFLL, @"darksalmon");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x8FBC8FFFLL, @"darkseagreen");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x483D8BFF, @"darkslateblue");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x2F4F4FFF, @"darkslategray");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x2F4F4FFF, @"darkslategrey");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xCED1FF, @"darkturquoise");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x9400D3FFLL, @"darkviolet");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xFF1493FFLL, @"deeppink");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xBFFFFF, @"deepskyblue");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x696969FF, @"dimgray");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x696969FF, @"dimgrey");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x1E90FFFF, @"dodgerblue");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xB22222FFLL, @"firebrick");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xFFFAF0FFLL, @"floralwhite");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x228B22FF, @"forestgreen");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xFF00FFFFLL, @"fuchsia");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xDCDCDCFFLL, @"gainsboro");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xF8F8FFFFLL, @"ghostwhite");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xFFD700FFLL, @"gold");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xDAA520FFLL, @"goldenrod");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x808080FFLL, @"gray");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x808080FFLL, @"grey");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x8000FF, @"green");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xADFF2FFFLL, @"greenyellow");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xF0FFF0FFLL, @"honeydew");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xFF69B4FFLL, @"hotpink");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xCD5C5CFFLL, @"indianred");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x4B0082FF, @"indigo");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xFFFFF0FFLL, @"ivory");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xF0E68CFFLL, @"khaki");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xE6E6FAFFLL, @"lavender");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xFFF0F5FFLL, @"lavenderblush");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x7CFC00FF, @"lawngreen");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xFFFACDFFLL, @"lemonchiffon");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xADD8E6FFLL, @"lightblue");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xF08080FFLL, @"lightcoral");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xE0FFFFFFLL, @"lightcyan");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xFAFAD2FFLL, @"lightgoldenrodyellow");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xD3D3D3FFLL, @"lightgray");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xD3D3D3FFLL, @"lightgrey");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x90EE90FFLL, @"lightgreen");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xFFB6C1FFLL, @"lightpink");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xFFA07AFFLL, @"lightsalmon");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x20B2AAFF, @"lightseagreen");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x87CEFAFFLL, @"lightskyblue");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x778899FF, @"lightslategray");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x778899FF, @"lightslategrey");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xB0C4DEFFLL, @"lightsteelblue");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xFFFFE0FFLL, @"lightyellow");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xFF00FF, @"lime");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x32CD32FF, @"limegreen");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xFAF0E6FFLL, @"linen");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xFF00FFFFLL, @"magenta");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x800000FFLL, @"maroon");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x66CDAAFF, @"mediumaquamarine");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xCDFF, @"mediumblue");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xBA55D3FFLL, @"mediumorchid");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x9370DBFFLL, @"mediumpurple");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x3CB371FF, @"mediumseagreen");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x7B68EEFF, @"mediumslateblue");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xFA9AFF, @"mediumspringgreen");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x48D1CCFF, @"mediumturquoise");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xC71585FFLL, @"mediumvioletred");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x191970FF, @"midnightblue");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xF5FFFAFFLL, @"mintcream");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xFFE4E1FFLL, @"mistyrose");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xFFE4B5FFLL, @"moccasin");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xFFDEADFFLL, @"navajowhite");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x80FF, @"navy");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xFDF5E6FFLL, @"oldlace");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x808000FFLL, @"olive");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x6B8E23FF, @"olivedrab");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xFFA500FFLL, @"orange");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xFF4500FFLL, @"orangered");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xDA70D6FFLL, @"orchid");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xEEE8AAFFLL, @"palegoldenrod");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x98FB98FFLL, @"palegreen");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xAFEEEEFFLL, @"paleturquoise");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xDB7093FFLL, @"palevioletred");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xFFEFD5FFLL, @"papayawhip");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xFFDAB9FFLL, @"peachpuff");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xCD853FFFLL, @"peru");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xFFC0CBFFLL, @"pink");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xDDA0DDFFLL, @"plum");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xB0E0E6FFLL, @"powderblue");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x800080FFLL, @"purple");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x663399FF, @"rebeccapurple");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xFF0000FFLL, @"red");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xBC8F8FFFLL, @"rosybrown");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x4169E1FF, @"royalblue");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x8B4513FFLL, @"saddlebrown");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xFA8072FFLL, @"salmon");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xF4A460FFLL, @"sandybrown");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x2E8B57FF, @"seagreen");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xFFF5EEFFLL, @"seashell");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xA0522DFFLL, @"sienna");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xC0C0C0FFLL, @"silver");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x87CEEBFFLL, @"skyblue");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x6A5ACDFF, @"slateblue");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x708090FF, @"slategray");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x708090FF, @"slategrey");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xFFFAFAFFLL, @"snow");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xFF7FFF, @"springgreen");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x4682B4FF, @"steelblue");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xD2B48CFFLL, @"tan");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x8080FF, @"teal");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xD8BFD8FFLL, @"thistle");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xFF6347FFLL, @"tomato");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, 0, @"transparent");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x40E0D0FF, @"turquoise");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xEE82EEFFLL, @"violet");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xF5DEB3FFLL, @"wheat");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xFFFFFFFFLL, @"white");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xF5F5F5FFLL, @"whitesmoke");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xFFFF00FFLL, @"yellow");
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x9ACD32FFLL, @"yellowgreen");
  uint64_t result = FigCFDictionarySetInt32();
  sRGBAToNamedCSSColorMap = (uint64_t)Mutable;
  sNamedCSSColorToRGBAMap = (uint64_t)v3;
  return result;
}

void initMapFromFigCaptionFontFamilyToVTTFontFamily()
{
  CFMutableStringRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F1FE70], @"default");
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F1FEB0], @"serif");
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F1FEA8], @"sans-serif");
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F1FE80], @"monospace");
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F1FE68], @"cursive");
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F1FE78], @"fantasy");
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F1FEA0], @"serif");
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F1FE98], @"sans-serif");
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F1FE90], @"monospace");
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F1FE88], @"monospace");
  sMapFromFigCaptionFontFamilyToVTTFontFamilCGFloat y = (uint64_t)Mutable;
}

CFTypeRef _FigURLStorageSessionNSCopyGlobalSession()
{
  if (sCreateGlobalFigURLStorageSessionNSTypeOnce != -1) {
    dispatch_once(&sCreateGlobalFigURLStorageSessionNSTypeOnce, &__block_literal_global_133);
  }
  CFTypeRef result = (CFTypeRef)sGlobalFigURLStorageSessionNS;
  if (sGlobalFigURLStorageSessionNS)
  {
    return CFRetain(result);
  }
  return result;
}

uint64_t figURLStorageSessionNSCommonCreate(uint64_t a1, void *a2, void *a3, void *a4)
{
  if (FigURLStorageSessionNSGetClassID_sRegisterFigURLStorageSessionNSTypeOnce != -1) {
    dispatch_once(&FigURLStorageSessionNSGetClassID_sRegisterFigURLStorageSessionNSTypeOnce, &__block_literal_global_11);
  }
  if (!CMDerivedObjectCreate())
  {
    uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
    *uint64_t DerivedStorage = [a2 copy];
    DerivedStorage[1] = a3;
    DerivedStorage[2] = a4;
  }
  return 0;
}

uint64_t _FigURLStorageSessionNSCreate(CFDictionaryRef theDict, uint64_t *a2)
{
  if (a2)
  {
    if (theDict) {
      CFStringRef Value = (void *)CFDictionaryGetValue(theDict, @"FUSS_AdditionalHTTPCookies");
    }
    else {
      CFStringRef Value = 0;
    }
    int v5 = (void *)MEMORY[0x199711A30]();
    uint64_t v6 = (void *)[MEMORY[0x1E4F18DD0] ephemeralSessionConfiguration];
    uint64_t v7 = *MEMORY[0x1E4F1CFD0];
    if (v7 == [(__CFDictionary *)theDict valueForKey:0x1EE55F198]
      && (objc_opt_respondsToSelector() & 1) != 0)
    {
      objc_msgSend(v6, "set_alwaysPerformDefaultTrustEvaluation:", 1);
    }
    [v6 setMultipathServiceType:0];
    if (v7 == [(__CFDictionary *)theDict valueForKey:0x1EE55F178]) {
      [v6 setMultipathServiceType:100];
    }
    objc_msgSend(v6, "set_multipathAlternatePort:", 5228);
    if (_os_feature_enabled_impl()) {
      objc_msgSend(v6, "set_usesNWLoader:", 1);
    }
    objc_msgSend(v6, "set_alternativeServicesStorage:", objc_msgSend(MEMORY[0x1E4F18E40], "sharedPersistentStore"));
    [v6 setURLCache:0];
    [v6 setHTTPCookieAcceptPolicy:0];
    CFDataRef v8 = (const __CFData *)(id)[(__CFDictionary *)theDict valueForKey:0x1EE55F0F8];
    if (v8)
    {
      CFDataRef v9 = v8;
      objc_msgSend(v6, "set_sourceApplicationBundleIdentifier:", v8);
    }
    else
    {
      CFDataRef v9 = (const __CFData *)[(__CFDictionary *)theDict valueForKey:0x1EE55F0D8];
      if (v9)
      {
        objc_msgSend(v6, "set_sourceApplicationAuditTokenData:", v9);
        CFDataRef v9 = (const __CFData *)FigCFHTTPCopyClientBundleIdentifier(v9);
      }
    }
    id v10 = (id)[(__CFDictionary *)theDict valueForKey:0x1EE55F118];
    uint64_t v11 = [(__CFDictionary *)theDict valueForKey:0x1EE55F138];
    if (v11) {
      objc_msgSend(v6, "set_atsContext:", v11);
    }
    uint64_t v12 = [(__CFDictionary *)theDict valueForKey:0x1EE55F158];
    uint64_t v13 = [(__CFDictionary *)theDict valueForKey:0x1EE55F0B8];
    if (v13 || v7 == v12)
    {
      int v14 = (void *)[MEMORY[0x1E4F1CA60] dictionaryWithCapacity:0];
      long long v15 = v14;
      if (v7 == v12) {
        [v14 setObject:v7 forKey:*MEMORY[0x1E4F18F28]];
      }
      if (v13) {
        [v15 setObject:v13 forKey:*MEMORY[0x1E4F19110]];
      }
      objc_msgSend(v6, "set_socketStreamProperties:", v15);
    }
    uint64_t v16 = figURLStorageSessionNSCommonCreate(*MEMORY[0x1E4F1CF80], v6, v9, v10);
    uint64_t v18 = v16;
    if (v16 && Value)
    {
      figURLStorageSessionSetCookieDescArrayForURL(v16, v17, Value);
    }
    else
    {
      if (!v18)
      {
        uint64_t v19 = FigSignalErrorAt();
        goto LABEL_30;
      }
    }
    uint64_t v19 = 0;
    *a2 = v18;
  }
  else
  {
    uint64_t v19 = FigSignalErrorAt();
    CFDataRef v9 = 0;
    id v10 = 0;
  }
LABEL_30:

  return v19;
}

uint64_t figURLStorageSessionSetCookieDescArrayForURL(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t DerivedStorage = (id *)CMBaseObjectGetDerivedStorage();
  int v5 = (void *)MEMORY[0x199711A30]();
  uint64_t v6 = [*DerivedStorage HTTPCookieStorage];
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  CFTypeRef v8[2] = __figURLStorageSessionSetCookieDescArrayForURL_block_invoke;
  v8[3] = &unk_1E57AB0D8;
  v8[4] = v6;
  [a3 enumerateObjectsUsingBlock:v8];
  return 0;
}

void figURLStorageSessionFinalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    CMTimeValue v1 = (id *)DerivedStorage;
    uint64_t v2 = (void *)MEMORY[0x199711A30]();

    *CMTimeValue v1 = 0;
    v1[1] = 0;

    v1[2] = 0;
  }
}

uint64_t figURLStorageSessionCopyCookieDescArrayForURL(uint64_t a1, const __CFURL *a2, CFMutableArrayRef *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a3)
  {
    uint64_t v6 = (id *)DerivedStorage;
    *a3 = 0;
    if (FigCFHTTPIsHTTPBasedURL(a2))
    {
      CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
      if (Mutable)
      {
        CFMutableArrayRef v8 = Mutable;
        CFDataRef v9 = (void *)MEMORY[0x199711A30]();
        if (!v6 || (id v10 = (void *)[*v6 HTTPCookieStorage]) == 0) {
          id v10 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F18DD0], "defaultSessionConfiguration"), "HTTPCookieStorage");
        }
        uint64_t v11 = (void *)[v10 cookiesForURL:a2];
        v13[0] = MEMORY[0x1E4F143A8];
        v13[1] = 3221225472;
        CMTime v13[2] = __figURLStorageSessionCopyCookieDescArrayForURL_block_invoke;
        v13[3] = &__block_descriptor_40_e15_v32__0_8Q16_B24l;
        v13[4] = v8;
        [v11 enumerateObjectsUsingBlock:v13];
        uint64_t result = 0;
        *a3 = v8;
      }
      else
      {
        uint64_t result = FigSignalErrorAt();
        *a3 = 0;
      }
    }
    else
    {
      return 4294954513;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t figURLStorageSessionSetCredentialPlist(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2 && (CFTypeID v4 = (id *)DerivedStorage, TypeID = CFDictionaryGetTypeID(), TypeID == CFGetTypeID(a2)))
  {
    uint64_t v6 = (void *)MEMORY[0x199711A30]();
    if (v4 && (uint64_t v7 = [*v4 URLCredentialStorage]) != 0)
    {
      v10[0] = MEMORY[0x1E4F143A8];
      v10[1] = 3221225472;
      void v10[2] = __figURLStorageSessionSetCredentialPlist_block_invoke;
      v10[3] = &unk_1E57AB060;
      void v10[4] = v7;
      [a2 enumerateKeysAndObjectsUsingBlock:v10];
      uint64_t v8 = 0;
    }
    else
    {
      uint64_t v8 = FigSignalErrorAt();
    }
    return v8;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t figURLStorageSessionCopyCredentialPlistForURL(uint64_t a1, const __CFURL *a2, void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a3)
  {
    uint64_t v6 = (id *)DerivedStorage;
    *a3 = 0;
    if (!FigCFHTTPIsHTTPBasedURL(a2)) {
      return 4294954513;
    }
    uint64_t v7 = (void *)MEMORY[0x199711A30]();
    if ((v6 && (uint64_t v8 = (void *)[*v6 URLCredentialStorage]) != 0
       || (uint64_t v8 = (void *)[MEMORY[0x1E4F18D90] sharedCredentialStorage]) != 0)
      && (CFDataRef v9 = (void *)[v8 allCredentials],
          (uint64_t v10 = [MEMORY[0x1E4F1CA60] dictionaryWithCapacity:0]) != 0))
    {
      v14[0] = MEMORY[0x1E4F143A8];
      v14[1] = 3221225472;
      v14[2] = __figURLStorageSessionCopyCredentialPlistForURL_block_invoke;
      v14[3] = &unk_1E57AB0B0;
      v14[4] = a2;
      v14[5] = v8;
      v14[6] = v10;
      [v9 enumerateKeysAndObjectsUsingBlock:v14];
      unsigned int v11 = -12783;
    }
    else
    {
      unsigned int v11 = FigSignalErrorAt();
    }
    if (*a3) {
      uint64_t v12 = 0;
    }
    else {
      uint64_t v12 = v11;
    }
    return v12;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t figURLStorageSessionCreateHTTPSession(uint64_t a1, uint64_t a2, const __CFDictionary *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = DerivedStorage;
  if (*(void *)(DerivedStorage + 8) || *(void *)(DerivedStorage + 16))
  {
    CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    if (a3) {
      MutableCFArrayRef Copy = CFDictionaryCreateMutableCopy(v6, 0, a3);
    }
    else {
      MutableCFArrayRef Copy = CFDictionaryCreateMutable(v6, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    }
    uint64_t v8 = MutableCopy;
    if (MutableCopy)
    {
      CFDataRef v9 = *(const void **)(v5 + 8);
      if (v9) {
        CFDictionarySetValue(MutableCopy, @"FHRSP_ClientBundleIdentifier", v9);
      }
      uint64_t v10 = *(const void **)(v5 + 16);
      if (v10) {
        CFDictionarySetValue(v8, @"FHRSP_ClientPersonaIdentifier", v10);
      }
      uint64_t v11 = _FigHTTPRequestSessionCreateForNSURLSession();
      CFRelease(v8);
      return v11;
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  else
  {
    return _FigHTTPRequestSessionCreateForNSURLSession();
  }
}

void __figURLStorageSessionCopyCookieDescArrayForURL_block_invoke(uint64_t a1, void *a2, CFIndex a3)
{
  CFTypeID v4 = *(__CFArray **)(a1 + 32);
  uint64_t v5 = (const void *)[a2 properties];

  CFArrayInsertValueAtIndex(v4, a3, v5);
}

void __figURLStorageSessionSetCredentialPlist_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v6 = objc_alloc(MEMORY[0x1E4F18D98]);
  FigNSHTTPInitWithSerializedObject(v6, a2);
  if (v6)
  {
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    _OWORD v7[2] = __figURLStorageSessionSetCredentialPlist_block_invoke_2;
    v7[3] = &unk_1E57AB038;
    v7[4] = *(void *)(a1 + 32);
    v7[5] = v6;
    [a3 enumerateObjectsUsingBlock:v7];
  }
}

uint64_t __figURLStorageSessionSetCredentialPlist_block_invoke_2(uint64_t a1, void *a2, uint64_t a3)
{
  id v6 = objc_alloc(MEMORY[0x1E4F18D88]);
  uint64_t result = [a2 length];
  if (result)
  {
    FigNSHTTPInitWithSerializedObject(v6, (uint64_t)a2);
    uint64_t v8 = *(void **)(a1 + 32);
    uint64_t v9 = *(void *)(a1 + 40);
    if (a3)
    {
      return [v8 setCredential:v6 forProtectionSpace:v9];
    }
    else
    {
      return [v8 setDefaultCredential:v6 forProtectionSpace:v9];
    }
  }
  return result;
}

uint64_t __figURLStorageSessionCopyCredentialPlistForURL_block_invoke(id *a1, void *a2, void *a3)
{
  if (([a2 isProxy] & 1) != 0
    || [a2 serverTrust]
    || (uint64_t v11 = objc_msgSend((id)objc_msgSend(a1[4], "port"), "integerValue"),
        uint64_t result = [a2 port],
        v11 == result)
    && (uint64_t result = objc_msgSend((id)objc_msgSend(a1[4], "host"), "caseInsensitiveCompare:", objc_msgSend(a2, "host"))) == 0
    && (uint64_t result = objc_msgSend((id)objc_msgSend(a1[4], "scheme"), "caseInsensitiveCompare:", objc_msgSend(a2, "protocol"))) == 0)
  {
    uint64_t v6 = FigNSHTTPCreateSerializedObjectFromNSSecureCoding((uint64_t)a2);
    uint64_t v7 = (void *)[MEMORY[0x1E4F1CA48] arrayWithCapacity:0];
    uint64_t v8 = [a1[5] defaultCredentialForProtectionSpace:a2];
    uint64_t v9 = v8;
    if (v8) {
      uint64_t result = FigNSHTTPCreateSerializedObjectFromNSSecureCoding(v8);
    }
    else {
      uint64_t result = [MEMORY[0x1E4F1C9B8] dataWithBytes:0 length:0];
    }
    if (result)
    {
      [v7 insertObject:result atIndex:0];
      v12[0] = MEMORY[0x1E4F143A8];
      v12[1] = 3221225472;
      _DWORD v12[2] = __figURLStorageSessionCopyCredentialPlistForURL_block_invoke_2;
      v12[3] = &unk_1E57AB088;
      _OWORD v12[4] = v9;
      v12[5] = v7;
      [a3 enumerateKeysAndObjectsUsingBlock:v12];
      return [a1[6] setObject:v7 forKey:v6];
    }
  }
  return result;
}

uint64_t __figURLStorageSessionCopyCredentialPlistForURL_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = objc_msgSend(*(id *)(a1 + 32), "isEqual:");
  if ((result & 1) == 0)
  {
    uint64_t v6 = FigNSHTTPCreateSerializedObjectFromNSSecureCoding(a3);
    uint64_t v7 = *(void **)(a1 + 40);
    return [v7 addObject:v6];
  }
  return result;
}

uint64_t __FigURLStorageSessionNSGetClassID_block_invoke()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

CFStringRef FigURLStorageSessionNSBaseCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigURLStorageSessionNS %p]", a1);
}

uint64_t __figURLStorageSessionSetCookieDescArrayForURL_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = [MEMORY[0x1E4F18D28] cookieWithProperties:a2];
  CFTypeID v4 = *(void **)(a1 + 32);

  return [v4 setCookie:v3];
}

uint64_t FigAudioSessionClockCreate(uint64_t a1, const void *a2, int a3, void *a4)
{
  uint64_t v7 = (void *)MEMORY[0x199711A30]();
  id v16 = 0;
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a2 || !a4) {
    goto LABEL_13;
  }
  if (a3)
  {
    if (a3 == 1)
    {
      uint64_t v8 = kFigAudioSessionProperty_InputTimeObserver;
      goto LABEL_7;
    }
LABEL_13:
    uint64_t v12 = FigSignalErrorAt();
    goto LABEL_14;
  }
  uint64_t v8 = kFigAudioSessionProperty_OutputTimeObserver;
LABEL_7:
  uint64_t v9 = *v8;
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (!v10)
  {
    TimeCallbacuint64_t k = 4294948075;
    goto LABEL_16;
  }
  uint64_t v11 = *(uint64_t (**)(const void *, __CFString *, void, id *))(v10 + 8);
  if (!v11)
  {
    TimeCallbacuint64_t k = 4294948071;
    goto LABEL_16;
  }
  uint64_t v12 = v11(a2, v9, *MEMORY[0x1E4F1CF80], &v16);
  if (v12)
  {
LABEL_14:
    TimeCallbacuint64_t k = v12;
    goto LABEL_16;
  }
  CMClockGetHostTimeClock();
  TimeCallbacuint64_t k = FigDerivedClockCreateWithGetTimeCallback();
  if (!TimeCallback)
  {
    uint64_t DerivedStorage = FigDerivedClockGetDerivedStorage();
    *(void *)(DerivedStorage + 16) = v16;
    *(void *)(DerivedStorage + 8) = CFRetain(a2);
    *a4 = 0;
  }
LABEL_16:

  return TimeCallback;
}

uint64_t CMClockIsAudioSessionClock()
{
  return FigDerivedClockVerifyCallbacksMatch();
}

uint64_t FigAudioSessionClockCopyClockConfiguration(uint64_t a1, CFMutableDictionaryRef *a2)
{
  CFTypeRef cf = 0;
  CFTypeRef v17 = 0;
  if (!FigDerivedClockVerifyCallbacksMatch())
  {
    uint64_t v13 = FigSignalErrorAt();
    goto LABEL_14;
  }
  uint64_t DerivedStorage = FigDerivedClockGetDerivedStorage();
  uint64_t v4 = *(void *)(DerivedStorage + 8);
  if (!v4) {
    goto LABEL_11;
  }
  uint64_t v5 = DerivedStorage;
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (!v6) {
    goto LABEL_11;
  }
  uint64_t v7 = *(uint64_t (**)(uint64_t, __CFString *, void, CFTypeRef *))(v6 + 8);
  if (!v7)
  {
LABEL_17:
    uint64_t v13 = 4294948071;
    goto LABEL_12;
  }
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v9 = v7(v4, @"FAS_CoreSessionID", *MEMORY[0x1E4F1CF80], &v17);
  if (!v9)
  {
    uint64_t v10 = *(void *)(v5 + 8);
    if (v10)
    {
      uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v11)
      {
        uint64_t v12 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v11 + 16);
        if (v12)
        {
          uint64_t v13 = v12(v10, @"FAS_AudioSessionID", v8, &cf);
          if (!v13)
          {
            CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v8, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
            FigCFDictionarySetValue();
            FigCFDictionarySetValue();
            FigCFDictionarySetInt32();
            *a2 = Mutable;
          }
          goto LABEL_12;
        }
        goto LABEL_17;
      }
    }
LABEL_11:
    uint64_t v13 = 4294948075;
    goto LABEL_12;
  }
  uint64_t v13 = v9;
LABEL_12:
  if (cf) {
    CFRelease(cf);
  }
LABEL_14:
  if (v17) {
    CFRelease(v17);
  }
  return v13;
}

BOOL FigAudioSessionClockConfigurationCanUseFigAudioSessionToCreateClock(uint64_t a1, BOOL a2)
{
  CFTypeRef cf = 0;
  if (!FigCFDictionaryGetValueIfPresent()) {
    return 0;
  }
  if (!a2) {
    return a2;
  }
  uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = *(uint64_t (**)(BOOL, __CFString *, void, CFTypeRef *))(v3 + 8);
  if (!v4) {
    return 0;
  }
  int v5 = v4(a2, @"FAS_CoreSessionID", *MEMORY[0x1E4F1CF80], &cf);
  CFTypeRef v6 = cf;
  if (v5)
  {
    a2 = 0;
    if (!cf) {
      return a2;
    }
    goto LABEL_7;
  }
  a2 = FigCFEqual() != 0;
  CFTypeRef v6 = cf;
  if (cf) {
LABEL_7:
  }
    CFRelease(v6);
  return a2;
}

uint64_t FigAudioSessionClockCreateFromClockConfigurationAndExistingFigAudioSession(uint64_t a1, uint64_t a2, BOOL a3, void *a4)
{
  if (FigCFDictionaryGetInt32IfPresent()
    && FigCFDictionaryGetInt32IfPresent()
    && FigAudioSessionClockConfigurationCanUseFigAudioSessionToCreateClock(a2, a3))
  {
    return FigAudioSessionClockCreateForAVAudioSession(a1, 0, 0, a4);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigAudioSessionClockCreateForAVAudioSession(uint64_t a1, void *a2, int a3, void *a4)
{
  CFTypeRef cf = 0;
  uint64_t v7 = FigAudioSessionCreateWithAVAudioSession(a1, a2, &cf);
  if (!v7) {
    uint64_t v7 = FigAudioSessionClockCreate(a1, cf, a3, a4);
  }
  uint64_t v8 = v7;
  if (cf) {
    CFRelease(cf);
  }
  return v8;
}

uint64_t FigAudioSessionClockConfigurationCanUseAVAudioSessionToCreateClock(uint64_t a1, void *a2)
{
  uint64_t result = FigCFDictionaryGetInt64IfPresent();
  if (result) {
    return objc_msgSend((id)objc_msgSend(a2, "getMXSessionProperty:error:", *MEMORY[0x1E4F76000], 0), "unsignedLongLongValue") == 0;
  }
  return result;
}

uint64_t FigAudioSessionClockCreateFromClockConfigurationAndExistingAVAudioSession(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v8 = (void *)MEMORY[0x199711A30]();
  if (FigCFDictionaryGetInt32IfPresent()
    && FigCFDictionaryGetInt32IfPresent()
    && FigAudioSessionClockConfigurationCanUseAVAudioSessionToCreateClock(a2, a3))
  {
    uint64_t v9 = FigAudioSessionClockCreateForAVAudioSession(a1, 0, 0, a4);
  }
  else
  {
    uint64_t v9 = FigSignalErrorAt();
  }
  uint64_t v10 = v9;
  return v10;
}

uint64_t FigAudioSessionClockCreateFromClockConfigurationAndAuditToken(uint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  uint64_t v7 = (void *)MEMORY[0x199711A30]();
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  if ((FigServer_IsMediaplaybackd()
     || FigServer_IsMediaserverd()
     || FigServer_IsCameracaptured())
    && FigCFDictionaryGetInt32IfPresent()
    && FigCFDictionaryGetInt32IfPresent())
  {
    long long v8 = a3[1];
    v12[0] = *a3;
    v12[1] = v8;
    uint64_t v9 = FigAudioSessionCreateWithAVAudioSessionSiblingForAudioSessionID(a1, HIDWORD(v14), v12, @"FigAudioSessionClock", &v13);
    if (!v9) {
      uint64_t v9 = FigAudioSessionClockCreate(a1, v13, v14, a4);
    }
  }
  else
  {
    uint64_t v9 = FigSignalErrorAt();
  }
  uint64_t v10 = v9;
  return v10;
}

uint64_t FigAudioSessionClockCreateForSharedAudioSession(uint64_t a1, int a2, void *a3)
{
  CFTypeRef v6 = (void *)MEMORY[0x199711A30]();
  uint64_t v7 = FigAudioSessionClockCreateForAVAudioSession(a1, (void *)[MEMORY[0x1E4F4E9F0] sharedInstance], a2, a3);
  return v7;
}

CFStringRef audioSessionClock_CopyDebugDesc(const void *a1)
{
  CFAllocatorRef v1 = CFGetAllocator(a1);

  return CFStringCreateWithFormat(v1, 0, @"AudioSessionClock");
}

void audioSessionClock_Finalize()
{
  uint64_t DerivedStorage = FigDerivedClockGetDerivedStorage();

  *(void *)(DerivedStorage + 16) = 0;
  CFAllocatorRef v1 = *(const void **)(DerivedStorage + 8);
  if (v1)
  {
    CFRelease(v1);
    *(void *)(DerivedStorage + 8) = 0;
  }
}

BOOL audioSessionClock_MightDrift()
{
  uint64_t DerivedStorage = FigDerivedClockGetDerivedStorage();
  return *(void *)(DerivedStorage + 16) != *(void *)(FigDerivedClockGetDerivedStorage() + 16);
}

double audioSessionClock_GetRate(uint64_t a1)
{
  double v3 = 1.0;
  int RateAndNanosecondTimeAndHostTime = audioSessionClock_getRateAndNanosecondTimeAndHostTime(a1, &v3, 0, 0);
  double result = v3;
  if (RateAndNanosecondTimeAndHostTime) {
    return 1.0;
  }
  return result;
}

uint64_t audioSessionClock_GetAnchorTime(uint64_t a1, CMTime *a2, CMTime *a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  CMTime v22 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  CMTime v21 = v22;
  uint64_t hostTime = 0;
  unint64_t v20 = 0;
  uint64_t DerivedStorage = (void *)FigDerivedClockGetDerivedStorage();
  uint64_t RateAndNanosecondTimeAndHostTime = audioSessionClock_getRateAndNanosecondTimeAndHostTime(a1, 0, &v20, &hostTime);
  if (RateAndNanosecondTimeAndHostTime)
  {
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  else
  {
    if (DerivedStorage[6])
    {
      unint64_t v8 = DerivedStorage[5];
      unint64_t v9 = v8 <= v20 ? v20 - v8 : v8 - v20;
      if (v9 - FigHostTimeToNanoseconds() - 100000001 <= 0xFFFFFFFFF4143DFELL)
      {
        CFTypeRef cf = 0;
        uint64_t v10 = DerivedStorage[1];
        if (v10)
        {
          uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v11)
          {
            uint64_t v12 = *(void (**)(uint64_t, void, void, CFTypeRef *))(v11 + 48);
            if (v12) {
              v12(v10, *MEMORY[0x1E4F75FA8], *MEMORY[0x1E4F1CF80], &cf);
            }
          }
        }
        uint64_t v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        if (cf) {
          CFRelease(cf);
        }
      }
    }
    uint64_t v15 = hostTime;
    int64_t v14 = v20;
    DerivedStorage[5] = v20;
    DerivedStorage[6] = v15;
    CMTimeMake(&v22, v14, 1000000000);
    CMClockMakeHostTimeFromSystemUnits(&v21, hostTime);
    if (a2) {
      *a2 = v22;
    }
    if (a3) {
      *a3 = v21;
    }
  }
  return RateAndNanosecondTimeAndHostTime;
}

uint64_t audioSessionClock_getRateAndNanosecondTimeAndHostTime(uint64_t a1, void *a2, void *a3, void *a4)
{
  BOOL v7 = a2 != 0;
  uint64_t DerivedStorage = FigDerivedClockGetDerivedStorage();
  int v9 = 4 * v7;
  if (a3) {
    int v9 = (4 * v7) | 0x20;
  }
  if (a4) {
    int v10 = v9 | 2;
  }
  else {
    int v10 = v9;
  }
  uint64_t v11 = *(void **)(DerivedStorage + 16);
  if (v11)
  {
    [v11 currentPresentationTime];
    int v12 = v17;
    uint64_t v13 = v18;
    uint64_t v14 = v19;
    uint64_t v15 = v20;
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t v13 = 0;
    int v12 = 0;
    uint64_t v15 = 0;
  }
  if ((v10 & ~v12) != 0) {
    return FigSignalErrorAt();
  }
  if (a2) {
    *a2 = v15;
  }
  if (a3) {
    *a3 = v14;
  }
  uint64_t result = 0;
  if (a4) {
    *a4 = v13;
  }
  return result;
}

uint64_t FigCDSAVFLayoutRegionCreate(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = 0;
  if (!a2) {
    return 4294950096;
  }
  uint64_t v18 = 0;
  MEMORY[0x19970EE10](&FigCDSAVFLayoutRegionGetClassID_sRegisterFigCDSAVFLayoutRegionBaseTypeOnce, RegisterFigCDSAVFLayoutRegionBaseType);
  uint64_t result = CMDerivedObjectCreate();
  if (!result)
  {
    uint64_t v7 = v18;
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    *(void *)(DerivedStorage + 8) = a2;
    *(void *)(DerivedStorage + 16) = a1;
    *(unsigned char *)(DerivedStorage + 40) = 1;
    uint64_t v17 = 0;
    FigCDSFreeLayoutRegionCreate(a1, a2, &v17);
    uint64_t v9 = v17;
    *(void *)uint64_t DerivedStorage = v17;
    FigCDSNodeProtocolGetProtocolID();
    Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
    if (ProtocolVTable)
    {
      uint64_t v11 = *(void *)(ProtocolVTable + 16);
      if (v11)
      {
        int v12 = *(void (**)(uint64_t, uint64_t))(v11 + 200);
        if (v12) {
          v12(v9, 1);
        }
      }
    }
    uint64_t v13 = *(void *)DerivedStorage;
    FigCDSNodeProtocolGetProtocolID();
    uint64_t v14 = CMBaseObjectGetProtocolVTable();
    if (v14)
    {
      uint64_t v15 = *(void *)(v14 + 16);
      if (v15)
      {
        id v16 = *(void (**)(uint64_t, uint64_t))(v15 + 216);
        if (v16) {
          v16(v13, 1);
        }
      }
    }
    uint64_t result = 0;
    *a3 = v7;
  }
  return result;
}

void FigCDSAVFLayoutRegionFinalize()
{
  CFAllocatorRef v0 = *(const void **)CMBaseObjectGetDerivedStorage();
  if (v0)
  {
    CFRelease(v0);
  }
}

__CFString *FigCDSAVFLayoutRegionCopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"\tFigCDSAVFLayoutRegion: <%p>", a1);
  return Mutable;
}

__CFString *FigCDSAVFLayoutRegion_FigCDSNodeProtocol_CopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"\tFigCDSAVFLayoutRegion <FigCDSNodeProtocol> on <%p>", a1);
  return Mutable;
}

uint64_t FigCDSAVFLayoutRegion_FigCDSNodeProtocol_SetParentNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  CFTypeRef v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSAVFLayoutRegion_FigCDSNodeProtocol_GetParentNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  CFTypeRef v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 16);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSAVFLayoutRegion_FigCDSNodeProtocol_GetChildren(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  CFTypeRef v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 24);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSAVFLayoutRegion_FigCDSNodeProtocol_HasChildNode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v7 = *(void *)(ProtocolVTable + 16);
  if (!v7) {
    return 4294954508;
  }
  unint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 32);
  if (!v8) {
    return 4294954514;
  }

  return v8(v5, a2, a3);
}

uint64_t FigCDSAVFLayoutRegion_FigCDSNodeProtocol_AddChildNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  CFTypeRef v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 40);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSAVFLayoutRegion_FigCDSNodeProtocol_RemoveChildNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  CFTypeRef v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 48);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSAVFLayoutRegion_FigCDSNodeProtocol_RemovelAllChildrenNodes()
{
  uint64_t v0 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v2 = *(void *)(ProtocolVTable + 16);
  if (!v2) {
    return 4294954508;
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v2 + 56);
  if (!v3) {
    return 4294954514;
  }

  return v3(v0);
}

uint64_t FigCDSAVFLayoutRegion_FigCDSNodeProtocol_SetViewport(double a1, double a2, double a3, double a4)
{
  uint64_t v8 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v14 = *(void *)(ProtocolVTable + 16);
  if (!v14) {
    return 4294954508;
  }
  uint64_t v15 = *(uint64_t (**)(uint64_t, __n128, __n128, __n128, __n128))(v14 + 64);
  if (!v15) {
    return 4294954514;
  }
  v10.n128_f64[0] = a1;
  v11.n128_f64[0] = a2;
  v12.n128_f64[0] = a3;
  v13.n128_f64[0] = a4;

  return v15(v8, v10, v11, v12, v13);
}

uint64_t FigCDSAVFLayoutRegion_FigCDSNodeProtocol_GetViewport(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  CFTypeRef v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 72);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSAVFLayoutRegion_FigCDSNodeProtocol_SetCDSBounds(uint64_t a1, long long *a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  long long v8 = *a2;
  long long v9 = a2[1];
  long long v10 = a2[2];
  long long v11 = a2[3];
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  CFTypeRef v6 = *(uint64_t (**)(uint64_t, _OWORD *))(v5 + 80);
  if (!v6) {
    return 4294954514;
  }
  v12[0] = v8;
  v12[1] = v9;
  _OWORD v12[2] = v10;
  v12[3] = v11;
  return v6(v3, v12);
}

uint64_t FigCDSAVFLayoutRegion_FigCDSNodeProtocol_GetCDSBounds(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  CFTypeRef v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 88);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSAVFLayoutRegion_FigCDSNodeProtocol_SetCGBounds(double a1, double a2, double a3, double a4)
{
  uint64_t v8 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v14 = *(void *)(ProtocolVTable + 16);
  if (!v14) {
    return 4294954508;
  }
  uint64_t v15 = *(uint64_t (**)(uint64_t, __n128, __n128, __n128, __n128))(v14 + 96);
  if (!v15) {
    return 4294954514;
  }
  v10.n128_f64[0] = a1;
  v11.n128_f64[0] = a2;
  v12.n128_f64[0] = a3;
  v13.n128_f64[0] = a4;

  return v15(v8, v10, v11, v12, v13);
}

uint64_t FigCDSAVFLayoutRegion_FigCDSNodeProtocol_GetCGBounds(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  CFTypeRef v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 104);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSAVFLayoutRegion_FigCDSNodeProtocol_SetCGSize(double a1, double a2)
{
  uint64_t v4 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v8 = *(void *)(ProtocolVTable + 16);
  if (!v8) {
    return 4294954508;
  }
  long long v9 = *(uint64_t (**)(uint64_t, __n128, __n128))(v8 + 112);
  if (!v9) {
    return 4294954514;
  }
  v6.n128_f64[0] = a1;
  v7.n128_f64[0] = a2;

  return v9(v4, v6, v7);
}

uint64_t FigCDSAVFLayoutRegion_FigCDSNodeProtocol_GetCGSize(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 120);
  if (!v6) {
    return 4294954508;
  }

  return v6(v3, a2);
}

uint64_t FigCDSAVFLayoutRegion_FigCDSNodeProtocol_SetCGOrigin(double a1, double a2)
{
  uint64_t v4 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v8 = *(void *)(ProtocolVTable + 16);
  if (!v8) {
    return 4294954508;
  }
  long long v9 = *(uint64_t (**)(uint64_t, __n128, __n128))(v8 + 128);
  if (!v9) {
    return 4294954514;
  }
  v6.n128_f64[0] = a1;
  v7.n128_f64[0] = a2;

  return v9(v4, v6, v7);
}

uint64_t FigCDSAVFLayoutRegion_FigCDSNodeProtocol_GetCGOrigin(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 136);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSAVFLayoutRegion_FigCDSNodeProtocol_PurgeImageCache()
{
  uint64_t v0 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v2 = *(void *)(ProtocolVTable + 16);
  if (!v2) {
    return 4294954508;
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v2 + 144);
  if (!v3) {
    return 4294954514;
  }

  return v3(v0);
}

uint64_t FigCDSAVFLayoutRegion_FigCDSNodeProtocol_SetImageCache(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 152);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSAVFLayoutRegion_FigCDSNodeProtocol_GetImageCache(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 160);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSAVFLayoutRegion_FigCDSNodeProtocol_GetImageCacheWidth(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 168);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSAVFLayoutRegion_FigCDSNodeProtocol_GetImageCacheHeight(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 176);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSAVFLayoutRegion_FigCDSNodeProtocol_AllocateImageBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v9 = *(void *)(ProtocolVTable + 16);
  if (!v9) {
    return 4294954508;
  }
  __n128 v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 184);
  if (!v10) {
    return 4294954514;
  }

  return v10(v7, a2, a3, a4);
}

uint64_t FigCDSAVFLayoutRegion_FigCDSNodeProtocol_GetImageBuffer(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 192);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSAVFLayoutRegion_FigCDSNodeProtocol_SetNeedRedraw(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 200);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSAVFLayoutRegion_FigCDSNodeProtocol_GetNeedRedraw(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 208);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSAVFLayoutRegion_FigCDSNodeProtocol_SetNeedLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 216);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSAVFLayoutRegion_FigCDSNodeProtocol_GetNeedLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 224);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSAVFLayoutRegion_FigCDSNodeProtocol_HasActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 232);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSAVFLayoutRegion_FigCDSNodeProtocol_SetZOrder(double a1)
{
  uint64_t v2 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, __n128))(v5 + 240);
  if (!v6) {
    return 4294954514;
  }
  v4.n128_f64[0] = a1;

  return v6(v2, v4);
}

uint64_t FigCDSAVFLayoutRegion_FigCDSNodeProtocol_GetZOrder(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 248);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSAVFLayoutRegion_FigCDSNodeProtocol_ResetNodeTree()
{
  uint64_t v0 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v2 = *(void *)(ProtocolVTable + 16);
  if (!v2) {
    return 4294954508;
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v2 + 256);
  if (!v3) {
    return 4294954514;
  }

  return v3(v0);
}

uint64_t FigCDSAVFLayoutRegion_FigCDSNodeProtocol_Draw(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (*(void *)(a2 + 272))
  {
    CGSize v5 = *(CGSize *)(MEMORY[0x1E4F1DB20] + 16);
    v25.origiCFIndex n = (CGPoint)*MEMORY[0x1E4F1DB20];
    v25.CGSize size = v5;
    FigCDSNodeProtocolGetProtocolID();
    Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
    if (ProtocolVTable)
    {
      uint64_t v7 = *(void *)(ProtocolVTable + 16);
      if (v7)
      {
        uint64_t v8 = *(void (**)(const void *, CGRect *))(v7 + 104);
        if (v8) {
          v8(a1, &v25);
        }
      }
    }
    CFDictionaryRef v9 = *(const __CFDictionary **)(a2 + 272);
    if (v9)
    {
      CFStringRef Value = CFDictionaryGetValue(v9, a1);
      double MidX = CGRectGetMidX(v25);
      double MidY = CGRectGetMidY(v25);
      FigCDSOutputNodeProtocolGetProtocolID();
      uint64_t v13 = CMBaseObjectGetProtocolVTable();
      if (v13)
      {
        uint64_t v14 = *(void *)(v13 + 16);
        if (v14)
        {
          uint64_t v15 = *(void (**)(const void *, double, double))(v14 + 72);
          if (v15) {
            v15(Value, MidX, MidY);
          }
        }
      }
      CGSize size = v25.size;
      FigCDSOutputNodeProtocolGetProtocolID();
      uint64_t v17 = CMBaseObjectGetProtocolVTable();
      if (v17)
      {
        uint64_t v18 = *(void *)(v17 + 16);
        if (v18)
        {
          uint64_t v19 = *(void (**)(const void *, double, double))(v18 + 88);
          if (v19) {
            v19(Value, size.width, size.height);
          }
        }
      }
    }
  }
  uint64_t v20 = *DerivedStorage;
  FigCDSNodeProtocolGetProtocolID();
  uint64_t v21 = CMBaseObjectGetProtocolVTable();
  if (!v21) {
    return 4294954508;
  }
  uint64_t v22 = *(void *)(v21 + 16);
  if (!v22) {
    return 4294954508;
  }
  uint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t))(v22 + 264);
  if (v23) {
    return v23(v20, a2);
  }
  else {
    return 4294954514;
  }
}

uint64_t FigCDSAVFLayoutRegion_FigCDSNodeProtocol_Layout(uint64_t a1, double *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  v278[0] = 0;
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = (const char *)CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    uint64_t v6 = *((void *)ProtocolVTable + 2);
    if (v6 && (uint64_t v7 = *(void (**)(uint64_t, const char **))(v6 + 24)) != 0)
    {
      v7(a1, v278);
      Protocoluint64_t VTable = v278[0];
    }
    else
    {
      Protocoluint64_t VTable = 0;
    }
  }
  CFIndex Count = CFArrayGetCount((CFArrayRef)ProtocolVTable);
  if (Count >= 1)
  {
    CFDictionaryRef v9 = (const void *)*MEMORY[0x1E4F1F720];
    __n128 v10 = (const void *)*MEMORY[0x1E4F1F700];
    CFStringRef v11 = (const __CFString *)*MEMORY[0x1E4F1F9B8];
    __n128 v12 = (const void *)*MEMORY[0x1E4F1F668];
    CFStringRef theString2 = (const __CFString *)*MEMORY[0x1E4F1F9C0];
    CFMutableDictionaryRef v249 = (void *)*MEMORY[0x1E4F1F660];
    double v13 = *MEMORY[0x1E4F1DAD8];
    double v14 = *(double *)(MEMORY[0x1E4F1DAD8] + 8);
    CFIndex v266 = (void *)*MEMORY[0x1E4F1F5B8];
    CFStringRef v251 = (const __CFString *)*MEMORY[0x1E4F1F768];
    CFStringRef v250 = (const __CFString *)*MEMORY[0x1E4F1F770];
    unint64_t v15 = Count + 1;
    CFArrayRef v264 = (void *)*MEMORY[0x1E4F1F5C0];
    CFStringRef v255 = (const __CFString *)*MEMORY[0x1E4F1F788];
    CFStringRef v256 = (const __CFString *)*MEMORY[0x1E4F1F780];
    double v16 = 0.5;
    do
    {
      uint64_t ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v278[0], v15 - 2);
      CFArrayRef v277 = 0;
      FigCDSBaseProtocolGetProtocolID();
      uint64_t v18 = CMBaseObjectGetProtocolVTable();
      if (!v18
        || (uint64_t v19 = *(void *)(v18 + 16)) == 0
        || (uint64_t v20 = *(unsigned int (**)(const void *, const char **))(v19 + 8)) == 0
        || v20(ValueAtIndex, &v277))
      {
LABEL_126:
        FigSignalErrorAt();
        break;
      }
      if (v277 && !strcmp(v277, "FigCDSCaption"))
      {
        int v276 = 0;
        FigCDSCaptionProtocolGetProtocolID();
        uint64_t v21 = CMBaseObjectGetProtocolVTable();
        if (!v21) {
          goto LABEL_126;
        }
        uint64_t v22 = *(void *)(v21 + 16);
        if (!v22) {
          goto LABEL_126;
        }
        uint64_t v23 = *(unsigned int (**)(const void *, int *))(v22 + 48);
        if (!v23 || v23(ValueAtIndex, &v276)) {
          goto LABEL_126;
        }
        if (v276 == 4)
        {
          double keya = v12;
          rect.origin.CGFloat x = 0.0;
          FigCDSCaptionProtocolGetProtocolID();
          uint64_t v42 = CMBaseObjectGetProtocolVTable();
          if (v42)
          {
            uint64_t v43 = *(void *)(v42 + 16);
            if (v43)
            {
              xpc_object_t v44 = *(void (**)(const void *, CGRect *))(v43 + 16);
              if (v44) {
                v44(ValueAtIndex, &rect);
              }
            }
          }
          valuePtr.CGFloat width = 50.0;
          double v275 = 100.0;
          int v269 = 0;
          uint64_t v246 = v9;
          CFStringRef Value = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)&rect.origin.x, v9);
          CFIndex v244 = v10;
          CFNumberRef v46 = (const __CFNumber *)CFDictionaryGetValue(*(CFDictionaryRef *)&rect.origin.x, v10);
          if (Value)
          {
            if (CFStringCompare(Value, v11, 0))
            {
              valuePtr.CGFloat width = 100.0;
              goto LABEL_41;
            }
            valuePtr.CGFloat width = 0.0;
            if (!v46)
            {
LABEL_43:
              CFNumberRef v47 = (const __CFNumber *)CFDictionaryGetValue(*(CFDictionaryRef *)&rect.origin.x, keya);
              CFNumberRef v48 = v47;
              double v275 = 100.0;
              if (Value)
              {
                CFComparisonResult v49 = CFStringCompare(Value, v11, 0);
                double v50 = 100.0;
                if (v49) {
                  double v50 = 0.0;
                }
                double v275 = v50;
                if (v48)
                {
                  CFNumberGetValue(v48, kCFNumberCGFloatType, &v275);
                  if (CFEqual(Value, theString2))
                  {
                    char v51 = 0;
                    double v275 = 100.0 - v275;
                    goto LABEL_66;
                  }
LABEL_51:
                  char v51 = 0;
LABEL_66:
                  char v53 = 1;
                  goto LABEL_67;
                }
              }
              else if (v47)
              {
                CFNumberGetValue(v47, kCFNumberCGFloatType, &v275);
                goto LABEL_51;
              }
              CFNumberRef v52 = (const __CFNumber *)CFDictionaryGetValue(*(CFDictionaryRef *)&rect.origin.x, v249);
              if (!v52)
              {
                char v51 = 1;
                goto LABEL_66;
              }
              CFNumberGetValue(v52, kCFNumberIntType, &v269);
              char v53 = 0;
              char v51 = 1;
LABEL_67:
              double v63 = FCRGetVideoPresentationBounds(a2[42], a2[43], a2[38], a2[39], a2[40], a2[41]);
              CGFloat v65 = v64;
              double v67 = v66;
              double v69 = v68;
              CGSize v70 = *(CGSize *)(MEMORY[0x1E4F1DB20] + 16);
              v270.origiCFIndex n = (CGPoint)*MEMORY[0x1E4F1DB20];
              v270.CGSize size = v70;
              FigCDSNodeProtocolGetProtocolID();
              uint64_t v71 = CMBaseObjectGetProtocolVTable();
              if (v71)
              {
                uint64_t v72 = *(void *)(v71 + 16);
                if (v72)
                {
                  char v73 = *(void (**)(const void *, CGRect *))(v72 + 104);
                  if (v73) {
                    v73(ValueAtIndex, &v270);
                  }
                }
              }
              if (Value)
              {
                if (v53)
                {
                  double v74 = v67 * (v275 / 100.0);
                  CFStringRef v75 = v255;
                }
                else
                {
                  float v268 = 0.0;
                  FigCDSCaptionProtocolGetProtocolID();
                  uint64_t v80 = CMBaseObjectGetProtocolVTable();
                  if (v80)
                  {
                    uint64_t v81 = *(void *)(v80 + 16);
                    if (v81)
                    {
                      CFIndex v82 = *(void (**)(const void *, float *))(v81 + 72);
                      if (v82) {
                        v82(ValueAtIndex, &v268);
                      }
                    }
                  }
                  double v74 = (double)v269 * v268;
                  CFStringRef v75 = v255;
                }
                double v79 = v69 * ((100.0 - valuePtr.width) / 100.0);
              }
              else
              {
                if (v51)
                {
                  float v268 = 0.0;
                  FigCDSCaptionProtocolGetProtocolID();
                  uint64_t v76 = CMBaseObjectGetProtocolVTable();
                  CFStringRef v75 = v255;
                  if (v76)
                  {
                    uint64_t v77 = *(void *)(v76 + 16);
                    if (v77)
                    {
                      unsigned int v78 = *(void (**)(const void *, float *))(v77 + 72);
                      if (v78) {
                        v78(ValueAtIndex, &v268);
                      }
                    }
                  }
                  double v79 = (double)v269 * v268;
                }
                else
                {
                  double v79 = v69 * ((100.0 - v275) / 100.0);
                  CFStringRef v75 = v255;
                }
                double v74 = v67 * (valuePtr.width / 100.0);
              }
              CFStringRef v83 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)&rect.origin.x, v266);
              double v242 = v14;
              double v243 = v13;
              if (v83)
              {
                CFStringRef v84 = v83;
                if (CFStringCompare(v83, v251, 0))
                {
                  if (CFStringCompare(v84, v250, 0)) {
                    goto LABEL_91;
                  }
                  double v87 = v63;
                  CGFloat v88 = v65;
                  double v89 = v67;
                  double v90 = v69;
                  if (Value) {
                    double v13 = v74 + CGRectGetMinX(*(CGRect *)&v87) + v270.size.width * -0.5;
                  }
                  else {
                    double v14 = v79 + CGRectGetMinY(*(CGRect *)&v87) + v270.size.height * -0.5;
                  }
                  goto LABEL_102;
                }
                if (!Value)
                {
                  v284.origin.CGFloat x = v63;
                  v284.origin.CGFloat y = v65;
                  v284.size.CGFloat width = v67;
                  v284.size.CGFloat height = v69;
                  double v14 = v79 + CGRectGetMinY(v284);
                  goto LABEL_102;
                }
                CFComparisonResult v86 = CFStringCompare(Value, theString2, 0);
                v282.origin.CGFloat x = v63;
                v282.origin.CGFloat y = v65;
                v282.size.CGFloat width = v67;
                v282.size.CGFloat height = v69;
                double v13 = v74 + CGRectGetMinX(v282);
                if (v86) {
LABEL_96:
                }
                  double v13 = v13 - v270.size.width;
              }
              else
              {
LABEL_91:
                if (!Value)
                {
                  v283.origin.CGFloat x = v63;
                  v283.origin.CGFloat y = v65;
                  v283.size.CGFloat width = v67;
                  v283.size.CGFloat height = v69;
                  double v14 = v79 + CGRectGetMinY(v283) - v270.size.height;
                  goto LABEL_102;
                }
                CFComparisonResult v85 = CFStringCompare(Value, theString2, 0);
                v281.origin.CGFloat x = v63;
                v281.origin.CGFloat y = v65;
                v281.size.CGFloat width = v67;
                v281.size.CGFloat height = v69;
                double v13 = v74 + CGRectGetMinX(v281);
                if (v85 == kCFCompareEqualTo) {
                  goto LABEL_96;
                }
              }
LABEL_102:
              CFStringRef v91 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)&rect.origin.x, v264);
              if (v91) {
                CFStringRef v92 = v91;
              }
              else {
                CFStringRef v92 = v75;
              }
              if (CFStringCompare(v92, v256, 0))
              {
                if (CFStringCompare(v92, v75, 0))
                {
                  __n128 v10 = v244;
                  CFDictionaryRef v9 = v246;
                  double v93 = v63;
                  CGFloat v94 = v65;
                  double v95 = v67;
                  double v96 = v69;
                  if (Value) {
                    double v14 = v79 + CGRectGetMinY(*(CGRect *)&v93) - v270.size.height;
                  }
                  else {
                    double v13 = v74 + CGRectGetMinX(*(CGRect *)&v93);
                  }
                }
                else
                {
                  __n128 v10 = v244;
                  CFDictionaryRef v9 = v246;
                  double v101 = v63;
                  CGFloat v102 = v65;
                  double v103 = v67;
                  double v104 = v69;
                  if (Value) {
                    double v14 = v79 + CGRectGetMinY(*(CGRect *)&v101) + v270.size.height * -0.5;
                  }
                  else {
                    double v13 = v74 + CGRectGetMinX(*(CGRect *)&v101) + v270.size.width * -0.5;
                  }
                }
              }
              else
              {
                double v97 = v63;
                CGFloat v98 = v65;
                double v99 = v67;
                double v100 = v69;
                if (Value) {
                  double v14 = v79 + CGRectGetMinY(*(CGRect *)&v97);
                }
                else {
                  double v13 = v74 + CGRectGetMinX(*(CGRect *)&v97) - v270.size.width;
                }
                __n128 v10 = v244;
                CFDictionaryRef v9 = v246;
              }
              double v16 = 0.5;
              FigCDSNodeProtocolGetProtocolID();
              uint64_t v105 = CMBaseObjectGetProtocolVTable();
              __n128 v12 = keya;
              if (v105)
              {
                uint64_t v106 = *(void *)(v105 + 16);
                if (v106)
                {
                  CGRect v107 = *(void (**)(const void *, double, double))(v106 + 128);
                  if (v107) {
                    v107(ValueAtIndex, v13, v14);
                  }
                }
              }
              FigCDSNodeProtocolGetProtocolID();
              uint64_t v108 = CMBaseObjectGetProtocolVTable();
              if (v108)
              {
                uint64_t v109 = *(void *)(v108 + 16);
                if (v109)
                {
                  CGRect v110 = *(void (**)(const void *, uint64_t))(v109 + 216);
                  if (v110) {
                    v110(ValueAtIndex, 1);
                  }
                }
              }
              double v14 = v242;
              double v13 = v243;
              goto LABEL_14;
            }
          }
          else
          {
LABEL_41:
            if (!v46) {
              goto LABEL_43;
            }
          }
          CFNumberGetValue(v46, kCFNumberCGFloatType, &valuePtr);
          goto LABEL_43;
        }
        if (v276 == 3)
        {
          double v275 = 0.0;
          FigCDSCaptionProtocolGetProtocolID();
          uint64_t v24 = CMBaseObjectGetProtocolVTable();
          if (!v24) {
            goto LABEL_126;
          }
          uint64_t v25 = *(void *)(v24 + 16);
          if (!v25) {
            goto LABEL_126;
          }
          long long v26 = *(unsigned int (**)(const void *, double *))(v25 + 16);
          if (!v26 || v26(ValueAtIndex, &v275)) {
            goto LABEL_126;
          }
          CGSize v245 = *(CGSize *)(MEMORY[0x1E4F1DB20] + 16);
          *(_OWORD *)keCGFloat y = *MEMORY[0x1E4F1DB20];
          rect.origiCFIndex n = (CGPoint)*MEMORY[0x1E4F1DB20];
          rect.CGSize size = v245;
          CFDictionaryRef v27 = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)&v275, @"textbox");
          if (v27) {
            CGRectMakeWithDictionaryRepresentation(v27, &rect);
          }
          CGSize valuePtr = *(CGSize *)key;
          CGSize v273 = v245;
          FigCDSNodeProtocolGetProtocolID();
          uint64_t v28 = CMBaseObjectGetProtocolVTable();
          if (!v28) {
            goto LABEL_126;
          }
          uint64_t v29 = *(void *)(v28 + 16);
          if (!v29) {
            goto LABEL_126;
          }
          uint64_t v30 = *(unsigned int (**)(const void *, CGSize *))(v29 + 104);
          if (!v30 || v30(ValueAtIndex, &valuePtr)) {
            goto LABEL_126;
          }
          if (CGRectIsNull(rect))
          {
            v279.origin.CGFloat x = FCRGetVideoPresentationBounds(a2[42], a2[43], a2[38], a2[39], a2[40], a2[41]);
            CGFloat x = v279.origin.x;
            CGFloat y = v279.origin.y;
            CGFloat width = v279.size.width;
            double v34 = v13;
            CGFloat height = v279.size.height;
            double v36 = v14;
            CGFloat v37 = v279.size.height * 0.15;
            double MidX = CGRectGetMidX(v279);
            v280.origin.CGFloat x = x;
            v280.origin.CGFloat y = y;
            v280.size.CGFloat width = width;
            v280.size.CGFloat height = height;
            double v13 = v34;
            CGFloat MinY = CGRectGetMinY(v280);
            CGFloat v40 = v37 * 0.5;
            double v14 = v36;
            double v16 = 0.5;
            double v41 = MinY + v40;
          }
          else
          {
            CGFloat v54 = rect.origin.x + rect.size.width * v16;
            CGFloat v55 = rect.origin.y + rect.size.height * v16;
            long long v271 = 0u;
            memset(&v270, 0, sizeof(v270));
            FCRGetTransform((uint64_t)&v270, a2[42], a2[43], a2[40], a2[41]);
            double MidX = *(double *)&v271 + v55 * v270.size.width + v270.origin.x * v54;
            double v41 = a2[41] - (*((double *)&v271 + 1) + v55 * v270.size.height + v270.origin.y * v54);
          }
          CGSize v56 = v273;
          FigCDSNodeProtocolGetProtocolID();
          uint64_t v57 = CMBaseObjectGetProtocolVTable();
          if (v57)
          {
            uint64_t v58 = *(void *)(v57 + 16);
            if (v58)
            {
              uint64_t v59 = *(void (**)(const void *, double, double))(v58 + 128);
              if (v59) {
                v59(ValueAtIndex, MidX - v56.width * v16, v41 - v56.height * v16);
              }
            }
          }
          FigCDSNodeProtocolGetProtocolID();
          uint64_t v60 = CMBaseObjectGetProtocolVTable();
          if (v60)
          {
            uint64_t v61 = *(void *)(v60 + 16);
            if (v61)
            {
              uint64_t v62 = *(void (**)(const void *, uint64_t))(v61 + 216);
              if (v62) {
                v62(ValueAtIndex, 1);
              }
            }
          }
        }
      }
LABEL_14:
      --v15;
    }
    while (v15 > 1);
  }
  if (*(unsigned char *)(DerivedStorage + 40))
  {
    LOBYTE(v277) = 0;
    valuePtr.CGFloat width = 0.0;
    FigCDSNodeProtocolGetProtocolID();
    uint64_t v111 = CMBaseObjectGetProtocolVTable();
    if (v111
      && (uint64_t v112 = *(void *)(v111 + 16)) != 0
      && (CGRect v113 = *(unsigned int (**)(uint64_t, CGSize *))(v112 + 24)) != 0
      && !v113(a1, &valuePtr))
    {
      CFIndex v114 = CFArrayGetCount(*(CFArrayRef *)&valuePtr.width);
      if (v114 >= 2)
      {
        CFIndex v115 = v114;
        CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0);
        if (Mutable)
        {
          CGRect v117 = Mutable;
          unint64_t v118 = v115 + 1;
          CGRect v119 = (CGPoint *)MEMORY[0x1E4F1DAD8];
          CGRect v120 = (CGPoint *)MEMORY[0x1E4F1DB30];
          do
          {
            CGRect v121 = CFArrayGetValueAtIndex(*(CFArrayRef *)&valuePtr.width, v118 - 2);
            v278[0] = 0;
            FigCDSBaseProtocolGetProtocolID();
            uint64_t v122 = CMBaseObjectGetProtocolVTable();
            if (!v122
              || (uint64_t v123 = *(void *)(v122 + 16)) == 0
              || (CFNumberRef v124 = *(unsigned int (**)(const void *, const char **))(v123 + 8)) == 0
              || v124(v121, v278))
            {
              FigSignalErrorAt();
              goto LABEL_262;
            }
            if (v278[0] && !strcmp(v278[0], "FigCDSCaption"))
            {
              v270.origiCFIndex n = *v119;
              rect.origiCFIndex n = *v120;
              FigCDSNodeProtocolGetProtocolID();
              uint64_t v125 = CMBaseObjectGetProtocolVTable();
              if (v125)
              {
                uint64_t v126 = *(void *)(v125 + 16);
                if (v126)
                {
                  CGFloat v127 = *(void (**)(const void *, CGRect *))(v126 + 120);
                  if (v127) {
                    v127(v121, &rect);
                  }
                }
              }
              FigCDSNodeProtocolGetProtocolID();
              uint64_t v128 = CMBaseObjectGetProtocolVTable();
              if (v128)
              {
                uint64_t v129 = *(void *)(v128 + 16);
                if (v129)
                {
                  CGFloat v130 = *(void (**)(const void *, CGRect *))(v129 + 136);
                  if (v130) {
                    v130(v121, &v270);
                  }
                }
              }
              origiCFIndex n = v270.origin;
              CGFloat v132 = rect.origin.x;
              CGFloat v133 = rect.origin.y;
              TextObject = FigCaptionRendererLayoutDecouple_CreateTextObject(v121);
              if (!TextObject) {
                goto LABEL_262;
              }
              *(CGPoint *)TextObject = origin;
              *((CGFloat *)TextObject + 2) = v132;
              *((CGFloat *)TextObject + 3) = v133;
              CFArrayAppendValue(v117, TextObject);
            }
            --v118;
          }
          while (v118 > 1);
          CGSize v135 = *(CGSize *)(MEMORY[0x1E4F1DB20] + 16);
          v270.origiCFIndex n = (CGPoint)*MEMORY[0x1E4F1DB20];
          v270.CGSize size = v135;
          FigCDSNodeProtocolGetProtocolID();
          uint64_t v136 = CMBaseObjectGetProtocolVTable();
          if (v136)
          {
            uint64_t v137 = *(void *)(v136 + 16);
            if (v137)
            {
              CFIndex v138 = *(void (**)(uint64_t, CGRect *))(v137 + 104);
              if (v138) {
                v138(a1, &v270);
              }
            }
          }
          FigCDSLayoutDecouple_Decouple(v117, (BOOL *)&v277, v270.origin.x, v270.origin.y, v270.size.width, v270.size.height);
          if ((_BYTE)v277)
          {
            CFIndex v139 = CFArrayGetCount(v117);
            if (v139 >= 1)
            {
              CFIndex v140 = v139;
              for (CFIndex i = 0; i != v140; ++i)
              {
                CFDictionaryRef v142 = (double *)CFArrayGetValueAtIndex(v117, i);
                uint64_t ReferenceNode = FigCDSLayoutDecouple_GetReferenceNode((uint64_t)v142);
                if (ReferenceNode)
                {
                  uint64_t v144 = ReferenceNode;
                  double v145 = *v142;
                  double v146 = v142[1];
                  FigCDSNodeProtocolGetProtocolID();
                  uint64_t v147 = CMBaseObjectGetProtocolVTable();
                  if (v147)
                  {
                    uint64_t v148 = *(void *)(v147 + 16);
                    if (v148)
                    {
                      CFArrayRef v149 = *(void (**)(uint64_t, double, double))(v148 + 128);
                      if (v149) {
                        v149(v144, v145, v146);
                      }
                    }
                  }
                }
              }
            }
          }
LABEL_262:
          if (CFArrayGetCount(v117) >= 1)
          {
            do
            {
              CFIndex v241 = CFArrayGetValueAtIndex(v117, 0);
              CFArrayRemoveValueAtIndex(v117, 0);
              FigCaptionRendererLayoutDecouple_ReleaseTextObject(v241);
            }
            while (CFArrayGetCount(v117) > 0);
          }
          CFRelease(v117);
        }
      }
    }
    else
    {
      FigSignalErrorAt();
    }
  }
  v278[0] = 0;
  FigCDSNodeProtocolGetProtocolID();
  uint64_t v150 = CMBaseObjectGetProtocolVTable();
  if (!v150 || (uint64_t v151 = *(void *)(v150 + 16)) == 0)
  {
LABEL_255:
    uint64_t v191 = 4294954508;
LABEL_256:
    FigSignalErrorAt();
    return v191;
  }
  CGColorRef v152 = *(uint64_t (**)(uint64_t, const char **))(v151 + 24);
  if (!v152)
  {
LABEL_258:
    uint64_t v191 = 4294954514;
    goto LABEL_256;
  }
  uint64_t v153 = v152(a1, v278);
  if (v153)
  {
LABEL_265:
    uint64_t v191 = v153;
    goto LABEL_256;
  }
  CFIndex v154 = CFArrayGetCount((CFArrayRef)v278[0]);
  if (v154 >= 1)
  {
    double v155 = (CGSize *)MEMORY[0x1E4F1DB30];
    double v156 = *MEMORY[0x1E4F1DB30];
    double v157 = *(double *)(MEMORY[0x1E4F1DB30] + 8);
    CFIndex v158 = v154 + 1;
    uint64_t v159 = MEMORY[0x1E4F1DB28];
    CGColorRef v160 = (CGPoint *)MEMORY[0x1E4F1DAD8];
    while (1)
    {
      CFIndex v161 = CFArrayGetValueAtIndex((CFArrayRef)v278[0], v158 - 2);
      CFArrayRef v277 = 0;
      FigCDSBaseProtocolGetProtocolID();
      uint64_t v162 = CMBaseObjectGetProtocolVTable();
      if (!v162) {
        goto LABEL_255;
      }
      uint64_t v163 = *(void *)(v162 + 16);
      if (!v163) {
        goto LABEL_255;
      }
      BOOL v164 = *(uint64_t (**)(const void *, const char **))(v163 + 8);
      if (!v164) {
        goto LABEL_258;
      }
      uint64_t v153 = v164(v161, &v277);
      if (v153) {
        goto LABEL_265;
      }
      if (v277 && !strcmp(v277, "FigCDSCaption"))
      {
        uint64_t v165 = CMBaseObjectGetDerivedStorage();
        CGSize v166 = *(CGSize *)(v159 + 16);
        v270.origiCFIndex n = *(CGPoint *)v159;
        v270.CGSize size = v166;
        FigCDSNodeProtocolGetProtocolID();
        uint64_t v167 = CMBaseObjectGetProtocolVTable();
        if (v167)
        {
          uint64_t v168 = *(void *)(v167 + 16);
          if (v168)
          {
            CFMutableArrayRef v169 = *(void (**)(uint64_t, CGRect *))(v168 + 104);
            if (v169) {
              v169(a1, &v270);
            }
          }
        }
        rect.origiCFIndex n = *v160;
        FigCDSNodeProtocolGetProtocolID();
        uint64_t v170 = CMBaseObjectGetProtocolVTable();
        if (v170)
        {
          uint64_t v171 = *(void *)(v170 + 16);
          if (v171)
          {
            int v172 = *(void (**)(const void *, CGRect *))(v171 + 136);
            if (v172) {
              v172(v161, &rect);
            }
          }
        }
        CGSize valuePtr = *v155;
        FigCDSNodeProtocolGetProtocolID();
        uint64_t v173 = CMBaseObjectGetProtocolVTable();
        if (v173)
        {
          uint64_t v174 = *(void *)(v173 + 16);
          if (v174)
          {
            double v175 = *(void (**)(const void *, CGSize *))(v174 + 120);
            if (v175) {
              v175(v161, &valuePtr);
            }
          }
        }
        if (valuePtr.width != v156 || valuePtr.height != v157)
        {
          double v176 = FCRGetVideoPresentationBounds(a2[42], a2[43], a2[38], a2[39], a2[40], a2[41]);
          double v265 = v177;
          CGFloat v267 = v176;
          CGFloat v179 = v178;
          CGFloat v181 = v180;
          double v183 = rect.origin.x;
          double v182 = rect.origin.y;
          CGSize v184 = valuePtr;
          LODWORD(v275) = 0;
          FigCDSCaptionProtocolGetProtocolID();
          uint64_t v185 = CMBaseObjectGetProtocolVTable();
          if (v185)
          {
            uint64_t v186 = *(void *)(v185 + 16);
            if (v186)
            {
              CFIndex v187 = *(unsigned int (**)(const void *, double *))(v186 + 48);
              if (v187)
              {
                if (!v187(v161, &v275))
                {
                  if (LODWORD(v275) != 3) {
                    goto LABEL_226;
                  }
                  int v188 = *(unsigned __int8 *)(v165 + 24);
                  v285.origin.CGFloat x = v183;
                  v285.origin.CGFloat y = v182;
                  v285.CGSize size = v184;
                  double MidY = CGRectGetMidY(v285);
                  *(void *)&v286.size.CGFloat width = v265;
                  v286.origin.CGFloat x = v267;
                  v286.origin.CGFloat y = v179;
                  v286.size.CGFloat height = v181;
                  double v189 = CGRectGetMidY(v286);
                  if (v188)
                  {
                    if (MidY <= v189)
                    {
                      *(void *)&v293.size.CGFloat width = v265;
                      v293.origin.CGFloat x = v267;
                      v293.origin.CGFloat y = v179;
                      v293.size.CGFloat height = v181;
                      double v261 = CGRectGetMinY(v293);
                      v294.origin.CGFloat x = v183;
                      v294.origin.CGFloat y = v182;
                      v294.CGSize size = v184;
                      double v262 = v261 - CGRectGetMaxY(v294);
                      double v253 = CGRectGetMinY(v270);
                      v295.origin.CGFloat x = v183;
                      v295.origin.CGFloat y = v182;
                      v295.CGSize size = v184;
                      if (v262 > v253 - CGRectGetMinY(v295))
                      {
                        *(void *)&v296.size.CGFloat width = v265;
                        v296.origin.CGFloat x = v267;
                        v296.size.CGFloat height = v181;
                        v296.origin.CGFloat y = v179;
                        double v193 = CGRectGetMinY(v296);
                        goto LABEL_213;
                      }
                      double v190 = CGRectGetMinY(v270);
LABEL_215:
                      *(double *)&CFStringRef v263 = v190;
                      v300.origin.CGFloat x = v183;
                      v300.origin.CGFloat y = v182;
                      v300.CGSize size = v184;
                      double v195 = CGRectGetMinY(v300);
                    }
                    else
                    {
                      *(void *)&v287.size.CGFloat width = v265;
                      v287.origin.CGFloat x = v267;
                      v287.origin.CGFloat y = v179;
                      v287.size.CGFloat height = v181;
                      double MaxY = CGRectGetMaxY(v287);
                      v288.origin.CGFloat x = v183;
                      v288.origin.CGFloat y = v182;
                      v288.CGSize size = v184;
                      double v259 = MaxY - CGRectGetMinY(v288);
                      double v252 = CGRectGetMaxY(v270);
                      v289.origin.CGFloat x = v183;
                      v289.origin.CGFloat y = v182;
                      v289.CGSize size = v184;
                      if (v259 < v252 - CGRectGetMaxY(v289))
                      {
                        *(void *)&v290.size.CGFloat width = v265;
                        v290.origin.CGFloat x = v267;
                        v290.size.CGFloat height = v181;
                        v290.origin.CGFloat y = v179;
                        double v190 = CGRectGetMaxY(v290);
                        goto LABEL_215;
                      }
                      double v193 = CGRectGetMaxY(v270);
LABEL_213:
                      *(double *)&CFStringRef v263 = v193;
                      v299.origin.CGFloat x = v183;
                      v299.origin.CGFloat y = v182;
                      v299.CGSize size = v184;
                      double v195 = CGRectGetMaxY(v299);
                    }
                    float v196 = *(double *)&v263 - v195;
                    double v182 = v182 + v196;
                    FigCDSNodeProtocolGetProtocolID();
                    uint64_t v197 = CMBaseObjectGetProtocolVTable();
                    if (v197)
                    {
                      uint64_t v198 = *(void *)(v197 + 16);
                      if (v198)
                      {
                        CFIndex v199 = *(void (**)(const void *, double, double))(v198 + 128);
                        if (v199) {
                          v199(v161, v183, v182);
                        }
                      }
                    }
                    FigCDSNodeProtocolGetProtocolID();
                    uint64_t v200 = CMBaseObjectGetProtocolVTable();
                    if (v200)
                    {
                      uint64_t v201 = *(void *)(v200 + 16);
                      if (v201)
                      {
                        CFArrayRef v202 = *(void (**)(const void *, uint64_t))(v201 + 216);
                        if (v202) {
                          v202(v161, 1);
                        }
                      }
                    }
                  }
                  else
                  {
                    if (MidY <= v189)
                    {
                      *(void *)&v297.size.CGFloat width = v265;
                      v297.origin.CGFloat x = v267;
                      v297.origin.CGFloat y = v179;
                      v297.size.CGFloat height = v181;
                      double v260 = CGRectGetMinY(v297);
                      v298.origin.CGFloat x = v183;
                      v298.origin.CGFloat y = v182;
                      v298.CGSize size = v184;
                      double v192 = CGRectGetMinY(v298);
                    }
                    else
                    {
                      *(void *)&v291.size.CGFloat width = v265;
                      v291.origin.CGFloat x = v267;
                      v291.origin.CGFloat y = v179;
                      v291.size.CGFloat height = v181;
                      double v260 = CGRectGetMaxY(v291);
                      v292.origin.CGFloat x = v183;
                      v292.origin.CGFloat y = v182;
                      v292.CGSize size = v184;
                      double v192 = CGRectGetMaxY(v292);
                    }
                    float v194 = v260 - v192;
                    double v182 = v182 + v194;
                  }
                  if (LODWORD(v275) == 3)
                  {
                    CGFloat v204 = v270.origin.y;
                    CGFloat v203 = v270.origin.x;
                    CGFloat v206 = v270.size.height;
                    CGFloat v205 = v270.size.width;
                    CGFloat v207 = v183;
                    CGFloat v208 = v182;
                    CGFloat v210 = v184.height;
                    CGFloat v209 = v184.width;
                  }
                  else
                  {
LABEL_226:
                    CGFloat v205 = *(double *)&v265;
                    CGFloat v203 = v267;
                    CGFloat v207 = v183;
                    CGFloat v208 = v182;
                    CGFloat v210 = v184.height;
                    CGFloat v209 = v184.width;
                    CGFloat v204 = v179;
                    CGFloat v206 = v181;
                  }
                  double v211 = cclayout_offsetRectToFitBoundary(v207, v208, v209, v210, v203, v204, v205, v206);
                  double v213 = v212;
                  double v215 = v214;
                  double v217 = v216;
                  FigCDSNodeProtocolGetProtocolID();
                  uint64_t v218 = CMBaseObjectGetProtocolVTable();
                  if (v218)
                  {
                    uint64_t v219 = *(void *)(v218 + 16);
                    if (v219)
                    {
                      CFIndex v220 = *(void (**)(const void *, double, double))(v219 + 128);
                      if (v220) {
                        v220(v161, v211, v213);
                      }
                    }
                  }
                  FigCDSNodeProtocolGetProtocolID();
                  uint64_t v221 = CMBaseObjectGetProtocolVTable();
                  if (v221)
                  {
                    uint64_t v222 = *(void *)(v221 + 16);
                    if (v222)
                    {
                      CFIndex v223 = *(void (**)(const void *, uint64_t))(v222 + 216);
                      if (v223) {
                        v223(v161, 1);
                      }
                    }
                  }
                  double v224 = CDSGetOverscanSafeRect(0.9, a2[38], a2[39], a2[40], a2[41]);
                  if (v211 >= v224) {
                    double v228 = v211;
                  }
                  else {
                    double v228 = v224;
                  }
                  if (v213 >= v225) {
                    double v229 = v213;
                  }
                  else {
                    double v229 = v225;
                  }
                  double v230 = v224 + v226;
                  if (v215 + v228 <= v230) {
                    double v231 = v228;
                  }
                  else {
                    double v231 = v230 - v215;
                  }
                  double v232 = v225 + v227;
                  if (v217 + v229 <= v232) {
                    double v233 = v229;
                  }
                  else {
                    double v233 = v232 - v217;
                  }
                  FigCDSNodeProtocolGetProtocolID();
                  uint64_t v234 = CMBaseObjectGetProtocolVTable();
                  if (v234)
                  {
                    uint64_t v235 = *(void *)(v234 + 16);
                    if (v235)
                    {
                      double v236 = *(void (**)(const void *, double, double))(v235 + 128);
                      if (v236) {
                        v236(v161, v231, v233);
                      }
                    }
                  }
                  FigCDSNodeProtocolGetProtocolID();
                  uint64_t v237 = CMBaseObjectGetProtocolVTable();
                  if (v237)
                  {
                    uint64_t v238 = *(void *)(v237 + 16);
                    if (v238)
                    {
                      int v239 = *(void (**)(const void *, uint64_t))(v238 + 216);
                      if (v239) {
                        v239(v161, 1);
                      }
                    }
                  }
                  goto LABEL_203;
                }
              }
            }
          }
          FigSignalErrorAt();
        }
      }
LABEL_203:
      uint64_t v191 = 0;
      if ((unint64_t)--v158 <= 1) {
        return v191;
      }
    }
  }
  return 0;
}

uint64_t FigCDSAVFLayoutRegion_FigCDSNodeProtocol_ExecActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 280);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSAVFLayoutRegion_FigCDSNodeProtocol_Compose(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  __int16 v25 = 0;
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    uint64_t v6 = *(void *)(ProtocolVTable + 16);
    if (v6)
    {
      uint64_t v7 = *(void (**)(uint64_t, char *))(v6 + 232);
      if (v7)
      {
        v7(a1, (char *)&v25 + 1);
        if (HIBYTE(v25))
        {
          FigCDSNodeProtocolGetProtocolID();
          uint64_t v8 = CMBaseObjectGetProtocolVTable();
          if (v8)
          {
            uint64_t v9 = *(void *)(v8 + 16);
            if (v9)
            {
              __n128 v10 = *(void (**)(uint64_t, uint64_t))(v9 + 280);
              if (v10) {
                v10(a1, a2);
              }
            }
          }
        }
      }
    }
  }
  FigCDSNodeProtocolGetProtocolID();
  uint64_t v11 = CMBaseObjectGetProtocolVTable();
  if (v11)
  {
    uint64_t v12 = *(void *)(v11 + 16);
    if (v12)
    {
      double v13 = *(void (**)(uint64_t, __int16 *))(v12 + 224);
      if (v13)
      {
        v13(a1, &v25);
        if ((_BYTE)v25)
        {
          FigCDSNodeProtocolGetProtocolID();
          uint64_t v14 = CMBaseObjectGetProtocolVTable();
          if (v14)
          {
            uint64_t v15 = *(void *)(v14 + 16);
            if (v15)
            {
              double v16 = *(void (**)(uint64_t, uint64_t))(v15 + 272);
              if (v16) {
                v16(a1, a2);
              }
            }
          }
        }
      }
    }
  }
  FigCDSNodeProtocolGetProtocolID();
  uint64_t v17 = CMBaseObjectGetProtocolVTable();
  if (v17)
  {
    uint64_t v18 = *(void *)(v17 + 16);
    if (v18)
    {
      uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v18 + 264);
      if (v19) {
        v19(a1, a2);
      }
    }
  }
  uint64_t v20 = *DerivedStorage;
  FigCDSNodeProtocolGetProtocolID();
  uint64_t v21 = CMBaseObjectGetProtocolVTable();
  if (!v21) {
    return 4294954508;
  }
  uint64_t v22 = *(void *)(v21 + 16);
  if (!v22) {
    return 4294954508;
  }
  uint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t))(v22 + 288);
  if (v23) {
    return v23(v20, a2);
  }
  else {
    return 4294954514;
  }
}

uint64_t FigCDSAVFLayoutRegion_FigCDSNodeProtocol_OnChildUpdateDisplayRequest(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  __n128 v4 = *(void (**)(_OWORD *, uint64_t))(DerivedStorage + 16);
  if (v4)
  {
    uint64_t v5 = *(void *)(DerivedStorage + 8);
    long long v6 = *(_OWORD *)(a2 + 16);
    v8[0] = *(_OWORD *)a2;
    v8[1] = v6;
    uint64_t v9 = *(void *)(a2 + 32);
    v4(v8, v5);
  }
  return 0;
}

uint64_t FigCDSAVFLayoutRegion_FigCDSNodeProtocol_AddAction(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  long long v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 304);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSAVFLayoutRegion_FigCDSNodeProtocol_RemoveAllActions()
{
  uint64_t v0 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v2 = *(void *)(ProtocolVTable + 16);
  if (!v2) {
    return 4294954508;
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v2 + 312);
  if (!v3) {
    return 4294954514;
  }

  return v3(v0);
}

uint64_t FigCDSAVFLayoutRegion_FigCDSNodeProtocol_SetActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  long long v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 320);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSAVFLayoutRegion_FigCDSNodeProtocol_GetActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  long long v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 328);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSAVFLayoutRegion_FigCDSNodeProtocol_SelectAt(double a1, double a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v11 = *(void *)(ProtocolVTable + 16);
  if (!v11) {
    return 4294954508;
  }
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, __n128, __n128))(v11 + 336);
  if (!v12) {
    return 4294954514;
  }
  v9.n128_f64[0] = a1;
  v10.n128_f64[0] = a2;

  return v12(v7, a4, v9, v10);
}

uint64_t FigCDSAVFLayoutRegion_FigCDSNodeProtocol_UnselectAt(double a1, double a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v11 = *(void *)(ProtocolVTable + 16);
  if (!v11) {
    return 4294954508;
  }
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, __n128, __n128))(v11 + 344);
  if (!v12) {
    return 4294954514;
  }
  v9.n128_f64[0] = a1;
  v10.n128_f64[0] = a2;

  return v12(v7, a4, v9, v10);
}

uint64_t FigCDSAVFLayoutRegion_FigCDSNodeProtocol_IsSelected(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  long long v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 352);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t RegisterFigCDSAVFLayoutRegionBaseType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

CFTypeRef FigCDSAVFLayoutRegionBaseCopyFormattingDesc()
{
  return CFRetain(@"[FigCDSAVFLayoutRegion]");
}

uint64_t FigVTTDocumentWriterCreateForVTT(uint64_t a1, const void *a2, void *a3)
{
  if (a2)
  {
    if (!a3) {
      return FigSignalErrorAt();
    }
    FigVTTDocumentWriterGetClassID();
    uint64_t v5 = CMDerivedObjectCreate();
    if (!v5)
    {
      CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
      if (Mutable)
      {
        CFMutableArrayRef v8 = Mutable;
        CFMutableArrayRef v9 = CFArrayCreateMutable(v6, 0, MEMORY[0x1E4F1D510]);
        if (v9)
        {
          CFMutableArrayRef v10 = v9;
          CFMutableArrayRef v11 = CFArrayCreateMutable(v6, 0, MEMORY[0x1E4F1D510]);
          if (v11)
          {
            CFMutableArrayRef v12 = v11;
            FigVTTDocumentWriterGetCMBaseObject(0);
            uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
            uint64_t v14 = 0;
            *uint64_t DerivedStorage = CFRetain(a2);
            DerivedStorage[1] = v8;
            DerivedStorage[2] = v10;
            DerivedStorage[3] = v12;
            *a3 = 0;
            return v14;
          }
          CFRelease(v10);
        }
        CFRelease(v8);
      }
      return 4294954510;
    }
    return v5;
  }

  return FigSignalErrorAt();
}

uint64_t figVTTDocumentWriterForVTT_Invalidate()
{
  return 0;
}

void figVTTDocumentWriterForVTT_Finalize(uint64_t a1)
{
  FigVTTDocumentWriterGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v2 = *(const void **)(DerivedStorage + 32);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(const void **)(DerivedStorage + 8);
  if (v3) {
    CFRelease(v3);
  }
  __n128 v4 = *(const void **)(DerivedStorage + 16);
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = *(const void **)(DerivedStorage + 24);
  if (v5) {
    CFRelease(v5);
  }
  CFAllocatorRef v6 = *(const void **)DerivedStorage;
  if (*(void *)DerivedStorage)
  {
    CFRelease(v6);
  }
}

CFStringRef figVTTDocumentWriterForVTT_CopyDebugDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"FigVTTDocumentWriterForVTT[%p]", a1);
}

uint64_t figVTTDocumentWriterForVTT_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  FigVTTDocumentWriterGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2 && a4 && (uint64_t v7 = DerivedStorage, CFEqual(a2, @"languageIdentifier")))
  {
    CFTypeRef v8 = *(CFTypeRef *)(v7 + 32);
    if (v8) {
      CFTypeRef v8 = CFRetain(v8);
    }
    *a4 = v8;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t figVTTDocumentWriterForVTT_SetProperty(uint64_t a1, const void *a2, const void *a3)
{
  FigVTTDocumentWriterGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage
    && a2
    && (uint64_t v6 = DerivedStorage, CFEqual(a2, @"languageIdentifier"))
    && a3
    && (CFTypeID v7 = CFGetTypeID(a3), v7 == CFStringGetTypeID()))
  {
    CFTypeRef v8 = *(const void **)(v6 + 32);
    *(void *)(v6 + 32) = a3;
    CFRetain(a3);
    if (v8) {
      CFRelease(v8);
    }
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t figVTTDocumentWriterForVTT_CreateAndAddNode(const void *a1, int a2, unsigned int a3, void **a4)
{
  FigVTTDocumentWriterGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  xpc_object_t value = 0;
  if (!a2 || !a3 || !a4)
  {
    FigSignalErrorAt();
    return 0;
  }
  if (a2 == 3)
  {
    if ((a3 & 0xFFFFFFFD) != 1) {
      goto LABEL_26;
    }
    CFMutableArrayRef v10 = (__CFArray **)(DerivedStorage + 24);
LABEL_14:
    CFMutableArrayRef v9 = *v10;
LABEL_16:
    switch(a3)
    {
      case 1u:
        CFAllocatorRef v14 = CFGetAllocator(a1);
        uint64_t v12 = FigVTTCueCreate((uint64_t)v14, &value);
        goto LABEL_23;
      case 2u:
        goto LABEL_17;
      case 3u:
        CFAllocatorRef v15 = CFGetAllocator(a1);
        uint64_t v12 = FigVTTNoteBlockCreate((uint64_t)v15, &value);
        goto LABEL_23;
      case 4u:
        CFAllocatorRef v16 = CFGetAllocator(a1);
        uint64_t v12 = FigVTTRegionBlockCreate((uint64_t)v16, &value);
        goto LABEL_23;
      case 5u:
      case 6u:
        goto LABEL_26;
      case 7u:
        CFAllocatorRef v17 = CFGetAllocator(a1);
        uint64_t v12 = FigVTTStyleBlockCreate((uint64_t)v17, &value);
        goto LABEL_23;
      default:
        uint64_t v13 = 0;
        goto LABEL_24;
    }
  }
  if (a2 == 2)
  {
    if (a3 > 7 || ((1 << a3) & 0x98) == 0) {
      goto LABEL_26;
    }
    CFMutableArrayRef v10 = (__CFArray **)(DerivedStorage + 16);
    goto LABEL_14;
  }
  if (a2 != 1)
  {
    CFMutableArrayRef v9 = 0;
    goto LABEL_16;
  }
  if (a3 == 2)
  {
    CFMutableArrayRef v9 = *(__CFArray **)(DerivedStorage + 8);
LABEL_17:
    CFAllocatorRef v11 = CFGetAllocator(a1);
    uint64_t v12 = FigVTTMetadataCreate((uint64_t)v11, &value);
LABEL_23:
    uint64_t v13 = v12;
LABEL_24:
    CFArrayAppendValue(v9, value);
    *a4 = value;
    return v13;
  }
LABEL_26:

  return FigSignalErrorAt();
}

uint64_t figVTTDocumentWriterForVTT_Flush(const void *a1)
{
  FigVTTDocumentWriterGetCMBaseObject(a1);
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = CFGetAllocator(a1);
  CFMutableArrayRef Mutable = CFStringCreateMutable(v3, 0);
  if (Mutable)
  {
    uint64_t v5 = Mutable;
    CFStringAppendFormat(Mutable, 0, @"%@\n", @"WEBVTT");
    FigCFArrayApplyFunction();
    CFStringAppendFormat(v5, 0, @"\n");
    FigCFArrayApplyFunction();
    FigCFArrayApplyFunction();
    uint64_t v6 = FigVTTSerializerAddText(*DerivedStorage, (uint64_t)v5);
    if (!v6) {
      uint64_t v6 = FigVTTSerializerFlush(*DerivedStorage);
    }
    uint64_t v7 = v6;
    CFRelease(v5);
    return v7;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void eachNodeEmitCallback(uint64_t a1, uint64_t a2)
{
  int v8 = 0;
  CFTypeRef cf = 0;
  if (!*(_DWORD *)(a2 + 20))
  {
    int NodeType = FigVTTNodeGetNodeType(a1, (uint64_t)&v8);
    if (NodeType)
    {
      int v5 = NodeType;
    }
    else
    {
      int v5 = FigVTTNodeCopyDocumentSerialization(a1, (uint64_t)&cf);
      CFTypeRef v6 = cf;
      if (!v5 && cf)
      {
        CFStringAppendFormat(*(CFMutableStringRef *)a2, 0, @"%@", cf);
        if (!*(unsigned char *)(a2 + 16)) {
          CFStringAppendFormat(*(CFMutableStringRef *)a2, 0, @"\n");
        }
        goto LABEL_9;
      }
      if (!v5) {
        goto LABEL_10;
      }
    }
    *(_DWORD *)(a2 + 20) = v5;
LABEL_9:
    CFTypeRef v6 = cf;
LABEL_10:
    if (v6) {
      CFRelease(v6);
    }
  }
}

BOOL FigCFHTTPIsHTTPBasedURL(const __CFURL *a1)
{
  CFStringRef v1 = CFURLCopyScheme(a1);
  if (!v1) {
    return 0;
  }
  CFStringRef v2 = v1;
  BOOL v3 = 1;
  if (CFStringCompare(v1, @"http", 1uLL))
  {
    BOOL v3 = 1;
    if (CFStringCompare(v2, @"https", 1uLL)) {
      BOOL v3 = CFStringCompare(v2, @"daap", 1uLL) == kCFCompareEqualTo;
    }
  }
  CFRelease(v2);
  return v3;
}

BOOL FigCFHTTPIsDataURL(const __CFURL *a1)
{
  if (!a1) {
    return 0;
  }
  CFStringRef v1 = CFURLCopyScheme(a1);
  if (!v1) {
    return 0;
  }
  CFStringRef v2 = v1;
  BOOL v3 = CFStringCompare(v1, @"data", 1uLL) == kCFCompareEqualTo;
  CFRelease(v2);
  return v3;
}

uint64_t FigCFHTTPCopyDeviceStrings(void *a1, void *a2, void *a3)
{
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFURLRef v7 = CFURLCreateWithFileSystemPath((CFAllocatorRef)*MEMORY[0x1E4F1CF80], @"/System/Library/CoreServices/SystemVersion.plist", kCFURLPOSIXPathStyle, 0);
  if (!v7) {
    return 4294954510;
  }
  CFURLRef v8 = v7;
  CFCFDataRef Data = FigFileReadURLAndCreateCFData();
  if (CFData)
  {
    uint64_t v15 = CFData;
    goto LABEL_18;
  }
  CFPropertyListRef v10 = CFPropertyListCreateWithData(v6, 0, 0, 0, 0);
  if (!v10)
  {
    uint64_t v15 = 4294954510;
    goto LABEL_18;
  }
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (TypeID != CFGetTypeID(v10))
  {
    CFRelease(v10);
    uint64_t v15 = 4294954516;
LABEL_18:
    CFRelease(v8);
    return v15;
  }
  CFRelease(v8);
  if (a1)
  {
    uint64_t v12 = MGCopyAnswer();
    *a1 = v12;
    if (!v12) {
      *a1 = CFRetain(@"iPhone");
    }
  }
  if (a2)
  {
    CFStringRef Value = CFDictionaryGetValue((CFDictionaryRef)v10, @"ProductVersion");
    if (Value) {
      CFStringRef Value = CFRetain(Value);
    }
    *a2 = Value;
  }
  if (a3)
  {
    CFAllocatorRef v14 = CFDictionaryGetValue((CFDictionaryRef)v10, @"ProductBuildVersion");
    if (v14) {
      CFAllocatorRef v14 = CFRetain(v14);
    }
    *a3 = v14;
  }
  CFRelease(v10);
  return 0;
}

void FigCFHTTPCreateUserAgentOnce()
{
  CFStringRef v20 = 0;
  theString[0] = 0;
  appendedCFStringRef String = 0;
  uint64_t v0 = 0;
  if (!FigCFHTTPCopyDeviceStrings(theString, &v20, &appendedString))
  {
    if (theString[0]) {
      BOOL v1 = v20 == 0;
    }
    else {
      BOOL v1 = 1;
    }
    if (!v1 && appendedString != 0)
    {
      CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
      uint64_t v0 = Mutable;
      if (!Mutable) {
        goto LABEL_28;
      }
      CFStringAppend(Mutable, @"AppleCoreMedia/1.0.0.");
      CFStringAppend(v0, appendedString);
      CFStringAppend(v0, @" (");
      CFStringRef v5 = theString[0];
      if (theString[0])
      {
        CFDataRef ExternalRepresentation = CFStringCreateExternalRepresentation(v3, theString[0], 0x600u, 0x20u);
        if (ExternalRepresentation)
        {
          CFDataRef v7 = ExternalRepresentation;
          CFStringRef v8 = CFStringCreateFromExternalRepresentation(v3, ExternalRepresentation, 0x600u);
          CFRelease(v7);
          CFStringRef v5 = theString[0];
          if (v8)
          {
            CFRelease(theString[0]);
            theString[0] = v8;
            CFStringRef v5 = v8;
          }
        }
        else
        {
          CFStringRef v5 = theString[0];
        }
      }
      CFStringAppend(v0, v5);
      CFStringAppend(v0, @"; U; ");
      CFStringAppend(v0, @"CPU OS ");
      MutableCFArrayRef Copy = CFStringCreateMutableCopy(v3, 0, v20);
      if (MutableCopy)
      {
        CFPropertyListRef v10 = (__CFString *)MutableCopy;
        v22.size_t length = CFStringGetLength(MutableCopy);
        v22.locatioCFIndex n = 0;
        CFStringFindAndReplace(v10, @".", @"_", v22, 0);
        CFStringAppend(v0, v10);
        CFRelease(v10);
      }
      CFStringAppend(v0, @" like Mac OS X");
      CFArrayRef v11 = CFLocaleCopyPreferredLanguages();
      if (!v11) {
        goto LABEL_27;
      }
      CFArrayRef v12 = v11;
      theString[1] = 0;
      theString[2] = 0;
      if (CFArrayGetCount(v11) >= 1
        && CFArrayGetValueAtIndex(v12, 0)
        && (CFBundleGetLocalizationInfoForLocalization(),
            (CFStringRef v13 = (const __CFString *)CFBundleCopyLocalizationForLocalizationInfo()) != 0))
      {
        CFStringRef v14 = v13;
        CFMutableStringRef v15 = CFStringCreateMutableCopy(v3, 0, v13);
        Systeuint64_t m = CFLocaleGetSystem();
        CFStringLowercase(v15, System);
        locatioCFIndex n = CFStringFind(v15, @"_", 0).location;
        if (CFStringGetLength(v15) >= 3 && location == 3)
        {
          v23.size_t length = CFStringGetLength(v15);
          v23.locatioCFIndex n = 0;
          CFStringFindAndReplace(v15, @"_", @"-", v23, 0);
        }
        CFRelease(v12);
        CFRelease(v14);
        if (!v15) {
          goto LABEL_27;
        }
        CFStringAppend(v0, @"; ");
        CFStringAppend(v0, v15);
        CFMutableStringRef v18 = v15;
      }
      else
      {
        CFMutableStringRef v18 = (CFMutableStringRef)v12;
      }
      CFRelease(v18);
LABEL_27:
      CFStringAppend(v0, @""));
      goto LABEL_28;
    }
    uint64_t v0 = 0;
  }
LABEL_28:
  if (theString[0]) {
    CFRelease(theString[0]);
  }
  if (v20) {
    CFRelease(v20);
  }
  if (appendedString) {
    CFRelease(appendedString);
  }
  gFigCFHTTPUserAgent = (uint64_t)v0;
}

CFTypeRef FigCFHTTPCreateURLString(const __CFURL *a1)
{
  if (!a1) {
    return 0;
  }
  CFURLRef v1 = CFURLCopyAbsoluteURL(a1);
  if (!v1) {
    return 0;
  }
  CFURLRef v2 = v1;
  CFStringRef v3 = CFURLGetString(v1);
  CFTypeRef v4 = CFRetain(v3);
  CFRelease(v2);
  return v4;
}

uint64_t FigCFHTTPCompareURLs(const void *a1, CFTypeRef cf2)
{
  uint64_t v2 = 0;
  if (!a1) {
    return v2;
  }
  if (!cf2) {
    return v2;
  }
  uint64_t v2 = CFEqual(a1, cf2);
  if (v2) {
    return v2;
  }
  if (!CFURLGetBaseURL((CFURLRef)a1) && !CFURLGetBaseURL((CFURLRef)cf2)) {
    return 0;
  }
  CFURLRef v5 = CFURLCopyAbsoluteURL((CFURLRef)a1);
  CFURLRef v6 = CFURLCopyAbsoluteURL((CFURLRef)cf2);
  CFURLRef v7 = v6;
  if (v5 && v6)
  {
    uint64_t v8 = CFEqual(v5, v6);
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v2 = 0;
    if (!v5) {
      goto LABEL_11;
    }
  }
  CFRelease(v5);
  uint64_t v2 = v8;
LABEL_11:
  if (v7) {
    CFRelease(v7);
  }
  return v2;
}

const sockaddr *FigCFHTTPCreateAddressStringFromSockaddr(const sockaddr *result, socklen_t a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    int v2 = getnameinfo(result, a2, cStr, 0x401u, 0, 0, 2);
    uint64_t result = 0;
    if (!v2) {
      return (const sockaddr *)CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], cStr, 0x600u);
    }
  }
  return result;
}

CFDataRef FigCFHTTPCreateAddressString(const __CFData *result)
{
  if (result)
  {
    CFDataRef v1 = result;
    uint64_t BytePtr = (const sockaddr *)CFDataGetBytePtr(result);
    socklen_t Length = CFDataGetLength(v1);
    return (const __CFData *)FigCFHTTPCreateAddressStringFromSockaddr(BytePtr, Length);
  }
  return result;
}

uint64_t FigCFHTTPGetHTTPPort(const __CFURL *a1, int *a2, char *a3)
{
  CFStringRef v6 = CFURLCopyScheme(a1);
  if (v6)
  {
    CFStringRef v7 = v6;
    char v8 = 1;
    CFComparisonResult v9 = CFStringCompare(v6, @"https", 1uLL);
    CFRelease(v7);
    uint64_t result = CFURLGetPortNumber(a1);
    BOOL v11 = result == -1;
    if (v9 == kCFCompareEqualTo)
    {
      int v12 = 443;
      if (!a2) {
        goto LABEL_11;
      }
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t result = CFURLGetPortNumber(a1);
    BOOL v11 = result == -1;
  }
  char v8 = 0;
  int v12 = 80;
  if (!a2) {
    goto LABEL_11;
  }
LABEL_7:
  if (v11) {
    int v13 = v12;
  }
  else {
    int v13 = result;
  }
  *a2 = v13;
LABEL_11:
  if (a3) {
    *a3 = v8;
  }
  return result;
}

uint64_t FigCFHTTPCopyClientCertChain(uint64_t *a1)
{
  if (a1)
  {
    *a1 = 0;
    if ((FigCFHTTPCopyClientCertChain_sCheckedPref & 1) == 0)
    {
      CFPropertyListRef v2 = CFPreferencesCopyValue(@"client_auth", @"com.apple.coremedia", (CFStringRef)*MEMORY[0x1E4F1D3F0], (CFStringRef)*MEMORY[0x1E4F1D3C8]);
      if (v2)
      {
        CFStringRef v3 = v2;
        BOOL v4 = CFEqual(v2, @"true")
          || CFEqual(v3, @"TRUE")
          || CFEqual(v3, @"1")
          || CFEqual(v3, @"YES")
          || CFEqual(v3, @"yes") != 0;
        FigCFHTTPCopyClientCertChain_sOkToUse = v4;
        CFRelease(v3);
      }
      FigCFHTTPCopyClientCertChain_sCheckedPref = 1;
    }
    if (!FigCFHTTPCopyClientCertChain_sOkToUse) {
      return 4294954634;
    }
    uint64_t v5 = off_1EC28FCA8[0]();
    *a1 = v5;
    if (v5) {
      return 0;
    }
  }

  return FigSignalErrorAt();
}

CFStringRef FigCFHTTPGetContentLengthFromHeaderString(const __CFString *result, void *a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    uint64_t v3 = 0;
    uint64_t result = (const __CFString *)CFStringGetCString(result, buffer, 200, 0x600u);
    if (result)
    {
      if (sscanf(buffer, "%lld", &v3) == 1)
      {
        if (a2) {
          *a2 = v3;
        }
        return (const __CFString *)1;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

CFStringRef FigCFHTTPGetContentLengthFromHTTPResponse(__CFHTTPMessage *a1, void *a2)
{
  if (!a1) {
    return 0;
  }
  CFStringRef v3 = CFHTTPMessageCopyHeaderFieldValue(a1, @"Content-Length");
  CFStringRef v4 = FigCFHTTPGetContentLengthFromHeaderString(v3, a2);
  if (v3) {
    CFRelease(v3);
  }
  return v4;
}

uint64_t FigCFHTTPGetContentRangeFromHeaderString(uint64_t result, void *a2, void *a3, void *a4, unsigned char *a5)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (!result) {
    return result;
  }
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v9 = 0;
  uint64_t result = CFStringGetCString((CFStringRef)result, buffer, 200, 0x600u);
  if (!result) {
    return result;
  }
  if (sscanf(buffer, "bytes %lld-%lld/%lld", &v11, &v10, &v9) != 3)
  {
    if (sscanf(buffer, "bytes %lld-%lld/*", &v11, &v10) != 2) {
      return 0;
    }
    if (a2) {
      *a2 = v11;
    }
    if (a3) {
      *a3 = v10;
    }
    if (!a5) {
      return 1;
    }
    LOBYTE(result) = 0;
LABEL_19:
    *a5 = result;
    return 1;
  }
  if (a2) {
    *a2 = v11;
  }
  if (a3) {
    *a3 = v10;
  }
  if (a4) {
    *a4 = v9;
  }
  uint64_t result = 1;
  if (a5) {
    goto LABEL_19;
  }
  return result;
}

uint64_t FigCFHTTPGetContentRangeFromHTTPResponse(__CFHTTPMessage *a1, void *a2, void *a3, void *a4, unsigned char *a5)
{
  if (!a1) {
    return 0;
  }
  CFStringRef v9 = CFHTTPMessageCopyHeaderFieldValue(a1, @"Content-Range");
  uint64_t v10 = FigCFHTTPGetContentRangeFromHeaderString((uint64_t)v9, a2, a3, a4, a5);
  if (v9) {
    CFRelease(v9);
  }
  return v10;
}

CFDateRef FigCFHTTPCreateDateFromHTTPDateString(const __CFString *a1)
{
  uint64_t v2 = figCFHTTPGetHTTPDateFormater();
  if (!a1) {
    return 0;
  }
  CFStringRef v3 = (__CFDateFormatter *)v2;
  if (!v2) {
    return 0;
  }
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];

  return CFDateFormatterCreateDateFromString(v4, v3, a1, 0);
}

uint64_t figCFHTTPGetHTTPDateFormater()
{
  if (!figCFHTTPGetHTTPDateFormater_sHTTPDateFormater)
  {
    CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFLocaleRef v1 = CFLocaleCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], @"en_US_POSIX");
    uint64_t v2 = CFDateFormatterCreate(v0, v1, kCFDateFormatterNoStyle, kCFDateFormatterNoStyle);
    if (v2)
    {
      CFStringRef v3 = v2;
      CFDateFormatterSetFormat(v2, @"EEE, d MMM yyyy HH:mm:ss z");
      CFDateFormatterSetProperty(v3, (CFStringRef)*MEMORY[0x1E4F1D088], (CFTypeRef)*MEMORY[0x1E4F1CFD0]);
      if (!FigAtomicCompareAndSwapPtr()) {
        CFRelease(v3);
      }
    }
    if (v1) {
      CFRelease(v1);
    }
  }
  return figCFHTTPGetHTTPDateFormater_sHTTPDateFormater;
}

CFDateRef FigCFHTTPCreateDateFromDelayString(CFStringRef string)
{
  if (!figCFHTTPGetHTTPDelaySecondsFormatter_sHTTPDelaySecondsFormatter)
  {
    CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFLocaleRef v3 = CFLocaleCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], @"en_US_POSIX");
    CFNumberFormatterRef v4 = CFNumberFormatterCreate(v2, v3, kCFNumberFormatterNoStyle);
    if (v4)
    {
      CFNumberFormatterRef v5 = v4;
      if (!FigAtomicCompareAndSwapPtr()) {
        CFRelease(v5);
      }
    }
    if (v3) {
      CFRelease(v3);
    }
  }
  CFDateRef v6 = 0;
  if (string && figCFHTTPGetHTTPDelaySecondsFormatter_sHTTPDelaySecondsFormatter)
  {
    CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    NumberFromCFStringRef String = CFNumberFormatterCreateNumberFromString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (CFNumberFormatterRef)figCFHTTPGetHTTPDelaySecondsFormatter_sHTTPDelaySecondsFormatter, string, 0, 1uLL);
    if (NumberFromString)
    {
      CFNumberRef v9 = NumberFromString;
      int valuePtr = 0;
      if (CFNumberGetValue(NumberFromString, kCFNumberIntType, &valuePtr))
      {
        CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
        CFDateRef v6 = CFDateCreate(v7, Current + (double)valuePtr);
      }
      else
      {
        CFDateRef v6 = 0;
      }
      CFRelease(v9);
    }
    else
    {
      return 0;
    }
  }
  return v6;
}

CFDateRef FigCFHTTPCreateDateFromHTTPDateStringOrDelayString(const __CFString *a1)
{
  CFDateRef result = FigCFHTTPCreateDateFromHTTPDateString(a1);
  if (!result)
  {
    return FigCFHTTPCreateDateFromDelayString(a1);
  }
  return result;
}

CFStringRef FigCFHTTPCopyDateFromHTTPResponse(__CFHTTPMessage *a1)
{
  return figCFHTTPCopyDateFromHTTPResponse(a1, @"Date");
}

CFStringRef figCFHTTPCopyDateFromHTTPResponse(__CFHTTPMessage *a1, const __CFString *a2)
{
  CFStringRef result = CFHTTPMessageCopyHeaderFieldValue(a1, a2);
  if (result)
  {
    CFStringRef v3 = result;
    CFDateRef v4 = FigCFHTTPCreateDateFromHTTPDateString(result);
    CFRelease(v3);
    return (const __CFString *)v4;
  }
  return result;
}

CFStringRef FigCFHTTPCopyLastModifiedDateFromHTTPResponse(__CFHTTPMessage *a1)
{
  return figCFHTTPCopyDateFromHTTPResponse(a1, @"Last-Modified");
}

CFDateRef FigCFHTTPCopyRetryAfterDateFromHTTPResponse(__CFHTTPMessage *a1)
{
  CFStringRef v1 = CFHTTPMessageCopyHeaderFieldValue(a1, @"Retry-After");
  if (!v1) {
    return 0;
  }
  CFStringRef v2 = v1;
  CFDateRef v3 = FigCFHTTPCreateDateFromHTTPDateString(v1);
  if (!v3) {
    CFDateRef v3 = FigCFHTTPCreateDateFromDelayString(v2);
  }
  CFRelease(v2);
  return v3;
}

uint64_t FigCFHTTPCanURLsBePersistent(const __CFURL *a1, const __CFURL *a2, BOOL *a3)
{
  uint64_t v15 = 0;
  uint64_t v6 = (uint64_t)CFURLCopyHostName(a1);
  CFStringRef v7 = CFURLCopyScheme(a1);
  CFStringRef v8 = CFURLCopyHostName(a2);
  CFStringRef v9 = CFURLCopyScheme(a2);
  CFStringRef v10 = v9;
  if (v6 && v8)
  {
    CFComparisonResult v11 = CFStringCompare((CFStringRef)v6, v8, 1uLL);
    BOOL v12 = v7 == 0;
    BOOL v13 = v10 == 0;
    if (v7 && v10)
    {
      if (v11 || CFStringCompare(v7, v10, 1uLL))
      {
        *a3 = 0;
      }
      else
      {
        FigCFHTTPGetHTTPPort(a1, (int *)&v15 + 1, 0);
        FigCFHTTPGetHTTPPort(a2, (int *)&v15, 0);
        *a3 = HIDWORD(v15) == v15;
      }
      goto LABEL_11;
    }
LABEL_13:
    CFRelease((CFTypeRef)v6);
    uint64_t v6 = 4294954510;
    if (v12) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }
  BOOL v12 = v7 == 0;
  BOOL v13 = v9 == 0;
  if (v7 && v9)
  {
    *a3 = 0;
    if (v6)
    {
LABEL_11:
      CFRelease((CFTypeRef)v6);
      BOOL v13 = 0;
      uint64_t v6 = 0;
      goto LABEL_21;
    }
    BOOL v13 = 0;
    goto LABEL_21;
  }
  if (v6) {
    goto LABEL_13;
  }
  uint64_t v6 = 4294954510;
  if (!v7)
  {
LABEL_14:
    if (!v8) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
LABEL_21:
  CFRelease(v7);
  if (v8) {
LABEL_15:
  }
    CFRelease(v8);
LABEL_16:
  if (!v13) {
    CFRelease(v10);
  }
  return v6;
}

uint64_t FigCFHTTPDoURLHostsAndPortsMatch(const __CFURL *a1, const __CFURL *a2)
{
  uint64_t v2 = 0;
  if (a1)
  {
    if (a2)
    {
      uint64_t v8 = 0;
      FigCFHTTPGetHTTPPort(a1, (int *)&v8 + 1, 0);
      FigCFHTTPGetHTTPPort(a2, (int *)&v8, 0);
      uint64_t v2 = 0;
      if (HIDWORD(v8) == v8)
      {
        CFStringRef v5 = CFURLCopyHostName(a1);
        CFStringRef v6 = CFURLCopyHostName(a2);
        uint64_t v2 = FigCFEqual();
        if (v5) {
          CFRelease(v5);
        }
        if (v6) {
          CFRelease(v6);
        }
      }
    }
  }
  return v2;
}

uint64_t FigCFHTTPIsStatusCodeRedirect(int a1)
{
  if ((a1 - 301) >= 5) {
    char v1 = 0;
  }
  else {
    char v1 = 0x100010101uLL >> (8 * (a1 - 45));
  }
  return v1 & 1;
}

uint64_t FigCFHTTPCopyFilenameFromContentDisposition(__CFHTTPMessage *a1, uint64_t a2, CFStringRef *a3)
{
  CFStringRef v5 = CFHTTPMessageCopyHeaderFieldValue(a1, @"Content-Disposition");
  if (!v5) {
    return 4294954513;
  }
  CFStringRef v6 = v5;
  CFIndex v7 = CFStringGetLength(v5) + 1;
  uint64_t v8 = (char *)malloc_type_malloc(v7, 0x10BEF44FuLL);
  if (v8)
  {
    CFStringRef v9 = v8;
    if (CFStringGetCString(v6, v8, v7, 0x600u) && (CFStringRef v10 = strcasestr(v9, "filename")) != 0)
    {
      for (CFIndex i = v10 + 9; ; ++i)
      {
        if (!*(i - 1)) {
          goto LABEL_33;
        }
        if (*(i - 1) == 61) {
          break;
        }
      }
      uint64_t v12 = MEMORY[0x1E4F14390];
      do
      {
        unsigned int v13 = *i;
        if ((v13 & 0x80000000) != 0) {
          int v14 = __maskrune(*i, 0x4000uLL);
        }
        else {
          int v14 = *(_DWORD *)(v12 + 4 * v13 + 60) & 0x4000;
        }
        ++i;
      }
      while (v14);
      if (v13 == 34)
      {
        for (CFIndex j = i; *j; ++j)
        {
          if (*j == 34) {
            goto LABEL_28;
          }
        }
      }
      else
      {
        CFIndex j = i - 2;
        --i;
        do
        {
          unsigned int v16 = j[1];
          if ((v16 & 0x80000000) != 0) {
            int v17 = __maskrune(j[1], 0x4000uLL);
          }
          else {
            int v17 = *(_DWORD *)(v12 + 4 * v16 + 60) & 0x4000;
          }
          ++j;
          if (v16) {
            BOOL v18 = v17 == 0;
          }
          else {
            BOOL v18 = 0;
          }
        }
        while (v18);
LABEL_28:
        *CFIndex j = 0;
      }
      if (a2)
      {
        uint64_t v19 = strrchr(i, 46);
        if (!v19)
        {
LABEL_33:
          a2 = 4294954513;
          goto LABEL_36;
        }
        CFStringRef v20 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v19 + 1, 0x600u);
        *a3 = v20;
        if (v20) {
          a2 = 0;
        }
        else {
          a2 = FigSignalErrorAt();
        }
      }
      else
      {
        *a3 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], i, 0x600u);
      }
LABEL_36:
      free(v9);
    }
    else
    {
      free(v9);
      a2 = 4294954513;
    }
  }
  else
  {
    a2 = FigSignalErrorAt();
  }
  CFRelease(v6);
  return a2;
}

CFDataRef FigCFHTTPCopyClientProcessName(const __CFData *result)
{
  if (result)
  {
    CFDataGetBytePtr(result);
    if (FigServer_GetClientPIDFromAuditToken()) {
      FigServer_CopyProcessName();
    }
    return 0;
  }
  return result;
}

uint64_t FigCFHTTPCopyClientBundleIdentifier(const __CFData *a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t BytePtr = CFDataGetBytePtr(a1);
  long long v11 = *(_OWORD *)BytePtr;
  long long v12 = *((_OWORD *)BytePtr + 1);
  ClientPIDFromAuditTokeCFIndex n = FigServer_GetClientPIDFromAuditToken();
  CFStringRef v6 = (void *)MEMORY[0x199711A30](ClientPIDFromAuditToken, v3, v4, v5);
  uint64_t v7 = objc_msgSend(MEMORY[0x1E4F963F8], "identifierWithPid:", ClientPIDFromAuditToken, v11, v12);
  uint64_t v8 = (void *)[MEMORY[0x1E4F963E8] handleForIdentifier:v7 error:0];
  if (v8) {
    uint64_t v9 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v8, "bundle"), "identifier"), "copy");
  }
  else {
    uint64_t v9 = 0;
  }
  return v9;
}

uint64_t FigCFHTTPCreateCacheHeaders(const __CFString *a1, uint64_t a2, __CFHTTPMessage *a3, const __CFDictionary *a4, CFDictionaryRef *a5)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  uint64_t v63 = a2;
  uint64_t v61 = 0;
  int valuePtr = 1;
  if (!a3) {
    goto LABEL_101;
  }
  CFStringRef v5 = a1;
  if (!a1)
  {
    uint64_t v31 = FigSignalErrorAt();
LABEL_102:
    CFNumberRef v9 = 0;
LABEL_104:
    long long v12 = 0;
    CFNumberRef v10 = 0;
    goto LABEL_46;
  }
  if (!a5)
  {
LABEL_101:
    uint64_t v31 = FigSignalErrorAt();
    CFStringRef v5 = 0;
    goto LABEL_102;
  }
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFNumberRef v9 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
  if (!v9)
  {
    uint64_t v31 = FigSignalErrorAt();
    CFStringRef v5 = 0;
    goto LABEL_104;
  }
  CFNumberRef v10 = CFNumberCreate(v8, kCFNumberSInt64Type, &v63);
  if (!v10)
  {
    uint64_t v31 = FigSignalErrorAt();
    CFStringRef v5 = 0;
    long long v12 = 0;
    goto LABEL_46;
  }
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(v8, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  long long v12 = Mutable;
  if (!Mutable)
  {
    uint64_t v31 = FigSignalErrorAt();
    CFStringRef v5 = 0;
    goto LABEL_46;
  }
  CFDictionarySetValue(Mutable, @"Version", v9);
  unsigned int v13 = (const void *)*MEMORY[0x1E4F1CFC8];
  CFDictionarySetValue(v12, @"no-cache", (const void *)*MEMORY[0x1E4F1CFC8]);
  CFDictionarySetValue(v12, @"must-validate", v13);
  CFDictionarySetValue(v12, @"URL", v5);
  CFDictionarySetValue(v12, @"Size", v10);
  CFStringRef v14 = CFHTTPMessageCopyHeaderFieldValue(a3, @"Pragma");
  CFNumberRef v56 = v9;
  CFNumberRef v57 = v10;
  CGFloat v55 = a5;
  if (v14)
  {
    CFStringRef v15 = v14;
    locatioCFIndex n = CFStringFind(v14, @"no-cache", 1uLL).location;
    CFRelease(v15);
    if (location != -1)
    {
      CFDictionarySetValue(v12, @"no-cache", (const void *)*MEMORY[0x1E4F1CFD0]);
LABEL_14:
      CFDateRef v19 = 0;
      CFDateRef v20 = 0;
      CFDateRef v21 = 0;
      DateFromCFStringRef String = 0;
      CFStringRef v23 = 0;
      goto LABEL_15;
    }
  }
  CFStringRef v17 = CFHTTPMessageCopyHeaderFieldValue(a3, @"Cache-control");
  if (v17)
  {
    CFStringRef v18 = v17;
    if (CFStringFind(v17, @"no-cache", 1uLL).location != -1
      || CFStringFind(v18, @"no-store", 1uLL).location != -1)
    {
      CFDictionarySetValue(v12, @"no-cache", (const void *)*MEMORY[0x1E4F1CFD0]);
      CFRelease(v18);
      goto LABEL_14;
    }
    if (CFStringFind(v18, @"must-revalidate", 1uLL).location != -1) {
      CFDictionarySetValue(v12, @"must-validate", (const void *)*MEMORY[0x1E4F1CFD0]);
    }
    CFRange v33 = CFStringFind(v18, @"max-age=", 1uLL);
    if (v33.location != -1)
    {
      CFStringRef v34 = CFStringCreateWithSubstring(v8, v18, v33);
      if (v34)
      {
        CFStringRef v35 = v34;
        if (CFStringGetCString(v34, buffer, 128, 0x600u) && sscanf(v65, "%llu", &v61) != 1) {
          uint64_t v61 = 0;
        }
        CFRelease(v35);
      }
    }
    CFRelease(v18);
  }
  CFStringRef v36 = CFHTTPMessageCopyHeaderFieldValue(a3, @"Etag");
  if (v36)
  {
    CFStringRef v37 = v36;
    if (CFStringGetLength(v36) < 2) {
      goto LABEL_74;
    }
    v67.size_t length = CFStringGetLength(@"W/");
    v67.locatioCFIndex n = 0;
    CFComparisonResult v38 = CFStringCompareWithOptions(v37, @"W/", v67, 1uLL);
    CFIndex v39 = CFStringFind(v37, @"\"", 0).location;
    if (v39 == -1
      || (CFIndex v40 = v39,
          result.locatioCFIndex n = 0,
          result.size_t length = 0,
          CFIndex v41 = v39 + 1,
          v68.size_t length = CFStringGetLength(v37) - (v39 + 1),
          v68.locatioCFIndex n = v41,
          !CFStringFindWithOptions(v37, @"\"", v68, 0, &result)))
    {
LABEL_74:
      CFStringRef v23 = 0;
    }
    else
    {
      v69.size_t length = result.location - v40 + 1;
      v69.locatioCFIndex n = v40;
      CFStringRef v23 = CFStringCreateWithSubstring(v8, v37, v69);
      CFDictionarySetValue(v12, @"ETag", v23);
      if (v38) {
        uint64_t v42 = v13;
      }
      else {
        uint64_t v42 = (const void *)*MEMORY[0x1E4F1CFD0];
      }
      CFDictionarySetValue(v12, @"ETag weak", v42);
    }
    CFRelease(v37);
  }
  else
  {
    CFStringRef v23 = 0;
  }
  uint64_t v43 = figCFHTTPGetHTTPDateFormater();
  if (v43)
  {
    xpc_object_t v44 = (__CFDateFormatter *)v43;
    CFStringRef v45 = CFHTTPMessageCopyHeaderFieldValue(a3, @"Date");
    if (v45)
    {
      CFStringRef v46 = v45;
      DateFromCFStringRef String = CFDateFormatterCreateDateFromString(v8, v44, v45, 0);
      CFRelease(v46);
    }
    else
    {
      DateFromCFStringRef String = 0;
    }
    CFStringRef v47 = CFHTTPMessageCopyHeaderFieldValue(a3, @"Expires");
    if (v47)
    {
      CFStringRef v48 = v47;
      CFDateRef v21 = CFDateFormatterCreateDateFromString(v8, v44, v47, 0);
      CFRelease(v48);
    }
    else
    {
      CFDateRef v21 = 0;
    }
  }
  else
  {
    CFDateRef v21 = 0;
    DateFromCFStringRef String = 0;
  }
  CFStringRef v49 = CFHTTPMessageCopyHeaderFieldValue(a3, @"Last-Modified");
  if (v49)
  {
    CFStringRef v50 = v49;
    CFDictionarySetValue(v12, @"Last-Modified", v49);
    CFRelease(v50);
  }
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  CFDateRef v20 = CFDateCreate(v8, Current);
  if (DateFromString && CFDateCompare(DateFromString, v20, 0) == kCFCompareGreaterThan)
  {
    CFDateRef v19 = DateFromString;
    DateFromCFStringRef String = 0;
  }
  else
  {
    CFDateRef v19 = v20;
    CFDateRef v20 = 0;
  }
  uint64_t v52 = v61;
  if (v61)
  {
    if (v21)
    {
      CFRelease(v21);
      uint64_t v52 = v61;
    }
    double v53 = (double)v52;
    double v54 = MEMORY[0x199707BD0](v19);
    CFDateRef v21 = CFDateCreate(v8, v54 + v53);
  }
  if (v21) {
    CFDictionarySetValue(v12, @"Expires", v21);
  }
  if (!FigCFHTTPCopyFilenameFromContentDisposition(a3, 0, (CFStringRef *)&cf)) {
    CFDictionarySetValue(v12, @"FileName", cf);
  }
LABEL_15:
  ResponseStatusCFIndex Code = CFHTTPMessageGetResponseStatusCode(a3);
  if (ResponseStatusCode == 200 || ResponseStatusCode == 304 || ResponseStatusCode == 206)
  {
    CFStringRef v5 = FigCFHTTPCopyMimeTypeFromHTTPResponse(a3);
    if (v5) {
      CFDictionarySetValue(v12, @"MIME Type", v5);
    }
  }
  else
  {
    CFStringRef v5 = 0;
  }
  if (a4)
  {
    if (!CFDictionaryContainsKey(v12, @"MIME Type"))
    {
      CFStringRef Value = (const __CFString *)CFDictionaryGetValue(a4, @"MIME Type");
      if (Value)
      {
        CFStringRef v26 = Value;
        CFDictionarySetValue(v12, @"MIME Type", Value);
        CFHTTPMessageSetHeaderFieldValue(a3, @"Content-Type", v26);
      }
    }
    if (!CFDictionaryContainsKey(v12, @"Last-Modified"))
    {
      CFDictionaryRef v27 = CFDictionaryGetValue(a4, @"Last-Modified");
      if (v27) {
        CFDictionarySetValue(v12, @"Last-Modified", v27);
      }
    }
    if (!CFDictionaryContainsKey(v12, @"ETag"))
    {
      uint64_t v28 = CFDictionaryGetValue(a4, @"ETag");
      if (v28) {
        CFDictionarySetValue(v12, @"ETag", v28);
      }
    }
    if (!CFDictionaryContainsKey(v12, @"Expires"))
    {
      uint64_t v29 = CFDictionaryGetValue(a4, @"Expires");
      if (v29) {
        CFDictionarySetValue(v12, @"Expires", v29);
      }
    }
  }
  CFDictionaryRef Copy = CFDictionaryCreateCopy(v8, v12);
  if (!Copy)
  {
    uint64_t v31 = FigSignalErrorAt();
    if (!v23) {
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  uint64_t v31 = 0;
  *CGFloat v55 = Copy;
  if (v23) {
LABEL_36:
  }
    CFRelease(v23);
LABEL_37:
  if (v21) {
    CFRelease(v21);
  }
  CFNumberRef v10 = v57;
  if (v20) {
    CFRelease(v20);
  }
  if (DateFromString) {
    CFRelease(DateFromString);
  }
  if (v19) {
    CFRelease(v19);
  }
  CFNumberRef v9 = v56;
LABEL_46:
  if (cf) {
    CFRelease(cf);
  }
  if (v5) {
    CFRelease(v5);
  }
  if (v9) {
    CFRelease(v9);
  }
  if (v10) {
    CFRelease(v10);
  }
  if (v12) {
    CFRelease(v12);
  }
  return v31;
}

const void *FigCFHTTPMatchCacheHeaders(const __CFDictionary *a1, uint64_t a2, const __CFString *a3, int a4, const __CFDictionary *a5)
{
  if (!a1) {
    return 0;
  }
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a1, @"Version");
  if (!Value) {
    return 0;
  }
  uint64_t v28 = 0;
  int valuePtr = 0;
  if (!CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr)) {
    return 0;
  }
  if (valuePtr != 1) {
    return 0;
  }
  CFNumberRef v11 = (const __CFNumber *)CFDictionaryGetValue(a1, @"Size");
  if (!v11) {
    return 0;
  }
  int v12 = CFNumberGetValue(v11, kCFNumberSInt64Type, &v28);
  if (!a3) {
    return 0;
  }
  if (!v12) {
    return 0;
  }
  if (v28 != a2) {
    return 0;
  }
  CFStringRef v13 = (const __CFString *)CFDictionaryGetValue(a1, @"URL");
  if (!v13) {
    return 0;
  }
  CFStringRef v14 = v13;
  if (a4)
  {
    CFAllocatorRef v15 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFURLRef v16 = CFURLCreateWithString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a3, 0);
    if (v16)
    {
      CFURLRef v17 = v16;
      CFStringRef v18 = (const __CFString *)FigCFURLCreateCacheKey();
      CFRelease(v17);
    }
    else
    {
      CFStringRef v18 = 0;
    }
    CFURLRef v19 = CFURLCreateWithString(v15, v14, 0);
    if (v19)
    {
      CFURLRef v20 = v19;
      CFStringRef v21 = (const __CFString *)FigCFURLCreateCacheKey();
      CFRelease(v20);
      if (v18 && v21)
      {
        BOOL v22 = CFStringCompare(v18, v21, 0) != kCFCompareEqualTo;
LABEL_22:
        CFRelease(v18);
LABEL_23:
        if (v21) {
          CFRelease(v21);
        }
        if (v22) {
          return 0;
        }
        goto LABEL_26;
      }
    }
    else
    {
      CFStringRef v21 = 0;
    }
    BOOL v22 = 1;
    if (!v18) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  if (CFStringCompare(a3, v13, 0)) {
    return 0;
  }
LABEL_26:
  if (!a5) {
    return 0;
  }
  if (CFDictionaryContainsKey(a5, @"ETag"))
  {
    CFStringRef v23 = CFDictionaryGetValue(a5, @"ETag");
    CFRange result = CFDictionaryGetValue(a1, @"ETag");
    if (!result) {
      return result;
    }
    __int16 v25 = result;
    CFRange result = v23;
    return (const void *)CFEqual(result, v25);
  }
  CFRange result = (const void *)CFDictionaryContainsKey(a5, @"Last-Modified");
  if (result)
  {
    CFStringRef v26 = CFDictionaryGetValue(a5, @"Last-Modified");
    CFRange result = CFDictionaryGetValue(a1, @"Last-Modified");
    if (result)
    {
      __int16 v25 = v26;
      return (const void *)CFEqual(result, v25);
    }
  }
  return result;
}

uint64_t FigCFHTTPVIAHeaderIsCacheHit(const __CFString *a1)
{
  locatioCFIndex n = CFStringFind(a1, @"[", 0).location;
  unint64_t v3 = CFStringFind(a1, @"]", 0).location + ~location;
  BOOL v4 = v3 > 0x18;
  uint64_t v5 = (1 << v3) & 0x1000060;
  if (v4 || v5 == 0) {
    return 0xFFFFFFFFLL;
  }
  CharacterAtIndeCGFloat x = CFStringGetCharacterAtIndex(a1, location + 4);
  return CharacterAtIndex == 72 || CharacterAtIndex == 82;
}

uint64_t FigCFHTTPCreateRTCReportingAppleCDNVIAEdgeDomainString(__CFHTTPMessage *a1, CFStringRef *a2)
{
  CFStringRef v3 = CFHTTPMessageCopyHeaderFieldValue(a1, @"Via");
  if (!v3) {
    return 4294954510;
  }
  CFStringRef v4 = v3;
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v3, @",");
  if (!ArrayBySeparatingStrings)
  {
    uint64_t v20 = FigSignalErrorAt();
    CFStringRef v18 = (__CFArray *)v4;
LABEL_22:
    CFRelease(v18);
    return v20;
  }
  CFArrayRef v7 = ArrayBySeparatingStrings;
  CFIndex Count = CFArrayGetCount(ArrayBySeparatingStrings);
  if (Count < 1)
  {
    CFArrayRef v11 = 0;
LABEL_15:
    CFArrayRef v14 = 0;
    goto LABEL_16;
  }
  CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v7, Count - 1);
  CFArrayRef v10 = CFStringCreateArrayBySeparatingStrings(v5, ValueAtIndex, @" ");
  CFArrayRef v11 = v10;
  if (!v10 || CFArrayGetCount(v10) < 3) {
    goto LABEL_15;
  }
  CFStringRef v12 = (const __CFString *)CFArrayGetValueAtIndex(v11, 2);
  CFArrayRef v13 = CFStringCreateArrayBySeparatingStrings(v5, v12, @"-");
  CFArrayRef v14 = v13;
  if (!v13)
  {
    uint64_t v20 = FigSignalErrorAt();
    CFStringRef v18 = 0;
    goto LABEL_17;
  }
  CFIndex v15 = CFArrayGetCount(v13);
  if (v15 < 2)
  {
LABEL_16:
    CFStringRef v18 = 0;
    uint64_t v20 = 4294954516;
    goto LABEL_17;
  }
  CFIndex v16 = v15;
  CFMutableArrayRef Mutable = CFArrayCreateMutable(v5, 0, MEMORY[0x1E4F1D510]);
  CFStringRef v18 = Mutable;
  if (Mutable
    && (v22.size_t length = v16 - 1,
        v22.locatioCFIndex n = 0,
        CFArrayAppendArray(Mutable, v14, v22),
        (CFStringRef v19 = CFStringCreateByCombiningStrings(v5, v18, @"-")) != 0))
  {
    uint64_t v20 = 0;
    *a2 = v19;
  }
  else
  {
    uint64_t v20 = FigSignalErrorAt();
  }
LABEL_17:
  CFRelease(v4);
  CFRelease(v7);
  if (v11) {
    CFRelease(v11);
  }
  if (v14) {
    CFRelease(v14);
  }
  if (v18) {
    goto LABEL_22;
  }
  return v20;
}

CFHTTPMessageRef FigCFHTTPCreateHTTPMessageFromHTTPResponseHeaders(const void *a1)
{
  if (!a1) {
    return 0;
  }
  CFAllocatorRef v2 = CFGetAllocator(a1);
  EmptCGFloat y = CFHTTPMessageCreateEmpty(v2, 0);
  if (Empty) {
    CFDictionaryApplyFunction((CFDictionaryRef)a1, (CFDictionaryApplierFunction)figCFHTTPMessageSetAllHeaderFieldsFromDictionary, Empty);
  }
  return Empty;
}

void figCFHTTPMessageSetAllHeaderFieldsFromDictionary(CFStringRef headerField, CFStringRef value, CFHTTPMessageRef message)
{
}

uint64_t FigCFHTTPCreateCFErrorFromHTTPStatusCode(uint64_t a1, CFErrorRef *a2)
{
  LODWORD(code) = 0;
  CFTypeRef cf = 0;
  if (!a1) {
    a1 = 200;
  }
  FigCFHTTPCopyErrorCodeAndCommentForHTTPStatusCode(a1, &code, &cf);
  CFErrorRef v3 = 0;
  CFDictionaryRef v4 = 0;
  if (code) {
    BOOL v5 = cf == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5
    || (CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80],
        (CFDictionaryRef v4 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], MEMORY[0x1E4F1D140], &cf, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540])) != 0)&& (v3 = CFErrorCreate(v6, @"CoreMediaErrorDomain", (int)code, v4)) != 0)
  {
    uint64_t v7 = 0;
    *a2 = v3;
  }
  else
  {
    uint64_t v7 = FigSignalErrorAt();
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v4) {
    CFRelease(v4);
  }
  return v7;
}

uint64_t FigCFHTTPCopyErrorCodeAndCommentForHTTPStatusCode(uint64_t a1, _DWORD *a2, void *a3)
{
  CFStringRef v6 = 0;
  int v7 = 0;
  if (a1 > 303)
  {
    switch(a1)
    {
      case 401:
        int v7 = FigSignalErrorAt();
        CFStringRef v6 = @"HTTP 401: Unauthorized";
        break;
      case 402:
      case 405:
      case 406:
      case 408:
      case 411:
      case 412:
      case 413:
      case 414:
      case 415:
      case 417:
        goto LABEL_5;
      case 403:
        int v7 = FigSignalErrorAt();
        CFStringRef v6 = @"HTTP 403: Forbidden";
        break;
      case 404:
        int v7 = FigSignalErrorAt();
        CFStringRef v6 = @"HTTP 404: File Not Found";
        break;
      case 407:
        int v7 = FigSignalErrorAt();
        CFStringRef v6 = @"HTTP 407: Proxy Authentication Required";
        break;
      case 409:
        int v7 = FigSignalErrorAt();
        CFStringRef v6 = @"HTTP 409: Conflict";
        break;
      case 410:
        int v7 = FigSignalErrorAt();
        CFStringRef v6 = @"HTTP 410: Gone";
        break;
      case 416:
        int v7 = FigSignalErrorAt();
        CFStringRef v6 = @"HTTP 416: Requested Range Not Satisfiable";
        break;
      case 418:
        int v7 = FigSignalErrorAt();
        CFStringRef v6 = @"HTTP 418: Teapot";
        break;
      default:
        switch(a1)
        {
          case 500:
            int v7 = FigSignalErrorAt();
            CFStringRef v6 = @"HTTP 500: Internal Server Error";
            break;
          case 501:
            goto LABEL_5;
          case 502:
            int v7 = FigSignalErrorAt();
            CFStringRef v6 = @"HTTP 502: Bad Gateway";
            break;
          case 503:
            int v7 = FigSignalErrorAt();
            CFStringRef v6 = @"HTTP 503: Service Unavailable";
            break;
          case 504:
            int v7 = FigSignalErrorAt();
            CFStringRef v6 = @"HTTP 504: Gateway Timeout";
            break;
          default:
            if (a1 != 304) {
              goto LABEL_5;
            }
            break;
        }
        break;
    }
  }
  else if (a1 != 200 && a1 != 206 && a1 != 302)
  {
LABEL_5:
    int v7 = FigSignalErrorAt();
    CFStringRef v6 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"HTTP %d: (unhandled)", a1);
  }
  if (a2) {
    *a2 = v7;
  }
  if (a3)
  {
    if (v6) {
      CFTypeRef v8 = CFRetain(v6);
    }
    else {
      CFTypeRef v8 = 0;
    }
    *a3 = v8;
  }
  if (v6) {
    CFRelease(v6);
  }
  return 0;
}

CFURLRef FigCFHTTPCopyRedirectLocationFromHTTPHeaders(const __CFDictionary *a1)
{
  if (!a1) {
    return 0;
  }
  CFStringRef Value = (const __CFString *)CFDictionaryGetValue(a1, @"Location");
  if (!Value) {
    return 0;
  }
  CFStringRef v2 = Value;
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];

  return CFURLCreateWithString(v3, v2, 0);
}

uint64_t FigCFHTTPCreateHTTPRequestOptionsFromAssetCreationOptions(const __CFAllocator *a1, uint64_t a2, __CFDictionary **a3)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    CFStringRef v6 = Mutable;
    if (a2)
    {
      FigCFDictionarySetValueFromKeyInDict();
      FigCFDictionarySetValueFromKeyInDict();
      FigCFDictionarySetValueFromKeyInDict();
      FigCFDictionarySetValueFromKeyInDict();
      FigCFDictionarySetValueFromKeyInDict();
      FigCFDictionarySetValueFromKeyInDict();
      FigCFDictionarySetValueFromKeyInDict();
      FigCFDictionarySetValueFromKeyInDict();
      FigCFDictionarySetValueFromKeyInDict();
      FigCFDictionarySetValueFromKeyInDict();
      FigCFDictionarySetValueFromKeyInDict();
      FigCFDictionarySetValueFromKeyInDict();
      FigCFDictionarySetValueFromKeyInDict();
      FigCFDictionarySetValueFromKeyInDict();
      if (!FigCFDictionaryGetValue())
      {
        CFDataRef Value = (const __CFData *)FigCFDictionaryGetValue();
        CFTypeRef v8 = (const void *)FigCFHTTPCopyClientBundleIdentifier(Value);
        if (v8)
        {
          CFNumberRef v9 = v8;
          CFDictionarySetValue(v6, @"FHRP_ClientBundleIdentifier", v8);
          CFRelease(v9);
        }
      }
    }
    *a3 = v6;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigCFHTTPCreateCommonHTTPHeadersFromAssetCreationOptions(const __CFAllocator *a1, uint64_t a2, unint64_t a3, __CFDictionary **a4)
{
  if (a2) {
    DictionaryCFDataRef Value = FigCFDictionaryGetDictionaryValue();
  }
  else {
    DictionaryCFDataRef Value = 0;
  }
  if (!(a3 | DictionaryValue))
  {
    CFNumberRef v9 = 0;
LABEL_12:
    *a4 = v9;
    return 0;
  }
  if (DictionaryValue) {
    MutableCFDictionaryRef Copy = CFDictionaryCreateMutableCopy(a1, 0, (CFDictionaryRef)DictionaryValue);
  }
  else {
    MutableCFDictionaryRef Copy = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  }
  CFNumberRef v9 = MutableCopy;
  if (MutableCopy)
  {
    if (a3) {
      CFDictionaryAddValue(MutableCopy, @"X-Playback-Session-Id", (const void *)a3);
    }
    goto LABEL_12;
  }

  return FigSignalErrorAt();
}

uint64_t FigNSHTTPGetNetworkServiceType(int a1)
{
  return 8 * (a1 == 1);
}

uint64_t FigNSHTTPCreateSerializedObjectFromNSSecureCoding(uint64_t a1)
{
  CFStringRef v2 = (void *)[objc_alloc(MEMORY[0x1E4F28DB0]) initRequiringSecureCoding:1];
  [v2 encodeObject:a1 forKey:*MEMORY[0x1E4F284E8]];
  uint64_t v3 = [v2 encodedData];

  return v3;
}

void FigNSHTTPInitWithSerializedObject(void *a1, uint64_t a2)
{
  id v3 = (id)[objc_alloc(MEMORY[0x1E4F28DC0]) initForReadingFromData:a2 error:0];
  [a1 initWithCoder:v3];
  [v3 finishDecoding];
}

void FigHTTPStopAndReleaseTimer(dispatch_object_t *a1)
{
  CFStringRef v2 = *a1;
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*a1);
    *a1 = 0;
  }
}

void FigHTTPRescheduleTimer(double a1, uint64_t a2, NSObject *a3)
{
  if (a1 == 0.0) {
    int64_t v4 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    int64_t v4 = (uint64_t)(a1 * 1000000000.0);
  }
  dispatch_time_t v5 = dispatch_time(0, v4);

  dispatch_source_set_timer(a3, v5, 0x7FFFFFFFFFFFFFFFuLL, 0x989680uLL);
}

uint64_t FigHTTPCreateTimer(const void *a1, uint64_t a2, NSObject *a3, dispatch_object_t *a4, double a5)
{
  FigHTTPStopAndReleaseTimer(a4);
  dispatch_source_t v10 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, a3);
  *a4 = v10;
  if (v10 && (CFArrayRef v11 = v10, (v12 = malloc_type_calloc(1uLL, 0x18uLL, 0xC00407E72882DuLL)) != 0))
  {
    CFArrayRef v13 = v12;
    CFTypeRef v14 = CFRetain(a1);
    *CFArrayRef v13 = a2;
    v13[1] = v14;
    CMTime v13[2] = v11;
    dispatch_retain(v11);
    dispatch_set_context(v11, v13);
    dispatch_source_set_cancel_handler_f(v11, (dispatch_function_t)figHTTPDispatchTimerCanceledCallback);
    dispatch_source_set_event_handler_f(v11, (dispatch_function_t)figHTTPDispatchTimerEventCallback);
    dispatch_time_t v15 = dispatch_time(0, (uint64_t)(a5 * 1000000000.0));
    dispatch_source_set_timer(v11, v15, 0x7FFFFFFFFFFFFFFFuLL, 0x989680uLL);
    dispatch_resume(v11);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void figHTTPDispatchTimerCanceledCallback(uint64_t a1)
{
  if (a1)
  {
    CFStringRef v2 = *(const void **)(a1 + 8);
    if (v2) {
      CFRelease(v2);
    }
    dispatch_release(*(dispatch_object_t *)(a1 + 16));
    free((void *)a1);
  }
}

uint64_t figHTTPDispatchTimerEventCallback(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void, void))result)(*(void *)(result + 16), *(void *)(result + 8));
  }
  return result;
}

uint64_t FigHTTPSchedulerCreateLocal(const void *a1)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  MEMORY[0x19970EE10](&FigHTTPSchedulerCreateLocal_sInitOnce, shouldUseGlobalHTTPSchedulerGetPrefOnce);
  if (gShouldUseGlobalHTTPScheduler) {
    return 0;
  }
  snprintf(__str, 0x40uLL, "com.apple.coremedia.networkbuffering.bytepump.%p", a1);
  return FigDispatchQueueCreateWithPriority();
}

uint64_t shouldUseGlobalHTTPSchedulerGetPrefOnce()
{
  uint64_t result = FigGetCFPreferenceNumberWithDefault();
  gShouldUseGlobalHTTPScheduler = result;
  return result;
}

NSObject *FigHTTPSchedulerRetain(dispatch_object_t object)
{
  GlobalNetworkBufferingQueue = object;
  if (!object) {
    GlobalNetworkBufferingQueue = FigThreadGetGlobalNetworkBufferingQueue();
  }
  dispatch_retain(GlobalNetworkBufferingQueue);
  return GlobalNetworkBufferingQueue;
}

void FigHTTPSchedulerRelease(dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
}

uint64_t FigCFHTTPCreateURLReplacingQueryComponent(const void *a1, const __CFString *a2, void *a3)
{
  CFTypeRef v4 = a1;
  if (a1)
  {
    if (a2 && a3)
    {
      CFStringRef v6 = (void *)MEMORY[0x199711A30]();
      int v7 = (void *)[MEMORY[0x1E4F29088] componentsWithURL:v4 resolvingAgainstBaseURL:1];
      if (CFStringGetLength(a2) <= 0) {
        CFStringRef v8 = 0;
      }
      else {
        CFStringRef v8 = a2;
      }
      [v7 setPercentEncodedQuery:v8];
      CFNumberRef v9 = (const void *)[v7 URL];
      if (v9) {
        CFTypeRef v4 = CFRetain(v9);
      }
      else {
        CFTypeRef v4 = 0;
      }
      if (v4) {
        uint64_t v10 = 0;
      }
      else {
        uint64_t v10 = 4294954633;
      }
    }
    else
    {
      uint64_t v10 = FigSignalErrorAt();
      CFTypeRef v4 = 0;
    }
  }
  else
  {
    uint64_t v10 = FigSignalErrorAt();
  }
  *a3 = v4;
  return v10;
}

uint64_t FigCFHTTPCopyURLAndInheritQueyComponentIfNotPresent(const __CFURL *a1, CFURLRef *a2)
{
  if (a1)
  {
    CFStringRef String = CFURLCopyQueryString(a1, 0);
    if (String)
    {
      CFStringRef v4 = String;
      CFURLRef v5 = *a2;
      if (*a2)
      {
        CFStringRef v6 = CFURLCopyQueryString(*a2, 0);
        if (v6) {
          goto LABEL_5;
        }
        if (!FigCFHTTPIsDataURL(v5))
        {
          CFTypeRef cf = 0;
          uint64_t v9 = FigCFHTTPCreateURLReplacingQueryComponent(v5, v4, &cf);
          if (v9)
          {
            uint64_t v7 = v9;
            goto LABEL_9;
          }
          CFURLRef v10 = *a2;
          CFTypeRef v11 = cf;
          *a2 = (CFURLRef)cf;
          if (v11) {
            CFRetain(v11);
          }
          if (v10) {
            CFRelease(v10);
          }
          CFStringRef v6 = cf;
          if (cf) {
LABEL_5:
          }
            CFRelease(v6);
        }
        uint64_t v7 = 0;
      }
      else
      {
        uint64_t v7 = 4294954633;
      }
LABEL_9:
      CFRelease(v4);
      return v7;
    }
  }
  return 0;
}

__CFArray *FigCFHTTPCopyQueryParams(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (Mutable)
  {
    CFStringRef v4 = (void *)MEMORY[0x199711A30]();
    long long v14 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    CFURLRef v5 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F29088], "componentsWithURL:resolvingAgainstBaseURL:", a1, 1), "queryItems");
    uint64_t v6 = [v5 countByEnumeratingWithState:&v14 objects:v18 count:16];
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = *(void *)v15;
      while (2)
      {
        for (uint64_t i = 0; i != v7; ++i)
        {
          if (*(void *)v15 != v8) {
            objc_enumerationMutation(v5);
          }
          CFURLRef v10 = *(void **)(*((void *)&v14 + 1) + 8 * i);
          CFStringRef v11 = CFStringCreateWithFormat(v2, 0, @"%@=", [v10 name]);
          if (!v11 || (CFStringRef v12 = v11, ![v10 value]))
          {
            FigSignalErrorAt();
            goto LABEL_13;
          }
          CFArrayAppendValue(Mutable, v12);
          CFArrayAppendValue(Mutable, (const void *)[v10 value]);
          CFRelease(v12);
        }
        uint64_t v7 = [v5 countByEnumeratingWithState:&v14 objects:v18 count:16];
        if (v7) {
          continue;
        }
        break;
      }
    }
LABEL_13:
  }
  else
  {
    FigSignalErrorAt();
  }
  return Mutable;
}

uint64_t FigCFHTTPCopyQueryParamsAsDict(uint64_t a1, CFMutableDictionaryRef *a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (a2
    && (CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80],
        (CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540])) != 0))
  {
    CFMutableDictionaryRef v6 = Mutable;
    uint64_t context = (void *)MEMORY[0x199711A30]();
    long long v19 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    uint64_t v7 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F29088], "componentsWithURL:resolvingAgainstBaseURL:", a1, 1), "queryItems");
    uint64_t v8 = [v7 countByEnumeratingWithState:&v19 objects:v23 count:16];
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = *(void *)v20;
      while (2)
      {
        for (uint64_t i = 0; i != v9; ++i)
        {
          if (*(void *)v20 != v10) {
            objc_enumerationMutation(v7);
          }
          CFStringRef v12 = *(void **)(*((void *)&v19 + 1) + 8 * i);
          CFStringRef v13 = CFStringCreateWithFormat(v4, 0, @"%@", [v12 name]);
          if (!v13 || (CFStringRef v14 = CFStringCreateWithFormat(v4, 0, @"%@", [v12 value])) == 0)
          {
            uint64_t v16 = FigSignalErrorAt();
            CFRelease(v6);
            if (v13) {
              CFRelease(v13);
            }
            return v16;
          }
          CFStringRef v15 = v14;
          CFDictionaryAddValue(v6, v13, v14);
          CFRelease(v13);
          CFRelease(v15);
        }
        uint64_t v9 = [v7 countByEnumeratingWithState:&v19 objects:v23 count:16];
        if (v9) {
          continue;
        }
        break;
      }
    }
    *a2 = v6;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigCFHTTPCreateURLWithQueryParam(const __CFURL *a1, const __CFString *a2, uint64_t a3, void *a4)
{
  if (a1)
  {
    CFStringRef String = CFURLCopyQueryString(a1, 0);
    CFStringRef v10 = String;
    if (String && CFStringGetLength(String) >= 1)
    {
      StringMinusParauint64_t m = FigCFHTTPCreateQueryStringMinusParam(v10, a2);
      CFIndex Length = CFStringGetLength(StringMinusParam);
      CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      if (Length < 1) {
        CFStringRef v14 = CFStringCreateWithFormat(v13, 0, @"%@%@", a2, a3);
      }
      else {
        CFStringRef v14 = CFStringCreateWithFormat(v13, 0, @"%@&%@%@", StringMinusParam, a2, a3);
      }
      CFStringRef v15 = v14;
      if (StringMinusParam) {
        CFRelease(StringMinusParam);
      }
    }
    else
    {
      CFStringRef v15 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%@%@", a2, a3);
    }
    if (v15) {
      uint64_t Component = FigCFHTTPCreateURLReplacingQueryComponent(a1, v15, a4);
    }
    else {
      uint64_t Component = FigSignalErrorAt();
    }
    uint64_t v17 = Component;
    if (v10) {
      CFRelease(v10);
    }
    if (v15) {
      CFRelease(v15);
    }
    return v17;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

CFMutableStringRef FigCFHTTPCreateQueryStringMinusParam(const __CFString *a1, CFStringRef theString)
{
  CFIndex Length = CFStringGetLength(theString);
  CFIndex v5 = CFStringGetLength(a1);
  MutableCFDictionaryRef Copy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, a1);
  if (MutableCopy) {
    BOOL v7 = v5 < Length;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    uint64_t v8 = 0;
    do
    {
      v18.locatioCFIndex n = v8;
      v18.size_t length = Length;
      if (CFStringCompareWithOptions(MutableCopy, theString, v18, 0))
      {
        if (v5 >= 1)
        {
          do
          {
            unint64_t v9 = v5;
            CharacterAtIndeCGFloat x = CFStringGetCharacterAtIndex(MutableCopy, v8++);
            --v5;
          }
          while (v9 >= 2 && CharacterAtIndex != 38);
        }
      }
      else
      {
        CFIndex v11 = v8;
        CFIndex v12 = Length;
        if (v8 >= 1)
        {
          int v13 = CFStringGetCharacterAtIndex(MutableCopy, v8 - 1);
          if (v13 == 38) {
            CFIndex v11 = v8 - 1;
          }
          else {
            CFIndex v11 = v8;
          }
          if (v13 == 38) {
            CFIndex v12 = Length + 1;
          }
          else {
            CFIndex v12 = Length;
          }
        }
        if (v12 + v11 < v5 + v8)
        {
          do
          {
            CFIndex v14 = v11 + v12;
            int v15 = CFStringGetCharacterAtIndex(MutableCopy, v11 + v12++);
          }
          while (v14 + 1 < v5 + v8 && v15 != 38);
          if (v15 == 38) {
            v12 -= CFStringGetCharacterAtIndex(MutableCopy, v11) == 38;
          }
        }
        v17.locatioCFIndex n = v11;
        v17.size_t length = v12;
        CFStringDelete(MutableCopy, v17);
        v5 -= v12;
      }
    }
    while (v5 >= Length);
  }
  return MutableCopy;
}

uint64_t FigCFHTTPCreateURLMinusQueryParam(const __CFURL *a1, const __CFString *a2, void *a3)
{
  CFStringRef String = CFURLCopyQueryString(a1, 0);
  if (String)
  {
    CFStringRef v7 = String;
    if (CFStringGetLength(String) < 1)
    {
      CFTypeRef v12 = CFRetain(a1);
      uint64_t Component = 0;
      *a3 = v12;
    }
    else
    {
      StringMinusParauint64_t m = FigCFHTTPCreateQueryStringMinusParam(v7, a2);
      if (StringMinusParam)
      {
        CFStringRef v9 = StringMinusParam;
        uint64_t Component = FigCFHTTPCreateURLReplacingQueryComponent(a1, StringMinusParam, a3);
        CFRelease(v9);
      }
      else
      {
        uint64_t Component = FigSignalErrorAt();
      }
    }
    CFRelease(v7);
  }
  else
  {
    CFTypeRef v11 = CFRetain(a1);
    uint64_t Component = 0;
    *a3 = v11;
  }
  return Component;
}

uint64_t FigCFHTTPGetPriorityFromHTTPResponse(__CFHTTPMessage *a1, _DWORD *a2)
{
  int v7 = 0;
  if (a1 && (a1 = (__CFHTTPMessage *)CFHTTPMessageCopyHeaderFieldValue(a1, @"Priority")) != 0)
  {
    id v3 = a1;
    CStringPtrAndBufferToFree = (const char *)FigCFStringGetCStringPtrAndBufferToFree();
    if (sscanf(CStringPtrAndBufferToFree, "u=%d", &v7) == 1)
    {
      *a2 = v7;
      uint64_t v5 = 1;
    }
    else
    {
      uint64_t v5 = 0;
    }
    CFRelease(v3);
    a1 = 0;
  }
  else
  {
    uint64_t v5 = 0;
  }
  free(a1);
  return v5;
}

BOOL FigCFHTTPURLHostEqual(const __CFURL *a1, const __CFURL *a2)
{
  BOOL v2 = 0;
  if (a1 && a2)
  {
    CFStringRef v4 = CFURLCopyHostName(a1);
    if (v4)
    {
      CFStringRef v5 = v4;
      CFStringRef v6 = CFURLCopyHostName(a2);
      if (v6)
      {
        CFStringRef v7 = v6;
        BOOL v2 = CFStringCompare(v5, v6, 1uLL) == kCFCompareEqualTo;
        CFRelease(v5);
        CFStringRef v5 = v7;
      }
      else
      {
        BOOL v2 = 0;
      }
      CFRelease(v5);
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t FigCFHTTPCreateURLWithHostReplacement(CFURLRef relativeURL, uint64_t a2, CFURLRef *a3)
{
  if (!a3) {
    return 0;
  }
  *a3 = 0;
  if (!relativeURL) {
    return 0;
  }
  CFURLRef v6 = CFURLCopyAbsoluteURL(relativeURL);
  if (v6)
  {
    CFURLRef v7 = v6;
    CFIndex v8 = CFURLGetBytes(v6, 0, 0);
    CFRange v9 = CFURLGetByteRangeForComponent(v7, kCFURLComponentHost, 0);
    if (v8 < 1 || v9.length <= 0)
    {
      CFURLRef v20 = (const __CFURL *)CFRetain(relativeURL);
      CFStringRef v10 = 0;
      uint64_t v18 = 0;
      *a3 = v20;
LABEL_39:
      free(v10);
LABEL_30:
      CFRelease(v7);
      return v18;
    }
    CFStringRef v10 = malloc_type_malloc(v8, 0x93556585uLL);
    if (!v10 || CFURLGetBytes(v7, (UInt8 *)v10, v8) != v8)
    {
LABEL_38:
      uint64_t v18 = FigSignalErrorAt();
      goto LABEL_39;
    }
    CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    if (v9.location < 1)
    {
      CFStringRef v12 = 0;
    }
    else
    {
      CFStringRef v12 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const UInt8 *)v10, v9.location, 0x600u, 0);
      if (!v12) {
        goto LABEL_38;
      }
    }
    if (v8 <= v9.location + v9.length)
    {
      CFStringRef v13 = 0;
    }
    else
    {
      CFStringRef v13 = CFStringCreateWithBytes(v11, (const UInt8 *)v10 + v9.location + v9.length, v8 - (v9.location + v9.length), 0x600u, 0);
      if (!v13)
      {
        CFStringRef v14 = 0;
        goto LABEL_32;
      }
    }
    int v15 = &stru_1EE53F4B8;
    if (v12) {
      uint64_t v16 = (__CFString *)v12;
    }
    else {
      uint64_t v16 = &stru_1EE53F4B8;
    }
    if (v13) {
      int v15 = (__CFString *)v13;
    }
    CFStringRef v14 = CFStringCreateWithFormat(v11, 0, @"%@%@%@", v16, a2, v15);
    if (v14)
    {
      CFURLRef v17 = CFURLCreateWithString(v11, v14, 0);
      *a3 = v17;
      if (v17)
      {
        uint64_t v18 = 0;
LABEL_24:
        free(v10);
        if (v12) {
          CFRelease(v12);
        }
        if (v13) {
          CFRelease(v13);
        }
        if (v14) {
          CFRelease(v14);
        }
        goto LABEL_30;
      }
    }
LABEL_32:
    uint64_t v18 = FigSignalErrorAt();
    goto LABEL_24;
  }

  return FigSignalErrorAt();
}

uint64_t FigCFHTTPCreatePropertyListFromJSON(uint64_t a1, CFTypeRef *a2)
{
  CFStringRef v4 = (void *)MEMORY[0x199711A30]();
  if (a1
    && (CFStringRef v5 = (const void *)[MEMORY[0x1E4F28D90] JSONObjectWithData:a1 options:0 error:0]) != 0)
  {
    uint64_t v6 = 0;
    *a2 = CFRetain(v5);
  }
  else
  {
    uint64_t v6 = 4294954410;
  }
  return v6;
}

uint64_t MTGetCaption2015Behavior()
{
  return 0;
}

uint64_t MTEnableCaption2015Behavior()
{
  return 0;
}

uint64_t FigCFHTTPCopyPathComponentRelativeToURL(void *a1, void *a2, void *a3)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (void *)MEMORY[0x199711A30]();
  CFURLRef v7 = (void *)[MEMORY[0x1E4F1CA48] array];
  if (!objc_msgSend((id)objc_msgSend(a1, "scheme"), "isEqual:", objc_msgSend(a2, "scheme"))
    || !objc_msgSend((id)objc_msgSend(a1, "host"), "isEqual:", objc_msgSend(a2, "host"))
    || (uint64_t v8 = [a1 port], v8 != objc_msgSend(a2, "port")))
  {
    CFRange v9 = 0;
    CFStringRef v10 = 0;
    goto LABEL_28;
  }
  CFRange v9 = objc_msgSend((id)objc_msgSend(a1, "pathComponents"), "mutableCopy");
  CFStringRef v10 = objc_msgSend((id)objc_msgSend(a2, "pathComponents"), "mutableCopy");
  if ((unint64_t)[v9 count] < 2)
  {
LABEL_28:
    uint64_t v20 = 4294954633;
    goto LABEL_26;
  }
  if (FigCFHTTPIsHTTPBasedURL((const __CFURL *)a2) && ![v10 count]) {
    [v10 addObject:@"/"];
  }
  long long v22 = a3;
  uint64_t v11 = [v9 lastObject];
  [v9 removeLastObject];
  while ([v9 count]
       && [v10 count]
       && objc_msgSend((id)objc_msgSend(v9, "firstObject"), "isEqual:", objc_msgSend(v10, "firstObject")))
  {
    [v9 removeObjectAtIndex:0];
    [v10 removeObjectAtIndex:0];
  }
  CFStringRef v12 = v6;
  uint64_t v13 = [v10 count];
  if (v13 - 1 >= 1)
  {
    unint64_t v14 = v13;
    do
    {
      [v7 addObject:@".."];
      --v14;
    }
    while (v14 > 1);
  }
  [v7 addObjectsFromArray:v9];
  id v15 = objc_alloc_init(MEMORY[0x1E4F28E78]);
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  uint64_t v16 = [v7 countByEnumeratingWithState:&v23 objects:v27 count:16];
  if (v16)
  {
    uint64_t v17 = v16;
    uint64_t v18 = *(void *)v24;
    do
    {
      uint64_t v19 = 0;
      do
      {
        if (*(void *)v24 != v18) {
          objc_enumerationMutation(v7);
        }
        [v15 appendString:*(void *)(*((void *)&v23 + 1) + 8 * v19)];
        [v15 appendString:@"/"];
        ++v19;
      }
      while (v17 != v19);
      uint64_t v17 = [v7 countByEnumeratingWithState:&v23 objects:v27 count:16];
    }
    while (v17);
  }
  if (v11) {
    [v15 appendString:v11];
  }
  uint64_t v20 = 0;
  *long long v22 = v15;
  uint64_t v6 = v12;
LABEL_26:

  return v20;
}

uint64_t FigCFHTTPCreatePercentEncodedString(void *a1, int a2, void *a3)
{
  uint64_t v6 = (void *)MEMORY[0x199711A30]();
  switch(a2)
  {
    case 1:
      uint64_t v7 = [MEMORY[0x1E4F28B88] URLUserAllowedCharacterSet];
      goto LABEL_9;
    case 2:
      uint64_t v7 = [MEMORY[0x1E4F28B88] URLPasswordAllowedCharacterSet];
      goto LABEL_9;
    case 3:
      uint64_t v7 = [MEMORY[0x1E4F28B88] URLHostAllowedCharacterSet];
      goto LABEL_9;
    case 4:
      uint64_t v7 = [MEMORY[0x1E4F28B88] URLPathAllowedCharacterSet];
      goto LABEL_9;
    case 5:
      uint64_t v7 = [MEMORY[0x1E4F28B88] URLQueryAllowedCharacterSet];
      goto LABEL_9;
    case 6:
      uint64_t v7 = [MEMORY[0x1E4F28B88] URLFragmentAllowedCharacterSet];
LABEL_9:
      id v9 = (id)[a1 stringByAddingPercentEncodingWithAllowedCharacters:v7];
      uint64_t v8 = 0;
      *a3 = v9;
      break;
    default:
      uint64_t v8 = 4294954516;
      break;
  }
  return v8;
}

CMTimebaseRef createTimebaseWithMasterClock_0(uint64_t a1, OpaqueCMClock *HostTimeClock)
{
  CMTimebaseRef timebaseOut = 0;
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (!HostTimeClock) {
    HostTimeClocuint64_t k = CMClockGetHostTimeClock();
  }
  CMTimebaseRef result = (CMTimebaseRef)CMTimebaseCreateWithSourceClock(v3, HostTimeClock, &timebaseOut);
  if (!result)
  {
    if (timebaseOut)
    {
      fcrTrigger_setTimebase(a1, timebaseOut);
      *(unsigned char *)(a1 + 88) = 0;
      CMTimebaseRef result = timebaseOut;
      if (!timebaseOut) {
        return result;
      }
      CFRelease(timebaseOut);
    }
    return 0;
  }
  return result;
}

uint64_t FigCaptionRendererTriggerSetTimebase(uint64_t a1, const void *a2)
{
  if (a1)
  {
    if (a2)
    {
      fcrTrigger_setTimebase(a1, a2);
      *(unsigned char *)(a1 + 88) = 1;
    }
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void fcrTrigger_setTimebase(uint64_t a1, CFTypeRef cf)
{
  CFTypeRef v2 = *(CFTypeRef *)(a1 + 80);
  if (v2 != cf)
  {
    if (v2)
    {
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterRemoveListener();
      CFStringRef v5 = *(const void **)(a1 + 80);
      *(void *)(a1 + 80) = cf;
      CFRetain(cf);
      if (v5) {
        CFRelease(v5);
      }
    }
    else
    {
      *(void *)(a1 + 80) = cf;
      CFRetain(cf);
    }
    if (*(void *)(a1 + 80))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterAddListener();
    }
  }
}

NSObject *FigCaptionRendererTriggerScheduleEvent(uint64_t a1, uint64_t a2, long long *a3)
{
  unsigned int v9 = 0;
  if (a1)
  {
    CMTimebaseRef result = *(NSObject **)(a1 + 104);
    if (result)
    {
      context[0] = a1;
      context[1] = a2;
      long long v6 = *a3;
      uint64_t v7 = *((void *)a3 + 2);
      uint64_t v8 = &v9;
      dispatch_sync_f(result, context, (dispatch_function_t)scheduleEventDo_0);
      return v9;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t scheduleEventDo_0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  CMTime v11 = *(CMTime *)(a1 + 2);
  CFAllocatorRef v3 = *(OpaqueCMTimebase **)(v2 + 80);
  if (v3)
  {
    if (CMTimebaseGetRate(v3) != 0.0 && !FigCDSTimerIsOn(*(void *)(v2 + 40))) {
      FigCaptionRendererTimerStart(*(void *)(v2 + 40));
    }
    CMTime time = v11;
    double Seconds = CMTimeGetSeconds(&time);
    memset(&v9, 0, sizeof(v9));
    CMTimebaseGetTime(&v9, *(CMTimebaseRef *)(v2 + 80));
    CMTime time = v9;
    double v8 = Seconds - CMTimeGetSeconds(&time);
    CFNumberRef v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberCGFloatType, &v8);
    CFArrayAppendValue(*(CFMutableArrayRef *)(v2 + 96), v5);
    CFRelease(v5);
    uint64_t result = 0;
  }
  else
  {
    uint64_t result = FigSignalErrorAt();
  }
  uint64_t v7 = (_DWORD *)a1[5];
  if (v7) {
    *uint64_t v7 = result;
  }
  return result;
}

uint64_t FigCaptionRendererTriggerCreate(OpaqueCMClock *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  *a6 = 0;
  if (a2 < 1) {
    return 4294950096;
  }
  CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  MEMORY[0x19970EE10](&FigCaptionRendererTriggerLocalGetTypeID_sRegisterFigCaptionRendererTriggerOnce, RegisterFigCaptionRendererTriggerClass);
  uint64_t Instance = _CFRuntimeCreateInstance();
  *(_WORD *)(Instance + 88) = 0;
  *(unsigned char *)(Instance + 90) = 0;
  CMTimeMake(&v18, 0, 1);
  *(CMTime *)(Instance + 52) = v18;
  if (a3 | a4)
  {
    if (a5)
    {
      *(void *)(Instance + 24) = a3;
      *(void *)(Instance + 32) = a4;
      uint64_t v14 = FigCFWeakReferenceHolderCreateWithReferencedObject();
      *(void *)(Instance + 16) = v14;
      if (!v14)
      {
        uint64_t v16 = FigSignalErrorAt();
        goto LABEL_9;
      }
    }
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable(v12, 0, MEMORY[0x1E4F1D510]);
  *(void *)(Instance + 96) = Mutable;
  if (!Mutable)
  {
    uint64_t v16 = 0;
    goto LABEL_9;
  }
  createTimebaseWithMasterClock_0(Instance, a1);
  __sprintf_chk(label, 0, 0x100uLL, "com.apple.cktrigger._jobQueue<%p>", (const void *)Instance);
  *(void *)(Instance + 104) = dispatch_queue_create(label, 0);
  *(_DWORD *)(Instance + 48) = a2;
  uint64_t v16 = FigCaptionRendererTimerCreate(a2, (uint64_t)onTimerTimeout_0, Instance, (uint64_t *)(Instance + 40));
  if (v16)
  {
LABEL_9:
    CFRelease((CFTypeRef)Instance);
    return v16;
  }
  *a6 = Instance;
  return v16;
}

void onTimerTimeout_0(uint64_t a1)
{
  if (*(void *)(a1 + 104))
  {
    uint64_t v2 = malloc_type_calloc(1uLL, 8uLL, 0x2004093837F09uLL);
    if (!v2) {
      return;
    }
    *uint64_t v2 = a1;
    dispatch_sync_f(*(dispatch_queue_t *)(a1 + 104), v2, (dispatch_function_t)onTimerTimeoutDo_0);
  }
  if (*(void *)(a1 + 32))
  {
    CFAllocatorRef v3 = *(OpaqueCMTimebase **)(a1 + 80);
    if (v3)
    {
      memset(&v8, 0, sizeof(v8));
      CMTimebaseGetTime(&v8, v3);
      uint64_t v4 = FigCFWeakReferenceHolderCopyReferencedObject();
      if (v4)
      {
        CFNumberRef v5 = (const void *)v4;
        long long v6 = *(void (**)(CMTime *, uint64_t))(a1 + 32);
        CMTime v7 = v8;
        v6(&v7, v4);
        CFRelease(v5);
      }
    }
    else
    {
      FigSignalErrorAt();
    }
  }
}

uint64_t RegisterFigCaptionRendererTriggerClass()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sFigCaptionRendererTriggerID = result;
  return result;
}

double FigCaptionRendererTriggerInit(_OWORD *a1)
{
  double result = 0.0;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  return result;
}

void FigCaptionRendererTrigger_Finalize(uint64_t a1)
{
  dispatch_release(*(dispatch_object_t *)(a1 + 104));
  uint64_t v2 = *(const void **)(a1 + 96);
  if (v2) {
    CFRelease(v2);
  }
  CFAllocatorRef v3 = *(const void **)(a1 + 40);
  if (v3) {
    CFRelease(v3);
  }
  if (*(void *)(a1 + 80))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    if (!*(unsigned char *)(a1 + 88)) {
      CMTimebaseSetRate(*(CMTimebaseRef *)(a1 + 80), 0.0);
    }
    uint64_t v4 = *(const void **)(a1 + 80);
    if (v4) {
      CFRelease(v4);
    }
  }
  CFNumberRef v5 = *(const void **)(a1 + 16);
  if (v5)
  {
    CFRelease(v5);
  }
}

__CFString *FigCaptionRendererTriggerCopyDebugDescription(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<FigCaptionRendererTrigger %p>", a1);
  return Mutable;
}

void fcrTrigger_timebaseRateChanged(uint64_t a1, uint64_t a2)
{
  float Rate = CMTimebaseGetRate(*(CMTimebaseRef *)(a2 + 80));
  if (Rate == 0.0 && !*(unsigned char *)(a2 + 90))
  {
    FigCDSTriggerPause(a2);
  }
  else if (Rate != 0.0 && *(unsigned char *)(a2 + 90))
  {
    FigCDSTriggerResume(a2);
  }
}

void onTimerTimeoutDo_0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (!*(unsigned char *)(*a1 + 90))
  {
    if (!CFArrayGetCount(*(CFArrayRef *)(v2 + 96)) && FigCDSTimerIsOn(*(void *)(v2 + 40))) {
      FigCDSTimerStop(*(void *)(v2 + 40));
    }
    if (CFArrayGetCount(*(CFArrayRef *)(v2 + 96)) >= 1)
    {
      CFIndex v3 = 0;
      int v4 = 0;
      int v5 = 0;
      CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      do
      {
        CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v2 + 96), v3);
        valuePtr.xpc_object_t value = 0;
        CFNumberGetValue(ValueAtIndex, kCFNumberCGFloatType, &valuePtr);
        if (*(double *)&valuePtr.value <= 0.0)
        {
          CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v2 + 96), v3);
          --v4;
          int v5 = 1;
        }
        else
        {
          *(double *)&valuePtr.xpc_object_t value = *(double *)&valuePtr.value + (double)*(int *)(v2 + 48) / -1000.0;
          CFNumberRef v8 = CFNumberCreate(v6, kCFNumberCGFloatType, &valuePtr);
          CFArraySetValueAtIndex(*(CFMutableArrayRef *)(v2 + 96), v3, v8);
          CFRelease(v8);
        }
        CFIndex v3 = ++v4;
      }
      while (CFArrayGetCount(*(CFArrayRef *)(v2 + 96)) > v4);
      if (v5 && *(void *)(v2 + 24))
      {
        CMTime v9 = *(OpaqueCMTimebase **)(v2 + 80);
        if (v9)
        {
          memset(&valuePtr, 0, sizeof(valuePtr));
          CMTimebaseGetTime(&valuePtr, v9);
          uint64_t v10 = FigCFWeakReferenceHolderCopyReferencedObject();
          if (v10)
          {
            CMTime v11 = (const void *)v10;
            CFAllocatorRef v12 = *(void (**)(void, CMTime *, uint64_t))(v2 + 24);
            CMTime v13 = valuePtr;
            v12(0, &v13, v10);
            CFRelease(v11);
          }
        }
        else
        {
          FigSignalErrorAt();
        }
      }
    }
  }
  free(a1);
}

uint64_t FigStreamingCacheGetTypeID()
{
  if (sRegisterFigStreamingCacheTypeOnce != -1) {
    dispatch_once_f(&sRegisterFigStreamingCacheTypeOnce, 0, (dispatch_function_t)RegisterFigStreamingCacheType);
  }
  return sFigStreamingCacheID;
}

uint64_t RegisterFigStreamingCacheType()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sFigStreamingCacheID = result;
  return result;
}

uint64_t FigStreamingCacheSetProperty(uint64_t a1, const void *a2, const void *a3)
{
  if (a1 && a2)
  {
    MEMORY[0x19970E290](*(void *)(a1 + 16));
    if (!*(unsigned char *)(a1 + 272))
    {
      if (CFEqual(a2, @"FSC_MinOverlappedDuration"))
      {
        if (a3)
        {
          CFTypeID v6 = CFGetTypeID(a3);
          if (v6 == CFNumberGetTypeID())
          {
            CFNumberGetValue((CFNumberRef)a3, kCFNumberDoubleType, (void *)(a1 + 80));
LABEL_15:
            uint64_t v9 = 0;
            goto LABEL_16;
          }
        }
      }
      else
      {
        if (!CFEqual(a2, @"FSC_IsDonor")) {
          goto LABEL_15;
        }
        if (a3)
        {
          CFTypeID v7 = CFGetTypeID(a3);
          if (v7 == CFBooleanGetTypeID() && (*(unsigned char *)(a1 + 220) & 2) == 0 && *(void *)(a1 + 136))
          {
            Boolean Value = CFBooleanGetValue((CFBooleanRef)a3);
            uint64_t v9 = 0;
            *(unsigned char *)(a1 + 144) = Value;
LABEL_16:
            MEMORY[0x19970E2B0](*(void *)(a1 + 16));
            return v9;
          }
        }
      }
    }
    uint64_t v9 = FigSignalErrorAt();
    goto LABEL_16;
  }

  return FigSignalErrorAt();
}

uint64_t FigStreamingCacheCopyProperty(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  if (a1 && a2 && a4)
  {
    MEMORY[0x19970E290](*(void *)(a1 + 16));
    if (*(unsigned char *)(a1 + 272))
    {
      uint64_t v16 = FigSignalErrorAt();
    }
    else
    {
      if (CFEqual(a2, @"FSC_DownloadDestinationURL"))
      {
        CFTypeRef v7 = *(CFTypeRef *)(a1 + 40);
        if (!v7)
        {
LABEL_8:
          uint64_t v8 = 0;
          *a4 = v7;
LABEL_15:
          MEMORY[0x19970E2B0](*(void *)(a1 + 16));
          return v8;
        }
LABEL_7:
        CFTypeRef v7 = CFRetain(v7);
        goto LABEL_8;
      }
      if (CFEqual(a2, @"FSC_IsDiskBacked"))
      {
        uint64_t v8 = 0;
        if ((*(_DWORD *)(a1 + 220) & 2) != 0) {
          uint64_t v9 = (uint64_t *)MEMORY[0x1E4F1CFD0];
        }
        else {
          uint64_t v9 = (uint64_t *)MEMORY[0x1E4F1CFC8];
        }
        uint64_t v10 = *v9;
        goto LABEL_14;
      }
      if (CFEqual(a2, @"FSC_CacheBundleURL"))
      {
        CFTypeRef v7 = *(CFTypeRef *)(a1 + 56);
        if (!v7) {
          goto LABEL_8;
        }
        goto LABEL_7;
      }
      if (!CFEqual(a2, @"FSC_OfflineInterstitialURLs"))
      {
        uint64_t v8 = 4294954512;
        goto LABEL_15;
      }
      uint64_t v17 = 0;
      uint64_t v12 = *(void *)(a1 + 280);
      if (!v12)
      {
        uint64_t v10 = 0;
LABEL_29:
        uint64_t v8 = 0;
LABEL_14:
        *a4 = v10;
        goto LABEL_15;
      }
      uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v13) {
        uint64_t v14 = v13;
      }
      else {
        uint64_t v14 = 0;
      }
      id v15 = *(uint64_t (**)(uint64_t, uint64_t *))(v14 + 160);
      if (!v15)
      {
        uint64_t v8 = 4294954514;
        goto LABEL_15;
      }
      uint64_t v16 = v15(v12, &v17);
      if (!v16)
      {
        uint64_t v10 = v17;
        goto LABEL_29;
      }
    }
    uint64_t v8 = v16;
    goto LABEL_15;
  }

  return FigSignalErrorAt();
}

uint64_t FigStreamingCacheSetMasterPlaylist(uint64_t a1, const void *a2, const void *a3)
{
  if (a1)
  {
    MEMORY[0x19970E290](*(void *)(a1 + 16));
    if (*(unsigned char *)(a1 + 272))
    {
      uint64_t v9 = FigSignalErrorAt();
    }
    else
    {
      CFTypeRef v7 = *(const void **)(a1 + 120);
      *(void *)(a1 + 120) = a2;
      if (a2) {
        CFRetain(a2);
      }
      if (v7) {
        CFRelease(v7);
      }
      uint64_t v8 = *(const void **)(a1 + 160);
      *(void *)(a1 + 160) = a3;
      if (a3) {
        CFRetain(a3);
      }
      if (v8) {
        CFRelease(v8);
      }
      if ((*(unsigned char *)(a1 + 220) & 2) != 0)
      {
        CFRetain((CFTypeRef)a1);
        dispatch_async_f(*(dispatch_queue_t *)(a1 + 240), (void *)a1, (dispatch_function_t)sc_WriteMasterPlaylistToDiskDispatchFunction);
      }
      uint64_t v9 = 0;
    }
    MEMORY[0x19970E2B0](*(void *)(a1 + 16));
    return v9;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t sc_WriteMasterPlaylistToDiskDispatchFunction(void *a1)
{
  int v10 = 0;
  MEMORY[0x19970E290](a1[2]);
  if (sc_UpgradePersistentStoreForWriting((uint64_t)a1, &v10)) {
    goto LABEL_13;
  }
  if (!a1[15])
  {
    uint64_t v2 = 0;
LABEL_6:
    uint64_t v3 = a1[35];
    uint64_t v4 = a1[20];
    uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v5) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = 0;
    }
    CFTypeRef v7 = *(uint64_t (**)(uint64_t, __CFString *, __CFString *, uint64_t, uint64_t))(v6 + 40);
    if (v7)
    {
      int v8 = v7(v3, @"NetworkPlaylist", @"master.m3u8", v4, v2);
      sc_RestorePersistentStoreLockStatus((uint64_t)a1, v10);
      if (!v8) {
        goto LABEL_14;
      }
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (!sc_EnsureMasterPlaylistNetworkURLIsSetOnPersistentStore((uint64_t)a1))
  {
    uint64_t v2 = a1[15];
    goto LABEL_6;
  }
LABEL_12:
  sc_RestorePersistentStoreLockStatus((uint64_t)a1, v10);
LABEL_13:
  sc_SendDiskWriteErrorNotification();
LABEL_14:
  MEMORY[0x19970E2B0](a1[2]);
  return FigDeferCFRelease();
}

uint64_t FigStreamingCacheCopyMasterPlaylist(uint64_t a1, unint64_t a2, unint64_t a3)
{
  CFTypeRef v19 = 0;
  CFTypeRef cf = 0;
  if (a1)
  {
    if (!(a2 | a3))
    {
      uint64_t v12 = FigSignalErrorAt();
LABEL_33:
      if (v19) {
        CFRelease(v19);
      }
      return v12;
    }
    MEMORY[0x19970E290](*(void *)(a1 + 16));
    if (*(unsigned char *)(a1 + 272))
    {
      uint64_t v12 = FigSignalErrorAt();
    }
    else
    {
      if (!a2) {
        goto LABEL_26;
      }
      CFTypeRef v6 = *(CFTypeRef *)(a1 + 120);
      if (v6) {
        goto LABEL_24;
      }
      if ((*(unsigned char *)(a1 + 220) & 2) == 0 || (uint64_t v7 = *(void *)(a1 + 280)) == 0)
      {
LABEL_23:
        CFTypeRef v6 = *(CFTypeRef *)(a1 + 120);
        if (!v6)
        {
LABEL_25:
          *(void *)a2 = v6;
LABEL_26:
          if (a3)
          {
            CFTypeRef v17 = *(CFTypeRef *)(a1 + 160);
            if (v17) {
              CFTypeRef v17 = CFRetain(v17);
            }
            uint64_t v12 = 0;
            *(void *)a3 = v17;
            goto LABEL_31;
          }
          goto LABEL_30;
        }
LABEL_24:
        CFTypeRef v6 = CFRetain(v6);
        goto LABEL_25;
      }
      if (*(void *)(a1 + 128))
      {
LABEL_30:
        uint64_t v12 = 0;
        goto LABEL_31;
      }
      uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v8) {
        uint64_t v9 = v8;
      }
      else {
        uint64_t v9 = 0;
      }
      int v10 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, void, CFTypeRef *, CFTypeRef *))(v9 + 48);
      if (v10)
      {
        uint64_t v11 = v10(v7, @"NetworkPlaylist", a1 + 128, 0, &cf, &v19);
        if (v11 != -16913)
        {
          uint64_t v12 = v11;
          if (v11) {
            goto LABEL_31;
          }
          uint64_t v13 = *(const void **)(a1 + 160);
          CFTypeRef v14 = cf;
          *(void *)(a1 + 160) = cf;
          if (v14) {
            CFRetain(v14);
          }
          if (v13) {
            CFRelease(v13);
          }
          id v15 = *(const void **)(a1 + 120);
          CFTypeRef v16 = v19;
          *(void *)(a1 + 120) = v19;
          if (v16) {
            CFRetain(v16);
          }
          if (v15) {
            CFRelease(v15);
          }
        }
        goto LABEL_23;
      }
      uint64_t v12 = 4294954514;
    }
LABEL_31:
    MEMORY[0x19970E2B0](*(void *)(a1 + 16));
    if (cf) {
      CFRelease(cf);
    }
    goto LABEL_33;
  }

  return FigSignalErrorAt();
}

uint64_t FigStreamingCacheCopyStreamNetworkURL(uint64_t a1, CFURLRef *a2)
{
  if (a1 && a2)
  {
    MEMORY[0x19970E290](*(void *)(a1 + 16));
    if (*(unsigned char *)(a1 + 272)
      || (CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia(),
          CFURLRef v5 = CFURLCreateWithString(AllocatorForMedia, *(CFStringRef *)(a1 + 24), 0),
          (*a2 = v5) == 0))
    {
      uint64_t v6 = FigSignalErrorAt();
    }
    else
    {
      uint64_t v6 = 0;
    }
    MEMORY[0x19970E2B0](*(void *)(a1 + 16));
    return v6;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigStreamingCacheAddMediaMap(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, uint64_t a5, const void *a6)
{
  uint64_t valuePtr = a5;
  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        if ((a4 & 0x8000000000000000) == 0)
        {
          if (a6)
          {
            CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
            CFStringRef v12 = CFStringCreateWithFormat(AllocatorForMedia, 0, @"%@-%lld", a3, a4);
            if (v12)
            {
              CFStringRef v13 = v12;
              CFNumberRef v14 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt64Type, &valuePtr);
              if (!v14)
              {
                uint64_t v17 = FigSignalErrorAt();
                uint64_t v20 = v13;
                goto LABEL_18;
              }
              CFNumberRef v15 = v14;
              MEMORY[0x19970E290](*(void *)(a1 + 16));
              if (!*(unsigned char *)(a1 + 272))
              {
                uint64_t v16 = *(void *)(a1 + 168);
                if (v16)
                {
                  while (v16 != a2)
                  {
                    uint64_t v16 = *(void *)(v16 + 8);
                    if (!v16) {
                      goto LABEL_12;
                    }
                  }
                  CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a2 + 144), v13, a6);
                  CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a2 + 152), v15, a6);
                  if ((*(unsigned char *)(a1 + 220) & 2) == 0) {
                    goto LABEL_16;
                  }
                  CMTime v18 = malloc_type_malloc(0x40uLL, 0x10600402F6BEFCEuLL);
                  if (v18)
                  {
                    CFTypeRef v19 = v18;
                    *CMTime v18 = CFRetain((CFTypeRef)a1);
                    v19[1] = a2;
                    v19[3] = CFRetain(a3);
                    v19[4] = a4;
                    v19[5] = CFRetain(v15);
                    v19[6] = CFRetain(v13);
                    dispatch_async_f(*(dispatch_queue_t *)(a1 + 240), v19, (dispatch_function_t)sc_WriteMediaMapToDiskDispatchFunction);
LABEL_16:
                    uint64_t v17 = 0;
                    goto LABEL_17;
                  }
                }
              }
LABEL_12:
              uint64_t v17 = FigSignalErrorAt();
LABEL_17:
              MEMORY[0x19970E2B0](*(void *)(a1 + 16));
              CFRelease(v13);
              uint64_t v20 = v15;
LABEL_18:
              CFRelease(v20);
              return v17;
            }
          }
        }
      }
    }
  }

  return FigSignalErrorAt();
}

uint64_t sc_WriteMediaMapToDiskDispatchFunction(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  xpc_object_t value = 0;
  CFTypeRef cf = 0;
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  uint64_t v6 = (const void *)a1[5];
  uint64_t v7 = (const void *)a1[6];
  MEMORY[0x19970E290](*(void *)(v2 + 16));
  if (*(unsigned char *)(v2 + 272))
  {
    MEMORY[0x19970E2B0](*(void *)(v2 + 16));
    goto LABEL_3;
  }
  uint64_t v13 = *(void *)(v2 + 168);
  if (v13)
  {
    while (v13 != v3)
    {
      uint64_t v13 = *(void *)(v13 + 8);
      if (!v13) {
        goto LABEL_18;
      }
    }
    CFTypeRef v8 = CFRetain(*(CFTypeRef *)(v3 + 128));
  }
  else
  {
LABEL_18:
    uint64_t v3 = 0;
    CFTypeRef v8 = 0;
  }
  MapBBufFromStreamMediaMapDictionarCGFloat y = sc_GetMapBBufFromStreamMediaMapDictionary(v3, v7, v6, 0, &cf);
  if (MapBBufFromStreamMediaMapDictionary) {
    goto LABEL_36;
  }
  MEMORY[0x19970E2B0](*(void *)(v2 + 16));
  if (!v8)
  {
LABEL_3:
    CFTypeRef v8 = 0;
    if (!FigSignalErrorAt()) {
      goto LABEL_4;
    }
    goto LABEL_31;
  }
  CFTypeRef v15 = cf;
  uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v16) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = 0;
  }
  CMTime v18 = *(unsigned int (**)(CFTypeRef, CFTypeRef, uint64_t, uint64_t, const void *, void **))(v17 + 32);
  if (!v18 || v18(v8, v15, v4, v5, v6, &value)) {
    goto LABEL_31;
  }
  MEMORY[0x19970E290](*(void *)(v2 + 16));
  if (*(unsigned char *)(v2 + 272))
  {
    MapBBufFromStreamMediaMapDictionarCGFloat y = FigSignalErrorAt();
LABEL_36:
    int v19 = MapBBufFromStreamMediaMapDictionary;
    goto LABEL_30;
  }
  int v19 = stream_SetNeedsToCommitPersistentStreamInfo((unsigned char *)v3);
  if (!v19)
  {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(v3 + 160), v7, value);
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(v3 + 168), v6, value);
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v3 + 144), v7);
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v3 + 152), v6);
  }
LABEL_30:
  MEMORY[0x19970E2B0](*(void *)(v2 + 16));
  if (!v19)
  {
LABEL_4:
    if (!v8) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_31:
  MEMORY[0x19970E290](*(void *)(v2 + 16));
  if (!*(unsigned char *)(v2 + 272)) {
    sc_SendDiskWriteErrorNotification();
  }
  MEMORY[0x19970E2B0](*(void *)(v2 + 16));
  if (v8) {
LABEL_5:
  }
    CFRelease(v8);
LABEL_6:
  if (cf) {
    CFRelease(cf);
  }
  uint64_t v9 = (const void *)a1[5];
  if (v9) {
    CFRelease(v9);
  }
  int v10 = (const void *)a1[3];
  if (v10) {
    CFRelease(v10);
  }
  uint64_t v11 = (const void *)a1[6];
  if (v11) {
    CFRelease(v11);
  }
  free(a1);
  return FigDeferCFRelease();
}

uint64_t FigStreamingCacheCopyMediaMap(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  CFNumberRef v25 = 0;
  uint64_t valuePtr = a5;
  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        if ((a4 & 0x8000000000000000) == 0)
        {
          if (a6)
          {
            CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
            CFStringRef v12 = CFStringCreateWithFormat(AllocatorForMedia, 0, @"%@-%lld", a3, a4, v25, valuePtr);
            if (v12)
            {
              CFStringRef v13 = v12;
              CFNumberRef v14 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt64Type, &valuePtr);
              if (!v14)
              {
                uint64_t Value = FigSignalErrorAt();
                int v19 = v13;
                goto LABEL_19;
              }
              CFNumberRef v15 = v14;
              MEMORY[0x19970E290](*(void *)(a1 + 16));
              if (*(unsigned char *)(a1 + 272) || (uint64_t v16 = *(void *)(a1 + 168)) == 0)
              {
LABEL_12:
                MapBBufFromStreamMediaMapDictionarCGFloat y = FigSignalErrorAt();
              }
              else
              {
                while (v16 != a2)
                {
                  uint64_t v16 = *(void *)(v16 + 8);
                  if (!v16) {
                    goto LABEL_12;
                  }
                }
                MapBBufFromStreamMediaMapDictionarCGFloat y = sc_GetMapBBufFromStreamMediaMapDictionary(a2, v13, v15, &v25, a6);
                if (!MapBBufFromStreamMediaMapDictionary)
                {
                  if (*a6 || (*(unsigned char *)(a1 + 220) & 2) == 0)
                  {
                    uint64_t Value = 0;
                    goto LABEL_18;
                  }
                  uint64_t Value = (uint64_t)CFDictionaryGetValue(*(CFDictionaryRef *)(a2 + 160), v13);
                  CFNumberRef v25 = (CFNumberRef)v13;
                  if (!Value)
                  {
                    uint64_t Value = (uint64_t)CFDictionaryGetValue(*(CFDictionaryRef *)(a2 + 168), v15);
                    CFNumberRef v25 = v15;
                    if (!Value) {
                      goto LABEL_18;
                    }
                  }
                  uint64_t v21 = *(void *)(a2 + 128);
                  uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 16);
                  if (v22) {
                    uint64_t v23 = v22;
                  }
                  else {
                    uint64_t v23 = 0;
                  }
                  long long v24 = *(uint64_t (**)(uint64_t, uint64_t, void *))(v23 + 88);
                  if (!v24)
                  {
                    uint64_t Value = 4294954514;
                    goto LABEL_18;
                  }
                  MapBBufFromStreamMediaMapDictionarCGFloat y = v24(v21, Value, a6);
                }
              }
              uint64_t Value = MapBBufFromStreamMediaMapDictionary;
LABEL_18:
              MEMORY[0x19970E2B0](*(void *)(a1 + 16));
              CFRelease(v13);
              int v19 = v15;
LABEL_19:
              CFRelease(v19);
              return Value;
            }
          }
        }
      }
    }
  }

  return FigSignalErrorAt();
}

uint64_t sc_GetMapBBufFromStreamMediaMapDictionary(uint64_t a1, const void *a2, const void *a3, void *a4, void *a5)
{
  if (a5)
  {
    uint64_t v9 = a2;
    uint64_t Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 144), a2);
    if (Value)
    {
      CFTypeRef v12 = CFRetain(Value);
      *a5 = v12;
      if (v12)
      {
        if (!a4) {
          return 0;
        }
LABEL_5:
        *a4 = v9;
        return 0;
      }
    }
    else
    {
      *a5 = 0;
    }
    CFNumberRef v14 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 152), a3);
    if (v14) {
      CFNumberRef v14 = CFRetain(v14);
    }
    *a5 = v14;
    uint64_t v9 = a3;
    if (!a4) {
      return 0;
    }
    goto LABEL_5;
  }
  return FigSignalErrorAt();
}

uint64_t FigStreamingCacheRemoveMediaMap(uint64_t a1, CFMutableDictionaryRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t valuePtr = a5;
  if (a1)
  {
    if (a3)
    {
      if ((a4 & 0x8000000000000000) == 0)
      {
        CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
        CFStringRef v10 = CFStringCreateWithFormat(AllocatorForMedia, 0, @"%@-%lld", a3, a4);
        if (v10)
        {
          CFStringRef v11 = v10;
          CFNumberRef v12 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt64Type, &valuePtr);
          if (!v12)
          {
            uint64_t v15 = FigSignalErrorAt();
            uint64_t v16 = v11;
            goto LABEL_13;
          }
          CFNumberRef v13 = v12;
          MEMORY[0x19970E290](*(void *)(a1 + 16));
          if (*(unsigned char *)(a1 + 272) || (uint64_t v14 = *(void *)(a1 + 168)) == 0)
          {
LABEL_10:
            uint64_t v15 = FigSignalErrorAt();
          }
          else
          {
            while ((CFMutableDictionaryRef *)v14 != a2)
            {
              uint64_t v14 = *(void *)(v14 + 8);
              if (!v14) {
                goto LABEL_10;
              }
            }
            CFDictionaryRemoveValue(a2[18], v11);
            CFDictionaryRemoveValue(a2[19], v13);
            if ((*(unsigned char *)(a1 + 220) & 2) != 0)
            {
              uint64_t Value = CFDictionaryGetValue(a2[20], v11);
              if (!Value || (CFTypeRef v19 = CFRetain(Value)) == 0)
              {
                uint64_t v20 = CFDictionaryGetValue(a2[21], v13);
                if (v20) {
                  CFTypeRef v19 = CFRetain(v20);
                }
                else {
                  CFTypeRef v19 = 0;
                }
              }
              CFDictionaryRemoveValue(a2[20], v11);
              CFDictionaryRemoveValue(a2[21], v13);
              uint64_t v21 = malloc_type_malloc(0x40uLL, 0x10600402F6BEFCEuLL);
              *uint64_t v21 = CFRetain((CFTypeRef)a1);
              v21[1] = a2;
              v21[6] = CFRetain(v11);
              v21[5] = CFRetain(v13);
              if (v19)
              {
                v21[7] = CFRetain(v19);
                dispatch_async_f(*(dispatch_queue_t *)(a1 + 240), v21, (dispatch_function_t)sc_DeleteMediaMapFromDiskDispatchFunction);
                MEMORY[0x19970E2B0](*(void *)(a1 + 16));
                CFRelease(v19);
              }
              else
              {
                v21[7] = 0;
                dispatch_async_f(*(dispatch_queue_t *)(a1 + 240), v21, (dispatch_function_t)sc_DeleteMediaMapFromDiskDispatchFunction);
                MEMORY[0x19970E2B0](*(void *)(a1 + 16));
              }
              uint64_t v15 = 0;
              goto LABEL_12;
            }
            uint64_t v15 = 0;
          }
          MEMORY[0x19970E2B0](*(void *)(a1 + 16));
LABEL_12:
          CFRelease(v11);
          uint64_t v16 = v13;
LABEL_13:
          CFRelease(v16);
          return v15;
        }
      }
    }
  }

  return FigSignalErrorAt();
}

uint64_t sc_DeleteMediaMapFromDiskDispatchFunction(void *a1)
{
  uint64_t v2 = *a1;
  MEMORY[0x19970E290](*(void *)(*a1 + 16));
  if (*(unsigned char *)(v2 + 272) || (uint64_t v3 = *(void *)(v2 + 168)) == 0)
  {
LABEL_6:
    FigSignalErrorAt();
    MEMORY[0x19970E2B0](*(void *)(v2 + 16));
  }
  else
  {
    uint64_t v4 = a1[1];
    while (v3 != v4)
    {
      uint64_t v3 = *(void *)(v3 + 8);
      if (!v3) {
        goto LABEL_6;
      }
    }
    CFTypeRef v5 = CFRetain(*(CFTypeRef *)(v4 + 128));
    MEMORY[0x19970E2B0](*(void *)(v2 + 16));
    uint64_t v6 = a1[7];
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t v9 = *(void (**)(CFTypeRef, uint64_t))(v8 + 40);
    if (v9) {
      v9(v5, v6);
    }
    if (v5) {
      CFRelease(v5);
    }
  }
  CFStringRef v10 = (const void *)a1[5];
  if (v10) {
    CFRelease(v10);
  }
  CFStringRef v11 = (const void *)a1[7];
  if (v11) {
    CFRelease(v11);
  }
  CFNumberRef v12 = (const void *)a1[6];
  if (v12) {
    CFRelease(v12);
  }
  free(a1);

  return FigDeferCFRelease();
}

uint64_t FigStreamingCacheCopyCompletedMediaStreamURLs(uint64_t a1, CFArrayRef *a2, CFArrayRef *a3)
{
  if (!a1)
  {
    uint64_t v33 = FigSignalErrorAt();
    CFArrayRef Mutable = 0;
    CFArrayRef v10 = 0;
    if (!v33) {
      goto LABEL_52;
    }
    goto LABEL_62;
  }
  if ((unint64_t)a2 | (unint64_t)a3)
  {
    MEMORY[0x19970E290](*(void *)(a1 + 16));
    if (*(unsigned char *)(a1 + 272))
    {
      uint64_t v33 = FigSignalErrorAt();
      CFArrayRef Mutable = 0;
      CFArrayRef v10 = 0;
      goto LABEL_51;
    }
    if ((*(unsigned char *)(a1 + 220) & 2) == 0)
    {
      CFArrayRef Mutable = 0;
      CFArrayRef v10 = 0;
      uint64_t v33 = 0;
      goto LABEL_51;
    }
    CFArrayRef theArray = 0;
    int v42 = 0;
    CFTypeRef v40 = 0;
    CFTypeRef cf = 0;
    if (!*(void *)(a1 + 280))
    {
      uint64_t v33 = FigSignalErrorAt();
      CFArrayRef v10 = 0;
      CFArrayRef Mutable = 0;
LABEL_47:
      if (v40) {
        CFRelease(v40);
      }
      if (theArray) {
        CFRelease(theArray);
      }
LABEL_51:
      MEMORY[0x19970E2B0](*(void *)(a1 + 16));
      if (!v33)
      {
LABEL_52:
        if (a2)
        {
          CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
          if (Mutable) {
            CFArrayRef Copy = CFArrayCreateCopy(AllocatorForMedia, Mutable);
          }
          else {
            CFArrayRef Copy = CFArrayCreate(AllocatorForMedia, 0, 0, MEMORY[0x1E4F1D510]);
          }
          *a2 = Copy;
        }
        if (a3)
        {
          CFAllocatorRef v36 = (const __CFAllocator *)FigGetAllocatorForMedia();
          if (v10) {
            CFArrayRef v37 = CFArrayCreateCopy(v36, v10);
          }
          else {
            CFArrayRef v37 = CFArrayCreate(v36, 0, 0, MEMORY[0x1E4F1D510]);
          }
          *a3 = v37;
        }
      }
LABEL_62:
      if (Mutable) {
        CFRelease(Mutable);
      }
      if (v10) {
        CFRelease(v10);
      }
      return v33;
    }
    uint64_t v6 = sc_UpgradePersistentStoreForWriting(a1, &v42);
    if (v6)
    {
      uint64_t v33 = v6;
      CFArrayRef Mutable = 0;
    }
    else
    {
      CFAllocatorRef v7 = (const __CFAllocator *)FigGetAllocatorForMedia();
      CFArrayRef Mutable = CFArrayCreateMutable(v7, 0, MEMORY[0x1E4F1D510]);
      if (Mutable)
      {
        CFAllocatorRef v9 = (const __CFAllocator *)FigGetAllocatorForMedia();
        CFArrayRef v10 = CFArrayCreateMutable(v9, 0, MEMORY[0x1E4F1D510]);
        if (v10)
        {
          uint64_t v11 = *(void *)(a1 + 280);
          uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v12) {
            uint64_t v13 = v12;
          }
          else {
            uint64_t v13 = 0;
          }
          uint64_t v14 = *(uint64_t (**)(uint64_t, CFArrayRef *))(v13 + 24);
          if (!v14)
          {
LABEL_44:
            uint64_t v33 = 4294954514;
            goto LABEL_45;
          }
          uint64_t v15 = v14(v11, &theArray);
          if (!v15)
          {
            CFIndex v16 = 0;
            uint64_t v17 = (const void *)*MEMORY[0x1E4F1D260];
            while (1)
            {
              CFIndex Count = (CFIndex)theArray;
              if (theArray) {
                CFIndex Count = CFArrayGetCount(theArray);
              }
              if (v16 >= Count) {
                break;
              }
              char v39 = 0;
              CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v16);
              uint64_t v20 = *(void *)(a1 + 280);
              uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v21) {
                uint64_t v22 = v21;
              }
              else {
                uint64_t v22 = 0;
              }
              uint64_t v23 = *(uint64_t (**)(uint64_t, const void *, char *))(v22 + 64);
              if (!v23) {
                goto LABEL_44;
              }
              uint64_t v15 = v23(v20, ValueAtIndex, &v39);
              if (v15) {
                goto LABEL_81;
              }
              if (v39)
              {
                uint64_t v24 = *(void *)(a1 + 280);
                uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 16);
                if (v25) {
                  uint64_t v26 = v25;
                }
                else {
                  uint64_t v26 = 0;
                }
                CFDictionaryRef v27 = *(uint64_t (**)(uint64_t, const void *, CFTypeRef *))(v26 + 72);
                if (!v27) {
                  goto LABEL_44;
                }
                uint64_t v15 = v27(v24, ValueAtIndex, &cf);
                if (v15) {
                  goto LABEL_81;
                }
                if (!cf) {
                  goto LABEL_80;
                }
                uint64_t v28 = *(void *)(a1 + 280);
                uint64_t v29 = *(void *)(CMBaseObjectGetVTable() + 16);
                if (v29) {
                  uint64_t v30 = v29;
                }
                else {
                  uint64_t v30 = 0;
                }
                uint64_t v31 = *(uint64_t (**)(uint64_t, const void *, CFTypeRef *))(v30 + 80);
                if (!v31) {
                  goto LABEL_44;
                }
                uint64_t v15 = v31(v28, ValueAtIndex, &v40);
                if (v15) {
                  goto LABEL_81;
                }
                if (v40) {
                  CFTypeRef v32 = v40;
                }
                else {
                  CFTypeRef v32 = v17;
                }
                CFArrayAppendValue(Mutable, cf);
                CFArrayAppendValue(v10, v32);
              }
              if (cf)
              {
                CFRelease(cf);
                CFTypeRef cf = 0;
              }
              if (v40)
              {
                CFRelease(v40);
                CFTypeRef v40 = 0;
              }
              ++v16;
            }
            uint64_t v33 = 0;
            goto LABEL_45;
          }
        }
        else
        {
LABEL_80:
          uint64_t v15 = FigSignalErrorAt();
        }
LABEL_81:
        uint64_t v33 = v15;
LABEL_45:
        sc_RestorePersistentStoreLockStatus(a1, v42);
        if (cf) {
          CFRelease(cf);
        }
        goto LABEL_47;
      }
      uint64_t v33 = FigSignalErrorAt();
    }
    CFArrayRef v10 = 0;
    goto LABEL_45;
  }

  return FigSignalErrorAt();
}

uint64_t FigStreamingCacheCleanupStreamsForPersisting(uint64_t a1, void *a2)
{
  int v22 = 0;
  if (a1 && a2)
  {
    MEMORY[0x19970E290](*(void *)(a1 + 16));
    if (*(unsigned char *)(a1 + 272))
    {
      uint64_t v18 = FigSignalErrorAt();
      char v6 = 1;
    }
    else
    {
      if ((*(unsigned char *)(a1 + 220) & 2) == 0)
      {
        MEMORY[0x19970E2B0](*(void *)(a1 + 16));
        CFTypeRef v19 = (void *)MEMORY[0x1E4F1CFD0];
        goto LABEL_41;
      }
      uint64_t v4 = sc_UpgradePersistentStoreForWriting(a1, &v22);
      if (v4)
      {
        uint64_t v18 = v4;
        MEMORY[0x19970E2B0](*(void *)(a1 + 16));
        return v18;
      }
      uint64_t v5 = *(void *)(a1 + 168);
      if (v5)
      {
        char v6 = 1;
        while (1)
        {
          char v21 = 0;
          if (stream_EnsurePersistentStreamInfo(v5, &v21)) {
            goto LABEL_9;
          }
          if (*(unsigned char *)(v5 + 121))
          {
            if ((*(unsigned char *)(a1 + 220) & 2) != 0)
            {
              if (stream_UpgradePersistentStreamInfoForWriting(v5)) {
                goto LABEL_32;
              }
              uint64_t v7 = *(void *)(a1 + 280);
              uint64_t v8 = *(void *)(v5 + 136);
              uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v9) {
                uint64_t v10 = v9;
              }
              else {
                uint64_t v10 = 0;
              }
              uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v10 + 88);
              if (v11) {
                v11(v7, v8);
              }
              uint64_t v12 = *(const void **)(v5 + 128);
              if (v12)
              {
                CFRelease(v12);
                *(void *)(v5 + 128) = 0;
              }
              uint64_t v13 = *(const void **)(v5 + 136);
              if (v13)
              {
                CFRelease(v13);
                *(void *)(v5 + 136) = 0;
              }
              *(_DWORD *)(v5 + 176) = 0;
            }
            uint64_t v14 = *(void **)(v5 + 24);
            if (v14)
            {
              do
              {
                uint64_t v15 = v14;
                uint64_t v14 = (void *)v14[1];
              }
              while (v14);
              while (1)
              {
                segment_EvictEntry(v15, 0, 1);
                CFIndex v16 = *(void **)(v5 + 24);
                if (!v16) {
                  break;
                }
                do
                {
                  uint64_t v15 = v16;
                  CFIndex v16 = (void *)v16[1];
                }
                while (v16);
              }
            }
          }
          else if (!*(unsigned char *)(v5 + 120))
          {
            char v6 = 0;
          }
LABEL_32:
          if (v21)
          {
            if (*(void *)(v5 + 128))
            {
              uint64_t v17 = stream_UnlockPersistentStreamInfoForAnything(v5);
              if (v17)
              {
                uint64_t v18 = v17;
                goto LABEL_37;
              }
            }
          }
LABEL_9:
          uint64_t v5 = *(void *)(v5 + 8);
          if (!v5)
          {
            uint64_t v18 = 0;
            goto LABEL_37;
          }
        }
      }
      uint64_t v18 = 0;
      char v6 = 1;
LABEL_37:
      sc_RestorePersistentStoreLockStatus(a1, v22);
    }
    MEMORY[0x19970E2B0](*(void *)(a1 + 16));
    if (v18) {
      return v18;
    }
    CFTypeRef v19 = (void *)MEMORY[0x1E4F1CFD0];
    if (!v6) {
      CFTypeRef v19 = (void *)MEMORY[0x1E4F1CFC8];
    }
LABEL_41:
    uint64_t v18 = 0;
    *a2 = *v19;
    return v18;
  }

  return FigSignalErrorAt();
}

uint64_t sc_UpgradePersistentStoreForWriting(uint64_t a1, _DWORD *a2)
{
  if ((*(unsigned char *)(a1 + 220) & 2) == 0 || (*(void *)(a1 + 280) ? (BOOL v3 = a2 == 0) : (BOOL v3 = 1), v3))
  {
    uint64_t v8 = FigSignalErrorAt();
  }
  else
  {
    *a2 = *(_DWORD *)(a1 + 288);
    if ((*(unsigned char *)(a1 + 288) & 2) != 0) {
      return 0;
    }
    FigGetUpTimeNanoseconds();
    uint64_t v4 = *(void *)(a1 + 280);
    uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v5) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = 0;
    }
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, void))(v6 + 16);
    if (!v7)
    {
      FigGetUpTimeNanoseconds();
      return 4294954514;
    }
    uint64_t v8 = v7(v4, 1, 0);
    FigGetUpTimeNanoseconds();
    if (!v8)
    {
      *(_DWORD *)(a1 + 288) |= 3u;
      return v8;
    }
  }
  if (v8 == -16914)
  {
    *(_DWORD *)(a1 + 288) &= 0xFFFFFFFC;
    return 4294950382;
  }
  return v8;
}

uint64_t stream_EnsurePersistentStreamInfo(uint64_t a1, unsigned char *a2)
{
  uint64_t v4 = *(void *)a1;
  int v140 = 0;
  uint64_t v5 = sc_UpgradePersistentStoreForWriting(v4, &v140);
  if (v5) {
    goto LABEL_227;
  }
  if (a2) {
    *a2 = 0;
  }
  if (*(void *)(a1 + 128)) {
    goto LABEL_203;
  }
  uint64_t v6 = *(const void **)(a1 + 136);
  BOOL v7 = v6 != 0;
  uint64_t v139 = v4;
  if (v6) {
    goto LABEL_67;
  }
  CFArrayRef v167 = 0;
  LODWORD(v165) = 0;
  CFIndex v138 = a2;
  if ((*(unsigned char *)(v4 + 220) & 2) != 0
    && (uint64_t v8 = *(unsigned int *)(a1 + 56),
        uint64_t v9 = *(unsigned int *)(a1 + 80),
        (Base32EncodedSHA1HashFromCFCFStringRef String = (const void *)FigCreateBase32EncodedSHA1HashFromCFString()) != 0)
    && (CFAllocatorRef v11 = (const __CFAllocator *)FigGetAllocatorForMedia(),
        CFStringRef v12 = CFStringCreateWithFormat(v11, 0, @"%d-%d-%@", v8, v9, Base32EncodedSHA1HashFromCFString),
        CFRelease(Base32EncodedSHA1HashFromCFString),
        v12))
  {
    CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    CFArrayRef Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    uint64_t v15 = Mutable;
    if (Mutable)
    {
      CFDictionarySetValue(Mutable, @"StreamInfoNetworkURL", *(const void **)(a1 + 64));
      CFIndex v16 = *(const void **)(a1 + 72);
      if (v16) {
        CFDictionarySetValue(v15, @"StreamInfoUniqueTag", v16);
      }
      uint64_t v17 = sc_UpgradePersistentStoreForWriting(v4, &v165);
      if (!v17)
      {
        BOOL v136 = v7;
        uint64_t v18 = *(void *)(v4 + 280);
        uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v19) {
          uint64_t v20 = v19;
        }
        else {
          uint64_t v20 = 0;
        }
        char v21 = *(uint64_t (**)(uint64_t, const __CFArray **))(v20 + 24);
        if (v21)
        {
          uint64_t v22 = v21(v18, &v167);
          if (v22)
          {
            uint64_t v40 = v22;
            int v39 = 0;
          }
          else
          {
            CFIndex v23 = 0;
            CFArrayRef v24 = v167;
            uint64_t v25 = *(void *)a1;
            uint64_t v152 = 0;
            long long v150 = 0u;
            long long v151 = 0u;
            long long v149 = 0u;
            long long v147 = 0u;
            long long v148 = 0u;
            long long v145 = 0u;
            long long v146 = 0u;
            long long v143 = 0u;
            long long v144 = 0u;
            long long context = 0u;
            long long v142 = 0u;
            CFTypeRef v155 = 0;
            v168[0] = 0;
            if (!v167) {
              goto LABEL_20;
            }
LABEL_19:
            for (CFIndex i = CFArrayGetCount(v24); v23 < i; CFIndex i = 0)
            {
              CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(v24, v23);
              uint64_t v28 = *(void *)(v25 + 280);
              uint64_t v29 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v29) {
                uint64_t v30 = v29;
              }
              else {
                uint64_t v30 = 0;
              }
              uint64_t v31 = *(void (**)(uint64_t, const void *, CFTypeRef *))(v30 + 72);
              if (v31) {
                v31(v28, ValueAtIndex, &v155);
              }
              uint64_t v32 = *(void *)(v25 + 280);
              uint64_t v34 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v34) {
                uint64_t v35 = v34;
              }
              else {
                uint64_t v35 = 0;
              }
              CFAllocatorRef v36 = *(void (**)(uint64_t, const void *, CFArrayRef *))(v35 + 80);
              if (v36) {
                v36(v32, ValueAtIndex, v168);
              }
              *(void *)&long long v145 = v155;
              *((CFArrayRef *)&v145 + 1) = v168[0];
              int matched = sc_MatchMediaStreamWithAttributes((void *)a1, v33, &context, 0);
              CFTypeRef v38 = v155;
              if (matched) {
                goto LABEL_41;
              }
              if (v155)
              {
                CFRelease(v155);
                CFTypeRef v155 = 0;
              }
              if (v168[0])
              {
                CFRelease(v168[0]);
                v168[0] = 0;
              }
              ++v23;
              if (v24) {
                goto LABEL_19;
              }
LABEL_20:
              ;
            }
            CFNumberRef ValueAtIndex = 0;
            CFTypeRef v38 = v155;
LABEL_41:
            uint64_t v4 = v139;
            if (v38) {
              CFRelease(v38);
            }
            if (v168[0]) {
              CFRelease(v168[0]);
            }
            if (ValueAtIndex)
            {
              CFRetain(ValueAtIndex);
              CFRelease(v12);
              int v39 = 1;
LABEL_47:
              CFIndex v41 = *(const void **)(a1 + 136);
              if (v41) {
                CFRelease(v41);
              }
              uint64_t v40 = 0;
              CFStringRef v12 = 0;
              *(void *)(a1 + 136) = ValueAtIndex;
              goto LABEL_58;
            }
            uint64_t v42 = *(void *)(v139 + 280);
            uint64_t v43 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v43) {
              uint64_t v44 = v43;
            }
            else {
              uint64_t v44 = 0;
            }
            CFStringRef v45 = *(uint64_t (**)(uint64_t, __CFDictionary *, CFStringRef))(v44 + 96);
            if (v45)
            {
              uint64_t v46 = v45(v42, v15, v12);
              if (!v46)
              {
                int v39 = 0;
                *(_DWORD *)(a1 + 176) |= 3u;
                CFNumberRef ValueAtIndex = v12;
                goto LABEL_47;
              }
              uint64_t v40 = v46;
            }
            else
            {
              uint64_t v40 = 4294954514;
            }
            int v39 = v136;
          }
        }
        else
        {
          int v39 = 0;
          uint64_t v40 = 4294954514;
        }
LABEL_58:
        sc_RestorePersistentStoreLockStatus(v4, (int)v165);
        goto LABEL_59;
      }
    }
    else
    {
      uint64_t v17 = FigSignalErrorAt();
    }
    uint64_t v40 = v17;
    int v39 = 0;
  }
  else
  {
    uint64_t v40 = FigSignalErrorAt();
    int v39 = 0;
    CFStringRef v12 = 0;
    uint64_t v15 = 0;
  }
LABEL_59:
  if (v167) {
    CFRelease(v167);
  }
  if (v12) {
    CFRelease(v12);
  }
  if (v15) {
    CFRelease(v15);
  }
  a2 = v138;
  if (v40) {
    goto LABEL_204;
  }
  uint64_t v6 = *(const void **)(a1 + 136);
  if (v39)
  {
LABEL_67:
    CFStringRef v47 = a2;
    uint64_t v48 = *(void *)a1;
    CFAllocatorRef v49 = CFGetAllocator(*(CFTypeRef *)a1);
    CFTypeRef v164 = (CFTypeRef)*MEMORY[0x1E4F1CFC8];
    CFTypeRef v165 = 0;
    CFTypeRef v162 = 0;
    CFTypeRef v163 = 0;
    int valuePtr = 0;
    CFTypeRef v159 = 0;
    CFDictionaryRef v160 = 0;
    uint64_t v157 = 0;
    CFNumberRef v158 = 0;
    long long context = 0uLL;
    *(void *)&long long v142 = 0;
    CFTypeRef v155 = 0;
    uint64_t v156 = 0;
    CFIndex v154 = 0;
    BOOL v153 = 0;
    if ((*(unsigned char *)(v48 + 220) & 2) != 0 && (*(unsigned char *)(v48 + 288) & 1) != 0 && v6)
    {
      CFAllocatorRef v50 = v49;
      uint64_t v51 = sc_GetShouldDemandWriteAccessForStreamInfoCreation((uint64_t *)a1, (uint64_t)v6, &v153);
      if (!v51)
      {
        BOOL v52 = v153;
        stream_CreateStreamInfoCreateOptions(v153, &v154);
        uint64_t v53 = *(void *)(v48 + 280);
        double v54 = v154;
        uint64_t v55 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v55) {
          uint64_t v56 = v55;
        }
        else {
          uint64_t v56 = 0;
        }
        CFNumberRef v57 = *(uint64_t (**)(uint64_t, const void *, __CFDictionary *, CFTypeRef *))(v56 + 32);
        if (!v57) {
          goto LABEL_180;
        }
        uint64_t v58 = v57(v53, v6, v54, &v165);
        if (v58 == -16934)
        {
          uint64_t v40 = 4294951654;
LABEL_181:
          uint64_t v4 = v139;
          goto LABEL_182;
        }
        uint64_t v40 = v58;
        if (v58) {
          goto LABEL_181;
        }
        uint64_t FigBaseObject = FigHLSPersistentStreamInfoGetFigBaseObject(v165);
        uint64_t v60 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v60) {
          uint64_t v61 = v60;
        }
        else {
          uint64_t v61 = 0;
        }
        CFRange v68 = *(void (**)(uint64_t, __CFString *, CFAllocatorRef, CFTypeRef *))(v61 + 48);
        if (v68) {
          v68(FigBaseObject, @"StreamInfoCompleteState", v50, &v164);
        }
        uint64_t v69 = FigHLSPersistentStreamInfoGetFigBaseObject(v165);
        uint64_t v70 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v70) {
          uint64_t v71 = v70;
        }
        else {
          uint64_t v71 = 0;
        }
        uint64_t v72 = *(void (**)(uint64_t, __CFString *, CFAllocatorRef, CFTypeRef *))(v71 + 48);
        if (v72) {
          v72(v69, @"StreamInfoEvictionPolicy", v50, &v163);
        }
        uint64_t v73 = FigHLSPersistentStreamInfoGetFigBaseObject(v165);
        uint64_t v74 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v74) {
          uint64_t v75 = v74;
        }
        else {
          uint64_t v75 = 0;
        }
        uint64_t v76 = *(void (**)(uint64_t, __CFString *, CFAllocatorRef, const __CFNumber **))(v75 + 48);
        if (v76) {
          v76(v73, @"StreamInfoPeakBandwidth", v50, &v158);
        }
        CFAllocatorRef v137 = v50;
        if (v158) {
          CFNumberGetValue(v158, kCFNumberSInt32Type, &valuePtr);
        }
        BOOL v135 = v164 == (CFTypeRef)*MEMORY[0x1E4F1CFD0];
        int v77 = FigCFEqual();
        CFTypeRef v78 = v165;
        BOOL v134 = v77 == 0;
        CFArrayRef v167 = 0;
        v168[0] = 0;
        uint64_t v79 = FigGetAllocatorForMedia();
        uint64_t v80 = FigHLSPersistentStreamInfoGetFigBaseObject(v78);
        uint64_t v81 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v81) {
          uint64_t v82 = v81;
        }
        else {
          uint64_t v82 = 0;
        }
        CFStringRef v83 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, const __CFArray **))(v82 + 48);
        if (v83)
        {
          uint64_t v84 = v83(v80, @"StreamInfoStreamType", v79, &v167);
          if (!v84)
          {
            if (!v167) {
              goto LABEL_239;
            }
            uint64_t v4 = v139;
            if (CFEqual(v167, @"StreamInfoMainStream"))
            {
              int v85 = 0;
LABEL_108:
              uint64_t v40 = 0;
              goto LABEL_111;
            }
            int v166 = 0;
            if (CFEqual(v167, @"StreamInfoSupplementalStream"))
            {
              uint64_t v111 = FigGetAllocatorForMedia();
              uint64_t v112 = FigHLSPersistentStreamInfoGetFigBaseObject(v78);
              uint64_t v113 = *(void *)(CMBaseObjectGetVTable() + 8);
              if (v113) {
                uint64_t v114 = v113;
              }
              else {
                uint64_t v114 = 0;
              }
              uint64_t v129 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CFArrayRef *))(v114 + 48);
              if (!v129)
              {
                int v85 = 0;
                uint64_t v40 = 4294954514;
                goto LABEL_223;
              }
              uint64_t v130 = v129(v112, @"StreamInfoMediaTypeList", v111, v168);
              if (v130)
              {
LABEL_242:
                uint64_t v40 = v130;
                int v85 = 0;
                goto LABEL_223;
              }
              if (v168[0])
              {
                if (CFArrayGetCount(v168[0]) == 1)
                {
                  CFNumberRef v131 = (const __CFNumber *)CFArrayGetValueAtIndex(v168[0], 0);
                  CFTypeID TypeID = CFNumberGetTypeID();
                  if (TypeID == CFGetTypeID(v131))
                  {
                    CFNumberGetValue(v131, kCFNumberSInt32Type, &v166);
                    if (v166 == 1936684398)
                    {
                      int v85 = 1;
                      uint64_t v4 = v139;
                    }
                    else
                    {
                      uint64_t v4 = v139;
                      if (v166 == 1935832172)
                      {
                        int v85 = 2;
                      }
                      else
                      {
                        uint64_t v133 = FigSignalErrorAt();
                        int v85 = 0;
                        if (v133)
                        {
                          uint64_t v40 = v133;
                          goto LABEL_223;
                        }
                      }
                    }
                    uint64_t v40 = 0;
LABEL_223:
                    if (!v40) {
                      goto LABEL_108;
                    }
                    int v85 = 0;
LABEL_111:
                    if (v168[0]) {
                      CFRelease(v168[0]);
                    }
                    if (v167) {
                      CFRelease(v167);
                    }
                    if (v40) {
                      goto LABEL_182;
                    }
                    uint64_t v86 = FigHLSPersistentStreamInfoGetFigBaseObject(v165);
                    uint64_t v87 = *(void *)(CMBaseObjectGetVTable() + 8);
                    if (v87) {
                      uint64_t v88 = v87;
                    }
                    else {
                      uint64_t v88 = 0;
                    }
                    double v89 = *(uint64_t (**)(uint64_t, __CFString *, CFAllocatorRef, const __CFDictionary **))(v88 + 48);
                    if (!v89) {
                      goto LABEL_180;
                    }
                    uint64_t v90 = v89(v86, @"StreamInfoMediaSegmentList", v137, &v160);
                    if (v90) {
                      goto LABEL_238;
                    }
                    if (v160)
                    {
                      CFTypeRef v91 = v165;
                      uint64_t v92 = FigGetAllocatorForMedia();
                      uint64_t v93 = FigHLSPersistentStreamInfoGetFigBaseObject(v91);
                      uint64_t v94 = *(void *)(CMBaseObjectGetVTable() + 8);
                      if (v94) {
                        uint64_t v95 = v94;
                      }
                      else {
                        uint64_t v95 = 0;
                      }
                      CFIndex v115 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v95 + 48);
                      if (!v115) {
                        goto LABEL_180;
                      }
                      uint64_t v90 = v115(v93, @"StreamInfoMediaInitializationSegmentList", v92, &v159);
                      if (v90) {
                        goto LABEL_238;
                      }
                      if (v159)
                      {
                        CFTypeRef v116 = v165;
                        uint64_t v117 = FigGetAllocatorForMedia();
                        uint64_t v118 = FigHLSPersistentStreamInfoGetFigBaseObject(v116);
                        uint64_t v119 = *(void *)(CMBaseObjectGetVTable() + 8);
                        if (v119) {
                          uint64_t v120 = v119;
                        }
                        else {
                          uint64_t v120 = 0;
                        }
                        CGRect v121 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v120 + 48);
                        if (v121)
                        {
                          uint64_t v90 = v121(v118, @"StreamInfoMediaPlaylistNetworkURL", v117, &v162);
                          if (!v90)
                          {
                            CFTypeRef v122 = v162;
                            if (v162)
                            {
                              *(void *)(a1 + 128) = v165;
                              CFTypeRef v165 = 0;
                              int v123 = *(_DWORD *)(a1 + 176);
                              if (v52) {
                                v123 |= 2u;
                              }
                              *(_DWORD *)(a1 + 176) = v123 | 1;
                              *(unsigned char *)(a1 + 96) = 1;
                              *(unsigned char *)(a1 + 120) = v135;
                              *(unsigned char *)(a1 + 121) = v134;
                              *(_DWORD *)(a1 + 80) = valuePtr;
                              *(_DWORD *)(a1 + 56) = v85;
                              CFNumberRef v124 = *(const void **)(a1 + 64);
                              *(void *)(a1 + 64) = v122;
                              CFRetain(v122);
                              uint64_t v4 = v139;
                              if (v124) {
                                CFRelease(v124);
                              }
                              uint64_t v125 = *(const void **)(a1 + 136);
                              *(void *)(a1 + 136) = v6;
                              CFRetain(v6);
                              if (v125) {
                                CFRelease(v125);
                              }
                              if (v160)
                              {
                                *(void *)&long long context = v48;
                                *((void *)&context + 1) = a1;
                                LODWORD(v142) = 0;
                                CFDictionaryApplyFunction(v160, (CFDictionaryApplierFunction)sc_RestoreSegmentFromDiskApplierFunction, &context);
                                uint64_t v40 = v142;
                                if (v142 || (CFDictionaryRef v126 = (const __CFDictionary *)v159) == 0)
                                {
LABEL_182:
                                  if (v54) {
                                    CFRelease(v54);
                                  }
LABEL_184:
                                  a2 = v47;
                                  if (v158) {
                                    CFRelease(v158);
                                  }
                                  if (v164) {
                                    CFRelease(v164);
                                  }
                                  if (v163) {
                                    CFRelease(v163);
                                  }
                                  if (v160) {
                                    CFRelease(v160);
                                  }
                                  if (v159) {
                                    CFRelease(v159);
                                  }
                                  if (v162) {
                                    CFRelease(v162);
                                  }
                                  if (v165) {
                                    CFRelease(v165);
                                  }
                                  if (v40) {
                                    goto LABEL_204;
                                  }
                                  goto LABEL_199;
                                }
                              }
                              else
                              {
                                CFDictionaryRef v126 = (const __CFDictionary *)v159;
                                if (!v159)
                                {
                                  uint64_t v40 = 0;
                                  goto LABEL_182;
                                }
                              }
                              CFTypeRef v155 = (CFTypeRef)v48;
                              uint64_t v156 = a1;
                              LODWORD(v157) = 0;
                              CFDictionaryApplyFunction(v126, (CFDictionaryApplierFunction)sc_RestoreMediaMapsFromDiskApplierFunction, &v155);
                              uint64_t v40 = v157;
                              goto LABEL_182;
                            }
                            goto LABEL_237;
                          }
LABEL_238:
                          uint64_t v40 = v90;
                          goto LABEL_181;
                        }
LABEL_180:
                        uint64_t v40 = 4294954514;
                        goto LABEL_181;
                      }
                    }
LABEL_237:
                    uint64_t v90 = FigSignalErrorAt();
                    goto LABEL_238;
                  }
                }
LABEL_239:
                uint64_t v40 = FigSignalErrorAt();
                int v85 = 0;
                uint64_t v4 = v139;
                goto LABEL_223;
              }
            }
            uint64_t v130 = FigSignalErrorAt();
            goto LABEL_242;
          }
          uint64_t v40 = v84;
          int v85 = 0;
        }
        else
        {
          int v85 = 0;
          uint64_t v40 = 4294954514;
        }
        uint64_t v4 = v139;
        goto LABEL_111;
      }
    }
    else
    {
      uint64_t v51 = FigSignalErrorAt();
    }
    uint64_t v40 = v51;
    goto LABEL_184;
  }
  uint64_t v62 = *(void *)a1;
  *(void *)&long long context = 0;
  LOBYTE(v168[0]) = 0;
  if (*(unsigned char *)(v62 + 220) & 2) != 0 && (*(unsigned char *)(v62 + 288))
  {
    uint64_t v5 = sc_GetShouldDemandWriteAccessForStreamInfoCreation((uint64_t *)a1, (uint64_t)v6, (BOOL *)v168);
    if (!v5)
    {
      int v63 = LOBYTE(v168[0]);
      stream_CreateStreamInfoCreateOptions(LOBYTE(v168[0]), (__CFDictionary **)&context);
      uint64_t v64 = *(void *)(v62 + 280);
      CGFloat v65 = (const void *)context;
      uint64_t v66 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v66) {
        uint64_t v67 = v66;
      }
      else {
        uint64_t v67 = 0;
      }
      double v96 = *(uint64_t (**)(uint64_t, const void *, const void *, uint64_t))(v67 + 32);
      if (v96)
      {
        uint64_t v97 = v96(v64, v6, v65, a1 + 128);
        if (!v97)
        {
          int v98 = *(_DWORD *)(a1 + 176);
          if (v63) {
            v98 |= 2u;
          }
          *(_DWORD *)(a1 + 176) = v98 | 1;
          uint64_t v97 = stream_SetPropertyForPersistentStreamInfoUpgradingToWritingIfNecessary(a1, @"StreamInfoMediaPlaylistNetworkURL", *(void *)(a1 + 64));
          if (!v97)
          {
            CFAllocatorRef v99 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
            CFNumberRef v100 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, (const void *)(a1 + 80));
            uint64_t v101 = stream_SetPropertyForPersistentStreamInfoUpgradingToWritingIfNecessary(a1, @"StreamInfoPeakBandwidth", (uint64_t)v100);
            uint64_t v4 = v139;
            if (!v101)
            {
              uint64_t v101 = stream_SetPropertyForPersistentStreamInfoUpgradingToWritingIfNecessary(a1, @"StreamInfoEvictionPolicy", @"StreamInfoEvictionPolicyEvictionByMaxStreamSize");
              if (!v101)
              {
                uint64_t v102 = *(void *)(a1 + 72);
                if (!v102
                  || (uint64_t v101 = stream_SetPropertyForPersistentStreamInfoUpgradingToWritingIfNecessary(a1, @"StreamInfoUniqueIdentifier", v102), !v101))
                {
                  int v103 = *(_DWORD *)(a1 + 56);
                  LODWORD(v155) = 0;
                  CFAllocatorRef v104 = (const __CFAllocator *)FigGetAllocatorForMedia();
                  uint64_t v105 = CFArrayCreateMutable(v104, 0, MEMORY[0x1E4F1D510]);
                  if ((v103 - 1) >= 2)
                  {
                    if (!v103)
                    {
                      uint64_t v110 = stream_SetPropertyForPersistentStreamInfoUpgradingToWritingIfNecessary(a1, @"StreamInfoStreamType", @"StreamInfoMainStream");
LABEL_157:
                      uint64_t v40 = v110;
                      goto LABEL_158;
                    }
                  }
                  else
                  {
                    if (v103 == 1) {
                      int v106 = 1936684398;
                    }
                    else {
                      int v106 = 1935832172;
                    }
                    LODWORD(v155) = v106;
                    CFNumberRef v107 = CFNumberCreate(v99, kCFNumberSInt32Type, &v155);
                    if (v107)
                    {
                      CFNumberRef v108 = v107;
                      CFArrayAppendValue(v105, v107);
                      uint64_t v109 = stream_SetPropertyForPersistentStreamInfoUpgradingToWritingIfNecessary(a1, @"StreamInfoMediaTypeList", (uint64_t)v105);
                      if (!v109) {
                        uint64_t v109 = stream_SetPropertyForPersistentStreamInfoUpgradingToWritingIfNecessary(a1, @"StreamInfoStreamType", @"StreamInfoSupplementalStream");
                      }
                      uint64_t v40 = v109;
                      CFRelease(v108);
LABEL_158:
                      if (v105) {
                        CFRelease(v105);
                      }
                      if (v65) {
                        goto LABEL_161;
                      }
LABEL_162:
                      if (v100) {
                        CFRelease(v100);
                      }
                      a2 = v138;
                      if (v40) {
                        goto LABEL_204;
                      }
                      goto LABEL_199;
                    }
                  }
                  uint64_t v110 = FigSignalErrorAt();
                  goto LABEL_157;
                }
              }
            }
            uint64_t v40 = v101;
            if (!v65) {
              goto LABEL_162;
            }
LABEL_161:
            CFRelease(v65);
            goto LABEL_162;
          }
        }
        uint64_t v40 = v97;
        CFNumberRef v100 = 0;
      }
      else
      {
        CFNumberRef v100 = 0;
        uint64_t v40 = 4294954514;
      }
      uint64_t v4 = v139;
      if (!v65) {
        goto LABEL_162;
      }
      goto LABEL_161;
    }
LABEL_227:
    uint64_t v40 = v5;
    goto LABEL_204;
  }
  uint64_t v40 = FigSignalErrorAt();
  if (v40) {
    goto LABEL_204;
  }
LABEL_199:
  if (!*(unsigned char *)(a1 + 120) || *(unsigned char *)(a1 + 121))
  {
    stream_UpgradePersistentStreamInfoForWriting(a1);
    if (a2)
    {
LABEL_202:
      uint64_t v40 = 0;
      *a2 = 1;
      goto LABEL_204;
    }
LABEL_203:
    uint64_t v40 = 0;
    goto LABEL_204;
  }
  uint64_t v128 = stream_DowngradePersistentStreamInfoForReading(a1);
  uint64_t v40 = v128;
  if (a2 && !v128) {
    goto LABEL_202;
  }
LABEL_204:
  sc_RestorePersistentStoreLockStatus(v4, v140);
  return v40;
}

uint64_t stream_UnlockPersistentStreamInfoForAnything(uint64_t a1)
{
  if ((*(unsigned char *)(*(void *)a1 + 220) & 2) != 0 && (uint64_t v2 = *(void *)(a1 + 128)) != 0)
  {
    int v3 = *(_DWORD *)(a1 + 176);
    if ((v3 & 1) == 0) {
      return 0;
    }
    if ((v3 & 2) != 0)
    {
      uint64_t result = stream_CommitPersistentStreamInfoIfNecessary(a1);
      if (result) {
        return result;
      }
      uint64_t v2 = *(void *)(a1 + 128);
    }
    uint64_t FigBaseObject = FigHLSPersistentStreamInfoGetFigBaseObject(v2);
    if (!FigBaseObject) {
      return 4294954516;
    }
    uint64_t v6 = FigBaseObject;
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t v9 = *(uint64_t (**)(uint64_t))(v8 + 24);
    if (v9)
    {
      uint64_t result = v9(v6);
      if (!result)
      {
        uint64_t v10 = *(const void **)(a1 + 128);
        if (v10)
        {
          CFRelease(v10);
          *(void *)(a1 + 128) = 0;
        }
        *(_DWORD *)(a1 + 176) &= 0xFFFFFFFC;
        CFAllocatorRef v11 = *(void **)(a1 + 24);
        if (v11)
        {
          do
          {
            CFStringRef v12 = v11;
            CFAllocatorRef v11 = (void *)v11[1];
          }
          while (v11);
          while (1)
          {
            segment_EvictEntry(v12, 0, 0);
            uint64_t v13 = *(void **)(a1 + 24);
            if (!v13) {
              break;
            }
            do
            {
              CFStringRef v12 = v13;
              uint64_t v13 = (void *)v13[1];
            }
            while (v13);
          }
        }
        return 0;
      }
    }
    else
    {
      return 4294954514;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t sc_RestorePersistentStoreLockStatus(uint64_t result, int a2)
{
  if ((*(unsigned char *)(result + 220) & 2) == 0 || !*(void *)(result + 280)) {
    return FigSignalErrorAt();
  }
  int v2 = *(_DWORD *)(result + 288);
  if (v2 == a2) {
    return result;
  }
  if ((a2 & 2) != 0) {
    return FigSignalErrorAt();
  }
  if ((a2 & 1) == 0) {
    return sc_UnlockPersistentStoreForAnything(result);
  }
  if ((v2 & 2) == 0) {
    return sc_UpgradePersistentStoreForWriting(result, 0);
  }
  return result;
}

uint64_t FigStreamingCacheFlushIO(uint64_t a1, uint64_t *a2)
{
  if (a1)
  {
    MEMORY[0x19970E290](*(void *)(a1 + 16));
    if (!*(unsigned char *)(a1 + 272))
    {
      uint64_t v5 = *(void *)(a1 + 256) + 1;
      *(void *)(a1 + 256) = v5;
      if ((*(unsigned char *)(a1 + 220) & 2) == 0)
      {
        uint64_t v6 = sc_PostFlushIOCompletedNotification();
        uint64_t v7 = v6;
        if (!a2 || v6) {
          goto LABEL_11;
        }
        goto LABEL_9;
      }
      uint64_t v8 = malloc_type_calloc(1uLL, 0x10uLL, 0x1020040EDED9539uLL);
      if (v8)
      {
        uint64_t v9 = v8;
        *uint64_t v8 = CFRetain((CFTypeRef)a1);
        v9[1] = v5;
        dispatch_async_f(*(dispatch_queue_t *)(a1 + 240), v9, (dispatch_function_t)sc_FlushIOCompleteDispatchFunction);
        if (!a2)
        {
          uint64_t v7 = 0;
          goto LABEL_11;
        }
LABEL_9:
        uint64_t v7 = 0;
        *a2 = v5;
LABEL_11:
        MEMORY[0x19970E2B0](*(void *)(a1 + 16));
        return v7;
      }
    }
    uint64_t v7 = FigSignalErrorAt();
    goto LABEL_11;
  }
  return FigSignalErrorAt();
}

void sc_FlushIOCompleteDispatchFunction(void *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  MEMORY[0x19970E290](*(void *)(*a1 + 16));
  if (*(unsigned char *)(v2 + 272))
  {
    FigSignalErrorAt();
  }
  else
  {
    uint64_t v4 = *(void *)(v2 + 168);
    while (v4)
    {
      uint64_t v5 = v4;
      uint64_t v4 = *(void *)(v4 + 8);
      if (*(void *)(v5 + 128))
      {
        if (!stream_UpgradePersistentStreamInfoForWriting(v5))
        {
          stream_CommitPersistentStreamInfoIfNecessary(v5);
          if (*(unsigned char *)(v5 + 120))
          {
            if (!*(unsigned char *)(v5 + 121)) {
              stream_DowngradePersistentStreamInfoForReading(v5);
            }
          }
        }
      }
    }
    if (v3 != -1) {
      sc_PostFlushIOCompletedNotification();
    }
  }
  MEMORY[0x19970E2B0](*(void *)(v2 + 16));
  FigDeferCFRelease();

  free(a1);
}

uint64_t sc_PostFlushIOCompletedNotification()
{
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    CFMutableDictionaryRef v2 = Mutable;
    uint64_t v3 = FigCFDictionarySetInt64();
    if (!v3)
    {
      CMNotificationCenterGetDefaultLocalCenter();
      uint64_t v3 = FigDispatchAsyncPostNotification();
    }
    uint64_t v4 = v3;
    CFRelease(v2);
    return v4;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigStreamingCacheFlushIOSync(uint64_t a1)
{
  if (a1)
  {
    MEMORY[0x19970E290](*(void *)(a1 + 16));
    if (!*(unsigned char *)(a1 + 272) && (*(unsigned char *)(a1 + 220) & 2) != 0)
    {
      dispatch_retain(*(dispatch_object_t *)(a1 + 240));
      uint64_t v5 = *(NSObject **)(a1 + 240);
      uint64_t v6 = malloc_type_calloc(1uLL, 0x10uLL, 0x1020040EDED9539uLL);
      if (v6)
      {
        uint64_t v3 = v6;
        *uint64_t v6 = CFRetain((CFTypeRef)a1);
        v3[1] = -1;
        MEMORY[0x19970E2B0](*(void *)(a1 + 16));
        if (!v5)
        {
          uint64_t v2 = 0;
          goto LABEL_6;
        }
        dispatch_sync_f(v5, v3, (dispatch_function_t)sc_FlushIOCompleteDispatchFunction);
        uint64_t v2 = 0;
      }
      else
      {
        uint64_t v2 = FigSignalErrorAt();
        if (!v5) {
          goto LABEL_5;
        }
      }
      dispatch_release(v5);
    }
    else
    {
      MEMORY[0x19970E2B0](*(void *)(a1 + 16));
      uint64_t v2 = 0;
    }
  }
  else
  {
    uint64_t v2 = FigSignalErrorAt();
  }
LABEL_5:
  uint64_t v3 = 0;
LABEL_6:
  free(v3);
  return v2;
}

uint64_t FigStreamingCacheInvalidate(uint64_t a1)
{
  if (a1) {
    figStreamingCacheInvalidate(a1);
  }
  return 0;
}

void figStreamingCacheInvalidate(uint64_t a1)
{
  MEMORY[0x19970E290](*(void *)(a1 + 16));
  if (!*(unsigned char *)(a1 + 272))
  {
    *(unsigned char *)(a1 + 272) = 1;
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    if ((*(unsigned char *)(a1 + 220) & 2) != 0)
    {
      if (*(void *)(a1 + 240))
      {
        MEMORY[0x19970E2B0](*(void *)(a1 + 16));
        dispatch_sync_f(*(dispatch_queue_t *)(a1 + 240), 0, (dispatch_function_t)sc_EmptyDispatchFunc);
        MEMORY[0x19970E290](*(void *)(a1 + 16));
        uint64_t v2 = *(void *)(a1 + 168);
        if (v2)
        {
          do
          {
            uint64_t v3 = *(void *)(v2 + 8);
            if (*(void *)(v2 + 128)) {
              stream_CommitPersistentStreamInfoIfNecessary(v2);
            }
            uint64_t v2 = v3;
          }
          while (v3);
        }
      }
      uint64_t v4 = *(void *)(a1 + 280);
      if (v4)
      {
        if ((*(unsigned char *)(a1 + 220) & 2) != 0 && !*(void *)(a1 + 40))
        {
          FigShared_CheckIntoDiskCache(*(const __CFString **)(a1 + 32), *(const __CFString **)(a1 + 48), *(const void **)(a1 + 56));
          uint64_t v4 = *(void *)(a1 + 280);
        }
        uint64_t FigBaseObject = FigHLSPersistentStoreGetFigBaseObject(v4);
        if (FigBaseObject)
        {
          uint64_t v6 = FigBaseObject;
          uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
          uint64_t v8 = v7 ? v7 : 0;
          uint64_t v9 = *(void (**)(uint64_t))(v8 + 24);
          if (v9) {
            v9(v6);
          }
        }
      }
    }
    uint64_t v10 = *(const void **)(a1 + 32);
    if (v10)
    {
      CFRelease(v10);
      *(void *)(a1 + 32) = 0;
    }
    CFAllocatorRef v11 = *(const void **)(a1 + 40);
    if (v11)
    {
      CFRelease(v11);
      *(void *)(a1 + 40) = 0;
    }
    CFStringRef v12 = *(const void **)(a1 + 24);
    if (v12)
    {
      CFRelease(v12);
      *(void *)(a1 + 24) = 0;
    }
    uint64_t v13 = *(const void **)(a1 + 48);
    if (v13)
    {
      CFRelease(v13);
      *(void *)(a1 + 48) = 0;
    }
    uint64_t v14 = *(const void **)(a1 + 56);
    if (v14)
    {
      CFRelease(v14);
      *(void *)(a1 + 56) = 0;
    }
    uint64_t v15 = *(const void **)(a1 + 280);
    if (v15)
    {
      CFRelease(v15);
      *(void *)(a1 + 280) = 0;
    }
    CFIndex v16 = *(const void **)(a1 + 120);
    if (v16)
    {
      CFRelease(v16);
      *(void *)(a1 + 120) = 0;
    }
    uint64_t v17 = *(const void **)(a1 + 128);
    if (v17)
    {
      CFRelease(v17);
      *(void *)(a1 + 128) = 0;
    }
    uint64_t v18 = *(const void **)(a1 + 160);
    if (v18)
    {
      CFRelease(v18);
      *(void *)(a1 + 160) = 0;
    }
    uint64_t v19 = *(const void **)(a1 + 232);
    if (v19)
    {
      CFRelease(v19);
      *(void *)(a1 + 232) = 0;
    }
    uint64_t v20 = *(const void **)(a1 + 224);
    if (v20)
    {
      CFRelease(v20);
      *(void *)(a1 + 224) = 0;
    }
    char v21 = *(const void **)(a1 + 136);
    if (v21)
    {
      CFRelease(v21);
      *(void *)(a1 + 136) = 0;
    }
    uint64_t v22 = *(NSObject **)(a1 + 248);
    if (v22)
    {
      dispatch_release(v22);
      *(void *)(a1 + 248) = 0;
    }
    CFIndex v23 = *(void **)(a1 + 168);
    while (v23)
    {
      CFArrayRef v24 = v23;
      CFIndex v23 = (void *)v23[1];
      uint64_t v25 = (void *)v24[3];
      if (v25)
      {
        do
        {
          uint64_t v26 = v25;
          uint64_t v25 = (void *)v25[1];
        }
        while (v25);
        do
        {
          unint64_t started = MediaSegmentStartTimeList_RB_NEXT((unint64_t)v26);
          segment_EvictEntry(v26, 1, 0);
          uint64_t v26 = (void *)started;
        }
        while (started);
      }
      if (v24[4]) {
        figStreamingCacheInvalidate_cold_2();
      }
      if (v24[3]) {
        figStreamingCacheInvalidate_cold_1();
      }
      uint64_t v28 = (const void *)v24[9];
      if (v28)
      {
        CFRelease(v28);
        v24[9] = 0;
      }
      uint64_t v29 = (const void *)v24[8];
      if (v29)
      {
        CFRelease(v29);
        v24[8] = 0;
      }
      uint64_t v30 = (const void *)v24[13];
      if (v30)
      {
        CFRelease(v30);
        v24[13] = 0;
      }
      uint64_t v31 = (const void *)v24[11];
      if (v31)
      {
        CFRelease(v31);
        v24[11] = 0;
      }
      uint64_t v32 = (const void *)v24[14];
      if (v32)
      {
        CFRelease(v32);
        v24[14] = 0;
      }
      uint64_t v33 = (const void *)v24[6];
      if (v33)
      {
        CFRelease(v33);
        v24[6] = 0;
      }
      uint64_t v34 = (const void *)v24[17];
      if (v34)
      {
        CFRelease(v34);
        v24[17] = 0;
      }
      uint64_t v35 = (const void *)v24[18];
      if (v35)
      {
        CFRelease(v35);
        v24[18] = 0;
      }
      CFAllocatorRef v36 = (const void *)v24[19];
      if (v36)
      {
        CFRelease(v36);
        v24[19] = 0;
      }
      CFArrayRef v37 = (const void *)v24[20];
      if (v37)
      {
        CFRelease(v37);
        v24[20] = 0;
      }
      CFTypeRef v38 = (const void *)v24[21];
      if (v38)
      {
        CFRelease(v38);
        v24[21] = 0;
      }
      uint64_t v39 = v24[16];
      if (v39)
      {
        uint64_t v40 = FigHLSPersistentStreamInfoGetFigBaseObject(v39);
        if (v40)
        {
          uint64_t v41 = v40;
          uint64_t v42 = *(void *)(CMBaseObjectGetVTable() + 8);
          uint64_t v43 = v42 ? v42 : 0;
          uint64_t v44 = *(void (**)(uint64_t))(v43 + 24);
          if (v44) {
            v44(v41);
          }
        }
        CFStringRef v45 = (const void *)v24[16];
        if (v45) {
          CFRelease(v45);
        }
      }
      free(v24);
    }
  }

  JUMPOUT(0x19970E2B0);
}

uint64_t FigStreamingCacheSetCryptKey(uint64_t a1, const void *a2, const void *a3)
{
  if (a1 && a2 && a3)
  {
    MEMORY[0x19970E290](*(void *)(a1 + 16));
    if (*(unsigned char *)(a1 + 272))
    {
      uint64_t v6 = FigSignalErrorAt();
    }
    else
    {
      if ((*(unsigned char *)(a1 + 220) & 2) == 0)
      {
        uint64_t v7 = 0;
        goto LABEL_8;
      }
      uint64_t v6 = sc_writeMetadataToDisk((dispatch_queue_t *)a1, a2, a3, @"ContentCryptKey");
    }
    uint64_t v7 = v6;
LABEL_8:
    MEMORY[0x19970E2B0](*(void *)(a1 + 16));
    return v7;
  }

  return FigSignalErrorAt();
}

uint64_t sc_writeMetadataToDisk(dispatch_queue_t *a1, const void *a2, const void *a3, const void *a4)
{
  if (a2 && a3 && a4)
  {
    uint64_t v8 = malloc_type_malloc(0x20uLL, 0x60040DC1F003FuLL);
    if (a1) {
      CFTypeRef v9 = CFRetain(a1);
    }
    else {
      CFTypeRef v9 = 0;
    }
    *uint64_t v8 = v9;
    v8[1] = CFRetain(a2);
    _OWORD v8[2] = CFRetain(a3);
    v8[3] = CFRetain(a4);
    dispatch_async_f(a1[30], v8, (dispatch_function_t)sc_WriteMetadataToDiskDispatchFunction);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigStreamingCacheCopyCryptKey(uint64_t a1, const void *a2, void *a3)
{
  CFTypeRef cf = 0;
  if (a1 && a2 && a3)
  {
    MEMORY[0x19970E290](*(void *)(a1 + 16));
    if (*(unsigned char *)(a1 + 272))
    {
      uint64_t v6 = FigSignalErrorAt();
    }
    else
    {
      if ((*(unsigned char *)(a1 + 220) & 2) == 0)
      {
        uint64_t v8 = 0;
        goto LABEL_10;
      }
      uint64_t v6 = sc_copyMetadataFromDisk(a1, a2, @"ContentCryptKey", (uint64_t)&cf);
      if (!v6)
      {
        CFTypeRef v7 = cf;
        if (cf) {
          CFTypeRef v7 = CFRetain(cf);
        }
        uint64_t v8 = 0;
        *a3 = v7;
        goto LABEL_10;
      }
    }
    uint64_t v8 = v6;
LABEL_10:
    MEMORY[0x19970E2B0](*(void *)(a1 + 16));
    if (cf) {
      CFRelease(cf);
    }
    return v8;
  }

  return FigSignalErrorAt();
}

uint64_t sc_copyMetadataFromDisk(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4)
{
  CFTypeRef cf = 0;
  CFDictionaryRef theDict = 0;
  if (!a2 || !a3 || !a4)
  {
    uint64_t v13 = FigSignalErrorAt();
    goto LABEL_24;
  }
  uint64_t v8 = *(void *)(a1 + 280);
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  CFAllocatorRef v11 = *(uint64_t (**)(uint64_t, uint64_t, __CFString *, CFDictionaryRef *))(v10 + 128);
  if (!v11) {
    goto LABEL_23;
  }
  unsigned int v12 = v11(v8, a3, @"DataItemDescriptorNetworkURL", &theDict);
  if (v12 == -16913) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = v12;
  }
  CFDictionaryRef v14 = theDict;
  if (v13) {
    BOOL v15 = 1;
  }
  else {
    BOOL v15 = theDict == 0;
  }
  if (v15) {
    goto LABEL_25;
  }
  uint64_t Value = CFDictionaryGetValue(theDict, a2);
  if (Value)
  {
    uint64_t v17 = Value;
    uint64_t v18 = *(void *)(a1 + 280);
    uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v19) {
      uint64_t v20 = v19;
    }
    else {
      uint64_t v20 = 0;
    }
    char v21 = *(uint64_t (**)(uint64_t, const void *, CFTypeRef *, uint64_t))(v20 + 112);
    if (v21)
    {
      uint64_t v13 = v21(v18, v17, &cf, a4);
      if (cf) {
        CFRelease(cf);
      }
      goto LABEL_24;
    }
LABEL_23:
    uint64_t v13 = 4294954514;
    goto LABEL_24;
  }
  uint64_t v13 = 0;
LABEL_24:
  CFDictionaryRef v14 = theDict;
LABEL_25:
  if (v14) {
    CFRelease(v14);
  }
  return v13;
}

uint64_t FigStreamingCacheSetChapterArtwork(uint64_t a1, const void *a2, const void *a3)
{
  if (!a1 || !a2 || !a3) {
    return (__int16)FigSignalErrorAt();
  }
  MEMORY[0x19970E290](*(void *)(a1 + 16));
  if (*(unsigned char *)(a1 + 272))
  {
    __int16 v6 = FigSignalErrorAt();
  }
  else
  {
    if ((*(unsigned char *)(a1 + 220) & 2) == 0)
    {
      __int16 v7 = 0;
      goto LABEL_8;
    }
    __int16 v6 = sc_writeMetadataToDisk((dispatch_queue_t *)a1, a2, a3, @"ChapterArtwork");
  }
  __int16 v7 = v6;
LABEL_8:
  MEMORY[0x19970E2B0](*(void *)(a1 + 16));
  return v7;
}

uint64_t FigStreamingCacheCopyChapterArtwork(uint64_t a1, const void *a2, void *a3)
{
  CFTypeRef cf = 0;
  if (a1 && a2 && a3)
  {
    MEMORY[0x19970E290](*(void *)(a1 + 16));
    if (*(unsigned char *)(a1 + 272))
    {
      uint64_t v6 = FigSignalErrorAt();
    }
    else
    {
      if ((*(unsigned char *)(a1 + 220) & 2) == 0)
      {
        uint64_t v8 = 0;
        goto LABEL_10;
      }
      uint64_t v6 = sc_copyMetadataFromDisk(a1, a2, @"ChapterArtwork", (uint64_t)&cf);
      if (!v6)
      {
        CFTypeRef v7 = cf;
        if (cf) {
          CFTypeRef v7 = CFRetain(cf);
        }
        uint64_t v8 = 0;
        *a3 = v7;
        goto LABEL_10;
      }
    }
    uint64_t v8 = v6;
LABEL_10:
    MEMORY[0x19970E2B0](*(void *)(a1 + 16));
    if (cf) {
      CFRelease(cf);
    }
    return v8;
  }

  return FigSignalErrorAt();
}

uint64_t FigStreamingCacheSetSessionData(uint64_t a1, const void *a2, const void *a3)
{
  if (!a1) {
    return (__int16)FigSignalErrorAt();
  }
  MEMORY[0x19970E290](*(void *)(a1 + 16));
  if (*(unsigned char *)(a1 + 272))
  {
    __int16 v6 = FigSignalErrorAt();
  }
  else
  {
    if ((*(unsigned char *)(a1 + 220) & 2) == 0)
    {
      __int16 v7 = 0;
      goto LABEL_6;
    }
    __int16 v6 = sc_writeMetadataToDisk((dispatch_queue_t *)a1, a2, a3, @"SessionData");
  }
  __int16 v7 = v6;
LABEL_6:
  MEMORY[0x19970E2B0](*(void *)(a1 + 16));
  return v7;
}

uint64_t FigStreamingCacheCopySessionData(uint64_t a1, const void *a2, void *a3)
{
  CFTypeRef cf = 0;
  if (a1 && a2 && a3)
  {
    MEMORY[0x19970E290](*(void *)(a1 + 16));
    if (*(unsigned char *)(a1 + 272))
    {
      uint64_t v6 = FigSignalErrorAt();
    }
    else
    {
      if ((*(unsigned char *)(a1 + 220) & 2) == 0)
      {
        uint64_t v8 = 0;
        goto LABEL_10;
      }
      uint64_t v6 = sc_copyMetadataFromDisk(a1, a2, @"SessionData", (uint64_t)&cf);
      if (!v6)
      {
        CFTypeRef v7 = cf;
        if (cf) {
          CFTypeRef v7 = CFRetain(cf);
        }
        uint64_t v8 = 0;
        *a3 = v7;
        goto LABEL_10;
      }
    }
    uint64_t v8 = v6;
LABEL_10:
    MEMORY[0x19970E2B0](*(void *)(a1 + 16));
    if (cf) {
      CFRelease(cf);
    }
    return v8;
  }

  return FigSignalErrorAt();
}

uint64_t FigStreamingCacheHintPlaybackTime(uint64_t a1, double a2)
{
  if (a1)
  {
    MEMORY[0x19970E290](*(void *)(a1 + 16));
    if (*(unsigned char *)(a1 + 272)) {
      goto LABEL_19;
    }
    if (!*(unsigned char *)(a1 + 217)) {
      goto LABEL_13;
    }
    double v5 = *(double *)(a1 + 200);
    if (*(unsigned char *)(a1 + 220))
    {
      if (v5 <= a2) {
        double v6 = a2;
      }
      else {
        double v6 = *(double *)(a1 + 200);
      }
      if (*(double *)(a1 + 208) >= v6) {
        a2 = v6;
      }
      else {
        a2 = *(double *)(a1 + 208);
      }
    }
    if (a2 < v5 || a2 > *(double *)(a1 + 208))
    {
LABEL_19:
      uint64_t v7 = FigSignalErrorAt();
    }
    else
    {
LABEL_13:
      uint64_t v7 = 0;
      *(double *)(a1 + 192) = a2;
      *(unsigned char *)(a1 + 216) = 1;
    }
    MEMORY[0x19970E2B0](*(void *)(a1 + 16));
    return v7;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigStreamingCacheSetCacheTimeRange(uint64_t a1, double a2, double a3)
{
  if (a1 && a2 <= a3)
  {
    MEMORY[0x19970E290](*(void *)(a1 + 16));
    if (*(unsigned char *)(a1 + 272))
    {
      uint64_t i = FigSignalErrorAt();
    }
    else
    {
      *(double *)(a1 + 200) = a2;
      *(double *)(a1 + 208) = a3;
      *(unsigned char *)(a1 + 217) = 1;
      for (uint64_t i = *(void *)(a1 + 168); i; uint64_t i = *(void *)(i + 8))
      {
        if (*(unsigned char *)(i + 121))
        {
          uint64_t v7 = *(void *)(i + 24);
          if (v7)
          {
            uint64_t v8 = *(void *)(i + 24);
            do
            {
              uint64_t v9 = v8;
              uint64_t v8 = *(void *)(v8 + 8);
            }
            while (v8);
            while (*(double *)(v9 + 120) + *(double *)(v9 + 128) <= *(double *)(a1 + 200))
            {
              segment_EvictEntry((void *)v9, 0, 1);
              uint64_t v7 = *(void *)(i + 24);
              if (!v7) {
                goto LABEL_20;
              }
              uint64_t v10 = *(void *)(i + 24);
              do
              {
                uint64_t v9 = v10;
                uint64_t v10 = *(void *)(v10 + 8);
              }
              while (v10);
            }
            do
            {
              uint64_t v11 = v7;
              uint64_t v7 = *(void *)(v7 + 16);
            }
            while (v7);
            while (*(double *)(v11 + 120) >= *(double *)(a1 + 208))
            {
              segment_EvictEntry((void *)v11, 0, 1);
              uint64_t v12 = *(void *)(i + 24);
              if (!v12) {
                break;
              }
              do
              {
                uint64_t v11 = v12;
                uint64_t v12 = *(void *)(v12 + 16);
              }
              while (v12);
            }
          }
        }
LABEL_20:
        ;
      }
    }
    MEMORY[0x19970E2B0](*(void *)(a1 + 16));
    return i;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigStreamingCacheCreateMediaStream(uint64_t a1, uint64_t a2, __CFDictionary *a3, const void *a4, int a5, char a6, void *a7)
{
  uint64_t v18 = 0;
  char v17 = 0;
  if (!a1 || !a3 || a5 < 0)
  {
    uint64_t v15 = FigSignalErrorAt();
    if (a7)
    {
LABEL_12:
      if (!v15) {
        *a7 = v18;
      }
    }
    return v15;
  }
  if (a7)
  {
    MEMORY[0x19970E290](*(void *)(a1 + 16));
    if (*(unsigned char *)(a1 + 272))
    {
      uint64_t v14 = FigSignalErrorAt();
    }
    else
    {
      uint64_t v14 = sc_CreateAndAddStreamEntry((void *)a1, a2, a3, a4, a5, a6, &v17, &v18);
      if (!v14)
      {
        if ((*(unsigned char *)(a1 + 220) & 2) == 0)
        {
          uint64_t v15 = 0;
          goto LABEL_11;
        }
        uint64_t v14 = stream_EnsurePersistentStreamInfo(v18, 0);
      }
    }
    uint64_t v15 = v14;
LABEL_11:
    MEMORY[0x19970E2B0](*(void *)(a1 + 16));
    if (a7) {
      goto LABEL_12;
    }
    return v15;
  }

  return FigSignalErrorAt();
}

uint64_t sc_CreateAndAddStreamEntry(void *a1, uint64_t a2, __CFDictionary *a3, const void *a4, int a5, char a6, char *a7, void *a8)
{
  uint64_t v8 = a7;
  uint64_t v9 = a1;
  uint64_t v48 = 0;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  memset(v39, 0, sizeof(v39));
  if (!a1)
  {
    uint64_t v32 = FigSignalErrorAt();
    CFIndex v16 = 0;
LABEL_48:
    CFMutableDictionaryRef v10 = 0;
    goto LABEL_49;
  }
  CFMutableDictionaryRef v10 = a3;
  if (!a3)
  {
    uint64_t v32 = FigSignalErrorAt();
    CFIndex v16 = 0;
    uint64_t v9 = 0;
LABEL_49:
    CFMutableDictionaryRef v19 = 0;
    CFMutableDictionaryRef v18 = 0;
    goto LABEL_53;
  }
  if (a5 < 0 || !a8)
  {
    uint64_t v32 = FigSignalErrorAt();
    CFIndex v16 = 0;
    uint64_t v9 = 0;
    goto LABEL_48;
  }
  int v14 = a2;
  DWORD2(v40) = a2;
  *(void *)&long long v41 = a3;
  *((void *)&v41 + 1) = a4;
  LODWORD(v42) = a5;
  v49[0] = 0;
  uint64_t v15 = (void *)a1[21];
  if (v15)
  {
    CFIndex v16 = 0;
    do
    {
      if (sc_MatchMediaStreamWithAttributes(v15, a2, v39, v49)) {
        CFIndex v16 = v15;
      }
      if (v49[0]) {
        break;
      }
      uint64_t v15 = (void *)v15[1];
    }
    while (v15);
    if (v16)
    {
      uint64_t v8 = a7;
      CFMutableDictionaryRef v17 = 0;
      CFMutableDictionaryRef v18 = 0;
      CFMutableDictionaryRef v19 = 0;
      CFMutableDictionaryRef v10 = 0;
      uint64_t v9 = 0;
      if (*((_DWORD *)v16 + 14) == -1) {
        *((_DWORD *)v16 + 14) = v14;
      }
      char v20 = 1;
      goto LABEL_15;
    }
  }
  CFIndex v16 = malloc_type_calloc(1uLL, 0xB8uLL, 0x10E004082C26414uLL);
  if (!v16
    || (CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia(),
        (CFMutableSetRef cf = CFSetCreateMutable(AllocatorForMedia, 0, 0)) == 0))
  {
    uint64_t v32 = FigSignalErrorAt();
    uint64_t v9 = 0;
    CFMutableDictionaryRef v10 = 0;
    CFMutableDictionaryRef v19 = 0;
    CFMutableDictionaryRef v18 = 0;
    uint64_t v8 = a7;
LABEL_53:
    if (v32)
    {
      if (v16) {
        free(v16);
      }
      CFMutableDictionaryRef v17 = 0;
      if (v9) {
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    CFMutableDictionaryRef v17 = 0;
    char v20 = 0;
LABEL_15:
    char v21 = a8;
    if (!a8) {
      goto LABEL_30;
    }
LABEL_29:
    *char v21 = v16;
    goto LABEL_30;
  }
  CFAllocatorRef v23 = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v23, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
    uint64_t v32 = FigSignalErrorAt();
    CFMutableDictionaryRef v10 = 0;
    CFMutableDictionaryRef v19 = 0;
    CFMutableDictionaryRef v18 = 0;
    uint64_t v9 = cf;
    uint64_t v8 = a7;
    goto LABEL_53;
  }
  CFAllocatorRef v24 = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFMutableDictionaryRef v19 = CFDictionaryCreateMutable(v24, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!v19)
  {
    uint64_t v32 = FigSignalErrorAt();
    CFMutableDictionaryRef v18 = 0;
    goto LABEL_52;
  }
  char v34 = a6;
  CFAllocatorRef v25 = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFMutableDictionaryRef v18 = CFDictionaryCreateMutable(v25, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!v18
    || (CFAllocatorRef v26 = (const __CFAllocator *)FigGetAllocatorForMedia(),
        (CFMutableDictionaryRef v27 = CFDictionaryCreateMutable(v26, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540])) == 0))
  {
    uint64_t v32 = FigSignalErrorAt();
LABEL_52:
    uint64_t v9 = cf;
    uint64_t v8 = a7;
    CFMutableDictionaryRef v10 = Mutable;
    goto LABEL_53;
  }
  CFMutableDictionaryRef v17 = v27;
  v16[6] = CFRetain(cf);
  v16[18] = CFRetain(Mutable);
  v16[19] = CFRetain(v19);
  v16[20] = CFRetain(v18);
  v16[21] = CFRetain(v17);
  *((_DWORD *)v16 + 14) = v14;
  v16[8] = CFRetain(v10);
  if (a4) {
    CFTypeRef v28 = CFRetain(a4);
  }
  else {
    CFTypeRef v28 = 0;
  }
  char v21 = a8;
  char v20 = 0;
  v16[9] = v28;
  *((_DWORD *)v16 + 20) = a5;
  *((unsigned char *)v16 + 84) = v34;
  *CFIndex v16 = v9;
  *((unsigned char *)v16 + 121) = 1;
  v16[3] = 0;
  v16[4] = 0;
  uint64_t v29 = v9[21];
  v16[1] = v29;
  BOOL v30 = v29 == 0;
  uint64_t v31 = (void *)(v29 + 16);
  if (v30) {
    uint64_t v31 = v9 + 22;
  }
  *uint64_t v31 = v16 + 1;
  v9[21] = v16;
  v16[2] = v9 + 21;
  uint64_t v9 = cf;
  uint64_t v8 = a7;
  CFMutableDictionaryRef v10 = Mutable;
  if (a8) {
    goto LABEL_29;
  }
LABEL_30:
  uint64_t v32 = 0;
  if (v8) {
    *uint64_t v8 = v20;
  }
  if (v9) {
LABEL_33:
  }
    CFRelease(v9);
LABEL_34:
  if (v10) {
    CFRelease(v10);
  }
  if (v18) {
    CFRelease(v18);
  }
  if (v19) {
    CFRelease(v19);
  }
  if (v17) {
    CFRelease(v17);
  }
  return v32;
}

uint64_t FigStreamingCacheCopyAllStreamsMetadata(uint64_t a1, __CFArray **a2)
{
  xpc_object_t value = 0;
  if (a1)
  {
    if (!a2)
    {
      uint64_t v18 = FigSignalErrorAt();
LABEL_26:
      if (value) {
        CFRelease(value);
      }
      return v18;
    }
    MEMORY[0x19970E290](*(void *)(a1 + 16));
    if (*(unsigned char *)(a1 + 272))
    {
      uint64_t v18 = FigSignalErrorAt();
      CFMutableDictionaryRef Mutable = 0;
    }
    else
    {
      CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
      CFMutableDictionaryRef Mutable = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D510]);
      if (!Mutable)
      {
LABEL_29:
        uint64_t v15 = FigSignalErrorAt();
LABEL_30:
        uint64_t v18 = v15;
        goto LABEL_23;
      }
      char v20 = a2;
      uint64_t v6 = *(void *)(a1 + 168);
      if (v6)
      {
        uint64_t v7 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
        uint64_t v8 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
        uint64_t v9 = (const void *)*MEMORY[0x1E4F1CFD0];
        do
        {
          CFAllocatorRef v10 = (const __CFAllocator *)FigGetAllocatorForMedia();
          uint64_t v11 = CFDictionaryCreateMutable(v10, 0, v7, v8);
          if (!v11) {
            goto LABEL_29;
          }
          uint64_t v12 = v11;
          uint64_t v13 = *(const void **)(v6 + 64);
          if (v13) {
            CFDictionaryAddValue(v11, @"SMD_URL", v13);
          }
          int v14 = *(const void **)(v6 + 72);
          if (v14) {
            CFDictionaryAddValue(v12, @"SMD_StableStreamIdentifier", v14);
          }
          if (*(unsigned char *)(v6 + 84)) {
            CFDictionaryAddValue(v12, @"SMD_MediaIsCompressible", v9);
          }
          FigCFDictionarySetInt32();
          FigCFDictionarySetInt32();
          uint64_t v15 = sc_CopyPlaylistForStream(a1, v6, &value);
          if (v15) {
            goto LABEL_30;
          }
          CFIndex v16 = value;
          if (value) {
            CFDictionaryAddValue(v12, @"SMD_PlaylistData", value);
          }
          CFMutableDictionaryRef v17 = *(const void **)(v6 + 112);
          if (v17) {
            CFDictionaryAddValue(v12, @"SMD_HTTPResponseHeaders", v17);
          }
          CFArrayAppendValue(Mutable, v12);
          CFRelease(v12);
          if (v16)
          {
            CFRelease(v16);
            xpc_object_t value = 0;
          }
          uint64_t v6 = *(void *)(v6 + 8);
        }
        while (v6);
      }
      uint64_t v18 = 0;
      *char v20 = Mutable;
    }
LABEL_23:
    MEMORY[0x19970E2B0](*(void *)(a1 + 16));
    if (v18 && Mutable) {
      CFRelease(Mutable);
    }
    goto LABEL_26;
  }

  return FigSignalErrorAt();
}

uint64_t sc_CopyPlaylistForStream(uint64_t a1, uint64_t a2, void *a3)
{
  char v16 = 0;
  uint64_t v6 = (const void **)(a2 + 88);
  double v5 = *(const void **)(a2 + 88);
  if (v5) {
    goto LABEL_2;
  }
  if (!*(unsigned char *)(a2 + 96))
  {
LABEL_20:
    double v5 = *v6;
    if (!*v6)
    {
      CFTypeRef v7 = 0;
      goto LABEL_3;
    }
LABEL_2:
    CFTypeRef v7 = CFRetain(v5);
LABEL_3:
    uint64_t result = 0;
    *a3 = v7;
    return result;
  }
  uint64_t v10 = *(void *)(a2 + 104);
  *(unsigned char *)(a2 + 96) = 0;
  if (v10)
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t result = stream_EnsurePersistentStreamInfo(a2, &v16);
    if (!result)
    {
      uint64_t v11 = *(void *)(a2 + 128);
      uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v12) {
        uint64_t v13 = v12;
      }
      else {
        uint64_t v13 = 0;
      }
      int v14 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, const void **))(v13 + 16);
      if (!v14) {
        return 4294954514;
      }
      uint64_t result = v14(v11, @"NetworkPlaylist", a2 + 104, v6);
      if (!result || result == -16940)
      {
        if ((*(unsigned char *)(a1 + 220) & 2) == 0) {
          goto LABEL_20;
        }
        if (!v16) {
          goto LABEL_20;
        }
        uint64_t result = stream_UnlockPersistentStreamInfoForAnything(a2);
        if (!result) {
          goto LABEL_20;
        }
      }
    }
  }
  return result;
}

uint64_t FigStreamingCacheGetLongestContiguousMediaStreamInCacheAtTime(uint64_t a1, int a2, uint64_t *a3, CFTypeRef *a4, void *a5, double *a6, double a7)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (a1 && a3 && a4 && a6)
  {
    MEMORY[0x19970E290](*(void *)(a1 + 16));
    if (*(unsigned char *)(a1 + 272))
    {
      uint64_t v25 = FigSignalErrorAt();
      uint64_t v15 = 0;
    }
    else
    {
      uint64_t v14 = *(void *)(a1 + 168);
      if (v14)
      {
        uint64_t v15 = 0;
        int v16 = 0;
        double v17 = 0.0;
        do
        {
          v28[0] = 0;
          if ((*(unsigned char *)(a1 + 220) & 2) == 0 || !stream_EnsurePersistentStreamInfo(v14, v28))
          {
            if (*(_DWORD *)(v14 + 56) == a2)
            {
              unint64_t v18 = *(void *)(v14 + 24);
              if (v18)
              {
                while (1)
                {
                  double v19 = *(double *)(v18 + 120);
                  if (v19 <= a7 && v19 + *(double *)(v18 + 128) > a7) {
                    break;
                  }
                  if (v19 >= a7) {
                    uint64_t v20 = 8;
                  }
                  else {
                    uint64_t v20 = 16;
                  }
                  unint64_t v18 = *(void *)(v18 + v20);
                  if (!v18) {
                    goto LABEL_23;
                  }
                }
                unint64_t LastSegmentOfContiguousRangeContainingSegment = stream_GetLastSegmentOfContiguousRangeContainingSegment(v18, 1);
                double v22 = *(double *)(LastSegmentOfContiguousRangeContainingSegment + 120);
                if (*(double *)(LastSegmentOfContiguousRangeContainingSegment + 128) + v22 - a7 > v17)
                {
                  double v17 = *(double *)(LastSegmentOfContiguousRangeContainingSegment + 128) + v22 - a7;
                  uint64_t v15 = v14;
                }
                if (*(_DWORD *)(v14 + 80) > v16) {
                  int v16 = *(_DWORD *)(v14 + 80);
                }
              }
            }
LABEL_23:
            if ((*(unsigned char *)(a1 + 220) & 2) != 0)
            {
              if (v28[0])
              {
                uint64_t v23 = stream_UnlockPersistentStreamInfoForAnything(v14);
                if (v23)
                {
                  uint64_t v25 = v23;
                  goto LABEL_33;
                }
              }
            }
          }
          uint64_t v14 = *(void *)(v14 + 8);
        }
        while (v14);
        if (v15 && v16 > *(_DWORD *)(v15 + 80))
        {
          os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          uint64_t v25 = 0;
        }
        else
        {
          uint64_t v25 = 0;
        }
LABEL_33:
        MEMORY[0x19970E2B0](*(void *)(a1 + 16));
        if (v25) {
          return v25;
        }
        goto LABEL_34;
      }
      uint64_t v15 = 0;
      uint64_t v25 = 0;
    }
    double v17 = 0.0;
    goto LABEL_33;
  }
  uint64_t v25 = FigSignalErrorAt();
  uint64_t v15 = 0;
  double v17 = 0.0;
  if (v25) {
    return v25;
  }
LABEL_34:
  *a3 = v15;
  if (v15)
  {
    *a4 = CFRetain(*(CFTypeRef *)(v15 + 64));
    *a6 = v17;
    if (a5)
    {
      CFTypeRef v26 = *(CFTypeRef *)(v15 + 72);
      if (v26) {
        CFTypeRef v26 = CFRetain(v26);
      }
      goto LABEL_39;
    }
  }
  else
  {
    CFTypeRef v26 = 0;
    *a4 = 0;
    *a6 = v17;
    if (a5) {
LABEL_39:
    }
      *a5 = v26;
  }
  return v25;
}

unint64_t stream_GetLastSegmentOfContiguousRangeContainingSegment(unint64_t a1, int a2)
{
  unint64_t v2 = a1;
  if ((*(_DWORD *)(a1 + 160) & 5) == 1)
  {
    for (i = MediaSegmentStartTimeList_RB_NEXT(a1); i; unint64_t v2 = v5)
    {
      if ((*(_DWORD *)(v2 + 160) & 5) != 1) {
        break;
      }
      unint64_t v5 = i;
      if (a2)
      {
        if ((*(unsigned char *)(i + 160) & 1) == 0) {
          break;
        }
      }
      unint64_t i = MediaSegmentStartTimeList_RB_NEXT(i);
    }
  }
  return v2;
}

uint64_t FigStreamingCacheIsMediaStreamInCacheAtTime()
{
  return 0;
}

uint64_t FigStreamingCacheMediaStreamSetPlaylist(uint64_t a1, void *a2, const void *a3, const void *a4)
{
  if (a1 && a2)
  {
    MEMORY[0x19970E290](*(void *)(a1 + 16));
    if (*(unsigned char *)(a1 + 272) || (uint64_t v8 = *(void **)(a1 + 168)) == 0)
    {
LABEL_7:
      uint64_t v9 = FigSignalErrorAt();
    }
    else
    {
      while (v8 != a2)
      {
        uint64_t v8 = (void *)v8[1];
        if (!v8) {
          goto LABEL_7;
        }
      }
      uint64_t v10 = (const void *)a2[11];
      a2[11] = a3;
      if (a3) {
        CFRetain(a3);
      }
      if (v10) {
        CFRelease(v10);
      }
      uint64_t v11 = (const void *)a2[14];
      a2[14] = a4;
      if (a4) {
        CFRetain(a4);
      }
      if (v11) {
        CFRelease(v11);
      }
      if ((*(unsigned char *)(a1 + 220) & 2) != 0)
      {
        CFRetain((CFTypeRef)a1);
        dispatch_async_f(*(dispatch_queue_t *)(a1 + 240), a2, (dispatch_function_t)stream_WriteMediaPlaylistToDiskDispatchFunction);
      }
      uint64_t v9 = 0;
    }
    MEMORY[0x19970E2B0](*(void *)(a1 + 16));
    return v9;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t stream_WriteMediaPlaylistToDiskDispatchFunction(unsigned char *a1)
{
  uint64_t v2 = *(void *)a1;
  MEMORY[0x19970E290](*(void *)(*(void *)a1 + 16));
  if (!*((void *)a1 + 16)) {
    goto LABEL_19;
  }
  if (stream_UpgradePersistentStreamInfoForWriting((uint64_t)a1))
  {
LABEL_18:
    sc_SendDiskWriteErrorNotification();
    goto LABEL_19;
  }
  uint64_t v3 = *((unsigned int *)a1 + 14);
  uint64_t v4 = *((unsigned int *)a1 + 20);
  Base32EncodedSHA1HashFromCFCFStringRef String = FigCreateBase32EncodedSHA1HashFromCFString();
  if (!Base32EncodedSHA1HashFromCFString
    || (uint64_t v6 = (const void *)Base32EncodedSHA1HashFromCFString,
        CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia(),
        CFStringRef v8 = CFStringCreateWithFormat(AllocatorForMedia, 0, @"%d-%@-%d.m3u8", v3, v6, v4),
        CFRelease(v6),
        !v8))
  {
    if (!FigSignalErrorAt()) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  uint64_t v9 = *((void *)a1 + 16);
  uint64_t v10 = *((void *)a1 + 11);
  uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v13 = *(uint64_t (**)(uint64_t, __CFString *, CFStringRef, uint64_t))(v12 + 8);
  if (v13)
  {
    int v14 = v13(v9, @"NetworkPlaylist", v8, v10);
    if (!v14)
    {
      uint64_t v15 = (const void *)*((void *)a1 + 13);
      *((void *)a1 + 13) = v8;
      CFRetain(v8);
      if (v15) {
        CFRelease(v15);
      }
      int v14 = stream_SetNeedsToCommitPersistentStreamInfo(a1);
    }
    int v16 = v14;
  }
  else
  {
    int v16 = -12782;
  }
  CFRelease(v8);
  if (v16) {
    goto LABEL_18;
  }
LABEL_19:
  MEMORY[0x19970E2B0](*(void *)(v2 + 16));

  return FigDeferCFRelease();
}

uint64_t FigStreamingCacheMediaStreamCopyPlaylist(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  if (a1 && a3 | a4)
  {
    MEMORY[0x19970E290](*(void *)(a1 + 16));
    if (*(unsigned char *)(a1 + 272) || (uint64_t v8 = *(void *)(a1 + 168)) == 0)
    {
LABEL_7:
      uint64_t v9 = FigSignalErrorAt();
    }
    else
    {
      while (v8 != a2)
      {
        uint64_t v8 = *(void *)(v8 + 8);
        if (!v8) {
          goto LABEL_7;
        }
      }
      if (a3)
      {
        uint64_t v10 = sc_CopyPlaylistForStream(a1, a2, (void *)a3);
        uint64_t v9 = v10;
        if (!a4 || v10) {
          goto LABEL_17;
        }
LABEL_13:
        CFTypeRef v11 = *(CFTypeRef *)(a2 + 112);
        if (v11) {
          CFTypeRef v11 = CFRetain(v11);
        }
        uint64_t v9 = 0;
        *(void *)a4 = v11;
        goto LABEL_17;
      }
      if (a4) {
        goto LABEL_13;
      }
      uint64_t v9 = 0;
    }
LABEL_17:
    MEMORY[0x19970E2B0](*(void *)(a1 + 16));
    return v9;
  }

  return FigSignalErrorAt();
}

uint64_t FigStreamingCacheMediaStreamSetNetworkURL(uint64_t a1, uint64_t a2, const void *a3)
{
  if (a1 && a2 && a3)
  {
    MEMORY[0x19970E290](*(void *)(a1 + 16));
    if (*(unsigned char *)(a1 + 272) || (uint64_t v6 = *(void *)(a1 + 168)) == 0)
    {
LABEL_8:
      uint64_t v7 = FigSignalErrorAt();
    }
    else
    {
      while (v6 != a2)
      {
        uint64_t v6 = *(void *)(v6 + 8);
        if (!v6) {
          goto LABEL_8;
        }
      }
      uint64_t v9 = *(const void **)(a2 + 64);
      *(void *)(a2 + 64) = a3;
      CFRetain(a3);
      if (v9) {
        CFRelease(v9);
      }
      if ((*(unsigned char *)(a1 + 220) & 2) == 0) {
        goto LABEL_17;
      }
      uint64_t v7 = stream_SetPropertyForPersistentStreamInfoUpgradingToWritingIfNecessary(a2, @"StreamInfoMediaPlaylistNetworkURL", *(void *)(a2 + 64));
      if (!v7)
      {
        if (*(unsigned char *)(a2 + 120))
        {
          if (!*(unsigned char *)(a2 + 121)) {
            stream_DowngradePersistentStreamInfoForReading(a2);
          }
        }
LABEL_17:
        uint64_t v8 = 0;
        goto LABEL_18;
      }
    }
    uint64_t v8 = v7;
LABEL_18:
    MEMORY[0x19970E2B0](*(void *)(a1 + 16));
    return v8;
  }

  return FigSignalErrorAt();
}

uint64_t stream_SetPropertyForPersistentStreamInfoUpgradingToWritingIfNecessary(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(unsigned char **)a1;
  CFTypeRef cf = 0;
  if ((v4[220] & 2) == 0 || (uint64_t v5 = *(void *)(a1 + 128)) == 0)
  {
    uint64_t v14 = FigSignalErrorAt();
LABEL_17:
    uint64_t v13 = v14;
    goto LABEL_19;
  }
  CFAllocatorRef v8 = CFGetAllocator(v4);
  uint64_t FigBaseObject = FigHLSPersistentStreamInfoGetFigBaseObject(v5);
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, CFAllocatorRef, CFTypeRef *))(v11 + 48);
  if (v12) {
    v12(FigBaseObject, a2, v8, &cf);
  }
  if (FigCFEqual())
  {
    uint64_t v13 = 0;
    goto LABEL_19;
  }
  uint64_t v14 = stream_UpgradePersistentStreamInfoForWriting(a1);
  if (v14) {
    goto LABEL_17;
  }
  uint64_t v15 = FigHLSPersistentStreamInfoGetFigBaseObject(*(void *)(a1 + 128));
  uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v16) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = 0;
  }
  unint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 56);
  if (v18)
  {
    uint64_t v14 = v18(v15, a2, a3);
    if (!v14) {
      uint64_t v14 = stream_SetNeedsToCommitPersistentStreamInfo((unsigned char *)a1);
    }
    goto LABEL_17;
  }
  uint64_t v13 = 4294954514;
LABEL_19:
  if (cf) {
    CFRelease(cf);
  }
  return v13;
}

uint64_t stream_DowngradePersistentStreamInfoForReading(uint64_t a1)
{
  if ((*(unsigned char *)(*(void *)a1 + 220) & 2) != 0 && *(void *)(a1 + 128))
  {
    if ((*(unsigned char *)(a1 + 176) & 2) == 0) {
      return 0;
    }
    uint64_t v2 = stream_CommitPersistentStreamInfoIfNecessary(a1);
    if (v2) {
      return v2;
    }
    FigGetUpTimeNanoseconds();
    uint64_t v3 = *(void *)(a1 + 128);
    uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v4) {
      uint64_t v5 = v4;
    }
    else {
      uint64_t v5 = 0;
    }
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 64);
    if (v6)
    {
      uint64_t v7 = v6(v3, 1);
      FigGetUpTimeNanoseconds();
      if (!v7) {
        *(_DWORD *)(a1 + 176) &= ~2u;
      }
    }
    else
    {
      FigGetUpTimeNanoseconds();
      return 4294954514;
    }
    return v7;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigStreamingCacheMediaStreamCopyNetworkURL(uint64_t a1, uint64_t a2, void *a3)
{
  if (a1 && a2 && a3)
  {
    MEMORY[0x19970E290](*(void *)(a1 + 16));
    if (*(unsigned char *)(a1 + 272) || (uint64_t v6 = *(void *)(a1 + 168)) == 0)
    {
LABEL_8:
      uint64_t v7 = FigSignalErrorAt();
    }
    else
    {
      while (v6 != a2)
      {
        uint64_t v6 = *(void *)(v6 + 8);
        if (!v6) {
          goto LABEL_8;
        }
      }
      CFTypeRef v8 = *(CFTypeRef *)(a2 + 64);
      if (v8) {
        CFTypeRef v8 = CFRetain(v8);
      }
      uint64_t v7 = 0;
      *a3 = v8;
    }
    MEMORY[0x19970E2B0](*(void *)(a1 + 16));
    return v7;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigStreamingCacheMediaStreamReserveSpaceForByteSize(uint64_t a1, uint64_t a2, const void *a3, double a4)
{
  unint64_t v12 = 0;
  if (a1 && a2)
  {
    MEMORY[0x19970E290](*(void *)(a1 + 16));
    if (*(unsigned char *)(a1 + 272)
      || *(unsigned char *)(a1 + 216) && (double v8 = *(double *)(a1 + 112), v8 > 0.0) && v8 + *(double *)(a1 + 192) <= a4
      || (uint64_t v9 = *(void *)(a1 + 168)) == 0)
    {
LABEL_10:
      uint64_t v10 = FigSignalErrorAt();
    }
    else
    {
      while (v9 != a2)
      {
        uint64_t v9 = *(void *)(v9 + 8);
        if (!v9) {
          goto LABEL_10;
        }
      }
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 232), (const void *)*(int *)(a2 + 56), 0);
      if (sc_HasEnoughAvailableBackingMemory(a1, (uint64_t)a3, (uint64_t *)&v12)
        || sc_GetBackingForMediaStreamAtTime(a1, a2, v12, a4))
      {
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 232), (const void *)*(int *)(a2 + 56), a3);
        uint64_t v10 = 0;
      }
      else
      {
        uint64_t v10 = 4294951055;
      }
    }
    MEMORY[0x19970E2B0](*(void *)(a1 + 16));
    return v10;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

BOOL sc_HasEnoughAvailableBackingMemory(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t context = 0;
  CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 232), (CFDictionaryApplierFunction)sc_ComputeTotalReservedSizeFunc, &context);
  if ((*(unsigned char *)(a1 + 220) & 2) == 0)
  {
    uint64_t v6 = *(void *)(a1 + 72);
    if (v6 >= 1)
    {
      BOOL result = v6 >= (unint64_t)(*(void *)(a1 + 184) + a2 + context);
      if (!a3) {
        return result;
      }
      goto LABEL_9;
    }
LABEL_6:
    BOOL result = 1;
    if (!a3) {
      return result;
    }
    goto LABEL_9;
  }
  if (*(void *)(a1 + 40)) {
    goto LABEL_6;
  }
  BOOL result = FigShared_ReserveDiskCacheBacking(*(const __CFString **)(a1 + 32), *(const void **)(a1 + 48), *(void *)(a1 + 184) + a2 + context) == 0;
  if (!a3) {
    return result;
  }
LABEL_9:
  if (result)
  {
    a2 = 0;
  }
  else if ((*(unsigned char *)(a1 + 220) & 2) == 0)
  {
    a2 = *(void *)(a1 + 184) + a2 + context - *(void *)(a1 + 72);
  }
  *a3 = a2;
  return result;
}

BOOL sc_GetBackingForMediaStreamAtTime(uint64_t a1, uint64_t a2, unint64_t a3, double a4)
{
  if (!*(unsigned char *)(a2 + 121)) {
    return 0;
  }
  double v5 = a4;
  if (*(unsigned char *)(a1 + 216))
  {
    a4 = *(double *)(a1 + 192);
    if (a4 >= v5) {
      a4 = v5;
    }
  }
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  double v10 = a4 - *(double *)(a1 + 96);
  if (v10 >= 0.0) {
    double v11 = v10;
  }
  else {
    double v11 = 0.0;
  }
  int v12 = *(_DWORD *)(a2 + 56);
  char v27 = 0;
  double v13 = v11;
  double v14 = v11;
  do
  {
    uint64_t v15 = *(void *)(a1 + 168);
    if (!v15) {
      break;
    }
    uint64_t v16 = 0;
    do
    {
      if (*(_DWORD *)(v15 + 56) != v12) {
        goto LABEL_16;
      }
      uint64_t v17 = *(void *)(v15 + 24);
      if (!v17) {
        goto LABEL_16;
      }
      do
      {
        uint64_t v18 = v17;
        uint64_t v17 = *(void *)(v17 + 8);
      }
      while (v17);
      double v19 = *(double *)(v18 + 120);
      if (v19 < v14)
      {
        double v13 = v14;
        uint64_t v16 = v15;
        double v14 = *(double *)(v18 + 120);
      }
      else
      {
LABEL_16:
        double v19 = v14;
      }
      uint64_t v15 = *(void *)(v15 + 8);
    }
    while (v15);
    if (!v16) {
      break;
    }
    if ((*(unsigned char *)(a1 + 220) & 2) == 0 || !stream_EnsurePersistentStreamInfo(a2, &v27))
    {
      while (1)
      {
        uint64_t v21 = *(void *)(v16 + 24);
        if (!v21) {
          break;
        }
        do
        {
          uint64_t v22 = v21;
          uint64_t v21 = *(void *)(v21 + 8);
        }
        while (v21);
        if (v22 == v8)
        {
          if ((*(unsigned char *)(a1 + 220) & 2) != 0 && v27) {
            stream_UnlockPersistentStreamInfoForAnything(a2);
          }
          goto LABEL_39;
        }
        if (*(double *)(v22 + 120) + *(double *)(v22 + 128) > v13)
        {
          int v20 = 0;
          uint64_t v8 = v22;
LABEL_30:
          if ((*(unsigned char *)(a1 + 220) & 2) != 0 && v27) {
            stream_UnlockPersistentStreamInfoForAnything(a2);
          }
          double v13 = v11;
          double v19 = v11;
          goto LABEL_34;
        }
        uint64_t v23 = *(void *)(a1 + 184);
        int v20 = 1;
        segment_EvictEntry((void *)v22, 0, 1);
        v9 += v23 - *(void *)(a1 + 184);
        if (v9 >= a3) {
          goto LABEL_30;
        }
      }
      int v20 = 0;
      goto LABEL_30;
    }
    int v20 = 0;
LABEL_34:
    double v14 = v19;
  }
  while (!v20);
LABEL_39:
  BOOL v24 = a3 > v9;
  unint64_t v25 = a3 - v9;
  if (!v24) {
    return 1;
  }
  if (*(unsigned char *)(a1 + 216))
  {
    if (*(double *)(a1 + 192) > v5) {
      double v5 = *(double *)(a1 + 192);
    }
  }
  return sc_GetBackingForMediaStreamFromLaterSegments(a1, a2, v25, v5 + *(double *)(a1 + 104)) >= v25;
}

uint64_t FigStreamingCacheMediaStreamGetMediaSegmentAtTime(uint64_t a1, uint64_t a2, void *a3, double a4)
{
  if (!a1 || !a2 || !a3)
  {
    uint64_t v9 = FigSignalErrorAt();
    uint64_t i = 0;
    if (v9) {
      return v9;
    }
    goto LABEL_20;
  }
  MEMORY[0x19970E290](*(void *)(a1 + 16));
  if (*(unsigned char *)(a1 + 272) || (uint64_t v8 = *(void *)(a1 + 168)) == 0)
  {
LABEL_8:
    uint64_t v9 = FigSignalErrorAt();
    uint64_t i = 0;
  }
  else
  {
    while (v8 != a2)
    {
      uint64_t v8 = *(void *)(v8 + 8);
      if (!v8) {
        goto LABEL_8;
      }
    }
    for (uint64_t i = *(void *)(a2 + 24); i; uint64_t i = *(void *)(i + v12))
    {
      double v11 = *(double *)(i + 120);
      if (v11 <= a4 && v11 + *(double *)(i + 128) > a4) {
        break;
      }
      uint64_t v12 = v11 >= a4 ? 8 : 16;
    }
    if (i) {
      uint64_t v9 = 0;
    }
    else {
      uint64_t v9 = 4294951053;
    }
  }
  MEMORY[0x19970E2B0](*(void *)(a1 + 16));
  if (!v9) {
LABEL_20:
  }
    *a3 = i;
  return v9;
}

uint64_t FigStreamingCacheMediaStreamGetMediaSegmentAtOffset(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, unsigned char *a5, void *a6)
{
  uint64_t v23 = 0;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v18 = 0u;
  memset(v17, 0, sizeof(v17));
  if (!a1) {
    goto LABEL_23;
  }
  uint64_t v8 = a2;
  if (!a2)
  {
    uint64_t v13 = FigSignalErrorAt();
    goto LABEL_25;
  }
  uint64_t v9 = a3;
  if (!a3)
  {
    uint64_t v13 = FigSignalErrorAt();
    uint64_t v8 = 0;
    goto LABEL_15;
  }
  if (a4 < 0)
  {
LABEL_23:
    uint64_t v13 = FigSignalErrorAt();
    uint64_t v8 = 0;
LABEL_25:
    LOBYTE(v9) = 0;
    goto LABEL_15;
  }
  if (!a6)
  {
    uint64_t v13 = FigSignalErrorAt();
    LOBYTE(v9) = 0;
    if (!a5) {
      return v13;
    }
    goto LABEL_21;
  }
  MEMORY[0x19970E290](*(void *)(a1 + 16));
  if (*(unsigned char *)(a1 + 272) || (uint64_t v12 = *(void **)(a1 + 168)) == 0)
  {
LABEL_10:
    uint64_t v13 = FigSignalErrorAt();
    uint64_t v8 = 0;
    LOBYTE(v9) = 0;
  }
  else
  {
    while (v12 != v8)
    {
      uint64_t v12 = (void *)v12[1];
      if (!v12) {
        goto LABEL_10;
      }
    }
    *((void *)&v18 + 1) = v9;
    *(void *)&long long v19 = a4;
    double v14 = MediaSegmentOffsetList_RB_FIND((void **)v8 + 4, v17);
    uint64_t v8 = v14;
    if (v14)
    {
      uint64_t v13 = 0;
      LOBYTE(v9) = v14[20] & 1;
    }
    else
    {
      LOBYTE(v9) = 0;
      uint64_t v13 = 4294951053;
    }
  }
  MEMORY[0x19970E2B0](*(void *)(a1 + 16));
LABEL_15:
  if (a6)
  {
    if (v13) {
      uint64_t v15 = 0;
    }
    else {
      uint64_t v15 = v8;
    }
    *a6 = v15;
  }
  if (a5) {
LABEL_21:
  }
    *a5 = v9;
  return v13;
}

void *MediaSegmentOffsetList_RB_FIND(void **a1, void *a2)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    do
    {
      int started = segment_SortByURLAndStartOffset(a2, v2);
      if (started < 0)
      {
        double v5 = (void **)(v2 + 4);
      }
      else
      {
        if (!started) {
          return v2;
        }
        double v5 = (void **)(v2 + 5);
      }
      uint64_t v2 = *v5;
    }
    while (*v5);
  }
  return v2;
}

uint64_t FigStreamingCacheMediaStreamGetMediaSegmentWithMediaSequenceNumber(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4, uint64_t *a5)
{
  uint64_t valuePtr = a3;
  uint64_t v21 = 0;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  memset(v16, 0, sizeof(v16));
  if (a1 && a2 && a5)
  {
    CFNumberRef v9 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt64Type, &valuePtr);
    if (v9)
    {
      MEMORY[0x19970E290](*(void *)(a1 + 16));
      if (*(unsigned char *)(a1 + 272) || (uint64_t v10 = *(void *)(a1 + 168)) == 0)
      {
LABEL_9:
        uint64_t v11 = FigSignalErrorAt();
        uint64_t v12 = 0;
        char v13 = 0;
      }
      else
      {
        while (v10 != a2)
        {
          uint64_t v10 = *(void *)(v10 + 8);
          if (!v10) {
            goto LABEL_9;
          }
        }
        *((void *)&v17 + 1) = v9;
        uint64_t v14 = MediaSegmentMediaSequenceNumberList_RB_FIND((uint64_t *)(a2 + 40), (uint64_t)v16);
        uint64_t v12 = v14;
        if (v14)
        {
          uint64_t v11 = 0;
          char v13 = *(unsigned char *)(v14 + 160) & 1;
        }
        else
        {
          char v13 = 0;
          uint64_t v11 = 4294951053;
        }
      }
      MEMORY[0x19970E2B0](*(void *)(a1 + 16));
      if (!v11) {
        goto LABEL_14;
      }
      goto LABEL_15;
    }
    uint64_t v11 = FigSignalErrorAt();
    uint64_t v12 = 0;
  }
  else
  {
    uint64_t v11 = FigSignalErrorAt();
    uint64_t v12 = 0;
    CFNumberRef v9 = 0;
  }
  char v13 = 0;
  if (!v11) {
LABEL_14:
  }
    *a5 = v12;
LABEL_15:
  if (a4) {
    *a4 = v13;
  }
  if (v9) {
    CFRelease(v9);
  }
  return v11;
}

uint64_t MediaSegmentMediaSequenceNumberList_RB_FIND(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    do
    {
      int v4 = CFNumberCompare(*(CFNumberRef *)(a2 + 104), *(CFNumberRef *)(v2 + 104), 0);
      if (v4 < 0)
      {
        double v5 = (uint64_t *)(v2 + 56);
      }
      else
      {
        if (!v4) {
          return v2;
        }
        double v5 = (uint64_t *)(v2 + 64);
      }
      uint64_t v2 = *v5;
    }
    while (*v5);
  }
  return v2;
}

uint64_t FigStreamingCacheMediaStreamCopyCachedTimeRanges(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  char v30 = 0;
  if (a1 && a2 && a3)
  {
    MEMORY[0x19970E290](*(void *)(a1 + 16));
    if (*(unsigned char *)(a1 + 272)) {
      goto LABEL_8;
    }
    uint64_t v6 = *(void *)(a1 + 168);
    if (!v6) {
      goto LABEL_8;
    }
    while (v6 != a2)
    {
      uint64_t v6 = *(void *)(v6 + 8);
      if (!v6) {
        goto LABEL_8;
      }
    }
    CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    CFMutableArrayRef Mutable = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D510]);
    if (!Mutable)
    {
LABEL_8:
      uint64_t v7 = FigSignalErrorAt();
LABEL_29:
      MEMORY[0x19970E2B0](*(void *)(a1 + 16));
      return v7;
    }
    uint64_t v10 = Mutable;
    if ((*(unsigned char *)(a1 + 220) & 2) != 0)
    {
      uint64_t v11 = stream_EnsurePersistentStreamInfo(a2, &v30);
      if (v11) {
        goto LABEL_31;
      }
    }
    unint64_t v12 = *(void *)(a2 + 24);
    if (v12)
    {
      do
      {
        unint64_t started = v12;
        unint64_t v12 = *(void *)(v12 + 8);
      }
      while (v12);
      do
      {
        memset(&range, 0, sizeof(range));
        memset(&v28, 0, sizeof(v28));
        memset(&v27, 0, sizeof(v27));
        if (*(unsigned char *)(started + 160))
        {
          CMTimeMakeWithSeconds(&v28, *(Float64 *)(started + 120), 1000);
          unint64_t LastSegmentOfContiguousRangeContainingSegment = stream_GetLastSegmentOfContiguousRangeContainingSegment(started, 1);
          unint64_t v14 = LastSegmentOfContiguousRangeContainingSegment;
          double v16 = *(double *)(LastSegmentOfContiguousRangeContainingSegment + 120);
          if (*(unsigned char *)(LastSegmentOfContiguousRangeContainingSegment + 160)) {
            double v16 = v16 + *(double *)(LastSegmentOfContiguousRangeContainingSegment + 128);
          }
          CMTimeMakeWithSeconds(&v27, v16 - *(double *)(started + 120), 1000);
          v25.CMTime start = v28;
          CMTime duration = v27;
          CMTimeRangeMake(&range, &v25.start, &duration);
          CFAllocatorRef v17 = (const __CFAllocator *)FigGetAllocatorForMedia();
          CMTimeRange v25 = range;
          CFDictionaryRef v18 = CMTimeRangeCopyAsDictionary(&v25, v17);
          if (!v18) {
            goto LABEL_30;
          }
          CFDictionaryRef v19 = v18;
          CFArrayAppendValue(v10, v18);
          CFRelease(v19);
        }
        else
        {
          unint64_t v14 = started;
        }
        unint64_t started = MediaSegmentStartTimeList_RB_NEXT(v14);
      }
      while (started);
    }
    if (!CFArrayGetCount(v10))
    {
      CFAllocatorRef v20 = (const __CFAllocator *)FigGetAllocatorForMedia();
      long long v21 = *(_OWORD *)(MEMORY[0x1E4F1FA30] + 16);
      *(_OWORD *)&range.start.xpc_object_t value = *MEMORY[0x1E4F1FA30];
      *(_OWORD *)&range.start.CMTimeEpoch epoch = v21;
      *(_OWORD *)&range.duration.CMTimeScale timescale = *(_OWORD *)(MEMORY[0x1E4F1FA30] + 32);
      CFDictionaryRef v22 = CMTimeRangeCopyAsDictionary(&range, v20);
      if (!v22)
      {
LABEL_30:
        uint64_t v11 = FigSignalErrorAt();
        goto LABEL_31;
      }
      CFDictionaryRef v23 = v22;
      CFArrayAppendValue(v10, v22);
      CFRelease(v23);
    }
    if ((*(unsigned char *)(a1 + 220) & 2) == 0
      || !v30
      || (uint64_t v11 = stream_UnlockPersistentStreamInfoForAnything(a2), !v11))
    {
      uint64_t v7 = 0;
      *a3 = CFRetain(v10);
LABEL_28:
      CFRelease(v10);
      goto LABEL_29;
    }
LABEL_31:
    uint64_t v7 = v11;
    goto LABEL_28;
  }

  return FigSignalErrorAt();
}

unint64_t MediaSegmentStartTimeList_RB_NEXT(unint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    do
    {
      unint64_t result = v1;
      unint64_t v1 = *(void *)(v1 + 8);
    }
    while (v1);
  }
  else
  {
    unint64_t v3 = a1;
    unint64_t result = *(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL;
    if (!result || *(void *)(result + 8) != v3)
    {
      do
      {
        unint64_t result = *(void *)(v3 + 24) & 0xFFFFFFFFFFFFFFFELL;
        if (!result) {
          break;
        }
        BOOL v4 = v3 == *(void *)(result + 16);
        unint64_t v3 = *(void *)(v3 + 24) & 0xFFFFFFFFFFFFFFFELL;
      }
      while (v4);
    }
  }
  return result;
}

uint64_t FigStreamingCacheMediaStreamMarkComplete(uint64_t a1, uint64_t a2)
{
  int v18 = 0;
  if (a1 && a2)
  {
    FigStreamingCacheFlushIOSync(a1);
    MEMORY[0x19970E290](*(void *)(a1 + 16));
    if (!*(unsigned char *)(a1 + 272))
    {
      if ((*(unsigned char *)(a1 + 220) & 2) == 0) {
        goto LABEL_32;
      }
      uint64_t v4 = *(void *)(a1 + 168);
      if (v4)
      {
        while (v4 != a2)
        {
          uint64_t v4 = *(void *)(v4 + 8);
          if (!v4) {
            goto LABEL_8;
          }
        }
        if (!*(unsigned char *)(a2 + 120))
        {
          uint64_t v5 = sc_UpgradePersistentStoreForWriting(a1, &v18);
          if (!v5)
          {
            uint64_t v7 = *(void *)(a1 + 280);
            uint64_t v8 = *(void *)(a2 + 136);
            uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v9) {
              uint64_t v10 = v9;
            }
            else {
              uint64_t v10 = 0;
            }
            uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 56);
            if (!v11) {
              goto LABEL_26;
            }
            uint64_t v12 = v11(v7, v8, 1);
            if (!v12)
            {
              if ((*(unsigned char *)(*(void *)a2 + 220) & 2) == 0 || (*(unsigned char *)(a2 + 176) & 2) != 0)
              {
                uint64_t FigBaseObject = FigHLSPersistentStreamInfoGetFigBaseObject(*(void *)(a2 + 128));
                uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 8);
                if (v14) {
                  uint64_t v15 = v14;
                }
                else {
                  uint64_t v15 = 0;
                }
                double v16 = *(uint64_t (**)(uint64_t, __CFString *, void))(v15 + 56);
                if (v16)
                {
                  uint64_t v12 = v16(FigBaseObject, @"StreamInfoCompleteState", *MEMORY[0x1E4F1CFD0]);
                  if (!v12)
                  {
                    uint64_t v6 = stream_SetNeedsToCommitPersistentStreamInfo((unsigned char *)a2);
                    if (!v6) {
                      *(unsigned char *)(a2 + 120) = 1;
                    }
                    goto LABEL_27;
                  }
                  goto LABEL_35;
                }
LABEL_26:
                uint64_t v6 = 4294954514;
LABEL_27:
                sc_RestorePersistentStoreLockStatus(a1, v18);
                goto LABEL_28;
              }
              uint64_t v12 = FigSignalErrorAt();
            }
LABEL_35:
            uint64_t v6 = v12;
            goto LABEL_27;
          }
LABEL_9:
          uint64_t v6 = v5;
LABEL_28:
          MEMORY[0x19970E2B0](*(void *)(a1 + 16));
          return v6;
        }
LABEL_32:
        uint64_t v6 = 0;
        goto LABEL_28;
      }
    }
LABEL_8:
    uint64_t v5 = FigSignalErrorAt();
    goto LABEL_9;
  }

  return FigSignalErrorAt();
}

uint64_t stream_SetNeedsToCommitPersistentStreamInfo(unsigned char *a1)
{
  if ((*(unsigned char *)(*(void *)a1 + 220) & 2) != 0 && (a1[176] & 2) == 0) {
    return FigSignalErrorAt();
  }
  a1[122] = 1;
  return 0;
}

uint64_t FigStreamingCacheMediaStreamIsComplete(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  if (a1 && a2 && a3)
  {
    MEMORY[0x19970E290](*(void *)(a1 + 16));
    if (*(unsigned char *)(a1 + 272) || (uint64_t v6 = *(void *)(a1 + 168)) == 0)
    {
LABEL_8:
      uint64_t v7 = FigSignalErrorAt();
    }
    else
    {
      while (v6 != a2)
      {
        uint64_t v6 = *(void *)(v6 + 8);
        if (!v6) {
          goto LABEL_8;
        }
      }
      uint64_t v7 = 0;
      *a3 = *(unsigned char *)(a2 + 120);
    }
    MEMORY[0x19970E2B0](*(void *)(a1 + 16));
    return v7;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigStreamingCacheMediaStreamIsWritableToDisk(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  if (a1 && a2 && a3)
  {
    MEMORY[0x19970E290](*(void *)(a1 + 16));
    if (*(unsigned char *)(a1 + 272) || (uint64_t v6 = *(void *)(a1 + 168)) == 0)
    {
LABEL_8:
      uint64_t v7 = FigSignalErrorAt();
    }
    else
    {
      while (v6 != a2)
      {
        uint64_t v6 = *(void *)(v6 + 8);
        if (!v6) {
          goto LABEL_8;
        }
      }
      uint64_t v8 = *(void *)(a2 + 128);
      if (v8)
      {
        if ((*(unsigned char *)(*(void *)a2 + 220) & 2) != 0) {
          LODWORD(v8) = (*(unsigned __int8 *)(a2 + 176) >> 1) & 1;
        }
        else {
          LOBYTE(v8) = 1;
        }
      }
      uint64_t v7 = 0;
      *a3 = v8;
    }
    MEMORY[0x19970E2B0](*(void *)(a1 + 16));
    return v7;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigStreamingCacheMediaStreamSetPersistent(uint64_t a1, unsigned char *a2, uint64_t a3)
{
  int v3 = *MEMORY[0x1E4F1CFD0] != a3;
  if (*MEMORY[0x1E4F1CFD0] == a3) {
    uint64_t v4 = kFigHLSPersistentStreamInfoEvictionPolicy_Persists;
  }
  else {
    uint64_t v4 = kFigHLSPersistentStreamInfoEvictionPolicy_EvictionByMaxStreamSize;
  }
  int v12 = 0;
  if (a1 && a2)
  {
    MEMORY[0x19970E290](*(void *)(a1 + 16));
    if (*(unsigned char *)(a1 + 272)) {
      goto LABEL_12;
    }
    if ((*(unsigned char *)(a1 + 220) & 2) != 0)
    {
      uint64_t v7 = *(void *)(a1 + 168);
      if (!v7) {
        goto LABEL_12;
      }
      uint64_t v8 = (uint64_t)*v4;
      while ((unsigned char *)v7 != a2)
      {
        uint64_t v7 = *(void *)(v7 + 8);
        if (!v7) {
          goto LABEL_12;
        }
      }
      if (a2[121] != v3)
      {
        if ((*(unsigned char *)(*(void *)a2 + 220) & 2) == 0 || (a2[176] & 2) != 0)
        {
          uint64_t v9 = sc_UpgradePersistentStoreForWriting(a1, &v12);
          if (!v9)
          {
            uint64_t v10 = stream_SetPropertyForPersistentStreamInfoUpgradingToWritingIfNecessary((uint64_t)a2, @"StreamInfoEvictionPolicy", v8);
            if (!v10)
            {
              if (a2[120])
              {
                if (!a2[121]) {
                  stream_DowngradePersistentStreamInfoForReading((uint64_t)a2);
                }
              }
              a2[121] = v3;
            }
            sc_RestorePersistentStoreLockStatus(a1, v12);
            goto LABEL_24;
          }
          goto LABEL_13;
        }
LABEL_12:
        uint64_t v9 = FigSignalErrorAt();
LABEL_13:
        uint64_t v10 = v9;
LABEL_24:
        MEMORY[0x19970E2B0](*(void *)(a1 + 16));
        return v10;
      }
    }
    uint64_t v10 = 0;
    goto LABEL_24;
  }

  return FigSignalErrorAt();
}

uint64_t FigStreamingCacheMediaStreamCopyPersistent(uint64_t a1, uint64_t a2, void *a3)
{
  if (a1 && a2 && a3)
  {
    MEMORY[0x19970E290](*(void *)(a1 + 16));
    if (!*(unsigned char *)(a1 + 272))
    {
      if ((*(unsigned char *)(a1 + 220) & 2) == 0) {
        goto LABEL_12;
      }
      uint64_t v6 = *(void *)(a1 + 168);
      if (v6)
      {
        while (v6 != a2)
        {
          uint64_t v6 = *(void *)(v6 + 8);
          if (!v6) {
            goto LABEL_9;
          }
        }
        if (!*(unsigned char *)(a2 + 121))
        {
          uint64_t v8 = (void *)MEMORY[0x1E4F1CFD0];
          goto LABEL_14;
        }
LABEL_12:
        uint64_t v8 = (void *)MEMORY[0x1E4F1CFC8];
LABEL_14:
        uint64_t v7 = 0;
        *a3 = *v8;
        goto LABEL_15;
      }
    }
LABEL_9:
    uint64_t v7 = FigSignalErrorAt();
    if (v7)
    {
LABEL_15:
      MEMORY[0x19970E2B0](*(void *)(a1 + 16));
      return v7;
    }
    goto LABEL_12;
  }

  return FigSignalErrorAt();
}

uint64_t FigStreamingCacheMediaStreamCreateMediaSegment(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, uint64_t a5, void *a6, double a7, double a8)
{
  unint64_t v19 = 0;
  uint64_t valuePtr = a5;
  if (a6)
  {
    CFNumberRef v15 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt64Type, &valuePtr);
    if (!v15) {
      return FigSignalErrorAt();
    }
    CFNumberRef v16 = v15;
    uint64_t v17 = sc_CreateMediaSegment(a1, a2, a3, a4, v15, 1, &v19, a7, a8);
    if (!v17) {
      *a6 = v19;
    }
    CFRelease(v16);
    return v17;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t sc_CreateMediaSegment(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, const void *a5, int a6, unint64_t *a7, double a8, double a9)
{
  uint64_t v189 = 0;
  long long v187 = 0u;
  long long v188 = 0u;
  long long v185 = 0u;
  long long v186 = 0u;
  long long v184 = 0u;
  memset(v183, 0, sizeof(v183));
  if (a1 && a2 && a3 && (a4 & 0x8000000000000000) == 0 && a9 > 0.0 && a7)
  {
    MEMORY[0x19970E290](*(void *)(a1 + 16));
    if (*(unsigned char *)(a1 + 272)
      || a6 && *(unsigned char *)(a1 + 217) && (*(double *)(a1 + 200) > a8 || *(double *)(a1 + 208) < a8))
    {
      goto LABEL_18;
    }
    double v18 = a9 + 0.0000111111111;
    if (*(unsigned char *)(a1 + 216))
    {
      double v19 = *(double *)(a1 + 112);
      if (v19 > 0.0 && v18 + a8 > v19 + *(double *)(a1 + 192)) {
        goto LABEL_18;
      }
    }
    uint64_t v20 = *(void *)(a1 + 168);
    if (!v20) {
      goto LABEL_18;
    }
    while (v20 != a2)
    {
      uint64_t v20 = *(void *)(v20 + 8);
      if (!v20) {
        goto LABEL_18;
      }
    }
    *((void *)&v184 + 1) = a3;
    *(void *)&long long v185 = a4;
    *((double *)&v186 + 1) = a8;
    CFDictionaryRef v23 = (uint64_t *)(a2 + 24);
    uint64_t v22 = *(void *)(a2 + 24);
    if (v22)
    {
      uint64_t v21 = 4294951052;
      do
      {
        double v24 = a8 - *(double *)(v22 + 120);
        if (v24 >= 0.0)
        {
          if (v24 == 0.0) {
            goto LABEL_307;
          }
          CMTimeRange v25 = (uint64_t *)(v22 + 16);
        }
        else
        {
          CMTimeRange v25 = (uint64_t *)(v22 + 8);
        }
        uint64_t v22 = *v25;
      }
      while (v22);
    }
    CFTypeRef v26 = (unint64_t *)(a2 + 32);
    CMTime v27 = MediaSegmentOffsetList_RB_FIND((void **)(a2 + 32), v183);
    if (v27)
    {
      CMTime v28 = v27;
      uint64_t v29 = a5;
      BOOL v30 = 0;
      for (uint64_t i = 0; ; ++i)
      {
        CFArrayRef Count = (const __CFArray *)v28[17];
        if (Count) {
          CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
        }
        if (i >= (uint64_t)Count || v30) {
          break;
        }
        FigCFArrayGetDoubleAtIndex();
        BOOL v30 = vabdd_f64(0.0, a8) < 2.22044605e-16;
      }
      a5 = v29;
      CFDictionaryRef v23 = (uint64_t *)(a2 + 24);
      CFTypeRef v26 = (unint64_t *)(a2 + 32);
      if (!v30) {
        goto LABEL_18;
      }
    }
    uint64_t v33 = malloc_type_calloc(1uLL, 0xA8uLL, 0x1060040A1004B64uLL);
    if (!v33)
    {
LABEL_18:
      uint64_t v21 = FigSignalErrorAt();
LABEL_307:
      MEMORY[0x19970E2B0](*(void *)(a1 + 16));
      return v21;
    }
    unint64_t v34 = (unint64_t)v33;
    v33[11] = CFRetain(a3);
    *(void *)(v34 + 96) = a4;
    if (a5) {
      CFTypeRef v35 = CFRetain(a5);
    }
    else {
      CFTypeRef v35 = 0;
    }
    *(void *)(v34 + 104) = v35;
    *(double *)(v34 + 120) = a8;
    *(double *)(v34 + 128) = v18;
    *(void *)unint64_t v34 = a2;
    *(_DWORD *)(v34 + 80) = 1;
    uint64_t v36 = *(void *)(a2 + 24);
    CFSetAddValue(*(CFMutableSetRef *)(a2 + 48), (const void *)v34);
    unint64_t v37 = *(void *)(a2 + 24);
    if (v37)
    {
      uint64_t v38 = *(void *)(a2 + 24);
      do
      {
        uint64_t v39 = v38;
        double v40 = *(double *)(v34 + 120) - *(double *)(v38 + 120);
        if (v40 >= 0.0) {
          int v41 = 0;
        }
        else {
          int v41 = -1;
        }
        if (v40 > 0.0) {
          int v42 = 1;
        }
        else {
          int v42 = v41;
        }
        if (v40 >= 0.0)
        {
          if (!v42) {
            goto LABEL_131;
          }
          long long v43 = (uint64_t *)(v39 + 16);
        }
        else
        {
          long long v43 = (uint64_t *)(v39 + 8);
        }
        uint64_t v38 = *v43;
      }
      while (v38);
    }
    else
    {
      uint64_t v39 = 0;
      int v42 = 0;
    }
    if (*(void *)(v34 + 24)) {
      uint64_t v44 = v39 | 1;
    }
    else {
      uint64_t v44 = v39;
    }
    long long v45 = (void *)(v44 & 0xFFFFFFFFFFFFFFFELL);
    uint64_t v46 = v44 | 1;
    *(void *)(v34 + 8) = 0;
    *(void *)(v34 + 16) = 0;
    *(void *)(v34 + 24) = v44 | 1;
    long long v47 = (unint64_t *)v23;
    unint64_t v48 = v34;
    if (v39)
    {
      if (v42 < 0) {
        long long v47 = (unint64_t *)(v39 + 8);
      }
      else {
        long long v47 = (unint64_t *)(v39 + 16);
      }
      unint64_t v48 = v37;
    }
    *long long v47 = v34;
    if (v45)
    {
      unint64_t v49 = v34;
      do
      {
        uint64_t v50 = v45[3];
        if ((v50 & 1) == 0) {
          break;
        }
        uint64_t v51 = (void *)(v50 & 0xFFFFFFFFFFFFFFFELL);
        BOOL v52 = *(void **)((v50 & 0xFFFFFFFFFFFFFFFELL) + 8);
        if (v52 == v45)
        {
          BOOL v52 = (void *)v51[2];
          if (!v52 || (uint64_t v53 = v52[3], (v53 & 1) == 0))
          {
            uint64_t v56 = (void *)v45[2];
            if (v56 == (void *)v49)
            {
              uint64_t v62 = *(void *)(v49 + 8);
              v45[2] = v62;
              if (v62)
              {
                uint64_t v63 = v46 | 1;
                if ((*(void *)(v62 + 24) & 1) == 0) {
                  uint64_t v63 = (uint64_t)v45;
                }
                *(void *)(v62 + 24) = v63;
                uint64_t v64 = v45[3];
                uint64_t v46 = *(void *)(v49 + 24);
              }
              else
              {
                uint64_t v64 = v50;
              }
              *(void *)(v49 + 24) = v64 & 0xFFFFFFFFFFFFFFFELL | v46 & 1;
              if ((v64 & 0xFFFFFFFFFFFFFFFELL) != 0)
              {
                uint64_t v74 = v45[3];
                unint64_t v75 = v74 & 0xFFFFFFFFFFFFFFFELL;
                if (*(void **)((v74 & 0xFFFFFFFFFFFFFFFELL) + 8) == v45) {
                  *(void *)(v75 + 8) = v49;
                }
                else {
                  *(void *)(v75 + 16) = v49;
                }
              }
              else
              {
                *CFDictionaryRef v23 = v49;
                uint64_t v74 = v45[3];
                unint64_t v48 = v49;
              }
              *(void *)(v49 + 8) = v45;
              if (v74) {
                uint64_t v76 = v49 | 1;
              }
              else {
                uint64_t v76 = v49;
              }
              v45[3] = v76;
              uint64_t v58 = v51[1];
              uint64_t v56 = *(void **)(v58 + 16);
              unint64_t v57 = *(void *)(v49 + 24) & 0xFFFFFFFFFFFFFFFELL;
              unint64_t v55 = (unint64_t)v45;
            }
            else
            {
              unint64_t v57 = v50 & 0xFFFFFFFFFFFFFFFELL;
              uint64_t v58 = (uint64_t)v45;
              unint64_t v55 = v49;
              unint64_t v49 = (unint64_t)v45;
            }
            *(void *)(v49 + 24) = v57;
            uint64_t v77 = v51[3] | 1;
            v51[3] = v77;
            v51[1] = v56;
            if (v56)
            {
              uint64_t v78 = v50 | 1;
              if (v56[3]) {
                uint64_t v79 = (void *)v78;
              }
              else {
                uint64_t v79 = v51;
              }
              v56[3] = v79;
              uint64_t v77 = v51[3];
            }
            *(void *)(v58 + 24) = v77 & 0xFFFFFFFFFFFFFFFELL | *(void *)(v58 + 24) & 1;
            if ((v77 & 0xFFFFFFFFFFFFFFFELL) != 0)
            {
              uint64_t v80 = v51[3];
              unint64_t v81 = v80 & 0xFFFFFFFFFFFFFFFELL;
              if (*(void **)((v80 & 0xFFFFFFFFFFFFFFFELL) + 8) == v51) {
                *(void *)(v81 + 8) = v58;
              }
              else {
                *(void *)(v81 + 16) = v58;
              }
            }
            else
            {
              *CFDictionaryRef v23 = v58;
              uint64_t v80 = v51[3];
              unint64_t v48 = v58;
            }
            *(void *)(v58 + 16) = v51;
            if (v80) {
              uint64_t v68 = v58 | 1;
            }
            else {
              uint64_t v68 = v58;
            }
            goto LABEL_128;
          }
        }
        else if (!v52 || (uint64_t v53 = v52[3], (v53 & 1) == 0))
        {
          if (v45[1] == v49)
          {
            uint64_t v59 = *(void *)(v49 + 16);
            v45[1] = v59;
            if (v59)
            {
              uint64_t v60 = v46 | 1;
              if ((*(void *)(v59 + 24) & 1) == 0) {
                uint64_t v60 = (uint64_t)v45;
              }
              *(void *)(v59 + 24) = v60;
              uint64_t v61 = v45[3];
              uint64_t v46 = *(void *)(v49 + 24);
            }
            else
            {
              uint64_t v61 = v50;
            }
            *(void *)(v49 + 24) = v61 & 0xFFFFFFFFFFFFFFFELL | v46 & 1;
            if ((v61 & 0xFFFFFFFFFFFFFFFELL) != 0)
            {
              uint64_t v65 = v45[3];
              unint64_t v66 = v65 & 0xFFFFFFFFFFFFFFFELL;
              if (*(void **)((v65 & 0xFFFFFFFFFFFFFFFELL) + 8) == v45) {
                *(void *)(v66 + 8) = v49;
              }
              else {
                *(void *)(v66 + 16) = v49;
              }
            }
            else
            {
              *CFDictionaryRef v23 = v49;
              uint64_t v65 = v45[3];
              unint64_t v48 = v49;
            }
            *(void *)(v49 + 16) = v45;
            if (v65) {
              uint64_t v67 = v49 | 1;
            }
            else {
              uint64_t v67 = v49;
            }
            v45[3] = v67;
            unint64_t v54 = *(void *)(v49 + 24) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v55 = (unint64_t)v45;
          }
          else
          {
            unint64_t v54 = v50 & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v55 = v49;
            unint64_t v49 = (unint64_t)v45;
          }
          *(void *)(v49 + 24) = v54;
          uint64_t v68 = v51[2];
          uint64_t v69 = v51[3] | 1;
          v51[3] = v69;
          uint64_t v70 = *(void *)(v68 + 8);
          v51[2] = v70;
          if (v70)
          {
            uint64_t v71 = v50 | 1;
            if ((*(void *)(v70 + 24) & 1) == 0) {
              uint64_t v71 = (uint64_t)v51;
            }
            *(void *)(v70 + 24) = v71;
            uint64_t v69 = v51[3];
          }
          *(void *)(v68 + 24) = v69 & 0xFFFFFFFFFFFFFFFELL | *(void *)(v68 + 24) & 1;
          if ((v69 & 0xFFFFFFFFFFFFFFFELL) != 0)
          {
            uint64_t v72 = v51[3];
            unint64_t v73 = v72 & 0xFFFFFFFFFFFFFFFELL;
            if (*(void **)((v72 & 0xFFFFFFFFFFFFFFFELL) + 8) == v51) {
              *(void *)(v73 + 8) = v68;
            }
            else {
              *(void *)(v73 + 16) = v68;
            }
          }
          else
          {
            *CFDictionaryRef v23 = v68;
            uint64_t v72 = v51[3];
            unint64_t v48 = v68;
          }
          *(void *)(v68 + 8) = v51;
          if (v72) {
            v68 |= 1uLL;
          }
LABEL_128:
          v51[3] = v68;
          goto LABEL_129;
        }
        v52[3] = v53 & 0xFFFFFFFFFFFFFFFELL;
        v45[3] &= ~1uLL;
        v51[3] |= 1uLL;
        unint64_t v55 = v50 & 0xFFFFFFFFFFFFFFFELL;
LABEL_129:
        uint64_t v46 = *(void *)(v55 + 24);
        unint64_t v49 = v55;
        long long v45 = (void *)(v46 & 0xFFFFFFFFFFFFFFFELL);
      }
      while ((v46 & 0xFFFFFFFFFFFFFFFELL) != 0);
    }
    *(void *)(v48 + 24) &= ~1uLL;
LABEL_131:
    uint64_t v82 = (void *)*v26;
    if (*v26)
    {
      do
      {
        unint64_t v83 = (unint64_t)v82;
        int started = segment_SortByURLAndStartOffset((void *)v34, v82);
        if (started < 0)
        {
          int v85 = (void **)(v83 + 32);
        }
        else
        {
          if (!started) {
            goto LABEL_208;
          }
          int v85 = (void **)(v83 + 40);
        }
        uint64_t v82 = *v85;
      }
      while (v82);
    }
    else
    {
      unint64_t v83 = 0;
      int started = 0;
    }
    unint64_t v86 = *(void *)(v34 + 48) & 1 | v83 & 0xFFFFFFFFFFFFFFFELL;
    if ((*(void *)(v34 + 48) & 1) == 0) {
      unint64_t v86 = v83;
    }
    LOBYTE(v87) = v86 | 1;
    *(void *)(v34 + 32) = 0;
    *(void *)(v34 + 40) = 0;
    *(void *)(v34 + 48) = v86 | 1;
    uint64_t v88 = (unint64_t *)(v83 + 40);
    if (started < 0) {
      uint64_t v88 = (unint64_t *)(v83 + 32);
    }
    if (!v83) {
      uint64_t v88 = v26;
    }
    *uint64_t v88 = v34;
    unint64_t v89 = v86 & 0xFFFFFFFFFFFFFFFELL;
    if ((v86 & 0xFFFFFFFFFFFFFFFELL) != 0)
    {
      unint64_t v90 = v34;
      do
      {
        uint64_t v91 = *(void *)(v89 + 48);
        if ((v91 & 1) == 0) {
          break;
        }
        unint64_t v92 = v91 & 0xFFFFFFFFFFFFFFFELL;
        uint64_t v93 = *(void *)((v91 & 0xFFFFFFFFFFFFFFFELL) + 32);
        if (v93 == v89)
        {
          uint64_t v93 = *(void *)(v92 + 40);
          if (!v93 || (uint64_t v94 = *(void *)(v93 + 48), (v94 & 1) == 0))
          {
            uint64_t v97 = *(void **)(v89 + 40);
            if (v97 == (void *)v90)
            {
              uint64_t v104 = *(void *)(v90 + 32);
              *(void *)(v89 + 40) = v104;
              if (v104)
              {
                uint64_t v105 = *(void *)(v104 + 48) & 1 | v89;
                if ((*(void *)(v104 + 48) & 1) == 0) {
                  uint64_t v105 = v89;
                }
                *(void *)(v104 + 48) = v105;
                uint64_t v91 = *(void *)(v89 + 48);
                uint64_t v87 = *(void *)(v90 + 48);
              }
              *(void *)(v90 + 48) = v91 & 0xFFFFFFFFFFFFFFFELL | v87 & 1;
              if ((v91 & 0xFFFFFFFFFFFFFFFELL) != 0)
              {
                uint64_t v106 = *(void *)(v89 + 48);
                unint64_t v107 = v106 & 0xFFFFFFFFFFFFFFFELL;
                if (*(void *)((v106 & 0xFFFFFFFFFFFFFFFELL) + 32) == v89) {
                  *(void *)(v107 + 32) = v90;
                }
                else {
                  *(void *)(v107 + 40) = v90;
                }
              }
              else
              {
                *CFTypeRef v26 = v90;
                uint64_t v106 = *(void *)(v89 + 48);
              }
              *(void *)(v90 + 32) = v89;
              uint64_t v119 = v106 & 1;
              BOOL v108 = v119 == 0;
              unint64_t v120 = v119 | v90 & 0xFFFFFFFFFFFFFFFELL;
              if (v108) {
                unint64_t v120 = v90;
              }
              *(void *)(v89 + 48) = v120;
              unint64_t v99 = *(void *)(v92 + 32);
              uint64_t v97 = *(void **)(v99 + 40);
              unint64_t v98 = *(void *)(v90 + 48) & 0xFFFFFFFFFFFFFFFELL;
              unint64_t v96 = v89;
            }
            else
            {
              unint64_t v98 = v91 & 0xFFFFFFFFFFFFFFFELL;
              unint64_t v99 = v89;
              unint64_t v96 = v90;
              unint64_t v90 = v89;
            }
            *(void *)(v90 + 48) = v98;
            uint64_t v121 = *(void *)(v92 + 48) | 1;
            *(void *)(v92 + 48) = v121;
            *(void *)(v92 + 32) = v97;
            if (v97)
            {
              uint64_t v122 = v97[6] & 1 | v92;
              if ((v97[6] & 1) == 0) {
                uint64_t v122 = v92;
              }
              v97[6] = v122;
              uint64_t v121 = *(void *)(v92 + 48);
            }
            *(void *)(v99 + 48) = v121 & 0xFFFFFFFFFFFFFFFELL | *(void *)(v99 + 48) & 1;
            if ((v121 & 0xFFFFFFFFFFFFFFFELL) != 0)
            {
              uint64_t v123 = *(void *)(v92 + 48);
              unint64_t v124 = v123 & 0xFFFFFFFFFFFFFFFELL;
              if (*(void *)((v123 & 0xFFFFFFFFFFFFFFFELL) + 32) == v92) {
                *(void *)(v124 + 32) = v99;
              }
              else {
                *(void *)(v124 + 40) = v99;
              }
            }
            else
            {
              *CFTypeRef v26 = v99;
              uint64_t v123 = *(void *)(v92 + 48);
            }
            *(void *)(v99 + 40) = v92;
            uint64_t v125 = v123 & 1;
            BOOL v108 = v125 == 0;
            unint64_t v111 = v125 | v99 & 0xFFFFFFFFFFFFFFFELL;
            if (v108) {
              unint64_t v111 = v99;
            }
            goto LABEL_205;
          }
        }
        else if (!v93 || (uint64_t v94 = *(void *)(v93 + 48), (v94 & 1) == 0))
        {
          if (*(void *)(v89 + 32) == v90)
          {
            uint64_t v100 = *(void *)(v90 + 40);
            *(void *)(v89 + 32) = v100;
            if (v100)
            {
              uint64_t v101 = *(void *)(v100 + 48) & 1 | v89;
              if ((*(void *)(v100 + 48) & 1) == 0) {
                uint64_t v101 = v89;
              }
              *(void *)(v100 + 48) = v101;
              uint64_t v91 = *(void *)(v89 + 48);
              uint64_t v87 = *(void *)(v90 + 48);
            }
            *(void *)(v90 + 48) = v91 & 0xFFFFFFFFFFFFFFFELL | v87 & 1;
            if ((v91 & 0xFFFFFFFFFFFFFFFELL) != 0)
            {
              uint64_t v102 = *(void *)(v89 + 48);
              unint64_t v103 = v102 & 0xFFFFFFFFFFFFFFFELL;
              if (*(void *)((v102 & 0xFFFFFFFFFFFFFFFELL) + 32) == v89) {
                *(void *)(v103 + 32) = v90;
              }
              else {
                *(void *)(v103 + 40) = v90;
              }
            }
            else
            {
              *CFTypeRef v26 = v90;
              uint64_t v102 = *(void *)(v89 + 48);
            }
            *(void *)(v90 + 40) = v89;
            uint64_t v109 = v102 & 1;
            BOOL v108 = v109 == 0;
            unint64_t v110 = v109 | v90 & 0xFFFFFFFFFFFFFFFELL;
            if (v108) {
              unint64_t v110 = v90;
            }
            *(void *)(v89 + 48) = v110;
            unint64_t v95 = *(void *)(v90 + 48) & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v96 = v89;
          }
          else
          {
            unint64_t v95 = v91 & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v96 = v90;
            unint64_t v90 = v89;
          }
          *(void *)(v90 + 48) = v95;
          unint64_t v111 = *(void *)(v92 + 40);
          uint64_t v112 = *(void *)(v92 + 48) | 1;
          *(void *)(v92 + 48) = v112;
          uint64_t v113 = *(void *)(v111 + 32);
          *(void *)(v92 + 40) = v113;
          if (v113)
          {
            uint64_t v114 = *(void *)(v113 + 48) & 1 | v92;
            if ((*(void *)(v113 + 48) & 1) == 0) {
              uint64_t v114 = v92;
            }
            *(void *)(v113 + 48) = v114;
            uint64_t v112 = *(void *)(v92 + 48);
          }
          *(void *)(v111 + 48) = v112 & 0xFFFFFFFFFFFFFFFELL | *(void *)(v111 + 48) & 1;
          if ((v112 & 0xFFFFFFFFFFFFFFFELL) != 0)
          {
            uint64_t v115 = *(void *)(v92 + 48);
            unint64_t v116 = v115 & 0xFFFFFFFFFFFFFFFELL;
            if (*(void *)((v115 & 0xFFFFFFFFFFFFFFFELL) + 32) == v92) {
              *(void *)(v116 + 32) = v111;
            }
            else {
              *(void *)(v116 + 40) = v111;
            }
          }
          else
          {
            *CFTypeRef v26 = v111;
            uint64_t v115 = *(void *)(v92 + 48);
          }
          *(void *)(v111 + 32) = v92;
          uint64_t v117 = v115 & 1;
          BOOL v108 = v117 == 0;
          unint64_t v118 = v117 | v111 & 0xFFFFFFFFFFFFFFFELL;
          if (!v108) {
            unint64_t v111 = v118;
          }
LABEL_205:
          *(void *)(v92 + 48) = v111;
          goto LABEL_206;
        }
        *(void *)(v93 + 48) = v94 & 0xFFFFFFFFFFFFFFFELL;
        *(void *)(v89 + 48) &= ~1uLL;
        *(void *)(v92 + 48) |= 1uLL;
        unint64_t v96 = v91 & 0xFFFFFFFFFFFFFFFELL;
LABEL_206:
        uint64_t v87 = *(void *)(v96 + 48);
        unint64_t v90 = v96;
        unint64_t v89 = v87 & 0xFFFFFFFFFFFFFFFELL;
      }
      while ((v87 & 0xFFFFFFFFFFFFFFFELL) != 0);
    }
    *(void *)(*v26 + 48) &= ~1uLL;
LABEL_208:
    if (a5)
    {
      unint64_t v128 = *(void *)(a2 + 40);
      CGFloat v127 = (unint64_t *)(a2 + 40);
      unint64_t v126 = v128;
      if (v128)
      {
        do
        {
          unint64_t v129 = v126;
          int v130 = CFNumberCompare(*(CFNumberRef *)(v34 + 104), *(CFNumberRef *)(v126 + 104), 0);
          if (v130 < 0)
          {
            CFNumberRef v131 = (unint64_t *)(v129 + 56);
          }
          else
          {
            if (!v130) {
              goto LABEL_286;
            }
            CFNumberRef v131 = (unint64_t *)(v129 + 64);
          }
          unint64_t v126 = *v131;
        }
        while (v126);
      }
      else
      {
        unint64_t v129 = 0;
        int v130 = 0;
      }
      unint64_t v132 = *(void *)(v34 + 72) & 1 | v129 & 0xFFFFFFFFFFFFFFFELL;
      if ((*(void *)(v34 + 72) & 1) == 0) {
        unint64_t v132 = v129;
      }
      LOBYTE(v133) = v132 | 1;
      *(void *)(v34 + 56) = 0;
      *(void *)(v34 + 64) = 0;
      *(void *)(v34 + 72) = v132 | 1;
      BOOL v134 = (unint64_t *)(v129 + 64);
      if (v130 < 0) {
        BOOL v134 = (unint64_t *)(v129 + 56);
      }
      if (!v129) {
        BOOL v134 = v127;
      }
      *BOOL v134 = v34;
      unint64_t v135 = v132 & 0xFFFFFFFFFFFFFFFELL;
      if ((v132 & 0xFFFFFFFFFFFFFFFELL) != 0)
      {
        unint64_t v136 = v34;
        do
        {
          uint64_t v137 = *(void *)(v135 + 72);
          if ((v137 & 1) == 0) {
            break;
          }
          unint64_t v138 = v137 & 0xFFFFFFFFFFFFFFFELL;
          uint64_t v139 = *(void *)((v137 & 0xFFFFFFFFFFFFFFFELL) + 56);
          if (v139 == v135)
          {
            uint64_t v139 = *(void *)(v138 + 64);
            if (!v139 || (uint64_t v140 = *(void *)(v139 + 72), (v140 & 1) == 0))
            {
              long long v143 = *(void **)(v135 + 64);
              if (v143 == (void *)v136)
              {
                uint64_t v150 = *(void *)(v136 + 56);
                *(void *)(v135 + 64) = v150;
                if (v150)
                {
                  uint64_t v151 = *(void *)(v150 + 72) & 1 | v135;
                  if ((*(void *)(v150 + 72) & 1) == 0) {
                    uint64_t v151 = v135;
                  }
                  *(void *)(v150 + 72) = v151;
                  uint64_t v137 = *(void *)(v135 + 72);
                  uint64_t v133 = *(void *)(v136 + 72);
                }
                *(void *)(v136 + 72) = v137 & 0xFFFFFFFFFFFFFFFELL | v133 & 1;
                if ((v137 & 0xFFFFFFFFFFFFFFFELL) != 0)
                {
                  uint64_t v152 = *(void *)(v135 + 72);
                  unint64_t v153 = v152 & 0xFFFFFFFFFFFFFFFELL;
                  if (*(void *)((v152 & 0xFFFFFFFFFFFFFFFELL) + 56) == v135) {
                    *(void *)(v153 + 56) = v136;
                  }
                  else {
                    *(void *)(v153 + 64) = v136;
                  }
                }
                else
                {
                  *CGFloat v127 = v136;
                  uint64_t v152 = *(void *)(v135 + 72);
                }
                *(void *)(v136 + 56) = v135;
                uint64_t v164 = v152 & 1;
                BOOL v108 = v164 == 0;
                unint64_t v165 = v164 | v136 & 0xFFFFFFFFFFFFFFFELL;
                if (v108) {
                  unint64_t v165 = v136;
                }
                *(void *)(v135 + 72) = v165;
                unint64_t v145 = *(void *)(v138 + 56);
                long long v143 = *(void **)(v145 + 64);
                unint64_t v144 = *(void *)(v136 + 72) & 0xFFFFFFFFFFFFFFFELL;
                unint64_t v142 = v135;
              }
              else
              {
                unint64_t v144 = v137 & 0xFFFFFFFFFFFFFFFELL;
                unint64_t v145 = v135;
                unint64_t v142 = v136;
                unint64_t v136 = v135;
              }
              *(void *)(v136 + 72) = v144;
              uint64_t v166 = *(void *)(v138 + 72) | 1;
              *(void *)(v138 + 72) = v166;
              *(void *)(v138 + 56) = v143;
              if (v143)
              {
                uint64_t v167 = v143[9] & 1 | v138;
                if ((v143[9] & 1) == 0) {
                  uint64_t v167 = v138;
                }
                v143[9] = v167;
                uint64_t v166 = *(void *)(v138 + 72);
              }
              *(void *)(v145 + 72) = v166 & 0xFFFFFFFFFFFFFFFELL | *(void *)(v145 + 72) & 1;
              if ((v166 & 0xFFFFFFFFFFFFFFFELL) != 0)
              {
                uint64_t v168 = *(void *)(v138 + 72);
                unint64_t v169 = v168 & 0xFFFFFFFFFFFFFFFELL;
                if (*(void *)((v168 & 0xFFFFFFFFFFFFFFFELL) + 56) == v138) {
                  *(void *)(v169 + 56) = v145;
                }
                else {
                  *(void *)(v169 + 64) = v145;
                }
              }
              else
              {
                *CGFloat v127 = v145;
                uint64_t v168 = *(void *)(v138 + 72);
              }
              *(void *)(v145 + 64) = v138;
              uint64_t v170 = v168 & 1;
              BOOL v108 = v170 == 0;
              unint64_t v156 = v170 | v145 & 0xFFFFFFFFFFFFFFFELL;
              if (v108) {
                unint64_t v156 = v145;
              }
              goto LABEL_283;
            }
          }
          else if (!v139 || (uint64_t v140 = *(void *)(v139 + 72), (v140 & 1) == 0))
          {
            if (*(void *)(v135 + 56) == v136)
            {
              uint64_t v146 = *(void *)(v136 + 64);
              *(void *)(v135 + 56) = v146;
              if (v146)
              {
                uint64_t v147 = *(void *)(v146 + 72) & 1 | v135;
                if ((*(void *)(v146 + 72) & 1) == 0) {
                  uint64_t v147 = v135;
                }
                *(void *)(v146 + 72) = v147;
                uint64_t v137 = *(void *)(v135 + 72);
                uint64_t v133 = *(void *)(v136 + 72);
              }
              *(void *)(v136 + 72) = v137 & 0xFFFFFFFFFFFFFFFELL | v133 & 1;
              if ((v137 & 0xFFFFFFFFFFFFFFFELL) != 0)
              {
                uint64_t v148 = *(void *)(v135 + 72);
                unint64_t v149 = v148 & 0xFFFFFFFFFFFFFFFELL;
                if (*(void *)((v148 & 0xFFFFFFFFFFFFFFFELL) + 56) == v135) {
                  *(void *)(v149 + 56) = v136;
                }
                else {
                  *(void *)(v149 + 64) = v136;
                }
              }
              else
              {
                *CGFloat v127 = v136;
                uint64_t v148 = *(void *)(v135 + 72);
              }
              *(void *)(v136 + 64) = v135;
              uint64_t v154 = v148 & 1;
              BOOL v108 = v154 == 0;
              unint64_t v155 = v154 | v136 & 0xFFFFFFFFFFFFFFFELL;
              if (v108) {
                unint64_t v155 = v136;
              }
              *(void *)(v135 + 72) = v155;
              unint64_t v141 = *(void *)(v136 + 72) & 0xFFFFFFFFFFFFFFFELL;
              unint64_t v142 = v135;
            }
            else
            {
              unint64_t v141 = v137 & 0xFFFFFFFFFFFFFFFELL;
              unint64_t v142 = v136;
              unint64_t v136 = v135;
            }
            *(void *)(v136 + 72) = v141;
            unint64_t v156 = *(void *)(v138 + 64);
            uint64_t v157 = *(void *)(v138 + 72) | 1;
            *(void *)(v138 + 72) = v157;
            uint64_t v158 = *(void *)(v156 + 56);
            *(void *)(v138 + 64) = v158;
            if (v158)
            {
              uint64_t v159 = *(void *)(v158 + 72) & 1 | v138;
              if ((*(void *)(v158 + 72) & 1) == 0) {
                uint64_t v159 = v138;
              }
              *(void *)(v158 + 72) = v159;
              uint64_t v157 = *(void *)(v138 + 72);
            }
            *(void *)(v156 + 72) = v157 & 0xFFFFFFFFFFFFFFFELL | *(void *)(v156 + 72) & 1;
            if ((v157 & 0xFFFFFFFFFFFFFFFELL) != 0)
            {
              uint64_t v160 = *(void *)(v138 + 72);
              unint64_t v161 = v160 & 0xFFFFFFFFFFFFFFFELL;
              if (*(void *)((v160 & 0xFFFFFFFFFFFFFFFELL) + 56) == v138) {
                *(void *)(v161 + 56) = v156;
              }
              else {
                *(void *)(v161 + 64) = v156;
              }
            }
            else
            {
              *CGFloat v127 = v156;
              uint64_t v160 = *(void *)(v138 + 72);
            }
            *(void *)(v156 + 56) = v138;
            uint64_t v162 = v160 & 1;
            BOOL v108 = v162 == 0;
            unint64_t v163 = v162 | v156 & 0xFFFFFFFFFFFFFFFELL;
            if (!v108) {
              unint64_t v156 = v163;
            }
LABEL_283:
            *(void *)(v138 + 72) = v156;
            goto LABEL_284;
          }
          *(void *)(v139 + 72) = v140 & 0xFFFFFFFFFFFFFFFELL;
          *(void *)(v135 + 72) &= ~1uLL;
          *(void *)(v138 + 72) |= 1uLL;
          unint64_t v142 = v137 & 0xFFFFFFFFFFFFFFFELL;
LABEL_284:
          uint64_t v133 = *(void *)(v142 + 72);
          unint64_t v136 = v142;
          unint64_t v135 = v133 & 0xFFFFFFFFFFFFFFFELL;
        }
        while ((v133 & 0xFFFFFFFFFFFFFFFELL) != 0);
      }
      *(void *)(*v127 + 72) &= ~1uLL;
    }
LABEL_286:
    if (v36)
    {
      unint64_t v171 = MediaSegmentStartTimeList_RB_PREV(v34);
      if (v171 && (double v172 = *(double *)(v34 + 120), *(double *)(v171 + 120) + *(double *)(v171 + 128) >= v172))
      {
        int v176 = *(_DWORD *)(v171 + 160);
        BOOL v173 = 0;
        if ((v176 & 4) != 0)
        {
          *(_DWORD *)(v171 + 160) = v176 & 0xFFFFFFFB;
          unint64_t v177 = MediaSegmentStartTimeList_RB_NEXT(v34);
          if (!v177 || v172 + *(double *)(v34 + 128) < *(double *)(v177 + 120)) {
            BOOL v173 = 1;
          }
        }
        int v174 = 0;
      }
      else
      {
        BOOL v173 = 0;
        int v174 = 1;
      }
      unint64_t v178 = MediaSegmentStartTimeList_RB_NEXT(v34);
      if (!v178) {
        goto LABEL_304;
      }
      double v179 = *(double *)(v34 + 120);
      if (v179 + *(double *)(v34 + 128) < *(double *)(v178 + 120)) {
        goto LABEL_304;
      }
      int v180 = *(_DWORD *)(v178 + 160);
      if ((v180 & 2) != 0)
      {
        *(_DWORD *)(v178 + 160) = v180 & 0xFFFFFFFD;
        unint64_t v181 = MediaSegmentStartTimeList_RB_PREV(v34);
        if (!v181 || *(double *)(v181 + 120) + *(double *)(v181 + 128) < v179) {
          int v174 = 1;
        }
      }
      if (!v173)
      {
        if (!v174) {
          goto LABEL_306;
        }
        int v175 = 2;
      }
      else
      {
LABEL_304:
        int v175 = 4;
      }
    }
    else
    {
      int v175 = 6;
    }
    *(_DWORD *)(v34 + 160) |= v175;
LABEL_306:
    uint64_t v21 = 0;
    *a7 = v34;
    goto LABEL_307;
  }

  return FigSignalErrorAt();
}

uint64_t FigStreamingCacheMediaSegmentGetLength(uint64_t a1, uint64_t a2, void *a3, unint64_t a4, unint64_t *a5)
{
  if (a1 && a2 && a3 && a5)
  {
    MEMORY[0x19970E290](*(void *)(a1 + 16));
    if (*(unsigned char *)(a1 + 272)) {
      goto LABEL_9;
    }
    uint64_t v10 = *(void *)(a1 + 168);
    if (!v10) {
      goto LABEL_9;
    }
    while (v10 != a2)
    {
      uint64_t v10 = *(void *)(v10 + 8);
      if (!v10) {
        goto LABEL_9;
      }
    }
    if (CFSetContainsValue(*(CFSetRef *)(a2 + 48), a3))
    {
      uint64_t v11 = 0;
      unint64_t v13 = a3[14];
      BOOL v14 = v13 >= a4;
      unint64_t v15 = v13 - a4;
      if (v14) {
        unint64_t v12 = v15;
      }
      else {
        unint64_t v12 = 0;
      }
    }
    else
    {
LABEL_9:
      uint64_t v11 = FigSignalErrorAt();
      unint64_t v12 = 0;
    }
    MEMORY[0x19970E2B0](*(void *)(a1 + 16));
    if (v11) {
      return v11;
    }
  }
  else
  {
    uint64_t v11 = FigSignalErrorAt();
    unint64_t v12 = 0;
    if (v11) {
      return v11;
    }
  }
  if ((v12 & 0x8000000000000000) == 0)
  {
    uint64_t v11 = 0;
    *a5 = v12;
    return v11;
  }

  return FigSignalErrorAt();
}

uint64_t FigStreamingCacheMediaSegmentCopyBytes(uint64_t a1, uint64_t a2, CMBlockBufferRef *a3, size_t a4, size_t a5, BOOL *a6, CMBlockBufferRef *a7)
{
  CMBlockBufferRef blockBufferOut = 0;
  if (a1 && a2 && a3 && a5 && a7)
  {
    MEMORY[0x19970E290](*(void *)(a1 + 16));
    if (*(unsigned char *)(a1 + 272)) {
      goto LABEL_10;
    }
    uint64_t v14 = *(void *)(a1 + 168);
    if (!v14) {
      goto LABEL_10;
    }
    while (v14 != a2)
    {
      uint64_t v14 = *(void *)(v14 + 8);
      if (!v14) {
        goto LABEL_10;
      }
    }
    if (!CFSetContainsValue(*(CFSetRef *)(a2 + 48), a3) || (size_t v18 = (size_t)a3[14], v18 <= a4))
    {
LABEL_10:
      uint64_t v15 = FigSignalErrorAt();
LABEL_11:
      uint64_t v16 = v15;
LABEL_12:
      MEMORY[0x19970E2B0](*(void *)(a1 + 16));
      return v16;
    }
    if (a5 + a4 <= v18) {
      size_t v19 = a5;
    }
    else {
      size_t v19 = v18 - a4;
    }
    BOOL v20 = v19 + a4 < v18;
    uint64_t v21 = a3 + 19;
    if (a3[19])
    {
LABEL_19:
      BOOL v30 = v20;
      CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
      uint64_t v15 = CMBlockBufferCreateWithBufferReference(AllocatorForMedia, *v21, a4, v19, 0, &blockBufferOut);
      if (!v15)
      {
        if (v19 + a4 >= v18 && ((_BYTE)a3[20] & 0x20) != 0 && *v21)
        {
          CFRelease(*v21);
          *uint64_t v21 = 0;
        }
        *a7 = blockBufferOut;
        uint64_t v16 = 0;
        if (a6) {
          *a6 = v30;
        }
        goto LABEL_12;
      }
      goto LABEL_11;
    }
    CMBlockBufferRef v23 = *a3;
    if ((*(unsigned char *)(*(void *)*a3 + 220) & 2) != 0 && (*((unsigned char *)v23 + 176) & 1) == 0)
    {
      BOOL v31 = v19 + a4 < v18;
      uint64_t v28 = FigSignalErrorAt();
    }
    else
    {
      if (((_BYTE)a3[20] & 0x20) == 0) {
        goto LABEL_29;
      }
      BOOL v31 = v19 + a4 < v18;
      uint64_t v24 = *((void *)v23 + 16);
      CMBlockBufferRef v29 = a3[18];
      uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v25) {
        uint64_t v26 = v25;
      }
      else {
        uint64_t v26 = 0;
      }
      CMTime v27 = *(uint64_t (**)(uint64_t, CMBlockBufferRef, CMBlockBufferRef *))(v26 + 80);
      if (!v27)
      {
        uint64_t v16 = 4294954514;
        goto LABEL_12;
      }
      uint64_t v28 = v27(v24, v29, a3 + 19);
    }
    uint64_t v16 = v28;
    BOOL v20 = v31;
    if (v28) {
      goto LABEL_12;
    }
    if (*v21) {
      goto LABEL_19;
    }
LABEL_29:
    uint64_t v16 = 4294951049;
    goto LABEL_12;
  }

  return FigSignalErrorAt();
}

uint64_t FigStreamingCacheMediaSegmentAppendBytes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, CMBlockBufferRef theBuffer, size_t a6, size_t a7)
{
  CMBlockBufferRef blockBufferOut = 0;
  unint64_t v36 = 0;
  v34.versioCFIndex n = 0;
  v34.refCoCFIndex n = 0;
  v34.AllocateBlocuint64_t k = (void *(__cdecl *)(void *, size_t))sc_AllocateSegmentBlock;
  v34.FreeBlocuint64_t k = (void (__cdecl *)(void *, void *, size_t))sc_FreeSegmentBlock;
  if (a1 && a2 && a3 && theBuffer && a7)
  {
    DataCFIndex Length = CMBlockBufferGetDataLength(theBuffer);
    if (DataLength <= a6) {
      goto LABEL_12;
    }
    if (a7 + a6 > DataLength) {
      goto LABEL_12;
    }
    MEMORY[0x19970E290](*(void *)(a1 + 16));
    if (*(unsigned char *)(a1 + 272)) {
      goto LABEL_12;
    }
    uint64_t v15 = *(void *)(a1 + 168);
    if (!v15) {
      goto LABEL_12;
    }
    while (v15 != a2)
    {
      uint64_t v15 = *(void *)(v15 + 8);
      if (!v15) {
        goto LABEL_12;
      }
    }
    if ((*(unsigned char *)(*(void *)a2 + 220) & 2) != 0 && (*(unsigned char *)(a2 + 176) & 2) == 0
      || !CFSetContainsValue(*(CFSetRef *)(a2 + 48), (const void *)a3)
      || *(void *)(a3 + 112) != a4
      || (*(unsigned char *)(a3 + 160) & 1) != 0)
    {
      goto LABEL_12;
    }
    uint64_t Value = (char *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 232), (const void *)*(int *)(a2 + 56));
    if (!Value || (size_t v19 = &Value[-a7], (unint64_t)Value < a7))
    {
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 232), (const void *)*(int *)(a2 + 56), 0);
      size_t v19 = 0;
      if (!sc_HasEnoughAvailableBackingMemory(a1, a7, (uint64_t *)&v36))
      {
        if (!sc_GetBackingForMediaStreamAtTime(a1, a2, v36, *(double *)(a3 + 120))
          && ((*(unsigned char *)(a1 + 220) & 2) != 0
           || !*(unsigned char *)(a1 + 216)
           || *(double *)(a3 + 120) - *(double *)(a1 + 192) >= *(double *)(a1 + 104)))
        {
LABEL_12:
          EmptCGFloat y = FigSignalErrorAt();
LABEL_13:
          uint64_t v17 = Empty;
LABEL_66:
          if (blockBufferOut) {
            CFRelease(blockBufferOut);
          }
          MEMORY[0x19970E2B0](*(void *)(a1 + 16));
          return v17;
        }
        size_t v19 = 0;
      }
    }
    if (!*(void *)(a3 + 152))
    {
      CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
      EmptCGFloat y = CMBlockBufferCreateEmpty(AllocatorForMedia, 0, 0, (CMBlockBufferRef *)(a3 + 152));
      if (Empty) {
        goto LABEL_13;
      }
    }
    uint64_t v21 = *(void **)(a1 + 264);
    if (v21) {
      uint64_t v21 = (void *)CFRetain(v21);
    }
    v34.refCoCFIndex n = v21;
    CFAllocatorRef v22 = (const __CFAllocator *)FigGetAllocatorForMedia();
    EmptCGFloat y = CMBlockBufferCreateContiguous(v22, theBuffer, 0, &v34, a6, a7, 2u, &blockBufferOut);
    if (Empty) {
      goto LABEL_13;
    }
    EmptCGFloat y = CMBlockBufferAppendBufferReference(*(CMBlockBufferRef *)(a3 + 152), blockBufferOut, 0, 0, 0);
    if (Empty) {
      goto LABEL_13;
    }
    if ((*(unsigned char *)(a1 + 220) & 2) != 0 || !*(void *)(a1 + 136))
    {
LABEL_65:
      *(_DWORD *)(a3 + 160) |= 0x10u;
      *(void *)(a3 + 112) += a7;
      *(void *)(a1 + 184) += a7;
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 232), (const void *)*(int *)(a2 + 56), v19);
      uint64_t v17 = 0;
      goto LABEL_66;
    }
    int64_t v23 = *(void *)(a1 + 152);
    unint64_t v24 = a7 - v23;
    if ((uint64_t)a7 >= v23) {
      uint64_t v25 = a7 - v23;
    }
    else {
      uint64_t v25 = 0;
    }
    if (v25 < 1) {
      goto LABEL_63;
    }
    uint64_t v26 = malloc_type_malloc(0x18uLL, 0x10A0040319E9F20uLL);
    CMTime v27 = v26;
    if (v26)
    {
      *uint64_t v26 = a1;
      v26[1] = v25;
      uint64_t v28 = FigSimpleMutexCreate();
      v27[2] = v28;
      if (!v28)
      {
        free(v27);
        CMTime v27 = 0;
      }
    }
    if (FigMemoryDemandIssueSync_onceToken == -1)
    {
      if (!v27) {
        goto LABEL_63;
      }
    }
    else
    {
      dispatch_once_f(&FigMemoryDemandIssueSync_onceToken, 0, (dispatch_function_t)figMemoryDemandIssueSetupOnce);
      if (!v27) {
        goto LABEL_63;
      }
    }
    int v29 = FigSimpleMutexTryLock();
    if (v29)
    {
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
      MEMORY[0x19970E910](v27[2]);
      unint64_t v24 = v27[1];
      MEMORY[0x19970E930](v27[2]);
      MEMORY[0x19970E930](gFigMemoryDemandIssueMutex);
    }
    FigSimpleMutexDestroy();
    free(v27);
    if (v29)
    {
      unint64_t v30 = v25 - v24;
      if (v25 < v24) {
        unint64_t v30 = 0;
      }
      BOOL v31 = v30 >= v25;
      size_t v32 = v30 - v25;
      if (!v31) {
        size_t v32 = 0;
      }
      goto LABEL_64;
    }
LABEL_63:
    size_t v32 = *(void *)(a1 + 152) - a7;
LABEL_64:
    *(void *)(a1 + 152) = v32;
    goto LABEL_65;
  }

  return FigSignalErrorAt();
}

void *sc_AllocateSegmentBlock(uint64_t a1, CFIndex a2)
{
  CFAllocatorRef Default = CFAllocatorGetDefault();

  return CFAllocatorAllocate(Default, a2, 0);
}

void sc_FreeSegmentBlock(const void *a1, void *a2, uint64_t a3)
{
  CFAllocatorRef Default = CFAllocatorGetDefault();
  CFAllocatorDeallocate(Default, a2);
  uint64_t v7 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v7)
  {
    uint64_t v8 = v7;
    MEMORY[0x19970E290](*(void *)(v7 + 16));
    if (!*(unsigned char *)(v8 + 272) && (*(unsigned char *)(v8 + 220) & 2) == 0) {
      *(void *)(v8 + 184) -= a3;
    }
    MEMORY[0x19970E2B0](*(void *)(v8 + 16));
    CFRelease((CFTypeRef)v8);
  }
  if (a1)
  {
    CFRelease(a1);
  }
}

uint64_t FigStreamingCacheMediaSegmentMarkComplete(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  if (a1 && a2 && a3)
  {
    MEMORY[0x19970E290](*(void *)(a1 + 16));
    if (!*(unsigned char *)(a1 + 272))
    {
      uint64_t v6 = *(void *)(a1 + 168);
      if (v6)
      {
        while (v6 != a2)
        {
          uint64_t v6 = *(void *)(v6 + 8);
          if (!v6) {
            goto LABEL_8;
          }
        }
        if ((*(unsigned char *)(*(void *)a2 + 220) & 2) == 0 || (*(unsigned char *)(a2 + 176) & 2) != 0)
        {
          int v9 = CFSetContainsValue(*(CFSetRef *)(a2 + 48), a3);
          uint64_t v10 = v9 ? (uint64_t **)a3 : 0;
          if (v9)
          {
            a3[40] |= 1u;
            uint64_t v7 = stream_SetNeedsToCommitPersistentStreamInfo((unsigned char *)a2);
            if (v7) {
              goto LABEL_9;
            }
            if ((*(unsigned char *)(a1 + 220) & 2) != 0)
            {
              ++a3[20];
              a3[40] |= 0x80u;
              segment_LockDuplicateMediaSegments(a2, (uint64_t)a3);
              CFRetain((CFTypeRef)a1);
              dispatch_async_f(*(dispatch_queue_t *)(a1 + 240), a3, (dispatch_function_t)segment_WriteDataToDiskDispatchFunction);
            }
            uint64_t v11 = *(void *)(*(void *)a2 + 168);
            if (!v11) {
              goto LABEL_24;
            }
            int v12 = *(_DWORD *)(a2 + 56);
            while (1)
            {
              if (*(_DWORD *)(v11 + 56) == v12)
              {
                int v13 = *(_DWORD *)(a2 + 80);
                if (*(_DWORD *)(v11 + 80) < v13) {
                  break;
                }
              }
              uint64_t v11 = *(void *)(v11 + 8);
              if (!v11) {
                goto LABEL_24;
              }
            }
            uint64_t v15 = **v10;
            unint64_t FirstSegmentOfContiguousRangeContainingSegment = stream_GetFirstSegmentOfContiguousRangeContainingSegment((unint64_t)v10);
            unint64_t LastSegmentOfContiguousRangeContainingSegment = stream_GetLastSegmentOfContiguousRangeContainingSegment((unint64_t)v10, 0);
            uint64_t v8 = 0;
            if (!FirstSegmentOfContiguousRangeContainingSegment || !LastSegmentOfContiguousRangeContainingSegment) {
              goto LABEL_25;
            }
            double v18 = *(double *)(LastSegmentOfContiguousRangeContainingSegment + 120)
                + *(double *)(LastSegmentOfContiguousRangeContainingSegment + 128);
            double v19 = *(double *)(FirstSegmentOfContiguousRangeContainingSegment + 120);
            double v20 = v18 - v19;
            double v21 = *(double *)(v15 + 88);
            BOOL v22 = v21 > 0.0 && v20 < v21;
            if (v22 || (double v23 = *(double *)(v15 + 80), v20 < v23 + v23))
            {
LABEL_24:
              uint64_t v8 = 0;
              goto LABEL_25;
            }
            double v24 = v18 - v23;
            double v25 = v19 + v23;
            if (v19 + v23 < v18 - v23)
            {
              uint64_t v26 = *(uint64_t **)(a1 + 168);
              if (v26)
              {
                do
                {
                  if (*((_DWORD *)v26 + 14) == v12 && *((_DWORD *)v26 + 20) < v13)
                  {
                    if (*((unsigned char *)v26 + 121))
                    {
                      unint64_t started = v26[3];
                      if (started)
                      {
                        uint64_t v38 = *v26;
                        while (1)
                        {
                          double v28 = *(double *)(started + 120);
                          if (v28 >= v25 && v28 + *(double *)(started + 128) <= v25 + v24 - v25) {
                            break;
                          }
                          if (v28 >= v25) {
                            uint64_t v29 = 8;
                          }
                          else {
                            uint64_t v29 = 16;
                          }
                          unint64_t started = *(void *)(started + v29);
                          if (!started) {
                            goto LABEL_63;
                          }
                        }
                        do
                        {
                          unint64_t v30 = started;
                          unint64_t started = MediaSegmentStartTimeList_RB_PREV(started);
                          if (!started) {
                            break;
                          }
                          double v31 = *(double *)(started + 120);
                          if (v31 < v25) {
                            break;
                          }
                        }
                        while (v31 + *(double *)(started + 128) <= v24);
                        int v32 = 0;
                        do
                        {
                          if (v32
                            || (double v33 = *(double *)(v38 + 88), v33 <= 0.0)
                            || (unint64_t v34 = stream_GetFirstSegmentOfContiguousRangeContainingSegment(v30), v34 == v30)
                            || *(double *)(v30 + 120)
                             + *(double *)(v30 + 128)
                             - *(double *)(v34 + 120)
                             - *(double *)(v30 + 128) >= v33)
                          {
                            char v35 = 0;
                            int v32 = 1;
                          }
                          else
                          {
                            int v32 = 0;
                            char v35 = 1;
                          }
                          unint64_t v36 = MediaSegmentStartTimeList_RB_NEXT(v30);
                          unint64_t v37 = v36;
                          if (v36 && *(double *)(v36 + 120) >= v24) {
                            unint64_t v37 = 0;
                          }
                          if ((v35 & 1) == 0) {
                            segment_EvictEntry((void *)v30, 0, 1);
                          }
                          unint64_t v30 = v37;
                        }
                        while (v37);
                      }
                    }
                  }
LABEL_63:
                  uint64_t v8 = 0;
                  uint64_t v26 = (uint64_t *)v26[1];
                }
                while (v26);
                goto LABEL_25;
              }
              goto LABEL_24;
            }
          }
        }
      }
    }
LABEL_8:
    uint64_t v7 = FigSignalErrorAt();
LABEL_9:
    uint64_t v8 = v7;
LABEL_25:
    MEMORY[0x19970E2B0](*(void *)(a1 + 16));
    return v8;
  }

  return FigSignalErrorAt();
}

CFIndex segment_LockDuplicateMediaSegments(uint64_t a1, uint64_t a2)
{
  CFIndex result = *(void *)(a2 + 136);
  if (result)
  {
    CFIndex result = CFArrayGetCount((CFArrayRef)result);
    if (result >= 2)
    {
      if (*(void *)(a1 + 24))
      {
        CFIndex result = CFArrayGetCount(*(CFArrayRef *)(a2 + 136));
        if (result >= 1)
        {
          for (CFIndex i = 0; i < result; ++i)
          {
            FigCFArrayGetDoubleAtIndex();
            if (*(double *)(a2 + 120) != 0.0)
            {
              for (uint64_t j = *(void *)(a1 + 24); j; uint64_t j = *v8)
              {
                double v7 = 0.0 - *(double *)(j + 120);
                if (v7 >= 0.0)
                {
                  if (v7 == 0.0)
                  {
                    ++*(_DWORD *)(j + 80);
                    *(_DWORD *)(j + 160) |= *(_DWORD *)(a2 + 160) & 0xFFFFFFF9;
                    break;
                  }
                  uint64_t v8 = (uint64_t *)(j + 16);
                }
                else
                {
                  uint64_t v8 = (uint64_t *)(j + 8);
                }
              }
            }
            CFIndex result = CFArrayGetCount(*(CFArrayRef *)(a2 + 136));
          }
        }
      }
    }
  }
  return result;
}

uint64_t segment_WriteDataToDiskDispatchFunction(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  uint64_t v4 = (const void *)(*a1)[16];
  MEMORY[0x19970E290](*(void *)(v3 + 16));
  int v5 = *((_DWORD *)a1 + 40);
  if ((v5 & 0x40) != 0)
  {
    *((_DWORD *)a1 + 40) = v5 & 0xFFFFFF7F;
    goto LABEL_28;
  }
  if ((*(unsigned char *)(*v2 + 220) & 2) == 0 || (v2[22] & 2) != 0)
  {
    int v6 = 1;
  }
  else
  {
    FigSignalErrorAt();
    int v6 = 0;
  }
  double v7 = a1[19];
  if (v7) {
    CFRetain(v7);
  }
  if (v4) {
    CFRetain(v4);
  }
  MEMORY[0x19970E2B0](*(void *)(v3 + 16));
  if (v6)
  {
    uint64_t v8 = a1[19];
    double v10 = *((double *)a1 + 15);
    double v9 = *((double *)a1 + 16);
    int v12 = a1[11];
    uint64_t v11 = a1[12];
    int v13 = a1[13];
    uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v14) {
      uint64_t v15 = v14;
    }
    else {
      uint64_t v15 = 0;
    }
    uint64_t v16 = (CFTypeRef *)(a1 + 18);
    uint64_t v17 = *(uint64_t (**)(const void *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t **, double, double))(v15 + 24);
    if (v17) {
      int v18 = v17(v4, v8, v12, v11, v13, a1 + 18, v9, v10);
    }
    else {
      int v18 = -12782;
    }
    MEMORY[0x19970E290](*(void *)(v3 + 16));
    *((_DWORD *)a1 + 40) &= ~0x80u;
    double v19 = a1[19];
    if (v19) {
      CFRelease(v19);
    }
    if (v4) {
      CFRelease(v4);
    }
    if (v18)
    {
      sc_SendDiskWriteErrorNotification();
      if (*v16)
      {
        CFRelease(*v16);
LABEL_27:
        *uint64_t v16 = 0;
      }
    }
    else
    {
      *((_DWORD *)a1 + 40) = a1[20] & 0xFFFFFFCF | 0x20;
      if (a1[19])
      {
        FigDeferCFRelease();
        uint64_t v16 = (CFTypeRef *)(a1 + 19);
        goto LABEL_27;
      }
    }
LABEL_28:
    segment_UpdateAndUnlockDuplicateMediaSegments((uint64_t)v2, (uint64_t)a1);
    segment_UnlockEntry(a1, 0);
    MEMORY[0x19970E2B0](*(void *)(v3 + 16));
  }

  return FigDeferCFRelease();
}

uint64_t FigStreamingCacheMediaSegmentIsComplete(uint64_t a1, uint64_t a2, unsigned char *a3, unsigned char *a4)
{
  if (!a1 || !a2) {
    goto LABEL_16;
  }
  int v6 = a3;
  if (!a3)
  {
    uint64_t v9 = FigSignalErrorAt();
    goto LABEL_13;
  }
  if (!a4)
  {
LABEL_16:
    uint64_t v9 = FigSignalErrorAt();
    LOBYTE(v6) = 0;
    goto LABEL_13;
  }
  MEMORY[0x19970E290](*(void *)(a1 + 16));
  if (*(unsigned char *)(a1 + 272)) {
    goto LABEL_9;
  }
  uint64_t v8 = *(void *)(a1 + 168);
  if (!v8) {
    goto LABEL_9;
  }
  while (v8 != a2)
  {
    uint64_t v8 = *(void *)(v8 + 8);
    if (!v8) {
      goto LABEL_9;
    }
  }
  if (CFSetContainsValue(*(CFSetRef *)(a2 + 48), v6))
  {
    uint64_t v9 = 0;
    LOBYTE(v6) = v6[160] & 1;
  }
  else
  {
LABEL_9:
    uint64_t v9 = FigSignalErrorAt();
    LOBYTE(v6) = 0;
  }
  MEMORY[0x19970E2B0](*(void *)(a1 + 16));
LABEL_13:
  if (!v9) {
    *a4 = (_BYTE)v6;
  }
  return v9;
}

uint64_t FigStreamingCacheMediaSegmentLock(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  if (a1 && a2 && a3)
  {
    MEMORY[0x19970E290](*(void *)(a1 + 16));
    if (*(unsigned char *)(a1 + 272)) {
      goto LABEL_8;
    }
    uint64_t v6 = *(void *)(a1 + 168);
    if (!v6) {
      goto LABEL_8;
    }
    while (v6 != a2)
    {
      uint64_t v6 = *(void *)(v6 + 8);
      if (!v6) {
        goto LABEL_8;
      }
    }
    if (CFSetContainsValue(*(CFSetRef *)(a2 + 48), a3))
    {
      ++a3[20];
      segment_LockDuplicateMediaSegments(a2, (uint64_t)a3);
      uint64_t v7 = 0;
    }
    else
    {
LABEL_8:
      uint64_t v7 = FigSignalErrorAt();
    }
    MEMORY[0x19970E2B0](*(void *)(a1 + 16));
    return v7;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigStreamingCacheMediaSegmentUnlock(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  if (a1 && a2 && a3)
  {
    MEMORY[0x19970E290](*(void *)(a1 + 16));
    if (*(unsigned char *)(a1 + 272)) {
      goto LABEL_8;
    }
    uint64_t v6 = *(void *)(a1 + 168);
    if (!v6) {
      goto LABEL_8;
    }
    while (v6 != a2)
    {
      uint64_t v6 = *(void *)(v6 + 8);
      if (!v6) {
        goto LABEL_8;
      }
    }
    if (CFSetContainsValue(*(CFSetRef *)(a2 + 48), a3))
    {
      segment_UpdateAndUnlockDuplicateMediaSegments(a2, (uint64_t)a3);
      segment_UnlockEntry(a3, 0);
      uint64_t v7 = 0;
    }
    else
    {
LABEL_8:
      uint64_t v7 = FigSignalErrorAt();
    }
    MEMORY[0x19970E2B0](*(void *)(a1 + 16));
    return v7;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

CFIndex segment_UpdateAndUnlockDuplicateMediaSegments(uint64_t a1, uint64_t a2)
{
  CFIndex result = *(void *)(a2 + 136);
  if (result)
  {
    CFIndex result = CFArrayGetCount((CFArrayRef)result);
    if (result >= 2)
    {
      if (*(void *)(a1 + 24))
      {
        CFIndex result = CFArrayGetCount(*(CFArrayRef *)(a2 + 136));
        if (result >= 1)
        {
          for (CFIndex i = 0; i < result; ++i)
          {
            FigCFArrayGetDoubleAtIndex();
            if (*(double *)(a2 + 120) != 0.0)
            {
              uint64_t v6 = *(void *)(a1 + 24);
              if (v6)
              {
                do
                {
                  double v7 = 0.0 - *(double *)(v6 + 120);
                  if (v7 >= 0.0)
                  {
                    if (v7 == 0.0)
                    {
                      *(_DWORD *)(v6 + 160) |= *(_DWORD *)(a2 + 160) & 0xFFFFFFF9;
                      *(void *)(v6 + 144) = *(void *)(a2 + 144);
                      segment_UnlockEntry((uint64_t **)v6, 0);
                      break;
                    }
                    uint64_t v8 = (uint64_t *)(v6 + 16);
                  }
                  else
                  {
                    uint64_t v8 = (uint64_t *)(v6 + 8);
                  }
                  uint64_t v6 = *v8;
                }
                while (*v8);
              }
            }
            CFIndex result = CFArrayGetCount(*(CFArrayRef *)(a2 + 136));
          }
        }
      }
    }
  }
  return result;
}

void segment_UnlockEntry(uint64_t **value, int a2)
{
  uint64_t v3 = *value;
  uint64_t v4 = **value;
  int v5 = *((_DWORD *)value + 20) - 1;
  *((_DWORD *)value + 20) = v5;
  if (a2 || !v5)
  {
    CFSetRemoveValue((CFMutableSetRef)v3[6], value);
    if ((*(unsigned char *)(v4 + 220) & 2) != 0)
    {
      *(void *)(v4 + 184) -= value[14];
      if ((~*((_DWORD *)value + 40) & 0x60) == 0
        && v3[16]
        && !stream_UpgradePersistentStreamInfoForWriting((uint64_t)v3))
      {
        uint64_t v11 = v3[16];
        int v12 = value[18];
        uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v14 = v13 ? v13 : 0;
        uint64_t v15 = *(void (**)(uint64_t, uint64_t *))(v14 + 48);
        if (v15) {
          v15(v11, v12);
        }
      }
    }
    uint64_t v6 = value[11];
    if (v6)
    {
      CFRelease(v6);
      value[11] = 0;
    }
    double v7 = value[13];
    if (v7)
    {
      CFRelease(v7);
      value[13] = 0;
    }
    uint64_t v8 = value[18];
    if (v8)
    {
      CFRelease(v8);
      value[18] = 0;
    }
    uint64_t v9 = value[19];
    if (v9)
    {
      CFRelease(v9);
      value[19] = 0;
    }
    double v10 = value[17];
    if (v10) {
      CFRelease(v10);
    }
    free(value);
  }
  else if (v5 == 1 && (~*((_DWORD *)value + 40) & 0xC0) == 0)
  {
    *(void *)(v4 + 184) -= value[14];
    value[14] = 0;
  }
}

uint64_t FigStreamingCacheMediaSegmentSetDuplicateSegments(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  if (a1 && a2 && a3 && a4)
  {
    MEMORY[0x19970E290](*(void *)(a1 + 16));
    if (!*(unsigned char *)(a1 + 272))
    {
      uint64_t v8 = *(void *)(a1 + 168);
      if (v8)
      {
        while (v8 != a2)
        {
          uint64_t v8 = *(void *)(v8 + 8);
          if (!v8) {
            goto LABEL_9;
          }
        }
        if (*(unsigned char *)(a2 + 121)) {
          goto LABEL_13;
        }
        if (CFSetContainsValue(*(CFSetRef *)(a2 + 48), (const void *)a3))
        {
          if (*(void *)(a3 + 136))
          {
LABEL_13:
            uint64_t v9 = 0;
            goto LABEL_14;
          }
          CFArrayRef Count = (const __CFArray *)CFRetain(a4);
          *(void *)(a3 + 136) = Count;
          unint64_t v19 = 0;
          int v12 = *(const void **)(a3 + 88);
          if (v12)
          {
            uint64_t v9 = 0;
            uint64_t v13 = 0;
            double v14 = *(double *)(a3 + 128);
            uint64_t v15 = *(void *)(a3 + 96);
            uint64_t v16 = *(const void **)(a3 + 104);
            if (!Count) {
              goto LABEL_18;
            }
LABEL_17:
            CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
LABEL_18:
            while (v13 < (uint64_t)Count)
            {
              FigCFArrayGetDoubleAtIndex();
              if (*(double *)(a3 + 120) != 0.0)
              {
                uint64_t v9 = sc_CreateMediaSegment(a1, a2, v12, v15, v16, 1, &v19, 0.0, v14);
                if (!v9)
                {
                  unint64_t v17 = v19;
                  *(_DWORD *)(v19 + 160) |= *(_DWORD *)(a3 + 160) & 0xFFFFFFF9;
                  CFTypeRef v18 = *(CFTypeRef *)(a3 + 136);
                  if (v18)
                  {
                    CFTypeRef v18 = CFRetain(v18);
                    unint64_t v17 = v19;
                  }
                  uint64_t v9 = 0;
                  *(void *)(v17 + 136) = v18;
                }
              }
              ++v13;
              CFArrayRef Count = *(const __CFArray **)(a3 + 136);
              if (Count) {
                goto LABEL_17;
              }
            }
            goto LABEL_14;
          }
        }
      }
    }
LABEL_9:
    uint64_t v9 = FigSignalErrorAt();
LABEL_14:
    MEMORY[0x19970E2B0](*(void *)(a1 + 16));
    return v9;
  }

  return FigSignalErrorAt();
}

uint64_t FigStreamingCacheAddInterstitialAsset(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  int v20 = 0;
  CFTypeRef cf = 0;
  if (a1 && a3 && a2)
  {
    uint64_t Value = (CFTypeRef *)FigCFDictionaryGetValue();
    if (Value)
    {
      CFTypeRef v7 = *Value;
      if (v7) {
        CFTypeRef v7 = CFRetain(v7);
      }
      uint64_t v8 = 0;
      goto LABEL_10;
    }
    if ((*(unsigned char *)(a1 + 220) & 2) == 0)
    {
      uint64_t v8 = FigSignalErrorAt();
      CFTypeRef v7 = 0;
LABEL_10:
      *a3 = v7;
      return v8;
    }
    uint64_t v10 = sc_UpgradePersistentStoreForWriting(a1, &v20);
    if (v10) {
      return v10;
    }
    uint64_t v11 = *(void *)(a1 + 280);
    uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v12) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    double v14 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *))(v13 + 144);
    if (v14)
    {
      uint64_t v15 = v14(v11, a2, &cf);
      if (!v15)
      {
        uint64_t v16 = malloc_type_calloc(1uLL, 8uLL, 0x6004044C4A2DFuLL);
        if (v16)
        {
          unint64_t v17 = v16;
          CFTypeRef v18 = cf;
          if (cf) {
            CFTypeRef v18 = CFRetain(cf);
          }
          *unint64_t v17 = v18;
          FigCFDictionarySetValue();
          uint64_t v8 = 0;
          *a3 = cf;
          CFTypeRef cf = 0;
          goto LABEL_23;
        }
        uint64_t v15 = FigSignalErrorAt();
      }
      uint64_t v8 = v15;
    }
    else
    {
      uint64_t v8 = 4294954514;
    }
LABEL_23:
    sc_RestorePersistentStoreLockStatus(a1, v20);
    if (cf) {
      CFRelease(cf);
    }
    return v8;
  }

  return FigSignalErrorAt();
}

uint64_t FigStreamingCacheCreate(const __CFAllocator *a1, const __CFURL *a2, const __CFDictionary *a3, uint64_t *a4)
{
  CFDictionaryValueCallBacks v48 = *(CFDictionaryValueCallBacks *)byte_1EE5213D8;
  if (a4 && a2)
  {
    if (sRegisterFigStreamingCacheTypeOnce != -1) {
      dispatch_once_f(&sRegisterFigStreamingCacheTypeOnce, 0, (dispatch_function_t)RegisterFigStreamingCacheType);
    }
    uint64_t Instance = _CFRuntimeCreateInstance();
    if (Instance)
    {
      uint64_t v9 = Instance;
      uint64_t v10 = FigReentrantMutexCreate();
      *(void *)(v9 + 16) = v10;
      if (!v10) {
        goto LABEL_107;
      }
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a1, 0, 0, 0);
      *(void *)(v9 + 232) = Mutable;
      if (!Mutable) {
        goto LABEL_107;
      }
      CFMutableDictionaryRef v12 = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E4F1D530], &v48);
      *(void *)(v9 + 224) = v12;
      if (!v12) {
        goto LABEL_107;
      }
      uint64_t v13 = FigCFWeakReferenceHolderCreateWithReferencedObject();
      *(void *)(v9 + 264) = v13;
      if (!v13) {
        goto LABEL_107;
      }
      if (a3)
      {
        if (CFDictionaryGetValue(a3, @"FSC_Backing") == @"FSC_DiskBacking") {
          *(_DWORD *)(v9 + 220) |= 2u;
        }
        CFURLRef Value = (const __CFURL *)CFDictionaryGetValue(a3, @"FSC_DiskCacheRepositoryURL");
        if (Value)
        {
          CFStringRef v15 = CFURLGetString(Value);
          *(void *)(v9 + 32) = CFRetain(v15);
          *(_DWORD *)(v9 + 220) |= 2u;
        }
        uint64_t v16 = CFDictionaryGetValue(a3, @"FSC_DownloadDestinationURL");
        if (v16)
        {
          CFTypeRef v17 = CFRetain(v16);
          *(void *)(v9 + 40) = v17;
          if (v17) {
            *(_DWORD *)(v9 + 220) |= 2u;
          }
        }
        else
        {
          *(void *)(v9 + 40) = 0;
        }
        CFTypeRef v18 = CFDictionaryGetValue(a3, @"FSC_UseURLPathAsCacheKey");
        unint64_t v19 = (const void *)*MEMORY[0x1E4F1CFD0];
        if (v18 == (const void *)*MEMORY[0x1E4F1CFD0]) {
          *(_DWORD *)(v9 + 64) |= 1u;
        }
        if (CFDictionaryGetValue(a3, @"FSC_UseURLWithoutQueryStringAsCacheKey") == v19) {
          *(_DWORD *)(v9 + 64) |= 2u;
        }
      }
      if (*(void *)(v9 + 32)) {
        goto LABEL_117;
      }
      if (!*(void *)(v9 + 40))
      {
        CFPropertyListRef v20 = CFPreferencesCopyAppValue(@"streamingCachePath", @"com.apple.coremedia");
        if (v20)
        {
          double v21 = v20;
          CFTypeID TypeID = CFStringGetTypeID();
          if (TypeID == CFGetTypeID(v21))
          {
            *(void *)(v9 + 32) = CFRetain(v21);
            *(_DWORD *)(v9 + 220) |= 2u;
          }
          CFRelease(v21);
        }
      }
      if (*(void *)(v9 + 32))
      {
LABEL_117:
        if (*(void *)(v9 + 40)) {
          goto LABEL_107;
        }
      }
      int v23 = *(_DWORD *)(v9 + 220);
      *(_DWORD *)(v9 + 220) = v23 | 1;
      if ((v23 & 2) != 0)
      {
        *(_OWORD *)(v9 + 88) = xmmword_19499C580;
        double v24 = (CFTypeRef *)(v9 + 88);
        *(void *)(v9 + 104) = 0x4044000000000000;
        double v25 = (CFTypeRef *)(v9 + 104);
        if (a3)
        {
          CFTypeRef cf = 0;
          CFTypeRef v51 = 0;
          goto LABEL_37;
        }
      }
      else
      {
        *(_OWORD *)(v9 + 88) = xmmword_19499C590;
        double v24 = (CFTypeRef *)(v9 + 88);
        *(void *)(v9 + 72) = 0x2000000;
        *(void *)(v9 + 104) = 0x4044000000000000;
        double v25 = (CFTypeRef *)(v9 + 104);
        if (a3)
        {
          CFTypeRef cf = 0;
          CFTypeRef v51 = 0;
          if (FigCFDictionaryGetInt64IfPresent()) {
            *(void *)(v9 + 72) = v51;
          }
LABEL_37:
          if (FigCFDictionaryGetDoubleIfPresent()) {
            *(void *)(v9 + 80) = cf;
          }
          if (FigCFDictionaryGetDoubleIfPresent()) {
            *double v24 = cf;
          }
          if (FigCFDictionaryGetDoubleIfPresent()) {
            *(void *)(v9 + 96) = cf;
          }
          if (FigCFDictionaryGetDoubleIfPresent()) {
            *double v25 = cf;
          }
          uint64_t v26 = CFDictionaryGetValue(a3, @"FSC_AddToDonorPool");
          if (v26)
          {
            CFTypeRef v27 = CFRetain(v26);
            *(void *)(v9 + 136) = v27;
            if (v27)
            {
              CMNotificationCenterGetDefaultLocalCenter();
              FigNotificationCenterAddWeakListener();
            }
          }
          else
          {
            *(void *)(v9 + 136) = 0;
          }
          CFStringRef v28 = (const __CFString *)CFDictionaryGetValue(a3, @"FSC_ClientName");
          *(void *)(v9 + 24) = FigCFHTTPCreateURLString(a2);
          if (v28)
          {
            uint64_t v29 = FigCFURLCreateCacheKey();
            if (v29)
            {
              CFStringRef v30 = (const __CFString *)v29;
              CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
              int v32 = CFStringCreateMutable(AllocatorForMedia, 0);
              if (!v32)
              {
                uint64_t DiskCacheBundle = FigSignalErrorAt();
                goto LABEL_95;
              }
              double v33 = v32;
              CFStringAppend(v32, v28);
              CFStringAppend(v33, @"-");
              CFStringAppend(v33, v30);
              *(void *)(v9 + 48) = v33;
              unint64_t v34 = (const void **)(v9 + 48);
LABEL_56:
              *(void *)(v9 + 168) = 0;
              *(void *)(v9 + 176) = v9 + 168;
              dispatch_queue_t v36 = dispatch_queue_create("com.apple.coremedia.streamingCache.notification", 0);
              *(void *)(v9 + 248) = v36;
              if (v36)
              {
                if ((*(unsigned char *)(v9 + 220) & 2) == 0) {
                  goto LABEL_93;
                }
                dispatch_queue_t v37 = dispatch_queue_create("com.apple.coremedia.streamingcache.ioqueue", 0);
                *(void *)(v9 + 240) = v37;
                if (v37)
                {
                  CFTypeRef cf = 0;
                  CFTypeRef v51 = 0;
                  if (*(void *)(v9 + 40))
                  {
                    BOOL v38 = FigCFURLDoesDirectoryExist() == 0;
                    uint64_t v39 = *(const void **)(v9 + 40);
                    if (v39) {
                      CFURLRef v40 = (const __CFURL *)CFRetain(v39);
                    }
                    else {
                      CFURLRef v40 = 0;
                    }
                    *(void *)(v9 + 56) = v40;
                    uint64_t v41 = sc_EnsurePersistentStoreAtURL(v9, v40, v38);
                    if (!v41) {
                      uint64_t v41 = sc_RestoreCache((void *)v9);
                    }
                    goto LABEL_84;
                  }
                  uint64_t v41 = FigShared_CopyDiskCacheParams(*(const __CFString **)(v9 + 32), 0, 0, 0, 0, &v51);
                  if (v41)
                  {
LABEL_84:
                    uint64_t DiskCacheBundle = v41;
                    goto LABEL_85;
                  }
                  int v42 = (CFTypeRef *)(v9 + 56);
                  if (!FigShared_CheckOutOfDiskCache(*(const __CFString **)(v9 + 32), *(const void **)(v9 + 48), (CFTypeRef *)(v9 + 56), &cf))
                  {
                    if (sc_EnsurePersistentStoreAtURL(v9, *(const __CFURL **)(v9 + 56), 1))
                    {
                      if (*v42)
                      {
                        CFRelease(*v42);
                        *int v42 = 0;
                      }
                      if (cf)
                      {
                        CFRelease(cf);
                        CFTypeRef cf = 0;
                      }
                    }
                    else if (!sc_RestoreCache((void *)v9))
                    {
                      goto LABEL_75;
                    }
                  }
LABEL_64:
                  uint64_t DiskCacheBundle = sc_CreateDiskCacheBundle(v9, (CFURLRef)v51, (CFURLRef *)(v9 + 56));
                  while (DiskCacheBundle)
                  {
                    if (DiskCacheBundle != 28) {
                      goto LABEL_85;
                    }
                    int64_t v49 = 0;
                    if (FigShared_MakeRoomInDiskCache(*(const __CFString **)(v9 + 32), 0, &v49)) {
                      BOOL v44 = 1;
                    }
                    else {
                      BOOL v44 = v49 < 1;
                    }
                    if (!v44) {
                      goto LABEL_64;
                    }
                    uint64_t DiskCacheBundle = 28;
                    if (!v49) {
                      goto LABEL_85;
                    }
                  }
                  uint64_t v41 = FigShared_CheckIntoAndOutOfDiskCache(*(const __CFString **)(v9 + 32), *(const __CFString **)(v9 + 48), *(const void **)(v9 + 56), &cf);
                  if (v41) {
                    goto LABEL_84;
                  }
LABEL_75:
                  long long v45 = *v34;
                  CFTypeRef v46 = cf;
                  *unint64_t v34 = cf;
                  if (v46) {
                    CFRetain(v46);
                  }
                  if (v45) {
                    CFRelease(v45);
                  }
                  if (cf)
                  {
                    CFRelease(cf);
                    uint64_t DiskCacheBundle = 0;
                    CFTypeRef cf = 0;
                  }
                  else
                  {
                    uint64_t DiskCacheBundle = 0;
                  }
LABEL_85:
                  sc_UnlockPersistentStoreForAnything(v9);
                  if (cf) {
                    CFRelease(cf);
                  }
                  if (v51) {
                    CFRelease(v51);
                  }
                  if (DiskCacheBundle == -16910 || DiskCacheBundle == -16914) {
                    uint64_t DiskCacheBundle = FigSignalErrorAt();
                  }
                  if (DiskCacheBundle)
                  {
LABEL_94:
                    if (!v30) {
                      goto LABEL_96;
                    }
                    goto LABEL_95;
                  }
LABEL_93:
                  uint64_t DiskCacheBundle = 0;
                  *a4 = v9;
                  uint64_t v9 = 0;
                  goto LABEL_94;
                }
              }
              uint64_t DiskCacheBundle = FigSignalErrorAt();
              if (!v30)
              {
LABEL_96:
                if (!v9) {
                  return DiskCacheBundle;
                }
LABEL_97:
                CFRelease((CFTypeRef)v9);
                return DiskCacheBundle;
              }
LABEL_95:
              CFRelease(v30);
              goto LABEL_96;
            }
            goto LABEL_107;
          }
LABEL_54:
          uint64_t v35 = FigCFURLCreateCacheKey();
          *(void *)(v9 + 48) = v35;
          unint64_t v34 = (const void **)(v9 + 48);
          if (v35)
          {
            CFStringRef v30 = 0;
            goto LABEL_56;
          }
LABEL_107:
          uint64_t DiskCacheBundle = FigSignalErrorAt();
          goto LABEL_97;
        }
      }
      *(void *)(v9 + 24) = FigCFHTTPCreateURLString(a2);
      goto LABEL_54;
    }
  }

  return FigSignalErrorAt();
}

void sc_FreeInterstitialAssetRecord(int a1, CFTypeRef *a2)
{
  if (*a2) {
    CFRelease(*a2);
  }

  free(a2);
}

void sc_NoteMemoryDemand(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  MEMORY[0x19970E290](*(void *)(a2 + 16));
  if (*(unsigned char *)(a2 + 272))
  {
    FigSignalErrorAt();
  }
  else if (*(unsigned char *)(a2 + 144))
  {
    if (*a4 != a2)
    {
      MEMORY[0x19970E910](a4[2]);
      int64_t v6 = a4[1];
      MEMORY[0x19970E930](a4[2]);
      uint64_t v7 = *(void *)(a2 + 168);
      if (v7)
      {
        if (v6 >= 1)
        {
          do
          {
            unint64_t BackingForMediaStreamFromLaterSegments = sc_GetBackingForMediaStreamFromLaterSegments(a2, v7, v6, 0.0);
            MEMORY[0x19970E910](a4[2]);
            uint64_t v9 = a4[2];
            int64_t v6 = a4[1] - BackingForMediaStreamFromLaterSegments;
            a4[1] = v6;
            MEMORY[0x19970E930](v9);
            uint64_t v7 = *(void *)(v7 + 8);
            if (v7) {
              BOOL v10 = v6 <= 0;
            }
            else {
              BOOL v10 = 1;
            }
          }
          while (!v10);
        }
      }
    }
  }

  JUMPOUT(0x19970E2B0);
}

uint64_t FigStreamingCacheTransferData(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  uint64_t v23 = 0;
  CFArrayRef theArray = 0;
  char v22 = 0;
  CFTypeRef cf = 0;
  double v21 = 0;
  CFTypeRef v19 = 0;
  if (a1 && a2)
  {
    MEMORY[0x19970E290](*(void *)(a1 + 16));
    if (!*(unsigned char *)(a1 + 272))
    {
      uint64_t v5 = FigStreamingCacheCopyMasterPlaylist(a1, (unint64_t)&cf, (unint64_t)&v19);
      if (v5 || (uint64_t v5 = FigStreamingCacheCopyAllStreamsMetadata(a1, &theArray), v5))
      {
        uint64_t v2 = v5;
        uint64_t v18 = *(void *)(a1 + 16);
LABEL_26:
        MEMORY[0x19970E2B0](v18);
        goto LABEL_18;
      }
      MEMORY[0x19970E2B0](*(void *)(a1 + 16));
      MEMORY[0x19970E290](*(void *)(a2 + 16));
      if (!*(unsigned char *)(a2 + 272))
      {
        if (!cf || (uint64_t v6 = FigStreamingCacheSetMasterPlaylist(a2, cf, v19), !v6))
        {
          CFIndex Count = CFArrayGetCount(theArray);
          if (Count < 1)
          {
LABEL_17:
            MEMORY[0x19970E2B0](*(void *)(a2 + 16));
            uint64_t v2 = 0;
            goto LABEL_18;
          }
          CFIndex v8 = Count;
          CFIndex v9 = 0;
          uint64_t v10 = *MEMORY[0x1E4F1CFD0];
          while (1)
          {
            CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v9);
            CFURLRef Value = (__CFDictionary *)CFDictionaryGetValue(ValueAtIndex, @"SMD_URL");
            FigCFDictionaryGetInt32IfPresent();
            uint64_t v13 = CFDictionaryGetValue(ValueAtIndex, @"SMD_StableStreamIdentifier");
            FigCFDictionaryGetInt32IfPresent();
            FigCFDictionaryGetBooleanIfPresent();
            double v14 = CFDictionaryGetValue(ValueAtIndex, @"SMD_PlaylistData");
            CFStringRef v15 = CFDictionaryGetValue(ValueAtIndex, @"SMD_HTTPResponseHeaders");
            if (v14)
            {
              uint64_t v16 = v15;
              uint64_t v6 = FigStreamingCacheCreateMediaStream(a2, HIDWORD(v23), Value, v13, v23, v22, &v21);
              if (v6) {
                break;
              }
              uint64_t v6 = FigStreamingCacheMediaStreamSetPersistent(a2, v21, v10);
              if (v6) {
                break;
              }
              uint64_t v6 = FigStreamingCacheMediaStreamSetPlaylist(a2, v21, v14, v16);
              if (v6) {
                break;
              }
              uint64_t v6 = FigStreamingCacheMediaStreamSetNetworkURL(a2, (uint64_t)v21, Value);
              if (v6) {
                break;
              }
            }
            if (v8 == ++v9) {
              goto LABEL_17;
            }
          }
        }
        uint64_t v2 = v6;
        uint64_t v18 = *(void *)(a2 + 16);
        goto LABEL_26;
      }
    }
    uint64_t v2 = FigSignalErrorAt();
  }
LABEL_18:
  if (cf) {
    CFRelease(cf);
  }
  if (v19) {
    CFRelease(v19);
  }
  if (theArray) {
    CFRelease(theArray);
  }
  return v2;
}

double figStreamingCacheInit(uint64_t a1)
{
  *(void *)(a1 + 288) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t figStreamingCacheFinalize(uint64_t a1)
{
  figStreamingCacheInvalidate(a1);
  uint64_t v2 = *(const void **)(a1 + 264);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 264) = 0;
  }
  uint64_t v3 = *(NSObject **)(a1 + 240);
  if (v3)
  {
    dispatch_release(v3);
    *(void *)(a1 + 240) = 0;
  }

  return FigSimpleMutexDestroy();
}

CFStringRef figStreamingCacheCopyFormattingDesc(uint64_t a1)
{
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  return CFStringCreateWithFormat(AllocatorForMedia, 0, @"[FigStreamingCache %p]", a1);
}

CFStringRef figStreamingCacheCopyDebugDesc(uint64_t a1)
{
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFIndex v3 = CFGetRetainCount((CFTypeRef)a1);
  return CFStringCreateWithFormat(AllocatorForMedia, 0, @"[FigStreamingCache %p (%d) URL %@ currentCacheSize %lld playbackTime %.2f flags 0x%X]", a1, v3, *(void *)(a1 + 48), *(void *)(a1 + 184), *(void *)(a1 + 192), *(unsigned int *)(a1 + 220));
}

uint64_t sc_EnsureMasterPlaylistNetworkURLIsSetOnPersistentStore(uint64_t a1)
{
  CFTypeRef cf = 0;
  if ((*(unsigned char *)(a1 + 220) & 2) == 0 || (*(unsigned char *)(a1 + 288) & 2) == 0)
  {
    uint64_t v15 = FigSignalErrorAt();
    goto LABEL_15;
  }
  uint64_t v2 = *(void *)(a1 + 280);
  uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
  uint64_t FigBaseObject = FigHLSPersistentStoreGetFigBaseObject(v2);
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(void (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v6 + 48);
  if (v7) {
    v7(FigBaseObject, @"MasterPlaylistNetworkURL", AllocatorForMedia, &cf);
  }
  if (FigCFEqual())
  {
    uint64_t v8 = 0;
    goto LABEL_17;
  }
  uint64_t v9 = *(void *)(a1 + 280);
  uint64_t v10 = *(void *)(a1 + 24);
  uint64_t v11 = FigHLSPersistentStoreGetFigBaseObject(v9);
  uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v12) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  double v14 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v13 + 56);
  if (v14)
  {
    uint64_t v15 = v14(v11, @"MasterPlaylistNetworkURL", v10);
LABEL_15:
    uint64_t v8 = v15;
    goto LABEL_17;
  }
  uint64_t v8 = 4294954514;
LABEL_17:
  if (cf) {
    CFRelease(cf);
  }
  return v8;
}

void sc_SendDiskWriteErrorNotification()
{
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable) {
    FigCFDictionarySetInt32();
  }
  else {
    FigSignalErrorAt();
  }
  CMNotificationCenterGetDefaultLocalCenter();
  FigDispatchAsyncPostNotification();
  if (Mutable)
  {
    CFRelease(Mutable);
  }
}

uint64_t stream_UpgradePersistentStreamInfoForWriting(uint64_t a1)
{
  if ((*(unsigned char *)(*(void *)a1 + 220) & 2) != 0 && *(void *)(a1 + 128))
  {
    if ((*(unsigned char *)(a1 + 176) & 2) != 0) {
      return 0;
    }
    FigGetUpTimeNanoseconds();
    uint64_t v2 = *(void *)(a1 + 128);
    uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v3) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 56);
    if (v5)
    {
      uint64_t v6 = v5(v2, 1);
      FigGetUpTimeNanoseconds();
      if (!v6) {
        *(_DWORD *)(a1 + 176) |= 3u;
      }
    }
    else
    {
      FigGetUpTimeNanoseconds();
      return 4294954514;
    }
    return v6;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t sc_MatchMediaStreamWithAttributes(void *a1, uint64_t a2, void *a3, unsigned char *a4)
{
  uint64_t v4 = 0;
  if (a1 && a3)
  {
    if (*a1 || *a3)
    {
      CacheKeyFromURLCFStringRef String = FigCFStringCreateCacheKeyFromURLString();
      if (CacheKeyFromURLString)
      {
        uint64_t v8 = (const void *)CacheKeyFromURLString;
        uint64_t v9 = FigCFStringCreateCacheKeyFromURLString();
        if (!v9)
        {
          uint64_t v4 = 0;
          goto LABEL_13;
        }
        uint64_t v10 = (const void *)v9;
        if (a3[9] && FigCFEqual() || CFEqual(v8, v10))
        {
          uint64_t v4 = 1;
          if (!a4)
          {
LABEL_12:
            CFRelease(v10);
LABEL_13:
            CFRelease(v8);
            return v4;
          }
        }
        else
        {
          uint64_t v4 = 0;
          if (!a4) {
            goto LABEL_12;
          }
        }
        *a4 = v4;
        goto LABEL_12;
      }
    }
    else
    {
      FigSignalErrorAt();
    }
    return 0;
  }
  return v4;
}

uint64_t sc_GetShouldDemandWriteAccessForStreamInfoCreation(uint64_t *a1, uint64_t a2, BOOL *a3)
{
  uint64_t v3 = *a1;
  char v11 = 0;
  if (*(unsigned char *)(v3 + 220) & 2) != 0 && (*(unsigned char *)(v3 + 288))
  {
    uint64_t v6 = *(void *)(v3 + 280);
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, char *))(v8 + 64);
    if (v9)
    {
      uint64_t result = v9(v6, a2, &v11);
      if (!result) {
        *a3 = v11 == 0;
      }
    }
    else
    {
      return 4294954514;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

void stream_CreateStreamInfoCreateOptions(int a1, __CFDictionary **a2)
{
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v6 = Mutable;
  if (a1) {
    CFDictionarySetValue(Mutable, @"StreamInfoDemandWriteAccess", (const void *)*MEMORY[0x1E4F1CFD0]);
  }
  if (FigCFDictionaryGetCount() < 1)
  {
    if (v6)
    {
      CFRelease(v6);
    }
  }
  else
  {
    *a2 = v6;
  }
}

uint64_t sc_RestoreSegmentFromDiskApplierFunction(const void *a1, const void *a2, uint64_t a3)
{
  uint64_t result = *(unsigned int *)(a3 + 16);
  uint64_t v6 = *(void *)a3;
  uint64_t v7 = *(void *)(a3 + 8);
  unint64_t v16 = 0;
  if (!result)
  {
    CFTypeID TypeID = CFStringGetTypeID();
    if (TypeID == CFGetTypeID(a1)
      && (CFTypeID v10 = CFDictionaryGetTypeID(), v10 == CFGetTypeID(a2))
      && FigCFDictionaryGetInt64IfPresent()
      && FigCFDictionaryGetInt64IfPresent()
      && FigCFDictionaryGetDoubleIfPresent()
      && FigCFDictionaryGetDoubleIfPresent()
      && (FigCFDictionaryGetValueIfPresent(), (CFURLRef Value = CFDictionaryGetValue((CFDictionaryRef)a2, @"URL")) != 0))
    {
      uint64_t v12 = sc_CreateMediaSegment(v6, v7, Value, 0, 0, 0, &v16, 0.0, 0.0);
      if (v12)
      {
        uint64_t v15 = v12;
        uint64_t result = 0;
        if (v15 != -16244) {
          uint64_t result = v15;
        }
      }
      else
      {
        CFTypeRef v13 = CFRetain(a1);
        uint64_t result = 0;
        unint64_t v14 = v16;
        *(void *)(v16 + 144) = v13;
        *(_DWORD *)(v14 + 160) |= 0x21u;
        *(void *)(v14 + 112) = 0;
        *(void *)(v6 + 184) = *(void *)(v6 + 184);
      }
    }
    else
    {
      uint64_t result = FigSignalErrorAt();
    }
  }
  *(_DWORD *)(a3 + 16) = result;
  return result;
}

uint64_t sc_RestoreMediaMapsFromDiskApplierFunction(const void *a1, const void *a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  uint64_t v4 = a3[1];
  if (!*a3) {
    goto LABEL_8;
  }
  if (!v4) {
    goto LABEL_8;
  }
  CFTypeID TypeID = CFStringGetTypeID();
  if (TypeID != CFGetTypeID(a1)) {
    goto LABEL_8;
  }
  CFTypeID v9 = CFDictionaryGetTypeID();
  if (v9 != CFGetTypeID(a2)) {
    goto LABEL_8;
  }
  uint64_t v10 = *(void *)(v5 + 168);
  if (!v10) {
    goto LABEL_8;
  }
  while (v10 != v4)
  {
    uint64_t v10 = *(void *)(v10 + 8);
    if (!v10) {
      goto LABEL_8;
    }
  }
  CFURLRef Value = CFDictionaryGetValue((CFDictionaryRef)a2, @"URL");
  if (FigCFDictionaryGetInt64IfPresent()
    && (CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia(),
        (CFStringRef v14 = CFStringCreateWithFormat(AllocatorForMedia, 0, @"%@-%lld", Value, 0)) != 0))
  {
    CFStringRef v15 = v14;
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(v4 + 160), v14, a1);
    if (FigCFDictionaryGetValueIfPresent()) {
      FigCFDictionarySetValue();
    }
    CFRelease(v15);
    uint64_t result = 0;
  }
  else
  {
LABEL_8:
    uint64_t result = FigSignalErrorAt();
  }
  *((_DWORD *)a3 + 4) = result;
  return result;
}

void segment_EvictEntry(void *value, int a2, int a3)
{
  uint64_t v207 = 0;
  long long v205 = 0u;
  long long v206 = 0u;
  long long v204 = 0u;
  memset(v203, 0, sizeof(v203));
  int v3 = *((_DWORD *)value + 40);
  if ((v3 & 8) != 0) {
    return;
  }
  uint64_t v7 = (void *)*value;
  if (!a2)
  {
    if ((v3 & 2) != 0)
    {
      unint64_t started = MediaSegmentStartTimeList_RB_NEXT((unint64_t)value);
      if (started)
      {
        if (*((double *)value + 15) + *((double *)value + 16) >= *(double *)(started + 120))
        {
          *(_DWORD *)(started + 160) |= 2u;
          int v3 = *((_DWORD *)value + 40);
        }
      }
    }
    if ((v3 & 4) != 0)
    {
      unint64_t v9 = MediaSegmentStartTimeList_RB_PREV((unint64_t)value);
      if (v9)
      {
        if (*(double *)(v9 + 120) + *(double *)(v9 + 128) >= *((double *)value + 15)) {
          *(_DWORD *)(v9 + 160) |= 4u;
        }
      }
    }
  }
  *(_OWORD *)((char *)&v203[5] + 8) = *(_OWORD *)(value + 11);
  double v10 = *((double *)value + 15);
  *((double *)&v204 + 1) = v10;
  *((void *)&v203[6] + 1) = value[13];
  uint64_t v12 = v7 + 3;
  char v11 = (double *)v7[3];
  if (v11)
  {
    do
    {
      double v13 = v10 - v11[15];
      if (v13 >= 0.0)
      {
        if (v13 == 0.0) {
          break;
        }
        CFStringRef v14 = (double **)(v11 + 2);
      }
      else
      {
        CFStringRef v14 = (double **)(v11 + 1);
      }
      char v11 = *v14;
    }
    while (v11);
    if (v11 == (double *)value)
    {
      unint64_t v15 = value[2];
      if (value[1])
      {
        if (v15)
        {
          do
          {
            unint64_t v16 = v15;
            unint64_t v15 = *(void *)(v15 + 8);
          }
          while (v15);
          unint64_t v15 = *(void *)(v16 + 16);
          uint64_t v17 = *(void *)(v16 + 24);
          unint64_t v18 = v17 & 0xFFFFFFFFFFFFFFFELL;
          if (v15)
          {
            if (*(void *)(v15 + 24)) {
              unint64_t v19 = v17 | 1;
            }
            else {
              unint64_t v19 = v17 & 0xFFFFFFFFFFFFFFFELL;
            }
            *(void *)(v15 + 24) = v19;
          }
          CFPropertyListRef v20 = v7 + 3;
          if (v18)
          {
            CFPropertyListRef v20 = (unint64_t *)(v18 + 8);
            if (*(void *)(v18 + 8) != v16) {
              CFPropertyListRef v20 = (unint64_t *)(v18 + 16);
            }
          }
          LODWORD(v17) = v17 & 1;
          *CFPropertyListRef v20 = v15;
          if ((void *)(*(void *)(v16 + 24) & 0xFFFFFFFFFFFFFFFELL) == value) {
            unint64_t v18 = v16;
          }
          uint64_t v21 = value[3];
          *(_OWORD *)(v16 + 8) = *(_OWORD *)(value + 1);
          *(void *)(v16 + 24) = v21;
          char v22 = v7 + 3;
          unint64_t v23 = value[3] & 0xFFFFFFFFFFFFFFFELL;
          if (v23)
          {
            double v25 = *(void **)(v23 + 8);
            double v24 = (unint64_t *)(v23 + 8);
            if (v25 == value) {
              char v22 = v24;
            }
            else {
              char v22 = v24 + 1;
            }
          }
          *char v22 = v16;
          uint64_t v26 = value[1];
          if (*(void *)(v26 + 24)) {
            uint64_t v27 = v16 | 1;
          }
          else {
            uint64_t v27 = v16;
          }
          *(void *)(v26 + 24) = v27;
          uint64_t v28 = value[2];
          if (v28)
          {
            if (*(void *)(v28 + 24)) {
              v16 |= 1uLL;
            }
            *(void *)(v28 + 24) = v16;
          }
          goto LABEL_53;
        }
        unint64_t v18 = value[3] & 0xFFFFFFFFFFFFFFFELL;
        uint64_t v17 = value[3] & 1;
        unint64_t v15 = value[1];
      }
      else
      {
        unint64_t v18 = value[3] & 0xFFFFFFFFFFFFFFFELL;
        uint64_t v17 = value[3] & 1;
        if (!v15)
        {
LABEL_49:
          CFStringRef v30 = v7 + 3;
          if (v18)
          {
            CFStringRef v30 = (unint64_t *)(v18 + 8);
            if (*(void **)(v18 + 8) != value) {
              CFStringRef v30 = (unint64_t *)(v18 + 16);
            }
          }
          *CFStringRef v30 = v15;
LABEL_53:
          if (!v17)
          {
            while (1)
            {
              BOOL v52 = (void *)v15;
              unint64_t v15 = v18;
              if (v52)
              {
                uint64_t v53 = v52[3];
                if (v53) {
                  break;
                }
              }
              unint64_t v44 = *v12;
              if (v52 == (void *)*v12) {
                goto LABEL_143;
              }
              unint64_t v31 = *(void *)(v15 + 8);
              if ((void *)v31 == v52)
              {
                unint64_t v31 = *(void *)(v15 + 16);
                uint64_t v38 = *(void *)(v31 + 24);
                if (v38)
                {
                  *(void *)(v31 + 24) = v38 & 0xFFFFFFFFFFFFFFFELL;
                  uint64_t v39 = *(void *)(v15 + 24) | 1;
                  *(void *)(v15 + 24) = v39;
                  CFURLRef v40 = *(void **)(v31 + 8);
                  *(void *)(v15 + 16) = v40;
                  if (v40)
                  {
                    if (v40[3]) {
                      uint64_t v41 = v15 | 1;
                    }
                    else {
                      uint64_t v41 = v15;
                    }
                    v40[3] = v41;
                    uint64_t v39 = *(void *)(v15 + 24);
                  }
                  *(void *)(v31 + 24) = v39 & 0xFFFFFFFFFFFFFFFELL | *(void *)(v31 + 24) & 1;
                  if ((v39 & 0xFFFFFFFFFFFFFFFELL) != 0)
                  {
                    uint64_t v42 = *(void *)(v15 + 24);
                    unint64_t v43 = v42 & 0xFFFFFFFFFFFFFFFELL;
                    if (v15 == *(void *)((v42 & 0xFFFFFFFFFFFFFFFELL) + 8))
                    {
                      *(void *)(v43 + 8) = v31;
                    }
                    else
                    {
                      *(void *)(v43 + 16) = v31;
                      CFURLRef v40 = *(void **)(v15 + 16);
                    }
                  }
                  else
                  {
                    *uint64_t v12 = v31;
                    uint64_t v42 = *(void *)(v15 + 24);
                    unint64_t v44 = v31;
                  }
                  *(void *)(v31 + 8) = v15;
                  if (v42) {
                    v31 |= 1uLL;
                  }
                  *(void *)(v15 + 24) = v31;
                  unint64_t v31 = (unint64_t)v40;
                }
                unint64_t v49 = *(void *)(v31 + 8);
                if (v49)
                {
                  uint64_t v50 = *(void *)(v49 + 24);
                  if (v50)
                  {
                    uint64_t v51 = *(void *)(v31 + 16);
                    if (!v51 || (*(unsigned char *)(v51 + 24) & 1) == 0)
                    {
                      *(void *)(v49 + 24) = v50 & 0xFFFFFFFFFFFFFFFELL;
                      uint64_t v59 = *(void *)(v31 + 24) | 1;
                      *(void *)(v31 + 24) = v59;
                      uint64_t v60 = *(void *)(v49 + 16);
                      *(void *)(v31 + 8) = v60;
                      if (v60)
                      {
                        if (*(void *)(v60 + 24)) {
                          uint64_t v61 = v31 | 1;
                        }
                        else {
                          uint64_t v61 = v31;
                        }
                        *(void *)(v60 + 24) = v61;
                        uint64_t v59 = *(void *)(v31 + 24);
                      }
                      *(void *)(v49 + 24) = v59 & 0xFFFFFFFFFFFFFFFELL | *(void *)(v49 + 24) & 1;
                      if ((v59 & 0xFFFFFFFFFFFFFFFELL) != 0)
                      {
                        uint64_t v62 = *(void *)(v31 + 24);
                        unint64_t v63 = v62 & 0xFFFFFFFFFFFFFFFELL;
                        if (v31 == *(void *)((v62 & 0xFFFFFFFFFFFFFFFELL) + 8)) {
                          *(void *)(v63 + 8) = v49;
                        }
                        else {
                          *(void *)(v63 + 16) = v49;
                        }
                      }
                      else
                      {
                        *uint64_t v12 = v49;
                        uint64_t v62 = *(void *)(v31 + 24);
                        unint64_t v44 = v49;
                      }
                      *(void *)(v49 + 16) = v31;
                      if (v62) {
                        v49 |= 1uLL;
                      }
                      *(void *)(v31 + 24) = v49;
                      unint64_t v31 = *(void *)(v15 + 16);
                      uint64_t v51 = *(void *)(v31 + 16);
                    }
LABEL_400:
                    *(void *)(v31 + 24) = *(void *)(v31 + 24) & 0xFFFFFFFFFFFFFFFELL | *(void *)(v15 + 24) & 1;
                    *(void *)(v15 + 24) &= ~1uLL;
                    if (v51) {
                      *(void *)(v51 + 24) &= ~1uLL;
                    }
                    uint64_t v64 = (unint64_t *)(v31 + 8);
                    uint64_t v65 = *(void *)(v31 + 8);
                    *(void *)(v15 + 16) = v65;
                    if (v65) {
                      goto LABEL_130;
                    }
                    goto LABEL_134;
                  }
                }
                uint64_t v51 = *(void *)(v31 + 16);
                if (v51 && (*(unsigned char *)(v51 + 24) & 1) != 0) {
                  goto LABEL_400;
                }
              }
              else
              {
                uint64_t v32 = *(void *)(v31 + 24);
                if (v32)
                {
                  *(void *)(v31 + 24) = v32 & 0xFFFFFFFFFFFFFFFELL;
                  uint64_t v33 = *(void *)(v15 + 24) | 1;
                  *(void *)(v15 + 24) = v33;
                  unint64_t v34 = *(void **)(v31 + 16);
                  *(void *)(v15 + 8) = v34;
                  if (v34)
                  {
                    if (v34[3]) {
                      uint64_t v35 = v15 | 1;
                    }
                    else {
                      uint64_t v35 = v15;
                    }
                    v34[3] = v35;
                    uint64_t v33 = *(void *)(v15 + 24);
                  }
                  *(void *)(v31 + 24) = v33 & 0xFFFFFFFFFFFFFFFELL | *(void *)(v31 + 24) & 1;
                  if ((v33 & 0xFFFFFFFFFFFFFFFELL) != 0)
                  {
                    uint64_t v36 = *(void *)(v15 + 24);
                    unint64_t v37 = v36 & 0xFFFFFFFFFFFFFFFELL;
                    if (v15 == *(void *)((v36 & 0xFFFFFFFFFFFFFFFELL) + 8))
                    {
                      *(void *)(v37 + 8) = v31;
                      unint64_t v34 = *(void **)(v15 + 8);
                    }
                    else
                    {
                      *(void *)(v37 + 16) = v31;
                    }
                  }
                  else
                  {
                    *uint64_t v12 = v31;
                    uint64_t v36 = *(void *)(v15 + 24);
                    unint64_t v44 = v31;
                  }
                  *(void *)(v31 + 16) = v15;
                  if (v36) {
                    v31 |= 1uLL;
                  }
                  *(void *)(v15 + 24) = v31;
                  unint64_t v31 = (unint64_t)v34;
                }
                uint64_t v45 = *(void *)(v31 + 8);
                if (v45)
                {
                  uint64_t v46 = *(void *)(v45 + 24);
                  if (v46) {
                    goto LABEL_100;
                  }
                }
                unint64_t v47 = *(void *)(v31 + 16);
                if (v47)
                {
                  uint64_t v48 = *(void *)(v47 + 24);
                  if (v48)
                  {
                    if (!v45) {
                      goto LABEL_103;
                    }
                    uint64_t v46 = *(void *)(v45 + 24);
LABEL_100:
                    if ((v46 & 1) == 0)
                    {
                      unint64_t v47 = *(void *)(v31 + 16);
                      if (v47)
                      {
                        uint64_t v48 = *(void *)(v47 + 24);
LABEL_103:
                        *(void *)(v47 + 24) = v48 & 0xFFFFFFFFFFFFFFFELL;
                      }
                      uint64_t v54 = *(void *)(v31 + 24) | 1;
                      *(void *)(v31 + 24) = v54;
                      uint64_t v55 = *(void *)(v47 + 8);
                      *(void *)(v31 + 16) = v55;
                      if (v55)
                      {
                        if (*(void *)(v55 + 24)) {
                          uint64_t v56 = v31 | 1;
                        }
                        else {
                          uint64_t v56 = v31;
                        }
                        *(void *)(v55 + 24) = v56;
                        uint64_t v54 = *(void *)(v31 + 24);
                      }
                      *(void *)(v47 + 24) = v54 & 0xFFFFFFFFFFFFFFFELL | *(void *)(v47 + 24) & 1;
                      if ((v54 & 0xFFFFFFFFFFFFFFFELL) != 0)
                      {
                        uint64_t v57 = *(void *)(v31 + 24);
                        unint64_t v58 = v57 & 0xFFFFFFFFFFFFFFFELL;
                        if (v31 == *(void *)((v57 & 0xFFFFFFFFFFFFFFFELL) + 8)) {
                          *(void *)(v58 + 8) = v47;
                        }
                        else {
                          *(void *)(v58 + 16) = v47;
                        }
                      }
                      else
                      {
                        *uint64_t v12 = v47;
                        uint64_t v57 = *(void *)(v31 + 24);
                        unint64_t v44 = v47;
                      }
                      *(void *)(v47 + 8) = v31;
                      if (v57) {
                        v47 |= 1uLL;
                      }
                      *(void *)(v31 + 24) = v47;
                      unint64_t v31 = *(void *)(v15 + 8);
                      uint64_t v45 = *(void *)(v31 + 8);
                    }
                    *(void *)(v31 + 24) = *(void *)(v31 + 24) & 0xFFFFFFFFFFFFFFFELL | *(void *)(v15 + 24) & 1;
                    *(void *)(v15 + 24) &= ~1uLL;
                    if (v45) {
                      *(void *)(v45 + 24) &= ~1uLL;
                    }
                    uint64_t v64 = (unint64_t *)(v31 + 16);
                    uint64_t v65 = *(void *)(v31 + 16);
                    *(void *)(v15 + 8) = v65;
                    if (v65)
                    {
LABEL_130:
                      if (*(void *)(v65 + 24)) {
                        uint64_t v66 = v15 | 1;
                      }
                      else {
                        uint64_t v66 = v15;
                      }
                      *(void *)(v65 + 24) = v66;
                    }
LABEL_134:
                    uint64_t v67 = *(void *)(v15 + 24);
                    *(void *)(v31 + 24) = v67 & 0xFFFFFFFFFFFFFFFELL | *(void *)(v31 + 24) & 1;
                    if ((v67 & 0xFFFFFFFFFFFFFFFELL) != 0)
                    {
                      uint64_t v68 = *(void *)(v15 + 24);
                      unint64_t v69 = v68 & 0xFFFFFFFFFFFFFFFELL;
                      if (v15 == *(void *)((v68 & 0xFFFFFFFFFFFFFFFELL) + 8)) {
                        *(void *)(v69 + 8) = v31;
                      }
                      else {
                        *(void *)(v69 + 16) = v31;
                      }
                    }
                    else
                    {
                      *uint64_t v12 = v31;
                      uint64_t v68 = *(void *)(v15 + 24);
                      unint64_t v44 = v31;
                    }
                    *uint64_t v64 = v15;
                    if (v68) {
                      uint64_t v70 = v31 | 1;
                    }
                    else {
                      uint64_t v70 = v31;
                    }
                    *(void *)(v15 + 24) = v70;
                    BOOL v52 = (void *)v44;
LABEL_143:
                    if (!v52) {
                      goto LABEL_146;
                    }
                    uint64_t v53 = v52[3];
                    break;
                  }
                }
              }
              *(void *)(v31 + 24) |= 1uLL;
              unint64_t v18 = *(void *)(v15 + 24) & 0xFFFFFFFFFFFFFFFELL;
            }
            v52[3] = v53 & 0xFFFFFFFFFFFFFFFELL;
          }
          goto LABEL_146;
        }
      }
      if (*(void *)(v15 + 24)) {
        uint64_t v29 = v18 | 1;
      }
      else {
        uint64_t v29 = v18;
      }
      *(void *)(v15 + 24) = v29;
      goto LABEL_49;
    }
  }
LABEL_146:
  uint64_t v71 = v7 + 4;
  if (!v7[4] || MediaSegmentOffsetList_RB_FIND((void **)v7 + 4, v203) != value) {
    goto LABEL_267;
  }
  unint64_t v72 = value[5];
  if (value[4])
  {
    if (v72)
    {
      do
      {
        unint64_t v73 = v72;
        unint64_t v72 = *(void *)(v72 + 32);
      }
      while (v72);
      unint64_t v72 = *(void *)(v73 + 40);
      uint64_t v74 = *(void *)(v73 + 48);
      unint64_t v75 = v74 & 0xFFFFFFFFFFFFFFFELL;
      if (v72)
      {
        unint64_t v76 = *(void *)(v72 + 48) & 1 | v75;
        if ((*(void *)(v72 + 48) & 1) == 0) {
          unint64_t v76 = v74 & 0xFFFFFFFFFFFFFFFELL;
        }
        *(void *)(v72 + 48) = v76;
      }
      uint64_t v77 = v7 + 4;
      if (v75)
      {
        uint64_t v77 = (unint64_t *)(v75 + 32);
        if (*(void *)(v75 + 32) != v73) {
          uint64_t v77 = (unint64_t *)(v75 + 40);
        }
      }
      LODWORD(v74) = v74 & 1;
      *uint64_t v77 = v72;
      if ((void *)(*(void *)(v73 + 48) & 0xFFFFFFFFFFFFFFFELL) == value) {
        unint64_t v75 = v73;
      }
      uint64_t v78 = value[6];
      *(_OWORD *)(v73 + 32) = *((_OWORD *)value + 2);
      *(void *)(v73 + 48) = v78;
      uint64_t v79 = v7 + 4;
      unint64_t v80 = value[6] & 0xFFFFFFFFFFFFFFFELL;
      if (v80)
      {
        uint64_t v82 = *(void **)(v80 + 32);
        unint64_t v81 = (unint64_t *)(v80 + 32);
        if (v82 == value) {
          uint64_t v79 = v81;
        }
        else {
          uint64_t v79 = v81 + 1;
        }
      }
      *uint64_t v79 = v73;
      uint64_t v83 = value[4];
      unint64_t v84 = *(void *)(v83 + 48) & 1 | v73 & 0xFFFFFFFFFFFFFFFELL;
      if ((*(void *)(v83 + 48) & 1) == 0) {
        unint64_t v84 = v73;
      }
      *(void *)(v83 + 48) = v84;
      uint64_t v85 = value[5];
      if (v85)
      {
        if (*(void *)(v85 + 48)) {
          unint64_t v73 = *(void *)(v85 + 48) & 1 | v73 & 0xFFFFFFFFFFFFFFFELL;
        }
        *(void *)(v85 + 48) = v73;
      }
      goto LABEL_180;
    }
    unint64_t v75 = value[6] & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v74 = value[6] & 1;
    unint64_t v72 = value[4];
    goto LABEL_173;
  }
  unint64_t v75 = value[6] & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v74 = value[6] & 1;
  if (v72)
  {
LABEL_173:
    uint64_t v86 = *(void *)(v72 + 48) & 1 | v75;
    if ((*(void *)(v72 + 48) & 1) == 0) {
      uint64_t v86 = v75;
    }
    *(void *)(v72 + 48) = v86;
  }
  uint64_t v87 = v7 + 4;
  if (v75)
  {
    uint64_t v87 = (unint64_t *)(v75 + 32);
    if (*(void **)(v75 + 32) != value) {
      uint64_t v87 = (unint64_t *)(v75 + 40);
    }
  }
  *uint64_t v87 = v72;
LABEL_180:
  if (!v74)
  {
    while (1)
    {
      unint64_t v114 = v72;
      unint64_t v72 = v75;
      if (v114)
      {
        uint64_t v115 = *(void *)(v114 + 48);
        if (v115) {
          break;
        }
      }
      unint64_t v101 = *v71;
      if (v114 == *v71) {
        goto LABEL_264;
      }
      unint64_t v88 = *(void *)(v72 + 32);
      if (v88 == v114)
      {
        unint64_t v88 = *(void *)(v72 + 40);
        uint64_t v95 = *(void *)(v88 + 48);
        if (v95)
        {
          *(void *)(v88 + 48) = v95 & 0xFFFFFFFFFFFFFFFELL;
          uint64_t v96 = *(void *)(v72 + 48) | 1;
          *(void *)(v72 + 48) = v96;
          unint64_t v97 = *(void *)(v88 + 32);
          *(void *)(v72 + 40) = v97;
          if (v97)
          {
            unint64_t v98 = *(void *)(v97 + 48) & 1 | v72 & 0xFFFFFFFFFFFFFFFELL;
            if ((*(void *)(v97 + 48) & 1) == 0) {
              unint64_t v98 = v72;
            }
            *(void *)(v97 + 48) = v98;
            uint64_t v96 = *(void *)(v72 + 48);
          }
          *(void *)(v88 + 48) = v96 & 0xFFFFFFFFFFFFFFFELL | *(void *)(v88 + 48) & 1;
          if ((v96 & 0xFFFFFFFFFFFFFFFELL) != 0)
          {
            uint64_t v99 = *(void *)(v72 + 48);
            unint64_t v100 = v99 & 0xFFFFFFFFFFFFFFFELL;
            if (v72 == *(void *)((v99 & 0xFFFFFFFFFFFFFFFELL) + 32))
            {
              *(void *)(v100 + 32) = v88;
            }
            else
            {
              *(void *)(v100 + 40) = v88;
              unint64_t v97 = *(void *)(v72 + 40);
            }
          }
          else
          {
            *uint64_t v71 = v88;
            uint64_t v99 = *(void *)(v72 + 48);
            unint64_t v101 = v88;
          }
          *(void *)(v88 + 32) = v72;
          uint64_t v109 = v99 & 1;
          BOOL v102 = v109 == 0;
          unint64_t v110 = v109 | v88 & 0xFFFFFFFFFFFFFFFELL;
          if (!v102) {
            unint64_t v88 = v110;
          }
          *(void *)(v72 + 48) = v88;
          unint64_t v88 = v97;
        }
        unint64_t v111 = *(void *)(v88 + 32);
        if (v111)
        {
          uint64_t v112 = *(void *)(v111 + 48);
          if (v112)
          {
            uint64_t v113 = *(void *)(v88 + 40);
            if (!v113 || (*(unsigned char *)(v113 + 48) & 1) == 0)
            {
              *(void *)(v111 + 48) = v112 & 0xFFFFFFFFFFFFFFFELL;
              uint64_t v121 = *(void *)(v88 + 48) | 1;
              *(void *)(v88 + 48) = v121;
              uint64_t v122 = *(void *)(v111 + 40);
              *(void *)(v88 + 32) = v122;
              if (v122)
              {
                unint64_t v123 = *(void *)(v122 + 48) & 1 | v88 & 0xFFFFFFFFFFFFFFFELL;
                if ((*(void *)(v122 + 48) & 1) == 0) {
                  unint64_t v123 = v88;
                }
                *(void *)(v122 + 48) = v123;
                uint64_t v121 = *(void *)(v88 + 48);
              }
              *(void *)(v111 + 48) = v121 & 0xFFFFFFFFFFFFFFFELL | *(void *)(v111 + 48) & 1;
              if ((v121 & 0xFFFFFFFFFFFFFFFELL) != 0)
              {
                uint64_t v124 = *(void *)(v88 + 48);
                unint64_t v125 = v124 & 0xFFFFFFFFFFFFFFFELL;
                if (v88 == *(void *)((v124 & 0xFFFFFFFFFFFFFFFELL) + 32)) {
                  *(void *)(v125 + 32) = v111;
                }
                else {
                  *(void *)(v125 + 40) = v111;
                }
              }
              else
              {
                *uint64_t v71 = v111;
                uint64_t v124 = *(void *)(v88 + 48);
                unint64_t v101 = v111;
              }
              *(void *)(v111 + 40) = v88;
              uint64_t v199 = v124 & 1;
              BOOL v102 = v199 == 0;
              unint64_t v200 = v199 | v111 & 0xFFFFFFFFFFFFFFFELL;
              if (!v102) {
                unint64_t v111 = v200;
              }
              *(void *)(v88 + 48) = v111;
              unint64_t v88 = *(void *)(v72 + 40);
              uint64_t v113 = *(void *)(v88 + 40);
            }
LABEL_408:
            *(void *)(v88 + 48) = *(void *)(v88 + 48) & 0xFFFFFFFFFFFFFFFELL | *(void *)(v72 + 48) & 1;
            *(void *)(v72 + 48) &= ~1uLL;
            if (v113) {
              *(void *)(v113 + 48) &= ~1uLL;
            }
            unint64_t v128 = (unint64_t *)(v88 + 32);
            uint64_t v129 = *(void *)(v88 + 32);
            *(void *)(v72 + 40) = v129;
            if (v129) {
              goto LABEL_253;
            }
            goto LABEL_256;
          }
        }
        uint64_t v113 = *(void *)(v88 + 40);
        if (v113 && (*(unsigned char *)(v113 + 48) & 1) != 0) {
          goto LABEL_408;
        }
      }
      else
      {
        uint64_t v89 = *(void *)(v88 + 48);
        if (v89)
        {
          *(void *)(v88 + 48) = v89 & 0xFFFFFFFFFFFFFFFELL;
          uint64_t v90 = *(void *)(v72 + 48) | 1;
          *(void *)(v72 + 48) = v90;
          unint64_t v91 = *(void *)(v88 + 40);
          *(void *)(v72 + 32) = v91;
          if (v91)
          {
            unint64_t v92 = *(void *)(v91 + 48) & 1 | v72 & 0xFFFFFFFFFFFFFFFELL;
            if ((*(void *)(v91 + 48) & 1) == 0) {
              unint64_t v92 = v72;
            }
            *(void *)(v91 + 48) = v92;
            uint64_t v90 = *(void *)(v72 + 48);
          }
          *(void *)(v88 + 48) = v90 & 0xFFFFFFFFFFFFFFFELL | *(void *)(v88 + 48) & 1;
          if ((v90 & 0xFFFFFFFFFFFFFFFELL) != 0)
          {
            uint64_t v93 = *(void *)(v72 + 48);
            unint64_t v94 = v93 & 0xFFFFFFFFFFFFFFFELL;
            if (v72 == *(void *)((v93 & 0xFFFFFFFFFFFFFFFELL) + 32))
            {
              *(void *)(v94 + 32) = v88;
              unint64_t v91 = *(void *)(v72 + 32);
            }
            else
            {
              *(void *)(v94 + 40) = v88;
            }
          }
          else
          {
            *uint64_t v71 = v88;
            uint64_t v93 = *(void *)(v72 + 48);
            unint64_t v101 = v88;
          }
          *(void *)(v88 + 40) = v72;
          uint64_t v103 = v93 & 1;
          BOOL v102 = v103 == 0;
          unint64_t v104 = v103 | v88 & 0xFFFFFFFFFFFFFFFELL;
          if (!v102) {
            unint64_t v88 = v104;
          }
          *(void *)(v72 + 48) = v88;
          unint64_t v88 = v91;
        }
        uint64_t v105 = *(void *)(v88 + 32);
        if (v105)
        {
          uint64_t v106 = *(void *)(v105 + 48);
          if (v106) {
            goto LABEL_225;
          }
        }
        unint64_t v107 = *(void *)(v88 + 40);
        if (v107)
        {
          uint64_t v108 = *(void *)(v107 + 48);
          if (v108)
          {
            if (!v105) {
              goto LABEL_228;
            }
            uint64_t v106 = *(void *)(v105 + 48);
LABEL_225:
            if ((v106 & 1) == 0)
            {
              unint64_t v107 = *(void *)(v88 + 40);
              if (v107)
              {
                uint64_t v108 = *(void *)(v107 + 48);
LABEL_228:
                *(void *)(v107 + 48) = v108 & 0xFFFFFFFFFFFFFFFELL;
              }
              uint64_t v116 = *(void *)(v88 + 48) | 1;
              *(void *)(v88 + 48) = v116;
              uint64_t v117 = *(void *)(v107 + 32);
              *(void *)(v88 + 40) = v117;
              if (v117)
              {
                unint64_t v118 = *(void *)(v117 + 48) & 1 | v88 & 0xFFFFFFFFFFFFFFFELL;
                if ((*(void *)(v117 + 48) & 1) == 0) {
                  unint64_t v118 = v88;
                }
                *(void *)(v117 + 48) = v118;
                uint64_t v116 = *(void *)(v88 + 48);
              }
              *(void *)(v107 + 48) = v116 & 0xFFFFFFFFFFFFFFFELL | *(void *)(v107 + 48) & 1;
              if ((v116 & 0xFFFFFFFFFFFFFFFELL) != 0)
              {
                uint64_t v119 = *(void *)(v88 + 48);
                unint64_t v120 = v119 & 0xFFFFFFFFFFFFFFFELL;
                if (v88 == *(void *)((v119 & 0xFFFFFFFFFFFFFFFELL) + 32)) {
                  *(void *)(v120 + 32) = v107;
                }
                else {
                  *(void *)(v120 + 40) = v107;
                }
              }
              else
              {
                *uint64_t v71 = v107;
                uint64_t v119 = *(void *)(v88 + 48);
                unint64_t v101 = v107;
              }
              *(void *)(v107 + 32) = v88;
              uint64_t v126 = v119 & 1;
              BOOL v102 = v126 == 0;
              unint64_t v127 = v126 | v107 & 0xFFFFFFFFFFFFFFFELL;
              if (!v102) {
                unint64_t v107 = v127;
              }
              *(void *)(v88 + 48) = v107;
              unint64_t v88 = *(void *)(v72 + 32);
              uint64_t v105 = *(void *)(v88 + 32);
            }
            *(void *)(v88 + 48) = *(void *)(v88 + 48) & 0xFFFFFFFFFFFFFFFELL | *(void *)(v72 + 48) & 1;
            *(void *)(v72 + 48) &= ~1uLL;
            if (v105) {
              *(void *)(v105 + 48) &= ~1uLL;
            }
            unint64_t v128 = (unint64_t *)(v88 + 40);
            uint64_t v129 = *(void *)(v88 + 40);
            *(void *)(v72 + 32) = v129;
            if (v129)
            {
LABEL_253:
              unint64_t v130 = *(void *)(v129 + 48) & 1 | v72 & 0xFFFFFFFFFFFFFFFELL;
              if ((*(void *)(v129 + 48) & 1) == 0) {
                unint64_t v130 = v72;
              }
              *(void *)(v129 + 48) = v130;
            }
LABEL_256:
            uint64_t v131 = *(void *)(v72 + 48);
            *(void *)(v88 + 48) = v131 & 0xFFFFFFFFFFFFFFFELL | *(void *)(v88 + 48) & 1;
            if ((v131 & 0xFFFFFFFFFFFFFFFELL) != 0)
            {
              uint64_t v132 = *(void *)(v72 + 48);
              unint64_t v133 = v132 & 0xFFFFFFFFFFFFFFFELL;
              if (v72 == *(void *)((v132 & 0xFFFFFFFFFFFFFFFELL) + 32)) {
                *(void *)(v133 + 32) = v88;
              }
              else {
                *(void *)(v133 + 40) = v88;
              }
            }
            else
            {
              *uint64_t v71 = v88;
              uint64_t v132 = *(void *)(v72 + 48);
              unint64_t v101 = v88;
            }
            *unint64_t v128 = v72;
            uint64_t v134 = v132 & 1;
            if (v134) {
              unint64_t v88 = v88 & 0xFFFFFFFFFFFFFFFELL | v134;
            }
            *(void *)(v72 + 48) = v88;
            unint64_t v114 = v101;
LABEL_264:
            if (!v114) {
              goto LABEL_267;
            }
            uint64_t v115 = *(void *)(v114 + 48);
            break;
          }
        }
      }
      *(void *)(v88 + 48) |= 1uLL;
      unint64_t v75 = *(void *)(v72 + 48) & 0xFFFFFFFFFFFFFFFELL;
    }
    *(void *)(v114 + 48) = v115 & 0xFFFFFFFFFFFFFFFELL;
  }
LABEL_267:
  if (value[13])
  {
    unint64_t v135 = v7 + 5;
    if (v7[5])
    {
      if ((void *)MediaSegmentMediaSequenceNumberList_RB_FIND(v7 + 5, (uint64_t)v203) == value)
      {
        unint64_t v136 = value[8];
        if (value[7])
        {
          if (v136)
          {
            do
            {
              unint64_t v137 = v136;
              unint64_t v136 = *(void *)(v136 + 56);
            }
            while (v136);
            unint64_t v136 = *(void *)(v137 + 64);
            uint64_t v138 = *(void *)(v137 + 72);
            unint64_t v139 = v138 & 0xFFFFFFFFFFFFFFFELL;
            if (v136)
            {
              unint64_t v140 = *(void *)(v136 + 72) & 1 | v139;
              if ((*(void *)(v136 + 72) & 1) == 0) {
                unint64_t v140 = v138 & 0xFFFFFFFFFFFFFFFELL;
              }
              *(void *)(v136 + 72) = v140;
            }
            unint64_t v141 = v7 + 5;
            if (v139)
            {
              unint64_t v141 = (unint64_t *)(v139 + 56);
              if (*(void *)(v139 + 56) != v137) {
                unint64_t v141 = (unint64_t *)(v139 + 64);
              }
            }
            LODWORD(v138) = v138 & 1;
            *unint64_t v141 = v136;
            if ((void *)(*(void *)(v137 + 72) & 0xFFFFFFFFFFFFFFFELL) == value) {
              unint64_t v139 = v137;
            }
            uint64_t v142 = value[9];
            *(_OWORD *)(v137 + 56) = *(_OWORD *)(value + 7);
            *(void *)(v137 + 72) = v142;
            long long v143 = v7 + 5;
            unint64_t v144 = value[9] & 0xFFFFFFFFFFFFFFFELL;
            if (v144)
            {
              uint64_t v146 = *(void **)(v144 + 56);
              unint64_t v145 = (unint64_t *)(v144 + 56);
              if (v146 == value) {
                long long v143 = v145;
              }
              else {
                long long v143 = v145 + 1;
              }
            }
            *long long v143 = v137;
            uint64_t v147 = value[7];
            unint64_t v148 = *(void *)(v147 + 72) & 1 | v137 & 0xFFFFFFFFFFFFFFFELL;
            if ((*(void *)(v147 + 72) & 1) == 0) {
              unint64_t v148 = v137;
            }
            *(void *)(v147 + 72) = v148;
            uint64_t v149 = value[8];
            if (v149)
            {
              if (*(void *)(v149 + 72)) {
                unint64_t v137 = *(void *)(v149 + 72) & 1 | v137 & 0xFFFFFFFFFFFFFFFELL;
              }
              *(void *)(v149 + 72) = v137;
            }
            goto LABEL_302;
          }
          unint64_t v139 = value[9] & 0xFFFFFFFFFFFFFFFELL;
          uint64_t v138 = value[9] & 1;
          unint64_t v136 = value[7];
        }
        else
        {
          unint64_t v139 = value[9] & 0xFFFFFFFFFFFFFFFELL;
          uint64_t v138 = value[9] & 1;
          if (!v136)
          {
LABEL_298:
            uint64_t v151 = v7 + 5;
            if (v139)
            {
              uint64_t v151 = (unint64_t *)(v139 + 56);
              if (*(void **)(v139 + 56) != value) {
                uint64_t v151 = (unint64_t *)(v139 + 64);
              }
            }
            *uint64_t v151 = v136;
LABEL_302:
            if (!v138)
            {
              while (1)
              {
                unint64_t v177 = v136;
                unint64_t v136 = v139;
                if (v177)
                {
                  uint64_t v178 = *(void *)(v177 + 72);
                  if (v178) {
                    break;
                  }
                }
                unint64_t v165 = *v135;
                if (v177 == *v135) {
                  goto LABEL_386;
                }
                unint64_t v152 = *(void *)(v136 + 56);
                if (v152 == v177)
                {
                  unint64_t v152 = *(void *)(v136 + 64);
                  uint64_t v159 = *(void *)(v152 + 72);
                  if (v159)
                  {
                    *(void *)(v152 + 72) = v159 & 0xFFFFFFFFFFFFFFFELL;
                    uint64_t v160 = *(void *)(v136 + 72) | 1;
                    *(void *)(v136 + 72) = v160;
                    unint64_t v161 = *(void *)(v152 + 56);
                    *(void *)(v136 + 64) = v161;
                    if (v161)
                    {
                      unint64_t v162 = *(void *)(v161 + 72) & 1 | v136 & 0xFFFFFFFFFFFFFFFELL;
                      if ((*(void *)(v161 + 72) & 1) == 0) {
                        unint64_t v162 = v136;
                      }
                      *(void *)(v161 + 72) = v162;
                      uint64_t v160 = *(void *)(v136 + 72);
                    }
                    *(void *)(v152 + 72) = v160 & 0xFFFFFFFFFFFFFFFELL | *(void *)(v152 + 72) & 1;
                    if ((v160 & 0xFFFFFFFFFFFFFFFELL) != 0)
                    {
                      uint64_t v163 = *(void *)(v136 + 72);
                      unint64_t v164 = v163 & 0xFFFFFFFFFFFFFFFELL;
                      if (v136 == *(void *)((v163 & 0xFFFFFFFFFFFFFFFELL) + 56))
                      {
                        *(void *)(v164 + 56) = v152;
                      }
                      else
                      {
                        *(void *)(v164 + 64) = v152;
                        unint64_t v161 = *(void *)(v136 + 64);
                      }
                    }
                    else
                    {
                      *unint64_t v135 = v152;
                      uint64_t v163 = *(void *)(v136 + 72);
                      unint64_t v165 = v152;
                    }
                    *(void *)(v152 + 56) = v136;
                    uint64_t v172 = v163 & 1;
                    BOOL v102 = v172 == 0;
                    unint64_t v173 = v172 | v152 & 0xFFFFFFFFFFFFFFFELL;
                    if (!v102) {
                      unint64_t v152 = v173;
                    }
                    *(void *)(v136 + 72) = v152;
                    unint64_t v152 = v161;
                  }
                  unint64_t v174 = *(void *)(v152 + 56);
                  if (v174)
                  {
                    uint64_t v175 = *(void *)(v174 + 72);
                    if (v175)
                    {
                      uint64_t v176 = *(void *)(v152 + 64);
                      if (!v176 || (*(unsigned char *)(v176 + 72) & 1) == 0)
                      {
                        *(void *)(v174 + 72) = v175 & 0xFFFFFFFFFFFFFFFELL;
                        uint64_t v184 = *(void *)(v152 + 72) | 1;
                        *(void *)(v152 + 72) = v184;
                        uint64_t v185 = *(void *)(v174 + 64);
                        *(void *)(v152 + 56) = v185;
                        if (v185)
                        {
                          unint64_t v186 = *(void *)(v185 + 72) & 1 | v152 & 0xFFFFFFFFFFFFFFFELL;
                          if ((*(void *)(v185 + 72) & 1) == 0) {
                            unint64_t v186 = v152;
                          }
                          *(void *)(v185 + 72) = v186;
                          uint64_t v184 = *(void *)(v152 + 72);
                        }
                        *(void *)(v174 + 72) = v184 & 0xFFFFFFFFFFFFFFFELL | *(void *)(v174 + 72) & 1;
                        if ((v184 & 0xFFFFFFFFFFFFFFFELL) != 0)
                        {
                          uint64_t v187 = *(void *)(v152 + 72);
                          unint64_t v188 = v187 & 0xFFFFFFFFFFFFFFFELL;
                          if (v152 == *(void *)((v187 & 0xFFFFFFFFFFFFFFFELL) + 56)) {
                            *(void *)(v188 + 56) = v174;
                          }
                          else {
                            *(void *)(v188 + 64) = v174;
                          }
                        }
                        else
                        {
                          *unint64_t v135 = v174;
                          uint64_t v187 = *(void *)(v152 + 72);
                          unint64_t v165 = v174;
                        }
                        *(void *)(v174 + 64) = v152;
                        uint64_t v201 = v187 & 1;
                        BOOL v102 = v201 == 0;
                        unint64_t v202 = v201 | v174 & 0xFFFFFFFFFFFFFFFELL;
                        if (!v102) {
                          unint64_t v174 = v202;
                        }
                        *(void *)(v152 + 72) = v174;
                        unint64_t v152 = *(void *)(v136 + 64);
                        uint64_t v176 = *(void *)(v152 + 64);
                      }
LABEL_417:
                      *(void *)(v152 + 72) = *(void *)(v152 + 72) & 0xFFFFFFFFFFFFFFFELL | *(void *)(v136 + 72) & 1;
                      *(void *)(v136 + 72) &= ~1uLL;
                      if (v176) {
                        *(void *)(v176 + 72) &= ~1uLL;
                      }
                      uint64_t v191 = (unint64_t *)(v152 + 56);
                      uint64_t v192 = *(void *)(v152 + 56);
                      *(void *)(v136 + 64) = v192;
                      if (v192) {
                        goto LABEL_375;
                      }
                      goto LABEL_378;
                    }
                  }
                  uint64_t v176 = *(void *)(v152 + 64);
                  if (v176 && (*(unsigned char *)(v176 + 72) & 1) != 0) {
                    goto LABEL_417;
                  }
                }
                else
                {
                  uint64_t v153 = *(void *)(v152 + 72);
                  if (v153)
                  {
                    *(void *)(v152 + 72) = v153 & 0xFFFFFFFFFFFFFFFELL;
                    uint64_t v154 = *(void *)(v136 + 72) | 1;
                    *(void *)(v136 + 72) = v154;
                    unint64_t v155 = *(void *)(v152 + 64);
                    *(void *)(v136 + 56) = v155;
                    if (v155)
                    {
                      unint64_t v156 = *(void *)(v155 + 72) & 1 | v136 & 0xFFFFFFFFFFFFFFFELL;
                      if ((*(void *)(v155 + 72) & 1) == 0) {
                        unint64_t v156 = v136;
                      }
                      *(void *)(v155 + 72) = v156;
                      uint64_t v154 = *(void *)(v136 + 72);
                    }
                    *(void *)(v152 + 72) = v154 & 0xFFFFFFFFFFFFFFFELL | *(void *)(v152 + 72) & 1;
                    if ((v154 & 0xFFFFFFFFFFFFFFFELL) != 0)
                    {
                      uint64_t v157 = *(void *)(v136 + 72);
                      unint64_t v158 = v157 & 0xFFFFFFFFFFFFFFFELL;
                      if (v136 == *(void *)((v157 & 0xFFFFFFFFFFFFFFFELL) + 56))
                      {
                        *(void *)(v158 + 56) = v152;
                        unint64_t v155 = *(void *)(v136 + 56);
                      }
                      else
                      {
                        *(void *)(v158 + 64) = v152;
                      }
                    }
                    else
                    {
                      *unint64_t v135 = v152;
                      uint64_t v157 = *(void *)(v136 + 72);
                      unint64_t v165 = v152;
                    }
                    *(void *)(v152 + 64) = v136;
                    uint64_t v166 = v157 & 1;
                    BOOL v102 = v166 == 0;
                    unint64_t v167 = v166 | v152 & 0xFFFFFFFFFFFFFFFELL;
                    if (!v102) {
                      unint64_t v152 = v167;
                    }
                    *(void *)(v136 + 72) = v152;
                    unint64_t v152 = v155;
                  }
                  uint64_t v168 = *(void *)(v152 + 56);
                  if (v168)
                  {
                    uint64_t v169 = *(void *)(v168 + 72);
                    if (v169) {
                      goto LABEL_347;
                    }
                  }
                  unint64_t v170 = *(void *)(v152 + 64);
                  if (v170)
                  {
                    uint64_t v171 = *(void *)(v170 + 72);
                    if (v171)
                    {
                      if (!v168) {
                        goto LABEL_350;
                      }
                      uint64_t v169 = *(void *)(v168 + 72);
LABEL_347:
                      if ((v169 & 1) == 0)
                      {
                        unint64_t v170 = *(void *)(v152 + 64);
                        if (v170)
                        {
                          uint64_t v171 = *(void *)(v170 + 72);
LABEL_350:
                          *(void *)(v170 + 72) = v171 & 0xFFFFFFFFFFFFFFFELL;
                        }
                        uint64_t v179 = *(void *)(v152 + 72) | 1;
                        *(void *)(v152 + 72) = v179;
                        uint64_t v180 = *(void *)(v170 + 56);
                        *(void *)(v152 + 64) = v180;
                        if (v180)
                        {
                          unint64_t v181 = *(void *)(v180 + 72) & 1 | v152 & 0xFFFFFFFFFFFFFFFELL;
                          if ((*(void *)(v180 + 72) & 1) == 0) {
                            unint64_t v181 = v152;
                          }
                          *(void *)(v180 + 72) = v181;
                          uint64_t v179 = *(void *)(v152 + 72);
                        }
                        *(void *)(v170 + 72) = v179 & 0xFFFFFFFFFFFFFFFELL | *(void *)(v170 + 72) & 1;
                        if ((v179 & 0xFFFFFFFFFFFFFFFELL) != 0)
                        {
                          uint64_t v182 = *(void *)(v152 + 72);
                          unint64_t v183 = v182 & 0xFFFFFFFFFFFFFFFELL;
                          if (v152 == *(void *)((v182 & 0xFFFFFFFFFFFFFFFELL) + 56)) {
                            *(void *)(v183 + 56) = v170;
                          }
                          else {
                            *(void *)(v183 + 64) = v170;
                          }
                        }
                        else
                        {
                          *unint64_t v135 = v170;
                          uint64_t v182 = *(void *)(v152 + 72);
                          unint64_t v165 = v170;
                        }
                        *(void *)(v170 + 56) = v152;
                        uint64_t v189 = v182 & 1;
                        BOOL v102 = v189 == 0;
                        unint64_t v190 = v189 | v170 & 0xFFFFFFFFFFFFFFFELL;
                        if (!v102) {
                          unint64_t v170 = v190;
                        }
                        *(void *)(v152 + 72) = v170;
                        unint64_t v152 = *(void *)(v136 + 56);
                        uint64_t v168 = *(void *)(v152 + 56);
                      }
                      *(void *)(v152 + 72) = *(void *)(v152 + 72) & 0xFFFFFFFFFFFFFFFELL | *(void *)(v136 + 72) & 1;
                      *(void *)(v136 + 72) &= ~1uLL;
                      if (v168) {
                        *(void *)(v168 + 72) &= ~1uLL;
                      }
                      uint64_t v191 = (unint64_t *)(v152 + 64);
                      uint64_t v192 = *(void *)(v152 + 64);
                      *(void *)(v136 + 56) = v192;
                      if (v192)
                      {
LABEL_375:
                        unint64_t v193 = *(void *)(v192 + 72) & 1 | v136 & 0xFFFFFFFFFFFFFFFELL;
                        if ((*(void *)(v192 + 72) & 1) == 0) {
                          unint64_t v193 = v136;
                        }
                        *(void *)(v192 + 72) = v193;
                      }
LABEL_378:
                      uint64_t v194 = *(void *)(v136 + 72);
                      *(void *)(v152 + 72) = v194 & 0xFFFFFFFFFFFFFFFELL | *(void *)(v152 + 72) & 1;
                      if ((v194 & 0xFFFFFFFFFFFFFFFELL) != 0)
                      {
                        uint64_t v195 = *(void *)(v136 + 72);
                        unint64_t v196 = v195 & 0xFFFFFFFFFFFFFFFELL;
                        if (v136 == *(void *)((v195 & 0xFFFFFFFFFFFFFFFELL) + 56)) {
                          *(void *)(v196 + 56) = v152;
                        }
                        else {
                          *(void *)(v196 + 64) = v152;
                        }
                      }
                      else
                      {
                        *unint64_t v135 = v152;
                        uint64_t v195 = *(void *)(v136 + 72);
                        unint64_t v165 = v152;
                      }
                      *uint64_t v191 = v136;
                      uint64_t v197 = v195 & 1;
                      if (v197) {
                        unint64_t v152 = v152 & 0xFFFFFFFFFFFFFFFELL | v197;
                      }
                      *(void *)(v136 + 72) = v152;
                      unint64_t v177 = v165;
LABEL_386:
                      if (!v177) {
                        goto LABEL_389;
                      }
                      uint64_t v178 = *(void *)(v177 + 72);
                      break;
                    }
                  }
                }
                *(void *)(v152 + 72) |= 1uLL;
                unint64_t v139 = *(void *)(v136 + 72) & 0xFFFFFFFFFFFFFFFELL;
              }
              *(void *)(v177 + 72) = v178 & 0xFFFFFFFFFFFFFFFELL;
            }
            goto LABEL_389;
          }
        }
        uint64_t v150 = *(void *)(v136 + 72) & 1 | v139;
        if ((*(void *)(v136 + 72) & 1) == 0) {
          uint64_t v150 = v139;
        }
        *(void *)(v136 + 72) = v150;
        goto LABEL_298;
      }
    }
  }
LABEL_389:
  unsigned int v198 = value[20] & 0xFFFFFFF6;
  *((_DWORD *)value + 40) = v198 | 8;
  if (a3)
  {
    if ((*(_DWORD *)(*v7 + 220) & 2) != 0) {
      *((_DWORD *)value + 40) = v198 | 0x48;
    }
  }
  segment_UnlockEntry((uint64_t **)value, a2);
}

unint64_t MediaSegmentStartTimeList_RB_PREV(unint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1)
  {
    do
    {
      unint64_t result = v1;
      unint64_t v1 = *(void *)(v1 + 16);
    }
    while (v1);
  }
  else
  {
    unint64_t v3 = a1;
    unint64_t result = *(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL;
    if (!result || *(void *)(result + 16) != v3)
    {
      do
      {
        unint64_t result = *(void *)(v3 + 24) & 0xFFFFFFFFFFFFFFFELL;
        if (!result) {
          break;
        }
        BOOL v4 = v3 == *(void *)(result + 8);
        unint64_t v3 = *(void *)(v3 + 24) & 0xFFFFFFFFFFFFFFFELL;
      }
      while (v4);
    }
  }
  return result;
}

uint64_t stream_CommitPersistentStreamInfoIfNecessary(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 128);
  if (!v1) {
    goto LABEL_15;
  }
  if (!*(unsigned char *)(a1 + 122)) {
    return 0;
  }
  if ((*(unsigned char *)(*(void *)a1 + 220) & 2) == 0 || (*(unsigned char *)(a1 + 176) & 2) != 0)
  {
    uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v3) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    uint64_t v5 = *(uint64_t (**)(uint64_t))(v4 + 72);
    if (v5)
    {
      uint64_t result = v5(v1);
      if (!result) {
        *(unsigned char *)(a1 + 122) = 0;
      }
    }
    else
    {
      return 4294954514;
    }
  }
  else
  {
LABEL_15:
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t sc_UnlockPersistentStoreForAnything(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 220) & 2) != 0 && *(void *)(a1 + 280))
  {
    if ((*(unsigned char *)(a1 + 288) & 1) == 0) {
      return 0;
    }
    FigGetUpTimeNanoseconds();
    uint64_t v2 = *(void *)(a1 + 280);
    uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v3) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, void))(v4 + 16);
    if (v5)
    {
      uint64_t v6 = v5(v2, 0xFFFFFFFFLL, 0);
      FigGetUpTimeNanoseconds();
      if (!v6) {
        *(_DWORD *)(a1 + 288) &= 0xFFFFFFFC;
      }
    }
    else
    {
      FigGetUpTimeNanoseconds();
      return 4294954514;
    }
    return v6;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void sc_WriteMetadataToDiskDispatchFunction(uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = (const void *)a1[1];
  uint64_t v5 = (const void *)a1[2];
  uint64_t v4 = (const void *)a1[3];
  CFTypeRef cf = 0;
  int v16 = 0;
  MEMORY[0x19970E290](*(void *)(v3 + 16));
  if (*(unsigned char *)(v3 + 272) || sc_UpgradePersistentStoreForWriting(v3, &v16)) {
    goto LABEL_26;
  }
  Base32EncodedSHA1HashFromCFCFStringRef String = FigCreateBase32EncodedSHA1HashFromCFString();
  if (!Base32EncodedSHA1HashFromCFString)
  {
LABEL_25:
    sc_RestorePersistentStoreLockStatus(v3, v16);
LABEL_26:
    double v10 = 0;
    goto LABEL_13;
  }
  uint64_t v7 = (const void *)Base32EncodedSHA1HashFromCFString;
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
    CFRelease(v7);
    goto LABEL_25;
  }
  double v10 = Mutable;
  CFDictionarySetValue(Mutable, @"DataItemDescriptorCategory", v4);
  CFDictionarySetValue(v10, @"DataItemDescriptorNetworkURL", v2);
  CFDictionarySetValue(v10, @"DataItemDescriptorName", v7);
  CFRelease(v7);
  uint64_t v11 = *(void *)(v3 + 280);
  uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v12) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  CFStringRef v14 = *(uint64_t (**)(uint64_t, const void *, __CFDictionary *, CFTypeRef *))(v13 + 104);
  if (!v14)
  {
    sc_RestorePersistentStoreLockStatus(v3, v16);
    goto LABEL_12;
  }
  int v15 = v14(v11, v5, v10, &cf);
  sc_RestorePersistentStoreLockStatus(v3, v16);
  if (v15) {
LABEL_12:
  }
    sc_SendDiskWriteErrorNotification();
LABEL_13:
  MEMORY[0x19970E2B0](*(void *)(v3 + 16));
  FigDeferCFRelease();
  if (v10) {
    CFRelease(v10);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v5) {
    CFRelease(v5);
  }
  if (v2) {
    CFRelease(v2);
  }
  if (v4) {
    CFRelease(v4);
  }
  free(a1);
}

void sc_ComputeTotalReservedSizeFunc(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 += a2;
}

unint64_t sc_GetBackingForMediaStreamFromLaterSegments(uint64_t a1, uint64_t a2, unint64_t a3, double a4)
{
  if (!*(unsigned char *)(a2 + 121)) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 168);
  if (!v5) {
    return 0;
  }
  unint64_t v8 = 0;
  uint64_t v9 = 0;
  int v10 = *(_DWORD *)(a2 + 56);
  do
  {
    uint64_t v11 = 0;
    double v12 = a4;
    double v13 = a4;
    do
    {
      if (*(_DWORD *)(v5 + 56) == v10)
      {
        uint64_t v14 = *(void *)(v5 + 24);
        if (v14)
        {
          do
          {
            uint64_t v15 = v14;
            uint64_t v14 = *(void *)(v14 + 16);
          }
          while (v14);
          if (*(double *)(v15 + 120) > v13)
          {
            double v12 = v13;
            uint64_t v11 = v5;
            double v13 = *(double *)(v15 + 120);
          }
        }
      }
      uint64_t v5 = *(void *)(v5 + 8);
    }
    while (v5);
    if (!v11) {
      break;
    }
    while (1)
    {
      uint64_t v16 = *(void *)(v11 + 24);
      if (!v16) {
        break;
      }
      do
      {
        uint64_t v17 = v16;
        uint64_t v16 = *(void *)(v16 + 16);
      }
      while (v16);
      if (v17 == v9) {
        return v8;
      }
      if (*(double *)(v17 + 120) < v12)
      {
        uint64_t v9 = v17;
        break;
      }
      uint64_t v18 = *(void *)(a1 + 184);
      segment_EvictEntry((void *)v17, 0, 1);
      v8 += v18 - *(void *)(a1 + 184);
      if (v8 >= a3) {
        return v8;
      }
    }
    uint64_t v5 = *(void *)(a1 + 168);
  }
  while (v5);
  return v8;
}

uint64_t segment_SortByURLAndStartOffset(void *a1, void *a2)
{
  if (!a1) {
    return 0;
  }
  if ((!*a1 || !*(void *)*a1) && (!*a2 || !*(void *)*a2))
  {
    FigSignalErrorAt();
    return 0;
  }
  CacheKeyFromURLCFStringRef String = FigCFStringCreateCacheKeyFromURLString();
  if (!CacheKeyFromURLString) {
    return 0;
  }
  CFStringRef v5 = (const __CFString *)CacheKeyFromURLString;
  CFStringRef v6 = (const __CFString *)FigCFStringCreateCacheKeyFromURLString();
  if (!v6)
  {
    CFRelease(v5);
    return 0;
  }
  CFStringRef v7 = v6;
  CFComparisonResult v8 = CFStringCompare(v5, v6, 0);
  if (v8)
  {
    uint64_t v9 = v8;
  }
  else
  {
    uint64_t v10 = a1[12];
    uint64_t v11 = a2[12];
    BOOL v12 = v10 <= v11;
    if (v10 >= v11) {
      unsigned int v13 = 0;
    }
    else {
      unsigned int v13 = -1;
    }
    if (v12) {
      uint64_t v9 = v13;
    }
    else {
      uint64_t v9 = 1;
    }
  }
  CFRelease(v5);
  CFRelease(v7);
  return v9;
}

uint64_t figMemoryDemandIssueSetupOnce()
{
  uint64_t result = FigSimpleMutexCreate();
  gFigMemoryDemandIssueMuteCGFloat x = result;
  return result;
}

unint64_t stream_GetFirstSegmentOfContiguousRangeContainingSegment(unint64_t a1)
{
  unint64_t v1 = a1;
  if ((*(unsigned char *)(a1 + 160) & 2) == 0)
  {
    for (i = MediaSegmentStartTimeList_RB_PREV(a1); i; unint64_t v1 = v3)
    {
      if ((*(unsigned char *)(i + 160) & 1) == 0) {
        break;
      }
      if ((*(unsigned char *)(v1 + 160) & 2) != 0) {
        break;
      }
      unint64_t v3 = i;
      unint64_t i = MediaSegmentStartTimeList_RB_PREV(i);
    }
  }
  return v1;
}

uint64_t sc_EnsurePersistentStoreAtURL(uint64_t a1, const __CFURL *a2, int a3)
{
  if (!*(void *)(a1 + 280))
  {
    CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      CFComparisonResult v8 = Mutable;
      CFDictionarySetValue(Mutable, @"Playlist", @".m3u8");
      CFDictionarySetValue(v8, @"ContentCryptKey", @".key");
      CFAllocatorRef v9 = (const __CFAllocator *)FigGetAllocatorForMedia();
      uint64_t v10 = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (v10)
      {
        uint64_t v11 = v10;
        CFDictionarySetValue(v10, @"HLSStoreCategoryToExtensionMap", v8);
        CFDictionarySetValue(v11, @"HLSStoreDoNotBlockOnLock", (const void *)*MEMORY[0x1E4F1CFC8]);
        CFRelease(v8);
        BOOL v12 = (const void *)FigGetAllocatorForMedia();
        uint64_t v13 = FigHLSPersistentStoreCreateAtURL(v12, (uint64_t)a2, v11, a3, (void *)(a1 + 280));
        if (v13
          || (int v14 = *(_DWORD *)(a1 + 288), *(_DWORD *)(a1 + 288) = v14 | 1, a3 == 1)
          && (*(_DWORD *)(a1 + 288) = v14 | 3,
              uint64_t v13 = sc_EnsureMasterPlaylistNetworkURLIsSetOnPersistentStore(a1),
              v13))
        {
          uint64_t v15 = v13;
        }
        else
        {
          FigAssetDownloadStorageManagementExcludeURLFromBackup(a2);
          uint64_t v15 = 0;
        }
        CFRelease(v11);
        return v15;
      }
      CFRelease(v8);
    }
  }

  return FigSignalErrorAt();
}

uint64_t sc_RestoreCache(void *a1)
{
  CFTypeRef cf = 0;
  CFArrayRef theArray = 0;
  uint64_t v21 = 0;
  CFTypeRef v22 = 0;
  uint64_t v1 = a1[35];
  if (!v1)
  {
LABEL_38:
    uint64_t v6 = FigSignalErrorAt();
LABEL_39:
    uint64_t v19 = v6;
    goto LABEL_30;
  }
  uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  CFStringRef v5 = *(uint64_t (**)(uint64_t, CFArrayRef *))(v4 + 24);
  if (!v5)
  {
LABEL_29:
    uint64_t v19 = 4294954514;
    goto LABEL_30;
  }
  uint64_t v6 = v5(v1, &theArray);
  if (v6) {
    goto LABEL_39;
  }
  for (CFIndex i = 0; ; ++i)
  {
    CFIndex Count = (CFIndex)theArray;
    if (theArray) {
      CFIndex Count = CFArrayGetCount(theArray);
    }
    if (i >= Count) {
      break;
    }
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
    if (!ValueAtIndex) {
      goto LABEL_38;
    }
    uint64_t v10 = ValueAtIndex;
    uint64_t v11 = a1[35];
    uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v12) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    int v14 = *(uint64_t (**)(uint64_t, const void *, CFTypeRef *))(v13 + 72);
    if (!v14) {
      goto LABEL_29;
    }
    uint64_t v6 = v14(v11, v10, &cf);
    if (v6) {
      goto LABEL_39;
    }
    if (!cf) {
      goto LABEL_38;
    }
    uint64_t v15 = a1[35];
    uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v16) {
      uint64_t v17 = v16;
    }
    else {
      uint64_t v17 = 0;
    }
    uint64_t v18 = *(void (**)(uint64_t, const void *, CFTypeRef *))(v17 + 80);
    if (v18) {
      v18(v15, v10, &v22);
    }
    uint64_t v6 = sc_CreateAndAddStreamEntry(a1, 0xFFFFFFFFLL, (__CFDictionary *)cf, v22, 0, 0, 0, &v21);
    if (v6) {
      goto LABEL_39;
    }
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    if (v22)
    {
      CFRelease(v22);
      CFTypeRef v22 = 0;
    }
  }
  uint64_t v19 = 0;
LABEL_30:
  if (v22) {
    CFRelease(v22);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (theArray) {
    CFRelease(theArray);
  }
  return v19;
}

uint64_t sc_CreateDiskCacheBundle(uint64_t a1, CFURLRef url, CFURLRef *a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (!CFURLGetFileSystemRepresentation(url, 1u, buffer, 1024)) {
    return FigSignalErrorAt();
  }
  __strlcat_chk();
  if (!mkdtemp((char *)buffer))
  {
    __error();
    return FigSignalErrorAt();
  }
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  size_t v6 = strlen((const char *)buffer);
  CFURLRef v7 = CFURLCreateFromFileSystemRepresentation(AllocatorForMedia, buffer, v6, 1u);
  uint64_t v8 = FigDirectoryEnableDirStatsTracking();
  if (v8)
  {
    uint64_t v9 = v8;
    if (v8 != -17916)
    {
      if (!v7) {
        return v9;
      }
LABEL_11:
      CFRelease(v7);
      return v9;
    }
  }
  if (!v7) {
    return FigSignalErrorAt();
  }
  uint64_t v10 = sc_EnsurePersistentStoreAtURL(a1, v7, 1);
  uint64_t v9 = v10;
  if (!a3 || v10) {
    goto LABEL_11;
  }
  *a3 = v7;
  return v9;
}

uint64_t FigTTMLDocumentWriterCreateProfileInserter(uint64_t a1, const void *a2, void *a3)
{
  if (a2 && a3)
  {
    FigTTMLDocumentWriterGetClassID();
    uint64_t v5 = CMDerivedObjectCreate();
    if (!v5)
    {
      FigTTMLDocumentWriterGetCMBaseObject(0);
      uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
      *uint64_t DerivedStorage = CFRetain(a2);
      *a3 = 0;
    }
    return v5;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t figTTMLDocumentWriterProfileInserter_Invalidate()
{
  return 0;
}

void figTTMLDocumentWriterProfileInserter_Finalize(uint64_t a1)
{
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)DerivedStorage) {
    CFRelease(*(CFTypeRef *)DerivedStorage);
  }
  uint64_t v2 = *(const void **)(DerivedStorage + 8);
  if (v2)
  {
    CFRelease(v2);
  }
}

CFStringRef figTTMLDocumentWriterProfileInserter_CopyDebugDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"figTTMLDocumentWriterProfileInserter[%p]", a1);
}

uint64_t figTTMLDocumentWriterProfileInserter_StartElement(uint64_t a1, int a2)
{
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  uint64_t v4 = FigTTMLDocumentWriterElementCreate(*MEMORY[0x1E4F1CF80], a2, *(void *)(DerivedStorage + 16), (uint64_t *)&cf);
  if (v4)
  {
    CFTypeRef v7 = cf;
    if (!cf) {
      return v4;
    }
    goto LABEL_9;
  }
  uint64_t v5 = *(void *)(DerivedStorage + 16);
  if (v5)
  {
    FigTTMLDocumentWriterElementAddChildElement(v5, cf);
  }
  else
  {
    if (cf) {
      CFTypeRef v6 = CFRetain(cf);
    }
    else {
      CFTypeRef v6 = 0;
    }
    *(void *)(DerivedStorage + 8) = v6;
  }
  CFTypeRef v7 = cf;
  *(void *)(DerivedStorage + 16) = cf;
  if (v7) {
LABEL_9:
  }
    CFRelease(v7);
  return v4;
}

uint64_t figTTMLDocumentWriterProfileInserter_EndElement(uint64_t a1)
{
  v19[1] = *MEMORY[0x1E4F143B8];
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = *(void *)(DerivedStorage + 16);
  if (v3 != *(void *)(DerivedStorage + 8))
  {
LABEL_39:
    uint64_t v9 = 0;
    *(void *)(DerivedStorage + 16) = FigTTMLDocumentWriterElementGetParentElement(v3);
    return v9;
  }
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t v4 = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = v4;
  CFTypeRef v17 = 0;
  CFArrayRef theArray = 0;
  CFTypeRef v15 = 0;
  CFTypeRef v16 = 0;
  CFTypeRef v13 = 0;
  CFTypeRef v14 = 0;
  CFTypeRef v12 = 0;
  if (!*(unsigned char *)(v4 + 24) && !*(unsigned char *)(v4 + 25)) {
    goto LABEL_21;
  }
  v19[0] = 0x800000007;
  uint64_t v6 = FigTTMLDocumentWriterElementCopyElementsAtPath(*(CFArrayRef **)(v4 + 8), (uint64_t)v19, 2, &theArray);
  if (v6) {
    goto LABEL_41;
  }
  if (!theArray || !CFArrayGetCount(theArray))
  {
    uint64_t v8 = *MEMORY[0x1E4F1CF80];
    uint64_t v6 = FigTTMLDocumentWriterElementCreate(*MEMORY[0x1E4F1CF80], 8, *(void *)(v5 + 8), (uint64_t *)&v17);
    if (!v6)
    {
      FigTTMLDocumentWriterElementInsertChildNodeBeforeNode(*(void *)(v5 + 8), v17, 0);
      CFTypeRef ValueAtIndex = v17;
      goto LABEL_10;
    }
LABEL_41:
    uint64_t v9 = v6;
    goto LABEL_22;
  }
  CFTypeRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0);
  CFTypeRef v17 = ValueAtIndex;
  CFRetain(ValueAtIndex);
  uint64_t v8 = *MEMORY[0x1E4F1CF80];
LABEL_10:
  uint64_t v6 = FigTTMLDocumentWriterElementCreate(v8, 15, (uint64_t)ValueAtIndex, (uint64_t *)&v16);
  if (v6) {
    goto LABEL_41;
  }
  FigTTMLDocumentWriterElementInsertChildNodeBeforeNode((uint64_t)v17, v16, 0);
  uint64_t v6 = FigTTMLDocumentWriterElementCreate(v8, 17, (uint64_t)v16, (uint64_t *)&v15);
  if (v6) {
    goto LABEL_41;
  }
  FigTTMLDocumentWriterElementInsertChildNodeBeforeNode((uint64_t)v16, v15, 0);
  FigTTMLDocumentWriterElementSetAttribute((uint64_t)v15, @"http://www.w3.org/XML/1998/namespace base", @"http://namespace.itunes.apple.com/itt/ttml-extension/");
  if (*(unsigned char *)(v5 + 24))
  {
    uint64_t v6 = FigTTMLDocumentWriterElementCreate(v8, 19, (uint64_t)v15, (uint64_t *)&v14);
    if (v6) {
      goto LABEL_41;
    }
    uint64_t v6 = FigCaptionDataCreate();
    if (v6) {
      goto LABEL_41;
    }
    FigTTMLDocumentWriterElementAddChildElement((uint64_t)v14, v13);
    FigTTMLDocumentWriterElementInsertChildNodeBeforeNode((uint64_t)v15, v14, 0);
  }
  if (!*(unsigned char *)(v5 + 25))
  {
LABEL_21:
    uint64_t v9 = 0;
    goto LABEL_22;
  }
  uint64_t v6 = FigTTMLDocumentWriterElementCreate(v8, 19, (uint64_t)v15, (uint64_t *)&v12);
  if (v6) {
    goto LABEL_41;
  }
  uint64_t v9 = FigCaptionDataCreate();
  if (!v9)
  {
    FigTTMLDocumentWriterElementAddChildElement((uint64_t)v12, 0);
    FigTTMLDocumentWriterElementInsertChildNodeBeforeNode((uint64_t)v15, v12, 0);
  }
LABEL_22:
  if (v12) {
    CFRelease(v12);
  }
  if (v13) {
    CFRelease(v13);
  }
  if (v14) {
    CFRelease(v14);
  }
  if (v15) {
    CFRelease(v15);
  }
  if (v16) {
    CFRelease(v16);
  }
  if (v17) {
    CFRelease(v17);
  }
  if (theArray) {
    CFRelease(theArray);
  }
  if (!v9)
  {
    uint64_t v10 = FigTTMLDocumentWriterElementWriteTree(*(CFArrayRef **)(DerivedStorage + 8), *(void *)DerivedStorage);
    if (v10) {
      return v10;
    }
    uint64_t v3 = *(void *)(DerivedStorage + 16);
    goto LABEL_39;
  }
  return v9;
}

uint64_t figTTMLDocumentWriterProfileInserter_AddCaptionData(uint64_t a1, const void *a2)
{
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigTTMLDocumentWriterElementAddChildElement(*(void *)(DerivedStorage + 16), a2);
  return 0;
}

uint64_t figTTMLDocumentWriterProfileInserter_SetAttribute(uint64_t a1, const void *a2, const void *a3)
{
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigTTMLDocumentWriterElementSetAttribute(*(void *)(DerivedStorage + 16), a2, a3);
  if (FigCFEqual() && (FigCFEqual() || FigCFEqual())) {
    *(unsigned char *)(DerivedStorage + 25) = 1;
  }
  if (FigCFEqual()) {
    *(unsigned char *)(DerivedStorage + 24) = 1;
  }
  return 0;
}

uint64_t figTTMLDocumentWriterProfileInserter_Flush(uint64_t a1)
{
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (DerivedStorage[2]) {
    return 4294950721;
  }
  uint64_t v3 = *DerivedStorage;

  return FigTTMLDocumentWriterFlush(v3);
}

uint64_t FigSampleBufferCreateFromFigCaptions(uint64_t a1, CFArrayRef theArray, uint64_t a3, void *a4)
{
  void (*v20)(CMTimeRange *__return_ptr, const void *);
  long long v21;
  long long v22;
  uint64_t CMBaseObject;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, __CFString *, uint64_t, const void **);
  uint64_t v27;
  char *v28;
  long long v29;
  char *v30;
  long long v31;
  long long v32;
  CFIndex v33;
  uint64_t v34;
  CMTime v35;
  CMTime lhs;
  CMTime rhs;
  CMTimeRange otherRange;
  CMTimeRange range;
  CMTimeRange v40;
  CFTypeRef v41;
  CFTypeRef v42;
  const void *v43;

  uint64_t v42 = 0;
  unint64_t v43 = 0;
  uint64_t v41 = 0;
  if (!theArray
    || (*(unsigned char *)(a3 + 12) & 1) == 0
    || (*(unsigned char *)(a3 + 36) & 1) == 0
    || *(void *)(a3 + 40)
    || (uint64_t v10 = a3 + 24, (*(void *)(a3 + 24) & 0x8000000000000000) != 0)
    || !a4)
  {
    uint64_t v5 = FigSignalErrorAt();
    uint64_t v6 = 0;
    CFTypeRef v7 = 0;
    CFMutableDictionaryRef Mutable = 0;
    goto LABEL_6;
  }
  unint64_t Count = CFArrayGetCount(theArray);
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], Count, MEMORY[0x1E4F1D510]);
  uint64_t v6 = 0;
  if (Count)
  {
    if (Count > 0xAAAAAAAAAAAAAAALL
      || !(24 * Count)
      || (CFTypeRef v7 = (char *)malloc_type_malloc(24 * Count, 0x5CC9CBA6uLL),
          CFTypeRef v15 = (char *)malloc_type_malloc(24 * Count, 0x5CC9CBA6uLL),
          uint64_t v6 = v15,
          !v7))
    {
      uint64_t v5 = FigSignalErrorAt();
      CFTypeRef v7 = 0;
      goto LABEL_6;
    }
    if (v15)
    {
      unint64_t v34 = 0;
      CFIndex v16 = 0;
      while (1)
      {
        CFTypeRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v16);
        memset(&v40, 0, sizeof(v40));
        uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v19 = v18 ? v18 : 0;
        CFPropertyListRef v20 = *(void (**)(CMTimeRange *__return_ptr, const void *))(v19 + 8);
        if (v20)
        {
          v20(&v40, ValueAtIndex);
        }
        else
        {
          uint64_t v21 = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 16);
          *(_OWORD *)&v40.start.xpc_object_t value = *MEMORY[0x1E4F1FA20];
          *(_OWORD *)&v40.start.CMTimeEpoch epoch = v21;
          *(_OWORD *)&v40.duration.CMTimeScale timescale = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 32);
        }
        if ((v40.start.flags & 1) == 0) {
          break;
        }
        if ((v40.duration.flags & 1) == 0) {
          break;
        }
        if (v40.duration.epoch) {
          break;
        }
        if (v40.duration.value < 0) {
          break;
        }
        CMTimeRange range = v40;
        CFTypeRef v22 = *(_OWORD *)(a3 + 16);
        *(_OWORD *)&otherRange.start.xpc_object_t value = *(_OWORD *)a3;
        *(_OWORD *)&otherRange.start.CMTimeEpoch epoch = v22;
        *(_OWORD *)&otherRange.duration.CMTimeScale timescale = *(_OWORD *)(a3 + 32);
        if (!CMTimeRangeContainsTimeRange(&range, &otherRange)) {
          break;
        }
        if (v43)
        {
          CFRelease(v43);
          unint64_t v43 = 0;
        }
        uint64_t CMBaseObject = FigCaptionGetCMBaseObject(ValueAtIndex);
        double v24 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v24) {
          double v25 = v24;
        }
        else {
          double v25 = 0;
        }
        uint64_t v26 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, const void **))(v25 + 48);
        if (!v26)
        {
          uint64_t v5 = 4294954514;
          goto LABEL_6;
        }
        uint64_t v33 = v16;
        uint64_t v27 = v26(CMBaseObject, @"CaptionData", a1, &v43);
        if (v27) {
          goto LABEL_47;
        }
        CFArrayAppendValue(Mutable, v43);
        uint64_t v28 = &v7[v34];
        *(_OWORD *)&otherRange.start.xpc_object_t value = *(_OWORD *)a3;
        otherRange.start.CMTimeEpoch epoch = *(void *)(a3 + 16);
        CMTime rhs = v40.start;
        CMTimeSubtract(&range.start, &otherRange.start, &rhs);
        uint64_t v29 = *(_OWORD *)&range.start.value;
        *((void *)v28 + 2) = range.start.epoch;
        *(_OWORD *)uint64_t v28 = v29;
        CFStringRef v30 = &v6[v34];
        CMTimeRange range = v40;
        CMTimeRangeGetEnd(&lhs, &range);
        unint64_t v31 = *(_OWORD *)(a3 + 16);
        *(_OWORD *)&range.start.xpc_object_t value = *(_OWORD *)a3;
        *(_OWORD *)&range.start.CMTimeEpoch epoch = v31;
        *(_OWORD *)&range.duration.CMTimeScale timescale = *(_OWORD *)(a3 + 32);
        CMTimeRangeGetEnd(&v35, &range);
        CMTimeSubtract(&range.start, &lhs, &v35);
        uint64_t v32 = *(_OWORD *)&range.start.value;
        *((void *)v30 + 2) = range.start.epoch;
        *(_OWORD *)CFStringRef v30 = v32;
        v34 += 24;
        ++v16;
        if (Count == v33 + 1)
        {
          uint64_t v10 = a3 + 24;
          goto LABEL_42;
        }
      }
    }
    uint64_t v27 = FigSignalErrorAt();
    goto LABEL_47;
  }
  CFTypeRef v7 = 0;
LABEL_42:
  uint64_t v27 = FigCaptionGroupCreate();
  if (v27)
  {
LABEL_47:
    uint64_t v5 = v27;
    goto LABEL_6;
  }
  *(_OWORD *)&v40.start.xpc_object_t value = *(_OWORD *)a3;
  v40.start.CMTimeEpoch epoch = *(void *)(a3 + 16);
  *(_OWORD *)&range.start.xpc_object_t value = *(_OWORD *)v10;
  range.start.CMTimeEpoch epoch = *(void *)(v10 + 16);
  uint64_t v5 = FigSampleBufferCreateForCaptionGroup();
  if (v5)
  {
    if (v41) {
      CFRelease(v41);
    }
  }
  else
  {
    *a4 = v41;
    uint64_t v41 = 0;
  }
LABEL_6:
  if (v42) {
    CFRelease(v42);
  }
  free(v6);
  free(v7);
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v43) {
    CFRelease(v43);
  }
  return v5;
}

uint64_t FigCaptionRendereriTTRegionCreate(void *a1)
{
  if (a1)
  {
    uint64_t v15 = 0;
    MEMORY[0x19970EE10](&FigCaptionRendereriTTRegionGetClassID_sRegisterFigCaptionRendereriTTRegionBaseTypeOnce, RegisterFigCaptionRendereriTTRegionBaseType);
    uint64_t result = CMDerivedObjectCreate();
    if (!result)
    {
      uint64_t v4 = v15;
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      *(void *)(DerivedStorage + 56) = 0;
      *(_DWORD *)(DerivedStorage + 64) = 0;
      uint64_t v14 = 0;
      FigCaptionRendererNodeCreate(&v14);
      uint64_t v6 = v14;
      *(void *)uint64_t DerivedStorage = v14;
      FigCaptionRendererNodeProtocolGetProtocolID();
      Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
      if (ProtocolVTable)
      {
        uint64_t v8 = *(void *)(ProtocolVTable + 16);
        if (v8)
        {
          uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v8 + 216);
          if (v9) {
            v9(v6, 1);
          }
        }
      }
      uint64_t v10 = *(void *)DerivedStorage;
      FigCaptionRendererNodeProtocolGetProtocolID();
      uint64_t v11 = CMBaseObjectGetProtocolVTable();
      if (v11)
      {
        uint64_t v12 = *(void *)(v11 + 16);
        if (v12)
        {
          CFTypeRef v13 = *(void (**)(uint64_t, uint64_t))(v12 + 232);
          if (v13) {
            v13(v10, 1);
          }
        }
      }
      uint64_t result = 0;
      *a1 = v4;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

void FigCaptionRendereriTTRegionFinalize()
{
  CFAllocatorRef v0 = *(const void **)CMBaseObjectGetDerivedStorage();
  if (v0)
  {
    CFRelease(v0);
  }
}

__CFString *FigCaptionRendereriTTRegionCopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"\tFigCaptionRendereriTTRegion: <%p>", a1);
  return Mutable;
}

__CFString *FigCaptionRendereriTTRegion_FigCaptionRendererBaseProtocol_CopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"\tFigCaptionRendereriTTRegion <FigCaptionRendererBaseProtocol> on <%p>", a1);
  return Mutable;
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererBaseProtocol_GetClassName(uint64_t a1, void *a2)
{
  *a2 = "FigCaptionRendereriTTRegion";
  return 0;
}

__CFString *FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_CopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"\tFigCaptionRendereriTTRegion <FigCaptionRendererNodeProtocol> on <%p>", a1);
  return Mutable;
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_SetParentNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_GetParentNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 16);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_GetChildren(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 24);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_HasChildNode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  __s1 = 0;
  FigCaptionRendererBaseProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable || (uint64_t v8 = *(void *)(ProtocolVTable + 16)) == 0)
  {
LABEL_42:
    uint64_t v16 = 4294954508;
LABEL_43:
    FigSignalErrorAt();
    return v16;
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t, char **))(v8 + 8);
  if (!v9)
  {
LABEL_45:
    uint64_t v16 = 4294954514;
    goto LABEL_43;
  }
  uint64_t v10 = v9(a2, &__s1);
  if (v10)
  {
LABEL_48:
    uint64_t v16 = v10;
    goto LABEL_43;
  }
  uint64_t v11 = __s1;
  if (__s1
    && (!strcmp(__s1, "FigCaptionRendererStackLayoutRegion")
     || !strcmp(v11, "FigCaptionRendererCellStackLayoutRegion")
     || !strcmp(v11, "FigCaptionRendereriTTRegion")))
  {
    CFStringRef theString1 = 0;
    FigCaptionRendererRegionProtocolGetProtocolID();
    uint64_t v17 = CMBaseObjectGetProtocolVTable();
    if (v17)
    {
      uint64_t v18 = *(void *)(v17 + 16);
      if (v18)
      {
        uint64_t v19 = *(void (**)(uint64_t, CFStringRef *))(v18 + 16);
        if (v19) {
          v19(a2, &theString1);
        }
      }
    }
    char v20 = (char)theString1;
    if (theString1)
    {
      CFArrayRef theArray = 0;
      FigCaptionRendererNodeProtocolGetProtocolID();
      CFArrayRef v21 = (const __CFArray *)CMBaseObjectGetProtocolVTable();
      if (v21)
      {
        uint64_t v22 = *((void *)v21 + 2);
        if (v22 && (unint64_t v23 = *(void (**)(uint64_t, CFArrayRef *))(v22 + 24)) != 0)
        {
          v23(a1, &theArray);
          CFArrayRef v21 = theArray;
        }
        else
        {
          CFArrayRef v21 = 0;
        }
      }
      if (CFArrayGetCount(v21) >= 1)
      {
        CFIndex v24 = 0;
        do
        {
          CFTypeRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v24);
          uint64_t v35 = 0;
          FigCaptionRendererBaseProtocolGetProtocolID();
          uint64_t v26 = CMBaseObjectGetProtocolVTable();
          if (!v26) {
            goto LABEL_42;
          }
          uint64_t v27 = *(void *)(v26 + 16);
          if (!v27) {
            goto LABEL_42;
          }
          uint64_t v28 = *(uint64_t (**)(const void *, char **))(v27 + 8);
          if (!v28) {
            goto LABEL_45;
          }
          uint64_t v10 = v28(ValueAtIndex, &v35);
          if (v10) {
            goto LABEL_48;
          }
          uint64_t v29 = v35;
          if (v35
            && (!strcmp(v35, "FigCaptionRendererStackLayoutRegion")
             || !strcmp(v29, "FigCaptionRendererCellStackLayoutRegion")
             || !strcmp(__s1, "FigCaptionRendereriTTRegion")))
          {
            CFStringRef theString2 = 0;
            FigCaptionRendererRegionProtocolGetProtocolID();
            uint64_t v30 = CMBaseObjectGetProtocolVTable();
            if (v30)
            {
              uint64_t v31 = *(void *)(v30 + 16);
              if (v31)
              {
                uint64_t v32 = *(void (**)(const void *, CFStringRef *))(v31 + 16);
                if (v32) {
                  v32(ValueAtIndex, &theString2);
                }
              }
            }
            if (CFStringCompare(theString1, theString2, 1uLL) == kCFCompareEqualTo)
            {
              char v20 = 1;
              goto LABEL_41;
            }
          }
        }
        while (CFArrayGetCount(theArray) > ++v24);
      }
      char v20 = 0;
    }
LABEL_41:
    uint64_t v16 = 0;
    *a3 = v20;
    return v16;
  }
  uint64_t v12 = *DerivedStorage;
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t v13 = CMBaseObjectGetProtocolVTable();
  if (!v13) {
    return 4294954508;
  }
  uint64_t v14 = *(void *)(v13 + 16);
  if (!v14) {
    return 4294954508;
  }
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, char *))(v14 + 32);
  if (v15) {
    return v15(v12, a2, a3);
  }
  else {
    return 4294954514;
  }
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_AddChildNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 40);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_RemoveChildNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 48);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_RemovelAllChildrenNodes()
{
  uint64_t v0 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v2 = *(void *)(ProtocolVTable + 16);
  if (!v2) {
    return 4294954508;
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v2 + 56);
  if (!v3) {
    return 4294954514;
  }

  return v3(v0);
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_SetViewport(double a1, double a2, double a3, double a4)
{
  uint64_t v8 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v14 = *(void *)(ProtocolVTable + 16);
  if (!v14) {
    return 4294954508;
  }
  uint64_t v15 = *(uint64_t (**)(uint64_t, __n128, __n128, __n128, __n128))(v14 + 64);
  if (!v15) {
    return 4294954514;
  }
  v10.n128_f64[0] = a1;
  v11.n128_f64[0] = a2;
  v12.n128_f64[0] = a3;
  v13.n128_f64[0] = a4;

  return v15(v8, v10, v11, v12, v13);
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_GetViewport(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 72);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_SetFCRBounds(uint64_t a1, long long *a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  long long v8 = *a2;
  long long v9 = a2[1];
  long long v10 = a2[2];
  long long v11 = a2[3];
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, _OWORD *))(v5 + 80);
  if (!v6) {
    return 4294954514;
  }
  v12[0] = v8;
  v12[1] = v9;
  _OWORD v12[2] = v10;
  v12[3] = v11;
  return v6(v3, v12);
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_GetFCRBounds(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 88);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_SetCGBounds(double a1, double a2, double a3, double a4)
{
  uint64_t v8 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v14 = *(void *)(ProtocolVTable + 16);
  if (!v14) {
    return 4294954508;
  }
  uint64_t v15 = *(uint64_t (**)(uint64_t, __n128, __n128, __n128, __n128))(v14 + 96);
  if (!v15) {
    return 4294954514;
  }
  v10.n128_f64[0] = a1;
  v11.n128_f64[0] = a2;
  v12.n128_f64[0] = a3;
  v13.n128_f64[0] = a4;

  return v15(v8, v10, v11, v12, v13);
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_GetCGBounds(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 104);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_SetCGSize(double a1, double a2)
{
  uint64_t v4 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v8 = *(void *)(ProtocolVTable + 16);
  if (!v8) {
    return 4294954508;
  }
  long long v9 = *(uint64_t (**)(uint64_t, __n128, __n128))(v8 + 112);
  if (!v9) {
    return 4294954514;
  }
  v6.n128_f64[0] = a1;
  v7.n128_f64[0] = a2;

  return v9(v4, v6, v7);
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_GetCGSize(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 120);
  if (!v6) {
    return 4294954508;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_SetCGOrigin(double a1, double a2)
{
  uint64_t v4 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v8 = *(void *)(ProtocolVTable + 16);
  if (!v8) {
    return 4294954508;
  }
  long long v9 = *(uint64_t (**)(uint64_t, __n128, __n128))(v8 + 128);
  if (!v9) {
    return 4294954514;
  }
  v6.n128_f64[0] = a1;
  v7.n128_f64[0] = a2;

  return v9(v4, v6, v7);
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_GetCGOrigin(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 136);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_SetPaddings(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v15 = *(void *)(ProtocolVTable + 16);
  if (!v15) {
    return 4294954508;
  }
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 144);
  if (!v16) {
    return 4294954514;
  }

  return v16(v13, a2, a3, a4, a5, a6, a7);
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_GetInsetCGBounds(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 152);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_PurgeImageCache()
{
  uint64_t v0 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v2 = *(void *)(ProtocolVTable + 16);
  if (!v2) {
    return 4294954508;
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v2 + 160);
  if (!v3) {
    return 4294954514;
  }

  return v3(v0);
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_SetImageCache(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 168);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_GetImageCache(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 176);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_GetImageCacheWidth(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 184);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_GetImageCacheHeight(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 192);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_AllocateImageBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v9 = *(void *)(ProtocolVTable + 16);
  if (!v9) {
    return 4294954508;
  }
  __n128 v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 200);
  if (!v10) {
    return 4294954514;
  }

  return v10(v7, a2, a3, a4);
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_GetImageBuffer(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 208);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_SetNeedRedraw(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 216);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_GetNeedRedraw(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 224);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_SetNeedLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 232);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_GetNeedLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 240);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_HasActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 248);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_SetZOrder(double a1)
{
  uint64_t v2 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, __n128))(v5 + 256);
  if (!v6) {
    return 4294954514;
  }
  v4.n128_f64[0] = a1;

  return v6(v2, v4);
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_GetZOrder(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 264);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_ResetNodeTree()
{
  uint64_t v0 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v2 = *(void *)(ProtocolVTable + 16);
  if (!v2) {
    return 4294954508;
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v2 + 272);
  if (!v3) {
    return 4294954514;
  }

  return v3(v0);
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_Draw(const void *a1, uint64_t a2)
{
  CGSize v4 = *(CGSize *)(MEMORY[0x1E4F1DB20] + 16);
  v20.origiCFIndex n = (CGPoint)*MEMORY[0x1E4F1DB20];
  v20.CGSize size = v4;
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    uint64_t v6 = *(void *)(ProtocolVTable + 16);
    if (v6)
    {
      uint64_t v7 = *(void (**)(const void *, CGRect *))(v6 + 104);
      if (v7) {
        v7(a1, &v20);
      }
    }
  }
  CFDictionaryRef v8 = *(const __CFDictionary **)(a2 + 296);
  if (v8)
  {
    CFURLRef Value = CFDictionaryGetValue(v8, a1);
    double MidX = CGRectGetMidX(v20);
    double MidY = CGRectGetMidY(v20);
    FigCaptionRendererOutputNodeProtocolGetProtocolID();
    uint64_t v12 = CMBaseObjectGetProtocolVTable();
    if (v12)
    {
      uint64_t v13 = *(void *)(v12 + 16);
      if (v13)
      {
        uint64_t v14 = *(void (**)(const void *, double, double))(v13 + 72);
        if (v14) {
          v14(Value, MidX, MidY);
        }
      }
    }
    CGSize size = v20.size;
    FigCaptionRendererOutputNodeProtocolGetProtocolID();
    uint64_t v16 = CMBaseObjectGetProtocolVTable();
    if (v16)
    {
      uint64_t v17 = *(void *)(v16 + 16);
      if (v17)
      {
        uint64_t v18 = *(void (**)(const void *, double, double))(v17 + 88);
        if (v18) {
          v18(Value, size.width, size.height);
        }
      }
    }
  }
  return 0;
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_Layout(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v102 = 0;
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    uint64_t v6 = *(void *)(ProtocolVTable + 16);
    if (v6)
    {
      uint64_t v7 = *(void (**)(uint64_t, uint64_t *))(v6 + 16);
      if (v7)
      {
        v7(a1, &v102);
        if (v102)
        {
          uint64_t v8 = CMBaseObjectGetDerivedStorage();
          int v9 = *(_DWORD *)(v8 + 16);
          double v10 = (double)*(int *)(v8 + 20) * 0.0533;
          double v11 = *(double *)(v8 + 40);
          double v12 = *(double *)(v8 + 24);
          if (*(double *)(v8 + 48) / 100.0 + *(double *)(v8 + 32) / -100.0 * v10 >= 0.0) {
            double v13 = *(double *)(v8 + 48) / 100.0 + *(double *)(v8 + 32) / -100.0 * v10;
          }
          else {
            double v13 = 0.0;
          }
          uint64_t v14 = *(void *)v8;
          FigCaptionRendererNodeProtocolGetProtocolID();
          uint64_t v15 = CMBaseObjectGetProtocolVTable();
          if (v15)
          {
            uint64_t v16 = *(void *)(v15 + 16);
            if (v16)
            {
              uint64_t v17 = *(void (**)(uint64_t, long long *))(v16 + 80);
              if (v17)
              {
                LOBYTE(v104) = 1;
                *(_DWORD *)((char *)&v104 + 1) = 0;
                DWORD1(v104) = 0;
                *((double *)&v104 + 1) = v11 / 100.0 + v12 / -100.0 * ((double)v9 / 100.0);
                LOBYTE(v105.width) = 1;
                *(_DWORD *)((char *)&v105.width + 1) = 0;
                HIDWORD(v105.width) = 0;
                v105.double height = v13;
                LOBYTE(v106) = 1;
                *(_DWORD *)((char *)&v106 + 1) = 0;
                DWORD1(v106) = 0;
                *((double *)&v106 + 1) = (double)v9 / 100.0;
                LOBYTE(v107) = 1;
                *(_DWORD *)((char *)&v107 + 1) = 0;
                DWORD1(v107) = 0;
                *((double *)&v107 + 1) = v10;
                v17(v14, &v104);
              }
            }
          }
          uint64_t v18 = (uint64_t *)CMBaseObjectGetDerivedStorage();
          long long v104 = FCRRectNull;
          CGSize v105 = *(CGSize *)&byte_1949966D8;
          long long v106 = xmmword_1949966E8;
          long long v107 = *(_OWORD *)&byte_1949966F8;
          CGSize v96 = *(CGSize *)(MEMORY[0x1E4F1DB20] + 16);
          CGPoint v97 = (CGPoint)*MEMORY[0x1E4F1DB20];
          v103.origiCFIndex n = (CGPoint)*MEMORY[0x1E4F1DB20];
          v103.CGSize size = v96;
          FigCaptionRendererNodeProtocolGetProtocolID();
          uint64_t v19 = CMBaseObjectGetProtocolVTable();
          if (v19)
          {
            uint64_t v20 = *(void *)(v19 + 16);
            if (v20)
            {
              CFArrayRef v21 = *(void (**)(uint64_t, long long *))(v20 + 88);
              if (v21) {
                v21(a1, &v104);
              }
            }
          }
          FigCaptionRendererNodeProtocolGetProtocolID();
          uint64_t v22 = CMBaseObjectGetProtocolVTable();
          if (v22)
          {
            uint64_t v23 = *(void *)(v22 + 16);
            if (v23)
            {
              CFIndex v24 = *(void (**)(uint64_t, CGRect *))(v23 + 72);
              if (v24) {
                v24(a1, &v103);
              }
            }
          }
          if (*((double *)&v106 + 1) != -1.0)
          {
            double width = v103.size.width;
            CGFloat v77 = v103.origin.x + *((double *)&v104 + 1);
            if ((_BYTE)v104) {
              CGFloat v77 = v103.origin.x + *((double *)&v104 + 1) * v103.size.width;
            }
            double v78 = v103.origin.y + v105.height;
            if (LOBYTE(v105.width)) {
              double v78 = v103.origin.y + v105.height * v103.size.height;
            }
            double height = 1.0;
            if (!(_BYTE)v106) {
              double width = 1.0;
            }
            if ((_BYTE)v107) {
              double height = v103.size.height;
            }
            double v81 = *((double *)&v107 + 1) * height;
            double v80 = *((double *)&v106 + 1) * width;
            CGRect v108 = CGRectIntegral(*(CGRect *)&v77);
            double x = v108.origin.x;
            double y = v108.origin.y;
            double v84 = v108.size.width;
            double v85 = v108.size.height;
            uint64_t v86 = *v18;
            FigCaptionRendererNodeProtocolGetProtocolID();
            uint64_t v87 = CMBaseObjectGetProtocolVTable();
            if (v87)
            {
              uint64_t v88 = *(void *)(v87 + 16);
              if (v88)
              {
                uint64_t v89 = *(void (**)(uint64_t, double, double, double, double))(v88 + 96);
                if (v89) {
                  v89(v86, x, y, v84, v85);
                }
              }
            }
          }
          CFArrayRef theArray = 0;
          FigCaptionRendererNodeProtocolGetProtocolID();
          uint64_t v25 = CMBaseObjectGetProtocolVTable();
          if (v25)
          {
            uint64_t v26 = *(void *)(v25 + 16);
            if (v26)
            {
              uint64_t v27 = *(void (**)(uint64_t, CFArrayRef *))(v26 + 24);
              if (v27) {
                v27(a1, &theArray);
              }
            }
          }
          CFIndex Count = CFArrayGetCount(theArray);
          if (Count >= 1)
          {
            double v29 = *MEMORY[0x1E4F1DAD8];
            double v30 = *(double *)(MEMORY[0x1E4F1DAD8] + 8);
            uint64_t v31 = (const void *)*MEMORY[0x1E4F1F538];
            uint64_t v32 = (const void *)*MEMORY[0x1E4F1F528];
            uint64_t v33 = (const void *)*MEMORY[0x1E4F1F508];
            unint64_t v34 = (const void *)*MEMORY[0x1E4F1F518];
            uint64_t v35 = (const void *)*MEMORY[0x1E4F1F510];
            CFIndex v36 = Count + 1;
            CFTypeRef cf2 = (CFTypeRef)*MEMORY[0x1E4F1F520];
            while (1)
            {
              CFTypeRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v36 - 2);
              __s1 = 0;
              FigCaptionRendererBaseProtocolGetProtocolID();
              uint64_t v38 = CMBaseObjectGetProtocolVTable();
              if (!v38
                || (uint64_t v39 = *(void *)(v38 + 16)) == 0
                || (CFURLRef v40 = *(unsigned int (**)(const void *, char **))(v39 + 8)) == 0
                || v40(ValueAtIndex, &__s1))
              {
LABEL_105:
                FigSignalErrorAt();
                goto LABEL_106;
              }
              if (__s1 && !strcmp(__s1, "FigCaptionRendererCaption"))
              {
                int v99 = 0;
                FigCaptionRendererCaptionProtocolGetProtocolID();
                uint64_t v41 = CMBaseObjectGetProtocolVTable();
                if (!v41) {
                  goto LABEL_105;
                }
                uint64_t v42 = *(void *)(v41 + 16);
                if (!v42) {
                  goto LABEL_105;
                }
                unint64_t v43 = *(unsigned int (**)(const void *, int *))(v42 + 48);
                if (!v43 || v43(ValueAtIndex, &v99)) {
                  goto LABEL_105;
                }
                if (v99 == 3) {
                  break;
                }
              }
LABEL_88:
              if ((unint64_t)--v36 <= 1) {
                goto LABEL_106;
              }
            }
            long long v104 = (__int128)v97;
            CGSize v105 = v96;
            FigCaptionRendererNodeProtocolGetProtocolID();
            uint64_t v44 = CMBaseObjectGetProtocolVTable();
            if (!v44) {
              goto LABEL_105;
            }
            uint64_t v45 = *(void *)(v44 + 16);
            if (!v45) {
              goto LABEL_105;
            }
            uint64_t v46 = *(unsigned int (**)(const void *, long long *))(v45 + 104);
            if (!v46) {
              goto LABEL_105;
            }
            if (v46(ValueAtIndex, &v104)) {
              goto LABEL_105;
            }
            v103.origiCFIndex n = v97;
            v103.CGSize size = v96;
            FigCaptionRendererNodeProtocolGetProtocolID();
            uint64_t v47 = CMBaseObjectGetProtocolVTable();
            if (!v47) {
              goto LABEL_105;
            }
            uint64_t v48 = *(void *)(v47 + 16);
            if (!v48) {
              goto LABEL_105;
            }
            unint64_t v49 = *(unsigned int (**)(const void *, CGRect *))(v48 + 72);
            if (!v49 || v49(ValueAtIndex, &v103)) {
              goto LABEL_105;
            }
            int v50 = *(_DWORD *)(DerivedStorage + 56);
            if (v50)
            {
              double MinX = v29;
              double MinY = v30;
              if (v50 != 2) {
                goto LABEL_65;
              }
              int v53 = *(_DWORD *)(DerivedStorage + 64);
              if (v53 == 1)
              {
                double MinX = CGRectGetMinX(v103);
              }
              else
              {
                CGRect v54 = v103;
                if (v53 == 3) {
                  double MinX = CGRectGetMaxX(v54) - v105.width;
                }
                else {
                  double MinX = CGRectGetMidX(v54) + v105.width * -0.5;
                }
              }
              int v57 = *(_DWORD *)(DerivedStorage + 60);
            }
            else
            {
              int v55 = *(_DWORD *)(DerivedStorage + 60);
              if (v55 == 1)
              {
                double MinX = CGRectGetMinX(v103);
              }
              else
              {
                CGRect v56 = v103;
                if (v55 == 3) {
                  double MinX = CGRectGetMaxX(v56) - v105.width;
                }
                else {
                  double MinX = CGRectGetMidX(v56) + v105.width * -0.5;
                }
              }
              int v57 = *(_DWORD *)(DerivedStorage + 64);
            }
            if (v57 == 1)
            {
              double MinY = CGRectGetMaxY(v103) - v105.height;
            }
            else
            {
              CGRect v58 = v103;
              if (v57 == 3) {
                double MinY = CGRectGetMinY(v58);
              }
              else {
                double MinY = CGRectGetMidY(v58) + v105.height * -0.5;
              }
            }
LABEL_65:
            CFDictionaryRef theDict = 0;
            FigCaptionRendererCaptionProtocolGetProtocolID();
            uint64_t v59 = CMBaseObjectGetProtocolVTable();
            if (v59)
            {
              uint64_t v60 = *(void *)(v59 + 16);
              if (v60)
              {
                uint64_t v61 = *(void (**)(const void *, CFDictionaryRef *))(v60 + 16);
                if (v61) {
                  v61(ValueAtIndex, &theDict);
                }
              }
            }
            if (!theDict)
            {
              uint64_t v62 = v31;
              goto LABEL_80;
            }
            uint64_t v62 = v31;
            CFURLRef Value = CFDictionaryGetValue(theDict, v31);
            if (!Value) {
              goto LABEL_80;
            }
            uint64_t v64 = Value;
            if (CFEqual(Value, v32)) {
              goto LABEL_72;
            }
            if (CFEqual(v64, v33))
            {
              CGFloat v66 = v103.origin.y;
              CGFloat v65 = v103.origin.x;
              CGFloat v68 = v103.size.height;
              CGFloat v67 = v103.size.width;
LABEL_76:
              double MinX = CGRectGetMaxX(*(CGRect *)&v65) - v105.width;
              goto LABEL_80;
            }
            if (CFEqual(v64, v34))
            {
              CGFloat v66 = v103.origin.y;
              CGFloat v65 = v103.origin.x;
              CGFloat v68 = v103.size.height;
              CGFloat v67 = v103.size.width;
            }
            else
            {
              if (CFEqual(v64, v35))
              {
LABEL_72:
                double MinX = CGRectGetMinX(v103);
                goto LABEL_80;
              }
              int v75 = CFEqual(v64, cf2);
              CGFloat v66 = v103.origin.y;
              CGFloat v65 = v103.origin.x;
              CGFloat v68 = v103.size.height;
              CGFloat v67 = v103.size.width;
              if (v75) {
                goto LABEL_76;
              }
            }
            double MinX = CGRectGetMidX(*(CGRect *)&v65) + v105.width * -0.5;
LABEL_80:
            FigCaptionRendererNodeProtocolGetProtocolID();
            uint64_t v69 = CMBaseObjectGetProtocolVTable();
            if (v69)
            {
              uint64_t v70 = *(void *)(v69 + 16);
              if (v70)
              {
                uint64_t v71 = *(void (**)(const void *, double, double))(v70 + 128);
                if (v71) {
                  v71(ValueAtIndex, MinX, MinY);
                }
              }
            }
            FigCaptionRendererNodeProtocolGetProtocolID();
            uint64_t v72 = CMBaseObjectGetProtocolVTable();
            uint64_t v31 = v62;
            if (v72)
            {
              uint64_t v73 = *(void *)(v72 + 16);
              if (v73)
              {
                uint64_t v74 = *(void (**)(const void *, uint64_t))(v73 + 232);
                if (v74) {
                  v74(ValueAtIndex, 1);
                }
              }
            }
            goto LABEL_88;
          }
        }
      }
    }
  }
LABEL_106:
  uint64_t v90 = *(void *)DerivedStorage;
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t v91 = CMBaseObjectGetProtocolVTable();
  if (!v91) {
    return 4294954508;
  }
  uint64_t v92 = *(void *)(v91 + 16);
  if (!v92) {
    return 4294954508;
  }
  uint64_t v93 = *(uint64_t (**)(uint64_t, uint64_t))(v92 + 288);
  if (v93) {
    return v93(v90, a2);
  }
  else {
    return 4294954514;
  }
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_ExecActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 296);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_Compose(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  __int16 v25 = 0;
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    uint64_t v6 = *(void *)(ProtocolVTable + 16);
    if (v6)
    {
      uint64_t v7 = *(void (**)(uint64_t, char *))(v6 + 248);
      if (v7)
      {
        v7(a1, (char *)&v25 + 1);
        if (HIBYTE(v25))
        {
          FigCaptionRendererNodeProtocolGetProtocolID();
          uint64_t v8 = CMBaseObjectGetProtocolVTable();
          if (v8)
          {
            uint64_t v9 = *(void *)(v8 + 16);
            if (v9)
            {
              double v10 = *(void (**)(uint64_t, uint64_t))(v9 + 296);
              if (v10) {
                v10(a1, a2);
              }
            }
          }
        }
      }
    }
  }
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t v11 = CMBaseObjectGetProtocolVTable();
  if (v11)
  {
    uint64_t v12 = *(void *)(v11 + 16);
    if (v12)
    {
      double v13 = *(void (**)(uint64_t, __int16 *))(v12 + 240);
      if (v13)
      {
        v13(a1, &v25);
        if ((_BYTE)v25)
        {
          FigCaptionRendererNodeProtocolGetProtocolID();
          uint64_t v14 = CMBaseObjectGetProtocolVTable();
          if (v14)
          {
            uint64_t v15 = *(void *)(v14 + 16);
            if (v15)
            {
              uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v15 + 288);
              if (v16) {
                v16(a1, a2);
              }
            }
          }
        }
      }
    }
  }
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t v17 = CMBaseObjectGetProtocolVTable();
  if (v17)
  {
    uint64_t v18 = *(void *)(v17 + 16);
    if (v18)
    {
      uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v18 + 280);
      if (v19) {
        v19(a1, a2);
      }
    }
  }
  uint64_t v20 = *DerivedStorage;
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t v21 = CMBaseObjectGetProtocolVTable();
  if (!v21) {
    return 4294954508;
  }
  uint64_t v22 = *(void *)(v21 + 16);
  if (!v22) {
    return 4294954508;
  }
  uint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t))(v22 + 304);
  if (v23) {
    return v23(v20, a2);
  }
  else {
    return 4294954514;
  }
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_OnChildUpdateDisplayRequest(uint64_t a1, long long *a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  long long v8 = *a2;
  long long v9 = a2[1];
  uint64_t v10 = *((void *)a2 + 4);
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, _OWORD *))(v5 + 312);
  if (!v6) {
    return 4294954514;
  }
  v11[0] = v8;
  v11[1] = v9;
  uint64_t v12 = v10;
  return v6(v3, v11);
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_AddAction(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 320);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_RemoveAllActions()
{
  uint64_t v0 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v2 = *(void *)(ProtocolVTable + 16);
  if (!v2) {
    return 4294954508;
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v2 + 328);
  if (!v3) {
    return 4294954514;
  }

  return v3(v0);
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_SetActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 336);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_GetActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 344);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_SelectAt(double a1, double a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v11 = *(void *)(ProtocolVTable + 16);
  if (!v11) {
    return 4294954508;
  }
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, __n128, __n128))(v11 + 352);
  if (!v12) {
    return 4294954514;
  }
  v9.n128_f64[0] = a1;
  v10.n128_f64[0] = a2;

  return v12(v7, a4, v9, v10);
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_UnselectAt(double a1, double a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v11 = *(void *)(ProtocolVTable + 16);
  if (!v11) {
    return 4294954508;
  }
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, __n128, __n128))(v11 + 360);
  if (!v12) {
    return 4294954514;
  }
  v9.n128_f64[0] = a1;
  v10.n128_f64[0] = a2;

  return v12(v7, a4, v9, v10);
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_IsSelected(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 368);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_BeginScene(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 376);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_EndScene(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 384);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

__CFString *FigCaptionRendereriTTRegion_FigCaptionRendererRegionProtocol_CopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"\tFigCaptionRendereriTTRegion <FigCaptionRendererRegionProtocol> on <%p>", a1);
  return Mutable;
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererRegionProtocol_SetRegionID(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CGSize v4 = *(const void **)(DerivedStorage + 8);
  *(void *)(DerivedStorage + 8) = a2;
  if (a2) {
    CFRetain(a2);
  }
  if (v4) {
    CFRelease(v4);
  }
  return 0;
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererRegionProtocol_GetRegionID(uint64_t a1, void *a2)
{
  *a2 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  return 0;
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererRegionProtocol_SetWidth(uint64_t a1, int a2)
{
  *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 16) = a2;
  return 0;
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererRegionProtocol_GetWidth(uint64_t a1, _DWORD *a2)
{
  *a2 = *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 16);
  return 0;
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererRegionProtocol_SetLines(uint64_t a1, int a2)
{
  *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 20) = a2;
  return 0;
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererRegionProtocol_GetLines(uint64_t a1, _DWORD *a2)
{
  *a2 = *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 20);
  return 0;
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererRegionProtocol_SetRegionAnchor(double a1, double a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(double *)(DerivedStorage + 24) = a1;
  *(double *)(DerivedStorage + 32) = a2;
  return 0;
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererRegionProtocol_GetRegionAnchor(uint64_t a1, _OWORD *a2)
{
  *a2 = *(_OWORD *)(CMBaseObjectGetDerivedStorage() + 24);
  return 0;
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererRegionProtocol_SetViewportAnchor(double a1, double a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(double *)(DerivedStorage + 40) = a1;
  *(double *)(DerivedStorage + 48) = a2;
  return 0;
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererRegionProtocol_GetViewportAnchor(uint64_t a1, _OWORD *a2)
{
  *a2 = *(_OWORD *)(CMBaseObjectGetDerivedStorage() + 40);
  return 0;
}

uint64_t RegisterFigCaptionRendereriTTRegionBaseType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

CFTypeRef FigCaptionRendereriTTRegionBaseCopyFormattingDesc()
{
  return CFRetain(@"[FigCaptionRendereriTTRegion]");
}

uint64_t FigPictureTileCursorServiceGetClassID()
{
  return sFigPictureTileCursorServiceClassID;
}

uint64_t RegisterFigPictureTileCursorServiceBaseType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t FigPictureTileCursorServiceGetTypeID()
{
  MEMORY[0x19970EE10](&FigPictureTileCursorServiceGetClassID_sRegisterFigPictureTileCursorServiceBaseTypeOnce, RegisterFigPictureTileCursorServiceBaseType);

  return CMBaseClassGetCFTypeID();
}

uint64_t FigPictureTileCursorGetClassID()
{
  return sFigPictureTileCursorClassID;
}

uint64_t RegisterFigPictureTileCursorBaseType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t FigPictureTileCursorGetTypeID()
{
  MEMORY[0x19970EE10](&FigPictureTileCursorGetClassID_sRegisterFigPictureTileCursorBaseTypeOnce, RegisterFigPictureTileCursorBaseType);

  return CMBaseClassGetCFTypeID();
}

CFStringRef FigPictureTileCursorServiceCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigPictureTileCursorService %p]", a1);
}

CFStringRef FigPictureTileCursorCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigPictureTileCursor %p]", a1);
}

uint64_t FigVideoQueueRemoteCallbackClient_NotificationIsPending(mach_port_t a1, uint64_t a2)
{
  uint64_t v4 = *MEMORY[0x1E4F14068];
  uint64_t v5 = a2;
  *(void *)&msg.msgh_bits = 19;
  msg.msgh_voucher_port = 0;
  msg.msgh_id = 18081;
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = 0;
  if (MEMORY[0x1E4F14B10]) {
    voucher_mach_msg_set(&msg);
  }
  return mach_msg(&msg, 1, 0x28u, 0, 0, 0, 0);
}

uint64_t figvideoqueuecallback_server(_DWORD *a1, uint64_t a2)
{
  int v2 = a1[2];
  *(_DWORD *)a2 = *a1 & 0x1F;
  *(_DWORD *)(a2 + 4) = 36;
  int v3 = a1[5] + 100;
  *(_DWORD *)(a2 + 8) = v2;
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 20) = v3;
  if (a1[5] == 18081)
  {
    if ((*a1 & 0x80000000) != 0 || a1[1] != 40)
    {
      *(_DWORD *)(a2 + 32) = -304;
      *(void *)(a2 + 24) = *MEMORY[0x1E4F14068];
    }
    else
    {
      *(_DWORD *)(a2 + 32) = FigVideoQueueRemoteCallbackServer_NotificationIsPending();
    }
    return 1;
  }
  else
  {
    uint64_t result = 0;
    *(void *)(a2 + 24) = *MEMORY[0x1E4F14068];
    *(_DWORD *)(a2 + 32) = -303;
  }
  return result;
}

uint64_t FigVideoQueueRemoteClient_Create(mach_port_t a1, int a2, uint64_t a3, int a4, char *src, _DWORD *a6, void *a7, void *a8, _DWORD *a9)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  memset(v25, 0, 448);
  long long v23 = 0u;
  long long v24 = 0u;
  memset(&rcv_name, 0, sizeof(rcv_name));
  int v21 = 1;
  int v22 = a2;
  DWORD1(v23) = 1245184;
  *((void *)&v23 + 1) = *MEMORY[0x1E4F14068];
  *(void *)&long long v24 = a3;
  DWORD2(v24) = a4;
  if (MEMORY[0x1E4F149B0]) {
    int v13 = mig_strncpy_zerofill((char *)v25 + 4, src, 512);
  }
  else {
    int v13 = mig_strncpy((char *)v25 + 4, src, 512);
  }
  HIDWORD(v24) = 0;
  LODWORD(v25[0]) = v13;
  mach_msg_size_t v14 = ((v13 + 3) & 0xFFFFFFFC) + 68;
  mach_port_t special_reply_port = mig_get_special_reply_port();
  rcv_name.msgh_remote_port = a1;
  rcv_name.msgh_local_port = special_reply_port;
  rcv_name.msgh_bits = -2147478253;
  *(void *)&rcv_name.msgh_voucher_port = 0x42B800000000;
  if (MEMORY[0x1E4F14B10])
  {
    voucher_mach_msg_set(&rcv_name);
    mach_port_t special_reply_port = rcv_name.msgh_local_port;
  }
  uint64_t v16 = mach_msg(&rcv_name, 3162387, v14, 0x4Cu, special_reply_port, *MEMORY[0x1E4F1EB98], 0);
  uint64_t v17 = v16;
  if ((v16 - 268435458) > 0xE || ((1 << (v16 - 2)) & 0x4003) == 0)
  {
    if (!v16)
    {
      if (rcv_name.msgh_id == 71)
      {
        uint64_t v17 = 4294966988;
      }
      else if (rcv_name.msgh_id == 17180)
      {
        if ((rcv_name.msgh_bits & 0x80000000) == 0)
        {
          if (rcv_name.msgh_size == 36)
          {
            uint64_t v17 = 4294966996;
            if (v23)
            {
              if (rcv_name.msgh_remote_port) {
                uint64_t v17 = 4294966996;
              }
              else {
                uint64_t v17 = v23;
              }
            }
          }
          else
          {
            uint64_t v17 = 4294966996;
          }
          goto LABEL_29;
        }
        uint64_t v17 = 4294966996;
        if (v21 == 1 && rcv_name.msgh_size == 68 && !rcv_name.msgh_remote_port && WORD3(v23) << 16 == 1114112)
        {
          uint64_t v17 = 0;
          *a6 = v22;
          uint64_t v18 = *((void *)&v24 + 1);
          *a7 = v24;
          *a8 = v18;
          *a9 = v25[0];
          return v17;
        }
      }
      else
      {
        uint64_t v17 = 4294966995;
      }
LABEL_29:
      mach_msg_destroy(&rcv_name);
      return v17;
    }
    mig_dealloc_special_reply_port();
  }
  if ((v17 - 268435459) <= 1)
  {
    if ((rcv_name.msgh_bits & 0x1F00) == 0x1100) {
      mach_port_deallocate(*MEMORY[0x1E4F14960], rcv_name.msgh_local_port);
    }
    goto LABEL_29;
  }
  return v17;
}

uint64_t FigVideoQueueRemoteClient_Destroy(int a1)
{
  uint64_t v8 = 0;
  *(_OWORD *)&msg[20] = 0u;
  *(_DWORD *)&msg[4] = 0;
  mach_port_name_t special_reply_port = mig_get_special_reply_port();
  *(_DWORD *)&msg[8] = a1;
  *(_DWORD *)&msg[12] = special_reply_port;
  *(_DWORD *)mach_msg_header_t msg = 5395;
  *(void *)&msg[16] = 0x42B900000000;
  if (MEMORY[0x1E4F14B10])
  {
    voucher_mach_msg_set((mach_msg_header_t *)msg);
    mach_port_name_t special_reply_port = *(_DWORD *)&msg[12];
  }
  uint64_t v3 = mach_msg((mach_msg_header_t *)msg, 3162387, 0x18u, 0x2Cu, special_reply_port, *MEMORY[0x1E4F1EB98], 0);
  uint64_t v4 = v3;
  if ((v3 - 268435458) > 0xE || ((1 << (v3 - 2)) & 0x4003) == 0)
  {
    if (!v3)
    {
      if (*(_DWORD *)&msg[20] == 71)
      {
        uint64_t v4 = 4294966988;
      }
      else if (*(_DWORD *)&msg[20] == 17181)
      {
        uint64_t v4 = 4294966996;
        if ((*(_DWORD *)msg & 0x80000000) == 0 && *(_DWORD *)&msg[4] == 36 && !*(_DWORD *)&msg[8])
        {
          uint64_t v4 = *(unsigned int *)&msg[32];
          if (!*(_DWORD *)&msg[32]) {
            return v4;
          }
        }
      }
      else
      {
        uint64_t v4 = 4294966995;
      }
LABEL_22:
      mach_msg_destroy((mach_msg_header_t *)msg);
      return v4;
    }
    mig_dealloc_special_reply_port();
  }
  if ((v4 - 268435459) <= 1)
  {
    if ((*(_WORD *)msg & 0x1F00) == 0x1100) {
      mach_port_deallocate(*MEMORY[0x1E4F14960], *(mach_port_name_t *)&msg[12]);
    }
    goto LABEL_22;
  }
  return v4;
}

uint64_t FigVideoQueueRemoteClient_GetProperty(mach_port_name_t a1, const char *a2, void *a3, _DWORD *a4)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  long long v43 = 0u;
  long long v44 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v16 = 0u;
  *(_OWORD *)rcv_CFStringRef name = 0u;
  memset(v15, 0, sizeof(v15));
  *((void *)&v15[0] + 1) = *MEMORY[0x1E4F14068];
  if (MEMORY[0x1E4F149B0]) {
    int v7 = mig_strncpy_zerofill((char *)&v15[1] + 8, a2, 512);
  }
  else {
    int v7 = mig_strncpy((char *)&v15[1] + 8, a2, 512);
  }
  LODWORD(v15[1]) = 0;
  DWORD1(v15[1]) = v7;
  mach_msg_size_t v8 = ((v7 + 3) & 0xFFFFFFFC) + 40;
  mach_port_name_t special_reply_port = mig_get_special_reply_port();
  rcv_name[2] = a1;
  rcv_name[3] = special_reply_port;
  rcv_name[0] = 5395;
  *(void *)&v15[0] = 0x42BA00000000;
  if (MEMORY[0x1E4F14B10])
  {
    voucher_mach_msg_set((mach_msg_header_t *)rcv_name);
    mach_port_name_t special_reply_port = rcv_name[3];
  }
  uint64_t v10 = mach_msg((mach_msg_header_t *)rcv_name, 3162387, v8, 0x40u, special_reply_port, *MEMORY[0x1E4F1EB98], 0);
  uint64_t v11 = v10;
  if ((v10 - 268435458) > 0xE || ((1 << (v10 - 2)) & 0x4003) == 0)
  {
    if (!v10)
    {
      if (DWORD1(v15[0]) == 71)
      {
        uint64_t v11 = 4294966988;
      }
      else if (DWORD1(v15[0]) == 17182)
      {
        if ((rcv_name[0] & 0x80000000) == 0)
        {
          if (rcv_name[1] == 36)
          {
            uint64_t v11 = 4294966996;
            if (LODWORD(v15[1]))
            {
              if (rcv_name[2]) {
                uint64_t v11 = 4294966996;
              }
              else {
                uint64_t v11 = LODWORD(v15[1]);
              }
            }
          }
          else
          {
            uint64_t v11 = 4294966996;
          }
          goto LABEL_30;
        }
        uint64_t v11 = 4294966996;
        if (DWORD2(v15[0]) == 1 && rcv_name[1] == 56 && !rcv_name[2] && BYTE7(v15[1]) == 1)
        {
          int v12 = DWORD2(v15[1]);
          if (DWORD2(v15[1]) == DWORD1(v16))
          {
            uint64_t v11 = 0;
            *a3 = *(void *)((char *)v15 + 12);
            *a4 = v12;
            return v11;
          }
        }
      }
      else
      {
        uint64_t v11 = 4294966995;
      }
LABEL_30:
      mach_msg_destroy((mach_msg_header_t *)rcv_name);
      return v11;
    }
    mig_dealloc_special_reply_port();
  }
  if ((v11 - 268435459) <= 1)
  {
    if ((rcv_name[0] & 0x1F00) == 0x1100) {
      mach_port_deallocate(*MEMORY[0x1E4F14960], rcv_name[3]);
    }
    goto LABEL_30;
  }
  return v11;
}

uint64_t FigVideoQueueRemoteClient_SetProperty(mach_port_t a1, const char *a2, uint64_t a3, unsigned int a4)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  long long v44 = 0u;
  long long v45 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  *(_OWORD *)&v17[8] = 0u;
  memset(&rcv_name, 0, sizeof(rcv_name));
  int v14 = 1;
  uint64_t v15 = a3;
  int v16 = 16777472;
  *(void *)long long v17 = a4;
  *(void *)&v17[4] = *MEMORY[0x1E4F14068];
  if (MEMORY[0x1E4F149B0]) {
    int v6 = mig_strncpy_zerofill(&v17[20], a2, 512);
  }
  else {
    int v6 = mig_strncpy(&v17[20], a2, 512);
  }
  *(_DWORD *)&v17[12] = 0;
  *(_DWORD *)&v17[16] = v6;
  uint64_t v7 = (v6 + 3) & 0xFFFFFFFC;
  mach_msg_size_t v8 = v7 + 64;
  *(_DWORD *)&v17[v7 + 20] = a4;
  mach_port_t special_reply_port = mig_get_special_reply_port();
  rcv_name.msgh_remote_port = a1;
  rcv_name.msgh_local_port = special_reply_port;
  rcv_name.msgh_bits = -2147478253;
  *(void *)&rcv_name.msgh_voucher_port = 0x42BB00000000;
  if (MEMORY[0x1E4F14B10])
  {
    voucher_mach_msg_set(&rcv_name);
    mach_port_t special_reply_port = rcv_name.msgh_local_port;
  }
  uint64_t v10 = mach_msg(&rcv_name, 3162387, v8, 0x2Cu, special_reply_port, *MEMORY[0x1E4F1EB98], 0);
  uint64_t v11 = v10;
  if ((v10 - 268435458) <= 0xE && ((1 << (v10 - 2)) & 0x4003) != 0) {
    goto LABEL_17;
  }
  if (v10)
  {
    mig_dealloc_special_reply_port();
LABEL_17:
    if ((v11 - 268435459) > 1) {
      return v11;
    }
    if ((rcv_name.msgh_bits & 0x1F00) == 0x1100) {
      mach_port_deallocate(*MEMORY[0x1E4F14960], rcv_name.msgh_local_port);
    }
LABEL_22:
    mach_msg_destroy(&rcv_name);
    return v11;
  }
  if (rcv_name.msgh_id == 71)
  {
    uint64_t v11 = 4294966988;
    goto LABEL_22;
  }
  if (rcv_name.msgh_id != 17183)
  {
    uint64_t v11 = 4294966995;
    goto LABEL_22;
  }
  uint64_t v11 = 4294966996;
  if ((rcv_name.msgh_bits & 0x80000000) != 0) {
    goto LABEL_22;
  }
  if (rcv_name.msgh_size != 36) {
    goto LABEL_22;
  }
  if (rcv_name.msgh_remote_port) {
    goto LABEL_22;
  }
  uint64_t v11 = HIDWORD(v15);
  if (HIDWORD(v15)) {
    goto LABEL_22;
  }
  return v11;
}

uint64_t FigVideoQueueRemoteClient_Start(int a1, int a2)
{
  *(_OWORD *)&msg[20] = 0u;
  uint64_t v9 = 0;
  *(_OWORD *)&msg[4] = 0u;
  *(void *)&msg[24] = *MEMORY[0x1E4F14068];
  *(_DWORD *)&msg[32] = a2;
  mach_port_name_t special_reply_port = mig_get_special_reply_port();
  *(_DWORD *)&msg[8] = a1;
  *(_DWORD *)&msg[12] = special_reply_port;
  *(_DWORD *)mach_msg_header_t msg = 5395;
  *(void *)&msg[16] = 0x42BC00000000;
  if (MEMORY[0x1E4F14B10])
  {
    voucher_mach_msg_set((mach_msg_header_t *)msg);
    mach_port_name_t special_reply_port = *(_DWORD *)&msg[12];
  }
  uint64_t v4 = mach_msg((mach_msg_header_t *)msg, 3162387, 0x24u, 0x2Cu, special_reply_port, *MEMORY[0x1E4F1EB98], 0);
  uint64_t v5 = v4;
  if ((v4 - 268435458) > 0xE || ((1 << (v4 - 2)) & 0x4003) == 0)
  {
    if (!v4)
    {
      if (*(_DWORD *)&msg[20] == 71)
      {
        uint64_t v5 = 4294966988;
      }
      else if (*(_DWORD *)&msg[20] == 17184)
      {
        uint64_t v5 = 4294966996;
        if ((*(_DWORD *)msg & 0x80000000) == 0 && *(_DWORD *)&msg[4] == 36 && !*(_DWORD *)&msg[8])
        {
          uint64_t v5 = *(unsigned int *)&msg[32];
          if (!*(_DWORD *)&msg[32]) {
            return v5;
          }
        }
      }
      else
      {
        uint64_t v5 = 4294966995;
      }
LABEL_22:
      mach_msg_destroy((mach_msg_header_t *)msg);
      return v5;
    }
    mig_dealloc_special_reply_port();
  }
  if ((v5 - 268435459) <= 1)
  {
    if ((*(_WORD *)msg & 0x1F00) == 0x1100) {
      mach_port_deallocate(*MEMORY[0x1E4F14960], *(mach_port_name_t *)&msg[12]);
    }
    goto LABEL_22;
  }
  return v5;
}

uint64_t FigVideoQueueRemoteClient_EnqueueVideoSampleBuffer(int a1, int a2, uint64_t a3, int a4, int a5, int *a6, double a7, double a8, double a9, double a10, double a11, double a12, double a13, double a14)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)&rcv_name[16] = 0u;
  *(_OWORD *)rcv_CFStringRef name = 0u;
  *(_DWORD *)&rcv_name[20] = 2;
  *(_DWORD *)&rcv_name[24] = a2;
  int v23 = 1245184;
  uint64_t v24 = a3;
  int v25 = 16777472;
  int v26 = a4;
  uint64_t v27 = *MEMORY[0x1E4F14068];
  int v28 = a4;
  double v29 = a7;
  double v30 = a8;
  double v31 = a9;
  double v32 = a10;
  double v33 = a11;
  double v34 = a12;
  double v35 = a13;
  double v36 = a14;
  int v37 = a5;
  mach_port_name_t special_reply_port = mig_get_special_reply_port();
  *(_DWORD *)&mach_port_name_t rcv_name[4] = a1;
  *(_DWORD *)&rcv_name[8] = special_reply_port;
  int v21 = -2147478253;
  *(void *)&rcv_name[12] = 0x42BD00000000;
  if (MEMORY[0x1E4F14B10])
  {
    voucher_mach_msg_set((mach_msg_header_t *)&v21);
    mach_port_name_t special_reply_port = *(_DWORD *)&rcv_name[8];
  }
  uint64_t v17 = mach_msg((mach_msg_header_t *)&v21, 3162387, 0x88u, 0x30u, special_reply_port, *MEMORY[0x1E4F1EB98], 0);
  uint64_t v18 = v17;
  if ((v17 - 268435458) > 0xE || ((1 << (v17 - 2)) & 0x4003) == 0)
  {
    if (!v17)
    {
      if (*(_DWORD *)&rcv_name[16] == 71)
      {
        uint64_t v18 = 4294966988;
      }
      else if (*(_DWORD *)&rcv_name[16] == 17185)
      {
        if ((v21 & 0x80000000) == 0)
        {
          if (*(_DWORD *)rcv_name == 40)
          {
            if (!*(_DWORD *)&rcv_name[4])
            {
              uint64_t v18 = *(unsigned int *)&rcv_name[28];
              if (!*(_DWORD *)&rcv_name[28])
              {
                *a6 = v23;
                return v18;
              }
              goto LABEL_25;
            }
          }
          else if (*(_DWORD *)rcv_name == 36)
          {
            if (*(_DWORD *)&rcv_name[4]) {
              BOOL v19 = 1;
            }
            else {
              BOOL v19 = *(_DWORD *)&rcv_name[28] == 0;
            }
            if (v19) {
              uint64_t v18 = 4294966996;
            }
            else {
              uint64_t v18 = *(unsigned int *)&rcv_name[28];
            }
            goto LABEL_25;
          }
        }
        uint64_t v18 = 4294966996;
      }
      else
      {
        uint64_t v18 = 4294966995;
      }
LABEL_25:
      mach_msg_destroy((mach_msg_header_t *)&v21);
      return v18;
    }
    mig_dealloc_special_reply_port();
  }
  if ((v18 - 268435459) <= 1)
  {
    if ((v21 & 0x1F00) == 0x1100) {
      mach_port_deallocate(*MEMORY[0x1E4F14960], *(mach_port_name_t *)&rcv_name[8]);
    }
    goto LABEL_25;
  }
  return v18;
}

uint64_t FigVideoQueueRemoteClient_EnqueueH264Frame(mach_port_t a1, int a2, int a3, uint64_t a4, int a5, uint64_t a6, int a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, int a17, int *a18)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  int v25 = 2;
  uint64_t v26 = a4;
  int v27 = 16777472;
  int v28 = a5;
  uint64_t v29 = a6;
  int v30 = 16777472;
  int v31 = a7;
  uint64_t v32 = *MEMORY[0x1E4F14068];
  int v33 = a2;
  int v34 = a3;
  int v35 = a5;
  int v36 = a7;
  uint64_t v37 = a8;
  double v38 = a9;
  double v39 = a10;
  double v40 = a11;
  double v41 = a12;
  double v42 = a13;
  double v43 = a14;
  double v44 = a15;
  double v45 = a16;
  int v46 = a17;
  mach_port_t special_reply_port = mig_get_special_reply_port();
  *(void *)&msg.msgh_bits = 2147489043;
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = special_reply_port;
  *(void *)&msg.msgh_voucher_port = 0x42BE00000000;
  if (MEMORY[0x1E4F14B10])
  {
    voucher_mach_msg_set(&msg);
    mach_port_t special_reply_port = msg.msgh_local_port;
  }
  uint64_t v20 = mach_msg(&msg, 3162387, 0xA0u, 0x30u, special_reply_port, *MEMORY[0x1E4F1EB98], 0);
  uint64_t v21 = v20;
  if ((v20 - 268435458) > 0xE || ((1 << (v20 - 2)) & 0x4003) == 0)
  {
    if (!v20)
    {
      if (msg.msgh_id == 71)
      {
        uint64_t v21 = 4294966988;
      }
      else if (msg.msgh_id == 17186)
      {
        if ((msg.msgh_bits & 0x80000000) == 0)
        {
          if (msg.msgh_size == 40)
          {
            if (!msg.msgh_remote_port)
            {
              uint64_t v21 = HIDWORD(v26);
              if (!HIDWORD(v26))
              {
                *a18 = v27;
                return v21;
              }
              goto LABEL_25;
            }
          }
          else if (msg.msgh_size == 36)
          {
            if (msg.msgh_remote_port) {
              BOOL v22 = 1;
            }
            else {
              BOOL v22 = HIDWORD(v26) == 0;
            }
            if (v22) {
              uint64_t v21 = 4294966996;
            }
            else {
              uint64_t v21 = HIDWORD(v26);
            }
            goto LABEL_25;
          }
        }
        uint64_t v21 = 4294966996;
      }
      else
      {
        uint64_t v21 = 4294966995;
      }
LABEL_25:
      mach_msg_destroy(&msg);
      return v21;
    }
    mig_dealloc_special_reply_port();
  }
  if ((v21 - 268435459) <= 1)
  {
    if ((msg.msgh_bits & 0x1F00) == 0x1100) {
      mach_port_deallocate(*MEMORY[0x1E4F14960], msg.msgh_local_port);
    }
    goto LABEL_25;
  }
  return v21;
}

uint64_t FigVideoQueueRemoteClient_EnqueueH264FrameWithTimingInfoBaggage(mach_port_t a1, int a2, int a3, uint64_t a4, int a5, uint64_t a6, int a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, int a17, uint64_t a18, int a19, int *a20)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  int v27 = 3;
  uint64_t v28 = a4;
  int v29 = 16777472;
  int v30 = a5;
  uint64_t v31 = a6;
  int v32 = 16777472;
  int v33 = a7;
  uint64_t v34 = a18;
  int v35 = 16777472;
  int v36 = a19;
  uint64_t v37 = *MEMORY[0x1E4F14068];
  int v38 = a2;
  int v39 = a3;
  int v40 = a5;
  int v41 = a7;
  uint64_t v42 = a8;
  double v43 = a9;
  double v44 = a10;
  double v45 = a11;
  double v46 = a12;
  double v47 = a13;
  double v48 = a14;
  double v49 = a15;
  double v50 = a16;
  int v51 = a17;
  int v52 = a19;
  mach_port_t special_reply_port = mig_get_special_reply_port();
  *(void *)&v26.msgh_bits = 2147489043;
  v26.msgh_remote_port = a1;
  v26.msgh_local_port = special_reply_port;
  *(void *)&v26.msgh_voucher_port = 0x42BF00000000;
  if (MEMORY[0x1E4F14B10])
  {
    voucher_mach_msg_set(&v26);
    mach_port_t special_reply_port = v26.msgh_local_port;
  }
  uint64_t v22 = mach_msg(&v26, 3162387, 0xB4u, 0x30u, special_reply_port, *MEMORY[0x1E4F1EB98], 0);
  uint64_t v23 = v22;
  if ((v22 - 268435458) > 0xE || ((1 << (v22 - 2)) & 0x4003) == 0)
  {
    if (!v22)
    {
      if (v26.msgh_id == 71)
      {
        uint64_t v23 = 4294966988;
      }
      else if (v26.msgh_id == 17187)
      {
        if ((v26.msgh_bits & 0x80000000) == 0)
        {
          if (v26.msgh_size == 40)
          {
            if (!v26.msgh_remote_port)
            {
              uint64_t v23 = HIDWORD(v28);
              if (!HIDWORD(v28))
              {
                *a20 = v29;
                return v23;
              }
              goto LABEL_25;
            }
          }
          else if (v26.msgh_size == 36)
          {
            if (v26.msgh_remote_port) {
              BOOL v24 = 1;
            }
            else {
              BOOL v24 = HIDWORD(v28) == 0;
            }
            if (v24) {
              uint64_t v23 = 4294966996;
            }
            else {
              uint64_t v23 = HIDWORD(v28);
            }
            goto LABEL_25;
          }
        }
        uint64_t v23 = 4294966996;
      }
      else
      {
        uint64_t v23 = 4294966995;
      }
LABEL_25:
      mach_msg_destroy(&v26);
      return v23;
    }
    mig_dealloc_special_reply_port();
  }
  if ((v23 - 268435459) <= 1)
  {
    if ((v26.msgh_bits & 0x1F00) == 0x1100) {
      mach_port_deallocate(*MEMORY[0x1E4F14960], v26.msgh_local_port);
    }
    goto LABEL_25;
  }
  return v23;
}

uint64_t FigVideoQueueRemoteClient_EnqueueFrameWithFormatDescriptionAndTimingInfoBaggage(mach_port_t a1, uint64_t a2, int a3, uint64_t a4, int a5, uint64_t a6, int a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, int a17, int *a18)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  int v25 = 3;
  uint64_t v26 = a2;
  int v27 = 16777472;
  int v28 = a3;
  uint64_t v29 = a4;
  int v30 = 16777472;
  int v31 = a5;
  uint64_t v32 = a8;
  int v33 = 16777472;
  int v34 = a17;
  uint64_t v35 = *MEMORY[0x1E4F14068];
  int v36 = a3;
  int v37 = a5;
  uint64_t v38 = a6;
  double v39 = a9;
  double v40 = a10;
  double v41 = a11;
  double v42 = a12;
  double v43 = a13;
  double v44 = a14;
  double v45 = a15;
  double v46 = a16;
  int v47 = a7;
  int v48 = a17;
  mach_port_t special_reply_port = mig_get_special_reply_port();
  *(void *)&msg.msgh_bits = 2147489043;
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = special_reply_port;
  *(void *)&msg.msgh_voucher_port = 0x42C000000000;
  if (MEMORY[0x1E4F14B10])
  {
    voucher_mach_msg_set(&msg);
    mach_port_t special_reply_port = msg.msgh_local_port;
  }
  uint64_t v20 = mach_msg(&msg, 3162387, 0xACu, 0x30u, special_reply_port, *MEMORY[0x1E4F1EB98], 0);
  uint64_t v21 = v20;
  if ((v20 - 268435458) > 0xE || ((1 << (v20 - 2)) & 0x4003) == 0)
  {
    if (!v20)
    {
      if (msg.msgh_id == 71)
      {
        uint64_t v21 = 4294966988;
      }
      else if (msg.msgh_id == 17188)
      {
        if ((msg.msgh_bits & 0x80000000) == 0)
        {
          if (msg.msgh_size == 40)
          {
            if (!msg.msgh_remote_port)
            {
              uint64_t v21 = HIDWORD(v26);
              if (!HIDWORD(v26))
              {
                *a18 = v27;
                return v21;
              }
              goto LABEL_25;
            }
          }
          else if (msg.msgh_size == 36)
          {
            if (msg.msgh_remote_port) {
              BOOL v22 = 1;
            }
            else {
              BOOL v22 = HIDWORD(v26) == 0;
            }
            if (v22) {
              uint64_t v21 = 4294966996;
            }
            else {
              uint64_t v21 = HIDWORD(v26);
            }
            goto LABEL_25;
          }
        }
        uint64_t v21 = 4294966996;
      }
      else
      {
        uint64_t v21 = 4294966995;
      }
LABEL_25:
      mach_msg_destroy(&msg);
      return v21;
    }
    mig_dealloc_special_reply_port();
  }
  if ((v21 - 268435459) <= 1)
  {
    if ((msg.msgh_bits & 0x1F00) == 0x1100) {
      mach_port_deallocate(*MEMORY[0x1E4F14960], msg.msgh_local_port);
    }
    goto LABEL_25;
  }
  return v21;
}

uint64_t FigVideoQueueRemoteClient_SyncTimebaseToMoment(mach_port_t a1, unsigned int a2, long long *a3, _DWORD *a4)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  long long v6 = a3[5];
  long long v21 = a3[4];
  long long v22 = v6;
  long long v23 = a3[6];
  long long v7 = a3[1];
  long long v17 = *a3;
  long long v18 = v7;
  long long v8 = a3[3];
  long long v19 = a3[2];
  uint64_t v15 = *MEMORY[0x1E4F14068];
  unsigned int v16 = a2;
  uint64_t v24 = *((void *)a3 + 14);
  long long v20 = v8;
  mach_port_t special_reply_port = mig_get_special_reply_port();
  *(void *)&msg.msgh_bits = 5395;
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = special_reply_port;
  *(void *)&msg.msgh_voucher_port = 0x42C100000000;
  if (MEMORY[0x1E4F14B10])
  {
    voucher_mach_msg_set(&msg);
    mach_port_t special_reply_port = msg.msgh_local_port;
  }
  uint64_t v10 = mach_msg(&msg, 3162387, 0x9Cu, 0x30u, special_reply_port, *MEMORY[0x1E4F1EB98], 0);
  uint64_t v11 = v10;
  if ((v10 - 268435458) > 0xE || ((1 << (v10 - 2)) & 0x4003) == 0)
  {
    if (!v10)
    {
      if (msg.msgh_id == 71)
      {
        uint64_t v11 = 4294966988;
      }
      else if (msg.msgh_id == 17189)
      {
        if ((msg.msgh_bits & 0x80000000) == 0)
        {
          if (msg.msgh_size == 40)
          {
            if (!msg.msgh_remote_port)
            {
              uint64_t v11 = v16;
              if (!v16)
              {
                *a4 = v17;
                return v11;
              }
              goto LABEL_25;
            }
          }
          else if (msg.msgh_size == 36)
          {
            if (msg.msgh_remote_port) {
              BOOL v12 = 1;
            }
            else {
              BOOL v12 = v16 == 0;
            }
            if (v12) {
              uint64_t v11 = 4294966996;
            }
            else {
              uint64_t v11 = v16;
            }
            goto LABEL_25;
          }
        }
        uint64_t v11 = 4294966996;
      }
      else
      {
        uint64_t v11 = 4294966995;
      }
LABEL_25:
      mach_msg_destroy(&msg);
      return v11;
    }
    mig_dealloc_special_reply_port();
  }
  if ((v11 - 268435459) <= 1)
  {
    if ((msg.msgh_bits & 0x1F00) == 0x1100) {
      mach_port_deallocate(*MEMORY[0x1E4F14960], msg.msgh_local_port);
    }
    goto LABEL_25;
  }
  return v11;
}

uint64_t FigVideoQueueRemoteClient_Flush(int a1, int a2)
{
  *(_OWORD *)&msg[20] = 0u;
  uint64_t v9 = 0;
  *(_OWORD *)&msg[4] = 0u;
  *(void *)&msg[24] = *MEMORY[0x1E4F14068];
  *(_DWORD *)&msg[32] = a2;
  mach_port_name_t special_reply_port = mig_get_special_reply_port();
  *(_DWORD *)&msg[8] = a1;
  *(_DWORD *)&msg[12] = special_reply_port;
  *(_DWORD *)mach_msg_header_t msg = 5395;
  *(void *)&msg[16] = 0x42C200000000;
  if (MEMORY[0x1E4F14B10])
  {
    voucher_mach_msg_set((mach_msg_header_t *)msg);
    mach_port_name_t special_reply_port = *(_DWORD *)&msg[12];
  }
  uint64_t v4 = mach_msg((mach_msg_header_t *)msg, 3162387, 0x24u, 0x2Cu, special_reply_port, *MEMORY[0x1E4F1EB98], 0);
  uint64_t v5 = v4;
  if ((v4 - 268435458) > 0xE || ((1 << (v4 - 2)) & 0x4003) == 0)
  {
    if (!v4)
    {
      if (*(_DWORD *)&msg[20] == 71)
      {
        uint64_t v5 = 4294966988;
      }
      else if (*(_DWORD *)&msg[20] == 17190)
      {
        uint64_t v5 = 4294966996;
        if ((*(_DWORD *)msg & 0x80000000) == 0 && *(_DWORD *)&msg[4] == 36 && !*(_DWORD *)&msg[8])
        {
          uint64_t v5 = *(unsigned int *)&msg[32];
          if (!*(_DWORD *)&msg[32]) {
            return v5;
          }
        }
      }
      else
      {
        uint64_t v5 = 4294966995;
      }
LABEL_22:
      mach_msg_destroy((mach_msg_header_t *)msg);
      return v5;
    }
    mig_dealloc_special_reply_port();
  }
  if ((v5 - 268435459) <= 1)
  {
    if ((*(_WORD *)msg & 0x1F00) == 0x1100) {
      mach_port_deallocate(*MEMORY[0x1E4F14960], *(mach_port_name_t *)&msg[12]);
    }
    goto LABEL_22;
  }
  return v5;
}

uint64_t FigVideoQueueRemoteClient_IsAboveHighWaterLevel(int a1, _DWORD *a2)
{
  memset(&rcv_name_12[4], 0, 28);
  rcv_CFStringRef name = 0;
  mach_port_name_t special_reply_port = mig_get_special_reply_port();
  int rcv_name_4 = a1;
  mach_port_name_t rcv_name_8 = special_reply_port;
  int v10 = 5395;
  *(void *)rcv_name_12 = 0x42C300000000;
  if (MEMORY[0x1E4F14B10])
  {
    voucher_mach_msg_set((mach_msg_header_t *)&v10);
    mach_port_name_t special_reply_port = rcv_name_8;
  }
  uint64_t v5 = mach_msg((mach_msg_header_t *)&v10, 3162387, 0x18u, 0x30u, special_reply_port, *MEMORY[0x1E4F1EB98], 0);
  uint64_t v6 = v5;
  if ((v5 - 268435458) > 0xE || ((1 << (v5 - 2)) & 0x4003) == 0)
  {
    if (!v5)
    {
      if (*(_DWORD *)&rcv_name_12[4] == 71)
      {
        uint64_t v6 = 4294966988;
      }
      else if (*(_DWORD *)&rcv_name_12[4] == 17191)
      {
        if ((v10 & 0x80000000) == 0)
        {
          if (rcv_name == 40)
          {
            if (!rcv_name_4)
            {
              uint64_t v6 = *(unsigned int *)&rcv_name_12[16];
              if (!*(_DWORD *)&rcv_name_12[16])
              {
                *a2 = *(_DWORD *)&rcv_name_12[20];
                return v6;
              }
              goto LABEL_28;
            }
          }
          else if (rcv_name == 36)
          {
            if (rcv_name_4) {
              BOOL v8 = 1;
            }
            else {
              BOOL v8 = *(_DWORD *)&rcv_name_12[16] == 0;
            }
            if (v8) {
              uint64_t v6 = 4294966996;
            }
            else {
              uint64_t v6 = *(unsigned int *)&rcv_name_12[16];
            }
            goto LABEL_28;
          }
        }
        uint64_t v6 = 4294966996;
      }
      else
      {
        uint64_t v6 = 4294966995;
      }
LABEL_28:
      mach_msg_destroy((mach_msg_header_t *)&v10);
      return v6;
    }
    mig_dealloc_special_reply_port();
  }
  if ((v6 - 268435459) <= 1)
  {
    if ((v10 & 0x1F00) == 0x1100) {
      mach_port_deallocate(*MEMORY[0x1E4F14960], rcv_name_8);
    }
    goto LABEL_28;
  }
  return v6;
}

uint64_t FigVideoQueueRemoteClient_GetNextPendingNotification(int a1, _DWORD *a2, void *a3, char *a4, void *a5, _DWORD *a6)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  memset(v22, 0, 444);
  long long v21 = 0u;
  long long v20 = 0u;
  *(_OWORD *)&msg[20] = 0u;
  *(_DWORD *)&msg[4] = 0;
  mach_port_name_t special_reply_port = mig_get_special_reply_port();
  *(_DWORD *)&msg[8] = a1;
  *(_DWORD *)&msg[12] = special_reply_port;
  *(_DWORD *)mach_msg_header_t msg = 5395;
  *(void *)&msg[16] = 0x42C400000000;
  if (MEMORY[0x1E4F14B10])
  {
    voucher_mach_msg_set((mach_msg_header_t *)msg);
    mach_port_name_t special_reply_port = *(_DWORD *)&msg[12];
  }
  uint64_t v13 = mach_msg((mach_msg_header_t *)msg, 3162387, 0x18u, 0x254u, special_reply_port, *MEMORY[0x1E4F1EB98], 0);
  uint64_t v14 = v13;
  if ((v13 - 268435458) > 0xE || ((1 << (v13 - 2)) & 0x4003) == 0)
  {
    if (!v13)
    {
      if (*(_DWORD *)&msg[20] == 71)
      {
        uint64_t v14 = 4294966988;
      }
      else if (*(_DWORD *)&msg[20] == 17192)
      {
        if ((*(_DWORD *)msg & 0x80000000) == 0)
        {
          if (*(_DWORD *)&msg[4] == 36)
          {
            uint64_t v14 = 4294966996;
            if (*(_DWORD *)&msg[32])
            {
              if (*(_DWORD *)&msg[8]) {
                uint64_t v14 = 4294966996;
              }
              else {
                uint64_t v14 = *(unsigned int *)&msg[32];
              }
            }
          }
          else
          {
            uint64_t v14 = 4294966996;
          }
          goto LABEL_31;
        }
        uint64_t v14 = 4294966996;
        if (*(_DWORD *)&msg[24] == 1
          && *(_DWORD *)&msg[4] >= 0x4Cu
          && *(_DWORD *)&msg[4] <= 0x24Cu
          && !*(_DWORD *)&msg[8]
          && BYTE3(v20) == 1
          && LODWORD(v22[0]) <= 0x200
          && (*(_DWORD *)&msg[4] - 76) >= LODWORD(v22[0]))
        {
          unsigned int v15 = (LODWORD(v22[0]) + 3) & 0xFFFFFFFC;
          if (*(_DWORD *)&msg[4] == v15 + 76)
          {
            unsigned int v16 = &msg[v15];
            if (DWORD1(v20) == *((_DWORD *)v16 + 18))
            {
              long long v17 = v16 - 512;
              *a2 = v21;
              *a3 = *(void *)((char *)&v21 + 4);
              mig_strncpy(a4, (const char *)v22 + 4, 512);
              uint64_t v14 = 0;
              *a5 = *(void *)&msg[28];
              *a6 = *((_DWORD *)v17 + 146);
              return v14;
            }
          }
        }
      }
      else
      {
        uint64_t v14 = 4294966995;
      }
LABEL_31:
      mach_msg_destroy((mach_msg_header_t *)msg);
      return v14;
    }
    mig_dealloc_special_reply_port();
  }
  if ((v14 - 268435459) <= 1)
  {
    if ((*(_WORD *)msg & 0x1F00) == 0x1100) {
      mach_port_deallocate(*MEMORY[0x1E4F14960], *(mach_port_name_t *)&msg[12]);
    }
    goto LABEL_31;
  }
  return v14;
}

uint64_t FigVideoQueueRemoteClient_RequestDecodeForPreroll(mach_port_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  int v13 = 1;
  uint64_t v14 = a2;
  int v15 = 16777472;
  int v16 = a3;
  uint64_t v17 = *MEMORY[0x1E4F14068];
  int v18 = a3;
  mach_port_t special_reply_port = mig_get_special_reply_port();
  *(void *)&v12.msgh_bits = 2147489043;
  v12.msgh_remote_port = a1;
  v12.msgh_local_port = special_reply_port;
  *(void *)&v12.msgh_voucher_port = 0x42C500000000;
  if (MEMORY[0x1E4F14B10])
  {
    voucher_mach_msg_set(&v12);
    mach_port_t special_reply_port = v12.msgh_local_port;
  }
  uint64_t v7 = mach_msg(&v12, 3162387, 0x38u, 0x30u, special_reply_port, *MEMORY[0x1E4F1EB98], 0);
  uint64_t v8 = v7;
  if ((v7 - 268435458) > 0xE || ((1 << (v7 - 2)) & 0x4003) == 0)
  {
    if (!v7)
    {
      if (v12.msgh_id == 71)
      {
        uint64_t v8 = 4294966988;
      }
      else if (v12.msgh_id == 17193)
      {
        if ((v12.msgh_bits & 0x80000000) == 0)
        {
          if (v12.msgh_size == 40)
          {
            if (!v12.msgh_remote_port)
            {
              uint64_t v8 = HIDWORD(v14);
              if (!HIDWORD(v14))
              {
                *a4 = v15;
                return v8;
              }
              goto LABEL_28;
            }
          }
          else if (v12.msgh_size == 36)
          {
            if (v12.msgh_remote_port) {
              BOOL v10 = 1;
            }
            else {
              BOOL v10 = HIDWORD(v14) == 0;
            }
            if (v10) {
              uint64_t v8 = 4294966996;
            }
            else {
              uint64_t v8 = HIDWORD(v14);
            }
            goto LABEL_28;
          }
        }
        uint64_t v8 = 4294966996;
      }
      else
      {
        uint64_t v8 = 4294966995;
      }
LABEL_28:
      mach_msg_destroy(&v12);
      return v8;
    }
    mig_dealloc_special_reply_port();
  }
  if ((v8 - 268435459) <= 1)
  {
    if ((v12.msgh_bits & 0x1F00) == 0x1100) {
      mach_port_deallocate(*MEMORY[0x1E4F14960], v12.msgh_local_port);
    }
    goto LABEL_28;
  }
  return v8;
}

uint64_t FigVideoQueueRemoteClient_CopyCurrentlyDisplayedCVPixelBuffer(int a1, _DWORD *a2, void *a3, _DWORD *a4, _DWORD *a5)
{
  memset(v22, 0, sizeof(v22));
  long long v21 = 0u;
  *(_OWORD *)&rcv_name_12[4] = 0u;
  rcv_CFStringRef name = 0;
  mach_port_name_t special_reply_port = mig_get_special_reply_port();
  int rcv_name_4 = a1;
  mach_port_name_t rcv_name_8 = special_reply_port;
  int v16 = 5395;
  *(void *)rcv_name_12 = 0x42C600000000;
  if (MEMORY[0x1E4F14B10])
  {
    voucher_mach_msg_set((mach_msg_header_t *)&v16);
    mach_port_name_t special_reply_port = rcv_name_8;
  }
  uint64_t v11 = mach_msg((mach_msg_header_t *)&v16, 3162387, 0x18u, 0x50u, special_reply_port, *MEMORY[0x1E4F1EB98], 0);
  uint64_t v12 = v11;
  if ((v11 - 268435458) > 0xE || ((1 << (v11 - 2)) & 0x4003) == 0)
  {
    if (!v11)
    {
      if (*(_DWORD *)&rcv_name_12[4] == 71)
      {
        uint64_t v12 = 4294966988;
      }
      else if (*(_DWORD *)&rcv_name_12[4] == 17194)
      {
        if ((v16 & 0x80000000) == 0)
        {
          if (rcv_name == 36)
          {
            uint64_t v12 = 4294966996;
            if (*(_DWORD *)&rcv_name_12[16])
            {
              if (rcv_name_4) {
                uint64_t v12 = 4294966996;
              }
              else {
                uint64_t v12 = *(unsigned int *)&rcv_name_12[16];
              }
            }
          }
          else
          {
            uint64_t v12 = 4294966996;
          }
          goto LABEL_31;
        }
        uint64_t v12 = 4294966996;
        if (*(_DWORD *)&rcv_name_12[8] == 2
          && rcv_name == 72
          && !rcv_name_4
          && WORD1(v21) << 16 == 1114112
          && HIBYTE(v21) == 1)
        {
          int v14 = v22[0];
          if (v22[0] == v22[3])
          {
            uint64_t v12 = 0;
            *a2 = *(_DWORD *)&rcv_name_12[12];
            *a3 = *(void *)((char *)&v21 + 4);
            *a4 = v14;
            *a5 = v22[4];
            return v12;
          }
        }
      }
      else
      {
        uint64_t v12 = 4294966995;
      }
LABEL_31:
      mach_msg_destroy((mach_msg_header_t *)&v16);
      return v12;
    }
    mig_dealloc_special_reply_port();
  }
  if ((v12 - 268435459) <= 1)
  {
    if ((v16 & 0x1F00) == 0x1100) {
      mach_port_deallocate(*MEMORY[0x1E4F14960], rcv_name_8);
    }
    goto LABEL_31;
  }
  return v12;
}

uint64_t (*figvideoqueue_server_routine(uint64_t a1))()
{
  int v1 = *(_DWORD *)(a1 + 20);
  if ((v1 - 17095) >= 0xFFFFFFF1) {
    return FigVideoQueueRemoteServer_figvideoqueue_subsystem[5 * (v1 - 17080) + 5];
  }
  else {
    return 0;
  }
}

uint64_t _XCreate(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  int v3 = -304;
  if (*(_DWORD *)(result + 24) != 1) {
    goto LABEL_3;
  }
  uint64_t v5 = *(unsigned int *)(result + 4);
  if (v5 < 0x44 || v5 > 0x244) {
    goto LABEL_3;
  }
  if (*(unsigned __int16 *)(result + 38) << 16 != 1114112)
  {
    int v3 = -300;
    goto LABEL_3;
  }
  unsigned int v6 = *(_DWORD *)(result + 64);
  int v3 = -304;
  if (v6 > 0x200 || (int)v5 - 68 < v6) {
    goto LABEL_3;
  }
  if (v5 != ((v6 + 3) & 0xFFFFFFFC) + 68 || (uint64_t result = (uint64_t)memchr((void *)(result + 68), 0, v5 - 68)) == 0)
  {
LABEL_2:
    int v3 = -304;
LABEL_3:
    *(_DWORD *)(a2 + 32) = v3;
    goto LABEL_4;
  }
  uint64_t v7 = ((v5 + 3) & 0x1FFFFFFFCLL) + v4;
  if (*(_DWORD *)v7 || *(_DWORD *)(v7 + 4) <= 0x1Fu)
  {
    int v3 = -309;
    goto LABEL_3;
  }
  *(void *)(a2 + 32) = 0x14000000000000;
  uint64_t v8 = *(unsigned int *)(v4 + 12);
  uint64_t v9 = *(unsigned int *)(v4 + 28);
  uint64_t v10 = *(void *)(v4 + 48);
  int v11 = *(_DWORD *)(v4 + 56);
  long long v12 = *(_OWORD *)(v7 + 36);
  v13[0] = *(_OWORD *)(v7 + 20);
  v13[1] = v12;
  uint64_t result = FigVideoQueueRemoteServer_Create(v8, v9, v10, v11, (const char *)(v4 + 68), (_DWORD *)(a2 + 28), (void *)(a2 + 48), (uint64_t *)(a2 + 56), (_DWORD *)(a2 + 64), v13);
  if (!result)
  {
    *(void *)(a2 + 40) = *MEMORY[0x1E4F14068];
    *(_DWORD *)a2 |= 0x80000000;
    *(_DWORD *)(a2 + 4) = 68;
    *(_DWORD *)(a2 + 24) = 1;
    return result;
  }
  *(_DWORD *)(a2 + 32) = result;
LABEL_4:
  *(void *)(a2 + 24) = *MEMORY[0x1E4F14068];
  return result;
}

_DWORD *_XDestroy(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
  }
  else
  {
    uint64_t result = (_DWORD *)FigVideoQueueRemoteServer_Destroy();
    *(_DWORD *)(a2 + 32) = result;
  }
  *(void *)(a2 + 24) = *MEMORY[0x1E4F14068];
  return result;
}

const char *_XGetProperty(const char *result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0
    || (v3 = result, uint64_t v4 = *((unsigned int *)result + 1), v4 < 0x28)
    || v4 > 0x228
    || ((unsigned int v5 = *((_DWORD *)result + 9), v5 <= 0x200) ? (v6 = (int)v4 - 40 >= v5) : (v6 = 0),
        (v7 = ((v5 + 3) & 0xFFFFFFFC) + 40, v6) ? (BOOL v8 = v4 == v7) : (BOOL v8 = 0),
        !v8 || (uint64_t result = (const char *)memchr((void *)(result + 40), 0, v4 - 40)) == 0))
  {
    *(_DWORD *)(a2 + 32) = -304;
LABEL_12:
    *(void *)(a2 + 24) = *MEMORY[0x1E4F14068];
    return result;
  }
  *(_DWORD *)(a2 + 36) = 16777473;
  uint64_t result = (const char *)FigVideoQueueRemoteServer_GetProperty(*((unsigned int *)v3 + 3), v3 + 40);
  if (result)
  {
    *(_DWORD *)(a2 + 32) = result;
    goto LABEL_12;
  }
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
  *(void *)(a2 + 44) = *MEMORY[0x1E4F14068];
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 56;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

uint64_t _XSetProperty(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  int v3 = -304;
  if (*(_DWORD *)(result + 24) != 1) {
    goto LABEL_3;
  }
  unsigned int v5 = *(_DWORD *)(result + 4);
  if (v5 < 0x40 || v5 > 0x240) {
    goto LABEL_3;
  }
  if (*(unsigned char *)(result + 39) != 1)
  {
LABEL_17:
    int v3 = -300;
    goto LABEL_3;
  }
  unsigned int v6 = *(_DWORD *)(result + 56);
  if (v6 <= 0x200)
  {
    int v3 = -304;
    if (v5 - 64 < v6) {
      goto LABEL_3;
    }
    unsigned int v7 = (v6 + 3) & 0xFFFFFFFC;
    if (v5 != v7 + 64) {
      goto LABEL_3;
    }
    unsigned int v8 = *(_DWORD *)(result + 40);
    if (v8 == *(_DWORD *)(result + v7 + 60))
    {
      uint64_t v9 = 572;
      if (*(unsigned int *)(result + 4) < 0x23CuLL) {
        uint64_t v9 = *(unsigned int *)(result + 4);
      }
      uint64_t result = (uint64_t)memchr((void *)(result + 60), 0, v9 - 60);
      if (result)
      {
        uint64_t result = FigVideoQueueRemoteServer_SetProperty(*(unsigned int *)(v4 + 12), (const char *)(v4 + 60), *(void *)(v4 + 28), v8);
        *(_DWORD *)(a2 + 32) = result;
        goto LABEL_4;
      }
      goto LABEL_2;
    }
    goto LABEL_17;
  }
LABEL_2:
  int v3 = -304;
LABEL_3:
  *(_DWORD *)(a2 + 32) = v3;
LABEL_4:
  *(void *)(a2 + 24) = *MEMORY[0x1E4F14068];
  return result;
}

_DWORD *_XStart(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 36)
  {
    *(_DWORD *)(a2 + 32) = -304;
  }
  else
  {
    uint64_t result = (_DWORD *)FigVideoQueueRemoteServer_Start(result[3], result[8]);
    *(_DWORD *)(a2 + 32) = result;
  }
  *(void *)(a2 + 24) = *MEMORY[0x1E4F14068];
  return result;
}

uint64_t _XEnqueueVideoSampleBuffer(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 2 || *(_DWORD *)(result + 4) != 136)
  {
    int v5 = -304;
LABEL_10:
    *(_DWORD *)(a2 + 32) = v5;
    uint64_t v4 = *MEMORY[0x1E4F14068];
    goto LABEL_11;
  }
  if (*(unsigned __int16 *)(result + 38) << 16 != 1114112
    || *(unsigned char *)(result + 51) != 1
    || (unsigned int v3 = *(_DWORD *)(result + 52), v3 != *(_DWORD *)(result + 64)))
  {
    int v5 = -300;
    goto LABEL_10;
  }
  uint64_t result = FigVideoQueueRemoteServer_EnqueueVideoSampleBuffer(*(unsigned int *)(result + 12), *(_DWORD *)(result + 28), *(void *)(result + 40), v3, *(unsigned int *)(result + 132), (int *)(a2 + 36), *(double *)(result + 68), *(double *)(result + 76), *(double *)(result + 84), *(double *)(result + 92), *(double *)(result + 100), *(double *)(result + 108), *(double *)(result + 116), *(double *)(result + 124));
  *(_DWORD *)(a2 + 32) = result;
  uint64_t v4 = *MEMORY[0x1E4F14068];
  if (!result)
  {
    *(void *)(a2 + 24) = v4;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_11:
  *(void *)(a2 + 24) = v4;
  return result;
}

uint64_t _XEnqueueH264Frame(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 2 || *(_DWORD *)(result + 4) != 160)
  {
    int v6 = -304;
LABEL_11:
    *(_DWORD *)(a2 + 32) = v6;
    uint64_t v5 = *MEMORY[0x1E4F14068];
    goto LABEL_12;
  }
  if (*(unsigned char *)(result + 39) != 1
    || *(unsigned char *)(result + 55) != 1
    || (unsigned int v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 76))
    || (unsigned int v4 = *(_DWORD *)(result + 56), v4 != *(_DWORD *)(result + 80)))
  {
    int v6 = -300;
    goto LABEL_11;
  }
  uint64_t result = FigVideoQueueRemoteServer_EnqueueH264Frame(*(unsigned int *)(result + 12), *(_DWORD *)(result + 68), *(unsigned int *)(result + 72), *(const UInt8 **)(result + 28), v3, *(void **)(result + 44), v4, *(void *)(result + 84), *(double *)(result + 92), *(double *)(result + 100), *(double *)(result + 108), *(double *)(result + 116), *(double *)(result + 124), *(double *)(result + 132), *(double *)(result + 140), *(double *)(result + 148), *(_DWORD *)(result + 156), (int *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  uint64_t v5 = *MEMORY[0x1E4F14068];
  if (!result)
  {
    *(void *)(a2 + 24) = v5;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_12:
  *(void *)(a2 + 24) = v5;
  return result;
}

uint64_t _XEnqueueH264FrameWithTimingInfoBaggage(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 3 || *(_DWORD *)(result + 4) != 180)
  {
    int v7 = -304;
LABEL_13:
    *(_DWORD *)(a2 + 32) = v7;
    uint64_t v6 = *MEMORY[0x1E4F14068];
    goto LABEL_14;
  }
  if (*(unsigned char *)(result + 39) != 1
    || *(unsigned char *)(result + 55) != 1
    || *(unsigned char *)(result + 71) != 1
    || (unsigned int v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 92))
    || (unsigned int v4 = *(_DWORD *)(result + 56), v4 != *(_DWORD *)(result + 96))
    || (unsigned int v5 = *(_DWORD *)(result + 72), v5 != *(_DWORD *)(result + 176)))
  {
    int v7 = -300;
    goto LABEL_13;
  }
  uint64_t result = FigVideoQueueRemoteServer_EnqueueH264FrameWithTimingInfoBaggage(*(unsigned int *)(result + 12), *(_DWORD *)(result + 84), *(_DWORD *)(result + 88), *(const UInt8 **)(result + 28), v3, *(void **)(result + 44), v4, *(void *)(result + 100), *(double *)(result + 108), *(double *)(result + 116), *(double *)(result + 124), *(double *)(result + 132), *(double *)(result + 140), *(double *)(result + 148), *(double *)(result + 156), *(double *)(result + 164), *(_DWORD *)(result + 172), *(void *)(result + 60), v5,
             (int *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  uint64_t v6 = *MEMORY[0x1E4F14068];
  if (!result)
  {
    *(void *)(a2 + 24) = v6;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_14:
  *(void *)(a2 + 24) = v6;
  return result;
}

uint64_t _XEnqueueFrameWithFormatDescriptionAndTimingInfoBaggage(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 3 || *(_DWORD *)(result + 4) != 172)
  {
    int v7 = -304;
LABEL_13:
    *(_DWORD *)(a2 + 32) = v7;
    uint64_t v6 = *MEMORY[0x1E4F14068];
    goto LABEL_14;
  }
  if (*(unsigned char *)(result + 39) != 1
    || *(unsigned char *)(result + 55) != 1
    || *(unsigned char *)(result + 71) != 1
    || (int v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 84))
    || (int v4 = *(_DWORD *)(result + 56), v4 != *(_DWORD *)(result + 88))
    || (unsigned int v5 = *(_DWORD *)(result + 72), v5 != *(_DWORD *)(result + 168)))
  {
    int v7 = -300;
    goto LABEL_13;
  }
  uint64_t result = FigVideoQueueRemoteServer_EnqueueFrameWithFormatDescriptionAndTimingInfoBaggage(*(unsigned int *)(result + 12), *(void **)(result + 28), v3, *(void **)(result + 44), v4, *(void *)(result + 92), *(unsigned int *)(result + 164), *(void *)(result + 60), *(double *)(result + 100), *(double *)(result + 108), *(double *)(result + 116), *(double *)(result + 124), *(double *)(result + 132), *(double *)(result + 140), *(double *)(result + 148), *(double *)(result + 156), v5, (int *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  uint64_t v6 = *MEMORY[0x1E4F14068];
  if (!result)
  {
    *(void *)(a2 + 24) = v6;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_14:
  *(void *)(a2 + 24) = v6;
  return result;
}

uint64_t _XSyncTimebaseToMoment(uint64_t result, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 156)
  {
    *(_DWORD *)(a2 + 32) = -304;
    uint64_t v8 = *MEMORY[0x1E4F14068];
  }
  else
  {
    uint64_t v3 = *(unsigned int *)(result + 12);
    int v4 = *(_DWORD *)(result + 32);
    long long v5 = *(_OWORD *)(result + 116);
    v9[4] = *(_OWORD *)(result + 100);
    v9[5] = v5;
    v9[6] = *(_OWORD *)(result + 132);
    uint64_t v10 = *(void *)(result + 148);
    long long v6 = *(_OWORD *)(result + 52);
    v9[0] = *(_OWORD *)(result + 36);
    v9[1] = v6;
    long long v7 = *(_OWORD *)(result + 84);
    v9[2] = *(_OWORD *)(result + 68);
    v9[3] = v7;
    uint64_t result = FigVideoQueueRemoteServer_SyncTimebaseToMoment(v3, v4, (int *)v9, (int *)(a2 + 36));
    *(_DWORD *)(a2 + 32) = result;
    uint64_t v8 = *MEMORY[0x1E4F14068];
    if (!result)
    {
      *(void *)(a2 + 24) = v8;
      *(_DWORD *)(a2 + 4) = 40;
      return result;
    }
  }
  *(void *)(a2 + 24) = v8;
  return result;
}

_DWORD *_XFlush(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 36)
  {
    *(_DWORD *)(a2 + 32) = -304;
  }
  else
  {
    uint64_t result = (_DWORD *)FigVideoQueueRemoteServer_Flush(result[3], result[8]);
    *(_DWORD *)(a2 + 32) = result;
  }
  *(void *)(a2 + 24) = *MEMORY[0x1E4F14068];
  return result;
}

_DWORD *_XIsAboveHighWaterLevel(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    uint64_t v3 = *MEMORY[0x1E4F14068];
  }
  else
  {
    uint64_t result = (_DWORD *)FigVideoQueueRemoteServer_IsAboveHighWaterLevel(result[3], (_DWORD *)(a2 + 36));
    *(_DWORD *)(a2 + 32) = result;
    uint64_t v3 = *MEMORY[0x1E4F14068];
    if (!result)
    {
      *(void *)(a2 + 24) = v3;
      *(_DWORD *)(a2 + 4) = 40;
      return result;
    }
  }
  *(void *)(a2 + 24) = v3;
  return result;
}

_DWORD *_XGetNextPendingNotification(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    goto LABEL_6;
  }
  unsigned int v6 = 0;
  *(_DWORD *)(a2 + 36) = 16777473;
  uint64_t result = (_DWORD *)FigVideoQueueRemoteServer_GetNextPendingNotification(result[3], a2 + 52, a2 + 56, (char *)(a2 + 72), (vm_address_t *)(a2 + 28), &v6);
  if (result)
  {
    *(_DWORD *)(a2 + 32) = result;
LABEL_6:
    *(void *)(a2 + 24) = *MEMORY[0x1E4F14068];
    return result;
  }
  unsigned int v3 = v6;
  *(_DWORD *)(a2 + 40) = v6;
  uint64_t v4 = *MEMORY[0x1E4F14068];
  *(void *)(a2 + 44) = *MEMORY[0x1E4F14068];
  uint64_t result = (_DWORD *)strlen((const char *)(a2 + 72));
  if (((unint64_t)result + 1) >> 32)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(void *)(a2 + 24) = v4;
  }
  else
  {
    *(_DWORD *)(a2 + 64) = 0;
    *(_DWORD *)(a2 + 68) = result + 1;
    uint64_t v5 = (result + 4) & 0xFFFFFFFC;
    *(_DWORD *)(a2 + v5 + 72) = v3;
    *(_DWORD *)a2 |= 0x80000000;
    *(_DWORD *)(a2 + 4) = v5 + 76;
    *(_DWORD *)(a2 + 24) = 1;
  }
  return result;
}

uint64_t _XRequestDecodeForPreroll(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 56)
  {
    int v5 = -304;
LABEL_9:
    *(_DWORD *)(a2 + 32) = v5;
    uint64_t v4 = *MEMORY[0x1E4F14068];
    goto LABEL_10;
  }
  if (*(unsigned char *)(result + 39) != 1 || (unsigned int v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 52)))
  {
    int v5 = -300;
    goto LABEL_9;
  }
  uint64_t result = FigVideoQueueRemoteServer_RequestDecodeForPreroll(*(unsigned int *)(result + 12), *(void *)(result + 28), v3, (int *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  uint64_t v4 = *MEMORY[0x1E4F14068];
  if (!result)
  {
    *(void *)(a2 + 24) = v4;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_10:
  *(void *)(a2 + 24) = v4;
  return result;
}

_DWORD *_XCopyCurrentlyDisplayedCVPixelBuffer(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    goto LABEL_6;
  }
  *(void *)(a2 + 32) = 0x11000000000000;
  *(_DWORD *)(a2 + 48) = 16777473;
  uint64_t result = (_DWORD *)FigVideoQueueRemoteServer_CopyCurrentlyDisplayedCVPixelBuffer(result[3], (_DWORD *)(a2 + 28), (void *)(a2 + 40), (_DWORD *)(a2 + 64), (int *)(a2 + 68));
  if (result)
  {
    *(_DWORD *)(a2 + 32) = result;
LABEL_6:
    *(void *)(a2 + 24) = *MEMORY[0x1E4F14068];
    return result;
  }
  *(_DWORD *)(a2 + 52) = *(_DWORD *)(a2 + 64);
  *(void *)(a2 + 56) = *MEMORY[0x1E4F14068];
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 72;
  *(_DWORD *)(a2 + 24) = 2;
  return result;
}

uint64_t figvideoqueue_server(_DWORD *a1, uint64_t a2)
{
  int v2 = a1[2];
  *(_DWORD *)a2 = *a1 & 0x1F;
  *(_DWORD *)(a2 + 4) = 36;
  int v3 = a1[5] + 100;
  *(_DWORD *)(a2 + 8) = v2;
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 20) = v3;
  int v4 = a1[5];
  if ((v4 - 17095) >= 0xFFFFFFF1
    && (int v5 = (void (*)(void))FigVideoQueueRemoteServer_figvideoqueue_subsystem[5 * (v4 - 17080) + 5]) != 0)
  {
    v5();
    return 1;
  }
  else
  {
    uint64_t result = 0;
    *(void *)(a2 + 24) = *MEMORY[0x1E4F14068];
    *(_DWORD *)(a2 + 32) = -303;
  }
  return result;
}

void *SYSWrap_GetRDTSC(void *result)
{
  *uint64_t result = ++SYSWrap_GetRDTSC::a;
  return result;
}

uint64_t UnjL(mach_port_t a1, int a2, int *a3, uint64_t a4, int a5, _OWORD *a6, void *a7, _DWORD *a8, _DWORD *a9, _DWORD *a10, _DWORD *a11, _DWORD *a12)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  int v30 = 1;
  uint64_t v31 = a4;
  int v32 = 16777472;
  int v33 = a5;
  uint64_t v34 = *MEMORY[0x1E4F14068];
  int v17 = *a3;
  int v35 = a2;
  int v36 = v17;
  int v37 = a5;
  mach_port_t reply_port = mig_get_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = -2147478253;
  *(void *)&msg.msgh_voucher_port = 0x4B000000000;
  if (MEMORY[0x1E4F14B10])
  {
    voucher_mach_msg_set(&msg);
    mach_port_t reply_port = msg.msgh_local_port;
  }
  uint64_t v19 = mach_msg(&msg, 3, 0x40u, 0xDCu, reply_port, 0, 0);
  uint64_t v20 = v19;
  if ((v19 - 268435458) <= 0xE && ((1 << (v19 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(msg.msgh_local_port);
  }
  else
  {
    if (!v19)
    {
      if (msg.msgh_id == 71)
      {
        uint64_t v20 = 4294966988;
      }
      else if (msg.msgh_id == 1300)
      {
        if ((msg.msgh_bits & 0x80000000) != 0)
        {
          uint64_t v20 = 4294966996;
          if (v30 == 2
            && msg.msgh_size == 212
            && !msg.msgh_remote_port
            && HIBYTE(v32) == 1
            && HIWORD(v35) << 16 == 1114112)
          {
            int v21 = v33;
            if (v33 == v47)
            {
              uint64_t v20 = 0;
              int v22 = v34;
              *a3 = v38;
              long long v23 = v46;
              a6[6] = v45;
              a6[7] = v23;
              long long v24 = v44;
              a6[4] = v43;
              a6[5] = v24;
              long long v25 = v40;
              *a6 = v39;
              a6[1] = v25;
              long long v26 = v42;
              a6[2] = v41;
              a6[3] = v26;
              *a7 = v31;
              *a8 = v21;
              int v27 = v49;
              *a9 = v48;
              *a10 = v27;
              *a11 = v50;
              *a12 = v22;
              return v20;
            }
          }
        }
        else if (msg.msgh_size == 36)
        {
          uint64_t v20 = 4294966996;
          if (HIDWORD(v31))
          {
            if (msg.msgh_remote_port) {
              uint64_t v20 = 4294966996;
            }
            else {
              uint64_t v20 = HIDWORD(v31);
            }
          }
        }
        else
        {
          uint64_t v20 = 4294966996;
        }
      }
      else
      {
        uint64_t v20 = 4294966995;
      }
      mach_msg_destroy(&msg);
      return v20;
    }
    mig_dealloc_reply_port(msg.msgh_local_port);
  }
  return v20;
}

uint64_t aCFD(mach_port_t a1, unsigned int a2, long long *a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  long long v4 = a3[5];
  long long v19 = a3[4];
  long long v20 = v4;
  long long v5 = a3[7];
  long long v21 = a3[6];
  long long v22 = v5;
  long long v6 = a3[1];
  long long v15 = *a3;
  long long v16 = v6;
  long long v7 = a3[3];
  long long v17 = a3[2];
  uint64_t v13 = *MEMORY[0x1E4F14068];
  unsigned int v14 = a2;
  long long v18 = v7;
  mach_port_t reply_port = mig_get_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = 5395;
  *(void *)&msg.msgh_voucher_port = 0x4B100000000;
  if (MEMORY[0x1E4F14B10])
  {
    voucher_mach_msg_set(&msg);
    mach_port_t reply_port = msg.msgh_local_port;
  }
  uint64_t v9 = mach_msg(&msg, 3, 0xA4u, 0x2Cu, reply_port, 0, 0);
  uint64_t v10 = v9;
  if ((v9 - 268435458) <= 0xE && ((1 << (v9 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(msg.msgh_local_port);
    return v10;
  }
  if (v9)
  {
    mig_dealloc_reply_port(msg.msgh_local_port);
    return v10;
  }
  if (msg.msgh_id == 71)
  {
    uint64_t v10 = 4294966988;
LABEL_17:
    mach_msg_destroy(&msg);
    return v10;
  }
  if (msg.msgh_id != 1301)
  {
    uint64_t v10 = 4294966995;
    goto LABEL_17;
  }
  uint64_t v10 = 4294966996;
  if ((msg.msgh_bits & 0x80000000) != 0) {
    goto LABEL_17;
  }
  if (msg.msgh_size != 36) {
    goto LABEL_17;
  }
  if (msg.msgh_remote_port) {
    goto LABEL_17;
  }
  uint64_t v10 = v14;
  if (v14) {
    goto LABEL_17;
  }
  return v10;
}

uint64_t J7JPJQ(mach_port_t a1, int a2, int a3, int a4, _OWORD *a5, uint64_t a6, int a7, _OWORD *a8, void *a9, _DWORD *a10)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  int v18 = 1;
  uint64_t v19 = a6;
  int v20 = 16777472;
  int v21 = a7;
  uint64_t v22 = *MEMORY[0x1E4F14068];
  *(_DWORD *)uint64_t v23 = a2;
  *(_DWORD *)&v23[4] = a3;
  *(_DWORD *)&v23[8] = a4;
  *(_OWORD *)&v23[12] = *a5;
  int v24 = a7;
  mach_port_t reply_port = mig_get_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = -2147478253;
  *(void *)&msg.msgh_voucher_port = 0x4B200000000;
  if (MEMORY[0x1E4F14B10])
  {
    voucher_mach_msg_set(&msg);
    mach_port_t reply_port = msg.msgh_local_port;
  }
  uint64_t v13 = mach_msg(&msg, 3, 0x54u, 0x50u, reply_port, 0, 0);
  uint64_t v14 = v13;
  if ((v13 - 268435458) <= 0xE && ((1 << (v13 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(msg.msgh_local_port);
  }
  else
  {
    if (!v13)
    {
      if (msg.msgh_id == 71)
      {
        uint64_t v14 = 4294966988;
      }
      else if (msg.msgh_id == 1302)
      {
        if ((msg.msgh_bits & 0x80000000) != 0)
        {
          uint64_t v14 = 4294966996;
          if (v18 == 1 && msg.msgh_size == 72 && !msg.msgh_remote_port && HIBYTE(v20) == 1)
          {
            int v15 = v21;
            if (v21 == *(_DWORD *)&v23[16])
            {
              uint64_t v14 = 0;
              *a8 = *(_OWORD *)v23;
              *a9 = v19;
              *a10 = v15;
              return v14;
            }
          }
        }
        else if (msg.msgh_size == 36)
        {
          uint64_t v14 = 4294966996;
          if (HIDWORD(v19))
          {
            if (msg.msgh_remote_port) {
              uint64_t v14 = 4294966996;
            }
            else {
              uint64_t v14 = HIDWORD(v19);
            }
          }
        }
        else
        {
          uint64_t v14 = 4294966996;
        }
      }
      else
      {
        uint64_t v14 = 4294966995;
      }
      mach_msg_destroy(&msg);
      return v14;
    }
    mig_dealloc_reply_port(msg.msgh_local_port);
  }
  return v14;
}

uint64_t QvaDM(mach_port_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5)
{
  mach_port_t reply_port = mig_get_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = 5395;
  *(void *)&msg.msgh_voucher_port = 0x4B300000000;
  if (MEMORY[0x1E4F14B10])
  {
    voucher_mach_msg_set(&msg);
    mach_port_t reply_port = msg.msgh_local_port;
  }
  uint64_t v11 = mach_msg(&msg, 3, 0x18u, 0x3Cu, reply_port, 0, 0);
  uint64_t v12 = v11;
  if ((v11 - 268435458) > 0xE || ((1 << (v11 - 2)) & 0x4003) == 0)
  {
    if (v11)
    {
      mig_dealloc_reply_port(msg.msgh_local_port);
      return v12;
    }
    if (msg.msgh_id == 71)
    {
      uint64_t v12 = 4294966988;
    }
    else if (msg.msgh_id == 1303)
    {
      if ((msg.msgh_bits & 0x80000000) == 0)
      {
        if (msg.msgh_size == 52)
        {
          if (!msg.msgh_remote_port)
          {
            uint64_t v12 = v18;
            if (!v18)
            {
              int v15 = v20;
              *a2 = v19;
              *a3 = v15;
              int v16 = v22;
              *a4 = v21;
              *a5 = v16;
              return v12;
            }
            goto LABEL_23;
          }
        }
        else if (msg.msgh_size == 36)
        {
          if (msg.msgh_remote_port) {
            BOOL v13 = 1;
          }
          else {
            BOOL v13 = v18 == 0;
          }
          if (v13) {
            uint64_t v12 = 4294966996;
          }
          else {
            uint64_t v12 = v18;
          }
          goto LABEL_23;
        }
      }
      uint64_t v12 = 4294966996;
    }
    else
    {
      uint64_t v12 = 4294966995;
    }
LABEL_23:
    mach_msg_destroy(&msg);
    return v12;
  }
  mig_put_reply_port(msg.msgh_local_port);
  return v12;
}

uint64_t NROcmM()
{
  return 16777984;
}

uint64_t lfkien1n12m()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = *(&fp_dh_8e436c87f1a29db6504b879c9bab0741
       + ((119
                                        * ((fp_dh_dcd4af41f7c3772b1517a023ab61b080
                                          - fp_dh_ae01a1e90ab6e6a589202a9925475729) ^ 0x7A)) ^ fp_dh_89eb3d007fef4a65aa1ad4c472656745[fp_dh_cfb5d8e93c270645e74d3aac6adaf665[(119 * ((fp_dh_dcd4af41f7c3772b1517a023ab61b080 - fp_dh_ae01a1e90ab6e6a589202a9925475729) ^ 0x7A))] ^ 0x87])
       + 102);
  uint64_t v1 = (uint64_t)*(&fp_dh_8e436c87f1a29db6504b879c9bab0741
                + (*((unsigned char *)off_1EE5323F8
                                                  + (*((unsigned __int8 *)off_1EE531C90
                                                     + (119
                                                                       * ((fp_dh_dcd4af41f7c3772b1517a023ab61b080 - *v0) ^ 0x7A))) ^ 0xEBu)
                                                  - 12) ^ (119 * ((fp_dh_dcd4af41f7c3772b1517a023ab61b080 - *v0) ^ 0x7A)))
                + 192);
  unint64_t v2 = (unint64_t)&v4[*v0 + *(void *)(v1 - 4)];
  void *v0 = 864038519 * (v2 - 0x5462798188A2A47ALL);
  *(void *)(v1 - 4) = 864038519 * (v2 ^ 0x5462798188A2A47ALL);
  LODWORD(v2) = 544512889 * ((2 * (v5 & 0x28D17ACC) - v5 - 684817102) ^ 0xF1156290);
  v5[0] = v2 + 718843631;
  void v5[2] = v2 ^ 0x1053;
  LOBYTE(v0) = 119 * ((*(_DWORD *)(v1 - 4) - *(_DWORD *)v0) ^ 0x7A);
  (*((void (**)(_DWORD *))*(&fp_dh_8e436c87f1a29db6504b879c9bab0741
                                     + ((119
                                                        * (fp_dh_ae01a1e90ab6e6a589202a9925475729 ^ 0x7A ^ fp_dh_dcd4af41f7c3772b1517a023ab61b080)) ^ fp_dh_89eb3d007fef4a65aa1ad4c472656745[fp_dh_cfb5d8e93c270645e74d3aac6adaf665[(119 * (fp_dh_ae01a1e90ab6e6a589202a9925475729 ^ 0x7A ^ fp_dh_dcd4af41f7c3772b1517a023ab61b080))] ^ 0xEB])
                                     - 38)
   + (*((unsigned char *)off_1EE532B20
                                     + (*((unsigned __int8 *)off_1EE532C50 + v0 - 12) ^ 0x8Du)
                                     - 4) ^ v0)
   + 7575))(v5);
  return (v5[1] - 1293064305);
}

uint64_t Hz73b(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = (uint64_t *)*(&fp_dh_8e436c87f1a29db6504b879c9bab0741
                  + ((119
                                                   * ((fp_dh_dcd4af41f7c3772b1517a023ab61b080
                                                     + fp_dh_d229883e9d95b0412e07d25a6e475444) ^ 0x7A)) ^ fp_dh_df8a9db8e289dde5fca339fcc4a7e211[fp_dh_a0340c06c288d8bf397b9372cd449475[(119 * ((fp_dh_dcd4af41f7c3772b1517a023ab61b080 + fp_dh_d229883e9d95b0412e07d25a6e475444) ^ 0x7A))] ^ 0xC5])
                  + 315);
  uint64_t v3 = (uint64_t)*(&fp_dh_8e436c87f1a29db6504b879c9bab0741
                + ((119 * ((fp_dh_dcd4af41f7c3772b1517a023ab61b080 + *v2) ^ 0x7A)) ^ fp_dh_2f9571e0f6e556b753d64ab1888b8956[fp_dh_9d054b4a1a3917d1c42d3961dc71930b[(119 * ((fp_dh_dcd4af41f7c3772b1517a023ab61b080 + *v2) ^ 0x7A))] ^ 0x62])
                + 63);
  uint64_t v4 = 864038519 * (((*(void *)(v3 - 4) ^ *v2) - (void)&v7) ^ 0x5462798188A2A47ALL);
  *unint64_t v2 = v4;
  *(void *)(v3 - 4) = v4;
  LODWORD(v9) = (544512889 * ((2 * (&v8 & 0x31A881A8) - &v8 + 1314356816) ^ 0x686C99F2)) ^ 0xF98;
  uint64_t v8 = a1;
  uint64_t v5 = (uint64_t)*(&fp_dh_8e436c87f1a29db6504b879c9bab0741
                + ((119
                                   * (fp_dh_d229883e9d95b0412e07d25a6e475444 ^ 0x7A ^ fp_dh_dcd4af41f7c3772b1517a023ab61b080)) ^ fp_dh_2f9571e0f6e556b753d64ab1888b8956[fp_dh_9d054b4a1a3917d1c42d3961dc71930b[(119 * (fp_dh_d229883e9d95b0412e07d25a6e475444 ^ 0x7A ^ fp_dh_dcd4af41f7c3772b1517a023ab61b080))] ^ 0x62])
                - 167);
  (*(void (**)(uint64_t *))(v5
                                    + 8
                                    * ((*((unsigned char *)off_1EE531F90
                                                                       + (*((unsigned __int8 *)off_1EE532AE8
                                                                          + (119
                                                                                            * (*(_DWORD *)v2 ^ 0x7A ^ *(_DWORD *)(v3 - 4)))) ^ 0x62u)
                                                                       - 12) ^ (119
                                                                              * (*(_DWORD *)v2 ^ 0x7A ^ *(_DWORD *)(v3 - 4))))
                                     + 7597)))(&v8);
  uint64_t v9 = a1;
  LODWORD(v8) = 1779849041 * (&v8 ^ 0x35D9147B) + 6145;
  (*(void (**)(uint64_t *))(v5
                                    + 8
                                    * ((*((unsigned char *)off_1EE5323F8
                                                                       + (*((unsigned __int8 *)off_1EE531C90
                                                                          + (119
                                                                                            * ((*(_DWORD *)(v3 - 4)
                                                                                              + *(_DWORD *)v2) ^ 0x7A))) ^ 0x52u)
                                                                       - 12) ^ (119
                                                                              * ((*(_DWORD *)(v3 - 4) + *(_DWORD *)v2) ^ 0x7A)))
                                     + 7581)))(&v8);
  return (HIDWORD(v8) - 1293064305);
}

uint64_t fp_dh_43f22f2d23bcf49c0effae8f1eddb017(unsigned int a1)
{
  return *((unsigned __int8 *)off_1EE5323F8 + (*((unsigned __int8 *)off_1EE531C90 + a1) ^ 0x87u) - 12) ^ a1;
}

uint64_t fp_dh_9f2b793da3a95510d8f6ccc13141aba6(unsigned int a1)
{
  return *((unsigned __int8 *)off_1EE531B88
         + (*((unsigned __int8 *)off_1EE531A70 + a1 - 12) ^ 0x33u)
         - 12) ^ a1;
}

uint64_t fp_dh_8fae55609dd9ad7cd3e729c763a8450a(unsigned int a1)
{
  return *((unsigned __int8 *)off_1EE531890 + (*((unsigned __int8 *)off_1EE531988 + a1 - 8) ^ 0xD3u)
                                            - 8) ^ a1;
}

uint64_t fp_dh_3388e9ac421ef3adeec4067815dbbb98(unsigned int a1)
{
  return *((unsigned __int8 *)off_1EE532518 + (*((unsigned __int8 *)off_1EE532228 + a1 - 4) ^ 0x60u)
                                            - 4) ^ a1;
}

uint64_t fp_dh_24ae7c05aee96ff07aee22fb5fdb6fa6(unsigned int a1)
{
  return *((unsigned __int8 *)off_1EE532B20
         + (*((unsigned __int8 *)off_1EE532C50 + a1 - 12) ^ 0xE6u)
         - 4) ^ a1;
}

uint64_t fp_dh_68a98c44160719094c017b94943af7e4(unsigned int a1)
{
  return *((unsigned __int8 *)off_1EE5323F8 + (*((unsigned __int8 *)off_1EE531C90 + a1) ^ 0x52u) - 12) ^ a1;
}

uint64_t fp_dh_cadb05fa5d6d8a29cd1f85c44efb1772(unsigned int a1)
{
  return *((unsigned __int8 *)off_1EE531890 + (*((unsigned __int8 *)off_1EE531988 + a1 - 8) ^ 0x7Au)
                                            - 8) ^ a1;
}

uint64_t fp_dh_58731d8817b51bb120cb662933ad19cd(unsigned int a1)
{
  return *((unsigned __int8 *)off_1EE531F90 + (*((unsigned __int8 *)off_1EE532AE8 + a1) ^ 0x90u) - 12) ^ a1;
}

uint64_t fp_dh_240b39a9b1e0108331f70af70a8b3f19(unsigned int a1)
{
  return *((unsigned __int8 *)off_1EE532B20
         + (*((unsigned __int8 *)off_1EE532C50 + a1 - 12) ^ 0x8Du)
         - 4) ^ a1;
}

uint64_t VLxCLgDpiF(int a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(&fp_dh_8e436c87f1a29db6504b879c9bab0741
       + ((119
                                        * ((fp_dh_dcd4af41f7c3772b1517a023ab61b080
                                          + fp_dh_9f1b6ff5bd27a4e0fdf85c847051166b) ^ 0x7A)) ^ fp_dh_2f9571e0f6e556b753d64ab1888b8956[fp_dh_9d054b4a1a3917d1c42d3961dc71930b[(119 * ((fp_dh_dcd4af41f7c3772b1517a023ab61b080 + fp_dh_9f1b6ff5bd27a4e0fdf85c847051166b) ^ 0x7A))] ^ 0x62])
       + 464);
  uint64_t v2 = (uint64_t)*(&fp_dh_8e436c87f1a29db6504b879c9bab0741
                + ((119 * (*v1 ^ fp_dh_dcd4af41f7c3772b1517a023ab61b080 ^ 0x7A)) ^ fp_dh_2f9571e0f6e556b753d64ab1888b8956[fp_dh_9d054b4a1a3917d1c42d3961dc71930b[(119 * (*v1 ^ fp_dh_dcd4af41f7c3772b1517a023ab61b080 ^ 0x7A))] ^ 0x6C])
                + 242);
  unint64_t v3 = (*(void *)(v2 - 4) + *v1) ^ (unint64_t)&v6;
  *uint64_t v1 = 864038519 * v3 + 0x7A9879DA482860B6;
  *(void *)(v2 - 4) = 864038519 * (v3 ^ 0x5462798188A2A47ALL);
  unsigned int v4 = 2100007649 * ((v7 + 1951608314 - 2 * (v7 & 0x74532DFA)) ^ 0xB95D28FB);
  _OWORD v7[2] = 2326 - v4;
  v7[0] = a1 - ((2 * a1) & 0xA9CC55EE) - 723113225 + v4;
  LOBYTE(v2) = 119 * ((*(_DWORD *)(v2 - 4) + *(_DWORD *)v1) ^ 0x7A);
  (*((void (**)(_DWORD *))*(&fp_dh_8e436c87f1a29db6504b879c9bab0741
                                     + ((119
                                                        * ((fp_dh_dcd4af41f7c3772b1517a023ab61b080
                                                          + fp_dh_9f1b6ff5bd27a4e0fdf85c847051166b) ^ 0x7A)) ^ fp_dh_439863e04d0bb15ed2bd302e353da06d[fp_dh_ad46ff6103c25fcd38226c0a7e15a22e[(119 * ((fp_dh_dcd4af41f7c3772b1517a023ab61b080 + fp_dh_9f1b6ff5bd27a4e0fdf85c847051166b) ^ 0x7A))] ^ 0x60])
                                     - 40)
   + (*((unsigned char *)off_1EE531F90
                                     + (*((unsigned __int8 *)off_1EE532AE8 + v2) ^ 0x62u)
                                     - 12) ^ v2)
   + 7531))(v7);
  return (v7[1] - 1293064305);
}

uint64_t AwwTNt5PUEr(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (unint64_t *)*(&fp_dh_8e436c87f1a29db6504b879c9bab0741
                           + ((119
                                                            * ((fp_dh_dcd4af41f7c3772b1517a023ab61b080
                                                              + fp_dh_bc4cebc2e81de849f4c8c346e207a83b) ^ 0x7A)) ^ fp_dh_93edda3288e1dce841b0e4495a97165c[fp_dh_5c86da6ba7195e9ae7df0a003f137584[(119 * ((fp_dh_dcd4af41f7c3772b1517a023ab61b080 + fp_dh_bc4cebc2e81de849f4c8c346e207a83b) ^ 0x7A))] ^ 0xAC])
                           + 560);
  unsigned __int8 v2 = 119 * (*v1 ^ fp_dh_dcd4af41f7c3772b1517a023ab61b080 ^ 0x7A);
  uint64_t v3 = (uint64_t)*(&fp_dh_8e436c87f1a29db6504b879c9bab0741
                + (*((unsigned char *)off_1EE532518
                                                  + (*((unsigned __int8 *)off_1EE532228 + v2 - 4) ^ 0x60u)
                                                  - 4) ^ v2)
                + 190);
  unint64_t v4 = 864038519 * ((unint64_t)&v6[*(void *)(v3 - 4) ^ *v1] ^ 0x5462798188A2A47ALL);
  *uint64_t v1 = v4;
  *(void *)(v3 - 4) = v4;
  uint64_t v8 = a1;
  v7[1] = (544512889 * ((((v7 | 0xE5E1B046) ^ 0xFFFFFFFE) - (~v7 | 0x1A1E4FB9)) ^ 0x3C25A81B)) ^ 0x10D2;
  LOBYTE(v3) = 119 * ((*(_DWORD *)(v3 - 4) + *(_DWORD *)v1) ^ 0x7A);
  (*((void (**)(_DWORD *))*(&fp_dh_8e436c87f1a29db6504b879c9bab0741
                                     + ((119
                                                        * (fp_dh_bc4cebc2e81de849f4c8c346e207a83b ^ 0x7A ^ fp_dh_dcd4af41f7c3772b1517a023ab61b080)) ^ fp_dh_2f9571e0f6e556b753d64ab1888b8956[fp_dh_9d054b4a1a3917d1c42d3961dc71930b[(119 * (fp_dh_bc4cebc2e81de849f4c8c346e207a83b ^ 0x7A ^ fp_dh_dcd4af41f7c3772b1517a023ab61b080))] ^ 0x90])
                                     - 115)
   + (*((unsigned char *)off_1EE5323F8
                                     + (*((unsigned __int8 *)off_1EE531C90 + v3) ^ 0x52u)
                                     - 12) ^ v3)
   + 7449))(v7);
  return v7[0];
}

uint64_t U4Fe6iEr(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (uint64_t)*(&fp_dh_8e436c87f1a29db6504b879c9bab0741
                + ((119
                                                 * ((fp_dh_dcd4af41f7c3772b1517a023ab61b080
                                                   + fp_dh_95ba6a04f63db7d07857a54487029d68) ^ 0x7A)) ^ fp_dh_89eb3d007fef4a65aa1ad4c472656745[fp_dh_cfb5d8e93c270645e74d3aac6adaf665[(119 * ((fp_dh_dcd4af41f7c3772b1517a023ab61b080 + fp_dh_95ba6a04f63db7d07857a54487029d68) ^ 0x7A))] ^ 0xEB])
                + 412);
  uint64_t v2 = *(void *)(v1 - 4);
  uint64_t v3 = (uint64_t)*(&fp_dh_8e436c87f1a29db6504b879c9bab0741
                + ((119 * ((fp_dh_dcd4af41f7c3772b1517a023ab61b080 + v2) ^ 0x7A)) ^ fp_dh_2f9571e0f6e556b753d64ab1888b8956[fp_dh_9d054b4a1a3917d1c42d3961dc71930b[(119 * ((fp_dh_dcd4af41f7c3772b1517a023ab61b080 + v2) ^ 0x7A))] ^ 0xF6])
                + 88);
  uint64_t v4 = *(void *)(v3 - 4) - v2 - (void)&v6;
  *(void *)(v1 - 4) = 864038519 * v4 - 0x5462798188A2A47ALL;
  *(void *)(v3 - 4) = 864038519 * (v4 ^ 0x5462798188A2A47ALL);
  uint64_t v8 = a1;
  unsigned int v7 = (2076498917 * (&v7 ^ 0xB93E104C)) ^ 0x141E;
  LOBYTE(v3) = 119 * ((*(_DWORD *)(v3 - 4) + *(_DWORD *)(v1 - 4)) ^ 0x7A);
  return (*((uint64_t (**)(unsigned int *))*(&fp_dh_8e436c87f1a29db6504b879c9bab0741
                                                     + ((119
                                                                        * (fp_dh_95ba6a04f63db7d07857a54487029d68 ^ 0x7A ^ fp_dh_dcd4af41f7c3772b1517a023ab61b080)) ^ fp_dh_93edda3288e1dce841b0e4495a97165c[fp_dh_5c86da6ba7195e9ae7df0a003f137584[(119 * (fp_dh_95ba6a04f63db7d07857a54487029d68 ^ 0x7A ^ fp_dh_dcd4af41f7c3772b1517a023ab61b080))] ^ 0x8D])
                                                     - 140)
          + (*((unsigned char *)off_1EE532B20
                                            + (*((unsigned __int8 *)off_1EE532C50 + v3 - 12) ^ 0xACu)
                                            - 4) ^ v3)
          + 7636))(&v7);
}

uint64_t fp_dh_f30e42fe862d132ec651318cdfa140de(unsigned int a1)
{
  return *((unsigned __int8 *)off_1EE531F90 + (*((unsigned __int8 *)off_1EE532AE8 + a1) ^ 0x6Cu) - 12) ^ a1;
}

uint64_t fp_dh_06f852d4d31642b44da31255c9ee0cae(unsigned int a1)
{
  return *((unsigned __int8 *)off_1EE531890 + (*((unsigned __int8 *)off_1EE531988 + a1 - 8) ^ 0xC5u)
                                            - 8) ^ a1;
}

uint64_t fp_dh_3f722fedb312af7f4d18dd38de7dca49(unsigned int a1)
{
  return *((unsigned __int8 *)off_1EE5323F8 + (*((unsigned __int8 *)off_1EE531C90 + a1) ^ 0xEBu) - 12) ^ a1;
}

uint64_t t40FBjEr(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (uint64_t)*(&fp_dh_8e436c87f1a29db6504b879c9bab0741
                + ((119
                                                 * (fp_dh_32a1de8235f8a74334c7e5d934eff36d ^ 0x7A ^ fp_dh_dcd4af41f7c3772b1517a023ab61b080)) ^ fp_dh_89eb3d007fef4a65aa1ad4c472656745[fp_dh_cfb5d8e93c270645e74d3aac6adaf665[(119 * (fp_dh_32a1de8235f8a74334c7e5d934eff36d ^ 0x7A ^ fp_dh_dcd4af41f7c3772b1517a023ab61b080))] ^ 0x87])
                + 85);
  uint64_t v2 = *(void *)(v1 - 4);
  uint64_t v3 = (uint64_t)*(&fp_dh_8e436c87f1a29db6504b879c9bab0741
                + (*((unsigned char *)off_1EE5323F8
                                                  + (*((unsigned __int8 *)off_1EE531C90
                                                     + (119
                                                                       * ((fp_dh_dcd4af41f7c3772b1517a023ab61b080 + v2) ^ 0x7A))) ^ 0x52u)
                                                  - 12) ^ (119 * ((fp_dh_dcd4af41f7c3772b1517a023ab61b080 + v2) ^ 0x7A)))
                + 165);
  unint64_t v4 = (*(void *)(v3 - 4) + v2) ^ (unint64_t)&v6;
  *(void *)(v1 - 4) = 864038519 * v4 + 0x7A9879DA482860B6;
  *(void *)(v3 - 4) = 864038519 * (v4 ^ 0x5462798188A2A47ALL);
  unsigned int v8 = 3055 - 1299810607 * (((&v7 | 0xB22FAF75) + (~&v7 | 0x4DD0508A)) ^ 0xC2799CD8);
  uint64_t v7 = a1;
  LOBYTE(v3) = 119 * ((*(_DWORD *)(v3 - 4) - *(_DWORD *)(v1 - 4)) ^ 0x7A);
  return (*((uint64_t (**)(uint64_t *))*(&fp_dh_8e436c87f1a29db6504b879c9bab0741
                                                + ((119
                                                                   * ((fp_dh_dcd4af41f7c3772b1517a023ab61b080
                                                                     + fp_dh_32a1de8235f8a74334c7e5d934eff36d) ^ 0x7A)) ^ fp_dh_2f9571e0f6e556b753d64ab1888b8956[fp_dh_9d054b4a1a3917d1c42d3961dc71930b[(119 * ((fp_dh_dcd4af41f7c3772b1517a023ab61b080 + fp_dh_32a1de8235f8a74334c7e5d934eff36d) ^ 0x7A))] ^ 0xC9])
                                                - 92)
          + (*((unsigned char *)off_1EE531890
                                            + (*((unsigned __int8 *)off_1EE531988 + v3 - 8) ^ 0x7Au)
                                            - 8) ^ v3)
          + 7517))(&v7);
}

uint64_t VONlh32NYbFTEnv()
{
  return 2;
}

uint64_t wmhYOjgJkR()
{
  return 2;
}

uint64_t XtCqEf5X(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = (unint64_t *)*(&fp_dh_8e436c87f1a29db6504b879c9bab0741
                           + ((119
                                                            * ((fp_dh_dcd4af41f7c3772b1517a023ab61b080
                                                              - fp_dh_9b78cd9500c00769bdc66e415aaa9a32) ^ 0x7A)) ^ fp_dh_89eb3d007fef4a65aa1ad4c472656745[fp_dh_cfb5d8e93c270645e74d3aac6adaf665[(119 * ((fp_dh_dcd4af41f7c3772b1517a023ab61b080 - fp_dh_9b78cd9500c00769bdc66e415aaa9a32) ^ 0x7A))] ^ 0x87])
                           + 73);
  uint64_t v5 = (char *)off_1EE532C50 - 12;
  uint64_t v6 = (char *)off_1EE532B20 - 4;
  uint64_t v7 = (uint64_t)*(&fp_dh_8e436c87f1a29db6504b879c9bab0741
                + (*((unsigned char *)off_1EE532B20
                                                  + (*((unsigned __int8 *)off_1EE532C50
                                                     + (119
                                                                       * ((fp_dh_dcd4af41f7c3772b1517a023ab61b080 + *v4) ^ 0x7A))
                                                     - 12) ^ 0xE6u)
                                                  - 4) ^ (119 * ((fp_dh_dcd4af41f7c3772b1517a023ab61b080 + *v4) ^ 0x7A)))
                + 267);
  unint64_t v8 = 864038519 * ((unint64_t)&v10[*v4 + *(void *)(v7 - 4)] ^ 0x5462798188A2A47ALL);
  *unint64_t v4 = v8;
  *(void *)(v7 - 4) = v8;
  uint64_t v16 = a1;
  uint64_t v13 = a4;
  uint64_t v14 = a3;
  uint64_t v11 = a2;
  unsigned int v15 = (381095207 * (((&v11 | 0x73611CBF) - (&v11 & 0x73611CBF)) ^ 0x6F1C299F)) ^ 0xE34;
  LOBYTE(v7) = 119 * (*(_DWORD *)v4 ^ 0x7A ^ *(_DWORD *)(v7 - 4));
  (*((void (**)(uint64_t *))*(&fp_dh_8e436c87f1a29db6504b879c9bab0741
                                      + ((119
                                                         * (fp_dh_9b78cd9500c00769bdc66e415aaa9a32 ^ 0x7A ^ fp_dh_dcd4af41f7c3772b1517a023ab61b080)) ^ fp_dh_89eb3d007fef4a65aa1ad4c472656745[fp_dh_cfb5d8e93c270645e74d3aac6adaf665[(119 * (fp_dh_9b78cd9500c00769bdc66e415aaa9a32 ^ 0x7A ^ fp_dh_dcd4af41f7c3772b1517a023ab61b080))] ^ 0x87])
                                      - 15)
   + (v7 ^ v6[v5[v7] ^ 0x8D])
   + 7583))(&v11);
  return (v12 - 1293064305);
}

uint64_t fp_dh_15ac23bcd075bb6c7aa1c4def64dfa4b(char a1, unsigned int a2)
{
  return *((unsigned __int8 *)off_1EE531F90
         + (*((unsigned char *)off_1EE532AE8 + a2) ^ a1)
         - 12) ^ a2;
}

uint64_t fp_dh_a3c06946727bd81675992c657307edf0(unsigned int a1)
{
  return *((unsigned __int8 *)off_1EE531F90 + (*((unsigned __int8 *)off_1EE532AE8 + a1) ^ 0xC9u) - 12) ^ a1;
}

uint64_t fp_dh_b1ce0d0c6ee1503bfd550d7ca9cde6cc(char a1, unsigned int a2)
{
  return *((unsigned __int8 *)off_1EE5323F8
         + (*((unsigned char *)off_1EE531C90 + a2) ^ a1)
         - 12) ^ a2;
}

uint64_t fp_dh_b179b6eb7d6a00d5f34a77e383389e1e(char a1, unsigned int a2)
{
  return *((unsigned __int8 *)off_1EE531B88
         + (*((unsigned char *)off_1EE531A70 + a2 - 12) ^ a1)
         - 12) ^ a2;
}

uint64_t fp_dh_d126ca3365d83fd09f556ff467e741ca(char a1, unsigned int a2)
{
  return *((unsigned __int8 *)off_1EE531890
         + (*((unsigned char *)off_1EE531988 + a2 - 8) ^ a1)
         - 8) ^ a2;
}

uint64_t fp_dh_4823735fee61deffac779353473743c3(char a1, unsigned int a2)
{
  return *((unsigned __int8 *)off_1EE532518
         + (*((unsigned char *)off_1EE532228 + a2 - 4) ^ a1)
         - 4) ^ a2;
}

uint64_t fp_dh_fcc22bdb2f2b5348a5ffe1c52e5febf3(char a1, unsigned int a2)
{
  return *((unsigned __int8 *)off_1EE532B20
         + (*((unsigned char *)off_1EE532C50 + a2 - 12) ^ a1)
         - 4) ^ a2;
}

uint64_t fp_dh_7465a7fa6775eba9a473a07b7d93b3dd(unsigned int a1)
{
  return *((unsigned __int8 *)off_1EE531F90 + (*((unsigned __int8 *)off_1EE532AE8 + a1) ^ 0xF6u) - 12) ^ a1;
}

uint64_t fp_dh_b71454b905031d41df2e1b51be0c9be5(unsigned int a1)
{
  return *((unsigned __int8 *)off_1EE531F90 + (*((unsigned __int8 *)off_1EE532AE8 + a1) ^ 0x62u) - 12) ^ a1;
}

uint64_t fp_dh_07e398c02eb61ec0eec6620632db4dee(unsigned int a1)
{
  return *((unsigned __int8 *)off_1EE532518 + (*((unsigned __int8 *)off_1EE532228 + a1 - 4) ^ 0xD1u)
                                            - 4) ^ a1;
}

uint64_t fp_dh_49da10b5d0e7d8e5e90ee437713dc0b2(unsigned int a1)
{
  return *((unsigned __int8 *)off_1EE532B20
         + (*((unsigned __int8 *)off_1EE532C50 + a1 - 12) ^ 0xACu)
         - 4) ^ a1;
}

void fp_dh_673482fbc3249a4f98fe1b7aec5a0b92(uint64_t a1)
{
  int v1 = 2076498917 * ((2 * (a1 & 0x38AD9241) - a1 + 1196584382) ^ 0xFE6C7DF2);
  __asm { BRAA            X9, X17 }
}

uint64_t sub_1947302FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  unsigned int v29 = *v22 ^ 0xFFBFFEEF;
  unsigned int v30 = (*v22 << (a10 ^ 0xC9)) & 0xFF7FFDDE;
  int v31 = ((((v28 - 136) | 0x16063D0D) - (v28 - 136) + ((v28 - 136) & 0xE9F9C2F0)) ^ 0xEDF96BC2) * v26;
  *int v24 = a22;
  *(_DWORD *)(v28 - 128) = v31 + v27 - 2352;
  *(_DWORD *)(v28 - 124) = v31 + v29 + 533970400 + v30;
  uint64_t v32 = (*(uint64_t (**)(uint64_t))(v25 + 8 * v23))(v28 - 136);
  return (*(uint64_t (**)(uint64_t))(v25 + 8
                                                  * (((*(_DWORD *)(v28 - 120) == 1293064305) * (a10 - 2886)) ^ a10)))(v32);
}

uint64_t sub_1947303E4@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v1
                              + 8
                              * (((a1 + v2 + ((v3 - 1757224800) & 0x68BD1F39) - 1338 - 1 <= (int)(((((v3 - 1757224800) & 0x68BD1F39)
                                                                                                  + 36729438) & 0xFDCF9C7B)
                                                                                                - 5140))
                                * ((((v3 - 1757224800) & 0x68BD1F39) + 38) ^ 0x539)) ^ (v3 - 1757224800) & 0x68BD1F39)))();
}

uint64_t sub_194730454@<X0>(int a1@<W0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W4>, int a5@<W5>, int a6@<W6>, int a7@<W7>, int a8@<W8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,int a50,unsigned int a51,int a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58)
{
  int v63 = (a6 + ((a57 ^ a41) ^ 0x9D)) ^ v61;
  unint64_t v64 = ((a7 + v63) ^ 0xA1D0A243)
      - (unint64_t)((2 * ((a7 + v63) ^ 0xA1D0A243)) & 0x32BE8A28)
      + 0x5172816195F4514;
  uint64_t v65 = (a8 + (a5 << 8) + a45) ^ 0xE5F49599;
  unint64_t v66 = v65 - ((2 * v65) & 0x13D8E9E8ALL) + 0x533A751E9EC74F45;
  uint64_t v67 = *(unsigned __int8 *)(a12 + (((a6 + (a57 ^ a41 ^ 0x9D)) ^ v61) ^ 0x43));
  unint64_t v68 = ((a36 + (a2 | (a4 << 24))) ^ 0xDD194D04)
      - (unint64_t)((2 * ((a36 + (a2 | (a4 << 24))) ^ 0xDD194D04)) & 0x7F645840)
      - 0x143F1D0FC04DD3E0;
  unsigned int v69 = (a1 + v59 + ((v62 << 16) | (a3 << 8))) ^ 0x7FAF68BE;
  int v539 = v58;
  uint64_t v70 = (uint64_t)*(&fp_dh_8e436c87f1a29db6504b879c9bab0741 + (v58 ^ 0xECE));
  unint64_t v71 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(a12 + (a2 ^ 4)) ^ 0x5ALL));
  unint64_t v72 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(a12 + (BYTE2(v66) ^ 0xC7)) ^ 0x5ALL));
  LODWORD(a35) = (v58 - 396080053) & 0x179BADF7;
  char v73 = (((((v58 + 75) & 0xF7) + 53) & a53) - ((v58 - 21) ^ 0x14 | a53)) & 0x18 | 0x46;
  int v74 = *(unsigned __int8 *)(a12 + (BYTE1(v64) ^ 0x45));
  uint64_t v75 = *(unsigned __int8 *)(a12 + ((unint64_t)(v69 >> (v73 ^ 0x5E)) >> (v73 & 0x18)));
  uint64_t v76 = *(unsigned __int8 *)(a12 + ((v66 >> 24) ^ 0x533A751E9ELL));
  int v77 = v69 - ((2 * v69) & 0x668364FC) + 859943550;
  uint64_t v78 = *(unsigned __int8 *)(a12 + (BYTE1(v77) ^ 0xB2));
  uint64_t v79 = *(unsigned __int8 *)(a12 + ((v68 >> 24) ^ 0xEBC0E2F03FLL));
  LODWORD(v71) = (((((v72 >> 3) & 0xCB8BBD3D00 ^ 0x428A241100)
                  - 0x556F0C688EDB71EFLL
                  - ((2 * ((v72 >> 3) & 0xCB8BBD3D00 ^ 0x428A241100)) & 0x10602481800)) ^ v72) >> 8) ^ (((((v71 >> 3) & 0x168C4DCB00000000 ^ 0x80088800000000) - ((2 * ((v71 >> 3) & 0x168C4DCB00000000 ^ 0x80088800000000)) & 0xD100B1400000000) + 0x2F8B85AE4C9C4D61) ^ v71) >> 32);
  uint64_t v80 = *(unsigned __int8 *)(a12 + (BYTE2(v77) ^ 0x41));
  uint64_t v81 = *(unsigned __int8 *)(a12 + (a45 ^ 0x99));
  uint64_t v82 = *(unsigned __int8 *)(a12 + (BYTE1(v66) ^ 0x4FLL));
  uint64_t v83 = *(unsigned __int8 *)(a12 + (BYTE2(v68) ^ 0xB2));
  uint64_t v84 = *(unsigned __int8 *)(a12 + (BYTE2(v64) ^ 0x5FLL));
  unint64_t v85 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(a12 + ((v64 >> 24) ^ 0x517281619)) ^ 0x5ALL));
  LODWORD(v85) = v71 ^ (((((v85 >> 3) & 0x4DCB8BBD0000 ^ 0x8880B800000)
                        - ((2 * ((v85 >> 3) & 0x4DCB8BBD0000 ^ 0x8880B800000)) & 0x838503580000)
                        - 0x31A50C093E13E5E4) ^ v85) >> 16) ^ (((((*(void *)(v70 + 8 * (v75 ^ 0x5A)) >> 3) & 0x8C4DCB8B000000 ^ 0xC428A000000)
                                                                 - 0x546F0C688EDB71EFLL
                                                                 - ((2
                                                                   * ((*(void *)(v70 + 8 * (v75 ^ 0x5A)) >> 3) & 0x8C4DCB8B000000 ^ 0xC428A000000)) & 0x100830602000000uLL)) ^ *(void *)(v70 + 8 * (v75 ^ 0x5A))) >> 24);
  unint64_t v86 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(a12 + (v59 ^ 0xBE)) ^ 0x5ALL));
  LODWORD(v67) = (((((*(void *)(v70 + 8 * (v67 ^ 0x5A)) >> 3) & 0xCB8BBD3D00 ^ 0x428A241100)
                  - 0x556F0C688EDB71EFLL
                  - ((2 * ((*(void *)(v70 + 8 * (v67 ^ 0x5A)) >> 3) & 0xCB8BBD3D00 ^ 0x428A241100)) & 0x10602481800uLL)) ^ *(void *)(v70 + 8 * (v67 ^ 0x5A))) >> 8) ^ (((((*(void *)(v70 + 8 * (v76 ^ 0x5A)) >> 3) & 0x168C4DCB00000000 ^ 0x80088800000000) - ((2 * ((*(void *)(v70 + 8 * (v76 ^ 0x5A)) >> 3) & 0x168C4DCB00000000 ^ 0x80088800000000)) & 0x2418100600000000uLL) + 0x3A5F0A1768C0133ALL) ^ *(void *)(v70 + 8 * (v76 ^ 0x5A))) >> 32) ^ (((((v86 >> 3) & 0x4DCB8BBD0000 ^ 0xC428A240000) - 0x556E0C688EDB71EFLL - ((2 * ((v86 >> 3) & 0x4DCB8BBD0000 ^ 0xC428A240000)) & 0x830602480000)) ^ v86) >> 16);
  unint64_t v87 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(a12 + (BYTE1(v68) ^ 0x2CLL)) ^ 0x5ALL));
  LODWORD(v67) = v67 ^ (((((v87 >> 3) & 0x8C4DCB8B000000 ^ 0xC428A000000)
                        - 0x546F0C688EDB71EFLL
                        - ((2 * ((v87 >> 3) & 0x8C4DCB8B000000 ^ 0xC428A000000)) & 0x100830602000000)) ^ v87) >> 24);
  unint64_t v88 = *(void *)(v70 + 8 * ((v74 - ((2 * v74) & 0xF6u) + 123) ^ 0x21));
  LODWORD(v83) = (((((*(void *)(v70 + 8 * (v78 ^ 0x5A)) >> 3) & 0x168C4DCB00000000 ^ 0x80088800000000)
                  - ((2 * ((*(void *)(v70 + 8 * (v78 ^ 0x5A)) >> 3) & 0x168C4DCB00000000 ^ 0x80088800000000)) & 0x2408190600000000uLL)
                  - 0x44C9F17C55F095FDLL) ^ *(void *)(v70 + 8 * (v78 ^ 0x5A))) >> 32) ^ (((((v88 >> 3) & 0x8C4DCB8B000000 ^ 0xC428A000000)
                                                                                           - 0x556F0C688EDB71EELL
                                                                                           + ~((2
                                                                                              * ((v88 >> 3) & 0x8C4DCB8B000000 ^ 0xC428A000000)) & 0x100830602000000)) ^ v88) >> 24) ^ (((((*(void *)(v70 + 8 * (v83 ^ 0x5A)) >> 3) & 0xCB8BBD3D00 ^ 0x428A241100) - 0x556F0B688EDB71EFLL - ((2 * ((*(void *)(v70 + 8 * (v83 ^ 0x5A)) >> 3) & 0xCB8BBD3D00 ^ 0x428A241100)) & 0x10602481800uLL)) ^ *(void *)(v70 + 8 * (v83 ^ 0x5A))) >> 8) ^ (((((*(void *)(v70 + 8 * (v81 ^ 0x5A)) >> 3) & 0x4DCB8BBD0000 ^ 0x8880B800000) - ((2 * ((*(void *)(v70 + 8 * (v81 ^ 0x5A)) >> 3) & 0x4DCB8BBD0000 ^ 0x8880B800000)) & 0x830102080000uLL) - 0x19CAAE5B5EB9A38BLL) ^ *(void *)(v70 + 8 * (v81 ^ 0x5A))) >> 16);
  LODWORD(v64) = (((((*(void *)(v70 + 8 * (v79 ^ 0x5A)) >> 3) & 0x168C4DCB00000000 ^ 0x14000C4200000000)
                  - 0x556F0C688EDB71EFLL
                  - ((2 * ((*(void *)(v70 + 8 * (v79 ^ 0x5A)) >> 3) & 0x168C4DCB00000000 ^ 0x14000C4200000000)) & 0x500830600000000uLL)) ^ *(void *)(v70 + 8 * (v79 ^ 0x5A))) >> 32) ^ (((((*(void *)(v70 + 8 * (v80 ^ 0x5A)) >> 3) & 0x8C4DCB8B000000 ^ 0x8008880B000000) - ((2 * ((*(void *)(v70 + 8 * (v80 ^ 0x5A)) >> 3) & 0x8C4DCB8B000000 ^ 0x8008880B000000)) & 0x1000A9402000000uLL) + 0x2EE2075E412A86DBLL) ^ *(void *)(v70 + 8 * (v80 ^ 0x5A))) >> 24) ^ (((((*(void *)(v70 + 8 * (v82 ^ 0x5A)) >> 3) & 0xCB8BBD3D00 ^ 0x428A241100) - 0x556F0B688EDB71EFLL - ((2 * ((*(void *)(v70 + 8 * (v82 ^ 0x5A)) >> 3) & 0xCB8BBD3D00 ^ 0x428A241100)) & 0x10602481800uLL)) ^ *(void *)(v70 + 8 * (v82 ^ 0x5A))) >> 8) ^ (((((*(void *)(v70 + 8 * (v84 ^ 0x5A)) >> 3) & 0x4DCB8BBD0000 ^ 0xC428A240000) - 0x556E0C688EDB71EFLL - ((2 * ((*(void *)(v70 + 8 * (v84 ^ 0x5A)) >> 3) & 0x4DCB8BBD0000 ^ 0xC428A240000)) & 0x830602480000uLL)) ^ *(void *)(v70 + 8 * (v84 ^ 0x5A))) >> 16);
  unint64_t v89 = (v83 ^ 0x88A664B4)
      - ((2 * (v83 ^ 0x88A664B4)) & 0x1C186295ELL)
      + 0x7B130685E0C314AFLL;
  uint64_t v90 = *(unsigned __int8 *)(a12
                           + ((((v67 ^ 0xFF62F3DD)
                                               - ((2 * (v67 ^ 0xFF62F3DD)) & 0x5D8F830)
                                               + 49052696) >> 16) ^ 0xECLL));
  unint64_t v91 = (v85 ^ 0xF3520224)
      - 2 * ((v85 ^ 0xF3520224) & 0x85DBD1BDLL ^ v85 & 0x18)
      - 0x21E48C57A242E5BLL;
  uint64_t v92 = *(unsigned __int8 *)(a12
                           + (((unsigned __int16)((v64 ^ 0xD39D)
                                                                 - ((2 * (v64 ^ 0xD39D)) & 0x7062)
                                                                 + 14385) >> 8) ^ 0x38));
  uint64_t v93 = *(unsigned __int8 *)(a12
                           + ((((v83 ^ 0x88A664B4)
                                               - ((2 * (v83 ^ 0x88A664B4)) & 0xC186295E)
                                               - 524086097) >> 16) ^ 0xC3));
  uint64_t v94 = *(unsigned __int8 *)(a12
                           + ((((v67 ^ 0xFF62F3DDLL)
                              - (unint64_t)((2 * (v67 ^ 0xFF62F3DD)) & 0x5D8F830)
                              - 0x7AF95F73FD1383E8) >> 24) ^ 0x8506A08C02));
  uint64_t v95 = *(unsigned __int8 *)(a12 + ((v89 >> 24) ^ 0x7B130685E0));
  uint64_t v96 = *(unsigned __int8 *)(a12
                           + ((((v64 ^ 0xE180D39D)
                                               - ((2 * (v64 ^ 0xE180D39D)) & 0xB92C7062)
                                               - 594134991) >> 16) ^ 0x96));
  uint64_t v97 = *(unsigned __int8 *)(a12 + (v83 ^ 0xB4));
  uint64_t v98 = *(unsigned __int8 *)(a12 + (v85 ^ 0x24));
  uint64_t v99 = *(unsigned __int8 *)(a12 + (v67 ^ 0xDDLL));
  uint64_t v100 = *(unsigned __int8 *)(a12
                            + ((((v64 ^ 0xE180D39DLL)
                               - ((2 * (v64 ^ 0xE180D39DLL)) & 0x1B92C7062uLL)
                               + 0x3CDA131CDC963831) >> 24) ^ 0x3CDA131CDCLL));
  uint64_t v101 = *(unsigned __int8 *)(a12 + (v64 ^ 0x9DLL));
  uint64_t v102 = *(unsigned __int8 *)(a12
                            + (((unsigned __int16)((v67 ^ 0xF3DD)
                                                                  - ((2 * (v67 ^ 0xF3DD)) & 0xF830)
                                                                  + 31768) >> 8) ^ 0x7CLL));
  uint64_t v103 = *(unsigned __int8 *)(a12
                            + ((((v85 ^ 0xF3520224)
                                                - 2 * ((v85 ^ 0xF3520224) & 0x85DBD1BD ^ v85 & 0x18)
                                                - 2049191515) >> 16) ^ 0xDBLL));
  unint64_t v104 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(a12 + ((v91 >> 24) ^ 0xFDE1B73A85)) ^ 0x5ALL));
  uint64_t v105 = *(unsigned __int8 *)(a12 + (BYTE1(v89) ^ 0x14));
  unint64_t v106 = *(void *)(v70 + 8 * (v93 ^ 0x5A));
  LODWORD(v104) = (((((*(void *)(v70 + 8 * (v90 ^ 0x5A)) >> 3) & 0x168C4DCB00000000 ^ 0x14000C4200000000)
                   - 0x556F0C688EDB71EFLL
                   - ((2 * ((*(void *)(v70 + 8 * (v90 ^ 0x5A)) >> 3) & 0x168C4DCB00000000 ^ 0x14000C4200000000)) & 0x500830600000000uLL)) ^ *(void *)(v70 + 8 * (v90 ^ 0x5A))) >> 32) ^ (((((v104 >> 3) & 0x8C4DCB8B000000 ^ 0xC428A000000) - 0x556F0C688EDB71EFLL - ((2 * ((v104 >> 3) & 0x8C4DCB8B000000 ^ 0xC428A000000)) & 0x100830602000000)) ^ v104) >> 24) ^ (((((v106 >> 3) & 0xCB8BBD3D00 ^ 0x880B802000) - ((2 * ((v106 >> 3) & 0xCB8BBD3D00 ^ 0x880B802000)) & 0x11703584A00) - 0x1CD6A7445A1118FDLL) ^ v106) >> 8) ^ (((((*(void *)(v70 + 8 * (v92 ^ 0x5A)) >> 3) & 0x4DCB8BBD0000 ^ 0xC428A240000) - 0x556E0C688EDB71EFLL - ((2 * ((*(void *)(v70 + 8 * (v92 ^ 0x5A)) >> 3) & 0x4DCB8BBD0000 ^ 0xC428A240000)) & 0x830602480000uLL)) ^ *(void *)(v70 + 8 * (v92 ^ 0x5A))) >> 16);
  unint64_t v107 = *(void *)(v70 + 8 * (v100 ^ 0x5A));
  LODWORD(v100) = (((((*(void *)(v70 + 8 * (v95 ^ 0x5A)) >> 3) & 0xCB8BBD3D00 ^ 0x428A241100)
                   - 0x556F0C688EDB71EFLL
                   - ((2 * ((*(void *)(v70 + 8 * (v95 ^ 0x5A)) >> 3) & 0xCB8BBD3D00 ^ 0x428A241100)) & 0x10602481800uLL)) ^ *(void *)(v70 + 8 * (v95 ^ 0x5A))) >> 8) ^ (((((*(void *)(v70 + 8 * (v94 ^ 0x5A)) >> 3) & 0x168C4DCB00000000 ^ 0x80088800000000) - ((2 * ((*(void *)(v70 + 8 * (v94 ^ 0x5A)) >> 3) & 0x168C4DCB00000000 ^ 0x80088800000000)) & 0x1180A8400000000uLL) - 0x3E0258897FFB5836) ^ *(void *)(v70 + 8 * (v94 ^ 0x5A))) >> 32) ^ (((((*(void *)(v70 + 8 * (v96 ^ 0x5A)) >> 3) & 0x4DCB8BBD0000 ^ 0x8880B800000) - ((2 * ((*(void *)(v70 + 8 * (v96 ^ 0x5A)) >> 3) & 0x4DCB8BBD0000 ^ 0x8880B800000)) & 0x129301700000uLL) - 0x4290D6B21B07A92ALL) ^ *(void *)(v70 + 8 * (v96 ^ 0x5A))) >> 16) ^ (((((*(void *)(v70 + 8 * (v98 ^ 0x5A)) >> 3) & 0x8C4DCB8B000000 ^ 0x8008880B000000) - ((2 * ((*(void *)(v70 + 8 * (v98 ^ 0x5A)) >> 3) & 0x8C4DCB8B000000 ^ 0x8008880B000000)) & 0x110089116000000uLL) - 0x6944EBA3009283B2) ^ *(void *)(v70 + 8 * (v98 ^ 0x5A))) >> 24);
  unint64_t v108 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(a12 + (BYTE1(v91) ^ 0xD1)) ^ 0x5ALL));
  unint64_t v109 = *(void *)(v70 + 8 * (v101 ^ 0x5A));
  LODWORD(v101) = (((((v107 >> 3) & 0x168C4DCB00000000 ^ 0x80088800000000)
                   - ((2 * ((v107 >> 3) & 0x168C4DCB00000000 ^ 0x80088800000000)) & 0x518030600000000)
                   - 0x3D617C5CF57ECAEALL) ^ v107) >> 32) ^ (((((*(void *)(v70 + 8 * (v97 ^ 0x5A)) >> 3) & 0x8C4DCB8B000000 ^ 0x8008880B000000)
                                                             - ((2
                                                               * ((*(void *)(v70 + 8 * (v97 ^ 0x5A)) >> 3) & 0x8C4DCB8B000000 ^ 0x8008880B000000)) & 0x118881202000000uLL)
                                                             + 0x2B9C76292107968ALL) ^ *(void *)(v70 + 8 * (v97 ^ 0x5A))) >> 24) ^ (((((v108 >> 3) & 0xCB8BBD3D00 ^ 0x880B802000) - ((2 * ((v108 >> 3) & 0xCB8BBD3D00 ^ 0x880B802000)) & 0x112036A3000) - 0x15C63172EA082777) ^ v108) >> 8) ^ (((((*(void *)(v70 + 8 * (v99 ^ 0x5A)) >> 3) & 0x4DCB8BBD0000 ^ 0xC428A240000) - 0x556E0C688EDB71EFLL - ((2 * ((*(void *)(v70 + 8 * (v99 ^ 0x5A)) >> 3) & 0x4DCB8BBD0000 ^ 0xC428A240000)) & 0x830602480000uLL)) ^ *(void *)(v70 + 8 * (v99 ^ 0x5A))) >> 16);
  LODWORD(v103) = (((((*(void *)(v70 + 8 * (v103 ^ 0x5A)) >> 3) & 0x4DCB8BBD0000 ^ 0xC428A240000)
                   - 0x556F0C688EDB71EFLL
                   - ((2 * ((*(void *)(v70 + 8 * (v103 ^ 0x5A)) >> 3) & 0x4DCB8BBD0000 ^ 0xC428A240000)) & 0x830602480000uLL)) ^ *(void *)(v70 + 8 * (v103 ^ 0x5A))) >> 16) ^ (((((v109 >> 3) & 0xCB8BBD3D00 ^ 0x880B802000) - ((2 * ((v109 >> 3) & 0xCB8BBD3D00 ^ 0x880B802000)) & 0x10007086200) - 0x225B606BAC7BCE0ALL) ^ v109) >> 8) ^ (((((*(void *)(v70 + 8 * (v102 ^ 0x5A)) >> 3) & 0x8C4DCB8B000000 ^ 0x8008880B000000) - ((2 * ((*(void *)(v70 + 8 * (v102 ^ 0x5A)) >> 3) & 0x8C4DCB8B000000 ^ 0x8008880B000000)) & 0x100028612000000uLL) - 0x644DDC9C86957534) ^ *(void *)(v70 + 8 * (v102 ^ 0x5A))) >> 24);
  uint64_t v110 = *(unsigned __int8 *)(a12 + (v104 ^ 0x57));
  LODWORD(v106) = v103 ^ (((((*(void *)(v70 + 8 * (v105 ^ 0x5A)) >> 3) & 0x168C4DCB00000000 ^ 0x80088800000000)
                          - ((2
                            * ((*(void *)(v70 + 8 * (v105 ^ 0x5A)) >> 3) & 0x168C4DCB00000000 ^ 0x80088800000000)) & 0x20100B0400000000uLL)
                          - 0x66D7F869E43A5577) ^ *(void *)(v70 + 8 * (v105 ^ 0x5A))) >> 32);
  unint64_t v111 = (v100 ^ 0xF2EDE2C3)
       - ((2 * (v100 ^ 0xF2EDE2C3)) & 0x1F4C5ECA0)
       - 0x378DA203059D09B0;
  uint64_t v112 = *(unsigned __int8 *)(a12
                            + ((((v100 ^ 0xF2EDE2C3)
                                                - ((2 * (v100 ^ 0xF2EDE2C3)) & 0xF4C5ECA0)
                                                - 94177712) >> 16) ^ 0x62));
  unint64_t v113 = (v101 ^ 0xFC7F761BLL)
       - ((2 * (v101 ^ 0xFC7F761BLL)) & 0x125A41488)
       - 0x24EC09E66D2DF5BCLL;
  uint64_t v114 = *(unsigned __int8 *)(a12 + ((v113 >> 24) ^ 0xDB13F61992));
  uint64_t v115 = *(unsigned __int8 *)(a12
                            + ((((v101 ^ 0xFC7F761B)
                                                - ((2 * (v101 ^ 0xFC7F761B)) & 0x25A41488)
                                                - 1831728572) >> 16) ^ 0xD2));
  unint64_t v116 = (v106 ^ 0x3024919DLL)
       - ((2 * (v106 ^ 0x3024919DLL)) & 0x164681BCCLL)
       + 0x74AA329AB2340DE6;
  uint64_t v117 = *(unsigned __int8 *)(a12 + ((v116 >> 24) ^ 0x74AA329AB2));
  unint64_t v118 = (v104 ^ 0x55B13A57)
       - ((2 * (v104 ^ 0x55B13A57)) & 0x13B06B1C0)
       + 0x3A4835A9D8358E0;
  uint64_t v119 = *(unsigned __int8 *)(a12 + (BYTE1(v116) ^ 0xDLL));
  uint64_t v120 = *(unsigned __int8 *)(a12 + (BYTE1(v118) ^ 0x58));
  uint64_t v121 = *(unsigned __int8 *)(a12 + (v101 ^ 0x1BLL));
  uint64_t v122 = *(unsigned __int8 *)(a12 + (BYTE2(v116) ^ 0x34));
  uint64_t v123 = *(unsigned __int8 *)(a12 + (v106 ^ 0x9DLL));
  uint64_t v124 = *(unsigned __int8 *)(a12 + (v100 ^ 0xC3));
  uint64_t v125 = *(unsigned __int8 *)(a12 + ((v118 >> 24) ^ 0x3A4835A9DLL));
  uint64_t v126 = *(unsigned __int8 *)(a12 + (BYTE2(v118) ^ 0x83));
  unint64_t v127 = *(void *)(v70 + 8 * (v110 ^ 0x5A));
  uint64_t v128 = *(unsigned __int8 *)(a12 + (BYTE1(v111) ^ 0xF6));
  uint64_t v537 = *(unsigned __int8 *)(a12 + (BYTE1(v113) ^ 0xALL));
  LODWORD(v127) = (((((*(void *)(v70 + 8 * (v112 ^ 0x5A)) >> 3) & 0xCB8BBD3D00 ^ 0x880B802000)
                   - ((2 * ((*(void *)(v70 + 8 * (v112 ^ 0x5A)) >> 3) & 0xCB8BBD3D00 ^ 0x880B802000)) & 0x18606504200uLL)
                   + 0xC7D1AE3772A63CBLL) ^ *(void *)(v70 + 8 * (v112 ^ 0x5A))) >> 8) ^ (((((v127 >> 3) & 0x168C4DCB00000000 ^ 0x80088800000000)
                                                                                           + 0x44B73CD78BF639B2
                                                                                           + (~(2
                                                                                              * ((v127 >> 3) & 0x168C4DCB00000000 ^ 0x80088800000000)) | 0xF6F7E679FFFFFFFFLL)) ^ v127) >> 32) ^ (((((*(void *)(v70 + 8 * (v115 ^ 0x5A)) >> 3) & 0x4DCB8BBD0000 ^ 0xC428A240000) - 0x556E0C688EDB71EFLL - ((2 * ((*(void *)(v70 + 8 * (v115 ^ 0x5A)) >> 3) & 0x4DCB8BBD0000 ^ 0xC428A240000)) & 0x830602480000uLL)) ^ *(void *)(v70 + 8 * (v115 ^ 0x5A))) >> 16);
  uint64_t v129 = *(unsigned __int8 *)(a12 + ((v111 >> 24) ^ 0xC8725DFCFALL)) ^ 0x5ALL;
  LODWORD(v127) = v127 ^ (((((*(void *)(v70 + 8 * (v117 ^ 0x5A)) >> 3) & 0x8C4DCB8B000000 ^ 0x8008880B000000)
                          - ((2 * ((*(void *)(v70 + 8 * (v117 ^ 0x5A)) >> 3) & 0x8C4DCB8B000000 ^ 0x8008880B000000)) & 0x18100102000000uLL)
                          + 0x5D1EAA0095C731AELL) ^ *(void *)(v70 + 8 * (v117 ^ 0x5A))) >> 24);
  unint64_t v130 = *(void *)(v70 + 8 * (v123 ^ 0x5A));
  LODWORD(v114) = (((((*(void *)(v70 + 8 * (v114 ^ 0x5A)) >> 3) & 0x8C4DCB8B000000 ^ 0xC428A000000)
                   - 0x556F0C688EDB71EFLL
                   - ((2 * ((*(void *)(v70 + 8 * (v114 ^ 0x5A)) >> 3) & 0x8C4DCB8B000000 ^ 0xC428A000000)) & 0x100830602000000uLL)) ^ *(void *)(v70 + 8 * (v114 ^ 0x5A))) >> 24) ^ (((((*(void *)(v70 + 8 * v129) >> 3) & 0x4DCB8BBD0000 ^ 0x8880B800000) - ((2 * ((*(void *)(v70 + 8 * v129) >> 3) & 0x4DCB8BBD0000 ^ 0x8880B800000)) & 0x1016003A0000uLL) - 0x14CA67F0FFE03C87) ^ *(void *)(v70 + 8 * v129)) >> 16) ^ (((((v130 >> 3) & 0x168C4DCB00000000 ^ 0x80088800000000) - ((2 * ((v130 >> 3) & 0x168C4DCB00000000 ^ 0x80088800000000)) & 0x2400121600000000) - 0x44AED6C060C14FC7) ^ v130) >> 32) ^ (((((*(void *)(v70 + 8 * (v120 ^ 0x5A)) >> 3) & 0xCB8BBD3D00 ^ 0x880B802000) - ((2 * ((*(void *)(v70 + 8 * (v120 ^ 0x5A)) >> 3) & 0xCB8BBD3D00 ^ 0x880B802000)) & 0x1505587800uLL) - 0x4EF8CBE16D1143ABLL) ^ *(void *)(v70 + 8 * (v120 ^ 0x5A))) >> 8);
  LODWORD(v119) = (((((*(void *)(v70 + 8 * (v119 ^ 0x5A)) >> 3) & 0x8C4DCB8B000000 ^ 0x8008880B000000)
                   - ((2 * ((*(void *)(v70 + 8 * (v119 ^ 0x5A)) >> 3) & 0x8C4DCB8B000000 ^ 0x8008880B000000)) & 0x100011600000000uLL)
                   + 0x388112AF549435A4) ^ *(void *)(v70 + 8 * (v119 ^ 0x5A))) >> 24) ^ (((((*(void *)(v70 + 8 * (v121 ^ 0x5A)) >> 3) & 0x4DCB8BBD0000 ^ 0xC428A240000)
                                                                                             - 0x556F0C688EDB71EFLL
                                                                                             - ((2
                                                                                               * ((*(void *)(v70 + 8 * (v121 ^ 0x5A)) >> 3) & 0x4DCB8BBD0000 ^ 0xC428A240000)) & 0x830602480000uLL)) ^ *(void *)(v70 + 8 * (v121 ^ 0x5A))) >> 16) ^ (((((*(void *)(v70 + 8 * (v126 ^ 0x5A)) >> 3) & 0x168C4DCB00000000 ^ 0x80088800000000) - ((2 * ((*(void *)(v70 + 8 * (v126 ^ 0x5A)) >> 3) & 0x168C4DCB00000000 ^ 0x80088800000000)) & 0xB0600000000uLL) - 0x7FACD8682CFFFDE1) ^ *(void *)(v70 + 8 * (v126 ^ 0x5A))) >> 32) ^ (((((*(void *)(v70 + 8 * (v124 ^ 0x5A)) >> 3) & 0xCB8BBD3D00 ^ 0x880B802000) - ((2 * ((*(void *)(v70 + 8 * (v124 ^ 0x5A)) >> 3) & 0xCB8BBD3D00 ^ 0x880B802000)) & 0x96165A2200uLL) - 0xB057C90D4906E13) ^ *(void *)(v70 + 8 * (v124 ^ 0x5A))) >> 8);
  LODWORD(v122) = (((((*(void *)(v70 + 8 * (v125 ^ 0x5A)) >> 3) & 0x4DCB8BBD0000 ^ 0xC428A240000)
                   - 0x556F0C688EDB71EFLL
                   - ((2 * ((*(void *)(v70 + 8 * (v125 ^ 0x5A)) >> 3) & 0x4DCB8BBD0000 ^ 0xC428A240000)) & 0x830602480000uLL)) ^ *(void *)(v70 + 8 * (v125 ^ 0x5A))) >> 16) ^ (((((*(void *)(v70 + 8 * (v122 ^ 0x5A)) >> 3) & 0xCB8BBD3D00 ^ 0x428A241100) - 0x556F0C688EDB71EFLL - ((2 * ((*(void *)(v70 + 8 * (v122 ^ 0x5A)) >> 3) & 0xCB8BBD3D00 ^ 0x428A241100)) & 0x10602481800uLL)) ^ *(void *)(v70 + 8 * (v122 ^ 0x5A))) >> 8) ^ (((((*(void *)(v70 + 8 * (v128 ^ 0x5A)) >> 3) & 0x8C4DCB8B000000 ^ 0x8008880B000000) - ((2 * ((*(void *)(v70 + 8 * (v128 ^ 0x5A)) >> 3) & 0x8C4DCB8B000000 ^ 0x8008880B000000)) & 0x1100A1204000000uLL) + 0x68B8073D36DABDFELL) ^ *(void *)(v70 + 8 * (v128 ^ 0x5A))) >> 24);
  unint64_t v131 = (v127 ^ 0x198C6D5BLL)
       - ((2 * (v127 ^ 0x198C6D5B)) & 0x2E2E7F0E)
       + 0x2DFDAE5717173F87;
  uint64_t v132 = *(unsigned __int8 *)(v60 + (v114 ^ 0x60));
  LODWORD(v122) = v122 ^ (((((*(void *)(v70 + 8 * (v537 ^ 0x5A)) >> 3) & 0x168C4DCB00000000 ^ 0x80088800000000)
                          - ((2
                            * ((*(void *)(v70 + 8 * (v537 ^ 0x5A)) >> 3) & 0x168C4DCB00000000 ^ 0x80088800000000)) & 0x2408929400000000uLL)
                          + 0x7A67C97E0C32F917) ^ *(void *)(v70 + 8 * (v537 ^ 0x5A))) >> 32);
  unint64_t v133 = (v119 ^ 0xF8F88A7FLL)
       - ((2 * (v119 ^ 0xF8F88A7FLL)) & 0x1BAA57498)
       - 0x2DEF1C0F22AD45B4;
  unint64_t v134 = (v114 ^ 0x468A360)
       - ((2 * (v114 ^ 0x468A360)) & 0x6D4B232A)
       - 0x443262A0C95A6E6BLL;
  uint64_t v135 = *(unsigned __int8 *)(v60 + ((v131 >> 24) ^ 0x2DFDAE5717));
  uint64_t v136 = *(unsigned __int8 *)(v60 + (BYTE1(v134) ^ 0x91));
  uint64_t v137 = *(unsigned __int8 *)(v60 + (v119 ^ 0x7FLL));
  uint64_t v138 = *(unsigned __int8 *)(v60 + (v127 ^ 0x5BLL));
  uint64_t v139 = *(unsigned __int8 *)(v60
                            + (((unsigned __int16)((v127 ^ 0x6D5B)
                                                                  - ((2 * (v127 ^ 0x6D5B)) & 0x7F0E)
                                                                  + 16263) >> 8) ^ 0x3FLL));
  uint64_t v140 = *(unsigned __int8 *)(v60 + (BYTE2(v134) ^ 0xA5));
  uint64_t v141 = *(unsigned __int8 *)(v60 + (v122 ^ 0x53));
  uint64_t v142 = (v134 >> 24) ^ 0xBBCD9D5F36;
  uint64_t v143 = *(unsigned __int8 *)(v60
                            + (((unsigned __int16)((v122 ^ 0x1E53)
                                                                  - 2 * ((v122 ^ 0x1E53) & 0xA9FE ^ v122 & 8)
                                                                  - 22026) >> 8) ^ 0xA9));
  uint64_t v144 = *(unsigned __int8 *)(v60
                            + (((unint64_t)((v122 ^ 0xAD801E53)
                                                                  - 2
                                                                  * ((v122 ^ 0xAD801E53) & 0xE7D5A9FE ^ v122 & 8)
                                                                  - 405427722) >> 16) ^ 0xD5));
  uint64_t v145 = *(unsigned __int8 *)(v60 + v142);
  uint64_t v146 = *(unsigned __int8 *)(v60 + (BYTE2(v131) ^ 0x17));
  uint64_t v147 = *(unsigned __int8 *)(v60 + (BYTE2(v133) ^ 0x52));
  LODWORD(v142) = (((((*(void *)(v70 + 8 * (v132 ^ 0x5A)) >> 3) & 0x4DCB8BBD0000 ^ 0xC428A240000)
                   - 0x556F0C688EDB71EFLL
                   - ((2 * ((*(void *)(v70 + 8 * (v132 ^ 0x5A)) >> 3) & 0x4DCB8BBD0000 ^ 0xC428A240000)) & 0x830602480000uLL)) ^ *(void *)(v70 + 8 * (v132 ^ 0x5A))) >> 16) ^ (((((*(void *)(v70 + 8 * (v135 ^ 0x5A)) >> 3) & 0xCB8BBD3D00 ^ 0x880B802000) - ((2 * ((*(void *)(v70 + 8 * (v135 ^ 0x5A)) >> 3) & 0xCB8BBD3D00 ^ 0x880B802000)) & 0x1031A1800uLL) + 0x3FDDA800A18FCCE1) ^ *(void *)(v70 + 8 * (v135 ^ 0x5A))) >> 8);
  unint64_t v148 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(v60 + ((v133 >> 24) ^ 0xD210E3F0DDLL)) ^ 0x5ALL));
  unint64_t v149 = *(void *)(v70
                   + 8
                   * (*(unsigned __int8 *)(v60
                                         + ((((v122 ^ 0xAD801E53)
                                            - 2
                                            * ((v122 ^ 0xAD801E53) & 0xE7D5A9FELL ^ (unint64_t)(v122 & 8))
                                            + 0x5374FEA2E7D5A9F6) >> 24) ^ 0x5374FEA2E7)) ^ 0x5ALL));
  LODWORD(v142) = v142 ^ (((((v148 >> 3) & 0x8C4DCB8B000000 ^ 0x8008880B000000)
                          - ((2 * ((v148 >> 3) & 0x8C4DCB8B000000 ^ 0x8008880B000000)) & 0x138004000000)
                          + 0x211139F412963159) ^ v148) >> 24) ^ (((((v149 >> 3) & 0x168C4DCB00000000 ^ 0x80088800000000)
                                                                    - ((2
                                                                      * ((v149 >> 3) & 0x168C4DCB00000000 ^ 0x80088800000000)) & 0x900129600000000)
                                                                    - 0x3A2D4680E4DA613DLL) ^ v149) >> 32);
  LODWORD(v138) = (((((*(void *)(v70 + 8 * (v137 ^ 0x5A)) >> 3) & 0x8C4DCB8B000000 ^ 0xC428A000000)
                   - 0x556F0C688EDB71EFLL
                   - ((2 * ((*(void *)(v70 + 8 * (v137 ^ 0x5A)) >> 3) & 0x8C4DCB8B000000 ^ 0xC428A000000)) & 0x100830602000000uLL)) ^ *(void *)(v70 + 8 * (v137 ^ 0x5A))) >> 24) ^ (((((*(void *)(v70 + 8 * (v136 ^ 0x5A)) >> 3) & 0x4DCB8BBD0000 ^ 0x8880B800000) - ((2 * ((*(void *)(v70 + 8 * (v136 ^ 0x5A)) >> 3) & 0x4DCB8BBD0000 ^ 0x8880B800000)) & 0x921507280000uLL) - 0x5A94B4C52C29B209) ^ *(void *)(v70 + 8 * (v136 ^ 0x5A))) >> 16) ^ (((((*(void *)(v70 + 8 * (v141 ^ 0x5A)) >> 3) & 0x168C4DCB00000000 ^ 0x14000C4200000000) - 0x556F0C688EDB71EFLL - ((2 * ((*(void *)(v70 + 8 * (v141 ^ 0x5A)) >> 3) & 0x168C4DCB00000000 ^ 0x14000C4200000000)) & 0x500830600000000uLL)) ^ *(void *)(v70 + 8 * (v141 ^ 0x5A))) >> 32) ^ (((((*(void *)(v70 + 8 * (v138 ^ 0x5A)) >> 3) & 0xCB8BBD3D00 ^ 0x880B802000) - ((2 * ((*(void *)(v70 + 8 * (v138 ^ 0x5A)) >> 3) & 0xCB8BBD3D00 ^ 0x880B802000)) & 0x11611623A00uLL) + 0x5F196C8F6CF15D2BLL) ^ *(void *)(v70 + 8 * (v138 ^ 0x5A))) >> 8);
  unint64_t v150 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(v60 + (BYTE1(v133) ^ 0xBALL)) ^ 0x5ALL));
  LODWORD(v139) = (((((*(void *)(v70 + 8 * (v143 ^ 0x5A)) >> 3) & 0x8C4DCB8B000000 ^ 0x8008880B000000)
                   - ((2 * ((*(void *)(v70 + 8 * (v143 ^ 0x5A)) >> 3) & 0x8C4DCB8B000000 ^ 0x8008880B000000)) & 0x109506000000uLL)
                   - 0x19ECC5911CEEDDBBLL) ^ *(void *)(v70 + 8 * (v143 ^ 0x5A))) >> 24) ^ (((((v150 >> 3) & 0x4DCB8BBD0000 ^ 0xC428A240000)
                                                                                             - 0x556F0C688EDB71EFLL
                                                                                             - ((2
                                                                                               * ((v150 >> 3) & 0x4DCB8BBD0000 ^ 0xC428A240000)) & 0x830602480000)) ^ v150) >> 16) ^ (((((*(void *)(v70 + 8 * (v139 ^ 0x5A)) >> 3) & 0x168C4DCB00000000 ^ 0x14000C4200000000) - 0x556F0C688EDB71EFLL - ((2 * ((*(void *)(v70 + 8 * (v139 ^ 0x5A)) >> 3) & 0x168C4DCB00000000 ^ 0x14000C4200000000)) & 0x500830600000000uLL)) ^ *(void *)(v70 + 8 * (v139 ^ 0x5A))) >> 32) ^ (((((*(void *)(v70 + 8 * (v140 ^ 0x5A)) >> 3) & 0xCB8BBD3D00 ^ 0x428A241100) - 0x556F0B688EDB71EFLL - ((2 * ((*(void *)(v70 + 8 * (v140 ^ 0x5A)) >> 3) & 0xCB8BBD3D00 ^ 0x428A241100)) & 0x10602481800uLL)) ^ *(void *)(v70 + 8 * (v140 ^ 0x5A))) >> 8);
  LODWORD(v147) = (((((*(void *)(v70 + 8 * (v146 ^ 0x5A)) >> 3) & 0x168C4DCB00000000 ^ 0x14000C4200000000)
                   - 0x556F0C688EDB71EFLL
                   - ((2 * ((*(void *)(v70 + 8 * (v146 ^ 0x5A)) >> 3) & 0x168C4DCB00000000 ^ 0x14000C4200000000)) & 0x500830600000000uLL)) ^ *(void *)(v70 + 8 * (v146 ^ 0x5A))) >> 32) ^ (((((*(void *)(v70 + 8 * (v144 ^ 0x5A)) >> 3) & 0x8C4DCB8B000000 ^ 0x8008880B000000) - ((2 * ((*(void *)(v70 + 8 * (v144 ^ 0x5A)) >> 3) & 0x8C4DCB8B000000 ^ 0x8008880B000000)) & 0x110891600000000uLL) + 0x5FF956AF34A40E97) ^ *(void *)(v70 + 8 * (v144 ^ 0x5A))) >> 24) ^ (((((*(void *)(v70 + 8 * (v145 ^ 0x5A)) >> 3) & 0xCB8BBD3D00 ^ 0x880B802000) - ((2 * ((*(void *)(v70 + 8 * (v145 ^ 0x5A)) >> 3) & 0xCB8BBD3D00 ^ 0x880B802000)) & 0x2060A1800uLL) - 0x1ED653DECCB8B31ELL) ^ *(void *)(v70 + 8 * (v145 ^ 0x5A))) >> 8) ^ (((((*(void *)(v70 + 8 * (v147 ^ 0x5A)) >> 3) & 0x4DCB8BBD0000 ^ 0xC428A240000) - 0x556E0C688EDB71EFLL - ((2 * ((*(void *)(v70 + 8 * (v147 ^ 0x5A)) >> 3) & 0x4DCB8BBD0000 ^ 0xC428A240000)) & 0x830602480000uLL)) ^ *(void *)(v70 + 8 * (v147 ^ 0x5A))) >> 16);
  unint64_t v151 = (v139 ^ 0xB269E01ELL)
       - ((2 * (v139 ^ 0xB269E01ELL)) & 0x142FCB57ALL)
       + 0x41406FABA17E5ABDLL;
  uint64_t v152 = *(unsigned __int8 *)(v60
                            + (((unsigned __int16)((v147 ^ 0x34FF)
                                                                  - ((2 * (v147 ^ 0x34FF)) & 0xC8FC)
                                                                  + 25726) >> 8) ^ 0x64));
  uint64_t v153 = *(unsigned __int8 *)(v60 + (v138 ^ 0x54));
  unint64_t v154 = (v138 ^ 0x1F86D754)
       - ((2 * (v138 ^ 0x1F86D754)) & 0x108E6257ELL)
       + 0x46325857847312BFLL;
  uint64_t v155 = *(unsigned __int8 *)(v60
                            + ((((v142 ^ 0xE005068C)
                                                - ((2 * (v142 ^ 0xE005068C)) & 0x29854D82)
                                                + 348300993) >> 16) ^ 0xC2));
  uint64_t v156 = *(unsigned __int8 *)(v60
                            + (((unsigned __int16)((v138 ^ 0xD754)
                                                                  - ((2 * (v138 ^ 0xD754)) & 0x257E)
                                                                  + 4799) >> 8) ^ 0x12));
  uint64_t v157 = *(unsigned __int8 *)(v60 + (v139 ^ 0x1ELL));
  uint64_t v158 = *(unsigned __int8 *)(v60 + ((v151 >> 24) ^ 0x41406FABA1));
  uint64_t v159 = *(unsigned __int8 *)(v60
                            + ((((v147 ^ 0x14AB34FF)
                                                - ((2 * (v147 ^ 0x14AB34FF)) & 0xB5E0C8FC)
                                                - 621779842) >> 16) ^ 0xF0));
  uint64_t v160 = *(unsigned __int8 *)(v60
                            + (((unsigned __int16)((v139 ^ 0xE01E)
                                                                  - ((2 * (v139 ^ 0xE01E)) & 0xB57A)
                                                                  + 23229) >> 8) ^ 0x5ALL));
  uint64_t v161 = *(unsigned __int8 *)(v60
                            + ((((v142 ^ 0xE005068CLL)
                               - (unint64_t)((2 * (v142 ^ 0xE005068C)) & 0x29854D82)
                               + 0x7ED7E2DE14C2A6C1) >> 24) ^ 0x7ED7E2DE14));
  uint64_t v162 = *(unsigned __int8 *)(v60 + (BYTE2(v154) ^ 0x73));
  unint64_t v163 = (((v147 ^ 0x14AB34FFLL)
         - ((2 * (v147 ^ 0x14AB34FFLL)) & 0x1B5E0C8FCuLL)
         + 0x73BE1A97DAF0647ELL) >> 24) ^ 0x73BE1A97DALL;
  uint64_t v164 = *(unsigned __int8 *)(v60 + ~(_BYTE)v147);
  uint64_t v165 = *(unsigned __int8 *)(v60 + (v142 ^ 0x8CLL));
  uint64_t v166 = *(unsigned __int8 *)(v60
                            + (((unsigned __int16)((v142 ^ 0x68C)
                                                                  - ((2 * (v142 ^ 0x68C)) & 0x4D82)
                                                                  - 22847) >> 8) ^ 0xA6));
  uint64_t v167 = *(unsigned __int8 *)(v60 + v163);
  uint64_t v533 = *(unsigned __int8 *)(v60 + (BYTE2(v151) ^ 0x7ELL));
  uint64_t v168 = *(unsigned __int8 *)(v60 + ((v154 >> 24) ^ 0x4632585784));
  LODWORD(v142) = (((((*(void *)(v70 + 8 * (v153 ^ 0x5A)) >> 3) & 0xCB8BBD3D00 ^ 0x880B802000)
                   - ((2 * ((*(void *)(v70 + 8 * (v153 ^ 0x5A)) >> 3) & 0xCB8BBD3D00 ^ 0x880B802000)) & 0x10606202200uLL)
                   + 0x7D834B31312535FLL) ^ *(void *)(v70 + 8 * (v153 ^ 0x5A))) >> 8) ^ (((((*(void *)(v70 + 8 * (v155 ^ 0x5A)) >> 3) & 0x168C4DCB00000000 ^ 0x80088800000000)
                                                                                           - ((2
                                                                                             * ((*(void *)(v70 + 8 * (v155 ^ 0x5A)) >> 3) & 0x168C4DCB00000000 ^ 0x80088800000000)) & 0x2900110400000000uLL)
                                                                                           + 0x5CD1AA9665DB6025) ^ *(void *)(v70 + 8 * (v155 ^ 0x5A))) >> 32) ^ (((((*(void *)(v70 + 8 * (v158 ^ 0x5A)) >> 3) & 0x4DCB8BBD0000 ^ 0x8880B800000) - ((2 * ((*(void *)(v70 + 8 * (v158 ^ 0x5A)) >> 3) & 0x4DCB8BBD0000 ^ 0x8880B800000)) & 0x838700680000uLL) - 0x1F5FAC284B89C585) ^ *(void *)(v70 + 8 * (v158 ^ 0x5A))) >> 16) ^ (((((*(void *)(v70 + 8 * (v152 ^ 0x5A)) >> 3) & 0x8C4DCB8B000000 ^ 0xC428A000000) - 0x546F0C688EDB71EFLL - ((2 * ((*(void *)(v70 + 8 * (v152 ^ 0x5A)) >> 3) & 0x8C4DCB8B000000 ^ 0xC428A000000)) & 0x100830602000000uLL)) ^ *(void *)(v70 + 8 * (v152 ^ 0x5A))) >> 24);
  LODWORD(v159) = (((((*(void *)(v70 + 8 * (v157 ^ 0x5A)) >> 3) & 0x8C4DCB8B000000 ^ 0xC428A000000)
                   - 0x556F0C688EDB71EFLL
                   - ((2 * ((*(void *)(v70 + 8 * (v157 ^ 0x5A)) >> 3) & 0x8C4DCB8B000000 ^ 0xC428A000000)) & 0x100830602000000uLL)) ^ *(void *)(v70 + 8 * (v157 ^ 0x5A))) >> 24) ^ (((((*(void *)(v70 + 8 * (v156 ^ 0x5A)) >> 3) & 0x4DCB8BBD0000 ^ 0x8880B800000) + 0x1D44E3E24427A0E6 + (~(2 * ((*(void *)(v70 + 8 * (v156 ^ 0x5A)) >> 3) & 0x4DCB8BBD0000 ^ 0x8880B800000)) | 0xFFFF7C7BFFB5FFFFLL)) ^ *(void *)(v70 + 8 * (v156 ^ 0x5A))) >> 16) ^ (((((*(void *)(v70 + 8 * (v159 ^ 0x5A)) >> 3) & 0x168C4DCB00000000 ^ 0x80088800000000) - ((2 * ((*(void *)(v70 + 8 * (v159 ^ 0x5A)) >> 3) & 0x168C4DCB00000000 ^ 0x80088800000000)) & 0x24009A8200000000uLL) + 0x3A327D7110547958) ^ *(void *)(v70 + 8 * (v159 ^ 0x5A))) >> 32) ^ (((((*(void *)(v70 + 8 * (v161 ^ 0x5A)) >> 3) & 0xCB8BBD3D00 ^ 0x880B802000) - ((2 * ((*(void *)(v70 + 8 * (v161 ^ 0x5A)) >> 3) & 0xCB8BBD3D00 ^ 0x880B802000)) & 0x8701583A00uLL) + 0x54D8C56784AEDD3DLL) ^ *(void *)(v70 + 8 * (v161 ^ 0x5A))) >> 8);
  LODWORD(v165) = (((((*(void *)(v70 + 8 * (v160 ^ 0x5A)) >> 3) & 0x4DCB8BBD0000 ^ 0x8880B800000)
                   - ((2 * ((*(void *)(v70 + 8 * (v160 ^ 0x5A)) >> 3) & 0x4DCB8BBD0000 ^ 0x8880B800000)) & 0x801513400000uLL)
                   + 0x63A0721AF9A02C9FLL) ^ *(void *)(v70 + 8 * (v160 ^ 0x5A))) >> 16) ^ ((((*(void *)(v70 + 8 * (v167 ^ 0x5A)) >> 3) & 0x168C4DCB8BBD3D72 ^ 0x8008880B802050)
                                                                                            + (*(void *)(v70 + 8 * (v167 ^ 0x5A)) ^ 0xCC69661FB63ECA7CLL)
                                                                                            - 2
                                                                                            * (((*(void *)(v70 + 8 * (v167 ^ 0x5A)) >> 3) & 0x168C4DCB8BBD3D72 ^ 0x8008880B802050) & (*(void *)(v70 + 8 * (v167 ^ 0x5A)) ^ 0x4C69661FB63ECA7CLL))) >> 24) ^ (((((*(void *)(v70 + 8 * (v165 ^ 0x5A)) >> 3) & 0x168C4DCB00000000 ^ 0x14000C4200000000) - 0x556F0C688EDB71EFLL - ((2 * ((*(void *)(v70 + 8 * (v165 ^ 0x5A)) >> 3) & 0x168C4DCB00000000 ^ 0x14000C4200000000)) & 0x500830600000000uLL)) ^ *(void *)(v70 + 8 * (v165 ^ 0x5A))) >> 32);
  unint64_t v169 = *(void *)(v70 + 8 * (v164 ^ 0x5A));
  LODWORD(v164) = v165 ^ (((((*(void *)(v70 + 8 * (v162 ^ 0x5A)) >> 3) & 0xCB8BBD3D00 ^ 0x428A241100)
                          - 0x556F0B688EDB71EFLL
                          - ((2 * ((*(void *)(v70 + 8 * (v162 ^ 0x5A)) >> 3) & 0xCB8BBD3D00 ^ 0x428A241100)) & 0x10602481800uLL)) ^ *(void *)(v70 + 8 * (v162 ^ 0x5A))) >> 8);
  LODWORD(v122) = (((((*(void *)(v70 + 8 * (v166 ^ 0x5A)) >> 3) & 0xCB8BBD3D00 ^ 0x880B802000)
                   - ((2 * ((*(void *)(v70 + 8 * (v166 ^ 0x5A)) >> 3) & 0xCB8BBD3D00 ^ 0x880B802000)) & 0x18400701200uLL)
                   - 0x52FAC61DCFC7B44ELL) ^ *(void *)(v70 + 8 * (v166 ^ 0x5A))) >> 8) ^ (((((v169 >> 3) & 0x168C4DCB00000000 ^ 0x80088800000000)
                                                                                            - ((2
                                                                                              * ((v169 >> 3) & 0x168C4DCB00000000 ^ 0x80088800000000)) & 0x118188000000000)
                                                                                            + 0x609DAE7494B577E9) ^ v169) >> 32) ^ (((((*(void *)(v70 + 8 * (v168 ^ 0x5A)) >> 3) & 0x4DCB8BBD0000 ^ 0x8880B800000) - ((2 * ((*(void *)(v70 + 8 * (v168 ^ 0x5A)) >> 3) & 0x4DCB8BBD0000 ^ 0x8880B800000)) & 0x881517280000uLL) + 0x2FC6761EBF9662CDLL) ^ *(void *)(v70 + 8 * (v168 ^ 0x5A))) >> 16) ^ (((((*(void *)(v70 + 8 * (v533 ^ 0x5A)) >> 3) & 0x8C4DCB8B000000 ^ 0xC428A000000) - 0x546F0C688EDB71EFLL - ((2 * ((*(void *)(v70 + 8 * (v533 ^ 0x5A)) >> 3) & 0x8C4DCB8B000000 ^ 0xC428A000000)) & 0x100830602000000uLL)) ^ *(void *)(v70 + 8 * (v533 ^ 0x5A))) >> 24);
  uint64_t v170 = *(unsigned __int8 *)(v60
                            + ((((v142 ^ 0x9939E44FLL)
                               - 2
                               * ((v142 ^ 0x9939E44FLL) & 0x5932A7BE ^ (unint64_t)(v142 & 0x30))
                               - 0x726D75E3A6CD5872) >> 24) ^ 0x8D928A1C59));
  uint64_t v171 = *(unsigned __int8 *)(v60 + (v159 ^ 0x23));
  unint64_t v172 = (v122 ^ 0x72AD072BLL)
       - ((2 * (v122 ^ 0x72AD072BLL)) & 0x11C4D408ELL)
       + 0x308E22E58E26A047;
  unint64_t v173 = (v159 ^ 0xEE1E4523)
       - 2 * ((v159 ^ 0xEE1E4523) & 0xB283AE3DLL ^ v159 & 8)
       - 0x280689FC4D7C51CBLL;
  uint64_t v174 = *(unsigned __int8 *)(v60
                            + ((((unsigned __int16)((((*(void *)(v70 + 8 * (v166 ^ 0x5A)) >> 3) & 0x3D00 ^ 0x2000)
                                                                    - ((2
                                                                      * ((*(void *)(v70 + 8 * (v166 ^ 0x5A)) >> 3) & 0x3D00 ^ 0x2000)) & 0x1200)
                                                                    + 19378) ^ *(_WORD *)(v70 + 8 * (v166 ^ 0x5A))) >> 8) ^ (((((v169 >> 3) & 0x168C4DCB00000000 ^ 0x80088800000000) - ((2 * ((v169 >> 3) & 0x168C4DCB00000000 ^ 0x80088800000000)) & 0x118188000000000) + 0x609DAE7494B577E9) ^ v169) >> 32) ^ (((((*(void *)(v70 + 8 * (v168 ^ 0x5A)) >> 3) & 0x8BBD0000 ^ 0xB800000) - ((2 * ((*(void *)(v70 + 8 * (v168 ^ 0x5A)) >> 3) & 0x8BBD0000 ^ 0xB800000)) & 0x17280000) - 1080663347) ^ *(_DWORD *)(v70 + 8 * (v168 ^ 0x5A))) >> 16) ^ (((((*(void *)(v70 + 8 * (v533 ^ 0x5A)) >> 3) & 0x8B000000 ^ 0x8A000000) + 1898221073 - ((2 * ((*(void *)(v70 + 8 * (v533 ^ 0x5A)) >> 3) & 0x8B000000 ^ 0x8A000000)) & 0x2000000)) ^ *(_DWORD *)(v70 + 8 * (v533 ^ 0x5A))) >> 24)) ^ 0x2BLL));
  uint64_t v175 = *(unsigned __int8 *)(v60
                            + ((((v164 ^ 0x49475D17)
                               - ((2 * (v164 ^ 0x49475D17)) & 0x1D79D5954uLL)
                               + 0x274669E8EBCEACAALL) >> 24) ^ 0x274669E8EBLL));
  uint64_t v176 = *(unsigned __int8 *)(v60
                            + (((unsigned __int16)((v122 ^ 0x72B)
                                                                  - ((2 * (v122 ^ 0x72B)) & 0x408E)
                                                                  - 24505) >> 8) ^ 0xA0));
  uint64_t v177 = *(unsigned __int8 *)(v60
                            + (((unsigned __int16)((v159 ^ 0x4523)
                                                                  - 2 * ((v159 ^ 0x4523) & 0xAE3D ^ v159 & 8)
                                                                  - 20939) >> 8) ^ 0xAELL));
  uint64_t v178 = *(unsigned __int8 *)(v60
                            + ((v165 ^ ((unsigned __int16)((((*(void *)(v70 + 8 * (v162 ^ 0x5A)) >> 3) & 0x3D00 ^ 0x1100)
                                                                           - 29167
                                                                           - ((2
                                                                             * ((*(void *)(v70 + 8 * (v162 ^ 0x5A)) >> 3) & 0x3D00 ^ 0x1100)) & 0x1800)) ^ *(_WORD *)(v70 + 8 * (v162 ^ 0x5A))) >> 8)) ^ 0x17));
  uint64_t v179 = *(unsigned __int8 *)(v60 + (v142 ^ 0x4FLL));
  uint64_t v180 = *(unsigned __int8 *)(v60
                            + (((unsigned __int16)((v164 ^ 0x5D17)
                                                                  - ((2 * (v164 ^ 0x5D17)) & 0x5954)
                                                                  - 21334) >> 8) ^ 0xACLL));
  uint64_t v181 = *(unsigned __int8 *)(v60 + ((v173 >> 24) ^ 0xD7F97603B2));
  uint64_t v182 = *(unsigned __int8 *)(v60
                            + (((unint64_t)((v142 ^ 0x9939E44F)
                                                                  - 2
                                                                  * ((v142 ^ 0x9939E44F) & 0x5932A7BE ^ v142 & 0x30)
                                                                  + 1496491918) >> 16) ^ 0x32));
  uint64_t v183 = *(unsigned __int8 *)(v60
                            + (((unsigned __int16)((v142 ^ 0xE44F)
                                                                  - 2 * ((v142 ^ 0xE44F) & 0xA7BE ^ v142 & 0x30)
                                                                  - 22642) >> 8) ^ 0xA7));
  uint64_t v184 = *(unsigned __int8 *)(v60 + (BYTE2(v173) ^ 0x83));
  uint64_t v185 = *(unsigned __int8 *)(v60
                            + ((((v164 ^ 0x49475D17)
                                                - ((2 * (v164 ^ 0x49475D17)) & 0xD79D5954)
                                                - 338776918) >> 16) ^ 0xCELL));
  uint64_t v186 = *(unsigned __int8 *)(v60 + (BYTE2(v172) ^ 0x26));
  LODWORD(v142) = (((((*(void *)(v70 + 8 * (v171 ^ 0x5A)) >> 3) & 0x4DCB8BBD0000 ^ 0x8880B800000)
                   - ((2 * ((*(void *)(v70 + 8 * (v171 ^ 0x5A)) >> 3) & 0x4DCB8BBD0000 ^ 0x8880B800000)) & 0x198713500000uLL)
                   + 0x2A439CD7C9A8699ELL) ^ *(void *)(v70 + 8 * (v171 ^ 0x5A))) >> 16) ^ (((((*(void *)(v70 + 8 * (v170 ^ 0x5A)) >> 3) & 0xCB8BBD3D00 ^ 0x880B802000)
                                                                                             - ((2
                                                                                               * ((*(void *)(v70 + 8 * (v170 ^ 0x5A)) >> 3) & 0xCB8BBD3D00 ^ 0x880B802000)) & 0x104077A6000uLL)
                                                                                             - 0x1E32045DCC004F55) ^ *(void *)(v70 + 8 * (v170 ^ 0x5A))) >> 8) ^ (((((*(void *)(v70 + 8 * (v175 ^ 0x5A)) >> 3) & 0x8C4DCB8B000000 ^ 0x8008880B000000) - ((2 * ((*(void *)(v70 + 8 * (v175 ^ 0x5A)) >> 3) & 0x8C4DCB8B000000 ^ 0x8008880B000000)) & 0x1088B0002000000uLL) - 0x6F3A1A6BDAD81CBFLL) ^ *(void *)(v70 + 8 * (v175 ^ 0x5A))) >> 24) ^ (((((*(void *)(v70 + 8 * (v174 ^ 0x5A)) >> 3) & 0x168C4DCB00000000 ^ 0x80088800000000) - ((2 * ((*(void *)(v70 + 8 * (v174 ^ 0x5A)) >> 3) & 0x168C4DCB00000000 ^ 0x80088800000000)) & 0x808090000000000uLL) + 0x4D7686848721AAC7) ^ *(void *)(v70 + 8 * (v174 ^ 0x5A))) >> 32);
  unint64_t v187 = *(void *)(v70 + 8 * (v177 ^ 0x5A));
  unint64_t v188 = *(void *)(v70 + 8 * (v180 ^ 0x5A));
  LODWORD(v180) = (((((*(void *)(v70 + 8 * (v178 ^ 0x5A)) >> 3) & 0x168C4DCB00000000 ^ 0x80088800000000)
                   - ((2 * ((*(void *)(v70 + 8 * (v178 ^ 0x5A)) >> 3) & 0x168C4DCB00000000 ^ 0x80088800000000)) & 0x4100A9600000000uLL)
                   - 0x7DE5D890942198B6) ^ *(void *)(v70 + 8 * (v178 ^ 0x5A))) >> 32) ^ (((((v187 >> 3) & 0x8C4DCB8B000000 ^ 0x8008880B000000)
                                                                                             - 0x1CA3E21365187DB6
                                                                                             + (~(2
                                                                                                * ((v187 >> 3) & 0x8C4DCB8B000000 ^ 0x8008880B000000)) | 0xE7E46EEBFFFFFFLL)) ^ v187) >> 24) ^ (((((*(void *)(v70 + 8 * (v179 ^ 0x5A)) >> 3) & 0x4DCB8BBD0000 ^ 0x8880B800000) - ((2 * ((*(void *)(v70 + 8 * (v179 ^ 0x5A)) >> 3) & 0x4DCB8BBD0000 ^ 0x8880B800000)) & 0x888015680000uLL) + 0xF4504EB6D773) ^ *(void *)(v70 + 8 * (v179 ^ 0x5A))) >> 16) ^ (((((*(void *)(v70 + 8 * (v176 ^ 0x5A)) >> 3) & 0xCB8BBD3D00 ^ 0x428A241100) - 0x556F0B688EDB71EFLL - ((2 * ((*(void *)(v70 + 8 * (v176 ^ 0x5A)) >> 3) & 0xCB8BBD3D00 ^ 0x428A241100)) & 0x10602481800uLL)) ^ *(void *)(v70 + 8 * (v176 ^ 0x5A))) >> 8) ^ 0x364EFDEE;
  unint64_t v534 = (((((*(void *)(v70 + 8 * (v186 ^ 0x5A)) >> 3) & 0xCB8BBD3D00 ^ 0x880B802000)
          - ((2 * ((*(void *)(v70 + 8 * (v186 ^ 0x5A)) >> 3) & 0xCB8BBD3D00 ^ 0x880B802000)) & 0x90105A0000uLL)
          + 0x2E43D57C3C2D4080) ^ *(void *)(v70 + 8 * (v186 ^ 0x5A))) >> 8) ^ (((((v188 >> 3) & 0x168C4DCB00000000 ^ 0x80088800000000)
                                                                                   - ((2
                                                                                     * ((v188 >> 3) & 0x168C4DCB00000000 ^ 0x80088800000000)) & 0x418120200000000)
                                                                                   - 0x7DF174EE294EEBDALL) ^ v188) >> 32) ^ (((((*(void *)(v70 + 8 * (v183 ^ 0x5A)) >> 3) & 0x4DCB8BBD0000 ^ 0x8880B800000) - ((2 * ((*(void *)(v70 + 8 * (v183 ^ 0x5A)) >> 3) & 0x4DCB8BBD0000 ^ 0x8880B800000)) & 0x118214300000uLL) + 0x59B9B8C56E189D76) ^ *(void *)(v70 + 8 * (v183 ^ 0x5A))) >> 16) ^ (((((*(void *)(v70 + 8 * (v184 ^ 0x5A)) >> 3) & 0x8C4DCB8B000000 ^ 0xC428A000000) - 0x546F0C688EDB71EFLL - ((2 * ((*(void *)(v70 + 8 * (v184 ^ 0x5A)) >> 3) & 0x8C4DCB8B000000 ^ 0xC428A000000)) & 0x100830602000000uLL)) ^ *(void *)(v70 + 8 * (v184 ^ 0x5A))) >> 24);
  uint64_t v189 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(v60 + ((v172 >> 24) ^ 0x308E22E58ELL)) ^ 0x5ALL));
  unint64_t v190 = (v189 & 0xB4626E5C5DE9EB96 ^ 0x40044405C010280) >> (v537 & 3) >> (v537 & 3 ^ 3);
  LODWORD(v185) = (((((*(void *)(v70 + 8 * (v182 ^ 0x5A)) >> 3) & 0xCB8BBD3D00 ^ 0x880B802000)
                   - ((2 * ((*(void *)(v70 + 8 * (v182 ^ 0x5A)) >> 3) & 0xCB8BBD3D00 ^ 0x880B802000)) & 0x181140A7000uLL)
                   + 0x35416E08E4578F9) ^ *(void *)(v70 + 8 * (v182 ^ 0x5A))) >> 8) ^ (((v190
                                                                                           - ((2 * v190) & 0xD00822D84556BE50)
                                                                                           + 0x6804116C22AB5F28) ^ v189) >> 32) ^ (((((*(void *)(v70 + 8 * (v181 ^ 0x5A)) >> 3) & 0x4DCB8BBD0000 ^ 0xC428A240000) - 0x556E0C688EDB71EFLL - ((2 * ((*(void *)(v70 + 8 * (v181 ^ 0x5A)) >> 3) & 0x4DCB8BBD0000 ^ 0xC428A240000)) & 0x830602480000uLL)) ^ *(void *)(v70 + 8 * (v181 ^ 0x5A))) >> 16) ^ (((((*(void *)(v70 + 8 * (v185 ^ 0x5A)) >> 3) & 0x8C4DCB8B000000 ^ 0x8008880B000000) - ((2 * ((*(void *)(v70 + 8 * (v185 ^ 0x5A)) >> 3) & 0x8C4DCB8B000000 ^ 0x8008880B000000)) & 0x8199516000000uLL) - 0x57FBC1056433A774) ^ *(void *)(v70 + 8 * (v185 ^ 0x5A))) >> 24);
  unint64_t v191 = (v142 ^ 0xE0341065)
       - ((2 * (v142 ^ 0xE0341065)) & 0x18E17F530)
       + 0x3ECD0E67C70BFA98;
  LODWORD(v190) = (((v180 - ((2 * v180) & 0xA0742EF8) + 1345984380) & 0xF18D822D ^ 0x18D0229)
                 + ((v180 - ((2 * v180) & 0xA0742EF8) + 1345984380) ^ 0xF230B496)) ^ (v180
                                                                                    - ((2 * v180) & 0xA0742EF8)
                                                                                    + 1345984380) & 0xF18D822D;
  unint64_t v192 = (v190 ^ 0xF0008004)
       - (unint64_t)((2 * (v190 ^ 0xF0008004)) & 0x2C78FD3C)
       + 0x164B198E163C7E9ELL;
  uint64_t v193 = *(unsigned __int8 *)(v60
                            + (((((v180 - ((2 * v180) & 0xF8) + 124) & 0x2D ^ 0x29)
                                                + ((v180 - ((2 * v180) & 0xF8) + 124) ^ 0x96)) ^ (v180
                                                                                                - ((2 * v180) & 0xF8)
                                                                                                + 124) & 0x2D) ^ 4));
  uint64_t v194 = *(unsigned __int8 *)(v60 + (v185 ^ 0xEALL));
  unint64_t v195 = (v185 ^ 0x50D0BBEALL)
       - ((2 * (v185 ^ 0x50D0BBEALL)) & 0x1828A0E3ALL)
       + 0x1AFA7365C145071DLL;
  uint64_t v196 = *(unsigned __int8 *)(v60 + (BYTE1(v195) ^ 7));
  uint64_t v197 = *(unsigned __int8 *)(v60 + (v142 ^ 0x65));
  uint64_t v198 = *(unsigned __int8 *)(v60 + (BYTE2(v195) ^ 0x45));
  unint64_t v199 = *(void *)(v70
                   + 8
                   * (*(unsigned __int8 *)(v60
                                         + ((((v142 ^ 0xE0341065)
                                                             - ((2 * (v142 ^ 0xE0341065)) & 0x8E17F530)
                                                             - 955516264) >> 16) ^ 0xBLL)) ^ 0x5ALL));
  unint64_t v200 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(v60 + ((v192 >> 24) ^ 0x164B198E16)) ^ 0x5ALL));
  unint64_t v201 = *(void *)(v70
                   + 8
                   * (*(unsigned __int8 *)(v60
                                         + (((unsigned __int16)((v534 ^ 0x13FA)
                                                                               - ((2 * (v534 ^ 0x13FA)) & 0x8346)
                                                                               - 15965) >> 8) ^ 0xC1)) ^ 0x5ALL));
  LODWORD(v200) = (((((v200 >> 3) & 0x168C4DCB00000000 ^ 0x80088800000000)
                   - ((2 * ((v200 >> 3) & 0x168C4DCB00000000 ^ 0x80088800000000)) & 0x2808180200000000)
                   + 0x7555BC11883C1557) ^ v200) >> 32) ^ (((((v199 >> 3) & 0x8C4DCB8B000000 ^ 0x8008880B000000)
                                                             - ((2
                                                               * ((v199 >> 3) & 0x8C4DCB8B000000 ^ 0x8008880B000000)) & 0x1180B8716000000)
                                                             - 0x7E50483850494AB6) ^ v199) >> 24) ^ (((((v201 >> 3) & 0xCB8BBD3D00 ^ 0x880B802000) - ((2 * ((v201 >> 3) & 0xCB8BBD3D00 ^ 0x880B802000)) & 0x18002707A00) - 0x373FD82BAAC5020DLL) ^ v201) >> 8) ^ (((((*(void *)(v70 + 8 * (v194 ^ 0x5A)) >> 3) & 0x4DCB8BBD0000 ^ 0x8880B800000) - ((2 * ((*(void *)(v70 + 8 * (v194 ^ 0x5A)) >> 3) & 0x4DCB8BBD0000 ^ 0x8880B800000)) & 0x139013100000uLL) - 0x4FBE7427C2774E05) ^ *(void *)(v70 + 8 * (v194 ^ 0x5A))) >> 16);
  unint64_t v202 = (((*(void *)(v70 + 8 * (v193 ^ 0x5A)) >> 3) & 0xCB8BBD3D00 ^ 0x428A241100)
        - 0x556F0C688EDB71EFLL
        - ((2 * ((*(void *)(v70 + 8 * (v193 ^ 0x5A)) >> 3) & 0xCB8BBD3D00 ^ 0x428A241100)) & 0x10602481800)) ^ *(void *)(v70 + 8 * (v193 ^ 0x5A));
  unint64_t v203 = *(void *)(v70
                   + 8
                   * (*(unsigned __int8 *)(v60
                                         + ((((v534 ^ 0x1EC813FA)
                                                             - ((2 * (v534 ^ 0x1EC813FA)) & 0x10138346)
                                                             + 134857123) >> 16) ^ 9)) ^ 0x5ALL));
  unint64_t v204 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(v60 + ((v191 >> 24) ^ 0x3ECD0E67C7)) ^ 0x5ALL));
  unint64_t v205 = *(void *)(v70
                   + 8
                   * (*(unsigned __int8 *)(v60
                                         + ((((v534 ^ 0x1EC813FALL)
                                            - (unint64_t)((2 * (v534 ^ 0x1EC813FA)) & 0x10138346)
                                            - 0x2D4BA739F7F63E5DLL) >> 24) ^ 0xD2B458C608)) ^ 0x5ALL));
  LODWORD(v187) = (((((v203 >> 3) & 0x4DCB8BBD0000 ^ 0xC428A240000)
                   - 0x556F0C688EDB71EFLL
                   - ((2 * ((v203 >> 3) & 0x4DCB8BBD0000 ^ 0xC428A240000)) & 0x830602480000)) ^ v203) >> 16) ^ (v202 >> 8) ^ (((((*(void *)(v70 + 8 * (v196 ^ 0x5A)) >> 3) & 0x8C4DCB8B000000 ^ 0x8008880B000000) - ((2 * ((*(void *)(v70 + 8 * (v196 ^ 0x5A)) >> 3) & 0x8C4DCB8B000000 ^ 0x8008880B000000)) & 0x81B9402000000uLL) + 0x53452DEE25FE2781) ^ *(void *)(v70 + 8 * (v196 ^ 0x5A))) >> 24) ^ (((((v204 >> 3) & 0x168C4DCB00000000 ^ 0x80088800000000) - ((2 * ((v204 >> 3) & 0x168C4DCB00000000 ^ 0x80088800000000)) & 0x2808118000000000) - 0xBD9473BDE606D7CLL) ^ v204) >> 32);
  unint64_t v206 = (((((*(void *)(v70 + 8 * (v198 ^ 0x5A)) >> 3) & 0xCB8BBD3D00 ^ 0x428A241100)
          - 0x556F0C688EDB71EFLL
          - ((2 * ((*(void *)(v70 + 8 * (v198 ^ 0x5A)) >> 3) & 0xCB8BBD3D00 ^ 0x428A241100)) & 0x10602481800uLL)) ^ *(void *)(v70 + 8 * (v198 ^ 0x5A))) >> 8) ^ (((((v205 >> 3) & 0x168C4DCB00000000 ^ 0x80088800000000) - ((2 * ((v205 >> 3) & 0x168C4DCB00000000 ^ 0x80088800000000)) & 0x118101200000000) + 0x69CC883DBF490988) ^ v205) >> 32) ^ (((((*(void *)(v70 + 8 * (v197 ^ 0x5A)) >> 3) & 0x4DCB8BBD0000 ^ 0x8880B800000) - ((2 * ((*(void *)(v70 + 8 * (v197 ^ 0x5A)) >> 3) & 0x4DCB8BBD0000 ^ 0x8880B800000)) & 0x1A9513580000uLL) + 0x18651D7ABDAE3818) ^ *(void *)(v70 + 8 * (v197 ^ 0x5A))) >> 16);
  unint64_t v207 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(v60 + (BYTE1(v192) ^ 0x7ELL)) ^ 0x5ALL));
  uint64_t v208 = *(unsigned __int8 *)(v60 + ((v195 >> 24) ^ 0x1AFA7365C1));
  unint64_t v531 = v206 ^ (((((v207 >> 3) & 0x8C4DCB8B000000 ^ 0xC428A000000)
                 - 0x546F0C688EDB71EFLL
                 - ((2 * ((v207 >> 3) & 0x8C4DCB8B000000 ^ 0xC428A000000)) & 0x100830602000000)) ^ v207) >> 24);
  unint64_t v209 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(v60 + (BYTE1(v191) ^ 0xFALL)) ^ 0x5ALL));
  unint64_t v210 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(v60 + (BYTE2(v192) ^ 0x3CLL)) ^ 0x5ALL));
  unint64_t v211 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(v60 + (v534 ^ 0xFALL)) ^ 0x5ALL));
  LODWORD(v210) = (((((v209 >> 3) & 0x8C4DCB8B000000 ^ 0x8008880B000000)
                   - ((2 * ((v209 >> 3) & 0x8C4DCB8B000000 ^ 0x8008880B000000)) & 0x18801316000000)
                   + 0x655FD219EF4E7D1ELL) ^ v209) >> 24) ^ (((((*(void *)(v70 + 8 * (v208 ^ 0x5A)) >> 3) & 0x4DCB8BBD0000 ^ 0xC428A240000)
                                                             - 0x556F0C688EDB71EFLL
                                                             - ((2
                                                               * ((*(void *)(v70 + 8 * (v208 ^ 0x5A)) >> 3) & 0x4DCB8BBD0000 ^ 0xC428A240000)) & 0x830602480000uLL)) ^ *(void *)(v70 + 8 * (v208 ^ 0x5A))) >> 16) ^ (((((v210 >> 3) & 0x168C4DCB00000000 ^ 0x14000C4200000000) - 0x556F0C688EDB71EFLL - ((2 * ((v210 >> 3) & 0x168C4DCB00000000 ^ 0x14000C4200000000)) & 0x500830600000000)) ^ v210) >> 32) ^ (((((v211 >> 3) & 0xCB8BBD3D00 ^ 0x880B802000) - ((2 * ((v211 >> 3) & 0xCB8BBD3D00 ^ 0x880B802000)) & 0x19514426200) - 0xCBD4F3111DC0C65) ^ v211) >> 8);
  unint64_t v212 = (v210 ^ 0x48C88D3BLL)
       - ((2 * (v210 ^ 0x48C88D3BLL)) & 0x1EEE41402)
       + 0x1811445FF7720A01;
  unint64_t v213 = (v200 ^ 0xE626A657)
       - ((2 * (v200 ^ 0xE626A657)) & 0x1295AF090)
       - 0x4AC6A75E6B5287B8;
  LOBYTE(v195) = (((((v203 >> 3) & 0x8BBD0000 ^ 0x8A240000)
                  + 1898221073
                  - ((2 * ((v203 >> 3) & 0x8BBD0000 ^ 0x8A240000)) & 0x2480000)) ^ v203) >> 16) ^ BYTE1(v202) ^ (((((*(void *)(v70 + 8 * (v196 ^ 0x5A)) >> 3) & 0x8B000000 ^ 0xB000000) - ((2 * ((*(void *)(v70 + 8 * (v196 ^ 0x5A)) >> 3) & 0x8B000000 ^ 0xB000000)) & 0x2000000) + 637413249) ^ *(_DWORD *)(v70 + 8 * (v196 ^ 0x5A))) >> 24) ^ (((((v204 >> 3) & 0x168C4DCB00000000 ^ 0x80088800000000) - ((2 * ((v204 >> 3) & 0x168C4DCB00000000 ^ 0x80088800000000)) & 0x2808118000000000) - 0xBD9473BDE606D7CLL) ^ v204) >> 32);
  unint64_t v214 = (v187 ^ 0x33B1106)
       - ((2 * (v187 ^ 0x33B1106)) & 0x7A86DCB8)
       + 0x50FF9FBC3D436E5CLL;
  uint64_t v215 = (v214 >> 24) ^ 0x50FF9FBC3DLL;
  unint64_t v216 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(v60 + (v200 ^ 0x57)) ^ 0x5ALL));
  unint64_t v217 = *(void *)(v70
                   + 8
                   * (*(unsigned __int8 *)(v60
                                         + (((unsigned __int16)((v187 ^ 0x1106)
                                                                               - ((2 * (v187 ^ 0x1106)) & 0xDCB8)
                                                                               + 28252) >> 8) ^ 0x6ELL)) ^ 0x5ALL));
  LODWORD(v216) = (((((v217 >> 3) & 0x168C4DCB00000000 ^ 0x14000C4200000000)
                   - 0x556F0C688EDB71EFLL
                   - ((2 * ((v217 >> 3) & 0x168C4DCB00000000 ^ 0x14000C4200000000)) & 0x500830600000000)) ^ v217) >> 32) ^ (((((v216 >> 3) & 0x8C4DCB8B000000 ^ 0x8008880B000000) - ((2 * ((v216 >> 3) & 0x8C4DCB8B000000 ^ 0x8008880B000000)) & 0x1189A9706000000) + 0x408CEF6FC77AEB57) ^ v216) >> 24);
  unint64_t v218 = *(void *)(v70
                   + 8
                   * (*(unsigned __int8 *)(v60
                                         + (((unsigned __int16)((v531 ^ 0xFE3E)
                                                                               - ((2 * (v531 ^ 0xFE3E)) & 0xF460)
                                                                               - 1488) >> 8) ^ 0xFALL)) ^ 0x5ALL));
  unint64_t v219 = *(void *)(v70
                   + 8
                   * (*(unsigned __int8 *)(v60
                                         + ((((v210 ^ 0x48C88D3B)
                                                             - ((2 * (v210 ^ 0x48C88D3B)) & 0xEEE41402)
                                                             - 143521279) >> 16) ^ 0x72)) ^ 0x5ALL));
  uint64_t v220 = *(unsigned __int8 *)(v60 + (BYTE2(v214) ^ 0x43));
  LODWORD(v214) = v216 ^ (((((v218 >> 3) & 0xCB8BBD3D00 ^ 0x880B802000)
                          - ((2 * ((v218 >> 3) & 0xCB8BBD3D00 ^ 0x880B802000)) & 0x11301502000)
                          - 0x3ACC7621F17EF16) ^ v218) >> 8) ^ (((((v219 >> 3) & 0x4DCB8BBD0000 ^ 0x8880B800000)
                                                                  - ((2
                                                                    * ((v219 >> 3) & 0x4DCB8BBD0000 ^ 0x8880B800000)) & 0x931001400000)
                                                                  - 0x44D78667BB5D6DB4) ^ v219) >> 16);
  unint64_t v221 = *(void *)(v70
                   + 8
                   * (*(unsigned __int8 *)(v60
                                         + ((((v531 ^ 0xEEB4FE3E)
                                                             - ((2 * (v531 ^ 0xEEB4FE3E)) & 0xDDCFF460)
                                                             + 1860696624) >> 16) ^ 0xE7)) ^ 0x5ALL));
  unint64_t v222 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(v60 + ((v212 >> 24) ^ 0x1811445FF7)) ^ 0x5ALL));
  LODWORD(v216) = (((((v221 >> 3) & 0xCB8BBD3D00 ^ 0x428A241100)
                   - 0x556F0C688EDB71EFLL
                   - ((2 * ((v221 >> 3) & 0xCB8BBD3D00 ^ 0x428A241100)) & 0x10602481800)) ^ v221) >> 8) ^ (((((*(void *)(v70 + 8 * (v220 ^ 0x5A)) >> 3) & 0x168C4DCB00000000 ^ 0x80088800000000) - ((2 * ((*(void *)(v70 + 8 * (v220 ^ 0x5A)) >> 3) & 0x168C4DCB00000000 ^ 0x80088800000000)) & 0x2D08811200000000uLL) - 0x80A9F46B944B946) ^ *(void *)(v70 + 8 * (v220 ^ 0x5A))) >> 32) ^ (((((v222 >> 3) & 0x4DCB8BBD0000 ^ 0xC428A240000) - 0x556E0C688EDB71EFLL - ((2 * ((v222 >> 3) & 0x4DCB8BBD0000 ^ 0xC428A240000)) & 0x830602480000)) ^ v222) >> 16);
  unint64_t v223 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(v60 + (BYTE1(v213) ^ 0x78)) ^ 0x5ALL));
  LODWORD(v223) = v216 ^ (((((v223 >> 3) & 0x8C4DCB8B000000 ^ 0x8008880B000000)
                          - ((2 * ((v223 >> 3) & 0x8C4DCB8B000000 ^ 0x8008880B000000)) & 0x18080114000000)
                          + 0x663F16248AAB17C8) ^ v223) >> 24);
  unint64_t v224 = *(void *)(v70
                   + 8
                   * (*(unsigned __int8 *)(v60
                                         + ((((v531 ^ 0xEEB4FE3ELL)
                                            - (unint64_t)((2 * (v531 ^ 0xEEB4FE3E)) & 0xDDCFF460)
                                            + 0x680F68B26EE7FA30) >> 24) ^ 0x680F68B26ELL)) ^ 0x5ALL));
  unint64_t v225 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(v60 + (v210 ^ 0x3BLL)) ^ 0x5ALL));
  unint64_t v226 = (((((v225 >> 3) & 0xCB8BBD3D00 ^ 0x428A241100)
          - 0x556F0C688EDB71EFLL
          - ((2 * ((v225 >> 3) & 0xCB8BBD3D00 ^ 0x428A241100)) & 0x10602481800)) ^ v225) >> 8) ^ (((((v224 >> 3) & 0x168C4DCB00000000 ^ 0x14000C4200000000) - 0x556F0C688EDB71EFLL - ((2 * ((v224 >> 3) & 0x168C4DCB00000000 ^ 0x14000C4200000000)) & 0x500830600000000)) ^ v224) >> 32);
  unint64_t v227 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(v60 + (BYTE2(v213) ^ 0xADLL)) ^ 0x5ALL));
  unint64_t v228 = v226 ^ (((((v227 >> 3) & 0x4DCB8BBD0000 ^ 0x8880B800000)
                 - ((2 * ((v227 >> 3) & 0x4DCB8BBD0000 ^ 0x8880B800000)) & 0x9B8514500000)
                 + 0x5D547FF6FE6811FELL) ^ v227) >> 16);
  unint64_t v229 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(v60 + v215) ^ 0x5ALL));
  unint64_t v538 = v228 ^ (((((v229 >> 3) & 0x8C4DCB8B000000 ^ 0xC428A000000)
                 - 0x546F0C688EDB71EFLL
                 - ((2 * ((v229 >> 3) & 0x8C4DCB8B000000 ^ 0xC428A000000)) & 0x100830602000000)) ^ v229) >> 24);
  unint64_t v230 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(v60 + (BYTE1(v212) ^ 0xALL)) ^ 0x5ALL));
  uint64_t v231 = *(unsigned __int8 *)(v60 + ((v213 >> 24) ^ 0xB53958A194));
  unint64_t v232 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(v60 + (v195 ^ 6)) ^ 0x5ALL));
  unint64_t v233 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(v60 + (v531 ^ 0x3ELL)) ^ 0x5ALL));
  LODWORD(v230) = (((((*(void *)(v70 + 8 * (v231 ^ 0x5A)) >> 3) & 0x8C4DCB8B000000 ^ 0x8008880B000000)
                   - ((2 * ((*(void *)(v70 + 8 * (v231 ^ 0x5A)) >> 3) & 0x8C4DCB8B000000 ^ 0x8008880B000000)) & 0x81B9014000000uLL)
                   + 0x55972DD80EF2C95ELL) ^ *(void *)(v70 + 8 * (v231 ^ 0x5A))) >> 24) ^ (((((v230 >> 3) & 0x4DCB8BBD0000 ^ 0x8880B800000)
                                                                                             - ((2
                                                                                               * ((v230 >> 3) & 0x4DCB8BBD0000 ^ 0x8880B800000)) & 0x1B9101080000)
                                                                                             - 0x1C45D0331F7977DALL) ^ v230) >> 16) ^ (((((v232 >> 3) & 0x168C4DCB00000000 ^ 0x80088800000000) - ((2 * ((v232 >> 3) & 0x168C4DCB00000000 ^ 0x80088800000000)) & 0x410981200000000) + 0x2A5B7E1D77D01D38) ^ v232) >> 32) ^ (((((v233 >> 3) & 0xCB8BBD3D00 ^ 0x880B802000) - ((2 * ((v233 >> 3) & 0xCB8BBD3D00 ^ 0x880B802000)) & 0x9300121000) + 0xDDC44B884ELL) ^ v233) >> 8);
  unint64_t v234 = (v223 ^ 0xEC0CA0BDLL)
       - ((2 * (v223 ^ 0xEC0CA0BDLL)) & 0x16B8F4C94)
       + 0x5DA62D85B5C7A64ALL;
  LODWORD(v230) = (v230 ^ 0x93D8FC40) + 1340253664 + ((2 * v230) & 0x9FC54BBE ^ 0xF87EB77F);
  LODWORD(v229) = ((2 * v230) & 0xFDDFE44C) + (v230 ^ 0x7EEFF226);
  unint64_t v235 = (v229 - 2129654310)
       - ((2 * (v229 - 2129654310)) & 0x1FC3E7FACLL)
       - 0x4D70112401E0C02ALL;
  unint64_t v236 = (v214 ^ 0x8F113E00)
       - 2 * ((v214 ^ 0x8F113E00) & 0x1A141B2B ^ v214 & 3)
       + 0x9C6E7B71A141B28;
  uint64_t v237 = (v236 >> 24) ^ 0x9C6E7B71ALL;
  LODWORD(v218) = *(unsigned __int8 *)(v60
                                     + ((((v223 ^ 0xEC0CA0BD)
                                                         - ((2 * (v223 ^ 0xEC0CA0BD)) & 0x6B8F4C94)
                                                         - 1245206966) >> 16) ^ 0xC7));
  unint64_t v238 = *(void *)(v70
                   + 8
                   * ((((((v218 - 1779266379 - ((2 * v218) & 0x16A)) ^ 0x6A0D7331)
                       + ((v218 - 1779266379 - ((2 * v218) & 0x16A)) ^ 0x95F28CB5)
                       + 1) ^ 0xFFFFFFFE)
                     + ((v218 - 1779266379 - ((2 * v218) & 0x16A)) ^ 0x95F28CB5)) ^ 0x21));
  unint64_t v239 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(v60 + v214) ^ 0x5ALL));
  unint64_t v240 = (((((v238 >> 3) & 0x8C4DCB8B000000 ^ 0xC428A000000)
          - 0x556F0C688EDB71EFLL
          - ((2 * ((v238 >> 3) & 0x8C4DCB8B000000 ^ 0xC428A000000)) & 0x100830602000000)) ^ v238) >> 24) ^ (((v239 >> 3) & 0x9C108800000 ^ v239 & 0xBBF52C800000 | (v239 >> 3) & 0x440A833D0000 ^ v239 & 0x440AD37F0000) >> 16);
  unint64_t v241 = *(void *)(v70
                   + 8
                   * (*(unsigned __int8 *)(v60
                                         + (((unsigned __int16)((v538 ^ 0xD45E)
                                                                               - ((2 * (v538 ^ 0xD45E)) & 0x3346)
                                                                               + 6563) >> 8) ^ 0x19)) ^ 0x5ALL));
  unint64_t v242 = v240 ^ (((((v241 >> 3) & 0x168C4DCB00000000 ^ 0x80088800000000)
                 - ((2 * ((v241 >> 3) & 0x168C4DCB00000000 ^ 0x80088800000000)) & 0x2418011400000000)
                 - 0x2581FD553037444CLL) ^ v241) >> 32);
  unint64_t v243 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(v60 + (BYTE2(v235) ^ 0x1FLL)) ^ 0x5ALL));
  unint64_t v244 = v242 ^ (((((v243 >> 3) & 0xCB8BBD3D00 ^ 0x428A241100)
                 - 0x556F0B688EDB71EFLL
                 - ((2 * ((v243 >> 3) & 0xCB8BBD3D00 ^ 0x428A241100)) & 0x10602481800)) ^ v243) >> 8);
  unint64_t v245 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(v60 + ((v234 >> 24) ^ 0x5DA62D85B5)) ^ 0x5ALL));
  unint64_t v246 = *(void *)(v70
                   + 8
                   * (*(unsigned __int8 *)(v60
                                         + ((((v538 ^ 0x909CD45E)
                                                             - ((2 * (v538 ^ 0x909CD45E)) & 0x57663346)
                                                             - 1414325853) >> 16) ^ 0xB3)) ^ 0x5ALL));
  unint64_t v247 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(v60 + ((v235 >> 24) ^ 0xB28FEEDBFELL)) ^ 0x5ALL));
  unint64_t v248 = (((((v246 >> 3) & 0x4DCB8BBD0000 ^ 0x8880B800000)
          - ((2 * ((v246 >> 3) & 0x4DCB8BBD0000 ^ 0x8880B800000)) & 0x21704180000)
          - 0xADE5CD449F3772DLL) ^ v246) >> 16) ^ (((((v245 >> 3) & 0xCB8BBD3D00 ^ 0x880B802000)
                                                   - ((2 * ((v245 >> 3) & 0xCB8BBD3D00 ^ 0x880B802000)) & 0x1104106000)
                                                   + 0x70A1CC389208B0FALL) ^ v245) >> 8) ^ (((((v247 >> 3) & 0x8C4DCB8B000000 ^ 0xC428A000000)
                                                                                            - 0x546F0C688EDB71EFLL
                                                                                            - ((2
                                                                                              * ((v247 >> 3) & 0x8C4DCB8B000000 ^ 0xC428A000000)) & 0x100830602000000)) ^ v247) >> 24);
  unint64_t v249 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(v60 + (BYTE1(v236) ^ 0x1BLL)) ^ 0x5ALL));
  unint64_t v250 = v248 ^ (((((v249 >> 3) & 0x168C4DCB00000000 ^ 0x80088800000000)
                 - ((2 * ((v249 >> 3) & 0x168C4DCB00000000 ^ 0x80088800000000)) & 0x25189A9200000000)
                 + 0x12CF5F7D177AB508) ^ v249) >> 32);
  unint64_t v251 = *(void *)(v70
                   + 8
                   * (*(unsigned __int8 *)(v60
                                         + ((((v538 ^ 0x909CD45ELL)
                                            - ((2 * (v538 ^ 0x909CD45ELL)) & 0x157663346uLL)
                                            - 0x14CC2761544CE65DLL) >> 24) ^ 0xEB33D89EABLL)) ^ 0x5ALL));
  unint64_t v252 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(v60 + (v229 - 38)) ^ 0x5ALL));
  unint64_t v253 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(v60 + (BYTE2(v236) ^ 0x14)) ^ 0x5ALL));
  unint64_t v254 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(v60 + (v223 ^ 0xBDLL)) ^ 0x5ALL));
  unint64_t v255 = (((((v252 >> 3) & 0x4DCB8BBD0000 ^ 0x8880B800000)
          - ((2 * ((v252 >> 3) & 0x4DCB8BBD0000 ^ 0x8880B800000)) & 0x88502100000)
          + 0x7A57B676A50AA286) ^ v252) >> 16) ^ (((((v251 >> 3) & 0xCB8BBD3D00 ^ 0x880B802000)
                                                    - ((2 * ((v251 >> 3) & 0xCB8BBD3D00 ^ 0x880B802000)) & 0x181027A7A00)
                                                    - 0x46540E2F0AC282BFLL) ^ v251) >> 8) ^ (((((v253 >> 3) & 0x8C4DCB8B000000 ^ 0x8008880B000000)
                                                                                             - ((2
                                                                                               * ((v253 >> 3) & 0x8C4DCB8B000000 ^ 0x8008880B000000)) & 0x80206000000)
                                                                                             - 0x599D6BEADC292530) ^ v253) >> 24) ^ (((((v254 >> 3) & 0x168C4DCB00000000 ^ 0x80088800000000) - ((2 * ((v254 >> 3) & 0x168C4DCB00000000 ^ 0x80088800000000)) & 0x25088A1000000000) + 0x52D7670856D3E9EALL) ^ v254) >> 32);
  unint64_t v256 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(v60 + (BYTE1(v235) ^ 0x3FLL)) ^ 0x5ALL));
  unint64_t v257 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(v60 + v237) ^ 0x5ALL));
  unint64_t v258 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(v60 + (BYTE1(v234) ^ 0xA6)) ^ 0x5ALL));
  unint64_t v259 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(v60 + (v538 ^ 0x5ELL)) ^ 0x5ALL));
  unint64_t v260 = ((((v259 >> 3) & 0x168C4DCB00000000 ^ 0x80088800000000)
         - ((v259 >> 2) & 0x2C00800200000000)
         - 0x408CADFE75A8D5BDLL) ^ v259) >> 32;
  int v261 = (v260 & 0x800000 ^ 0xDDF756EF) + 2 * (v260 & 0x800000);
  int v262 = (((((v257 >> 3) & 0x4DCB8BBD0000 ^ 0x8880B800000)
          - ((2 * ((v257 >> 3) & 0x4DCB8BBD0000 ^ 0x8880B800000)) & 0x881514600000)
          - 0x6B402BD5658F5FE5) ^ v257) >> 16) ^ (((((v258 >> 3) & 0x8C4DCB8B000000 ^ 0x8008880B000000)
                                                    - ((2 * ((v258 >> 3) & 0x8C4DCB8B000000 ^ 0x8008880B000000)) & 0x8801010000000)
                                                    + 0x54622878986FC0) ^ v258) >> 24) ^ (((((v256 >> 3) & 0xCB8BBD3D00 ^ 0x428A241100)
                                                                                            - 0x556F0B688EDB71EFLL
                                                                                            - ((2
                                                                                              * ((v256 >> 3) & 0xCB8BBD3D00 ^ 0x428A241100)) & 0x10602481800)) ^ v256) >> 8);
  int v263 = v261 + 716958199;
  if (((v261 + 570992913) & (v262 ^ 0xCD000000)) != 0) {
    int v263 = -425027627 - v261;
  }
  int v264 = ((v262 ^ 0xCD77A5F5) - 145965286 + v263) ^ v260 & 0xFF7FFFFF;
  unint64_t v265 = (v264 ^ 0xF5D83A69) - (unint64_t)((2 * (v264 ^ 0xF5D83A69)) & 0x9560B234) + 0x3FE916F94AB0591ALL;
  unint64_t v266 = (v255 ^ 0x81201BD1)
       - ((2 * (v255 ^ 0x81201BD1)) & 0x570577FE)
       - 0x1D9F3ECAD47D4401;
  unint64_t v267 = *(void *)(v70
                   + 8
                   * (*(unsigned __int8 *)(v60
                                         + (((unsigned __int16)((v244 ^ 0xE6A)
                                                                               - ((2 * (v244 ^ 0xE6A)) & 0x8048)
                                                                               + 16420) >> 8) ^ 0x40)) ^ 0x5ALL));
  unint64_t v268 = *(void *)(v70
                   + 8
                   * (*(unsigned __int8 *)(v60
                                         + (((unsigned __int16)((v250 ^ 0xE88E)
                                                                               - ((2 * (v250 ^ 0xE88E)) & 0xFA0)
                                                                               + 2000) >> 8) ^ 7)) ^ 0x5ALL));
  unint64_t v269 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(v60 + (v255 ^ 0xD1)) ^ 0x5ALL));
  unint64_t v270 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(v60 + ((v265 >> 24) ^ 0x3FE916F94ALL)) ^ 0x5ALL));
  unint64_t v271 = (((((v268 >> 3) & 0x8C4DCB8B000000 ^ 0xC428A000000)
          - 0x556F0C688EDB71EFLL
          - ((2 * ((v268 >> 3) & 0x8C4DCB8B000000 ^ 0xC428A000000)) & 0x100830602000000)) ^ v268) >> 24) ^ (((((v267 >> 3) & 0x4DCB8BBD0000 ^ 0x8880B800000) - ((2 * ((v267 >> 3) & 0x4DCB8BBD0000 ^ 0x8880B800000)) & 0x103020000) + 0x1050B02491C1F89CLL) ^ v267) >> 16) ^ (((((v269 >> 3) & 0x168C4DCB00000000 ^ 0x80088800000000) - ((2 * ((v269 >> 3) & 0x168C4DCB00000000 ^ 0x80088800000000)) & 0xC00909200000000) - 0x19EC17B68D773082) ^ v269) >> 32) ^ (((((v270 >> 3) & 0xCB8BBD3D00 ^ 0x428A241100) - 0x556F0B688EDB71EFLL - ((2 * ((v270 >> 3) & 0xCB8BBD3D00 ^ 0x428A241100)) & 0x10602481800)) ^ v270) >> 8);
  unint64_t v272 = *(void *)(v70
                   + 8
                   * (*(unsigned __int8 *)(v60
                                         + ((((v250 ^ 0xC532E88E)
                                                             - ((2 * (v250 ^ 0xC532E88E)) & 0x3B800FA0)
                                                             + 499124176) >> 16) ^ 0xC0)) ^ 0x5ALL));
  unint64_t v273 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(v60 + (BYTE1(v266) ^ 0xBBLL)) ^ 0x5ALL));
  unint64_t v274 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(v60 + (v264 ^ 0x69)) ^ 0x5ALL));
  unint64_t v275 = *(void *)(v70
                   + 8
                   * (*(unsigned __int8 *)(v60
                                         + ((((v244 ^ 0x26410E6A)
                                                             - ((2 * (v244 ^ 0x26410E6A)) & 0xB3588048)
                                                             + 1504460836) >> 16) ^ 0xACLL)) ^ 0x5ALL));
  LODWORD(v275) = (((((v273 >> 3) & 0x8C4DCB8B000000 ^ 0xC428A000000)
                   - 0x556F0C688EDB71EFLL
                   - ((2 * ((v273 >> 3) & 0x8C4DCB8B000000 ^ 0xC428A000000)) & 0x100830602000000)) ^ v273) >> 24) ^ (((((v272 >> 3) & 0x4DCB8BBD0000 ^ 0xC428A240000) - 0x556F0C688EDB71EFLL - ((2 * ((v272 >> 3) & 0x4DCB8BBD0000 ^ 0xC428A240000)) & 0x830602480000)) ^ v272) >> 16) ^ (((((v274 >> 3) & 0x168C4DCB00000000 ^ 0x80088800000000) - ((2 * ((v274 >> 3) & 0x168C4DCB00000000 ^ 0x80088800000000)) & 0x2918921000000000) - 0x21036D325CD47FDLL) ^ v274) >> 32) ^ (((((v275 >> 3) & 0xCB8BBD3D00 ^ 0x428A241100) - 0x556F0B688EDB71EFLL - ((2 * ((v275 >> 3) & 0xCB8BBD3D00 ^ 0x428A241100)) & 0x10602481800)) ^ v275) >> 8);
  unint64_t v276 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(v60 + (BYTE2(v266) ^ 0x82)) ^ 0x5ALL));
  unint64_t v277 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(v60 + (BYTE1(v265) ^ 0x59)) ^ 0x5ALL));
  unint64_t v278 = *(void *)(v70
                   + 8
                   * (*(unsigned __int8 *)(v60
                                         + ((((v244 ^ 0x26410E6ALL)
                                            - (unint64_t)((2 * (v244 ^ 0x26410E6A)) & 0xB3588048)
                                            + 0x45D9D1C659AC4024) >> 24) ^ 0x45D9D1C659)) ^ 0x5ALL));
  unint64_t v279 = (((v278 >> 3) & 0xCB8BBD3D00 ^ 0x880B802000)
        - ((2 * ((v278 >> 3) & 0xCB8BBD3D00 ^ 0x880B802000)) & 0x10402186000)
        - 0x1863585DCAF18DABLL) ^ v278;
  unint64_t v280 = *(void *)(v70
                   + 8
                   * (*(unsigned __int8 *)(v60
                                         + ((((v250 ^ 0xC532E88ELL)
                                            - (unint64_t)((2 * (v250 ^ 0xC532E88E)) & 0x3B800FA0)
                                            + 0x75B958B21DC007D0) >> 24) ^ 0x75B958B21DLL)) ^ 0x5ALL));
  unint64_t v532 = (((((v277 >> 3) & 0x168C4DCB00000000 ^ 0x14000C4200000000)
          - 0x556F0C688EDB71EFLL
          - ((2 * ((v277 >> 3) & 0x168C4DCB00000000 ^ 0x14000C4200000000)) & 0x500830600000000)) ^ v277) >> 32) ^ (((((v276 >> 3) & 0x8C4DCB8B000000 ^ 0x8008880B000000) - (a11 & (2 * ((v276 >> 3) & 0x8C4DCB8B000000 ^ 0x8008880B000000))) - 0x158EC74785396540) ^ v276) >> 24) ^ (v279 >> 8) ^ (((((v280 >> 3) & 0x4DCB8BBD0000 ^ 0x8880B800000) - ((2 * ((v280 >> 3) & 0x4DCB8BBD0000 ^ 0x8880B800000)) & 0x928207220000) + 0x67316B6517D14BA5) ^ v280) >> 16);
  unint64_t v281 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(v60 + (BYTE2(v265) ^ 0xB0)) ^ 0x5ALL));
  uint64_t v282 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(v60 + (v244 ^ 0x6ALL)) ^ 0x5ALL));
  unint64_t v283 = ((v282 ^ 0xBA623BBF03EEED57) - 0x10F2C82872CA6346) ^ ((v282 ^ 0x556F0C688EDB71EELL) + 1);
  uint64_t v284 = (v283 - 0x556F0C688EDB71EFLL - ((2 * v283) & 0x5521E72EE2491C22)) ^ v282;
  unint64_t v285 = v284 - ((2 * v284 - 0x21E59050E594C68ELL) & 0xB876061B10CE88BALL) - 0x34B7C51AEA631EEALL;
  unint64_t v286 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(v60 + (v250 ^ 0x8ELL)) ^ 0x5ALL));
  LODWORD(v285) = (((((v285 >> 3) & 0x8C4DCB8B000000 ^ 0x84404181000000)
                   - ((2 * ((v285 >> 3) & 0x8C4DCB8B000000 ^ 0x84404181000000)) & 0x10021310000000)
                   + 0x3B030D8867445DLL) ^ v285) >> 24) ^ (((((v281 >> 3) & 0x4DCB8BBD0000 ^ 0x8880B800000)
                                                           - ((2 * ((v281 >> 3) & 0x4DCB8BBD0000 ^ 0x8880B800000)) & 0x801304580000)
                                                           + 0x520D922E0610) ^ v281) >> 16);
  unint64_t v287 = ((((v286 >> 3) & 0x168C4DCB00000000 ^ 0x80088800000000)
         - ((v286 >> 2) & 0x2810008200000000)
         + 0x3D38A27504B206E1) ^ v286) >> 32;
  LODWORD(v281) = v287 ^ 0xCE1E40CF ^ v285;
  LODWORD(v285) = v285 ^ 0xC0B07B5A;
  LODWORD(v281) = (v281 + v285 + 1) ^ ((v287 ^ 0xEAE3B95) + 1);
  unint64_t v288 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(v60 + ((v266 >> 24) ^ 0xE260C1352BLL)) ^ 0x5ALL));
  LODWORD(v283) = ((v287 ^ 0xDDCBD7DD ^ (v281 - ((2 * v281) & 0x5934276E) + 748295095)) + v285) ^ (((((v288 >> 3) & 0xCB8BBD3D00 ^ 0x428A241100) - ((2 * ((v288 >> 3) & 0xCB8BBD3D00 ^ 0x428A241100)) & 0x602481800) + 0x9771248E11) ^ v288) >> 8);
  unint64_t v289 = (v283 ^ 0x14D29AC8)
       - ((2 * (v283 ^ 0x14D29AC8)) & 0x1DF547A90)
       - 0x5BF125FE1055C2B8;
  unint64_t v290 = (v275 ^ 0xBB6DCE77)
       - ((2 * (v275 ^ 0xBB6DCE77)) & 0xED3D4F0A)
       + 0x57348851769EA785;
  uint64_t v291 = *(unsigned __int8 *)(v60
                            + (((unsigned __int16)((v271 ^ 0xC940)
                                                                  - 2 * ((v271 ^ 0xC940) & 0x8D66 ^ v271 & 0x22)
                                                                  - 29372) >> 8) ^ 0x8DLL));
  uint64_t v529 = (v290 >> 24) ^ 0x5734885176;
  unint64_t v292 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(v60 + (v275 ^ 0x77)) ^ 0x5ALL));
  unint64_t v293 = *(void *)(v70
                   + 8
                   * (*(unsigned __int8 *)(v60
                                         + ((((v532 ^ 0xBEE64631)
                                                             - ((2 * (v532 ^ 0xBEE64631)) & 0x209D014A)
                                                             - 1873903451) >> 16) ^ 0x4ELL)) ^ 0x5ALL));
  LODWORD(v292) = (((((v292 >> 3) & 0x8C4DCB8B000000 ^ 0x8008880B000000)
                   - ((2 * ((v292 >> 3) & 0x8C4DCB8B000000 ^ 0x8008880B000000)) & 0x108929606000000)
                   - 0x269A6B4D82251E4) ^ v292) >> 24) ^ (((((*(void *)(v70 + 8 * (v291 ^ 0x5A)) >> 3) & 0x4DCB8BBD0000 ^ 0x8880B800000)
                                                            - ((2
                                                              * ((*(void *)(v70 + 8 * (v291 ^ 0x5A)) >> 3) & 0x4DCB8BBD0000 ^ 0x8880B800000)) & 0x108504280000uLL)
                                                            + 0x11D80A568656A26BLL) ^ *(void *)(v70 + 8 * (v291 ^ 0x5A))) >> 16);
  unint64_t v294 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(v60 + (BYTE2(v289) ^ 0xAALL)) ^ 0x5ALL));
  unsigned int v295 = v292 ^ (((((v293 >> 3) & 0x168C4DCB00000000 ^ 0x14000C4200000000)
                 - 0x556F0C688EDB71EFLL
                 - ((2 * ((v293 >> 3) & 0x168C4DCB00000000 ^ 0x14000C4200000000)) & 0x500830600000000)) ^ v293) >> 32) ^ (((((v294 >> 3) & 0xCB8BBD3D00 ^ 0x880B802000) - ((2 * ((v294 >> 3) & 0xCB8BBD3D00 ^ 0x880B802000)) & 0x1514785A00) - 0x98C59C1358150BFLL) ^ v294) >> 8);
  unint64_t v296 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(v60 + (BYTE1(v290) ^ 0xA7)) ^ 0x5ALL));
  unint64_t v297 = *(void *)(v70
                   + 8
                   * (*(unsigned __int8 *)(v60
                                         + ((((v532 ^ 0xBEE64631)
                                            - ((2 * (v532 ^ 0xBEE64631)) & 0x1209D014AuLL)
                                            - 0x6FD5B9046FB17F5BLL) >> 24) ^ 0x902A46FB90)) ^ 0x5ALL));
  unint64_t v298 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(v60 + ((v289 >> 24) ^ 0xA40EDA01EFLL)) ^ 0x5ALL));
  unint64_t v299 = *(void *)(v70
                   + 8
                   * (*(unsigned __int8 *)(v60
                                         + ((((v271 ^ 0x97CBC940)
                                                             - 2
                                                             * ((v271 ^ 0x97CBC940) & 0x86348D66 ^ v271 & 0x22)
                                                             - 2043376316) >> 16) ^ 0x34)) ^ 0x5ALL));
  LODWORD(v297) = (((((v297 >> 3) & 0x168C4DCB00000000 ^ 0x14000C4200000000)
                   - 0x556F0C688EDB71EELL
                   + ~((2 * ((v297 >> 3) & 0x168C4DCB00000000 ^ 0x14000C4200000000)) & 0x500830600000000)) ^ v297) >> 32) ^ (((((v296 >> 3) & 0x8C4DCB8B000000 ^ 0x8008880B000000) - ((2 * ((v296 >> 3) & 0x8C4DCB8B000000 ^ 0x8008880B000000)) & 0x8910702000000) + 0x39A45AB781FA3BACLL) ^ v296) >> 24);
  unint64_t v300 = ((((v298 >> 3) & 0xCB8BBD3D00 ^ 0x880B802000)
         - ((2 * ((v298 >> 3) & 0xCB8BBD3D00 ^ 0x880B802000)) & 0x9502480A00)
         + 0x17EE12645D1) ^ v298) >> 8;
  LODWORD(v276) = v297 ^ 0x399EF77D ^ ((v299 ^ 0x75A2E22A2141A7DALL ^ (((v299 >> 3) & 0x168C4DCB8BBD3D72 ^ 0x8008880B802050)
                                                                     - ((2
                                                                       * ((v299 >> 3) & 0x168C4DCB8BBD3D72 ^ 0x8008880B802050)) & 0x21100803067A5A44)
                                                                     - 0x46347BCA6880925ALL)) >> (v300 & 0x10) >> (v300 & 0x10 ^ 0x10));
  unint64_t v301 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(v60 + (v532 ^ 0x31)) ^ 0x5ALL));
  unint64_t v302 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(v60 + (v283 ^ 0xC8)) ^ 0x5ALL));
  unint64_t v303 = *(void *)(v70
                   + 8
                   * (*(unsigned __int8 *)(v60
                                         + ((((v271 ^ 0x97CBC940)
                                            - 2 * ((v271 ^ 0x97CBC940) & 0x86348D66 ^ v271 & 0x22)
                                            - 0x7A6A907F79CB72BCLL) >> 24) ^ 0x85956F8086)) ^ 0x5ALL));
  unint64_t v304 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(v60 + (BYTE2(v290) ^ 0x9ELL)) ^ 0x5ALL));
  unint64_t v305 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(v60 + (BYTE1(v289) ^ 0x3DLL)) ^ 0x5ALL));
  unint64_t v306 = (((((v302 >> 3) & 0x168C4DCB00000000 ^ 0x14000C4200000000)
          - 0x556F0C688EDB71EFLL
          - ((2 * ((v302 >> 3) & 0x168C4DCB00000000 ^ 0x14000C4200000000)) & 0x500830600000000)) ^ v302) >> 32) ^ (((((v301 >> 3) & 0x8C4DCB8B000000 ^ 0x8008880B000000) - ((2 * ((v301 >> 3) & 0x8C4DCB8B000000 ^ 0x8008880B000000)) & 0x18199210000000) - 0x63E0E322F78389B1) ^ v301) >> 24) ^ (((((v303 >> 3) & 0xCB8BBD3D00 ^ 0x880B802000) - ((2 * ((v303 >> 3) & 0xCB8BBD3D00 ^ 0x880B802000)) & 0x180114A0000) - 0x45A43D3FF3583FF4) ^ v303) >> 8) ^ (((((v304 >> 3) & 0x4DCB8BBD0000 ^ 0x8880B800000) - ((2 * ((v304 >> 3) & 0x4DCB8BBD0000 ^ 0x8880B800000)) & 0x28512680000) - 0x1524DC9D36C9DF66) ^ v304) >> 16);
  unint64_t v307 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(v60 + (v271 ^ 0x40)) ^ 0x5ALL));
  unint64_t v308 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(v60 + v529) ^ 0x5ALL));
  unint64_t v309 = *(void *)(v70
                   + 8
                   * (*(unsigned __int8 *)(v60
                                         + (((unsigned __int16)((v532 ^ 0x4631)
                                                                               - ((2 * (v532 ^ 0x4631)) & 0x14A)
                                                                               - 32603) >> 8) ^ 0x80)) ^ 0x5ALL));
  unint64_t v310 = (((((v307 >> 3) & 0x168C4DCB00000000 ^ 0x80088800000000)
          - ((2 * ((v307 >> 3) & 0x168C4DCB00000000 ^ 0x80088800000000)) & 0x2818829000000000)
          + 0x756DC37837040CD5) ^ v307) >> 32) ^ (((((v305 >> 3) & 0x8C4DCB8B000000 ^ 0x8008880B000000)
                                                    - ((2 * ((v305 >> 3) & 0x8C4DCB8B000000 ^ 0x8008880B000000)) & 0x108030116000000)
                                                    + 0x50E731B4BB15EDFBLL) ^ v305) >> 24) ^ (((((v308 >> 3) & 0xCB8BBD3D00 ^ 0x880B802000)
                                                                                              - ((2
                                                                                                * ((v308 >> 3) & 0xCB8BBD3D00 ^ 0x880B802000)) & 0x18602602800)
                                                                                              + 0x3A825F751701498) ^ v308) >> 8) ^ (((((v309 >> 3) & 0x4DCB8BBD0000 ^ 0x8880B800000) - ((2 * ((v309 >> 3) & 0x4DCB8BBD0000 ^ 0x8880B800000)) & 0x8A96177A0000) - 0x4DA9884E440FFC1) ^ v309) >> 16);
  LODWORD(v307) = (v276 - ((2 * v276) & 0x505A51B0) + 674048216) ^ v300;
  unint64_t v311 = (v307 ^ 0xE4528A58)
       - ((2 * (v307 ^ 0xE4528A58)) & 0x1D51AC816)
       - 0xC7A72D115729BF5;
  unint64_t v312 = (v306 ^ 0xE08B1000)
       - 2 * ((v306 ^ 0xE08B1000) & 0x2EC7CAFB ^ v306 & 0xA)
       + 0x3D103E562EC7CAF1;
  unint64_t v313 = *(void *)(v70
                   + 8
                   * (*(unsigned __int8 *)(v60
                                         + (((unsigned __int16)((v295 ^ 0x5529)
                                                                               - ((2 * (v295 ^ 0x5529)) & 0x986E)
                                                                               - 13257) >> 8) ^ 0xCCLL)) ^ 0x5ALL));
  unint64_t v314 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(v60 + ((v311 >> 24) ^ 0xF3858D2EEALL)) ^ 0x5ALL));
  LODWORD(v314) = (((((v314 >> 3) & 0x4DCB8BBD0000 ^ 0xC428A240000)
                   - 0x556F0C688EDB71EFLL
                   - ((2 * ((v314 >> 3) & 0x4DCB8BBD0000 ^ 0xC428A240000)) & 0x830602480000)) ^ v314) >> 16) ^ (((((v313 >> 3) & 0xCB8BBD3D00 ^ 0x880B802000) - ((2 * ((v313 >> 3) & 0xCB8BBD3D00 ^ 0x880B802000)) & 0x19715185200) + 0x5B6B97EF8ACEE93BLL) ^ v313) >> 8);
  unint64_t v315 = *(void *)(v70
                   + 8
                   * (*(unsigned __int8 *)(v60
                                         + ((((v306 ^ 0xE08B1000)
                                                             - 2
                                                             * ((v306 ^ 0xE08B1000) & 0x2EC7CAFB ^ v306 & 0xA)
                                                             + 784845553) >> 16) ^ 0xC7)) ^ 0x5ALL));
  LODWORD(v314) = v314 ^ (((((v315 >> 3) & 0x8C4DCB8B000000 ^ 0x8008880B000000)
                          - ((2 * ((v315 >> 3) & 0x8C4DCB8B000000 ^ 0x8008880B000000)) & 0x110111704000000)
                          + 0x28BA3AABC2C03C07) ^ v315) >> 24);
  unint64_t v316 = *(void *)(v70
                   + 8
                   * (*(unsigned __int8 *)(v60
                                         + (((unsigned __int16)((v310 ^ 0xD908)
                                                                               - 2
                                                                               * ((v310 ^ 0xD908) & 0xF47F ^ v310 & 0x24)
                                                                               - 2981) >> 8) ^ 0xF4)) ^ 0x5ALL));
  unint64_t v317 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(v60 + (v307 ^ 0x58)) ^ 0x5ALL));
  LODWORD(v314) = v314 ^ (((((v316 >> 3) & 0x168C4DCB00000000 ^ 0x80088800000000)
                          - ((2 * ((v316 >> 3) & 0x168C4DCB00000000 ^ 0x80088800000000)) & 0xD18811400000000)
                          - 0x3903AD7576CBAE96) ^ v316) >> 32);
  unint64_t v318 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(v60 + ((v312 >> 24) ^ 0x3D103E562ELL)) ^ 0x5ALL));
  unint64_t v319 = *(void *)(v70
                   + 8
                   * (*(unsigned __int8 *)(v60
                                         + ((((v310 ^ 0xB24ED908)
                                                             - 2
                                                             * ((v310 ^ 0xB24ED908) & 0x132CF47F ^ v310 & 0x24)
                                                             + 321713243) >> 16) ^ 0x2CLL)) ^ 0x5ALL));
  LODWORD(v317) = (((((v318 >> 3) & 0x4DCB8BBD0000 ^ 0x8880B800000)
                   - ((2 * ((v318 >> 3) & 0x4DCB8BBD0000 ^ 0x8880B800000)) & 0x891203120000)
                   - 0x3DE78966FA36AC2ALL) ^ v318) >> 16) ^ (((((v317 >> 3) & 0xCB8BBD3D00 ^ 0x880B802000)
                                                             - ((2 * ((v317 >> 3) & 0xCB8BBD3D00 ^ 0x880B802000)) & 0x80035A2A00)
                                                             - 0x997CABEA102895) ^ v317) >> 8) ^ (((((v319 >> 3) & 0x8C4DCB8B000000 ^ 0xC428A000000) - 0x546F0C688EDB71EFLL - ((2 * ((v319 >> 3) & 0x8C4DCB8B000000 ^ 0xC428A000000)) & 0x100830602000000)) ^ v319) >> 24);
  unint64_t v320 = *(void *)(v70
                   + 8
                   * (*(unsigned __int8 *)(v60
                                         + ((((v295 ^ 0xA8455529)
                                                             - ((2 * (v295 ^ 0xA8455529)) & 0x7CBB986E)
                                                             - 1101149129) >> 16) ^ 0x5DLL)) ^ 0x5ALL));
  unint64_t v321 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(v60 + v306) ^ 0x5ALL));
  LODWORD(v271) = v317 ^ (((((v320 >> 3) & 0x168C4DCB00000000 ^ 0x80088800000000)
                          - ((2 * ((v320 >> 3) & 0x168C4DCB00000000 ^ 0x80088800000000)) & 0x418980200000000)
                          - 0x3DF023DE2A8602F9) ^ v320) >> 32);
  unint64_t v322 = *(void *)(v70
                   + 8
                   * (*(unsigned __int8 *)(v60
                                         + ((((v310 ^ 0xB24ED908)
                                            - 2 * ((v310 ^ 0xB24ED908) & 0x132CF47F ^ v310 & 0x24)
                                            + 0xA929205132CF45BLL) >> 24) ^ 0xA92920513)) ^ 0x5ALL));
  unint64_t v323 = (((((v321 >> 3) & 0x4DCB8BBD0000 ^ 0xC428A240000)
          - 0x556F0C688EDB71EFLL
          - ((2 * ((v321 >> 3) & 0x4DCB8BBD0000 ^ 0xC428A240000)) & 0x830602480000)) ^ v321) >> 16) ^ (((v322 >> 3) & 0x8C4DCB8B000000 ^ v322 & 0xFFFFFFFF000000) >> 24);
  unint64_t v324 = *(void *)(v70
                   + 8
                   * (*(unsigned __int8 *)(v60
                                         + ((((v295 ^ 0xA8455529)
                                            - ((2 * (v295 ^ 0xA8455529)) & 0x17CBB986EuLL)
                                            - 0x554FB4D41A233C9) >> 24) ^ 0xFAAB04B2BELL)) ^ 0x5ALL));
  unint64_t v325 = v323 ^ (((((v324 >> 3) & 0x168C4DCB00000000 ^ 0x80088800000000)
                 - ((2 * ((v324 >> 3) & 0x168C4DCB00000000 ^ 0x80088800000000)) & 0x2418021200000000)
                 - 0x4E04CF26E443AF0) ^ v324) >> 32);
  unint64_t v326 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(v60 + (BYTE1(v311) ^ 0x64)) ^ 0x5ALL));
  unint64_t v327 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(v60 + (v310 ^ 8)) ^ 0x5ALL));
  unint64_t v328 = v325 ^ (((((v326 >> 3) & 0xCB8BBD3D00 ^ 0x428A241100)
                 - 0x556F0B688EDB71EFLL
                 - ((2 * ((v326 >> 3) & 0xCB8BBD3D00 ^ 0x428A241100)) & 0x10602481800)) ^ v326) >> 8);
  unint64_t v329 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(v60 + (v295 ^ 0x29)) ^ 0x5ALL));
  unint64_t v330 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(v60 + (BYTE2(v311) ^ 0x8DLL)) ^ 0x5ALL));
  unint64_t v331 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(v60 + (BYTE1(v312) ^ 0xCALL)) ^ 0x5ALL));
  LODWORD(v326) = (((((v329 >> 3) & 0x8C4DCB8B000000 ^ 0x8008880B000000)
                   - ((v329 >> 2) & 0x80A0500000000)
                   - 0x488DAD93B7449F7) ^ v329) >> 24) ^ (((((v327 >> 3) & 0x4DCB8BBD0000 ^ 0x8880B800000)
                                                            - ((2 * ((v327 >> 3) & 0x8BBD0000 ^ 0xB800000)) & 0x17700000)
                                                            + 0x733130207FF8C063) ^ v327) >> 16) ^ (((((v330 >> 3) & 0x168C4DCB00000000 ^ 0x14000C4200000000) - 0x556F0C688EDB71EFLL - ((2 * ((v330 >> 3) & 0x168C4DCB00000000 ^ 0x14000C4200000000)) & 0x500830600000000)) ^ v330) >> 32) ^ (((((v331 >> 3) & 0xCB8BBD3D00 ^ 0x880B802000) - ((2 * ((v331 >> 3) & 0xCB8BBD3D00 ^ 0x880B802000)) & 0x101015A6A00) - 0x1D582F5B3B528A7CLL) ^ v331) >> 8);
  unint64_t v332 = (v328 ^ 0x63BC4010)
       - 2 * ((v328 ^ 0x63BC4010) & 0x270BC8BB ^ v328 & 9)
       + 0x64610B29270BC8B2;
  unint64_t v333 = (v326 ^ 0xB6487F37)
       - ((2 * (v326 ^ 0xB6487F37)) & 0xE44174C6)
       + 0x226F85BD7220BA63;
  unint64_t v334 = (v314 ^ 0x1DCB111DLL)
       - 2 * ((v314 ^ 0x1DCB111DLL) & 0x6DC2F03E ^ v314 & 2)
       + 0x11EF1BA66DC2F03CLL;
  unint64_t v335 = (v271 ^ 0xB1B2278DLL)
       - ((2 * (v271 ^ 0xB1B2278DLL)) & 0x127DFBB26)
       - 0x89BC94A6C10226DLL;
  uint64_t v336 = (v335 >> 24) ^ 0xF76436B593;
  unint64_t v337 = *(void *)(v70
                   + 8
                   * (*(unsigned __int8 *)(v60
                                         + ((((v314 ^ 0x1DCB111D)
                                                             - 2
                                                             * ((v314 ^ 0x1DCB111D) & 0x6DC2F03E ^ v314 & 2)
                                                             + 1841492028) >> 16) ^ 0xC2)) ^ 0x5ALL));
  unint64_t v338 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(v60 + (BYTE1(v335) ^ 0xDDLL)) ^ 0x5ALL));
  unint64_t v339 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(v60 + ((v332 >> 24) ^ 0x64610B2927)) ^ 0x5ALL));
  int v340 = *(unsigned __int8 *)(v60
                            + ((((v326 ^ 0xB6487F37)
                                                - ((2 * (v326 ^ 0xB6487F37)) & 0xE44174C6)
                                                + 1914747491) >> 16) ^ 0x20));
  unsigned int v341 = v340 - 1796058244 + (~(2 * v340) | 0xFFFFFF07) + 1;
  int v342 = ((v341 ^ 0x6B0DAC83) + 1) ^ (123 - (v340 ^ 0x7B));
  LODWORD(v339) = (((((v338 >> 3) & 0xCB8BBD3D00 ^ 0x428A241100)
                   - 0x556F0C688EDB71EFLL
                   - ((2 * ((v338 >> 3) & 0xCB8BBD3D00 ^ 0x428A241100)) & 0x10602481800)) ^ v338) >> 8) ^ (((((v337 >> 3) & 0x168C4DCB00000000 ^ 0x80088800000000) - ((2 * ((v337 >> 3) & 0x168C4DCB00000000 ^ 0x80088800000000)) & 0x2908198200000000) - 0x2B7A730A74762CD1) ^ v337) >> 32) ^ (((((v339 >> 3) & 0x4DCB8BBD0000 ^ 0x8880B800000) - ((2 * ((v339 >> 3) & 0x4DCB8BBD0000 ^ 0x8880B800000)) & 0x199714480000) + 0x76B61EFBEE26AB62) ^ v339) >> 16);
  unint64_t v343 = *(void *)(v70 + 8 * ((((v342 - 1796058244 - ((2 * v342) & 0x29E4A6F8)) ^ v341) + 123) ^ 0x21));
  LODWORD(v339) = v339 ^ (((((v343 >> 3) & 0x8C4DCB8B000000 ^ 0x8008880B000000)
                          - ((2 * ((v343 >> 3) & 0x8C4DCB8B000000 ^ 0x8008880B000000)) & 0x9B9300000000)
                          + 0x70116FEDA4BDA37ALL) ^ v343) >> 24);
  unint64_t v344 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(v60 + (BYTE2(v335) ^ 0xEFLL)) ^ 0x5ALL));
  unint64_t v345 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(v60 + (v328 ^ 0x10)) ^ 0x5ALL));
  unint64_t v346 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(v60 + ((v333 >> 24) ^ 0x226F85BD72)) ^ 0x5ALL));
  unint64_t v347 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(v60 + ((v334 >> 24) ^ 0x11EF1BA66DLL)) ^ 0x5ALL));
  unsigned int v348 = (((((v345 >> 3) & 0xCB8BBD3D00 ^ 0x428A241100)
          - 0x556F0C688EDB71EFLL
          - ((2 * ((v345 >> 3) & 0xCB8BBD3D00 ^ 0x428A241100)) & 0x10602481800)) ^ v345) >> 8) ^ (((((v344 >> 3) & 0x168C4DCB00000000 ^ 0x14000C4200000000) - 0x556F0C688EDB71EFLL - ((2 * ((v344 >> 3) & 0x168C4DCB00000000 ^ 0x14000C4200000000)) & 0x500830600000000)) ^ v344) >> 32) ^ (((((v346 >> 3) & 0x4DCB8BBD0000 ^ 0x8880B800000) - ((2 * ((v346 >> 3) & 0x4DCB8BBD0000 ^ 0x8880B800000)) & 0x130201600000) + 0x1F22BB8540B21F4CLL) ^ v346) >> 16) ^ (((((v347 >> 3) & 0x8C4DCB8B000000 ^ 0x8008880B000000) - ((2 * ((v347 >> 3) & 0x8C4DCB8B000000 ^ 0x8008880B000000)) & 0x10921012000000) + 0x4E6B6B1C2DC99FE7) ^ v347) >> 24);
  unint64_t v349 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(v60 + (BYTE1(v332) ^ 0xC8)) ^ 0x5ALL));
  unint64_t v350 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(v60 + (v326 ^ 0x37)) ^ 0x5ALL));
  unint64_t v351 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(v60 + (v314 ^ 0x1DLL)) ^ 0x5ALL));
  LODWORD(v349) = (((((v350 >> 3) & 0x8C4DCB8B000000 ^ 0xC428A000000)
                   - 0x556F0C688EDB71EFLL
                   - ((2 * ((v350 >> 3) & 0x8C4DCB8B000000 ^ 0xC428A000000)) & 0x100830602000000)) ^ v350) >> 24) ^ (((((v349 >> 3) & 0x4DCB8BBD0000 ^ 0x8880B800000) - ((2 * ((v349 >> 3) & 0x4DCB8BBD0000 ^ 0x8880B800000)) & 0x820013400000) - 0x1FADBEEFD25DD1A0) ^ v349) >> 16);
  unint64_t v352 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(v60 + v336) ^ 0x5ALL));
  unint64_t v353 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(v60 + (BYTE1(v333) ^ 0xBALL)) ^ 0x5ALL));
  unint64_t v354 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(v60 + (BYTE1(v334) ^ 0xF0)) ^ 0x5ALL));
  LODWORD(v349) = v349 ^ (((((v351 >> 3) & 0x168C4DCB00000000 ^ 0x80088800000000)
                          - ((2 * ((v351 >> 3) & 0x168C4DCB00000000 ^ 0x80088800000000)) & 0x2C08908600000000)
                          - 0x8ABA79C41A18B8ALL) ^ v351) >> 32) ^ (((((v352 >> 3) & 0xCB8BBD3D00 ^ 0x880B802000)
                                                                   + 0x24AAF762BLL
                                                                   + (~(2
                                                                      * ((v352 >> 3) & 0xCB8BBD3D00 ^ 0x880B802000)) | 0xFFFFFFFBEAA597FFLL)) ^ v352) >> 8);
  uint64_t v355 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(v60 + (v271 ^ 0x8DLL)) ^ 0x5ALL));
  unint64_t v356 = ((2 * v355) & 0xDE1A6FAF1A6B3972 ^ 0xABFF98D1FDB6E7DDLL) + (v355 ^ 0xAA90F39771248E11);
  unint64_t v357 = v356 - ((2 * v356 + 0x5E1A6FAF1A6B3974) & 0x62FC25612893D75ALL) + 0x208B4A88217F8867;
  unint64_t v358 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(v60 + (BYTE2(v332) ^ 0xBLL)) ^ 0x5ALL));
  unint64_t v359 = (((((v354 >> 3) & 0x4DCB8BBD0000 ^ 0x8880B800000)
          - ((2 * ((v354 >> 3) & 0x4DCB8BBD0000 ^ 0x8880B800000)) & 0x9382132A0000)
          + 0x577DDBD54D951CD0) ^ v354) >> 16) ^ (((((v353 >> 3) & 0xCB8BBD3D00 ^ 0x880B802000)
                                                    - ((2 * ((v353 >> 3) & 0xCB8BBD3D00 ^ 0x880B802000)) & 0x19716300A00)
                                                    + 0x7F4D0FEBBF5805C0) ^ v353) >> 8) ^ (((((v358 >> 3) & 0x168C4DCB00000000 ^ 0x14000C4200000000)
                                                                                             - 0x556F0C688EDB71EFLL
                                                                                             - ((2
                                                                                               * ((v358 >> 3) & 0x168C4DCB00000000 ^ 0x14000C4200000000)) & 0x500830600000000)) ^ v358) >> 32) ^ (((((v357 >> 3) & 0x8C4DCB8B000000 ^ 0xC404202000000) - ((2 * ((v357 >> 3) & 0x8C4DCB8B000000 ^ 0xC404202000000)) & 0x18010100000000) + 0x317E12B09449EBADLL) ^ v357) >> 24);
  unint64_t v360 = (v339 ^ 0x515D2F95)
       - ((2 * (v339 ^ 0x515D2F95)) & 0xE889FE12)
       + 0x721546EA7444FF09;
  unint64_t v361 = (v349 ^ 0xDF478FB2)
       - ((2 * (v349 ^ 0xDF478FB2)) & 0x9A57EB2C)
       + 0x675DB1254D2BF596;
  LOBYTE(v353) = ~((unsigned __int16)((v339 ^ 0x2F95) - ((2 * (v339 ^ 0x2F95)) & 0xFE12) - 247) >> 8);
  unint64_t v362 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(a12 + ((v360 >> 24) ^ 0x721546EA74)) ^ 0x5ALL));
  unint64_t v363 = *(void *)(v70
                   + 8
                   * (*(unsigned __int8 *)(a12
                                         + ((((v348 ^ 0xA6246273)
                                                             - ((2 * (v348 ^ 0xA6246273)) & 0x736B3260)
                                                             - 1179281104) >> 16) ^ 0xB5)) ^ 0x5ALL));
  unint64_t v364 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(a12 + ((v361 >> 24) ^ 0x675DB1254DLL)) ^ 0x5ALL));
  unint64_t v365 = (((((v363 >> 3) & 0xCB8BBD3D00 ^ 0x880B802000)
          - ((2 * ((v363 >> 3) & 0xCB8BBD3D00 ^ 0x880B802000)) & 0x19511124000)
          - 0x6E89D8211336DFEBLL) ^ v363) >> 8) ^ (((((v362 >> 3) & 0x168C4DCB00000000 ^ 0x80088800000000)
                                                   - ((2 * ((v362 >> 3) & 0x168C4DCB00000000 ^ 0x80088800000000)) & 0x8089B1000000000)
                                                   - 0x13D982473F88ACEBLL) ^ v362) >> 32) ^ (((((v364 >> 3) & 0x4DCB8BBD0000 ^ 0xC428A240000)
                                                                                             - 0x556E0C688EDB71EFLL
                                                                                             - ((2
                                                                                               * ((v364 >> 3) & 0x4DCB8BBD0000 ^ 0xC428A240000)) & 0x830602480000)) ^ v364) >> 16);
  unint64_t v366 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(a12 + (BYTE3(v359) ^ 0xA4)) ^ 0x5ALL));
  unint64_t v536 = v365 ^ (((((v366 >> 3) & 0x8C4DCB8B000000 ^ 0xC428A000000)
                 - 0x546F0C688EDB71EFLL
                 - ((2 * ((v366 >> 3) & 0x8C4DCB8B000000 ^ 0xC428A000000)) & 0x100830602000000)) ^ v366) >> 24);
  unint64_t v367 = *(void *)(v70
                   + 8
                   * (*(unsigned __int8 *)(a12
                                         + ((((v348 ^ 0xA6246273)
                                            - ((2 * (v348 ^ 0xA6246273)) & 0x1736B3260uLL)
                                            + 0x509064CDB9B59930) >> 24) ^ 0x509064CDB9)) ^ 0x5ALL));
  unint64_t v368 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(a12 + (v349 ^ 0xB2)) ^ 0x5ALL));
  unint64_t v369 = (((((v368 >> 3) & 0x8C4DCB8B000000 ^ 0x8008880B000000)
          - ((2 * ((v368 >> 3) & 0x8C4DCB8B000000 ^ 0x8008880B000000)) & 0x181B8416000000)
          - 0x41C0400DC0BC37FALL) ^ v368) >> 24) ^ (((((v367 >> 3) & 0x4DCB8BBD0000 ^ 0x8880B800000)
                                                    - 0x219E538720CA0826
                                                    + (~(2 * ((v367 >> 3) & 0x4DCB8BBD0000 ^ 0x8880B800000)) | 0xFFFFE76EE995FFFFLL)) ^ v367) >> 16);
  unint64_t v370 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(a12 + (v359 ^ 0x68)) ^ 0x5ALL));
  unint64_t v371 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(a12 + (v339 ^ 0x95)) ^ 0x5ALL));
  unint64_t v372 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(a12 + (BYTE1(v361) ^ 0xF5)) ^ 0x5ALL));
  unint64_t v373 = v369 ^ (((((v370 >> 3) & 0x168C4DCB00000000 ^ 0x80088800000000)
                 - ((2 * ((v370 >> 3) & 0x168C4DCB00000000 ^ 0x80088800000000)) & 0xC10021600000000)
                 - 0x51E55CD01225F4F4) ^ v370) >> 32) ^ (((((v371 >> 3) & 0xCB8BBD3D00 ^ 0x428A241100)
                                                           - 0x556F0B688EDB71EFLL
                                                           - ((2 * ((v371 >> 3) & 0xCB8BBD3D00 ^ 0x428A241100)) & 0x10602481800)) ^ v371) >> 8);
  unint64_t v374 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(a12 + (BYTE1(v359) ^ 0xDLL)) ^ 0x5ALL));
  unint64_t v375 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(a12 + v353) ^ 0x5ALL));
  unint64_t v376 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(a12 + (v348 ^ 0x73)) ^ 0x5ALL));
  LODWORD(v376) = (((((v374 >> 3) & 0x168C4DCB00000000 ^ 0x14000C4200000000)
                   - 0x556F0C688EDB71EFLL
                   - ((2 * ((v374 >> 3) & 0x168C4DCB00000000 ^ 0x14000C4200000000)) & 0x500830600000000)) ^ v374) >> 32) ^ (((((v372 >> 3) & 0x8C4DCB8B000000 ^ 0x8008880B000000) - ((2 * ((v372 >> 3) & 0x8C4DCB8B000000 ^ 0x8008880B000000)) & 0x118120600000000) - 0x4E10E6DCFFC1B198) ^ v372) >> 24) ^ (((((v375 >> 3) & 0xCB8BBD3D00 ^ 0x428A241100) - 0x556F0B688EDB71EFLL - ((2 * ((v375 >> 3) & 0xCB8BBD3D00 ^ 0x428A241100)) & 0x10602481800)) ^ v375) >> 8) ^ (((((v376 >> 3) & 0x4DCB8BBD0000 ^ 0xC428A240000) - 0x556E0C688EDB71EFLL - ((2 * ((v376 >> 3) & 0x4DCB8BBD0000 ^ 0xC428A240000)) & 0x830602480000)) ^ v376) >> 16);
  unint64_t v377 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(a12 + (BYTE2(v359) ^ 0x69)) ^ 0x5ALL));
  unint64_t v378 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(a12 + (BYTE2(v360) ^ 0x44)) ^ 0x5ALL));
  unint64_t v379 = (((v378 >> 3) & 0xCB8BBD3D00 ^ 0x428A241100)
        - 0x556F0C688EDB71EFLL
        - ((2 * ((v378 >> 3) & 0xCB8BBD3D00 ^ 0x428A241100)) & 0x10602481800)) ^ v378;
  unint64_t v380 = *(void *)(v70
                   + 8
                   * (*(unsigned __int8 *)(a12
                                         + (((unsigned __int16)((v348 ^ 0x6273)
                                                                               - ((2 * (v348 ^ 0x6273)) & 0x3260)
                                                                               - 26320) >> 8) ^ 0x99)) ^ 0x5ALL));
  unint64_t v381 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(a12 + (BYTE2(v361) ^ 0x2BLL)) ^ 0x5ALL));
  LODWORD(v352) = (v379 >> 8) ^ (((((v377 >> 3) & 0x168C4DCB00000000 ^ 0x14000C4200000000)
                                 - 0x556F0C688EDB71EFLL
                                 - ((2 * ((v377 >> 3) & 0x168C4DCB00000000 ^ 0x14000C4200000000)) & 0x500830600000000)) ^ v377) >> 32) ^ (((((v380 >> 3) & 0x4DCB8BBD0000 ^ 0x8880B800000) - ((2 * ((v380 >> 3) & 0x4DCB8BBD0000 ^ 0x8880B800000)) & 0x1805153A0000) + 0x61082E229E9DEB8CLL) ^ v380) >> 16) ^ (((((v381 >> 3) & 0x8C4DCB8B000000 ^ 0xC428A000000) - 0x546F0C688EDB71EFLL - ((2 * ((v381 >> 3) & 0x8C4DCB8B000000 ^ 0xC428A000000)) & 0x100830602000000)) ^ v381) >> 24);
  unint64_t v382 = (v376 ^ 0xDECF4C0ALL)
       - 2 * ((v376 ^ 0xDECF4C0ALL) & 0x881315BFLL ^ v376 & 4)
       - 0x1F928A4A77ECEA45;
  unint64_t v383 = (v352 ^ 0x374432E9)
       - ((2 * (v352 ^ 0x374432E9)) & 0xAC61569C)
       - 0x5482611EA9CF54B2;
  unint64_t v384 = *(void *)(v70
                   + 8
                   * (*(unsigned __int8 *)(a12
                                         + ((((v536 ^ 0x93C1D536)
                                            - (unint64_t)((2 * (v536 ^ 0x93C1D536)) & 0x40817B7E)
                                            - 0x6931F3FADFBF4241) >> 24) ^ 0x96CE0C0520)) ^ 0x5ALL));
  unint64_t v385 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(a12 + (v373 ^ 0xD9)) ^ 0x5ALL));
  unint64_t v386 = *(void *)(v70
                   + 8
                   * (*(unsigned __int8 *)(a12
                                         + ((((v376 ^ 0xDECF4C0A)
                                                             - 2
                                                             * ((v376 ^ 0xDECF4C0A) & 0x881315BF ^ v376 & 4)
                                                             - 2012015173) >> 16) ^ 0x13)) ^ 0x5ALL));
  unint64_t v387 = *(void *)(v70
                   + 8
                   * (*(unsigned __int8 *)(a12
                                         + ((BYTE1(v379) ^ (((((v377 >> 3) & 0x168C4DCB00000000 ^ 0x14000C4200000000)
                                                                             - 0x556F0C688EDB71EFLL
                                                                             - ((2
                                                                               * ((v377 >> 3) & 0x168C4DCB00000000 ^ 0x14000C4200000000)) & 0x500830600000000)) ^ v377) >> 32) ^ (((((v380 >> 3) & 0x8BBD0000 ^ 0xB800000) - ((2 * ((v380 >> 3) & 0x8BBD0000 ^ 0xB800000)) & 0x153A0000) - 1633817716) ^ v380) >> 16) ^ (((((v381 >> 3) & 0x8B000000 ^ 0x8A000000) + 1898221073 - ((2 * ((v381 >> 3) & 0x8B000000 ^ 0x8A000000)) & 0x2000000)) ^ v381) >> 24)) ^ 0xE9)) ^ 0x5ALL));
  unint64_t v388 = (((((v385 >> 3) & 0x168C4DCB00000000 ^ 0x80088800000000)
          - ((2 * ((v385 >> 3) & 0x168C4DCB00000000 ^ 0x80088800000000)) & 0x2000989000000000)
          + 0x50435E4C964475F7) ^ v385) >> 32) ^ (((((v384 >> 3) & 0x8C4DCB8B000000 ^ 0xC428A000000)
                                                    - 0x556F0C688EDB71EFLL
                                                    - ((2 * ((v384 >> 3) & 0x8C4DCB8B000000 ^ 0xC428A000000)) & 0x100830602000000)) ^ v384) >> 24) ^ (((((v386 >> 3) & 0xCB8BBD3D00 ^ 0x880B802000) - ((2 * ((v386 >> 3) & 0xCB8BBD3D00 ^ 0x880B802000)) & 0x11603422800) - 0x22266874DE5C2B1ELL) ^ v386) >> 8) ^ (((((v387 >> 3) & 0x4DCB8BBD0000 ^ 0x8880B800000) - ((2 * ((v387 >> 3) & 0x4DCB8BBD0000 ^ 0x8880B800000)) & 0x910512520000) + 0x3C414A96D929A070) ^ v387) >> 16);
  unint64_t v389 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(a12 + (BYTE1(v373) ^ 0x94)) ^ 0x5ALL));
  unint64_t v390 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(a12 + ((v382 >> 24) ^ 0xE06D75B588)) ^ 0x5ALL));
  unint64_t v391 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(a12 + (BYTE1(v383) ^ 0xABLL)) ^ 0x5ALL));
  unint64_t v392 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(a12 + (v536 ^ 0x36)) ^ 0x5ALL));
  uint64_t v393 = *(unsigned __int8 *)(a12 + (v376 ^ 0xALL));
  unint64_t v535 = (((((v390 >> 3) & 0xCB8BBD3D00 ^ 0x880B802000)
          - ((2 * ((v390 >> 3) & 0xCB8BBD3D00 ^ 0x880B802000)) & 0x1315487000)
          + 0xC8FAF39AEA47859) ^ v390) >> 8) ^ (((((v389 >> 3) & 0x168C4DCB00000000 ^ 0x14000C4200000000)
                                                  - 0x556F0C688EDB71EFLL
                                                  - ((2 * ((v389 >> 3) & 0x168C4DCB00000000 ^ 0x14000C4200000000)) & 0x500830600000000)) ^ v389) >> 32) ^ (((((v391 >> 3) & 0x4DCB8BBD0000 ^ 0x8880B800000) - ((2 * ((v391 >> 3) & 0x4DCB8BBD0000 ^ 0x8880B800000)) & 0x8A1403000000) + 0x5ACAD73E51C232EELL) ^ v391) >> 16) ^ (((((v392 >> 3) & 0x8C4DCB8B000000 ^ 0xC428A000000) - 0x546F0C688EDB71EFLL - ((2 * ((v392 >> 3) & 0x8C4DCB8B000000 ^ 0xC428A000000)) & 0x100830602000000)) ^ v392) >> 24);
  unint64_t v394 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(a12 + (BYTE2(v383) ^ 0x30)) ^ 0x5ALL));
  unint64_t v395 = (((((v394 >> 3) & 0xCB8BBD3D00 ^ 0x880B802000)
          - ((2 * ((v394 >> 3) & 0xCB8BBD3D00 ^ 0x880B802000)) & 0x306627A00)
          + 0x42E8D60197337D49) ^ v394) >> 8) ^ (((((*(void *)(v70 + 8 * (v393 ^ 0x5A)) >> 3) & 0x168C4DCB00000000 ^ 0x80088800000000)
                                                   - ((2
                                                     * ((*(void *)(v70 + 8 * (v393 ^ 0x5A)) >> 3) & 0x168C4DCB00000000 ^ 0x80088800000000)) & 0x190200000000uLL)
                                                   + 0x48520C913730750FLL) ^ *(void *)(v70 + 8 * (v393 ^ 0x5A))) >> 32);
  unint64_t v396 = *(void *)(v70
                   + 8
                   * (*(unsigned __int8 *)(a12
                                         + (((unsigned __int16)((v536 ^ 0xD536)
                                                                               - ((2 * (v536 ^ 0xD536)) & 0x7B7E)
                                                                               - 16961) >> 8) ^ 0xBDLL)) ^ 0x5ALL));
  unint64_t v397 = v395 ^ (((((v396 >> 3) & 0x4DCB8BBD0000 ^ 0x8880B800000)
                 - ((2 * ((v396 >> 3) & 0x4DCB8BBD0000 ^ 0x8880B800000)) & 0x19207520000)
                 - 0x7B03FD22BC1612E6) ^ v396) >> 16);
  unint64_t v398 = *(void *)(v70
                   + 8
                   * (*(unsigned __int8 *)(a12
                                         + ((((v373 ^ 0xD1B794D9)
                                                             - ((2 * (v373 ^ 0xD1B794D9)) & 0x98ADEEC0)
                                                             + 1280767840) >> 16) ^ 0x56)) ^ 0x5ALL));
  uint64_t v399 = *(unsigned __int8 *)(a12 + ((v383 >> 24) ^ 0xAB7D9EE156));
  unint64_t v540 = v397 ^ (((((v398 >> 3) & 0x8C4DCB8B000000 ^ 0x8008880B000000)
                 - ((2 * ((v398 >> 3) & 0x8C4DCB8B000000 ^ 0x8008880B000000)) & 0x18180012000000)
                 + 0x295C1C040DC08BF7) ^ v398) >> 24);
  unint64_t v400 = *(void *)(v70
                   + 8
                   * (*(unsigned __int8 *)(a12
                                         + ((((v536 ^ 0x93C1D536)
                                                             - ((2 * (v536 ^ 0x93C1D536)) & 0x40817B7E)
                                                             + 541113791) >> 16) ^ 0x40)) ^ 0x5ALL));
  unint64_t v401 = (((((v400 >> 3) & 0x4DCB8BBD0000 ^ 0x8880B800000)
          - ((2 * ((v400 >> 3) & 0x4DCB8BBD0000 ^ 0x8880B800000)) & 0x139704420000)
          + 0x26232BFFF223E2A3) ^ v400) >> 16) ^ (((((*(void *)(v70 + 8 * (v399 ^ 0x5A)) >> 3) & 0xCB8BBD3D00 ^ 0x880B802000)
                                                    - ((2
                                                      * ((*(void *)(v70 + 8 * (v399 ^ 0x5A)) >> 3) & 0xCB8BBD3D00 ^ 0x880B802000)) & 0x19114424800uLL)
                                                    + 0x6941F2FC8A63A462) ^ *(void *)(v70 + 8 * (v399 ^ 0x5A))) >> 8);
  unint64_t v402 = *(void *)(v70
                   + 8
                   * (*(unsigned __int8 *)(a12
                                         + ((((v373 ^ 0xD1B794D9)
                                            - (unint64_t)((2 * (v373 ^ 0xD1B794D9)) & 0x98ADEEC0)
                                            - 0xCD96C23B3A908A0) >> 24) ^ 0xF32693DC4CLL)) ^ 0x5ALL));
  unint64_t v403 = v401 ^ (((((v402 >> 3) & 0x8C4DCB8B000000 ^ 0x8008880B000000)
                 - ((2 * ((v402 >> 3) & 0x8C4DCB8B000000 ^ 0x8008880B000000)) & 0x1189A0316000000)
                 + 0x3AED5D11AF53F77DLL) ^ v402) >> 24);
  unint64_t v404 = *(void *)(v70 + 8 * (*(unsigned __int8 *)(a12 + (BYTE1(v382) ^ 0x15)) ^ 0x5ALL));
  uint64_t v405 = __ROR8__(a56- 0x2D2C048AB126E213- ((2 * (a56 - 0x2D2C048AB126E213)) & 0xF153D605DF56F81ALL)+ 0x78A9EB02EFAB7C0DLL, 8);
  unint64_t v522 = (v535 ^ 0x23859872)
       - ((2 * (v535 ^ 0x23859872)) & 0x2760320A)
       - 0x1DDE3326EC4FE6FBLL;
  unint64_t v523 = v403 ^ (((((v404 >> 3) & 0x168C4DCB00000000 ^ 0x80088800000000)
                 - ((2 * ((v404 >> 3) & 0x168C4DCB00000000 ^ 0x80088800000000)) & 0x18101400000000)
                 + 0x205EB82A7BEB097CLL) ^ v404) >> 32);
  uint64_t v526 = (v522 >> 24) ^ 0xE221CCD913;
  unint64_t v406 = (v405 & 0xF8FFFFFFFFFFFFFFLL ^ 0x878A9EB02EFAB7CLL)
       - ((2 * (v405 & 0xF8FFFFFFFFFFFFFFLL ^ 0x878A9EB02EFAB7CLL) + 0x6626F38BA604E72CLL) & 0xE60AEF1D400CF424)
       + 0x2618F1547308EDA8;
  *((void *)&v407 + 1) = ((v405 ^ 0x2EFAB7C)
                          - ((2 * (v405 ^ 0x2EFAB7C) - 1509628116) & 0x400CF424)
                          + 1929964968) ^ 0xCB;
  *(void *)&long long v407 = v406 ^ 0x2F55C410C64C1600;
  unint64_t v527 = (v523 ^ 0x1466C988)
       - 2 * ((v523 ^ 0x1466C988) & 0x6AFC92ED ^ v523 & 0x24)
       + 0x7EC847946AFC92C9;
  uint64_t v528 = (v527 >> 24) ^ 0x7EC847946ALL;
  unsigned __int8 v520 = v388;
  uint64_t v530 = (v388 ^ 0x5A657524) - 2 * ((v388 ^ 0x5A657524) & 0x676947AE ^ v388 & 8);
  uint64_t v408 = (v407 >> 8) + 0x3954FEB5F212152 - ((2 * (v407 >> 8)) & 0x72A9FD6BE4242A4);
  unint64_t v409 = (v406 ^ 0xB45B45D5017EAB28 ^ v408) + 2 * ((v408 ^ 0x3954FEB5F212152) & (v406 ^ 0x37CE0A3E5E5F8A7ALL));
  *((void *)&v407 + 1) = v406 ^ 0x17CE0A3E5E5F8A7ALL;
  *(void *)&long long v407 = v406 ^ 0xBFFFFFFFFFFFFFFFLL;
  uint64_t v410 = v407 >> 61;
  uint64_t v411 = v409 - 0x5766FEDE1B3A29DDLL - ((2 * v409) & 0x51320243C98BAC46);
  *((void *)&v407 + 1) = v411 ^ 0xF2;
  *(void *)&long long v407 = v411 ^ 0x7B4DB154F5F10000;
  uint64_t v412 = v407 >> 8;
  uint64_t v413 = v411 ^ (v410 - 0x5766FEDE1B3A29DDLL - ((2 * v410) & 0x51320243C98BAC46));
  *((void *)&v407 + 1) = v413 ^ 0x13D4B0751134D6D1;
  *(void *)&long long v407 = v413 ^ 0xC000000000000000;
  uint64_t v414 = v407 >> 61;
  uint64_t v415 = v412 + (v413 ^ 0xD3D4B0751134D6D1);
  *((void *)&v407 + 1) = v415 ^ 0xE;
  *(void *)&long long v407 = v415 ^ 0x6DA382091EFE8800;
  uint64_t v416 = v407 >> 8;
  uint64_t v417 = v415 ^ v414;
  *((void *)&v407 + 1) = v417 ^ 0xDA382091EFE880ELL;
  *(void *)&long long v407 = v417 ^ 0x6000000000000000;
  uint64_t v418 = v407 >> 61;
  uint64_t v419 = (v417 ^ 0x6DA382091EFE880ELL) + v416;
  *((void *)&v407 + 1) = v419 ^ 0x3D;
  *(void *)&long long v407 = v419 ^ 0x838A98423761A000;
  uint64_t v420 = v419 ^ v418;
  uint64_t v421 = (v420 ^ 0x838A98423761A03DLL) + (v407 >> 8);
  *((void *)&v407 + 1) = v420 ^ 0x38A98423761A03DLL;
  *(void *)&long long v407 = v420 ^ 0x8000000000000000;
  uint64_t v422 = v407 >> 61;
  uint64_t v423 = v421 + 0x9878346584B2142 - ((2 * v421) & 0x130F068CB0964284);
  *((void *)&v407 + 1) = v423 ^ 0xB0;
  *(void *)&long long v407 = v423 ^ 0xC7AA6F9DA1641600;
  uint64_t v424 = v407 >> 8;
  uint64_t v425 = (v422 + 0x9878346584B2142 - ((2 * v422) & 0x130F068CB0964284)) ^ v423;
  *((void *)&v407 + 1) = v425 ^ 0xE2DECDBF92F37F2;
  *(void *)&long long v407 = v425 ^ 0xC000000000000000;
  uint64_t v426 = v407 >> 61;
  unint64_t v427 = v424
       + (v425 ^ 0xCE2DECDBF92F37F2)
       + 0x6DF46EDD8C497A74
       - ((2 * (v424 + (v425 ^ 0xCE2DECDBF92F37F2))) & 0xDBE8DDBB1892F4E8);
  *((void *)&v407 + 1) = v427 ^ 0xCE;
  *(void *)&long long v407 = v427 ^ 0xF19B6E0886419F00;
  uint64_t v428 = v407 >> 8;
  unint64_t v429 = (v426 + 0x6DF46EDD8C497A74 - ((2 * v426) & 0xDBE8DDBB1892F4E8)) ^ v427;
  *((void *)&v407 + 1) = v429 ^ 0x1C6F00D50A08E5BALL;
  *(void *)&long long v407 = v429 ^ 0x8000000000000000;
  uint64_t v430 = v407 >> 61;
  uint64_t v431 = v428 + (v429 ^ 0x9C6F00D50A08E5BALL);
  *((void *)&v407 + 1) = v431 ^ 0xC5;
  *(void *)&long long v407 = v431 ^ 0x2A240793448B7A00;
  uint64_t v432 = v407 >> 8;
  *(void *)&long long v407 = __ROR8__(a56- 0x2D2C048AB126E20BLL- ((2 * (a56 - 0x2D2C048AB126E20BLL)) & 0x687C489C6AC8451ALL)- 0x4BC1DBB1CA9BDD73, 8);
  unint64_t v433 = (v407 & 0xF8FFFFFFFFFFFFFFLL ^ 0x88B43E244E356422)
       - ((2 * (v407 & 0xF8FFFFFFFFFFFFFFLL ^ 0x88B43E244E356422) + 0x6626F38BA604E72CLL) & 0xB9968AB584365EB0);
  *((void *)&v407 + 1) = ((v407 ^ 0x4E356422)
                          - ((2 * (v407 ^ 0x4E356422) - 1509628116) & 0x84365EB0)
                          - 1793219858) ^ 0xFFFFFF81;
  *(void *)&long long v407 = (v433 + 0xFDEBF20951DA2EELL) ^ 0x9BF6C4A4514300;
  uint64_t v434 = (v407 >> 8) + ((v433 + 0xFDEBF20951DA2EELL) ^ 0x980038EA3C42DF30);
  *((void *)&v407 + 1) = (v433 + 0xFDEBF20951DA2EELL) ^ 0x180038EA3C42DF30;
  *(void *)&long long v407 = v433 - 0x702140DF6AE25D12;
  uint64_t v435 = v407 >> 61;
  unint64_t v436 = v434 - 0x1EC6810877FB02D6 - ((2 * v434) & 0xC272FDEF1009FA54);
  *((void *)&v407 + 1) = v436 ^ 0xFFFFFFFB;
  *(void *)&long long v407 = v436 ^ 0x32EDCE8299302B00;
  unint64_t v437 = v436 ^ (v435 - 0x1EC6810877FB02D6 - ((2 * v435) & 0xC272FDEF1009FA54));
  uint64_t v438 = (v407 >> 8) + (v437 ^ 0xD3D4B0751134D6D1);
  *((void *)&v407 + 1) = v437 ^ 0x13D4B0751134D6D1;
  *(void *)&long long v407 = v437 ^ 0xC000000000000000;
  uint64_t v439 = v407 >> 61;
  unint64_t v440 = v438 + 0x612F48D441BF2F90 - ((2 * v438) & 0xC25E91A8837E5F20);
  *((void *)&v407 + 1) = v440 ^ 0x9E;
  *(void *)&long long v407 = v440 ^ 0xC8CCADD5F41A700;
  uint64_t v441 = v407 >> 8;
  unint64_t v442 = (v439 + 0x612F48D441BF2F90 - ((2 * v439) & 0xC25E91A8837E5F20)) ^ v440;
  *((void *)&v407 + 1) = v442 ^ 0xDA382091EFE880ELL;
  *(void *)&long long v407 = v442 ^ 0x6000000000000000;
  uint64_t v443 = v407 >> 61;
  uint64_t v444 = (v442 ^ 0x6DA382091EFE880ELL) + v441;
  *((void *)&v407 + 1) = v444 ^ 0x3D;
  *(void *)&long long v407 = v444 ^ 0x838A98423761A000;
  uint64_t v445 = v407 >> 8;
  uint64_t v446 = v444 ^ v443;
  *((void *)&v407 + 1) = v446 ^ 0x38A98423761A03DLL;
  *(void *)&long long v407 = v446 ^ 0x8000000000000000;
  uint64_t v447 = v407 >> 61;
  unint64_t v448 = ((v431 ^ 0xE5D790E7E764BEC2 ^ (v430 - ((2 * v430) & 0x9FE72EE947DF880ELL) - 0x300C688B5C103BF9)) + v432) ^ 0x6ACD5F0E5BFB9133;
  LOBYTE(v432) = 8 * ((a56 - 19) & 7);
  unint64_t v449 = v448 >> v432;
  unint64_t v450 = (2 * (v448 >> v432)) & 0x8B1DD2C23867C9ACLL;
  uint64_t v451 = v445 + (v446 ^ 0x838A98423761A03DLL);
  *((void *)&v407 + 1) = v451 ^ 0xF2;
  *(void *)&long long v407 = v451 ^ 0xCE2DECDBF92F3700;
  uint64_t v452 = v451 ^ v447;
  uint64_t v453 = (v407 >> 8) + (v452 ^ 0xCE2DECDBF92F37F2);
  *((void *)&v407 + 1) = v452 ^ 0xE2DECDBF92F37F2;
  *(void *)&long long v407 = v452 ^ 0xC000000000000000;
  uint64_t v454 = v407 >> 61;
  unint64_t v455 = v453 + 0x638ED5FD86A27034 - ((2 * v453) & 0xC71DABFB0D44E068);
  *((void *)&v407 + 1) = v455 ^ 0x8E;
  *(void *)&long long v407 = v455 ^ 0xFFE1D5288CAA9500;
  uint64_t v456 = v407 >> 8;
  unint64_t v457 = (v454 + 0x638ED5FD86A27034 - ((2 * v454) & 0xC71DABFB0D44E068)) ^ v455;
  *((void *)&v407 + 1) = v457 ^ 0x1C6F00D50A08E5BALL;
  *(void *)&long long v407 = v457 ^ 0x8000000000000000;
  uint64_t v458 = v407 >> 61;
  uint64_t v459 = v456 + (v457 ^ 0x9C6F00D50A08E5BALL);
  *((void *)&v407 + 1) = v459 ^ 0xC5;
  *(void *)&long long v407 = v459 ^ 0x2A240793448B7A00;
  uint64_t v460 = (v459 ^ 0x3D1B2A79CF38BE41 ^ (v458 - ((2 * v458) & 0x2E7E5BD517678908) + 0x173F2DEA8BB3C484))
       + (v407 >> 8);
  unint64_t v461 = (v460 ^ 0x6ACD5F0E5BFB9133uLL) >> v432;
  LOBYTE(v459) = v432 ^ 0x3B;
  unint64_t v462 = ((v449 + 0x458EE9611C33E4D6 - v450) ^ 0x458EE9611C33E4D6)
       + 32 * ((v460 ^ 0x2CD5F0E5BFB9133) << v459)
       + 0x3A47A87F56D350FDLL
       - 2
       * ((((v449 + 0x458EE9611C33E4D6 - v450) ^ 0x458EE9611C33E4D6) + 32 * ((v460 ^ 0x2CD5F0E5BFB9133) << v459)) & 0x3A47A87F56D350FFLL ^ ((v449 + 0x458EE9611C33E4D6 - v450) ^ 0x458EE9611C33E4D6) & 2);
  *(void *)&long long v407 = __ROR8__(a56- 0x2D2C048AB126E203- ((2 * (a56 - 0x2D2C048AB126E203)) & 0xB3FBAC4F583DE744)- 0x260229D853E10C5ELL, 8);
  unint64_t v463 = (v407 & 0xF8FFFFFFFFFFFFFFLL ^ 0xA0D9FDD627AC1EF3)
       - ((2 * (v407 & 0xF8FFFFFFFFFFFFFFLL ^ 0xA0D9FDD627AC1EF3) + 0x6626F38BA604E72CLL) & 0x4747C98E9E66D3B8)
       + 0x56B75E8D2235DD72;
  *((void *)&v407 + 1) = ((v407 ^ 0x27AC1EF3)
                          - ((2 * (v407 ^ 0x27AC1EF3) - 1509628116) & 0x9E66D3B8)
                          + 573955442) ^ 0x3F7860;
  *(void *)&long long v407 = v463 ^ 0x75EC5D8559000000;
  uint64_t v464 = v407 >> 22;
  *((void *)&v407 + 1) = v463 ^ 5;
  *(void *)&long long v407 = v463 ^ 0xFFF3575929790500;
  uint64_t v465 = v407 >> 8;
  *((void *)&v407 + 1) = v464 ^ 0x3383DF57731;
  *(void *)&long long v407 = v464 ^ 0x6BCAC0000000000;
  uint64_t v466 = v407 >> 42;
  *((void *)&v407 + 1) = v466 ^ 0x1C8BB9AF24144EFFLL;
  *(void *)&long long v407 = v466 ^ 0xC000000000000000;
  uint64_t v467 = v407 >> 61;
  uint64_t v468 = (v466 ^ 0xDC8BB9AF24144EFFLL) + v465;
  *((void *)&v407 + 1) = v468 ^ 0xD1;
  *(void *)&long long v407 = v468 ^ 0xD3D4B0751134D600;
  uint64_t v469 = v468 ^ v467;
  uint64_t v470 = (v469 ^ 0xD3D4B0751134D6D1) + (v407 >> 8);
  *((void *)&v407 + 1) = v469 ^ 0x13D4B0751134D6D1;
  *(void *)&long long v407 = v469 ^ 0xC000000000000000;
  uint64_t v471 = v407 >> 61;
  unint64_t v472 = v470 - ((2 * v470) & 0xAE10D5D0B5FC7E44) - 0x28F79517A501C0DELL;
  *((void *)&v407 + 1) = v472 ^ 0x2C;
  *(void *)&long long v407 = v472 ^ 0xBAABE8E14400B700;
  uint64_t v473 = v407 >> 8;
  unint64_t v474 = v472 ^ v471;
  *((void *)&v407 + 1) = v474 ^ 0x1AABE8E14400B72CLL;
  *(void *)&long long v407 = v474 ^ 0xC000000000000000;
  uint64_t v475 = v407 >> 61;
  uint64_t v476 = (v474 ^ 0xBAABE8E14400B72CLL) + v473;
  *((void *)&v407 + 1) = v476 ^ 0x3D;
  *(void *)&long long v407 = v476 ^ 0x838A98423761A000;
  uint64_t v477 = v407 >> 8;
  uint64_t v478 = v476 ^ v475;
  *((void *)&v407 + 1) = v478 ^ 0x38A98423761A03ELL;
  *(void *)&long long v407 = v478 ^ 0x8000000000000000;
  uint64_t v479 = v407 >> 61;
  uint64_t v480 = (v478 ^ 0x838A98423761A03ELL) + v477;
  *((void *)&v407 + 1) = v480 ^ 0xF2;
  *(void *)&long long v407 = v480 ^ 0xCE2DECDBF92F3700;
  uint64_t v481 = v480 ^ v479;
  uint64_t v482 = (v481 ^ 0xCE2DECDBF92F37F2) + (v407 >> 8);
  *((void *)&v407 + 1) = v481 ^ 0xE2DECDBF92F37F2;
  *(void *)&long long v407 = v481 ^ 0xC000000000000000;
  uint64_t v483 = v407 >> 61;
  uint64_t v484 = v482 - 0x626CD50C9C3BCCD3 - ((2 * v482) & 0x3B2655E6C788665ALL);
  *((void *)&v407 + 1) = v484 ^ 0x97;
  *(void *)&long long v407 = v484 ^ 0x1FC2A2669CCD600;
  uint64_t v485 = v407 >> 8;
  uint64_t v486 = (v483 - 0x626CD50C9C3BCCD3 - ((2 * v483) & 0x3B2655E6C788665ALL)) ^ v484;
  *((void *)&v407 + 1) = v486 ^ 0x1C6F00D50A08E5BALL;
  *(void *)&long long v407 = v486 ^ 0x8000000000000000;
  uint64_t v487 = v407 >> 61;
  unint64_t v488 = (v486 ^ 0x9C6F00D50A08E5BALL)
       + v485
       + 0x6D993944986472BLL
       - ((2 * ((v486 ^ 0x9C6F00D50A08E5BALL) + v485)) & 0xDB32728930C8E56);
  *((void *)&v407 + 1) = v488 ^ 6;
  *(void *)&long long v407 = v488 ^ 0x2CFD94070D0D3D00;
  unint64_t v489 = v461 - 0x29FD80575F0D5EAELL - ((2 * v461) & 0xAC04FF5141E542A4);
  unint64_t v490 = (v489 ^ 0xD6027FA8A0F2A152)
       + 32
       * ((((unint64_t)(v407 >> 8)
          + ((v487 + 0x6D993944986472BLL - ((2 * v487) & 0xDB32728930C8E56)) ^ v488 ^ 0x2240793448B7AC5)) ^ 0x2CD5F0E5BFB9133) << v459);
  LOBYTE(v459) = *(unsigned char *)(a12 + (v520 ^ 0x24)) ^ 0xF8;
  unint64_t v521 = v449 + 0x458EE9611C33E4D6 - v450;
  LOBYTE(v456) = a49 ^ (v449 - 42 - v450);
  LOBYTE(v488) = *(unsigned char *)(a55 + (v456 ^ 0xF0)) ^ (v459 - ((2 * v459) & 0xAC) + 86);
  LOBYTE(v461) = *(unsigned char *)(a12
                          + ((((v535 ^ 0x23859872)
                                              - ((2 * (v535 ^ 0x23859872)) & 0x2760320A)
                                              + 330307845) >> 16) ^ 0xB0)) ^ 0xAB;
  unint64_t v519 = v462 >> 8;
  LOBYTE(v487) = *(unsigned char *)(a55 + ((a49 ^ BYTE1(v462)) ^ 0x6BLL)) ^ (v461 - ((2 * v461) & 0xAC) + 86);
  LOBYTE(v449) = *(unsigned char *)(a12
                          + (((unsigned __int16)((v540 ^ 0xEF4)
                                                                - ((2 * (v540 ^ 0xEF4)) & 0x21C6)
                                                                - 28445) >> 8) ^ 0x90)) ^ 0x75;
  CFIndex v491 = (char *)*(&fp_dh_8e436c87f1a29db6504b879c9bab0741 + v539 - 3799) - 4;
  LODWORD(v488) = v491[(v456 ^ (v488 - ((2 * v488) & 0xE4) - 14)) ^ 0xE3];
  DWORD1(v407) = v488 ^ 0x10;
  LODWORD(v407) = (v488 ^ 0x80) << 24;
  LODWORD(v384) = (unint64_t)v407 >> 30;
  LODWORD(v459) = v491[(a49 ^ BYTE1(v462)) ^ 0x50 ^ (v487 - ((2 * v487) & 0xB4) - 38)];
  DWORD1(v407) = v459 ^ 0x10;
  LODWORD(v407) = (v459 ^ 0x80) << 24;
  LODWORD(v526) = (unint64_t)v407 >> 30;
  unint64_t v524 = v462 >> 16;
  LOBYTE(v459) = *(unsigned char *)(a12
                          + (((unsigned __int16)((v523 ^ 0xC988)
                                                                - 2 * ((v523 ^ 0xC988) & 0x92ED ^ v523 & 0x24)
                                                                - 27959) >> 8) ^ 0x92));
  LOBYTE(v379) = *(unsigned char *)(a55 + ((a49 ^ BYTE2(v462)) ^ 0xF0)) ^ (v449 - ((2 * v449) & 0xAC) + 86);
  LOBYTE(v342) = (v459 ^ 0xC3) - 2 * ((v459 ^ 0xC3) & 0x5E ^ v459 & 8);
  LODWORD(v488) = v491[(a49 ^ BYTE2(v462)) ^ 0xB7 ^ (v379 - ((2 * v379) & 0x4C) - 90)];
  DWORD1(v407) = v488 ^ 0x10;
  LODWORD(v407) = (v488 ^ 0x80) << 24;
  LODWORD(v487) = (unint64_t)v407 >> 30;
  unint64_t v518 = v462 >> 24;
  LOBYTE(v459) = *(unsigned char *)(a55 + ((a49 ^ BYTE3(v462)) ^ 0x83)) ^ ((*(unsigned char *)(a12 + v528) ^ 0x30)
                                                                                    - ((2
                                                                                      * (*(unsigned char *)(a12 + v528) ^ 0x30)) & 0xAC)
                                                                                    + 86);
  LODWORD(v459) = v491[(a49 ^ BYTE3(v462)) ^ 0x34 ^ (((2 * v459) & 0x52) - v459 + 86)];
  DWORD1(v407) = v459 ^ 0x10;
  LODWORD(v407) = (v459 ^ 0x80) << 24;
  LODWORD(v528) = (unint64_t)v407 >> 30;
  unint64_t v492 = v530 + 0x2D7115EC676947A6;
  LOBYTE(v459) = *(unsigned char *)(a12 + (((v530 + 1734952870) >> 16) ^ 0x69));
  LOBYTE(v488) = (v459 ^ 0x48) - 2 * ((v459 ^ 0x48) & 0x57 ^ v459 & 1);
  unint64_t v517 = HIDWORD(v462);
  LOBYTE(v379) = *(unsigned char *)(a55 + ((a49 ^ BYTE4(v462)) ^ 0xB5)) ^ ((*(unsigned char *)(a12
                                                                                                + ((v522 >> 24) ^ 0xE221CCD913)) ^ 0x86)
                                                                                    - 2
                                                                                    * ((*(unsigned char *)(a12
                                                                                                 + ((v522 >> 24) ^ 0xE221CCD913)) ^ 0x86) & 0x57 ^ *(unsigned char *)(a12 + ((v522 >> 24) ^ 0xE221CCD913)) & 1)
                                                                                    + 86);
  LODWORD(v459) = v491[(a49 ^ BYTE4(v462)) ^ 0x73 ^ (v379 - ((2 * v379) & 0x4E) + 39)];
  DWORD1(v407) = v459 ^ 0x10;
  LODWORD(v407) = (v459 ^ 0x80) << 24;
  LODWORD(v530) = (unint64_t)v407 >> 30;
  LOBYTE(v459) = *(unsigned char *)(a12
                          + ((((v540 ^ 0x55520EF4)
                                              - ((2 * (v540 ^ 0x55520EF4)) & 0x60CD21C6)
                                              - 1335455517) >> 16) ^ 0x66)) ^ 0x4F;
  unint64_t v516 = v462 >> 40;
  LOBYTE(v459) = *(unsigned char *)(a55 + ((a49 ^ BYTE5(v462)) ^ 0x7FLL)) ^ (v459 - ((2 * v459) & 0xAC) + 86);
  LODWORD(v459) = v491[(a49 ^ BYTE5(v462)) ^ 9 ^ (v459 - ((2 * v459) & 0x2E) - 105)];
  DWORD1(v407) = v459 ^ 0x10;
  LODWORD(v407) = (v459 ^ 0x80) << 24;
  LODWORD(v373) = (unint64_t)v407 >> 30;
  unint64_t v515 = HIWORD(v462);
  LOBYTE(v379) = *(unsigned char *)(a55 + ((a49 ^ BYTE6(v462)) ^ 0x43)) ^ ((*(unsigned char *)(a12
                                                                                                + (v523 ^ 0x88)) ^ 4)
                                                                                    - 2
                                                                                    * ((*(unsigned char *)(a12
                                                                                                 + (v523 ^ 0x88)) ^ 4) & 0x5E ^ *(unsigned char *)(a12 + (v523 ^ 0x88)) & 8)
                                                                                    + 86);
  LODWORD(v459) = v491[(a49 ^ BYTE6(v462)) ^ 0xA8 ^ (v379 - ((2 * v379) & 0x14) + 10)];
  DWORD1(v407) = v459 ^ 0x10;
  LODWORD(v407) = (v459 ^ 0x80) << 24;
  LODWORD(v527) = (unint64_t)v407 >> 30;
  LOBYTE(v379) = *(unsigned char *)(a12 + (BYTE1(v492) ^ 0x47)) ^ 0xA7;
  unint64_t v514 = HIBYTE(v462);
  LOBYTE(v379) = *(unsigned char *)(a55 + ((a49 ^ HIBYTE(v462)) ^ 0x98)) ^ (v379 - ((2 * v379) & 0xAC) + 86);
  LODWORD(v379) = v491[(a49 ^ HIBYTE(v462) ^ (v379 - ((2 * v379) & 0x12) - 119)) ^ 0xF0];
  DWORD1(v407) = v379 ^ 0x10;
  LODWORD(v407) = (v379 ^ 0x80) << 24;
  LODWORD(v462) = (unint64_t)v407 >> 30;
  LOBYTE(v379) = *(unsigned char *)(a12
                          + ((((v540 ^ 0x55520EF4)
                             - ((2 * (v540 ^ 0x55520EF4)) & 0x160CD21C6uLL)
                             - 0x5EE2126A4F996F1DLL) >> 24) ^ 0xA11DED95B0)) ^ 0x6D;
  unint64_t v525 = v489;
  LODWORD(v379) = v491[(a49 ^ v489 ^ *(unsigned char *)(a55
                                                                                + ((a49 ^ v489) ^ 0x61)) ^ (v379 - ((2 * v379) & 0xAC) + 86)) ^ 0x80];
  DWORD1(v407) = v379 ^ 0x10;
  LODWORD(v407) = (v379 ^ 0x80) << 24;
  LODWORD(v461) = (unint64_t)v407 >> 30;
  unint64_t v493 = v490 - ((2 * v490) & 0xF0187A35EB3FAC7ALL) - 0x7F3C2E50A6029C3;
  LOBYTE(v383) = *(unsigned char *)(a55 + ((a49 ^ BYTE1(v493)) ^ 0xFDLL)) ^ (v342 + 86);
  LODWORD(v379) = v491[(a49 ^ BYTE1(v493)) ^ 0x56 ^ (v383 - ((2 * v383) & 0x94) + 74)];
  DWORD1(v407) = v379 ^ 0x10;
  LODWORD(v407) = (v379 ^ 0x80) << 24;
  int v494 = (unint64_t)v407 >> 30;
  LOBYTE(v488) = *(unsigned char *)(a55 + ((a49 ^ BYTE2(v493)) ^ 0xC6)) ^ (v488 + 86);
  LODWORD(v488) = v491[(a49 ^ BYTE2(v493)) ^ 5 ^ (v488 - ((2 * v488) & 0x44) + 34)];
  DWORD1(v407) = v488 ^ 0x10;
  LODWORD(v407) = (v488 ^ 0x80) << 24;
  LODWORD(v383) = (unint64_t)v407 >> 30;
  LOBYTE(v488) = *(unsigned char *)(a55
                          + ((a49 ^ ((v490 - ((2 * v490) & 0xEB3FAC7A) - 174074307) >> 24)) ^ 0x54)) ^ ((*(unsigned char *)(a12 + (v535 ^ 0x72)) ^ 0x29) - ((2 * *(unsigned char *)(a12 + (v535 ^ 0x72))) & 0xAC) + 86);
  LODWORD(v488) = v491[(a49 ^ ((v490
                                                                - ((2 * v490) & 0xEB3FAC7A)
                                                                - 174074307) >> 24)) ^ 0xB4 ^ (v488 - 2 * (v488 & 1) + 1)];
  DWORD1(v407) = v488 ^ 0x10;
  LODWORD(v407) = (v488 ^ 0x80) << 24;
  LODWORD(v379) = (unint64_t)v407 >> 30;
  LOBYTE(v375) = (*(unsigned char *)(a12 + ((v492 >> 24) ^ 0x2D7115EC67)) ^ 0x70)
               - 2
               * ((*(unsigned char *)(a12 + ((v492 >> 24) ^ 0x2D7115EC67)) ^ 0x70) & 0x57 ^ *(unsigned char *)(a12
                                                                                               + ((v492 >> 24) ^ 0x2D7115EC67)) & 1);
  LOBYTE(v488) = *(unsigned char *)(a12
                          + ((v523 ^ 0x1466C988) >> (v523 & 0x10) >> (v523 & 0x10 ^ 0x10))) ^ 0xD5;
  LOBYTE(v492) = *(unsigned char *)(a55 + ((a49 ^ BYTE4(v493)) ^ 0x5DLL)) ^ (v488 - ((2 * v488) & 0xAC) + 86);
  LODWORD(v492) = v491[(a49 ^ BYTE4(v493)) ^ 0x4F ^ (v492 - ((2 * v492) & 0xE7) - 13)];
  DWORD1(v407) = v492 ^ 0x10;
  LODWORD(v407) = (v492 ^ 0x80) << 24;
  LODWORD(v492) = (unint64_t)v407 >> 30;
  LOBYTE(v477) = *(unsigned char *)(a55 + ((a49 ^ BYTE5(v493)) ^ 0x88)) ^ (v375 + 86);
  LODWORD(v477) = v491[(a49 ^ BYTE5(v493)) ^ 0xBA ^ (v477 - ((2 * v477) & 0xA6) - 45)];
  DWORD1(v407) = v477 ^ 0x10;
  LODWORD(v407) = (v477 ^ 0x80) << 24;
  LODWORD(v477) = (unint64_t)v407 >> 30;
  LOBYTE(v490) = *(unsigned char *)(a12
                          + (((unsigned __int16)((v535 ^ 0x9872)
                                                                - ((2 * (v535 ^ 0x9872)) & 0x320A)
                                                                + 6405) >> 8) ^ 0x19)) ^ 0x23;
  LOBYTE(v375) = *(unsigned char *)(a55 + ((a49 ^ BYTE6(v493)) ^ 0xCCLL)) ^ (v490 + (~(2 * v490) | 0x53) + 87);
  char v495 = v487 - ((2 * v487) & 0xE7) - 13;
  LODWORD(v375) = v491[(a49 ^ BYTE6(v493)) ^ 0xE2 ^ (v375 + (~(2 * v375) | 0x61) - 48)];
  DWORD1(v407) = v375 ^ 0x10;
  LODWORD(v407) = (v375 ^ 0x80) << 24;
  char v496 = v373 + (~(2 * v373) | 9) + 124;
  LOBYTE(v487) = *(unsigned char *)(a12 + (v540 ^ 0xF4)) ^ 0x1B;
  LOBYTE(v449) = *(unsigned char *)(a55 + ((a49 ^ HIBYTE(v493)) ^ 0x7DLL)) ^ (v487 - ((2 * v487) & 0xAC) + 86);
  LOBYTE(v445) = v462 - ((2 * v462) & 0x32);
  int v497 = v494 - ((2 * v494) & 0x46);
  int v498 = v379 - ((2 * v379) & 0xFFFFFFFB);
  LODWORD(v379) = ((unint64_t)v407 >> 30) + (~(2 * ((unint64_t)v407 >> 30)) | 0x17) + 117;
  char v499 = v495 ^ (((8 * v495) & 0x10 ^ 0xF8) + 2 * ((8 * v495) & 0x10) + 19);
  LOBYTE(v382) = v526 + (~(2 * v526) | 0x77) + 69;
  char v500 = v382 ^ (((8 * v382) | 0xE8) - 60);
  int v501 = v497 - 93;
  int v502 = (v497 - 93) ^ 0x1B ^ (8 * (_BYTE)v497 - 8) & 0x10;
  char v503 = (v445 - 103) ^ (((8 * (v445 - 95)) | 0xE8) - ((16 * (v445 - 95)) & 0x20) - 119);
  LODWORD(v383) = v383 + (~(2 * v383) | 0x7D) - 62;
  uint64_t v505 = v383 ^ (((8 * v383) | 0xFFFFFFE8) + 65);
  char v506 = (v492 - ((2 * v492) & 0xD6) + 107) ^ (((8 * (v492 - ((2 * v492) & 0xD6) + 107)) & 0x10 ^ 0xF8) - 101);
  LODWORD(v491) = v491[(a49 ^ HIBYTE(v493)) ^ 0xB9 ^ (v449 - ((2 * v449) & 0x4A) + 37)];
  *(unsigned char *)(a56 - 0x2D2C048AB126E213) = (v384 - ((2 * v384) & 0xA8) + 84) ^ (((8 * v384) | 0xE8)
                                                                              - ((16 * v384) & 0x20)
                                                                              - 44) ^ 0x30;
  *(unsigned char *)(a56 - 0x2D2C048AB126E20BLL) = (v461 - ((2 * v461) & 0x6A) - 75) ^ (((8 * (v461 - ((2 * v461) & 0x6A) - 75)) | 0xE8)
                                                                              - ((2
                                                                                * ((8 * (v461 - ((2 * v461) & 0x6A) - 75)) | 0xE8)) & 0x60)
                                                                              - 75) ^ 0x30;
  char v507 = (v477 - 2 * (v477 & 1) + 1) ^ (((8 * (v477 - 2 * (v477 & 1) + 1)) | 0xEB) - 2);
  int v508 = v379 ^ (((8 * v379) | 0xFFFFFFE8) - ((16 * v379) & 0x20) - 76);
  DWORD1(v407) = v491 ^ 0x10;
  LODWORD(v407) = (v491 ^ 0x80) << 24;
  char v509 = (unint64_t)v407 >> 30;
  BOOL v510 = (int)a31 + 1288173991 < a51;
  if (a51 < a13 != (a31 + 1288173991) < 0x71E5793C) {
    BOOL v510 = a51 < a13;
  }
  HIDWORD(v512) = v502;
  LODWORD(v512) = (v501 ^ 0x40) << 24;
  int v511 = v512 >> 29;
  HIDWORD(v512) = v511 ^ 2;
  LODWORD(v512) = (v511 ^ 0x60) << 24;
  *(unsigned char *)(a56 - 0x2D2C048AB126E211) = v499 ^ 0x30;
  *(unsigned char *)(a56 - 0x2D2C048AB126E212) = v500 ^ 0x30;
  *(unsigned char *)(a56 - 0x2D2C048AB126E210) = (v528 + 70 - ((2 * v528) & 0x8C)) ^ (((8 * (v528 + 70)) & 0x10 ^ 0xF8) - 58) ^ 0x30;
  *(unsigned char *)(a56 - 0x2D2C048AB126E20ELL) = v496 ^ (((8 * v496) & 0x10 ^ 0xF8) + 2 * ((8 * v496) & 0x10) - 117) ^ 0x30;
  *(unsigned char *)(a56 - 0x2D2C048AB126E20FLL) = (v530 - ((2 * v530) & 0xF4) - 6) ^ (-((8 * v530) | 0xE8) - 6) ^ 0x30;
  *(unsigned char *)(a56 - 0x2D2C048AB126E20DLL) = (v527 - ((2 * v527) & 0x16) + 11) ^ (((8 * (v527 - ((2 * v527) & 0x16) + 11)) & 0x10 ^ 0xFB)
                                                                              - 8) ^ 0x30;
  *(unsigned char *)(a56 - 0x2D2C048AB126E20CLL) = v503 ^ 0x30;
  *(unsigned char *)(a56 - 0x2D2C048AB126E20ALL) = (v512 >> 27) ^ 0x7C;
  *(unsigned char *)(a56 - 0x2D2C048AB126E208) = (v498 + 125) ^ (((8 * (v498 - 123)) | 0xE8)
                                                         - ((16 * (v498 - 123)) | 0xD0)
                                                         + 125) ^ 0x30;
  *(unsigned char *)(a56 - 0x2D2C048AB126E209) = v505 ^ 0x30;
  *(unsigned char *)(a56 - 0x2D2C048AB126E207) = v506 ^ 0x30;
  *(unsigned char *)(a56 - 0x2D2C048AB126E206) = v507 ^ 0x30;
  *(unsigned char *)(a56 - 0x2D2C048AB126E205) = v508 ^ 0x30;
  *(unsigned char *)(a56 - 0x2D2C048AB126E204) = (((8 * v509) | 0xE8) - 62) ^ (v509 - ((2 * v509) & 0x84) + 66) ^ 0x30;
  uint64_t v504 = (v498 + 125) ^ (((8 * (v498 - 123)) | 0xFFFFFFE8) - ((16 * (v498 - 123)) | 0xFFFFFFD0) + 125);
  return (*(uint64_t (**)(unint64_t, void, uint64_t, uint64_t, void, void, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, unint64_t, unint64_t, uint64_t, uint64_t, unint64_t, unint64_t, unint64_t, uint64_t, unint64_t, unint64_t, unint64_t, uint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t))(a58 + 8 * (v539 ^ (6439 * v510))))(HIWORD(v493), v504 ^ 0x30, a56, v505, v508 ^ 0x30u, a31, 0, v504, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           v493 >> 24,
           v493 >> 16,
           v493 >> 8,
           a26,
           a27,
           v514,
           v515,
           v516,
           a31,
           v517,
           v518,
           v519,
           a35,
           v521,
           v522,
           HIDWORD(v493),
           v524,
           v525,
           v526,
           v527,
           v528,
           v530,
           a56 - 0x2D2C048AB126E213,
           v535,
           a56 - 0x2D2C048AB126E20BLL);
}

uint64_t sub_194737E94()
{
  int v2 = v0 - 3368;
  int v3 = v0 - 6384;
  uint64_t v4 = v3 ^ 0x1EDu;
  uint64_t v5 = v3 | 0x806u;
  unint64_t v6 = (v1 - 149832506);
  STACK[0xAD8] = v6;
  unint64_t v7 = STACK[0x918];
  STACK[0xAE0] = STACK[0x918];
  return (*(uint64_t (**)(void))(STACK[0x338] + 8 * ((5398 * (v6 - v7 + (v5 ^ 0x1994A42A8BA2AF6CLL) > v4 - 460)) ^ v2)))();
}

uint64_t sub_194737F18@<X0>(void *a1@<X8>)
{
  *a1 = 0x65498B88564D595BLL;
  return ((uint64_t (*)(void))STACK[0x280])();
}

uint64_t sub_194737F38@<X0>(int a1@<W4>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(void))(v3
                              + 8
                              * (((((v2 == a2) ^ (a1 - 17)) & 1) * (30 * (a1 ^ 0x1DC5) - 4396)) ^ a1)))();
}

uint64_t sub_194737FB8()
{
  *int v1 = v5;
  return (*(uint64_t (**)(void))(v4 + 8 * (((v3 == 0) * v2) ^ v0)))();
}

uint64_t sub_194737FDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return (*(uint64_t (**)(void))(v7 + 8 * ((7303 * (v6 + 1 == v8 + 64)) ^ a6)))();
}

uint64_t sub_1947380B4()
{
  int v1 = LODWORD(STACK[0x214]) ^ 0x1CF6;
  unsigned int v2 = (10 * (LODWORD(STACK[0x214]) ^ 0x1925) + 595892429) & 0xDC7B4BEF;
  uint64_t v3 = *(void *)(STACK[0x2F0] - 0x65498B88564D595BLL);
  STACK[0x400] = 0x244007DCA92B5D88;
  STACK[0x670] = 0x644BB64B871677B3;
  return (*(uint64_t (**)(void))(v0 + 8 * (int)(((v3 == 0x347A9FB3B4EE85DBLL) * (v2 ^ 0xF5)) ^ v1)))();
}

uint64_t sub_194738168(uint64_t a1)
{
  *(void *)a1 = 0x244007DCA92B5D88;
  *(void *)(a1 + 8) = 0x244007DCA92B5D88;
  unint64_t v4 = v1 ^ 0xDDB40EA9;
  STACK[0xB08] = v4;
  LODWORD(v4) = ((v4 + 10) ^ 0xBFE6BBE)
              - 51390596
              + (((v4 + 10) << ((v2 + 65) & 0xBE ^ 0x3F)) & ((v2 - 69) ^ 0x17FCD085));
  *(_DWORD *)(a1 + 16) = v4;
  unint64_t v5 = STACK[0x338];
  uint64_t v6 = (*(uint64_t (**)(void, uint64_t))(STACK[0x338] + 8 * (v2 + 5511)))((v4 - 149832506), 2229939461);
  *(void *)(a1 + 24) = v6;
  return (*(uint64_t (**)(void))(v5 + 8 * ((4085 * (v6 != 0)) ^ (v2 - 69))))();
}

void fp_dh_bfcc7e64e8c8fc6671dcc27c8a50d9af(uint64_t a1)
{
  if (*(void *)(a1 + 24)) {
    BOOL v2 = *(void *)a1 == 0;
  }
  else {
    BOOL v2 = 1;
  }
  int v3 = !v2;
  int v1 = *(_DWORD *)(a1 + 32) + 2076498917 * ((((2 * a1) | 0x16B8AAFE) - a1 - 190600575) ^ 0xB2624533);
  __asm { BRAA            X9, X17 }
}

uint64_t sub_194738314@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v2
                              + 8 * (((((a1 - 814863301) & 0x3091CF70) - 2118) * (*(void *)(v1 + 8) == 0)) ^ a1)))();
}

uint64_t sub_194738354@<X0>(uint64_t result@<X0>, int a2@<W8>)
{
  if (*(unsigned char *)(*(void *)(result + 16) + 131) == 1)
  {
    int v5 = 2076498917 * ((((v4 - 144) | 0x98C25E9B) - ((v4 - 144) & 0x98C25E9B)) ^ 0x21FC4ED7);
    *(_DWORD *)(v4 - 140) = 1522037126 - v5;
    *(void *)(v4 - 136) = &STACK[0x41318FF160F90D55];
    *(_DWORD *)(v4 - 128) = (v2 + 1064441363) ^ v5;
    int v6 = v2 + 5238;
    (*(void (**)(uint64_t))(v3 + 8 * (v2 + 6063)))(v4 - 144);
    __asm { BRAA            X8, X17 }
  }
  if (!*(unsigned char *)(*(void *)(result + 16) + 131)) {
    __asm { BRAA            X8, X17 }
  }
  return result;
}

uint64_t sub_194738B64(int8x16_t a1, int8x8_t a2, uint64_t a3, char a4, char a5, char a6, uint64_t a7, int a8, int a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,int a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  int v40 = a9 - 8;
  uint64_t v41 = (v38 + v40 + a8 + 8);
  v43.val[0].i64[0] = ((_BYTE)v38 + (_BYTE)v40 + (_BYTE)a8 + 8) & 0xF;
  v43.val[0].i64[1] = (v37 + (_BYTE)v40 + 8) & 0xF;
  v43.val[1].i64[0] = (v36 + (_BYTE)v40 + 8) & 0xF;
  v43.val[1].i64[1] = (v35 + (_BYTE)v40 + 8) & 0xF;
  v43.val[2].i64[0] = (v34 + (_BYTE)v40 + 8) & 0xF;
  v43.val[2].i64[1] = (a6 + (_BYTE)v40 + 8) & 0xF;
  v43.val[3].i64[0] = (a5 + (_BYTE)v40 + 8) & 0xF;
  v43.val[3].i64[1] = (a4 + (_BYTE)v40 + 8) & 0xF;
  *(int8x8_t *)(a29 + v41) = veor_s8(veor_s8(veor_s8(*(int8x8_t *)(v32 + (v41 & 0xF) - 7), *(int8x8_t *)(a30 + v41)), veor_s8(*(int8x8_t *)(v31 + (v41 & 0xF) - 7), *(int8x8_t *)((v41 & 0xF) + v33 - 6))), vrev64_s8(vmul_s8((int8x8_t)*(_OWORD *)&vqtbl4q_s8(v43, a1), a2)));
  return (*(uint64_t (**)(void))(a31 + 8 * ((3708 * (a28 == v40)) ^ v39)))();
}

uint64_t sub_194738B6C@<X0>(int a1@<W0>, int a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, char a5@<W4>, int a6@<W5>, int a7@<W6>, uint64_t a8@<X8>)
{
  *(unsigned char *)(a3 + (v9 + 1 + a1)) = *(unsigned char *)(v8 + (a7 + v13))
                                               + ((a2 - 98) ^ a5)
                                               - (a4 & (2 * *(unsigned char *)(v8 + (a7 + v13))));
  unsigned int v14 = a7 + 1 + v11;
  int v15 = (v12 < v10) ^ (v14 < v10);
  BOOL v16 = v14 < v12;
  if (v15) {
    BOOL v16 = v12 < v10;
  }
  return (*(uint64_t (**)(void))(a8 + 8 * ((v16 * a6) ^ a2)))();
}

uint64_t sub_194738B78()
{
  return (*(uint64_t (**)(void))(v1 + 8 * ((61 * ((v3 + v2 - 1) > 0x7FFFFFFE)) ^ (v0 - 1094))))();
}

uint64_t sub_194738B88()
{
  *uint64_t v1 = v5;
  return (*(uint64_t (**)(void))(v4 + 8 * (((v3 == 0) * v2) ^ v0)))();
}

uint64_t sub_194738BAC(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return (*(uint64_t (**)(void))(v6
                              + 8
                              * (((((v4 == v5) ^ (a4 + 30)) & 1) * (((a4 - 4599) | 0x815) ^ 0xA40)) ^ a4)))();
}

uint64_t sub_194738BEC@<X0>(int a1@<W6>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t (*a36)(uint64_t),uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52)
{
  int v54 = 1779849041 * ((((v53 - 136) | 0x8C503C11) - (v53 - 136) + ((v53 - 136) & 0x73AFC3E8)) ^ 0xB989286A);
  *(void *)(v53 - 128) = a52;
  *(_DWORD *)(v53 - 136) = (a1 + 1697309441) ^ v54;
  *(_DWORD *)(v53 - 120) = (a2 + 4616) ^ v54;
  uint64_t v55 = (*(uint64_t (**)(uint64_t))(v52 + 8 * (a2 + 7239)))(v53 - 136);
  return a36(v55);
}

uint64_t sub_194738C78(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v12 = (v10 + a1 + 1879580677);
  unint64_t v13 = STACK[0x2C8];
  unint64_t v14 = v12 + STACK[0x2C8] + 1;
  uint64_t v15 = ((_BYTE)v10 + (_BYTE)a1 + 5) & 0xF;
  unint64_t v16 = v9 + v15 - v12;
  unint64_t v17 = v9 + v15 + 1;
  unint64_t v18 = v15 + v7 - v12 + 2;
  unint64_t v19 = v15 + v7 + 3;
  unint64_t v20 = v8 + v15 + 1 - v12;
  unint64_t v21 = v15 + ((a7 - 5442) | 0x541u) + v8 - 1343;
  BOOL v23 = v19 > STACK[0x2C8] && v18 < v14;
  int v25 = v17 > v13 && v16 < v14 || v23;
  if (v20 < v14 && v21 > v13) {
    int v27 = 1;
  }
  else {
    int v27 = v25;
  }
  return (*(uint64_t (**)(void))(v11 + 8 * ((7 * (v27 ^ 1)) ^ a7)))();
}

uint64_t sub_194738D20()
{
  unint64_t v3 = v1 + ((v0 - 290948081) & 0x11579BEF) - 149838040 + 29 * (v0 ^ 0x3E4u) - 1935;
  STACK[0x758] = v3;
  unint64_t v4 = STACK[0x5F8];
  STACK[0x760] = STACK[0x5F8];
  return (*(uint64_t (**)(void))(v2 + 8 * ((4153 * (v3 - v4 + 0x1FD9603601448479 > 9)) ^ v0)))();
}

uint64_t sub_194738DA8@<X0>(uint64_t a1@<X3>, int a2@<W8>)
{
  unint64_t v7 = v4 + 10;
  int v8 = LOWORD(STACK[0x9B0]);
  if (v8 == 10380) {
    goto LABEL_4;
  }
  if (v8 == 64722)
  {
    unint64_t v10 = STACK[0x5D0];
    STACK[0x480] = v7;
    LODWORD(STACK[0x7AC]) = a2;
    STACK[0x770] = v10 + v3 - 0x1F360474465A220ELL;
    int v9 = v6;
    int v2 = 1293064305;
    return (*(uint64_t (**)(void))(a1
                                + 8
                                * (((((v9 ^ 0xA74) + 623) ^ 0x399 ^ (9 * (v9 ^ 0xA74))) * (v2 == v5)) ^ (v9 - 884))))();
  }
  int v9 = v6;
  if (v8 == 15230)
  {
LABEL_4:
    STACK[0x480] = v7;
    LODWORD(STACK[0x7AC]) = a2;
    int v2 = 1293021944;
    int v9 = v6;
  }
  return (*(uint64_t (**)(void))(a1
                              + 8 * (((((v9 ^ 0xA74) + 623) ^ 0x399 ^ (9 * (v9 ^ 0xA74))) * (v2 == v5)) ^ (v9 - 884))))();
}

uint64_t sub_194738E6C@<X0>(int a1@<W7>, uint64_t a2@<X8>)
{
  LODWORD(STACK[0x3A0]) = a1;
  int v6 = *(uint64_t (**)(void))(STACK[0x338] + 8 * v4);
  unint64_t v7 = STACK[0x3E0]
     + ((a1 + v5) ^ 0xEDBBFFBBE3FEFF5ELL)
     + 0x7F67AF743E63FFF2
     + (((v4 ^ 0x95Fu) + 0x1C7FDF67ELL) & (2 * (a1 + v5)))
     - 0x6D23AF302262FF50;
  unsigned int v8 = -1729820329 * v7;
  *(unsigned char *)(v7 - 0xB3F0D6256EA70ALL) = *(unsigned char *)(v3 + ((unint64_t)(-1729820329 * (v8 ^ HIWORD(v8))) >> 24)) ^ *(unsigned char *)(a2 + ((unint64_t)(-1729820329 * (v8 ^ HIWORD(v8))) >> 24)) ^ *(unsigned char *)(((unint64_t)(-1729820329 * ((-1729820329 * v7) ^ ((-1729820329 * v7) >> 16))) >> 24) + v2 + 5) ^ (87 * ((87 * v7) ^ ((-1729820329 * v7) >> 16))) ^ (45 * ((-1729820329 * (v8 ^ HIWORD(v8))) >> 24));
  unint64_t v9 = -1729820329 * ((v8 - 1729820329) ^ ((v8 - 1729820329) >> 16));
  *(unsigned char *)(v7 - 0xB3F0D6256EA709) = *(unsigned char *)(v3 + (v9 >> 24)) ^ *(unsigned char *)(a2 + (v9 >> 24)) ^ v9 ^ *(unsigned char *)((v9 >> 24) + v2 + 5) ^ (45 * ((-1729820329 * ((-1729820329 * v7 - 1729820329) ^ ((-1729820329 * v7 - 1729820329) >> 16))) >> 24));
  unint64_t v10 = -1729820329 * ((-1729820329 * (v7 + 2)) ^ ((-1729820329 * (v7 + 2)) >> 16));
  *(unsigned char *)(v7 - 0xB3F0D6256EA708) = (45
                                       * ((-1729820329
                                         * ((-1729820329 * (v7 + 2)) ^ ((-1729820329 * (v7 + 2)) >> 16))) >> 24)) ^ (87 * ((87 * (v7 + 2)) ^ ((-1729820329 * (v7 + 2)) >> 16))) ^ *(unsigned char *)(a2 + (v10 >> 24)) ^ *(unsigned char *)(v3 + (v10 >> 24)) ^ *(unsigned char *)((v10 >> 24) + v2 + 5);
  unint64_t v11 = -1729820329 * ((-1729820329 * (v7 + 3)) ^ ((-1729820329 * (v7 + 3)) >> 16));
  *(unsigned char *)(v7 - 0xB3F0D6256EA707) = v11 ^ 0x8E ^ (45
                                                    * ((-1729820329
                                                      * ((-1729820329 * (v7 + 3)) ^ ((-1729820329 * (v7 + 3)) >> 16))) >> 24)) ^ *(unsigned char *)(a2 + (v11 >> 24)) ^ *(unsigned char *)(v3 + (v11 >> 24)) ^ *(unsigned char *)((v11 >> 24) + v2 + 5) ^ 0x8E;
  return v6();
}

uint64_t sub_194739148(__n128 a1, __n128 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, int a15, uint64_t a16, int a17, unsigned int a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31)
{
  v33.n128_u64[0] = 0xDBDBDBDBDBDBDBDBLL;
  v33.n128_u64[1] = 0xDBDBDBDBDBDBDBDBLL;
  unsigned int v34 = (((v32 ^ 0xF0) + 3910) ^ 0x4116C960) + a31;
  BOOL v35 = v34 < 0xACFEBED7;
  BOOL v36 = v34 > a18;
  if (a18 < 0xACFEBED7 != v35) {
    BOOL v37 = v35;
  }
  else {
    BOOL v37 = v36;
  }
  return (*(uint64_t (**)(uint64_t, __n128, __n128, __n128))(v31
                                                                    + 8 * ((v37 * ((9 * (v32 ^ 0xF0)) ^ 0x3E5)) ^ a15)))(2837007034, a1, a2, v33);
}

uint64_t sub_194739158()
{
  unint64_t v2 = STACK[0x520];
  STACK[0x268] = *(void *)(v1 + 8 * v0);
  return (*(uint64_t (**)(void))(v1
                              + 8
                              * (((v2 != 0x65498B88564D595BLL)
                                * (((v0 - 1886399306) & 0x70703BDC ^ 0x1259)
                                 + 194
                                 + 1430 * ((v0 - 1886399306) & 0x70703BDC ^ 0x1259)
                                 - 7311)) ^ (v0 - 1886399306) & 0x70703BDC)))();
}

uint64_t sub_1947391E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  return (*(uint64_t (**)(void))(STACK[0x338] + 8 * (a67 - 1592)))();
}

uint64_t sub_1947391FC(double a1, __n128 a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7, __n128 a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16)
{
  unsigned int v28 = v20 - 16;
  uint64_t v29 = v22 & v28;
  uint64_t v30 = v19;
  v31.i64[0] = vqtbl4q_s8(*(int8x16x4_t *)(&a2 - 1), v25).u64[0];
  v31.i64[1] = vqtbl4q_s8(*(int8x16x4_t *)a5.n128_u64, v25).u64[0];
  int8x16_t v32 = vrev64q_s8(veorq_s8(veorq_s8(*(int8x16_t *)(a15 + v28), *(int8x16_t *)(v16 + v29 - 15)), veorq_s8(*(int8x16_t *)(v18 + v29 - 15), *(int8x16_t *)(v29 + v17 - 14))));
  int8x16_t v33 = vrev64q_s8(veorq_s8(veorq_s8(vextq_s8(v32, v32, 8uLL), v27), vmulq_s8(v31, v26)));
  *(int8x16_t *)(a15 + v28) = vextq_s8(v33, v33, 8uLL);
  return (*(uint64_t (**)(void))(v24 + 8 * (((v21 == 16) * v23) ^ a16)))();
}

uint64_t sub_194739208(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return (*(uint64_t (**)(uint64_t))(v13
                                            + 8 * (((((v12 - 1384274661) & 0x52825D5C) - 2123) * (a6 == 0)) ^ v12)))(a12);
}

uint64_t sub_194739248()
{
  LODWORD(STACK[0x854]) = v1;
  unint64_t v2 = STACK[0x338];
  STACK[0x618] = *(void *)(STACK[0x338] + 8 * (v0 - 2001));
  STACK[0x748] = (unint64_t)&STACK[0x568];
  unint64_t v3 = STACK[0x568];
  STACK[0x890] = STACK[0x568];
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * (int)(((v3 == 0x65498B88564D595BLL)
                                     * ((((((v0 + 251236800) & 0xF10677E3) - 4576) | 0x83C) ^ 0xFFFFF658)
                                      + ((v0 + 251236800) & 0xF10677E3)
                                      - 4151)) | (v0 + 251236800) & 0xF10677E3)))();
}

uint64_t sub_194739284()
{
  STACK[0x458] = 0x347A9FB3B4EE85DBLL;
  int v2 = STACK[0x570];
  *(void *)STACK[0x3F0] = 0x347A9FB3B4EE85DBLL;
  return (*(uint64_t (**)(void))(v1
                              + 8
                              * (((10 * ((((v0 ^ 0x1CE8) + 5116) | 0xEC) ^ 0x1925) - 3606) * (v2 == 1293064305)) ^ v0 ^ 0x1CE8)))();
}

uint64_t sub_1947392FC@<X0>(uint64_t a1@<X8>, __n128 a2@<Q0>)
{
  *(__n128 *)(v5 + v2 + 24) = a2;
  return (*(uint64_t (**)(void))(v4 + 8 * (((v2 + a1 == 2442) * v3) ^ v6)))();
}

uint64_t sub_194739328@<X0>(int a1@<W0>, int a2@<W2>, int a3@<W3>, int a4@<W4>, int a5@<W5>, uint64_t a6@<X8>, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53)
{
  LODWORD(STACK[0x200]) = v59;
  LODWORD(STACK[0x208]) = -(a1 & 0xFFFFFFF8);
  int v60 = -8 - a5;
  int v61 = a3 + a2;
  char v62 = v57 + a3 + a2;
  char v63 = v62 + 14;
  char v64 = v62 + 15;
  char v65 = v62 + 1;
  char v66 = v62 + 2;
  char v67 = v62 + 3;
  char v68 = v62 + 4;
  uint64_t v69 = (a4 + v61 + 16 + v60 + 8);
  v71.val[0].i64[0] = v69 & (((2 * v58) ^ 0x3E90u) - 1979);
  v71.val[0].i64[1] = (v68 + (_BYTE)v60 + 8) & 0xF;
  v71.val[1].i64[0] = (v67 + (_BYTE)v60 + 8) & 0xF;
  v71.val[1].i64[1] = (v66 + (_BYTE)v60 + 8) & 0xF;
  v71.val[2].i64[0] = (v65 + (_BYTE)v60 + 8) & 0xF;
  v71.val[2].i64[1] = (v56 + (_BYTE)v60 + 8) & 0xF;
  v71.val[3].i64[0] = (v64 + (_BYTE)v60 + 8) & 0xF;
  v71.val[3].i64[1] = (v63 + (_BYTE)v60 + 8) & 0xF;
  *(int8x8_t *)(a6 - 7 + v69) = veor_s8(veor_s8(veor_s8(*(int8x8_t *)(v53 + v71.val[0].i64[0] - 7), *(int8x8_t *)(a6 - 7 + v69)), veor_s8(*(int8x8_t *)(v54 + v71.val[0].i64[0] - 7), *(int8x8_t *)(v71.val[0].i64[0] + v55 - 6))), vrev64_s8(vmul_s8((int8x8_t)*(_OWORD *)&vqtbl4q_s8(v71, (int8x16_t)xmmword_1949E63A0), (int8x8_t)0x7F7F7F7F7F7F7F7FLL)));
  return (*(uint64_t (**)(__n128))(a53 + 8 * ((51 * (LODWORD(STACK[0x208]) != v60)) ^ (v58 - 1359))))((__n128)xmmword_1949E63A0);
}

uint64_t sub_194739488()
{
  LODWORD(STACK[0x364]) = v1;
  return (*(uint64_t (**)(void))(v2 + 8 * ((55 * (v1 == ((v0 - 1542796741) & 0x5BF51BFE ^ 0x4D129A59))) ^ (v0 - 214))))();
}

uint64_t sub_1947394D8()
{
  unsigned int v2 = LODWORD(STACK[0x3D0])
     - ((((v0 + 1615871951) & 0x9FAFB56A) - 511998688) & (2 * LODWORD(STACK[0x3D0])))
     + 1891486500;
  return (*(uint64_t (**)(void))(v1
                              + 8
                              * ((2043
                                * (((2 * v2) & 0x7EFFBFEC ^ 0x607B9648)
                                 + (v2 ^ 0xCFC214D2)
                                 + ((726 * ((v0 - 6176) ^ 0x3CC)) ^ 0x7EDBF872) == 1046207956)) ^ (v0 - 6176))))();
}

uint64_t sub_19473958C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)(v3 - 0x244007DCA92B5D80) = a2;
  return (*(uint64_t (**)(void))(a1 + 8 * (((*v2 == 0x244007DCA92B5D88) * ((v4 - 1327) ^ 0x7F4)) | (v4 + 1124))))();
}

uint64_t sub_1947395E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,int a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  a69 = v70 + 0x3940CBCF928133CCLL;
  STACK[0x208] = v70 + 0x3940CBCF92813424;
  a40 = a43 + 0x36691F6204EAA0ECLL;
  a42 = 164;
  uint64_t v72 = a34;
  LODWORD(STACK[0x234]) = 996701603;
  LODWORD(STACK[0x248]) = 1956912434;
  LODWORD(STACK[0x24C]) = 370134919;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a8
                                                              + 8
                                                              * (int)(((((((v69 + 2031057902) & 0x86F09F96) - 1816866014) & 0x6C4B17EF)
                                                                      + 144641502
                                                                      + ((((v69 + 2031057902) & 0x86F09F96) + 1090545290) | 0xB6607002)
                                                                      - 1659)
                                                                     * (&a9 == (uint64_t *)-976)) ^ (v69 + 2031057902) & 0x86F09F96)))(v71 - 176, 4158844797, v72);
}

uint64_t sub_194739714()
{
  unsigned int v8 = v3 + v2 + v4;
  v9.i64[0] = 0xDADADADADADADADALL;
  v9.i64[1] = 0xDADADADADADADADALL;
  uint64_t v10 = v0 + v8;
  uint64_t v11 = v6 + v8;
  int8x16_t v12 = veorq_s8(*(int8x16_t *)(v10 - 31), v9);
  *(int8x16_t *)(v11 - 15) = veorq_s8(*(int8x16_t *)(v10 - 15), v9);
  *(int8x16_t *)(v11 - 31) = v12;
  return (*(uint64_t (**)(void))(v7 + 8 * ((((v1 & 0xFFFFFFE0) == 32) * (v5 + 2538)) ^ v5)))((v5 - 2237));
}

uint64_t sub_194739770@<X0>(int a1@<W8>)
{
  unint64_t v2 = STACK[0x6F0] + (a1 ^ v1) - 0x5F2923A744B77716;
  BOOL v3 = v2 < 0x745911C;
  BOOL v4 = v2 > STACK[0x6E8] + 121999644;
  if (STACK[0x6E8] > 0xFFFFFFFFF8BA6EE3 != v3) {
    BOOL v4 = v3;
  }
  return (*(uint64_t (**)(void))(STACK[0x230] + 8 * ((76 * v4) | (LODWORD(STACK[0x214]) - 4461))))();
}

uint64_t sub_194739808()
{
  unsigned int v3 = (v1 ^ 0xFFFFF7E3) + v0;
  if (v3 >= 0x2EFC7EB8) {
    unsigned int v3 = 788299448;
  }
  return (*(uint64_t (**)(void))(v2 + 8 * ((25 * (v3 != 0)) ^ v1 ^ 0x19)))(v1 ^ 0x81Du);
}

uint64_t sub_194739880@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int8x16_t *a4@<X3>, uint64_t a5@<X8>, int8x16_t a6@<Q0>, int8x16_t a7@<Q1>)
{
  *(int8x16_t *)(a1 + (v8 + 16)) = vaddq_s8(vsubq_s8(*a4, vandq_s8(vaddq_s8(*a4, *a4), a6)), a7);
  return (*(uint64_t (**)(void))(a5 + 8 * (((a2 == 16) * a3) ^ v7)))();
}

void sub_19473988C()
{
  *(_DWORD *)(v0 + 16) = 1293022282;
}

uint64_t sub_194739898()
{
  return (*(uint64_t (**)(void))(v2 + 8 * ((2158 * (v0 == ((v1 - 3053) | 0xC8) + 1293060008)) ^ (v1 - 6491))))();
}

uint64_t sub_1947398DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34,uint64_t a35,int a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,int a46,int a47,unsigned int a48,int a49,int a50,unsigned int a51,int a52,char a53)
{
  char v66 = *(uint64_t (**)(uint64_t))(v56 + 8 * v53);
  int v67 = a47;
  uint64_t v68 = a48;
  int v69 = a49;
  int v70 = a50;
  int v71 = ~a53;
  if (v71 == 2)
  {
    uint64_t v103 = a51;
    int8x16x4_t v121 = vld4q_s8(&a37);
    uint64_t v104 = a51;
    uint8x16_t v105 = (uint8x16_t)veorq_s8(v121.val[0], v63);
    uint16x8_t v106 = vmovl_u8(*(uint8x8_t *)v105.i8);
    uint16x8_t v107 = vmovl_high_u8(v105);
    uint8x16_t v108 = (uint8x16_t)veorq_s8(v121.val[1], v63);
    _Q17 = vmovl_u8(*(uint8x8_t *)v108.i8);
    _Q16 = vmovl_high_u8(v108);
    __asm
    {
      SHLL2           V18.4S, V16.8H, #0x10
      SHLL2           V19.4S, V17.8H, #0x10
    }
    uint8x16_t v113 = (uint8x16_t)veorq_s8(v121.val[2], v63);
    uint16x8_t v114 = vmovl_high_u8(v113);
    uint16x8_t v115 = vmovl_u8(*(uint8x8_t *)v113.i8);
    v121.val[0] = veorq_s8(v121.val[3], v63);
    v121.val[1] = (int8x16_t)vmovl_high_u8((uint8x16_t)v121.val[0]);
    v121.val[2] = (int8x16_t)vmovl_high_u16((uint16x8_t)v121.val[1]);
    v121.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v121.val[0].i8);
    v121.val[3] = (int8x16_t)vmovl_high_u16((uint16x8_t)v121.val[0]);
    v121.val[0] = vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)vshll_n_s16(*(int16x4_t *)_Q17.i8, 0x10uLL), (int8x16_t)vshll_n_u16(*(uint16x4_t *)v115.i8, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v106.i8), 0x18uLL)), (int8x16_t)vmovl_u16(*(uint16x4_t *)v121.val[0].i8));
    v121.val[3] = vorrq_s8(vorrq_s8(vorrq_s8(_Q19, (int8x16_t)vshll_high_n_u16(v115, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v106), 0x18uLL)), v121.val[3]);
    v121.val[1] = vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)vshll_n_s16(*(int16x4_t *)_Q16.i8, 0x10uLL), (int8x16_t)vshll_n_u16(*(uint16x4_t *)v114.i8, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v107.i8), 0x18uLL)), (int8x16_t)vmovl_u16(*(uint16x4_t *)v121.val[1].i8));
    v121.val[2] = vorrq_s8(vorrq_s8(vorrq_s8(_Q18, (int8x16_t)vshll_high_n_u16(v114, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v107), 0x18uLL)), v121.val[2]);
    v55[2] = vaddq_s32(vsubq_s32((int32x4_t)v121.val[1], (int32x4_t)vandq_s8((int8x16_t)vaddq_s32((int32x4_t)v121.val[1], (int32x4_t)v121.val[1]), v64)), v65);
    v55[3] = vaddq_s32(vsubq_s32((int32x4_t)v121.val[2], (int32x4_t)vandq_s8((int8x16_t)vaddq_s32((int32x4_t)v121.val[2], (int32x4_t)v121.val[2]), v64)), v65);
    *uint64_t v55 = vaddq_s32(vsubq_s32((int32x4_t)v121.val[0], (int32x4_t)vandq_s8((int8x16_t)vaddq_s32((int32x4_t)v121.val[0], (int32x4_t)v121.val[0]), v64)), v65);
    v55[1] = vaddq_s32(vsubq_s32((int32x4_t)v121.val[3], (int32x4_t)vandq_s8((int8x16_t)vaddq_s32((int32x4_t)v121.val[3], (int32x4_t)v121.val[3]), v64)), v65);
    unint64_t v116 = &v55[380701361].i32[v58 + 2];
    int v117 = *(v116 - 8) ^ *(v116 - 3);
    int v118 = *((_DWORD *)&v55[-1171] + (a34 - 580) - 2) ^ *(v116 - 14) ^ (v117
                                                                                    + v57
                                                                                    - ((2 * v117) & 0x56ED857C));
    HIDWORD(v119) = v118 ^ v57;
    LODWORD(v119) = v118;
    *unint64_t v116 = (v119 >> 31) + v57 - ((2 * (v119 >> 31)) & 0x56ED857C);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v56 + 8 * ((2264 * (v61 == 1522805383)) ^ a34)))(v68, v103, v104);
  }
  else if (v71 == 1)
  {
    int8x16x4_t v120 = vld4q_s8(&a37);
    uint64_t v72 = (v59 + 2407);
    uint8x16_t v73 = (uint8x16_t)veorq_s8(v120.val[0], v63);
    uint16x8_t v74 = vmovl_high_u8(v73);
    int8x16_t v75 = (int8x16_t)vmovl_high_u16(v74);
    uint16x8_t v76 = vmovl_u8(*(uint8x8_t *)v73.i8);
    int8x16_t v77 = (int8x16_t)vmovl_high_u16(v76);
    uint8x16_t v78 = (uint8x16_t)veorq_s8(v120.val[1], v63);
    uint16x8_t v79 = vmovl_u8(*(uint8x8_t *)v78.i8);
    uint16x8_t v80 = vmovl_high_u8(v78);
    int8x16_t v81 = vorrq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v79.i8, 8uLL), (int8x16_t)vmovl_u16(*(uint16x4_t *)v76.i8));
    int8x16_t v82 = vorrq_s8((int8x16_t)vshll_high_n_u16(v79, 8uLL), v77);
    int8x16_t v83 = vorrq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v80.i8, 8uLL), (int8x16_t)vmovl_u16(*(uint16x4_t *)v74.i8));
    int8x16_t v84 = vorrq_s8((int8x16_t)vshll_high_n_u16(v80, 8uLL), v75);
    uint8x16_t v85 = (uint8x16_t)veorq_s8(v120.val[2], v63);
    _Q17 = (int8x16_t)vmovl_high_u8(v85);
    _Q16 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v85.i8);
    int8x16_t v88 = (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q16.i8, 0x10uLL);
    __asm { SHLL2           V16.4S, V16.8H, #0x10 }
    int8x16_t v93 = (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q17.i8, 0x10uLL);
    __asm { SHLL2           V17.4S, V17.8H, #0x10 }
    v120.val[0] = veorq_s8(v120.val[3], v63);
    v120.val[1] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v120.val[0].i8);
    v120.val[0] = (int8x16_t)vmovl_high_u8((uint8x16_t)v120.val[0]);
    v120.val[2] = vorrq_s8(vorrq_s8(v81, v88), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v120.val[1].i8), 0x18uLL));
    v120.val[1] = vorrq_s8(vorrq_s8(v82, _Q16), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16((uint16x8_t)v120.val[1]), 0x18uLL));
    v120.val[3] = vorrq_s8(vorrq_s8(v83, v93), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v120.val[0].i8), 0x18uLL));
    v120.val[0] = vorrq_s8(vorrq_s8(v84, _Q17), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16((uint16x8_t)v120.val[0]), 0x18uLL));
    v55[2] = vaddq_s32(vsubq_s32((int32x4_t)v120.val[3], (int32x4_t)vandq_s8((int8x16_t)vaddq_s32((int32x4_t)v120.val[3], (int32x4_t)v120.val[3]), v64)), v65);
    v55[3] = vaddq_s32(vsubq_s32((int32x4_t)v120.val[0], (int32x4_t)vandq_s8((int8x16_t)vaddq_s32((int32x4_t)v120.val[0], (int32x4_t)v120.val[0]), v64)), v65);
    *uint64_t v55 = vaddq_s32(vsubq_s32((int32x4_t)v120.val[2], (int32x4_t)vandq_s8((int8x16_t)vaddq_s32((int32x4_t)v120.val[2], (int32x4_t)v120.val[2]), v64)), v65);
    v55[1] = vaddq_s32(vsubq_s32((int32x4_t)v120.val[1], (int32x4_t)vandq_s8((int8x16_t)vaddq_s32((int32x4_t)v120.val[1], (int32x4_t)v120.val[1]), v64)), v65);
    uint64_t v94 = v61 - 16;
    uint64_t v95 = (uint64_t)*(&fp_dh_8e436c87f1a29db6504b879c9bab0741 + v59 + 496);
    uint64_t v96 = (uint64_t)*(&fp_dh_8e436c87f1a29db6504b879c9bab0741 + (int)(v72 ^ 0x927));
    int v97 = (v67 ^ v54)
        + v62
        + ((v68 ^ 0x9795E75B) & (v70 ^ v54) | (v68 ^ v54) & (v69 ^ v54))
        + *(_DWORD *)(v96 + 4 * (v94 + v58))
        + (v55->i32[(*(unsigned char *)(v95 + v94 + v58) - 2)] ^ v57);
    uint64_t v98 = (char *)*(&fp_dh_8e436c87f1a29db6504b879c9bab0741 + v59 + 98) - 8;
    unsigned int v99 = (v54 + v97 - (v60 & (2 * v97))) ^ v54;
    int v100 = ((v99 << (v98[v94 + v58] - 68)) | (v99 >> (68 - v98[v94 + v58]))) + (v68 ^ v54);
    uint64_t v101 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, void, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v56 + 8 * (int)(v72 | 1));
    return v101(v68, v95, v96, v72, v98, v61 - 15, v100 + v54 - (v60 & (2 * v100)), v101, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21,
             a22,
             a23);
  }
  else
  {
    a47 = 2 * (a47 ^ v54) + v54 - (v60 & (4 * (a47 ^ v54)));
    a48 = 2 * (a48 ^ v54) + v54 - (v60 & (4 * (a48 ^ v54)));
    a49 = 2 * (a49 ^ v54) + v54 - (v60 & (4 * (a49 ^ v54)));
    a50 = 2 * (a50 ^ v54) + v54 - (v60 & (4 * (a50 ^ v54)));
    return v66(v68);
  }
}

uint64_t sub_1947398E8@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  unint64_t v7 = STACK[0x230];
  STACK[0x260] = *(void *)(STACK[0x230] + 8 * v6);
  LODWORD(STACK[0x7C4]) = 547757731;
  STACK[0x7C8] = a6;
  BOOL v9 = a1 == 0x347A9FB3B4EE85DBLL || a6 == 0x6B5D78ECE1BE7B4BLL;
  return (*(uint64_t (**)(void))(v7
                              + 8
                              * (int)((v9
                                     * ((v6 + 1052195677) & 0xC148DFFE ^ 0x9E2 ^ (((v6 + 1052195677) & 0xC148DFFE) - 1808))) ^ (v6 + 1052195677) & 0xC148DFFE)))();
}

uint64_t sub_19473991C(uint64_t a1, int a2)
{
  return (*(uint64_t (**)(void))(v3
                                           + 8
                                           * ((((v2 < 0x20) ^ (a2 - 1)) & 1 | ((((v2 < 0x20) ^ (a2 - 1)) & 1) << 7)) ^ a2)))((a2 - 4576));
}

uint64_t sub_194739950()
{
  return (*(uint64_t (**)(void))(v2 + 8 * ((((2762 * (v1 ^ 0x1BEC)) ^ 0x17B9) * (v0 == 1293064305)) ^ (v1 - 2729))))();
}

uint64_t sub_19473999C()
{
  unint64_t v2 = STACK[0x330];
  STACK[0x460] = *(void *)(v1 + 8 * v0);
  return (*(uint64_t (**)(void))(v1
                              + 8
                              * (int)(((((5 * ((v0 - 39) & 0xCB ^ 0x4E)) ^ (v2 == 0x347A9FB3B4EE85DBLL)) & 1)
                                     * ((((v0 + 418935513) & 0xE7079FCB) + 2213) ^ 0x1BE9)) ^ (v0 + 418935513) & 0xE7079FCB)))();
}

uint64_t sub_1947399D8@<X0>(uint64_t a1@<X8>)
{
  *(unsigned char *)(a1 - 829401212 + v3 - 228 - 1) = -38;
  return (*(uint64_t (**)(void))(v2 + 8 * ((87 * ((unint64_t)(a1 - 829401212) > 0x3F)) ^ (v4 + v1 + 130))))();
}

uint64_t sub_194739A28@<X0>(uint64_t a1@<X5>, uint64_t a2@<X8>)
{
  unint64_t v2 = STACK[0x830];
  STACK[0x790] = *(void *)(a1 + 8 * a2);
  return (*(uint64_t (**)(void))(a1
                              + 8
                              * (int)(((((v2 == 0x347A9FB3B4EE85DBLL) ^ (a2 - 55)) & 1)
                                     * ((a2 - 2012693559) & 0x77F74BFF ^ 0x93D)) ^ (a2 - 2012693559) & 0x77F74BFF)))();
}

uint64_t sub_194739A60(uint64_t a1, int a2, int a3, uint64_t a4, unint64_t a5, uint64_t a6, int a7, unint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  BOOL v43 = v35 > v30;
  uint64_t v44 = 4 * (v32 + 1 + a7);
  unint64_t v45 = (*(_DWORD *)(a27 + v44 + v38) ^ v28) + (a4 ^ HIDWORD(a5));
  unint64_t v46 = (*(_DWORD *)(*v42 + v44 + v38) ^ v28) * v37
      + (v27 >> ((v41 ^ v40) * v29 + 123))
      + ((v45 + a3 - (a2 & (2 * v45))) ^ a8);
  *(_DWORD *)(a27 + 4 * (v32 + a7) + v38) = v46 + v28 - (v39 & (2 * v46));
  LODWORD(v45) = v31 + v32 + 3750;
  int v47 = v43 ^ ((int)v45 < v34);
  BOOL v48 = (int)v45 < v33;
  if (!v47) {
    BOOL v43 = v48;
  }
  return (*(uint64_t (**)(void))(v36 + 8 * ((8 * v43) | (16 * v43) | v41)))();
}

uint64_t sub_194739B24(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 8 * ((((284 * (a2 ^ 0x398)) ^ 0xA58) * (v7 == v6)) ^ (a2 + 1492))))();
}

uint64_t sub_194739B60@<X0>(uint64_t a1@<X5>, uint64_t a2@<X6>, int a3@<W8>)
{
  BOOL v10 = v6 < v5;
  uint64_t v11 = (unsigned char *)(*(void *)(a1 + 40) + (v8 - 679240500));
  *(unsigned char *)(v9 + (v8 - 679240500)) = *(unsigned char *)(v4
                                                             + (((((v11 * a3) ^ ((v11 * a3) >> 16))
                                                                * a3) >> ((v3 ^ 0x54) - 49)) & 0xFF0 | ((_BYTE)v8 - 52) & 0xF)) ^ *v11 ^ (87 * (((_BYTE)v11 * a3) ^ ((v11 * a3) >> 16)));
  if (v10 == v8 + 466884500 < v5) {
    BOOL v10 = v8 + 466884500 < v6;
  }
  return (*(uint64_t (**)(void))(a2 + 8 * ((!v10 * v7) ^ v3)))();
}

uint64_t sub_194739C04(int a1, int a2, int a3, uint64_t a4, int a5, uint64_t a6, int a7)
{
  *(void *)(v9 - 7 + (a3 + a2 + a5 - a7)) = *(void *)(v8 - 7 + (a3 + a2 + a5 - a7));
  return (*(uint64_t (**)(void))(v7
                              + 8
                              * ((((((v10 - 55) ^ 0xFFFFE43D) & a1) - a7 != 8) * ((v10 - 6394) ^ 0x33B)) ^ (v10 - 55))))();
}

uint64_t sub_194739C6C@<X0>(uint64_t a1@<X8>, uint64_t a2, unint64_t a3)
{
  int v5 = v3 + 574;
  STACK[0x260] = *(void *)(v4 + 8 * (v3 - 6438));
  int v6 = v3 - 1234;
  LODWORD(STACK[0x7C4]) = 612988825;
  STACK[0x7C8] = a3;
  BOOL v8 = a1 == 0x347A9FB3B4EE85DBLL || a3 == 0x6B5D78ECE1BE7B4BLL;
  return (*(uint64_t (**)(void))(v4 + 8 * ((v8 * (v5 ^ 0x9E2 ^ v6)) ^ v5)))();
}

uint64_t sub_194739C94@<X0>(int a1@<W8>)
{
  int v1 = a1 - 315;
  int v2 = v1 - 2074;
  unint64_t v3 = STACK[0x338];
  int v4 = (v1 - 2062) | 0x183;
  int v5 = v1 + 1251;
  unint64_t v6 = STACK[0x568];
  STACK[0x628] = *(void *)(STACK[0x338] + 8 * v2);
  return (*(uint64_t (**)(void))(v3 + 8 * (((v6 == 0x65498B88564D595BLL) * (v4 - 415)) | v5)))();
}

uint64_t sub_194739CA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  unint64_t v24 = 381095207
      * (((v22 | 0xF7F37031EB0512A8) - (v22 | 0x80C8FCE14FAED57) + 0x80C8FCE14FAED57) ^ 0x55FA3681F7782788);
  a17 = v24 ^ (v20 - ((2 * v20) & 0x2402ED98506EBDDELL) - 0x6DFE8933D7C8A111);
  HIDWORD(a16) = v24 + v23 + 2110;
  a15 = a10;
  (*(void (**)(uint64_t *))(v21 + 8 * (v23 + 3955)))(&a15);
  int v25 = 2076498917 * ((v22 & 0x1647764D | ~(v22 | 0x1647764D)) ^ 0x508699FE);
  LODWORD(a15) = ((v19 ^ 0xB3FEFED9) + ((2 * v19) & 0x67FDFDB2) + ((v23 + 2122275273) & 0x1FDF) + 1608116121) ^ v25;
  HIDWORD(a15) = (v23 + 3727) ^ v25;
  a18 = a10;
  a16 = v18;
  uint64_t v26 = (*(uint64_t (**)(uint64_t *))(v21 + 8 * (v23 + 3979)))(&a15);
  return (*(uint64_t (**)(uint64_t))(v21 + 8 * ((5411 * (a17 == 1293064305)) ^ v23)))(v26);
}

uint64_t sub_194739E24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  *(_DWORD *)(v25 - 144) = (v21 + 4034) ^ (2076498917
                                         * ((((v25 - 144) | 0xD6FEA925) - (v25 - 144) + ((v25 - 144) & 0x290156D8)) ^ 0x6FC0B969));
  *(void *)(v25 - 120) = v23;
  *(void *)(v25 - 112) = v24;
  *(void *)(v25 - 136) = v20;
  *(void *)(v25 - 128) = a19;
  *(void *)(v25 - 104) = v20;
  uint64_t v26 = (*(uint64_t (**)(uint64_t))(v22 + 8 * (v21 ^ 0x1E13)))(v25 - 144);
  return (*(uint64_t (**)(uint64_t))(v22
                                            + 8
                                            * ((27
                                              * (v19 - 434977621 < (((v21 ^ 0x15B1) + 719589824) & 0xD51BDAEE ^ 0x7FFFE71F ^ (3351 * (v21 ^ 0x3AC))))) ^ ((v21 ^ 0x15B1) - 1585))))(v26);
}

uint64_t sub_194739E88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v34 = *(_DWORD *)(*(void *)(v28 - 0x52FBDFC2BD92B06DLL) + 4 * (v33 - 1498807961) - 0x4DF0B4D3CD1F7664) ^ v27;
  unint64_t v35 = (*(_DWORD *)(a27 - 0x4DF0B4D3CD1F7664) ^ v27)
      + (*(_DWORD *)(*(void *)(v29 - 0x52FBDFC2BD92B06DLL) - 0x4DF0B4D3CD1F7664) ^ v27)
      * (unint64_t)v34;
  uint64_t v36 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v32 + 8 * ((v30 + 1375) | (16 * (a6 < 2))));
  return v36(v34, 685575837, 168928751, v29 - 0x52FBDFC2BD92B06DLL, v35 + 0x28DD0E9D0A11A5EFLL - ((2 * v35) & 0x51BA1D3A14234BDELL), v36, 2433716845, -4134, a9, a10, a11, a12, v29 - 0x52FBDFC2BD92B06DLL, 4 * v31, (int)v31 - 1);
}

uint64_t sub_19473A07C()
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * ((487
                                * ((((((v1 - 1460723046) ^ 0xA8EF34F5) - 3869) ^ (v1 - 1460723046) & 0x5710DCED) & v0) != 0)) ^ v1)))();
}

uint64_t sub_19473A0CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a5
                                                                                         + 8
                                                                                         * (((((v5 + v7 + 63 < (v5 + v7)) ^ (3 * (v6 ^ 0xDC))) & 1)
                                                                                           * ((v6 - 867) ^ 0x189C)) ^ v6)))(a1, 4294961942, a2, a3, a4, 134);
}

uint64_t sub_19473A124@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v2 + 8 * (a1 + 4 * (v1 + 1 != v3 + 44))))();
}

uint64_t sub_19473A1D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(unsigned char *)(a3 + v9) = *(unsigned char *)(a8 + (v8 + v12))
                      + ((v10 + 80) ^ a5 & (2 * *(unsigned char *)(a8 + (v8 + v12))) ^ 0x7E)
                      - 37;
  return (*(uint64_t (**)(void))(v13 + 8 * (((v9 == 63) * v11) ^ v10)))();
}

uint64_t sub_19473A21C@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v3 + 8 * (((v1 ^ 0x1A35 ^ ((v1 - 5948) | 0x184)) * (a1 == v2)) ^ v1)))();
}

uint64_t sub_19473A25C()
{
  return (*(uint64_t (**)(void))(v2 + 8 * ((251 * ((v0 & 0x18) != 0)) ^ v1)))();
}

uint64_t sub_19473A2B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,char a24,_DWORD *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  *(_DWORD *)a1 = 1498173510;
  *(unsigned char *)(a1 + 4) = a24 ^ 0x95;
  *(_WORD *)(a1 + 5) = 1025;
  *(unsigned char *)(a1 + 7) = 0;
  *(_DWORD *)(a1 + 8) = 335544320;
  *(unsigned char *)(v46 - 136) = -31 * ((v46 + 112) ^ 1) + 72;
  *(void *)(v46 - 128) = a22;
  *(void *)(v46 - 144) = a1 + 12;
  *(unsigned char *)(v46 - 135) = (a24 ^ 0x67 ^ (v42 - 59)) - 31 * ((v46 + 112) ^ 1);
  *(_DWORD *)(v46 - 132) = (v42 - 4290) ^ (2100007649 * ((v46 - 144) ^ 0xCD0E0501));
  (*(void (**)(uint64_t))(v41 + 8 * (v42 + 1926)))(v46 - 144);
  *(unsigned char *)(a22 + 1) = 45;
  *unint64_t v45 = a1;
  *a25 = v43;
  *uint64_t v44 = 0;
  uint64_t v48 = bswap32(*(_DWORD *)(a26 + 8));
  uint64_t v49 = (v48 + 12) & 0x1FFFFFFFELL;
  unint64_t v50 = ((unint64_t)&a41 ^ 0x7FD73BC8EFEFBFF7) + ((2 * (void)&a41) & 0xFFAE7791DFDF7FE0);
  uint64_t v51 = (unsigned char *)(v48 + a26 + 11);
  *uint64_t v51 = ((v50 + 9) ^ 0xBA) * (v50 - 113 + v42 + 53);
  *(v51 - 1) = ((v50 + 10) ^ 0xBA) * (v50 + 27);
  return (*(uint64_t (**)(void))(v41 + 8 * ((77 * (v49 != 2)) ^ (v42 - 59))))();
}

uint64_t sub_19473A44C@<X0>(int a1@<W5>, uint64_t a2@<X6>, int a3@<W8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  int v19 = (v17 - 544) | 0x1310;
  *(unsigned char *)(a2 + a1 - 1990769388 + v19) ^= *(unsigned char *)(a13 + a1 - 1990769388 + v19) ^ 0x27;
  return (*(uint64_t (**)(void))(v18 + 8 * (((a1 + 1 < v15) * (((v19 + a3) | v13) ^ v16)) ^ (v19 + v14))))();
}

uint64_t sub_19473A4B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t v68 = *(void *)(v66 - 0x65498B88564D595BLL);
  STACK[0x8E0] = 0;
  LODWORD(STACK[0x854]) = v64;
  return (*(uint64_t (**)(uint64_t, uint64_t))(v67
                                                     + 8
                                                     * (int)(((v68 == 0x347A9FB3B4EE85DBLL)
                                                            * ((v65 + 1878523842) & 0x900813FF ^ 0x13EB)) ^ (v65 + 1579))))(a1, a64);
}

uint64_t sub_19473A4EC@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,unint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,unint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  int v49 = LODWORD(STACK[0x214]) - 4267;
  unint64_t v50 = (a1 ^ v48) + a48;
  STACK[0x690] = v50 + 10;
  v50 -= 0x3221B93EFF1776C9;
  BOOL v51 = v50 < 0x1113C160;
  BOOL v52 = v50 > a29;
  if (a33 > 0xFFFFFFFFEEEC3E9FLL != v51) {
    BOOL v53 = v51;
  }
  else {
    BOOL v53 = v52;
  }
  return (*(uint64_t (**)(void))(STACK[0x230] + 8 * (v49 ^ (21 * !v53))))();
}

uint64_t sub_19473A590(int8x8_t a1, uint64_t a2, int a3, uint64_t a4)
{
  int v10 = v6 - 8;
  *(int8x8_t *)(a4 + (v4 + v10)) = veor_s8(*(int8x8_t *)(v5 + (v4 + v10)), a1);
  return (*(uint64_t (**)(void))(v9 + 8 * (((a3 + v10 != 8) * v7) ^ v8)))();
}

uint64_t sub_19473A598(int a1, uint64_t a2, unsigned int a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,int a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,_DWORD *a40)
{
  unsigned int v42 = *(_DWORD *)(a38 + ((v40 + a1) & 0xFFFFFFFC));
  *(unsigned char *)(a4 + (v40 + a1 + 1)) = (BYTE2(v42) ^ 0x6A)
                                                - 2 * ((BYTE2(v42) ^ 0x6A) & 0x5B ^ BYTE2(v42) & 1)
                                                - 38;
  *(unsigned char *)(a4 + (v40 + a1)) = ((v42 >> ((a33 - 23) ^ 0x23)) ^ 0x68)
                                            - 2
                                            * (((v42 >> ((a33 - 23) ^ 0x23)) ^ 0x68) & 0xDF ^ (v42 >> ((a33 - 23) ^ 0x23)) & 5)
                                            - 38;
  *(unsigned char *)(a4 + (v40 + a1 + 2)) = (BYTE1(v42) ^ 0x18)
                                                - 2 * ((BYTE1(v42) ^ 0x18) & 0x5E ^ BYTE1(v42) & 4)
                                                - 38;
  *(unsigned char *)(a4 + (v40 + a1 + 3)) = v42 ^ 0x7E;
  unsigned int v43 = *a40 - 124735213;
  BOOL v44 = v43 < a3;
  BOOL v45 = v40 - 1309847606 < v43;
  if (v40 - 1309847606 < a3 != v44) {
    BOOL v45 = v44;
  }
  return (*(uint64_t (**)(void))(v41 + 8 * ((v45 * a5) ^ a33)))();
}

void sub_19473A6C0()
{
}

uint64_t sub_19473A70C()
{
  *(_DWORD *)(v0 - 0x65498B88564D594BLL) = *(_DWORD *)(v1 - 0x14908D63AC0D79B4);
  *(_DWORD *)(v0 - 0x65498B88564D5903) = *(_DWORD *)(v1 - 0x14908D63AC0D796CLL);
  *(_DWORD *)(v0 - 0x65498B88564D58FFLL) = *(_DWORD *)(v1 - 0x14908D63AC0D7968);
  *(unsigned char *)(v0 - 0x65498B88564D58FBLL) = *(unsigned char *)(v1 - 0x14908D63AC0D7964);
  *(unsigned char *)(v0 - 0x65498B88564D58FALL) = *(unsigned char *)(v1 - 0x14908D63AC0D7963);
  *(_DWORD *)(v0 - 0x65498B88564D58E3) = *(_DWORD *)(v1 - 0x14908D63AC0D794CLL);
  *(_DWORD *)(v0 - 0x65498B88564D58F7) = *(_DWORD *)(v1 - 0x14908D63AC0D7960);
  *(unsigned char *)(v0 - 0x65498B88564D58DFLL) = *(unsigned char *)(v1 - 0x14908D63AC0D7948) & 1 | 0x16;
  *(unsigned char *)(v0 - 0x65498B88564D5924) = *((unsigned char *)*(&fp_dh_8e436c87f1a29db6504b879c9bab0741 + (v2 ^ 0x679)) + 11) ^ (*(unsigned char *)(v1 - 0x14908D63AC0D798DLL) - 122) ^ 7 ^ *((unsigned char *)*(&fp_dh_8e436c87f1a29db6504b879c9bab0741 + v2 - 1126) + 7) ^ *((unsigned char *)*(&fp_dh_8e436c87f1a29db6504b879c9bab0741 + v2 - 1528) + ((26 * (v2 ^ 0x644u)) ^ 0x69BLL) + 3);
  return (*(uint64_t (**)(void))(STACK[0x338] + 8 * v2))();
}

uint64_t sub_19473A92C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, int a8)
{
  return (*(uint64_t (**)(void))(v8 + 8 * ((22 * ((a8 & 0xFFFFFFF0) != (a5 ^ 0x8DD) + 2146941566)) ^ a5 ^ 0x167D)))();
}

uint64_t sub_19473A970@<X0>(int a1@<W5>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(void))(v2 + 8 * ((3189 * (a2 + 1 == v3 + 32)) ^ a1)))();
}

uint64_t sub_19473AA50@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void))(v3 + 8 * (v2 ^ (a1 == v1))))();
}

uint64_t sub_19473AA84(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,unsigned char *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,int a57,unsigned char *a58,unsigned char *a59,unsigned char *a60,unsigned char *a61,unsigned char *a62,uint64_t a63)
{
  ++STACK[0x218];
  LODWORD(STACK[0x200]) += 16;
  int8x16_t v84 = (void *)(a8 + 128);
  uint64_t v85 = *(unsigned __int8 *)(*v84 + a2);
  *a62 = v85;
  uint64_t v86 = *(unsigned __int8 *)(v84[4] + v83);
  *a61 = v86;
  uint64_t v87 = *(unsigned __int8 *)(v84[8] + v74);
  *a59 = v87;
  uint64_t v109 = *(unsigned __int8 *)(v84[12] + v73);
  *a58 = v109;
  uint64_t v88 = *(unsigned __int8 *)(v84[5] + v82);
  *a60 = v88;
  uint64_t v89 = *(unsigned __int8 *)(v84[9] + v72);
  *a64 = v89;
  uint64_t v107 = *(unsigned __int8 *)(v84[13] + a6);
  *a65 = v107;
  uint64_t v108 = *(unsigned __int8 *)(v84[1] + v80);
  *(unsigned char *)STACK[0x208] = v108;
  uint64_t v90 = *(unsigned __int8 *)(v84[10] + a5);
  *a66 = v90;
  uint64_t v91 = *(unsigned __int8 *)(v84[2] + v75);
  *a67 = v91;
  uint64_t v92 = *(unsigned __int8 *)(v84[14] + a3);
  *a68 = v92;
  uint64_t v106 = *(unsigned __int8 *)(v84[6] + v79);
  *(unsigned char *)STACK[0x210] = v106;
  uint64_t v93 = *(unsigned __int8 *)(v84[11] + v81);
  *a69 = v93;
  uint64_t v94 = *(unsigned __int8 *)(v84[7] + v78);
  *a70 = v94;
  uint64_t v95 = *(unsigned __int8 *)(v84[3] + v77);
  *a72 = v95;
  uint64_t v96 = *(unsigned __int8 *)(v84[15] + v76);
  *a49 = v96;
  int v97 = (void *)(a44 + ((unint64_t)(STACK[0x218] % a45) << 7));
  uint64_t v98 = v97 + 147;
  int v99 = *(_DWORD *)(v97[148] + 4 * v88) ^ *(_DWORD *)(v97[147] + 4 * v85) ^ *(_DWORD *)(v97[149] + 4 * v90) ^ *(_DWORD *)(v97[150] + 4 * v96);
  *a49 = HIBYTE(v99);
  *a66 = BYTE2(v99);
  *a60 = BYTE1(v99);
  *a62 = v99;
  LODWORD(v89) = *(_DWORD *)(v98[4 * a48 + 1] + 4 * v89) ^ *(_DWORD *)(v98[4 * a48] + 4 * v86) ^ *(_DWORD *)(v98[4 * a48 + 2] + 4 * v92) ^ *(_DWORD *)(v98[4 * a48 + 3] + 4 * v95);
  LODWORD(v96) = BYTE3(v89);
  *a72 = BYTE3(v89);
  *a68 = BYTE2(v89);
  unsigned int v100 = v89 >> ((a57 - 5) ^ 0x2A);
  *a64 = v100;
  *a61 = v89;
  LODWORD(v90) = *(_DWORD *)(v98[4 * a47 + 1] + 4 * v107) ^ *(_DWORD *)(v98[4 * a47] + 4 * v87) ^ *(_DWORD *)(v98[4 * a47 + 2] + 4 * v91) ^ *(_DWORD *)(v98[4 * a47 + 3] + 4 * v94);
  *a70 = BYTE3(v90);
  *a67 = BYTE2(v90);
  *a65 = BYTE1(v90);
  *a59 = v90;
  LODWORD(v94) = *(_DWORD *)(v98[4 * a46 + 1] + 4 * v108) ^ *(_DWORD *)(v98[4 * a46] + 4 * v109) ^ *(_DWORD *)(v98[4 * a46 + 2] + 4 * v106) ^ *(_DWORD *)(v98[4 * a46 + 3] + 4 * v93);
  *a69 = BYTE3(v94);
  *(unsigned char *)STACK[0x210] = BYTE2(v94);
  *(unsigned char *)STACK[0x208] = BYTE1(v94);
  *a58 = v94;
  LODWORD(v85) = LODWORD(STACK[0x200]) - ((a4 + 32) & 0xBE21D220);
  LOBYTE(v109) = *(unsigned char *)(a50 + (int)(v85 ^ 0xDF10E91B)) ^ v99;
  *a62 = v109;
  *a60 = *(unsigned char *)(a50 + (int)(v85 ^ 0xDF10E91A)) ^ BYTE1(v99);
  *a66 = *(unsigned char *)(a50 + (int)(v85 ^ 0xDF10E919)) ^ BYTE2(v99);
  *a49 = *(unsigned char *)(a50 + (int)(v85 ^ 0xDF10E918)) ^ HIBYTE(v99);
  *a61 = *(unsigned char *)(a50 + (int)(v85 ^ 0xDF10E91F)) ^ v89;
  *a64 = *(unsigned char *)(a50 + (int)(v85 & 0xFFFFFFF0 ^ 0xDF10E915)) ^ v100;
  uint64_t v101 = *(unsigned __int8 *)(a50 + (int)(v85 & 0xFFFFFFF0 ^ 0xDF10E916)) ^ WORD1(v89);
  *a68 = v101;
  *a72 = *(unsigned char *)(a50 + (int)(v85 & 0xFFFFFFF0 ^ 0xDF10E917)) ^ v96;
  *a59 = *(unsigned char *)(a50 + (int)(v85 ^ 0xDF10E913)) ^ v90;
  *a65 = *(unsigned char *)(a50 + (int)(v85 ^ 0xDF10E912)) ^ BYTE1(v90);
  LODWORD(v91) = *(unsigned __int8 *)(a50 + (int)(v85 ^ 0xDF10E911)) ^ WORD1(v90);
  *a67 = *(unsigned char *)(a50 + (int)(v85 ^ 0xDF10E911)) ^ BYTE2(v90);
  *a70 = *(unsigned char *)(a50 + (int)(v85 ^ 0xDF10E910)) ^ BYTE3(v90);
  *a58 = *(unsigned char *)(a50 + (int)(v85 & 0xFFFFFFF0 ^ 0xDF10E91C)) ^ v94;
  unsigned __int8 v102 = *(unsigned char *)(a50 + (int)(v85 & 0xFFFFFFF0 ^ 0xDF10E91D)) ^ BYTE1(v94);
  *(unsigned char *)STACK[0x208] = v102;
  unsigned __int8 v103 = *(unsigned char *)(a50 + (int)(v85 & 0xFFFFFFF0 ^ 0xDF10E91E)) ^ BYTE2(v94);
  *(unsigned char *)STACK[0x210] = v103;
  BOOL v104 = STACK[0x218] == 8;
  *a69 = *(unsigned char *)(a50 + (int)(v85 & 0xFFFFFFF0 ^ 0xDF10E91F)) ^ BYTE3(v94);
  return (*(uint64_t (**)(void, void, void, void, void, void, uint64_t, void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a71 + 8 * (((4 * v104) | (16 * v104)) ^ a57)))((4 * v104) | (16 * v104), v109, v103, (a4 + 32), v91, v102, v101, v84, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48);
}

uint64_t sub_19473AAAC()
{
  return (*(uint64_t (**)(void))(v0
                              + 8
                              * ((LODWORD(STACK[0x214]) ^ 0xC1 ^ (STACK[0x580] == 0x14908D63AC0D79B4)) & 1 ^ (LODWORD(STACK[0x214]) - 270))))();
}

uint64_t sub_19473AAC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v10 = 2 * (v7 ^ 0x769);
  int v11 = *(unsigned char **)(a6 + 16);
  unsigned int v12 = (v11 * ((v10 + 3373) ^ 0x98E51B46)) ^ ((v11 * ((v10 + 3373) ^ 0x98E51B46)) >> 16);
  *(unsigned char *)(v9 - 192) = *(unsigned char *)(*(void *)(v8 + 8 * (v10 ^ 0x572)) - 4 + 16 * ((-1729820329 * v12) >> 24)) ^ *v11 ^ (87 * v12);
  return (*(uint64_t (**)(void))(a7 + 8 * (v10 ^ 0x1FF)))();
}

uint64_t sub_19473AB54(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5, int a6, int a7)
{
  *(void *)(v9 + (a3 + a7)) = *(void *)(a4 + (a3 + a7));
  return (*(uint64_t (**)(void))(v7 + 8 * (((a6 + a7 != 8) * a5) ^ v8)))();
}

uint64_t sub_19473AB84@<X0>(uint64_t a1@<X2>, int a2@<W3>, uint64_t a3@<X4>, unint64_t a4@<X8>, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,int a39,int a40,int a41,int a42,uint64_t a43,uint64_t a44,uint64_t a45,unint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56)
{
  unint64_t v61 = a3 + v57 + a2 + 2 * (v56 ^ 0x1Fu);
  int v62 = *(uint64_t (**)(void))(v58 + 8 * v56);
  uint64_t v63 = *(unsigned int *)(a56 - 0x41318FF160F90EDDLL);
  int v64 = *(_DWORD *)(a56 - 0x41318FF160F90ED9);
  uint64_t v65 = *(unsigned int *)(a56 - 0x41318FF160F90ED5);
  int v66 = *(_DWORD *)(a56 - 0x41318FF160F90ED1);
  int v67 = *(unsigned __int8 *)(a56 - 0x41318FF160F90EC5) ^ 0xFF;
  if (v67 == 2)
  {
    BOOL v72 = v61 < a46 && a4 < v61 + 64;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v58 + 8 * ((194 * v72) ^ a42)))(v63, v65, a1, a56 - 0x41318FF160F90ECDLL, *(unsigned int *)(a56 - 0x41318FF160F90ECDLL));
  }
  else if (v67 == 1)
  {
    BOOL v69 = v61 >= a46 || a4 >= v61 + 64;
    return (*(uint64_t (**)(uint64_t, uint64_t))(v58 + 8 * ((a40 * v69) ^ a41)))(v63, v65);
  }
  else
  {
    *(_DWORD *)(a56 - 0x41318FF160F90EDDLL) = v60
                                            + 2 * (*(_DWORD *)(a56 - 0x41318FF160F90EDDLL) ^ v60)
                                            - (v59 & (4 * (*(_DWORD *)(a56 - 0x41318FF160F90EDDLL) ^ v60)));
    *(_DWORD *)(a56 - 0x41318FF160F90ED9) = (*(_DWORD *)(a56 - 0x41318FF160F90ED9) ^ v60)
                                            + (v64 ^ v60)
                                            + v60
                                            - (v59 & (2 * ((*(_DWORD *)(a56 - 0x41318FF160F90ED9) ^ v60) + (v64 ^ v60))));
    *(_DWORD *)(a56 - 0x41318FF160F90ED5) = (*(_DWORD *)(a56 - 0x41318FF160F90ED5) ^ v60)
                                            + (v65 ^ v60)
                                            + v60
                                            - (v59 & (2 * ((*(_DWORD *)(a56 - 0x41318FF160F90ED5) ^ v60) + (v65 ^ v60))));
    *(_DWORD *)(a56 - 0x41318FF160F90ED1) = (*(_DWORD *)(a56 - 0x41318FF160F90ED1) ^ v60)
                                            + (v66 ^ v60)
                                            + v60
                                            - (v59 & (2 * ((*(_DWORD *)(a56 - 0x41318FF160F90ED1) ^ v60) + (v66 ^ v60))));
    return v62();
  }
}

uint64_t sub_19473ABA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return (*(uint64_t (**)(void))(v6 + 8 * (((v7 == a5) * ((v5 - 1020) ^ 0x1048)) ^ (v5 + 1941))))();
}

uint64_t sub_19473ABCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,int a23,int a24,int a25,int a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,uint64_t a32,uint64_t a33,uint64_t a34,unsigned __int8 a35,int a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,unsigned __int8 a49,uint64_t a50,int a51,uint64_t a52,uint64_t a53,unsigned __int8 a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  int v62 = *(unsigned __int8 *)(a56 + ((a24 ^ a8) ^ 0xDELL)) ^ a24 ^ a8 ^ 0x34;
  HIDWORD(v64) = v62 ^ 0x22;
  LODWORD(v64) = (v62 ^ 0x40) << 24;
  int v63 = v64 >> 30;
  HIDWORD(v64) = ~v63;
  LODWORD(v64) = (v63 ^ 0xFFFFFFF7) << 24;
  int v65 = *(unsigned __int8 *)(a56 + (a54 ^ 0x15)) ^ ((v64 >> 26) - ((2 * (v64 >> 26)) & 0xFFFFFFAC) + 86);
  int v73 = *(unsigned __int8 *)(a56 + ((a26 ^ a8) ^ 0x5DLL));
  int v66 = *(unsigned __int8 *)(a56 + (a51 ^ 0x15));
  char v67 = ((*(unsigned char *)(a56 + (a49 ^ 0x15)) ^ *(unsigned char *)(a56 + ((a8 ^ a22) ^ 0xC3)))
       - ((2 * (*(unsigned char *)(a56 + (a49 ^ 0x15)) ^ *(unsigned char *)(a56 + ((a8 ^ a22) ^ 0xC3)))) & 0xDC)
       - 18) ^ a8 ^ a22 ^ 0xCA;
  uint64_t v68 = (a49 ^ (v67 - ((2 * v67) & 0x7C) + 62)) ^ 0xCCu;
  unsigned int v69 = ((v66 ^ v73) + (~(2 * (v66 ^ v73)) | 0xFFFFFFE3) - 113) ^ a26 ^ a8 ^ 0x39;
  uint64_t v70 = (a51 ^ 0x5A ^ (v69 + (~(2 * v69) | 0xB5) - 90)) << 24;
  unsigned int v71 = ((a35 & 7 ^ 2 | 0xF23DE5F0) ^ 0xF23DE5F0)
      - 285701479
      - 2 * (((a35 & 7 ^ 2 | 0xF23DE5F0) ^ 0xF23DE5F0) & 0x6EF89A6F ^ (a35 & 7 ^ 2) & 4)
      + 4050;
  *(void *)(a10 + 8 * ((((a35 >> 3) ^ 7) - 565723970 - ((2 * ((a35 >> 3) ^ 7)) & 0x3C)) ^ 0xDE47BCBE)) = (v60 | v61) ^ *(void *)(v59 + 8 * (v71 ^ (a31 - 285703834))) ^ ((v71 ^ 0xEEF89ADA) - ((2 * (v71 ^ 0xEEF89ADA) + 0x44A670C880E0F44CLL) & 0x44001000E777A17CLL) + 0x15DBC364B42C4AE4) ^ 0x64CD8C68874030FBLL;
  return (*(uint64_t (**)(uint64_t, void, uint64_t))(a59 + 8 * ((a31 - 4852) ^ 0x3FD)))(v70, ((v65 - ((2 * v65) & 0x24) - 110) ^ a37) ^ 0xCBu, v68);
}

uint64_t sub_19473B410(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11, unsigned int a12, int a13, uint64_t a14, unsigned int a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19)
{
  uint64_t v25 = *(void *)(v19 + 8);
  uint64_t v26 = *(void *)(v19 + 48);
  unsigned int v27 = 1779849041 * ((&a12 & 0xB30F25D6 | ~(&a12 | 0xB30F25D6)) ^ 0x7929CE52);
  a15 = ((v22 ^ 0xE5C7E3FD) + 2134818671 + (v23 & 0xCB8FC7FA)) ^ v27;
  a16 = v25;
  a17 = a9;
  a18 = a9;
  a12 = (a11 ^ 0xEFFD7B3E) - v27 + 2055190012 + ((a11 << ((v24 - 37) ^ 0x16)) & (((v24 - 2855) | 0x102) - 537202331));
  a13 = v27 + 363674086 + v24;
  a14 = v26;
  uint64_t v28 = (*(uint64_t (**)(unsigned int *))(v21 + 8 * (v24 ^ 0x116D)))(&a12);
  return (*(uint64_t (**)(uint64_t))(v21 + 8 * ((101 * (a19 == v20)) ^ v24)))(v28);
}

uint64_t sub_19473B530@<X0>(int a1@<W1>, unsigned int a2@<W2>, uint64_t a3@<X8>)
{
  unsigned int v7 = ((2 * (a1 + v3 + (v5 ^ v6) + 8)) & 0x39FDFCFC)
     + ((a1 + v3 + (v5 ^ v6) + 8) ^ 0x1CFEFE7E)
     + ((a2 - 1893) | 0x4C)
     - 1943410760;
  unsigned int v8 = v4 - 1897294523;
  int v9 = (v8 < 0xA928F284) ^ (v7 < ((a2 + 1343481733) & 0xAFEC0F3F ^ 0xA928F8A8));
  BOOL v10 = v7 > v8;
  if (v9) {
    BOOL v10 = v7 < ((a2 + 1343481733) & 0xAFEC0F3F ^ 0xA928F8A8);
  }
  return (*(uint64_t (**)(void))(a3 + 8 * ((199 * !v10) ^ a2)))();
}

uint64_t sub_19473B5EC(uint64_t a1, int a2, int a3)
{
  return (*(uint64_t (**)(uint64_t, void, uint64_t))(v3
                                                             + 8
                                                             * (((((a3 - 6308) | 0x340) - 834) * (a2 == 0x5CA73CC7)) ^ (a3 - 1741))))(a1, (a3 - 43319885), 1308317836);
}

uint64_t sub_19473B650(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, int a18, uint64_t a19, unsigned int a20,unint64_t *a21,unsigned int a22)
{
  unsigned int v24 = 544512889 * ((&a17 & 0x1D3F545D | ~(&a17 | 0x1D3F545D)) ^ 0xC4FB4C00);
  a19 = a13;
  a22 = v24 + 519983129;
  a20 = 1670256535 - v24;
  a21 = &STACK[0x1E02A40265E6AA2D];
  a18 = v23 - v24 - 897453861;
  uint64_t v25 = (*(uint64_t (**)(int *))(v22 + 8 * (v23 + 6329)))(&a17);
  return (*(uint64_t (**)(uint64_t))(v22
                                            + 8
                                            * ((4278
                                              * (a17 == ((v23 + 912501003) & 0x177F)
                                                      + ((v23 - 50996396) & 0x2DDF)
                                                      + 1293059452)) ^ v23)))(v25);
}

uint64_t sub_19473B754(uint64_t a1, uint64_t a2, void *a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  unsigned int v12 = *(uint64_t (**)(void))(STACK[0x230] + 8 * (LODWORD(STACK[0x214]) - 6784));
  uint64_t v13 = *a3 + v8 + 0x4C7AC8B601F876ECLL;
  unint64_t v14 = -1729820329 * ((-1729820329 * v13) ^ ((-1729820329 * v13) >> 16));
  unint64_t v15 = STACK[0x218];
  unint64_t v16 = STACK[0x220];
  unint64_t v17 = STACK[0x228];
  *(unsigned char *)uint64_t v13 = *(unsigned char *)(STACK[0x218] + (v14 >> 24)) ^ 0xCB ^ *(unsigned char *)(STACK[0x220] + (v14 >> 24)) ^ *(unsigned char *)(STACK[0x228] + (v14 >> 24)) ^ v14 ^ (((-1729820329 * ((-1729820329 * v13) ^ ((-1729820329 * v13) >> 16))) >> 24) * a8) ^ a4;
  unint64_t v18 = -1729820329 * ((-1729820329 * (v13 + 1)) ^ ((-1729820329 * (v13 + 1)) >> 16));
  *(unsigned char *)(v13 + 1) = *(unsigned char *)(v15 + (v18 >> 24)) ^ 0x59 ^ *(unsigned char *)(v16 + (v18 >> 24)) ^ *(unsigned char *)(v17 + (v18 >> 24)) ^ v18 ^ (((-1729820329 * ((-1729820329 * (v13 + 1)) ^ ((-1729820329 * (v13 + 1)) >> 16))) >> 24) * a8) ^ v9;
  unint64_t v19 = -1729820329 * ((-1729820329 * (v13 + 2)) ^ ((-1729820329 * (v13 + 2)) >> 16));
  *(unsigned char *)(v13 + 2) = (87 * ((87 * (v13 + 2)) ^ ((-1729820329 * (v13 + 2)) >> 16))) ^ 0xAB ^ *(unsigned char *)(v15 + (v19 >> 24)) ^ *(unsigned char *)(v16 + (v19 >> 24)) ^ (((-1729820329 * ((-1729820329 * (v13 + 2)) ^ ((-1729820329 * (v13 + 2)) >> 16))) >> 24) * a8) ^ *(unsigned char *)(v17 + (v19 >> 24)) ^ v10;
  unint64_t v20 = -1729820329 * ((-1729820329 * (v13 + 3)) ^ ((-1729820329 * (v13 + 3)) >> 16));
  *(unsigned char *)(v13 + 3) = (87 * ((87 * (v13 + 3)) ^ ((-1729820329 * (v13 + 3)) >> 16))) ^ 0xE ^ (((-1729820329 * ((-1729820329 * (v13 + 3)) ^ ((-1729820329 * (v13 + 3)) >> 16))) >> 24) * a8) ^ *(unsigned char *)(v15 + (v20 >> 24)) ^ *(unsigned char *)(v16 + (v20 >> 24)) ^ *(unsigned char *)(v17 + (v20 >> 24)) ^ v11;
  return v12();
}

uint64_t sub_19473B8B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52)
{
  return (*(uint64_t (**)(void))(v54
                              + 8
                              * ((54
                                * (((5 * (v52 ^ 0xC4)) ^ (a2 - a52 + v53 < ((509 * (v52 ^ 0xC57u)) ^ 0xFF8uLL))) & 1)) ^ v52)))();
}

uint64_t sub_19473B910@<X0>(int a1@<W0>, uint64_t a2@<X7>, uint64_t a3@<X8>)
{
  uint64_t v11 = a3 + 2;
  uint64_t v12 = v8 - 2;
  *(unsigned char *)(v12 + v9 + 112) = ((v4 + v11) ^ v10) * (v7 + v11);
  *(unsigned char *)(v12 + 238) = ((v6 + v11) ^ v10) * (v5 + v11);
  return (*(uint64_t (**)(void))(a2 + 8 * (((v11 != 126) * a1) ^ v3)))();
}

uint64_t sub_19473B91C@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  *(void *)(STACK[0x4F8] - 0x347A9FB3B4EE85DBLL) = a2;
  return (*(uint64_t (**)(void))(a1
                              + 8
                              * ((((((v3 ^ 0xC5) + 10) ^ (*v2 == 0x244007DCA92B5D88)) & 1)
                                * ((v3 ^ 0x1C5) - 1930)) ^ v3 ^ 0x1C5)))();
}

uint64_t sub_19473B980()
{
  unint64_t v1 = STACK[0x940];
  unint64_t v2 = STACK[0x6F0];
  int v3 = (char *)&STACK[0x1B60] + STACK[0x6F0];
  STACK[0x518] = (unint64_t)v3;
  char v4 = v3 + 16;
  STACK[0x540] = (unint64_t)(v3 + 16);
  STACK[0x678] = (unint64_t)(v3 + 48);
  STACK[0x6F0] = ((v0 - 3073) ^ 0x3DELL) + v2;
  unint64_t v5 = STACK[0x338];
  (*(void (**)(void))(STACK[0x338] + 8 * (v0 + 3609)))();
  uint64_t v6 = (*(uint64_t (**)(char *, void, uint64_t))(v5 + 8 * (v0 + 3609)))(v4, 0, 32);
  STACK[0x600] = 0x347A9FB3B4EE85DBLL;
  STACK[0x500] = 0xB3F0D6256EA70ALL;
  LODWORD(STACK[0x534]) = -575402327;
  STACK[0x408] = 0;
  LODWORD(STACK[0x674]) = -575402327;
  STACK[0x640] = v1;
  return (*(uint64_t (**)(uint64_t))(v5 + 8 * (((v1 == 0x65498B88564D595BLL) * (10 * (v0 ^ 0xF89) - 1)) ^ v0)))(v6);
}

uint64_t sub_19473BA74()
{
  return (*(uint64_t (**)(void))(v1
                              + 8
                              * (((((79 * (v0 ^ 0x6EF) - 2503) ^ (LODWORD(STACK[0x50C]) == LODWORD(STACK[0x208]))) & 1) == 0) ^ v0)))();
}

uint64_t fp_dh_0ccc85ef28d339dac92a021ae65d2e2b(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = (unint64_t)&v8[fp_dh_dcd4af41f7c3772b1517a023ab61b080 ^ fp_dh_c87e12ecdbfde56c318478ffc3bba0fa];
  fp_dh_c87e12ecdbfde56c318478ffc3bba0fa = 864038519 * v2 + 0x5462798188A2A47ALL;
  fp_dh_dcd4af41f7c3772b1517a023ab61b080 = 864038519 * (v2 ^ 0x5462798188A2A47ALL);
  int v3 = *(_DWORD *)(a2 - 0x1953624C2CEC84A6);
  unsigned __int8 v4 = 119 * ((fp_dh_dcd4af41f7c3772b1517a023ab61b080 - (119 * v2 + 122)) ^ 0x7A);
  uint64_t v5 = (uint64_t)*(&fp_dh_8e436c87f1a29db6504b879c9bab0741
                + (v4 ^ fp_dh_df8a9db8e289dde5fca339fcc4a7e211[fp_dh_a0340c06c288d8bf397b9372cd449475[v4] ^ 0xC5])
                - 13);
  if (v3 == 428753209) {
    __asm { BRAA            X1, X17 }
  }
  if (v3 == 428753216)
  {
    int v6 = **(unsigned __int8 **)(a2 - 0x1953624C2CEC84A2) - 9;
    __asm { BRAA            X2, X17 }
  }
  return 4294925278;
}

uint64_t sub_19473BCC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,int a33,uint64_t a34,int a35,int a36)
{
  return (*(uint64_t (**)(void))(v36
                              + 8
                              * (a36 ^ (2
                                      * (((a36 - 5315 + ((2114 * (a36 ^ 0x1A06)) ^ 0x3C1673C0)) ^ (a35
                                                                                                 - ((2 * a33) & 0x67C36EFE)
                                                                                                 - 1830508054))
                                       + ((2 * (a35 - ((2 * a33) & 0x67C36EFE) - 1830508054)) & 0x1FEFBFF4 ^ 0x7C32EF4)
                                       + 2063384216 == 183803538)))))();
}

uint64_t sub_19473BD88(unsigned int a1, int a2, int a3, uint64_t a4, int a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52)
{
  BOOL v57 = v53 < a1;
  *(unsigned char *)(a50 - 0x41318FF160F90F25 + (v52 + a3)) = *(unsigned char *)(a52 + (a5 + v54 + 535));
  unsigned int v58 = a2 + v54 + 1769;
  int v59 = v57 ^ (v58 < a1);
  BOOL v60 = v58 < v53;
  if (!v59) {
    BOOL v57 = v60;
  }
  return (*(uint64_t (**)(void))(v56 + 8 * ((v57 * a7) ^ (v55 - 401))))();
}

uint64_t sub_19473BE04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return (*(uint64_t (**)(uint64_t))(v7 + 8 * ((379 * (v9 + 1 == v8 + 16)) ^ a6)))(v6);
}

uint64_t sub_19473BF14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  *(void *)(v18 - 136) = v13;
  *(_DWORD *)(v18 - 128) = v14
                         - 381095207 * ((~((v18 - 136) | 0xA92400FF) + ((v18 - 136) & 0xA92400FF)) ^ 0x4AA6CA20)
                         + 2391;
  *(void *)(v18 - 120) = a13;
  uint64_t v19 = (*(uint64_t (**)(uint64_t))(v15 + 8 * (v14 + 4141)))(v18 - 136);
  BOOL v20 = v17 == (v16 ^ 0x726AC650) + v14 + 1762;
  return (*(uint64_t (**)(uint64_t))(v15 + 8 * (((2 * v20) | (16 * v20)) ^ v14)))(v19);
}

uint64_t sub_19473BFBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  STACK[0x478] = STACK[0xA38];
  return (*(uint64_t (**)(void))(a4
                              + 8
                              * (int)((((((v5 - 397709183) ^ 0xE84B7081) + 926) ^ (v5 - 397709183) & 0x17B48FFD)
                                     * (LODWORD(STACK[0xA44]) == v4)) ^ (v5 - 880))))();
}

uint64_t sub_19473C018(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  int v74 = v71 - 1474;
  uint64_t v75 = (v71 + 2080512444) & 0x83FDCFED;
  *(_DWORD *)(v73 - 176) = 1779849041 * ((((v73 - 176) | 0x2D84A29D) + (~(v73 - 176) | 0xD27B5D62)) ^ 0x185DB6E7)
                         - 1743676555
                         + v71
                         - 1474;
  *(void *)(a1 + 8) = a22;
  uint64_t v76 = (void *)(v73 - 176);
  (*(void (**)(uint64_t))(a8 + 8 * ((v71 - 1474) ^ 0x8D5)))(v73 - 176);
  int v77 = 1715670589 * ((~((v73 - 176) | 0x308C2DBE) + ((v73 - 176) & 0x308C2DBE)) ^ 0xEA4233E3);
  *uint64_t v76 = *(void *)(v72 + 8 * (v74 - 5370));
  *(_DWORD *)(v73 - 168) = v77 + 618826619;
  *(_DWORD *)(v73 - 164) = v74 - 3312 + v77;
  *(void *)(v73 - 160) = a22;
  (*(void (**)(uint64_t))(a71 + 8 * (v74 + 2179)))(v73 - 176);
  int v78 = 1715670589 * ((2 * ((v73 - 176) & 0x5BC14AE0) - (v73 - 176) + 608089374) ^ 0x10F54BC);
  *uint64_t v76 = a23;
  *(void *)(v73 - 160) = a22;
  *(_DWORD *)(v73 - 168) = v78 + 618826604;
  *(_DWORD *)(v73 - 164) = v74 - 3312 + v78;
  uint64_t v79 = (*(uint64_t (**)(uint64_t))(a71 + 8 * (v74 ^ 0x883)))(v73 - 176);
  STACK[0x210] = a22 - 0x3940CBCF928127A0;
  STACK[0x208] = a57 - 0x3940CBCF928127A0;
  STACK[0x200] = a22 - 0x3940CBCF9281279CLL;
  *(_DWORD *)(a57 - 0x3940CBCF928127A4) = *(_DWORD *)(a22 - 0x3940CBCF928127A4);
  *(_DWORD *)STACK[0x208] = *(_DWORD *)STACK[0x210];
  *(_DWORD *)(a57 - 0x3940CBCF9281279CLL) = *(_DWORD *)STACK[0x200];
  *(_DWORD *)(a57 - 0x3940CBCF92812798) = *(_DWORD *)(a22 - 0x3940CBCF92812798);
  *(_DWORD *)(a57 - 0x3940CBCF92812794) = *(_DWORD *)(a22 - 0x3940CBCF92812794);
  *(_DWORD *)(a57 - 0x3940CBCF92812790) = *(_DWORD *)(a22 - 0x3940CBCF92812790);
  return (*(uint64_t (**)(uint64_t))(a71
                                            + 8
                                            * (int)((((v75 + 20) ^ 0x1339) * (a57 - a22 < (v75 ^ 0x4B8uLL))) ^ v75)))(v79);
}

uint64_t sub_19473C30C@<X0>(__int16 a1@<W8>)
{
  LOWORD(STACK[0x6BC]) = a1;
  return (*(uint64_t (**)(void))(STACK[0x230] + 8 * (v1 - 6813)))();
}

uint64_t sub_19473C328(uint64_t a1)
{
  int v4 = *(unsigned __int8 *)(*(void *)(a1 + 24) + (v2 - 1184691959));
  BOOL v5 = ((((v3 + 769311349) & 0xD225335D) + v4 - ((2 * v4) & 0xEA) - 1259796703) & 0x1F) != 10;
  return (*(uint64_t (**)(void))(v1 + 8 * ((4 * v5) | (8 * v5) | v3)))();
}

void fp_dh_f05c54b5d3c5847f905354681c5ed4d1(uint64_t a1)
{
  int v1 = 583213109 * ((((2 * a1) | 0x12B7C3B4) - a1 - 157016538) ^ 0x1CFECFC9);
  unsigned int v2 = *(_DWORD *)(*(void *)(a1 + 32) - 0x2EDBD6A69781CDF0) + 1137940142;
  unsigned int v3 = (*(_DWORD *)(a1 + 16) ^ v1) + 319052347;
  BOOL v4 = v2 < 0x8A708DA4;
  BOOL v5 = v2 > v3;
  if (v3 < 0x8A708DA4 != v4) {
    BOOL v5 = v4;
  }
  __asm { BRAA            X9, X17 }
}

uint64_t sub_19473C4A0()
{
  int v3 = (v0 - 1126992797) & 0x432C9D64;
  *(_DWORD *)(v1 - 0x14908D63AC0D7960) = *(_DWORD *)(STACK[0x610] - 0x1F892890EE37703CLL);
  unint64_t v4 = STACK[0x378];
  STACK[0x608] = (unint64_t)&STACK[0x7D0] + STACK[0x378] + (v3 ^ 0x1092u) - 0x597F77954EB3F35ALL;
  STACK[0x378] = v4 + 32;
  unint64_t v5 = STACK[0x368];
  STACK[0x438] = STACK[0x368];
  STACK[0x550] = 0;
  STACK[0x5C8] = 0;
  STACK[0x4D0] = 0;
  LODWORD(STACK[0x3D4]) = 0;
  STACK[0x580] = 0x14908D63AC0D79B4;
  STACK[0x248] = 0;
  uint64_t v6 = (*(uint64_t (**)(void))(v2 + 8 * (v3 + 1092)))();
  if (v5) {
    BOOL v7 = LODWORD(STACK[0x654]) == ((2887 * (v3 ^ 0x1966)) ^ 0x4DCA4BCA);
  }
  else {
    BOOL v7 = 1;
  }
  int v8 = !v7;
  return (*(uint64_t (**)(uint64_t))(STACK[0x230] + 8 * ((226 * v8) ^ v3)))(v6);
}

uint64_t sub_19473C5B8@<X0>(int a1@<W8>)
{
  *(unsigned char *)(v2 - 0x14908D63AC0D7948) = 32;
  return (*(uint64_t (**)(void))(v3 + 8 * ((997 * (((v2 == v1) ^ (a1 - 1)) & 1)) ^ a1)))();
}

uint64_t sub_19473C614(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  return (*(uint64_t (**)(void))(v7 + 8 * ((93 * (a6 < 0x83)) ^ (v6 + 522))))();
}

uint64_t sub_19473C63C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return (*(uint64_t (**)(void))(v5 + 8 * (((((((a4 - 3875) | 0xB0) ^ 0x6AA) & v4) == 0) * (a4 - 5410)) ^ a4)))();
}

uint64_t sub_19473C678@<X0>(uint64_t a1@<X4>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(void))(a2 + 8 * ((2085 * (v3 + 1 == a1 + 24)) ^ v2)))();
}

uint64_t sub_19473C740@<X0>(void *a1@<X5>, uint64_t a2@<X6>, int a3@<W8>)
{
  *a1 = 0;
  return (*(uint64_t (**)(void))(v3 + 8 * ((a3 + 1656517054) | (a2 != 0))))();
}

uint64_t sub_19473C768()
{
  return (*(uint64_t (**)(void))(v2
                                           + 8
                                           * (((((v1 - 2525) | 0x1A8) ^ 0x999) * (v0 == 0x432A15D63F1FF59ELL)) ^ v1)))((v1 + 304));
}

uint64_t sub_19473C7C0@<X0>(unint64_t a1@<X8>)
{
  if (v1 == 15230) {
    return (*(uint64_t (**)(void))(STACK[0x230] + 8 * (v2 - 6950)))();
  }
  if (v1 == 10380 || v1 == 64722) {
    STACK[0x420] = a1;
  }
  return ((uint64_t (*)(void))STACK[0x5B0])();
}

uint64_t sub_19473C820(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8 * (((v5 - 2017) * (v6 == v4)) ^ (v5 - 398))))();
}

uint64_t sub_19473C848()
{
  unint64_t v1 = STACK[0x568];
  unint64_t v2 = STACK[0x7D8];
  uint64_t v3 = (char *)&STACK[0xB20]
     + STACK[0x7D8]
     + ((((v0 - 1518985533) ^ 0xA576381C) - 0x11B94F045C8E104BLL) ^ (v0 - 1518985533) & 0x5A89CE7F);
  STACK[0x678] = (unint64_t)v3;
  int v4 = v3 + 16;
  STACK[0x5F0] = (unint64_t)(v3 + 16);
  STACK[0x838] = (unint64_t)(v3 + 48);
  STACK[0x7D8] = v2 + 80;
  unint64_t v5 = STACK[0x338];
  (*(void (**)(void))(STACK[0x338] + 8 * (v0 ^ 0x753)))();
  uint64_t v6 = (*(uint64_t (**)(char *, void, uint64_t))(v5 + 8 * (v0 ^ 0x753)))(v4, 0, 32);
  STACK[0x640] = 0x347A9FB3B4EE85DBLL;
  STACK[0x8F8] = 0xB3F0D6256EA70ALL;
  LODWORD(STACK[0x6A4]) = -575402327;
  STACK[0x698] = 0;
  LODWORD(STACK[0x750]) = 934228600;
  STACK[0x6B0] = v1;
  return (*(uint64_t (**)(uint64_t))(v5
                                            + 8
                                            * (((2 * (v1 == 0x65498B88564D595BLL)) | (4 * (v1 == 0x65498B88564D595BLL))) ^ v0)))(v6);
}

void fp_dh_be2766909912da82be6b50184452caff(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  int v1 = *(_DWORD *)(a1 + 12) - 381095207 * (a1 ^ 0x1C7D3520);
  uint64_t v3 = *(void *)a1;
  unsigned int v4 = v1 - 1715670589 * ((2 * (&v3 & 0x5068DFC8) - &v3 + 798433333) ^ 0xAA6C197) + 2806;
  uint64_t v2 = (uint64_t)*(&fp_dh_8e436c87f1a29db6504b879c9bab0741 + (v1 ^ 0x802));
  (*(void (**)(uint64_t *))(v2 + 8 * (v1 + 5587)))(&v3);
  __asm { BRAA            X9, X17 }
}

void sub_19473CA80(int a1@<W8>)
{
  if (*(_DWORD *)(v3 - 0x52FBDFC2BD92B071) - 718710145 >= (a1 ^ 0x63u) + 2147481557) {
    int v4 = v2;
  }
  else {
    int v4 = v2 + 2;
  }
  *(_DWORD *)(v1 + 8) = v4;
}

void fp_dh_30fb5b7ad42f7b1b306010067a00080d(uint64_t a1)
{
  int v1 = (*(_DWORD *)(a1 + 8) - 544512889 * (a1 ^ 0x263BE7A2) - 1545822985) & 0x5C235EFB;
  __asm { BRAA            X7, X17 }
}

uint64_t sub_19473CC7C(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, int a7)
{
  *(void *)(a4 + a2) = *(void *)(v8 + a2);
  return (*(uint64_t (**)(uint64_t, void))(v9 + 8 * (((a7 == 0) * v7) ^ a5)))(a1, a2 - 8);
}

uint64_t sub_19473CCAC@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v2 - 0x244007DCA92B5D80) = a1;
  return (*(uint64_t (**)(void))(v4 + 8 * (((*v1 == 0x244007DCA92B5D88) * ((v3 + 3514) ^ 0x12B3)) ^ (v3 + 3514))))();
}

uint64_t sub_19473CD04()
{
  return v0();
}

uint64_t sub_19473CD14@<X0>(int a1@<W0>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  int v24 = v22 ^ 0x111F;
  BOOL v25 = *(_DWORD *)(a21 - 0x4DF0B4D3CD1F7664 + 4 * (((v24 - 401) ^ (a2 + 2)) + a1)) == v21;
  return (*(uint64_t (**)(void))(v23 + 8 * ((2 * v25) | (16 * v25) | v24)))();
}

uint64_t sub_19473CD70@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  unsigned int v10 = v2 - 440360256;
  int v11 = v2 - 1;
  int v12 = *(unsigned __int8 *)(v6 + v10);
  if (v12 == 218) {
    __asm { BRAA            X11, X17 }
  }
  if (v12 == 90)
  {
    int v13 = 1293064305;
    uint64_t v14 = *v3;
    int v15 = *((unsigned __int8 *)v3 + 28) ^ v4;
    *(void *)uint64_t result = v6;
    *(_DWORD *)(result + 8) = v7;
    *(_DWORD *)(result + 12) = v11;
    if (v15 == 3) {
      int v16 = -1590775536;
    }
    else {
      int v16 = -1590775535;
    }
    *(_DWORD *)(result + 16) = 270176864;
    *(_DWORD *)(result + 20) = v16;
    *(_DWORD *)(result + 24) = 1293064305;
    *(void *)(v14 - 0x1A04EC0D53C8E4FALL) = a2;
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(void))(v9 + 8 * (v8 + 1692)))();
    int v13 = 1293022282;
  }
  *((_DWORD *)v3 + 6) = v13;
  return result;
}

uint64_t sub_19473CE54@<X0>(uint64_t a1@<X0>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,unint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,unint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52)
{
  uint64_t v53 = LODWORD(STACK[0x214]);
  unint64_t v54 = (a2 ^ v52) + a52;
  STACK[0x6A0] = v54 + 10;
  v54 -= 0x7822BD1B79B374D0;
  BOOL v55 = v54 < 0xFAF6F1E3;
  BOOL v56 = v54 > a31;
  if (a35 > 0xFFFFFFFF05090E1CLL != v55) {
    BOOL v57 = v55;
  }
  else {
    BOOL v57 = v56;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(STACK[0x230] + 8 * (int)((v53 - 4399) ^ (103 * v57))))(a1, v53);
}

#error "19473EB9C: call analysis failed (funcsize=1724)"

uint64_t sub_19473EBA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4
                              + 8
                              * (int)(((LODWORD(STACK[0x44C]) == -575402359)
                                     * ((v4 - 1072) ^ 0x1032 ^ (v4 + 1232594863) & 0xB6880BEE)) ^ v4)))();
}

uint64_t sub_19473EBF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13)
{
  if (a10) {
    BOOL v15 = a13 == 729203390;
  }
  else {
    BOOL v15 = 1;
  }
  int v17 = !v15 && a11 != 0;
  return (*(uint64_t (**)(void))(v14
                              + 8
                              * (int)((v17
                                     * ((((v13 - 1521391765) & 0x5AAE93DF) + 528715049) & 0xE07C6B7F ^ (((v13 - 1521391765) & 0x5AAE93DF) - 2081))) ^ (v13 - 1521391765) & 0x5AAE93DF)))();
}

uint64_t sub_19473EC74(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  return (*(uint64_t (**)(void))(v9 + 8 * ((((a8 ^ 0x1F06) - 1303) * (v8 == a4)) ^ a8)))();
}

uint64_t sub_19473ECA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int a9@<W8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  *(unsigned char *)(v35 + v37 + ((a9 + v38) & v39) - 1633) = ((v36 - 4) ^ a1) * (v36 + 13);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v40 + 8 * (((v37 + ((a9 + v38) & v39) == 1633) * (int)a2) ^ a9)))(a1, a2, a3, a4, a5, a6, a7, a8, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35);
}

uint64_t sub_19473ECA8(uint64_t a1, uint64_t a2)
{
  unsigned int v6 = *(unsigned __int8 *)(a2 + 2) + (v3 ^ 0xFFFFF952);
  return (*(uint64_t (**)(void))(v2 + 8 * ((5797 * ((v5 & (2 * v6)) + (v6 ^ v4) == v4)) ^ v3)))();
}

uint64_t sub_19473ECE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,int a50,int a51,uint64_t a52)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v52
                                                                                         + 8
                                                                                         * ((a51 + 2903) | (2 * (a12 != 0)) | (16 * (a12 != 0)))))(a1, a2, a3, a4, a5, a52);
}

uint64_t sub_19473ED20@<X0>(int a1@<W5>, int a2@<W6>, uint64_t a3@<X7>, uint64_t a4@<X8>)
{
  unsigned int v13 = v5 + a2;
  uint64_t v14 = a4 - 1;
  *(unsigned char *)(v6 + v14) = *(unsigned char *)(v7 + v14) ^ *(unsigned char *)(v12 + ((unint64_t)((v13 ^ HIWORD(v13)) * a1) >> 24)) ^ *(unsigned char *)(a3 + ((unint64_t)((v13 ^ HIWORD(v13)) * a1) >> 24)) ^ *(unsigned char *)(v11 + ((unint64_t)((v13 ^ HIWORD(v13)) * a1) >> 24)) ^ ((v13 ^ BYTE2(v13)) * a1) ^ ((((v13 ^ HIWORD(v13)) * a1) >> 24) * v8) ^ v9;
  return (*(uint64_t (**)(void))(STACK[0x338] + 8 * (((v14 == -31) * v10) ^ v4)))();
}

uint64_t sub_19473ED2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31 = a8 ^ 0x1ABEu;
  unint64_t v49 = STACK[0x720];
  unint64_t v48 = ((STACK[0x760] - 0x1FD9603601448475) ^ 0x7C3FF6FBDBFF6FBFLL)
      - 0x2C2A84D903342B06
      + ((2 * (STACK[0x760] - 0x1FD9603601448475)) & 0xF87FEDF7B7FEDF7ELL);
  unint64_t v47 = ((STACK[0x6F0] - 0x5F2923A74BFD0838) ^ 0xD49DFE2FDFFFF6B9)
      + 0x7B7773F2F8CB4E00
      + ((2 * (STACK[0x6F0] - 0x5F2923A74BFD0838)) & 0xA93BFC5FBFFFED72);
  unint64_t v46 = STACK[0x770];
  unint64_t v45 = STACK[0x780];
  unint64_t v44 = ((STACK[0x6E0] - 0x4CC41148CF3A9C6BLL) ^ 0x75377263D9DFF5BFLL)
      - 0x252200410114B106
      + ((2 * (STACK[0x6E0] - 0x4CC41148CF3A9C6BLL)) & 0xEA6EE4C7B3BFEB7ELL);
  unint64_t v43 = STACK[0x7B8];
  unint64_t v42 = ((STACK[0x710] - 0x644BB64B871677ADLL) ^ 0x7B7D7BDE7FB7B75FLL)
      - 0x4D02400503141BLL
      + ((2 * (STACK[0x710] - 0x644BB64B871677ADLL)) & 0xF6FAF7BCFF6F6EBELL);
  unint64_t v41 = ((STACK[0x700] - 0x45241DE22750DE7BLL) ^ 0xFB3CF99F7EFFEFDDLL)
      + 0x7FF37FFEFBB4B367
      + ((2 * (STACK[0x700] - 0x45241DE22750DE7BLL)) & 0xF679F33EFDFFDFBALL);
  unint64_t v40 = ((STACK[0x750] - 0xD01991CBA53850ALL) ^ 0xFF7B7F9FFABDA3CFLL)
      + 0x7BB4F9FE7FF6FF75
      + ((2 * (STACK[0x750] - 0xD01991CBA53850ALL)) & 0xFEF6FF3FF57B479ELL);
  unint64_t v39 = ((STACK[0x6F0] - 0x5F2923A74BFD0836) ^ 0xFFF7FBFEFFB5BB5FLL)
      + 0x7B387D9F7AFEE7E5
      + ((2 * (STACK[0x6F0] - 0x5F2923A74BFD0836)) & 0xFFEFF7FDFF6B76BELL);
  unint64_t v38 = ((STACK[0x760] - 0x1FD9603601448473) ^ 0xFF3CFFDEFAF5B364)
      + 0x7BF379BF7FBEEFE0
      + ((2 * (STACK[0x760] - 0x1FD9603601448473)) & 0xFE79FFBDF5EB66C8);
  unint64_t v37 = ((STACK[0x6E0] - 0x4CC41148CF3A9C69) ^ 0x7FF57DBF7BFEFF7DLL)
      - 0x4C50421014A5C39
      + ((2 * (STACK[0x6E0] - 0x4CC41148CF3A9C69)) & 0xFFEAFB7EF7FDFEFALL);
  unint64_t v36 = STACK[0x720] - 0x46AA1944B3690834;
  unint64_t v32 = STACK[0x3B0];
  unint64_t v33 = STACK[0x718];
  STACK[0x208] = STACK[0x620];
  uint64_t v34 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, void, uint64_t, unint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t))(STACK[0x230] + 8 * a8);
  return v34(43, v31, 4294960312, LOWORD(STACK[0x6CA]), LOWORD(STACK[0x69E]), 6476, v32, v34, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           v36,
           a29,
           a30,
           a31,
           ((v43 - 0x3221B93F102B3829) ^ 0xFF387D9E7AB6FBCFLL)
         + 0x7BF7FBFFFFFDA775
         + ((2 * (v43 - 0x3221B93F102B3829)) & 0xFE70FB3CF56DF79ELL),
           ((v45 - 0x7822BD1C74AA66B3) ^ 0xFF71FBFE7FB5B346)
         + 0x7BBE7D9FFAFEEFFELL
         + ((2 * (v45 - 0x7822BD1C74AA66B3)) & 0xFEE3F7FCFF6B668CLL),
           ((v46 - 0xD6C59EC65FE9042) ^ 0xFB707FFEFFF7EB5FLL)
         + 0x7FBFF99F7ABCB7E5
         + ((2 * (v46 - 0xD6C59EC65FE9042)) & 0xF6E0FFFDFFEFD6BELL),
           ((v49 - 0x46AA1944B3690834) ^ 0x7B3179DEFBF7ABDCLL)
         - 0x1004081430898
         + ((2 * (v49 - 0x46AA1944B3690834)) & 0xF662F3BDF7EF57B8),
           STACK[0x7B0] + 286507360,
           STACK[0x778] + 4210487779u,
           STACK[0x768] + 1146340751,
           v33 + 1462969291,
           STACK[0x7B0],
           STACK[0x778],
           STACK[0x768],
           v33,
           ((v43 - 0x3221B93F102B382DLL) ^ 0xFF74FBBF7FF7E376)
         + 0x7BBB7DDEFABCBFCELL
         + ((2 * (v43 - 0x3221B93F102B382DLL)) & 0xFEE9F77EFFEFC6ECLL),
           v37,
           ((v45 - 0x7822BD1C74AA66B7) ^ 0x7BBDFFBF7BFDBB55)
         - 0x8D862101491811
         + ((2 * (v45 - 0x7822BD1C74AA66B7)) & 0xF77BFF7EF7FB76AALL),
           ((v46 - 0xD6C59EC65FE9046) ^ 0xFFBF79FFFAF7BFE6)
         + 0x7B70FF9E7FBCE35ELL
         + ((2 * (v46 - 0xD6C59EC65FE9046)) & 0xFF7EF3FFF5EF7FCCLL),
           v38,
           v39,
           v40,
           v41,
           v42,
           ((v49 - 0x46AA1944B3690838) ^ 0x7BB1FFFE7FBEEBECLL)
         - 0x818660050A48A8
         + ((2 * (v49 - 0x46AA1944B3690838)) & 0xF763FFFCFF7DD7D8),
           ((v43 - 0x3221B93F102B382FLL) ^ 0xD73FFA37FDFB5CF9)
         + 0x78D577EADACFE7C0
         + ((2 * (v43 - 0x3221B93F102B382FLL)) & 0xAE7FF46FFBF6B9F2),
           v43,
           v44,
           ((v45 - 0x7822BD1C74AA66B9) ^ 0xFBB57BFADDDBCCBDLL)
         + 0x545FF627FAEF77FCLL
         + ((2 * (v45 - 0x7822BD1C74AA66B9)) & 0xF76AF7F5BBB7997ALL),
           v45,
           ((v46 - 0xD6C59EC65FE9048) ^ 0xFFDDFA73F9DBD5BFLL)
         + 0x503777AEDEEF6EFALL
         + ((2 * (v46 - 0xD6C59EC65FE9048)) & 0xFFBBF4E7F3B7AB7ELL),
           v46,
           v47,
           v48);
}

uint64_t sub_19473ED50()
{
  return (*(uint64_t (**)(uint64_t))(v3
                                            + 8
                                            * (((v1 == (((v0 + 3) | 0xC2) + 48))
                                              * (v2 + ((v0 - 939562167) & 0x388BEBE4) + 956)) ^ v0)))(4294925278);
}

uint64_t sub_19473EDA0(uint64_t a1, int a2)
{
  return (*(uint64_t (**)(void))(v7
                              + 8
                              * (((((*(unsigned __int8 *)(v4 + 2) - 72) ^ v3)
                                 + v5
                                 + (v2 & (2 * (*(unsigned __int8 *)(v4 + 2) - 72))) == v6)
                                * (1621 * (a2 ^ 0x2E8) + 1401)) ^ a2)))();
}

uint64_t sub_19473EDE8@<X0>(uint64_t a1@<X8>)
{
  int v2 = a1 ^ 0x1B57;
  STACK[0x588] = STACK[0x548];
  STACK[0x280] = *(void *)(v1 + 8 * a1);
  int v3 = (a1 ^ 0x23E) + 167;
  STACK[0x4F0] = (unint64_t)&STACK[0x588];
  unint64_t v4 = STACK[0x588];
  STACK[0x478] = STACK[0x588];
  return (*(uint64_t (**)(void))(v1
                              + 8 * (((((v2 ^ 0x1969 ^ (v4 == 0x65498B88564D595BLL)) & 1) == 0) * (v3 ^ 0x42)) ^ v2)))();
}

uint64_t fp_dh_5b612318151faf640391786f972340a2(_DWORD *a1)
{
  unsigned int v1 = *a1 - 1129841929 * ((a1 + 816343329 - 2 * (a1 & 0x30A86921)) ^ 0xCB573FEE);
  return (*((uint64_t (**)(void))*(&fp_dh_8e436c87f1a29db6504b879c9bab0741 + (int)(v1 - 7290))
          + (int)((26
                 * (((*(void *)((char *)*(&fp_dh_8e436c87f1a29db6504b879c9bab0741 + (int)(v1 ^ 0x1EA5)) - 4) == 0) ^ (v1 + 37)) & 1)) ^ v1)))();
}

void fp_dh_ffe9b88cd6c331332c8b1863762ada7e(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  int v1 = *(_DWORD *)(a1 + 4)
     + 583213109 * (((a1 ^ 0x5A95C19 | 0xE478DBC7) - (a1 ^ 0x5A95C19) + ((a1 ^ 0x5A95C19) & 0x1B872438)) ^ 0xF474A9CD);
  uint64_t v2 = *(void *)(a1 + 8);
  unsigned int v3 = 1299810607
     * (((v5 | 0x81771389) - v5 + (v5 & 0x7E88EC70)) ^ 0xF1212025);
  int v7 = v1 + v3 - 1402;
  uint64_t v6 = v2 + 0x17EAE46201604117;
  v5[1] = v3 ^ 0x1A3F5F67;
  uint64_t v8 = v2 - 0x3976C933F4D32B37;
  uint64_t v4 = (uint64_t)*(&fp_dh_8e436c87f1a29db6504b879c9bab0741 + v1 - 5956);
  (*(void (**)(_DWORD *))(v4 + 8 * (v1 + 1655)))(v5);
  __asm { BRAA            X8, X17 }
}

uint64_t sub_19473F004()
{
  int v7 = (v1 + 746631090) ^ (381095207
                         * ((&v6 - 1741415161 - 2 * ((unint64_t)&v6 & 0x98341D07)) ^ 0x84492827));
  uint64_t v6 = v2 - 0x36D4D86877C65577;
  uint64_t result = (*(uint64_t (**)(uint64_t *))(v3 + 8 * (v1 + 1732)))(&v6);
  _DWORD *v0 = v4;
  return result;
}

uint64_t fp_dh_2fe88ad3cdaa9a0b4e727fd9cd2a2356(void *a1)
{
  uint64_t v104 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (_DWORD *)*a1;
  uint64_t v1 = a1[1];
  int v88 = (*(_DWORD *)*a1 ^ 0x3F0DDFBE) - 587469066 + ((2 * *(_DWORD *)*a1) & 0x7E1BBF7C);
  int v89 = (v2[1] ^ 0x3F0DDFBE) - 587469066 + ((2 * v2[1]) & 0x7E1BBF7C);
  unsigned int v90 = (v2[2] ^ 0x3F0DDFBE) - 587469066 + ((2 * v2[2]) & 0x7E1BBF7C);
  int v91 = (v2[3] ^ 0x3F0DDFBE) - 587469066 + ((2 * v2[3]) & 0x7E1BBF7C);
  int v92 = (v2[4] ^ 0x3F0DDFBE) - 587469066 + ((2 * v2[4]) & 0x7E1BBF7C);
  int v93 = (v2[5] ^ 0x3F0DDFBE) - 587469066 + ((2 * v2[5]) & 0x7E1BBF7C);
  int v94 = (v2[6] ^ 0x3F0DDFBE) - 587469066 + ((2 * v2[6]) & 0x7E1BBF7C);
  int v95 = (v2[7] ^ 0x3F0DDFBE) - 587469066 + ((2 * v2[7]) & 0x7E1BBF7C);
  int v96 = (v2[8] ^ 0x3F0DDFBE) - 587469066 + ((2 * v2[8]) & 0x7E1BBF7C);
  int v97 = (v2[9] ^ 0x3F0DDFBE) - 587469066 + ((2 * v2[9]) & 0x7E1BBF7C);
  int v98 = (v2[10] ^ 0x3F0DDFBE) - 587469066 + ((2 * v2[10]) & 0x7E1BBF7C);
  int v99 = (v2[11] ^ 0x3F0DDFBE) - 587469066 + ((2 * v2[11]) & 0x7E1BBF7C);
  int v100 = (v2[12] ^ 0x3F0DDFBE) - 587469066 + ((2 * v2[12]) & 0x7E1BBF7C);
  int v101 = (v2[13] ^ 0x3F0DDFBE) - 587469066 + ((2 * v2[13]) & 0x7E1BBF7C);
  int v102 = (v2[14] ^ 0x3F0DDFBE) - 587469066 + ((2 * v2[14]) & 0x7E1BBF7C);
  int v103 = (v2[15] ^ 0x3F0DDFBE) - 587469066 + ((2 * v2[15]) & 0x7E1BBF7C);
  uint64_t v87 = v1;
  int v3 = *(_DWORD *)(v1 - 0x978554B44A26C3ALL);
  int v4 = *(_DWORD *)(v1 - 0x978554B44A26C36);
  int v5 = *(_DWORD *)(v1 - 0x978554B44A26C32);
  HIDWORD(v6) = *(_DWORD *)(v1 - 0x978554B44A26C3ELL) + v88 - 1151281724 + (v4 & v3 | v5 & ~v3);
  LODWORD(v6) = HIDWORD(v6);
  int v7 = (v6 >> 25) + v3 - ((2 * ((v6 >> 25) + v3)) & 0xFFCD5724) - 1660014;
  HIDWORD(v6) = v5 + v89 - 859969374 + (v3 & (v7 ^ 0xFFE6AB92) | v4 & ~(v7 ^ 0xFFE6AB92));
  LODWORD(v6) = HIDWORD(v6);
  int v8 = (v6 >> 20) + (v7 ^ 0xFFE6AB92) - ((2 * ((v6 >> 20) + (v7 ^ 0xFFE6AB92))) & 0x6395A6A2) - 1312107695;
  HIDWORD(v6) = v4 + v90 + 135701031 + ((v8 ^ 0xB1CAD351) & (v7 ^ (v3 - ((2 * v3) & 0xFFCD5724) - 1660014)) ^ v3);
  LODWORD(v6) = HIDWORD(v6);
  LODWORD(v1) = (v6 >> 15) + (v8 ^ 0xB1CAD351) - ((2 * ((v6 >> 15) + (v8 ^ 0xB1CAD351))) & 0xC490FE2E) - 498565353;
  int v9 = v1 ^ 0xE2487F17;
  HIDWORD(v6) = v3
              + v91
              - 1514930118
              + ((((v1 ^ 0xE2487F17) & (v7 ^ 0x4E2C78C3 ^ v8))
                - 1660014
                + (~(2 * ((v1 ^ 0xE2487F17) & (v7 ^ 0x4E2C78C3 ^ v8))) | 0x32A8DB)
                + 1) ^ v7);
  LODWORD(v6) = HIDWORD(v6);
  int v10 = (v6 >> 10) + (v1 ^ 0xE2487F17) - ((2 * ((v6 >> 10) + (v1 ^ 0xE2487F17))) & 0x5D54E244) + 782922018;
  HIDWORD(v6) = v92
              + (v7 ^ 0xFFE6AB92)
              - 646823685
              + ((((v10 ^ 0x2EAA7122) & (v8 ^ 0x5382AC46 ^ v1))
                - ((2 * ((v10 ^ 0x2EAA7122) & (v8 ^ 0x5382AC46 ^ v1))) & 0x6395A6A2)
                - 1312107695) ^ v8);
  LODWORD(v6) = HIDWORD(v6);
  int v11 = (v6 >> 25) + (v10 ^ 0x2EAA7122) - ((2 * ((v6 >> 25) + (v10 ^ 0x2EAA7122))) & 0xE2CD2AEA) + 1902548341;
  HIDWORD(v6) = v93
              + (v8 ^ 0xB1CAD351)
              + 729675638
              + ((((v11 ^ 0x71669575) & (v1 ^ 0xCCE20E35 ^ v10))
                - ((2 * ((v11 ^ 0x71669575) & (v1 ^ 0xCCE20E35 ^ v10))) & 0xC490FE2E)
                - 498565353) ^ v1);
  LODWORD(v6) = HIDWORD(v6);
  LODWORD(v1) = (v6 >> 20) + (v11 ^ 0x71669575) - ((2 * ((v6 >> 20) + (v11 ^ 0x71669575))) & 0x5DDF7AB6) + 787463515;
  int v12 = v1 ^ 0x2EEFBD5B;
  HIDWORD(v6) = v94
              + v9
              - 1943636129
              + ((((v1 ^ 0x2EEFBD5B) & (v10 ^ 0x5FCCE457 ^ v11))
                - ((2 * ((v1 ^ 0x2EEFBD5B) & (v10 ^ 0x5FCCE457 ^ v11))) & 0x5D54E244)
                + 782922018) ^ v10);
  LODWORD(v6) = HIDWORD(v6);
  int v13 = (v6 >> 15) + (v1 ^ 0x2EEFBD5B) - ((2 * ((v6 >> 15) + (v1 ^ 0x2EEFBD5B))) & 0x9474BB70) - 902144584;
  HIDWORD(v6) = v95
              + (v10 ^ 0x2EAA7122)
              - 516110771
              + ((((v13 ^ 0xCA3A5DB8) & (v11 ^ 0x5F89282E ^ v1))
                - ((2 * ((v13 ^ 0xCA3A5DB8) & (v11 ^ 0x5F89282E ^ v1))) & 0xE2CD2AEA)
                + 1902548341) ^ v11);
  LODWORD(v6) = HIDWORD(v6);
  int v14 = (v6 >> 10) + (v13 ^ 0xCA3A5DB8) - ((2 * ((v6 >> 10) + (v13 ^ 0xCA3A5DB8))) & 0xE57797A0) - 222573616;
  HIDWORD(v6) = v96
              + (v11 ^ 0x71669575)
              + 1299630628
              + ((((v14 ^ 0xF2BBCBD0) & (v1 ^ 0xE4D5E0E3 ^ v13))
                - ((2 * ((v14 ^ 0xF2BBCBD0) & (v1 ^ 0xE4D5E0E3 ^ v13))) & 0x5DDF7AB6)
                + 787463515) ^ v1);
  LODWORD(v6) = HIDWORD(v6);
  LODWORD(v1) = (v6 >> 25) + (v14 ^ 0xF2BBCBD0) - 44695945 + (~(2 * ((v6 >> 25) + (v14 ^ 0xF2BBCBD0))) | 0x5540311) + 1;
  int v15 = v1 ^ 0xFD55FE77;
  HIDWORD(v6) = v97
              + v12
              + 1866148091
              + ((((v1 ^ 0xFD55FE77) & (v13 ^ 0x38819668 ^ v14))
                - ((2 * ((v1 ^ 0xFD55FE77) & (v13 ^ 0x38819668 ^ v14))) & 0x9474BB70)
                - 902144584) ^ v13);
  LODWORD(v6) = HIDWORD(v6);
  int v16 = (v6 >> 20) + (v1 ^ 0xFD55FE77) - ((2 * ((v6 >> 20) + (v1 ^ 0xFD55FE77))) & 0x20B01E30) - 1873277160;
  unsigned int v17 = v16 ^ 0x90580F18;
  HIDWORD(v6) = v98
              + (v13 ^ 0xCA3A5DB8)
              - 470446851
              + ((((v16 ^ 0x90580F18) & (v14 ^ 0xFEE35A7 ^ v1))
                - ((2 * ((v16 ^ 0x90580F18) & (v14 ^ 0xFEE35A7 ^ v1))) & 0xE57797A0)
                - 222573616) ^ v14);
  LODWORD(v6) = HIDWORD(v6);
  int v18 = (v6 >> 15) + (v16 ^ 0x90580F18) - ((2 * ((v6 >> 15) + (v16 ^ 0x90580F18))) & 0x5E9AC1E2) + 793600241;
  int v19 = v18 ^ 0x2F4D60F1;
  HIDWORD(v6) = v99
              + (v14 ^ 0xF2BBCBD0)
              + 1834158346
              + ((((v18 ^ 0x2F4D60F1) & (v1 ^ 0x6D0DF16F ^ v16))
                - ((2 * ((v18 ^ 0x2F4D60F1) & (v1 ^ 0x6D0DF16F ^ v16))) & 0xFAABFCEE)
                - 44695945) ^ v1);
  LODWORD(v6) = HIDWORD(v6);
  LODWORD(v1) = (v6 >> 10) + (v18 ^ 0x2F4D60F1) - ((2 * ((v6 >> 10) + (v18 ^ 0x2F4D60F1))) & 0x3B74208) + 31170820;
  int v20 = v1 ^ 0x1DBA104;
  HIDWORD(v6) = v100
              + v15
              + 1334198894
              + ((((v1 ^ 0x1DBA104) & (v16 ^ 0xBF156FE9 ^ v18))
                - ((2 * ((v1 ^ 0x1DBA104) & (v16 ^ 0xBF156FE9 ^ v18))) & 0x20B01E30)
                - 1873277160) ^ v16);
  LODWORD(v6) = HIDWORD(v6);
  int v21 = (v6 >> 25) + (v1 ^ 0x1DBA104) - ((2 * ((v6 >> 25) + (v1 ^ 0x1DBA104))) & 0x1263EA0A) - 1993214715;
  HIDWORD(v6) = v101
              + v17
              - 510745889
              + ((((v21 ^ 0x8931F505) & (v18 ^ 0x2E96C1F5 ^ v1))
                - ((2 * ((v21 ^ 0x8931F505) & (v18 ^ 0x2E96C1F5 ^ v1))) & 0x5E9AC1E2)
                + 793600241) ^ v18);
  LODWORD(v6) = HIDWORD(v6);
  int v22 = (v6 >> 20) + (v21 ^ 0x8931F505) - ((2 * ((v6 >> 20) + (v21 ^ 0x8931F505))) & 0x36DE064A) + 460260133;
  int v23 = v22 ^ 0x1B6F0325;
  HIDWORD(v6) = v102
              + v19
              - 1972407078
              + ((((v22 ^ 0x1B6F0325) & (v1 ^ 0x88EA5401 ^ v21))
                - ((2 * ((v22 ^ 0x1B6F0325) & (v1 ^ 0x88EA5401 ^ v21))) & 0x3B74208)
                + 31170820) ^ v1);
  LODWORD(v6) = HIDWORD(v6);
  LODWORD(v1) = (v6 >> 15) + (v22 ^ 0x1B6F0325) - ((2 * ((v6 >> 15) + (v22 ^ 0x1B6F0325))) & 0xEA9EAAE2) - 179350159;
  int v24 = v1 ^ 0xF54F5571;
  HIDWORD(v6) = v103
              + v20
              + 766130541
              + ((((v1 ^ 0xF54F5571) & (v21 ^ 0x925EF620 ^ v22))
                - ((2 * ((v1 ^ 0xF54F5571) & (v21 ^ 0x925EF620 ^ v22))) & 0x1263EA0A)
                - 1993214715) ^ v21);
  LODWORD(v6) = HIDWORD(v6);
  int v25 = (v6 >> 10) + (v1 ^ 0xF54F5571) - ((2 * ((v6 >> 10) + (v1 ^ 0xF54F5571))) & 0x7DEF4C8C) + 1056417350;
  HIDWORD(v6) = v89
              + (v21 ^ 0x8931F505)
              - 636201298
              + ((((v1 ^ 0xCBB8F337 ^ v25) & v23) - ((2 * ((v1 ^ 0xCBB8F337 ^ v25) & v23)) & 0xEA9EAAE2) - 179350159) ^ v1);
  LODWORD(v6) = HIDWORD(v6);
  LODWORD(v2) = v25 ^ 0x3EF7A646;
  LODWORD(v1) = (v6 >> 27) + (v25 ^ 0x3EF7A646) - ((2 * ((v6 >> 27) + (v25 ^ 0x3EF7A646))) & 0x674F7D64) + 866631346;
  HIDWORD(v6) = v94
              + v23
              - 1539906420
              + ((((v25 ^ 0xD5018F4 ^ v1) & v24) - ((2 * ((v25 ^ 0xD5018F4 ^ v1) & v24)) & 0x7DEF4C8C) + 1056417350) ^ v25);
  LODWORD(v6) = HIDWORD(v6);
  int v26 = v1 ^ 0x33A7BEB2;
  int v27 = (v6 >> 23) + (v1 ^ 0x33A7BEB2) - ((2 * ((v6 >> 23) + (v1 ^ 0x33A7BEB2))) & 0x2470A56) + 19105067;
  HIDWORD(v6) = v99
              + v24
              + 173312925
              + ((((v1 ^ 0x32843B99 ^ v27) & v2)
                - ((2 * ((v1 ^ 0x32843B99 ^ v27) & v2)) & 0x674F7D64)
                + 866631346) ^ v1);
  LODWORD(v6) = HIDWORD(v6);
  int v28 = v27 ^ 0x123852B;
  LODWORD(v1) = (v6 >> 18) + (v27 ^ 0x123852B) - ((2 * ((v6 >> 18) + (v27 ^ 0x123852B))) & 0x55918868) + 717800500;
  HIDWORD(v6) = v88
              + v2
              - 844302090
              + ((((v27 ^ 0x2BEB411F ^ v1) & v26) - ((2 * ((v27 ^ 0x2BEB411F ^ v1) & v26)) & 0x2470A56) + 19105067) ^ v27);
  LODWORD(v6) = HIDWORD(v6);
  int v29 = v1 ^ 0x2AC8C434;
  LODWORD(v2) = (v6 >> 12) + (v1 ^ 0x2AC8C434) - ((2 * ((v6 >> 12) + (v1 ^ 0x2AC8C434))) & 0x32E5B7EC) + 426957814;
  HIDWORD(v6) = v93
              + v26
              - 1171963479
              + ((((v1 ^ 0x33BA1FC2 ^ v2) & v28)
                - ((2 * ((v1 ^ 0x33BA1FC2 ^ v2) & v28)) & 0x55918868)
                + 717800500) ^ v1);
  LODWORD(v6) = HIDWORD(v6);
  unsigned int v30 = v2 ^ 0x1972DBF6;
  LODWORD(v1) = (v6 >> 27)
              + (v2 ^ 0x1972DBF6)
              - ((2 * ((v6 >> 27) + (v2 ^ 0x1972DBF6))) & 0x35E58CFA)
              + 452118141;
  HIDWORD(v6) = v98
              + v28
              - 432388705
              + ((((v2 ^ 0x3801D8B ^ v1) & v29)
                - ((2 * ((v2 ^ 0x3801D8B ^ v1) & v29)) & 0x32E5B7EC)
                + 426957814) ^ v2);
  LODWORD(v6) = HIDWORD(v6);
  int v31 = v1 ^ 0x1AF2C67D;
  LODWORD(v2) = (v6 >> 23) + (v1 ^ 0x1AF2C67D) - ((2 * ((v6 >> 23) + (v1 ^ 0x1AF2C67D))) & 0x241252FE) + 302590335;
  HIDWORD(v6) = v103
              + v29
              - 1130883123
              + ((((v1 ^ 0x8FBEF02 ^ v2) & v30)
                - ((2 * ((v1 ^ 0x8FBEF02 ^ v2) & v30)) & 0x35E58CFA)
                + 452118141) ^ v1);
  LODWORD(v6) = HIDWORD(v6);
  unsigned int v32 = v2 ^ 0x1209297F;
  LODWORD(v1) = (v6 >> 18)
              + (v2 ^ 0x1209297F)
              - ((2 * ((v6 >> 18) + (v2 ^ 0x1209297F))) & 0x7A91B19C)
              + 1028184270;
  HIDWORD(v6) = v92
              + v30
              - 875942636
              + ((((v2 ^ 0x2F41F1B1 ^ v1) & v31)
                - ((2 * ((v2 ^ 0x2F41F1B1 ^ v1) & v31)) & 0x241252FE)
                + 302590335) ^ v2);
  LODWORD(v6) = HIDWORD(v6);
  int v33 = v1 ^ 0x3D48D8CE;
  LODWORD(v2) = (v6 >> 12) + (v1 ^ 0x3D48D8CE) - ((2 * ((v6 >> 12) + (v1 ^ 0x3D48D8CE))) & 0x4F140374) + 663355834;
  HIDWORD(v6) = v97
              + v31
              + 98041650
              + ((((v1 ^ 0x1AC2D974 ^ v2) & v32)
                - ((2 * ((v1 ^ 0x1AC2D974 ^ v2) & v32)) & 0x7A91B19C)
                + 1028184270) ^ v1);
  LODWORD(v6) = HIDWORD(v6);
  unsigned int v34 = v2 ^ 0x278A01BA;
  LODWORD(v1) = (v6 >> 27)
              + (v2 ^ 0x278A01BA)
              - ((2 * ((v6 >> 27) + (v2 ^ 0x278A01BA))) & 0xA515BC64)
              - 762651086;
  HIDWORD(v6) = v102
              + v32
              - 1490208478
              + ((((v2 ^ 0xF500DF88 ^ v1) & v33)
                - ((2 * ((v2 ^ 0xF500DF88 ^ v1) & v33)) & 0x4F140374)
                + 663355834) ^ v2);
  LODWORD(v6) = HIDWORD(v6);
  int v35 = v1 ^ 0xD28ADE32;
  LODWORD(v2) = (v6 >> 23) + (v1 ^ 0xD28ADE32) - ((2 * ((v6 >> 23) + (v1 ^ 0xD28ADE32))) & 0x637E212E) + 834605207;
  HIDWORD(v6) = v91
              + v33
              - 657768749
              + ((((v1 ^ 0xE335CEA5 ^ v2) & v34)
                - ((2 * ((v1 ^ 0xE335CEA5 ^ v2) & v34)) & 0xA515BC64)
                - 762651086) ^ v1);
  LODWORD(v6) = HIDWORD(v6);
  unsigned int v36 = v2 ^ 0x31BF1097;
  LODWORD(v1) = (v6 >> 18)
              + (v2 ^ 0x31BF1097)
              - ((2 * ((v6 >> 18) + (v2 ^ 0x31BF1097))) & 0x8BB61B6)
              - 2074234661;
  HIDWORD(v6) = v96
              + v34
              + 693126713
              + ((((v2 ^ 0xB5E2A04C ^ v1) & v35)
                - ((2 * ((v2 ^ 0xB5E2A04C ^ v1) & v35)) & 0x637E212E)
                + 834605207) ^ v2);
  LODWORD(v6) = HIDWORD(v6);
  LODWORD(v2) = (v6 >> 12) + (v1 ^ 0x845DB0DB) - ((2 * ((v6 >> 12) + (v1 ^ 0x845DB0DB))) & 0x8DBF3FB0) - 958423080;
  HIDWORD(v6) = v101
              + v35
              - 1915086255
              + ((((v1 ^ 0x42822F03 ^ v2) & v36)
                - ((2 * ((v1 ^ 0x42822F03 ^ v2) & v36)) & 0x8BB61B6)
                - 2074234661) ^ v1);
  LODWORD(v6) = HIDWORD(v6);
  int v37 = (v6 >> 27)
      + (v2 ^ 0xC6DF9FD8)
      - ((2 * ((v6 >> 27) + (v2 ^ 0xC6DF9FD8))) & 0x50B8ED82)
      - 1470335295;
  HIDWORD(v6) = v90
              + v36
              - 521808572
              + ((((v2 ^ 0x6E83E919 ^ v37) & (v1 ^ 0x845DB0DB))
                - ((2 * ((v2 ^ 0x6E83E919 ^ v37) & (v1 ^ 0x845DB0DB))) & 0x8DBF3FB0)
                - 958423080) ^ v2);
  LODWORD(v6) = HIDWORD(v6);
  int v38 = (v6 >> 23) + (v37 ^ 0xA85C76C1) - ((2 * ((v6 >> 23) + (v37 ^ 0xA85C76C1))) & 0x11035E6A) - 2004766923;
  HIDWORD(v6) = v95
              + (v1 ^ 0x845DB0DB)
              + 1264923685
              + ((((v37 ^ 0x20DDD9F4 ^ v38) & (v2 ^ 0xC6DF9FD8))
                - ((2 * ((v37 ^ 0x20DDD9F4 ^ v38) & (v2 ^ 0xC6DF9FD8))) & 0x50B8ED82)
                - 1470335295) ^ v37);
  LODWORD(v6) = HIDWORD(v6);
  int v39 = (v6 >> 18) + (v38 ^ 0x8881AF35) - ((2 * ((v6 >> 18) + (v38 ^ 0x8881AF35))) & 0x6BF14274) + 905486650;
  HIDWORD(v6) = v100
              + (v2 ^ 0xC6DF9FD8)
              + 1897954774
              + ((((v38 ^ 0xBD790E0F ^ v39) & (v37 ^ 0xA85C76C1))
                - ((2 * ((v38 ^ 0xBD790E0F ^ v39) & (v37 ^ 0xA85C76C1))) & 0x11035E6A)
                - 2004766923) ^ v38);
  LODWORD(v6) = HIDWORD(v6);
  int v40 = (v6 >> 12) + (v39 ^ 0x35F8A13A) - ((2 * ((v6 >> 12) + (v39 ^ 0x35F8A13A))) & 0x73ECD466) - 1175033293;
  uint64_t v41 = 4 * (v37 & 0xF ^ 1u);
  int v42 = *(int *)((char *)&v88 + v41);
  uint64_t v43 = 4
      * (((v6 >> 12)
        + (v39 ^ 0x3A)
        - ((2 * ((v6 >> 12) + (v39 ^ 0x3A))) & 0x66)
        + 51) & 0xF ^ 3u);
  *(int *)((char *)&v88 + v41) = *(int *)((char *)&v88 + v43);
  uint64_t v44 = 4 * (v39 & 0xF ^ 0xAu);
  *(int *)((char *)&v88 + v43) = *(int *)((char *)&v88 + v44);
  uint64_t v45 = 4 * (v38 & 0xF ^ 5u);
  *(int *)((char *)&v88 + v44) = *(int *)((char *)&v88 + v45);
  uint64_t v46 = 4 * ((v37 >> 4) ^ 0xCu);
  *(int *)((char *)&v88 + v45) = *(int *)((char *)&v88 + v46);
  uint64_t v47 = 4
      * ((((v6 >> 12) + (v39 ^ 0x3A) - ((2 * ((v6 >> 12) + (v39 ^ 0x3A))) & 0x66) + 51) >> 4) ^ 3u);
  *(int *)((char *)&v88 + v46) = *(int *)((char *)&v88 + v47);
  uint64_t v48 = 4 * ((v39 >> 4) ^ 3u);
  *(int *)((char *)&v88 + v47) = *(int *)((char *)&v88 + v48);
  uint64_t v49 = 4 * ((v38 >> 4) ^ 3u);
  *(int *)((char *)&v88 + v48) = *(int *)((char *)&v88 + v49);
  *(int *)((char *)&v88 + v49) = v42;
  HIDWORD(v6) = v93
              + (v37 ^ 0xA85C76C1)
              - 470783346
              + (((v40 ^ v39 ^ 0x8C0ECB09) - 2 * ((v40 ^ v39 ^ 0x8C0ECB09) & 0x881AF37 ^ (v40 ^ v39) & 2) - 2004766923) ^ v38);
  LODWORD(v6) = HIDWORD(v6);
  int v50 = (v6 >> 28) + (v40 ^ 0xB9F66A33) - ((2 * ((v6 >> 28) + (v40 ^ 0xB9F66A33))) & 0x536F1420) - 1447589360;
  int v51 = v97;
  HIDWORD(v6) = v96
              + (v38 ^ 0x8881AF35)
              + 1801988045
              + (((v50 ^ v40 ^ 0x1041E023) - 2 * ((v50 ^ v40 ^ 0x1041E023) & 0x35F8A13E ^ (v50 ^ v40) & 4) + 905486650) ^ v39);
  LODWORD(v6) = HIDWORD(v6);
  LODWORD(v48) = (v6 >> 21) + (v50 ^ 0xA9B78A10) - ((2 * ((v6 >> 21) + (v50 ^ 0xA9B78A10))) & 0xF0E737F8) + 2020842492;
  HIDWORD(v6) = v99
              + (v39 ^ 0x35F8A13A)
              + 1368625774
              + (((v50 ^ 0xD1C411EC ^ v48) - ((2 * (v50 ^ 0xD1C411EC ^ v48)) & 0x73ECD466) - 1175033293) ^ v40);
  LODWORD(v6) = HIDWORD(v6);
  int v52 = v48 ^ 0x78739BFC;
  LODWORD(v49) = (v6 >> 16) + (v48 ^ 0x78739BFC) - ((2 * ((v6 >> 16) + (v48 ^ 0x78739BFC))) & 0x8780FCF2) - 1010794887;
  HIDWORD(v6) = v102
              + (v40 ^ 0xB9F66A33)
              - 505714344
              + (((v48 ^ 0xBBB3E585 ^ v49) - ((2 * (v48 ^ 0xBBB3E585 ^ v49)) & 0x536F1420) - 1447589360) ^ v50);
  LODWORD(v6) = HIDWORD(v6);
  int v53 = v49 ^ 0xC3C07E79;
  int v54 = (v6 >> 9) + (v49 ^ 0xC3C07E79) - ((2 * ((v6 >> 9) + (v49 ^ 0xC3C07E79))) & 0xA8BCB846) + 1415470115;
  HIDWORD(v6) = v89
              + (v50 ^ 0xA9B78A10)
              - 2001396848
              + (((v54 ^ v49 ^ 0x979E225A) - 2 * ((v54 ^ v49 ^ 0x979E225A) & 0x78739BFD ^ (v54 ^ v49) & 1) + 2020842492) ^ v48);
  LODWORD(v6) = HIDWORD(v6);
  LODWORD(v2) = v54 ^ 0x545E5C23;
  LODWORD(v48) = (v6 >> 28) + (v54 ^ 0x545E5C23) - ((2 * ((v6 >> 28) + (v54 ^ 0x545E5C23))) & 0x9E305F38) - 820498532;
  HIDWORD(v6) = v92
              + v52
              + 802488565
              + (((v54 ^ 0x9B4673BF ^ v48) - ((2 * (v54 ^ 0x9B4673BF ^ v48)) & 0x8780FCF2) - 1010794887) ^ v49);
  LODWORD(v6) = HIDWORD(v6);
  int v55 = v48 ^ 0xCF182F9C;
  LODWORD(v49) = (v6 >> 21) + (v48 ^ 0xCF182F9C) - ((2 * ((v6 >> 21) + (v48 ^ 0xCF182F9C))) & 0xF7AAB5E8) + 2077580020;
  HIDWORD(v6) = v95
              + v53
              - 625902420
              + (((v48 ^ 0xB4CD7568 ^ v49) - ((2 * (v48 ^ 0xB4CD7568 ^ v49)) & 0xA8BCB846) + 1415470115) ^ v54);
  LODWORD(v6) = HIDWORD(v6);
  int v56 = v49 ^ 0x7BD55AF4;
  int v57 = (v6 >> 16) + (v49 ^ 0x7BD55AF4) - ((2 * ((v6 >> 16) + (v49 ^ 0x7BD55AF4))) & 0xF8AFDFA4) - 61345838;
  HIDWORD(v6) = v98
              + v2
              - 1565135428
              + (((v49 ^ 0x8782B526 ^ v57) - ((2 * (v49 ^ 0x8782B526 ^ v57)) & 0x9E305F38) - 820498532) ^ v48);
  LODWORD(v6) = HIDWORD(v6);
  LODWORD(v48) = (v6 >> 9) + (v57 ^ 0xFC57EFD2) - ((2 * ((v6 >> 9) + (v57 ^ 0xFC57EFD2))) & 0x2A119E9C) + 352898894;
  HIDWORD(v6) = v101
              + v55
              + 210874386
              + (((v48 ^ v57 ^ 0xE95F209C) - 2 * ((v48 ^ v57 ^ 0xE95F209C) & 0x7BD55AF7 ^ (v48 ^ v57) & 3) + 2077580020) ^ v49);
  LODWORD(v6) = HIDWORD(v6);
  int v58 = v48 ^ 0x1508CF4E;
  LODWORD(v49) = (v6 >> 28) + (v48 ^ 0x1508CF4E) - ((2 * ((v6 >> 28) + (v48 ^ 0x1508CF4E))) & 0xD0E711DE) - 395081489;
  HIDWORD(v6) = v88
              + v56
              - 828942010
              + (((v49 ^ v48 ^ 0xFD7B47A1) - 2 * ((v49 ^ v48 ^ 0xFD7B47A1) & 0x7C57EFD6 ^ (v49 ^ v48) & 4) - 61345838) ^ v57);
  LODWORD(v6) = HIDWORD(v6);
  int v59 = v49 ^ 0xE87388EF;
  int v60 = (v6 >> 21) + (v49 ^ 0xE87388EF) - ((2 * ((v6 >> 21) + (v49 ^ 0xE87388EF))) & 0x17D5A3BE) - 1947545121;
  uint64_t result = v90;
  HIDWORD(v6) = v91
              + (v57 ^ 0xFC57EFD2)
              - 1192926767
              + (((v49 ^ 0x63995930 ^ v60) - ((2 * (v49 ^ 0x63995930 ^ v60)) & 0x2A119E9C) + 352898894) ^ v48);
  LODWORD(v6) = HIDWORD(v6);
  LODWORD(v48) = (v6 >> 16) + (v60 ^ 0x8BEAD1DF) - ((2 * ((v6 >> 16) + (v60 ^ 0x8BEAD1DF))) & 0x5E7A18FC) - 1354953602;
  HIDWORD(v6) = v94
              + v58
              - 394375599
              + (((v60 ^ 0x24D7DDA1 ^ v48) - ((2 * (v60 ^ 0x24D7DDA1 ^ v48)) & 0xD0E711DE) - 395081489) ^ v49);
  LODWORD(v6) = HIDWORD(v6);
  int v62 = v48 ^ 0xAF3D0C7E;
  LODWORD(v49) = (v6 >> 9) + (v48 ^ 0xAF3D0C7E) - ((2 * ((v6 >> 9) + (v48 ^ 0xAF3D0C7E))) & 0x36CBBEF8) - 1687822468;
  HIDWORD(v6) = v97
              + v59
              - 1110769275
              + (((v48 ^ 0x3458D302 ^ v49) - ((2 * (v48 ^ 0x3458D302 ^ v49)) & 0x17D5A3BE) - 1947545121) ^ v60);
  LODWORD(v6) = HIDWORD(v6);
  int v63 = v49 ^ 0x9B65DF7C;
  int v64 = (v6 >> 28) + (v49 ^ 0x9B65DF7C) - ((2 * ((v6 >> 28) + (v49 ^ 0x9B65DF7C))) & 0x1BD3EE9A) + 233437005;
  HIDWORD(v6) = v100
              + (v60 ^ 0x8BEAD1DF)
              - 892220623
              + (((v49 ^ 0x968C2831 ^ v64) - ((2 * (v49 ^ 0x968C2831 ^ v64)) & 0x5E7A18FC) - 1354953602) ^ v48);
  LODWORD(v6) = HIDWORD(v6);
  LODWORD(v2) = v64 ^ 0xDE9F74D;
  LODWORD(v48) = (v6 >> 21) + (v64 ^ 0xDE9F74D) - ((2 * ((v6 >> 21) + (v64 ^ 0xDE9F74D))) & 0xEF3CB6E4) - 140616846;
  HIDWORD(v6) = v103
              + v62
              + 60337732
              + (((v64 ^ 0xFA77AC3F ^ v48) - ((2 * (v64 ^ 0xFA77AC3F ^ v48)) & 0x36CBBEF8) - 1687822468) ^ v49);
  LODWORD(v6) = HIDWORD(v6);
  int v65 = v48 ^ 0xF79E5B72;
  LODWORD(v49) = (v6 >> 16) + (v48 ^ 0xF79E5B72) - ((2 * ((v6 >> 16) + (v48 ^ 0xF79E5B72))) & 0x6E6D611E) + 926331023;
  HIDWORD(v6) = v90
              + v63
              - 1465743439
              + (((v48 ^ 0xC0A8EBFD ^ v49) - ((2 * (v48 ^ 0xC0A8EBFD ^ v49)) & 0x1BD3EE9A) + 233437005) ^ v64);
  LODWORD(v6) = HIDWORD(v6);
  int v66 = (v6 >> 9) + (v49 ^ 0x3736B08F) - ((2 * ((v6 >> 9) + (v49 ^ 0x3736B08F))) & 0xADF45AD2) - 688247447;
  unsigned int v67 = v66 ^ 0xD6FA2D69;
  HIDWORD(v6) = v88
              + v2
              - 669035632
              + (((v67 | v48 ^ 0x861A48D) - ((2 * (v67 | v48 ^ 0x861A48D)) & 0x6E6D611E) + 926331023) ^ v49);
  LODWORD(v6) = HIDWORD(v6);
  LODWORD(v48) = (v6 >> 26) + v67 - ((2 * ((v6 >> 26) + v67)) & 0xC03EA4BA) - 534818211;
  int v68 = v48 ^ 0xE01F525D;
  HIDWORD(v6) = v95
              + v65
              + 656486627
              + (((v48 ^ 0xE01F525D | v49 ^ 0xC8C94F70)
                - ((2 * (v48 ^ 0xE01F525D | v49 ^ 0xC8C94F70)) & 0xADF45AD2)
                - 688247447) ^ v66);
  LODWORD(v6) = HIDWORD(v6);
  int v69 = (v6 >> 22) + (v48 ^ 0xE01F525D) - ((2 * ((v6 >> 22) + (v48 ^ 0xE01F525D))) & 0xABADDBCA) - 707334683;
  int v70 = v66 ^ 0x2905D296;
  unsigned int v71 = v69 ^ 0xD5D6EDE5;
  HIDWORD(v6) = v102
              + (v49 ^ 0x3736B08F)
              - 1886759693
              + (((v71 | v70) - ((2 * (v71 | v70)) & 0xC03EA4BA) - 534818211) ^ v48);
  LODWORD(v6) = HIDWORD(v6);
  LODWORD(v2) = (v6 >> 17) + v71 - ((2 * ((v6 >> 17) + v71)) & 0x11BE3C38) - 1998643684;
  unsigned int v72 = v2 ^ 0x88DF1E1C;
  HIDWORD(v6) = v93
              + v67
              - 527838843
              + (((v72 | v48 ^ 0x1FE0ADA2) - ((2 * (v72 | v48 ^ 0x1FE0ADA2)) & 0xABADDBCA) - 707334683) ^ v69);
  LODWORD(v6) = HIDWORD(v6);
  LODWORD(v48) = (v6 >> 11) + v72 - ((2 * ((v6 >> 11) + v72)) & 0x44DBDFF4) - 1569853446;
  int v73 = v48 ^ 0xA26DEFFA;
  HIDWORD(v6) = v100
              + v68
              + 1230080783
              + (((v73 | v69 ^ 0x2A29121A) - ((2 * (v73 | v69 ^ 0x2A29121A)) & 0x11BE3C38) - 1998643684) ^ v2);
  LODWORD(v6) = HIDWORD(v6);
  int v74 = (v6 >> 26) + v73 - ((2 * ((v6 >> 26) + v73)) & 0x5401D12C) + 704702614;
  int v75 = v74 ^ 0x2A00E896;
  HIDWORD(v6) = v91
              + v71
              + 1929575902
              + (((v74 ^ 0x2A00E896 | v2 ^ 0x7720E1E3)
                - ((2 * (v74 ^ 0x2A00E896 | v2 ^ 0x7720E1E3)) & 0x44DBDFF4)
                - 1569853446) ^ v48);
  LODWORD(v6) = HIDWORD(v6);
  LODWORD(v2) = (v6 >> 22) + (v74 ^ 0x2A00E896) - ((2 * ((v6 >> 22) + (v74 ^ 0x2A00E896))) & 0xF18D8282) - 121192127;
  unsigned int v76 = v2 ^ 0xF8C6C141;
  HIDWORD(v6) = v98
              + v72
              - 471456311
              + (((v76 | v48 ^ 0x5D921005) - ((2 * (v76 | v48 ^ 0x5D921005)) & 0x5401D12C) + 704702614) ^ v74);
  LODWORD(v6) = HIDWORD(v6);
  LODWORD(v48) = (v6 >> 17) + v76 - ((2 * ((v6 >> 17) + v76)) & 0xFC8152EA) + 2118166901;
  int v77 = v48 ^ 0x7E40A975;
  HIDWORD(v6) = v89
              + v73
              + 1769639709
              + (((v77 | v74 ^ 0xD5FF1769) - ((2 * (v77 | v74 ^ 0xD5FF1769)) & 0xF18D8282) - 121192127) ^ v2);
  LODWORD(v6) = HIDWORD(v6);
  int v78 = (v6 >> 11) + v77 - ((2 * ((v6 >> 11) + v77)) & 0x9E22D254) - 820942550;
  unsigned int v79 = v78 ^ 0xCF11692A;
  HIDWORD(v6) = v96
              + v75
              + 1402908571
              + (((v78 ^ 0xCF11692A | v2 ^ 0x7393EBE)
                - ((2 * (v78 ^ 0xCF11692A | v2 ^ 0x7393EBE)) & 0xFC8152EA)
                + 2118166901) ^ v48);
  LODWORD(v6) = HIDWORD(v6);
  LODWORD(v2) = (v6 >> 26) + (v78 ^ 0xCF11692A) - ((2 * ((v6 >> 26) + (v78 ^ 0xCF11692A))) & 0x93040082) - 914227135;
  unsigned int v80 = v2 ^ 0xC9820041;
  HIDWORD(v6) = v103
              + v76
              - 501016532
              + (((v80 | v48 ^ 0x81BF568A) - ((2 * (v80 | v48 ^ 0x81BF568A)) & 0x9E22D254) - 820942550) ^ v78);
  LODWORD(v6) = HIDWORD(v6);
  LODWORD(v48) = (v6 >> 22) + v80 - ((2 * ((v6 >> 22) + v80)) & 0xC3EBC89A) - 503978931;
  int v81 = v48 ^ 0xE1F5E44D;
  HIDWORD(v6) = v94
              + v77
              - 2030603168
              + (((v48 ^ 0xE1F5E44D | v78 ^ 0x30EE96D5)
                - ((2 * (v48 ^ 0xE1F5E44D | v78 ^ 0x30EE96D5)) & 0x93040082)
                - 914227135) ^ v2);
  LODWORD(v6) = HIDWORD(v6);
  int v82 = (v6 >> 17) + (v48 ^ 0xE1F5E44D) - ((2 * ((v6 >> 17) + (v48 ^ 0xE1F5E44D))) & 0xA2A2988) - 2062215996;
  unsigned int v83 = v82 ^ 0x851514C4;
  HIDWORD(v6) = v101
              + v79
              + 838746861
              + (((v82 ^ 0x851514C4 | v2 ^ 0x367DFFBE)
                - ((2 * (v82 ^ 0x851514C4 | v2 ^ 0x367DFFBE)) & 0xC3EBC89A)
                - 503978931) ^ v48);
  LODWORD(v6) = HIDWORD(v6);
  int v84 = (v6 >> 11) + (v82 ^ 0x851514C4) - ((2 * ((v6 >> 11) + (v82 ^ 0x851514C4))) & 0xF970A20) + 130778384;
  int v85 = v84 ^ 0x7CB8510;
  HIDWORD(v6) = v92
              + (v2 ^ 0xC9820041)
              - 615927858
              + (((v85 | v48 ^ 0x1E0A1BB2) - ((2 * (v85 | v48 ^ 0x1E0A1BB2)) & 0xA2A2988) - 2062215996) ^ v82);
  LODWORD(v6) = HIDWORD(v6);
  LODWORD(v48) = (v6 >> 26) + v85 - ((2 * ((v6 >> 26) + v85)) & 0x5BCE192E) + 770116759;
  HIDWORD(v6) = v99
              + v81
              - 1590615167
              + (((v48 ^ 0x2DE70C97 | v82 ^ 0x7AEAEB3B)
                - ((2 * (v48 ^ 0x2DE70C97 | v82 ^ 0x7AEAEB3B)) & 0xF970A20)
                + 130778384) ^ v84);
  LODWORD(v6) = HIDWORD(v6);
  *(_DWORD *)(v87 - 0x978554B44A26C3ELL) += v48 ^ 0x2DE70C97;
  int v86 = ((2 * ((v6 >> 22) + (v48 ^ 0x2DE70C97))) & 0x96DDF7E4)
      + (((v6 >> 22) + (v48 ^ 0x2DE70C97)) ^ 0xCB6EFBF2)
      + 881918990;
  HIDWORD(v6) = result
              + v83
              + 248382471
              + (((v86 | v84 ^ 0xF8347AEF) - ((2 * (v86 | v84 ^ 0xF8347AEF)) & 0x5BCE192E) + 770116759) ^ v48);
  LODWORD(v6) = HIDWORD(v6);
  LODWORD(v2) = v86 + (v6 >> 17);
  HIDWORD(v6) = v51 + (v84 ^ 0x7CB8510) - 813890339 + ((v2 | v48 ^ 0xD218F368) ^ v86);
  LODWORD(v6) = HIDWORD(v6);
  *(_DWORD *)(v87 - 0x978554B44A26C3ALL) += v2 + (v6 >> 11);
  *(_DWORD *)(v87 - 0x978554B44A26C36) += v2;
  *(_DWORD *)(v87 - 0x978554B44A26C32) += v86;
  return result;
}

uint64_t sub_194740BC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return (*(uint64_t (**)(void))(v6 + 8 * ((4416 * ((v5 & 8) == ((2 * (a5 + 1103)) ^ 0x87E) - 7006)) ^ (a5 + 1103))))();
}

void fp_dh_b283879f01c126a15b0272cc8ed2e571(uint64_t a1)
{
  int v1 = 583213109 * (((a1 ^ 0x1D327568 | 0xB67152ED) - ((a1 ^ 0x1D327568) & 0xB67152ED)) ^ 0xBEE60996);
  if (*(void *)(a1 + 16)) {
    BOOL v2 = *(_DWORD *)(a1 + 8) - v1 == 440360255;
  }
  else {
    BOOL v2 = 1;
  }
  int v3 = v2;
  __asm { BRAA            X8, X17 }
}

uint64_t sub_194740CE4@<X0>(unint64_t a1@<X8>)
{
  int v5 = STACK[0x6CC];
  STACK[0x358] = a1;
  LODWORD(STACK[0x728]) = v3;
  LOWORD(STACK[0x72E]) = v2;
  LODWORD(STACK[0x730]) = v5;
  LODWORD(STACK[0x734]) = STACK[0x688];
  STACK[0x738] = STACK[0x388];
  STACK[0x2C8] = STACK[0x500];
  BOOL v7 = a1 != 0x347A9FB3B4EE85DBLL
    && (v5 ^ (v1 - 2040265761) & 0x799BFCFF ^ 0xDDB40273) < ((v1 - 2040265761) ^ 0x866405B2) - 2675;
  return (*(uint64_t (**)(void))(v4 + 8 * ((1999 * v7) ^ v1)))();
}

uint64_t sub_194740D94()
{
  if (v2 + 1428773504 < 0) {
    int v3 = v2;
  }
  else {
    int v3 = ((v1 - 4122) ^ 0x55AD4D30) - v2;
  }
  return (*(uint64_t (**)(void))(v0 + 8 * (((v3 - 718710145 >= 0) * (((v1 - 319) ^ 0x1316) + 3756)) ^ (v1 - 4122))))();
}

uint64_t sub_194740E28@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void))(v2 + 8 * (((5 * (v1 ^ 0x1F3D) - 6156) * (a1 == 0x1EFD996D031CDFCFLL)) ^ (v1 - 4909))))();
}

void fp_dh_dc25ec408e5ef06f9e9cf18864ab2c38(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 4) ^ (2076498917 * ((a1 - 2 * (a1 & 0x7BD26E68) + 2077388392) ^ 0xC2EC7E24));
  __asm { BRAA            X9, X17 }
}

uint64_t sub_194740F48()
{
  LODWORD(STACK[0x214]) = v2;
  *(_DWORD *)(v3 - 168) = v1
                        - 2734
                        + 583213109 * ((2 * ((v3 - 168) & 0x124EB998) - (v3 - 168) - 307149213) ^ 0xF8146870)
                        - 177516348;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(v0 + 8 * (v1 + 1776)))(v3 - 168);
  return (*(uint64_t (**)(uint64_t))(STACK[0x230]
                                            + 8
                                            * (((*(_DWORD *)(v3 - 164) == 520371442)
                                              * ((v1 - 881867012) & 0x349033FF ^ ((v1 - 5754) | 0x1702) ^ 0x1094)) ^ (v1 - 2734))))(v4);
}

void sub_1947410B8()
{
}

uint64_t sub_194741200(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  *(unsigned char *)(v14 - 176) = *v13;
  *(unsigned char *)(v14 - 175) = v13[1];
  *(unsigned char *)(v14 - 174) = v13[2];
  *(unsigned char *)(v14 - 173) = v13[3];
  *(unsigned char *)(v14 - 172) = v13[4];
  *(unsigned char *)(v14 - 171) = v13[5];
  *(unsigned char *)(v14 - 170) = v13[6];
  *(unsigned char *)(v14 - 169) = v13[7];
  *(unsigned char *)(v14 - 168) = v13[8];
  *(unsigned char *)(v14 - 167) = v13[9];
  *(unsigned char *)(v14 - 166) = v13[10];
  *(unsigned char *)(v14 - 165) = v13[11];
  *(unsigned char *)(v14 - 164) = v13[12];
  *(unsigned char *)(v14 - 163) = v13[13];
  *(unsigned char *)(v14 - 162) = v13[14];
  *(unsigned char *)(v14 - 161) = v13[15];
  if (v13) {
    BOOL v15 = v14 == 176;
  }
  else {
    BOOL v15 = 1;
  }
  int v17 = v15 || *(void *)(v12 + 8 * (v11 ^ 0x1938)) == 8;
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a7 + 8 * ((v17 * (((v11 ^ 0x179D) - 1656) ^ 0xF92)) ^ v11 ^ 0x2A2)))(((v11 ^ 0x179D) - 1656) ^ 0xF92u, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t sub_1947412E0()
{
  int v3 = (v0 - 1078) | 0x1028;
  unsigned int v10 = v0
      + 4918
      - ((-1500080887 - (&v8 | 0xA6969509) + (&v8 | 0x59696AF6)) ^ 0xA2963C39) * v2
      - 2232;
  uint64_t v9 = v6;
  (*(void (**)(uint64_t *))(v1 + 8 * ((v0 + 4918) ^ 0xAC7)))(&v8);
  unsigned int v10 = v3 - (&v8 ^ 0xFBFF56CF) * v2 - 372;
  uint64_t v9 = v7;
  (*(void (**)(uint64_t *))(v1 + 8 * (v3 + 3459)))(&v8);
  return (v5 ^ 0x6FBFFBF7) - 581788550 + ((v0 - 545262680) & (2 * v5)) - 1293064305;
}

uint64_t sub_19474131C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v6 = STACK[0x5C8];
  STACK[0x790] = *(void *)(a6 + 8 * (a2 - 584));
  return (*(uint64_t (**)(void))(a6
                              + 8
                              * (((((v6 == 0x347A9FB3B4EE85DBLL) ^ (a2 - 95)) & 1)
                                * ((a2 + 1441) ^ 0x93D)) ^ (a2 + 1441))))();
}

uint64_t sub_194741378()
{
  *(void *)(*v3 - 0x1466DB70120DAF72) = *v4;
  *(_DWORD *)(*v3 - 0x1466DB70120DAF7ALL) = *v1;
  return (v0 - 1293064305);
}

uint64_t sub_194741400@<X0>(int8x16_t *a1@<X0>, int a2@<W3>, uint64_t a3@<X8>, int8x16_t a4@<Q3>, int8x16_t a5@<Q4>)
{
  int8x16_t v9 = *(int8x16_t *)(v5 + v6 + (v7 ^ a2 ^ (v8 - 133)));
  *a1 = vaddq_s8(vaddq_s8(v9, a5), vmvnq_s8(vandq_s8(vaddq_s8(v9, v9), a4)));
  return (*(uint64_t (**)(void))(a3 + 8 * (v7 - 665)))();
}

uint64_t sub_19474145C(uint64_t a1)
{
  *(_DWORD *)a1 = 813541157;
  *(_DWORD *)(a1 + 4) = 940834111;
  *(_DWORD *)(a1 + 72) = 766466689;
  *(_DWORD *)(a1 + 76) = 766466689;
  *(_WORD *)(a1 + 80) = 6771;
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v2;
  *(void *)(a1 + 24) = v2;
  *(void *)(a1 + 32) = v2;
  *(void *)(a1 + 40) = v2;
  *(void *)(a1 + 48) = v2;
  *(void *)(a1 + 56) = v2;
  *(void *)(a1 + 64) = v2;
  unint64_t v3 = STACK[0x488];
  *(_DWORD *)(v3 - 0x14908D63AC0D7960) = 589826699;
  *(_DWORD *)(v3 - 0x14908D63AC0D794CLL) = 606102292;
  *(void *)(v3 - 0x14908D63AC0D795CLL) = v2;
  *(void *)(v3 - 0x14908D63AC0D7954) = v2;
  *(unsigned char *)(v3 - 0x14908D63AC0D7948) = 32;
  *uint64_t v1 = v3;
  return ((uint64_t (*)(void))STACK[0x318])();
}

uint64_t sub_194741534(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13)
{
  return (*(uint64_t (**)(void))(v13
                              + 8
                              * (((((a13 == 0) ^ v14 ^ 0x6A) & 1) * ((v14 ^ 0x835) - 5721)) ^ v14 ^ 0x835)))();
}

uint64_t sub_194741574(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = ((_BYTE)v4 - 123) & 0xF;
  *(unsigned char *)(v2 - 0x65498B88564D6810 + (v4 + 2162)) = (*(unsigned char *)(v3
                                                                                - 0x14908D63AC0D8879
                                                                                + (v4 + 2162))
                                                                     - 122) ^ *(unsigned char *)(v5 + v6) ^ *(unsigned char *)(a1 + v6) ^ *(unsigned char *)(v6 + a2 + 1) ^ (-119 * v6);
  return (*(uint64_t (**)(void))(STACK[0x338] + 8 * v4))();
}

uint64_t sub_194741610(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3
                                                              + 8
                                                              * ((5302
                                                                * (*(_DWORD *)(v5 + 48 * v2 + 36) + 360905804 < ((v4 - 201853746) & 0xFC992BDD) - 1888561805)) ^ v4)))(a1, a2, 1293022287);
}

uint64_t sub_19474167C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, unsigned int a14)
{
  a14 = v15
      - 1194633773 * (((&a13 | 0x2C0ECE85) - (&a13 & 0x2C0ECE85)) ^ 0xE5F79962)
      + 710016132;
  uint64_t v16 = (*(uint64_t (**)(int *))(v14 + 8 * (v15 ^ 0xBE8)))(&a13);
  return (*(uint64_t (**)(uint64_t))(v14
                                            + 8
                                            * (((4 * (a13 == (v15 ^ 0x4D128EEE))) | ((a13 == (v15 ^ 0x4D128EEE)) << 6)) ^ v15)))(v16);
}

uint64_t sub_194741714()
{
  return (*(uint64_t (**)(void))(v2
                              + 8
                              * (int)(((((v0 + 1970835319) ^ 0x7578A2A8) + ((v0 + 1970835319) & 0x8A875DFE) - 4752)
                                     * (v1 == 1600863559)) | v0)))();
}

uint64_t sub_194741768@<X0>(uint64_t a1@<X0>, int a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(v4 - 0x4C436BB3F0E9131);
  int v7 = ((*(unsigned __int8 *)(v6 + (v3 - 270176863)) ^ 0xDA) << a2) | ((*(unsigned __int8 *)(v6 + (v3 - 270176864)) ^ 0xDA) << 24) | ((*(unsigned __int8 *)(v6 + (v3 - 270176862)) ^ (a2 - 54)) << 8) | *(unsigned __int8 *)(v6 + (v3 - 270176861)) ^ 0xDA;
  return (*(uint64_t (**)(void))(a3
                              + 8
                              * ((49
                                * (((v7 - ((2 * v7) & 0x56ED857C) + 729203390) & 0xFFFFFF ^ 0x76C2BE)
                                 - (v5
                                  + *(_DWORD *)(a1 + 4)) != -1320881031)) ^ a2)))();
}

uint64_t sub_194741830(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  int v20 = (v18 - 816) | 0x41E;
  int v21 = 1779849041 * ((((2 * (v19 - 136)) | 0x75CD0256) - (v19 - 136) + 1159298773) ^ 0x8F3F9550);
  *(void *)(v19 - 128) = v14;
  *(_DWORD *)(v19 - 136) = ((v20 ^ 0xFE78DDE8) + v15) ^ v21;
  *(_DWORD *)(v19 - 120) = v18 - v21 - 1883;
  (*(void (**)(uint64_t))(v17 + 8 * (v18 + 4596)))(v19 - 136);
  *(void *)(v19 - 120) = v16;
  *(void *)(v19 - 136) = a14;
  *(_DWORD *)(v19 - 124) = v20 - 674475973 * ((v19 - 93646116 - 2 * ((v19 - 136) & 0xFA6B1364)) ^ 0x2FC598F) - 1697;
  uint64_t v22 = (*(uint64_t (**)(uint64_t))(v17 + 8 * (v20 ^ 0x1118)))(v19 - 136);
  return (*(uint64_t (**)(uint64_t))(v17
                                            + 8
                                            * (((*(_DWORD *)(v19 - 128) != ((123 * (v20 ^ 0xCAA)) ^ 0x16A6F4DC))
                                              * ((v20 ^ 0xCAA) + 103)) ^ v20)))(v22);
}

uint64_t sub_19474196C@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  *(uint64_t *)((char *)&a2 + v2 + v4 + 8) = (uint64_t)vadd_s8(vand_s8(vadd_s8(*(int8x8_t *)(a1 + v4), *(int8x8_t *)(a1 + v4)), (int8x8_t)0x9292929292929292), veor_s8(*(int8x8_t *)(a1 + v4), (int8x8_t)0x4949494949494949));
  return (*(uint64_t (**)(void))(v6
                              + 8
                              * ((248
                                * (v4 + ((117 * (v5 ^ 0x15AC) - 1043875326) & 0x3E3837FF) - 1909 != ((117 * (v5 ^ 0x15AC) - 5251) & v3))) ^ (117 * (v5 ^ 0x15AC)))))();
}

uint64_t sub_1947419F8()
{
  return v0();
}

uint64_t sub_194741A44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  LODWORD(STACK[0x2EC]) = a68;
  LODWORD(STACK[0x39C]) = a70;
  int v74 = 89 * (a66 ^ 0x64D);
  LODWORD(STACK[0x50C]) = a72;
  LODWORD(STACK[0x46C]) = v72;
  int v75 = v74 + 5993;
  LODWORD(STACK[0x2BC]) = v72;
  STACK[0x280] = *(void *)(v73 + 8 * v74);
  int v76 = ((v74 + 5993) ^ 0x1969) + 167;
  STACK[0x4F0] = (unint64_t)&STACK[0x520];
  unint64_t v77 = STACK[0x520];
  STACK[0x478] = STACK[0x520];
  return (*(uint64_t (**)(void))(v73
                              + 8
                              * (((((v75 ^ 0x1969 ^ (v77 == 0x65498B88564D595BLL)) & 1) == 0) * (v76 ^ 0x42)) ^ v75)))();
}

uint64_t sub_194741A78@<X0>(int a1@<W8>)
{
  if (a1 == 1293064305) {
    int v1 = 1293022287;
  }
  else {
    int v1 = a1;
  }
  return (v1 - 1293064305);
}

void fp_dh_57c9bda14368426f3f63f67ce072c113(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  int v1 = *(_DWORD *)(a1 + 8) ^ (544512889 * ((((2 * a1) | 0xB76A164) - a1 + 2051321678) ^ 0xA380B710));
  uint64_t v2 = (uint64_t)*(&fp_dh_8e436c87f1a29db6504b879c9bab0741 + v1 - 3952);
  (*(void (**)(unsigned char *, void, uint64_t))(v2 + 8 * (v1 + 3600)))(v3, 0, 128);
  v4[1] = v1
        - 1194633773
        * (((v4 | 0x5CF3BE0E) - v4 + (v4 & 0xA30C41F0)) ^ 0x950AE9E9)
        + 710017931;
  (*(void (**)(_DWORD *))(v2 + 8 * (v1 + 3551)))(v4);
  __asm { BRAA            X8, X17 }
}