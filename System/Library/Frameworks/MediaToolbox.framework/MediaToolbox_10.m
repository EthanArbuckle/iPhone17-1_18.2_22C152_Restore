uint64_t segPumpSetupNetworkHistory(uint64_t a1)
{
  CFAllocatorRef AllocatorForMedia;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v4;
  uint64_t v5;
  uint64_t v6;

  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable) {
    return 4294954655;
  }
  v4 = Mutable;
  FigCFDictionarySetInt64();
  FigCFDictionarySetValue();
  v5 = FigNetworkHistoryCreate();
  if (!v5) {
    v5 = segPumpSetNetworkHistory(a1, 0);
  }
  v6 = v5;
  CFRelease(v4);
  return v6;
}

uint64_t segPumpClearStatistics(uint64_t a1)
{
  for (uint64_t i = 0; i != 48; i += 16)
  {
    segPumpStreamClearStatistics(*(void *)(a1 + i + 384));
    segPumpStreamClearStatistics(*(void *)(a1 + i + 392));
  }
  *(_OWORD *)(a1 + 8560) = 0u;
  *(_OWORD *)(a1 + 8544) = 0u;
  *(_OWORD *)(a1 + 8528) = 0u;
  *(_OWORD *)(a1 + 8512) = 0u;
  *(_OWORD *)(a1 + 8496) = 0u;
  *(_OWORD *)(a1 + 8480) = 0u;
  *(_OWORD *)(a1 + 8632) = 0u;
  *(_OWORD *)(a1 + 8648) = 0u;
  uint64_t result = FigNetworkInterfaceResetStatistics(*(void *)(a1 + 9120));
  uint64_t v4 = *(void *)(a1 + 9048);
  if (v4)
  {
    uint64_t VTable = CMBaseObjectGetVTable();
    uint64_t v7 = *(void *)(VTable + 16);
    uint64_t result = VTable + 16;
    uint64_t v6 = v7;
    uint64_t v8 = v7 ? v6 : 0;
    v9 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 72);
    if (v9)
    {
      return v9(v4, 0x1EE582B98);
    }
  }
  return result;
}

uint64_t segPumpStreamInitStorage(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7)
{
  *(void *)a2 = a3;
  *(unsigned char *)(a2 + 866) = 1;
  *(unsigned char *)(a2 + 112) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a2 + 120) = _Q0;
  *(_DWORD *)(a2 + 72) = 1;
  *(void *)(a2 + 936) = -1;
  *(void *)(a2 + 680) = 0;
  *(void *)(a2 + 688) = a2 + 680;
  *(void *)(a2 + 336) = 0;
  *(void *)(a2 + 344) = a2 + 336;
  *(void *)(a2 + 752) = 1;
  *(void *)(a2 + 760) = a4;
  if (a4 >= 2)
  {
    if (a7) {
      BOOL v15 = 0;
    }
    else {
      BOOL v15 = *(unsigned char *)(a1 + 48) == 0;
    }
    *(unsigned char *)(a2 + 406) = v15;
  }
  uint64_t result = segPumpCreateMediaConnection(a2);
  if (!result)
  {
    *(void *)(a2 + 696) = *(void *)(a2 + 680);
    int64_t v17 = a5 <= 1 ? 1 : a5;
    uint64_t result = segPumpStreamSetReadAheadConnectionCountMax(a2, v17);
    if (!result)
    {
      if (a6 <= 1) {
        int v18 = 1;
      }
      else {
        int v18 = a6;
      }
      if (v18 >= a5) {
        int v18 = a5;
      }
      *(void *)(a2 + 784) = v18;
      *(void *)(a2 + 360) = -1;
      *(void *)(a2 + 368) = -1;
    }
  }
  return result;
}

__n128 segPumpMakeNetworkPredictionInput@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (!*(unsigned char *)(a1 + 9216))
  {
    *(unsigned char *)(a1 + 9216) = 1;
    long long v13 = *(_OWORD *)(a1 + 9152);
    long long v14 = *(_OWORD *)(a1 + 9184);
    *(_OWORD *)(a1 + 9336) = *(_OWORD *)(a1 + 9168);
    *(_OWORD *)(a1 + 9352) = v14;
    *(_OWORD *)(a1 + 9368) = *(_OWORD *)(a1 + 9200);
    *(_OWORD *)(a1 + 9304) = *(_OWORD *)(a1 + 9136);
    *(_OWORD *)(a1 + 9320) = v13;
    *(void *)(a1 + 9288) = (int)FigRCLGetNumberWithDefault(*(const __CFDictionary **)(a1 + 9128), @"minActiveNetworkTimeForNetworkHistory");
    *(_OWORD *)(a1 + 9264) = xmmword_194998970;
    *(void *)(a1 + 9392) = 1;
    if (FigRCLGetNumberWithDefault(*(const __CFDictionary **)(a1 + 9128), @"allowMLPredictions"))
    {
      *(void *)(a1 + 9392) |= 2uLL;
      uint64_t v15 = *(void *)(a1 + 96);
      uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v17 = v16 ? v16 : 0;
      int v18 = *(void (**)(uint64_t, uint64_t, void))(v17 + 56);
      if (v18) {
        v18(v15, 0x1EE581CF8, *MEMORY[0x1E4F1CFD0]);
      }
    }
  }
  uint64_t v4 = *(void *)(a1 + 9280);
  if (!v4) {
    uint64_t v4 = 0x40000;
  }
  *(void *)(a1 + 9280) = v4;
  long long v5 = *(_OWORD *)(a1 + 9400);
  *(_OWORD *)(a2 + 160) = *(_OWORD *)(a1 + 9384);
  *(_OWORD *)(a2 + 176) = v5;
  long long v6 = *(_OWORD *)(a1 + 9432);
  *(_OWORD *)(a2 + 192) = *(_OWORD *)(a1 + 9416);
  *(_OWORD *)(a2 + 208) = v6;
  long long v7 = *(_OWORD *)(a1 + 9336);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 9320);
  *(_OWORD *)(a2 + 112) = v7;
  long long v8 = *(_OWORD *)(a1 + 9368);
  *(_OWORD *)(a2 + 128) = *(_OWORD *)(a1 + 9352);
  *(_OWORD *)(a2 + 144) = v8;
  long long v9 = *(_OWORD *)(a1 + 9304);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 9288);
  *(_OWORD *)(a2 + 80) = v9;
  long long v10 = *(_OWORD *)(a1 + 9240);
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 9224);
  *(_OWORD *)(a2 + 16) = v10;
  __n128 result = *(__n128 *)(a1 + 9256);
  long long v12 = *(_OWORD *)(a1 + 9272);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v12;
  return result;
}

BOOL segPumpStallRiskCallback(uint64_t a1, uint64_t a2, CMTime *a3, CMTime *a4, int a5, double a6)
{
  CFTypeRef v27 = 0;
  unint64_t v25 = 0;
  uint64_t v26 = 0;
  *(void *)v24 = 0;
  int v11 = segPumpLockAndCopyPumpFromRetainProxy(a1, &v27, &v26);
  BOOL v12 = 0;
  if (a2 && !v11)
  {
    FigAlternateGetRenditionInfoForMediaType(a2, 1936684398, *(const void **)(v26 + 8392), *(const void **)(v26 + 8400), *(const void **)(v26 + 8408), 0, 0, v24, 0);
    FigAlternateGetRenditionInfoForMediaType(a2, 1986618469, *(const void **)(v26 + 8392), *(const void **)(v26 + 8400), *(const void **)(v26 + 8408), 0, 0, &v25, 0);
    uint64_t v13 = v26;
    unint64_t v14 = *(void *)(*(void *)(v26 + 384) + 8);
    if (v25 | v14)
    {
      BOOL v15 = FigCFHTTPCompareURLs((const void *)v25, (CFTypeRef)v14) == 0;
      uint64_t v13 = v26;
    }
    else
    {
      BOOL v15 = 0;
    }
    unint64_t v16 = *(void *)(*(void *)(v13 + 400) + 8);
    if (*(void *)v24 | v16)
    {
      BOOL v17 = FigCFHTTPCompareURLs(*(const void **)v24, (CFTypeRef)v16) != 0;
      uint64_t v13 = v26;
    }
    else
    {
      BOOL v17 = 1;
    }
    BOOL v18 = 0;
    if (*(unsigned char *)(v13 + 8009) && v15 && v17)
    {
      uint64_t v19 = *(void *)(v13 + 400);
      if (*(void *)(v19 + 16)) {
        BOOL v18 = *(unsigned __int8 *)(v19 + 869) == 0;
      }
      else {
        BOOL v18 = 0;
      }
    }
    if (*(unsigned char *)(*(void *)(v13 + 16 * *(void *)(v13 + 8416) + 384) + 1169))
    {
      FigSignalErrorAt();
      BOOL v12 = 0;
    }
    else
    {
      int PeakBitRate = FigAlternateGetPeakBitRate(a2);
      CMTime v23 = *a3;
      CMTime v22 = *a4;
      BOOL v12 = segPumpRejectSwitchDueToStallRisk(v13, a2, PeakBitRate, &v23, &v22, v18, a5, a6);
    }
  }
  segPumpUnlockAndSendAllPendingNotifications();
  if (v27) {
    CFRelease(v27);
  }
  return v12;
}

void segPumpAttemptNetworkMonitorSetupDispatch(const void *a1)
{
  v3 = 0;
  CFTypeRef cf = 0;
  if (!segPumpLockAndCopyPumpFromRetainProxy((uint64_t)a1, &cf, (uint64_t *)&v3))
  {
    v2 = (const void *)v3[1054];
    if (!v2) {
      v2 = (const void *)v3[39];
    }
    AttemptNetworkMonitorSetup(v3, v2);
  }
  segPumpUnlockAndSendAllPendingNotifications();
  if (cf) {
    CFRelease(cf);
  }
  if (a1) {
    CFRelease(a1);
  }
}

uint64_t segPumpInvalidate()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigRetainProxyRetain();
  FigRetainProxyLockMutex();
  int v1 = *(_DWORD *)(DerivedStorage + 8960);
  *(_DWORD *)(DerivedStorage + 8960) = 0;
  v2 = *(const void **)(DerivedStorage + 8968);
  *(void *)(DerivedStorage + 8968) = 0;
  FigRetainProxyUnlockMutex();
  if ((v1 & 0x20) != 0)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
  }
  v3 = (unsigned char *)(DerivedStorage + 7752);
  if (v2) {
    CFRelease(v2);
  }
  FigRetainProxyLockMutex();
  FigRetainProxyInvalidate();
  uint64_t v4 = *(NSObject **)(DerivedStorage + 7744);
  if (v4)
  {
    if (*v3)
    {
      unsigned char *v3 = 0;
      while (dispatch_group_wait(v4, 0))
      {
        dispatch_group_leave(*(dispatch_group_t *)(DerivedStorage + 7744));
        uint64_t v4 = *(NSObject **)(DerivedStorage + 7744);
      }
    }
    long long v5 = *(NSObject **)(DerivedStorage + 7744);
    if (v5)
    {
      dispatch_release(v5);
      *(void *)(DerivedStorage + 7744) = 0;
    }
  }
  FigHTTPStopAndReleaseTimer((dispatch_object_t *)(DerivedStorage + 7936));
  FigHTTPStopAndReleaseTimer((dispatch_object_t *)(DerivedStorage + 8168));
  FigHTTPStopAndReleaseTimer((dispatch_object_t *)(DerivedStorage + 8616));
  while (1)
  {
    long long v6 = *(CFTypeRef **)(DerivedStorage + 352);
    if (!v6) {
      break;
    }
    segPumpFreeSavedEntry(DerivedStorage, v6);
  }
  long long v7 = *(const void **)(DerivedStorage + 7688);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(DerivedStorage + 7688) = 0;
  }
  uint64_t v8 = 0;
  char v9 = 1;
  do
  {
    char v10 = v9;
    int v11 = (uint64_t *)(DerivedStorage + 16 * v8 + 384);
    for (uint64_t i = 1; i != 4; ++i)
    {
      uint64_t v13 = *v11;
      if (*v11)
      {
        *(unsigned char *)(v13 + 859) = 0;
        *(unsigned char *)(v13 + 400) = 0;
        FigHTTPStopAndReleaseTimer((dispatch_object_t *)(v13 + 392));
        FigHTTPStopAndReleaseTimer((dispatch_object_t *)(v13 + 640));
        segPumpResetConnection(DerivedStorage, v13 + 544);
        segPumpResetConnection(DerivedStorage, DerivedStorage + 7760);
        segPumpCancelMediaFileReadAndResetData(DerivedStorage, v13, 0, 0);
        segPumpResetConnection(DerivedStorage, v13 + 408);
        *(unsigned char *)(v13 + 859) = 0;
        segPumpStreamUpdateIndexExpectedArrival(DerivedStorage, v13);
        unint64_t v14 = *(const void **)(v13 + 840);
        if (v14)
        {
          CFRelease(v14);
          *(void *)(v13 + 840) = 0;
        }
        BOOL v15 = *(const void **)(v13 + 832);
        if (v15)
        {
          CFRelease(v15);
          *(void *)(v13 + 832) = 0;
        }
        unint64_t v16 = *(const void **)(v13 + 296);
        if (v16)
        {
          CFRelease(v16);
          *(void *)(v13 + 296) = 0;
        }
        BOOL v17 = *(const void **)(v13 + 1144);
        if (v17)
        {
          CFRelease(v17);
          *(void *)(v13 + 1144) = 0;
        }
        BOOL v18 = *(const void **)(v13 + 248);
        if (v18)
        {
          CFRelease(v18);
          *(void *)(v13 + 248) = 0;
        }
        uint64_t v19 = *(const void **)(v13 + 256);
        if (v19)
        {
          CFRelease(v19);
          *(void *)(v13 + 256) = 0;
        }
        v20 = *(const void **)(v13 + 264);
        if (v20)
        {
          CFRelease(v20);
          *(void *)(v13 + 264) = 0;
        }
        v21 = *(const void **)(v13 + 288);
        if (v21)
        {
          CFRelease(v21);
          *(void *)(v13 + 288) = 0;
        }
        for (j = *(void **)(v13 + 680); j; j = (void *)*j)
          segPumpResetMediaConnection(DerivedStorage, j, 0);
        segPumpCompleteNWAlternateForStream(v13);
        if (*(void *)(v13 + 1176))
        {
          nw_activity_complete_with_reason();
          CMTime v23 = *(const void **)(v13 + 1176);
          if (v23)
          {
            CFRelease(v23);
            *(void *)(v13 + 1176) = 0;
          }
        }
        uint64_t v24 = *(void *)(v13 + 56);
        if (v24)
        {
          if (FigMediaPlaylistGetXPCClientObject(v24))
          {
            FigMediaPlaylistGetXPCClientObject(*(void *)(v13 + 56));
            FigStopForwardingMediaServicesProcessDeathNotification();
          }
          unint64_t v25 = *(const void **)(v13 + 56);
          if (v25)
          {
            CFRelease(v25);
            *(void *)(v13 + 56) = 0;
          }
        }
        uint64_t v26 = *(const void **)(v13 + 48);
        if (v26)
        {
          CFRelease(v26);
          *(void *)(v13 + 48) = 0;
        }
        CFTypeRef v27 = *(const void **)(v13 + 1152);
        if (v27)
        {
          CFRelease(v27);
          *(void *)(v13 + 1152) = 0;
        }
      }
      int v11 = (uint64_t *)(DerivedStorage + 16 * v8 + 8 * i + 384);
    }
    char v9 = 0;
    uint64_t v8 = 1;
  }
  while ((v10 & 1) != 0);
  if (*(void *)(DerivedStorage + 9496))
  {
    nw_activity_complete_with_reason();
    v28 = *(const void **)(DerivedStorage + 9496);
    if (v28)
    {
      CFRelease(v28);
      *(void *)(DerivedStorage + 9496) = 0;
    }
  }
  v29 = *(const void **)(DerivedStorage + 9104);
  if (v29)
  {
    CFRelease(v29);
    *(void *)(DerivedStorage + 9104) = 0;
  }
  if (*(void *)(DerivedStorage + 296))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    FigStreamingCacheInvalidate(*(void *)(DerivedStorage + 296));
    v30 = *(const void **)(DerivedStorage + 296);
    if (v30)
    {
      CFRelease(v30);
      *(void *)(DerivedStorage + 296) = 0;
    }
  }
  v31 = *(const void **)(DerivedStorage + 304);
  if (v31)
  {
    CFRelease(v31);
    *(void *)(DerivedStorage + 304) = 0;
  }
  v32 = *(OpaqueCMMemoryPool **)(DerivedStorage + 7920);
  if (v32)
  {
    CMMemoryPoolInvalidate(v32);
    v33 = *(const void **)(DerivedStorage + 7920);
    if (v33)
    {
      CFRelease(v33);
      *(void *)(DerivedStorage + 7920) = 0;
    }
  }
  v34 = *(const void **)(DerivedStorage + 9560);
  if (v34)
  {
    CFRelease(v34);
    *(void *)(DerivedStorage + 9560) = 0;
  }
  v35 = *(const void **)(DerivedStorage + 9576);
  if (v35)
  {
    CFRelease(v35);
    *(void *)(DerivedStorage + 9576) = 0;
  }
  FigRetainProxyUnlockMutex();
  FigRetainProxyRelease();
  return 0;
}

void segPumpFinalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  segPumpInvalidate();
  int v1 = *(const void **)(DerivedStorage + 8432);
  if (v1) {
    CFRelease(v1);
  }
  v2 = *(const void **)(DerivedStorage + 8440);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(DerivedStorage + 8440) = 0;
  }
  v3 = *(const void **)(DerivedStorage + 8448);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(DerivedStorage + 8448) = 0;
  }
  uint64_t v4 = *(const void **)(DerivedStorage + 8472);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(DerivedStorage + 8472) = 0;
  }
  for (uint64_t i = 0; i != 3; ++i)
  {
    long long v6 = *(void **)(DerivedStorage + 16 * i + 384);
    if (v6)
    {
      long long v7 = *(const void **)(DerivedStorage + 40 * *v6 + 8288);
      if (v7)
      {
        CFRelease(v7);
        *(void *)(DerivedStorage + 40 * *v6 + 8288) = 0;
      }
      segPumpStreamDisposeStorage(v6);
      uint64_t v8 = (void *)v6[96];
      if (v8)
      {
        v6[96] = 0;
        free(v8);
      }
      while (1)
      {
        char v9 = (dispatch_object_t *)v6[85];
        if (!v9) {
          break;
        }
        segPumpDestroyMediaConnection(DerivedStorage, v6, v9);
      }
    }
  }
  for (uint64_t j = 0; j != 3; ++j)
  {
    uint64_t v11 = DerivedStorage + 16 * j;
    BOOL v12 = *(void **)(v11 + 392);
    if (v12)
    {
      segPumpStreamDisposeStorage(*(void **)(v11 + 392));
      uint64_t v13 = (void *)v12[96];
      if (v13)
      {
        v12[96] = 0;
        free(v13);
      }
      while (1)
      {
        unint64_t v14 = (dispatch_object_t *)v12[85];
        if (!v14) {
          break;
        }
        segPumpDestroyMediaConnection(DerivedStorage, v12, v14);
      }
    }
  }
  AlternateQueueFree(DerivedStorage + 8096);
  AlternateQueueFree(DerivedStorage + 8112);
  BOOL v15 = *(const void **)(DerivedStorage + 7896);
  if (v15)
  {
    CFRelease(v15);
    *(void *)(DerivedStorage + 7896) = 0;
  }
  unint64_t v16 = *(const void **)(DerivedStorage + 8128);
  if (v16) {
    CFRelease(v16);
  }
  BOOL v17 = *(const void **)(DerivedStorage + 8136);
  if (v17) {
    CFRelease(v17);
  }
  BOOL v18 = *(const void **)(DerivedStorage + 8152);
  if (v18) {
    CFRelease(v18);
  }
  uint64_t v19 = *(const void **)(DerivedStorage + 8160);
  if (v19) {
    CFRelease(v19);
  }
  v20 = *(const void **)(DerivedStorage + 9544);
  if (v20) {
    CFRelease(v20);
  }
  v21 = *(const void **)(DerivedStorage + 9552);
  if (v21) {
    CFRelease(v21);
  }
  segPumpUpdateCurrentAlternate(DerivedStorage, 0);
  CMTime v22 = *(const void **)(DerivedStorage + 9512);
  if (v22) {
    CFRelease(v22);
  }
  CMTime v23 = *(const void **)(DerivedStorage + 8376);
  if (v23) {
    CFRelease(v23);
  }
  uint64_t v24 = *(const void **)(DerivedStorage + 8248);
  if (v24)
  {
    CFRelease(v24);
    *(void *)(DerivedStorage + 8248) = 0;
  }
  unint64_t v25 = *(const void **)(DerivedStorage + 80);
  if (v25) {
    CFRelease(v25);
  }
  uint64_t v26 = *(NSObject **)(DerivedStorage + 152);
  if (v26) {
    dispatch_release(v26);
  }
  CFTypeRef v27 = *(const void **)(DerivedStorage + 88);
  if (v27) {
    CFRelease(v27);
  }
  v28 = *(const void **)(DerivedStorage + 216);
  if (v28) {
    CFRelease(v28);
  }
  v29 = *(const void **)(DerivedStorage + 224);
  if (v29) {
    CFRelease(v29);
  }
  v30 = *(const void **)(DerivedStorage + 232);
  if (v30) {
    CFRelease(v30);
  }
  v31 = *(const void **)(DerivedStorage + 192);
  if (v31)
  {
    CFRelease(v31);
    *(void *)(DerivedStorage + 192) = 0;
  }
  v32 = *(const void **)(DerivedStorage + 200);
  if (v32)
  {
    CFRelease(v32);
    *(void *)(DerivedStorage + 200) = 0;
  }
  v33 = *(const void **)(DerivedStorage + 208);
  if (v33)
  {
    CFRelease(v33);
    *(void *)(DerivedStorage + 208) = 0;
  }
  v34 = *(const void **)(DerivedStorage + 248);
  if (v34) {
    CFRelease(v34);
  }
  v35 = *(const void **)(DerivedStorage + 264);
  if (v35) {
    CFRelease(v35);
  }
  v36 = *(const void **)(DerivedStorage + 272);
  if (v36) {
    CFRelease(v36);
  }
  v37 = *(const void **)(DerivedStorage + 280);
  if (v37) {
    CFRelease(v37);
  }
  v38 = *(const void **)(DerivedStorage + 8672);
  if (v38) {
    CFRelease(v38);
  }
  v39 = *(const void **)(DerivedStorage + 8968);
  if (v39) {
    CFRelease(v39);
  }
  v40 = *(const void **)(DerivedStorage + 8976);
  if (v40) {
    CFRelease(v40);
  }
  v41 = *(const void **)(DerivedStorage + 9000);
  if (v41) {
    CFRelease(v41);
  }
  v42 = *(const void **)(DerivedStorage + 8992);
  if (v42) {
    CFRelease(v42);
  }
  v43 = *(const void **)(DerivedStorage + 8984);
  if (v43) {
    CFRelease(v43);
  }
  v44 = *(const void **)(DerivedStorage + 312);
  if (v44) {
    CFRelease(v44);
  }
  FigHTTPSchedulerRelease(*(dispatch_object_t *)(DerivedStorage + 64));
  *(void *)(DerivedStorage + 64) = 0;
  v45 = *(const void **)(DerivedStorage + 8880);
  if (v45) {
    CFRelease(v45);
  }
  v46 = *(const void **)(DerivedStorage + 8888);
  if (v46) {
    CFRelease(v46);
  }
  v47 = *(const void **)(DerivedStorage + 8896);
  if (v47) {
    CFRelease(v47);
  }
  v48 = *(const void **)(DerivedStorage + 240);
  if (v48) {
    CFRelease(v48);
  }
  v49 = *(const void **)(DerivedStorage + 8384);
  if (v49) {
    CFRelease(v49);
  }
  v50 = *(const void **)(DerivedStorage + 8392);
  if (v50) {
    CFRelease(v50);
  }
  v51 = *(const void **)(DerivedStorage + 8400);
  if (v51) {
    CFRelease(v51);
  }
  v52 = *(const void **)(DerivedStorage + 8408);
  if (v52) {
    CFRelease(v52);
  }
  v53 = *(const void **)(DerivedStorage + 8424);
  if (v53) {
    CFRelease(v53);
  }
  v54 = *(const void **)(DerivedStorage + 8224);
  if (v54) {
    CFRelease(v54);
  }
  v55 = *(const void **)(DerivedStorage + 8232);
  if (v55) {
    CFRelease(v55);
  }
  v56 = *(const void **)(DerivedStorage + 7776);
  if (v56) {
    CFRelease(v56);
  }
  v57 = *(const void **)(DerivedStorage + 7768);
  if (v57) {
    CFRelease(v57);
  }
  v58 = *(const void **)(DerivedStorage + 7912);
  if (v58) {
    CFRelease(v58);
  }
  v59 = *(const void **)(DerivedStorage + 7712);
  if (v59)
  {
    CFRelease(v59);
    *(void *)(DerivedStorage + 7712) = 0;
  }
  v60 = *(const void **)(DerivedStorage + 7696);
  if (v60)
  {
    CFRelease(v60);
    *(void *)(DerivedStorage + 7696) = 0;
  }
  v61 = *(const void **)(DerivedStorage + 7720);
  if (v61)
  {
    CFRelease(v61);
    *(void *)(DerivedStorage + 7720) = 0;
  }
  v62 = *(const void **)(DerivedStorage + 7736);
  if (v62)
  {
    CFRelease(v62);
    *(void *)(DerivedStorage + 7736) = 0;
  }
  v63 = *(const void **)(DerivedStorage + 7728);
  if (v63)
  {
    CFRelease(v63);
    *(void *)(DerivedStorage + 7728) = 0;
  }
  v64 = *(const void **)(DerivedStorage + 7704);
  if (v64)
  {
    CFRelease(v64);
    *(void *)(DerivedStorage + 7704) = 0;
  }
  v65 = *(const void **)(DerivedStorage + 256);
  if (v65)
  {
    CFRelease(v65);
    *(void *)(DerivedStorage + 256) = 0;
  }
  v66 = *(const void **)(DerivedStorage + 8760);
  if (v66)
  {
    CFRelease(v66);
    *(void *)(DerivedStorage + 8760) = 0;
  }
  v67 = *(const void **)(DerivedStorage + 9128);
  if (v67) {
    CFRelease(v67);
  }
  if (*(void *)(DerivedStorage + 8808))
  {
    FigGzipDispose();
    *(void *)(DerivedStorage + 8808) = 0;
  }
  v68 = *(NSObject **)(DerivedStorage + 72);
  if (v68)
  {
    dispatch_release(v68);
    *(void *)(DerivedStorage + 72) = 0;
  }
  FigNetworkInterfaceReporterDestroy(*(void **)(DerivedStorage + 9120));
  v69 = *(const void **)(DerivedStorage + 32);
  if (v69) {
    CFRelease(v69);
  }
  v70 = *(const void **)(DerivedStorage + 40);
  if (v70) {
    CFRelease(v70);
  }
  v71 = *(const void **)(DerivedStorage + 9040);
  if (v71) {
    CFRelease(v71);
  }
  v72 = *(const void **)(DerivedStorage + 9088);
  if (v72) {
    CFRelease(v72);
  }
  v73 = *(const void **)(DerivedStorage + 9048);
  if (v73) {
    CFRelease(v73);
  }
  FigRetainProxyRelease();
  *(void *)(DerivedStorage + 176) = 0;
  FigRetainProxyRelease();
  *(void *)uint64_t DerivedStorage = 0;
  v74 = *(const void **)(DerivedStorage + 9448);
  if (v74)
  {
    CFRelease(v74);
    *(void *)(DerivedStorage + 9448) = 0;
  }
  v75 = *(const void **)(DerivedStorage + 9456);
  if (v75)
  {
    CFRelease(v75);
    *(void *)(DerivedStorage + 9456) = 0;
  }
  v76 = *(const void **)(DerivedStorage + 9464);
  if (v76)
  {
    CFRelease(v76);
    *(void *)(DerivedStorage + 9464) = 0;
  }
  v77 = *(const void **)(DerivedStorage + 9472);
  if (v77)
  {
    CFRelease(v77);
    *(void *)(DerivedStorage + 9472) = 0;
  }
  v78 = *(const void **)(DerivedStorage + 9488);
  if (v78)
  {
    CFRelease(v78);
    *(void *)(DerivedStorage + 9488) = 0;
  }
  v79 = *(const void **)(DerivedStorage + 96);
  if (v79)
  {
    CFRelease(v79);
    *(void *)(DerivedStorage + 96) = 0;
  }
  v80 = *(const void **)(DerivedStorage + 8016);
  if (v80)
  {
    CFRelease(v80);
    *(void *)(DerivedStorage + 8016) = 0;
  }
  v81 = *(const void **)(DerivedStorage + 9568);
  if (v81)
  {
    CFRelease(v81);
    *(void *)(DerivedStorage + 9568) = 0;
  }
  v82 = *(const void **)(DerivedStorage + 9136);
  if (v82)
  {
    CFRelease(v82);
    *(void *)(DerivedStorage + 9136) = 0;
  }
  v83 = *(const void **)(DerivedStorage + 9144);
  if (v83)
  {
    CFRelease(v83);
    *(void *)(DerivedStorage + 9144) = 0;
  }
  v84 = *(const void **)(DerivedStorage + 9152);
  if (v84)
  {
    CFRelease(v84);
    *(void *)(DerivedStorage + 9152) = 0;
  }
  v85 = *(const void **)(DerivedStorage + 9176);
  if (v85)
  {
    CFRelease(v85);
    *(void *)(DerivedStorage + 9176) = 0;
  }
  v86 = *(const void **)(DerivedStorage + 9184);
  if (v86)
  {
    CFRelease(v86);
    *(void *)(DerivedStorage + 9184) = 0;
  }
  v87 = *(const void **)(DerivedStorage + 9200);
  if (v87)
  {
    CFRelease(v87);
    *(void *)(DerivedStorage + 9200) = 0;
  }
  v88 = *(const void **)(DerivedStorage + 9168);
  if (v88)
  {
    CFRelease(v88);
    *(void *)(DerivedStorage + 9168) = 0;
  }
  v89 = *(const void **)(DerivedStorage + 9520);
  if (v89)
  {
    CFRelease(v89);
    *(void *)(DerivedStorage + 9520) = 0;
  }
  v90 = *(const void **)(DerivedStorage + 9528);
  if (v90)
  {
    CFRelease(v90);
    *(void *)(DerivedStorage + 9528) = 0;
  }
  v91 = *(NSObject **)(DerivedStorage + 9536);
  if (v91)
  {
    dispatch_release(v91);
    *(void *)(DerivedStorage + 9536) = 0;
  }
  v92 = *(const void **)(DerivedStorage + 9024);
  if (v92) {
    CFRelease(v92);
  }
  v93 = *(const void **)(DerivedStorage + 9016);
  if (v93)
  {
    CFRelease(v93);
  }
}

__CFString *segPumpCopyDebugDescription(uint64_t a1)
{
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  Mutable = CFStringCreateMutable(AllocatorForMedia, 0);
  CFStringAppendFormat(Mutable, 0, @"<FigBytePumpHTTPSegment %p>", a1);
  return Mutable;
}

uint64_t segPumpCopyProperty(uint64_t a1, const void *a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigRetainProxyLockMutex();
  if (FigRetainProxyIsInvalidated()) {
    goto LABEL_75;
  }
  if (CFEqual(a2, @"FBP_AlternateInfo"))
  {
    if (*(void *)(DerivedStorage + 8096))
    {
      value.start.CMTimeRange value = 0;
      CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (Mutable)
      {
        char v10 = Mutable;
        LODWORD(a3) = segPumpCreateFigAlternatesArrayAndCalculateStartupScore(DerivedStorage, (__CFArray **)&value);
        if (a3)
        {
          CFTypeRef v13 = 0;
        }
        else
        {
          CFDictionarySetValue(v10, @"FBPAIK_FigAlternateArray", (const void *)value.start.value);
          uint64_t v11 = *(void *)(DerivedStorage + 8144);
          if (v11) {
            CFDictionarySetValue(v10, @"FBPAIK_CurrentFigAlternate", *(const void **)(v11 + 8));
          }
          BOOL v12 = *(const void **)(DerivedStorage + 8376);
          if (v12) {
            CFDictionarySetValue(v10, @"FBPAIK_MediaSelectionArray", v12);
          }
          CFTypeRef v13 = CFRetain(v10);
        }
        CFRelease(v10);
        if (value.start.value) {
          CFRelease((CFTypeRef)value.start.value);
        }
        if (v13) {
          *a4 = v13;
        }
        goto LABEL_15;
      }
      goto LABEL_75;
    }
    goto LABEL_86;
  }
  if (CFEqual(a2, @"FBP_MinTime"))
  {
    int v14 = *(unsigned __int8 *)(*(void *)(DerivedStorage + 384) + 1169);
    uint64_t v15 = *(void *)(DerivedStorage + 400);
    if (*(void *)(v15 + 16)) {
      int v14 = (*(unsigned char *)(v15 + 1169) & v14);
    }
    uint64_t v16 = *(void *)(DerivedStorage + 416);
    if (*(void *)(v16 + 16)) {
      int v14 = (*(unsigned char *)(v16 + 1169) & v14);
    }
    if (!v14)
    {
      double MinTime = segPumpGetMinTime((void *)DerivedStorage);
      memset(&value, 0, 24);
LABEL_43:
      CMTimeMakeWithSeconds(&value.start, MinTime, 1000);
LABEL_44:
      *(_OWORD *)&v79.start.CMTimeRange value = *(_OWORD *)&value.start.value;
      v79.start.epoch = value.start.epoch;
      p_CMTimeRange value = &v79;
      goto LABEL_45;
    }
LABEL_31:
    *(_OWORD *)&value.start.CMTimeRange value = *MEMORY[0x1E4F1F9F8];
    value.start.epoch = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
    p_CMTimeRange value = &value;
LABEL_45:
    Copy = CMTimeCopyAsDictionary(&p_value->start, (CFAllocatorRef)a3);
    goto LABEL_46;
  }
  if (CFEqual(a2, @"FBP_MaxTime"))
  {
    int v18 = *(unsigned __int8 *)(*(void *)(DerivedStorage + 384) + 1169);
    uint64_t v19 = *(void *)(DerivedStorage + 400);
    if (*(void *)(v19 + 16)) {
      int v18 = (*(unsigned char *)(v19 + 1169) & v18);
    }
    uint64_t v20 = *(void *)(DerivedStorage + 416);
    if (*(void *)(v20 + 16)) {
      int v18 = (*(unsigned char *)(v20 + 1169) & v18);
    }
    if (!v18)
    {
      memset(&value, 0, 24);
      double v28 = segPumpGetMinTime((void *)DerivedStorage);
      double MaxTime = segPumpGetMaxTime((void *)DerivedStorage);
      if (!*(unsigned char *)(DerivedStorage + 8002)) {
        double MaxTime = MaxTime
      }
                - (segPumpGetMinimumPrebufferReservation(DerivedStorage, 0)
                 + *(double *)(DerivedStorage + 7960));
      if (MaxTime >= v28) {
        double MinTime = MaxTime;
      }
      else {
        double MinTime = v28;
      }
      goto LABEL_43;
    }
    goto LABEL_31;
  }
  if (CFEqual(a2, @"FBP_TimeAvailableModDate"))
  {
    uint64_t v22 = *(void *)(*(void *)(DerivedStorage + 16 * *(void *)(DerivedStorage + 8416) + 384) + 1056);
    if (v22)
    {
      int64_t v23 = (FigGetUpTimeNanoseconds() - v22) / 0xF4240uLL;
      double v24 = CACurrentMediaTime() + (double)v23 / -1000.0;
LABEL_35:
      *(double *)&value.start.CMTimeRange value = v24;
LABEL_36:
      CFAllocatorRef v25 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFNumberType v26 = kCFNumberDoubleType;
LABEL_37:
      Copy = CFNumberCreate(v25, v26, &value);
LABEL_46:
      a3 = 0;
      *a4 = Copy;
LABEL_87:
      segPumpUnlockAndSendAllPendingNotifications();
      return a3;
    }
    goto LABEL_86;
  }
  if (CFEqual(a2, @"FBP_CachedTimeRanges"))
  {
    int AccessLog = segPumpCopyCachedTimeRanges(DerivedStorage, a4);
LABEL_49:
    LODWORD(a3) = AccessLog;
    goto LABEL_15;
  }
  if (CFEqual(a2, @"FBP_MeasuredBandwidth"))
  {
    uint64_t v84 = 0;
    long long v82 = 0u;
    long long v83 = 0u;
    memset(&value, 0, sizeof(value));
    LODWORD(a3) = segPumpGetObservedNetworkStats(DerivedStorage, 0, (uint64_t)&value);
    if (a3) {
      goto LABEL_15;
    }
    CFNumberRef v31 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt64Type, &value);
    goto LABEL_57;
  }
  if (CFEqual(a2, @"FBP_RequiredBandwidth"))
  {
    uint64_t v32 = *(void *)(DerivedStorage + 8144);
    if (!v32)
    {
      uint64_t v33 = 0;
      double v34 = 0.0;
      do
      {
        uint64_t v35 = *(void *)(DerivedStorage + 384 + v33);
        if (*(void *)(v35 + 16))
        {
          int v36 = *(_DWORD *)(v35 + 1080);
          if (!v36) {
            goto LABEL_86;
          }
          LODWORD(v32) = v36 + v32;
          if (v34 == 0.0)
          {
            double v34 = *(double *)(v35 + 1088);
          }
          else if (v34 >= *(double *)(v35 + 1088))
          {
            double v34 = *(double *)(v35 + 1088);
          }
        }
        v33 += 16;
      }
      while (v33 != 48);
      if (v34 > 0.0)
      {
        double v24 = (double)v32;
        goto LABEL_35;
      }
LABEL_86:
      a3 = 4294954513;
      goto LABEL_87;
    }
    LODWORD(value.start.value) = FigAlternateGetPeakBitRate(*(void *)(v32 + 8));
    if (LODWORD(value.start.value))
    {
      CFNumberRef v31 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &value);
      LODWORD(a3) = 0;
LABEL_57:
      *a4 = v31;
      goto LABEL_15;
    }
LABEL_75:
    int AccessLog = FigSignalErrorAt();
    goto LABEL_49;
  }
  if (CFEqual(a2, @"FBP_NetworkBandwidth"))
  {
    value.start.CMTimeRange value = 0;
    if (!segPumpGetSafeNetworkBandwidth(DerivedStorage, (double *)&value.start.value, 0, 0)) {
      goto LABEL_36;
    }
    goto LABEL_86;
  }
  if (CFEqual(a2, @"FBP_CanContinueWithoutGapBitField"))
  {
    LODWORD(value.start.value) = 0;
    segPumpCanContinueWithoutGap(DerivedStorage, (int *)&value);
    CFAllocatorRef v25 = (const __CFAllocator *)a3;
    CFNumberType v26 = kCFNumberSInt32Type;
    goto LABEL_37;
  }
  if (CFEqual(a2, @"FBP_Duration"))
  {
    *(_OWORD *)&value.start.CMTimeRange value = *MEMORY[0x1E4F1F9F0];
    value.start.epoch = *(void *)(MEMORY[0x1E4F1F9F0] + 16);
    if (*(unsigned char *)(DerivedStorage + 8002))
    {
      double v37 = segPumpGetMaxTime((void *)DerivedStorage);
      double MinTime = v37 - segPumpGetMinTime((void *)DerivedStorage);
      goto LABEL_43;
    }
    if (*(double *)(DerivedStorage + 344) > 0.0) {
      goto LABEL_44;
    }
    goto LABEL_86;
  }
  if (CFEqual(a2, @"FBP_MaximumRecommendedCellularBitrate"))
  {
    if (!segPumpConnectedInterfaceIsWWAN(DerivedStorage))
    {
      CFTypeRef v38 = *a4;
      goto LABEL_92;
    }
    CFTypeRef v38 = *(CFTypeRef *)(DerivedStorage + 208);
    if (!v38)
    {
LABEL_84:
      *a4 = v38;
LABEL_92:
      BOOL v40 = v38 == 0;
LABEL_93:
      unsigned int v41 = -12783;
      goto LABEL_94;
    }
LABEL_83:
    CFTypeRef v38 = CFRetain(v38);
    goto LABEL_84;
  }
  if (CFEqual(a2, @"FBP_AccessLog"))
  {
    int AccessLog = segPumpCreateAccessLog(DerivedStorage, (CFAllocatorRef)a3, (__CFDictionary **)a4);
    goto LABEL_49;
  }
  if (CFEqual(a2, @"FBP_LastServerIPAddress"))
  {
    v42 = (void *)(*(void *)(DerivedStorage + 16 * *(void *)(DerivedStorage + 8416) + 384) + 680);
    while (1)
    {
      v42 = (void *)*v42;
      if (!v42) {
        break;
      }
      CFDataRef v43 = (const __CFData *)v42[22];
      if (v43) {
        goto LABEL_107;
      }
    }
    CFDataRef v43 = 0;
LABEL_107:
    Copy = FigCFHTTPCreateAddressString(v43);
    if (Copy) {
      goto LABEL_46;
    }
    goto LABEL_86;
  }
  if (CFEqual(a2, @"FBP_ErrorLog"))
  {
    CFArrayRef v44 = *(const __CFArray **)(DerivedStorage + 8672);
    if (v44)
    {
      Copy = CFArrayCreateCopy((CFAllocatorRef)a3, v44);
      if (!Copy)
      {
        a3 = 4294954510;
        goto LABEL_87;
      }
      goto LABEL_46;
    }
    goto LABEL_86;
  }
  if (CFEqual(a2, @"FBP_EndError"))
  {
    Copy = *(const void **)(DerivedStorage + 8016);
    if (!Copy) {
      goto LABEL_86;
    }
LABEL_120:
    Copy = CFRetain(Copy);
    goto LABEL_46;
  }
  if (CFEqual(a2, @"FBP_PlaybackSessionID"))
  {
    Copy = *(const void **)(DerivedStorage + 224);
    if (!Copy) {
      goto LABEL_86;
    }
    goto LABEL_120;
  }
  if (CFEqual(a2, @"FBP_SegmentCache"))
  {
    Copy = *(const void **)(DerivedStorage + 296);
    if (!Copy) {
      goto LABEL_86;
    }
    goto LABEL_120;
  }
  if (CFEqual(a2, @"FBP_ExternalProtectionMethods"))
  {
    Copy = *(const void **)(DerivedStorage + 264);
    if (Copy) {
      goto LABEL_120;
    }
    value.start.CMTimeRange value = 0;
LABEL_129:
    CFAllocatorRef v25 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFNumberType v26 = kCFNumberSInt64Type;
    goto LABEL_37;
  }
  if (CFEqual(a2, @"FBP_HasKeyContent"))
  {
    uint64_t v45 = 0;
    *a4 = (CFTypeRef)*MEMORY[0x1E4F1CFC8];
    while (1)
    {
      uint64_t v46 = *(void *)(*(void *)(DerivedStorage + 384 + v45) + 56);
      if (v46)
      {
        CFArrayRef ContentKeySpecifiers = (const __CFArray *)FigMediaPlaylistGetContentKeySpecifiers(v46);
        if (ContentKeySpecifiers)
        {
          if (CFArrayGetCount(ContentKeySpecifiers) >= 1) {
            break;
          }
        }
      }
      a3 = 0;
      v45 += 16;
      if (v45 == 48) {
        goto LABEL_87;
      }
    }
    a3 = 0;
    v54 = (const void **)MEMORY[0x1E4F1CFD0];
    goto LABEL_139;
  }
  if (CFEqual(a2, @"FBP_SpecifiedPreciseStartTime"))
  {
    if (!*(unsigned char *)(DerivedStorage + 8685) || !*(unsigned char *)(DerivedStorage + 8686)) {
      goto LABEL_86;
    }
    double v48 = *(double *)(DerivedStorage + 8688);
    *(double *)&value.start.CMTimeRange value = v48;
    if (v48 >= 0.0) {
      goto LABEL_136;
    }
    double v49 = v48 + *(double *)(DerivedStorage + 344);
LABEL_135:
    *(double *)&value.start.CMTimeRange value = v49;
LABEL_136:
    CFAllocatorRef v50 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    v51 = &value;
    CFNumberType v52 = kCFNumberDoubleType;
LABEL_137:
    CFNumberRef v53 = CFNumberCreate(v50, v52, v51);
LABEL_146:
    *a4 = v53;
    BOOL v40 = v53 == 0;
    unsigned int v41 = -12786;
LABEL_94:
    if (v40) {
      a3 = v41;
    }
    else {
      a3 = 0;
    }
    goto LABEL_87;
  }
  if (CFEqual(a2, @"FBP_PrebufferReservation"))
  {
    if (!*(_DWORD *)(DerivedStorage + 8)) {
      goto LABEL_86;
    }
    double MinimumPrebufferReservation = segPumpGetMinimumPrebufferReservation(DerivedStorage, 0);
    CMTimeMakeWithSeconds(&time, MinimumPrebufferReservation + *(double *)(DerivedStorage + 7960), 1000000);
    CFNumberRef v53 = CMTimeCopyAsDictionary(&time, (CFAllocatorRef)a3);
    goto LABEL_146;
  }
  if (CFEqual(a2, @"FBP_ManagedLiveEdgeSeekablePoint"))
  {
    memset(&value, 0, sizeof(value));
    segPumpGetLiveEdge(DerivedStorage, 7u, 1, (uint64_t)&value);
    CMTimeRange v79 = value;
    CFNumberRef v53 = CMTimeRangeCopyAsDictionary(&v79, (CFAllocatorRef)a3);
    goto LABEL_146;
  }
  if (CFEqual(a2, @"FBP_RecommendedPrebufferReservation"))
  {
    value.start.CMTimeRange value = *(void *)(DerivedStorage + 7968);
    if (*(double *)&value.start.value <= 0.0) {
      goto LABEL_86;
    }
    goto LABEL_136;
  }
  if (CFEqual(a2, @"FBSP_Chapters"))
  {
    int AccessLog = segPumpLoadSynchronousProperties(DerivedStorage);
    if (AccessLog) {
      goto LABEL_49;
    }
    v57 = *(__CFError **)(DerivedStorage + 7720);
    if (!v57)
    {
      Copy = *(const void **)(DerivedStorage + 7712);
      if (!Copy) {
        goto LABEL_86;
      }
      goto LABEL_120;
    }
    goto LABEL_189;
  }
  if (CFEqual(a2, @"FBSP_LocalizedMSODisplayName"))
  {
    int AccessLog = segPumpLoadSynchronousProperties(DerivedStorage);
    if (AccessLog) {
      goto LABEL_49;
    }
    v57 = *(__CFError **)(DerivedStorage + 7736);
    if (!v57)
    {
      Copy = *(const void **)(DerivedStorage + 7728);
      if (!Copy) {
        goto LABEL_86;
      }
      goto LABEL_120;
    }
    goto LABEL_189;
  }
  if (CFEqual(a2, @"FBSP_Metadata"))
  {
    int AccessLog = segPumpLoadSynchronousProperties(DerivedStorage);
    if (AccessLog) {
      goto LABEL_49;
    }
    v57 = *(__CFError **)(DerivedStorage + 7704);
    if (!v57)
    {
      Copy = *(const void **)(DerivedStorage + 7696);
      if (!Copy) {
        goto LABEL_86;
      }
      goto LABEL_120;
    }
LABEL_189:
    LODWORD(a3) = CFErrorGetCode(v57);
    goto LABEL_15;
  }
  if (CFEqual(a2, @"FBSP_MetadataFormats"))
  {
    uint64_t v58 = *(void *)(*(void *)(DerivedStorage + 384) + 48);
    if (!v58) {
      goto LABEL_86;
    }
    CFArrayRef SessionDataSpecifiers = (const __CFArray *)FigMultivariantPlaylistGetSessionDataSpecifiers(v58);
    if (!SessionDataSpecifiers || CFArrayGetCount(SessionDataSpecifiers) < 1) {
      goto LABEL_86;
    }
    v60 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    if (!v60) {
      goto LABEL_75;
    }
    v61 = v60;
    CFArrayAppendValue(v60, @"com.apple.quicktime.HLS");
    *a4 = CFRetain(v61);
    CFRelease(v61);
LABEL_171:
    a3 = 0;
    goto LABEL_87;
  }
  if (CFEqual(a2, @"FBP_SessionConfiguration"))
  {
    Copy = *(const void **)(DerivedStorage + 9128);
    if (!Copy) {
      goto LABEL_86;
    }
    goto LABEL_120;
  }
  if (CFEqual(a2, @"FBP_TaggedRangeMetadataArray"))
  {
    uint64_t v62 = *(void *)(*(void *)(DerivedStorage + 16 * *(void *)(DerivedStorage + 8416) + 384) + 56);
    if (!v62 || !FigMediaPlaylistGetDateEntryArray(v62)) {
      goto LABEL_86;
    }
    Copy = (const void *)FigMediaPlaylistGetDateEntryArray(*(void *)(*(void *)(DerivedStorage
                                                                                 + 16
                                                                                 * *(void *)(DerivedStorage + 8416)
                                                                                 + 384)
                                                                     + 56));
    goto LABEL_120;
  }
  if (CFEqual(a2, @"FBP_BandwidthEstimateStatistics"))
  {
    uint64_t v63 = *(void *)(DerivedStorage + 9120);
    if (v63)
    {
      Copy = FigNetworkInterfaceReporterCopyBandwidthEstimates(v63);
      if (Copy) {
        goto LABEL_46;
      }
    }
    goto LABEL_86;
  }
  if (CFEqual(a2, @"FBP_IFrameReport"))
  {
    int AccessLog = segPumpCreateIFrameReport(DerivedStorage, (const __CFAllocator *)a3, (CFMutableDictionaryRef *)a4);
    goto LABEL_49;
  }
  if (CFEqual(a2, @"FBP_MaxIFrameRate"))
  {
    if (!*(unsigned char *)(DerivedStorage + 8712)) {
      goto LABEL_86;
    }
    uint64_t v64 = *(void *)(*(void *)(DerivedStorage + 16 * *(void *)(DerivedStorage + 8416) + 384) + 56);
    if (!v64) {
      goto LABEL_86;
    }
    double v65 = fabsf(*(float *)(DerivedStorage + 8696));
    double v49 = v65 / FigMediaPlaylistGetAvgSegmentDuration(v64);
    goto LABEL_135;
  }
  if (CFEqual(a2, @"FBP_NetworkInterfaceStatistics"))
  {
    uint64_t NetworkStatistics = segPumpCreateNetworkStatistics(DerivedStorage, (CFAllocatorRef)a3, (__CFDictionary **)a4);
LABEL_193:
    a3 = NetworkStatistics;
    goto LABEL_87;
  }
  if (CFEqual(a2, @"FBP_PrefetchKeys"))
  {
    a3 = 0;
    int v67 = *(unsigned __int8 *)(DerivedStorage + 7994);
LABEL_196:
    v68 = (const void **)MEMORY[0x1E4F1CFD0];
    v69 = (const void **)MEMORY[0x1E4F1CFC8];
    BOOL v70 = v67 == 0;
    goto LABEL_197;
  }
  if (CFEqual(a2, @"FBP_NetworkServiceType"))
  {
    Copy = *(const void **)(DerivedStorage + 256);
    goto LABEL_120;
  }
  if (CFEqual(a2, @"FBP_StartupStatistics"))
  {
    uint64_t NetworkStatistics = segPumpCreateStartupStatistics(DerivedStorage, (CFAllocatorRef)a3, (CFMutableDictionaryRef *)a4);
    goto LABEL_193;
  }
  if (CFEqual(a2, @"FBP_RecoveryAlternate"))
  {
    CFTypeRef v38 = segPumpCopyRecoveryAlternateIfViable(DerivedStorage);
    goto LABEL_84;
  }
  if (CFEqual(a2, @"FBP_MinimizeNetworkingWhilePaused"))
  {
    a3 = 0;
    int v67 = *(unsigned __int8 *)(DerivedStorage + 7995);
    goto LABEL_196;
  }
  if (CFEqual(a2, @"FBP_InitialBandwidthTargetForNetwork"))
  {
    if (segPumpConnectedInterfaceIsWWAN(DerivedStorage))
    {
      CFTypeRef v38 = *(CFTypeRef *)(DerivedStorage + 192);
      if (!v38) {
        goto LABEL_84;
      }
    }
    else
    {
      CFTypeRef v38 = *(CFTypeRef *)(DerivedStorage + 200);
      if (!v38) {
        goto LABEL_84;
      }
    }
    goto LABEL_83;
  }
  if (CFEqual(a2, @"FPB_CPECryptorsForSessionCryptKeys"))
  {
    int AccessLog = segPumpCreateCPECryptorsSessionCryptKeysDict(DerivedStorage, a4);
    goto LABEL_49;
  }
  if (CFEqual(a2, @"FBP_ReportingAgent"))
  {
    v71 = *(const void **)(DerivedStorage + 9048);
    if (v71)
    {
      CFRetain(v71);
      v55 = *(const void **)(DerivedStorage + 9048);
    }
    else
    {
      v55 = 0;
    }
    a3 = 0;
    goto LABEL_140;
  }
  if (CFEqual(a2, @"FBP_LiveUpdateInterval"))
  {
    v51 = (CMTimeRange *)(DerivedStorage + 8);
    if (!*(_DWORD *)(DerivedStorage + 8)) {
      goto LABEL_86;
    }
    if (*(unsigned char *)(DerivedStorage + 8002) || *(_DWORD *)(DerivedStorage + 24) > 1u)
    {
      a3 = 4294954509;
      goto LABEL_87;
    }
    goto LABEL_224;
  }
  if (CFEqual(a2, @"FBP_DownloadDestinationURL"))
  {
    uint64_t v72 = *(void *)(DerivedStorage + 296);
    if (!v72) {
      goto LABEL_86;
    }
    uint64_t v73 = FigGetAllocatorForMedia();
    FigStreamingCacheCopyProperty(v72, @"FSC_DownloadDestinationURL", v73, a4);
    goto LABEL_171;
  }
  if (CFEqual(a2, @"FBP_AlternatesInPenaltybox"))
  {
    value.start.CMTimeRange value = 0;
    int v74 = segPumpCopyAlternatesInPenaltyBox(DerivedStorage, (__CFArray **)&value);
    goto LABEL_233;
  }
  if (CFEqual(a2, @"FBP_MaxOverlapDurationForSwitching"))
  {
    v51 = (CMTimeRange *)(DerivedStorage + 8);
    if (!*(_DWORD *)(DerivedStorage + 8)) {
      goto LABEL_86;
    }
LABEL_224:
    CFAllocatorRef v50 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFNumberType v52 = kCFNumberSInt32Type;
    goto LABEL_137;
  }
  if (CFEqual(a2, @"FBP_PrefersConcurrentSwitch"))
  {
    a3 = 0;
    int v67 = *(unsigned __int8 *)(DerivedStorage + 329);
    goto LABEL_196;
  }
  if (CFEqual(a2, @"FBP_NetworkUrgencyMonitor"))
  {
    Copy = *(const void **)(DerivedStorage + 9512);
    if (!Copy) {
      goto LABEL_86;
    }
    goto LABEL_120;
  }
  if (CFEqual(a2, @"FBP_NominalVideoFramerate"))
  {
    segPumpCopyNominalVideoFrameRate(DerivedStorage, (CFNumberRef *)a4);
    BOOL v40 = *a4 == 0;
    goto LABEL_93;
  }
  if (CFEqual(a2, @"FBP_HasAlternates"))
  {
    a3 = 0;
    v68 = (const void **)MEMORY[0x1E4F1CFD0];
    v69 = (const void **)MEMORY[0x1E4F1CFC8];
    BOOL v70 = *(void *)(DerivedStorage + 8096) == 0;
LABEL_197:
    if (v70) {
      v54 = v69;
    }
    else {
      v54 = v68;
    }
LABEL_139:
    v55 = *v54;
LABEL_140:
    *a4 = v55;
    goto LABEL_87;
  }
  if (CFEqual(a2, @"FBP_SessionKeys"))
  {
    value.start.CMTimeRange value = 0;
    int v74 = segPumpCopySessionKeys(DerivedStorage, (__CFArray **)&value);
LABEL_233:
    LODWORD(a3) = v74;
    if (!v74) {
      *a4 = (CFTypeRef)value.start.value;
    }
    goto LABEL_15;
  }
  if (CFEqual(a2, @"FBP_LastMediaFileInterfaceType"))
  {
    if (!*(_DWORD *)(DerivedStorage + 8464)) {
      goto LABEL_86;
    }
    v51 = (CMTimeRange *)(DerivedStorage + 8464);
    CFAllocatorRef v50 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFNumberType v52 = kCFNumberIntType;
    goto LABEL_137;
  }
  if (!CFEqual(a2, @"FBP_NetworkCostMonitor"))
  {
    if (CFEqual(a2, @"FBP_PlaybackRateMonitor"))
    {
      Copy = *(const void **)(DerivedStorage + 9560);
      if (!Copy) {
        goto LABEL_46;
      }
      goto LABEL_120;
    }
    if (CFEqual(a2, @"FBP_EnableContentSteering"))
    {
      a3 = 0;
      int v67 = *(unsigned __int8 *)(DerivedStorage + 7904);
      goto LABEL_196;
    }
    if (CFEqual(a2, @"FBP_ContentSteeringMonitor"))
    {
      Copy = *(const void **)(DerivedStorage + 9552);
      if (!Copy) {
        goto LABEL_46;
      }
      goto LABEL_120;
    }
    if (CFEqual(a2, @"FBP_MainSegmentBytesInTransit"))
    {
      value.start.CMTimeRange value = (CMTimeValue)segPumpMainSegmentBytesInTransit(DerivedStorage);
      goto LABEL_129;
    }
    if (CFEqual(a2, @"FBP_PlaylistCache"))
    {
      Copy = *(const void **)(DerivedStorage + 304);
      if (!Copy) {
        goto LABEL_46;
      }
      goto LABEL_120;
    }
    if (CFEqual(a2, @"FBP_ClientNetworkActivity"))
    {
      Copy = *(const void **)(DerivedStorage + 9104);
      if (!Copy) {
        goto LABEL_46;
      }
      goto LABEL_120;
    }
    if (CFEqual(a2, @"FBP_HasFairPlayEncryptedContent"))
    {
      CFIndex v75 = 0;
      while (1)
      {
        CFArrayRef Count = *(const __CFArray **)(DerivedStorage + 7688);
        if (Count) {
          CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
        }
        if (v75 >= (uint64_t)Count) {
          break;
        }
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 7688), v75++);
        if (ValueAtIndex[6] == 1) {
          goto LABEL_281;
        }
      }
    }
    else
    {
      if (!CFEqual(a2, @"FBP_DidTransitionFromLiveToVOD"))
      {
        if (CFEqual(a2, @"FBP_OfflineInterstitialURLs"))
        {
          int AccessLog = segPumpCopyOfflineInterstitialURLs(DerivedStorage, a3, a4);
          goto LABEL_49;
        }
        if (!CFEqual(a2, @"FBP_CMCDHeaderVendor")) {
          goto LABEL_75;
        }
        if (!segPumpEnsureCMCDHeaderVendor(DerivedStorage)) {
          goto LABEL_86;
        }
        Copy = *(const void **)(DerivedStorage + 9576);
        if (!Copy) {
          goto LABEL_46;
        }
        goto LABEL_120;
      }
      if (*(unsigned char *)(DerivedStorage + 8003))
      {
LABEL_281:
        v78 = (const void **)MEMORY[0x1E4F1CFD0];
        goto LABEL_290;
      }
    }
    v78 = (const void **)MEMORY[0x1E4F1CFC8];
LABEL_290:
    Copy = *v78;
    if (!*v78) {
      goto LABEL_46;
    }
    goto LABEL_120;
  }
  LODWORD(a3) = segPumpEnsureNetworkCostMonitor(DerivedStorage, a3);
  if (!a3)
  {
    Copy = *(const void **)(DerivedStorage + 8472);
    if (!Copy) {
      goto LABEL_46;
    }
    goto LABEL_120;
  }
LABEL_15:
  segPumpUnlockAndSendAllPendingNotifications();
  if (a3 == -15626) {
    return 0;
  }
  else {
    return a3;
  }
}

uint64_t segPumpSetProperty(const void *a1, const void *a2, NSObject *a3)
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigRetainProxyLockMutex();
  if (FigRetainProxyIsInvalidated()) {
    goto LABEL_209;
  }
  if (CFEqual(a2, @"FBP_SendToNero"))
  {
    if (a3)
    {
      CFTypeID v7 = CFGetTypeID(a3);
      if (v7 == CFDictionaryGetTypeID())
      {
        CFDictionaryGetValue((CFDictionaryRef)a3, @"FBPSTN_Video");
        uint64_t v8 = (const void *)*MEMORY[0x1E4F1CFD0];
        int v9 = FigCFEqual();
        int v10 = v9;
        if (*(unsigned __int8 *)(DerivedStorage + 7992) == v9)
        {
          uint64_t v11 = 0;
LABEL_7:
          if (dword_1E9351350)
          {
            os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          if (v11)
          {
            unsigned int v21 = 0;
LABEL_40:
            CFRelease(v11);
            goto LABEL_41;
          }
LABEL_59:
          segPumpUnlockAndSendAllPendingNotifications();
          return 0;
        }
        *(unsigned char *)(DerivedStorage + 7992) = v9;
        segPumpResetContentKeyState(a1);
        CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        if (Mutable)
        {
          uint64_t v11 = Mutable;
          if (v10) {
            uint64_t v16 = v8;
          }
          else {
            uint64_t v16 = (const void *)*MEMORY[0x1E4F1CFC8];
          }
          CFDictionarySetValue(Mutable, @"kFigCKSPropertyKeySendToNero_Visuals", v16);
          if (*(unsigned char *)(DerivedStorage + 7992))
          {
            Value = CFDictionaryGetValue((CFDictionaryRef)a3, @"FBPSTN_NeroTransport");
            if (Value)
            {
              int v18 = *(const void **)(DerivedStorage + 9520);
              *(void *)(DerivedStorage + 9520) = Value;
              CFRetain(Value);
              if (v18) {
                CFRelease(v18);
              }
              CFDictionarySetValue(v11, @"kFigCKSPropertyKeySendToNero_NeroTransport", *(const void **)(DerivedStorage + 9520));
            }
            else
            {
              FigSignalErrorAt();
            }
          }
          else
          {
            uint64_t v20 = *(const void **)(DerivedStorage + 9520);
            if (v20)
            {
              CFRelease(v20);
              *(void *)(DerivedStorage + 9520) = 0;
            }
          }
          uint64_t v22 = *(void *)(DerivedStorage + 9472);
          uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v23) {
            uint64_t v24 = v23;
          }
          else {
            uint64_t v24 = 0;
          }
          CFAllocatorRef v25 = *(uint64_t (**)(uint64_t, uint64_t, __CFDictionary *))(v24 + 56);
          if (!v25)
          {
            unsigned int v21 = -12782;
            goto LABEL_40;
          }
          unsigned int v26 = v25(v22, 0x1EE53F5B8, v11);
          if (v26)
          {
            unsigned int v21 = v26;
            goto LABEL_40;
          }
          if (!*(unsigned char *)(DerivedStorage + 7992))
          {
            if (dword_1E9351350)
            {
              CFTypeRef v27 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            uint64_t v32 = *(void *)(DerivedStorage + 9488);
            if (v32)
            {
              uint64_t v33 = *(void *)(CMBaseObjectGetVTable() + 16);
              uint64_t v34 = v33 ? v33 : 0;
              uint64_t v35 = *(void (**)(uint64_t, uint64_t))(v34 + 72);
              if (v35) {
                v35(v32, 4);
              }
            }
          }
          goto LABEL_7;
        }
      }
    }
    goto LABEL_209;
  }
  if (CFEqual(a2, @"FBP_CacheIFrames"))
  {
    if (a3)
    {
      CFTypeID v13 = CFGetTypeID(a3);
      if (v13 == CFBooleanGetTypeID())
      {
        *(unsigned char *)(DerivedStorage + 7996) = *MEMORY[0x1E4F1CFD0] == (void)a3;
        goto LABEL_59;
      }
    }
    goto LABEL_209;
  }
  if (CFEqual(a2, @"FBP_CacheNonIFrames"))
  {
    if (a3)
    {
      CFTypeID v19 = CFGetTypeID(a3);
      if (v19 == CFBooleanGetTypeID())
      {
        *(unsigned char *)(DerivedStorage + 7997) = *MEMORY[0x1E4F1CFD0] == (void)a3;
        goto LABEL_59;
      }
    }
    goto LABEL_209;
  }
  if (CFEqual(a2, @"FBP_CacheMediaSegmentsToDisk"))
  {
    int v29 = *MEMORY[0x1E4F1CFD0] == (void)a3;
    if (*(unsigned __int8 *)(DerivedStorage + 7998) != v29)
    {
      if (dword_1E9351350)
      {
        v30 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      *(unsigned char *)(DerivedStorage + 7998) = v29;
    }
    goto LABEL_59;
  }
  if (CFEqual(a2, @"FBP_NetworkReadsAreOpportunistic"))
  {
    if (a3)
    {
      CFTypeID v31 = CFGetTypeID(a3);
      if (v31 == CFBooleanGetTypeID())
      {
        *(unsigned char *)(DerivedStorage + 7999) = *MEMORY[0x1E4F1CFD0] == (void)a3;
        goto LABEL_59;
      }
    }
    goto LABEL_209;
  }
  if (CFEqual(a2, @"FBP_NetworkReadsContributeToGlobalHistory"))
  {
    if (a3)
    {
      CFTypeID v36 = CFGetTypeID(a3);
      if (v36 == CFBooleanGetTypeID())
      {
        segPumpSetNetworkReadsContributeToNetworkHistory(DerivedStorage, *MEMORY[0x1E4F1CFD0] == (void)a3);
        goto LABEL_59;
      }
    }
    goto LABEL_209;
  }
  if (CFEqual(a2, @"FBP_SegmentCache"))
  {
    if (!a3 || (CFTypeID v37 = CFGetTypeID(a3), v37 == FigStreamingCacheGetTypeID()))
    {
      if (*(NSObject **)(DerivedStorage + 296) == a3) {
        goto LABEL_59;
      }
      unsigned int NextCryptKeyForAllStreams = segPumpSetMediaSegmentCache(DerivedStorage, a3);
      goto LABEL_210;
    }
    goto LABEL_209;
  }
  if (CFEqual(a2, @"FBP_PlaylistCache"))
  {
    if (!a3)
    {
      BOOL v40 = *(const void **)(DerivedStorage + 304);
      *(void *)(DerivedStorage + 304) = 0;
LABEL_86:
      if (v40) {
        CFRelease(v40);
      }
      goto LABEL_59;
    }
    CFTypeID v39 = CFGetTypeID(a3);
    if (v39 == FigStreamingCacheGetTypeID())
    {
      BOOL v40 = *(const void **)(DerivedStorage + 304);
      *(void *)(DerivedStorage + 304) = a3;
      CFRetain(a3);
      goto LABEL_86;
    }
LABEL_209:
    unsigned int NextCryptKeyForAllStreams = FigSignalErrorAt();
    goto LABEL_210;
  }
  if (CFEqual(a2, @"FBP_ExternalProtectionMethods"))
  {
    if (a3)
    {
      CFTypeID v41 = CFGetTypeID(a3);
      if (v41 == CFNumberGetTypeID())
      {
        if (!FigCFEqual())
        {
          v42 = *(const void **)(DerivedStorage + 264);
          *(void *)(DerivedStorage + 264) = a3;
          CFRetain(a3);
          if (v42) {
            CFRelease(v42);
          }
          CFDataRef v43 = *(const void **)(DerivedStorage + 272);
          if (v43)
          {
            CFRelease(v43);
            *(void *)(DerivedStorage + 272) = 0;
          }
          CFArrayRef v44 = *(const void **)(DerivedStorage + 280);
          if (v44)
          {
            CFRelease(v44);
            *(void *)(DerivedStorage + 280) = 0;
          }
          segPumpEnsureAndSetupBasicAESProtector(DerivedStorage);
        }
        goto LABEL_59;
      }
    }
    goto LABEL_209;
  }
  if (CFEqual(a2, @"FBP_ClientAuditToken"))
  {
    if (a3)
    {
      CFTypeID v45 = CFGetTypeID(a3);
      if (v45 != CFDataGetTypeID()) {
        goto LABEL_209;
      }
      uint64_t v46 = (const __CFData **)(DerivedStorage + 8888);
      v47 = *(const void **)(DerivedStorage + 8888);
      *(void *)(DerivedStorage + 8888) = a3;
      CFRetain(a3);
    }
    else
    {
      uint64_t v46 = (const __CFData **)(DerivedStorage + 8888);
      v47 = *(const void **)(DerivedStorage + 8888);
      *(void *)(DerivedStorage + 8888) = 0;
    }
    if (v47) {
      CFRelease(v47);
    }
    CFNumberRef v53 = *(const void **)(DerivedStorage + 8896);
    if (v53)
    {
      CFRelease(v53);
      *(void *)(DerivedStorage + 8896) = 0;
    }
    *(void *)(DerivedStorage + 8896) = FigCFHTTPCopyClientProcessName(*(const __CFData **)(DerivedStorage + 8888));
    unsigned int v21 = segPumpSetHTTPRequestOptionsValue(DerivedStorage, @"FHRP_ClientAuditToken", a3);
    if (v21) {
      goto LABEL_41;
    }
    v54 = (const void *)FigCFHTTPCopyClientBundleIdentifier(*v46);
    if (v54)
    {
      v55 = v54;
      segPumpSetHTTPRequestOptionsValue(DerivedStorage, @"FHRP_ClientBundleIdentifier", v54);
      CFRelease(v55);
    }
    v56 = *(const void **)(DerivedStorage + 8432);
    if (v56)
    {
      v57 = *(const void **)(DerivedStorage + 8440);
      if (v57)
      {
        CFRelease(v57);
        *(void *)(DerivedStorage + 8440) = 0;
        v56 = *(const void **)(DerivedStorage + 8432);
      }
      AttemptNetworkMonitorSetup((void *)DerivedStorage, v56);
    }
    unsigned int NextCryptKeyForAllStreams = FigCPECryptorSetProperty(*(void *)(DerivedStorage + 9472), *MEMORY[0x1E4F1FC68], *(void *)(DerivedStorage + 8888));
    goto LABEL_210;
  }
  if (!CFEqual(a2, @"FBP_ClientBundleIdentifier"))
  {
    if (CFEqual(a2, @"FBP_PrefetchKeys"))
    {
      BOOL v58 = *MEMORY[0x1E4F1CFD0] == (void)a3;
      *(unsigned char *)(DerivedStorage + 7994) = v58;
      if (!v58) {
        goto LABEL_59;
      }
      unsigned int NextCryptKeyForAllStreams = segPumpReadNextCryptKeyForAllStreams((uint64_t)a1, DerivedStorage);
      goto LABEL_210;
    }
    if (CFEqual(a2, @"FBP_MinimizeNetworkingWhilePaused"))
    {
      BOOL v58 = *MEMORY[0x1E4F1CFD0] == (void)a3;
      *(unsigned char *)(DerivedStorage + 7995) = v58;
      if (!v58)
      {
        for (uint64_t i = 384; i != 432; i += 16)
        {
          uint64_t v60 = *(void *)(DerivedStorage + i);
          if (*(void *)(v60 + 16) && *(unsigned char *)(v60 + 1169))
          {
            segPumpReadOrScheduleIndexFileRead((uint64_t)a1, DerivedStorage, *(void *)(DerivedStorage + i));
            *(unsigned char *)(v60 + 1169) = 0;
          }
        }
      }
      goto LABEL_59;
    }
    if (CFEqual(a2, @"FBP_NetworkServiceType"))
    {
      if (a3)
      {
        CFTypeID v61 = CFGetTypeID(a3);
        if (v61 != CFNumberGetTypeID()) {
          goto LABEL_209;
        }
        uint64_t v62 = *(const void **)(DerivedStorage + 256);
        *(void *)(DerivedStorage + 256) = a3;
        CFRetain(a3);
      }
      else
      {
        uint64_t v62 = *(const void **)(DerivedStorage + 256);
        *(void *)(DerivedStorage + 256) = 0;
      }
      if (v62) {
        CFRelease(v62);
      }
      unsigned int NextCryptKeyForAllStreams = segPumpSetHTTPRequestOptionsValue(DerivedStorage, @"FHRP_NetworkServiceType", a3);
      goto LABEL_210;
    }
    if (CFEqual(a2, @"FBP_Scheduler"))
    {
      if (!*(unsigned char *)(DerivedStorage + 8684))
      {
        FigHTTPSchedulerRelease(*(dispatch_object_t *)(DerivedStorage + 64));
        *(void *)(DerivedStorage + 64) = FigHTTPSchedulerRetain(a3);
        FigHTTPSchedulerRelease(*(dispatch_object_t *)(DerivedStorage + 72));
        *(void *)(DerivedStorage + 72) = FigHTTPSchedulerRetain(a3);
        if (*(void *)(DerivedStorage + 9528))
        {
          uint64_t v63 = *(NSObject **)(DerivedStorage + 9536);
          if (v63)
          {
            FigHTTPSchedulerRelease(v63);
            *(void *)(DerivedStorage + 9536) = FigHTTPSchedulerRetain(a3);
          }
        }
        goto LABEL_59;
      }
      goto LABEL_209;
    }
    if (CFEqual(a2, @"FBP_PersistCurrentAlternate"))
    {
      unsigned int NextCryptKeyForAllStreams = segPumpMarkCurrentAlternatePersistentInCache(DerivedStorage, *MEMORY[0x1E4F1CFD0] == (void)a3);
      goto LABEL_210;
    }
    if (CFEqual(a2, @"FBP_StoreCryptKeysInCache"))
    {
      unsigned int NextCryptKeyForAllStreams = segPumpSetShouldStoreCryptKeysInCache(DerivedStorage, *MEMORY[0x1E4F1CFD0] == (void)a3);
      goto LABEL_210;
    }
    if (CFEqual(a2, @"FBP_RequiresCryptKeysForMediaDelivery"))
    {
      unsigned int NextCryptKeyForAllStreams = segPumpSetRequiresCryptKeysForMediaDelivery(DerivedStorage, *MEMORY[0x1E4F1CFD0] == (void)a3);
      goto LABEL_210;
    }
    if (CFEqual(a2, @"FBP_EnableCryptKeyRequests"))
    {
      uint64_t v64 = *MEMORY[0x1E4F1CFD0];
      BOOL v65 = *MEMORY[0x1E4F1CFD0] == (void)a3;
      CFTypeID v66 = CFGetTypeID(a3);
      if (v66 == CFBooleanGetTypeID() && (v64 == a3 || !*(unsigned char *)(DerivedStorage + 322)))
      {
        *(unsigned char *)(DerivedStorage + 323) = v65;
        goto LABEL_59;
      }
      goto LABEL_209;
    }
    if (CFEqual(a2, @"FBP_EnablePenaltyBox"))
    {
      *(unsigned char *)(DerivedStorage + 8176) = *MEMORY[0x1E4F1CFD0] == (void)a3;
      goto LABEL_59;
    }
    if (CFEqual(a2, @"FBP_EnableNetworkRetry"))
    {
      *(unsigned char *)(DerivedStorage + 8177) = *MEMORY[0x1E4F1CFD0] == (void)a3;
      goto LABEL_59;
    }
    if (CFEqual(a2, @"FBP_RetryTimeout"))
    {
      *(unsigned char *)(DerivedStorage + 8178) = a3 != 0;
      if (!a3) {
        goto LABEL_59;
      }
      int v67 = (void *)(DerivedStorage + 8184);
      CFNumberRef v68 = (const __CFNumber *)a3;
      CFNumberType v69 = kCFNumberSInt64Type;
    }
    else
    {
      if (CFEqual(a2, @"FBP_PumpClientName"))
      {
        BOOL v70 = *(const void **)(DerivedStorage + 9464);
        *(void *)(DerivedStorage + 9464) = a3;
        if (a3) {
          CFRetain(a3);
        }
        if (v70) {
          CFRelease(v70);
        }
        segPumpRTCReportingUpdatePumpClientName(DerivedStorage);
        goto LABEL_59;
      }
      if (CFEqual(a2, @"FBP_AlternatesInPenaltybox"))
      {
        unsigned int NextCryptKeyForAllStreams = segPumpSetAlternatesInPenaltyBox(DerivedStorage, (const __CFArray *)a3);
        goto LABEL_210;
      }
      if (CFEqual(a2, @"FBP_DisallowsExpensiveNetwork"))
      {
        *(unsigned char *)(DerivedStorage + 325) = *MEMORY[0x1E4F1CFD0] == (void)a3;
        goto LABEL_59;
      }
      if (CFEqual(a2, @"FBP_DisallowsConstrainedNetwork"))
      {
        *(unsigned char *)(DerivedStorage + 326) = *MEMORY[0x1E4F1CFD0] == (void)a3;
        goto LABEL_59;
      }
      if (CFEqual(a2, @"FBP_PrebufferReservation"))
      {
        if (!a3) {
          goto LABEL_59;
        }
        CFTypeID v71 = CFGetTypeID(a3);
        if (v71 == CFDictionaryGetTypeID())
        {
          memset(&valuePtr, 0, sizeof(valuePtr));
          CMTimeMakeFromDictionary(&valuePtr, (CFDictionaryRef)a3);
          if ((valuePtr.flags & 0x1D) == 1)
          {
            CMTime time = valuePtr;
            double Seconds = CMTimeGetSeconds(&time);
            segPumpSetExtraHoldbackFromClient((uint64_t)a1, DerivedStorage, Seconds);
          }
          goto LABEL_59;
        }
        goto LABEL_209;
      }
      if (!CFEqual(a2, @"FBP_InitialPlaylistDownloadTimeout"))
      {
        if (CFEqual(a2, @"FBP_AlternateSelectionBoss"))
        {
          int v74 = *(const void **)(DerivedStorage + 9528);
          *(void *)(DerivedStorage + 9528) = a3;
          if (a3) {
            CFRetain(a3);
          }
          if (v74) {
            CFRelease(v74);
          }
          unsigned int NextCryptKeyForAllStreams = segPumpInitAlternateSelectionBoss((uint64_t)a1, DerivedStorage);
          goto LABEL_210;
        }
        if (CFEqual(a2, @"FBP_CoalesceByteRangeMediaSegmentRequests"))
        {
          *(unsigned char *)(DerivedStorage + 8208) = *MEMORY[0x1E4F1CFD0] == (void)a3;
          goto LABEL_59;
        }
        if (CFEqual(a2, @"FBP_AllowPipelinedMediaSegmentRequests"))
        {
          *(unsigned char *)(DerivedStorage + 8209) = *MEMORY[0x1E4F1CFD0] == (void)a3;
          goto LABEL_59;
        }
        if (CFEqual(a2, @"FBP_EnableSuggestedAlternate"))
        {
          *(unsigned char *)(DerivedStorage + 8240) = *MEMORY[0x1E4F1CFD0] == (void)a3;
          goto LABEL_59;
        }
        if (CFEqual(a2, @"FBP_NetworkHistory"))
        {
          if (a3)
          {
            CFTypeID v75 = CFGetTypeID(a3);
            if (v75 == FigNetworkHistoryGetCFTypeID())
            {
              segPumpSetNetworkHistory(DerivedStorage, a3);
              goto LABEL_59;
            }
          }
          goto LABEL_209;
        }
        if (CFEqual(a2, @"FBP_EnableContentSteering"))
        {
          *(unsigned char *)(DerivedStorage + 7904) = *MEMORY[0x1E4F1CFD0] == (void)a3;
          goto LABEL_59;
        }
        if (CFEqual(a2, @"FBP_ContentSteeringMonitor"))
        {
          if (!a3 || (CFTypeID v76 = CFGetTypeID(a3), v76 == FigAlternateFilterMonitorGetTypeID()))
          {
            segPumpSetContentSteeringMonitor(DerivedStorage, a3);
            goto LABEL_59;
          }
          goto LABEL_209;
        }
        if (CFEqual(a2, @"FBP_MaxPipelinedMediaConnections"))
        {
          LODWORD(valuePtr.value) = 0;
          CFNumberGetValue((CFNumberRef)a3, kCFNumberIntType, &valuePtr);
          unsigned int NextCryptKeyForAllStreams = segPumpSetMaxPipelinedConnections(DerivedStorage, valuePtr.value);
        }
        else if (CFEqual(a2, @"FBP_ReportingAgent"))
        {
          unsigned int NextCryptKeyForAllStreams = segPumpSetRTCReportingAgent((void *)DerivedStorage, a3);
        }
        else
        {
          if (!CFEqual(a2, @"FBP_MetricEventTimeline")) {
            goto LABEL_209;
          }
          unsigned int NextCryptKeyForAllStreams = segPumpSetMetricEventTimeline((uint64_t)a1, DerivedStorage, a3);
        }
LABEL_210:
        unsigned int v21 = NextCryptKeyForAllStreams;
        goto LABEL_41;
      }
      if (!a3) {
        goto LABEL_59;
      }
      CFTypeID v73 = CFGetTypeID(a3);
      if (v73 != CFNumberGetTypeID()) {
        goto LABEL_209;
      }
      int v67 = (void *)(DerivedStorage + 8200);
      CFNumberRef v68 = (const __CFNumber *)a3;
      CFNumberType v69 = kCFNumberDoubleType;
    }
    CFNumberGetValue(v68, v69, v67);
    goto LABEL_59;
  }
  if (a3)
  {
    CFTypeID v48 = CFGetTypeID(a3);
    if (v48 != CFStringGetTypeID()) {
      goto LABEL_209;
    }
  }
  unsigned int v49 = segPumpSetHTTPRequestOptionsValue(DerivedStorage, @"FHRP_ClientBundleIdentifier", a3);
  uint64_t v50 = (uint64_t)a3;
  unsigned int v21 = v49;
  FigNetworkCostMonitorSetProperty(*(void *)(DerivedStorage + 96), 0x1EE581D18, v50);
  if (!v21)
  {
    v51 = *(const void **)(DerivedStorage + 8432);
    if (v51)
    {
      CFNumberType v52 = *(const void **)(DerivedStorage + 8440);
      if (v52)
      {
        CFRelease(v52);
        *(void *)(DerivedStorage + 8440) = 0;
        v51 = *(const void **)(DerivedStorage + 8432);
      }
      AttemptNetworkMonitorSetup((void *)DerivedStorage, v51);
    }
    goto LABEL_59;
  }
LABEL_41:
  segPumpUnlockAndSendAllPendingNotifications();
  if (v21 == -15626) {
    return 0;
  }
  else {
    return v21;
  }
}

void segPumpFreeSavedEntry(uint64_t a1, CFTypeRef *a2)
{
  v3 = *(CFTypeRef **)(a1 + 352);
  if (v3 == a2)
  {
    uint64_t v4 = (CFTypeRef *)(a1 + 352);
  }
  else
  {
    do
    {
      uint64_t v4 = v3;
      v3 = (CFTypeRef *)*v3;
    }
    while (v3 != a2);
  }
  CFTypeRef v5 = *a2;
  *uint64_t v4 = *a2;
  if (!v5) {
    *(void *)(a1 + 360) = v4;
  }
  CFRelease(a2[1]);
  CFTypeRef v6 = a2[2];
  if (v6) {
    CFRelease(v6);
  }
  CFTypeRef v7 = a2[5];
  if (v7) {
    CFRelease(v7);
  }
  free((void *)a2[6]);

  free(a2);
}

double segPumpResetConnection(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v4 = *(void *)(a2 + 16);
    if (v4)
    {
      uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v6 = v5 ? v5 : 0;
      CFTypeRef v7 = *(void (**)(uint64_t))(v6 + 24);
      if (v7) {
        v7(v4);
      }
    }
    FigHTTPStopAndReleaseTimer((dispatch_object_t *)(a2 + 96));
    uint64_t v8 = *(const void **)(a2 + 16);
    if (v8)
    {
      CFRelease(v8);
      *(void *)(a2 + 16) = 0;
    }
    int v9 = *(const void **)(a2 + 8);
    if (v9)
    {
      CFRelease(v9);
      *(void *)(a2 + 8) = 0;
    }
    uint64_t v10 = *(void *)(a2 + 88);
    if (v10)
    {
      segPumpCustomURLLoaderCancelRequest(a1, v10);
      *(void *)(a2 + 88) = 0;
    }
    if (*(void *)a2)
    {
      CFRelease(*(CFTypeRef *)a2);
      *(void *)a2 = 0;
    }
    uint64_t v11 = *(const void **)(a2 + 112);
    if (v11)
    {
      CFRelease(v11);
      *(void *)(a2 + 112) = 0;
    }
    BOOL v12 = *(const void **)(a2 + 72);
    if (v12)
    {
      CFRelease(v12);
      *(void *)(a2 + 72) = 0;
    }
    *(void *)(a2 + 120) = 0;
    *(_WORD *)(a2 + 128) = 0;
    *(void *)(a2 + 104) = 0;
    *(_DWORD *)(a2 + 80) = 0;
    double result = 0.0;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 52) = 0u;
  }
  return result;
}

void segPumpCancelMediaFileReadAndResetData(uint64_t a1, uint64_t a2, int a3, int a4)
{
  if (*(uint64_t *)(a2 + 776) >= 1)
  {
    uint64_t v8 = 0;
    do
    {
      segPumpStreamCancelReadAheadAndResetDataAtIndex(a1, a2, 0);
      ++v8;
    }
    while (v8 < *(void *)(a2 + 776));
  }
  segPumpStreamCancelPreloadReadAndResetData(a1, a2);
  segPumpStreamCancelPreloadMapReadAndResetData(a1, a2);
  int v9 = *(const void **)(a2 + 840);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(a2 + 840) = 0;
  }
  uint64_t v10 = *(uint64_t **)(a2 + 680);
  if (v10)
  {
    while (1)
    {
      uint64_t v11 = v10[9];
      int v12 = *((_DWORD *)v10 + 20);
      CFTypeID v13 = (const void *)v10[11];
      long long v28 = *(_OWORD *)(v10 + 7);
      long long v29 = *(_OWORD *)(v10 + 5);
      CFTypeRef v14 = v13 ? CFRetain(v13) : 0;
      uint64_t v15 = (const void *)v10[1];
      if (v15) {
        break;
      }
LABEL_20:
      segPumpResetMediaConnection(a1, v10, a3);
      if (a4)
      {
        *(_OWORD *)(v10 + 5) = v29;
        *(_OWORD *)(v10 + 7) = v28;
        v10[9] = v11;
        *((_DWORD *)v10 + 20) = v12;
        if (v14) {
          CFTypeRef v21 = CFRetain(v14);
        }
        else {
          CFTypeRef v21 = 0;
        }
        v10[11] = (uint64_t)v21;
      }
      if (v14) {
        CFRelease(v14);
      }
      uint64_t v10 = (uint64_t *)*v10;
      if (!v10) {
        goto LABEL_28;
      }
    }
    MediaFilePrivateData = segPumpGetMediaFilePrivateData(v15);
    BOOL v17 = (const void *)v10[1];
    if (v17)
    {
      if (FigMediaSegmentSpecifierGetType((uint64_t)v17) == 1)
      {
        int v18 = *(const void **)(a2 + 288);
        if (v18)
        {
          CFRelease(v18);
          *(void *)(a2 + 288) = 0;
          *(void *)(a2 + 320) = -1;
        }
LABEL_18:
        MediaFilePrivateData[13] = 0;
        MediaFilePrivateData[14] = 0;
        MediaFilePrivateData[15] = 0;
        uint64_t v20 = (const void *)v10[1];
        if (v20)
        {
          CFRelease(v20);
          v10[1] = 0;
        }
        goto LABEL_20;
      }
      BOOL v17 = (const void *)v10[1];
    }
    if (*((void *)segPumpGetMediaFilePrivateData(v17) + 2))
    {
      CFTypeID v19 = (CFTypeRef *)segPumpGetMediaFilePrivateData((const void *)v10[1]);
      CFRelease(v19[2]);
      *((void *)segPumpGetMediaFilePrivateData((const void *)v10[1]) + 2) = 0;
    }
    goto LABEL_18;
  }
LABEL_28:
  uint64_t v22 = *(void *)(a2 + 760);
  if (v22 >= 1) {
    bzero((void *)(a2 + 696), 8 * v22);
  }
  *(void *)(a2 + 696) = *(void *)(a2 + 680);
  uint64_t v23 = *(const void **)(a2 + 256);
  if (v23)
  {
    CFRelease(v23);
    *(void *)(a2 + 256) = 0;
  }
  uint64_t v24 = *(const void **)(a2 + 264);
  if (v24)
  {
    CFRelease(v24);
    *(void *)(a2 + 264) = 0;
  }
  CFAllocatorRef v25 = *(const void **)(a2 + 840);
  if (v25)
  {
    CFRelease(v25);
    *(void *)(a2 + 840) = 0;
  }
  unsigned int v26 = *(const void **)(a2 + 832);
  if (v26)
  {
    CFRelease(v26);
    *(void *)(a2 + 832) = 0;
  }
  *(void *)(a2 + 848) = 0;
  *(unsigned char *)(a2 + 403) = 0;
  if (!*(unsigned char *)(a2 + 870)) {
    *(unsigned char *)(a2 + 869) = 0;
  }
  *(unsigned char *)(a2 + 871) = 0;
  *(unsigned char *)(a2 + 1136) = 0;
  CFTypeRef v27 = *(const void **)(a2 + 1144);
  if (v27)
  {
    CFRelease(v27);
    *(void *)(a2 + 1144) = 0;
  }
}

void segPumpResetMediaConnection(uint64_t a1, void *a2, int a3)
{
  segPumpResetConnection(a1, (uint64_t)(a2 + 2));
  if (!a3) {
    segPumpStreamDontReuseHTTPRequest(a1, (uint64_t)a2);
  }
  a2[30] = 0;
  a2[31] = 0;
  uint64_t v6 = (const void *)a2[34];
  if (v6)
  {
    CFRelease(v6);
    a2[34] = 0;
  }
  CFTypeRef v7 = (const void *)a2[21];
  if (v7)
  {
    CFRelease(v7);
    a2[21] = 0;
  }
  a2[27] = 0;
  a2[28] = 0;
  a2[29] = 0;
  uint64_t v8 = (const void *)a2[1];
  if (v8)
  {
    CFRelease(v8);
    a2[1] = 0;
  }
  a2[37] = 0;
  a2[38] = 0;
}

void segPumpCompleteNWAlternateForStream(uint64_t a1)
{
  if (*(void *)(a1 + 1192))
  {
    nw_activity_complete_with_reason();
    v2 = *(const void **)(a1 + 1192);
    if (v2)
    {
      CFRelease(v2);
      *(void *)(a1 + 1192) = 0;
    }
  }
  if (*(void *)(a1 + 1184))
  {
    nw_activity_complete_with_reason();
    v3 = *(const void **)(a1 + 1184);
    if (v3)
    {
      CFRelease(v3);
      *(void *)(a1 + 1184) = 0;
    }
  }
}

uint64_t segPumpCustomURLLoaderCancelRequest(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 80);
  if (v2)
  {
    uint64_t VTable = CMBaseObjectGetVTable();
    uint64_t v6 = *(void *)(VTable + 16);
    double result = VTable + 16;
    uint64_t v5 = v6;
    uint64_t v7 = v6 ? v5 : 0;
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 32);
    if (v8)
    {
      return v8(v2, a2);
    }
  }
  return result;
}

void segPumpStreamCancelPreloadReadAndResetData(uint64_t a1, uint64_t a2)
{
  v3 = *(void **)(a2 + 792);
  if (v3)
  {
    if (v3[4] || v3[13])
    {
      segPumpResetMediaConnection(a1, v3, 0);
    }
    else
    {
      uint64_t v4 = (const void *)v3[34];
      if (v4)
      {
        CFRelease(v4);
        v3 = *(void **)(a2 + 792);
        v3[34] = 0;
      }
      uint64_t v5 = (const void *)v3[1];
      if (v5)
      {
        CFRelease(v5);
        *(void *)(*(void *)(a2 + 792) + 8) = 0;
      }
    }
    *(void *)(a2 + 792) = 0;
  }
}

void segPumpStreamCancelPreloadMapReadAndResetData(uint64_t a1, uint64_t a2)
{
  v3 = *(void **)(a2 + 800);
  if (v3)
  {
    if (v3[4] || v3[13])
    {
      segPumpResetMediaConnection(a1, v3, 0);
    }
    else
    {
      uint64_t v4 = (const void *)v3[34];
      if (v4)
      {
        CFRelease(v4);
        v3 = *(void **)(a2 + 800);
        v3[34] = 0;
      }
      uint64_t v5 = (const void *)v3[1];
      if (v5)
      {
        CFRelease(v5);
        *(void *)(*(void *)(a2 + 800) + 8) = 0;
      }
    }
    *(void *)(a2 + 800) = 0;
  }
}

const void *segPumpGetMediaFilePrivateData(const void *a1)
{
  Instance = CMGetAttachment(a1, @"SegPumpMediaFilePrivateData", 0);
  if (!Instance)
  {
    FigGetAllocatorForMedia();
    long long v4 = xmmword_1E57A2820;
    if (segPumpMediaFilePrivateDataGetTypeID_once != -1) {
      dispatch_once_f(&segPumpMediaFilePrivateDataGetTypeID_once, &v4, (dispatch_function_t)segPumpRegisterClassUtil);
    }
    Instance = (const void *)_CFRuntimeCreateInstance();
    if (Instance)
    {
      CMSetAttachment(a1, @"SegPumpMediaFilePrivateData", Instance, 0);
      CFRelease(Instance);
    }
    else
    {
      FigSignalErrorAt();
    }
  }
  return Instance;
}

void segPumpStreamCancelReadAheadAndResetDataAtIndex(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(void **)(*(void *)(a2 + 768) + 8 * a3);
  if (v4)
  {
    uint64_t v5 = a3;
    if (v4[4] || v4[13])
    {
      segPumpResetMediaConnection(a1, v4, 0);
    }
    else
    {
      uint64_t v8 = (const void *)v4[34];
      if (v8)
      {
        CFRelease(v8);
        uint64_t v9 = *(void *)(a2 + 768);
        *(void *)(*(void *)(v9 + 8 * v5) + 272) = 0;
        long long v4 = *(void **)(v9 + 8 * v5);
      }
      uint64_t v10 = (const void *)v4[1];
      if (v10)
      {
        CFRelease(v10);
        *(void *)(*(void *)(*(void *)(a2 + 768) + 8 * v5) + 8) = 0;
      }
    }
    uint64_t v6 = *(void *)(a2 + 776);
    if (v6 > v5)
    {
      uint64_t v7 = v6 - 1;
      if (v7 > v5)
      {
        do
        {
          *(void *)(*(void *)(a2 + 768) + 8 * v5) = *(void *)(*(void *)(a2 + 768) + 8 * v5 + 8);
          ++v5;
        }
        while (v7 != v5);
      }
      *(void *)(*(void *)(a2 + 768) + 8 * v7) = 0;
    }
  }
}

void segPumpMediaFilePrivateDataFinalize(void *a1)
{
  uint64_t v2 = (const void *)a1[16];
  if (v2)
  {
    CFRelease(v2);
    a1[16] = 0;
  }
  v3 = (const void *)a1[26];
  if (v3)
  {
    CFRelease(v3);
    a1[26] = 0;
  }
  long long v4 = (const void *)a1[27];
  if (v4)
  {
    CFRelease(v4);
    a1[27] = 0;
  }
  uint64_t v5 = (const void *)a1[2];
  if (v5)
  {
    CFRelease(v5);
    a1[2] = 0;
  }
  uint64_t v6 = (const void *)a1[3];
  if (v6)
  {
    CFRelease(v6);
    a1[3] = 0;
  }
}

CFStringRef segPumpMediaFilePrivateDataCopyDesc(uint64_t a1)
{
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  return CFStringCreateWithFormat(AllocatorForMedia, 0, @"MediaFilePrivateData: %p", a1);
}

uint64_t segPumpRegisterClassUtil(uint64_t a1)
{
  uint64_t result = _CFRuntimeRegisterClass();
  **(void **)(a1 + 8) = result;
  return result;
}

void segPumpStreamUpdateIndexExpectedArrival(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 9560) && *(unsigned char *)(a1 + 329) && *(void *)(a1 + 384) == a2)
  {
    SInt64 = (const void *)FigCFNumberCreateSInt64();
    uint64_t v4 = *(void *)(a1 + 9560);
    uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v5) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = 0;
    }
    uint64_t v7 = *(void (**)(uint64_t, __CFString *, const void *))(v6 + 56);
    if (v7) {
      v7(v4, @"AfmfpbProperty_MainPlaylistExpectedUpdateTime", SInt64);
    }
    if (SInt64)
    {
      CFRelease(SInt64);
    }
  }
}

void segPumpStreamDontReuseHTTPRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(const void **)(a2 + 160);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a2 + 160) = 0;
  }
  uint64_t v5 = *(const void **)(a2 + 152);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(a2 + 152) = 0;
  }
  uint64_t v6 = *(void *)(a2 + 32);
  if (v6)
  {
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t v9 = *(void (**)(uint64_t))(v8 + 24);
    if (v9) {
      v9(v6);
    }
    uint64_t v10 = *(const void **)(a2 + 32);
    if (v10)
    {
      CFRelease(v10);
      *(void *)(a2 + 32) = 0;
    }
  }
  uint64_t v11 = *(const void **)(a2 + 24);
  if (v11)
  {
    CFRelease(v11);
    *(void *)(a2 + 24) = 0;
  }
  int v12 = *(const void **)(a2 + 88);
  if (v12)
  {
    CFRelease(v12);
    *(void *)(a2 + 88) = 0;
  }
  *(unsigned char *)(a2 + 145) = 0;
  *(void *)(a2 + 192) = 0;
  *(_DWORD *)(a2 + 80) = 0;
  uint64_t v13 = *(void *)(a2 + 104);
  if (v13)
  {
    segPumpCustomURLLoaderCancelRequest(a1, v13);
    *(void *)(a2 + 104) = 0;
  }
}

void segPumpStreamingCacheDiskWriteErrorCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v11 = 0;
  uint64_t v9 = 0;
  CFTypeRef cf = 0;
  if (!segPumpLockAndCopyPumpFromRetainProxy(a2, &cf, &v9) && *(void *)(v9 + 296) == a4)
  {
    if (a5)
    {
      FigCFDictionaryGetInt32IfPresent();
      uint64_t v8 = v11;
    }
    else
    {
      uint64_t v8 = 0;
    }
    segPumpSendEndCallbackForAllActiveStreamsWithOSStatus(a2, v8);
  }
  segPumpUnlockAndSendAllPendingNotifications();
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t segPumpLockAndCopyPumpFromRetainProxy(uint64_t a1, void *a2, uint64_t *a3)
{
  FigRetainProxyLockMutex();
  if (FigRetainProxyIsInvalidated()) {
    return 4294954413;
  }
  if (a2 && a3)
  {
    Owner = (const void *)FigRetainProxyGetOwner();
    if (Owner)
    {
      CFTypeRef v6 = CFRetain(Owner);
      *a2 = v6;
      if (v6)
      {
        CFTypeID v7 = CFGetTypeID(v6);
        if (v7 == FigBytePumpGetTypeID())
        {
          uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
          uint64_t result = 0;
          *a3 = DerivedStorage;
          return result;
        }
      }
    }
    else
    {
      *a2 = 0;
    }
  }

  return FigSignalErrorAt();
}

void segPumpSendEndCallbackForAllActiveStreamsWithOSStatus(uint64_t a1, uint64_t a2)
{
  CFTypeRef cf = 0;
  if (a2 != -15626)
  {
    FigCreateErrorForOSStatus(a2, (CFErrorRef *)&cf);
    segPumpSendEndCallbackForAllActiveStreams(a1, (void *)cf);
    if (cf) {
      CFRelease(cf);
    }
  }
}

void segPumpUnlockAndSendAllPendingNotifications()
{
  if (FigRetainProxyIsInvalidated())
  {
    FigRetainProxyUnlockMutex();
    return;
  }
  Owner = (const void *)FigRetainProxyGetOwner();
  CFRetain(Owner);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (FigRetainProxyGetLockCount() < 2)
  {
    int v2 = *(_DWORD *)(DerivedStorage + 8960);
    uint64_t v3 = DerivedStorage + 8968;
    *(_DWORD *)(DerivedStorage + 8960) = 0;
    uint64_t v4 = *(const void **)(DerivedStorage + 8968);
    uint64_t v5 = *(const void **)(DerivedStorage + 8976);
    CFTypeRef v6 = *(const void **)(DerivedStorage + 8984);
    CFTypeID v7 = *(const void **)(DerivedStorage + 8992);
    *(_OWORD *)(DerivedStorage + 8968) = 0u;
    *(_OWORD *)(DerivedStorage + 8984) = 0u;
    uint64_t v8 = *(const void **)(DerivedStorage + 9000);
    uint64_t v9 = *(const void **)(DerivedStorage + 9008);
    *(_OWORD *)(v3 + 32) = 0u;
    FigRetainProxyUnlockMutex();
    if (!v2) {
      goto LABEL_28;
    }
    if ((v2 & 0x20) != 0) {
      goto LABEL_27;
    }
    if ((v2 & 2) != 0)
    {
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
      if ((v2 & 0x10) == 0)
      {
LABEL_10:
        if ((v2 & 0x40) == 0) {
          goto LABEL_11;
        }
        goto LABEL_21;
      }
    }
    else if ((v2 & 0x10) == 0)
    {
      goto LABEL_10;
    }
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    if ((v2 & 0x40) == 0)
    {
LABEL_11:
      if ((v2 & 1) == 0) {
        goto LABEL_12;
      }
      goto LABEL_22;
    }
LABEL_21:
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    if ((v2 & 1) == 0)
    {
LABEL_12:
      if ((v2 & 0x80) == 0) {
        goto LABEL_13;
      }
      goto LABEL_23;
    }
LABEL_22:
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    if ((v2 & 0x80) == 0)
    {
LABEL_13:
      if ((v2 & 0x100) == 0) {
        goto LABEL_14;
      }
      goto LABEL_24;
    }
LABEL_23:
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    if ((v2 & 0x100) == 0)
    {
LABEL_14:
      if ((v2 & 0x200) == 0) {
        goto LABEL_15;
      }
      goto LABEL_25;
    }
LABEL_24:
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    if ((v2 & 0x200) == 0)
    {
LABEL_15:
      if ((v2 & 0x400) == 0) {
        goto LABEL_16;
      }
      goto LABEL_26;
    }
LABEL_25:
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    if ((v2 & 0x400) == 0)
    {
LABEL_16:
      if ((v2 & 0x800) == 0) {
        goto LABEL_28;
      }
      goto LABEL_27;
    }
LABEL_26:
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    if ((v2 & 0x800) != 0)
    {
LABEL_27:
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
    }
LABEL_28:
    if (v4) {
      CFRelease(v4);
    }
    if (v5) {
      CFRelease(v5);
    }
    if (v6) {
      CFRelease(v6);
    }
    if (v7) {
      CFRelease(v7);
    }
    if (v8) {
      CFRelease(v8);
    }
    if (v9) {
      CFRelease(v9);
    }
    goto LABEL_40;
  }
  FigRetainProxyUnlockMutex();
LABEL_40:

  CFRelease(Owner);
}

uint64_t segPumpSendEndCallbackForAllActiveStreams(uint64_t a1, void *a2)
{
  CFTypeRef cf = 0;
  values = a2;
  *(void *)uint64_t v9 = 0;
  FigRetainProxyRetain();
  uint64_t v4 = segPumpLockAndCopyPumpFromRetainProxy(a1, &cf, (uint64_t *)v9);
  if (!v4
    && !segPumpSentEndCallbackForAllActiveStreams(*(void **)v9)
    && !FigCFErrorIsEqualToOSStatus((__CFError *)a2, @"CoreMediaErrorDomain", -15626))
  {
    if (a2)
    {
      uint64_t v5 = *(const void **)(*(void *)v9 + 8016);
      *(void *)(*(void *)v9 + 8016) = a2;
      CFRetain(a2);
      if (v5) {
        CFRelease(v5);
      }
      CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
      CFDictionaryRef v7 = CFDictionaryCreate(AllocatorForMedia, (const void **)&kFigBytePumpFatalErrorNotificationValue_Error, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      segPumpReadyNotification(*(void **)v9, @"FBP_FatalErrorOccurred", v7);
      if (v7) {
        CFRelease(v7);
      }
    }
    segPumpSendEndCallbackForActiveStream((uint64_t)cf, *(void *)(*(void *)v9 + 416), values);
    segPumpSendEndCallbackForActiveStream((uint64_t)cf, *(void *)(*(void *)v9 + 400), values);
    segPumpSendEndCallbackForActiveStream((uint64_t)cf, *(void *)(*(void *)v9 + 384), values);
    segPumpSendEndCallbackForActiveStream((uint64_t)cf, *(void *)(*(void *)v9 + 424), values);
    segPumpSendEndCallbackForActiveStream((uint64_t)cf, *(void *)(*(void *)v9 + 408), values);
    segPumpSendEndCallbackForActiveStream((uint64_t)cf, *(void *)(*(void *)v9 + 392), values);
  }
  segPumpUnlockAndSendAllPendingNotifications();
  if (cf) {
    CFRelease(cf);
  }
  FigRetainProxyRelease();
  return v4;
}

uint64_t segPumpSentEndCallbackForAllActiveStreams(void *a1)
{
  if (*(unsigned char *)(a1[48] + 1136) || *(unsigned char *)(a1[50] + 1136) || (unsigned __int8 v1 = *(unsigned char *)(a1[52] + 1136)) != 0)
  {
    uint64_t v2 = 0;
    unsigned __int8 v1 = 1;
    do
    {
      uint64_t v3 = a1[v2 + 48];
      if (*(void *)(v3 + 16)) {
        v1 &= *(unsigned char *)(v3 + 1136);
      }
      v2 += 2;
    }
    while (v2 != 6);
  }
  return v1;
}

void *segPumpReadyNotification(void *result, __CFString *a2, CFTypeRef cf)
{
  uint64_t v3 = result;
  if (a2 == @"FBPAL_AlternateListChanged")
  {
    int v5 = *((_DWORD *)result + 2240) | 1;
    goto LABEL_16;
  }
  if (a2 == @"FBPAL_SeekableTimeRangeChanged")
  {
    int v5 = *((_DWORD *)result + 2240) | 2;
    goto LABEL_16;
  }
  if (a2 == @"FBP_DurationChanged")
  {
    int v5 = *((_DWORD *)result + 2240) | 0x10;
    goto LABEL_16;
  }
  if (@"FBP_FatalErrorOccurred" == a2)
  {
    CFTypeRef v6 = (const void *)result[1121];
    if (v6)
    {
      CFRelease(v6);
      v3[1121] = 0;
    }
    if (cf) {
      uint64_t result = CFRetain(cf);
    }
    else {
      uint64_t result = 0;
    }
    v3[1121] = result;
    *((_DWORD *)v3 + 2240) |= 0x20u;
    *((unsigned char *)v3 + 9504) = 1;
  }
  else if (a2 == @"FBP_NewErrorLogEntry")
  {
    CFDictionaryRef v7 = (const void *)result[1124];
    if (v7)
    {
      CFRelease(v7);
      v3[1124] = 0;
    }
    *((_DWORD *)v3 + 2240) |= 0x40u;
    if (cf) {
      uint64_t result = CFRetain(cf);
    }
    else {
      uint64_t result = 0;
    }
    v3[1124] = result;
  }
  else
  {
    if (a2 != @"FBP_SuggestedAlternate")
    {
      if (a2 == @"FBP_TaggedRangeMetadataChanged")
      {
        int v5 = *((_DWORD *)result + 2240) | 0x100;
      }
      else if (a2 == @"FBP_PrefersConcurrentSwitchChanged")
      {
        int v5 = *((_DWORD *)result + 2240) | 0x200;
      }
      else
      {
        if (a2 != @"FBP_RecommendedPrebufferReservationChanged")
        {
          if (@"FBP_PlaylistUpdateNotification" == a2)
          {
            *((_DWORD *)result + 2240) |= 0x800u;
            if (cf) {
              uint64_t result = CFRetain(cf);
            }
            else {
              uint64_t result = 0;
            }
            v3[1126] = result;
          }
          return result;
        }
        int v5 = *((_DWORD *)result + 2240) | 0x400;
      }
LABEL_16:
      *((_DWORD *)result + 2240) = v5;
      return result;
    }
    *((_DWORD *)result + 2240) |= 0x80u;
    uint64_t v8 = (const void *)result[1123];
    if (v8)
    {
      CFRelease(v8);
      v3[1123] = 0;
    }
    if (cf) {
      uint64_t result = CFRetain(cf);
    }
    else {
      uint64_t result = 0;
    }
    v3[1123] = result;
  }
  return result;
}

void segPumpSendEndCallbackForActiveStream(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v7 = DerivedStorage;
  uint64_t v8 = DerivedStorage + 16 * *(void *)a2;
  uint64_t v9 = a2;
  if (*(void *)(v8 + 392) != a2) {
    uint64_t v9 = *(void *)(v8 + 384);
  }
  if (*(void *)(v9 + 16) && !*(unsigned char *)(a2 + 1136))
  {
    segPumpMakeDataCallback(a1, (uint64_t *)a2, *(const void **)(DerivedStorage + 176), 0, 2u, *(void *)(a2 + 304), MEMORY[0x1E4F1F9F8], 0, 0, (uint64_t)a3, 0, 0);
    segPumpStopStream(v7, a2, 0);
    *(unsigned char *)(a2 + 1136) = 1;
    uint64_t v10 = *(const void **)(a2 + 1144);
    *(void *)(a2 + 1144) = a3;
    if (a3) {
      CFRetain(a3);
    }
    if (v10)
    {
      CFRelease(v10);
    }
  }
}

uint64_t segPumpMakeDataCallback(uint64_t a1, uint64_t *a2, const void *a3, uint64_t a4, unsigned int a5, uint64_t a6, long long *a7, uint64_t a8, int a9, uint64_t a10, uint64_t a11, _DWORD *a12)
{
  uint64_t v20 = *(void (**)(uint64_t, const void *, uint64_t, void, void, void, void, long long *, uint64_t, int, uint64_t, uint64_t, uint64_t, int *))(CMBaseObjectGetDerivedStorage() + 160);
  uint64_t v21 = *a2;
  unsigned int v22 = *((_DWORD *)a2 + 18);
  int v28 = 0;
  if (!v20) {
    goto LABEL_9;
  }
  unsigned int v25 = v22;
  uint64_t v24 = a2[110];
  if (a3) {
    CFRetain(a3);
  }
  FigRetainProxyUnlockAll();
  long long v26 = *a7;
  uint64_t v27 = *((void *)a7 + 2);
  v20(a1, a3, a4, a5, v21, v25, 0, &v26, a8, a9, a6, a10, a11, &v28);
  if (a3) {
    CFRelease(a3);
  }
  FigRetainProxyRelock();
  if (FigRetainProxyIsInvalidated()) {
    return 4294954413;
  }
  if (v24 != a2[110]) {
    return 4294951670;
  }
LABEL_9:
  uint64_t result = 0;
  if (a12) {
    *a12 = v28;
  }
  return result;
}

uint64_t segPumpStopStream(uint64_t a1, uint64_t a2, int a3)
{
  FigRetainProxyRetain();
  ++*(void *)(a2 + 880);
  *(unsigned char *)(a2 + 860) = 0;
  CFTypeRef v6 = *(const void **)(a2 + 288);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(a2 + 288) = 0;
    *(void *)(a2 + 320) = -1;
  }
  segPumpCancelMediaFileReadAndResetData(a1, a2, a3, 0);
  if (FigRetainProxyIsInvalidated()
    || (segPumpSetStreamDiscontinuityDomain(a1, (void *)a2, 0),
        int v7 = *(unsigned __int8 *)(a2 + 537),
        segPumpResetConnection(a1, a2 + 408),
        *(unsigned char *)(a2 + 859) = 0,
        segPumpStreamUpdateIndexExpectedArrival(a1, a2),
        FigRetainProxyIsInvalidated()))
  {
    uint64_t v12 = 4294954511;
  }
  else
  {
    *(unsigned char *)(a2 + 400) = 0;
    FigHTTPStopAndReleaseTimer((dispatch_object_t *)(a2 + 392));
    if (!a3 || v7)
    {
      uint64_t v8 = *(const void **)(a2 + 280);
      if (v8)
      {
        CFRelease(v8);
        *(void *)(a2 + 280) = 0;
      }
      uint64_t v9 = *(const void **)(a2 + 272);
      if (v9)
      {
        CFRelease(v9);
        *(void *)(a2 + 272) = 0;
      }
      for (uint64_t i = *(void **)(a2 + 680); i; uint64_t i = (void *)*i)
        segPumpStreamDontReuseHTTPRequest(a1, (uint64_t)i);
    }
    unsigned int v11 = *(const void **)(a2 + 56);
    if (v11)
    {
      CFRelease(v11);
      *(void *)(a2 + 56) = 0;
    }
    segPumpCompleteNWAlternateForStream(a2);
    uint64_t v12 = 0;
    *(_DWORD *)(a2 + 1200) = 0;
  }
  FigRetainProxyRelease();
  return v12;
}

uint64_t segPumpSetStreamDiscontinuityDomain(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[38];
  if (a3)
  {
    uint64_t v6 = a2[39];
    a2[38] = FigMediaSegmentSpecifierGetDiscontinuityDomain(a3) + v6;
    uint64_t result = FigMediaSegmentSpecifierGetMediaSequence(a3);
    uint64_t v8 = a2[38];
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t result = 0;
    a2[38] = 0;
  }
  a2[41] = result;
  if (v4 != v8 && dword_1E9351350 != 0)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return result;
}

void segPumpStreamDisposeStorage(void *a1)
{
  segPumpFreeDiscoQueue((uint64_t)(a1 + 42));
  uint64_t v2 = (const void *)a1[35];
  if (v2)
  {
    CFRelease(v2);
    a1[35] = 0;
  }
  uint64_t v3 = (const void *)a1[34];
  if (v3)
  {
    CFRelease(v3);
    a1[34] = 0;
  }
  uint64_t v4 = (const void *)a1[29];
  if (v4)
  {
    CFRelease(v4);
    a1[29] = 0;
  }
  int v5 = (const void *)a1[30];
  if (v5)
  {
    CFRelease(v5);
    a1[30] = 0;
  }

  segPumpStreamUpdateIndexFile(a1, 0, 0, 0, 0, 0);
}

void segPumpDestroyMediaConnection(uint64_t a1, void *a2, dispatch_object_t *a3)
{
  --a2[93];
  uint64_t v4 = (dispatch_object_t *)a2[85];
  if (v4 == a3)
  {
    int v5 = (dispatch_object_t *)(a2 + 85);
  }
  else
  {
    do
    {
      int v5 = v4;
      uint64_t v4 = (dispatch_object_t *)*v4;
    }
    while (v4 != a3);
  }
  dispatch_object_t v6 = *a3;
  *int v5 = *a3;
  if (!v6) {
    a2[86] = v5;
  }
  segPumpResetMediaConnection(a1, a3, 0);
  FigHTTPStopAndReleaseTimer(a3 + 14);
  dispatch_object_t v7 = a3[2];
  if (v7)
  {
    CFRelease(v7);
    a3[2] = 0;
  }
  dispatch_object_t v8 = a3[21];
  if (v8)
  {
    CFRelease(v8);
    a3[21] = 0;
  }
  dispatch_object_t v9 = a3[22];
  if (v9)
  {
    CFRelease(v9);
    a3[22] = 0;
  }
  dispatch_object_t v10 = a3[3];
  if (v10)
  {
    CFRelease(v10);
    a3[3] = 0;
  }
  dispatch_object_t v11 = a3[4];
  if (v11)
  {
    CFRelease(v11);
    a3[4] = 0;
  }
  dispatch_object_t v12 = a3[11];
  if (v12)
  {
    CFRelease(v12);
    a3[11] = 0;
  }
  dispatch_object_t v13 = a3[19];
  if (v13)
  {
    CFRelease(v13);
    a3[19] = 0;
  }
  dispatch_object_t v14 = a3[20];
  if (v14) {
    CFRelease(v14);
  }

  free(a3);
}

uint64_t *AlternateQueueFree(uint64_t a1)
{
  uint64_t result = *(uint64_t **)a1;
  if (result)
  {
    do
    {
      uint64_t v3 = *result;
      *(void *)a1 = *result;
      if (!v3) {
        *(void *)(a1 + 8) = a1;
      }
      AlternateEntryFree(result);
      uint64_t result = *(uint64_t **)a1;
    }
    while (*(void *)a1);
  }
  return result;
}

uint64_t segPumpUpdateCurrentAlternate(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8144) = a2;
  uint64_t result = segPumpUpdateBytesRequiredForNetworkPrediction(a1);
  uint64_t v4 = *(void *)(a1 + 8144);
  uint64_t v5 = *(void *)(a1 + 9048);
  if (v4)
  {
    uint64_t result = FigAlternateGetAlternateIndex(*(void *)(v4 + 8));
    if (v5)
    {
      int v6 = result;
      uint64_t VTable = CMBaseObjectGetVTable();
      uint64_t v9 = *(void *)(VTable + 16);
      uint64_t result = VTable + 16;
      uint64_t v8 = v9;
      uint64_t v10 = v9 ? v8 : 0;
      uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, void))(v10 + 56);
      if (v15)
      {
        return v15(v5, 0x1EE582B98, 0x1EE5611D8, v6, 0);
      }
    }
  }
  else if (v5)
  {
    uint64_t v11 = CMBaseObjectGetVTable();
    uint64_t v13 = *(void *)(v11 + 16);
    uint64_t result = v11 + 16;
    uint64_t v12 = v13;
    uint64_t v14 = v13 ? v12 : 0;
    uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 64);
    if (v16)
    {
      return v16(v5, 0x1EE582B98, 0x1EE5611D8);
    }
  }
  return result;
}

uint64_t *segPumpFreeDiscoQueue(uint64_t a1)
{
  uint64_t result = *(uint64_t **)a1;
  if (result)
  {
    do
    {
      uint64_t v3 = *result;
      uint64_t v4 = (void *)result[1];
      if (*result)
      {
        *(void *)(v3 + 8) = v4;
        uint64_t v4 = (void *)result[1];
      }
      else
      {
        *(void *)(a1 + 8) = v4;
      }
      *uint64_t v4 = v3;
      free(result);
      uint64_t result = *(uint64_t **)a1;
    }
    while (*(void *)a1);
  }
  return result;
}

void segPumpStreamUpdateIndexFile(void *a1, CFTypeRef cf, CFTypeRef a3, CFTypeRef a4, CFTypeRef a5, CFTypeRef a6)
{
  uint64_t v11 = (const void *)a1[2];
  a1[2] = cf;
  if (cf) {
    CFRetain(cf);
  }
  if (v11) {
    CFRelease(v11);
  }
  uint64_t v12 = (const void *)a1[1];
  a1[1] = a3;
  if (a3) {
    CFRetain(a3);
  }
  if (v12) {
    CFRelease(v12);
  }
  uint64_t v13 = (const void *)a1[3];
  a1[3] = a4;
  if (a4) {
    CFRetain(a4);
  }
  if (v13) {
    CFRelease(v13);
  }
  uint64_t v14 = (const void *)a1[4];
  a1[4] = a5;
  if (a5) {
    CFRetain(a5);
  }
  if (v14) {
    CFRelease(v14);
  }
  uint64_t v15 = (const void *)a1[5];
  a1[5] = a6;
  if (a6) {
    CFRetain(a6);
  }
  if (v15)
  {
    CFRelease(v15);
  }
}

void AlternateEntryFree(void *a1)
{
  if (a1)
  {
    uint64_t v2 = (const void *)a1[1];
    if (v2) {
      CFRelease(v2);
    }
  }

  free(a1);
}

uint64_t segPumpUpdateBytesRequiredForNetworkPrediction(uint64_t a1)
{
  theArray[16] = *(CFArrayRef *)MEMORY[0x1E4F143B8];
  CFTypeRef v61 = 0;
  *(void *)uint64_t v62 = 0;
  CFTypeRef v59 = 0;
  CFTypeRef v60 = 0;
  CFTypeRef v57 = 0;
  CFTypeRef v58 = 0;
  CFTypeRef v55 = 0;
  CFTypeRef v56 = 0;
  CFTypeRef cf = 0;
  int v2 = FigRCLGetNumberWithDefault(*(const __CFDictionary **)(a1 + 9128), @"minRequiredBytesForNetworkHistory");
  uint64_t v3 = v2;
  uint64_t valuePtr = v2;
  theArray[0] = 0;
  uint64_t v4 = *(void *)(a1 + 9560);
  if (v4)
  {
    uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v7 = v6 ? v6 : 0;
    uint64_t v8 = *(void (**)(uint64_t, __CFString *, uint64_t, CFArrayRef *))(v7 + 48);
    if (v8)
    {
      v8(v4, @"AfmfpbProperty_CandidateAlternatesForAdaptiveBitrateSwitching", AllocatorForMedia, theArray);
      if (theArray[0])
      {
        CFIndex Count = CFArrayGetCount(theArray[0]);
        uint64_t v10 = theArray[0];
        if (Count) {
          goto LABEL_13;
        }
        if (theArray[0])
        {
          CFRelease(theArray[0]);
          theArray[0] = 0;
        }
      }
    }
  }
  CFAllocatorRef v11 = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFMutableArrayRef Mutable = CFArrayCreateMutable(v11, 0, MEMORY[0x1E4F1D510]);
  if (!Mutable)
  {
    uint64_t v40 = FigSignalErrorAt();
    if (theArray[0]) {
      CFRelease(theArray[0]);
    }
    if (v40)
    {
      uint64_t v10 = 0;
      goto LABEL_59;
    }
    goto LABEL_57;
  }
  uint64_t v10 = Mutable;
  uint64_t v13 = *(uint64_t ***)(a1 + 8096);
  if (!v13) {
    goto LABEL_14;
  }
  do
  {
    CFArrayAppendValue(v10, v13[1]);
    uint64_t v13 = (uint64_t **)*v13;
  }
  while (v13);
LABEL_13:
  if (!v10)
  {
LABEL_57:
    uint64_t v10 = 0;
    goto LABEL_58;
  }
LABEL_14:
  if (CFArrayGetCount(v10) < 1)
  {
LABEL_58:
    uint64_t v40 = 0;
    goto LABEL_59;
  }
  BOOL HasOnlyAudioOnly = FigAlternateSelectionUtility_AlternateListHasOnlyAudioOnly(v10);
  uint64_t v15 = *(void *)(a1 + 16 * *(void *)(a1 + 8416) + 384);
  uint64_t v16 = FigGetAllocatorForMedia();
  uint64_t inserted = FigAlternateFilterTreeCreate(v16, &cf);
  if (inserted) {
    goto LABEL_52;
  }
  uint64_t v18 = *(void *)(a1 + 8144);
  if (!v18 || FigAlternateIs4k(*(void *)(v18 + 8)) || HasOnlyAudioOnly)
  {
    uint64_t v19 = FigGetAllocatorForMedia();
    uint64_t inserted = FigAlternateHighestPeakBitRateFilterCreate(v19, &v57);
    if (!inserted)
    {
      CFTypeRef v20 = cf;
      CFTypeRef v21 = v57;
      int v22 = 600;
      goto LABEL_33;
    }
LABEL_52:
    uint64_t v40 = inserted;
    goto LABEL_59;
  }
  if (*(unsigned char *)(a1 + 8002)
    && *(double *)(v15 + 96) - *(double *)(v15 + 904) < (double)(3 * *(_DWORD *)(a1 + 8)))
  {
    CFAllocatorRef v23 = (const __CFAllocator *)FigGetAllocatorForMedia();
    uint64_t inserted = FigAlternateNextHighestPeakBitRateFilterCreate(v23, *(void *)(*(void *)(a1 + 8144) + 8), &v55, 1.1);
    if (inserted) {
      goto LABEL_52;
    }
    CFTypeRef v20 = cf;
    CFTypeRef v21 = v55;
    int v22 = 500;
  }
  else
  {
    BOOL HasHDVideoResolution = FigAlternateHasHDVideoResolution(*(void *)(*(void *)(a1 + 8144) + 8));
    uint64_t v25 = FigGetAllocatorForMedia();
    uint64_t inserted = FigAlternateLowestPeakBitRateFilterCreate(v25, &v59);
    if (inserted) {
      goto LABEL_52;
    }
    double v26 = dbl_1949989A0[!HasHDVideoResolution];
    double v27 = HasHDVideoResolution ? 4800.0 : 2560.0;
    CFAllocatorRef v28 = (const __CFAllocator *)FigGetAllocatorForMedia();
    uint64_t inserted = FigAlternateResolutionClosestHeightFilterCreate(v28, &v60, v27, v26);
    if (inserted) {
      goto LABEL_52;
    }
    uint64_t v29 = FigGetAllocatorForMedia();
    uint64_t inserted = FigAlternateContinuousFramesOnlyFilterCreate(v29, &v58);
    if (inserted) {
      goto LABEL_52;
    }
    uint64_t inserted = FigAlternateFilterTreeInsertLeaf((uint64_t)cf, v58, 400);
    if (inserted) {
      goto LABEL_52;
    }
    uint64_t inserted = FigAlternateFilterTreeInsertLeaf((uint64_t)cf, v60, 300);
    if (inserted) {
      goto LABEL_52;
    }
    CFTypeRef v20 = cf;
    CFTypeRef v21 = v59;
    int v22 = 200;
  }
LABEL_33:
  uint64_t inserted = FigAlternateFilterTreeInsertLeaf((uint64_t)v20, v21, v22);
  if (inserted) {
    goto LABEL_52;
  }
  uint64_t v30 = FigGetAllocatorForMedia();
  uint64_t inserted = FigAlternateLowestIndexAlternateFilterCreate(v30, &v56);
  if (inserted) {
    goto LABEL_52;
  }
  uint64_t inserted = FigAlternateFilterTreeInsertLeaf((uint64_t)cf, v56, 100);
  if (inserted) {
    goto LABEL_52;
  }
  uint64_t inserted = FigAlternateFilterTreeCreateFilter(cf, @"FigNetworkHistoryTree", -1, &v61);
  if (inserted) {
    goto LABEL_52;
  }
  CFTypeRef v31 = v61;
  uint64_t v32 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v32) {
    uint64_t v33 = v32;
  }
  else {
    uint64_t v33 = 0;
  }
  uint64_t v34 = *(uint64_t (**)(CFTypeRef, __CFArray *, unsigned char *))(v33 + 24);
  if (!v34)
  {
    uint64_t v40 = 4294954514;
    goto LABEL_59;
  }
  uint64_t inserted = v34(v31, v10, v62);
  if (inserted) {
    goto LABEL_52;
  }
  if (!*(void *)v62 || CFArrayGetCount(*(CFArrayRef *)v62) != 1)
  {
    uint64_t inserted = FigSignalErrorAt();
    goto LABEL_52;
  }
  ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)v62, 0);
  uint64_t v36 = (uint64_t)ValueAtIndex;
  if (*(void *)(a1 + 8144))
  {
    int PeakBitRate = FigAlternateGetPeakBitRate((uint64_t)ValueAtIndex);
    if (PeakBitRate <= (int)FigAlternateGetPeakBitRate(*(void *)(*(void *)(a1 + 8144) + 8))) {
      uint64_t v36 = *(void *)(*(void *)(a1 + 8144) + 8);
    }
  }
  int v38 = FigRCLGetNumberWithDefault(*(const __CFDictionary **)(a1 + 9128), @"minContentMillisecondsBeforePredicting");
  int v39 = FigAlternateGetPeakBitRate(v36);
  uint64_t v40 = 0;
  uint64_t v41 = v39 * (uint64_t)v38 / 8000;
  if (v41 <= v3) {
    uint64_t v41 = v3;
  }
  uint64_t valuePtr = v41;
LABEL_59:
  if (cf) {
    CFRelease(cf);
  }
  if (v10) {
    CFRelease(v10);
  }
  if (v61) {
    CFRelease(v61);
  }
  if (v58) {
    CFRelease(v58);
  }
  if (*(void *)v62) {
    CFRelease(*(CFTypeRef *)v62);
  }
  if (v60) {
    CFRelease(v60);
  }
  if (v59) {
    CFRelease(v59);
  }
  if (v57) {
    CFRelease(v57);
  }
  if (v56) {
    CFRelease(v56);
  }
  if (v55) {
    CFRelease(v55);
  }
  if (!v40)
  {
    if (dword_1E9351350)
    {
      LODWORD(v61) = 0;
      LOBYTE(v60) = 0;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v43 = v61;
      if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, (os_log_type_t)v60)) {
        unsigned int v44 = v43;
      }
      else {
        unsigned int v44 = v43 & 0xFFFFFFFE;
      }
      if (v44)
      {
        CFTypeID v45 = &stru_1EE53F4B8;
        if (a1 && *(void *)(a1 + 8760)) {
          CFTypeID v45 = *(__CFString **)(a1 + 8760);
        }
        *(_DWORD *)uint64_t v62 = 136315650;
        *(void *)&v62[4] = "segPumpUpdateBytesRequiredForNetworkPrediction";
        __int16 v63 = 2114;
        uint64_t v64 = v45;
        __int16 v65 = 2048;
        uint64_t v66 = valuePtr;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    *(void *)(a1 + 9280) = valuePtr;
    CFNumberRef v46 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt64Type, &valuePtr);
    if (v46)
    {
      CFNumberRef v47 = v46;
      uint64_t v48 = *(void *)(a1 + 9560);
      if (v48)
      {
        uint64_t v49 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v49) {
          uint64_t v50 = v49;
        }
        else {
          uint64_t v50 = 0;
        }
        v51 = *(uint64_t (**)(uint64_t, __CFString *, CFNumberRef))(v50 + 56);
        if (v51) {
          uint64_t v40 = v51(v48, @"AfmfpbProperty_BytesRequiredForNetworkPrediction", v47);
        }
        else {
          uint64_t v40 = 4294954514;
        }
      }
      else
      {
        uint64_t v40 = 0;
      }
      CFRelease(v47);
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return v40;
}

double segPumpGetMinTime(void *a1)
{
  uint64_t v2 = a1[1052];
  double v3 = *(double *)(a1[2 * v2 + 48] + 88);
  if (v2 == 1
    && (uint64_t v4 = *(void *)(a1[48] + 56)) != 0
    && (CFArrayRef MediaSegmentSpecifiers = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(v4)) != 0
    && CFArrayGetCount(MediaSegmentSpecifiers) >= 1
    && (uint64_t v6 = a1[48], *(void *)(v6 + 16))
    || !a1[1052]
    && (uint64_t v8 = *(void *)(a1[50] + 56)) != 0
    && (CFArrayRef v9 = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(v8)) != 0
    && CFArrayGetCount(v9) >= 1
    && (uint64_t v6 = a1[50], *(void *)(v6 + 16)))
  {
    if (v3 <= *(double *)(v6 + 88)) {
      return *(double *)(v6 + 88);
    }
  }
  return v3;
}

double segPumpGetMaxTime(void *a1)
{
  uint64_t v1 = a1[1052];
  uint64_t v2 = a1[2 * v1 + 48];
  double result = -1.0;
  if (*(void *)(v2 + 16))
  {
    double v4 = *(double *)(v2 + 96);
    if (v4 > 0.0) {
      double result = v4 + *(double *)(v2 + 88);
    }
  }
  if (v1)
  {
    if (v1 != 1)
    {
LABEL_11:
      double v7 = result;
      goto LABEL_12;
    }
    uint64_t v5 = a1[48];
  }
  else
  {
    uint64_t v5 = a1[50];
  }
  if (!*(void *)(v5 + 16)) {
    goto LABEL_11;
  }
  double v6 = *(double *)(v5 + 96);
  if (v6 <= 0.0) {
    goto LABEL_11;
  }
  double v7 = v6 + *(double *)(v5 + 88);
  if (v7 < 0.0) {
    goto LABEL_11;
  }
  if (result < 0.0) {
    double result = v7;
  }
LABEL_12:
  if (result >= v7) {
    double result = v7;
  }
  if (result < 0.0) {
    return 0.0;
  }
  return result;
}

uint64_t segPumpCopyCachedTimeRanges(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  values = 0;
  CFArrayRef v54 = 0;
  if (*(void *)(a1 + 296))
  {
    uint64_t v3 = a1;
    CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    CFArrayRef Mutable = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D510]);
    if (Mutable)
    {
      v42 = a2;
      int v6 = 0;
      uint64_t v7 = 0;
      uint64_t v8 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
      uint64_t v43 = v3;
      do
      {
        uint64_t v9 = *(void *)(v3 + 16 * v7 + 384);
        if (*(void *)(v9 + 16))
        {
          LOBYTE(range.start.value) = 0;
          uint64_t v10 = *(void *)(v9 + 64);
          if (v10)
          {
            int IsEqualToOSStatus = FigCFErrorIsEqualToOSStatus(*(__CFError **)(v9 + 1144), @"CoreMediaErrorDomain", -15642);
            LODWORD(v10) = IsEqualToOSStatus == 0;
            if (!IsEqualToOSStatus && v6 != 0)
            {
              if (*(void *)v9 != *(void *)(v3 + 8416)) {
                FigStreamingCacheMediaStreamIsComplete(*(void *)(v3 + 296), *(void *)(v9 + 64), &range);
              }
              LODWORD(v10) = 1;
            }
          }
          if (LOBYTE(range.start.value)) {
            LODWORD(v10) = 0;
          }
          if (*(void *)v9 == *(void *)(v3 + 8416)) {
            int v6 = v10;
          }
          if (v10 == 1)
          {
            uint64_t v13 = *(void *)(v9 + 64);
            if (v13)
            {
              uint64_t v14 = FigStreamingCacheMediaStreamCopyCachedTimeRanges(*(void *)(v3 + 296), v13, (CFTypeRef *)&v54);
              if (v14) {
                goto LABEL_65;
              }
            }
            if (!v54 || !CFArrayGetCount(v54))
            {
              CFAllocatorRef v15 = (const __CFAllocator *)FigGetAllocatorForMedia();
              long long v16 = *(_OWORD *)(MEMORY[0x1E4F1FA30] + 16);
              *(_OWORD *)&range.start.CMTimeValue value = *MEMORY[0x1E4F1FA30];
              *(_OWORD *)&range.start.CMTimeEpoch epoch = v16;
              *(_OWORD *)&range.duration.CMTimeScale timescale = *(_OWORD *)(MEMORY[0x1E4F1FA30] + 32);
              values = CMTimeRangeCopyAsDictionary(&range, v15);
              if (!values) {
                goto LABEL_64;
              }
              CFAllocatorRef v17 = (const __CFAllocator *)FigGetAllocatorForMedia();
              CFArrayRef v54 = CFArrayCreate(v17, (const void **)&values, 1, v8);
              if (values)
              {
                CFRelease(values);
                values = 0;
              }
            }
            if (CFArrayGetCount(Mutable))
            {
              CFAllocatorRef v18 = (const __CFAllocator *)FigGetAllocatorForMedia();
              CFMutableArrayRef v19 = CFArrayCreateMutable(v18, 0, v8);
              if (!v19) {
                goto LABEL_64;
              }
              theArray = v19;
              int v44 = v6;
              if (CFArrayGetCount(v54) >= 1)
              {
                CFIndex v20 = 0;
                CFIndex v21 = 0;
                while (v20 < CFArrayGetCount(Mutable))
                {
                  memset(&v51, 0, sizeof(v51));
                  CMTimeScale timescale = 0;
                  CMTimeValue value = 0;
                  values = (void *)CFArrayGetValueAtIndex(v54, v21);
                  CMTimeRangeMakeFromDictionary(&range, (CFDictionaryRef)values);
                  CFArrayRef v22 = Mutable;
                  values = (void *)CFArrayGetValueAtIndex(Mutable, v20);
                  CMTimeRangeMakeFromDictionary(&v51, (CFDictionaryRef)values);
                  CMTimeRange v49 = range;
                  CMTimeRange otherRange = v51;
                  CMTimeRangeGetIntersection(&v50, &v49, &otherRange);
                  CMTimeValue value = v50.start.value;
                  CMTimeFlags flags = v50.start.flags;
                  CMTimeScale timescale = v50.start.timescale;
                  CMTimeEpoch epoch = v50.start.epoch;
                  CMTimeValue v25 = v50.duration.value;
                  CMTimeScale v27 = v50.duration.timescale;
                  CMTimeFlags v26 = v50.duration.flags;
                  CMTimeEpoch v28 = v50.duration.epoch;
                  if ((v50.start.flags & 1) == 0
                    || (v50.duration.flags & 1) == 0
                    || v50.duration.epoch
                    || v50.duration.value < 0
                    || (v50.start.CMTimeValue value = v50.duration.value,
                        v50.start.CMTimeScale timescale = v50.duration.timescale,
                        v50.start.CMTimeFlags flags = v50.duration.flags,
                        v50.start.CMTimeEpoch epoch = 0,
                        *(_OWORD *)&v49.start.CMTimeValue value = *MEMORY[0x1E4F1FA48],
                        v49.start.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1FA48] + 16),
                        CMTimeCompare(&v50.start, &v49.start)))
                  {
                    CFAllocatorRef v29 = (const __CFAllocator *)FigGetAllocatorForMedia();
                    v50.start.CMTimeValue value = value;
                    v50.start.CMTimeScale timescale = timescale;
                    v50.start.CMTimeFlags flags = flags;
                    v50.start.CMTimeEpoch epoch = epoch;
                    v50.duration.CMTimeValue value = v25;
                    v50.duration.CMTimeScale timescale = v27;
                    v50.duration.CMTimeFlags flags = v26;
                    v50.duration.CMTimeEpoch epoch = v28;
                    CFDictionaryRef v30 = CMTimeRangeCopyAsDictionary(&v50, v29);
                    values = v30;
                    if (!v30)
                    {
                      uint64_t v40 = FigSignalErrorAt();
                      CFArrayRef Mutable = v22;
                      uint64_t v32 = theArray;
                      goto LABEL_63;
                    }
                    CFArrayAppendValue(theArray, v30);
                    if (values)
                    {
                      CFRelease(values);
                      values = 0;
                    }
                  }
                  CMTimeRange v50 = range;
                  CMTimeRangeGetEnd(&time1, &v50);
                  CMTimeRange v50 = v51;
                  CMTimeRangeGetEnd(&time2, &v50);
                  int32_t v31 = CMTimeCompare(&time1, &time2);
                  v21 += v31 >> 31;
                  v20 += v31 >= 0;
                  CFArrayRef Mutable = v22;
                  if (v21 >= CFArrayGetCount(v54)) {
                    break;
                  }
                }
              }
              uint64_t v32 = theArray;
              uint64_t v3 = v43;
              int v6 = v44;
              if (!CFArrayGetCount(theArray))
              {
                CFAllocatorRef v33 = (const __CFAllocator *)FigGetAllocatorForMedia();
                long long v34 = *(_OWORD *)(MEMORY[0x1E4F1FA30] + 16);
                *(_OWORD *)&range.start.CMTimeValue value = *MEMORY[0x1E4F1FA30];
                *(_OWORD *)&range.start.CMTimeEpoch epoch = v34;
                *(_OWORD *)&range.duration.CMTimeScale timescale = *(_OWORD *)(MEMORY[0x1E4F1FA30] + 32);
                CFDictionaryRef v35 = CMTimeRangeCopyAsDictionary(&range, v33);
                values = v35;
                if (!v35)
                {
                  uint64_t v40 = FigSignalErrorAt();
LABEL_63:
                  CFRelease(v32);
                  goto LABEL_57;
                }
                CFArrayAppendValue(theArray, v35);
                if (values)
                {
                  CFRelease(values);
                  values = 0;
                }
              }
              CFRetain(theArray);
              CFRelease(Mutable);
              CFRelease(theArray);
              uint64_t v8 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
            }
            else
            {
              CFArrayRef v36 = v54;
              v58.length = CFArrayGetCount(v54);
              v58.location = 0;
              CFArrayAppendArray(Mutable, v36, v58);
              uint64_t v32 = Mutable;
            }
            if (v54)
            {
              CFRelease(v54);
              CFArrayRef v54 = 0;
            }
            CFArrayRef Mutable = v32;
          }
        }
        else if (*(void *)v9 == *(void *)(v3 + 8416))
        {
          int v6 = 0;
        }
        ++v7;
      }
      while (v7 != 3);
      if (!CFArrayGetCount(Mutable))
      {
        CFAllocatorRef v37 = (const __CFAllocator *)FigGetAllocatorForMedia();
        long long v38 = *(_OWORD *)(MEMORY[0x1E4F1FA30] + 16);
        *(_OWORD *)&range.start.CMTimeValue value = *MEMORY[0x1E4F1FA30];
        *(_OWORD *)&range.start.CMTimeEpoch epoch = v38;
        *(_OWORD *)&range.duration.CMTimeScale timescale = *(_OWORD *)(MEMORY[0x1E4F1FA30] + 32);
        CFDictionaryRef v39 = CMTimeRangeCopyAsDictionary(&range, v37);
        values = v39;
        if (!v39) {
          goto LABEL_64;
        }
        CFArrayAppendValue(Mutable, v39);
        if (values)
        {
          CFRelease(values);
          values = 0;
        }
      }
      uint64_t v40 = 0;
      CFTypeRef *v42 = CFRetain(Mutable);
    }
    else
    {
LABEL_64:
      uint64_t v14 = FigSignalErrorAt();
LABEL_65:
      uint64_t v40 = v14;
    }
  }
  else
  {
    CFArrayRef Mutable = 0;
    *a2 = 0;
    uint64_t v40 = 4294954513;
  }
LABEL_57:
  if (v54) {
    CFRelease(v54);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v40;
}

uint64_t segPumpGetObservedNetworkStats(uint64_t a1, uint64_t a2, uint64_t a3)
{
  memset(&v12[8], 0, 216);
  segPumpMakeNetworkPredictionInput(a1, (uint64_t)v12);
  uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  *(void *)&v12[16] = UpTimeNanoseconds - a2;
  *(void *)uint64_t v12 = 0;
  *(void *)&v12[168] = 9;
  uint64_t v7 = *(void *)(a1 + 96);
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(v9 + 8);
  if (v10)
  {
    v13[10] = *(_OWORD *)&v12[160];
    v13[11] = *(_OWORD *)&v12[176];
    v13[12] = *(_OWORD *)&v12[192];
    v13[13] = *(_OWORD *)&v12[208];
    v13[6] = *(_OWORD *)&v12[96];
    v13[7] = *(_OWORD *)&v12[112];
    v13[8] = *(_OWORD *)&v12[128];
    v13[9] = *(_OWORD *)&v12[144];
    v13[2] = *(_OWORD *)&v12[32];
    v13[3] = *(_OWORD *)&v12[48];
    v13[4] = *(_OWORD *)&v12[64];
    v13[5] = *(_OWORD *)&v12[80];
    v13[0] = *(_OWORD *)v12;
    v13[1] = *(_OWORD *)&v12[16];
    LODWORD(result) = v10(v7, UpTimeNanoseconds, v13, a3);
  }
  else
  {
    LODWORD(result) = -12782;
  }
  if (result >> 1 == 2147474779) {
    return 0;
  }
  else {
    return result;
  }
}

uint64_t segPumpGetAverageEstimatedMediaBitrate(uint64_t a1, int a2, _DWORD *a3, double *a4)
{
  uint64_t v4 = 0;
  int v5 = 0;
  double v6 = 0.0;
  while (!*(void *)(*(void *)(a1 + v4 + 384) + 16))
  {
LABEL_11:
    v4 += 16;
    if (v4 == 48)
    {
      *a3 = v5;
      *a4 = v6;
      return 1;
    }
  }
  if (!a2 || (uint64_t v7 = *(void *)(a1 + v4 + 392)) == 0) {
    uint64_t v7 = *(void *)(a1 + v4 + 384);
  }
  int v8 = *(_DWORD *)(v7 + 1080);
  if (v8)
  {
    v5 += v8;
    if (v6 == 0.0)
    {
      double v6 = *(double *)(v7 + 1088);
    }
    else if (v6 >= *(double *)(v7 + 1088))
    {
      double v6 = *(double *)(v7 + 1088);
    }
    goto LABEL_11;
  }
  return 0;
}

uint64_t segPumpGetSafeNetworkBandwidth(uint64_t a1, double *a2, int a3, int a4)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t v30 = 0;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v25 = 0u;
  segPumpMakeNetworkPrediction(a1, (uint64_t)&v25);
  uint64_t v9 = v8;
  double v10 = 0.0;
  if (!v8)
  {
    double v10 = *((double *)&v26 + 1) * (double)(uint64_t)v25;
    if (v10 != 0.0)
    {
      uint64_t v9 = 0;
      if (!a2) {
        return v9;
      }
      goto LABEL_29;
    }
  }
  if (!(a4 | a3) || *(unsigned char *)(a1 + 8712)) {
    goto LABEL_28;
  }
  if (!segPumpSentEndCallbackForAllActiveStreams((void *)a1))
  {
    uint64_t v11 = 0;
    int v12 = 1;
    do
    {
      uint64_t v13 = *(void *)(a1 + 384 + v11);
      if (*(void *)(v13 + 16)) {
        int v12 = (*(unsigned char *)(v13 + 869) & v12);
      }
      v11 += 16;
    }
    while (v11 != 48);
    if (!(v12 | a4)) {
      goto LABEL_28;
    }
  }
  CFNumberRef number = 0;
  uint64_t v14 = *(void *)(a1 + 9560);
  if (!v14
    || ((AllocatorForMedia = FigGetAllocatorForMedia(), (uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 8)) == 0)
      ? (uint64_t v17 = 0)
      : (uint64_t v17 = v16),
        (CFAllocatorRef v18 = *(void (**)(uint64_t, __CFString *, uint64_t, CFNumberRef *))(v17 + 48)) == 0
     || (v18(v14, @"AfmfpbProperty_PredictedBitrate", AllocatorForMedia, &number), !number)))
  {
    double v10 = 0.0;
LABEL_28:
    if (!a2) {
      return v9;
    }
LABEL_29:
    *a2 = v10;
    return v9;
  }
  uint64_t valuePtr = 0;
  CFNumberGetValue(number, kCFNumberSInt64Type, &valuePtr);
  uint64_t v19 = valuePtr;
  if (dword_1E9351350)
  {
    unsigned int v32 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v21 = v32;
    if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type)) {
      unsigned int v22 = v21;
    }
    else {
      unsigned int v22 = v21 & 0xFFFFFFFE;
    }
    if (v22)
    {
      CFAllocatorRef v23 = *(__CFString **)(a1 + 8760);
      if (!v23) {
        CFAllocatorRef v23 = &stru_1EE53F4B8;
      }
      int v35 = 136315650;
      CFArrayRef v36 = "segPumpGetNetworkBandwidthFromMonitor";
      __int16 v37 = 2114;
      long long v38 = v23;
      __int16 v39 = 2048;
      uint64_t v40 = valuePtr;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (number) {
    CFRelease(number);
  }
  uint64_t v9 = 0;
  double v10 = (double)v19;
  if (a2) {
    goto LABEL_29;
  }
  return v9;
}

void segPumpCanContinueWithoutGap(uint64_t a1, int *a2)
{
  if (*(unsigned char *)(a1 + 8002)
    || *(_DWORD *)(a1 + 24) == 1
    || (uint64_t v4 = *(void *)(*(void *)(a1 + 16 * *(void *)(a1 + 8416) + 384) + 56)) == 0
    || (CFArrayRef v5 = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(v4)) == 0
    || CFArrayGetCount(v5) < 1)
  {
    int v6 = 7;
  }
  else if (*(unsigned char *)(*(void *)(a1 + 16 * *(void *)(a1 + 8416) + 384) + 1169))
  {
    int v6 = 0;
  }
  else
  {
    int v6 = 7;
    uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
    uint64_t v8 = 0;
    uint64_t v28 = UpTimeNanoseconds;
    long long v29 = a2;
    do
    {
      uint64_t v9 = *(void *)(a1 + 16 * v8 + 384);
      if (*(void *)(v9 + 16))
      {
        if (*(void *)(v9 + 56))
        {
          if (*(unsigned char *)(v9 + 862))
          {
            double v10 = fmax(*(double *)(v9 + 912) + (double)(UpTimeNanoseconds - *(void *)(v9 + 896)) / -1000000000.0 + 0.0, 0.0);
          }
          else
          {
            CFIndex v12 = 0;
            double v10 = 0.0;
            while (1)
            {
              CFArrayRef MediaSegmentSpecifiers = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(*(void *)(v9 + 56));
              if (MediaSegmentSpecifiers) {
                CFArrayRef MediaSegmentSpecifiers = (const __CFArray *)CFArrayGetCount(MediaSegmentSpecifiers);
              }
              if (v12 >= (uint64_t)MediaSegmentSpecifiers) {
                break;
              }
              CFArrayRef v14 = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(*(void *)(v9 + 56));
              ValueAtIndex = CFArrayGetValueAtIndex(v14, v12);
              MediaFilePrivateData = segPumpGetMediaFilePrivateData(ValueAtIndex);
              uint64_t v17 = MediaFilePrivateData;
              if (!MediaFilePrivateData[96])
              {
                if (MediaFilePrivateData[73] || MediaFilePrivateData[74])
                {
                  double v10 = v10 + FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)ValueAtIndex);
                }
                else
                {
                  CFArrayRef PartialSegments = (const __CFArray *)FigMediaSegmentSpecifierGetPartialSegments((uint64_t)ValueAtIndex);
                  if (PartialSegments && CFArrayGetCount(PartialSegments) >= 1)
                  {
                    CFArrayRef v19 = (const __CFArray *)FigMediaSegmentSpecifierGetPartialSegments((uint64_t)ValueAtIndex);
                    CFIndex v20 = 0;
                    if (v19)
                    {
LABEL_31:
                      CFIndex Count = CFArrayGetCount(v19);
                      goto LABEL_33;
                    }
                    while (1)
                    {
                      CFIndex Count = 0;
LABEL_33:
                      if (v20 >= Count) {
                        break;
                      }
                      unsigned int v22 = CFArrayGetValueAtIndex(v19, v20);
                      CFAllocatorRef v23 = segPumpGetMediaFilePrivateData(v22);
                      if (v23[73] || v23[74]) {
                        double v10 = v10 + FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)v22);
                      }
                      ++v20;
                      if (v19) {
                        goto LABEL_31;
                      }
                    }
                    uint64_t UpTimeNanoseconds = v28;
                    a2 = v29;
                  }
                }
              }
              ++v12;
              if (!v17[73])
              {
                if (ValueAtIndex)
                {
                  uint64_t v24 = *(void *)(v9 + 376) + 1;
                  if (v24 != FigMediaSegmentSpecifierGetMediaSequence((uint64_t)ValueAtIndex)) {
                    v6 += -1 << v8;
                  }
                }
                break;
              }
            }
          }
          uint64_t v25 = *(void *)(v9 + 1048);
          uint64_t v26 = *(void *)(v9 + 1056);
          double v27 = (double)v25 + v10 * 1000000000.0;
          if (v25 >= v26) {
            double v27 = (double)v26 + v10 * 1000000000.0;
          }
          if (UpTimeNanoseconds <= (uint64_t)v27) {
            int v11 = 0;
          }
          else {
            int v11 = -1 << v8;
          }
        }
        else
        {
          int v11 = -1 << v8;
        }
        v6 += v11;
      }
      ++v8;
    }
    while (v8 != 3);
  }
  if (a2) {
    *a2 = v6;
  }
}

uint64_t segPumpConnectedInterfaceIsWWAN(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8464);
  if (v1) {
    return FigNetworkInterfaceIsCellular(v1);
  }
  int v1 = *(_DWORD *)(a1 + 8460);
  if (v1) {
    return FigNetworkInterfaceIsCellular(v1);
  }
  uint64_t result = *(void *)(a1 + 8448);
  if (result) {
    return FigNetworkPathInformationDoesUseCellular();
  }
  return result;
}

uint64_t segPumpCreateAccessLog(uint64_t a1, CFAllocatorRef allocator, __CFDictionary **a3)
{
  CFArrayRef v5 = *(void **)(a1 + 16 * *(void *)(a1 + 8416) + 384);
  uint64_t v37 = 0;
  memset(v36, 0, sizeof(v36));
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable) {
    return 4294954510;
  }
  uint64_t v7 = Mutable;
  uint64_t v8 = (void *)(*(void *)(a1 + 16 * *(void *)(a1 + 8416) + 384) + 680);
  do
  {
    uint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_11;
    }
    CFDataRef v9 = (const __CFData *)v8[22];
  }
  while (!v9);
  CFDataRef v10 = FigCFHTTPCreateAddressString(v9);
  if (v10)
  {
    CFDataRef v11 = v10;
    CFDictionarySetValue(v7, @"s-ip", v10);
    CFRelease(v11);
  }
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  do
  {
    v13 += *(void *)(*(void *)(a1 + 384 + v12) + 944);
    v12 += 16;
  }
  while (v12 != 48);
  uint64_t v14 = FigCFDictionarySetCFIndex();
  if (v14)
  {
LABEL_10:
    CFRelease(v7);
    return v14;
  }
LABEL_11:
  uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  uint64_t ObservedNetworkStats = segPumpGetObservedNetworkStats(a1, UpTimeNanoseconds - 60000000000, (uint64_t)v36);
  if (ObservedNetworkStats) {
    goto LABEL_70;
  }
  uint64_t ObservedNetworkStats = FigCFDictionarySetDouble();
  if (ObservedNetworkStats) {
    goto LABEL_70;
  }
  uint64_t ObservedNetworkStats = FigCFDictionarySetDouble();
  if (ObservedNetworkStats) {
    goto LABEL_70;
  }
  uint64_t v43 = 0;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v40 = 0u;
  *(_OWORD *)CFNumberRef number = 0u;
  long long v39 = 0u;
  uint64_t v17 = v5[119];
  if (v17 >= 1) {
    segPumpGetObservedNetworkStats(a1, v17, (uint64_t)number);
  }
  uint64_t ObservedNetworkStats = FigCFDictionarySetDouble();
  if (ObservedNetworkStats) {
    goto LABEL_70;
  }
  if (*(double *)(a1 + 8576) > 0.0)
  {
    uint64_t ObservedNetworkStats = FigCFDictionarySetDouble();
    if (ObservedNetworkStats) {
      goto LABEL_70;
    }
  }
  uint64_t ObservedNetworkStats = FigCFDictionarySetInt64();
  if (ObservedNetworkStats) {
    goto LABEL_70;
  }
  if (*(uint64_t *)(a1 + 8544) >= 1)
  {
    uint64_t ObservedNetworkStats = FigCFDictionarySetInt64();
    if (ObservedNetworkStats) {
      goto LABEL_70;
    }
    if (*(uint64_t *)(a1 + 8552) >= 1)
    {
      uint64_t ObservedNetworkStats = FigCFDictionarySetInt64();
      if (ObservedNetworkStats) {
        goto LABEL_70;
      }
    }
  }
  uint64_t ObservedNetworkStats = FigCFDictionarySetDouble();
  if (ObservedNetworkStats) {
    goto LABEL_70;
  }
  uint64_t ObservedNetworkStats = FigCFDictionarySetDouble();
  if (ObservedNetworkStats) {
    goto LABEL_70;
  }
  CFTypeRef v18 = FigCFHTTPCreateURLString(*(const __CFURL **)(*(void *)(a1 + 384) + 8));
  if (v18)
  {
    CFArrayRef v19 = v18;
    CFDictionarySetValue(v7, @"uri", v18);
    CFRelease(v19);
  }
  uint64_t ObservedNetworkStats = FigCFDictionarySetCFIndex();
  if (ObservedNetworkStats) {
    goto LABEL_70;
  }
  uint64_t ObservedNetworkStats = FigCFDictionarySetCFIndex();
  if (ObservedNetworkStats) {
    goto LABEL_70;
  }
  uint64_t ObservedNetworkStats = FigCFDictionarySetDouble();
  if (ObservedNetworkStats) {
    goto LABEL_70;
  }
  FigCFDictionarySetDouble();
  uint64_t ObservedNetworkStats = FigCFDictionarySetCFIndex();
  if (ObservedNetworkStats) {
    goto LABEL_70;
  }
  uint64_t ObservedNetworkStats = FigCFDictionarySetCFIndex();
  if (ObservedNetworkStats) {
    goto LABEL_70;
  }
  uint64_t ObservedNetworkStats = FigCFDictionarySetCFIndex();
  if (ObservedNetworkStats) {
    goto LABEL_70;
  }
  uint64_t ObservedNetworkStats = FigCFDictionarySetCFIndex();
  if (ObservedNetworkStats) {
    goto LABEL_70;
  }
  uint64_t ObservedNetworkStats = FigCFDictionarySetCFIndex();
  if (ObservedNetworkStats) {
    goto LABEL_70;
  }
  uint64_t v20 = *(void *)(a1 + 8144);
  if (v20)
  {
    int AverageBitRate = FigAlternateGetAverageBitRate(*(void *)(v20 + 8));
    Declaredint PeakBitRate = FigAlternateGetDeclaredPeakBitRate(*(void *)(*(void *)(a1 + 8144) + 8));
    uint64_t v35 = 0;
    segPumpGetSafeNetworkBandwidth(a1, (double *)&v35, 0, 0);
    uint64_t ObservedNetworkStats = FigCFDictionarySetDouble();
    if (!ObservedNetworkStats)
    {
      number[0] = 0;
      int valuePtr = 0;
      uint64_t v23 = *(void *)(a1 + 9560);
      if (v23)
      {
        uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
        uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v26 = v25 ? v25 : 0;
        double v27 = *(void (**)(uint64_t, __CFString *, uint64_t, CFNumberRef *))(v26 + 48);
        if (v27)
        {
          v27(v23, @"AfmfpbProperty_MinimumBandwidthToSwitchUp", AllocatorForMedia, number);
          if (number[0])
          {
            CFNumberGetValue(number[0], kCFNumberSInt32Type, &valuePtr);
            if (number[0]) {
              CFRelease(number[0]);
            }
          }
        }
      }
      FigCFDictionarySetInt32();
      if (DeclaredPeakBitRate) {
        FigCFDictionarySetInt32();
      }
      if (AverageBitRate) {
        FigCFDictionarySetInt32();
      }
      if (FigAlternateGetFrameRate(*(void *)(*(void *)(a1 + 8144) + 8)) != 0.0) {
        FigCFDictionarySetDouble();
      }
      goto LABEL_52;
    }
LABEL_70:
    uint64_t v14 = ObservedNetworkStats;
    goto LABEL_10;
  }
LABEL_52:
  uint64_t v28 = *(const void **)(a1 + 224);
  if (v28) {
    CFDictionarySetValue(v7, @"cs-guid", v28);
  }
  if (*(unsigned char *)(a1 + 8002)) {
    long long v29 = @"VOD";
  }
  else {
    long long v29 = @"LIVE";
  }
  CFDictionarySetValue(v7, @"s-playback-type", v29);
  uint64_t v30 = *(const void **)(a1 + 8896);
  if (v30) {
    CFDictionarySetValue(v7, @"c-client-name", v30);
  }
  int32_t v31 = FigNetworkInterfaceReporterCopyPhysicalStatistics(*(void *)(a1 + 9120));
  if (v31)
  {
    unsigned int v32 = v31;
    FigAccessLogUpdateWithPhysicalStatistcs(v7, v31);
    CFRelease(v32);
  }
  if (*(void *)(a1 + 8416) == 1) {
    CFAllocatorRef v33 = (const void **)MEMORY[0x1E4F1CFD0];
  }
  else {
    CFAllocatorRef v33 = (const void **)MEMORY[0x1E4F1CFC8];
  }
  CFDictionarySetValue(v7, @"c-audio-only", *v33);
  if ((uint64_t)v5[141] >= 1) {
    FigCFDictionarySetInt64();
  }
  if ((uint64_t)v5[138] >= 1)
  {
    FigCFDictionarySetInt64();
    FigCFDictionarySetDouble();
  }
  uint64_t v14 = 0;
  *a3 = v7;
  return v14;
}

CMTimeRange *segPumpGetLiveEdge@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)a4 = 0u;
  if (*(unsigned char *)(a1 + 8002)) {
    goto LABEL_22;
  }
  uint64_t v8 = 0;
  char v9 = 1;
  double v10 = 1.79769313e308;
  do
  {
    char v11 = v9;
    uint64_t v12 = *(void *)(a1 + 16 * v8 + 384);
    if (*(void *)(v12 + 16) && ((a2 >> v8) & 1) != 0)
    {
      double v13 = *(double *)(v12 + 88);
      double v14 = *(double *)(v12 + 96);
      double v15 = segPumpGetMinimumPrebufferReservation(a1, *(void *)(v12 + 56)) + *(double *)(a1 + 7960);
      if (*(uint64_t *)(v12 + 1056) >= 1 && *(unsigned char *)(a1 + 334))
      {
        uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
        double v17 = *(double *)(a1 + 16);
        if (v17 <= 0.0)
        {
          LODWORD(v17) = *(_DWORD *)(a1 + 8);
          double v17 = (double)*(unint64_t *)&v17;
        }
        uint64_t v18 = UpTimeNanoseconds - *(void *)(v12 + 1056);
        if ((double)v18 / 1000000000.0 < v17) {
          double v17 = (double)v18 / 1000000000.0;
        }
        double v15 = v15 - v17;
      }
      if (v10 > v13 + v14 - v15) {
        double v10 = v13 + v14 - v15;
      }
    }
    char v9 = 0;
    uint64_t v8 = 1;
  }
  while ((v11 & 1) != 0);
  if (v10 >= 1.79769313e308)
  {
LABEL_22:
    CMTime start = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
    CMTime v22 = start;
    return CMTimeRangeMake((CMTimeRange *)a4, &start, &v22);
  }
  else
  {
    double v19 = *(double *)(a1 + 16);
    if (v19 <= 0.0)
    {
      LODWORD(v19) = *(_DWORD *)(a1 + 8);
      double v19 = (double)*(unint64_t *)&v19;
    }
    if (a3) {
      double v20 = v19 * 1.5;
    }
    else {
      double v20 = v19;
    }
    CMTimeMakeWithSeconds((CMTime *)a4, v10, 90000);
    uint64_t result = (CMTimeRange *)CMTimeMakeWithSeconds(&start, v20, 90000);
    *(CMTime *)(a4 + 24) = start;
  }
  return result;
}

uint64_t segPumpLoadSynchronousProperties(uint64_t a1)
{
  if (*(void *)(a1 + 7712) || *(void *)(a1 + 7696)) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 384);
  uint64_t v3 = *(void *)(v2 + 48);
  if (!v3) {
    return 4294954513;
  }
  uint64_t v4 = *(NSObject **)(a1 + 7744);
  CFArrayRef SessionDataSpecifiers = (const __CFArray *)FigMultivariantPlaylistGetSessionDataSpecifiers(v3);
  if (!SessionDataSpecifiers || CFArrayGetCount(SessionDataSpecifiers) < 1) {
    return 0;
  }
  if (*(void *)(a1 + 7744)) {
    goto LABEL_10;
  }
  uint64_t v4 = dispatch_group_create();
  *(void *)(a1 + 7744) = v4;
  int v6 = *(const void **)(a1 + 7896);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(a1 + 7896) = 0;
    uint64_t v4 = *(NSObject **)(a1 + 7744);
  }
  if (v4)
  {
LABEL_10:
    dispatch_retain(v4);
    uint64_t v7 = (unsigned char *)(a1 + 7752);
    if (!*(unsigned char *)(a1 + 7752))
    {
      *uint64_t v7 = 1;
      char v17 = 0;
      uint64_t v8 = *(NSObject **)(a1 + 7744);
      if (v8)
      {
        dispatch_group_enter(v8);
        if (!*(void *)(a1 + 9600)) {
          *(void *)(a1 + 9600) = FigGetUpTimeNanoseconds();
        }
        uint64_t v9 = segPumpSendNextSessionDataRequest(a1, v2, &v17);
        if (!v17) {
          dispatch_group_leave(*(dispatch_group_t *)(a1 + 7744));
        }
        if (v9) {
          return v9;
        }
      }
      else
      {
        uint64_t v9 = FigSignalErrorAt();
        if (v9) {
          return v9;
        }
      }
    }
    FigRetainProxyRetain();
    FigRetainProxyUnlockAll();
    dispatch_group_wait(v4, 0xFFFFFFFFFFFFFFFFLL);
    if (*(uint64_t *)(a1 + 9600) >= 1)
    {
      uint64_t v10 = FigGetUpTimeNanoseconds() - *(void *)(a1 + 9600);
      if (v10 >= 1)
      {
        uint64_t v11 = *(void *)(a1 + 9048);
        if (v11)
        {
          uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
          uint64_t v13 = v12 ? v12 : 0;
          double v14 = *(void (**)(uint64_t, uint64_t, uint64_t, unint64_t, void))(v13 + 56);
          if (v14) {
            v14(v11, 0x1EE582CD8, 0x1EE584FD8, v10 / 0xF4240uLL, 0);
          }
        }
      }
    }
    FigRetainProxyRelock();
    dispatch_release(v4);
    if (!FigRetainProxyIsInvalidated())
    {
      *uint64_t v7 = 0;
      double v15 = *(NSObject **)(a1 + 7744);
      if (v15)
      {
        dispatch_release(v15);
        *(void *)(a1 + 7744) = 0;
      }
    }
    FigRetainProxyRelease();
    return 0;
  }

  return FigSignalErrorAt();
}

uint64_t segPumpCreateIFrameReport(uint64_t a1, const __CFAllocator *a2, CFMutableDictionaryRef *a3)
{
  if (!*(unsigned char *)(a1 + 8712))
  {
    CFMutableDictionaryRef v6 = 0;
    goto LABEL_5;
  }
  FigGetUpTimeNanoseconds();
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a2, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    CFMutableDictionaryRef v6 = Mutable;
    FigCFDictionarySetInt64();
    FigCFDictionarySetInt64();
    FigCFDictionarySetDouble();
    FigCFDictionarySetDouble();
    FigCFDictionarySetInt64();
    FigCFDictionarySetDouble();
LABEL_5:
    uint64_t result = 0;
    *a3 = v6;
    return result;
  }
  return 4294954510;
}

uint64_t segPumpCreateNetworkStatistics(uint64_t a1, CFAllocatorRef allocator, __CFDictionary **a3)
{
  if (!a3) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 9120);
  if (!v6 || (CFMutableDictionaryRef Mutable = FigNetworkInterfaceReporterCopyPhysicalStatistics(v6)) == 0)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!Mutable) {
      return 4294954510;
    }
  }
  int InterfaceTypeEnum = segPumpGetInterfaceTypeEnum(a1, 0);
  StringFromInterfaceType = FigErrorLogGetStringFromInterfaceType(InterfaceTypeEnum);
  CFDictionarySetValue(Mutable, @"cs-iftype", StringFromInterfaceType);
  uint64_t result = 0;
  *a3 = Mutable;
  return result;
}

uint64_t segPumpCreateStartupStatistics(uint64_t a1, CFAllocatorRef allocator, CFMutableDictionaryRef *a3)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable) {
    return 4294954510;
  }
  CFMutableDictionaryRef v6 = Mutable;
  if (*(_DWORD *)(a1 + 8664)) {
    FigCFDictionarySetInt32();
  }
  if (*(_DWORD *)(a1 + 8)) {
    FigCFDictionarySetInt32();
  }
  uint64_t result = 0;
  *a3 = v6;
  return result;
}

CFTypeRef segPumpCopyRecoveryAlternateIfViable(uint64_t a1)
{
  if (*(void *)(a1 + 8248))
  {
    uint64_t v2 = (void *)(a1 + 8096);
    while (1)
    {
      uint64_t v2 = (void *)*v2;
      if (!v2) {
        break;
      }
      if (CFEqual((CFTypeRef)v2[1], *(CFTypeRef *)(a1 + 8248)))
      {
        double v6 = 0.0;
        if (*(double *)(a1 + 8904) <= 0.0)
        {
          int AverageBitRate = FigAlternateGetAverageBitRate(*(void *)(a1 + 8248));
          if (!AverageBitRate) {
            int AverageBitRate = FigAlternateGetPeakBitRate(v2[1]);
          }
          uint64_t v3 = AverageBitRate;
        }
        else
        {
          uint64_t v3 = (uint64_t)(*(double *)(a1 + 8904) * (double)(int)FigAlternateGetPeakBitRate(v2[1]));
        }
        if (!segPumpGetSafeNetworkBandwidth(a1, &v6, 0, 0) && v6 >= (double)v3) {
          return CFRetain(*(CFTypeRef *)(a1 + 8248));
        }
        return 0;
      }
    }
  }
  return 0;
}

uint64_t segPumpCreateCPECryptorsSessionCryptKeysDict(uint64_t a1, CFTypeRef *a2)
{
  if (!a2
    || (CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia(),
        (CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540])) == 0))
  {
    return FigSignalErrorAt();
  }
  CFMutableDictionaryRef v6 = Mutable;
  for (CFIndex i = 0; ; ++i)
  {
    CFArrayRef Count = *(const __CFArray **)(a1 + 7688);
    if (Count) {
      CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
    }
    if (i >= (uint64_t)Count)
    {
      uint64_t v17 = 0;
      *a2 = CFRetain(v6);
      goto LABEL_22;
    }
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 7688), i);
    if (ValueAtIndex[2])
    {
      uint64_t v10 = ValueAtIndex;
      uint64_t v11 = ValueAtIndex[8];
      if (v11)
      {
        if (*((unsigned char *)v10 + 147) && *((unsigned char *)v10 + 144) && segPumpIsCryptorReadyToDecrypt(v11)) {
          break;
        }
      }
    }
LABEL_20:
    ;
  }
  CFAllocatorRef v12 = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFMutableDictionaryRef v13 = CFDictionaryCreateMutable(v12, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (v13)
  {
    double v14 = v13;
    uint64_t v15 = v10[8];
    if (v15 && segPumpIsCryptorReadyToDecrypt(v15)) {
      CFDictionarySetValue(v14, @"FPBCPECryptorsKey_Video", (const void *)v10[8]);
    }
    uint64_t v16 = v10[13];
    if (v16)
    {
      if (segPumpIsCryptorReadyToDecrypt(v16)) {
        CFDictionarySetValue(v14, @"FPBCPECryptorsKey_Audio", (const void *)v10[13]);
      }
    }
    FigCFDictionarySetInt32();
    FigCFDictionarySetInt32();
    CFDictionarySetValue(v6, (const void *)v10[2], v14);
    CFRelease(v14);
    goto LABEL_20;
  }
  uint64_t v17 = FigSignalErrorAt();
LABEL_22:
  CFRelease(v6);
  return v17;
}

uint64_t segPumpCopyAlternatesInPenaltyBox(uint64_t a1, __CFArray **a2)
{
  if (*(unsigned char *)(a1 + 8176)
    && (CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia(),
        (CFMutableArrayRef Mutable = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D510])) != 0))
  {
    CFMutableDictionaryRef v6 = Mutable;
    for (CFIndex i = *(uint64_t ***)(a1 + 8112); i; CFIndex i = (uint64_t **)*i)
      CFArrayAppendValue(v6, i[1]);
    if (a2) {
      *a2 = v6;
    }
    else {
      CFRelease(v6);
    }
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

CFNumberRef segPumpCopyNominalVideoFrameRate(uint64_t a1, CFNumberRef *a2)
{
  if (a2 && a1)
  {
    uint64_t v4 = *(void **)(a1 + 8096);
    if (v4)
    {
      float v5 = 0.0;
      while (1)
      {
        double FrameRate = FigAlternateGetFrameRate(v4[1]);
        float v7 = FrameRate;
        if (v7 == 0.0) {
          goto LABEL_18;
        }
        if (v5 != 0.0) {
          break;
        }
        float v8 = FrameRate;
LABEL_19:
        uint64_t v4 = (void *)*v4;
        float v5 = v8;
        if (!v4) {
          goto LABEL_22;
        }
      }
      if (vabds_f32(v5, v7) > 0.01)
      {
        if (v5 <= v7) {
          float v8 = FrameRate;
        }
        else {
          float v8 = v5;
        }
        if (v5 < v7) {
          float v7 = v5;
        }
        if (fabsf(v8 + (float)(v7 * -2.0)) >= 0.01
          && fabsf(v8 + (float)(v7 * -3.0)) >= 0.01
          && fabsf(v8 + (float)(v7 * -4.0)) >= 0.01)
        {
          float v8 = 0.0;
        }
        goto LABEL_19;
      }
LABEL_18:
      float v8 = v5;
      goto LABEL_19;
    }
    float v8 = 0.0;
LABEL_22:
    float valuePtr = v8;
    CFNumberRef result = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberFloatType, &valuePtr);
    if (result) {
      *a2 = result;
    }
    else {
      return (CFNumberRef)FigSignalErrorAt();
    }
  }
  else
  {
    return (CFNumberRef)FigSignalErrorAt();
  }
  return result;
}

uint64_t segPumpCopySessionKeys(uint64_t a1, __CFArray **a2)
{
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFMutableArrayRef Mutable = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D510]);
  if (Mutable)
  {
    CFMutableDictionaryRef v6 = Mutable;
    uint64_t v7 = *(void *)(a1 + 384);
    uint64_t v8 = *(void *)(v7 + 48);
    if (v8)
    {
      for (CFIndex i = 0; ; ++i)
      {
        CFArrayRef ContentKeySpecifiers = (const __CFArray *)FigMultivariantPlaylistGetContentKeySpecifiers(v8);
        if (ContentKeySpecifiers) {
          CFArrayRef ContentKeySpecifiers = (const __CFArray *)CFArrayGetCount(ContentKeySpecifiers);
        }
        if (i >= (uint64_t)ContentKeySpecifiers) {
          break;
        }
        CFArrayRef v11 = (const __CFArray *)FigMultivariantPlaylistGetContentKeySpecifiers(*(void *)(v7 + 48));
        ValueAtIndex = CFArrayGetValueAtIndex(v11, i);
        if (FigContentKeySpecifierGetIsPrefetchKey((uint64_t)ValueAtIndex)) {
          CFArrayAppendValue(v6, ValueAtIndex);
        }
        uint64_t v8 = *(void *)(v7 + 48);
      }
    }
    *a2 = v6;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t segPumpEnsureNetworkCostMonitor(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 8472))
  {
    uint64_t v3 = (uint64_t *)(a1 + 8472);
    uint64_t result = FigNetworkCostMonitorCreate(a2, a1 + 8472);
    if (result) {
      return result;
    }
    uint64_t v5 = *v3;
    if (v5 && *(unsigned char *)(a1 + 9632))
    {
      uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v6) {
        uint64_t v7 = v6;
      }
      else {
        uint64_t v7 = 0;
      }
      uint64_t v8 = *(void (**)(uint64_t, uint64_t, void))(v7 + 56);
      if (v8) {
        v8(v5, 0x1EE57E538, *MEMORY[0x1E4F1CFD0]);
      }
    }
    segPumpUpdateNetworkCostHasHighSpeedHighPower(a1);
    segPumpUpdateNetworkCostIsExpensive(a1);
    segPumpUpdateNetworkCostHasEndTag(a1);
  }
  return 0;
}

uint64_t *segPumpMainSegmentBytesInTransit(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16 * *(void *)(a1 + 8416) + 384);
  uint64_t result = segPumpGetBytesInTransit(*(uint64_t **)(v2 + 696), *(void *)(a1 + 8144));
  if (!result)
  {
    uint64_t v4 = *(uint64_t **)(v2 + 792);
    uint64_t v5 = *(void *)(a1 + 8144);
    return segPumpGetBytesInTransit(v4, v5);
  }
  return result;
}

uint64_t segPumpCopyOfflineInterstitialURLs(uint64_t a1, uint64_t a2, void *a3)
{
  CFTypeRef cf = 0;
  CFTypeRef v4 = *(CFTypeRef *)(a1 + 296);
  if (v4
    && (uint64_t v5 = FigStreamingCacheCopyProperty((uint64_t)v4, @"FSC_OfflineInterstitialURLs", a2, &cf),
        CFTypeRef v4 = cf,
        v5))
  {
    if (cf) {
      CFRelease(cf);
    }
  }
  else
  {
    uint64_t v5 = 0;
    *a3 = v4;
  }
  return v5;
}

BOOL segPumpEnsureCMCDHeaderVendor(uint64_t a1)
{
  CFTypeRef cf = 0;
  int v1 = (uint64_t *)(a1 + 9576);
  if (*(void *)(a1 + 9576)) {
    return *v1 != 0;
  }
  uint64_t v3 = *(void *)(a1 + 80);
  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(unsigned int (**)(uint64_t, void, uint64_t, CFTypeRef *))(v6 + 48);
  if (!v7 || v7(v3, *MEMORY[0x1E4F202D8], v4, &cf)) {
    goto LABEL_17;
  }
  uint64_t UInt64 = FigCFNumberGetUInt64();
  if (UInt64)
  {
    uint64_t v9 = UInt64;
    uint64_t v10 = *(void *)(a1 + 56);
    CFArrayRef v11 = *(const void **)(a1 + 224);
    uint64_t Value = FigCFDictionaryGetValue();
    if (!FigCMCDHeaderVendorCreate(v10, v11, Value, *(const __CFDictionary **)(a1 + 9128), v1))
    {
      CFMutableDictionaryRef v13 = *(const void **)(a1 + 88);
      if ((!v13 || !FigCMCDHeaderVendorSetNetworkHistory(*v1, v13))
        && !segPumpUpdateCMCDStreamType(a1)
        && !FigCMCDHeaderVendorSetStreamingFormat(*(void *)(a1 + 9576), *(unsigned char *)(a1 + 329) != 0)
        && !FigCMCDHeaderVendorSetAllowedKeys(*v1, v9))
      {
        uint64_t v14 = *(void *)(a1 + 9488);
        if (v14)
        {
          uint64_t v15 = *v1;
          uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 8);
          uint64_t v17 = v16 ? v16 : 0;
          double v19 = *(void (**)(uint64_t, __CFString *, uint64_t))(v17 + 56);
          if (v19) {
            v19(v14, @"kCKBP_CMCDHeaderVendor", v15);
          }
        }
        goto LABEL_19;
      }
    }
LABEL_17:
    if (*v1)
    {
      CFRelease((CFTypeRef)*v1);
      *int v1 = 0;
    }
  }
LABEL_19:
  if (cf) {
    CFRelease(cf);
  }
  return *v1 != 0;
}

uint64_t segPumpCreateFigAlternatesArrayAndCalculateStartupScore(uint64_t a1, __CFArray **a2)
{
  if (a2
    && (CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia(),
        (CFMutableArrayRef Mutable = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D510])) != 0))
  {
    uint64_t v6 = Mutable;
    memset(&v64[8], 0, 216);
    segPumpMakeNetworkPredictionInput(a1, (uint64_t)v64);
    uint64_t v63 = 0;
    long long v61 = 0u;
    long long v62 = 0u;
    long long v59 = 0u;
    long long v60 = 0u;
    long long v58 = 0u;
    uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
    *(void *)&v64[16] = 0;
    *(void *)uint64_t v64 = 1;
    *(_OWORD *)&v64[56] = *(_OWORD *)(a1 + 128);
    *(void *)&v64[168] |= 4uLL;
    uint64_t v8 = *(void *)(a1 + 96);
    uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v9) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
    CFArrayRef v11 = *(uint64_t (**)(uint64_t, uint64_t, _OWORD *, long long *))(v10 + 8);
    CFTypeRef v56 = a2;
    if (v11)
    {
      v65[10] = *(_OWORD *)&v64[160];
      v65[11] = *(_OWORD *)&v64[176];
      v65[12] = *(_OWORD *)&v64[192];
      v65[13] = *(_OWORD *)&v64[208];
      v65[6] = *(_OWORD *)&v64[96];
      v65[7] = *(_OWORD *)&v64[112];
      v65[8] = *(_OWORD *)&v64[128];
      v65[9] = *(_OWORD *)&v64[144];
      v65[2] = *(_OWORD *)&v64[32];
      v65[3] = *(_OWORD *)&v64[48];
      v65[4] = *(_OWORD *)&v64[64];
      v65[5] = *(_OWORD *)&v64[80];
      v65[0] = *(_OWORD *)v64;
      v65[1] = *(_OWORD *)&v64[16];
      int v12 = v11(v8, UpTimeNanoseconds, v65, &v58);
      if (v12)
      {
        LODWORD(v14) = v12;
        uint64_t v13 = 0;
        uint64_t v17 = 0;
      }
      else
      {
        uint64_t v13 = (uint64_t)(*((double *)&v59 + 1) * (double)(uint64_t)v58);
        uint64_t v14 = *(void *)(a1 + 9048);
        if (v14)
        {
          uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v15) {
            uint64_t v16 = v15;
          }
          else {
            uint64_t v16 = 0;
          }
          uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v16 + 56);
          if (v18) {
            v18(v14, 0x1EE582B98, 0x1EE561138, v13, 0);
          }
          LODWORD(v14) = 0;
        }
        uint64_t v17 = 1;
      }
    }
    else
    {
      uint64_t v13 = 0;
      uint64_t v17 = 0;
      LODWORD(v14) = -12782;
    }
    if (!*(unsigned char *)(a1 + 9586))
    {
      *(unsigned char *)(a1 + 9586) = 1;
      uint64_t v21 = *(void *)(a1 + 9048);
      if (v21)
      {
        uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v23 = v22 ? v22 : 0;
        CFTypeRef v55 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v23 + 56);
        if (v55) {
          v55(v21, 0x1EE582BB8, 0x1EE5624F8, v17, 0);
        }
      }
    }
    if (v14)
    {
      int v19 = FigRCLGetNumberWithDefault(*(const __CFDictionary **)(a1 + 9128), @"coldStartArbitraryBandwidthGuess");
      uint64_t v13 = v19;
      BOOL v20 = v19 > 0;
    }
    else
    {
      BOOL v20 = 1;
    }
    uint64_t v24 = *(uint64_t **)(a1 + 8096);
    if (v24)
    {
      double v25 = (double)v13;
      float v57 = (float)v13;
      do
      {
        if (FigAlternateGetStartupScore(v24[1]) == -1.79769313e308 && v20)
        {
          double v27 = FigRCLGetDoubleWithDefault(*(const __CFDictionary **)(a1 + 9128), @"adaptiveStartupRewardWeight");
          double v28 = FigRCLGetDoubleWithDefault(*(const __CFDictionary **)(a1 + 9128), @"adaptiveStartupCostWeight");
          int v29 = FigRCLGetNumberWithDefault(*(const __CFDictionary **)(a1 + 9128), @"fastStartupThresholdMS");
          int v30 = FigRCLGetNumberWithDefault(*(const __CFDictionary **)(a1 + 9128), @"slowStartupThresholdMS");
          int v31 = FigRCLGetNumberWithDefault(*(const __CFDictionary **)(a1 + 9128), @"superSlowStartupThresholdMS");
          double v32 = FigRCLGetDoubleWithDefault(*(const __CFDictionary **)(a1 + 9128), @"fastStartCostScore");
          double v33 = FigRCLGetDoubleWithDefault(*(const __CFDictionary **)(a1 + 9128), @"slowStartCostScore");
          double v34 = FigRCLGetDoubleWithDefault(*(const __CFDictionary **)(a1 + 9128), @"superSlowStartCostScore");
          int v35 = *((_DWORD *)v24 + 6);
          *(void *)&v65[0] = 0;
          *(void *)uint64_t v64 = 0;
          *(void *)&long long v58 = 0;
          v66[0] = 0.0;
          if (*(_DWORD *)(a1 + 8)) {
            unsigned int v36 = *(_DWORD *)(a1 + 8);
          }
          else {
            unsigned int v36 = 6;
          }
          uint64_t v37 = v66;
          segPumpGetStartupRequirements(a1, v36, (double *)v65, (double *)v64, (double *)&v58, v66, (double)v35);
          if (*(double *)v64 > v25)
          {
            if (*(double *)v65 > v25) {
              uint64_t v37 = (double *)(a1 + 8024);
            }
            else {
              uint64_t v37 = (double *)&v58;
            }
          }
          double v38 = (double)v29;
          float v39 = *v37 * 1000.0;
          double v40 = (float)((float)((float)v35 * v39) / v57);
          if (v40 <= (double)v29)
          {
            double v42 = v32 / v38 * v40;
          }
          else
          {
            double v41 = (double)v30;
            if (v40 > (double)v30) {
              double v42 = v33 + (v34 - v33) / ((double)v31 - v41) * (v40 - v41);
            }
            else {
              double v42 = v32 + (v33 - v32) / (v41 - v38) * (v40 - v38);
            }
          }
          uint64_t v43 = v24[1];
          int v44 = FigRCLGetNumberWithDefault(*(const __CFDictionary **)(a1 + 9128), @"lowQualityBWThreshold");
          int v45 = FigRCLGetNumberWithDefault(*(const __CFDictionary **)(a1 + 9128), @"highQualityBWThreshold");
          int v46 = FigRCLGetNumberWithDefault(*(const __CFDictionary **)(a1 + 9128), @"superHighQualityBWThreshold");
          double v47 = FigRCLGetDoubleWithDefault(*(const __CFDictionary **)(a1 + 9128), @"lowQualityRewardScore");
          double v48 = FigRCLGetDoubleWithDefault(*(const __CFDictionary **)(a1 + 9128), @"highQualityRewardScore");
          double v49 = FigRCLGetDoubleWithDefault(*(const __CFDictionary **)(a1 + 9128), @"superHighQualityRewardScore");
          int NormalizedPeakBitrate = FigAlternateGetNormalizedPeakBitrate(v43);
          if (NormalizedPeakBitrate <= v44)
          {
            double v51 = v47 / (double)v44 * (double)NormalizedPeakBitrate;
          }
          else
          {
            double v51 = v48 + (v49 - v48) / (double)(v46 - v45) * (double)(NormalizedPeakBitrate - v45);
            if (NormalizedPeakBitrate <= v45) {
              double v51 = v47 + (v48 - v47) / (double)(v45 - v44) * (double)(NormalizedPeakBitrate - v44);
            }
          }
          float v52 = v42;
          FigAlternateSetStartupScore(v24[1], v27 * (double)(int)v51 - v28 * v52);
        }
        CFArrayAppendValue(v6, (const void *)v24[1]);
        uint64_t v24 = (uint64_t *)*v24;
      }
      while (v24);
    }
    for (CFIndex i = *(uint64_t ***)(a1 + 8112); i; CFIndex i = (uint64_t **)*i)
      CFArrayAppendValue(v6, i[1]);
    const void *v56 = v6;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t segPumpGetStartupRequirements(uint64_t result, unsigned int a2, double *a3, double *a4, double *a5, double *a6, double a7)
{
  if (a2 >= 0xF) {
    unsigned int v7 = 15;
  }
  else {
    unsigned int v7 = a2;
  }
  double v8 = (double)v7;
  if (*(unsigned char *)(result + 329))
  {
    double v9 = *(double *)(result + 16) + *(double *)(result + 16);
    if (v9 >= *(double *)(result + 7952)) {
      double v9 = *(double *)(result + 7952);
    }
  }
  else
  {
    double v9 = *(double *)(result + 8032) * v8;
  }
  double v10 = *(double *)(result + 8040) * v8;
  if (v10 < 1.0) {
    double v10 = 1.0;
  }
  if (v10 > v9) {
    double v10 = v9;
  }
  if (a3) {
    *a3 = a7;
  }
  if (a4)
  {
    double v11 = *(double *)(result + 8704);
    double v12 = *(double *)(result + 8048) * a7 * v11;
    double v13 = *(double *)(result + 8056);
    double v14 = v13 + a7 * v11;
    if (v12 < v14) {
      double v14 = v12;
    }
    if (v13 == 0.0) {
      double v14 = v12;
    }
    *a4 = v14;
  }
  if (a5) {
    *a5 = v9;
  }
  if (a6) {
    *a6 = v10;
  }
  return result;
}

CFArrayRef segPumpStreamHasMediaFiles(uint64_t a1)
{
  CFArrayRef result = *(const __CFArray **)(a1 + 56);
  if (result)
  {
    CFArrayRef result = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers((uint64_t)result);
    if (result) {
      return (const __CFArray *)(CFArrayGetCount(result) > 0);
    }
  }
  return result;
}

double segPumpGetMinimumPrebufferReservation(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 328) && (double v3 = *(double *)(a1 + 16), v3 > 0.0))
  {
    double result = v3 + v3;
    if (*(double *)(a1 + 7952) > result) {
      return *(double *)(a1 + 7952);
    }
  }
  else
  {
    double result = segPumpGetDurationOfLastMediaSegment(a2);
    int v5 = *(_DWORD *)(a1 + 7944);
    if (result == 0.0)
    {
      double result = (double)(*(_DWORD *)(a1 + 8) * v5);
    }
    else if (v5 >= 2)
    {
      double result = result + (double)(*(_DWORD *)(a1 + 8) * (v5 - 1));
    }
    if (result < *(double *)(a1 + 7952)) {
      return *(double *)(a1 + 7952);
    }
  }
  return result;
}

double segPumpGetDurationOfLastMediaSegment(uint64_t a1)
{
  if (!a1) {
    return 0.0;
  }
  CFArrayRef MediaSegmentSpecifiers = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(a1);
  if (!MediaSegmentSpecifiers || CFArrayGetCount(MediaSegmentSpecifiers) < 1) {
    return 0.0;
  }
  FigMediaPlaylistGetMediaSegmentSpecifiers(a1);
  Lastuint64_t Value = FigCFArrayGetLastValue();

  return FigMediaSegmentSpecifierGetTimeInSeconds(LastValue);
}

double segPumpMakeNetworkPrediction(uint64_t a1, uint64_t a2)
{
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  memset(v26, 0, sizeof(v26));
  segPumpMakeNetworkPredictionInput(a1, (uint64_t)v26);
  uint64_t v25 = 0;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v20 = 0u;
  uint64_t v4 = *(void *)(a1 + 16 * *(void *)(a1 + 8416) + 384);
  uint64_t v5 = 104;
  if (!*(unsigned char *)(a1 + 329)) {
    uint64_t v5 = 112;
  }
  double v6 = *(double *)(a1 + 16);
  if (v6 <= 0.0) {
    double v6 = (double)*(unsigned int *)(a1 + 8);
  }
  uint64_t v7 = *(void *)(a1 + v5);
  uint64_t v8 = *(void *)(v4 + 256);
  if (v8 && FigMediaSegmentSpecifierGetBytesToRead(v8))
  {
    uint64_t v9 = FigMediaSegmentSpecifierGetBytesToRead(*(void *)(v4 + 256));
LABEL_14:
    *(void *)&v26[2] = v9;
    goto LABEL_15;
  }
  uint64_t v10 = *(void *)(a1 + 8144);
  if (v10)
  {
    int AverageBitRate = FigAlternateGetAverageBitRate(*(void *)(v10 + 8));
    if (!AverageBitRate) {
      int AverageBitRate = FigAlternateGetPeakBitRate(*(void *)(*(void *)(a1 + 8144) + 8));
    }
    if (AverageBitRate && v6 != 0.0)
    {
      uint64_t v9 = (uint64_t)(v6 * (double)AverageBitRate * 0.125);
      goto LABEL_14;
    }
  }
LABEL_15:
  *(void *)&v26[1] = 60000000000;
  if (*(unsigned char *)(a1 + 329))
  {
    *(_OWORD *)((char *)&v26[2] + 8) = xmmword_194998970;
    *(_OWORD *)((char *)v26 + 8) = xmmword_194998980;
    *((void *)&v26[1] + 1) = 10000000000;
    if (*(unsigned char *)(a1 + 334))
    {
      *((void *)&v32 + 1) = 0x3FEEB851EB851EB8;
      LOBYTE(v33) = 1;
    }
  }
  *(void *)&v26[0] = v7;
  *((void *)&v33 + 1) |= 8uLL;
  uint64_t v12 = *(void *)(a1 + 96);
  uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v14) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0;
  }
  uint64_t v16 = *(void (**)(uint64_t, uint64_t, _OWORD *, long long *))(v15 + 8);
  if (v16)
  {
    v37[10] = v33;
    v37[11] = v34;
    v37[12] = v35;
    v37[13] = v36;
    v37[6] = v29;
    v37[7] = v30;
    v37[8] = v31;
    v37[9] = v32;
    v37[2] = v26[2];
    v37[3] = v26[3];
    v37[4] = v27;
    v37[5] = v28;
    v37[0] = v26[0];
    v37[1] = v26[1];
    v16(v12, UpTimeNanoseconds, v37, &v20);
  }
  long long v17 = v23;
  *(_OWORD *)(a2 + 32) = v22;
  *(_OWORD *)(a2 + 48) = v17;
  *(_OWORD *)(a2 + 64) = v24;
  *(void *)(a2 + 80) = v25;
  double result = *(double *)&v20;
  long long v19 = v21;
  *(_OWORD *)a2 = v20;
  *(_OWORD *)(a2 + 16) = v19;
  return result;
}

uint64_t segPumpSendNextSessionDataRequest(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  CMTimeValue value = 0;
  CFTypeRef v60 = 0;
  uint64_t v4 = *(void *)(a2 + 48);
  if (!v4)
  {
    uint64_t v7 = 0;
LABEL_91:
    uint64_t HTTPRequest = 0;
    goto LABEL_80;
  }
  uint64_t v7 = *(const void **)(a1 + 7776);
  uint64_t v8 = *(const void **)(a1 + 7872);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(a1 + 7872) = 0;
  }
  uint64_t v9 = (CFTypeRef *)(a1 + 7760);
  *(void *)(a1 + 7776) = 0;
  *(void *)(a1 + 7848) = 0;
  uint64_t v10 = *(const void **)(a1 + 7896);
  if (v10)
  {
    CFRelease(v10);
    *(void *)(a1 + 7896) = 0;
  }
  double v11 = 0;
  for (CFIndex i = 0; ; ++i)
  {
    CFArrayRef SessionDataSpecifiers = (const __CFArray *)FigMultivariantPlaylistGetSessionDataSpecifiers(*(void *)(a2 + 48));
    if (SessionDataSpecifiers) {
      CFArrayRef SessionDataSpecifiers = (const __CFArray *)CFArrayGetCount(SessionDataSpecifiers);
    }
    if (i >= (uint64_t)SessionDataSpecifiers) {
      break;
    }
    CFArrayRef v14 = (const __CFArray *)FigMultivariantPlaylistGetSessionDataSpecifiers(*(void *)(a2 + 48));
    ValueAtIndex = CFArrayGetValueAtIndex(v14, i);
    if (FigSessionDataSpecifierGetURL((uint64_t)ValueAtIndex))
    {
      SessionDataPrivateData = segPumpEnsureAndGetSessionDataPrivateData(ValueAtIndex);
      double v11 = SessionDataPrivateData;
      if (SessionDataPrivateData && !*((unsigned char *)SessionDataPrivateData + 16))
      {
        long long v21 = (const void *)SessionDataPrivateData[4];
        if (v21)
        {
          CFRelease(v21);
          v11[4] = 0;
        }
        segPumpFreeChapterArtworkQueue((uint64_t)(v11 + 23));
        *((_WORD *)v11 + 9) = 0;
        long long v22 = *(const void **)(a1 + 7896);
        *(void *)(a1 + 7896) = ValueAtIndex;
        if (ValueAtIndex) {
          CFRetain(ValueAtIndex);
        }
        if (v22) {
          CFRelease(v22);
        }
        v11[23] = 0;
        v11[24] = v11 + 23;
        break;
      }
    }
    else if (FigSessionDataSpecifierGetValue((uint64_t)ValueAtIndex))
    {
      uint64_t v17 = segPumpEnsureMetadataArray(a1);
      if (v17) {
        goto LABEL_97;
      }
      Identifier = (void *)FigSessionDataSpecifierGetIdentifier((uint64_t)ValueAtIndex);
      long long v19 = (const void *)FigSessionDataSpecifierGetValue((uint64_t)ValueAtIndex);
      Language = (const void *)FigSessionDataSpecifierGetLanguage((uint64_t)ValueAtIndex);
      uint64_t v17 = FigHLSSessionDataCopyMetadataEntry(Identifier, v19, Language, 0, (CFMutableDictionaryRef *)&value);
      if (v17) {
        goto LABEL_97;
      }
      CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 7696), value);
      if (value)
      {
        CFRelease(value);
        CMTimeValue value = 0;
      }
    }
  }
  uint64_t v23 = *(void *)(a1 + 7896);
  if (!v23)
  {
    LOBYTE(v4) = 0;
    goto LABEL_91;
  }
  if (!FigSessionDataSpecifierGetURL(v23))
  {
    uint64_t v17 = FigSignalErrorAt();
    goto LABEL_97;
  }
  if (!*(unsigned char *)(a1 + 320)) {
    goto LABEL_35;
  }
  cf[0] = 0;
  URL = (const void *)FigSessionDataSpecifierGetURL(*(void *)(a1 + 7896));
  if (URL) {
    URL = CFRetain(URL);
  }
  cf[0] = URL;
  uint64_t v17 = FigCFHTTPCopyURLAndInheritQueyComponentIfNotPresent(*(const __CFURL **)(a1 + 312), (CFURLRef *)cf);
  if (v17)
  {
LABEL_97:
    uint64_t HTTPRequest = v17;
    LOBYTE(v4) = 0;
    goto LABEL_80;
  }
  FigSessionDataSpecifierSetURL(*(void *)(a1 + 7896), cf[0]);
  if (cf[0]) {
    CFRelease(cf[0]);
  }
LABEL_35:
  if (*v9)
  {
    CFRelease(*v9);
    *uint64_t v9 = 0;
  }
  uint64_t v25 = (const void *)FigSessionDataSpecifierGetURL(*(void *)(a1 + 7896));
  *(void *)(a1 + 7760) = CFRetain(v25);
  uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  *(void *)(a1 + 7792) = UpTimeNanoseconds;
  if (!*(_DWORD *)(a1 + 7824)) {
    *(void *)(a1 + 7784) = UpTimeNanoseconds;
  }
  if (!*(void *)(a1 + 296)) {
    goto LABEL_44;
  }
  CFTypeRef v27 = *v9;
  cf[0] = 0;
  int URLAndString = segPumpCreateURLAndString(v27, 0, cf);
  CFTypeRef v29 = cf[0];
  if (!(_WORD)URLAndString)
  {
    int v30 = FigStreamingCacheCopySessionData(*(void *)(a1 + 296), cf[0], &v60);
    CFTypeRef v29 = cf[0];
    if (!cf[0]) {
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  int v30 = URLAndString;
  if (cf[0]) {
LABEL_42:
  }
    CFRelease(v29);
LABEL_43:
  if (v30 << 16)
  {
    LOBYTE(v4) = 0;
    uint64_t HTTPRequest = (__int16)v30;
    goto LABEL_80;
  }
LABEL_44:
  uint64_t v31 = *(void *)(a1 + 9048);
  if (v31)
  {
    uint64_t v32 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v33 = v32 ? v32 : 0;
    long long v34 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v33 + 32);
    if (v34) {
      v34(v31, 0x1EE582CD8, 0x1EE585038, 1);
    }
  }
  CFTypeRef v35 = v60;
  if (v60)
  {
    *((unsigned char *)v11 + 16) = 1;
    long long v36 = malloc_type_calloc(1uLL, 0x18uLL, 0x20040960023A9uLL);
    if (v36)
    {
      uint64_t v37 = v36;
      CFTypeRef v38 = *(CFTypeRef *)a1;
      if (*(void *)a1) {
        CFTypeRef v38 = CFRetain(v38);
      }
      void *v37 = v38;
      v37[1] = a2;
      v37[2] = CFRetain(v35);
      dispatch_async_f(*(dispatch_queue_t *)(a1 + 72), v37, (dispatch_function_t)segPumpDispatchParseSessionDataFromCacheFunc);
      goto LABEL_55;
    }
    uint64_t v17 = FigSignalErrorAt();
    if (!v17)
    {
LABEL_55:
      uint64_t HTTPRequest = 0;
      LOBYTE(v4) = 1;
      goto LABEL_80;
    }
    goto LABEL_97;
  }
  CFURLRef v40 = (const __CFURL *)FigSessionDataSpecifierGetURL(*(void *)(a1 + 7896));
  if (segPumpShouldRequestURLAsHTTPURL(a1, v40))
  {
    if (dword_1E9351350)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (!*(void *)(a1 + 9616)) {
      *(void *)(a1 + 9616) = FigGetUpTimeNanoseconds();
    }
    uint64_t v46 = *(void *)(a1 + 9048);
    if (v46)
    {
      uint64_t v47 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v48 = v47 ? v47 : 0;
      double v49 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v48 + 32);
      if (v49) {
        v49(v46, 0x1EE582CD8, 0x1EE585058, 1);
      }
    }
    uint64_t v50 = *(void *)(a1 + 56);
    double v51 = *(const void **)(a1 + 7768);
    float v52 = (const void *)FigSessionDataSpecifierGetURL(*(void *)(a1 + 7896));
    uint64_t v53 = *(void *)(a1 + 216);
    uint64_t v54 = *(void *)(a1 + 240);
    uint64_t v55 = *(void *)a1;
    long long v63 = 0u;
    long long v64 = 0u;
    *(_OWORD *)CFTypeRef cf = 0u;
    long long v62 = 0u;
    uint64_t v65 = 0x900000000;
    long long v66 = 0u;
    long long v67 = 0u;
    uint64_t v68 = 0;
    uint64_t HTTPRequest = segPumpCreateHTTPRequest(a1, v50, 0, v51, (uint64_t)v7, v52, v53, v54, 0.5, 0, 8, 1u, (long long *)cf, 0, 0, 0, (uint64_t)segPumpSessionDataReadCallback, v55, 0,
                    (uint64_t)v9);
    BOOL v56 = HTTPRequest == 0;
  }
  else
  {
    uint64_t v42 = FigSessionDataSpecifierGetURL(*(void *)(a1 + 7896));
    uint64_t HTTPRequest = segPumpCustomURLLoaderGetURLGuts((uint64_t *)a1, v42, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)(v11 + 3));
    if (!*(void *)(a1 + 9624)) {
      *(void *)(a1 + 9624) = FigGetUpTimeNanoseconds();
    }
    uint64_t v43 = *(void *)(a1 + 9048);
    if (v43)
    {
      uint64_t v44 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v45 = v44 ? v44 : 0;
      float v57 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v45 + 32);
      if (v57) {
        v57(v43, 0x1EE582CD8, 0x1EE585078, 1);
      }
    }
    BOOL v56 = HTTPRequest == 0;
  }
  LOBYTE(v4) = v56;
LABEL_80:
  if (a3) {
    *a3 = v4;
  }
  if (value) {
    CFRelease(value);
  }
  if (v7) {
    CFRelease(v7);
  }
  if (v60) {
    CFRelease(v60);
  }
  return HTTPRequest;
}

const void *segPumpEnsureAndGetSessionDataPrivateData(const void *a1)
{
  Instance = CMGetAttachment(a1, @"SegPumpSessionDataPrivateData", 0);
  if (!Instance)
  {
    FigGetAllocatorForMedia();
    long long v4 = xmmword_1E57A2830;
    if (segPumpSessionDataPrivateDataGetTypeID_once != -1) {
      dispatch_once_f(&segPumpSessionDataPrivateDataGetTypeID_once, &v4, (dispatch_function_t)segPumpRegisterClassUtil);
    }
    Instance = (const void *)_CFRuntimeCreateInstance();
    if (Instance)
    {
      CMSetAttachment(a1, @"SegPumpSessionDataPrivateData", Instance, 0);
      CFRelease(Instance);
    }
    else
    {
      FigSignalErrorAt();
    }
  }
  return Instance;
}

void segPumpFreeChapterArtworkQueue(uint64_t a1)
{
  for (CFIndex i = *(uint64_t **)a1; *(void *)a1; CFIndex i = *(uint64_t **)a1)
  {
    uint64_t v3 = *i;
    long long v4 = (void *)i[1];
    if (*i)
    {
      *(void *)(v3 + 8) = v4;
      long long v4 = (void *)i[1];
    }
    else
    {
      *(void *)(a1 + 8) = v4;
    }
    *long long v4 = v3;
    uint64_t v5 = (const void *)i[2];
    if (v5) {
      CFRelease(v5);
    }
    double v6 = (const void *)i[4];
    if (v6) {
      CFRelease(v6);
    }
    free(i);
  }
}

uint64_t segPumpEnsureMetadataArray(uint64_t a1)
{
  if (*(void *)(a1 + 7696)) {
    return 0;
  }
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFMutableArrayRef Mutable = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D510]);
  *(void *)(a1 + 7696) = Mutable;
  if (Mutable) {
    return 0;
  }

  return FigSignalErrorAt();
}

BOOL segPumpShouldRequestURLAsHTTPURL(uint64_t a1, const __CFURL *a2)
{
  if (!a2) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 327)) {
    return 0;
  }
  if (FigCFHTTPIsHTTPBasedURL(a2)) {
    return 1;
  }
  return FigCFHTTPIsDataURL(a2);
}

uint64_t segPumpCreateHTTPRequest(uint64_t a1, uint64_t a2, void *a3, const void *a4, uint64_t a5, CFTypeRef cf, uint64_t a7, uint64_t a8, float a9, const __CFArray *a10, int a11, unsigned int a12, long long *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, const void *a19, uint64_t a20)
{
  uint64_t v84 = *MEMORY[0x1E4F143B8];
  uint64_t v74 = 0;
  CFTypeRef cfa = a4;
  int v73 = 0;
  BOOL v21 = (a12 & 1) == 0 || a5 == 0;
  CFTypeRef v72 = 0;
  if (*(unsigned char *)(a1 + 327))
  {
LABEL_74:
    uint64_t URLWithQueryParams = FigSignalErrorAt();
    goto LABEL_75;
  }
  uint64_t URLWithQueryParams = segPumpCreateURLWithQueryParams(a1, cf, a10, (const __CFURL **)&v72);
  if (URLWithQueryParams)
  {
LABEL_75:
    uint64_t v38 = URLWithQueryParams;
    goto LABEL_71;
  }
  if (*(unsigned char *)(a1 + 48))
  {
    CFTypeRef v30 = *(CFTypeRef *)(a1 + 40);
    CFTypeRef cfa = v30;
    if (!v30) {
      goto LABEL_15;
    }
LABEL_13:
    if (!v21 || v30 == *(CFTypeRef *)(a1 + 40))
    {
      char v36 = 1;
      goto LABEL_28;
    }
    goto LABEL_15;
  }
  CFTypeRef v30 = cfa;
  if (cfa) {
    goto LABEL_13;
  }
LABEL_15:
  uint64_t v31 = a3;
  uint64_t v32 = *(void *)(a1 + 32);
  if (!v32) {
    goto LABEL_74;
  }
  uint64_t v33 = *(void *)(a1 + 64);
  uint64_t v34 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v34) {
    uint64_t v35 = v34;
  }
  else {
    uint64_t v35 = 0;
  }
  uint64_t v37 = *(uint64_t (**)(uint64_t, uint64_t, void, CFTypeRef *))(v35 + 40);
  if (!v37)
  {
    uint64_t v38 = 4294954514;
    goto LABEL_71;
  }
  uint64_t URLWithQueryParams = v37(v32, v33, 0, &cfa);
  if (URLWithQueryParams) {
    goto LABEL_75;
  }
  if (!cfa) {
    goto LABEL_74;
  }
  a3 = v31;
  if (*(unsigned char *)(a1 + 48) && !*(void *)(a1 + 40))
  {
    char v36 = 0;
    *(void *)(a1 + 40) = CFRetain(cfa);
  }
  else
  {
    char v36 = 0;
  }
LABEL_28:
  uint64_t v39 = segPumpAmendHTTPRequestFlags((unsigned char *)a1, &a12);
  if (v39)
  {
    uint64_t v38 = v39;
    if ((v36 & 1) == 0) {
LABEL_70:
    }
      CFRelease(cfa);
  }
  else
  {
    CFURLRef v40 = a13;
    CFTypeID v71 = segPumpCopyHTTPRequestCreationsOptionsAndSetNWActivityAndStuff(a9, a8, a1, a3, a11, a19);
    if (segPumpEnsureCMCDHeaderVendor(a1))
    {
      CFTypeRef v41 = cfa;
      uint64_t v42 = *(void *)(a1 + 9576);
      uint64_t v43 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v44 = v43 ? v43 : 0;
      uint64_t v45 = *(void (**)(CFTypeRef, uint64_t, uint64_t))(v44 + 56);
      if (v45) {
        v45(v41, 0x1EE57E3D8, v42);
      }
    }
    char v70 = v36;
    uint64_t v46 = a20;
    CFTypeRef v47 = cfa;
    CFTypeRef v48 = v72;
    uint64_t v49 = a12;
    long long v50 = v40[5];
    long long v81 = v40[4];
    long long v82 = v50;
    long long v83 = v40[6];
    long long v51 = v40[1];
    long long v77 = *v40;
    long long v78 = v51;
    long long v52 = v40[3];
    long long v79 = v40[2];
    long long v80 = v52;
    uint64_t v53 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v53) {
      uint64_t v54 = v53;
    }
    else {
      uint64_t v54 = 0;
    }
    uint64_t v55 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t, CFTypeRef, void, uint64_t, __CFDictionary *, uint64_t, _OWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, int *))(v54 + 8);
    if (v55)
    {
      valuePtr[4] = v81;
      valuePtr[5] = v82;
      valuePtr[6] = v83;
      valuePtr[0] = v77;
      valuePtr[1] = v78;
      valuePtr[2] = v79;
      valuePtr[3] = v80;
      uint64_t v56 = v55(v47, a2, a5, v48, 0, a7, v71, v49, valuePtr, a14, a15, a16, a17, a18, &v74, &v73);
      if (v56)
      {
        uint64_t v38 = v56;
        int v57 = 0;
      }
      else
      {
        if (!*(unsigned char *)(a1 + 328)) {
          FigNetworkUrgencyMonitorAddHTTPRequest(*(void *)(a1 + 9512), v74);
        }
        uint64_t v38 = 0;
        int v57 = 1;
      }
    }
    else
    {
      int v57 = 0;
      uint64_t v38 = 4294954514;
    }
    long long v58 = *(const void **)(v46 + 8);
    CFTypeRef v59 = cfa;
    *(void *)(v46 + 8) = cfa;
    if (v59) {
      CFRetain(v59);
    }
    if (v58) {
      CFRelease(v58);
    }
    CFTypeRef v60 = *(const void **)(v46 + 16);
    if (v60) {
      CFRelease(v60);
    }
    *(void *)(v46 + 16) = v74;
    *(_DWORD *)(v46 + 80) = v73;
    if (dword_1E9351350)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    long long v62 = *(const void **)v46;
    *(void *)uint64_t v46 = v48;
    if (v48) {
      CFRetain(v48);
    }
    if (v62) {
      CFRelease(v62);
    }
    if (v57)
    {
      if ((a12 & 0x400) != 0)
      {
        *(void *)&valuePtr[0] = segPumpGetCurrentRTT((void *)a1);
        CFNumberRef v63 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt64Type, valuePtr);
        if (v63)
        {
          CFNumberRef v64 = v63;
          uint64_t v65 = v74;
          uint64_t v66 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v66) {
            uint64_t v67 = v66;
          }
          else {
            uint64_t v67 = 0;
          }
          uint64_t v68 = *(void (**)(uint64_t, uint64_t, CFNumberRef))(v67 + 56);
          if (v68) {
            v68(v65, 0x1EE57B858, v64);
          }
          CFRelease(v64);
        }
      }
      uint64_t v38 = 0;
    }
    if (v71) {
      CFRelease(v71);
    }
    if ((v70 & 1) == 0) {
      goto LABEL_70;
    }
  }
LABEL_71:
  if (v72) {
    CFRelease(v72);
  }
  return v38;
}

uint64_t segPumpSessionDataReadCallback(uint64_t a1, uint64_t a2, uint64_t a3, OpaqueCMBlockBuffer *a4, size_t a5, size_t a6, char a7, int a8)
{
  uint64_t v28 = 0;
  CFTypeRef cf = 0;
  BOOL v27 = 0;
  FigRetainProxyRetain();
  if (!segPumpLockAndCopyPumpFromRetainProxy(a3, &cf, &v28))
  {
    if (*(void *)(v28 + 7744))
    {
      if (!*(void *)(v28 + 7896)) {
        goto LABEL_21;
      }
      uint64_t v14 = *(void *)(v28 + 384);
      if (a8)
      {
        uint64_t v15 = segPumpHandleSessionDataNetworkError((uint64_t)cf, *(void *)(v28 + 384), a8, 0, 0, &v27);
        BOOL v16 = (v15 | v27) == 0;
        goto LABEL_6;
      }
      if (a4)
      {
        uint64_t v17 = *(OpaqueCMBlockBuffer **)(v28 + 7872);
        if (!v17)
        {
          CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
          uint64_t Empty = CMBlockBufferCreateEmpty(AllocatorForMedia, 0, 0, (CMBlockBufferRef *)(v28 + 7872));
          if (Empty) {
            goto LABEL_34;
          }
          uint64_t v17 = *(OpaqueCMBlockBuffer **)(v28 + 7872);
        }
        uint64_t Empty = CMBlockBufferAppendBufferReference(v17, a4, a5, a6, 0);
        if (Empty) {
          goto LABEL_34;
        }
      }
      if ((a7 & 2) == 0) {
        goto LABEL_21;
      }
      *((unsigned char *)segPumpEnsureAndGetSessionDataPrivateData(*(const void **)(v28 + 7896)) + 16) = 1;
      uint64_t v20 = v28;
      *(_DWORD *)(v28 + 7824) = 0;
      if (*(void *)(v20 + 7832))
      {
        CFRelease(*(CFTypeRef *)(v20 + 7832));
        uint64_t v20 = v28;
        *(void *)(v28 + 7832) = 0;
      }
      uint64_t Empty = segPumpSetWiFiStatsOnNetworkPredictor(v20, v20 + 7760);
      if (!Empty)
      {
        segPumpParseSessionDataFromConnection((uint64_t)cf, v28, v14);
        uint64_t v15 = segPumpSendNextSessionDataRequest(v28, v14, &v27);
        if (v27)
        {
          BOOL v16 = 0;
        }
        else
        {
          segPumpResetConnection(v28, v28 + 7760);
          if (*(uint64_t *)(v28 + 9616) >= 1)
          {
            uint64_t v22 = FigGetUpTimeNanoseconds() - *(void *)(v28 + 9616);
            if (v22 >= 1)
            {
              uint64_t v23 = *(void *)(v28 + 9048);
              if (v23)
              {
                uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 16);
                uint64_t v25 = v24 ? v24 : 0;
                uint64_t v26 = *(void (**)(uint64_t, uint64_t, uint64_t, unint64_t, void))(v25 + 56);
                if (v26) {
                  v26(v23, 0x1EE582CD8, 0x1EE584FF8, v22 / 0xF4240uLL, 0);
                }
              }
            }
          }
          BOOL v16 = 1;
        }
LABEL_6:
        if (!v15)
        {
          if (!v16) {
            goto LABEL_21;
          }
          goto LABEL_20;
        }
LABEL_7:
        segPumpSendEndCallbackForAllActiveStreamsWithOSStatus(a3, v15);
LABEL_20:
        dispatch_group_leave(*(dispatch_group_t *)(v28 + 7744));
        goto LABEL_21;
      }
LABEL_34:
      uint64_t v15 = Empty;
      goto LABEL_7;
    }
    FigSignalErrorAt();
  }
LABEL_21:
  segPumpUnlockAndSendAllPendingNotifications();
  if (cf) {
    CFRelease(cf);
  }
  return FigRetainProxyRelease();
}

void segPumpSessionDataPrivateDataFinalize(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 32);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 32) = 0;
  }

  segPumpFreeChapterArtworkQueue(a1 + 184);
}

CFStringRef segPumpSessionDataPrivateDataCopyDesc(uint64_t a1)
{
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  return CFStringCreateWithFormat(AllocatorForMedia, 0, @"SessionDataPrivateData: %p", a1);
}

uint64_t segPumpCreateURLAndString(const void *a1, CFTypeRef *a2, CFTypeRef *a3)
{
  if (a1 && (CFURLRef v5 = (const __CFURL *)CFRetain(a1)) != 0)
  {
    CFURLRef v6 = v5;
    if (a2) {
      *a2 = CFRetain(v5);
    }
    if (a3) {
      *a3 = FigCFHTTPCreateURLString(v6);
    }
    CFRelease(v6);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void segPumpDispatchParseSessionDataFromCacheFunc(void *a1)
{
  uint64_t v3 = *((void *)a1 + 1);
  uint64_t v2 = (OpaqueCMBlockBuffer *)*((void *)a1 + 2);
  long long v4 = *(const void **)a1;
  char v11 = 0;
  uint64_t v9 = 0;
  CFTypeRef v10 = 0;
  CMBlockBufferRef blockBufferOut = 0;
  if (!segPumpLockAndCopyPumpFromRetainProxy((uint64_t)v4, &v10, &v9))
  {
    CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    CFAllocatorRef v6 = (const __CFAllocator *)FigGetAllocatorForMedia();
    if (!CMBlockBufferCreateContiguous(AllocatorForMedia, v2, v6, 0, 0, 0, 0, &blockBufferOut))
    {
      FigGetAllocatorForMedia();
      if (!FigCreateCFDataWithBlockBufferNoCopy()
        && !segPumpParseSessionDataBuffer(v9, 0, 0))
      {
        int v7 = segPumpSendNextSessionDataRequest(v9, v3, &v11);
        if (v11)
        {
          if (!v7) {
            goto LABEL_10;
          }
        }
        else
        {
          segPumpResetConnection(v9, v9 + 7760);
        }
      }
    }
    dispatch_group_leave(*(dispatch_group_t *)(v9 + 7744));
  }
LABEL_10:
  segPumpUnlockAndSendAllPendingNotifications();
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  if (v10) {
    CFRelease(v10);
  }
  if (v2) {
    CFRelease(v2);
  }
  if (v4) {
    CFRelease(v4);
  }
  free(a1);
}

uint64_t segPumpParseSessionDataBuffer(uint64_t a1, const void *a2, void *a3)
{
  uint64_t v5 = a1;
  CFAllocatorRef v6 = *(const void **)(a1 + 7896);
  SessionDataPrivateData = segPumpEnsureAndGetSessionDataPrivateData(v6);
  CFArrayRef theArray = 0;
  CFDictionaryRef theDict = 0;
  CMTimeValue value = 0;
  anCFURLRef URL = 0;
  if (FigSessionDataSpecifierGetFormatType((uint64_t)v6) != 2)
  {
    if (FigSessionDataSpecifierGetFormatType((uint64_t)v6) == 1)
    {
LABEL_5:
      int v10 = FigCFHTTPCreatePropertyListFromJSON((uint64_t)a2, (CFTypeRef *)&anURL);
      CFURLRef v9 = anURL;
      if (v10) {
        goto LABEL_6;
      }
      goto LABEL_16;
    }
    if (FigSessionDataSpecifierGetFormatType((uint64_t)v6) == 3
      || (FigSessionDataSpecifierGetIdentifier((uint64_t)v6), FigCFEqual()))
    {
      if (a2)
      {
        CFURLRef v9 = (const __CFURL *)CFRetain(a2);
        goto LABEL_16;
      }
    }
    else if (!FigSessionDataSpecifierGetFormatType((uint64_t)v6))
    {
      CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
      CFURLRef v9 = (const __CFURL *)CFPropertyListCreateWithData(AllocatorForMedia, (CFDataRef)a2, 1uLL, 0, 0);
      anCFURLRef URL = v9;
      if (v9) {
        goto LABEL_16;
      }
      goto LABEL_5;
    }
    CFURLRef v9 = 0;
    goto LABEL_16;
  }
  CFAllocatorRef v8 = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFURLRef v9 = (const __CFURL *)CFPropertyListCreateWithData(v8, (CFDataRef)a2, 1uLL, 0, 0);
  if (!v9)
  {
    int v10 = -12642;
LABEL_6:
    uint64_t v11 = v10;
    CFURLRef URL = (const __CFURL *)FigSessionDataSpecifierGetURL((uint64_t)v6);
    segPumpRTCReportingUpdateAndIssueErrorEvent(v5, v11, @"CoreMediaErrorDomain", @"Failed to parse HLS Session Data", 4u, 3u, URL);
    CFAllocatorRef v13 = (const __CFAllocator *)FigGetAllocatorForMedia();
    CFURLRef v14 = (const __CFURL *)FigSessionDataSpecifierGetURL((uint64_t)v6);
    Entry = FigErrorLogCreateEntry(v13, 0, v14, *(const void **)(v5 + 224), v11, @"CoreMediaErrorDomain", @"Failed to parse HLS Session Data", 0, 0, 0, 4, 3, a3);
    if (Entry)
    {
      BOOL v16 = Entry;
      segPumpAppendErrorLogDictionary(v5, Entry);
      CFRelease(v16);
    }
    uint64_t v17 = FigSignalErrorAt();
    goto LABEL_9;
  }
LABEL_16:
  if (!*(void *)(v5 + 9608)) {
    *(void *)(v5 + 9608) = FigGetUpTimeNanoseconds();
  }
  uint64_t v19 = *(void *)(v5 + 384);
  uint64_t v20 = *(void *)(v19 + 48);
  if (v20)
  {
    for (CFIndex i = 0; ; ++i)
    {
      CFArrayRef SessionDataSpecifiers = (const __CFArray *)FigMultivariantPlaylistGetSessionDataSpecifiers(v20);
      if (SessionDataSpecifiers) {
        CFArrayRef SessionDataSpecifiers = (const __CFArray *)CFArrayGetCount(SessionDataSpecifiers);
      }
      if (i >= (uint64_t)SessionDataSpecifiers) {
        break;
      }
      CFArrayRef v23 = (const __CFArray *)FigMultivariantPlaylistGetSessionDataSpecifiers(*(void *)(v19 + 48));
      ValueAtIndex = CFArrayGetValueAtIndex(v23, i);
      uint64_t v25 = segPumpEnsureAndGetSessionDataPrivateData(ValueAtIndex);
      if (segPumpSessionDataIsChapterMetadata((uint64_t)ValueAtIndex) && v25[16] && *((void *)v25 + 23)) {
        goto LABEL_37;
      }
      uint64_t v20 = *(void *)(v19 + 48);
    }
  }
  uint64_t v26 = segPumpEnsureAndGetSessionDataPrivateData(*(const void **)(v5 + 7896));
  if (!v26[4])
  {
    BOOL v27 = v26;
    CFAllocatorRef v28 = (const __CFAllocator *)FigGetAllocatorForMedia();
    CFMutableArrayRef Mutable = CFArrayCreateMutable(v28, 0, MEMORY[0x1E4F1D510]);
    v27[4] = Mutable;
    if (!Mutable)
    {
      uint64_t v17 = FigSignalErrorAt();
      if (v17) {
        goto LABEL_9;
      }
    }
  }
  Identifier = (const void *)FigSessionDataSpecifierGetIdentifier((uint64_t)v6);
  double v31 = *(double *)(v5 + 344);
  CFURLRef v32 = (const __CFURL *)FigSessionDataSpecifierGetURL(*(void *)(v5 + 7896));
  uint64_t v18 = FigHLSSessionDataCopyChapterMetadataAndCopyErrorLogEntry(Identifier, v9, v32, (uint64_t)a3, &theArray, &theDict, v31);
  if (theDict)
  {
    CFAllocatorRef v33 = (const __CFAllocator *)FigGetAllocatorForMedia();
    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(v33, 0, theDict);
    if (MutableCopy)
    {
      uint64_t v35 = MutableCopy;
      int v36 = FigGetAllocatorForMedia();
      FigErrorLogSetSeverity(v36, v35, 3);
      segPumpAppendErrorLogDictionary(v5, v35);
      CFRelease(v35);
    }
  }
  if (!v18)
  {
    uint64_t v37 = (__CFArray *)*((void *)SessionDataPrivateData + 4);
    CFArrayRef v38 = theArray;
    if (theArray) {
      v39.length = CFArrayGetCount(theArray);
    }
    else {
      v39.length = 0;
    }
    v39.location = 0;
    CFArrayAppendArray(v37, v38, v39);
LABEL_37:
    CFArrayRef v40 = (const __CFArray *)*((void *)SessionDataPrivateData + 4);
    if (!v40 || CFArrayGetCount(v40) < 1)
    {
      if (segPumpSessionDataIsLocalizedRenditionNameMetadata(*(void *)(v5 + 7896)))
      {
        long long v61 = *(const void **)(v5 + 7728);
        *(void *)(v5 + 7728) = v9;
        if (v9) {
          CFRetain(v9);
        }
        if (v61) {
          CFRelease(v61);
        }
      }
      else
      {
        uint64_t v17 = segPumpEnsureMetadataArray(v5);
        if (v17
          || (long long v62 = (void *)FigSessionDataSpecifierGetIdentifier((uint64_t)v6),
              Language = (const void *)FigSessionDataSpecifierGetLanguage(*(void *)(v5 + 7896)),
              CFURLRef v64 = (const __CFURL *)FigSessionDataSpecifierGetURL(*(void *)(v5 + 7896)),
              uint64_t v17 = FigHLSSessionDataCopyMetadataEntry(v62, v9, Language, v64, (CFMutableDictionaryRef *)&value),
              v17))
        {
LABEL_9:
          uint64_t v18 = v17;
          goto LABEL_101;
        }
        CFArrayAppendValue(*(CFMutableArrayRef *)(v5 + 7696), value);
      }
      goto LABEL_86;
    }
    if (!*(unsigned char *)(v5 + 320)) {
      goto LABEL_119;
    }
    long long v79 = SessionDataPrivateData;
    uint64_t v80 = v5;
    long long v77 = segPumpEnsureAndGetSessionDataPrivateData(v6);
    CFArrayRef v41 = (const __CFArray *)*((void *)v77 + 4);
    anCFURLRef URL = 0;
    CFAllocatorRef v42 = (const __CFAllocator *)FigGetAllocatorForMedia();
    CFMutableArrayRef v43 = CFArrayCreateMutable(v42, 0, MEMORY[0x1E4F1D510]);
    if (v41)
    {
      CFURLRef v78 = v9;
      if (CFArrayGetCount(v41) < 1)
      {
LABEL_55:
        CFTypeRef v60 = (const void *)*((void *)v77 + 4);
        *((void *)v77 + 4) = v43;
        if (v43) {
          CFRetain(v43);
        }
        if (v60) {
          CFRelease(v60);
        }
        uint64_t v18 = 0;
        CFMutableDictionaryRef v55 = 0;
        CFMutableArrayRef v50 = 0;
        CFMutableDictionaryRef v48 = 0;
LABEL_60:
        CFURLRef v9 = v78;
      }
      else
      {
        CFIndex v44 = 0;
        long long v81 = v43;
        while (1)
        {
          CFDictionaryRef v45 = (const __CFDictionary *)CFArrayGetValueAtIndex(v41, v44);
          CFArrayRef v46 = (const __CFArray *)CFDictionaryGetValue(v45, @"ChapterMetadataItems");
          CFAllocatorRef v47 = (const __CFAllocator *)FigGetAllocatorForMedia();
          CFMutableDictionaryRef v48 = CFDictionaryCreateMutableCopy(v47, 0, v45);
          if (!v48)
          {
            uint64_t v18 = FigSignalErrorAt();
            CFMutableDictionaryRef v55 = 0;
            CFMutableArrayRef v50 = 0;
            goto LABEL_60;
          }
          CFArrayAppendValue(v43, v48);
          CFAllocatorRef v49 = (const __CFAllocator *)FigGetAllocatorForMedia();
          CFMutableArrayRef v50 = CFArrayCreateMutable(v49, 0, MEMORY[0x1E4F1D510]);
          if (!v50)
          {
            uint64_t v18 = FigSignalErrorAt();
            CFMutableDictionaryRef v55 = 0;
            goto LABEL_60;
          }
          CFDictionarySetValue(v48, @"ChapterMetadataItems", v50);
          if (CFArrayGetCount(v46) >= 1) {
            break;
          }
LABEL_54:
          CFRelease(v50);
          CFRelease(v48);
          ++v44;
          CFMutableArrayRef v43 = v81;
          if (v44 >= CFArrayGetCount(v41)) {
            goto LABEL_55;
          }
        }
        CFIndex v51 = 0;
        while (1)
        {
          CFDictionaryRef v52 = (const __CFDictionary *)CFArrayGetValueAtIndex(v46, v51);
          CFStringRef v53 = (const __CFString *)CFDictionaryGetValue(v52, @"URL");
          CFAllocatorRef v54 = (const __CFAllocator *)FigGetAllocatorForMedia();
          CFMutableDictionaryRef v55 = CFDictionaryCreateMutableCopy(v54, 0, v52);
          if (!v55) {
            break;
          }
          CFArrayAppendValue(v50, v55);
          if (v53)
          {
            CFAllocatorRef v56 = (const __CFAllocator *)FigGetAllocatorForMedia();
            anCFURLRef URL = CFURLCreateWithString(v56, v53, 0);
            if (!anURL) {
              break;
            }
            CFURLRef v57 = (const __CFURL *)FigSessionDataSpecifierGetURL((uint64_t)v6);
            uint64_t v58 = FigCFHTTPCopyURLAndInheritQueyComponentIfNotPresent(v57, &anURL);
            if (v58) {
              goto LABEL_70;
            }
            CFStringRef v59 = CFURLGetString(anURL);
            CFDictionarySetValue(v55, @"URL", v59);
            if (anURL)
            {
              CFRelease(anURL);
              anCFURLRef URL = 0;
            }
          }
          CFRelease(v55);
          if (++v51 >= CFArrayGetCount(v46)) {
            goto LABEL_54;
          }
        }
        uint64_t v58 = FigSignalErrorAt();
LABEL_70:
        uint64_t v18 = v58;
        CFURLRef v9 = v78;
        CFMutableArrayRef v43 = v81;
      }
    }
    else
    {
      uint64_t v18 = FigSignalErrorAt();
      CFMutableDictionaryRef v55 = 0;
      CFMutableArrayRef v50 = 0;
      CFMutableDictionaryRef v48 = 0;
    }
    if (anURL) {
      CFRelease(anURL);
    }
    if (v43) {
      CFRelease(v43);
    }
    if (v48) {
      CFRelease(v48);
    }
    if (v50) {
      CFRelease(v50);
    }
    if (v55) {
      CFRelease(v55);
    }
    SessionDataPrivateData = v79;
    uint64_t v5 = v80;
    if (!v18)
    {
LABEL_119:
      if (!*(void *)(v5 + 7712))
      {
        CFTypeRef v65 = (CFTypeRef)*((void *)SessionDataPrivateData + 4);
        if (v65) {
          CFTypeRef v65 = CFRetain(v65);
        }
        *(void *)(v5 + 7712) = v65;
      }
LABEL_86:
      if (*(uint64_t *)(v5 + 9608) >= 1)
      {
        uint64_t v66 = FigGetUpTimeNanoseconds() - *(void *)(v5 + 9608);
        if (v66 >= 1)
        {
          uint64_t v67 = *(void *)(v5 + 9048);
          if (v67)
          {
            uint64_t v68 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v68) {
              uint64_t v69 = v68;
            }
            else {
              uint64_t v69 = 0;
            }
            char v70 = *(void (**)(uint64_t, uint64_t, uint64_t, unint64_t, void))(v69 + 56);
            if (v70) {
              v70(v67, 0x1EE582CD8, 0x1EE585098, v66 / 0xF4240uLL, 0);
            }
            uint64_t v71 = *(void *)(v5 + 9048);
            if (v71)
            {
              uint64_t v72 = *(void *)(CMBaseObjectGetVTable() + 16);
              uint64_t v73 = v72 ? v72 : 0;
              uint64_t v74 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v73 + 32);
              if (v74) {
                v74(v71, 0x1EE582CD8, 0x1EE5850B8, 1);
              }
            }
          }
        }
      }
      uint64_t v18 = 0;
    }
  }
LABEL_101:
  if (value) {
    CFRelease(value);
  }
  if (theArray) {
    CFRelease(theArray);
  }
  if (theDict) {
    CFRelease(theDict);
  }
  if (v9) {
    CFRelease(v9);
  }
  return v18;
}

void segPumpRTCReportingUpdateAndIssueErrorEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, const __CFURL *a7)
{
  CFTypeRef v13 = FigCFHTTPCreateURLString(a7);
  BOOL v43 = 0;
  uint64_t v14 = *(void *)(a1 + 9048);
  if (v14)
  {
    uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v15) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = 0;
    }
    uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v16 + 56);
    if (v17) {
      v17(v14, 0x1EE582B98, 0x1EE583E38, a2, 0);
    }
    uint64_t v18 = *(void *)(a1 + 9048);
    if (v18)
    {
      uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v19) {
        uint64_t v20 = v19;
      }
      else {
        uint64_t v20 = 0;
      }
      BOOL v21 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v20 + 48);
      if (v21) {
        v21(v18, 0x1EE582B98, 0x1EE583E58, a4, 0);
      }
      uint64_t v22 = *(void *)(a1 + 9048);
      if (v22)
      {
        uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v23) {
          uint64_t v24 = v23;
        }
        else {
          uint64_t v24 = 0;
        }
        uint64_t v25 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v24 + 48);
        if (v25) {
          v25(v22, 0x1EE582B98, 0x1EE583E78, a3, 0);
        }
        uint64_t v26 = *(void *)(a1 + 9048);
        if (v26)
        {
          uint64_t v27 = *(void *)(CMBaseObjectGetVTable() + 16);
          uint64_t v28 = v27 ? v27 : 0;
          CFTypeRef v29 = *(void (**)(uint64_t, uint64_t, uint64_t, void, void))(v28 + 56);
          if (v29) {
            v29(v26, 0x1EE582B98, 0x1EE583E98, a5, 0);
          }
        }
      }
    }
  }
  if (!segPumpIsConnectedWithHighSpeedHighPower(a1, &v43))
  {
    uint64_t v33 = *(void *)(a1 + 9048);
    if (!v33) {
      goto LABEL_35;
    }
    BOOL v34 = v43;
    uint64_t v35 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v35) {
      uint64_t v36 = v35;
    }
    else {
      uint64_t v36 = 0;
    }
    CFAllocatorRef v42 = *(void (**)(uint64_t, uint64_t, uint64_t, BOOL, void))(v36 + 56);
    if (v42) {
      v42(v33, 0x1EE582B98, 0x1EE583B38, v34, 0);
    }
  }
  uint64_t v30 = *(void *)(a1 + 9048);
  if (v30)
  {
    uint64_t v31 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v32 = v31 ? v31 : 0;
    uint64_t v37 = *(void (**)(uint64_t, uint64_t, uint64_t, void, void))(v32 + 56);
    if (v37) {
      v37(v30, 0x1EE582B98, 0x1EE583EB8, a6, 0);
    }
  }
LABEL_35:
  if (v13)
  {
    uint64_t v38 = *(void *)(a1 + 9048);
    if (v38)
    {
      uint64_t v39 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v40 = v39 ? v39 : 0;
      CFArrayRef v41 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef, void))(v40 + 48);
      if (v41) {
        v41(v38, 0x1EE582B98, 0x1EE55C318, v13, 0);
      }
    }
    segPumpRTCReportingIssueRTCReportingEvent(a1, 202);
    CFRelease(v13);
  }
  else
  {
    segPumpRTCReportingIssueRTCReportingEvent(a1, 202);
  }
}

void segPumpAppendErrorLogDictionary(uint64_t a1, const void *a2)
{
  if (a2)
  {
    CFArrayRef v4 = *(const __CFArray **)(a1 + 8672);
    if (v4
      || (CFArrayRef v4 = CFArrayCreateMutable(*(CFAllocatorRef *)(a1 + 56), 64, MEMORY[0x1E4F1D510]),
          (*(void *)(a1 + 8672) = v4) != 0))
    {
      if (!*(void *)(a1 + 9000))
      {
        CFMutableArrayRef Mutable = CFArrayCreateMutable(*(CFAllocatorRef *)(a1 + 56), 0, MEMORY[0x1E4F1D510]);
        *(void *)(a1 + 9000) = Mutable;
        if (!Mutable) {
          return;
        }
        CFArrayRef v4 = *(const __CFArray **)(a1 + 8672);
      }
      if (CFArrayGetCount(v4) >= 65) {
        CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 8672), 0);
      }
      CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 8672), a2);
      CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 9000), a2);
      CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
      CFDictionaryRef v7 = CFDictionaryCreate(AllocatorForMedia, (const void **)kFigBytePumpErrorLogNotificationKey_ErrorLogs, (const void **)(a1 + 9000), 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (v7)
      {
        CFDictionaryRef v8 = v7;
        segPumpReadyNotification((void *)a1, @"FBP_NewErrorLogEntry", v7);
        CFRelease(v8);
      }
    }
  }
}

uint64_t segPumpSessionDataIsLocalizedRenditionNameMetadata(uint64_t a1)
{
  uint64_t result = FigSessionDataSpecifierGetURL(a1);
  if (result)
  {
    if (FigSessionDataSpecifierGetFormatType(a1)
      && FigSessionDataSpecifierGetFormatType(a1) != 1)
    {
      return 0;
    }
    else
    {
      FigSessionDataSpecifierGetIdentifier(a1);
      return FigCFEqual() != 0;
    }
  }
  return result;
}

uint64_t segPumpIsConnectedWithHighSpeedHighPower(uint64_t a1, BOOL *a2)
{
  uint64_t v2 = *(void *)(a1 + 8472);
  if (!v2) {
    return 4294954513;
  }
  CFTypeRef cf = 0;
  uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  CFDictionaryRef v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v6 + 48);
  if (!v8) {
    return 4294954514;
  }
  uint64_t v7 = v8(v2, 0x1EE57E3F8, AllocatorForMedia, &cf);
  CFTypeRef v9 = cf;
  if (!v7) {
    *a2 = cf == (CFTypeRef)*MEMORY[0x1E4F1CFD0];
  }
  if (v9) {
    CFRelease(v9);
  }
  return v7;
}

uint64_t segPumpRTCReportingIssueRTCReportingEvent(uint64_t result, uint64_t a2)
{
  if (!result) {
    return result;
  }
  uint64_t v2 = *(void *)(result + 9048);
  if (!v2) {
    return result;
  }
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v6 = *(void *)(VTable + 16);
  uint64_t result = VTable + 16;
  uint64_t v5 = v6;
  if (a2 == 202)
  {
    if (v5) {
      uint64_t v7 = v5;
    }
    else {
      uint64_t v7 = 0;
    }
    CFTypeRef v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v7 + 8);
    if (v9)
    {
      uint64_t v10 = v2;
      uint64_t v11 = 202;
      uint64_t v12 = 1;
LABEL_14:
      return v9(v10, 0x1EE582B98, v11, v12, 0);
    }
  }
  else
  {
    if (v5) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = 0;
    }
    CFTypeRef v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v8 + 8);
    if (v9)
    {
      uint64_t v10 = v2;
      uint64_t v11 = a2;
      uint64_t v12 = 0;
      goto LABEL_14;
    }
  }
  return result;
}

uint64_t segPumpSessionDataIsChapterMetadata(uint64_t a1)
{
  uint64_t result = FigSessionDataSpecifierGetURL(a1);
  if (result)
  {
    FigSessionDataSpecifierGetIdentifier(a1);
    return FigCFEqual() != 0;
  }
  return result;
}

uint64_t segPumpCreateURLWithQueryParams(uint64_t a1, CFTypeRef cf, const __CFArray *a3, const __CFURL **a4)
{
  CFArrayRef v5 = a3;
  if (cf)
  {
    CFURLRef v8 = (const __CFURL *)CFRetain(cf);
    if (v5) {
      goto LABEL_3;
    }
LABEL_31:
    uint64_t v30 = 0;
LABEL_49:
    *a4 = v8;
    return v30;
  }
  CFURLRef v8 = 0;
  if (!a3) {
    goto LABEL_31;
  }
LABEL_3:
  if (!*(unsigned char *)(a1 + 328))
  {
    uint64_t v11 = 0;
    goto LABEL_33;
  }
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFMutableArrayRef MutableCopy = CFArrayCreateMutableCopy(AllocatorForMedia, 0, v5);
  if (!MutableCopy)
  {
    uint64_t v30 = FigSignalErrorAt();
    goto LABEL_49;
  }
  uint64_t v11 = MutableCopy;
  CFAllocatorRef v12 = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFMutableArrayRef Mutable = CFArrayCreateMutable(v12, 0, MEMORY[0x1E4F1D510]);
  if (Mutable)
  {
    CFArrayRef v14 = Mutable;
    if (CFArrayGetCount(v11) <= 1)
    {
LABEL_13:
      v48.length = CFArrayGetCount(v14);
      v48.location = 0;
      CFArraySortValues(v14, v48, (CFComparatorFunction)segPumpQueryParamsCFComparator, 0);
      CFArrayRemoveAllValues(v11);
      if (CFArrayGetCount(v14) >= 1)
      {
        CFIndex v25 = 0;
        do
        {
          CFArrayRef ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(v14, v25);
          uint64_t v27 = CFArrayGetValueAtIndex(ValueAtIndex, 0);
          CFArrayAppendValue(v11, v27);
          CFArrayRef v28 = (const __CFArray *)CFArrayGetValueAtIndex(v14, v25);
          CFTypeRef v29 = CFArrayGetValueAtIndex(v28, 1);
          CFArrayAppendValue(v11, v29);
          ++v25;
        }
        while (v25 < CFArrayGetCount(v14));
      }
      uint64_t v30 = 0;
    }
    else
    {
      CFIndex v15 = 0;
      CFIndex v16 = 1;
      uint64_t v17 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
      while (1)
      {
        CFAllocatorRef v18 = (const __CFAllocator *)FigGetAllocatorForMedia();
        CFMutableArrayRef v19 = CFArrayCreateMutable(v18, 0, v17);
        if (!v19) {
          break;
        }
        uint64_t v20 = v19;
        BOOL v21 = CFArrayGetValueAtIndex(v11, v16 - 1);
        CFArraySetValueAtIndex(v20, 0, v21);
        uint64_t v22 = CFArrayGetValueAtIndex(v11, v16);
        CFArraySetValueAtIndex(v20, 1, v22);
        CFArraySetValueAtIndex(v14, v15, v20);
        CFRelease(v20);
        ++v15;
        CFIndex Count = CFArrayGetCount(v11);
        if (Count >= 0) {
          uint64_t v24 = Count;
        }
        else {
          uint64_t v24 = Count + 1;
        }
        v16 += 2;
        if (v15 >= v24 >> 1) {
          goto LABEL_13;
        }
      }
      uint64_t v30 = FigSignalErrorAt();
    }
    CFRelease(v14);
    if (v30) {
      goto LABEL_44;
    }
    goto LABEL_18;
  }
  uint64_t v30 = FigSignalErrorAt();
  if (!v30)
  {
LABEL_18:
    Params = FigCFHTTPCopyQueryParams((uint64_t)cf);
    if (CFArrayGetCount(Params) >= 1 && CFArrayGetCount(Params) >= 2)
    {
      uint64_t v32 = 0;
      CFIndex v33 = 1;
      do
      {
        CFStringRef v34 = (const __CFString *)CFArrayGetValueAtIndex(Params, v33 - 1);
        if (!CFStringHasPrefix(v34, @"_HLS"))
        {
          CFArrayAppendValue(v11, v34);
          uint64_t v35 = CFArrayGetValueAtIndex(Params, v33);
          CFArrayAppendValue(v11, v35);
        }
        ++v32;
        CFIndex v36 = CFArrayGetCount(Params);
        if (v36 >= 0) {
          uint64_t v37 = v36;
        }
        else {
          uint64_t v37 = v36 + 1;
        }
        v33 += 2;
      }
      while (v32 < v37 >> 1);
    }
    if (Params) {
      CFRelease(Params);
    }
    CFArrayRef v5 = v11;
LABEL_33:
    CFIndex v38 = CFArrayGetCount(v5);
    if (v38 < 1)
    {
      uint64_t v30 = 0;
    }
    else
    {
      CFIndex v39 = v38;
      CFIndex v40 = 0;
      while (1)
      {
        CFTypeRef cfa = 0;
        CFStringRef v41 = (const __CFString *)CFArrayGetValueAtIndex(v5, v40);
        CFIndex v42 = v40 + 1;
        BOOL v43 = CFArrayGetValueAtIndex(v5, v40 + 1);
        uint64_t v44 = FigCFHTTPCreateURLWithQueryParam(v8, v41, (uint64_t)v43, &cfa);
        if (v44) {
          break;
        }
        CFURLRef v45 = (const __CFURL *)cfa;
        if (cfa) {
          CFRetain(cfa);
        }
        if (v8) {
          CFRelease(v8);
        }
        CFRelease(cfa);
        v40 += 2;
        CFURLRef v8 = v45;
        if (v42 + 1 >= v39)
        {
          uint64_t v30 = 0;
          CFURLRef v8 = v45;
          goto LABEL_44;
        }
      }
      uint64_t v30 = v44;
    }
  }
LABEL_44:
  *a4 = v8;
  if (v11) {
    CFRelease(v11);
  }
  return v30;
}

uint64_t segPumpAmendHTTPRequestFlags(unsigned char *a1, _DWORD *a2)
{
  if (!a2) {
    return FigSignalErrorAt();
  }
  if (a1[324]) {
    *a2 |= 0x80u;
  }
  if (a1[325]) {
    *a2 |= 0x800u;
  }
  if (a1[326]) {
    *a2 |= 0x1000u;
  }
  if (a1[328]) {
    *a2 |= 0x4000u;
  }
  if (a1[9584]) {
    *a2 |= 0x8000u;
  }
  if (a1[9633]) {
    *a2 |= 0x10000u;
  }
  return 0;
}

__CFDictionary *segPumpCopyHTTPRequestCreationsOptionsAndSetNWActivityAndStuff(float a1, uint64_t a2, uint64_t a3, void *a4, int a5, const void *a6)
{
  FigGetAllocatorForMedia();
  CFMutableArrayRef MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
  if (!a3)
  {
    FigSignalErrorAt();
    return MutableCopy;
  }
  if (!a5)
  {
    CFTypeRef v13 = 0;
    if (!a6) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  CFTypeRef cf = 0;
  int v12 = segPumpCopyParentNWActivity(a3, a4, &cf);
  if (v12)
  {
    int v14 = v12;
    CFTypeRef v13 = 0;
  }
  else
  {
    CFTypeRef v13 = (const void *)nw_activity_create();
    if (v13)
    {
      if (!cf)
      {
LABEL_10:
        FigCFDictionarySetValue();
        goto LABEL_11;
      }
      nw_activity_set_parent_activity();
      int v14 = 0;
    }
    else
    {
      int v14 = FigSignalErrorAt();
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  if (!v14) {
    goto LABEL_10;
  }
LABEL_11:
  if (a6) {
LABEL_12:
  }
    CFDictionarySetValue(MutableCopy, @"FHRP_DependentPipelinePrecursor", a6);
LABEL_13:
  if (a1 != 0.5) {
    FigCFDictionarySetDouble();
  }
  if (*(unsigned char *)(a3 + 328))
  {
    CFIndex v15 = 0;
  }
  else
  {
    CFIndex v15 = (const void *)FigNetworkUrgencyMonitorCopyExpectedProgressTarget(*(void *)(a3 + 9512));
    if (v15) {
      CFDictionarySetValue(MutableCopy, @"FHRP_CreateExpectedProgressTarget", v15);
    }
  }
  if (v13) {
    CFRelease(v13);
  }
  if (v15) {
    CFRelease(v15);
  }
  return MutableCopy;
}

uint64_t segPumpGetCurrentRTT(void *a1)
{
  uint64_t v1 = (a1[1073] + 2 * a1[1074]) / 3;
  if (a1[1075] <= a1[1076]) {
    uint64_t v2 = 0;
  }
  else {
    uint64_t v2 = FigGetUpTimeNanoseconds() - a1[1075];
  }
  if (v2 > v1)
  {
    unint64_t v3 = (unsigned __int128)((v2 + 2 * v1) * (__int128)0x5555555555555556) >> 64;
    uint64_t v1 = v3 + (v3 >> 63);
  }
  if (v1 <= 0) {
    return 100000;
  }
  else {
    return v1;
  }
}

CFComparisonResult segPumpQueryParamsCFComparator(const __CFArray *a1, const __CFArray *a2)
{
  CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(a1, 0);
  CFStringRef v5 = (const __CFString *)CFArrayGetValueAtIndex(a2, 0);
  CFComparisonResult result = CFStringCompare(ValueAtIndex, v5, 0);
  if (result == kCFCompareEqualTo)
  {
    CFStringRef v7 = (const __CFString *)CFArrayGetValueAtIndex(a1, 1);
    CFStringRef v8 = (const __CFString *)CFArrayGetValueAtIndex(a2, 1);
    return CFStringCompare(v7, v8, 0);
  }
  return result;
}

uint64_t segPumpCopyParentNWActivity(uint64_t a1, void *a2, void *a3)
{
  if (a1
    && a3
    && (a2
     && ((CFStringRef v5 = (const void *)a2[148]) != 0
      || (CFStringRef v5 = *(const void **)(*(void *)(a1 + 16 * *a2 + 384) + 1176)) != 0)
     && (CFTypeRef v6 = CFRetain(v5)) != 0
     || (v7 = *(const void **)(a1 + 9496)) != 0 && (CFTypeRef v6 = CFRetain(v7)) != 0))
  {
    if (!FigCFEqual())
    {
LABEL_12:
      *a3 = v6;
      return 0;
    }
    uint64_t v8 = nw_activity_create();
    if (v8)
    {
      CFTypeRef v9 = (const void *)v8;
      nw_activity_set_parent_activity();
      CFRelease(v6);
      CFTypeRef v6 = v9;
      goto LABEL_12;
    }
    uint64_t v11 = FigSignalErrorAt();
    CFRelease(v6);
    return v11;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t segPumpHandleSessionDataNetworkError(uint64_t a1, uint64_t a2, int a3, __CFString *a4, const void *a5, BOOL *a6)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v13 = *(void *)(DerivedStorage + 7776);
  uint64_t v32 = 0;
  SessionDataPrivateData = segPumpEnsureAndGetSessionDataPrivateData(*(const void **)(DerivedStorage + 7896));
  CFTypeRef cf = 0;
  if (a6) {
    *a6 = 0;
  }
  ++*(_DWORD *)(DerivedStorage + 7824);
  uint64_t ErrorFromHTTPRequestIfAvailable = segPumpCreateErrorFromHTTPRequestIfAvailable(v13, a3, a4, a5, (uint64_t *)&cf);
  CFIndex v16 = (void *)cf;
  if (ErrorFromHTTPRequestIfAvailable) {
    goto LABEL_54;
  }
  uint64_t v17 = *(const void **)(DerivedStorage + 7832);
  *(void *)(DerivedStorage + 7832) = cf;
  if (v16) {
    CFRetain(v16);
  }
  if (v17) {
    CFRelease(v17);
  }
  if (segPumpSessionDataIsChapterMetadata(*(void *)(DerivedStorage + 7896)))
  {
    if (!*(void *)(DerivedStorage + 7720))
    {
      CFTypeRef v18 = *(CFTypeRef *)(DerivedStorage + 7832);
      if (v18) {
        CFTypeRef v18 = CFRetain(v18);
      }
      *(void *)(DerivedStorage + 7720) = v18;
    }
  }
  else if (segPumpSessionDataIsLocalizedRenditionNameMetadata(*(void *)(DerivedStorage + 7896)))
  {
    if (!*(void *)(DerivedStorage + 7736))
    {
      CFTypeRef v19 = *(CFTypeRef *)(DerivedStorage + 7832);
      if (v19) {
        CFTypeRef v19 = CFRetain(v19);
      }
      *(void *)(DerivedStorage + 7736) = v19;
    }
  }
  else if (!*(void *)(DerivedStorage + 7704))
  {
    CFTypeRef v20 = *(CFTypeRef *)(DerivedStorage + 7832);
    if (v20) {
      CFTypeRef v20 = CFRetain(v20);
    }
    *(void *)(DerivedStorage + 7704) = v20;
  }
  uint64_t v21 = *(void *)(DerivedStorage + 7776);
  uint64_t v34 = 0;
  CFErrorGetCode((CFErrorRef)v16);
  CFErrorGetDomain((CFErrorRef)v16);
  CFDictionaryRef v22 = CFErrorCopyUserInfo((CFErrorRef)v16);
  CFTypeRef v33 = 0;
  uint64_t CommonActionForNetworkError = segPumpGetCommonActionForNetworkError((__CFError *)v16, &v34, &v32);
  if (CommonActionForNetworkError) {
    goto LABEL_53;
  }
  uint64_t v24 = v34;
  if (v21 || v34 != 1) {
    goto LABEL_28;
  }
  uint64_t CommonActionForNetworkError = FigCFHTTPCreateCFErrorFromHTTPStatusCode(-12938, (CFErrorRef *)&v33);
  if (CommonActionForNetworkError
    || (uint64_t CommonActionForNetworkError = segPumpGetCommonActionForNetworkError((__CFError *)v33, &v34, &v32),
        CommonActionForNetworkError))
  {
LABEL_53:
    uint64_t v25 = CommonActionForNetworkError;
    uint64_t v24 = 0;
    goto LABEL_35;
  }
  uint64_t v24 = v34;
LABEL_28:
  if ((v24 & 0xFFFFFFFFFFFFFFFDLL) == 1)
  {
    if (v24 == 3)
    {
      uint64_t v25 = 0;
      if (*(unsigned char *)(DerivedStorage + 8177))
      {
        uint64_t v24 = 3;
      }
      else
      {
        uint64_t v24 = 6;
        uint64_t v34 = 6;
      }
    }
    else
    {
      uint64_t v25 = 0;
    }
  }
  else
  {
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v34 = 0;
  }
LABEL_35:
  if (v33) {
    CFRelease(v33);
  }
  if (v22) {
    CFRelease(v22);
  }
  if (v25) {
    goto LABEL_50;
  }
  if (v24 == 1)
  {
    segPumpResetConnectionByPreservingConnectionStats(DerivedStorage, DerivedStorage + 7760);
    uint64_t v26 = segPumpEnsureAndGetSessionDataPrivateData(*(const void **)(DerivedStorage + 7896));
    uint64_t URL = FigSessionDataSpecifierGetURL(*(void *)(DerivedStorage + 7896));
    uint64_t ErrorFromHTTPRequestIfAvailable = segPumpCustomURLLoaderGetURLGuts((uint64_t *)DerivedStorage, URL, 0, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)v26 + 24);
    if (!ErrorFromHTTPRequestIfAvailable)
    {
      segPumpAppendErrorLogEntryWithCFError(a1, DerivedStorage, a2, (const __CFURL **)(DerivedStorage + 7760), (CFErrorRef)v16, 4u, 3u);
      if (a6)
      {
        BOOL v28 = 1;
        goto LABEL_47;
      }
      uint64_t v25 = 0;
      goto LABEL_50;
    }
LABEL_54:
    uint64_t v25 = ErrorFromHTTPRequestIfAvailable;
    if (!v16) {
      return v25;
    }
    goto LABEL_51;
  }
  SessionDataPrivateData[16] = 0;
  uint64_t v29 = segPumpHandleCommonNetworkError(a1, a2, v24, v32, (const __CFURL **)(DerivedStorage + 7760), 3u, v16);
  uint64_t v25 = v29;
  if (a6 && !v29)
  {
    BOOL v28 = v24 == 3;
LABEL_47:
    uint64_t v25 = 0;
    *a6 = v28;
    if (!v16) {
      return v25;
    }
    goto LABEL_51;
  }
LABEL_50:
  if (v16) {
LABEL_51:
  }
    CFRelease(v16);
  return v25;
}

uint64_t segPumpSetWiFiStatsOnNetworkPredictor(uint64_t a1, uint64_t a2)
{
  int valuePtr = segPumpGetInterfaceTypeEnum(a1, a2);
  CFNumberRef v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, &valuePtr);
  if (!v3) {
    return FigSignalErrorAt();
  }
  CFNumberRef v4 = v3;
  uint64_t v5 = *(void *)(a1 + 96);
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, CFNumberRef))(v7 + 56);
  if (v8) {
    v8(v5, 0x1EE581D58, v4);
  }
  if (FigRCLGetNumberWithDefault(*(const __CFDictionary **)(a1 + 9128), @"useAdaptiveBayesianNetworkPrediction"))
  {
    CFTypeRef cf = 0;
    uint64_t v9 = FigNetworkWirelessReportingInterfaceCopyWifiStats(&cf);
    if (!v9)
    {
      Stringuint64_t Value = (const void *)FigCFDictionaryGetStringValue();
      if (StringValue) {
        CFTypeRef v11 = CFRetain(StringValue);
      }
      else {
        CFTypeRef v11 = 0;
      }
      Numberuint64_t Value = FigCFDictionaryGetNumberValue();
      if (NumberValue)
      {
        uint64_t v13 = NumberValue;
        uint64_t v14 = *(void *)(a1 + 96);
        uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v16 = v15 ? v15 : 0;
        uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 56);
        if (v17) {
          v17(v14, 0x1EE581DB8, v13);
        }
      }
      if (v11)
      {
        uint64_t v18 = *(void *)(a1 + 96);
        uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v19) {
          uint64_t v20 = v19;
        }
        else {
          uint64_t v20 = 0;
        }
        uint64_t v21 = *(void (**)(uint64_t, uint64_t, CFTypeRef))(v20 + 56);
        if (v21) {
          v21(v18, 0x1EE581D98, v11);
        }
        CFRelease(v11);
      }
    }
    if (cf) {
      CFRelease(cf);
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  CFRelease(v4);
  return v9;
}

void segPumpParseSessionDataFromConnection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  cf[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  CFTypeRef v16 = 0;
  CMBlockBufferRef blockBufferOut = 0;
  CFHTTPMessageRef message = 0;
  if (CMBlockBufferGetDataLength(*(CMBlockBufferRef *)(a2 + 7872)) <= 1)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    segPumpAppendErrorLogEntry(a1, a2, a3, (const __CFURL **)(a2 + 7760), -12886, @"CoreMediaErrorDomain", @"0 length session data file", 0, 0, 4u, 1u);
    segPumpResetConnection(a2, a2 + 7760);
    goto LABEL_12;
  }
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  uint64_t v8 = *(OpaqueCMBlockBuffer **)(a2 + 7872);
  CFAllocatorRef v9 = (const __CFAllocator *)FigGetAllocatorForMedia();
  if (!CMBlockBufferCreateContiguous(AllocatorForMedia, v8, v9, 0, 0, 0, 0, &blockBufferOut))
  {
    if (!*(void *)(a2 + 296))
    {
LABEL_10:
      FigGetAllocatorForMedia();
      if (!FigCreateCFDataWithBlockBufferNoCopy()) {
        FigSignalErrorAt();
      }
      goto LABEL_12;
    }
    uint64_t URL = (const void *)FigSessionDataSpecifierGetURL(*(void *)(a2 + 7896));
    CMBlockBufferRef v11 = blockBufferOut;
    cf[0] = 0;
    if (*(void *)(a2 + 296))
    {
      __int16 URLAndString = segPumpCreateURLAndString(URL, 0, cf);
      CFTypeRef v13 = cf[0];
      if (!URLAndString)
      {
        __int16 v14 = FigStreamingCacheSetSessionData(*(void *)(a2 + 296), cf[0], v11);
        CFTypeRef v13 = cf[0];
        if (!cf[0]) {
          goto LABEL_9;
        }
        goto LABEL_8;
      }
      __int16 v14 = URLAndString;
      if (cf[0]) {
LABEL_8:
      }
        CFRelease(v13);
    }
    else
    {
      __int16 v14 = FigSignalErrorAt();
    }
LABEL_9:
    if (v14) {
      goto LABEL_12;
    }
    goto LABEL_10;
  }
LABEL_12:
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
}

uint64_t segPumpCreateErrorFromHTTPRequestIfAvailable(uint64_t a1, int a2, __CFString *a3, CFTypeRef cf, uint64_t *a5)
{
  CFTypeRef cfa = 0;
  uint64_t v24 = 0;
  if (!a1) {
    goto LABEL_15;
  }
  uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
  uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  CFTypeRef v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(v12 + 48);
  if (v13)
  {
    v13(a1, 0x1EE57B638, AllocatorForMedia, &v24);
    uint64_t CFError = v24;
    if (v24) {
      goto LABEL_21;
    }
  }
  uint64_t v15 = FigGetAllocatorForMedia();
  uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v16) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = 0;
  }
  uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v17 + 48);
  if (!v18)
  {
    uint64_t v20 = 4294954514;
    goto LABEL_22;
  }
  uint64_t v19 = v18(a1, 0x1EE57B658, v15, &cfa);
  if (v19)
  {
    uint64_t v20 = v19;
    if (v19 != -12783) {
      goto LABEL_22;
    }
  }
  uint64_t CFError = v24;
  if (v24)
  {
LABEL_21:
    uint64_t v20 = 0;
    *a5 = CFError;
    goto LABEL_22;
  }
  a3 = @"CoreMediaErrorDomain";
  CFTypeRef v21 = cfa;
  if (!cfa)
  {
LABEL_15:
    if (cf) {
      CFTypeRef v21 = CFRetain(cf);
    }
    else {
      CFTypeRef v21 = 0;
    }
    CFTypeRef cfa = v21;
  }
  uint64_t CFError = FigCreateCFError(a3, a2, v21, 0, 0, 0, 0);
  uint64_t v24 = CFError;
  if (CFError) {
    goto LABEL_21;
  }
  uint64_t v20 = FigSignalErrorAt();
LABEL_22:
  if (cfa) {
    CFRelease(cfa);
  }
  return v20;
}

void segPumpResetConnectionByPreservingConnectionStats(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v4 = *(void *)(a2 + 24);
    int v5 = *(_DWORD *)(a2 + 64);
    uint64_t v6 = *(const void **)(a2 + 72);
    if (v6) {
      CFTypeRef v7 = CFRetain(v6);
    }
    else {
      CFTypeRef v7 = 0;
    }
    segPumpResetConnection(a1, a2);
    *(void *)(a2 + 24) = v4;
    *(_DWORD *)(a2 + 64) = v5;
    if (v7)
    {
      *(void *)(a2 + 72) = CFRetain(v7);
      CFRelease(v7);
    }
    else
    {
      *(void *)(a2 + 72) = 0;
    }
  }
}

void segPumpAppendErrorLogEntryWithCFError(uint64_t a1, uint64_t a2, uint64_t a3, const __CFURL **a4, CFErrorRef err, unsigned int a6, unsigned int a7)
{
  int Code = CFErrorGetCode(err);
  CFErrorDomain Domain = CFErrorGetDomain(err);
  CFStringRef v16 = CFErrorCopyDescription(err);
  CFDictionaryRef v17 = CFErrorCopyUserInfo(err);
  segPumpAppendErrorLogEntry(a1, a2, a3, a4, Code, Domain, v16, v17, 1u, a6, a7);
  if (v16) {
    CFRelease(v16);
  }
  if (v17)
  {
    CFRelease(v17);
  }
}

uint64_t segPumpHandleCommonNetworkError(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, const __CFURL **a5, unsigned int a6, void *a7)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a7)
  {
    uint64_t v14 = DerivedStorage;
    int v15 = 1;
    int v16 = 3;
    CFDictionaryRef v17 = a7;
    unsigned int v18 = 1;
    switch(a3)
    {
      case 0:
        break;
      case 1:
      case 5:
        goto LABEL_3;
      case 3:
        uint64_t v20 = *(const void **)(a2 + 1152);
        *(void *)(a2 + 1152) = a7;
        CFRetain(a7);
        if (v20) {
          CFRelease(v20);
        }
        if (*(unsigned char *)(v14 + 8176)) {
          uint64_t v21 = 7;
        }
        else {
          uint64_t v21 = 6;
        }
        uint64_t result = segPumpAttemptToRetryRequest(a1, a2, (uint64_t)a5, v21, a4);
        if (result) {
          return result;
        }
        goto LABEL_21;
      case 6:
        goto LABEL_23;
      case 7:
        if ((a4 & 4) != 0)
        {
          uint64_t result = segPumpMoveAlternatesMatchingHostAndPathwayToPenaltyBox(a1, *(const __CFURL **)(a2 + 16), *(void *)(a2 + 40), a4 & 1);
          if (result) {
            return result;
          }
        }
        uint64_t v22 = a1;
        uint64_t v23 = (uint64_t *)a2;
        int v24 = 0;
LABEL_17:
        uint64_t result = segPumpMoveStreamAlternateToPenaltyBox(v22, v23, v24, a4 & 1);
        if (result) {
          return result;
        }
        int v16 = 2;
        break;
      case 8:
        uint64_t v22 = a1;
        uint64_t v23 = (uint64_t *)a2;
        int v24 = 1;
        goto LABEL_17;
      case 9:
        uint64_t result = FigSignalErrorAt();
        if (!result) {
          goto LABEL_20;
        }
        return result;
      default:
LABEL_20:
        uint64_t result = FigSignalErrorAt();
        if (result) {
          return result;
        }
LABEL_21:
        int v16 = 3;
        break;
    }
    int v15 = 0;
    CFDictionaryRef v17 = 0;
    unsigned int v18 = v16;
LABEL_23:
    uint64_t v27 = v17;
    if (a6 < 4) {
      unsigned int v25 = a6 + 1;
    }
    else {
      unsigned int v25 = 0;
    }
    segPumpAppendErrorLogEntryWithCFError(a1, v14, a2, a5, (CFErrorRef)a7, v25, v18);
    if (dword_1E9351350)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (v15) {
      segPumpSendEndCallbackForAllActiveStreams(*(void *)v14, v27);
    }
    return 0;
  }
  else
  {
LABEL_3:
    return FigSignalErrorAt();
  }
}

uint64_t segPumpGetCommonActionForNetworkError(__CFError *a1, uint64_t *a2, void *a3)
{
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t result = FigStreamingNetworkErrorGetRecommendedAction(a1, &v8, &v7);
  if (!result)
  {
    if (a2)
    {
      uint64_t v6 = v8;
      if (v8 == 2) {
        uint64_t v6 = 7;
      }
      *a2 = v6;
    }
    if (a3) {
      *a3 = v7;
    }
  }
  return result;
}

void segPumpAppendErrorLogEntry(uint64_t a1, uint64_t a2, uint64_t a3, const __CFURL **a4, uint64_t a5, const void *a6, const void *a7, const void *a8, unsigned __int8 a9, unsigned int a10, unsigned int a11)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  if (a4) {
    CFURLRef v32 = *a4;
  }
  else {
    CFURLRef v32 = 0;
  }
  int v16 = a9;
  CFTypeRef cf = 0;
  CFHTTPMessageRef message = 0;
  if (dword_1E9351350)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    int v16 = a9;
  }
  if (v16)
  {
    int InterfaceTypeEnum = segPumpGetInterfaceTypeEnum(a2, (uint64_t)a4);
    CMTimeValue value = FigErrorLogGetStringFromInterfaceType(InterfaceTypeEnum);
  }
  else
  {
    CMTimeValue value = 0;
  }
  CFDictionaryRef theDict = FigNetworkInterfaceReporterCopyPhysicalStatistics(*(void *)(a2 + 9120));
  segPumpRTCReportingUpdateAndIssueErrorEvent(a2, a5, (uint64_t)a6, (uint64_t)a7, a10, a11, v32);
  if (a4)
  {
    CFDictionaryRef v21 = a4[2];
    if (v21)
    {
      uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
      uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v22) {
        uint64_t v23 = v22;
      }
      else {
        uint64_t v23 = 0;
      }
      unsigned int v25 = *(void (**)(CFDictionaryRef, uint64_t, uint64_t, CFHTTPMessageRef *))(v23 + 48);
      if (v25 && (v25(v21, 0x1EE57B5F8, AllocatorForMedia, &message), message)) {
        CFDictionaryRef v21 = CFHTTPMessageCopyAllHeaderFields(message);
      }
      else {
        CFDictionaryRef v21 = 0;
      }
    }
    uint64_t v24 = (uint64_t)a4[2];
  }
  else
  {
    CFDictionaryRef v21 = 0;
    uint64_t v24 = 0;
  }
  Entry = FigErrorLogCreateEntry(*(const __CFAllocator **)(a2 + 56), v24, v32, *(const void **)(a2 + 224), a5, a6, a7, a8, value, theDict, a10, a11, v21);
  if (theDict) {
    CFRelease(theDict);
  }
  segPumpAppendErrorLogDictionary(a2, Entry);
  uint64_t CFError = (const void *)FigCreateCFError(a6, a5, a7, 0, 0, v32, 0);
  CFAllocatorRef v28 = (const __CFAllocator *)FigGetAllocatorForMedia();
  long long v35 = *MEMORY[0x1E4F1F9F8];
  uint64_t v36 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  FigMetricErrorEventCreate(v28, &v35, 0, 0, 1, CFError, &cf);
  segPumpPublishMetricEvent(a1, a2, (void *)cf);
  if (v21) {
    CFRelease(v21);
  }
  if (message) {
    CFRelease(message);
  }
  if (Entry) {
    CFRelease(Entry);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (CFError) {
    CFRelease(CFError);
  }
}

uint64_t segPumpPublishMetricEvent(uint64_t a1, uint64_t a2, void *value)
{
  if (!value) {
    return 4294954656;
  }
  uint64_t v5 = *(void *)(a2 + 9016);
  if (!v5)
  {
    if (*(unsigned char *)(a2 + 9032))
    {
      CFMutableArrayRef Mutable = *(__CFArray **)(a2 + 9024);
      if (!Mutable)
      {
        CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
        CFMutableArrayRef Mutable = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D510]);
        *(void *)(a2 + 9024) = Mutable;
        if (!Mutable) {
          return 4294954510;
        }
      }
      CFArrayAppendValue(Mutable, value);
    }
    return 0;
  }
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, void *))(v8 + 40);
  if (!v12) {
    return 4294954514;
  }

  return v12(v5, a1, value);
}

uint64_t segPumpGetInterfaceTypeEnum(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  if (a2 && (uint64_t v3 = *(void *)(a2 + 16)) != 0
    || (uint64_t v4 = *(void *)(a1 + 16 * *(void *)(a1 + 8416) + 384), (v3 = *(void *)(*(void *)(v4 + 696) + 32)) != 0)
    || (uint64_t v3 = *(void *)(v4 + 424)) != 0)
  {
    CFTypeRef cf = 0;
    uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v7 = v6 ? v6 : 0;
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v7 + 48);
    if (v8)
    {
      int v9 = v8(v3, 0x1EE57B6B8, AllocatorForMedia, &cf);
      CFTypeRef v10 = cf;
      if (v9)
      {
        uint64_t InterfaceTypeFromCFNStats = 0;
        if (!cf) {
          goto LABEL_13;
        }
      }
      else
      {
        uint64_t InterfaceTypeFromCFNStats = FigNetworkInterfaceGetInterfaceTypeFromCFNStats((uint64_t)cf);
        CFTypeRef v10 = cf;
        if (!cf)
        {
LABEL_13:
          if (InterfaceTypeFromCFNStats) {
            return InterfaceTypeFromCFNStats;
          }
          goto LABEL_14;
        }
      }
      CFRelease(v10);
      goto LABEL_13;
    }
  }
LABEL_14:
  uint64_t InterfaceTypeFromCFNStats = (uint64_t)FigNetworkInterfaceReporterGetInterfaceType(*(unsigned char **)(a1 + 9120));
  if (!InterfaceTypeFromCFNStats)
  {
    if (*(void *)(a1 + 8448)) {
      return FigNetworkPathInformationGetInterfaceType();
    }
    return 0;
  }
  return InterfaceTypeFromCFNStats;
}

uint64_t segPumpMoveAlternatesMatchingHostAndPathwayToPenaltyBox(uint64_t a1, const __CFURL *a2, uint64_t a3, char a4)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    if (a3)
    {
      CFStringRef v9 = CFURLCopyHostName(a2);
      if (v9)
      {
        CFStringRef v10 = v9;
        uint64_t v11 = (uint64_t *)DerivedStorage[1012];
        while (v11)
        {
          uint64_t v12 = v11;
          uint64_t v11 = (uint64_t *)*v11;
          uint64_t v13 = v12[1];
          if (v13)
          {
            PlaylistAlternateuint64_t URL = (const __CFURL *)FigAlternateGetPlaylistAlternateURL(v12[1]);
            if (PlaylistAlternateURL)
            {
              CFStringRef v15 = CFURLCopyHostName(PlaylistAlternateURL);
              if (v15)
              {
                CFStringRef v16 = v15;
                if (CFStringCompare(v15, v10, 1uLL))
                {
                  CFRelease(v16);
                }
                else
                {
                  FigAlternateGetPathwayID(v13);
                  int v17 = FigCFEqual();
                  CFRelease(v16);
                  if (v17)
                  {
                    uint64_t valid = MoveAlternateFromValidList(a1, v12, 0, a4);
                    if (valid)
                    {
                      uint64_t updated = valid;
                      goto LABEL_15;
                    }
                  }
                }
              }
            }
          }
        }
        goto LABEL_17;
      }
    }
  }
  uint64_t updated = FigSignalErrorAt();
  CFStringRef v10 = 0;
LABEL_15:
  if (!updated || updated == -12880) {
LABEL_17:
  }
    uint64_t updated = segPumpUpdateAlternateSelectionBossNetworkErrorFilter(DerivedStorage, 0);
  if (v10) {
    CFRelease(v10);
  }
  return updated;
}

uint64_t segPumpMoveStreamAlternateToPenaltyBox(uint64_t a1, uint64_t *a2, int a3, char a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFStringRef v9 = (void *)DerivedStorage;
  uint64_t v10 = *(void *)(DerivedStorage + 8416);
  for (uint64_t i = 384; i != 432; i += 16)
  {
    if (v10 && *(void *)(*(void *)(DerivedStorage + i) + 16))
    {
      uint64_t v13 = CMBaseObjectGetDerivedStorage();
      uint64_t v14 = CMBaseObjectGetDerivedStorage();
      uint64_t v15 = v14 + 16 * *a2;
      if (*(uint64_t **)(v15 + 384) == a2)
      {
        uint64_t v17 = 8144;
      }
      else
      {
        if (*(uint64_t **)(v15 + 392) != a2) {
          return segPumpUpdateAlternateSelectionBossNetworkErrorFilter(v9, a3);
        }
        uint64_t v17 = 7680;
      }
      unsigned int v18 = (uint64_t *)(v14 + v17);
      if ((unint64_t)*a2 > 2) {
        return segPumpUpdateAlternateSelectionBossNetworkErrorFilter(v9, a3);
      }
      uint64_t v19 = *v18;
      if (!*v18) {
        return segPumpUpdateAlternateSelectionBossNetworkErrorFilter(v9, a3);
      }
      uint64_t v34 = 0;
      uint64_t v35 = 0;
      uint64_t v33 = 0;
      FigAlternateGetRenditionInfoForMediaType(*(void *)(v19 + 8), 1936684398, *(const void **)(v13 + 8392), *(const void **)(v13 + 8400), *(const void **)(v13 + 8408), 0, 0, 0, &v35);
      FigAlternateGetRenditionInfoForMediaType(*(void *)(v19 + 8), 1986618469, *(const void **)(v13 + 8392), *(const void **)(v13 + 8400), *(const void **)(v13 + 8408), 1, 0, 0, &v34);
      FigAlternateGetRenditionInfoForMediaType(*(void *)(v19 + 8), 1935832172, *(const void **)(v13 + 8392), *(const void **)(v13 + 8400), *(const void **)(v13 + 8408), 0, 0, 0, &v33);
      if (!FigCFEqual() && !FigCFEqual() && !FigCFEqual()) {
        return segPumpUpdateAlternateSelectionBossNetworkErrorFilter(v9, a3);
      }
      uint64_t v20 = *(const void **)(v19 + 8);
      if (v20) {
        CFTypeRef v21 = CFRetain(v20);
      }
      else {
        CFTypeRef v21 = 0;
      }
      if (segPumGetGroupIDString((uint64_t)v21, *a2))
      {
        uint64_t v31 = a1;
        int v32 = a3;
        uint64_t v22 = *(uint64_t **)(v13 + 8096);
        if (v22)
        {
          uint64_t v12 = 0;
          int v23 = 0;
          while (1)
          {
            uint64_t v24 = v22;
            uint64_t v22 = (uint64_t *)*v22;
            if (segPumpAlternateGroupIDsAndPathwaysAreEqual((uint64_t)v21, v24[1], a2))
            {
              unsigned int v25 = v24;
              a3 = v32;
              uint64_t v26 = MoveAlternateFromListWithNoNotification(v13, (uint64_t *)(v13 + 8096), v25, v32, a4);
              uint64_t v12 = v26;
              int v23 = 1;
              if (v26)
              {
                if (v26 != -12880) {
                  break;
                }
              }
            }
            if (!v22) {
              goto LABEL_34;
            }
          }
          BOOL v27 = 1;
        }
        else
        {
          int v23 = 0;
          uint64_t v12 = 0;
LABEL_34:
          if (v32 && (CFAllocatorRef v28 = *(uint64_t **)(v13 + 8112)) != 0)
          {
            while (1)
            {
              uint64_t v29 = v28;
              CFAllocatorRef v28 = (uint64_t *)*v28;
              if (segPumpAlternateGroupIDsAndPathwaysAreEqual((uint64_t)v21, v29[1], a2))
              {
                int v23 = 1;
                uint64_t v30 = MoveAlternateFromListWithNoNotification(v13, (uint64_t *)(v13 + 8112), v29, 1, a4);
                uint64_t v12 = v30;
                if (v30)
                {
                  if (v30 != -12880) {
                    break;
                  }
                }
              }
              if (!v28) {
                goto LABEL_40;
              }
            }
          }
          else
          {
LABEL_40:
            if (v23)
            {
              segPumpReadyNotification((void *)v13, @"FBPAL_AlternateListChanged", 0);
              segPumpDispatchAsyncAlternateSelectionApplyFilter(v13);
              if (!*(void *)(v13 + 8096))
              {
                segPumpAppendErrorLogEntry(v31, v13, 0, 0, -12880, @"CoreMediaErrorDomain", @"Can not proceed after removing variants", 0, 0, 0, 1u);
                StopAllActiveStreams(v13);
                uint64_t v12 = 4294954416;
                a3 = v32;
                if (!v21) {
                  goto LABEL_6;
                }
                goto LABEL_47;
              }
            }
          }
          BOOL v27 = 1;
          a3 = v32;
        }
        a1 = v31;
        if (!v12)
        {
LABEL_46:
          if (!v21) {
            goto LABEL_6;
          }
LABEL_47:
          CFRelease(v21);
          goto LABEL_6;
        }
      }
      else
      {
        uint64_t v12 = MoveAllAlternatesWithSameMasterStreamWithStreamAlternate(a1, a2, a3, a4);
        BOOL v27 = v12 == 0;
        if (!v12) {
          goto LABEL_46;
        }
      }
      if (v27) {
        segPumpAppendErrorLogEntry(a1, v13, (uint64_t)a2, 0, (int)v12, @"CoreMediaErrorDomain", @"Failed to remove variant", 0, 0, 0, 1u);
      }
      goto LABEL_46;
    }
    --v10;
  }
  uint64_t v12 = MoveAllAlternatesWithSameMasterStreamWithStreamAlternate(a1, a2, a3, a4);
LABEL_6:
  if (!v12 || v12 == -12880) {
    return segPumpUpdateAlternateSelectionBossNetworkErrorFilter(v9, a3);
  }
  return v12;
}

uint64_t segPumpAttemptToRetryRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a3)
  {
    uint64_t v9 = *(void *)(a3 + 24);
    uint64_t v31 = *(void *)(a3 + 32);
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v31 = 0;
  }
  uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  BOOL IsAlternateLastValidAlternate = segPumpIsAlternateLastValidAlternate(DerivedStorage, (void *)a2, *(void *)(DerivedStorage + 8144), (a5 >> 2) & 1);
  if (a3)
  {
    uint64_t v12 = *(void *)(a3 + 16);
    if (v12)
    {
      uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v13) {
        uint64_t v14 = v13;
      }
      else {
        uint64_t v14 = 0;
      }
      CFStringRef v16 = *(void (**)(uint64_t))(v14 + 24);
      if (v16) {
        v16(v12);
      }
      uint64_t v17 = *(const void **)(a3 + 16);
      if (v17)
      {
        CFRelease(v17);
        *(void *)(a3 + 16) = 0;
      }
    }
    unsigned int v15 = *(_DWORD *)(a3 + 64);
  }
  else
  {
    unsigned int v15 = 0;
  }
  if (*(unsigned char *)(DerivedStorage + 8178))
  {
    uint64_t v18 = *(void *)(DerivedStorage + 8184);
  }
  else
  {
    if (a4 == 7 && *(void *)(DerivedStorage + 8096) && !IsAlternateLastValidAlternate)
    {
      if (UpTimeNanoseconds - v9 < 15000000000) {
        goto LABEL_18;
      }
      goto LABEL_50;
    }
    uint64_t v18 = 30000000000;
    if (*(void *)(DerivedStorage + 8440))
    {
      uint64_t v23 = *(void *)(DerivedStorage + 8448);
      if (v23)
      {
        if (!FigNetworkPathInformationIsHostReachable(v23, 1)) {
          uint64_t v18 = 120000000000;
        }
      }
    }
  }
  if (UpTimeNanoseconds - v9 < v18)
  {
LABEL_18:
    if (a3)
    {
      if (a2 + 408 == a3)
      {
        v15 += *(_DWORD *)(a2 + 384);
      }
      else if (a2 + 544 != a3 && DerivedStorage + 7760 != a3)
      {
        uint64_t v19 = *(const void **)(DerivedStorage + 7896);
        if (v19) {
          segPumpEnsureAndGetSessionDataPrivateData(v19);
        }
      }
    }
    if (v15 >= 5) {
      unsigned int v24 = 5;
    }
    else {
      unsigned int v24 = v15;
    }
    uint64_t v25 = 1000000000 * v24;
    if (UpTimeNanoseconds - v31 >= v25) {
      uint64_t v25 = 1000000000;
    }
    *(unsigned char *)(a2 + 400) = 1;
    uint64_t v26 = *(const void **)DerivedStorage;
    BOOL v27 = *(NSObject **)(DerivedStorage + 64);
    return FigHTTPCreateTimer(v26, (uint64_t)segPumpRetryTimerCallback, v27, (dispatch_object_t *)(a2 + 392), (double)v25 / 1000000000.0);
  }
  if (IsAlternateLastValidAlternate || !*(void *)(DerivedStorage + 8096) || a4 == 6)
  {
    uint64_t v20 = *(void *)DerivedStorage;
    CFTypeRef v21 = *(void **)(a2 + 1152);
    return segPumpSendEndCallbackForAllActiveStreams(v20, v21);
  }
  else
  {
    if (a4 == 7)
    {
LABEL_50:
      if ((a5 >> 2))
      {
        CFURLRef v28 = *(const __CFURL **)(a2 + 16);
        uint64_t v29 = *(void *)(a2 + 40);
        return segPumpMoveAlternatesMatchingHostAndPathwayToPenaltyBox(a1, v28, v29, a5 & 1);
      }
      else
      {
        return segPumpMoveStreamAlternateToPenaltyBox(a1, (uint64_t *)a2, 0, 0);
      }
    }
    return FigSignalErrorAt();
  }
}

uint64_t MoveAlternateFromValidList(uint64_t a1, uint64_t *a2, int a3, char a4)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  uint64_t v9 = MoveAlternateFromListWithNoNotification((uint64_t)DerivedStorage, DerivedStorage + 1012, a2, a3, a4);
  uint64_t v10 = v9;
  if (v9)
  {
    segPumpAppendErrorLogEntry(a1, (uint64_t)DerivedStorage, 0, 0, (int)v9, @"CoreMediaErrorDomain", @"Can not proceed after removing variant", 0, 0, 0, 1u);
    StopAllActiveStreams((uint64_t)DerivedStorage);
  }
  else
  {
    segPumpReadyNotification(DerivedStorage, @"FBPAL_AlternateListChanged", 0);
    segPumpDispatchAsyncAlternateSelectionApplyFilter((uint64_t)DerivedStorage);
  }
  return v10;
}

uint64_t segPumpUpdateAlternateSelectionBossNetworkErrorFilter(void *a1, int a2)
{
  cf[24] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  cf[0] = 0;
  if (!a1[1191]) {
    return 0;
  }
  if (!a2)
  {
    uint64_t v3 = kFigAlternateFilterName_NetworkTemporaryError;
    if (a1[1017])
    {
      uint64_t v4 = (CFArrayRef *)(a1 + 1017);
      unsigned int v5 = 878;
      goto LABEL_7;
    }
LABEL_12:
    CFArrayRef v8 = 0;
    uint64_t v9 = *v3;
LABEL_13:
    FigAlternateSelectionBossRemoveFilter(a1[1191], (uint64_t)v9);
    goto LABEL_14;
  }
  uint64_t v3 = kFigAlternateFilterName_NetworkPermanentError;
  if (!a1[1016]) {
    goto LABEL_12;
  }
  uint64_t v4 = (CFArrayRef *)(a1 + 1016);
  unsigned int v5 = 890;
LABEL_7:
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFArrayRef Copy = CFArrayCreateCopy(AllocatorForMedia, *v4);
  CFArrayRef v8 = Copy;
  uint64_t v9 = *v3;
  if (!Copy || !CFArrayGetCount(Copy)) {
    goto LABEL_13;
  }
  uint64_t v10 = FigGetAllocatorForMedia();
  uint64_t v11 = FigAlternateDenyListFilterCreate(v10, v8, v9, v5, 0, cf);
  if (!v11)
  {
    uint64_t v11 = FigAlternateSelectionBossAddFilter(a1[1191], cf[0]);
    if (!v11)
    {
LABEL_14:
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      if (!v8) {
        goto LABEL_16;
      }
      goto LABEL_15;
    }
  }
  uint64_t v13 = v11;
LABEL_15:
  CFRelease(v8);
  uint64_t v14 = v13;
LABEL_16:
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  return v14;
}

uint64_t MoveAlternateFromListWithNoNotification(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4, char a5)
{
  uint64_t v10 = *(uint64_t **)(a1 + 8144);
  if (v10 == a3) {
    segPumpUpdateCurrentAlternate(a1, 0);
  }
  if (*(uint64_t **)(a1 + 7680) == a3) {
    *(void *)(a1 + 7680) = 0;
  }
  uint64_t v11 = a2;
  do
  {
    uint64_t v11 = (uint64_t *)*v11;
    if (!v11) {
      goto LABEL_27;
    }
  }
  while (!FigCFEqual());
  if (a4)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    uint64_t v17 = (uint64_t *)*a2;
    if ((uint64_t *)*a2 == a3)
    {
      uint64_t v23 = *a3;
      *a2 = *a3;
      uint64_t v18 = a2;
      if (v23) {
        goto LABEL_21;
      }
    }
    else
    {
      do
      {
        uint64_t v18 = v17;
        uint64_t v17 = (uint64_t *)*v17;
      }
      while (v17 != a3);
      uint64_t v19 = *a3;
      *uint64_t v18 = *a3;
      if (v19) {
        goto LABEL_21;
      }
    }
    a2[1] = (uint64_t)v18;
LABEL_21:
    if (*(void *)(a1 + 9528))
    {
      if (*(void *)(a1 + 8128)
        || (CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia(),
            CFMutableArrayRef Mutable = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D510]),
            (*(void *)(a1 + 8128) = Mutable) != 0))
      {
        if (!FigCFArrayContainsValue()) {
          CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 8128), (const void *)a3[1]);
        }
      }
      else
      {
        uint64_t result = FigSignalErrorAt();
        if (result) {
          return result;
        }
      }
    }
    AlternateEntryFree(a3);
    goto LABEL_27;
  }
  if ((uint64_t *)(a1 + 8096) != a2) {
    goto LABEL_27;
  }
  CFArrayRef v13 = *(const __CFArray **)(a1 + 8136);
  if (v13
    || (CFAllocatorRef v14 = (const __CFAllocator *)FigGetAllocatorForMedia(),
        CFArrayRef v13 = CFArrayCreateMutable(v14, 0, MEMORY[0x1E4F1D510]),
        (*(void *)(a1 + 8136) = v13) != 0))
  {
    v31.length = CFArrayGetCount(v13);
    v31.location = 0;
    FirstIndexOfuint64_t Value = CFArrayGetFirstIndexOfValue(v13, v31, (const void *)a3[1]);
    if ((FirstIndexOfValue & 0x8000000000000000) == 0) {
      CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 8136), FirstIndexOfValue);
    }
    CFStringRef v16 = *(__CFArray **)(a1 + 8136);
    if (v10 == a3) {
      CFArrayAppendValue(v16, (const void *)a3[1]);
    }
    else {
      CFArrayInsertValueAtIndex(v16, 0, (const void *)a3[1]);
    }
  }
  else
  {
    uint64_t result = FigSignalErrorAt();
    if (result) {
      return result;
    }
  }
  uint64_t v24 = *(void *)(a1 + 8112);
  uint64_t v25 = (uint64_t *)*a2;
  if ((uint64_t *)*a2 == a3)
  {
    uint64_t v29 = *a3;
    *a2 = *a3;
    uint64_t v26 = a2;
    if (v29) {
      goto LABEL_38;
    }
  }
  else
  {
    do
    {
      uint64_t v26 = v25;
      uint64_t v25 = (uint64_t *)*v25;
    }
    while (v25 != a3);
    uint64_t v27 = *a3;
    *uint64_t v26 = *a3;
    if (v27) {
      goto LABEL_38;
    }
  }
  *(void *)(a1 + 8104) = v26;
LABEL_38:
  *a3 = 0;
  **(void **)(a1 + 8120) = a3;
  *(void *)(a1 + 8120) = a3;
  if (*a2)
  {
    CFURLRef v28 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    a3[2] = FigGetUpTimeNanoseconds() + 120000000000;
    *((unsigned char *)a3 + 32) = a5;
    uint64_t v30 = *(NSObject **)(a1 + 8168);
    if (v30)
    {
      if (!v24) {
        FigHTTPRescheduleTimer(120.0, *(void *)(a1 + 64), v30);
      }
      goto LABEL_27;
    }
    uint64_t result = FigHTTPCreateTimer(*(const void **)a1, (uint64_t)HandlePenaltyBoxTimer, *(NSObject **)(a1 + 64), (dispatch_object_t *)(a1 + 8168), 120.0);
  }
  else
  {
    uint64_t result = FigSignalErrorAt();
  }
  if (result) {
    return result;
  }
LABEL_27:
  if (*(void *)(a1 + 8096)) {
    return 0;
  }
  else {
    return FigSignalErrorAt();
  }
}

void segPumpDispatchAsyncAlternateSelectionApplyFilter(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 9528);
  if (v2)
  {
    uint64_t v3 = (void *)CFRetain(v2);
    uint64_t v4 = *(NSObject **)(a1 + 9536);
    dispatch_async_f(v4, v3, (dispatch_function_t)segPumpDispatchAsyncAlternateSelectionBossApplyFilterFunc);
  }
}

void StopAllActiveStreams(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 8168);
  if (v2) {
    FigHTTPRescheduleTimer(0.0, *(void *)(a1 + 64), v2);
  }
  for (uint64_t i = 384; i != 432; i += 16)
  {
    uint64_t v4 = *(void *)(a1 + i);
    if (*(void *)(v4 + 16)) {
      segPumpStopStream(a1, v4, 0);
    }
  }
}

void HandlePenaltyBoxTimer(uint64_t a1, uint64_t a2)
{
  *(void *)uint64_t v6 = 0;
  CFTypeRef cf = 0;
  if (segPumpLockAndCopyPumpFromRetainProxy(a2, &cf, (uint64_t *)v6)) {
    goto LABEL_12;
  }
  uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  uint64_t v3 = *(void *)v6;
  uint64_t v4 = *(uint64_t **)(*(void *)v6 + 8112);
  if (!v4) {
    goto LABEL_5;
  }
  uint64_t v5 = v4[2];
  if (v5 > UpTimeNanoseconds)
  {
    LODWORD(v4) = 0;
LABEL_5:
    segPumpUpdateAlternateSelectionBossNetworkErrorFilter(*(void **)v6, (int)v4);
    segPumpResetPenaltyBoxTimer(*(void **)v6);
    goto LABEL_12;
  }
  do
  {
    MoveAlternateFromPenaltyBox(v3, v4);
    uint64_t v3 = *(void *)v6;
    uint64_t v4 = *(uint64_t **)(*(void *)v6 + 8112);
    if (!v4)
    {
      segPumpUpdateAlternateSelectionBossNetworkErrorFilter(*(void **)v6, 0);
      segPumpResetPenaltyBoxTimer(*(void **)v6);
      goto LABEL_11;
    }
  }
  while (v4[2] <= UpTimeNanoseconds);
  segPumpUpdateAlternateSelectionBossNetworkErrorFilter(*(void **)v6, 0);
  segPumpResetPenaltyBoxTimer(*(void **)v6);
  if (v5 > UpTimeNanoseconds) {
    goto LABEL_12;
  }
LABEL_11:
  segPumpReadyNotification(*(void **)v6, @"FBPAL_AlternateListChanged", 0);
  segPumpDispatchAsyncAlternateSelectionApplyFilter(*(uint64_t *)v6);
LABEL_12:
  segPumpUnlockAndSendAllPendingNotifications();
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t MoveAlternateFromPenaltyBox(uint64_t a1, uint64_t *a2)
{
  *((unsigned char *)a2 + 32) = 0;
  if (*(void *)(a1 + 9528))
  {
    CFArrayRef v4 = *(const __CFArray **)(a1 + 8136);
    if (v4) {
      CFIndex Count = CFArrayGetCount(v4);
    }
    else {
      CFIndex Count = 0;
    }
    while (Count-- >= 1)
    {
      CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 8136), Count);
      if (CFEqual(ValueAtIndex, (CFTypeRef)a2[1]))
      {
        CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 8136), Count);
        break;
      }
    }
  }
  CFArrayRef v8 = *(uint64_t **)(a1 + 8112);
  if (v8 == a2)
  {
    uint64_t v9 = (uint64_t *)(a1 + 8112);
  }
  else
  {
    do
    {
      uint64_t v9 = v8;
      CFArrayRef v8 = (uint64_t *)*v8;
    }
    while (v8 != a2);
  }
  uint64_t v10 = *a2;
  *uint64_t v9 = *a2;
  if (!v10) {
    *(void *)(a1 + 8120) = v9;
  }
  *a2 = 0;
  **(void **)(a1 + 8104) = a2;
  *(void *)(a1 + 8104) = a2;
  os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  return fig_log_call_emit_and_clean_up_after_send_and_compose();
}

void segPumpResetPenaltyBoxTimer(void *a1)
{
  uint64_t v1 = a1[1021];
  if (v1)
  {
    uint64_t v3 = a1[1014];
    if (v3)
    {
      uint64_t v4 = *(void *)(v3 + 16);
      double v5 = (double)(v4 - FigGetUpTimeNanoseconds()) / 1000000000.0;
      uint64_t v1 = a1[1021];
    }
    else
    {
      double v5 = 0.0;
    }
    uint64_t v6 = a1[8];
    FigHTTPRescheduleTimer(v5, v6, v1);
  }
}

void segPumpDispatchAsyncAlternateSelectionBossApplyFilterFunc(const void *a1)
{
  FigAlternateSelectionBossApplyFilters(a1);
  if (a1)
  {
    CFRelease(a1);
  }
}

uint64_t MoveAllAlternatesWithSameMasterStreamWithStreamAlternate(uint64_t a1, void *a2, int a3, char a4)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  uint64_t v9 = CMBaseObjectGetDerivedStorage();
  uint64_t v10 = v9 + 16 * *a2;
  if (*(void **)(v10 + 384) == a2)
  {
    uint64_t v12 = 8144;
  }
  else
  {
    if (*(void **)(v10 + 392) != a2) {
      return 0;
    }
    uint64_t v12 = 7680;
  }
  uint64_t v13 = *(void *)(v9 + v12);
  if (!v13) {
    return 0;
  }
  CFAllocatorRef v14 = *(const void **)(v13 + 8);
  if (v14) {
    CFTypeRef v15 = CFRetain(v14);
  }
  else {
    CFTypeRef v15 = 0;
  }
  CFStringRef v16 = (uint64_t *)DerivedStorage[1012];
  if (v16)
  {
    uint64_t v11 = 0;
    while (1)
    {
      uint64_t v17 = v16;
      CFStringRef v16 = (uint64_t *)*v16;
      if (segPumpAlternateURLsAndPathwaysAreEqual((uint64_t)v15, v17[1]))
      {
        uint64_t v18 = MoveAlternateFromListWithNoNotification((uint64_t)DerivedStorage, DerivedStorage + 1012, v17, a3, a4);
        uint64_t v11 = v18;
        if (v18)
        {
          if (v18 != -12880) {
            goto LABEL_29;
          }
        }
      }
      if (!v16)
      {
        if (a3) {
          goto LABEL_19;
        }
        goto LABEL_24;
      }
    }
  }
  uint64_t v11 = 0;
  if (a3)
  {
LABEL_19:
    uint64_t v19 = (uint64_t *)DerivedStorage[1014];
    if (v19)
    {
      while (1)
      {
        uint64_t v20 = v19;
        uint64_t v19 = (uint64_t *)*v19;
        if (segPumpAlternateURLsAndPathwaysAreEqual((uint64_t)v15, v20[1]))
        {
          uint64_t v21 = MoveAlternateFromListWithNoNotification((uint64_t)DerivedStorage, DerivedStorage + 1014, v20, 1, a4);
          uint64_t v11 = 0;
          if (v21)
          {
            if (v21 != -12880) {
              break;
            }
          }
        }
        if (!v19) {
          goto LABEL_24;
        }
      }
      uint64_t v11 = v21;
LABEL_29:
      segPumpAppendErrorLogEntry(a1, (uint64_t)DerivedStorage, 0, 0, (int)v11, @"CoreMediaErrorDomain", @"Failed to remove variant", 0, 0, 0, 1u);
      goto LABEL_30;
    }
  }
LABEL_24:
  segPumpReadyNotification(DerivedStorage, @"FBPAL_AlternateListChanged", 0);
  segPumpDispatchAsyncAlternateSelectionApplyFilter((uint64_t)DerivedStorage);
  if (!DerivedStorage[1012])
  {
    segPumpAppendErrorLogEntry(a1, (uint64_t)DerivedStorage, 0, 0, -12880, @"CoreMediaErrorDomain", @"Can not proceed after removing variants", 0, 0, 0, 1u);
    uint64_t v11 = 4294954416;
    goto LABEL_30;
  }
  if (v11) {
    goto LABEL_29;
  }
LABEL_30:
  if (v15) {
    CFRelease(v15);
  }
  return v11;
}

uint64_t segPumGetGroupIDString(uint64_t a1, uint64_t a2)
{
  if (a2 == 2) {
    return FigAlternateGetSubtitleGroupIDString(a1);
  }
  if (a2 == 1) {
    return FigAlternateGetAudioGroupIDString(a1);
  }
  if (a2) {
    return 0;
  }
  return FigAlternateGetVideoGroupIDString(a1);
}

uint64_t segPumpAlternateGroupIDsAndPathwaysAreEqual(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (a1 == a2) {
    return 1;
  }
  uint64_t result = 0;
  if (a1 && a2)
  {
    segPumGetGroupIDString(a1, *a3);
    segPumGetGroupIDString(a2, *a3);
    uint64_t result = FigCFEqual();
    if (result)
    {
      FigAlternateGetPathwayID(a1);
      FigAlternateGetPathwayID(a2);
      return FigCFEqual() != 0;
    }
  }
  return result;
}

uint64_t segPumpAlternateURLsAndPathwaysAreEqual(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  uint64_t result = 0;
  if (a1 && a2)
  {
    PlaylistAlternateuint64_t URL = (const void *)FigAlternateGetPlaylistAlternateURL(a1);
    uint64_t v6 = (const void *)FigAlternateGetPlaylistAlternateURL(a2);
    uint64_t result = FigCFHTTPCompareURLs(PlaylistAlternateURL, v6);
    if (result)
    {
      FigAlternateGetPathwayID(a1);
      FigAlternateGetPathwayID(a2);
      return FigCFEqual() != 0;
    }
  }
  return result;
}

BOOL segPumpIsAlternateLastValidAlternate(uint64_t a1, void *a2, uint64_t a3, int a4)
{
  if (!a3) {
    return 0;
  }
  if (!*(void *)(a1 + 8096)) {
    return 0;
  }
  CFTypeRef cf = 0;
  CFArrayRef theArray = 0;
  uint64_t v8 = *(void *)(a1 + 9552);
  if (!v8) {
    goto LABEL_21;
  }
  uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8);
  uint64_t v11 = v10 ? v10 : 0;
  if ((uint64_t v13 = *(unsigned int (**)(uint64_t, __CFString *, uint64_t, CFArrayRef *))(v11 + 48)) != 0
    && !v13(v8, @"AlternateFilterMonitorProperty_KnownPathwayPriorityList", AllocatorForMedia, &theArray)
    && ((uint64_t v14 = *(void *)(a1 + 9552),
         uint64_t v15 = FigGetAllocatorForMedia(),
         (uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 8)) == 0)
      ? (uint64_t v17 = 0)
      : (uint64_t v17 = v16),
        (uint64_t v18 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v17 + 48)) != 0))
  {
    int v19 = v18(v14, @"AlternateFilterMonitorProperty_CurrentPathwayID", v15, &cf);
    CFTypeRef v20 = cf;
    if (v19)
    {
      int v21 = 1;
      if (cf) {
LABEL_20:
      }
        CFRelease(v20);
    }
    else
    {
      int v21 = 1;
      if (theArray)
      {
        if (cf)
        {
          CFIndex Count = CFArrayGetCount(theArray);
          CFTypeRef v20 = cf;
          if (Count >= 2)
          {
            CFArrayGetValueAtIndex(theArray, Count - 1);
            int v21 = FigCFEqual();
            CFTypeRef v20 = cf;
          }
        }
      }
      if (v20) {
        goto LABEL_20;
      }
    }
  }
  else
  {
LABEL_21:
    int v21 = 1;
  }
  if (theArray) {
    CFRelease(theArray);
  }
  if (!v21) {
    return 0;
  }
  if (*(void *)(a1 + 8096) == a3 && *(void *)(a1 + 8104) == a3) {
    return 1;
  }
  if (a4)
  {
    PlaylistAlternateuint64_t URL = (const __CFURL *)FigAlternateGetPlaylistAlternateURL(*(void *)(a3 + 8));
    if (PlaylistAlternateURL)
    {
      CFStringRef v24 = CFURLCopyHostName(PlaylistAlternateURL);
      if (v24)
      {
        CFStringRef v25 = v24;
        uint64_t v26 = *(void **)(a1 + 8096);
        if (v26)
        {
          while (1)
          {
            CFURLRef v27 = (const __CFURL *)FigAlternateGetPlaylistAlternateURL(v26[1]);
            CFStringRef v28 = CFURLCopyHostName(v27);
            if (v28)
            {
              CFStringRef v29 = v28;
              int v30 = CFEqual(v25, v28);
              CFRelease(v29);
              if (!v30) {
                break;
              }
            }
            uint64_t v26 = (void *)*v26;
            if (!v26) {
              goto LABEL_34;
            }
          }
          CFRelease(v25);
          goto LABEL_38;
        }
LABEL_34:
        CFRelease(v25);
      }
    }
    return 1;
  }
LABEL_38:
  CFTypeRef cf = 0;
  CFArrayRef theArray = 0;
  CFTypeRef v46 = 0;
  CFTypeRef v47 = 0;
  if (!*(void *)(a1 + 8144)) {
    goto LABEL_70;
  }
  if (!*(void *)(a1 + 9528))
  {
    CFIndex v39 = 0;
LABEL_77:
    if (!FigSignalErrorAt()) {
      goto LABEL_78;
    }
    goto LABEL_60;
  }
  uint64_t v31 = *(void *)(a1 + 9568);
  uint64_t v32 = FigGetAllocatorForMedia();
  uint64_t v33 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v33) {
    uint64_t v34 = v33;
  }
  else {
    uint64_t v34 = 0;
  }
  uint64_t v35 = *(unsigned int (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v34 + 48);
  if (!v35 || v35(v31, @"FAFProperty_AlternateList", v32, &cf))
  {
    CFIndex v39 = 0;
    goto LABEL_60;
  }
  if (!cf
    || CFArrayGetCount((CFArrayRef)cf) < 1
    || (*a2 != 1 ? (int v36 = 1935832172) : (int v36 = 1936684398),
        *a2 ? (int v37 = v36) : (int v37 = 1986618469),
        FigAlternateGetRenditionInfoForMediaType(*(void *)(*(void *)(a1 + 8144) + 8), v37, *(const void **)(a1 + 8392), *(const void **)(a1 + 8400), *(const void **)(a1 + 8408), 1, 0, &theArray, 0), !theArray))
  {
LABEL_70:
    BOOL v44 = 0;
    CFIndex v39 = 0;
    goto LABEL_61;
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable(*(CFAllocatorRef *)(a1 + 56), 0, MEMORY[0x1E4F1D510]);
  CFIndex v39 = Mutable;
  if (!Mutable) {
    goto LABEL_77;
  }
  CFArrayAppendValue(Mutable, theArray);
  if (!FigAlternateURLDependencyDenyListFilterCreate(*(void **)(a1 + 56), v39, *(const void **)(a1 + 8152), 1, &v46))
  {
    CFTypeRef v40 = v46;
    if (v46)
    {
      CFTypeRef v41 = cf;
      uint64_t v42 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v42) {
        uint64_t v43 = v42;
      }
      else {
        uint64_t v43 = 0;
      }
      CFURLRef v45 = *(unsigned int (**)(CFTypeRef, CFTypeRef, CFTypeRef *))(v43 + 24);
      if (v45 && !v45(v40, v41, &v47))
      {
        if (v47)
        {
          BOOL v44 = CFArrayGetCount((CFArrayRef)v47) < 1;
          goto LABEL_61;
        }
LABEL_78:
        BOOL v44 = 1;
        goto LABEL_61;
      }
      goto LABEL_60;
    }
    goto LABEL_77;
  }
LABEL_60:
  BOOL v44 = 0;
LABEL_61:
  if (v46) {
    CFRelease(v46);
  }
  if (v39) {
    CFRelease(v39);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v47) {
    CFRelease(v47);
  }
  return v44;
}

void segPumpRetryTimerCallback(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = 0;
  CFTypeRef cf = 0;
  FigRetainProxyRetain();
  if (!segPumpLockAndCopyPumpFromRetainProxy(a2, &cf, &v10))
  {
    uint64_t v4 = 0;
    char v5 = 1;
    do
    {
      uint64_t v6 = 0;
      char v7 = v5;
      uint64_t v8 = v10 + 16 * v4 + 384;
      while (1)
      {
        uint64_t v9 = *(void *)(v8 + v6);
        if (*(void *)(v9 + 392) == a1) {
          break;
        }
        v6 += 8;
        if (v6 == 24) {
          goto LABEL_8;
        }
      }
      *(unsigned char *)(v9 + 400) = 0;
      segPumpRestartStreamReads(cf);
LABEL_8:
      char v5 = 0;
      uint64_t v4 = 1;
    }
    while ((v7 & 1) != 0);
  }
  segPumpUnlockAndSendAllPendingNotifications();
  FigRetainProxyRelease();
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t segPumpRestartStreamReads(const void *a1, uint64_t *a2, void *a3)
{
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t SessionDataRequest = segPumpReadOrScheduleIndexFileRead((uint64_t)a1, (uint64_t)a2, (uint64_t)a3);
  if (SessionDataRequest) {
    goto LABEL_12;
  }
  uint64_t MediaForSingleStream = segPumpDeliverNextMediaForSingleStream(a1, (uint64_t)a2, (uint64_t)a3);
  if (MediaForSingleStream == -15626)
  {
    uint64_t SessionDataRequest = 4294951670;
    goto LABEL_12;
  }
  uint64_t SessionDataRequest = MediaForSingleStream;
  if (a3[31] && !a3[70])
  {
    CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    CFStringRef Identifier = (const __CFString *)FigContentKeySpecifierGetIdentifier(a3[31]);
    CFURLRef v12 = CFURLCreateWithString(AllocatorForMedia, Identifier, 0);
    if (!v12)
    {
      uint64_t SessionDataRequest = FigSignalErrorAt();
      if (!SessionDataRequest) {
        return SessionDataRequest;
      }
      goto LABEL_12;
    }
    CFURLRef v8 = v12;
    if (segPumpShouldRequestURLAsHTTPURL((uint64_t)a2, v12))
    {
      uint64_t v13 = (const void *)a3[31];
      uint64_t CryptKeyCommonData = segPumpGetCryptKeyCommonData(v13, &v17, &v16);
      if (CryptKeyCommonData)
      {
        uint64_t SessionDataRequest = CryptKeyCommonData;
LABEL_10:
        CFRelease(v8);
        goto LABEL_11;
      }
      if (*(unsigned char *)(v16 + 145)) {
        segPumpCancelCryptReadAndResetData((uint64_t)a2, (uint64_t)a3);
      }
      uint64_t v15 = (const void *)a3[31];
      a3[31] = v13;
      if (v13) {
        CFRetain(v13);
      }
      if (v15) {
        CFRelease(v15);
      }
      uint64_t SessionDataRequest = segPumpSendCryptKeyRequest(a1, (uint64_t)a2, (uint64_t)a3, (__CFString *)a3[31]);
      if (SessionDataRequest) {
        goto LABEL_10;
      }
    }
  }
  else
  {
    CFURLRef v8 = 0;
  }
  if (!*a3 && a2[987]) {
    uint64_t SessionDataRequest = segPumpSendNextSessionDataRequest((uint64_t)a2, (uint64_t)a3, 0);
  }
  if (v8) {
    goto LABEL_10;
  }
LABEL_11:
  if (SessionDataRequest) {
LABEL_12:
  }
    segPumpSendEndCallbackForAllActiveStreamsWithOSStatus(*a2, SessionDataRequest);
  return SessionDataRequest;
}

uint64_t segPumpReadOrScheduleIndexFileRead(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 56);
  if (!v6 || (uint64_t result = FigStreamPlaylistParserHTTPServerMayMutatePlaylist(v6), result))
  {
    if (!*(_DWORD *)(a2 + 8) || *(unsigned char *)(a3 + 1169)) {
      return 0;
    }
    CFURLRef v8 = *(__CFError **)(a3 + 480);
    if (v8)
    {
      CFIndex Code = CFErrorGetCode(v8);
      if (Code == -16839 || Code == -1005 || Code == -1009) {
        *(unsigned char *)(a3 + 1168) = 1;
      }
    }
    if (*(unsigned char *)(a3 + 859) || *(void *)(a3 + 424) || *(unsigned char *)(a3 + 870) || *(unsigned char *)(a3 + 400))
    {
      return 0;
    }
    else
    {
      uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
      uint64_t v12 = UpTimeNanoseconds;
      segPumpGetIndexFileRefreshTimestamp(a2, a3, UpTimeNanoseconds, &v12);
      if (v12 <= UpTimeNanoseconds + 10000000)
      {
        return segPumpSendIndexFileRequest(a1, a2, a3);
      }
      else
      {
        double v11 = (double)(v12 - UpTimeNanoseconds) / 1000000000.0;
        *(unsigned char *)(a3 + 400) = 1;
        return FigHTTPCreateTimer(*(const void **)a2, (uint64_t)segPumpRetryTimerCallback, *(NSObject **)(a2 + 64), (dispatch_object_t *)(a3 + 392), v11);
      }
    }
  }
  return result;
}

uint64_t segPumpDeliverNextMediaForSingleStream(const void *a1, uint64_t a2, uint64_t a3)
{
  CFIndex v39 = 0;
  CFTypeRef v40 = 0;
  __int16 v38 = 0;
  unsigned __int8 v37 = 0;
  FigRetainProxyRetain();
  uint64_t v6 = *(void *)(a3 + 56);
  if (!v6) {
    goto LABEL_20;
  }
  CFArrayRef MediaSegmentSpecifiers = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(v6);
  if (!MediaSegmentSpecifiers
    || CFArrayGetCount(MediaSegmentSpecifiers) < 1
    || *(unsigned char *)(a3 + 866)
    || (*(_DWORD *)(a3 + 160) & 0xFFFFFFFE) != 4
    || *(unsigned char *)(a3 + 1136))
  {
    goto LABEL_20;
  }
  if (*(unsigned char *)(a2 + 8712))
  {
    if (!*(unsigned char *)(a2 + 8768) && !*(unsigned char *)(a2 + 8713) && (*(unsigned char *)(a3 + 857) || *(unsigned char *)(a3 + 862)))
    {
      double v17 = *(double *)(a3 + 120);
      if (v17 >= 0.0)
      {
        double v18 = dbl_1949989B0[*(float *)(a2 + 8736) >= 0.0];
        CMTimeMakeWithSeconds(&v36, v17, 1000);
        float v19 = *(float *)(a2 + 8736);
        uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
        CMTimeMakeWithSeconds(&v35, v18 + *(double *)(a3 + 120), 1000);
        uint64_t v8 = segPumpStepNextFrame(a1, &v36, UpTimeNanoseconds, &v35, 1, 0, v19);
        goto LABEL_11;
      }
LABEL_20:
      uint64_t v9 = 0;
      goto LABEL_21;
    }
    uint64_t v8 = segPumpTryIFrameFetch((uint64_t)a1, a2);
LABEL_11:
    uint64_t v9 = v8;
    goto LABEL_21;
  }
  uint64_t v10 = *(const void **)(a3 + 256);
  if (v10)
  {
    if (*(void *)(a3 + 264)) {
      uint64_t v10 = *(const void **)(a3 + 264);
    }
    CFTypeRef v40 = v10;
    goto LABEL_18;
  }
  uint64_t v8 = segPumpDetermineMediaSegmentToDeliver(a1, a2, a3, &v40, &v39);
  if (v8) {
    goto LABEL_11;
  }
  if (segPumpStreamShouldYieldToTrialSwitch(a2, (void *)a3)) {
    goto LABEL_18;
  }
  uint64_t v22 = v39;
  int v21 = v40;
  uint64_t v23 = v39 ? v39 : v40;
  if (!segPumpStreamReadAheadPermitsNextRead(a2, a3, (uint64_t)v23) || !v21) {
    goto LABEL_18;
  }
  if (*(void *)a3 == *(void *)(a2 + 8416) && *(void *)(a2 + 296))
  {
    uint64_t v25 = *(void *)(a3 + 80);
    uint64_t v26 = *(void *)(a3 + 880);
    uint64_t v8 = segPumpCheckCachedVariantsAndRequestSwitch(a2, a3, v21, 0, v24);
    if (v8) {
      goto LABEL_11;
    }
    if (FigRetainProxyIsInvalidated() || *(void *)(a3 + 80) != v25 || v26 != *(void *)(a3 + 880)) {
      goto LABEL_20;
    }
  }
  if (*(unsigned char *)(a3 + 862)) {
    *(void *)(a3 + 376) = FigMediaSegmentSpecifierGetMediaSequence((uint64_t)v21) - 1;
  }
  uint64_t v8 = segPumpFetchOrDispatchMediaSegment((uint64_t)a1, a2, a3, v21, v22, &v37, (char *)&v38 + 1);
  if (v8) {
    goto LABEL_11;
  }
  if (*(unsigned char *)(a3 + 1136))
  {
    CFTypeRef v40 = 0;
LABEL_18:
    int v11 = v37;
    goto LABEL_19;
  }
  int v11 = v37;
  if (!v37 && !HIBYTE(v38))
  {
    if (!segPumpIsMediaSegmentWaitingOnCryptKey((uint64_t)v21) && !*(unsigned char *)(a3 + 869))
    {
      uint64_t v27 = FigGetUpTimeNanoseconds();
      uint64_t v28 = *(void *)(a3 + 696);
      ++*(_DWORD *)(v28 + 80);
      if (!*(void *)(v28 + 40)) {
        *(void *)(v28 + 40) = v27;
      }
      *(void *)(v28 + 48) = v27;
      CFTypeRef cf = *(CFTypeRef *)(v28 + 16);
      CFURLRef v29 = *(const __CFURL **)(a3 + 16);
      CFURLRef v30 = *(const __CFURL **)(a3 + 24);
      MediaFilePrivateData = segPumpGetMediaFilePrivateData(v21);
      segPumpEnsureMediaSegmentURLs(v21, v29, v30);
      uint64_t v32 = (const void *)MediaFilePrivateData[2];
      *(void *)(v28 + 16) = v32;
      if (v32) {
        CFRetain(v32);
      }
      if (cf) {
        CFRelease(cf);
      }
      if (*(unsigned char *)(a2 + 8176)) {
        uint64_t v33 = 7;
      }
      else {
        uint64_t v33 = 6;
      }
      uint64_t v8 = segPumpAttemptToRetryRequest((uint64_t)a1, a3, v28 + 16, v33, 4u);
      if (v8) {
        goto LABEL_11;
      }
      if (*(unsigned char *)(a3 + 1136)) {
        goto LABEL_20;
      }
    }
    goto LABEL_18;
  }
LABEL_19:
  if (v11) {
    goto LABEL_20;
  }
  uint64_t v9 = segPumpStreamDoDeliveryFollowUp((uint64_t)a1, a2, a3, HIBYTE(v38), v40, &v38);
  if (!v9 && (_BYTE)v38)
  {
    uint64_t v13 = *(void *)a3;
    for (uint64_t i = 384; i != 432; i += 16)
    {
      if (v13)
      {
        uint64_t v15 = *(void **)(a2 + i);
        if (v15[2])
        {
          if (!*(void *)(v15[87] + 8))
          {
            uint64_t v42 = 0;
            uint64_t v43 = 0;
            if (v15[32])
            {
              if (v15[33]) {
                uint64_t v16 = (const void *)v15[33];
              }
              else {
                uint64_t v16 = (const void *)v15[32];
              }
              if (v16) {
                goto LABEL_37;
              }
            }
            else
            {
              uint64_t v8 = segPumpDetermineMediaSegmentToDeliver(a1, a2, (uint64_t)v15, &v43, &v42);
              if (v8) {
                goto LABEL_11;
              }
              if (v42) {
                goto LABEL_20;
              }
              uint64_t v16 = v43;
              if (v43)
              {
LABEL_37:
                uint64_t v8 = segPumpTrySpeculativeRead((uint64_t)a1, (uint64_t *)a2, (uint64_t)v15, v16, &v41);
                if (v8) {
                  goto LABEL_11;
                }
              }
            }
          }
        }
      }
      uint64_t v9 = 0;
      --v13;
    }
  }
LABEL_21:
  FigRetainProxyRelease();
  return v9;
}

uint64_t segPumpGetCryptKeyCommonData(const void *a1, void *a2, void *a3)
{
  if (a1)
  {
    char v7 = CMGetAttachment(a1, @"SegPumpCryptKeyPrivateData", 0);
    if (!v7)
    {
      FigGetAllocatorForMedia();
      long long v10 = xmmword_1E57A28A0;
      if (segPumpCryptKeyPrivateDataGetTypeID_once != -1) {
        dispatch_once_f(&segPumpCryptKeyPrivateDataGetTypeID_once, &v10, (dispatch_function_t)segPumpRegisterClassUtil);
      }
      Instance = (void *)_CFRuntimeCreateInstance();
      if (!Instance) {
        return FigSignalErrorAt();
      }
      char v7 = Instance;
      CMSetAttachment(a1, @"SegPumpCryptKeyPrivateData", Instance, 0);
      CFRelease(v7);
    }
    if (a2) {
      *a2 = v7;
    }
    uint64_t result = 0;
    if (a3) {
      *a3 = v7[2];
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

double segPumpCancelCryptReadAndResetData(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v4 = *(const void **)(a2 + 248);
  if (v4 && !segPumpGetCryptKeyCommonData(v4, &v11, &v10))
  {
    char v5 = (void *)v10;
    *(_WORD *)(v10 + 144) = 0;
    v5[4] = 0;
    v5[15] = 0;
    uint64_t v6 = v5[10];
    if (v6)
    {
      segPumpCustomURLLoaderCancelRequest(a1, v6);
      segPumpResetCryptKeyRequestDataForCustomURLRequestID(*(const void **)(a2 + 248), *(void *)(v10 + 80));
      uint64_t v7 = *(void *)(v10 + 120);
      if (v7)
      {
        segPumpCustomURLLoaderCancelRequest(a1, v7);
        segPumpResetCryptKeyRequestDataForCustomURLRequestID(*(const void **)(a2 + 248), *(void *)(v10 + 120));
      }
    }
    FigHTTPStopAndReleaseTimer((dispatch_object_t *)(a2 + 640));
    uint64_t v8 = *(const void **)(a2 + 248);
    if (v8)
    {
      CFRelease(v8);
      *(void *)(a2 + 248) = 0;
    }
  }
  return segPumpResetConnection(a1, a2 + 544);
}

uint64_t segPumpSendCryptKeyRequest(const void *a1, uint64_t a2, uint64_t a3, __CFString *a4)
{
  uint64_t v206 = *MEMORY[0x1E4F143B8];
  uint64_t v178 = 0;
  uint64_t v179 = 0;
  if (!*(unsigned char *)(a2 + 323)) {
    return 0;
  }
  uint64_t v7 = (unsigned char *)(a2 + 7992);
  if (*(unsigned char *)(a2 + 9480))
  {
    CFTypeRef v186 = 0;
    CFTypeRef cf = 0;
    uint64_t v184 = 0;
    v185[0] = (CFTypeRef)1;
    v185[1] = segPumpKeyRequestDidSucceed;
    v185[2] = segPumpKeyRequestDidFail;
    uint64_t v182 = 0;
    *(void *)os_log_type_t type = 0;
    if (!*(void *)(a2 + 152))
    {
      uint64_t v8 = *(NSObject **)(a2 + 64);
      *(void *)(a2 + 152) = v8;
      dispatch_retain(v8);
    }
    uint64_t CryptKeyCommonData = segPumpGetCryptKeyCommonData(a4, type, &v182);
    if (CryptKeyCommonData) {
      goto LABEL_275;
    }
    if (*(unsigned char *)(v182 + 145) || !v7[1488])
    {
LABEL_115:
      CFDataWithBlockBufferNoCFArrayRef Copy = 0;
      goto LABEL_116;
    }
    char IsLowValueFairPlayStreamingKey = segPumpCryptKeyIsLowValueFairPlayStreamingKey((uint64_t)a4);
    if (!FigContentKeySpecifierGetIdentifier((uint64_t)a4))
    {
      uint64_t CryptKeyCommonData = FigSignalErrorAt();
      goto LABEL_275;
    }
    uint64_t v11 = *(const void **)(a2 + 9520);
    segPumpEnsureCMCDHeaderVendor(a2);
    if (FigContentKeySpecifierGetKeySystem((uint64_t)a4) == 1)
    {
      if (*v7)
      {
        if (FigContentKeySpecifierGetEncryptionMethod((uint64_t)a4) == 1)
        {
          uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
          uint64_t CryptKeyCommonData = FigContentKeyRequestParamsCreate(AllocatorForMedia, a4, IsLowValueFairPlayStreamingKey, 1, 0, 0, v11, 0, 0, 1, 1, 0, (uint64_t *)&v186);
          if (CryptKeyCommonData) {
            goto LABEL_275;
          }
          uint64_t v13 = *(void *)(a2 + 9488);
          CFTypeRef v14 = v186;
          uint64_t v174 = *(void *)(a2 + 240);
          uint64_t v15 = *(void *)(a2 + 216);
          uint64_t v16 = *(void *)a2;
          uint64_t v17 = *(void *)(a2 + 152);
          uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v18) {
            uint64_t v19 = v18;
          }
          else {
            uint64_t v19 = 0;
          }
          long long v82 = *(uint64_t (**)(uint64_t, CFTypeRef, uint64_t, void, uint64_t, uint64_t, CFTypeRef *, uint64_t, uint64_t, uint64_t *))(v19 + 8);
          if (!v82)
          {
LABEL_106:
            CFDataWithBlockBufferNoCFArrayRef Copy = 4294954514;
            goto LABEL_116;
          }
          uint64_t CryptKeyCommonData = v82(v13, v14, 1, 0, v174, v15, v185, v16, v17, &v184);
          if (CryptKeyCommonData) {
            goto LABEL_275;
          }
          *(void *)(v182 + 40) = v184;
          if (dword_1E9351350)
          {
            int v181 = 0;
            os_log_type_t v180 = OS_LOG_TYPE_DEFAULT;
            os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            int v27 = 1;
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          else
          {
            int v27 = 1;
          }
        }
        else
        {
          int v27 = 0;
        }
        if (*v7)
        {
          int v26 = 1;
          uint64_t v28 = 4;
          int v27 = 1;
          goto LABEL_91;
        }
        int v26 = 0;
      }
      else
      {
        int v26 = 0;
        int v27 = 0;
      }
      uint64_t v28 = 1;
    }
    else
    {
      int v25 = *(_DWORD *)(v182 + 24);
      if (v25 == 4 || v25 == 2)
      {
        int v26 = 0;
        int v27 = 0;
        uint64_t v28 = 2;
      }
      else
      {
        int v26 = 0;
        int v27 = 0;
        uint64_t v28 = 0;
      }
    }
LABEL_91:
    uint64_t v65 = FigGetAllocatorForMedia();
    uint64_t CryptKeyCommonData = FigContentKeyRequestParamsCreate(v65, a4, IsLowValueFairPlayStreamingKey, v27, v26, 0, v11, 0, 0, 1, 1, 0, (uint64_t *)&cf);
    if (CryptKeyCommonData) {
      goto LABEL_275;
    }
    uint64_t v66 = *(void *)(a2 + 9488);
    CFTypeRef v67 = cf;
    BOOL v68 = *v7 == 0;
    uint64_t v69 = *(void *)(a2 + 240);
    uint64_t v70 = *(void *)(a2 + 216);
    uint64_t v71 = *(void *)a2;
    uint64_t v72 = *(void *)(a2 + 152);
    uint64_t v73 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v73) {
      uint64_t v74 = v73;
    }
    else {
      uint64_t v74 = 0;
    }
    CFTypeID v75 = *(uint64_t (**)(uint64_t, CFTypeRef, uint64_t, BOOL, uint64_t, uint64_t, CFTypeRef *, uint64_t, uint64_t, uint64_t *))(v74 + 8);
    if (v75)
    {
      uint64_t CryptKeyCommonData = v75(v66, v67, v28, v68, v69, v70, v185, v71, v72, &v184);
      if (!CryptKeyCommonData)
      {
        if (dword_1E9351350)
        {
          int v181 = 0;
          os_log_type_t v180 = OS_LOG_TYPE_DEFAULT;
          CFTypeID v76 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        uint64_t v84 = v182;
        *(void *)(v182 + 32) = v184;
        *(unsigned char *)(v84 + 145) = 1;
        if (*(void *)type) {
          *(void *)(*(void *)type + 56) = FigGetUpTimeNanoseconds();
        }
        uint64_t v85 = *(void *)(a2 + 9048);
        if (v85)
        {
          uint64_t v86 = *(void *)(CMBaseObjectGetVTable() + 16);
          uint64_t v87 = v86 ? v86 : 0;
          v88 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v87 + 56);
          if (v88) {
            v88(v85, 0x1EE582B78, 0x1EE585318, 1, 0);
          }
        }
        goto LABEL_115;
      }
LABEL_275:
      CFDataWithBlockBufferNoCFArrayRef Copy = CryptKeyCommonData;
LABEL_116:
      if (cf) {
        CFRelease(cf);
      }
      CFTypeRef v89 = v186;
      if (!v186) {
        return CFDataWithBlockBufferNoCopy;
      }
LABEL_241:
      CFRelease(v89);
      return CFDataWithBlockBufferNoCopy;
    }
    goto LABEL_106;
  }
  uint64_t v21 = segPumpGetCryptKeyCommonData(a4, &v179, &v178);
  if (v21) {
    return v21;
  }
  if (*(unsigned char *)(v178 + 145)) {
    return FigSignalErrorAt();
  }
  v177 = a1;
  if (FigContentKeySpecifierGetIdentifier((uint64_t)a4))
  {
    CFAllocatorRef v22 = (const __CFAllocator *)FigGetAllocatorForMedia();
    CFStringRef Identifier = (const __CFString *)FigContentKeySpecifierGetIdentifier((uint64_t)a4);
    CFURLRef v24 = CFURLCreateWithString(v22, Identifier, 0);
  }
  else
  {
    CFURLRef v24 = 0;
  }
  uint64_t v29 = v178;
  *(void *)(v178 + 152) = 0;
  *(unsigned char *)(v29 + 145) = 1;
  uint64_t v30 = *(void *)(a2 + 9048);
  if (v30)
  {
    uint64_t v31 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v32 = v31 ? v31 : 0;
    uint64_t v33 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v32 + 56);
    if (v33) {
      v33(v30, 0x1EE582B78, 0x1EE585318, 1, 0);
    }
  }
  *(void *)(v179 + 56) = FigGetUpTimeNanoseconds();
  if (*(__CFString **)(a3 + 248) == a4)
  {
    uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
    *(void *)(a3 + 576) = UpTimeNanoseconds;
    if (!*(_DWORD *)(a3 + 608)) {
      *(void *)(a3 + 568) = UpTimeNanoseconds;
    }
    uint64_t v34 = *(void *)(a3 + 560);
    *(void *)(a3 + 560) = 0;
    *(void *)(a3 + 632) = 0;
    CMTime v36 = *(const void **)(a3 + 544);
    if (v36)
    {
      CFRelease(v36);
      *(void *)(a3 + 544) = 0;
    }
    if (v24) {
      CFTypeRef v37 = CFRetain(v24);
    }
    else {
      CFTypeRef v37 = 0;
    }
    *(void *)(a3 + 544) = v37;
  }
  else
  {
    uint64_t v34 = 0;
  }
  v185[0] = 0;
  CFTypeRef v186 = 0;
  CFTypeRef cf = 0;
  uint64_t v38 = segPumpGetCryptKeyCommonData(a4, v185, &cf);
  if (v38) {
    goto LABEL_216;
  }
  if (FigContentKeySpecifierGetKeySystem((uint64_t)a4) != 1 || *((void *)cf + 8))
  {
    if (FigContentKeySpecifierGetKeySystem((uint64_t)a4) == 1)
    {
      CFTypeRef v39 = cf;
      uint64_t v40 = *((void *)cf + 8);
      if (v40)
      {
        if (!*((unsigned char *)cf + 88)) {
          goto LABEL_52;
        }
        if (segPumpGetDecryptorState(v40) != 2)
        {
          CFTypeRef v39 = cf;
          uint64_t v40 = *((void *)cf + 8);
LABEL_52:
          uint64_t v38 = segPumpPrepareCryptorForKeyLoading(v40, *((void *)v39 + 9), 1, (void *)v39 + 12, (unsigned __int8 *)v39 + 88);
          if (!v38)
          {
            CFTypeRef v41 = cf;
            if (!*((unsigned char *)cf + 88)) {
              goto LABEL_136;
            }
            if (dword_1E9351350)
            {
              LODWORD(v184) = 0;
              type[0] = OS_LOG_TYPE_DEFAULT;
              uint64_t v42 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              unsigned int v43 = v184;
              if (os_log_type_enabled(v42, type[0])) {
                unsigned int v44 = v43;
              }
              else {
                unsigned int v44 = v43 & 0xFFFFFFFE;
              }
              if (v44)
              {
                CFURLRef v45 = *(__CFString **)(a2 + 8760);
                if (!v45) {
                  CFURLRef v45 = &stru_1EE53F4B8;
                }
                uint64_t v46 = *(void *)a3;
                CFTypeRef v47 = (__CFString *)*((void *)cf + 8);
                uint64_t v48 = *((void *)cf + 12);
                int v49 = *((unsigned __int8 *)cf + 88);
                *(_DWORD *)v188 = 136316418;
                *(void *)&v188[4] = "segPumpSetupCryptorForCryptKey";
                __int16 v189 = 2114;
                v190 = v45;
                __int16 v191 = 2048;
                uint64_t v192 = v46;
                __int16 v193 = 2048;
                v194 = v47;
                __int16 v195 = 2048;
                uint64_t v196 = v48;
                __int16 v197 = 1024;
                LODWORD(v198) = v49;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              CFTypeRef v41 = cf;
            }
            uint64_t v96 = *((void *)v41 + 13);
            if (!v96)
            {
LABEL_136:
              uint64_t v53 = 1;
              goto LABEL_176;
            }
            uint64_t v53 = 1;
            CFDataWithBlockBufferNoCFArrayRef Copy = segPumpPrepareCryptorForKeyLoading(v96, *((void *)v41 + 14), 1, (void *)v41 + 17, (unsigned __int8 *)v41 + 128);
            if (!CFDataWithBlockBufferNoCopy && dword_1E9351350)
            {
              LODWORD(v184) = 0;
              type[0] = OS_LOG_TYPE_DEFAULT;
              v97 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              unsigned int v98 = v184;
              if (os_log_type_enabled(v97, type[0])) {
                unsigned int v99 = v98;
              }
              else {
                unsigned int v99 = v98 & 0xFFFFFFFE;
              }
              if (v99)
              {
                v100 = *(__CFString **)(a2 + 8760);
                if (!v100) {
                  v100 = &stru_1EE53F4B8;
                }
                uint64_t v101 = *(void *)a3;
                v102 = (__CFString *)*((void *)cf + 13);
                uint64_t v103 = *((void *)cf + 17);
                int v104 = *((unsigned __int8 *)cf + 128);
                *(_DWORD *)v188 = 136316418;
                *(void *)&v188[4] = "segPumpSetupCryptorForCryptKey";
                __int16 v189 = 2114;
                v190 = v100;
                __int16 v191 = 2048;
                uint64_t v192 = v101;
                __int16 v193 = 2048;
                v194 = v102;
                __int16 v195 = 2048;
                uint64_t v196 = v103;
                __int16 v197 = 1024;
                LODWORD(v198) = v104;
                _os_log_send_and_compose_impl();
              }
              uint64_t v53 = 1;
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              goto LABEL_176;
            }
            goto LABEL_175;
          }
LABEL_216:
          CFDataWithBlockBufferNoCFArrayRef Copy = v38;
          goto LABEL_217;
        }
LABEL_150:
        uint64_t v53 = 0;
        goto LABEL_176;
      }
    }
    if (a4 && FigContentKeySpecifierGetKeySystem((uint64_t)a4) == 2)
    {
      uint64_t v38 = segPumpEnsureAndSetupBasicAESProtector(a2);
      if (v38) {
        goto LABEL_216;
      }
      if (*((void *)v185[0] + 5))
      {
        if (!dword_1E9351350) {
          goto LABEL_150;
        }
LABEL_141:
        LODWORD(v184) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        v106 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v107 = v184;
        if (os_log_type_enabled(v106, type[0])) {
          unsigned int v108 = v107;
        }
        else {
          unsigned int v108 = v107 & 0xFFFFFFFE;
        }
        if (v108)
        {
          v109 = *(__CFString **)(a2 + 8760);
          if (!v109) {
            v109 = &stru_1EE53F4B8;
          }
          uint64_t v110 = *(void *)a3;
          v111 = (__CFString *)*((void *)v185[0] + 5);
          *(_DWORD *)v188 = 136315906;
          *(void *)&v188[4] = "segPumpSetupCryptorForCryptKey";
          __int16 v189 = 2114;
          v190 = v109;
          __int16 v191 = 2048;
          uint64_t v192 = v110;
          __int16 v193 = 2048;
          v194 = v111;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        goto LABEL_150;
      }
      uint64_t v77 = *(void *)(a2 + 248);
      uint64_t v78 = FigGetAllocatorForMedia();
      long long v79 = (char *)v185[0];
      uint64_t v80 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v80) {
        uint64_t v81 = v80;
      }
      else {
        uint64_t v81 = 0;
      }
      v105 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *))(v81 + 104);
      if (!v105)
      {
        CFDataWithBlockBufferNoCFArrayRef Copy = 4294954514;
        goto LABEL_217;
      }
      CFDataWithBlockBufferNoCFArrayRef Copy = v105(v77, v78, 1, 0, v79 + 40);
      uint64_t v53 = 0;
      if (!CFDataWithBlockBufferNoCopy && dword_1E9351350) {
        goto LABEL_141;
      }
LABEL_175:
      if (!CFDataWithBlockBufferNoCopy) {
        goto LABEL_176;
      }
LABEL_217:
      CFTypeRef v130 = 0;
      goto LABEL_235;
    }
    CFDataWithBlockBufferNoCFArrayRef Copy = FigSignalErrorAt();
LABEL_174:
    uint64_t v53 = 0;
    goto LABEL_175;
  }
  CFAllocatorRef v51 = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(v51, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v53 = (uint64_t)Mutable;
  if (Mutable)
  {
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F1FC38], @"com.apple.pkd");
    CFAllocatorRef v54 = (const void *)FigContentKeySpecifierGetIdentifier((uint64_t)a4);
    CFDictionarySetValue((CFMutableDictionaryRef)v53, (const void *)*MEMORY[0x1E4F1FC10], v54);
    FigCFDictionarySetInt32();
    int EncryptionMethod = FigContentKeySpecifierGetEncryptionMethod((uint64_t)a4);
    CFAllocatorRef v56 = kFigCPEProtectorCryptorCreationOptionDecryptFormatType_Pastis;
    if (EncryptionMethod == 2) {
      CFAllocatorRef v56 = kFigCPEProtectorCryptorCreationOptionDecryptFormatType_MSE;
    }
    CFDictionarySetValue((CFMutableDictionaryRef)v53, (const void *)*MEMORY[0x1E4F1FC28], *v56);
    uint64_t SupportedProtocolVersions = FigContentKeySpecifierGetSupportedProtocolVersions((uint64_t)a4);
    if (*v7
      && !*(void *)a3
      && FigContentKeySpecifierGetEncryptionMethod((uint64_t)a4) != 3
      && FigContentKeySpecifierGetEncryptionMethod((uint64_t)a4) != 2
      && !*((void *)cf + 13))
    {
      uint64_t v176 = v34;
      uint64_t v158 = *(void *)(a2 + 9472);
      uint64_t v159 = FigGetAllocatorForMedia();
      uint64_t v160 = FigContentKeySessionCopyCryptor(v158, v159, v53, (uint64_t)cf + 104);
      if (v160
        || (uint64_t v161 = *(void *)(a2 + 264)) != 0
        && (uint64_t v160 = FigCPECryptorSetProperty(*((void *)cf + 13), *MEMORY[0x1E4F1FDA0], v161), v160))
      {
        CFDataWithBlockBufferNoCFArrayRef Copy = v160;
        uint64_t v34 = v176;
        goto LABEL_173;
      }
      uint64_t v34 = v176;
      if (SupportedProtocolVersions)
      {
        uint64_t v121 = FigCPECryptorSetProperty(*((void *)cf + 13), *MEMORY[0x1E4F1FDE8], SupportedProtocolVersions);
        if (v121) {
          goto LABEL_286;
        }
      }
      CMNotificationCenterGetDefaultLocalCenter();
      uint64_t v162 = FigNotificationCenterAddWeakListener();
      if (v162)
      {
        CFDataWithBlockBufferNoCFArrayRef Copy = v162;
        if (v162 != -12724) {
          goto LABEL_173;
        }
      }
      uint64_t v163 = *(void *)a2;
      CFTypeRef v164 = cf;
      *((void *)cf + 14) = *(void *)a2;
      uint64_t v121 = segPumpPrepareCryptorForKeyLoading(*((void *)v164 + 13), v163, 0, (void *)v164 + 17, (unsigned __int8 *)v164 + 128);
      if (v121) {
        goto LABEL_286;
      }
      if (dword_1E9351350)
      {
        LODWORD(v184) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        v165 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v166 = v184;
        if (os_log_type_enabled(v165, type[0])) {
          unsigned int v167 = v166;
        }
        else {
          unsigned int v167 = v166 & 0xFFFFFFFE;
        }
        if (v167)
        {
          v168 = &stru_1EE53F4B8;
          uint64_t v169 = *(void *)a3;
          if (*(void *)(a2 + 8760)) {
            v168 = *(__CFString **)(a2 + 8760);
          }
          v170 = *(__CFString **)(a2 + 9472);
          uint64_t v171 = *((void *)cf + 13);
          uint64_t v172 = *((void *)cf + 17);
          int v173 = *((unsigned __int8 *)cf + 128);
          *(_DWORD *)v188 = 136316674;
          *(void *)&v188[4] = "segPumpSetupCryptorForCryptKey";
          __int16 v189 = 2114;
          v190 = v168;
          __int16 v191 = 2048;
          uint64_t v192 = v169;
          __int16 v193 = 2048;
          v194 = v170;
          __int16 v195 = 2048;
          uint64_t v196 = v171;
          __int16 v197 = 2048;
          uint64_t v198 = v172;
          __int16 v199 = 1024;
          int v200 = v173;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        uint64_t v34 = v176;
      }
    }
    uint64_t v58 = *(const void **)(a2 + 9448);
    if (v58) {
      CFDictionarySetValue((CFMutableDictionaryRef)v53, (const void *)*MEMORY[0x1E4F1FC58], v58);
    }
    CFStringRef v59 = *(const void **)(a2 + 9456);
    if (v59) {
      CFDictionarySetValue((CFMutableDictionaryRef)v53, (const void *)*MEMORY[0x1E4F1FC50], v59);
    }
    if (segPumpCryptKeyIsLowValueFairPlayStreamingKey((uint64_t)a4)) {
      CFDictionarySetValue((CFMutableDictionaryRef)v53, (const void *)*MEMORY[0x1E4F1FC48], (const void *)*MEMORY[0x1E4F1CFD0]);
    }
    if (FigContentKeySpecifierGetEncryptionMethod((uint64_t)a4) != 3 && *v7 && !*(void *)a3) {
      CFDictionarySetValue((CFMutableDictionaryRef)v53, (const void *)*MEMORY[0x1E4F1FC20], @"DestinationNero");
    }
    uint64_t v60 = *(void *)(a2 + 9472);
    uint64_t v61 = FigGetAllocatorForMedia();
    long long v62 = (char *)cf;
    uint64_t v63 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v63) {
      uint64_t v64 = v63;
    }
    else {
      uint64_t v64 = 0;
    }
    v90 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))(v64 + 16);
    if (v90)
    {
      uint64_t v91 = v90(v60, v61, v53, 1, v62 + 64);
      if (v91)
      {
        CFDataWithBlockBufferNoCFArrayRef Copy = v91;
        goto LABEL_173;
      }
      uint64_t v92 = *((void *)cf + 8);
      uint64_t v93 = FigGetAllocatorForMedia();
      uint64_t v94 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v94) {
        uint64_t v95 = v94;
      }
      else {
        uint64_t v95 = 0;
      }
      v112 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v95 + 48);
      if (v112)
      {
        v112(v92, *MEMORY[0x1E4F1FDC0], v93, &v186);
        v113 = (__CFError *)v186;
      }
      else
      {
        v113 = 0;
      }
      segPumpRTCReportingUpdateCryptorErrorKeys(a2, v113);
      if (v186)
      {
        CFRelease(v186);
        CFTypeRef v186 = 0;
      }
      CMNotificationCenterGetDefaultLocalCenter();
      uint64_t v114 = FigNotificationCenterAddWeakListener();
      if (v114)
      {
        CFDataWithBlockBufferNoCFArrayRef Copy = v114;
        if (v114 != -12724) {
          goto LABEL_173;
        }
      }
      *((void *)cf + 9) = *(void *)a2;
      CMNotificationCenterGetDefaultLocalCenter();
      uint64_t v115 = FigNotificationCenterAddWeakListener();
      if (v115)
      {
        CFDataWithBlockBufferNoCFArrayRef Copy = v115;
        if (v115 != -12724) {
          goto LABEL_173;
        }
      }
      uint64_t v116 = *(void *)(a2 + 264);
      if (!v116)
      {
LABEL_169:
        if (!SupportedProtocolVersions)
        {
LABEL_246:
          CFDataWithBlockBufferNoCFArrayRef Copy = segPumpPrepareCryptorForKeyLoading(*((void *)cf + 8), *((void *)cf + 9), 0, (void *)cf + 12, (unsigned __int8 *)cf + 88);
          if (!CFDataWithBlockBufferNoCopy && dword_1E9351350)
          {
            LODWORD(v184) = 0;
            type[0] = OS_LOG_TYPE_DEFAULT;
            v149 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int v150 = v184;
            if (os_log_type_enabled(v149, type[0])) {
              unsigned int v151 = v150;
            }
            else {
              unsigned int v151 = v150 & 0xFFFFFFFE;
            }
            if (v151)
            {
              v152 = &stru_1EE53F4B8;
              uint64_t v153 = *(void *)a3;
              if (*(void *)(a2 + 8760)) {
                v152 = *(__CFString **)(a2 + 8760);
              }
              v154 = *(__CFString **)(a2 + 9472);
              uint64_t v155 = *((void *)cf + 8);
              uint64_t v156 = *((void *)cf + 12);
              int v157 = *((unsigned __int8 *)cf + 88);
              *(_DWORD *)v188 = 136316674;
              *(void *)&v188[4] = "segPumpSetupCryptorForCryptKey";
              __int16 v189 = 2114;
              v190 = v152;
              __int16 v191 = 2048;
              uint64_t v192 = v153;
              __int16 v193 = 2048;
              v194 = v154;
              __int16 v195 = 2048;
              uint64_t v196 = v155;
              __int16 v197 = 2048;
              uint64_t v198 = v156;
              __int16 v199 = 1024;
              int v200 = v157;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            CFDataWithBlockBufferNoCFArrayRef Copy = 0;
          }
          goto LABEL_173;
        }
        uint64_t v122 = *((void *)cf + 8);
        uint64_t v123 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v123) {
          uint64_t v124 = v123;
        }
        else {
          uint64_t v124 = 0;
        }
        v148 = *(uint64_t (**)(uint64_t, void, uint64_t))(v124 + 56);
        if (v148)
        {
          uint64_t v121 = v148(v122, *MEMORY[0x1E4F1FDE8], SupportedProtocolVersions);
          if (!v121) {
            goto LABEL_246;
          }
          goto LABEL_286;
        }
        CFDataWithBlockBufferNoCFArrayRef Copy = 4294954514;
LABEL_173:
        CFRelease((CFTypeRef)v53);
        goto LABEL_174;
      }
      uint64_t v117 = *((void *)cf + 8);
      uint64_t v118 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v118) {
        uint64_t v119 = v118;
      }
      else {
        uint64_t v119 = 0;
      }
      v120 = *(uint64_t (**)(uint64_t, void, uint64_t))(v119 + 56);
      if (v120)
      {
        uint64_t v121 = v120(v117, *MEMORY[0x1E4F1FDA0], v116);
        if (v121)
        {
LABEL_286:
          CFDataWithBlockBufferNoCFArrayRef Copy = v121;
          goto LABEL_173;
        }
        goto LABEL_169;
      }
    }
    CFDataWithBlockBufferNoCFArrayRef Copy = 4294954514;
    goto LABEL_173;
  }
  CFDataWithBlockBufferNoCFArrayRef Copy = FigSignalErrorAt();
  if (CFDataWithBlockBufferNoCopy) {
    goto LABEL_217;
  }
LABEL_176:
  BOOL v125 = v53 == 0;
  if (v53) {
    *(unsigned char *)(v178 + 144) = 0;
  }
  if (!*(void *)(a2 + 296)) {
    goto LABEL_197;
  }
  *(void *)&v201[0] = 0;
  CFTypeRef cf = 0;
  *(void *)v188 = 0;
  v185[0] = 0;
  uint64_t v126 = segPumpGetCryptKeyCommonData(a4, v201, v188);
  if (v126) {
    goto LABEL_280;
  }
  v127 = (const void *)FigContentKeySpecifierGetIdentifier((uint64_t)a4);
  if (!v127)
  {
    uint64_t v126 = FigSignalErrorAt();
    goto LABEL_280;
  }
  uint64_t v126 = FigStreamingCacheCopyCryptKey(*(void *)(a2 + 296), v127, v185);
  if (v126)
  {
LABEL_280:
    CFDataWithBlockBufferNoCFArrayRef Copy = v126;
    CFTypeRef v130 = 0;
    goto LABEL_188;
  }
  if (!v185[0]) {
    goto LABEL_197;
  }
  FigGetAllocatorForMedia();
  CFDataWithBlockBufferNoCFArrayRef Copy = FigCreateCFDataWithBlockBufferNoCopy();
  CFTypeRef v128 = cf;
  if (CFDataWithBlockBufferNoCopy)
  {
    CFTypeRef v130 = 0;
    if (cf) {
LABEL_186:
    }
      CFRelease(v128);
  }
  else
  {
    uint64_t v129 = *(void *)v188;
    *(_WORD *)(*(void *)v188 + 144) = 1;
    *(unsigned char *)(v129 + 146) = 1;
    if (v128)
    {
      CFTypeRef v130 = CFRetain(v128);
      CFTypeRef v128 = cf;
      if (!cf) {
        goto LABEL_188;
      }
      goto LABEL_186;
    }
    CFTypeRef v130 = 0;
    CFDataWithBlockBufferNoCFArrayRef Copy = 0;
  }
LABEL_188:
  if (v185[0]) {
    CFRelease(v185[0]);
  }
  if (!CFDataWithBlockBufferNoCopy)
  {
    if (v130)
    {
      uint64_t v131 = segPumpCryptSetKey(v177, a2, a3, a4, *(void *)(v178 + 80), 1, v130, 0);
      if (v131)
      {
LABEL_234:
        CFDataWithBlockBufferNoCFArrayRef Copy = v131;
        goto LABEL_235;
      }
      if (*(void *)(v178 + 104))
      {
        uint64_t v132 = segPumpCryptSetKey(v177, a2, a3, a4, *(void *)(v178 + 120), 1, v130, 0);
        CFDataWithBlockBufferNoCFArrayRef Copy = v132;
        if (v53 || v132) {
          goto LABEL_235;
        }
        goto LABEL_233;
      }
      CFDataWithBlockBufferNoCFArrayRef Copy = 0;
LABEL_232:
      if (v53) {
        goto LABEL_235;
      }
LABEL_233:
      uint64_t v131 = segPumpContinueIfCryptKeyResponseWasAlreadySet(v177, a2, a3, a4, v178);
      goto LABEL_234;
    }
LABEL_197:
    if (segPumpShouldRequestURLAsHTTPURL(a2, v24))
    {
      if (a4 && FigContentKeySpecifierGetKeySystem((uint64_t)a4) == 2)
      {
        uint64_t v133 = *(void *)(a2 + 56);
        v134 = *(const void **)(a3 + 552);
        uint64_t v135 = *(void *)(a2 + 216);
        uint64_t v136 = *(void *)(a2 + 240);
        uint64_t v137 = *(void *)a2;
        memset(v201, 0, sizeof(v201));
        long long v203 = 0u;
        long long v204 = 0u;
        uint64_t v202 = 0x800000000;
        uint64_t v205 = 0;
        CFDataWithBlockBufferNoCFArrayRef Copy = segPumpCreateHTTPRequest(a2, v133, (void *)a3, v134, v34, v24, v135, v136, 0.794, 0, 12, 1u, v201, 0, 0, (uint64_t)segPumpCryptMemoryRequestCallback, (uint64_t)segPumpCryptFileReadCallback, v137, 0,
                                        a3 + 544);
        if (dword_1E9351350)
        {
          uint64_t v175 = v34;
          LODWORD(v185[0]) = 0;
          LOBYTE(cf) = 0;
          v138 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v139 = v185[0];
          if (os_log_type_enabled(v138, (os_log_type_t)cf)) {
            unsigned int v140 = v139;
          }
          else {
            unsigned int v140 = v139 & 0xFFFFFFFE;
          }
          if (v140)
          {
            v141 = *(__CFString **)(a2 + 8760);
            if (!v141) {
              v141 = &stru_1EE53F4B8;
            }
            uint64_t v142 = *(void *)a3;
            v143 = @"[]";
            if (*(unsigned char *)(a2 + 339)) {
              v143 = a4;
            }
            *(_DWORD *)v188 = 136316162;
            *(void *)&v188[4] = "segPumpSendCryptKeyRequest";
            __int16 v189 = 2114;
            v190 = v141;
            __int16 v191 = 2048;
            uint64_t v192 = v142;
            __int16 v193 = 2114;
            v194 = v143;
            __int16 v195 = 1024;
            LODWORD(v196) = CFDataWithBlockBufferNoCopy;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          uint64_t v34 = v175;
        }
        goto LABEL_225;
      }
      segPumpAppendErrorLogEntry((uint64_t)v177, a2, a3, (const __CFURL **)(a3 + 544), -12885, @"CoreMediaErrorDomain", @"Cannot fetch wrapped key via http", 0, 0, 3u, 3u);
      uint64_t v38 = FigSignalErrorAt();
      goto LABEL_216;
    }
    *(void *)&v201[0] = 0;
    *(void *)v188 = 0;
    if (segPumpGetCryptKeyCommonData(a4, v201, v188)) {
      goto LABEL_223;
    }
    if (*(void *)(*(void *)v188 + 64))
    {
      if (*(unsigned char *)(*(void *)v188 + 88)) {
        goto LABEL_220;
      }
      if (!*(void *)(*(void *)v188 + 104)) {
        goto LABEL_223;
      }
    }
    else if (!*(void *)(*(void *)v188 + 104))
    {
      goto LABEL_220;
    }
    if (!*(unsigned char *)(*(void *)v188 + 128))
    {
LABEL_223:
      CFDataWithBlockBufferNoCFArrayRef Copy = 0;
      goto LABEL_225;
    }
LABEL_220:
    CFDataWithBlockBufferNoCFArrayRef Copy = segPumpRequestCustomURLForCryptKey(a2, a3, a4, v53);
    if (CFDataWithBlockBufferNoCopy) {
      goto LABEL_217;
    }
    BOOL v125 = 1;
LABEL_225:
    CFTypeRef v130 = 0;
    if (v125 && !CFDataWithBlockBufferNoCopy)
    {
      int v144 = *(_DWORD *)(a2 + 8);
      unsigned int v145 = 2 * v144;
      if ((2 * v144) <= 3) {
        unsigned int v145 = 3;
      }
      double v146 = (double)v145;
      if (!v144) {
        double v146 = 20.0;
      }
      FigHTTPCreateTimer(*(const void **)a2, (uint64_t)segPumpCryptKeyTimeoutHandler, *(NSObject **)(a2 + 64), (dispatch_object_t *)(a3 + 640), v146);
      CFTypeRef v130 = 0;
    }
    goto LABEL_232;
  }
LABEL_235:
  if (v24) {
    CFRelease(v24);
  }
  if (v130) {
    CFRelease(v130);
  }
  if (v34)
  {
    CFTypeRef v89 = (CFTypeRef)v34;
    goto LABEL_241;
  }
  return CFDataWithBlockBufferNoCopy;
}

void segPumpGetIndexFileRefreshTimestamp(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5 = a3;
  uint64_t v13 = a3;
  uint64_t v7 = *(void *)(a2 + 56);
  if (v7)
  {
    if (!*(unsigned char *)(a2 + 1168))
    {
      CFArrayRef MediaSegmentSpecifiers = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(v7);
      if (MediaSegmentSpecifiers)
      {
        if (CFArrayGetCount(MediaSegmentSpecifiers) >= 1)
        {
          if (FigMediaPlaylistHasEndTag(*(void *)(a2 + 56)))
          {
            unsigned int v10 = *(_DWORD *)(a1 + 8);
            double v11 = *(double *)(a1 + 344) - (double)v10;
            uint64_t v12 = *(_DWORD *)(a1 + 7944) * v10;
            if ((uint64_t)v11 > v12) {
              uint64_t v12 = (uint64_t)v11;
            }
            uint64_t v5 = *(void *)(a2 + 1048) + 1000000000 * v12;
          }
          else if ((*(_DWORD *)(a2 + 160) & 0xFFFFFFFE) != 2 && !*(unsigned char *)(a1 + 328))
          {
            segPumpGetLiveIndexRefreshTimestamp(a1, a2, &v13);
            uint64_t v5 = v13;
          }
        }
      }
    }
  }
  *a4 = v5;
}

uint64_t segPumpSendIndexFileRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (unsigned char *)(a2 + 7999);
  uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  CFIndex v66 = 0;
  uint64_t v67 = -1;
  if (v5[685] && *(_DWORD *)(a3 + 160) == 1)
  {
    *(_DWORD *)(a3 + 160) = 2;
    *(_OWORD *)(a3 + 168) = 0u;
    *(_OWORD *)(a3 + 184) = 0u;
    *(_DWORD *)(a3 + 200) = 0;
  }
  uint64_t v7 = *(const void **)(a3 + 280);
  if (v7)
  {
    uint64_t v8 = *(const void **)(a3 + 272);
    *(void *)(a3 + 272) = 0;
    *(void *)(a3 + 280) = 0;
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v65 = v5;
  if (*v5) {
    unsigned int v9 = 519;
  }
  else {
    unsigned int v9 = 7;
  }
  unsigned int v10 = *(const void **)(a3 + 416);
  double v11 = *(const void **)(a3 + 424);
  uint64_t v12 = *(const void **)(a3 + 520);
  if (v12)
  {
    CFRelease(v12);
    *(void *)(a3 + 520) = 0;
  }
  *(void *)(a3 + 496) = 0;
  *(void *)(a3 + 416) = 0;
  *(void *)(a3 + 424) = 0;
  if (*(unsigned char *)(a2 + 320))
  {
    uint64_t v13 = *(void *)(a2 + 8144);
    if (v13) {
      PathwayID = FigAlternateGetPathwayID(*(void *)(v13 + 8));
    }
    else {
      PathwayID = @".";
    }
    uint64_t v15 = FigCFHTTPCopyURLAndInheritQueyComponentIfNotPresent(*(const __CFURL **)(a2 + 312), (CFURLRef *)(a3 + 8));
    if (v15)
    {
      uint64_t HTTPRequest = v15;
      CFMutableArrayRef Mutable = 0;
      goto LABEL_88;
    }
    segPumpStreamUpdateIndexFile((void *)a3, *(CFTypeRef *)(a3 + 8), *(CFTypeRef *)(a3 + 8), *(CFTypeRef *)(a3 + 24), *(CFTypeRef *)(a3 + 32), PathwayID);
  }
  if (*(unsigned char *)(a3 + 876)
    && UpTimeNanoseconds - *(void *)(a3 + 1056) > 1000000000
                                                  * (unint64_t)(3 * *(_DWORD *)(a2 + 8)))
  {
    *(unsigned char *)(a3 + 876) = 0;
  }
  *(void *)(a3 + 440) = UpTimeNanoseconds;
  if (!*(_DWORD *)(a3 + 472)) {
    *(void *)(a3 + 432) = UpTimeNanoseconds;
  }
  *(void *)(a3 + 1048) = UpTimeNanoseconds;
  *(unsigned char *)(a3 + 867) = 0;
  *(void *)(a3 + 360) = -1;
  *(void *)(a3 + 368) = -1;
  uint64_t v16 = *(void *)(a3 + 56);
  if (!v16) {
    goto LABEL_139;
  }
  if (*(_DWORD *)(a3 + 160) == 3)
  {
    FigStreamPlaylistPredictMediaSequenceAndPartForAdvance(v16, &v67, &v66, *(double *)(a3 + 192));
    uint64_t v17 = v67;
    goto LABEL_26;
  }
  CFArrayRef MediaSegmentSpecifiers = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(v16);
  if (!MediaSegmentSpecifiers
    || CFArrayGetCount(MediaSegmentSpecifiers) < 1
    || !*(unsigned char *)(a2 + 328)
    || (*(_DWORD *)(a3 + 160) & 0xFFFFFFFE) != 4)
  {
LABEL_139:
    if (*(unsigned char *)(a2 + 328) && *(unsigned char *)(a3 + 862) && *(unsigned char *)(a3 + 864))
    {
      CFMutableArrayRef Mutable = *(__CFArray **)(*(void *)(a2 + 16 * *(void *)a3 + 384) + 56);
      if (!Mutable) {
        goto LABEL_56;
      }
      long long v62 = v11;
      CFIndex v29 = 0;
      CFURLRef v30 = *(const __CFURL **)(a3 + 16);
      uint64_t v64 = v8;
      do
      {
        CFArrayRef RenditionReportSpecifiers = (const __CFArray *)FigMediaPlaylistGetRenditionReportSpecifiers(*(void *)(*(void *)(a2 + 16 * *(void *)a3 + 384) + 56));
        if (RenditionReportSpecifiers) {
          CFArrayRef RenditionReportSpecifiers = (const __CFArray *)CFArrayGetCount(RenditionReportSpecifiers);
        }
        if (v29 >= (uint64_t)RenditionReportSpecifiers)
        {
          CMTime v35 = v7;
          CFStringRef ValueAtIndex = 0;
          uint64_t v61 = -1;
          BOOL v60 = 1;
          BOOL v39 = 1;
          uint64_t LastMediaSequenceNumber = -1;
          goto LABEL_102;
        }
        CFArrayRef v32 = (const __CFArray *)FigMediaPlaylistGetRenditionReportSpecifiers(*(void *)(*(void *)(a2 + 16 * *(void *)a3 + 384)
                                                                                        + 56));
        CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v32, v29);
        CFURLRef URL = (const __CFURL *)FigRenditionReportSpecifierGetURL((uint64_t)ValueAtIndex);
        ++v29;
      }
      while (!segPumpRenditionReportURLsAreEqual(v30, URL));
      CMTime v35 = v7;
      uint64_t LastMediaSequenceNumber = FigRenditionReportSpecifierGetLastMediaSequenceNumber((uint64_t)ValueAtIndex);
      int LastPart = FigRenditionReportSpecifierGetLastPart((uint64_t)ValueAtIndex);
      CFIndex v38 = LastPart;
      BOOL v39 = LastMediaSequenceNumber == -1;
      if (LastMediaSequenceNumber != -1 && LastPart != -1)
      {
        uint64_t v7 = v35;
        uint64_t v8 = v64;
        if ((LastMediaSequenceNumber & 0x8000000000000000) == 0) {
          goto LABEL_114;
        }
LABEL_129:
        CFMutableArrayRef Mutable = 0;
        double v11 = v62;
LABEL_130:
        if (ValueAtIndex && *(unsigned char *)(a2 + 329) && *(_DWORD *)(a3 + 160) != 4) {
          *(_DWORD *)(a3 + 160) = 4;
        }
        goto LABEL_56;
      }
      BOOL v60 = LastPart == -1;
      uint64_t v61 = LastPart;
LABEL_102:
      FigMediaPlaylistGetMediaSegmentSpecifiers((uint64_t)Mutable);
      Lastuint64_t Value = FigCFArrayGetLastValue();
      if (LastValue)
      {
        uint64_t v56 = LastValue;
        if (v39) {
          uint64_t LastMediaSequenceNumber = FigMediaSegmentSpecifierGetMediaSequence(LastValue);
        }
        uint64_t v7 = v35;
        if (v60)
        {
          CFArrayRef PartialSegments = (const __CFArray *)FigMediaSegmentSpecifierGetPartialSegments(v56);
          uint64_t v8 = v64;
          if (PartialSegments)
          {
            CFIndex v38 = CFArrayGetCount(PartialSegments) - 1;
            if ((LastMediaSequenceNumber & 0x8000000000000000) == 0) {
              goto LABEL_114;
            }
            goto LABEL_129;
          }
          CFIndex v38 = -1;
          if (LastMediaSequenceNumber < 0) {
            goto LABEL_129;
          }
LABEL_114:
          CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
          CFMutableArrayRef Mutable = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D510]);
          CFArrayAppendValue(Mutable, @"_HLS_msn=");
          FigCFArrayAppendInt64();
          if ((v38 & 0x8000000000000000) == 0)
          {
            CFArrayAppendValue(Mutable, @"_HLS_part=");
            FigCFArrayAppendInt64();
          }
          if (ValueAtIndex || !Mutable)
          {
            double v11 = v62;
            if (Mutable) {
              v9 |= 0x400u;
            }
            goto LABEL_130;
          }
          double v11 = v62;
          if (!*(unsigned char *)(a2 + 329))
          {
            v9 |= 0x400u;
            goto LABEL_56;
          }
          *(unsigned char *)(a2 + 331) = 1;
          uint64_t v59 = segPumpSetupBlockingReload(a1, a2, *(void *)(a2 + 16 * *(void *)a3 + 384));
          if (!v59) {
            goto LABEL_56;
          }
          goto LABEL_136;
        }
      }
      else
      {
        uint64_t v7 = v35;
      }
      uint64_t v8 = v64;
      CFIndex v38 = v61;
      if ((LastMediaSequenceNumber & 0x8000000000000000) == 0) {
        goto LABEL_114;
      }
      goto LABEL_129;
    }
LABEL_55:
    CFMutableArrayRef Mutable = 0;
    goto LABEL_56;
  }
  uint64_t v23 = v8;
  CFURLRef v24 = v7;
  FigMediaPlaylistGetMediaSegmentSpecifiers(*(void *)(a3 + 56));
  uint64_t v25 = FigCFArrayGetLastValue();
  int IsFragment = FigMediaSegmentSpecifierIsFragment(v25);
  uint64_t MediaSequence = FigMediaSegmentSpecifierGetMediaSequence(v25);
  uint64_t v17 = MediaSequence;
  if (IsFragment)
  {
    uint64_t v67 = MediaSequence;
    CFArrayRef Count = (const __CFArray *)FigMediaSegmentSpecifierGetPartialSegments(v25);
    if (Count) {
      CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
    }
    uint64_t v7 = v24;
    CFIndex v66 = (CFIndex)Count;
  }
  else
  {
    uint64_t v17 = MediaSequence + 1;
    uint64_t v67 = MediaSequence + 1;
    if (*(double *)(a2 + 16) == 0.0) {
      CFIndex v66 = -1;
    }
    uint64_t v7 = v24;
  }
  uint64_t v8 = v23;
  FigMediaSegmentSpecifierGetPartialSegments(v25);
LABEL_26:
  v9 |= 0x400u;
  if (v17 < 0) {
    goto LABEL_55;
  }
  CFAllocatorRef v18 = (const __CFAllocator *)FigGetAllocatorForMedia();
  uint64_t v19 = CFArrayCreateMutable(v18, 0, MEMORY[0x1E4F1D510]);
  CFMutableArrayRef Mutable = v19;
  if (!v19)
  {
    uint64_t v59 = FigSignalErrorAt();
LABEL_136:
    uint64_t HTTPRequest = v59;
    goto LABEL_88;
  }
  CFArrayAppendValue(v19, @"_HLS_msn=");
  FigCFArrayAppendInt64();
  if ((v66 & 0x8000000000000000) == 0)
  {
    CFArrayAppendValue(Mutable, @"_HLS_part=");
    FigCFArrayAppendInt64();
  }
  if ((v67 & 0x8000000000000000) == 0)
  {
    CFIndex v21 = v66;
    *(void *)(a3 + 360) = v67;
    *(void *)(a3 + 368) = v21;
  }
LABEL_56:
  if (*(unsigned char *)(a3 + 876))
  {
    if (Mutable
      || (CFAllocatorRef v41 = (const __CFAllocator *)FigGetAllocatorForMedia(),
          (CFMutableArrayRef Mutable = CFArrayCreateMutable(v41, 0, MEMORY[0x1E4F1D510])) != 0))
    {
      uint64_t v42 = *(void *)(a3 + 56);
      unsigned int v43 = @"YES";
      if (v42 && FigMediaPlaylistCanSkipDATERANGES(v42)) {
        unsigned int v43 = @"v2";
      }
      CFArrayAppendValue(Mutable, @"_HLS_skip=");
      CFArrayAppendValue(Mutable, v43);
    }
  }
  if (*(void *)(a2 + 232))
  {
    if (!v65[5] && !*(void *)(a3 + 56) && !*(void *)a3)
    {
      if (Mutable
        || (CFAllocatorRef v44 = (const __CFAllocator *)FigGetAllocatorForMedia(),
            (CFMutableArrayRef Mutable = CFArrayCreateMutable(v44, 0, MEMORY[0x1E4F1D510])) != 0))
      {
        CFArrayAppendValue(Mutable, @"_HLS_primary_id=");
        CFArrayAppendValue(Mutable, *(const void **)(a2 + 232));
      }
    }
  }
  if (*(unsigned char *)(a3 + 858) || !segPumpShouldRequestURLAsHTTPURL(a2, *(const __CFURL **)(a3 + 16)))
  {
    uint64_t HTTPRequest = segPumpPostIndexFileRequest(a2, a3, Mutable, v9 >> 10);
    if (!dword_1E9351350) {
      goto LABEL_84;
    }
  }
  else
  {
    if (!v65[457])
    {
      v65[457] = 1;
      AttemptNetworkMonitorSetup(a2, *(void *)(a3 + 16));
    }
    if (*(void *)(a3 + 56) || *(void *)a3) {
      int v46 = 11;
    }
    else {
      int v46 = 10;
    }
    uint64_t v47 = *(void *)(a2 + 56);
    if (v7) {
      uint64_t v48 = (uint64_t)v7;
    }
    else {
      uint64_t v48 = (uint64_t)v11;
    }
    int v49 = *(const void **)(a3 + 16);
    uint64_t v50 = *(void *)(a2 + 216);
    uint64_t v51 = *(void *)(a2 + 240);
    uint64_t v52 = *(void *)a2;
    memset(v68, 0, sizeof(v68));
    uint64_t v69 = 0x100000000;
    long long v70 = 0u;
    long long v71 = 0u;
    uint64_t v72 = 0;
    uint64_t HTTPRequest = segPumpCreateHTTPRequest(a2, v47, (void *)a3, v8, v48, v49, v50, v51, 0.794, Mutable, v46, v9, v68, 0, 0, 0, (uint64_t)segPumpIndexFileReadCallback, v52, 0,
                    a3 + 408);
    if (!dword_1E9351350) {
      goto LABEL_84;
    }
  }
  os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_84:
  if (*(unsigned char *)(a3 + 866) || !v65[3] && *(void *)(a2 + 8096)) {
    segPumpScheduleIndexFileLongDownloadTimer(a2, a3);
  }
  *(unsigned char *)(a3 + 1168) = 0;
  *(unsigned char *)(a3 + 400) = 0;
  FigHTTPStopAndReleaseTimer((dispatch_object_t *)(a3 + 392));
LABEL_88:
  if (v8) {
    CFRelease(v8);
  }
  if (v7) {
    CFRelease(v7);
  }
  if (v10) {
    CFRelease(v10);
  }
  if (v11) {
    CFRelease(v11);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  return HTTPRequest;
}

void segPumpGetLiveIndexRefreshTimestamp(uint64_t a1, uint64_t a2, void *a3)
{
  unsigned int v5 = *(_DWORD *)(a1 + 8);
  uint64_t v6 = (uint64_t)(segPumpGetDurationOfLastMediaSegment(*(void *)(a2 + 56)) * 1000000000.0);
  if (dword_1E9351350 >= 2)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v8 = 500000000 * v5;
  if (*(_DWORD *)(a2 + 384))
  {
    uint64_t v9 = *(void *)(a2 + 1048);
  }
  else
  {
    uint64_t v9 = *(void *)(a2 + 1048);
    if (v8 < v6) {
      uint64_t v8 = 1000000000 * v5;
    }
  }
  *a3 = v9 + v8;
}

uint64_t segPumpSetupBlockingReload(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  int v27 = 0;
  if (!*(void *)(a3 + 56)) {
    return 0;
  }
  int v6 = *(unsigned __int8 *)(a2 + 329);
  BOOL IsCompliantWithBlockingReloadPolicy = segPumpPlaylistIsCompliantWithBlockingReloadPolicy(a3, &v27);
  *(unsigned char *)(a2 + 328) = IsCompliantWithBlockingReloadPolicy;
  if (*(unsigned char *)(a2 + 329)) {
    BOOL v8 = 1;
  }
  else {
    BOOL v8 = !IsCompliantWithBlockingReloadPolicy;
  }
  if (!v8)
  {
    if (*(_DWORD *)(a3 + 160) != 5)
    {
      if (segPumpCanContinueWithLowLatencyMode(a1, a2, a3, &v27))
      {
        *(unsigned char *)(a2 + 329) = 1;
        segPumpReadyNotification((void *)a2, @"FBP_PrefersConcurrentSwitchChanged", 0);
        *(_DWORD *)(a2 + 7944) = FigRCLGetNumberWithDefault(*(const __CFDictionary **)(a2 + 9128), @"minReserveSegments");
        if (segPumpEnsureCMCDHeaderVendor(a2)) {
          FigCMCDHeaderVendorSetStreamingFormat(*(void *)(a2 + 9576), 1);
        }
        if (dword_1E9351350)
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        uint64_t v12 = *(void *)(a2 + 9048);
        if (!v12) {
          goto LABEL_42;
        }
        uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v24) {
          uint64_t v25 = v24;
        }
        else {
          uint64_t v25 = 0;
        }
        int v26 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v25 + 56);
        if (v26) {
          v26(v12, 0x1EE582B98, 0x1EE562038, 1, 0);
        }
        goto LABEL_41;
      }
      if (FigMediaPlaylistGetPartTargetDuration(*(void *)(a3 + 56)) > 0.0)
      {
        uint64_t v12 = segPumpHandleLowLatencySetupError(a1, a2, a3, v27);
        uint64_t v16 = *(void *)(a2 + 9048);
        if (!v16) {
          goto LABEL_42;
        }
        uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v18 = v17 ? v17 : 0;
        CFIndex v21 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v18 + 56);
        if (!v21) {
          goto LABEL_42;
        }
        uint64_t v22 = v16;
        uint64_t v23 = 2;
        goto LABEL_49;
      }
    }
    goto LABEL_41;
  }
  if (*(unsigned char *)(a2 + 329))
  {
    if (!segPumpCanContinueWithLowLatencyMode(a1, a2, a3, &v27))
    {
      *(unsigned char *)(a2 + 329) = 0;
      *(void *)(a2 + 16) = 0;
      *(void *)(a2 + 7952) = 0;
      segPumpReadyNotification((void *)a2, @"FBP_PrefersConcurrentSwitchChanged", 0);
      uint64_t v12 = segPumpHandleLowLatencySetupError(a1, a2, a3, v27);
      uint64_t v13 = *(void *)(a2 + 9048);
      if (!v13) {
        goto LABEL_42;
      }
      uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v15 = v14 ? v14 : 0;
      CFIndex v21 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v15 + 56);
      if (!v21) {
        goto LABEL_42;
      }
      uint64_t v22 = v13;
      uint64_t v23 = 3;
LABEL_49:
      v21(v22, 0x1EE582B98, 0x1EE562038, v23, 0);
      goto LABEL_42;
    }
    int v9 = *(unsigned __int8 *)(a2 + 328);
  }
  else
  {
    int v9 = IsCompliantWithBlockingReloadPolicy;
  }
  if (v9 == FigMediaPlaylistDoesServerSupportsBlockingReload(*(void *)(a3 + 56))) {
    goto LABEL_41;
  }
  if (FigMediaPlaylistHasEndTag(*(void *)(a3 + 56)))
  {
    if (dword_1E9351350)
    {
      double v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    goto LABEL_41;
  }
  int v19 = *(unsigned __int8 *)(a2 + 328);
  if (v19 == FigMediaPlaylistDoesServerSupportsBlockingReload(*(void *)(a3 + 56)))
  {
LABEL_41:
    uint64_t v12 = 0;
LABEL_42:
    if (v6 == *(unsigned __int8 *)(a2 + 329)) {
      return v12;
    }
    segPumpSetPartTargetDuration(a2, *(void *)(a3 + 56));
    *(void *)(a2 + 7952) = 0;
    segPumpSetActiveHoldBack(a2, *(void *)(a3 + 56));
    return 0;
  }

  return FigSignalErrorAt();
}

void AttemptNetworkMonitorSetup(void *a1, const void *a2)
{
  if (!a1[1055] && FigCFHTTPIsHTTPBasedURL((const __CFURL *)a2))
  {
    CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      int v6 = Mutable;
      uint64_t v7 = (CFTypeRef *)(a1 + 1055);
      FigCFDictionarySetValueFromKeyInDict();
      BOOL v8 = (const void *)a1[1110];
      if (v8) {
        CFDictionarySetValue(v6, @"kFigNetworkPathEvaluatorCreateOption_InterfaceName", v8);
      }
      int v9 = (const void *)a1[1111];
      if (v9) {
        CFDictionarySetValue(v6, @"kFigNetworkPathEvaluatorCreateOption_ClientAuditToken", v9);
      }
      if (!FigNetworkPathEvaluatorCreate(a1[7], a2, v6, a1[8], *a1, segPumpUpdatePathEvaluation, a1 + 1055))
      {
        unsigned int v10 = (const void *)a1[1056];
        if (v10)
        {
          CFRelease(v10);
          a1[1056] = 0;
        }
        CFTypeRef v11 = *v7;
        uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v12) {
          uint64_t v13 = v12;
        }
        else {
          uint64_t v13 = 0;
        }
        uint64_t v14 = *(uint64_t (**)(CFTypeRef))(v13 + 8);
        if (v14) {
          uint64_t v15 = v14(v11);
        }
        else {
          uint64_t v15 = 0;
        }
        a1[1056] = v15;
        segPumpUpdateNetworkCostHasHighSpeedHighPower((uint64_t)a1);
        uint64_t v16 = (const void *)a1[1054];
        a1[1054] = a2;
        if (a2) {
          CFRetain(a2);
        }
        if (v16) {
          CFRelease(v16);
        }
        if (FigNetworkPathInformationIsHostLocal() && *v7)
        {
          CFRelease(*v7);
          *uint64_t v7 = 0;
        }
      }
      CFRelease(v6);
    }
    else
    {
      FigSignalErrorAt();
    }
  }
}

void segPumpIndexFileReadCallback(uint64_t a1, int a2, uint64_t a3, OpaqueCMBlockBuffer *a4, size_t a5, size_t a6, char a7, uint64_t a8)
{
  cf[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  *(void *)uint64_t v114 = 0;
  CFTypeRef v115 = 0;
  CFTypeRef v112 = 0;
  CFTypeRef v113 = 0;
  CFTypeRef v111 = 0;
  unsigned __int8 v110 = 0;
  FigRetainProxyRetain();
  if (!segPumpLockAndCopyPumpFromRetainProxy(a3, &v115, (uint64_t *)v114))
  {
    if ((uint64_t v16 = *(void *)(*(void *)v114 + 384), *(void *)(v16 + 424) == a1) && *(_DWORD *)(v16 + 488) == a2
      || (uint64_t v16 = *(void *)(*(void *)v114 + 400), *(void *)(v16 + 424) == a1) && *(_DWORD *)(v16 + 488) == a2
      || (uint64_t v16 = *(void *)(*(void *)v114 + 416), *(void *)(v16 + 424) == a1) && *(_DWORD *)(v16 + 488) == a2
      || (uint64_t v16 = *(void *)(*(void *)v114 + 392), *(void *)(v16 + 424) == a1) && *(_DWORD *)(v16 + 488) == a2
      || (uint64_t v16 = *(void *)(*(void *)v114 + 408), *(void *)(v16 + 424) == a1) && *(_DWORD *)(v16 + 488) == a2
      || (uint64_t v16 = *(void *)(*(void *)v114 + 424), *(void *)(v16 + 424) == a1) && *(_DWORD *)(v16 + 488) == a2)
    {
      if (a1)
      {
        *(unsigned char *)(v16 + 867) = 0;
        if (!*(void *)(v16 + 456))
        {
          uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
          uint64_t v18 = UpTimeNanoseconds - *(void *)(v16 + 432);
          *(void *)(v16 + 456) = UpTimeNanoseconds;
          *(void *)(v16 + 464) = v18;
        }
        uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
        uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v20) {
          uint64_t v21 = v20;
        }
        else {
          uint64_t v21 = 0;
        }
        uint64_t v22 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v21 + 48);
        if (v22) {
          v22(a1, 0x1EE57B6B8, AllocatorForMedia, &v111);
        }
        if (a8)
        {
          FigCreateErrorForOSStatus(a8, (CFErrorRef *)&v112);
          uint64_t v23 = segPumpHandleIndexFileNetworkError(v115, v16, 0, a8, @"CoreMediaErrorDomain", 0);
LABEL_24:
          uint64_t v24 = v23;
          goto LABEL_162;
        }
        if (a7)
        {
          cf[0] = 0;
          uint64_t v25 = FigGetAllocatorForMedia();
          uint64_t v26 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v26) {
            uint64_t v27 = v26;
          }
          else {
            uint64_t v27 = 0;
          }
          uint64_t v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v27 + 48);
          if (v28)
          {
            uint64_t v24 = v28(a1, 0x1EE57B618, v25, cf);
            segPumpRTCReportingUpdatePreLTKUStats_HeadersAvailable(*(uint64_t *)v114, a1);
            if (!v24) {
              segPumpStreamUpdateIndexFileURLWithResponse(*(uint64_t *)v114, v16, cf[0]);
            }
          }
          else
          {
            segPumpRTCReportingUpdatePreLTKUStats_HeadersAvailable(*(uint64_t *)v114, a1);
            uint64_t v24 = 4294954514;
          }
          if (v111)
          {
            int InterfaceTypeFromCFNStats = FigNetworkInterfaceGetInterfaceTypeFromCFNStats((uint64_t)v111);
            uint64_t v30 = *(void *)v114;
            *(_DWORD *)(*(void *)v114 + 8460) = InterfaceTypeFromCFNStats;
            segPumpUpdateNetworkCostHasHighSpeedHighPower(v30);
          }
          if (cf[0]) {
            CFRelease(cf[0]);
          }
        }
        else
        {
          uint64_t v24 = 0;
        }
        if (!a4)
        {
LABEL_44:
          if ((a7 & 2) == 0) {
            goto LABEL_162;
          }
          uint64_t v108 = 0;
          uint64_t v109 = 0;
          if (!*(unsigned char *)(*(void *)v114 + 48)
            && (segPumpIsProtocolUsedByRequest(a1, @"h3") || segPumpIsProtocolUsedByRequest(a1, @"h2")))
          {
            uint64_t v34 = *(const void **)(v16 + 416);
            if (v34)
            {
              uint64_t v35 = *(void *)v114;
              if (!*(unsigned char *)(*(void *)v114 + 48))
              {
                *(unsigned char *)(*(void *)v114 + 48) = 1;
                CMTime v36 = *(const void **)(v35 + 40);
                *(void *)(v35 + 40) = v34;
                CFRetain(v34);
                if (v36) {
                  CFRelease(v36);
                }
              }
            }
          }
          FigHTTPStopAndReleaseTimer((dispatch_object_t *)(v16 + 504));
          uint64_t v37 = FigGetUpTimeNanoseconds();
          uint64_t v38 = *(void *)(v16 + 424);
          uint64_t v39 = FigGetAllocatorForMedia();
          uint64_t v40 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v40) {
            uint64_t v41 = v40;
          }
          else {
            uint64_t v41 = 0;
          }
          uint64_t v42 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v41 + 48);
          if (v42) {
            v42(v38, 0x1EE57B5F8, v39, &v113);
          }
          FigNetworkInterfaceReporterSamplePhysicalStatistics(*(void *)(*(void *)v114 + 9120), a1, *(void *)(*(void *)v114 + 9048), 0x1EE582B98, 0);
          segPumpCheckAndUpdateLowLatencyServerCompliance(*(uint64_t *)v114, a1, 0);
          uint64_t v23 = segPumpSetWiFiStatsOnNetworkPredictor(*(uint64_t *)v114, v16 + 408);
          if (v23) {
            goto LABEL_24;
          }
          unsigned int v43 = *(const void **)(v16 + 280);
          if (v43)
          {
            CFRelease(v43);
            *(void *)(v16 + 280) = 0;
          }
          CFAllocatorRef v44 = *(const void **)(v16 + 272);
          if (v44)
          {
            CFRelease(v44);
            *(void *)(v16 + 272) = 0;
          }
          CFURLRef v45 = *(const void **)(v16 + 424);
          if (*(unsigned char *)(v16 + 537))
          {
            if (v45)
            {
              CFRelease(v45);
              *(void *)(v16 + 424) = 0;
            }
            int v46 = *(const void **)(v16 + 416);
            if (v46) {
              CFRelease(v46);
            }
            *(unsigned char *)(v16 + 537) = 0;
          }
          else
          {
            *(void *)(v16 + 272) = *(void *)(v16 + 416);
            *(void *)(v16 + 280) = v45;
          }
          *(void *)(v16 + 496) = 0;
          *(void *)(v16 + 416) = 0;
          *(void *)(v16 + 424) = 0;
          *(void *)(v16 + 448) = v37;
          *(_DWORD *)(v16 + 472) = 0;
          uint64_t v47 = *(const void **)(v16 + 480);
          if (v47)
          {
            CFRelease(v47);
            *(void *)(v16 + 480) = 0;
          }
          uint64_t v48 = *(void *)(v16 + 280);
          if (v48)
          {
            uint64_t v49 = *(void *)(CMBaseObjectGetVTable() + 16);
            uint64_t v50 = v49 ? v49 : 0;
            uint64_t v51 = *(unsigned int (**)(uint64_t, void, uint64_t *, uint64_t *))(v50 + 24);
            if (v51)
            {
              if (!v51(v48, 0, &v109, &v108))
              {
                uint64_t v52 = *(void *)(v16 + 1072);
                if (v52)
                {
                  uint64_t v53 = v109 + v52;
                  BOOL v54 = __OFADD__(v53, v108);
                  uint64_t v55 = v53 + v108;
                  if (v55 < 0 != v54) {
                    ++v55;
                  }
                  uint64_t v56 = v55 >> 1;
                  uint64_t v57 = v108 + v109;
                }
                else
                {
                  uint64_t v57 = v108 + v109;
                  uint64_t v56 = v108 + v109;
                }
                *(void *)(v16 + 1064) = v56;
                *(void *)(v16 + 1072) = v57;
              }
            }
          }
          uint64_t v23 = segPumpParseIndexFile2(v115, *(uint64_t *)v114, v16, (__CFHTTPMessage *)v113, 1, 0, &v110);
          if (v23) {
            goto LABEL_24;
          }
          if (FigRetainProxyIsInvalidated()) {
            goto LABEL_164;
          }
          uint64_t v58 = *(void *)v114;
          int v59 = v110;
          cf[0] = 0;
          uint64_t v60 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v60) {
            uint64_t v61 = v60;
          }
          else {
            uint64_t v61 = 0;
          }
          long long v62 = *(void (**)(uint64_t, void, void, void, void, void, CFTypeRef *, void, void, void, void, void, void))(v61 + 40);
          if (v62)
          {
            v62(a1, 0, 0, 0, 0, 0, cf, 0, 0, 0, 0, 0, 0);
            if ((uint64_t)cf[0] >= 1)
            {
              uint64_t v63 = *(void *)(v58 + 9048);
              if (v59)
              {
                if (v63)
                {
                  uint64_t v64 = *(void *)(CMBaseObjectGetVTable() + 16);
                  if (v64) {
                    uint64_t v65 = v64;
                  }
                  else {
                    uint64_t v65 = 0;
                  }
                  BOOL v68 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v65 + 32);
                  if (v68) {
                    v68(v63, 0x1EE582CD8, 0x1EE585998, 1);
                  }
                  uint64_t v69 = *(void *)(v58 + 9048);
                  if (v69)
                  {
                    unint64_t v70 = (unint64_t)cf[0];
                    uint64_t v71 = *(void *)(CMBaseObjectGetVTable() + 16);
                    if (v71) {
                      uint64_t v72 = v71;
                    }
                    else {
                      uint64_t v72 = 0;
                    }
                    uint64_t v73 = *(void (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v72 + 32);
                    if (v73) {
                      v73(v69, 0x1EE582CD8, 0x1EE5859B8, v70 / 0xF4240);
                    }
                    uint64_t v74 = *(void *)(v58 + 9048);
                    if (v74)
                    {
                      unint64_t v75 = (unint64_t)cf[0];
                      uint64_t v76 = *(void *)(CMBaseObjectGetVTable() + 16);
                      uint64_t v77 = v76 ? v76 : 0;
                      uint64_t v78 = *(void (**)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t))(v77 + 56);
                      if (v78)
                      {
                        uint64_t v79 = 0x1EE5859D8;
LABEL_127:
                        v78(v74, 0x1EE582CD8, v79, v75 / 0xF4240, 1);
                      }
                    }
                  }
                }
              }
              else if (v63)
              {
                uint64_t v66 = *(void *)(CMBaseObjectGetVTable() + 16);
                if (v66) {
                  uint64_t v67 = v66;
                }
                else {
                  uint64_t v67 = 0;
                }
                uint64_t v80 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v67 + 32);
                if (v80) {
                  v80(v63, 0x1EE582CD8, 0x1EE5859F8, 1);
                }
                uint64_t v81 = *(void *)(v58 + 9048);
                if (v81)
                {
                  unint64_t v82 = (unint64_t)cf[0];
                  uint64_t v83 = *(void *)(CMBaseObjectGetVTable() + 16);
                  if (v83) {
                    uint64_t v84 = v83;
                  }
                  else {
                    uint64_t v84 = 0;
                  }
                  uint64_t v85 = *(void (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v84 + 32);
                  if (v85) {
                    v85(v81, 0x1EE582CD8, 0x1EE585A18, v82 / 0xF4240);
                  }
                  uint64_t v74 = *(void *)(v58 + 9048);
                  if (v74)
                  {
                    unint64_t v75 = (unint64_t)cf[0];
                    uint64_t v86 = *(void *)(CMBaseObjectGetVTable() + 16);
                    uint64_t v87 = v86 ? v86 : 0;
                    uint64_t v78 = *(void (**)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t))(v87 + 56);
                    if (v78)
                    {
                      uint64_t v79 = 0x1EE585A38;
                      goto LABEL_127;
                    }
                  }
                }
              }
            }
          }
          if (*(unsigned char *)(*(void *)v114 + 329) && *(void *)v16 == *(void *)(*(void *)v114 + 8416)) {
            segPumpResumeRoundTripMonitoring(*(uint64_t *)v114);
          }
          uint64_t v88 = *(void *)(v16 + 56);
          if (v88)
          {
            CFArrayRef MediaSegmentSpecifiers = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(v88);
            if (MediaSegmentSpecifiers)
            {
              if (CFArrayGetCount(MediaSegmentSpecifiers) >= 1
                && !FigMediaPlaylistHasEndTag(*(void *)(v16 + 56)))
              {
                if (*(void *)(*(void *)v114 + 8096))
                {
                  if (*(unsigned char *)(v16 + 875))
                  {
                    if (segPumpIsIndexFileResponseOutOfDate(*(uint64_t *)v114, v16, (__CFHTTPMessage *)v113))
                    {
                      uint64_t v23 = segPumpHandleIndexFileNetworkError(v115, v16, 0, -12888, @"CoreMediaErrorDomain", @"Stale index file");
                      if (v23) {
                        goto LABEL_24;
                      }
                    }
                  }
                }
              }
            }
          }
          uint64_t v90 = *(void *)v114;
          if (!*(unsigned char *)(*(void *)v114 + 329)
            || *(void *)v16 != *(void *)(*(void *)v114 + 8416)
            || *(unsigned char *)(*(void *)v114 + 338))
          {
            goto LABEL_161;
          }
          char v91 = 0;
          CFTypeRef v92 = v115;
          *(double *)uint64_t v118 = 0.0;
          double v119 = 0.0;
          uint64_t v93 = *(void *)(*(void *)v114 + 384);
          if (v93)
          {
            uint64_t v94 = *(void **)(*(void *)v114 + 400);
            if (v94)
            {
              if (*(void *)(*(void *)(*(void *)v114 + 16 * *(void *)v93 + 384) + 16))
              {
                uint64_t v95 = *(void *)(v93 + 56);
                if (v95)
                {
                  if (FigMediaPlaylistGetDateStampCount(v95) >= 1)
                  {
                    if (*(void *)(*(void *)(v90 + 16 * *v94 + 384) + 16))
                    {
                      uint64_t v96 = v94[7];
                      if (v96)
                      {
                        if (FigMediaPlaylistGetDateStampCount(v96) >= 1
                          && !segPumpPlaylistGetImputedLiveEdgeDate(v93, &v119)
                          && !segPumpPlaylistGetImputedLiveEdgeDate((uint64_t)v94, (double *)v118))
                        {
                          char v91 = 0;
                          if (v119 == 0.0 || *(double *)v118 == 0.0) {
                            goto LABEL_160;
                          }
                          double v97 = vabdd_f64(v119, *(double *)v118);
                          if (v97 > *(double *)(v90 + 16) + *(double *)(v90 + 16))
                          {
                            segPumpAppendErrorLogEntry((uint64_t)v92, v90, v93, (const __CFURL **)(v93 + 408), -15621, @"CoreMediaErrorDomain", @"Low Latency: Live edges are out of sync.", 0, 0, 2u, 3u);
                            if (dword_1E9351350)
                            {
                              unsigned int v117 = 0;
                              os_log_type_t type = OS_LOG_TYPE_DEFAULT;
                              os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                              unsigned int v99 = v117;
                              if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type)) {
                                unsigned int v100 = v99;
                              }
                              else {
                                unsigned int v100 = v99 & 0xFFFFFFFE;
                              }
                              if (v100)
                              {
                                uint64_t v101 = &stru_1EE53F4B8;
                                if (*(void *)(v90 + 8760)) {
                                  uint64_t v101 = *(__CFString **)(v90 + 8760);
                                }
                                uint64_t v102 = *(void *)(v90 + 16);
                                int v120 = 136315906;
                                uint64_t v121 = "segPumpAreLiveEdgesOutOfSync";
                                __int16 v122 = 2114;
                                uint64_t v123 = v101;
                                __int16 v124 = 2048;
                                double v125 = v97;
                                __int16 v126 = 2048;
                                uint64_t v127 = v102;
                                _os_log_send_and_compose_impl();
                              }
                              char v91 = 1;
                              fig_log_call_emit_and_clean_up_after_send_and_compose();
                            }
                            else
                            {
                              char v91 = 1;
                            }
                            goto LABEL_160;
                          }
                        }
                      }
                    }
                  }
                }
              }
              char v91 = 0;
            }
          }
LABEL_160:
          uint64_t v90 = *(void *)v114;
          *(unsigned char *)(*(void *)v114 + 338) = v91;
LABEL_161:
          segPumpPublishPlaylistRequestEvent((uint64_t)v115, v90, *(const void **)(v16 + 408), (void *)v16, (uint64_t)v111, a1, v112, v110, 0);
          uint64_t v24 = 0;
LABEL_162:
          if (!v24) {
            goto LABEL_164;
          }
          goto LABEL_163;
        }
        uint64_t v31 = *(OpaqueCMBlockBuffer **)(v16 + 520);
        if (!v31)
        {
          CFAllocatorRef v32 = (const __CFAllocator *)FigGetAllocatorForMedia();
          uint64_t Empty = CMBlockBufferCreateEmpty(v32, 0, 0, (CMBlockBufferRef *)(v16 + 520));
          if (Empty) {
            goto LABEL_178;
          }
          uint64_t v31 = *(OpaqueCMBlockBuffer **)(v16 + 520);
        }
        uint64_t Empty = CMBlockBufferAppendBufferReference(v31, a4, a5, a6, 0);
        if (!Empty)
        {
          uint64_t v24 = segPumpVerifyM3UPlaylist((uint64_t)v115, *(uint64_t *)v114, v16);
          if (!v24) {
            goto LABEL_44;
          }
          if (dword_1E9351350)
          {
            LODWORD(v119) = 0;
            v118[0] = OS_LOG_TYPE_DEFAULT;
            uint64_t v103 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int v104 = LODWORD(v119);
            if (os_log_type_enabled(v103, v118[0])) {
              unsigned int v105 = v104;
            }
            else {
              unsigned int v105 = v104 & 0xFFFFFFFE;
            }
            if (v105)
            {
              v106 = &stru_1EE53F4B8;
              if (*(void *)v114 && *(void *)(*(void *)v114 + 8760)) {
                v106 = *(__CFString **)(*(void *)v114 + 8760);
              }
              double v107 = *(double *)v16;
              int v120 = 136315650;
              uint64_t v121 = "segPumpIndexFileReadCallback";
              __int16 v122 = 2114;
              uint64_t v123 = v106;
              __int16 v124 = 2048;
              double v125 = v107;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
LABEL_163:
          segPumpSendEndCallbackForAllActiveStreamsWithOSStatus(a3, v24);
          goto LABEL_164;
        }
LABEL_178:
        uint64_t v24 = Empty;
        goto LABEL_163;
      }
    }
  }
LABEL_164:
  segPumpUnlockAndSendAllPendingNotifications();
  FigRetainProxyRelease();
  if (v115) {
    CFRelease(v115);
  }
  if (v113) {
    CFRelease(v113);
  }
  if (v112) {
    CFRelease(v112);
  }
  if (v111) {
    CFRelease(v111);
  }
}

uint64_t segPumpPostIndexFileRequest(uint64_t a1, uint64_t a2, const __CFArray *a3, uint64_t a4)
{
  CFURLRef v12 = 0;
  *(unsigned char *)(a2 + 859) = 1;
  uint64_t URLGuts = segPumpCreateURLWithQueryParams(a1, *(CFTypeRef *)(a2 + 16), a3, &v12);
  CFURLRef v8 = v12;
  if (URLGuts
    || (uint64_t URLGuts = segPumpCustomURLLoaderGetURLGuts(a1, v12, 0, 0, 0, 0, a4, 0, 1, 0, 0, a2 + 496),
        URLGuts))
  {
    uint64_t v10 = URLGuts;
    *(unsigned char *)(a2 + 859) = 0;
    if (!v8) {
      return v10;
    }
    goto LABEL_8;
  }
  int v9 = *(const void **)(a2 + 408);
  *(void *)(a2 + 408) = v8;
  if (v8) {
    CFRetain(v8);
  }
  if (v9) {
    CFRelease(v9);
  }
  uint64_t v10 = 0;
  if (v8) {
LABEL_8:
  }
    CFRelease(v8);
  return v10;
}

void segPumpScheduleIndexFileLongDownloadTimer(uint64_t a1, uint64_t a2)
{
  uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  double v5 = *(double *)(a1 + 16);
  if (v5 <= 0.0) {
    double v6 = *(double *)(a1 + 7984);
  }
  else {
    double v6 = v5 * 0.5;
  }
  double v7 = 2.0;
  if (!*(unsigned char *)(a2 + 538))
  {
    if (*(unsigned char *)(a1 + 329))
    {
      double v7 = v5 + (double)(3 * segPumpGetCurrentRTT((void *)a1)) / 1000000000.0;
    }
    else if (*(void *)(*(void *)(a1 + 384) + 56))
    {
      int v14 = *(_DWORD *)(a1 + 8);
      if (v14) {
        double v7 = (double)(2 * v14);
      }
      else {
        double v7 = 20.0;
      }
    }
    else
    {
      double v7 = *(double *)(a1 + 8200);
    }
  }
  if (v7 > v6) {
    double v6 = v7;
  }
  if (*(unsigned char *)(a1 + 328) && *(unsigned char *)(a1 + 48))
  {
    uint64_t v8 = *(void *)(a1 + 384);
    if (*(void *)(v8 + 16)) {
      uint64_t PendingMediaDeadline = segPumpConnectionGetPendingMediaDeadline(*(uint64_t **)(v8 + 696));
    }
    else {
      uint64_t PendingMediaDeadline = 0;
    }
    uint64_t v10 = *(void *)(a1 + 400);
    if (*(void *)(v10 + 16))
    {
      uint64_t v11 = segPumpConnectionGetPendingMediaDeadline(*(uint64_t **)(v10 + 696));
      BOOL v12 = v11 < PendingMediaDeadline || PendingMediaDeadline == 0;
      uint64_t v13 = v12 ? v11 : PendingMediaDeadline;
      if (v11) {
        uint64_t PendingMediaDeadline = v13;
      }
    }
    if (PendingMediaDeadline >= 1 && v6 < (double)(PendingMediaDeadline - UpTimeNanoseconds) / 1000000000.0) {
      double v6 = (double)(PendingMediaDeadline - UpTimeNanoseconds) / 1000000000.0;
    }
  }
  FigHTTPCreateTimer(*(const void **)a1, (uint64_t)IndexFileHandleLongDownloadTimer, *(NSObject **)(a1 + 64), (dispatch_object_t *)(a2 + 504), v6);

  segPumpStreamUpdateIndexExpectedArrival(a1, a2);
}

BOOL segPumpRenditionReportURLsAreEqual(const __CFURL *a1, const __CFURL *a2)
{
  BOOL v2 = 0;
  if (!a1 || !a2) {
    return v2;
  }
  CFURLRef v4 = CFURLCopyAbsoluteURL(a1);
  CFURLRef v5 = CFURLCopyAbsoluteURL(a2);
  CFURLRef v6 = v5;
  if (v4 && v5)
  {
    CFStringRef v7 = CFURLCopyPath(v4);
    CFStringRef v8 = CFURLCopyPath(v6);
    if (FigCFEqual()) {
      BOOL v9 = FigCFHTTPDoURLHostsAndPortsMatch(v4, v6) != 0;
    }
    else {
      BOOL v9 = 0;
    }
  }
  else
  {
    BOOL v9 = 0;
    CFStringRef v8 = 0;
    CFStringRef v7 = 0;
    BOOL v2 = 0;
    CFStringRef v10 = 0;
    CFStringRef v11 = 0;
    if (!v4) {
      goto LABEL_9;
    }
  }
  CFRelease(v4);
  BOOL v2 = v9;
  CFStringRef v10 = v8;
  CFStringRef v11 = v7;
LABEL_9:
  if (v6) {
    CFRelease(v6);
  }
  if (v11) {
    CFRelease(v11);
  }
  if (v10) {
    CFRelease(v10);
  }
  return v2;
}

BOOL segPumpPlaylistIsCompliantWithBlockingReloadPolicy(uint64_t a1, int *a2)
{
  if (FigMediaPlaylistDoesServerSupportsBlockingReload(*(void *)(a1 + 56)))
  {
    if (FigMediaPlaylistHasEndTag(*(void *)(a1 + 56))) {
      int v4 = -15413;
    }
    else {
      int v4 = 0;
    }
  }
  else
  {
    int v4 = -15411;
  }
  *a2 = v4;
  return v4 == 0;
}

BOOL segPumpCanContinueWithLowLatencyMode(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  if (!*(unsigned char *)(a2 + 332) && *(unsigned char *)(a2 + 333) == 1)
  {
    segPumpAppendErrorLogEntry(a1, a2, 0, 0, -15410, @"CoreMediaErrorDomain", @"Server should support ECN for Low Latency", 0, 0, 1u, 3u);
    *(unsigned char *)(a2 + 332) = 1;
  }
  if (!*(unsigned char *)(a2 + 330))
  {
    BOOL result = 0;
    int v9 = -15410;
    goto LABEL_34;
  }
  if (*(_DWORD *)(a3 + 160) == 6)
  {
    BOOL result = 0;
    int v9 = -15417;
    goto LABEL_34;
  }
  int v28 = 0;
  if (segPumpPlaylistIsCompliantWithBlockingReloadPolicy(a3, &v28))
  {
    if (FigMediaPlaylistGetDateStampCount(*(void *)(a3 + 56)) < 1)
    {
      int v9 = -15412;
    }
    else
    {
      int v9 = v28;
      if (!v28)
      {
        FigMediaPlaylistGetMediaSegmentSpecifiers(*(void *)(a3 + 56));
        Lastuint64_t Value = FigCFArrayGetLastValue();
        CFArrayRef PartialSegments = (const __CFArray *)FigMediaSegmentSpecifierGetPartialSegments(LastValue);
        CFArrayRef MediaSegmentSpecifiers = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(*(void *)(a3 + 56));
        if (!MediaSegmentSpecifiers) {
          goto LABEL_32;
        }
        CFIndex Count = CFArrayGetCount(MediaSegmentSpecifiers);
        int v9 = -15620;
        if (!Count || !PartialSegments) {
          goto LABEL_33;
        }
        if (CFArrayGetCount(PartialSegments) && FigMediaPlaylistGetPartTargetDuration(*(void *)(a3 + 56)) > 0.0)
        {
          if (FigMediaPlaylistHasEndTag(*(void *)(a3 + 56))
            || segPumpStreamHasPreloadHint(a3))
          {
            if (!*(unsigned char *)(a2 + 337))
            {
              int v14 = *(void **)(a2 + 8096);
              CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
              CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
              if (v14)
              {
                uint64_t v17 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
                do
                {
                  PlaylistAlternateCFURLRef URL = (const __CFURL *)FigAlternateGetPlaylistAlternateURL(v14[1]);
                  CFStringRef v19 = CFURLCopyHostName(PlaylistAlternateURL);
                  CMTimeValue value = 0;
                  if (v19)
                  {
                    CFStringRef v20 = v19;
                    if (CFDictionaryGetValueIfPresent(Mutable, v19, (const void **)&value))
                    {
                      CFArrayAppendValue((CFMutableArrayRef)value, (const void *)v14[1]);
                    }
                    else
                    {
                      CFAllocatorRef v21 = (const __CFAllocator *)FigGetAllocatorForMedia();
                      CMTimeValue value = CFArrayCreateMutable(v21, 0, v17);
                      CFArrayAppendValue((CFMutableArrayRef)value, (const void *)v14[1]);
                      CFDictionaryAddValue(Mutable, v20, value);
                      CFRelease(value);
                    }
                    CFRelease(v20);
                  }
                  int v14 = (void *)*v14;
                }
                while (v14);
              }
              CFArrayRef v22 = (const __CFArray *)FigCFDictionaryCopyArrayOfValues();
              if (Mutable) {
                CFRelease(Mutable);
              }
              uint64_t v23 = *(void *)(a3 + 48);
              if (v23)
              {
                CFDictionaryRef VideoGroups = (const __CFDictionary *)FigMultivariantPlaylistGetVideoGroups(v23);
                CFDictionaryRef AudioGroups = (const __CFDictionary *)FigMultivariantPlaylistGetAudioGroups(*(void *)(a3 + 48));
                CFDictionaryRef SubtitleGroups = (const __CFDictionary *)FigMultivariantPlaylistGetSubtitleGroups(*(void *)(a3 + 48));
              }
              else
              {
                CFDictionaryRef VideoGroups = 0;
                CFDictionaryRef AudioGroups = 0;
                CFDictionaryRef SubtitleGroups = 0;
              }
              *(unsigned char *)(a2 + 335) = FigAlternateAreAllAlternatesOnSameHost(v22, VideoGroups, AudioGroups, SubtitleGroups);
              int HaveMatchingAlternates = FigAlternateDoAllHostsHaveMatchingAlternates(v22);
              *(unsigned char *)(a2 + 336) = HaveMatchingAlternates;
              if (v22)
              {
                CFRelease(v22);
                int HaveMatchingAlternates = *(unsigned __int8 *)(a2 + 336);
              }
              if (!HaveMatchingAlternates) {
                segPumpAppendErrorLogEntry(a1, a2, 0, 0, -15410, @"CoreMediaErrorDomain", @"Low Latency: Not all hosts have matching alternates", 0, 0, 1u, 3u);
              }
              *(unsigned char *)(a2 + 337) = 1;
            }
            if (!*(unsigned char *)(a2 + 335))
            {
              BOOL result = 0;
              int v9 = -15414;
              goto LABEL_34;
            }
            goto LABEL_43;
          }
          int v9 = -15415;
        }
        else
        {
LABEL_32:
          int v9 = -15620;
        }
      }
    }
LABEL_33:
    BOOL result = 0;
    goto LABEL_34;
  }
  int v9 = v28;
  if (v28) {
    goto LABEL_33;
  }
LABEL_43:
  BOOL result = *(unsigned char *)(a2 + 331) == 0;
  if (*(unsigned char *)(a2 + 331)) {
    int v9 = -15418;
  }
  else {
    int v9 = 0;
  }
LABEL_34:
  *a4 = v9;
  return result;
}

uint64_t segPumpHandleLowLatencySetupError(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  switch(a4)
  {
    case -15418:
      segPumpAppendErrorLogEntry(a1, a2, a3, (const __CFURL **)(a3 + 408), -15418, @"CoreMediaErrorDomain", @"Dropping out of Low Latency: missing Rendition Report", 0, 0, 1u, 3u);
      goto LABEL_12;
    case -15417:
      segPumpAppendErrorLogEntry(a1, a2, a3, (const __CFURL **)(a3 + 408), -15417, @"CoreMediaErrorDomain", @"Was unable to tune in to Low Latency", 0, 0, 1u, 3u);
      goto LABEL_12;
    case -15415:
      segPumpAppendErrorLogEntry(a1, a2, a3, (const __CFURL **)(a3 + 408), -15415, @"CoreMediaErrorDomain", @"Low Latency: Playlist does not have EXT-X-PRELOAD-HINT tag", 0, 0, 1u, 3u);
      goto LABEL_12;
    case -15414:
      segPumpAppendErrorLogEntry(a1, a2, a3, (const __CFURL **)(a3 + 408), -15414, @"CoreMediaErrorDomain", @"Low Latency: All variants must be on the same host", 0, 0, 1u, 3u);
      goto LABEL_12;
    case -15413:
      if (dword_1E9351350)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      goto LABEL_12;
    case -15412:
      segPumpAppendErrorLogEntry(a1, a2, a3, (const __CFURL **)(a3 + 408), -15412, @"CoreMediaErrorDomain", @"Low Latency: Playlist does not have EXT-X-PROGRAM-DATE-TIME tag", 0, 0, 1u, 3u);
      goto LABEL_12;
    case -15411:
      segPumpAppendErrorLogEntry(a1, a2, a3, (const __CFURL **)(a3 + 408), -15411, @"CoreMediaErrorDomain", @"Low Latency: Server does not offer blocking playlist reloads", 0, 0, 1u, 3u);
      goto LABEL_12;
    case -15410:
      segPumpAppendErrorLogEntry(a1, a2, a3, (const __CFURL **)(a3 + 408), -15410, @"CoreMediaErrorDomain", @"Low Latency: Server must support http2 ECN and SACK", 0, 0, 1u, 3u);
LABEL_12:
      uint64_t result = 0;
      break;
    default:
      uint64_t result = FigSignalErrorAt();
      break;
  }
  for (uint64_t i = 0; i != 48; i += 16)
  {
    uint64_t v8 = *(void *)(a2 + i + 384);
    if (*(_DWORD *)(v8 + 160) != 5) {
      *(_DWORD *)(v8 + 160) = 5;
    }
    uint64_t v9 = *(void *)(a2 + i + 392);
    if (*(_DWORD *)(v9 + 160) != 5) {
      *(_DWORD *)(v9 + 160) = 5;
    }
  }
  return result;
}

void segPumpSetPartTargetDuration(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (double *)(a1 + 16);
  double v4 = *(double *)(a1 + 16);
  if (*(unsigned char *)(a1 + 329))
  {
    if (FigMediaPlaylistGetPartTargetDuration(a2) <= 0.0) {
      return;
    }
    double PartTargetDuration = v4;
    if (v4 <= FigMediaPlaylistGetPartTargetDuration(a2)) {
      double PartTargetDuration = FigMediaPlaylistGetPartTargetDuration(a2);
    }
  }
  else
  {
    double PartTargetDuration = 0.0;
  }
  double *v3 = PartTargetDuration;
  if (vabdd_f64(v4, PartTargetDuration) >= 2.22044605e-16 && dword_1E9351350 != 0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  double v9 = vabdd_f64(PartTargetDuration, v4);
  if (*(void *)(a1 + 9560)) {
    BOOL v10 = v9 < 2.22044605e-16;
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10)
  {
    CFNumberRef v11 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberDoubleType, v3);
    uint64_t v12 = *(void *)(a1 + 9560);
    uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v13) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    uint64_t v15 = *(void (**)(uint64_t, __CFString *, CFNumberRef))(v14 + 56);
    if (v15) {
      v15(v12, @"AfmfpbProperty_PartTargetDuration", v11);
    }
    if (v11) {
      CFRelease(v11);
    }
  }
  uint64_t v16 = *(void *)(a1 + 9048);
  if (v16)
  {
    double v17 = *(double *)(a1 + 16);
    uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v18) {
      uint64_t v19 = v18;
    }
    else {
      uint64_t v19 = 0;
    }
    CFStringRef v20 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v19 + 56);
    if (v20) {
      v20(v16, 0x1EE582B98, 0x1EE562058, (uint64_t)(v17 * 1000.0), 0);
    }
  }
}

void segPumpSetActiveHoldBack(uint64_t a1, uint64_t a2)
{
  double v4 = *(double *)(a1 + 7952);
  if (*(unsigned char *)(a1 + 329))
  {
    BOOL v5 = v4 <= FigMediaPlaylistGetPartHoldBackDuration(a2);
    double PartHoldBackDuration = v4;
    if (v5) {
      double PartHoldBackDuration = FigMediaPlaylistGetPartHoldBackDuration(a2);
    }
  }
  else if (FigMediaPlaylistHasHoldBackDuration(a2))
  {
    BOOL v5 = v4 <= FigMediaPlaylistGetHoldBackDuration(a2);
    double PartHoldBackDuration = v4;
    if (v5) {
      double PartHoldBackDuration = FigMediaPlaylistGetHoldBackDuration(a2);
    }
  }
  else
  {
    double PartHoldBackDuration = 0.0;
  }
  if (PartHoldBackDuration >= 0.0) {
    double v7 = PartHoldBackDuration;
  }
  else {
    double v7 = 0.0;
  }
  if (v4 != v7 && v7 > *(double *)(a1 + 7968))
  {
    *(double *)(a1 + 7968) = v7;
    segPumpReadyNotification((void *)a1, @"FBP_RecommendedPrebufferReservationChanged", 0);
  }
  *(double *)(a1 + 7952) = v7;
  if (vabdd_f64(v4, v7) >= 2.22044605e-16 && dword_1E9351350 != 0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v10 = *(void *)(a1 + 9048);
  if (v10)
  {
    uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v11) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v12 + 56);
    if (v13) {
      v13(v10, 0x1EE582B98, 0x1EE562078, (uint64_t)(v7 * 1000.0), 0);
    }
  }
}

uint64_t segPumpStreamHasPreloadHint(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 56);
  if (result)
  {
    uint64_t result = FigMediaPlaylistGetPreloadHint(result);
    if (result)
    {
      uint64_t PreloadHint = FigMediaPlaylistGetPreloadHint(*(void *)(a1 + 56));
      return FigMediaSegmentSpecifierIsReadInCurrent(PreloadHint) != 0;
    }
  }
  return result;
}

void segPumpUpdatePathEvaluation(uint64_t a1, const void *a2)
{
  cf[20] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  *(void *)uint64_t v23 = 0;
  cf[0] = 0;
  if (a2)
  {
    if (a1)
    {
      if (segPumpLockAndCopyPumpFromRetainProxy(a1, cf, (uint64_t *)v23))
      {
        CFTypeRef v4 = 0;
      }
      else
      {
        uint64_t v3 = *(const void **)(*(void *)v23 + 8448);
        if (v3)
        {
          CFTypeRef v4 = CFRetain(v3);
          BOOL v5 = *(const void **)(*(void *)v23 + 8448);
          *(void *)(*(void *)v23 + 8448) = a2;
          CFRetain(a2);
          if (v5) {
            CFRelease(v5);
          }
        }
        else
        {
          *(void *)(*(void *)v23 + 8448) = a2;
          CFRetain(a2);
          CFTypeRef v4 = 0;
        }
        segPumpUpdateNetworkCostHasHighSpeedHighPower(*(uint64_t *)v23);
        int DoesUseCellular = FigNetworkPathInformationDoesUseCellular();
        int v7 = FigNetworkPathInformationDoesUseCellular();
        int IsHostLocal = FigNetworkPathInformationIsHostLocal();
        double v9 = *(void **)v23;
        if (IsHostLocal)
        {
          uint64_t v10 = *(const void **)(*(void *)v23 + 8440);
          if (v10)
          {
            CFRelease(v10);
            *(void *)(*(void *)v23 + 8440) = 0;
          }
        }
        else
        {
          *(_OWORD *)(*(void *)v23 + 8584) = 0u;
          if (!segPumpSentEndCallbackForAllActiveStreams(v9))
          {
            if (v9[1055] && (uint64_t v11 = v9[1056]) != 0 && !FigNetworkPathInformationIsHostReachable(v11, 1))
            {
              if (dword_1E9351350)
              {
                os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
            }
            else
            {
              unint64_t v12 = 0;
              do
              {
                uint64_t v13 = *(void *)(*(void *)v23 + 16 * v12 + 384);
                if (*(void *)(v13 + 16) && !*(unsigned char *)(v13 + 869))
                {
                  if (v7 != DoesUseCellular)
                  {
                    uint64_t v15 = *(const void **)(v13 + 280);
                    if (v15)
                    {
                      if (!*(void *)(v13 + 272)
                        || (CFRelease(*(CFTypeRef *)(v13 + 272)),
                            *(void *)(v13 + 272) = 0,
                            (uint64_t v15 = *(const void **)(v13 + 280)) != 0))
                      {
                        CFRelease(v15);
                        *(void *)(v13 + 280) = 0;
                      }
                    }
                    for (uint64_t i = *(uint64_t **)(v13 + 680); i; uint64_t i = (uint64_t *)*i)
                    {
                      double v17 = (const void *)i[20];
                      if (v17)
                      {
                        if (!i[19] || (CFRelease((CFTypeRef)i[19]), i[19] = 0, (double v17 = (const void *)i[20]) != 0))
                        {
                          CFRelease(v17);
                          i[20] = 0;
                        }
                      }
                      if (i[4]) {
                        *((unsigned char *)i + 145) = 1;
                      }
                    }
                    if (*(void *)(v13 + 424)) {
                      *(unsigned char *)(v13 + 537) = 1;
                    }
                  }
                  if (*(unsigned char *)(v13 + 400))
                  {
                    *(unsigned char *)(v13 + 400) = 0;
                    FigHTTPStopAndReleaseTimer((dispatch_object_t *)(v13 + 392));
                  }
                  int restarted = segPumpRestartStreamReads(cf[0], *(uint64_t **)v23, *(void **)(*(void *)v23 + 16 * v12 + 384));
                  if (restarted == -15626) {
                    goto LABEL_49;
                  }
                }
                else
                {
                  int restarted = 0;
                }
                if (restarted) {
                  break;
                }
              }
              while (v12++ < 2);
              uint64_t v19 = *(void *)(*(void *)v23 + 8112);
              if (v19)
              {
                int v20 = 0;
                do
                {
                  uint64_t v21 = *(void *)v19;
                  if (!*(unsigned char *)(v19 + 32))
                  {
                    MoveAlternateFromPenaltyBox(*(uint64_t *)v23, (uint64_t *)v19);
                    int v20 = 1;
                  }
                  uint64_t v19 = v21;
                }
                while (v21);
                if (v20)
                {
                  segPumpResetPenaltyBoxTimer(*(void **)v23);
                  segPumpUpdateAlternateSelectionBossNetworkErrorFilter(*(void **)v23, 0);
                  segPumpDispatchAsyncAlternateSelectionApplyFilter(*(uint64_t *)v23);
                  segPumpReadyNotification(*(void **)v23, @"FBPAL_AlternateListChanged", 0);
                }
              }
            }
          }
        }
      }
LABEL_49:
      segPumpUnlockAndSendAllPendingNotifications();
      if (cf[0]) {
        CFRelease(cf[0]);
      }
      if (v4) {
        CFRelease(v4);
      }
    }
  }
  else
  {
    FigSignalErrorAt();
  }
}

void segPumpUpdateNetworkCostHasHighSpeedHighPower(uint64_t a1)
{
  if (*(void *)(a1 + 8472))
  {
    if (!*(_DWORD *)(a1 + 8464) && !*(_DWORD *)(a1 + 8460) && *(void *)(a1 + 8448)) {
      FigNetworkPathInformationGetInterfaceType();
    }
    uint64_t UInt64 = FigCFNumberCreateUInt64();
    if (UInt64)
    {
      uint64_t v3 = (const void *)UInt64;
      uint64_t v4 = *(void *)(a1 + 8472);
      uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v5) {
        uint64_t v6 = v5;
      }
      else {
        uint64_t v6 = 0;
      }
      int v7 = *(void (**)(uint64_t, uint64_t, const void *))(v6 + 56);
      if (v7) {
        v7(v4, 0x1EE57E438, v3);
      }
      CFRelease(v3);
    }
    else
    {
      FigSignalErrorAt();
    }
  }
}

uint64_t segPumpHandleIndexFileNetworkError(const void *a1, uint64_t a2, unsigned int a3, int a4, __CFString *a5, const void *a6)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  ++*(_DWORD *)(a2 + 472);
  uint64_t ErrorFromHTTPRequestIfAvailable = segPumpCreateErrorFromHTTPRequestIfAvailable(*(void *)(a2 + 424), a4, a5, a6, (uint64_t *)&cf);
  uint64_t v14 = (void *)cf;
  if (ErrorFromHTTPRequestIfAvailable) {
    goto LABEL_82;
  }
  uint64_t v15 = *(const void **)(a2 + 480);
  *(void *)(a2 + 480) = cf;
  if (v14) {
    CFRetain(v14);
  }
  if (v15) {
    CFRelease(v15);
  }
  uint64_t v16 = *(void *)(a2 + 424);
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  if (*(void *)a2) {
    BOOL v17 = 0;
  }
  else {
    BOOL v17 = *(void *)(*(void *)(DerivedStorage + 384) + 56) == 0;
  }
  int Code = CFErrorGetCode((CFErrorRef)v14);
  CFErrorGetDomain((CFErrorRef)v14);
  CFDictionaryRef v19 = CFErrorCopyUserInfo((CFErrorRef)v14);
  if (!*(void *)(*(void *)(DerivedStorage + 16 * *(void *)a2 + 384) + 16))
  {
    uint64_t v23 = 0;
    unsigned int v26 = 0;
    uint64_t v25 = 0;
    goto LABEL_50;
  }
  if (!a3 && *(unsigned char *)(a2 + 538))
  {
    int v20 = 0;
    uint64_t v40 = 0;
    goto LABEL_16;
  }
  if (Code >> 1 == 2147477204)
  {
    int v20 = 0;
    uint64_t v21 = 7;
LABEL_15:
    uint64_t v40 = v21;
    uint64_t v39 = 2;
    goto LABEL_16;
  }
  if (Code > -15417)
  {
    if (Code > -12647)
    {
      if (Code == -12642) {
        goto LABEL_34;
      }
      int v22 = -12646;
    }
    else
    {
      if (Code == -15416)
      {
        int v20 = 0;
        if (*(_DWORD *)(a2 + 384) >= 2u) {
          uint64_t v32 = 6;
        }
        else {
          uint64_t v32 = 3;
        }
        uint64_t v39 = 1;
        uint64_t v40 = v32;
LABEL_16:
        segPumpModifyErrorActionIfCurrentAlternateIsLastValidAlternate(DerivedStorage, (void *)a2, &v40, &v39);
        if (!*(_DWORD *)(a2 + 384) && *(unsigned char *)(a2 + 875) && v40 == 3 && Code == -12888) {
          uint64_t v40 = 0;
        }
LABEL_35:
        if (v17)
        {
          uint64_t v23 = v40;
        }
        else
        {
          uint64_t v23 = v40;
          if (*(unsigned char *)(a2 + 868)) {
            goto LABEL_41;
          }
        }
        if (v23 == 3)
        {
          if (*(void *)(DerivedStorage + 16 * *(void *)a2 + 384) == a2) {
            goto LABEL_47;
          }
          goto LABEL_45;
        }
LABEL_41:
        if (*(unsigned char *)(DerivedStorage + 8176) || (unint64_t)(v23 - 9) < 0xFFFFFFFFFFFFFFFELL)
        {
          if (v23 != 3) {
            goto LABEL_48;
          }
        }
        else
        {
          uint64_t v40 = 3;
        }
LABEL_45:
        if (*(unsigned char *)(DerivedStorage + 8177))
        {
          uint64_t v23 = 3;
          goto LABEL_48;
        }
LABEL_47:
        uint64_t v23 = 6;
        uint64_t v40 = 6;
LABEL_48:
        uint64_t v24 = 0;
        uint64_t v25 = 0;
        unsigned int v26 = v39;
        if (!v20) {
          goto LABEL_50;
        }
        goto LABEL_49;
      }
      int v22 = -12885;
    }
    goto LABEL_33;
  }
  if (Code > -15623)
  {
    if (Code == -15622) {
      goto LABEL_34;
    }
    int v22 = -15417;
LABEL_33:
    if (Code != v22) {
      goto LABEL_91;
    }
LABEL_34:
    int v20 = 0;
    uint64_t v40 = 8;
    goto LABEL_35;
  }
  if (Code == -17633)
  {
    int v20 = 0;
    uint64_t v39 = 3;
    uint64_t v40 = 3;
    goto LABEL_16;
  }
  if (Code == -16839)
  {
    int v20 = 0;
    uint64_t v21 = 3;
    goto LABEL_15;
  }
LABEL_91:
  uint64_t CommonActionForNetworkError = segPumpGetCommonActionForNetworkError((__CFError *)v14, &v40, &v39);
  if (CommonActionForNetworkError)
  {
    uint64_t v25 = CommonActionForNetworkError;
LABEL_106:
    uint64_t v23 = 0;
    unsigned int v26 = 0;
    goto LABEL_50;
  }
  int v20 = 0;
  uint64_t v34 = v40;
  if (v16 || v40 != 1) {
    goto LABEL_99;
  }
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  CMTime v36 = CFErrorCreate(AllocatorForMedia, @"CoreMediaErrorDomain", -12938, v19);
  if (v36)
  {
    int v20 = v36;
    uint64_t v41 = 0;
    uint64_t v42 = 0;
    uint64_t RecommendedAction = FigStreamingNetworkErrorGetRecommendedAction(v36, &v42, &v41);
    if (RecommendedAction)
    {
      uint64_t v24 = RecommendedAction;
      uint64_t v23 = 0;
      unsigned int v26 = 0;
LABEL_49:
      CFRelease(v20);
      uint64_t v25 = v24;
      goto LABEL_50;
    }
    uint64_t v34 = v42;
    if (v42 == 2) {
      uint64_t v34 = 7;
    }
    uint64_t v40 = v34;
LABEL_99:
    if (v34 == 8) {
      goto LABEL_35;
    }
    goto LABEL_16;
  }
  uint64_t v25 = FigSignalErrorAt();
  if (v25) {
    goto LABEL_106;
  }
  unsigned int v26 = v39;
  uint64_t v23 = v40;
LABEL_50:
  if (v19) {
    CFRelease(v19);
  }
  if (v25)
  {
    uint64_t v14 = (void *)cf;
    if (!cf) {
      return v25;
    }
    goto LABEL_84;
  }
  if (*(unsigned char *)(DerivedStorage + 328) && *(void *)a2 == *(void *)(DerivedStorage + 8416)) {
    segPumpSendPlaylistUpdateNotification((void *)DerivedStorage);
  }
  if (*(unsigned char *)(a2 + 538) && !v23)
  {
    if (*(void *)(a2 + 56)) {
      BOOL v27 = 0;
    }
    else {
      BOOL v27 = *(void *)a2 == 0;
    }
    segPumpCopyIndexFileFromCache(DerivedStorage, (unsigned int *)a2, v27, (CFTypeRef *)(a2 + 520), 0, 0);
    if (*(void *)(a2 + 520))
    {
      segPumpParseIndexFile2(a1, DerivedStorage, a2, 0, 0, a3, 0);
      uint64_t v23 = 0;
    }
    else
    {
      uint64_t v23 = 6;
    }
LABEL_68:
    uint64_t v14 = (void *)cf;
    CFIndex v28 = CFErrorGetCode((CFErrorRef)cf);
    CFIndex v29 = CFErrorGetCode((CFErrorRef)v14);
    if (v28 == -17633 && v23 == 3)
    {
      segPumpAppendErrorLogEntry((uint64_t)a1, DerivedStorage, a2, (const __CFURL **)(a2 + 408), v29, @"CoreMediaErrorDomain", @"Could not apply Playlist delta", 0, 0, 1u, 3u);
    }
    else
    {
      if (v29 != -15416)
      {
        uint64_t ErrorFromHTTPRequestIfAvailable = segPumpHandleCommonNetworkError((uint64_t)a1, a2, v23, v26, (const __CFURL **)(a2 + 408), 0, v14);
        goto LABEL_82;
      }
      if (v23 == 3) {
        unsigned int v30 = 3;
      }
      else {
        unsigned int v30 = 1;
      }
      segPumpAppendErrorLogEntry((uint64_t)a1, DerivedStorage, 0, 0, -15410, @"CoreMediaErrorDomain", @"Invalid server blocking reload behavior for low latency", 0, 0, 1u, v30);
      if (v23 == 6)
      {
        uint64_t ErrorFromHTTPRequestIfAvailable = segPumpSendEndCallbackForAllActiveStreams(*(void *)DerivedStorage, v14);
        goto LABEL_82;
      }
      if (v23 != 3)
      {
        uint64_t v25 = 0;
        if (!v14) {
          return v25;
        }
        goto LABEL_84;
      }
    }
    uint64_t ErrorFromHTTPRequestIfAvailable = segPumpSendIndexFileRequest(a1, DerivedStorage, a2);
LABEL_82:
    uint64_t v25 = ErrorFromHTTPRequestIfAvailable;
    goto LABEL_83;
  }
  if (v23 != 1) {
    goto LABEL_68;
  }
  segPumpResetConnectionByPreservingConnectionStats(DerivedStorage, a2 + 408);
  uint64_t v25 = segPumpPostIndexFileRequest(DerivedStorage, a2, 0, 0);
  uint64_t v14 = (void *)cf;
  if (!v25)
  {
    segPumpAppendErrorLogEntryWithCFError((uint64_t)a1, DerivedStorage, a2, (const __CFURL **)(a2 + 408), (CFErrorRef)cf, 1u, 3u);
    if (!v14) {
      return v25;
    }
    goto LABEL_84;
  }
LABEL_83:
  if (v14) {
LABEL_84:
  }
    CFRelease(v14);
  return v25;
}

uint64_t segPumpRTCReportingUpdatePreLTKUStats_HeadersAvailable(uint64_t a1, uint64_t a2)
{
  uint64_t v79 = 0;
  uint64_t v77 = 0;
  uint64_t v78 = 0;
  uint64_t v75 = 0;
  uint64_t v76 = 0;
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v7 = *(void *)(VTable + 16);
  uint64_t result = VTable + 16;
  uint64_t v6 = v7;
  if (v7) {
    uint64_t v8 = v6;
  }
  else {
    uint64_t v8 = 0;
  }
  double v9 = *(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, uint64_t *, void, uint64_t *, void, uint64_t *, void, void, void, void, void))(v8 + 40);
  if (v9)
  {
    uint64_t result = v9(a2, &v79, &v78, &v77, 0, &v76, 0, &v75, 0, 0, 0, 0, 0);
    if (v79 >= 1)
    {
      uint64_t v10 = *(void *)(a1 + 9048);
      if (v10)
      {
        uint64_t v11 = CMBaseObjectGetVTable();
        uint64_t v13 = *(void *)(v11 + 16);
        uint64_t result = v11 + 16;
        uint64_t v12 = v13;
        if (v13) {
          uint64_t v14 = v12;
        }
        else {
          uint64_t v14 = 0;
        }
        uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 32);
        if (v15) {
          uint64_t result = v15(v10, 0x1EE582CD8, 0x1EE585898, 1);
        }
        uint64_t v16 = *(void *)(a1 + 9048);
        if (v16)
        {
          unint64_t v17 = v79;
          uint64_t v18 = CMBaseObjectGetVTable();
          uint64_t v20 = *(void *)(v18 + 16);
          uint64_t result = v18 + 16;
          uint64_t v19 = v20;
          uint64_t v21 = v20 ? v19 : 0;
          int v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v21 + 32);
          if (v22) {
            uint64_t result = v22(v16, 0x1EE582CD8, 0x1EE5858B8, v17 / 0xF4240);
          }
        }
      }
    }
  }
  if (v78 >= 1)
  {
    uint64_t v23 = *(void *)(a1 + 9048);
    if (v23)
    {
      uint64_t v24 = CMBaseObjectGetVTable();
      uint64_t v26 = *(void *)(v24 + 16);
      uint64_t result = v24 + 16;
      uint64_t v25 = v26;
      if (v26) {
        uint64_t v27 = v25;
      }
      else {
        uint64_t v27 = 0;
      }
      CFIndex v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 32);
      if (v28) {
        uint64_t result = v28(v23, 0x1EE582CD8, 0x1EE5858D8, 1);
      }
      uint64_t v29 = *(void *)(a1 + 9048);
      if (v29)
      {
        unint64_t v30 = v78;
        uint64_t v31 = CMBaseObjectGetVTable();
        uint64_t v33 = *(void *)(v31 + 16);
        uint64_t result = v31 + 16;
        uint64_t v32 = v33;
        uint64_t v34 = v33 ? v32 : 0;
        uint64_t v35 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v34 + 32);
        if (v35) {
          uint64_t result = v35(v29, 0x1EE582CD8, 0x1EE5858F8, v30 / 0xF4240);
        }
      }
    }
  }
  if (v77 >= 1)
  {
    uint64_t v36 = *(void *)(a1 + 9048);
    if (v36)
    {
      uint64_t v37 = CMBaseObjectGetVTable();
      uint64_t v39 = *(void *)(v37 + 16);
      uint64_t result = v37 + 16;
      uint64_t v38 = v39;
      if (v39) {
        uint64_t v40 = v38;
      }
      else {
        uint64_t v40 = 0;
      }
      uint64_t v41 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v40 + 32);
      if (v41) {
        uint64_t result = v41(v36, 0x1EE582CD8, 0x1EE585918, 1);
      }
      uint64_t v42 = *(void *)(a1 + 9048);
      if (v42)
      {
        unint64_t v43 = v77;
        uint64_t v44 = CMBaseObjectGetVTable();
        uint64_t v46 = *(void *)(v44 + 16);
        uint64_t result = v44 + 16;
        uint64_t v45 = v46;
        uint64_t v47 = v46 ? v45 : 0;
        uint64_t v48 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v47 + 32);
        if (v48) {
          uint64_t result = v48(v42, 0x1EE582CD8, 0x1EE585938, v43 / 0xF4240);
        }
      }
    }
  }
  if (v76 >= 1)
  {
    uint64_t v49 = *(void *)(a1 + 9048);
    if (v49)
    {
      uint64_t v50 = CMBaseObjectGetVTable();
      uint64_t v52 = *(void *)(v50 + 16);
      uint64_t result = v50 + 16;
      uint64_t v51 = v52;
      if (v52) {
        uint64_t v53 = v51;
      }
      else {
        uint64_t v53 = 0;
      }
      BOOL v54 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v53 + 32);
      if (v54) {
        uint64_t result = v54(v49, 0x1EE582CD8, 0x1EE585958, 1);
      }
      uint64_t v55 = *(void *)(a1 + 9048);
      if (v55)
      {
        unint64_t v56 = v76;
        uint64_t v57 = CMBaseObjectGetVTable();
        uint64_t v59 = *(void *)(v57 + 16);
        uint64_t result = v57 + 16;
        uint64_t v58 = v59;
        uint64_t v60 = v59 ? v58 : 0;
        uint64_t v61 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v60 + 32);
        if (v61) {
          uint64_t result = v61(v55, 0x1EE582CD8, 0x1EE585978, v56 / 0xF4240);
        }
      }
    }
  }
  if (v75 >= 1)
  {
    uint64_t v62 = *(void *)(a1 + 9048);
    if (v62)
    {
      uint64_t v63 = CMBaseObjectGetVTable();
      uint64_t v65 = *(void *)(v63 + 16);
      uint64_t result = v63 + 16;
      uint64_t v64 = v65;
      if (v65) {
        uint64_t v66 = v64;
      }
      else {
        uint64_t v66 = 0;
      }
      uint64_t v67 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v66 + 32);
      if (v67) {
        uint64_t result = v67(v62, 0x1EE582CD8, 0x1EE585A98, 1);
      }
      uint64_t v68 = *(void *)(a1 + 9048);
      if (v68)
      {
        unint64_t v69 = v75;
        uint64_t v70 = CMBaseObjectGetVTable();
        uint64_t v72 = *(void *)(v70 + 16);
        uint64_t result = v70 + 16;
        uint64_t v71 = v72;
        if (v72) {
          uint64_t v73 = v71;
        }
        else {
          uint64_t v73 = 0;
        }
        uint64_t v74 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v73 + 32);
        if (v74) {
          return v74(v68, 0x1EE582CD8, 0x1EE585AB8, v69 / 0xF4240);
        }
      }
    }
  }
  return result;
}

void segPumpStreamUpdateIndexFileURLWithResponse(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t v3 = a3;
  uint64_t v6 = *(void *)(a1 + 8144);
  if (v6)
  {
    PathwayID = FigAlternateGetPathwayID(*(void *)(v6 + 8));
    if (!v3) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  PathwayID = @".";
  if (a3) {
LABEL_3:
  }
    CFRetain(v3);
LABEL_4:
  if (*(unsigned char *)(a2 + 876))
  {
    CFTypeRef cf = 0;
    if (FigCFHTTPCreateURLMinusQueryParam((const __CFURL *)v3, @"_HLS_skip=", &cf))
    {
      CFTypeRef v8 = v3;
    }
    else
    {
      CFTypeRef v8 = cf;
      if (cf) {
        CFRetain(cf);
      }
      if (v3) {
        CFRelease(v3);
      }
      if (cf) {
        CFRelease(cf);
      }
    }
    uint64_t v3 = v8;
  }
  if (*(unsigned char *)(a1 + 328))
  {
    CFTypeRef v10 = 0;
    CFTypeRef cf = 0;
    if (FigCFHTTPCreateURLMinusQueryParam((const __CFURL *)v3, @"_HLS_msn=", &cf)
      || FigCFHTTPCreateURLMinusQueryParam((const __CFURL *)cf, @"_HLS_part=", &v10))
    {
      CFTypeRef v9 = v3;
    }
    else
    {
      CFTypeRef v9 = v10;
      if (v10) {
        CFRetain(v10);
      }
      if (v3) {
        CFRelease(v3);
      }
    }
    if (cf) {
      CFRelease(cf);
    }
    if (v10) {
      CFRelease(v10);
    }
  }
  else
  {
    CFTypeRef v9 = v3;
  }
  segPumpStreamUpdateIndexFile((void *)a2, v9, *(CFTypeRef *)(a2 + 8), *(CFTypeRef *)(a2 + 24), *(CFTypeRef *)(a2 + 32), PathwayID);
  if (v9) {
    CFRelease(v9);
  }
}

uint64_t segPumpVerifyM3UPlaylist(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v9 = 0;
  BOOL v6 = FigStreamingPlaylistVerifyM3UPlaylist(*(CMBlockBufferRef *)(a3 + 520), &v9);
  uint64_t result = 0;
  if (!v6 && v9 != 0)
  {
    segPumpAppendErrorLogEntry(a1, a2, a3, (const __CFURL **)(a3 + 408), -12646, @"CoreMediaErrorDomain", @"Playlist parse error", 0, 0, 1u, 1u);
    return 4294954650;
  }
  return result;
}

void segPumpCheckAndUpdateLowLatencyServerCompliance(uint64_t a1, uint64_t a2, CFDictionaryRef theDict)
{
  cf[20] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  cf[0] = 0;
  if (*(_DWORD *)(a1 + 8) && *(double *)(a1 + 16) <= 0.0) {
    return;
  }
  if (a2)
  {
    uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v7 + 48);
    if (v11)
    {
      if (!v11(a2, 0x1EE57B6B8, AllocatorForMedia, cf))
      {
        if (!cf[0] || (CFRelease(cf[0]), !cf[0]))
        {
          if (dword_1E9351350)
          {
            os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          *(unsigned char *)(a1 + 330) = 1;
          return;
        }
      }
    }
    if (segPumpIsProtocolUsedByRequest(a2, @"h2"))
    {
      *(unsigned char *)(a1 + 330) = 1;
LABEL_16:
      if (!*(unsigned char *)(a1 + 332)
        && FigNetworkInterfaceReporterECNRefused(*(void *)(a1 + 9120))
        && FigNetworkInterfaceReporterGetInterfaceType(*(unsigned char **)(a1 + 9120)))
      {
        *(unsigned char *)(a1 + 333) = 1;
      }
      if (!FigNetworkInterfaceReporterDoesSupportSACK(*(void *)(a1 + 9120))) {
        FigNetworkInterfaceReporterGetInterfaceType(*(unsigned char **)(a1 + 9120));
      }
      return;
    }
    if (!segPumpIsProtocolUsedByRequest(a2, @"h3") || !*(unsigned char *)(a1 + 330))
    {
      *(unsigned char *)(a1 + 330) = 0;
      return;
    }
    BOOL v12 = segPumpCheckPriorityHeaderLowLatencyServerCompliance(a2, 0);
    *(unsigned char *)(a1 + 330) = v12;
    if (v12) {
      goto LABEL_16;
    }
  }
  else
  {
    if (theDict
      && (CFStringRef Value = (const __CFString *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F202C8])) != 0)
    {
      CFStringRef v9 = Value;
      BOOL v10 = 1;
      if (CFStringCompare(Value, @"h2", 1uLL)) {
        BOOL v10 = CFStringCompare(v9, @"h3", 1uLL) == kCFCompareEqualTo;
      }
    }
    else
    {
      BOOL v10 = 1;
    }
    *(unsigned char *)(a1 + 330) = v10;
  }
}

uint64_t segPumpParseIndexFile2(const void *a1, uint64_t a2, uint64_t a3, __CFHTTPMessage *a4, int a5, unsigned int a6, unsigned char *a7)
{
  uint64_t v11 = a2;
  BOOL v12 = 0;
  v370[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  uint64_t v13 = (unsigned __int8 *)(a2 + 7993);
  int v360 = 0;
  v349 = (uint64_t *)(a3 + 48);
  if (!*(void *)(a3 + 48))
  {
    if (*(void *)(a3 + 56)) {
      BOOL v12 = 0;
    }
    else {
      BOOL v12 = *(void *)a3 == 0;
    }
  }
  unint64_t v358 = 0;
  CFTypeRef v359 = 0;
  CFTypeRef v356 = 0;
  unint64_t valuePtr = 0;
  *(unsigned char *)(a3 + 860) = 1;
  segPumpStreamUpdateIndexExpectedArrival(a2, a3);
  v343 = (const __CFURL **)(a3 + 408);
  v346 = a7;
  if (CMBlockBufferGetDataLength(*(CMBlockBufferRef *)(a3 + 520)) <= 1)
  {
    unsigned int v355 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    if (!*(_DWORD *)(a3 + 820)) {
      segPumpAppendErrorLogEntry((uint64_t)a1, v11, a3, v343, -12887, @"CoreMediaErrorDomain", @"0 Length playlist returned", 0, 0, 1u, 3u);
    }
    unint64_t v17 = *(const void **)(a3 + 520);
    if (v17)
    {
      CFRelease(v17);
      *(void *)(a3 + 520) = 0;
    }
    unsigned int v18 = *(_DWORD *)(a3 + 820) + 1;
    *(_DWORD *)(a3 + 820) = v18;
    if (v18 >= 3)
    {
      unsigned int v355 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      uint64_t v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      if (*(void *)(v11 + 8144)) {
        uint64_t ParamsAsDict = segPumpHandleIndexFileNetworkError(a1, a3, a6, 4294954409, @"CoreMediaErrorDomain", @"More than 2 empty playlists in a row.");
      }
      else {
        uint64_t ParamsAsDict = FigSignalErrorAt();
      }
LABEL_107:
      uint64_t v20 = ParamsAsDict;
      LOBYTE(v350) = 0;
      CFNumberRef v347 = 0;
      CFNumberRef v21 = 0;
      goto LABEL_480;
    }
    uint64_t v20 = 0;
    CFNumberRef v21 = 0;
    CFNumberRef v347 = 0;
    int v22 = 0;
    int v350 = 0;
    int v23 = 0;
    int v24 = 0;
LABEL_16:
    if ((v360 & 3) == 0)
    {
      uint64_t v65 = *(void *)(a3 + 56);
      if (v65)
      {
        if (!FigMediaPlaylistHasEndTag(v65))
        {
          if (*(unsigned char *)(a3 + 866)) {
            int v23 = 1;
          }
          ++*(_DWORD *)(a3 + 384);
          if (dword_1E9351350)
          {
            int v338 = v24;
            unsigned int v355 = 0;
            os_log_type_t type = OS_LOG_TYPE_DEFAULT;
            uint64_t v66 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int v67 = v355;
            if (os_log_type_enabled(v66, type)) {
              unsigned int v68 = v67;
            }
            else {
              unsigned int v68 = v67 & 0xFFFFFFFE;
            }
            if (v68)
            {
              unint64_t v69 = &stru_1EE53F4B8;
              if (v11 && *(void *)(v11 + 8760)) {
                unint64_t v69 = *(__CFString **)(v11 + 8760);
              }
              uint64_t v70 = *(void *)a3;
              uint64_t v71 = *(__CFString **)(a3 + 16);
              if (!*(unsigned char *)(v11 + 339)) {
                uint64_t v71 = @"[]";
              }
              int v72 = *(_DWORD *)(a3 + 384);
              *(_DWORD *)CFTypeRef cf = 136316162;
              *(void *)&cf[4] = "segPumpParseIndexFile2";
              __int16 v362 = 2114;
              v363 = v69;
              __int16 v364 = 2048;
              uint64_t v365 = v70;
              __int16 v366 = 2114;
              v367 = v71;
              __int16 v368 = 1024;
              LODWORD(v369) = v72;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            int v24 = v338;
          }
          uint64_t v230 = *(void *)(a3 + 56);
          if (v230)
          {
            if (!*(unsigned char *)(v11 + 328)
              && *(void *)(a3 + 1048) - *(void *)(a3 + 1056) >= 1500000000 * *(unsigned int *)(v11 + 8)
              && !FigMediaPlaylistHasEndTag(v230))
            {
              uint64_t v20 = segPumpHandleIndexFileNetworkError(a1, a3, a6, 4294954408, @"CoreMediaErrorDomain", @"Playlist File unchanged for longer than 1.5 * target duration");
              if (v20) {
                goto LABEL_119;
              }
            }
          }
        }
      }
    }
    goto LABEL_17;
  }
  *(_DWORD *)(a3 + 820) = 0;
  CFArrayRef v15 = *(const __CFArray **)(v11 + 8672);
  CFHTTPMessageRef message = a4;
  if (v15) {
    CFIndex Count = CFArrayGetCount(v15);
  }
  else {
    CFIndex Count = 0;
  }
  uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  uint64_t ParamsAsDict = FigCFHTTPCopyQueryParamsAsDict(*(void *)(a3 + 16), (CFMutableDictionaryRef *)&v356);
  if (ParamsAsDict) {
    goto LABEL_107;
  }
  CFIndex v337 = Count;
  CFIndex v28 = v13;
  uint64_t v29 = (CFMutableArrayRef *)(v11 + 8672);
  v345 = v28;
  int v30 = *v28;
  int v31 = *(unsigned __int8 *)(v11 + 339);
  uint64_t v32 = *(void *)(v11 + 8384);
  uint64_t v351 = v11;
  CFDictionaryRef v33 = *(const __CFDictionary **)(v11 + 8160);
  uint64_t v34 = (uint64_t *)(a3 + 56);
  uint64_t v20 = FigStreamPlaylistParse(*(OpaqueCMBlockBuffer **)(a3 + 520), *(const __CFURL **)(a3 + 16), *(const __CFURL **)(a3 + 24), &v360, 0, 0, v30, v31, v29, v32, v33, (const __CFDictionary *)v356, v349, (CFTypeRef *)(a3 + 56));
  uint64_t v35 = *(void *)(a3 + 56);
  if (v35) {
    unint64_t v358 = FigMediaPlaylistGetMessagingDelayTime(v35) / 0xF4240uLL;
  }
  unint64_t valuePtr = (FigGetUpTimeNanoseconds() - UpTimeNanoseconds) / 0xF4240uLL;
  if (!v345[1103])
  {
    v345[1103] = 1;
    uint64_t v40 = *(void *)(v351 + 9048);
    if (v40)
    {
      unint64_t v41 = v358;
      uint64_t v42 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v42) {
        uint64_t v43 = v42;
      }
      else {
        uint64_t v43 = 0;
      }
      uint64_t v75 = *(void (**)(uint64_t, uint64_t, uint64_t, unint64_t, void))(v43 + 56);
      if (v75) {
        v75(v40, 0x1EE582CF8, 0x1EE585AF8, v41, 0);
      }
      uint64_t v76 = *(void *)(v351 + 9048);
      if (v76)
      {
        unint64_t v77 = valuePtr;
        uint64_t v78 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v79 = v78 ? v78 : 0;
        uint64_t v80 = *(void (**)(uint64_t, uint64_t, uint64_t, unint64_t, void))(v79 + 56);
        if (v80) {
          v80(v76, 0x1EE582CF8, 0x1EE585B38, v77, 0);
        }
      }
    }
  }
  CFAllocatorRef v36 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFNumberRef v342 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt64Type, &valuePtr);
  CFAllocatorRef allocator = v36;
  CFNumberRef v347 = CFNumberCreate(v36, kCFNumberSInt64Type, &v358);
  uint64_t v37 = *(void *)(v351 + 9048);
  if (v37)
  {
    uint64_t v38 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v38) {
      uint64_t v39 = v38;
    }
    else {
      uint64_t v39 = 0;
    }
    uint64_t v44 = *(void (**)(uint64_t, uint64_t, uint64_t, CFNumberRef, uint64_t))(v39 + 120);
    if (v44) {
      v44(v37, 0x1EE582CF8, 0x1EE585B18, v347, 100);
    }
    uint64_t v45 = *(void *)(v351 + 9048);
    if (v45)
    {
      uint64_t v46 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v47 = v46 ? v46 : 0;
      uint64_t v48 = *(void (**)(uint64_t, uint64_t, uint64_t, CFNumberRef, uint64_t))(v47 + 120);
      if (v48) {
        v48(v45, 0x1EE582CF8, 0x1EE585B58, v342, 100);
      }
    }
  }
  if (v12)
  {
    if (*v34)
    {
      if (FigMediaPlaylistGetXPCClientObject(*v34))
      {
        FigMediaPlaylistGetXPCClientObject(*v34);
        uint64_t started = FigStartForwardingMediaServicesProcessDeathNotification();
        if (started)
        {
          LOBYTE(v350) = 0;
          goto LABEL_675;
        }
      }
    }
  }
  if (*v29) {
    CFIndex v50 = CFArrayGetCount(*v29);
  }
  else {
    CFIndex v50 = 0;
  }
  char v51 = v360;
  int v350 = v360 & 1;
  if (!v20)
  {
    if (*v34)
    {
      if ((v360 & 1) == 0)
      {
        int v52 = segPumpSetupBlockingReload((uint64_t)a1, v351, a3);
        if (v52) {
          goto LABEL_202;
        }
      }
    }
  }
  if (*(unsigned char *)(v351 + 329))
  {
    if (v20)
    {
LABEL_65:
      BOOL v53 = (v51 & 1) == 0;
LABEL_66:
      int v340 = v53;
      goto LABEL_67;
    }
  }
  else
  {
    segPumpStreamCancelPreloadReadAndResetData(v351, a3);
    segPumpStreamCancelPreloadMapReadAndResetData(v351, a3);
    if (v20) {
      goto LABEL_65;
    }
  }
  if (*v34 && FigMediaPlaylistHasSkipDeltaBoundary(*v34)) {
    *(unsigned char *)(a3 + 876) = 1;
  }
  if ((v51 & 1) == 0)
  {
    if (*v34)
    {
      if (FigMediaPlaylistGetPlaylistType(*v34) == 2
        && FigMediaPlaylistGetPlaylistActiveDurationSecs(*v34) < 300.0)
      {
        uint64_t v60 = *(void *)(v351 + 96);
        uint64_t v61 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v61) {
          uint64_t v62 = v61;
        }
        else {
          uint64_t v62 = 0;
        }
        v245 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v62 + 56);
        if (v245)
        {
          uint64_t v246 = 0x1EE581CD8;
          uint64_t v247 = *MEMORY[0x1E4F1CFC8];
          uint64_t v248 = v60;
          goto LABEL_470;
        }
        goto LABEL_472;
      }
      if (FigMediaPlaylistGetPlaylistType(*v34) != 2)
      {
        uint64_t v108 = *(void *)(v351 + 96);
        uint64_t v109 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v109) {
          uint64_t v110 = v109;
        }
        else {
          uint64_t v110 = 0;
        }
        v224 = *(uint64_t (**)(uint64_t, uint64_t, void))(v110 + 56);
        if (v224)
        {
          uint64_t v225 = v108;
          uint64_t v226 = *MEMORY[0x1E4F1CFC8];
          int v52 = v224(v225, 0x1EE581CD8, *MEMORY[0x1E4F1CFC8]);
          if (v52) {
            goto LABEL_202;
          }
          uint64_t v227 = *(void *)(v351 + 96);
          uint64_t v228 = *(void *)(CMBaseObjectGetVTable() + 8);
          uint64_t v229 = v228 ? v228 : 0;
          v245 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v229 + 56);
          if (v245)
          {
            uint64_t v246 = 0x1EE581CF8;
            uint64_t v248 = v227;
            uint64_t v247 = v226;
LABEL_470:
            int v52 = v245(v248, v246, v247);
            if (v52) {
              goto LABEL_202;
            }
            goto LABEL_471;
          }
        }
LABEL_472:
        LODWORD(v20) = -12782;
        goto LABEL_473;
      }
    }
LABEL_471:
    BOOL v53 = 1;
    goto LABEL_66;
  }
  int v340 = 0;
LABEL_67:
  if (v350)
  {
    uint64_t v55 = *(void *)(v351 + 9048);
    if (v55)
    {
      uint64_t v54 = *(void *)(a3 + 1072);
      uint64_t v58 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v59 = v58 ? v58 : 0;
      uint64_t v73 = *(void (**)(uint64_t, uint64_t, uint64_t, unint64_t, void))(v59 + 56);
      if (v73)
      {
        uint64_t v74 = 0x1EE584E38;
LABEL_139:
        v73(v55, 0x1EE582B98, v74, v54 / 0xF4240uLL, 0);
      }
    }
  }
  else
  {
    uint64_t v54 = *(void *)(a3 + 1072);
    if (v54 > *(void *)(v351 + 9072))
    {
      *(void *)(v351 + 9072) = v54;
      uint64_t v55 = *(void *)(v351 + 9048);
      if (v55)
      {
        uint64_t v56 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v57 = v56 ? v56 : 0;
        uint64_t v73 = *(void (**)(uint64_t, uint64_t, uint64_t, unint64_t, void))(v57 + 56);
        if (v73)
        {
          uint64_t v74 = 0x1EE561CF8;
          goto LABEL_139;
        }
      }
    }
  }
  if (v20 || !*v34 && !*v349) {
    goto LABEL_141;
  }
  if (message && a5)
  {
    CFStringRef v88 = (const __CFString *)FigCFHTTPCreateURLString(*(const __CFURL **)(a3 + 16));
    size_t DataLength = CMBlockBufferGetDataLength(*(CMBlockBufferRef *)(a3 + 520));
    int v90 = FigCFHTTPCreateCacheHeaders(v88, DataLength, message, 0, (CFDictionaryRef *)&v359);
    if (v88) {
      CFRelease(v88);
    }
    if (v90)
    {
      LODWORD(v20) = v90;
LABEL_473:
      CFNumberRef v21 = v342;
      uint64_t v11 = v351;
      goto LABEL_474;
    }
  }
  if (v340)
  {
    uint64_t v93 = v351;
    uint64_t v94 = *(void *)(v351 + 296);
    if (!v94)
    {
      if (!*v34) {
        goto LABEL_444;
      }
      if (!FigMediaPlaylistHasEndTag(*v34)) {
        goto LABEL_444;
      }
      unsigned int v95 = segPumpStreamHasMediaFiles(a3);
      if (!a5 || !v95) {
        goto LABEL_444;
      }
LABEL_213:
      if (*v34)
      {
        int PlaylistType = FigMediaPlaylistGetPlaylistType(*v34);
        int v113 = v340;
        if (PlaylistType) {
          char v114 = 0;
        }
        else {
          char v114 = v340;
        }
      }
      else
      {
        char v114 = 0;
        int v113 = v340;
      }
      int v52 = segPumpSaveEntry(v351, *(const void **)(a3 + 24), 0, 0, *(CMBlockBufferRef *)(a3 + 520), v359, v113, v114, *(void *)(a3 + 1048));
      if (v52) {
        goto LABEL_202;
      }
      if (v350)
      {
        int v231 = segPumpEnsurePlaylistCache(v351);
        if (v231)
        {
          LOBYTE(v350) = 1;
          LODWORD(v20) = v231;
          CFNumberRef v21 = v342;
          uint64_t v11 = v351;
          goto LABEL_475;
        }
        int v232 = FigStreamingCacheSetMasterPlaylist(*(void *)(v351 + 304), *(const void **)(a3 + 520), v359);
        if (v232)
        {
          LOBYTE(v350) = 1;
          LODWORD(v20) = v232;
          CFNumberRef v21 = v342;
          uint64_t v11 = v351;
          goto LABEL_475;
        }
      }
      goto LABEL_444;
    }
  }
  else
  {
    if (*v349)
    {
      unsigned int v100 = *(const void **)(v351 + 8160);
      PlaylistVariables = (const void *)FigMultivariantPlaylistGetPlaylistVariables(*v349);
      *(void *)(v351 + 8160) = PlaylistVariables;
      if (PlaylistVariables) {
        CFRetain(PlaylistVariables);
      }
      if (v100) {
        CFRelease(v100);
      }
    }
    uint64_t v93 = v351;
    uint64_t v94 = *(void *)(v351 + 296);
    if (!v94)
    {
      if (!a5) {
        goto LABEL_444;
      }
      goto LABEL_213;
    }
  }
  uint64_t v102 = (void *)(v93 + 296);
  char v103 = !v12;
  if (!a5) {
    char v103 = 1;
  }
  if ((v103 & 1) == 0)
  {
    int v52 = FigStreamingCacheSetMasterPlaylist(v94, *(const void **)(a3 + 520), v359);
    if (v52) {
      goto LABEL_202;
    }
  }
  if (!*v34) {
    goto LABEL_444;
  }
  if (!FigMediaPlaylistHasEndTag(*v34)) {
    goto LABEL_444;
  }
  if (!*v34) {
    goto LABEL_444;
  }
  CFArrayRef MediaSegmentSpecifiers = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(*v34);
  if (!MediaSegmentSpecifiers || CFArrayGetCount(MediaSegmentSpecifiers) < 1 || !*v102) {
    goto LABEL_444;
  }
  if (!v345[719])
  {
    if (!v345[4]) {
      goto LABEL_444;
    }
LABEL_544:
    int v52 = segPumpEnsureCacheForStreamPossiblyEndingStream((uint64_t)a1, a3);
    if (v52) {
      goto LABEL_202;
    }
    if (*(unsigned char *)(a3 + 1136))
    {
      LODWORD(v20) = 0;
      goto LABEL_473;
    }
    if (a5)
    {
      if (*(void *)(a3 + 64))
      {
        int v52 = segPumpSetPlaylistForStreamCache(v351, a3, *(const void **)(a3 + 520), v359);
        if (v52) {
          goto LABEL_202;
        }
      }
    }
    goto LABEL_444;
  }
  if (v345[3] && *(void *)(v351 + 384) == a3) {
    goto LABEL_544;
  }
LABEL_444:
  if (*(void *)(v351 + 8416) == *(void *)a3)
  {
    if (*v34)
    {
      CFArrayRef v233 = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(*v34);
      if (v233)
      {
        if (CFArrayGetCount(v233) >= 1)
        {
          FigMediaPlaylistGetMediaSegmentSpecifiers(*v34);
          FirstCFStringRef Value = (const void *)FigCFArrayGetFirstValue();
          v235 = FirstValue;
          CFIndex v335 = v50;
          if (*(void *)(v351 + 8424))
          {
            CFURLRef v236 = *(const __CFURL **)(a3 + 16);
            CFURLRef v237 = *(const __CFURL **)(a3 + 24);
            MediaFilePrivateData = segPumpGetMediaFilePrivateData(FirstValue);
            segPumpEnsureMediaSegmentURLs(v235, v236, v237);
            if (MediaFilePrivateData[3])
            {
              CFURLRef v239 = *(const __CFURL **)(v351 + 8424);
              CFURLRef v240 = *(const __CFURL **)(a3 + 16);
              CFURLRef v241 = *(const __CFURL **)(a3 + 24);
              v242 = (const __CFURL **)segPumpGetMediaFilePrivateData(v235);
              segPumpEnsureMediaSegmentURLs(v235, v240, v241);
              if (!FigCFHTTPURLHostEqual(v239, v242[3])) {
                FigReportingAgentStatsAddToCountValue(*(void *)(v351 + 9048), 0x1EE582B98, 0x1EE584CD8, 1);
              }
            }
            uint64_t v243 = v351;
            v244 = *(const void **)(v351 + 8424);
          }
          else
          {
            v244 = 0;
            uint64_t v243 = v351;
          }
          CFURLRef v249 = *(const __CFURL **)(a3 + 16);
          CFURLRef v250 = *(const __CFURL **)(a3 + 24);
          v251 = segPumpGetMediaFilePrivateData(v235);
          segPumpEnsureMediaSegmentURLs(v235, v249, v250);
          v252 = (const void *)v251[3];
          *(void *)(v243 + 8424) = v252;
          if (v252) {
            CFRetain(v252);
          }
          CFIndex v50 = v335;
          if (v244) {
            CFRelease(v244);
          }
        }
      }
    }
  }
LABEL_141:
  uint64_t v85 = *(const void **)(a3 + 520);
  if (v85)
  {
    CFRelease(v85);
    *(void *)(a3 + 520) = 0;
  }
  uint64_t v86 = (uint64_t *)(a3 + 56);
  if (v20) {
    goto LABEL_144;
  }
  uint64_t v91 = *(void *)(a3 + 56);
  if (*(void *)a3)
  {
    if (v91) {
      goto LABEL_222;
    }
    goto LABEL_225;
  }
  if (!v91)
  {
LABEL_225:
    uint64_t v13 = v345;
    if (*v349) {
      goto LABEL_233;
    }
    int v52 = FigSignalErrorAt();
LABEL_202:
    LODWORD(v20) = v52;
    goto LABEL_473;
  }
  for (CFIndex i = 0; ; ++i)
  {
    CFArrayRef ContentKeySpecifiers = (const __CFArray *)FigMediaPlaylistGetContentKeySpecifiers(v91);
    if (ContentKeySpecifiers) {
      CFArrayRef ContentKeySpecifiers = (const __CFArray *)CFArrayGetCount(ContentKeySpecifiers);
    }
    if (i >= (uint64_t)ContentKeySpecifiers) {
      goto LABEL_221;
    }
    CFArrayRef v98 = (const __CFArray *)FigMediaPlaylistGetContentKeySpecifiers(*v34);
    CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v98, i);
    if (FigContentKeySpecifierGetKeySystem((uint64_t)ValueAtIndex) == 1
      && (FigContentKeySpecifierGetEncryptionMethod((uint64_t)ValueAtIndex) == 2
       || FigContentKeySpecifierGetEncryptionMethod((uint64_t)ValueAtIndex) == 1))
    {
      break;
    }
    uint64_t v91 = *v34;
  }
  uint64_t v115 = *(void *)(v351 + 8144);
  if (v115)
  {
    uint64_t v116 = *(void *)(v115 + 8);
    if (v116)
    {
      FigAlternateSetIsFairPlayStreamingVideoAlternate(v116, 1);
      if (!FigAlternateHasValidCodecs(*(void *)(*(void *)(v351 + 8144) + 8))
        || !FigAlternateWillPlayIfFairplayProtected(*(void *)(*(void *)(v351 + 8144) + 8)))
      {
        uint64_t v20 = FigSignalErrorAt();
LABEL_144:
        if ((v20 & 0xFFFFFFFB) == 0xFFFFCE9A)
        {
          uint64_t v11 = v351;
          if (v20 != -12646) {
            segPumpAppendErrorLogEntry((uint64_t)a1, v351, a3, v343, (int)v20, @"CoreMediaErrorDomain", @"Playlist parse error", 0, 0, 1u, 2u);
          }
          if (*(void *)(v351 + 8096))
          {
            unsigned int v355 = 0;
            os_log_type_t type = OS_LOG_TYPE_DEFAULT;
            uint64_t v87 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v87, OS_LOG_TYPE_DEFAULT);
            CFNumberRef v21 = v342;
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            int v111 = segPumpHandleIndexFileNetworkError(a1, a3, a6, v20, @"CoreMediaErrorDomain", @"playlist parse error.");
LABEL_309:
            LODWORD(v20) = v111;
            goto LABEL_474;
          }
LABEL_458:
          CFNumberRef v21 = v342;
          goto LABEL_474;
        }
        if (v20 == -17633)
        {
          if (!*(unsigned char *)(a3 + 876))
          {
            uint64_t v11 = v351;
            segPumpAppendErrorLogEntry((uint64_t)a1, v351, a3, v343, -17633, @"CoreMediaErrorDomain", @"Did not request delta", 0, 0, 1u, 1u);
            segPumpSendEndCallbackForAllActiveStreamsWithOSStatus(*(void *)v351, 4294949663);
            LODWORD(v20) = 0;
            goto LABEL_458;
          }
          *(unsigned char *)(a3 + 876) = 0;
          int v52 = segPumpHandleIndexFileNetworkError(a1, a3, a6, 4294949663, @"CoreMediaErrorDomain", @"Could not apply Playlist delta");
          goto LABEL_202;
        }
        if (v20 == -12885)
        {
          uint64_t v13 = v345;
          uint64_t v11 = v351;
          if (dword_1E9351350)
          {
            unsigned int v355 = 0;
            os_log_type_t type = OS_LOG_TYPE_DEFAULT;
            CFTypeRef v92 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v92, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          CFNumberRef v21 = v342;
          if (*(void *)(v351 + 8416) == *(void *)a3 && *(unsigned char *)(a3 + 866) && *v86)
          {
            double PlaylistActiveDurationSecs = FigMediaPlaylistGetPlaylistActiveDurationSecs(*v86);
            *(double *)(a3 + 96) = PlaylistActiveDurationSecs;
            *(double *)(v351 + 344) = PlaylistActiveDurationSecs;
            int v23 = 1;
          }
          else
          {
            int v23 = 0;
          }
          uint64_t v20 = segPumpHandleIndexFileNetworkError(a1, a3, a6, 4294954411, @"CoreMediaErrorDomain", @"unsupported crypt format.");
          int v24 = 0;
          int v22 = 1;
          goto LABEL_16;
        }
        if (v20)
        {
          if (*v29 && v337 < v50)
          {
            unsigned int v105 = (__CFDictionary *)CFArrayGetValueAtIndex(*v29, v50 - 1);
            uint64_t v11 = v351;
            if (v105)
            {
              v106 = v105;
              int AllocatorForMedia = FigGetAllocatorForMedia();
              FigErrorLogSetSeverity(AllocatorForMedia, v106, 1);
            }
          }
          else
          {
            uint64_t v11 = v351;
            segPumpAppendErrorLogEntry((uint64_t)a1, v351, a3, v343, (int)v20, @"CoreMediaErrorDomain", @"Playlist error", 0, 0, 1u, 1u);
          }
          goto LABEL_458;
        }
      }
    }
  }
LABEL_221:
  uint64_t v91 = *v34;
  if (!*v34) {
    goto LABEL_225;
  }
LABEL_222:
  uint64_t v13 = v345;
  if (FigMediaPlaylistHasEndTag(v91))
  {
    if (dword_1E9351350) {
      goto LABEL_232;
    }
  }
  else
  {
    FigMediaPlaylistGetMediaSegmentSpecifiers(v91);
    uint64_t v117 = FigCFArrayGetFirstValue();
    if (v117 && FigMediaSegmentSpecifierGetMediaSequence(v117))
    {
      if (dword_1E9351350) {
        goto LABEL_232;
      }
    }
    else if (dword_1E9351350)
    {
LABEL_232:
      unsigned int v355 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      uint64_t v118 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v118, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
LABEL_233:
  if (v13[719])
  {
    if (!*v34
      || (CFArrayRef v119 = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(*v34)) == 0
      || CFArrayGetCount(v119) <= 0)
    {
      unsigned int v355 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      v154 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v154, OS_LOG_TYPE_DEFAULT);
      CFNumberRef v21 = v342;
      uint64_t v11 = v351;
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      segPumpAppendErrorLogEntry((uint64_t)a1, v351, a3, v343, -12642, @"CoreMediaErrorDomain", @"no media files in stream playlist", 0, 0, 1u, 1u);
      int v111 = FigSignalErrorAt();
      goto LABEL_309;
    }
  }
  if (*(unsigned char *)(a3 + 861))
  {
    if (*(unsigned char *)(a3 + 864))
    {
      uint64_t v120 = *(void *)(v351 + 16 * *(void *)(v351 + 8416) + 384);
      if (*(void *)(v120 + 56))
      {
        v370[0] = 0;
        *(void *)CFTypeRef cf = 0;
        uint64_t NextMediaFileWithDate = segPumpGetNextMediaFileWithDate(*v34, (double *)v370);
        uint64_t v122 = segPumpGetNextMediaFileWithDate(*(void *)(v120 + 56), (double *)cf);
        if (NextMediaFileWithDate)
        {
          uint64_t v123 = v122;
          if (v122)
          {
            uint64_t DateStamp = FigMediaSegmentSpecifierGetDateStamp(NextMediaFileWithDate);
            double v125 = MEMORY[0x199707BD0](DateStamp);
            uint64_t v126 = FigMediaSegmentSpecifierGetDateStamp(v123);
            double v127 = MEMORY[0x199707BD0](v126);
            *(double *)(a3 + 88) = *(double *)(v120 + 88) + v125 - *(double *)v370 - (v127 - *(double *)cf);
            *(void *)(a3 + 928) = 0;
          }
        }
      }
    }
  }
  uint64_t v128 = FigGetUpTimeNanoseconds();
  if (!*v34)
  {
    LOBYTE(v331) = 0;
    int v339 = 0;
    CFTypeRef v130 = (double *)(a3 + 88);
    double v131 = *(double *)(a3 + 88);
LABEL_311:
    uint64_t v334 = 0x1E1338000;
    goto LABEL_315;
  }
  if (FigMediaPlaylistGetPlaylistActiveDurationSecs(*v34) == 0.0) {
    uint64_t v129 = 0;
  }
  else {
    uint64_t v129 = 1000000000;
  }
  CFTypeRef v130 = (double *)(a3 + 88);
  double v131 = *(double *)(a3 + 88);
  uint64_t v132 = *(void *)(a3 + 56);
  if (!v132)
  {
    LOBYTE(v331) = 0;
    int v339 = 0;
    goto LABEL_311;
  }
  v332 = (double *)(a3 + 88);
  FigMediaPlaylistGetMediaSegmentSpecifiers(v132);
  uint64_t v133 = FigCFArrayGetFirstValue();
  if (v133)
  {
    v134 = (const void *)v133;
    int v339 = 0;
    int v331 = 0;
    uint64_t v135 = v129 + v128;
    uint64_t v334 = 0x1E1338000;
    while (1)
    {
      uint64_t NextSegment = FigMediaSegmentSpecifierGetNextSegment((uint64_t)v134);
      uint64_t v137 = segPumpGetMediaFilePrivateData(v134);
      if (FigMediaSegmentSpecifierAreFragmentsExpired((uint64_t)v134))
      {
        CFArrayRef PartialSegments = (const __CFArray *)FigMediaSegmentSpecifierGetPartialSegments((uint64_t)v134);
        CFIndex v139 = 0;
        if (!PartialSegments)
        {
LABEL_260:
          CFIndex v142 = 0;
          goto LABEL_261;
        }
        while (1)
        {
          CFIndex v142 = CFArrayGetCount(PartialSegments);
LABEL_261:
          if (v139 >= v142) {
            break;
          }
          unsigned int v140 = CFArrayGetValueAtIndex(PartialSegments, v139);
          v141 = *(void **)(a3 + 680);
          if (v141)
          {
            while (!segPumpMediaConnectionIncludesMedia(a3, (uint64_t)v141, v140))
            {
              v141 = (void *)*v141;
              if (!v141) {
                goto LABEL_256;
              }
            }
          }
          else
          {
LABEL_256:
            if (*(const void **)(a3 + 264) != v140)
            {
              FigMediaPlaylistRemovePartSegmentSpecifier((unsigned char *)*v34, (uint64_t)v134, (uint64_t)v140);
              --v139;
            }
          }
          ++v139;
          if (!PartialSegments) {
            goto LABEL_260;
          }
        }
      }
      if (FigMediaSegmentSpecifierIsReadInCurrent((uint64_t)v134))
      {
        uint64_t v86 = (uint64_t *)(a3 + 56);
        if (!FigMediaPlaylistHasEndTag(*v34))
        {
          if (v137[96])
          {
            double *v332 = *v332 - FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)v134);
            v137[96] = 0;
          }
          *((void *)v137 + 11) = v135;
          if (v334 == 0x1E1338000)
          {
            double Current = CFAbsoluteTimeGetCurrent();
            uint64_t v334 = (uint64_t)(Current + FigMediaPlaylistGetPlaylistActiveDurationSecs(*v34));
          }
          int v339 = 1;
        }
        FigMediaSegmentSpecifierGetPartialSegments((uint64_t)v134);
        if (FigCFArrayGetLastValue())
        {
          LastCFStringRef Value = (const void *)FigCFArrayGetLastValue();
          if (*((unsigned char *)segPumpGetMediaFilePrivateData(LastValue) + 73))
          {
            if (FigMediaSegmentSpecifierGetURLString((uint64_t)v134)
              && !FigMediaSegmentSpecifierIsFragment((uint64_t)v134)
              && !v137[73])
            {
              segPumpMarkMediaFileAsDelivered((uint64_t *)a3, v134);
            }
          }
        }
        goto LABEL_305;
      }
      if (!v137[96]) {
        double *v332 = FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)v134) + *v332;
      }
      unsigned int v145 = *(void **)(a3 + 680);
      if (v145)
      {
LABEL_278:
        while (2)
        {
          if (segPumpMediaConnectionIncludesMedia(a3, (uint64_t)v145, v134)) {
            goto LABEL_299;
          }
          CFArrayRef v146 = (const __CFArray *)FigMediaSegmentSpecifierGetPartialSegments((uint64_t)v134);
          CFIndex v147 = 0;
          while (1)
          {
            CFIndex v148 = v146 ? CFArrayGetCount(v146) : 0;
            if (v147 >= v148) {
              break;
            }
            v149 = CFArrayGetValueAtIndex(v146, v147++);
            if (segPumpMediaConnectionIncludesMedia(a3, (uint64_t)v145, v149))
            {
              unsigned int v145 = (void *)*v145;
              if (v145) {
                goto LABEL_278;
              }
              goto LABEL_299;
            }
          }
          unsigned int v145 = (void *)*v145;
          if (v145) {
            continue;
          }
          break;
        }
      }
      if (*(const void **)(a3 + 256) != v134 && *(const void **)(a3 + 264) != v134)
      {
        if (!v345[719])
        {
          int v150 = v331;
          if (!v137[73]) {
            int v150 = 1;
          }
          int v331 = v150;
        }
        uint64_t v86 = (uint64_t *)(a3 + 56);
        for (uint64_t j = *(void **)(a3 + 680); j; uint64_t j = (void *)*j)
        {
          if ((const void *)j[1] == v134) {
            segPumpResetMediaConnection(v351, j, 1);
          }
        }
        FigMediaPlaylistRemoveMediaSegmentSpecifier(*v34, (uint64_t)v134);
        goto LABEL_303;
      }
LABEL_299:
      v137[96] = 1;
      if (FigMediaSegmentSpecifierGetMapSegmentSpecifier((uint64_t)v134))
      {
        uint64_t MapSegmentSpecifier = FigMediaSegmentSpecifierGetMapSegmentSpecifier((uint64_t)v134);
        FigMediaSegmentSpecifierSetIsReadInCurrent(MapSegmentSpecifier, 1);
      }
      uint64_t v86 = (uint64_t *)(a3 + 56);
      if (FigMediaSegmentSpecifierGetContentKeySpecifier((uint64_t)v134))
      {
        uint64_t ContentKeySpecifier = FigMediaSegmentSpecifierGetContentKeySpecifier((uint64_t)v134);
        FigContentKeySpecifierSetIsReadInCurrent(ContentKeySpecifier, 1);
      }
LABEL_303:
      if (FigMediaPlaylistGetPlaylistType(*v86) == 1)
      {
        LODWORD(v20) = FigSignalErrorAt();
        uint64_t v11 = v351;
        segPumpAppendErrorLogEntry((uint64_t)a1, v351, a3, v343, (int)v20, @"CoreMediaErrorDomain", @"Removing media file from EVENT playlist.", 0, 0, 1u, 1u);
        goto LABEL_458;
      }
      int v339 = 1;
LABEL_305:
      v134 = (const void *)NextSegment;
      if (!NextSegment)
      {
        uint64_t v13 = v345;
        goto LABEL_314;
      }
    }
  }
  LOBYTE(v331) = 0;
  int v339 = 0;
  uint64_t v334 = 0x1E1338000;
LABEL_314:
  CFTypeRef v130 = (double *)(a3 + 88);
LABEL_315:
  v333 = v130;
  segPumpPlaylistRecalculatePumpTimeOffsets(*v86, *v130);
  if (v340) {
    uint64_t v155 = segPumpSetupCommonCryptKeyData(v351, (uint64_t *)a3, *(unsigned char **)(a3 + 56), *(void *)(v351 + 8144));
  }
  else {
    uint64_t v155 = segPumpSetupCommonCryptKeyDataForSessionKeys(v351, *v349);
  }
  uint64_t v20 = v155;
  if (v155) {
    goto LABEL_676;
  }
  if (*v86)
  {
    FigMediaPlaylistGetMapSegmentSpecifiers(*v86);
    uint64_t v156 = FigCFArrayGetFirstValue();
    if (v156)
    {
      int v157 = (const void *)v156;
      do
      {
        uint64_t v158 = FigMediaSegmentSpecifierGetNextSegment((uint64_t)v157);
        if (!FigMediaSegmentSpecifierIsReadInCurrent((uint64_t)v157))
        {
          uint64_t v159 = *(void *)(a3 + 696);
          if (!v159 || (uint64_t v160 = *(void *)(v159 + 8)) == 0 || FigMediaSegmentSpecifierGetType(v160) != 1)
          {
            v370[0] = 0;
            *(void *)CFTypeRef cf = 0;
            *((unsigned char *)segPumpGetMediaFilePrivateData(v157) + 98) = 0;
            if (!segPumpCreateCacheNameFromSegment(a3, (uint64_t)v157, cf, v370))
            {
              uint64_t v161 = *(void *)(v351 + 296);
              if (v161)
              {
                uint64_t v162 = *(CFMutableDictionaryRef **)(a3 + 64);
                CFTypeRef v163 = v370[0];
                uint64_t StartOffset = FigMediaSegmentSpecifierGetStartOffset((uint64_t)v157);
                uint64_t MediaSequence = FigMediaSegmentSpecifierGetMediaSequence((uint64_t)v157);
                FigStreamingCacheRemoveMediaMap(v161, v162, (uint64_t)v163, StartOffset, MediaSequence);
              }
              unsigned int v166 = *(const void **)cf;
              uint64_t v167 = FigMediaSegmentSpecifierGetStartOffset((uint64_t)v157);
              uint64_t v168 = FigMediaSegmentSpecifierGetBytesToRead((uint64_t)v157);
              SavedEntry = (CFTypeRef *)segPumpFindSavedEntry(v351, v166, v167, v168);
              if (SavedEntry) {
                segPumpFreeSavedEntry(v351, SavedEntry);
              }
            }
            if (*(void *)cf) {
              CFRelease(*(CFTypeRef *)cf);
            }
            if (v370[0]) {
              CFRelease(v370[0]);
            }
            FigMediaPlaylistRemoveMapSegmentSpecifier(*v86, (uint64_t)v157);
          }
        }
        int v157 = (const void *)v158;
      }
      while (v158);
    }
  }
  if (!*(void *)(v351 + 296)
    || !*v86
    || (CFArrayRef v170 = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(*v86)) == 0
    || CFArrayGetCount(v170) < 1
    || !FigMediaPlaylistHasEndTag(*v86)
    || (FigMediaPlaylistGetMediaSegmentSpecifiers(*v86),
        uint64_t v171 = (const void *)FigCFArrayGetFirstValue(),
        *((void *)segPumpGetMediaFilePrivateData(v171) + 16)))
  {
LABEL_368:
    CFNumberRef v21 = v342;
    if (v13[2] && *(unsigned char *)(a3 + 869) && (_BYTE)v331)
    {
      uint64_t v201 = *(void *)a3;
      uint64_t v11 = v351;
      if (*(void *)a3 == *(void *)(v351 + 8416))
      {
        segPumpStopPlaylistReadsAndResetAllData(v351);
        uint64_t v20 = 0;
        int v22 = 0;
        int v23 = 0;
        int v24 = v339;
LABEL_17:
        if (!*(unsigned char *)(a3 + 868))
        {
          uint64_t v63 = *(void *)(a3 + 56);
          if (v63)
          {
            CFArrayRef v64 = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(v63);
            if (v64)
            {
              if (CFArrayGetCount(v64) >= 1) {
                *(unsigned char *)(a3 + 868) = 1;
              }
            }
          }
        }
        if (v23) {
          segPumpReadyNotification((void *)v11, @"FBP_DurationChanged", 0);
        }
        if (v24) {
          segPumpReadyNotification((void *)v11, @"FBPAL_SeekableTimeRangeChanged", 0);
        }
        if ((v360 & 8) != 0 && *(void *)a3 == *(void *)(v11 + 8416)) {
          segPumpReadyNotification((void *)v11, @"FBP_TaggedRangeMetadataChanged", 0);
        }
        if (*(unsigned char *)(a3 + 866) || (uint64_t v20 = segPumpReadOrScheduleIndexFileRead((uint64_t)a1, v11, a3), !v20))
        {
          if (v13[691])
          {
            uint64_t MediaForSingleStream = segPumpDeliverNextMediaForSingleStream(a1, v11, a3);
            if (MediaForSingleStream == -12644)
            {
              if (*(unsigned char *)(a3 + 864)) {
                uint64_t v20 = 0;
              }
              else {
                uint64_t v20 = 4294954652;
              }
            }
            else
            {
              uint64_t v20 = MediaForSingleStream;
              if (MediaForSingleStream == -12642)
              {
                uint64_t v20 = segPumpHandleIndexFileNetworkError(a1, a3, a6, 4294954654, @"CoreMediaErrorDomain", @"No matching mediaFile found from playlist");
                if (v20) {
                  goto LABEL_119;
                }
              }
              else if (MediaForSingleStream == -15626)
              {
                goto LABEL_119;
              }
            }
          }
          if (*(void *)a3 != *(void *)(v11 + 8416)) {
            goto LABEL_118;
          }
          if (v13[12]) {
            goto LABEL_118;
          }
          uint64_t v81 = *(void *)(a3 + 56);
          if (!v81 || FigMediaPlaylistGetDateStampCount(v81) < 1 || !*(void *)(v11 + 168)) {
            goto LABEL_118;
          }
          CFNumberRef v82 = v21;
          uint64_t v83 = *(void *)(a3 + 880);
          uint64_t v20 = segPumpSendDateMapping((uint64_t)a1, v11, (unsigned __int8 *)a3);
          if (v20)
          {
            CFNumberRef v21 = v82;
            goto LABEL_119;
          }
          BOOL v84 = v83 == *(void *)(a3 + 880);
          CFNumberRef v21 = v82;
          if (v84) {
LABEL_118:
          }
            segPumpUpdateNetworkCostHasEndTag(v11);
        }
LABEL_119:
        if (!v22) {
          goto LABEL_480;
        }
LABEL_474:
        if (!v350)
        {
          unsigned int v253 = segPumpSetupCommonCryptKeyData(v11, (uint64_t *)a3, *(unsigned char **)(a3 + 56), *(void *)(v11 + 8144));
          LOBYTE(v350) = 0;
LABEL_477:
          if (v20) {
            uint64_t v20 = v20;
          }
          else {
            uint64_t v20 = v253;
          }
          goto LABEL_480;
        }
LABEL_475:
        unsigned int v253 = segPumpSetupCommonCryptKeyDataForSessionKeys(v11, *v349);
        goto LABEL_477;
      }
    }
    else
    {
      uint64_t v201 = *(void *)a3;
      uint64_t v11 = v351;
    }
    if (!v201 && v13[720]) {
      *(float64x2_t *)(v11 + 8720) = vaddq_f64(*(float64x2_t *)(v11 + 8720), (float64x2_t)vdupq_lane_s64(COERCE__INT64(*v333 - v131), 0));
    }
    if (v334 != 0x1E1338000) {
      segPumpSetMediaFileExpireTimer(v11, (double)v334);
    }
    if (!v13[691] && !v13[692] && *v86 && FigMediaPlaylistHasStartTime(*v86))
    {
      v13[692] = 1;
      v13[693] = FigMediaPlaylistIsStartTimePrecise(*v86);
      *(double *)(v11 + 8688) = FigMediaPlaylistGetStartTimeValue(*v86);
    }
    if (v360)
    {
      CFArrayRef Alternates = (const __CFArray *)FigMultivariantPlaylistGetAlternates(*v349);
      if (Alternates)
      {
        CFIndex v203 = CFArrayGetCount(Alternates);
        if (v203 >= 1)
        {
          CFIndex v204 = v203;
          CFIndex v205 = 0;
          while (1)
          {
            CFArrayRef v206 = (const __CFArray *)FigMultivariantPlaylistGetAlternates(*v349);
            v207 = CFArrayGetValueAtIndex(v206, v205);
            uint64_t started = segPumpAddFigAlternate(v11, v207);
            if (started) {
              goto LABEL_675;
            }
            if (v204 == ++v205)
            {
              char v208 = 0;
              goto LABEL_393;
            }
          }
        }
      }
      char v208 = 1;
LABEL_393:
      if (FigMultivariantPlaylistGetMediaSelectionArray(*v349))
      {
        v209 = *(const void **)(v11 + 8376);
        MediaSelectionArray = (const void *)FigMultivariantPlaylistGetMediaSelectionArray(*v349);
        *(void *)(v11 + 8376) = MediaSelectionArray;
        if (MediaSelectionArray) {
          CFRetain(MediaSelectionArray);
        }
        if (v209) {
          CFRelease(v209);
        }
      }
      unsigned __int8 HasIndependentSegments = FigMultivariantPlaylistHasIndependentSegments(*v349);
      v13[15] = HasIndependentSegments;
      for (uint64_t k = 384; k != 432; k += 16)
        *(unsigned char *)(*(void *)(v11 + k) + 872) = HasIndependentSegments;
      CFNumberRef v21 = v342;
      if ((v208 & 1) == 0)
      {
        segPumpReadyNotification((void *)v11, @"FBPAL_AlternateListChanged", 0);
        uint64_t inited = segPumpInitAlternateSelectionBoss((uint64_t)a1, v11);
        if (inited) {
          goto LABEL_512;
        }
      }
      if (v13[1])
      {
        uint64_t inited = segPumpReadNextCryptKeyForStream((uint64_t)a1, v11, (void *)a3);
        if (inited) {
          goto LABEL_512;
        }
      }
    }
    else
    {
      if (*(unsigned char *)(a3 + 866) && *(void *)a3 == *(void *)(v11 + 8416))
      {
        segPumpSetTargetDurationAndType((uint64_t)a1, v11, *(void *)(a3 + 56));
        segPumpRTCReportingRespondToFirstIndexFileWithMedia(v11, (void *)a3);
      }
      segPumpSetPartTargetDuration(v11, *v86);
      segPumpSetActiveHoldBack(v11, *v86);
    }
    if (!*v86) {
      goto LABEL_519;
    }
    if (FigMediaPlaylistHasEndTag(*v86) && (*(void *)(a3 + 360) & 0x8000000000000000) == 0)
    {
      *(void *)(a3 + 360) = -1;
      *(void *)(a3 + 368) = -1;
    }
    uint64_t v214 = *(void *)(a3 + 56);
    if (!v214
      || (CFArrayRef v215 = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(v214)) == 0
      || CFArrayGetCount(v215) < 1
      || (*(_DWORD *)(a3 + 160) - 4) < 3)
    {
LABEL_519:
      if ((v360 & 2) == 0)
      {
        int v23 = 0;
LABEL_607:
        if ((*(void *)(a3 + 360) & 0x8000000000000000) == 0)
        {
          v304 = (uint64_t *)(a3 + 360);
          if (*v86)
          {
            CFArrayRef v305 = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(*v86);
            if (v305)
            {
              if (CFArrayGetCount(v305) >= 1 && (*v304 & 0x8000000000000000) == 0)
              {
                FigMediaPlaylistGetMediaSegmentSpecifiers(*v86);
                uint64_t v306 = FigCFArrayGetLastValue();
                uint64_t v307 = FigMediaSegmentSpecifierGetMediaSequence(v306);
                CFArrayRef v308 = (const __CFArray *)FigMediaSegmentSpecifierGetPartialSegments(v306);
                if (v308) {
                  CFArrayRef v308 = (const __CFArray *)CFArrayGetCount(v308);
                }
                if (v307 < *v304 || v307 == *v304 && (uint64_t)v308 <= *(void *)(a3 + 368))
                {
                  uint64_t v20 = segPumpHandleIndexFileNetworkError(a1, a3, a6, 4294951880, @"CoreMediaErrorDomain", @"Blocking Playlist Reload failed");
                  int v22 = 0;
                  CFNumberRef v21 = v342;
                  goto LABEL_616;
                }
              }
            }
          }
          uint64_t *v304 = -1;
          *(void *)(a3 + 368) = -1;
        }
        if (*(void *)(a3 + 792))
        {
          if (segPumpStreamHasPreloadHint(a3))
          {
            uint64_t PreloadHint = (const void *)FigMediaPlaylistGetPreloadHint(*(void *)(a3 + 56));
            BOOL v310 = segPumpStreamHasPreloadConnectionForSegment((void *)a3, PreloadHint, 0) != 0;
          }
          else
          {
            BOOL v310 = 0;
          }
          uint64_t started = segPumpRealizePreload((uint64_t)a1, (void *)a3);
          if (started) {
            goto LABEL_675;
          }
          if (*(void *)(a3 + 792)) {
            char v311 = v310;
          }
          else {
            char v311 = 1;
          }
          if ((v311 & 1) == 0) {
            segPumpStreamCancelPreloadReadAndResetData(v11, a3);
          }
        }
        CFNumberRef v21 = v342;
        if (!*(void *)(a3 + 800))
        {
LABEL_654:
          if (*v86)
          {
            CFArrayRef RenditionReportSpecifiers = (const __CFArray *)FigMediaPlaylistGetRenditionReportSpecifiers(*v86);
            if (RenditionReportSpecifiers)
            {
              if (CFArrayGetCount(RenditionReportSpecifiers) >= 1)
              {
                CFArrayRef v324 = (const __CFArray *)FigMediaPlaylistGetRenditionReportSpecifiers(*v86);
                segPumpReconcileGapRenditionReports(v11, v324);
              }
            }
          }
          int v24 = v339;
          if (!*(void *)(v11 + 9560) || !*(unsigned char *)(v11 + 329)) {
            goto LABEL_667;
          }
          v370[0] = COERCE_CFTYPEREF(segPumpGetEstIndependentInterval(v11));
          CFNumberRef v325 = CFNumberCreate(allocator, kCFNumberDoubleType, v370);
          if (v325)
          {
            CFNumberRef v326 = v325;
            uint64_t v327 = *(void *)(v11 + 9560);
            uint64_t v328 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v328) {
              uint64_t v329 = v328;
            }
            else {
              uint64_t v329 = 0;
            }
            v330 = *(void (**)(uint64_t, __CFString *, CFNumberRef))(v329 + 56);
            if (v330) {
              v330(v327, @"AfmfpbProperty_EstimatedGOPInterval", v326);
            }
            CFRelease(v326);
            CFNumberRef v21 = v342;
LABEL_667:
            uint64_t v20 = 0;
            int v22 = 0;
            goto LABEL_16;
          }
          uint64_t v20 = FigSignalErrorAt();
          if (v20) {
            goto LABEL_676;
          }
          int v22 = 0;
          CFNumberRef v21 = v342;
          uint64_t v13 = v345;
          uint64_t v11 = v351;
LABEL_616:
          int v24 = v339;
          goto LABEL_16;
        }
        if (segPumpStreamHasPreloadMapHint(a3))
        {
          PreloadMapHint = (const void *)FigMediaPlaylistGetPreloadMapHint(*(void *)(a3 + 56));
          BOOL v313 = segPumpStreamHasPreloadConnectionForMap((void *)a3, PreloadMapHint) != 0;
        }
        else
        {
          BOOL v313 = 0;
        }
        if (segPumpShouldDoSegmentReadAheads((unsigned char *)v11))
        {
          CFIndex v314 = 0;
          while (1)
          {
            CFArrayRef MapSegmentSpecifiers = (const __CFArray *)FigMediaPlaylistGetMapSegmentSpecifiers(*v86);
            if (MapSegmentSpecifiers) {
              CFArrayRef MapSegmentSpecifiers = (const __CFArray *)CFArrayGetCount(MapSegmentSpecifiers);
            }
            if (v314 >= (uint64_t)MapSegmentSpecifiers) {
              goto LABEL_649;
            }
            CFArrayRef v316 = (const __CFArray *)FigMediaPlaylistGetMapSegmentSpecifiers(*(void *)(a3 + 56));
            v317 = CFArrayGetValueAtIndex(v316, v314++);
            if (segPumpStreamHasPreloadConnectionForMap((void *)a3, v317))
            {
              if (v317)
              {
                uint64_t v318 = *(void *)(a3 + 776);
                if (v318 >= 1)
                {
                  uint64_t v319 = 0;
                  while (*(void *)(*(void *)(a3 + 768) + 8 * v319))
                  {
                    if (v318 == ++v319) {
                      goto LABEL_649;
                    }
                  }
                  uint64_t v320 = *(void *)(a3 + 800);
                  v321 = *(const void **)(v320 + 8);
                  *(void *)(v320 + 8) = v317;
                  CFRetain(v317);
                  if (v321) {
                    CFRelease(v321);
                  }
                  *(void *)(*(void *)(a3 + 768) + 8 * v319) = *(void *)(a3 + 800);
                  *(void *)(a3 + 800) = 0;
                }
              }
              goto LABEL_649;
            }
          }
        }
        uint64_t started = FigSignalErrorAt();
        if (!started)
        {
LABEL_649:
          if (*(void *)(a3 + 800)) {
            char v322 = v313;
          }
          else {
            char v322 = 1;
          }
          CFNumberRef v21 = v342;
          if ((v322 & 1) == 0) {
            segPumpStreamCancelPreloadMapReadAndResetData(v11, a3);
          }
          goto LABEL_654;
        }
LABEL_675:
        uint64_t v20 = started;
        goto LABEL_676;
      }
      if (*(uint64_t *)(a3 + 352) >= 1)
      {
        uint64_t inited = segPumpCalculateDiscoDomainOffset((void *)a3, (uint64_t *)(a3 + 312));
        if (inited)
        {
LABEL_512:
          uint64_t v20 = inited;
          goto LABEL_480;
        }
        if (dword_1E9351350)
        {
          unsigned int v355 = 0;
          os_log_type_t type = OS_LOG_TYPE_DEFAULT;
          v258 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v258, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        segPumpFreeDiscoQueue(a3 + 336);
        *(void *)(a3 + 352) = 0;
      }
      uint64_t v259 = *(void *)(a3 + 56);
      if (*(void *)a3 == *(void *)(v11 + 8416))
      {
        segPumpSetTargetDurationAndType((uint64_t)a1, v11, v259);
        uint64_t v259 = *v86;
        v260 = message;
        if ((*(void *)(v11 + 368) & 0x8000000000000000) != 0)
        {
          *(void *)(v11 + 368) = *(void *)(a3 + 448);
          *(void *)(v11 + 368) = (uint64_t)((double)*(uint64_t *)(v11 + 368)
                                           + FigMediaPlaylistGetPlaylistActiveDurationSecs(v259) * -1000000000.0);
          *(unsigned char *)(v11 + 376) = 0;
          uint64_t v259 = *(void *)(a3 + 56);
        }
      }
      else
      {
        v260 = message;
      }
      segPumpSetPartTargetDuration(v11, v259);
      segPumpSetActiveHoldBack(v11, *v86);
      if (!v13[15])
      {
        uint64_t v261 = 0;
        int v262 = 1;
        do
        {
          uint64_t v263 = *(void *)(v11 + 384 + v261);
          uint64_t v264 = *(void *)(v263 + 56);
          if (v264)
          {
            int v265 = FigMediaPlaylistHasIndependentSegments(v264);
            *(unsigned char *)(v263 + 872) = v265;
            if (!v265) {
              int v262 = 0;
            }
          }
          v261 += 16;
        }
        while (v261 != 48);
        v260 = message;
        if (v262) {
          v13[15] = 1;
        }
      }
      if (FigMediaPlaylistHasEndTag(*v86))
      {
        if (!v13[9])
        {
          v13[9] = 1;
          if (!*(unsigned char *)(a3 + 866))
          {
            v13[10] = 1;
            if (dword_1E9351350)
            {
              unsigned int v355 = 0;
              os_log_type_t type = OS_LOG_TYPE_DEFAULT;
              v266 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v266, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              v260 = message;
            }
          }
        }
      }
      *(void *)(a3 + 1056) = *(void *)(a3 + 448);
      *(_DWORD *)(a3 + 384) = 0;
      if (*(unsigned char *)(v11 + 328))
      {
        if (*(void *)a3 == *(void *)(v11 + 8416))
        {
          v370[0] = 0;
          uint64_t v267 = segPumpGetNextMediaFileWithDate(*v86, (double *)v370);
          if (v267)
          {
            uint64_t v268 = FigMediaSegmentSpecifierGetDateStamp(v267);
            double v269 = MEMORY[0x199707BD0](v268);
            double v270 = FigMediaPlaylistGetPlaylistActiveDurationSecs(*v86);
            CMTimeMake(&v353, (uint64_t)((v269 + v270 - *(double *)v370) * 1000000000.0), 1000000000);
            HostTimeClocuint64_t k = CMClockGetHostTimeClock();
            CMClockGetTime(&v352, HostTimeClock);
            segPumpSendPlaylistUpdateNotification((void *)v11);
          }
        }
      }
      double v272 = *(double *)(a3 + 96);
      if (v272 != FigMediaPlaylistGetPlaylistActiveDurationSecs(*(void *)(a3 + 56)))
      {
        double v274 = FigMediaPlaylistGetPlaylistActiveDurationSecs(*(void *)(a3 + 56));
        *(double *)(a3 + 96) = v274;
        if (*(void *)(v11 + 8416) == *(void *)a3)
        {
          double v273 = *(double *)(v11 + 344);
          if (v273 != v274)
          {
            if (v274 > v273 || (LODWORD(v275) = *(_DWORD *)(v11 + 8), double v273 = v273 - (double)v275, v274 <= v273))
            {
              if (dword_1E9351350)
              {
                unsigned int v355 = 0;
                os_log_type_t type = OS_LOG_TYPE_DEFAULT;
                v283 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                unsigned int v284 = v355;
                if (os_log_type_enabled(v283, type)) {
                  unsigned int v285 = v284;
                }
                else {
                  unsigned int v285 = v284 & 0xFFFFFFFE;
                }
                if (v285)
                {
                  v286 = *(__CFString **)(v11 + 8760);
                  uint64_t v287 = *(void *)a3;
                  if (!v286) {
                    v286 = &stru_1EE53F4B8;
                  }
                  v288 = *(__CFString **)(v11 + 344);
                  uint64_t v289 = *(void *)(a3 + 96);
                  *(_DWORD *)CFTypeRef cf = 136316162;
                  *(void *)&cf[4] = "segPumpParseIndexFile2";
                  __int16 v362 = 2114;
                  v363 = v286;
                  __int16 v364 = 2048;
                  uint64_t v365 = v287;
                  __int16 v366 = 2048;
                  v367 = v288;
                  __int16 v368 = 2048;
                  uint64_t v369 = v289;
                  _os_log_send_and_compose_impl();
                }
                v260 = message;
                fig_log_call_emit_and_clean_up_after_send_and_compose();
                double v274 = *(double *)(a3 + 96);
              }
              *(double *)(v11 + 344) = v274;
              int v23 = 1;
              int v339 = 1;
              goto LABEL_580;
            }
            if (dword_1E9351350)
            {
              unsigned int v355 = 0;
              os_log_type_t type = OS_LOG_TYPE_DEFAULT;
              v276 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              unsigned int v277 = v355;
              if (os_log_type_enabled(v276, type)) {
                unsigned int v278 = v277;
              }
              else {
                unsigned int v278 = v277 & 0xFFFFFFFE;
              }
              if (v278)
              {
                v279 = *(__CFString **)(v11 + 8760);
                uint64_t v280 = *(void *)a3;
                if (!v279) {
                  v279 = &stru_1EE53F4B8;
                }
                v281 = *(__CFString **)(a3 + 96);
                uint64_t v282 = *(void *)(v11 + 344);
                *(_DWORD *)CFTypeRef cf = 136316162;
                *(void *)&cf[4] = "segPumpParseIndexFile2";
                __int16 v362 = 2114;
                v363 = v279;
                __int16 v364 = 2048;
                uint64_t v365 = v280;
                __int16 v366 = 2048;
                v367 = v281;
                __int16 v368 = 2048;
                uint64_t v369 = v282;
                _os_log_send_and_compose_impl();
              }
              v260 = message;
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
          }
        }
      }
      int v23 = 0;
LABEL_580:
      uint64_t v290 = *(void *)(v11 + 296);
      if (v290)
      {
        uint64_t v291 = 0;
        double v292 = 0.0;
        double v293 = INFINITY;
        do
        {
          uint64_t v294 = *(void *)(v11 + 384 + v291);
          if (*(void *)(v294 + 16))
          {
            double v295 = *(double *)(v294 + 88);
            if (v293 > v295) {
              double v293 = *(double *)(v294 + 88);
            }
            double v296 = v295 + *(double *)(v294 + 96);
            if (v292 < v296) {
              double v292 = v296;
            }
          }
          v291 += 16;
        }
        while (v291 != 48);
        FigStreamingCacheSetCacheTimeRange(v290, v293, v292);
      }
      if (*(unsigned char *)(a3 + 866) && v13[691]) {
        segPumpSetStartingOffset(a1, v11, a3);
      }
      if (*(void *)a3 == *(void *)(v11 + 8416))
      {
        if (*(unsigned char *)(v11 + 376))
        {
          *(unsigned char *)(v11 + 376) = 0;
          if (!v13[9] && !*(_DWORD *)(v11 + 24))
          {
            double v297 = *v333;
            if (*v333 > 0.0)
            {
              double v273 = (double)*(uint64_t *)(a3 + 448) + (v297 + *(double *)(a3 + 96)) * -1000000000.0;
              unint64_t v298 = (uint64_t)v273;
              uint64_t v299 = *(void *)(v11 + 368);
              unsigned int v300 = *(_DWORD *)(v11 + 8);
              unint64_t v301 = v299 + 1000000000 * v300;
              unint64_t v302 = v299 - 1000000000 * v300;
              if (v301 < (uint64_t)v273 || v302 > v298)
              {
                double v273 = (double)(uint64_t)(v298 - v299) / 1000000000.0;
                double *v333 = v297 + v273;
              }
            }
          }
        }
      }
      if (!*(unsigned char *)(a3 + 875))
      {
        LODWORD(v273) = *(_DWORD *)(v11 + 8);
        if (*v333 > (double)*(unint64_t *)&v273 * 3.0 && !segPumpIsIndexFileResponseOutOfDate(v11, a3, v260)) {
          *(unsigned char *)(a3 + 875) = 1;
        }
      }
      goto LABEL_607;
    }
    if (!*(unsigned char *)(v11 + 329))
    {
      int v223 = 5;
      goto LABEL_505;
    }
    IntCFStringRef Value = 0.0;
    BOOL v217 = (int)message;
    if (!message)
    {
      int v221 = 0;
LABEL_494:
      int v255 = *(_DWORD *)(a3 + 160);
      if (v255)
      {
        if (v255 != 2) {
          goto LABEL_508;
        }
        if ((v217 | v221)) {
          goto LABEL_497;
        }
LABEL_507:
        *(_DWORD *)(a3 + 160) = 4;
        segPumpSetStartingOffset(a1, v11, a3);
        int v255 = *(_DWORD *)(a3 + 160);
LABEL_508:
        if (v255 != 3) {
          goto LABEL_519;
        }
        goto LABEL_509;
      }
      if ((v217 | v221) != 1 || v13[691])
      {
        *(_DWORD *)(a3 + 160) = 2;
        *(_OWORD *)(a3 + 168) = 0u;
        *(_OWORD *)(a3 + 184) = 0u;
        *(_DWORD *)(a3 + 200) = 0;
        if (v217 | v221)
        {
LABEL_497:
          *(void *)(a3 + 176) = FigGetUpTimeNanoseconds();
          *(double *)(a3 + 184) = IntValue;
          if (!v217 && FigMediaPlaylistGetPartTargetDuration(*v86) < 1.0) {
            *(double *)(a3 + 184) = *(double *)(a3 + 184) + 1.0;
          }
          *(double *)(a3 + 168) = segPumpPlaylistGetEndDateOfLastPart(*(void *)(a3 + 56));
          if (*(_DWORD *)(a3 + 160) != 3) {
            *(_DWORD *)(a3 + 160) = 3;
          }
LABEL_509:
          if (*(int *)(a3 + 200) <= 5)
          {
            if (IntValue < floor(FigMediaPlaylistGetPartTargetDuration(*v86))
              || (*(double *)(a3 + 192) = *(double *)(a3 + 184)
                                        - (segPumpPlaylistGetEndDateOfLastPart(*(void *)(a3 + 56))
                                         - *(double *)(a3 + 168)),
                  double v257 = *(double *)(a3 + 192)
                       + (double)(FigGetUpTimeNanoseconds() - *(void *)(a3 + 176)) / 1000000000.0,
                  *(double *)(a3 + 192) = v257,
                  v257 <= FigMediaPlaylistGetPartTargetDuration(*(void *)(a3 + 56))))
            {
              if (*(_DWORD *)(a3 + 160) != 4) {
                *(_DWORD *)(a3 + 160) = 4;
              }
              segPumpSetStartingOffset(a1, v11, a3);
            }
            else
            {
              ++*(_DWORD *)(a3 + 200);
            }
          }
          else
          {
            *(_DWORD *)(a3 + 160) = 6;
            uint64_t v256 = segPumpSetupBlockingReload((uint64_t)a1, v11, a3);
            if (v256)
            {
              uint64_t inited = segPumpHandleIndexFileNetworkError(a1, a3, a6, v256, @"CoreMediaErrorDomain", @"tuneIn failed");
              if (inited) {
                goto LABEL_512;
              }
            }
          }
          goto LABEL_519;
        }
        goto LABEL_507;
      }
      int v223 = 1;
LABEL_505:
      *(_DWORD *)(a3 + 160) = v223;
      goto LABEL_519;
    }
    CFStringRef v218 = CFHTTPMessageCopyHeaderFieldValue(message, @"Age");
    CFStringRef v219 = CFHTTPMessageCopyHeaderFieldValue(message, @"ms-in-cache");
    BOOL v217 = v219 != 0;
    if (v219)
    {
      CFStringRef v220 = v219;
      IntCFStringRef Value = (double)CFStringGetIntValue(v219) / 1000.0;
      if (v218)
      {
        CFRelease(v218);
        int v221 = 1;
      }
      else
      {
        int v221 = 0;
      }
    }
    else
    {
      if (!v218)
      {
        BOOL v217 = 0;
        int v221 = 0;
        goto LABEL_493;
      }
      IntCFStringRef Value = (double)CFStringGetIntValue(v218);
      int v221 = 1;
      CFStringRef v220 = v218;
    }
    CFRelease(v220);
LABEL_493:
    CFNumberRef v21 = v342;
    goto LABEL_494;
  }
  CFAllocatorRef v172 = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v172, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
    uint64_t v20 = FigSignalErrorAt();
    CFDictionaryRef Copy = 0;
    goto LABEL_355;
  }
  CFDictionaryRef v174 = Mutable;
  CFIndex v175 = 0;
  uint64_t v176 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
  while (1)
  {
    CFArrayRef v177 = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(*v34);
    if (v177) {
      CFArrayRef v177 = (const __CFArray *)CFArrayGetCount(v177);
    }
    if (v175 >= (uint64_t)v177)
    {
      CFAllocatorRef v188 = (const __CFAllocator *)FigGetAllocatorForMedia();
      CFDictionaryRef Copy = CFDictionaryCreateCopy(v188, v174);
      uint64_t v20 = 0;
      goto LABEL_354;
    }
    CFArrayRef v178 = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(*v34);
    uint64_t v179 = CFArrayGetValueAtIndex(v178, v175);
    segPumpGetMediaFilePrivateData(v179);
    uint64_t URLString = FigMediaSegmentSpecifierGetURLString((uint64_t)v179);
    uint64_t v181 = FigMediaSegmentSpecifierGetStartOffset((uint64_t)v179);
    CFAllocatorRef v182 = (const __CFAllocator *)FigGetAllocatorForMedia();
    CFStringRef v183 = CFStringCreateWithFormat(v182, 0, @"%@-%lld", URLString, v181);
    if (!v183)
    {
      uint64_t v20 = FigSignalErrorAt();
      goto LABEL_672;
    }
    CFStringRef v184 = v183;
    if (!CFDictionaryGetValue(v174, v183)) {
      break;
    }
LABEL_352:
    FigCFArrayAppendDouble();
    CFRelease(v184);
    ++v175;
    uint64_t v13 = v345;
  }
  CFAllocatorRef v185 = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFMutableArrayRef v186 = CFArrayCreateMutable(v185, 0, v176);
  if (v186)
  {
    CFMutableArrayRef v187 = v186;
    CFDictionarySetValue(v174, v184, v186);
    CFRelease(v187);
    goto LABEL_352;
  }
  uint64_t v20 = FigSignalErrorAt();
  CFRelease(v184);
LABEL_672:
  CFDictionaryRef Copy = 0;
  uint64_t v13 = v345;
LABEL_354:
  CFRelease(v174);
LABEL_355:
  uint64_t v86 = (uint64_t *)(a3 + 56);
  if (v20)
  {
LABEL_365:
    if (!Copy) {
      goto LABEL_367;
    }
    goto LABEL_366;
  }
  for (CFIndex m = 0; ; ++m)
  {
    CFArrayRef v191 = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(*v34);
    if (v191) {
      CFArrayRef v191 = (const __CFArray *)CFArrayGetCount(v191);
    }
    if (m >= (uint64_t)v191)
    {
      uint64_t v20 = 0;
      goto LABEL_365;
    }
    CFArrayRef v192 = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(*v34);
    __int16 v193 = CFArrayGetValueAtIndex(v192, m);
    v194 = segPumpGetMediaFilePrivateData(v193);
    uint64_t v195 = FigMediaSegmentSpecifierGetURLString((uint64_t)v193);
    uint64_t v196 = FigMediaSegmentSpecifierGetStartOffset((uint64_t)v193);
    CFAllocatorRef v197 = (const __CFAllocator *)FigGetAllocatorForMedia();
    CFStringRef v198 = CFStringCreateWithFormat(v197, 0, @"%@-%lld", v195, v196);
    if (!v198) {
      break;
    }
    CFStringRef v199 = v198;
    CFStringRef Value = CFDictionaryGetValue(Copy, v198);
    if (Value) {
      CFStringRef Value = CFRetain(Value);
    }
    v194[16] = Value;
    CFRelease(v199);
  }
  uint64_t v20 = FigSignalErrorAt();
  if (Copy) {
LABEL_366:
  }
    CFRelease(Copy);
LABEL_367:
  if (!v20) {
    goto LABEL_368;
  }
LABEL_676:
  CFNumberRef v21 = v342;
LABEL_480:
  if (v346) {
    unsigned char *v346 = v350;
  }
  if (v359) {
    CFRelease(v359);
  }
  if (v347) {
    CFRelease(v347);
  }
  if (v21) {
    CFRelease(v21);
  }
  if (v356) {
    CFRelease(v356);
  }
  return v20;
}

uint64_t segPumpResumeRoundTripMonitoring(uint64_t a1)
{
  double v2 = *(double *)(a1 + 16);
  if (v2 <= 0.0)
  {
    LODWORD(v2) = *(_DWORD *)(a1 + 8);
    double v2 = (double)*(unint64_t *)&v2;
  }
  double v3 = v2 * 0.5 * 1000000000.0;
  if ((uint64_t)v3 <= 1100000000) {
    uint64_t v4 = 1100000000;
  }
  else {
    uint64_t v4 = (uint64_t)v3;
  }
  uint64_t result = FigGetUpTimeNanoseconds();
  uint64_t v6 = *(void *)(a1 + 16 * *(void *)(a1 + 8416) + 384);
  if (!*(unsigned char *)(v6 + 1169))
  {
    uint64_t v7 = result;
    uint64_t v8 = *(void *)(a1 + 8600);
    if (v8 > *(void *)(a1 + 8608))
    {
      uint64_t v9 = v8 + v4;
      if (v8 + v4 <= result + 5000000) {
        uint64_t v10 = result + 5000000;
      }
      else {
        uint64_t v10 = v8 + v4;
      }
      if (v8 + v4 >= result + 5000000) {
        uint64_t v11 = v8 + v4;
      }
      else {
        uint64_t v11 = v9 + 1;
      }
      unint64_t v12 = (v10 - v11) / (unint64_t)v4;
      if (v9 < result + 5000000) {
        ++v12;
      }
      uint64_t v13 = v8 + v4 + v4 * v12;
      goto LABEL_24;
    }
    if (result - v8 <= v4)
    {
LABEL_23:
      uint64_t v13 = v7 + v4 + 5000000;
LABEL_24:
      if (v13 >= 1 && !*(void *)(a1 + 8616))
      {
        unint64_t v17 = *(const void **)a1;
        unsigned int v18 = *(NSObject **)(a1 + 64);
        return FigHTTPCreateTimer(v17, (uint64_t)RoundTripMonitorTimeoutTimer, v18, (dispatch_object_t *)(a1 + 8616), (double)(v13 - v7) / 1000000000.0);
      }
      return result;
    }
    unint64_t v14 = 0;
    CFArrayRef v15 = (uint64_t *)(a1 + 392);
    do
    {
      uint64_t result = segPumpStreamHasActiveMediaRequest(*(v15 - 1));
      if (result) {
        goto LABEL_23;
      }
      uint64_t v16 = *v15;
      v15 += 2;
      uint64_t result = segPumpStreamHasActiveMediaRequest(v16);
      if (v14 > 1) {
        break;
      }
      ++v14;
    }
    while (!result);
    if (result) {
      goto LABEL_23;
    }
    if (*(unsigned char *)(a1 + 327))
    {
      uint64_t v19 = *(void *)(v6 + 16);
      if (segPumpStreamHasPreloadHint(v6))
      {
        uint64_t PreloadHint = (const void *)FigMediaPlaylistGetPreloadHint(*(void *)(v6 + 56));
        CFURLRef v21 = *(const __CFURL **)(v6 + 16);
        CFURLRef v22 = *(const __CFURL **)(v6 + 24);
        MediaFilePrivateData = segPumpGetMediaFilePrivateData(PreloadHint);
        segPumpEnsureMediaSegmentURLs(PreloadHint, v21, v22);
        if (MediaFilePrivateData[2])
        {
          int v24 = (const void *)FigMediaPlaylistGetPreloadHint(*(void *)(v6 + 56));
          CFURLRef v26 = *(const __CFURL **)(v6 + 16);
          CFURLRef v25 = *(const __CFURL **)(v6 + 24);
          uint64_t v27 = segPumpGetMediaFilePrivateData(v24);
          segPumpEnsureMediaSegmentURLs(v24, v26, v25);
          uint64_t v19 = v27[2];
        }
      }
      uint64_t result = segPumpCustomURLLoaderGetURLGuts(a1, v19, 0, 0, 0, 1, 0, 0, 0, 0, 0, a1 + 8624);
    }
    else
    {
      uint64_t result = *(void *)(a1 + 40);
      if (!result)
      {
LABEL_38:
        *(void *)(a1 + 8600) = v7;
        return result;
      }
      uint64_t result = FigHTTPRequestSessionSendPingWithPongHandler(result, *(void *)(a1 + 56), *(void *)(a1 + 240), *(void *)(a1 + 64), *(void *)a1);
    }
    if (result) {
      return result;
    }
    goto LABEL_38;
  }
  return result;
}

void segPumpPublishPlaylistRequestEvent(uint64_t a1, uint64_t a2, const void *a3, void *a4, uint64_t a5, uint64_t a6, const void *a7, char a8, char a9)
{
  CFTypeRef v39 = 0;
  uint64_t v40 = 0;
  CFAbsoluteTime v37 = 0.0;
  CFAbsoluteTime v38 = 0.0;
  CFAbsoluteTime v35 = 0.0;
  CFAbsoluteTime v36 = 0.0;
  uint64_t v33 = 0;
  CFTypeRef cf = 0;
  uint64_t v32 = 0;
  if (a5)
  {
    FigCFDictionaryGetDoubleIfPresent();
    FigCFDictionaryGetDoubleIfPresent();
    FigCFDictionaryGetDoubleIfPresent();
    FigCFDictionaryGetDoubleIfPresent();
  }
  if (a6)
  {
    uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
    uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v17) {
      uint64_t v18 = v17;
    }
    else {
      uint64_t v18 = 0;
    }
    uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v18 + 48);
    if (v19) {
      v19(a6, 0x1EE57B798, AllocatorForMedia, &cf);
    }
    uint64_t v20 = FigGetAllocatorForMedia();
    uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v21) {
      uint64_t v22 = v21;
    }
    else {
      uint64_t v22 = 0;
    }
    int v23 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v22 + 48);
    if (v23) {
      v23(a6, 0x1EE57B7D8, v20, &v39);
    }
    FigCFDictionaryGetInt64IfPresent();
    FigCFDictionaryGetInt64IfPresent();
  }
  int v24 = (void *)(*(void *)(a2 + 16 * *(void *)(a2 + 8416) + 384) + 680);
  while (1)
  {
    int v24 = (void *)*v24;
    if (!v24) {
      break;
    }
    CFDataRef v25 = (const __CFData *)v24[22];
    if (v25) {
      goto LABEL_20;
    }
  }
  CFDataRef v25 = 0;
LABEL_20:
  CFDataRef v26 = FigCFHTTPCreateAddressString(v25);
  CFAllocatorRef v27 = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFIndex v28 = *(const void **)(a2 + 224);
  if (*a4 > 2uLL) {
    int v29 = 0;
  }
  else {
    int v29 = *(_DWORD *)&aEdivnuosltbs[4 * *a4];
  }
  long long v30 = *MEMORY[0x1E4F1F9F8];
  uint64_t v31 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  FigMetricHLSPlaylistRequestEventCreate(v27, a3, v26, &v30, 0, v28, v33, v32, v38, v37, v36, v35, a9, a7, cf, v29, a8, &v40);
  segPumpPublishMetricEvent(a1, a2, v40);
  if (cf) {
    CFRelease(cf);
  }
  if (v39) {
    CFRelease(v39);
  }
  if (v26) {
    CFRelease(v26);
  }
  if (v40) {
    CFRelease(v40);
  }
}

void segPumpSendPlaylistUpdateNotification(void *a1)
{
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  FigCFDictionarySetCMTime();
  FigCFDictionarySetCMTime();
  segPumpReadyNotification(a1, @"FBP_PlaylistUpdateNotification", Mutable);
  CFRelease(Mutable);
}

uint64_t segPumpCopyIndexFileFromCache(uint64_t a1, unsigned int *a2, int a3, CFTypeRef *a4, CFTypeRef *a5, CFTypeRef *a6)
{
  CFTypeRef v33 = 0;
  CFTypeRef v34 = 0;
  CFStringRef v31 = 0;
  CFTypeRef cf2 = 0;
  if (!a4) {
    goto LABEL_73;
  }
  uint64_t v12 = *(void *)(a1 + 296);
  *a4 = 0;
  if (a5) {
    *a5 = 0;
  }
  CFStringRef URLString = 0;
  CFTypeRef cf = 0;
  uint64_t v13 = *(void *)(a1 + 304);
  if (!v13)
  {
LABEL_22:
    if (v12)
    {
      if (v33)
      {
        CFRelease(v33);
        CFTypeRef v33 = 0;
      }
      if (cf2)
      {
        CFRelease(cf2);
        CFTypeRef cf2 = 0;
      }
      if (a3)
      {
        uint64_t v18 = FigStreamingCacheCopyMasterPlaylist(*(void *)(a1 + 296), (unint64_t)&v34, (unint64_t)&v33);
        if (v18
          || (uint64_t v18 = FigStreamingCacheCopyStreamNetworkURL(*(void *)(a1 + 296), (CFURLRef *)&cf2), v18))
        {
LABEL_72:
          uint64_t v15 = v18;
          goto LABEL_56;
        }
      }
      else if (!*(unsigned char *)(a1 + 8712) || *(unsigned char *)(a1 + 7996))
      {
        uint64_t v19 = *((void *)a2 + 8);
        if (v19) {
          goto LABEL_37;
        }
        CacheForStreaCFIndex m = segPumpCreateCacheForStream(a1, (uint64_t)a2);
        if (*(unsigned char *)(a1 + 8216))
        {
          uint64_t v15 = CacheForStream;
          if (CacheForStream) {
            goto LABEL_56;
          }
        }
        uint64_t v19 = *((void *)a2 + 8);
        if (v19)
        {
LABEL_37:
          uint64_t v18 = FigStreamingCacheMediaStreamCopyPlaylist(*(void *)(a1 + 296), v19, (unint64_t)&v34, (unint64_t)&v33);
          if (v18) {
            goto LABEL_72;
          }
          uint64_t v18 = FigStreamingCacheMediaStreamCopyNetworkURL(*(void *)(a1 + 296), *((void *)a2 + 8), &v31);
          if (v18) {
            goto LABEL_72;
          }
          CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
          CFTypeRef cf2 = CFURLCreateWithString(AllocatorForMedia, v31, 0);
          if (!cf2) {
            goto LABEL_73;
          }
        }
      }
    }
LABEL_40:
    if (v33 && FigCFHTTPCompareURLs(*((const void **)a2 + 3), cf2))
    {
      CFStringRef Value = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)v33, @"URL");
      if (Value)
      {
        CFAllocatorRef v23 = (const __CFAllocator *)FigGetAllocatorForMedia();
        CFURLRef v24 = CFURLCreateWithString(v23, Value, 0);
        if (v24)
        {
          CFStringRef Value = (const __CFString *)v24;
          if (!FigCFHTTPCompareURLs(*((const void **)a2 + 2), v24))
          {
            CFDataRef v25 = (const void *)*((void *)a2 + 2);
            *((void *)a2 + 2) = Value;
            CFRetain(Value);
            if (v25) {
              CFRelease(v25);
            }
          }
          goto LABEL_48;
        }
LABEL_73:
        uint64_t v15 = FigSignalErrorAt();
        if (v15) {
          goto LABEL_56;
        }
        CFStringRef Value = 0;
        goto LABEL_49;
      }
    }
    else
    {
      CFStringRef Value = 0;
    }
LABEL_48:
    if (!v34)
    {
      SavedEntry = segPumpFindSavedEntry(a1, *((const void **)a2 + 3), 0, 0);
      if (SavedEntry)
      {
        CFIndex v28 = SavedEntry;
        segPumpCreateIndexFileBBFromSavedIndexFile(a1, (uint64_t)SavedEntry, &v34);
        CFTypeRef v29 = cf2;
        long long v30 = (const void *)v28[1];
        CFTypeRef cf2 = v30;
        if (v30) {
          CFRetain(v30);
        }
        if (v29) {
          CFRelease(v29);
        }
      }
    }
LABEL_49:
    *a4 = v34;
    CFTypeRef v34 = 0;
    if (a5)
    {
      *a5 = v33;
      CFTypeRef v33 = 0;
    }
    if (a6)
    {
      *a6 = cf2;
      CFTypeRef cf2 = 0;
    }
    if (Value) {
      CFRelease(Value);
    }
    uint64_t v15 = 0;
    goto LABEL_56;
  }
  if (a3)
  {
    uint64_t v14 = FigStreamingCacheCopyMasterPlaylist(v13, (unint64_t)&v34, (unint64_t)&v33);
    if (!v14) {
      uint64_t v14 = FigStreamingCacheCopyStreamNetworkURL(*(void *)(a1 + 304), (CFURLRef *)&cf2);
    }
    uint64_t v15 = v14;
    goto LABEL_18;
  }
  uint64_t v35 = 0;
  uint64_t v16 = segPumpCreateURLAndString(*((const void **)a2 + 3), 0, &cf);
  if (!v16)
  {
    uint64_t v16 = FigStreamingCacheCreateMediaStream(*(void *)(a1 + 304), *a2, (__CFDictionary *)cf, *((const void **)a2 + 4), 0, 0, &v35);
    if (!v16)
    {
      if (!v35)
      {
LABEL_15:
        uint64_t v15 = 0;
        goto LABEL_16;
      }
      uint64_t v16 = FigStreamingCacheMediaStreamCopyPlaylist(*(void *)(a1 + 304), v35, (unint64_t)&v34, (unint64_t)&v33);
      if (!v16)
      {
        uint64_t v16 = FigStreamingCacheMediaStreamCopyNetworkURL(*(void *)(a1 + 304), v35, &URLString);
        if (!v16)
        {
          CFAllocatorRef v17 = (const __CFAllocator *)FigGetAllocatorForMedia();
          CFTypeRef cf2 = CFURLCreateWithString(v17, URLString, 0);
          if (cf2) {
            goto LABEL_15;
          }
          uint64_t v16 = FigSignalErrorAt();
        }
      }
    }
  }
  uint64_t v15 = v16;
LABEL_16:
  if (cf) {
    CFRelease(cf);
  }
LABEL_18:
  if (URLString) {
    CFRelease(URLString);
  }
  if (!v15)
  {
    if (v34) {
      goto LABEL_40;
    }
    goto LABEL_22;
  }
LABEL_56:
  if (v34) {
    CFRelease(v34);
  }
  if (v33) {
    CFRelease(v33);
  }
  if (cf2) {
    CFRelease(cf2);
  }
  if (v31) {
    CFRelease(v31);
  }
  return v15;
}

uint64_t segPumpModifyErrorActionIfCurrentAlternateIsLastValidAlternate(uint64_t result, void *a2, uint64_t *a3, void *a4)
{
  if ((unint64_t)(*a3 - 7) <= 1)
  {
    if (!*(void *)(result + 8096)
      || (uint64_t result = segPumpIsAlternateLastValidAlternate(result, a2, *(void *)(result + 8144), (*(unsigned __int8 *)a4 >> 2) & 1), result))
    {
      uint64_t v6 = 3;
      if ((*a4 & 3) == 1) {
        uint64_t v6 = 6;
      }
      *a3 = v6;
    }
  }
  return result;
}

uint64_t segPumpCreateCacheForStream(uint64_t a1, uint64_t a2)
{
  CFTypeRef cf = 0;
  MediaStreaCFIndex m = segPumpCreateURLAndString(*(const void **)(a2 + 24), 0, &cf);
  if (MediaStream) {
    goto LABEL_11;
  }
  uint64_t v5 = *(void *)(a1 + 8144);
  uint64_t v6 = *(void *)a2;
  BOOL v7 = v5 && v6 == 0;
  int v8 = v7 ? *(_DWORD *)(v5 + 28) : 0;
  *(void *)(a2 + 64) = 0;
  uint64_t v9 = (void *)(a2 + 64);
  MediaStreaCFIndex m = FigStreamingCacheCreateMediaStream(*(void *)(a1 + 296), v6, (__CFDictionary *)cf, (const void *)*(v9 - 4), v8, v6 == 2, v9);
  if (MediaStream) {
    goto LABEL_11;
  }
  if (*(unsigned char *)(a1 + 8011))
  {
    MediaStreaCFIndex m = FigStreamingCacheMediaStreamSetPersistent(*(void *)(a1 + 296), (unsigned char *)*v9, *MEMORY[0x1E4F1CFD0]);
LABEL_11:
    uint64_t v10 = MediaStream;
    goto LABEL_13;
  }
  uint64_t v10 = 0;
LABEL_13:
  if (cf) {
    CFRelease(cf);
  }
  return v10;
}

void *segPumpFindSavedEntry(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void **)(a1 + 352);
  if (v4)
  {
    while (*((void *)v4 + 3) != a3
         || *((void *)v4 + 4) != a4
         || !FigCFHTTPCompareURLs(a2, *((CFTypeRef *)v4 + 1)))
    {
      uint64_t v4 = *(void **)v4;
      if (!v4) {
        return v4;
      }
    }
    if (*((unsigned char *)v4 + 80))
    {
      uint64_t v10 = FigGetUpTimeNanoseconds() - *((void *)v4 + 9);
      unsigned int v11 = *(_DWORD *)(a1 + 8);
      double v12 = *(double *)(a1 + 344) - (double)v11;
      uint64_t v13 = *(_DWORD *)(a1 + 7944) * v11;
      if ((uint64_t)v12 > v13) {
        uint64_t v13 = (uint64_t)v12;
      }
      if (v10 >= 1000000000 * v13)
      {
        segPumpFreeSavedEntry(a1, (CFTypeRef *)v4);
        return 0;
      }
    }
  }
  return v4;
}

uint64_t segPumpCreateIndexFileBBFromSavedIndexFile(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  *a3 = 0;
  double v3 = *(const void **)(a2 + 16);
  if (v3)
  {
    uint64_t v4 = 0;
    *a3 = CFRetain(v3);
  }
  else
  {
    uint64_t v5 = malloc_type_malloc(*(void *)(a2 + 64), 0xD5C25CB5uLL);
    if (v5)
    {
      uint64_t v6 = v5;
      FigGzipDecompressMemory();
      FigGzipReset();
      free(v6);
      return 4294954651;
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return v4;
}

BOOL segPumpIsProtocolUsedByRequest(uint64_t a1, const __CFString *a2)
{
  CFDictionaryRef theDict = 0;
  if (!a1) {
    return 0;
  }
  uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  BOOL v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, CFDictionaryRef *))(v6 + 48);
  if (!v7 || v7(a1, 0x1EE57B6B8, AllocatorForMedia, &theDict)) {
    goto LABEL_10;
  }
  if (!theDict) {
    return 0;
  }
  CFStringRef Value = (const __CFString *)CFDictionaryGetValue(theDict, @"_kCFNTimingDataNetworkProtocolName");
  if (Value)
  {
    BOOL v9 = CFStringCompare(Value, a2, 1uLL) == kCFCompareEqualTo;
    goto LABEL_11;
  }
LABEL_10:
  BOOL v9 = 0;
LABEL_11:
  if (theDict) {
    CFRelease(theDict);
  }
  return v9;
}

BOOL segPumpCheckPriorityHeaderLowLatencyServerCompliance(uint64_t a1, int a2)
{
  CFTypeRef cf = 0;
  int v13 = 0;
  uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  BOOL v7 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v6 + 48);
  if (!v7) {
    return 0;
  }
  v7(a1, 0x1EE57B5F8, AllocatorForMedia, &cf);
  if (!cf) {
    return 0;
  }
  if (FigCFHTTPGetPriorityFromHTTPResponse((__CFHTTPMessage *)cf, &v13))
  {
    if (a2) {
      int v8 = 2;
    }
    else {
      int v8 = 1;
    }
    if (a2) {
      int v9 = 6;
    }
    else {
      int v9 = 1;
    }
    BOOL v11 = v13 >= v8 && v13 <= v9;
  }
  else
  {
    BOOL v11 = 0;
  }
  if (cf) {
    CFRelease(cf);
  }
  return v11;
}

uint64_t segPumpEnsureCacheForStreamPossiblyEndingStream(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  if (!*(void *)(DerivedStorage + 296)) {
    return 0;
  }
  uint64_t v5 = (unsigned char *)(DerivedStorage + 7996);
  if (*(unsigned char *)(DerivedStorage + 8712))
  {
    if (!*v5 || *(void *)(DerivedStorage + 384) != a2) {
      return 0;
    }
  }
  else if (!*(unsigned char *)(DerivedStorage + 7997))
  {
    return 0;
  }
  if (*(void *)(a2 + 64)) {
    return 0;
  }
  uint64_t result = segPumpCreateCacheForStream(DerivedStorage, a2);
  if (!v5[220]) {
    return 0;
  }
  if (result == -15642)
  {
    FigCreateErrorForOSStatus(4294951654, (CFErrorRef *)&cf);
    segPumpSendEndCallbackForActiveStream(a1, a2, cf);
    uint64_t result = (uint64_t)cf;
    if (cf)
    {
      CFRelease(cf);
      return 0;
    }
  }
  return result;
}

uint64_t segPumpSetPlaylistForStreamCache(uint64_t a1, uint64_t a2, const void *a3, const void *a4)
{
  uint64_t v5 = *(void *)(a1 + 296);
  if (v5)
  {
    BOOL v7 = *(void **)(a2 + 64);
    if (v7)
    {
      uint64_t v8 = FigStreamingCacheMediaStreamSetPlaylist(v5, v7, a3, a4);
      if (v8) {
        return v8;
      }
      CFTypeRef v9 = FigCFHTTPCreateURLString(*(const __CFURL **)(a2 + 24));
      if (v9)
      {
        uint64_t v10 = v9;
        uint64_t v11 = FigStreamingCacheMediaStreamSetNetworkURL(*(void *)(a1 + 296), *(void *)(a2 + 64), v9);
        if (!v11) {
          *(unsigned char *)(a2 + 538) = 0;
        }
        CFRelease(v10);
        return v11;
      }
    }
  }

  return FigSignalErrorAt();
}

uint64_t segPumpSaveEntry(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, CMBlockBufferRef theBuffer, const void *a6, int a7, char a8, uint64_t a9)
{
  char *returnedPointerOut;
  uint64_t vars8;

  if (!theBuffer || !CMBlockBufferGetDataLength(theBuffer) || segPumpFindSavedEntry(a1, a2, a3, a4)) {
    return 0;
  }
  CFAllocatorRef v17 = malloc_type_calloc(1uLL, 0x58uLL, 0x1070040389C493CuLL);
  if (v17)
  {
    uint64_t v18 = v17;
    v17[1] = CFRetain(a2);
    v18[9] = a9;
    *((unsigned char *)v18 + 80) = a8;
    v18[8] = CMBlockBufferGetDataLength(theBuffer);
    v18[3] = a3;
    v18[4] = a4;
    if (a6) {
      CFTypeRef v19 = CFRetain(a6);
    }
    else {
      CFTypeRef v19 = 0;
    }
    returnedPointerOut = 0;
    v18[5] = v19;
    if (a7)
    {
      if (!*(void *)(a1 + 8808))
      {
        uint64_t v20 = FigGzipCreate();
        if (v20)
        {
          uint64_t v28 = v20;
          goto LABEL_30;
        }
      }
      uint64_t v21 = malloc_type_malloc(v18[8], 0xFFE1382FuLL);
      if (!v21)
      {
        uint64_t v28 = 4294954510;
        goto LABEL_30;
      }
      uint64_t v22 = v21;
      uint64_t v23 = CMBlockBufferAccessDataBytes(theBuffer, 0, v18[8], v21, &returnedPointerOut);
      if (v23)
      {
        uint64_t v28 = v23;
      }
      else
      {
        CFURLRef v24 = malloc_type_malloc(v18[8], 0x4DC757uLL);
        if (v24)
        {
          CFDataRef v25 = v24;
          int v26 = FigGzipCompressMemory();
          FigGzipReset();
          if (!v26)
          {
            CFAllocatorRef v27 = malloc_type_malloc(0, 0x57AD24D1uLL);
            v18[6] = v27;
            if (!v27)
            {
              char v29 = 0;
              uint64_t v28 = 4294954510;
              goto LABEL_21;
            }
            v18[7] = 0;
          }
LABEL_18:
          if (!v18[6]) {
            v18[2] = CFRetain(theBuffer);
          }
          uint64_t v28 = 0;
          *uint64_t v18 = 0;
          **(void **)(a1 + 360) = v18;
          *(void *)(a1 + 360) = v18;
          char v29 = 1;
LABEL_21:
          free(v25);
          free(v22);
          if (v29) {
            return 0;
          }
LABEL_30:
          CFStringRef v31 = (const void *)v18[1];
          if (v31) {
            CFRelease(v31);
          }
          free(v18);
          return v28;
        }
        uint64_t v28 = 4294954510;
      }
      free(v22);
      goto LABEL_30;
    }
    uint64_t v22 = 0;
    CFDataRef v25 = 0;
    goto LABEL_18;
  }

  return FigSignalErrorAt();
}

uint64_t segPumpEnsurePlaylistCache(uint64_t a1)
{
  if (*(void *)(a1 + 304)) {
    return 0;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(*(CFAllocatorRef *)(a1 + 56), 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    CFDictionaryRef v3 = Mutable;
    CFDictionarySetValue(Mutable, @"FSC_Backing", @"FSC_MemoryBacking");
    uint64_t v4 = FigStreamingCacheCreate(*(const __CFAllocator **)(a1 + 56), *(const __CFURL **)(a1 + 312), v3, (uint64_t *)(a1 + 304));
    CFRelease(v3);
    return v4;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t segPumpGetNextMediaFileWithDate(uint64_t a1, double *a2)
{
  FigMediaPlaylistGetMediaSegmentSpecifiers(a1);
  FirstCFStringRef Value = FigCFArrayGetFirstValue();
  for (double i = 0.0; FirstValue; FirstValue = FigMediaSegmentSpecifierGetNextSegment(FirstValue))
  {
    if (FigMediaSegmentSpecifierGetDateStamp(FirstValue)
      && FigMediaSegmentSpecifierIsReadInCurrent(FirstValue))
    {
      break;
    }
    double i = i + FigMediaSegmentSpecifierGetTimeInSeconds(FirstValue);
  }
  if (a2) {
    *a2 = i;
  }
  return FirstValue;
}

void segPumpMarkMediaFileAsDelivered(uint64_t *a1, const void *a2)
{
  if (a2)
  {
    segPumpSetDeliveryStatusForMediaFileAndParts(a2, 1);
    if (FigMediaSegmentSpecifierGetType((uint64_t)a2) != 1
      && !FigMediaSegmentSpecifierIsFragment((uint64_t)a2))
    {
      a1[47] = FigMediaSegmentSpecifierGetMediaSequence((uint64_t)a2);
    }
    if ((const void *)a1[33] == a2)
    {
      uint64_t v6 = a1[32];
      if (v6)
      {
        if (!FigMediaSegmentSpecifierIsFragment(v6))
        {
          CFArrayRef PartialSegments = (const __CFArray *)FigMediaSegmentSpecifierGetPartialSegments(a1[32]);
          CFIndex v8 = 0;
          while (1)
          {
            CFIndex v9 = PartialSegments ? CFArrayGetCount(PartialSegments) : 0;
            if (v8 >= v9) {
              break;
            }
            CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(PartialSegments, v8++);
            if (!*((unsigned char *)segPumpGetMediaFilePrivateData(ValueAtIndex) + 73))
            {
              if (ValueAtIndex) {
                goto LABEL_6;
              }
              break;
            }
          }
          *((unsigned char *)segPumpGetMediaFilePrivateData((const void *)a1[32]) + 73) = 1;
          a1[47] = FigMediaSegmentSpecifierGetMediaSequence(a1[32]);
        }
      }
    }
LABEL_6:
    uint64_t v4 = (const void *)a1[32];
    if (v4 == a2 || (const void *)a1[33] == a2)
    {
      if (!v4) {
        goto LABEL_12;
      }
    }
    else if (!v4)
    {
      return;
    }
    CFRelease(v4);
    a1[32] = 0;
LABEL_12:
    uint64_t v5 = (const void *)a1[33];
    if (v5)
    {
      CFRelease(v5);
      a1[33] = 0;
    }
  }
}

uint64_t segPumpPlaylistRecalculatePumpTimeOffsets(uint64_t result, double a2)
{
  if (result)
  {
    uint64_t v3 = result;
    CFIndex v4 = 0;
    double v5 = 0.0;
    while (1)
    {
      CFArrayRef MediaSegmentSpecifiers = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(v3);
      if (MediaSegmentSpecifiers) {
        CFArrayRef MediaSegmentSpecifiers = (const __CFArray *)CFArrayGetCount(MediaSegmentSpecifiers);
      }
      if (v4 >= (uint64_t)MediaSegmentSpecifiers) {
        break;
      }
      CFArrayRef v7 = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(v3);
      CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v7, v4);
      MediaFilePrivateData = (double *)segPumpGetMediaFilePrivateData(ValueAtIndex);
      if (!*((unsigned char *)MediaFilePrivateData + 96))
      {
        MediaFilePrivateData[4] = a2;
        CFArrayRef PartialSegments = (const __CFArray *)FigMediaSegmentSpecifierGetPartialSegments((uint64_t)ValueAtIndex);
        CFIndex v11 = 0;
        double v5 = 0.0;
        if (PartialSegments)
        {
LABEL_8:
          CFIndex Count = CFArrayGetCount(PartialSegments);
          goto LABEL_10;
        }
        while (1)
        {
          CFIndex Count = 0;
LABEL_10:
          if (v11 >= Count) {
            break;
          }
          int v13 = CFArrayGetValueAtIndex(PartialSegments, v11);
          *((double *)segPumpGetMediaFilePrivateData(v13) + 4) = a2 + v5;
          double v5 = v5 + FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)v13);
          ++v11;
          if (PartialSegments) {
            goto LABEL_8;
          }
        }
        a2 = a2 + FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)ValueAtIndex);
      }
      ++v4;
    }
    uint64_t result = FigMediaPlaylistGetPreloadHint(v3);
    if (result)
    {
      uint64_t PreloadHint = FigMediaPlaylistGetPreloadHint(v3);
      uint64_t result = FigMediaSegmentSpecifierIsReadInCurrent(PreloadHint);
      if (result)
      {
        FigMediaPlaylistGetMediaSegmentSpecifiers(v3);
        if (FigCFArrayGetLastValue())
        {
          FigMediaPlaylistGetMediaSegmentSpecifiers(v3);
          LastCFStringRef Value = FigCFArrayGetLastValue();
          a2 = a2 - FigMediaSegmentSpecifierGetTimeInSeconds(LastValue);
        }
        uint64_t v16 = (const void *)FigMediaPlaylistGetPreloadHint(v3);
        uint64_t result = (uint64_t)segPumpGetMediaFilePrivateData(v16);
        *(double *)(result + 32) = v5 + a2;
      }
    }
  }
  return result;
}

uint64_t segPumpSetupCommonCryptKeyDataForSessionKeys(uint64_t a1, uint64_t a2)
{
  CFTypeRef cf = 0;
  uint64_t v19 = 0;
  if (!a2) {
    return 0;
  }
  int v4 = 0;
  for (CFIndex i = 0; ; ++i)
  {
    CFArrayRef ContentKeySpecifiers = (const __CFArray *)FigMultivariantPlaylistGetContentKeySpecifiers(a2);
    if (ContentKeySpecifiers) {
      CFArrayRef ContentKeySpecifiers = (const __CFArray *)CFArrayGetCount(ContentKeySpecifiers);
    }
    if (i >= (uint64_t)ContentKeySpecifiers) {
      break;
    }
    CFArrayRef v7 = (const __CFArray *)FigMultivariantPlaylistGetContentKeySpecifiers(a2);
    CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v7, i);
    uint64_t result = segPumpGetCryptKeyCommonData(ValueAtIndex, &v19, &cf);
    if (result) {
      return result;
    }
    if (cf)
    {
      int v4 = 0;
    }
    else
    {
      uint64_t CryptKeyCommonData = segPumpFindCryptKeyCommonData(a1, (uint64_t)ValueAtIndex);
      CFTypeRef cf = CryptKeyCommonData;
      if (CryptKeyCommonData)
      {
        int v4 = 0;
      }
      else
      {
        CFTypeRef cf = segPumpCreateCryptKeyCommonData(a1);
        if (!cf) {
          return FigSignalErrorAt();
        }
        CFStringRef Identifier = (const void *)FigContentKeySpecifierGetIdentifier((uint64_t)ValueAtIndex);
        if (Identifier) {
          CFStringRef Identifier = CFRetain(Identifier);
        }
        *((void *)cf + 2) = Identifier;
        KeySysteCFIndex m = FigContentKeySpecifierGetKeySystem((uint64_t)ValueAtIndex);
        *((_DWORD *)cf + 6) = KeySystem;
        int EncryptionMethod = FigContentKeySpecifierGetEncryptionMethod((uint64_t)ValueAtIndex);
        *((_DWORD *)cf + 7) = EncryptionMethod;
        char IsPrefetchKey = FigContentKeySpecifierGetIsPrefetchKey((uint64_t)ValueAtIndex);
        uint64_t CryptKeyCommonData = cf;
        *((unsigned char *)cf + 147) = IsPrefetchKey;
        int v4 = 1;
      }
      uint64_t v15 = *(const void **)(v19 + 16);
      *(void *)(v19 + 16) = CryptKeyCommonData;
      CFRetain(CryptKeyCommonData);
      if (v15) {
        CFRelease(v15);
      }
    }
    uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
    CFTypeRef v17 = cf;
    *((void *)cf + 21) = UpTimeNanoseconds;
    if (v4)
    {
      if (v17)
      {
        CFRelease(v17);
        CFTypeRef cf = 0;
      }
    }
  }
  if (!v4) {
    return 0;
  }
  uint64_t result = (uint64_t)cf;
  if (cf)
  {
    CFRelease(cf);
    return 0;
  }
  return result;
}

uint64_t segPumpSetupCommonCryptKeyData(uint64_t a1, uint64_t *a2, unsigned char *a3, uint64_t a4)
{
  CFTypeRef cf = 0;
  uint64_t v29 = 0;
  if (a3)
  {
    int v8 = 0;
    for (CFIndex i = 0; ; ++i)
    {
      CFArrayRef ContentKeySpecifiers = (const __CFArray *)FigMediaPlaylistGetContentKeySpecifiers(a2[7]);
      if (ContentKeySpecifiers) {
        CFArrayRef ContentKeySpecifiers = (const __CFArray *)CFArrayGetCount(ContentKeySpecifiers);
      }
      if (i >= (uint64_t)ContentKeySpecifiers) {
        break;
      }
      CFArrayRef v11 = (const __CFArray *)FigMediaPlaylistGetContentKeySpecifiers(a2[7]);
      CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v11, i);
      uint64_t result = segPumpGetCryptKeyCommonData(ValueAtIndex, &v29, &cf);
      if (result) {
        return result;
      }
      if (FigContentKeySpecifierGetIsReadInCurrent((uint64_t)ValueAtIndex)
        || FigContentKeySpecifierGetIsPrefetchKey((uint64_t)ValueAtIndex))
      {
        if (cf)
        {
          int v8 = 0;
        }
        else
        {
          uint64_t CryptKeyCommonData = segPumpFindCryptKeyCommonData(a1, (uint64_t)ValueAtIndex);
          CFTypeRef cf = CryptKeyCommonData;
          if (CryptKeyCommonData)
          {
            int v8 = 0;
          }
          else
          {
            CFTypeRef cf = segPumpCreateCryptKeyCommonData(a1);
            if (!cf) {
              return FigSignalErrorAt();
            }
            CFStringRef Identifier = (const void *)FigContentKeySpecifierGetIdentifier((uint64_t)ValueAtIndex);
            if (Identifier) {
              CFStringRef Identifier = CFRetain(Identifier);
            }
            *((void *)cf + 2) = Identifier;
            KeySysteCFIndex m = FigContentKeySpecifierGetKeySystem((uint64_t)ValueAtIndex);
            *((_DWORD *)cf + 6) = KeySystem;
            int EncryptionMethod = FigContentKeySpecifierGetEncryptionMethod((uint64_t)ValueAtIndex);
            *((_DWORD *)cf + 7) = EncryptionMethod;
            char IsPrefetchKey = FigContentKeySpecifierGetIsPrefetchKey((uint64_t)ValueAtIndex);
            uint64_t CryptKeyCommonData = cf;
            *((unsigned char *)cf + 147) = IsPrefetchKey;
            int v8 = 1;
          }
          uint64_t v19 = *(const void **)(v29 + 16);
          *(void *)(v29 + 16) = CryptKeyCommonData;
          CFRetain(CryptKeyCommonData);
          if (v19) {
            CFRelease(v19);
          }
        }
        uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
        uint64_t v21 = cf;
        *((void *)cf + 21) = UpTimeNanoseconds;
        if (a4) {
          v21[20] = *(void *)(a4 + 8);
        }
      }
      else
      {
        int v8 = 0;
      }
      if (!*(void *)(v29 + 16))
      {
        CryptKeyRemoveKeyFromPlaylist(a1, a3, ValueAtIndex);
        --i;
      }
      if (v8)
      {
        if (cf)
        {
          CFRelease(cf);
          CFTypeRef cf = 0;
        }
      }
    }
    for (CFIndex j = 0; ; ++j)
    {
      CFArrayRef Count = (const __CFArray *)FigMediaPlaylistGetContentKeySpecifiers((uint64_t)a3);
      if (Count) {
        CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
      }
      if (j >= (uint64_t)Count) {
        break;
      }
      CFArrayRef v24 = (const __CFArray *)FigMediaPlaylistGetContentKeySpecifiers(a2[7]);
      CFDataRef v25 = CFArrayGetValueAtIndex(v24, j);
      if (FigContentKeySpecifierGetIsPrefetchKey((uint64_t)v25))
      {
        FigContentKeySpecifierSetIsReadInCurrent((uint64_t)v25, 1);
      }
      else if (!FigContentKeySpecifierGetIsReadInCurrent((uint64_t)v25))
      {
        uint64_t v26 = *(void *)(a2[87] + 8);
        if (!v26 || v25 != (const void *)FigMediaSegmentSpecifierGetContentKeySpecifier(v26))
        {
          uint64_t v27 = a2[32];
          if (!v27 || v25 != (const void *)FigMediaSegmentSpecifierGetContentKeySpecifier(v27))
          {
            if (v25 == (const void *)a2[31]) {
              segPumpCancelCryptReadAndResetData(a1, (uint64_t)a2);
            }
            CryptKeyRemoveKeyFromPlaylist(a1, a3, v25);
            --j;
          }
        }
      }
    }
    if (v8)
    {
      uint64_t result = (uint64_t)cf;
      if (!cf) {
        return result;
      }
      CFRelease(cf);
    }
  }
  return 0;
}

void *segPumpStopPlaylistReadsAndResetAllData(uint64_t a1)
{
  if (dword_1E9351350)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  *(unsigned char *)(a1 + 376) = 1;
  *(unsigned char *)(a1 + 8005) = 0;
  uint64_t v3 = *(void *)(a1 + 296);
  if (v3) {
    FigStreamingCacheSetCacheTimeRange(v3, 0.0, 0.0);
  }
  for (uint64_t i = 384; i != 432; i += 16)
  {
    segPumpStopStream(a1, *(void *)(a1 + i), 0);
    *(unsigned char *)(*(void *)(a1 + i) + 1169) = 1;
  }
  for (uint64_t j = 384; j != 432; j += 16)
  {
    uint64_t v6 = *(void *)(a1 + j);
    if ((*(_DWORD *)(v6 + 160) - 2) <= 2) {
      *(_DWORD *)(v6 + 160) = 1;
    }
  }
  return segPumpReadyNotification((void *)a1, @"FBPAL_SeekableTimeRangeChanged", 0);
}

void segPumpSetMediaFileExpireTimer(uint64_t a1, double a2)
{
  double v2 = a2;
  int v4 = *(NSObject **)(a1 + 7936);
  if (v4)
  {
    if (a2 == 8073216000.0)
    {
      FigHTTPRescheduleTimer(0.0, *(void *)(a1 + 64), v4);
      double v2 = 8073216000.0;
    }
    else
    {
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      FigHTTPRescheduleTimer(v2 - Current, *(void *)(a1 + 64), *(NSObject **)(a1 + 7936));
    }
  }
  else
  {
    CFAbsoluteTime v5 = CFAbsoluteTimeGetCurrent();
    FigHTTPCreateTimer(*(const void **)a1, (uint64_t)segPumpMediaExpiryTimerCallback, *(NSObject **)(a1 + 64), (dispatch_object_t *)(a1 + 7936), v2 - v5);
  }
  *(double *)(a1 + 7928) = v2;
}

uint64_t segPumpAddFigAlternate(uint64_t a1, const void *a2)
{
  int v4 = malloc_type_calloc(1uLL, 0x28uLL, 0x102004000B479F3uLL);
  if (v4)
  {
    CFAbsoluteTime v5 = v4;
    if (a2) {
      CFTypeRef v6 = CFRetain(a2);
    }
    else {
      CFTypeRef v6 = 0;
    }
    v5[1] = v6;
    int PeakBitRate = FigAlternateGetPeakBitRate((uint64_t)a2);
    *((_DWORD *)v5 + 6) = PeakBitRate;
    *((_DWORD *)v5 + 7) = PeakBitRate;
    PathwayID = FigAlternateGetPathwayID(v5[1]);
    CFMutableDictionaryRef Mutable = *(__CFSet **)(a1 + 7912);
    if (Mutable
      || (CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia(),
          CFMutableDictionaryRef Mutable = CFSetCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D548]),
          (*(void *)(a1 + 7912) = Mutable) != 0))
    {
      CFSetAddValue(Mutable, PathwayID);
      *CFAbsoluteTime v5 = 0;
      **(void **)(a1 + 8104) = v5;
      *(void *)(a1 + 8104) = v5;
      return 0;
    }
    else
    {
      uint64_t v12 = FigSignalErrorAt();
      AlternateEntryFree(v5);
      return v12;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t segPumpInitAlternateSelectionBoss(uint64_t a1, uint64_t a2)
{
  uint64_t v92 = *MEMORY[0x1E4F143B8];
  CFArrayRef v75 = 0;
  CFArrayRef theArray = 0;
  uint64_t v73 = 0;
  CFTypeRef v74 = 0;
  v72[0] = 0;
  v72[1] = 0;
  if (!*(void *)(a2 + 9528)) {
    goto LABEL_10;
  }
  if (!*(void *)(a2 + 9536)) {
    *(void *)(a2 + 9536) = FigHTTPSchedulerRetain(*(dispatch_object_t *)(a2 + 64));
  }
  uint64_t updated = segPumpCreateFigAlternatesArrayAndCalculateStartupScore(a2, &theArray);
  if (updated) {
    goto LABEL_108;
  }
  if (!theArray)
  {
    uint64_t v7 = 0;
    goto LABEL_111;
  }
  if (CFArrayGetCount(theArray) < 1)
  {
LABEL_10:
    uint64_t v7 = 0;
    goto LABEL_109;
  }
  uint64_t v5 = *(void *)(a2 + 9552);
  if (v5) {
    CFTypeRef v6 = 0;
  }
  else {
    CFTypeRef v6 = segPumpContentSteeringAlternateListChangedCallback;
  }
  v72[0] = v6;
  uint64_t v73 = segPumpContentSteeringAlternatesAddedCallback;
  CFTypeRef v81 = 0;
  int v80 = 0;
  CFTypeRef cf = 0;
  if (v5) {
    goto LABEL_77;
  }
  if (!*(void *)(a2 + 9528))
  {
    if (dword_1E9351350)
    {
      unsigned int v78 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v63 = v78;
      if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type)) {
        unsigned int v64 = v63;
      }
      else {
        unsigned int v64 = v63 & 0xFFFFFFFE;
      }
      if (v64)
      {
        uint64_t v65 = &stru_1EE53F4B8;
        if (*(void *)(a2 + 8760)) {
          uint64_t v65 = *(__CFString **)(a2 + 8760);
        }
        int v82 = 136315394;
        uint64_t v83 = "segPumpInitContentSteeringMonitor";
        __int16 v84 = 2114;
        uint64_t v85 = v65;
        _os_log_send_and_compose_impl();
      }
      goto LABEL_137;
    }
LABEL_138:
    CFTypeRef v17 = 0;
    CFArrayRef v29 = 0;
    CFIndex v9 = 0;
    goto LABEL_59;
  }
  uint64_t v8 = *(void *)(a2 + 384);
  if (!v8)
  {
    uint64_t v16 = FigSignalErrorAt();
LABEL_125:
    uint64_t v7 = v16;
    CFTypeRef v17 = 0;
    goto LABEL_126;
  }
  CFIndex v9 = *(const void ***)(v8 + 48);
  if (!v9)
  {
    CFTypeRef v17 = 0;
    CFArrayRef v29 = 0;
LABEL_59:
    uint64_t v7 = 0;
    goto LABEL_65;
  }
  if (!FigMultivariantPlaylistGetContentSteeringServerURL(*(void *)(v8 + 48))
    || !*(void *)(a2 + 7912)
    || *(void *)(a2 + 9552))
  {
    goto LABEL_138;
  }
  if (!*(unsigned char *)(a2 + 7904))
  {
    if (dword_1E9351350)
    {
      unsigned int v78 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      uint64_t v66 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v67 = v78;
      if (os_log_type_enabled(v66, type)) {
        unsigned int v68 = v67;
      }
      else {
        unsigned int v68 = v67 & 0xFFFFFFFE;
      }
      if (v68)
      {
        unint64_t v69 = *(__CFString **)(a2 + 8760);
        if (!v69) {
          unint64_t v69 = &stru_1EE53F4B8;
        }
        uint64_t v70 = *(void *)v8;
        int v82 = 136315650;
        uint64_t v83 = "segPumpInitContentSteeringMonitor";
        __int16 v84 = 2114;
        uint64_t v85 = v69;
        __int16 v86 = 2048;
        uint64_t v87 = v70;
        _os_log_send_and_compose_impl();
      }
LABEL_137:
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      goto LABEL_138;
    }
    goto LABEL_138;
  }
  CFArrayRef Alternates = (const __CFArray *)FigMultivariantPlaylistGetAlternates((uint64_t)v9);
  if (FigPathwayValidateStableVariantAndRenditionIDs(Alternates))
  {
    segPumpAppendErrorLogEntry(a1, a2, v8, (const __CFURL **)(v8 + 408), -15625, @"CoreMediaErrorDomain", @"Stable Variant/Rendition ID validation failed", 0, 0, 6u, 3u);
    goto LABEL_138;
  }
  uint64_t v11 = *(void *)(a2 + 9048);
  if (v11)
  {
    uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v13 = v12 ? v12 : 0;
    uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v13 + 56);
    if (v14) {
      v14(v11, 0x1EE582B98, 0x1EE562418, 1, 0);
    }
  }
  if (*(unsigned char *)(a2 + 327)) {
    uint64_t v15 = 2;
  }
  else {
    uint64_t v15 = 3;
  }
  uint64_t v16 = segPumpAmendHTTPRequestFlags((unsigned char *)a2, &v80);
  if (v16) {
    goto LABEL_125;
  }
  CFTypeRef v17 = segPumpCopyHTTPRequestCreationsOptionsAndSetNWActivityAndStuff(0.5, *(void *)(a2 + 240), a2, (void *)v8, 0, 0);
  segPumpCopyParentNWActivity(a2, (void *)v8, &cf);
  if (!*(void *)(a2 + 40))
  {
    uint64_t v23 = *(void *)(a2 + 32);
    uint64_t v24 = *(void *)(a2 + 64);
    uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v25) {
      uint64_t v26 = v25;
    }
    else {
      uint64_t v26 = 0;
    }
    uint64_t v45 = *(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(v26 + 40);
    if (!v45)
    {
      CFArrayRef v29 = 0;
      CFIndex v9 = 0;
      uint64_t v7 = 4294954514;
      goto LABEL_65;
    }
    uint64_t v21 = v45(v23, v24, 0, a2 + 40);
    if (v21) {
      goto LABEL_63;
    }
  }
  CFAllocatorRef AllocatorForMedia = (void *)FigGetAllocatorForMedia();
  ContentSteeringServerCFURLRef URL = (const void *)FigMultivariantPlaylistGetContentSteeringServerURL((uint64_t)v9);
  ContentSteeringInitPathwayID = (const void *)FigMultivariantPlaylistGetContentSteeringInitPathwayID((uint64_t)v9);
  uint64_t v21 = FigAlternateFilterMonitorCreateForContentSteering(AllocatorForMedia, ContentSteeringServerURL, ContentSteeringInitPathwayID, *(const __CFSet **)(a2 + 7912), *(void *)(a2 + 88), v15, v80, *(const void **)(a2 + 216), v17, cf, *(CFTypeRef *)(a2 + 40), *(const void **)(a2 + 80), *(unsigned char *)(a2 + 339), &v81);
  if (v21)
  {
LABEL_63:
    uint64_t v7 = v21;
LABEL_126:
    CFArrayRef v29 = 0;
    CFIndex v9 = 0;
    goto LABEL_65;
  }
  segPumpSetContentSteeringMonitor(a2, v81);
  if (CFSetGetCount(*(CFSetRef *)(a2 + 7912)) < 1)
  {
    CFIndex v9 = 0;
  }
  else
  {
    CFIndex Count = CFSetGetCount(*(CFSetRef *)(a2 + 7912));
    CFIndex v9 = (const void **)malloc_type_malloc(8 * Count, 0xC0040B8AA526DuLL);
    CFSetGetValues(*(CFSetRef *)(a2 + 7912), v9);
  }
  CFAllocatorRef v27 = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFIndex v28 = CFSetGetCount(*(CFSetRef *)(a2 + 7912));
  CFArrayRef v29 = CFArrayCreate(v27, v9, v28, MEMORY[0x1E4F1D510]);
  uint64_t v30 = *(void *)(a2 + 9048);
  if (v30)
  {
    uint64_t v31 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v32 = v31 ? v31 : 0;
    CFTypeRef v33 = *(void (**)(uint64_t, uint64_t, uint64_t, CFArrayRef, void))(v32 + 48);
    if (v33) {
      v33(v30, 0x1EE582B98, 0x1EE562438, v29, 0);
    }
  }
  uint64_t v34 = *(void *)(a2 + 9552);
  uint64_t v35 = *(void *)(a2 + 9048);
  uint64_t v36 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v36) {
    uint64_t v37 = v36;
  }
  else {
    uint64_t v37 = 0;
  }
  CFAbsoluteTime v38 = *(void (**)(uint64_t, __CFString *, uint64_t))(v37 + 56);
  if (v38) {
    v38(v34, @"AlternateFilterMonitorProperty_ReportingAgent", v35);
  }
  uint64_t v7 = FigAlternateSelectionBossAddMonitor(*(const void **)(a2 + 9528), *(const void **)(a2 + 9552));
  if (!v7 && dword_1E9351350)
  {
    unsigned int v78 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    CFTypeRef v39 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v40 = v78;
    if (os_log_type_enabled(v39, type)) {
      unsigned int v41 = v40;
    }
    else {
      unsigned int v41 = v40 & 0xFFFFFFFE;
    }
    if (v41)
    {
      uint64_t v42 = *(__CFString **)(a2 + 8760);
      if (!v42) {
        uint64_t v42 = &stru_1EE53F4B8;
      }
      uint64_t v43 = *(void *)v8;
      CFIndex v44 = *(void *)(a2 + 9552);
      int v82 = 136315906;
      uint64_t v83 = "segPumpInitContentSteeringMonitor";
      __int16 v84 = 2114;
      uint64_t v85 = v42;
      __int16 v86 = 2048;
      uint64_t v87 = v43;
      __int16 v88 = 2048;
      CFIndex v89 = v44;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_59;
  }
LABEL_65:
  if (cf) {
    CFRelease(cf);
  }
  if (v17) {
    CFRelease(v17);
  }
  if (v81) {
    CFRelease(v81);
  }
  if (v29) {
    CFRelease(v29);
  }
  if (v9) {
    free(v9);
  }
  if (v7) {
    goto LABEL_109;
  }
  uint64_t v5 = *(void *)(a2 + 9552);
  if (!v5)
  {
LABEL_83:
    uint64_t updated = segPumpUpdateBytesRequiredForNetworkPrediction(a2);
    if (!updated)
    {
      uint64_t updated = FigAlternateSelectionBossInitializeAlternateList(*(void **)(a2 + 9528), theArray, *(const __CFArray **)(a2 + 8376), (const __CFArray *)v74, (CFTypeRef *)&v75);
      if (!updated)
      {
        if (dword_1E9351350)
        {
          LODWORD(v81) = 0;
          LOBYTE(cf) = 0;
          int v52 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v53 = v81;
          if (os_log_type_enabled(v52, (os_log_type_t)cf)) {
            unsigned int v54 = v53;
          }
          else {
            unsigned int v54 = v53 & 0xFFFFFFFE;
          }
          if (v54)
          {
            if (*(void *)(a2 + 8760)) {
              uint64_t v55 = *(__CFString **)(a2 + 8760);
            }
            else {
              uint64_t v55 = &stru_1EE53F4B8;
            }
            uint64_t v56 = *(void *)(a2 + 9528);
            if (theArray) {
              CFIndex v57 = CFArrayGetCount(theArray);
            }
            else {
              CFIndex v57 = 0;
            }
            CFIndex v58 = (CFIndex)v75;
            if (v75) {
              CFIndex v58 = CFArrayGetCount(v75);
            }
            int v82 = 136316162;
            uint64_t v83 = "segPumpInitAlternateSelectionBoss";
            __int16 v84 = 2114;
            uint64_t v85 = v55;
            __int16 v86 = 2048;
            uint64_t v87 = v56;
            __int16 v88 = 2048;
            CFIndex v89 = v57;
            __int16 v90 = 2048;
            CFIndex v91 = v58;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        uint64_t v59 = *(const void **)(a2 + 9568);
        if (v59)
        {
          CFRelease(v59);
          *(void *)(a2 + 9568) = 0;
        }
        uint64_t v60 = FigGetAllocatorForMedia();
        uint64_t updated = FigAlternatePassthroughFilterCreate(v60, @"EligibleCandidatesForPlaybackPassThrough", 877, (void *)(a2 + 9568));
        if (!updated)
        {
          uint64_t updated = FigAlternateSelectionBossAddFilter(*(void *)(a2 + 9528), *(const void **)(a2 + 9568));
          if (!updated)
          {
            uint64_t updated = segPumpUpdateAlternateSelectionBossNetworkErrorFilter((void *)a2, 0);
            if (!updated) {
              uint64_t updated = segPumpAddNewAlternatesToValidAlternatesQueue(a2, v75);
            }
          }
        }
      }
    }
    goto LABEL_108;
  }
LABEL_77:
  uint64_t v46 = FigGetAllocatorForMedia();
  uint64_t v47 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v47) {
    uint64_t v48 = v47;
  }
  else {
    uint64_t v48 = 0;
  }
  uint64_t v49 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v48 + 48);
  if (!v49)
  {
    uint64_t v7 = 4294954514;
    goto LABEL_109;
  }
  uint64_t updated = v49(v5, @"AlternateFilterMonitorProperty_Expanders", v46, &v74);
  if (!updated)
  {
    CFIndex v50 = *(const void **)(a2 + 9528);
    uint64_t v51 = *(void *)a2;
    __copy_constructor_8_8_pa0_38126_0_pa0_35993_8_pa0_4849_16(v71, v72);
    uint64_t updated = FigAlternateSelectionBossAddDelegate(v50, v51, v71, 0);
    if (!updated) {
      goto LABEL_83;
    }
  }
LABEL_108:
  uint64_t v7 = updated;
LABEL_109:
  if (theArray) {
    CFRelease(theArray);
  }
LABEL_111:
  if (v75) {
    CFRelease(v75);
  }
  if (v74) {
    CFRelease(v74);
  }
  return v7;
}

uint64_t segPumpReadNextCryptKeyForStream(uint64_t a1, uint64_t a2, void *a3)
{
  if (a3[31]) {
    return 0;
  }
  uint64_t v6 = a3[6];
  if (v6)
  {
    CFArrayRef ContentKeySpecifiers = (const __CFArray *)FigMultivariantPlaylistGetContentKeySpecifiers(v6);
    CFIndex v8 = 0;
    while (1)
    {
      CFIndex v9 = ContentKeySpecifiers ? CFArrayGetCount(ContentKeySpecifiers) : 0;
      if (v8 >= v9) {
        break;
      }
      CFStringRef ValueAtIndex = (const void *)FigCFArrayGetValueAtIndex();
      ++v8;
      if (segPumpDoesCryptKeyRequireFetch(ValueAtIndex)) {
        goto LABEL_37;
      }
    }
  }
  if (!a3[7]) {
    return 0;
  }
  uint64_t v11 = a3[32];
  if (!v11
    || !FigMediaSegmentSpecifierGetContentKeySpecifier(v11)
    || (CFStringRef ValueAtIndex = (const void *)FigMediaSegmentSpecifierGetContentKeySpecifier(a3[32]),
        !segPumpDoesCryptKeyRequireFetch(ValueAtIndex))
    || !ValueAtIndex)
  {
    int v12 = 0;
    for (uint64_t i = 0; ; ++i)
    {
      CFArrayRef Count = (const __CFArray *)FigMediaPlaylistGetContentKeySpecifiers(a3[7]);
      if (Count) {
        CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
      }
      if (i >= (uint64_t)Count) {
        break;
      }
      FigMediaPlaylistGetContentKeySpecifiers(a3[7]);
      CFStringRef ValueAtIndex = (const void *)FigCFArrayGetValueAtIndex();
      uint64_t v21 = 0;
      uint64_t v22 = 0;
      uint64_t result = segPumpGetCryptKeyCommonData(ValueAtIndex, &v22, &v21);
      if (result) {
        return result;
      }
      if (segPumpDoesCryptKeyRequireFetch(ValueAtIndex) && segPumpStreamWaitingForCryptKey(a2, a3, v21)) {
        goto LABEL_26;
      }
      if (segPumpDoesCryptKeyRequireFetch(ValueAtIndex)) {
        int v12 = 1;
      }
    }
    CFStringRef ValueAtIndex = 0;
LABEL_26:
    if (!ValueAtIndex && v12)
    {
      CFStringRef ValueAtIndex = 0;
      for (CFIndex j = 0; ; ++j)
      {
        CFArrayRef MediaSegmentSpecifiers = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(a3[7]);
        if (MediaSegmentSpecifiers) {
          CFArrayRef MediaSegmentSpecifiers = (const __CFArray *)CFArrayGetCount(MediaSegmentSpecifiers);
        }
        if (j >= (uint64_t)MediaSegmentSpecifiers) {
          break;
        }
        CFArrayRef v18 = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(a3[7]);
        uint64_t v19 = CFArrayGetValueAtIndex(v18, j);
        if (!*((unsigned char *)segPumpGetMediaFilePrivateData(v19) + 73))
        {
          if (FigMediaSegmentSpecifierGetContentKeySpecifier((uint64_t)v19))
          {
            if ((const void *)FigMediaSegmentSpecifierGetContentKeySpecifier((uint64_t)v19) != ValueAtIndex)
            {
              CFStringRef ValueAtIndex = (const void *)FigMediaSegmentSpecifierGetContentKeySpecifier((uint64_t)v19);
              if (segPumpDoesCryptKeyRequireFetch(ValueAtIndex)) {
                goto LABEL_37;
              }
            }
          }
        }
      }
      return 0;
    }
LABEL_37:
    if (!ValueAtIndex) {
      return 0;
    }
  }
  uint64_t v20 = (const void *)a3[31];
  a3[31] = ValueAtIndex;
  CFRetain(ValueAtIndex);
  if (v20) {
    CFRelease(v20);
  }
  return segPumpSendCryptKeyRequest(a1, a2, a3, a3[31]);
}

double segPumpSetTargetDurationAndType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(_DWORD *)(a2 + 8);
  if (v6 != FigMediaPlaylistGetTargetDuration(a3))
  {
    int TargetDuration = FigMediaPlaylistGetTargetDuration(a3);
    *(_DWORD *)(a2 + 8) = TargetDuration;
    if (*(void *)(a2 + 9560))
    {
      double valuePtr = (double)(2 * TargetDuration);
      CFNumberRef v9 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberDoubleType, &valuePtr);
      uint64_t v10 = *(void *)(a2 + 9560);
      uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v11) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = 0;
      }
      uint64_t v13 = *(void (**)(uint64_t, __CFString *, CFNumberRef))(v12 + 56);
      if (v13) {
        v13(v10, @"AfmfpbProperty_SwitchMinDuration", v9);
      }
      if (v9) {
        CFRelease(v9);
      }
    }
    *(_DWORD *)(a2 + 24) = FigMediaPlaylistGetPlaylistType(a3);
    double v14 = *(double *)(a2 + 7968);
    if (v14 == 0.0)
    {
      double v15 = (double)(*(_DWORD *)(a2 + 8) * *(_DWORD *)(a2 + 7944));
      if (v14 != v15)
      {
        *(double *)(a2 + 7968) = v15;
        segPumpReadyNotification((void *)a2, @"FBP_RecommendedPrebufferReservationChanged", 0);
      }
    }
    double result = *(double *)(a2 + 7960);
    if (result > 0.0) {
      return segPumpSetExtraHoldbackFromClient(a1, a2, result);
    }
  }
  return result;
}

void segPumpRTCReportingRespondToFirstIndexFileWithMedia(uint64_t a1, void *a2)
{
  if (!*(void *)(a1 + 9056))
  {
    if (*a2 == 1)
    {
      int HasEndTag = FigMediaPlaylistHasEndTag(a2[7]);
      CFNumberRef v9 = @"AOD";
      uint64_t v10 = @"ALIVE";
    }
    else
    {
      if (*a2) {
        goto LABEL_2;
      }
      int HasEndTag = FigMediaPlaylistHasEndTag(a2[7]);
      CFNumberRef v9 = @"VOD";
      uint64_t v10 = @"LIVE";
    }
    if (HasEndTag) {
      uint64_t v21 = v9;
    }
    else {
      uint64_t v21 = v10;
    }
    *(void *)(a1 + 9056) = v21;
    uint64_t v22 = *(void *)(a1 + 9048);
    if (v22)
    {
      uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v24 = v23 ? v23 : 0;
      CFAllocatorRef v27 = *(void (**)(uint64_t, uint64_t, uint64_t, __CFString *, void))(v24 + 48);
      if (v27) {
        v27(v22, 0x1EE582B98, 0x1EE583C58, v21, 0);
      }
    }
  }
LABEL_2:
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 9048);
  if (v5)
  {
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v7 + 56);
    if (v11) {
      v11(v5, 0x1EE582B98, 0x1EE583A18, 1000 * v4, 0);
    }
    uint64_t v5 = *(void *)(a1 + 9048);
  }
  if (*(unsigned char *)(a1 + 8002)) {
    uint64_t v12 = 300;
  }
  else {
    uint64_t v12 = 3 * v4;
  }
  if (v5)
  {
    uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v14 = v13 ? v13 : 0;
    double v15 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v14 + 56);
    if (v15) {
      v15(v5, 0x1EE582B98, 0x1EE584778, v12, 0);
    }
  }
  if (FigMediaPlaylistHasEndTag(a2[7]))
  {
    if (!*a2)
    {
      double PlaylistActiveDurationSecs = FigMediaPlaylistGetPlaylistActiveDurationSecs(a2[7]);
      uint64_t v17 = *(void *)(a1 + 9048);
      if (v17)
      {
        double v18 = PlaylistActiveDurationSecs;
        uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v20 = v19 ? v19 : 0;
        uint64_t v25 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v20 + 56);
        if (v25)
        {
          uint64_t v26 = (int)(ceil(v18 / 300.0) * 300.0 / 60.0);
          v25(v17, 0x1EE582B98, 0x1EE5620B8, v26, 0);
        }
      }
    }
  }
}

uint64_t segPumpCalculateDiscoDomainOffset(void *a1, uint64_t *a2)
{
  uint64_t v41 = 0;
  v42[0] = 0;
  v42[1] = v42;
  if ((uint64_t)a1[44] <= 0 || !a1[42])
  {
    uint64_t v4 = FigSignalErrorAt();
    goto LABEL_97;
  }
  uint64_t v4 = segPumpCreateDiscoInfoList((uint64_t)a1, v42, 0, &v41);
  if (v4)
  {
LABEL_97:
    uint64_t v7 = v4;
    goto LABEL_95;
  }
  *a2 = 0;
  uint64_t v5 = **(void **)(a1[43] + 8);
  if (v41 < 1 || *(double *)(v42[0] + 16) >= *(double *)(v5 + 16) + *(double *)(v5 + 40))
  {
    uint64_t v7 = 0;
    uint64_t v39 = *(void *)(v5 + 32) + 1;
LABEL_93:
    *a2 = v39;
    goto LABEL_95;
  }
  uint64_t v6 = (double *)a1[42];
  if (!v6)
  {
    uint64_t v7 = 0;
    goto LABEL_95;
  }
  uint64_t v7 = 0;
  do
  {
    CFIndex v8 = (double *)v42;
    while (2)
    {
      CFIndex v8 = *(double **)v8;
      if (!v8) {
        break;
      }
      CFNumberRef v9 = v6;
      uint64_t v10 = v8;
      while (1)
      {
        double v11 = v9[2];
        double v12 = v9[5];
        double v13 = v11 + v12;
        double v14 = v10[2];
        double v15 = v11 + v12 - v14;
        if (v15 <= 1.0 && v15 < -1.0) {
          goto LABEL_82;
        }
        double v17 = v10[5];
        double v18 = v14 + v17;
        uint64_t v19 = v9;
        CFNumberRef v9 = *(double **)v9;
        uint64_t v20 = **(void **)(*((void *)v19 + 1) + 8);
        uint64_t v21 = v10;
        uint64_t v10 = *(double **)v10;
        uint64_t v22 = **(void **)(*((void *)v21 + 1) + 8);
        if (!(v20 | (unint64_t)v9))
        {
          if (!((unint64_t)v10 | v22)) {
            goto LABEL_92;
          }
          if (!v22)
          {
            if (v13 - v18 > 1.0) {
              goto LABEL_82;
            }
            goto LABEL_92;
          }
          double v32 = v11 - v14;
          BOOL v33 = v32 > 1.0;
          if (v32 >= -1.0) {
            BOOL v33 = 1;
          }
          if (!v10) {
            goto LABEL_71;
          }
          goto LABEL_57;
        }
        if (!v9)
        {
          double v35 = v11 - v14;
          if (!(v22 | (unint64_t)v10))
          {
            if (v35 > 1.0) {
              goto LABEL_82;
            }
LABEL_92:
            uint64_t v7 = 0;
            uint64_t v39 = *((void *)v6 + 4) - *((void *)v8 + 4);
            goto LABEL_93;
          }
          if (!v22)
          {
            double v37 = v13 - v18;
            if (v35 > 1.0 || v37 > 1.0) {
              goto LABEL_82;
            }
            goto LABEL_92;
          }
          BOOL v33 = v35 <= 1.0;
          if (v35 < -1.0) {
            BOOL v33 = 0;
          }
          if (!v10)
          {
LABEL_71:
            if (!v33) {
              goto LABEL_82;
            }
            goto LABEL_92;
          }
LABEL_57:
          if (v13 - v18 > 1.0 || !v33) {
            goto LABEL_82;
          }
          goto LABEL_92;
        }
        if (!v20)
        {
          double v26 = v13 - v18;
          if (!v10) {
            goto LABEL_77;
          }
          BOOL v27 = v26 <= 1.0;
          if (v26 < -1.0) {
            BOOL v27 = 0;
          }
          if (v22)
          {
            if (!v27) {
              goto LABEL_82;
            }
            if (v11 - v14 <= 1.0 && v11 - v14 < -1.0) {
              goto LABEL_82;
            }
          }
          else if (!v27)
          {
            goto LABEL_82;
          }
          goto LABEL_50;
        }
        double v23 = v11 - v14;
        if (!(v22 | (unint64_t)v10)) {
          break;
        }
        if (v22)
        {
          BOOL v24 = v23 <= 1.0;
          if (v23 < -1.0) {
            BOOL v24 = 0;
          }
          if (!v10)
          {
            if (v24) {
              goto LABEL_76;
            }
            goto LABEL_82;
          }
          if (v24) {
            goto LABEL_82;
          }
          if (v12 - v17 <= 1.0 && v12 - v17 >= -1.0) {
            goto LABEL_82;
          }
        }
        else
        {
          double v29 = v13 - v18;
          if (v23 > 1.0 || v29 > 1.0 || v29 < -1.0) {
            goto LABEL_82;
          }
        }
LABEL_50:
        if (!v10) {
          goto LABEL_92;
        }
      }
      if (v23 > 1.0) {
        goto LABEL_82;
      }
LABEL_76:
      double v26 = v13 - v18;
LABEL_77:
      if (v26 > 1.0 || v26 >= -1.0) {
        goto LABEL_92;
      }
LABEL_82:
      if (v8[2] <= v6[2] + v6[5]) {
        continue;
      }
      break;
    }
    uint64_t v6 = *(double **)v6;
  }
  while (v6);
LABEL_95:
  segPumpFreeDiscoQueue((uint64_t)v42);
  return v7;
}

void segPumpSetStartingOffset(const void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v77 = *MEMORY[0x1E4F143B8];
  double MinimumPrebufferReservation = segPumpGetMinimumPrebufferReservation(a2, *(void *)(a3 + 56));
  double v7 = *(double *)(a2 + 7960);
  CFIndex v8 = *(const void **)(a3 + 232);
  if (v8) {
    CFNumberRef v9 = CFRetain(v8);
  }
  else {
    CFNumberRef v9 = 0;
  }
  uint64_t v10 = (unsigned char *)(a2 + 8002);
  *(unsigned char *)(a3 + 866) = 0;
  segPumpUpdateCMCDStreamType(a2);
  if (*(unsigned char *)(a3 + 864))
  {
    double v11 = *(double *)(a3 + 920);
    if (v11 != 0.0)
    {
      if (v9)
      {
        CFRelease(v9);
        double v11 = *(double *)(a3 + 920);
      }
      CFNumberRef v9 = CFDateCreate(*(CFAllocatorRef *)(a2 + 56), v11);
    }
  }
  double v12 = MinimumPrebufferReservation + v7;
  if (v9)
  {
    memset(&v64, 0, sizeof(v64));
    memset(&v63, 0, sizeof(v63));
    double v62 = 0.0;
    if (!segPumpGetTimeRangeForDateWithSegmentOffset(a1, *(void *)(a3 + 56), (const __CFDate *)v9, &v64, &v63, &v62))
    {
      *(double *)(a3 + 120) = v62 - *(double *)(a3 + 88);
      segPumpSyncTimeRolledPastToExistingStream(a1, a2, a3, (const __CFDate *)v9);
      if (dword_1E9351350)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
LABEL_31:
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
  }
  else if (*(void *)(a3 + 240) && !*v10)
  {
    double Current = CFAbsoluteTimeGetCurrent();
    double v15 = MEMORY[0x199707BD0](*(void *)(a3 + 240));
    if (dword_1E9351350)
    {
      LODWORD(v64.value) = 0;
      LOBYTE(v63.value) = 0;
      uint64_t v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (Current <= v15) {
      goto LABEL_30;
    }
    double v17 = Current - v15;
    double v18 = *(double *)(a3 + 96);
    if (v17 > v18)
    {
      LODWORD(v64.value) = 0;
      LOBYTE(v63.value) = 0;
      uint64_t v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      *(void *)(a3 + 120) = 0x3F847AE147AE147BLL;
      goto LABEL_32;
    }
    int v20 = dword_1E9351350;
    if (!*(unsigned char *)(a3 + 857) && v17 < v12)
    {
      if (v12 >= v18) {
        double v17 = *(double *)(a3 + 96);
      }
      else {
        double v17 = v12;
      }
      if (!dword_1E9351350)
      {
        *(double *)(a3 + 120) = v18 - v17;
        goto LABEL_32;
      }
      LODWORD(v64.value) = 0;
      LOBYTE(v63.value) = 0;
      uint64_t v21 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      int v20 = dword_1E9351350;
      double v18 = *(double *)(a3 + 96);
    }
    *(double *)(a3 + 120) = v18 - v17;
    if (v20)
    {
LABEL_30:
      LODWORD(v64.value) = 0;
      LOBYTE(v63.value) = 0;
      uint64_t v22 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
      goto LABEL_31;
    }
  }
LABEL_32:
  if (*(double *)(a3 + 120) >= 0.0)
  {
    if (dword_1E9351350)
    {
      LODWORD(v64.value) = 0;
      LOBYTE(v63.value) = 0;
      double v23 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int value = v64.value;
      if (os_log_type_enabled(v23, v63.value)) {
        unsigned int v25 = value;
      }
      else {
        unsigned int v25 = value & 0xFFFFFFFE;
      }
      if (v25)
      {
        double v26 = *(__CFString **)(a2 + 8760);
        if (!v26) {
          double v26 = &stru_1EE53F4B8;
        }
        uint64_t v27 = *(void *)a3;
        uint64_t v28 = *(void *)(a3 + 120);
        int v65 = 136315906;
        uint64_t v66 = "segPumpSetStartingOffset";
        __int16 v67 = 2114;
        unsigned int v68 = v26;
        __int16 v69 = 2048;
        uint64_t v70 = v27;
        __int16 v71 = 2048;
        uint64_t v72 = v28;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    goto LABEL_48;
  }
  if (!*(unsigned char *)(a2 + 8685) || *(unsigned char *)(a2 + 8686))
  {
    if (!*v10)
    {
LABEL_36:
      *(unsigned char *)(a3 + 112) = 1;
      goto LABEL_48;
    }
    goto LABEL_48;
  }
  double v29 = *(double *)(a2 + 8688);
  *(double *)(a3 + 120) = v29;
  if (v29 < 0.0)
  {
    double v29 = v29 + *(double *)(a3 + 96);
LABEL_89:
    *(double *)(a3 + 120) = v29;
    goto LABEL_90;
  }
  if (fabs(v29) < 0.00000011920929)
  {
    double v29 = 0.01;
    goto LABEL_89;
  }
LABEL_90:
  if (!*v10 && v29 > *(double *)(a3 + 96) - v12)
  {
    segPumpAppendErrorLogEntry((uint64_t)a1, a2, a3, (const __CFURL **)(a3 + 408), -16831, @"CoreMediaErrorDomain", @"START-TIME is too close to live", 0, 0, 1u, 3u);
    goto LABEL_36;
  }
LABEL_48:
  if (*(unsigned char *)(a3 + 112) && (*(_DWORD *)(a3 + 160) & 0xFFFFFFFE) == 4)
  {
    if (v12 * 0.95 >= FigMediaPlaylistGetPlaylistActiveDurationSecs(*(void *)(a3 + 56)))
    {
      *(void *)(a3 + 120) = 0;
      if (dword_1E9351350)
      {
        LODWORD(v64.value) = 0;
        LOBYTE(v63.value) = 0;
        double v37 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v38 = v64.value;
        if (os_log_type_enabled(v37, v63.value)) {
          unsigned int v39 = v38;
        }
        else {
          unsigned int v39 = v38 & 0xFFFFFFFE;
        }
        if (!v39) {
          goto LABEL_70;
        }
        if (*(void *)(a2 + 8760)) {
          unsigned int v40 = *(__CFString **)(a2 + 8760);
        }
        else {
          unsigned int v40 = &stru_1EE53F4B8;
        }
        uint64_t v41 = *(void *)a3;
        uint64_t v42 = *(void *)(a3 + 120);
        double PlaylistActiveDurationSecs = FigMediaPlaylistGetPlaylistActiveDurationSecs(*(void *)(a3 + 56));
        int v65 = 136316418;
        uint64_t v66 = "segPumpSetStartingOffset";
        __int16 v67 = 2114;
        unsigned int v68 = v40;
        __int16 v69 = 2048;
        uint64_t v70 = v41;
        __int16 v71 = 2048;
        uint64_t v72 = v42;
        __int16 v73 = 2048;
        double v74 = v12 * 0.95;
        __int16 v75 = 2048;
        double v76 = PlaylistActiveDurationSecs;
        goto LABEL_69;
      }
    }
    else
    {
      *(double *)(a3 + 120) = FigMediaPlaylistGetPlaylistActiveDurationSecs(*(void *)(a3 + 56)) - v12 * 0.95;
      if (dword_1E9351350)
      {
        LODWORD(v64.value) = 0;
        LOBYTE(v63.value) = 0;
        uint64_t v30 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v31 = v64.value;
        if (os_log_type_enabled(v30, v63.value)) {
          unsigned int v32 = v31;
        }
        else {
          unsigned int v32 = v31 & 0xFFFFFFFE;
        }
        if (!v32) {
          goto LABEL_70;
        }
        if (*(void *)(a2 + 8760)) {
          BOOL v33 = *(__CFString **)(a2 + 8760);
        }
        else {
          BOOL v33 = &stru_1EE53F4B8;
        }
        uint64_t v34 = *(void *)a3;
        uint64_t v35 = *(void *)(a3 + 120);
        double v36 = FigMediaPlaylistGetPlaylistActiveDurationSecs(*(void *)(a3 + 56));
        int v65 = 136316162;
        uint64_t v66 = "segPumpSetStartingOffset";
        __int16 v67 = 2114;
        unsigned int v68 = v33;
        __int16 v69 = 2048;
        uint64_t v70 = v34;
        __int16 v71 = 2048;
        uint64_t v72 = v35;
        __int16 v73 = 2048;
        double v74 = v36;
LABEL_69:
        _os_log_send_and_compose_impl();
LABEL_70:
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    *(unsigned char *)(a3 + 856) = 1;
    *(unsigned char *)(a3 + 112) = 0;
  }
  if (FigMediaPlaylistGetDateStampCount(*(void *)(a3 + 56)) >= 1 && (*(_DWORD *)(a3 + 160) & 0xFFFFFFFE) == 4)
  {
    uint64_t DateStamp = 0;
    CFIndex v45 = 0;
    double v46 = *(double *)(a3 + 120) + *(double *)(a3 + 88);
    double v47 = 0.0;
    while (1)
    {
      CFArrayRef MediaSegmentSpecifiers = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(*(void *)(a3 + 56));
      if (MediaSegmentSpecifiers) {
        CFArrayRef MediaSegmentSpecifiers = (const __CFArray *)CFArrayGetCount(MediaSegmentSpecifiers);
      }
      if (v45 >= (uint64_t)MediaSegmentSpecifiers) {
        break;
      }
      CFArrayRef v49 = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(*(void *)(a3 + 56));
      CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v49, v45);
      MediaFilePrivateData = (double *)segPumpGetMediaFilePrivateData(ValueAtIndex);
      int v52 = MediaFilePrivateData;
      if (DateStamp && MediaFilePrivateData[4] >= v46) {
        goto LABEL_84;
      }
      if (FigMediaSegmentSpecifierGetDateStamp((uint64_t)ValueAtIndex))
      {
        uint64_t DateStamp = FigMediaSegmentSpecifierGetDateStamp((uint64_t)ValueAtIndex);
        double v47 = v52[4];
      }
      ++v45;
    }
    if (!DateStamp) {
      goto LABEL_105;
    }
LABEL_84:
    CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    double v54 = MEMORY[0x199707BD0](DateStamp);
    CFDateRef v55 = CFDateCreate(AllocatorForMedia, v46 + v54 - v47);
    CFDateRef v56 = v55;
    if (!*(void *)(a3 + 232))
    {
      if (v55) {
        CFTypeRef v57 = CFRetain(v55);
      }
      else {
        CFTypeRef v57 = 0;
      }
      *(void *)(a3 + 232) = v57;
    }
    uint64_t v58 = 0;
    uint64_t v59 = a2 + 384;
    do
    {
      uint64_t v60 = *(void *)(v59 + v58);
      if (*(double *)(v60 + 120) < 0.0 && !*(void *)(v60 + 232))
      {
        if (v56)
        {
          CFTypeRef v61 = CFRetain(v56);
          uint64_t v60 = *(void *)(v59 + v58);
        }
        else
        {
          CFTypeRef v61 = 0;
        }
        *(void *)(v60 + 232) = v61;
      }
      v58 += 16;
    }
    while (v58 != 48);
    if (v56) {
      CFRelease(v56);
    }
  }
LABEL_105:
  *(void *)(a3 + 128) = 0xBFF0000000000000;
  if (v9) {
    CFRelease(v9);
  }
}

BOOL segPumpIsIndexFileResponseOutOfDate(uint64_t a1, uint64_t a2, __CFHTTPMessage *a3)
{
  BOOL v3 = 0;
  if (a3)
  {
    unsigned int v4 = *(_DWORD *)(a1 + 8);
    if (v4)
    {
      if (FigMediaPlaylistHasEndTag(*(void *)(a2 + 56))) {
        return 0;
      }
      CFStringRef v6 = FigCFHTTPCopyDateFromHTTPResponse(a3);
      if (!v6)
      {
        return 0;
      }
      else
      {
        CFDateRef v7 = (const __CFDate *)v6;
        CFDateRef ModifiedDateFromHTTPResponse = (const __CFDate *)FigCFHTTPCopyLastModifiedDateFromHTTPResponse(a3);
        if (ModifiedDateFromHTTPResponse)
        {
          CFDateRef v9 = ModifiedDateFromHTTPResponse;
          BOOL v3 = CFDateGetTimeIntervalSinceDate(v7, ModifiedDateFromHTTPResponse) > (double)v4 * 3.0;
          CFRelease(v9);
        }
        else
        {
          BOOL v3 = 0;
        }
        CFRelease(v7);
      }
    }
  }
  return v3;
}

uint64_t segPumpStreamHasPreloadConnectionForSegment(void *a1, const void *a2, int a3)
{
  if (!a2) {
    return 0;
  }
  uint64_t result = FigMediaSegmentSpecifierGetURLString((uint64_t)a2);
  if (!result) {
    return result;
  }
  if (!a1[99]) {
    return 0;
  }
  CFURLRef v7 = (const __CFURL *)a1[2];
  CFURLRef v8 = (const __CFURL *)a1[3];
  MediaFilePrivateData = segPumpGetMediaFilePrivateData(a2);
  segPumpEnsureMediaSegmentURLs(a2, v7, v8);
  if (!MediaFilePrivateData[2]) {
    return 0;
  }
  CFURLRef v10 = (const __CFURL *)a1[2];
  CFURLRef v11 = (const __CFURL *)a1[3];
  segPumpGetMediaFilePrivateData(a2);
  segPumpEnsureMediaSegmentURLs(a2, v10, v11);
  uint64_t result = FigCFEqual();
  if (a3 && result)
  {
    double v12 = (void *)a1[99];
    return segPumpMediaConnectionRangeIncludesMedia(v12, (uint64_t)a2);
  }
  return result;
}

uint64_t segPumpRealizePreload(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (segPumpShouldDoSegmentReadAheads((unsigned char *)DerivedStorage))
  {
    FigMediaPlaylistGetMediaSegmentSpecifiers(a2[7]);
    for (uint64_t i = (const void *)FigCFArrayGetLastValue();
          ;
          uint64_t i = (const void *)FigMediaSegmentSpecifierGetPreviousSegment((uint64_t)v6))
    {
      CFStringRef v6 = i;
      if (!i) {
        break;
      }
      if (*((unsigned char *)segPumpGetMediaFilePrivateData(i) + 73))
      {
        CFStringRef v6 = 0;
        break;
      }
      for (CFIndex j = 0; ; ++j)
      {
        CFArrayRef PartialSegments = (const __CFArray *)FigMediaSegmentSpecifierGetPartialSegments((uint64_t)v6);
        if (PartialSegments) {
          CFArrayRef PartialSegments = (const __CFArray *)CFArrayGetCount(PartialSegments);
        }
        if (j >= (uint64_t)PartialSegments) {
          break;
        }
        CFArrayRef v9 = (const __CFArray *)FigMediaSegmentSpecifierGetPartialSegments((uint64_t)v6);
        CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v9, j);
        if (!*((unsigned char *)segPumpGetMediaFilePrivateData(ValueAtIndex) + 73)
          && segPumpStreamHasPreloadConnectionForSegment(a2, ValueAtIndex, 1))
        {
          if (ValueAtIndex) {
            goto LABEL_17;
          }
          break;
        }
      }
      if (segPumpStreamHasPreloadConnectionForSegment(a2, v6, 1)) {
        break;
      }
    }
    CFStringRef ValueAtIndex = 0;
LABEL_17:
    if (ValueAtIndex) {
      CFStringRef v6 = ValueAtIndex;
    }
    if (!v6) {
      return 0;
    }
    if (FigMediaSegmentSpecifierIsMarkedAsGap((uint64_t)v6))
    {
      uint64_t result = segPumpHandleMediaFileNetworkError(a1, a2, 0, (uint64_t)v6, 4294951877);
      if (result) {
        return result;
      }
      return 0;
    }
    uint64_t result = segPumpMediaConnectionRangeIncludesMedia((void *)a2[99], (uint64_t)v6);
    if (result)
    {
      segPumpSetMediaConnectionIsDormant(DerivedStorage, a2[99], 0);
      *(void *)(a2[99] + 40) = FigGetUpTimeNanoseconds();
      if ((uint64_t)a2[97] >= 1)
      {
        uint64_t v12 = 0;
        uint64_t v13 = 0;
        while (1)
        {
          uint64_t v14 = *(void *)(a2[96] + 8 * v13);
          if (!v14) {
            break;
          }
          uint64_t v15 = *(void *)(v14 + 8);
          if (v15)
          {
            if (FigMediaSegmentSpecifierGetType(v15) == 1) {
              ++v12;
            }
          }
          if (++v13 >= a2[97]) {
            return 0;
          }
        }
        uint64_t v16 = *(unsigned char *)(DerivedStorage + 329) ? 1 : *(int *)(DerivedStorage + 8212);
        if (v13 - v12 < v16)
        {
          uint64_t v17 = a2[99];
          double v18 = *(const void **)(v17 + 8);
          *(void *)(v17 + 8) = v6;
          CFRetain(v6);
          if (v18) {
            CFRelease(v18);
          }
          uint64_t result = 0;
          *(void *)(a2[96] + 8 * v13) = a2[99];
          a2[99] = 0;
          return result;
        }
      }
      return 0;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t segPumpStreamHasPreloadMapHint(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 56);
  if (result)
  {
    uint64_t result = FigMediaPlaylistGetPreloadMapHint(result);
    if (result)
    {
      uint64_t PreloadMapHint = FigMediaPlaylistGetPreloadMapHint(*(void *)(a1 + 56));
      return FigMediaSegmentSpecifierIsReadInCurrent(PreloadMapHint) != 0;
    }
  }
  return result;
}

uint64_t segPumpStreamHasPreloadConnectionForMap(void *a1, const void *a2)
{
  if (!a2) {
    return 0;
  }
  if (!a1[100]) {
    return 0;
  }
  CFURLRef v4 = (const __CFURL *)a1[2];
  CFURLRef v5 = (const __CFURL *)a1[3];
  MediaFilePrivateData = segPumpGetMediaFilePrivateData(a2);
  segPumpEnsureMediaSegmentURLs(a2, v4, v5);
  if (!MediaFilePrivateData[2]) {
    return 0;
  }
  CFURLRef v7 = (const __CFURL *)a1[2];
  CFURLRef v8 = (const __CFURL *)a1[3];
  segPumpGetMediaFilePrivateData(a2);
  segPumpEnsureMediaSegmentURLs(a2, v7, v8);

  return FigCFEqual();
}

void segPumpReconcileGapRenditionReports(uint64_t a1, CFArrayRef theArray)
{
  CFURLRef v4 = 0;
  CFIndex v5 = 0;
  CFStringRef v6 = (_OWORD *)MEMORY[0x1E4F1D510];
  if (!theArray) {
    goto LABEL_3;
  }
LABEL_2:
  for (CFIndex i = CFArrayGetCount(theArray); v5 < i; CFIndex i = 0)
  {
    CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v5);
    if (FigRenditionReportSpecifierIsGapAtLive((uint64_t)ValueAtIndex))
    {
      if (!v4)
      {
        long long v9 = v6[1];
        *(_OWORD *)&v23.version = *v6;
        *(_OWORD *)&v23.release = v9;
        v23.equal = (CFArrayEqualCallBack)segPumpRenditionReportURLsAreEqual;
        CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
        CFURLRef v4 = CFArrayCreateMutable(AllocatorForMedia, 0, &v23);
      }
      CFURLRef URL = (const void *)FigRenditionReportSpecifierGetURL((uint64_t)ValueAtIndex);
      CFArrayAppendValue(v4, URL);
    }
    ++v5;
    if (theArray) {
      goto LABEL_2;
    }
LABEL_3:
    ;
  }
  if (v4 && !*(void *)(a1 + 9544))
  {
    uint64_t v12 = FigGetAllocatorForMedia();
    if (!FigAlternateFilterMonitorCreateForRenditionDenyList(v12, (Boolean (__cdecl *)(const void *, const void *))segPumpRenditionReportURLsAreEqual, (CFTypeRef *)(a1 + 9544)))
    {
      uint64_t v13 = *(void *)(a1 + 9544);
      uint64_t v14 = *(void *)(a1 + 8152);
      uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v15) {
        uint64_t v16 = v15;
      }
      else {
        uint64_t v16 = 0;
      }
      uint64_t v17 = *(void (**)(uint64_t, __CFString *, uint64_t))(v16 + 56);
      if (v17) {
        v17(v13, @"AlternateFilterMonitorProperty_SelectedMedia", v14);
      }
      double v18 = *(const void **)(a1 + 9528);
      if (v18)
      {
        if (!FigAlternateSelectionBossAddMonitor(v18, *(const void **)(a1 + 9544))) {
          goto LABEL_21;
        }
      }
      else
      {
        FigSignalErrorAt();
      }
    }
LABEL_28:
    CFRelease(v4);
    return;
  }
LABEL_21:
  uint64_t v19 = *(void *)(a1 + 9544);
  if (v19)
  {
    uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v21 = v20 ? v20 : 0;
    uint64_t v22 = *(void (**)(uint64_t, __CFArray *))(v21 + 32);
    if (v22) {
      v22(v19, v4);
    }
  }
  if (v4) {
    goto LABEL_28;
  }
}

uint64_t segPumpSendDateMapping(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  DateStampCFArrayRef Count = FigMediaPlaylistGetDateStampCount(*((void *)a3 + 7));
  if (DateStampCount)
  {
    unint64_t v7 = DateStampCount;
    DateStampCount *= 40;
    if (v7 > 0x666666666666666 || DateStampCount == 0) {
      return 0;
    }
    malloc_type_id_t v9 = 1556728742;
  }
  else
  {
    malloc_type_id_t v9 = 1270757447;
  }
  CFURLRef v10 = (CFTypeRef *)malloc_type_malloc(DateStampCount, v9);
  if (!v10) {
    return 0;
  }
  double v11 = *((double *)a3 + 11);
  FigMediaPlaylistGetMediaSegmentSpecifiers(*((void *)a3 + 7));
  FirstCFStringRef Value = FigCFArrayGetFirstValue();
  if (FirstValue)
  {
    uint64_t NextSegment = FirstValue;
    uint64_t v14 = 0;
    do
    {
      if (v14 >= FigMediaPlaylistGetDateStampCount(*((void *)a3 + 7))) {
        break;
      }
      if (FigMediaSegmentSpecifierGetDateStamp(NextSegment))
      {
        uint64_t DateStamp = (const void *)FigMediaSegmentSpecifierGetDateStamp(NextSegment);
        uint64_t v16 = &v10[5 * v14];
        v16[3] = CFRetain(DateStamp);
        CMTimeMakeWithSeconds(&v29, v11, 90000);
        long long v17 = *(_OWORD *)&v29.value;
        v16[2] = (CFTypeRef)v29.epoch;
        *(_OWORD *)uint64_t v16 = v17;
        uint64_t v18 = *((void *)a3 + 39);
        v16[4] = (CFTypeRef)(FigMediaSegmentSpecifierGetDiscontinuityDomain(NextSegment) + v18);
        ++v14;
      }
      double v11 = v11 + FigMediaSegmentSpecifierGetTimeInSeconds(NextSegment);
      uint64_t NextSegment = FigMediaSegmentSpecifierGetNextSegment(NextSegment);
    }
    while (NextSegment);
  }
  else
  {
    uint64_t v14 = 0;
  }
  uint64_t v20 = *(const void **)(a2 + 176);
  uint64_t v21 = *a3;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFArrayCallBacks v23 = *(void (**)(uint64_t, const void *, void, uint64_t, CFTypeRef *))(DerivedStorage + 168);
  if (!v23)
  {
LABEL_26:
    uint64_t v19 = 0;
    int v26 = 1;
    goto LABEL_28;
  }
  uint64_t v24 = *(void *)(DerivedStorage + 16 * v21 + 384);
  uint64_t v25 = *(void *)(v24 + 880);
  if (v20) {
    CFRetain(v20);
  }
  FigRetainProxyUnlockAll();
  v23(a1, v20, 0, v14, v10);
  if (v20) {
    CFRelease(v20);
  }
  FigRetainProxyRelock();
  if (!FigRetainProxyIsInvalidated())
  {
    if (v25 != *(void *)(v24 + 880))
    {
      int v26 = 0;
      uint64_t v19 = 4294951670;
      goto LABEL_28;
    }
    goto LABEL_26;
  }
  int v26 = 0;
  uint64_t v19 = 4294954413;
LABEL_28:
  if (v14 >= 1)
  {
    uint64_t v27 = v10 + 3;
    do
    {
      if (*v27) {
        CFRelease(*v27);
      }
      v27 += 5;
      --v14;
    }
    while (v14);
  }
  free(v10);
  if (v26)
  {
    uint64_t v19 = 0;
    *(unsigned char *)(a2 + 8005) = 1;
  }
  return v19;
}

uint64_t segPumpUpdateNetworkCostHasEndTag(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 8472);
  if (v1)
  {
    double v2 = (uint64_t *)(*(unsigned char *)(result + 8002) ? MEMORY[0x1E4F1CFD0] : MEMORY[0x1E4F1CFC8]);
    uint64_t VTable = CMBaseObjectGetVTable();
    uint64_t v5 = *(void *)(VTable + 8);
    uint64_t result = VTable + 8;
    uint64_t v4 = v5;
    uint64_t v6 = v5 ? v4 : 0;
    unint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 56);
    if (v7)
    {
      uint64_t v8 = *v2;
      return v7(v1, 0x1EE57E4F8, v8);
    }
  }
  return result;
}

uint64_t segPumpEnsureMediaSegmentURLs(const void *a1, const __CFURL *a2, const __CFURL *a3)
{
  MediaFilePrivateData = segPumpGetMediaFilePrivateData(a1);
  uint64_t URLString = FigMediaSegmentSpecifierGetURLString((uint64_t)a1);

  return FigStreamingPlaylistEnsureMediaURL(URLString, a2, a3, (CFTypeRef *)MediaFilePrivateData + 2, (CFURLRef *)MediaFilePrivateData + 3);
}

uint64_t segPumpMediaConnectionIncludesMedia(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t result = segPumpMediaConnectionIsActive(a2);
  if (result)
  {
    CFURLRef v8 = *(const __CFURL **)(a1 + 16);
    CFURLRef v7 = *(const __CFURL **)(a1 + 24);
    MediaFilePrivateData = (const void **)segPumpGetMediaFilePrivateData(a3);
    segPumpEnsureMediaSegmentURLs(a3, v8, v7);
    uint64_t result = FigCFHTTPCompareURLs(MediaFilePrivateData[2], *(CFTypeRef *)(a2 + 168));
    if (result) {
      return segPumpMediaConnectionRangeIncludesMedia((void *)a2, (uint64_t)a3);
    }
  }
  return result;
}

uint64_t segPumpMediaConnectionIsActive(uint64_t result)
{
  if (result)
  {
    if (*(void *)(result + 32) || *(void *)(result + 104))
    {
      return 1;
    }
    else
    {
      uint64_t result = *(void *)(result + 272);
      if (result) {
        return CMBlockBufferGetDataLength((CMBlockBufferRef)result) != 0;
      }
    }
  }
  return result;
}

BOOL segPumpMediaConnectionRangeIncludesMedia(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[38] + a1[30];
  BOOL result = 0;
  if (v4 <= FigMediaSegmentSpecifierGetStartOffset(a2))
  {
    uint64_t v5 = a1[31];
    if (v5 < 1) {
      return 1;
    }
    uint64_t v6 = a1[30] + v5;
    uint64_t StartOffset = FigMediaSegmentSpecifierGetStartOffset(a2);
    if (v6 >= FigMediaSegmentSpecifierGetBytesToRead(a2) + StartOffset) {
      return 1;
    }
  }
  return result;
}

CFIndex segPumpSetDeliveryStatusForMediaFileAndParts(const void *a1, char a2)
{
  *((unsigned char *)segPumpGetMediaFilePrivateData(a1) + 73) = a2;
  CFArrayRef PartialSegments = (const __CFArray *)FigMediaSegmentSpecifierGetPartialSegments((uint64_t)a1);
  CFIndex v5 = 0;
  if (!PartialSegments) {
    goto LABEL_3;
  }
LABEL_2:
  for (CFIndex result = CFArrayGetCount(PartialSegments); v5 < result; CFIndex result = 0)
  {
    CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(PartialSegments, v5);
    *((unsigned char *)segPumpGetMediaFilePrivateData(ValueAtIndex) + 73) = a2;
    ++v5;
    if (PartialSegments) {
      goto LABEL_2;
    }
LABEL_3:
    ;
  }
  return result;
}

const void *segPumpFindCryptKeyCommonData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 0;
  for (CFIndex i = 0; ; ++i)
  {
    CFArrayRef Count = *(const __CFArray **)(a1 + 7688);
    if (Count) {
      CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
    }
    if (i >= (uint64_t)Count) {
      break;
    }
    CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 7688), i);
    FigContentKeySpecifierGetIdentifier(a2);
    if (FigCFEqual()) {
      uint64_t v4 = ValueAtIndex;
    }
  }
  return v4;
}

const void *segPumpCreateCryptKeyCommonData(uint64_t a1)
{
  FigGetAllocatorForMedia();
  long long v6 = xmmword_1E57A2840;
  if (segPumpCryptKeyCommonDataGetTypeID_once != -1) {
    dispatch_once_f(&segPumpCryptKeyCommonDataGetTypeID_once, &v6, (dispatch_function_t)segPumpRegisterClassUtil);
  }
  Instance = (const void *)_CFRuntimeCreateInstance();
  if (Instance
    && ((CFMutableDictionaryRef Mutable = *(__CFArray **)(a1 + 7688)) != 0
     || (CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia(),
         CFMutableDictionaryRef Mutable = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D510]),
         (*(void *)(a1 + 7688) = Mutable) != 0)))
  {
    CFArrayAppendValue(Mutable, Instance);
  }
  else
  {
    FigSignalErrorAt();
  }
  return Instance;
}

void segPumpCryptKeyCommonDataFinalize(void *a1)
{
  double v2 = (const void *)a1[2];
  if (v2)
  {
    CFRelease(v2);
    a1[2] = 0;
  }
  BOOL v3 = (const void *)a1[6];
  if (v3)
  {
    CFRelease(v3);
    a1[6] = 0;
  }
  uint64_t v4 = (const void *)a1[7];
  if (v4)
  {
    CFRelease(v4);
    a1[7] = 0;
  }
  CryptKeyReleaseAndClearVideoDecryptor((uint64_t)a1);

  CryptKeyReleaseAndClearAudioDecryptor((uint64_t)a1);
}

CFStringRef segPumpCryptKeyCommonDataCopyDesc(uint64_t a1)
{
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  return CFStringCreateWithFormat(AllocatorForMedia, 0, @"CryptKeyCommonData: %p", a1);
}

void CryptKeyReleaseAndClearVideoDecryptor(uint64_t a1)
{
  CMNotificationCenterGetDefaultLocalCenter();
  if (*(void *)(a1 + 64))
  {
    FigNotificationCenterRemoveWeakListener();
    FigNotificationCenterRemoveWeakListener();
    FigNotificationCenterRemoveWeakListener();
    FigNotificationCenterRemoveWeakListener();
    double v2 = *(const void **)(a1 + 64);
    if (v2)
    {
      CFRelease(v2);
      *(void *)(a1 + 64) = 0;
    }
  }
  *(void *)(a1 + 72) = 0;
}

void CryptKeyReleaseAndClearAudioDecryptor(uint64_t a1)
{
  CMNotificationCenterGetDefaultLocalCenter();
  if (*(void *)(a1 + 104))
  {
    FigNotificationCenterRemoveWeakListener();
    FigNotificationCenterRemoveWeakListener();
    FigNotificationCenterRemoveWeakListener();
    double v2 = *(const void **)(a1 + 104);
    if (v2)
    {
      CFRelease(v2);
      *(void *)(a1 + 104) = 0;
    }
  }
  *(void *)(a1 + 112) = 0;
}

uint64_t segPumpDecryptorNativeCryptorInvalidatedCallback(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = 0;
  CFTypeRef cf = 0;
  FigRetainProxyRetain();
  if (!segPumpLockAndCopyPumpFromRetainProxy(a2, &cf, &v6))
  {
    FigRetainProxyRetain();
    CMNotificationCenterGetDefaultLocalCenter();
    FigGetAllocatorForMedia();
    uint64_t v3 = FigDeferNotificationToDispatchQueue();
    if (v3)
    {
      uint64_t v4 = v3;
      FigRetainProxyRelease();
      segPumpSendEndCallbackForAllActiveStreamsWithOSStatus(a2, v4);
    }
  }
  segPumpUnlockAndSendAllPendingNotifications();
  if (cf) {
    CFRelease(cf);
  }
  return FigRetainProxyRelease();
}

uint64_t segPumpDecryptorReceivedKeyResponseCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[16] = *MEMORY[0x1E4F143B8];
  uint64_t v11 = 0;
  CFTypeRef cf = 0;
  FigRetainProxyRetain();
  if (!segPumpLockAndCopyPumpFromRetainProxy(a2, &cf, &v11))
  {
    if (dword_1E9351350)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v7 = 384;
    while (1)
    {
      uint64_t v8 = *(void *)(v11 + v7);
      malloc_type_id_t v9 = *(const void **)(v8 + 248);
      if (v9)
      {
        v14[0] = 0;
        uint64_t v13 = 0;
        if (segPumpGetCryptKeyCommonData(v9, v14, &v13)) {
          goto LABEL_12;
        }
        if (*(void *)(v13 + 64) == a4 || *(void *)(v13 + 104) == a4) {
          break;
        }
      }
      v7 += 16;
      if (v7 == 432) {
        goto LABEL_12;
      }
    }
    segPumpContinueIfCryptKeyResponseWasAlreadySet(cf, v11, v8, v9, v13);
  }
LABEL_12:
  segPumpUnlockAndSendAllPendingNotifications();
  if (cf) {
    CFRelease(cf);
  }
  return FigRetainProxyRelease();
}

void segPumpDecryptorReceivedKeyRequestErrorCallback(int a1, uint64_t a2, int a3, uint64_t a4, CFDictionaryRef theDict)
{
  *(void *)CMTime v29 = 0;
  CFTypeRef v30 = 0;
  CFTypeRef cf = 0;
  if (!theDict || (CFStringRef Value = (__CFError *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F1FD00])) == 0)
  {
LABEL_35:
    FigSignalErrorAt();
    goto LABEL_32;
  }
  uint64_t v8 = Value;
  if (segPumpLockAndCopyPumpFromRetainProxy(a2, &v30, (uint64_t *)v29)) {
    goto LABEL_32;
  }
  uint64_t v9 = 384;
  while (1)
  {
    uint64_t v10 = *(void *)(*(void *)v29 + v9);
    uint64_t v11 = *(const void **)(v10 + 248);
    if (v11)
    {
      uint64_t v26 = 0;
      uint64_t v27 = 0;
      if (segPumpGetCryptKeyCommonData(v11, &v27, &v26)) {
        goto LABEL_32;
      }
      if (*(void *)(v26 + 64) == a4 || *(void *)(v26 + 104) == a4) {
        break;
      }
    }
    v9 += 16;
    if (v9 == 432) {
      goto LABEL_32;
    }
  }
  uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
  uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v13) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t v15 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v14 + 48);
  if (v15)
  {
    v15(a4, *MEMORY[0x1E4F1FDC0], AllocatorForMedia, &cf);
    uint64_t v16 = (__CFError *)cf;
  }
  else
  {
    uint64_t v16 = 0;
  }
  segPumpRTCReportingUpdateCryptorErrorKeys(*(uint64_t *)v29, v16);
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  CFIndex Code = CFErrorGetCode(v8);
  if (Code != -16229)
  {
    int v23 = Code;
    if (Code == (int)Code)
    {
      CFTypeRef v24 = v30;
      CFErrorDomain Domain = (__CFString *)CFErrorGetDomain(v8);
      segPumpHandleCryptKeyNetworkError((uint64_t)v24, v10, v11, v23, Domain, 0);
      goto LABEL_32;
    }
    goto LABEL_35;
  }
  uint64_t v19 = *(void *)v29;
  CFTypeRef v18 = v30;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  if (!segPumpGetCryptKeyCommonData(v11, &v32, &v31) && !*(unsigned char *)(v31 + 88))
  {
    uint64_t v20 = *(void *)(v31 + 64);
    if (v20)
    {
      if (!segPumpPrepareCryptorForKeyLoading(v20, *(void *)(v31 + 72), 0, v31 + 96, v31 + 88))
      {
        if (*(unsigned char *)(v31 + 88))
        {
          uint64_t v21 = *(void *)(v31 + 104);
          if (!v21
            || !segPumpPrepareCryptorForKeyLoading(v21, *(void *)(v31 + 112), 0, v31 + 136, v31 + 128))
          {
            uint64_t v22 = *(const void **)(v10 + 248);
            *(void *)(v10 + 248) = v11;
            CFRetain(v11);
            if (v22) {
              CFRelease(v22);
            }
            *(unsigned char *)(v31 + 145) = 0;
            segPumpSendCryptKeyRequest(v18, v19, v10, v11);
          }
        }
      }
    }
  }
LABEL_32:
  segPumpUnlockAndSendAllPendingNotifications();
  if (v30) {
    CFRelease(v30);
  }
}

void segPumpCryptKeyRenewalCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v14 = 0;
  CFTypeRef cf = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  if (!segPumpLockAndCopyPumpFromRetainProxy(a2, &cf, &v14))
  {
    for (uint64_t i = 0; i != 3; ++i)
    {
      uint64_t v6 = *(void *)(v14 + 16 * i + 384);
      if (*(void *)(v6 + 56))
      {
        CFIndex v7 = 0;
        while (1)
        {
          CFArrayRef ContentKeySpecifiers = (const __CFArray *)FigMediaPlaylistGetContentKeySpecifiers(*(void *)(v6 + 56));
          if (ContentKeySpecifiers) {
            CFArrayRef ContentKeySpecifiers = (const __CFArray *)CFArrayGetCount(ContentKeySpecifiers);
          }
          if (v7 >= (uint64_t)ContentKeySpecifiers) {
            break;
          }
          CFArrayRef v9 = (const __CFArray *)FigMediaPlaylistGetContentKeySpecifiers(*(void *)(v6 + 56));
          CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v9, v7);
          if (segPumpGetCryptKeyCommonData(ValueAtIndex, &v13, &v12)) {
            goto LABEL_17;
          }
          ++v7;
          if (*(void *)(v12 + 64) == a4)
          {
            if (!ValueAtIndex) {
              break;
            }
            if (v12)
            {
              uint64_t v11 = *(const void **)(v6 + 248);
              *(void *)(v6 + 248) = ValueAtIndex;
              CFRetain(ValueAtIndex);
              if (v11) {
                CFRelease(v11);
              }
              *(unsigned char *)(v12 + 145) = 0;
              segPumpSendCryptKeyRequest(cf, v14, v6, ValueAtIndex);
            }
            goto LABEL_17;
          }
        }
      }
    }
  }
LABEL_17:
  segPumpUnlockAndSendAllPendingNotifications();
  if (cf) {
    CFRelease(cf);
  }
}

void segPumpDeferredDecryptorNativeCryptorInvalidatedCallback(int a1, int a2, int a3, uint64_t a4, CFDictionaryRef theDict)
{
  unsigned int valuePtr = 0;
  if (theDict && (CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F1FD20])) != 0)
  {
    CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
    uint64_t v7 = valuePtr;
  }
  else
  {
    uint64_t v7 = 0;
  }
  segPumpSendEndCallbackForAllActiveStreamsWithOSStatus(a4, v7);
}

uint64_t segPumpContinueIfCryptKeyResponseWasAlreadySet(const void *a1, uint64_t a2, uint64_t a3, const void *a4, uint64_t a5)
{
  uint64_t v10 = *(void *)(a5 + 64);
  if (!v10)
  {
    if (!*(void *)(a5 + 104)) {
      return 0;
    }
    uint64_t v11 = 0;
    goto LABEL_6;
  }
  if (segPumpGetDecryptorState(v10) == 3)
  {
    uint64_t v11 = *(void *)(a5 + 64);
LABEL_6:
    int v12 = 1;
    goto LABEL_8;
  }
  int v12 = 0;
  uint64_t v11 = 0;
LABEL_8:
  uint64_t v13 = *(void *)(a5 + 104);
  if (v13)
  {
    if (segPumpGetDecryptorState(v13) != 3) {
      goto LABEL_27;
    }
    uint64_t v14 = *(void *)(a5 + 104);
  }
  else
  {
    uint64_t v14 = 0;
  }
  if (v14) {
    uint64_t v11 = v14;
  }
  if (!v12) {
    goto LABEL_27;
  }
  *(unsigned char *)(a5 + 144) = 1;
  if (!*(unsigned char *)(a2 + 322) || !segPumpCryptKeyIsLowValueFairPlayStreamingKey((uint64_t)a4)) {
    goto LABEL_27;
  }
  uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
  uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 8);
  uint64_t v17 = v16 ? v16 : 0;
  CFTypeRef v18 = *(unsigned int (**)(uint64_t, void, uint64_t, uint64_t))(v17 + 48);
  if (v18 && !v18(v11, *MEMORY[0x1E4F1FDB8], AllocatorForMedia, a5 + 48))
  {
    uint64_t v19 = FigGetAllocatorForMedia();
    uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v21 = v20 ? v20 : 0;
    uint64_t v22 = *(unsigned int (**)(uint64_t, void, uint64_t, uint64_t))(v21 + 48);
    if (v22)
    {
      if (!v22(v11, *MEMORY[0x1E4F1FDA8], v19, a5 + 56))
      {
LABEL_27:
        if (*(unsigned char *)(a5 + 144))
        {
          FigHTTPStopAndReleaseTimer((dispatch_object_t *)(a3 + 640));
          return segPumpContinueAfterKeyFetched(a1, a2, (void *)a3, a4);
        }
        return 0;
      }
    }
  }

  return FigSignalErrorAt();
}

uint64_t segPumpGetDecryptorState(uint64_t a1)
{
  CFNumberRef number = 0;
  unsigned int valuePtr = 0;
  uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
  uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  CFIndex v5 = *(uint64_t (**)(uint64_t, void, uint64_t, CFNumberRef *))(v4 + 48);
  if (!v5) {
    return 0;
  }
  int v6 = v5(a1, *MEMORY[0x1E4F1FDC8], AllocatorForMedia, &number);
  CFNumberRef v7 = number;
  if (v6)
  {
    uint64_t v8 = 0;
    if (!number) {
      return v8;
    }
    goto LABEL_7;
  }
  CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr);
  uint64_t v8 = valuePtr;
  CFNumberRef v7 = number;
  if (number) {
LABEL_7:
  }
    CFRelease(v7);
  return v8;
}

BOOL segPumpCryptKeyIsLowValueFairPlayStreamingKey(uint64_t a1)
{
  return FigContentKeySpecifierGetKeySystem(a1) == 1
      && FigContentKeySpecifierGetEncryptionMethod(a1) == 3;
}

uint64_t segPumpContinueAfterKeyFetched(const void *a1, uint64_t a2, void *a3, const void *a4)
{
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t CryptKeyCommonData = segPumpGetCryptKeyCommonData(a4, &v13, &v12);
  if (!CryptKeyCommonData)
  {
    uint64_t v8 = (const void *)a3[31];
    if (v8)
    {
      CFRelease(v8);
      a3[31] = 0;
    }
    uint64_t v9 = 0;
    *(unsigned char *)(v12 + 145) = 0;
    while (1)
    {
      uint64_t CryptKeyCommonData = segPumpContinueStreamAfterCryptKeyArrival(a1, a2, *(void **)(a2 + v9 + 384), v12);
      if (CryptKeyCommonData) {
        break;
      }
      if (FigRetainProxyIsInvalidated()) {
        return FigSignalErrorAt();
      }
      if (*(void *)(a2 + 7680))
      {
        uint64_t CryptKeyCommonData = segPumpContinueStreamAfterCryptKeyArrival(a1, a2, *(void **)(a2 + v9 + 392), v12);
        if (CryptKeyCommonData) {
          return CryptKeyCommonData;
        }
        if (FigRetainProxyIsInvalidated()) {
          return FigSignalErrorAt();
        }
      }
      v9 += 16;
      if (v9 == 48)
      {
        if (a3[31]) {
          return 0;
        }
        NextCryptKeyForStreaCFIndex m = segPumpReadNextCryptKeyForStream((uint64_t)a1, a2, a3);
        if (!a3[31]) {
          segPumpResetConnection(a2, (uint64_t)(a3 + 68));
        }
        return NextCryptKeyForStream;
      }
    }
  }
  return CryptKeyCommonData;
}

uint64_t segPumpContinueStreamAfterCryptKeyArrival(const void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v31 = *(void *)(a3[87] + 8);
  FigRetainProxyRetain();
  unsigned int v8 = segPumpStreamWaitingForCryptKey(a2, a3, a4);
  if (*(uint64_t *)(a2 + 9592) >= 1)
  {
    uint64_t v9 = FigGetUpTimeNanoseconds() - *(void *)(a2 + 9592);
    if (v9 >= 1)
    {
      uint64_t v10 = *(void *)(a2 + 9048);
      if (v10)
      {
        uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v11) {
          uint64_t v12 = v11;
        }
        else {
          uint64_t v12 = 0;
        }
        uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t, unint64_t, void))(v12 + 56);
        if (v13) {
          v13(v10, 0x1EE582CD8, 0x1EE584F38, v9 / 0xF4240uLL, 0);
        }
        uint64_t v14 = *(void *)(a2 + 9048);
        if (v14)
        {
          uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
          uint64_t v16 = v15 ? v15 : 0;
          uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 32);
          if (v17) {
            v17(v14, 0x1EE582CD8, 0x1EE584F58, 1);
          }
        }
      }
    }
  }
  if (!v8) {
    goto LABEL_45;
  }
  if (!*(unsigned char *)(a4 + 144))
  {
    uint64_t ParallelConnection = FigSignalErrorAt();
LABEL_46:
    if (!a3[32])
    {
      unsigned int MediaForSingleStream = segPumpDeliverNextMediaForSingleStream(a1, a2, (uint64_t)a3);
      if (MediaForSingleStream == -12644) {
        uint64_t ParallelConnection = 0;
      }
      else {
        uint64_t ParallelConnection = MediaForSingleStream;
      }
    }
    goto LABEL_50;
  }
  CFTypeRef v18 = (const void *)v31;
  uint64_t ContentKeySpecifier = (const void *)FigMediaSegmentSpecifierGetContentKeySpecifier(v31);
  uint64_t v20 = (const void *)a3[31];
  if (ContentKeySpecifier == v20 && v20 != 0)
  {
    CFRelease(ContentKeySpecifier);
    a3[31] = 0;
  }
  uint64_t v22 = a3[87];
  if (v22 && (*(void *)(v22 + 32) || *(void *)(v22 + 104)))
  {
    BOOL v23 = 0;
    char v24 = 1;
  }
  else
  {
    char v24 = 0;
    BOOL v23 = a3[88] == 0;
  }
  if (dword_1E9351350)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    uint64_t v22 = a3[87];
    CFTypeRef v18 = (const void *)v31;
  }
  uint64_t v26 = a3[110];
  uint64_t ParallelConnection = segPumpDeliverAccumulatedBuffer((uint64_t)a1, a2, (uint64_t)a3, v22, *(const void **)(v22 + 8), v23);
  if (!FigRetainProxyIsInvalidated())
  {
    if (ParallelConnection) {
      goto LABEL_46;
    }
    if (v26 != a3[110]) {
      goto LABEL_45;
    }
    uint64_t v28 = (void *)a3[87];
    if ((const void *)v28[1] != v18) {
      goto LABEL_45;
    }
    if ((v24 & 1) == 0)
    {
      if (a3[88])
      {
        uint64_t ParallelConnection = segPumpMoveToNextParallelConnection((uint64_t)a1, a2, (uint64_t)a3);
        if (FigRetainProxyIsInvalidated()) {
          goto LABEL_50;
        }
        if (ParallelConnection) {
          goto LABEL_46;
        }
        if (v26 != a3[110]) {
          goto LABEL_45;
        }
        uint64_t v28 = (void *)a3[87];
        if ((const void *)v28[1] != v18) {
          goto LABEL_45;
        }
      }
      else if (v18)
      {
        CFRelease(v18);
        *(void *)(a3[87] + 8) = 0;
        uint64_t v28 = (void *)a3[87];
        if (!v28)
        {
LABEL_44:
          if (!a3[88])
          {
            uint64_t ParallelConnection = segPumpStreamProceedAfterMediaAndKeyArrival((uint64_t)a1, a2, (uint64_t)a3, v18, 1, 1);
            if (FigRetainProxyIsInvalidated() || !ParallelConnection && v26 != a3[110]) {
              goto LABEL_50;
            }
            goto LABEL_46;
          }
          goto LABEL_45;
        }
      }
    }
    if (!v28[4] && !v28[13]) {
      goto LABEL_44;
    }
LABEL_45:
    uint64_t ParallelConnection = 0;
    goto LABEL_46;
  }
LABEL_50:
  FigRetainProxyRelease();
  return ParallelConnection;
}

const void *segPumpStreamWaitingForCryptKey(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v3 = *(void *)(a2[87] + 8);
  if (*(unsigned char *)(a1 + 322)) {
    BOOL v4 = v3 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4 || a2[32] != v3 && a2[33] != v3) {
    return 0;
  }
  CFIndex result = (const void *)FigMediaSegmentSpecifierGetContentKeySpecifier(*(void *)(a2[87] + 8));
  if (!result) {
    return result;
  }
  uint64_t v7 = (uint64_t)result;
  if (segPumpGetCryptKeyCommonData(result, &v9, &v8)
    || FigMediaSegmentSpecifierGetType(v3) == 1
    && FigContentKeySpecifierGetEncryptionMethod(v7) - 1 < 2)
  {
    return 0;
  }
  return (const void *)(v8 == a3);
}

uint64_t segPumpDeliverAccumulatedBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5, int a6)
{
  MediaFilePrivateData = segPumpGetMediaFilePrivateData(a5);
  uint64_t v12 = MediaFilePrivateData[6];
  uint64_t v13 = *(OpaqueCMBlockBuffer **)(a4 + 272);
  FigRetainProxyRetain();
  BOOL v14 = (*(const void **)(a3 + 256) == a5 || *(const void **)(a3 + 264) == a5) && *(unsigned char *)(a3 + 404) != 0;
  if (!v13)
  {
    uint64_t v23 = 0;
    goto LABEL_49;
  }
  BOOL v30 = v14;
  int v31 = a6;
  *(void *)(a4 + 272) = 0;
  size_t DataLength = CMBlockBufferGetDataLength(v13);
  if (FigMediaSegmentSpecifierGetBytesToRead((uint64_t)a5) < 1)
  {
    int64_t v16 = DataLength;
  }
  else
  {
    int64_t v16 = DataLength;
    uint64_t v17 = DataLength + v12;
    if (v17 > FigMediaSegmentSpecifierGetBytesToRead((uint64_t)a5)
      && !segPumpShouldPadByteCountForMediaSegment(a2, (uint64_t)a5))
    {
      int64_t v18 = v17 - FigMediaSegmentSpecifierGetBytesToRead((uint64_t)a5);
      if (v18 >= 1)
      {
        CMBlockBufferRef blockBufferOut = 0;
        CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
        uint64_t appended = CMBlockBufferCreateEmpty(AllocatorForMedia, 0, 0, &blockBufferOut);
        if (appended
          || (v16 -= v18,
              uint64_t appended = CMBlockBufferAppendBufferReference(blockBufferOut, v13, 0, v16, 0),
              appended)
          || (CFAllocatorRef v21 = (const __CFAllocator *)FigGetAllocatorForMedia(),
              uint64_t appended = CMBlockBufferCreateEmpty(v21, 0, 0, (CMBlockBufferRef *)(a4 + 272)),
              appended)
          || (uint64_t appended = CMBlockBufferAppendBufferReference(*(CMBlockBufferRef *)(a4 + 272), v13, v16, v18, 0),
              appended))
        {
          uint64_t v23 = appended;
          goto LABEL_48;
        }
        CFRelease(v13);
        uint64_t v13 = blockBufferOut;
      }
    }
  }
  if (v16 >= 1)
  {
    if (*(void *)(a2 + 296)
      && *(void *)(a3 + 64)
      && (!a5 || FigMediaSegmentSpecifierGetType((uint64_t)a5) != 1)
      && !MediaFilePrivateData[13]
      && segPumpCanAddSegmentToCache((uint64_t *)a2, (void *)a3, a5, 0))
    {
      segPumpCreateMediaSegmentCache(a2, a3, a5);
    }
    if (MediaFilePrivateData[13])
    {
      uint64_t v22 = segPumpAppendBytesToCache(a2, a3, a5, v13, 0, v16, v31);
      if (v22)
      {
LABEL_51:
        uint64_t v23 = v22;
        if (!v13) {
          goto LABEL_49;
        }
        goto LABEL_48;
      }
    }
  }
  if (v31)
  {
    uint64_t v23 = segPumpStreamUnchainMediaConnIfChaining(a1, (void *)a3, (void *)a4);
    BOOL v24 = v30;
    if (v23) {
      BOOL v24 = 0;
    }
    if (!v24) {
      goto LABEL_47;
    }
    segPumpMarkMediaFileAsDelivered((uint64_t *)a3, a5);
  }
  else if (!v30)
  {
    goto LABEL_39;
  }
  if (!FigMediaSegmentSpecifierGetContentKeySpecifier((uint64_t)a5) || !*(unsigned char *)(a2 + 322))
  {
    if (v31 || v16 >= 1)
    {
      if (v31 && segPumpIsLastMediaFileDelivering(a3, (uint64_t)a5))
      {
        segPumpCheckAndMarkStreamCacheComplete(a2, a3, (uint64_t)a5);
        unsigned int v27 = 2;
      }
      else
      {
        unsigned int v27 = 0;
      }
      uint64_t v23 = segPumpSendMediaCallback(a1, a2, a3, a5, v13, 0, v16, v31 != 0, v27);
      if (!v23) {
        FigRetainProxyIsInvalidated();
      }
      goto LABEL_47;
    }
LABEL_39:
    uint64_t v23 = 0;
    if (!v13) {
      goto LABEL_49;
    }
    goto LABEL_48;
  }
  size_t v25 = CMBlockBufferGetDataLength(v13);
  uint64_t v26 = segPumpMediaFileHandleCryptData(a1, a2, a3, a5, v13, 0, v25, v31 != 0);
  if (v26 == -12465)
  {
    uint64_t v22 = segPumpHandleMediaFileNetworkError(a1, (void *)a3, 0, (uint64_t)a5, 4294954831);
    goto LABEL_51;
  }
  uint64_t v23 = v26;
  if (v26 == -12463)
  {
    uint64_t v22 = segPumpHandleCryptFailure(a1, a2, a3);
    goto LABEL_51;
  }
LABEL_47:
  if (v13) {
LABEL_48:
  }
    CFRelease(v13);
LABEL_49:
  FigRetainProxyRelease();
  return v23;
}

uint64_t segPumpMoveToNextParallelConnection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a3 + 696;
  uint64_t v7 = *(void *)(*(void *)(a3 + 696) + 8);
  FigGetUpTimeNanoseconds();
  FigRetainProxyRetain();
  uint64_t v8 = a3 + 704;
  uint64_t v9 = *(void **)(a3 + 696);
  while (1)
  {
    uint64_t v10 = (const void *)v9[1];
    if (v10)
    {
      CFRelease(v10);
      *(void *)(*(void *)v6 + 8) = 0;
    }
    if ((long long v11 = *(_OWORD *)v8,
          long long v12 = *(_OWORD *)(a3 + 720),
          *(void *)(v6 + 32) = *(void *)(a3 + 736),
          *(_OWORD *)uint64_t v6 = v11,
          *(_OWORD *)(v6 + 16) = v12,
          *(void *)(a3 + 736) = 0,
          (uint64_t v9 = *(void **)(a3 + 696)) != 0)
      && (v9[4] || v9[13])
      || *(void *)v8 && *(void *)(*(void *)v8 + 8) == v7)
    {
      int v14 = 0;
      int v13 = 1;
    }
    else
    {
      int v13 = 0;
      int v14 = 1;
    }
    uint64_t v15 = (OpaqueCMBlockBuffer *)v9[34];
    if (v15) {
      break;
    }
LABEL_16:
    if (!v13 || v9[4] || v9[13])
    {
      FigGetUpTimeNanoseconds();
LABEL_20:
      uint64_t v18 = 0;
      goto LABEL_21;
    }
  }
  uint64_t v16 = *(void *)(a3 + 880);
  CMBlockBufferGetDataLength(v15);
  uint64_t v17 = segPumpDeliverAccumulatedBuffer(a1, a2, a3, *(void *)(a3 + 696), *(const void **)(*(void *)(a3 + 696) + 8), v14);
  if (!v17)
  {
    if (FigRetainProxyIsInvalidated()) {
      goto LABEL_20;
    }
    if (v16 != *(void *)(a3 + 880)) {
      goto LABEL_20;
    }
    uint64_t v9 = *(void **)v6;
    if (*(void *)(*(void *)v6 + 8) != v7) {
      goto LABEL_20;
    }
    goto LABEL_16;
  }
  uint64_t v18 = v17;
LABEL_21:
  FigRetainProxyRelease();
  return v18;
}

uint64_t segPumpStreamProceedAfterMediaAndKeyArrival(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, int a5, int a6)
{
  if (a4)
  {
    int Type = FigMediaSegmentSpecifierGetType((uint64_t)a4);
    MediaFilePrivateData = segPumpGetMediaFilePrivateData(a4);
    if (Type == 1) {
      goto LABEL_7;
    }
  }
  else
  {
    MediaFilePrivateData = segPumpGetMediaFilePrivateData(0);
  }
  int v14 = MediaFilePrivateData;
  uint64_t v15 = (const void *)MediaFilePrivateData[2];
  if (!v15)
  {
    int Type = 0;
    if (!a5) {
      goto LABEL_31;
    }
    goto LABEL_10;
  }
  CFRelease(v15);
  int Type = 0;
  v14[2] = 0;
LABEL_7:
  if (!a5) {
    goto LABEL_31;
  }
LABEL_10:
  if (*(const void **)(a3 + 264) == a4)
  {
    uint64_t v18 = *(void *)(a3 + 256);
    if (v18)
    {
      if (FigMediaSegmentSpecifierIsFragment(v18)
        || (FigMediaSegmentSpecifierGetPartialSegments(*(void *)(a3 + 256)),
            (const void *)FigCFArrayGetLastValue() != a4))
      {
        segPumpMarkMediaFileAsDelivered((uint64_t *)a3, a4);
        goto LABEL_26;
      }
    }
  }
  segPumpMarkMediaFileAsDelivered((uint64_t *)a3, a4);
  if (!a4 || FigMediaSegmentSpecifierGetType((uint64_t)a4) != 1)
  {
    ++*(void *)(a2 + 8480);
    if (segPumpConnectedInterfaceIsWWAN(a2)) {
      ++*(void *)(a2 + 8488);
    }
    *(double *)(a2 + 8560) = FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)a4) + *(double *)(a2 + 8560);
    *(double *)(a2 + 8568) = *((double *)segPumpGetMediaFilePrivateData(a4) + 10) + *(double *)(a2 + 8568);
    *(int64x2_t *)(a3 + 1104) = vaddq_s64(*(int64x2_t *)(a3 + 1104), vdupq_n_s64(1uLL));
    *(double *)(a3 + 1120) = FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)a4) + *(double *)(a3 + 1120);
    if (*(unsigned char *)(a3 + 816)) {
      ++*(void *)(a3 + 1128);
    }
    if (*(void *)a3 == 1)
    {
      TimeIndouble Seconds = FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)a4);
      uint64_t v17 = 8656;
      goto LABEL_25;
    }
    if (!*(void *)a3)
    {
      TimeIndouble Seconds = FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)a4);
      uint64_t v17 = 8648;
LABEL_25:
      *(double *)(a2 + v17) = TimeInSeconds + *(double *)(a2 + v17);
    }
  }
LABEL_26:
  uint64_t v19 = a2 + 16 * *(void *)a3;
  if (*(void *)(v19 + 384) == a3)
  {
    uint64_t v20 = *(void *)(v19 + 392);
    if (*(unsigned char *)(v20 + 861))
    {
      if (FigMediaSegmentSpecifierGetImputedDate((uint64_t)a4) != 0.0)
      {
        double ImputedDate = FigMediaSegmentSpecifierGetImputedDate((uint64_t)a4);
        *(double *)(v20 + 920) = ImputedDate + FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)a4) * 0.5;
      }
      double PlaylistActiveDurationSecs = FigMediaPlaylistGetPlaylistActiveDurationSecs(*(void *)(a3 + 56));
      double v23 = *((double *)segPumpGetMediaFilePrivateData(a4) + 4) - *(double *)(a3 + 88);
      *(double *)(v20 + 904) = PlaylistActiveDurationSecs
                             - (v23
                              + FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)a4));
    }
  }
LABEL_31:
  if (!a6) {
    return 0;
  }

  return segPumpMoveToNextMedia(a1, a2, a3, Type);
}

uint64_t segPumpShouldPadByteCountForMediaSegment(uint64_t a1, uint64_t a2)
{
  uint64_t result = FigMediaSegmentSpecifierGetContentKeySpecifier(a2);
  if (result)
  {
    uint64_t ContentKeySpecifier = FigMediaSegmentSpecifierGetContentKeySpecifier(a2);
    if (FigContentKeySpecifierGetEncryptionMethod(ContentKeySpecifier) != 3) {
      return 0;
    }
    uint64_t v6 = FigMediaSegmentSpecifierGetContentKeySpecifier(a2);
    if (FigContentKeySpecifierGetEncryptionMethod(v6) == 4) {
      return 0;
    }
    uint64_t result = 0;
    if (a2 && *(unsigned char *)(a1 + 8712))
    {
      if (!FigMediaSegmentSpecifierGetType(a2)) {
        return FigMediaSegmentSpecifierGetBytesToRead(a2) > 0;
      }
      return 0;
    }
  }
  return result;
}

uint64_t segPumpCanAddSegmentToCache(uint64_t *a1, void *a2, const void *a3, unsigned char *a4)
{
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  char v18 = 0;
  if (a4) {
    *a4 = 0;
  }
  if (!a1[37]) {
    return 0;
  }
  if (!a2[8]) {
    return 0;
  }
  int v8 = segPumpSeeIfMediaFileIsInCache((uint64_t)a1, (uint64_t)a2, a3, &v20, &v18);
  if (v8)
  {
    if (v18) {
      return 0;
    }
  }
  if (a4) {
    *a4 = 1;
  }
  MediaFilePrivateData = segPumpGetMediaFilePrivateData(a3);
  uint64_t v10 = MediaFilePrivateData;
  if (v8)
  {
    long long v11 = v20;
    MediaFilePrivateData[13] = v20;
    if (MediaFilePrivateData[5])
    {
      FigStreamingCacheMediaSegmentGetLength(a1[37], a2[8], v11, 0, (unint64_t *)&v19);
      uint64_t v12 = v10[5] - v19;
LABEL_12:
      uint64_t v19 = v12;
      goto LABEL_16;
    }
    uint64_t v12 = 0;
  }
  else if (FigMediaSegmentSpecifierGetBytesToRead((uint64_t)a3))
  {
    uint64_t v12 = FigMediaSegmentSpecifierGetBytesToRead((uint64_t)a3);
    uint64_t v19 = v12;
  }
  else
  {
    uint64_t v12 = v10[5];
    if (v12) {
      goto LABEL_12;
    }
  }
LABEL_16:
  int v13 = (double *)segPumpGetMediaFilePrivateData(a3);
  if (a1[37] && a2[8])
  {
    int v14 = v13;
    if (!v12)
    {
      if (FigMediaSegmentSpecifierGetBytesToRead((uint64_t)a3))
      {
        uint64_t v12 = FigMediaSegmentSpecifierGetBytesToRead((uint64_t)a3);
      }
      else
      {
        uint64_t v12 = 1000000;
        uint64_t v16 = a1[1018];
        if (v16)
        {
          if (*a2 == a1[1052])
          {
            double v17 = (double)*(int *)(v16 + 24);
            uint64_t v12 = (unint64_t)(FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)a3) * v17 * 0.125);
          }
        }
      }
    }
    if (FigStreamingCacheMediaStreamReserveSpaceForByteSize(a1[37], a2[8], (const void *)v12, v14[4])) {
      return 0;
    }
  }
  v10[13] = v20;
  return 1;
}

void segPumpCreateMediaSegmentCache(uint64_t a1, uint64_t a2, const void *a3)
{
  CFTypeRef cf = 0;
  MediaFilePrivateData = (double *)segPumpGetMediaFilePrivateData(a3);
  if ((*(unsigned char *)(a1 + 7998) || !segPumpIsCacheDiskBacked(a1))
    && !segPumpCreateCacheNameFromSegment(a2, (uint64_t)a3, 0, &cf))
  {
    uint64_t v7 = *(void *)(a1 + 296);
    uint64_t v8 = *(void *)(a2 + 64);
    CFTypeRef v9 = cf;
    uint64_t StartOffset = FigMediaSegmentSpecifierGetStartOffset((uint64_t)a3);
    double v11 = MediaFilePrivateData[4];
    TimeIndouble Seconds = FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)a3);
    uint64_t MediaSequence = FigMediaSegmentSpecifierGetMediaSequence((uint64_t)a3);
    if (!FigStreamingCacheMediaStreamCreateMediaSegment(v7, v8, v9, StartOffset, MediaSequence, (void *)MediaFilePrivateData + 13, v11, TimeInSeconds))segPumpSetMediaFilePumpTimeOffsetsArray(a1, a2, a3); {
  }
    }
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t segPumpAppendBytesToCache(uint64_t a1, uint64_t a2, const void *a3, OpaqueCMBlockBuffer *a4, size_t a5, size_t a6, int a7)
{
  MediaFilePrivateData = (char *)segPumpGetMediaFilePrivateData(a3);
  uint64_t result = *(void *)(a1 + 296);
  if (result)
  {
    uint64_t v16 = *(void *)(a2 + 64);
    if (v16)
    {
      char v18 = (_DWORD **)(MediaFilePrivateData + 104);
      uint64_t v17 = *((void *)MediaFilePrivateData + 13);
      if (v17)
      {
        if (a6)
        {
          uint64_t result = FigStreamingCacheMediaSegmentAppendBytes(result, v16, v17, *((void *)MediaFilePrivateData + 15), a4, a5, a6);
          if (result) {
            goto LABEL_12;
          }
        }
        *((void *)MediaFilePrivateData + 15) += a6;
        if (a7)
        {
          unint64_t v20 = 0;
          FigStreamingCacheMediaSegmentGetLength(*(void *)(a1 + 296), *(void *)(a2 + 64), *v18, 0, &v20);
          if (FigMediaSegmentSpecifierGetBytesToRead((uint64_t)a3)
            && (uint64_t v19 = FigMediaSegmentSpecifierGetBytesToRead((uint64_t)a3), v19 != v20))
          {
            uint64_t result = 4294951672;
          }
          else
          {
            uint64_t result = FigStreamingCacheMediaSegmentMarkComplete(*(void *)(a1 + 296), *(void *)(a2 + 64), *v18);
            *char v18 = 0;
          }
LABEL_12:
          if ((int)result > -16244)
          {
            if (result != -15641)
            {
              if (result != -16243) {
                return result;
              }
              uint64_t result = 0;
              *((void *)MediaFilePrivateData + 6) = 0;
              *((void *)MediaFilePrivateData + 7) = 0;
              *(_DWORD *)(MediaFilePrivateData + 71) = 0;
              *((void *)MediaFilePrivateData + 8) = 0;
              *((void *)MediaFilePrivateData + 14) = 0;
              *((void *)MediaFilePrivateData + 15) = 0;
              goto LABEL_20;
            }
          }
          else if ((result + 16246) >= 2 && result != -16249)
          {
            return result;
          }
          uint64_t result = 0;
LABEL_20:
          *char v18 = 0;
          return result;
        }
      }
    }
    return 0;
  }
  return result;
}

uint64_t segPumpStreamUnchainMediaConnIfChaining(uint64_t a1, void *a2, void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = a2[7];
  if (result)
  {
    uint64_t result = FigMediaPlaylistGetPreloadHint(result);
    if (result)
    {
      if ((void *)a2[87] != a3) {
        return 0;
      }
      uint64_t result = segPumpMediaConnectionIsActive((uint64_t)a3);
      if (result)
      {
        uint64_t v8 = (OpaqueCMBlockBuffer *)a3[34];
        size_t v9 = v8 ? CMBlockBufferGetDataLength(v8) : 0;
        uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
        uint64_t v11 = a3[27] - v9;
        a3[37] = UpTimeNanoseconds;
        a3[38] = v11;
        if (a2[99]) {
          return 0;
        }
        uint64_t v12 = a3[31];
        if (v11 >= v12 && v12 > 0) {
          return 0;
        }
        a2[87] = 0;
        segPumpStreamMoveToNextFreeMediaConnection((uint64_t)a2);
        a2[99] = a3;
        uint64_t result = segPumpRealizePreload(a1, a2);
        if (!result)
        {
          if (a2[99])
          {
            if (segPumpStreamHasPreloadHint((uint64_t)a2)
              && (int v13 = (const void *)FigMediaPlaylistGetPreloadHint(a2[7]),
                  segPumpStreamHasPreloadConnectionForSegment(a2, v13, 0)))
            {
              int v14 = *(const void **)(a2[99] + 8);
              uint64_t PreloadHint = (const void *)FigMediaPlaylistGetPreloadHint(a2[7]);
              *(void *)(a2[99] + 8) = PreloadHint;
              if (PreloadHint) {
                CFRetain(PreloadHint);
              }
              if (v14) {
                CFRelease(v14);
              }
              segPumpSetMediaConnectionIsDormant(DerivedStorage, a2[99], 1);
            }
            else
            {
              segPumpStreamCancelPreloadReadAndResetData(DerivedStorage, (uint64_t)a2);
            }
          }
          uint64_t result = segPumpStreamSchedulePreloadHintRead(a1, a2);
          if (!result) {
            return 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t segPumpMediaFileHandleCryptData(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, OpaqueCMBlockBuffer *a5, size_t a6, size_t a7, char a8)
{
  lengthAtOffsetOut[16] = *MEMORY[0x1E4F143B8];
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  CMBlockBufferRef blockBufferOut = 0;
  uint64_t ContentKeySpecifier = FigMediaSegmentSpecifierGetContentKeySpecifier((uint64_t)a4);
  int EncryptionMethod = FigContentKeySpecifierGetEncryptionMethod(ContentKeySpecifier);
  if (!*(unsigned char *)(a2 + 322))
  {
    uint64_t CryptKeyCommonData = FigSignalErrorAt();
    goto LABEL_28;
  }
  int v17 = EncryptionMethod;
  char v18 = (const void *)FigMediaSegmentSpecifierGetContentKeySpecifier((uint64_t)a4);
  uint64_t CryptKeyCommonData = segPumpGetCryptKeyCommonData(v18, &v32, &v31);
  if (CryptKeyCommonData)
  {
LABEL_28:
    uint64_t v27 = CryptKeyCommonData;
LABEL_29:
    if (blockBufferOut) {
      CFRelease(blockBufferOut);
    }
    return v27;
  }
  unsigned int v20 = v17 - 3;
  if (*(unsigned char *)(v31 + 144))
  {
    if (v20 < 0xFFFFFFFE)
    {
      CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
      uint64_t CryptKeyCommonData = CMBlockBufferCreateEmpty(AllocatorForMedia, 0, 0, &blockBufferOut);
      if (!CryptKeyCommonData)
      {
        if (a7 || (a8 & 1) == 0)
        {
          uint64_t v22 = a3;
          if (a7)
          {
            size_t v24 = a7 + a6;
            do
            {
              lengthAtOffsetOut[0] = 0;
              uint64_t CryptKeyCommonData = CMBlockBufferGetDataPointer(a5, a6, lengthAtOffsetOut, 0, 0);
              if (CryptKeyCommonData) {
                goto LABEL_28;
              }
              size_t v25 = lengthAtOffsetOut[0] >= a7 ? a7 : lengthAtOffsetOut[0];
              uint64_t CryptKeyCommonData = segPumpMediaFileCreateDecryptedData(a1, a2, v22, a4, a5, a6, (char *)v25, a8 & (lengthAtOffsetOut[0] + a6 >= v24), blockBufferOut);
              if (CryptKeyCommonData) {
                goto LABEL_28;
              }
              a6 += lengthAtOffsetOut[0];
              a7 -= v25;
            }
            while (a7);
          }
        }
        else
        {
          uint64_t v22 = a3;
          uint64_t CryptKeyCommonData = segPumpMediaFileCreateDecryptedData(a1, a2, a3, a4, a5, a6, 0, 1u, blockBufferOut);
          if (CryptKeyCommonData) {
            goto LABEL_28;
          }
        }
        size_t DataLength = CMBlockBufferGetDataLength(blockBufferOut);
        if ((a8 & 1) == 0 && !DataLength)
        {
          uint64_t v27 = 0;
          goto LABEL_29;
        }
        uint64_t CryptKeyCommonData = segPumpSendMediaCallback(a1, a2, v22, a4, blockBufferOut, 0, DataLength, a8, 0);
      }
      goto LABEL_28;
    }
LABEL_13:
    uint64_t CryptKeyCommonData = segPumpSendMediaCallback(a1, a2, a3, a4, a5, a6, a7, a8, 0);
    goto LABEL_28;
  }
  if (a4 && v20 >= 0xFFFFFFFE && FigMediaSegmentSpecifierGetType((uint64_t)a4) == 1) {
    goto LABEL_13;
  }
  if (dword_1E9351350)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return FigSignalErrorAt();
}

uint64_t segPumpHandleCryptFailure(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(const void **)(*(void *)(a3 + 696) + 8);
  if (v6 && (MediaFilePrivateData = segPumpGetMediaFilePrivateData(v6)) != 0)
  {
    uint64_t v8 = MediaFilePrivateData;
    MediaFilePrivateData[99] = 1;
    uint64_t v9 = *(void *)(a3 + 696);
    uint64_t v10 = *(const void **)(v9 + 8);
    if (*(const void **)(a3 + 256) == v10 || *(const void **)(a3 + 264) == v10) {
      v8[73] = 1;
    }
    v8[97] = 1;
  }
  else
  {
    FigSignalErrorAt();
    uint64_t v9 = *(void *)(a3 + 696);
    uint64_t v10 = *(const void **)(v9 + 8);
  }
  *(unsigned char *)(a3 + 403) = 1;
  if (v10)
  {
    CFRelease(v10);
    *(void *)(*(void *)(a3 + 696) + 8) = 0;
    uint64_t v9 = *(void *)(a3 + 696);
  }
  segPumpStreamDontReuseHTTPRequest(a2, v9);

  return segPumpDeliverNextMediaForSingleStream(a1, a2, a3);
}

uint64_t segPumpHandleMediaFileNetworkError(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v40[16] = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v10 = DerivedStorage;
  uint64_t v11 = (unsigned char *)(DerivedStorage + 8176);
  CFTypeRef cf = 0;
  if (!a3)
  {
    int v13 = (unsigned char *)(DerivedStorage + 8177);
    if (a5 != -12889 || *(unsigned char *)(DerivedStorage + 8177))
    {
LABEL_11:
      uint64_t ErrorForOSStatus = FigCreateErrorForOSStatus(a5, (CFErrorRef *)&cf);
      if (ErrorForOSStatus)
      {
LABEL_55:
        uint64_t v25 = ErrorForOSStatus;
        goto LABEL_62;
      }
LABEL_12:
      if (!a3) {
        goto LABEL_17;
      }
      goto LABEL_13;
    }
LABEL_9:
    uint64_t ErrorForOSStatus = segPumpCreateErrorFromHTTPRequestIfAvailable(0, -1005, (__CFString *)*MEMORY[0x1E4F18F50], 0, (uint64_t *)&cf);
    if (ErrorForOSStatus) {
      goto LABEL_55;
    }
    goto LABEL_12;
  }
  uint64_t v12 = *(void *)(a3 + 16);
  ++*(_DWORD *)(a3 + 64);
  int v13 = v11 + 1;
  if (a5 == -12889 && !v11[1]) {
    goto LABEL_9;
  }
  if (!v12) {
    goto LABEL_11;
  }
  uint64_t ErrorForOSStatus = segPumpCreateErrorFromHTTPRequestIfAvailable(v12, a5, 0, 0, (uint64_t *)&cf);
  if (ErrorForOSStatus) {
    goto LABEL_55;
  }
LABEL_13:
  uint64_t v15 = *(const void **)(a3 + 72);
  CFTypeRef v16 = cf;
  *(void *)(a3 + 72) = cf;
  if (v16) {
    CFRetain(v16);
  }
  if (v15) {
    CFRelease(v15);
  }
LABEL_17:
  int v17 = (const void *)a2[37];
  CFTypeRef v18 = cf;
  a2[37] = cf;
  if (v18) {
    CFRetain(v18);
  }
  if (v17) {
    CFRelease(v17);
  }
  uint64_t v19 = (__CFError *)cf;
  v40[0] = 0;
  uint64_t v39 = 0;
  int Code = CFErrorGetCode((CFErrorRef)cf);
  CFErrorGetDomain(v19);
  CFDictionaryRef v21 = CFErrorCopyUserInfo(v19);
  if (!*(void *)(*(void *)(v10 + 16 * *a2 + 384) + 16))
  {
    uint64_t v24 = 0;
    goto LABEL_41;
  }
  uint64_t v39 = 32;
  if (v11[536])
  {
LABEL_23:
    uint64_t v22 = 5;
LABEL_24:
    v40[0] = v22;
    goto LABEL_28;
  }
  if (FigMediaSegmentSpecifierIsMarkedAsGap(a4))
  {
    v40[0] = 7;
    uint64_t v23 = 48;
    goto LABEL_27;
  }
  if (FigCFEqual())
  {
    if (Code > -12669)
    {
      if (Code == -12465)
      {
        uint64_t v22 = 8;
        goto LABEL_24;
      }
      if (Code != -12668) {
        goto LABEL_72;
      }
    }
    else if ((Code + 12939) >= 2)
    {
      if (Code == -12889)
      {
        uint64_t v22 = 7;
        goto LABEL_24;
      }
      goto LABEL_72;
    }
    uint64_t v34 = 0;
    uint64_t v35 = v10 + 384;
    while (*(void *)(v10 + 8416) == v34 || !*(void *)(*(void *)v35 + 16))
    {
      ++v34;
      v35 += 16;
      if (v34 == 3)
      {
        if (!*(void *)(v10 + 8096)) {
          goto LABEL_23;
        }
        break;
      }
    }
  }
LABEL_72:
  uint64_t CommonActionForNetworkError = segPumpGetCommonActionForNetworkError(v19, v40, &v39);
  if (!CommonActionForNetworkError)
  {
    if (v40[0] != 1)
    {
LABEL_28:
      segPumpModifyErrorActionIfCurrentAlternateIsLastValidAlternate(v10, a2, v40, &v39);
      uint64_t v24 = v40[0];
      if (*v11)
      {
        if (v40[0] != 6 && v40[0] != 3)
        {
LABEL_41:
          uint64_t v25 = 0;
          unsigned int v26 = v39;
          if (!v21) {
            goto LABEL_43;
          }
          goto LABEL_42;
        }
        if ((v39 & 0x10) != 0)
        {
          uint64_t v24 = 9;
LABEL_40:
          v40[0] = v24;
          goto LABEL_41;
        }
      }
      else if ((unint64_t)(v40[0] - 9) >= 0xFFFFFFFFFFFFFFFELL)
      {
        v40[0] = 3;
        goto LABEL_37;
      }
      if (v40[0] != 3) {
        goto LABEL_41;
      }
LABEL_37:
      if (*v13)
      {
        uint64_t v24 = 3;
        goto LABEL_41;
      }
      uint64_t v24 = 6;
      goto LABEL_40;
    }
    v40[0] = 7;
    uint64_t v23 = v39 | 1;
LABEL_27:
    uint64_t v39 = v23;
    goto LABEL_28;
  }
  uint64_t v25 = CommonActionForNetworkError;
  uint64_t v24 = 0;
  unsigned int v26 = 0;
  if (v21) {
LABEL_42:
  }
    CFRelease(v21);
LABEL_43:
  if (v25) {
    goto LABEL_62;
  }
  if (v24 == 3)
  {
    segPumpCancelMediaFileReadAndResetData(v10, (uint64_t)a2, 0, 1);
    uint64_t v28 = (void *)cf;
    uint64_t v29 = a1;
    uint64_t v30 = (uint64_t)a2;
    uint64_t v31 = 3;
LABEL_54:
    uint64_t ErrorForOSStatus = segPumpHandleCommonNetworkError(v29, v30, v31, v26, (const __CFURL **)a3, 1u, v28);
    goto LABEL_55;
  }
  if (v24 != 9)
  {
    if (v24 == 5)
    {
      uint64_t MediaSequence = FigMediaSegmentSpecifierGetMediaSequence(a4);
      segPumpDispatchAsyncMediaDelivery(v10, (uint64_t)a2, MediaSequence, -1, cf, (uint64_t)segPumpReplaceMediaFileWithDiscontinuity);
      goto LABEL_52;
    }
    uint64_t v28 = (void *)cf;
    uint64_t v29 = a1;
    uint64_t v30 = (uint64_t)a2;
    uint64_t v31 = v24;
    goto LABEL_54;
  }
  if (FigMediaSegmentSpecifierIsMarkedAsGap(a4))
  {
    if (dword_1E9351350)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    goto LABEL_61;
  }
LABEL_52:
  segPumpAppendErrorLogEntryWithCFError(a1, v10, (uint64_t)a2, (const __CFURL **)a3, (CFErrorRef)cf, 2u, 3u);
LABEL_61:
  uint64_t v25 = 0;
LABEL_62:
  if (cf) {
    CFRelease(cf);
  }
  return v25;
}

BOOL segPumpIsLastMediaFileDelivering(uint64_t a1, uint64_t a2)
{
  uint64_t NextSegment = (const void *)FigMediaSegmentSpecifierGetNextSegment(a2);
  int HasEndTag = FigMediaPlaylistHasEndTag(*(void *)(a1 + 56));
  BOOL result = 0;
  if (a2 && HasEndTag)
  {
    if (!FigMediaSegmentSpecifierGetType(a2))
    {
      if (!NextSegment) {
        return 1;
      }
      if ((*(_DWORD *)(a1 + 220) & 0x1D) == 1)
      {
        MediaFilePrivateData = (double *)segPumpGetMediaFilePrivateData(NextSegment);
        CMTime v8 = *(CMTime *)(a1 + 208);
        return CMTimeGetSeconds(&v8) <= MediaFilePrivateData[4];
      }
    }
    return 0;
  }
  return result;
}

void segPumpCheckAndMarkStreamCacheComplete(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  CFArrayRef theArray = 0;
  CFTypeRef cf = (CFTypeRef)*MEMORY[0x1E4F1CFC8];
  if (*(void *)(a1 + 296))
  {
    if (*(void *)(a2 + 64))
    {
      uint64_t v5 = *(void *)(a2 + 56);
      if (v5)
      {
        CFArrayRef MediaSegmentSpecifiers = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(v5);
        if (MediaSegmentSpecifiers)
        {
          if (CFArrayGetCount(MediaSegmentSpecifiers) >= 1)
          {
            FigMediaPlaylistGetMediaSegmentSpecifiers(*(void *)(a2 + 56));
            FirstCFNumberRef Value = (const void *)FigCFArrayGetFirstValue();
            MediaFilePrivateData = (double *)segPumpGetMediaFilePrivateData(FirstValue);
            FigMediaPlaylistGetMediaSegmentSpecifiers(*(void *)(a2 + 56));
            if (FigCFArrayGetLastValue() == a3
              && !FigStreamingCacheMediaStreamCopyPersistent(*(void *)(a1 + 296), *(void *)(a2 + 64), &cf))
            {
              CFTypeRef v10 = cf;
              if (cf != (CFTypeRef)*MEMORY[0x1E4F1CFD0]) {
                goto LABEL_19;
              }
              if (!FigStreamingCacheMediaStreamCopyCachedTimeRanges(*(void *)(a1 + 296), *(void *)(a2 + 64), (CFTypeRef *)&theArray)&& CFArrayGetCount(theArray) == 1)
              {
                CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, 0);
                CMTimeRangeMakeFromDictionary(&v12, ValueAtIndex);
                CMTimeValue value = v12.start.value;
                CMTimeScale timescale = v12.start.timescale;
                if ((v12.start.flags & 1) == 0
                  || (v12.duration.flags & 1) == 0
                  || v12.duration.epoch
                  || v12.duration.value < 0)
                {
                  FigSignalErrorAt();
                }
                else
                {
                  v12.start.CMTimeValue value = value;
                  v12.start.CMTimeScale timescale = timescale;
                  if (vabdd_f64(CMTimeGetSeconds(&v12.start), MediaFilePrivateData[4]) < 2.22044605e-16) {
                    FigStreamingCacheMediaStreamMarkComplete(*(void *)(a1 + 296), *(void *)(a2 + 64));
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  CFTypeRef v10 = cf;
LABEL_19:
  if (v10) {
    CFRelease(v10);
  }
  if (theArray) {
    CFRelease(theArray);
  }
}

uint64_t segPumpSendMediaCallback(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, OpaqueCMBlockBuffer *a5, size_t a6, size_t a7, char a8, unsigned int a9)
{
  unsigned int v165 = a9;
  uint64_t v175 = *MEMORY[0x1E4F143B8];
  memset(&v172, 0, sizeof(v172));
  CMBlockBufferRef blockBufferOut = 0;
  memset(&v170, 0, sizeof(v170));
  FigRetainProxyRetain();
  int v169 = 0;
  MediaFilePrivateData = segPumpGetMediaFilePrivateData(a4);
  uint64_t v17 = MediaFilePrivateData;
  unint64_t v160 = MediaFilePrivateData[8];
  unint64_t v162 = MediaFilePrivateData[6];
  size_t v18 = v160 - v162;
  if (v160 > v162)
  {
    if (a7 < v18)
    {
      uint64_t v19 = 0;
      uint64_t Cryptor = 0;
      size_t v21 = MediaFilePrivateData[7] + a7;
      MediaFilePrivateData[6] = v162 + a7;
      MediaFilePrivateData[7] = v21;
      goto LABEL_269;
    }
    size_t v22 = MediaFilePrivateData[7] + v18;
    MediaFilePrivateData[6] = v160;
    MediaFilePrivateData[7] = v22;
    a7 -= v18;
    if (!a7)
    {
      uint64_t v19 = 0;
      uint64_t Cryptor = 0;
      goto LABEL_269;
    }
    a6 += v18;
  }
  if (FigMediaSegmentSpecifierGetBytesToRead((uint64_t)a4) < 1) {
    goto LABEL_16;
  }
  if (!FigMediaSegmentSpecifierGetContentKeySpecifier((uint64_t)a4)) {
    goto LABEL_16;
  }
  uint64_t ContentKeySpecifier = FigMediaSegmentSpecifierGetContentKeySpecifier((uint64_t)a4);
  if (FigContentKeySpecifierGetEncryptionMethod(ContentKeySpecifier) != 3) {
    goto LABEL_16;
  }
  if (!a4 || FigMediaSegmentSpecifierGetType((uint64_t)a4) != 1)
  {
    unint64_t v26 = v17[8] + FigMediaSegmentSpecifierGetBytesToRead((uint64_t)a4);
    uint64_t v27 = v17[6];
    unint64_t v28 = v27 + a7;
    size_t v29 = v26 - v27;
    if (v28 > v26) {
      a7 = v29;
    }
LABEL_16:
    size_t dataLength = a7;
    goto LABEL_17;
  }
  size_t dataLength = a7;
  uint64_t v24 = *(OpaqueCMBlockBuffer **)(a3 + 832);
  if (v24) {
    size_t v25 = CMBlockBufferGetDataLength(v24);
  }
  else {
    size_t v25 = 0;
  }
  if (v25 + dataLength > FigMediaSegmentSpecifierGetBytesToRead((uint64_t)a4)) {
    size_t dataLength = FigMediaSegmentSpecifierGetBytesToRead((uint64_t)a4) - v25;
  }
LABEL_17:
  CFAllocatorRef v30 = *(const __CFAllocator **)(a2 + 56);
  size_t v31 = dataLength;
  if (a5 && dataLength)
  {
    uint64_t MapMediaBBuf = CMBlockBufferCreateWithBufferReference(v30, a5, a6, dataLength, 0, &blockBufferOut);
    if (MapMediaBBuf) {
      goto LABEL_245;
    }
  }
  else
  {
    uint64_t MapMediaBBuf = CMBlockBufferCreateEmpty(v30, 0, 0, &blockBufferOut);
    if (MapMediaBBuf)
    {
LABEL_245:
      uint64_t Cryptor = MapMediaBBuf;
      uint64_t v19 = 0;
      goto LABEL_269;
    }
  }
  if ((a9 & 0x800) != 0)
  {
    valuePtr[0] = 0;
    valuePtr[0] = COERCE_CMBLOCKBUFFERREF(FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)a4));
    CFNumberRef v33 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberDoubleType, valuePtr);
    if (!v33) {
      goto LABEL_244;
    }
    CFNumberRef v34 = v33;
    CMSetAttachment(blockBufferOut, @"FBPAKey_ApproximateDuration", v33, 1u);
    CFRelease(v34);
  }
  if (*((unsigned char *)v17 + 74)) {
    goto LABEL_26;
  }
  if (!a4 || FigMediaSegmentSpecifierGetType((uint64_t)a4) != 1)
  {
    if (blockBufferOut)
    {
      if (!FigMediaSegmentSpecifierIsMarkedAsGap((uint64_t)a4))
      {
        uint64_t v49 = *(void *)(a3 + 288);
        if (v49 != FigMediaSegmentSpecifierGetMapSegmentSpecifier((uint64_t)a4)
          || *(void *)(a3 + 320) != *(void *)(a3 + 304)
          || *(unsigned char *)(a3 + 403))
        {
          if (FigMediaSegmentSpecifierGetMapSegmentSpecifier((uint64_t)a4))
          {
            uint64_t MapSegmentSpecifier = FigMediaSegmentSpecifierGetMapSegmentSpecifier((uint64_t)a4);
            uint64_t MapMediaBBuf = segPumpCreateMapMediaBBuf(a2, a3, MapSegmentSpecifier, (CFTypeRef *)&blockBufferOut);
            if (MapMediaBBuf) {
              goto LABEL_245;
            }
          }
          goto LABEL_68;
        }
      }
      if (blockBufferOut && *(unsigned char *)(a2 + 8712) && *(unsigned char *)(a3 + 862)) {
        unsigned int v165 = (FigMediaSegmentSpecifierGetMapSegmentSpecifier((uint64_t)a4) == 0) | a9;
      }
    }
LABEL_26:
    char v155 = 1;
    goto LABEL_27;
  }
LABEL_68:
  char v155 = 0;
  unsigned int v165 = (*(unsigned char *)(a2 + 8712) != 0) | a9;
LABEL_27:
  int v157 = (unsigned char *)(a2 + 7992);
  if (!FigMediaSegmentSpecifierGetContentKeySpecifier((uint64_t)a4))
  {
    unsigned int v38 = 0;
    uint64_t v39 = 0;
    if (!a4) {
      goto LABEL_99;
    }
    goto LABEL_97;
  }
  uint64_t v35 = (const void *)FigMediaSegmentSpecifierGetContentKeySpecifier((uint64_t)a4);
  uint64_t v167 = 0;
  uint64_t v168 = 0;
  uint64_t CryptKeyCommonData = segPumpGetCryptKeyCommonData(v35, &v168, &v167);
  if (CryptKeyCommonData) {
    goto LABEL_338;
  }
  if (FigContentKeySpecifierGetKeySystem((uint64_t)v35) == 2
    && FigContentKeySpecifierGetEncryptionMethod((uint64_t)v35) == 1
    && (!a4 || FigMediaSegmentSpecifierGetType((uint64_t)a4) != 1))
  {
    uint64_t v40 = v168;
    if (*(void *)(v168 + 40))
    {
      FigMediaSegmentSpecifierGetIV((uint64_t)a4);
      if (FigCFEqual()) {
        goto LABEL_91;
      }
      uint64_t v40 = v168;
      uint64_t v41 = *(const void **)(v168 + 40);
      if (v41)
      {
        CFRelease(v41);
        uint64_t v40 = v168;
        *(void *)(v168 + 40) = 0;
      }
    }
    uint64_t v42 = *(const void **)(v40 + 32);
    IV = (const void *)FigMediaSegmentSpecifierGetIV((uint64_t)a4);
    *(void *)(v168 + 32) = IV;
    if (IV) {
      CFRetain(IV);
    }
    if (v42) {
      CFRelease(v42);
    }
    uint64_t CryptKeyCommonData = segPumpEnsureAndSetupBasicAESProtector(a2);
    if (!CryptKeyCommonData)
    {
      uint64_t v44 = *(void *)(a2 + 248);
      uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
      uint64_t v46 = v168;
      uint64_t v47 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v47) {
        uint64_t v48 = v47;
      }
      else {
        uint64_t v48 = 0;
      }
      uint64_t v51 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint64_t))(v48 + 104);
      if (!v51) {
        goto LABEL_332;
      }
      uint64_t CryptKeyCommonData = v51(v44, AllocatorForMedia, 1, 0, v46 + 40);
      if (!CryptKeyCommonData)
      {
        if (dword_1E9351350)
        {
          *(_DWORD *)&type[4] = 0;
          type[0] = OS_LOG_TYPE_DEFAULT;
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        uint64_t v139 = *(void *)(v168 + 40);
        uint64_t v140 = v167[6];
        uint64_t v141 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v141) {
          uint64_t v142 = v141;
        }
        else {
          uint64_t v142 = 0;
        }
        size_t v31 = dataLength;
        v143 = *(uint64_t (**)(uint64_t, void, uint64_t))(v142 + 56);
        if (!v143) {
          goto LABEL_332;
        }
        uint64_t CryptKeyCommonData = v143(v139, *MEMORY[0x1E4F1FDB8], v140);
        if (!CryptKeyCommonData)
        {
          uint64_t v144 = *(void *)(v168 + 32);
          uint64_t v145 = *(void *)(v168 + 40);
          uint64_t v146 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v146) {
            uint64_t v147 = v146;
          }
          else {
            uint64_t v147 = 0;
          }
          CFTypeRef v61 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v147 + 56);
          if (v61)
          {
            uint64_t v62 = *MEMORY[0x1E4F1FDA8];
            uint64_t v63 = v145;
            uint64_t v64 = v144;
            goto LABEL_88;
          }
LABEL_332:
          uint64_t Cryptor = 4294954514;
LABEL_333:
          uint64_t v19 = 0;
          goto LABEL_269;
        }
      }
    }
    goto LABEL_338;
  }
  if (FigContentKeySpecifierGetKeySystem((uint64_t)v35) == 2
    && FigContentKeySpecifierGetEncryptionMethod((uint64_t)v35) == 2
    && (!a4 || FigMediaSegmentSpecifierGetType((uint64_t)a4) != 1))
  {
    if (*(void *)(v168 + 40)) {
      goto LABEL_83;
    }
    uint64_t CryptKeyCommonData = segPumpEnsureAndSetupBasicAESProtector(a2);
    if (!CryptKeyCommonData)
    {
      if (*(unsigned char *)(a2 + 7992) && !*(void *)a3)
      {
        CFAllocatorRef v53 = (const __CFAllocator *)FigGetAllocatorForMedia();
        CFDictionaryRef v37 = CFDictionaryCreate(v53, (const void **)kFigCPEProtectorCryptorCreationOption_DecryptDestination, (const void **)kFigCPEProtectorCryptorCreationOptionDecryptDestination_Nero, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      }
      else
      {
        CFDictionaryRef v37 = 0;
      }
      uint64_t v54 = *(void *)(a2 + 248);
      uint64_t v55 = FigGetAllocatorForMedia();
      uint64_t Cryptor = FigCPEProtectorCreateCryptor(v54, v55, (uint64_t)v37, v168 + 40);
      if (v37) {
        CFRelease(v37);
      }
      if (Cryptor) {
        goto LABEL_333;
      }
      if (dword_1E9351350)
      {
        *(_DWORD *)&type[4] = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        CFDateRef v56 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        size_t v31 = dataLength;
      }
LABEL_83:
      uint64_t v57 = *(void *)(v168 + 40);
      uint64_t v58 = v167[6];
      uint64_t v59 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v59) {
        uint64_t v60 = v59;
      }
      else {
        uint64_t v60 = 0;
      }
      CFTypeRef v61 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v60 + 56);
      if (v61)
      {
        uint64_t v62 = *MEMORY[0x1E4F1FDB8];
        uint64_t v63 = v57;
        uint64_t v64 = v58;
LABEL_88:
        uint64_t CryptKeyCommonData = v61(v63, v62, v64);
        if (!CryptKeyCommonData)
        {
          uint64_t v65 = *(void *)(a2 + 264);
          if (!v65) {
            goto LABEL_91;
          }
          uint64_t CryptKeyCommonData = FigCPECryptorSetProperty(*(void *)(v168 + 40), *MEMORY[0x1E4F1FDA0], v65);
          if (!CryptKeyCommonData) {
            goto LABEL_91;
          }
        }
        goto LABEL_338;
      }
      goto LABEL_332;
    }
LABEL_338:
    uint64_t Cryptor = CryptKeyCommonData;
    goto LABEL_333;
  }
LABEL_91:
  size_t dataLength = v31;
  if (FigContentKeySpecifierGetEncryptionMethod((uint64_t)v35) == 3)
  {
    unsigned int v38 = 0;
    uint64_t v39 = 0;
    if (!a4) {
      goto LABEL_99;
    }
  }
  else
  {
    uint64_t v39 = *(const void **)(v168 + 40);
    if (!v39) {
      uint64_t v39 = (const void *)v167[8];
    }
    unsigned int v38 = (const void *)v167[13];
    if (!a4) {
      goto LABEL_99;
    }
  }
LABEL_97:
  if (FigMediaSegmentSpecifierGetType((uint64_t)a4) == 1)
  {
    uint64_t v156 = 0;
LABEL_106:
    char v68 = a8;
LABEL_107:
    if (blockBufferOut && v39 && *(unsigned char *)(a2 + 322)) {
      CMSetAttachment(blockBufferOut, @"FBPAKey_Decryptor", v39, 1u);
    }
LABEL_111:
    if (blockBufferOut && v38 && *(unsigned char *)(a2 + 322)) {
      CMSetAttachment(blockBufferOut, @"FBPAKey_AudioDecryptor", v38, 1u);
    }
    BOOL IsLastMediaFileDelivering = segPumpIsLastMediaFileDelivering(a3, (uint64_t)a4);
    if ((v68 & 1) != 0 && IsLastMediaFileDelivering)
    {
      v165 |= 2u;
      segPumpCheckAndMarkStreamCacheComplete(a2, a3, *(void *)(a3 + 256));
    }
    if (*(unsigned char *)(a3 + 864)) {
      int v70 = v165 | 0x1000;
    }
    else {
      int v70 = v165;
    }
    if (*(unsigned char *)(a3 + 865)) {
      int v71 = v70 | 0x2000;
    }
    else {
      int v71 = v70;
    }
    if (*(unsigned char *)(a3 + 862))
    {
      *(unsigned char *)(a3 + 862) = 0;
      if (!*(unsigned char *)(a3 + 857)) {
        v71 |= 4u;
      }
    }
    if (*(unsigned char *)(a3 + 863))
    {
      *(unsigned char *)(a3 + 863) = 0;
      v71 |= 0x200u;
    }
    if (*(unsigned char *)(a3 + 403))
    {
      v71 |= 1u;
      *(unsigned char *)(a3 + 403) = 0;
    }
    if (a4 && *(unsigned char *)(a3 + 856) && !FigMediaSegmentSpecifierGetType((uint64_t)a4))
    {
      *(unsigned char *)(a3 + 856) = 0;
      v71 |= 0x4000u;
    }
    if (*(unsigned char *)(a2 + 8712))
    {
      if (v160 > v162 || !*((unsigned char *)v17 + 74)) {
        v71 |= 0x10u;
      }
      if (a4) {
        BOOL v72 = FigMediaSegmentSpecifierGetType((uint64_t)a4) == 0;
      }
      else {
        BOOL v72 = 0;
      }
      if (v72 && (v68 & 1) != 0) {
        v71 |= 0x20u;
      }
    }
    if (*((unsigned char *)v17 + 74)) {
      int v74 = v71;
    }
    else {
      int v74 = v71 | 0x100;
    }
    unsigned int v165 = v74;
    if (a4 && (v74 & 0x20) != 0 && !FigMediaSegmentSpecifierGetType((uint64_t)a4))
    {
      FigGetUpTimeNanoseconds();
      *(_OWORD *)(a2 + 8824) = 0u;
    }
    if (v68)
    {
      uint64_t v75 = *(void *)(a3 + 56);
      if (v75)
      {
        FigMediaPlaylistGetMediaSegmentSpecifiers(v75);
        LastCFNumberRef Value = FigCFArrayGetLastValue();
        int v77 = v165 | 0xC0;
        if ((const void *)LastValue != a4) {
          int v77 = v165 | 0x40;
        }
        unsigned int v165 = v77;
      }
      else
      {
        v165 |= 0x40u;
      }
    }
    long long v153 = *MEMORY[0x1E4F1F9F8];
    *(_OWORD *)&v172.CMTimeValue value = *MEMORY[0x1E4F1F9F8];
    CMTimeEpoch v151 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
    v172.CMTimeEpoch epoch = v151;
    if (*((unsigned char *)v17 + 74))
    {
      int v161 = 0;
      uint64_t DateStamp = 0;
LABEL_246:
      if (*(unsigned char *)(a3 + 404)) {
        v17[6] += dataLength;
      }
      if (!a4 || FigMediaSegmentSpecifierGetType((uint64_t)a4) != 1) {
        goto LABEL_265;
      }
      if (blockBufferOut)
      {
        size_t v106 = CMBlockBufferGetDataLength(blockBufferOut);
        if (FigMediaSegmentSpecifierGetBytesToRead((uint64_t)a4) >= 1)
        {
          double v107 = *(OpaqueCMBlockBuffer **)(a3 + 832);
          size_t v108 = v107 ? CMBlockBufferGetDataLength(v107) : 0;
          if (v108 + v106 > FigMediaSegmentSpecifierGetBytesToRead((uint64_t)a4)) {
            size_t v106 = FigMediaSegmentSpecifierGetBytesToRead((uint64_t)a4) - v108;
          }
        }
        char v68 = a8;
        if (v106)
        {
          valuePtr[0] = 0;
          segPumpGetMediaDataMemoryPool(a2);
          uint64_t ContiguousBlockBuffer = FigMemoryPoolCreateContiguousBlockBuffer();
          if (ContiguousBlockBuffer)
          {
            uint64_t Cryptor = ContiguousBlockBuffer;
            goto LABEL_268;
          }
          uint64_t v110 = *(OpaqueCMBlockBuffer **)(a3 + 832);
          if (v110)
          {
            uint64_t Cryptor = CMBlockBufferAppendBufferReference(v110, valuePtr[0], 0, 0, 0);
            CFRelease(valuePtr[0]);
            if (Cryptor) {
              goto LABEL_268;
            }
          }
          else
          {
            *(CMBlockBufferRef *)(a3 + 832) = valuePtr[0];
          }
        }
        v165 |= 0x8000u;
      }
      if (v68)
      {
        uint64_t v122 = *(void **)(a3 + 832);
        valuePtr[0] = 0;
        time2.CMTimeValue value = 0;
        uint64_t v123 = segPumpCreateCacheNameFromSegment(a3, (uint64_t)a4, &time2, valuePtr);
        if (v123)
        {
          uint64_t Cryptor = v123;
        }
        else
        {
          uint64_t v124 = *(void *)(a2 + 296);
          if (v124)
          {
            uint64_t v125 = *(void *)(a3 + 64);
            uint64_t v150 = a1;
            CMTimeValue v126 = (CMTimeValue)valuePtr[0];
            uint64_t StartOffset = FigMediaSegmentSpecifierGetStartOffset((uint64_t)a4);
            uint64_t MediaSequence = FigMediaSegmentSpecifierGetMediaSequence((uint64_t)a4);
            uint64_t v129 = (const void *)v126;
            a1 = v150;
            if (!FigStreamingCacheAddMediaMap(v124, v125, v129, StartOffset, MediaSequence, v122)) {
              goto LABEL_302;
            }
          }
          CMTimeValue value = (const void *)time2.value;
          uint64_t v131 = FigMediaSegmentSpecifierGetStartOffset((uint64_t)a4);
          uint64_t v132 = FigMediaSegmentSpecifierGetBytesToRead((uint64_t)a4);
          uint64_t Cryptor = segPumpSaveEntry(a2, value, v131, v132, (CMBlockBufferRef)v122, 0, 0, 0, 0);
          if (!Cryptor)
          {
LABEL_302:
            uint64_t Cryptor = 0;
            *((unsigned char *)segPumpGetMediaFilePrivateData(a4) + 98) = 1;
          }
        }
        if (time2.value) {
          CFRelease((CFTypeRef)time2.value);
        }
        if (valuePtr[0]) {
          CFRelease(valuePtr[0]);
        }
        uint64_t v133 = *(const void **)(a3 + 832);
        if (v133)
        {
          CFRelease(v133);
          *(void *)(a3 + 832) = 0;
        }
        size_t v111 = dataLength;
        if (Cryptor) {
          goto LABEL_268;
        }
      }
      else
      {
LABEL_265:
        size_t v111 = dataLength;
      }
      if (*(unsigned char *)(a3 + 871)) {
        goto LABEL_267;
      }
      *(_OWORD *)&v170.CMTimeValue value = v153;
      v170.CMTimeEpoch epoch = v151;
      int v113 = *(const void **)(a2 + 176);
      ++*(void *)(a2 + 184);
      uint64_t v114 = *(void *)(a3 + 304);
      *(CMTime *)unsigned int valuePtr = v172;
      uint64_t Cryptor = segPumpMakeDataCallbackWithOSStatus(a1, (uint64_t *)a3, v113, (uint64_t)blockBufferOut, v165, v114, (uint64_t)valuePtr, DateStamp, v161, 0, (uint64_t)&v170, &v169);
      --*(void *)(a2 + 184);
      if (!FigRetainProxyIsInvalidated() && Cryptor != -15626)
      {
        if (Cryptor) {
          goto LABEL_268;
        }
        char v115 = v169;
        if (*(unsigned char *)(a3 + 404) && (v169 & 1) == 0) {
          v17[7] += v111;
        }
        if ((v115 & 2) == 0 || (v165 & 0x40) == 0) {
          goto LABEL_287;
        }
        int v169 = 0;
        uint64_t v116 = *(const void **)(a2 + 176);
        uint64_t v117 = *(void *)(a3 + 304);
        *(CMTime *)unsigned int valuePtr = v172;
        unsigned int v165 = v165 & 0x1000 | 0x10000;
        uint64_t Cryptor = segPumpMakeDataCallbackWithOSStatus(a1, (uint64_t *)a3, v116, 0, v165, v117, (uint64_t)valuePtr, DateStamp, 0, 0, (uint64_t)&v170, &v169);
        if (!FigRetainProxyIsInvalidated() && Cryptor != -15626)
        {
          if (Cryptor) {
            goto LABEL_268;
          }
LABEL_287:
          if (!a4 || FigMediaSegmentSpecifierGetType((uint64_t)a4) != 1)
          {
            uint64_t v118 = *(const void **)(a3 + 232);
            if (v118)
            {
              CFRelease(v118);
              *(void *)(a3 + 232) = 0;
            }
            CFArrayRef v119 = *(const void **)(a3 + 240);
            if (v119)
            {
              CFRelease(v119);
              *(void *)(a3 + 240) = 0;
            }
          }
          if (*(void *)(a2 + 296))
          {
            if (*(void *)a3 == *(void *)(a2 + 8416) && (v170.flags & 1) != 0)
            {
              *(CMTime *)unsigned int valuePtr = v170;
              CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
              if ((CMTimeCompare((CMTime *)valuePtr, &time2) & 0x80000000) == 0)
              {
                uint64_t v120 = *(void *)(a2 + 296);
                *(CMTime *)unsigned int valuePtr = v170;
                double Seconds = CMTimeGetSeconds((CMTime *)valuePtr);
                FigStreamingCacheHintPlaybackTime(v120, Seconds);
              }
            }
          }
LABEL_267:
          uint64_t Cryptor = 0;
LABEL_268:
          uint64_t v19 = (const void *)v156;
          goto LABEL_269;
        }
      }
      uint64_t v19 = (const void *)v156;
      goto LABEL_271;
    }
    if (v160 <= v162)
    {
      if (*(unsigned char *)(a2 + 8712))
      {
        if (!a4)
        {
          BOOL v78 = 0;
          goto LABEL_183;
        }
      }
      else
      {
        if (!a4 || *(unsigned char *)(a2 + 8002)) {
          goto LABEL_181;
        }
        if (!FigMediaSegmentSpecifierGetType((uint64_t)a4))
        {
          BOOL v78 = 1;
          goto LABEL_183;
        }
        if (!*(unsigned char *)(a2 + 8712))
        {
LABEL_181:
          int v81 = *(unsigned __int8 *)(a2 + 8002);
          BOOL v78 = v81 == 1;
          if (!a4 || v81 == 1)
          {
LABEL_183:
            *((unsigned char *)v17 + 74) = 1;
            if (v155)
            {
LABEL_192:
              if (*(unsigned char *)(a3 + 857))
              {
                int v161 = 0;
                *(unsigned char *)(a3 + 857) = 0;
                v165 |= 8u;
                if (*(void *)(a2 + 8416) == *(void *)a3)
                {
                  int v161 = *(_DWORD *)(a2 + 8680);
                  *(_DWORD *)(a2 + 8680) = 0;
                }
              }
              else
              {
                int v161 = 0;
              }
              uint64_t DateStamp = FigMediaSegmentSpecifierGetDateStamp((uint64_t)a4);
              if (v78)
              {
                CFAbsoluteTimeGetCurrent();
                if (DateStamp) {
                  MEMORY[0x199707BD0](DateStamp, v84);
                }
                else {
                  FigMediaSegmentSpecifierGetImputedDate((uint64_t)a4);
                }
                CMTimeMakeWithSeconds(&v172, *((Float64 *)v17 + 4), 90000);
                uint64_t v167 = 0;
                uint64_t v168 = 0;
                *(void *)os_log_type_t type = 0;
                segPumpGetCryptorInfoFromBBuf(blockBufferOut, @"FBPAKey_Decryptor", &v168, &type[4]);
                segPumpGetCryptorInfoFromBBuf(blockBufferOut, @"FBPAKey_AudioDecryptor", &v167, type);
                if (*(void *)(a2 + 296))
                {
                  unsigned int v85 = 1;
                  if (*(unsigned char *)(a2 + 7996))
                  {
                    if (*(unsigned char *)(a2 + 7997)) {
                      unsigned int v85 = 1;
                    }
                    else {
                      unsigned int v85 = 2;
                    }
                  }
                }
                else
                {
                  unsigned int v85 = 1;
                }
                if (v85 <= dword_1E9351350)
                {
                  uint64_t v158 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  os_log_type_enabled(v158, OS_LOG_TYPE_DEFAULT);
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                  char v68 = a8;
                }
              }
              goto LABEL_246;
            }
            int v82 = *(const void **)(a3 + 288);
            if (v82)
            {
              CFRelease(v82);
              *(void *)(a3 + 288) = 0;
            }
            if (a4 && FigMediaSegmentSpecifierGetType((uint64_t)a4) == 1)
            {
              *(void *)(a3 + 288) = a4;
              uint64_t v83 = a4;
            }
            else
            {
              uint64_t v83 = (const void *)FigMediaSegmentSpecifierGetMapSegmentSpecifier((uint64_t)a4);
              *(void *)(a3 + 288) = v83;
              if (!v83)
              {
LABEL_191:
                *(void *)(a3 + 320) = *(void *)(a3 + 304);
                goto LABEL_192;
              }
            }
            CFRetain(v83);
            goto LABEL_191;
          }
        }
      }
    }
    else
    {
      BOOL v78 = 0;
      if (!a4 || !*(unsigned char *)(a2 + 8712)) {
        goto LABEL_183;
      }
    }
    BOOL v78 = FigMediaSegmentSpecifierGetType((uint64_t)a4) == 0;
    goto LABEL_183;
  }
LABEL_99:
  uint64_t v156 = 0;
  if (*(void *)a3 != *(void *)(a2 + 8416) || v39) {
    goto LABEL_106;
  }
  CFNumberRef v66 = *(const __CFNumber **)(a2 + 264);
  if (!v66 && (*(_DWORD *)(a2 + 288) & 0x80000000) != 0)
  {
    uint64_t v156 = 0;
    char v68 = a8;
    goto LABEL_111;
  }
  __int16 v67 = (const void **)(a2 + 272);
  if (*(void *)(a2 + 272))
  {
    if (v38)
    {
      uint64_t v156 = 0;
LABEL_171:
      char v68 = a8;
LABEL_172:
      uint64_t v39 = *v67;
      goto LABEL_107;
    }
    if (*(void *)(a2 + 280))
    {
      uint64_t v156 = 0;
      unsigned int v38 = *(const void **)(a2 + 280);
      goto LABEL_171;
    }
  }
  valuePtr[0] = 0;
  time2.CMTimeValue value = 0;
  int v79 = *(_DWORD *)(a2 + 288);
  if (v79 == 1)
  {
    CMTimeValue v80 = 2;
  }
  else
  {
    CMTimeValue v80 = 0;
    if (v79) {
      goto LABEL_211;
    }
    CMTimeValue v80 = 1;
  }
  time2.CMTimeValue value = v80;
LABEL_211:
  if (v66)
  {
    CFNumberGetValue(v66, kCFNumberSInt64Type, valuePtr);
    CMTimeValue v80 = time2.value;
    CMTimeValue v86 = (CMTimeValue)valuePtr[0];
  }
  else
  {
    CMTimeValue v86 = 0;
  }
  v154 = (uint64_t *)(a2 + 272);
  if (v80 <= v86)
  {
    __int16 v88 = *(const void **)(a2 + 264);
    if (!v88)
    {
LABEL_244:
      uint64_t MapMediaBBuf = FigSignalErrorAt();
      goto LABEL_245;
    }
    uint64_t v87 = (void *)CFRetain(v88);
  }
  else
  {
    uint64_t v87 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt64Type, &time2);
  }
  uint64_t v156 = (uint64_t)v87;
  if (!v87) {
    goto LABEL_244;
  }
  uint64_t v89 = segPumpEnsureAndSetupBasicAESProtector(a2);
  if (!v89)
  {
    uint64_t v90 = a1;
    if (*v157)
    {
      CFIndex v91 = (void *)(a2 + 272);
      if (*(void *)a3)
      {
        CFDictionaryRef v92 = 0;
      }
      else
      {
        CFAllocatorRef v93 = (const __CFAllocator *)FigGetAllocatorForMedia();
        CFDictionaryRef v92 = CFDictionaryCreate(v93, (const void **)kFigCPEProtectorCryptorCreationOption_DecryptDestination, (const void **)kFigCPEProtectorCryptorCreationOptionDecryptDestination_Nero, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      }
    }
    else
    {
      CFDictionaryRef v92 = 0;
      CFIndex v91 = (void *)(a2 + 272);
    }
    if (*v91)
    {
      uint64_t Cryptor = 0;
    }
    else
    {
      uint64_t v94 = *(void *)(a2 + 248);
      uint64_t v95 = FigGetAllocatorForMedia();
      uint64_t Cryptor = FigCPEProtectorCreateCryptor(v94, v95, (uint64_t)v92, (uint64_t)v91);
    }
    a1 = v90;
    if (v92) {
      CFRelease(v92);
    }
    if (Cryptor) {
      goto LABEL_268;
    }
    uint64_t v96 = *v154;
    char v68 = a8;
    if (!*v157)
    {
      uint64_t v97 = FigCPECryptorSetProperty(*v154, *MEMORY[0x1E4F1FDA0], v156);
      if (v97) {
        goto LABEL_320;
      }
      uint64_t v96 = *v154;
    }
    uint64_t v98 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v98) {
      uint64_t v99 = v98;
    }
    else {
      uint64_t v99 = 0;
    }
    unsigned int v100 = *(uint64_t (**)(uint64_t))(v99 + 56);
    if (!v100) {
      goto LABEL_321;
    }
    uint64_t v148 = *MEMORY[0x1E4F1CFD0];
    uint64_t v149 = *MEMORY[0x1E4F1FDF8];
    uint64_t v97 = v100(v96);
    if (v97) {
      goto LABEL_320;
    }
    v152 = (const void **)(a2 + 280);
    uint64_t v101 = *(const void **)(a2 + 280);
    if (!v101)
    {
      uint64_t v102 = *(void *)(a2 + 248);
      uint64_t v103 = FigGetAllocatorForMedia();
      uint64_t v97 = FigCPEProtectorCreateCryptor(v102, v103, 0, (uint64_t)v152);
      if (v97) {
        goto LABEL_320;
      }
      uint64_t v101 = *v152;
    }
    uint64_t v104 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v105 = v104 ? v104 : 0;
    v134 = *(uint64_t (**)(const void *, void, uint64_t))(v105 + 56);
    if (!v134) {
      goto LABEL_321;
    }
    uint64_t v97 = v134(v101, *MEMORY[0x1E4F1FDA0], v156);
    if (v97) {
      goto LABEL_320;
    }
    uint64_t v135 = *v152;
    uint64_t v136 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v137 = v136 ? v136 : 0;
    v138 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v137 + 56);
    if (!v138)
    {
LABEL_321:
      uint64_t Cryptor = 4294954514;
      goto LABEL_268;
    }
    uint64_t v97 = v138(v135, v149, v148);
    if (!v97)
    {
      if (!v38) {
        unsigned int v38 = *v152;
      }
      __int16 v67 = (const void **)(a2 + 272);
      goto LABEL_172;
    }
LABEL_320:
    uint64_t Cryptor = v97;
    goto LABEL_268;
  }
  uint64_t Cryptor = v89;
  uint64_t v19 = (const void *)v156;
LABEL_269:
  if ((v165 & 2) != 0)
  {
    *(unsigned char *)(a3 + 871) = 1;
    *(unsigned char *)(a3 + 1136) = 1;
  }
LABEL_271:
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  if (v19) {
    CFRelease(v19);
  }
  FigRetainProxyRelease();
  return Cryptor;
}

uint64_t segPumpSeeIfMediaFileIsInCache(uint64_t a1, uint64_t a2, const void *a3, void *a4, unsigned char *a5)
{
  MediaFilePrivateData = (char *)segPumpGetMediaFilePrivateData(a3);
  uint64_t v22 = 0;
  CFTypeRef cf = 0;
  char v21 = 0;
  if (!*(void *)(a1 + 296)) {
    return 0;
  }
  if (!*(void *)(a2 + 64)) {
    return 0;
  }
  uint64_t v11 = MediaFilePrivateData;
  if (segPumpCreateCacheNameFromSegment(a2, (uint64_t)a3, 0, &cf)) {
    return 0;
  }
  uint64_t v12 = *(void *)(a1 + 296);
  int v13 = *(void **)(a2 + 64);
  CFTypeRef v14 = cf;
  uint64_t StartOffset = FigMediaSegmentSpecifierGetStartOffset((uint64_t)a3);
  int MediaSegmentAtOffset = FigStreamingCacheMediaStreamGetMediaSegmentAtOffset(v12, v13, (uint64_t)v14, StartOffset, &v21, &v22);
  if (MediaSegmentAtOffset == -16243)
  {
    uint64_t v17 = *(void *)(a1 + 296);
    uint64_t v18 = *(void *)(a2 + 64);
    uint64_t MediaSequence = FigMediaSegmentSpecifierGetMediaSequence((uint64_t)a3);
    int MediaSegmentAtOffset = FigStreamingCacheMediaStreamGetMediaSegmentWithMediaSequenceNumber(v17, v18, MediaSequence, &v21, &v22);
  }
  CFRelease(cf);
  if (MediaSegmentAtOffset)
  {
    if (*((void *)v11 + 13))
    {
      uint64_t result = 0;
      *((void *)v11 + 6) = 0;
      *((void *)v11 + 7) = 0;
      *(_DWORD *)(v11 + 71) = 0;
      *((void *)v11 + 8) = 0;
      *((void *)v11 + 14) = 0;
      *((void *)v11 + 15) = 0;
      *((void *)v11 + 13) = 0;
      if (!a5) {
        return result;
      }
    }
    else
    {
      uint64_t result = 0;
      if (!a5) {
        return result;
      }
    }
    goto LABEL_15;
  }
  if (a4) {
    *a4 = v22;
  }
  uint64_t result = 1;
  if (a5) {
LABEL_15:
  }
    *a5 = v21;
  return result;
}

uint64_t segPumpCreateCacheNameFromSegment(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  CFTypeRef v15 = 0;
  CFTypeRef cf = 0;
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFStringRef URLString = (const __CFString *)FigMediaSegmentSpecifierGetURLString(a2);
  CFURLRef v10 = CFURLCreateWithString(AllocatorForMedia, URLString, *(CFURLRef *)(a1 + 24));
  if (v10 || (uint64_t v11 = FigSignalErrorAt(), !v11))
  {
    uint64_t v11 = segPumpCreateURLAndString(v10, &cf, &v15);
    if (!v11)
    {
      if (a3)
      {
        CFTypeRef v12 = cf;
        if (cf) {
          CFTypeRef v12 = CFRetain(cf);
        }
        *a3 = v12;
      }
      if (a4)
      {
        CFTypeRef v13 = v15;
        if (v15) {
          CFTypeRef v13 = CFRetain(v15);
        }
        *a4 = v13;
      }
    }
    if (v10) {
      CFRelease(v10);
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v15) {
    CFRelease(v15);
  }
  return v11;
}

BOOL segPumpIsCacheDiskBacked(uint64_t a1)
{
  CFTypeRef cf = (CFTypeRef)*MEMORY[0x1E4F1CFC8];
  uint64_t v1 = *(void *)(a1 + 296);
  uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
  FigStreamingCacheCopyProperty(v1, @"FSC_IsDiskBacked", AllocatorForMedia, &cf);
  CFTypeRef v3 = (CFTypeRef)*MEMORY[0x1E4F1CFD0];
  CFTypeRef v4 = cf;
  if (cf) {
    CFRelease(cf);
  }
  return v3 == v4;
}

uint64_t segPumpSetMediaFilePumpTimeOffsetsArray(uint64_t a1, uint64_t a2, const void *a3)
{
  MediaFilePrivateData = segPumpGetMediaFilePrivateData(a3);
  CFArrayRef v6 = (const __CFArray *)*((void *)MediaFilePrivateData + 16);
  if (!v6 || CFArrayGetCount(v6) < 2) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 296);
  uint64_t v8 = *(void *)(a2 + 64);
  uint64_t v9 = *((void *)MediaFilePrivateData + 13);
  CFURLRef v10 = (const void *)*((void *)MediaFilePrivateData + 16);

  return FigStreamingCacheMediaSegmentSetDuplicateSegments(v7, v8, v9, v10);
}

uint64_t segPumpStreamMoveToNextFreeMediaConnection(uint64_t a1)
{
  double v2 = *(void **)(a1 + 696);
  if (!v2) {
    double v2 = *(void **)(a1 + 680);
  }
  CFTypeRef v3 = v2;
  while (1)
  {
    CFTypeRef v3 = (void *)*v3;
    if (!v3) {
      CFTypeRef v3 = *(void **)(a1 + 680);
    }
    uint64_t result = segPumpMediaConnectionIsActive((uint64_t)v3);
    if (!result) {
      break;
    }
    if (v3 == v2)
    {
      CFTypeRef v3 = v2;
      break;
    }
  }
  *(void *)(a1 + 696) = v3;
  return result;
}

uint64_t segPumpSetMediaConnectionIsDormant(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v4 = *(void *)(a2 + 32);
    if (v4)
    {
      if (a3) {
        uint64_t v5 = (uint64_t *)MEMORY[0x1E4F1CFD0];
      }
      else {
        uint64_t v5 = (uint64_t *)MEMORY[0x1E4F1CFC8];
      }
      uint64_t VTable = CMBaseObjectGetVTable();
      uint64_t v8 = *(void *)(VTable + 8);
      uint64_t result = VTable + 8;
      uint64_t v7 = v8;
      if (v8) {
        uint64_t v9 = v7;
      }
      else {
        uint64_t v9 = 0;
      }
      CFTypeRef v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 56);
      if (v16)
      {
        uint64_t v17 = 0x1EE57B898;
        uint64_t v18 = *v5;
        uint64_t v19 = v4;
        return v16(v19, v17, v18);
      }
    }
    else
    {
      uint64_t v10 = *(void *)(a2 + 104);
      if (v10)
      {
        uint64_t v11 = *(void *)(result + 80);
        uint64_t v12 = CMBaseObjectGetVTable();
        uint64_t v14 = *(void *)(v12 + 16);
        uint64_t result = v12 + 16;
        uint64_t v13 = v14;
        uint64_t v15 = v14 ? v13 : 0;
        CFTypeRef v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 40);
        if (v16)
        {
          uint64_t v19 = v11;
          uint64_t v17 = v10;
          uint64_t v18 = a3;
          return v16(v19, v17, v18);
        }
      }
    }
  }
  return result;
}

uint64_t segPumpStreamSchedulePreloadHintRead(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = segPumpStreamHasPreloadHint((uint64_t)a2);
  if (result)
  {
    uint64_t result = segPumpShouldDoSegmentReadAheads((unsigned char *)DerivedStorage);
    if (result)
    {
      uint64_t result = segPumpStreamGetFuturePreloadCount(DerivedStorage, a2);
      if (result)
      {
        if (segPumpMediaConnectionIsActive(a2[99])) {
          return 0;
        }
        uint64_t PreloadHint = (const void *)FigMediaPlaylistGetPreloadHint(a2[7]);
        CFURLRef v7 = (const __CFURL *)a2[2];
        CFURLRef v8 = (const __CFURL *)a2[3];
        MediaFilePrivateData = segPumpGetMediaFilePrivateData(PreloadHint);
        segPumpEnsureMediaSegmentURLs(PreloadHint, v7, v8);
        if (MediaFilePrivateData[2])
        {
          uint64_t v10 = (void *)a2[85];
          if (v10)
          {
            while (!segPumpMediaConnectionIncludesMedia((uint64_t)a2, (uint64_t)v10, PreloadHint))
            {
              uint64_t v10 = (void *)*v10;
              if (!v10) {
                goto LABEL_9;
              }
            }
            return 0;
          }
LABEL_9:
          uint64_t v11 = a2[87];
          if (v11) {
            uint64_t v12 = *(void *)(v11 + 32);
          }
          else {
            uint64_t v12 = 0;
          }
          if ((uint64_t)a2[97] >= 1)
          {
            uint64_t v13 = 0;
            do
            {
              if (*(unsigned char *)(DerivedStorage + 329)) {
                uint64_t v14 = 1;
              }
              else {
                uint64_t v14 = *(int *)(DerivedStorage + 8212);
              }
              if (v13 >= v14) {
                break;
              }
              uint64_t v15 = *(void *)(a2[96] + 8 * v13);
              if (!v15) {
                break;
              }
              if (!segPumpMediaConnectionIsActive(v15)) {
                uint64_t v12 = *(void *)(*(void *)(a2[96] + 8 * v13) + 32);
              }
              ++v13;
            }
            while (v13 < a2[97]);
          }
          *((void *)segPumpGetMediaFilePrivateData(PreloadHint) + 6) = 0;
          *((void *)segPumpGetMediaFilePrivateData(PreloadHint) + 7) = 0;
          uint64_t result = segPumpReadMediaFile(a1, a2, PreloadHint, 1, 0, v12, a2 + 99);
          if (!result)
          {
            segPumpSetMediaConnectionIsDormant(DerivedStorage, a2[99], 1);
            return 0;
          }
        }
        else
        {
          return FigSignalErrorAt();
        }
      }
    }
  }
  return result;
}

BOOL segPumpShouldDoSegmentReadAheads(unsigned char *a1)
{
  if (a1[329]) {
    return 1;
  }
  if (!a1[8209] || !a1[7998] && segPumpIsCacheDiskBacked((uint64_t)a1)) {
    return 0;
  }
  if (a1[330]) {
    return 1;
  }
  uint64_t v3 = 0;
  uint64_t v4 = a1 + 384;
  double TimeDeliveredFromBeginningForVOD = 1.79769313e308;
  do
  {
    uint64_t v6 = *(void *)&v4[v3];
    if (*(void *)(v6 + 16)
      && !*(unsigned char *)(v6 + 1136)
      && TimeDeliveredFromBeginningForVOD >= segPumpStreamGetTimeDeliveredFromBeginningForVOD(*(void *)&v4[v3]))
    {
      double TimeDeliveredFromBeginningForVOD = segPumpStreamGetTimeDeliveredFromBeginningForVOD(v6);
    }
    v3 += 16;
  }
  while (v3 != 48);
  return TimeDeliveredFromBeginningForVOD > 120.0;
}

uint64_t segPumpStreamGetFuturePreloadCount(uint64_t a1, void *a2)
{
  if (segPumpStreamShouldYieldToTrialSwitch(a1, a2)) {
    return 0;
  }
  uint64_t result = a2[7];
  if (result)
  {
    FigMediaPlaylistGetMediaSegmentSpecifiers(result);
    uint64_t result = FigCFArrayGetLastValue();
    if (result)
    {
      LastCFNumberRef Value = (const void *)result;
      CFArrayRef PartialSegments = (const __CFArray *)FigMediaSegmentSpecifierGetPartialSegments(result);
      if (PartialSegments && CFArrayGetCount(PartialSegments) >= 1) {
        LastCFNumberRef Value = (const void *)FigCFArrayGetLastValue();
      }
      int IsFragment = FigMediaSegmentSpecifierIsFragment((uint64_t)LastValue);
      uint64_t v7 = 33;
      if (!IsFragment) {
        uint64_t v7 = 32;
      }
      return LastValue == (const void *)a2[v7] || *((unsigned char *)segPumpGetMediaFilePrivateData(LastValue) + 73);
    }
  }
  return result;
}

uint64_t segPumpReadMediaFile(uint64_t a1, uint64_t a2, const void *a3, int a4, int a5, const void *a6, uint64_t *a7)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MediaFilePrivateData = segPumpGetMediaFilePrivateData(a3);
  uint64_t v13 = *(void *)(a2 + 752);
  CFTypeRef cf = 0;
  uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  if (a7) {
    *a7 = 0;
  }
  uint64_t v60 = a7;
  CFURLRef v15 = *(const __CFURL **)(a2 + 16);
  CFURLRef v16 = *(const __CFURL **)(a2 + 24);
  uint64_t v17 = segPumpGetMediaFilePrivateData(a3);
  segPumpEnsureMediaSegmentURLs(a3, v15, v16);
  if (!v17[2])
  {
LABEL_111:
    uint64_t MediaConnection = FigSignalErrorAt();
    goto LABEL_67;
  }
  *(void *)(a2 + 104) = MediaFilePrivateData[4];
  *((unsigned char *)MediaFilePrivateData + 72) = 0;
  *((unsigned char *)MediaFilePrivateData + 74) = 0;
  if (!*(unsigned char *)(DerivedStorage + 8208) || (uint64_t v18 = *(void **)(a2 + 680)) == 0)
  {
LABEL_8:
    if (a4 || segPumpShouldDoSegmentReadAheads((unsigned char *)DerivedStorage))
    {
      uint64_t v19 = *(void *)(a2 + 776) + v13;
      uint64_t v20 = v19 + segPumpStreamHasPreloadHint(a2);
      uint64_t v13 = v20 + segPumpStreamHasPreloadMapHint(a2);
    }
    else if (!*(unsigned char *)(DerivedStorage + 8712) {
           && FigMediaSegmentSpecifierGetBytesToRead((uint64_t)a3) >= 1
    }
           && *(void *)(a2 + 752) < *(void *)(a2 + 760)
           && *(void *)a2 == *(void *)(DerivedStorage + 8416)
           && *(unsigned char *)(a2 + 406)
           && !FigMediaSegmentSpecifierIsFragment((uint64_t)a3)
           && (!a3 || FigMediaSegmentSpecifierGetType((uint64_t)a3) != 1))
    {
      uint64_t v47 = *(void *)(a2 + 760);
      uint64_t v13 = v47 + 1;
      *(void *)(a2 + 752) = v47;
    }
    uint64_t v21 = *(void *)(a2 + 744);
    if (v13 <= v21)
    {
      if (v21 > v13 && (*(unsigned __int8 *)(DerivedStorage + 8712) | a4) == 0)
      {
        do
        {
          if (*(void *)(a2 + 680)) {
            uint64_t v24 = *(dispatch_object_t **)(a2 + 688);
          }
          else {
            uint64_t v24 = 0;
          }
          if (segPumpMediaConnectionIsActive((uint64_t)v24)) {
            break;
          }
          segPumpDestroyMediaConnection(DerivedStorage, (void *)a2, v24);
        }
        while (*(void *)(a2 + 744) > v13);
        size_t v25 = *(void **)(a2 + 680);
        unint64_t v26 = v25;
        while (1)
        {
          unint64_t v26 = (void *)*v26;
          if (!v26) {
            unint64_t v26 = *(void **)(a2 + 680);
          }
          if (!segPumpMediaConnectionIsActive((uint64_t)v26)) {
            break;
          }
          if (v26 == v25)
          {
            unint64_t v26 = v25;
            break;
          }
        }
        *(void *)(a2 + 696) = v26;
      }
    }
    else
    {
      while (*(void *)(a2 + 744) < v13)
      {
        uint64_t MediaConnection = segPumpCreateMediaConnection(a2);
        if (MediaConnection) {
          goto LABEL_67;
        }
      }
    }
    if (a4)
    {
      uint64_t v27 = *(void *)(a2 + 696);
      if (!v27) {
        uint64_t v27 = *(void *)(a2 + 680);
      }
      uint64_t v28 = v27;
      while (1)
      {
        uint64_t v28 = *(void *)v28;
        if (!v28) {
          uint64_t v28 = *(void *)(a2 + 680);
        }
        if (!segPumpMediaConnectionIsActive(v28)) {
          break;
        }
        if (v28 == v27)
        {
          uint64_t v28 = v27;
          break;
        }
      }
      if (!v28 || v28 == *(void *)(a2 + 696)) {
        goto LABEL_111;
      }
    }
    else
    {
      if (!*(_DWORD *)(a2 + 1080))
      {
        uint64_t v48 = FigMediaSegmentSpecifierGetBytesToRead((uint64_t)a3);
        if (a3)
        {
          if (v48 >= 1 && !FigMediaSegmentSpecifierGetType((uint64_t)a3))
          {
            double v49 = (double)(8 * FigMediaSegmentSpecifierGetBytesToRead((uint64_t)a3));
            *(_DWORD *)(a2 + 1080) = (v49 / FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)a3));
          }
        }
      }
      uint64_t v28 = *(void *)(a2 + 696);
    }
    *(void *)(a2 + 952) = UpTimeNanoseconds;
    *(unsigned char *)(v28 + 144) = 0;
    *(void *)(v28 + 56) = 0;
    *(void *)(v28 + 64) = 0;
    *(void *)(v28 + 48) = UpTimeNanoseconds;
    if (*(_DWORD *)(v28 + 80))
    {
      double v29 = (double)(UpTimeNanoseconds - *(void *)(v28 + 40)) / 1000000000.0;
    }
    else
    {
      *(void *)(v28 + 40) = UpTimeNanoseconds;
      *(void *)(v28 + 72) = 0;
      double v29 = 0.0;
    }
    CFURLRef v30 = *(const __CFURL **)(a2 + 16);
    CFURLRef v31 = *(const __CFURL **)(a2 + 24);
    uint64_t v32 = segPumpGetMediaFilePrivateData(a3);
    segPumpEnsureMediaSegmentURLs(a3, v30, v31);
    CFNumberRef v33 = (const void *)v32[2];
    if (v33) {
      CFTypeRef v34 = CFRetain(v33);
    }
    else {
      CFTypeRef v34 = 0;
    }
    CFTypeRef cf = v34;
    if (*(unsigned char *)(DerivedStorage + 320))
    {
      uint64_t MediaConnection = FigCFHTTPCopyURLAndInheritQueyComponentIfNotPresent(*(const __CFURL **)(a2 + 8), (CFURLRef *)&cf);
      if (MediaConnection) {
        goto LABEL_67;
      }
      CFTypeRef v34 = cf;
    }
    uint64_t MediaConnection = segPumpReadMediaFileURL(a1, a2, a3, v34, v28, a6, a5);
    if (!MediaConnection)
    {
      if (a3 && !FigMediaSegmentSpecifierGetType((uint64_t)a3)) {
        *(unsigned char *)(a2 + 402) = 0;
      }
      if (*(void *)(DerivedStorage + 8096) && !*(unsigned char *)(DerivedStorage + 8712))
      {
        TimeIndouble Seconds = FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)a3);
        uint64_t MapSegmentSpecifier = (const void *)FigMediaSegmentSpecifierGetMapSegmentSpecifier((uint64_t)a3);
        *(void *)(a2 + 808) = 0;
        if (MapSegmentSpecifier)
        {
          uint64_t v44 = (double *)segPumpGetMediaFilePrivateData(MapSegmentSpecifier);
          double v45 = v44[10];
          if (v45 > 0.0 && TimeInSeconds > v45)
          {
            TimeIndouble Seconds = TimeInSeconds - v45;
            *(double *)(a2 + 808) = v45;
          }
          v44[10] = 0.0;
        }
        if (TimeInSeconds >= 0.25 || FigMediaSegmentSpecifierIsFragment((uint64_t)a3))
        {
          if (FigMediaSegmentSpecifierIsFragment((uint64_t)a3)) {
            double v46 = *(double *)(DerivedStorage + 16) * 0.5;
          }
          else {
            double v46 = *(double *)(DerivedStorage + 7984);
          }
          if (TimeInSeconds / *(double *)(DerivedStorage + 8704) > v46) {
            double v46 = TimeInSeconds / *(double *)(DerivedStorage + 8704);
          }
        }
        else
        {
          double v46 = 0.25 / *(double *)(DerivedStorage + 8704);
        }
        double v50 = fmin(v46, 30.0);
        double v51 = 0.0;
        if (v29 < v50 && v29 > 0.0) {
          double v51 = v29;
        }
        double v53 = v50 - v51;
        if (v28 == *(void *)(a2 + 696))
        {
          uint64_t v54 = *(void *)(a2 + 752);
          if (v54 >= 1)
          {
            for (uint64_t i = 0; i < v54; ++i)
            {
              uint64_t v56 = *(void *)(a2 + 696 + 8 * i);
              if (v56)
              {
                FigHTTPCreateTimer(*(const void **)DerivedStorage, (uint64_t)MediaHandleDownloadTimer, *(NSObject **)(DerivedStorage + 64), (dispatch_object_t *)(v56 + 112), v53);
                uint64_t v54 = *(void *)(a2 + 752);
              }
            }
          }
        }
        else
        {
          FigHTTPCreateTimer(*(const void **)DerivedStorage, (uint64_t)MediaHandleDownloadTimer, *(NSObject **)(DerivedStorage + 64), (dispatch_object_t *)(v28 + 112), v50 - v51);
        }
        segPumpRTCReportingUpdateMediaTimerStats(DerivedStorage, (void *)a2, v28, v53);
        if (!v60) {
          goto LABEL_106;
        }
      }
      else if (!v60)
      {
        goto LABEL_106;
      }
      uint64_t v35 = 0;
      uint64_t *v60 = v28;
      goto LABEL_107;
    }
LABEL_67:
    uint64_t v35 = MediaConnection;
    goto LABEL_107;
  }
  while (!segPumpMediaConnectionIncludesMedia(a2, (uint64_t)v18, a3))
  {
    uint64_t v18 = (void *)*v18;
    if (!v18) {
      goto LABEL_8;
    }
  }
  uint64_t v36 = CMBaseObjectGetDerivedStorage();
  unsigned int v37 = segPumpAccumConnCompletesMediaRange((uint64_t)v18, a3);
  CFURLRef v38 = *(const __CFURL **)(a2 + 16);
  CFURLRef v39 = *(const __CFURL **)(a2 + 24);
  uint64_t v40 = (CFTypeRef *)segPumpGetMediaFilePrivateData(a3);
  segPumpEnsureMediaSegmentURLs(a3, v38, v39);
  segPumpSetMediaFileForMediaConnection(v18, a2, a3, v40[2]);
  if (!v37) {
    goto LABEL_106;
  }
  uint64_t v41 = *(void *)(a2 + 880);
  uint64_t MediaConnection = segPumpDeliverAccumulatedBuffer(a1, v36, a2, (uint64_t)v18, a3, 1);
  if (MediaConnection) {
    goto LABEL_67;
  }
  if (v41 == *(void *)(a2 + 880))
  {
    uint64_t MediaConnection = segPumpStreamProceedAfterMediaAndKeyArrival(a1, v36, a2, a3, 1, 1);
    goto LABEL_67;
  }
LABEL_106:
  uint64_t v35 = 0;
LABEL_107:
  if (cf) {
    CFRelease(cf);
  }
  return v35;
}

double segPumpStreamGetTimeDeliveredFromBeginningForVOD(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  double v3 = 0.0;
  if (v2
    && FigMediaPlaylistHasEndTag(v2)
    && FigMediaPlaylistGetPlaylistType(*(void *)(a1 + 56)) == 2)
  {
    for (CFIndex i = 0; ; ++i)
    {
      CFArrayRef MediaSegmentSpecifiers = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(*(void *)(a1 + 56));
      if (MediaSegmentSpecifiers) {
        CFArrayRef MediaSegmentSpecifiers = (const __CFArray *)CFArrayGetCount(MediaSegmentSpecifiers);
      }
      if (i >= (uint64_t)MediaSegmentSpecifiers) {
        break;
      }
      CFArrayRef v6 = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(*(void *)(a1 + 56));
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v6, i);
      MediaFilePrivateData = segPumpGetMediaFilePrivateData(ValueAtIndex);
      if (!*((unsigned char *)MediaFilePrivateData + 73)) {
        break;
      }
      double v3 = *((double *)MediaFilePrivateData + 4);
    }
  }
  return v3;
}

BOOL segPumpStreamShouldYieldToTrialSwitch(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 7680);
  if (v2
    && *(void **)(a1 + 16 * *a2 + 384) == a2
    && *(void *)(a1 + 8144)
    && (int PeakBitRate = FigAlternateGetPeakBitRate(*(void *)(v2 + 8)),
        PeakBitRate < (int)FigAlternateGetPeakBitRate(*(void *)(*(void *)(a1 + 8144) + 8)))
    && ((v9 = 0, v10 = 0, *a2 > 2uLL) ? (int v7 = 0) : (int v7 = *(_DWORD *)&aEdivnuosltbs[4 * *a2]),
        !FigAlternateGetRenditionInfoForMediaType(*(void *)(*(void *)(a1 + 7680) + 8), v7, *(const void **)(a1 + 8392), *(const void **)(a1 + 8400), *(const void **)(a1 + 8408), 1, 0, &v9, 0)&& (*a2 > 2uLL ? (int v8 = 0) : (int v8 = *(_DWORD *)&aEdivnuosltbs[4 * *a2]), !FigAlternateGetRenditionInfoForMediaType(*(void *)(*(void *)(a1 + 8144) + 8), v8, *(const void **)(a1 + 8392), *(const void **)(a1 + 8400), *(const void **)(a1 + 8408), 1, 0, &v10,
                          0))))
  {
    return FigCFEqual() == 0;
  }
  else
  {
    return 0;
  }
}

uint64_t segPumpCreateMediaConnection(uint64_t a1)
{
  uint64_t v2 = malloc_type_calloc(1uLL, 0x138uLL, 0x1060040D8227916uLL);
  if (!v2) {
    return 4294954510;
  }
  double v3 = v2;
  uint64_t result = 0;
  uint64_t v5 = *(void *)(a1 + 744);
  v3[23] = v5;
  *(void *)(a1 + 744) = v5 + 1;
  void *v3 = 0;
  **(void **)(a1 + 688) = v3;
  *(void *)(a1 + 688) = v3;
  return result;
}

uint64_t segPumpReadMediaFileURL(uint64_t a1, uint64_t a2, const void *a3, const void *a4, uint64_t a5, const void *a6, int a7)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  MediaFilePrivateData = (unint64_t *)segPumpGetMediaFilePrivateData(a3);
  unint64_t v38 = 0;
  if (!a5)
  {
    return FigSignalErrorAt();
  }
  CFURLRef v15 = MediaFilePrivateData;
  uint64_t v17 = MediaFilePrivateData + 13;
  CFURLRef v16 = (void *)MediaFilePrivateData[13];
  if (!v16)
  {
    unint64_t v20 = MediaFilePrivateData[7];
    unsigned int v21 = 1;
    if (!v20) {
      goto LABEL_20;
    }
    goto LABEL_10;
  }
  uint64_t v18 = MediaFilePrivateData + 6;
  int Length = FigStreamingCacheMediaSegmentGetLength(*(void *)(DerivedStorage + 296), *(void *)(a2 + 64), v16, 0, MediaFilePrivateData + 6);
  unint64_t v20 = v15[6];
  v15[15] = v20;
  v15[7] = v20;
  if (Length == -16243)
  {
    LODWORD(v20) = 0;
    *uint64_t v18 = 0;
    v15[7] = 0;
    *(_DWORD *)((char *)v15 + 71) = 0;
    v15[8] = 0;
    v17[1] = 0;
    v17[2] = 0;
    unsigned int v21 = 1;
    *uint64_t v17 = 0;
    goto LABEL_20;
  }
  if (Length) {
    unsigned int v21 = 1;
  }
  else {
    unsigned int v21 = v20 == 0;
  }
  if (v20)
  {
LABEL_10:
    uint64_t ContentKeySpecifier = FigMediaSegmentSpecifierGetContentKeySpecifier((uint64_t)a3);
    unint64_t v23 = v15[8];
    if (v23 <= v15[7]) {
      unint64_t v23 = v15[7];
    }
    v15[8] = v23;
    if (v21
      && ContentKeySpecifier
      && FigContentKeySpecifierGetEncryptionMethod(ContentKeySpecifier) - 5 >= 0xFFFFFFFE)
    {
      LODWORD(v20) = 0;
      v15[6] = 0;
      v15[7] = 0;
      unsigned int v21 = 1;
    }
    else if (FigMediaSegmentSpecifierGetStartOffset((uint64_t)a3))
    {
      LODWORD(v20) = 0;
    }
    else
    {
      LODWORD(v20) = 8 * (FigMediaSegmentSpecifierGetBytesToRead((uint64_t)a3) == 0);
    }
  }
LABEL_20:
  if (*(void *)a2 == 2 || *(unsigned char *)(DerivedStorage + 329)) {
    LODWORD(v20) = v20 | 4;
  }
  *(unsigned char *)(a5 + 281) = a7;
  if (a7) {
    int v24 = 1025;
  }
  else {
    int v24 = 1;
  }
  unsigned int v25 = v20 | v24;
  segPumpGetRequestedByteRangeForMediaFileHelper(DerivedStorage, (void *)a2, a3, a3, v21, &v40, &v39, &v38);
  unint64_t v26 = v38;
  if (v38)
  {
    v15[6] = 0;
    v15[7] = 0;
    v15[8] = v26;
  }
  *(unsigned char *)(a2 + 873) = 0;
  if (*(unsigned char *)(DerivedStorage + 8712)
    || *(unsigned char *)(DerivedStorage + 48)
    || !a3
    || !*(unsigned char *)(a2 + 406)
    || FigMediaSegmentSpecifierGetType((uint64_t)a3)
    || (uint64_t v28 = *(void *)(a2 + 752), v28 < 2)
    || (uint64_t v29 = v39, v39 < 0x10000))
  {
    *(unsigned char *)(a2 + 816) = 0;
    uint64_t result = segPumpCreateMediaURLRequest(a1, a2, a3, a4, a5, v40, v39, v25, a6);
    if (!result)
    {
LABEL_31:
      uint64_t result = 0;
      *(void *)(a5 + 120) = v15[6];
    }
  }
  else if (*(unsigned char *)(DerivedStorage + 327))
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v30 = 0;
    int64_t v31 = ((v28 + v39 - 1) / (unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF0;
    v15[5] = v39;
    *(unsigned char *)(a2 + 816) = 1;
    while (1)
    {
      uint64_t v32 = a2 + 8 * v30;
      uint64_t v33 = *(void *)(v32 + 696);
      if (!v33)
      {
        CFTypeRef v34 = *(uint64_t **)(v32 + 688);
        uint64_t v33 = *v34;
        *(void *)(v32 + 696) = *v34;
        if (!v33)
        {
          uint64_t v33 = *(void *)(a2 + 680);
          *(void *)(v32 + 696) = v33;
        }
      }
      uint64_t v35 = *(void *)(*(void *)(a2 + 696) + 40);
      *(void *)(v33 + 40) = v35;
      *(void *)(v33 + 48) = v35;
      uint64_t v36 = v31 >= v29 ? v29 : v31;
      uint64_t result = segPumpCreateMediaURLRequest(a1, a2, a3, a4, v33, v40, v36, v25, 0);
      if (result) {
        break;
      }
      v40 += v36;
      v29 -= v36;
      if (++v30 >= *(void *)(a2 + 752)) {
        goto LABEL_31;
      }
    }
  }
  return result;
}

void MediaHandleDownloadTimer(uint64_t a1, uint64_t a2)
{
  v93[17] = *MEMORY[0x1E4F143B8];
  uint64_t v90 = 0;
  CFTypeRef cf = 0;
  uint64_t v86 = 0;
  uint64_t v87 = 0;
  memset(v85, 0, sizeof(v85));
  if (!segPumpLockAndCopyPumpFromRetainProxy(a2, &cf, (uint64_t *)&v90))
  {
    uint64_t v4 = 0;
    uint64_t v88 = 0;
    uint64_t v89 = 0;
    uint64_t v5 = v90;
    CFArrayRef v6 = v90 + 48;
    while (1)
    {
      uint64_t v7 = v6[v4];
      if (findConnectionFromMediaDownloadTimer((void *)v7, a1, &v89, &v87, &v88)) {
        break;
      }
      v4 += 2;
      if (v4 == 6)
      {
        uint64_t v8 = 0;
        uint64_t v9 = v5 + 49;
        while (1)
        {
          uint64_t v7 = v9[v8];
          if (findConnectionFromMediaDownloadTimer((void *)v7, a1, &v89, &v87, &v88)) {
            goto LABEL_9;
          }
          v8 += 2;
          if (v8 == 6) {
            goto LABEL_119;
          }
        }
      }
    }
LABEL_9:
    if (v7)
    {
      uint64_t v10 = v89;
      if (v89)
      {
        uint64_t v11 = *(void *)(v7 + 776);
        if (v11 >= 1)
        {
          uint64_t v12 = *(uint64_t ***)(v7 + 768);
          while (*v12 != v89)
          {
            ++v12;
            if (!--v11) {
              goto LABEL_15;
            }
          }
          goto LABEL_119;
        }
      }
LABEL_15:
      if (*(uint64_t **)(v7 + 792) == v89) {
        goto LABEL_119;
      }
      if (*(uint64_t **)(v7 + 800) == v89) {
        goto LABEL_119;
      }
      uint64_t v13 = (const void *)v89[1];
      if (!v13 || !v89[5]) {
        goto LABEL_119;
      }
      uint64_t v14 = v90;
      if (FigMediaSegmentSpecifierIsFragment(v89[1])) {
        double v15 = *((double *)v14 + 2) * 0.5;
      }
      else {
        double v15 = *((double *)v14 + 998);
      }
      TimeIndouble Seconds = 30.0;
      if (FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)v13) < 30.0) {
        TimeIndouble Seconds = FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)v13);
      }
      segPumpStreamBitRateRequiredForStream((uint64_t)v90, (void *)v7);
      unsigned int v17 = *((_DWORD *)v90 + 2);
      if (v17 >= 0x1E) {
        unsigned int v17 = 30;
      }
      unsigned int v81 = v17;
      if (FigMediaSegmentSpecifierIsFragment((uint64_t)v13))
      {
        double v18 = *((double *)v90 + 2);
      }
      else
      {
        unsigned int v19 = *((_DWORD *)v90 + 2);
        if (v19 <= 0xA) {
          unsigned int v19 = 10;
        }
        double v18 = (double)v19;
      }
      uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
      uint64_t v21 = 8;
      if (!*((unsigned char *)v10 + 281)) {
        uint64_t v21 = 5;
      }
      uint64_t v22 = v10[v21];
      if (v10[37] <= 0) {
        uint64_t v23 = v22;
      }
      else {
        uint64_t v23 = v10[37];
      }
      double v24 = *(double *)(v7 + 808) + (double)(FigGetUpTimeNanoseconds() - v23) / 1000000000.0;
      if (v10[31] < 1)
      {
        if (!dword_1E9351350) {
          goto LABEL_41;
        }
      }
      else if (!dword_1E9351350)
      {
        goto LABEL_41;
      }
      LODWORD(v83) = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_41:
      if (v24 < TimeInSeconds || v24 < v15)
      {
        if (TimeInSeconds <= v15) {
          double v27 = v15;
        }
        else {
          double v27 = TimeInSeconds;
        }
        double v28 = v27 - v24;
        uint64_t v30 = (uint64_t)v89;
        goto LABEL_115;
      }
      int v29 = *(unsigned __int8 *)(v7 + 873);
      segPumpSetCurrentSegmentTooSlow((uint64_t)v90, v7);
      FigNetworkInterfaceReporterSamplePhysicalStatistics(v90[1140], 0, 0, 0, 0);
      uint64_t v30 = (uint64_t)v89;
      FigReportingAgentUpdateFinalTransactionMetrics(v90[1131], v89[4], 1, 0);
      if (!v29) {
        segPumpAddMediaSegmentNoResponseErrorIfNecessary((uint64_t)cf, (uint64_t)v90, v7, v30);
      }
      double v32 = (double)(UpTimeNanoseconds - *(void *)(v30 + 48)) / 1000000000.0;
      uint64_t v33 = v90;
      LODWORD(v31) = *((_DWORD *)v90 + 2);
      double v34 = fmax((double)v31 * 0.5, 2.0);
      if (v15 > v34) {
        double v34 = v15;
      }
      if (v34 > 30.0) {
        double v34 = 30.0;
      }
      if (v32 < v34)
      {
        double v28 = v34 - v32;
LABEL_115:
        *(void *)(v30 + 120) = *(void *)(v30 + 224);
LABEL_116:
        uint64_t v64 = FigHTTPCreateTimer((const void *)*v90, (uint64_t)MediaHandleDownloadTimer, v90[8], (dispatch_object_t *)(v30 + 112), v28);
        segPumpRTCReportingUpdateMediaTimerStats((uint64_t)v90, (void *)v7, v30, v28);
        goto LABEL_117;
      }
      double v28 = fmin(v18, 30.0);
      if (*(unsigned char *)(v30 + 280) && *(void *)(v30 + 224) != *(void *)(v30 + 120))
      {
        if (v24 >= TimeInSeconds + (double)v81 && !*((unsigned char *)v90 + 8208) && !*(unsigned char *)(v30 + 144))
        {
          if (v30 == *(void *)(v7 + 696))
          {
            CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
            uint64_t v39 = *(void *)(v7 + 696);
            if (v39)
            {
              uint64_t v40 = *(void *)(v39 + 8);
              uint64_t v41 = "Media file";
              if (v40 && FigMediaSegmentSpecifierGetType(v40) == 1) {
                uint64_t v41 = "Map";
              }
            }
            else
            {
              uint64_t v41 = "Media file";
            }
            double v69 = FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)v13);
            LODWORD(v70) = *((_DWORD *)v90 + 2);
            CFStringRef v71 = CFStringCreateWithFormat(AllocatorForMedia, 0, @"%s not received in %ds", v41, (int)(v69 + (double)v70));
            segPumpAppendErrorLogEntry((uint64_t)cf, (uint64_t)v90, v7, (const __CFURL **)(v30 + 16), -16830, @"CoreMediaErrorDomain", v71, 0, 1u, 2u, 3u);
            CFRelease(v71);
          }
          *(unsigned char *)(v30 + 144) = 1;
        }
        goto LABEL_115;
      }
      if (*((unsigned char *)v90 + 328))
      {
        if (FigMediaSegmentSpecifierIsFragment((uint64_t)v13)) {
          goto LABEL_115;
        }
        uint64_t v33 = v90;
      }
      ++v33[1064];
      uint64_t v35 = v33[1131];
      if (v35)
      {
        uint64_t v36 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v37 = v36 ? v36 : 0;
        uint64_t v42 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v37 + 32);
        if (v42) {
          v42(v35, 0x1EE582B98, 0x1EE583C18, 1);
        }
      }
      if (!*(unsigned char *)(v30 + 280))
      {
        uint64_t v47 = v90[1131];
        if (v47)
        {
          uint64_t v48 = *(void *)(CMBaseObjectGetVTable() + 16);
          uint64_t v49 = v48 ? v48 : 0;
          double v50 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v49 + 32);
          if (v50) {
            v50(v47, 0x1EE582B98, 0x1EE583C38, 1);
          }
        }
      }
      if (*(void *)(v30 + 224) <= *(void *)(v30 + 216)) {
        goto LABEL_93;
      }
      uint64_t v92 = 0;
      uint64_t v43 = *(void *)(v30 + 32);
      if (!v43) {
        goto LABEL_93;
      }
      uint64_t v44 = *(void *)(v30 + 128);
      uint64_t v45 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v46 = v45 ? v45 : 0;
      double v51 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t *))(v46 + 32);
      if (!v51) {
        goto LABEL_93;
      }
      if (v51(v43, v44, &v92)) {
        goto LABEL_93;
      }
      uint64_t v52 = v92;
      size_t v53 = *(void *)(v30 + 136);
      size_t v54 = v92 - v53;
      if (v92 == v53) {
        goto LABEL_93;
      }
      unint64_t v67 = *(void *)(v30 + 216) + v54;
      if (*(void *)(v30 + 256) - 1 < v67 || (uint64_t v68 = *(void *)(v30 + 248), v68 >= 1) && v67 >= v68)
      {
LABEL_111:
        uint64_t v64 = 0;
        goto LABEL_117;
      }
      BOOL v72 = v90;
      v90[1067] += v54;
      *(void *)(v7 + 1096) += v54;
      *(void *)(v30 + 136) = v52;
      *(void *)(v30 + 216) = v67;
      if (*(void *)v7 == 1)
      {
        uint64_t v73 = 1080;
      }
      else
      {
        if (*(void *)v7) {
          goto LABEL_127;
        }
        uint64_t v73 = 1079;
      }
      v72[v73] += v54;
LABEL_127:
      if (v30 != *(void *)(v7 + 696)) {
        goto LABEL_128;
      }
      size_t v82 = v53;
      if (FigMediaSegmentSpecifierGetContentKeySpecifier((uint64_t)v13))
      {
        v93[0] = 0;
        uint64_t v83 = 0;
        uint64_t ContentKeySpecifier = (const void *)FigMediaSegmentSpecifierGetContentKeySpecifier((uint64_t)v13);
        uint64_t CryptKeyCommonData = segPumpGetCryptKeyCommonData(ContentKeySpecifier, v93, &v83);
        if (CryptKeyCommonData)
        {
LABEL_157:
          uint64_t v64 = CryptKeyCommonData;
          goto LABEL_117;
        }
        if (!*(unsigned char *)(v83 + 144))
        {
          uint64_t v80 = FigMediaSegmentSpecifierGetContentKeySpecifier((uint64_t)v13);
          if (FigContentKeySpecifierGetEncryptionMethod(v80) - 3 < 0xFFFFFFFE
            || FigMediaSegmentSpecifierGetType((uint64_t)v13) != 1)
          {
            if (*((unsigned char *)v90 + 322))
            {
              size_t v53 = v82;
LABEL_128:
              uint64_t appended = segPumpAppendBytesToMediaConnectionBuffer(v30, v53, v54);
              if (appended) {
                goto LABEL_100;
              }
              goto LABEL_93;
            }
          }
        }
      }
      MediaFilePrivateData = segPumpGetMediaFilePrivateData(v13);
      if (v90[37] && *(void *)(v7 + 64))
      {
        int v77 = MediaFilePrivateData;
        if (FigMediaSegmentSpecifierGetType((uint64_t)v13) != 1
          && !v77[13]
          && segPumpCanAddSegmentToCache(v90, (void *)v7, v13, 0))
        {
          segPumpCreateMediaSegmentCache((uint64_t)v90, v7, v13);
        }
        if (v77[13])
        {
          uint64_t CryptKeyCommonData = segPumpAppendBytesToCache((uint64_t)v90, v7, v13, *(OpaqueCMBlockBuffer **)(v30 + 128), v82, v54, 0);
          if (CryptKeyCommonData) {
            goto LABEL_157;
          }
        }
      }
      uint64_t v78 = *(void *)(v7 + 880);
      if (FigMediaSegmentSpecifierGetContentKeySpecifier((uint64_t)v13) && *((unsigned char *)v90 + 322))
      {
        uint64_t v79 = segPumpMediaFileHandleCryptData((uint64_t)cf, (uint64_t)v90, v7, *(const void **)(v30 + 8), *(OpaqueCMBlockBuffer **)(v30 + 128), v82, v54, 0);
        if (v79 == -12465)
        {
          uint64_t CryptKeyCommonData = segPumpHandleMediaFileNetworkError((uint64_t)cf, (void *)v7, 0, *(void *)(v30 + 8), 4294954831);
          goto LABEL_157;
        }
        uint64_t v64 = v79;
        if (v79 == -12463)
        {
          uint64_t CryptKeyCommonData = segPumpHandleCryptFailure((uint64_t)cf, (uint64_t)v90, v7);
          goto LABEL_157;
        }
      }
      else
      {
        uint64_t v64 = segPumpSendMediaCallback((uint64_t)cf, (uint64_t)v90, v7, *(const void **)(v30 + 8), *(OpaqueCMBlockBuffer **)(v30 + 128), v82, v54, 0, 0);
      }
      if (!v64)
      {
        if (!FigRetainProxyIsInvalidated() && v78 == *(void *)(v7 + 880))
        {
          if (*(const void **)(v30 + 8) == v13)
          {
LABEL_93:
            *(unsigned char *)(v30 + 144) = 0;
            unsigned int v55 = *(_DWORD *)(v30 + 80) + 1;
            segPumpStreamDontReuseHTTPRequest((uint64_t)v90, v30);
            *(_DWORD *)(v30 + 80) = v55;
            uint64_t v56 = *(void *)(v30 + 216);
            uint64_t v57 = *(void *)(v30 + 248);
            *(void *)(v30 + 240) += v56;
            if (v57) {
              *(void *)(v30 + 248) = v57 - v56;
            }
            uint64_t v58 = v90;
            uint64_t v59 = FigGetUpTimeNanoseconds();
            segPumpGetObservedNetworkStats((uint64_t)v58, (uint64_t)((double)v59 + v28 * -1000000000.0), (uint64_t)v85);
            if (v55 <= 6)
            {
              uint64_t v60 = v90[1018];
              if (!v60
                || (uint64_t v61 = *(void *)&v85[0], v61 < (int)FigAlternateGetPeakBitRate(*(void *)(v60 + 8)))
                || (LODWORD(v62) = *((_DWORD *)v90 + 2), v24 <= (double)v62))
              {
                if (FigMediaSegmentSpecifierGetStartOffset((uint64_t)v13))
                {
                  unsigned int v65 = 1;
                }
                else if (FigMediaSegmentSpecifierGetBytesToRead((uint64_t)v13))
                {
                  unsigned int v65 = 1;
                }
                else
                {
                  unsigned int v65 = 9;
                }
                uint64_t MediaURLRequest = segPumpCreateMediaURLRequest((uint64_t)cf, v7, v13, *(const void **)(v30 + 16), v30, *(void *)(v30 + 240), *(void *)(v30 + 248), v65, 0);
                if (MediaURLRequest)
                {
                  uint64_t v64 = MediaURLRequest;
LABEL_118:
                  segPumpSendEndCallbackForAllActiveStreamsWithOSStatus(a2, v64);
                  goto LABEL_119;
                }
                goto LABEL_116;
              }
            }
            uint64_t appended = segPumpHandleMediaFileNetworkError((uint64_t)cf, (void *)v7, v30 + 16, (uint64_t)v13, 4294954407);
LABEL_100:
            uint64_t v64 = appended;
            goto LABEL_117;
          }
          goto LABEL_111;
        }
        uint64_t v64 = 0;
      }
LABEL_117:
      if (!v64) {
        goto LABEL_119;
      }
      goto LABEL_118;
    }
  }
LABEL_119:
  segPumpUnlockAndSendAllPendingNotifications();
  if (cf) {
    CFRelease(cf);
  }
}

void segPumpRTCReportingUpdateMediaTimerStats(uint64_t a1, void *a2, uint64_t a3, double a4)
{
  double valuePtr = a4;
  uint64_t v6 = a2[97];
  if (v6 < 1)
  {
LABEL_5:
    CFNumberRef v8 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberDoubleType, &valuePtr);
    if (*a2 == 1)
    {
      uint64_t v9 = *(void *)(a1 + 9048);
      if (!v9) {
        goto LABEL_20;
      }
      uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v13 = v12 ? v12 : 0;
      uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t, CFNumberRef, void))(v13 + 48);
      if (!v14) {
        goto LABEL_20;
      }
      uint64_t v15 = 0x1EE5850F8;
    }
    else
    {
      if (*a2) {
        goto LABEL_20;
      }
      uint64_t v9 = *(void *)(a1 + 9048);
      if (!v9) {
        goto LABEL_20;
      }
      uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v11 = v10 ? v10 : 0;
      uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t, CFNumberRef, void))(v11 + 48);
      if (!v14) {
        goto LABEL_20;
      }
      uint64_t v15 = 0x1EE585118;
    }
    v14(v9, 0x1EE582B98, v15, v8, 0);
LABEL_20:
    if (v8) {
      CFRelease(v8);
    }
    return;
  }
  uint64_t v7 = (void *)a2[96];
  while (*v7 != a3)
  {
    ++v7;
    if (!--v6) {
      goto LABEL_5;
    }
  }
}

OpaqueCMBlockBuffer *segPumpAccumConnCompletesMediaRange(uint64_t a1, const void *a2)
{
  uint64_t result = *(OpaqueCMBlockBuffer **)(a1 + 272);
  if (result)
  {
    size_t DataLength = CMBlockBufferGetDataLength(result);
    return (OpaqueCMBlockBuffer *)(segPumpReadCompletesMediaRange(a2, DataLength) != 0);
  }
  return result;
}

void segPumpSetMediaFileForMediaConnection(void *a1, uint64_t a2, const void *a3, CFTypeRef cf)
{
  uint64_t v7 = (const void *)a1[2];
  a1[2] = cf;
  if (cf) {
    CFRetain(cf);
  }
  if (v7) {
    CFRelease(v7);
  }
  CFNumberRef v8 = (const void *)a1[21];
  CFURLRef v10 = *(const __CFURL **)(a2 + 16);
  CFURLRef v9 = *(const __CFURL **)(a2 + 24);
  MediaFilePrivateData = segPumpGetMediaFilePrivateData(a3);
  segPumpEnsureMediaSegmentURLs(a3, v10, v9);
  uint64_t v12 = (const void *)MediaFilePrivateData[2];
  a1[21] = v12;
  if (v12) {
    CFRetain(v12);
  }
  if (v8) {
    CFRelease(v8);
  }
  uint64_t v13 = (const void *)a1[1];
  a1[1] = a3;
  if (a3) {
    CFRetain(a3);
  }
  if (v13)
  {
    CFRelease(v13);
  }
}

const void *segPumpReadCompletesMediaRange(const void *result, uint64_t a2)
{
  if (result)
  {
    double v3 = result;
    if (FigMediaSegmentSpecifierGetBytesToRead((uint64_t)result) < 1)
    {
      return 0;
    }
    else
    {
      uint64_t result = segPumpGetMediaFilePrivateData(v3);
      if (result)
      {
        unint64_t v4 = *((void *)result + 6) + a2;
        return (const void *)(v4 >= FigMediaSegmentSpecifierGetBytesToRead((uint64_t)v3));
      }
    }
  }
  return result;
}

uint64_t segPumpCreateMediaURLRequest(uint64_t a1, uint64_t a2, const void *a3, const void *a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8, const void *a9)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v58 = a3;
  int v56 = a8;
  if (!segPumpShouldRequestURLAsHTTPURL(DerivedStorage, (const __CFURL *)a4))
  {
    segPumpPrepareMediaConnectionForNewRequest(DerivedStorage, a2, a3, a4, a5, a6, a7, 0);
    uint64_t URLGuts = segPumpCustomURLLoaderGetURLGuts(DerivedStorage, a4, 0, 0, 0, 0, (a8 >> 10) & 1, 0, (a8 & 4) != 0, a6, a7, a5 + 104);
    if (!URLGuts)
    {
      if (!dword_1E9351350) {
        return 0;
      }
      int v60 = 0;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
LABEL_58:
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      return 0;
    }
    return URLGuts;
  }
  uint64_t v17 = *(void *)(DerivedStorage + 7680);
  float v18 = 0.5;
  if (v17 && *(void *)(DerivedStorage + 16 * *(void *)a2 + 392) == a2 && *(void *)(DerivedStorage + 8144))
  {
    int PeakBitRate = FigAlternateGetPeakBitRate(*(void *)(v17 + 8));
    if (PeakBitRate >= (int)FigAlternateGetPeakBitRate(*(void *)(*(void *)(DerivedStorage + 8144) + 8))) {
      float v18 = 0.5;
    }
    else {
      float v18 = 0.794;
    }
  }
  BOOL v59 = 0;
  long long v67 = 0u;
  long long v68 = 0u;
  long long v65 = 0u;
  long long v66 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  long long v62 = 0u;
  TimeIndouble Seconds = FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)a3);
  CMTimeMakeWithSeconds((CMTime *)((char *)&v64 + 12), TimeInSeconds, 1000);
  uint64_t v21 = *(void *)a2;
  if (*(void *)a2 == 2)
  {
    int v22 = 6;
  }
  else if (v21 == 1)
  {
    int v22 = 2;
  }
  else
  {
    if (v21) {
      goto LABEL_20;
    }
    if (*(void *)(DerivedStorage + 8392)) {
      int v22 = 3;
    }
    else {
      int v22 = 4;
    }
  }
  DWORD1(v66) = v22;
LABEL_20:
  uint64_t v53 = a6;
  CFURLRef v24 = *(const __CFURL **)(a2 + 16);
  CFURLRef v25 = *(const __CFURL **)(a2 + 24);
  MediaFilePrivateData = segPumpGetMediaFilePrivateData(a3);
  segPumpEnsureMediaSegmentURLs(a3, v24, v25);
  *((void *)&v67 + 1) = MediaFilePrivateData[2];
  if (FigMediaSegmentSpecifierGetNextSegment((uint64_t)a3))
  {
    uint64_t NextSegment = (const void *)FigMediaSegmentSpecifierGetNextSegment((uint64_t)a3);
    CFURLRef v28 = *(const __CFURL **)(a2 + 16);
    CFURLRef v29 = *(const __CFURL **)(a2 + 24);
    uint64_t v30 = a7;
    uint64_t v31 = a2;
    double v32 = a4;
    uint64_t v33 = a3;
    double v34 = segPumpGetMediaFilePrivateData(NextSegment);
    segPumpEnsureMediaSegmentURLs(NextSegment, v28, v29);
    uint64_t v35 = v34[2];
    a3 = v33;
    a4 = v32;
    a2 = v31;
    a7 = v30;
    *(void *)&long long v68 = v35;
  }
  *((void *)&v68 + 1) = a3;
  if (*(unsigned char *)(DerivedStorage + 327)) {
    return FigSignalErrorAt();
  }
  if (!*(void *)(a5 + 160)
    && *(void *)(a2 + 280)
    && !FigCFHTTPCanURLsBePersistent(*(const __CFURL **)(a2 + 16), (const __CFURL *)a4, &v59)
    && v59)
  {
    *(_OWORD *)(a5 + 152) = *(_OWORD *)(a2 + 272);
    *(void *)(a2 + 272) = 0;
    *(void *)(a2 + 280) = 0;
  }
  uint64_t v36 = *(const void **)(a5 + 32);
  int v37 = v56;
  if (v36)
  {
    CFRelease(v36);
    *(void *)(a5 + 32) = 0;
  }
  unint64_t v38 = (const __CFURL **)(a5 + 16);
  uint64_t v39 = *(const void **)(a5 + 24);
  if (v39)
  {
    CFRelease(v39);
    *(void *)(a5 + 24) = 0;
  }
  uint64_t v40 = *(const void **)(a5 + 160);
  if (v40 && *v38)
  {
    if (FigCFHTTPCanURLsBePersistent(*v38, (const __CFURL *)a4, &v59) || v59)
    {
      uint64_t v40 = *(const void **)(a5 + 160);
    }
    else
    {
      uint64_t v41 = *(const void **)(a5 + 152);
      if (v41)
      {
        CFRelease(v41);
        *(void *)(a5 + 152) = 0;
      }
      uint64_t v42 = *(const void **)(a5 + 160);
      if (v42) {
        CFRelease(v42);
      }
      uint64_t v40 = 0;
    }
  }
  uint64_t v43 = *(const void **)(a5 + 152);
  *(void *)(a5 + 152) = 0;
  *(void *)(a5 + 160) = 0;
  uint64_t v55 = a7;
  if (*(void *)(a2 + 696) == a5)
  {
    uint64_t v44 = v53;
    if (*(unsigned char *)(a2 + 402)) {
      int v37 = v56 | 0x20;
    }
  }
  else
  {
    uint64_t v44 = v53;
  }
  if (*(unsigned char *)(DerivedStorage + 7999)) {
    int v45 = v37 | 0x200;
  }
  else {
    int v45 = v37;
  }
  unsigned int v57 = v45;
  segPumpPrepareMediaConnectionForNewRequest(DerivedStorage, a2, v58, a4, a5, v44, v55, 1);
  if (!*(unsigned char *)(DerivedStorage + 8457))
  {
    *(unsigned char *)(DerivedStorage + 8457) = 1;
    AttemptNetworkMonitorSetup(DerivedStorage, a4);
  }
  uint64_t v46 = *(void *)(DerivedStorage + 56);
  uint64_t v47 = *(void *)DerivedStorage;
  v61[3] = v65;
  v61[4] = v66;
  v61[5] = v67;
  v61[6] = v68;
  v61[0] = v62;
  uint64_t v48 = *(void *)(DerivedStorage + 216);
  uint64_t v49 = *(void *)(DerivedStorage + 240);
  v61[1] = v63;
  v61[2] = v64;
  uint64_t HTTPRequest = segPumpCreateHTTPRequest(DerivedStorage, v46, (void *)a2, v43, (uint64_t)v40, a4, v48, v49, v18, 0, 13, v57, v61, v44, v55, (uint64_t)segPumpMediaFileMemoryRequestCallback, (uint64_t)segPumpMediaFileReadCallback, v47, a9,
                  a5 + 16);
  if (v43) {
    CFRelease(v43);
  }
  if (v40) {
    CFRelease(v40);
  }
  if (!HTTPRequest && dword_1E9351350)
  {
    double v51 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT);
    goto LABEL_58;
  }
  return HTTPRequest;
}

unint64_t segPumpGetRequestedByteRangeForMediaFileHelper(uint64_t a1, void *a2, const void *a3, const void *a4, unsigned int a5, uint64_t *a6, uint64_t *a7, unint64_t *a8)
{
  v57[16] = *MEMORY[0x1E4F143B8];
  MediaFilePrivateData = segPumpGetMediaFilePrivateData(a3);
  uint64_t v15 = MediaFilePrivateData[7] + FigMediaSegmentSpecifierGetStartOffset((uint64_t)a3);
  unint64_t result = FigMediaSegmentSpecifierGetBytesToRead((uint64_t)a3);
  int64_t v17 = result;
  if (a3)
  {
    unint64_t result = FigMediaSegmentSpecifierGetType((uint64_t)a3);
    if (result == 1)
    {
      unint64_t result = FigMediaSegmentSpecifierGetContentKeySpecifier((uint64_t)a3);
      if (result)
      {
        uint64_t ContentKeySpecifier = FigMediaSegmentSpecifierGetContentKeySpecifier((uint64_t)a3);
        unint64_t result = FigContentKeySpecifierGetEncryptionMethod(ContentKeySpecifier);
        if (result == 3)
        {
          uint64_t v19 = FigMediaSegmentSpecifierGetContentKeySpecifier((uint64_t)a3);
          unint64_t result = FigContentKeySpecifierGetEncryptionMethod(v19);
          if (result != 4 && v17 >= 1)
          {
            uint64_t v20 = FigMediaSegmentSpecifierGetContentKeySpecifier((uint64_t)a3);
            unint64_t CryptBlockSize = FigContentKeySpecifierGetCryptBlockSize(v20);
            unint64_t result = FigMediaSegmentSpecifierGetBytesToRead((uint64_t)a3);
            int64_t v17 = (result + 2 * CryptBlockSize - 1) / CryptBlockSize * CryptBlockSize;
          }
        }
      }
    }
  }
  unint64_t v22 = MediaFilePrivateData[7];
  BOOL v23 = v17 >= v22;
  uint64_t v24 = v17 - v22;
  if (v23) {
    uint64_t v25 = v24;
  }
  else {
    uint64_t v25 = 0;
  }
  if (a5)
  {
    uint64_t v26 = a1;
    unint64_t result = segPumpShouldPadByteCountForMediaSegment(a1, (uint64_t)a3);
    if (result)
    {
      uint64_t v27 = FigMediaSegmentSpecifierGetContentKeySpecifier((uint64_t)a3);
      unint64_t v28 = FigContentKeySpecifierGetCryptBlockSize(v27);
      unint64_t result = FigMediaSegmentSpecifierGetStartOffset((uint64_t)a3);
      if (result >= 2 * v28)
      {
        unint64_t result = FigMediaSegmentSpecifierGetStartOffset((uint64_t)a3);
        unint64_t v29 = result % v28 + v28;
        v15 -= v29;
        unint64_t v52 = v29;
        v25 += v29;
      }
      else
      {
        unint64_t v52 = 0;
      }
      unint64_t v30 = (v15 + v25) % v28;
      if (v30) {
        unint64_t v31 = v28 - v30;
      }
      else {
        unint64_t v31 = 0;
      }
      v25 += v28 + v31;
    }
    else
    {
      unint64_t v52 = 0;
    }
  }
  else
  {
    unint64_t v52 = 0;
    uint64_t v26 = a1;
  }
  uint64_t v53 = v15;
  if (a4 != a3 || ((v51 = (unsigned char *)(v26 + 8208), v25 >= 1) ? (BOOL v33 = *(unsigned char *)(v26 + 8208) == 0) : (BOOL v33 = 1), v33))
  {
    uint64_t v32 = v25;
  }
  else
  {
    double v34 = a3;
    uint64_t v32 = v25;
    uint64_t v48 = a8;
    uint64_t v49 = a6;
    double v50 = a7;
    while (v34 && v32 >= 1 && *v51)
    {
      if (FigMediaSegmentSpecifierGetType((uint64_t)v34) == 1)
      {
        CFIndex v35 = 0;
        while (1)
        {
          unint64_t result = FigMediaPlaylistGetMediaSegmentSpecifiers(a2[7]);
          if (result) {
            unint64_t result = CFArrayGetCount((CFArrayRef)result);
          }
          if (v35 >= (uint64_t)result) {
            goto LABEL_49;
          }
          CFArrayRef MediaSegmentSpecifiers = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(a2[7]);
          CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(MediaSegmentSpecifiers, v35);
          unint64_t result = FigMediaSegmentSpecifierGetMapSegmentSpecifier((uint64_t)ValueAtIndex);
          ++v35;
          if ((const void *)result == v34) {
            goto LABEL_40;
          }
        }
      }
      unint64_t result = FigMediaSegmentSpecifierGetNextSegment((uint64_t)v34);
      CFDictionaryRef ValueAtIndex = (const void *)result;
LABEL_40:
      if (!ValueAtIndex) {
        goto LABEL_48;
      }
      unint64_t v38 = segPumpGetMediaFilePrivateData(ValueAtIndex);
      CFURLRef v39 = (const __CFURL *)a2[2];
      CFURLRef v40 = (const __CFURL *)a2[3];
      uint64_t v41 = segPumpGetMediaFilePrivateData(v34);
      segPumpEnsureMediaSegmentURLs(v34, v39, v40);
      uint64_t v42 = (const void *)v41[2];
      CFURLRef v43 = (const __CFURL *)a2[2];
      CFURLRef v44 = (const __CFURL *)a2[3];
      int v45 = (CFTypeRef *)segPumpGetMediaFilePrivateData(ValueAtIndex);
      segPumpEnsureMediaSegmentURLs(ValueAtIndex, v43, v44);
      unint64_t result = FigCFHTTPCompareURLs(v42, v45[2]);
      if (!result)
      {
LABEL_48:
        a8 = v48;
        a6 = v49;
        a7 = v50;
        break;
      }
      a8 = v48;
      a6 = v49;
      a7 = v50;
      if (!v38[73])
      {
        v57[0] = 0;
        uint64_t v56 = 0;
        unint64_t result = segPumpSeeIfMediaFileIsInCache(a1, (uint64_t)a2, ValueAtIndex, 0, 0);
        if (!result)
        {
          unint64_t result = segPumpGetRequestedByteRangeForMediaFileHelper(a1, a2, ValueAtIndex, 0, a5, v57, &v56, 0);
          if (v56 >= 1 && v57[0] <= v32 + v53)
          {
            uint64_t v46 = v57[0] - (v32 + v53) + v56;
            uint64_t v32 = v57[0] - v53 + v56;
            double v34 = ValueAtIndex;
            if (v46 > 0) {
              continue;
            }
          }
        }
      }
      break;
    }
LABEL_49:
    if (v32 > v25 && dword_1E9351350)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      a7 = v50;
      unint64_t result = fig_log_call_emit_and_clean_up_after_send_and_compose();
      a6 = v49;
    }
  }
  if (a6) {
    *a6 = v53;
  }
  if (a7) {
    *a7 = v32;
  }
  if (a8) {
    *a8 = v52;
  }
  return result;
}

void segPumpPrepareMediaConnectionForNewRequest(uint64_t a1, uint64_t a2, const void *a3, const void *a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  segPumpSetMediaFileForMediaConnection((void *)a5, a2, a3, a4);
  *(void *)(a5 + 120) = 0;
  *(_DWORD *)(a5 + 96) = 0;
  *(void *)(a5 + 216) = 0;
  *(void *)(a5 + 224) = 0;
  *(void *)(a5 + 232) = 0;
  *(void *)(a5 + 240) = a6;
  *(void *)(a5 + 248) = a7;
  *(void *)(a5 + 256) = 0;
  *(_WORD *)(a5 + 280) = 0;
  *(void *)(a5 + 296) = 0;
  *(void *)(a5 + 304) = 0;
  ++*(void *)(a1 + 8504);
  if (!a8 || *(unsigned char *)(a5 + 208) != 1)
  {
    uint64_t v13 = *(const void **)(a5 + 128);
    if (v13)
    {
      CFRelease(v13);
      *(void *)(a5 + 128) = 0;
    }
    *(void *)(a5 + 136) = 0;
  }
  *(unsigned char *)(a5 + 208) = a8;
  uint64_t v14 = *(void *)(a1 + 9048);
  if (v14)
  {
    uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v15) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = 0;
    }
    int64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 32);
    if (v17) {
      v17(v14, 0x1EE582B98, 0x1EE583BF8, 1);
    }
  }
  Interfaceint Type = *(_DWORD *)(a1 + 8464);
  if (!InterfaceType)
  {
    Interfaceint Type = *(_DWORD *)(a1 + 8460);
    if (!InterfaceType)
    {
      if (!*(void *)(a1 + 8448)) {
        return;
      }
      Interfaceint Type = FigNetworkPathInformationGetInterfaceType();
    }
  }
  if ((InterfaceType - 3) >= 2)
  {
    if (InterfaceType != 5) {
      return;
    }
    CFTypeRef cf = 0;
    FigNetworkWirelessReportingInterfaceCopyCellStats(&cf);
    FigNetworkWirelessReportingReportCellStats(*(void *)(a1 + 9048), (uint64_t)cf);
  }
  else
  {
    CFTypeRef cf = 0;
    FigNetworkWirelessReportingInterfaceCopyWifiStats(&cf);
    FigNetworkWirelessReportingReportWiFiStats(*(void *)(a1 + 9048), (uint64_t)cf);
  }
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t segPumpMediaFileMemoryRequestCallback(uint64_t a1, uint64_t a2, int a3, uint64_t a4, void *a5, void *a6)
{
  uint64_t v22 = 0;
  CFTypeRef cf = 0;
  uint64_t v21 = 0;
  uint64_t BlockBuffer = segPumpLockAndCopyPumpFromRetainProxy(a1, &cf, &v22);
  if (!BlockBuffer)
  {
    StreamFromMediauint64_t HTTPRequest = segPumpGetStreamFromMediaHTTPRequest(v22, a2, a3, &v21);
    uint64_t v13 = v21;
    if (StreamFromMediaHTTPRequest) {
      BOOL v14 = v21 == 0;
    }
    else {
      BOOL v14 = 1;
    }
    if (v14 || !v21[1])
    {
      uint64_t v19 = 0;
      goto LABEL_17;
    }
    unint64_t v15 = v21[17];
    if (a4 - 1 >= 0x20000 - v15 && v15 > 0x10000)
    {
      uint64_t v16 = (const void *)v21[16];
      if (v16)
      {
        CFRelease(v16);
        uint64_t v13 = v21;
        v21[16] = 0;
      }
      v13[17] = 0;
    }
    CFTypeRef v17 = (CFTypeRef)v13[16];
    if (v17) {
      goto LABEL_15;
    }
    segPumpGetMediaDataMemoryPool(v22);
    uint64_t BlockBuffer = FigMemoryPoolCreateBlockBuffer();
    if (!BlockBuffer)
    {
      float v18 = v21;
      v21[17] = 0;
      CFTypeRef v17 = (CFTypeRef)v18[16];
      if (!v17)
      {
LABEL_16:
        uint64_t v19 = 0;
        *a5 = v17;
        *a6 = v18[17];
        goto LABEL_17;
      }
LABEL_15:
      CFTypeRef v17 = CFRetain(v17);
      float v18 = v21;
      goto LABEL_16;
    }
  }
  uint64_t v19 = BlockBuffer;
LABEL_17:
  FigRetainProxyUnlockMutex();
  if (cf) {
    CFRelease(cf);
  }
  return v19;
}

void segPumpMediaFileReadCallback(uint64_t a1, int a2, uint64_t a3, uint64_t a4, size_t a5, int64_t a6, char a7, uint64_t a8)
{
  uint64_t v161 = *MEMORY[0x1E4F143B8];
  uint64_t v144 = 0;
  v145[0] = 0;
  CFNumberRef number = 0;
  uint64_t v143 = 0;
  CFTypeRef v140 = 0;
  uint64_t valuePtr = 0;
  CFTypeRef v138 = 0;
  CFTypeRef v139 = 0;
  CFTypeRef v136 = 0;
  CFTypeRef v137 = 0;
  FigRetainProxyRetain();
  uint64_t v14 = segPumpLockAndCopyPumpFromRetainProxy(a3, v145, &v144);
  if (v14)
  {
    uint64_t v105 = v14;
    uint64_t v16 = 0;
LABEL_187:
    CFMutableDictionaryRef Mutable = 0;
LABEL_126:
    segPumpSendEndCallbackForAllActiveStreamsWithOSStatus(a3, v105);
    goto LABEL_127;
  }
  uint64_t v15 = v144;
  uint64_t v16 = 0;
  StreamFromMediauint64_t HTTPRequest = (uint64_t *)segPumpGetStreamFromMediaHTTPRequest(v144, a1, a2, &v143);
  if (!StreamFromMediaHTTPRequest)
  {
    CFMutableDictionaryRef Mutable = 0;
    goto LABEL_127;
  }
  CFMutableDictionaryRef Mutable = 0;
  if (!v143) {
    goto LABEL_127;
  }
  if (!*(void *)(v143 + 32))
  {
    uint64_t v16 = 0;
    CFMutableDictionaryRef Mutable = 0;
    goto LABEL_127;
  }
  if (a7)
  {
    segPumpRTCReportingUpdatePreLTKUStats_HeadersAvailable(v15, a1);
    uint64_t v18 = v144;
    if (*(unsigned char *)(v144 + 330))
    {
      if (segPumpIsProtocolUsedByRequest(a1, @"h3")) {
        *(unsigned char *)(v18 + 330) = segPumpCheckPriorityHeaderLowLatencyServerCompliance(a1, 1);
      }
    }
  }
  uint64_t v19 = *(void *)(v143 + 32);
  uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
  uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v21) {
    uint64_t v22 = v21;
  }
  else {
    uint64_t v22 = 0;
  }
  BOOL v23 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v22 + 48);
  if (v23) {
    v23(v19, 0x1EE57B6B8, AllocatorForMedia, &v138);
  }
  uint64_t v24 = *(void *)(v143 + 32);
  uint64_t v25 = FigGetAllocatorForMedia();
  uint64_t v26 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v26) {
    uint64_t v27 = v26;
  }
  else {
    uint64_t v27 = 0;
  }
  unint64_t v28 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v27 + 48);
  if (v28) {
    v28(v24, 0x1EE57B798, v25, &v139);
  }
  uint64_t v29 = *(void *)(v143 + 32);
  uint64_t v30 = FigGetAllocatorForMedia();
  uint64_t v31 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v31) {
    uint64_t v32 = v31;
  }
  else {
    uint64_t v32 = 0;
  }
  BOOL v33 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v32 + 48);
  if (v33) {
    v33(v29, 0x1EE57B7D8, v30, &v137);
  }
  FigCFDictionaryGetInt64IfPresent();
  FigCFDictionaryGetInt64IfPresent();
  if ((a7 & 2) != 0)
  {
    int v34 = *(_DWORD *)(v144 + 9068);
    if (*(unsigned char *)(v144 + 9112)) {
      BOOL v35 = v34 != 0;
    }
    else {
      BOOL v35 = v34 == 2;
    }
    FigNetworkInterfaceReporterSamplePhysicalStatistics(*(void *)(v144 + 9120), a1, *(void *)(v144 + 9048), 0x1EE582B98, v35);
    segPumpRTCReportingUpdatePrivateAppleCDNInfo(v144, a1);
    FigReportingAgentUpdateFinalTransactionMetrics(*(void *)(v144 + 9048), a1, 0, 0);
    uint64_t v36 = v144;
    *(void *)&long long v159 = 0;
    uint64_t v37 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v37) {
      uint64_t v38 = v37;
    }
    else {
      uint64_t v38 = 0;
    }
    size_t v130 = a5;
    CFURLRef v39 = *(void (**)(uint64_t, void, void, void, void, void, long long *, void, void, void, void, void, void))(v38 + 40);
    if (v39)
    {
      v39(a1, 0, 0, 0, 0, 0, &v159, 0, 0, 0, 0, 0, 0);
      if ((uint64_t)v159 >= 1)
      {
        uint64_t v40 = *(void *)(v36 + 9048);
        if (v40)
        {
          uint64_t v41 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v41) {
            uint64_t v42 = v41;
          }
          else {
            uint64_t v42 = 0;
          }
          CFURLRef v43 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v42 + 32);
          if (v43) {
            v43(v40, 0x1EE582CD8, 0x1EE585A58, 1);
          }
          uint64_t v44 = *(void *)(v36 + 9048);
          if (v44)
          {
            unint64_t v45 = v159;
            uint64_t v46 = *(void *)(CMBaseObjectGetVTable() + 16);
            uint64_t v47 = v46 ? v46 : 0;
            uint64_t v48 = *(void (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v47 + 32);
            if (v48) {
              v48(v44, 0x1EE582CD8, 0x1EE585A78, v45 / 0xF4240);
            }
          }
        }
      }
    }
    uint64_t v131 = a3;
    uint64_t v49 = v144;
    uint64_t v50 = *(void *)(v144 + 9048);
    if (v50)
    {
      CFStringRef v51 = CFURLCopyHostName(*(CFURLRef *)(v143 + 16));
      if (v51)
      {
        CFStringRef v52 = v51;
        if (*(unsigned char *)(v49 + 9080))
        {
          uint64_t v53 = *(void *)(CMBaseObjectGetVTable() + 16);
          uint64_t v54 = v53 ? v53 : 0;
          uint64_t v55 = *(void (**)(uint64_t, uint64_t, uint64_t, CFStringRef, void))(v54 + 48);
          if (v55) {
            v55(v50, 0x1EE582B98, 0x1EE584CB8, v52, 0);
          }
        }
        CFRelease(v52);
      }
    }
    uint64_t v132 = a1;
    unsigned int v133 = a8;
    uint64_t v57 = v144;
    CFTypeRef v56 = v145[0];
    CFTypeRef v58 = v139;
    uint64_t v59 = v143;
    CFTypeRef cf = 0;
    *(void *)uint64_t v150 = 0;
    double v147 = 0.0;
    *(double *)os_log_type_t type = 0.0;
    v145[1] = 0;
    double v146 = 0.0;
    if (v138)
    {
      FigCFDictionaryGetDoubleIfPresent();
      FigCFDictionaryGetDoubleIfPresent();
      FigCFDictionaryGetDoubleIfPresent();
      FigCFDictionaryGetDoubleIfPresent();
      if (!FigCreateErrorForOSStatus(a8, (CFErrorRef *)v150))
      {
        int v60 = (void *)(*(void *)(v57 + 16 * *(void *)(v57 + 8416) + 384) + 680);
        char v129 = a7;
        while (1)
        {
          int v60 = (void *)*v60;
          if (!v60) {
            break;
          }
          CFDataRef v61 = (const __CFData *)v60[22];
          if (v61) {
            goto LABEL_61;
          }
        }
        CFDataRef v61 = 0;
LABEL_61:
        CFDataRef v62 = FigCFHTTPCreateAddressString(v61);
        CFAllocatorRef v64 = (const __CFAllocator *)FigGetAllocatorForMedia();
        long long v65 = *(const void **)(v59 + 16);
        long long v66 = (const void *)StreamFromMediaHTTPRequest[2];
        uint64_t v128 = v57;
        long long v67 = v58;
        if ((unint64_t)*StreamFromMediaHTTPRequest > 2) {
          int v68 = 0;
        }
        else {
          int v68 = *(_DWORD *)&aEdivnuosltbs[4 * *StreamFromMediaHTTPRequest];
        }
        CFAbsoluteTime v69 = v147;
        CFAbsoluteTime v70 = *(double *)type;
        CFAbsoluteTime v71 = v146;
        BOOL v72 = *(const void **)v150;
        uint64_t v73 = *(void *)(v59 + 8);
        if (v73) {
          char v74 = FigMediaSegmentSpecifierGetType(v73) == 1;
        }
        else {
          char v74 = 0;
        }
        long long v159 = *MEMORY[0x1E4F1F9F8];
        uint64_t v160 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
        int v75 = FigMetricHLSMediaSegmentRequestEventCreate(v64, v65, v66, v62, &v159, 0, 0, v70, v69, v71, v69, v63, 0, 0, 0, v72, v67, v68, v74,
                &cf);
        CFTypeRef v76 = cf;
        if (!v75)
        {
          segPumpPublishMetricEvent((uint64_t)v56, v128, (void *)cf);
          CFTypeRef v76 = cf;
        }
        a7 = v129;
        if (v76) {
          CFRelease(v76);
        }
        if (v62) {
          CFRelease(v62);
        }
      }
    }
    if (*(void *)v150) {
      CFRelease(*(CFTypeRef *)v150);
    }
    segPumpSetWiFiStatsOnNetworkPredictor(v144, v143 + 16);
    a5 = v130;
    a3 = v131;
    a8 = v133;
    a1 = v132;
  }
  uint64_t v77 = *(void *)(v143 + 32);
  uint64_t v78 = FigGetAllocatorForMedia();
  uint64_t v79 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v79) {
    uint64_t v80 = v79;
  }
  else {
    uint64_t v80 = 0;
  }
  unsigned int v81 = *(unsigned int (**)(uint64_t, __CFString *, uint64_t, CFNumberRef *))(v80 + 48);
  if (v81 && !v81(v77, @"FHRP_PayloadLength", v78, &number)) {
    CFNumberGetValue(number, kCFNumberSInt64Type, &valuePtr);
  }
  uint64_t v82 = *(void *)(v143 + 32);
  uint64_t v83 = FigGetAllocatorForMedia();
  uint64_t v84 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v84) {
    uint64_t v85 = v84;
  }
  else {
    uint64_t v85 = 0;
  }
  uint64_t v86 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v85 + 48);
  if (!v86 || v86(v82, 0x1EE57B698, v83, &v140) || FigCFEqual()) {
    goto LABEL_88;
  }
  uint64_t v106 = v143;
  if (*(void *)(v143 + 176))
  {
    uint64_t v107 = *(void *)(v144 + 9048);
    if (v107)
    {
      uint64_t v108 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v109 = v108 ? v108 : 0;
      size_t v111 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v109 + 32);
      if (v111) {
        v111(v107, 0x1EE582B98, 0x1EE583DD8, 1);
      }
    }
    ++StreamFromMediaHTTPRequest[118];
    uint64_t v106 = v143;
    uint64_t v110 = *(const void **)(v143 + 176);
  }
  else
  {
    uint64_t v110 = 0;
  }
  CFTypeRef v112 = v140;
  *(void *)(v106 + 176) = v140;
  if (v112) {
    CFRetain(v112);
  }
  if (v110) {
    CFRelease(v110);
  }
  uint64_t v113 = v144;
  CFDataRef v114 = FigCFHTTPCreateAddressString(*(const __CFData **)(v143 + 176));
  if (v114)
  {
    CFDataRef v115 = v114;
    uint64_t v116 = *(void *)(v113 + 9048);
    if (v116)
    {
      uint64_t v117 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v118 = v117 ? v117 : 0;
      CFArrayRef v119 = *(void (**)(uint64_t, uint64_t, uint64_t, const __CFData *, void))(v118 + 48);
      if (v119) {
        v119(v116, 0x1EE582B98, 0x1EE583D78, v115, 0);
      }
    }
    CFRelease(v115);
  }
  if (!dword_1E9351350)
  {
LABEL_88:
    uint64_t v16 = 0;
  }
  else
  {
    if (*(unsigned char *)(v144 + 339)) {
      uint64_t v120 = FigCFHTTPCreateAddressString(*(const __CFData **)(v143 + 176));
    }
    else {
      uint64_t v120 = (void *)CFRetain(@"<redacted>");
    }
    uint64_t v16 = v120;
    if (v120 && dword_1E9351350)
    {
      LODWORD(cf) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v122 = cf;
      if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type[0])) {
        unsigned int v123 = v122;
      }
      else {
        unsigned int v123 = v122 & 0xFFFFFFFE;
      }
      if (v123)
      {
        uint64_t v124 = &stru_1EE53F4B8;
        if (v144 && *(void *)(v144 + 8760)) {
          uint64_t v124 = *(__CFString **)(v144 + 8760);
        }
        uint64_t v125 = *StreamFromMediaHTTPRequest;
        if (v143) {
          uint64_t v126 = *(void *)(v143 + 184);
        }
        else {
          uint64_t v126 = -1;
        }
        *(_DWORD *)uint64_t v150 = 136316162;
        *(void *)&v150[4] = "segPumpMediaFileReadCallback";
        __int16 v151 = 2114;
        v152 = v124;
        __int16 v153 = 2048;
        uint64_t v154 = v125;
        __int16 v155 = 2048;
        uint64_t v156 = v126;
        __int16 v157 = 2114;
        uint64_t v158 = v16;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  if (*(void *)(v143 + 64)) {
    goto LABEL_90;
  }
  uint64_t v87 = *(void *)(v143 + 32);
  uint64_t v88 = FigGetAllocatorForMedia();
  uint64_t v89 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v89) {
    uint64_t v90 = v89;
  }
  else {
    uint64_t v90 = 0;
  }
  CFIndex v91 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v90 + 48);
  if (v91 && !v91(v87, 0x1EE57B8B8, v88, &v136))
  {
    uint64_t v92 = v144;
    *(unsigned char *)(v144 + 8468) = v136 == (CFTypeRef)*MEMORY[0x1E4F1CFD0];
    segPumpUpdateNetworkCostIsExpensive(v92);
  }
  if (!v138)
  {
LABEL_90:
    CFMutableDictionaryRef Mutable = 0;
    goto LABEL_102;
  }
  *(void *)&long long v159 = 0;
  CFTypeRef cf = 0;
  *(void *)uint64_t v150 = 0;
  CFAllocatorRef v93 = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v93, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    FigCFDictionarySetValueFromKeyInDict();
    FigCFDictionarySetValueFromKeyInDict();
    FigCFDictionarySetValueFromKeyInDict();
    FigCFDictionaryGetInt64IfPresent();
    FigCFDictionaryGetDoubleIfPresent();
    FigCFDictionaryGetDoubleIfPresent();
    if (*(double *)v150 - *(double *)&v159 > 0.0) {
      FigCFDictionarySetDouble();
    }
    goto LABEL_101;
  }
  uint64_t v127 = FigSignalErrorAt();
  if (v127)
  {
    uint64_t v105 = v127;
    goto LABEL_187;
  }
LABEL_101:
  int InterfaceTypeFromCFNStats = FigNetworkInterfaceGetInterfaceTypeFromCFNStats((uint64_t)v138);
  uint64_t v95 = v144;
  *(_DWORD *)(v144 + 8464) = InterfaceTypeFromCFNStats;
  segPumpUpdateNetworkCostHasHighSpeedHighPower(v95);
LABEL_102:
  uint64_t v96 = *(void *)(v143 + 8);
  if (v96)
  {
    BOOL v97 = FigMediaSegmentSpecifierGetType(v96) == 1;
    if ((a7 & 2) == 0) {
      goto LABEL_108;
    }
  }
  else
  {
    BOOL v97 = 0;
    if ((a7 & 2) == 0) {
      goto LABEL_108;
    }
  }
  if (!v97) {
    segPumpRTCReportingUpdatePrivateAppleCDNInfo(v144, a1);
  }
LABEL_108:
  int64_t v98 = a6;
  if ((a7 & 0x10) != 0 && !*(unsigned char *)(v143 + 280))
  {
    if (dword_1E9351350)
    {
      char v99 = a7;
      LODWORD(cf) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      unsigned int v100 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v101 = cf;
      if (os_log_type_enabled(v100, type[0])) {
        unsigned int v102 = v101;
      }
      else {
        unsigned int v102 = v101 & 0xFFFFFFFE;
      }
      if (v102)
      {
        uint64_t v103 = &stru_1EE53F4B8;
        if (v144 && *(void *)(v144 + 8760)) {
          uint64_t v103 = *(__CFString **)(v144 + 8760);
        }
        uint64_t v104 = *StreamFromMediaHTTPRequest;
        *(_DWORD *)uint64_t v150 = 136315650;
        *(void *)&v150[4] = "segPumpMediaFileReadCallback";
        __int16 v151 = 2114;
        v152 = v103;
        __int16 v153 = 2048;
        uint64_t v154 = v104;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      a7 = v99;
      int64_t v98 = a6;
    }
    *(unsigned char *)(v144 + 8001) = 1;
  }
  if ((a7 & 4) != 0) {
    *(void *)(v144 + 8544) += v98;
  }
  if ((a7 & 8) != 0) {
    *(void *)(v144 + 8552) += v98;
  }
  uint64_t v105 = segPumpHandleMediaFileData((uint64_t)v145[0], (uint64_t)StreamFromMediaHTTPRequest, v143, a5, v98, valuePtr, (a7 & 2) != 0, a8);
  if (v105) {
    goto LABEL_126;
  }
LABEL_127:
  segPumpUnlockAndSendAllPendingNotifications();
  if (v136) {
    CFRelease(v136);
  }
  if (v138) {
    CFRelease(v138);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v139) {
    CFRelease(v139);
  }
  if (v137) {
    CFRelease(v137);
  }
  if (number) {
    CFRelease(number);
  }
  if (v16) {
    CFRelease(v16);
  }
  if (v140) {
    CFRelease(v140);
  }
  FigRetainProxyRelease();
  if (v145[0]) {
    CFRelease(v145[0]);
  }
}

uint64_t segPumpGetStreamFromMediaHTTPRequest(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  uint64_t v5 = 0;
  while (1)
  {
    uint64_t v6 = a1 + 16 * v5;
    uint64_t result = *(void *)(v6 + 384);
    CFNumberRef v8 = *(uint64_t **)(result + 680);
    if (v8) {
      break;
    }
LABEL_6:
    uint64_t result = *(void *)(v6 + 392);
    CFNumberRef v8 = *(uint64_t **)(result + 680);
    if (v8)
    {
      while (v8[4] != a2 || *((_DWORD *)v8 + 24) != a3)
      {
        CFNumberRef v8 = (uint64_t *)*v8;
        if (!v8) {
          goto LABEL_10;
        }
      }
      goto LABEL_13;
    }
LABEL_10:
    if (++v5 == 3) {
      return 0;
    }
  }
  while (v8[4] != a2 || *((_DWORD *)v8 + 24) != a3)
  {
    CFNumberRef v8 = (uint64_t *)*v8;
    if (!v8) {
      goto LABEL_6;
    }
  }
LABEL_13:
  if (a4) {
    *a4 = v8;
  }
  return result;
}

uint64_t segPumpGetMediaDataMemoryPool(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 7920);
  if (!result)
  {
    uint64_t valuePtr = 0x4014000000000000;
    CFNumberRef v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberDoubleType, &valuePtr);
    CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFAllocatorRef v6 = (const __CFAllocator *)FigGetAllocatorForMedia();
    CFStringRef v7 = CFStringCreateWithFormat(v6, 0, @"BytePumpHTTPSegment-%p", a1);
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F21788], v7);
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F1EFB0], v3);
    *(void *)(a1 + 7920) = CMMemoryPoolCreate(Mutable);
    if (v3) {
      CFRelease(v3);
    }
    if (v7) {
      CFRelease(v7);
    }
    if (Mutable) {
      CFRelease(Mutable);
    }
    return *(void *)(a1 + 7920);
  }
  return result;
}

void segPumpRTCReportingUpdatePrivateAppleCDNInfo(uint64_t a1, uint64_t a2)
{
  CFHTTPMessageRef message = 0;
  if (!a2) {
    return;
  }
  uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
  uint64_t v6 = v5 ? v5 : 0;
  CFStringRef v7 = *(void (**)(uint64_t, uint64_t, uint64_t, CFHTTPMessageRef *))(v6 + 48);
  if (!v7) {
    return;
  }
  v7(a2, 0x1EE57B5F8, AllocatorForMedia, &message);
  if (!message) {
    return;
  }
  CFStringRef v8 = CFHTTPMessageCopyHeaderFieldValue(message, @"Via");
  if (v8)
  {
    CFStringRef v9 = v8;
    CFAllocatorRef v10 = (const __CFAllocator *)FigGetAllocatorForMedia();
    CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(v10, v9, @",");
    if (ArrayBySeparatingStrings)
    {
      CFArrayRef v12 = ArrayBySeparatingStrings;
      CFIndex Count = CFArrayGetCount(ArrayBySeparatingStrings);
      if (Count >= 1)
      {
        unint64_t v14 = Count;
        int v15 = 0;
        uint64_t v16 = 0;
        while (1)
        {
          CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v12, v14 - 1);
          int IsCacheHit = FigCFHTTPVIAHeaderIsCacheHit(ValueAtIndex);
          if (IsCacheHit == -1) {
            goto LABEL_31;
          }
          if (v15 || !IsCacheHit) {
            break;
          }
          if (IsCacheHit == 1)
          {
            int v15 = 1;
            FigReportingAgentStatsUpdateSampleValueWithBool(*(void *)(a1 + 9048), 0x1EE582B98, (uint64_t)*(&kReportingVIAHeaderCDNHitPctKeys)[v16], 1);
            uint64_t v19 = *(void *)(a1 + 9048);
            if (v19)
            {
              uint64_t v20 = (uint64_t)*(&kReportingVIAHeaderCDNHitCountKeys)[v16];
              uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v21) {
                uint64_t v22 = v21;
              }
              else {
                uint64_t v22 = 0;
              }
              uint64_t v27 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 32);
              if (!v27)
              {
                int v15 = 1;
                goto LABEL_30;
              }
              int v15 = 1;
              uint64_t v28 = v19;
              uint64_t v29 = v20;
              uint64_t v30 = 1;
              goto LABEL_28;
            }
          }
          else
          {
            int v15 = 0;
          }
LABEL_30:
          ++v16;
LABEL_31:
          if (v14 >= 2)
          {
            --v14;
            if (v16 < 5) {
              continue;
            }
          }
          goto LABEL_35;
        }
        FigReportingAgentStatsUpdateSampleValueWithBool(*(void *)(a1 + 9048), 0x1EE582B98, (uint64_t)*(&kReportingVIAHeaderCDNHitPctKeys)[v16], 0);
        uint64_t v23 = *(void *)(a1 + 9048);
        if (!v23) {
          goto LABEL_30;
        }
        uint64_t v24 = (uint64_t)*(&kReportingVIAHeaderCDNHitCountKeys)[v16];
        uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v26 = v25 ? v25 : 0;
        uint64_t v27 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 32);
        if (!v27) {
          goto LABEL_30;
        }
        uint64_t v28 = v23;
        uint64_t v29 = v24;
        uint64_t v30 = 0;
LABEL_28:
        v27(v28, 0x1EE582B98, v29, v30);
        goto LABEL_30;
      }
      int v15 = 0;
LABEL_35:
      uint64_t v31 = *(void *)(a1 + 9048);
      if (v31)
      {
        uint64_t v32 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v33 = v32 ? v32 : 0;
        int v34 = *(void (**)(uint64_t, uint64_t, uint64_t, BOOL))(v33 + 32);
        if (v34) {
          v34(v31, 0x1EE582B98, 0x1EE561CB8, v15 == 0);
        }
      }
      FigReportingAgentStatsUpdateSampleValueWithBool(*(void *)(a1 + 9048), 0x1EE582B98, 0x1EE561BF8, v15 == 0);
      uint64_t v35 = *(void *)(a1 + 9048);
      if (v35)
      {
        uint64_t v36 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v37 = v36 ? v36 : 0;
        uint64_t v38 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v37 + 32);
        if (v38) {
          v38(v35, 0x1EE582B98, 0x1EE561CD8, 1);
        }
      }
      CFRelease(v9);
    }
    else
    {
      CFArrayRef v12 = (const __CFArray *)v9;
    }
    CFRelease(v12);
  }
  CFURLRef v39 = (unsigned char *)(a1 + 9064);
  uint64_t v40 = message;
  CFTypeRef v59 = 0;
  if (!*(void *)(a1 + 9088))
  {
    CFAllocatorRef v41 = (const __CFAllocator *)FigGetAllocatorForMedia();
    CFMutableArrayRef Mutable = CFArrayCreateMutable(v41, 0, MEMORY[0x1E4F1D510]);
    *(void *)(a1 + 9088) = Mutable;
    if (!Mutable)
    {
      FigSignalErrorAt();
      goto LABEL_70;
    }
  }
  if (FigCFHTTPCreateRTCReportingAppleCDNVIAEdgeDomainString(v40, (CFStringRef *)&v59))
  {
LABEL_70:
    CFTypeRef v52 = v59;
    goto LABEL_71;
  }
  if (CFArrayGetCount(*(CFArrayRef *)(a1 + 9088)) < 6)
  {
    CFTypeRef v43 = v59;
    v60.length = CFArrayGetCount(*(CFArrayRef *)(a1 + 9088));
    v60.location = 0;
    if (!CFArrayContainsValue(*(CFArrayRef *)(a1 + 9088), v60, v43)) {
      CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 9088), v43);
    }
    CFAllocatorRef v44 = (const __CFAllocator *)FigGetAllocatorForMedia();
    CFStringRef v45 = CFStringCreateByCombiningStrings(v44, *(CFArrayRef *)(a1 + 9088), @",");
    if (v45)
    {
      CFStringRef v46 = v45;
      uint64_t v47 = *(void *)(a1 + 9048);
      if (v47)
      {
        uint64_t v48 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v49 = v48 ? v48 : 0;
        uint64_t v50 = *(void (**)(uint64_t, uint64_t, uint64_t, CFStringRef, void))(v49 + 48);
        if (v50) {
          v50(v47, 0x1EE582B98, 0x1EE584DD8, v46, 0);
        }
      }
      CFRelease(v46);
    }
  }
  uint64_t v51 = *(void *)(a1 + 9048);
  CFTypeRef v52 = v59;
  if (v51)
  {
    uint64_t v53 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v53) {
      uint64_t v54 = v53;
    }
    else {
      uint64_t v54 = 0;
    }
    uint64_t v55 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef, void))(v54 + 48);
    if (v55) {
      v55(v51, 0x1EE582B98, 0x1EE584DF8, v52, 0);
    }
    goto LABEL_70;
  }
LABEL_71:
  if (v52) {
    CFRelease(v52);
  }
  CFTypeRef v56 = message;
  int v57 = *(_DWORD *)(a1 + 9068);
  if (!*(unsigned char *)(a1 + 9112))
  {
    if (v57 != 2) {
      goto LABEL_76;
    }
    goto LABEL_75;
  }
  if (v57)
  {
LABEL_75:
    segPumpRTCReportingLogAndUpdateStats(a1, message, @"Via", 0x1EE584BD8);
    segPumpRTCReportingLogAndUpdateStats(a1, v56, @"Age", 0x1EE561AD8);
    segPumpRTCReportingLogAndUpdateStats(a1, v56, @"x-amz-request-id", 0x1EE561AF8);
    segPumpRTCReportingLogAndUpdateStats(a1, v56, @"apple-timing-app", 0x1EE561B18);
    segPumpRTCReportingLogAndUpdateStats(a1, v56, @"CDN-Server", 0x1EE584EF8);
    CFTypeRef v56 = message;
  }
LABEL_76:
  if (!*v39)
  {
    segPumpRTCReportingLogAndUpdateStats(a1, v56, @"Via", 0x1EE584BD8);
    segPumpRTCReportingLogAndUpdateStats(a1, message, @"CDN-Server", 0x1EE584EF8);
    unsigned char *v39 = 1;
    CFTypeRef v56 = message;
  }
  if (v56) {
    CFRelease(v56);
  }
}

uint64_t segPumpUpdateNetworkCostIsExpensive(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 8472);
  if (v1)
  {
    uint64_t v2 = (uint64_t *)(*(unsigned char *)(result + 8468) ? MEMORY[0x1E4F1CFD0] : MEMORY[0x1E4F1CFC8]);
    uint64_t VTable = CMBaseObjectGetVTable();
    uint64_t v5 = *(void *)(VTable + 8);
    uint64_t result = VTable + 8;
    uint64_t v4 = v5;
    uint64_t v6 = v5 ? v4 : 0;
    CFStringRef v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 56);
    if (v7)
    {
      uint64_t v8 = *v2;
      return v7(v1, 0x1EE57E458, v8);
    }
  }
  return result;
}

uint64_t segPumpHandleMediaFileData(uint64_t a1, uint64_t a2, uint64_t a3, size_t a4, int64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  uint64_t v372 = *MEMORY[0x1E4F143B8];
  uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  uint64_t v350 = *(void *)(a2 + 880);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v17 = *(const void **)(a3 + 8);
  if (v17) {
    MediaFilePrivateData = (double *)segPumpGetMediaFilePrivateData(*(const void **)(a3 + 8));
  }
  else {
    MediaFilePrivateData = 0;
  }
  uint64_t v18 = *(void *)(a3 + 64);
  if (v18)
  {
    if (a8) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v24 = UpTimeNanoseconds - *(void *)(a3 + 40);
    *(void *)(a3 + 64) = UpTimeNanoseconds;
    *(void *)(a3 + 72) = v24;
    uint64_t v18 = UpTimeNanoseconds;
    if (a8)
    {
LABEL_6:
      uint64_t v19 = *(void *)(a2 + 776);
      if (v19 >= 1)
      {
        uint64_t v20 = 0;
        while (*(void *)(*(void *)(a2 + 768) + 8 * v20) != a3)
        {
          if (v19 == ++v20) {
            goto LABEL_10;
          }
        }
        segPumpStreamCancelReadAheadAndResetDataAtIndex(DerivedStorage, a2, v20);
        goto LABEL_44;
      }
LABEL_10:
      if (*(void *)(a2 + 792) == a3)
      {
        segPumpStreamCancelPreloadReadAndResetData(DerivedStorage, a2);
      }
      else if (*(void *)(a2 + 800) == a3)
      {
        segPumpStreamCancelPreloadMapReadAndResetData(DerivedStorage, a2);
      }
      else
      {
        uint64_t v21 = *(void *)(a3 + 8);
        if (v21)
        {
          uint64_t v22 = segPumpHandleMediaFileNetworkError(a1, (void *)a2, a3 + 16, v21, a8);
          if (v22) {
            return v22;
          }
        }
      }
LABEL_44:
      FigHTTPStopAndReleaseTimer((dispatch_object_t *)(a3 + 112));
      return 0;
    }
  }
  uint64_t v25 = *(const void **)(a2 + 296);
  if (v25)
  {
    CFRelease(v25);
    *(void *)(a2 + 296) = 0;
    uint64_t v18 = *(void *)(a3 + 64);
  }
  uint64_t v343 = v18;
  unint64_t v339 = *(void *)(a3 + 40);
  unint64_t v342 = *(void *)(a3 + 72);
  uint64_t v353 = DerivedStorage;
  if (!v17)
  {
    *(void *)(a3 + 224) += a5;
    uint64_t v33 = (void *)(a3 + 136);
    int64_t v32 = a5;
LABEL_38:
    *v33 += a5;
    a5 = v32;
    goto LABEL_39;
  }
  if (!*(unsigned char *)(a3 + 280))
  {
    *(unsigned char *)(a3 + 280) = 1;
    if (!*(void *)(a3 + 256))
    {
      if (!FigMediaSegmentSpecifierGetBytesToRead((uint64_t)v17))
      {
        *((void *)MediaFilePrivateData + 5) += a6;
        uint64_t v26 = MEMORY[0x1E4F1FA20];
        long long v27 = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 16);
        *(_OWORD *)(DerivedStorage + 8912) = *MEMORY[0x1E4F1FA20];
        *(_OWORD *)(DerivedStorage + 8928) = v27;
        *(_OWORD *)(DerivedStorage + 8944) = *(_OWORD *)(v26 + 32);
      }
      *(void *)(a3 + 256) = a6;
    }
  }
  *(void *)(a3 + 224) += a5;
  if (*(void *)(DerivedStorage + 296)
    && *(void *)(a2 + 64)
    && FigMediaSegmentSpecifierGetType((uint64_t)v17) != 1
    && !*((void *)MediaFilePrivateData + 13)
    && segPumpCanAddSegmentToCache((uint64_t *)DerivedStorage, (void *)a2, v17, 0))
  {
    segPumpCreateMediaSegmentCache(DerivedStorage, a2, v17);
  }
  *(void *)(a3 + 136) += a5;
  if (*(uint64_t *)(a3 + 304) >= 1)
  {
    uint64_t StartOffset = FigMediaSegmentSpecifierGetStartOffset(*(void *)(a3 + 8));
    uint64_t v29 = *(void *)(a3 + 304) + *(void *)(a3 + 240);
    if (StartOffset <= v29)
    {
      uint64_t DerivedStorage = v353;
      if (a7) {
        goto LABEL_46;
      }
      goto LABEL_40;
    }
    uint64_t v30 = FigMediaSegmentSpecifierGetStartOffset(*(void *)(a3 + 8));
    int64_t v31 = a5;
    if (v30 - v29 < (unint64_t)a5) {
      int64_t v31 = FigMediaSegmentSpecifierGetStartOffset(*(void *)(a3 + 8)) - v29;
    }
    a4 += v31;
    int64_t v32 = a5 - v31;
    *(void *)(a3 + 304) += v31;
    uint64_t v33 = (void *)(a3 + 216);
    a5 = v31;
    uint64_t DerivedStorage = v353;
    goto LABEL_38;
  }
LABEL_39:
  if (a7) {
    goto LABEL_46;
  }
LABEL_40:
  size_t DataLength = CMBlockBufferGetDataLength(*(CMBlockBufferRef *)(a3 + 272));
  if (!segPumpReadCompletesMediaRange(v17, DataLength + a5))
  {
    BOOL v35 = 0;
    int v347 = 1;
    char v344 = a7;
    if (a7) {
      goto LABEL_48;
    }
    goto LABEL_47;
  }
LABEL_46:
  int v347 = 0;
  char v344 = a7 | 1;
  BOOL v35 = 1;
  if (a7) {
    goto LABEL_48;
  }
LABEL_47:
  if (a5 < 1) {
    goto LABEL_576;
  }
LABEL_48:
  if (!*(void *)(a3 + 232)) {
    *(void *)(a3 + 232) = a5;
  }
  *(void *)(a3 + 216) += a5;
  if (a7) {
    *(void *)(a3 + 56) = UpTimeNanoseconds;
  }
  if (v17) {
    BOOL v36 = v35;
  }
  else {
    BOOL v36 = 0;
  }
  BOOL v345 = v36;
  uint64_t v349 = a1;
  if (v36)
  {
    BOOL v37 = v35;
    *(void *)&v370[0] = 0;
    double v360 = 0.0;
    *(void *)v361 = 0;
    uint64_t v358 = 0;
    uint64_t v359 = 0;
    uint64_t v356 = 0;
    *(void *)os_log_type_t type = 0;
    char v355 = 0;
    int v354 = 0;
    uint64_t v38 = *(void *)(a3 + 32);
    if (v38)
    {
      uint64_t v39 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v40 = v39 ? v39 : 0;
      CFAllocatorRef v41 = *(unsigned int (**)(uint64_t, _OWORD *, unsigned char *, void, double *, uint64_t *, uint64_t *, os_log_type_t *, char *, uint64_t *, int *, void, void))(v40 + 40);
      if (v41)
      {
        if (!v41(v38, v370, v361, 0, &v360, &v359, &v358, type, &v355, &v356, &v354, 0, 0))
        {
          uint64_t v42 = *(void *)v361;
          MediaFilePrivateData[17] = *(double *)v370;
          *((void *)MediaFilePrivateData + 18) = v42;
          uint64_t v43 = v359;
          MediaFilePrivateData[19] = v360;
          *((void *)MediaFilePrivateData + 20) = v43;
          uint64_t v44 = *(void *)type;
          *((void *)MediaFilePrivateData + 21) = v358;
          *((void *)MediaFilePrivateData + 22) = v44;
          *((unsigned char *)MediaFilePrivateData + 184) = v355;
          *((void *)MediaFilePrivateData + 24) = v356;
          *((_DWORD *)MediaFilePrivateData + 50) = v354;
        }
      }
    }
    BOOL v35 = v37;
  }
  else if (!v17)
  {
    goto LABEL_120;
  }
  int v45 = FigMediaSegmentSpecifierGetType((uint64_t)v17);
  char v46 = !v35;
  if (v45) {
    char v46 = 1;
  }
  if ((v46 & 1) == 0)
  {
    BOOL v340 = v35;
    uint64_t v47 = *((void *)MediaFilePrivateData + 6) + a5;
    uint64_t v48 = CMBaseObjectGetDerivedStorage();
    unsigned int v338 = segPumpStreamBitRateRequiredForStream(v48, (void *)a2);
    if (v47 >= 1 && FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)v17) > 0.5)
    {
      uint64_t v49 = (uint64_t)((double)(8 * v47) / FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)v17));
      *(double *)(a2 + 1088) = FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)v17) + *(double *)(a2 + 1088);
      int v50 = *(_DWORD *)(a2 + 1080);
      int v51 = v50 ? (9 * v50 + (int)v49) / 0xAu : v49;
      *(_DWORD *)(a2 + 1080) = v51;
      *(_DWORD *)(a2 + 1084) = v49;
      if (*(void *)(v48 + 8144))
      {
        if (*(void *)(v48 + 7680)) {
          BOOL v52 = *(void *)(v48 + 16 * *(void *)a2 + 392) == a2;
        }
        else {
          BOOL v52 = 0;
        }
        TimeIndouble Seconds = FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)v17);
        LODWORD(v54) = *(_DWORD *)(v48 + 8);
        double v55 = (double)v54;
        if (TimeInSeconds >= (double)v54)
        {
          uint64_t v57 = 0;
          int v56 = 0;
          while (1)
          {
            if (*(void *)(*(void *)(v48 + v57 + 384) + 16))
            {
              if (!v52 || (uint64_t v58 = *(void *)(v48 + v57 + 392)) == 0) {
                uint64_t v58 = *(void *)(v48 + v57 + 384);
              }
              int v59 = *(_DWORD *)(v58 + 1084);
              if (!v59) {
                goto LABEL_119;
              }
              v56 += v59;
            }
            v57 += 16;
            if (v57 == 48) {
              goto LABEL_90;
            }
          }
        }
        LODWORD(v359) = 0;
        double v360 = 0.0;
        if (segPumpGetAverageEstimatedMediaBitrate(v48, v52, &v359, &v360) && v360 > v55)
        {
          int v56 = v359;
LABEL_90:
          if (v56 > v338)
          {
            if (!*(unsigned char *)(v48 + 8006))
            {
              Declaredint PeakBitRate = FigAlternateGetDeclaredPeakBitRate(*(void *)(*(void *)(v48 + 8144) + 8));
              if (DeclaredPeakBitRate && DeclaredPeakBitRate / 10 + DeclaredPeakBitRate < v56)
              {
                segPumpAppendErrorLogEntry(v349, v48, a2, (const __CFURL **)(*(void *)(a2 + 696) + 16), -12318, @"CoreMediaErrorDomain", @"Segment exceeds specified bandwidth for variant", 0, 0, 2u, 3u);
                *(unsigned char *)(v48 + 8006) = 1;
              }
            }
            LODWORD(v358) = 0;
            type[0] = OS_LOG_TYPE_DEFAULT;
            os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int v63 = v358;
            if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type[0])) {
              unsigned int v64 = v63;
            }
            else {
              unsigned int v64 = v63 & 0xFFFFFFFE;
            }
            if (v64)
            {
              long long v65 = *(__CFString **)(v48 + 8760);
              if (!v65) {
                long long v65 = &stru_1EE53F4B8;
              }
              if (a2) {
                uint64_t v66 = *(void *)a2;
              }
              else {
                uint64_t v66 = -1;
              }
              *(_DWORD *)v361 = 136316162;
              *(void *)&v361[4] = "segPumpVerifyMediaBitrateIsBelowAlternatePeakBitrate";
              __int16 v362 = 2114;
              v363 = v65;
              __int16 v364 = 2048;
              uint64_t v365 = v66;
              __int16 v366 = 1024;
              unsigned int v367 = v338;
              __int16 v368 = 1024;
              int v369 = v56;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            uint64_t v67 = 8144;
            if (v52) {
              uint64_t v67 = 7680;
            }
            uint64_t v68 = *(void *)(v48 + v67);
            *(_DWORD *)(v68 + 24) = v56;
            FigAlternateSetPeakBitRate(*(void *)(v68 + 8), v56);
            for (CFIndex i = *(uint64_t **)(v48 + 8096); i; CFIndex i = (uint64_t *)*i)
            {
              if (i != (uint64_t *)v68)
              {
                int v70 = *(_DWORD *)(v68 + 28);
                int v71 = *((_DWORD *)i + 7) - v70;
                if (v71 < 0) {
                  int v71 = v70 - *((_DWORD *)i + 7);
                }
                if ((double)v71 / (double)v70 <= 0.01)
                {
                  *((_DWORD *)i + 6) = v56;
                  FigAlternateSetPeakBitRate(i[1], v56);
                }
              }
            }
            segPumpReadyNotification((void *)v48, @"FBPAL_AlternateListChanged", 0);
            segPumpInitAlternateSelectionBoss(v349, v48);
          }
        }
      }
    }
LABEL_119:
    uint64_t DerivedStorage = v353;
    BOOL v35 = v340;
  }
LABEL_120:
  BOOL v72 = (unsigned char *)(DerivedStorage + 8007);
  *(void *)(DerivedStorage + 8536) += a5;
  *(void *)(a2 + 1096) += a5;
  if (*(void *)a2 == 1)
  {
    char v74 = (void *)(DerivedStorage + 8640);
    BOOL v73 = v345;
    goto LABEL_124;
  }
  BOOL v73 = v345;
  if (!*(void *)a2)
  {
    char v74 = (void *)(DerivedStorage + 8632);
LABEL_124:
    *v74 += a5;
  }
  if (a7)
  {
    *(void *)(a3 + 104) = 0;
    FigHTTPStopAndReleaseTimer((dispatch_object_t *)(a3 + 112));
    *(_DWORD *)(a3 + 80) = 0;
    int v75 = *(const void **)(a3 + 88);
    if (v75)
    {
      CFRelease(v75);
      *(void *)(a3 + 88) = 0;
    }
    if (*(unsigned char *)(DerivedStorage + 8712))
    {
      uint64_t v76 = 8840;
      if (UpTimeNanoseconds > *(void *)(a3 + 288)) {
        uint64_t v76 = 8848;
      }
      ++*(void *)(DerivedStorage + v76);
    }
    *(void *)(a3 + 288) = 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v77 = *(void *)(a3 + 32);
    if (v77)
    {
      if (!*(unsigned char *)(a3 + 145)
        || (segPumpStreamDontReuseHTTPRequest(DerivedStorage, a3), (uint64_t v77 = *(void *)(a3 + 32)) != 0))
      {
        *(void *)(a3 + 152) = *(void *)(a3 + 24);
        *(void *)(a3 + 160) = v77;
        *(void *)(a3 + 104) = 0;
        *(void *)(a3 + 24) = 0;
        *(void *)(a3 + 32) = 0;
        ++*(void *)(a3 + 192);
      }
    }
  }
  if (v73
    && !*(unsigned char *)(DerivedStorage + 8712)
    && !*(unsigned char *)(a2 + 873)
    && !FigMediaSegmentSpecifierGetType((uint64_t)v17)
    && !segPumpStreamHasPreloadConnectionForSegment((void *)a2, v17, 1))
  {
    double ElapsedTimeForConnectionOnMedia = segPumpGetElapsedTimeForConnectionOnMedia(a2, a3);
    if (ElapsedTimeForConnectionOnMedia <= FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)v17))
    {
      if (*(unsigned char *)(a2 + 874))
      {
        uint64_t v79 = *(void *)(a2 + 752);
        if (v79 < 1) {
          goto LABEL_151;
        }
        uint64_t v80 = a2 + 696;
        int v81 = 1;
        do
        {
          if (*(void *)v80 && *(void *)(*(void *)v80 + 32)) {
            int v81 = 0;
          }
          v80 += 8;
          --v79;
        }
        while (v79);
        if (v81) {
LABEL_151:
        }
          *(unsigned char *)(a2 + 874) = 0;
      }
    }
    else
    {
      segPumpSetCurrentSegmentTooSlow(DerivedStorage, a2);
    }
  }
  if (segPumpShouldDoSegmentReadAheads((unsigned char *)DerivedStorage))
  {
    uint64_t v82 = *(void *)(a2 + 776);
    if (v82 >= 1)
    {
      uint64_t v83 = *(void *)(a2 + 768);
      do
      {
        if (*(void *)v83) {
          *(void *)(*(void *)v83 + 40) = UpTimeNanoseconds;
        }
        v83 += 8;
        --v82;
      }
      while (v82);
    }
  }
  if (!v17
    || !FigMediaSegmentSpecifierGetContentKeySpecifier((uint64_t)v17)
    || *(const void **)(a2 + 256) != v17 && *(const void **)(a2 + 264) != v17)
  {
    goto LABEL_164;
  }
  *(void *)&v370[0] = 0;
  *(void *)v361 = 0;
  uint64_t ContentKeySpecifier = (const void *)FigMediaSegmentSpecifierGetContentKeySpecifier((uint64_t)v17);
  uint64_t CryptKeyCommonData = segPumpGetCryptKeyCommonData(ContentKeySpecifier, v370, v361);
  if (CryptKeyCommonData) {
    goto LABEL_489;
  }
  if (*(unsigned char *)(*(void *)v361 + 144)) {
    goto LABEL_164;
  }
  if (!*(void *)(DerivedStorage + 9592)) {
    *(void *)(DerivedStorage + 9592) = FigGetUpTimeNanoseconds();
  }
  uint64_t v117 = FigMediaSegmentSpecifierGetContentKeySpecifier((uint64_t)v17);
  if (FigContentKeySpecifierGetEncryptionMethod(v117) - 3 < 0xFFFFFFFE
    || FigMediaSegmentSpecifierGetType((uint64_t)v17) != 1)
  {
    BOOL v123 = *(unsigned char *)(DerivedStorage + 322) == 0;
    BOOL v86 = *(unsigned char *)(DerivedStorage + 322) != 0;
    int v87 = v347;
    if (v123) {
      int v87 = 1;
    }
  }
  else
  {
LABEL_164:
    BOOL v86 = 0;
    int v87 = 1;
  }
  int v346 = v87;
  if (v72[705] || *(void *)(a2 + 696) != a3) {
    BOOL v86 = 1;
  }
  if (!v347)
  {
LABEL_174:
    if (!v17) {
      goto LABEL_186;
    }
    goto LABEL_175;
  }
  if ((a7 & 1) == 0 || (uint64_t v88 = *(void *)(a2 + 696)) != 0 && (*(void *)(v88 + 32) || *(void *)(v88 + 104)))
  {
    BOOL v35 = 0;
    goto LABEL_174;
  }
  BOOL v35 = *(void *)(a2 + 704) == 0;
  if (!v17) {
    goto LABEL_186;
  }
LABEL_175:
  if (v35)
  {
    BOOL v89 = v35;
    if (FigMediaSegmentSpecifierGetType((uint64_t)v17) != 1)
    {
      uint64_t v90 = *(const void **)(a3 + 8);
      if (v90)
      {
        if (*((void *)segPumpGetMediaFilePrivateData(v90) + 2))
        {
          CFIndex v91 = (CFTypeRef *)segPumpGetMediaFilePrivateData(*(const void **)(a3 + 8));
          CFRelease(v91[2]);
          *((void *)segPumpGetMediaFilePrivateData(*(const void **)(a3 + 8)) + 2) = 0;
        }
      }
    }
    uint64_t v92 = 64;
    if (!*(unsigned char *)(a3 + 281)) {
      uint64_t v92 = 40;
    }
    uint64_t v93 = *(void *)(a3 + v92);
    if (*(uint64_t *)(a3 + 296) <= 0) {
      uint64_t v94 = v93;
    }
    else {
      uint64_t v94 = *(void *)(a3 + 296);
    }
    MediaFilePrivateData[10] = *(double *)(a2 + 808) + (double)(FigGetUpTimeNanoseconds() - v94) / 1000000000.0;
    BOOL v35 = v89;
  }
LABEL_186:
  if (v17 && !v86)
  {
    v341 = v72;
    uint64_t v95 = *(void *)(a3 + 8);
    if (v95)
    {
      int v96 = v35;
      if (FigMediaSegmentSpecifierGetBytesToRead(v95))
      {
        uint64_t v97 = *(void *)(a3 + 240);
        uint64_t v98 = *(void *)(a3 + 216);
        uint64_t v99 = FigMediaSegmentSpecifierGetStartOffset(*(void *)(a3 + 8));
        uint64_t v100 = FigMediaSegmentSpecifierGetBytesToRead(*(void *)(a3 + 8));
        size_t v101 = (v98 + v97 - (v99 + v100)) & ~((v98 + v97 - (v99 + v100)) >> 63);
        goto LABEL_210;
      }
    }
    else
    {
      int v96 = v35;
    }
    size_t v101 = 0;
LABEL_210:
    int v108 = segPumpAccumConnCompletesMediaRange(a3, v17);
    if (!v108 || (uint64_t appended = segPumpAppendBytesToMediaConnectionBuffer(a3, a4, a5), !appended))
    {
      uint64_t appended = segPumpDeliverAccumulatedBuffer(v349, v353, a2, a3, v17, v108);
      if (!appended)
      {
        if (FigRetainProxyIsInvalidated() || v350 != *(void *)(a2 + 880))
        {
          uint64_t v23 = 0;
          goto LABEL_578;
        }
        if (v108)
        {
          BOOL v105 = 0;
          uint64_t DerivedStorage = v353;
          BOOL v35 = v96;
          BOOL v72 = v341;
          goto LABEL_245;
        }
        uint64_t v110 = a5 - v101;
        size_t v111 = (a5 - v101) & ~((uint64_t)(a5 - v101) >> 63);
        if (a7)
        {
          uint64_t v112 = *(void *)(a2 + 704);
          if (v112)
          {
            char v113 = v344;
            if (*(void *)(a3 + 8) == *(void *)(v112 + 8)) {
              char v113 = v344 & 0xFE;
            }
            char v344 = v113;
          }
        }
        if (!*((void *)MediaFilePrivateData + 13)
          || (uint64_t appended = segPumpAppendBytesToCache(v353, a2, v17, *(OpaqueCMBlockBuffer **)(a3 + 128), a4, v111, v96),
              !appended))
        {
          size_t v348 = v111;
          uint64_t v114 = *(void *)(a3 + 8);
          if (*(void *)(a2 + 256) == v114 || *(void *)(a2 + 264) == v114)
          {
            BOOL v105 = *(unsigned char *)(a2 + 404) != 0;
            if (!v101) {
              goto LABEL_235;
            }
          }
          else
          {
            BOOL v105 = 0;
            if (!v101)
            {
LABEL_235:
              BOOL v35 = v96;
              if (v346 && v96)
              {
                uint64_t v116 = *(const void **)(a3 + 8);
                BOOL v72 = v341;
                if (v116)
                {
                  CFRelease(v116);
                  *(void *)(a3 + 8) = 0;
                }
              }
              else
              {
                BOOL v72 = v341;
                if (!v35) {
                  goto LABEL_241;
                }
              }
              uint64_t v102 = segPumpStreamUnchainMediaConnIfChaining(v349, (void *)a2, (void *)a3);
              if (!v102)
              {
LABEL_241:
                if (v105 && (v110 > 0 || (v344 & 1) != 0))
                {
                  uint64_t DerivedStorage = v353;
                  if (FigMediaSegmentSpecifierGetContentKeySpecifier((uint64_t)v17) && *(unsigned char *)(v353 + 322))
                  {
                    uint64_t v118 = segPumpMediaFileHandleCryptData(v349, v353, a2, v17, *(OpaqueCMBlockBuffer **)(a3 + 128), a4, v348, v344);
                    if (v118 == -12465)
                    {
                      uint64_t CryptKeyCommonData = segPumpHandleMediaFileNetworkError(v349, (void *)a2, 0, (uint64_t)v17, 4294954831);
                      goto LABEL_489;
                    }
                    uint64_t v23 = v118;
                    if (v118 == -12463)
                    {
                      uint64_t CryptKeyCommonData = segPumpHandleCryptFailure(v349, v353, a2);
                      goto LABEL_489;
                    }
                  }
                  else
                  {
                    uint64_t v23 = segPumpSendMediaCallback(v349, v353, a2, v17, *(OpaqueCMBlockBuffer **)(a3 + 128), a4, v348, v344, 0);
                  }
                  if (v23) {
                    goto LABEL_568;
                  }
                  int v115 = v346;
                  if (FigRetainProxyIsInvalidated()
                    || v350 != *(void *)(a2 + 880)
                    || *(const void **)(a2 + 256) != v17 && *(const void **)(a2 + 264) != v17)
                  {
                    goto LABEL_576;
                  }
                  BOOL v105 = 1;
                  BOOL v72 = v341;
                  if ((a7 & 1) == 0) {
                    goto LABEL_285;
                  }
                  goto LABEL_246;
                }
                uint64_t DerivedStorage = v353;
                *((void *)MediaFilePrivateData + 6) += v348;
LABEL_245:
                int v115 = v346;
                if ((a7 & 1) == 0) {
                  goto LABEL_285;
                }
LABEL_246:
                if (*(void *)(a2 + 704))
                {
                  uint64_t CryptKeyCommonData = segPumpMoveToNextParallelConnection(v349, DerivedStorage, a2);
                  if (!CryptKeyCommonData)
                  {
                    if (!FigRetainProxyIsInvalidated())
                    {
                      uint64_t v23 = 0;
                      if (v350 != *(void *)(a2 + 880)) {
                        goto LABEL_568;
                      }
                      goto LABEL_286;
                    }
                    goto LABEL_576;
                  }
                  goto LABEL_489;
                }
LABEL_285:
                uint64_t v23 = 0;
                goto LABEL_286;
              }
LABEL_579:
              uint64_t v23 = v102;
LABEL_326:
              uint64_t DerivedStorage = v353;
              goto LABEL_568;
            }
          }
          uint64_t appended = segPumpAppendBytesToMediaConnectionBuffer(a3, v348 + a4, v101);
          if (!appended) {
            goto LABEL_235;
          }
        }
      }
    }
    uint64_t v23 = appended;
LABEL_578:
    uint64_t DerivedStorage = v353;
    BOOL v35 = v96;
    goto LABEL_568;
  }
  uint64_t v102 = segPumpAppendBytesToMediaConnectionBuffer(a3, a4, a5);
  if (v102) {
    goto LABEL_579;
  }
  uint64_t DerivedStorage = v353;
  if ((a7 & 1) != 0 && v17 && v72[705] && v346 && *(void *)(a2 + 696) == a3)
  {
    uint64_t v103 = *(const void **)(a3 + 8);
    if (v103)
    {
      if (FigMediaSegmentSpecifierGetType(*(void *)(a3 + 8)) == 1) {
        goto LABEL_271;
      }
      uint64_t v104 = *(const void **)(a3 + 8);
    }
    else
    {
      uint64_t v104 = 0;
    }
    if (*((void *)segPumpGetMediaFilePrivateData(v104) + 2))
    {
      uint64_t v120 = (CFTypeRef *)segPumpGetMediaFilePrivateData(*(const void **)(a3 + 8));
      CFRelease(v120[2]);
      *((void *)segPumpGetMediaFilePrivateData(*(const void **)(a3 + 8)) + 2) = 0;
    }
LABEL_271:
    uint64_t v121 = *(const void **)(a3 + 8);
    if (v121)
    {
      CFRelease(v121);
      *(void *)(a3 + 8) = 0;
    }
    uint64_t CryptKeyCommonData = segPumpDeliverAccumulatedBuffer(v349, v353, a2, a3, v17, 1);
    if (!CryptKeyCommonData)
    {
      if (!FigRetainProxyIsInvalidated())
      {
        uint64_t v23 = 0;
        if (v103 != v17 || v350 != *(void *)(a2 + 880)) {
          goto LABEL_568;
        }
        int v115 = 1;
        BOOL v105 = 1;
LABEL_286:
        if (v35)
        {
LABEL_292:
          if (!v17) {
            goto LABEL_298;
          }
LABEL_293:
          BOOL v123 = v35 && v72[705] == 0;
          if (!v123 && (a7 & (v72[705] != 0)) == 0) {
            goto LABEL_298;
          }
          if (FigMediaSegmentSpecifierGetType((uint64_t)v17))
          {
LABEL_566:
            uint64_t v23 = segPumpStreamProceedAfterMediaAndKeyArrival(v349, DerivedStorage, a2, v17, v105, v115);
            if (!v23) {
              FigRetainProxyIsInvalidated();
            }
            goto LABEL_568;
          }
          BOOL v125 = v35;
          v361[0] = 0;
          if (!segPumpIsConnectedWithHighSpeedHighPower(DerivedStorage, v361))
          {
            uint64_t v130 = *(void *)(DerivedStorage + 9048);
            uint64_t v131 = v361[0];
            if (v130)
            {
              uint64_t v132 = *(void *)(CMBaseObjectGetVTable() + 16);
              uint64_t v133 = v132 ? v132 : 0;
              uint64_t v143 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v133 + 56);
              if (v143) {
                v143(v130, 0x1EE582B98, 0x1EE583B38, v131, 0);
              }
            }
            if (v131)
            {
              uint64_t v144 = *(void *)(DerivedStorage + 9048);
              uint64_t v145 = segPumpGetMediaFilePrivateData(v17);
              if (v144)
              {
                uint64_t v146 = v145[5];
                uint64_t v147 = *(void *)(CMBaseObjectGetVTable() + 16);
                uint64_t v148 = v147 ? v147 : 0;
                uint64_t v282 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v148 + 32);
                if (v282) {
                  v282(v144, 0x1EE582B98, 0x1EE583B18, v146);
                }
              }
            }
          }
          if (*(void *)a2 != 1)
          {
            BOOL v35 = v125;
            if (*(void *)a2) {
              goto LABEL_565;
            }
            uint64_t v126 = (double *)segPumpGetMediaFilePrivateData(v17);
            segPumpRTCReportingUpdateBandwidthStats(v353, a2, (uint64_t)(v126[10] * 1000000000.0));
            FigReportingAgentStatsUpdateSampleValueWithBool(*(void *)(v353 + 9048), 0x1EE582B98, 0x1EE561B38, v342 / 0xF4240 > *(int *)(v353 + 7976));
            uint64_t v127 = *(void *)(v353 + 9048);
            if (v127)
            {
              uint64_t v128 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v128) {
                uint64_t v129 = v128;
              }
              else {
                uint64_t v129 = 0;
              }
              uint64_t v149 = *(void (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v129 + 40);
              if (v149) {
                v149(v127, 0x1EE582B98, 0x1EE561A98, v342 / 0xF4240);
              }
              uint64_t v150 = *(void *)(v353 + 9048);
            }
            else
            {
              uint64_t v150 = 0;
            }
            __int16 v151 = (double *)segPumpGetMediaFilePrivateData(v17);
            if (v150)
            {
              double v152 = v151[10];
              uint64_t v153 = *(void *)(CMBaseObjectGetVTable() + 16);
              uint64_t v154 = v153 ? v153 : 0;
              long long v159 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v154 + 40);
              if (v159) {
                v159(v150, 0x1EE582B98, 0x1EE561A38, (uint64_t)(v152 * 1000.0));
              }
            }
            uint64_t v160 = *(void *)(v353 + 9048);
            uint64_t v161 = segPumpGetMediaFilePrivateData(v17);
            if (v160)
            {
              unint64_t v162 = v161[17];
              uint64_t v163 = *(void *)(CMBaseObjectGetVTable() + 16);
              uint64_t v164 = v163 ? v163 : 0;
              CMTime v170 = *(void (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v164 + 40);
              if (v170) {
                v170(v160, 0x1EE582B98, 0x1EE585798, v162 / 0xF4240);
              }
            }
            uint64_t v171 = *(void *)(v353 + 9048);
            CMTime v172 = segPumpGetMediaFilePrivateData(v17);
            if (v171)
            {
              unint64_t v173 = v172[18];
              uint64_t v174 = *(void *)(CMBaseObjectGetVTable() + 16);
              uint64_t v175 = v174 ? v174 : 0;
              CFAllocatorRef v182 = *(void (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v175 + 40);
              if (v182) {
                v182(v171, 0x1EE582B98, 0x1EE5857B8, v173 / 0xF4240);
              }
            }
            uint64_t v183 = *(void *)(v353 + 9048);
            CFStringRef v184 = segPumpGetMediaFilePrivateData(v17);
            if (v183)
            {
              unint64_t v185 = v184[19];
              uint64_t v186 = *(void *)(CMBaseObjectGetVTable() + 16);
              uint64_t v187 = v186 ? v186 : 0;
              v194 = *(void (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v187 + 40);
              if (v194) {
                v194(v183, 0x1EE582B98, 0x1EE5857D8, v185 / 0xF4240);
              }
            }
            uint64_t v195 = *(void *)(v353 + 9048);
            uint64_t v196 = segPumpGetMediaFilePrivateData(v17);
            if (v195)
            {
              unint64_t v197 = v196[21];
              uint64_t v198 = *(void *)(CMBaseObjectGetVTable() + 16);
              uint64_t v199 = v198 ? v198 : 0;
              CFArrayRef v206 = *(void (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v199 + 40);
              if (v206) {
                v206(v195, 0x1EE582B98, 0x1EE585818, v197 / 0xF4240);
              }
            }
            uint64_t v207 = *(void *)(v353 + 9048);
            char v208 = segPumpGetMediaFilePrivateData(v17);
            if (v207)
            {
              unint64_t v209 = v208[20];
              uint64_t v210 = *(void *)(CMBaseObjectGetVTable() + 16);
              uint64_t v211 = v210 ? v210 : 0;
              CFStringRef v218 = *(void (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v211 + 40);
              if (v218) {
                v218(v207, 0x1EE582B98, 0x1EE5857F8, v209 / 0xF4240);
              }
            }
            uint64_t v219 = *(void *)(v353 + 9048);
            CFStringRef v220 = segPumpGetMediaFilePrivateData(v17);
            if (v219)
            {
              unint64_t v221 = v220[22];
              uint64_t v222 = *(void *)(CMBaseObjectGetVTable() + 16);
              uint64_t v223 = v222 ? v222 : 0;
              uint64_t v230 = *(void (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v223 + 40);
              if (v230) {
                v230(v219, 0x1EE582B98, 0x1EE585838, v221 / 0xF4240);
              }
            }
            uint64_t v231 = *(void *)(v353 + 9048);
            if (v231)
            {
              uint64_t v232 = *(void *)(a2 + 1112);
              uint64_t v233 = *(void *)(CMBaseObjectGetVTable() + 16);
              uint64_t v234 = v233 ? v233 : 0;
              CFURLRef v241 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v234 + 56);
              if (v241) {
                v241(v231, 0x1EE582B98, 0x1EE561AB8, v232 + 1, 0);
              }
            }
            uint64_t v242 = *(void *)(v353 + 9048);
            double v243 = FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)v17);
            if (v242)
            {
              double v244 = v243;
              uint64_t v245 = *(void *)(CMBaseObjectGetVTable() + 16);
              uint64_t v246 = v245 ? v245 : 0;
              v252 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v246 + 40);
              if (v252) {
                v252(v242, 0x1EE582B98, 0x1EE561058, (uint64_t)(v244 * 1000.0));
              }
            }
            uint64_t v253 = *(void *)(v353 + 9048);
            v254 = segPumpGetMediaFilePrivateData(v17);
            if (v253)
            {
              uint64_t v255 = v254[6];
              uint64_t v256 = *(void *)(CMBaseObjectGetVTable() + 16);
              uint64_t v257 = v256 ? v256 : 0;
              uint64_t v264 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v257 + 40);
              if (v264) {
                v264(v253, 0x1EE582B98, 0x1EE561A58, v255);
              }
            }
            int v265 = *(_DWORD *)(v353 + 9068);
            if (v72[1105])
            {
              BOOL v35 = v125;
              if (!v265)
              {
LABEL_530:
                if (v72[5])
                {
                  uint64_t v315 = *(void *)(v353 + 8144);
                  if (v315)
                  {
                    int v316 = FigAlternateGetDeclaredPeakBitRate(*(void *)(v315 + 8));
                    if (!v316)
                    {
LABEL_557:
                      uint64_t v332 = *(void *)(v353 + 9048);
                      if (v332)
                      {
                        uint64_t v333 = *(void *)(CMBaseObjectGetVTable() + 16);
                        uint64_t v334 = v333 ? v333 : 0;
                        CFIndex v335 = *(void (**)(uint64_t, uint64_t, uint64_t, unint64_t, void))(v334 + 56);
                        if (v335) {
                          v335(v332, 0x1EE582B98, 0x1EE561FF8, v339 / 0xF4240, 0);
                        }
                      }
                      goto LABEL_563;
                    }
                    uint64_t v317 = *(void *)(v353 + 9048);
                    if (v317)
                    {
                      int v318 = v316;
                      uint64_t v319 = *(void *)(CMBaseObjectGetVTable() + 16);
                      if (v319) {
                        uint64_t v320 = v319;
                      }
                      else {
                        uint64_t v320 = 0;
                      }
                      v330 = *(void (**)(uint64_t, uint64_t, uint64_t, void, void))(v320 + 56);
                      if (v330) {
                        v330(v317, 0x1EE582B98, 0x1EE553578, v318 / 1000, 0);
                      }
                      goto LABEL_557;
                    }
                  }
                  else
                  {
                    uint64_t v321 = *(void *)(v353 + 9048);
                    if (v321)
                    {
                      uint64_t v322 = *(void *)(CMBaseObjectGetVTable() + 16);
                      if (v322) {
                        uint64_t v323 = v322;
                      }
                      else {
                        uint64_t v323 = 0;
                      }
                      int v331 = *(void (**)(uint64_t, uint64_t, uint64_t))(v323 + 64);
                      if (v331) {
                        v331(v321, 0x1EE582B98, 0x1EE553578);
                      }
                      goto LABEL_557;
                    }
                  }
LABEL_563:
                  uint64_t v329 = 2001;
LABEL_564:
                  segPumpRTCReportingIssueRTCReportingEvent(v353, v329);
                  BOOL v35 = v125;
                }
LABEL_565:
                uint64_t DerivedStorage = v353;
                goto LABEL_566;
              }
            }
            else
            {
              BOOL v35 = v125;
              if (v265 != 2) {
                goto LABEL_530;
              }
            }
            if (!segPumpShouldIssueVerboseEvent(v353, a2, (uint64_t)v17)) {
              goto LABEL_530;
            }
            *(void *)&v370[0] = 0;
            uint64_t v266 = *(void *)(v353 + 9048);
            if (v266)
            {
              uint64_t v267 = *(void *)(a2 + 752);
              uint64_t v268 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v268) {
                uint64_t v269 = v268;
              }
              else {
                uint64_t v269 = 0;
              }
              v283 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v269 + 40);
              if (v283) {
                v283(v266, 0x1EE582B98, 0x1EE561A78, v267);
              }
              uint64_t v266 = *(void *)(v353 + 9048);
            }
            unsigned int v284 = (unsigned __int8 *)segPumpGetMediaFilePrivateData(v17);
            if (v266)
            {
              uint64_t v285 = v284[184];
              uint64_t v286 = *(void *)(CMBaseObjectGetVTable() + 16);
              uint64_t v287 = v286 ? v286 : 0;
              double v293 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v287 + 56);
              if (v293) {
                v293(v266, 0x1EE582B98, 0x1EE585858, v285, 0);
              }
            }
            uint64_t v294 = *(void *)(v353 + 9048);
            double v295 = segPumpGetMediaFilePrivateData(v17);
            if (v294)
            {
              uint64_t v296 = v295[24];
              uint64_t v297 = *(void *)(CMBaseObjectGetVTable() + 16);
              uint64_t v298 = v297 ? v297 : 0;
              CFArrayRef v305 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v298 + 56);
              if (v305) {
                v305(v294, 0x1EE582B98, 0x1EE585878, v296, 0);
              }
            }
            FigSymptomsManagerTriggerScorecardsUpdate();
            if (!FigSymptomsManagerGetBandwidthPredictionFromLastUpdate(v370, 0))
            {
              uint64_t v310 = *(void *)(v353 + 9048);
              if (!v310)
              {
LABEL_529:
                segPumpRTCReportingIssueRTCReportingEvent(v353, 1001);
                BOOL v35 = v125;
                goto LABEL_530;
              }
              double v311 = *(double *)v370;
              uint64_t v312 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v312) {
                uint64_t v313 = v312;
              }
              else {
                uint64_t v313 = 0;
              }
              CFIndex v337 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v313 + 40);
              if (v337) {
                v337(v310, 0x1EE582B98, 0x1EE582E98, (uint64_t)v311);
              }
            }
            uint64_t v306 = *(void *)(v353 + 9048);
            if (v306)
            {
              unint64_t v307 = *(void *)(v353 + 8584);
              uint64_t v308 = *(void *)(CMBaseObjectGetVTable() + 16);
              uint64_t v309 = v308 ? v308 : 0;
              CFIndex v314 = *(void (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v309 + 40);
              if (v314) {
                v314(v306, 0x1EE582B98, 0x1EE562098, v307 / 0xF4240);
              }
            }
            goto LABEL_529;
          }
          if (*(void *)(DerivedStorage + 8416) == 1)
          {
            v134 = (double *)segPumpGetMediaFilePrivateData(v17);
            segPumpRTCReportingUpdateBandwidthStats(DerivedStorage, a2, (uint64_t)(v134[10] * 1000000000.0));
          }
          uint64_t v135 = *(void *)(DerivedStorage + 9048);
          uint64_t v371 = 0;
          memset(v370, 0, sizeof(v370));
          uint64_t v136 = *(void *)(a2 + 952);
          if (v136 < 1)
          {
            double v137 = 0.0;
            if (!v135) {
              goto LABEL_344;
            }
          }
          else
          {
            segPumpGetObservedNetworkStats(DerivedStorage, v136, (uint64_t)v370);
            double v137 = (double)*(uint64_t *)&v370[0];
            if (!v135) {
              goto LABEL_344;
            }
          }
          uint64_t v138 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v138) {
            uint64_t v139 = v138;
          }
          else {
            uint64_t v139 = 0;
          }
          __int16 v155 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v139 + 40);
          if (v155) {
            v155(v135, 0x1EE582B98, 0x1EE561DB8, (uint64_t)v137);
          }
LABEL_344:
          uint64_t v156 = *(void *)(DerivedStorage + 9048);
          if (v156)
          {
            uint64_t v157 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v157) {
              uint64_t v158 = v157;
            }
            else {
              uint64_t v158 = 0;
            }
            unsigned int v165 = *(void (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v158 + 40);
            if (v165) {
              v165(v156, 0x1EE582B98, 0x1EE561D78, v342 / 0xF4240);
            }
            uint64_t v156 = *(void *)(DerivedStorage + 9048);
          }
          unsigned int v166 = (double *)segPumpGetMediaFilePrivateData(v17);
          if (v156)
          {
            double v167 = v166[10];
            uint64_t v168 = *(void *)(CMBaseObjectGetVTable() + 16);
            uint64_t v169 = v168 ? v168 : 0;
            uint64_t v176 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v169 + 40);
            if (v176) {
              v176(v156, 0x1EE582B98, 0x1EE561D18, (uint64_t)(v167 * 1000.0));
            }
          }
          uint64_t v177 = *(void *)(v353 + 9048);
          CFArrayRef v178 = segPumpGetMediaFilePrivateData(v17);
          if (v177)
          {
            unint64_t v179 = v178[17];
            uint64_t v180 = *(void *)(CMBaseObjectGetVTable() + 16);
            uint64_t v181 = v180 ? v180 : 0;
            CFAllocatorRef v188 = *(void (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v181 + 40);
            if (v188) {
              v188(v177, 0x1EE582B98, 0x1EE561DF8, v179 / 0xF4240);
            }
          }
          uint64_t v189 = *(void *)(v353 + 9048);
          v190 = segPumpGetMediaFilePrivateData(v17);
          if (v189)
          {
            unint64_t v191 = v190[18];
            uint64_t v192 = *(void *)(CMBaseObjectGetVTable() + 16);
            uint64_t v193 = v192 ? v192 : 0;
            int v200 = *(void (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v193 + 40);
            if (v200) {
              v200(v189, 0x1EE582B98, 0x1EE561E18, v191 / 0xF4240);
            }
          }
          uint64_t v201 = *(void *)(v353 + 9048);
          uint64_t v202 = segPumpGetMediaFilePrivateData(v17);
          if (v201)
          {
            unint64_t v203 = v202[19];
            uint64_t v204 = *(void *)(CMBaseObjectGetVTable() + 16);
            uint64_t v205 = v204 ? v204 : 0;
            v212 = *(void (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v205 + 40);
            if (v212) {
              v212(v201, 0x1EE582B98, 0x1EE561E38, v203 / 0xF4240);
            }
          }
          uint64_t v213 = *(void *)(v353 + 9048);
          uint64_t v214 = segPumpGetMediaFilePrivateData(v17);
          if (v213)
          {
            unint64_t v215 = v214[21];
            uint64_t v216 = *(void *)(CMBaseObjectGetVTable() + 16);
            uint64_t v217 = v216 ? v216 : 0;
            v224 = *(void (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v217 + 40);
            if (v224) {
              v224(v213, 0x1EE582B98, 0x1EE561E78, v215 / 0xF4240);
            }
          }
          uint64_t v225 = *(void *)(v353 + 9048);
          uint64_t v226 = segPumpGetMediaFilePrivateData(v17);
          if (v225)
          {
            unint64_t v227 = v226[20];
            uint64_t v228 = *(void *)(CMBaseObjectGetVTable() + 16);
            uint64_t v229 = v228 ? v228 : 0;
            v235 = *(void (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v229 + 40);
            if (v235) {
              v235(v225, 0x1EE582B98, 0x1EE561E58, v227 / 0xF4240);
            }
          }
          uint64_t v236 = *(void *)(v353 + 9048);
          CFURLRef v237 = segPumpGetMediaFilePrivateData(v17);
          if (v236)
          {
            unint64_t v238 = v237[22];
            uint64_t v239 = *(void *)(CMBaseObjectGetVTable() + 16);
            uint64_t v240 = v239 ? v239 : 0;
            uint64_t v247 = *(void (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v240 + 40);
            if (v247) {
              v247(v236, 0x1EE582B98, 0x1EE561E98, v238 / 0xF4240);
            }
          }
          uint64_t v248 = *(void *)(v353 + 9048);
          if (v248)
          {
            uint64_t v249 = *(void *)(a2 + 1112);
            uint64_t v250 = *(void *)(CMBaseObjectGetVTable() + 16);
            uint64_t v251 = v250 ? v250 : 0;
            v258 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v251 + 56);
            if (v258) {
              v258(v248, 0x1EE582B98, 0x1EE561D98, v249 + 1, 0);
            }
          }
          uint64_t v259 = *(void *)(v353 + 9048);
          double v260 = FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)v17);
          if (v259)
          {
            double v261 = v260;
            uint64_t v262 = *(void *)(CMBaseObjectGetVTable() + 16);
            uint64_t v263 = v262 ? v262 : 0;
            double v270 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v263 + 40);
            if (v270) {
              v270(v259, 0x1EE582B98, 0x1EE561D58, (uint64_t)(v261 * 1000.0));
            }
          }
          uint64_t v271 = *(void *)(v353 + 9048);
          double v272 = segPumpGetMediaFilePrivateData(v17);
          if (v271)
          {
            uint64_t v273 = v272[5];
            uint64_t v274 = *(void *)(CMBaseObjectGetVTable() + 16);
            uint64_t v275 = v274 ? v274 : 0;
            v276 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v275 + 40);
            if (v276) {
              v276(v271, 0x1EE582B98, 0x1EE561D38, v273);
            }
          }
          int v277 = *(_DWORD *)(v353 + 9068);
          if (v72[1105])
          {
            BOOL v35 = v125;
            if (!v277) {
              goto LABEL_543;
            }
          }
          else
          {
            BOOL v35 = v125;
            if (v277 != 2) {
              goto LABEL_543;
            }
          }
          if (segPumpShouldIssueVerboseEvent(v353, a2, (uint64_t)v17))
          {
            uint64_t v278 = *(void *)(v353 + 9048);
            if (v278)
            {
              uint64_t v279 = *(void *)(a2 + 752);
              uint64_t v280 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v280) {
                uint64_t v281 = v280;
              }
              else {
                uint64_t v281 = 0;
              }
              v288 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v281 + 40);
              if (v288) {
                v288(v278, 0x1EE582B98, 0x1EE561DD8, v279);
              }
              uint64_t v278 = *(void *)(v353 + 9048);
            }
            uint64_t v289 = (unsigned __int8 *)segPumpGetMediaFilePrivateData(v17);
            if (v278)
            {
              uint64_t v290 = v289[184];
              uint64_t v291 = *(void *)(CMBaseObjectGetVTable() + 16);
              uint64_t v292 = v291 ? v291 : 0;
              uint64_t v299 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v292 + 56);
              if (v299) {
                v299(v278, 0x1EE582B98, 0x1EE561EB8, v290, 0);
              }
            }
            uint64_t v300 = *(void *)(v353 + 9048);
            unint64_t v301 = segPumpGetMediaFilePrivateData(v17);
            if (v300)
            {
              uint64_t v302 = v301[24];
              uint64_t v303 = *(void *)(CMBaseObjectGetVTable() + 16);
              uint64_t v304 = v303 ? v303 : 0;
              CFArrayRef v324 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v304 + 56);
              if (v324) {
                v324(v300, 0x1EE582B98, 0x1EE561ED8, v302, 0);
              }
            }
            segPumpRTCReportingIssueRTCReportingEvent(v353, 1002);
            BOOL v35 = v125;
          }
LABEL_543:
          if (v72[5])
          {
            uint64_t v325 = *(void *)(v353 + 9048);
            if (v325)
            {
              uint64_t v326 = *(void *)(CMBaseObjectGetVTable() + 16);
              uint64_t v327 = v326 ? v326 : 0;
              uint64_t v328 = *(void (**)(uint64_t, uint64_t, uint64_t, unint64_t, void))(v327 + 56);
              if (v328) {
                v328(v325, 0x1EE582B98, 0x1EE562018, v339 / 0xF4240, 0);
              }
            }
            uint64_t v329 = 2002;
            goto LABEL_564;
          }
          goto LABEL_565;
        }
LABEL_287:
        if (a7)
        {
          uint64_t v122 = *(void *)(a2 + 696);
          if (!v122 || !*(void *)(v122 + 32) && !*(void *)(v122 + 104))
          {
            BOOL v35 = *(void *)(a2 + 704) == 0;
            if (!v17) {
              goto LABEL_298;
            }
            goto LABEL_293;
          }
        }
        BOOL v35 = 0;
        goto LABEL_292;
      }
LABEL_576:
      uint64_t v23 = 0;
      goto LABEL_568;
    }
LABEL_489:
    uint64_t v23 = CryptKeyCommonData;
    goto LABEL_568;
  }
  BOOL v105 = 0;
  if (!v35)
  {
    int v115 = 0;
    uint64_t v23 = 0;
    goto LABEL_287;
  }
  if (!a3 || !v72[705])
  {
    int v115 = 0;
    uint64_t v23 = 0;
    if (!v17) {
      goto LABEL_298;
    }
    goto LABEL_293;
  }
  uint64_t v106 = *(void *)(a2 + 776);
  if (v106 >= 1)
  {
    uint64_t v107 = *(void **)(a2 + 768);
    while (*v107 != a3)
    {
      ++v107;
      if (!--v106)
      {
        uint64_t v23 = 0;
LABEL_267:
        int v115 = 0;
        BOOL v105 = 0;
        goto LABEL_286;
      }
    }
    uint64_t v119 = segPumpCheckAndTryToAdoptStepAhead(v349, v353);
    if (v119 != -15626)
    {
      uint64_t v23 = v119;
      goto LABEL_267;
    }
    BOOL v35 = 1;
    uint64_t v23 = 4294951670;
    goto LABEL_568;
  }
  BOOL v105 = 0;
  int v115 = 0;
  uint64_t v23 = 0;
  if (v17) {
    goto LABEL_293;
  }
LABEL_298:
  if (!*v72 && *(void *)a2 == *(void *)(DerivedStorage + 8416) && v17 && !v72[705])
  {
    if (FigMediaSegmentSpecifierGetBytesToRead((uint64_t)v17) < 1) {
      uint64_t v124 = *((void *)MediaFilePrivateData + 5);
    }
    else {
      uint64_t v124 = FigMediaSegmentSpecifierGetBytesToRead((uint64_t)v17);
    }
    if (v124)
    {
      double v140 = (double)(UpTimeNanoseconds - v343) / 1000000.0;
      unint64_t v141 = *((void *)MediaFilePrivateData + 6);
      double v142 = FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)v17);
      if (v140 >= 2000.0 && v140 - v142 * ((double)v141 / (double)v124) * 1000.0 >= 1000.0)
      {
        unsigned char *v72 = 1;
        uint64_t DerivedStorage = v353;
        segPumpAddMediaSegmentNoResponseErrorIfNecessary(v349, v353, a2, *(void *)(a2 + 696));
        goto LABEL_568;
      }
    }
    goto LABEL_326;
  }
LABEL_568:
  if (*(unsigned char *)(DerivedStorage + 329) && v35) {
    segPumpResumeRoundTripMonitoring(DerivedStorage);
  }
  return v23;
}

void segPumpRTCReportingLogAndUpdateStats(uint64_t a1, CFHTTPMessageRef message, CFStringRef headerField, uint64_t a4)
{
  CFStringRef v6 = CFHTTPMessageCopyHeaderFieldValue(message, headerField);
  if (v6)
  {
    CFStringRef v7 = v6;
    uint64_t v8 = *(void *)(a1 + 9048);
    if (v8)
    {
      uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v10 = v9 ? v9 : 0;
      uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t, CFStringRef, void))(v10 + 48);
      if (v11) {
        v11(v8, 0x1EE582B98, a4, v7, 0);
      }
    }
    CFRelease(v7);
  }
}

double segPumpGetElapsedTimeForConnectionOnMedia(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 64;
  if (!*(unsigned char *)(a2 + 281)) {
    uint64_t v2 = 40;
  }
  uint64_t v3 = *(void *)(a2 + v2);
  if (*(uint64_t *)(a2 + 296) <= 0) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = *(void *)(a2 + 296);
  }
  return *(double *)(a1 + 808) + (double)(FigGetUpTimeNanoseconds() - v4) / 1000000000.0;
}

uint64_t segPumpSetCurrentSegmentTooSlow(uint64_t result, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 873))
  {
    ++*(void *)(result + 8496);
    uint64_t v3 = *(void *)(result + 9048);
    if (v3)
    {
      uint64_t VTable = CMBaseObjectGetVTable();
      uint64_t v6 = *(void *)(VTable + 16);
      uint64_t result = VTable + 16;
      uint64_t v5 = v6;
      if (v6) {
        uint64_t v7 = v5;
      }
      else {
        uint64_t v7 = 0;
      }
      uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 32);
      if (v8) {
        uint64_t result = v8(v3, 0x1EE582B98, 0x1EE5611F8, 1);
      }
    }
  }
  *(_WORD *)(a2 + 873) = 257;
  return result;
}

uint64_t segPumpAppendBytesToMediaConnectionBuffer(uint64_t a1, size_t offsetToData, size_t dataLength)
{
  if (*(void *)(a1 + 272)
    || (CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia(),
        uint64_t result = CMBlockBufferCreateEmpty(AllocatorForMedia, 0, 0, (CMBlockBufferRef *)(a1 + 272)),
        !result))
  {
    if (dataLength)
    {
      uint64_t v8 = *(OpaqueCMBlockBuffer **)(a1 + 272);
      uint64_t v9 = *(OpaqueCMBlockBuffer **)(a1 + 128);
      return CMBlockBufferAppendBufferReference(v8, v9, offsetToData, dataLength, 0);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t segPumpCheckAndTryToAdoptStepAhead(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 384);
  uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  uint64_t v6 = *(void **)(v4 + 696);
  if (!v6) {
    return 0;
  }
  uint64_t v7 = UpTimeNanoseconds;
  uint64_t v8 = v6[1];
  if (v8)
  {
    if (FigMediaSegmentSpecifierGetType(v8) == 1) {
      return 0;
    }
    uint64_t v6 = *(void **)(v4 + 696);
  }
  if (!v6[4]) {
    return 0;
  }
  double v9 = (double)(v6[36] - v7) / 1000000000.0;
  if (v9 >= 0.0)
  {
    uint64_t v16 = v6[14];
    int v15 = (dispatch_object_t *)(v6 + 14);
    if (!v16) {
      FigHTTPCreateTimer(*(const void **)a2, (uint64_t)MediaKeyStreamHandleDownloadTimer, *(NSObject **)(a2 + 64), v15, v9);
    }
    return 0;
  }
  if (*(uint64_t *)(v4 + 776) < 1) {
    return 0;
  }
  uint64_t v10 = 0;
  for (uint64_t i = 0; i < *(void *)(v4 + 776); ++i)
  {
    uint64_t v12 = **(void **)(v4 + 768);
    if (!v12) {
      break;
    }
    uint64_t v13 = *(const void **)(v12 + 8);
    if (!v13) {
      break;
    }
    segPumpGetMediaFilePrivateData(*(const void **)(v12 + 8));
    uint64_t v14 = **(void **)(v4 + 768);
    if (*(void *)(v14 + 288) > v7) {
      goto LABEL_21;
    }
    if (!*(void *)(v14 + 32))
    {
      if (!*(void *)(v14 + 104))
      {
LABEL_21:
        segPumpResetMediaConnection(a2, *(void **)(v4 + 696), 0);
        *(void *)(v4 + 696) = 0;
        uint64_t v18 = **(void **)(v4 + 768);
        if (*(void *)(v18 + 32)) {
          FigHTTPCreateTimer(*(const void **)a2, (uint64_t)MediaKeyStreamHandleDownloadTimer, *(NSObject **)(a2 + 64), (dispatch_object_t *)(v18 + 112), (double)(*(void *)(v18 + 288) - v7));
        }
        segPumpAdoptReadAhead(a2, v4, v13, 0, 0);
        return v10;
      }
      uint64_t v10 = segPumpDeliverAccumulatedBuffer(a1, a2, v4, v14, *(const void **)(v14 + 8), 1);
      if (v10 == -15626) {
        return 4294951670;
      }
    }
    ++*(void *)(a2 + 8856);
    segPumpStreamCancelReadAheadAndResetDataAtIndex(a2, v4, 0);
  }
  return v10;
}

void segPumpAddMediaSegmentNoResponseErrorIfNecessary(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 && !*(unsigned char *)(a4 + 280) && !*(void *)(a4 + 224))
  {
    uint64_t v8 = *(void *)(a4 + 8);
    if (v8) {
      TimeIndouble Seconds = FigMediaSegmentSpecifierGetTimeInSeconds(v8);
    }
    else {
      TimeIndouble Seconds = -1.0;
    }
    CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    uint64_t v11 = *(void *)(a3 + 696);
    if (v11)
    {
      uint64_t v12 = *(void *)(v11 + 8);
      uint64_t v13 = "media file";
      if (v12 && FigMediaSegmentSpecifierGetType(v12) == 1) {
        uint64_t v13 = "map";
      }
    }
    else
    {
      uint64_t v13 = "media file";
    }
    CFStringRef v14 = CFStringCreateWithFormat(AllocatorForMedia, 0, @"No response for %s in %1.5gs", v13, *(void *)&TimeInSeconds);
    segPumpAppendErrorLogEntry(a1, a2, a3, (const __CFURL **)(a4 + 16), -12889, @"CoreMediaErrorDomain", v14, 0, 1u, 2u, 3u);
    CFRelease(v14);
  }
}

uint64_t segPumpStreamBitRateRequiredForStream(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 7680);
  if (v2 && *(void **)(a1 + 16 * *a2 + 392) == a2) {
    return FigAlternateGetPeakBitRate(*(void *)(v2 + 8));
  }
  uint64_t v2 = *(void *)(a1 + 8144);
  if (v2) {
    return FigAlternateGetPeakBitRate(*(void *)(v2 + 8));
  }
  else {
    return 0;
  }
}

void MediaKeyStreamHandleDownloadTimer(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  CFTypeRef cf = 0;
  if (!segPumpLockAndCopyPumpFromRetainProxy(a2, &cf, &v2)) {
    segPumpCheckAndTryToAdoptStepAhead(cf, v2);
  }
  segPumpUnlockAndSendAllPendingNotifications();
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t segPumpAdoptReadAhead(uint64_t a1, uint64_t a2, const void *a3, const void *a4, uint64_t a5)
{
  uint64_t v5 = a5;
  uint64_t v10 = *(void *)(*(void *)(a2 + 768) + 8 * a5);
  segPumpSetStreamDiscontinuityDomain(a1, (void *)a2, (uint64_t)a3);
  *(void *)(a2 + 696) = v10;
  uint64_t v11 = *(void *)(a2 + 776);
  if (v11 > v5)
  {
    uint64_t v12 = v11 - 1;
    if (v12 > v5)
    {
      do
      {
        *(void *)(*(void *)(a2 + 768) + 8 * v5) = *(void *)(*(void *)(a2 + 768) + 8 * v5 + 8);
        ++v5;
      }
      while (v12 != v5);
    }
    *(void *)(*(void *)(a2 + 768) + 8 * v12) = 0;
  }
  uint64_t v13 = *(const void **)(a2 + 256);
  *(void *)(a2 + 256) = a3;
  if (a3) {
    CFRetain(a3);
  }
  if (v13) {
    CFRelease(v13);
  }
  CFStringRef v14 = *(const void **)(a2 + 264);
  *(void *)(a2 + 264) = a4;
  if (a4) {
    CFRetain(a4);
  }
  if (v14) {
    CFRelease(v14);
  }
  *(unsigned char *)(a2 + 404) = 1;
  if (a4)
  {
    uint64_t FragmentNumber = segPumpGetFragmentNumber((uint64_t)a3, a4);
    if (FragmentNumber < 0)
    {
      return FigSignalErrorAt();
    }
  }
  else
  {
    uint64_t FragmentNumber = -1;
  }
  if (!FigMediaSegmentSpecifierGetContentKeySpecifier((uint64_t)a3)
    || (uint64_t v24 = 0,
        uint64_t v25 = 0,
        uint64_t ContentKeySpecifier = (const void *)FigMediaSegmentSpecifierGetContentKeySpecifier((uint64_t)a3),
        uint64_t result = segPumpGetCryptKeyCommonData(ContentKeySpecifier, &v25, &v24),
        !result)
    && (*(unsigned char *)(v24 + 144) || !*(unsigned char *)(a1 + 322)))
  {
    if (!v10
      || !*(void *)(v10 + 32) && !*(void *)(v10 + 104)
      || (a4 ? (v18 = a4) : (v18 = a3), uint64_t result = (uint64_t)segPumpAccumConnCompletesMediaRange(v10, v18), result))
    {
      uint64_t v19 = malloc_type_malloc(0x48uLL, 0x10A00404BD41864uLL);
      if (v19)
      {
        uint64_t v20 = v19;
        *uint64_t v19 = FigRetainProxyRetain();
        v20[1] = a2;
        if (FigMediaSegmentSpecifierGetType((uint64_t)a3))
        {
          if (FigMediaSegmentSpecifierGetType((uint64_t)a3) == 1)
          {
            v20[4] = -1;
            v20[5] = -1;
            CFURLRef v21 = *(const __CFURL **)(a2 + 16);
            CFURLRef v22 = *(const __CFURL **)(a2 + 24);
            segPumpGetMediaFilePrivateData(a3);
            segPumpEnsureMediaSegmentURLs(a3, v21, v22);
            uint64_t MapNumber = segPumpStreamGetMapNumber((void *)a2);
            v20[6] = MapNumber;
            if (MapNumber < 0)
            {
              free(v20);
              return FigSignalErrorAt();
            }
          }
        }
        else
        {
          v20[4] = FigMediaSegmentSpecifierGetMediaSequence((uint64_t)a3);
          v20[5] = FragmentNumber;
          v20[6] = -1;
        }
        dispatch_async_f(*(dispatch_queue_t *)(a1 + 72), v20, (dispatch_function_t)segPumpDispatchedAdoptReadAhead);
        return 0;
      }
      else
      {
        return 4294954655;
      }
    }
  }
  return result;
}

uint64_t segPumpGetFragmentNumber(uint64_t a1, const void *a2)
{
  CFArrayRef PartialSegments = (const __CFArray *)FigMediaSegmentSpecifierGetPartialSegments(a1);
  uint64_t v4 = -1;
  while (1)
  {
    CFIndex v5 = PartialSegments ? CFArrayGetCount(PartialSegments) : 0;
    CFIndex v6 = v4 + 1;
    if (v4 + 1 >= v5) {
      break;
    }
    ++v4;
    if (CFArrayGetValueAtIndex(PartialSegments, v6) == a2) {
      goto LABEL_9;
    }
  }
  a2 = 0;
LABEL_9:
  if (a2) {
    return v4;
  }
  else {
    return -1;
  }
}

uint64_t segPumpStreamGetMapNumber(void *a1)
{
  for (CFIndex i = 0; ; ++i)
  {
    CFArrayRef MapSegmentSpecifiers = (const __CFArray *)FigMediaPlaylistGetMapSegmentSpecifiers(a1[7]);
    if (MapSegmentSpecifiers) {
      CFArrayRef MapSegmentSpecifiers = (const __CFArray *)CFArrayGetCount(MapSegmentSpecifiers);
    }
    if (i >= (uint64_t)MapSegmentSpecifiers) {
      break;
    }
    CFArrayRef v4 = (const __CFArray *)FigMediaPlaylistGetMapSegmentSpecifiers(a1[7]);
    CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v4, i);
    CFURLRef v6 = (const __CFURL *)a1[2];
    CFURLRef v7 = (const __CFURL *)a1[3];
    segPumpGetMediaFilePrivateData(ValueAtIndex);
    segPumpEnsureMediaSegmentURLs(ValueAtIndex, v6, v7);
    if (FigCFEqual()) {
      goto LABEL_8;
    }
  }
  CFStringRef ValueAtIndex = 0;
LABEL_8:
  if (ValueAtIndex) {
    return i;
  }
  else {
    return -1;
  }
}

void segPumpDispatchedAdoptReadAhead(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v15 = 0;
  CFTypeRef cf = 0;
  if (segPumpLockAndCopyPumpFromRetainProxy(v2, &cf, &v15)) {
    goto LABEL_24;
  }
  uint64_t v3 = (void *)a1[1];
  if (!v3) {
    goto LABEL_24;
  }
  uint64_t v4 = v3[7];
  if (!v4) {
    goto LABEL_24;
  }
  CFIndex v5 = a1[6];
  if ((v5 & 0x8000000000000000) == 0)
  {
    CFArrayRef MapSegmentSpecifiers = (const __CFArray *)FigMediaPlaylistGetMapSegmentSpecifiers(v4);
    if (MapSegmentSpecifiers)
    {
      CFIndex Count = CFArrayGetCount(MapSegmentSpecifiers);
      uint64_t v4 = v3[7];
      if (v5 < Count)
      {
        CFArrayRef v8 = (const __CFArray *)FigMediaPlaylistGetMapSegmentSpecifiers(v4);
        CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v8, a1[6]);
        goto LABEL_16;
      }
    }
    else
    {
      uint64_t v4 = v3[7];
    }
  }
  MediaEntryForuint64_t MediaSequence = segPumpGetMediaEntryForMediaSequence(v4, a1[4]);
  if (!MediaEntryForMediaSequence) {
    goto LABEL_24;
  }
  CFStringRef ValueAtIndex = MediaEntryForMediaSequence;
  if ((a1[5] & 0x8000000000000000) == 0)
  {
    uint64_t v11 = -1;
    do
    {
      if (v11 == -1)
      {
        FigMediaSegmentSpecifierGetPartialSegments((uint64_t)ValueAtIndex);
        FirstCFNumberRef Value = FigCFArrayGetFirstValue();
      }
      else
      {
        FirstCFNumberRef Value = FigMediaSegmentSpecifierGetNextSegment((uint64_t)ValueAtIndex);
      }
      CFStringRef ValueAtIndex = (const void *)FirstValue;
      ++v11;
    }
    while (v11 < a1[5]);
LABEL_16:
    if (!ValueAtIndex) {
      goto LABEL_24;
    }
  }
  uint64_t v13 = v3[87];
  if (v13)
  {
    if (*(const void **)(v13 + 8) == ValueAtIndex)
    {
      uint64_t v14 = v3[110];
      if (!*(void *)(v13 + 272)
        || (CFRelease(ValueAtIndex),
            *(void *)(v13 + 8) = 0,
            segPumpDeliverAccumulatedBuffer((uint64_t)cf, v15, (uint64_t)v3, v13, ValueAtIndex, 1) != -15626))
      {
        if (!FigRetainProxyIsInvalidated() && v14 == v3[110]) {
          segPumpStreamProceedAfterMediaAndKeyArrival(cf, v15, v3, ValueAtIndex, 1, 1);
        }
      }
    }
  }
LABEL_24:
  FigRetainProxyUnlockMutex();
  FigRetainProxyRelease();
  if (cf) {
    CFRelease(cf);
  }
  free(a1);
}

const void *segPumpGetMediaEntryForMediaSequence(uint64_t a1, unint64_t a2)
{
  if (!a1)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    FigLogBacktrace();
  }
  CFIndex v5 = 0;
  do
  {
    CFArrayRef MediaSegmentSpecifiers = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(a1);
    if (MediaSegmentSpecifiers) {
      CFArrayRef MediaSegmentSpecifiers = (const __CFArray *)CFArrayGetCount(MediaSegmentSpecifiers);
    }
    if (v5 >= (uint64_t)MediaSegmentSpecifiers) {
      break;
    }
    CFArrayRef v7 = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(a1);
    CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v7, v5);
    if (FigMediaSegmentSpecifierGetMediaSequence((uint64_t)ValueAtIndex) == a2) {
      return ValueAtIndex;
    }
    ++v5;
  }
  while (FigMediaSegmentSpecifierGetMediaSequence((uint64_t)ValueAtIndex) <= a2);
  return 0;
}

void segPumpRTCReportingUpdateBandwidthStats(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v28 = 0;
  memset(v27, 0, sizeof(v27));
  uint64_t v5 = *(void *)(a2 + 952);
  if (v5 < 1)
  {
    uint64_t v6 = 0;
  }
  else
  {
    segPumpGetObservedNetworkStats(a1, v5, (uint64_t)v27);
    uint64_t v6 = (uint64_t)(double)*(uint64_t *)&v27[0];
  }
  uint64_t v7 = *(void *)(a1 + 9048);
  if (!v7) {
    goto LABEL_21;
  }
  unint64_t v8 = (a3 * (unsigned __int128)0x431BDE82D7B634DBuLL) >> 64;
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  unint64_t v11 = v8 >> 18;
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v10 + 32);
  if (v12) {
    v12(v7, 0x1EE582B98, 0x1EE583958, v11);
  }
  uint64_t v13 = *(void *)(a1 + 9048);
  if (!v13) {
    goto LABEL_21;
  }
  uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v14) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0;
  }
  uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 40);
  if (v16) {
    v16(v13, 0x1EE582B98, 0x1EE582E58, v6);
  }
  uint64_t v17 = *(void *)(a1 + 9048);
  if (v17)
  {
    uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v18) {
      uint64_t v19 = v18;
    }
    else {
      uint64_t v19 = 0;
    }
    uint64_t v20 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 32);
    if (v20) {
      v20(v17, 0x1EE582B98, 0x1EE584838, v6 * v11);
    }
LABEL_21:
    uint64_t v21 = *(void *)(a1 + 9048);
    goto LABEL_22;
  }
  uint64_t v21 = 0;
LABEL_22:
  double AggregateBandwidth = FigGlobalNetworkBandwidthTrackerGetAggregateBandwidth();
  if (v21)
  {
    double v23 = AggregateBandwidth;
    uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v24) {
      uint64_t v25 = v24;
    }
    else {
      uint64_t v25 = 0;
    }
    uint64_t v26 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 40);
    if (v26) {
      v26(v21, 0x1EE582B98, 0x1EE582E78, (uint64_t)v23);
    }
  }
  segPumpRTCReportingSetCurrentAlternateIndexAndBitRate(a1);
}

uint64_t segPumpShouldIssueVerboseEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int IsFragment = FigMediaSegmentSpecifierIsFragment(a3);
  uint64_t v7 = *(void *)(a2 + 256);
  if (v7)
  {
    FigMediaSegmentSpecifierGetPartialSegments(v7);
    BOOL v8 = FigCFArrayGetFirstValue() == a3;
  }
  else
  {
    BOOL v8 = 0;
  }
  if (!IsFragment) {
    BOOL v8 = 1;
  }
  return *(_DWORD *)(a1 + 9068) == 3 || v8;
}

void segPumpRTCReportingSetCurrentAlternateIndexAndBitRate(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8144);
  if (v1)
  {
    int AverageBitRate = FigAlternateGetAverageBitRate(*(void *)(v1 + 8));
    int valuePtr = FigAlternateGetDeclaredPeakBitRate(*(void *)(*(void *)(a1 + 8144) + 8));
    int AlternateIndex = FigAlternateGetAlternateIndex(*(void *)(*(void *)(a1 + 8144) + 8));
    CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFNumberRef v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, &valuePtr);
    uint64_t v6 = *(void *)(a1 + 9048);
    if (v6)
    {
      uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v8 = v7 ? v7 : 0;
      uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t, CFNumberRef, void))(v8 + 48);
      if (v9) {
        v9(v6, 0x1EE582B98, 0x1EE5836F8, v5, 0);
      }
    }
    CFNumberRef v10 = CFNumberCreate(v4, kCFNumberIntType, &AverageBitRate);
    uint64_t v11 = *(void *)(a1 + 9048);
    if (v11)
    {
      uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v12) {
        uint64_t v13 = v12;
      }
      else {
        uint64_t v13 = 0;
      }
      uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t, CFNumberRef, void))(v13 + 48);
      if (v14) {
        v14(v11, 0x1EE582B98, 0x1EE583718, v10, 0);
      }
      uint64_t v15 = *(void *)(a1 + 9048);
      if (v15)
      {
        uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v17 = v16 ? v16 : 0;
        uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t, void, void))(v17 + 56);
        if (v18) {
          v18(v15, 0x1EE582B98, 0x1EE5611D8, AlternateIndex, 0);
        }
      }
    }
    if (v10) {
      CFRelease(v10);
    }
    if (v5) {
      CFRelease(v5);
    }
  }
}

uint64_t segPumpCustomURLLoaderGetURLGuts(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a2)
  {
    if (!a1[10]) {
      return FigSignalErrorAt();
    }
    FigGetAllocatorForMedia();
    uint64_t Mutable = FigCustomURLRequestInfoCreateMutable();
    if (!Mutable)
    {
      uint64_t Mutable = FigCustomURLRequestInfoSetCryptor();
      if (!Mutable)
      {
        uint64_t Mutable = FigCustomURLRequestInfoSetIsRenewalRequest();
        if (!Mutable)
        {
          uint64_t Mutable = FigCustomURLRequestInfoSetIsPingRequest();
          if (!Mutable)
          {
            uint64_t Mutable = FigCustomURLRequestInfoSetCryptorKeyRequestID();
            if (!Mutable)
            {
              uint64_t Mutable = FigCustomURLRequestInfoSetHTTPHeaders();
              if (!Mutable)
              {
                uint64_t Mutable = FigCustomURLRequestInfoSetAllowedUniversalTypeIdentifiers();
                if (!Mutable)
                {
                  uint64_t Mutable = FigCustomURLRequestInfoSetIsSecureStopSupported();
                  if (!Mutable)
                  {
                    uint64_t Mutable = FigCustomURLRequestInfoSetNetworkHistory();
                    if (!Mutable)
                    {
                      uint64_t Mutable = FigCustomURLRequestInfoSetExpectedToBlock();
                      if (!Mutable)
                      {
                        if (!a7
                          || !a1[1075]
                          || (segPumpGetCurrentRTT(a1),
                              uint64_t Mutable = FigCustomURLRequestInfoSetDefaultLatency(),
                              !Mutable))
                        {
                          CFTypeRef v15 = FigCFHTTPCreateUserAgent();
                          uint64_t v16 = FigCustomURLRequestInfoSetUserAgent();
                          if (!v16)
                          {
                            if (!a9 || (uint64_t v16 = FigCustomURLRequestInfoSetAcceptEncoding(), !v16))
                            {
                              if (a10 <= 0 && a11 < 1 || (uint64_t v16 = FigCustomURLRequestInfoSetByteRange(), !v16))
                              {
                                uint64_t v17 = a1[19];
                                if (!v17)
                                {
                                  uint64_t v18 = a1[8];
                                  a1[19] = (uint64_t)v18;
                                  dispatch_retain(v18);
                                  uint64_t v17 = a1[19];
                                }
                                uint64_t v19 = a1[10];
                                uint64_t v20 = *a1;
                                uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 16);
                                if (v21) {
                                  uint64_t v22 = v21;
                                }
                                else {
                                  uint64_t v22 = 0;
                                }
                                double v23 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t, void (*)(uint64_t, uint64_t, uint64_t, OpaqueCMBlockBuffer *, char, __CFError *, const __CFDictionary *), uint64_t))(v22 + 24);
                                if (!v23)
                                {
                                  uint64_t v24 = 4294954514;
                                  if (!v15) {
                                    return v24;
                                  }
LABEL_32:
                                  CFRelease(v15);
                                  return v24;
                                }
                                uint64_t v16 = v23(v19, 0, v20, v17, segPumpCustomURLLoaderDataCallback, a12);
                              }
                            }
                          }
                          uint64_t v24 = v16;
                          if (!v15) {
                            return v24;
                          }
                          goto LABEL_32;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return Mutable;
  }

  return FigSignalErrorAt();
}

void segPumpCustomURLLoaderDataCallback(uint64_t a1, uint64_t a2, uint64_t a3, OpaqueCMBlockBuffer *a4, char a5, __CFError *a6, const __CFDictionary *a7)
{
  uint64_t v12 = a1;
  v197[16] = *(CFErrorRef *)MEMORY[0x1E4F143B8];
  uint64_t v177 = 0;
  CFTypeRef v178 = 0;
  CMBlockBufferRef blockBufferOut = 0;
  CFTypeRef v176 = 0;
  CFTypeRef v173 = 0;
  CFTypeRef v174 = 0;
  CFTypeRef v171 = 0;
  CFTypeRef v172 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v170 = 0;
  CFTypeRef v168 = 0;
  if (segPumpLockAndCopyPumpFromRetainProxy(a1, &v178, &v177)) {
    goto LABEL_279;
  }
  CFDataWithBlockBufferNoCFDictionaryRef Copy = FigCustomURLResponseInfoCopyRequestInfo();
  if (CFDataWithBlockBufferNoCopy) {
    goto LABEL_225;
  }
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFAllocatorRef v15 = AllocatorForMedia;
  if (a4)
  {
    CFAllocatorRef v16 = (const __CFAllocator *)FigGetAllocatorForMedia();
    size_t v17 = CMBlockBufferGetDataLength(a4);
    CFDataWithBlockBufferNoCFDictionaryRef Copy = CMBlockBufferCreateContiguous(v15, a4, v16, 0, 0, v17, 0, &blockBufferOut);
    if (CFDataWithBlockBufferNoCopy) {
      goto LABEL_225;
    }
    FigGetAllocatorForMedia();
    CMBlockBufferGetDataLength(blockBufferOut);
    CFDataWithBlockBufferNoCFDictionaryRef Copy = FigCreateCFDataWithBlockBufferNoCopy();
    if (CFDataWithBlockBufferNoCopy) {
      goto LABEL_225;
    }
    uint64_t v18 = v174;
  }
  else
  {
    uint64_t v18 = CFDataCreate(AllocatorForMedia, 0, 0);
    CFTypeRef v174 = v18;
  }
  CFIndex Length = CFDataGetLength((CFDataRef)v18);
  if ((a5 & 1) == 0 && !Length)
  {
LABEL_279:
    uint64_t v28 = 0;
    goto LABEL_228;
  }
  CFDataWithBlockBufferNoCFDictionaryRef Copy = FigCustomURLRequestInfoCopyURL();
  if (CFDataWithBlockBufferNoCopy) {
    goto LABEL_225;
  }
  uint64_t v20 = FigCustomURLResponseInfoCopyUniversalTypeIdentifier();
  if (v20)
  {
    uint64_t v21 = v20;
    if (v20 != -17360) {
      goto LABEL_226;
    }
  }
  uint64_t v22 = FigCustomURLResponseInfoCopyContentRenewalDate();
  if (v22)
  {
    uint64_t v21 = v22;
    if (v22 != -17360) {
      goto LABEL_226;
    }
  }
  uint64_t v23 = FigCustomURLResponseInfoCopyHTTPHeaders();
  if (v23)
  {
    uint64_t v21 = v23;
    if (v23 != -17360) {
      goto LABEL_226;
    }
  }
  HTTPStatusCFIndex Code = FigCustomURLResponseInfoGetHTTPStatusCode();
  if (HTTPStatusCode)
  {
    uint64_t v21 = HTTPStatusCode;
    if (HTTPStatusCode != -17360) {
      goto LABEL_226;
    }
  }
  ContentCFIndex Length = FigCustomURLResponseInfoGetContentLength();
  if (ContentLength)
  {
    uint64_t v21 = ContentLength;
    if (ContentLength != -17360) {
      goto LABEL_226;
    }
  }
  FigCustomURLResponseInfoGetRoundTripTime();
  double v27 = v26;
  CFDataWithBlockBufferNoCFDictionaryRef Copy = FigCustomURLResponseInfoCopyFinalURL();
  if (CFDataWithBlockBufferNoCopy)
  {
LABEL_225:
    uint64_t v21 = CFDataWithBlockBufferNoCopy;
LABEL_226:
    uint64_t v28 = 0;
    goto LABEL_227;
  }
  uint64_t v28 = (__CFString *)FigCFHTTPCreateURLString((const __CFURL *)v173);
  if (!v28)
  {
    uint64_t v21 = FigSignalErrorAt();
    if (!v21) {
      goto LABEL_228;
    }
    goto LABEL_227;
  }
  if (!a6)
  {
    uint64_t v29 = FigCFHTTPCreateCFErrorFromHTTPStatusCode(0, (CFErrorRef *)&v168);
    if (!v29)
    {
      a6 = (__CFError *)v168;
      goto LABEL_26;
    }
    uint64_t v21 = v29;
LABEL_227:
    segPumpSendEndCallbackForAllActiveStreamsWithOSStatus(v12, v21);
    goto LABEL_228;
  }
LABEL_26:
  CFDataRef v30 = (const __CFData *)v174;
  CFTypeRef v153 = v170;
  CFTypeRef v154 = v172;
  CFDictionaryRef v164 = (const __CFDictionary *)cf;
  CFTypeRef v160 = v178;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMBlockBufferRef v179 = 0;
  CMBlockBufferRef theBuffer = 0;
  if (a6)
  {
    CFErrorDomain Domain = (__CFString *)CFErrorGetDomain(a6);
    CFIndex Code = CFErrorGetCode(a6);
    CFStringRef v163 = CFErrorCopyDescription(a6);
  }
  else
  {
    CFStringRef v163 = 0;
    CFIndex Code = 0;
    CFErrorDomain Domain = @"CoreMediaErrorDomain";
  }
  uint64_t v161 = Code;
  uint64_t v162 = v12;
  unsigned int v166 = v28;
  CFDictionaryRef v158 = a7;
  if (v30 && CFDataGetLength(v30) >= 1)
  {
    FigGetAllocatorForMedia();
    BlockBufferWithCFDataNoCFDictionaryRef Copy = FigCreateBlockBufferWithCFDataNoCopy();
    if (BlockBufferWithCFDataNoCopy)
    {
      uint64_t v21 = BlockBufferWithCFDataNoCopy;
      CFURLRef v69 = 0;
      uint64_t v76 = 0;
      CFStringRef v68 = v163;
      goto LABEL_320;
    }
    size_t dataLength = CMBlockBufferGetDataLength(theBuffer);
  }
  else
  {
    size_t dataLength = 0;
  }
  BOOL v155 = a6 != 0;
  CFURLRef v167 = FigCFHTTPCopyRedirectLocationFromHTTPHeaders(v164);
  char v35 = 0;
  key = (void *)*MEMORY[0x1E4F21950];
  uint64_t v151 = *MEMORY[0x1E4F1FDC0];
  char v36 = 1;
  while (2)
  {
    uint64_t v37 = 0;
    char v159 = v36;
    do
    {
      if (v35) {
        uint64_t v38 = 392;
      }
      else {
        uint64_t v38 = 384;
      }
      uint64_t v39 = *(void *)(DerivedStorage + 16 * v37 + v38);
      v197[0] = 0;
      *(void *)uint64_t v186 = 0;
      if (!*(void *)(v39 + 56)) {
        goto LABEL_66;
      }
      CFIndex v40 = 0;
      do
      {
        CFArrayRef ContentKeySpecifiers = (const __CFArray *)FigMediaPlaylistGetContentKeySpecifiers(*(void *)(v39 + 56));
        if (ContentKeySpecifiers) {
          CFArrayRef ContentKeySpecifiers = (const __CFArray *)CFArrayGetCount(ContentKeySpecifiers);
        }
        if (v40 < (uint64_t)ContentKeySpecifiers)
        {
          CFArrayRef v42 = (const __CFArray *)FigMediaPlaylistGetContentKeySpecifiers(*(void *)(v39 + 56));
          CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v42, v40);
          if (!segPumpGetCryptKeyCommonData(ValueAtIndex, v197, v186)) {
            goto LABEL_45;
          }
        }
        goto LABEL_66;
LABEL_45:
        if (*(void *)(*(void *)v186 + 80) == a2) {
          break;
        }
        if (*(void *)(*(void *)v186 + 120) == a2) {
          break;
        }
        ++v40;
      }
      while (*((void *)v197[0] + 6) != a2);
      if (!ValueAtIndex) {
        goto LABEL_66;
      }
      if (*(void *)(DerivedStorage + 8416) != 1 || !*(unsigned char *)(*(void *)v186 + 147)) {
        goto LABEL_128;
      }
      uint64_t v44 = *(void *)(DerivedStorage + 400);
      int v45 = *(const void **)(v44 + 248);
      if (v45)
      {
        if (segPumpGetCryptKeyCommonData(v45, v197, v186)) {
          goto LABEL_128;
        }
        if (*(void *)(*(void *)v186 + 80) != a2 && *(void *)(*(void *)v186 + 120) != a2)
        {
          if (v44 == v39 || *((void *)v197[0] + 6) != a2) {
            goto LABEL_60;
          }
LABEL_59:
          CFStringRef ValueAtIndex = 0;
          goto LABEL_60;
        }
        if (v44 != v39) {
          goto LABEL_59;
        }
      }
LABEL_60:
      uint64_t v46 = *(void *)(DerivedStorage + 408);
      uint64_t v47 = *(const void **)(v46 + 248);
      if (!v47 || segPumpGetCryptKeyCommonData(v47, v197, v186)) {
        goto LABEL_65;
      }
      if (*(void *)(*(void *)v186 + 80) == a2 || *(void *)(*(void *)v186 + 120) == a2)
      {
        if (v46 != v39) {
          goto LABEL_66;
        }
LABEL_65:
        if (!ValueAtIndex) {
          goto LABEL_66;
        }
LABEL_128:
        int v165 = FigCFEqual();
        if (dword_1E9351350)
        {
          LODWORD(v185) = 0;
          type[0] = OS_LOG_TYPE_DEFAULT;
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v78 = v185;
          if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type[0])) {
            unsigned int v79 = v78;
          }
          else {
            unsigned int v79 = v78 & 0xFFFFFFFE;
          }
          if (v79)
          {
            uint64_t v80 = *(__CFString **)(DerivedStorage + 8760);
            if (!v80) {
              uint64_t v80 = &stru_1EE53F4B8;
            }
            uint64_t v81 = *(void *)v39;
            uint64_t v82 = @"[]";
            if (*(unsigned char *)(DerivedStorage + 339)) {
              uint64_t v82 = v28;
            }
            *(_DWORD *)uint64_t v186 = 136316162;
            *(void *)&v186[4] = "segPumpHandleCustomURLResponse";
            __int16 v187 = 2114;
            CFAllocatorRef v188 = v80;
            __int16 v189 = 2048;
            uint64_t v190 = v81;
            __int16 v191 = 2114;
            uint64_t v192 = (uint64_t)v82;
            __int16 v193 = 1024;
            int v194 = v161;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if (!*(void *)(v39 + 592))
        {
          uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
          *(void *)(v39 + 592) = UpTimeNanoseconds;
          *(void *)(v39 + 600) = UpTimeNanoseconds - *(void *)(v39 + 568);
        }
        uint64_t v12 = v162;
        if (v161)
        {
          if (v161 != -17296 || !FigCFEqual())
          {
            CFStringRef v68 = v163;
            uint64_t v21 = segPumpHandleCryptKeyNetworkError((uint64_t)v160, v39, ValueAtIndex, v161, Domain, v163);
            uint64_t v76 = 0;
            CFURLRef v69 = v167;
            goto LABEL_320;
          }
          *(void *)os_log_type_t type = 0;
          uint64_t v185 = 0;
          char v183 = 0;
          uint64_t CryptKeyCommonData = segPumpGetCryptKeyCommonData(ValueAtIndex, &v185, type);
          CFURLRef v69 = v167;
          if (CryptKeyCommonData)
          {
            uint64_t v21 = CryptKeyCommonData;
            goto LABEL_288;
          }
          FigHTTPStopAndReleaseTimer((dispatch_object_t *)(v39 + 640));
          if (dword_1E9351350)
          {
            unsigned int v182 = 0;
            os_log_type_t v181 = OS_LOG_TYPE_DEFAULT;
            uint64_t v88 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int v89 = v182;
            if (os_log_type_enabled(v88, v181)) {
              unsigned int v90 = v89;
            }
            else {
              unsigned int v90 = v89 & 0xFFFFFFFE;
            }
            if (v90)
            {
              CFIndex v91 = *(__CFString **)(DerivedStorage + 8760);
              if (!v91) {
                CFIndex v91 = &stru_1EE53F4B8;
              }
              uint64_t v92 = *(void *)v39;
              uint64_t v93 = *(__CFString **)(*(void *)type + 16);
              if (!*(unsigned char *)(DerivedStorage + 339)) {
                uint64_t v93 = @"[]";
              }
              *(_DWORD *)uint64_t v186 = 136315906;
              *(void *)&v186[4] = "segPumpHandlePreloadedCryptor";
              __int16 v187 = 2114;
              CFAllocatorRef v188 = v91;
              __int16 v189 = 2048;
              uint64_t v190 = v92;
              __int16 v191 = 2114;
              uint64_t v192 = (uint64_t)v93;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            CFURLRef v69 = v167;
          }
          if (*(void *)(*(void *)type + 80) == a2)
          {
            uint64_t v119 = (uint64_t *)(*(void *)type + 64);
            uint64_t v120 = (unsigned char *)(*(void *)type + 88);
            goto LABEL_262;
          }
          if (*(void *)(*(void *)type + 120) != a2)
          {
            if (!dword_1E9351350)
            {
              uint64_t v21 = 4294951673;
              goto LABEL_288;
            }
            unsigned int v182 = 0;
            os_log_type_t v181 = OS_LOG_TYPE_DEFAULT;
            uint64_t v124 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int v125 = v182;
            if (os_log_type_enabled(v124, v181)) {
              unsigned int v126 = v125;
            }
            else {
              unsigned int v126 = v125 & 0xFFFFFFFE;
            }
            if (v126)
            {
              uint64_t v127 = &stru_1EE53F4B8;
              if (*(void *)(DerivedStorage + 8760)) {
                uint64_t v127 = *(__CFString **)(DerivedStorage + 8760);
              }
              uint64_t v128 = *(void *)v39;
              *(_DWORD *)uint64_t v186 = 136315906;
              *(void *)&v186[4] = "segPumpHandlePreloadedCryptor";
              __int16 v187 = 2114;
              CFAllocatorRef v188 = v127;
              __int16 v189 = 2048;
              uint64_t v190 = v128;
              __int16 v191 = 2048;
              uint64_t v192 = a2;
              _os_log_send_and_compose_impl();
            }
            CFStringRef v68 = v163;
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            uint64_t v21 = 4294951673;
            goto LABEL_291;
          }
          uint64_t v119 = (uint64_t *)(*(void *)type + 104);
          uint64_t v120 = (unsigned char *)(*(void *)type + 128);
LABEL_262:
          if (*v120)
          {
            uint64_t v121 = *v119;
            uint64_t v122 = *(void **)(CMBaseObjectGetVTable() + 16);
            if (v122) {
              BOOL v123 = v122;
            }
            else {
              BOOL v123 = 0;
            }
            if (*v123 >= 6uLL
              && (uint64_t v130 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, char *, void))v123[20]) != 0)
            {
              uint64_t v131 = v130(v121, 2, 1, &v183, 0);
              if (!v131)
              {
                if (v183)
                {
                  v197[0] = 0;
                  FigCreateErrorForOSStatus(4294951067, v197);
                  CFErrorRef v132 = v197[0];
                  uint64_t v133 = *(void *)(CMBaseObjectGetVTable() + 8);
                  if (v133) {
                    uint64_t v134 = v133;
                  }
                  else {
                    uint64_t v134 = 0;
                  }
                  double v140 = *(void (**)(uint64_t, uint64_t, CFErrorRef))(v134 + 56);
                  if (v140) {
                    v140(v121, v151, v132);
                  }
                  if (v197[0]) {
                    CFRelease(v197[0]);
                  }
                }
                goto LABEL_312;
              }
              uint64_t v21 = v131;
            }
            else
            {
              uint64_t v21 = 4294954514;
            }
LABEL_288:
            CFStringRef v68 = v163;
LABEL_291:
            uint64_t v76 = 0;
            goto LABEL_320;
          }
LABEL_312:
          uint64_t v141 = *(void *)type;
          if (*(void *)(*(void *)type + 80) == a2)
          {
            CryptKeyReleaseAndClearVideoDecryptor(*(uint64_t *)type);
            uint64_t v141 = *(void *)type;
            *(void *)(*(void *)type + 80) = 0;
            *(unsigned char *)(v141 + 88) = 0;
            double v142 = (void *)(v141 + 96);
            goto LABEL_316;
          }
          if (*(void *)(*(void *)type + 120) == a2)
          {
            CryptKeyReleaseAndClearAudioDecryptor(*(uint64_t *)type);
            uint64_t v141 = *(void *)type;
            *(void *)(*(void *)type + 120) = 0;
            *(unsigned char *)(v141 + 128) = 0;
            double v142 = (void *)(v141 + 136);
LABEL_316:
            CFStringRef v68 = v163;
            *double v142 = 0;
          }
          else
          {
            CFStringRef v68 = v163;
          }
          *(_WORD *)(v141 + 144) = 0;
          uint64_t v118 = segPumpSendCryptKeyRequest(v160, DerivedStorage, v39, *(__CFString **)(v39 + 248));
          uint64_t v76 = 0;
          if (!v118)
          {
LABEL_319:
            uint64_t v21 = 0;
            goto LABEL_320;
          }
LABEL_256:
          uint64_t v21 = v118;
          goto LABEL_320;
        }
        if (theBuffer)
        {
          v197[0] = 0;
          *(void *)uint64_t v186 = 0;
          uint64_t appended = segPumpGetCryptKeyCommonData(ValueAtIndex, v197, v186);
          if (!appended)
          {
            if (*(void *)(v39 + 656) && *(void *)(*(void *)v186 + 152)
              || (CFAllocatorRef v95 = (const __CFAllocator *)FigGetAllocatorForMedia(),
                  uint64_t appended = CMBlockBufferCreateEmpty(v95, 0, 0, (CMBlockBufferRef *)(v39 + 656)),
                  !appended))
            {
              if (!dataLength
                || (uint64_t appended = CMBlockBufferAppendBufferReference(*(CMBlockBufferRef *)(v39 + 656), theBuffer, 0, 0, 0), !appended))
              {
                size_t v96 = CMBlockBufferGetDataLength(theBuffer);
                *(void *)(*(void *)v186 + 152) += v96;
                goto LABEL_171;
              }
            }
          }
        }
        else
        {
LABEL_171:
          if ((a5 & 1) == 0) {
            goto LABEL_172;
          }
          v197[0] = 0;
          *(void *)(v39 + 584) = FigGetUpTimeNanoseconds();
          *(_DWORD *)(v39 + 608) = 0;
          uint64_t v97 = *(const void **)(v39 + 616);
          if (v97)
          {
            CFRelease(v97);
            *(void *)(v39 + 616) = 0;
          }
          if (!*(void *)(v39 + 656)
            || (CFAllocatorRef v98 = (const __CFAllocator *)FigGetAllocatorForMedia(),
                uint64_t v99 = *(OpaqueCMBlockBuffer **)(v39 + 656),
                CFAllocatorRef v100 = (const __CFAllocator *)FigGetAllocatorForMedia(),
                uint64_t appended = CMBlockBufferCreateContiguous(v98, v99, v100, 0, 0, 0, 0, &v179),
                !appended)
            && (FigGetAllocatorForMedia(), uint64_t appended = FigCreateCFDataWithBlockBufferNoCopy(), !appended))
          {
            if (v197[0])
            {
              CFURLRef v69 = v167;
              if (v153)
              {
                CFAllocatorRef v101 = (const __CFAllocator *)FigGetAllocatorForMedia();
                uint64_t Mutable = CFDictionaryCreateMutable(v101, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                CFDictionarySetValue(Mutable, key, v153);
                uint64_t v21 = segPumpCryptSetKey(v160, DerivedStorage, v39, ValueAtIndex, a2, v165, v197[0], (uint64_t)Mutable);
                if (Mutable) {
                  CFRelease(Mutable);
                }
              }
              else
              {
                uint64_t v21 = segPumpCryptSetKey(v160, DerivedStorage, v39, ValueAtIndex, a2, v165, v197[0], 0);
              }
              CFStringRef v68 = v163;
            }
            else
            {
              CFStringRef v68 = v163;
              uint64_t v21 = segPumpHandleCryptKeyNetworkError((uint64_t)v160, v39, ValueAtIndex, -15622, Domain, v163);
              CFURLRef v69 = v167;
            }
            if (v197[0]) {
              CFRelease(v197[0]);
            }
            uint64_t v129 = *(const void **)(v39 + 656);
            if (v129)
            {
              CFRelease(v129);
              *(void *)(v39 + 656) = 0;
            }
            goto LABEL_291;
          }
        }
        uint64_t v21 = appended;
LABEL_173:
        uint64_t v76 = 0;
        goto LABEL_127;
      }
      if (v46 == v39 || *((void *)v197[0] + 6) != a2) {
        goto LABEL_65;
      }
LABEL_66:
      for (uint64_t i = 0; i != 3; ++i)
      {
        uint64_t v49 = *(void *)(DerivedStorage + 16 * i + 384);
        uint64_t v50 = v49 + 680;
        while (1)
        {
          uint64_t v50 = *(void *)v50;
          if (!v50) {
            break;
          }
          if (*(void *)(v50 + 104) == a2) {
            goto LABEL_77;
          }
        }
        uint64_t v49 = *(void *)(DerivedStorage + 16 * i + 392);
        uint64_t v50 = v49 + 680;
        while (1)
        {
          uint64_t v50 = *(void *)v50;
          if (!v50) {
            break;
          }
          if (*(void *)(v50 + 104) == a2) {
            goto LABEL_77;
          }
        }
      }
      uint64_t v50 = 0;
      uint64_t v49 = 0;
LABEL_77:
      if (v39 == v49)
      {
        int v59 = *(const void **)(v50 + 8);
        if ((dword_1E9351350 > 2 || *(unsigned char *)(DerivedStorage + 327) == 0) && dword_1E9351350 != 0)
        {
          CFDataRef v62 = *(const void **)(v50 + 8);
          LODWORD(v185) = 0;
          type[0] = OS_LOG_TYPE_DEFAULT;
          unsigned int v63 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v64 = v185;
          if (os_log_type_enabled(v63, type[0])) {
            unsigned int v65 = v64;
          }
          else {
            unsigned int v65 = v64 & 0xFFFFFFFE;
          }
          if (v65)
          {
            uint64_t v66 = *(__CFString **)(DerivedStorage + 8760);
            if (!v66) {
              uint64_t v66 = &stru_1EE53F4B8;
            }
            if (v39) {
              uint64_t v67 = *(void *)v39;
            }
            else {
              uint64_t v67 = -1;
            }
            uint64_t v103 = @"[]";
            if (*(unsigned char *)(DerivedStorage + 339)) {
              uint64_t v103 = v28;
            }
            *(_DWORD *)uint64_t v186 = 136316162;
            *(void *)&v186[4] = "segPumpHandleCustomURLResponse";
            __int16 v187 = 2114;
            CFAllocatorRef v188 = v66;
            __int16 v189 = 2048;
            uint64_t v190 = v67;
            __int16 v191 = 2114;
            uint64_t v192 = (uint64_t)v103;
            __int16 v193 = 1024;
            int v194 = v161;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          int v59 = v62;
          a7 = v158;
        }
        CFStringRef v68 = v163;
        if (FigCFHTTPIsStatusCodeRedirect(0) && !*(unsigned char *)(DerivedStorage + 327) && v167)
        {
          uint64_t v104 = *(void *)(v39 + 792);
          uint64_t v105 = CMBaseObjectGetDerivedStorage();
          segPumpCustomURLLoaderCancelRequest(v105, *(void *)(v50 + 104));
          *(void *)(v50 + 104) = 0;
          CFURLRef v69 = v167;
          if (v59
            && (MediaFileCFURLRef URL = segPumpReadMediaFileURL((uint64_t)v160, v39, v59, v167, v50, 0, 0), MediaFileURL))
          {
            uint64_t v21 = MediaFileURL;
          }
          else
          {
            if (v50 == v104) {
              segPumpSetMediaConnectionIsDormant(DerivedStorage, v50, 1);
            }
            uint64_t v21 = 0;
          }
          uint64_t v76 = 0;
          uint64_t v12 = v162;
          goto LABEL_320;
        }
        uint64_t v12 = v162;
        if (!*(unsigned char *)(DerivedStorage + 327)
          && (!v59 || FigMediaSegmentSpecifierGetType((uint64_t)v59) != 1))
        {
          uint64_t v109 = (void *)(v50 + 16);
          segPumpAppendErrorLogEntry((uint64_t)v160, DerivedStorage, v39, (const __CFURL **)(v50 + 16), -12881, Domain, @"custom url not redirect", 0, 0, 2u, 3u);
          segPumpResetConnection(DerivedStorage, v50 + 16);
          CFURLRef v110 = *(const __CFURL **)(v39 + 16);
          CFURLRef v111 = *(const __CFURL **)(v39 + 24);
          MediaFilePrivateData = segPumpGetMediaFilePrivateData(v59);
          segPumpEnsureMediaSegmentURLs(v59, v110, v111);
          CFTypeRef v113 = (CFTypeRef)MediaFilePrivateData[2];
          if (v113) {
            CFTypeRef v113 = CFRetain(v113);
          }
          CFURLRef v69 = v167;
          uint64_t v76 = 0;
          void *v109 = v113;
          uint64_t v21 = 4294954415;
          goto LABEL_320;
        }
        *(_DWORD *)(DerivedStorage + 8464) = 0;
        segPumpUpdateNetworkCostHasHighSpeedHighPower(DerivedStorage);
        if (*(void *)(v50 + 128)
          || (CFAllocatorRef v107 = (const __CFAllocator *)FigGetAllocatorForMedia(),
              uint64_t Empty = CMBlockBufferCreateEmpty(v107, 0, 0, (CMBlockBufferRef *)(v50 + 128)),
              !Empty))
        {
          if (!theBuffer
            || !dataLength
            || (uint64_t Empty = CMBlockBufferAppendBufferReference(*(CMBlockBufferRef *)(v50 + 128), theBuffer, 0, 0, 0),
                !Empty))
          {
            if (a5) {
              FigReportingAgentUpdateFinalReportFromCustomURLResponse(*(void *)(DerivedStorage + 9048), a7, v155);
            }
            uint64_t Empty = segPumpHandleMediaFileData((uint64_t)v160, v39, v50, *(void *)(v50 + 136), dataLength, 0, a5, v161);
          }
        }
        goto LABEL_206;
      }
      if (*(void *)(v39 + 496) == a2)
      {
        uint64_t v12 = v162;
        CFStringRef v68 = v163;
        if (!*(unsigned char *)(v39 + 859))
        {
          uint64_t v21 = 0;
          uint64_t v76 = 0;
          goto LABEL_208;
        }
        if (FigCFHTTPIsStatusCodeRedirect(0))
        {
          CFURLRef v69 = v167;
          if (v167)
          {
            if (dword_1E9351350)
            {
              LODWORD(v185) = 0;
              type[0] = OS_LOG_TYPE_DEFAULT;
              int v70 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              unsigned int v71 = v185;
              if (os_log_type_enabled(v70, type[0])) {
                unsigned int v72 = v71;
              }
              else {
                unsigned int v72 = v71 & 0xFFFFFFFE;
              }
              if (v72)
              {
                BOOL v73 = &stru_1EE53F4B8;
                if (DerivedStorage && *(void *)(DerivedStorage + 8760)) {
                  BOOL v73 = *(__CFString **)(DerivedStorage + 8760);
                }
                uint64_t v74 = *(void *)v39;
                int v75 = v28;
                if (!*(unsigned char *)(DerivedStorage + 339)) {
                  int v75 = @"[]";
                }
                *(_DWORD *)uint64_t v186 = 136316418;
                *(void *)&v186[4] = "segPumpHandleCustomURLResponse";
                __int16 v187 = 2114;
                CFAllocatorRef v188 = v73;
                __int16 v189 = 2048;
                uint64_t v190 = v74;
                __int16 v191 = 2114;
                uint64_t v192 = (uint64_t)v75;
                __int16 v193 = 1024;
                int v194 = 0;
                __int16 v195 = 2114;
                CFURLRef v196 = v167;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            segPumpStreamUpdateIndexFileURLWithResponse(DerivedStorage, v39, v167);
            uint64_t v114 = segPumpSendIndexFileRequest((uint64_t)v160, DerivedStorage, v39);
          }
          else
          {
            uint64_t v114 = FigSignalErrorAt();
          }
          uint64_t v21 = v114;
          uint64_t v76 = 0;
          goto LABEL_320;
        }
        if (!*(void *)(v39 + 456))
        {
          uint64_t v83 = FigGetUpTimeNanoseconds();
          uint64_t v84 = v83 - *(void *)(v39 + 432);
          *(void *)(v39 + 456) = v83;
          *(void *)(v39 + 464) = v84;
          *(_DWORD *)(DerivedStorage + 8460) = 0;
          segPumpUpdateNetworkCostHasHighSpeedHighPower(DerivedStorage);
        }
        if (v161)
        {
          *(unsigned char *)(v39 + 859) = 0;
          uint64_t v85 = segPumpHandleIndexFileNetworkError(v160, v39, 0, v161, Domain, v163);
          uint64_t v76 = 0;
          if (v85) {
            uint64_t v21 = v85;
          }
          else {
            uint64_t v21 = 0;
          }
          goto LABEL_208;
        }
        segPumpStreamUpdateIndexFileURLWithResponse(DerivedStorage, v39, v154);
        if (!theBuffer) {
          goto LABEL_223;
        }
        if (!*(void *)(v39 + 520))
        {
          CFAllocatorRef v115 = (const __CFAllocator *)FigGetAllocatorForMedia();
          CMBlockBufferCreateEmpty(v115, 0, 0, (CMBlockBufferRef *)(v39 + 520));
        }
        if (!dataLength
          || (uint64_t Empty = CMBlockBufferAppendBufferReference(*(CMBlockBufferRef *)(v39 + 520), theBuffer, 0, 0, 0),
              !Empty))
        {
          uint64_t v116 = segPumpVerifyM3UPlaylist((uint64_t)v160, DerivedStorage, v39);
          if (v116)
          {
            uint64_t v21 = v116;
            if (dword_1E9351350)
            {
              LODWORD(v185) = 0;
              type[0] = OS_LOG_TYPE_DEFAULT;
              uint64_t v145 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              unsigned int v146 = v185;
              if (os_log_type_enabled(v145, type[0])) {
                unsigned int v147 = v146;
              }
              else {
                unsigned int v147 = v146 & 0xFFFFFFFE;
              }
              if (v147)
              {
                uint64_t v148 = &stru_1EE53F4B8;
                if (DerivedStorage && *(void *)(DerivedStorage + 8760)) {
                  uint64_t v148 = *(__CFString **)(DerivedStorage + 8760);
                }
                uint64_t v149 = *(void *)v39;
                *(_DWORD *)uint64_t v186 = 136315650;
                *(void *)&v186[4] = "segPumpHandleCustomURLResponse";
                __int16 v187 = 2114;
                CFAllocatorRef v188 = v148;
                __int16 v189 = 2048;
                uint64_t v190 = v149;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            uint64_t v76 = 0;
LABEL_127:
            CFStringRef v68 = v163;
LABEL_208:
            CFURLRef v69 = v167;
            goto LABEL_320;
          }
LABEL_223:
          if ((a5 & 1) == 0)
          {
            uint64_t v21 = 0;
            goto LABEL_207;
          }
          if (*(void *)(v39 + 520))
          {
            uint64_t v76 = FigCFHTTPCreateHTTPMessageFromHTTPResponseHeaders(v164);
            *(unsigned char *)(v39 + 859) = 0;
            *(void *)(v39 + 448) = FigGetUpTimeNanoseconds();
            *(_DWORD *)(v39 + 472) = 0;
            uint64_t v117 = *(const void **)(v39 + 480);
            if (v117)
            {
              CFRelease(v117);
              *(void *)(v39 + 480) = 0;
            }
            *(unsigned char *)(v39 + 858) = 1;
            *(unsigned char *)(v39 + 867) = 0;
            FigHTTPStopAndReleaseTimer((dispatch_object_t *)(v39 + 504));
            segPumpCheckAndUpdateLowLatencyServerCompliance(DerivedStorage, 0, a7);
            uint64_t v118 = segPumpParseIndexFile2(v160, DerivedStorage, v39, v76, 1, 0, 0);
            CFURLRef v69 = v167;
            if (!v118) {
              goto LABEL_319;
            }
            goto LABEL_256;
          }
          uint64_t Empty = FigSignalErrorAt();
        }
LABEL_206:
        uint64_t v21 = Empty;
LABEL_207:
        uint64_t v76 = 0;
        goto LABEL_208;
      }
      if (*(void *)(DerivedStorage + 8624) == a2)
      {
        segPumpPongCallback(*(void *)DerivedStorage, v27, v34, v161);
        uint64_t v21 = 0;
        uint64_t v76 = 0;
        *(void *)(DerivedStorage + 8624) = 0;
        uint64_t v12 = v162;
        goto LABEL_127;
      }
      ++v37;
    }
    while (v37 != 3);
    char v36 = 0;
    char v35 = 1;
    if (v159) {
      continue;
    }
    break;
  }
  CryptKeyCommonDataForRequestID = segPumpFindCryptKeyCommonDataForRequestID(DerivedStorage, a2);
  uint64_t v12 = v162;
  if (CryptKeyCommonDataForRequestID)
  {
    uint64_t v52 = (uint64_t)CryptKeyCommonDataForRequestID;
    if (dword_1E9351350)
    {
      LODWORD(v185) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      uint64_t v53 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v54 = v185;
      if (os_log_type_enabled(v53, type[0])) {
        unsigned int v55 = v54;
      }
      else {
        unsigned int v55 = v54 & 0xFFFFFFFE;
      }
      if (v55)
      {
        int v56 = *(__CFString **)(DerivedStorage + 8760);
        if (!v56) {
          int v56 = &stru_1EE53F4B8;
        }
        uint64_t v57 = *(void *)v39;
        uint64_t v58 = @"[]";
        if (*(unsigned char *)(DerivedStorage + 339)) {
          uint64_t v58 = v28;
        }
        *(_DWORD *)uint64_t v186 = 136316162;
        *(void *)&v186[4] = "segPumpHandleCustomURLResponse";
        __int16 v187 = 2114;
        CFAllocatorRef v188 = v56;
        __int16 v189 = 2048;
        uint64_t v190 = v57;
        __int16 v191 = 2114;
        uint64_t v192 = (uint64_t)v58;
        __int16 v193 = 1024;
        int v194 = v161;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    *(unsigned char *)(v52 + 145) = 0;
    CryptKeyReleaseAndClearVideoDecryptor(v52);
    CryptKeyReleaseAndClearAudioDecryptor(v52);
  }
  if (!segPumpFindSessionDataEntryForRequestID(*(void *)(DerivedStorage + 384), a2))
  {
LABEL_172:
    uint64_t v21 = 0;
    goto LABEL_173;
  }
  LOBYTE(v197[0]) = 0;
  CFStringRef v68 = v163;
  if (!*(void *)(DerivedStorage + 7744))
  {
    uint64_t v135 = v162;
    int v150 = 0;
    goto LABEL_371;
  }
  if (!v161)
  {
    if (theBuffer && !CMBlockBufferIsEmpty(theBuffer))
    {
      uint64_t v135 = v162;
      double v137 = *(OpaqueCMBlockBuffer **)(DerivedStorage + 7872);
      if (!v137)
      {
        CFAllocatorRef v138 = (const __CFAllocator *)FigGetAllocatorForMedia();
        uint64_t SessionDataRequest = CMBlockBufferCreateEmpty(v138, 0, 0, (CMBlockBufferRef *)(DerivedStorage + 7872));
        if (SessionDataRequest) {
          goto LABEL_369;
        }
        double v137 = *(OpaqueCMBlockBuffer **)(DerivedStorage + 7872);
      }
      uint64_t SessionDataRequest = CMBlockBufferAppendBufferReference(v137, theBuffer, 0, dataLength, 0);
      CFStringRef v68 = v163;
      if (SessionDataRequest)
      {
LABEL_369:
        uint64_t v21 = SessionDataRequest;
        int v150 = 1;
        goto LABEL_372;
      }
    }
    uint64_t v135 = v162;
    if ((a5 & 1) == 0)
    {
      int v139 = 0;
      goto LABEL_345;
    }
    if (*(void *)(DerivedStorage + 7872))
    {
      segPumpParseSessionDataFromConnection((uint64_t)v160, DerivedStorage, v39);
      goto LABEL_334;
    }
    int v150 = 1;
LABEL_371:
    uint64_t v21 = FigSignalErrorAt();
LABEL_372:
    CFStringRef v68 = v163;
    CFURLRef v69 = v167;
    if (v150) {
      goto LABEL_347;
    }
    goto LABEL_348;
  }
  uint64_t v135 = v162;
  uint64_t SessionDataRequest = segPumpHandleSessionDataNetworkError(v160, v39);
  if (SessionDataRequest) {
    goto LABEL_369;
  }
LABEL_334:
  int v139 = 0;
  if ((a5 & 1) == 0)
  {
LABEL_345:
    CFURLRef v69 = v167;
    goto LABEL_346;
  }
  CFURLRef v69 = v167;
  if (LOBYTE(v197[0])) {
    goto LABEL_346;
  }
  *((unsigned char *)segPumpEnsureAndGetSessionDataPrivateData(*(const void **)(DerivedStorage + 7896)) + 16) = 1;
  *(_DWORD *)(DerivedStorage + 7824) = 0;
  uint64_t v143 = *(const void **)(DerivedStorage + 7832);
  if (v143)
  {
    CFRelease(v143);
    *(void *)(DerivedStorage + 7832) = 0;
  }
  uint64_t SessionDataRequest = segPumpSendNextSessionDataRequest(DerivedStorage, *(void *)(DerivedStorage + 384), v197);
  if (SessionDataRequest) {
    goto LABEL_369;
  }
  if (LOBYTE(v197[0]))
  {
    int v139 = 0;
    goto LABEL_346;
  }
  segPumpResetConnection(DerivedStorage, DerivedStorage + 7760);
  if (*(uint64_t *)(DerivedStorage + 9624) >= 1)
  {
    uint64_t v144 = FigGetUpTimeNanoseconds() - *(void *)(DerivedStorage + 9624);
    if (v144 >= 1) {
      FigReportingAgentStatsSetIntValue(*(void *)(DerivedStorage + 9048), 0x1EE582CD8, 0x1EE585018, v144 / 0xF4240uLL);
    }
    int v139 = 1;
    CFStringRef v68 = v163;
    goto LABEL_345;
  }
  int v139 = 1;
LABEL_346:
  uint64_t v21 = 0;
  if (v139) {
LABEL_347:
  }
    dispatch_group_leave(*(dispatch_group_t *)(DerivedStorage + 7744));
LABEL_348:
  uint64_t v76 = 0;
  uint64_t v12 = v135;
  uint64_t v28 = v166;
LABEL_320:
  if (v179) {
    CFRelease(v179);
  }
  if (theBuffer) {
    CFRelease(theBuffer);
  }
  if (v68) {
    CFRelease(v68);
  }
  if (v69) {
    CFRelease(v69);
  }
  if (v76) {
    CFRelease(v76);
  }
  if (v21) {
    goto LABEL_227;
  }
LABEL_228:
  if (cf) {
    CFRelease(cf);
  }
  if (v173) {
    CFRelease(v173);
  }
  if (v170) {
    CFRelease(v170);
  }
  if (v171) {
    CFRelease(v171);
  }
  if (v28) {
    CFRelease(v28);
  }
  if (v176) {
    CFRelease(v176);
  }
  if (v174) {
    CFRelease(v174);
  }
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  if (v172) {
    CFRelease(v172);
  }
  if (v168) {
    CFRelease(v168);
  }
  segPumpUnlockAndSendAllPendingNotifications();
  if (v178) {
    CFRelease(v178);
  }
}

uint64_t segPumpHandleCryptKeyNetworkError(uint64_t a1, uint64_t a2, const void *a3, int a4, __CFString *a5, const void *a6)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v53 = 0;
  uint64_t v54 = 0;
  CFTypeRef cf = 0;
  if (a3)
  {
    uint64_t v13 = DerivedStorage;
    uint64_t CryptKeyCommonData = segPumpGetCryptKeyCommonData(a3, &v54, &v53);
    if (CryptKeyCommonData) {
      return CryptKeyCommonData;
    }
    ++*(_DWORD *)(a2 + 608);
    uint64_t ErrorFromHTTPRequestIfAvailable = segPumpCreateErrorFromHTTPRequestIfAvailable(*(void *)(a2 + 560), a4, a5, a6, (uint64_t *)&cf);
    CFAllocatorRef v16 = (void *)cf;
    if (ErrorFromHTTPRequestIfAvailable) {
      goto LABEL_79;
    }
    size_t v17 = *(const void **)(a2 + 616);
    *(void *)(a2 + 616) = cf;
    if (v16) {
      CFRetain(v16);
    }
    uint64_t v18 = (unsigned char *)(v13 + 8176);
    if (v17) {
      CFRelease(v17);
    }
    uint64_t v19 = *(void *)(a2 + 560);
    uint64_t v55 = 0;
    uint64_t v56 = 0;
    int Code = CFErrorGetCode((CFErrorRef)v16);
    CFErrorGetDomain((CFErrorRef)v16);
    CFDictionaryRef v21 = CFErrorCopyUserInfo((CFErrorRef)v16);
    if (!*(void *)(*(void *)(v13 + 16 * *(void *)a2 + 384) + 16))
    {
      uint64_t v24 = 0;
      unsigned int v31 = 0;
      uint64_t v30 = 0;
      goto LABEL_35;
    }
    if (!*(unsigned char *)(v13 + 322))
    {
      uint64_t v24 = 0;
      unsigned int v31 = 0;
      uint64_t v30 = 0;
      uint64_t v56 = 0;
      goto LABEL_35;
    }
    if (Code == -16833)
    {
      uint64_t v55 = 3;
    }
    else
    {
      uint64_t CommonActionForNetworkError = segPumpGetCommonActionForNetworkError((__CFError *)v16, &v56, &v55);
      if (CommonActionForNetworkError)
      {
        uint64_t v30 = CommonActionForNetworkError;
        goto LABEL_93;
      }
      uint64_t v23 = 0;
      uint64_t v24 = v56;
      if (v56 == 3)
      {
LABEL_19:
        segPumpModifyErrorActionIfCurrentAlternateIsLastValidAlternate(v13, (void *)a2, &v56, &v55);
        uint64_t v24 = v56;
        goto LABEL_20;
      }
      if (v56 == 8)
      {
LABEL_20:
        int v28 = *v18;
        if (*v18 || (unint64_t)(v24 - 9) < 0xFFFFFFFFFFFFFFFELL)
        {
          if (v24 != 3) {
            goto LABEL_27;
          }
        }
        else
        {
          uint64_t v56 = 3;
        }
        if (*(unsigned char *)(v13 + 8177))
        {
          uint64_t v24 = 3;
        }
        else
        {
          uint64_t v24 = 6;
          uint64_t v56 = 6;
        }
LABEL_27:
        if (*(unsigned char *)(v13 + 9480))
        {
          if (v28
            && *(void *)(v13 + 8096)
            && !segPumpIsAlternateLastValidAlternate(v13, (void *)a2, *(void *)(v13 + 8144), 0))
          {
            uint64_t v24 = 7;
          }
          else
          {
            uint64_t v24 = 6;
          }
          uint64_t v56 = v24;
        }
        uint64_t v29 = 0;
        uint64_t v30 = 0;
        unsigned int v31 = v55;
        if (!v23) {
          goto LABEL_35;
        }
        goto LABEL_34;
      }
    }
    uint64_t v56 = 1;
    if (v19)
    {
      uint64_t v23 = 0;
      goto LABEL_19;
    }
    CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    double v26 = CFErrorCreate(AllocatorForMedia, @"CoreMediaErrorDomain", -12938, v21);
    if (v26)
    {
      uint64_t v23 = v26;
      uint64_t v27 = segPumpGetCommonActionForNetworkError(v26, &v56, &v55);
      if (v27)
      {
        uint64_t v29 = v27;
        uint64_t v24 = 0;
        unsigned int v31 = 0;
LABEL_34:
        CFRelease(v23);
        uint64_t v30 = v29;
LABEL_35:
        if (v21) {
          CFRelease(v21);
        }
        if (v30)
        {
          CFAllocatorRef v16 = (void *)cf;
          if (!cf) {
            return v30;
          }
          goto LABEL_81;
        }
        if (v24 == 1)
        {
          segPumpResetConnectionByPreservingConnectionStats(v13, a2 + 544);
          uint64_t v30 = segPumpRequestCustomURLForCryptKey(v13, a2, *(const void **)(a2 + 248), 0);
          CFAllocatorRef v16 = (void *)cf;
          if (!v30)
          {
            segPumpAppendErrorLogEntryWithCFError(a1, v13, a2, (const __CFURL **)(a2 + 544), (CFErrorRef)cf, 3u, 3u);
            if (!v16) {
              return v30;
            }
            goto LABEL_81;
          }
          goto LABEL_80;
        }
        int64_t v32 = *(const void **)(a2 + 248);
        if (v32)
        {
          CFRelease(v32);
          *(void *)(a2 + 248) = 0;
        }
        uint64_t v33 = v53;
        *(unsigned char *)(v53 + 145) = 0;
        if (*(unsigned char *)(v13 + 9480))
        {
          CFAllocatorRef v16 = (void *)cf;
        }
        else
        {
          if (!v24) {
            *(unsigned char *)(v33 + 144) = 1;
          }
          CFAllocatorRef v16 = (void *)cf;
          LOBYTE(v56) = 0;
          if (*(unsigned char *)(v33 + 88))
          {
            uint64_t v34 = *(void *)(v33 + 64);
            if (v34)
            {
              uint64_t v35 = *(void *)(CMBaseObjectGetVTable() + 16);
              char v36 = v35 ? (void *)v35 : 0;
              if (*v36 >= 6uLL)
              {
                uint64_t v37 = (unsigned int (*)(uint64_t, uint64_t, uint64_t, uint64_t *, void))v36[20];
                if (v37)
                {
                  if (!v37(v34, 2, 1, &v56, 0) && (_BYTE)v56)
                  {
                    uint64_t v38 = *(void *)(v33 + 64);
                    uint64_t v39 = *(void *)(CMBaseObjectGetVTable() + 8);
                    uint64_t v40 = v39 ? v39 : 0;
                    CFAllocatorRef v41 = *(void (**)(uint64_t, void, void *))(v40 + 56);
                    if (v41) {
                      v41(v38, *MEMORY[0x1E4F1FDC0], v16);
                    }
                  }
                }
              }
            }
          }
          if (*(unsigned char *)(v33 + 128))
          {
            uint64_t v42 = *(void *)(v33 + 104);
            if (v42)
            {
              uint64_t v43 = *(void *)(CMBaseObjectGetVTable() + 16);
              uint64_t v44 = v43 ? (void *)v43 : 0;
              if (*v44 >= 6uLL)
              {
                int v45 = (unsigned int (*)(uint64_t, uint64_t, uint64_t, uint64_t *, void))v44[20];
                if (v45)
                {
                  if (!v45(v42, 2, 1, &v56, 0) && (_BYTE)v56)
                  {
                    uint64_t v46 = *(void *)(v33 + 104);
                    uint64_t v47 = *(void *)(CMBaseObjectGetVTable() + 8);
                    if (v47) {
                      uint64_t v48 = v47;
                    }
                    else {
                      uint64_t v48 = 0;
                    }
                    uint64_t v49 = *(void (**)(uint64_t, void, void *))(v48 + 56);
                    if (v49) {
                      v49(v46, *MEMORY[0x1E4F1FDC0], v16);
                    }
                  }
                }
              }
            }
          }
          uint64_t v50 = v53;
          CryptKeyReleaseAndClearVideoDecryptor(v53);
          CryptKeyReleaseAndClearAudioDecryptor(v50);
        }
        uint64_t ErrorFromHTTPRequestIfAvailable = segPumpHandleCommonNetworkError(a1, a2, v24, v31, (const __CFURL **)(a2 + 544), 2u, v16);
LABEL_79:
        uint64_t v30 = ErrorFromHTTPRequestIfAvailable;
LABEL_80:
        if (!v16) {
          return v30;
        }
LABEL_81:
        CFRelease(v16);
        return v30;
      }
      goto LABEL_19;
    }
    uint64_t v30 = FigSignalErrorAt();
    if (!v30)
    {
      unsigned int v31 = v55;
      uint64_t v24 = v56;
      goto LABEL_35;
    }
LABEL_93:
    uint64_t v24 = 0;
    unsigned int v31 = 0;
    goto LABEL_35;
  }

  return FigSignalErrorAt();
}

uint64_t segPumpCryptSetKey(const void *a1, uint64_t a2, uint64_t a3, const void *a4, uint64_t a5, int a6, const void *a7, uint64_t a8)
{
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  uint64_t CryptKeyCommonData = segPumpGetCryptKeyCommonData(a4, &v48, &v47);
  if (CryptKeyCommonData) {
    goto LABEL_16;
  }
  FigHTTPStopAndReleaseTimer((dispatch_object_t *)(a3 + 640));
  if (a4 && FigContentKeySpecifierGetKeySystem((uint64_t)a4) == 2)
  {
    if (a7) {
      CFTypeRef v17 = CFRetain(a7);
    }
    else {
      CFTypeRef v17 = 0;
    }
    *(void *)(v47 + 48) = v17;
    CFIndex Length = CFDataGetLength((CFDataRef)a7);
    if (Length == FigContentKeySpecifierGetCryptKeySize((uint64_t)a4))
    {
      uint64_t v19 = (unsigned char *)v47;
      *(unsigned char *)(v47 + 144) = 1;
      goto LABEL_12;
    }
    segPumpAppendErrorLogEntry((uint64_t)a1, a2, a3, (const __CFURL **)(a3 + 544), -12885, @"CoreMediaErrorDomain", @"Invalid crypt key length", 0, 0, 3u, 1u);
LABEL_15:
    uint64_t CryptKeyCommonData = FigSignalErrorAt();
    goto LABEL_16;
  }
  KeySysteCFIndex m = FigContentKeySpecifierGetKeySystem((uint64_t)a4);
  uint64_t v19 = (unsigned char *)v47;
  if (KeySystem != 1) {
    goto LABEL_12;
  }
  char v46 = 0;
  if (*(void *)(v47 + 80) == a5)
  {
    uint64_t v20 = *(void *)(v47 + 64);
    *(void *)(v47 + 80) = 0;
    CFDictionaryRef v21 = v19 + 96;
    v19[88] = 0;
  }
  else
  {
    if (*(void *)(v47 + 120) != a5)
    {
LABEL_26:
      uint64_t v23 = 0;
      goto LABEL_60;
    }
    uint64_t v20 = *(void *)(v47 + 104);
    *(void *)(v47 + 120) = 0;
    CFDictionaryRef v21 = v19 + 136;
    v19[128] = 0;
  }
  void *v21 = 0;
  if (!v20) {
    goto LABEL_26;
  }
  if (!a6)
  {
    double v26 = *(void **)(CMBaseObjectGetVTable() + 16);
    if (v26) {
      uint64_t v27 = v26;
    }
    else {
      uint64_t v27 = 0;
    }
    if (*v27 >= 4uLL && (unsigned int v31 = (uint64_t (*)(uint64_t, const void *, uint64_t))v27[12]) != 0) {
      uint64_t v23 = v31(v20, a7, a8);
    }
    else {
      uint64_t v23 = 4294954514;
    }
    if (!*(unsigned char *)(a2 + 322) || !v23) {
      goto LABEL_50;
    }
LABEL_60:
    uint64_t result = 4294951670;
    if (v23 == -15626) {
      return result;
    }
    goto LABEL_61;
  }
  uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v24) {
    uint64_t v25 = v24;
  }
  else {
    uint64_t v25 = 0;
  }
  int v28 = *(uint64_t (**)(uint64_t, void, void))(v25 + 56);
  if (!v28) {
    goto LABEL_59;
  }
  uint64_t CryptKeyCommonData = v28(v20, *MEMORY[0x1E4F1FE18], *MEMORY[0x1E4F1CFD0]);
  if (CryptKeyCommonData) {
    goto LABEL_16;
  }
  uint64_t v29 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v29) {
    uint64_t v30 = v29;
  }
  else {
    uint64_t v30 = 0;
  }
  int64_t v32 = *(uint64_t (**)(uint64_t, void, const void *))(v30 + 56);
  if (v32) {
    uint64_t v23 = v32(v20, *MEMORY[0x1E4F1FDD0], a7);
  }
  else {
    uint64_t v23 = 4294954514;
  }
  if (*(unsigned char *)(a2 + 322) && v23) {
    goto LABEL_60;
  }
  if (*(void *)(a2 + 296))
  {
    if (*(unsigned char *)(a2 + 321))
    {
      if (!*(unsigned char *)(v47 + 146))
      {
        CFStringRef Identifier = (const void *)FigContentKeySpecifierGetIdentifier((uint64_t)a4);
        uint64_t CryptKeyCommonData = segPumpSaveCryptKeyToCache(a2, Identifier);
        if (CryptKeyCommonData) {
          goto LABEL_16;
        }
      }
    }
  }
LABEL_50:
  uint64_t v34 = *(void **)(CMBaseObjectGetVTable() + 16);
  if (v34) {
    uint64_t v35 = v34;
  }
  else {
    uint64_t v35 = 0;
  }
  if (*v35 < 6uLL || (char v36 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, char *, void))v35[20]) == 0)
  {
LABEL_59:
    uint64_t v23 = 4294954514;
    goto LABEL_60;
  }
  uint64_t CryptKeyCommonData = v36(v20, 2, 3, &v46, 0);
  if (CryptKeyCommonData) {
    goto LABEL_16;
  }
  if (!*(void *)(v47 + 80) && !*(void *)(v47 + 120))
  {
    *(unsigned char *)(v47 + 144) = 1;
    if (*(unsigned char *)(a2 + 322))
    {
      if (segPumpCryptKeyIsLowValueFairPlayStreamingKey((uint64_t)a4))
      {
        uint64_t v42 = *MEMORY[0x1E4F1FDB8];
        uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
        if (FigCPECryptorCopyProperty(v20, v42, AllocatorForMedia, v47 + 48)) {
          goto LABEL_15;
        }
        uint64_t v44 = *MEMORY[0x1E4F1FDA8];
        uint64_t v45 = FigGetAllocatorForMedia();
        if (FigCPECryptorCopyProperty(v20, v44, v45, v47 + 56)) {
          goto LABEL_15;
        }
      }
    }
  }
  uint64_t v19 = (unsigned char *)v47;
LABEL_12:
  if (v19[144])
  {
    uint64_t CryptKeyCommonData = segPumpContinueAfterKeyFetched(a1, a2, (void *)a3, a4);
LABEL_16:
    uint64_t v23 = CryptKeyCommonData;
    goto LABEL_60;
  }
  uint64_t v23 = 0;
LABEL_61:
  uint64_t v38 = *(void *)(a2 + 9048);
  if (v38)
  {
    uint64_t v39 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v39) {
      uint64_t v40 = v39;
    }
    else {
      uint64_t v40 = 0;
    }
    CFAllocatorRef v41 = *(void (**)(uint64_t, uint64_t, uint64_t, void, void))(v40 + 56);
    if (v41) {
      v41(v38, 0x1EE582B78, 0x1EE585318, 0, 0);
    }
  }
  return v23;
}

void segPumpPongCallback(uint64_t a1, double a2, uint64_t a3, int a4)
{
  uint64_t v18 = 0;
  CFTypeRef cf = 0;
  uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  if (!segPumpLockAndCopyPumpFromRetainProxy(a1, &cf, (uint64_t *)&v18))
  {
    uint64_t v8 = (uint64_t)v18;
    if (a4)
    {
      v18[1073] = 0;
      *(_OWORD *)(v8 + 8600) = 0u;
      uint64_t v9 = *(void *)(v8 + 9560);
      if (v9)
      {
        uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v11 = v10 ? v10 : 0;
        CFAllocatorRef v16 = *(void (**)(uint64_t, __CFString *, void))(v11 + 56);
        if (v16) {
          v16(v9, @"AfmfpbProperty_RTT", 0);
        }
      }
    }
    else
    {
      v18[1076] = UpTimeNanoseconds;
      *(void *)(v8 + 8592) = (*(void *)(v8 + 8584) + 2 * *(void *)(v8 + 8592)) / 3;
      *(void *)(v8 + 8584) = (uint64_t)(a2 * 1000000000.0);
      if (*(void *)(v8 + 9560))
      {
        CFNumberRef v12 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt64Type, (const void *)(v8 + 8584));
        uint64_t v13 = v18[1195];
        uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v14) {
          uint64_t v15 = v14;
        }
        else {
          uint64_t v15 = 0;
        }
        CFTypeRef v17 = *(void (**)(uint64_t, __CFString *, CFNumberRef))(v15 + 56);
        if (v17) {
          v17(v13, @"AfmfpbProperty_RTT", v12);
        }
        if (v12) {
          CFRelease(v12);
        }
      }
    }
    segPumpResumeRoundTripMonitoring(v18);
  }
  segPumpUnlockAndSendAllPendingNotifications();
  if (cf) {
    CFRelease(cf);
  }
}

void *segPumpFindCryptKeyCommonDataForRequestID(uint64_t a1, uint64_t a2)
{
  CFIndex v4 = 0;
  while (1)
  {
    CFArrayRef Count = *(const __CFArray **)(a1 + 7688);
    if (Count) {
      CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
    }
    if (v4 >= (uint64_t)Count) {
      break;
    }
    uint64_t result = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 7688), v4);
    if (result[10] != a2)
    {
      ++v4;
      if (result[15] != a2) {
        continue;
      }
    }
    return result;
  }
  return 0;
}

const void *segPumpFindSessionDataEntryForRequestID(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 48))
  {
    CFIndex v4 = 0;
    while (1)
    {
      CFArrayRef SessionDataSpecifiers = (const __CFArray *)FigMultivariantPlaylistGetSessionDataSpecifiers(*(void *)(a1 + 48));
      if (SessionDataSpecifiers) {
        CFArrayRef SessionDataSpecifiers = (const __CFArray *)CFArrayGetCount(SessionDataSpecifiers);
      }
      if (v4 >= (uint64_t)SessionDataSpecifiers) {
        break;
      }
      CFArrayRef v6 = (const __CFArray *)FigMultivariantPlaylistGetSessionDataSpecifiers(*(void *)(a1 + 48));
      CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v6, v4++);
      if (*((void *)segPumpEnsureAndGetSessionDataPrivateData(ValueAtIndex) + 3) == a2) {
        return ValueAtIndex;
      }
    }
  }
  return 0;
}

uint64_t segPumpRequestCustomURLForCryptKey(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4)
{
  v35[27] = *MEMORY[0x1E4F143B8];
  uint64_t v34 = 0;
  v35[0] = 0;
  CFTypeRef v32 = 0;
  CFTypeRef cf = 0;
  uint64_t CryptKeyCommonData = segPumpGetCryptKeyCommonData(a3, v35, &v34);
  if (CryptKeyCommonData) {
    goto LABEL_46;
  }
  if (FigContentKeySpecifierGetKeySystem((uint64_t)a3) != 1)
  {
    if (a3 && FigContentKeySpecifierGetKeySystem((uint64_t)a3) == 2)
    {
      uint64_t v14 = 0;
      uint64_t v11 = 0;
      uint64_t v13 = *(void *)(v35[0] + 40);
      uint64_t v15 = v35[0] + 48;
    }
    else
    {
      uint64_t v15 = 0;
      uint64_t v14 = 0;
      uint64_t v13 = 0;
      uint64_t v11 = 0;
    }
    BOOL v12 = 1;
    goto LABEL_11;
  }
  if (!*(void *)(v34 + 64))
  {
    uint64_t CryptKeyCommonData = FigSignalErrorAt();
LABEL_46:
    uint64_t URLGuts = CryptKeyCommonData;
    uint64_t v11 = 0;
    goto LABEL_36;
  }
  int v8 = *(unsigned __int8 *)(v34 + 88);
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  uint64_t Mutable = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D510]);
  uint64_t v11 = Mutable;
  if (!Mutable)
  {
    uint64_t URLGuts = FigSignalErrorAt();
    goto LABEL_36;
  }
  BOOL v12 = v8 != 0;
  CFArrayAppendValue(Mutable, @"com.apple.streamingkeydelivery.contentkey");
  CFArrayAppendValue(v11, @"com.apple.streamingkeydelivery.persistentcontentkey");
  uint64_t v13 = *(void *)(v34 + 64);
  uint64_t v14 = *(void *)(v34 + 96);
  uint64_t v15 = v34 + 80;
LABEL_11:
  CFStringRef Identifier = (const __CFString *)FigContentKeySpecifierGetIdentifier((uint64_t)a3);
  if (Identifier)
  {
    CFAllocatorRef v17 = (const __CFAllocator *)FigGetAllocatorForMedia();
    CFStringRef Identifier = (const __CFString *)CFURLCreateWithString(v17, Identifier, 0);
  }
  if (!v12)
  {
LABEL_23:
    if (*(void *)(v34 + 104) && *(unsigned char *)(v34 + 128))
    {
      uint64_t v24 = FigGetAllocatorForMedia();
      uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v25) {
        uint64_t v26 = v25;
      }
      else {
        uint64_t v26 = 0;
      }
      uint64_t v27 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v26 + 48);
      if (v27) {
        v27(v13, *MEMORY[0x1E4F1FE10], v24, &v32);
      }
      LOBYTE(v31) = 0;
      uint64_t URLGuts = segPumpCustomURLLoaderGetURLGuts(a1, Identifier, *(void *)(v34 + 104), v11, a4, 0, 0, *(void *)(v34 + 136), v31, 0, 0, v34 + 120);
      if (URLGuts || !dword_1E9351350)
      {
LABEL_34:
        if (!Identifier) {
          goto LABEL_36;
        }
        goto LABEL_35;
      }
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t URLGuts = 0;
    goto LABEL_34;
  }
  uint64_t v18 = segPumpCustomURLLoaderGetURLGuts(a1, Identifier, v13, v11, a4, 0, 0, v14, 0, 0, 0, v15);
  if (!v18)
  {
    if (v13)
    {
      uint64_t v19 = FigGetAllocatorForMedia();
      uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v21 = v20 ? v20 : 0;
      uint64_t v22 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v21 + 48);
      if (v22) {
        v22(v13, *MEMORY[0x1E4F1FE10], v19, &cf);
      }
    }
    if (dword_1E9351350)
    {
      uint64_t v23 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    goto LABEL_23;
  }
  uint64_t URLGuts = v18;
  if (Identifier) {
LABEL_35:
  }
    CFRelease(Identifier);
LABEL_36:
  if (cf) {
    CFRelease(cf);
  }
  if (v32) {
    CFRelease(v32);
  }
  if (v11) {
    CFRelease(v11);
  }
  return URLGuts;
}

uint64_t segPumpSaveCryptKeyToCache(uint64_t a1, const void *a2)
{
  if (*(void *)(a1 + 296) && *(unsigned char *)(a1 + 321))
  {
    FigGetAllocatorForMedia();
    BlockBufferWithCFDataNoCFDictionaryRef Copy = FigCreateBlockBufferWithCFDataNoCopy();
    if (BlockBufferWithCFDataNoCopy) {
      return BlockBufferWithCFDataNoCopy;
    }
    else {
      return FigStreamingCacheSetCryptKey(*(void *)(a1 + 296), a2, 0);
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t findConnectionFromMediaDownloadTimer(void *a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  uint64_t v5 = a1[94];
  if (v5 < 1)
  {
LABEL_6:
    uint64_t v8 = a1[97];
    if (v8 < 1) {
      return 0;
    }
    uint64_t v6 = 0;
    while (1)
    {
      uint64_t v9 = *(void *)(a1[96] + 8 * v6);
      if (v9)
      {
        if (*(void *)(v9 + 112) == a2) {
          break;
        }
      }
      if (v8 == ++v6) {
        return 0;
      }
    }
    *a3 = v9;
    uint64_t v11 = (void *)a1[96];
  }
  else
  {
    uint64_t v6 = 0;
    while (1)
    {
      uint64_t v7 = a1[v6 + 87];
      if (v7)
      {
        if (*(void *)(v7 + 112) == a2) {
          break;
        }
      }
      if (v5 == ++v6) {
        goto LABEL_6;
      }
    }
    uint64_t v11 = a1 + 87;
    *a3 = v7;
  }
  *a4 = v11;
  *a5 = v6;
  return 1;
}

uint64_t segPumpMediaFileCreateDecryptedData(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, OpaqueCMBlockBuffer *a5, size_t a6, char *a7, unsigned __int8 a8, OpaqueCMBlockBuffer *a9)
{
  dataPointerOut[16] = *(char **)MEMORY[0x1E4F143B8];
  uint64_t v83 = 0;
  uint64_t v84 = 0;
  char v82 = 0;
  size_t dataLength = 0;
  size_t v81 = 0;
  uint64_t v78 = 0;
  uint64_t v79 = 0;
  CMBlockBufferRef blockBufferOut = 0;
  CMBlockBufferRef theBuffer = 0;
  if (a4)
  {
    if (!a9) {
      goto LABEL_100;
    }
    uint64_t ContentKeySpecifier = (const void *)FigMediaSegmentSpecifierGetContentKeySpecifier((uint64_t)a4);
    uint64_t CryptKeyCommonData = segPumpGetCryptKeyCommonData(ContentKeySpecifier, &v79, &v78);
    if (CryptKeyCommonData) {
      goto LABEL_101;
    }
    MediaFilePrivateData = (char *)segPumpGetMediaFilePrivateData(a4);
    uint64_t v17 = FigMediaSegmentSpecifierGetContentKeySpecifier((uint64_t)a4);
    if (FigContentKeySpecifierGetEncryptionMethod(v17) != 4) {
      goto LABEL_19;
    }
    unint64_t TagSize = FigCryptGetTagSize(3);
    CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    uint64_t CryptKeyCommonData = CMBlockBufferCreateEmpty(AllocatorForMedia, 0, 0, &blockBufferOut);
    if (CryptKeyCommonData) {
      goto LABEL_101;
    }
    uint64_t v21 = (CFTypeRef *)(MediaFilePrivateData + 216);
    uint64_t v20 = (OpaqueCMBlockBuffer *)*((void *)MediaFilePrivateData + 27);
    if (v20)
    {
      uint64_t CryptKeyCommonData = CMBlockBufferAppendBufferReference(blockBufferOut, v20, 0, 0, 0);
      if (CryptKeyCommonData) {
        goto LABEL_101;
      }
      if (*v21)
      {
        CFRelease(*v21);
        CFTypeRef *v21 = 0;
      }
    }
    if (a7)
    {
      uint64_t CryptKeyCommonData = CMBlockBufferAppendBufferReference(blockBufferOut, a5, a6, (size_t)a7, 0);
      if (CryptKeyCommonData) {
        goto LABEL_101;
      }
    }
    if (a8)
    {
      CFAllocatorRef v29 = (const __CFAllocator *)FigGetAllocatorForMedia();
      uint64_t v30 = blockBufferOut;
      CFAllocatorRef v31 = (const __CFAllocator *)FigGetAllocatorForMedia();
      uint64_t CryptKeyCommonData = CMBlockBufferCreateContiguous(v29, v30, v31, 0, 0, 0, 0, &theBuffer);
      if (CryptKeyCommonData) {
        goto LABEL_101;
      }
LABEL_18:
      a5 = theBuffer;
      a7 = (char *)CMBlockBufferGetDataLength(theBuffer);
      a6 = 0;
LABEL_19:
      if (MediaFilePrivateData[72])
      {
        if (!a7)
        {
LABEL_35:
          uint64_t v38 = FigMediaSegmentSpecifierGetContentKeySpecifier((uint64_t)a4);
          uint64_t CryptBlockSize = FigContentKeySpecifierGetCryptBlockSize(v38);
          uint64_t v72 = a2;
          if (a8)
          {
            uint64_t v40 = FigMediaSegmentSpecifierGetContentKeySpecifier((uint64_t)a4);
            if (FigContentKeySpecifierGetEncryptionMethod(v40) == 4)
            {
              unint64_t v41 = FigCryptGetTagSize(3);
              BOOL v42 = (unint64_t)a7 >= v41;
              a7 -= v41;
              if (!v42)
              {
LABEL_100:
                uint64_t CryptKeyCommonData = FigSignalErrorAt();
                goto LABEL_101;
              }
            }
          }
          else if (!a7)
          {
            os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            goto LABEL_100;
          }
          uint64_t v43 = (uint64_t)a4;
          uint64_t v44 = (unsigned char *)(a2 + 8193);
          uint64_t v45 = (CFTypeRef *)(a3 + 840);
          unint64_t v46 = 0x20000 - 2 * CryptBlockSize;
          unsigned int v71 = (CMBlockBufferRef *)(MediaFilePrivateData + 208);
          while (1)
          {
            dataPointerOut[0] = 0;
            char v82 = 0;
            uint64_t v47 = (void *)*v45;
            if (*v45)
            {
              size_t v48 = *(void *)(a3 + 848);
              if (v46 >= v48) {
                goto LABEL_46;
              }
              CFRelease(v47);
              CFTypeRef *v45 = 0;
            }
            segPumpGetMediaDataMemoryPool(a2);
            uint64_t BlockBuffer = FigMemoryPoolCreateBlockBuffer();
            if (BlockBuffer) {
              goto LABEL_102;
            }
            size_t v48 = 0;
            *(void *)(a3 + 848) = 0;
            uint64_t v47 = *(void **)(a3 + 840);
LABEL_46:
            uint64_t BlockBuffer = CMBlockBufferGetDataPointer((CMBlockBufferRef)v47, v48, (size_t *)dataPointerOut, 0, &v83);
            if (BlockBuffer) {
              goto LABEL_102;
            }
            if (v44[519]) {
              BOOL v50 = FigMediaSegmentSpecifierGetBytesToRead(v43) > 0;
            }
            else {
              BOOL v50 = 0;
            }
            uint64_t v51 = FigCryptDecryptMemory(*(void *)(v79 + 24), a8 & 1, v50, v84, (size_t)a7, &v81, v83, (size_t)dataPointerOut[0], &dataLength, &v82);
            uint64_t v28 = v51;
            if (v51)
            {
              segPumpAppendErrorLogEntry(a1, a2, a3, (const __CFURL **)(*(void *)(a3 + 696) + 16), (int)v51, @"CoreMediaErrorDomain", @"Decryption error", 0, 0, 0, 2u);
              a7 = 0;
              goto LABEL_86;
            }
            BOOL v42 = (unint64_t)a7 >= v81;
            a7 -= v81;
            if (!v42)
            {
              uint64_t BlockBuffer = FigSignalErrorAt();
LABEL_102:
              uint64_t appended = BlockBuffer;
LABEL_103:
              uint64_t v28 = appended;
              goto LABEL_104;
            }
            v84 += v81;
            int v52 = a8 & (a7 == 0);
            if (v82) {
              int v52 = 0;
            }
            MediaFilePrivateData[97] = v52;
            size_t v53 = dataLength;
            if ((a8 & 1) != 0 || dataLength)
            {
              uint64_t v54 = *(void *)(a3 + 880);
              if (*v44)
              {
                uint64_t v55 = FigMediaSegmentSpecifierGetContentKeySpecifier(v43);
                if (FigContentKeySpecifierGetEncryptionMethod(v55) == 4)
                {
                  uint64_t v56 = (CMBlockBufferRef *)(MediaFilePrivateData + 208);
                  if (!*v71)
                  {
                    CFAllocatorRef v57 = (const __CFAllocator *)FigGetAllocatorForMedia();
                    uint64_t BlockBuffer = CMBlockBufferCreateEmpty(v57, 0, 0, v71);
                    uint64_t v56 = (CMBlockBufferRef *)(MediaFilePrivateData + 208);
                    if (BlockBuffer) {
                      goto LABEL_102;
                    }
                  }
                  if (dataLength)
                  {
                    uint64_t BlockBuffer = CMBlockBufferAppendBufferReference(*v71, *(CMBlockBufferRef *)(a3 + 840), *(void *)(a3 + 848), dataLength, 0);
                    uint64_t v56 = (CMBlockBufferRef *)(MediaFilePrivateData + 208);
                    if (BlockBuffer) {
                      goto LABEL_102;
                    }
                  }
                  if (MediaFilePrivateData[97])
                  {
                    size_t v58 = CMBlockBufferGetDataLength(*v56);
                    if (v58) {
                      uint64_t appended = CMBlockBufferAppendBufferReference(a9, *v56, 0, v58, 0);
                    }
                    else {
                      uint64_t appended = 0;
                    }
                    if (*v56)
                    {
                      CFRelease(*v56);
                      CMBlockBufferRef *v56 = 0;
                    }
                    unint64_t v46 = 0x20000 - 2 * CryptBlockSize;
                    goto LABEL_79;
                  }
                  size_t v60 = dataLength;
                  unint64_t v46 = 0x20000 - 2 * CryptBlockSize;
LABEL_74:
                  *(void *)(a3 + 848) += v60;
                  goto LABEL_80;
                }
                size_t v53 = dataLength;
              }
              if (!v53)
              {
                size_t v60 = 0;
                goto LABEL_74;
              }
              uint64_t appended = CMBlockBufferAppendBufferReference(a9, *(CMBlockBufferRef *)(a3 + 840), *(void *)(a3 + 848), v53, 0);
LABEL_79:
              *(void *)(a3 + 848) += dataLength;
              if (appended) {
                goto LABEL_103;
              }
LABEL_80:
              if (v54 != *(void *)(a3 + 880)) {
                goto LABEL_93;
              }
              a2 = v72;
              if (MediaFilePrivateData[97])
              {
LABEL_83:
                if (*v45)
                {
                  CFRelease(*v45);
                  CFTypeRef *v45 = 0;
                }
                *(void *)(a3 + 848) = 0;
                goto LABEL_86;
              }
              goto LABEL_82;
            }
            if (v52) {
              goto LABEL_83;
            }
LABEL_82:
            if ((unint64_t)&a7[2 * CryptBlockSize] >= CMBlockBufferGetDataLength(*(CMBlockBufferRef *)(a3 + 840))
                                                            - *(void *)(a3 + 848))
              goto LABEL_83;
LABEL_86:
            if (!a7 && !v82)
            {
              if ((a8 & 1) != 0 && !MediaFilePrivateData[97])
              {
                CFDataRef v61 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
                BOOL v68 = v28 == -12465;
                uint64_t v28 = 4294954831;
                if (!v68) {
                  goto LABEL_100;
                }
              }
              goto LABEL_104;
            }
          }
        }
      }
      else
      {
        if (!*(void *)(v79 + 24))
        {
          BytePtr = CFDataGetBytePtr(*(CFDataRef *)(v78 + 48));
          size_t Length = CFDataGetLength(*(CFDataRef *)(v78 + 48));
          uint64_t v64 = FigMediaSegmentSpecifierGetContentKeySpecifier((uint64_t)a4);
          if (FigContentKeySpecifierGetEncryptionMethod(v64) == 4) {
            int v65 = 3;
          }
          else {
            int v65 = FigContentKeySpecifierGetEncryptionMethod(v64) == 3 ? 1 : -1;
          }
          uint64_t v66 = (const void *)FigGetAllocatorForMedia();
          uint64_t v67 = (const void *)FigGetAllocatorForMedia();
          uint64_t v28 = FigCryptCreateForDecrypt(v65, v66, 0, v67, BytePtr, Length, (void *)(v79 + 24));
          if (v28) {
            goto LABEL_104;
          }
        }
        uint64_t v32 = FigMediaSegmentSpecifierGetContentKeySpecifier((uint64_t)a4);
        if (FigContentKeySpecifierGetKeySystem(v32) == 1) {
          CFDataRef IV = *(const __CFData **)(v78 + 56);
        }
        else {
          CFDataRef IV = (const __CFData *)FigMediaSegmentSpecifierGetIV((uint64_t)a4);
        }
        uint64_t v34 = FigMediaSegmentSpecifierGetContentKeySpecifier((uint64_t)a4);
        if (FigContentKeySpecifierGetEncryptionMethod(v34) == 4)
        {
          dataPointerOut[0] = 0;
          size_t lengthAtOffsetOut = 0;
          size_t BlockSize = FigCryptGetBlockSize(3);
          uint64_t CryptKeyCommonData = CMBlockBufferGetDataPointer(a5, a6, &lengthAtOffsetOut, 0, dataPointerOut);
          if (CryptKeyCommonData) {
            goto LABEL_101;
          }
          if (lengthAtOffsetOut <= BlockSize) {
            goto LABEL_100;
          }
          uint64_t v28 = FigCryptSetIV(*(void *)(v79 + 24), dataPointerOut[0]);
          a6 += BlockSize;
          a7 -= BlockSize;
        }
        else
        {
          uint64_t v36 = *(void *)(v79 + 24);
          uint64_t v37 = (UInt8 *)CFDataGetBytePtr(IV);
          CFDataGetLength(IV);
          uint64_t v28 = FigCryptSetIV(v36, v37);
        }
        if (v28) {
          goto LABEL_104;
        }
        MediaFilePrivateData[72] = 1;
        if (!a7) {
          goto LABEL_35;
        }
      }
      dataPointerOut[0] = 0;
      uint64_t CryptKeyCommonData = CMBlockBufferGetDataPointer(a5, a6, (size_t *)dataPointerOut, 0, &v84);
      if (!CryptKeyCommonData)
      {
        if (dataPointerOut[0] < a7) {
          goto LABEL_100;
        }
        goto LABEL_35;
      }
LABEL_101:
      uint64_t v28 = CryptKeyCommonData;
      goto LABEL_104;
    }
    size_t v22 = CMBlockBufferGetDataLength(blockBufferOut);
    CFAllocatorRef v23 = (const __CFAllocator *)FigGetAllocatorForMedia();
    size_t v24 = v22 - TagSize;
    uint64_t CryptKeyCommonData = CMBlockBufferCreateWithBufferReference(v23, blockBufferOut, v22 - TagSize, 0, 0, (CMBlockBufferRef *)v21);
    if (CryptKeyCommonData) {
      goto LABEL_101;
    }
    if (v22 <= TagSize)
    {
LABEL_93:
      uint64_t v28 = 0;
      goto LABEL_104;
    }
    CFAllocatorRef v25 = (const __CFAllocator *)FigGetAllocatorForMedia();
    uint64_t v26 = blockBufferOut;
    CFAllocatorRef v27 = (const __CFAllocator *)FigGetAllocatorForMedia();
    uint64_t v28 = CMBlockBufferCreateContiguous(v25, v26, v27, 0, 0, v24, 0, &theBuffer);
    if (!v28) {
      goto LABEL_18;
    }
LABEL_104:
    if (blockBufferOut) {
      CFRelease(blockBufferOut);
    }
  }
  else
  {
    uint64_t v28 = FigSignalErrorAt();
  }
  if (theBuffer) {
    CFRelease(theBuffer);
  }
  return v28;
}

uint64_t segPumpDispatchAsyncMediaDelivery(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5, uint64_t a6)
{
  BOOL v12 = malloc_type_malloc(0x48uLL, 0x10A00404BD41864uLL);
  if (!v12) {
    return 4294954655;
  }
  uint64_t v13 = v12;
  *BOOL v12 = FigRetainProxyRetain();
  v13[1] = a2;
  uint64_t v14 = *(void *)(a2 + 880);
  v13[2] = *(void *)(a2 + 1160);
  v13[3] = v14;
  v13[4] = a3;
  v13[5] = a4;
  v13[6] = -1;
  if (a5) {
    CFTypeRef v15 = CFRetain(a5);
  }
  else {
    CFTypeRef v15 = 0;
  }
  v13[7] = v15;
  v13[8] = a6;
  dispatch_async_f(*(dispatch_queue_t *)(a1 + 72), v13, (dispatch_function_t)segPumpDispatchAsyncMediaDeliveryFunc);
  return 0;
}

void segPumpReplaceMediaFileWithDiscontinuity(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)uint64_t v19 = 0;
  CFTypeRef cf = 0;
  if (!segPumpLockAndCopyPumpFromRetainProxy(a1, &cf, (uint64_t *)v19))
  {
    uint64_t v10 = 0;
    uint64_t v11 = *(void *)v19 + 384;
    do
    {
      if (*(void *)(*(void *)v19 + 8416) != v10 && *(void *)(*(void *)v11 + 16)) {
        goto LABEL_12;
      }
      ++v10;
      v11 += 16;
    }
    while (v10 != 3);
    uint64_t v12 = *(void *)(a2 + 56);
    if (!v12
      || (CFArrayRef MediaSegmentSpecifiers = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(v12)) == 0
      || CFArrayGetCount(MediaSegmentSpecifiers) <= 0)
    {
LABEL_12:
      FigSignalErrorAt();
      goto LABEL_13;
    }
    MediaEntryForuint64_t MediaSequence = segPumpGetMediaEntryForMediaSequence(*(void *)(a2 + 56), a5);
    if (MediaEntryForMediaSequence)
    {
      if (*(unsigned char *)(*(void *)v19 + 8712))
      {
        segPumpMakeDataCallback((uint64_t)cf, (uint64_t *)a2, *(const void **)(*(void *)v19 + 176), 0, 0x20u, *(void *)(a2 + 304), MEMORY[0x1E4F1F9F8], 0, 0, a7, 0, 0);
      }
      else
      {
        CFTypeRef v15 = MediaEntryForMediaSequence;
        *((unsigned char *)segPumpGetMediaFilePrivateData(MediaEntryForMediaSequence) + 99) = 1;
        if (*(const void **)(a2 + 256) == v15 || *(const void **)(a2 + 264) == v15) {
          segPumpSetDeliveryStatusForMediaFileAndParts(v15, 1);
        }
        uint64_t v16 = *(void *)v19;
        if (*(unsigned char *)(*(void *)v19 + 8002) && *(void *)(*(void *)v19 + 384) == a2)
        {
          *(double *)(a2 + 96) = *(double *)(a2 + 96) - FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)v15);
          TimeIndouble Seconds = FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)v15);
          uint64_t v18 = *(void **)v19;
          *(double *)(*(void *)v19 + 344) = *(double *)(*(void *)v19 + 344) - TimeInSeconds;
          segPumpReadyNotification(v18, @"FBPAL_SeekableTimeRangeChanged", 0);
          segPumpReadyNotification(*(void **)v19, @"FBP_DurationChanged", 0);
          uint64_t v16 = *(void *)v19;
        }
        segPumpCancelMediaFileReadAndResetData(v16, a2, 0, 0);
        *(unsigned char *)(a2 + 403) = 1;
        segPumpDeliverNextMediaForSingleStream(cf, *(void *)v19, a2);
      }
    }
  }
LABEL_13:
  segPumpUnlockAndSendAllPendingNotifications();
  if (cf) {
    CFRelease(cf);
  }
}

void segPumpDispatchAsyncMediaDeliveryFunc(void *a1)
{
  uint64_t v2 = (void (*)(void, void, void, void, void, void, void))a1[8];
  if (v2) {
    v2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[7]);
  }
  FigRetainProxyRelease();
  uint64_t v3 = (const void *)a1[7];
  if (v3) {
    CFRelease(v3);
  }

  free(a1);
}

uint64_t segPumpCreateMapMediaBBuf(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t v11 = 0;
  CMBlockBufferRef blockBufferOut = 0;
  uint64_t v6 = segPumpCopyMapEntryFromCache(a1, a2, a3, &v11);
  uint64_t v7 = v11;
  if (v6)
  {
    uint64_t v9 = v6;
    if (v11) {
LABEL_9:
    }
      CFRelease(v7);
  }
  else
  {
    if (v11)
    {
      uint64_t appended = CMBlockBufferCreateEmpty(*(CFAllocatorRef *)(a1 + 56), 2u, 0, &blockBufferOut);
      if (appended
        || !CMBlockBufferIsEmpty((CMBlockBufferRef)v7)
        && (uint64_t appended = CMBlockBufferAppendBufferReference(blockBufferOut, (CMBlockBufferRef)v7, 0, 0, 0),
            appended)
        || !CMBlockBufferIsEmpty((CMBlockBufferRef)*a4)
        && (uint64_t appended = CMBlockBufferAppendBufferReference(blockBufferOut, (CMBlockBufferRef)*a4, 0, 0, 0),
            appended))
      {
        uint64_t v9 = appended;
      }
      else
      {
        CFRelease(*a4);
        uint64_t v9 = 0;
        *a4 = blockBufferOut;
        CMBlockBufferRef blockBufferOut = 0;
      }
      goto LABEL_9;
    }
    uint64_t v9 = FigSignalErrorAt();
  }
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  return v9;
}

uint64_t segPumpEnsureAndSetupBasicAESProtector(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(a1 + 248);
  uint64_t v2 = *(void *)(a1 + 248);
  if (!v2)
  {
    uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
    uint64_t result = FigCPEProtectorCreateForScheme(AllocatorForMedia, @"com.apple.basicAES", 0, (uint64_t)v3);
    if (result) {
      return result;
    }
    uint64_t v2 = *v3;
  }
  uint64_t v6 = *(void *)(a1 + 9520);
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v8 + 56);
  if (!v9) {
    return 4294954514;
  }

  return v9(v2, @"NeroTransport", v6);
}

uint64_t FigCPEProtectorCreateCryptor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 104);
  if (!v10) {
    return 4294954514;
  }

  return v10(a1, a2, 1, a3, a4);
}

void segPumpGetCryptorInfoFromBBuf(const void *a1, const __CFString *a2, void *a3, _DWORD *a4)
{
  *a4 = 0;
  CFTypeRef v6 = CMGetAttachment(a1, a2, 0);
  *a3 = v6;
  if (v6)
  {
    CFTypeRef v7 = v6;
    CFTypeRef cf = 0;
    uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
    uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v10 = v9 ? v9 : 0;
    uint64_t v11 = *(uint64_t (**)(CFTypeRef, void, uint64_t, CFTypeRef *))(v10 + 48);
    if (v11)
    {
      int v12 = v11(v7, *MEMORY[0x1E4F1FDC8], AllocatorForMedia, &cf);
      CFTypeRef v13 = cf;
      if (!v12)
      {
        *a4 = FigCFNumberGetSInt64();
        CFTypeRef v13 = cf;
      }
      if (v13) {
        CFRelease(v13);
      }
    }
  }
}

uint64_t segPumpMakeDataCallbackWithOSStatus(uint64_t a1, uint64_t *a2, const void *a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, unsigned int a10, uint64_t a11, _DWORD *a12)
{
  CFTypeRef cf = 0;
  FigCreateErrorForOSStatus(a10, (CFErrorRef *)&cf);
  long long v22 = *(_OWORD *)a7;
  uint64_t v23 = *(void *)(a7 + 16);
  DataCallbacuint64_t k = segPumpMakeDataCallback(a1, a2, a3, a4, a5, a6, &v22, a8, a9, (uint64_t)cf, a11, a12);
  if (cf) {
    CFRelease(cf);
  }
  return DataCallback;
}

uint64_t segPumpCopyMapEntryFromCache(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  CFTypeRef v21 = 0;
  CFTypeRef cf = 0;
  uint64_t v20 = 0;
  *a4 = 0;
  uint64_t v8 = segPumpCreateCacheNameFromSegment(a2, a3, &v21, &cf);
  if (!v8)
  {
    uint64_t v9 = *(void *)(a1 + 296);
    if (v9)
    {
      uint64_t v10 = *(void *)(a2 + 64);
      if (v10)
      {
        CFTypeRef v11 = cf;
        uint64_t StartOffset = FigMediaSegmentSpecifierGetStartOffset(a3);
        uint64_t MediaSequence = FigMediaSegmentSpecifierGetMediaSequence(a3);
        uint64_t v9 = FigStreamingCacheCopyMediaMap(v9, v10, (uint64_t)v11, StartOffset, MediaSequence, &v20);
        if (!v9)
        {
          CFTypeRef v14 = v20;
          if (v20)
          {
            uint64_t v9 = 0;
LABEL_11:
            *a4 = v14;
            goto LABEL_12;
          }
        }
      }
      else
      {
        uint64_t v9 = 0;
      }
    }
    CFTypeRef v15 = v21;
    uint64_t v16 = FigMediaSegmentSpecifierGetStartOffset(a3);
    uint64_t v17 = FigMediaSegmentSpecifierGetBytesToRead(a3);
    SavedEntry = segPumpFindSavedEntry(a1, v15, v16, v17);
    if (!SavedEntry) {
      goto LABEL_12;
    }
    CFTypeRef v14 = (CFTypeRef)SavedEntry[2];
    if (v14) {
      CFTypeRef v14 = CFRetain(v14);
    }
    goto LABEL_11;
  }
  uint64_t v9 = v8;
LABEL_12:
  if (cf) {
    CFRelease(cf);
  }
  if (v21) {
    CFRelease(v21);
  }
  return v9;
}

uint64_t segPumpMoveToNextMedia(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  CFTypeRef v7 = (unsigned char *)(a2 + 8712);
  if (!a4)
  {
    uint64_t v9 = *(const void **)(*(void *)(a3 + 696) + 8);
    if (v9 && *((void *)segPumpGetMediaFilePrivateData(v9) + 2))
    {
      MediaFilePrivateData = (CFTypeRef *)segPumpGetMediaFilePrivateData(*(const void **)(*(void *)(a3 + 696) + 8));
      CFRelease(MediaFilePrivateData[2]);
      *((void *)segPumpGetMediaFilePrivateData(*(const void **)(*(void *)(a3 + 696) + 8)) + 2) = 0;
    }
    if (*v7) {
      return 0;
    }
    goto LABEL_12;
  }
  if (!*v7)
  {
LABEL_12:
    CFTypeRef v11 = *(void **)(a3 + 696);
    int v12 = (const void *)v11[1];
    if (v12 && (CFRelease(v12), *(void *)(*(void *)(a3 + 696) + 8) = 0, (CFTypeRef v11 = *(void **)(a3 + 696)) == 0)
      || !v11[4] && !v11[13])
    {
      segPumpStreamMoveToNextFreeMediaConnection(a3);
    }
    return segPumpDeliverNextMediaForSingleStream(a1, a2, a3);
  }
  if (*(unsigned char *)(a2 + 8768))
  {
    *(unsigned char *)(a2 + 8768) = 0;
    uint64_t result = segPumpRetrieveNextIFrame(a1, a2);
    if (result) {
      return segPumpMakeDataCallbackWithOSStatus(a1, (uint64_t *)a3, *(const void **)(a2 + 176), 0, 0x20u, *(void *)(*(void *)(a2 + 384) + 304), MEMORY[0x1E4F1F9F8], 0, 0, result, 0, 0);
    }
    return result;
  }
  uint64_t v13 = **(void **)(a3 + 768);
  if (v13)
  {
    CFTypeRef v14 = *(const void **)(v13 + 8);
    segPumpAdoptReadAhead(a2, a3, v14, 0, 0);
    if (*(float *)(a2 + 8736) != 0.0)
    {
      uint64_t result = segPumpDoAllStepAheads(a1, v14);
      if (result) {
        return result;
      }
    }
    return 0;
  }

  return segPumpDoNextStep(a1, a2);
}

uint64_t segPumpRetrieveNextIFrame(uint64_t a1, uint64_t a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  CFIndex v4 = *(uint64_t **)(a2 + 384);
  double v5 = *(double *)(a2 + 8720);
  double v23 = 0.0;
  MediaEntryForTimeFromEnd = segPumpGetMediaEntryForTimeFromEnd(v4[7], 0, &v23, v5);
  uint64_t v7 = 0;
  if (MediaEntryForTimeFromEnd)
  {
    while (1)
    {
      double v8 = v23;
      double v9 = *(double *)(a2 + 8784);
      if (v23 == v9) {
        goto LABEL_24;
      }
      if (v23 < v9) {
        uint64_t v7 = (uint64_t)MediaEntryForTimeFromEnd;
      }
      if (v8 + FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)MediaEntryForTimeFromEnd) > *(double *)(a2 + 8784)) {
        break;
      }
      TimeIndouble Seconds = FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)MediaEntryForTimeFromEnd);
      double v23 = TimeInSeconds + v23;
      MediaEntryForTimeFromEnd = (const void *)FigMediaSegmentSpecifierGetNextSegment((uint64_t)MediaEntryForTimeFromEnd);
      if (!MediaEntryForTimeFromEnd)
      {
        if (!v7) {
          goto LABEL_12;
        }
        goto LABEL_10;
      }
    }
    MediaEntryForTimeFromEnd = (const void *)FigMediaSegmentSpecifierGetNextSegment((uint64_t)MediaEntryForTimeFromEnd);
    if (!v7)
    {
LABEL_12:
      if (MediaEntryForTimeFromEnd && v23 > *(double *)(a2 + 8800)) {
        MediaEntryForTimeFromEnd = 0;
      }
      goto LABEL_15;
    }
LABEL_10:
    double v11 = v23;
    if (v11 - FigMediaSegmentSpecifierGetTimeInSeconds(v7) < *(double *)(a2 + 8792)) {
      uint64_t v7 = 0;
    }
    goto LABEL_12;
  }
LABEL_15:
  int v12 = *(_DWORD *)(a2 + 8776);
  if (v12 != 1)
  {
    if (v12 == 2)
    {
      uint64_t v7 = (uint64_t)MediaEntryForTimeFromEnd;
    }
    else if (MediaEntryForTimeFromEnd)
    {
      if (v7)
      {
        double v13 = v23;
        double v14 = v23 - *(double *)(a2 + 8784);
        if (v13 - FigMediaSegmentSpecifierGetTimeInSeconds(v7) - *(double *)(a2 + 8784) < v14) {
          MediaEntryForTimeFromEnd = (const void *)v7;
        }
      }
      goto LABEL_24;
    }
  }
  MediaEntryForTimeFromEnd = (const void *)v7;
  if (!v7) {
    return FigSignalErrorAt();
  }
LABEL_24:
  if (FigMediaSegmentSpecifierGetMapSegmentSpecifier((uint64_t)MediaEntryForTimeFromEnd))
  {
    v24[0] = 0;
    uint64_t MapSegmentSpecifier = (const void *)FigMediaSegmentSpecifierGetMapSegmentSpecifier((uint64_t)MediaEntryForTimeFromEnd);
    uint64_t result = segPumpIsMapEntryCached(a2, (uint64_t)v4, MapSegmentSpecifier, v24);
    if (result) {
      return result;
    }
    if (!v24[0]) {
      *(unsigned char *)(a2 + 8768) = 1;
    }
  }
  if (dword_1E9351350)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  ++v4[110];
  MediaFilePrivateData = segPumpGetMediaFilePrivateData(MediaEntryForTimeFromEnd);
  MediaFilePrivateData[6] = 0;
  MediaFilePrivateData[7] = 0;
  uint64_t v19 = (const void *)v4[32];
  if (v19)
  {
    CFRelease(v19);
    v4[32] = 0;
  }
  uint64_t result = segPumpFetchOrDispatchMediaSegment(a1, a2, v4, MediaEntryForTimeFromEnd, 0, 0, 0);
  if (!result)
  {
    if (v4[31])
    {
      return 0;
    }
    else
    {
      uint64_t result = FigMediaSegmentSpecifierGetContentKeySpecifier((uint64_t)MediaEntryForTimeFromEnd);
      if (result)
      {
        uint64_t ContentKeySpecifier = (const void *)FigMediaSegmentSpecifierGetContentKeySpecifier((uint64_t)MediaEntryForTimeFromEnd);
        uint64_t result = segPumpDoesCryptKeyRequireFetch(ContentKeySpecifier);
        if (result)
        {
          CFTypeRef v21 = (const void *)v4[31];
          long long v22 = (const void *)FigMediaSegmentSpecifierGetContentKeySpecifier((uint64_t)MediaEntryForTimeFromEnd);
          v4[31] = (uint64_t)v22;
          if (v22) {
            CFRetain(v22);
          }
          if (v21) {
            CFRelease(v21);
          }
          return segPumpSendCryptKeyRequest(a1, a2, v4, v4[31]);
        }
      }
    }
  }
  return result;
}

uint64_t segPumpDoAllStepAheads(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = DerivedStorage;
  __int16 v33 = 0;
  __int16 v32 = 0;
  double v31 = 0.0;
  uint64_t v6 = *(void *)(DerivedStorage + 384);
  uint64_t v7 = *(void *)(v6 + 696);
  if (*(const void **)(v7 + 8) == a2) {
    uint64_t v8 = *(void *)(v7 + 288);
  }
  else {
    uint64_t v8 = *(void *)(DerivedStorage + 8752);
  }
  uint64_t v9 = *(void *)(v6 + 784);
  if (v9 < 1) {
    return 0;
  }
  uint64_t v10 = 0;
  while (1)
  {
    uint64_t v11 = *(void *)(*(void *)(v6 + 768) + 8 * v10);
    if (!v11) {
      break;
    }
    if (*(void *)(v11 + 8))
    {
      uint64_t v8 = *(void *)(v11 + 288);
      a2 = *(const void **)(v11 + 8);
    }
    if (v9 == ++v10) {
      return 0;
    }
  }
  if (v10 >= v9) {
    return 0;
  }
  uint64_t v29 = a1;
  uint64_t v30 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  do
  {
    double v14 = *((double *)segPumpGetMediaFilePrivateData(a2) + 4) - *(double *)(v6 + 88);
    double PlaylistActiveDurationSecs = FigMediaPlaylistGetPlaylistActiveDurationSecs(*(void *)(v6 + 56));
    uint64_t v16 = segPumpChooseNextStep(v5, (uint64_t)a2, v8, 0, 0, 0, (BOOL *)&v32 + 1, &v31, PlaylistActiveDurationSecs - v14, PlaylistActiveDurationSecs - v14 + *(double *)(v5 + 8728) - *(double *)(v5 + 8720), &v33, (unsigned char *)&v33 + 1, &v32, &v30);
    if (!v16) {
      break;
    }
    a2 = v16;
    CFURLRef v17 = *(const __CFURL **)(v6 + 16);
    CFURLRef v18 = *(const __CFURL **)(v6 + 24);
    MediaFilePrivateData = segPumpGetMediaFilePrivateData(v16);
    segPumpEnsureMediaSegmentURLs(a2, v17, v18);
    if (!MediaFilePrivateData[2])
    {
      return FigSignalErrorAt();
    }
    if (HIBYTE(v32)) {
      return v12;
    }
    CFURLRef v20 = *(const __CFURL **)(v6 + 16);
    CFURLRef v21 = *(const __CFURL **)(v6 + 24);
    long long v22 = (const __CFURL **)segPumpGetMediaFilePrivateData(a2);
    segPumpEnsureMediaSegmentURLs(a2, v20, v21);
    if (!segPumpShouldRequestURLAsHTTPURL(v5, v22[2])) {
      return v12;
    }
    if (HIBYTE(v33))
    {
      ++v13;
    }
    else
    {
      if (FigMediaSegmentSpecifierGetContentKeySpecifier((uint64_t)a2))
      {
        uint64_t ContentKeySpecifier = (const void *)FigMediaSegmentSpecifierGetContentKeySpecifier((uint64_t)a2);
        if (segPumpDoesCryptKeyRequireFetch(ContentKeySpecifier)) {
          return v12;
        }
      }
      size_t v24 = segPumpGetMediaFilePrivateData(a2);
      v24[6] = 0;
      v24[7] = 0;
      uint64_t MediaFile = segPumpReadMediaFile(v29, v6, a2, 1, 0, 0, *(void *)(v6 + 768) + 8 * v10);
      if (MediaFile == -15626) {
        return 4294951670;
      }
      uint64_t v12 = MediaFile;
      *(int64x2_t *)(v5 + 8864) = vaddq_s64(*(int64x2_t *)(v5 + 8864), vdupq_n_s64(1uLL));
      uint64_t v26 = *(void *)(*(void *)(v6 + 768) + 8 * v10);
      if (!v26) {
        return v12;
      }
      uint64_t v8 = v30;
      *(void *)(v26 + 288) = v30;
      ++v10;
    }
    uint64_t v27 = *(void *)(v6 + 784);
  }
  while (v10 < v27 && v13 < v27);
  return v12;
}

uint64_t segPumpDoNextStep(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 384);
  char v19 = 0;
  __int16 v18 = 0;
  BOOL v5 = *(float *)(a2 + 8736) != 0.0;
  uint64_t v17 = 0;
  uint64_t v6 = segPumpChooseNextStep(a2, 0, *(void *)(a2 + 8752), 1, 1, 1, (BOOL *)&v18 + 1, &v21, *(double *)(a2 + 8720), *(double *)(a2 + 8728), &v19, &v20, &v18, &v17);
  uint64_t v7 = v6;
  if ((_BYTE)v18 && !*(unsigned char *)(v4 + 857)) {
    return 0;
  }
  if (!v6) {
    return 4294954648;
  }
  ++*(void *)(v4 + 880);
  if (!v19)
  {
    MediaFilePrivateData = (char *)segPumpGetMediaFilePrivateData(v6);
    *((void *)MediaFilePrivateData + 7) = 0;
    *((void *)MediaFilePrivateData + 8) = 0;
    *((void *)MediaFilePrivateData + 6) = 0;
    *(_DWORD *)(MediaFilePrivateData + 71) = 0;
    *((void *)MediaFilePrivateData + 14) = 0;
    *((void *)MediaFilePrivateData + 15) = 0;
    uint64_t v9 = *(const void **)(v4 + 256);
    if (v9)
    {
      CFRelease(v9);
      *(void *)(v4 + 256) = 0;
    }
    uint64_t v10 = *(const void **)(v4 + 264);
    if (v10)
    {
      CFRelease(v10);
      *(void *)(v4 + 264) = 0;
    }
    uint64_t result = segPumpFetchOrDispatchMediaSegment(a1, a2, v4, v7, 0, 0, 0);
    if (result) {
      return result;
    }
    uint64_t v12 = v17;
    *(void *)(*(void *)(v4 + 696) + 288) = v17;
    ++*(void *)(a2 + 8872);
    if (HIBYTE(v18))
    {
      uint64_t result = segPumpReadMediaFile(a1, v4, v7, 1, 0, 0, *(void *)(v4 + 768));
      if (result) {
        return result;
      }
      BOOL v5 = 0;
      *(void *)(**(void **)(v4 + 768) + 288) = v12;
    }
  }
  if (*(void *)(v4 + 248)
    || !FigMediaSegmentSpecifierGetContentKeySpecifier((uint64_t)v7)
    || (uint64_t ContentKeySpecifier = (const void *)FigMediaSegmentSpecifierGetContentKeySpecifier((uint64_t)v7),
        !segPumpDoesCryptKeyRequireFetch(ContentKeySpecifier)))
  {
    if (v5)
    {
LABEL_15:
      return segPumpDoAllStepAheads(a1, v7);
    }
    return 0;
  }
  double v14 = *(const void **)(v4 + 248);
  CFTypeRef v15 = (const void *)FigMediaSegmentSpecifierGetContentKeySpecifier((uint64_t)v7);
  *(void *)(v4 + 248) = v15;
  if (v15) {
    CFRetain(v15);
  }
  if (v14) {
    CFRelease(v14);
  }
  uint64_t result = segPumpSendCryptKeyRequest(a1, a2, v4, *(void *)(v4 + 248));
  if (result) {
    BOOL v16 = 0;
  }
  else {
    BOOL v16 = v5;
  }
  if (v16) {
    goto LABEL_15;
  }
  return result;
}

const void *segPumpGetMediaEntryForTimeFromEnd(uint64_t a1, int a2, void *a3, double a4)
{
  if (FigMediaPlaylistGetPlaylistActiveDurationSecs(a1) < a4)
  {
    FigMediaPlaylistGetMediaSegmentSpecifiers(a1);
    FirstCFNumberRef Value = FigCFArrayGetFirstValue();
LABEL_15:
    CFStringRef ValueAtIndex = (const void *)FirstValue;
    goto LABEL_16;
  }
  if (a4 <= 0.0)
  {
    FigMediaPlaylistGetMediaSegmentSpecifiers(a1);
    FirstCFNumberRef Value = FigCFArrayGetLastValue();
    goto LABEL_15;
  }
  CFIndex v9 = 0;
  double v10 = FigMediaPlaylistGetPlaylistActiveDurationSecs(a1) - a4;
  double v11 = 0.0;
  while (1)
  {
    CFArrayRef MediaSegmentSpecifiers = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(a1);
    if (MediaSegmentSpecifiers) {
      CFArrayRef MediaSegmentSpecifiers = (const __CFArray *)CFArrayGetCount(MediaSegmentSpecifiers);
    }
    if (v9 >= (uint64_t)MediaSegmentSpecifiers) {
      return 0;
    }
    CFArrayRef v13 = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(a1);
    CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v13, v9);
    if (v11 + FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)ValueAtIndex) > v10) {
      break;
    }
    double v11 = v11 + FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)ValueAtIndex);
    ++v9;
  }
  if (a2 && v11 < v10)
  {
    FirstCFNumberRef Value = FigMediaSegmentSpecifierGetNextSegment((uint64_t)ValueAtIndex);
    goto LABEL_15;
  }
LABEL_16:
  if (a3 && ValueAtIndex) {
    *a3 = *((void *)segPumpGetMediaFilePrivateData(ValueAtIndex) + 4);
  }
  return ValueAtIndex;
}

uint64_t segPumpIsMapEntryCached(uint64_t a1, uint64_t a2, const void *a3, char *a4)
{
  MediaFilePrivateData = segPumpGetMediaFilePrivateData(a3);
  if (MediaFilePrivateData[98])
  {
    uint64_t v9 = 0;
    char v10 = 1;
  }
  else
  {
    double v11 = MediaFilePrivateData;
    CFTypeRef cf = 0;
    uint64_t v9 = segPumpCopyMapEntryFromCache(a1, a2, (uint64_t)a3, &cf);
    if (v9) {
      BOOL v12 = 1;
    }
    else {
      BOOL v12 = cf == 0;
    }
    char v10 = !v12;
    if (cf) {
      CFRelease(cf);
    }
    v11[98] = v10;
  }
  *a4 = v10;
  return v9;
}

uint64_t segPumpFetchOrDispatchMediaSegment(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, const void *a5, unsigned char *a6, char *a7)
{
  v78[16] = *MEMORY[0x1E4F143B8];
  MediaFilePrivateData = segPumpGetMediaFilePrivateData(a4);
  char v76 = 0;
  CFTypeRef cf2 = 0;
  int v75 = 0;
  if (!a4 || *(void *)(a3 + 256)) {
    goto LABEL_146;
  }
  if (*(void *)(a3 + 264))
  {
    uint64_t IsMapEntryCached = FigSignalErrorAt();
    goto LABEL_148;
  }
  CFTypeRef v15 = MediaFilePrivateData;
  if (a5) {
    BOOL v16 = a5;
  }
  else {
    BOOL v16 = a4;
  }
  BOOL v73 = v16;
  uint64_t v17 = &dword_1E9351000;
  CFTypeRef cf = a5;
  if (dword_1E9351350 >= 3)
  {
    int v70 = MediaFilePrivateData;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    uint64_t v17 = &dword_1E9351000;
    CFTypeRef v15 = v70;
  }
  if (FigMediaSegmentSpecifierGetMapSegmentSpecifier((uint64_t)a4))
  {
    LOBYTE(v78[0]) = 0;
    uint64_t MapSegmentSpecifier = (const void *)FigMediaSegmentSpecifierGetMapSegmentSpecifier((uint64_t)a4);
    uint64_t IsMapEntryCached = segPumpIsMapEntryCached(a2, a3, MapSegmentSpecifier, (char *)v78);
    if (IsMapEntryCached) {
      goto LABEL_148;
    }
    if (LOBYTE(v78[0]))
    {
      if (FigMediaSegmentSpecifierGetMapSegmentSpecifier((uint64_t)a4) == *(void *)(a3 + 288)) {
        FigMediaSegmentSpecifierGetDiscontinuityDomain((uint64_t)a4);
      }
      int v21 = 0;
    }
    else
    {
      int v21 = 1;
    }
    if (FigMediaSegmentSpecifierGetMapSegmentSpecifier((uint64_t)a4))
    {
      if (FigMediaSegmentSpecifierGetMapSegmentSpecifier((uint64_t)a4) != *(void *)(a3 + 288))
      {
        uint64_t v22 = *(void *)(a3 + 312);
        if (FigMediaSegmentSpecifierGetDiscontinuityDomain((uint64_t)a4) + v22 == *(void *)(a3 + 304)) {
          *(unsigned char *)(a3 + 403) = 1;
        }
      }
    }
  }
  else
  {
    int v21 = 0;
  }
  if (*(unsigned char *)(a3 + 401))
  {
    if (!v15[6] && !*(unsigned char *)(a2 + 8712))
    {
      unsigned int v71 = v15;
      uint64_t v23 = *(void *)(a3 + 376) + 1;
      BOOL v48 = v23 == FigMediaSegmentSpecifierGetMediaSequence((uint64_t)a4);
      CFTypeRef v15 = v71;
      if (!v48)
      {
        *(unsigned char *)(a3 + 403) = 1;
        if (dword_1E9351350)
        {
          BOOL v68 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          uint64_t v17 = &dword_1E9351000;
          CFTypeRef v15 = v71;
        }
      }
    }
    segPumpSetStreamDiscontinuityDomain(a2, (void *)a3, (uint64_t)a4);
    *(void *)(a3 + 936) = -1;
    if (v21)
    {
LABEL_31:
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      uint64_t v25 = (const void *)FigMediaSegmentSpecifierGetMapSegmentSpecifier((uint64_t)a4);
      uint64_t v26 = segPumpGetMediaFilePrivateData(a4);
      uint64_t v27 = segPumpGetMediaFilePrivateData(v25);
      if (v25)
      {
        uint64_t v28 = *(void *)(a3 + 776);
        if (v28 >= 1)
        {
          uint64_t v29 = 0;
          while (1)
          {
            uint64_t v30 = *(void *)(*(void *)(a3 + 768) + 8 * v29);
            if (v30)
            {
              if (*(const void **)(v30 + 8) == v25) {
                break;
              }
            }
            if (v28 == ++v29) {
              goto LABEL_37;
            }
          }
          uint64_t Ahead = segPumpAdoptReadAhead(DerivedStorage, a3, v25, 0, v29);
          LOBYTE(v37) = 0;
          goto LABEL_107;
        }
LABEL_37:
        double v31 = *(const void **)(a3 + 256);
        *(void *)(a3 + 256) = v25;
        CFRetain(v25);
        if (!v31) {
          goto LABEL_39;
        }
      }
      else
      {
        double v31 = *(const void **)(a3 + 256);
        *(void *)(a3 + 256) = 0;
        if (!v31) {
          goto LABEL_39;
        }
      }
      CFRelease(v31);
LABEL_39:
      __int16 v32 = *(const void **)(a3 + 264);
      if (v32)
      {
        CFRelease(v32);
        *(void *)(a3 + 264) = 0;
      }
      char v33 = 1;
      *(unsigned char *)(a3 + 404) = 1;
      TimeIndouble Seconds = FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)a4);
      FigMediaSegmentSpecifierSetTimeInSeconds((uint64_t)v25, TimeInSeconds);
      v27[4] = v26[4];
      v27[6] = 0;
      v27[7] = 0;
      uint64_t MediaFile = segPumpReadMediaFile(a1, a3, v25, 0, 0, 0, 0);
      goto LABEL_42;
    }
  }
  else
  {
    *(void *)(a3 + 376) = FigMediaSegmentSpecifierGetMediaSequence((uint64_t)a4) - 1;
    if (v21)
    {
      segPumpSetStreamDiscontinuityDomain(a2, (void *)a3, (uint64_t)a4);
      *(void *)(a3 + 936) = -1;
      goto LABEL_31;
    }
    *(unsigned char *)(a3 + 401) = 1;
    segPumpSetStreamDiscontinuityDomain(a2, (void *)a3, (uint64_t)a4);
    *(void *)(a3 + 936) = -1;
  }
  char v33 = (char)cf;
  if (*(unsigned char *)(a3 + 869))
  {
    if (!cf) {
      goto LABEL_108;
    }
    FigMediaSegmentSpecifierGetPartialSegments((uint64_t)a4);
    if ((CFTypeRef)FigCFArrayGetFirstValue() == cf) {
      goto LABEL_146;
    }
  }
  if (*(void *)(a2 + 8416) == *(void *)a3) {
    *(unsigned char *)(a2 + 8007) = 0;
  }
  if (*(void *)(a2 + 296))
  {
    uint64_t IsMapEntryCached = segPumpEnsureCacheForStreamPossiblyEndingStream(a1, a3);
    if (IsMapEntryCached) {
      goto LABEL_148;
    }
    if (*(unsigned char *)(a3 + 1136)) {
      goto LABEL_146;
    }
  }
  uint64_t v38 = *(void *)(a3 + 776);
  uint64_t v72 = v15;
  if (cf)
  {
    uint64_t v39 = v73;
    if (v38 >= 1)
    {
      uint64_t v40 = 0;
      do
      {
        uint64_t v41 = *(void *)(*(void *)(a3 + 768) + 8 * v40);
        if (v41)
        {
          if (*(CFTypeRef *)(v41 + 8) == cf) {
            goto LABEL_81;
          }
        }
      }
      while (v38 != ++v40);
    }
  }
  else
  {
    uint64_t v39 = v73;
    if (v38 >= 1)
    {
      uint64_t v40 = 0;
      while (1)
      {
        uint64_t v42 = *(void *)(*(void *)(a3 + 768) + 8 * v40);
        if (v42)
        {
          if (*(const void **)(v42 + 8) == a4) {
            break;
          }
        }
        if (v38 == ++v40) {
          goto LABEL_64;
        }
      }
LABEL_81:
      uint64_t v45 = a1;
      uint64_t IsMapEntryCached = segPumpAdoptReadAhead(a2, a3, a4, cf, v40);
      if (!IsMapEntryCached)
      {
        uint64_t v46 = 0;
        BOOL v73 = 0;
        char v33 = 1;
        goto LABEL_83;
      }
      goto LABEL_148;
    }
  }
LABEL_64:
  if (!*(void *)(a2 + 296)
    || !*(void *)(a3 + 64)
    || !segPumpSeeIfMediaFileIsInCache(a2, a3, a4, &v75, &v76))
  {
    uint64_t v45 = a1;
    uint64_t v47 = *(const void **)(*(void *)(a3 + 696) + 8);
    if (v47) {
      BOOL v48 = v47 == v39;
    }
    else {
      BOOL v48 = 1;
    }
    if (!v48) {
      segPumpCancelMediaFileReadAndResetData(a2, a3, 1, 0);
    }
    char v33 = 0;
    uint64_t v46 = 0;
    BOOL v49 = 1;
    goto LABEL_80;
  }
  if (cf)
  {
LABEL_146:
    LOBYTE(v37) = 0;
    char v33 = 0;
    goto LABEL_109;
  }
  if (!FigMediaSegmentSpecifierGetContentKeySpecifier((uint64_t)a4)) {
    goto LABEL_71;
  }
  v78[0] = 0;
  uint64_t v77 = 0;
  uint64_t ContentKeySpecifier = (const void *)FigMediaSegmentSpecifierGetContentKeySpecifier((uint64_t)a4);
  uint64_t IsMapEntryCached = segPumpGetCryptKeyCommonData(ContentKeySpecifier, v78, &v77);
  if (IsMapEntryCached)
  {
LABEL_148:
    uint64_t Ahead = IsMapEntryCached;
    goto LABEL_145;
  }
  uint64_t v44 = v77;
  if (!*(unsigned char *)(v77 + 144))
  {
    CFDataRef v61 = *(const void **)(a3 + 256);
    if (v61)
    {
      CFRelease(v61);
      *(void *)(a3 + 256) = 0;
      uint64_t v44 = v77;
    }
    if (*(unsigned char *)(v44 + 145)
      || (uint64_t v65 = *(void *)(a3 + 248), v65 == FigMediaSegmentSpecifierGetContentKeySpecifier((uint64_t)a4)))
    {
      uint64_t Ahead = 0;
    }
    else
    {
      segPumpCancelCryptReadAndResetData(a2, a3);
      uint64_t v66 = *(const void **)(a3 + 248);
      uint64_t v67 = (const void *)FigMediaSegmentSpecifierGetContentKeySpecifier((uint64_t)a4);
      *(void *)(a3 + 248) = v67;
      if (v67) {
        CFRetain(v67);
      }
      if (v66) {
        CFRelease(v66);
      }
      uint64_t Ahead = segPumpSendCryptKeyRequest(a1, a2, a3, *(void *)(a3 + 248));
      if (Ahead == -15626)
      {
        uint64_t Ahead = 4294951670;
        goto LABEL_145;
      }
    }
    if (*(unsigned char *)(a2 + 322))
    {
LABEL_145:
      LOBYTE(v37) = 0;
      char v33 = 0;
      goto LABEL_110;
    }
  }
LABEL_71:
  v15[13] = v75;
  uint64_t IsMapEntryCached = segPumpSetMediaFilePumpTimeOffsetsArray(a2, a3, a4);
  if (IsMapEntryCached) {
    goto LABEL_148;
  }
  if (!v76)
  {
    v78[0] = 0;
    int v59 = *(const void **)(*(void *)(a3 + 696) + 8);
    if (v59 == a4)
    {
      size_t v60 = 0;
    }
    else
    {
      size_t v60 = a4;
      if (v59)
      {
        segPumpCancelMediaFileReadAndResetData(a2, a3, 1, 0);
        size_t v60 = a4;
      }
    }
    uint64_t v45 = a1;
    FigStreamingCacheMediaSegmentGetLength(*(void *)(a2 + 296), *(void *)(a3 + 64), v75, 0, v78);
    if (v78[0])
    {
      uint64_t v62 = v72[7];
      BOOL v49 = v78[0] == v62;
      if (v78[0] == v62) {
        uint64_t v46 = 0;
      }
      else {
        uint64_t v46 = (uint64_t)a4;
      }
    }
    else
    {
      uint64_t v46 = 0;
      BOOL v49 = 1;
    }
    BOOL v73 = v60;
    char v33 = 0;
LABEL_80:
    *(unsigned char *)(a3 + 404) = v49;
    goto LABEL_83;
  }
  uint64_t v45 = a1;
  char v33 = 0;
  BOOL v73 = 0;
  uint64_t v46 = (uint64_t)a4;
LABEL_83:
  BOOL v50 = *(const void **)(a3 + 256);
  *(void *)(a3 + 256) = a4;
  CFRetain(a4);
  if (v50) {
    CFRelease(v50);
  }
  uint64_t v51 = *(const void **)(a3 + 264);
  *(void *)(a3 + 264) = cf;
  if (cf) {
    CFRetain(cf);
  }
  if (v51) {
    CFRelease(v51);
  }
  if (!v73) {
    goto LABEL_99;
  }
  if (FigMediaSegmentSpecifierIsMarkedAsGap((uint64_t)v73))
  {
    uint64_t MediaFile = segPumpHandleMediaFileNetworkError(v45, (void *)a3, 0, (uint64_t)v73, 4294951877);
    if (MediaFile) {
      goto LABEL_42;
    }
    int v52 = v72;
    if (*(void *)(a2 + 8144) || !*(void *)(a2 + 8096))
    {
      uint64_t MediaSequence = FigMediaSegmentSpecifierGetMediaSequence((uint64_t)v73);
      uint64_t FragmentNumber = segPumpGetFragmentNumber((uint64_t)a4, cf);
      uint64_t MediaFile = segPumpDispatchAsyncMediaDelivery(a2, a3, MediaSequence, FragmentNumber, 0, (uint64_t)segPumpDeliverGapSegment);
      if (MediaFile) {
        goto LABEL_42;
      }
    }
    char v33 = 1;
    if (!v46) {
      goto LABEL_108;
    }
LABEL_103:
    v52[14] = 0;
    uint64_t v55 = FigMediaSegmentSpecifierGetMediaSequence(v46);
    uint64_t MediaFile = segPumpDispatchAsyncMediaDelivery(a2, a3, v55, -1, 0, (uint64_t)segPumpDeliverFromCache);
    if (!MediaFile)
    {
      int v37 = v17[212];
      if (!v37)
      {
        uint64_t Ahead = 0;
LABEL_107:
        char v33 = 1;
        goto LABEL_110;
      }
      uint64_t v56 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT);
      char v33 = 1;
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      goto LABEL_108;
    }
LABEL_42:
    uint64_t Ahead = MediaFile;
    LOBYTE(v37) = 0;
    goto LABEL_110;
  }
  uint64_t MediaFile = segPumpCopyAndCreateNetworkURLFromPumpCache(a2, a3, &cf2);
  if (MediaFile) {
    goto LABEL_42;
  }
  if (FigCFHTTPCompareURLs(*(const void **)(a3 + 24), cf2))
  {
    uint64_t MediaFile = segPumpReadMediaFile(v45, a3, v73, 0, 0, 0, 0);
    if (MediaFile) {
      goto LABEL_42;
    }
    char v33 = 1;
LABEL_99:
    int v52 = v72;
    if (v46) {
      goto LABEL_103;
    }
LABEL_108:
    LOBYTE(v37) = 0;
LABEL_109:
    uint64_t Ahead = 0;
    goto LABEL_110;
  }
  if (v17[212])
  {
    size_t v58 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  *(void *)(a3 + 136) = *(void *)(a3 + 376);
  segPumpStopStream(a2, a3, 1);
  unsigned int v63 = *(const void **)(a3 + 256);
  if (v63)
  {
    CFRelease(v63);
    *(void *)(a3 + 256) = 0;
  }
  uint64_t v64 = *(const void **)(a3 + 264);
  if (v64)
  {
    CFRelease(v64);
    *(void *)(a3 + 264) = 0;
  }
  uint64_t Ahead = segPumpSendIndexFileRequest(v45, a2, a3);
  LOBYTE(v37) = 1;
LABEL_110:
  if (a7) {
    *a7 = v33;
  }
  if (a6) {
    *a6 = v37;
  }
  if (cf2) {
    CFRelease(cf2);
  }
  return Ahead;
}

BOOL segPumpDoesCryptKeyRequireFetch(const void *a1)
{
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  return !segPumpGetCryptKeyCommonData(a1, &v3, &v2) && !*(unsigned char *)(v2 + 144) && *(unsigned char *)(v2 + 145) == 0;
}

void segPumpDeliverGapSegment(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v27 = 0;
  CFTypeRef cf = 0;
  uint64_t v11 = segPumpLockAndCopyPumpFromRetainProxy(a1, &cf, &v27);
  if (v11) {
    goto LABEL_34;
  }
  uint64_t v12 = a2[7];
  if (v12)
  {
    MediaEntryForuint64_t MediaSequence = segPumpGetMediaEntryForMediaSequence(v12, a5);
    if (MediaEntryForMediaSequence)
    {
      double v14 = MediaEntryForMediaSequence;
      if (a6 < 0) {
        goto LABEL_13;
      }
      for (CFIndex i = 0; ; ++i)
      {
        CFArrayRef PartialSegments = (const __CFArray *)FigMediaSegmentSpecifierGetPartialSegments((uint64_t)v14);
        if (PartialSegments) {
          CFArrayRef PartialSegments = (const __CFArray *)CFArrayGetCount(PartialSegments);
        }
        if (i >= (uint64_t)PartialSegments) {
          break;
        }
        CFArrayRef v17 = (const __CFArray *)FigMediaSegmentSpecifierGetPartialSegments((uint64_t)v14);
        CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v17, i);
        if (a6 == i)
        {
          double v14 = ValueAtIndex;
          break;
        }
      }
      if (v14)
      {
LABEL_13:
        char v19 = (const void *)a2[37];
        if (v19)
        {
          CFRelease(v19);
          a2[37] = 0;
        }
        uint64_t v20 = a2[110];
        if (FigMediaSegmentSpecifierGetType((uint64_t)v14))
        {
          uint64_t Media = FigSignalErrorAt();
          goto LABEL_29;
        }
        if (((const void *)a2[32] == v14 || (const void *)a2[33] == v14)
          && (!*(void *)(v27 + 8096) || *(void *)(v27 + 8144)))
        {
          if (a2[145] == a3)
          {
            uint64_t v11 = segPumpSendMediaCallback((uint64_t)cf, v27, (uint64_t)a2, v14, 0, 0, 0, 2, 0x800u);
            if (!v11)
            {
              if (FigRetainProxyIsInvalidated()
                || v20 != a2[110]
                || (const void *)a2[32] != v14 && (const void *)a2[33] != v14)
              {
                goto LABEL_31;
              }
              int v21 = (const void *)a2[36];
              if (v21)
              {
                CFRelease(v21);
                a2[36] = 0;
                a2[40] = -1;
              }
              segPumpMarkMediaFileAsDelivered(a2, v14);
              uint64_t v23 = v27;
              CFTypeRef v22 = cf;
              BOOL v24 = FigMediaSegmentSpecifierGetType((uint64_t)v14) == 1;
              uint64_t Media = segPumpMoveToNextMedia((uint64_t)v22, v23, (uint64_t)a2, v24);
LABEL_29:
              uint64_t v26 = Media;
              if (!Media) {
                goto LABEL_31;
              }
              goto LABEL_30;
            }
LABEL_34:
            uint64_t v26 = v11;
LABEL_30:
            segPumpSendEndCallbackForAllActiveStreamsWithOSStatus(a1, v26);
            goto LABEL_31;
          }
          FigSignalErrorAt();
        }
      }
    }
  }
LABEL_31:
  segPumpUnlockAndSendAllPendingNotifications();
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t segPumpCopyAndCreateNetworkURLFromPumpCache(uint64_t a1, uint64_t a2, void *a3)
{
  CFStringRef URLString = 0;
  uint64_t v5 = *(void *)(a1 + 296);
  if (!v5) {
    goto LABEL_10;
  }
  if (*(unsigned char *)(a1 + 8712))
  {
    if (*(unsigned char *)(a1 + 7996) && *(void *)(a1 + 384) == a2) {
      goto LABEL_7;
    }
LABEL_10:
    uint64_t v8 = *(const void **)(a2 + 24);
    if (v8) {
      uint64_t v8 = CFRetain(v8);
    }
    goto LABEL_12;
  }
  if (!*(unsigned char *)(a1 + 7997)) {
    goto LABEL_10;
  }
LABEL_7:
  if (!*(void *)(a2 + 64)) {
    goto LABEL_10;
  }
  uint64_t v6 = FigStreamingCacheMediaStreamCopyNetworkURL(v5, *(void *)(a2 + 64), &URLString);
  if (!v6)
  {
    CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    uint64_t v8 = CFURLCreateWithString(AllocatorForMedia, URLString, 0);
LABEL_12:
    uint64_t v9 = 0;
    *a3 = v8;
    goto LABEL_13;
  }
  uint64_t v9 = v6;
LABEL_13:
  if (URLString) {
    CFRelease(URLString);
  }
  return v9;
}

void segPumpDeliverFromCache(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v40 = 0;
  CFTypeRef cf = 0;
  CMBlockBufferRef theBuffer = 0;
  __int16 v38 = 0;
  unint64_t v37 = 0;
  uint64_t v10 = segPumpLockAndCopyPumpFromRetainProxy(a1, &cf, &v40);
  if (v10) {
    goto LABEL_53;
  }
  if (!*(void *)(v40 + 296)) {
    goto LABEL_47;
  }
  uint64_t v11 = *(void *)(a2 + 56);
  if (!v11) {
    goto LABEL_17;
  }
  CFArrayRef MediaSegmentSpecifiers = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(v11);
  if (!MediaSegmentSpecifiers || CFArrayGetCount(MediaSegmentSpecifiers) <= 0) {
    goto LABEL_17;
  }
  uint64_t v13 = *(void *)(a2 + 56);
  if (!v13) {
    goto LABEL_47;
  }
  MediaEntryForuint64_t MediaSequence = segPumpGetMediaEntryForMediaSequence(v13, a5);
  if (!MediaEntryForMediaSequence) {
    goto LABEL_47;
  }
  CFTypeRef v15 = MediaEntryForMediaSequence;
  MediaFilePrivateData = segPumpGetMediaFilePrivateData(MediaEntryForMediaSequence);
  if (v15 != *(const void **)(a2 + 256)) {
    goto LABEL_47;
  }
  CFArrayRef v17 = MediaFilePrivateData;
  uint64_t v18 = v40;
  if (*(void *)(v40 + 8096))
  {
    if (!*(void *)(v40 + 8144)) {
      goto LABEL_47;
    }
  }
  if (*(void *)(a2 + 1160) != a3 || *(void *)(a2 + 880) != a4)
  {
LABEL_17:
    FigSignalErrorAt();
    goto LABEL_47;
  }
  size_t v19 = *((void *)v17 + 14);
  if (!v19)
  {
    segPumpGetRequestedByteRangeForMediaFileHelper(v40, (void *)a2, v15, v15, 1u, 0, 0, &v37);
    *((void *)v17 + 8) = v37;
    a4 = *(void *)(a2 + 880);
    uint64_t v18 = v40;
    size_t v19 = *((void *)v17 + 14);
  }
  uint64_t v20 = FigStreamingCacheMediaSegmentCopyBytes(*(void *)(v18 + 296), *(void *)(a2 + 64), *((CMBlockBufferRef **)v17 + 13), v19, 0x20000uLL, (BOOL *)&v38 + 1, &theBuffer);
  if (v20)
  {
    uint64_t MediaForSingleStream = segPumpHandleMediaFileNetworkError((uint64_t)cf, (void *)a2, 0, (uint64_t)v15, v20);
    goto LABEL_45;
  }
  uint64_t v22 = v40;
  *(_DWORD *)(v40 + 8464) = 100;
  segPumpUpdateNetworkCostHasHighSpeedHighPower(v22);
  if (HIBYTE(v38))
  {
    char v23 = 0;
  }
  else
  {
    FigStreamingCacheMediaSegmentIsComplete(*(void *)(v40 + 296), *(void *)(a2 + 64), *((unsigned char **)v17 + 13), &v38);
    char v23 = (_BYTE)v38 != 0;
  }
  size_t DataLength = CMBlockBufferGetDataLength(theBuffer);
  *((void *)v17 + 14) += DataLength;
  uint64_t v25 = v40;
  uint64_t v26 = *(void *)(v40 + 9048);
  if (v26)
  {
    uint64_t v27 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v27) {
      uint64_t v28 = v27;
    }
    else {
      uint64_t v28 = 0;
    }
    uint64_t v29 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 96);
    if (v29) {
      v29(v26, 0x1EE582B98, 0x1EE583A58, 100);
    }
    uint64_t v30 = *(void *)(v25 + 9048);
    if (v30)
    {
      uint64_t v31 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v32 = v31 ? v31 : 0;
      char v33 = *(void (**)(uint64_t, uint64_t, uint64_t, size_t))(v32 + 32);
      if (v33) {
        v33(v30, 0x1EE582B98, 0x1EE583C98, DataLength);
      }
    }
  }
  segPumpRTCReportingSetCurrentAlternateIndexAndBitRate(v25);
  if (FigMediaSegmentSpecifierGetContentKeySpecifier(*(void *)(a2 + 256)) && *(unsigned char *)(v40 + 322))
  {
    if (segPumpMediaFileHandleCryptData((uint64_t)cf, v40, a2, *(const void **)(a2 + 256), theBuffer, 0, DataLength, v23))goto LABEL_47; {
    goto LABEL_38;
    }
  }
  uint64_t v10 = segPumpSendMediaCallback((uint64_t)cf, v40, a2, v15, theBuffer, 0, DataLength, v23, 0x400u);
  if (v10)
  {
LABEL_53:
    uint64_t v36 = v10;
LABEL_46:
    segPumpSendEndCallbackForAllActiveStreamsWithOSStatus(a1, v36);
    goto LABEL_47;
  }
LABEL_38:
  if (!FigRetainProxyIsInvalidated() && a4 == *(void *)(a2 + 880) && *(const void **)(a2 + 256) == v15)
  {
    if (HIBYTE(v38))
    {
      uint64_t v34 = v40;
      uint64_t MediaSequence = FigMediaSegmentSpecifierGetMediaSequence((uint64_t)v15);
      uint64_t MediaForSingleStream = segPumpDispatchAsyncMediaDelivery(v34, a2, MediaSequence, -1, 0, (uint64_t)segPumpDeliverFromCache);
    }
    else
    {
      if (v15 == *(const void **)(*(void *)(a2 + 696) + 8))
      {
        *(unsigned char *)(a2 + 404) = 1;
        goto LABEL_47;
      }
      segPumpMarkMediaFileAsDelivered((uint64_t *)a2, v15);
      *((void *)v17 + 13) = 0;
      uint64_t MediaForSingleStream = segPumpDeliverNextMediaForSingleStream(cf, v40, a2);
    }
LABEL_45:
    uint64_t v36 = MediaForSingleStream;
    if (!MediaForSingleStream) {
      goto LABEL_47;
    }
    goto LABEL_46;
  }
LABEL_47:
  FigRetainProxyUnlockMutex();
  if (theBuffer) {
    CFRelease(theBuffer);
  }
  if (cf) {
    CFRelease(cf);
  }
}

const void *segPumpChooseNextStep(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, BOOL *a7, double *a8, double a9, double a10, unsigned char *a11, unsigned char *a12, unsigned char *a13, uint64_t *a14)
{
  uint64_t MediaEntryForTimeFromEnd = a2;
  uint64_t v102 = *MEMORY[0x1E4F143B8];
  uint64_t v19 = *(void *)(a1 + 384);
  int v98 = *(unsigned __int8 *)(v19 + 857);
  uint64_t v20 = (unsigned char *)(a1 + 7996);
  char v100 = 0;
  *a11 = 0;
  *a12 = 0;
  *a13 = 0;
  if (!a2) {
    uint64_t MediaEntryForTimeFromEnd = (uint64_t)segPumpGetMediaEntryForTimeFromEnd(*(void *)(v19 + 56), 0, 0, a9);
  }
  int v21 = segPumpGetMediaEntryForTimeFromEnd(*(void *)(v19 + 56), a9 > a10, 0, a10);
  if (!v21)
  {
    FigMediaPlaylistGetMediaSegmentSpecifiers(*(void *)(v19 + 56));
    if (a9 > a10) {
      LastCFNumberRef Value = FigCFArrayGetLastValue();
    }
    else {
      LastCFNumberRef Value = FigCFArrayGetFirstValue();
    }
    int v21 = (const void *)LastValue;
  }
  unsigned int v90 = v20;
  if (v20[6])
  {
    int v23 = 0;
    BOOL v24 = 0;
  }
  else
  {
    uint64_t v25 = *(void *)(v19 + 56);
    double LiveBoundary = segPumpGetLiveBoundary(a1, v25);
    BOOL v24 = segPumpGetMediaEntryForTimeFromEnd(v25, 0, 0, LiveBoundary);
    if (v24)
    {
      if (MediaEntryForTimeFromEnd)
      {
        unint64_t MediaSequence = FigMediaSegmentSpecifierGetMediaSequence(MediaEntryForTimeFromEnd);
        if (MediaSequence > FigMediaSegmentSpecifierGetMediaSequence((uint64_t)v24)) {
          uint64_t MediaEntryForTimeFromEnd = (uint64_t)v24;
        }
      }
      if (v21)
      {
        unint64_t v28 = FigMediaSegmentSpecifierGetMediaSequence((uint64_t)v21);
        if (v28 > FigMediaSegmentSpecifierGetMediaSequence((uint64_t)v24)) {
          int v21 = v24;
        }
      }
      int v23 = 1;
    }
    else
    {
      int v23 = 0;
    }
  }
  if ((const void *)MediaEntryForTimeFromEnd == v21 && MediaEntryForTimeFromEnd != 0 && v98 == 0)
  {
    if (a9 > a10)
    {
      uint64_t v31 = (uint64_t)v24;
      if (v21 == v24) {
        goto LABEL_32;
      }
      uint64_t NextSegment = FigMediaSegmentSpecifierGetNextSegment((uint64_t)v21);
    }
    else
    {
      uint64_t NextSegment = FigMediaSegmentSpecifierGetPreviousSegment((uint64_t)v21);
    }
    uint64_t v31 = NextSegment;
    goto LABEL_32;
  }
  uint64_t v31 = (uint64_t)v21;
LABEL_32:
  if (v31) {
    int v33 = v23;
  }
  else {
    int v33 = 0;
  }
  if (v33 == 1)
  {
    unint64_t v34 = FigMediaSegmentSpecifierGetMediaSequence(v31);
    unint64_t v35 = FigMediaSegmentSpecifierGetMediaSequence((uint64_t)v24);
    if (a9 > a10 && v34 >= v35 && *((unsigned char *)segPumpGetMediaFilePrivateData(v24) + 73))
    {
      BOOL v36 = 0;
      uint64_t v37 = 0;
      __int16 v38 = 0;
      *a13 = 1;
LABEL_58:
      double v43 = 0.0;
      goto LABEL_128;
    }
  }
  else if (!v31)
  {
    BOOL v36 = 0;
    uint64_t v37 = 0;
    __int16 v38 = 0;
    goto LABEL_58;
  }
  if (!MediaEntryForTimeFromEnd)
  {
    FigMediaPlaylistGetMediaSegmentSpecifiers(*(void *)(v19 + 56));
    uint64_t MediaEntryForTimeFromEnd = FigCFArrayGetLastValue();
  }
  int v39 = a6;
  if (v31 == MediaEntryForTimeFromEnd)
  {
    uint64_t v42 = 1;
    __int16 v38 = (const void *)v31;
  }
  else
  {
    if (a9 > a10)
    {
      uint64_t v41 = FigMediaSegmentSpecifierGetNextSegment(MediaEntryForTimeFromEnd);
      uint64_t PreviousSegment = v31;
      __int16 v38 = (const void *)v41;
      if (!v41)
      {
        FigMediaPlaylistGetMediaSegmentSpecifiers(*(void *)(v19 + 56));
        uint64_t v41 = FigCFArrayGetLastValue();
        uint64_t PreviousSegment = v31;
        __int16 v38 = (const void *)v41;
      }
    }
    else
    {
      uint64_t PreviousSegment = FigMediaSegmentSpecifierGetPreviousSegment(MediaEntryForTimeFromEnd);
      uint64_t v41 = v31;
      __int16 v38 = (const void *)PreviousSegment;
      if (!PreviousSegment)
      {
        FigMediaPlaylistGetMediaSegmentSpecifiers(*(void *)(v19 + 56));
        uint64_t PreviousSegment = FigCFArrayGetFirstValue();
        uint64_t v41 = v31;
        __int16 v38 = (const void *)PreviousSegment;
      }
    }
    uint64_t v42 = 1;
    if (v38 == (const void *)v31)
    {
      __int16 v38 = (const void *)v31;
    }
    else if (v41 && v41 != PreviousSegment)
    {
      uint64_t v42 = 1;
      do
      {
        uint64_t v41 = FigMediaSegmentSpecifierGetNextSegment(v41);
        ++v42;
      }
      while (v41 && v41 != PreviousSegment);
    }
    int v39 = a6;
  }
  float v44 = *(float *)(a1 + 8736);
  if (v44 == 0.0) {
    double v45 = 1.0;
  }
  else {
    double v45 = 1.0 / fabsf(v44);
  }
  unsigned int v89 = a8;
  uint64_t v99 = 0;
  uint64_t v46 = *(void *)(a1 + 8744);
  uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  double v48 = 0.0;
  if ((double)(a3 - UpTimeNanoseconds) / 1000000000.0 >= 0.0) {
    double v49 = (double)(a3 - UpTimeNanoseconds) / 1000000000.0;
  }
  else {
    double v49 = 0.0;
  }
  if (!v38)
  {
    uint64_t v37 = 0;
    BOOL v36 = 0;
    double v43 = 0.0;
    goto LABEL_113;
  }
  BOOL v36 = 0;
  double v50 = v45 * (vabdd_f64(a10, a9) / (double)v46);
  uint64_t v96 = v19;
  uint64_t v51 = 1;
  uint64_t v93 = (const void *)v31;
  while (1)
  {
    if (*(void *)(a1 + 296)
      && *(void *)(v19 + 64)
      && segPumpSeeIfMediaFileIsInCache(a1, v19, v38, &v99, &v100))
    {
      int v52 = 0;
      int v53 = 1;
      double v43 = 0.0;
    }
    else
    {
      uint64_t v54 = FigMediaSegmentSpecifierGetBytesToRead((uint64_t)v38);
      double v43 = segPumpPredictIFrameDownload(a1, v54);
      int v53 = 0;
      int v52 = 1;
    }
    uint64_t v55 = (uint64_t)v38;
    if (a9 <= a10 || (uint64_t v55 = FigMediaSegmentSpecifierGetPreviousSegment((uint64_t)v38)) != 0) {
      TimeIndouble Seconds = FigMediaSegmentSpecifierGetTimeInSeconds(v55);
    }
    else {
      TimeIndouble Seconds = 0.0;
    }
    double v48 = v48 + v45 * TimeInSeconds;
    char v57 = v52 ^ 1;
    if (v39) {
      char v57 = 0;
    }
    if ((v57 & 1) == 0)
    {
      BOOL v58 = v43 < v49 + v48;
      if (v48 < v50) {
        BOOL v58 = 0;
      }
      if (v38 == (const void *)v31 || v58) {
        break;
      }
    }
LABEL_96:
    if (v98)
    {
      if (!v52)
      {
        if (v53)
        {
LABEL_110:
          uint64_t v37 = 0;
LABEL_111:
          *a12 = 1;
          goto LABEL_113;
        }
LABEL_112:
        uint64_t v37 = 0;
        goto LABEL_113;
      }
    }
    else
    {
      char v65 = v53 ^ 1;
      if (v42 - 1 > v51) {
        char v65 = 1;
      }
      if ((v65 & 1) == 0) {
        goto LABEL_110;
      }
    }
    if (a9 > a10) {
      uint64_t v66 = FigMediaSegmentSpecifierGetNextSegment((uint64_t)v38);
    }
    else {
      uint64_t v66 = FigMediaSegmentSpecifierGetPreviousSegment((uint64_t)v38);
    }
    __int16 v38 = (const void *)v66;
    ++v51;
    if (!v66) {
      goto LABEL_112;
    }
  }
  CFURLRef v60 = *(const __CFURL **)(v19 + 16);
  CFURLRef v59 = *(const __CFURL **)(v19 + 24);
  MediaFilePrivateData = segPumpGetMediaFilePrivateData(v38);
  segPumpEnsureMediaSegmentURLs(v38, v60, v59);
  if (!MediaFilePrivateData[2])
  {
    FigSignalErrorAt();
    goto LABEL_143;
  }
  uint64_t v31 = (uint64_t)v93;
  int v39 = a6;
  if (!v36)
  {
    if (!FigMediaSegmentSpecifierGetMapSegmentSpecifier((uint64_t)v38)) {
      goto LABEL_92;
    }
    LOBYTE(v101) = 0;
    uint64_t MapSegmentSpecifier = (const void *)FigMediaSegmentSpecifierGetMapSegmentSpecifier((uint64_t)v38);
    if (!segPumpIsMapEntryCached(a1, v96, MapSegmentSpecifier, (char *)&v101))
    {
      if (!(_BYTE)v101)
      {
        BOOL v36 = 1;
        goto LABEL_86;
      }
LABEL_92:
      BOOL v36 = 0;
      goto LABEL_93;
    }
    BOOL v36 = 0;
LABEL_143:
    uint64_t v37 = 0;
    goto LABEL_127;
  }
LABEL_86:
  if (!a4)
  {
    uint64_t v37 = 0;
    __int16 v38 = 0;
    BOOL v36 = 1;
    goto LABEL_127;
  }
  uint64_t v62 = FigMediaSegmentSpecifierGetMapSegmentSpecifier((uint64_t)v38);
  uint64_t v63 = FigMediaSegmentSpecifierGetBytesToRead(v62);
  double v43 = v43 + segPumpPredictIFrameDownload(a1, v63);
LABEL_93:
  if (v38 != v93 && v43 >= v49 + v48)
  {
    uint64_t v19 = v96;
    goto LABEL_96;
  }
  uint64_t v37 = (uint64_t)((double)a3 + v48 * 1000000000.0);
  if (v53)
  {
    uint64_t v19 = v96;
    goto LABEL_111;
  }
  if (a5) {
    char v73 = v52;
  }
  else {
    char v73 = 0;
  }
  if ((v73 & 1) == 0) {
    goto LABEL_141;
  }
  uint64_t v19 = v96;
  if (!**(void **)(v96 + 768)) {
    goto LABEL_113;
  }
  uint64_t v74 = *(void *)(v96 + 696);
  if (v74 && (uint64_t v75 = *(void *)(v74 + 8)) != 0 && FigMediaSegmentSpecifierGetType(v75) == 1)
  {
LABEL_141:
    uint64_t v19 = v96;
  }
  else
  {
    float v76 = *(float *)(a1 + 8736);
    if (v76 == 0.0) {
      double v77 = 1.0;
    }
    else {
      double v77 = 1.0 / v76;
    }
    uint64_t v78 = (double *)segPumpGetMediaFilePrivateData(v38);
    if (*(uint64_t *)(v96 + 776) > 0)
    {
      uint64_t v79 = 0;
      double v80 = v78[4];
      uint64_t v19 = v96;
      while (1)
      {
        uint64_t v81 = **(void **)(v19 + 768);
        if (!v81) {
          goto LABEL_167;
        }
        char v82 = *(const void **)(v81 + 8);
        if (v82)
        {
          uint64_t v83 = (double *)segPumpGetMediaFilePrivateData(*(const void **)(v81 + 8));
          if (v38 == v82)
          {
            int v87 = v38;
            uint64_t v37 = (uint64_t)((double)a3 + v48 * 1000000000.0);
LABEL_171:
            uint64_t v19 = v96;
            segPumpAdoptReadAhead(a1, v96, v87, 0, 0);
            *a11 = 1;
            goto LABEL_113;
          }
          double v84 = v83[4];
          if (v84 <= v80) {
            uint64_t v85 = FigMediaSegmentSpecifierGetPreviousSegment((uint64_t)v38);
          }
          else {
            uint64_t v85 = FigMediaSegmentSpecifierGetNextSegment((uint64_t)v38);
          }
          int v87 = (const void *)v85;
          if (v85 == *(void *)(**(void **)(v96 + 768) + 8))
          {
            uint64_t v37 = (uint64_t)((double)(uint64_t)((double)a3 + v48 * 1000000000.0) + v77 * (v84 - v80) * 1000000000.0);
            __int16 v38 = (const void *)v85;
            goto LABEL_171;
          }
          BOOL v88 = v84 > v80;
          if (a9 <= a10) {
            BOOL v88 = v84 < v80;
          }
          uint64_t v19 = v96;
          if (v88) {
            goto LABEL_167;
          }
          segPumpStreamCancelReadAheadAndResetDataAtIndex(a1, v96, 0);
          ++*(void *)(a1 + 8856);
        }
        else
        {
          if (dword_1E9351350)
          {
            os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          uint64_t v19 = v96;
          segPumpStreamCancelReadAheadAndResetDataAtIndex(a1, v96, 0);
        }
        if (++v79 >= *(void *)(v19 + 776)) {
          goto LABEL_167;
        }
      }
    }
    uint64_t v19 = v96;
LABEL_167:
    uint64_t v37 = (uint64_t)((double)a3 + v48 * 1000000000.0);
  }
LABEL_113:
  if (v36 && v38)
  {
    if (FigMediaSegmentSpecifierGetMapSegmentSpecifier((uint64_t)v38))
    {
      LOBYTE(v101) = 0;
      uint64_t v67 = (const void *)FigMediaSegmentSpecifierGetMapSegmentSpecifier((uint64_t)v38);
      if (segPumpIsMapEntryCached(a1, v19, v67, (char *)&v101))
      {
        BOOL v36 = 0;
        goto LABEL_127;
      }
      BOOL v36 = (_BYTE)v101 == 0;
    }
    else
    {
      BOOL v36 = 0;
    }
  }
  if (*(void *)(a1 + 296))
  {
    unsigned int v68 = 1;
    if (*v90)
    {
      if (v90[1]) {
        unsigned int v68 = 1;
      }
      else {
        unsigned int v68 = 2;
      }
    }
  }
  else
  {
    unsigned int v68 = 1;
  }
  if (v68 <= dword_1E9351350)
  {
    unsigned int v71 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT);
    a8 = v89;
    int v70 = a7;
    CFURLRef v69 = a14;
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  else
  {
LABEL_127:
    a8 = v89;
LABEL_128:
    int v70 = a7;
    CFURLRef v69 = a14;
  }
  BOOL *v70 = v36;
  *a8 = v43;
  uint64_t *v69 = v37;
  return v38;
}

double segPumpGetLiveBoundary(uint64_t a1, uint64_t a2)
{
  double MinimumPrebufferReservation = segPumpGetMinimumPrebufferReservation(a1, a2);
  double v4 = *(double *)(a1 + 7960);
  double result = MinimumPrebufferReservation + v4;
  if (*(int *)(a1 + 7944) >= 2)
  {
    LODWORD(v4) = *(_DWORD *)(a1 + 8);
    double v6 = (double)*(unint64_t *)&v4;
    if (result > v6) {
      double result = result - v6;
    }
  }
  double v7 = *(double *)(a1 + 7952);
  if (v7 > 0.0 && (v7 > result || *(unsigned char *)(a1 + 328)))
  {
    double v8 = *(double *)(a1 + 16);
    if (v8 <= 0.0)
    {
      LODWORD(v8) = *(_DWORD *)(a1 + 8);
      double v8 = (double)*(unint64_t *)&v8;
    }
    return v7 - v8;
  }
  return result;
}

double segPumpPredictIFrameDownload(uint64_t a1, uint64_t a2)
{
  memset(&v18[8], 0, 216);
  segPumpMakeNetworkPredictionInput(a1, (uint64_t)v18);
  uint64_t v17 = 0;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v12 = 0u;
  *(void *)uint64_t v18 = *(void *)(a1 + 112);
  *(void *)&v18[32] = a2;
  *(void *)&v18[168] |= 8uLL;
  uint64_t v4 = *(void *)(a1 + 96);
  uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  double v8 = *(unsigned int (**)(uint64_t, uint64_t, _OWORD *, long long *))(v7 + 8);
  double v9 = 0.0;
  if (v8)
  {
    v19[10] = *(_OWORD *)&v18[160];
    v19[11] = *(_OWORD *)&v18[176];
    v19[12] = *(_OWORD *)&v18[192];
    v19[13] = *(_OWORD *)&v18[208];
    v19[6] = *(_OWORD *)&v18[96];
    v19[7] = *(_OWORD *)&v18[112];
    v19[8] = *(_OWORD *)&v18[128];
    v19[9] = *(_OWORD *)&v18[144];
    int v19[2] = *(_OWORD *)&v18[32];
    v19[3] = *(_OWORD *)&v18[48];
    v19[4] = *(_OWORD *)&v18[64];
    v19[5] = *(_OWORD *)&v18[80];
    v19[0] = *(_OWORD *)v18;
    v19[1] = *(_OWORD *)&v18[16];
    if (!v8(v4, UpTimeNanoseconds, v19, &v12))
    {
      double v10 = *((double *)&v13 + 1) * (double)(uint64_t)v12;
      if (v10 > 0.0) {
        return (double)(unint64_t)(8 * a2) / v10;
      }
    }
  }
  return v9;
}

void segPumpRTCReportingUpdateCryptorErrorKeys(uint64_t a1, CFErrorRef err)
{
  if (err)
  {
    CFIndex valuePtr = CFErrorGetCode(err);
    CFNumberRef v4 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberLongType, &valuePtr);
    uint64_t v5 = *(void *)(a1 + 9048);
    if (!v5)
    {
      CFErrorGetDomain(err);
      if (!v4) {
        return;
      }
      goto LABEL_15;
    }
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    double v8 = *(void (**)(uint64_t, uint64_t, uint64_t, CFNumberRef, uint64_t))(v7 + 120);
    if (v8) {
      v8(v5, 0x1EE582CB8, 0x1EE5624B8, v4, 100);
    }
    uint64_t v9 = *(void *)(a1 + 9048);
    CFErrorDomain Domain = CFErrorGetDomain(err);
    if (v9)
    {
      CFErrorDomain v11 = Domain;
      uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v12) {
        uint64_t v13 = v12;
      }
      else {
        uint64_t v13 = 0;
      }
      long long v14 = *(void (**)(uint64_t, uint64_t, uint64_t, CFErrorDomain, uint64_t))(v13 + 120);
      if (v14) {
        v14(v9, 0x1EE582CB8, 0x1EE5624D8, v11, 100);
      }
    }
    if (v4) {
LABEL_15:
    }
      CFRelease(v4);
  }
}

uint64_t segPumpPrepareCryptorForKeyLoading(uint64_t a1, uint64_t a2, int a3, void *a4, unsigned __int8 *a5)
{
  unsigned __int8 v16 = 0;
  uint64_t v15 = 0;
  if (a3) {
    uint64_t v8 = 3;
  }
  else {
    uint64_t v8 = 1;
  }
  uint64_t v9 = *(void **)(CMBaseObjectGetVTable() + 16);
  if (v9) {
    double v10 = v9;
  }
  else {
    double v10 = 0;
  }
  if (*v10 < 6uLL) {
    return 4294954514;
  }
  CFErrorDomain v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, unsigned __int8 *, uint64_t *))v10[20];
  if (!v11) {
    return 4294954514;
  }
  uint64_t result = v11(a1, v8, 2, &v16, &v15);
  if (!result)
  {
    int v13 = v16;
    *a5 = v16;
    *a4 = v15;
    if (a1)
    {
      CMNotificationCenterGetDefaultLocalCenter();
      if (v13)
      {
        FigNotificationCenterRemoveWeakListener();
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterRemoveWeakListener();
        return 0;
      }
      else
      {
        uint64_t result = FigNotificationCenterAddWeakListener();
        if (!result || result == -12724)
        {
          CMNotificationCenterGetDefaultLocalCenter();
          LODWORD(result) = FigNotificationCenterAddWeakListener();
          if (result == -12724 || result == 0) {
            return 0;
          }
          else {
            return result;
          }
        }
      }
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return result;
}

CFIndex CryptKeyRemoveKeyFromPlaylist(uint64_t a1, unsigned char *a2, const void *a3)
{
  CFTypeRef cf = 0;
  segPumpGetCryptKeyCommonData(a3, 0, &cf);
  FigMediaPlaylistRemoveContentKeySpecifier(a2, (uint64_t)a3);
  CFIndex result = (CFIndex)cf;
  if (cf)
  {
    uint64_t v7 = *(void *)(a1 + 8144);
    if (!v7)
    {
      CFIndex result = CFGetRetainCount(cf);
      if (result != 1) {
        return result;
      }
      return FigCFArrayRemoveLastElementOfValue();
    }
    uint64_t v8 = *((void *)cf + 20);
    uint64_t v9 = *(void *)(v7 + 8);
    CFIndex result = CFGetRetainCount(cf);
    if (result == 1 && (v8 == v9 || !*(unsigned char *)(a1 + 8002))) {
      return FigCFArrayRemoveLastElementOfValue();
    }
  }
  return result;
}

void segPumpMediaExpiryTimerCallback(uint64_t a1, uint64_t a2)
{
  *(void *)uint64_t v27 = 0;
  CFTypeRef cf = 0;
  if (segPumpLockAndCopyPumpFromRetainProxy(a2, &cf, (uint64_t *)v27)) {
    goto LABEL_53;
  }
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  char v5 = 0;
  int v26 = 0;
  int v6 = 0;
  v2.n128_u64[0] = 0x41FE133800000000;
  do
  {
    uint64_t v7 = *(void *)(*(void *)v27 + 16 * v3 + 384);
    uint64_t v8 = *(void *)(v7 + 56);
    if (!v8) {
      goto LABEL_43;
    }
    FigMediaPlaylistGetMediaSegmentSpecifiers(v8);
    LastCFNumberRef Value = (const void *)FigCFArrayGetLastValue();
    uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
    double v11 = *(double *)(v7 + 88);
    int v6 = 0;
    if (!LastValue)
    {
LABEL_37:
      if (!v3) {
        goto LABEL_38;
      }
      goto LABEL_40;
    }
    while (1)
    {
      uint64_t PreviousSegment = FigMediaSegmentSpecifierGetPreviousSegment((uint64_t)LastValue);
      MediaFilePrivateData = segPumpGetMediaFilePrivateData(LastValue);
      if (!MediaFilePrivateData[96]) {
        break;
      }
LABEL_36:
      LastCFNumberRef Value = (const void *)PreviousSegment;
      if (!PreviousSegment) {
        goto LABEL_37;
      }
    }
    long long v14 = MediaFilePrivateData;
    uint64_t v15 = *((void *)MediaFilePrivateData + 11);
    if (UpTimeNanoseconds < v15 && v6 == 0)
    {
      int v6 = 0;
      if (v5) {
        BOOL v18 = v15 < v4;
      }
      else {
        BOOL v18 = 1;
      }
      if (v18)
      {
        char v5 = 1;
        uint64_t v4 = *((void *)MediaFilePrivateData + 11);
      }
      goto LABEL_36;
    }
    if (MediaFilePrivateData[73])
    {
      FigMediaPlaylistGetMediaSegmentSpecifiers(*(void *)(v7 + 56));
      BOOL v17 = LastValue == (const void *)FigCFArrayGetLastValue();
    }
    else
    {
      BOOL v17 = 1;
    }
    int v26 = *(unsigned __int8 *)(*(void *)v27 + 8002);
    v14[96] = 1;
    *(double *)(v7 + 88) = FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)LastValue) + *(double *)(v7 + 88);
    *(double *)(v7 + 96) = *(double *)(v7 + 96) - FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)LastValue);
    CFArrayRef PartialSegments = (const __CFArray *)FigMediaSegmentSpecifierGetPartialSegments((uint64_t)LastValue);
    CFIndex v21 = 0;
    if (PartialSegments)
    {
LABEL_23:
      CFIndex Count = CFArrayGetCount(PartialSegments);
      goto LABEL_25;
    }
    while (1)
    {
      CFIndex Count = 0;
LABEL_25:
      if (v21 >= Count) {
        break;
      }
      CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(PartialSegments, v21);
      *((unsigned char *)segPumpGetMediaFilePrivateData(ValueAtIndex) + 96) = 1;
      ++v21;
      if (PartialSegments) {
        goto LABEL_23;
      }
    }
    if (!*(unsigned char *)(*(void *)v27 + 7995)
      || (*(void *)(*(void *)v27 + 8416) == v3 ? (BOOL v24 = v17) : (BOOL v24 = 0),
          !v24 || *(unsigned char *)(v7 + 400) || !*(void *)(v7 + 424)))
    {
      int v6 = 1;
      goto LABEL_36;
    }
    segPumpStopPlaylistReadsAndResetAllData(*(uint64_t *)v27);
    if (*(void *)(v7 + 504) && *(unsigned char *)(v7 + 867)) {
      segPumpSendEndCallbackForAllActiveStreamsWithOSStatus(a2, 4294954412);
    }
    char v5 = 0;
    int v6 = 1;
    if (!v3)
    {
LABEL_38:
      if (*(unsigned char *)(*(void *)v27 + 8713))
      {
        __n128 v2 = (__n128)vaddq_f64(*(float64x2_t *)(*(void *)v27 + 8720), (float64x2_t)vdupq_lane_s64(COERCE__INT64(*(double *)(v7 + 88) - v11), 0));
        *(__n128 *)(*(void *)v27 + 8720) = v2;
      }
    }
LABEL_40:
    if (v5)
    {
      v2.n128_f64[0] = (double)(v4 - UpTimeNanoseconds) / 1000000000.0 + CFAbsoluteTimeGetCurrent();
    }
    else
    {
      char v5 = 0;
      v2.n128_u64[0] = 0x41FE133800000000;
    }
LABEL_43:
    ++v3;
  }
  while (v3 != 3);
  segPumpSetMediaFileExpireTimer(*(void *)v27, v2);
  if (v6)
  {
    segPumpReadyNotification(*(void **)v27, @"FBPAL_SeekableTimeRangeChanged", 0);
    if (v26) {
      segPumpReadyNotification(*(void **)v27, @"FBP_DurationChanged", 0);
    }
  }
LABEL_53:
  segPumpUnlockAndSendAllPendingNotifications();
  if (cf) {
    CFRelease(cf);
  }
}

void segPumpContentSteeringAlternateListChangedCallback(int a1, uint64_t a2, CFArrayRef theArray)
{
  uint64_t v27 = 0;
  CFTypeRef v28 = 0;
  CFTypeRef cf = 0;
  if (!theArray || CFArrayGetCount(theArray) < 1) {
    return;
  }
  uint64_t v5 = segPumpLockAndCopyPumpFromRetainProxy(a2, &v28, &v27);
  if (v5) {
    goto LABEL_36;
  }
  if (FigCFEqual())
  {
    uint64_t v6 = *(void *)(v27 + 9552);
    uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    double v10 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v9 + 48);
    if (!v10)
    {
LABEL_29:
      uint64_t v25 = 4294954514;
LABEL_30:
      segPumpSendEndCallbackForAllActiveStreamsWithOSStatus(a2, v25);
      goto LABEL_31;
    }
    uint64_t v5 = v10(v6, @"AlternateFilterMonitorProperty_CurrentPathwayID", AllocatorForMedia, &cf);
    if (!v5)
    {
      CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0);
      PathwayID = FigAlternateGetPathwayID((uint64_t)ValueAtIndex);
      uint64_t v13 = *(void *)(v27 + 9048);
      if (v13)
      {
        uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v15 = v14 ? v14 : 0;
        unsigned __int8 v16 = *(void (**)(uint64_t, uint64_t, uint64_t, __CFString *, void))(v15 + 48);
        if (v16) {
          v16(v13, 0x1EE582B98, 0x1EE562458, PathwayID, 0);
        }
      }
      if (FigCFEqual()) {
        goto LABEL_31;
      }
      uint64_t v17 = *(void *)(v27 + 9048);
      if (v17)
      {
        uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v19 = v18 ? v18 : 0;
        uint64_t v20 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 32);
        if (v20) {
          v20(v17, 0x1EE582B98, 0x1EE562478, 1);
        }
      }
      uint64_t v21 = *(void *)(v27 + 9552);
      uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v22) {
        uint64_t v23 = v22;
      }
      else {
        uint64_t v23 = 0;
      }
      BOOL v24 = *(uint64_t (**)(uint64_t, __CFString *, __CFString *))(v23 + 56);
      if (v24)
      {
        uint64_t v25 = v24(v21, @"AlternateFilterMonitorProperty_CurrentPathwayID", PathwayID);
        if (!v25) {
          goto LABEL_31;
        }
        goto LABEL_30;
      }
      goto LABEL_29;
    }
LABEL_36:
    uint64_t v25 = v5;
    goto LABEL_30;
  }
LABEL_31:
  if (cf) {
    CFRelease(cf);
  }
  segPumpUnlockAndSendAllPendingNotifications();
  if (v28) {
    CFRelease(v28);
  }
}

void segPumpContentSteeringAlternatesAddedCallback(int a1, uint64_t a2, CFArrayRef theArray)
{
  *(void *)uint64_t v7 = 0;
  CFTypeRef cf = 0;
  if (theArray && CFArrayGetCount(theArray) >= 1)
  {
    uint64_t v5 = segPumpLockAndCopyPumpFromRetainProxy(a2, &cf, (uint64_t *)v7);
    if (v5)
    {
      uint64_t valid = v5;
    }
    else
    {
      uint64_t valid = segPumpAddNewAlternatesToValidAlternatesQueue(*(uint64_t *)v7, theArray);
      if (!valid) {
        goto LABEL_6;
      }
    }
    segPumpSendEndCallbackForAllActiveStreamsWithOSStatus(a2, valid);
LABEL_6:
    segPumpUnlockAndSendAllPendingNotifications();
    if (cf) {
      CFRelease(cf);
    }
  }
}

uint64_t segPumpAddNewAlternatesToValidAlternatesQueue(uint64_t a1, CFArrayRef theArray)
{
  if (!theArray) {
    return 0;
  }
  if (CFArrayGetCount(theArray) < 1 || CFArrayGetCount(theArray) < 1) {
    return 0;
  }
  CFIndex v4 = 0;
  while (1)
  {
    CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v4);
    uint64_t result = segPumpAddFigAlternate(a1, ValueAtIndex);
    if (result) {
      break;
    }
    if (++v4 >= CFArrayGetCount(theArray)) {
      return 0;
    }
  }
  return result;
}

void segPumpSetContentSteeringMonitor(uint64_t a1, CFTypeRef cf)
{
  __n128 v2 = *(const void **)(a1 + 9552);
  *(void *)(a1 + 9552) = cf;
  if (cf) {
    CFRetain(cf);
  }
  if (v2)
  {
    CFRelease(v2);
  }
}

double segPumpSetExtraHoldbackFromClient(uint64_t a1, uint64_t a2, double a3)
{
  double MinimumPrebufferReservation = segPumpGetMinimumPrebufferReservation(a2, 0);
  if (MinimumPrebufferReservation > a3)
  {
    segPumpAppendErrorLogEntry(a1, a2, 0, 0, -12640, @"CoreMediaErrorDomain", @"Cannot get that close to live", 0, 0, 0, 3u);
    a3 = MinimumPrebufferReservation;
  }
  double result = a3 - MinimumPrebufferReservation;
  *(double *)(a2 + 7960) = a3 - MinimumPrebufferReservation;
  return result;
}

double segPumpPlaylistGetEndDateOfLastPart(uint64_t a1)
{
  CFIndex v2 = 0;
  double v3 = 0.0;
  double v4 = 0.0;
  while (1)
  {
    CFArrayRef MediaSegmentSpecifiers = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(a1);
    CFIndex v6 = MediaSegmentSpecifiers ? CFArrayGetCount(MediaSegmentSpecifiers) : 0;
    CFArrayRef v7 = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(a1);
    if (v2 >= v6) {
      break;
    }
    CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v7, v2);
    if (FigMediaSegmentSpecifierGetDateStamp((uint64_t)ValueAtIndex))
    {
      uint64_t DateStamp = FigMediaSegmentSpecifierGetDateStamp((uint64_t)ValueAtIndex);
      double v3 = MEMORY[0x199707BD0](DateStamp);
      double v4 = *((double *)segPumpGetMediaFilePrivateData(ValueAtIndex) + 4);
    }
    ++v2;
  }
  LastCFNumberRef Value = FigCFArrayGetLastValue();
  double v11 = 0.0;
  if (LastValue)
  {
    FigMediaSegmentSpecifierGetPartialSegments(LastValue);
    uint64_t v12 = (const void *)FigCFArrayGetLastValue();
    if (v12)
    {
      uint64_t v13 = (uint64_t)v12;
      double v14 = v3 + *((double *)segPumpGetMediaFilePrivateData(v12) + 4) - v4;
      return FigMediaSegmentSpecifierGetTimeInSeconds(v13) + v14;
    }
  }
  return v11;
}

uint64_t segPumpCreateDiscoInfoList(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v5 = *(void *)(a1 + 56);
  if (!v5) {
    return 0;
  }
  CFArrayRef MediaSegmentSpecifiers = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(v5);
  if (!MediaSegmentSpecifiers
    || CFArrayGetCount(MediaSegmentSpecifiers) < 1
    || FigMediaPlaylistGetDateStampCount(*(void *)(a1 + 56)) < 1)
  {
    return 0;
  }
  segPumpFreeDiscoQueue((uint64_t)a2);
  uint64_t v10 = *(void *)(a1 + 56);
  if (!v10
    || (CFArrayRef v11 = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(v10)) == 0
    || CFArrayGetCount(v11) < 1
    || FigMediaPlaylistGetDateStampCount(*(void *)(a1 + 56)) < 1
    || (uint64_t NextMediaFileWithDate = (const void *)segPumpGetNextMediaFileWithDate(*(void *)(a1 + 56), 0)) == 0)
  {
    uint64_t v31 = 4294954513;
LABEL_22:
    segPumpFreeDiscoQueue((uint64_t)a2);
    uint64_t v18 = 0;
LABEL_25:
    *a4 = v18;
    return v31;
  }
  uint64_t v13 = (uint64_t)NextMediaFileWithDate;
  MediaFilePrivateData = (double *)segPumpGetMediaFilePrivateData(NextMediaFileWithDate);
  uint64_t DateStamp = FigMediaSegmentSpecifierGetDateStamp(v13);
  double v16 = MEMORY[0x199707BD0](DateStamp) - MediaFilePrivateData[4] + *(double *)(a1 + 88);
  FigMediaPlaylistGetMediaSegmentSpecifiers(*(void *)(a1 + 56));
  FirstCFNumberRef Value = FigCFArrayGetFirstValue();
  uint64_t v18 = 0;
  CFIndex v19 = 0;
  uint64_t v20 = a3 + FigMediaSegmentSpecifierGetDiscontinuityDomain(FirstValue) - 1;
  double v21 = 0.0;
  while (1)
  {
    CFArrayRef Count = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(*(void *)(a1 + 56));
    if (Count) {
      CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
    }
    if (v19 >= (uint64_t)Count) {
      break;
    }
    CFArrayRef v23 = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(*(void *)(a1 + 56));
    CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v23, v19);
    if (FigMediaSegmentSpecifierGetDateStamp((uint64_t)ValueAtIndex))
    {
      uint64_t v25 = FigMediaSegmentSpecifierGetDateStamp((uint64_t)ValueAtIndex);
      double v16 = MEMORY[0x199707BD0](v25);
    }
    if (v20 != FigMediaSegmentSpecifierGetDiscontinuityDomain((uint64_t)ValueAtIndex) + a3)
    {
      int v26 = segPumpGetMediaFilePrivateData(ValueAtIndex);
      uint64_t v27 = (double *)malloc_type_calloc(1uLL, 0x30uLL, 0x10A0040CA010D23uLL);
      if (!v27) {
        goto LABEL_27;
      }
      CFTypeRef v28 = v27;
      uint64_t v29 = v26[4];
      int v27[2] = v16;
      *((void *)v27 + 3) = v29;
      uint64_t v20 = FigMediaSegmentSpecifierGetDiscontinuityDomain((uint64_t)ValueAtIndex) + a3;
      *((void *)v28 + 4) = v20;
      v28[5] = v21;
      uint64_t v30 = (double **)a2[1];
      double *v28 = 0.0;
      *((void *)v28 + 1) = v30;
      OpaqueCMBlockBuffer *v30 = v28;
      a2[1] = v28;
      ++v18;
      double v21 = 0.0;
    }
    double v16 = v16 + FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)ValueAtIndex);
    double v21 = v21 + FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)ValueAtIndex);
    ++v19;
  }
  if (*a2)
  {
    uint64_t v31 = 0;
    goto LABEL_25;
  }
LABEL_27:
  uint64_t v31 = FigSignalErrorAt();
  if (v31) {
    goto LABEL_22;
  }
  return v31;
}

uint64_t segPumpUpdateCMCDStreamType(uint64_t a1)
{
  if (!*(void *)(a1 + 9576)
    || *(unsigned char *)(*(void *)(a1 + 16 * *(void *)(a1 + 8416) + 384) + 866)
    || !segPumpEnsureCMCDHeaderVendor(a1))
  {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 9576);
  if (*(unsigned char *)(a1 + 8002)) {
    uint64_t v3 = 1;
  }
  else {
    uint64_t v3 = 2;
  }

  return FigCMCDHeaderVendorSetStreamType(v2, v3);
}

uint64_t segPumpGetTimeRangeForDateWithSegmentOffset(const void *a1, uint64_t a2, const __CFDate *a3, CMTime *a4, CMTime *a5, void *a6)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  CMBaseObjectGetDerivedStorage();
  uint64_t v46 = 0;
  CFIndex v12 = segPumpAPILockAndEnsureAPIStatus(a1, 0);
  if (v12) {
    goto LABEL_61;
  }
  if (!a4)
  {
    CFIndex v12 = FigSignalErrorAt();
LABEL_61:
    uint64_t v35 = v12;
    return segPumpAPIUnlockAndSendNotificationThenCheckAPIStatus(a1, v35);
  }
  if (!a2 || FigMediaPlaylistGetPlaylistActiveDurationSecs(a2) == 0.0) {
    goto LABEL_32;
  }
  double v13 = MEMORY[0x199707BD0](a3);
  FigMediaPlaylistGetMediaSegmentSpecifiers(a2);
  FirstCFNumberRef Value = FigCFArrayGetFirstValue();
  uint64_t v47 = (const void *)FirstValue;
  if (FirstValue || !dword_1E9351350)
  {
    if (!FirstValue) {
      goto LABEL_32;
    }
    uint64_t v42 = a5;
    double v43 = a6;
    double v48 = 0;
    if (!segPumpIterateMedia(a2, (uint64_t *)&v48, &v46, (uint64_t *)&v47))
    {
      CFIndex v19 = 0;
      int v18 = 0;
      double v16 = 0;
      double v25 = 0.0;
      double v24 = 0.0;
      double v23 = 0.0;
      double v22 = 0.0;
      uint64_t v21 = 0;
      double v20 = 0.0;
LABEL_34:
      BOOL v36 = v13 > v25 + v20 || v16 == 0;
      char v37 = v36;
      if (v36) {
        double v38 = v24;
      }
      else {
        double v38 = v25;
      }
      if (v36) {
        Float64 v39 = v22;
      }
      else {
        Float64 v39 = v23;
      }
      if (v18)
      {
        if (v19) {
          char v37 = 0;
        }
        uint64_t v40 = v43;
        if (v37)
        {
          uint64_t v35 = 4294954648;
          if (!v43) {
            return segPumpAPIUnlockAndSendNotificationThenCheckAPIStatus(a1, v35);
          }
        }
        else
        {
          CMTimeMakeWithSeconds(&v49, v39, 90000);
          *a4 = v49;
          if (v42)
          {
            CMTimeMakeWithSeconds(&v49, v39 + v38, 90000);
            uint64_t v35 = 0;
            CMTime *v42 = v49;
            if (!v43) {
              return segPumpAPIUnlockAndSendNotificationThenCheckAPIStatus(a1, v35);
            }
          }
          else
          {
            uint64_t v35 = 0;
            if (!v43) {
              return segPumpAPIUnlockAndSendNotificationThenCheckAPIStatus(a1, v35);
            }
          }
        }
      }
      else
      {
        uint64_t v35 = 4294954647;
        uint64_t v40 = v43;
        if (!v43) {
          return segPumpAPIUnlockAndSendNotificationThenCheckAPIStatus(a1, v35);
        }
      }
      void *v40 = v21;
      return segPumpAPIUnlockAndSendNotificationThenCheckAPIStatus(a1, v35);
    }
    double v16 = 0;
    int v17 = 0;
    int v18 = 0;
    CFIndex v19 = 0;
    double v20 = 0.0;
    uint64_t v21 = 0;
    double v22 = 0.0;
    double v23 = 0.0;
    double v24 = 0.0;
    double v25 = 0.0;
    while (1)
    {
      if (v13 <= v25 + v20 && v16 != 0)
      {
        CFIndex v19 = v16;
        double v24 = v25;
        double v22 = v23;
      }
      uint64_t v27 = v46;
      CFTypeRef v28 = v48;
      FigMediaSegmentSpecifierGetPartialSegments((uint64_t)v48);
      if (v27 != FigCFArrayGetFirstValue() || !FigMediaSegmentSpecifierGetDateStamp((uint64_t)v28)) {
        goto LABEL_22;
      }
      if (!v17)
      {
        CFDateRef DateStamp = (const __CFDate *)FigMediaSegmentSpecifierGetDateStamp((uint64_t)v28);
        if (CFDateCompare(a3, DateStamp, 0) == kCFCompareLessThan) {
          break;
        }
      }
      CFDateRef v30 = (const __CFDate *)FigMediaSegmentSpecifierGetDateStamp((uint64_t)v28);
      if (CFDateCompare(a3, v30, 0) != kCFCompareLessThan) {
        break;
      }
      double v16 = 0;
      int v18 = 1;
LABEL_29:
      FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)v47);
      if (!segPumpIterateMedia(a2, (uint64_t *)&v48, &v46, (uint64_t *)&v47)) {
        goto LABEL_34;
      }
    }
    uint64_t v31 = FigMediaSegmentSpecifierGetDateStamp((uint64_t)v28);
    double v20 = MEMORY[0x199707BD0](v31);
    double v23 = *((double *)segPumpGetMediaFilePrivateData(v28) + 4);
    int v18 = 1;
    double v25 = 0.0;
    int v17 = 1;
    double v16 = v28;
LABEL_22:
    if (v16 && v13 > v25 + v20)
    {
      v49.CMTimeValue value = 0;
      *(void *)os_log_type_t type = v27;
      double v45 = v28;
      if (segPumpIterateMedia(a2, (uint64_t *)&v45, (uint64_t *)type, &v49.value)
        && (CMTimeValue value = v49.value, FigMediaSegmentSpecifierGetDateStamp(v49.value)))
      {
        uint64_t v33 = FigMediaSegmentSpecifierGetDateStamp(value);
        double v25 = MEMORY[0x199707BD0](v33) - v20;
        unint64_t v34 = v47;
      }
      else
      {
        unint64_t v34 = v47;
        double v25 = v25 + FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)v47);
      }
      uint64_t v21 = *((void *)segPumpGetMediaFilePrivateData(v34) + 4);
    }
    goto LABEL_29;
  }
  LODWORD(v45) = 0;
  type[0] = OS_LOG_TYPE_DEFAULT;
  os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_32:
  uint64_t v35 = 4294954513;
  return segPumpAPIUnlockAndSendNotificationThenCheckAPIStatus(a1, v35);
}

uint64_t segPumpSyncTimeRolledPastToExistingStream(const void *a1, uint64_t a2, uint64_t a3, const __CFDate *a4)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  memset(&v19, 0, sizeof(v19));
  memset(&v18, 0, sizeof(v18));
  double v17 = 0.0;
  uint64_t result = segPumpGetTimeRangeForDateWithSegmentOffset(a1, *(void *)(a3 + 56), a4, &v19, &v18, &v17);
  if (result) {
    return result;
  }
  double v16 = 0.0;
  uint64_t v9 = *(void *)a3;
  if (*(unsigned char *)(a3 + 864))
  {
    uint64_t v10 = *(void *)(a2 + 16 * v9 + 384);
    if (!v10) {
      return result;
    }
    goto LABEL_5;
  }
  if (!v9)
  {
LABEL_14:
    uint64_t v10 = *(void *)(a2 + 400);
    if (*(unsigned char *)(v10 + 866)) {
      return result;
    }
    goto LABEL_5;
  }
  uint64_t v10 = *(void *)(a2 + 384);
  if (*(unsigned char *)(v10 + 866))
  {
    if (v9 == 1) {
      return result;
    }
    goto LABEL_14;
  }
LABEL_5:
  if (!*(unsigned char *)(a2 + 8002))
  {
    uint64_t v11 = *(void *)(v10 + 56);
    if (v11)
    {
      uint64_t result = segPumpGetTimeRangeForDateWithSegmentOffset(a1, v11, a4, &v19, &v18, &v16);
      if (!result)
      {
        double v12 = v16;
        double v13 = *(double *)(a3 + 88);
        double v14 = v17 - v13;
        if (v13 != v16 - (v17 - v13))
        {
          if (dword_1E9351350)
          {
            os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            double v12 = v16;
            double v14 = v17 - *(double *)(a3 + 88);
          }
          return segPumpStreamSyncTimeRolledPast(a3, v14, v12);
        }
      }
    }
  }
  return result;
}

CFIndex segPumpAPILockAndEnsureAPIStatus(const void *a1, int a2)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  CFRetain(a1);
  FigRetainProxyLockMutex();
  CFIndex result = segPumpAPICheckStatus(DerivedStorage, 0);
  if (a2 && result && result != -12883)
  {
    CFIndex v6 = (const void *)DerivedStorage[1002];
    if (v6)
    {
      CFRelease(v6);
      DerivedStorage[1002] = 0;
    }
    uint64_t v7 = 48;
    while (1)
    {
      uint64_t v8 = DerivedStorage[v7];
      if (*(void *)(v8 + 16))
      {
        *(unsigned char *)(v8 + 1136) = 0;
        uint64_t v9 = *(const void **)(v8 + 1144);
        if (v9)
        {
          CFRelease(v9);
          *(void *)(v8 + 1144) = 0;
        }
        *(unsigned char *)(v8 + 866) = 1;
        CFIndex result = segPumpRestartStreamReads(a1);
        if (result) {
          break;
        }
      }
      v7 += 2;
      if (v7 == 54) {
        return 0;
      }
    }
  }
  return result;
}

BOOL segPumpIterateMedia(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v7 = *a2;
  if (*a2)
  {
    uint64_t v8 = *a3;
    do
    {
      if (v8)
      {
        CFArrayRef NextSegment = (const __CFArray *)FigMediaSegmentSpecifierGetNextSegment(v8);
        if (NextSegment) {
          break;
        }
      }
      else
      {
        FigMediaSegmentSpecifierGetPartialSegments(v7);
        CFArrayRef NextSegment = (const __CFArray *)FigCFArrayGetFirstValue();
        if (NextSegment) {
          break;
        }
      }
      CFArrayRef NextSegment = (const __CFArray *)FigMediaSegmentSpecifierGetNextSegment(v7);
      uint64_t v7 = (uint64_t)NextSegment;
      if (!NextSegment) {
        break;
      }
      CFArrayRef NextSegment = (const __CFArray *)FigMediaSegmentSpecifierGetPartialSegments((uint64_t)NextSegment);
      if (!NextSegment) {
        break;
      }
      CFIndex Count = CFArrayGetCount(NextSegment);
      uint64_t v8 = 0;
      CFArrayRef NextSegment = 0;
    }
    while (Count);
  }
  else
  {
    FigMediaPlaylistGetMediaSegmentSpecifiers(a1);
    CFArrayRef NextSegment = (const __CFArray *)FigCFArrayGetFirstValue();
    uint64_t v7 = (uint64_t)NextSegment;
    if (NextSegment)
    {
      FigMediaSegmentSpecifierGetPartialSegments((uint64_t)NextSegment);
      CFArrayRef NextSegment = (const __CFArray *)FigCFArrayGetFirstValue();
    }
  }
  *a2 = v7;
  *a3 = (uint64_t)NextSegment;
  if (NextSegment) {
    uint64_t v11 = (uint64_t)NextSegment;
  }
  else {
    uint64_t v11 = v7;
  }
  *a4 = v11;
  return v7 != 0;
}

uint64_t segPumpAPIUnlockAndSendNotificationThenCheckAPIStatus(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  unsigned int v5 = segPumpAPICheckStatus(DerivedStorage, a2);
  segPumpUnlockAndSendAllPendingNotifications();
  if (!v5)
  {
    if (!FigRetainProxyIsInvalidated())
    {
      CFRelease(a1);
      return 0;
    }
    unsigned int v5 = FigSignalErrorAt();
  }
  CFRelease(a1);
  if (v5 == -15626) {
    return 0;
  }
  else {
    return v5;
  }
}

CFIndex segPumpAPICheckStatus(void *a1, uint64_t a2)
{
  if (a2) {
    return a2;
  }
  if (!FigRetainProxyIsInvalidated())
  {
    if ((*(unsigned char *)(a1[48] + 1136) || *(unsigned char *)(a1[50] + 1136) || *(unsigned char *)(a1[52] + 1136))
      && (uint64_t v3 = (__CFError *)a1[1002]) != 0)
    {
      return CFErrorGetCode(v3);
    }
    else
    {
      return 0;
    }
  }

  return FigSignalErrorAt();
}

uint64_t segPumpStreamSyncTimeRolledPast(uint64_t a1, double a2, double a3)
{
  double v4 = a3 - (*(double *)(a1 + 88) + a2);
  uint64_t result = FigMediaPlaylistGetTargetDuration(*(void *)(a1 + 56));
  if (v4 >= (double)result * -3.0)
  {
    uint64_t result = FigMediaPlaylistGetTargetDuration(*(void *)(a1 + 56));
    if (v4 <= (double)result * 3.0)
    {
      double v6 = v4 + *(double *)(a1 + 88);
      *(double *)(a1 + 88) = v6;
      if (fabs(v4) > 2.22044605e-16)
      {
        uint64_t v7 = *(void *)(a1 + 56);
        return segPumpPlaylistRecalculatePumpTimeOffsets(v7, v6);
      }
    }
  }
  return result;
}

double segPumpGetEstIndependentInterval(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 384);
  uint64_t v3 = *(void *)(v2 + 56);
  if (!v3) {
    return 0.0;
  }
  double v5 = 0.0;
  if (FigMediaPlaylistHasIndependentSegments(v3))
  {
    LODWORD(v4) = *(_DWORD *)(a1 + 8);
    double v5 = (double)v4;
  }
  CFIndex v6 = 0;
  int v7 = -1;
  double v8 = 0.0;
  double v9 = 0.0;
  while (1)
  {
    CFArrayRef MediaSegmentSpecifiers = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(*(void *)(v2 + 56));
    if (MediaSegmentSpecifiers) {
      CFArrayRef MediaSegmentSpecifiers = (const __CFArray *)CFArrayGetCount(MediaSegmentSpecifiers);
    }
    if (v6 >= (uint64_t)MediaSegmentSpecifiers) {
      break;
    }
    CFArrayRef v11 = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(*(void *)(v2 + 56));
    CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v11, v6);
    CFArrayRef PartialSegments = (const __CFArray *)FigMediaSegmentSpecifierGetPartialSegments((uint64_t)ValueAtIndex);
    CFIndex v14 = 0;
    if (PartialSegments)
    {
LABEL_9:
      CFIndex Count = CFArrayGetCount(PartialSegments);
      goto LABEL_11;
    }
    while (1)
    {
      CFIndex Count = 0;
LABEL_11:
      if (v14 >= Count) {
        break;
      }
      double v16 = CFArrayGetValueAtIndex(PartialSegments, v14);
      if (FigMediaSegmentSpecifierIsMarkedIndependent((uint64_t)v16))
      {
        double v9 = 0.0;
        ++v7;
      }
      if ((v7 & 0x80000000) == 0)
      {
        double v8 = v8 + FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)v16);
        double v9 = v9 + FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)v16);
      }
      ++v14;
      if (PartialSegments) {
        goto LABEL_9;
      }
    }
    ++v6;
  }
  if (v7 > 0) {
    return (v8 - v9) / (double)v7;
  }
  return v5;
}

uint64_t FigHTTPRequestSessionSendPingWithPongHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  double v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void (*)(uint64_t, double, uint64_t, int), uint64_t, void, uint64_t))(v11 + 16);
  if (!v12) {
    return 4294954514;
  }

  return v12(a1, a2, a3, segPumpPongCallback, a4, 0, a5);
}

void RoundTripMonitorTimeoutTimer(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  CFTypeRef cf = 0;
  if (!segPumpLockAndCopyPumpFromRetainProxy(a2, &cf, (uint64_t *)&v2))
  {
    FigHTTPStopAndReleaseTimer(v2 + 1077);
    segPumpGetCurrentRTT(v2);
    segPumpResumeRoundTripMonitoring(v2);
  }
  segPumpUnlockAndSendAllPendingNotifications();
  if (cf) {
    CFRelease(cf);
  }
}

BOOL segPumpStreamHasActiveMediaRequest(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 696);
  if (v1 && (*(void *)(v1 + 32) || *(void *)(v1 + 104))) {
    return 1;
  }
  uint64_t v2 = **(void **)(a1 + 768);
  if (!v2) {
    return 0;
  }
  if (*(void *)(v2 + 32)) {
    return 1;
  }
  return *(void *)(v2 + 104) != 0;
}

uint64_t segPumpPlaylistGetImputedLiveEdgeDate(uint64_t a1, double *a2)
{
  FigMediaPlaylistGetMediaSegmentSpecifiers(*(void *)(a1 + 56));
  LastCFNumberRef Value = FigCFArrayGetLastValue();
  if (LastValue)
  {
    uint64_t v4 = LastValue;
    CFArrayRef PartialSegments = (const __CFArray *)FigMediaSegmentSpecifierGetPartialSegments(LastValue);
    if (PartialSegments && CFArrayGetCount(PartialSegments) >= 1)
    {
      FigMediaSegmentSpecifierGetPartialSegments(v4);
      uint64_t v6 = FigCFArrayGetLastValue();
      uint64_t v4 = v6;
    }
    else
    {
      uint64_t v6 = v4;
    }
    double ImputedDate = FigMediaSegmentSpecifierGetImputedDate(v6);
    *a2 = ImputedDate + FigMediaSegmentSpecifierGetTimeInSeconds(v4);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void IndexFileHandleLongDownloadTimer(uint64_t a1, uint64_t a2)
{
  cf[23] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  uint64_t v29 = 0;
  cf[0] = 0;
  uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  CFTypeRef v28 = 0;
  if (segPumpLockAndCopyPumpFromRetainProxy(a2, cf, &v29)) {
    goto LABEL_56;
  }
  uint64_t v5 = *(void *)(v29 + 384);
  if (*(void *)(v5 + 504) == a1
    || (uint64_t v5 = *(void *)(v29 + 400), *(void *)(v5 + 504) == a1)
    || (uint64_t v5 = *(void *)(v29 + 416), *(void *)(v5 + 504) == a1))
  {
    int v6 = 1;
  }
  else
  {
    uint64_t v5 = *(void *)(v29 + 392);
    if (*(void *)(v5 + 504) != a1)
    {
      uint64_t v5 = *(void *)(v29 + 408);
      if (*(void *)(v5 + 504) != a1)
      {
        uint64_t v5 = *(void *)(v29 + 424);
        if (*(void *)(v5 + 504) != a1) {
          goto LABEL_56;
        }
      }
    }
    int v6 = 0;
  }
  unint64_t v7 = UpTimeNanoseconds - *(void *)(v5 + 432);
  if (dword_1E9351350)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  double v9 = (CFTypeRef *)(v5 + 408);
  if (*(unsigned char *)(v5 + 538))
  {
    uint64_t v10 = v29;
    segPumpResetConnection(v29, v5 + 408);
    *(unsigned char *)(v5 + 859) = 0;
    segPumpStreamUpdateIndexExpectedArrival(v10, v5);
    goto LABEL_44;
  }
  char v11 = v6 ^ 1;
  uint64_t v12 = v29;
  if (!*(unsigned char *)(v5 + 866)) {
    char v11 = 1;
  }
  if ((v11 & 1) == 0 && *(unsigned int *)(v29 + 8) < v7 / 0x3B9ACA00)
  {
    double v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    uint64_t v21 = *(const void **)(v5 + 480);
    if (v21)
    {
      double v22 = (void *)CFRetain(v21);
      CFTypeRef v28 = v22;
      if (v22)
      {
LABEL_37:
        if (!segPumpSendEndCallbackForAllActiveStreams(a2, v22)) {
          goto LABEL_46;
        }
        goto LABEL_56;
      }
    }
    else
    {
      CFTypeRef v28 = 0;
    }
    if (FigCreateErrorForOSStatus(4294954412, (CFErrorRef *)&v28)) {
      goto LABEL_56;
    }
    double v22 = (void *)v28;
    goto LABEL_37;
  }
  uint64_t v14 = 7680;
  if (v6) {
    uint64_t v14 = 8144;
  }
  uint64_t v15 = *(uint64_t **)(v29 + v14);
  if (!v15) {
    goto LABEL_43;
  }
  double v16 = (uint64_t *)(v29 + 8112);
  do
  {
    double v16 = (uint64_t *)*v16;
    if (!v16)
    {
      CMTime v18 = *(uint64_t **)(v29 + 8096);
      if (v18 == v15)
      {
        CMTime v19 = (uint64_t *)(v29 + 8096);
        uint64_t v23 = *v15;
        *(void *)(v29 + 8096) = *v15;
        if (v23)
        {
LABEL_41:
          *uint64_t v15 = 0;
          **(void **)(v29 + 8104) = v15;
          *(void *)(v29 + 8104) = v15;
          double v24 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);
          goto LABEL_42;
        }
      }
      else
      {
        do
        {
          CMTime v19 = v18;
          CMTime v18 = (uint64_t *)*v18;
        }
        while (v18 != v15);
        uint64_t v20 = *v15;
        *CMTime v19 = *v15;
        if (v20) {
          goto LABEL_41;
        }
        uint64_t v12 = v29;
      }
      *(void *)(v12 + 8104) = v19;
      goto LABEL_41;
    }
  }
  while (v16 != v15);
  if (!dword_1E9351350) {
    goto LABEL_43;
  }
  double v17 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
LABEL_42:
  fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_43:
  *(unsigned char *)(v5 + 867) = 1;
LABEL_44:
  if (*(unsigned char *)(v29 + 328)) {
    segPumpScheduleIndexFileLongDownloadTimer(v29, v5);
  }
LABEL_46:
  uint64_t v25 = v29;
  if (!*(unsigned char *)(v29 + 328))
  {
    if (*v9)
    {
      CFTypeRef v26 = CFRetain(*v9);
      uint64_t v25 = v29;
    }
    else
    {
      CFTypeRef v26 = 0;
    }
    segPumpResetConnectionByPreservingConnectionStats(v25, v5 + 408);
    CFTypeRef v27 = *v9;
    *double v9 = v26;
    if (v26) {
      CFRetain(v26);
    }
    if (v27) {
      CFRelease(v27);
    }
    *(unsigned char *)(v5 + 859) = 0;
    segPumpHandleIndexFileNetworkError(cf[0], v5, 0, -16839, @"CoreMediaErrorDomain", @"Unable to get playlist before long download timer.");
    if (v26) {
      CFRelease(v26);
    }
  }
LABEL_56:
  segPumpUnlockAndSendAllPendingNotifications();
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  if (v28) {
    CFRelease(v28);
  }
}

uint64_t segPumpConnectionGetPendingMediaDeadline(uint64_t *a1)
{
  if (!a1[4] || !a1[1]) {
    return 0;
  }
  uint64_t v1 = a1[5];
  return v1 + (uint64_t)(FigMediaSegmentSpecifierGetTimeInSeconds(a1[1]) * 1000000000.0);
}

uint64_t segPumpStepNextFrame(const void *a1, CMTime *a2, uint64_t a3, CMTime *a4, uint64_t a5, int *a6, float a7)
{
  CMTime v31 = *a2;
  double Seconds = CMTimeGetSeconds(&v31);
  CMTime v31 = *a4;
  double v14 = CMTimeGetSeconds(&v31);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v16 = *(void *)(DerivedStorage + 384);
  CFIndex Step = segPumpAPILockAndEnsureAPIStatus(a1, 0);
  if (Step) {
    goto LABEL_36;
  }
  if (!*(unsigned char *)(DerivedStorage + 8712) || *(unsigned char *)(DerivedStorage + 8713)) {
    goto LABEL_37;
  }
  uint64_t v18 = *(void *)(v16 + 56);
  double v19 = v18 ? FigMediaPlaylistGetPlaylistActiveDurationSecs(v18) : *(double *)(v16 + 96);
  if (!(unint64_t)v19) {
    goto LABEL_37;
  }
  if (a6)
  {
    int v20 = *(_DWORD *)(v16 + 72) + 1;
    *(_DWORD *)(v16 + 72) = v20;
    *a6 = v20;
  }
  uint64_t v21 = *(void *)(v16 + 56);
  if (v21) {
    double PlaylistActiveDurationSecs = FigMediaPlaylistGetPlaylistActiveDurationSecs(v21);
  }
  else {
    double PlaylistActiveDurationSecs = *(double *)(v16 + 96);
  }
  double v23 = *(double *)(v16 + 88);
  double v24 = v23 + (double)(unint64_t)PlaylistActiveDurationSecs;
  if (Seconds >= v14)
  {
    double v25 = v24 + -0.000001;
    if (Seconds < v24) {
      double v25 = Seconds;
    }
    if (v14 >= v23) {
      double v26 = v14;
    }
    else {
      double v26 = *(double *)(v16 + 88);
    }
    if (v25 < v23) {
      goto LABEL_37;
    }
  }
  else
  {
    if (Seconds >= v23) {
      double v25 = Seconds;
    }
    else {
      double v25 = *(double *)(v16 + 88);
    }
    double v26 = v23 + 0.001;
    if (v14 > v23) {
      double v26 = v14;
    }
    if (v26 >= v24) {
      double v26 = v24 + -0.000001;
    }
    if (v25 >= v24)
    {
LABEL_37:
      CFIndex Step = FigSignalErrorAt();
      goto LABEL_36;
    }
  }
  *(unsigned char *)(v16 + 871) = 0;
  *(unsigned char *)(v16 + 1136) = 0;
  *(double *)(DerivedStorage + 8720) = v24 - v25;
  *(double *)(DerivedStorage + 8728) = v24 - v26;
  *(void *)(DerivedStorage + 8744) = a5;
  *(float *)(DerivedStorage + 8736) = a7;
  *(void *)(DerivedStorage + 8752) = a3;
  uint64_t v27 = *(void *)(v16 + 56);
  if (v27)
  {
    CFArrayRef MediaSegmentSpecifiers = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(v27);
    if (MediaSegmentSpecifiers)
    {
      if (CFArrayGetCount(MediaSegmentSpecifiers) >= 1 && !*(unsigned char *)(v16 + 869))
      {
        CFIndex Step = segPumpDoNextStep((uint64_t)a1, DerivedStorage);
LABEL_36:
        uint64_t v29 = Step;
        return segPumpAPIUnlockAndSendNotificationThenCheckAPIStatus(a1, v29);
      }
    }
  }
  uint64_t v29 = 0;
  *(unsigned char *)(DerivedStorage + 8713) = 1;
  return segPumpAPIUnlockAndSendNotificationThenCheckAPIStatus(a1, v29);
}

uint64_t segPumpTryIFrameFetch(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 8713))
  {
    if (!*(unsigned char *)(a2 + 8768)) {
      return 0;
    }
    *(unsigned char *)(a2 + 8768) = 0;
    unsigned int NextIFrame = segPumpRetrieveNextIFrame(a1, a2);
    if (!NextIFrame) {
      return 0;
    }
    return segPumpMakeDataCallbackWithOSStatus(a1, *(uint64_t **)(a2 + 384), *(const void **)(a2 + 176), 0, 0x20u, *(void *)(*(void *)(a2 + 384) + 304), MEMORY[0x1E4F1F9F8], 0, 0, NextIFrame, 0, 0);
  }
  *(unsigned char *)(a2 + 8713) = 0;
  unsigned int NextIFrame = segPumpDoNextStep(a1, a2);
  if (NextIFrame) {
    return segPumpMakeDataCallbackWithOSStatus(a1, *(uint64_t **)(a2 + 384), *(const void **)(a2 + 176), 0, 0x20u, *(void *)(*(void *)(a2 + 384) + 304), MEMORY[0x1E4F1F9F8], 0, 0, NextIFrame, 0, 0);
  }
  return 0;
}

uint64_t segPumpDetermineMediaSegmentToDeliver(const void *a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v146 = *MEMORY[0x1E4F143B8];
  uint64_t v131 = 0;
  CFErrorRef v132 = 0;
  int v9 = segPumpStreamBitRateRequiredForStream(a2, (void *)a3);
  *a4 = 0;
  uint64_t result = *(void *)(a3 + 56);
  if (!result) {
    return result;
  }
  if (*(void *)(a3 + 256)) {
    return 0;
  }
  if (*(void *)(a3 + 264))
  {
    return FigSignalErrorAt();
  }
  FigMediaPlaylistGetMediaSegmentSpecifiers(result);
  uint64_t result = FigCFArrayGetFirstValue();
  uint64_t v133 = (const void *)result;
  if (!result) {
    return result;
  }
  char v11 = (void *)(a3 + 136);
  if (*(void *)(a3 + 136) == -1)
  {
    int v17 = 0;
    goto LABEL_40;
  }
  for (CFIndex i = 0; ; ++i)
  {
    CFArrayRef MediaSegmentSpecifiers = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(*(void *)(a3 + 56));
    if (MediaSegmentSpecifiers) {
      CFArrayRef MediaSegmentSpecifiers = (const __CFArray *)CFArrayGetCount(MediaSegmentSpecifiers);
    }
    if (i >= (uint64_t)MediaSegmentSpecifiers)
    {
      CFStringRef ValueAtIndex = 0;
LABEL_32:
      int v17 = 0;
      double v26 = 0;
      goto LABEL_39;
    }
    CFArrayRef v14 = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(*(void *)(a3 + 56));
    CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v14, i);
    MediaFilePrivateData = segPumpGetMediaFilePrivateData(ValueAtIndex);
    if (FigMediaSegmentSpecifierGetMediaSequence((uint64_t)ValueAtIndex) == *(void *)(a3 + 136)) {
      MediaFilePrivateData[8] = *(void *)(a3 + 152);
    }
    if ((unint64_t)FigMediaSegmentSpecifierGetMediaSequence((uint64_t)ValueAtIndex) >= *v11) {
      break;
    }
    segPumpSetDeliveryStatusForMediaFileAndParts(ValueAtIndex, 1);
  }
  if (!ValueAtIndex) {
    goto LABEL_32;
  }
  uint64_t PreviousSegment = FigMediaSegmentSpecifierGetPreviousSegment((uint64_t)ValueAtIndex);
  *(void *)(a3 + 120) = 0xBFF0000000000000;
  *(void *)(a3 + 920) = 0;
  if (PreviousSegment
    && (DiscontinuityCFErrorDomain Domain = FigMediaSegmentSpecifierGetDiscontinuityDomain(PreviousSegment),
        DiscontinuityDomain < FigMediaSegmentSpecifierGetDiscontinuityDomain((uint64_t)ValueAtIndex))
    && !*(void *)(a3 + 152))
  {
    uint64_t v116 = *(const void **)(a3 + 288);
    if (v116)
    {
      CFRelease(v116);
      *(void *)(a3 + 288) = 0;
    }
  }
  else
  {
    int v20 = *(const void **)(a3 + 288);
    uint64_t MapSegmentSpecifier = (const void *)FigMediaSegmentSpecifierGetMapSegmentSpecifier((uint64_t)ValueAtIndex);
    *(void *)(a3 + 288) = MapSegmentSpecifier;
    if (MapSegmentSpecifier) {
      CFRetain(MapSegmentSpecifier);
    }
    if (v20) {
      CFRelease(v20);
    }
  }
  *(void *)(a3 + 320) = FigMediaSegmentSpecifierGetDiscontinuityDomain((uint64_t)ValueAtIndex);
  segPumpSetStreamDiscontinuityDomain(a2, (void *)a3, (uint64_t)ValueAtIndex);
  if ((*(void *)(a3 + 144) & 0x8000000000000000) != 0)
  {
    double v26 = 0;
  }
  else
  {
    double v22 = a4;
    CFArrayRef PartialSegments = (const __CFArray *)FigMediaSegmentSpecifierGetPartialSegments((uint64_t)ValueAtIndex);
    CFIndex v24 = 0;
    if (!PartialSegments) {
      goto LABEL_27;
    }
LABEL_26:
    for (CFIndex j = CFArrayGetCount(PartialSegments); v24 < j; CFIndex j = 0)
    {
      double v26 = CFArrayGetValueAtIndex(PartialSegments, v24);
      uint64_t v27 = segPumpGetMediaFilePrivateData(v26);
      if (v24 == *(void *)(a3 + 144)) {
        goto LABEL_35;
      }
      v27[73] = 1;
      ++v24;
      if (PartialSegments) {
        goto LABEL_26;
      }
LABEL_27:
      ;
    }
    double v26 = 0;
LABEL_35:
    a4 = v22;
  }
  if (dword_1E9351350)
  {
    LODWORD(v130) = 0;
    LOBYTE(type) = 0;
    os_log_and_send_and_compose_flags_and_os_log_double type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    int v17 = 1;
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  else
  {
    int v17 = 1;
  }
LABEL_39:
  *char v11 = -1;
  *(void *)(a3 + 144) = -1;
  *(void *)(a3 + 152) = 0;
  CFErrorRef v132 = v26;
  uint64_t v133 = ValueAtIndex;
LABEL_40:
  if (*(unsigned char *)(a3 + 861))
  {
    at[0].CMTimeValue value = 0;
    *(void *)uint64_t v134 = 0;
    if (!segPumpGetSafeNetworkBandwidth(a2, (double *)v134, 0, 1))
    {
      segPumpGetNetworkLatencyFromPredictor(a2, at);
      if (!*(unsigned char *)(a2 + 8002))
      {
        double v52 = *(double *)(a3 + 920);
        if (v52 != 0.0 && *(double *)(a3 + 928) > 0.0)
        {
          double v130 = *(double *)(a3 + 96) - *(double *)(a3 + 904);
          if (!segPumpTryToMatchDate(a2, *(void *)(a3 + 56), &v130, &type, v52, v130)) {
            segPumpStreamSyncTimeRolledPast(a3, v130, *(double *)(a3 + 928));
          }
          *(void *)(a3 + 928) = 0;
        }
      }
      if (!v17)
      {
        if (*(void *)(a2 + 8144) && (uint64_t v53 = *(void *)(a2 + 7680)) != 0)
        {
          if (*(unsigned char *)(a3 + 864))
          {
            int PeakBitRate = FigAlternateGetPeakBitRate(*(void *)(v53 + 8));
            BOOL v55 = PeakBitRate > (int)FigAlternateGetPeakBitRate(*(void *)(*(void *)(a2 + 8144) + 8));
          }
          else
          {
            BOOL v55 = 0;
          }
          int v56 = v9;
        }
        else
        {
          int v56 = v9;
          BOOL v55 = 0;
        }
        double v102 = *(double *)(a3 + 96) - *(double *)(a3 + 904);
        uint64_t v103 = *(void *)(a3 + 888);
        double v104 = (double)(v103 - FigGetUpTimeNanoseconds()) / 1000000000.0;
        CFAbsoluteTime v105 = *(double *)(a3 + 920);
        int v106 = v56;
        double v107 = (double)v56;
        double v108 = *(double *)v134;
        double v109 = (double)(uint64_t)(*(void *)(a3 + 448) - *(void *)(a3 + 896)) / 1000000000.0;
        uint64_t v110 = *(void *)(a3 + 56);
        uint64_t v111 = *(void *)(a3 + 936);
        uint64_t v112 = *(void *)(a3 + 312);
        double v113 = (double)at[0].value / 1000000000.0;
        ShouldWalkBacuint64_t k = segPumpStreamSwitchShouldWalkBack(a2, a3, v106, (int)*(double *)v134, 1);
        uint64_t result = segPumpDetermineMediaSegmentToSwitchTo(a2, v110, v111, v112, 1, ShouldWalkBack, v55, (void *)a3, v102, v104, v105, v107, v108, v109, v113, (uint64_t *)&v132, &v133);
        if (result) {
          return result;
        }
      }
      int v128 = v17;
      *(void *)(a3 + 920) = 0;
      *(void *)(a3 + 120) = 0xBFF0000000000000;
      *(unsigned char *)(a3 + 861) = 0;
LABEL_60:
      uint64_t v31 = -1;
      goto LABEL_61;
    }
    return 0;
  }
  int v128 = v17;
  double v28 = *(double *)(a3 + 920);
  if (v28 == 0.0) {
    goto LABEL_60;
  }
  uint64_t v29 = (void *)(a3 + 920);
  uint64_t matched = segPumpTryToMatchDate(a2, *(void *)(a3 + 56), (double *)(a3 + 120), (double *)v134, v28, *(double *)(a3 + 120));
  uint64_t v31 = matched;
  if (!matched)
  {
    if (!*(unsigned char *)(a2 + 8002))
    {
      double v57 = *(double *)(a3 + 928);
      if (v57 > 0.0) {
        segPumpStreamSyncTimeRolledPast(a3, *(double *)(a3 + 120), v57);
      }
    }
    void *v29 = 0;
    *(void *)(a3 + 928) = 0;
    goto LABEL_61;
  }
  void *v29 = 0;
  *(void *)(a3 + 928) = 0;
  if (matched != -1 || *(unsigned char *)(a2 + 8002))
  {
LABEL_61:
    double v42 = *(double *)(a3 + 120);
    if (v42 <= 0.0) {
      goto LABEL_149;
    }
    if (v42 >= FigMediaPlaylistGetPlaylistActiveDurationSecs(*(void *)(a3 + 56)))
    {
      double v43 = 1.0;
      if (!FigMediaPlaylistHasEndTag(*(void *)(a3 + 56))) {
        double v43 = segPumpGetMinimumPrebufferReservation(a2, *(void *)(a3 + 56)) + *(double *)(a2 + 7960);
      }
      LODWORD(v130) = 0;
      LOBYTE(type) = 0;
      float v44 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v45 = LODWORD(v130);
      if (os_log_type_enabled(v44, LOBYTE(type))) {
        unsigned int v46 = v45;
      }
      else {
        unsigned int v46 = v45 & 0xFFFFFFFE;
      }
      if (v46)
      {
        uint64_t v47 = &stru_1EE53F4B8;
        unsigned int v126 = a4;
        double v48 = a5;
        if (a2 && *(void *)(a2 + 8760)) {
          uint64_t v47 = *(__CFString **)(a2 + 8760);
        }
        uint64_t v49 = *(void *)a3;
        double v50 = *(double *)(a3 + 120);
        double PlaylistActiveDurationSecs = FigMediaPlaylistGetPlaylistActiveDurationSecs(*(void *)(a3 + 56));
        *(_DWORD *)uint64_t v134 = 136316162;
        *(void *)&v134[4] = "segPumpDetermineMediaSegmentToDeliver";
        __int16 v135 = 2114;
        uint64_t v136 = v47;
        __int16 v137 = 2048;
        uint64_t v138 = v49;
        __int16 v139 = 2048;
        double v140 = v50;
        __int16 v141 = 2048;
        double v142 = PlaylistActiveDurationSecs;
        _os_log_send_and_compose_impl();
        a5 = v48;
        a4 = v126;
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      *(double *)(a3 + 120) = fmax(FigMediaPlaylistGetPlaylistActiveDurationSecs(*(void *)(a3 + 56)) - v43, 0.0);
      *(void *)(a3 + 128) = 0xBFF0000000000000;
    }
    if (dword_1E9351350)
    {
      LODWORD(v130) = 0;
      LOBYTE(type) = 0;
      BOOL v58 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v59 = LODWORD(v130);
      if (os_log_type_enabled(v58, LOBYTE(type))) {
        unsigned int v60 = v59;
      }
      else {
        unsigned int v60 = v59 & 0xFFFFFFFE;
      }
      if (v60)
      {
        CFDataRef v61 = &stru_1EE53F4B8;
        if (a2 && *(void *)(a2 + 8760)) {
          CFDataRef v61 = *(__CFString **)(a2 + 8760);
        }
        uint64_t v62 = *(void *)a3;
        double v63 = *(double *)(a3 + 120);
        double v64 = *(double *)(a3 + 128);
        *(_DWORD *)uint64_t v134 = 136316162;
        *(void *)&v134[4] = "segPumpDetermineMediaSegmentToDeliver";
        __int16 v135 = 2114;
        uint64_t v136 = v61;
        __int16 v137 = 2048;
        uint64_t v138 = v62;
        __int16 v139 = 2048;
        double v140 = v63;
        __int16 v141 = 2048;
        double v142 = v64;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (!FigMediaPlaylistHasEndTag(*(void *)(a3 + 56)))
    {
      if (v31)
      {
        double v77 = *(double *)(a3 + 128);
        if (v77 > 0.0)
        {
          double v78 = (double)*(uint64_t *)(a3 + 448) / 1000000000.0 - v77;
          double v79 = FigMediaPlaylistGetPlaylistActiveDurationSecs(*(void *)(a3 + 56)) - v78;
          *(double *)(a3 + 120) = v79;
          *(double *)(a3 + 120) = segPumpEnsureOffsetInDiscDomain(*(void *)(a3 + 312), *(void *)(a3 + 56), *(void *)(a3 + 936), v79);
          if (dword_1E9351350)
          {
            LODWORD(v130) = 0;
            LOBYTE(type) = 0;
            double v80 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int v81 = LODWORD(v130);
            if (os_log_type_enabled(v80, LOBYTE(type))) {
              unsigned int v82 = v81;
            }
            else {
              unsigned int v82 = v81 & 0xFFFFFFFE;
            }
            if (v82)
            {
              uint64_t v83 = &stru_1EE53F4B8;
              if (a2 && *(void *)(a2 + 8760)) {
                uint64_t v83 = *(__CFString **)(a2 + 8760);
              }
              uint64_t v84 = *(void *)a3;
              double v85 = *(double *)(a3 + 120);
              unint64_t v86 = *(void *)(a3 + 448) / 0x3B9ACA00uLL;
              *(_DWORD *)uint64_t v134 = 136316418;
              *(void *)&v134[4] = "segPumpDetermineMediaSegmentToDeliver";
              __int16 v135 = 2114;
              uint64_t v136 = v83;
              __int16 v137 = 2048;
              uint64_t v138 = v84;
              __int16 v139 = 2048;
              double v140 = v78;
              __int16 v141 = 2048;
              double v142 = v85;
              __int16 v143 = 2048;
              unint64_t v144 = v86;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
        }
      }
    }
    uint64_t v133 = 0;
    if (!segPumpIterateMedia(*(void *)(a3 + 56), (uint64_t *)&v133, (uint64_t *)&v132, (uint64_t *)&v131))
    {
      double v67 = 0.0;
      goto LABEL_135;
    }
    char v65 = 0;
    uint64_t v66 = 0;
    double v67 = 0.0;
    while (1)
    {
      unsigned int v68 = v131;
      if (!*((unsigned char *)segPumpGetMediaFilePrivateData(v131) + 96))
      {
        int IsMarkedIndependent = FigMediaSegmentSpecifierIsMarkedIndependent((uint64_t)v68);
        int v70 = v133;
        if (IsMarkedIndependent)
        {
          uint64_t v66 = (uint64_t)v133;
          char v65 = v68;
        }
        if (v67 + FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)v68) > *(double *)(a3 + 120))
        {
LABEL_110:
          if (v132)
          {
            if (v65 && v132 != v65)
            {
              double v72 = *((double *)segPumpGetMediaFilePrivateData(v132) + 4);
              double v73 = *((double *)segPumpGetMediaFilePrivateData(v65) + 4);
              if (v66 != FigMediaSegmentSpecifierGetNextSegment((uint64_t)v133))
              {
                CFArrayRef NextSegment = (const void *)v66;
                do
                {
                  segPumpSetDeliveryStatusForMediaFileAndParts(NextSegment, 0);
                  CFArrayRef NextSegment = (const void *)FigMediaSegmentSpecifierGetNextSegment((uint64_t)NextSegment);
                }
                while (NextSegment != (const void *)FigMediaSegmentSpecifierGetNextSegment((uint64_t)v133));
              }
              FigMediaSegmentSpecifierGetPartialSegments(v66);
              for (uint64_t k = (const void *)FigCFArrayGetFirstValue();
                    k != v65;
                    uint64_t k = (const void *)FigMediaSegmentSpecifierGetNextSegment(v76))
              {
                uint64_t v76 = (uint64_t)k;
                if (!k) {
                  break;
                }
                segPumpSetDeliveryStatusForMediaFileAndParts(k, 1);
              }
              double v67 = v67 - (v72 - v73);
              CFErrorRef v132 = v65;
              uint64_t v133 = (const void *)v66;
            }
          }
LABEL_135:
          if (dword_1E9351350)
          {
            LODWORD(v130) = 0;
            LOBYTE(type) = 0;
            int v87 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int v88 = LODWORD(v130);
            if (os_log_type_enabled(v87, LOBYTE(type))) {
              unsigned int v89 = v88;
            }
            else {
              unsigned int v89 = v88 & 0xFFFFFFFE;
            }
            if (v89)
            {
              unsigned int v90 = &stru_1EE53F4B8;
              if (a2 && *(void *)(a2 + 8760)) {
                unsigned int v90 = *(__CFString **)(a2 + 8760);
              }
              if (a3) {
                uint64_t v91 = *(void *)a3;
              }
              else {
                uint64_t v91 = -1;
              }
              *(_DWORD *)uint64_t v134 = 136315906;
              *(void *)&v134[4] = "segPumpDetermineMediaSegmentToDeliver";
              __int16 v135 = 2114;
              uint64_t v136 = v90;
              __int16 v137 = 2048;
              uint64_t v138 = v91;
              __int16 v139 = 2048;
              double v140 = v67;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
LABEL_149:
          __asm { FMOV            V0.2D, #-1.0 }
          *(_OWORD *)(a3 + 120) = _Q0;
          if (v128) {
            *(unsigned char *)(a3 + 863) = 1;
          }
          uint64_t v96 = v133;
          if (!v133) {
            goto LABEL_156;
          }
          while (1)
          {
            uint64_t v97 = segPumpGetMediaFilePrivateData(v96);
            if (!v97[73] && !v97[96] && !v97[99]) {
              break;
            }
            uint64_t v96 = (const void *)FigMediaSegmentSpecifierGetNextSegment((uint64_t)v96);
            if (!v96) {
              goto LABEL_156;
            }
          }
          uint64_t v133 = v96;
          FirstCFNumberRef Value = v132;
          if (v132)
          {
LABEL_166:
            while (1)
            {
              int v101 = segPumpGetMediaFilePrivateData(FirstValue);
              if (!v101[73] && !v101[96] && !v101[99]) {
                break;
              }
              FirstCFNumberRef Value = (const void *)FigMediaSegmentSpecifierGetNextSegment((uint64_t)FirstValue);
              if (!FirstValue) {
                goto LABEL_170;
              }
            }
            CFErrorRef v132 = FirstValue;
            uint64_t v96 = v133;
            goto LABEL_191;
          }
          CFArrayRef v115 = (const __CFArray *)FigMediaSegmentSpecifierGetPartialSegments((uint64_t)v96);
          if (FigMediaSegmentSpecifierIsFragment((uint64_t)v96))
          {
LABEL_176:
            FigMediaSegmentSpecifierGetPartialSegments((uint64_t)v96);
            FirstCFNumberRef Value = (const void *)FigCFArrayGetFirstValue();
            CFErrorRef v132 = FirstValue;
            if (FirstValue) {
              goto LABEL_166;
            }
LABEL_170:
            CFErrorRef v132 = 0;
            goto LABEL_156;
          }
          if (!v115 || CFArrayGetCount(v115) < 1) {
            goto LABEL_160;
          }
          uint64_t v117 = (const void *)FigCFArrayGetFirstValue();
          uint64_t v118 = segPumpGetMediaFilePrivateData(v117);
          if (!v118[73] && !v118[96] && !v118[99])
          {
            uint64_t v121 = FigCFArrayGetFirstValue();
            if (v121 && (uint64_t v122 = *(void *)(a3 + 776), v122 >= 1))
            {
              uint64_t v123 = *(void *)(a3 + 768);
              while (!*(void *)v123 || *(void *)(*(void *)v123 + 8) != v121)
              {
                v123 += 8;
                if (!--v122) {
                  goto LABEL_203;
                }
              }
            }
            else
            {
LABEL_203:
              uint64_t v124 = FigCFArrayGetFirstValue();
              if (v124 != FigCFArrayGetLastValue()) {
                goto LABEL_191;
              }
            }
          }
          LastCFNumberRef Value = (const void *)FigCFArrayGetLastValue();
          uint64_t v120 = segPumpGetMediaFilePrivateData(LastValue);
          if (!v120[73] && !v120[96] && !v120[99]) {
            goto LABEL_176;
          }
LABEL_191:
          if (v96)
          {
LABEL_160:
            uint64_t result = 0;
          }
          else
          {
LABEL_156:
            FigMediaPlaylistGetMediaSegmentSpecifiers(*(void *)(a3 + 56));
            int v98 = (const void *)FigCFArrayGetLastValue();
            uint64_t v99 = segPumpGetMediaFilePrivateData(v98);
            uint64_t result = FigMediaPlaylistHasEndTag(*(void *)(a3 + 56));
            if (result)
            {
              if (!v99[73] || *(unsigned char *)(a3 + 871))
              {
                uint64_t v96 = 0;
                goto LABEL_160;
              }
              uint64_t result = segPumpDispatchAsyncMediaDelivery(a2, a3, -1, -1, *(const void **)(a3 + 296), (uint64_t)segPumpDeliverEnd);
            }
            uint64_t v96 = 0;
          }
          *a4 = v96;
          *a5 = v132;
          return result;
        }
        segPumpSetDeliveryStatusForMediaFileAndParts(v68, 1);
        double v67 = v67 + FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)v68);
        if (v68 == v132)
        {
          FigMediaSegmentSpecifierGetPartialSegments((uint64_t)v70);
          if (v68 == (const void *)FigCFArrayGetLastValue()
            && !FigMediaSegmentSpecifierIsFragment((uint64_t)v70))
          {
            segPumpSetDeliveryStatusForMediaFileAndParts(v70, 1);
          }
        }
      }
      if (!segPumpIterateMedia(*(void *)(a3 + 56), (uint64_t *)&v133, (uint64_t *)&v132, (uint64_t *)&v131)) {
        goto LABEL_110;
      }
    }
  }
  uint64_t v32 = 384;
  if (!*(void *)a3) {
    uint64_t v32 = 400;
  }
  uint64_t v33 = *(void *)(a2 + v32);
  uint64_t v34 = *(void *)(v33 + 56);
  if (v34)
  {
    at[0].CMTimeValue value = 0;
    double v35 = FigMediaPlaylistGetPlaylistActiveDurationSecs(v34);
    double MinimumPrebufferReservation = segPumpGetMinimumPrebufferReservation(a2, *(void *)(v33 + 56));
    segPumpGetLastDiscAndDateForTimeReadInPlaylist(*(void *)(v33 + 56), 0, (double *)&at[0].value, v35 - (MinimumPrebufferReservation + *(double *)(a2 + 7960)));
    if (*(double *)&at[0].value != 0.0)
    {
      CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
      CFDateRef v38 = CFDateCreate(AllocatorForMedia, *(CFAbsoluteTime *)&at[0].value);
      segPumpSyncTimeRolledPastToExistingStream(a1, a2, a3, v38);
      if (v38) {
        CFRelease(v38);
      }
    }
  }
  uint64_t v39 = 0;
  uint64_t v40 = MEMORY[0x1E4F1F9F8];
  while (1)
  {
    uint64_t v41 = *(uint64_t **)(a2 + 384 + v39);
    if (v41[2])
    {
      uint64_t result = segPumpMakeDataCallbackWithOSStatus((uint64_t)a1, v41, *(const void **)(a2 + 176), 0, 8u, v41[38], v40, 0, -1, 0, 0, 0);
      if (result) {
        break;
      }
    }
    v39 += 16;
    if (v39 == 48)
    {
      at[0] = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA10];
      return segPumpSetCurrentTime(a1, at, MEMORY[0x1E4F1F9F8], 0, 0, MEMORY[0x1E4F1F9F8], MEMORY[0x1E4F1F9F8], MEMORY[0x1E4F1F9F8], 0);
    }
  }
  return result;
}

uint64_t segPumpStreamReadAheadPermitsNextRead(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 8712)) {
    return 1;
  }
  if (*(unsigned char *)(a1 + 8209)) {
    return 1;
  }
  uint64_t v4 = *(void *)(a2 + 768);
  if (!*(void *)v4) {
    return 1;
  }
  if (a3)
  {
    uint64_t v5 = *(void *)(a2 + 776);
    if (v5 >= 1)
    {
      while (!*(void *)v4 || *(void *)(*(void *)v4 + 8) != a3)
      {
        v4 += 8;
        if (!--v5) {
          return 0;
        }
      }
      return 1;
    }
  }
  return 0;
}

uint64_t segPumpCheckCachedVariantsAndRequestSwitch(uint64_t a1, uint64_t a2, const void *a3, int a4, double a5)
{
  valuePtr[16] = *(double *)MEMORY[0x1E4F143B8];
  CFTypeRef v46 = 0;
  double v47 = 0.0;
  uint64_t v44 = 0;
  CFTypeRef cf = 0;
  uint64_t v9 = *(void *)(a1 + 9560);
  uint64_t v10 = *(const void **)(a1 + 9528);
  if (v9) {
    BOOL v11 = v10 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  int v12 = !v11;
  if (v10) {
    CFTypeRef v13 = CFRetain(v10);
  }
  else {
    CFTypeRef v13 = 0;
  }
  CFTypeRef v43 = 0;
  if (!*(unsigned char *)(a1 + 8240) || *(void *)a2 != *(void *)(a1 + 8416) || *(void *)(a2 + 256))
  {
    CFTypeRef v36 = 0;
    uint64_t Mutable = 0;
    CFTypeRef v17 = 0;
LABEL_78:
    uint64_t LongestContiguousMediaStreamInCacheAtTime = 0;
    goto LABEL_79;
  }
  if (a3) {
    double v14 = *((double *)segPumpGetMediaFilePrivateData(a3) + 4);
  }
  else {
    double v14 = 0.0;
  }
  double v47 = v14;
  double v15 = v14;
  if (!*(unsigned char *)(a2 + 872))
  {
    LODWORD(a5) = *(_DWORD *)(a1 + 8);
    double v15 = v14 - (double)*(unint64_t *)&a5;
    double v47 = v15;
  }
  if (v15 < 0.0)
  {
    double v47 = 0.0;
    double v15 = 0.0;
  }
  int v42 = v12;
  CFNumberRef v16 = *(const __CFNumber **)(a1 + 8232);
  if (v16)
  {
    valuePtr[0] = 0.0;
    CFNumberGetValue(v16, kCFNumberDoubleType, valuePtr);
    if (valuePtr[0] <= v47) {
      double v15 = v47;
    }
    else {
      double v15 = valuePtr[0];
    }
    double v47 = v15;
  }
  CFTypeRef v17 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  while (1)
  {
    valuePtr[0] = 0.0;
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    uint64_t LongestContiguousMediaStreamInCacheAtTime = FigStreamingCacheGetLongestContiguousMediaStreamInCacheAtTime(*(void *)(a1 + 296), *(_DWORD *)a2, &v44, &v46, &cf, valuePtr, v15);
    if (LongestContiguousMediaStreamInCacheAtTime)
    {
LABEL_94:
      CFTypeRef v36 = 0;
      uint64_t Mutable = 0;
      goto LABEL_79;
    }
    double v21 = v47;
    double v22 = valuePtr[0];
    if (v17)
    {
      char v23 = 1;
    }
    else
    {
      uint64_t v18 = v44;
      if (v46)
      {
        CFTypeRef v17 = CFRetain(v46);
        char v23 = 0;
      }
      else
      {
        char v23 = 0;
        CFTypeRef v17 = 0;
      }
    }
    *(unsigned char *)(a2 + 405) = v23;
    BOOL v24 = a4 != 0;
    if (!a4)
    {
      BOOL v24 = 0;
      if (v46)
      {
        AlternateEntryFromURLForCacheLookup = segPumpGetAlternateEntryFromURLForCacheLookup(a1, v46, (uint64_t)cf);
        if (!AlternateEntryFromURLForCacheLookup) {
          goto LABEL_94;
        }
        uint64_t v26 = *(void *)(a1 + 8144);
        if (v26) {
          BOOL v24 = *((_DWORD *)AlternateEntryFromURLForCacheLookup + 6) >= *(_DWORD *)(v26 + 24);
        }
        else {
          BOOL v24 = 1;
        }
      }
    }
    double v27 = v15 - v21 + v22;
    uint64_t v28 = v44;
    if (v44 == v19 || !v46 || !v24) {
      break;
    }
    double v29 = v27 + v47;
    if (!*(unsigned char *)(a2 + 872)) {
      double v29 = v29 - (double)(*(_DWORD *)(a1 + 8) >> 1);
    }
    if (v29 <= v15) {
      goto LABEL_94;
    }
    CFRelease(v46);
    CFTypeRef v46 = 0;
    double v15 = v29;
    uint64_t v19 = v28;
    if (v27 > 60.0) {
      goto LABEL_51;
    }
  }
  if (v17) {
    CFRelease(v17);
  }
  CFTypeRef v17 = 0;
  double v29 = v15;
LABEL_51:
  if (v29 + v27 <= v14 + 1.0) {
    segPumpClearSuggestedAlternate((void *)a1);
  }
  if (!v17 || v18 == *(void *)(a2 + 64))
  {
    CFTypeRef v36 = 0;
    uint64_t Mutable = 0;
    goto LABEL_78;
  }
  if (dword_1E9351350)
  {
    os_log_and_send_and_compose_flags_and_os_log_double type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t LongestContiguousMediaStreamInCacheAtTime = (uint64_t)segPumpGetAlternateEntryFromURLForCacheLookup(a1, v17, (uint64_t)cf);
  if (!LongestContiguousMediaStreamInCacheAtTime) {
    goto LABEL_70;
  }
  uint64_t v31 = *(const void **)(a1 + 8232);
  if (v31)
  {
    CFRelease(v31);
    *(void *)(a1 + 8232) = 0;
  }
  CFNumberRef v32 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberDoubleType, &v47);
  *(void *)(a1 + 8232) = v32;
  if (v32)
  {
    uint64_t v33 = *(const void **)(a1 + 8224);
    uint64_t v34 = *(const void **)(LongestContiguousMediaStreamInCacheAtTime + 8);
    *(void *)(a1 + 8224) = v34;
    if (v34) {
      CFRetain(v34);
    }
    if (v33) {
      CFRelease(v33);
    }
    if (v42)
    {
      uint64_t v35 = FigAlternateSkipEqualOrLowerBitratesFilterCreate(*(void **)(a1 + 56), *(CFTypeRef *)(a1 + 8224), @"PartialCache", 630, &v43);
      if (!v35)
      {
        uint64_t v35 = FigAlternateSelectionBossAddFilter(*(void *)(a1 + 9528), v43);
        if (!v35) {
          uint64_t v35 = FigAlternateSelectionBossApplyFilters(v13);
        }
      }
      uint64_t LongestContiguousMediaStreamInCacheAtTime = v35;
LABEL_70:
      CFTypeRef v36 = 0;
      uint64_t Mutable = 0;
      goto LABEL_79;
    }
    CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    uint64_t Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      uint64_t v39 = *(const void **)(a1 + 8232);
      if (v39) {
        CFTypeRef v36 = CFRetain(v39);
      }
      else {
        CFTypeRef v36 = 0;
      }
      CFDictionaryAddValue(Mutable, @"FBP_AlternateValue", *(const void **)(LongestContiguousMediaStreamInCacheAtTime + 8));
      CFDictionaryAddValue(Mutable, @"FBP_CacheContext", v36);
      segPumpReadyNotification((void *)a1, @"FBP_SuggestedAlternate", Mutable);
      if (FigRetainProxyGetLockCount() >= 2)
      {
        uint64_t v40 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        uint64_t LongestContiguousMediaStreamInCacheAtTime = 4294954651;
        goto LABEL_79;
      }
      segPumpUnlockAndSendAllPendingNotifications();
      FigRetainProxyLockMutex();
      goto LABEL_78;
    }
    CFTypeRef v36 = 0;
  }
  else
  {
    CFTypeRef v36 = 0;
    uint64_t Mutable = 0;
  }
  uint64_t LongestContiguousMediaStreamInCacheAtTime = 4294954655;
LABEL_79:
  if (v13) {
    CFRelease(v13);
  }
  if (v43) {
    CFRelease(v43);
  }
  if (v46) {
    CFRelease(v46);
  }
  if (v36) {
    CFRelease(v36);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v17) {
    CFRelease(v17);
  }
  if (cf) {
    CFRelease(cf);
  }
  return LongestContiguousMediaStreamInCacheAtTime;
}

uint64_t segPumpIsMediaSegmentWaitingOnCryptKey(uint64_t result)
{
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  if (result)
  {
    uint64_t v1 = result;
    uint64_t result = FigMediaSegmentSpecifierGetContentKeySpecifier(result);
    if (result)
    {
      uint64_t ContentKeySpecifier = (const void *)FigMediaSegmentSpecifierGetContentKeySpecifier(v1);
      return !segPumpGetCryptKeyCommonData(ContentKeySpecifier, &v4, &v3) && *(unsigned char *)(v3 + 144) == 0;
    }
  }
  return result;
}

uint64_t segPumpStreamDoDeliveryFollowUp(uint64_t a1, uint64_t a2, uint64_t a3, int a4, const void *a5, unsigned char *a6)
{
  int v6 = a6;
  char v55 = 0;
  if (!*(unsigned char *)(a3 + 1136))
  {
    uint64_t v8 = a2;
    if ((a4 || !*(void *)(*(void *)(a3 + 696) + 8)) && (!*(unsigned char *)(a3 + 869) || !*(unsigned char *)(a2 + 7995)))
    {
      uint64_t result = segPumpTrySpeculativeRead(a1, (uint64_t *)a2, a3, a5, &v55);
      if (result) {
        goto LABEL_94;
      }
      segPumpReadOrScheduleIndexFileRead(a1, v8, a3);
    }
    if (!*(void *)(a3 + 256)) {
      goto LABEL_84;
    }
    uint64_t v11 = *(void *)(a3 + 264) ? *(void *)(a3 + 264) : *(void *)(a3 + 256);
    uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
    uint64_t v13 = (uint64_t)DerivedStorage;
    uint64_t v58 = 0;
    uint64_t v14 = *(void *)(a3 + 696);
    double v15 = v14 ? *(const void **)(v14 + 32) : 0;
    CFTypeRef cf = 0;
    if (!segPumpShouldDoSegmentReadAheads(DerivedStorage)) {
      goto LABEL_84;
    }
    uint64_t v54 = v8;
    uint64_t v16 = *(void *)(a3 + 776);
    if (v16 < 1)
    {
      uint64_t v17 = 0;
      if (!v11) {
        goto LABEL_77;
      }
    }
    else
    {
      uint64_t v17 = 0;
      while (1)
      {
        uint64_t v18 = *(unsigned char *)(v13 + 329) ? 1 : *(int *)(v13 + 8212);
        if (v17 >= v18) {
          break;
        }
        uint64_t v19 = *(void *)(*(void *)(a3 + 768) + 8 * v17);
        if (!v19) {
          break;
        }
        if (*(void *)(v19 + 32)) {
          double v15 = *(const void **)(v19 + 32);
        }
        uint64_t v20 = *(void *)(v19 + 8);
        if (v20) {
          uint64_t v11 = v20;
        }
        if (v16 == ++v17)
        {
          uint64_t v17 = *(void *)(a3 + 776);
          break;
        }
      }
      if (!v11)
      {
LABEL_77:
        int v40 = 0;
LABEL_80:
        CFTypeRef v38 = cf;
LABEL_81:
        uint64_t v8 = v54;
        if (v38) {
          CFRelease(v38);
        }
        uint64_t result = 4294951670;
        if (v40 == -15626)
        {
LABEL_94:
          if (!v6) {
            return result;
          }
          goto LABEL_95;
        }
LABEL_84:
        int v42 = segPumpStreamSchedulePreloadHintRead(a1, (void *)a3);
        uint64_t result = 4294951670;
        if (v42 == -15626) {
          goto LABEL_94;
        }
        CFTypeRef v43 = (unsigned char *)CMBaseObjectGetDerivedStorage();
        if (segPumpStreamHasPreloadMapHint(a3)
          && segPumpShouldDoSegmentReadAheads(v43)
          && segPumpStreamGetFuturePreloadCount((uint64_t)v43, (void *)a3)
          && !segPumpMediaConnectionIsActive(*(void *)(a3 + 800)))
        {
          uint64_t PreloadMapHint = (const void *)FigMediaPlaylistGetPreloadMapHint(*(void *)(a3 + 56));
          CFURLRef v45 = *(const __CFURL **)(a3 + 16);
          CFURLRef v46 = *(const __CFURL **)(a3 + 24);
          MediaFilePrivateData = segPumpGetMediaFilePrivateData(PreloadMapHint);
          segPumpEnsureMediaSegmentURLs(PreloadMapHint, v45, v46);
          if (!MediaFilePrivateData[2])
          {
            int MediaFile = FigSignalErrorAt();
LABEL_92:
            int v51 = MediaFile;
            uint64_t result = 4294951670;
            if (v51 == -15626) {
              goto LABEL_94;
            }
            goto LABEL_93;
          }
          CFURLRef v48 = *(const __CFURL **)(a3 + 16);
          CFURLRef v49 = *(const __CFURL **)(a3 + 24);
          segPumpGetMediaFilePrivateData(PreloadMapHint);
          segPumpEnsureMediaSegmentURLs(PreloadMapHint, v48, v49);
          if (segPumpStreamGetMapNumber((void *)a3) < 0)
          {
            *((void *)segPumpGetMediaFilePrivateData(PreloadMapHint) + 6) = 0;
            *((void *)segPumpGetMediaFilePrivateData(PreloadMapHint) + 7) = 0;
            int MediaFile = segPumpReadMediaFile(a1, a3, PreloadMapHint, 1, 1, 0, (uint64_t *)(a3 + 800));
            goto LABEL_92;
          }
        }
LABEL_93:
        uint64_t result = segPumpReadNextCryptKeyForStream(a1, v8, (void *)a3);
        goto LABEL_94;
      }
    }
    uint64_t v53 = v6;
    while (1)
    {
      if (v17 >= *(void *)(a3 + 776)) {
        goto LABEL_77;
      }
      uint64_t v21 = *(unsigned char *)(v13 + 329) ? 1 : *(int *)(v13 + 8212);
      if (v17 >= v21) {
        goto LABEL_77;
      }
      CFArrayRef NextSegment = (const void *)FigMediaSegmentSpecifierGetNextSegment(v11);
      if (!NextSegment)
      {
        if (!FigMediaSegmentSpecifierIsFragment(v11)) {
          goto LABEL_77;
        }
        uint64_t v23 = *(void *)(a3 + 56);
        if (!v23) {
          goto LABEL_77;
        }
        FigMediaPlaylistGetMediaSegmentSpecifiers(v23);
        LastCFNumberRef Value = FigCFArrayGetLastValue();
        if (!LastValue) {
          goto LABEL_77;
        }
        uint64_t PreviousSegment = LastValue;
        while (1)
        {
          FigMediaSegmentSpecifierGetPartialSegments(PreviousSegment);
          if (v11 == FigCFArrayGetLastValue()) {
            break;
          }
          uint64_t PreviousSegment = FigMediaSegmentSpecifierGetPreviousSegment(PreviousSegment);
          if (!PreviousSegment) {
            goto LABEL_77;
          }
        }
        CFArrayRef NextSegment = (const void *)FigMediaSegmentSpecifierGetNextSegment(PreviousSegment);
        if (!NextSegment) {
          goto LABEL_77;
        }
      }
      FigMediaSegmentSpecifierGetPartialSegments((uint64_t)NextSegment);
      if (FigCFArrayGetFirstValue() && FigMediaSegmentSpecifierIsFragment((uint64_t)NextSegment))
      {
        FigMediaSegmentSpecifierGetPartialSegments((uint64_t)NextSegment);
        CFArrayRef NextSegment = (const void *)FigCFArrayGetFirstValue();
      }
      uint64_t v26 = segPumpGetMediaFilePrivateData(NextSegment);
      if (v26[13]) {
        goto LABEL_78;
      }
      double v27 = v26;
      if (FigMediaSegmentSpecifierGetMapSegmentSpecifier((uint64_t)NextSegment))
      {
        char v56 = 0;
        uint64_t MapSegmentSpecifier = (const void *)FigMediaSegmentSpecifierGetMapSegmentSpecifier((uint64_t)NextSegment);
        if (!segPumpIsMapEntryCached(v13, a3, MapSegmentSpecifier, &v56) && !v56) {
          goto LABEL_78;
        }
      }
      if (NextSegment && FigMediaSegmentSpecifierGetType((uint64_t)NextSegment) == 1) {
        goto LABEL_78;
      }
      if (*(unsigned char *)(v13 + 322))
      {
        if (FigMediaSegmentSpecifierGetContentKeySpecifier((uint64_t)NextSegment))
        {
          uint64_t ContentKeySpecifier = (const void *)FigMediaSegmentSpecifierGetContentKeySpecifier((uint64_t)NextSegment);
          if (segPumpDoesCryptKeyRequireFetch(ContentKeySpecifier)) {
            goto LABEL_78;
          }
        }
      }
      if (FigMediaSegmentSpecifierIsMarkedAsGap(v11)
        || FigMediaSegmentSpecifierIsMarkedAsGap((uint64_t)NextSegment))
      {
        break;
      }
      if (segPumpSeeIfMediaFileIsInCache(v13, a3, NextSegment, &v58, 0)) {
        goto LABEL_78;
      }
      CFURLRef v30 = *(const __CFURL **)(a3 + 16);
      CFURLRef v31 = *(const __CFURL **)(a3 + 24);
      CFNumberRef v32 = segPumpGetMediaFilePrivateData(NextSegment);
      segPumpEnsureMediaSegmentURLs(NextSegment, v30, v31);
      if (!v32[2])
      {
        int v37 = FigSignalErrorAt();
LABEL_101:
        int v40 = v37;
        goto LABEL_79;
      }
      CFURLRef v33 = *(const __CFURL **)(a3 + 16);
      CFURLRef v34 = *(const __CFURL **)(a3 + 24);
      uint64_t v35 = (const __CFURL **)segPumpGetMediaFilePrivateData(NextSegment);
      segPumpEnsureMediaSegmentURLs(NextSegment, v33, v34);
      if (!segPumpShouldRequestURLAsHTTPURL(v13, v35[2])) {
        goto LABEL_78;
      }
      CFTypeRef v36 = *(void **)(a3 + 680);
      if (v36)
      {
        while (!segPumpMediaConnectionIncludesMedia(a3, (uint64_t)v36, NextSegment))
        {
          CFTypeRef v36 = (void *)*v36;
          if (!v36) {
            goto LABEL_67;
          }
        }
LABEL_78:
        int v40 = 0;
LABEL_79:
        int v6 = v53;
        goto LABEL_80;
      }
LABEL_67:
      int v37 = segPumpCopyAndCreateNetworkURLFromPumpCache(v13, a3, &cf);
      if (v37) {
        goto LABEL_101;
      }
      CFTypeRef v38 = cf;
      if (!FigCFHTTPCompareURLs(*(const void **)(a3 + 24), cf))
      {
        int v40 = 0;
        int v6 = v53;
        goto LABEL_81;
      }
      if (v38)
      {
        CFRelease(v38);
        CFTypeRef cf = 0;
      }
      v27[6] = 0;
      v27[7] = 0;
      v27[13] = v58;
      int v37 = segPumpReadMediaFile(a1, a3, NextSegment, 1, 0, v15, (uint64_t *)(*(void *)(a3 + 768) + 8 * v17));
      if (v37) {
        goto LABEL_101;
      }
      uint64_t v39 = *(void *)(*(void *)(a3 + 768) + 8 * v17);
      int v6 = v53;
      if (!v39) {
        goto LABEL_77;
      }
      int v40 = 0;
      uint64_t v41 = *(const void **)(v39 + 32);
      if (v41) {
        double v15 = v41;
      }
      ++v17;
      uint64_t v11 = (uint64_t)NextSegment;
      if (!NextSegment) {
        goto LABEL_80;
      }
    }
    if (FigMediaSegmentSpecifierIsMarkedAsGap(v11)) {
      uint64_t v52 = v11;
    }
    else {
      uint64_t v52 = (uint64_t)NextSegment;
    }
    int v37 = segPumpHandleMediaFileNetworkError(a1, (void *)a3, 0, v52, 4294951877);
    goto LABEL_101;
  }
  uint64_t result = 0;
  if (a6) {
LABEL_95:
  }
    *int v6 = v55;
  return result;
}

uint64_t segPumpGetNetworkLatencyFromPredictor(uint64_t a1, void *a2)
{
  memset(&v18[8], 0, 216);
  segPumpMakeNetworkPredictionInput(a1, (uint64_t)v18);
  uint64_t v17 = 0;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v14 = 0u;
  memset(v13, 0, sizeof(v13));
  *a2 = 0;
  uint64_t v4 = *(void *)(a1 + 112);
  *(void *)&v18[16] = 60000000000;
  *(void *)uint64_t v18 = v4;
  *(void *)&v18[168] |= 8uLL;
  uint64_t v5 = *(void *)(a1 + 96);
  uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v10 = *(void *)(VTable + 16);
  uint64_t result = VTable + 16;
  uint64_t v9 = v10;
  if (v10) {
    uint64_t v11 = v9;
  }
  else {
    uint64_t v11 = 0;
  }
  int v12 = *(uint64_t (**)(uint64_t, uint64_t, _OWORD *, _OWORD *))(v11 + 8);
  if (v12)
  {
    v19[10] = *(_OWORD *)&v18[160];
    v19[11] = *(_OWORD *)&v18[176];
    v19[12] = *(_OWORD *)&v18[192];
    v19[13] = *(_OWORD *)&v18[208];
    v19[6] = *(_OWORD *)&v18[96];
    v19[7] = *(_OWORD *)&v18[112];
    v19[8] = *(_OWORD *)&v18[128];
    v19[9] = *(_OWORD *)&v18[144];
    int v19[2] = *(_OWORD *)&v18[32];
    v19[3] = *(_OWORD *)&v18[48];
    v19[4] = *(_OWORD *)&v18[64];
    v19[5] = *(_OWORD *)&v18[80];
    v19[0] = *(_OWORD *)v18;
    v19[1] = *(_OWORD *)&v18[16];
    uint64_t result = v12(v5, UpTimeNanoseconds, v19, v13);
    if (!result) {
      *a2 = v14;
    }
  }
  return result;
}

uint64_t segPumpTryToMatchDate(uint64_t a1, uint64_t a2, double *a3, double *a4, CFAbsoluteTime a5, double a6)
{
  v42[29] = *MEMORY[0x1E4F143B8];
  v42[0] = 0;
  uint64_t v40 = 0;
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFDateRef v13 = CFDateCreate(AllocatorForMedia, a5);
  uint64_t v41 = 0;
  double v14 = 0.0;
  if (segPumpIterateMedia(a2, &v41, &v40, v42))
  {
    double v15 = -1.79769313e308;
    while (1)
    {
      uint64_t v17 = v40;
      uint64_t v16 = v41;
      FigMediaSegmentSpecifierGetPartialSegments(v41);
      if (v17 == FigCFArrayGetFirstValue() && FigMediaSegmentSpecifierGetDateStamp(v16))
      {
        uint64_t DateStamp = FigMediaSegmentSpecifierGetDateStamp(v16);
        double v14 = MEMORY[0x199707BD0](DateStamp);
      }
      if (v14 != 0.0)
      {
        if (v15 == -1.79769313e308) {
          double v15 = v14;
        }
        uint64_t v19 = (const void *)v42[0];
        if (v14 <= a5 && v14 + FigMediaSegmentSpecifierGetTimeInSeconds(v42[0]) > a5) {
          goto LABEL_16;
        }
        double v14 = v14 + FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)v19);
      }
      if (!segPumpIterateMedia(a2, &v41, &v40, v42)) {
        goto LABEL_15;
      }
    }
  }
  double v15 = -1.79769313e308;
LABEL_15:
  uint64_t v19 = (const void *)v42[0];
LABEL_16:
  if (v19)
  {
    double v20 = *((double *)segPumpGetMediaFilePrivateData(v19) + 4);
    FigMediaPlaylistGetMediaSegmentSpecifiers(a2);
    FirstCFNumberRef Value = (const void *)FigCFArrayGetFirstValue();
    double v22 = v20 - *((double *)segPumpGetMediaFilePrivateData(FirstValue) + 4);
    CFAllocatorRef v23 = (const __CFAllocator *)FigGetAllocatorForMedia();
    CFDateRef v24 = CFDateCreate(v23, v14);
    unsigned int v25 = 3 * *(_DWORD *)(a1 + 8);
    if (v22 <= a6 - (double)v25 || v22 >= (double)v25 + a6)
    {
      double v27 = 0.0;
      if (dword_1E9351350)
      {
        os_log_and_send_and_compose_flags_and_os_log_double type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      uint64_t v38 = -1;
      double PlaylistActiveDurationSecs = 0.0;
      if (!v24) {
        goto LABEL_41;
      }
LABEL_38:
      CFRelease(v24);
      if (!v13) {
        goto LABEL_43;
      }
LABEL_42:
      CFRelease(v13);
      goto LABEL_43;
    }
    double v27 = v14 + FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)v19) - a5;
    if (dword_1E9351350)
    {
      CFURLRef v34 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v38 = 0;
    double PlaylistActiveDurationSecs = v22 + FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)v19) - v27;
    if (v24) {
      goto LABEL_38;
    }
LABEL_41:
    if (!v13) {
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  double PlaylistActiveDurationSecs = FigMediaPlaylistGetPlaylistActiveDurationSecs(a2);
  double v30 = *(double *)(a1 + 16);
  if (v30 <= 0.0)
  {
    LODWORD(v30) = *(_DWORD *)(a1 + 8);
    double v30 = (double)*(unint64_t *)&v30;
  }
  if (v14 <= v30 + a5 + 2.22044605e-16)
  {
    double v27 = 0.0;
    if (dword_1E9351350)
    {
      uint64_t v35 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v38 = 0;
    goto LABEL_41;
  }
  CFAllocatorRef v31 = (const __CFAllocator *)FigGetAllocatorForMedia();
  if (v15 <= a5)
  {
    CFDateRef v36 = CFDateCreate(v31, v14);
    if (dword_1E9351350)
    {
      int v37 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    double v27 = 0.0;
    if (v36) {
      CFRelease(v36);
    }
    uint64_t v38 = 1;
  }
  else
  {
    CFDateRef v32 = CFDateCreate(v31, v15);
    if (dword_1E9351350)
    {
      CFURLRef v33 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    double v27 = 0.0;
    if (v32) {
      CFRelease(v32);
    }
    uint64_t v38 = -1;
  }
  double PlaylistActiveDurationSecs = 0.0;
  if (v13) {
    goto LABEL_42;
  }
LABEL_43:
  if (!v38)
  {
    *a3 = PlaylistActiveDurationSecs;
    *a4 = v27;
  }
  return v38;
}

uint64_t segPumpDetermineMediaSegmentToSwitchTo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, void *a8, double a9, double a10, CFAbsoluteTime a11, double a12, double a13, double a14, double a15, uint64_t *a16, void *a17)
{
  v92[31] = *(double *)MEMORY[0x1E4F143B8];
  v92[0] = a9;
  uint64_t v91 = 0;
  *a16 = 0;
  if (a11 == 0.0) {
    uint64_t matched = -1;
  }
  else {
    uint64_t matched = segPumpTryToMatchDate(a1, a2, v92, (double *)&v91, a11, a9);
  }
  if (!FigMediaPlaylistHasEndTag(a2))
  {
    if (matched)
    {
      if (v92[0] >= a14)
      {
        v92[0] = segPumpEnsureOffsetInDiscDomain(a4, a2, a3, v92[0] - a14);
        if (dword_1E9351350)
        {
          os_log_and_send_and_compose_flags_and_os_log_double type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
    }
  }
  if (a7 && !FigMediaPlaylistHasEndTag(a2))
  {
    int v26 = 0;
    int v86 = 0;
    goto LABEL_19;
  }
  int v26 = 1;
  if (!a2) {
    goto LABEL_16;
  }
  int v86 = 1;
  if (!*(_DWORD *)(a1 + 8088))
  {
    int PlaylistType = FigMediaPlaylistGetPlaylistType(a2);
    if ((!matched || PlaylistType == 2) && !*a8 && FigMediaPlaylistHasIndependentSegments(a2))
    {
      BOOL v28 = *(void *)(*(void *)(a1 + 400) + 16) == 0;
      goto LABEL_17;
    }
LABEL_16:
    BOOL v28 = 1;
LABEL_17:
    int v86 = v28;
  }
LABEL_19:
  uint64_t v83 = matched;
  CFIndex v29 = 0;
  uint64_t v30 = 0;
  CFAllocatorRef v31 = 0;
  double v32 = 0.0;
  double v33 = 0.0;
  int v34 = a5;
  while (1)
  {
    CFArrayRef MediaSegmentSpecifiers = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(a2);
    if (MediaSegmentSpecifiers) {
      CFArrayRef MediaSegmentSpecifiers = (const __CFArray *)CFArrayGetCount(MediaSegmentSpecifiers);
    }
    if (v29 >= (uint64_t)MediaSegmentSpecifiers) {
      break;
    }
    CFArrayRef v36 = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(a2);
    CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v36, v29);
    CFArrayRef PartialSegments = (const __CFArray *)FigMediaSegmentSpecifierGetPartialSegments((uint64_t)ValueAtIndex);
    if (!PartialSegments || !CFArrayGetCount(PartialSegments))
    {
      if ((v26 & 1) == 0 && FigMediaSegmentSpecifierIsMarkedAsGap((uint64_t)ValueAtIndex))
      {
        double v33 = v33 + FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)ValueAtIndex);
LABEL_61:
        double v33 = v33 + FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)ValueAtIndex);
        goto LABEL_62;
      }
      FigMediaPlaylistGetMediaSegmentSpecifiers(a2);
      if ((const void *)FigCFArrayGetLastValue() != ValueAtIndex)
      {
        if (v26)
        {
          TimeIndouble Seconds = FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)ValueAtIndex);
          if (v33 + TimeInSeconds < v92[0]
            || !v86 && vabdd_f64(v33 + FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)ValueAtIndex), v92[0]) < 0.001)
          {
LABEL_54:
            if (FigMediaSegmentSpecifierGetNextSegment((uint64_t)ValueAtIndex))
            {
              uint64_t NextSegment = FigMediaSegmentSpecifierGetNextSegment((uint64_t)ValueAtIndex);
              if (FigMediaSegmentSpecifierGetDiscontinuityDomain(NextSegment) + a4 > a3) {
                goto LABEL_67;
              }
            }
            goto LABEL_61;
          }
        }
        else if (v33 < v92[0])
        {
          goto LABEL_54;
        }
      }
      if (FigMediaSegmentSpecifierGetDiscontinuityDomain((uint64_t)ValueAtIndex) + a4 == a3) {
        goto LABEL_67;
      }
      if (dword_1E9351350)
      {
        CFURLRef v48 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        int v34 = a5;
      }
      goto LABEL_61;
    }
    CFArrayRef v39 = (const __CFArray *)FigMediaSegmentSpecifierGetPartialSegments((uint64_t)ValueAtIndex);
    CFIndex v40 = 0;
    double v41 = v92[0];
    if (v39)
    {
LABEL_26:
      CFIndex Count = CFArrayGetCount(v39);
      goto LABEL_28;
    }
    while (1)
    {
      CFIndex Count = 0;
LABEL_28:
      if (v40 >= Count) {
        break;
      }
      CFTypeRef v43 = CFArrayGetValueAtIndex(v39, v40);
      if (FigMediaSegmentSpecifierIsFragment((uint64_t)v43))
      {
        if (FigMediaSegmentSpecifierIsMarkedIndependent((uint64_t)v43)) {
          int HasIndependentSegments = 1;
        }
        else {
          int HasIndependentSegments = FigMediaPlaylistHasIndependentParts(a2) == 0;
        }
      }
      else
      {
        int HasIndependentSegments = FigMediaPlaylistHasIndependentSegments(a2);
      }
      if (v33 >= v41) {
        char v45 = v26;
      }
      else {
        char v45 = 0;
      }
      if (HasIndependentSegments
        && (v45 & 1) == 0
        && FigMediaSegmentSpecifierGetDiscontinuityDomain((uint64_t)v43) + a4 == a3)
      {
        double v32 = v33;
        uint64_t v30 = (uint64_t)ValueAtIndex;
        CFAllocatorRef v31 = v43;
      }
      if ((v26 & 1) == 0)
      {
        if (FigMediaSegmentSpecifierIsMarkedAsGap((uint64_t)v43)) {
          CFAllocatorRef v31 = 0;
        }
      }
      double v33 = v33 + FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)v43);
      ++v40;
      if (v39) {
        goto LABEL_26;
      }
    }
LABEL_62:
    if (v34 && !FigMediaSegmentSpecifierIsFragment((uint64_t)ValueAtIndex)) {
      segPumpSetDeliveryStatusForMediaFileAndParts(ValueAtIndex, 1);
    }
    ++v29;
  }
  CFStringRef ValueAtIndex = 0;
LABEL_67:
  if ((v26 & 1) == 0)
  {
    if (!v31 || (double v49 = v92[0], v32 < v49 - (segPumpGetMinimumPrebufferReservation(a1, 0) + *(double *)(a1 + 7960))))
    {
      *a16 = 0;
      return 4294954652;
    }
  }
  if (v34 && v31)
  {
    if (v30)
    {
      double v50 = (const void *)v30;
      do
      {
        segPumpSetDeliveryStatusForMediaFileAndParts(v50, 0);
        double v50 = (const void *)FigMediaSegmentSpecifierGetNextSegment((uint64_t)v50);
      }
      while (v50);
    }
    CFArrayRef v51 = (const __CFArray *)FigMediaSegmentSpecifierGetPartialSegments(v30);
    CFIndex v52 = 0;
    if (!v51) {
      goto LABEL_78;
    }
LABEL_77:
    for (CFIndex i = CFArrayGetCount(v51); v52 < i; CFIndex i = 0)
    {
      uint64_t v54 = CFArrayGetValueAtIndex(v51, v52);
      if (v54 == v31) {
        break;
      }
      segPumpSetDeliveryStatusForMediaFileAndParts(v54, 1);
      ++v52;
      if (v51) {
        goto LABEL_77;
      }
LABEL_78:
      ;
    }
    double v33 = v32;
    CFStringRef ValueAtIndex = (const void *)v30;
  }
  *a16 = (uint64_t)v31;
  if (ValueAtIndex)
  {
LABEL_87:
    if (FigMediaSegmentSpecifierIsDiscontinuity((uint64_t)ValueAtIndex))
    {
      double v56 = FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)ValueAtIndex);
    }
    else
    {
      if (!a6 && *a16)
      {
LABEL_146:
        double v72 = ValueAtIndex;
        if (!ValueAtIndex) {
          return 0;
        }
LABEL_141:
        if (FigMediaSegmentSpecifierIsFragment((uint64_t)v72) && !*a16)
        {
          FigMediaSegmentSpecifierGetPartialSegments((uint64_t)v72);
          *a16 = FigCFArrayGetFirstValue();
        }
        if (dword_1E9351350)
        {
          unsigned int v81 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v81, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        uint64_t result = 0;
        *a17 = v72;
        return result;
      }
      double v56 = FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)ValueAtIndex);
      double v57 = v92[0] - v33;
      if (!v83
        || *a16
        || FigMediaPlaylistHasIndependentSegments(a2)
        && FigMediaPlaylistGetPlaylistType(a2) == 2)
      {
        if (v86) {
          double v58 = 1.0;
        }
        else {
          double v58 = 0.0;
        }
      }
      else
      {
        LODWORD(v82) = *(_DWORD *)(a1 + 8);
        double v58 = (double)v82;
      }
      if (v57 < v58)
      {
        while (vabdd_f64(v57, v58) >= 0.001)
        {
          uint64_t PreviousSegment = FigMediaSegmentSpecifierGetPreviousSegment((uint64_t)ValueAtIndex);
          if (!PreviousSegment) {
            break;
          }
          unsigned int v60 = (const void *)PreviousSegment;
          if (FigMediaSegmentSpecifierGetDiscontinuityDomain(PreviousSegment) + a4 != a3) {
            break;
          }
          if (v34) {
            segPumpSetDeliveryStatusForMediaFileAndParts(v60, 0);
          }
          double v56 = v56 + FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)v60);
          double v57 = v57 + FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)v60);
          double v33 = v33 - FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)v60);
          CFStringRef ValueAtIndex = v60;
          if (v57 >= v58) {
            goto LABEL_106;
          }
        }
      }
      unsigned int v60 = ValueAtIndex;
LABEL_106:
      if (!FigMediaPlaylistHasIndependentSegments(a2)
        && (LODWORD(v61) = *(_DWORD *)(a1 + 8), v57 < (double)v61)
        && (uint64_t v62 = FigMediaSegmentSpecifierGetPreviousSegment((uint64_t)v60)) != 0
        && (CFStringRef ValueAtIndex = (const void *)v62, FigMediaSegmentSpecifierGetDiscontinuityDomain(v62) + a4 == a3))
      {
        if (v34) {
          segPumpSetDeliveryStatusForMediaFileAndParts(ValueAtIndex, 0);
        }
        double v56 = v56 + FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)ValueAtIndex);
        double v33 = v33 - FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)ValueAtIndex);
      }
      else
      {
        CFStringRef ValueAtIndex = v60;
      }
    }
    if (a13 > 0.0 && a6)
    {
      double v63 = v56 * a12 / a13 + a15;
      double v64 = FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)ValueAtIndex);
      double v65 = v33 + v64 - v92[0] + a10;
      double v66 = a10 / *(double *)(a1 + 8704);
      segPumpGetMediaFilePrivateData(ValueAtIndex);
      if (dword_1E9351350)
      {
        double v67 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      uint64_t v68 = FigMediaSegmentSpecifierGetPreviousSegment((uint64_t)ValueAtIndex);
      if (v68)
      {
        double v69 = a15;
        double v70 = v66 - v63;
        double v71 = 0.0;
        while (1)
        {
          double v72 = (const void *)v68;
          if (FigMediaSegmentSpecifierIsDiscontinuity((uint64_t)ValueAtIndex)) {
            break;
          }
          DiscontinuityCFErrorDomain Domain = FigMediaSegmentSpecifierGetDiscontinuityDomain((uint64_t)v72);
          if (DiscontinuityDomain != FigMediaSegmentSpecifierGetDiscontinuityDomain((uint64_t)ValueAtIndex)) {
            break;
          }
          segPumpGetMediaFilePrivateData(v72);
          double v74 = FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)v72);
          BOOL v75 = FigMediaSegmentSpecifierGetBitRate((uint64_t)v72) <= 0.0;
          double BitRate = a12;
          if (!v75) {
            double BitRate = FigMediaSegmentSpecifierGetBitRate((uint64_t)v72);
          }
          double v77 = v74 * BitRate;
          if (v71 < (double)(4 * *(_DWORD *)(a1 + 8)))
          {
            double v77 = v77 + v77;
            double v71 = v71 + FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)ValueAtIndex);
          }
          double v78 = v77 / a13 + v69;
          double v65 = v65 - FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)ValueAtIndex);
          if (dword_1E9351350)
          {
            double v79 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          if (v78 >= v70
            || v65 <= 0.0
            || v65 < 30.0
            && FigMediaSegmentSpecifierGetBitRate((uint64_t)v72) > 0.0
            && FigMediaSegmentSpecifierGetBitRate((uint64_t)v72) > a13)
          {
            break;
          }
          if (v65 <= FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)v72))
          {
            double v78 = v78 * 1.1;
            int v80 = a5;
            if (v65 / *(double *)(a1 + 8704) < v78) {
              goto LABEL_146;
            }
          }
          else
          {
            int v80 = a5;
          }
          if (v80) {
            segPumpSetDeliveryStatusForMediaFileAndParts(v72, 0);
          }
          double v70 = v70 - v78;
          FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)v72);
          double v33 = v33 - FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)v72);
          uint64_t v68 = FigMediaSegmentSpecifierGetPreviousSegment((uint64_t)v72);
          CFStringRef ValueAtIndex = v72;
          if (!v68) {
            goto LABEL_141;
          }
        }
      }
    }
    goto LABEL_146;
  }
  if (!v26) {
    return 4294954652;
  }
  uint64_t result = FigSignalErrorAt();
  if (!result) {
    goto LABEL_87;
  }
  return result;
}

uint64_t segPumpStreamSwitchShouldWalkBack(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  if (segPumpConnectedInterfaceIsWWAN(a1) || *(uint64_t *)a2 > 1)
  {
    unsigned int v11 = 0;
  }
  else
  {
    if (a5) {
      BOOL v10 = *(unsigned char *)(a2 + 864) == 0;
    }
    else {
      BOOL v10 = 0;
    }
    unsigned int v11 = v10;
  }
  if (*(_DWORD *)(a1 + 8088)) {
    BOOL v12 = 0;
  }
  else {
    BOOL v12 = a4 < 2 * a3;
  }
  if (v12) {
    return 0;
  }
  else {
    return v11;
  }
}

double segPumpEnsureOffsetInDiscDomain(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v12 = 0;
  for (double i = 0.0; segPumpIterateMedia(a2, &v13, &v12, &v14); double i = i + FigMediaSegmentSpecifierGetTimeInSeconds(v9))
  {
    uint64_t v9 = v14;
    if (FigMediaSegmentSpecifierGetDiscontinuityDomain(v14) + a1 > a3) {
      break;
    }
    if (i + FigMediaSegmentSpecifierGetTimeInSeconds(v9) > a4
      && FigMediaSegmentSpecifierGetDiscontinuityDomain(v9) + a1 == a3)
    {
      if (i < a4) {
        double i = a4;
      }
      break;
    }
  }
  if (i != a4 && v14 != 0) {
    return i + FigMediaSegmentSpecifierGetTimeInSeconds(v14) * 0.125;
  }
  return i;
}

void segPumpDeliverEnd(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = 0;
  CFTypeRef cf = 0;
  uint64_t v10 = segPumpLockAndCopyPumpFromRetainProxy(a1, &cf, &v13);
  if (v10)
  {
    DataCallbacuint64_t k = v10;
LABEL_6:
    segPumpSendEndCallbackForAllActiveStreamsWithOSStatus(a1, DataCallback);
    goto LABEL_7;
  }
  if (*(unsigned char *)(a2 + 857))
  {
    *(unsigned char *)(a2 + 857) = 0;
    unsigned int v11 = 10;
  }
  else
  {
    unsigned int v11 = 2;
  }
  DataCallbacuint64_t k = segPumpMakeDataCallback((uint64_t)cf, (uint64_t *)a2, *(const void **)(v13 + 176), 0, v11, *(void *)(a2 + 304), MEMORY[0x1E4F1F9F8], 0, 0, a7, 0, 0);
  *(unsigned char *)(a2 + 1136) = 1;
  if (DataCallback) {
    goto LABEL_6;
  }
LABEL_7:
  segPumpUnlockAndSendAllPendingNotifications();
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t segPumpGetLastDiscAndDateForTimeReadInPlaylist(uint64_t a1, double *a2, double *a3, double a4)
{
  uint64_t v27 = 0;
  BOOL v28 = 0;
  if (a1)
  {
    uint64_t v26 = 0;
    if (segPumpIterateMedia(a1, &v26, &v27, (uint64_t *)&v28))
    {
      double v8 = 0.0;
      double v9 = 0.0;
      double v10 = 0.0;
      while (1)
      {
        uint64_t v11 = (uint64_t)v28;
        MediaFilePrivateData = segPumpGetMediaFilePrivateData(v28);
        uint64_t v13 = v26;
        uint64_t v14 = v27;
        FigMediaSegmentSpecifierGetPartialSegments(v26);
        if (v14 == FigCFArrayGetFirstValue() && FigMediaSegmentSpecifierGetDateStamp(v13))
        {
          uint64_t DateStamp = FigMediaSegmentSpecifierGetDateStamp(v13);
          double v8 = MEMORY[0x199707BD0](DateStamp);
        }
        if (FigMediaSegmentSpecifierIsDiscontinuity(v11) && MediaFilePrivateData[74]) {
          double v9 = v10 + FigMediaSegmentSpecifierGetTimeInSeconds(v11) * 0.5;
        }
        if (v10 + FigMediaSegmentSpecifierGetTimeInSeconds(v11) > a4) {
          break;
        }
        TimeIndouble Seconds = FigMediaSegmentSpecifierGetTimeInSeconds(v11);
        if (v8 != 0.0) {
          double v8 = v8 + FigMediaSegmentSpecifierGetTimeInSeconds(v11);
        }
        double v10 = v10 + TimeInSeconds;
        if (!segPumpIterateMedia(a1, &v26, &v27, (uint64_t *)&v28)) {
          goto LABEL_31;
        }
      }
      double v17 = a4 - v10;
      if (v8 == 0.0)
      {
        uint64_t v30 = 0;
        uint64_t v31 = 0;
        uint64_t v29 = 0;
        if (segPumpIterateMedia(a1, &v29, &v30, &v31))
        {
          double v18 = 0.0;
          while (1)
          {
            uint64_t v19 = v29;
            uint64_t v20 = v30;
            FigMediaSegmentSpecifierGetPartialSegments(v29);
            if (v20 == FigCFArrayGetFirstValue())
            {
              if (FigMediaSegmentSpecifierGetDateStamp(v19)) {
                break;
              }
            }
            double v18 = v18 + FigMediaSegmentSpecifierGetTimeInSeconds(v31);
            if (!segPumpIterateMedia(a1, &v29, &v30, &v31)) {
              goto LABEL_22;
            }
          }
          uint64_t v21 = FigMediaSegmentSpecifierGetDateStamp(v19);
          double v22 = MEMORY[0x199707BD0](v21) - v18;
          if (v22 == 0.0) {
            double v8 = v22;
          }
          else {
            double v8 = v10 + v17 + v22;
          }
        }
        else
        {
LABEL_22:
          double v8 = 0.0;
        }
      }
      else
      {
        double v8 = v17 + v8;
      }
      CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
      CFDateRef v24 = CFDateCreate(AllocatorForMedia, v8);
      if (v9 >= a4 + 2.0) {
        double v9 = a4 + 2.0;
      }
      if (v24) {
        CFRelease(v24);
      }
    }
    else
    {
      double v9 = 0.0;
      double v8 = 0.0;
    }
LABEL_31:
    if (a2) {
      *a2 = v9;
    }
    if (a3) {
      *a3 = v8;
    }
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t segPumpSetCurrentTime(const void *a1, CMTime *a2, uint64_t a3, int a4, int a5, CMTime *a6, CMTime *a7, CMTime *a8, int *a9)
{
  uint64_t v141 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMTimeFlags flags = a2->flags;
  uint64_t v124 = a1;
  CFIndex v18 = segPumpAPILockAndEnsureAPIStatus(a1, 1);
  if (v18) {
    goto LABEL_193;
  }
  if (a2->value < 0)
  {
    CFIndex v18 = FigSignalErrorAt();
LABEL_193:
    uint64_t MediaForAllStreams = v18;
    goto LABEL_189;
  }
  uint64_t v19 = (unsigned char *)(DerivedStorage + 8002);
  double MinTime = segPumpGetMinTime((void *)DerivedStorage);
  double MaxTime = segPumpGetMaxTime((void *)DerivedStorage);
  double v22 = segPumpGetMinimumPrebufferReservation(DerivedStorage, 0) + *(double *)(DerivedStorage + 7960);
  int v127 = flags & 5;
  if (v127 == 5 && !*v19)
  {
    LODWORD(lhs.value) = 0;
    segPumpCanContinueWithoutGap(DerivedStorage, (int *)&lhs);
    if (LODWORD(lhs.value) == 7 && (*(unsigned char *)(a3 + 12) & 1) != 0)
    {
      CMTime time = *(CMTime *)a3;
      if (CMTimeGetSeconds(&time) >= MaxTime - v22)
      {
        uint64_t MediaForAllStreams = 4294950458;
LABEL_189:
        double v33 = v124;
        return segPumpAPIUnlockAndSendNotificationThenCheckAPIStatus(v33, MediaForAllStreams);
      }
    }
  }
  if (a5)
  {
    uint64_t v23 = *(void *)(DerivedStorage + 384);
    if (!*(unsigned char *)(v23 + 872))
    {
      CMTime time = *a8;
      Float64 Seconds = CMTimeGetSeconds(&time);
      CMTimeMakeWithSeconds(&rhs, Seconds * 1.5, 1000);
      CMTime lhs = *a2;
      CMTimeSubtract(&time, &lhs, &rhs);
      *a2 = time;
      uint64_t v23 = *(void *)(DerivedStorage + 384);
    }
    uint64_t v25 = *(void *)(v23 + 56);
    uint64_t v26 = a3;
    if (v25)
    {
      CFArrayRef MediaSegmentSpecifiers = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(v25);
      if (MediaSegmentSpecifiers)
      {
        if (CFArrayGetCount(MediaSegmentSpecifiers) >= 1)
        {
          *(unsigned char *)(DerivedStorage + 8713) = 0;
          *(unsigned char *)(DerivedStorage + 8768) = 0;
        }
      }
    }
LABEL_20:
    int v122 = 1;
    goto LABEL_22;
  }
  if ((a6->flags & 0x1D) == 1)
  {
    uint64_t v26 = a3;
    if ((a7->flags & 0x1D) == 1)
    {
      CMTime time = *a6;
      long long v126 = *MEMORY[0x1E4F1FA48];
      *(_OWORD *)&lhs.CMTimeValue value = *MEMORY[0x1E4F1FA48];
      CMTimeEpoch v28 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
      lhs.CMTimeEpoch epoch = v28;
      if (CMTimeCompare(&time, &lhs)
        || (CMTime time = *a7, *(_OWORD *)&lhs.value = v126, lhs.epoch = v28, CMTimeCompare(&time, &lhs)))
      {
        int v122 = 0;
        goto LABEL_22;
      }
    }
    goto LABEL_20;
  }
  int v122 = 1;
  uint64_t v26 = a3;
LABEL_22:
  if (*(unsigned char *)(v26 + 12))
  {
    CMTime time = *a2;
    CMTime lhs = *(CMTime *)v26;
    BOOL v29 = CMTimeCompare(&time, &lhs) > 0;
  }
  else
  {
    BOOL v29 = 0;
  }
  CMTime time = *a2;
  double v30 = CMTimeGetSeconds(&time);
  CMTime time = *(CMTime *)v26;
  double v31 = CMTimeGetSeconds(&time);
  if (dword_1E9351350)
  {
    unsigned int v130 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*v19)
  {
    double v33 = a1;
    if (v30 > MaxTime
      && (uint64_t v34 = *(void *)(*(void *)(DerivedStorage + 384) + 56)) != 0
      && (CFArrayRef v35 = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(v34)) != 0
      && CFArrayGetCount(v35) >= 1
      || v30 == MaxTime)
    {
      double v30 = MaxTime + -0.001;
    }
  }
  else
  {
    double v33 = a1;
  }
  uint64_t v36 = 0;
  char v37 = 1;
  do
  {
    char v38 = v37;
    uint64_t v39 = *(void *)(DerivedStorage + 16 * v36 + 384);
    uint64_t v40 = *(void *)(v39 + 56);
    if (v40)
    {
      CFArrayRef v41 = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(v40);
      if (v41)
      {
        if (CFArrayGetCount(v41) >= 1)
        {
          if (*v19) {
            BOOL v42 = v29;
          }
          else {
            BOOL v42 = 0;
          }
          if (v42)
          {
            uint64_t v43 = *(void *)(v39 + 56);
            if (v43)
            {
              FigMediaPlaylistGetMediaSegmentSpecifiers(v43);
              LastCFNumberRef Value = FigCFArrayGetLastValue();
              if (!LastValue || MaxTime - FigMediaSegmentSpecifierGetTimeInSeconds(LastValue) <= v31)
              {
LABEL_187:
                uint64_t MediaForAllStreams = FigSignalErrorAt();
                return segPumpAPIUnlockAndSendNotificationThenCheckAPIStatus(v33, MediaForAllStreams);
              }
            }
          }
          if (v30 < MinTime) {
            double v30 = MinTime;
          }
        }
      }
    }
    char v37 = 0;
    uint64_t v36 = 1;
  }
  while ((v38 & 1) != 0);
  int v45 = *(unsigned char *)(a3 + 12) & (v30 > v31);
  BOOL v46 = v30 >= MinTime && v30 <= MaxTime;
  for (uint64_t i = 384; i != 432; i += 16)
  {
    uint64_t v48 = *(void *)(DerivedStorage + i);
    if (*(void *)(v48 + 16))
    {
      uint64_t v49 = *(void *)(v48 + 56);
      if (v49)
      {
        CFArrayRef v50 = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(v49);
        if (v50)
        {
          if (CFArrayGetCount(v50) >= 1)
          {
            BOOL v51 = v127 != 5 && *v19 == 0;
            if (v51 && !v46) {
              goto LABEL_187;
            }
          }
        }
      }
    }
  }
  *(_DWORD *)(DerivedStorage + 8680) = a4;
  segPumpClearSuggestedAlternate((void *)DerivedStorage);
  uint64_t v53 = *(void *)(DerivedStorage + 296);
  if (v53) {
    FigStreamingCacheHintPlaybackTime(v53, v30);
  }
  segPumpClearStatistics(DerivedStorage);
  segPumpCancelAllReadAheadAndResetData(DerivedStorage);
  uint64_t v54 = 384;
  int v55 = v127;
  do
  {
    segPumpStreamCancelPreloadReadAndResetData(DerivedStorage, *(void *)(DerivedStorage + v54));
    v54 += 16;
  }
  while (v54 != 432);
  uint64_t v120 = a7;
  uint64_t v121 = a6;
  for (uint64_t j = 384; j != 432; j += 16)
    segPumpStreamCancelPreloadMapReadAndResetData(DerivedStorage, *(void *)(DerivedStorage + j));
  uint64_t v57 = 0;
  CFDateRef v58 = 0;
  if (MaxTime - v22 >= 0.0) {
    double v59 = MaxTime - v22;
  }
  else {
    double v59 = 0.0;
  }
  if (v127 == 5) {
    int v60 = 0;
  }
  else {
    int v60 = v45;
  }
  int v123 = v122 & v60;
  double v61 = 1000000000.0;
  double v62 = -1000000000.0;
  double v63 = a9;
  do
  {
    uint64_t v64 = DerivedStorage + 16 * v57;
    uint64_t v65 = *(void *)(v64 + 384);
    ++*(void *)(v65 + 880);
    segPumpCancelMediaFileReadAndResetData(DerivedStorage, v65, 1, 0);
    segPumpSetStreamDiscontinuityDomain(DerivedStorage, (void *)v65, 0);
    if (!*(void *)(*(void *)(v64 + 384) + 16)) {
      goto LABEL_163;
    }
    if (v58) {
      CFRelease(v58);
    }
    uint64_t v67 = *(void *)(v65 + 56);
    if (!v67) {
      goto LABEL_110;
    }
    CFArrayRef v68 = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(v67);
    if (!v68 || CFArrayGetCount(v68) < 1) {
      goto LABEL_110;
    }
    CFDateRef v58 = 0;
    int v69 = 1;
    if (!*v19)
    {
      double v70 = v30;
      if (v30 <= v59) {
        goto LABEL_112;
      }
      if (v55 != 5 && dword_1E9351350)
      {
        unsigned int v130 = 0;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        double v71 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v72 = v130;
        if (os_log_type_enabled(v71, type)) {
          unsigned int v73 = v72;
        }
        else {
          unsigned int v73 = v72 & 0xFFFFFFFE;
        }
        if (v73)
        {
          double v74 = *(__CFString **)(DerivedStorage + 8760);
          if (!v74) {
            double v74 = &stru_1EE53F4B8;
          }
          uint64_t v75 = *(void *)v65;
          LODWORD(lhs.value) = 136316418;
          *(CMTimeValue *)((char *)&lhs.value + 4) = (CMTimeValue)"segPumpSetCurrentTime";
          LOWORD(lhs.flags) = 2114;
          *(void *)((char *)&lhs.flags + 2) = v74;
          HIWORD(lhs.epoch) = 2048;
          uint64_t v133 = v75;
          __int16 v134 = 2048;
          double v135 = v30;
          __int16 v136 = 2048;
          double v137 = MaxTime;
          __int16 v138 = 2048;
          double v139 = v22;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        double v63 = a9;
      }
      uint64_t v76 = *(void *)(v65 + 1048) + 1000000000 * *(unsigned int *)(DerivedStorage + 8);
      if (FigGetUpTimeNanoseconds() >= v76 || *(unsigned char *)(v65 + 1168))
      {
        if (v55 == 5)
        {
          int v69 = 0;
          CFDateRef v58 = 0;
        }
        else
        {
          double Current = CFAbsoluteTimeGetCurrent();
          uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
          CFDateRef v58 = CFDateCreate(*(CFAllocatorRef *)(DerivedStorage + 56), v30+ Current+ (double)(UpTimeNanoseconds - *(void *)(v65 + 1056)) / v62- *(double *)(v65 + 96)- *(double *)(v65 + 88));
          int v69 = 0;
        }
        goto LABEL_111;
      }
      if (v55 == 5)
      {
        if (dword_1E9351350)
        {
          unsigned int v130 = 0;
          os_log_type_t type = OS_LOG_TYPE_DEFAULT;
          double v79 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v80 = v130;
          if (os_log_type_enabled(v79, type)) {
            unsigned int v81 = v80;
          }
          else {
            unsigned int v81 = v80 & 0xFFFFFFFE;
          }
          if (v81)
          {
            unint64_t v82 = *(__CFString **)(DerivedStorage + 8760);
            if (!v82) {
              unint64_t v82 = &stru_1EE53F4B8;
            }
            uint64_t v83 = *(void *)v65;
            LODWORD(lhs.value) = 136316162;
            *(CMTimeValue *)((char *)&lhs.value + 4) = (CMTimeValue)"segPumpSetCurrentTime";
            LOWORD(lhs.flags) = 2114;
            *(void *)((char *)&lhs.flags + 2) = v82;
            HIWORD(lhs.epoch) = 2048;
            uint64_t v133 = v83;
            __int16 v134 = 2048;
            double v135 = v30;
            __int16 v136 = 2048;
            double v137 = v59;
            _os_log_send_and_compose_impl();
          }
          int v69 = 1;
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          CFDateRef v58 = 0;
          double v70 = v59;
          double v63 = a9;
        }
        else
        {
          CFDateRef v58 = 0;
          int v69 = 1;
          double v70 = v59;
        }
        goto LABEL_112;
      }
LABEL_110:
      CFDateRef v58 = 0;
      int v69 = 1;
    }
LABEL_111:
    double v70 = v30;
LABEL_112:
    *(unsigned char *)(v65 + 857) = 1;
    if (v63 && !*(unsigned char *)(DerivedStorage + 8712))
    {
      int v84 = *(_DWORD *)(v65 + 72) + 1;
      *(_DWORD *)(v65 + 72) = v84;
      v63[v57] = v84;
    }
    *(unsigned char *)(v65 + 861) = 0;
    *(_WORD *)(v65 + 401) = 256;
    if (v55 == 5 && *(unsigned char *)(v65 + 866))
    {
      if (!dword_1E9351350) {
        goto LABEL_160;
      }
      unsigned int v130 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      double v85 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v86 = v130;
      if (os_log_type_enabled(v85, type)) {
        unsigned int v87 = v86;
      }
      else {
        unsigned int v87 = v86 & 0xFFFFFFFE;
      }
      if (v87)
      {
        if (*(void *)(DerivedStorage + 8760)) {
          unsigned int v88 = *(__CFString **)(DerivedStorage + 8760);
        }
        else {
          unsigned int v88 = &stru_1EE53F4B8;
        }
        uint64_t v89 = *(void *)v65;
        double v90 = (double)(FigGetUpTimeNanoseconds() - *(void *)(v65 + 1056));
        LODWORD(lhs.value) = 136315906;
        *(CMTimeValue *)((char *)&lhs.value + 4) = (CMTimeValue)"segPumpSetCurrentTime";
        LOWORD(lhs.flags) = 2114;
        *(void *)((char *)&lhs.flags + 2) = v88;
        HIWORD(lhs.epoch) = 2048;
        uint64_t v133 = v89;
        double v33 = v124;
        __int16 v134 = 2048;
        double v135 = v90 / v61;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      int v55 = v127;
      goto LABEL_159;
    }
    if (!v69 || *(unsigned char *)(v65 + 1169))
    {
      if (v58) {
        CFTypeRef v91 = CFRetain(v58);
      }
      else {
        CFTypeRef v91 = 0;
      }
      *(void *)(v65 + 240) = v91;
      *(unsigned char *)(v65 + 866) = 1;
      segPumpResetConnection(DerivedStorage, v65 + 408);
      *(unsigned char *)(v65 + 859) = 0;
      segPumpStreamUpdateIndexExpectedArrival(DerivedStorage, v65);
      segPumpResetAllMediaFilePrivateDataForStream(v65);
      uint64_t MediaForAllStreams = segPumpSendIndexFileRequest((uint64_t)v33, DerivedStorage, v65);
      if (!MediaForAllStreams) {
        goto LABEL_160;
      }
LABEL_185:
      *(unsigned char *)(v65 + 857) = 0;
      if (v58) {
        goto LABEL_186;
      }
      return segPumpAPIUnlockAndSendNotificationThenCheckAPIStatus(v33, MediaForAllStreams);
    }
    uint64_t v93 = *(void *)(v65 + 56);
    if (!v93
      || (CFArrayRef v94 = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(v93)) == 0
      || CFArrayGetCount(v94) <= 0)
    {
      double v66 = v70 - *(double *)(v65 + 88);
      *(double *)(v65 + 120) = v66;
      *(void *)(v65 + 128) = 0xBFF0000000000000;
      *(void *)(v65 + 920) = 0;
      double v102 = *(const void **)(v65 + 232);
      if (v102)
      {
        CFRelease(v102);
        *(void *)(v65 + 232) = 0;
      }
      if (!dword_1E9351350) {
        goto LABEL_160;
      }
      unsigned int v130 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      uint64_t v103 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v104 = v130;
      if (os_log_type_enabled(v103, type)) {
        unsigned int v105 = v104;
      }
      else {
        unsigned int v105 = v104 & 0xFFFFFFFE;
      }
      if (v105)
      {
        int v106 = *(__CFString **)(DerivedStorage + 8760);
        if (!v106) {
          int v106 = &stru_1EE53F4B8;
        }
        uint64_t v107 = *(void *)v65;
        double v108 = *(double *)(v65 + 120);
        LODWORD(lhs.value) = 136316162;
        *(CMTimeValue *)((char *)&lhs.value + 4) = (CMTimeValue)"segPumpSetCurrentTime";
        LOWORD(lhs.flags) = 2114;
        *(void *)((char *)&lhs.flags + 2) = v106;
        HIWORD(lhs.epoch) = 2048;
        uint64_t v133 = v107;
        __int16 v134 = 2048;
        double v135 = v108;
        __int16 v136 = 1024;
        LODWORD(v137) = v57;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_159:
      double v63 = a9;
      goto LABEL_160;
    }
    double v119 = v61;
    double v95 = v62;
    *(void *)(v65 + 120) = 0xBFF0000000000000;
    uint64_t v96 = *(void *)(v65 + 56);
    segPumpResetAllMediaFilePrivateDataForStream(v65);
    CFIndex v97 = 0;
    double v98 = *(double *)(v65 + 88);
    while (1)
    {
      CFArrayRef Count = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(v96);
      if (Count) {
        CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
      }
      if (v97 >= (uint64_t)Count) {
        goto LABEL_166;
      }
      CFArrayRef v100 = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(v96);
      CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v100, v97);
      if (!*((unsigned char *)segPumpGetMediaFilePrivateData(ValueAtIndex) + 96)) {
        break;
      }
LABEL_146:
      ++v97;
    }
    double v66 = v98 + FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)ValueAtIndex);
    if (v66 <= v70 || v123 && *(void *)v65 == *(void *)(DerivedStorage + 8416) && v98 < v31)
    {
      segPumpSetDeliveryStatusForMediaFileAndParts(ValueAtIndex, 1);
      double v98 = v98 + FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)ValueAtIndex);
      goto LABEL_146;
    }
    if (v122)
    {
LABEL_166:
      double v63 = a9;
      goto LABEL_167;
    }
    CMTime time = *v121;
    double v118 = CMTimeGetSeconds(&time);
    double v63 = a9;
    if (FigMediaSegmentSpecifierGetNextSegment((uint64_t)ValueAtIndex))
    {
      double v117 = v22;
      TimeInFloat64 Seconds = FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)ValueAtIndex);
      CMTime time = *v120;
      double v113 = CMTimeGetSeconds(&time);
      double v66 = v98 + FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)ValueAtIndex);
      if (v98 < v118 || v113 < v66)
      {
        BOOL v114 = v113 < v66;
        double v22 = v117;
        if (!v114) {
          goto LABEL_179;
        }
      }
      else
      {
        double v66 = v70 - v98;
        double v22 = v117;
        if (v70 - v98 > v98 + TimeInSeconds - v70)
        {
LABEL_179:
          segPumpSetDeliveryStatusForMediaFileAndParts(ValueAtIndex, 1);
          double v66 = FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)ValueAtIndex);
          double v98 = v98 + v66;
        }
      }
    }
LABEL_167:
    *(double *)(v65 + 104) = v98;
    if (!*(unsigned char *)(DerivedStorage + 8712))
    {
      *(unsigned char *)(v65 + 1169) = 0;
      double v62 = v95;
      double v61 = v119;
      goto LABEL_161;
    }
    float v111 = *(float *)(DerivedStorage + 8696);
    uint64_t v112 = FigGetUpTimeNanoseconds();
    CMTimeMakeWithSeconds(&v128, v70, 1000);
    CMTime time = *(CMTime *)a3;
    uint64_t MediaForAllStreams = segPumpStepNextFrame(v33, &time, v112, &v128, 1, v63, v111);
    double v62 = v95;
    double v61 = v119;
    if (MediaForAllStreams) {
      goto LABEL_185;
    }
LABEL_160:
    int v109 = *(unsigned __int8 *)(DerivedStorage + 8712);
    *(unsigned char *)(v65 + 1169) = 0;
    if (!v109)
    {
LABEL_161:
      uint64_t v110 = *(const void **)(v65 + 288);
      if (v110)
      {
        CFRelease(v110);
        *(void *)(v65 + 288) = 0;
        *(void *)(v65 + 320) = -1;
      }
    }
LABEL_163:
    ++v57;
  }
  while (v57 != 3);
  if (*(unsigned char *)(DerivedStorage + 8712))
  {
    uint64_t MediaForAllStreams = 0;
    if (!v58) {
      return segPumpAPIUnlockAndSendNotificationThenCheckAPIStatus(v33, MediaForAllStreams);
    }
  }
  else
  {
    uint64_t MediaForAllStreams = segPumpDeliverNextMediaForAllStreams(v33, DerivedStorage, v66);
    if (!v58) {
      return segPumpAPIUnlockAndSendNotificationThenCheckAPIStatus(v33, MediaForAllStreams);
    }
  }
LABEL_186:
  CFRelease(v58);
  return segPumpAPIUnlockAndSendNotificationThenCheckAPIStatus(v33, MediaForAllStreams);
}

void segPumpClearSuggestedAlternate(void *a1)
{
  if (a1[1028])
  {
    if (a1[1195])
    {
      uint64_t v2 = a1[1191];
      if (v2)
      {
        FigAlternateSelectionBossRemoveFilter(v2, @"PartialCache");
        FigAlternateSelectionBossApplyFilters((const void *)a1[1191]);
      }
    }
  }
  uint64_t v3 = (const void *)a1[1029];
  if (v3)
  {
    CFRelease(v3);
    a1[1029] = 0;
  }
  uint64_t v4 = (const void *)a1[1028];
  if (v4)
  {
    CFRelease(v4);
    a1[1028] = 0;
  }
}

void segPumpCancelAllReadAheadAndResetData(uint64_t a1)
{
  for (uint64_t i = 0; i != 3; ++i)
  {
    uint64_t v3 = *(void *)(a1 + 16 * i + 384);
    if (*(uint64_t *)(v3 + 776) >= 1)
    {
      uint64_t v4 = 0;
      do
      {
        segPumpStreamCancelReadAheadAndResetDataAtIndex(a1, v3, 0);
        ++v4;
      }
      while (v4 < *(void *)(v3 + 776));
    }
  }
}

CFArrayRef segPumpResetAllMediaFilePrivateDataForStream(uint64_t a1)
{
  CFArrayRef result = *(const __CFArray **)(a1 + 56);
  if (result)
  {
    for (CFIndex i = 0; ; ++i)
    {
      CFArrayRef MediaSegmentSpecifiers = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers((uint64_t)result);
      if (MediaSegmentSpecifiers) {
        CFArrayRef MediaSegmentSpecifiers = (const __CFArray *)CFArrayGetCount(MediaSegmentSpecifiers);
      }
      if (i >= (uint64_t)MediaSegmentSpecifiers) {
        break;
      }
      CFArrayRef v5 = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(*(void *)(a1 + 56));
      CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v5, i);
      MediaFilePrivateData = (char *)segPumpGetMediaFilePrivateData(ValueAtIndex);
      if (!MediaFilePrivateData[96])
      {
        *((void *)MediaFilePrivateData + 6) = 0;
        *((void *)MediaFilePrivateData + 7) = 0;
        *(_DWORD *)(MediaFilePrivateData + 71) = 0;
        *((void *)MediaFilePrivateData + 8) = 0;
        *((void *)MediaFilePrivateData + 14) = 0;
        *((void *)MediaFilePrivateData + 15) = 0;
        CFArrayRef PartialSegments = (const __CFArray *)FigMediaSegmentSpecifierGetPartialSegments((uint64_t)ValueAtIndex);
        CFIndex v9 = 0;
        if (PartialSegments)
        {
LABEL_9:
          CFIndex Count = CFArrayGetCount(PartialSegments);
          goto LABEL_11;
        }
        while (1)
        {
          CFIndex Count = 0;
LABEL_11:
          if (v9 >= Count) {
            break;
          }
          uint64_t v11 = CFArrayGetValueAtIndex(PartialSegments, v9);
          uint64_t v12 = (char *)segPumpGetMediaFilePrivateData(v11);
          *((void *)v12 + 7) = 0;
          *((void *)v12 + 8) = 0;
          *((void *)v12 + 6) = 0;
          *(_DWORD *)(v12 + 71) = 0;
          ++v9;
          *((void *)v12 + 14) = 0;
          *((void *)v12 + 15) = 0;
          if (PartialSegments) {
            goto LABEL_9;
          }
        }
      }
      CFArrayRef result = *(const __CFArray **)(a1 + 56);
    }
    for (CFIndex j = 0; ; ++j)
    {
      CFArrayRef result = (const __CFArray *)FigMediaPlaylistGetMapSegmentSpecifiers(*(void *)(a1 + 56));
      if (result) {
        CFArrayRef result = (const __CFArray *)CFArrayGetCount(result);
      }
      if (j >= (uint64_t)result) {
        break;
      }
      CFArrayRef MapSegmentSpecifiers = (const __CFArray *)FigMediaPlaylistGetMapSegmentSpecifiers(*(void *)(a1 + 56));
      double v15 = CFArrayGetValueAtIndex(MapSegmentSpecifiers, j);
      uint64_t v16 = (char *)segPumpGetMediaFilePrivateData(v15);
      if (!v16[96])
      {
        *((void *)v16 + 6) = 0;
        *((void *)v16 + 7) = 0;
        *(_DWORD *)(v16 + 71) = 0;
        *((void *)v16 + 8) = 0;
        *((void *)v16 + 14) = 0;
        *((void *)v16 + 15) = 0;
      }
    }
  }
  return result;
}

uint64_t segPumpDeliverNextMediaForAllStreams(const void *a1, uint64_t a2, double a3)
{
  v35[3] = *MEMORY[0x1E4F143B8];
  memset(v35, 0, 24);
  memset(v34, 0, sizeof(v34));
  memset(v33, 0, sizeof(v33));
  __int16 v32 = 0;
  if (*(unsigned char *)(a2 + 8712))
  {
    uint64_t v5 = *(void *)(a2 + 384);
    if (*(unsigned char *)(v5 + 866) || (*(_DWORD *)(v5 + 160) & 0xFFFFFFFE) != 4 || *(unsigned char *)(v5 + 1136)) {
      return 0;
    }
    if (!*(unsigned char *)(a2 + 8768) && !*(unsigned char *)(a2 + 8713) && (*(unsigned char *)(v5 + 857) || *(unsigned char *)(v5 + 862)))
    {
      double v26 = *(double *)(v5 + 120);
      if (v26 >= 0.0)
      {
        double v27 = dbl_1949989B0[*(float *)(a2 + 8736) >= 0.0];
        CMTimeMakeWithSeconds(&v31, v26, 1000);
        float v28 = *(float *)(a2 + 8736);
        uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
        CMTimeMakeWithSeconds(&v30, v27 + *(double *)(v5 + 120), 1000);
        return segPumpStepNextFrame(a1, &v31, UpTimeNanoseconds, &v30, 1, 0, v28);
      }
      return 0;
    }
    return segPumpTryIFrameFetch((uint64_t)a1, a2);
  }
  else
  {
    unint64_t v7 = v34;
    double v8 = v35;
    CFIndex v9 = v33;
    for (uint64_t i = 384; i != 432; i += 16)
    {
      uint64_t v11 = *(void **)(a2 + i);
      uint64_t v12 = v11[7];
      if (v12)
      {
        CFArrayRef MediaSegmentSpecifiers = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(v12);
        if (MediaSegmentSpecifiers)
        {
          if (CFArrayGetCount(MediaSegmentSpecifiers) >= 1)
          {
            *CFIndex v9 = v11[10];
            if (v11[32])
            {
              *double v8 = 0;
            }
            else
            {
              uint64_t result = segPumpDetermineMediaSegmentToDeliver(a1, a2, v11, v8, v7);
              if (result) {
                return result;
              }
            }
          }
        }
      }
      ++v7;
      ++v8;
      ++v9;
    }
    uint64_t v14 = *(void *)(a2 + 8416);
    double v15 = (const void *)v35[v14];
    if (v15 && *(void *)(a2 + 296))
    {
      uint64_t result = segPumpCheckCachedVariantsAndRequestSwitch(a2, *(void *)(a2 + 16 * v14 + 384), v15, 1, a3);
      if (result) {
        return result;
      }
      if (FigRetainProxyIsInvalidated()) {
        return 0;
      }
    }
    uint64_t v16 = (const void **)v35;
    double v17 = (const void **)v34;
    CFIndex v18 = v33;
    uint64_t v19 = 384;
    while (1)
    {
      uint64_t v20 = *(void *)(a2 + v19);
      uint64_t v21 = *(void *)(v20 + 56);
      if (v21)
      {
        CFArrayRef v22 = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(v21);
        if (v22)
        {
          if (CFArrayGetCount(v22) >= 1
            && (*(_DWORD *)(v20 + 160) & 0xFFFFFFFE) == 4
            && !*(unsigned char *)(v20 + 866)
            && *(void *)(v20 + 80) == *v18
            && !segPumpStreamShouldYieldToTrialSwitch(a2, (void *)v20))
          {
            uint64_t v23 = *v17;
            CFDateRef v24 = *v17;
            if (!*v17) {
              CFDateRef v24 = *v16;
            }
            if (segPumpStreamReadAheadPermitsNextRead(a2, v20, (uint64_t)v24) && !*(unsigned char *)(v20 + 1136))
            {
              HIBYTE(v32) = 0;
              uint64_t v25 = *v16;
              if (*v16)
              {
                uint64_t result = segPumpFetchOrDispatchMediaSegment((uint64_t)a1, a2, v20, *v16, v23, &v32, (char *)&v32 + 1);
                if (result) {
                  return result;
                }
              }
              else
              {
                uint64_t v25 = *(const void **)(v20 + 256);
                *uint64_t v16 = v25;
              }
              if (!(_BYTE)v32)
              {
                uint64_t result = segPumpStreamDoDeliveryFollowUp((uint64_t)a1, a2, v20, HIBYTE(v32), v25, 0);
                if (result) {
                  break;
                }
              }
            }
          }
        }
      }
      ++v16;
      ++v17;
      ++v18;
      v19 += 16;
      if (v19 == 432) {
        return 0;
      }
    }
  }
  return result;
}

void *segPumpGetAlternateEntryFromURLForCacheLookup(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t v3 = *(void **)(a1 + 8096);
  if (v3)
  {
    while (1)
    {
      CFDictionaryRef v9 = 0;
      CFURLRef v10 = 0;
      FigAlternateGetRenditionInfoForMediaType(v3[1], 1986618469, *(const void **)(a1 + 8392), *(const void **)(a1 + 8400), *(const void **)(a1 + 8408), 1, &v9, 0, &v10);
      CFTypeRef v7 = FigCFHTTPCreateURLString(v10);
      if (CFEqual(v7, a2) || a3 && FigCFEqual()) {
        break;
      }
      if (v7) {
        CFRelease(v7);
      }
      uint64_t v3 = (void *)*v3;
      if (!v3) {
        return v3;
      }
    }
    if (v7) {
      CFRelease(v7);
    }
  }
  return v3;
}

uint64_t segPumpTrySpeculativeRead(uint64_t a1, uint64_t *a2, uint64_t a3, const void *NextSegment, unsigned char *a5)
{
  uint64_t v10 = *(void *)(a3 + 80);
  FigRetainProxyRetain();
  uint64_t MediaFile = 0;
  *a5 = 0;
  if (!NextSegment || !a2[37]) {
    goto LABEL_34;
  }
  if (*(unsigned char *)(a3 + 405) || *(void *)(a3 + 256)) {
    goto LABEL_11;
  }
  uint64_t v12 = *(void *)(a3 + 880);
  while (*((unsigned char *)segPumpGetMediaFilePrivateData(NextSegment) + 99))
  {
LABEL_10:
    uint64_t NextSegment = (const void *)FigMediaSegmentSpecifierGetNextSegment((uint64_t)NextSegment);
    if (!NextSegment) {
      goto LABEL_11;
    }
  }
  char v26 = 0;
  if (*(const void **)(*(void *)(a3 + 696) + 8) == NextSegment)
  {
    uint64_t v14 = NextSegment;
    goto LABEL_14;
  }
  if (!segPumpCanAddSegmentToCache(a2, (void *)a3, NextSegment, &v26))
  {
    if (v26) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  uint64_t v14 = *(const void **)(*(void *)(a3 + 696) + 8);
LABEL_14:
  if (NextSegment == v14)
  {
LABEL_11:
    uint64_t MediaFile = 0;
  }
  else
  {
    uint64_t v15 = segPumpCheckCachedVariantsAndRequestSwitch((uint64_t)a2, a3, NextSegment, 0, v13);
    if (!v15)
    {
      if (!FigRetainProxyIsInvalidated() && *(void *)(a3 + 80) == v10 && v12 == *(void *)(a3 + 880))
      {
        uint64_t PreviousSegment = (const void *)FigMediaSegmentSpecifierGetPreviousSegment((uint64_t)NextSegment);
        if (PreviousSegment) {
          uint64_t v17 = *((void *)segPumpGetMediaFilePrivateData(PreviousSegment) + 4);
        }
        else {
          uint64_t v17 = 0;
        }
        *(void *)(a3 + 104) = v17;
        MediaFilePrivateData = (double *)segPumpGetMediaFilePrivateData(NextSegment);
        uint64_t v19 = 0;
        uint64_t v20 = a2 + 48;
        while (1)
        {
          if (v19 != *(void *)a3)
          {
            if (*(void *)(*v20 + 16))
            {
              double v21 = *(double *)(*v20 + 104);
              double v22 = MediaFilePrivateData[4];
              if (v21 < v22 - (double)(3 * FigMediaPlaylistGetTargetDuration(*(void *)(a3 + 56)))) {
                break;
              }
            }
          }
          ++v19;
          v20 += 2;
          if (v19 == 3)
          {
            if (*(void *)(*(void *)(a3 + 696) + 8))
            {
              uint64_t v23 = *(const void **)(a3 + 256);
              segPumpCancelMediaFileReadAndResetData((uint64_t)a2, a3, 1, 0);
              CFDateRef v24 = *(const void **)(a3 + 256);
              *(void *)(a3 + 256) = v23;
              if (v23) {
                CFRetain(v23);
              }
              if (v24) {
                CFRelease(v24);
              }
            }
            uint64_t MediaFile = segPumpReadMediaFile(a1, a3, NextSegment, 0, 0, 0, 0);
            if (!MediaFile) {
              *a5 = 1;
            }
            goto LABEL_34;
          }
        }
      }
      goto LABEL_11;
    }
    uint64_t MediaFile = v15;
  }
LABEL_34:
  FigRetainProxyRelease();
  return MediaFile;
}

void segPumpCryptKeyPrivateDataFinalize(void *a1)
{
  uint64_t v2 = (const void *)a1[2];
  if (v2)
  {
    CFRelease(v2);
    a1[2] = 0;
  }
  uint64_t v3 = (const void *)a1[4];
  if (v3)
  {
    CFRelease(v3);
    a1[4] = 0;
  }
  uint64_t v4 = (CCCryptorRef *)a1[3];
  if (v4)
  {
    FigCryptDispose(v4);
    a1[3] = 0;
  }
  uint64_t v5 = (const void *)a1[5];
  if (v5)
  {
    CFRelease(v5);
    a1[5] = 0;
  }
}

CFStringRef segPumpCryptKeyPrivateDataCopyDesc(uint64_t a1)
{
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  return CFStringCreateWithFormat(AllocatorForMedia, 0, @"CryptKeyPrivateData: %p", a1);
}

uint64_t segPumpResetCryptKeyRequestDataForCustomURLRequestID(const void *a1, uint64_t a2)
{
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t result = segPumpGetCryptKeyCommonData(a1, &v7, &v6);
  if (!result)
  {
    uint64_t v4 = v6;
    if (*(void *)(v6 + 80) == a2)
    {
      *(void *)(v6 + 80) = 0;
      *(unsigned char *)(v4 + 88) = 0;
      uint64_t v5 = (void *)(v4 + 96);
    }
    else
    {
      if (*(void *)(v6 + 120) != a2) {
        return result;
      }
      *(void *)(v6 + 120) = 0;
      *(unsigned char *)(v4 + 128) = 0;
      uint64_t v5 = (void *)(v4 + 136);
    }
    *uint64_t v5 = 0;
  }
  return result;
}

uint64_t segPumpCryptMemoryRequestCallback(uint64_t a1, uint64_t a2, int a3, uint64_t a4, void *a5, void *a6)
{
  uint64_t v20 = 0;
  CFTypeRef cf = 0;
  uint64_t v10 = segPumpLockAndCopyPumpFromRetainProxy(a1, &cf, (uint64_t *)&v20);
  if (!v10)
  {
    StreamFromCryptuint64_t HTTPRequest = segPumpGetStreamFromCryptHTTPRequest(v20, a2, a3);
    if (!StreamFromCryptHTTPRequest || !*(void *)(StreamFromCryptHTTPRequest + 248))
    {
      uint64_t v18 = 0;
      goto LABEL_9;
    }
    CMBlockBufferRef v12 = *(CMBlockBufferRef *)(StreamFromCryptHTTPRequest + 656);
    if (v12) {
      goto LABEL_7;
    }
    CMBlockBufferRef blockBufferOut = (CMBlockBufferRef *)(StreamFromCryptHTTPRequest + 656);
    size_t v14 = 2 * FigContentKeySpecifierGetCryptKeySize(*(void *)(StreamFromCryptHTTPRequest + 248));
    CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    CFAllocatorRef v16 = (const __CFAllocator *)FigGetAllocatorForMedia();
    uint64_t v10 = CMBlockBufferCreateWithMemoryBlock(AllocatorForMedia, 0, v14, v16, 0, 0, v14, 1u, blockBufferOut);
    if (!v10)
    {
      CMBlockBufferRef v12 = *blockBufferOut;
      if (!*blockBufferOut)
      {
        CFTypeRef v17 = 0;
        goto LABEL_8;
      }
LABEL_7:
      CFTypeRef v17 = CFRetain(v12);
LABEL_8:
      uint64_t v18 = 0;
      *a5 = v17;
      *a6 = 0;
      goto LABEL_9;
    }
  }
  uint64_t v18 = v10;
LABEL_9:
  FigRetainProxyUnlockMutex();
  if (cf) {
    CFRelease(cf);
  }
  return v18;
}

uint64_t segPumpCryptFileReadCallback(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, int a8)
{
  uint64_t v34 = 0;
  CFTypeRef cf = 0;
  __int16 v32 = 0;
  uint64_t v33 = 0;
  FigRetainProxyRetain();
  uint64_t CryptKeyCommonData = segPumpLockAndCopyPumpFromRetainProxy(a3, &cf, (uint64_t *)&v34);
  if (CryptKeyCommonData) {
    goto LABEL_27;
  }
  CFAllocatorRef v16 = v34;
  StreamFromCryptuint64_t HTTPRequest = segPumpGetStreamFromCryptHTTPRequest(v34, a1, a2);
  if (StreamFromCryptHTTPRequest)
  {
    uint64_t v19 = StreamFromCryptHTTPRequest;
    if (*(void *)(StreamFromCryptHTTPRequest + 592))
    {
      if (a8)
      {
LABEL_7:
        uint64_t DataPointer = segPumpHandleCryptKeyNetworkError((uint64_t)cf, v19, *(const void **)(v19 + 248), a8, 0, 0);
        goto LABEL_8;
      }
    }
    else
    {
      uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
      *(void *)(v19 + 592) = UpTimeNanoseconds;
      *(void *)(v19 + 600) = UpTimeNanoseconds - *(void *)(v19 + 568);
      if (a8) {
        goto LABEL_7;
      }
    }
    CFDateRef v24 = *(const void **)(v19 + 248);
    if (!v24) {
      goto LABEL_10;
    }
    uint64_t CryptKeyCommonData = segPumpGetCryptKeyCommonData(v24, &v33, &v32);
    if (!CryptKeyCommonData)
    {
      if (a4)
      {
        unint64_t v25 = v32[19] + a6;
        v32[19] = v25;
        if (v25 > FigContentKeySpecifierGetCryptKeySize(*(void *)(v19 + 248)))
        {
          segPumpAppendErrorLogEntry((uint64_t)cf, (uint64_t)v34, v19, (const __CFURL **)(v19 + 544), -12885, @"CoreMediaErrorDomain", @"Invalid Crypt key length", 0, 0, 3u, 1u);
LABEL_19:
          uint64_t DataPointer = FigSignalErrorAt();
LABEL_8:
          uint64_t v21 = DataPointer;
          if (!DataPointer) {
            goto LABEL_10;
          }
          goto LABEL_9;
        }
      }
      if ((a7 & 2) == 0) {
        goto LABEL_10;
      }
      size_t lengthAtOffsetOut = 0;
      dataPointerOut = 0;
      *(_DWORD *)(v19 + 608) = 0;
      *(void *)(v19 + 584) = FigGetUpTimeNanoseconds();
      char v26 = *(const void **)(v19 + 616);
      if (v26)
      {
        CFRelease(v26);
        *(void *)(v19 + 616) = 0;
      }
      uint64_t DataPointer = CMBlockBufferGetDataPointer(*(CMBlockBufferRef *)(v19 + 656), 0, &lengthAtOffsetOut, 0, &dataPointerOut);
      if (DataPointer) {
        goto LABEL_8;
      }
      CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
      CFDataRef v28 = CFDataCreate(AllocatorForMedia, (const UInt8 *)dataPointerOut, v32[19]);
      if (!v28) {
        goto LABEL_19;
      }
      CFDataRef v29 = v28;
      uint64_t v21 = segPumpCryptSetKey(cf, (uint64_t)v34, v19, *(const void **)(v19 + 248), v32[10], 0, v28, 0);
      CFRelease(v29);
      if (!v21) {
        goto LABEL_10;
      }
LABEL_9:
      segPumpSendEndCallbackForAllActiveStreamsWithOSStatus(a3, v21);
      goto LABEL_10;
    }
LABEL_27:
    uint64_t v21 = CryptKeyCommonData;
    goto LABEL_9;
  }
  CryptKeyCommonDataForRequestID = segPumpFindCryptKeyCommonDataForRequestID((uint64_t)v16, a2);
  __int16 v32 = CryptKeyCommonDataForRequestID;
  if (CryptKeyCommonDataForRequestID) {
    *((unsigned char *)CryptKeyCommonDataForRequestID + 145) = 0;
  }
LABEL_10:
  segPumpUnlockAndSendAllPendingNotifications();
  if (cf) {
    CFRelease(cf);
  }
  return FigRetainProxyRelease();
}

void segPumpCryptKeyTimeoutHandler(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = 0;
  CFTypeRef cf = 0;
  if (!segPumpLockAndCopyPumpFromRetainProxy(a2, &cf, &v7))
  {
    uint64_t v3 = 384;
    while (1)
    {
      uint64_t v4 = *(void *)(v7 + v3);
      if (*(void *)(v4 + 640) == a1 && *(void *)(v4 + 248))
      {
        uint64_t v5 = 0;
        uint64_t v6 = 0;
        if (segPumpGetCryptKeyCommonData(*(const void **)(*(void *)(v7 + v3) + 248), &v6, &v5)) {
          goto LABEL_10;
        }
        if (!*(unsigned char *)(v5 + 144)) {
          break;
        }
      }
      v3 += 16;
      if (v3 == 432) {
        goto LABEL_10;
      }
    }
    segPumpHandleCryptKeyNetworkError((uint64_t)cf, *(void *)(v7 + v3), *(const void **)(*(void *)(v7 + v3) + 248), -16833, @"CoreMediaErrorDomain", @"crypt key received slowly");
  }
LABEL_10:
  segPumpUnlockAndSendAllPendingNotifications();
  if (cf) {
    CFRelease(cf);
  }
}

void segPumpKeyRequestDidSucceed(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, const void *a5, uint64_t a6)
{
  CFTypeRef cf[25] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  uint64_t v46 = 0;
  cf[0] = 0;
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  if (!segPumpLockAndCopyPumpFromRetainProxy(a1, cf, &v46))
  {
    uint64_t StreamForKeyRequestID = segPumpGetStreamForKeyRequestID(v46, a4);
    if (StreamForKeyRequestID)
    {
      uint64_t v11 = (void *)StreamForKeyRequestID;
      if (dword_1E9351350)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      uint64_t v13 = *(void *)(v46 + 9048);
      if (v13)
      {
        uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v15 = v14 ? v14 : 0;
        CFAllocatorRef v16 = *(void (**)(uint64_t, uint64_t, uint64_t, void, void))(v15 + 56);
        if (v16) {
          v16(v13, 0x1EE582B78, 0x1EE585318, 0, 0);
        }
      }
      if (!segPumpGetCryptKeyCommonData((const void *)v11[31], &v45, &v44))
      {
        if (FigContentKeySpecifierGetKeySystem((uint64_t)a3) == 1)
        {
          if (*(void *)(v44 + 32) == a4)
          {
            CFTypeRef v17 = *(const void **)(v44 + 64);
            *(void *)(v44 + 64) = a5;
            if (a5) {
              CFRetain(a5);
            }
            if (v17) {
              CFRelease(v17);
            }
            uint64_t v18 = v44;
            if (*(void *)(v44 + 40) && !*(void *)(v44 + 104)) {
              goto LABEL_42;
            }
          }
          else
          {
            unint64_t v25 = *(const void **)(v44 + 104);
            *(void *)(v44 + 104) = a5;
            if (a5) {
              CFRetain(a5);
            }
            if (v25) {
              CFRelease(v25);
            }
            uint64_t v18 = v44;
            if (!*(void *)(v44 + 64)) {
              goto LABEL_42;
            }
          }
          *(_WORD *)(v18 + 144) = 1;
          if (*(unsigned char *)(v46 + 322) && segPumpCryptKeyIsLowValueFairPlayStreamingKey(v11[31]))
          {
            uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
            uint64_t v27 = v44;
            uint64_t v28 = *(void *)(CMBaseObjectGetVTable() + 8);
            uint64_t v29 = v28 ? v28 : 0;
            char v38 = *(unsigned int (**)(const void *, void, uint64_t, uint64_t))(v29 + 48);
            if (!v38 || v38(a5, *MEMORY[0x1E4F1FDB8], AllocatorForMedia, v27 + 48)) {
              goto LABEL_49;
            }
            uint64_t v39 = FigGetAllocatorForMedia();
            uint64_t v40 = v44;
            uint64_t v41 = *(void *)(CMBaseObjectGetVTable() + 8);
            uint64_t v42 = v41 ? v41 : 0;
            uint64_t v43 = *(unsigned int (**)(const void *, void, uint64_t, uint64_t))(v42 + 48);
            if (!v43 || v43(a5, *MEMORY[0x1E4F1FDA8], v39, v40 + 56)) {
              goto LABEL_49;
            }
          }
        }
        else
        {
          if (FigContentKeySpecifierGetKeySystem((uint64_t)a3) != 2
            && FigContentKeySpecifierGetKeySystem((uint64_t)a3) != 4)
          {
LABEL_42:
            segPumpPublishContentKeyRequestEvent((uint64_t)cf[0], v46, v11, a3, 0, a6);
            if (v45)
            {
              uint64_t v31 = *(void *)(v46 + 9048);
              uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
              if (v31)
              {
                uint64_t v33 = UpTimeNanoseconds;
                uint64_t v34 = *(void *)(v45 + 56);
                uint64_t v35 = *(void *)(CMBaseObjectGetVTable() + 16);
                uint64_t v36 = v35 ? v35 : 0;
                char v37 = *(void (**)(uint64_t, uint64_t, uint64_t, unint64_t, void))(v36 + 56);
                if (v37) {
                  v37(v31, 0x1EE582B98, 0x1EE584F18, (v33 - v34) / 0xF4240uLL, 0);
                }
              }
            }
            goto LABEL_49;
          }
          uint64_t v19 = *(const void **)(v45 + 40);
          *(void *)(v45 + 40) = a5;
          if (a5) {
            CFRetain(a5);
          }
          if (v19) {
            CFRelease(v19);
          }
          *(_WORD *)(v44 + 144) = 1;
          uint64_t v20 = *(void *)(v45 + 40);
          uint64_t v21 = FigGetAllocatorForMedia();
          uint64_t v22 = v44;
          uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v23) {
            uint64_t v24 = v23;
          }
          else {
            uint64_t v24 = 0;
          }
          CMTime v30 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v24 + 48);
          if (v30) {
            v30(v20, *MEMORY[0x1E4F1FDB8], v21, v22 + 48);
          }
        }
        if (segPumpContinueAfterKeyFetched(cf[0], v46, v11, (const void *)v11[31])) {
          goto LABEL_49;
        }
        goto LABEL_42;
      }
    }
  }
LABEL_49:
  segPumpUnlockAndSendAllPendingNotifications();
  if (cf[0]) {
    CFRelease(cf[0]);
  }
}

void segPumpKeyRequestDidFail(uint64_t a1, int a2, const void *a3, uint64_t a4, CFErrorRef err, uint64_t a6)
{
  CFTypeRef cf[27] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  uint64_t v36 = 0;
  cf[0] = 0;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  int valuePtr = 0;
  if (err)
  {
    CFErrorDomain Domain = (__CFString *)CFErrorGetDomain(err);
    int valuePtr = CFErrorGetCode(err);
    CFStringRef v12 = CFErrorCopyDescription(err);
  }
  else
  {
    CFStringRef v12 = 0;
    CFErrorDomain Domain = @"CoreMediaErrorDomain";
  }
  if (segPumpLockAndCopyPumpFromRetainProxy(a1, cf, &v36)
    || (uint64_t StreamForKeyRequestID = segPumpGetStreamForKeyRequestID(v36, a4)) == 0)
  {
    CFNumberRef v20 = 0;
  }
  else
  {
    uint64_t v14 = StreamForKeyRequestID;
    if (dword_1E9351350)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v16 = *(void *)(v36 + 9048);
    if (v16)
    {
      uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v18 = v17 ? v17 : 0;
      uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t, void, void))(v18 + 56);
      if (v19) {
        v19(v16, 0x1EE582B78, 0x1EE585318, 0, 0);
      }
    }
    if (err)
    {
      CFNumberRef v20 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
      uint64_t v21 = *(void *)(v36 + 9048);
      if (v21)
      {
        uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v23 = v22 ? v22 : 0;
        uint64_t v24 = *(void (**)(uint64_t, uint64_t, uint64_t, __CFString *, uint64_t))(v23 + 120);
        if (v24) {
          v24(v21, 0x1EE582B98, 0x1EE584F78, Domain, 100);
        }
      }
      uint64_t v25 = *(void *)(v36 + 9048);
      if (v25)
      {
        uint64_t v26 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v27 = v26 ? v26 : 0;
        uint64_t v28 = *(void (**)(uint64_t, uint64_t, uint64_t, CFStringRef, uint64_t))(v27 + 120);
        if (v28) {
          v28(v25, 0x1EE582B98, 0x1EE584F98, v12, 100);
        }
      }
      uint64_t v29 = *(void *)(v36 + 9048);
      if (v29)
      {
        uint64_t v30 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v31 = v30 ? v30 : 0;
        __int16 v32 = *(void (**)(uint64_t, uint64_t, uint64_t, CFNumberRef, uint64_t))(v31 + 120);
        if (v32) {
          v32(v29, 0x1EE582B98, 0x1EE584FB8, v20, 100);
        }
      }
    }
    else
    {
      CFNumberRef v20 = 0;
    }
    if (!segPumpGetCryptKeyCommonData(*(const void **)(v14 + 248), &v35, &v34)
      && !segPumpHandleCryptKeyNetworkError((uint64_t)cf[0], v14, *(const void **)(v14 + 248), valuePtr, Domain, v12))
    {
      segPumpPublishContentKeyRequestEvent((uint64_t)cf[0], v36, (void *)v14, a3, err, a6);
    }
  }
  segPumpUnlockAndSendAllPendingNotifications();
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  if (v12) {
    CFRelease(v12);
  }
  if (v20) {
    CFRelease(v20);
  }
}

uint64_t segPumpGetStreamForKeyRequestID(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v4 = a1 + 384;
  do
  {
    uint64_t v5 = *(void *)(v4 + v3);
    uint64_t v6 = *(const void **)(v5 + 248);
    if (v6)
    {
      if (segPumpGetCryptKeyCommonData(v6, &v9, &v8)) {
        return 0;
      }
      if (*(void *)(v8 + 32) == a2 || *(void *)(v8 + 40) == a2) {
        return v5;
      }
    }
    v3 += 16;
  }
  while (v3 != 48);
  return 0;
}

void segPumpPublishContentKeyRequestEvent(uint64_t a1, uint64_t a2, void *a3, const void *a4, const void *a5, uint64_t a6)
{
  uint64_t v6 = a6;
  uint64_t v53 = 0;
  uint64_t v54 = 0;
  CFTypeRef v51 = 0;
  CFTypeRef v52 = 0;
  CFAbsoluteTime v49 = 0.0;
  CFAbsoluteTime v50 = 0.0;
  CFAbsoluteTime v47 = 0.0;
  CFAbsoluteTime v48 = 0.0;
  CFTypeRef cf = 0;
  CFDataRef theData = 0;
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  if (a6)
  {
    uint64_t Value = FigCFDictionaryGetValue();
    Booleanuint64_t Value = FigCFDictionaryGetBooleanValue();
    uint64_t v6 = FigCFDictionaryGetBooleanValue();
    if (Value)
    {
      uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
      uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v15) {
        uint64_t v16 = v15;
      }
      else {
        uint64_t v16 = 0;
      }
      uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t, const void **))(v16 + 48);
      if (v17) {
        v17(Value, 0x1EE57B618, AllocatorForMedia, &v53);
      }
      uint64_t v18 = FigGetAllocatorForMedia();
      uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v19) {
        uint64_t v20 = v19;
      }
      else {
        uint64_t v20 = 0;
      }
      uint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t, CFDataRef *))(v20 + 48);
      if (v21) {
        v21(Value, 0x1EE57B698, v18, &theData);
      }
      if (theData)
      {
        BytePtr = (const sockaddr *)CFDataGetBytePtr(theData);
        socklen_t Length = CFDataGetLength(theData);
        uint64_t v24 = FigCFHTTPCreateAddressStringFromSockaddr(BytePtr, Length);
      }
      else
      {
        uint64_t v24 = 0;
      }
      uint64_t v25 = FigGetAllocatorForMedia();
      uint64_t v26 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v26) {
        uint64_t v27 = v26;
      }
      else {
        uint64_t v27 = 0;
      }
      uint64_t v28 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v27 + 48);
      if (v28) {
        v28(Value, 0x1EE57B6B8, v25, &v52);
      }
      FigCFDictionaryGetDoubleIfPresent();
      FigCFDictionaryGetDoubleIfPresent();
      FigCFDictionaryGetDoubleIfPresent();
      FigCFDictionaryGetDoubleIfPresent();
      uint64_t v29 = FigGetAllocatorForMedia();
      uint64_t v30 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v30) {
        uint64_t v31 = v30;
      }
      else {
        uint64_t v31 = 0;
      }
      __int16 v32 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v31 + 48);
      if (v32) {
        v32(Value, 0x1EE57B798, v29, &cf);
      }
      uint64_t v33 = FigGetAllocatorForMedia();
      uint64_t v34 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v34) {
        uint64_t v35 = v34;
      }
      else {
        uint64_t v35 = 0;
      }
      uint64_t v36 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v35 + 48);
      if (v36) {
        v36(Value, 0x1EE57B7D8, v33, &v51);
      }
      FigCFDictionaryGetInt64IfPresent();
      FigCFDictionaryGetInt64IfPresent();
    }
    else
    {
      uint64_t v24 = 0;
    }
  }
  else
  {
    uint64_t v24 = 0;
    Booleanuint64_t Value = 0;
  }
  CFAllocatorRef v37 = (const __CFAllocator *)FigGetAllocatorForMedia();
  uint64_t v38 = *MEMORY[0x1E4F1CFD0];
  char v39 = BooleanValue == *MEMORY[0x1E4F1CFD0];
  if (*a3 > 2uLL) {
    int v40 = 0;
  }
  else {
    int v40 = *(_DWORD *)&aEdivnuosltbs[4 * *a3];
  }
  long long v41 = *MEMORY[0x1E4F1F9F8];
  uint64_t v42 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  if (!FigMetricContentKeyRequestEventCreate(v37, v53, v24, &v41, 0, 0, v44, v43, v50, v49, v48, v47, v39, a5, cf, v40, v6 == v38, a4, &v54)) {
    segPumpPublishMetricEvent(a1, a2, v54);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v52) {
    CFRelease(v52);
  }
  if (v53) {
    CFRelease(v53);
  }
  if (v51) {
    CFRelease(v51);
  }
  if (v24) {
    CFRelease(v24);
  }
  if (theData) {
    CFRelease(theData);
  }
  if (v54) {
    CFRelease(v54);
  }
}

uint64_t FigContentKeySessionCopyCryptor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 16);
  if (!v10) {
    return 4294954514;
  }

  return v10(a1, a2, a3, 1, a4);
}

uint64_t segPumpGetStreamFromCryptHTTPRequest(void *a1, uint64_t a2, int a3)
{
  uint64_t result = a1[48];
  if (*(void *)(result + 560) != a2 || *(_DWORD *)(result + 624) != a3)
  {
    uint64_t result = a1[50];
    if (*(void *)(result + 560) != a2 || *(_DWORD *)(result + 624) != a3)
    {
      uint64_t result = a1[52];
      if (*(void *)(result + 560) != a2 || *(_DWORD *)(result + 624) != a3)
      {
        uint64_t result = a1[49];
        if (*(void *)(result + 560) != a2 || *(_DWORD *)(result + 624) != a3)
        {
          uint64_t result = a1[51];
          if (*(void *)(result + 560) != a2 || *(_DWORD *)(result + 624) != a3)
          {
            uint64_t v5 = a1[53];
            if (*(void *)(v5 + 560) == a2)
            {
              if (*(_DWORD *)(v5 + 624) == a3) {
                return v5;
              }
              else {
                return 0;
              }
            }
            else
            {
              return 0;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t segPumpIsCryptorReadyToDecrypt(uint64_t a1)
{
  CFTypeRef v2 = (CFTypeRef)*MEMORY[0x1E4F1CFC8];
  CFTypeRef cf = (CFTypeRef)*MEMORY[0x1E4F1CFC8];
  uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, void, uint64_t, CFTypeRef *))(v5 + 48);
  if (!v6)
  {
    uint64_t v9 = 0;
    if (!v2) {
      return v9;
    }
LABEL_14:
    CFRelease(v2);
    return v9;
  }
  int v7 = v6(a1, *MEMORY[0x1E4F1FDF8], AllocatorForMedia, &cf);
  CFTypeRef v2 = cf;
  if (v7) {
    BOOL v8 = 0;
  }
  else {
    BOOL v8 = *MEMORY[0x1E4F1CFD0] == (void)cf;
  }
  uint64_t v9 = v8;
  if (cf) {
    goto LABEL_14;
  }
  return v9;
}

uint64_t *segPumpGetBytesInTransit(uint64_t *result, uint64_t a2)
{
  if (result)
  {
    uint64_t v3 = result;
    if (result[4] || result[13])
    {
      uint64_t result = (uint64_t *)result[1];
      if (!result) {
        return result;
      }
      if (!*((unsigned char *)segPumpGetMediaFilePrivateData(result) + 73))
      {
        uint64_t v4 = v3[32];
        if (v4) {
          return (uint64_t *)(v4 - v3[28]);
        }
        if (a2)
        {
          double ExpectedAverageBitrate = (double)(int)FigAlternateGetExpectedAverageBitrate(*(void *)(a2 + 8));
          return (uint64_t *)(uint64_t)(FigMediaSegmentSpecifierGetTimeInSeconds(v3[1]) * ExpectedAverageBitrate * 0.125);
        }
      }
    }
    return 0;
  }
  return result;
}

uint64_t segPumpSetNetworkReadsContributeToNetworkHistory(uint64_t result, int a2)
{
  if (*(unsigned __int8 *)(result + 8000) != a2)
  {
    uint64_t v2 = result;
    *(unsigned char *)(result + 8000) = a2;
    uint64_t v3 = *(void *)(result + 9040);
    if (v3)
    {
      uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v5 = v4 ? v4 : 0;
      uint64_t v6 = *(void (**)(uint64_t))(v5 + 24);
      if (v6) {
        v6(v3);
      }
    }
    return segPumpSetupNetworkHistory(v2);
  }
  return result;
}

uint64_t segPumpSetMediaSegmentCache(uint64_t a1, CFTypeRef cf)
{
  CFTypeRef cfa = 0;
  CFTypeRef v26 = 0;
  uint64_t v4 = *(const void **)(a1 + 296);
  if (cf) {
    CFTypeRef v5 = CFRetain(cf);
  }
  else {
    CFTypeRef v5 = 0;
  }
  *(void *)(a1 + 296) = v5;
  if (v4)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    uint64_t v6 = FigNotificationCenterRemoveWeakListener();
    if (v6) {
      goto LABEL_62;
    }
    CFTypeRef v5 = *(CFTypeRef *)(a1 + 296);
  }
  if (v5)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    uint64_t v6 = FigNotificationCenterAddWeakListener();
    if (v6) {
      goto LABEL_62;
    }
    if (v4)
    {
      uint64_t v6 = FigStreamingCacheCopyMasterPlaylist((uint64_t)v4, (unint64_t)&v26, (unint64_t)&cfa);
      if (v6)
      {
LABEL_62:
        uint64_t v19 = v6;
        goto LABEL_64;
      }
    }
    else
    {
      SavedEntry = segPumpFindSavedEntry(a1, *(const void **)(a1 + 312), 0, 0);
      if (SavedEntry)
      {
        BOOL v8 = SavedEntry;
        uint64_t v6 = segPumpCreateIndexFileBBFromSavedIndexFile(a1, (uint64_t)SavedEntry, &v26);
        if (v6) {
          goto LABEL_62;
        }
        CFTypeRef v9 = (CFTypeRef)v8[5];
        if (v9) {
          CFTypeRef v9 = CFRetain(v9);
        }
        CFTypeRef cfa = v9;
      }
    }
    if (v26)
    {
      uint64_t v6 = FigStreamingCacheSetMasterPlaylist(*(void *)(a1 + 296), v26, cfa);
      if (v6) {
        goto LABEL_62;
      }
      if (cfa)
      {
        CFRelease(cfa);
        CFTypeRef cfa = 0;
      }
      if (v26)
      {
        CFRelease(v26);
        CFTypeRef v26 = 0;
      }
    }
  }
  for (uint64_t i = 384; i != 432; i += 16)
  {
    uint64_t v11 = *(void *)(a1 + i);
    if (!*(void *)(a1 + 296)
      || (uint64_t v12 = *(void *)(v11 + 56)) == 0
      || (CFArrayRef MediaSegmentSpecifiers = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(v12)) == 0
      || CFArrayGetCount(MediaSegmentSpecifiers) < 1
      || !*(void *)(a1 + 296))
    {
LABEL_32:
      *(void *)(v11 + 64) = 0;
      goto LABEL_33;
    }
    if (*(unsigned char *)(a1 + 8712))
    {
      if (!*(unsigned char *)(a1 + 7996) || *(void *)(a1 + 384) != v11) {
        goto LABEL_32;
      }
    }
    else if (!*(unsigned char *)(a1 + 7997))
    {
      goto LABEL_32;
    }
    if (v4 && (uint64_t v14 = *(void *)(v11 + 64)) != 0)
    {
      uint64_t v6 = FigStreamingCacheMediaStreamCopyPlaylist((uint64_t)v4, v14, (unint64_t)&v26, (unint64_t)&cfa);
      if (v6) {
        goto LABEL_62;
      }
    }
    else
    {
      uint64_t v15 = segPumpFindSavedEntry(a1, *(const void **)(v11 + 24), 0, 0);
      if (v15)
      {
        uint64_t v16 = v15;
        uint64_t v6 = segPumpCreateIndexFileBBFromSavedIndexFile(a1, (uint64_t)v15, &v26);
        if (v6) {
          goto LABEL_62;
        }
        CFTypeRef v17 = (CFTypeRef)v16[5];
        if (v17) {
          CFTypeRef v17 = CFRetain(v17);
        }
        CFTypeRef cfa = v17;
      }
    }
    CacheForStreaCFIndex m = segPumpCreateCacheForStream(a1, v11);
    if (CacheForStream != -15642)
    {
      uint64_t v19 = CacheForStream;
      if (CacheForStream) {
        goto LABEL_64;
      }
      if (v26)
      {
        uint64_t v6 = segPumpSetPlaylistForStreamCache(a1, v11, v26, cfa);
        if (v6) {
          goto LABEL_62;
        }
LABEL_33:
        if (v26)
        {
          CFRelease(v26);
          CFTypeRef v26 = 0;
        }
      }
      if (cfa)
      {
        CFRelease(cfa);
        CFTypeRef cfa = 0;
      }
      continue;
    }
  }
  if (*(unsigned char *)(a1 + 8011)) {
    segPumpMarkCurrentAlternatePersistentInCache(a1, 1);
  }
  uint64_t v20 = *(void *)(a1 + 9552);
  if (v20)
  {
    uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v21) {
      uint64_t v22 = v21;
    }
    else {
      uint64_t v22 = 0;
    }
    uint64_t v23 = *(uint64_t (**)(uint64_t, __CFString *, CFTypeRef))(v22 + 56);
    if (v23)
    {
      uint64_t v6 = v23(v20, @"AlternateFilterMonitorProperty_StreamingCache", cf);
      goto LABEL_62;
    }
    uint64_t v19 = 4294954514;
  }
  else
  {
    uint64_t v19 = 0;
  }
LABEL_64:
  if (cfa) {
    CFRelease(cfa);
  }
  if (v26) {
    CFRelease(v26);
  }
  if (v4) {
    CFRelease(v4);
  }
  return v19;
}

uint64_t segPumpReadNextCryptKeyForAllStreams(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 384;
  while (1)
  {
    CFTypeRef v5 = *(void **)(a2 + v4);
    if (v5[2])
    {
      uint64_t result = segPumpReadNextCryptKeyForStream(a1, a2, v5);
      if (result) {
        break;
      }
    }
    v4 += 16;
    if (v4 == 432) {
      return 0;
    }
  }
  return result;
}

uint64_t segPumpMarkCurrentAlternatePersistentInCache(uint64_t a1, int a2)
{
  *(unsigned char *)(a1 + 8011) = a2;
  if (*(void *)(a1 + 296))
  {
    uint64_t v4 = 0;
    uint64_t v5 = *MEMORY[0x1E4F1CFD0];
    uint64_t v6 = *MEMORY[0x1E4F1CFC8];
    uint64_t v7 = a1 + 384;
    do
    {
      uint64_t v8 = *(void *)(v7 + v4);
      if (*(void *)(v8 + 16))
      {
        CFTypeRef v9 = *(unsigned char **)(v8 + 64);
        if (v9)
        {
          if (a2)
          {
            uint64_t v10 = *(void *)(a1 + 296);
            uint64_t v11 = v5;
          }
          else
          {
            char v13 = 0;
            uint64_t result = FigStreamingCacheMediaStreamIsComplete(*(void *)(a1 + 296), (uint64_t)v9, &v13);
            if (result) {
              return result;
            }
            if (v13) {
              goto LABEL_11;
            }
            uint64_t v10 = *(void *)(a1 + 296);
            CFTypeRef v9 = *(unsigned char **)(v8 + 64);
            uint64_t v11 = v6;
          }
          uint64_t result = FigStreamingCacheMediaStreamSetPersistent(v10, v9, v11);
          if (result) {
            return result;
          }
        }
      }
LABEL_11:
      v4 += 16;
    }
    while (v4 != 48);
  }
  return 0;
}

uint64_t segPumpSetShouldStoreCryptKeysInCache(uint64_t a1, int a2)
{
  CFTypeRef cf = 0;
  if (*(unsigned __int8 *)(a1 + 321) == a2) {
    return 0;
  }
  *(unsigned char *)(a1 + 321) = a2;
  if (!a2) {
    return 0;
  }
  CFIndex v3 = 0;
  uint64_t v4 = *MEMORY[0x1E4F1FDD0];
  while (1)
  {
    CFArrayRef Count = *(const __CFArray **)(a1 + 7688);
    if (Count) {
      CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
    }
    if (v3 >= (uint64_t)Count)
    {
      uint64_t v16 = 0;
      goto LABEL_21;
    }
    CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 7688), v3);
    if (!*((unsigned char *)ValueAtIndex + 146))
    {
      uint64_t v7 = ValueAtIndex;
      uint64_t v8 = ValueAtIndex[8];
      if (v8) {
        break;
      }
    }
LABEL_8:
    ++v3;
  }
  uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v11 + 48);
  if (!v12) {
    goto LABEL_17;
  }
  int v13 = v12(v8, v4, AllocatorForMedia, &cf);
  CFTypeRef v14 = cf;
  if (v13 || !cf) {
    goto LABEL_18;
  }
  uint64_t v15 = segPumpSaveCryptKeyToCache(a1, (const void *)v7[2]);
  if (!v15)
  {
LABEL_17:
    CFTypeRef v14 = cf;
LABEL_18:
    if (v14)
    {
      CFRelease(v14);
      CFTypeRef cf = 0;
    }
    goto LABEL_8;
  }
  uint64_t v16 = v15;
LABEL_21:
  if (cf) {
    CFRelease(cf);
  }
  return v16;
}

uint64_t segPumpSetRequiresCryptKeysForMediaDelivery(uint64_t a1, int a2)
{
  if (*(unsigned __int8 *)(a1 + 322) == a2) {
    return 0;
  }
  if (!*(unsigned char *)(a1 + 8684))
  {
    *(unsigned char *)(a1 + 322) = a2;
    return 0;
  }
  return FigSignalErrorAt();
}

uint64_t segPumpRTCReportingUpdatePumpClientName(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 9464);
  if (v1)
  {
    uint64_t v2 = *(void *)(result + 9048);
    if (v2)
    {
      uint64_t VTable = CMBaseObjectGetVTable();
      uint64_t v5 = *(void *)(VTable + 16);
      uint64_t result = VTable + 16;
      uint64_t v4 = v5;
      uint64_t v6 = v5 ? v4 : 0;
      uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v6 + 48);
      if (v7)
      {
        return v7(v2, 0x1EE582B98, 0x1EE584198, v1, 0);
      }
    }
  }
  return result;
}

uint64_t segPumpSetAlternatesInPenaltyBox(uint64_t a1, const __CFArray *cf)
{
  if (*(unsigned char *)(a1 + 8176)
    && cf
    && (CFTypeID v4 = CFGetTypeID(cf), v4 == CFArrayGetTypeID())
    && ((Count = CFArrayGetCount(cf), (uint64_t v6 = *(void *)(a1 + 8144)) == 0)
     || (v16.location = 0, v16.length = Count, !CFArrayContainsValue(cf, v16, *(const void **)(v6 + 8)))))
  {
    uint64_t v7 = *(void *)(a1 + 8112);
    if (v7)
    {
      do
      {
        uint64_t v8 = *(void *)v7;
        v17.location = 0;
        v17.length = Count;
        if (!CFArrayContainsValue(cf, v17, *(const void **)(v7 + 8))) {
          MoveAlternateFromPenaltyBox(a1, (uint64_t *)v7);
        }
        uint64_t v7 = v8;
      }
      while (v8);
    }
    CFTypeRef v9 = *(uint64_t **)(a1 + 8096);
    if (v9)
    {
      do
      {
        uint64_t v10 = *v9;
        v18.location = 0;
        v18.length = Count;
        if (CFArrayContainsValue(cf, v18, (const void *)v9[1]))
        {
          unsigned int CurrentErrorCategory = FigAlternateGetCurrentErrorCategory(v9[1]);
          char v12 = CurrentErrorCategory;
          int v13 = (CurrentErrorCategory >> 2) & 1;
          FigAlternateSetErrorCategory(v9[1], 0);
          MoveAlternateFromListWithNoNotification(a1, (uint64_t *)(a1 + 8096), v9, v13, v12 & 1);
        }
        CFTypeRef v9 = (uint64_t *)v10;
      }
      while (v10);
    }
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t segPumpSetNetworkHistory(uint64_t a1, CFTypeRef cf)
{
  uint64_t v2 = a1 + 8684;
  if (!*(unsigned char *)(a1 + 8684))
  {
    CFTypeID v4 = *(const void **)(a1 + 88);
    *(void *)(a1 + 88) = cf;
    if (cf) {
      CFRetain(cf);
    }
    if (v4) {
      CFRelease(v4);
    }
    uint64_t v6 = (uint64_t *)(a1 + 96);
    uint64_t v5 = *(const void **)(a1 + 96);
    if (v5)
    {
      CFRelease(v5);
      *uint64_t v6 = 0;
    }
    uint64_t v7 = (CFTypeRef *)(a1 + 9040);
    uint64_t v8 = *(const void **)(a1 + 9040);
    if (v8)
    {
      CFRelease(v8);
      *uint64_t v7 = 0;
    }
    uint64_t v9 = segPumpSetHTTPRequestOptionsValue(a1, @"FHRP_NetworkHistory", *(const void **)(a1 + 88));
    if (v9) {
      return v9;
    }
    CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      CFDictionaryRef v12 = Mutable;
      FigCFDictionarySetValue();
      int v13 = (const void *)FigGetAllocatorForMedia();
      uint64_t v14 = FigNetworkPredictionArbiterCreate(v13, *(const void **)(a1 + 88), v12, (void *)(a1 + 96));
      if (!v14)
      {
        uint64_t Value = (const void *)FigCFDictionaryGetValue();
        if (!Value || (CFRange v16 = CFRetain(Value)) == 0) {
          CFRange v16 = (const void *)FigCFHTTPCopyClientBundleIdentifier(*(const __CFData **)(a1 + 8888));
        }
        uint64_t v17 = *v6;
        uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v18) {
          uint64_t v19 = v18;
        }
        else {
          uint64_t v19 = 0;
        }
        uint64_t v20 = *(void (**)(uint64_t, uint64_t, const void *))(v19 + 56);
        if (v20) {
          v20(v17, 0x1EE581D18, v16);
        }
        uint64_t v21 = *(void *)(a1 + 96);
        uint64_t v22 = *(void *)(a1 + 9048);
        uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v23) {
          uint64_t v24 = v23;
        }
        else {
          uint64_t v24 = 0;
        }
        uint64_t v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 56);
        if (v25) {
          v25(v21, 0x1EE581D78, v22);
        }
        if (*(unsigned char *)(v2 + 901))
        {
          if (*(void *)(a1 + 88)
            && (CFAllocatorRef v26 = (const __CFAllocator *)FigGetAllocatorForMedia(),
                (CFStringRef v27 = CFStringCreateWithFormat(v26, 0, @"%@", *(void *)(a1 + 8760))) != 0))
          {
            CFStringRef v28 = v27;
            if (*v7)
            {
              CFRelease(*v7);
              *uint64_t v7 = 0;
            }
            FigBandwidthPeriodicReporterCreate(*(void *)(a1 + 56), 1000000000 * *(void *)(a1 + 144), v28, *(void *)a1, (uint64_t)&segPumpEnsureBandwidthPeriodicReporterIfEnabled_bandwidthPeriodicReportingCallbacks, *(void *)(a1 + 88), (void *)(a1 + 9040));
            CFRelease(v28);
          }
          else
          {
            FigSignalErrorAt();
          }
        }
        uint64_t v29 = *(void *)(a1 + 9576);
        if (v29) {
          FigCMCDHeaderVendorSetNetworkHistory(v29, *(const void **)(a1 + 88));
        }
        if (v16) {
          CFRelease(v16);
        }
      }
      CFRelease(v12);
      return v14;
    }
  }

  return FigSignalErrorAt();
}

uint64_t segPumpSetMaxPipelinedConnections(uint64_t a1, int a2)
{
  uint64_t v3 = 0;
  if (a2 <= 1) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = a2;
  }
  if (v4 >= 0x100) {
    int64_t v5 = 256;
  }
  else {
    int64_t v5 = v4;
  }
  while (1)
  {
    uint64_t result = segPumpStreamSetReadAheadConnectionCountMax(*(void *)(a1 + v3 + 384), v5);
    if (result) {
      break;
    }
    uint64_t result = segPumpStreamSetReadAheadConnectionCountMax(*(void *)(a1 + v3 + 392), v5);
    if (result) {
      break;
    }
    v3 += 16;
    if (v3 == 48)
    {
      uint64_t result = 0;
      *(_DWORD *)(a1 + 8212) = v5;
      return result;
    }
  }
  return result;
}

uint64_t segPumpSetRTCReportingAgent(void *a1, CFTypeRef cf)
{
  if (!cf) {
    return 0;
  }
  uint64_t v4 = a1[1131];
  if (v4)
  {
    uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v5) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = 0;
    }
    CFDictionaryRef v12 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t))(v6 + 24);
    if (!v12) {
      return 4294954514;
    }
    uint64_t result = v12(cf, v4, 0x1EE582B98);
    if (result) {
      return result;
    }
    uint64_t v13 = a1[1131];
    if (v13)
    {
      uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v14) {
        uint64_t v15 = v14;
      }
      else {
        uint64_t v15 = 0;
      }
      CFRange v16 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t))(v15 + 24);
      if (!v16) {
        return 4294954514;
      }
      uint64_t result = v16(cf, v13, 0x1EE582CB8);
      if (result) {
        return result;
      }
      uint64_t v17 = a1[1131];
      if (v17)
      {
        uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v18) {
          uint64_t v19 = v18;
        }
        else {
          uint64_t v19 = 0;
        }
        CFAllocatorRef v26 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t))(v19 + 24);
        if (!v26) {
          return 4294954514;
        }
        uint64_t result = v26(cf, v17, 0x1EE582CF8);
        if (result) {
          return result;
        }
        uint64_t v27 = a1[1131];
        if (v27)
        {
          uint64_t v28 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v28) {
            uint64_t v29 = v28;
          }
          else {
            uint64_t v29 = 0;
          }
          uint64_t v30 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t))(v29 + 24);
          if (v30)
          {
            uint64_t result = v30(cf, v27, 0x1EE582CD8);
            if (result) {
              return result;
            }
            uint64_t v31 = (const void *)a1[1131];
            a1[1131] = cf;
            CFRetain(cf);
            if (v31) {
              CFRelease(v31);
            }
            goto LABEL_6;
          }
          return 4294954514;
        }
      }
    }
    return 4294955296;
  }
  a1[1131] = cf;
  CFRetain(cf);
LABEL_6:
  uint64_t v7 = (const void *)a1[1130];
  if (!v7 || (uint64_t result = FigBandwidthPeriodicReporterSetReportingAgent(v7, cf), !result))
  {
    uint64_t v9 = a1[12];
    if (v9)
    {
      uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v11 = v10 ? v10 : 0;
      uint64_t v20 = *(void (**)(uint64_t, uint64_t, CFTypeRef))(v11 + 56);
      if (v20) {
        v20(v9, 0x1EE581D78, cf);
      }
    }
    uint64_t result = a1[1141];
    if (result)
    {
      CFDictionaryRef v21 = FigRCLCopyConfigurationGroupName((CFDictionaryRef)result);
      uint64_t v22 = a1[1131];
      if (v22)
      {
        uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v24 = v23 ? v23 : 0;
        uint64_t v25 = *(void (**)(uint64_t, uint64_t, uint64_t, const __CFDictionary *, void))(v24 + 48);
        if (v25) {
          v25(v22, 0x1EE582B98, 0x1EE54A638, v21, 0);
        }
      }
      if (v21) {
        CFRelease(v21);
      }
      return 0;
    }
  }
  return result;
}

uint64_t segPumpSetMetricEventTimeline(uint64_t a1, uint64_t a2, CFTypeRef cf)
{
  uint64_t v6 = *(const void **)(a2 + 9016);
  *(void *)(a2 + 9016) = cf;
  if (cf) {
    CFRetain(cf);
  }
  if (v6) {
    CFRelease(v6);
  }
  uint64_t v7 = 0;
  if (cf)
  {
    CFArrayRef v8 = *(const __CFArray **)(a2 + 9024);
    if (v8)
    {
      if (CFArrayGetCount(v8) < 1)
      {
LABEL_15:
        uint64_t v7 = 0;
      }
      else
      {
        CFIndex v9 = 0;
        while (1)
        {
          uint64_t v10 = *(void *)(a2 + 9016);
          CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 9024), v9);
          uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v12) {
            uint64_t v13 = v12;
          }
          else {
            uint64_t v13 = 0;
          }
          uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, const void *))(v13 + 40);
          if (!v14)
          {
            uint64_t v7 = 4294954514;
            goto LABEL_17;
          }
          uint64_t v15 = v14(v10, a1, ValueAtIndex);
          if (v15) {
            break;
          }
          if (++v9 >= CFArrayGetCount(*(CFArrayRef *)(a2 + 9024))) {
            goto LABEL_15;
          }
        }
        uint64_t v7 = v15;
      }
LABEL_17:
      FigCFArrayRemoveAllValues();
    }
  }
  return v7;
}

uint64_t segPumpResetContentKeyState(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v11 = a1;
  unsigned int v10 = segPumpAPILockAndEnsureAPIStatus(a1, 0);
  if (!v10)
  {
    for (uint64_t i = 384; i != 432; i += 16)
      segPumpCancelCryptReadAndResetData(DerivedStorage, *(void *)(DerivedStorage + i));
    for (CFIndex j = 0; ; ++j)
    {
      CFArrayRef Count = *(const __CFArray **)(DerivedStorage + 7688);
      if (Count) {
        CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
      }
      if (j >= (uint64_t)Count) {
        break;
      }
      CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 7688), j);
      if (ValueAtIndex[6] == 1)
      {
        uint64_t v7 = (uint64_t)ValueAtIndex;
        if (dword_1E9351350)
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        *(void *)(v7 + 80) = 0;
        *(void *)(v7 + 96) = 0;
        *(unsigned char *)(v7 + 88) = 0;
        *(void *)(v7 + 120) = 0;
        *(unsigned char *)(v7 + 128) = 0;
        *(void *)(v7 + 32) = 0;
        *(void *)(v7 + 40) = 0;
        *(void *)(v7 + 136) = 0;
        *(_DWORD *)(v7 + 143) = 0;
        CryptKeyReleaseAndClearVideoDecryptor(v7);
        CryptKeyReleaseAndClearAudioDecryptor(v7);
      }
    }
  }
  return segPumpAPIUnlockAndSendNotificationThenCheckAPIStatus(v11, v10);
}

uint64_t segPumpBandwidthReportingPerformPredictionCallback(uint64_t a1, __CFDictionary *a2)
{
  uint64_t v81 = *MEMORY[0x1E4F143B8];
  uint64_t v60 = 0;
  CFTypeRef cf = 0;
  uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  uint64_t v52 = 0;
  memset(v51, 0, sizeof(v51));
  if (segPumpLockAndCopyPumpFromRetainProxy(a1, &cf, &v60))
  {
    segPumpUnlockAndSendAllPendingNotifications();
  }
  else
  {
    segPumpMakeNetworkPredictionInput(v60, (uint64_t)&v62);
    uint64_t v5 = *((void *)&v62 + 1);
    uint64_t v6 = v64;
    uint64_t v7 = v65;
    long long v8 = v66;
    long long v57 = v71;
    long long v58 = v72;
    long long v59 = v73;
    long long v53 = v67;
    long long v54 = v68;
    long long v55 = v69;
    long long v56 = v70;
    long long v79 = v76;
    long long v80 = v77;
    long long v78 = v75;
    uint64_t v9 = v60;
    uint64_t v10 = *(void *)(v60 + 8144);
    if (v10)
    {
      uint64_t v11 = *(void *)(v10 + 8);
      if (v11)
      {
        int AverageBitRate = FigAlternateGetAverageBitRate(v11);
        if (AverageBitRate
          || (int AverageBitRate = FigAlternateGetPeakBitRate(*(void *)(*(void *)(v60 + 8144) + 8))) != 0)
        {
          uint64_t v9 = v60;
          if (*(_DWORD *)(v60 + 8)) {
            uint64_t v7 = *(void *)(v60 + 144) * AverageBitRate / 8;
          }
        }
        else
        {
          uint64_t v9 = v60;
        }
      }
    }
    uint64_t v13 = *(void *)(v9 + 96);
    uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v14) {
      uint64_t v15 = v14;
    }
    else {
      uint64_t v15 = 0;
    }
    CFRange v16 = *(unsigned int (**)(uint64_t, uint64_t, long long *, _OWORD *))(v15 + 8);
    if (v16)
    {
      long long v70 = v56;
      long long v71 = v57;
      long long v72 = v58;
      long long v73 = v59;
      long long v67 = v53;
      *(void *)&long long v62 = 0;
      *((void *)&v62 + 1) = v5;
      uint64_t v63 = 60000000000;
      uint64_t v64 = v6;
      uint64_t v65 = v7;
      long long v66 = v8;
      long long v68 = v54;
      long long v69 = v55;
      uint64_t v74 = 9;
      long long v76 = v79;
      long long v77 = v80;
      long long v75 = v78;
      if (!v16(v13, UpTimeNanoseconds, &v62, v51))
      {
        FigCFDictionarySetInt64();
        FigCFDictionarySetInt64();
        FigCFDictionarySetInt64();
      }
    }
    uint64_t v17 = *(void *)(v60 + 96);
    uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v18) {
      uint64_t v19 = v18;
    }
    else {
      uint64_t v19 = 0;
    }
    uint64_t v20 = *(unsigned int (**)(uint64_t, uint64_t, long long *, _OWORD *))(v19 + 8);
    if (v20)
    {
      long long v70 = v56;
      long long v71 = v57;
      long long v72 = v58;
      long long v73 = v59;
      long long v67 = v53;
      *(void *)&long long v62 = 1;
      *((void *)&v62 + 1) = v5;
      uint64_t v63 = 60000000000;
      uint64_t v64 = v6;
      uint64_t v65 = v7;
      long long v66 = v8;
      long long v68 = v54;
      long long v69 = v55;
      uint64_t v74 = 9;
      long long v76 = v79;
      long long v77 = v80;
      long long v75 = v78;
      if (!v20(v17, UpTimeNanoseconds, &v62, v51))
      {
        FigCFDictionarySetInt64();
        FigCFDictionarySetInt64();
        FigCFDictionarySetInt64();
      }
    }
    uint64_t v21 = *(void *)(v60 + 96);
    uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v22) {
      uint64_t v23 = v22;
    }
    else {
      uint64_t v23 = 0;
    }
    uint64_t v24 = *(unsigned int (**)(uint64_t, uint64_t, long long *, _OWORD *))(v23 + 8);
    if (v24)
    {
      long long v66 = v8;
      long long v70 = v56;
      long long v71 = v57;
      long long v72 = v58;
      long long v73 = v59;
      long long v67 = v53;
      *(void *)&long long v62 = 2;
      *((void *)&v62 + 1) = v5;
      uint64_t v63 = 60000000000;
      uint64_t v64 = v6;
      uint64_t v65 = v7;
      long long v68 = v54;
      long long v69 = v55;
      uint64_t v74 = 9;
      long long v76 = v79;
      long long v77 = v80;
      long long v75 = v78;
      if (!v24(v21, UpTimeNanoseconds, &v62, v51))
      {
        FigCFDictionarySetInt64();
        FigCFDictionarySetInt64();
        FigCFDictionarySetInt64();
      }
    }
    uint64_t v25 = *(void *)(v60 + 96);
    uint64_t v26 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v26) {
      uint64_t v27 = v26;
    }
    else {
      uint64_t v27 = 0;
    }
    uint64_t v28 = *(unsigned int (**)(uint64_t, uint64_t, long long *, _OWORD *))(v27 + 8);
    if (v28)
    {
      long long v66 = xmmword_194998970;
      long long v70 = v56;
      long long v71 = v57;
      long long v72 = v58;
      long long v73 = v59;
      long long v67 = v53;
      *(void *)&long long v62 = 4;
      *((void *)&v62 + 1) = v5;
      uint64_t v63 = 60000000000;
      uint64_t v64 = v6;
      long long v68 = v54;
      long long v69 = v55;
      uint64_t v65 = v7;
      uint64_t v74 = 9;
      long long v76 = v79;
      long long v77 = v80;
      long long v75 = v78;
      if (!v28(v25, UpTimeNanoseconds, &v62, v51))
      {
        FigCFDictionarySetInt64();
        FigCFDictionarySetInt64();
        FigCFDictionarySetInt64();
      }
    }
    uint64_t v29 = *(void *)(v60 + 96);
    uint64_t v30 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v30) {
      uint64_t v31 = v30;
    }
    else {
      uint64_t v31 = 0;
    }
    __int16 v32 = *(unsigned int (**)(uint64_t, uint64_t, long long *, _OWORD *))(v31 + 8);
    if (v32)
    {
      long long v66 = xmmword_194998970;
      long long v70 = v56;
      long long v71 = v57;
      long long v72 = v58;
      long long v73 = v59;
      long long v67 = v53;
      *(void *)&long long v62 = 3;
      *((void *)&v62 + 1) = v5;
      uint64_t v63 = 60000000000;
      uint64_t v64 = v6;
      long long v68 = v54;
      long long v69 = v55;
      uint64_t v65 = v7;
      uint64_t v74 = 9;
      long long v76 = v79;
      long long v77 = v80;
      long long v75 = v78;
      if (!v32(v29, UpTimeNanoseconds, &v62, v51))
      {
        FigCFDictionarySetInt64();
        FigCFDictionarySetInt64();
        FigCFDictionarySetInt64();
        FigCFDictionarySetInt64();
        FigCFDictionarySetInt64();
        FigCFDictionarySetInt64();
      }
    }
    uint64_t v33 = *(void *)(v60 + 96);
    uint64_t v34 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v34) {
      uint64_t v35 = v34;
    }
    else {
      uint64_t v35 = 0;
    }
    uint64_t v36 = *(unsigned int (**)(uint64_t, uint64_t, long long *, _OWORD *))(v35 + 8);
    if (v36)
    {
      long long v66 = xmmword_194998970;
      long long v70 = v56;
      long long v71 = v57;
      long long v72 = v58;
      long long v73 = v59;
      long long v67 = v53;
      *(void *)&long long v62 = 5;
      *((void *)&v62 + 1) = v5;
      uint64_t v63 = 60000000000;
      uint64_t v64 = v6;
      long long v68 = v54;
      long long v69 = v55;
      uint64_t v65 = v7;
      uint64_t v74 = 9;
      long long v76 = v79;
      long long v77 = v80;
      long long v75 = v78;
      if (!v36(v33, UpTimeNanoseconds, &v62, v51))
      {
        FigCFDictionarySetInt64();
        FigCFDictionarySetInt64();
        FigCFDictionarySetInt64();
      }
    }
    uint64_t v37 = *(void *)(v60 + 96);
    uint64_t v38 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v38) {
      uint64_t v39 = v38;
    }
    else {
      uint64_t v39 = 0;
    }
    int v40 = *(unsigned int (**)(uint64_t, uint64_t, long long *, _OWORD *))(v39 + 8);
    if (v40)
    {
      long long v62 = xmmword_194998170;
      long long v66 = xmmword_194998970;
      long long v70 = v56;
      long long v71 = v57;
      long long v72 = v58;
      long long v73 = v59;
      long long v67 = v53;
      uint64_t v63 = 60000000000;
      uint64_t v64 = v6;
      long long v68 = v54;
      long long v69 = v55;
      uint64_t v65 = v7;
      uint64_t v74 = 9;
      long long v76 = v79;
      long long v77 = v80;
      long long v75 = v78;
      if (!v40(v37, UpTimeNanoseconds, &v62, v51)) {
        FigCFDictionarySetInt64();
      }
    }
    uint64_t v41 = *(void *)(v60 + 96);
    uint64_t v42 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v42) {
      uint64_t v43 = v42;
    }
    else {
      uint64_t v43 = 0;
    }
    uint64_t v44 = *(unsigned int (**)(uint64_t, uint64_t, long long *, _OWORD *))(v43 + 8);
    if (v44)
    {
      long long v62 = xmmword_194998170;
      long long v66 = xmmword_194998970;
      long long v70 = v56;
      long long v71 = v57;
      long long v72 = v58;
      long long v73 = v59;
      long long v67 = v53;
      uint64_t v63 = 60000000000;
      uint64_t v64 = v6;
      long long v68 = v54;
      long long v69 = v55;
      uint64_t v65 = v7;
      uint64_t v74 = 2;
      long long v76 = v79;
      long long v77 = v80;
      long long v75 = v78;
      if (!v44(v41, UpTimeNanoseconds, &v62, v51)) {
        FigCFDictionarySetDouble();
      }
    }
    uint64_t v45 = *(void *)(v60 + 96);
    uint64_t v46 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v46) {
      uint64_t v47 = v46;
    }
    else {
      uint64_t v47 = 0;
    }
    CFAbsoluteTime v48 = *(unsigned int (**)(uint64_t, uint64_t, long long *, _OWORD *))(v47 + 8);
    if (v48)
    {
      long long v62 = xmmword_1949989C0;
      long long v66 = xmmword_194998970;
      long long v70 = v56;
      long long v71 = v57;
      long long v72 = v58;
      long long v73 = v59;
      long long v67 = v53;
      uint64_t v63 = 60000000000;
      uint64_t v64 = v6;
      long long v68 = v54;
      long long v69 = v55;
      uint64_t v65 = v7;
      uint64_t v74 = 2;
      long long v76 = v79;
      long long v77 = v80;
      long long v75 = v78;
      if (!v48(v45, UpTimeNanoseconds, &v62, v51)) {
        FigCFDictionarySetDouble();
      }
    }
    FigNetworkInterfaceReporterGetPredictedWirelessThroughput();
    SInt64 = (const void *)FigCFNumberCreateSInt64();
    CFDictionarySetValue(a2, @"PATH_bw", SInt64);
    segPumpUnlockAndSendAllPendingNotifications();
    if (SInt64) {
      CFRelease(SInt64);
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  return 0;
}

uint64_t segPumpStreamSetReadAheadConnectionCountMax(uint64_t a1, int64_t count)
{
  if (count > 0)
  {
    int64_t v4 = *(void *)(a1 + 776);
    if (v4 >= count) {
      return 0;
    }
    uint64_t v5 = *(void **)(a1 + 768);
    uint64_t v6 = malloc_type_calloc(count, 8uLL, 0x2004093837F09uLL);
    if (v6)
    {
      uint64_t v7 = v6;
      memcpy(v6, v5, 8 * v4);
      *(void *)(a1 + 768) = v7;
      *(void *)(a1 + 776) = count;
      free(v5);
      return 0;
    }
  }

  return FigSignalErrorAt();
}

uint64_t segPumpClientHasEnough(const void *a1, unsigned int a2, int a3)
{
  v15[23] = *(double *)MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  double v14 = 0.0;
  v15[0] = 0.0;
  CFIndex v7 = segPumpAPILockAndEnsureAPIStatus(a1, 0);
  if (!v7)
  {
    uint64_t v8 = a2;
    uint64_t v9 = *(void *)(DerivedStorage + 16 * a2 + 384);
    *(unsigned char *)(v9 + 870) = a3 == 0;
    if (!*(unsigned char *)(v9 + 869))
    {
      *(unsigned char *)(v9 + 869) = 1;
      if (dword_1E9351350)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    if (!a3)
    {
      *(unsigned char *)(v9 + 400) = 0;
      FigHTTPStopAndReleaseTimer((dispatch_object_t *)(v9 + 392));
    }
    uint64_t v11 = *(void *)(DerivedStorage + 16 * v8 + 392);
    if (segPumpGetDeliveredTimeStamp(v11, v15))
    {
      if (segPumpGetDeliveredTimeStamp(v9, &v14))
      {
        if (v15[0] - v14 > 2.22044605e-16 && !*(unsigned char *)(v11 + 869))
        {
          *(unsigned char *)(v11 + 869) = 1;
          if (dword_1E9351350)
          {
            uint64_t v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
        }
      }
    }
  }
  return segPumpAPIUnlockAndSendNotificationThenCheckAPIStatus(a1, v7);
}

uint64_t segPumpClientNeedsMore(const void *a1, unsigned int a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  double v10 = 0.0;
  double v11 = 0.0;
  CFIndex v5 = segPumpAPILockAndEnsureAPIStatus(a1, 0);
  if (v5
    || (uint64_t v6 = *(void *)(DerivedStorage + 16 * a2 + 384),
        CFIndex v5 = segPumpStreamNeedsMore(a1, DerivedStorage, v6),
        v5))
  {
    uint64_t v8 = v5;
  }
  else
  {
    uint64_t v7 = *(void *)(DerivedStorage + 16 * a2 + 392);
    if (segPumpGetDeliveredTimeStamp(v7, &v11)
      && segPumpGetDeliveredTimeStamp(v6, &v10)
      && v10 - v11 > 2.22044605e-16)
    {
      segPumpStreamNeedsMore(a1, DerivedStorage, v7);
    }
    uint64_t v8 = 0;
  }

  return segPumpAPIUnlockAndSendNotificationThenCheckAPIStatus(a1, v8);
}

uint64_t segPumpSetCurrentAlternate(const void *a1, const void *a2, const __CFArray *a3, uint64_t a4, int a5, unsigned int a6, uint64_t a7, CMTime *a8, CMTime *a9, _DWORD *a10, unsigned int *a11, uint64_t a12)
{
  uint64_t v315 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v274 = segPumpStreamBitRateRequiredForStream(DerivedStorage, *(void **)(DerivedStorage + 384));
  CFTypeRef v300 = 0;
  unsigned int v291 = a6;
  int v18 = (*(void *)(DerivedStorage + 8144) != 0) & (a6 >> 2);
  uint64_t v290 = a1;
  CFIndex v19 = segPumpAPILockAndEnsureAPIStatus(a1, 1);
  if (v19) {
    goto LABEL_120;
  }
  if (!*(void *)(DerivedStorage + 8096)) {
    goto LABEL_119;
  }
  uint64_t v279 = (uint64_t *)(DerivedStorage + 384);
  if (*(unsigned char *)(*(void *)(DerivedStorage + 384) + 856))
  {
    uint64_t v20 = MEMORY[0x1E4F1F9F8];
    *(_OWORD *)a7 = *MEMORY[0x1E4F1F9F8];
    *(void *)(a7 + 16) = *(void *)(v20 + 16);
  }
  if ((a6 & 8) != 0 && *(void *)(DerivedStorage + 7680) && FigCFEqual())
  {
    for (uint64_t i = 0; i != 48; i += 16)
    {
      uint64_t v22 = DerivedStorage + i;
      uint64_t v23 = *(void *)(DerivedStorage + i + 392);
      if (*(void *)(v23 + 1192))
      {
        nw_activity_complete_with_reason();
        uint64_t v24 = *(const void **)(v23 + 1192);
        if (v24)
        {
          CFRelease(v24);
          *(void *)(v23 + 1192) = 0;
        }
      }
      if (*(void *)(v23 + 16))
      {
        segPumpStopConcurrentStream(DerivedStorage, *(void *)(DerivedStorage + i + 384));
        *(_WORD *)(v23 + 864) = 256;
        uint64_t v25 = *(void *)(DerivedStorage + i + 384);
        uint64_t v26 = *(void *)(v22 + 392);
        *(void *)(DerivedStorage + i + 384) = v26;
        *(void *)(v22 + 392) = v25;
        if (!*(void *)(v26 + 1176))
        {
          uint64_t v27 = *(void *)(v25 + 1176);
          if (v27)
          {
            *(void *)(v26 + 1176) = v27;
            *(void *)(*(void *)(v22 + 392) + 1176) = 0;
          }
        }
        if (*(void *)(v23 + 256) && !*(void *)(*(void *)(v23 + 696) + 8))
        {
          if (*(void *)(v23 + 264)) {
            uint64_t v28 = *(const void **)(v23 + 264);
          }
          else {
            uint64_t v28 = *(const void **)(v23 + 256);
          }
          if (dword_1E9351350)
          {
            LODWORD(v298.value) = 0;
            type[0] = OS_LOG_TYPE_DEFAULT;
            os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          segPumpStreamProceedAfterMediaAndKeyArrival((uint64_t)a1, DerivedStorage, v23, v28, 1, 1);
        }
      }
    }
    segPumpClearStatistics(DerivedStorage);
    segPumpUpdateCurrentAlternate(DerivedStorage, *(void *)(DerivedStorage + 7680));
    unsigned int v294 = 0;
    CMTimeValue v30 = 0;
    uint64_t v31 = 0;
    __int16 v32 = 0;
    uint64_t v33 = 0;
    *(void *)(DerivedStorage + 8416) = *(void *)(*(void *)(DerivedStorage + 384) + 16) == 0;
    *(void *)(DerivedStorage + 7680) = 0;
    uint64_t v34 = a11;
    if (a11) {
      goto LABEL_570;
    }
    goto LABEL_571;
  }
  if (*(void *)(DerivedStorage + 7680))
  {
    for (uint64_t j = 392; j != 440; j += 16)
    {
      uint64_t v36 = *(void *)(DerivedStorage + j);
      if (*(void *)(v36 + 16))
      {
        segPumpStopConcurrentStream(DerivedStorage, *(void *)(DerivedStorage + j));
        *(void *)(v36 + 936) = -1;
      }
    }
    *(void *)(DerivedStorage + 7680) = 0;
  }
  uint64_t v280 = a8;
  uint64_t v288 = a7;
  uint64_t v37 = DerivedStorage + 8096;
  int v283 = v18;
  if ((v18 & 1) == 0)
  {
    for (uint64_t k = 0; k != 48; k += 16)
      *(void *)(*(void *)(DerivedStorage + 384 + k) + 136) = -1;
    if ((a6 & 0x20) != 0 && *(void *)(DerivedStorage + 8248))
    {
      uint64_t v39 = 0;
      int v40 = (uint64_t **)(DerivedStorage + 384);
      do
      {
        uint64_t v41 = *v40;
        uint64_t v42 = **v40;
        if (*(unsigned char *)(DerivedStorage + 40 * v42 + 8280))
        {
          uint64_t v43 = DerivedStorage + 40 * v42;
          *(_OWORD *)(v41 + 17) = *(_OWORD *)(v43 + 8256);
          v41[19] = *(void *)(v43 + 8272);
          if (dword_1E9351350)
          {
            LODWORD(v298.value) = 0;
            type[0] = OS_LOG_TYPE_DEFAULT;
            uint64_t v44 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
        }
        ++v39;
        v40 += 2;
      }
      while (v39 != 3);
    }
  }
  if (!a2)
  {
    if (*(void *)(DerivedStorage + 8144))
    {
      unsigned int v294 = 0;
      CMTimeValue v30 = 0;
      CMTimeValue v285 = 0;
      __int16 v32 = 0;
      uint64_t v33 = 0;
      goto LABEL_49;
    }
    uint64_t v47 = *(void *)(DerivedStorage + 296);
    int v18 = v283;
    if (!v47) {
      goto LABEL_64;
    }
    time.CMTimeValue value = 0;
    *(void *)os_log_type_t type = 0;
    cf.CMTimeValue value = 0;
    v298.CMTimeValue value = 0;
    int LongestContiguousMediaStreamInCacheAtTime = FigStreamingCacheGetLongestContiguousMediaStreamInCacheAtTime(v47, 0, &v298.value, (CFTypeRef *)&time, &cf, (double *)type, 0.0);
    CMTimeValue value = (const void *)time.value;
    if (LongestContiguousMediaStreamInCacheAtTime)
    {
      AlternateEntryFromURLForCacheLookup = 0;
      if (time.value) {
LABEL_59:
      }
        CFRelease(value);
    }
    else
    {
      if (time.value)
      {
        AlternateEntryFromURLForCacheLookup = segPumpGetAlternateEntryFromURLForCacheLookup(DerivedStorage, (const void *)time.value, cf.value);
        CMTimeValue value = (const void *)time.value;
        if (!time.value) {
          goto LABEL_61;
        }
        goto LABEL_59;
      }
      AlternateEntryFromURLForCacheLookup = 0;
    }
LABEL_61:
    if (cf.value) {
      CFRelease((CFTypeRef)cf.value);
    }
    if (AlternateEntryFromURLForCacheLookup)
    {
LABEL_100:
      uint64_t v46 = AlternateEntryFromURLForCacheLookup[1];
      int HasAudio = FigAlternateHasAudio(v46);
      int HasVideo = FigAlternateHasVideo(AlternateEntryFromURLForCacheLookup[1]);
      if (HasAudio) {
        BOOL v64 = HasVideo == 0;
      }
      else {
        BOOL v64 = 0;
      }
      int v65 = v64;
      a5 = v65;
      uint64_t v37 = (uint64_t)AlternateEntryFromURLForCacheLookup;
      goto LABEL_107;
    }
LABEL_64:
    AlternateEntryFromURLForCacheLookup = *(void **)v37;
    if (*(void *)v37)
    {
      while (FigAlternateIsIFrameOnly(AlternateEntryFromURLForCacheLookup[1])
           || !FigAlternateHasValidCodecs(AlternateEntryFromURLForCacheLookup[1]))
      {
        AlternateEntryFromURLForCacheLookup = (void *)*AlternateEntryFromURLForCacheLookup;
        if (!AlternateEntryFromURLForCacheLookup) {
          goto LABEL_68;
        }
      }
    }
    else
    {
LABEL_68:
      AlternateEntryFromURLForCacheLookup = (void *)(DerivedStorage + 8096);
      do
      {
        AlternateEntryFromURLForCacheLookup = (void *)*AlternateEntryFromURLForCacheLookup;
        if (!AlternateEntryFromURLForCacheLookup)
        {
          AlternateEntryFromURLForCacheLookup = (void *)(DerivedStorage + 8096);
          do
          {
            AlternateEntryFromURLForCacheLookup = (void *)*AlternateEntryFromURLForCacheLookup;
            if (!AlternateEntryFromURLForCacheLookup)
            {
              LODWORD(v298.value) = 0;
              type[0] = OS_LOG_TYPE_DEFAULT;
              long long v58 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              unsigned int v59 = v298.value;
              if (os_log_type_enabled(v58, type[0])) {
                unsigned int v60 = v59;
              }
              else {
                unsigned int v60 = v59 & 0xFFFFFFFE;
              }
              if (v60)
              {
                double v61 = &stru_1EE53F4B8;
                if (DerivedStorage && *(void *)(DerivedStorage + 8760)) {
                  double v61 = *(__CFString **)(DerivedStorage + 8760);
                }
                LODWORD(cf.value) = 136315394;
                *(CMTimeValue *)((char *)&cf.value + 4) = (CMTimeValue)"segPumpGetFirstMatchingAlternateEntry";
                LOWORD(cf.flags) = 2114;
                *(void *)((char *)&cf.flags + 2) = v61;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              AlternateEntryFromURLForCacheLookup = *(void **)v37;
              goto LABEL_100;
            }
          }
          while (FigAlternateIsIFrameOnly(AlternateEntryFromURLForCacheLookup[1]));
          LODWORD(v298.value) = 0;
          type[0] = OS_LOG_TYPE_DEFAULT;
          long long v55 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v56 = v298.value;
          if (os_log_type_enabled(v55, type[0])) {
            unsigned int v57 = v56;
          }
          else {
            unsigned int v57 = v56 & 0xFFFFFFFE;
          }
          if (!v57) {
            goto LABEL_90;
          }
          long long v54 = &stru_1EE53F4B8;
          if (DerivedStorage && *(void *)(DerivedStorage + 8760)) {
            long long v54 = *(__CFString **)(DerivedStorage + 8760);
          }
          goto LABEL_89;
        }
      }
      while (!FigAlternateHasValidCodecs(AlternateEntryFromURLForCacheLookup[1]));
      LODWORD(v298.value) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      CFTypeRef v51 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v52 = v298.value;
      if (os_log_type_enabled(v51, type[0])) {
        unsigned int v53 = v52;
      }
      else {
        unsigned int v53 = v52 & 0xFFFFFFFE;
      }
      if (v53)
      {
        long long v54 = &stru_1EE53F4B8;
        if (DerivedStorage && *(void *)(DerivedStorage + 8760)) {
          long long v54 = *(__CFString **)(DerivedStorage + 8760);
        }
LABEL_89:
        LODWORD(cf.value) = 136315394;
        *(CMTimeValue *)((char *)&cf.value + 4) = (CMTimeValue)"segPumpGetFirstMatchingAlternateEntry";
        LOWORD(cf.flags) = 2114;
        *(void *)((char *)&cf.flags + 2) = v54;
        _os_log_send_and_compose_impl();
      }
LABEL_90:
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    goto LABEL_100;
  }
  uint64_t v45 = DerivedStorage + 8112;
  while (1)
  {
    uint64_t v45 = *(void *)v45;
    if (!v45) {
      break;
    }
    if (CFEqual(*(CFTypeRef *)(v45 + 8), a2))
    {
      uint64_t v33 = FigSignalErrorAt();
      unsigned int v294 = 0;
      CMTimeValue v30 = 0;
      goto LABEL_48;
    }
  }
  int v18 = v283;
  do
  {
    uint64_t v37 = *(void *)v37;
    if (!v37) {
      goto LABEL_119;
    }
  }
  while (!CFEqual(*(CFTypeRef *)(v37 + 8), a2));
  uint64_t v46 = *(void *)(v37 + 8);
LABEL_107:
  if (!v46 || (int PeakBitRate = FigAlternateGetPeakBitRate(v46), PeakBitRate <= 0))
  {
LABEL_119:
    CFIndex v19 = FigSignalErrorAt();
LABEL_120:
    uint64_t v33 = v19;
    unsigned int v294 = 0;
    CMTimeValue v30 = 0;
    CMTimeValue v285 = 0;
    __int16 v32 = 0;
    goto LABEL_561;
  }
  if (*(void *)(DerivedStorage + 8224) && !FigCFEqual())
  {
    if (dword_1E9351350)
    {
      LODWORD(v298.value) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      long long v66 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v67 = v298.value;
      if (os_log_type_enabled(v66, type[0])) {
        unsigned int v68 = v67;
      }
      else {
        unsigned int v68 = v67 & 0xFFFFFFFE;
      }
      if (v68)
      {
        long long v69 = &stru_1EE53F4B8;
        if (*(void *)(DerivedStorage + 8760)) {
          long long v69 = *(__CFString **)(DerivedStorage + 8760);
        }
        LODWORD(cf.value) = 136315394;
        *(CMTimeValue *)((char *)&cf.value + 4) = (CMTimeValue)"segPumpSetCurrentAlternate";
        LOWORD(cf.flags) = 2114;
        *(void *)((char *)&cf.flags + 2) = v69;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    segPumpClearSuggestedAlternate((void *)DerivedStorage);
  }
  int HDCPLevel = FigAlternateGetHDCPLevel(v46);
  if (HDCPLevel == -2) {
    int v71 = -1;
  }
  else {
    int v71 = HDCPLevel;
  }
  int IsIFrameOnly = FigAlternateIsIFrameOnly(v46);
  PlaylistAlternateCFURLRef URL = (const void *)FigAlternateGetPlaylistAlternateURL(v46);
  if (PlaylistAlternateURL)
  {
    CFTypeRef v300 = CFRetain(PlaylistAlternateURL);
    if (v300)
    {
      if (*(unsigned char *)(DerivedStorage + 320))
      {
        CFIndex v19 = FigCFHTTPCopyURLAndInheritQueyComponentIfNotPresent(*(const __CFURL **)(DerivedStorage + 312), (CFURLRef *)&v300);
        if (v19) {
          goto LABEL_120;
        }
      }
    }
  }
  else
  {
    CFTypeRef v300 = 0;
  }
  CFTypeRef v73 = v300;
  int v261 = v71;
  if (a5)
  {
    if (v300) {
      CFRetain(v300);
    }
    URLForCacheLookup = (const void *)FigAlternateGetURLForCacheLookup(v46);
    StableStreamCFStringRef Identifier = (const void *)FigAlternateGetStableStreamIdentifier(v46);
    double v272 = 0;
    uint64_t v269 = 0;
    CMTimeValue v75 = (CMTimeValue)v73;
    CFTypeRef v73 = 0;
  }
  else
  {
    if (v300) {
      CFRetain(v300);
    }
    uint64_t v269 = (const void *)FigAlternateGetURLForCacheLookup(v46);
    double v272 = (const void *)FigAlternateGetStableStreamIdentifier(v46);
    URLForCacheLookup = 0;
    StableStreamCFStringRef Identifier = 0;
    CMTimeValue v75 = 0;
  }
  long long v76 = *(const void **)(DerivedStorage + 8392);
  if (v76)
  {
    CFRelease(v76);
    *(void *)(DerivedStorage + 8392) = 0;
  }
  long long v77 = *(const void **)(DerivedStorage + 8400);
  if (v77)
  {
    CFRelease(v77);
    *(void *)(DerivedStorage + 8400) = 0;
  }
  CMTimeValue v285 = v75;
  CMTimeValue v282 = (CMTimeValue)v73;
  long long v78 = *(const void **)(DerivedStorage + 8408);
  if (v78)
  {
    CFRelease(v78);
    *(void *)(DerivedStorage + 8408) = 0;
  }
  CFTypeRef cf2 = (CFTypeRef)v46;
  if (!a3 || (CFIndex v79 = CFArrayGetCount(a3), v79 < 1))
  {
    LOBYTE(v286) = 0;
    double v270 = 0;
    uint64_t v271 = 0;
    CMTimeValue v30 = 0;
LABEL_216:
    __int16 v32 = (const void *)v282;
    if (!(v285 | v282))
    {
      uint64_t v33 = FigSignalErrorAt();
      unsigned int v294 = 0;
LABEL_48:
      CMTimeValue v285 = 0;
      __int16 v32 = 0;
      goto LABEL_49;
    }
    unsigned int v97 = v282 != 0;
    if (v282) {
      BOOL v98 = 1;
    }
    else {
      BOOL v98 = v285 == 0;
    }
    int v99 = a5;
    if (!v98) {
      int v99 = 1;
    }
    int v262 = v99;
    if (v285) {
      v97 |= 2u;
    }
    if (v30) {
      uint64_t v100 = v97 | 4;
    }
    else {
      uint64_t v100 = v97;
    }
    *a10 = v100;
    uint64_t v101 = *(void *)(DerivedStorage + 9048);
    if (v101)
    {
      uint64_t v102 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v103 = v102 ? v102 : 0;
      unsigned int v104 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v103 + 56);
      if (v104) {
        v104(v101, 0x1EE582B98, 0x1EE585178, v100, 0);
      }
    }
    uint64_t v105 = *(void *)(DerivedStorage + 8144);
    if (v105) {
      BOOL v106 = CFEqual(*(CFTypeRef *)(v105 + 8), cf2) == 0;
    }
    else {
      BOOL v106 = 1;
    }
    BOOL v277 = v106;
    unint64_t v107 = *(void *)(*v279 + 8);
    if (v282 | v107) {
      BOOL v108 = FigCFHTTPCompareURLs((const void *)v282, (CFTypeRef)v107) == 0;
    }
    else {
      BOOL v108 = 0;
    }
    unint64_t v109 = *(void *)(*(void *)(DerivedStorage + 400) + 8);
    if (v285 | v109) {
      BOOL v281 = FigCFHTTPCompareURLs((const void *)v285, (CFTypeRef)v109) == 0;
    }
    else {
      BOOL v281 = 0;
    }
    unint64_t v110 = *(void *)(*(void *)(DerivedStorage + 416) + 8);
    if (v30 | v110)
    {
      int v112 = FigCFHTTPCompareURLs((const void *)v30, (CFTypeRef)v110);
      int v111 = v108 | 2;
      if (!v281) {
        int v111 = v108;
      }
      BOOL v260 = v112 == 0;
      if (!v112) {
        v111 |= 4u;
      }
    }
    else
    {
      BOOL v260 = 0;
      int v111 = v108 | 2;
      if (!v281) {
        int v111 = v108;
      }
    }
    unsigned int v294 = v111;
    double v113 = (unsigned char *)(DerivedStorage + 8004);
    uint64_t v114 = *(void *)(DerivedStorage + 8144);
    if (v114)
    {
      FigAlternateGetVideoGroupIDString(*(void *)(v114 + 8));
      FigAlternateGetVideoGroupIDString(*(void *)(v37 + 8));
      BOOL v115 = FigCFEqual() == 0;
      uint64_t v116 = *(void *)(DerivedStorage + 8144);
      if (v116)
      {
        FigAlternateGetAudioGroupIDString(*(void *)(v116 + 8));
        FigAlternateGetAudioGroupIDString(*(void *)(v37 + 8));
        BOOL v268 = FigCFEqual() == 0;
        uint64_t v117 = *(void *)(DerivedStorage + 8144);
        if (v117)
        {
          FigAlternateGetSubtitleGroupIDString(*(void *)(v117 + 8));
          FigAlternateGetSubtitleGroupIDString(*(void *)(v37 + 8));
          BOOL v267 = FigCFEqual() == 0;
          if (*(void *)(DerivedStorage + 8144))
          {
            if (*(void *)(DerivedStorage + 296)) {
              int IsFullyCached = FigAlternateGetLastKnownValueForIsFullyCached();
            }
            else {
              int IsFullyCached = 0;
            }
            BOOL v266 = IsFullyCached != 0;
          }
          else
          {
            BOOL v266 = 0;
          }
        }
        else
        {
          BOOL v266 = 0;
          BOOL v267 = 1;
        }
        goto LABEL_259;
      }
      BOOL v266 = 0;
      BOOL v267 = 1;
    }
    else
    {
      BOOL v266 = 0;
      BOOL v267 = 1;
      BOOL v115 = 1;
    }
    BOOL v268 = 1;
LABEL_259:
    if (*(void *)(DerivedStorage + 296)) {
      int v119 = FigAlternateGetLastKnownValueForIsFullyCached();
    }
    else {
      int v119 = 0;
    }
    int v263 = (v291 >> 4) & 1;
    *(unsigned char *)(DerivedStorage + 8216) = (v291 & 0x10) != 0;
    if ((*(void *)v288 & 0x8000000000000000) != 0)
    {
      uint64_t v120 = MEMORY[0x1E4F1FA48];
      long long v74 = *MEMORY[0x1E4F1FA48];
      *(_OWORD *)uint64_t v288 = *MEMORY[0x1E4F1FA48];
      *(void *)(v288 + 16) = *(void *)(v120 + 16);
    }
    key = a9;
    int v278 = v291 & 1;
    uint64_t v275 = (unsigned char *)(DerivedStorage + 8004);
    BOOL v121 = v277;
    BOOL v276 = v108;
    if (dword_1E9351350)
    {
      LODWORD(v298.value) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      int v122 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v123 = v298.value;
      if (os_log_type_enabled(v122, type[0])) {
        unsigned int v124 = v123;
      }
      else {
        unsigned int v124 = v123 & 0xFFFFFFFE;
      }
      if (v124)
      {
        if (*(void *)(DerivedStorage + 8760)) {
          unsigned int v125 = *(__CFString **)(DerivedStorage + 8760);
        }
        else {
          unsigned int v125 = &stru_1EE53F4B8;
        }
        CMTime time = *(CMTime *)v288;
        Float64 Seconds = CMTimeGetSeconds(&time);
        CMTime time = *v280;
        double v127 = CMTimeGetSeconds(&time);
        LODWORD(cf.value) = 136317186;
        CMTime v128 = "false";
        *(CMTimeValue *)((char *)&cf.value + 4) = (CMTimeValue)"segPumpSetCurrentAlternate";
        LOWORD(cf.flags) = 2114;
        *(void *)((char *)&cf.flags + 2) = v125;
        HIWORD(cf.epoch) = 1024;
        if (v283) {
          uint64_t v129 = "true";
        }
        else {
          uint64_t v129 = "false";
        }
        *(_DWORD *)uint64_t v303 = PeakBitRate;
        if (IsIFrameOnly) {
          unsigned int v130 = "true";
        }
        else {
          unsigned int v130 = "false";
        }
        *(_WORD *)&v303[4] = 2048;
        if (v119) {
          CMTime v128 = "true";
        }
        *(Float64 *)&v303[6] = Seconds;
        __int16 v304 = 2048;
        double v305 = v127;
        __int16 v306 = 1024;
        int v307 = v291 & 1;
        __int16 v308 = 2082;
        uint64_t v309 = v129;
        __int16 v310 = 2082;
        double v311 = v130;
        __int16 v312 = 2082;
        uint64_t v313 = v128;
        BOOL v121 = v277;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      __int16 v32 = (const void *)v282;
      double v113 = (unsigned char *)(DerivedStorage + 8004);
      BOOL v108 = v276;
    }
    int v131 = v121 || v108;
    if (!v121 && !v108 && !v281)
    {
      int v287 = 0;
      uint64_t v292 = 0;
      int v18 = v283;
      CFStringRef v184 = v280;
      int v200 = v261;
      int v170 = v263;
LABEL_509:
      if (*(_DWORD *)(DerivedStorage + 288) != v200)
      {
        uint64_t v234 = *(const void **)(DerivedStorage + 272);
        if (v234)
        {
          CFRelease(v234);
          *(void *)(DerivedStorage + 272) = 0;
        }
        v235 = *(const void **)(DerivedStorage + 280);
        if (v235)
        {
          CFRelease(v235);
          *(void *)(DerivedStorage + 280) = 0;
        }
        *(_DWORD *)(DerivedStorage + 288) = v200;
      }
      if (v260)
      {
        if (key && (key[2].flags & 1) != 0) {
          CFStringRef v184 = key + 2;
        }
        CMTime time = *v184;
        uint64_t v236 = *(void *)(DerivedStorage + 416);
        if (v30)
        {
          uint64_t v237 = *(void *)(v236 + 56);
          unint64_t v238 = v292;
          int v239 = v287;
          if (v237
            && (CFArrayRef MediaSegmentSpecifiers = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(v237)) != 0
            && CFArrayGetCount(MediaSegmentSpecifiers) > 0)
          {
            uint64_t v241 = 0;
          }
          else
          {
            uint64_t v241 = *(void *)(DerivedStorage + 16 * *(void *)(DerivedStorage + 8416) + 384);
          }
          uint64_t v242 = *(void *)(DerivedStorage + 416);
          CMTime cf = *(CMTime *)v288;
          CMTime v298 = time;
          uint64_t v33 = segPumpSetAlternateForStream(v290, DerivedStorage, v242, v241, (const void *)v30, v270, v271, v278, 1u, (uint64_t)&cf, (uint64_t)&v298);
LABEL_529:
          if (v170 && !v33)
          {
            uint64_t v243 = 0;
            uint64_t v244 = 384;
            type[0] = OS_LOG_TYPE_DEFAULT;
            os_log_type_t v297 = OS_LOG_TYPE_DEFAULT;
            while (1)
            {
              uint64_t v245 = *(uint64_t **)(DerivedStorage + v244);
              uint64_t v246 = v245[8];
              if (v246)
              {
                FigStreamingCacheMediaStreamIsComplete(*(void *)(DerivedStorage + 296), v246, type);
                FigStreamingCacheMediaStreamIsWritableToDisk(*(void *)(DerivedStorage + 296), v245[8], &v297);
                if (type[0] || v297 == OS_LOG_TYPE_DEFAULT)
                {
                  *a10 &= ~(1 << v243);
                  if (dword_1E9351350)
                  {
                    LODWORD(v298.value) = 0;
                    uint64_t v248 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                    unsigned int v249 = v298.value;
                    if (os_log_type_enabled(v248, OS_LOG_TYPE_DEFAULT)) {
                      unsigned int v250 = v249;
                    }
                    else {
                      unsigned int v250 = v249 & 0xFFFFFFFE;
                    }
                    if (v250)
                    {
                      uint64_t v251 = *(__CFString **)(DerivedStorage + 8760);
                      if (!v251) {
                        uint64_t v251 = &stru_1EE53F4B8;
                      }
                      uint64_t v252 = *v245;
                      uint64_t v253 = "complete";
                      if (type[0] == OS_LOG_TYPE_DEFAULT) {
                        uint64_t v253 = "not writable";
                      }
                      LODWORD(cf.value) = 136316162;
                      *(CMTimeValue *)((char *)&cf.value + 4) = (CMTimeValue)"segPumpSetCurrentAlternate";
                      LOWORD(cf.flags) = 2114;
                      *(void *)((char *)&cf.flags + 2) = v251;
                      HIWORD(cf.epoch) = 2048;
                      *(void *)uint64_t v303 = v252;
                      *(_WORD *)&v303[8] = 1024;
                      *(_DWORD *)&v303[10] = v243;
                      __int16 v304 = 2080;
                      double v305 = *(double *)&v253;
                      _os_log_send_and_compose_impl();
                    }
                    fig_log_call_emit_and_clean_up_after_send_and_compose();
                  }
                  uint64_t v254 = segPumpStopStream(DerivedStorage, (uint64_t)v245, 0);
                  if (v254)
                  {
                    uint64_t v33 = v254;
LABEL_554:
                    int v18 = v283;
LABEL_555:
                    __int16 v32 = (const void *)v282;
                    goto LABEL_556;
                  }
                  uint64_t v255 = (const void *)v245[2];
                  if (v255)
                  {
                    CFRelease(v255);
                    v245[2] = 0;
                  }
                }
              }
              ++v243;
              v244 += 16;
              if (v243 == 3)
              {
                uint64_t v33 = 0;
                goto LABEL_554;
              }
            }
          }
          goto LABEL_557;
        }
        ++*(_DWORD *)(v236 + 72);
        uint64_t v33 = segPumpStopStream(DerivedStorage, v236, 0);
        segPumpStreamUpdateIndexFile((void *)v236, 0, 0, 0, 0, @".");
      }
      else
      {
        uint64_t v33 = 0;
      }
      unint64_t v238 = v292;
      int v239 = v287;
      goto LABEL_529;
    }
    char v132 = !v266;
    if (v119) {
      char v132 = 1;
    }
    if (v132 & 1 | !v121 | (v115 || v268 || v267) || (_BYTE)v286)
    {
      char v133 = IsIFrameOnly || v115;
      if ((v132 & 1) != 0 || (v133 & 1) == 0)
      {
        __int16 v134 = (uint64_t *)(DerivedStorage + 400);
        int v18 = v283;
        if ((v291 & 1) == 0)
        {
          int v135 = !v276;
          if (!v113[5]) {
            int v135 = 1;
          }
          int v136 = ((v135 | v281) & 1) == 0 && *(void *)(*v134 + 16) && *(unsigned __int8 *)(*v134 + 869) == 0;
          v298.CMTimeValue value = 0;
          if (*(unsigned char *)(*(void *)(DerivedStorage + 16 * *(void *)(DerivedStorage + 8416) + 384) + 1169))
          {
            uint64_t valid = FigSignalErrorAt();
            goto LABEL_560;
          }
          segPumpGetSafeNetworkBandwidth(DerivedStorage, (double *)&v298.value, 1, 0);
          if (*(unsigned char *)(v288 + 12))
          {
            int v137 = (v291 & 2) != 0 ? 0 : v283 ^ 1;
            CMTime time = *(CMTime *)v288;
            CMTime cf = *v280;
            if (segPumpRejectSwitchDueToStallRisk(DerivedStorage, (uint64_t)cf2, PeakBitRate, &time, &cf, v136, v137, *(double *)&v298.value))
            {
              uint64_t v33 = 4294954652;
              goto LABEL_561;
            }
          }
          int v138 = v291 & 1;
          if (PeakBitRate <= v274) {
            int v138 = 1;
          }
          int v278 = v138;
        }
        if (*(void *)(DerivedStorage + 8144)) {
          BOOL v139 = v121;
        }
        else {
          BOOL v139 = 0;
        }
        if (v139)
        {
          CFArrayRef v140 = a3;
          if (v113[172]
            && !*(unsigned char *)(*(void *)(DerivedStorage + 16 * *(void *)(DerivedStorage + 8416) + 384) + 860))
          {
            uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
            uint64_t v142 = *(void *)(DerivedStorage + 16 * *(void *)(DerivedStorage + 8416) + 384);
            unsigned int v143 = *(_DWORD *)(DerivedStorage + 8);
            if (v143 <= 0xA) {
              unsigned int v143 = 10;
            }
            if (UpTimeNanoseconds - *(void *)(v142 + 432) > 1000000000 * (unint64_t)v143)
            {
              uint64_t v292 = *(uint64_t **)(DerivedStorage + 8144);
              if (*(_DWORD *)(v142 + 472))
              {
                LODWORD(v298.value) = 0;
                type[0] = OS_LOG_TYPE_DEFAULT;
                unint64_t v144 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                unsigned int v145 = v298.value;
                if (os_log_type_enabled(v144, type[0])) {
                  unsigned int v146 = v145;
                }
                else {
                  unsigned int v146 = v145 & 0xFFFFFFFE;
                }
                if (v146)
                {
                  if (*(void *)(DerivedStorage + 8760)) {
                    unsigned int v147 = *(__CFString **)(DerivedStorage + 8760);
                  }
                  else {
                    unsigned int v147 = &stru_1EE53F4B8;
                  }
                  uint64_t v148 = FigAlternateGetPlaylistAlternateURL(v292[1]);
                  uint64_t v149 = @"[]";
                  BOOL v64 = *(unsigned char *)(DerivedStorage + 339) == 0;
                  LODWORD(cf.value) = 136315650;
                  *(CMTimeValue *)((char *)&cf.value + 4) = (CMTimeValue)"segPumpSetCurrentAlternate";
                  if (!v64) {
                    uint64_t v149 = (__CFString *)v148;
                  }
                  LOWORD(cf.flags) = 2114;
                  *(void *)((char *)&cf.flags + 2) = v147;
                  HIWORD(cf.epoch) = 2114;
                  *(void *)uint64_t v303 = v149;
                  _os_log_send_and_compose_impl();
                }
                CFArrayRef v140 = a3;
                double v113 = (unsigned char *)(DerivedStorage + 8004);
                int v287 = 1;
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              else
              {
                LODWORD(v298.value) = 0;
                type[0] = OS_LOG_TYPE_DEFAULT;
                uint64_t v207 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                unsigned int v208 = v298.value;
                if (os_log_type_enabled(v207, type[0])) {
                  unsigned int v209 = v208;
                }
                else {
                  unsigned int v209 = v208 & 0xFFFFFFFE;
                }
                if (v209)
                {
                  if (*(void *)(DerivedStorage + 8760)) {
                    uint64_t v210 = *(__CFString **)(DerivedStorage + 8760);
                  }
                  else {
                    uint64_t v210 = &stru_1EE53F4B8;
                  }
                  uint64_t v211 = FigAlternateGetPlaylistAlternateURL(v292[1]);
                  v212 = @"[]";
                  BOOL v64 = *(unsigned char *)(DerivedStorage + 339) == 0;
                  LODWORD(cf.value) = 136315650;
                  *(CMTimeValue *)((char *)&cf.value + 4) = (CMTimeValue)"segPumpSetCurrentAlternate";
                  if (!v64) {
                    v212 = (__CFString *)v211;
                  }
                  LOWORD(cf.flags) = 2114;
                  *(void *)((char *)&cf.flags + 2) = v210;
                  HIWORD(cf.epoch) = 2114;
                  *(void *)uint64_t v303 = v212;
                  _os_log_send_and_compose_impl();
                }
                CFArrayRef v140 = a3;
                double v113 = (unsigned char *)(DerivedStorage + 8004);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
                int v287 = 0;
              }
              int v18 = v283;
              __int16 v32 = (const void *)v282;
              if (!v283) {
                goto LABEL_330;
              }
LABEL_328:
              *(void *)(DerivedStorage + 7680) = v37;
              goto LABEL_351;
            }
          }
          int v287 = 0;
          uint64_t v292 = 0;
          if (v283) {
            goto LABEL_328;
          }
        }
        else
        {
          int v287 = 0;
          uint64_t v292 = 0;
          CFArrayRef v140 = a3;
          if (v283) {
            goto LABEL_328;
          }
        }
LABEL_330:
        segPumpCancelAllReadAheadAndResetData(DerivedStorage);
        for (uint64_t m = 384; m != 432; m += 16)
          segPumpStreamCancelPreloadReadAndResetData(DerivedStorage, *(void *)(DerivedStorage + m));
        for (uint64_t n = 384; n != 432; n += 16)
          segPumpStreamCancelPreloadMapReadAndResetData(DerivedStorage, *(void *)(DerivedStorage + n));
        segPumpRTCReportingIssueRTCReportingEvent(DerivedStorage, 201);
        double v152 = *(const void **)(DerivedStorage + 8248);
        if (v152)
        {
          CFRelease(v152);
          *(void *)(DerivedStorage + 8248) = 0;
        }
        for (iuint64_t i = 0; ii != 120; ii += 40)
          *(unsigned char *)(DerivedStorage + 8280 + ii) = 0;
        uint64_t v154 = *(void *)(DerivedStorage + 8144);
        if (v154) {
          BOOL v155 = v292 == 0;
        }
        else {
          BOOL v155 = 0;
        }
        if (v155 && IsIFrameOnly == 0 && !*(void *)(DerivedStorage + 184) && PeakBitRate > v274) {
          *(void *)(DerivedStorage + 8248) = CFRetain(*(CFTypeRef *)(v154 + 8));
        }
LABEL_351:
        CFDictionaryRef v158 = *(const void **)(DerivedStorage + 8152);
        *(void *)(DerivedStorage + 8152) = v140;
        if (v140) {
          CFRetain(v140);
        }
        if (v158) {
          CFRelease(v158);
        }
        uint64_t v159 = *(void *)(DerivedStorage + 9544);
        if (v159)
        {
          uint64_t v160 = *(void *)(CMBaseObjectGetVTable() + 8);
          uint64_t v161 = v160 ? v160 : 0;
          uint64_t v162 = *(void (**)(uint64_t, __CFString *, const __CFArray *))(v161 + 56);
          if (v162) {
            v162(v159, @"AlternateFilterMonitorProperty_SelectedMedia", v140);
          }
        }
        if (IsIFrameOnly)
        {
          BOOL v163 = v276;
          if (!v32) {
            BOOL v163 = 0;
          }
          unsigned int v294 = v163;
          if (!v131)
          {
            uint64_t v33 = 0;
            goto LABEL_556;
          }
          if (!*(void *)(*v134 + 16) || (uint64_t valid = segPumpStopStream(DerivedStorage, *v134, 0), !valid))
          {
            uint64_t v165 = *(void *)(DerivedStorage + 416);
            if (!*(void *)(v165 + 16) || (uint64_t valid = segPumpStopStream(DerivedStorage, v165, 0), !valid))
            {
              segPumpClearStatistics(DerivedStorage);
              segPumpUpdateCurrentAlternate(DerivedStorage, v37);
              *(unsigned char *)(DerivedStorage + 8712) = 1;
              if (!v277) {
                *(unsigned char *)(DerivedStorage + 8713) = 1;
              }
              *(void *)(*(void *)(DerivedStorage + 384) + 896) = *(void *)(*(void *)(DerivedStorage + 384)
                                                                                 + 1056);
              segPumpStreamUpdateIndexFile(*(void **)(DerivedStorage + 400), 0, 0, 0, 0, @".");
              segPumpStreamUpdateIndexFile(*(void **)(DerivedStorage + 416), 0, 0, 0, 0, @".");
              uint64_t v166 = *(void *)(*(void *)(DerivedStorage + 384) + 56);
              if (v166)
              {
                CFArrayRef v167 = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(v166);
                if (v167)
                {
                  if (CFArrayGetCount(v167) >= 1)
                  {
                    *(unsigned char *)(DerivedStorage + 8713) = 0;
                    *(unsigned char *)(DerivedStorage + 8768) = 0;
                  }
                }
              }
              uint64_t v168 = *(void *)(DerivedStorage + 384);
              CMTime time = *(CMTime *)v288;
              CMTime cf = *v280;
              uint64_t v33 = segPumpSetAlternateForStream(v290, DerivedStorage, v168, 0, v32, v269, v272, v278, 1u, (uint64_t)&time, (uint64_t)&cf);
              ++*(_DWORD *)(*(void *)(DerivedStorage + 400) + 72);
              ++*(_DWORD *)(*(void *)(DerivedStorage + 416) + 72);
              goto LABEL_561;
            }
          }
LABEL_560:
          uint64_t v33 = valid;
          goto LABEL_561;
        }
        uint64_t v169 = (uint64_t *)(DerivedStorage + 400);
        if (v113[708]) {
          v113[708] = 0;
        }
        int v170 = v263;
        if (a9)
        {
          if (*(_DWORD *)(v288 + 12))
          {
            LODWORD(v74) = v294;
            uint8x8_t v171 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&v74);
            v171.i16[0] = vaddlv_u8(v171);
            if (v171.i32[0] >= 2u)
            {
              for (juint64_t j = 0; jj != 3; ++jj)
              {
                if ((v294 >> jj) & 1) != 0 && (a9[jj].flags)
                {
                  uint64_t v173 = *(void *)(DerivedStorage + 16 * jj + 384);
                  CMTime time = *(CMTime *)v288;
                  CMTime cf = a9[jj];
                  CMTimeAdd(&v299, &time, &cf);
                  CMTime time = v299;
                  double v174 = CMTimeGetSeconds(&time);
                  uint64_t v175 = *(void *)(v173 + 56);
                  if (v175)
                  {
                    double v176 = v174;
                    for (kuint64_t k = 0; ; ++kk)
                    {
                      CFArrayRef Count = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(v175);
                      if (Count) {
                        CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
                      }
                      if (kk >= (uint64_t)Count) {
                        break;
                      }
                      CFArrayRef v179 = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(*(void *)(v173 + 56));
                      CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v179, kk);
                      if (FigMediaSegmentSpecifierIsDiscontinuity((uint64_t)ValueAtIndex)
                        && FigMediaSegmentSpecifierGetDiscontinuityDomain((uint64_t)ValueAtIndex) == *(void *)(v173 + 304))
                      {
                        double v181 = vabdd_f64(v176, *((double *)segPumpGetMediaFilePrivateData(ValueAtIndex) + 4));
                        if (v181 >= (double)(FigMediaPlaylistGetTargetDuration(*(void *)(v173 + 56)) >> 1)) {
                          break;
                        }
                        key = 0;
                        goto LABEL_394;
                      }
                      uint64_t v175 = *(void *)(v173 + 56);
                    }
                  }
                }
              }
LABEL_394:
              int v170 = v263;
              uint64_t v169 = (uint64_t *)(DerivedStorage + 400);
            }
          }
        }
        if ((v18 & 1) == 0)
        {
          segPumpClearStatistics(DerivedStorage);
          segPumpUpdateCurrentAlternate(DerivedStorage, v37);
          *(void *)(DerivedStorage + 8416) = v262 != 0;
        }
        uint64_t v182 = *v169;
        uint64_t v183 = *(void *)(*v169 + 16);
        if (v262)
        {
          CFStringRef v184 = v280;
          if (dword_1E9351350)
          {
            LODWORD(v298.value) = 0;
            type[0] = OS_LOG_TYPE_DEFAULT;
            uint64_t v185 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int v186 = v298.value;
            if (os_log_type_enabled(v185, type[0])) {
              unsigned int v187 = v186;
            }
            else {
              unsigned int v187 = v186 & 0xFFFFFFFE;
            }
            if (v187)
            {
              CFAllocatorRef v188 = &stru_1EE53F4B8;
              if (*(void *)(DerivedStorage + 8760)) {
                CFAllocatorRef v188 = *(__CFString **)(DerivedStorage + 8760);
              }
              LODWORD(cf.value) = 136315394;
              *(CMTimeValue *)((char *)&cf.value + 4) = (CMTimeValue)"segPumpSetCurrentAlternate";
              LOWORD(cf.flags) = 2114;
              *(void *)((char *)&cf.flags + 2) = v188;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          int v200 = v261;
          if (v281)
          {
            uint64_t v201 = 400;
            uint64_t v202 = 384;
            if (v183) {
              uint64_t v202 = 400;
            }
            uint64_t v203 = *(void *)(DerivedStorage + v202);
            if (v18) {
              uint64_t v201 = 408;
            }
            uint64_t v204 = *(void *)(DerivedStorage + v201);
            CMTime time = *(CMTime *)v288;
            CMTime cf = *v280;
            uint64_t v205 = segPumpSetAlternateForStream(v290, DerivedStorage, v204, v203, (const void *)v285, URLForCacheLookup, StableStreamIdentifier, v278, v278 == 0, (uint64_t)&time, (uint64_t)&cf);
            if (v205)
            {
              uint64_t v33 = v205;
              goto LABEL_555;
            }
          }
          __int16 v32 = (const void *)v282;
          if (v18) {
            goto LABEL_508;
          }
          uint64_t v206 = *(void *)(DerivedStorage + 384);
          ++*(_DWORD *)(v206 + 72);
          uint64_t v193 = segPumpStopStream(DerivedStorage, v206, 0);
          if (!v193)
          {
            segPumpStreamUpdateIndexFile((void *)*v279, 0, 0, 0, 0, @".");
LABEL_508:
            *(unsigned char *)(DerivedStorage + 8011) = 0;
            goto LABEL_509;
          }
LABEL_593:
          uint64_t v33 = v193;
          goto LABEL_556;
        }
        CFStringRef v184 = v280;
        uint64_t v189 = *v279;
        uint64_t v190 = *(void *)(*v279 + 16);
        if (!v281)
        {
          int v199 = 0;
          uint64_t v33 = 0;
          __int16 v32 = (const void *)v282;
          int v200 = v261;
          goto LABEL_483;
        }
        __int16 v191 = v280;
        if (key)
        {
          __int16 v191 = key + 1;
          if ((key[1].flags & 1) == 0) {
            __int16 v191 = v280;
          }
        }
        CMTime v298 = *v191;
        if (v183) {
          uint64_t v192 = v182;
        }
        else {
          uint64_t v192 = v189;
        }
        if (v285)
        {
          if (v18) {
            uint64_t v182 = *(void *)(DerivedStorage + 408);
          }
          CMTime time = *(CMTime *)v288;
          CMTime cf = v298;
          uint64_t v193 = segPumpSetAlternateForStream(v290, DerivedStorage, v182, v192, (const void *)v285, URLForCacheLookup, StableStreamIdentifier, v278, v278 == 0, (uint64_t)&time, (uint64_t)&cf);
          __int16 v32 = (const void *)v282;
          if (v193) {
            goto LABEL_593;
          }
          if (dword_1E9351350)
          {
            *(_DWORD *)os_log_type_t type = 0;
            os_log_type_t v297 = OS_LOG_TYPE_DEFAULT;
            int v194 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            int v195 = *(_DWORD *)type;
            if (os_log_type_enabled(v194, OS_LOG_TYPE_DEFAULT)) {
              unsigned int v196 = v195;
            }
            else {
              unsigned int v196 = v195 & 0xFFFFFFFE;
            }
            if (v196)
            {
              unint64_t v197 = &stru_1EE53F4B8;
              if (*(void *)(DerivedStorage + 8760)) {
                unint64_t v197 = *(__CFString **)(DerivedStorage + 8760);
              }
              uint64_t v198 = *(void *)v192;
              LODWORD(cf.value) = 136315906;
              *(CMTimeValue *)((char *)&cf.value + 4) = (CMTimeValue)"segPumpSetCurrentAlternate";
              LOWORD(cf.flags) = 2114;
              *(void *)((char *)&cf.flags + 2) = v197;
              HIWORD(cf.epoch) = 1024;
              *(_DWORD *)uint64_t v303 = v198;
              *(_WORD *)&v303[4] = 1024;
              *(_DWORD *)&v303[6] = v283;
              _os_log_send_and_compose_impl();
            }
            int v200 = v261;
            uint64_t v169 = (uint64_t *)(DerivedStorage + 400);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            int v199 = 0;
            uint64_t v33 = 0;
            __int16 v32 = (const void *)v282;
            goto LABEL_483;
          }
          int v199 = 0;
          uint64_t v33 = 0;
        }
        else
        {
          if ((v18 & 1) == 0)
          {
            __int16 v32 = (const void *)v282;
            if (v276)
            {
              if (dword_1E9351350)
              {
                *(_DWORD *)os_log_type_t type = 0;
                os_log_type_t v297 = OS_LOG_TYPE_DEFAULT;
                uint64_t v213 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                unsigned int v214 = *(_DWORD *)type;
                if (os_log_type_enabled(v213, OS_LOG_TYPE_DEFAULT)) {
                  unsigned int v215 = v214;
                }
                else {
                  unsigned int v215 = v214 & 0xFFFFFFFE;
                }
                if (v215)
                {
                  uint64_t v216 = &stru_1EE53F4B8;
                  if (*(void *)(DerivedStorage + 8760)) {
                    uint64_t v216 = *(__CFString **)(DerivedStorage + 8760);
                  }
                  LODWORD(cf.value) = 136315394;
                  *(CMTimeValue *)((char *)&cf.value + 4) = (CMTimeValue)"segPumpSetCurrentAlternate";
                  LOWORD(cf.flags) = 2114;
                  *(void *)((char *)&cf.flags + 2) = v216;
                  _os_log_send_and_compose_impl();
                }
                fig_log_call_emit_and_clean_up_after_send_and_compose();
                __int16 v32 = (const void *)v282;
              }
              uint64_t v33 = 0;
              ++*(_DWORD *)(v192 + 72);
              int v199 = 1;
            }
            else
            {
              if (dword_1E9351350)
              {
                *(_DWORD *)os_log_type_t type = 0;
                os_log_type_t v297 = OS_LOG_TYPE_DEFAULT;
                uint64_t v217 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                unsigned int v218 = *(_DWORD *)type;
                if (os_log_type_enabled(v217, OS_LOG_TYPE_DEFAULT)) {
                  unsigned int v219 = v218;
                }
                else {
                  unsigned int v219 = v218 & 0xFFFFFFFE;
                }
                if (v219)
                {
                  CFStringRef v220 = *(__CFString **)(DerivedStorage + 8760);
                  if (!v220) {
                    CFStringRef v220 = &stru_1EE53F4B8;
                  }
                  uint64_t v221 = *(void *)v182;
                  LODWORD(cf.value) = 136315650;
                  *(CMTimeValue *)((char *)&cf.value + 4) = (CMTimeValue)"segPumpSetCurrentAlternate";
                  LOWORD(cf.flags) = 2114;
                  *(void *)((char *)&cf.flags + 2) = v220;
                  HIWORD(cf.epoch) = 2048;
                  *(void *)uint64_t v303 = v221;
                  _os_log_send_and_compose_impl();
                }
                fig_log_call_emit_and_clean_up_after_send_and_compose();
                __int16 v32 = (const void *)v282;
              }
              ++*(_DWORD *)(v182 + 72);
              uint64_t v33 = segPumpStopStream(DerivedStorage, v182, 0);
              int v199 = 0;
            }
            int v200 = v261;
            uint64_t v169 = (uint64_t *)(DerivedStorage + 400);
            segPumpStreamUpdateIndexFile((void *)*v134, 0, 0, 0, 0, @".");
LABEL_483:
            if (v276)
            {
              if (!key || (uint64_t v222 = key, (key->flags & 1) == 0)) {
                uint64_t v222 = v280;
              }
              long long v223 = *(_OWORD *)&v222->value;
              v298.CMTimeEpoch epoch = v222->epoch;
              *(_OWORD *)&v298.CMTimeValue value = v223;
              if (v278) {
                unsigned __int8 v224 = *v275 == 0;
              }
              else {
                unsigned __int8 v224 = 1;
              }
              uint64_t v225 = (uint64_t *)(DerivedStorage + 384);
              if (!v190) {
                uint64_t v225 = v169;
              }
              uint64_t v226 = (uint64_t *)*v225;
              if (dword_1E9351350)
              {
                *(_DWORD *)os_log_type_t type = 0;
                os_log_type_t v297 = OS_LOG_TYPE_DEFAULT;
                unint64_t v227 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                unsigned int v228 = *(_DWORD *)type;
                if (os_log_type_enabled(v227, OS_LOG_TYPE_DEFAULT)) {
                  unsigned int v229 = v228;
                }
                else {
                  unsigned int v229 = v228 & 0xFFFFFFFE;
                }
                if (v229)
                {
                  uint64_t v230 = &stru_1EE53F4B8;
                  if (*(void *)(DerivedStorage + 8760)) {
                    uint64_t v230 = *(__CFString **)(DerivedStorage + 8760);
                  }
                  uint64_t v231 = *v226;
                  LODWORD(cf.value) = 136315906;
                  *(CMTimeValue *)((char *)&cf.value + 4) = (CMTimeValue)"segPumpSetCurrentAlternate";
                  LOWORD(cf.flags) = 2114;
                  *(void *)((char *)&cf.flags + 2) = v230;
                  HIWORD(cf.epoch) = 1024;
                  *(_DWORD *)uint64_t v303 = v231;
                  *(_WORD *)&v303[4] = 1024;
                  *(_DWORD *)&v303[6] = v283;
                  _os_log_send_and_compose_impl();
                }
                fig_log_call_emit_and_clean_up_after_send_and_compose();
                __int16 v32 = (const void *)v282;
              }
              uint64_t v232 = 384;
              if (v283) {
                uint64_t v232 = 392;
              }
              uint64_t v233 = *(void *)(DerivedStorage + v232);
              CMTime time = *(CMTime *)v288;
              CMTime cf = v298;
              uint64_t v33 = segPumpSetAlternateForStream(v290, DerivedStorage, v233, (uint64_t)v226, v32, v269, v272, v278, v224, (uint64_t)&time, (uint64_t)&cf);
              if (v33)
              {
                int v18 = v283;
                goto LABEL_556;
              }
              *uint64_t v275 = 1;
              CFStringRef v184 = v280;
            }
            if (v199) {
              uint64_t v33 = segPumpStopStream(DerivedStorage, *(void *)(DerivedStorage + 400), 0);
            }
            int v18 = v283;
            int v170 = v263;
            if (v33)
            {
LABEL_556:
              unint64_t v238 = v292;
              int v239 = v287;
LABEL_557:
              if (!v238) {
                goto LABEL_561;
              }
              uint64_t valid = MoveAlternateFromValidList((uint64_t)v290, v238, v239, 0);
              if (!valid) {
                uint64_t valid = segPumpUpdateAlternateSelectionBossNetworkErrorFilter((void *)DerivedStorage, v239);
              }
              goto LABEL_560;
            }
            goto LABEL_508;
          }
          int v199 = 0;
          uint64_t v33 = 0;
          __int16 v32 = (const void *)v282;
        }
        int v200 = v261;
        uint64_t v169 = (uint64_t *)(DerivedStorage + 400);
        goto LABEL_483;
      }
    }
    uint64_t v33 = 4294950461;
LABEL_49:
    int v18 = v283;
    goto LABEL_561;
  }
  CFIndex v80 = v79;
  uint64_t v81 = 0;
  double v270 = 0;
  uint64_t v271 = 0;
  int v286 = 0;
  CFIndex v82 = 0;
  while (1)
  {
    CFDictionaryRef v83 = (const __CFDictionary *)CFArrayGetValueAtIndex(a3, v82);
    if (CFDictionaryGetValue(v83, @"MediaSelectionGroupMediaType"))
    {
      time.CMTimeValue value = 0;
      cf.CMTimeValue value = 0;
      v298.CMTimeValue value = 0;
      *(_DWORD *)os_log_type_t type = 0;
      if (!FigCFStringGetOSTypeValue()) {
        goto LABEL_438;
      }
      BOOL v84 = *(_DWORD *)type == 1986618469 || IsIFrameOnly == 0;
      if (v84 && *(_DWORD *)type != 1668047728) {
        break;
      }
    }
    CMTimeValue v30 = (CMTimeValue)v81;
LABEL_213:
    ++v82;
    uint64_t v81 = (const void *)v30;
    if (v80 == v82) {
      goto LABEL_216;
    }
  }
  unsigned int v86 = CFDictionaryGetValue(v83, @"MediaSelectionOptionsPersistentID");
  if (v86)
  {
    unsigned int v87 = v86;
    CFTypeID v88 = CFGetTypeID(v86);
    CFTypeID TypeID = CFNumberGetTypeID();
    BOOL v90 = v88 == TypeID;
    if (v88 == TypeID) {
      CFTypeRef v91 = v87;
    }
    else {
      CFTypeRef v91 = 0;
    }
    int v92 = v286;
    if (v90) {
      int v92 = 1;
    }
    int v286 = v92;
  }
  else
  {
    CFTypeRef v91 = 0;
  }
  if (*(_DWORD *)type == 1986618469)
  {
    uint64_t v93 = *(const void **)(DerivedStorage + 8392);
    *(void *)(DerivedStorage + 8392) = v91;
    if (!v91) {
      goto LABEL_173;
    }
    goto LABEL_172;
  }
  if (*(_DWORD *)type != 1936684398)
  {
    if (*(_DWORD *)type != 1935832172) {
      goto LABEL_438;
    }
    uint64_t v93 = *(const void **)(DerivedStorage + 8408);
    *(void *)(DerivedStorage + 8408) = v91;
    if (v91) {
      goto LABEL_172;
    }
LABEL_173:
    if (v93) {
      CFRelease(v93);
    }
    FigAlternateGetRenditionInfoForMediaType((uint64_t)cf2, *(int *)type, *(const void **)(DerivedStorage + 8392), *(const void **)(DerivedStorage + 8400), *(const void **)(DerivedStorage + 8408), 0, (const __CFDictionary **)&v298, &time, &cf);
    if (time.value)
    {
      CFRetain((CFTypeRef)time.value);
      if (time.value)
      {
        if (*(unsigned char *)(DerivedStorage + 320))
        {
          uint64_t v94 = FigCFHTTPCopyURLAndInheritQueyComponentIfNotPresent(*(const __CFURL **)(DerivedStorage + 312), (CFURLRef *)&time);
          if (v94) {
            goto LABEL_439;
          }
        }
      }
    }
    switch(*(_DWORD *)type)
    {
      case 0x76696465:
        if (v91)
        {
          if (!a5)
          {
            CMTimeValue v95 = time.value;
            if (time.value)
            {
              CFRetain((CFTypeRef)time.value);
              if (v282) {
                CFRelease((CFTypeRef)v282);
              }
              uint64_t v269 = (const void *)cf.value;
              double v272 = (const void *)v298.value;
              CMTimeValue v30 = (CMTimeValue)v81;
              CMTimeValue v282 = v95;
              goto LABEL_211;
            }
          }
        }
        else
        {
          if (v282) {
            CFRelease((CFTypeRef)v282);
          }
          double v272 = 0;
          CMTimeValue v282 = 0;
        }
        break;
      case 0x736F756E:
        if (v91)
        {
          CMTimeValue v96 = time.value;
          if (time.value)
          {
            CFRetain((CFTypeRef)time.value);
            if (v285) {
              CFRelease((CFTypeRef)v285);
            }
            URLForCacheLookup = (const void *)cf.value;
            StableStreamCFStringRef Identifier = (const void *)v298.value;
            CMTimeValue v30 = (CMTimeValue)v81;
            CMTimeValue v285 = v96;
            goto LABEL_211;
          }
        }
        else
        {
          if (v285) {
            CFRelease((CFTypeRef)v285);
          }
          URLForCacheLookup = 0;
          StableStreamCFStringRef Identifier = 0;
          CMTimeValue v285 = 0;
        }
        break;
      case 0x7362746C:
        CMTimeValue v30 = time.value;
        if (time.value) {
          CFRetain((CFTypeRef)time.value);
        }
        if (v81) {
          CFRelease(v81);
        }
        double v270 = (const void *)cf.value;
        uint64_t v271 = (const void *)v298.value;
        goto LABEL_211;
    }
    CMTimeValue v30 = (CMTimeValue)v81;
LABEL_211:
    if (time.value) {
      CFRelease((CFTypeRef)time.value);
    }
    goto LABEL_213;
  }
  if (!a5 || v91)
  {
    uint64_t v93 = *(const void **)(DerivedStorage + 8400);
    *(void *)(DerivedStorage + 8400) = v91;
    if (!v91) {
      goto LABEL_173;
    }
LABEL_172:
    CFRetain(v91);
    goto LABEL_173;
  }
LABEL_438:
  uint64_t v94 = FigSignalErrorAt();
LABEL_439:
  uint64_t v33 = v94;
  int v18 = v283;
  __int16 v32 = (const void *)v282;
  unsigned int v294 = 0;
  CMTimeValue v30 = (CMTimeValue)v81;
LABEL_561:
  if (a12)
  {
    uint64_t v256 = 0;
    uint64_t v257 = DerivedStorage + 392;
    uint64_t v34 = a11;
    do
    {
      if (!v18 || (uint64_t v258 = *(void *)v257, !*(void *)(*(void *)v257 + 16))) {
        uint64_t v258 = *(void *)(v257 - 8);
      }
      *(_DWORD *)(a12 + v256) = *(_DWORD *)(v258 + 72);
      v256 += 4;
      v257 += 16;
    }
    while (v256 != 12);
  }
  else
  {
    uint64_t v34 = a11;
  }
  uint64_t v31 = (const void *)v285;
  if (v34) {
LABEL_570:
  }
    unsigned int *v34 = v294;
LABEL_571:
  if (v30) {
    CFRelease((CFTypeRef)v30);
  }
  if (v31) {
    CFRelease(v31);
  }
  if (v32) {
    CFRelease(v32);
  }
  if (v300) {
    CFRelease(v300);
  }
  return segPumpAPIUnlockAndSendNotificationThenCheckAPIStatus(v290, v33);
}

uint64_t segPumpGetTimeRangeForDate(const void *a1, const __CFDate *a2, CMTime *a3, CMTime *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v9 = *(void *)(*(void *)(DerivedStorage + 16 * *(void *)(DerivedStorage + 8416) + 384) + 56);

  return segPumpGetTimeRangeForDateWithSegmentOffset(a1, v9, a2, a3, a4, 0);
}

uint64_t segPumpGetEstimatedDateForTime(const void *a1, CMTime *a2, CFDateRef *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFIndex v7 = segPumpAPILockAndEnsureAPIStatus(a1, 0);
  if (v7)
  {
    uint64_t v10 = v7;
  }
  else
  {
    uint64_t v8 = *(void *)(*(void *)(DerivedStorage + 16 * *(void *)(DerivedStorage + 8416) + 384) + 56);
    if (v8
      && (CFArrayRef MediaSegmentSpecifiers = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(v8)) != 0
      && CFArrayGetCount(MediaSegmentSpecifiers) >= 1
      && !*(unsigned char *)(DerivedStorage + 8002))
    {
      double Current = CFAbsoluteTimeGetCurrent();
      uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
      uint64_t v14 = *(void *)(DerivedStorage + 16 * *(void *)(DerivedStorage + 8416) + 384);
      double v15 = Current
          + (double)(UpTimeNanoseconds - *(void *)(v14 + 1056)) / -1000000000.0
          - *(double *)(v14 + 96)
          - *(double *)(v14 + 88);
      CMTime v18 = *a2;
      Float64 Seconds = CMTimeGetSeconds(&v18);
      CFDateRef v17 = CFDateCreate(*(CFAllocatorRef *)(DerivedStorage + 56), Seconds + v15);
      uint64_t v10 = 0;
      *a3 = v17;
    }
    else
    {
      uint64_t v10 = 4294954513;
    }
  }
  return segPumpAPIUnlockAndSendNotificationThenCheckAPIStatus(a1, v10);
}

uint64_t segPumpLikelyToKeepUp(const void *a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, float *a6, _OWORD *a7, _DWORD *a8, unsigned char *a9)
{
  uint64_t v102 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  double v95 = 0.0;
  double v96 = 0.0;
  double v93 = 0.0;
  uint64_t v94 = 0;
  int v92 = a1;
  float v17 = 0.0;
  unsigned int v90 = segPumpAPILockAndEnsureAPIStatus(a1, 0);
  if (v90) {
    goto LABEL_127;
  }
  CMTime v18 = (unsigned char *)(DerivedStorage + 8002);
  if (*(unsigned char *)(DerivedStorage + 8712))
  {
    int v34 = 1;
    goto LABEL_129;
  }
  *(_OWORD *)CMTime time = *(_OWORD *)a2;
  *(void *)&time[16] = *(void *)(a2 + 16);
  double Seconds = CMTimeGetSeconds((CMTime *)time);
  uint64_t v101 = 0;
  long long v99 = 0u;
  long long v100 = 0u;
  long long v98 = 0u;
  memset(time, 0, sizeof(time));
  segPumpMakeNetworkPrediction(DerivedStorage, (uint64_t)time);
  if (v20)
  {
LABEL_127:
    int v34 = 0;
LABEL_129:
    float v24 = INFINITY;
    goto LABEL_89;
  }
  uint64_t v87 = a5;
  double v21 = (double)*(uint64_t *)time;
  segPumpGetRequiredBandwidthForCurrentStreamingAlternate(DerivedStorage);
  segPumpGetStartupRequirements(DerivedStorage, *(_DWORD *)(DerivedStorage + 8), (double *)&v94, &v93, &v96, &v95, v22);
  float v23 = Seconds / v96;
  float v17 = fmaxf(v23, 0.0);
  if (*v18)
  {
    float v24 = INFINITY;
  }
  else
  {
    CFTypeID v88 = a7;
    uint64_t v36 = 0;
    int v37 = 0;
    char v38 = 1;
    float v24 = INFINITY;
    do
    {
      char v39 = v38;
      uint64_t v40 = *(void *)(DerivedStorage + 16 * v36 + 384);
      if (*(void *)(v40 + 16))
      {
        if ((a4 >> v36) & 1) != 0 && (*(unsigned char *)(a3 + 12))
        {
          double v41 = *(double *)(v40 + 88);
          double v42 = *(double *)(v40 + 96);
          *(_OWORD *)CMTime time = *(_OWORD *)a3;
          *(void *)&time[16] = *(void *)(a3 + 16);
          if (CMTimeGetSeconds((CMTime *)time) > *(double *)(v40 + 88) && !*(unsigned char *)(DerivedStorage + 329))
          {
            double v43 = v41 + v42;
            double LiveBoundary = segPumpGetLiveBoundary(DerivedStorage, *(void *)(v40 + 56));
            *(_OWORD *)CMTime time = *(_OWORD *)a3;
            *(void *)&time[16] = *(void *)(a3 + 16);
            double v45 = v43 - CMTimeGetSeconds((CMTime *)time);
            if (LiveBoundary >= v45)
            {
              if (*(int *)(DerivedStorage + 7944) >= 2)
              {
                if (*(_DWORD *)(DerivedStorage + 8))
                {
                  float v46 = v45 / (LiveBoundary + 0.01);
                  if (v24 >= v46) {
                    float v24 = v45 / (LiveBoundary + 0.01);
                  }
                }
              }
              if (dword_1E9351350 < 2)
              {
                int v37 = 1;
              }
              else
              {
                os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                int v37 = 1;
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
            }
          }
        }
      }
      char v38 = 0;
      uint64_t v36 = 1;
    }
    while ((v39 & 1) != 0);
    if (v37)
    {
      int v34 = 0;
      a7 = v88;
      goto LABEL_82;
    }
    a7 = v88;
  }
  double v25 = *(double *)(DerivedStorage + 8024);
  if (v25 != 0.0 && Seconds >= v25)
  {
LABEL_27:
    double v33 = v96;
    uint64_t v89 = a8;
    if (Seconds >= v96)
    {
      char v35 = 0;
      *(_DWORD *)(DerivedStorage + 8664) = 2;
    }
    else
    {
      if (Seconds < v95)
      {
        int v34 = 0;
        goto LABEL_89;
      }
      if (v93 > v21) {
        goto LABEL_30;
      }
      *(_DWORD *)(DerivedStorage + 8664) = 3;
      if (!*(unsigned char *)(DerivedStorage + 8712) && !*(void *)(DerivedStorage + 8416))
      {
        char v35 = 0;
        int v34 = 1;
        if ((a4 & 1) != 0 && *(uint64_t *)(*(void *)(DerivedStorage + 384) + 752) >= 2)
        {
          double v47 = Seconds;
          if (v87)
          {
            *(_OWORD *)CMTime time = *(_OWORD *)v87;
            *(void *)&time[16] = *(void *)(v87 + 16);
            double v47 = CMTimeGetSeconds((CMTime *)time);
            double v33 = v96;
          }
          if (v47 < v33)
          {
            CFAbsoluteTime v48 = *(void **)(DerivedStorage + 384);
            uint64_t v49 = v48[87];
            if (v49)
            {
              uint64_t v50 = v48[32];
              if (v50)
              {
                if (v50 == *(void *)(v49 + 8))
                {
                  TimeIndouble Seconds = FigMediaSegmentSpecifierGetTimeInSeconds(v50);
                  uint64_t v81 = v48[94];
                  if (v81 >= 1)
                  {
                    CFIndex v82 = v48 + 87;
                    double v83 = v47 / TimeInSeconds;
                    char v35 = 0;
                    while (1)
                    {
                      uint64_t v84 = *v82;
                      if (*v82)
                      {
                        unint64_t v85 = *(void *)(v84 + 256);
                        if (!v85 || (double)*(unint64_t *)(v84 + 224) / (double)v85 < v83) {
                          break;
                        }
                      }
                      ++v82;
                      if (!--v81) {
                        goto LABEL_61;
                      }
                    }
LABEL_30:
                    int v34 = 0;
                    char v35 = 1;
                    goto LABEL_61;
                  }
                }
              }
            }
          }
          char v35 = 0;
        }
LABEL_61:
        if (dword_1E9351350 >= 2)
        {
          CFTypeRef v51 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if (*v18)
        {
          a8 = v89;
        }
        else
        {
          unsigned int v52 = a7;
          for (uint64_t i = 384; i != 432; i += 16)
          {
            uint64_t v54 = *(void *)(DerivedStorage + i);
            if (*(void *)(v54 + 16))
            {
              double v55 = *(double *)(v54 + 88);
              double v56 = *(double *)(v54 + 96);
              *(_OWORD *)CMTime time = *(_OWORD *)a3;
              *(void *)&time[16] = *(void *)(a3 + 16);
              double v57 = CMTimeGetSeconds((CMTime *)time);
              double v58 = segPumpGetLiveBoundary(DerivedStorage, *(void *)(v54 + 56));
              double v59 = *(double *)(DerivedStorage + 16);
              if (v59 <= 0.0)
              {
                LODWORD(v59) = *(_DWORD *)(DerivedStorage + 8);
                double v59 = (double)*(unint64_t *)&v59;
              }
              if (v35 & 1) == 0 && (*(unsigned char *)(a3 + 12))
              {
                double v60 = v55 + v56 - v57;
                if (v60 <= v58 - v59 && *(unsigned char *)(v54 + 868) == 1)
                {
                  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
                  CFStringRef v62 = CFStringCreateWithFormat(AllocatorForMedia, 0, @"Warning: restarting %fs from end of live playlist; target duration %ds - stall danger",
                          *(void *)&v60,
                          *(unsigned int *)(DerivedStorage + 8));
                  uint64_t v63 = *(void *)(v54 + 696);
                  BOOL v64 = v63 ? (const __CFURL **)(v63 + 16) : 0;
                  segPumpAppendErrorLogEntry((uint64_t)v92, DerivedStorage, v54, v64, -16832, @"CoreMediaErrorDomain", v62, 0, 1u, 0, 3u);
                  if (v62) {
                    CFRelease(v62);
                  }
                }
              }
            }
          }
          a8 = v89;
LABEL_81:
          a7 = v52;
        }
        goto LABEL_82;
      }
      char v35 = 0;
    }
    int v34 = 1;
    goto LABEL_61;
  }
  uint64_t v27 = 0;
  char v28 = 1;
  while (1)
  {
    char v29 = v28;
    uint64_t v30 = *(void *)(DerivedStorage + 16 * v27 + 384);
    if (!*(void *)(v30 + 16) || ((a4 >> v27) & 1) == 0) {
      goto LABEL_21;
    }
    if (!*(unsigned char *)(DerivedStorage + 329)) {
      break;
    }
    if (*(unsigned char *)(v30 + 867)
      || *(unsigned char *)(v30 + 874)
      || *(void *)(DerivedStorage + 7680)
      && ((uint64_t v32 = *(void *)(DerivedStorage + 16 * v27 + 392), *(unsigned char *)(v32 + 867)) || *(unsigned char *)(v32 + 874)))
    {
      *(_OWORD *)CMTime time = *(_OWORD *)a3;
      *(void *)&time[16] = *(void *)(a3 + 16);
      double v31 = CMTimeGetSeconds((CMTime *)time);
      if (!*v18
        && *(double *)(v30 + 96) + *(double *)(v30 + 88) - (double)(3 * *(_DWORD *)(DerivedStorage + 8)) <= v31)
      {
        *(_DWORD *)(DerivedStorage + 8664) = 2;
        if (dword_1E9351350 >= 2)
        {
          unsigned int v52 = a7;
          long long v78 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          int v34 = 0;
          goto LABEL_81;
        }
        goto LABEL_119;
      }
    }
LABEL_21:
    char v28 = 0;
    uint64_t v27 = 1;
    if ((v29 & 1) == 0) {
      goto LABEL_27;
    }
  }
  if (!*(unsigned char *)(v30 + 874)) {
    goto LABEL_21;
  }
  *(_DWORD *)(DerivedStorage + 8664) = 1;
  double v76 = *(double *)(DerivedStorage + 8024);
  if (v76 == 0.0) {
    float v77 = 0.0;
  }
  else {
    float v77 = Seconds / v76;
  }
  if (v77 > 0.0) {
    float v17 = v77;
  }
  if (dword_1E9351350 >= 2)
  {
    CFIndex v79 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    int v34 = 0;
    goto LABEL_82;
  }
LABEL_119:
  int v34 = 0;
LABEL_82:
  uint64_t v65 = *(unsigned int *)(DerivedStorage + 8664);
  if (v65)
  {
    uint64_t v66 = *(void *)(DerivedStorage + 9048);
    if (v66)
    {
      uint64_t v67 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v68 = v67 ? v67 : 0;
      long long v69 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v68 + 56);
      if (v69) {
        v69(v66, 0x1EE582B98, 0x1EE5612B8, v65, 0);
      }
    }
  }
LABEL_89:
  if (a7)
  {
    segPumpGetLiveEdge(DerivedStorage, a4, 0, (uint64_t)time);
    long long v70 = *(_OWORD *)&time[16];
    long long v71 = v98;
    *a7 = *(_OWORD *)time;
    a7[1] = v70;
    a7[2] = v71;
  }
  if (*(unsigned char *)(DerivedStorage + 329))
  {
    if (v24 >= v17) {
      float v72 = v17;
    }
    else {
      float v72 = v24;
    }
    CFTypeRef v73 = a6;
  }
  else
  {
    float v72 = 1.0;
    CFTypeRef v73 = a6;
    if (!v34)
    {
      if (v24 >= v17) {
        float v74 = v17;
      }
      else {
        float v74 = v24;
      }
      if (v74 > 0.99) {
        float v74 = 0.99;
      }
      float v72 = fmaxf(v74, 0.0);
    }
  }
  if (v73) {
    float *v73 = v72;
  }
  if (a8) {
    *a8 = *(_DWORD *)(DerivedStorage + 8664);
  }
  if (a9) {
    *a9 = v34;
  }
  return segPumpAPIUnlockAndSendNotificationThenCheckAPIStatus(v92, v90);
}

uint64_t segPumpLoadInformation(const void *a1)
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  CFIndex v3 = segPumpAPILockAndEnsureAPIStatus(a1, 0);
  if (!v3)
  {
    uint64_t v4 = DerivedStorage[48];
    if (*(void *)(v4 + 48) || *(void *)(v4 + 56))
    {
      uint64_t v5 = 0;
      goto LABEL_5;
    }
    for (uint64_t i = 48; i != 54; i += 2)
      *(_WORD *)(DerivedStorage[i] + 869) = 257;
    CFIndex v3 = segPumpRequestIndexForStream(a1, DerivedStorage, v4, 1);
  }
  uint64_t v5 = v3;
LABEL_5:

  return segPumpAPIUnlockAndSendNotificationThenCheckAPIStatus(a1, v5);
}

uint64_t segPumpOpen(const void *a1, uint64_t a2, const void *a3, const void *a4, int a5, _DWORD *a6, BOOL *a7)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigRetainProxyRetain();
  CMTimeValue value = *(void *)a2;
  CMTimeFlags flags = *(_DWORD *)(a2 + 12);
  CMTimeScale timescale = *(_DWORD *)(a2 + 8);
  uint64_t v61 = a2;
  CMTimeEpoch epoch = *(void *)(a2 + 16);
  CFIndex v14 = segPumpAPILockAndEnsureAPIStatus(a1, 0);
  if (v14)
  {
    uint64_t MediaForAllStreams = v14;
    goto LABEL_79;
  }
  double v57 = a3;
  if (dword_1E9351350)
  {
    int v64 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    if (flags)
    {
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      CFRange v16 = &dword_1E9351000;
    }
    else
    {
      CFRange v16 = &dword_1E9351000;
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if ((*(_DWORD *)(v61 + 36) & 0x1D) == 1 && v16[212])
    {
      int v64 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      float v17 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  if (!*(void *)(DerivedStorage + 9016))
  {
    *(unsigned char *)(DerivedStorage + 9032) = 0;
    CMTime v18 = *(const void **)(DerivedStorage + 9024);
    if (v18)
    {
      CFRelease(v18);
      *(void *)(DerivedStorage + 9024) = 0;
    }
  }
  if (a5 && !*(unsigned char *)(*(void *)(DerivedStorage + 384) + 872))
  {
    unsigned int v19 = *(_DWORD *)(DerivedStorage + 8);
    double v20 = (double)v19;
    if (!v19) {
      double v20 = 10.0;
    }
    CMTimeMakeWithSeconds(&rhs, v20, 1000);
    lhs.CMTimeValue value = value;
    lhs.CMTimeScale timescale = timescale;
    lhs.CMTimeFlags flags = flags;
    lhs.CMTimeEpoch epoch = epoch;
    CMTimeSubtract(&time[0].start, &lhs, &rhs);
    CMTimeValue value = time[0].start.value;
    CMTimeFlags flags = time[0].start.flags;
    CMTimeScale timescale = time[0].start.timescale;
    CMTimeEpoch epoch = time[0].start.epoch;
  }
  uint64_t v21 = *(void *)(DerivedStorage + 296);
  int v22 = flags & 0x1D;
  if (v21)
  {
    double Seconds = 0.0;
    if (v22 == 1)
    {
      time[0].start.CMTimeValue value = value;
      time[0].start.CMTimeScale timescale = timescale;
      time[0].start.CMTimeFlags flags = flags;
      time[0].start.CMTimeEpoch epoch = epoch;
      if (CMTimeGetSeconds(&time[0].start) >= 0.0)
      {
        time[0].start.CMTimeValue value = value;
        time[0].start.CMTimeScale timescale = timescale;
        time[0].start.CMTimeFlags flags = flags;
        time[0].start.CMTimeEpoch epoch = epoch;
        double Seconds = CMTimeGetSeconds(&time[0].start);
      }
    }
    FigStreamingCacheHintPlaybackTime(v21, Seconds);
  }
  uint64_t MediaForAllStreams = 0;
  double v25 = (unsigned char *)(DerivedStorage + 8002);
  *(unsigned char *)(DerivedStorage + 8684) = 1;
  uint64_t v26 = 384;
  __asm { FMOV            V0.2D, #-1.0 }
  long long v60 = _Q0;
  int v56 = 1;
  do
  {
    uint64_t v31 = *(void *)(DerivedStorage + v26);
    if (*(unsigned char *)(DerivedStorage + 8684) && *(_DWORD *)(v31 + 160) == 1)
    {
      *(_DWORD *)(v31 + 160) = 2;
      *(_OWORD *)(v31 + 168) = 0u;
      *(_OWORD *)(v31 + 184) = 0u;
      *(_DWORD *)(v31 + 200) = 0;
    }
    if (!*(void *)(v31 + 232))
    {
      if (a3) {
        CFTypeRef v32 = CFRetain(a3);
      }
      else {
        CFTypeRef v32 = 0;
      }
      *(void *)(v31 + 232) = v32;
    }
    *a6 = *(_DWORD *)(v31 + 72);
    if (a4) {
      CFTypeRef v33 = CFRetain(a4);
    }
    else {
      CFTypeRef v33 = 0;
    }
    *(void *)(v31 + 240) = v33;
    double v34 = *(double *)&v60;
    *(_OWORD *)(v31 + 120) = v60;
    *(void *)(v31 + 304) = 0;
    *(void *)(v31 + 328) = 0;
    if (v22 == 1)
    {
      time[0].start.CMTimeValue value = value;
      time[0].start.CMTimeScale timescale = timescale;
      time[0].start.CMTimeFlags flags = flags;
      time[0].start.CMTimeEpoch epoch = epoch;
      double v34 = CMTimeGetSeconds(&time[0].start);
      *(double *)(v31 + 120) = v34;
    }
    else if ((flags & 5) == 5)
    {
      *(unsigned char *)(v31 + 112) = 1;
    }
    if ((*(_DWORD *)(v61 + 36) & 0x1D) == 1)
    {
      long long v35 = *(_OWORD *)(v61 + 16);
      *(_OWORD *)&time[0].start.CMTimeValue value = *(_OWORD *)v61;
      *(_OWORD *)&time[0].start.CMTimeEpoch epoch = v35;
      *(_OWORD *)&time[0].duration.CMTimeScale timescale = *(_OWORD *)(v61 + 32);
      CMTimeRangeGetEnd(&lhs, time);
      double v34 = *(double *)&lhs.value;
      *(CMTime *)(v31 + 208) = lhs;
    }
    uint64_t v36 = *(void *)(v31 + 56);
    if (v36)
    {
      CFArrayRef MediaSegmentSpecifiers = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(v36);
      if (MediaSegmentSpecifiers)
      {
        if (CFArrayGetCount(MediaSegmentSpecifiers) >= 1)
        {
          if (*v25
            || (uint64_t v40 = a4,
                double v41 = a1,
                uint64_t v42 = *(void *)(v31 + 1048) + 1000000000 * *(unsigned int *)(DerivedStorage + 8),
                BOOL v43 = FigGetUpTimeNanoseconds() < v42,
                a1 = v41,
                a4 = v40,
                a3 = v57,
                v43)
            && !*(unsigned char *)(v31 + 1168))
          {
            segPumpSetStartingOffset(a1, DerivedStorage, v31);
            if (*(void *)v31 == *(void *)(DerivedStorage + 8416) && !*(unsigned char *)(DerivedStorage + 8005))
            {
              uint64_t v38 = *(void *)(v31 + 56);
              if (v38)
              {
                if (FigMediaPlaylistGetDateStampCount(v38) >= 1 && *(void *)(DerivedStorage + 168))
                {
                  uint64_t v54 = *(void *)(v31 + 880);
                  uint64_t v39 = segPumpSendDateMapping((uint64_t)a1, DerivedStorage, (unsigned __int8 *)v31);
                  if (v39 == -15626)
                  {
                    uint64_t MediaForAllStreams = 4294951670;
LABEL_78:
                    *(unsigned char *)(DerivedStorage + 8684) = 0;
                    goto LABEL_79;
                  }
                  uint64_t MediaForAllStreams = v39;
                  if (FigRetainProxyIsInvalidated()) {
                    goto LABEL_79;
                  }
                  if (v54 != *(void *)(v31 + 880)) {
                    goto LABEL_77;
                  }
                }
              }
            }
          }
          else
          {
            int v56 = 0;
            *(unsigned char *)(v31 + 866) = 1;
          }
        }
      }
    }
    *(_WORD *)(v31 + 869) = 0;
    if (*(void *)(*(void *)(DerivedStorage + v26) + 16))
    {
      if (*(void *)v31 == *(void *)(DerivedStorage + 8416))
      {
        uint64_t v44 = *(void *)(v31 + 56);
        if (v44)
        {
          if (FigMediaPlaylistGetDateEntryArray(v44)) {
            segPumpReadyNotification((void *)DerivedStorage, @"FBP_TaggedRangeMetadataChanged", 0);
          }
        }
      }
      uint64_t MediaForAllStreams = segPumpReadOrScheduleIndexFileRead((uint64_t)a1, DerivedStorage, v31);
      if (MediaForAllStreams) {
        goto LABEL_78;
      }
    }
    v26 += 16;
    ++a6;
  }
  while (v26 != 432);
  for (uint64_t i = 0; i != 48; i += 16)
  {
    uint64_t v47 = *(void *)(DerivedStorage + i + 384);
    uint64_t v46 = *(void *)(DerivedStorage + i + 392);
    *(void *)(v47 + 136) = -1;
    *(void *)(v47 + 144) = -1;
    *(void *)(v46 + 136) = -1;
    *(void *)(v46 + 144) = -1;
  }
  if (v56) {
    uint64_t MediaForAllStreams = segPumpDeliverNextMediaForAllStreams(a1, DerivedStorage, v34);
  }
  if (!a7 || MediaForAllStreams)
  {
LABEL_77:
    if (!MediaForAllStreams) {
      goto LABEL_79;
    }
    goto LABEL_78;
  }
  uint64_t v48 = *(void *)(*(void *)(DerivedStorage + 16 * *(void *)(DerivedStorage + 8416) + 384) + 56);
  BOOL v50 = v48
     && (CFArrayRef v49 = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(v48)) != 0
     && CFArrayGetCount(v49) >= 1
     && !*v25
     && !*(unsigned char *)(DerivedStorage + 8685)
     && (*(unsigned char *)(v61 + 12) & 1) == 0
     && a3 == 0
     && a4 == 0;
  uint64_t MediaForAllStreams = 0;
  *a7 = v50;
LABEL_79:
  FigRetainProxyRelease();
  return segPumpAPIUnlockAndSendNotificationThenCheckAPIStatus(a1, MediaForAllStreams);
}

uint64_t segPumpSetCallback(const void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFIndex v7 = segPumpAPILockAndEnsureAPIStatus(a1, 0);
  if (!v7)
  {
    *(void *)(DerivedStorage + 160) = a2;
    *(void *)(DerivedStorage + 168) = a3;
    *(void *)(DerivedStorage + 176) = FigRetainProxyRetain();
    FigRetainProxyRelease();
    uint64_t v8 = *(void *)(DerivedStorage + 8416);
    uint64_t v9 = *(void *)(DerivedStorage + 16 * v8 + 384);
    if (*(void *)v9 != v8
      || *(unsigned char *)(DerivedStorage + 8005)
      || (uint64_t v12 = *(void *)(v9 + 56)) == 0
      || FigMediaPlaylistGetDateStampCount(v12) < 1
      || !*(void *)(DerivedStorage + 168))
    {
      uint64_t v10 = 0;
      goto LABEL_5;
    }
    CFIndex v7 = segPumpSendDateMapping((uint64_t)a1, DerivedStorage, (unsigned __int8 *)v9);
  }
  uint64_t v10 = v7;
LABEL_5:

  return segPumpAPIUnlockAndSendNotificationThenCheckAPIStatus(a1, v10);
}

uint64_t segPumpSetDeliveryRate(const void *a1, float a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFIndex v5 = segPumpAPILockAndEnsureAPIStatus(a1, 0);
  if (!v5)
  {
    if (*(unsigned char *)(DerivedStorage + 8712))
    {
      if (*(float *)(DerivedStorage + 8696) != a2)
      {
        if (*(void *)(DerivedStorage + 8816))
        {
          FigGetUpTimeNanoseconds();
          int v6 = *(unsigned __int8 *)(DerivedStorage + 8712);
          *(void *)(DerivedStorage + 8816) = 0;
          *(void *)(DerivedStorage + 8872) = 0;
          *(_OWORD *)(DerivedStorage + 8840) = 0u;
          *(_OWORD *)(DerivedStorage + 8856) = 0u;
          *(float *)(DerivedStorage + 8696) = a2;
          if (!v6)
          {
LABEL_9:
            float v7 = fabsf(a2);
            *(double *)(DerivedStorage + 8704) = v7;
            if (v7 >= 1.0)
            {
              uint64_t v8 = 0;
              goto LABEL_14;
            }
          }
LABEL_13:
          uint64_t v8 = 0;
          *(void *)(DerivedStorage + 8704) = 0x3FF0000000000000;
          goto LABEL_14;
        }
        *(void *)(DerivedStorage + 8816) = 0;
        *(void *)(DerivedStorage + 8872) = 0;
        *(_OWORD *)(DerivedStorage + 8840) = 0u;
        *(_OWORD *)(DerivedStorage + 8856) = 0u;
      }
      *(float *)(DerivedStorage + 8696) = a2;
      goto LABEL_13;
    }
    if (a2 >= 0.0)
    {
      *(float *)(DerivedStorage + 8696) = a2;
      goto LABEL_9;
    }
    CFIndex v5 = FigSignalErrorAt();
  }
  uint64_t v8 = v5;
LABEL_14:

  return segPumpAPIUnlockAndSendNotificationThenCheckAPIStatus(a1, v8);
}

uint64_t segPumpRetrieveAnIFrame(const void *a1, uint64_t a2, int a3, CMTime *a4, CMTime *a5, int *a6)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v13 = *(void *)(DerivedStorage + 384);
  CFIndex NextIFrame = segPumpAPILockAndEnsureAPIStatus(a1, 0);
  if (!NextIFrame)
  {
    if ((*(unsigned char *)(a2 + 12) & 1) == 0) {
      goto LABEL_34;
    }
    if (!a3) {
      goto LABEL_34;
    }
    if (!*(unsigned char *)(DerivedStorage + 8712)) {
      goto LABEL_34;
    }
    if (*(unsigned char *)(DerivedStorage + 8713)) {
      goto LABEL_34;
    }
    if (*(unsigned char *)(DerivedStorage + 8768)) {
      goto LABEL_34;
    }
    uint64_t v15 = *(void *)(DerivedStorage + 384);
    if (*(unsigned char *)(v15 + 857)) {
      goto LABEL_34;
    }
    uint64_t v16 = *(void *)(v15 + 56);
    if (v16)
    {
      double PlaylistActiveDurationSecs = FigMediaPlaylistGetPlaylistActiveDurationSecs(v16);
      uint64_t v15 = *(void *)(DerivedStorage + 384);
    }
    else
    {
      double PlaylistActiveDurationSecs = *(double *)(DerivedStorage + 344);
    }
    double v18 = *(double *)(v15 + 88);
    double Seconds = v18;
    if ((a4->flags & 9) == 1)
    {
      CMTime v32 = *a4;
      double Seconds = CMTimeGetSeconds(&v32);
    }
    double v20 = PlaylistActiveDurationSecs + v18;
    double v21 = v20;
    if ((a5->flags & 5) == 1)
    {
      CMTime v32 = *a5;
      double v21 = CMTimeGetSeconds(&v32);
    }
    uint64_t v22 = *(void *)(DerivedStorage + 384);
    if (Seconds < *(double *)(v22 + 88)) {
      double Seconds = *(double *)(v22 + 88);
    }
    if (v21 <= v20) {
      double v23 = v21;
    }
    else {
      double v23 = v20;
    }
    int v24 = *(_DWORD *)(a2 + 12);
    double v25 = Seconds;
    if ((~v24 & 9) != 0)
    {
      double v25 = v23;
      if ((~v24 & 5) != 0)
      {
        CMTime v32 = *(CMTime *)a2;
        double v25 = CMTimeGetSeconds(&v32);
      }
    }
    if (v25 < Seconds || v25 > v23)
    {
LABEL_34:
      CFIndex NextIFrame = FigSignalErrorAt();
    }
    else
    {
      int v27 = *(_DWORD *)(v13 + 72) + 1;
      *(_DWORD *)(v13 + 72) = v27;
      *a6 = v27;
      *(_DWORD *)(DerivedStorage + 8776) = a3;
      *(double *)(DerivedStorage + 8784) = v25;
      *(double *)(DerivedStorage + 8792) = Seconds;
      *(double *)(DerivedStorage + 8800) = v23;
      *(double *)(DerivedStorage + 8720) = v20 - Seconds;
      *(double *)(DerivedStorage + 8728) = v20 - v23;
      uint64_t v28 = *(void *)(*(void *)(DerivedStorage + 384) + 56);
      if (!v28
        || (CFArrayRef MediaSegmentSpecifiers = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(v28)) == 0
        || CFArrayGetCount(MediaSegmentSpecifiers) <= 0)
      {
        uint64_t v30 = 0;
        *(unsigned char *)(DerivedStorage + 8768) = 1;
        return segPumpAPIUnlockAndSendNotificationThenCheckAPIStatus(a1, v30);
      }
      CFIndex NextIFrame = segPumpRetrieveNextIFrame((uint64_t)a1, DerivedStorage);
    }
  }
  uint64_t v30 = NextIFrame;
  return segPumpAPIUnlockAndSendNotificationThenCheckAPIStatus(a1, v30);
}

uint64_t segPumpResetCachedMemory(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFIndex v3 = segPumpAPILockAndEnsureAPIStatus(a1, 0);
  if (!v3)
  {
    uint64_t v4 = *(const void **)(DerivedStorage + 7920);
    if (v4)
    {
      CFRelease(v4);
      *(void *)(DerivedStorage + 7920) = 0;
    }
  }

  return segPumpAPIUnlockAndSendNotificationThenCheckAPIStatus(a1, v3);
}

uint64_t segPumpResetDownloadStatistics(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFIndex v3 = segPumpAPILockAndEnsureAPIStatus(a1, 0);
  if (!v3) {
    segPumpClearStatistics(DerivedStorage);
  }

  return segPumpAPIUnlockAndSendNotificationThenCheckAPIStatus(a1, v3);
}

uint64_t segPumpTimeRequiredToSwitchToAlternate(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, uint64_t a8, double *a9)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  BOOL v14 = *(void *)(DerivedStorage + 8144) != 0;
  CFIndex v15 = segPumpAPILockAndEnsureAPIStatus(a1, 0);
  if (v15) {
    goto LABEL_21;
  }
  if (!a3)
  {
    CFIndex v15 = FigSignalErrorAt();
LABEL_21:
    uint64_t v25 = v15;
LABEL_17:
    double v17 = NAN;
    if (!a9) {
      return segPumpAPIUnlockAndSendNotificationThenCheckAPIStatus(a1, v25);
    }
LABEL_18:
    *a9 = v17;
    return segPumpAPIUnlockAndSendNotificationThenCheckAPIStatus(a1, v25);
  }
  if ((v14 & (a7 >> 2)) == 0)
  {
    uint64_t v25 = 0;
    goto LABEL_17;
  }
  double v27 = 0.0;
  uint64_t CurrentRTT = segPumpGetCurrentRTT((void *)DerivedStorage);
  double v17 = NAN;
  if (a2 && a2 != a3)
  {
    uint64_t v18 = CurrentRTT;
    double v19 = *(double *)(DerivedStorage + 16);
    if (v19 <= 0.0)
    {
      LODWORD(v17) = *(_DWORD *)(DerivedStorage + 8);
      double v19 = (double)*(unint64_t *)&v17;
    }
    uint64_t v20 = *(void *)(DerivedStorage + 7680);
    if (v20)
    {
      int PeakBitRate = FigAlternateGetPeakBitRate(*(void *)(v20 + 8));
      if (PeakBitRate > (int)FigAlternateGetPeakBitRate(a2)) {
        a2 = *(void *)(*(void *)(DerivedStorage + 7680) + 8);
      }
    }
    double v22 = v19 + segPumpGetEstIndependentInterval(DerivedStorage);
    double v23 = v22 * (double)(int)FigAlternateGetPeakBitRate(a3);
    uint64_t v24 = (uint64_t)((double)(uint64_t)v23 + v19 * (double)(int)FigAlternateGetPeakBitRate(a2));
    segPumpGetSafeNetworkBandwidth(DerivedStorage, &v27, 0, 0);
    double v17 = NAN;
    if (v24 && v27 != 0.0) {
      double v17 = (double)v24 / v27 + (double)v18 / 1000000000.0 * 2.0;
    }
  }
  uint64_t v25 = 0;
  if (a9) {
    goto LABEL_18;
  }
  return segPumpAPIUnlockAndSendNotificationThenCheckAPIStatus(a1, v25);
}

uint64_t segPumpGetLocalBitrateFraction(const void *a1, uint64_t a2, double *a3, CMTime *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMTime start = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  CFIndex v9 = segPumpAPILockAndEnsureAPIStatus(a1, 0);
  if (v9) {
    goto LABEL_6;
  }
  if ((*(unsigned char *)(a2 + 12) & 1) == 0
    || (*(unsigned char *)(a2 + 36) & 1) == 0
    || *(void *)(a2 + 40)
    || (*(void *)(a2 + 24) & 0x8000000000000000) != 0
    || !a3)
  {
    CFIndex v9 = FigSignalErrorAt();
LABEL_6:
    uint64_t v10 = v9;
    return segPumpAPIUnlockAndSendNotificationThenCheckAPIStatus(a1, v10);
  }
  if (*(double *)(DerivedStorage + 8904) <= 0.0) {
    goto LABEL_14;
  }
  if ((*(unsigned char *)(DerivedStorage + 8924) & 1) == 0) {
    goto LABEL_14;
  }
  if ((*(unsigned char *)(DerivedStorage + 8948) & 1) == 0) {
    goto LABEL_14;
  }
  if (*(void *)(DerivedStorage + 8952)) {
    goto LABEL_14;
  }
  if ((*(void *)(DerivedStorage + 8936) & 0x8000000000000000) != 0) {
    goto LABEL_14;
  }
  long long v22 = *(_OWORD *)(DerivedStorage + 8928);
  *(_OWORD *)&v26.start.CMTimeValue value = *(_OWORD *)(DerivedStorage + 8912);
  *(_OWORD *)&v26.start.CMTimeEpoch epoch = v22;
  *(_OWORD *)&v26.duration.CMTimeScale timescale = *(_OWORD *)(DerivedStorage + 8944);
  long long v23 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)&lhs.start.CMTimeValue value = *(_OWORD *)a2;
  *(_OWORD *)&lhs.start.CMTimeEpoch epoch = v23;
  *(_OWORD *)&lhs.duration.CMTimeScale timescale = *(_OWORD *)(a2 + 32);
  if (CMTimeRangeContainsTimeRange(&v26, &lhs))
  {
    double v20 = *(double *)(DerivedStorage + 8904);
  }
  else
  {
LABEL_14:
    long long v12 = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 32);
    long long v13 = *MEMORY[0x1E4F1FA20];
    *(_OWORD *)&v26.start.CMTimeEpoch epoch = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 16);
    *(_OWORD *)&v26.duration.CMTimeScale timescale = v12;
    *(_OWORD *)&v26.start.CMTimeValue value = v13;
    double v14 = 0.0;
    LocalBitrateForSubStreauint64_t m = 0.0;
    if (*(void *)(*(void *)(DerivedStorage + 400) + 16))
    {
      long long v16 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)&lhs.start.CMTimeValue value = *(_OWORD *)a2;
      *(_OWORD *)&lhs.start.CMTimeEpoch epoch = v16;
      *(_OWORD *)&lhs.duration.CMTimeScale timescale = *(_OWORD *)(a2 + 32);
      LocalBitrateForSubStreauint64_t m = segPumpGetLocalBitrateForSubStream(DerivedStorage, 1, (uint64_t)&lhs, &start, &v26);
    }
    if (*(void *)(*(void *)(DerivedStorage + 384) + 16))
    {
      long long v17 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)&lhs.start.CMTimeValue value = *(_OWORD *)a2;
      *(_OWORD *)&lhs.start.CMTimeEpoch epoch = v17;
      *(_OWORD *)&lhs.duration.CMTimeScale timescale = *(_OWORD *)(a2 + 32);
      double v14 = segPumpGetLocalBitrateForSubStream(DerivedStorage, 0, (uint64_t)&lhs, &start, &v26);
    }
    if (v14 >= 0.0
      && (double v18 = LocalBitrateForSubStream + v14, v18 > 2.22044605e-16)
      && LocalBitrateForSubStream >= 0.0
      && (uint64_t v19 = *(void *)(DerivedStorage + 8144)) != 0)
    {
      double v20 = v18 / (double)(int)FigAlternateGetPeakBitRate(*(void *)(v19 + 8));
      if (v20 < 0.33) {
        double v20 = 0.33;
      }
      if (v20 > 1.0) {
        double v20 = 1.0;
      }
      if (!*(unsigned char *)(DerivedStorage + 8712))
      {
        *(double *)(DerivedStorage + 8904) = v20;
        long long v21 = *(_OWORD *)&v26.start.epoch;
        *(_OWORD *)(DerivedStorage + 8912) = *(_OWORD *)&v26.start.value;
        *(_OWORD *)(DerivedStorage + 8928) = v21;
        *(_OWORD *)(DerivedStorage + 8944) = *(_OWORD *)&v26.duration.timescale;
      }
    }
    else
    {
      double v20 = *(double *)(DerivedStorage + 8904);
      if (v20 <= 0.0) {
        double v20 = 1.0;
      }
    }
  }
  *a3 = v20;
  if (a4)
  {
    if ((start.flags & 1) == 0)
    {
      LODWORD(v20) = *(_DWORD *)(DerivedStorage + 8);
      CMTimeMakeWithSeconds(&rhs, (double)*(unint64_t *)&v20 + 0.5, 1000);
      *(_OWORD *)&lhs.start.CMTimeValue value = *(_OWORD *)a2;
      lhs.start.CMTimeEpoch epoch = *(void *)(a2 + 16);
      CMTimeAdd(&v26.start, &lhs.start, &rhs);
      CMTime start = v26.start;
    }
    uint64_t v10 = 0;
    *a4 = start;
  }
  else
  {
    uint64_t v10 = 0;
  }
  return segPumpAPIUnlockAndSendNotificationThenCheckAPIStatus(a1, v10);
}

uint64_t segPumpSnapToTime(const void *a1, CMTime *a2, int a3, CMTime *a4, uint64_t a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFIndex v11 = segPumpAPILockAndEnsureAPIStatus(a1, 0);
  if (v11) {
    goto LABEL_98;
  }
  CMTimeFlags flags = a2->flags;
  if ((flags & 1) == 0 || !a4 || !a5)
  {
    CFIndex v11 = FigSignalErrorAt();
LABEL_98:
    uint64_t v35 = v11;
    return segPumpAPIUnlockAndSendNotificationThenCheckAPIStatus(a1, v35);
  }
  if (a3 == 4)
  {
    CMTime v79 = *a2;
    uint64_t v13 = *(void *)(DerivedStorage + 16 * *(void *)(DerivedStorage + 8416) + 384);
    *(_OWORD *)CMTime time = *(_OWORD *)&a2->value;
    *(void *)&time[16] = a2->epoch;
    double Seconds = CMTimeGetSeconds((CMTime *)time);
    if (v13)
    {
      double v15 = Seconds;
      if (!*(void *)(DerivedStorage + 8144)
        || !*(void *)(DerivedStorage + 296)
        || !FigAlternateGetLastKnownValueForIsFullyCached())
      {
        uint64_t v85 = 0;
        long long v83 = 0u;
        long long v84 = 0u;
        long long v82 = 0u;
        memset(time, 0, sizeof(time));
        segPumpMakeNetworkPrediction(DerivedStorage, (uint64_t)time);
        if (!v16)
        {
          float v17 = *(float *)(DerivedStorage + 8696);
          if (v17 > 0.0 && v17 <= 2.0)
          {
            double v18 = (double)*(uint64_t *)time;
            int v19 = _os_feature_enabled_impl();
            uint64_t v20 = *(void *)(v13 + 56);
            if (v19)
            {
              if (v20)
              {
                *(void *)CMTime time = 0;
                v80.CMTimeValue value = 0;
                v78.CMTimeValue value = 0;
                time1.CMTimeValue value = 0;
                segPumpGetRequiredBandwidthForCurrentStreamingAlternate(DerivedStorage);
                double v22 = v21;
                segPumpGetStartupRequirements(DerivedStorage, *(_DWORD *)(DerivedStorage + 8), (double *)time, (double *)&v80.value, (double *)&v78.value, (double *)&time1.value, v21);
                CFIndex v23 = 0;
                if (*(double *)&v80.value >= v18) {
                  p_CMTime time1 = &v78;
                }
                else {
                  p_CMTime time1 = &time1;
                }
                for (double i = v15 + v22 * *(double *)&p_time1->value / v18 * *(float *)(DerivedStorage + 8696); ; double i = v31)
                {
                  CFArrayRef MediaSegmentSpecifiers = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(*(void *)(v13 + 56));
                  if (MediaSegmentSpecifiers) {
                    CFArrayRef MediaSegmentSpecifiers = (const __CFArray *)CFArrayGetCount(MediaSegmentSpecifiers);
                  }
                  if (v23 >= (uint64_t)MediaSegmentSpecifiers) {
                    break;
                  }
                  CFArrayRef v27 = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(*(void *)(v13 + 56));
                  CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v27, v23);
                  MediaFilePrivateData = (double *)segPumpGetMediaFilePrivateData(ValueAtIndex);
                  double v30 = MediaFilePrivateData[4];
                  double v31 = v30 + FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)ValueAtIndex);
                  double v32 = MediaFilePrivateData[4];
                  if (v32 <= i && i < v31)
                  {
                    double v34 = i + v22 * (i - v32) / v18 * *(float *)(DerivedStorage + 8696);
                    if (v34 < v31)
                    {
                      CMTimeMakeWithSeconds(&v79, v34, 1000000);
                      break;
                    }
                  }
                  else
                  {
                    double v31 = i;
                  }
                  ++v23;
                }
              }
            }
            else if (v20)
            {
              for (CFIndex j = 0; ; ++j)
              {
                CFArrayRef Count = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(v20);
                if (Count) {
                  CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
                }
                if (j >= (uint64_t)Count) {
                  break;
                }
                CFArrayRef v44 = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(*(void *)(v13 + 56));
                double v45 = CFArrayGetValueAtIndex(v44, j);
                uint64_t v46 = (double *)segPumpGetMediaFilePrivateData(v45);
                double v47 = v46[4];
                if (v47 <= v15)
                {
                  uint64_t v48 = v46;
                  if (v15 <= v47 + FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)v45))
                  {
                    LODWORD(v49) = *(_DWORD *)(DerivedStorage + 8);
                    double v53 = (v15 - v48[4]) / (double)v49;
                    segPumpGetRequiredBandwidthForCurrentStreamingAlternate(DerivedStorage);
                    if ((v53 + 1.0) * (v54 * *(float *)(DerivedStorage + 8696)) >= v18)
                    {
                      uint64_t NextSegment = (const void *)FigMediaSegmentSpecifierGetNextSegment((uint64_t)v45);
                      if (NextSegment)
                      {
                        int v56 = (double *)segPumpGetMediaFilePrivateData(NextSegment);
                        CMTimeMakeWithSeconds((CMTime *)time, v56[4] + 0.000001, 1000000);
                        CMTime v79 = *(CMTime *)time;
                      }
                    }
                    break;
                  }
                }
                uint64_t v20 = *(void *)(v13 + 56);
              }
            }
          }
        }
      }
    }
    if (!*(void *)(DerivedStorage + 8416))
    {
      uint64_t v59 = *(void *)(*(void *)(DerivedStorage + 400) + 56);
      if (v59)
      {
        CFArrayRef v60 = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(v59);
        if (v60)
        {
          if (CFArrayGetCount(v60) >= 1)
          {
            CMTime v80 = v79;
            *(CMTime *)CMTime time = v79;
            double v61 = CMTimeGetSeconds((CMTime *)time);
            uint64_t v62 = *(void *)(DerivedStorage + 384);
            if (!*(void *)(v62 + 16)) {
              uint64_t v62 = 0;
            }
            uint64_t v63 = *(void *)(DerivedStorage + 400);
            if (*(void *)(v63 + 16) && v62)
            {
              int v64 = *(double **)(v62 + 336);
              if (v64)
              {
                while (1)
                {
                  double v65 = v64[3];
                  if (v65 <= v61 && v65 + v64[5] > v61) {
                    break;
                  }
                  int v64 = *(double **)v64;
                  if (!v64) {
                    goto LABEL_76;
                  }
                }
                uint64_t v66 = *((void *)v64 + 4);
              }
              else
              {
LABEL_76:
                uint64_t v66 = -1;
              }
              uint64_t v67 = *(double **)(v63 + 336);
              if (v67)
              {
                while (1)
                {
                  double v68 = v67[3];
                  if (v68 <= v61 && v68 + v67[5] > v61) {
                    break;
                  }
                  uint64_t v67 = *(double **)v67;
                  if (!v67) {
                    goto LABEL_82;
                  }
                }
                uint64_t v69 = *((void *)v67 + 4);
              }
              else
              {
LABEL_82:
                uint64_t v69 = -1;
              }
              if (v66 <= v69)
              {
                if (v69 > v66)
                {
                  long long v70 = (double *)(v62 + 336);
                  while (1)
                  {
                    long long v70 = *(double **)v70;
                    if (!v70) {
                      break;
                    }
                    if (*((void *)v70 + 4) == v69)
                    {
LABEL_93:
                      double v71 = v70[3];
                      if (v71 == -1.0) {
                        break;
                      }
                      CMTimeMakeWithSeconds((CMTime *)time, v71, 1000);
                      goto LABEL_95;
                    }
                  }
                }
              }
              else
              {
                long long v70 = (double *)(v63 + 336);
                while (1)
                {
                  long long v70 = *(double **)v70;
                  if (!v70) {
                    break;
                  }
                  if (*((void *)v70 + 4) == v66) {
                    goto LABEL_93;
                  }
                }
              }
            }
            *(CMTime *)CMTime time = v80;
LABEL_95:
            CMTime v79 = *(CMTime *)time;
          }
        }
      }
    }
    uint64_t v35 = 0;
    *a4 = v79;
    goto LABEL_63;
  }
  if (a3 != 3)
  {
    uint64_t v35 = 0;
    long long v36 = *(_OWORD *)&a2->value;
    a4->CMTimeEpoch epoch = a2->epoch;
    *(_OWORD *)&a4->CMTimeValue value = v36;
LABEL_63:
    uint64_t v57 = MEMORY[0x1E4F1F9F8];
    *(_OWORD *)a5 = *MEMORY[0x1E4F1F9F8];
    *(void *)(a5 + 16) = *(void *)(v57 + 16);
    return segPumpAPIUnlockAndSendNotificationThenCheckAPIStatus(a1, v35);
  }
  memset(&v74, 0, sizeof(v74));
  if ((flags & 4) != 0)
  {
    double MaxTime = segPumpGetMaxTime((void *)DerivedStorage);
    double MinimumPrebufferReservation = segPumpGetMinimumPrebufferReservation(DerivedStorage, 0);
    CMTimeMakeWithSeconds(&v74, MaxTime - (MinimumPrebufferReservation + *(double *)(DerivedStorage + 7960)), 1000);
  }
  else
  {
    CMTime v74 = *a2;
  }
  CMTime v73 = v74;
  *(_OWORD *)CMTime time = *MEMORY[0x1E4F1F9F8];
  long long v39 = *(_OWORD *)time;
  CMTimeEpoch v40 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  *(void *)&time[16] = v40;
  *(_OWORD *)&v80.CMTimeValue value = *(_OWORD *)time;
  v80.CMTimeEpoch epoch = v40;
  memset(&v79, 0, sizeof(v79));
  uint64_t v41 = *(void *)(DerivedStorage + 384);
  if (*(void *)(v41 + 16))
  {
    long long v72 = *(_OWORD *)time;
    CMTime v78 = v74;
    segPumpStreamSnapToSegmentBoundary(v41, &v78, (uint64_t)&v80, &v79);
    long long v39 = v72;
  }
  else
  {
    *(_OWORD *)&v79.CMTimeValue value = *(_OWORD *)time;
    v79.CMTimeEpoch epoch = v40;
  }
  memset(&v78, 0, sizeof(v78));
  uint64_t v50 = *(void *)(DerivedStorage + 400);
  if (*(void *)(v50 + 16))
  {
    CMTime time1 = v73;
    segPumpStreamSnapToSegmentBoundary(v50, &time1, (uint64_t)time, &v78);
  }
  else
  {
    *(_OWORD *)&v78.CMTimeValue value = v39;
    v78.CMTimeEpoch epoch = v40;
  }
  if (v79.flags & 1) != 0 || (v78.flags)
  {
    CMTime time1 = v79;
    CMTime time2 = v78;
    CMTimeMinimum(&v73, &time1, &time2);
    if (v80.flags)
    {
      if (time[12])
      {
        CMTime time2 = v80;
        CMTime v75 = *(CMTime *)time;
        CMTimeMaximum(&time1, &time2, &v75);
        *(_OWORD *)a5 = *(_OWORD *)&time1.value;
        CMTimeEpoch epoch = time1.epoch;
      }
      else
      {
        *(_OWORD *)a5 = *(_OWORD *)&v80.value;
        CMTimeEpoch epoch = v80.epoch;
      }
    }
    else
    {
      *(_OWORD *)a5 = *(_OWORD *)time;
      CMTimeEpoch epoch = *(void *)&time[16];
    }
    *(void *)(a5 + 16) = epoch;
  }
  uint64_t v35 = 0;
  CMTime time1 = v73;
  CMTimeEpoch v52 = v73.epoch;
  *(_OWORD *)&a4->CMTimeValue value = *(_OWORD *)&v73.value;
  a4->CMTimeEpoch epoch = v52;
  return segPumpAPIUnlockAndSendNotificationThenCheckAPIStatus(a1, v35);
}

uint64_t segPumpGetDeliveredTimeStamp(uint64_t a1, double *a2)
{
  *a2 = 0.0;
  uint64_t result = *(void *)(a1 + 56);
  if (result)
  {
    FigMediaPlaylistGetMediaSegmentSpecifiers(result);
    uint64_t result = FigCFArrayGetLastValue();
    if (result)
    {
      uint64_t v4 = (const void *)result;
      while (1)
      {
        MediaFilePrivateData = segPumpGetMediaFilePrivateData(v4);
        if (*((unsigned char *)MediaFilePrivateData + 73)) {
          break;
        }
        uint64_t result = FigMediaSegmentSpecifierGetPreviousSegment((uint64_t)v4);
        uint64_t v4 = (const void *)result;
        if (!result) {
          return result;
        }
      }
      double v6 = *((double *)MediaFilePrivateData + 4);
      *a2 = v6 + FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)v4);
      return 1;
    }
  }
  return result;
}

uint64_t segPumpStreamNeedsMore(const void *a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)(a3 + 870) = 0;
  if (!*(unsigned char *)(a3 + 869) && !*(unsigned char *)(a3 + 1169)) {
    return 0;
  }
  *(unsigned char *)(a3 + 869) = 0;
  *(unsigned char *)(a3 + 1169) = 0;
  if (!*(unsigned char *)(a2 + 8684) || !*(void *)(a3 + 16)) {
    return 0;
  }
  if (dword_1E9351350)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v8 = *(void *)(a3 + 56);
  if (v8)
  {
    uint64_t v9 = *(void *)(a3 + 1048);
    unsigned int v10 = *(_DWORD *)(a2 + 8);
    if (!FigMediaPlaylistHasEndTag(v8)
      && (FigGetUpTimeNanoseconds() >= v9 + 1000000000 * v10 || *(unsigned char *)(a3 + 1168)))
    {
      return segPumpReadOrScheduleIndexFileRead((uint64_t)a1, a2, a3);
    }
  }
  uint64_t result = segPumpDeliverNextMediaForSingleStream(a1, a2, a3);
  if (!result) {
    return segPumpReadOrScheduleIndexFileRead((uint64_t)a1, a2, a3);
  }
  return result;
}

__n128 segPumpStopConcurrentStream(uint64_t a1, uint64_t a2)
{
  if (*(uint64_t *)(a2 + 776) >= 1)
  {
    uint64_t v4 = 0;
    do
    {
      segPumpStreamCancelReadAheadAndResetDataAtIndex(a1, a2, 0);
      ++v4;
    }
    while (v4 < *(void *)(a2 + 776));
  }
  segPumpStreamCancelPreloadReadAndResetData(a1, a2);
  segPumpStreamCancelPreloadMapReadAndResetData(a1, a2);
  segPumpStopStream(a1, a2, 0);
  segPumpStreamDisposeStorage((void *)a2);
  *(unsigned char *)(a2 + 866) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(__n128 *)(a2 + 120) = result;
  ++*(_DWORD *)(a2 + 72);
  return result;
}

BOOL segPumpRejectSwitchDueToStallRisk(uint64_t a1, uint64_t a2, int a3, CMTime *a4, CMTime *a5, int a6, int a7, double a8)
{
  int v16 = (unsigned __int8 *)(a1 + 7993);
  int v17 = segPumpStreamBitRateRequiredForStream(a1, *(void **)(a1 + 384));
  if (FigAlternateIsIFrameOnly(a2))
  {
    CMTime v85 = *a5;
    if (v16[719])
    {
      uint64_t v18 = *(void *)(a1 + 384);
      double v19 = segPumpPredictIFrameDownload(a1, 0);
      CMTime time = v85;
      Float64 Seconds = CMTimeGetSeconds(&time);
      uint64_t v21 = *(void *)(v18 + 56);
      double v22 = 2.0;
      double v23 = Seconds * 0.0 / v19;
      if (v21)
      {
        CFArrayRef MediaSegmentSpecifiers = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(v21);
        if (MediaSegmentSpecifiers)
        {
          if (CFArrayGetCount(MediaSegmentSpecifiers) >= 1)
          {
            uint64_t v25 = *(void *)(v18 + 256);
            if (v25)
            {
              unsigned int v26 = 0;
              double v27 = 0.0;
              do
              {
                double v27 = v27 + (double)(8 * FigMediaSegmentSpecifierGetBytesToRead(v25));
                uint64_t NextSegment = FigMediaSegmentSpecifierGetNextSegment(v25);
                int v29 = v26 + 1;
                if (!NextSegment) {
                  break;
                }
                uint64_t v25 = NextSegment;
              }
              while (v26++ < 7);
              double v31 = v27 / (double)v29;
            }
            else
            {
              double v31 = 0.0;
            }
            double v22 = v31 * ((double)a3 / (double)(int)segPumpStreamBitRateRequiredForStream(a1, *(void **)(a1 + 384)));
          }
        }
      }
    }
    else
    {
      double v23 = 0.0;
      double v22 = 1.0;
    }
    goto LABEL_58;
  }
  uint64_t v32 = *(void *)(a1 + 16 * *(void *)(a1 + 8416) + 384);
  CMTime time = *a4;
  double v33 = CMTimeGetSeconds(&time);
  double v34 = 0.0;
  if ((a5->flags & 0x1D) == 1)
  {
    CMTime time = *a5;
    double v34 = CMTimeGetSeconds(&time);
  }
  BOOL v35 = 0;
  uint64_t v36 = 384;
  double v23 = 0.0;
  double v22 = 1.0;
  do
  {
    uint64_t v37 = *(void *)(a1 + v36);
    if (*(void *)(v37 + 16))
    {
      if (v17 < a3)
      {
        uint64_t v38 = *(void *)(v37 + 56);
        if (!v38) {
          goto LABEL_58;
        }
        CFArrayRef v39 = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(v38);
        if (!v39 || CFArrayGetCount(v39) < 1) {
          goto LABEL_58;
        }
      }
      if (v35)
      {
        BOOL v35 = 1;
      }
      else
      {
        uint64_t v40 = *(void *)(*(void *)(a1 + v36) + 56);
        if (v40) {
          BOOL v35 = FigMediaPlaylistGetDateStampCount(v40) > 0;
        }
        else {
          BOOL v35 = 0;
        }
      }
    }
    v36 += 16;
  }
  while (v36 != 432);
  if (!a7)
  {
    double v23 = 14.0;
    double v22 = 13.0;
    goto LABEL_39;
  }
  double v22 = (double)segPumpBitsRequiredToSwitch(a1, a3, v35, v33, v34);
  if (v16[199])
  {
    if ((double)a3 <= a8) {
      goto LABEL_32;
    }
  }
  else
  {
    unsigned int v50 = segPumpStreamHavePerSegmentBitrate(v32);
    if ((double)a3 <= a8 || v50 != 0) {
      goto LABEL_32;
    }
  }
  double v41 = (double)v17;
  if (v17 >= a3) {
    double v41 = a8;
  }
  double v22 = *(double *)(a1 + 8064) * (double)segPumpBitsRequiredToSwitch(a1, (int)v41, v35, v33, v34) + v22;
LABEL_32:
  if (a6) {
    double v23 = v34 * a8 * 0.5;
  }
  else {
    double v23 = v34 * a8;
  }
  if (v23 < v22) {
    goto LABEL_58;
  }
LABEL_39:
  unsigned int v42 = segPumpStreamHavePerSegmentBitrate(v32);
  if (!a7 || !v42)
  {
    if (v17 >= a3)
    {
      BOOL v49 = (double)a3 > a8 && a7 != 0;
      return v23 < v22 || v49;
    }
    goto LABEL_58;
  }
  v85.CMTimeValue value = 0;
  CFTypeRef v91 = *(CFTypeRef *)(v32 + 56);
  time.CMTimeValue value = 0;
  uint64_t v89 = 0;
  CMBlockBufferRef theBuffer = 0;
  uint64_t v88 = 0;
  if (*(void *)(a1 + 296))
  {
    uint64_t v84 = v32;
    uint64_t v43 = *(void *)v32;
    int v44 = *(void *)v32;
    PlaylistAlternateCFURLRef URL = (const __CFURL *)FigAlternateGetPlaylistAlternateURL(a2);
    uint64_t v46 = (__CFDictionary *)FigCFHTTPCreateURLString(PlaylistAlternateURL);
    if (v44) {
      int PeakBitRate = 0;
    }
    else {
      int PeakBitRate = FigAlternateGetPeakBitRate(a2);
    }
    uint64_t v54 = *(void *)(a1 + 296);
    StableStreamCFStringRef Identifier = (const void *)FigAlternateGetStableStreamIdentifier(a2);
    int v56 = FigStreamingCacheCreateMediaStream(v54, v43, v46, StableStreamIdentifier, PeakBitRate, v44 == 2, &v89);
    if (v46) {
      CFRelease(v46);
    }
    uint64_t v32 = v84;
    if (!v56) {
      FigStreamingCacheMediaStreamCopyPlaylist(*(void *)(a1 + 296), v89, (unint64_t)&theBuffer, 0);
    }
  }
  uint64_t v57 = theBuffer;
  if (!theBuffer)
  {
    double v58 = (const void *)FigAlternateGetPlaylistAlternateURL(a2);
    SavedEntry = segPumpFindSavedEntry(a1, v58, 0, 0);
    if (SavedEntry) {
      segPumpCreateIndexFileBBFromSavedIndexFile(a1, (uint64_t)SavedEntry, (CFTypeRef *)&theBuffer);
    }
    uint64_t v57 = theBuffer;
    if (!theBuffer) {
      goto LABEL_82;
    }
  }
  if (CMBlockBufferGetDataLength(v57))
  {
    CFURLRef v60 = (const __CFURL *)FigAlternateGetPlaylistAlternateURL(a2);
    CFURLRef URLForCacheLookup = (const __CFURL *)FigAlternateGetURLForCacheLookup(a2);
    int v87 = 0;
    CFTypeRef v91 = 0;
    CFTypeRef cf = 0;
    if (!FigCFHTTPCopyQueryParamsAsDict((uint64_t)v60, (CFMutableDictionaryRef *)&cf))
    {
      int v62 = FigStreamPlaylistParse(theBuffer, v60, URLForCacheLookup, &v87, 0, 0, *v16, *(unsigned __int8 *)(a1 + 339), 0, *(void *)(a1 + 8384), *(const __CFDictionary **)(a1 + 8160), (const __CFDictionary *)cf, 0, &v91);
      if (cf) {
        CFRelease(cf);
      }
      if (v62) {
        CFTypeRef v91 = *(CFTypeRef *)(v32 + 56);
      }
      goto LABEL_80;
    }
LABEL_58:
    BOOL v49 = 0;
    return v23 < v22 || v49;
  }
LABEL_80:
  if (theBuffer)
  {
    CFRelease(theBuffer);
    CMBlockBufferRef theBuffer = 0;
  }
LABEL_82:
  double v63 = 1.0;
  if (v91 == *(CFTypeRef *)(v32 + 56))
  {
    uint64_t v81 = *(void *)(a1 + 8144);
    if (v81)
    {
      int AverageBitRate = FigAlternateGetAverageBitRate(*(void *)(v81 + 8));
      int v83 = FigAlternateGetAverageBitRate(a2);
      if (!AverageBitRate || !v83)
      {
        int AverageBitRate = FigAlternateGetPeakBitRate(*(void *)(*(void *)(a1 + 8144) + 8));
        int v83 = FigAlternateGetPeakBitRate(a2);
      }
      if (AverageBitRate && v83) {
        double v63 = (double)(v83 / AverageBitRate);
      }
    }
  }
  segPumpGetNetworkLatencyFromPredictor(a1, &v88);
  double v64 = v33 + v34;
  double v65 = (double)(uint64_t)(*(void *)(v32 + 448) - *(void *)(v32 + 896)) / 1000000000.0;
  CFTypeRef v66 = v91;
  uint64_t v67 = *(void *)(v32 + 304);
  uint64_t v68 = *(void *)(v32 + 312);
  double v69 = v34;
  double v70 = (double)v88 / 1000000000.0;
  ShouldWalkBacuint64_t k = segPumpStreamSwitchShouldWalkBack(a1, v32, a3, (int)a8, v17 < a3);
  if (*(unsigned char *)(v32 + 864)) {
    BOOL v72 = v17 < a3;
  }
  else {
    BOOL v72 = 0;
  }
  int v73 = v72;
  double v22 = 0.0;
  double v74 = v70;
  double v75 = v69;
  segPumpDetermineMediaSegmentToSwitchTo(a1, (uint64_t)v66, v67, v68, 0, ShouldWalkBack, v73, (void *)v32, v64, v69, 0.0, (double)v17, a8 / v63, v65, v74, &v85.value, &time);
  CMTimeValue value = time.value;
  if (time.value)
  {
    double v77 = 0.0;
    double v23 = 0.0;
    BOOL v49 = 0;
    while (1)
    {
      double v23 = v23 + FigMediaSegmentSpecifierGetTimeInSeconds(value) * a8;
      TimeInFloat64 Seconds = FigMediaSegmentSpecifierGetTimeInSeconds(value);
      double v22 = v22 + TimeInSeconds * FigMediaSegmentSpecifierGetBitRate(value) * v63;
      if (v23 < v22)
      {
        BOOL v49 = 0;
        goto LABEL_108;
      }
      if (v63 * FigMediaSegmentSpecifierGetBitRate(value) > a8 && v75 > 0.0 && v75 < 30.0) {
        break;
      }
      double v79 = FigMediaSegmentSpecifierGetTimeInSeconds(value);
      uint64_t v80 = FigMediaSegmentSpecifierGetNextSegment(value);
      if (v80)
      {
        CMTimeValue value = v80;
        double v77 = v77 + v79;
        if (v77 < 30.0) {
          continue;
        }
      }
      goto LABEL_108;
    }
    BOOL v49 = 1;
  }
  else
  {
    BOOL v49 = 0;
    double v23 = 0.0;
  }
LABEL_108:
  if (v91 && v91 != *(CFTypeRef *)(v32 + 56)) {
    CFRelease(v91);
  }
  return v23 < v22 || v49;
}

uint64_t segPumpSetAlternateForStream(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5, const void *a6, const void *a7, int a8, unsigned __int8 a9, uint64_t a10, uint64_t a11)
{
  uint64_t v126 = *MEMORY[0x1E4F143B8];
  double v123 = 0.0;
  if (!*(void *)a3) {
    *(void *)(a2 + 8576) = 0;
  }
  if (a4) {
    uint64_t v17 = a4;
  }
  else {
    uint64_t v17 = a3;
  }
  uint64_t v18 = 936;
  if (*(void *)(a3 + 936) == -1) {
    uint64_t v18 = 304;
  }
  *(void *)(a3 + 936) = *(void *)(v17 + v18);
  uint64_t v19 = *(void *)(v17 + 56);
  if (v19)
  {
    CFArrayRef MediaSegmentSpecifiers = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(v19);
    if (MediaSegmentSpecifiers)
    {
      if (CFArrayGetCount(MediaSegmentSpecifiers) >= 1
        && !FigMediaPlaylistHasDiscontinuitySequence(*(void *)(v17 + 56))
        && !FigMediaPlaylistGetPlaylistType(*(void *)(v17 + 56)))
      {
        FigMediaPlaylistGetMediaSegmentSpecifiers(*(void *)(v17 + 56));
        Lastuint64_t Value = FigCFArrayGetLastValue();
        if (FigMediaSegmentSpecifierGetDiscontinuityDomain(LastValue) >= 1)
        {
          uint64_t v69 = a3 + 336;
          uint64_t DiscoInfoList = segPumpCreateDiscoInfoList(a3, (void *)(a3 + 336), *(void *)(a3 + 312), (void *)(a3 + 352));
          if (DiscoInfoList) {
            return DiscoInfoList;
          }
          while (1)
          {
            uint64_t v69 = *(void *)v69;
            if (!v69) {
              break;
            }
            CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
            CFDateRef v72 = CFDateCreate(AllocatorForMedia, *(CFAbsoluteTime *)(v69 + 16));
            if (v72) {
              CFRelease(v72);
            }
          }
        }
      }
    }
  }
  uint64_t v116 = a5;
  uint64_t v117 = a6;
  uint64_t v21 = a10;
  uint64_t v22 = a11;
  double v23 = (unsigned char *)(a2 + 8005);
  *(unsigned char *)(a3 + 863) = 0;
  uint64_t v24 = *(void *)a3;
  CFTypeRef v118 = a7;
  if (*(void *)(a2 + 8248))
  {
    uint64_t v114 = v17;
    BOOL v115 = a1;
    uint64_t v25 = (uint64_t *)(a2 + 40 * v24 + 8256);
    if (*(void *)(a3 + 56))
    {
      CFIndex v26 = 0;
      do
      {
        CFArrayRef Count = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(*(void *)(a3 + 56));
        if (Count) {
          CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
        }
        if (v26 >= (uint64_t)Count)
        {
          uint64_t v33 = a10;
          double v34 = (unsigned char *)(a2 + 8005);
          uint64_t v35 = 0;
          uint64_t v25 = (uint64_t *)(a2 + 40 * v24 + 8256);
          goto LABEL_32;
        }
        CFArrayRef v28 = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(*(void *)(a3 + 56));
        CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v28, v26);
        MediaFilePrivateData = segPumpGetMediaFilePrivateData(ValueAtIndex);
        uint64_t MediaSequence = FigMediaSegmentSpecifierGetMediaSequence((uint64_t)ValueAtIndex);
        ++v26;
      }
      while (MediaFilePrivateData[73]);
      uint64_t v32 = MediaSequence;
      uint64_t v33 = a10;
      double v34 = (unsigned char *)(a2 + 8005);
      if (MediaFilePrivateData[74]) {
        uint64_t v35 = *((void *)MediaFilePrivateData + 7);
      }
      else {
        uint64_t v35 = 0;
      }
      CFArrayRef PartialSegments = (const __CFArray *)FigMediaSegmentSpecifierGetPartialSegments((uint64_t)ValueAtIndex);
      uint64_t v37 = -1;
      do
      {
        if (PartialSegments) {
          CFIndex v38 = CFArrayGetCount(PartialSegments);
        }
        else {
          CFIndex v38 = 0;
        }
        if (v37 + 1 >= v38) {
          break;
        }
        CFArrayRef v39 = CFArrayGetValueAtIndex(PartialSegments, ++v37);
      }
      while (*((unsigned char *)segPumpGetMediaFilePrivateData(v39) + 73));
      uint64_t v25 = (uint64_t *)(a2 + 40 * v24 + 8256);
      if (ValueAtIndex) {
        goto LABEL_33;
      }
    }
    else
    {
      uint64_t v33 = a10;
      double v34 = (unsigned char *)(a2 + 8005);
      uint64_t v35 = 0;
    }
LABEL_32:
    uint64_t v32 = *(void *)(a3 + 376) + 1;
    uint64_t v37 = -1;
LABEL_33:
    uint64_t v40 = (const void **)(a2 + 40 * v24 + 8288);
    if (FigCFEqual() && *v40 && v32 == *v25)
    {
      uint64_t v41 = a2 + 40 * v24;
      uint64_t v42 = *(void *)(v41 + 8272);
      if (v35 > v42) {
        uint64_t v42 = v35;
      }
      *(void *)(v41 + 8272) = v42;
    }
    else
    {
      *(void *)(a2 + 40 * v24 + 8272) = v35;
    }
    double v23 = v34;
    if ((v32 & 0x8000000000000000) == 0) {
      *uint64_t v25 = v32;
    }
    uint64_t v43 = *v40;
    int v44 = *(const void **)(a2 + 8248);
    const void *v40 = v44;
    uint64_t v21 = v33;
    if (v44) {
      CFRetain(v44);
    }
    uint64_t v17 = v114;
    a1 = v115;
    uint64_t v22 = a11;
    if (v43) {
      CFRelease(v43);
    }
    uint64_t v45 = a2 + 40 * v24;
    *(void *)(v45 + 8264) = v37;
    *(unsigned char *)(v45 + 8280) = 1;
    uint64_t v24 = *(void *)a3;
  }
  uint64_t v46 = *(void *)(a2 + 16 * v24 + 392);
  *(unsigned char *)(a3 + 864) = v46 == a3;
  if (a8)
  {
    if (v46 == a3) {
      goto LABEL_55;
    }
  }
  else if ((*(unsigned char *)(v22 + 12) & 1) != 0 || v46 == a3)
  {
LABEL_55:
    if ((*(unsigned char *)(v21 + 12) & 1) != 0
      && (uint64_t v47 = *(void *)(v17 + 56)) != 0
      && (CFArrayRef v48 = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(v47)) != 0
      && CFArrayGetCount(v48) >= 1)
    {
      if (*(unsigned char *)(a3 + 864))
      {
        if (*(unsigned char *)(v22 + 12))
        {
          int v50 = 1;
        }
        else
        {
          uint64_t v49 = MEMORY[0x1E4F1FA48];
          *(_OWORD *)uint64_t v22 = *MEMORY[0x1E4F1FA48];
          *(void *)(v22 + 16) = *(void *)(v49 + 16);
          int v50 = *(unsigned __int8 *)(a3 + 864);
        }
        if (a8 && v50) {
          segPumpStreamCancelPreloadReadAndResetData(a2, v17);
        }
      }
      CMTime time = *(CMTime *)v21;
      CMTime rhs = *(CMTime *)v22;
      CMTimeAdd(&v122, &time, &rhs);
      double v74 = CMTimeGetSeconds(&v122) - *(double *)(v17 + 88);
      uint64_t DiscoInfoList = segPumpGetLastDiscAndDateForTimeReadInPlaylist(*(void *)(v17 + 56), &v123, (double *)(a3 + 920), v74);
      if (DiscoInfoList) {
        return DiscoInfoList;
      }
      CMTime time = *(CMTime *)v21;
      CMTime rhs = *(CMTime *)v22;
      CMTimeAdd(&v121, &time, &rhs);
      double v75 = CMTimeGetSeconds(&v121) - *(double *)(v17 + 88);
      double v76 = v123;
      if (v75 < v123)
      {
        *(double *)(a3 + 920) = *(double *)(a3 + 920) - (v123 - v75);
        double v74 = v76;
      }
      double v77 = *(double *)(v17 + 96) - v74;
      *(double *)(a3 + 904) = v77;
      *(double *)(a3 + 912) = v74;
      *(double *)(a3 + 928) = v74 + *(double *)(a3 + 88);
      if (v77 < 0.0) {
        *(void *)(a3 + 904) = 0;
      }
    }
    else
    {
      double v51 = *(double *)(v17 + 120);
      if (v51 > 0.0) {
        *(double *)(a3 + 120) = v51;
      }
    }
    *(void *)(a3 + 896) = *(void *)(v17 + 1056);
    CMTime time = *(CMTime *)v22;
    Float64 v52 = CMTimeGetSeconds(&time) * 1000000000.0;
    *(void *)(a3 + 888) = (uint64_t)(v52 + (double)FigGetUpTimeNanoseconds());
    *(unsigned char *)(a3 + 861) = 1;
    if (dword_1E9351350)
    {
      LODWORD(valuePtr) = 0;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
LABEL_91:
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      goto LABEL_141;
    }
    goto LABEL_141;
  }
  if (*(unsigned char *)(a3 + 1169))
  {
    if (!dword_1E9351350) {
      goto LABEL_141;
    }
    goto LABEL_99;
  }
  if (*(void *)(a2 + 8224))
  {
    if (*(void *)(a2 + 8144))
    {
      int v54 = FigCFEqual();
      if (!a8)
      {
        if (v54)
        {
          double valuePtr = 0.0;
          *(unsigned char *)(a3 + 866) = 0;
          *(void *)(a3 + 88) = *(void *)(v17 + 88);
          CFNumberGetValue(*(CFNumberRef *)(a2 + 8232), kCFNumberDoubleType, &valuePtr);
          *(double *)(a3 + 120) = valuePtr - *(double *)(a3 + 88);
          if (!dword_1E9351350) {
            goto LABEL_141;
          }
          double v55 = v23;
          int v56 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT);
          goto LABEL_140;
        }
      }
    }
  }
  if ((*(unsigned char *)(v17 + 401)
     || (uint64_t v64 = *(void *)(v17 + 696)) != 0
     && (uint64_t v65 = *(void *)(v64 + 8)) != 0
     && FigMediaSegmentSpecifierGetType(v65) == 1)
    && (*(unsigned char *)(v21 + 12) & 1) != 0)
  {
    double valuePtr = 0.0;
    *(unsigned char *)(a3 + 866) = 0;
    *(void *)(a3 + 88) = *(void *)(v17 + 88);
    CMTime time = *(CMTime *)v21;
    double Seconds = CMTimeGetSeconds(&time);
    double v58 = Seconds - *(double *)(v17 + 88);
    int v59 = *(_DWORD *)(v22 + 12);
    if (v59)
    {
      CMTime time = *(CMTime *)v22;
      double Seconds = CMTimeGetSeconds(&time);
      double v58 = v58 + Seconds;
      int v59 = *(_DWORD *)(v22 + 12);
    }
    if ((v59 & 1) == 0 && *(void *)a3 && !*(void *)v17)
    {
      double v82 = 0.0;
      goto LABEL_125;
    }
    uint64_t v60 = *(void *)(a3 + 56);
    if (v60)
    {
      uint64_t v61 = v17;
      CFArrayRef v62 = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(v60);
      if (v62) {
        CFIndex v63 = CFArrayGetCount(v62);
      }
      else {
        CFIndex v63 = 0;
      }
      uint64_t v78 = *(void *)(a3 + 56);
      if (v78)
      {
        BOOL v79 = FigMediaPlaylistGetDateStampCount(v78) > 0;
LABEL_114:
        if (v23[3] && *(_DWORD *)(a2 + 24) == 2 || v79)
        {
          int v81 = FigRCLGetNumberWithDefault(*(const __CFDictionary **)(a2 + 9128), @"allowEpsilonHLSSegmentOverlap");
          double v80 = 1.0;
          if (v81 && v63 >= 1) {
            double v80 = (double)v63 * 2.22044605e-16;
          }
        }
        else
        {
          LODWORD(Seconds) = *(_DWORD *)(a2 + 8);
          double v80 = (double)*(unint64_t *)&Seconds;
        }
        if (*(unsigned char *)(a3 + 872)) {
          double v82 = v80;
        }
        else {
          double v82 = v80 + 1.0;
        }
        uint64_t v17 = v61;
LABEL_125:
        segPumpGetLastDiscAndDateForTimeReadInPlaylist(*(void *)(v17 + 56), &v123, &valuePtr, v58);
        double v83 = *(double *)(a3 + 88);
        if (v58 <= v82)
        {
          double v84 = v123;
          double v87 = v123 + v83;
          *(double *)(a3 + 120) = v123;
          *(double *)(a3 + 928) = v87;
        }
        else
        {
          double v84 = v58 - v82;
          double v85 = v58 - v82 + v83;
          double v86 = v123;
          *(double *)(a3 + 120) = v58 - v82;
          *(double *)(a3 + 928) = v85;
          if (v58 - v82 < v86)
          {
            *(double *)(a3 + 120) = v86;
            double v84 = v86;
          }
        }
        if (valuePtr != 0.0) {
          *(double *)(a3 + 920) = valuePtr + v84 - v58;
        }
        int v88 = dword_1E9351350;
        if (dword_1E9351350)
        {
          uint64_t v89 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v89, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          int v88 = dword_1E9351350;
          if (dword_1E9351350 >= 2)
          {
            unsigned int v90 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            int v88 = dword_1E9351350;
          }
        }
        *(double *)(a3 + 128) = (double)*(uint64_t *)(v17 + 1056) / 1000000000.0
                              - (*(double *)(v17 + 96)
                               - *(double *)(a3 + 120));
        if (v88)
        {
          double v113 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v113, OS_LOG_TYPE_DEFAULT);
          goto LABEL_91;
        }
        goto LABEL_141;
      }
    }
    else
    {
      uint64_t v61 = v17;
      CFIndex v63 = 0;
    }
    BOOL v79 = 0;
    goto LABEL_114;
  }
  double v66 = *(double *)(v17 + 120);
  if (v66 > 0.0)
  {
    *(double *)(a3 + 120) = v66;
    if (!dword_1E9351350) {
      goto LABEL_141;
    }
    goto LABEL_99;
  }
  if (!*(unsigned char *)(v17 + 861))
  {
    if (*(unsigned char *)(v21 + 12))
    {
      CMTime time = *(CMTime *)v21;
      Float64 v91 = CMTimeGetSeconds(&time);
      LODWORD(v92) = *(_DWORD *)(a2 + 8);
      double v93 = v91 - (double)v92 + -1.0;
      *(double *)(a3 + 120) = v93;
      if (*(unsigned char *)(v22 + 12))
      {
        CMTime time = *(CMTime *)v22;
        double v93 = CMTimeGetSeconds(&time) + *(double *)(a3 + 120);
        *(double *)(a3 + 120) = v93;
      }
      if (v93 < 0.0) {
        *(void *)(a3 + 120) = 0;
      }
      if (!dword_1E9351350) {
        goto LABEL_141;
      }
      double v55 = v23;
      LODWORD(valuePtr) = 0;
      uint64_t v94 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v94, OS_LOG_TYPE_DEFAULT);
LABEL_140:
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      double v23 = v55;
      goto LABEL_141;
    }
    *(unsigned char *)(a3 + 866) = 1;
    if (!dword_1E9351350) {
      goto LABEL_141;
    }
LABEL_99:
    double v55 = v23;
    LODWORD(valuePtr) = 0;
    int v73 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT);
    goto LABEL_140;
  }
  *(double *)(a3 + 120) = *(double *)(v17 + 96) - *(double *)(v17 + 904);
  if (dword_1E9351350)
  {
    LODWORD(valuePtr) = 0;
    uint64_t v67 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT);
    goto LABEL_91;
  }
LABEL_141:
  if (*(unsigned char *)(a3 + 857))
  {
    if (*(void *)(a2 + 8416) == *(void *)a3)
    {
      int v95 = *(_DWORD *)(a2 + 8680);
      *(_DWORD *)(a2 + 8680) = 0;
    }
    else
    {
      int v95 = 0;
    }
    *(unsigned char *)(a3 + 857) = 0;
    uint64_t DiscoInfoList = segPumpMakeDataCallbackWithOSStatus((uint64_t)a1, (uint64_t *)a3, *(const void **)(a2 + 176), 0, 8u, *(void *)(a3 + 304), MEMORY[0x1E4F1F9F8], 0, v95, 0, 0, 0);
    if (DiscoInfoList) {
      return DiscoInfoList;
    }
  }
  ++*(_DWORD *)(a3 + 72);
  ++*(void *)(a3 + 80);
  *(unsigned char *)(a3 + 858) = 0;
  *(unsigned char *)(a3 + 401) = 0;
  *(unsigned char *)(a3 + 874) = 0;
  *(unsigned char *)(a3 + 876) = 0;
  *(_OWORD *)(a3 + 1080) = 0u;
  if (!v23[707]) {
    *(unsigned char *)(a3 + 402) = 1;
  }
  *(void *)(a3 + 64) = 0;
  *(void *)(a3 + 312) = 0;
  ++*(void *)(a3 + 1160);
  uint64_t v96 = *(void *)(a2 + 8144);
  if (v96) {
    PathwayID = FigAlternateGetPathwayID(*(void *)(v96 + 8));
  }
  else {
    PathwayID = @".";
  }
  segPumpStreamUpdateIndexFile((void *)a3, v116, v116, v117, v118, PathwayID);
  time.CMTimeValue value = 0;
  rhs.CMTimeValue value = 0;
  long long v98 = *(const void **)(a3 + 248);
  if (!v98) {
    goto LABEL_181;
  }
  if (!v23[679])
  {
    if (FigContentKeySpecifierGetIsPrefetchKey((uint64_t)v98)) {
      goto LABEL_170;
    }
    long long v98 = *(const void **)(a3 + 248);
  }
  uint64_t CryptKeyCommonData = segPumpGetCryptKeyCommonData(v98, &time, &rhs);
  if (CryptKeyCommonData) {
    goto LABEL_176;
  }
  if (FigContentKeySpecifierGetKeySystem(*(void *)(a3 + 248)) != 1) {
    goto LABEL_170;
  }
  CMTimeValue value = rhs.value;
  if (*(unsigned char *)(rhs.value + 88))
  {
    uint64_t v101 = *(void *)(rhs.value + 64);
    if (v101)
    {
      uint64_t v102 = *(void **)(CMBaseObjectGetVTable() + 16);
      if (v102) {
        uint64_t v103 = v102;
      }
      else {
        uint64_t v103 = 0;
      }
      if (*v103 < 6uLL) {
        goto LABEL_177;
      }
      unsigned int v104 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void, void))v103[20];
      if (!v104) {
        goto LABEL_177;
      }
      uint64_t CryptKeyCommonData = v104(v101, 2, 1, 0, 0);
      if (!CryptKeyCommonData)
      {
        CMTimeValue value = rhs.value;
        goto LABEL_166;
      }
LABEL_176:
      uint64_t v108 = CryptKeyCommonData;
      goto LABEL_178;
    }
  }
LABEL_166:
  if (*(unsigned char *)(value + 128))
  {
    uint64_t v105 = *(void *)(value + 104);
    if (v105)
    {
      BOOL v106 = *(void **)(CMBaseObjectGetVTable() + 16);
      if (v106) {
        unint64_t v107 = v106;
      }
      else {
        unint64_t v107 = 0;
      }
      if (*v107 >= 6uLL)
      {
        unint64_t v109 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void, void))v107[20];
        if (v109)
        {
          uint64_t CryptKeyCommonData = v109(v105, 2, 1, 0, 0);
          goto LABEL_176;
        }
      }
LABEL_177:
      uint64_t v108 = 4294954514;
LABEL_178:
      CMTimeValue value = rhs.value;
      if (!rhs.value) {
        goto LABEL_180;
      }
      goto LABEL_179;
    }
LABEL_170:
    uint64_t v108 = 0;
    goto LABEL_178;
  }
  uint64_t v108 = 0;
LABEL_179:
  CryptKeyReleaseAndClearVideoDecryptor(value);
  CryptKeyReleaseAndClearAudioDecryptor(value);
  segPumpCancelCryptReadAndResetData(a2, a3);
LABEL_180:
  if (v108) {
    return v108;
  }
LABEL_181:
  uint64_t DiscoInfoList = segPumpStopStream(a2, a3, a9);
  if (DiscoInfoList) {
    return DiscoInfoList;
  }
  if (!*(void *)(a3 + 1184))
  {
    uint64_t v110 = nw_activity_create();
    *(void *)(a3 + 1184) = v110;
    if (!v110 || !*(void *)(*(void *)(a2 + 16 * *(void *)a3 + 384) + 1176)) {
      goto LABEL_205;
    }
    nw_activity_set_parent_activity();
    if (*(void *)(a3 + 1184)) {
      nw_activity_activate();
    }
    if (*(void *)(a2 + 16 * *(void *)a3 + 392) == a3)
    {
      uint64_t v111 = nw_activity_create();
      *(void *)(a3 + 1192) = v111;
      if (v111)
      {
        if (!*(void *)(a3 + 1184) || (nw_activity_set_parent_activity(), *(void *)(a3 + 1192))) {
          nw_activity_activate();
        }
        goto LABEL_192;
      }
LABEL_205:
      FigSignalErrorAt();
    }
  }
LABEL_192:
  *(unsigned char *)(a3 + 862) = 1;
  if (*(void *)(a2 + 8416) == *(void *)a3 && !*(unsigned char *)(a3 + 864))
  {
    *double v23 = 0;
    *(unsigned char *)(a2 + 376) = 1;
  }
  uint64_t v108 = 0;
  v23[1] = 0;
  *(void *)(a3 + 64) = 0;
  if (!*(unsigned char *)(a3 + 1169))
  {
    uint64_t DiscoInfoList = segPumpRequestIndexForStream(a1, (uint64_t *)a2, a3, 0);
    if (!DiscoInfoList)
    {
      if (*(void *)(a2 + 8144)) {
        return 0;
      }
      return FigSignalErrorAt();
    }
    return DiscoInfoList;
  }
  return v108;
}

uint64_t segPumpBitsRequiredToSwitch(uint64_t a1, int a2, int a3, double a4, double a5)
{
  uint64_t v5 = *(void *)(a1 + 16 * *(void *)(a1 + 8416) + 384);
  if (!v5) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v7 = *(void *)(v5 + 56);
  if (!v7) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  unsigned int v11 = *(_DWORD *)(a1 + 8);
  double v12 = (double)v11;
  if (a3 || (PlaylistType = FigMediaPlaylistGetPlaylistType(v7), unsigned int v11 = *(_DWORD *)(a1 + 8), PlaylistType == 2))
  {
    double v14 = (double)v11;
    double v15 = 1.0;
    if (*(_DWORD *)(a1 + 8072)) {
      double v15 = (double)v11;
    }
  }
  else
  {
    double v14 = (double)v11;
    double v15 = (double)v11;
  }
  double v16 = v15 + v12;
  if (a4 + a5 - v16 < 0.0) {
    double v16 = a4 + a5;
  }
  return (uint64_t)((v16 + (*(double *)(a1 + 8080) + 1.0) * v14) * (double)a2);
}

CFArrayRef segPumpStreamHavePerSegmentBitrate(uint64_t a1)
{
  CFArrayRef result = *(const __CFArray **)(a1 + 56);
  if (result)
  {
    FigMediaPlaylistGetMediaSegmentSpecifiers((uint64_t)result);
    Firstuint64_t Value = FigCFArrayGetFirstValue();
    CFArrayRef result = *(const __CFArray **)(a1 + 56);
    if (result)
    {
      CFArrayRef result = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers((uint64_t)result);
      if (result)
      {
        if (CFArrayGetCount(result) < 1 || FirstValue == 0) {
          return 0;
        }
        else {
          return (const __CFArray *)(FigMediaSegmentSpecifierGetBitRate(FirstValue) != 0.0);
        }
      }
    }
  }
  return result;
}

uint64_t segPumpRequestIndexForStream(const void *a1, uint64_t *a2, uint64_t a3, int a4)
{
  cf[24] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  CFDictionaryRef theDict = 0;
  cf[0] = 0;
  CFTypeRef v28 = 0;
  CFTypeRef v29 = 0;
  char v27 = 0;
  CFTypeRef v26 = 0;
  if (a2[37])
  {
    uint64_t v8 = segPumpEnsureCacheForStreamPossiblyEndingStream((uint64_t)a1, a3);
    if (v8)
    {
LABEL_20:
      uint64_t v16 = v8;
      goto LABEL_35;
    }
    if (*(unsigned char *)(a3 + 1136))
    {
      uint64_t v16 = 0;
      goto LABEL_35;
    }
  }
  uint64_t v8 = segPumpCopyIndexFileFromCache((uint64_t)a2, (unsigned int *)a3, a4, cf, (CFTypeRef *)&theDict, &v28);
  if (v8) {
    goto LABEL_20;
  }
  if (!a2[1055] || (uint64_t v9 = a2[1056]) == 0 || FigNetworkPathInformationIsHostReachable(v9, 1))
  {
    if (theDict)
    {
      unsigned int v10 = (const void *)*MEMORY[0x1E4F1CFD0];
      if (v10 == CFDictionaryGetValue(theDict, @"must-validate"))
      {
        if (cf[0])
        {
          CFRelease(cf[0]);
          cf[0] = 0;
        }
        *(unsigned char *)(a3 + 538) = 1;
      }
    }
  }
  if (!cf[0]
    || dword_1E9351350
    && (os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type(),
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT),
        fig_log_call_emit_and_clean_up_after_send_and_compose(),
        !cf[0]))
  {
    uint64_t v8 = segPumpSendIndexFileRequest((uint64_t)a1, (uint64_t)a2, a3);
    goto LABEL_20;
  }
  *(void *)(a3 + 1048) = FigGetUpTimeNanoseconds();
  uint64_t v12 = *(void *)(a3 + 424);
  if (v12)
  {
    uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
    uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v14) {
      uint64_t v15 = v14;
    }
    else {
      uint64_t v15 = 0;
    }
    uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v15 + 48);
    if (v17) {
      v17(v12, 0x1EE57B638, AllocatorForMedia, &v26);
    }
    uint64_t v18 = *(void *)(a3 + 424);
    uint64_t v19 = FigGetAllocatorForMedia();
    uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v20) {
      uint64_t v21 = v20;
    }
    else {
      uint64_t v21 = 0;
    }
    uint64_t v22 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v21 + 48);
    if (v22) {
      v22(v18, 0x1EE57B6B8, v19, &v29);
    }
  }
  double v23 = *(const void **)(a3 + 520);
  CFTypeRef v24 = cf[0];
  *(CFTypeRef *)(a3 + 520) = cf[0];
  if (v24) {
    CFRetain(v24);
  }
  if (v23) {
    CFRelease(v23);
  }
  uint64_t v16 = segPumpParseIndexFile2(a1, (uint64_t)a2, a3, 0, 0, 1u, &v27);
  segPumpPublishPlaylistRequestEvent((uint64_t)a1, (uint64_t)a2, v28, (void *)a3, (uint64_t)v29, *(void *)(a3 + 424), v26, v27, 1);
  if (v16) {
    segPumpSendEndCallbackForAllActiveStreamsWithOSStatus(*a2, v16);
  }
LABEL_35:
  if (v28) {
    CFRelease(v28);
  }
  if (theDict) {
    CFRelease(theDict);
  }
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  if (v29) {
    CFRelease(v29);
  }
  if (v26) {
    CFRelease(v26);
  }
  return v16;
}

uint64_t segPumpGetRequiredBandwidthForCurrentStreamingAlternate(uint64_t result)
{
  uint64_t v1 = result;
  if (!*(void *)(result + 8144)) {
    goto LABEL_6;
  }
  if (!*(void *)(result + 296)) {
    return segPumpStreamBitRateRequiredForStream(v1, *(void **)(v1 + 384));
  }
  CFArrayRef result = FigAlternateGetLastKnownValueForIsFullyCached();
  if (result) {
    return result;
  }
  if (*(void *)(v1 + 8144)) {
    return segPumpStreamBitRateRequiredForStream(v1, *(void **)(v1 + 384));
  }
LABEL_6:
  uint64_t v2 = 0;
  int v3 = 0;
  do
  {
    uint64_t v4 = *(void *)(v1 + 384 + v2);
    if (*(void *)(v4 + 16))
    {
      int v5 = *(_DWORD *)(v4 + 1084);
      if (!v5) {
        return result;
      }
      v3 += v5;
    }
    v2 += 16;
  }
  while (v2 != 48);
  return result;
}

double segPumpGetLocalBitrateForSubStream(uint64_t a1, uint64_t a2, uint64_t a3, CMTime *a4, _OWORD *a5)
{
  uint64_t v9 = a1 + 16 * a2;
  uint64_t v10 = *(void *)(v9 + 392);
  if (!*(void *)(v10 + 16)) {
    uint64_t v10 = *(void *)(v9 + 384);
  }
  *(_OWORD *)&v47.CMTimeValue value = *MEMORY[0x1E4F1F9F8];
  CMTimeEpoch v11 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  v47.CMTimeEpoch epoch = v11;
  uint64_t v12 = *(void *)(v10 + 56);
  double v13 = 0.0;
  double v14 = -1.0;
  long long v41 = *(_OWORD *)&v47.value;
  if (v12)
  {
    CFArrayRef MediaSegmentSpecifiers = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(v12);
    if (MediaSegmentSpecifiers)
    {
      if (CFArrayGetCount(MediaSegmentSpecifiers) >= 1)
      {
        *(_OWORD *)&time.start.CMTimeValue value = *(_OWORD *)a3;
        time.start.CMTimeEpoch epoch = *(void *)(a3 + 16);
        double Seconds = CMTimeGetSeconds(&time.start);
        *(_OWORD *)&time.start.CMTimeValue value = *(_OWORD *)(a3 + 24);
        time.start.CMTimeEpoch epoch = *(void *)(a3 + 40);
        double v17 = CMTimeGetSeconds(&time.start);
        CFIndex v18 = 0;
        while (1)
        {
          CFArrayRef Count = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(*(void *)(v10 + 56));
          if (Count) {
            CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
          }
          if (v18 >= (uint64_t)Count) {
            break;
          }
          CFArrayRef v20 = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(*(void *)(v10 + 56));
          CFStringRef ValueAtIndex = (double *)CFArrayGetValueAtIndex(v20, v18);
          MediaFilePrivateData = (double *)segPumpGetMediaFilePrivateData(ValueAtIndex);
          double v23 = MediaFilePrivateData[4];
          ++v18;
          if (v23 + FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)ValueAtIndex) > Seconds)
          {
            double v24 = MediaFilePrivateData[4];
            TimeIndouble Seconds = FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)ValueAtIndex);
            CMTimeMakeWithSeconds(&v47, v24 + TimeInSeconds + 0.001, 1000);
            if (ValueAtIndex)
            {
              double v26 = v17 + Seconds - v24;
              if (v26 > 0.0)
              {
                double v14 = -1.0;
                do
                {
                  unint64_t v27 = 0;
                  double v28 = 0.0;
                  uint64_t NextSegment = ValueAtIndex;
                  do
                  {
                    double v30 = FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)NextSegment);
                    if (FigMediaSegmentSpecifierGetBitRate((uint64_t)NextSegment) <= 0.0)
                    {
                      uint64_t v33 = 8 * *((void *)segPumpGetMediaFilePrivateData(NextSegment) + 5);
                    }
                    else
                    {
                      double BitRate = FigMediaSegmentSpecifierGetBitRate((uint64_t)NextSegment);
                      double v32 = BitRate * FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)NextSegment);
                      uint64_t v33 = (unint64_t)v32;
                    }
                    double v28 = v28 + v30;
                    LODWORD(v32) = *(_DWORD *)(a1 + 8);
                    double v34 = (double)*(unint64_t *)&v32;
                    if (v28 > v34 * 1.5 + 0.5) {
                      break;
                    }
                    v27 += v33;
                    if (v28 >= v34 * 0.5 && v14 <= (double)v27 / v28) {
                      double v14 = (double)v27 / v28;
                    }
                    uint64_t NextSegment = (const void *)FigMediaSegmentSpecifierGetNextSegment((uint64_t)NextSegment);
                  }
                  while (NextSegment);
                  double v35 = ValueAtIndex[4];
                  double v36 = FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)ValueAtIndex);
                  double v37 = FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)ValueAtIndex);
                  uint64_t v38 = FigMediaSegmentSpecifierGetNextSegment((uint64_t)ValueAtIndex);
                  if (!v38) {
                    break;
                  }
                  CFStringRef ValueAtIndex = (double *)v38;
                  double v26 = v26 - v37;
                }
                while (v26 > 0.0);
                double v13 = v35 + v36;
              }
            }
            goto LABEL_27;
          }
        }
      }
    }
  }
  double v24 = 0.0;
LABEL_27:
  if (a4) {
    *a4 = v47;
  }
  if (a5)
  {
    memset(&v46, 0, sizeof(v46));
    CMTimeMakeWithSeconds(&v46, v24, 1000);
    memset(&v45, 0, sizeof(v45));
    if (v24 >= v13)
    {
      *(_OWORD *)&v45.CMTimeValue value = v41;
      v45.CMTimeEpoch epoch = v11;
    }
    else
    {
      CMTimeMakeWithSeconds(&v45, v13 - v24, 1000);
    }
    CMTime start = v46;
    duratiouint64_t n = v45;
    CMTimeRangeMake(&time, &start, &duration);
    long long v39 = *(_OWORD *)&time.start.epoch;
    *a5 = *(_OWORD *)&time.start.value;
    a5[1] = v39;
    a5[2] = *(_OWORD *)&time.duration.timescale;
  }
  return v14;
}

const __CFArray *segPumpStreamSnapToSegmentBoundary@<X0>(uint64_t a1@<X0>, CMTime *a2@<X1>, uint64_t a3@<X2>, CMTime *a4@<X8>)
{
  uint64_t v7 = MEMORY[0x1E4F1F9F8];
  long long v19 = *MEMORY[0x1E4F1F9F8];
  *(_OWORD *)&a4->CMTimeValue value = *MEMORY[0x1E4F1F9F8];
  CMTimeEpoch v8 = *(void *)(v7 + 16);
  a4->CMTimeEpoch epoch = v8;
  CMTime time = *a2;
  double Seconds = CMTimeGetSeconds(&time);
  *(void *)(a3 + 16) = v8;
  *(_OWORD *)a3 = v19;
  CFArrayRef result = *(const __CFArray **)(a1 + 56);
  if (result)
  {
    for (CFIndex i = 0; ; ++i)
    {
      CFArrayRef result = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers((uint64_t)result);
      if (result) {
        CFArrayRef result = (const __CFArray *)CFArrayGetCount(result);
      }
      if (i >= (uint64_t)result) {
        break;
      }
      CFArrayRef MediaSegmentSpecifiers = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(*(void *)(a1 + 56));
      CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(MediaSegmentSpecifiers, i);
      MediaFilePrivateData = (double *)segPumpGetMediaFilePrivateData(ValueAtIndex);
      double v15 = MediaFilePrivateData[4];
      if (v15 <= Seconds)
      {
        uint64_t v16 = MediaFilePrivateData;
        if (Seconds <= v15 + FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)ValueAtIndex))
        {
          double v17 = v16[4];
          if (Seconds - v17 > FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)ValueAtIndex) * 0.5)
          {
            double v17 = v17 + FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)ValueAtIndex);
            CFStringRef ValueAtIndex = (const void *)FigMediaSegmentSpecifierGetNextSegment((uint64_t)ValueAtIndex);
          }
          CFArrayRef result = (const __CFArray *)CMTimeMakeWithSeconds(a4, v17 + 0.000001, 1000000);
          if (ValueAtIndex)
          {
            TimeIndouble Seconds = FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)ValueAtIndex);
            CFArrayRef result = (const __CFArray *)CMTimeMakeWithSeconds(&time, v17 + TimeInSeconds + 0.000001, 1000000);
            *(CMTime *)a3 = time;
          }
          return result;
        }
      }
      CFArrayRef result = *(const __CFArray **)(a1 + 56);
    }
  }
  return result;
}

void segPumpSetupInitialCryptorApplierFunction(const void *a1, const void *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)a3;
  LODWORD(v5) = *(_DWORD *)(a3 + 8);
  if (!v5)
  {
    CFTypeID TypeID = CFStringGetTypeID();
    if (TypeID != CFGetTypeID(a1)) {
      goto LABEL_15;
    }
    CFTypeID v9 = CFDictionaryGetTypeID();
    if (v9 != CFGetTypeID(a2)) {
      goto LABEL_15;
    }
    uint64_t Value = CFDictionaryGetValue((CFDictionaryRef)a2, @"FPBCPECryptorsKey_Video");
    CMTimeEpoch v11 = CFDictionaryGetValue((CFDictionaryRef)a2, @"FPBCPECryptorsKey_Audio");
    if (!Value)
    {
      LODWORD(v5) = 0;
      goto LABEL_14;
    }
    int v5 = v11;
    uint64_t v12 = FigCPECryptorGetTypeID();
    if (v12 != CFGetTypeID(Value)
      || !FigCFDictionaryGetInt32IfPresent()
      || !FigCFDictionaryGetInt32IfPresent()
      || (uint64_t CryptKeyCommonData = segPumpCreateCryptKeyCommonData(v4)) == 0)
    {
LABEL_15:
      LODWORD(v5) = FigSignalErrorAt();
      goto LABEL_14;
    }
    double v14 = CryptKeyCommonData;
    CryptKeyCommonData[2] = CFRetain(a1);
    *((_DWORD *)v14 + 6) = 0;
    *((_DWORD *)v14 + 7) = 0;
    *((unsigned char *)v14 + 147) = 1;
    v14[8] = CFRetain(Value);
    *((unsigned char *)v14 + 144) = 1;
    if (v5)
    {
      uint64_t v15 = FigCPECryptorGetTypeID();
      if (v15 == CFGetTypeID(v5))
      {
        CFTypeRef v16 = CFRetain(v5);
        LODWORD(v5) = 0;
        v14[13] = v16;
      }
      else
      {
        LODWORD(v5) = FigSignalErrorAt();
      }
    }
    CFRelease(v14);
  }
LABEL_14:
  *(_DWORD *)(a3 + 8) = v5;
}

void segPumpCreateSafeBandwidthCoefficientsForBaseStoreBagKey(uint64_t a1, uint64_t a2, __CFArray **a3)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable(*(CFAllocatorRef *)(a1 + 56), 0, MEMORY[0x1E4F1D510]);
  if (Mutable)
  {
    uint64_t v7 = Mutable;
    for (uint64_t i = 0; i != 16; ++i)
    {
      CFTypeID v9 = (__CFString *)CFStringCreateWithFormat(*(CFAllocatorRef *)(a1 + 56), 0, @"%@%d", a2, i);
      if (!v9)
      {
        FigSignalErrorAt();
        goto LABEL_14;
      }
      uint64_t v10 = v9;
      CMTimeEpoch v11 = (__CFString *)FigRCLCopyCFType(*(CFDictionaryRef *)(a1 + 9128), v9);
      if (!v11) {
        goto LABEL_8;
      }
      uint64_t v12 = v11;
      CFTypeID v13 = CFGetTypeID(v11);
      if (v13 != CFNumberGetTypeID())
      {
        FigSignalErrorAt();
        CFRelease(v10);
        double v14 = v12;
        goto LABEL_12;
      }
      CFArrayAppendValue(v7, v12);
      CFRelease(v10);
      CFRelease(v12);
    }
    uint64_t v10 = 0;
LABEL_8:
    if (CFArrayGetCount(v7) >= 1)
    {
      *a3 = v7;
      uint64_t v7 = 0;
    }
    if (v10)
    {
      double v14 = v10;
LABEL_12:
      CFRelease(v14);
    }
    if (!v7) {
      return;
    }
LABEL_14:
    CFRelease(v7);
  }
  else
  {
    FigSignalErrorAt();
  }
}

void segPumpStreamClearStatistics(uint64_t a1)
{
  *(void *)(a1 + 944) = 0;
  *(void *)(a1 + 1104) = 0;
  *(_OWORD *)(a1 + 1120) = 0u;
  for (uint64_t i = *(void **)(a1 + 680); i; uint64_t i = (void *)*i)
  {
    uint64_t v2 = (const void *)i[22];
    if (v2)
    {
      CFRelease(v2);
      i[22] = 0;
    }
  }
}

uint64_t registerFigNetworkWirelessReportingInterfaceType()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sFigNetworkWirelessReportingInterfaceID = result;
  return result;
}

uint64_t FigNetworkWirelessReportingInterfaceCopyWifiStats(void *a1)
{
  uint64_t v2 = (void *)MEMORY[0x199711A30]();
  if (FigNetworkWirelessReportingInterfaceGetGlobal_onceToken != -1) {
    dispatch_once_f(&FigNetworkWirelessReportingInterfaceGetGlobal_onceToken, 0, (dispatch_function_t)fnwri_globalNetworkWirelessReportingInterfaceInitOnce);
  }
  if (gNetworkWirelessInterface && a1)
  {
    uint64_t v3 = 0;
    *a1 = [*(id *)(gNetworkWirelessInterface + 16) copyAllWiFiStats];
  }
  else
  {
    uint64_t v3 = FigSignalErrorAt();
  }
  return v3;
}

uint64_t FigNetworkWirelessReportingInterfaceCopyCellStats(void *a1)
{
  uint64_t v2 = (void *)MEMORY[0x199711A30]();
  if (CelestialIsAudioAccessory()) {
    goto LABEL_10;
  }
  if (FigNetworkWirelessReportingInterfaceGetGlobal_onceToken != -1) {
    dispatch_once_f(&FigNetworkWirelessReportingInterfaceGetGlobal_onceToken, 0, (dispatch_function_t)fnwri_globalNetworkWirelessReportingInterfaceInitOnce);
  }
  uint64_t v3 = gNetworkWirelessInterface;
  if (!gNetworkWirelessInterface || !a1)
  {
    uint64_t v6 = FigSignalErrorAt();
    goto LABEL_8;
  }
  uint64_t v4 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA60]), "initWithDictionary:", objc_msgSend(*(id *)(gNetworkWirelessInterface + 24), "signalStrength"));
  if (!v4)
  {
LABEL_10:
    uint64_t v6 = 0;
    goto LABEL_8;
  }
  int v5 = v4;
  objc_msgSend(v4, "setValue:forKey:", objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(*(id *)(v3 + 24), "bars")), @"bars");
  objc_msgSend(v5, "setValue:forKey:", objc_msgSend(*(id *)(v3 + 24), "carrierName"), @"carrier");
  uint64_t v6 = 0;
  *a1 = v5;
LABEL_8:
  return v6;
}

uint64_t FigNetworkWirelessReportingInterfaceInit()
{
  if (FigNetworkWirelessReportingInterfaceGetGlobal_onceToken != -1) {
    dispatch_once_f(&FigNetworkWirelessReportingInterfaceGetGlobal_onceToken, 0, (dispatch_function_t)fnwri_globalNetworkWirelessReportingInterfaceInitOnce);
  }
  return 0;
}

uint64_t FigNetworkWirelessReportingReportWiFiStats(uint64_t a1, uint64_t a2)
{
  uint64_t result = 4294948045;
  if (a1 && a2)
  {
    FigCFDictionaryGetValue();
    uint64_t SInt64 = FigCFNumberGetSInt64();
    uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v5) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = 0;
    }
    uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v6 + 56);
    if (v7) {
      v7(a1, 0x1EE582D18, 0x1EE562518, SInt64, 0);
    }
    FigCFDictionaryGetValue();
    uint64_t v8 = FigCFNumberGetSInt64();
    uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v9) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
    CMTimeEpoch v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v10 + 56);
    if (v11) {
      v11(a1, 0x1EE582D18, 0x1EE562538, v8, 0);
    }
    FigCFDictionaryGetValue();
    uint64_t v12 = FigCFNumberGetSInt64();
    uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v13) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v14 + 56);
    if (v15) {
      v15(a1, 0x1EE582D18, 0x1EE562558, v12, 0);
    }
    FigCFDictionaryGetValue();
    uint64_t v16 = FigCFNumberGetSInt64();
    uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v17) {
      uint64_t v18 = v17;
    }
    else {
      uint64_t v18 = 0;
    }
    long long v19 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v18 + 56);
    if (v19) {
      v19(a1, 0x1EE582D18, 0x1EE562578, v16, 0);
    }
    uint64_t Value = FigCFDictionaryGetValue();
    uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v21) {
      uint64_t v22 = v21;
    }
    else {
      uint64_t v22 = 0;
    }
    double v23 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v22 + 48);
    if (v23) {
      v23(a1, 0x1EE582D18, 0x1EE5625B8, Value, 0);
    }
    FigCFDictionaryGetValue();
    uint64_t v24 = FigCFNumberGetSInt64();
    uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v25) {
      uint64_t v26 = v25;
    }
    else {
      uint64_t v26 = 0;
    }
    unint64_t v27 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v26 + 56);
    if (v27) {
      v27(a1, 0x1EE582D18, 0x1EE5625D8, v24, 0);
    }
    FigCFDictionaryGetValue();
    uint64_t v28 = FigCFNumberGetSInt64();
    uint64_t v29 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v29) {
      uint64_t v30 = v29;
    }
    else {
      uint64_t v30 = 0;
    }
    double v31 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v30 + 56);
    if (v31) {
      v31(a1, 0x1EE582D18, 0x1EE5625F8, v28, 0);
    }
    FigCFDictionaryGetValue();
    uint64_t v32 = FigCFNumberGetSInt64();
    uint64_t v33 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v33) {
      uint64_t v34 = v33;
    }
    else {
      uint64_t v34 = 0;
    }
    double v35 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v34 + 56);
    if (v35) {
      v35(a1, 0x1EE582D18, 0x1EE562618, v32, 0);
    }
    FigCFDictionaryGetValue();
    uint64_t v36 = FigCFNumberGetSInt64();
    uint64_t v37 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v37) {
      uint64_t v38 = v37;
    }
    else {
      uint64_t v38 = 0;
    }
    long long v39 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v38 + 56);
    if (v39) {
      v39(a1, 0x1EE582D18, 0x1EE562638, v36, 0);
    }
    FigCFDictionaryGetValue();
    FigCFNumberGetFloat64();
    double v41 = v40;
    uint64_t v42 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v42) {
      uint64_t v43 = v42;
    }
    else {
      uint64_t v43 = 0;
    }
    int v44 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v43 + 56);
    if (v44) {
      v44(a1, 0x1EE582D18, 0x1EE562658, 1000 * (uint64_t)v41, 0);
    }
    FigCFDictionaryGetValue();
    FigCFNumberGetFloat64();
    double v46 = v45;
    uint64_t v47 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v47) {
      uint64_t v48 = v47;
    }
    else {
      uint64_t v48 = 0;
    }
    uint64_t v49 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v48 + 56);
    if (v49) {
      v49(a1, 0x1EE582D18, 0x1EE562678, 1000 * (uint64_t)v46, 0);
    }
    FigCFDictionaryGetValue();
    uint64_t UInt64 = FigCFNumberGetUInt64();
    uint64_t v51 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v51) {
      uint64_t v52 = v51;
    }
    else {
      uint64_t v52 = 0;
    }
    double v53 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v52 + 56);
    if (v53) {
      v53(a1, 0x1EE582D18, 0x1EE562698, UInt64, 0);
    }
    FigCFDictionaryGetValue();
    uint64_t v54 = FigCFNumberGetSInt64();
    uint64_t v55 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v55) {
      uint64_t v56 = v55;
    }
    else {
      uint64_t v56 = 0;
    }
    uint64_t v57 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v56 + 56);
    if (v57) {
      v57(a1, 0x1EE582D18, 0x1EE5626B8, v54, 0);
    }
    FigCFDictionaryGetValue();
    uint64_t v58 = FigCFNumberGetSInt64();
    uint64_t v59 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v59) {
      uint64_t v60 = v59;
    }
    else {
      uint64_t v60 = 0;
    }
    uint64_t v61 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v60 + 56);
    if (v61) {
      v61(a1, 0x1EE582D18, 0x1EE5626D8, v58, 0);
    }
    FigCFDictionaryGetValue();
    uint64_t v62 = FigCFNumberGetSInt64();
    uint64_t v63 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v63) {
      uint64_t v64 = v63;
    }
    else {
      uint64_t v64 = 0;
    }
    uint64_t v65 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v64 + 56);
    if (v65) {
      v65(a1, 0x1EE582D18, 0x1EE5626F8, v62, 0);
    }
    FigCFDictionaryGetValue();
    uint64_t v66 = FigCFNumberGetUInt64();
    uint64_t v67 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v67) {
      uint64_t v68 = v67;
    }
    else {
      uint64_t v68 = 0;
    }
    uint64_t v69 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v68 + 56);
    if (v69) {
      v69(a1, 0x1EE582D18, 0x1EE562718, v66, 0);
    }
    return 0;
  }
  return result;
}

uint64_t FigNetworkWirelessReportingReportCellStats(uint64_t a1, uint64_t a2)
{
  uint64_t result = 4294948045;
  if (a1 && a2)
  {
    FigCFDictionaryGetValue();
    uint64_t SInt64 = FigCFNumberGetSInt64();
    uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v5) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = 0;
    }
    uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v6 + 56);
    if (v7) {
      v7(a1, 0x1EE582D18, 0x1EE562518, SInt64, 0);
    }
    FigCFDictionaryGetValue();
    uint64_t v8 = FigCFNumberGetSInt64();
    uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v9) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
    CMTimeEpoch v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v10 + 56);
    if (v11) {
      v11(a1, 0x1EE582D18, 0x1EE562558, v8, 0);
    }
    FigCFDictionaryGetValue();
    uint64_t v12 = FigCFNumberGetSInt64();
    uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v13) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v14 + 56);
    if (v15) {
      v15(a1, 0x1EE582D18, 0x1EE562738, v12, 0);
    }
    FigCFDictionaryGetValue();
    uint64_t v16 = FigCFNumberGetSInt64();
    uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v17) {
      uint64_t v18 = v17;
    }
    else {
      uint64_t v18 = 0;
    }
    long long v19 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v18 + 56);
    if (v19) {
      v19(a1, 0x1EE582D18, 0x1EE562758, v16, 0);
    }
    FigCFDictionaryGetValue();
    uint64_t v20 = FigCFNumberGetSInt64();
    uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v21) {
      uint64_t v22 = v21;
    }
    else {
      uint64_t v22 = 0;
    }
    double v23 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v22 + 56);
    if (v23) {
      v23(a1, 0x1EE582D18, 0x1EE562778, v20, 0);
    }
    FigCFDictionaryGetValue();
    uint64_t v24 = FigCFNumberGetSInt64();
    uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v25) {
      uint64_t v26 = v25;
    }
    else {
      uint64_t v26 = 0;
    }
    unint64_t v27 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v26 + 56);
    if (v27) {
      v27(a1, 0x1EE582D18, 0x1EE562798, v24, 0);
    }
    return 0;
  }
  return result;
}

uint64_t FigNetworkWirelessReportingInterface_Init(uint64_t result)
{
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  return result;
}

void FigNetworkWirelessReportingInterface_Finalize(uint64_t a1)
{
  uint64_t v2 = (void *)MEMORY[0x199711A30]();
}

CFStringRef FigNetworkWirelessReportingInterface_CopyFormattingDescription(const void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, @"<FigNetworkWirelessReportingInterfaceRef %p>", a1);
}

CFStringRef FigNetworkWirelessReportingInterface_CopyDebugDescription(const void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, @"<FigNetworkWirelessReportingInterfaceRef %p>", a1);
}

void fnwri_globalNetworkWirelessReportingInterfaceInitOnce()
{
  v0 = (void *)MEMORY[0x199711A30]();
  uint64_t v5 = 0;
  int IsAudioAccessory = CelestialIsAudioAccessory();
  if (FigNetworkWirelessReportingInterfaceGetTypeID_sRegisterFigNetworkWirelessReportingInterfaceTypeOnce != -1) {
    dispatch_once_f(&FigNetworkWirelessReportingInterfaceGetTypeID_sRegisterFigNetworkWirelessReportingInterfaceTypeOnce, 0, (dispatch_function_t)registerFigNetworkWirelessReportingInterfaceType);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    uint64_t v3 = (void *)Instance;
    *(void *)(Instance + 16) = [[FigCoreWiFi alloc] initWithError:&v5];
    uint64_t v4 = v5;
    if (v5
      || !IsAudioAccessory
      && (v3[3] = [[FigCoreTelephony alloc] initWithError:&v5],
          (uint64_t v4 = v5) != 0))
    {
      [v4 code];
      CFRelease(v3);
    }
    else
    {
      gNetworkWirelessInterface = (uint64_t)v3;
    }
  }
  else
  {
    FigSignalErrorAt();
  }
}

uint64_t FigStreamingPlaylistEnsureMediaURL(uint64_t a1, const __CFURL *a2, const __CFURL *a3, CFTypeRef *a4, CFURLRef *a5)
{
  if (!a4 || *a4 || (CFURLRef v9 = StreamingPlaylistCreateCFURLFromCFString(a1, a2), (*a4 = v9) != 0))
  {
    if (!a5 || *a5) {
      return 0;
    }
    if (FigCFEqual())
    {
      CFTypeRef v10 = *a4;
      if (*a4) {
        CFTypeRef v10 = CFRetain(v10);
      }
      *a5 = (CFURLRef)v10;
      return 0;
    }
    CFURLRef CFURLFromCFString = StreamingPlaylistCreateCFURLFromCFString(a1, a3);
    *a5 = CFURLFromCFString;
    if (CFURLFromCFString) {
      return 0;
    }
  }

  return FigSignalErrorAt();
}

CFURLRef StreamingPlaylistCreateCFURLFromCFString(uint64_t a1, const __CFURL *a2)
{
  uint64_t CStringPtrAndBufferToFree = FigCFStringGetCStringPtrAndBufferToFree();
  if (CStringPtrAndBufferToFree)
  {
    uint64_t v4 = (const char *)CStringPtrAndBufferToFree;
    CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    size_t v6 = strlen(v4);
    CFURLRef v7 = CFURLCreateWithBytes(AllocatorForMedia, (const UInt8 *)v4, v6, 0x8000100u, a2);
  }
  else
  {
    CFURLRef v7 = 0;
  }
  free(0);
  return v7;
}

uint64_t FigStreamingPlaylistMakeUniqueAlternateIndex()
{
  return FigAtomicIncrement32();
}

uint64_t FigStreamPlaylistParseStringAndCreateProtocolVersionList(const __CFString *a1, CFTypeRef *a2)
{
  __endptr = 0;
  __stringp = 0;
  if (!a1) {
    return 0;
  }
  MaximumSizeOfFileSystemRepresentatiouint64_t n = CFStringGetMaximumSizeOfFileSystemRepresentation(a1);
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (Mutable)
  {
    CFURLRef v7 = Mutable;
    uint64_t v8 = (char *)malloc_type_calloc(MaximumSizeOfFileSystemRepresentation, 1uLL, 0x100004077774924uLL);
    if (v8 && CFStringGetFileSystemRepresentation(a1, v8, MaximumSizeOfFileSystemRepresentation - 1))
    {
      __stringp = v8;
      CFURLRef v9 = strsep(&__stringp, "/");
      if (v9)
      {
        while (1)
        {
          int valuePtr = 0;
          int valuePtr = strtol(v9, &__endptr, 0);
          if (valuePtr < 1 || __endptr == 0) {
            break;
          }
          int v11 = *__endptr;
          if (v11 != 47 && v11 != 0) {
            break;
          }
          CFNumberRef v13 = CFNumberCreate(v5, kCFNumberIntType, &valuePtr);
          if (!v13) {
            goto LABEL_21;
          }
          CFNumberRef v14 = v13;
          CFArrayAppendValue(v7, v13);
          CFRelease(v14);
          CFURLRef v9 = strsep(&__stringp, "/");
          if (!v9) {
            goto LABEL_17;
          }
        }
        uint64_t v15 = 4294955032;
      }
      else
      {
LABEL_17:
        uint64_t v15 = 0;
        *a2 = CFRetain(v7);
      }
    }
    else
    {
LABEL_21:
      uint64_t v15 = FigSignalErrorAt();
    }
    free(v8);
    CFRelease(v7);
    return v15;
  }

  return FigSignalErrorAt();
}

CFArrayRef FigStreamPlaylistInitializeIndexValidation(uint64_t a1)
{
  FigMediaPlaylistSetHasEndTag(a1, 0);
  FigMediaPlaylistSetPlaylistActiveDurationSecs(a1, 0.0);
  FigMediaPlaylistSetHasOnlyIFrames(a1, 0);
  for (CFIndex i = 0; ; ++i)
  {
    CFArrayRef MediaSegmentSpecifiers = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(a1);
    if (MediaSegmentSpecifiers) {
      CFArrayRef MediaSegmentSpecifiers = (const __CFArray *)CFArrayGetCount(MediaSegmentSpecifiers);
    }
    if (i >= (uint64_t)MediaSegmentSpecifiers) {
      break;
    }
    CFArrayRef v4 = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(a1);
    CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v4, i);
    FigMediaSegmentSpecifierSetIsReadInCurrent((uint64_t)ValueAtIndex, 0);
    FigMediaSegmentSpecifierSetChangedInCurrent((uint64_t)ValueAtIndex, 0);
  }
  for (CFIndex j = 0; ; ++j)
  {
    CFArrayRef MapSegmentSpecifiers = (const __CFArray *)FigMediaPlaylistGetMapSegmentSpecifiers(a1);
    if (MapSegmentSpecifiers) {
      CFArrayRef MapSegmentSpecifiers = (const __CFArray *)CFArrayGetCount(MapSegmentSpecifiers);
    }
    if (j >= (uint64_t)MapSegmentSpecifiers) {
      break;
    }
    CFArrayRef v8 = (const __CFArray *)FigMediaPlaylistGetMapSegmentSpecifiers(a1);
    CFURLRef v9 = CFArrayGetValueAtIndex(v8, j);
    FigMediaSegmentSpecifierSetIsReadInCurrent((uint64_t)v9, 0);
    FigMediaSegmentSpecifierSetChangedInCurrent((uint64_t)v9, 0);
  }
  for (CFIndex k = 0; ; ++k)
  {
    CFArrayRef result = (const __CFArray *)FigMediaPlaylistGetContentKeySpecifiers(a1);
    if (result) {
      CFArrayRef result = (const __CFArray *)CFArrayGetCount(result);
    }
    if (k >= (uint64_t)result) {
      break;
    }
    CFArrayRef ContentKeySpecifiers = (const __CFArray *)FigMediaPlaylistGetContentKeySpecifiers(a1);
    CFNumberRef v13 = CFArrayGetValueAtIndex(ContentKeySpecifiers, k);
    FigContentKeySpecifierSetIsReadInCurrent((uint64_t)v13, 0);
    FigContentKeySpecifierSetIsChangedInCurrent((uint64_t)v13, 0);
  }
  return result;
}

uint64_t FigStreamPlaylistParserMinBytesRequiredToVerifyM3UPlaylist()
{
  return 11;
}

BOOL FigStreamingPlaylistVerifyM3UPlaylist(CMBlockBufferRef theBuffer, unsigned char *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (a2) {
    *a2 = 0;
  }
  if (CMBlockBufferGetDataLength(theBuffer) < 0xB) {
    return 0;
  }
  CFAllocatorRef v5 = 0;
  if (CMBlockBufferAccessDataBytes(theBuffer, 0, 0xBuLL, temporaryBlock, &v5)) {
    return 0;
  }
  if (a2) {
    *a2 = 1;
  }
  return StreamingPlaylist_VerifyLeadingMagicNumber(v5, 0) == 0;
}

uint64_t StreamingPlaylist_VerifyLeadingMagicNumber(const char *a1, const char **a2)
{
  if (!a1)
  {
    FigSignalErrorAt();
    FigSignalErrorAt();
    return 4294954650;
  }
  uint64_t v3 = a1;
  if (!strncmp(a1, "﻿", 3uLL))
  {
    unsigned int v4 = v3[3];
    if ((v4 & 0x80000000) != 0) {
      int v5 = __maskrune(v4, 0x500uLL);
    }
    else {
      int v5 = *(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v4 + 60) & 0x500;
    }
    if (!v5) {
      v3 += 3;
    }
  }
  if (strncmp(v3, "#EXTM3U", 7uLL)) {
    return 4294954650;
  }
  unsigned int v8 = v3[7];
  uint64_t v7 = v3 + 7;
  unsigned int v6 = v8;
  if ((v8 & 0x80000000) != 0)
  {
    if (!__maskrune(v6, 0x500uLL)) {
      goto LABEL_15;
    }
    return 4294954650;
  }
  if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v6 + 60) & 0x500) != 0) {
    return 4294954650;
  }
LABEL_15:
  uint64_t result = 0;
  if (a2) {
    *a2 = v7;
  }
  return result;
}

uint64_t FigStreamPlaylistGetSelectionGroup(uint64_t a1, int a2, const __CFDictionary *a3, void *a4)
{
  return PlaylistGetSelectionGroupGuts(a1, a2, a3, 0, a4);
}

uint64_t PlaylistGetSelectionGroupGuts(uint64_t a1, int a2, const __CFDictionary *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  if (a1)
  {
    if (a2 > 1936684397)
    {
      if (a2 == 1986618469)
      {
        CFURLRef v9 = "video";
        uint64_t v10 = 4294954981;
      }
      else
      {
        if (a2 != 1936684398) {
          goto LABEL_14;
        }
        CFURLRef v9 = "audio";
        uint64_t v10 = 4294954982;
      }
    }
    else
    {
      if (a2 != 1668047728)
      {
        if (a2 == 1935832172)
        {
          CFURLRef v9 = "subtitle";
          uint64_t v10 = 4294954980;
          goto LABEL_11;
        }
LABEL_14:
        uint64_t v5 = 4294954654;
        _StreamPlaylistLogError(4294954654, 4294954985, a4, @"Illegal type %c%c%c%c in EXT-X-MEDIA", HIBYTE(a2), BYTE2(a2), BYTE1(a2), a2);
        return v5;
      }
      CFURLRef v9 = "closed caption";
      uint64_t v10 = 4294951058;
    }
LABEL_11:
    if (FigCFDictionaryGetCount())
    {
      uint64_t Value = CFDictionaryGetValue(a3, (const void *)v5);
      uint64_t v5 = 0;
      *a5 = Value;
    }
    else
    {
      uint64_t v13 = v5;
      uint64_t v5 = 4294954654;
      _StreamPlaylistLogError(4294954654, v10, a4, @"have %s %@ in STREAMINF without EXT-X-MEDIA %s group", v9, v13, v9);
    }
  }
  return v5;
}

uint64_t FigStreamPlaylistParseInProcess(OpaqueCMBlockBuffer *a1, const __CFURL *a2, const __CFURL *a3, _DWORD *a4, int a5, int a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, const __CFDictionary *a11, const __CFDictionary *a12, CFTypeRef *a13, CFTypeRef *a14)
{
  char *returnedPointerOut;
  __CFString *v601;
  __CFString *v602;
  __CFString *v603;
  long long blockBufferOut;
  uint64_t v605;
  CFArrayRef v606;
  uint64_t v607;
  CFRange v608;
  CFRange v609;
  CFRange v610;

  int v526 = a8;
  v541 = a4;
  v607 = *MEMORY[0x1E4F143B8];
  *(double *)&v594 = 0.0;
  dataPointerOut = 0;
  CFTypeRef v592 = 0;
  unint64_t v593 = 0;
  double BitRate = 0.0;
  v591 = 0;
  int v588 = -1;
  int v589 = -1;
  char v587 = 0;
  uint64_t v585 = 0;
  CFTypeRef v586 = 0;
  CFTypeRef v583 = 0;
  CFTypeRef v584 = 0;
  char v582 = 0;
  v580 = 0;
  CFURLRef v581 = 0;
  v578 = 0;
  CFURLRef v579 = 0;
  CFArrayRef v577 = 0;
  v576 = 0;
  long long v574 = 0u;
  long long v575 = 0u;
  long long v573 = 0u;
  uint64_t valuePtr = 0;
  __int16 v571 = 0;
  double v570 = 0.0;
  double v569 = 0.0;
  uint64_t v568 = -1;
  CFTypeRef v567 = 0;
  uint64_t v566 = 0;
  uint64_t v565 = 0;
  uint64_t v564 = 0;
  uint64_t v563 = 0;
  CMTimeValue value = 0;
  CFTypeRef v561 = 0;
  CFAllocatorRef structureAllocator = (CFAllocatorRef)*MEMORY[0x1E4F1CF80];
  CFSetRef theSet = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D548]);
  if (!theSet)
  {
    uint64_t matched = FigSignalErrorAt();
    CFTypeRef v542 = 0;
    CFTypeRef cf = 0;
    CFTypeRef v552 = 0;
    CFTypeRef v553 = 0;
    CFTypeRef v550 = 0;
    CFTypeRef v54 = 0;
    CFStringRef v22 = 0;
    int v535 = 0;
    goto LABEL_50;
  }
  anCFURLRef URL = a2;
  HIDWORD(v548) = a5;
  if ((readPref & 1) == 0)
  {
    fig_note_initialize_category_with_default_work_cf();
    fig_note_initialize_category_with_default_work_cf();
    readPref = 1;
  }
  if (a3) {
    CFURLRef v19 = a3;
  }
  else {
    CFURLRef v19 = a2;
  }
  v538 = v19;
  if (*__error())
  {
    int v20 = *__error();
    *__error() = 0;
  }
  else
  {
    int v20 = 0;
  }
  LOBYTE(temporaryBlock) = 0;
  *(void *)&CMBlockBufferRef blockBufferOut = 0;
  CMBlockBufferRef v599 = 0;
  *(double *)&returnedPointerOut = 0.0;
  size_t DataLength = CMBlockBufferGetDataLength(a1);
  CFStringRef v22 = (const __CFString *)DataLength;
  int v535 = v20;
  if (!DataLength)
  {
    CFTypeRef cf = 0;
    CFTypeRef v552 = 0;
    CFTypeRef v553 = 0;
    CFTypeRef v550 = 0;
    CFTypeRef v54 = 0;
    CFStringRef v55 = 0;
    CFStringRef v56 = 0;
    CFStringRef v57 = 0;
    uint64_t v58 = 0;
    CFArrayRef theArray = 0;
    CFTypeRef v545 = 0;
    CFTypeRef v556 = 0;
    uint64_t v548 = 0;
    CFTypeRef v542 = v599;
    uint64_t matched = 4294954656;
    goto LABEL_1302;
  }
  uint64_t appended = CMBlockBufferAccessDataBytes(a1, DataLength - 1, 1uLL, &temporaryBlock, &returnedPointerOut);
  if (!appended)
  {
    if (*(double *)&returnedPointerOut == 0.0)
    {
      uint64_t matched = 4294954656;
      goto LABEL_1190;
    }
    if (!*returnedPointerOut)
    {
LABEL_17:
      CFAllocatorRef v24 = structureAllocator;
      uint64_t matched = CMBlockBufferCreateContiguous(structureAllocator, a1, structureAllocator, 0, 0, 0, 0, &v599);
      goto LABEL_18;
    }
    LOBYTE(temporaryBlock) = 0;
    uint64_t appended = CMBlockBufferCreateWithBufferReference(structureAllocator, a1, 0, (size_t)v22, 0, (CMBlockBufferRef *)&blockBufferOut);
    if (!appended)
    {
      uint64_t appended = CMBlockBufferAppendMemoryBlock((CMBlockBufferRef)blockBufferOut, &temporaryBlock, 1uLL, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0], 0, 0, 1uLL, 0);
      if (!appended)
      {
        a1 = (OpaqueCMBlockBuffer *)blockBufferOut;
        goto LABEL_17;
      }
    }
  }
  uint64_t matched = appended;
LABEL_1190:
  CFAllocatorRef v24 = structureAllocator;
LABEL_18:
  CMBlockBufferRef v26 = v599;
  if ((void)blockBufferOut) {
    CFRelease((CFTypeRef)blockBufferOut);
  }
  CFTypeRef v542 = v26;
  if (matched) {
    goto LABEL_49;
  }
  uint64_t DataPointer = CMBlockBufferGetDataPointer(v26, 0, 0, 0, &dataPointerOut);
  if (DataPointer) {
    goto LABEL_44;
  }
  uint64_t v28 = dataPointerOut;
  size_t v29 = CMBlockBufferGetDataLength(v26);
  *(void *)&long long v574 = anURL;
  BYTE8(v575) = a6;
  *((void *)&v573 + 1) = a9;
  *(void *)&long long v575 = v28;
  BYTE9(v575) = a5;
  *((void *)&v574 + 1) = CFDictionaryCreateMutable(v24, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!*((void *)&v574 + 1)) {
    goto LABEL_1185;
  }
  if (a14 && *a14)
  {
    CFTypeRef v586 = CFRetain(*a14);
    FigMediaPlaylistGetMediaSegmentSpecifiers((uint64_t)v586);
    Lastuint64_t Value = FigCFArrayGetLastValue();
    if (LastValue) {
      DiscontinuityCFErrorDomain Domain = (void *)FigMediaSegmentSpecifierGetDiscontinuityDomain(LastValue);
    }
    else {
      DiscontinuityCFErrorDomain Domain = 0;
    }
    for (CFIndex i = 0; ; ++i)
    {
      CFArrayRef DateRangeSpecifiers = (const __CFArray *)FigMediaPlaylistGetDateRangeSpecifiers((uint64_t)v586);
      if (DateRangeSpecifiers) {
        CFArrayRef DateRangeSpecifiers = (const __CFArray *)CFArrayGetCount(DateRangeSpecifiers);
      }
      if (i >= (uint64_t)DateRangeSpecifiers) {
        break;
      }
      CFArrayRef v47 = (const __CFArray *)FigMediaPlaylistGetDateRangeSpecifiers((uint64_t)v586);
      CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v47, i);
      FigDateRangeSpecifierSetTempDuration((uint64_t)ValueAtIndex, -1.0);
      FigDateRangeSpecifierSetTempPlannedDuration((uint64_t)ValueAtIndex, -1.0);
      FigDateRangeSpecifierSetReadInCurrent((uint64_t)ValueAtIndex, 0);
      FigDateRangeSpecifierSetTempEndDate((uint64_t)ValueAtIndex, 0);
    }
    FigMediaPlaylistSetRenditionReportSpecifiers((uint64_t)v586, 0);
    if (FigMediaPlaylistGetPreloadHint((uint64_t)v586))
    {
      uint64_t PreloadHint = FigMediaPlaylistGetPreloadHint((uint64_t)v586);
      FigMediaSegmentSpecifierSetIsReadInCurrent(PreloadHint, 0);
    }
    if (FigMediaPlaylistGetPreloadMapHint((uint64_t)v586))
    {
      uint64_t PreloadMapHint = FigMediaPlaylistGetPreloadMapHint((uint64_t)v586);
      FigMediaSegmentSpecifierSetIsReadInCurrent(PreloadMapHint, 0);
    }
    double PartHoldBackDuration = FigMediaPlaylistGetPartHoldBackDuration((uint64_t)v586);
    HoldBackDuratiouint64_t n = FigMediaPlaylistGetHoldBackDuration((uint64_t)v586);
    uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
    uint64_t DataPointer = FigMultivariantPlaylistCreateEmpty(AllocatorForMedia, &v561);
    if (DataPointer) {
      goto LABEL_44;
    }
  }
  else
  {
    uint64_t v31 = FigGetAllocatorForMedia();
    uint64_t DataPointer = FigMediaPlaylistCreateEmpty(v31, &v586);
    if (DataPointer)
    {
LABEL_44:
      uint64_t matched = DataPointer;
LABEL_49:
      CFTypeRef cf = 0;
      CFTypeRef v552 = 0;
      CFTypeRef v553 = 0;
      CFTypeRef v550 = 0;
      CFTypeRef v54 = 0;
      CFStringRef v22 = 0;
LABEL_50:
      CFStringRef v55 = 0;
      CFStringRef v56 = 0;
      CFStringRef v57 = 0;
      uint64_t v58 = 0;
      CFArrayRef theArray = 0;
      CFTypeRef v545 = 0;
LABEL_51:
      CFTypeRef v556 = 0;
      uint64_t v548 = 0;
      goto LABEL_1302;
    }
    FigMediaPlaylistSetPlaylistType((uint64_t)v586, 0);
    FigMediaPlaylistSetHasDiscontinuitySequence((uint64_t)v586, 0);
    FigMediaPlaylistSetDoesServerSupportsBlockingReload((uint64_t)v586, 0);
    HoldBackDuratiouint64_t n = 0.0;
    FigMediaPlaylistSetSkipDeltaBoundary((uint64_t)v586, 0.0);
    if (a13 && *a13)
    {
      CFTypeRef v561 = CFRetain(*a13);
      uint64_t v33 = (uint64_t)v586;
      char HasIndependentSegments = FigMultivariantPlaylistHasIndependentSegments((uint64_t)v561);
      FigMediaPlaylistSetHasIndependentSegments(v33, HasIndependentSegments);
      uint64_t v35 = (uint64_t)v586;
      StartTimeuint64_t Value = FigMultivariantPlaylistGetStartTimeValue((uint64_t)v561);
      FigMediaPlaylistSetStartTimeValue(v35, StartTimeValue);
      uint64_t v37 = (uint64_t)v586;
      char IsStartTimePrecise = FigMultivariantPlaylistIsStartTimePrecise((uint64_t)v561);
      FigMediaPlaylistSetIsStartTimePrecise(v37, IsStartTimePrecise);
      uint64_t v39 = (uint64_t)v586;
      char HasStartTime = FigMultivariantPlaylistHasStartTime((uint64_t)v561);
      FigMediaPlaylistSetHasStartTime(v39, HasStartTime);
      uint64_t v41 = (uint64_t)v586;
      Versiouint64_t n = FigMultivariantPlaylistGetVersion((uint64_t)v561);
      FigMediaPlaylistSetVersion(v41, Version);
      DiscontinuityCFErrorDomain Domain = 0;
      double PartHoldBackDuration = 0.0;
    }
    else
    {
      uint64_t v44 = FigGetAllocatorForMedia();
      uint64_t DataPointer = FigMultivariantPlaylistCreateEmpty(v44, &v561);
      DiscontinuityCFErrorDomain Domain = 0;
      double PartHoldBackDuration = 0.0;
      if (DataPointer) {
        goto LABEL_44;
      }
    }
  }
  FigMediaPlaylistSetHasPartTag((uint64_t)v586, 0);
  FigMediaPlaylistSetDateStampCount((uint64_t)v586, 0);
  uint64_t v52 = FigGetAllocatorForMedia();
  uint64_t DataPointer = FigMediaSegmentSpecifierCreateEmpty(v52, (uint64_t *)&v584);
  if (DataPointer) {
    goto LABEL_44;
  }
  FigMediaSegmentSpecifierSetTimeInSeconds((uint64_t)v584, 0.0);
  FigStreamPlaylistInitializeIndexValidation((uint64_t)v586);
  uint64_t v53 = StreamingPlaylist_VerifyLeadingMagicNumber(v28, (const char **)&v594);
  uint64_t matched = v53;
  if (a6 == 1 && v53)
  {
    _StreamPlaylistLogError(v53, 4294955027, (uint64_t)&v573, @"Missing #EXTM3U");
    goto LABEL_49;
  }
  if (v53) {
    goto LABEL_49;
  }
  uint64_t v59 = v594;
  uint64_t v60 = &v59[strcspn(v594, "\r\n")];
  size_t v61 = strspn(v60, "\r\n");
  uint64_t v62 = (uint64_t)v586;
  unsigned int TargetDuration = FigMediaPlaylistGetTargetDuration((uint64_t)v586);
  FigMediaPlaylistSetAvgSegmentDuration(v62, (double)TargetDuration);
  FigMediaPlaylistSetMaxSegmentDuration((uint64_t)v586, 0.0);
  FigMediaPlaylistSetParseDate((uint64_t)v586, 0);
  CFAllocatorRef v64 = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  CFDateRef v66 = CFDateCreate(v64, Current);
  FigMediaPlaylistSetParseDate((uint64_t)v586, v66);
  if (v66) {
    CFRelease(v66);
  }
  if (!FigMediaPlaylistGetParseDate((uint64_t)v586))
  {
LABEL_1185:
    uint64_t DataPointer = FigSignalErrorAt();
    goto LABEL_44;
  }
  CFTypeRef v539 = 0;
  uint64_t v528 = 0;
  v529 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v552 = 0;
  CFTypeRef v553 = 0;
  CFTypeRef v550 = 0;
  CFTypeRef v549 = 0;
  int v519 = 0;
  LODWORD(v533) = 0;
  int v536 = 0;
  LOBYTE(v525) = 0;
  uint64_t NextSegment = 0;
  int v511 = 0;
  int v512 = 0;
  int v499 = 0;
  char v500 = 0;
  int v521 = 0;
  uint64_t v515 = 0;
  uint64_t v516 = 0;
  uint64_t v507 = 0;
  uint64_t v508 = 0;
  uint64_t v502 = 0;
  uint64_t v522 = 0;
  uint64_t v523 = 0;
  uint64_t v513 = 0;
  uint64_t v514 = 0;
  memset(v518, 0, sizeof(v518));
  uint64_t v505 = 0;
  uint64_t v506 = 0;
  int v524 = 0;
  *(double *)&key = 0.0;
  LODWORD(v530) = 0;
  CFArrayRef theArray = 0;
  CFTypeRef v540 = 0;
  LOBYTE(v534) = 0;
  LODWORD(v546) = 0;
  LODWORD(v544) = 0;
  CFTypeRef v545 = 0;
  int v503 = 0;
  int v501 = 0;
  LOBYTE(v548) = 0;
  unint64_t v68 = (unint64_t)&v60[v61];
  CFStringRef v22 = 0;
  CFTypeRef v556 = &v28[v29];
  double v69 = -1.0;
  double v70 = 0.0;
  double v71 = 0.0;
  double v72 = 0.0;
  double v73 = 0.0;
  int v527 = -2;
  int v520 = 1;
  LODWORD(v531) = 1;
  LODWORD(v532) = -1;
  while (1)
  {
    if (v68 >= (unint64_t)v556 || !*(unsigned char *)v68)
    {
      CFArrayRef PartialSegments = (const __CFArray *)FigMediaSegmentSpecifierGetPartialSegments((uint64_t)v584);
      CFStringRef v510 = v22;
      if (PartialSegments)
      {
        CFIndex Count = CFArrayGetCount(PartialSegments);
        char v311 = v548;
        char v312 = BYTE4(v522);
        uint64_t v313 = v523;
        if (Count < 1) {
          goto LABEL_953;
        }
        LOBYTE(returnedPointerOut) = 0;
        LOBYTE(blockBufferOut) = 0;
        FigMediaSegmentSpecifierSetIsDiscontinuityDomain((uint64_t)v584, (uint64_t)DiscontinuityDomain);
        CFTypeRef v314 = v592;
        FigMediaSegmentSpecifierSetContentKeySpecifier((uint64_t)v584, v592);
        FigMediaSegmentSpecifierSetMapSegmentSpecifier((uint64_t)v584, v591);
        uint64_t v315 = v593;
        FigMediaSegmentSpecifierSetMediaSequence((uint64_t)v584, v593);
        uint64_t v316 = MergeLeadingPartialMediaEntries((uint64_t)v586, (uint64_t)v584, (uint64_t)&v573, (char *)&returnedPointerOut, (char *)&blockBufferOut, v526);
        if (!a5)
        {
          uint64_t matched = v316;
          if (v316) {
            goto LABEL_1388;
          }
        }
        if (v525 | blockBufferOut) {
          BOOL v317 = 1;
        }
        else {
          BOOL v317 = returnedPointerOut == 0;
        }
        char v318 = v317;
        LOBYTE(v525) = v318;
        if (!(_BYTE)returnedPointerOut)
        {
          uint64_t v319 = (uint64_t)v586;
          uint64_t v320 = v591;
          CFTypeRef v321 = v583;
          char IsDiscontinuity = FigMediaSegmentSpecifierIsDiscontinuity((uint64_t)v584);
          MediaFileEntry = (const void *)CreateMediaFileEntry(v319, 0, 0, v314, v320, v315, (uint64_t)DiscontinuityDomain, 0, 0.0, v72, 0, v321, v545, IsDiscontinuity, (char)v534);
          FigMediaSegmentSpecifierSetIsFragment((uint64_t)MediaFileEntry, 1);
          FigStreamPlaylistTransferPartialEntryQueue((uint64_t)v584, (uint64_t)MediaFileEntry);
          FigMediaPlaylistAddMediaSegmentSpecifier((uint64_t)v586, MediaFileEntry);
          if (MediaFileEntry) {
            CFRelease(MediaFileEntry);
          }
          if (v545) {
            CFRelease(v545);
          }
          CFTypeRef v545 = 0;
        }
        FigMediaPlaylistGetMediaSegmentSpecifiers((uint64_t)v586);
        uint64_t v324 = FigCFArrayGetLastValue();
        CFArrayRef v325 = (const __CFArray *)FigMediaSegmentSpecifierGetPartialSegments(v324);
        CFIndex v326 = 0;
        if (v325) {
          goto LABEL_948;
        }
LABEL_949:
        for (CFIndex j = 0; v326 < j; CFIndex j = CFArrayGetCount(v325))
        {
          uint64_t v327 = CFArrayGetValueAtIndex(v325, v326);
          uint64_t v328 = (uint64_t)v586;
          double PlaylistActiveDurationSecs = FigMediaPlaylistGetPlaylistActiveDurationSecs((uint64_t)v586);
          TimeIndouble Seconds = FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)v327);
          FigMediaPlaylistSetPlaylistActiveDurationSecs(v328, PlaylistActiveDurationSecs + TimeInSeconds);
          ++v326;
          if (!v325) {
            goto LABEL_949;
          }
LABEL_948:
          ;
        }
        CFStringRef v22 = v510;
      }
      char v311 = v548;
      char v312 = BYTE4(v522);
      uint64_t v313 = v523;
LABEL_953:
      if (v313 >= 1) {
        FigMediaPlaylistSetAvgSegmentDuration((uint64_t)v586, v71 / (double)v313);
      }
      *(void *)&long long v575 = 0;
      HIDWORD(v548) = (v536 | HIDWORD(v516) | v518[0] | v515 | v524) != 0;
      LODWORD(v548) = 1;
      if (!(_BYTE)v525)
      {
        uint64_t v332 = a14;
        if (v521 || v522 || *(_OWORD *)&v518[1] != 0 || v516) {
          goto LABEL_969;
        }
        LODWORD(v548) = 1;
        if (!FigMediaPlaylistHasPartTag((uint64_t)v586) && !v513)
        {
          uint64_t v332 = a14;
          if (v311 || v312) {
            goto LABEL_969;
          }
          LODWORD(v548) = 1;
          if (!FigMediaPlaylistHasEndTag((uint64_t)v586))
          {
            uint64_t v332 = a14;
            if (!v507)
            {
              int HasOnlyIFrames = FigMediaPlaylistHasOnlyIFrames((uint64_t)v586);
              uint64_t v332 = a14;
              LODWORD(v548) = (HasOnlyIFrames | HIDWORD(v514) | HIDWORD(v506) | v505 | v508 | HIDWORD(v505) | v506) != 0;
            }
LABEL_969:
            BOOL v103 = v332 == 0;
            char v334 = BYTE4(v548) ^ 1;
            if (v103) {
              char v334 = 1;
            }
            if ((v334 & 1) == 0 && *a14) {
              _StreamPlaylistLogError(0, 4294951065, (uint64_t)&v573, @"Multivariant playlist can only be the top-level playlist");
            }
            if (v536 && (_BYTE)v525)
            {
              CFStringRef v335 = @"Alternates found in a media playlist";
LABEL_978:
              uint64_t v336 = 4294951066;
LABEL_1020:
              _StreamPlaylistLogError(0, v336, (uint64_t)&v573, v335, p_blockBufferOut);
              goto LABEL_1021;
            }
            if (v536)
            {
              if (v521) {
                _StreamPlaylistLogError(0, 4294951065, (uint64_t)&v573, @"%s can only be in media playlist", "#EXT-X-BYTERANGE");
              }
              if (v513) {
                _StreamPlaylistLogError(0, 4294951065, (uint64_t)&v573, @"%s can only be in media playlist", "#EXT-X-TARGETDURATION");
              }
              if (v311) {
                _StreamPlaylistLogError(0, 4294951065, (uint64_t)&v573, @"%s can only be in media playlist", "#EXT-X-MEDIA-SEQUENCE");
              }
              if (v518[2]) {
                _StreamPlaylistLogError(0, 4294951065, (uint64_t)&v573, @"%s can only be in media playlist", "#EXT-X-PROGRAM-DATE-TIME");
              }
              if (v507) {
                _StreamPlaylistLogError(0, 4294951065, (uint64_t)&v573, @"%s can only be in media playlist", "#EXT-X-PLAYLIST-TYPE");
              }
              if (FigMediaPlaylistHasEndTag((uint64_t)v586)) {
                _StreamPlaylistLogError(0, 4294951065, (uint64_t)&v573, @"%s can only be in media playlist", "#EXT-X-ENDLIST");
              }
              if (v522) {
                _StreamPlaylistLogError(0, 4294951065, (uint64_t)&v573, @"%s can only be in media playlist", "#EXT-X-DISCONTINUITY");
              }
              if (v312) {
                _StreamPlaylistLogError(0, 4294951065, (uint64_t)&v573, @"%s can only be in media playlist", "#EXT-X-DISCONTINUITY-SEQUENCE");
              }
              if (FigMediaPlaylistHasOnlyIFrames((uint64_t)v586)) {
                _StreamPlaylistLogError(0, 4294951065, (uint64_t)&v573, @"%s can only be in media playlist", "#EXT-X-I-FRAMES-ONLY");
              }
              if (v518[3]) {
                _StreamPlaylistLogError(0, 4294951065, (uint64_t)&v573, @"%s can only be in media playlist", "#EXT-X-MAP");
              }
              if (v505) {
                _StreamPlaylistLogError(0, 4294951065, (uint64_t)&v573, @"%s can only be in media playlist", "#EXT-X-DATERANGE");
              }
              if (v518[4]) {
                _StreamPlaylistLogError(0, 4294951065, (uint64_t)&v573, @"%s can only be in media playlist", "#EXT-X-KEY");
              }
              if (v518[1]) {
                _StreamPlaylistLogError(0, 4294951065, (uint64_t)&v573, @"%s can only be in media playlist", "#EXT-X-GAP");
              }
              if (v516) {
                _StreamPlaylistLogError(0, 4294951065, (uint64_t)&v573, @"%s can only be in media playlist", "#EXT-X-BITRATE");
              }
              if (FigMediaPlaylistHasPartTag((uint64_t)v586)) {
                _StreamPlaylistLogError(0, 4294951065, (uint64_t)&v573, @"%s can only be in media playlist", "#EXT-X-PART");
              }
              if (HIDWORD(v514)) {
                _StreamPlaylistLogError(0, 4294951065, (uint64_t)&v573, @"%s can only be in media playlist", "#EXT-X-PART-INF");
              }
              if (HIDWORD(v505)) {
                _StreamPlaylistLogError(0, 4294951065, (uint64_t)&v573, @"%s can only be in media playlist", "#EXT-X-PRELOAD-HINT");
              }
              if (v506) {
                _StreamPlaylistLogError(0, 4294951065, (uint64_t)&v573, @"%s can only be in media playlist", "#EXT-X-RENDITION-REPORT");
              }
              if (HIDWORD(v506)) {
                _StreamPlaylistLogError(0, 4294951065, (uint64_t)&v573, @"%s can only be in media playlist", "#EXT-X-SERVER-CONTROL");
              }
              if (v508)
              {
                p_CMBlockBufferRef blockBufferOut = "#EXT-X-SKIP";
                CFStringRef v335 = @"%s can only be in media playlist";
                uint64_t v336 = 4294951065;
                goto LABEL_1020;
              }
            }
            else if ((_BYTE)v525)
            {
              if (HIDWORD(v516)) {
                _StreamPlaylistLogError(0, 4294951066, (uint64_t)&v573, @"%s can only be in multivariant playlist", "#EXT-X-MEDIA");
              }
              if (v518[0]) {
                _StreamPlaylistLogError(0, 4294951066, (uint64_t)&v573, @"%s can only be in multivariant playlist", "#EXT-X-SESSION-DATA");
              }
              if (v515) {
                _StreamPlaylistLogError(0, 4294951066, (uint64_t)&v573, @"%s can only be in multivariant playlist", "#EXT-X-SESSION-KEY");
              }
              if (v524)
              {
                p_CMBlockBufferRef blockBufferOut = "#EXT-X-CONTENT-STEERING";
                CFStringRef v335 = @"%s can only be in multivariant playlist";
                goto LABEL_978;
              }
            }
LABEL_1021:
            if (BYTE4(v515) && (int)v573 < 5
              || HIDWORD(v507) && (int)v573 < 12
              || v582 && (int)v573 < 11
              || v508 && (int)v573 < 9
              || BYTE10(v575) && (int)v573 < 8
              || (!v519 ? (BOOL v337 = v502 == 0) : (BOOL v337 = 1),
                  v337 ? (BOOL v338 = BYTE4(v502) == 0) : (BOOL v338 = 0),
                  !v338 && (int)v573 < 6
               || v521 | v519 && (int)v573 < 4
               || BYTE4(v508) && (int)v573 < 3
               || v501 && (int)v573 < 13
               || v500 && (int)v573 <= 1))
            {
              uint64_t matched = 4294954654;
              _StreamPlaylistLogError(4294954654, 4294954986, (uint64_t)&v573, @"incorrect version number for feature", p_blockBufferOut);
              if (!a5) {
                goto LABEL_1192;
              }
            }
            if (FigMediaPlaylistHasSkipDeltaBoundary((uint64_t)v586))
            {
              double SkipDeltaBoundary = FigMediaPlaylistGetSkipDeltaBoundary((uint64_t)v586);
              if (SkipDeltaBoundary < (double)(6 * FigMediaPlaylistGetTargetDuration((uint64_t)v586)))
              {
                uint64_t matched = 4294954654;
                _StreamPlaylistLogError(4294954654, 4294949662, (uint64_t)&v573, @"CAN-SKIP-UNTIL too small");
                if (!a5) {
                  goto LABEL_1192;
                }
              }
            }
            if (FigMediaPlaylistHasSkipDeltaBoundary((uint64_t)v586))
            {
              if (NextSegment)
              {
                double v340 = 0.0;
                do
                {
                  double v340 = v340 + FigMediaSegmentSpecifierGetTimeInSeconds(NextSegment);
                  uint64_t NextSegment = FigMediaSegmentSpecifierGetNextSegment(NextSegment);
                }
                while (NextSegment);
                if (v340 < FigMediaPlaylistGetSkipDeltaBoundary((uint64_t)v586))
                {
                  uint64_t matched = 4294954654;
                  _StreamPlaylistLogError(4294954654, 4294949661, (uint64_t)&v573, @"EXT-X-SKIP too close to live edge");
                  if (!a5)
                  {
LABEL_1192:
                    CFStringRef v55 = 0;
                    CFStringRef v56 = 0;
                    CFStringRef v57 = 0;
                    uint64_t v58 = 0;
                    CFTypeRef v556 = 0;
                    goto LABEL_1301;
                  }
                }
              }
            }
            if (HIDWORD(v514) == 1)
            {
              double PartTargetDuration = FigMediaPlaylistGetPartTargetDuration((uint64_t)v586);
              CFTypeRef v54 = v549;
              if (PartTargetDuration > (double)FigMediaPlaylistGetTargetDuration((uint64_t)v586))
              {
                double v342 = FigMediaPlaylistGetPartTargetDuration((uint64_t)v586);
                uint64_t matched = 4294954654;
                _StreamPlaylistLogError(4294954654, 4294949662, (uint64_t)&v573, @"%s Partial Segment target duration %f exceeds %s", "PART-TARGET", *(void *)&v342, "#EXT-X-TARGETDURATION");
                if (!a5) {
                  goto LABEL_1380;
                }
              }
              double v343 = v570;
              if (v343 > FigMediaPlaylistGetPartTargetDuration((uint64_t)v586))
              {
                uint64_t matched = 4294954654;
                _StreamPlaylistLogError(4294954654, 4294949662, (uint64_t)&v573, @"%s Partial Segment duration %f exceeds %s", "#EXT-X-PART", *(void *)&v343, "PART-TARGET");
                if (!a5) {
                  goto LABEL_1380;
                }
              }
              if (FigMediaPlaylistHasPartHoldBackDuration((uint64_t)v586)) {
                goto LABEL_1067;
              }
              uint64_t matched = 4294954650;
              _StreamPlaylistLogError(4294954650, 4294955032, (uint64_t)&v573, @"%s required with %s", "PART-HOLD-BACK", "#EXT-X-PART-INF");
            }
            else
            {
              CFTypeRef v54 = v549;
              if (!FigMediaPlaylistHasPartTag((uint64_t)v586)) {
                goto LABEL_1067;
              }
              uint64_t matched = 4294954654;
              _StreamPlaylistLogError(4294954654, 4294955024, (uint64_t)&v573, @"Partial segments, but no part target duration", p_blockBufferOut, v493);
            }
            if (!a5)
            {
LABEL_1380:
              CFStringRef v55 = 0;
              CFStringRef v56 = 0;
              CFStringRef v57 = 0;
              uint64_t v58 = 0;
              CFTypeRef v556 = 0;
              goto LABEL_1302;
            }
LABEL_1067:
            if (FigMediaPlaylistGetPlaylistType((uint64_t)v586) == 2
              && !FigMediaPlaylistHasEndTag((uint64_t)v586))
            {
              uint64_t matched = 4294954654;
              _StreamPlaylistLogError(4294954654, 4294954983, (uint64_t)&v573, @"VOD playlist has no ENDLIST tag");
              if (!a5) {
                goto LABEL_1380;
              }
            }
            if (a14)
            {
              if (*a14)
              {
                if (!v311)
                {
                  if (FigMediaPlaylistHasMediaSequence((uint64_t)v586))
                  {
                    uint64_t matched = 4294954654;
                    _StreamPlaylistLogError(4294954654, 4294955026, (uint64_t)&v573, @"#EXT-X-MEDIA-SEQUENCE suddenly disappeared");
                    if (!a5) {
                      goto LABEL_1380;
                    }
                  }
                }
              }
              FigMediaPlaylistSetHasMediaSequence((uint64_t)v586, v311);
              if (*a14)
              {
                if (!v312)
                {
                  if (FigMediaPlaylistHasDiscontinuitySequence((uint64_t)v586))
                  {
                    uint64_t matched = 4294954654;
                    _StreamPlaylistLogError(4294954654, 4294951061, (uint64_t)&v573, @"%s is no longer in Media Playlist", "#EXT-X-DISCONTINUITY-SEQUENCE");
                    if (!a5) {
                      goto LABEL_1380;
                    }
                  }
                }
              }
            }
            else
            {
              FigMediaPlaylistSetHasMediaSequence((uint64_t)v586, v311);
            }
            FigMediaPlaylistSetHasDiscontinuitySequence((uint64_t)v586, v312);
            if (FigMediaPlaylistGetPlaylistType((uint64_t)v586) == 1
              && FigMediaPlaylistHasEndTag((uint64_t)v586))
            {
              FigMediaPlaylistSetPlaylistType((uint64_t)v586, 2);
            }
            if (!(FigMediaPlaylistGetTargetDuration((uint64_t)v586) | v536))
            {
              if (v311 == 1)
              {
                uint64_t matched = 4294954654;
                _StreamPlaylistLogError(4294954654, 4294955024, (uint64_t)&v573, @"Media sequence, but no target duration", p_blockBufferOut);
              }
              else
              {
                uint64_t matched = 4294954650;
                _StreamPlaylistLogError(4294954650, 4294954985, (uint64_t)&v573, @"Stream type unrecognized", p_blockBufferOut);
              }
              if (!a5) {
                goto LABEL_1380;
              }
            }
            if (v536)
            {
              if (HIDWORD(v513))
              {
                if (v512)
                {
                  uint64_t matched = 4294954654;
                  _StreamPlaylistLogError(4294954654, 4294955032, (uint64_t)&v573, @"Some stream definitions have %s groups while some have opted out", "CLOSED-CAPTIONS");
                  if (!a5) {
                    goto LABEL_1380;
                  }
                }
              }
            }
            if (FigMediaPlaylistHasHoldBackDuration((uint64_t)v586))
            {
              double v344 = FigMediaPlaylistGetHoldBackDuration((uint64_t)v586);
              if (v344 < (double)(3 * FigMediaPlaylistGetTargetDuration((uint64_t)v586)))
              {
                uint64_t matched = 4294954650;
                _StreamPlaylistLogError(4294954650, 4294955032, (uint64_t)&v573, @"%s less than 3 * target-duration", "HOLD-BACK");
                if (!a5) {
                  goto LABEL_1380;
                }
              }
            }
            if (FigMediaPlaylistGetPartTargetDuration((uint64_t)v586) > 0.0)
            {
              double v345 = FigMediaPlaylistGetPartHoldBackDuration((uint64_t)v586);
              if (v345 < FigMediaPlaylistGetPartTargetDuration((uint64_t)v586))
              {
                if (FigMediaPlaylistDoesServerSupportsBlockingReload((uint64_t)v586))
                {
                  uint64_t matched = 4294954650;
                  _StreamPlaylistLogError(4294954650, 4294955032, (uint64_t)&v573, @"%s less than %s", "PART-HOLD-BACK", "PART-TARGET");
                  if (!a5) {
                    goto LABEL_1380;
                  }
                }
              }
            }
            FigMediaPlaylistSetHasIndependentParts((uint64_t)v586, v514);
            if (FigMediaPlaylistGetPreloadHint((uint64_t)v586))
            {
              uint64_t v346 = FigMediaPlaylistGetPreloadHint((uint64_t)v586);
              if (FigMediaSegmentSpecifierIsReadInCurrent(v346))
              {
                FigMediaPlaylistGetMediaSegmentSpecifiers((uint64_t)v586);
                uint64_t v347 = FigCFArrayGetLastValue();
                if (v347)
                {
                  FigMediaSegmentSpecifierGetPartialSegments(v347);
                  uint64_t v348 = FigCFArrayGetLastValue();
                  if (v348)
                  {
                    uint64_t v349 = v348;
                    FigMediaSegmentSpecifierGetURLString(v348);
                    CFStringRef v350 = v22;
                    uint64_t v351 = FigMediaPlaylistGetPreloadHint((uint64_t)v586);
                    FigMediaSegmentSpecifierGetURLString(v351);
                    if (FigCFEqual())
                    {
                      uint64_t v352 = FigMediaPlaylistGetPreloadHint((uint64_t)v586);
                      uint64_t StartOffset = FigMediaSegmentSpecifierGetStartOffset(v352);
                      uint64_t v354 = FigMediaSegmentSpecifierGetStartOffset(v349);
                      BOOL v101 = StartOffset < FigMediaSegmentSpecifierGetBytesToRead(v349) + v354;
                      CFStringRef v22 = v350;
                      if (v101)
                      {
                        uint64_t v355 = FigMediaPlaylistGetPreloadHint((uint64_t)v586);
                        if (FigMediaSegmentSpecifierGetBytesToRead(v355) >= 1)
                        {
                          uint64_t v356 = FigMediaPlaylistGetPreloadHint((uint64_t)v586);
                          uint64_t v357 = FigMediaPlaylistGetPreloadHint((uint64_t)v586);
                          uint64_t v358 = FigMediaSegmentSpecifierGetBytesToRead(v357);
                          uint64_t v359 = FigMediaSegmentSpecifierGetStartOffset(v349);
                          uint64_t v360 = FigMediaSegmentSpecifierGetBytesToRead(v349);
                          uint64_t v361 = FigMediaPlaylistGetPreloadHint((uint64_t)v586);
                          uint64_t v362 = FigMediaSegmentSpecifierGetStartOffset(v361);
                          uint64_t v363 = v359 + v360;
                          CFTypeRef v54 = v549;
                          FigMediaSegmentSpecifierSetBytesToRead(v356, v358 - v363 + v362);
                        }
                        uint64_t v364 = FigMediaPlaylistGetPreloadHint((uint64_t)v586);
                        uint64_t v365 = FigMediaSegmentSpecifierGetStartOffset(v349);
                        uint64_t v366 = FigMediaSegmentSpecifierGetBytesToRead(v349);
                        FigMediaSegmentSpecifierSetStartOffset(v364, v366 + v365);
                        CFStringRef v22 = v350;
                      }
                    }
                  }
                }
              }
            }
            _DWORD *v541 = 0;
            if (!v536)
            {
              CFTypeRef v556 = 0;
              goto LABEL_1142;
            }
            _DWORD *v541 = 1;
            FigMultivariantPlaylistGetClosedCaptionGroups((uint64_t)v561);
            if (FigCFDictionaryGetCount()
              || (FigMultivariantPlaylistGetSubtitleGroups((uint64_t)v561), FigCFDictionaryGetCount()))
            {
              int v367 = 0;
            }
            else
            {
              CFArrayRef v368 = theArray;
              int v367 = 0;
              char v372 = 1;
              if (!HIBYTE(v571) || v512) {
                goto LABEL_1119;
              }
              uint64_t v373 = PlaylistAddCharacteristicsForClosedCaptions(&v577);
              if (v373) {
                goto LABEL_1379;
              }
              CFArrayRef v411 = v577;
              uint64_t matched = PlaylistAddMediaGroup((uint64_t)v561, 1668047728, @"CC", 0, 0, 0, 0, 0, 0.0, 1, 1, 0, 1, v577, 0, @"UnspecifiedClosedCaptionChannel", 0, 0, &valuePtr);
              if (v411)
              {
                CFRelease(v411);
                CFArrayRef v577 = 0;
              }
              if (matched) {
                goto LABEL_1380;
              }
              int v367 = 1;
            }
            CFArrayRef v368 = theArray;
            CFArrayRef MediaSelectionArray = (const __CFArray *)FigMultivariantPlaylistGetMediaSelectionArray((uint64_t)v561);
            CFStringForOSTypeuint64_t Value = (const void *)FigGetCFStringForOSTypeValue();
            MediaSelectionOptionArrayByMediaint Type = (const __CFArray *)FindMediaSelectionOptionArrayByMediaType(MediaSelectionArray, CFStringForOSTypeValue);
            if (MediaSelectionOptionArrayByMediaType && CFArrayGetCount(MediaSelectionOptionArrayByMediaType))
            {
              char v372 = 1;
              goto LABEL_1119;
            }
            uint64_t v373 = PlaylistAddMediaGroup((uint64_t)v561, 1936684398, @"AUDIO", 0, 0, 0, 0, 0, 0.0, 1, 1, 0, 0, 0, 0, 0, 0, 0, &valuePtr);
            char v372 = 0;
            if (!v373)
            {
LABEL_1119:
              unint64_t v374 = 0;
              unint64_t v375 = 0;
              CFTypeRef v556 = 0;
              CFIndex v376 = 0;
              CFArrayRef theArray = v368;
              while (1)
              {
                CFArrayRef Alternates = (const __CFArray *)FigMultivariantPlaylistGetAlternates((uint64_t)v561);
                if (Alternates) {
                  CFArrayRef Alternates = (const __CFArray *)CFArrayGetCount(Alternates);
                }
                if (v376 >= (uint64_t)Alternates) {
                  break;
                }
                CFArrayRef v378 = (const __CFArray *)FigMultivariantPlaylistGetAlternates((uint64_t)v561);
                v379 = CFArrayGetValueAtIndex(v378, v376);
                uint64_t AudioGroupIDString = FigAlternateGetAudioGroupIDString((uint64_t)v379);
                CFDictionaryRef AudioGroups = (const __CFDictionary *)FigMultivariantPlaylistGetAudioGroups((uint64_t)v561);
                uint64_t SelectionGroupGuts = PlaylistGetSelectionGroupGuts(AudioGroupIDString, 1936684398, AudioGroups, (uint64_t)&v573, &v566);
                if (SelectionGroupGuts) {
                  goto LABEL_1182;
                }
                uint64_t VideoGroupIDString = FigAlternateGetVideoGroupIDString((uint64_t)v379);
                CFDictionaryRef VideoGroups = (const __CFDictionary *)FigMultivariantPlaylistGetVideoGroups((uint64_t)v561);
                uint64_t SelectionGroupGuts = PlaylistGetSelectionGroupGuts(VideoGroupIDString, 1986618469, VideoGroups, (uint64_t)&v573, &v565);
                if (SelectionGroupGuts) {
                  goto LABEL_1182;
                }
                uint64_t SubtitleGroupIDString = FigAlternateGetSubtitleGroupIDString((uint64_t)v379);
                CFDictionaryRef SubtitleGroups = (const __CFDictionary *)FigMultivariantPlaylistGetSubtitleGroups((uint64_t)v561);
                uint64_t SelectionGroupGuts = PlaylistGetSelectionGroupGuts(SubtitleGroupIDString, 1935832172, SubtitleGroups, (uint64_t)&v573, &v564);
                if (SelectionGroupGuts) {
                  goto LABEL_1182;
                }
                uint64_t ClosedCaptionGroupIDString = FigAlternateGetClosedCaptionGroupIDString((uint64_t)v379);
                CFDictionaryRef ClosedCaptionGroups = (const __CFDictionary *)FigMultivariantPlaylistGetClosedCaptionGroups((uint64_t)v561);
                uint64_t SelectionGroupGuts = PlaylistGetSelectionGroupGuts(ClosedCaptionGroupIDString, 1668047728, ClosedCaptionGroups, (uint64_t)&v573, &v563);
                if (SelectionGroupGuts) {
                  goto LABEL_1182;
                }
                if (v372)
                {
                  v389 = 0;
                }
                else
                {
                  unint64_t v374 = 1;
                  v389 = @"AUDIO";
                }
                if (v367)
                {
                  unint64_t v375 = 1;
                  v390 = @"CC";
                }
                else
                {
                  v390 = 0;
                }
                uint64_t SelectionGroupGuts = FigAlternateCopy((uint64_t)v379, 0, 0, 0, 0, 0, (uint64_t)v389, v374, 0, 0, (uint64_t)v390, v375, 0, 0, 0, v566, v565, v564, v563,
                                       &value);
                if (SelectionGroupGuts)
                {
LABEL_1182:
                  uint64_t matched = SelectionGroupGuts;
                  goto LABEL_1183;
                }
                CFMutableArrayRef Mutable = (void *)v556;
                if (!v556)
                {
                  CFAllocatorRef v392 = (const __CFAllocator *)FigGetAllocatorForMedia();
                  CFMutableArrayRef Mutable = CFArrayCreateMutable(v392, 0, MEMORY[0x1E4F1D510]);
                  if (!Mutable)
                  {
                    uint64_t matched = FigSignalErrorAt();
                    CFStringRef v55 = 0;
                    CFStringRef v56 = 0;
                    CFStringRef v57 = 0;
                    uint64_t v58 = 0;
                    CFTypeRef v556 = 0;
                    goto LABEL_1300;
                  }
                }
                CFTypeRef v556 = Mutable;
                CFArrayAppendValue((CFMutableArrayRef)Mutable, value);
                if (value) {
                  CFRelease(value);
                }
                int v367 = 0;
                CMTimeValue value = 0;
                uint64_t v566 = 0;
                uint64_t v565 = 0;
                uint64_t v564 = 0;
                ++v376;
                char v372 = 1;
                uint64_t v563 = 0;
              }
              if (v556) {
                FigMultivariantPlaylistSetAlternates((uint64_t)v561, v556);
              }
              FigMultivariantPlaylistSetPlaylistVariables((uint64_t)v561, *((CFTypeRef *)&v574 + 1));
              CFStringRef v22 = v510;
              CFTypeRef v54 = v549;
LABEL_1142:
              if (a10 && v561)
              {
                CFArrayRef v393 = (const __CFArray *)FigMultivariantPlaylistGetMediaSelectionArray((uint64_t)v561);
                CFMutableArrayRef v394 = CFArrayCreateMutable(structureAllocator, 0, MEMORY[0x1E4F1D510]);
                if (v394)
                {
                  CFMutableArrayRef v395 = v394;
                  CFStringRef v396 = v22;
                  if (v393)
                  {
                    CFIndex v397 = CFArrayGetCount(v393);
                    if (v397 >= 1)
                    {
                      CFIndex v398 = v397;
                      CFIndex v399 = 0;
                      v400 = 0;
                      CFDictionaryRef v401 = 0;
                      while (1)
                      {
                        CFDictionaryRef v402 = (const __CFDictionary *)CFArrayGetValueAtIndex(v393, v399);
                        CFDictionaryRef v403 = v402;
                        if (!v401)
                        {
                          CFArrayRef v404 = (const __CFArray *)CFDictionaryGetValue(v402, @"MediaSelectionGroupMediaCharacteristics");
                          v609.length = CFArrayGetCount(v404);
                          v609.locatiouint64_t n = 0;
                          if (CFArrayContainsValue(v404, v609, @"public.legible"))
                          {
                            CFDictionaryGetValue(v403, @"MediaSelectionGroupOptions");
                            uint64_t ConcatenationOfTwoArrays = FigCFArrayCreateConcatenationOfTwoArrays();
                            if (!ConcatenationOfTwoArrays)
                            {
                              uint64_t matched = FigSignalErrorAt();
                              CFTypeRef v54 = v549;
                              if (!matched) {
                                goto LABEL_1194;
                              }
LABEL_1165:
                              CFRelease(v395);
                              CFStringRef v55 = 0;
                              CFStringRef v56 = 0;
                              CFStringRef v57 = 0;
                              uint64_t v58 = 0;
                              CFStringRef v22 = v396;
                              goto LABEL_1302;
                            }
                            v400 = (const void *)ConcatenationOfTwoArrays;
                            CFMutableArrayRef MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
                            if (!MutableCopy)
                            {
                              uint64_t matched = FigSignalErrorAt();
                              CFTypeRef v54 = v549;
                              goto LABEL_1163;
                            }
                            CFDictionaryRef v401 = MutableCopy;
                            CFDictionarySetValue(MutableCopy, @"MediaSelectionGroupOptions", v400);
                            CFDictionaryRef v403 = v401;
                          }
                          else
                          {
                            CFDictionaryRef v401 = 0;
                          }
                        }
                        CFArrayAppendValue(v395, v403);
                        if (v398 == ++v399)
                        {
                          if (!v401) {
                            goto LABEL_1158;
                          }
LABEL_1161:
                          CFRelease(v401);
                          uint64_t matched = 0;
                          goto LABEL_1162;
                        }
                      }
                    }
                  }
                  v400 = 0;
LABEL_1158:
                  CFArrayRef v407 = CFArrayCreate(structureAllocator, (const void **)kFigStdAssetMediaCharacteristic_Legible, 1, MEMORY[0x1E4F1D510]);
                  if (v407)
                  {
                    CFArrayRef v408 = v407;
                    *(double *)&returnedPointerOut = COERCE_DOUBLE(@"MediaSelectionGroupMediaType");
                    uint64_t v409 = FigGetCFStringForOSTypeValue();
                    uint64_t v410 = *MEMORY[0x1E4F1CFD0];
                    *(void *)&CMBlockBufferRef blockBufferOut = v409;
                    *((void *)&blockBufferOut + 1) = v410;
                    v601 = @"MediaSelectionGroupAllowEmptySelection";
                    v602 = @"MediaSelectionGroupOptions";
                    v603 = @"MediaSelectionGroupMediaCharacteristics";
                    v605 = a10;
                    v606 = v408;
                    CFDictionaryRef v401 = CFDictionaryCreate(structureAllocator, (const void **)&returnedPointerOut, (const void **)&blockBufferOut, 4, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                    CFRelease(v408);
                    if (v401)
                    {
                      CFArrayAppendValue(v395, v401);
                      goto LABEL_1161;
                    }
                  }
                  uint64_t matched = FigSignalErrorAt();
LABEL_1162:
                  CFTypeRef v54 = v549;
                  if (v400) {
LABEL_1163:
                  }
                    CFRelease(v400);
                  if (matched) {
                    goto LABEL_1165;
                  }
LABEL_1194:
                  FigMultivariantPlaylistSetMediaSelectionArray((uint64_t)v561, v395);
                  CFRelease(v395);
                  CFStringRef v22 = v396;
                }
                else
                {
                  uint64_t v485 = FigSignalErrorAt();
                  if (v485)
                  {
                    uint64_t matched = v485;
                    CFStringRef v55 = 0;
                    CFStringRef v56 = 0;
                    CFStringRef v57 = 0;
                    uint64_t v58 = 0;
                    goto LABEL_1301;
                  }
                  FigMultivariantPlaylistSetMediaSelectionArray((uint64_t)v561, 0);
                  CFTypeRef v54 = v549;
                }
              }
              v412 = v541;
              if ((_BYTE)v525)
              {
                if (!v519)
                {
                  int v413 = FigMediaPlaylistGetTargetDuration((uint64_t)v586);
                  v412 = v541;
                  if (v70 > (double)(2 * v413))
                  {
                    uint64_t v486 = FigMediaPlaylistGetTargetDuration((uint64_t)v586);
                    uint64_t matched = 4294954654;
                    _StreamPlaylistLogError(4294954654, 4294955023, (uint64_t)&v573, @"Max extinf duration of %g more than 2 * target duration %d", *(void *)&v70, v486);
                    CFStringRef v55 = 0;
                    CFStringRef v56 = 0;
                    CFStringRef v57 = 0;
                    uint64_t v58 = 0;
                    goto LABEL_1302;
                  }
                }
                *v412 |= 2u;
              }
              CFIndex v414 = 0;
              uint64_t matched = 0;
              uint64_t v415 = (uint64_t)v586;
              while (1)
              {
                CFArrayRef v416 = (const __CFArray *)FigMediaPlaylistGetDateRangeSpecifiers(v415);
                if (v416) {
                  CFArrayRef v416 = (const __CFArray *)CFArrayGetCount(v416);
                }
                if (v414 >= (uint64_t)v416) {
                  break;
                }
                CFArrayRef v417 = (const __CFArray *)FigMediaPlaylistGetDateRangeSpecifiers(v415);
                v418 = CFArrayGetValueAtIndex(v417, v414);
                if (theArray)
                {
                  CFIndex v419 = CFArrayGetCount(theArray);
                  CFStringRef Identifier = (const void *)FigDateRangeSpecifierGetIdentifier((uint64_t)v418);
                  v610.locatiouint64_t n = 0;
                  v610.length = v419;
                  if (CFArrayContainsValue(theArray, v610, Identifier))
                  {
                    if (FigDateRangeSpecifierGetReadInCurrent((uint64_t)v418))
                    {
                      uint64_t matched = 4294954654;
                      _StreamPlaylistLogError(4294954654, 4294955032, (uint64_t)&v573, @"%s: %s cannot be present in Playlist and also appear in %s", "#EXT-X-DATERANGE", "ID", "RECENTLY-REMOVED-DATERANGES");
                    }
                  }
                  else
                  {
                    FigDateRangeSpecifierSetReadInCurrent((uint64_t)v418, 1);
                  }
                }
                if (FigDateRangeSpecifierGetReadInCurrent((uint64_t)v418))
                {
                  TempDuratiouint64_t n = FigDateRangeSpecifierGetTempDuration((uint64_t)v418);
                  FigDateRangeSpecifierSetDuration((uint64_t)v418, TempDuration);
                  TempCFDateRef EndDate = (const void *)FigDateRangeSpecifierGetTempEndDate((uint64_t)v418);
                  FigDateRangeSpecifierSetEndDate((uint64_t)v418, TempEndDate);
                  if (FigDateRangeSpecifierGetPlannedDuration((uint64_t)v418) == -1.0)
                  {
                    ParseDate = (const void *)FigMediaPlaylistGetParseDate(v415);
                    FigDateRangeSpecifierSetValueForTagsFirstFoundDateDict((uint64_t)v418, @"PLANNED-DURATION", ParseDate);
                  }
                  TempPlannedDuratiouint64_t n = FigDateRangeSpecifierGetTempPlannedDuration((uint64_t)v418);
                  FigDateRangeSpecifierSetPlannedDuration((uint64_t)v418, TempPlannedDuration);
                  if (FigDateRangeSpecifierGetEndDate((uint64_t)v418)
                    && FigDateRangeSpecifierGetDuration((uint64_t)v418) >= 0.0)
                  {
                    if ((void)v575 || !FigDateRangeSpecifierGetTaggedRangeLine((uint64_t)v418))
                    {
                      CFArrayRef v425 = theArray;
                      char v426 = 1;
                    }
                    else
                    {
                      CFArrayRef v425 = theArray;
                      v428 = v576;
                      if (v576)
                      {
                        v576 = 0;
                        free(v428);
                      }
                      FigDateRangeSpecifierGetTaggedRangeLine((uint64_t)v418);
                      char v426 = 0;
                      *(void *)&long long v575 = FigCFStringGetCStringPtrAndBufferToFree();
                    }
                    Duratiouint64_t n = FigDateRangeSpecifierGetDuration((uint64_t)v418);
                    CFDateRef EndDate = (const __CFDate *)FigDateRangeSpecifierGetEndDate((uint64_t)v418);
                    CFDateRef StartDate = (const __CFDate *)FigDateRangeSpecifierGetStartDate((uint64_t)v418);
                    CFArrayRef theArray = v425;
                    if (vabdd_f64(Duration, CFDateGetTimeIntervalSinceDate(EndDate, StartDate)) >= 0.001)
                    {
                      uint64_t matched = 4294954654;
                      _StreamPlaylistLogError(4294954654, 4294955032, (uint64_t)&v573, @"%s: %s not equal to the value of %s minus the value of %s", "#EXT-X-DATERANGE", "DURATION", "START-DATE", "END-DATE");
                      CFStringRef v56 = 0;
                      CFStringRef v57 = 0;
                      uint64_t v58 = 0;
                      CFStringRef v22 = v510;
                      CFTypeRef v54 = v549;
                      CFStringRef v55 = 0;
                      goto LABEL_1302;
                    }
                    if ((v426 & 1) == 0) {
                      *(void *)&long long v575 = 0;
                    }
                  }
                }
                else
                {
                  MutableCFArrayRef DateRangeSpecifiers = (__CFArray *)FigMediaPlaylistGetMutableDateRangeSpecifiers(v415);
                  CFArrayRemoveValueAtIndex(MutableDateRangeSpecifiers, v414--);
                  LOBYTE(v571) = 1;
                }
                ++v414;
              }
              if (matched)
              {
LABEL_1183:
                CFStringRef v55 = 0;
                CFStringRef v56 = 0;
                CFStringRef v57 = 0;
                uint64_t v58 = 0;
                goto LABEL_1300;
              }
              v432 = v541;
              CFAllocatorRef v433 = structureAllocator;
              if ((_BYTE)v571)
              {
                uint64_t v434 = (uint64_t)v586;
                CFArrayRef v435 = (const __CFArray *)FigMediaPlaylistGetDateRangeSpecifiers((uint64_t)v586);
                if (!v435 || CFArrayGetCount(v435) < 1) {
                  goto LABEL_1266;
                }
                CFMutableArrayRef v546 = CFArrayCreateMutable(structureAllocator, 0, MEMORY[0x1E4F1D510]);
                if (v546)
                {
                  CFIndex v436 = 0;
                  *(double *)&returnedPointerOut = 0.0;
                  v601 = 0;
                  v602 = 0;
                  v529 = (void *)*MEMORY[0x1E4F1EFD8];
                  v437 = (const void *)*MEMORY[0x1E4F1F020];
                  v438 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
                  while (1)
                  {
                    CFArrayRef v439 = (const __CFArray *)FigMediaPlaylistGetDateRangeSpecifiers(v434);
                    if (v439) {
                      CFArrayRef v439 = (const __CFArray *)CFArrayGetCount(v439);
                    }
                    if (v436 >= (uint64_t)v439)
                    {
                      FigMediaPlaylistSetDateEntryArray((uint64_t)v586, v546);
                      CFRelease(v546);
                      goto LABEL_1267;
                    }
                    CFArrayRef v440 = (const __CFArray *)FigMediaPlaylistGetDateRangeSpecifiers(v434);
                    v441 = (__CFString *)CFArrayGetValueAtIndex(v440, v436);
                    CFMutableDictionaryRef v442 = CFDictionaryCreateMutable(v433, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                    if (!v442) {
                      break;
                    }
                    v443 = v442;
                    *(double *)&key = COERCE_DOUBLE(CFArrayCreateMutable(v433, 0, v438));
                    if (*(double *)&key == 0.0) {
                      goto LABEL_1260;
                    }
                    DiscoveryTimestamp = (const void *)FigDateRangeSpecifierGetDiscoveryTimestamp((uint64_t)v441);
                    CFDictionaryAddValue(v443, @"TaggedRangeMetadataKey_DiscoveryTimestamp", DiscoveryTimestamp);
                    ModificationTimestamp = (const void *)FigDateRangeSpecifierGetModificationTimestamp((uint64_t)v441);
                    CFDictionaryAddValue(v443, @"TaggedRangeMetadataKey_ModificationTimestamp", ModificationTimestamp);
                    v446 = (const void *)FigDateRangeSpecifierGetIdentifier((uint64_t)v441);
                    CFDictionaryAddValue(v443, @"TaggedRangeMetadataKey_ID", v446);
                    v447 = (const void *)FigDateRangeSpecifierGetStartDate((uint64_t)v441);
                    CFDictionaryAddValue(v443, @"TaggedRangeMetadataKey_StartDate", v447);
                    if (anURL)
                    {
                      CFStringRef v448 = CFURLGetString(anURL);
                      CFDictionaryAddValue(v443, @"TaggedRangeMetadataKey_BaseURL", v448);
                    }
                    if (FigDateRangeSpecifierGetEndDate((uint64_t)v441))
                    {
                      v449 = (const void *)FigDateRangeSpecifierGetEndDate((uint64_t)v441);
                      CFDictionarySetValue(v443, @"TaggedRangeMetadataKey_EndDate", v449);
                    }
                    if (FigDateRangeSpecifierGetDuration((uint64_t)v441) >= 0.0)
                    {
                      FigDateRangeSpecifierGetDuration((uint64_t)v441);
                      FigCFDictionarySetDouble();
                    }
                    *(void *)&CMBlockBufferRef blockBufferOut = 0;
                    *(void *)&CMBlockBufferRef blockBufferOut = FigDateRangeSpecifierGetPlannedDuration((uint64_t)v441);
                    if (*(double *)&blockBufferOut >= 0.0)
                    {
                      CFDictionaryRef TagsFirstFoundDateDict = (const __CFDictionary *)FigDateRangeSpecifierGetTagsFirstFoundDateDict((uint64_t)v441);
                      v451 = CFDictionaryGetValue(TagsFirstFoundDateDict, @"PLANNED-DURATION");
                      CFNumberRef v452 = CFNumberCreate(v433, kCFNumberDoubleType, &blockBufferOut);
                      if (!v452)
                      {
LABEL_1260:
                        uint64_t v460 = FigSignalErrorAt();
LABEL_1261:
                        uint64_t matched = v460;
LABEL_1262:
                        CFRelease(v546);
                        CFRelease(v443);
                        if (*(double *)&key != 0.0)
                        {
                          v467 = key;
                          goto LABEL_1264;
                        }
                        goto LABEL_1265;
                      }
                      CFNumberRef v453 = v452;
                      CFDictionarySetValue(v443, @"TaggedRangeMetadataKey_PlannedDuration", v452);
                      uint64_t matched = PlaylistAddTaggedRangeMetadataDictionaryToArray((__CFArray *)key, @"PLANNED-DURATION", v453, v529, v451);
                      CFRelease(v453);
                      if (matched) {
                        goto LABEL_1262;
                      }
                    }
                    if (FigDateRangeSpecifierGetTaggedRangeClass((uint64_t)v441))
                    {
                      TaggedRangeClass = (const void *)FigDateRangeSpecifierGetTaggedRangeClass((uint64_t)v441);
                      CFDictionaryAddValue(v443, @"TaggedRangeMetadataKey_Class", TaggedRangeClass);
                    }
                    if (FigDateRangeSpecifierGetTaggedRangeCue((uint64_t)v441))
                    {
                      TaggedRangeCue = (const void *)FigDateRangeSpecifierGetTaggedRangeCue((uint64_t)v441);
                      CFDictionaryAddValue(v443, @"TaggedRangeMetadataKey_Cue", TaggedRangeCue);
                    }
                    LODWORD(v602) = 0;
                    returnedPointerOut = (char *)key;
                    v601 = v441;
                    CFDictionaryRef MetadataDict = (const __CFDictionary *)FigDateRangeSpecifierGetMetadataDict((uint64_t)v441);
                    CFDictionaryApplyFunction(MetadataDict, (CFDictionaryApplierFunction)TaggedRangeTagApplier, &returnedPointerOut);
                    uint64_t matched = v602;
                    if (v602) {
                      goto LABEL_1262;
                    }
                    if (FigDateRangeSpecifierGetScte35cmd((uint64_t)v441))
                    {
                      CFDictionaryRef v457 = (const __CFDictionary *)FigDateRangeSpecifierGetTagsFirstFoundDateDict((uint64_t)v441);
                      v458 = CFDictionaryGetValue(v457, @"SCTE35-CMD");
                      Scte35cmd = (const void *)FigDateRangeSpecifierGetScte35cmd((uint64_t)v441);
                      uint64_t v460 = PlaylistAddTaggedRangeMetadataDictionaryToArray((__CFArray *)key, @"SCTE35-CMD", Scte35cmd, v437, v458);
                      if (v460) {
                        goto LABEL_1261;
                      }
                    }
                    if (FigDateRangeSpecifierGetScte35in((uint64_t)v441))
                    {
                      CFDictionaryRef v461 = (const __CFDictionary *)FigDateRangeSpecifierGetTagsFirstFoundDateDict((uint64_t)v441);
                      v462 = CFDictionaryGetValue(v461, @"SCTE35-IN");
                      Scte35iuint64_t n = (const void *)FigDateRangeSpecifierGetScte35in((uint64_t)v441);
                      uint64_t v460 = PlaylistAddTaggedRangeMetadataDictionaryToArray((__CFArray *)key, @"SCTE35-IN", Scte35in, v437, v462);
                      if (v460) {
                        goto LABEL_1261;
                      }
                    }
                    if (FigDateRangeSpecifierGetScte35out((uint64_t)v441))
                    {
                      CFDictionaryRef v464 = (const __CFDictionary *)FigDateRangeSpecifierGetTagsFirstFoundDateDict((uint64_t)v441);
                      v465 = CFDictionaryGetValue(v464, @"SCTE35-OUT");
                      Scte35out = (const void *)FigDateRangeSpecifierGetScte35out((uint64_t)v441);
                      uint64_t v460 = PlaylistAddTaggedRangeMetadataDictionaryToArray((__CFArray *)key, @"SCTE35-OUT", Scte35out, v437, v465);
                      if (v460) {
                        goto LABEL_1261;
                      }
                    }
                    if (CFArrayGetCount((CFArrayRef)key) >= 1) {
                      CFDictionaryAddValue(v443, @"TaggedRangeMetadataKey_MetadataArray", key);
                    }
                    CFRelease(key);
                    CFArrayAppendValue(v546, v443);
                    CFRelease(v443);
                    ++v436;
                    CFAllocatorRef v433 = structureAllocator;
                  }
                  uint64_t matched = FigSignalErrorAt();
                  v467 = v546;
LABEL_1264:
                  CFRelease(v467);
LABEL_1265:
                  if (!matched)
                  {
LABEL_1266:
                    FigMediaPlaylistSetDateEntryArray((uint64_t)v586, 0);
LABEL_1267:
                    v432 = v541;
                    *v541 |= 8u;
                    goto LABEL_1268;
                  }
                }
                else
                {
                  uint64_t matched = FigSignalErrorAt();
                  if (!matched) {
                    goto LABEL_1266;
                  }
                }
                CFStringRef v55 = 0;
                CFStringRef v56 = 0;
                CFStringRef v57 = 0;
                uint64_t v58 = 0;
                goto LABEL_1300;
              }
LABEL_1268:
              if (v520) {
                *v432 |= 4u;
              }
              if (v536)
              {
                CFArrayRef v468 = (const __CFArray *)FigMultivariantPlaylistGetAlternates((uint64_t)v561);
                if (v468)
                {
                  if (CFArrayGetCount(v468) > 1)
                  {
                    LOBYTE(returnedPointerOut) = 0;
                    LOBYTE(blockBufferOut) = 0;
                    uint64_t v469 = FigMultivariantPlaylistGetAlternates((uint64_t)v561);
                    PlaylistCheckAllAlternatesCarryScore(v469, (char *)&returnedPointerOut, (BOOL *)&blockBufferOut);
                    if ((_BYTE)returnedPointerOut) {
                      _StreamPlaylistLogError(0, 4294949665, (uint64_t)&v573, @"Not all non-iframe alternates carry SCORE, SCORE disabled for non-iframe alternates");
                    }
                    if ((_BYTE)blockBufferOut) {
                      _StreamPlaylistLogError(0, 4294949665, (uint64_t)&v573, @"Not all iframe alternates carry SCORE, SCORE disabled for iframe alternates");
                    }
                  }
                }
              }
              uint64_t v470 = (uint64_t)v586;
              if (FigMediaPlaylistGetDateStampCount((uint64_t)v586) < 1) {
                goto LABEL_1297;
              }
              CFIndex v471 = 0;
              do
              {
                CFArrayRef MediaSegmentSpecifiers = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(v470);
                if (MediaSegmentSpecifiers) {
                  CFArrayRef MediaSegmentSpecifiers = (const __CFArray *)CFArrayGetCount(MediaSegmentSpecifiers);
                }
                if (v471 >= (uint64_t)MediaSegmentSpecifiers) {
                  goto LABEL_1297;
                }
                CFArrayRef v473 = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(v470);
                v474 = CFArrayGetValueAtIndex(v473, v471++);
              }
              while (!FigMediaSegmentSpecifierGetDateStamp((uint64_t)v474));
              if (v474)
              {
                double ImputedDate = FigMediaSegmentSpecifierGetImputedDate((uint64_t)v474);
                for (uint64_t k = (uint64_t)v474; ; uint64_t k = (uint64_t)v58)
                {
                  uint64_t PreviousSegment = FigMediaSegmentSpecifierGetPreviousSegment(k);
                  uint64_t v58 = (__CFString *)PreviousSegment;
                  if (!PreviousSegment) {
                    break;
                  }
                  double ImputedDate = ImputedDate - FigMediaSegmentSpecifierGetTimeInSeconds(PreviousSegment);
                  if (FigMediaSegmentSpecifierGetImputedDate((uint64_t)v58) == 0.0) {
                    FigMediaSegmentSpecifierSetImputedDate((uint64_t)v58, ImputedDate);
                  }
                  double v478 = FigMediaSegmentSpecifierGetImputedDate((uint64_t)v58);
                  CFArrayRef v479 = (const __CFArray *)FigMediaSegmentSpecifierGetPartialSegments((uint64_t)v58);
                  CFIndex v480 = 0;
                  if (!v479)
                  {
LABEL_1294:
                    CFIndex v482 = 0;
                    goto LABEL_1295;
                  }
                  while (1)
                  {
                    CFIndex v482 = CFArrayGetCount(v479);
LABEL_1295:
                    if (v480 >= v482) {
                      break;
                    }
                    v481 = CFArrayGetValueAtIndex(v479, v480);
                    if (FigMediaSegmentSpecifierGetImputedDate((uint64_t)v481) == 0.0) {
                      FigMediaSegmentSpecifierSetImputedDate((uint64_t)v481, v478);
                    }
                    double v478 = v478 + FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)v481);
                    ++v480;
                    if (!v479) {
                      goto LABEL_1294;
                    }
                  }
                }
                CFStringRef v55 = 0;
                CFStringRef v56 = 0;
                CFStringRef v57 = 0;
              }
              else
              {
LABEL_1297:
                CFStringRef v55 = 0;
                CFStringRef v56 = 0;
                CFStringRef v57 = 0;
                uint64_t v58 = 0;
              }
              uint64_t matched = 0;
              goto LABEL_1300;
            }
LABEL_1379:
            uint64_t matched = v373;
            goto LABEL_1380;
          }
        }
      }
      uint64_t v332 = a14;
      goto LABEL_969;
    }
    *(void *)&long long v575 = v68;
    if (*(unsigned char *)v68 == 35) {
      break;
    }
    temporaryBlocuint64_t k = 0;
    CMBlockBufferRef v599 = 0;
    v597 = 0;
    CMBlockBufferRef v599 = (CMBlockBufferRef)StreamingPlaylist_SkipSpacesAndTabs((const char *)v68, (uint64_t)&v573);
    uint64_t StringWithReplacement = sp_GetStringWithReplacement((char *)v599, 0, 1, &v594, (const char **)&v599, (size_t *)&temporaryBlock, &v597, (uint64_t)&v573);
    uint64_t matched = StringWithReplacement;
    if (!a5 && StringWithReplacement) {
      goto LABEL_72;
    }
    double v75 = (char *)temporaryBlock;
    if (!temporaryBlock)
    {
      *(double *)&key = 0.0;
      goto LABEL_100;
    }
    CFAllocatorRef v76 = (const __CFAllocator *)FigGetAllocatorForMedia();
    CFStringRef v77 = CFStringCreateWithBytes(v76, (const UInt8 *)v599, (CFIndex)v75, 0x8000100u, 0);
    if (!v77)
    {
      uint64_t matched = FigSignalErrorAt();
      *(double *)&key = 0.0;
      int v79 = 196;
      goto LABEL_258;
    }
    CFStringRef v78 = v77;
    FigMediaSegmentSpecifierSetURLString((uint64_t)v584, v77);
    CFRelease(v78);
    if (v546 && v544)
    {
      uint64_t matched = 4294954654;
      _StreamPlaylistLogError(4294954654, 4294951065, (uint64_t)&v573, @"Segment found in a multivariant playlist");
      if (a5)
      {
LABEL_80:
        *(double *)&returnedPointerOut = 0.0;
        *(void *)&CMBlockBufferRef blockBufferOut = 0;
        uint64_t URLString = FigMediaSegmentSpecifierGetURLString((uint64_t)v584);
        FigStreamingPlaylistEnsureMediaURL(URLString, anURL, (const __CFURL *)v538, (CFTypeRef *)&returnedPointerOut, (CFURLRef *)&blockBufferOut);
        double v83 = (const void *)blockBufferOut;
        if (*(double *)&returnedPointerOut == 0.0 || !(void)blockBufferOut)
        {
          if (*(double *)&returnedPointerOut != 0.0)
          {
            CFRelease(returnedPointerOut);
            *(double *)&returnedPointerOut = 0.0;
            double v83 = (const void *)blockBufferOut;
          }
          if (v83)
          {
            CFRelease(v83);
            *(void *)&CMBlockBufferRef blockBufferOut = 0;
          }
LABEL_93:
          uint64_t matched = 4294954654;
          _StreamPlaylistLogError(4294954654, 4294955034, (uint64_t)&v573, @"URL parse failed", v82, p_blockBufferOut, v493);
          goto LABEL_94;
        }
        if (matched == -12783)
        {
          uint64_t matched = 4294954513;
          _StreamPlaylistLogError(4294954513, 4294955033, (uint64_t)&v573, @"no media URL", v82, p_blockBufferOut, v493);
          goto LABEL_94;
        }
        if (matched == -12642) {
          goto LABEL_93;
        }
        if (matched || (_BYTE)v533)
        {
          if (matched) {
            goto LABEL_94;
          }
        }
        else if ((v532 - 1) <= 1 && v569 == 0.0)
        {
          uint64_t matched = 4294954654;
          _StreamPlaylistLogError(4294954654, 4294951059, (uint64_t)&v573, @"HDR alternate is missing FRAME-RATE", v569, p_blockBufferOut, v493);
LABEL_94:
          if (*(double *)&returnedPointerOut != 0.0)
          {
            CFRelease(returnedPointerOut);
            *(double *)&returnedPointerOut = 0.0;
          }
          if ((void)blockBufferOut) {
            CFRelease((CFTypeRef)blockBufferOut);
          }
          *(double *)&key = 0.0;
          goto LABEL_99;
        }
        if (v531 != 1) {
          goto LABEL_167;
        }
        uint64_t matched = PlaylistProcessAlternate((uint64_t)v561, returnedPointerOut, (void *)blockBufferOut, v528, v529, (const __CFString *)cf, (const __CFString *)v552, (uint64_t)v553, v569, v69, (void *)v550, (uint64_t)v549, (uint64_t)v22, v533, v589, v588, (uint64_t)v540, v527, (int)v532,
                    v568,
                    (uint64_t)v567,
                    (uint64_t)v539,
                    (unsigned char *)&v571 + 1,
                    (uint64_t)&v573);
        if (*(double *)&returnedPointerOut != 0.0)
        {
          CFRelease(returnedPointerOut);
          *(double *)&returnedPointerOut = 0.0;
        }
        if ((void)blockBufferOut)
        {
          CFRelease((CFTypeRef)blockBufferOut);
          *(void *)&CMBlockBufferRef blockBufferOut = 0;
        }
        if (a5 || !matched)
        {
          if (!matched)
          {
LABEL_167:
            uint64_t matched = 0;
            int v536 = 1;
          }
          goto LABEL_94;
        }
      }
LABEL_72:
      *(double *)&key = 0.0;
      goto LABEL_73;
    }
    if (v544) {
      goto LABEL_80;
    }
    if (!v546)
    {
      uint64_t matched = 4294954654;
      _StreamPlaylistLogError(4294954654, 4294951059, (uint64_t)&v573, @"a URI found without leading a EXTINF / EXT-X-STREAM-INF.");
      *(double *)&key = 0.0;
      if (a5) {
        goto LABEL_99;
      }
      goto LABEL_73;
    }
    if (FigMediaSegmentSpecifierGetBytesToRead((uint64_t)v584))
    {
      if (!v511)
      {
        uint64_t matched = 4294954654;
        _StreamPlaylistLogError(4294954654, 4294955019, (uint64_t)&v573, @"Reading URL, and have byte range but no offset");
        if (!a5)
        {
          int v511 = 0;
          goto LABEL_72;
        }
      }
    }
    CFStringRef v85 = v22;
    if (FigMediaSegmentSpecifierGetBytesToRead((uint64_t)v584))
    {
      uint64_t v86 = FigMediaSegmentSpecifierGetStartOffset((uint64_t)v584);
      key = (void *)(FigMediaSegmentSpecifierGetBytesToRead((uint64_t)v584) + v86);
    }
    else
    {
      FigMediaSegmentSpecifierSetStartOffset((uint64_t)v584, 0);
      int v511 = 0;
      *(double *)&key = 0.0;
    }
    CFTypeRef v119 = v592;
    FigMediaSegmentSpecifierSetContentKeySpecifier((uint64_t)v584, v592);
    if (v519
      && (!v591 && FigMediaSegmentSpecifierGetStartOffset((uint64_t)v584)
       || FigMediaSegmentSpecifierIsDiscontinuity((uint64_t)v584) && !v530))
    {
      uint64_t v121 = FigMediaSegmentSpecifierGetStartOffset((uint64_t)v584);
      if (v591)
      {
        CFRelease(v591);
        v591 = 0;
      }
      CFIndex v122 = 0;
      do
      {
        CFArrayRef v123 = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers((uint64_t)v586);
        if (v123) {
          CFArrayRef v123 = (const __CFArray *)CFArrayGetCount(v123);
        }
        if (v122 >= (uint64_t)v123)
        {
          a5 = HIDWORD(v548);
          goto LABEL_268;
        }
        CFArrayRef v124 = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers((uint64_t)v586);
        unsigned int v125 = CFArrayGetValueAtIndex(v124, v122);
        FigMediaSegmentSpecifierGetURLString((uint64_t)v125);
        FigMediaSegmentSpecifierGetURLString((uint64_t)v584);
        ++v122;
        a5 = HIDWORD(v548);
      }
      while (!FigCFEqual());
      if (FigMediaSegmentSpecifierGetMapSegmentSpecifier((uint64_t)v125))
      {
        uint64_t v126 = v591;
        uint64_t MapSegmentSpecifier = (const void *)FigMediaSegmentSpecifierGetMapSegmentSpecifier((uint64_t)v125);
        v591 = MapSegmentSpecifier;
        if (MapSegmentSpecifier) {
          CFRetain(MapSegmentSpecifier);
        }
        if (v126) {
          CFRelease(v126);
        }
      }
      else
      {
        uint64_t v121 = FigMediaSegmentSpecifierGetStartOffset((uint64_t)v125);
      }
LABEL_268:
      if (!v591 && v121 >= 1)
      {
        if ((unint64_t)v121 > 0x100000)
        {
          _StreamPlaylistLogError(0, 4294951060, (uint64_t)&v573, @"implicit map of size %lld too large", v121);
          uint64_t v121 = 0x100000;
        }
        uint64_t v134 = (uint64_t)v586;
        int v135 = (const void *)FigMediaSegmentSpecifierGetURLString((uint64_t)v584);
        uint64_t v136 = PlaylistCreateMapEntry(v134, v135, 0, v121, v593, &v591);
        uint64_t matched = v136;
        if (!a5 && v136)
        {
          int v79 = 4;
          CFStringRef v22 = v85;
          goto LABEL_258;
        }
        FigMediaSegmentSpecifierSetContentKeySpecifier((uint64_t)v591, v119);
        CFTypeRef v137 = v583;
        FigMediaSegmentSpecifierSetIV((uint64_t)v591, v583);
        if (v119)
        {
          if (FigContentKeySpecifierGetEncryptionMethod((uint64_t)v119) == 3 && !v137)
          {
            _StreamPlaylistLogError(0, 4294949666, (uint64_t)&v573, @"Explicit IV is required for implicit map entry for full segment encryption");
            uint64_t matched = 0;
            if (!a5)
            {
              if (dword_1E9351370)
              {
                LODWORD(v596) = 0;
                type[0] = OS_LOG_TYPE_DEFAULT;
                os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                unsigned int v139 = LODWORD(v596);
                if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type[0])) {
                  unsigned int v140 = v139;
                }
                else {
                  unsigned int v140 = v139 & 0xFFFFFFFE;
                }
                if (v140)
                {
                  LODWORD(blockBufferOut) = 136315138;
                  *(void *)((char *)&blockBufferOut + 4) = "FigStreamPlaylistParseInProcess";
                  LODWORD(v493) = 12;
                  p_CMBlockBufferRef blockBufferOut = (const char *)&blockBufferOut;
                  _os_log_send_and_compose_impl();
                }
                fig_log_call_emit_and_clean_up_after_send_and_compose();
                uint64_t matched = 0;
              }
            }
          }
        }
      }
    }
    FigMediaSegmentSpecifierGetPartialSegments((uint64_t)v584);
    uint64_t v141 = FigCFArrayGetLastValue();
    if (!v141)
    {
      CFStringRef v22 = v85;
LABEL_300:
      FigMediaSegmentSpecifierSetType((uint64_t)v584, 0);
      FigMediaSegmentSpecifierSetMapSegmentSpecifier((uint64_t)v584, v591);
      FigMediaSegmentSpecifierSetIsDiscontinuityDomain((uint64_t)v584, (uint64_t)DiscontinuityDomain);
      FigMediaSegmentSpecifierSetIsMarkedAsGap((uint64_t)v584, (char)v534);
      if (!a14 || !*a14 || (_BYTE)v525) {
        goto LABEL_318;
      }
      LOBYTE(returnedPointerOut) = 0;
      LOBYTE(blockBufferOut) = 0;
      uint64_t v142 = MergeLeadingPartialMediaEntries((uint64_t)v586, (uint64_t)v584, (uint64_t)&v573, (char *)&returnedPointerOut, (char *)&blockBufferOut, v526);
      uint64_t matched = v142;
      if (a5 || !v142)
      {
        if ((_BYTE)returnedPointerOut)
        {
          FigMediaPlaylistGetMediaSegmentSpecifiers((uint64_t)v586);
          uint64_t v585 = FigCFArrayGetLastValue();
          FigMediaSegmentSpecifierSetIsFragment(v585, 0);
          LOBYTE(v525) = (_BYTE)blockBufferOut != 0;
          goto LABEL_316;
        }
        if (v585)
        {
          LOBYTE(v596) = 0;
          uint64_t matched = DoesMediaFileMatchEntry(v585, (uint64_t)v584, &v596, (uint64_t)&v573, 0, v526);
          if (!matched && !LOBYTE(v596))
          {
            uint64_t matched = 4294954984;
            _StreamPlaylistLogError(4294954984, 4294954984, (uint64_t)&v573, @"Media segment doesn't match - sequence %llu", v593);
          }
          goto LABEL_315;
        }
        uint64_t matched = FindMatchingMediaEntry((uint64_t)v586, (uint64_t)v584, &v585, (uint64_t)&v573, v526);
        LOBYTE(v525) = 0;
        if (!matched && v503 && v585)
        {
          uint64_t matched = 4294954984;
          _StreamPlaylistLogError(4294954984, 4294954984, (uint64_t)&v573, @"Mismatched media segment.  Found old media segment after added new one.", p_blockBufferOut);
LABEL_315:
          LOBYTE(v525) = 0;
        }
LABEL_316:
        if (!a5 && matched) {
          goto LABEL_967;
        }
LABEL_318:
        uint64_t v143 = v585;
        if (v585)
        {
          DiscontinuityCFErrorDomain Domain = (void *)FigMediaSegmentSpecifierGetDiscontinuityDomain(v585);
          FigStreamPlaylistValidateMediaEntry((uint64_t)v586, v143, v545);
          if (v545) {
            CFRelease(v545);
          }
          uint64_t v144 = v585;
          if (FigMediaSegmentSpecifierGetBytesToRead(v585))
          {
            CFStringRef v145 = v22;
            uint64_t v146 = FigMediaSegmentSpecifierGetStartOffset(v144);
            key = (void *)(FigMediaSegmentSpecifierGetBytesToRead(v144) + v146);
            CFStringRef v22 = v145;
          }
          uint64_t v585 = FigMediaSegmentSpecifierGetNextSegment(v144);
        }
        else
        {
          CFStringRef v509 = v22;
          uint64_t v147 = (uint64_t)v586;
          double v148 = FigMediaPlaylistGetPlaylistActiveDurationSecs((uint64_t)v586);
          double v149 = FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)v584);
          FigMediaPlaylistSetPlaylistActiveDurationSecs(v147, v148 + v149);
          if (FigMediaSegmentSpecifierGetImputedDate((uint64_t)v584) == 0.0) {
            FigMediaSegmentSpecifierSetImputedDate((uint64_t)v584, v72);
          }
          uint64_t v525 = (uint64_t)v586;
          v504 = (const void *)FigMediaSegmentSpecifierGetURLString((uint64_t)v584);
          CFTypeRef ContentKeySpecifier = (CFTypeRef)FigMediaSegmentSpecifierGetContentKeySpecifier((uint64_t)v584);
          int v150 = (const void *)FigMediaSegmentSpecifierGetMapSegmentSpecifier((uint64_t)v584);
          uint64_t MediaSequence = FigMediaSegmentSpecifierGetMediaSequence((uint64_t)v584);
          uint64_t v152 = FigMediaSegmentSpecifierGetStartOffset((uint64_t)v584);
          uint64_t v153 = FigMediaSegmentSpecifierGetBytesToRead((uint64_t)v584);
          double v154 = FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)v584);
          CFTypeRef v155 = v583;
          char v156 = FigMediaSegmentSpecifierIsDiscontinuity((uint64_t)v584);
          char IsMarkedAsGap = FigMediaSegmentSpecifierIsMarkedAsGap((uint64_t)v584);
          double v158 = FigMediaSegmentSpecifierGetImputedDate((uint64_t)v584);
          uint64_t v159 = (const void *)CreateMediaFileEntry(v525, v504, 0, ContentKeySpecifier, v150, MediaSequence, (uint64_t)DiscontinuityDomain, v152, v154, v158, v153, v155, v545, v156, IsMarkedAsGap);
          FigStreamPlaylistTransferPartialEntryQueue((uint64_t)v584, (uint64_t)v159);
          if (!FigMediaSegmentSpecifierGetBytesToRead((uint64_t)v159)) {
            FigMediaSegmentSpecifierSetBitRate((uint64_t)v159, BitRate);
          }
          FigMediaPlaylistAddMediaSegmentSpecifier((uint64_t)v586, v159);
          if (v159) {
            CFRelease(v159);
          }
          CFStringRef v22 = v509;
          a5 = HIDWORD(v548);
          if (v545) {
            CFRelease(v545);
          }
          LOBYTE(v525) = 1;
          int v503 = 1;
        }
        ++v593;
        double v73 = 0.0;
        CFTypeRef v545 = 0;
        if (v72 != 0.0) {
          double v72 = v72 + FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)v584);
        }
LABEL_99:
        LODWORD(v75) = 1;
LABEL_100:
        free(v597);
        if (v75)
        {
LABEL_101:
          if (cf) {
            CFRelease(cf);
          }
          if (v552) {
            CFRelease(v552);
          }
          if (v553) {
            CFRelease(v553);
          }
          if (v550) {
            CFRelease(v550);
          }
          if (v549) {
            CFRelease(v549);
          }
          if (v22) {
            CFRelease(v22);
          }
          if (v540) {
            CFRelease(v540);
          }
          if (v567)
          {
            CFRelease(v567);
            CFTypeRef v567 = 0;
          }
          if (v539) {
            CFRelease(v539);
          }
          int v588 = -1;
          int v589 = -1;
          double v569 = 0.0;
          uint64_t v568 = -1;
          if (v584)
          {
            CFRelease(v584);
            CFTypeRef v584 = 0;
          }
          uint64_t v84 = FigGetAllocatorForMedia();
          uint64_t matched = FigMediaSegmentSpecifierCreateEmpty(v84, (uint64_t *)&v584);
          if (matched)
          {
            CFTypeRef cf = 0;
            CFTypeRef v552 = 0;
            CFTypeRef v553 = 0;
            CFTypeRef v550 = 0;
            CFTypeRef v54 = 0;
            CFStringRef v22 = 0;
            CFStringRef v55 = 0;
            CFStringRef v56 = 0;
            CFStringRef v57 = 0;
            uint64_t v58 = 0;
            goto LABEL_51;
          }
          FigMediaSegmentSpecifierSetStartOffset((uint64_t)v584, (uint64_t)key);
          FigMediaSegmentSpecifierSetContentKeySpecifier((uint64_t)v584, v592);
          FigMediaSegmentSpecifierSetMapSegmentSpecifier((uint64_t)v584, v591);
          FigMediaSegmentSpecifierSetMediaSequence((uint64_t)v584, v593);
          LODWORD(v544) = 0;
          LODWORD(v546) = 0;
          LOBYTE(v534) = 0;
          CFTypeRef v539 = 0;
          CFTypeRef v540 = 0;
          LODWORD(v530) = 0;
          LODWORD(v533) = 0;
          CFStringRef v22 = 0;
          CFTypeRef v549 = 0;
          CFTypeRef v550 = 0;
          CFTypeRef v553 = 0;
          CFTypeRef v552 = 0;
          CFTypeRef cf = 0;
          uint64_t v528 = 0;
          v529 = 0;
          LODWORD(v531) = 1;
          double v69 = -1.0;
          int v527 = -2;
          LODWORD(v532) = -1;
          goto LABEL_251;
        }
LABEL_249:
        if (!a5 && matched) {
          goto LABEL_967;
        }
LABEL_251:
        CMTime v128 = v594;
        unsigned int v129 = *v594;
        BOOL v101 = v129 > 0xD;
        int v130 = (1 << v129) & 0x2401;
        if (v101 || v130 == 0) {
          _StreamPlaylistLogError(0, 4294955032, (uint64_t)&v573, @"extra characters at end of line");
        }
        char v132 = &v128[strcspn(v128, "\r\n")];
        size_t v133 = strspn(v132, "\r\n");
        int v79 = 0;
        unint64_t v68 = (unint64_t)&v132[v133];
        goto LABEL_258;
      }
      LOBYTE(v525) = 0;
      goto LABEL_73;
    }
    CFStringRef v22 = v85;
    if (DiscontinuityDomain == (void *)FigMediaSegmentSpecifierGetDiscontinuityDomain(v141)) {
      goto LABEL_300;
    }
    uint64_t matched = 4294954654;
    _StreamPlaylistLogError(4294954654, 4294955032, (uint64_t)&v573, @"%s not allowed on partial segment boundaries", "#EXT-X-DISCONTINUITY");
    if (a5) {
      goto LABEL_300;
    }
LABEL_73:
    int v79 = 4;
LABEL_258:
    if (v79)
    {
      if (v79 == 4) {
        goto LABEL_967;
      }
      CFTypeRef v54 = v549;
      CFStringRef v55 = 0;
      CFStringRef v56 = 0;
      CFStringRef v57 = 0;
      uint64_t v58 = 0;
      CFTypeRef v556 = 0;
      uint64_t v548 = 0;
      goto LABEL_1304;
    }
  }
  if (sp_MatchTagAndColon((const char *)v68, "#EXT-X-MEDIA-SEQUENCE", 0x15uLL, (const char **)&v594, (uint64_t)&v573))
  {
    if ((_BYTE)v548)
    {
      uint64_t matched = 4294954654;
      _StreamPlaylistLogError(4294954654, 4294949660, (uint64_t)&v573, @"Can only have one of each Media Playlist Tag");
      if (!a5) {
        goto LABEL_967;
      }
    }
    LOBYTE(v548) = 1;
    uint64_t matched = sp_strtoull(v594, &v594, &v593, 10, 0, 1, (uint64_t)"Media Sequence", (uint64_t)&v573);
    if (matched) {
      goto LABEL_249;
    }
    FigMediaSegmentSpecifierSetMediaSequence((uint64_t)v584, v593);
    LOBYTE(v548) = 1;
    goto LABEL_251;
  }
  if (sp_MatchTagAndColon((const char *)v68, "#EXTINF", 7uLL, (const char **)&v594, (uint64_t)&v573))
  {
    *(double *)&returnedPointerOut = 0.0;
    LOBYTE(v599) = 0;
    *(void *)&CMBlockBufferRef blockBufferOut = 0;
    unsigned int v80 = sp_strtod(v594, (char **)&blockBufferOut, (double *)&returnedPointerOut, &v599, (uint64_t)"Segment Duration", (uint64_t)&v573);
    if (v80 || *(double *)&returnedPointerOut >= 0.0)
    {
      if (v80)
      {
        if (v80 == -12642) {
          uint64_t matched = 4294954650;
        }
        else {
          uint64_t matched = v80;
        }
      }
      else
      {
        if (*(double *)&returnedPointerOut > v70) {
          double v70 = *(double *)&returnedPointerOut;
        }
        BOOL v91 = *(double *)&returnedPointerOut != floor(*(double *)&returnedPointerOut);
        FigMediaSegmentSpecifierSetTimeInSeconds((uint64_t)v584, *(double *)&returnedPointerOut);
        unint64_t v92 = returnedPointerOut;
        MaxSegmentDuratiouint64_t n = FigMediaPlaylistGetMaxSegmentDuration((uint64_t)v586);
        if (MaxSegmentDuration < *(double *)&returnedPointerOut) {
          FigMediaPlaylistSetMaxSegmentDuration((uint64_t)v586, *(double *)&returnedPointerOut);
        }
        BYTE4(v508) |= v91;
        ++v523;
        double v71 = v71 + *(double *)&v92;
        int v520 = (v599 & v520);
        uint64_t v94 = blockBufferOut;
        v594 = *(char **)&blockBufferOut;
        if ((void)blockBufferOut && *(unsigned char *)blockBufferOut == 44)
        {
          uint64_t matched = 0;
          v594 = (char *)(v94 + strcspn((const char *)blockBufferOut, "\r\n"));
        }
        else
        {
          uint64_t matched = 0;
        }
      }
    }
    else
    {
      uint64_t matched = 4294954650;
      _StreamPlaylistLogError(4294954650, 4294955032, (uint64_t)&v573, @"Negative number in EXTINF", *(double *)&returnedPointerOut);
    }
    LODWORD(v546) = 1;
    goto LABEL_249;
  }
  if (!strncmp((const char *)v68, "#EXT-X-I-FRAMES-ONLY", 0x14uLL))
  {
    unsigned int v87 = *(char *)(v68 + 20);
    if ((v87 & 0x80000000) != 0)
    {
      if (!__maskrune(v87, 0x500uLL))
      {
LABEL_228:
        v594 = (char *)(v68 + 20);
        if (v519)
        {
          uint64_t matched = 4294954654;
          _StreamPlaylistLogError(4294954654, 4294949660, (uint64_t)&v573, @"Can only have one of each Media Playlist Tag");
          if (!a5) {
            goto LABEL_967;
          }
        }
        else
        {
          uint64_t matched = 0;
        }
        int v519 = 1;
        FigMediaPlaylistSetHasOnlyIFrames((uint64_t)v586, 1);
        goto LABEL_249;
      }
    }
    else if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v87 + 60) & 0x500) == 0)
    {
      goto LABEL_228;
    }
  }
  if (!sp_MatchTagAndColon((const char *)v68, "#EXT-X-CONTENT-STEERING", 0x17uLL, (const char **)&v594, (uint64_t)&v573))
  {
    if (sp_MatchTagAndColon((const char *)v68, "#EXT-X-DISCONTINUITY-SEQUENCE", 0x1DuLL, (const char **)&v594, (uint64_t)&v573))
    {
      *(double *)&returnedPointerOut = 0.0;
      if (BYTE4(v522))
      {
        _StreamPlaylistLogError(4294954654, 4294949660, (uint64_t)&v573, @"Can only have one of each Media Playlist Tag");
        if (!a5) {
          goto LABEL_1384;
        }
      }
      uint64_t v88 = sp_strtoull(v594, &v594, (unint64_t *)&returnedPointerOut, 10, 0, 0, (uint64_t)"Discontinuity Sequence", (uint64_t)&v573);
      uint64_t matched = v88;
      int v89 = HIDWORD(v522);
      if (!v88) {
        int v89 = 1;
      }
      HIDWORD(v522) = v89;
      unsigned int v90 = DiscontinuityDomain;
      if (!v88) {
        unsigned int v90 = returnedPointerOut;
      }
      DiscontinuityCFErrorDomain Domain = v90;
      goto LABEL_249;
    }
    if (StreamingPlaylist_MatchAlphanumericStringExactly((const char *)v68, "#EXT-X-DISCONTINUITY", 0x14uLL, (const char **)&v594))
    {
      DiscontinuityCFErrorDomain Domain = (char *)DiscontinuityDomain + 1;
      LODWORD(v522) = 1;
      FigMediaSegmentSpecifierSetIsDiscontinuity((uint64_t)v584, 1);
      uint64_t matched = 0;
      int v511 = 0;
      goto LABEL_251;
    }
    if (sp_MatchTagAndColon((const char *)v68, "#EXT-X-TARGETDURATION", 0x15uLL, (const char **)&v594, (uint64_t)&v573))
    {
      LODWORD(returnedPointerOut) = 0;
      if (v513)
      {
        _StreamPlaylistLogError(4294954654, 4294949660, (uint64_t)&v573, @"Can only have one of each Media Playlist Tag");
        if (!a5)
        {
LABEL_1384:
          CFStringRef v55 = 0;
          CFStringRef v56 = 0;
          CFStringRef v57 = 0;
          uint64_t v58 = 0;
          CFTypeRef v556 = 0;
          uint64_t v548 = 0;
          uint64_t matched = 4294954654;
          goto LABEL_1301;
        }
      }
      if (sp_strtol(v594, &v594, &returnedPointerOut, 1, (uint64_t)"target duration", (uint64_t)&v573)
        || (returnedPointerOut & 0x80000000) != 0)
      {
        uint64_t matched = 4294954654;
        _StreamPlaylistLogError(4294954654, 4294955025, (uint64_t)&v573, @"Illegal target duration (negative)", p_blockBufferOut);
      }
      else if (returnedPointerOut)
      {
        FigMediaPlaylistSetTargetDuration((uint64_t)v586, (int)returnedPointerOut);
        uint64_t matched = 0;
        LODWORD(v513) = 1;
      }
      else
      {
        uint64_t matched = 4294954654;
        _StreamPlaylistLogError(4294954654, 4294955025, (uint64_t)&v573, @"Illegal target duration (out of range)", p_blockBufferOut);
      }
      goto LABEL_249;
    }
    if (StreamingPlaylist_MatchAlphanumericStringExactly((const char *)v68, "#EXT-X-ENDLIST", 0xEuLL, (const char **)&v594))
    {
      if (FigMediaPlaylistHasEndTag((uint64_t)v586))
      {
        uint64_t matched = 4294954654;
        _StreamPlaylistLogError(4294954654, 4294949660, (uint64_t)&v573, @"Can only have one of each Media Playlist Tag");
        if (!a5) {
          goto LABEL_967;
        }
      }
      else
      {
        uint64_t matched = 0;
      }
      FigMediaPlaylistSetHasEndTag((uint64_t)v586, 1);
      goto LABEL_249;
    }
    if (sp_MatchTagAndColon((const char *)v68, "#EXT-X-ALLOW-CACHE", 0x12uLL, (const char **)&v594, (uint64_t)&v573))
    {
      _StreamPlaylistLogError(0, 4294955028, (uint64_t)&v573, @"%s has been deprecated", "#EXT-X-ALLOW-CACHE");
      uint64_t matched = 0;
      goto LABEL_251;
    }
    if (sp_MatchTagAndColon((const char *)v68, "#EXT-X-KEY", 0xAuLL, (const char **)&v594, (uint64_t)&v573))
    {
      uint64_t matched = PlaylistProcessKey(0, (uint64_t)v586, "#EXT-X-KEY", v594, &v583, &v592, &v594, (uint64_t)&v573);
      if (!matched)
      {
        v500 |= v583 != 0;
        uint64_t v160 = (uint64_t)v592;
        if (v592)
        {
          BYTE4(v515) |= FigContentKeySpecifierGetEncryptionMethod((uint64_t)v592) == 1;
          BYTE4(v502) |= FigContentKeySpecifierGetEncryptionMethod(v160) == 2;
        }
        v518[4] = 1;
      }
      uint64_t v161 = v594;
      v594 = &v161[strcspn(v594, "\r\n")];
      goto LABEL_249;
    }
    if (sp_MatchTagAndColon((const char *)v68, "#EXT-X-SESSION-KEY", 0x12uLL, (const char **)&v594, (uint64_t)&v573))
    {
      uint64_t matched = PlaylistProcessKey((uint64_t)v561, 0, "#EXT-X-SESSION-KEY", v594, &v583, &v592, &v594, (uint64_t)&v573);
      if (!matched)
      {
        uint64_t v162 = (uint64_t)v592;
        if (v592)
        {
          LODWORD(v515) = 1;
          FigContentKeySpecifierSetIsReadInCurrent((uint64_t)v592, 1);
          FigContentKeySpecifierSetIsPrefetchKey(v162, 1);
        }
      }
      BOOL v163 = v594;
      v594 = &v163[strcspn(v594, "\r\n")];
      goto LABEL_351;
    }
    double v164 = 0.0;
    CFArrayRef v165 = theArray;
    CFStringRef v510 = v22;
    if (sp_MatchTagAndColon((const char *)v68, "#EXT-X-STREAM-INF", 0x11uLL, (const char **)&v594, (uint64_t)&v573)|| sp_MatchTagAndColon((const char *)v68, "#EXT-X-I-FRAME-STREAM-INF", 0x19uLL, (const char **)&v594, (uint64_t)&v573))
    {
      *(double *)&returnedPointerOut = 0.0;
      *(void *)&CMBlockBufferRef blockBufferOut = 0;
      int v166 = sp_MatchTagAndColon((const char *)v68, "#EXT-X-I-FRAME-STREAM-INF", 0x19uLL, (const char **)&returnedPointerOut, (uint64_t)&v573);
      int v167 = v166;
      int v168 = (int)v533;
      if (v166) {
        int v168 = 1;
      }
      LODWORD(v533) = v168;
      if (v166) {
        uint64_t v169 = "#EXT-X-I-FRAME-STREAM-INF";
      }
      else {
        uint64_t v169 = "#EXT-X-STREAM-INF";
      }
      int v170 = (char *)StreamingPlaylist_SkipSpacesAndTabs(v594, (uint64_t)&v573);
      CFStringRef v171 = 0;
      LODWORD(v544) = 0;
      uint64_t matched = 0;
      v594 = v170;
      int v172 = HIDWORD(v548);
      while (1)
      {
        unsigned int v173 = *v170;
        BOOL v101 = v173 > 0xD;
        int v174 = (1 << v173) & 0x2401;
        if (!v101 && v174 != 0) {
          break;
        }
        temporaryBlocuint64_t k = 0;
        CMBlockBufferRef v599 = 0;
        double v596 = 0.0;
        v597 = 0;
        *(_DWORD *)v560 = 0;
        free((void *)blockBufferOut);
        *(void *)&CMBlockBufferRef blockBufferOut = 0;
        uint64_t v176 = sp_ParseAttribute(v169, v594, 1, 0, (char **)&v599, &v597, (const char **)&temporaryBlock, (size_t *)&v596, (const char **)&v594, (int *)v560, (UInt8 **)&blockBufferOut, (uint64_t)&v573);
        uint64_t matched = v176;
        if (!v172 && v176) {
          goto LABEL_1388;
        }
        char v177 = v560[0];
        if ((v560[0] & 2) != 0)
        {
          LODWORD(v531) = 0;
        }
        else
        {
          CFTypeRef v178 = (const char *)v599;
          if (v599)
          {
            CFArrayRef v179 = temporaryBlock;
            if (temporaryBlock)
            {
              switch((unint64_t)v597)
              {
                case 3uLL:
                  if (strncmp((const char *)v599, "URI", 3uLL)) {
                    goto LABEL_422;
                  }
                  if (!(_BYTE)v533)
                  {
                    uint64_t matched = 4294954654;
                    _StreamPlaylistLogError(4294954654, 4294955018, (uint64_t)&v573, @"Use of URI in %s", v169);
                    if (!HIDWORD(v548)) {
                      goto LABEL_1388;
                    }
                  }
                  CFURLRef v180 = v581;
                  if (v581)
                  {
                    _StreamPlaylistLogError(0, 4294955018, (uint64_t)&v573, @"Multiple URL in %s - ignoring old one", v169);
                    CFRelease(v180);
                    CFURLRef v581 = 0;
                    if (v580)
                    {
                      CFRelease(v580);
                      v580 = 0;
                    }
                  }
                  if (v177)
                  {
                    StreamingPlaylistCreateMediaURLWithBytes(temporaryBlock, *(CFIndex *)&v596, anURL, (const __CFURL *)v538, &v581, &v580);
                    if (v581) {
                      break;
                    }
                  }
                  else
                  {
                    _StreamPlaylistLogError(4294954654, 4294955032, (uint64_t)&v573, @"%s: missing quotes", "URI");
                  }
                  uint64_t matched = 4294954654;
                  _StreamPlaylistLogError(4294954654, 4294955034, (uint64_t)&v573, @"Invalid URI", p_blockBufferOut, v493);
                  break;
                case 5uLL:
                  if (!strncmp((const char *)v599, "AUDIO", 5uLL))
                  {
                    if ((v177 & 1) == 0)
                    {
                      double v181 = "AUDIO";
                      goto LABEL_453;
                    }
                    CFTypeRef v553 = CFStringCreateWithBytes(structureAllocator, v179, *(CFIndex *)&v596, 0x600u, 1u);
                  }
                  else if (!strncmp(v178, "VIDEO", 5uLL))
                  {
                    if ((v177 & 1) == 0)
                    {
                      double v181 = "VIDEO";
                      goto LABEL_453;
                    }
                    CFTypeRef v550 = CFStringCreateWithBytes(structureAllocator, v179, *(CFIndex *)&v596, 0x600u, 1u);
                  }
                  else
                  {
                    if (strncmp(v178, "SCORE", 5uLL)) {
                      goto LABEL_422;
                    }
                    *(double *)os_log_type_t type = -1.0;
                    uint64_t matched = sp_strtod((const char *)v179, (char **)&temporaryBlock, (double *)type, 0, (uint64_t)"Alternate score", (uint64_t)&v573);
                    if (matched || (uint64_t v184 = *(void *)type, *(double *)type < 0.0))
                    {
                      _StreamPlaylistLogError(4294954654, 4294955032, (uint64_t)&v573, @"%s: Invalid ranking score", "#EXT-X-STREAM-INF");
                      uint64_t v184 = *(void *)&v69;
                      if (matched) {
                        goto LABEL_1388;
                      }
                    }
                    uint64_t matched = 0;
                    double v69 = *(double *)&v184;
                  }
                  break;
                case 6uLL:
                  if (strncmp((const char *)v599, "CODECS", 6uLL)) {
                    goto LABEL_422;
                  }
                  if ((v177 & 1) == 0)
                  {
                    double v181 = "CODECS";
                    goto LABEL_453;
                  }
                  CFTypeRef cf = CFStringCreateWithBytes(structureAllocator, v179, *(CFIndex *)&v596, 0x600u, 1u);
                  break;
                case 9uLL:
                  if (!strncmp((const char *)v599, "BANDWIDTH", 9uLL))
                  {
                    *(double *)os_log_type_t type = 0.0;
                    uint64_t v187 = sp_strtoll((const char *)v179, (char **)&temporaryBlock, (uint64_t *)type, 1, (uint64_t)"bandwidth", (uint64_t)&v573);
                    if (*(uint64_t *)type <= 0)
                    {
                      uint64_t matched = 4294954654;
                      _StreamPlaylistLogError(4294954654, 4294955021, (uint64_t)&v573, @"Zero bandwidth", p_blockBufferOut, v493);
                    }
                    else
                    {
                      uint64_t matched = v187;
                      uint64_t v188 = v528;
                      if (!v187) {
                        uint64_t v188 = *(void *)type;
                      }
                      uint64_t v528 = v188;
                    }
                  }
                  else
                  {
                    if (strncmp(v178, "SUBTITLES", 9uLL)) {
                      goto LABEL_422;
                    }
                    if ((v177 & 1) == 0)
                    {
                      double v181 = "SUBTITLES";
                      goto LABEL_453;
                    }
                    CFTypeRef v549 = CFStringCreateWithBytes(structureAllocator, v179, *(CFIndex *)&v596, 0x600u, 1u);
                  }
                  break;
                case 0xAuLL:
                  uint64_t v182 = strncmp((const char *)v599, "PROGRAM-ID", 0xAuLL);
                  if (!v182)
                  {
                    _StreamPlaylistLogError(v182, 4294955022, (uint64_t)&v573, @"%s has been deprecated and is no longer a valid attribute for %s", "PROGRAM-ID", v169);
                    break;
                  }
                  if (!strncmp(v178, "RESOLUTION", 0xAuLL))
                  {
                    if (!StreamingPlaylist_FindResolution((const char *)v179, &v589, &v588, &temporaryBlock, (uint64_t)&v573))
                    {
                      uint64_t matched = 4294954654;
                      _StreamPlaylistLogError(4294954654, 4294955032, (uint64_t)&v573, @"Could not parse resolution", p_blockBufferOut, v493);
                    }
                  }
                  else if (!strncmp(v178, "FRAME-RATE", 0xAuLL))
                  {
                    if ((_BYTE)v533)
                    {
                      uint64_t matched = 4294954654;
                      _StreamPlaylistLogError(4294954654, 4294951063, (uint64_t)&v573, @"%s: illegal attribute in %s", "FRAME-RATE", v169);
                    }
                    else
                    {
                      uint64_t matched = sp_strtod((const char *)v179, 0, &v569, 0, (uint64_t)"frame rate", (uint64_t)&v573);
                    }
                  }
                  else if (!strncmp(v178, "HDCP-LEVEL", 0xAuLL))
                  {
                    if (!strncasecmp((const char *)v179, "TYPE-0", 6uLL))
                    {
                      int v527 = 0;
                      break;
                    }
                    if (!strncasecmp((const char *)v179, "NONE", 4uLL))
                    {
                      int v202 = -1;
LABEL_503:
                      int v527 = v202;
                      break;
                    }
                    if (!strncasecmp((const char *)v179, "TYPE-1", 6uLL))
                    {
                      int v202 = 1;
                      goto LABEL_503;
                    }
                    uint64_t v183 = "HDCP-LEVEL";
LABEL_469:
                    uint64_t matched = 4294954654;
                    _StreamPlaylistLogError(4294954654, 4294955032, (uint64_t)&v573, @"%s: illegal value", v183, v493);
                  }
                  else
                  {
                    if (strncmp(v178, "PATHWAY-ID", 0xAuLL)) {
                      goto LABEL_422;
                    }
                    if (v177)
                    {
                      CFIndex v190 = *(void *)&v596;
                      if (v596 != 0.0)
                      {
                        size_t v191 = *(void *)&v596;
                        while (1)
                        {
                          int v193 = *v179++;
                          int v192 = v193;
                          unsigned int v194 = (v193 & 0xFFFFFFDF) - 65;
                          if ((v193 - 48) >= 0xA && v194 >= 0x1A)
                          {
                            unsigned int v196 = v192 - 45;
                            BOOL v101 = v196 > 0x32;
                            uint64_t v197 = (1 << v196) & 0x4000000000003;
                            if (v101 || v197 == 0) {
                              break;
                            }
                          }
                          if (!--v191) {
                            goto LABEL_489;
                          }
                        }
                        uint64_t matched = 4294954654;
                        _StreamPlaylistLogError(4294954654, 4294955032, (uint64_t)&v573, @"%s: attribute %s contains illegal characters", v169, "PATHWAY-ID");
                      }
LABEL_489:
                      if (!HIDWORD(v548) && matched) {
                        goto LABEL_1388;
                      }
                      if (v167) {
                        CFTypeRef v199 = v171;
                      }
                      else {
                        CFTypeRef v199 = v539;
                      }
                      if (v199)
                      {
                        CFRelease(v199);
                        CFIndex v190 = *(void *)&v596;
                      }
                      CFStringRef v200 = CFStringCreateWithBytes(structureAllocator, temporaryBlock, v190, 0x8000100u, 1u);
                      CFTypeRef v201 = v539;
                      if (!v167) {
                        CFTypeRef v201 = v200;
                      }
                      CFTypeRef v539 = v201;
                      if (v167) {
                        CFStringRef v171 = v200;
                      }
                    }
                    else
                    {
                      double v181 = "PATHWAY-ID";
LABEL_453:
                      uint64_t matched = 4294954654;
                      _StreamPlaylistLogError(4294954654, 4294955032, (uint64_t)&v573, @"%s: missing quotes", v181, v493);
                    }
                  }
                  break;
                case 0xBuLL:
                  if (!strncmp((const char *)v599, "ALLOWED-CPC", 0xBuLL))
                  {
                    uint64_t matched = PlaylistExtractallowedCPCForFairPlayStreaming((char *)v179, *(size_t *)&v596, (uint64_t)&v573, &v568);
                    if (matched)
                    {
                      uint64_t v568 = 0;
                      if (!HIDWORD(v548)) {
                        goto LABEL_1388;
                      }
                    }
                  }
                  else
                  {
                    if (strncmp(v178, "VIDEO-RANGE", 0xBuLL)) {
                      goto LABEL_422;
                    }
                    if (!strncasecmp((const char *)v179, "SDR", 3uLL))
                    {
                      LODWORD(v532) = 0;
                    }
                    else
                    {
                      if (!strncasecmp((const char *)v179, "PQ", 2uLL))
                      {
                        int v189 = 2;
                      }
                      else
                      {
                        if (strncasecmp((const char *)v179, "HLG", 3uLL))
                        {
                          uint64_t v183 = "VIDEO-RANGE";
                          goto LABEL_469;
                        }
                        int v189 = 1;
                      }
                      LODWORD(v532) = v189;
                    }
                  }
                  break;
                case 0xEuLL:
                  if (!strncmp((const char *)v599, "_AVG-BANDWIDTH", 0xEuLL)) {
                    goto LABEL_425;
                  }
                  goto LABEL_422;
                case 0xFuLL:
                  if (!strncmp((const char *)v599, "CLOSED-CAPTIONS", 0xFuLL))
                  {
                    if (v177)
                    {
                      HIDWORD(v513) = 1;
                      CFStringRef v510 = CFStringCreateWithBytes(structureAllocator, v179, *(CFIndex *)&v596, 0x600u, 1u);
                    }
                    else if (!strncasecmp((const char *)v179, "NONE", 4uLL))
                    {
                      int v512 = 1;
                    }
                    else
                    {
                      uint64_t matched = 4294954654;
                      _StreamPlaylistLogError(4294954654, 4294955032, (uint64_t)&v573, @"%s: missing quotes or illegal value", "CLOSED-CAPTIONS", v493);
                    }
                  }
                  else if (!strncmp(v178, "VIDEO-IMMERSIVE", 0xFuLL))
                  {
                    if (!v544)
                    {
                      if (PlaylistExtractVideoImmersiveAttribute((char *)v179, *(size_t *)&v596, (uint64_t)&v573, (__CFArray **)&v567))
                      {
                        CFStringRef v487 = @"%s: Invalid video immersive tag";
                        v488 = "#EXT-X-STREAM-INF";
                        goto LABEL_1387;
                      }
                      LODWORD(v544) = 0;
                      uint64_t matched = 0;
                    }
                  }
                  else
                  {
LABEL_422:
                    _StreamPlaylistLogError(0, 4294955022, (uint64_t)&v573, @"Invalid attribute for %s", v169, v493);
                  }
                  break;
                case 0x10uLL:
                  if (strncmp((const char *)v599, "REQ-VIDEO-LAYOUT", 0x10uLL)) {
                    goto LABEL_422;
                  }
                  if (v567)
                  {
                    CFRelease(v567);
                    CFTypeRef v567 = 0;
                    CFArrayRef v179 = temporaryBlock;
                  }
                  if (!PlaylistExtractVideoLayoutAttribute((char *)v179, *(size_t *)&v596, (uint64_t)&v573, (__CFArray **)&v567, &v587))goto LABEL_447; {
                  uint64_t matched = 4294954654;
                  }
                  _StreamPlaylistLogError(4294954654, 4294955032, (uint64_t)&v573, @"%s: Invalid video layout tag", "#EXT-X-STREAM-INF");
                  if (!v587) {
                    goto LABEL_1388;
                  }
                  LODWORD(v531) = 0;
LABEL_447:
                  uint64_t matched = 0;
                  HIDWORD(v507) = 1;
                  LODWORD(v544) = 1;
                  break;
                case 0x11uLL:
                  if (!strncmp((const char *)v599, "AVERAGE-BANDWIDTH", 0x11uLL))
                  {
LABEL_425:
                    *(double *)os_log_type_t type = 0.0;
                    uint64_t v185 = sp_strtoll((const char *)v179, (char **)&temporaryBlock, (uint64_t *)type, 1, (uint64_t)"avg_bandwidth", (uint64_t)&v573);
                    if (*(uint64_t *)type <= 0)
                    {
                      uint64_t matched = 4294954654;
                      _StreamPlaylistLogError(4294954654, 4294955021, (uint64_t)&v573, @"Zero average bandwidth", p_blockBufferOut, v493);
                    }
                    else
                    {
                      uint64_t matched = v185;
                      unsigned int v186 = v529;
                      if (!v185) {
                        unsigned int v186 = *(void **)type;
                      }
                      v529 = v186;
                    }
                  }
                  else
                  {
                    if (strncmp(v178, "STABLE-VARIANT-ID", 0x11uLL)) {
                      goto LABEL_422;
                    }
                    CFTypeRef v540 = CFStringCreateWithBytes(structureAllocator, v179, *(CFIndex *)&v596, 0x600u, 1u);
                  }
                  break;
                case 0x13uLL:
                  if (strncmp((const char *)v599, "SUPPLEMENTAL-CODECS", 0x13uLL)) {
                    goto LABEL_422;
                  }
                  if ((v177 & 1) == 0)
                  {
                    double v181 = "SUPPLEMENTAL-CODECS";
                    goto LABEL_453;
                  }
                  CFTypeRef v552 = CFStringCreateWithBytes(structureAllocator, v179, *(CFIndex *)&v596, 0x600u, 1u);
                  break;
                default:
                  goto LABEL_422;
              }
            }
            int v172 = HIDWORD(v548);
          }
        }
        int v170 = v594;
      }
      free((void *)blockBufferOut);
      CFURLRef v203 = v581;
      if (v581)
      {
        if (v531 != 1) {
          goto LABEL_510;
        }
        CFTypeRef v204 = v539;
        if (v167) {
          CFTypeRef v204 = v171;
        }
        uint64_t matched = PlaylistProcessAlternate((uint64_t)v561, v581, v580, v528, v529, (const __CFString *)cf, (const __CFString *)v552, (uint64_t)v553, v569, v69, (void *)v550, (uint64_t)v549, (uint64_t)v510, v533, v589, v588, (uint64_t)v540, v527, (int)v532,
                    v568,
                    (uint64_t)v567,
                    (uint64_t)v204,
                    (unsigned char *)&v571 + 1,
                    (uint64_t)&v573);
        CFURLRef v203 = v581;
        if (v581)
        {
LABEL_510:
          CFRelease(v203);
          CFURLRef v581 = 0;
        }
        if (v580)
        {
          CFRelease(v580);
          v580 = 0;
        }
        if (v171) {
          CFRelease(v171);
        }
        if (matched) {
          goto LABEL_1388;
        }
        int v536 = 1;
        int v205 = 1;
      }
      else
      {
        if ((_BYTE)v533)
        {
          uint64_t matched = 4294954654;
          _StreamPlaylistLogError(4294954654, 4294955033, (uint64_t)&v573, @"No URI in I-Frame variant");
        }
        int v205 = 0;
      }
      LODWORD(v544) = 1;
      CFStringRef v22 = v510;
      goto LABEL_528;
    }
    if (sp_MatchTagAndColon((const char *)v68, "#EXT-X-PROGRAM-DATE-TIME", 0x18uLL, (const char **)&v594, (uint64_t)&v573))
    {
      *(double *)&returnedPointerOut = 0.0;
      if (v545) {
        CFRelease(v545);
      }
      uint64_t v207 = FigCFParseISO8601Date();
      uint64_t matched = v207;
      if (v207)
      {
        _StreamPlaylistLogError(v207, 4294955017, (uint64_t)&v573, @"%s: ISO8601 Date parse error", "#EXT-X-PROGRAM-DATE-TIME");
        CFTypeRef v545 = 0;
      }
      else
      {
        CFTypeRef v545 = CFDateCreate(structureAllocator, *(CFAbsoluteTime *)&returnedPointerOut);
        FigMediaSegmentSpecifierSetImputedDate((uint64_t)v584, *(double *)&returnedPointerOut);
        v518[2] = 1;
        double v72 = *(double *)&returnedPointerOut;
      }
      uint64_t v213 = v594;
      size_t v214 = strcspn(v594, "\r\n");
      unsigned int v215 = &v213[v214];
      v594 = &v213[v214 - 1];
      int v216 = *v594;
      if ((v216 - 48) >= 0xA && v216 != 90) {
        unsigned int v215 = &v213[v214 - 1];
      }
      goto LABEL_562;
    }
    if (sp_MatchTagAndColon((const char *)v68, "#EXT-X-VERSION", 0xEuLL, (const char **)&v594, (uint64_t)&v573))
    {
      if (v499) {
        _StreamPlaylistLogError(4294954654, 4294949660, (uint64_t)&v573, @"Can only have one %s tag", "#EXT-X-VERSION");
      }
      LODWORD(v573) = 0;
      if ((*v594 - 58) < 0xFFFFFFF6)
      {
        uint64_t matched = 4294954654;
        _StreamPlaylistLogError(4294954654, 4294955032, (uint64_t)&v573, @"No Version", p_blockBufferOut);
      }
      else
      {
        int v208 = 0;
        unsigned int v209 = v594 + 1;
        do
        {
          LODWORD(v573) = 10 * v208;
          int v208 = *(v209 - 1) + 10 * v208 - 48;
          LODWORD(v573) = v208;
          v594 = v209;
          unsigned int v210 = *v209++;
        }
        while (v210 - 48 < 0xA);
        if ((v210 & 0x80000000) != 0) {
          int v218 = __maskrune(v210, 0x500uLL);
        }
        else {
          int v218 = *(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v210 + 60) & 0x500;
        }
        if (v218)
        {
          uint64_t matched = 4294954654;
          _StreamPlaylistLogError(4294954654, 4294954986, (uint64_t)&v573, @"Characters after version", p_blockBufferOut);
        }
        else
        {
          if ((v573 - 14) > 0xFFFFFFF2)
          {
            uint64_t matched = 0;
            char v211 = 1;
LABEL_548:
            FigMediaPlaylistSetVersion((uint64_t)v586, v573);
            if (v561) {
              FigMultivariantPlaylistSetVersion((uint64_t)v561, v573);
            }
            if (HIDWORD(v548)) {
              char v212 = 1;
            }
            else {
              char v212 = v211;
            }
            if (v212)
            {
              int v499 = 1;
              goto LABEL_563;
            }
            goto LABEL_1388;
          }
          uint64_t matched = 4294954654;
          _StreamPlaylistLogError(4294954654, 4294954986, (uint64_t)&v573, @"Unsupported version: %u", v573);
        }
      }
      char v211 = 0;
      goto LABEL_548;
    }
    if (sp_MatchTagAndColon((const char *)v68, "#EXT-X-PLAYLIST-TYPE", 0x14uLL, (const char **)&v594, (uint64_t)&v573))
    {
      if (v507)
      {
        uint64_t matched = 4294954654;
        _StreamPlaylistLogError(4294954654, 4294949660, (uint64_t)&v573, @"Can only have one of each Media Playlist Tag");
        if (!HIDWORD(v548)) {
          goto LABEL_1388;
        }
      }
      else
      {
        uint64_t matched = 0;
      }
      if (StreamingPlaylist_MatchAlphanumericStringExactly(v594, "VOD", 3uLL, (const char **)&v594))
      {
        uint64_t v220 = (uint64_t)v586;
        int v221 = 2;
      }
      else
      {
        if (StreamingPlaylist_MatchAlphanumericStringExactly(v594, "EVENT", 5uLL, (const char **)&v594))
        {
          LODWORD(v507) = 1;
          FigMediaPlaylistSetPlaylistType((uint64_t)v586, 1);
          goto LABEL_563;
        }
        uint64_t v224 = StreamingPlaylist_MatchAlphanumericStringExactly(v594, "LIVE", 4uLL, (const char **)&v594);
        if (!v224)
        {
          _StreamPlaylistLogError(v224, 4294955032, (uint64_t)&v573, @"Invalid playlist type");
          LODWORD(v507) = 1;
          goto LABEL_563;
        }
        uint64_t v220 = (uint64_t)v586;
        int v221 = 0;
      }
      FigMediaPlaylistSetPlaylistType(v220, v221);
      LODWORD(v507) = 1;
      goto LABEL_563;
    }
    if (sp_MatchTagAndColon((const char *)v68, "#EXT-X-BYTERANGE", 0x10uLL, (const char **)&v594, (uint64_t)&v573))
    {
      LOBYTE(v599) = 0;
      *(double *)&returnedPointerOut = COERCE_DOUBLE(FigMediaSegmentSpecifierGetStartOffset((uint64_t)v584));
      *(void *)&CMBlockBufferRef blockBufferOut = 0;
      uint64_t matched = PlaylistProcessByteRange((uint64_t *)&blockBufferOut, (uint64_t *)&returnedPointerOut, &v599, (const char **)&v594, 0, (uint64_t)&v573);
      FigMediaSegmentSpecifierSetBytesToRead((uint64_t)v584, blockBufferOut);
      FigMediaSegmentSpecifierSetStartOffset((uint64_t)v584, (uint64_t)returnedPointerOut);
      if (matched)
      {
        _StreamPlaylistLogError(matched, 4294955021, (uint64_t)&v573, @"Couldn't read byte range start offset");
        int v219 = v511;
      }
      else
      {
        int v219 = 1;
        if ((_BYTE)v599)
        {
          int v223 = 1;
          goto LABEL_591;
        }
        int v223 = 1;
        if (v511)
        {
LABEL_591:
          int v521 = v223;
          int v511 = v219;
          goto LABEL_563;
        }
        uint64_t matched = 4294954654;
        _StreamPlaylistLogError(4294954654, 4294955021, (uint64_t)&v573, @"Initial offset not received");
        int v219 = 0;
      }
      int v223 = v521;
      goto LABEL_591;
    }
    if (sp_MatchTagAndColon((const char *)v68, "#EXT-X-BITRATE", 0xEuLL, (const char **)&v594, (uint64_t)&v573))
    {
      uint64_t v222 = PlaylistProcessBitRate(&BitRate, (const char **)&v594, (uint64_t)&v573);
      uint64_t matched = v222;
      if (v222)
      {
        _StreamPlaylistLogError(v222, 4294948093, (uint64_t)&v573, @"Couldn't read bitrate value");
        LODWORD(v516) = 1;
        goto LABEL_563;
      }
      LODWORD(v516) = 1;
      goto LABEL_692;
    }
    if (sp_MatchTagAndColon((const char *)v68, "#EXT-X-MEDIA", 0xCuLL, (const char **)&v594, (uint64_t)&v573))
    {
      *(void *)v494 = 0;
      v495 = 0;
      unsigned int v225 = 0;
      CFStringRef v496 = 0;
      CFStringRef v498 = 0;
      uint64_t v58 = 0;
      CFStringRef v57 = 0;
      CFStringRef v56 = 0;
      v560[0] = 0;
      *(_WORD *)v558 = 0;
      *(void *)&CMBlockBufferRef blockBufferOut = 0;
      int v517 = 1;
      while (1)
      {
        unsigned int v226 = *v594;
        BOOL v101 = v226 > 0xD;
        int v227 = (1 << v226) & 0x2401;
        if (!v101 && v227 != 0) {
          break;
        }
        CMBlockBufferRef v599 = 0;
        *(double *)&returnedPointerOut = 0.0;
        v597 = 0;
        temporaryBlocuint64_t k = 0;
        *(_DWORD *)os_log_type_t type = 0;
        free((void *)blockBufferOut);
        *(void *)&CMBlockBufferRef blockBufferOut = 0;
        uint64_t v229 = sp_ParseAttribute("#EXT-X-MEDIA", v594, 1, 0, &returnedPointerOut, &temporaryBlock, (const char **)&v599, (size_t *)&v597, (const char **)&v594, (int *)type, (UInt8 **)&blockBufferOut, (uint64_t)&v573);
        uint64_t matched = v229;
        if (!HIDWORD(v548) && v229) {
          goto LABEL_1401;
        }
        os_log_type_t v230 = type[0];
        if ((type[0] & 2) != 0) {
          goto LABEL_729;
        }
        uint64_t v231 = returnedPointerOut;
        if (*(double *)&returnedPointerOut != 0.0)
        {
          uint64_t v232 = (UInt8 *)v599;
          if (v599)
          {
            switch((unint64_t)temporaryBlock)
            {
              case 3uLL:
                if (!strncmp(returnedPointerOut, "URI", 3uLL))
                {
                  if ((v230 & 1) == 0)
                  {
                    uint64_t v233 = "URI";
                    goto LABEL_665;
                  }
                  StreamingPlaylistCreateMediaURLWithBytes(v232, (CFIndex)v597, anURL, (const __CFURL *)v538, &v579, &v578);
                }
                break;
              case 4uLL:
                if (!strncmp(returnedPointerOut, "TYPE", 4uLL))
                {
                  if (!strncasecmp((const char *)v232, "AUDIO", 5uLL))
                  {
                    unsigned int v225 = 1936684398;
                  }
                  else if (!strncasecmp((const char *)v232, "VIDEO", 5uLL))
                  {
                    unsigned int v225 = 1986618469;
                  }
                  else if (!strncasecmp((const char *)v232, "SUBTITLES", 9uLL))
                  {
                    unsigned int v225 = 1935832172;
                  }
                  else if (!strncasecmp((const char *)v232, "CLOSED-CAPTIONS", 0xFuLL))
                  {
                    unsigned int v225 = 1668047728;
                  }
                  else
                  {
                    _StreamPlaylistLogError(0, 4294954985, (uint64_t)&v573, @"Unknown type %s in EXT-X-MEDIA", v232);
                    int v517 = 0;
                  }
                }
                else if (!strncmp(v231, "NAME", 4uLL))
                {
                  if (v498)
                  {
                    uint64_t matched = 4294954654;
                    _StreamPlaylistLogError(4294954654, 4294955031, (uint64_t)&v573, @"%s: duplicate name", "NAME");
                  }
                  if ((v230 & 1) == 0)
                  {
                    uint64_t v233 = "NAME";
                    goto LABEL_665;
                  }
                  CFStringRef v498 = CFStringCreateWithBytes(structureAllocator, (const UInt8 *)v599, (CFIndex)v597, 0x8000100u, 1u);
                }
                break;
              case 6uLL:
                if (!strncmp(returnedPointerOut, "FORCED", 6uLL))
                {
                  uint64_t v234 = v558;
                  goto LABEL_621;
                }
                break;
              case 7uLL:
                if (!strncmp(returnedPointerOut, "DEFAULT", 7uLL))
                {
                  uint64_t v234 = &v558[1];
LABEL_621:
                  uint64_t v235 = sp_MatchYesOrNo((uint64_t)v231, (char *)v232, (uint64_t)&v573, v234);
                  goto LABEL_622;
                }
                break;
              case 8uLL:
                if (!strncmp(returnedPointerOut, "GROUP-ID", 8uLL))
                {
                  if ((v230 & 1) == 0)
                  {
                    uint64_t v233 = "GROUP-ID";
                    goto LABEL_665;
                  }
                  if (v58)
                  {
                    CFRelease(v58);
                    uint64_t v232 = (UInt8 *)v599;
                  }
                  uint64_t v58 = (__CFString *)CFStringCreateWithBytes(structureAllocator, v232, (CFIndex)v597, 0x600u, 1u);
                }
                else if (!strncmp(v231, "LANGUAGE", 8uLL))
                {
                  if (v56)
                  {
                    uint64_t matched = 4294954654;
                    _StreamPlaylistLogError(4294954654, 4294955031, (uint64_t)&v573, @"%s: duplicate language", "LANGUAGE");
                  }
                  if ((v230 & 1) == 0)
                  {
                    uint64_t v233 = "LANGUAGE";
                    goto LABEL_665;
                  }
                  CFStringRef v56 = CFStringCreateWithBytes(structureAllocator, (const UInt8 *)v599, (CFIndex)v597, 0x600u, 1u);
                }
                else if (!strncmp(v231, "CHANNELS", 8uLL))
                {
                  if ((v230 & 1) == 0)
                  {
                    uint64_t v233 = "CHANNELS";
                    goto LABEL_665;
                  }
                  if (v495)
                  {
                    CFRelease(v495);
                    uint64_t v232 = (UInt8 *)v599;
                  }
                  v495 = (__CFString *)CFStringCreateWithBytes(structureAllocator, v232, (CFIndex)v597, 0x600u, 1u);
                }
                break;
              case 9uLL:
                if (!strncmp(returnedPointerOut, "BIT-DEPTH", 9uLL))
                {
                  double v596 = 0.0;
                  if (sp_strtod((const char *)v232, (char **)&v599, &v596, 0, (uint64_t)"bit depth", (uint64_t)&v573)|| v596 <= 0.0)
                  {
                    uint64_t matched = 4294954654;
                    _StreamPlaylistLogError(4294954654, 4294955032, (uint64_t)&v573, @"%s: invalid bit depth", "#EXT-X-MEDIA");
                  }
                  else
                  {
                    uint64_t matched = 0;
                    v494[1] = (int)v596;
                  }
                }
                break;
              case 0xAuLL:
                if (!strncmp(returnedPointerOut, "AUTOSELECT", 0xAuLL))
                {
                  uint64_t matched = sp_MatchYesOrNo((uint64_t)v231, (char *)v232, (uint64_t)&v573, v560);
                  v494[0] = 1;
                }
                break;
              case 0xBuLL:
                if (!strncmp(returnedPointerOut, "INSTREAM-ID", 0xBuLL))
                {
                  if ((v230 & 1) == 0)
                  {
                    uint64_t v233 = "INSTREAM-ID";
                    goto LABEL_665;
                  }
                  CFStringRef v496 = CFStringCreateWithBytes(structureAllocator, v232, (CFIndex)v597, 0x8000100u, 0);
                }
                else if (!strncmp(v231, "SAMPLE-RATE", 0xBuLL))
                {
                  double v596 = 0.0;
                  if (sp_strtod((const char *)v232, (char **)&v599, &v596, 0, (uint64_t)"sample rate", (uint64_t)&v573)|| v596 <= 0.0)
                  {
                    uint64_t matched = 4294954654;
                    _StreamPlaylistLogError(4294954654, 4294955032, (uint64_t)&v573, @"%s: invalid sample rate", "#EXT-X-MEDIA");
                  }
                  else
                  {
                    uint64_t matched = 0;
                    double v164 = v596;
                  }
                }
                break;
              case 0xEuLL:
                if (!strncmp(returnedPointerOut, "ASSOC-LANGUAGE", 0xEuLL))
                {
                  if (v57)
                  {
                    uint64_t matched = 4294954654;
                    _StreamPlaylistLogError(4294954654, 4294955031, (uint64_t)&v573, @"%s: duplicate language", "ASSOC-LANGUAGE");
                  }
                  if ((v230 & 1) == 0)
                  {
                    uint64_t v233 = "ASSOC-LANGUAGE";
                    goto LABEL_665;
                  }
                  CFStringRef v57 = CFStringCreateWithBytes(structureAllocator, (const UInt8 *)v599, (CFIndex)v597, 0x600u, 1u);
                }
                break;
              case 0xFuLL:
                if (!strncmp(returnedPointerOut, "CHARACTERISTICS", 0xFuLL))
                {
                  if ((v230 & 1) == 0)
                  {
                    uint64_t v233 = "CHARACTERISTICS";
                    goto LABEL_665;
                  }
                  if (v577)
                  {
                    CFRelease(v577);
                    CFArrayRef v577 = 0;
                    uint64_t v232 = (UInt8 *)v599;
                  }
                  uint64_t v235 = PlaylistCreateCharacteristicsArray((char *)v232, (size_t)v597, (uint64_t)&v573, &v577);
LABEL_622:
                  uint64_t matched = v235;
                }
                break;
              case 0x13uLL:
                if (!strncmp(returnedPointerOut, "STABLE-RENDITION-ID", 0x13uLL))
                {
                  if (v540)
                  {
                    uint64_t matched = 4294954654;
                    _StreamPlaylistLogError(4294954654, 4294955031, (uint64_t)&v573, @"%s: duplicate stable stream identifier", "STABLE-RENDITION-ID");
                  }
                  if (v230)
                  {
                    CFTypeRef v540 = CFStringCreateWithBytes(structureAllocator, (const UInt8 *)v599, (CFIndex)v597, 0x600u, 1u);
                  }
                  else
                  {
                    uint64_t v233 = "STABLE-RENDITION-ID";
LABEL_665:
                    uint64_t matched = 4294954654;
                    _StreamPlaylistLogError(4294954654, 4294955032, (uint64_t)&v573, @"%s: missing quotes", v233);
                  }
                }
                break;
              default:
                break;
            }
            if (!HIDWORD(v548) && matched) {
              goto LABEL_1401;
            }
          }
        }
        if (!v517)
        {
LABEL_729:
          free((void *)blockBufferOut);
          goto LABEL_809;
        }
      }
      free((void *)blockBufferOut);
      uint64_t v236 = FigGetCFStringForOSTypeValue();
      if (v225 && v58 && v498)
      {
        uint64_t v237 = v236;
        if (v558[1] && v494[0] && !v560[0])
        {
          CFStringRef v489 = @"%s: DEFAULT=YES when AUTOSELECT=NO";
          v490 = "#EXT-X-MEDIA";
          goto LABEL_1393;
        }
        if (v225 == 1668047728)
        {
          if (v579)
          {
            CFStringRef v489 = @"URL specified for Closed Captions";
LABEL_1394:
            uint64_t matched = 4294954654;
            uint64_t v491 = 4294955030;
LABEL_1400:
            _StreamPlaylistLogError(4294954654, v491, (uint64_t)&v573, v489, p_blockBufferOut, v493);
            goto LABEL_1401;
          }
          if (!v496)
          {
            uint64_t matched = 4294954654;
            _StreamPlaylistLogError(4294954654, 4294954977, (uint64_t)&v573, @"Closed Caption INSTREAM-ID not specified", p_blockBufferOut, v493);
            goto LABEL_1401;
          }
          if (!FigClosedCaptionGetClosedCaptionTypeAndChannelNumber(v496, 0, 0))
          {
            CFStringRef v489 = @"Invalid Entry for %s %@";
            CFStringRef v493 = v496;
            v490 = "INSTREAM-ID";
LABEL_1393:
            p_CMBlockBufferRef blockBufferOut = v490;
            goto LABEL_1394;
          }
LABEL_795:
          CFArrayRef v270 = v577;
          if (BYTE8(v575) && v577)
          {
            returnedPointerOut = (char *)v225;
            v601 = (__CFString *)&v573;
            v608.length = CFArrayGetCount(v577);
            v608.locatiouint64_t n = 0;
            CFArrayApplyFunction(v270, v608, (CFArrayApplierFunction)PlaylistCharacteristicsCheckFn, &returnedPointerOut);
          }
          if (v225 == 1668047728)
          {
            uint64_t v271 = PlaylistAddCharacteristicsForClosedCaptions(&v577);
            if (v271) {
              goto LABEL_1403;
            }
            CFURLRef v272 = v579;
            char v273 = v579 == 0;
            CFArrayRef v270 = v577;
          }
          else
          {
            char v273 = 0;
            CFURLRef v272 = v579;
          }
          uint64_t matched = PlaylistAddMediaGroup((uint64_t)v561, v225, v58, v56, v498, v272, v578, v540, v164, v558[1], v560[0], v558[0], v273, v270, v57, v496, v495, v494[1], &valuePtr);
          if (matched || !v237)
          {
LABEL_809:
            if (v495) {
              CFRelease(v495);
            }
            if (v496) {
              CFRelease(v496);
            }
            if (v58) {
              CFRelease(v58);
            }
            if (v56) {
              CFRelease(v56);
            }
            if (v57) {
              CFRelease(v57);
            }
            if (v579)
            {
              CFRelease(v579);
              CFURLRef v579 = 0;
            }
            if (v578)
            {
              CFRelease(v578);
              v578 = 0;
            }
            if (v498) {
              CFRelease(v498);
            }
            if (v577)
            {
              CFRelease(v577);
              CFArrayRef v577 = 0;
            }
            if (v540) {
              CFRelease(v540);
            }
            if (HIDWORD(v548) || !matched)
            {
              CFTypeRef v540 = 0;
              HIDWORD(v516) = 1;
              goto LABEL_563;
            }
            CFStringRef v498 = 0;
            CFStringRef v56 = 0;
            CFStringRef v57 = 0;
            uint64_t v58 = 0;
LABEL_1401:
            CFTypeRef v556 = 0;
            uint64_t v548 = 0;
            CFStringRef v22 = v510;
            CFTypeRef v54 = v549;
            CFStringRef v55 = v498;
            goto LABEL_1302;
          }
          CFStringRef v274 = CFStringCreateWithFormat(structureAllocator, 0, @"%@%@%@", v58, v498, v237);
          if (v274)
          {
            CFStringRef v275 = v274;
            if (CFSetContainsValue(theSet, v274)) {
              _StreamPlaylistLogError(4294954654, 4294955031, (uint64_t)&v573, @"%s: duplicate name (%@) for rendition group \"%@\"", "#EXT-X-MEDIA", v498, v58);
            }
            else {
              CFSetAddValue(theSet, v275);
            }
            CFRelease(v275);
            uint64_t matched = 0;
            goto LABEL_809;
          }
          uint64_t v271 = FigSignalErrorAt();
LABEL_1403:
          uint64_t matched = v271;
          goto LABEL_1401;
        }
        if (v225 == 1986618469 && v57)
        {
          CFStringRef v489 = @"Cannot specify alternate language for video streams";
        }
        else
        {
          if (v225 == 1935832172 && !v579)
          {
            uint64_t matched = 4294954654;
            _StreamPlaylistLogError(4294954654, 4294955033, (uint64_t)&v573, @"Missing mandatory URL for subtitle media selection", p_blockBufferOut, v493);
            goto LABEL_1401;
          }
          if (v225 == 1936684398)
          {
            if (!v496) {
              goto LABEL_795;
            }
            if ((int)v573 <= 12) {
              _StreamPlaylistLogError(4294954654, 4294954986, (uint64_t)&v573, @"Audio instream ID requires version 13 or greater");
            }
            CFTypeID v247 = CFGetTypeID(v496);
            if (v247 == CFStringGetTypeID())
            {
              int CharacterAtIndex = CFStringGetCharacterAtIndex(v496, 0);
              int v501 = 1;
              if (HIDWORD(v548) || (CharacterAtIndex - 48) < 0xA) {
                goto LABEL_795;
              }
            }
            else if (HIDWORD(v548))
            {
              int v501 = 1;
              goto LABEL_795;
            }
            CFStringRef v489 = @"Audio instream ID must be a quoted, numerical, string";
          }
          else
          {
            if (!v496) {
              goto LABEL_795;
            }
            CFStringRef v489 = @"Instream ID only valid for Audio and Closed Captions";
          }
        }
      }
      else
      {
        CFStringRef v489 = @"Missing mandatory media selection tags";
      }
      uint64_t matched = 4294954654;
      uint64_t v491 = 4294955032;
      goto LABEL_1400;
    }
    if (sp_MatchTagAndColon((const char *)v68, "#EXT-X-MAP", 0xAuLL, (const char **)&v594, (uint64_t)&v573))
    {
      CFStringRef v238 = 0;
      int v239 = 0;
      temporaryBlocuint64_t k = 0;
      CMBlockBufferRef v599 = 0;
      v597 = 0;
      while (1)
      {
        unsigned int v240 = *v594;
        BOOL v101 = v240 > 0xD;
        int v241 = (1 << v240) & 0x2401;
        if (!v101 && v241 != 0) {
          break;
        }
        *(double *)&returnedPointerOut = 0.0;
        *(void *)&CMBlockBufferRef blockBufferOut = 0;
        double v596 = 0.0;
        *(double *)os_log_type_t type = 0.0;
        *(_DWORD *)v560 = 0;
        free(v597);
        v597 = 0;
        uint64_t v243 = sp_ParseAttribute("#EXT-X-MAP", v594, 1, 0, &returnedPointerOut, &v596, (const char **)&blockBufferOut, (size_t *)type, (const char **)&v594, (int *)v560, &v597, (uint64_t)&v573);
        uint64_t matched = v243;
        if (!HIDWORD(v548) && v243) {
          goto LABEL_1388;
        }
        char v244 = v560[0];
        if ((v560[0] & 2) != 0)
        {
          int v239 = 1;
        }
        else if (*(double *)&returnedPointerOut != 0.0)
        {
          uint64_t v245 = (const UInt8 *)blockBufferOut;
          if ((void)blockBufferOut)
          {
            if (*(void *)&v596 == 9)
            {
              if (!strncmp(returnedPointerOut, "BYTERANGE", 9uLL))
              {
                if ((v244 & 1) == 0)
                {
                  uint64_t v280 = "BYTERANGE";
LABEL_848:
                  uint64_t matched = 4294954654;
                  _StreamPlaylistLogError(4294954654, 4294955032, (uint64_t)&v573, @"%s %s: missing quotes", "#EXT-X-MAP", v280);
LABEL_744:
                  free(v597);
                  if (!v238)
                  {
LABEL_780:
                    if (HIDWORD(v548) || !matched)
                    {
                      if (v591)
                      {
                        LODWORD(v530) = 1;
                        FigMediaSegmentSpecifierSetIsReadInCurrent((uint64_t)v591, 1);
                        uint64_t v264 = (uint64_t)v592;
                        FigMediaSegmentSpecifierSetContentKeySpecifier((uint64_t)v591, v592);
                        CFTypeRef v265 = v583;
                        FigMediaSegmentSpecifierSetIV((uint64_t)v591, v583);
                        if (v264)
                        {
                          int EncryptionMethod = FigContentKeySpecifierGetEncryptionMethod(v264);
                          LODWORD(v530) = 1;
                          if (!v265 && EncryptionMethod == 3)
                          {
                            _StreamPlaylistLogError(0, 4294949666, (uint64_t)&v573, @"Explicit IV is required for map entry for full segment encryption");
                            uint64_t matched = 0;
                            LODWORD(v530) = 1;
                            if (!HIDWORD(v548))
                            {
                              if (dword_1E9351370)
                              {
                                LODWORD(v596) = 0;
                                type[0] = OS_LOG_TYPE_DEFAULT;
                                BOOL v267 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                                unsigned int v268 = LODWORD(v596);
                                if (os_log_type_enabled(v267, type[0])) {
                                  unsigned int v269 = v268;
                                }
                                else {
                                  unsigned int v269 = v268 & 0xFFFFFFFE;
                                }
                                if (v269)
                                {
                                  LODWORD(blockBufferOut) = 136315138;
                                  *(void *)((char *)&blockBufferOut + 4) = "FigStreamPlaylistParseInProcess";
                                  LODWORD(v493) = 12;
                                  p_CMBlockBufferRef blockBufferOut = (const char *)&blockBufferOut;
                                  _os_log_send_and_compose_impl();
                                }
                                LODWORD(v530) = 1;
                                fig_log_call_emit_and_clean_up_after_send_and_compose();
                                uint64_t matched = 0;
                              }
                            }
                          }
                        }
                      }
                      v518[3] = 1;
                      goto LABEL_563;
                    }
LABEL_1388:
                    CFStringRef v55 = 0;
                    CFStringRef v56 = 0;
                    CFStringRef v57 = 0;
                    uint64_t v58 = 0;
                    CFTypeRef v556 = 0;
                    uint64_t v548 = 0;
LABEL_1300:
                    CFStringRef v22 = v510;
                    goto LABEL_1301;
                  }
LABEL_779:
                  CFRelease(v238);
                  goto LABEL_780;
                }
                uint64_t matched = PlaylistProcessByteRange((uint64_t *)&temporaryBlock, (uint64_t *)&v599, 0, (const char **)&blockBufferOut, *(uint64_t *)type, (uint64_t)&v573);
              }
            }
            else if (*(void *)&v596 == 3 && !strncmp(returnedPointerOut, "URI", 3uLL))
            {
              if ((v244 & 1) == 0)
              {
                uint64_t v280 = "URI";
                goto LABEL_848;
              }
              CFAllocatorRef v246 = (const __CFAllocator *)FigGetAllocatorForMedia();
              CFStringRef v238 = CFStringCreateWithBytes(v246, v245, *(CFIndex *)type, 0x8000100u, 0);
            }
          }
        }
        if (matched) {
          goto LABEL_744;
        }
      }
      if (v239)
      {
        uint64_t matched = 0;
        goto LABEL_744;
      }
      if (!v238)
      {
        CFStringRef v487 = @"Missing mandatory URL for %s";
        v488 = "#EXT-X-MAP";
LABEL_1387:
        uint64_t matched = 4294954654;
        _StreamPlaylistLogError(4294954654, 4294955032, (uint64_t)&v573, v487, v488);
        goto LABEL_1388;
      }
      if (v591)
      {
        CFRelease(v591);
        v591 = 0;
      }
      MatchingMapEntry = FindMatchingMapEntry((uint64_t)v586, (uint64_t)v238, (uint64_t)v599, (uint64_t)temporaryBlock);
      v591 = MatchingMapEntry;
      if (MatchingMapEntry && (CFRetain(MatchingMapEntry), v591)) {
        uint64_t matched = 0;
      }
      else {
        uint64_t matched = PlaylistCreateMapEntry((uint64_t)v586, v238, (uint64_t)v599, (uint64_t)temporaryBlock, v593, &v591);
      }
      free(v597);
      LODWORD(v502) = 1;
      goto LABEL_779;
    }
    if (sp_MatchTagAndColon((const char *)v68, "#EXT-X-PART-INF", 0xFuLL, (const char **)&v594, (uint64_t)&v573))
    {
      uint64_t v249 = PlaylistProcessPartInfTag((uint64_t)v586, v594, (uint64_t)&v573);
      uint64_t matched = v249;
      if (HIDWORD(v548) || !v249)
      {
        if (HIDWORD(v514))
        {
          uint64_t matched = 4294954654;
          _StreamPlaylistLogError(4294954654, 4294949660, (uint64_t)&v573, @"Can only have one of each Media Playlist Tag");
        }
        if (HIDWORD(v548) || !matched)
        {
          unsigned int v250 = v594;
          v594 = &v250[strcspn(v594, "\r\n")];
          HIDWORD(v514) = 1;
          goto LABEL_563;
        }
      }
      goto LABEL_1388;
    }
    if (sp_MatchTagAndColon((const char *)v68, "#EXT-X-PART", 0xBuLL, (const char **)&v594, (uint64_t)&v573))
    {
      if (!v585)
      {
        CFIndex v252 = 0;
        do
        {
          CFArrayRef v253 = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers((uint64_t)v586);
          if (v253) {
            CFArrayRef v253 = (const __CFArray *)CFArrayGetCount(v253);
          }
          if (v252 >= (uint64_t)v253) {
            goto LABEL_770;
          }
          CFArrayRef v254 = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers((uint64_t)v586);
          uint64_t v255 = CFArrayGetValueAtIndex(v254, v252);
          uint64_t v256 = FigMediaSegmentSpecifierGetMediaSequence((uint64_t)v255);
          ++v252;
        }
        while (v256 != FigMediaSegmentSpecifierGetMediaSequence((uint64_t)v584));
        DiscontinuityCFErrorDomain Domain = (void *)FigMediaSegmentSpecifierGetMediaSequence((uint64_t)v255);
      }
LABEL_770:
      double v257 = v72 + v73;
      if (v72 == 0.0) {
        double v257 = 0.0;
      }
      uint64_t v258 = PlaylistProcessPartTag((uint64_t)v586, v594, (uint64_t)v584, v592, v591, (uint64_t)DiscontinuityDomain, v583, (uint64_t)&v573, v257, &v570);
      uint64_t matched = v258;
      if (HIDWORD(v548) || !v258)
      {
        uint64_t v259 = v594;
        v594 = &v259[strcspn(v594, "\r\n")];
        FigMediaPlaylistSetHasPartTag((uint64_t)v586, 1);
        FigMediaSegmentSpecifierGetPartialSegments((uint64_t)v584);
        uint64_t v260 = FigCFArrayGetLastValue();
        if (v260)
        {
          uint64_t v261 = v260;
          double v262 = FigMediaSegmentSpecifierGetTimeInSeconds(v260);
          if ((_BYTE)v514) {
            BOOL v263 = 1;
          }
          else {
            BOOL v263 = FigMediaSegmentSpecifierIsMarkedIndependent(v261) != 0;
          }
          LOBYTE(v514) = v263;
        }
        else
        {
          LOBYTE(v514) = v514 != 0;
          double v262 = 0.0;
        }
        double v73 = v73 + v262;
        goto LABEL_563;
      }
      goto LABEL_1388;
    }
    if (sp_MatchTagAndColon((const char *)v68, "#EXT-X-RENDITION-REPORT", 0x17uLL, (const char **)&v594, (uint64_t)&v573))
    {
      uint64_t v276 = PlaylistProcessRenditionReportTag((uint64_t)v586, v594, anURL, (uint64_t)&v573);
      uint64_t matched = v276;
      if (HIDWORD(v548) || !v276)
      {
        BOOL v277 = v594;
        v594 = &v277[strcspn(v594, "\r\n")];
        LODWORD(v506) = 1;
        goto LABEL_563;
      }
      goto LABEL_1388;
    }
    if (sp_MatchTagAndColon((const char *)v68, "#EXT-X-PRELOAD-HINT", 0x13uLL, (const char **)&v594, (uint64_t)&v573))
    {
      uint64_t v278 = PlaylistProcessPreloadHintTag((uint64_t)v586, v594, (uint64_t)&v573);
      uint64_t matched = v278;
      if (HIDWORD(v548) || !v278)
      {
        uint64_t v279 = v594;
        v594 = &v279[strcspn(v594, "\r\n")];
        HIDWORD(v505) = 1;
        goto LABEL_563;
      }
      goto LABEL_1388;
    }
    if (!sp_MatchTagAndColon((const char *)v68, "#EXT-X-START", 0xCuLL, (const char **)&v594, (uint64_t)&v573))
    {
      if (sp_MatchTagAndColon((const char *)v68, "#EXT-X-SESSION-DATA", 0x13uLL, (const char **)&v594, (uint64_t)&v573)|| sp_MatchTagAndColon((const char *)v68, "#EXT-X-SESSION-DATA-ITUNES", 0x1AuLL, (const char **)&v594, (uint64_t)&v573))
      {
        uint64_t matched = PlaylistProcessSessionDataTag((uint64_t)v561, v594, anURL, (uint64_t)&v573);
        unsigned int v291 = v594;
        v594 = &v291[strcspn(v594, "\r\n")];
        v518[0] = 1;
        goto LABEL_563;
      }
      if (StreamingPlaylist_MatchAlphanumericStringExactly((const char *)v68, "#EXT-X-INDEPENDENT-SEGMENTS", 0x1BuLL, (const char **)&v594))
      {
        FigMediaPlaylistSetHasIndependentSegments((uint64_t)v586, 1);
        if (v561) {
          FigMultivariantPlaylistSetHasIndependentSegments((uint64_t)v561, 1);
        }
        uint64_t matched = 0;
      }
      else
      {
        if (sp_MatchTagAndColon((const char *)v68, "#EXT-X-DATERANGE", 0x10uLL, (const char **)&v594, (uint64_t)&v573))
        {
          uint64_t matched = PlaylistProcessTaggedRangeTag((uint64_t)v586, v594, &v571, (uint64_t)&v573);
          double v293 = v594;
          v594 = &v293[strcspn(v594, "\r\n")];
          LODWORD(v505) = 1;
          goto LABEL_563;
        }
        if (StreamingPlaylist_MatchAlphanumericStringExactly((const char *)v68, "#EXT-X-GAP", 0xAuLL, (const char **)&v594))
        {
          uint64_t matched = 0;
          v594 = (char *)(v68 + strcspn((const char *)v68, "\r\n"));
          LOBYTE(v534) = 1;
          v518[1] = 1;
        }
        else
        {
          if (sp_MatchTagAndColon((const char *)v68, "#EXT-X-DEFINE", 0xDuLL, (const char **)&v594, (uint64_t)&v573))
          {
            uint64_t matched = PlaylistProcessVariableTag(v594, a11, a12, &v582, (uint64_t)&v573);
            unsigned int v294 = v594;
            unsigned int v215 = &v294[strcspn(v594, "\r\n")];
LABEL_562:
            v594 = v215;
            goto LABEL_563;
          }
          if (sp_MatchTagAndColon((const char *)v68, "#EXT-X-SERVER-CONTROL", 0x15uLL, (const char **)&v594, (uint64_t)&v573))
          {
            if (!HIDWORD(v506)
              || (uint64_t matched = 4294954654,
                  _StreamPlaylistLogError(4294954654, 4294949660, (uint64_t)&v573, @"Can only have one of each Media Playlist Tag"), HIDWORD(v548)))
            {
              uint64_t matched = PlaylistProcessServerControlTag((uint64_t)v586, v594, (uint64_t)&v573, PartHoldBackDuration, HoldBackDuration);
              double v295 = v594;
              v594 = &v295[strcspn(v594, "\r\n")];
              HIDWORD(v506) = 1;
              goto LABEL_563;
            }
            goto LABEL_1388;
          }
          uint64_t v296 = sp_MatchTagAndColon((const char *)v68, "#EXT-X-SKIP", 0xBuLL, (const char **)&v594, (uint64_t)&v573);
          if (v296)
          {
            *(void *)&CMBlockBufferRef blockBufferOut = 0;
            CMBlockBufferRef v599 = 0;
            *(double *)&returnedPointerOut = 0.0;
            uint64_t v297 = (uint64_t)v586;
            CMTime v298 = v594;
            uint64_t v299 = FigMediaSegmentSpecifierGetMediaSequence((uint64_t)v584);
            uint64_t matched = PlaylistProcessSkipTag(v297, v298, (uint64_t)&v573, v299, (uint64_t)v545, v585, &v585, (unint64_t *)&returnedPointerOut, (double *)&blockBufferOut, (CFTypeRef *)&v599);
            CFTypeRef v300 = v594;
            v594 = &v300[strcspn(v594, "\r\n")];
            if (v585) {
              uint64_t NextSegment = FigMediaSegmentSpecifierGetPreviousSegment(v585);
            }
            else {
              uint64_t NextSegment = 0;
            }
            if (v599)
            {
              if (theArray)
              {
                CFArrayRef v301 = (const __CFArray *)FigCFArrayCreateConcatenationOfTwoArrays();
                CFArrayRef v302 = v301;
                if (v301) {
                  CFRetain(v301);
                }
                CFRelease(theArray);
                CFRelease(v599);
                CFArrayRef v165 = v302;
              }
              else
              {
                CFArrayRef v165 = v599;
              }
            }
            int v205 = 0;
            if (!matched && NextSegment)
            {
              uint64_t v303 = FigMediaSegmentSpecifierGetStartOffset(NextSegment);
              uint64_t v304 = FigMediaSegmentSpecifierGetBytesToRead(NextSegment);
              CFTypeRef v305 = v592;
              __int16 v306 = (const void *)FigMediaSegmentSpecifierGetContentKeySpecifier(NextSegment);
              CFTypeRef v592 = v306;
              if (v306) {
                CFRetain(v306);
              }
              if (v305) {
                CFRelease(v305);
              }
              int v307 = v591;
              __int16 v308 = (const void *)FigMediaSegmentSpecifierGetMapSegmentSpecifier(NextSegment);
              v591 = v308;
              if (v308) {
                CFRetain(v308);
              }
              if (v307) {
                CFRelease(v307);
              }
              double BitRate = FigMediaSegmentSpecifierGetBitRate(NextSegment);
              DiscontinuityCFErrorDomain Domain = (void *)FigMediaSegmentSpecifierGetDiscontinuityDomain(NextSegment);
              LOBYTE(v534) = FigMediaSegmentSpecifierIsMarkedAsGap(NextSegment);
              unint64_t v593 = FigMediaSegmentSpecifierGetMediaSequence(v585);
              if (v545) {
                CFRelease(v545);
              }
              CFTypeRef v545 = 0;
              key = (void *)(v304 + v303);
              v523 += (uint64_t)returnedPointerOut;
              double v71 = v71 + *(double *)&blockBufferOut;
              int v205 = 1;
            }
            LODWORD(v508) = 1;
            CFStringRef v22 = v510;
            CFArrayRef theArray = v165;
LABEL_528:
            a5 = HIDWORD(v548);
            if (!v205) {
              goto LABEL_249;
            }
            goto LABEL_101;
          }
          _StreamPlaylistLogError(v296, 4294955028, (uint64_t)&v573, @"Unknown tag in playlist");
          uint64_t matched = 0;
          v594 = (char *)(v68 + strcspn((const char *)v68, "\r\n"));
        }
      }
LABEL_692:
      a5 = HIDWORD(v548);
      goto LABEL_251;
    }
    int v281 = 0;
    char v282 = 0;
    *(double *)&returnedPointerOut = 0.0;
    v558[1] = 0;
    *(void *)&CMBlockBufferRef blockBufferOut = 0;
    while (1)
    {
      while (1)
      {
        unsigned int v283 = *v594;
        BOOL v101 = v283 > 0xD;
        int v284 = (1 << v283) & 0x2401;
        if (!v101 && v284 != 0)
        {
          uint64_t matched = 0;
          int v289 = 1;
LABEL_872:
          free((void *)blockBufferOut);
          if (v289 && !v281)
          {
            if (v282)
            {
              if (v561)
              {
                FigMultivariantPlaylistSetHasStartTime((uint64_t)v561, 1);
                FigMultivariantPlaylistSetStartTimeValue((uint64_t)v561, *(double *)&returnedPointerOut);
                char v290 = v558[1];
                FigMultivariantPlaylistSetIsStartTimePrecise((uint64_t)v561, v558[1]);
              }
              else
              {
                char v290 = v558[1];
              }
              FigMediaPlaylistSetHasStartTime((uint64_t)v586, 1);
              FigMediaPlaylistSetStartTimeValue((uint64_t)v586, *(double *)&returnedPointerOut);
              FigMediaPlaylistSetIsStartTimePrecise((uint64_t)v586, v290);
            }
            else
            {
              _StreamPlaylistLogError(4294954654, 4294954977, (uint64_t)&v573, @"%s : missing %s", "#EXT-X-START", "TIME-OFFSET");
            }
            goto LABEL_563;
          }
          if (HIDWORD(v548)) {
            char v292 = 1;
          }
          else {
            char v292 = v289;
          }
          if ((v292 & 1) == 0) {
            goto LABEL_1388;
          }
LABEL_563:
          CFStringRef v22 = v510;
LABEL_351:
          a5 = HIDWORD(v548);
          goto LABEL_249;
        }
        temporaryBlocuint64_t k = 0;
        CMBlockBufferRef v599 = 0;
        v597 = 0;
        *(_DWORD *)v560 = 0;
        free((void *)blockBufferOut);
        *(void *)&CMBlockBufferRef blockBufferOut = 0;
        uint64_t v286 = sp_ParseAttribute("#EXT-X-START", v594, 1, 0, (char **)&v599, &v597, (const char **)&temporaryBlock, (size_t *)&v596, (const char **)&v594, (int *)v560, (UInt8 **)&blockBufferOut, (uint64_t)&v573);
        uint64_t matched = v286;
        if (!HIDWORD(v548) && v286) {
          goto LABEL_1388;
        }
        if ((v560[0] & 2) == 0) {
          break;
        }
        int v281 = 1;
        if (v286)
        {
LABEL_871:
          int v289 = 0;
          goto LABEL_872;
        }
      }
      CMBlockBufferRef v287 = v599;
      if (!v599) {
        goto LABEL_868;
      }
      uint64_t v288 = (char *)temporaryBlock;
      if (!temporaryBlock) {
        goto LABEL_868;
      }
      if (v597 == (UInt8 *)7)
      {
        if (!strncmp((const char *)v599, "PRECISE", 7uLL)) {
          uint64_t matched = sp_MatchYesOrNo((uint64_t)v287, v288, (uint64_t)&v573, &v558[1]);
        }
        goto LABEL_868;
      }
      if (v597 == (UInt8 *)11 && !strncmp((const char *)v599, "TIME-OFFSET", 0xBuLL))
      {
        *(double *)os_log_type_t type = 0.0;
        uint64_t matched = sp_strtod(v288, (char **)type, (double *)&returnedPointerOut, 0, (uint64_t)"Time Offset", (uint64_t)&v573);
        if (matched) {
          goto LABEL_871;
        }
        char v282 = 1;
      }
      else
      {
LABEL_868:
        if (matched) {
          goto LABEL_871;
        }
      }
    }
  }
  if (v524)
  {
    uint64_t matched = 4294954654;
    _StreamPlaylistLogError(4294954654, 4294949660, (uint64_t)&v573, @"Can only have one %s tag", "#EXT-X-CONTENT-STEERING");
    goto LABEL_226;
  }
  CFStringRef v95 = v22;
  CFURLRef v96 = 0;
  CFStringRef v97 = 0;
  uint64_t matched = 0;
  CFTypeRef v98 = v561;
  long long v99 = v594;
  returnedPointerOut = v594;
  *(void *)&CMBlockBufferRef blockBufferOut = 0;
  while (2)
  {
    unsigned int v100 = *v99;
    BOOL v101 = v100 > 0xD;
    int v102 = (1 << v100) & 0x2401;
    BOOL v103 = v101 || v102 == 0;
    if (!v103)
    {
      FigMultivariantPlaylistSetContentSteeringServerURL((uint64_t)v98, v96);
      FigMultivariantPlaylistSetContentSteeringInitPathwayID((uint64_t)v98, v97);
      if (!v96)
      {
        uint64_t matched = 4294954654;
        _StreamPlaylistLogError(4294954654, 4294955032, (uint64_t)&v573, @"%s: missing %s attribute", "#EXT-X-CONTENT-STEERING", "SERVER-URI");
        goto LABEL_220;
      }
LABEL_219:
      CFRelease(v96);
      goto LABEL_220;
    }
    temporaryBlocuint64_t k = 0;
    CMBlockBufferRef v599 = 0;
    double v596 = 0.0;
    v597 = 0;
    *(_DWORD *)os_log_type_t type = 0;
    unsigned int v104 = (void *)blockBufferOut;
    if ((void)blockBufferOut)
    {
      *(void *)&CMBlockBufferRef blockBufferOut = 0;
      free(v104);
    }
    uint64_t matched = sp_ParseAttribute("#EXT-X-CONTENT-STEERING", v99, 1, 0, (char **)&v599, &v597, (const char **)&temporaryBlock, (size_t *)&v596, (const char **)&returnedPointerOut, (int *)type, (UInt8 **)&blockBufferOut, (uint64_t)&v573);
    if (matched && !BYTE9(v575)) {
      goto LABEL_285;
    }
    os_log_type_t v105 = type[0];
    if ((type[0] & 2) != 0) {
      goto LABEL_523;
    }
    BOOL v106 = (const char *)v599;
    if (!v599 || (unint64_t v107 = temporaryBlock) == 0)
    {
LABEL_187:
      a5 = HIDWORD(v548);
      goto LABEL_188;
    }
    uint64_t v108 = v597;
    if (v597 != (UInt8 *)10) {
      goto LABEL_186;
    }
    if (!strncmp((const char *)v599, "SERVER-URI", 0xAuLL))
    {
      if ((v105 & 1) == 0)
      {
        uint64_t v206 = "SERVER-URI";
LABEL_521:
        uint64_t matched = 4294954654;
        _StreamPlaylistLogError(4294954654, 4294955032, (uint64_t)&v573, @"%s: attribute %s has invalid value format", "#EXT-X-CONTENT-STEERING", v206);
        a5 = HIDWORD(v548);
        goto LABEL_285;
      }
      if (v96)
      {
        uint64_t matched = 4294954654;
        _StreamPlaylistLogError(4294954654, 4294955032, (uint64_t)&v573, @"%s has multiple %s attributes", "#EXT-X-CONTENT-STEERING", "SERVER-URI");
        a5 = HIDWORD(v548);
        goto LABEL_219;
      }
      CFURLRef v109 = CFURLCreateWithBytes(structureAllocator, v107, *(CFIndex *)&v596, 0x8000100u, (CFURLRef)v574);
      a5 = HIDWORD(v548);
      if (v109)
      {
        CFURLRef v96 = v109;
        uint64_t matched = 0;
      }
      else
      {
        uint64_t matched = FigSignalErrorAt();
        if (matched && !BYTE9(v575)) {
          goto LABEL_220;
        }
        CFURLRef v96 = 0;
      }
LABEL_188:
      long long v99 = returnedPointerOut;
      continue;
    }
    break;
  }
  if (strncmp(v106, "PATHWAY-ID", 0xAuLL))
  {
LABEL_186:
    _StreamPlaylistLogError(0, 4294955022, (uint64_t)&v573, @"Unrecognized attribute %.*s in %s", v108, v106, "#EXT-X-CONTENT-STEERING");
    goto LABEL_187;
  }
  if ((v105 & 1) == 0)
  {
    uint64_t v206 = "PATHWAY-ID";
    goto LABEL_521;
  }
  if (!v97)
  {
    a5 = HIDWORD(v548);
    if (v596 != 0.0)
    {
      uint64_t v110 = v107;
      size_t v111 = *(void *)&v596;
      while (1)
      {
        int v113 = *v110++;
        int v112 = v113;
        unsigned int v114 = (v113 & 0xFFFFFFDF) - 65;
        if ((v113 - 48) >= 0xA && v114 >= 0x1A)
        {
          unsigned int v116 = v112 - 45;
          BOOL v101 = v116 > 0x32;
          uint64_t v117 = (1 << v116) & 0x4000000000003;
          if (v101 || v117 == 0) {
            break;
          }
        }
        if (!--v111) {
          goto LABEL_207;
        }
      }
      uint64_t matched = 4294954654;
      _StreamPlaylistLogError(4294954654, 4294955032, (uint64_t)&v573, @"%s: attribute %s contains illegal characters", "#EXT-X-CONTENT-STEERING", "PATHWAY-ID");
      CFStringRef v97 = 0;
      goto LABEL_285;
    }
LABEL_207:
    CFStringRef v97 = CFStringCreateWithBytes(structureAllocator, v107, *(CFIndex *)&v596, 0x8000100u, 1u);
    if (!v97)
    {
      uint64_t matched = FigSignalErrorAt();
      goto LABEL_285;
    }
    goto LABEL_188;
  }
  uint64_t matched = 4294954654;
  _StreamPlaylistLogError(4294954654, 4294955032, (uint64_t)&v573, @"%s: illegal multiple occurrences of attribute %s", "#EXT-X-CONTENT-STEERING", "PATHWAY-ID");
LABEL_523:
  a5 = HIDWORD(v548);
LABEL_285:
  if (v96) {
    goto LABEL_219;
  }
LABEL_220:
  if (v97) {
    CFRelease(v97);
  }
  if ((void)blockBufferOut) {
    free((void *)blockBufferOut);
  }
  CFStringRef v22 = v95;
  if (a5 || !matched)
  {
LABEL_226:
    uint64_t v120 = v594;
    v594 = &v120[strcspn(v594, "\r\n")];
    int v524 = 1;
    goto LABEL_249;
  }
LABEL_967:
  CFStringRef v55 = 0;
  CFStringRef v56 = 0;
  CFStringRef v57 = 0;
  uint64_t v58 = 0;
  CFTypeRef v556 = 0;
  uint64_t v548 = 0;
LABEL_1301:
  CFTypeRef v54 = v549;
LABEL_1302:
  if (v584) {
    CFRelease(v584);
  }
LABEL_1304:
  if (!*__error()) {
    *__error() = v535;
  }
  if (HIDWORD(v548) & ~v548 & 1) != 0 || (*(unsigned char *)v541)
  {
    if (!a13 || *a13) {
      goto LABEL_1314;
    }
    *a13 = v561;
    CFTypeRef v561 = 0;
  }
  else
  {
    if (a14 && !*a14 && !matched)
    {
      *a14 = v586;
      CFTypeRef v586 = 0;
    }
LABEL_1314:
    if (v561) {
      CFRelease(v561);
    }
  }
  if (v586) {
    CFRelease(v586);
  }
  if (v556) {
    CFRelease(v556);
  }
  if (v592) {
    CFRelease(v592);
  }
  if (v591) {
    CFRelease(v591);
  }
  if (v542) {
    CFRelease(v542);
  }
  if (v581)
  {
    CFRelease(v581);
    CFURLRef v581 = 0;
  }
  if (v580)
  {
    CFRelease(v580);
    v580 = 0;
  }
  if (v545) {
    CFRelease(v545);
  }
  if (theArray) {
    CFRelease(theArray);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v552) {
    CFRelease(v552);
  }
  if (v553) {
    CFRelease(v553);
  }
  if (v550) {
    CFRelease(v550);
  }
  if (v54) {
    CFRelease(v54);
  }
  if (v22) {
    CFRelease(v22);
  }
  if (v583) {
    CFRelease(v583);
  }
  if (v58) {
    CFRelease(v58);
  }
  if (v577)
  {
    CFRelease(v577);
    CFArrayRef v577 = 0;
  }
  if (v56) {
    CFRelease(v56);
  }
  if (v57) {
    CFRelease(v57);
  }
  if (v579)
  {
    CFRelease(v579);
    CFURLRef v579 = 0;
  }
  if (v578)
  {
    CFRelease(v578);
    v578 = 0;
  }
  if (v55) {
    CFRelease(v55);
  }
  if (*((void *)&v574 + 1))
  {
    CFRelease(*((CFTypeRef *)&v574 + 1));
    *((void *)&v574 + 1) = 0;
  }
  v483 = v576;
  if (v576)
  {
    v576 = 0;
    free(v483);
  }
  if (v567)
  {
    CFRelease(v567);
    CFTypeRef v567 = 0;
  }
  if (theSet) {
    CFRelease(theSet);
  }
  if (value) {
    CFRelease(value);
  }
  return matched;
}

uint64_t _StreamPlaylistLogError(uint64_t a1, uint64_t a2, uint64_t a3, CFStringRef format, ...)
{
  va_start(va, format);
  if (a3 && (a1 || *(unsigned char *)(a3 + 40)))
  {
    CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    if (format) {
      CFStringRef v7 = CFStringCreateWithFormatAndArguments((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, format, va);
    }
    else {
      CFStringRef v7 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], "Format Error", 0x8000100u);
    }
    CFStringRef v8 = v7;
    if (a1)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      FigSignalErrorAt();
    }
    if (*(void *)(a3 + 8))
    {
      uint64_t v10 = *(const UInt8 **)(a3 + 32);
      if (v10)
      {
        size_t v11 = strcspn(*(const char **)(a3 + 32), "\r\n");
        uint64_t v10 = (const UInt8 *)CFStringCreateWithBytes(v6, v10, v11, 0x8000100u, 1u);
      }
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v6, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (Mutable)
      {
        uint64_t v13 = Mutable;
        CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
        CFDateRef v15 = CFDateCreate(v6, Current);
        if (v15)
        {
          CFDateRef v16 = v15;
          CFDictionarySetValue(v13, @"date", v15);
          CFRelease(v16);
        }
        CFURLRef v17 = *(const __CFURL **)(a3 + 16);
        if (v17)
        {
          CFTypeRef v18 = FigCFHTTPCreateURLString(v17);
          if (v18)
          {
            CFURLRef v19 = v18;
            CFDictionarySetValue(v13, @"uri", v18);
            CFRelease(v19);
          }
        }
        CFDictionarySetValue(v13, @"domain", @"CoreMediaErrorDomain");
        FigCFDictionarySetInt32();
        FigCFDictionarySetInt32();
        if (v8) {
          CFDictionarySetValue(v13, @"comment", v8);
        }
        if (v10) {
          CFDictionarySetValue(v13, @"StreamPlaylistLine", v10);
        }
        int v20 = **(__CFArray ***)(a3 + 8);
        if (!v20)
        {
          **(void **)(a3 + 8) = CFArrayCreateMutable(v6, 0, MEMORY[0x1E4F1D510]);
          int v20 = **(__CFArray ***)(a3 + 8);
        }
        CFArrayAppendValue(v20, v13);
        CFRelease(v13);
      }
      if (v10) {
        CFRelease(v10);
      }
    }
    if (v8) {
      CFRelease(v8);
    }
  }
  return a1;
}

uint64_t sp_MatchTagAndColon(const char *a1, const char *a2, size_t a3, const char **a4, uint64_t a5)
{
  if (strncmp(a1, a2, a3)) {
    return 0;
  }
  CFURLRef v9 = StreamingPlaylist_SkipSpacesAndTabs(&a1[a3], a5);
  if (*v9 != 58) {
    return 0;
  }
  uint64_t v10 = StreamingPlaylist_SkipSpacesAndTabs(v9 + 1, a5);
  if (a4) {
    *a4 = v10;
  }
  return 1;
}

uint64_t sp_strtoull(const char *a1, char **a2, unint64_t *a3, int a4, int a5, int a6, uint64_t a7, uint64_t a8)
{
  __endptr = 0;
  *__error() = 0;
  *a3 = strtoull(a1, &__endptr, a4);
  if (*__error() == 22)
  {
    CFStringRef v16 = @"%s:Illegal integer conversion";
LABEL_5:
    uint64_t v25 = a7;
    uint64_t v17 = 4294954654;
    _StreamPlaylistLogError(4294954654, 4294955032, a8, v16, v25);
    goto LABEL_6;
  }
  if (*__error() == 34)
  {
    CFStringRef v16 = @"%s:out of range";
    goto LABEL_5;
  }
  if (a5 != 1)
  {
    CFURLRef v19 = (char *)(__endptr - a1);
    if (__endptr > a1)
    {
      CFStringRef v16 = @"%s:Illegal character before integer";
      while ((*a1 - 48) < 0xA)
      {
        ++a1;
        if (!--v19) {
          goto LABEL_13;
        }
      }
      goto LABEL_5;
    }
  }
LABEL_13:
  if (a6 != 1
    || ((v20 = *__endptr, v21 = v20 > 0x2C, uint64_t v22 = (1 << v20) & 0x100000002400, !v21)
      ? (BOOL v23 = v22 == 0)
      : (BOOL v23 = 1),
        !v23))
  {
    uint64_t v17 = 0;
    char v24 = 1;
    if (!a2) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  uint64_t v26 = a7;
  uint64_t v17 = 4294954654;
  _StreamPlaylistLogError(4294954654, 4294955032, a8, @"%s:Illegal characters after integer", v26);
  char v24 = 0;
  if (a2) {
LABEL_19:
  }
    *a2 = __endptr;
LABEL_20:
  if (v24) {
    return 0;
  }
LABEL_6:
  *a3 = 0;
  return v17;
}

uint64_t sp_strtod(const char *a1, char **a2, double *a3, unsigned char *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v28 = 0;
  *__error() = 0;
  if (!a3 || (*a3 = 0.0, !a1))
  {
    CFStringRef v14 = @"NULL param";
    uint64_t v15 = 4294954656;
    uint64_t v16 = 4294954656;
LABEL_36:
    uint64_t v17 = 4294955032;
    goto LABEL_11;
  }
  double v12 = strtod_l(a1, &v28, 0);
  *a3 = v12;
  if (v12 == 0.0 && v28 == a1)
  {
    CFStringRef v14 = @"%s: Illegal decimal conversion";
    goto LABEL_10;
  }
  if (*__error() == 34)
  {
    CFStringRef v14 = @"%s: Out of range.";
LABEL_10:
    uint64_t v25 = a5;
    uint64_t v15 = 4294954654;
    uint64_t v16 = 4294954654;
    uint64_t v17 = 4294955023;
LABEL_11:
    _StreamPlaylistLogError(v16, v17, a6, v14, v25, v27);
    goto LABEL_12;
  }
  CFURLRef v19 = v28;
  if (v28 > a1)
  {
    uint64_t v20 = MEMORY[0x1E4F14390];
    do
    {
      unsigned int v21 = *a1;
      if (v21 == 46)
      {
        if (a4) {
          *a4 = 1;
        }
        goto LABEL_24;
      }
      if ((v21 & 0x80000000) != 0)
      {
        if (__maskrune(v21, 0x400uLL)) {
          goto LABEL_24;
        }
      }
      else if ((*(_DWORD *)(v20 + 4 * v21 + 60) & 0x400) != 0)
      {
        goto LABEL_24;
      }
      if (*a1 != 45)
      {
        CFStringRef v14 = @"%s: Illegal character '%c' in decimal number";
        uint64_t v25 = a5;
        uint64_t v27 = *a1;
        uint64_t v15 = 4294954654;
        uint64_t v16 = 4294954654;
        goto LABEL_36;
      }
LABEL_24:
      ++a1;
      CFURLRef v19 = v28;
    }
    while (a1 < v28);
  }
  unsigned int v22 = *v19;
  if (v22 <= 0x2C && ((1 << v22) & 0x100000002400) != 0)
  {
    uint64_t v15 = 0;
    char v24 = 1;
    if (!a2) {
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  uint64_t v26 = a5;
  uint64_t v15 = 4294954654;
  _StreamPlaylistLogError(4294954654, 4294955032, a6, @"%s: Illegal character '%c' after decimal number", v26, (char)v22);
  char v24 = 0;
  if (a2) {
LABEL_30:
  }
    *a2 = v28;
LABEL_31:
  if (v24) {
    return 0;
  }
LABEL_12:
  *a3 = 0.0;
  return v15;
}

uint64_t StreamingPlaylist_MatchAlphanumericStringExactly(const char *a1, const char *a2, size_t a3, const char **a4)
{
  if (!a1 || !a2)
  {
    FigSignalErrorAt();
    return 0;
  }
  if (strncmp(a1, a2, a3)) {
    return 0;
  }
  CFStringRef v7 = &a1[a3];
  unsigned int v8 = *v7;
  if ((v8 & 0x80000000) == 0)
  {
    if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v8 + 60) & 0x500) == 0) {
      goto LABEL_9;
    }
    return 0;
  }
  if (__maskrune(v8, 0x500uLL)) {
    return 0;
  }
LABEL_9:
  if (a4) {
    *a4 = v7;
  }
  return 1;
}

uint64_t sp_strtol(const char *a1, char **a2, _DWORD *a3, int a4, uint64_t a5, uint64_t a6)
{
  __endptr = 0;
  *__error() = 0;
  *a3 = strtol(a1, &__endptr, 10);
  if (*__error() == 22)
  {
    CFStringRef v12 = @"%s:Illegal integer conversion";
LABEL_18:
    uint64_t v19 = a5;
    uint64_t v16 = 4294954654;
    _StreamPlaylistLogError(4294954654, 4294955032, a6, v12, v19);
    goto LABEL_19;
  }
  if (*__error() == 34)
  {
    CFStringRef v12 = @"%s:out of range";
    goto LABEL_18;
  }
  if ((*a3 & 0x80000000) != 0)
  {
    CFStringRef v12 = @"%s:Decimal value less than 0";
    goto LABEL_18;
  }
  uint64_t v13 = __endptr;
  CFStringRef v14 = (char *)(__endptr - a1);
  if (__endptr > a1)
  {
    CFStringRef v12 = @"%s:Illegal character before integer";
    while ((*a1 - 48) < 0xA)
    {
      ++a1;
      if (!--v14) {
        goto LABEL_10;
      }
    }
    goto LABEL_18;
  }
LABEL_10:
  if (a4 != 1 || (unsigned int v15 = *__endptr, v15 <= 0x2C) && ((1 << v15) & 0x100000002400) != 0)
  {
    uint64_t v16 = 0;
    char v17 = 1;
    if (!a2) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  uint64_t v20 = a5;
  uint64_t v16 = 4294954654;
  _StreamPlaylistLogError(4294954654, 4294955032, a6, @"%s:Illegal characters after integer", v20);
  char v17 = 0;
  if (a2) {
LABEL_14:
  }
    *a2 = v13;
LABEL_15:
  if ((v17 & 1) == 0)
  {
LABEL_19:
    *a3 = 0;
    return v16;
  }
  return 0;
}

uint64_t PlaylistProcessKey(uint64_t a1, uint64_t a2, const char *a3, const char *a4, CFTypeRef *a5, CFTypeRef *a6, char **a7, uint64_t a8)
{
  CFStringRef v72 = 0;
  CFURLRef v9 = (char *)a4;
  uint64_t v74 = 0;
  CFURLRef v75 = 0;
  CFDataRef cf = 0;
  uint64_t v11 = 0;
  uint64_t v89 = *MEMORY[0x1E4F143B8];
  uint64_t v84 = 0;
  CFStringRef v85 = (char *)a4;
  CFTypeRef v82 = 0;
  CFTypeRef v83 = 0;
  CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  while (2)
  {
    unsigned int v12 = *v9;
    BOOL v13 = v12 > 0xD;
    int v14 = (1 << v12) & 0x2401;
    if (v13 || v14 == 0)
    {
      unsigned int v80 = 0;
      __s1 = 0;
      CFIndex numBytes = 0;
      uint64_t v79 = 0;
      int v77 = 0;
      free(v84);
      uint64_t v84 = 0;
      uint64_t v11 = sp_ParseAttribute(a3, v9, 1, 0, &__s1, &v79, (const char **)&v80, (size_t *)&numBytes, (const char **)&v85, &v77, &v84, a8);
      if (v11 && !*(unsigned char *)(a8 + 41)) {
        goto LABEL_156;
      }
      char v16 = v77;
      if ((v77 & 2) != 0) {
        goto LABEL_156;
      }
      if (!__s1) {
        goto LABEL_61;
      }
      char v17 = v80;
      if (!v80) {
        goto LABEL_61;
      }
      switch(v79)
      {
        case 2:
          if (strncmp(__s1, "IV", 2uLL)) {
            goto LABEL_54;
          }
          if (*v17 != 48 || __tolower(v17[1]) != 120)
          {
            uint64_t v11 = 4294954654;
            _StreamPlaylistLogError(4294954654, 4294955029, a8, @"No 0x at start of IV", v63, v64);
            goto LABEL_60;
          }
          unint64_t v76 = 0;
          CFTypeRef v18 = v80 + 2;
          size_t v19 = strcspn(v80 + 2, ",\r\n");
          strcpy(v86, "00000000000000000000000000000000");
          if (v19 >= 0x21)
          {
            uint64_t v11 = 4294954654;
            _StreamPlaylistLogError(4294954654, 4294955029, a8, @"IV too long", v63, v64, v65);
            goto LABEL_156;
          }
          memcpy(&v86[-v19 + 32], v18, v19);
          uint64_t v20 = sp_strtoull(&v86[16], 0, &v76, 16, 1, 0, (uint64_t)"IV lower", a8);
          if (v20
            || (unint64_t v21 = v76, v86[16] = 0,
                           uint64_t v20 = sp_strtoull(v86, 0, &v76, 16, 1, 0, (uint64_t)"IV upper", a8),
                           v20))
          {
            uint64_t v11 = v20;
            goto LABEL_156;
          }
          *(void *)bytes = bswap64(v76);
          unint64_t v88 = bswap64(v21);
          if (cf) {
            CFRelease(cf);
          }
          CFDataRef cf = CFDataCreate(allocator, bytes, 16);
          goto LABEL_37;
        case 3:
          if (strncmp(__s1, "URI", 3uLL)) {
            goto LABEL_54;
          }
          if ((v16 & 1) == 0) {
            goto LABEL_58;
          }
          if (v75)
          {
            _StreamPlaylistLogError(0, 4294955035, a8, @"%s has multiple %s params. Ignoring old one.", a3, "URI");
            CFRelease(v75);
            char v17 = v80;
          }
          CFURLRef v75 = CFURLCreateWithBytes(allocator, (const UInt8 *)v17, numBytes, 0x8000100u, *(CFURLRef *)(a8 + 16));
          if (v75) {
            goto LABEL_55;
          }
          uint64_t v11 = 4294954654;
          _StreamPlaylistLogError(4294954654, 4294955034, a8, @"Invalid %s: %s", a3, "URI");
          CFURLRef v75 = 0;
          goto LABEL_60;
        case 4:
        case 5:
        case 7:
        case 8:
          goto LABEL_54;
        case 6:
          if (strncmp(__s1, "METHOD", 6uLL)) {
            goto LABEL_54;
          }
          if (strncmp(v17, "NONE", 4uLL)) {
            goto LABEL_49;
          }
          unsigned int v28 = v17[4];
          if ((v28 & 0x80000000) != 0)
          {
            if (__maskrune(v28, 0x500uLL))
            {
LABEL_48:
              char v17 = v80;
              if (v80)
              {
LABEL_49:
                if (strncmp(v17, "AES-128", 7uLL)) {
                  goto LABEL_75;
                }
                unsigned int v29 = v17[7];
                if ((v29 & 0x80000000) != 0)
                {
                  if (!__maskrune(v29, 0x500uLL))
                  {
LABEL_88:
                    int v40 = 3;
LABEL_96:
                    HIDWORD(v74) = v40;
                    goto LABEL_97;
                  }
                }
                else if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v29 + 60) & 0x500) == 0)
                {
                  goto LABEL_88;
                }
              }
              else
              {
                FigSignalErrorAt();
              }
              char v17 = v80;
              if (!v80)
              {
                FigSignalErrorAt();
                goto LABEL_76;
              }
LABEL_75:
              if (strncmp(v17, "SAMPLE-AES", 0xAuLL)) {
                goto LABEL_76;
              }
              unsigned int v38 = v17[10];
              if ((v38 & 0x80000000) != 0)
              {
                if (!__maskrune(v38, 0x500uLL))
                {
LABEL_90:
                  int v35 = 1;
                  goto LABEL_104;
                }
              }
              else if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v38 + 60) & 0x500) == 0)
              {
                goto LABEL_90;
              }
LABEL_76:
              uint64_t v36 = v80;
              if (v80)
              {
                if (strncmp(v80, "ISO-23001-7", 0xBuLL))
                {
LABEL_78:
                  if (strncmp(v36, "SAMPLE-AES-CTR", 0xEuLL)) {
                    goto LABEL_94;
                  }
                  unsigned int v37 = v36[14];
                  if ((v37 & 0x80000000) == 0)
                  {
                    if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v37 + 60) & 0x500) == 0) {
                      goto LABEL_103;
                    }
LABEL_94:
                    if (!StreamingPlaylist_MatchAlphanumericStringExactly(v80, "AES-256-GCM", 0xBuLL, (const char **)&v80))
                    {
                      uint64_t v11 = 4294954654;
                      _StreamPlaylistLogError(4294954654, 4294955036, a8, @"Unrecognized %s: %s", a3, "METHOD");
                      goto LABEL_60;
                    }
                    int v40 = 4;
                    goto LABEL_96;
                  }
                  if (__maskrune(v37, 0x500uLL)) {
                    goto LABEL_94;
                  }
LABEL_103:
                  int v35 = 2;
                  goto LABEL_104;
                }
                unsigned int v39 = v36[11];
                if ((v39 & 0x80000000) != 0)
                {
                  if (!__maskrune(v39, 0x500uLL)) {
                    goto LABEL_103;
                  }
                }
                else if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v39 + 60) & 0x500) == 0)
                {
                  goto LABEL_103;
                }
              }
              else
              {
                FigSignalErrorAt();
              }
              uint64_t v36 = v80;
              if (!v80)
              {
                FigSignalErrorAt();
                goto LABEL_94;
              }
              goto LABEL_78;
            }
          }
          else if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v28 + 60) & 0x500) != 0)
          {
            goto LABEL_48;
          }
          int v35 = 5;
LABEL_104:
          HIDWORD(v74) = v35;
LABEL_55:
          if (v11) {
            goto LABEL_60;
          }
          goto LABEL_61;
        case 9:
          if (strncmp(__s1, "KEYFORMAT", 9uLL)) {
            goto LABEL_54;
          }
          if ((v16 & 1) == 0) {
            goto LABEL_58;
          }
          CFIndex v30 = numBytes;
          if (numBytes == 8)
          {
            if (!strncmp(v17, "identity", 8uLL))
            {
LABEL_97:
              int v34 = 2;
              goto LABEL_98;
            }
          }
          else
          {
            if (numBytes == 16)
            {
              uint64_t v31 = v17;
              uint64_t v32 = "com.apple.pastis";
              size_t v33 = 16;
            }
            else
            {
              if (numBytes != 30) {
                goto LABEL_154;
              }
              uint64_t v31 = v17;
              uint64_t v32 = "com.apple.streamingkeydelivery";
              size_t v33 = 30;
            }
            if (!strncmp(v31, v32, v33))
            {
              int v34 = 1;
LABEL_98:
              LODWORD(v74) = v34;
              goto LABEL_55;
            }
          }
LABEL_154:
          if (*(unsigned char *)(a8 + 40) == 1) {
            _StreamPlaylistLogError(0, 4294955032, a8, @"%s: invalid KEYFORMAT \"%.*s\"", a3, v30, v17);
          }
LABEL_156:
          CFTypeRef v44 = 0;
          double v46 = a7;
          CFStringRef v45 = v72;
          CFDataRef v47 = cf;
          CFURLRef v43 = v75;
          goto LABEL_177;
        default:
          if (v79 != 17 || strncmp(__s1, "KEYFORMATVERSIONS", 0x11uLL))
          {
LABEL_54:
            _StreamPlaylistLogError(0, 4294955022, a8, @"Unrecognized attribute in %s", a3);
            goto LABEL_55;
          }
          if ((v16 & 1) == 0)
          {
LABEL_58:
            uint64_t v11 = 4294954654;
            _StreamPlaylistLogError(4294954654, 4294955032, a8, @"%s: missing quotes", a3, v64);
            goto LABEL_60;
          }
          CFIndex v22 = numBytes;
          if (!numBytes)
          {
LABEL_33:
            if (v11) {
              goto LABEL_60;
            }
            if (v72)
            {
              CFRelease(v72);
              char v17 = v80;
              CFIndex v22 = numBytes;
            }
            CFStringRef v72 = CFStringCreateWithBytes(allocator, (const UInt8 *)v17, v22, 0x8000100u, 1u);
LABEL_37:
            uint64_t v11 = 0;
            goto LABEL_61;
          }
          int v23 = 0;
          char v24 = v17;
          CFIndex v25 = numBytes;
          while (2)
          {
            unsigned int v27 = *v24++;
            uint64_t v26 = v27;
            if (v27 - 48 < 0xA)
            {
              int v23 = 1;
              goto LABEL_32;
            }
            if (v26 != 47)
            {
              uint64_t v11 = 4294954654;
              _StreamPlaylistLogError(4294954654, 4294955030, a8, @"illegal character \"%c\" in %s", v26, "KEYFORMATVERSIONS");
              goto LABEL_60;
            }
            if (v23)
            {
              int v23 = 0;
LABEL_32:
              if (!--v25) {
                goto LABEL_33;
              }
              continue;
            }
            break;
          }
          uint64_t v11 = 4294954654;
          _StreamPlaylistLogError(4294954654, 4294955030, a8, @"illegal \"/\" character in %s", "KEYFORMATVERSIONS", v64);
LABEL_60:
          if (!*(unsigned char *)(a8 + 41)) {
            goto LABEL_156;
          }
LABEL_61:
          CFURLRef v9 = v85;
          continue;
      }
    }
    break;
  }
  if (v74) {
    BOOL v41 = 1;
  }
  else {
    BOOL v41 = (HIDWORD(v74) - 1) >= 2;
  }
  if (v41) {
    int v42 = v74;
  }
  else {
    int v42 = 2;
  }
  CFURLRef v43 = v75;
  if (HIDWORD(v74) == 5 && v75)
  {
    uint64_t v11 = 4294954654;
    _StreamPlaylistLogError(4294954654, 4294955032, a8, @"URL in crypt Key with no algorithm");
    CFTypeRef v44 = 0;
    double v46 = a7;
    CFStringRef v45 = v72;
    CFDataRef v47 = cf;
    goto LABEL_177;
  }
  CFStringRef v45 = v72;
  CFDataRef v47 = cf;
  if (HIDWORD(v74) != 5 && !v75)
  {
    uint64_t v11 = 4294954654;
    _StreamPlaylistLogError(4294954654, 4294955032, a8, @"Missing URL in crypt Key");
LABEL_123:
    CFTypeRef v44 = 0;
    double v46 = a7;
    goto LABEL_177;
  }
  if (HIDWORD(v74) == 2 && cf)
  {
    CFRelease(cf);
    uint64_t v11 = 4294954654;
    _StreamPlaylistLogError(4294954654, 4294955032, a8, @"IV not allowed for KEY/METHOD");
    CFDataRef v47 = 0;
    goto LABEL_123;
  }
  if (v11) {
    goto LABEL_123;
  }
  double v46 = a7;
  if (v42 == 1)
  {
    uint64_t v48 = a2;
    if (!v72) {
      CFStringRef v45 = CFStringCreateWithCString(allocator, "1", 0x8000100u);
    }
    if (v75) {
      goto LABEL_129;
    }
LABEL_131:
    CFTypeRef v44 = 0;
    goto LABEL_132;
  }
  uint64_t v48 = a2;
  if (!v75) {
    goto LABEL_131;
  }
LABEL_129:
  CFTypeRef v44 = FigCFHTTPCreateURLString(v75);
LABEL_132:
  if (HIDWORD(v74) == 5)
  {
    if (*a6)
    {
      CFRelease(*a6);
      *a6 = 0;
    }
    if (*a5)
    {
      CFRelease(*a5);
      uint64_t v11 = 0;
      *a5 = 0;
      goto LABEL_177;
    }
  }
  else if (HIDWORD(v74))
  {
    if (a1) {
      uint64_t ContentKeySpecifiers = FigMultivariantPlaylistGetContentKeySpecifiers(a1);
    }
    else {
      uint64_t ContentKeySpecifiers = FigMediaPlaylistGetContentKeySpecifiers(v48);
    }
    CFArrayRef v50 = (const __CFArray *)ContentKeySpecifiers;
    CFIndex v51 = 0;
    if (ContentKeySpecifiers) {
      goto LABEL_149;
    }
LABEL_150:
    for (CFIndex i = 0; ; CFIndex i = CFArrayGetCount(v50))
    {
      if (v51 >= i)
      {
        if (v82) {
          goto LABEL_168;
        }
        goto LABEL_161;
      }
      CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v50, v51);
      FigContentKeySpecifierGetIdentifier((uint64_t)ValueAtIndex);
      if (FigCFEqual())
      {
        if (FigContentKeySpecifierGetKeySystem((uint64_t)ValueAtIndex) == v42
          && FigContentKeySpecifierGetEncryptionMethod((uint64_t)ValueAtIndex) == HIDWORD(v74))
        {
          break;
        }
      }
      ++v51;
      if (!v50) {
        goto LABEL_150;
      }
LABEL_149:
      ;
    }
    if (ValueAtIndex) {
      CFTypeRef v54 = CFRetain(ValueAtIndex);
    }
    else {
      CFTypeRef v54 = 0;
    }
    CFTypeRef v82 = v54;
    if (v54) {
      goto LABEL_168;
    }
LABEL_161:
    uint64_t v55 = FigStreamPlaylistParseStringAndCreateProtocolVersionList(v45, &v83);
    if (v55 || (uint64_t v55 = FigContentKeySpecifierCreate(v42, v44, SHIDWORD(v74), v83, (uint64_t *)&v82), v55))
    {
      uint64_t v11 = v55;
      goto LABEL_177;
    }
    if (a2)
    {
      CryptKeyCFIndex Count = FigMediaPlaylistGetCryptKeyCount(a2);
      FigMediaPlaylistSetCryptKeyCount(a2, CryptKeyCount + 1);
      CFTypeRef v57 = v82;
      uint64_t v58 = FigMediaPlaylistGetCryptKeyCount(a2);
      FigContentKeySpecifierSetCryptKeyParsedIndex((uint64_t)v57, v58);
    }
    FigContentKeySpecifierSetIsChangedInCurrent((uint64_t)v82, 1);
    if (a1) {
      FigMultivariantPlaylistAddContentKeySpecifier(a1, v82);
    }
    else {
      FigMediaPlaylistAddContentKeySpecifier(a2, v82);
    }
LABEL_168:
    CFTypeRef v59 = *a5;
    *a5 = cf;
    if (cf) {
      CFRetain(cf);
    }
    if (v59) {
      CFRelease(v59);
    }
    CFTypeRef v60 = *a6;
    CFTypeRef v61 = v82;
    *a6 = v82;
    if (v61) {
      CFRetain(v61);
    }
    if (v60) {
      CFRelease(v60);
    }
  }
  else if (*a6)
  {
    CFRelease(*a6);
    uint64_t v11 = 0;
    *a6 = 0;
    goto LABEL_177;
  }
  uint64_t v11 = 0;
LABEL_177:
  __CFDictionary *v46 = v85;
  if (v82) {
    CFRelease(v82);
  }
  if (v44) {
    CFRelease(v44);
  }
  if (v83) {
    CFRelease(v83);
  }
  if (v47) {
    CFRelease(v47);
  }
  if (v43) {
    CFRelease(v43);
  }
  if (v45) {
    CFRelease(v45);
  }
  free(v84);
  return v11;
}

const char *StreamingPlaylist_SkipSpacesAndTabs(const char *a1, uint64_t a2)
{
  size_t v4 = strspn(a1, " \t");
  if (v4) {
    _StreamPlaylistLogError(0, 4294955032, a2, @"Unneeded space in line");
  }
  return &a1[v4];
}

uint64_t sp_ParseAttribute(const char *a1, char *a2, int a3, int a4, char **a5, void *a6, const char **a7, size_t *a8, const char **a9, int *a10, UInt8 **a11, uint64_t a12)
{
  int v14 = a9;
  BOOL v13 = a10;
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  size_t v52 = 0;
  uint64_t v53 = 0;
  __s1 = a2;
  if (!a2)
  {
    uint64_t v29 = 4294954656;
    _StreamPlaylistLogError(4294954656, 4294955032, a12, @"%s: no attributes", a1);
    int v27 = 0;
    goto LABEL_28;
  }
  *a5 = 0;
  *a6 = 0;
  *a7 = 0;
  *a8 = 0;
  *a10 = 0;
  *a11 = 0;
  unint64_t v21 = (char *)sp_SkipSpacesTabsAndCommas(a2, a12, 0);
  __s1 = v21;
  if (*v21 == 61)
  {
    CFStringRef v45 = @"%s: Missing or blank attribute";
    double v46 = a1;
LABEL_48:
    uint64_t v29 = 4294954654;
    _StreamPlaylistLogError(4294954654, 4294955032, a12, v45, v46, v47);
    int v27 = 0;
    int v14 = a9;
LABEL_28:
    uint64_t v31 = __s1;
    if (!*(unsigned char *)(a12 + 41))
    {
      int v40 = &v31[strcspn(__s1, "\r\n")];
      uint64_t v31 = (char *)&v40[strspn(v40, "\r\n")];
    }
    goto LABEL_44;
  }
  int v50 = a3;
  BOOL matched = sp_MatchAttributeName((uint64_t)v21, 0, &__s1, &v53);
  uint64_t v23 = v53;
  if (!matched)
  {
    int v27 = 0;
    int v14 = a9;
    CFIndex v25 = a1;
    goto LABEL_13;
  }
  int v49 = a4;
  char v24 = __s1;
  *a5 = __s1;
  *a6 = v23;
  CFIndex v25 = a1;
  if (strncmp(v24, "REQ-", 4uLL))
  {
LABEL_5:
    uint64_t v26 = (char *)StreamingPlaylist_SkipSpacesAndTabs(&v24[v23], a12);
    __s1 = v26;
    if (*v26 == 61)
    {
      __s1 = (char *)StreamingPlaylist_SkipSpacesAndTabs(v26 + 1, a12);
      int v27 = *__s1 == 34;
      uint64_t StringWithReplacement = sp_GetStringWithReplacement(__s1, 1, v50, &__s1, a7, &v52, a11, a12);
      if (StringWithReplacement == -16239)
      {
        uint64_t v36 = v13;
        unsigned int v37 = __s1;
        size_t v38 = strcspn(__s1, " \t,\r\n");
        if (v38)
        {
          *a7 = v37;
          *a8 = v38;
          __s1 = (char *)StreamingPlaylist_SkipSpacesAndTabs(&v37[v38], a12);
        }
        BOOL v13 = v36;
        int v14 = a9;
        if (!v23) {
          goto LABEL_26;
        }
LABEL_14:
        if (*a5)
        {
          if (*a7)
          {
            uint64_t v29 = 0;
            uint64_t v31 = __s1;
            goto LABEL_44;
          }
          uint64_t v47 = v23;
          uint64_t v48 = *a5;
          CFStringRef v39 = @"%s: %.*s: Empty or blank attribute value";
          goto LABEL_27;
        }
LABEL_26:
        CFStringRef v39 = @"%s: Illegal attribute name";
LABEL_27:
        uint64_t v29 = 4294954654;
        _StreamPlaylistLogError(4294954654, 4294955032, a12, v39, v25, v47, v48);
        goto LABEL_28;
      }
      uint64_t v29 = StringWithReplacement;
      int v14 = a9;
      if (StringWithReplacement) {
        goto LABEL_28;
      }
      size_t v30 = v52;
      *a8 = v52;
      if (v49 && !v30)
      {
        *a7 = __s1;
        if (!v23) {
          goto LABEL_26;
        }
        goto LABEL_14;
      }
LABEL_13:
      if (!v23) {
        goto LABEL_26;
      }
      goto LABEL_14;
    }
    CFStringRef v45 = @"%s: missing \"=\"";
    double v46 = v25;
    goto LABEL_48;
  }
  int v32 = *(_DWORD *)a12;
  if (!*(_DWORD *)a12)
  {
    unsigned int v55 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v34 = v55;
    if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type)) {
      unsigned int v35 = v34;
    }
    else {
      unsigned int v35 = v34 & 0xFFFFFFFE;
    }
    if (v35)
    {
      int v56 = 136315394;
      CFTypeRef v57 = "sp_ParseForUnknownREQPrefixAttribute";
      __int16 v58 = 2080;
      CFTypeRef v59 = a1;
      LODWORD(v47) = 22;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    CFIndex v25 = a1;
  }
  if (strncasecmp(v25, "#EXT-X-STREAM-INF", 0x11uLL))
  {
    if (v23 != 16) {
      goto LABEL_40;
    }
LABEL_37:
    int v42 = strncmp(v24, "REQ-VIDEO-LAYOUT", 0x10uLL);
    BOOL v43 = v32 < 12;
    BOOL v13 = a10;
    if (v43 || !v42) {
      goto LABEL_5;
    }
    goto LABEL_41;
  }
  int v41 = strncasecmp(v25, "#EXT-X-I-FRAME-STREAM-INF", 0x19uLL);
  if (v23 == 16 && v41) {
    goto LABEL_37;
  }
LABEL_40:
  BOOL v43 = v32 < 12;
  BOOL v13 = a10;
  if (v43) {
    goto LABEL_5;
  }
LABEL_41:
  if (*(void *)(a12 + 32)) {
    FigIsItOKToLogURLs();
  }
  uint64_t v29 = 0;
  uint64_t v31 = &v24[strcspn(v24, "\r\n")];
  int v27 = 2;
  int v14 = a9;
LABEL_44:
  *int v14 = sp_SkipSpacesTabsAndCommas(v31, a12, 1);
  *BOOL v13 = v27;
  return v29;
}

uint64_t sp_strtoll(const char *a1, char **a2, uint64_t *a3, int a4, uint64_t a5, uint64_t a6)
{
  __endptr = 0;
  *__error() = 0;
  *a3 = strtoll(a1, &__endptr, 10);
  if (*__error() == 22)
  {
    CFStringRef v12 = @"%s:Illegal integer conversion";
LABEL_18:
    uint64_t v19 = a5;
    uint64_t v16 = 4294954654;
    _StreamPlaylistLogError(4294954654, 4294955032, a6, v12, v19);
    goto LABEL_19;
  }
  if (*__error() == 34)
  {
    CFStringRef v12 = @"%s:out of range";
    goto LABEL_18;
  }
  if (*a3 < 0)
  {
    CFStringRef v12 = @"%s:Decimal value less than 0";
    goto LABEL_18;
  }
  BOOL v13 = __endptr;
  int v14 = (char *)(__endptr - a1);
  if (__endptr > a1)
  {
    CFStringRef v12 = @"%s:Illegal character before integer";
    while ((*a1 - 48) < 0xA)
    {
      ++a1;
      if (!--v14) {
        goto LABEL_10;
      }
    }
    goto LABEL_18;
  }
LABEL_10:
  if (a4 != 1 || (unsigned int v15 = *__endptr, v15 <= 0x2C) && ((1 << v15) & 0x100000002400) != 0)
  {
    uint64_t v16 = 0;
    char v17 = 1;
    if (!a2) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  uint64_t v20 = a5;
  uint64_t v16 = 4294954654;
  _StreamPlaylistLogError(4294954654, 4294955032, a6, @"%s:Illegal characters after integer", v20);
  char v17 = 0;
  if (a2) {
LABEL_14:
  }
    *a2 = v13;
LABEL_15:
  if ((v17 & 1) == 0)
  {
LABEL_19:
    *a3 = 0;
    return v16;
  }
  return 0;
}

uint64_t StreamingPlaylist_FindResolution(const char *a1, int *a2, int *a3, void *a4, uint64_t a5)
{
  int v14 = 0;
  BOOL v13 = 0;
  if (sp_strtol(a1, &v13, &v14, 0, (uint64_t)"horizontal resolution", a5))
  {
    int v9 = -1;
    goto LABEL_10;
  }
  int v9 = v14;
  if (!v13 || *v13 != 120)
  {
    _StreamPlaylistLogError(4294954654, 4294955032, a5, @"No resolution separator");
LABEL_10:
    int v11 = -1;
    if (!a4) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  ++v13;
  BOOL v13 = (char *)StreamingPlaylist_SkipSpacesAndTabs(v13, a5);
  int v10 = sp_strtol(v13, &v13, &v14, 1, (uint64_t)"vertical resolution", a5);
  int v11 = v14;
  if (v10) {
    int v11 = -1;
  }
  if (a4) {
LABEL_11:
  }
    *a4 = v13;
LABEL_12:
  uint64_t result = 0;
  if ((v9 & 0x80000000) == 0 && (v11 & 0x80000000) == 0)
  {
    *a2 = v9;
    *a3 = v11;
    return 1;
  }
  return result;
}

uint64_t PlaylistExtractallowedCPCForFairPlayStreaming(char *a1, size_t a2, uint64_t a3, void *a4)
{
  CFArrayRef v17 = 0;
  CFArrayRef theArray = 0;
  *(void *)uint64_t v16 = 0;
  uint64_t v6 = PlaylistTokenizeString(a1, a2, a3, 0x2Cu, &theArray);
  CFArrayRef v7 = theArray;
  if (v6)
  {
LABEL_15:
    uint64_t v14 = v6;
    if (v7) {
LABEL_16:
    }
      CFRelease(v7);
  }
  else
  {
    CFIndex v8 = 0;
    while (1)
    {
      CFIndex v9 = v7 ? CFArrayGetCount(v7) : 0;
      if (v8 >= v9) {
        break;
      }
      CFArrayGetValueAtIndex(v7, v8);
      uint64_t CStringPtrAndBufferToFree = (const char *)FigCFStringGetCStringPtrAndBufferToFree();
      int v11 = sp_SkipSpacesTabsAndCommas(CStringPtrAndBufferToFree, a3, 0);
      ++v8;
      if (sp_MatchTagAndColon(v11, "com.apple.streamingkeydelivery", 0x1EuLL, (const char **)v16, a3))
      {
        *(void *)uint64_t v16 = sp_SkipSpacesTabsAndCommas(*(const char **)v16, a3, 0);
        size_t v12 = strlen(*(const char **)v16);
        uint64_t v6 = PlaylistTokenizeString(*(char **)v16, v12, a3, 0x2Fu, &v17);
        if (!v6)
        {
          CFArrayRef v13 = v17;
          if (v17 && CFArrayGetCount(v17) > 0) {
            uint64_t v6 = PKDGetCPCBitfieldFromLabels(v13, a4);
          }
          else {
            uint64_t v6 = FigSignalErrorAt();
          }
        }
        goto LABEL_15;
      }
    }
    uint64_t v14 = 0;
    if (v7) {
      goto LABEL_16;
    }
  }
  if (v17) {
    CFRelease(v17);
  }
  free(0);
  return v14;
}

const void *StreamingPlaylistCreateMediaURLWithBytes(UInt8 *URLBytes, CFIndex length, CFURLRef baseURL, const __CFURL *a4, CFURLRef *a5, void *a6)
{
  CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  *a5 = CFURLCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E4F1CF80], URLBytes, length, 0x8000100u, baseURL);
  if (FigCFEqual())
  {
    uint64_t result = *a5;
    if (*a5) {
      uint64_t result = CFRetain(result);
    }
  }
  else
  {
    uint64_t result = CFURLCreateWithBytes(v11, URLBytes, length, 0x8000100u, a4);
  }
  *a6 = result;
  return result;
}

uint64_t PlaylistExtractVideoImmersiveAttribute(char *a1, size_t a2, uint64_t a3, __CFArray **a4)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  CFArrayRef theArray = 0;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v41 = 0u;
  uint64_t v6 = PlaylistTokenizeString(a1, a2, a3, 0x2Cu, &theArray);
  if (v6)
  {
    uint64_t v19 = v6;
    CFMutableDictionaryRef Mutable = 0;
    CFArrayRef v8 = theArray;
    goto LABEL_63;
  }
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  CFArrayRef v8 = theArray;
  if (!Mutable)
  {
LABEL_62:
    uint64_t v19 = 0;
    goto LABEL_63;
  }
  unsigned int v35 = a4;
  CFIndex v9 = 0;
  if (!theArray) {
    goto LABEL_5;
  }
LABEL_4:
  for (CFIndex i = CFArrayGetCount(v8); v9 < i; CFIndex i = 0)
  {
    CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v8, v9);
    CFArrayRef v39 = 0;
    unsigned int v37 = 0;
    long long v38 = 0uLL;
    uint64_t CStringPtrAndBufferToFree = (char *)FigCFStringGetCStringPtrAndBufferToFree();
    size_t Length = CFStringGetLength(ValueAtIndex);
    uint64_t v14 = PlaylistTokenizeString(CStringPtrAndBufferToFree, Length, a3, 0x2Fu, &v39);
    CFArrayRef v15 = v39;
    if (v14)
    {
      uint64_t v19 = v14;
      if (!v39)
      {
LABEL_59:
        free(v37);
        goto LABEL_63;
      }
    }
    else
    {
      if (v39 && CFArrayGetCount(v39) > 2)
      {
        CFStringRef v16 = (const __CFString *)CFArrayGetValueAtIndex(v15, 0);
        int v40 = 0;
        uint64_t v17 = FigCFStringGetCStringPtrAndBufferToFree();
        if (v16 && (CFTypeRef v18 = (const char *)v17, CFStringGetLength(v16)))
        {
          if (!strncasecmp(v18, "NONE", 4uLL))
          {
            uint64_t v19 = 0;
            unint64_t v21 = (long long *)MEMORY[0x1E4F21E10];
          }
          else if (!strncasecmp(v18, "SIDE", 4uLL))
          {
            uint64_t v19 = 0;
            unint64_t v21 = (long long *)MEMORY[0x1E4F21E20];
          }
          else
          {
            if (strncasecmp(v18, "OVER", 4uLL))
            {
              uint64_t v19 = 4294954654;
              _StreamPlaylistLogError(4294954654, 4294949659, a3, @"Invalid packing value in VIDEO-IMMERSIVE");
              goto LABEL_17;
            }
            uint64_t v19 = 0;
            unint64_t v21 = (long long *)MEMORY[0x1E4F21E18];
          }
          long long v38 = *v21;
          int v20 = 1;
        }
        else
        {
          uint64_t v19 = 4294954654;
          _StreamPlaylistLogError(4294954654, 4294949659, a3, @"Missing packing value in VIDEO-IMMERSIVE");
LABEL_17:
          int v20 = 0;
        }
        free(v40);
        long long v41 = v38;
        if (!v20) {
          goto LABEL_54;
        }
        CFStringRef v22 = (const __CFString *)CFArrayGetValueAtIndex(v15, 1);
        int v40 = 0;
        uint64_t v23 = FigCFStringGetCStringPtrAndBufferToFree();
        if (v22 && (char v24 = (const char *)v23, CFStringGetLength(v22)))
        {
          if (!strncasecmp(v24, "LR", 2uLL))
          {
            uint64_t v19 = 0;
            uint64_t v26 = (long long *)MEMORY[0x1E4F21E58];
          }
          else if (!strncasecmp(v24, "L", 1uLL))
          {
            uint64_t v19 = 0;
            uint64_t v26 = (long long *)MEMORY[0x1E4F21E60];
          }
          else if (!strncasecmp(v24, "R", 1uLL))
          {
            uint64_t v19 = 0;
            uint64_t v26 = (long long *)MEMORY[0x1E4F21E70];
          }
          else
          {
            if (strncasecmp(v24, "M", 1uLL))
            {
              uint64_t v19 = 4294954654;
              _StreamPlaylistLogError(4294954654, 4294949659, a3, @"Invalid channels value in VIDEO-IMMERSIVE");
              goto LABEL_33;
            }
            uint64_t v19 = 0;
            uint64_t v26 = (long long *)MEMORY[0x1E4F21E68];
          }
          long long v38 = *v26;
          int v25 = 1;
        }
        else
        {
          uint64_t v19 = 4294954654;
          _StreamPlaylistLogError(4294954654, 4294949659, a3, @"Missing channels value in VIDEO-IMMERSIVE");
LABEL_33:
          int v25 = 0;
        }
        free(v40);
        long long v42 = v38;
        if (!v25) {
          goto LABEL_54;
        }
        CFStringRef v27 = (const __CFString *)CFArrayGetValueAtIndex(v15, 2);
        int v40 = 0;
        uint64_t v28 = FigCFStringGetCStringPtrAndBufferToFree();
        if (v27 && (uint64_t v29 = (const char *)v28, CFStringGetLength(v27)))
        {
          if (!strncasecmp(v29, "FISH", 4uLL))
          {
            uint64_t v19 = 0;
            uint64_t v31 = (long long *)MEMORY[0x1E4F21E30];
          }
          else
          {
            if (strncasecmp(v29, "RECT", 4uLL))
            {
              uint64_t v19 = 4294954654;
              _StreamPlaylistLogError(4294954654, 4294949659, a3, @"Invalid projection value in VIDEO-IMMERSIVE");
              goto LABEL_46;
            }
            uint64_t v19 = 0;
            uint64_t v31 = (long long *)MEMORY[0x1E4F21E40];
          }
          long long v38 = *v31;
          int v30 = 1;
        }
        else
        {
          uint64_t v19 = 4294954654;
          _StreamPlaylistLogError(4294954654, 4294949659, a3, @"Missing projection value in VIDEO-IMMERSIVE");
LABEL_46:
          int v30 = 0;
        }
        free(v40);
        long long v43 = v38;
        if (v30)
        {
          if (CFArrayGetCount(v15) >= 4)
          {
            int Count = CFArrayGetCount(v15);
            _StreamPlaylistLogError(0, 4294949659, a3, @"Unexpected values in VIDEO-IMMERSIVE ignored %d", (Count - 3));
          }
          uint64_t v19 = 0;
        }
        goto LABEL_54;
      }
      uint64_t v19 = 4294954654;
      _StreamPlaylistLogError(4294954654, 4294949659, a3, @"Unexpected number of tags in VIDEO-IMMERSIVE");
      if (!v15) {
        goto LABEL_59;
      }
    }
LABEL_54:
    CFRelease(v15);
    free(v37);
    if (v19) {
      goto LABEL_63;
    }
    uint64_t v33 = FigTagCollectionCreate();
    if (v33)
    {
      uint64_t v19 = v33;
      goto LABEL_63;
    }
    CFArrayAppendValue(Mutable, 0);
    ++v9;
    if (v8) {
      goto LABEL_4;
    }
LABEL_5:
    ;
  }
  if (!v35) {
    goto LABEL_62;
  }
  uint64_t v19 = 0;
  NSObject *v35 = Mutable;
  CFMutableDictionaryRef Mutable = 0;
LABEL_63:
  if (v8) {
    CFRelease(v8);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v19;
}

uint64_t PlaylistExtractVideoLayoutAttribute(char *a1, size_t a2, uint64_t a3, __CFArray **a4, unsigned char *a5)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  CFArrayRef theArray = 0;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v43 = 0u;
  uint64_t v8 = PlaylistTokenizeString(a1, a2, a3, 0x2Cu, &theArray);
  if (v8)
  {
    uint64_t v32 = v8;
    goto LABEL_61;
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  int v10 = Mutable;
  if (!Mutable)
  {
LABEL_62:
    uint64_t v32 = 0;
    goto LABEL_63;
  }
  unsigned int v34 = a4;
  CFIndex v11 = 0;
  unsigned int v35 = Mutable;
LABEL_4:
  CFArrayRef v12 = theArray;
  if (theArray) {
    CFIndex Count = CFArrayGetCount(theArray);
  }
  else {
    CFIndex Count = 0;
  }
  if (v11 < Count)
  {
    CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v12, v11);
    int v40 = 0;
    CFArrayRef v41 = 0;
    uint64_t CStringPtrAndBufferToFree = (char *)FigCFStringGetCStringPtrAndBufferToFree();
    size_t Length = CFStringGetLength(ValueAtIndex);
    uint64_t v17 = PlaylistTokenizeString(CStringPtrAndBufferToFree, Length, a3, 0x2Fu, &v41);
    CFArrayRef v18 = v41;
    if (v17)
    {
      uint64_t v32 = v17;
      if (v41) {
        goto LABEL_49;
      }
      goto LABEL_50;
    }
    if (!v41 || !CFArrayGetCount(v41))
    {
      uint64_t v32 = 4294954654;
      _StreamPlaylistLogError(4294954654, 4294949659, a3, @"No valid tags in VIDEO-LAYOUT");
      if (v18) {
        goto LABEL_49;
      }
      goto LABEL_50;
    }
    long long v38 = *MEMORY[0x1E4F21E10];
    long long v43 = *MEMORY[0x1E4F21E10];
    long long v37 = *MEMORY[0x1E4F21E40];
    long long v45 = *MEMORY[0x1E4F21E40];
    long long v36 = *MEMORY[0x1E4F21E68];
    long long v44 = *MEMORY[0x1E4F21E68];
    if (CFArrayGetCount(v18) < 1)
    {
      uint64_t v32 = 0;
      goto LABEL_49;
    }
    CFIndex v19 = 0;
    int v20 = 0;
    int v21 = 0;
    int v22 = 0;
    while (1)
    {
      CFStringRef v23 = (const __CFString *)CFArrayGetValueAtIndex(v18, v19);
      long long v42 = 0;
      *a5 = 0;
      uint64_t v24 = FigCFStringGetCStringPtrAndBufferToFree();
      if (!v23 || (int v25 = (const char *)v24, !CFStringGetLength(v23)))
      {
        CFStringRef v30 = @"Invalid tag in VIDEO-LAYOUT";
        goto LABEL_47;
      }
      if (!strncasecmp(v25, "PACK-NONE", 9uLL)) {
        break;
      }
      if (!strncasecmp(v25, "PACK-SIDE", 9uLL))
      {
        if (v22) {
          goto LABEL_46;
        }
        uint64_t v28 = (long long *)MEMORY[0x1E4F21E20];
        goto LABEL_30;
      }
      if (!strncasecmp(v25, "PACK-OVER", 9uLL))
      {
        if (v22)
        {
LABEL_46:
          CFStringRef v30 = @"Multiple packing tags in VIDEO-LAYOUT";
          goto LABEL_47;
        }
        uint64_t v28 = (long long *)MEMORY[0x1E4F21E18];
LABEL_30:
        long long v27 = *v28;
LABEL_31:
        long long v43 = v27;
        int v22 = 1;
        goto LABEL_32;
      }
      if (!strncasecmp(v25, "PROJ-RECT", 9uLL))
      {
        if (v20) {
          goto LABEL_54;
        }
        long long v29 = v37;
LABEL_38:
        long long v45 = v29;
        int v20 = 1;
        goto LABEL_32;
      }
      if (!strncasecmp(v25, "PROJ-FISH", 9uLL))
      {
        if (v20)
        {
LABEL_54:
          CFStringRef v30 = @"Multiple projection tags in VIDEO-LAYOUT";
          goto LABEL_47;
        }
        long long v29 = *MEMORY[0x1E4F21E30];
        goto LABEL_38;
      }
      if (!strncasecmp(v25, "CH-STEREO", 9uLL))
      {
        if (v21)
        {
LABEL_55:
          CFStringRef v30 = @"Multiple channel tags in VIDEO-LAYOUT";
          goto LABEL_47;
        }
        long long v26 = *MEMORY[0x1E4F21E58];
      }
      else
      {
        if (strncasecmp(v25, "CH-MONO", 7uLL))
        {
          *a5 = 1;
          CFStringRef v30 = @"Unrecognized attribute value in VIDEO-LAYOUT";
LABEL_47:
          uint64_t v32 = 4294954654;
          _StreamPlaylistLogError(4294954654, 4294949659, a3, v30);
          free(v42);
LABEL_48:
          int v10 = v35;
          if (v18) {
LABEL_49:
          }
            CFRelease(v18);
LABEL_50:
          free(v40);
          if (v32) {
            goto LABEL_63;
          }
          if (*a5) {
            goto LABEL_62;
          }
          uint64_t v31 = FigTagCollectionCreate();
          if (v31)
          {
            uint64_t v32 = v31;
            goto LABEL_63;
          }
          CFArrayAppendValue(v10, 0);
          ++v11;
          goto LABEL_4;
        }
        if (v21) {
          goto LABEL_55;
        }
        long long v26 = v36;
      }
      long long v44 = v26;
      int v21 = 1;
LABEL_32:
      free(v42);
      if (++v19 >= CFArrayGetCount(v18))
      {
        uint64_t v32 = 0;
        goto LABEL_48;
      }
    }
    if (v22) {
      goto LABEL_46;
    }
    long long v27 = v38;
    goto LABEL_31;
  }
  if (!v34) {
    goto LABEL_62;
  }
  uint64_t v32 = 0;
  unsigned char *v34 = v10;
LABEL_61:
  int v10 = 0;
LABEL_63:
  if (theArray) {
    CFRelease(theArray);
  }
  if (v10) {
    CFRelease(v10);
  }
  return v32;
}

uint64_t PlaylistProcessAlternate(uint64_t a1, const void *PlaylistAlternateURL, void *a3, uint64_t a4, void *a5, const __CFString *a6, const __CFString *a7, uint64_t a8, double a9, double a10, void *a11, uint64_t a12, uint64_t a13, unsigned __int8 a14, int a15, int a16, uint64_t a17, int a18, int a19, uint64_t a20,uint64_t a21,uint64_t a22,unsigned char *a23,uint64_t a24)
{
  BOOL v101 = 0;
  v100[0] = 0;
  *(_DWORD *)((char *)v100 + 3) = 0;
  v99[0] = 0;
  *(_DWORD *)((char *)v99 + 3) = 0;
  v98[0] = 0;
  *(_DWORD *)((char *)v98 + 3) = 0;
  v97[0] = 0;
  *(_DWORD *)((char *)v97 + 3) = 0;
  long long v95 = 0u;
  long long v96 = 0u;
  if (!a4)
  {
    uint64_t v37 = 4294954654;
    _StreamPlaylistLogError(4294954654, 4294955020, a24, @"No byte rate");
    return v37;
  }
  int v32 = a14;
  int v94 = 0;
  if (!a6)
  {
    if (a7)
    {
      uint64_t v37 = 4294954654;
      _StreamPlaylistLogError(4294954654, 4294951416, a24, @"no base layer CODECS for SUPPLEMENTAL-CODECS");
    }
    else
    {
      uint64_t v37 = 0;
    }
    goto LABEL_39;
  }
  int v33 = FigMediaValidatorValidateRFC4281CodecsForStreaming(a6, 0, &v94);
  if (a7)
  {
    BOOL v71 = (v33 | v94 & 2) != 0;
    v105[0] = 0;
    v72[0] = 0;
    BOOL v103 = 0;
    unsigned int v104 = 0;
    int v102 = 0;
    uint64_t CStringPtrAndBufferToFree = (char *)FigCFStringGetCStringPtrAndBufferToFree();
    size_t Length = CFStringGetLength(a7);
    if (PlaylistTokenizeString(CStringPtrAndBufferToFree, Length, a24, 0x2Cu, &v103))
    {
      uint64_t v37 = 4294954654;
      _StreamPlaylistLogError(4294954654, 4294951415, a24, @"illegal SUPPLEMENTAL-CODECS");
      long long v38 = v103;
      if (v103) {
LABEL_35:
      }
        CFRelease(v38);
    }
    else
    {
      uint64_t v67 = a5;
      CFIndex v36 = 0;
      uint64_t v37 = 0;
      long long v38 = v103;
      if (!v103) {
        goto LABEL_7;
      }
LABEL_6:
      for (CFIndex i = CFArrayGetCount(v38); v36 < i; CFIndex i = 0)
      {
        CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v38, v36);
        if (!ValueAtIndex)
        {
          CFStringRef v49 = @"illegal SUPPLEMENTAL-CODECS";
LABEL_33:
          uint64_t v37 = 4294954654;
          _StreamPlaylistLogError(4294954654, 4294951415, a24, v49);
          break;
        }
        CFStringRef v41 = ValueAtIndex;
        if (v102)
        {
          CFRelease(v102);
          int v102 = 0;
        }
        long long v42 = v104;
        if (v104)
        {
          unsigned int v104 = 0;
          free(v42);
        }
        long long v43 = (char *)FigCFStringGetCStringPtrAndBufferToFree();
        size_t v44 = CFStringGetLength(v41);
        uint64_t v37 = PlaylistTokenizeString(v43, v44, a24, 0x2Fu, &v102);
        if (!v37)
        {
          CFIndex v45 = 0;
          CFArrayRef v46 = v102;
          if (v102)
          {
LABEL_18:
            CFIndex Count = CFArrayGetCount(v46);
            goto LABEL_20;
          }
          while (1)
          {
            CFIndex Count = 0;
LABEL_20:
            if (v45 >= Count) {
              break;
            }
            CFStringRef v48 = (const __CFString *)CFArrayGetValueAtIndex(v46, v45);
            if (v45)
            {
              if (CFStringGetLength(v48) != 4)
              {
                uint64_t v37 = 4294954654;
                _StreamPlaylistLogError(4294954654, 4294951414, a24, @"illegal Brand in SUPPLEMENTAL-CODECS");
                goto LABEL_34;
              }
            }
            else if (FigMediaValidatorValidateRFC4281CodecsForStreaming(v48, 0, v105))
            {
              CFStringRef v49 = @"illegal CODECS member in SUPPLEMENTAL-CODECS";
              goto LABEL_33;
            }
            ++v45;
            if (v46) {
              goto LABEL_18;
            }
          }
        }
        ++v36;
        if (v38) {
          goto LABEL_6;
        }
LABEL_7:
        ;
      }
LABEL_34:
      int v32 = a14;
      a5 = v67;
      if (v38) {
        goto LABEL_35;
      }
    }
    if (v102) {
      CFRelease(v102);
    }
    free(v104);
    free(v72[0]);
    if (!v71) {
      goto LABEL_40;
    }
    goto LABEL_39;
  }
  uint64_t v37 = 0;
  if (v33 | v94 & 2) {
LABEL_39:
  }
    *a23 = 1;
LABEL_40:
  if (!v32)
  {
    CFArrayRef Alternates = (const __CFArray *)FigMultivariantPlaylistGetAlternates(a1);
    if (Alternates)
    {
      if (CFArrayGetCount(Alternates) >= 1)
      {
        CFArrayRef v57 = (const __CFArray *)FigMultivariantPlaylistGetAlternates(a1);
        if (v57)
        {
          CFIndex v58 = CFArrayGetCount(v57);
          if (v58 >= 1)
          {
            CFIndex v59 = v58;
            CFIndex v60 = 0;
            while (1)
            {
              CFArrayRef v61 = (const __CFArray *)FigMultivariantPlaylistGetAlternates(a1);
              uint64_t v62 = CFArrayGetValueAtIndex(v61, v60);
              if (!FigAlternateIsIFrameOnly((uint64_t)v62)) {
                break;
              }
              if (v59 == ++v60) {
                goto LABEL_41;
              }
            }
            if (v62)
            {
              uint64_t SubtitleGroupIDString = FigAlternateGetSubtitleGroupIDString((uint64_t)v62);
              if (!a12 && SubtitleGroupIDString) {
                goto LABEL_74;
              }
              if (a12 && !SubtitleGroupIDString)
              {
                PlaylistAlternateCFURLRef URL = (const void *)FigAlternateGetPlaylistAlternateURL((uint64_t)v62);
LABEL_74:
                uint64_t v37 = 4294954654;
                _StreamPlaylistLogError(4294954654, 4294954980, a24, @"Variant %@ is missing subtitle group", PlaylistAlternateURL);
                return v37;
              }
              uint64_t AudioGroupIDString = FigAlternateGetAudioGroupIDString((uint64_t)v62);
              if (!a8 && AudioGroupIDString)
              {
LABEL_81:
                uint64_t v37 = 4294954654;
                _StreamPlaylistLogError(4294954654, 4294954982, a24, @"Variant %@ is missing audio group", PlaylistAlternateURL);
                return v37;
              }
              if (a8 && !AudioGroupIDString)
              {
                PlaylistAlternateCFURLRef URL = (const void *)FigAlternateGetPlaylistAlternateURL((uint64_t)v62);
                goto LABEL_81;
              }
              if (v37) {
                return v37;
              }
            }
          }
        }
      }
    }
  }
LABEL_41:
  if (a5 && (uint64_t)a5 > a4)
  {
    _StreamPlaylistLogError(0, 4294955032, a24, @"Ignoring AVERAGE-BANDWIDTH %lld as it exceeds peak BANDWIDTH %lld", a5, a4);
    a5 = 0;
  }
  if ((a16 | a15) < 0) {
    double v50 = 0.0;
  }
  else {
    double v50 = (double)a15;
  }
  if ((a16 | a15) < 0) {
    double v51 = 0.0;
  }
  else {
    double v51 = (double)a16;
  }
  if (a10 <= 0.0) {
    a10 = -1.0;
  }
  uint64_t v52 = *MEMORY[0x1E4F1CF80];
  int v53 = FigAtomicIncrement32();
  CFArrayRef v54 = (const __CFArray *)FigMultivariantPlaylistGetAlternates(a1);
  if (v54) {
    int v55 = CFArrayGetCount(v54);
  }
  else {
    int v55 = 0;
  }
  v72[0] = a3;
  v72[1] = a5;
  void v72[2] = *(void **)&a9;
  v72[3] = *(void **)&a10;
  v72[4] = (void *)a7;
  v72[5] = a11;
  char v73 = 0;
  *(_DWORD *)uint64_t v74 = v100[0];
  *(_DWORD *)&v74[3] = *(_DWORD *)((char *)v100 + 3);
  uint64_t v75 = a8;
  char v76 = 0;
  *(_DWORD *)int v77 = v99[0];
  *(_DWORD *)&v77[3] = *(_DWORD *)((char *)v99 + 3);
  uint64_t v78 = a12;
  char v79 = 0;
  *(_DWORD *)unsigned int v80 = v98[0];
  *(_DWORD *)&v80[3] = *(_DWORD *)((char *)v98 + 3);
  uint64_t v81 = a13;
  char v82 = 0;
  *(_DWORD *)CFTypeRef v83 = v97[0];
  *(_DWORD *)&v83[3] = *(_DWORD *)((char *)v97 + 3);
  uint64_t v84 = a17;
  int v85 = a18;
  int v86 = a19;
  uint64_t v87 = a20;
  uint64_t v88 = a21;
  uint64_t v89 = a22;
  double v90 = v50;
  double v91 = v51;
  long long v93 = v96;
  long long v92 = v95;
  uint64_t v37 = FigAlternateCreate(v52, 0, PlaylistAlternateURL, a4, a6, a14, v53, v55, (uint64_t)v72, &v101);
  uint64_t v63 = v101;
  if (!v37)
  {
    FigMultivariantPlaylistAddAlternate(a1, v101);
    uint64_t v63 = v101;
  }
  if (v63) {
    CFRelease(v63);
  }
  return v37;
}

uint64_t PlaylistProcessByteRange(uint64_t *a1, uint64_t *a2, unsigned char *a3, const char **a4, uint64_t a5, uint64_t a6)
{
  uint64_t v14 = (char *)*a4;
  *__error() = 0;
  if (a3) {
    *a3 = 0;
  }
  uint64_t result = sp_strtoll(*a4, &v14, a1, 0, (uint64_t)"byte range", a6);
  if (!result)
  {
    CFArrayRef v13 = (char *)StreamingPlaylist_SkipSpacesAndTabs(v14, a6);
    uint64_t v14 = v13;
    if (*v13 == 64)
    {
      uint64_t v14 = (char *)(StreamingPlaylist_SkipSpacesAndTabs(v13, a6) + 1);
      uint64_t result = sp_strtoll(v14, &v14, a2, a5 == 0, (uint64_t)"byte range offset", a6);
      if (a3 && !result)
      {
        uint64_t result = 0;
        *a3 = 1;
      }
    }
    else
    {
      uint64_t result = 0;
    }
  }
  *a4 = v14;
  return result;
}

uint64_t PlaylistProcessBitRate(double *a1, const char **a2, uint64_t a3)
{
  uint64_t v6 = (char *)*a2;
  unint64_t v8 = 0;
  CFIndex v9 = v6;
  *__error() = 0;
  uint64_t result = sp_strtoull(*a2, &v9, &v8, 10, 0, 1, (uint64_t)"BitRate", a3);
  if (!result) {
    *a1 = (double)v8 * 1000.0;
  }
  *a2 = v9;
  return result;
}

uint64_t sp_MatchYesOrNo(uint64_t a1, char *a2, uint64_t a3, unsigned char *a4)
{
  if (!strncasecmp(a2, "YES", 3uLL))
  {
    uint64_t v8 = 0;
    *a4 = 1;
  }
  else if (!strncasecmp(a2, "NO", 2uLL))
  {
    uint64_t v8 = 0;
    *a4 = 0;
  }
  else
  {
    uint64_t v10 = a1;
    uint64_t v8 = 4294954654;
    _StreamPlaylistLogError(4294954654, 4294955030, a3, @"%s must be YES or NO", v10);
  }
  return v8;
}

uint64_t PlaylistCreateCharacteristicsArray(char *a1, size_t a2, uint64_t a3, CFMutableArrayRef *a4)
{
  CFArrayRef theArray = 0;
  uint64_t v5 = PlaylistTokenizeString(a1, a2, a3, 0x2Cu, &theArray);
  CFArrayRef v6 = theArray;
  if (v5)
  {
LABEL_7:
    uint64_t v8 = v5;
    if (!v6) {
      return v8;
    }
    goto LABEL_4;
  }
  CFMutableArrayRef MutableCopy = CFArrayCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, theArray);
  *a4 = MutableCopy;
  if (!MutableCopy)
  {
    uint64_t v5 = FigSignalErrorAt();
    goto LABEL_7;
  }
  uint64_t v8 = 0;
  if (v6) {
LABEL_4:
  }
    CFRelease(v6);
  return v8;
}

uint64_t PlaylistCharacteristicsCheckFn(CFStringRef theString, int *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  int v4 = *a2;
  if (*a2 != 1668047728)
  {
    if (v4 == 1936684398)
    {
      CFArrayRef v6 = kFigStdAssetMediaCharacteristic_TaggedDescribesVideoForAccessibility;
LABEL_8:
      uint64_t result = CFEqual(theString, *v6);
      if (result) {
        return result;
      }
      goto LABEL_9;
    }
    if (v4 != 1935832172)
    {
LABEL_9:
      buffer[0] = 0;
      CFStringGetCString(theString, buffer, 80, 0x600u);
      return _StreamPlaylistLogError(0, 4294955028, *((void *)a2 + 1), @"Unrecognized characteristic tag %s", buffer);
    }
  }
  uint64_t result = CFEqual(theString, @"public.accessibility.transcribes-spoken-dialog");
  if (!result)
  {
    uint64_t result = CFEqual(theString, @"public.accessibility.describes-music-and-sound");
    if (!result)
    {
      CFArrayRef v6 = kFigStdAssetMediaCharacteristic_TaggedEasyToRead;
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t PlaylistAddCharacteristicsForClosedCaptions(CFArrayRef *a1)
{
  CFArrayRef v2 = *a1;
  if (v2)
  {
    CFIndex Count = CFArrayGetCount(v2);
    v10.locatiouint64_t n = 0;
    v10.length = Count;
    int v4 = CFArrayContainsValue(*a1, v10, @"public.accessibility.transcribes-spoken-dialog");
    v11.locatiouint64_t n = 0;
    v11.length = Count;
    int v5 = CFArrayContainsValue(*a1, v11, @"public.accessibility.describes-music-and-sound");
    int v6 = v5;
    if (v4)
    {
      if (v5) {
        return 0;
      }
    }
    else
    {
      CFArrayAppendValue(*a1, @"public.accessibility.transcribes-spoken-dialog");
      if (v6) {
        return 0;
      }
    }
LABEL_7:
    CFArrayAppendValue(*a1, @"public.accessibility.describes-music-and-sound");
    return 0;
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  *a1 = Mutable;
  if (Mutable)
  {
    CFArrayAppendValue(Mutable, @"public.accessibility.transcribes-spoken-dialog");
    goto LABEL_7;
  }

  return FigSignalErrorAt();
}

uint64_t PlaylistAddMediaGroup(uint64_t a1, int a2, void *a3, const __CFString *a4, const void *a5, const void *a6, const void *a7, const void *a8, double a9, char a10, char a11, char a12, char a13, const void *a14, CFStringRef localeIdentifier, const __CFString *a16, void *a17, int a18, void *valuePtr)
{
  uint64_t v124 = *MEMORY[0x1E4F143B8];
  values = 0;
  CFStringForOSTypeuint64_t Value = (void *)FigGetCFStringForOSTypeValue();
  CFArrayRef MediaSelectionArray = (const __CFArray *)FigMultivariantPlaylistGetMediaSelectionArray(a1);
  MediaSelectionOptionArrayByMediaint Type = (const __CFArray *)FindMediaSelectionOptionArrayByMediaType(MediaSelectionArray, CFStringForOSTypeValue);
  uint64_t v100 = a1;
  BOOL v101 = a3;
  if (MediaSelectionOptionArrayByMediaType)
  {
    CFArrayRef v36 = MediaSelectionOptionArrayByMediaType;
    goto LABEL_20;
  }
  CFAllocatorRef v26 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (!Mutable) {
    return 4294954510;
  }
  CFMutableArrayRef v28 = Mutable;
  CFMutableArrayRef v29 = 0;
  *((void *)&v116 + 1) = 0;
  *(void *)&long long v117 = 0;
  *(void *)&long long v108 = 0;
  long long v107 = 0uLL;
  BOOL v106 = CFStringForOSTypeValue;
  keys = @"MediaSelectionGroupMediaType";
  *(void *)&long long v116 = @"MediaSelectionGroupAllowEmptySelection";
  CFStringRef v30 = kFigStdAssetMediaSelectionGroupKey_OptionsArray;
  CFIndex v31 = 3;
  uint64_t v32 = 2;
  if (a2 <= 1936684397)
  {
    if (a2 == 1668047728 || a2 == 1935832172)
    {
      *(void *)&long long v107 = *MEMORY[0x1E4F1CFD0];
      int v33 = kFigStdAssetMediaCharacteristic_Legible;
      goto LABEL_11;
    }
LABEL_14:
    *(&keys + v32) = *v30;
    *(&v106 + v32) = Mutable;
    goto LABEL_16;
  }
  if (a2 == 1986618469)
  {
    *(void *)&long long v107 = *MEMORY[0x1E4F1CFD0];
    int v33 = kFigStdAssetMediaCharacteristic_Visual;
  }
  else
  {
    if (a2 != 1936684398) {
      goto LABEL_14;
    }
    *(void *)&long long v107 = *MEMORY[0x1E4F1CFD0];
    int v33 = kFigStdAssetMediaCharacteristic_Audible;
  }
LABEL_11:
  values = *v33;
  *((void *)&v116 + 1) = @"MediaSelectionGroupOptions";
  *((void *)&v107 + 1) = Mutable;
  if (values)
  {
    CFMutableArrayRef Mutable = CFArrayCreate(v26, (const void **)&values, 1, MEMORY[0x1E4F1D510]);
    if (!Mutable)
    {
      CFRelease(v28);
      return 4294954510;
    }
    CFStringRef v30 = kFigStdAssetMediaSelectionGroupKey_MediaCharacteristics;
    CFIndex v31 = 4;
    uint64_t v32 = 3;
    CFMutableArrayRef v29 = Mutable;
    goto LABEL_14;
  }
  CFMutableArrayRef v29 = 0;
  CFIndex v31 = 3;
LABEL_16:
  CFDictionaryRef v34 = CFDictionaryCreate(v26, (const void **)&keys, (const void **)&v106, v31, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (v34)
  {
    FigMultivariantPlaylistAddMediaSelection(a1, v34);
    CFRelease(v34);
    uint64_t v35 = 0;
    CFArrayRef v36 = v28;
    if (!v29) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  CFArrayRef v36 = 0;
  uint64_t v35 = 4294954510;
  if (v29) {
LABEL_18:
  }
    CFRelease(v29);
LABEL_19:
  CFRelease(v28);
  if (!v34) {
    return v35;
  }
LABEL_20:
  int v102 = a2;
  uint64_t v37 = (void *)FigGetCFStringForOSTypeValue();
  CFIndex Count = CFArrayGetCount(v36);
  if (Count >= 1)
  {
    CFIndex v39 = Count;
    CFIndex v40 = 0;
    while (1)
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v36, v40);
      CFDictionaryGetValue(ValueAtIndex, @"MediaSelectionOptionsName");
      CFDictionaryGetValue(ValueAtIndex, @"MediaSelectionOptionsMediaType");
      if (FigCFEqual())
      {
        if (FigCFEqual())
        {
          CFDictionaryGetValue(ValueAtIndex, @"MediaSelectionOptionsExtendedLanguageTag");
          if (FigCFEqual()) {
            break;
          }
        }
      }
      if (v39 == ++v40) {
        goto LABEL_28;
      }
    }
    if (ValueAtIndex)
    {
      int v50 = a2;
      char v73 = CFDictionaryGetValue(ValueAtIndex, @"MediaSelectionOptionsPersistentID");
LABEL_81:
      uint64_t v74 = v73;
      if (v50 == 1936684398)
      {
        MutableCFDictionaryRef AudioGroups = (const __CFDictionary *)FigMultivariantPlaylistGetMutableAudioGroups(v100);
        char v76 = v101;
      }
      else
      {
        char v76 = v101;
        if (v50 != 1668047728)
        {
          int v77 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
          if (v50 == 1935832172)
          {
            MutableCFDictionaryRef SubtitleGroups = FigMultivariantPlaylistGetMutableSubtitleGroups(v100);
          }
          else
          {
            if (v50 != 1986618469) {
              return FigSignalErrorAt();
            }
            MutableCFDictionaryRef SubtitleGroups = FigMultivariantPlaylistGetMutableVideoGroups(v100);
          }
          MutableCFDictionaryRef AudioGroups = (const __CFDictionary *)MutableSubtitleGroups;
          goto LABEL_91;
        }
        MutableCFDictionaryRef AudioGroups = (const __CFDictionary *)FigMultivariantPlaylistGetMutableClosedCaptionGroups(v100);
      }
      int v77 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
LABEL_91:
      CFDictionaryRef v79 = (const __CFDictionary *)CFDictionaryGetValue(MutableAudioGroups, v76);
      if (v79)
      {
        CFDictionaryRef v81 = v79;
LABEL_94:
        if (CFDictionaryGetValue(v81, v74)) {
          return 0;
        }
        CFAllocatorRef v82 = *v77;
        CFTypeRef v83 = CFDictionaryCreateMutable(*v77, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        if (v83)
        {
          uint64_t v84 = v83;
          if (v76) {
            CFDictionarySetValue(v83, @"FBPAEGLMK_GroupID", v76);
          }
          if (a6)
          {
            CFDictionarySetValue(v84, @"FBPAEGLMK_URL", a6);
          }
          else if (v50 == 1668047728 && a16)
          {
            CFTypeID v88 = CFGetTypeID(a16);
            if (v88 == CFStringGetTypeID()) {
              CFDictionarySetValue(v84, @"FBPAEGLMK_ClosedCaptionType", a16);
            }
            goto LABEL_111;
          }
          if (v50 != 1936684398 || !a16 || (CFTypeID v85 = CFGetTypeID(a16), v85 != CFStringGetTypeID()))
          {
LABEL_111:
            if (a7) {
              CFDictionarySetValue(v84, @"FBPAEGLMK_URLForCacheLookup", a7);
            }
            if (v50 == 1936684398 && a17) {
              CFDictionarySetValue(v84, @"FBPAEGLMK_Channels", a17);
            }
            if (a14) {
              CFDictionarySetValue(v84, @"FBPAEGLMK_Characteristics", a14);
            }
            if (v50 == 1936684398 && a18 >= 1) {
              FigCFDictionarySetInt32();
            }
            if (v50 == 1936684398 && a9 > 0.0) {
              FigCFDictionarySetDouble();
            }
            if (a8) {
              CFDictionarySetValue(v84, @"FBPAEGLMK_StableStreamIdentifier", a8);
            }
            uint64_t v89 = (const void *)*MEMORY[0x1E4F1CFD0];
            double v90 = (const void *)*MEMORY[0x1E4F1CFC8];
            if (a11) {
              double v91 = (const void *)*MEMORY[0x1E4F1CFD0];
            }
            else {
              double v91 = (const void *)*MEMORY[0x1E4F1CFC8];
            }
            CFDictionarySetValue(v84, @"FBPAEGLMK_Autoselect", v91);
            if (a10) {
              long long v92 = v89;
            }
            else {
              long long v92 = v90;
            }
            CFDictionarySetValue(v84, @"FBPAEGLMK_Default", v92);
            CFLocaleIdentifier CanonicalLanguageIdentifierFromString = CFLocaleCreateCanonicalLanguageIdentifierFromString(v82, a4);
            if (CanonicalLanguageIdentifierFromString) {
              CFDictionarySetValue(v84, @"FBPAEGLMK_UnicodeLanguageIdentifier", CanonicalLanguageIdentifierFromString);
            }
            if (a5) {
              CFDictionarySetValue(v84, @"FBPAEGLMK_Name", a5);
            }
            if (a12) {
              int v94 = v89;
            }
            else {
              int v94 = v90;
            }
            CFDictionarySetValue(v84, @"FBPAEGLMK_Forced", v94);
            CFDictionaryAddValue(v81, v74, v84);
            CFRelease(v84);
            if (CanonicalLanguageIdentifierFromString) {
              CFRelease(CanonicalLanguageIdentifierFromString);
            }
            return 0;
          }
          FigGetAllocatorForMedia();
          CFStringGetIntValue(a16);
          SInt32 = (const void *)FigCFNumberCreateSInt32();
          if (SInt32)
          {
            uint64_t v87 = SInt32;
            CFDictionarySetValue(v84, @"FBPAEGLMK_AudioInstreamID", SInt32);
            CFRelease(v87);
            goto LABEL_111;
          }
        }
        return FigSignalErrorAt();
      }
      CFMutableDictionaryRef v80 = CFDictionaryCreateMutable(*v77, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (v80)
      {
        CFDictionaryRef v81 = v80;
        CFDictionaryAddValue(MutableAudioGroups, v76, v80);
        CFRelease(v81);
        goto LABEL_94;
      }
      return 4294954510;
    }
  }
LABEL_28:
  keys = @"MediaSelectionOptionsPersistentID";
  CFAllocatorRef v42 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFNumberRef v43 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberCFIndexType, valuePtr);
  BOOL v106 = v43;
  if (!v43) {
    return 4294954510;
  }
  CFNumberRef cf = v43;
  uint64_t v123 = 0;
  long long v121 = 0u;
  long long v122 = 0u;
  long long v119 = 0u;
  long long v120 = 0u;
  long long v117 = 0u;
  long long v118 = 0u;
  long long v116 = 0u;
  long long v107 = 0u;
  long long v108 = 0u;
  long long v109 = 0u;
  long long v110 = 0u;
  long long v111 = 0u;
  long long v112 = 0u;
  long long v113 = 0u;
  uint64_t v114 = 0;
  ++*valuePtr;
  if (a5)
  {
    *(void *)&long long v116 = @"MediaSelectionOptionsName";
    *(void *)&long long v107 = a5;
    uint64_t v44 = 2;
  }
  else
  {
    uint64_t v44 = 1;
  }
  CFStringRef v45 = a4;
  if (!a4)
  {
    CFStringRef v52 = 0;
    CFLocaleIdentifier v49 = 0;
    *(&keys + v44) = @"MediaSelectionOptionsLanguageCode";
    CFLocaleIdentifier v54 = @"und";
    *(&v106 + v44) = @"und";
    uint64_t v53 = v44 + 1;
    int v50 = a2;
    goto LABEL_39;
  }
  PackedISO639_2TFromLocaleCFStringRef Identifier = FigMetadataGetPackedISO639_2TFromLocaleIdentifier(a4);
  *(&keys + v44) = @"MediaSelectionOptionsExtendedLanguageTag";
  *(&v106 + v44) = (void *)a4;
  uint64_t v47 = v44 + 1;
  CFLocaleIdentifier v48 = CFLocaleCreateCanonicalLanguageIdentifierFromString(v42, a4);
  CFLocaleIdentifier v49 = v48;
  if (v48)
  {
    *(&keys + v47) = @"MediaSelectionOptionsUnicodeLanguageIdentifier";
    *(&v106 + v47) = (void *)v48;
    uint64_t v47 = v44 + 2;
  }
  int v50 = v102;
  StringForLanguageint Code = FigCreateStringForLanguageCode(v42, PackedISO639_2TFromLocaleIdentifier, 1);
  CFStringRef v52 = StringForLanguageCode;
  if (StringForLanguageCode)
  {
    *(&keys + v47) = @"MediaSelectionOptionsLanguageCode";
    *(&v106 + v47) = (void *)StringForLanguageCode;
    uint64_t v53 = v47 + 1;
    CFLocaleIdentifier v54 = CFLocaleCreateCanonicalLanguageIdentifierFromString(v42, StringForLanguageCode);
    if (v54)
    {
      uint64_t v44 = v47;
      CFStringRef v45 = v54;
LABEL_39:
      *(&keys + v53) = @"MediaSelectionOptionsUnicodeLanguageCode";
      *(&v106 + v53) = (void *)v54;
      uint64_t v47 = v44 + 2;
      goto LABEL_42;
    }
    CFStringRef v45 = 0;
    ++v47;
  }
  else
  {
    CFStringRef v45 = 0;
  }
LABEL_42:
  if (a10)
  {
    int v55 = kFigStdAssetMediaSelectionOptionsKey_IsDefault;
LABEL_44:
    *(&keys + v47) = *v55;
    *(&v106 + v47++) = (void *)*MEMORY[0x1E4F1CFD0];
    goto LABEL_46;
  }
  if (!a11)
  {
    int v55 = kFigStdAssetMediaSelectionOptionsKey_IsAuxiliaryContent;
    goto LABEL_44;
  }
LABEL_46:
  if (v50 == 1668047728)
  {
    *(&keys + v47) = @"MediaSelectionOptionsIsMuxedClosedCaption";
    CFArrayRef v61 = (void **)MEMORY[0x1E4F1CFC8];
    if (a13) {
      CFArrayRef v61 = (void **)MEMORY[0x1E4F1CFD0];
    }
    int v56 = *v61;
    uint64_t v60 = 1;
    uint64_t v59 = v47;
  }
  else
  {
    if (v50 != 1935832172) {
      goto LABEL_58;
    }
    *(&keys + v47) = @"MediaSelectionOptionsDisplaysNonForcedSubtitles";
    int v56 = (void *)*MEMORY[0x1E4F1CFC8];
    CFArrayRef v57 = (void *)*MEMORY[0x1E4F1CFD0];
    if (a12) {
      CFIndex v58 = (void *)*MEMORY[0x1E4F1CFC8];
    }
    else {
      CFIndex v58 = (void *)*MEMORY[0x1E4F1CFD0];
    }
    *(&v106 + v47) = v58;
    uint64_t v59 = v47 + 1;
    *(&keys + v47 + 1) = @"MediaSelectionOptionsDisplaysForcedSubtitlesOnly";
    if (a12) {
      int v56 = v57;
    }
    uint64_t v60 = 2;
  }
  *(&v106 + v59) = v56;
  v47 += v60;
LABEL_58:
  if (a14)
  {
    *(&keys + v47) = @"MediaSelectionOptionsTaggedMediaCharacteristics";
    *(&v106 + v47++) = (void *)a14;
  }
  if (localeIdentifier)
  {
    *(&keys + v47) = @"MediaSelectionOptionsAssociatedExtendedLanguageTag";
    *(&v106 + v47) = (void *)localeIdentifier;
    uint64_t v62 = v47 + 1;
    CFLocaleIdentifier v63 = CFLocaleCreateCanonicalLanguageIdentifierFromString(v42, localeIdentifier);
    CFLocaleIdentifier v64 = v63;
    if (v63)
    {
      *(&keys + v62) = @"MediaSelectionOptionsAssociatedUnicodeLanguageIdentifier";
      *(&v106 + v62) = (void *)v63;
      v47 += 2;
    }
    else
    {
      ++v47;
    }
    int v50 = v102;
  }
  else
  {
    CFLocaleIdentifier v64 = 0;
  }
  *(&keys + v47) = @"MediaSelectionOptionsMediaType";
  *(&v106 + v47) = v37;
  uint64_t v65 = CFDictionaryCreateMutable(v42, v47 + 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (v65)
  {
    uint64_t v66 = v47 + 1;
    uint64_t v67 = &v106;
    p_keys = &keys;
    do
    {
      double v70 = *p_keys++;
      double v69 = v70;
      BOOL v71 = *v67++;
      CFDictionaryAddValue(v65, v69, v71);
      --v66;
    }
    while (v66);
    CFStringRef v72 = FigCopyGMLoggingDescriptionForOption(v65);
    CFDictionaryAddValue(v65, @"MediaSelectionOptionsDebugDescription", v72);
    int v50 = v102;
    if (v72) {
      CFRelease(v72);
    }
    CFArrayAppendValue(v36, v65);
    CFRelease(v65);
    uint64_t v35 = 0;
    if (v52) {
      goto LABEL_72;
    }
  }
  else
  {
    uint64_t v35 = 4294954510;
    if (v52) {
LABEL_72:
    }
      CFRelease(v52);
  }
  CFRelease(cf);
  if (v49) {
    CFRelease(v49);
  }
  if (v45) {
    CFRelease(v45);
  }
  if (v64) {
    CFRelease(v64);
  }
  if (v65)
  {
    char v73 = CFDictionaryGetValue(v65, @"MediaSelectionOptionsPersistentID");
    goto LABEL_81;
  }
  return v35;
}

const void *FindMatchingMapEntry(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  for (CFIndex i = 0; ; ++i)
  {
    CFArrayRef MapSegmentSpecifiers = (const __CFArray *)FigMediaPlaylistGetMapSegmentSpecifiers(a1);
    if (MapSegmentSpecifiers) {
      CFArrayRef MapSegmentSpecifiers = (const __CFArray *)CFArrayGetCount(MapSegmentSpecifiers);
    }
    if (i >= (uint64_t)MapSegmentSpecifiers) {
      break;
    }
    CFArrayRef v9 = (const __CFArray *)FigMediaPlaylistGetMapSegmentSpecifiers(a1);
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v9, i);
    if (FigMediaSegmentSpecifierGetStartOffset((uint64_t)ValueAtIndex) == a3
      && FigMediaSegmentSpecifierGetBytesToRead((uint64_t)ValueAtIndex) == a4)
    {
      FigMediaSegmentSpecifierGetURLString((uint64_t)ValueAtIndex);
      if (FigCFEqual()) {
        return ValueAtIndex;
      }
    }
  }
  return 0;
}

uint64_t PlaylistCreateMapEntry(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v17 = 0;
  if (a6)
  {
    *a6 = 0;
    MediaEntryCFIndex Count = FigMediaPlaylistGetMediaEntryCount(a1);
    FigMediaPlaylistSetMediaEntryCount(a1, MediaEntryCount + 1);
    uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
    uint64_t v14 = FigMediaPlaylistGetMediaEntryCount(a1);
    uint64_t v15 = FigMediaSegmentSpecifierCreate(0.0, 0.0, 0.0, AllocatorForMedia, a2, 0, 0, a5, 0, a3, a4, 0, 0, 1, 0, 0, 1, 0, 0,
            0,
            v14,
            1,
            (uint64_t *)&v17);
    FigMediaPlaylistAddMapSegmentSpecifier(a1, v17);
    *a6 = v17;
    return v15;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t PlaylistProcessPartInfTag(uint64_t a1, const char *a2, uint64_t a3)
{
  int v20 = (char *)a2;
  CFArrayRef v18 = 0;
  double v19 = 0.0;
  while (1)
  {
    int v4 = v20;
    unsigned int v5 = *v20;
    BOOL v6 = v5 > 0xD;
    int v7 = (1 << v5) & 0x2401;
    if (!v6 && v7 != 0)
    {
      uint64_t v10 = 0;
      goto LABEL_17;
    }
    CFStringRef v16 = 0;
    __s1 = 0;
    uint64_t v15 = 0;
    int v13 = 0;
    free(v18);
    CFArrayRef v18 = 0;
    uint64_t v10 = sp_ParseAttribute("#EXT-X-PART-INF", v4, 1, 0, &__s1, &v15, &v16, &v14, (const char **)&v20, &v13, (UInt8 **)&v18, a3);
    if (v10 && !*(unsigned char *)(a3 + 41) || (v13 & 2) != 0) {
      return v10;
    }
    if (__s1)
    {
      CFArrayRef v9 = v16;
      if (v16)
      {
        if (v15 == 11 && !strncmp(__s1, "PART-TARGET", 0xBuLL))
        {
          uint64_t v10 = sp_strtod(v9, 0, &v19, 0, (uint64_t)"Blocking reload part target", a3);
          if (!v10 && v19 <= 0.0) {
            break;
          }
        }
      }
    }
    if (v10) {
      goto LABEL_17;
    }
  }
  uint64_t v10 = 4294954654;
  _StreamPlaylistLogError(4294954654, 4294955032, a3, @"%s must have %s", v19, "#EXT-X-PART-INF", "PART-TARGET");
LABEL_17:
  FigMediaPlaylistSetPartTargetDuration(a1, v19);
  free(v18);
  return v10;
}

uint64_t PlaylistProcessPartTag(uint64_t a1, const char *a2, uint64_t a3, const void *a4, const void *a5, uint64_t a6, const void *a7, uint64_t a8, double a9, double *a10)
{
  CFStringRef v56 = 0;
  uint64_t v54 = 0;
  CFArrayRef v57 = 0;
  double v66 = 0.0;
  uint64_t v67 = (char *)a2;
  uint64_t v64 = 0;
  uint64_t v65 = 0;
  uint64_t v63 = 0;
  while (1)
  {
LABEL_2:
    CFArrayRef v12 = v67;
    unsigned int v13 = *v67;
    BOOL v14 = v13 > 0xD;
    int v15 = (1 << v13) & 0x2401;
    if (!v14 && v15 != 0)
    {
      uint64_t v28 = 0;
      char v29 = 1;
      goto LABEL_54;
    }
    __src = 0;
    __s1 = 0;
    uint64_t v59 = 0;
    uint64_t v60 = 0;
    int v58 = 0;
    free(v65);
    uint64_t v65 = 0;
    uint64_t v28 = sp_ParseAttribute("#EXT-X-PART", v12, 1, 0, &__s1, &v60, (const char **)&__src, (size_t *)&v59, (const char **)&v67, &v58, &v65, a8);
    if (v28 && !*(unsigned char *)(a8 + 41) || (char v17 = v58, (v58 & 2) != 0))
    {
      CFIndex v31 = v57;
      goto LABEL_89;
    }
    CFArrayRef v18 = __s1;
    if (__s1)
    {
      double v19 = (const char *)__src;
      if (__src) {
        break;
      }
    }
LABEL_46:
    if (v28) {
      goto LABEL_53;
    }
  }
  switch(v60)
  {
    case 3:
      if (strncmp(__s1, "URI", 3uLL))
      {
        if (strncmp(v18, "GAP", 3uLL)) {
          goto LABEL_46;
        }
        if (v59 == 3)
        {
          BOOL v21 = *(_WORD *)v19 == 17753 && v19[2] == 83;
          LOBYTE(v54) = v21;
          if (v28) {
            goto LABEL_53;
          }
        }
        else
        {
          LOBYTE(v54) = 0;
          if (v28) {
            goto LABEL_53;
          }
        }
        goto LABEL_2;
      }
      if ((v17 & 1) == 0)
      {
        CFStringRef v30 = "URI";
        goto LABEL_52;
      }
      free(v57);
      uint64_t v24 = v59;
      int v25 = (UInt8 *)malloc_type_malloc(v59 + 1, 0x8D5E13E0uLL);
      if (v25)
      {
        CFAllocatorRef v26 = v25;
        memcpy(v25, __src, v24);
        v26[v24] = 0;
        CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
        CFArrayRef v57 = (UInt8 *)v26;
        CFStringRef v56 = CFStringCreateWithBytes(AllocatorForMedia, v26, v24, 0x8000100u, 0);
        if (v28) {
          goto LABEL_53;
        }
        goto LABEL_2;
      }
      uint64_t v28 = FigSignalErrorAt();
      CFIndex v31 = 0;
LABEL_89:
      CFStringRef v32 = v56;
      if (v56) {
        goto LABEL_86;
      }
LABEL_87:
      free(v31);
      return v28;
    case 8:
      if (strncmp(__s1, "DURATION", 8uLL)) {
        goto LABEL_46;
      }
      uint64_t v28 = sp_strtod(v19, 0, &v66, 0, (uint64_t)"Partial Segment Duration", a8);
      if (v28) {
        goto LABEL_53;
      }
      goto LABEL_2;
    case 9:
      if (strncmp(__s1, "BYTERANGE", 9uLL)) {
        goto LABEL_46;
      }
      if ((v17 & 1) == 0)
      {
        CFStringRef v30 = "BYTERANGE";
LABEL_52:
        uint64_t v28 = 4294954654;
        _StreamPlaylistLogError(4294954654, 4294955032, a8, @"%s %s: missing quotes", "#EXT-X-PART", v30);
LABEL_53:
        char v29 = 0;
LABEL_54:
        CFStringRef v32 = v56;
        CFIndex v31 = v57;
        double v33 = *a10;
        double v34 = v66;
        if (*a10 < v66) {
          *a10 = v66;
        }
        if (v57) {
          char v29 = 0;
        }
        if (v29)
        {
          CFStringRef v35 = @"Missing mandatory URL for %s";
        }
        else
        {
          if (v28 || v34 != 0.0)
          {
LABEL_64:
            CFArrayRef PartialSegments = (const __CFArray *)FigMediaSegmentSpecifierGetPartialSegments(a3);
            Lastuint64_t Value = FigCFArrayGetLastValue();
            if (!v28)
            {
              uint64_t v40 = LastValue;
              if (!FigCFArrayGetLastValue() || FigMediaSegmentSpecifierGetDiscontinuityDomain(v40) == a6)
              {
                if (FigMediaSegmentSpecifierIsDiscontinuity(a3))
                {
                  if (PartialSegments) {
                    char v41 = CFArrayGetCount(PartialSegments) == 0;
                  }
                  else {
                    char v41 = 1;
                  }
                }
                else
                {
                  char v41 = 0;
                }
                uint64_t MediaSequence = FigMediaSegmentSpecifierGetMediaSequence(a3);
                MediaFileEntry = (void *)CreateMediaFileEntry(a1, v56, 0, a4, a5, MediaSequence, a6, v63, v66, a9, v64, a7, 0, v41, v54);
                int v38 = 1;
                FigMediaSegmentSpecifierSetIsFragment((uint64_t)MediaFileEntry, 1);
                FigMediaSegmentSpecifierSetIsIndependent((uint64_t)MediaFileEntry, SBYTE4(v54));
                FigMediaSegmentSpecifierAddPartialSegment(a3, MediaFileEntry);
                uint64_t v28 = 0;
LABEL_75:
                Firstuint64_t Value = FigCFArrayGetFirstValue();
                if (FirstValue != FigCFArrayGetLastValue())
                {
                  uint64_t v44 = FigCFArrayGetLastValue();
                  uint64_t PreviousSegment = FigMediaSegmentSpecifierGetPreviousSegment(v44);
                  if (v38)
                  {
                    uint64_t v46 = PreviousSegment;
                    if (FigMediaPlaylistGetPartTargetDuration(a1) == 0.0
                      || FigMediaSegmentSpecifierIsMarkedIndependent(v46)
                      || (TimeIndouble Seconds = FigMediaSegmentSpecifierGetTimeInSeconds(v46),
                          TimeInSeconds >= FigMediaPlaylistGetPartTargetDuration(a1) * 0.85)
                      || FigMediaSegmentSpecifierIsMarkedAsGap(v46) | v54)
                    {
                      uint64_t v28 = 0;
                    }
                    else
                    {
                      uint64_t v28 = 4294954654;
                      _StreamPlaylistLogError(4294954654, 4294955032, a8, @"%s non-terminal partial segment duration must be at least 85%% of %s", "#EXT-X-PART", "PART-TARGET");
                    }
                  }
                }
                free(v65);
                if (MediaFileEntry) {
                  CFRelease(MediaFileEntry);
                }
                if (!v56) {
                  goto LABEL_87;
                }
LABEL_86:
                CFRelease(v32);
                goto LABEL_87;
              }
              uint64_t v28 = 4294954654;
              _StreamPlaylistLogError(4294954654, 4294955032, a8, @"%s not allowed on partial segment boundaries", "#EXT-X-DISCONTINUITY");
            }
            int v38 = 0;
            MediaFileEntry = 0;
            goto LABEL_75;
          }
          CFStringRef v35 = @"%s partial segment must have positive duration";
        }
        uint64_t v28 = 4294954654;
        _StreamPlaylistLogError(4294954654, 4294955032, a8, v35, v34, v33, "#EXT-X-PART");
        goto LABEL_64;
      }
      uint64_t v28 = PlaylistProcessByteRange(&v64, &v63, 0, (const char **)&__src, v59, a8);
      if (v28) {
        goto LABEL_53;
      }
      goto LABEL_2;
    case 11:
      if (strncmp(__s1, "INDEPENDENT", 0xBuLL)) {
        goto LABEL_46;
      }
      if (v59 != 3)
      {
        BYTE4(v54) = 0;
        goto LABEL_46;
      }
      BOOL v23 = *(_WORD *)v19 == 17753 && v19[2] == 83;
      BYTE4(v54) = v23;
      if (v28) {
        goto LABEL_53;
      }
      goto LABEL_2;
    default:
      goto LABEL_46;
  }
}

uint64_t PlaylistProcessRenditionReportTag(uint64_t a1, const char *a2, const __CFURL *a3, uint64_t a4)
{
  unsigned int v5 = (char *)a2;
  CFURLRef v7 = 0;
  char v33 = 0;
  uint64_t v8 = 0;
  CFNumberRef v43 = (char *)a2;
  uint64_t v41 = -1;
  uint64_t v42 = -1;
  int v39 = -1;
  int v40 = -1;
  int v38 = 0;
  CFAllocatorRef v31 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  while (1)
  {
    unsigned int v9 = *v5;
    BOOL v10 = v9 > 0xD;
    int v11 = (1 << v9) & 0x2401;
    if (!v10 && v11 != 0) {
      break;
    }
    uint64_t v44 = 0;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    CFIndex v35 = 0;
    int v34 = 0;
    free(v38);
    int v38 = 0;
    uint64_t v8 = sp_ParseAttribute("#EXT-X-RENDITION-REPORT", v5, 1, 0, &v44, &v36, (const char **)&v37, (size_t *)&v35, (const char **)&v43, &v34, (UInt8 **)&v38, a4);
    if (v8 && !*(unsigned char *)(a4 + 41)) {
      goto LABEL_54;
    }
    char v13 = v34;
    if ((v34 & 2) != 0) {
      goto LABEL_54;
    }
    BOOL v14 = v44;
    if (v44)
    {
      int v15 = v37;
      if (v37)
      {
        CFIndex v16 = v35;
        if (v35)
        {
          switch(v36)
          {
            case 3:
              if (!strncmp(v44, "URI", 3uLL))
              {
                if ((v13 & 1) == 0)
                {
                  uint64_t v8 = 4294954654;
                  _StreamPlaylistLogError(4294954654, 4294955032, a4, @"%s %s: missing quotes", "#EXT-X-RENDITION-REPORT", "URI");
                  goto LABEL_36;
                }
                CFURLRef v7 = CFURLCreateWithBytes(v31, (const UInt8 *)v15, v16, 0x8000100u, a3);
              }
              else if (!strncmp(v14, "GAP", 3uLL))
              {
                if (v16 == 3)
                {
                  BOOL v18 = *(_WORD *)v15 == 17753 && v15[2] == 83;
                  char v33 = v18;
                }
                else
                {
                  char v33 = 0;
                }
              }
              break;
            case 8:
              if (!strncmp(v44, "LAST-MSN", 8uLL))
              {
                double v19 = &v42;
                int v20 = v15;
                BOOL v21 = "last_media_seq_num";
                goto LABEL_30;
              }
              break;
            case 9:
              if (!strncmp(v44, "LAST-PART", 9uLL))
              {
                int v22 = &v40;
                BOOL v23 = v15;
                uint64_t v24 = "last_part";
                goto LABEL_33;
              }
              break;
            case 10:
              if (!strncmp(v44, "LAST-I-MSN", 0xAuLL))
              {
                double v19 = &v41;
                int v20 = v15;
                BOOL v21 = "last_indepdendent_media_seq_num";
LABEL_30:
                uint64_t v25 = sp_strtoll(v20, &v37, v19, 1, (uint64_t)v21, a4);
                goto LABEL_34;
              }
              break;
            case 11:
              if (!strncmp(v44, "LAST-I-PART", 0xBuLL))
              {
                int v22 = &v39;
                BOOL v23 = v15;
                uint64_t v24 = "last_indepdendent_part";
LABEL_33:
                uint64_t v25 = sp_strtol(v23, &v37, v22, 1, (uint64_t)v24, a4);
LABEL_34:
                uint64_t v8 = v25;
              }
              break;
            default:
              break;
          }
          if (v8)
          {
LABEL_36:
            if (!*(unsigned char *)(a4 + 41)) {
              goto LABEL_54;
            }
          }
        }
      }
    }
    unsigned int v5 = v43;
  }
  if (!v8)
  {
    if (!v7)
    {
      uint64_t v8 = 4294954654;
      _StreamPlaylistLogError(4294954654, 4294954977, a4, @"%s %s: Missing Mandatory identifier", "#EXT-X-RENDITION-REPORT", "URI");
      goto LABEL_56;
    }
    CFIndex v26 = 0;
    while (1)
    {
      CFArrayRef RenditionReportSpecifiers = (const __CFArray *)FigMediaPlaylistGetRenditionReportSpecifiers(a1);
      if (RenditionReportSpecifiers) {
        CFArrayRef RenditionReportSpecifiers = (const __CFArray *)CFArrayGetCount(RenditionReportSpecifiers);
      }
      if (v26 >= (uint64_t)RenditionReportSpecifiers) {
        break;
      }
      CFArrayRef v28 = (const __CFArray *)FigMediaPlaylistGetRenditionReportSpecifiers(a1);
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v28, v26);
      FigRenditionReportSpecifierGetURL((uint64_t)ValueAtIndex);
      ++v26;
      if (FigCFEqual())
      {
        uint64_t v8 = FigSignalErrorAt();
        goto LABEL_54;
      }
    }
    uint64_t v44 = 0;
    uint64_t v8 = FigRenditionReportSpecifierCreate(v7, v42, v41, v40, v39, 1, v33, (uint64_t *)&v44);
    if (!v8) {
      FigMediaPlaylistAddRenditionReportSpecifier(a1, v44);
    }
    if (v44) {
      CFRelease(v44);
    }
  }
LABEL_54:
  if (v7) {
    CFRelease(v7);
  }
LABEL_56:
  free(v38);
  return v8;
}

uint64_t PlaylistProcessPreloadHintTag(uint64_t a1, const char *a2, uint64_t a3)
{
  int v4 = (char *)a2;
  uint64_t v26 = 0;
  uint64_t PreloadHint = 0;
  CFStringRef v27 = 0;
  CFIndex v35 = 0;
  uint64_t v36 = (char *)a2;
  uint64_t v33 = -1;
  uint64_t v34 = 0;
  BOOL v6 = "BYTERANGE-START";
  while (1)
  {
    unsigned int v7 = *v4;
    BOOL v8 = v7 > 0xD;
    int v9 = (1 << v7) & 0x2401;
    if (!v8 && v9 != 0) {
      break;
    }
    bytes = 0;
    __s1 = 0;
    CFIndex v29 = 0;
    uint64_t v30 = 0;
    int v28 = 0;
    free(v35);
    CFIndex v35 = 0;
    uint64_t PreloadHint = sp_ParseAttribute("#EXT-X-PRELOAD-HINT", v4, 1, 0, &__s1, &v30, (const char **)&bytes, (size_t *)&v29, (const char **)&v36, &v28, &v35, a3);
    if (PreloadHint && !*(unsigned char *)(a3 + 41)) {
      goto LABEL_60;
    }
    char v11 = v28;
    if ((v28 & 2) != 0) {
      goto LABEL_60;
    }
    if (__s1)
    {
      CFArrayRef v12 = bytes;
      if (bytes)
      {
        char v13 = v6;
        CFIndex v14 = v29;
        if (!v29)
        {
          BOOL v6 = v13;
          goto LABEL_34;
        }
        if (v30 <= 14)
        {
          if (v30 == 3)
          {
            if (strncmp(__s1, "URI", 3uLL)) {
              goto LABEL_31;
            }
            if (v11)
            {
              CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
              CFStringRef v27 = CFStringCreateWithBytes(AllocatorForMedia, bytes, v14, 0x8000100u, 0);
              goto LABEL_31;
            }
            uint64_t PreloadHint = 4294954654;
            _StreamPlaylistLogError(4294954654, 4294955032, a3, @"%s %s: missing quotes", "#EXT-X-PRELOAD-HINT", "URI");
            BOOL v6 = v13;
          }
          else
          {
            if (v30 == 4)
            {
              BOOL v6 = v13;
              if (!strncmp(__s1, "TYPE", 4uLL))
              {
                if (!strncasecmp((const char *)v12, "PART", 4uLL))
                {
                  HIDWORD(v26) = 1;
                }
                else
                {
                  if (strncasecmp((const char *)v12, "MAP", 3uLL))
                  {
                    _StreamPlaylistLogError(0, 4294954985, a3, @"Unknown %s %s in %s", "TYPE", v12, "#EXT-X-PRELOAD-HINT");
                    uint64_t PreloadHint = 0;
                    goto LABEL_34;
                  }
                  LODWORD(v26) = 1;
                }
              }
              goto LABEL_32;
            }
LABEL_31:
            BOOL v6 = v13;
LABEL_32:
            if (!PreloadHint) {
              goto LABEL_34;
            }
          }
          if (!*(unsigned char *)(a3 + 41)) {
            goto LABEL_60;
          }
          goto LABEL_34;
        }
        if (v30 == 15)
        {
          BOOL v6 = v13;
          if (strncmp(__s1, v13, 0xFuLL)) {
            goto LABEL_32;
          }
          int v15 = &v34;
          CFIndex v16 = (const char *)v12;
          char v17 = v13;
        }
        else
        {
          BOOL v6 = v13;
          if (v30 != 16 || strncmp(__s1, "BYTERANGE-LENGTH", 0x10uLL)) {
            goto LABEL_32;
          }
          int v15 = &v33;
          CFIndex v16 = (const char *)v12;
          char v17 = "BYTERANGE-LENGTH";
        }
        uint64_t PreloadHint = sp_strtoll(v16, (char **)&bytes, v15, 1, (uint64_t)v17, a3);
        goto LABEL_32;
      }
    }
LABEL_34:
    int v4 = v36;
  }
  if (PreloadHint)
  {
LABEL_60:
    CFStringRef v19 = v27;
    if (v27) {
      goto LABEL_58;
    }
  }
  else
  {
    CFStringRef v19 = v27;
    if (v26)
    {
      if (v27)
      {
        if (HIDWORD(v26)
          && FigMediaPlaylistGetPreloadHint(a1)
          && (uint64_t v20 = FigMediaPlaylistGetPreloadHint(a1), FigMediaSegmentSpecifierIsReadInCurrent(v20))
          || v26
          && FigMediaPlaylistGetPreloadMapHint(a1)
          && (uint64_t PreloadMapHint = FigMediaPlaylistGetPreloadMapHint(a1),
              FigMediaSegmentSpecifierIsReadInCurrent(PreloadMapHint)))
        {
LABEL_57:
          uint64_t PreloadHint = 0;
        }
        else
        {
          uint64_t v23 = v33;
          uint64_t v22 = v34;
          if (v34 >= 1 && v33 == -1)
          {
            uint64_t v23 = 0x20000000000000 - v34;
            uint64_t v33 = 0x20000000000000 - v34;
          }
          if (HIDWORD(v26))
          {
            uint64_t PreloadHint = FigMediaPlaylistGetPreloadHint(a1);
            if (!PreloadHint)
            {
              uint64_t PreloadHint = CreateMediaFileEntry(a1, 0, 0, 0, 0, 0, -1, v22, 1.0, 0.0, v23, 0, 0, 0, 0);
              FigMediaPlaylistSetPreloadHint(a1, (CFTypeRef)PreloadHint);
              goto LABEL_55;
            }
LABEL_54:
            CFRetain((CFTypeRef)PreloadHint);
            FigMediaSegmentSpecifierSetStartOffset(PreloadHint, v22);
            FigMediaSegmentSpecifierSetBytesToRead(PreloadHint, v23);
          }
          else
          {
            uint64_t PreloadHint = FigMediaPlaylistGetPreloadMapHint(a1);
            if (PreloadHint) {
              goto LABEL_54;
            }
            uint64_t PreloadHint = CreateMediaFileEntry(a1, 0, 1, 0, 0, 0, -1, v22, 1.0, 0.0, v23, 0, 0, 0, 0);
            FigMediaPlaylistSetPreloadMapHint(a1, (CFTypeRef)PreloadHint);
          }
LABEL_55:
          FigMediaSegmentSpecifierSetURLString(PreloadHint, v27);
          FigMediaSegmentSpecifierSetIsReadInCurrent(PreloadHint, 1);
          if (PreloadHint)
          {
            CFRelease((CFTypeRef)PreloadHint);
            goto LABEL_57;
          }
        }
LABEL_58:
        CFRelease(v19);
        goto LABEL_59;
      }
      uint64_t PreloadHint = 4294954654;
      _StreamPlaylistLogError(4294954654, 4294954977, a3, @"%s %s: Missing Mandatory identifier", "#EXT-X-PRELOAD-HINT", "URI");
    }
    else
    {
      uint64_t PreloadHint = 4294954654;
      _StreamPlaylistLogError(4294954654, 4294954977, a3, @"%s %s: Missing Mandatory identifier", "#EXT-X-PRELOAD-HINT", "TYPE");
      if (v27) {
        goto LABEL_58;
      }
    }
  }
LABEL_59:
  free(v35);
  return PreloadHint;
}

uint64_t PlaylistProcessSessionDataTag(uint64_t a1, const char *a2, const __CFURL *a3, uint64_t a4)
{
  int v40 = 0;
  uint64_t v41 = (char *)a2;
  if (!a1)
  {
    uint64_t v8 = 0;
    goto LABEL_66;
  }
  unsigned int v5 = (char *)a2;
  CFStringRef v7 = 0;
  CFURLRef v33 = 0;
  CFStringRef v34 = 0;
  CFStringRef v35 = 0;
  uint64_t v8 = 0;
  int v31 = 0;
  CFAllocatorRef alloc = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  while (1)
  {
    unsigned int v9 = *v5;
    BOOL v10 = v9 > 0xD;
    int v11 = (1 << v9) & 0x2401;
    if (!v10 && v11 != 0) {
      break;
    }
    uint64_t v42 = 0;
    uint64_t v38 = 0;
    int v39 = 0;
    CFIndex v37 = 0;
    int v36 = 0;
    free(v40);
    int v40 = 0;
    uint64_t v8 = sp_ParseAttribute("#EXT-X-SESSION-DATA", v5, 1, 1, &v42, &v38, (const char **)&v39, (size_t *)&v37, (const char **)&v41, &v36, &v40, a4);
    if (v8 && !*(unsigned char *)(a4 + 41)) {
      goto LABEL_67;
    }
    char v13 = v36;
    if ((v36 & 2) != 0) {
      goto LABEL_67;
    }
    CFIndex v14 = v42;
    if (v42)
    {
      int v15 = v39;
      if (v39)
      {
        CFIndex v16 = v37;
        if (v37)
        {
          switch(v38)
          {
            case 3:
              if (strncmp(v42, "URI", 3uLL)) {
                break;
              }
              if ((v13 & 1) == 0)
              {
                char v17 = "URI";
                goto LABEL_34;
              }
              CFURLRef v33 = CFURLCreateWithBytes(alloc, v15, v16, 0x8000100u, a3);
              break;
            case 5:
              goto LABEL_20;
            case 6:
              if (strncmp(v42, "FORMAT", 6uLL)) {
                break;
              }
              if (!strncasecmp((const char *)v15, "JSON", 4uLL))
              {
                int v18 = 1;
              }
              else if (!strncasecmp((const char *)v15, "PLIST", 5uLL))
              {
                int v18 = 2;
              }
              else
              {
                if (strncasecmp((const char *)v15, "RAW", 3uLL))
                {
                  uint64_t v8 = 4294954654;
                  _StreamPlaylistLogError(4294954654, 4294955032, a4, @"%s unknown format %s", "#EXT-X-SESSION-DATA", v15);
                  break;
                }
                int v18 = 3;
              }
              int v31 = v18;
              break;
            case 7:
              if (strncmp(v42, "DATA-ID", 7uLL)) {
                break;
              }
              if ((v13 & 1) == 0)
              {
                char v17 = "DATA-ID";
                goto LABEL_34;
              }
              CFStringRef v7 = CFStringCreateWithBytes(alloc, v15, v16, 0x600u, 1u);
              break;
            case 8:
              if (strncmp(v42, "LANGUAGE", 8uLL)) {
                break;
              }
              if ((v13 & 1) == 0)
              {
                char v17 = "LANGUAGE";
                goto LABEL_34;
              }
              CFStringRef v34 = CFStringCreateWithBytes(alloc, v15, v16, 0x8000100u, 1u);
              break;
            default:
              break;
          }
        }
        else if (v38 == 5 && !strncmp(v42, "VALUE", 5uLL))
        {
LABEL_20:
          if (!strncmp(v14, "VALUE", 5uLL))
          {
            if (v13)
            {
              CFStringRef v35 = CFStringCreateWithBytes(alloc, v15, v16, 0x8000100u, 1u);
            }
            else
            {
              char v17 = "VALUE";
LABEL_34:
              uint64_t v8 = 4294954654;
              _StreamPlaylistLogError(4294954654, 4294955032, a4, @"%s %s: missing quotes", "#EXT-X-SESSION-DATA", v17);
            }
          }
        }
      }
    }
    unsigned int v5 = v41;
  }
  if (v8)
  {
LABEL_67:
    CFStringRef v19 = v34;
    uint64_t v20 = v35;
    BOOL v21 = v33;
  }
  else
  {
    CFStringRef v19 = v34;
    uint64_t v20 = v35;
    BOOL v21 = v33;
    if (!v7)
    {
      uint64_t v8 = 4294954654;
      _StreamPlaylistLogError(4294954654, 4294954977, a4, @"%s %s: Missing Mandatory identifier", "#EXT-X-SESSION-DATA", "DATA-ID");
      if (v33)
      {
LABEL_61:
        CFRelease(v21);
        goto LABEL_62;
      }
      goto LABEL_62;
    }
    CFArrayRef SessionDataSpecifiers = (const __CFArray *)FigMultivariantPlaylistGetSessionDataSpecifiers(a1);
    if (SessionDataSpecifiers && (CFIndex Count = CFArrayGetCount(SessionDataSpecifiers), Count >= 1))
    {
      CFIndex v24 = Count;
      CFIndex v25 = 0;
      while (1)
      {
        CFArrayRef v26 = (const __CFArray *)FigMultivariantPlaylistGetSessionDataSpecifiers(a1);
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v26, v25);
        FigSessionDataSpecifierGetIdentifier((uint64_t)ValueAtIndex);
        if (FigCFEqual())
        {
          FigSessionDataSpecifierGetLanguage((uint64_t)ValueAtIndex);
          if (FigCFEqual()) {
            break;
          }
        }
        if (v24 == ++v25) {
          goto LABEL_52;
        }
      }
      uint64_t v8 = 4294954654;
      _StreamPlaylistLogError(4294954654, 4294955031, a4, @"%s %s: duplicate identifier in session data", "#EXT-X-SESSION-DATA", "DATA-ID");
    }
    else
    {
LABEL_52:
      if ((unint64_t)v33 | (unint64_t)v35)
      {
        uint64_t v42 = 0;
        uint64_t v28 = FigSessionDataSpecifierCreate(v7, v33, v35, v34, v31, (uint64_t *)&v42);
        if (!v28) {
          uint64_t v28 = FigMultivariantPlaylistAddSessionDataSpecifier(a1, v42);
        }
        uint64_t v8 = v28;
        if (v42) {
          CFRelease(v42);
        }
      }
      else
      {
        uint64_t v8 = 4294954654;
        _StreamPlaylistLogError(4294954654, 4294955032, a4, @"%s: Either URL or Value should be valid, not both", "#EXT-X-SESSION-DATA");
        BOOL v21 = 0;
        uint64_t v20 = 0;
      }
    }
  }
  if (v7) {
    CFRelease(v7);
  }
  if (v21) {
    goto LABEL_61;
  }
LABEL_62:
  if (v20) {
    CFRelease(v20);
  }
  if (v19) {
    CFRelease(v19);
  }
LABEL_66:
  free(v40);
  return v8;
}

uint64_t PlaylistProcessTaggedRangeTag(uint64_t a1, const char *a2, unsigned char *a3, uint64_t a4)
{
  unsigned int v5 = (char *)a2;
  double v105 = -1.0;
  BOOL v106 = (char *)a2;
  double v104 = -1.0;
  long long context = 0u;
  long long v103 = 0u;
  CFTypeRef v100 = 0;
  CFTypeRef v101 = 0;
  CFTypeRef v99 = 0;
  CFTypeRef v98 = 0;
  CFAllocatorRef alloc = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFDictionaryRef theDict = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v7 = 0;
  CFStringRef v8 = 0;
  CFDateRef cf1 = 0;
  CFDateRef v89 = 0;
  unsigned __int8 v84 = 0;
  int v86 = 0;
  CFStringRef cf = 0;
  CFStringRef v87 = 0;
  while (1)
  {
    unsigned int v9 = *v5;
    BOOL v10 = v9 > 0xD;
    int v11 = (1 << v9) & 0x2401;
    if (!v10 && v11 != 0)
    {
      if (v7)
      {
        CFStringRef v54 = 0;
        CFStringRef v19 = 0;
        CFStringRef v31 = v87;
        goto LABEL_210;
      }
      CFStringRef v31 = v87;
      if (!v8)
      {
        uint64_t v7 = 4294954654;
        _StreamPlaylistLogError(4294954654, 4294954977, a4, @"%s: missing id", "#EXT-X-DATERANGE");
        CFStringRef v19 = 0;
        CFStringRef v54 = 0;
        CFDictionaryRef v64 = theDict;
        CFDateRef v48 = v89;
        CFStringRef v65 = cf;
        CFDateRef v63 = cf1;
        goto LABEL_225;
      }
      CFIndex v32 = 0;
      DWORD2(v103) = 0;
      *((void *)&context + 1) = a4;
      do
      {
        CFArrayRef DateRangeSpecifiers = (const __CFArray *)FigMediaPlaylistGetDateRangeSpecifiers(a1);
        if (DateRangeSpecifiers) {
          CFArrayRef DateRangeSpecifiers = (const __CFArray *)CFArrayGetCount(DateRangeSpecifiers);
        }
        if (v32 >= (uint64_t)DateRangeSpecifiers) {
          goto LABEL_133;
        }
        CFArrayRef v34 = (const __CFArray *)FigMediaPlaylistGetDateRangeSpecifiers(a1);
        CFDictionaryRef ValueAtIndex = (char *)CFArrayGetValueAtIndex(v34, v32);
        CFStringRef Identifier = (const void *)FigDateRangeSpecifierGetIdentifier((uint64_t)ValueAtIndex);
        ++v32;
      }
      while (!CFEqual(v8, Identifier));
      if (ValueAtIndex)
      {
        *(void *)&long long context = ValueAtIndex;
        *(void *)&long long v103 = FigMediaPlaylistGetParseDate(a1);
        BYTE12(v103) = 0;
        CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)TaggedRangeUniquenessApplier, &context);
        uint64_t v7 = DWORD2(v103);
        *a3 = BYTE12(v103);
        if (v7)
        {
LABEL_209:
          CFStringRef v54 = 0;
          CFStringRef v19 = 0;
LABEL_210:
          CFDictionaryRef v64 = theDict;
          CFDateRef v48 = v89;
          goto LABEL_211;
        }
        if (!v89
          || (CFDateRef StartDate = (const void *)FigDateRangeSpecifierGetStartDate((uint64_t)ValueAtIndex), CFEqual(v89, StartDate)))
        {
          if (cf1)
          {
            if (FigDateRangeSpecifierGetEndDate((uint64_t)ValueAtIndex))
            {
              CFDateRef EndDate = (const void *)FigDateRangeSpecifierGetEndDate((uint64_t)ValueAtIndex);
              if (!CFEqual(cf1, EndDate))
              {
                CFStringRef v66 = @"%s has changed";
                uint64_t v67 = "END-DATE";
                goto LABEL_207;
              }
            }
          }
          if (cf
            && FigDateRangeSpecifierGetTaggedRangeClass((uint64_t)ValueAtIndex)
            && (TaggedRangeClass = (const void *)FigDateRangeSpecifierGetTaggedRangeClass((uint64_t)ValueAtIndex),
                !CFEqual(cf, TaggedRangeClass)))
          {
            CFStringRef v66 = @"%s has changed";
            uint64_t v67 = "CLASS";
          }
          else if (v87 {
                 && FigDateRangeSpecifierGetTaggedRangeCue((uint64_t)ValueAtIndex)
          }
                 && (TaggedRangeCue = (const void *)FigDateRangeSpecifierGetTaggedRangeCue((uint64_t)ValueAtIndex),
                     !CFEqual(v87, TaggedRangeCue)))
          {
            CFStringRef v66 = @"%s has changed";
            uint64_t v67 = "CUE";
          }
          else
          {
            CFTypeRef v41 = v101;
            if (v101
              && FigDateRangeSpecifierGetScte35cmd((uint64_t)ValueAtIndex)
              && (Scte35cmd = (const void *)FigDateRangeSpecifierGetScte35cmd((uint64_t)ValueAtIndex),
                  !CFEqual(v41, Scte35cmd)))
            {
              CFStringRef v66 = @"%s has changed";
              uint64_t v67 = "SCTE35-CMD";
            }
            else
            {
              CFTypeRef v43 = v100;
              if (v100
                && FigDateRangeSpecifierGetScte35in((uint64_t)ValueAtIndex)
                && (Scte35iuint64_t n = (const void *)FigDateRangeSpecifierGetScte35in((uint64_t)ValueAtIndex),
                    !CFEqual(v43, Scte35in)))
              {
                CFStringRef v66 = @"%s has changed";
                uint64_t v67 = "SCTE35-IN";
              }
              else
              {
                CFTypeRef v45 = v99;
                if (v99
                  && FigDateRangeSpecifierGetScte35out((uint64_t)ValueAtIndex)
                  && (Scte35out = (const void *)FigDateRangeSpecifierGetScte35out((uint64_t)ValueAtIndex),
                      !CFEqual(v45, Scte35out)))
                {
                  CFStringRef v66 = @"%s has changed";
                  uint64_t v67 = "SCTE35-OUT";
                }
                else
                {
                  if (!v86
                    || !FigDateRangeSpecifierGetEndOnNextSet((uint64_t)ValueAtIndex)
                    || FigDateRangeSpecifierGetEndOnNext((uint64_t)ValueAtIndex) == v84)
                  {
                    if (v84)
                    {
                      if (FigDateRangeSpecifierGetTempEndDate((uint64_t)ValueAtIndex))
                      {
                        uint64_t v47 = "END-DATE";
LABEL_206:
                        CFTypeRef v83 = v47;
                        CFStringRef v66 = @"%s: %s indicated after %s specified";
                        CFAllocatorRef v82 = "END-ON-NEXT";
                        uint64_t v67 = "#EXT-X-DATERANGE";
                        goto LABEL_207;
                      }
                      if (FigDateRangeSpecifierGetTempDuration((uint64_t)ValueAtIndex) >= 0.0)
                      {
                        uint64_t v47 = "DURATION";
                        goto LABEL_206;
                      }
                    }
                    if (v105 >= 0.0 && FigDateRangeSpecifierGetDuration((uint64_t)ValueAtIndex) == -1.0
                      || cf1 && !FigDateRangeSpecifierGetEndDate((uint64_t)ValueAtIndex))
                    {
                      ParseDate = (const void *)FigMediaPlaylistGetParseDate(a1);
                      FigDateRangeSpecifierSetModificationTimestamp((uint64_t)ValueAtIndex, ParseDate);
                      *a3 = 1;
                    }
                    if (FigDateRangeSpecifierGetTempDuration((uint64_t)ValueAtIndex) >= 0.0 && v105 >= 0.0)
                    {
                      TempDuratiouint64_t n = FigDateRangeSpecifierGetTempDuration((uint64_t)ValueAtIndex);
                      if (TempDuration != v105)
                      {
                        CFStringRef v66 = @"duplicate duration";
LABEL_171:
                        uint64_t v7 = 4294954654;
                        uint64_t v71 = 4294955031;
LABEL_208:
                        _StreamPlaylistLogError(4294954654, v71, a4, v66, v81, v82, v83);
                        goto LABEL_209;
                      }
                    }
                    CFStringRef v54 = 0;
                    char v55 = 1;
                    if (FigDateRangeSpecifierGetTempPlannedDuration((uint64_t)ValueAtIndex) >= 0.0 && v104 >= 0.0)
                    {
                      TempPlannedDuratiouint64_t n = FigDateRangeSpecifierGetTempPlannedDuration((uint64_t)ValueAtIndex);
                      if (TempPlannedDuration != v104)
                      {
                        CFStringRef v66 = @"duplicate planned duration";
                        goto LABEL_171;
                      }
                      CFStringRef v54 = 0;
                    }
                    goto LABEL_137;
                  }
                  CFStringRef v66 = @"%s has changed";
                  uint64_t v67 = "END-ON-NEXT";
                }
              }
            }
          }
LABEL_207:
          uint64_t v81 = (uint64_t)v67;
          uint64_t v7 = 4294954654;
          uint64_t v71 = 4294955030;
          goto LABEL_208;
        }
        uint64_t v7 = 4294954654;
        _StreamPlaylistLogError(4294954654, 4294955030, a4, @"%s has changed", "START-DATE");
        CFStringRef v54 = 0;
        CFStringRef v19 = 0;
        CFDictionaryRef v64 = theDict;
        CFDateRef v48 = v89;
      }
      else
      {
LABEL_133:
        CFDateRef v48 = v89;
        if (v89)
        {
          v107[0] = 0;
          CFLocaleIdentifier v49 = (const void *)FigMediaPlaylistGetParseDate(a1);
          int v50 = (const void *)FigMediaPlaylistGetParseDate(a1);
          uint64_t v51 = FigDateRangeSpecifierCreate(0, 0, 0, 0, 0, 0, 0, 0, -1.0, -1.0, -1.0, -1.0, 0, 0, 0, 0, 0, 0, 0,
                  v49,
                  v50,
                  (uint64_t *)v107);
          if (v51)
          {
            uint64_t v7 = v51;
            CFDictionaryRef v64 = theDict;
            CFDateRef v63 = cf1;
            if (v107[0]) {
              CFRelease(v107[0]);
            }
            CFStringRef v54 = 0;
            CFStringRef v19 = 0;
            goto LABEL_203;
          }
          FigMediaPlaylistAddDateRangeSpecifier(a1, v107[0]);
          CFDictionaryRef ValueAtIndex = v107[0];
          FigDateRangeSpecifierSetIdentifier((uint64_t)v107[0], v8);
          FigDateRangeSpecifierSetStartDate((uint64_t)ValueAtIndex, v89);
          CFStringRef v52 = *(const char **)(a4 + 32);
          size_t v53 = strcspn(v52, "\r\n");
          CFStringRef v54 = CFStringCreateWithBytes(alloc, (const UInt8 *)v52, v53, 0x8000100u, 1u);
          if (!v54)
          {
            uint64_t v7 = FigSignalErrorAt();
            CFDateRef v63 = cf1;
            goto LABEL_221;
          }
          FigDateRangeSpecifierSetTaggedRangeLine((uint64_t)ValueAtIndex, v54);
          *(void *)&long long context = ValueAtIndex;
          *(void *)&long long v103 = FigMediaPlaylistGetParseDate(a1);
          CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)TaggedRangeUniquenessApplier, &context);
          char v55 = 0;
          *a3 = 1;
LABEL_137:
          if (cf)
          {
            if (FigDateRangeSpecifierGetTaggedRangeClass((uint64_t)ValueAtIndex))
            {
LABEL_176:
              if (v31 && !FigDateRangeSpecifierGetTaggedRangeCue((uint64_t)ValueAtIndex))
              {
                FigDateRangeSpecifierSetTaggedRangeCue((uint64_t)ValueAtIndex, v31);
                CFRelease(v31);
                CFStringRef v31 = 0;
              }
              CFTypeRef v74 = v101;
              if (v101 && !FigDateRangeSpecifierGetScte35cmd((uint64_t)ValueAtIndex))
              {
                FigDateRangeSpecifierSetScte35cmd((uint64_t)ValueAtIndex, v74);
                CFRelease(v74);
                CFTypeRef v101 = 0;
                uint64_t v75 = (const void *)FigMediaPlaylistGetParseDate(a1);
                FigDateRangeSpecifierSetValueForTagsFirstFoundDateDict((uint64_t)ValueAtIndex, @"SCTE35-CMD", v75);
              }
              CFTypeRef v76 = v100;
              if (v100 && !FigDateRangeSpecifierGetScte35in((uint64_t)ValueAtIndex))
              {
                FigDateRangeSpecifierSetScte35in((uint64_t)ValueAtIndex, v76);
                CFRelease(v76);
                CFTypeRef v100 = 0;
                int v77 = (const void *)FigMediaPlaylistGetParseDate(a1);
                FigDateRangeSpecifierSetValueForTagsFirstFoundDateDict((uint64_t)ValueAtIndex, @"SCTE35-IN", v77);
              }
              CFTypeRef v78 = v99;
              if (v99 && !FigDateRangeSpecifierGetScte35out((uint64_t)ValueAtIndex))
              {
                FigDateRangeSpecifierSetScte35out((uint64_t)ValueAtIndex, v78);
                CFRelease(v78);
                CFTypeRef v99 = 0;
                CFDictionaryRef v79 = (const void *)FigMediaPlaylistGetParseDate(a1);
                FigDateRangeSpecifierSetValueForTagsFirstFoundDateDict((uint64_t)ValueAtIndex, @"SCTE35-OUT", v79);
              }
              if (cf1)
              {
                FigDateRangeSpecifierSetTempEndDate((uint64_t)ValueAtIndex, cf1);
                CFRelease(cf1);
              }
              if (v105 >= 0.0) {
                FigDateRangeSpecifierSetTempDuration((uint64_t)ValueAtIndex, v105);
              }
              if (v104 >= 0.0) {
                FigDateRangeSpecifierSetTempPlannedDuration((uint64_t)ValueAtIndex, v104);
              }
              if (v86)
              {
                FigDateRangeSpecifierSetEndOnNext((uint64_t)ValueAtIndex, v84);
                FigDateRangeSpecifierSetEndOnNextSet((uint64_t)ValueAtIndex, 1);
                if (FigDateRangeSpecifierGetEndOnNext((uint64_t)ValueAtIndex)
                  && FigDateRangeSpecifierGetTempEndDate((uint64_t)ValueAtIndex))
                {
                  _StreamPlaylistLogError(0, 4294955030, a4, @"%s: %s and %s both specified", "#EXT-X-DATERANGE", "END-ON-NEXT", "END-DATE");
                  FigDateRangeSpecifierSetTempEndDate((uint64_t)ValueAtIndex, 0);
                }
                if (FigDateRangeSpecifierGetEndOnNext((uint64_t)ValueAtIndex)
                  && FigDateRangeSpecifierGetTempDuration((uint64_t)ValueAtIndex) >= 0.0)
                {
                  _StreamPlaylistLogError(0, 4294955030, a4, @"%s: %s and %s both specified", "#EXT-X-DATERANGE", "END-ON-NEXT", "DURATION");
                  FigDateRangeSpecifierSetTempDuration((uint64_t)ValueAtIndex, -1.0);
                }
              }
              FigDateRangeSpecifierSetReadInCurrent((uint64_t)ValueAtIndex, 1);
              uint64_t v7 = 0;
              CFDateRef v63 = 0;
              if (v55)
              {
                CFStringRef v19 = 0;
                CFDictionaryRef v64 = theDict;
                CFDateRef v48 = v89;
LABEL_203:
                CFStringRef v65 = cf;
                goto LABEL_224;
              }
LABEL_221:
              CFStringRef v65 = cf;
              if (ValueAtIndex) {
                CFRelease(ValueAtIndex);
              }
              CFStringRef v19 = 0;
              CFDictionaryRef v64 = theDict;
              CFDateRef v48 = v89;
              goto LABEL_224;
            }
            FigDateRangeSpecifierSetTaggedRangeClass((uint64_t)ValueAtIndex, cf);
            CFRelease(cf);
            if (FigDateRangeSpecifierGetTaggedRangeClass((uint64_t)ValueAtIndex))
            {
              CFArrayRef v56 = (const __CFArray *)FigMediaPlaylistGetDateRangeSpecifiers(a1);
              if (v56)
              {
                CFIndex Count = CFArrayGetCount(v56);
                if (Count >= 1)
                {
                  int v58 = 0;
                  CFIndex v59 = Count + 1;
                  while (1)
                  {
                    CFArrayRef v60 = (const __CFArray *)FigMediaPlaylistGetDateRangeSpecifiers(a1);
                    CFArrayRef v61 = CFArrayGetValueAtIndex(v60, v59 - 2);
                    uint64_t v62 = (uint64_t)v61;
                    if (v58)
                    {
                      FigDateRangeSpecifierGetTaggedRangeClass((uint64_t)v61);
                      if (FigCFEqual()) {
                        break;
                      }
                    }
                    if ((char *)v62 == ValueAtIndex) {
                      int v58 = 1;
                    }
                    if ((unint64_t)--v59 < 2) {
                      goto LABEL_148;
                    }
                  }
                  if (!v62)
                  {
LABEL_148:
                    CFStringRef cf = 0;
                    CFStringRef v31 = v87;
                    goto LABEL_176;
                  }
                  CFStringRef v31 = v87;
                  if (FigDateRangeSpecifierGetEndOnNext(v62))
                  {
                    CFStringRef v72 = (const void *)FigDateRangeSpecifierGetStartDate((uint64_t)ValueAtIndex);
                    FigDateRangeSpecifierSetTempEndDate(v62, v72);
                    char v73 = (const void *)FigMediaPlaylistGetParseDate(a1);
                    FigDateRangeSpecifierSetModificationTimestamp(v62, v73);
                    CFStringRef cf = 0;
                    *a3 = 1;
                    goto LABEL_176;
                  }
                }
              }
            }
          }
          CFStringRef cf = 0;
          goto LABEL_176;
        }
        uint64_t v7 = 4294954654;
        _StreamPlaylistLogError(4294954654, 4294954977, a4, @"%s: missing date range", "#EXT-X-DATERANGE");
        CFStringRef v54 = 0;
        CFStringRef v19 = 0;
        CFDictionaryRef v64 = theDict;
      }
LABEL_211:
      CFStringRef v65 = cf;
      CFDateRef v63 = cf1;
      if (!v8) {
        goto LABEL_225;
      }
LABEL_224:
      CFRelease(v8);
      goto LABEL_225;
    }
    v107[0] = 0;
    CFIndex v96 = 0;
    CFStringRef v97 = 0;
    CFIndex numBytes = 0;
    int v94 = 0;
    free(v98);
    CFTypeRef v98 = 0;
    uint64_t v7 = sp_ParseAttribute("#EXT-X-DATERANGE", v5, 1, 0, v107, &v96, (const char **)&v97, (size_t *)&numBytes, (const char **)&v106, &v94, (UInt8 **)&v98, a4);
    if (v7 && !*(unsigned char *)(a4 + 41) || (char v13 = v94, (v94 & 2) != 0))
    {
LABEL_149:
      CFStringRef v19 = 0;
      goto LABEL_150;
    }
    CFIndex v14 = v107[0];
    if (v107[0])
    {
      int v15 = v97;
      if (v97) {
        break;
      }
    }
LABEL_81:
    unsigned int v5 = v106;
  }
  CFIndex v16 = v96;
  switch(v96)
  {
    case 2:
      if (strncmp(v107[0], "ID", 2uLL)) {
        goto LABEL_40;
      }
      if (v8)
      {
        uint64_t v7 = 4294954654;
        _StreamPlaylistLogError(4294954654, 4294955031, a4, @"duplicate id", v81);
        goto LABEL_80;
      }
      if ((v13 & 1) == 0)
      {
        uint64_t v7 = 4294954654;
        _StreamPlaylistLogError(4294954654, 4294955030, a4, @"Invalid %s: %s: %s", v106, "ID", v15);
        CFStringRef v8 = 0;
        goto LABEL_80;
      }
      CFStringRef v8 = CFStringCreateWithBytes(alloc, v15, numBytes, 0x8000100u, 1u);
      if (v8) {
        goto LABEL_47;
      }
      CFStringRef v19 = 0;
      goto LABEL_248;
    case 3:
      if (strncmp(v107[0], "CUE", 3uLL)) {
        goto LABEL_40;
      }
      if (v87)
      {
        uint64_t v7 = 4294954654;
        _StreamPlaylistLogError(4294954654, 4294955031, a4, @"duplicate cue", v81);
        goto LABEL_80;
      }
      CFStringRef v87 = CFStringCreateWithBytes(alloc, v15, numBytes, 0x8000100u, 1u);
      goto LABEL_47;
    case 5:
      if (strncmp(v107[0], "CLASS", 5uLL)) {
        goto LABEL_40;
      }
      if (cf)
      {
        uint64_t v7 = 4294954654;
        _StreamPlaylistLogError(4294954654, 4294955031, a4, @"duplicate class", v81);
        goto LABEL_80;
      }
      CFStringRef cf = CFStringCreateWithBytes(alloc, v15, numBytes, 0x8000100u, 1u);
      goto LABEL_47;
    case 8:
      if (!strncmp(v107[0], "END-DATE", 8uLL))
      {
        if (cf1)
        {
          uint64_t v7 = 4294954654;
          _StreamPlaylistLogError(4294954654, 4294955031, a4, @"duplicate endDate", v81);
          goto LABEL_80;
        }
        if (v13)
        {
          CMTimeValue value = 0;
          uint64_t v29 = FigCFParseISO8601Date();
          uint64_t v7 = v29;
          if (v29)
          {
            _StreamPlaylistLogError(v29, 4294955017, a4, @"%s: ISO8601 Date parse error", "#EXT-X-DATERANGE");
            CFDateRef cf1 = 0;
          }
          else
          {
            CFDateRef cf1 = CFDateCreate(alloc, *(CFAbsoluteTime *)&value);
          }
          goto LABEL_47;
        }
        uint64_t v7 = 4294954654;
        _StreamPlaylistLogError(4294954654, 4294955030, a4, @"Invalid %s: %s: no quotes", "#EXT-X-DATERANGE", "END-DATE");
        CFDateRef cf1 = 0;
        goto LABEL_80;
      }
      if (strncmp(v14, "DURATION", 8uLL)) {
        goto LABEL_40;
      }
      if (v105 < 0.0)
      {
        uint64_t v7 = sp_strtod((const char *)v15, 0, &v105, 0, (uint64_t)"Date Range Duration", a4);
        if (!v7)
        {
          double v17 = v105;
LABEL_63:
          if (v17 < 0.0)
          {
            uint64_t v7 = 4294954654;
            _StreamPlaylistLogError(4294954654, 4294955032, a4, @"illegal duration value", v81);
            goto LABEL_80;
          }
        }
LABEL_47:
        if (!v7) {
          goto LABEL_81;
        }
        goto LABEL_80;
      }
      uint64_t v7 = 4294954654;
      _StreamPlaylistLogError(4294954654, 4294955031, a4, @"duplicate duration", v81);
      goto LABEL_80;
    case 9:
      if (strncmp(v107[0], "SCTE35-IN", 9uLL)) {
        goto LABEL_40;
      }
      if (v100)
      {
        int v18 = "SCTE35-IN";
        goto LABEL_67;
      }
      CFIndex v24 = numBytes;
      CFIndex v25 = &v100;
      CFArrayRef v26 = v15;
      CFStringRef v27 = "Date Range SCTE35_IN";
      goto LABEL_95;
    case 10:
      if (!strncmp(v107[0], "START-DATE", 0xAuLL))
      {
        if (v89)
        {
          uint64_t v7 = 4294954654;
          _StreamPlaylistLogError(4294954654, 4294955031, a4, @"duplicate startDate", v81);
          goto LABEL_80;
        }
        if (v13)
        {
          CMTimeValue value = 0;
          uint64_t v30 = FigCFParseISO8601Date();
          uint64_t v7 = v30;
          if (v30)
          {
            _StreamPlaylistLogError(v30, 4294955017, a4, @"%s: ISO8601 Date parse error", "#EXT-X-DATERANGE");
            CFDateRef v89 = 0;
          }
          else
          {
            CFDateRef v89 = CFDateCreate(alloc, *(CFAbsoluteTime *)&value);
          }
          goto LABEL_47;
        }
        uint64_t v7 = 4294954654;
        _StreamPlaylistLogError(4294954654, 4294955030, a4, @"Invalid %s: %s: no quotes", "#EXT-X-DATERANGE", "START-DATE");
        CFDateRef v89 = 0;
LABEL_80:
        if (!*(unsigned char *)(a4 + 41)) {
          goto LABEL_149;
        }
        goto LABEL_81;
      }
      if (!strncmp(v14, "SCTE35-CMD", 0xAuLL))
      {
        if (v101)
        {
          int v18 = "SCTE35-CMD";
          goto LABEL_67;
        }
        CFIndex v24 = numBytes;
        CFIndex v25 = &v101;
        CFArrayRef v26 = v15;
        CFStringRef v27 = "Date Range SCTE35_CMD";
LABEL_95:
        uint64_t v7 = sp_strtohex(v26, v24, (CFDataRef *)v25, (uint64_t)v27, a4);
        goto LABEL_47;
      }
      if (!strncmp(v14, "SCTE35-OUT", 0xAuLL))
      {
        if (v99)
        {
          int v18 = "SCTE35-OUT";
LABEL_67:
          uint64_t v7 = 4294954654;
          _StreamPlaylistLogError(4294954654, 4294955031, a4, @"duplicate %s", v18);
          goto LABEL_80;
        }
        CFIndex v24 = numBytes;
        CFIndex v25 = &v99;
        CFArrayRef v26 = v15;
        CFStringRef v27 = "Date Range SCTE35_OUTE";
        goto LABEL_95;
      }
LABEL_40:
      if (strncmp(v14, "X-", 2uLL))
      {
        _StreamPlaylistLogError(0, 4294955022, a4, @"unrecognized attribute %.*s", v16, v14);
        goto LABEL_47;
      }
      CFStringRef v19 = CFStringCreateWithBytes(alloc, (const UInt8 *)v14, v16, 0x8000100u, 1u);
      if (!v19) {
        goto LABEL_248;
      }
      if (CFDictionaryGetValue(theDict, v19))
      {
        uint64_t v7 = 4294954654;
        _StreamPlaylistLogError(4294954654, 4294955031, a4, @"duplicate key entry");
LABEL_45:
        CFStringRef v20 = v19;
LABEL_46:
        CFRelease(v20);
        goto LABEL_47;
      }
      CFIndex v21 = numBytes;
      if ((v13 & 1) == 0)
      {
        if ((unint64_t)numBytes >= 3 && !strncasecmp((const char *)v15, "0x", 2uLL))
        {
          CMTimeValue value = 0;
          uint64_t v7 = sp_strtohex(v15, v21, (CFDataRef *)&value, (uint64_t)"Date range hex", a4);
          if (!v7)
          {
            uint64_t v28 = value;
            if (value)
            {
              CFDictionaryAddValue(theDict, v19, value);
              CFRelease(v28);
            }
          }
        }
        else
        {
          CMTimeValue value = 0;
          uint64_t v7 = sp_strtod((const char *)v15, 0, (double *)&value, 0, (uint64_t)"tag double value", a4);
          if (!v7) {
            uint64_t v7 = FigCFDictionarySetDouble();
          }
        }
        goto LABEL_45;
      }
      CFStringRef v22 = CFStringCreateWithBytes(alloc, v15, numBytes, 0x8000100u, 1u);
      if (v22)
      {
        CFStringRef v23 = v22;
        CFDictionaryAddValue(theDict, v19, v22);
        CFRelease(v19);
        CFStringRef v20 = v23;
        goto LABEL_46;
      }
LABEL_248:
      uint64_t v7 = FigSignalErrorAt();
LABEL_150:
      CFStringRef v31 = v87;
      CFDateRef v63 = cf1;
      CFDictionaryRef v64 = theDict;
      CFDateRef v48 = v89;
      CFStringRef v65 = cf;
      CFStringRef v54 = 0;
      if (v8) {
        goto LABEL_224;
      }
LABEL_225:
      if (v64) {
        CFRelease(v64);
      }
      if (v63) {
        CFRelease(v63);
      }
      if (v48) {
        CFRelease(v48);
      }
      if (v19) {
        CFRelease(v19);
      }
      if (v65) {
        CFRelease(v65);
      }
      if (v31) {
        CFRelease(v31);
      }
      if (v101) {
        CFRelease(v101);
      }
      if (v100) {
        CFRelease(v100);
      }
      if (v99) {
        CFRelease(v99);
      }
      if (v54) {
        CFRelease(v54);
      }
      free(v98);
      return v7;
    case 11:
      if (strncmp(v107[0], "END-ON-NEXT", 0xBuLL)) {
        goto LABEL_40;
      }
      if (!strncasecmp((const char *)v15, "YES", 3uLL))
      {
        unsigned __int8 v84 = 1;
      }
      else
      {
        if (strncasecmp((const char *)v15, "NO", 2uLL))
        {
          _StreamPlaylistLogError(4294954654, 4294955030, a4, @"%s: read error", "END-ON-NEXT", v82);
          goto LABEL_47;
        }
        unsigned __int8 v84 = 0;
      }
      int v86 = 1;
      goto LABEL_47;
    case 16:
      if (strncmp(v107[0], "PLANNED-DURATION", 0x10uLL)) {
        goto LABEL_40;
      }
      if (v104 >= 0.0)
      {
        uint64_t v7 = 4294954654;
        _StreamPlaylistLogError(4294954654, 4294955031, a4, @"duplicate planned duration", v81);
        goto LABEL_80;
      }
      uint64_t v7 = sp_strtod((const char *)v15, 0, &v104, 0, (uint64_t)"Date Range Planned Duration", a4);
      if (v7) {
        goto LABEL_47;
      }
      double v17 = v104;
      goto LABEL_63;
    default:
      goto LABEL_40;
  }
}

uint64_t PlaylistProcessVariableTag(const char *a1, const __CFDictionary *a2, const __CFDictionary *a3, unsigned char *a4, uint64_t a5)
{
  BOOL v6 = (char *)a1;
  CFStringRef cf = 0;
  CFStringRef v31 = 0;
  CFStringRef v32 = 0;
  CFStringRef v33 = 0;
  uint64_t v7 = 0;
  int v39 = 0;
  int v40 = (char *)a1;
  CFAllocatorRef alloc = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  while (1)
  {
    unsigned int v8 = *v6;
    BOOL v9 = v8 > 0xD;
    int v10 = (1 << v8) & 0x2401;
    if (!v9 && v10 != 0)
    {
      CFStringRef v16 = v32;
      CFStringRef v15 = v33;
      CFStringRef v18 = cf;
      CFStringRef v17 = v31;
      if (v31 && cf && v33)
      {
        CFStringRef v23 = @"%s: name can only come from one of NAME, IMPORT, and QUERYPARAM";
      }
      else
      {
        if (!cf)
        {
          if (v31)
          {
            if (CFDictionaryGetValue(*(CFDictionaryRef *)(a5 + 24), v31))
            {
              CFStringRef v24 = @"%s: IMPORT %@ already declared";
            }
            else
            {
              if (a2)
              {
                CFStringRef Value = (const __CFString *)CFDictionaryGetValue(a2, v31);
                if (!Value)
                {
                  uint64_t v7 = 4294954654;
                  _StreamPlaylistLogError(4294954654, 4294955032, a5, @"%s: IMPORT %@ not found in multivariant playlist", "#EXT-X-DEFINE", v31);
                  goto LABEL_65;
                }
                CFStringRef v16 = Value;
                CFRetain(Value);
                CFDictionarySetValue(*(CFMutableDictionaryRef *)(a5 + 24), v31, v16);
                goto LABEL_64;
              }
              CFStringRef v24 = @"%s: IMPORT %@ found but no imports available";
            }
            uint64_t v7 = 4294954654;
            _StreamPlaylistLogError(4294954654, 4294955032, a5, v24, "#EXT-X-DEFINE", v31);
            goto LABEL_49;
          }
          if (v33)
          {
            if (CFDictionaryGetValue(*(CFDictionaryRef *)(a5 + 24), v33))
            {
              CFStringRef v22 = @"%s: QUERYPARAM %@ already declared";
            }
            else
            {
              if (a3)
              {
                CFStringRef v20 = (const __CFString *)CFDictionaryGetValue(a3, v33);
                if (!v20)
                {
                  uint64_t v7 = 4294954654;
                  _StreamPlaylistLogError(4294954654, 4294955032, a5, @"%s: QUERYPARAM %@ not found in query parameters", "#EXT-X-DEFINE", v33);
                  goto LABEL_66;
                }
                CFStringRef v16 = v20;
                CFRetain(v20);
                CFDictionarySetValue(*(CFMutableDictionaryRef *)(a5 + 24), v33, v16);
                if (a4)
                {
                  CFStringRef v17 = 0;
                  *a4 = 1;
                }
                else
                {
                  uint64_t v7 = FigSignalErrorAt();
                  CFStringRef v17 = 0;
                }
                goto LABEL_64;
              }
              CFStringRef v22 = @"%s: QUERYPARAM %@ found, but no query parameters available";
            }
            CFStringRef v25 = v33;
          }
          else
          {
            CFStringRef v22 = @"%s: Did not find NAME, IMPORT or QUERYPARAM";
          }
          uint64_t v7 = 4294954654;
          _StreamPlaylistLogError(4294954654, 4294955032, a5, v22, "#EXT-X-DEFINE", v25);
          CFStringRef v17 = 0;
          goto LABEL_49;
        }
        if (v32)
        {
          if (CFDictionaryGetValue(*(CFDictionaryRef *)(a5 + 24), cf))
          {
            CFStringRef v23 = @"%s: NAME %@ already declared";
          }
          else
          {
            if (!a2 || !CFDictionaryGetValue(a2, cf))
            {
              CFDictionarySetValue(*(CFMutableDictionaryRef *)(a5 + 24), cf, v32);
LABEL_48:
              CFRelease(v18);
              goto LABEL_49;
            }
            CFStringRef v23 = @"%s: NAME %@ declared in multivariant playlist cannot be redeclared";
          }
        }
        else
        {
          CFStringRef v23 = @"%s: Must have VALUE for NAME %@";
        }
        CFStringRef v25 = cf;
      }
      uint64_t v7 = 4294954654;
      _StreamPlaylistLogError(4294954654, 4294955032, a5, v23, "#EXT-X-DEFINE", v25);
      goto LABEL_48;
    }
    uint64_t v38 = 0;
    uint64_t v36 = 0;
    CFIndex v37 = 0;
    CFIndex numBytes = 0;
    int v34 = 0;
    free(v39);
    int v39 = 0;
    uint64_t v7 = sp_ParseAttribute("#EXT-X-DEFINE", v6, 0, 0, &v38, &v36, (const char **)&v37, (size_t *)&numBytes, (const char **)&v40, &v34, &v39, a5);
    if (v7)
    {
      if (!*(unsigned char *)(a5 + 41)) {
        break;
      }
    }
    char v12 = v34;
    if ((v34 & 2) != 0) {
      break;
    }
    if (v38)
    {
      char v13 = v37;
      if (v37)
      {
        switch(v36)
        {
          case 4:
            if (!strncmp(v38, "NAME", 4uLL))
            {
              if ((v12 & 1) == 0)
              {
                CFIndex v14 = "NAME";
                goto LABEL_25;
              }
              if (cf) {
                CFRelease(cf);
              }
              CFStringRef cf = CFStringCreateWithBytes(alloc, v13, numBytes, 0x8000100u, 1u);
            }
            break;
          case 5:
            if (!strncmp(v38, "VALUE", 5uLL))
            {
              if ((v12 & 1) == 0)
              {
                CFIndex v14 = "VALUE";
                goto LABEL_25;
              }
              if (v32) {
                CFRelease(v32);
              }
              CFStringRef v32 = CFStringCreateWithBytes(alloc, v13, numBytes, 0x8000100u, 1u);
            }
            break;
          case 6:
            if (!strncmp(v38, "IMPORT", 6uLL))
            {
              if ((v12 & 1) == 0)
              {
                CFIndex v14 = "IMPORT";
                goto LABEL_25;
              }
              if (v31) {
                CFRelease(v31);
              }
              CFStringRef v31 = CFStringCreateWithBytes(alloc, v13, numBytes, 0x8000100u, 1u);
            }
            break;
          case 10:
            if (!strncmp(v38, "QUERYPARAM", 0xAuLL))
            {
              if (v12)
              {
                if (v33) {
                  CFRelease(v33);
                }
                CFStringRef v33 = CFStringCreateWithBytes(alloc, v13, numBytes, 0x8000100u, 1u);
              }
              else
              {
                CFIndex v14 = "QUERYPARAM";
LABEL_25:
                uint64_t v7 = 4294954654;
                _StreamPlaylistLogError(4294954654, 4294955032, a5, @"%s %s: missing quotes", "#EXT-X-DEFINE", v14);
              }
            }
            break;
          default:
            break;
        }
      }
    }
    BOOL v6 = v40;
  }
  CFStringRef v16 = v32;
  CFStringRef v15 = v33;
  CFStringRef v18 = cf;
  CFStringRef v17 = v31;
  if (cf) {
    goto LABEL_48;
  }
LABEL_49:
  if (!v16)
  {
    if (!v17) {
      goto LABEL_51;
    }
    goto LABEL_65;
  }
LABEL_64:
  CFRelease(v16);
  if (!v17)
  {
LABEL_51:
    if (!v15) {
      goto LABEL_67;
    }
    goto LABEL_66;
  }
LABEL_65:
  CFRelease(v17);
  if (!v15) {
    goto LABEL_67;
  }
LABEL_66:
  CFRelease(v15);
LABEL_67:
  free(v39);
  return v7;
}

uint64_t PlaylistProcessServerControlTag(uint64_t a1, const char *a2, uint64_t a3, double a4, double a5)
{
  uint64_t v36 = (char *)a2;
  double v34 = 0.0;
  double v35 = 0.0;
  CFStringRef v32 = 0;
  double v33 = 0.0;
  __int16 v31 = 0;
  while (1)
  {
    unsigned int v8 = v36;
    unsigned int v9 = *v36;
    BOOL v10 = v9 > 0xD;
    int v11 = (1 << v9) & 0x2401;
    if (!v10 && v11 != 0) {
      break;
    }
    uint64_t v29 = 0;
    __s1 = 0;
    uint64_t v28 = 0;
    int v26 = 0;
    free(v32);
    CFStringRef v32 = 0;
    uint64_t v13 = sp_ParseAttribute("#EXT-X-SERVER-CONTROL", v8, 1, 0, &__s1, &v28, (const char **)&v29, &v27, (const char **)&v36, &v26, (UInt8 **)&v32, a3);
    if (v13 && !*(unsigned char *)(a3 + 41) || (v26 & 2) != 0) {
      goto LABEL_50;
    }
    CFIndex v14 = __s1;
    if (!__s1) {
      goto LABEL_30;
    }
    CFStringRef v15 = v29;
    if (!v29) {
      goto LABEL_30;
    }
    if (v28 > 15)
    {
      if (v28 != 16)
      {
        if (v28 != 19 || strncmp(__s1, "CAN-SKIP-DATERANGES", 0x13uLL)) {
          goto LABEL_30;
        }
        CFStringRef v17 = &v31;
LABEL_28:
        uint64_t matched = sp_MatchYesOrNo((uint64_t)v14, v15, a3, v17);
LABEL_29:
        uint64_t v13 = matched;
        goto LABEL_30;
      }
      if (!strncmp(__s1, "CAN-BLOCK-RELOAD", 0x10uLL))
      {
        CFStringRef v17 = (__int16 *)((char *)&v31 + 1);
        goto LABEL_28;
      }
    }
    else if (v28 == 9)
    {
      if (!strncmp(__s1, "HOLD-BACK", 9uLL))
      {
        uint64_t v13 = sp_strtod(v15, 0, &v34, 0, (uint64_t)"holdback", a3);
        if (!v13)
        {
          double v18 = v34;
          if (v34 <= 0.0)
          {
            CFStringRef v23 = "HOLD-BACK";
LABEL_42:
            uint64_t v13 = 4294954654;
            _StreamPlaylistLogError(4294954654, 4294955032, a3, @"%s must be positive", v18, v23);
LABEL_43:
            uint64_t v19 = a1;
            FigMediaPlaylistSetDoesServerSupportsBlockingReload(a1, SHIBYTE(v31));
            FigMediaPlaylistSetSkipDeltaBoundary(a1, v35);
            FigMediaPlaylistSetCanSkipDATERANGES(a1, v31);
            goto LABEL_44;
          }
        }
      }
    }
    else if (v28 == 14)
    {
      if (!strncmp(__s1, "CAN-SKIP-UNTIL", 0xEuLL))
      {
        uint64_t v13 = sp_strtod(v15, 0, &v35, 0, (uint64_t)"skip boundary", a3);
        if (!v13)
        {
          double v18 = v35;
          if (v35 <= 0.0)
          {
            CFStringRef v23 = "CAN-SKIP-UNTIL";
            goto LABEL_42;
          }
        }
      }
      else if (!strncmp(v14, "PART-HOLD-BACK", 0xEuLL))
      {
        uint64_t matched = sp_strtod(v15, 0, &v33, 0, (uint64_t)"part holdback", a3);
        goto LABEL_29;
      }
    }
LABEL_30:
    if (v13) {
      goto LABEL_43;
    }
  }
  uint64_t v19 = a1;
  FigMediaPlaylistSetDoesServerSupportsBlockingReload(a1, SHIBYTE(v31));
  FigMediaPlaylistSetSkipDeltaBoundary(a1, v35);
  int v20 = v31;
  FigMediaPlaylistSetCanSkipDATERANGES(a1, v31);
  Hasdouble SkipDeltaBoundary = FigMediaPlaylistHasSkipDeltaBoundary(a1);
  if (!v20 || HasSkipDeltaBoundary)
  {
    if (a4 != 0.0 && vabdd_f64(a4, v33) > 2.22044605e-16)
    {
      uint64_t v13 = 4294954654;
      _StreamPlaylistLogError(4294954654, 4294955032, a3, @"illegal %s change", "PART-HOLD-BACK");
      double v22 = v34;
      goto LABEL_49;
    }
    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v13 = 4294954654;
    _StreamPlaylistLogError(4294954654, 4294955032, a3, @"%s requires %s", "CAN-SKIP-DATERANGES", "CAN-SKIP-UNTIL");
  }
LABEL_44:
  FigMediaPlaylistSetPartHoldBackDuration(v19, v33);
  double v22 = v34;
  if (a5 != 0.0 && !v13)
  {
    if (vabdd_f64(a5, v34) > 2.22044605e-16)
    {
      uint64_t v13 = 4294954654;
      _StreamPlaylistLogError(4294954654, 4294955032, a3, @"illegal %s change", v34, "HOLD-BACK");
      goto LABEL_50;
    }
    uint64_t v13 = 0;
  }
LABEL_49:
  FigMediaPlaylistSetHoldBackDuration(v19, v22);
LABEL_50:
  free(v32);
  return v13;
}

uint64_t PlaylistProcessSkipTag(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t ValueAtIndex, uint64_t *a7, unint64_t *a8, double *a9, CFTypeRef *a10)
{
  uint64_t v44 = (char *)a2;
  uint64_t v42 = 0;
  unint64_t v43 = 0;
  CFTypeRef cf = 0;
  while (1)
  {
    CFStringRef v15 = v44;
    unsigned int v16 = *v44;
    BOOL v17 = v16 > 0xD;
    int v18 = (1 << v16) & 0x2401;
    if (!v17 && v18 != 0)
    {
      uint64_t v23 = 0;
      goto LABEL_22;
    }
    int v39 = 0;
    __s1 = 0;
    size_t v37 = 0;
    uint64_t v38 = 0;
    int v36 = 0;
    free(v42);
    uint64_t v42 = 0;
    uint64_t v23 = sp_ParseAttribute("#EXT-X-SKIP", v15, 1, 1, &__s1, &v38, (const char **)&v39, &v37, (const char **)&v44, &v36, (UInt8 **)&v42, a3);
    if (v23 && !*(unsigned char *)(a3 + 41)) {
      goto LABEL_43;
    }
    char v20 = v36;
    if ((v36 & 2) != 0) {
      goto LABEL_43;
    }
    if (!__s1) {
      goto LABEL_21;
    }
    CFIndex v21 = v39;
    if (!v39) {
      goto LABEL_21;
    }
    if (v38 == 27) {
      break;
    }
    if (v38 == 16 && !strncmp(__s1, "SKIPPED-SEGMENTS", 0x10uLL))
    {
      uint64_t v22 = sp_strtoull(v21, 0, &v43, 10, 0, 1, (uint64_t)"SKIPPED-SEGMENTS", a3);
      uint64_t v23 = 0;
      if (v22)
      {
        uint64_t v23 = v22;
        if (!*(unsigned char *)(a3 + 41)) {
          goto LABEL_43;
        }
LABEL_22:
        if (!ValueAtIndex)
        {
          CFIndex v24 = 0;
          while (1)
          {
            CFArrayRef MediaSegmentSpecifiers = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(a1);
            if (MediaSegmentSpecifiers) {
              CFArrayRef MediaSegmentSpecifiers = (const __CFArray *)CFArrayGetCount(MediaSegmentSpecifiers);
            }
            if (v24 >= (uint64_t)MediaSegmentSpecifiers) {
              break;
            }
            CFArrayRef v26 = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(a1);
            CFDictionaryRef ValueAtIndex = (uint64_t)CFArrayGetValueAtIndex(v26, v24++);
            if (FigMediaSegmentSpecifierGetMediaSequence(ValueAtIndex) == a4) {
              goto LABEL_30;
            }
          }
          CFDictionaryRef ValueAtIndex = 0;
        }
LABEL_30:
        unint64_t v27 = v43;
        if (v43)
        {
          double v28 = 0.0;
          unint64_t v29 = v43;
          do
          {
            if (!ValueAtIndex)
            {
              uint64_t v23 = 4294949663;
              _StreamPlaylistLogError(4294949663, 4294949663, a3, @"Delta sequence out of range");
              goto LABEL_43;
            }
            if (a5)
            {
              FigMediaSegmentSpecifierGetDateStamp(ValueAtIndex);
              if (!FigCFEqual())
              {
                uint64_t v23 = 4294949663;
                _StreamPlaylistLogError(4294949663, 4294955017, a3, @"Leading date in Delta does not match");
                goto LABEL_43;
              }
            }
            uint64_t DateStamp = (const void *)FigMediaSegmentSpecifierGetDateStamp(ValueAtIndex);
            FigStreamPlaylistValidateMediaEntry(a1, ValueAtIndex, DateStamp);
            double v28 = v28 + FigMediaSegmentSpecifierGetTimeInSeconds(ValueAtIndex);
            uint64_t NextSegment = FigMediaSegmentSpecifierGetNextSegment(ValueAtIndex);
            CFDictionaryRef ValueAtIndex = NextSegment;
            a5 = 0;
            --v29;
          }
          while (v29);
          if (!NextSegment) {
            goto LABEL_39;
          }
        }
        else
        {
          double v28 = 0.0;
          if (!ValueAtIndex)
          {
LABEL_39:
            uint64_t v23 = 4294949663;
            _StreamPlaylistLogError(4294949663, 4294949663, a3, @"Delta exceeded current range");
            goto LABEL_40;
          }
        }
        *a7 = ValueAtIndex;
LABEL_40:
        *a8 = v27;
        *a9 = v28;
        CFStringRef v32 = v42;
        *a10 = cf;
        free(v32);
        return v23;
      }
    }
LABEL_21:
    if (v23) {
      goto LABEL_22;
    }
  }
  if (strncmp(__s1, "RECENTLY-REMOVED-DATERANGES", 0x1BuLL)) {
    goto LABEL_21;
  }
  if ((v20 & 1) == 0)
  {
    uint64_t v23 = 4294954654;
    _StreamPlaylistLogError(4294954654, 4294955032, a3, @"%s %s: missing quotes", "#EXT-X-SKIP", "RECENTLY-REMOVED-DATERANGES");
    goto LABEL_22;
  }
  if (!v37) {
    goto LABEL_21;
  }
  uint64_t v23 = PlaylistTokenizeString(v21, v37, a3, 9u, (__CFArray **)&cf);
  if (!v23) {
    goto LABEL_21;
  }
  if (*(unsigned char *)(a3 + 41)) {
    goto LABEL_22;
  }
LABEL_43:
  if (cf) {
    CFRelease(cf);
  }
  return v23;
}

uint64_t sp_GetStringWithReplacement(char *__s, int a2, int a3, char **a4, const char **a5, size_t *a6, UInt8 **a7, uint64_t a8)
{
  int v8 = a2;
  if (!__s)
  {
    unsigned int v37 = FigSignalErrorAt();
    uint64_t v13 = 0;
    if (v8) {
      uint64_t v30 = 4294951057;
    }
    else {
      uint64_t v30 = v37;
    }
    goto LABEL_56;
  }
  BOOL v10 = __s;
  if (a2)
  {
    if (*__s != 34)
    {
      uint64_t v13 = 0;
      uint64_t v30 = 4294951057;
      goto LABEL_56;
    }
    BOOL v10 = __s + 1;
  }
  int v11 = 0;
  size_t v12 = 0;
  uint64_t v13 = 0;
  CFAllocatorRef alloc = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  while (1)
  {
    unsigned int v14 = *v10;
    if (v14 <= 0xD && ((1 << v14) & 0x2401) != 0)
    {
      double v28 = a4;
      if (v8) {
        goto LABEL_55;
      }
      int v29 = 0;
      goto LABEL_49;
    }
    if (v8 && v14 == 34)
    {
      ++v10;
      int v29 = 1;
      double v28 = a4;
LABEL_49:
      uint64_t v30 = 0;
      void *v28 = v10;
      *a5 = v11;
      *a6 = v12;
      *a7 = v13;
      uint64_t v13 = 0;
      if (!v8) {
        goto LABEL_56;
      }
      goto LABEL_54;
    }
    if (!a3 || v14 != 123 || v10[1] != 36)
    {
      BOOL v17 = 0;
      size_t v18 = 0;
      while (v14 > 0xD || ((1 << v14) & 0x2401) == 0)
      {
        if (a3 && v14 == 123)
        {
          unsigned int v14 = v10[v18 + 1];
          if (v14 == 36) {
            break;
          }
        }
        else
        {
          if (v8 && v14 == 34) {
            break;
          }
          unsigned int v14 = v10[v18 + 1];
        }
        if (!v17) {
          BOOL v17 = &v10[v18];
        }
        ++v18;
      }
      uint64_t v19 = 0;
      v10 += v18;
      if (!v11) {
        goto LABEL_44;
      }
      goto LABEL_34;
    }
    CFIndex v46 = 0;
    uint64_t v47 = 0;
    if (*v10 != 123 || v10[1] != 36) {
      goto LABEL_52;
    }
    unsigned int v16 = v11;
    if (v10[2] == 36)
    {
      v10 += 3;
      goto LABEL_42;
    }
    if (!sp_MatchAttributeName((uint64_t)(v10 + 2), 1, &v47, &v46)) {
      goto LABEL_52;
    }
    uint64_t v23 = &v47[v46];
    if (v47[v46] != 125) {
      goto LABEL_52;
    }
    CFStringRef v24 = CFStringCreateWithBytes(alloc, v47, v46, 0x8000100u, 1u);
    if (!v24) {
      goto LABEL_52;
    }
    CFStringRef v25 = v24;
    CFDictionaryRef v26 = *(const __CFDictionary **)(a8 + 24);
    if (!v26 || !CFDictionaryGetValue(v26, v25)) {
      break;
    }
    BOOL v10 = (char *)(v23 + 1);
    CFRelease(v25);
LABEL_42:
    uint64_t v47 = 0;
    uint64_t CStringPtrAndBufferToFree = (const char *)FigCFStringGetCStringPtrAndBufferToFree();
    if (!CStringPtrAndBufferToFree)
    {
LABEL_57:
      uint64_t v30 = FigSignalErrorAt();
      int v29 = 0;
      double v28 = a4;
      goto LABEL_53;
    }
    BOOL v17 = CStringPtrAndBufferToFree;
    uint64_t v19 = v47;
    size_t v18 = strlen(CStringPtrAndBufferToFree);
    *(unsigned char *)(a8 + 42) = 1;
    int v11 = v16;
    int v8 = a2;
    if (!v11)
    {
LABEL_44:
      uint64_t v13 = v19;
      uint64_t v19 = 0;
      goto LABEL_45;
    }
LABEL_34:
    char v20 = v11;
    CFIndex v21 = (char *)malloc_type_malloc(v18 + v12 + 1, 0x827F1159uLL);
    if (!v21) {
      goto LABEL_57;
    }
    uint64_t v22 = v21;
    memcpy(v21, v20, v12);
    memcpy(&v22[v12], v17, v18);
    v22[v18 + v12] = 0;
    free(v13);
    BOOL v17 = v22;
    v18 += v12;
    uint64_t v13 = (UInt8 *)v22;
    int v8 = a2;
LABEL_45:
    free(v19);
    int v11 = v17;
    size_t v12 = v18;
  }
  CFRelease(v25);
LABEL_52:
  size_t v31 = strcspn(v10, "\r\n");
  uint64_t v30 = 4294954654;
  _StreamPlaylistLogError(4294954654, 4294955032, a8, @"%.*s: illegal variable use", v31, v10);
  CFStringRef v32 = &v10[strcspn(v10, "\r\n")];
  size_t v33 = strspn(v32, "\r\n");
  int v29 = 0;
  double v28 = a4;
  *a4 = (char *)&v32[v33];
LABEL_53:
  if (!a2) {
    goto LABEL_56;
  }
LABEL_54:
  if (v29) {
    goto LABEL_56;
  }
LABEL_55:
  size_t v34 = strcspn(__s, "\r\n");
  uint64_t v30 = 4294951057;
  _StreamPlaylistLogError(4294951057, 4294955032, a8, @"%.*s: unterminated quoted string", v34, __s);
  double v35 = &v10[strcspn(v10, "\r\n")];
  void *v28 = (char *)&v35[strspn(v35, "\r\n")];
LABEL_56:
  free(v13);
  return v30;
}

uint64_t MergeLeadingPartialMediaEntries(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, char *a5, int a6)
{
  char v40 = 1;
  FigMediaPlaylistGetMediaSegmentSpecifiers(a1);
  LastCFStringRef Value = FigCFArrayGetLastValue();
  if (!LastValue
    || (uint64_t v12 = LastValue,
        uint64_t MediaSequence = FigMediaSegmentSpecifierGetMediaSequence(a2),
        MediaSequence != FigMediaSegmentSpecifierGetMediaSequence(v12)))
  {
    uint64_t v16 = 0;
    char v17 = 0;
    char v18 = 0;
LABEL_6:
    *a4 = v17;
    *a5 = v18;
    return v16;
  }
  int v39 = a5;
  DiscontinuityCFErrorDomain Domain = FigMediaSegmentSpecifierGetDiscontinuityDomain(v12);
  uint64_t v15 = FigMediaSegmentSpecifierGetDiscontinuityDomain(a2);
  if (DiscontinuityDomain == v15)
  {
    uint64_t v16 = 0;
  }
  else
  {
    uint64_t v20 = FigMediaSegmentSpecifierGetMediaSequence(v12);
    uint64_t v16 = 4294954984;
    _StreamPlaylistLogError(4294954984, 4294954984, a3, @"Media Entry discontinuity value does not match previous playlist for MEDIA-SEQUENCE %llu", v20);
    if (!*(unsigned char *)(a3 + 41)) {
      return v16;
    }
  }
  CFArrayRef PartialSegments = (const __CFArray *)FigMediaSegmentSpecifierGetPartialSegments(v12);
  uint64_t v38 = FigMediaSegmentSpecifierGetPartialSegments(a2);
  FirstCFStringRef Value = FigCFArrayGetFirstValue();
  if (!FirstValue)
  {
    if (PartialSegments && CFArrayGetCount(PartialSegments) >= 1) {
      FigMediaSegmentSpecifierSetAreFragmentsExpired(v12, 1);
    }
    char v18 = 0;
    char v17 = 0;
    BOOL v30 = DiscontinuityDomain == v15;
    a5 = v39;
    if (v30)
    {
LABEL_40:
      if (v38) {
        FigMediaSegmentSpecifierSetPartialSegments(a2, 0);
      }
      if (!FigMediaSegmentSpecifierGetURLString(v12))
      {
        uint64_t URLString = (const void *)FigMediaSegmentSpecifierGetURLString(a2);
        FigMediaSegmentSpecifierSetURLString(v12, URLString);
      }
      TimeIndouble Seconds = FigMediaSegmentSpecifierGetTimeInSeconds(a2);
      FigMediaSegmentSpecifierSetTimeInSeconds(v12, TimeInSeconds);
      char IsMarkedAsGap = FigMediaSegmentSpecifierIsMarkedAsGap(a2);
      FigMediaSegmentSpecifierSetIsMarkedAsGap(v12, IsMarkedAsGap);
      uint64_t StartOffset = FigMediaSegmentSpecifierGetStartOffset(a2);
      FigMediaSegmentSpecifierSetStartOffset(v12, StartOffset);
      uint64_t v36 = FigMediaSegmentSpecifierGetBytesToRead(a2);
      FigMediaSegmentSpecifierSetBytesToRead(v12, v36);
      double BitRate = FigMediaSegmentSpecifierGetBitRate(a2);
      FigMediaSegmentSpecifierSetBitRate(v12, BitRate);
      char v17 = 1;
      FigMediaSegmentSpecifierSetIsReadInCurrent(v12, 1);
      FigMediaSegmentSpecifierSetChangedInCurrent(v12, 1);
      uint64_t v16 = 0;
    }
    goto LABEL_6;
  }
  uint64_t NextSegment = (void *)FirstValue;
  CFIndex v24 = 0;
  if (!PartialSegments) {
    goto LABEL_12;
  }
LABEL_11:
  for (CFIndex i = CFArrayGetCount(PartialSegments); ; CFIndex i = 0)
  {
    if (v24 >= i) {
      goto LABEL_20;
    }
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(PartialSegments, v24);
    if (!NextSegment) {
      break;
    }
    uint64_t matched = DoesMediaFileMatchEntry((uint64_t)ValueAtIndex, (uint64_t)NextSegment, &v40, a3, 1, a6);
    if (matched)
    {
      uint64_t v16 = matched;
      goto LABEL_38;
    }
    if (!v40) {
      break;
    }
    uint64_t NextSegment = (void *)FigMediaSegmentSpecifierGetNextSegment((uint64_t)NextSegment);
    uint64_t v16 = 0;
    ++v24;
    if (PartialSegments) {
      goto LABEL_11;
    }
LABEL_12:
    ;
  }
  uint64_t v16 = 4294954984;
  _StreamPlaylistLogError(4294954984, 4294954984, a3, @"The set of EXT-X-PART segments of the last entry has changed");
  if (!*(unsigned char *)(a3 + 41)) {
    return v16;
  }
LABEL_20:
  if (!NextSegment || FigMediaSegmentSpecifierIsFragment(v12))
  {
    if (!v16)
    {
      a5 = v39;
      if (NextSegment)
      {
        do
        {
          uint64_t v28 = FigMediaSegmentSpecifierGetNextSegment((uint64_t)NextSegment);
          FigMediaSegmentSpecifierAddPartialSegment(v12, NextSegment);
          uint64_t NextSegment = (void *)v28;
        }
        while (v28);
        char v18 = 1;
      }
      else
      {
        char v18 = 0;
      }
      goto LABEL_40;
    }
LABEL_38:
    char v17 = 0;
    char v18 = 0;
    a5 = v39;
    goto LABEL_6;
  }
  uint64_t v29 = FigMediaSegmentSpecifierGetURLString(v12);
  if (FigIsItOKToLogURLs()) {
    BOOL v30 = a6 == 0;
  }
  else {
    BOOL v30 = 1;
  }
  size_t v31 = @"[]";
  if (!v30) {
    size_t v31 = (__CFString *)v29;
  }
  uint64_t v16 = 4294954984;
  _StreamPlaylistLogError(4294954984, 4294954984, a3, @"New EXT-X-PART segments cannot be added after parent segment %@ appears", v31);
  if (*(unsigned char *)(a3 + 41)) {
    goto LABEL_38;
  }
  return v16;
}

uint64_t FindMatchingMediaEntry(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, int a5)
{
  for (CFIndex i = 0; ; ++i)
  {
    CFArrayRef MediaSegmentSpecifiers = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(a1);
    if (MediaSegmentSpecifiers) {
      CFArrayRef MediaSegmentSpecifiers = (const __CFArray *)CFArrayGetCount(MediaSegmentSpecifiers);
    }
    if (i >= (uint64_t)MediaSegmentSpecifiers) {
      return 0;
    }
    CFArrayRef v12 = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(a1);
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v12, i);
    char v15 = 0;
    uint64_t result = DoesMediaFileMatchEntry((uint64_t)ValueAtIndex, a2, &v15, a4, 1, a5);
    if (result) {
      return result;
    }
    if (v15) {
      break;
    }
  }
  *a3 = ValueAtIndex;
  return result;
}

uint64_t DoesMediaFileMatchEntry(uint64_t a1, uint64_t a2, unsigned char *a3, uint64_t a4, int a5, int a6)
{
  *a3 = 0;
  uint64_t MediaSequence = FigMediaSegmentSpecifierGetMediaSequence(a1);
  uint64_t v13 = 0;
  if (MediaSequence != FigMediaSegmentSpecifierGetMediaSequence(a2)) {
    return v13;
  }
  TimeIndouble Seconds = FigMediaSegmentSpecifierGetTimeInSeconds(a1);
  if (TimeInSeconds == FigMediaSegmentSpecifierGetTimeInSeconds(a2))
  {
    uint64_t v13 = 0;
    if (!a5) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v15 = FigMediaSegmentSpecifierGetMediaSequence(a1);
    double v16 = FigMediaSegmentSpecifierGetTimeInSeconds(a1);
    double v17 = FigMediaSegmentSpecifierGetTimeInSeconds(a2);
    uint64_t v40 = v15;
    uint64_t v13 = 4294954984;
    _StreamPlaylistLogError(4294954984, 4294954984, a4, @"Media Entry time value does not match previous playlist for MEDIA-SEQUENCE %llu: %f vs %f", v40, *(void *)&v16, *(void *)&v17);
    if (!*(unsigned char *)(a4 + 41)) {
      return v13;
    }
    if (!a5)
    {
LABEL_7:
      DiscontinuityCFErrorDomain Domain = FigMediaSegmentSpecifierGetDiscontinuityDomain(a1);
      if (DiscontinuityDomain != FigMediaSegmentSpecifierGetDiscontinuityDomain(a2))
      {
        uint64_t v19 = FigMediaSegmentSpecifierGetMediaSequence(a1);
        uint64_t v13 = 4294954984;
        _StreamPlaylistLogError(4294954984, 4294954984, a4, @"Media Entry discontinuity value does not match previous playlist for MEDIA-SEQUENCE %llu", v19);
        if (!*(unsigned char *)(a4 + 41)) {
          return v13;
        }
      }
    }
  }
  uint64_t StartOffset = FigMediaSegmentSpecifierGetStartOffset(a1);
  if (StartOffset == FigMediaSegmentSpecifierGetStartOffset(a2)
    || (uint64_t v21 = FigMediaSegmentSpecifierGetMediaSequence(a1),
        uint64_t v22 = FigMediaSegmentSpecifierGetStartOffset(a1),
        uint64_t v23 = FigMediaSegmentSpecifierGetStartOffset(a2),
        uint64_t v41 = v21,
        uint64_t v13 = 4294954984,
        _StreamPlaylistLogError(4294954984, 4294954984, a4, @"Media Entry start offset does not match previous playlist for MEDIA-SEQUENCE %llu: %lld vs %lld", v41, v22, v23), *(unsigned char *)(a4 + 41)))
  {
    uint64_t v24 = FigMediaSegmentSpecifierGetBytesToRead(a1);
    if (v24 == FigMediaSegmentSpecifierGetBytesToRead(a2)
      || (uint64_t v25 = FigMediaSegmentSpecifierGetMediaSequence(a1),
          uint64_t v26 = FigMediaSegmentSpecifierGetBytesToRead(a1),
          uint64_t v27 = FigMediaSegmentSpecifierGetBytesToRead(a2),
          uint64_t v42 = v25,
          uint64_t v13 = 4294954984,
          _StreamPlaylistLogError(4294954984, 4294954984, a4, @"Media Entry bytes to read does not match previous playlist for MEDIA-SEQUENCE %llu: %lld vs %lld", v42, v26, v27), *(unsigned char *)(a4 + 41)))
    {
      FigMediaSegmentSpecifierGetURLString(a1);
      FigMediaSegmentSpecifierGetURLString(a2);
      if (FigCFEqual()) {
        goto LABEL_20;
      }
      uint64_t v28 = FigMediaSegmentSpecifierGetMediaSequence(a1);
      uint64_t URLString = (__CFString *)FigMediaSegmentSpecifierGetURLString(a1);
      BOOL v30 = a6 != 0;
      if (((a6 != 0) & (FigIsItOKToLogURLs() != 0)) == 0) {
        uint64_t URLString = @"[]";
      }
      size_t v31 = (__CFString *)FigMediaSegmentSpecifierGetURLString(a2);
      CFStringRef v32 = (v30 & (FigIsItOKToLogURLs() != 0)) != 0 ? v31 : @"[]";
      uint64_t v43 = v28;
      uint64_t v13 = 4294954984;
      _StreamPlaylistLogError(4294954984, 4294954984, a4, @"Media Entry URL not match previous playlist for MEDIA-SEQUENCE %llu: %@ vs %@", v43, URLString, v32);
      if (*(unsigned char *)(a4 + 41))
      {
LABEL_20:
        int IsMarkedAsGap = FigMediaSegmentSpecifierIsMarkedAsGap(a1);
        if (IsMarkedAsGap == FigMediaSegmentSpecifierIsMarkedAsGap(a2)
          || ((uint64_t v34 = FigMediaSegmentSpecifierGetMediaSequence(a1),
               FigMediaSegmentSpecifierIsMarkedAsGap(a1))
            ? (double v35 = "YES")
            : (double v35 = "NO"),
              FigMediaSegmentSpecifierIsMarkedAsGap(a2) ? (uint64_t v36 = "YES") : (uint64_t v36 = "NO"),
              uint64_t v13 = 4294954984,
              _StreamPlaylistLogError(4294954984, 4294954984, a4, @"Media Entry gap mode not match previous playlist for MEDIA-SEQUENCE %llu: %s vs %s", v34, v35, v36), *(unsigned char *)(a4 + 41)))
        {
          FigMediaSegmentSpecifierGetContentKeySpecifier(a1);
          FigMediaSegmentSpecifierGetContentKeySpecifier(a2);
          if (FigCFEqual())
          {
            if (!v13) {
              *a3 = 1;
            }
          }
          else
          {
            uint64_t v37 = FigMediaSegmentSpecifierGetMediaSequence(a1);
            _StreamPlaylistLogError(4294954984, 4294954984, a4, @"Media Entry crypt key URL does not match previous playlist for MEDIA-SEQUENCE %llu", v37);
            os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            return 4294954984;
          }
        }
      }
    }
  }
  return v13;
}

uint64_t FigStreamPlaylistValidateMediaEntry(uint64_t a1, uint64_t a2, const void *a3)
{
  double PlaylistActiveDurationSecs = FigMediaPlaylistGetPlaylistActiveDurationSecs(a1);
  TimeIndouble Seconds = FigMediaSegmentSpecifierGetTimeInSeconds(a2);
  FigMediaPlaylistSetPlaylistActiveDurationSecs(a1, PlaylistActiveDurationSecs + TimeInSeconds);
  FigMediaSegmentSpecifierSetIsReadInCurrent(a2, 1);
  if (FigMediaSegmentSpecifierGetContentKeySpecifier(a2))
  {
    uint64_t ContentKeySpecifier = FigMediaSegmentSpecifierGetContentKeySpecifier(a2);
    FigContentKeySpecifierSetIsReadInCurrent(ContentKeySpecifier, 1);
  }
  uint64_t result = FigMediaSegmentSpecifierGetMapSegmentSpecifier(a2);
  if (result)
  {
    uint64_t MapSegmentSpecifier = FigMediaSegmentSpecifierGetMapSegmentSpecifier(a2);
    uint64_t result = FigMediaSegmentSpecifierSetIsReadInCurrent(MapSegmentSpecifier, 1);
  }
  if (a3)
  {
    FigMediaSegmentSpecifierSetChangedInCurrent(a2, 1);
    FigMediaSegmentSpecifierSetDateStamp(a2, a3);
    uint64_t v11 = FigMediaPlaylistGetDateStampCount(a1) + 1;
    return FigMediaPlaylistSetDateStampCount(a1, v11);
  }
  return result;
}

uint64_t CreateMediaFileEntry(uint64_t a1, const void *a2, int a3, const void *a4, const void *a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, uint64_t a11, const void *a12, const void *a13, char a14, char a15)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t v37 = 0;
  if (a11) {
    double v22 = (double)(8 * a11) / a9;
  }
  else {
    double v22 = 0.0;
  }
  if (a4)
  {
    FigContentKeySpecifierSetIsReadInCurrent((uint64_t)a4, 1);
    if (a12)
    {
      uint64_t v23 = (void *)CFRetain(a12);
    }
    else
    {
      *(void *)bytes = 0;
      uint64_t v39 = 0;
      uint64_t v25 = 15;
      unint64_t v26 = a6;
      do
      {
        bytes[v25] = v26;
        v26 >>= 8;
        --v25;
      }
      while (v25 != -1);
      CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
      uint64_t v23 = CFDataCreate(AllocatorForMedia, bytes, 16);
      if (!v23)
      {
        FigSignalErrorAt();
        return v37;
      }
    }
    uint64_t v24 = v23;
  }
  else
  {
    uint64_t v24 = 0;
  }
  uint64_t v28 = a8;
  if (a5)
  {
    FigMediaSegmentSpecifierSetIsDiscontinuityDomain((uint64_t)a5, a7);
    FigMediaSegmentSpecifierSetIsReadInCurrent((uint64_t)a5, 1);
    if (!FigMediaSegmentSpecifierGetIV((uint64_t)a5)) {
      FigMediaSegmentSpecifierSetIV((uint64_t)a5, v24);
    }
  }
  MediaEntryCFIndex Count = FigMediaPlaylistGetMediaEntryCount(a1);
  FigMediaPlaylistSetMediaEntryCount(a1, MediaEntryCount + 1);
  uint64_t v30 = FigGetAllocatorForMedia();
  uint64_t v31 = FigMediaPlaylistGetMediaEntryCount(a1);
  FigMediaSegmentSpecifierCreate(a9, v22, a10, v30, a2, a4, a5, a6, a7, v28, a11, v24, a13, a3, 0, a14, 1, a15, 0,
    0,
    v31,
    1,
    &v37);
  if (v24) {
    CFRelease(v24);
  }
  return v37;
}

void FigStreamPlaylistTransferPartialEntryQueue(uint64_t a1, uint64_t a2)
{
  CFArrayRef PartialSegments = (const void *)FigMediaSegmentSpecifierGetPartialSegments(a1);
  FigMediaSegmentSpecifierSetPartialSegments(a2, PartialSegments);

  FigMediaSegmentSpecifierSetPartialSegments(a1, 0);
}

const void *FindMediaSelectionOptionArrayByMediaType(const __CFArray *a1, const void *a2)
{
  if (!a1) {
    return 0;
  }
  CFIndex Count = CFArrayGetCount(a1);
  if (Count < 1) {
    return 0;
  }
  CFIndex v5 = Count;
  CFIndex v6 = 0;
  while (1)
  {
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, v6);
    CFStringRef Value = CFDictionaryGetValue(ValueAtIndex, @"MediaSelectionGroupMediaType");
    if (CFEqual(Value, a2)) {
      break;
    }
    if (v5 == ++v6) {
      return 0;
    }
  }

  return CFDictionaryGetValue(ValueAtIndex, @"MediaSelectionGroupOptions");
}

uint64_t PlaylistCheckAllAlternatesCarryScore(uint64_t result, char *a2, BOOL *a3)
{
  if (!result || (v5 = (const __CFArray *)result, uint64_t result = CFArrayGetCount((CFArrayRef)result), result < 2))
  {
    LOBYTE(v11) = 0;
    LOBYTE(v10) = 0;
    LOBYTE(v8) = 0;
    int v7 = 0;
    if (!a2) {
      goto LABEL_31;
    }
    goto LABEL_24;
  }
  if (!((unint64_t)a2 | (unint64_t)a3)) {
    return result;
  }
  uint64_t v6 = result;
  int v7 = 0;
  int v8 = 0;
  CFIndex v9 = 0;
  int v10 = 0;
  int v11 = 0;
  do
  {
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v5, v9);
    int IsIFrameOnly = FigAlternateIsIFrameOnly((uint64_t)ValueAtIndex);
    uint64_t result = FigAlternateHasRankingScore((BOOL)ValueAtIndex);
    if (result) {
      int v14 = v8;
    }
    else {
      int v14 = 1;
    }
    if (result) {
      int v15 = 1;
    }
    else {
      int v15 = v7;
    }
    if (result) {
      int v16 = 1;
    }
    else {
      int v16 = v11;
    }
    if (result) {
      int v17 = v10;
    }
    else {
      int v17 = 1;
    }
    if (IsIFrameOnly)
    {
      int v11 = v16;
      int v10 = v17;
    }
    else
    {
      int v8 = v14;
    }
    if (!IsIFrameOnly) {
      int v7 = v15;
    }
    ++v9;
  }
  while (v6 != v9);
  if (a2)
  {
LABEL_24:
    if ((_BYTE)v8) {
      BOOL v18 = v7 == 0;
    }
    else {
      BOOL v18 = 1;
    }
    char v19 = !v18;
    *a2 = v19;
  }
LABEL_31:
  if (a3)
  {
    BOOL v20 = v11 != 0;
    if (!(_BYTE)v10) {
      BOOL v20 = 0;
    }
    *a3 = v20;
  }
  return result;
}

uint64_t FigStreamPlaylistParse(OpaqueCMBlockBuffer *a1, const __CFURL *a2, const __CFURL *a3, _DWORD *a4, int a5, int a6, int a7, int a8, CFMutableArrayRef *a9, uint64_t a10, const __CFDictionary *a11, const __CFDictionary *a12, uint64_t *a13, CFTypeRef *a14)
{
  if (_os_feature_enabled_impl())
  {
    return FigStreamPlaylistParseRemote((uint64_t)a1, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)a11, (uint64_t)a12, a13, a14);
  }
  else
  {
    return FigStreamPlaylistParseInProcess(a1, a2, a3, a4, a5, a6, 0, a8, (uint64_t)a9, a10, a11, a12, (CFTypeRef *)a13, a14);
  }
}

void FigStreamPlaylistPredictMediaSequenceAndPartForAdvance(uint64_t a1, uint64_t *a2, CFIndex *a3, double a4)
{
  if (FigMediaPlaylistGetMaxSegmentDuration(a1) <= 0.0) {
    double TargetDuration = (double)FigMediaPlaylistGetTargetDuration(a1);
  }
  else {
    double TargetDuration = FigMediaPlaylistGetMaxSegmentDuration(a1);
  }
  FigMediaPlaylistGetMediaSegmentSpecifiers(a1);
  LastCFStringRef Value = FigCFArrayGetLastValue();
  uint64_t v10 = LastValue;
  if (LastValue)
  {
    FigMediaSegmentSpecifierGetPartialSegments(LastValue);
    uint64_t v11 = FigCFArrayGetLastValue();
    uint64_t MediaSequence = FigMediaSegmentSpecifierGetMediaSequence(v10);
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t MediaSequence = 0;
  }
  int v13 = (int)(ceil(TargetDuration / FigMediaPlaylistGetPartTargetDuration(a1)) + -1.0);
  double v14 = 0.0;
  CFIndex v15 = 0;
  if (v11)
  {
    double v16 = TargetDuration;
    while (1)
    {
      CFArrayRef PartialSegments = (const __CFArray *)FigMediaSegmentSpecifierGetPartialSegments(v10);
      if (PartialSegments) {
        CFArrayRef PartialSegments = (const __CFArray *)CFArrayGetCount(PartialSegments);
      }
      if (v15 >= (uint64_t)PartialSegments) {
        break;
      }
      CFArrayRef v18 = (const __CFArray *)FigMediaSegmentSpecifierGetPartialSegments(v10);
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v18, v15);
      double v16 = v16 - FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)ValueAtIndex);
      if (ValueAtIndex == (const void *)v11) {
        break;
      }
      ++v15;
    }
    if (v16 < a4 && vabdd_f64(a4, v16) >= 0.001)
    {
      CFIndex v15 = v13;
      if (FigMediaSegmentSpecifierIsFragment(v10)) {
        double v14 = v16;
      }
      else {
        double v14 = 0.0;
      }
    }
  }
  while (TargetDuration + v14 < a4 || vabdd_f64(TargetDuration + v14, a4) < 0.001)
  {
    ++MediaSequence;
    double v14 = TargetDuration + v14;
    CFIndex v15 = v13;
  }
  while (v14 <= a4 && vabdd_f64(v14, a4) >= 0.001)
  {
    if (v15 == v13)
    {
      ++MediaSequence;
      CFIndex v15 = 0;
    }
    else
    {
      ++v15;
    }
    double v14 = v14 + FigMediaPlaylistGetPartTargetDuration(a1);
  }
  *a2 = MediaSequence;
  *a3 = v15;
}

BOOL FigStreamPlaylistParserHTTPServerMayMutatePlaylist(uint64_t a1)
{
  if (!FigMediaPlaylistHasEndTag(a1)) {
    return 1;
  }
  CFArrayRef MediaSegmentSpecifiers = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(a1);
  if (!MediaSegmentSpecifiers || !CFArrayGetCount(MediaSegmentSpecifiers)) {
    return 1;
  }
  if (FigMediaPlaylistGetPlaylistType(a1) == 2) {
    return 0;
  }
  return FigMediaPlaylistGetPlaylistType(a1) != 1;
}

const char *sp_SkipSpacesTabsAndCommas(const char *a1, uint64_t a2, int a3)
{
  int v6 = 0;
  while (1)
  {
    unsigned int v7 = *(unsigned __int8 *)a1;
    if (v7 > 0x2C) {
      goto LABEL_12;
    }
    if (((1 << v7) & 0x100100000200) == 0) {
      break;
    }
    int v8 = StreamingPlaylist_SkipSpacesAndTabs(a1, a2);
    a1 = v8;
    if (*v8 == 44)
    {
      ++v6;
      a1 = StreamingPlaylist_SkipSpacesAndTabs(v8 + 1, a2);
    }
  }
  if (((1 << v7) & 0x2401) != 0)
  {
LABEL_7:
    if (v6)
    {
      if (v6 == 1) {
        _StreamPlaylistLogError(4294954654, 4294955032, a2, @"Misplaced comma");
      }
      else {
        _StreamPlaylistLogError(4294954654, 4294955032, a2, @"Multiple misplaced comma");
      }
    }
    return a1;
  }
LABEL_12:
  if (!a3) {
    goto LABEL_7;
  }
  if (v6)
  {
    if (v6 != 1) {
      _StreamPlaylistLogError(4294954654, 4294955032, a2, @"Multiple commas found");
    }
  }
  else
  {
    _StreamPlaylistLogError(4294954654, 4294955032, a2, @"Expected a comma but not found");
  }
  return a1;
}

BOOL sp_MatchAttributeName(uint64_t a1, int a2, void *a3, void *a4)
{
  for (uint64_t i = 0; ; ++i)
  {
    int v5 = *(unsigned __int8 *)(a1 + i);
    BOOL v6 = (v5 - 65) >= 0x1A && (v5 - 48) >= 0xA;
    if (v6 && v5 != 45 && v5 != 95 && (!a2 || (v5 - 97) > 0x19)) {
      break;
    }
    if (!i) {
      *a3 = a1;
    }
  }
  *a4 = i;
  if (i) {
    BOOL v7 = *a3 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  return !v7;
}

uint64_t PlaylistTokenizeString(char *a1, size_t a2, uint64_t a3, unsigned __int8 a4, __CFArray **a5)
{
  CFAllocatorRef alloc = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (Mutable)
  {
    if (a2)
    {
      uint64_t v9 = MEMORY[0x1E4F14390];
      do
      {
        while (1)
        {
          unsigned int v10 = *a1;
          int v11 = (v10 & 0x80000000) != 0 ? __maskrune(*a1, 0x4000uLL) : *(_DWORD *)(v9 + 4 * v10 + 60) & 0x4000;
          if (v10 == a4 || v11 == 0) {
            break;
          }
          ++a1;
          if (!--a2) {
            goto LABEL_37;
          }
        }
        int v13 = memchr(a1, a4, a2);
        double v14 = v13;
        if (v13) {
          size_t v15 = v13 - a1;
        }
        else {
          size_t v15 = a2;
        }
        if (v15)
        {
          size_t v16 = v15 - 1;
          do
          {
            int v17 = &a1[v16];
            unsigned int v18 = a1[v16];
            if ((v18 & 0x80000000) != 0) {
              int v19 = __maskrune(a1[v16], 0x4000uLL);
            }
            else {
              int v19 = *(_DWORD *)(v9 + 4 * v18 + 60) & 0x4000;
            }
            --v16;
          }
          while (v18 != a4 && v19 != 0 && v17 > a1);
          if (v16 != -2)
          {
            CFStringRef v22 = CFStringCreateWithBytes(alloc, (const UInt8 *)a1, v16 + 2, 0x600u, 0);
            if (!v22) {
              goto LABEL_43;
            }
            CFStringRef v23 = v22;
            CFArrayAppendValue(Mutable, v22);
            CFRelease(v23);
          }
        }
        if (v14) {
          a1 += v15 + 1;
        }
        else {
          a1 += v15;
        }
        if (!v14) {
          break;
        }
        a2 += ~v15;
      }
      while (a2);
    }
LABEL_37:
    if (CFArrayGetCount(Mutable)) {
      goto LABEL_38;
    }
    uint64_t v24 = 4294955032;
    _StreamPlaylistLogError(4294955032, 4294955032, a3, @"empty tokens field");
  }
  else
  {
LABEL_43:
    uint64_t v24 = FigSignalErrorAt();
    if (!v24)
    {
LABEL_38:
      uint64_t v24 = 0;
      *a5 = Mutable;
      return v24;
    }
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v24;
}

uint64_t sp_strtohex(unsigned char *a1, unint64_t a2, CFDataRef *a3, uint64_t a4, uint64_t a5)
{
  __int16 v21 = 0;
  if (a2 < 3)
  {
    CFStringRef v20 = @"%s:No value in hexadecimal-integer";
    goto LABEL_19;
  }
  if (*a1 != 48 || __tolower((char)a1[1]) != 120)
  {
    CFStringRef v20 = @"%s:Illegal start to hexadecimal-integer";
LABEL_19:
    uint64_t v18 = 4294954654;
    _StreamPlaylistLogError(4294954654, 4294955032, a5, v20, a4);
    unsigned int v10 = 0;
    goto LABEL_14;
  }
  unsigned int v10 = malloc_type_malloc((a2 - 1) >> 1, 0x648FB65FuLL);
  if (!v10)
  {
LABEL_13:
    uint64_t v18 = FigSignalErrorAt();
    if (!v18) {
      return v18;
    }
LABEL_14:
    free(v10);
    return v18;
  }
  uint64_t v11 = 0;
  CFArrayRef v12 = a1 + 2;
  BOOL v13 = (a2 & 1) == 0;
  do
  {
    if (v13)
    {
      uint64_t v14 = sp_chartohex(*v12, a4, a5, &v21);
      if (v14) {
        goto LABEL_16;
      }
      ++v12;
    }
    uint64_t v14 = sp_chartohex(*v12, a4, a5, (unsigned char *)&v21 + 1);
    if (v14)
    {
LABEL_16:
      uint64_t v18 = v14;
      goto LABEL_14;
    }
    ++v12;
    *((unsigned char *)v10 + v11++) = HIBYTE(v21) | (16 * v21);
    BOOL v13 = 1;
  }
  while ((a2 - 1) >> 1 != v11);
  CFAllocatorRef v15 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  GlobalCFAllocatorFigMCFAllocatorRef alloc = (const __CFAllocator *)FigGetGlobalCFAllocatorFigMalloc();
  CFDataRef v17 = CFDataCreateWithBytesNoCopy(v15, (const UInt8 *)v10, (a2 - 1) >> 1, GlobalCFAllocatorFigMalloc);
  *a3 = v17;
  if (!v17) {
    goto LABEL_13;
  }
  return 0;
}

void TaggedRangeUniquenessApplier(const void *a1, const void *a2, uint64_t a3)
{
  if (!*(_DWORD *)(a3 + 24))
  {
    CFDictionaryRef MetadataDict = (const __CFDictionary *)FigDateRangeSpecifierGetMetadataDict(*(void *)a3);
    CFStringRef Value = CFDictionaryGetValue(MetadataDict, a1);
    if (Value)
    {
      if (!CFEqual(Value, a2))
      {
        _StreamPlaylistLogError(4294954654, 4294955031, *(void *)(a3 + 8), @"metadata entry doesn't match");
        *(_DWORD *)(a3 + 24) = -12642;
      }
    }
    else
    {
      FigDateRangeSpecifierSetValueForMetadataDict(*(void *)a3, a1, a2);
      FigDateRangeSpecifierSetValueForTagsFirstFoundDateDict(*(void *)a3, a1, *(const void **)(a3 + 16));
      *(unsigned char *)(a3 + 28) = 1;
    }
  }
}

uint64_t sp_chartohex(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  if ((a1 & 0x80000000) == 0
    && (int v4 = *(_DWORD *)(MEMORY[0x1E4F14390] + 4 * a1 + 60), (v4 & 0x10000) != 0))
  {
    if ((v4 & 0x100) != 0) {
      char v7 = __tolower(a1) - 87;
    }
    else {
      char v7 = a1 - 48;
    }
    uint64_t v5 = 0;
    *a4 = v7;
  }
  else
  {
    uint64_t v5 = 4294954654;
    _StreamPlaylistLogError(4294954654, 4294955032, a3, @"%s:Illegal hexadecimal digit %c", a2, a1);
  }
  return v5;
}

uint64_t PlaylistAddTaggedRangeMetadataDictionaryToArray(__CFArray *a1, const void *a2, const void *a3, const void *a4, const void *a5)
{
  if (!a2 || !a3) {
    return 0;
  }
  if (a5)
  {
    CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      uint64_t v11 = Mutable;
      CFDictionaryAddValue(Mutable, @"key", a2);
      CFDictionaryAddValue(v11, @"value", a3);
      CFDictionaryAddValue(v11, @"keyspace", (const void *)*MEMORY[0x1E4F1F178]);
      CFDictionaryAddValue(v11, @"dataTypeNamespace", @"com.apple.coremedia");
      CFDictionaryAddValue(v11, @"dataType", a4);
      CFDictionaryAddValue(v11, @"discoveryTimestamp", a5);
      CFArrayAppendValue(a1, v11);
      CFRelease(v11);
      return 0;
    }
  }

  return FigSignalErrorAt();
}

const void *TaggedRangeTagApplier(const void *result, CFTypeRef cf, uint64_t a3)
{
  if (!*(_DWORD *)(a3 + 16))
  {
    uint64_t v5 = result;
    CFTypeID v6 = CFGetTypeID(cf);
    if (v6 == CFStringGetTypeID())
    {
      char v7 = (const void **)MEMORY[0x1E4F1F078];
    }
    else
    {
      CFTypeID TypeID = CFNumberGetTypeID();
      char v7 = (const void **)MEMORY[0x1E4F1F020];
      if (v6 == TypeID) {
        char v7 = (const void **)MEMORY[0x1E4F1EFD8];
      }
    }
    uint64_t v9 = *v7;
    CFDictionaryRef TagsFirstFoundDateDict = (const __CFDictionary *)FigDateRangeSpecifierGetTagsFirstFoundDateDict(*(void *)(a3 + 8));
    CFStringRef Value = CFDictionaryGetValue(TagsFirstFoundDateDict, v5);
    uint64_t result = (const void *)PlaylistAddTaggedRangeMetadataDictionaryToArray(*(__CFArray **)a3, v5, cf, v9, Value);
    *(_DWORD *)(a3 + 16) = result;
  }
  return result;
}

uint64_t FigTTMLSerializerCreateIndenter(uint64_t a1, const void *a2, void *a3)
{
  if (a2)
  {
    if (a3)
    {
      FigTTMLSerializerGetClassID();
      uint64_t v5 = CMDerivedObjectCreate();
      if (v5) {
        return v5;
      }
      CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
      if (Mutable)
      {
        CFMutableArrayRef v7 = Mutable;
        FigBytePumpGetFigBaseObject(0);
        uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
        uint64_t v9 = 0;
        *uint64_t DerivedStorage = CFRetain(a2);
        DerivedStorage[1] = v7;
        DerivedStorage[2] = 0;
        *a3 = 0;
        return v9;
      }
    }
    return FigSignalErrorAt();
  }

  return FigSignalErrorAt();
}

uint64_t figTTMLSerializerIndenter_Invalidate()
{
  return 0;
}

void figTTMLSerializerIndenter_Finalize(uint64_t a1)
{
  FigBytePumpGetFigBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFArrayRef v2 = *(const void **)(DerivedStorage + 8);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(const void **)DerivedStorage;
  if (*(void *)DerivedStorage)
  {
    CFRelease(v3);
  }
}

CFStringRef figTTMLSerializerIndenter_CopyDebugDesc(uint64_t a1)
{
  FigBytePumpGetFigBaseObject(a1);
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"FigTTMLSerializerIndenter: %@", *DerivedStorage);
}

uint64_t figTTMLSerializerIndenter_StartElement(uint64_t a1, const __CFString *a2)
{
  FigBytePumpGetFigBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (startTagUsesIndentation(a2))
  {
    if (*(void *)(DerivedStorage + 16))
    {
      uint64_t v5 = FigTTMLSerializerAddText(a1, @"\n");
      if (v5) {
        return v5;
      }
      uint64_t v6 = *(void *)(DerivedStorage + 16);
    }
    else
    {
      uint64_t v6 = 0;
    }
    Indentatiouint64_t n = createIndentation(v6);
    uint64_t v8 = FigTTMLSerializerAddText(a1, (uint64_t)Indentation);
    if (v8)
    {
      uint64_t started = v8;
      if (!Indentation) {
        return started;
      }
      goto LABEL_12;
    }
    ++*(void *)(DerivedStorage + 16);
  }
  else
  {
    Indentatiouint64_t n = 0;
  }
  uint64_t started = FigTTMLSerializerStartElement(*(void *)DerivedStorage, (uint64_t)a2);
  if (!started)
  {
    CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 8), a2);
    *(unsigned char *)(DerivedStorage + 24) = 1;
  }
  if (Indentation) {
LABEL_12:
  }
    CFRelease(Indentation);
  return started;
}

uint64_t figTTMLSerializerIndenter_SetAttribute(uint64_t a1, uint64_t a2, uint64_t a3)
{
  FigBytePumpGetFigBaseObject(a1);
  uint64_t v5 = *(void *)CMBaseObjectGetDerivedStorage();

  return FigTTMLSerializerSetAttribute(v5, a2, a3);
}

uint64_t figTTMLSerializerIndenter_EndElement(uint64_t a1)
{
  FigBytePumpGetFigBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 8)))
  {
    CFArrayRef v3 = *(const __CFArray **)(DerivedStorage + 8);
    CFIndex Count = CFArrayGetCount(v3);
    CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v3, Count - 1);
    if (startTagUsesIndentation(ValueAtIndex)) {
      --*(void *)(DerivedStorage + 16);
    }
    CFTypeRef cf1 = 0;
    int v6 = copyElementLocalName(ValueAtIndex, &cf1);
    CFTypeRef v7 = cf1;
    if (!v6
      && (CFEqual(cf1, @"span")
       || CFEqual(v7, @"br")
       || CFEqual(v7, @"extension")
       || CFEqual(v7, @"p")))
    {
      char v8 = 1;
      if (!v7)
      {
LABEL_11:
        if ((v8 & 1) != 0 || *(unsigned char *)(DerivedStorage + 24))
        {
          Indentatiouint64_t n = 0;
        }
        else
        {
          uint64_t v14 = FigTTMLSerializerAddText(a1, @"\n");
          if (v14) {
            return v14;
          }
          Indentatiouint64_t n = createIndentation(*(void *)(DerivedStorage + 16));
          uint64_t v15 = FigTTMLSerializerAddText(a1, (uint64_t)Indentation);
          if (v15)
          {
            uint64_t v10 = v15;
            if (!Indentation) {
              return v10;
            }
            goto LABEL_17;
          }
        }
        uint64_t v10 = FigTTMLSerializerEndElement(*(void *)DerivedStorage);
        if (!v10)
        {
          CFArrayRef v11 = *(const __CFArray **)(DerivedStorage + 8);
          CFIndex v12 = CFArrayGetCount(v11);
          CFArrayRemoveValueAtIndex(v11, v12 - 1);
          *(unsigned char *)(DerivedStorage + 24) = 0;
        }
        if (!Indentation) {
          return v10;
        }
LABEL_17:
        CFRelease(Indentation);
        return v10;
      }
    }
    else
    {
      char v8 = 0;
      if (!v7) {
        goto LABEL_11;
      }
    }
    CFRelease(v7);
    goto LABEL_11;
  }

  return FigSignalErrorAt();
}

uint64_t figTTMLSerializerIndenter_AddText(uint64_t a1, uint64_t a2)
{
  FigBytePumpGetFigBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = FigTTMLSerializerAddText(*(void *)DerivedStorage, a2);
  if (!result) {
    *(unsigned char *)(DerivedStorage + 24) = 0;
  }
  return result;
}

uint64_t figTTMLSerializerIndenter_Flush(uint64_t a1)
{
  FigBytePumpGetFigBaseObject(a1);
  uint64_t v1 = *(void *)CMBaseObjectGetDerivedStorage();

  return FigTTMLSerializerFlush(v1);
}

uint64_t startTagUsesIndentation(const __CFString *a1)
{
  CFTypeRef cf1 = 0;
  int v1 = copyElementLocalName(a1, &cf1);
  CFTypeRef v2 = cf1;
  if (v1 || !CFEqual(cf1, @"span") && !CFEqual(v2, @"br"))
  {
    uint64_t v3 = 1;
    if (!v2) {
      return v3;
    }
    goto LABEL_5;
  }
  uint64_t v3 = 0;
  if (v2) {
LABEL_5:
  }
    CFRelease(v2);
  return v3;
}

__CFString *createIndentation(uint64_t a1)
{
  uint64_t v2 = 2 * a1;
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 2 * a1);
  if (Mutable)
  {
    if (a1)
    {
      do
      {
        CFStringAppend(Mutable, @" ");
        --v2;
      }
      while (v2);
    }
  }
  else
  {
    FigSignalErrorAt();
  }
  return Mutable;
}

uint64_t copyElementLocalName(CFStringRef theString, void *a2)
{
  CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings((CFAllocatorRef)*MEMORY[0x1E4F1CF80], theString, @":");
  if (ArrayBySeparatingStrings)
  {
    CFArrayRef v4 = ArrayBySeparatingStrings;
    if (CFArrayGetCount(ArrayBySeparatingStrings) < 1 || CFArrayGetCount(v4) >= 3)
    {
      uint64_t v9 = FigSignalErrorAt();
      goto LABEL_15;
    }
    if (CFArrayGetCount(v4) == 1)
    {
      CFIndex v5 = 0;
    }
    else
    {
      if (CFArrayGetCount(v4) != 2)
      {
        char v8 = 0;
LABEL_14:
        uint64_t v9 = 0;
        *a2 = v8;
LABEL_15:
        CFRelease(v4);
        return v9;
      }
      CFIndex v5 = 1;
    }
    CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v4, v5);
    char v8 = ValueAtIndex;
    if (ValueAtIndex) {
      CFRetain(ValueAtIndex);
    }
    goto LABEL_14;
  }

  return FigSignalErrorAt();
}

uint64_t FigRenderPipelineCreateForBufferQueue(uint64_t a1, const void *a2, const __CFDictionary *a3, CFTypeRef *a4)
{
  CFTypeRef cf = 0;
  if (a4 && a2)
  {
    FigRenderPipelineGetClassID();
    uint64_t v7 = CMDerivedObjectCreate();
    if (!v7)
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      CFRetain(a2);
      *(void *)(DerivedStorage + 8) = a2;
      if (a3)
      {
        CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a3, @"PipelineLatency");
        if (Value)
        {
          Float64 valuePtr = 0.0;
          CFNumberGetValue(Value, kCFNumberDoubleType, &valuePtr);
          CMTimeMakeWithSeconds(&v12, valuePtr, 1000);
          CMTimeEpoch epoch = v12.epoch;
          *(_OWORD *)(DerivedStorage + 16) = *(_OWORD *)&v12.value;
          *(void *)(DerivedStorage + 32) = epoch;
        }
      }
      uint64_t v7 = 0;
      *a4 = cf;
    }
    return v7;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t figRenderPipelineForBufferQueueInvalidate()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    if (!*(unsigned char *)DerivedStorage)
    {
      *(unsigned char *)uint64_t DerivedStorage = 1;
      int v1 = *(const void **)(DerivedStorage + 8);
      if (v1) {
        CFRelease(v1);
      }
    }
  }
  return 0;
}

__CFString *figRenderPipelineForBufferQueueCopyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<FigRenderPipelineForBufferQueue %p: ", a1);
  CFStringAppendFormat(Mutable, 0, @"bufferQueue %@", *(void *)(DerivedStorage + 8));
  CFStringAppendFormat(Mutable, 0, @">");
  return Mutable;
}

uint64_t figRenderPipelineForBufferQueueCopyProperty(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    uint64_t v7 = DerivedStorage;
    if (!*DerivedStorage)
    {
      if (CFEqual(@"SourceSampleBufferQueue", a2))
      {
        uint64_t v9 = (const void *)*((void *)v7 + 1);
        if (!v9)
        {
          CFArrayRef v11 = 0;
LABEL_16:
          uint64_t result = 0;
          *a4 = v11;
          return result;
        }
        uint64_t v10 = (void *)CFRetain(v9);
      }
      else
      {
        if (!CFEqual(a2, @"PipelineLatency")) {
          return 4294954446;
        }
        if ((v7[28] & 1) == 0)
        {
          uint64_t result = 0;
          *a4 = 0;
          return result;
        }
        CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        CMTime v13 = *(CMTime *)(v7 + 16);
        uint64_t v10 = CMTimeCopyAsDictionary(&v13, v12);
      }
      CFArrayRef v11 = v10;
      goto LABEL_16;
    }
  }

  return FigSignalErrorAt();
}

uint64_t figRenderPipelineForBufferQueueSetProperty()
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (DerivedStorage && !*DerivedStorage) {
    return 4294954446;
  }

  return FigSignalErrorAt();
}

uint64_t RegisterFigOVCGLObjectCacheWrapperType()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sFigOVCGLObjectCacheWrapperCFTypeID TypeID = result;
  return result;
}

uint64_t FigOVCGLObjectCacheWrapperCreate(const __CFAllocator *a1, uint64_t a2, void *a3)
{
  if (a2
    && a3
    && (MEMORY[0x19970EE10](&sRegisterFigOVCGLObjectCacheWrapperTypeOnce, RegisterFigOVCGLObjectCacheWrapperType),
        (uint64_t Instance = _CFRuntimeCreateInstance()) != 0))
  {
    uint64_t v7 = (void *)Instance;
    *(void *)(Instance + 32) = a2;
    uint64_t v8 = FigSimpleMutexCreate();
    v7[3] = v8;
    if (v8
      && (CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a1, 0, 0, 0), (v7[5] = Mutable) != 0)
      && (CFMutableArrayRef v10 = CFArrayCreateMutable(a1, 0, 0), (v7[6] = v10) != 0))
    {
      *a3 = v7;
      return 0;
    }
    else
    {
      uint64_t v12 = FigSignalErrorAt();
      CFRelease(v7);
      return v12;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigOVCGLObjectCacheWrapperInvalidate(uint64_t a1)
{
  if (a1)
  {
    MEMORY[0x19970E910](*(void *)(a1 + 24));
    if (!*(unsigned char *)(a1 + 16))
    {
      *(unsigned char *)(a1 + 16) = 1;
      *(void *)(a1 + 32) = 0;
      uint64_t v3 = *(const void **)(a1 + 48);
      if (v3)
      {
        CFRelease(v3);
        *(void *)(a1 + 48) = 0;
      }
      CFArrayRef v4 = *(const void **)(a1 + 40);
      if (v4)
      {
        CFRelease(v4);
        *(void *)(a1 + 40) = 0;
      }
    }
    JUMPOUT(0x19970E930);
  }
  return FigSignalErrorAt();
}

uint64_t FigOVCGLObjectCacheWrapperFlushCacheEntriesForDeletedBackings(uint64_t a1)
{
  if (a1)
  {
    MEMORY[0x19970E910](*(void *)(a1 + 24));
    if (*(unsigned char *)(a1 + 16))
    {
      uint64_t v4 = FigSignalErrorAt();
    }
    else
    {
      CFArrayRef v3 = *(const __CFArray **)(a1 + 48);
      v6.length = CFArrayGetCount(v3);
      v6.locatiouint64_t n = 0;
      CFArrayApplyFunction(v3, v6, (CFArrayApplierFunction)glObjectCacheWrapper_flushSurfaceFromGLObjectCache, *(void **)(a1 + 32));
      CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 48));
      uint64_t v4 = 0;
    }
    MEMORY[0x19970E930](*(void *)(a1 + 24));
    return v4;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t glObjectCacheWrapper_flushSurfaceFromGLObjectCache(int a1, unint64_t *a2)
{
  return OVCGLObjectCacheFlushObjectsForSurface(a2, a1);
}

uint64_t FigOVCGLObjectCacheWrapperGetObjectForPixelBufferAndPlane(uint64_t a1, CVPixelBufferRef pixelBuffer, uint64_t a3, int a4, _DWORD *a5, BOOL *a6)
{
  if (a1)
  {
    if (pixelBuffer)
    {
      IOSurface = CVPixelBufferGetIOSurface(pixelBuffer);
      if (IOSurface)
      {
        IOSurfaceID ID = IOSurfaceGetID(IOSurface);
        BufferBacking = (const void *)CVPixelBufferGetBufferBacking();
        MEMORY[0x19970E910](*(void *)(a1 + 24));
        if (*(unsigned char *)(a1 + 16))
        {
          uint64_t ObjectForSurfaceAndPlane = FigSignalErrorAt();
        }
        else
        {
          uint64_t ObjectForSurfaceAndPlane = OVCGLObjectCacheGetObjectForSurfaceAndPlane(*(unint64_t **)(a1 + 32), ID, a3, a4, a5, a6);
          if (!ObjectForSurfaceAndPlane)
          {
            if (CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 40), BufferBacking, 0))
            {
              MEMORY[0x19970E930](*(void *)(a1 + 24));
            }
            else
            {
              CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 40), BufferBacking, (const void *)ID);
              MEMORY[0x19970E930](*(void *)(a1 + 24));
              uint64_t v15 = (const void *)FigCFWeakReferenceHolderCreateWithReferencedObject();
              LocalCenter = CFNotificationCenterGetLocalCenter();
              CFNotificationCenterAddObserver(LocalCenter, v15, (CFNotificationCallback)glObjectCacheWrapper_deregisterPixelBufferBackingThatWillBeDeleted, (CFStringRef)*MEMORY[0x1E4F24978], BufferBacking, CFNotificationSuspensionBehaviorDeliverImmediately);
            }
            return 0;
          }
        }
        uint64_t v17 = ObjectForSurfaceAndPlane;
        MEMORY[0x19970E930](*(void *)(a1 + 24));
        return v17;
      }
    }
  }

  return FigSignalErrorAt();
}

void glObjectCacheWrapper_deregisterPixelBufferBackingThatWillBeDeleted(uint64_t a1, const void *a2, const __CFString *a3, const void *a4)
{
  uint64_t v7 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v7)
  {
    LocalCenter = CFNotificationCenterGetLocalCenter();
    CFNotificationCenterRemoveObserver(LocalCenter, a2, a3, a4);
    if (!a2) {
      return;
    }
    goto LABEL_8;
  }
  uint64_t v8 = v7;
  MEMORY[0x19970E910](*(void *)(v7 + 24));
  if (!*(unsigned char *)(v8 + 16))
  {
    CMTimeValue value = 0;
    if (CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(v8 + 40), a4, (const void **)&value))
    {
      uint64_t v9 = *(__CFArray **)(v8 + 48);
      if (v9) {
        CFArrayAppendValue(v9, (const void *)value);
      }
    }
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v8 + 40), a4);
  }
  MEMORY[0x19970E930](*(void *)(v8 + 24));
  CFMutableArrayRef v10 = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterRemoveObserver(v10, a2, a3, a4);
  CFRelease((CFTypeRef)v8);
  if (a2) {
LABEL_8:
  }
    CFRelease(a2);
}

uint64_t glObjectCacheWrapper_Finalize(uint64_t a1)
{
  FigOVCGLObjectCacheWrapperInvalidate(a1);
  uint64_t result = *(void *)(a1 + 24);
  if (result)
  {
    uint64_t result = FigSimpleMutexDestroy();
    *(void *)(a1 + 24) = 0;
  }
  return result;
}

CFStringRef glObjectCacheWrapper_CopyFormattingDesc(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v1 = " (invalidated)";
  }
  else {
    uint64_t v1 = "";
  }
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigOVCGLObjectCacheWrapper %p%s]", a1, v1);
}

__CFString *glObjectCacheWrapper_CopyDebugDesc(uint64_t a1)
{
  CFAllocatorRef v2 = CFGetAllocator((CFTypeRef)a1);
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(v2, 0);
  CFIndex v4 = CFGetRetainCount((CFTypeRef)a1);
  int v5 = *(unsigned __int8 *)(a1 + 16);
  CFAllocatorRef v6 = CFGetAllocator((CFTypeRef)a1);
  CFDictionaryRef Count = *(const __CFDictionary **)(a1 + 40);
  if (Count) {
    CFDictionaryRef Count = (const __CFDictionary *)CFDictionaryGetCount(Count);
  }
  uint64_t v8 = " (invalidated)";
  if (!v5) {
    uint64_t v8 = "";
  }
  CFStringAppendFormat(Mutable, 0, @"<FigOVCGLObjectCacheWrapper %p retainCount: %d%s allocator: %p, tracking %d buffers>", a1, v4, v8, v6, Count);
  return Mutable;
}

double FigPlayerResourceArbiterPlayerSpecifierGetDisplaySize(uint64_t a1)
{
  return *(double *)(a1 + 24);
}

uint64_t FigPlayerResourceArbiterPlayerSpecifierGetIsMuted(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 72);
}

uint64_t FigPlayerResourceArbiterPlayerSpecifierGetIsFullyActive(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 88);
}

double FigPlayerResourceArbiterPlayerSpecifierGetResolutionCeiling(uint64_t a1)
{
  return *(double *)(a1 + 40);
}

uint64_t FigPlayerResourceArbiterPlayerSpecifierGetPlayerRole(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

double FigPlayerResourceArbiterPlayerSpecifierGetResolutionFloor(uint64_t a1)
{
  return *(double *)(a1 + 56);
}

uint64_t FigPlayerResourceArbiterPlayerSpecifierSetDisplaySize(uint64_t a1, double a2, double a3)
{
  if (!*(unsigned char *)(a1 + 16)) {
    return FigSignalErrorAt();
  }
  *(double *)(a1 + 24) = a2;
  *(double *)(a1 + 32) = a3;
  return 0;
}

uint64_t FigPlayerResourceArbiterPlayerSpecifierSetIsMuted(uint64_t a1, char a2)
{
  if (!*(unsigned char *)(a1 + 16)) {
    return FigSignalErrorAt();
  }
  *(unsigned char *)(a1 + 72) = a2;
  return 0;
}

uint64_t FigPlayerResourceArbiterPlayerSpecifierSetIsFullyActive(uint64_t a1, char a2)
{
  if (!*(unsigned char *)(a1 + 16)) {
    return FigSignalErrorAt();
  }
  *(unsigned char *)(a1 + 88) = a2;
  return 0;
}

uint64_t FigPlayerResourceArbiterPlayerSpecifierSetResolutionCeiling(uint64_t a1, double a2, double a3)
{
  if (!*(unsigned char *)(a1 + 16)) {
    return FigSignalErrorAt();
  }
  *(double *)(a1 + 40) = a2;
  *(double *)(a1 + 48) = a3;
  return 0;
}

uint64_t FigPlayerResourceArbiterPlayerSpecifierSetPlayerRole(uint64_t a1, CFTypeRef cf)
{
  if (*(unsigned char *)(a1 + 16))
  {
    CFAllocatorRef v2 = *(const void **)(a1 + 80);
    *(void *)(a1 + 80) = cf;
    if (cf) {
      CFRetain(cf);
    }
    if (v2) {
      CFRelease(v2);
    }
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigPlayerResourceArbiterPlayerSpecifierSetResolutionFloor(uint64_t a1, double a2, double a3)
{
  if (!*(unsigned char *)(a1 + 16)) {
    return FigSignalErrorAt();
  }
  *(double *)(a1 + 56) = a2;
  *(double *)(a1 + 64) = a3;
  return 0;
}

uint64_t FigPlayerResourceArbiterPlayerSpecifierMarkAsImmutable(uint64_t a1)
{
  *(unsigned char *)(a1 + 16) = 0;
  return 0;
}

uint64_t FigPlayerResourceArbiterPlayerSpecifierCreate(uint64_t *a1)
{
  if (a1
    && (FigGetAllocatorForMedia(),
        MEMORY[0x19970EE10](&FigPlayerResourceArbiterPlayerSpecifierGetTypeID_sFigPlayerResourceArbiterRegisterOnce, FigPlayerResourceArbiter_initOnce), (uint64_t Instance = _CFRuntimeCreateInstance()) != 0))
  {
    *(unsigned char *)(Instance + 16) = 1;
    *a1 = Instance;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigPlayerResourceArbiter_initOnce()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sFigPlayerResourceArbiterPlayerSpecifierIOSurfaceID ID = result;
  return result;
}

double fpraps_init(_OWORD *a1)
{
  double result = 0.0;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[1] = 0u;
  return result;
}

void fpraps_finalize(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 80);
  if (v1) {
    CFRelease(v1);
  }
}

__CFString *fpraps_copyFormattingDesc(uint64_t a1)
{
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(AllocatorForMedia, 0);
  CFIndex v4 = Mutable;
  if (Mutable)
  {
    double v5 = *(double *)(a1 + 32);
    if (*(double *)(a1 + 24) > 2.22044605e-16 || v5 > 2.22044605e-16) {
      CFStringAppendFormat(Mutable, 0, @" [Display Size: %.0fx%.0f]", *(void *)(a1 + 24), *(void *)&v5);
    }
    double v7 = *(double *)(a1 + 48);
    if (*(double *)(a1 + 40) > 2.22044605e-16 || v7 > 2.22044605e-16) {
      CFStringAppendFormat(v4, 0, @" [Ceiling: %.0fx%.0f]", *(void *)(a1 + 40), *(void *)&v7);
    }
    double v9 = *(double *)(a1 + 64);
    if (*(double *)(a1 + 56) > 2.22044605e-16 || v9 > 2.22044605e-16) {
      CFStringAppendFormat(v4, 0, @" [Floor: %.0fx%.0f]", *(void *)(a1 + 56), *(void *)&v9);
    }
    if (*(void *)(a1 + 80)) {
      CFStringAppendFormat(v4, 0, @" [Role: %@]", *(void *)(a1 + 80));
    }
    if (!*(unsigned char *)(a1 + 88)) {
      CFStringAppend(v4, @" [Not Active]");
    }
    if (*(unsigned char *)(a1 + 72)) {
      CFStringAppend(v4, @" [Muted]");
    }
  }
  return v4;
}

uint64_t FigTTMLDocumentWriterCreateForSerializer(uint64_t a1, const void *a2, void *a3)
{
  uint64_t v31 = 0;
  if (a2 && a3)
  {
    FigTTMLDocumentWriterGetClassID();
    uint64_t v5 = CMDerivedObjectCreate();
    if (!v5)
    {
      FigTTMLDocumentWriterGetCMBaseObject(v31);
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      *(void *)uint64_t DerivedStorage = CFRetain(a2);
      *(void *)&long long v18 = 0;
      long long v20 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      *((void *)&v18 + 1) = @"utc";
      *(void *)&long long v19 = @"nonDrop";
      *((void *)&v19 + 1) = 30;
      uint64_t v30 = 0;
      CMTimeMake((CMTime *)((char *)&v19 + 12), 1, 1);
      *((void *)&v21 + 1) = @"discontinuous";
      *(void *)&long long v22 = 0x100000001;
      *((void *)&v22 + 1) = *MEMORY[0x1E4F216A8];
      long long v7 = *(_OWORD *)(MEMORY[0x1E4F216D0] + 16);
      long long v23 = *MEMORY[0x1E4F216D0];
      long long v24 = v7;
      long long v8 = *(_OWORD *)(MEMORY[0x1E4F216D0] + 48);
      long long v25 = *(_OWORD *)(MEMORY[0x1E4F216D0] + 32);
      long long v26 = v8;
      LODWORD(v27) = 1;
      CMTimeMake((CMTime *)((char *)&v27 + 4), 1, 1);
      uint64_t v5 = 0;
      *((void *)&v29 + 1) = 0;
      uint64_t v30 = 0;
      *(void *)&long long v29 = @"smpte";
      long long v10 = v21;
      long long v9 = v22;
      long long v11 = v19;
      *(_OWORD *)(DerivedStorage + 40) = v20;
      *(_OWORD *)(DerivedStorage + 56) = v10;
      *(_OWORD *)(DerivedStorage + 72) = v9;
      long long v12 = v25;
      long long v13 = v26;
      long long v14 = v24;
      *(_OWORD *)(DerivedStorage + 88) = v23;
      *(_OWORD *)(DerivedStorage + 136) = v13;
      *(_OWORD *)(DerivedStorage + 120) = v12;
      *(_OWORD *)(DerivedStorage + 104) = v14;
      *(_OWORD *)(DerivedStorage + 8) = v18;
      *(_OWORD *)(DerivedStorage + 24) = v11;
      long long v15 = v29;
      long long v16 = v27;
      *(_OWORD *)(DerivedStorage + 168) = v28;
      *(_OWORD *)(DerivedStorage + 152) = v16;
      *(_OWORD *)(DerivedStorage + 184) = v15;
      *(void *)(DerivedStorage + 200) = 0;
      *a3 = v31;
    }
    return v5;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t figTTMLDocumentWriterForSerializer_Invalidate()
{
  return 0;
}

void figTTMLDocumentWriterForSerializer_Finalize(uint64_t a1)
{
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t v1 = *(const void **)CMBaseObjectGetDerivedStorage();
  if (v1)
  {
    CFRelease(v1);
  }
}

CFStringRef figTTMLDocumentWriterForSerializer_CopyDebugDesc(uint64_t a1)
{
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"FigTTMLDocumentWriterForSerializer: %@", *DerivedStorage);
}

uint64_t figTTMLDocumentWriterForSerializer_StartElement(void *a1, int a2)
{
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  switch(a2)
  {
    case 1:
      uint64_t v5 = *DerivedStorage;
      CFAllocatorRef v6 = kFigTTML_ElementLocalName_set;
      goto LABEL_19;
    case 2:
      uint64_t v5 = *DerivedStorage;
      CFAllocatorRef v6 = kFigTTML_ElementLocalName_body;
      goto LABEL_19;
    case 3:
      uint64_t v5 = *DerivedStorage;
      CFAllocatorRef v6 = kFigTTML_ElementLocalName_div;
      goto LABEL_19;
    case 4:
      uint64_t v5 = *DerivedStorage;
      CFAllocatorRef v6 = kFigTTML_ElementLocalName_p;
      goto LABEL_19;
    case 5:
      uint64_t v5 = *DerivedStorage;
      CFAllocatorRef v6 = kFigTTML_ElementLocalName_span;
      goto LABEL_19;
    case 6:
      uint64_t v5 = *DerivedStorage;
      CFAllocatorRef v6 = kFigTTML_ElementLocalName_br;
      goto LABEL_19;
    case 7:
      FigTTMLDocumentWriterGetCMBaseObject(a1);
      uint64_t v7 = CMBaseObjectGetDerivedStorage();
      uint64_t result = FigTTMLSerializerStartElement(*(void *)v7, @"tt");
      if (!result)
      {
        *(_DWORD *)(v7 + 208) = 0;
        MEMORY[0x19970EE10](&getNamespaceToPrefixDictionary_sNamespaceURIToPrefixOnce, initializeNamespaceToPrefixDictionary);
        CFDictionaryApplyFunction((CFDictionaryRef)sNamespaceToPrefixDictionary, (CFDictionaryApplierFunction)declareNamespace, a1);
        uint64_t result = *(unsigned int *)(v7 + 208);
        if (!result)
        {
          uint64_t v9 = *(void *)v7;
          return FigTTMLSerializerSetAttribute(v9, @"xmlns", @"http://www.w3.org/ns/ttml");
        }
      }
      return result;
    case 8:
      uint64_t v5 = *DerivedStorage;
      CFAllocatorRef v6 = kFigTTML_ElementLocalName_head;
      goto LABEL_19;
    case 9:
      uint64_t v5 = *DerivedStorage;
      CFAllocatorRef v6 = kFigTTML_ElementLocalName_layout;
      goto LABEL_19;
    case 10:
      uint64_t v5 = *DerivedStorage;
      CFAllocatorRef v6 = kFigTTML_ElementLocalName_region;
      goto LABEL_19;
    case 11:
      uint64_t v5 = *DerivedStorage;
      CFAllocatorRef v6 = kFigTTML_ElementLocalName_metadata;
      goto LABEL_19;
    case 12:
      uint64_t v5 = *DerivedStorage;
      CFAllocatorRef v6 = kFigTTML_ElementLocalName_styling;
      goto LABEL_19;
    case 13:
      uint64_t v5 = *DerivedStorage;
      CFAllocatorRef v6 = kFigTTML_ElementLocalName_style;
LABEL_19:
      uint64_t v10 = (uint64_t)*v6;
      return FigTTMLSerializerStartElement(v5, v10);
    case 15:
      long long v11 = kFigTTML_ElementLocalName_profile;
      goto LABEL_28;
    case 17:
      long long v11 = kFigTTML_ElementLocalName_extensions;
      goto LABEL_28;
    case 19:
      long long v11 = kFigTTML_ElementLocalName_extension;
LABEL_28:
      uint64_t v12 = (uint64_t)*v11;
      uint64_t result = startElementWithNamespace((uint64_t)a1, @"http://www.w3.org/ns/ttml#parameter", v12);
      break;
    default:
      uint64_t result = FigSignalErrorAt();
      break;
  }
  return result;
}

uint64_t figTTMLDocumentWriterForSerializer_EndElement(uint64_t a1)
{
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t v1 = *(void *)CMBaseObjectGetDerivedStorage();

  return FigTTMLSerializerEndElement(v1);
}

uint64_t figTTMLDocumentWriterForSerializer_AddCaptionData(uint64_t a1, uint64_t a2)
{
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  CFAllocatorRef v6 = *(uint64_t (**)(uint64_t))(v5 + 8);
  if (v6) {
    uint64_t v7 = (__CFString *)v6(a2);
  }
  else {
    uint64_t v7 = &stru_1EE53F4B8;
  }
  uint64_t v8 = *DerivedStorage;

  return FigTTMLSerializerAddText(v8, (uint64_t)v7);
}

uint64_t figTTMLDocumentWriterForSerializer_SetAttribute(uint64_t a1, const __CFString *a2, const void *a3)
{
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (FigCFEqual())
  {
    uint64_t v7 = *(void *)DerivedStorage;
    uint64_t v8 = @"xml:id";
LABEL_9:
    return FigTTMLSerializerSetAttribute(v7, (uint64_t)v8, (uint64_t)a3);
  }
  if (FigCFEqual())
  {
    uint64_t v7 = *(void *)DerivedStorage;
    uint64_t v8 = @"xml:space";
    goto LABEL_9;
  }
  if (FigCFEqual())
  {
    uint64_t v7 = *(void *)DerivedStorage;
    uint64_t v8 = @"xml:lang";
    goto LABEL_9;
  }
  if (FigCFEqual())
  {
    uint64_t v7 = *(void *)DerivedStorage;
    uint64_t v8 = @"xml:base";
    goto LABEL_9;
  }
  if (FigCFEqual() || FigCFEqual() || FigCFEqual())
  {
    if (a3)
    {
      CFTypeID v10 = CFGetTypeID(a3);
      if (v10 == CFDictionaryGetTypeID())
      {
        memset(&valuePtr, 0, sizeof(valuePtr));
        CMTimeMakeFromDictionary(&valuePtr, (CFDictionaryRef)a3);
        if ((valuePtr.flags & 0x1D) == 1)
        {
          if (FigCFEqual())
          {
            int32_t v11 = *(_DWORD *)(DerivedStorage + 32);
            CMTime v29 = valuePtr;
            CMTime v28 = *(CMTime *)(DerivedStorage + 36);
            CFStringRef v12 = FigTTMLCMTimeCopyAsClockTimeSyntax(&v29, v11, &v28);
          }
          else
          {
            CMTime v29 = valuePtr;
            CFStringRef v12 = FigTTMLCMTimeCopyAsOffsetTimeSyntax(&v29);
          }
          CFStringRef v13 = v12;
          uint64_t v14 = FigTTMLSerializerSetAttribute(*(void *)DerivedStorage, (uint64_t)a2, (uint64_t)v12);
          goto LABEL_22;
        }
LABEL_64:
        uint64_t v15 = FigSignalErrorAt();
        CFStringRef v13 = 0;
LABEL_23:
        if (v13) {
          CFRelease(v13);
        }
        return v15;
      }
    }
    goto LABEL_77;
  }
  if (FigCFEqual())
  {
    if (a3)
    {
      CFTypeID v16 = CFGetTypeID(a3);
      if (v16 == CFStringGetTypeID())
      {
        uint64_t v17 = writeStringAttributeWithNamespace(a1, a2, (uint64_t)a3);
        if (!v17)
        {
          long long v18 = @"utc";
          if (CFEqual(a3, @"utc")
            || (long long v18 = @"local", CFEqual(a3, @"local"))
            || (long long v18 = @"gps", CFEqual(a3, @"gps")))
          {
            uint64_t v15 = 0;
            *(void *)(DerivedStorage + 16) = v18;
            return v15;
          }
          return 0;
        }
        return v17;
      }
    }
    goto LABEL_77;
  }
  if (FigCFEqual())
  {
    if (a3)
    {
      CFTypeID v19 = CFGetTypeID(a3);
      if (v19 == CFStringGetTypeID())
      {
        uint64_t v17 = writeStringAttributeWithNamespace(a1, a2, (uint64_t)a3);
        if (!v17)
        {
          long long v20 = @"media";
          if (CFEqual(a3, @"media")
            || (long long v20 = @"smpte", CFEqual(a3, @"smpte"))
            || (long long v20 = @"clock", CFEqual(a3, @"clock")))
          {
            uint64_t v15 = 0;
            *(void *)(DerivedStorage + 184) = v20;
            return v15;
          }
          return 0;
        }
        return v17;
      }
    }
LABEL_77:
    return FigSignalErrorAt();
  }
  if (FigCFEqual())
  {
    if (a3)
    {
      CFTypeID v21 = CFGetTypeID(a3);
      if (v21 == CFStringGetTypeID())
      {
        uint64_t v17 = writeStringAttributeWithNamespace(a1, a2, (uint64_t)a3);
        if (!v17)
        {
          long long v22 = @"dropNTSC";
          if (CFEqual(a3, @"dropNTSC")
            || (long long v22 = @"dropPAL", CFEqual(a3, @"dropPAL"))
            || (long long v22 = @"nonDrop", CFEqual(a3, @"nonDrop")))
          {
            uint64_t v15 = 0;
            *(void *)(DerivedStorage + 24) = v22;
            return v15;
          }
          return 0;
        }
        return v17;
      }
    }
    goto LABEL_77;
  }
  if (FigCFEqual())
  {
    if (a3)
    {
      CFTypeID v23 = CFGetTypeID(a3);
      if (v23 == CFStringGetTypeID())
      {
        uint64_t v17 = writeStringAttributeWithNamespace(a1, a2, (uint64_t)a3);
        if (!v17)
        {
          long long v24 = @"continuous";
          if (CFEqual(a3, @"continuous") || (long long v24 = @"discontinuous", CFEqual(a3, @"discontinuous")))
          {
            uint64_t v15 = 0;
            *(void *)(DerivedStorage + 64) = v24;
            return v15;
          }
          return 0;
        }
        return v17;
      }
    }
    goto LABEL_77;
  }
  if (FigCFEqual())
  {
    if (!a3) {
      goto LABEL_77;
    }
    CFTypeID v25 = CFGetTypeID(a3);
    if (v25 != CFNumberGetTypeID()) {
      goto LABEL_77;
    }
    LODWORD(valuePtr.value) = 0;
    CFNumberGetValue((CFNumberRef)a3, kCFNumberIntType, &valuePtr);
    CFStringRef v13 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%d", LODWORD(valuePtr.value));
    if (v13)
    {
      uint64_t v15 = FigTTMLSerializerSetAttribute(*(void *)DerivedStorage, @"ttp:frameRate", (uint64_t)v13);
      if (!v15) {
        *(_DWORD *)(DerivedStorage + 32) = valuePtr.value;
      }
      goto LABEL_23;
    }
LABEL_81:
    uint64_t v14 = FigSignalErrorAt();
LABEL_22:
    uint64_t v15 = v14;
    goto LABEL_23;
  }
  if (FigCFEqual())
  {
    if (!a3) {
      goto LABEL_77;
    }
    CFTypeID v26 = CFGetTypeID(a3);
    if (v26 != CFDictionaryGetTypeID()) {
      goto LABEL_77;
    }
    memset(&valuePtr, 0, sizeof(valuePtr));
    CMTimeMakeFromDictionary(&valuePtr, (CFDictionaryRef)a3);
    if ((valuePtr.flags & 0x1D) != 1) {
      goto LABEL_64;
    }
    CFStringRef v13 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%lld %d", valuePtr.value, valuePtr.timescale);
    if (v13)
    {
      uint64_t v15 = FigTTMLSerializerSetAttribute(*(void *)DerivedStorage, @"ttp:frameRateMultiplier", (uint64_t)v13);
      if (!v15) {
        *(CMTime *)(DerivedStorage + 36) = valuePtr;
      }
      goto LABEL_23;
    }
    goto LABEL_81;
  }
  if (!a3) {
    goto LABEL_77;
  }
  CFTypeID v27 = CFGetTypeID(a3);
  if (v27 != CFStringGetTypeID()) {
    goto LABEL_77;
  }

  return writeStringAttributeWithNamespace(a1, a2, (uint64_t)a3);
}

uint64_t figTTMLDocumentWriterForSerializer_Flush(uint64_t a1)
{
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t v1 = *(void *)CMBaseObjectGetDerivedStorage();

  return FigTTMLSerializerFlush(v1);
}

uint64_t startElementWithNamespace(uint64_t a1, const void *a2, uint64_t a3)
{
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  MEMORY[0x19970EE10](&getNamespaceToPrefixDictionary_sNamespaceURIToPrefixOnce, initializeNamespaceToPrefixDictionary);
  CFNumberRef Value = CFDictionaryGetValue((CFDictionaryRef)sNamespaceToPrefixDictionary, a2);
  CFStringRef v8 = CFStringCreateWithFormat(v6, 0, @"%@:%@", Value, a3);
  uint64_t started = FigTTMLSerializerStartElement(*DerivedStorage, (uint64_t)v8);
  if (v8) {
    CFRelease(v8);
  }
  return started;
}

void declareNamespace(uint64_t a1, uint64_t a2, uint64_t a3)
{
  FigTTMLDocumentWriterGetCMBaseObject(a3);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_DWORD *)(DerivedStorage + 208))
  {
    uint64_t v6 = DerivedStorage;
    CFStringRef v7 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"xmlns:%@", a2);
    *(_DWORD *)(v6 + 208) = FigTTMLSerializerSetAttribute(*(void *)v6, (uint64_t)v7, a1);
    if (v7)
    {
      CFRelease(v7);
    }
  }
}

CFDictionaryRef initializeNamespaceToPrefixDictionary()
{
  keys[11] = *(void **)MEMORY[0x1E4F143B8];
  keys[0] = @"http://www.w3.org/ns/ttml#parameter";
  keys[1] = @"http://www.w3.org/ns/ttml#styling";
  keys[2] = @"http://www.w3.org/ns/ttml#metadata";
  keys[3] = @"http://www.w3.org/ns/ttml/profile/";
  keys[4] = @"http://www.w3.org/ns/ttml/feature/";
  keys[5] = @"http://www.w3.org/ns/ttml/extension/";
  keys[6] = @"http://namespace.itunes.apple.com/itt/ttml-extension#ruby";
  keys[7] = @"http://namespace.itunes.apple.com/itt/ttml-extension#vertical";
  keys[8] = @"http://www.w3.org/ns/ttml/profile/imsc1#parameter";
  keys[9] = @"http://www.w3.org/ns/ttml/profile/imsc1#styling";
  keys[10] = @"urn:ebu:tt:style";
  v1[2] = xmmword_1E57A2BA8;
  v1[3] = *(_OWORD *)&off_1E57A2BB8;
  v1[4] = xmmword_1E57A2BC8;
  CFAllocatorRef v2 = @"ebutts";
  v1[0] = xmmword_1E57A2B88;
  v1[1] = *(_OWORD *)&off_1E57A2B98;
  CFDictionaryRef result = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)keys, (const void **)v1, 11, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  sNamespaceToPrefixDictionary = (uint64_t)result;
  return result;
}

uint64_t writeStringAttributeWithNamespace(uint64_t a1, const __CFString *a2, uint64_t a3)
{
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, @" ");
  CFArrayRef v8 = ArrayBySeparatingStrings;
  if (ArrayBySeparatingStrings && CFArrayGetCount(ArrayBySeparatingStrings) == 2)
  {
    CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v8, 0);
    CFTypeID v10 = CFArrayGetValueAtIndex(v8, 1);
    MEMORY[0x19970EE10](&getNamespaceToPrefixDictionary_sNamespaceURIToPrefixOnce, initializeNamespaceToPrefixDictionary);
    CFNumberRef Value = CFDictionaryGetValue((CFDictionaryRef)sNamespaceToPrefixDictionary, ValueAtIndex);
    CFStringRef v12 = CFStringCreateWithFormat(v6, 0, @"%@:%@", Value, v10);
    if (v12)
    {
      CFTypeRef v13 = v12;
      uint64_t v14 = FigTTMLSerializerSetAttribute(*DerivedStorage, (uint64_t)v12, a3);
LABEL_7:
      CFRelease(v13);
LABEL_8:
      if (!v8) {
        return v14;
      }
      goto LABEL_11;
    }
    uint64_t v14 = FigSignalErrorAt();
    goto LABEL_11;
  }
  uint64_t v15 = CFArrayGetValueAtIndex(v8, 0);
  if (v15)
  {
    CFTypeRef v13 = CFRetain(v15);
    uint64_t v14 = FigTTMLSerializerSetAttribute(*DerivedStorage, (uint64_t)v13, a3);
    if (!v13) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v14 = FigTTMLSerializerSetAttribute(*DerivedStorage, 0, a3);
  if (v8) {
LABEL_11:
  }
    CFRelease(v8);
  return v14;
}

uint64_t FigAlternateFilterMonitorForHDCPNeedsNewExternalProtectionMonitorIfNecessary(void *a1, int a2, const void *a3)
{
  CFTypeRef cf = 0;
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*DerivedStorage);
  *((unsigned char *)DerivedStorage + 72) = a2;
  CFStringRef v7 = (const void *)DerivedStorage[10];
  DerivedStorage[10] = a3;
  if (a3) {
    CFRetain(a3);
  }
  if (v7) {
    CFRelease(v7);
  }
  if (!a2) {
    famhdcp_releaseAndClearHDCPExternalProtectionMonitor((uint64_t)a1, 3);
  }
  CFAllocatorRef v8 = CFGetAllocator(a1);
  if (!FigAlternateHDCPLazyEPMFilterCreate((uint64_t)v8, (uint64_t)famhdcp_lazyEPMFilterGetHDCPProtectionStatusCallback, (uint64_t)famhdcp_lazyEPMFilterGetHDCPProtectionStatusCallback, (uint64_t)a1, &cf))
  {
    famhdcp_releaseAssignAndRetainCurrentEPM((uint64_t)a1, 0);
    famhdcp_removeAllEPMListeners(a1);
  }
  MEMORY[0x19970E2B0](*DerivedStorage);
  uint64_t v9 = famhdcp_setFilterForState(a1, cf, 0);
  if (cf) {
    CFRelease(cf);
  }
  return v9;
}

void famhdcp_releaseAndClearHDCPExternalProtectionMonitor(uint64_t a1, int a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = (CFTypeRef *)DerivedStorage;
  if (a2 == 3)
  {
    uint64_t v5 = (uint64_t *)(DerivedStorage + 64);
  }
  else if (a2 == 2)
  {
    uint64_t v5 = (uint64_t *)(DerivedStorage + 56);
  }
  else
  {
    uint64_t v5 = (uint64_t *)(DerivedStorage + 48);
  }
  if (*v5) {
    FigCPEExternalProtectionMonitorEndMonitoring(*v5);
  }
  if (a2 == 3)
  {
    CFAllocatorRef v6 = v4 + 8;
  }
  else if (a2 == 2)
  {
    CFAllocatorRef v6 = v4 + 7;
  }
  else
  {
    CFAllocatorRef v6 = v4 + 6;
  }
  if (*v6)
  {
    CFRelease(*v6);
    *CFAllocatorRef v6 = 0;
  }
}

void famhdcp_releaseAssignAndRetainCurrentEPM(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    uint64_t v4 = CMBaseObjectGetDerivedStorage();
    if (!CFBagContainsValue(*(CFBagRef *)(v4 + 128), a2))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      if (!FigNotificationCenterAddWeakListener()) {
        CFBagAddValue(*(CFMutableBagRef *)(v4 + 128), a2);
      }
    }
  }
  uint64_t v5 = CMBaseObjectGetDerivedStorage();
  *(_DWORD *)(v5 + 104) = -1;
  *(void *)(v5 + 120) = 0x100000001;
  CFAllocatorRef v6 = *(const void **)(DerivedStorage + 112);
  *(void *)(DerivedStorage + 112) = a2;
  if (a2) {
    CFRetain(a2);
  }
  if (v6)
  {
    CFRelease(v6);
  }
}

void famhdcp_removeAllEPMListeners(void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFBagApplyFunction(*(CFBagRef *)(DerivedStorage + 128), (CFBagApplierFunction)famhdcp_removeEPMListenersApplierFunc, a1);
  CFArrayRef v3 = *(__CFBag **)(DerivedStorage + 128);

  CFBagRemoveAllValues(v3);
}

uint64_t famhdcp_setFilterForState(const void *a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  MEMORY[0x19970E290](*DerivedStorage);
  uint64_t v7 = famhdcp_copyFilterForCurrentStateGuts((uint64_t)a1, &cf);
  if (v7)
  {
    uint64_t v9 = v7;
    MEMORY[0x19970E2B0](*DerivedStorage);
  }
  else
  {
    uint64_t v8 = DerivedStorage[5];
    CFDictionarySetValue((CFMutableDictionaryRef)DerivedStorage[4], a3, a2);
    MEMORY[0x19970E2B0](*DerivedStorage);
    uint64_t v9 = FigAlternateFilterMonitorUtilityPostStateChangedNotificationForNewFilterIfNecessary(a1, cf, a2, (uint64_t)a3, v8);
  }
  if (cf) {
    CFRelease(cf);
  }
  return v9;
}

uint64_t FigAlternateFilterMonitorCreateForHDCP(const __CFAllocator *a1, uint64_t a2, uint64_t (*a3)(int a1, uint64_t a2, _DWORD *a3, void *a4), CFTypeRef *a4)
{
  CFTypeRef v19 = 0;
  CFTypeRef cf = 0;
  FigAlternateFilterMonitorGetClassID();
  uint64_t v7 = CMDerivedObjectCreate();
  if (v7) {
    goto LABEL_19;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v9 = FigReentrantMutexCreate();
  *(void *)uint64_t DerivedStorage = v9;
  if (!v9)
  {
    uint64_t v7 = FigSignalErrorAt();
LABEL_19:
    uint64_t v17 = v7;
    goto LABEL_13;
  }
  *(void *)(DerivedStorage + 24) = dispatch_queue_create("com.apple.coremedia.alternateFilterMonitorForHDCP.notification", 0);
  if (!a3) {
    a3 = famhdcp_copyHDCPEPM;
  }
  *(void *)(DerivedStorage + 8) = FigCFWeakReferenceHolderCreateWithReferencedObject();
  *(void *)(DerivedStorage + 16) = a3;
  *(void *)(DerivedStorage + 32) = CFDictionaryCreateMutable(a1, 0, 0, MEMORY[0x1E4F1D540]);
  *(void *)(DerivedStorage + 128) = CFBagCreateMutable(a1, 0, MEMORY[0x1E4F1D520]);
  *(_DWORD *)(DerivedStorage + 96) = -2;
  uint64_t v10 = CMBaseObjectGetDerivedStorage();
  *(_DWORD *)(v10 + 104) = -1;
  *(void *)(v10 + 120) = 0x100000001;
  CFAllocatorRef v11 = CFGetAllocator(cf);
  uint64_t v7 = FigAlternateHDCPLazyEPMFilterCreate((uint64_t)v11, (uint64_t)famhdcp_lazyEPMFilterGetHDCPProtectionStatusCallback, (uint64_t)famhdcp_lazyEPMFilterGetHDCPProtectionStatusCallback, (uint64_t)cf, &v19);
  if (v7) {
    goto LABEL_19;
  }
  CFTypeRef v13 = v19;
  CFTypeRef v12 = cf;
  uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v14) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0;
  }
  CFTypeID v16 = *(uint64_t (**)(CFTypeRef, CFTypeRef, void))(v15 + 8);
  if (v16)
  {
    uint64_t v17 = v16(v12, v13, 0);
    if (!v17)
    {
      *a4 = cf;
      CFTypeRef cf = 0;
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v17 = 4294954514;
  }
LABEL_13:
  if (cf) {
    CFRelease(cf);
  }
LABEL_15:
  if (v19) {
    CFRelease(v19);
  }
  return v17;
}

uint64_t famhdcp_copyHDCPEPM(int a1, uint64_t a2, _DWORD *a3, void *a4)
{
  if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 72))
  {
    *a3 = 0;
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    uint64_t v8 = (uint64_t *)(DerivedStorage + 64);
    if (!*(void *)(DerivedStorage + 64))
    {
      uint64_t result = FigCPEOctaviaExternalProtectionMonitorCreate(*MEMORY[0x1E4F1CF80], *(void **)(DerivedStorage + 48), 1, *(const void **)(DerivedStorage + 80), v8);
      if (result) {
        return result;
      }
      CFDictionaryRef v10 = 0;
      goto LABEL_16;
    }
LABEL_11:
    CFDictionaryRef v10 = 0;
    if (!a4) {
      goto LABEL_20;
    }
    goto LABEL_17;
  }
  if (a1)
  {
    if (a1 == 1)
    {
      *a3 = 1;
      uint64_t v11 = CMBaseObjectGetDerivedStorage();
      uint64_t v8 = (uint64_t *)(v11 + 56);
      unsigned int v12 = 2;
      int v13 = 2;
    }
    else
    {
      uint64_t v11 = CMBaseObjectGetDerivedStorage();
      int v13 = 0;
      uint64_t v8 = 0;
      unsigned int v12 = 2;
    }
  }
  else
  {
    *a3 = 0;
    uint64_t v11 = CMBaseObjectGetDerivedStorage();
    uint64_t v8 = (uint64_t *)(v11 + 48);
    unsigned int v12 = 1;
    int v13 = 1;
  }
  if (*v8) {
    goto LABEL_11;
  }
  CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    CFDictionaryRef v10 = Mutable;
    CFDictionarySetValue(Mutable, @"InformationalMode", (const void *)*MEMORY[0x1E4F1CFD0]);
    uint64_t updated = FigCPEExternalProtectionMonitorCreateForMethods(v14, v12, v10, 0, v8);
    if (updated
      || (uint64_t updated = (uint64_t)famhdcp_updateDisplayListForHDCPExternalProtectionMonitor((void **)v11, v13, *(const __CFArray **)(v11 + 88)), updated))
    {
      uint64_t v18 = updated;
LABEL_21:
      CFRelease(v10);
      return v18;
    }
LABEL_16:
    FigCPEExternalProtectionMonitorBeginMonitoring(*v8);
    if (!a4) {
      goto LABEL_20;
    }
LABEL_17:
    CFTypeRef v17 = (CFTypeRef)*v8;
    if (*v8) {
      CFTypeRef v17 = CFRetain(v17);
    }
    *a4 = v17;
LABEL_20:
    uint64_t v18 = 0;
    uint64_t result = 0;
    if (!v10) {
      return result;
    }
    goto LABEL_21;
  }

  return FigSignalErrorAt();
}

uint64_t famhdcp_lazyEPMFilterGetHDCPProtectionStatusCallback(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  int v11 = -2;
  MEMORY[0x19970E290](*DerivedStorage);
  if (*((_DWORD *)DerivedStorage + 26) >= (int)a1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 1;
    goto LABEL_20;
  }
  if (DerivedStorage[14] && *((_DWORD *)DerivedStorage + 30) == a1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = *((unsigned int *)DerivedStorage + 31);
    goto LABEL_20;
  }
  uint64_t v5 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v5
    || ((unsigned int (*)(uint64_t, const void *, int *, CFTypeRef *))DerivedStorage[2])(a1, v5, &v11, &cf))
  {
    goto LABEL_26;
  }
  if (!cf)
  {
    FigSignalErrorAt();
LABEL_26:
    uint64_t v6 = 0xFFFFFFFFLL;
    goto LABEL_20;
  }
  if (!FigCFEqual()) {
    famhdcp_releaseAssignAndRetainCurrentEPM(a2, cf);
  }
  *((_DWORD *)DerivedStorage + 30) = v11;
  unsigned int HDCPStateFromExternalProtectionMonitor = famhdcp_getHDCPStateFromExternalProtectionMonitor(DerivedStorage[14]);
  *((_DWORD *)DerivedStorage + 31) = HDCPStateFromExternalProtectionMonitor;
  int v8 = *((_DWORD *)DerivedStorage + 30);
  if (v8 < (int)a1) {
    uint64_t v6 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v6 = HDCPStateFromExternalProtectionMonitor;
  }
  int v9 = *((_DWORD *)DerivedStorage + 30);
  if (HDCPStateFromExternalProtectionMonitor >= 2)
  {
    if (HDCPStateFromExternalProtectionMonitor == -1) {
      int v9 = -1;
    }
    else {
      int v9 = -2;
    }
  }
  if (*((_DWORD *)DerivedStorage + 26) < v9) {
    *((_DWORD *)DerivedStorage + 26) = v8;
  }
LABEL_20:
  MEMORY[0x19970E2B0](*DerivedStorage);
  if (cf) {
    CFRelease(cf);
  }
  if (v5) {
    CFRelease(v5);
  }
  return v6;
}

uint64_t famhdcp_getHDCPStateFromExternalProtectionMonitor(uint64_t a1)
{
  uint64_t result = FigCPEExternalProtectionMonitorStableStatusDetermined(a1);
  if (result)
  {
    if (FigCPEExternalProtectionMonitorGetStatus(a1) == 4) {
      return 1;
    }
    else {
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

void famhdcp_observingEPMStatusChanged(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CFTypeRef cf = 0;
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*DerivedStorage);
  uint64_t v8 = CMBaseObjectGetDerivedStorage();
  int v9 = *(_DWORD *)(v8 + 96);
  CurrentMaxSupportedint HDCPLevel = famhdcp_getCurrentMaxSupportedHDCPLevel();
  int v14 = 0;
  if (a5) {
    FigCFDictionaryGetInt32IfPresent();
  }
  if (CurrentMaxSupportedHDCPLevel != -2) {
    *(_DWORD *)(v8 + 96) = CurrentMaxSupportedHDCPLevel;
  }
  if ((v9 & 0x80000000) == 0 && CurrentMaxSupportedHDCPLevel < 0 && v14 == 1) {
    ++*(_DWORD *)(v8 + 100);
  }
  CFAllocatorRef v11 = CFGetAllocator(a2);
  if (!FigAlternateHDCPLazyEPMFilterCreate((uint64_t)v11, (uint64_t)famhdcp_lazyEPMFilterGetHDCPProtectionStatusCallback, (uint64_t)famhdcp_lazyEPMFilterGetHDCPProtectionStatusCallback, (uint64_t)a2, &cf))
  {
    uint64_t v12 = CMBaseObjectGetDerivedStorage();
    *(_DWORD *)(v12 + 104) = -1;
    *(void *)(v12 + 120) = 0x100000001;
  }
  MEMORY[0x19970E2B0](*DerivedStorage);
  famhdcp_setFilterForState(a2, cf, 0);
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t famhdcp_getCurrentMaxSupportedHDCPLevel()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = DerivedStorage;
  if (*(unsigned char *)(DerivedStorage + 72))
  {
    uint64_t v2 = *(void *)(DerivedStorage + 64);
    if (v2)
    {
      unsigned int v3 = famhdcp_getHDCPStateFromExternalProtectionMonitor(v2) + 1;
      if (v3 < 3) {
        return dword_194998AA0[v3];
      }
    }
    return 4294967294;
  }
  uint64_t v5 = *(void *)(DerivedStorage + 56);
  if (v5)
  {
    unsigned int HDCPStateFromExternalProtectionMonitor = famhdcp_getHDCPStateFromExternalProtectionMonitor(v5);
    if (HDCPStateFromExternalProtectionMonitor < 2) {
      return 1;
    }
    if (HDCPStateFromExternalProtectionMonitor == -1) {
      uint64_t result = 0xFFFFFFFFLL;
    }
    else {
      uint64_t result = 4294967294;
    }
  }
  else
  {
    uint64_t result = 4294967294;
  }
  if (*(void *)(v1 + 48))
  {
    unsigned int v3 = famhdcp_getHDCPStateFromExternalProtectionMonitor(*(void *)(v1 + 48)) + 1;
    if (v3 <= 2) {
      return dword_194998AA0[v3];
    }
    return 4294967294;
  }
  return result;
}

uint64_t famhdcp_removeEPMListenersApplierFunc()
{
  CMNotificationCenterGetDefaultLocalCenter();

  return FigNotificationCenterRemoveWeakListener();
}

uint64_t famhdcp_copyFilterForCurrentStateGuts(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    uint64_t v4 = *(const void **)(DerivedStorage + 40);
    uint64_t v5 = CMBaseObjectGetDerivedStorage();
    CFNumberRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(v5 + 32), v4);
    *a2 = Value;
    if (Value) {
      CFRetain(Value);
    }
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t famhdcp_finalize(void *a1)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  famhdcp_removeAllEPMListeners(a1);
  famhdcp_releaseAndClearHDCPExternalProtectionMonitor((uint64_t)a1, 1);
  famhdcp_releaseAndClearHDCPExternalProtectionMonitor((uint64_t)a1, 2);
  famhdcp_releaseAndClearHDCPExternalProtectionMonitor((uint64_t)a1, 3);
  unsigned int v3 = (const void *)DerivedStorage[11];
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (const void *)DerivedStorage[10];
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = (const void *)DerivedStorage[3];
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v6 = (const void *)DerivedStorage[1];
  if (v6) {
    CFRelease(v6);
  }
  uint64_t v7 = (const void *)DerivedStorage[4];
  if (v7) {
    CFRelease(v7);
  }
  uint64_t v8 = (const void *)DerivedStorage[14];
  if (v8) {
    CFRelease(v8);
  }
  int v9 = (const void *)DerivedStorage[16];
  if (v9) {
    CFRelease(v9);
  }

  return FigSimpleMutexDestroy();
}

CFStringRef famhdcp_copyDebugDesc()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*DerivedStorage);
  CFStringRef v1 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigAlternateFilterMonitorForHDCP currentMaxProtectedHDCPLevel:%d currentEPM:%@]", *((unsigned int *)DerivedStorage + 26), DerivedStorage[14]);
  MEMORY[0x19970E2B0](*DerivedStorage);
  return v1;
}

uint64_t famhdcp_copyProperty(uint64_t a1, const void *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*DerivedStorage);
  if (CFEqual(a2, @"AlternateFilterMonitorProperty_MaxProtectedAlternateHDCPLevel"))
  {
    famhdcp_getCurrentMaxSupportedHDCPLevel();
  }
  else if (!CFEqual(a2, @"AlternateFilterMonitorProperty_HDCPErrorCount"))
  {
    uint64_t v7 = 4294954512;
    goto LABEL_5;
  }
  uint64_t v7 = 0;
  *a4 = FigCFNumberCreateSInt32();
LABEL_5:
  MEMORY[0x19970E2B0](*DerivedStorage);
  return v7;
}

uint64_t famhdcp_setProperty(uint64_t a1, const void *a2, const __CFArray *a3)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*DerivedStorage);
  if (!CFEqual(a2, @"AlternateFilterMonitorProperty_DisplayList"))
  {
    uint64_t v10 = FigSignalErrorAt();
    goto LABEL_17;
  }
  if (a3)
  {
    CFMutableArrayRef MutableCopy = CFArrayCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, a3);
    a3 = MutableCopy;
    uint64_t v8 = (CFArrayRef *)(DerivedStorage + 11);
    uint64_t v7 = (const void *)DerivedStorage[11];
    DerivedStorage[11] = MutableCopy;
    if (MutableCopy)
    {
      CFRetain(MutableCopy);
      char v9 = 0;
      if (!v7) {
        goto LABEL_10;
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v8 = (CFArrayRef *)(DerivedStorage + 11);
    uint64_t v7 = (const void *)DerivedStorage[11];
    DerivedStorage[11] = 0;
  }
  char v9 = 1;
  if (v7) {
LABEL_9:
  }
    CFRelease(v7);
LABEL_10:
  CFAllocatorRef v11 = (void *)DerivedStorage[6];
  if (!v11 || !FigCPEExternalProtectionMonitorSetProperty(v11, @"DisplayList", *v8))
  {
    uint64_t v12 = (void *)DerivedStorage[7];
    if (v12) {
      FigCPEExternalProtectionMonitorSetProperty(v12, @"DisplayList", *v8);
    }
  }
  if ((v9 & 1) == 0) {
    CFRelease(a3);
  }
  uint64_t v10 = 0;
LABEL_17:
  MEMORY[0x19970E2B0](*DerivedStorage);
  return v10;
}

void *famhdcp_updateDisplayListForHDCPExternalProtectionMonitor(void **a1, int a2, const __CFArray *a3)
{
  if (a2 == 3)
  {
    unsigned int v3 = a1 + 8;
  }
  else if (a2 == 2)
  {
    unsigned int v3 = a1 + 7;
  }
  else
  {
    unsigned int v3 = a1 + 6;
  }
  uint64_t result = *v3;
  if (*v3) {
    return (void *)FigCPEExternalProtectionMonitorSetProperty(result, @"DisplayList", a3);
  }
  return result;
}

uint64_t famhdcp_setState(const void *a1, const void *a2)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*DerivedStorage);
  uint64_t v5 = (const void *)DerivedStorage[5];
  DerivedStorage[5] = a2;
  uint64_t v6 = CMBaseObjectGetDerivedStorage();
  CFNumberRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(v6 + 32), v5);
  uint64_t v8 = Value;
  if (Value) {
    CFRetain(Value);
  }
  uint64_t v9 = CMBaseObjectGetDerivedStorage();
  uint64_t v10 = CFDictionaryGetValue(*(CFDictionaryRef *)(v9 + 32), a2);
  CFAllocatorRef v11 = v10;
  if (v10) {
    CFRetain(v10);
  }
  MEMORY[0x19970E2B0](*DerivedStorage);
  uint64_t v12 = FigAlternateFilterMonitorUtilityPostStateChangedNotificationForNewStateIfNecessary(a1, v8, v11, (uint64_t)v5, (uint64_t)a2);
  if (v8) {
    CFRelease(v8);
  }
  if (v11) {
    CFRelease(v11);
  }
  return v12;
}

uint64_t famhdcp_copyFilterForCurrentState(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*DerivedStorage);
  uint64_t v5 = famhdcp_copyFilterForCurrentStateGuts(a1, a2);
  MEMORY[0x19970E2B0](*DerivedStorage);
  return v5;
}

uint64_t FigTTMLGetLibXMLAccess()
{
  return s_accessLibXML;
}

void *figTTMLInitLibXMLLibrary()
{
  uint64_t result = dlopen("/usr/lib/libxml2.dylib", 6);
  if (result)
  {
    CFStringRef v1 = result;
    s_accessLibXMLFunctionPointerStorage = dlsym(result, "xmlTextReaderIsEmptyElement");
    off_1E934F5D0 = dlsym(v1, "xmlTextReaderLocalName");
    qword_1E934F5D8 = (uint64_t)dlsym(v1, "xmlStrEqual");
    off_1E934F5E0 = dlsym(v1, "xmlTextReaderMoveToNextAttribute");
    off_1E934F5E8 = dlsym(v1, "xmlTextReaderMoveToElement");
    off_1E934F5F0 = dlsym(v1, "xmlTextReaderConstLocalName");
    off_1E934F5F8 = dlsym(v1, "xmlTextReaderNamespaceUri");
    off_1E934F600 = dlsym(v1, "xmlTextReaderRead");
    qword_1E934F608 = (uint64_t)dlsym(v1, "xmlFreeTextReader");
    off_1E934F610 = dlsym(v1, "xmlTextReaderNodeType");
    off_1E934F618 = dlsym(v1, "xmlTextReaderValue");
    off_1E934F620 = dlsym(v1, "xmlTextReaderMoveToFirstAttribute");
    off_1E934F628 = dlsym(v1, "xmlTextReaderConstNamespaceUri");
    qword_1E934F630 = (uint64_t)dlsym(v1, "xmlTextReaderReadString");
    qword_1E934F640 = (uint64_t)dlsym(v1, "xmlFree");
    off_1E934F638 = *(_UNKNOWN **)qword_1E934F640;
    qword_1E934F648 = (uint64_t)dlsym(v1, "xmlReaderForMemory");
    qword_1E934F650 = (uint64_t)dlsym(v1, "xmlOutputBufferCreateIO");
    qword_1E934F658 = (uint64_t)dlsym(v1, "xmlNewTextWriter");
    qword_1E934F660 = (uint64_t)dlsym(v1, "xmlOutputBufferClose");
    qword_1E934F668 = (uint64_t)dlsym(v1, "xmlFreeTextWriter");
    qword_1E934F670 = (uint64_t)dlsym(v1, "xmlTextWriterStartDocument");
    qword_1E934F678 = (uint64_t)dlsym(v1, "xmlTextWriterEndDocument");
    qword_1E934F680 = (uint64_t)dlsym(v1, "xmlTextWriterStartElementNS");
    qword_1E934F688 = (uint64_t)dlsym(v1, "xmlTextWriterStartElement");
    qword_1E934F690 = (uint64_t)dlsym(v1, "xmlTextWriterEndElement");
    qword_1E934F698 = (uint64_t)dlsym(v1, "xmlTextWriterWriteString");
    qword_1E934F6A0 = (uint64_t)dlsym(v1, "xmlTextWriterFlush");
    qword_1E934F6A8 = (uint64_t)dlsym(v1, "xmlTextWriterSetQuoteChar");
    qword_1E934F6B0 = (uint64_t)dlsym(v1, "xmlTextWriterWriteAttribute");
    qword_1E934F6B8 = (uint64_t)dlsym(v1, "xmlTextWriterWriteFormatAttributeNS");
    qword_1E934F6C0 = (uint64_t)dlsym(v1, "xmlTextWriterSetIndent");
    qword_1E934F6C8 = (uint64_t)dlsym(v1, "xmlTextWriterSetIndentString");
    uint64_t result = dlsym(v1, "xmlTextWriterWriteAttributeNS");
    qword_1E934F6D0 = (uint64_t)result;
    s_accessLibXML = (uint64_t)&s_accessLibXMLFunctionPointerStorage;
    uint64_t v2 = 0;
    while (*(_UNKNOWN **)((char *)&s_accessLibXMLFunctionPointerStorage + v2))
    {
      v2 += 8;
      if (v2 == 272) {
        return result;
      }
    }
    s_accessLibXML = 0;
  }
  return result;
}

uint64_t FigTTMLInitializeNodeBaseStorage(uint64_t a1, long long *a2)
{
  *(void *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  if (a2)
  {
    long long v3 = *a2;
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(_OWORD *)a1 = v3;
  }
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  *(void *)(a1 + 24) = Mutable;
  if (Mutable)
  {
    CFMutableArrayRef v6 = CFArrayCreateMutable(v4, 0, MEMORY[0x1E4F1D510]);
    *(void *)(a1 + 128) = v6;
    if (v6) {
      return 0;
    }
  }

  return FigSignalErrorAt();
}

void FigTTMLReleaseNodeBaseStorage(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 128);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 128) = 0;
  }
  long long v3 = *(const void **)(a1 + 24);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 24) = 0;
  }
}

__CFArray *FigTTMLCreateStringArrayFromNMTOKENS(const __CFString *a1)
{
  CFIndex Length = CFStringGetLength(a1);
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  CFStringRef theString = a1;
  uint64_t v21 = 0;
  CFIndex v22 = Length;
  CharactersPtr = CFStringGetCharactersPtr(a1);
  CStringPtr = 0;
  CFTypeRef v19 = CharactersPtr;
  if (!CharactersPtr) {
    CStringPtr = CFStringGetCStringPtr(a1, 0x600u);
  }
  CFIndex v23 = 0;
  CFIndex v24 = 0;
  long long v20 = CStringPtr;
  if (Length >= 1)
  {
    CFIndex v6 = 0;
    CFIndex v7 = 0;
    memset(v17, 0, sizeof(v17));
    do
    {
      CFIndex v8 = v22;
      if (v22 <= v6) {
        goto LABEL_27;
      }
      if (v19)
      {
        UniChar v9 = v19[v21 + v6];
      }
      else if (v20)
      {
        UniChar v9 = v20[v21 + v6];
      }
      else
      {
        CFIndex v10 = v23;
        if (v24 <= v6 || v23 > v6)
        {
          CFIndex v12 = v6 - 4;
          if ((unint64_t)v6 < 4) {
            CFIndex v12 = 0;
          }
          if (v12 + 64 < v22) {
            CFIndex v8 = v12 + 64;
          }
          CFIndex v23 = v12;
          CFIndex v24 = v8;
          v25.locatiouint64_t n = v21 + v12;
          v25.length = v8 - v12;
          CFStringGetCharacters(theString, v25, (UniChar *)v17);
          CFIndex v10 = v23;
        }
        UniChar v9 = *((_WORD *)v17 + v6 - v10);
      }
      unsigned int v13 = v9;
      uint64_t v14 = (1 << v9) & 0x100002600;
      if (v13 > 0x20 || v14 == 0)
      {
LABEL_27:
        ++v6;
      }
      else
      {
        if (v7 != v6)
        {
          v26.locatiouint64_t n = v7;
          v26.length = v6;
          figTTMLAddSubstringToArray(a1, v26, Mutable);
        }
        CFIndex v7 = ++v6;
      }
    }
    while (v6 != Length);
    if (v7 != v6)
    {
      v27.locatiouint64_t n = v7;
      v27.length = v6;
      figTTMLAddSubstringToArray(a1, v27, Mutable);
    }
  }
  return Mutable;
}

void figTTMLAddSubstringToArray(CFStringRef str, CFRange range, __CFArray *a3)
{
  v6.length = range.length - range.location;
  v6.locatiouint64_t n = range.location;
  CFStringRef v4 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x1E4F1CF80], str, v6);
  CFArrayAppendValue(a3, v4);
  if (v4)
  {
    CFRelease(v4);
  }
}

__CFArray *FigTTMLCreateReversedStringArrayFromNMTOKENS(const __CFString *a1)
{
  CFStringRef v1 = FigTTMLCreateStringArrayFromNMTOKENS(a1);
  uint64_t v2 = v1;
  if (v1)
  {
    CFIndex Count = CFArrayGetCount(v1);
    if (Count >= 0) {
      uint64_t v4 = Count;
    }
    else {
      uint64_t v4 = Count + 1;
    }
    if (Count >= 2)
    {
      CFIndex v5 = 0;
      uint64_t v6 = v4 >> 1;
      CFIndex v7 = Count - 1;
      do
        CFArrayExchangeValuesAtIndices(v2, v5++, v7--);
      while (v6 != v5);
    }
  }
  return v2;
}

uint64_t FigTTMLCopyNamespaceAndLocalNameOfCurrentNode(uint64_t a1, const char **a2, CFStringRef *a3)
{
  MEMORY[0x19970EE10](&FigTTMLGetLibXMLAccess_sFigLibXMLLoadOnce, figTTMLInitLibXMLLibrary);
  if (off_1E934F610(a1) == 1)
  {
    uint64_t v6 = (const char *)off_1E934F5F0(a1);
    CFIndex v7 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
    if (v6) {
      CFStringRef v8 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v6, 0x8000100u);
    }
    else {
      CFStringRef v8 = 0;
    }
    UniChar v9 = (const char *)off_1E934F628(a1);
    if (v9) {
      UniChar v9 = (const char *)CFStringCreateWithCString(*v7, v9, 0x8000100u);
    }
    if (a2)
    {
      *a2 = v9;
      UniChar v9 = 0;
    }
    if (a3)
    {
      *a3 = v8;
      CFStringRef v8 = 0;
    }
    if (v9) {
      CFRelease(v9);
    }
    if (v8) {
      CFRelease(v8);
    }
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigTTMLMoveCurrentNodeTo(uint64_t a1, int a2)
{
  MEMORY[0x19970EE10](&FigTTMLGetLibXMLAccess_sFigLibXMLLoadOnce, figTTMLInitLibXMLLibrary);
  if (s_accessLibXML)
  {
    while (off_1E934F600(a1) == 1)
    {
      if (off_1E934F610(a1) == a2) {
        return 0;
      }
    }
  }

  return FigSignalErrorAt();
}

uint64_t FigTTMLAddCurrentElementAttributesToDictionary(uint64_t a1, __CFDictionary *a2)
{
  MEMORY[0x19970EE10](&FigTTMLGetLibXMLAccess_sFigLibXMLLoadOnce, figTTMLInitLibXMLLibrary);
  if (s_accessLibXML)
  {
    if (off_1E934F610(a1) == 1)
    {
      if (off_1E934F620(a1))
      {
        uint64_t v4 = 0;
        CFIndex v5 = 0;
        uint64_t v6 = 0;
        CFStringRef v7 = 0;
        CFStringRef v8 = 0;
        CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        do
        {
          off_1E934F638(v6);
          off_1E934F638(v5);
          off_1E934F638(v4);
          if (v8) {
            CFRelease(v8);
          }
          if (v7) {
            CFRelease(v7);
          }
          uint64_t v6 = (const char *)off_1E934F5F8(a1);
          CFIndex v5 = (const char *)off_1E934F5D0(a1);
          uint64_t v4 = (const char *)off_1E934F618(a1);
          CFStringRef v8 = figTTMLCreateNamespaceAndName(v6, v5);
          CFStringRef v7 = CFStringCreateWithCString(v9, v4, 0x8000100u);
          CFDictionaryAddValue(a2, v8, v7);
        }
        while (off_1E934F5E0(a1));
        off_1E934F5E8(a1);
        if (v8) {
          CFRelease(v8);
        }
        if (v7) {
          CFRelease(v7);
        }
      }
      else
      {
        off_1E934F5E8(a1);
        uint64_t v4 = 0;
        CFIndex v5 = 0;
        uint64_t v6 = 0;
      }
      uint64_t v10 = 0;
    }
    else
    {
      uint64_t v10 = FigSignalErrorAt();
      uint64_t v4 = 0;
      CFIndex v5 = 0;
      uint64_t v6 = 0;
    }
    off_1E934F638(v6);
    off_1E934F638(v5);
    off_1E934F638(v4);
    return v10;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

__CFString *figTTMLCreateNamespaceAndName(const char *a1, const char *a2)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFIndex v5 = Mutable;
  if (Mutable)
  {
    if (a1)
    {
      CFStringAppendCString(Mutable, a1, 0x8000100u);
      CFStringAppendCString(v5, " ", 0x8000100u);
    }
    CFStringAppendCString(v5, a2, 0x8000100u);
  }
  return v5;
}

uint64_t FigTTMLAddAttributeToCFDictionary(uint64_t a1, __CFDictionary *a2)
{
  MEMORY[0x19970EE10](&FigTTMLGetLibXMLAccess_sFigLibXMLLoadOnce, figTTMLInitLibXMLLibrary);
  if (s_accessLibXML && off_1E934F610(a1) == 2)
  {
    uint64_t v4 = (const char *)off_1E934F5F8(a1);
    CFIndex v5 = (const char *)off_1E934F5D0(a1);
    uint64_t v6 = (const char *)off_1E934F618(a1);
    CFStringRef v7 = figTTMLCreateNamespaceAndName(v4, v5);
    CFStringRef v8 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v6, 0x8000100u);
    CFDictionaryAddValue(a2, v7, v8);
    if (v7) {
      CFRelease(v7);
    }
    if (v8) {
      CFRelease(v8);
    }
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigTTMLSkipNode(uint64_t a1, uint64_t *a2, __CFArray *a3)
{
  CMTimeValue value = 0;
  MEMORY[0x19970EE10](&FigTTMLGetLibXMLAccess_sFigLibXMLLoadOnce, figTTMLInitLibXMLLibrary);
  if (s_accessLibXML)
  {
    if (off_1E934F610(a1) == 1)
    {
      uint64_t v6 = FigTTMLCopyNamespaceAndLocalNameOfCurrentNode(a1, 0, (CFStringRef *)&value);
      CFStringRef v7 = value;
      if (v6)
      {
        uint64_t v8 = v6;
        if (!value) {
          return v8;
        }
        goto LABEL_6;
      }
      CFArrayAppendValue(a3, value);
    }
    uint64_t v8 = FigTTMLParseNode(a1, (uint64_t (*)(uint64_t, uint64_t *, CFTypeRef *))figTTMLSkipNode, a2);
    CFStringRef v7 = value;
    if (!value) {
      return v8;
    }
LABEL_6:
    CFRelease(v7);
    return v8;
  }

  return FigSignalErrorAt();
}

uint64_t FigTTMLParseNode(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t *, CFTypeRef *), uint64_t *a3)
{
  uint64_t v6 = *a3;
  uint64_t v7 = a3[1];
  CFTypeRef cf = 0;
  MEMORY[0x19970EE10](&FigTTMLGetLibXMLAccess_sFigLibXMLLoadOnce, figTTMLInitLibXMLLibrary);
  if (!s_accessLibXML) {
    goto LABEL_20;
  }
  if (off_1E934F610(a1) == 1)
  {
    int v8 = s_accessLibXMLFunctionPointerStorage(a1);
    int v9 = off_1E934F600(a1);
    if (v8) {
      goto LABEL_15;
    }
    if (v9 != 1) {
      goto LABEL_20;
    }
    ++a3[2];
    while (off_1E934F610(a1) != 15)
    {
      if (cf)
      {
        CFRelease(cf);
        CFTypeRef cf = 0;
      }
      uint64_t v10 = a2(a1, a3, &cf);
      if (v10) {
        goto LABEL_21;
      }
      CFTypeRef v11 = cf;
      if (cf)
      {
        ++a3[2];
        uint64_t v7 = (uint64_t)v11;
      }
      *a3 = v6;
      a3[1] = v7;
    }
    --a3[2];
  }
  int v9 = off_1E934F600(a1);
LABEL_15:
  if (v9 != -1)
  {
    uint64_t v12 = 0;
    goto LABEL_17;
  }
LABEL_20:
  uint64_t v10 = FigSignalErrorAt();
LABEL_21:
  uint64_t v12 = v10;
LABEL_17:
  if (cf) {
    CFRelease(cf);
  }
  return v12;
}

uint64_t figTTMLSkipNode(uint64_t a1, uint64_t *a2)
{
  return FigTTMLParseNode(a1, (uint64_t (*)(uint64_t, uint64_t *, CFTypeRef *))figTTMLSkipNode, a2);
}

void FigTTMLAppendDebugDescToCFString(const void *a1, __CFString *a2)
{
  CFStringRef v3 = CFCopyDescription(a1);
  CFStringAppend(a2, v3);
  if (v3)
  {
    CFRelease(v3);
  }
}

uint64_t FigTTMLParseAndCreateBlockClassNode(const __CFAllocator *a1, uint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  CFTypeRef v12 = 0;
  CFTypeRef v13 = 0;
  CFTypeRef cf = 0;
  MEMORY[0x19970EE10](&FigTTMLGetLibXMLAccess_sFigLibXMLLoadOnce, figTTMLInitLibXMLLibrary);
  if (s_accessLibXML)
  {
    if (off_1E934F610(a2) != 1) {
      goto LABEL_13;
    }
    uint64_t v8 = FigTTMLCopyNamespaceAndLocalNameOfCurrentNode(a2, (const char **)&v12, (CFStringRef *)&cf);
    if (!v8)
    {
      if (FigCFEqual() && FigCFEqual())
      {
        uint64_t v8 = FigTTMLDivCreate(a1, a2, a3, &v13);
        if (v8) {
          goto LABEL_22;
        }
      }
      else if (FigCFEqual())
      {
        if (FigCFEqual())
        {
          uint64_t v8 = FigTTMLPCreate(a1, a2, a3, &v13);
          if (v8) {
            goto LABEL_22;
          }
        }
      }
      if (a4)
      {
        uint64_t v9 = 0;
        *a4 = v13;
        CFTypeRef v13 = 0;
        goto LABEL_14;
      }
LABEL_13:
      uint64_t v9 = 0;
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v8 = FigSignalErrorAt();
  }
LABEL_22:
  uint64_t v9 = v8;
LABEL_14:
  if (cf) {
    CFRelease(cf);
  }
  if (v12) {
    CFRelease(v12);
  }
  if (v13) {
    CFRelease(v13);
  }
  return v9;
}

uint64_t FigTTMLParseAndCreateInlineClassNode(const __CFAllocator *a1, uint64_t a2, long long *a3, CFTypeRef *a4)
{
  CFTypeRef v14 = 0;
  CFTypeRef v15 = 0;
  CFTypeRef cf = 0;
  MEMORY[0x19970EE10](&FigTTMLGetLibXMLAccess_sFigLibXMLLoadOnce, figTTMLInitLibXMLLibrary);
  if (!s_accessLibXML)
  {
    uint64_t v10 = FigSignalErrorAt();
    goto LABEL_28;
  }
  int v8 = off_1E934F610(a2);
  if (v8 == 14 || v8 == 3)
  {
    uint64_t v10 = FigTTMLTextCreate(a1, a2, a3, &v15);
    if (!v10) {
      goto LABEL_18;
    }
    goto LABEL_28;
  }
  if (v8 != 1) {
    goto LABEL_18;
  }
  uint64_t v10 = FigTTMLCopyNamespaceAndLocalNameOfCurrentNode(a2, (const char **)&v14, (CFStringRef *)&cf);
  if (v10)
  {
LABEL_28:
    uint64_t v11 = v10;
    goto LABEL_20;
  }
  if (FigCFEqual() && FigCFEqual())
  {
    uint64_t v10 = FigTTMLSpanCreate(a1, a2, (uint64_t)a3, &v15);
    if (v10) {
      goto LABEL_28;
    }
  }
  else if (FigCFEqual())
  {
    if (FigCFEqual())
    {
      uint64_t v10 = FigTTMLBrCreate((uint64_t)a1, a2, (uint64_t)a3, &v15);
      if (v10) {
        goto LABEL_28;
      }
    }
  }
LABEL_18:
  uint64_t v11 = 0;
  if (a4)
  {
    *a4 = v15;
    CFTypeRef v15 = 0;
  }
LABEL_20:
  if (cf) {
    CFRelease(cf);
  }
  if (v14) {
    CFRelease(v14);
  }
  if (v15) {
    CFRelease(v15);
  }
  return v11;
}

uint64_t FigTTMLParseAndCreateAnimationClassNode(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  CFTypeRef v14 = 0;
  CFTypeRef v15 = 0;
  CFTypeRef cf = 0;
  MEMORY[0x19970EE10](&FigTTMLGetLibXMLAccess_sFigLibXMLLoadOnce, figTTMLInitLibXMLLibrary);
  if (!s_accessLibXML)
  {
    uint64_t v8 = FigSignalErrorAt();
    goto LABEL_21;
  }
  if (off_1E934F610(a2) != 1) {
    goto LABEL_9;
  }
  uint64_t v8 = FigTTMLCopyNamespaceAndLocalNameOfCurrentNode(a2, (const char **)&v14, (CFStringRef *)&cf);
  if (v8)
  {
LABEL_21:
    uint64_t v10 = v8;
    goto LABEL_13;
  }
  if (FigCFEqual() && FigCFEqual())
  {
    uint64_t v9 = FigTTMLSetCreate(a1, a2, a3, &v15);
    uint64_t v10 = v9;
    if (a4 && !v9)
    {
      CFTypeRef v11 = v15;
LABEL_11:
      uint64_t v10 = 0;
      *a4 = v11;
      CFTypeRef v15 = 0;
      goto LABEL_13;
    }
    goto LABEL_13;
  }
LABEL_9:
  if (a4)
  {
    CFTypeRef v11 = 0;
    goto LABEL_11;
  }
  uint64_t v10 = 0;
LABEL_13:
  if (cf) {
    CFRelease(cf);
  }
  if (v14) {
    CFRelease(v14);
  }
  if (v15) {
    CFRelease(v15);
  }
  return v10;
}

uint64_t FigTTMLParseTimeExpression(uint64_t a1, CFStringRef theString, CMTime *a3)
{
  long long v46 = *MEMORY[0x1E4F1F9F8];
  *(_OWORD *)&v62.unint64_t value = *MEMORY[0x1E4F1F9F8];
  CMTimeEpoch v6 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  v62.CMTimeEpoch epoch = v6;
  CFIndex Length = CFStringGetLength(theString);
  if (a3)
  {
    CMTimeValue v8 = Length;
    CFStringRef theStringa = theString;
    uint64_t v58 = 0;
    CMTimeValue v59 = Length;
    CharactersPtr = CFStringGetCharactersPtr(theString);
    CStringPtr = 0;
    CFArrayRef v56 = (UniChar *)CharactersPtr;
    if (!CharactersPtr) {
      CStringPtr = CFStringGetCStringPtr(theString, 0x600u);
    }
    long long v53 = 0u;
    long long v54 = 0u;
    long long v51 = 0u;
    long long v52 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    *(_OWORD *)buffer = 0u;
    long long v48 = 0u;
    CMTimeValue v60 = 0;
    CMTimeValue v61 = 0;
    CFArrayRef v57 = CStringPtr;
    *(_OWORD *)&v72.unint64_t value = v46;
    v72.CMTimeEpoch epoch = v6;
    uint64_t v69 = 0;
    memset(v68, 0, sizeof(v68));
    uint64_t v66 = 0;
    double v67 = 0.0;
    if (figTTMLParseCharacter(45, buffer, 0, v8, &v66)) {
      int32_t v11 = 1;
    }
    else {
      int32_t v11 = -1;
    }
    if (figTTMLParseTwoOrMoreDigits(buffer, v66, v8, &v66, (_DWORD *)&v69 + 1)
      || figTTMLParseCharacter(58, buffer, v66, v8, &v66)
      || figTTMLParseDigits(2u, buffer, v66, v8, &v66, (unsigned int *)&v69)
      || figTTMLParseCharacter(58, buffer, v66, v8, &v66)
      || figTTMLParseDigits(2u, buffer, v66, v8, &v66, (unsigned int *)&v68[8])
      || (int64_t v12 = v66, figTTMLParseFraction(buffer, v66, v8, &v66, &v67))
      && (!figTTMLParseCharacter(58, buffer, v12, v8, &v66)
       || !figTTMLParseCharacter(59, buffer, v12, v8, &v66))
      && !figTTMLParseTwoOrMoreDigits(buffer, v66, v8, &v66, &v68[4])
      && !figTTMLParseCharacter(46, buffer, v66, v8, &v66)
      && figTTMLParseOneOrMoreDigits(buffer, v66, v8, &v66, v68))
    {
      CMTimeValue v15 = 0;
      goto LABEL_43;
    }
    if (v69 < 0x3C && *(_DWORD *)&v68[8] < 0x3Du && *(_DWORD *)&v68[4] < *(_DWORD *)(a1 + 24))
    {
      unint64_t v13 = *(unsigned int *)&v68[8] + 60 * v69 + 3600 * HIDWORD(v69);
      if (FigCFEqual())
      {
        if (!*(void *)v68)
        {
LABEL_23:
          CMTimeMakeWithSeconds(&v72, v67 + (double)v13, 1000);
LABEL_24:
          CMTime time = v72;
          CMTimeMultiply(&v71, &time, v11);
          int v14 = 0;
          CMTime v72 = v71;
          CMTime v62 = v71;
          CMTimeValue v15 = v66;
LABEL_25:
          if (!v14 && v15 == v8) {
            goto LABEL_27;
          }
LABEL_43:
          lhs.unint64_t value = 0;
          LODWORD(v63.value) = 0;
          rhs.unint64_t value = 0;
          CMTime v72 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
          memset(&v71, 0, sizeof(v71));
          int32_t v23 = *(_DWORD *)(a1 + 24);
          CMTime time = *(CMTime *)(a1 + 28);
          CMTimeMultiply(&v71, &time, v23);
          if (figTTMLParseOneOrMoreDigits(buffer, 0, v8, &lhs, &v63)) {
            return FigSignalErrorAt();
          }
          figTTMLParseFraction(buffer, lhs.value, v8, &lhs, (double *)&rhs.value);
          unint64_t value = lhs.value;
          if (lhs.value < 0) {
            return FigSignalErrorAt();
          }
          if (lhs.value >= v8) {
            return FigSignalErrorAt();
          }
          CMTimeValue v26 = v59;
          if (v59 <= lhs.value) {
            return FigSignalErrorAt();
          }
          CFRange v27 = v56;
          if (v56)
          {
            unint64_t v28 = v58 + lhs.value;
          }
          else
          {
            if (v57)
            {
              UniChar v29 = v57[v58 + lhs.value];
LABEL_52:
              int64_t v30 = value + 1;
              if (v29 <= 0x6Cu)
              {
                if (v29 == 102)
                {
                  int v35 = 0;
                  lhs.unint64_t value = value + 1;
                  LODWORD(v24) = v63.value;
                  double v40 = *(double *)&rhs.value + (double)v24;
                  double v36 = 0.0;
                  double v37 = 0.0;
                  double v39 = 0.0;
LABEL_83:
                  double v38 = 0.0;
                  goto LABEL_84;
                }
                if (v29 != 104) {
                  return FigSignalErrorAt();
                }
                int v35 = 0;
                lhs.unint64_t value = value + 1;
                LODWORD(v24) = v63.value;
                double v36 = *(double *)&rhs.value + (double)v24;
                double v37 = 0.0;
                goto LABEL_81;
              }
              if (v29 == 116)
              {
                lhs.unint64_t value = value + 1;
                LODWORD(v24) = v63.value;
                double v38 = *(double *)&rhs.value + (double)v24;
                double v36 = 0.0;
                int v35 = 1;
                double v37 = 0.0;
                double v39 = 0.0;
                double v40 = 0.0;
LABEL_84:
                if (FigCFEqual())
                {
                  if (!v35)
                  {
                    double v43 = v37 + v36 * 3600.0 + v39;
LABEL_92:
                    CMTimeMakeWithSeconds(&v72, v43, 1000000);
                    CMTime v62 = v72;
                    CMTimeValue v15 = lhs.value;
                    goto LABEL_93;
                  }
LABEL_90:
                  CMTime time = *(CMTime *)(a1 + 148);
                  double v43 = v38 / CMTimeGetSeconds(&time);
                  goto LABEL_92;
                }
                if (FigCFEqual() || FigCFEqual())
                {
                  if (!v35)
                  {
                    CMTime time = v71;
                    double v43 = v37 + v36 * 3600.0 + v39 + v40 / CMTimeGetSeconds(&time);
                    goto LABEL_92;
                  }
                  goto LABEL_90;
                }
                if (!FigSignalErrorAt())
                {
LABEL_93:
                  if (v15 == v8)
                  {
LABEL_27:
                    uint64_t result = 0;
                    *a3 = v62;
                    return result;
                  }
                }
                return FigSignalErrorAt();
              }
              if (v29 == 115)
              {
                int v35 = 0;
                lhs.unint64_t value = value + 1;
                LODWORD(v24) = v63.value;
                double v39 = *(double *)&rhs.value + (double)v24;
LABEL_66:
                double v36 = 0.0;
                double v37 = 0.0;
LABEL_82:
                double v40 = 0.0;
                goto LABEL_83;
              }
              if (v29 != 109) {
                return FigSignalErrorAt();
              }
              if (v30 >= v8 || (CMTimeValue v31 = v59, v59 <= v30))
              {
LABEL_80:
                int v35 = 0;
                lhs.unint64_t value = value + 1;
                LODWORD(v24) = v63.value;
                double v37 = (*(double *)&rhs.value + (double)v24) * 60.0;
                double v36 = 0.0;
LABEL_81:
                double v39 = 0.0;
                goto LABEL_82;
              }
              CFStringRef v32 = v56;
              if (v56)
              {
                int64_t v33 = v58 + v30;
              }
              else
              {
                if (v57)
                {
                  UniChar v34 = v57[v58 + v30];
LABEL_78:
                  if (v34 == 115)
                  {
                    int v35 = 0;
                    lhs.unint64_t value = value + 2;
                    LODWORD(v24) = v63.value;
                    double v39 = (*(double *)&rhs.value + (double)v24) / 1000.0;
                    goto LABEL_66;
                  }
                  goto LABEL_80;
                }
                if (v61 <= v30 || (CMTimeValue v44 = v60, v60 > v30))
                {
                  CMTimeValue v45 = value - 3;
                  if (value < 3) {
                    CMTimeValue v45 = 0;
                  }
                  if (v45 + 64 < v59) {
                    CMTimeValue v31 = v45 + 64;
                  }
                  CMTimeValue v60 = v45;
                  CMTimeValue v61 = v31;
                  v75.locatiouint64_t n = v58 + v45;
                  v75.length = v31 - v45;
                  CFStringGetCharacters(theStringa, v75, buffer);
                  CMTimeValue v44 = v60;
                }
                int64_t v33 = v30 - v44;
                CFStringRef v32 = buffer;
              }
              UniChar v34 = v32[v33];
              goto LABEL_78;
            }
            if (v61 <= lhs.value || (CMTimeValue v41 = v60, v60 > lhs.value))
            {
              CMTimeValue v42 = lhs.value - 4;
              if (lhs.value < 4uLL) {
                CMTimeValue v42 = 0;
              }
              if (v42 + 64 < v59) {
                CMTimeValue v26 = v42 + 64;
              }
              CMTimeValue v60 = v42;
              CMTimeValue v61 = v26;
              v74.locatiouint64_t n = v58 + v42;
              v74.length = v26 - v42;
              CFStringGetCharacters(theStringa, v74, buffer);
              CMTimeValue v41 = v60;
            }
            unint64_t v28 = value - v41;
            CFRange v27 = buffer;
          }
          UniChar v29 = v27[v28];
          goto LABEL_52;
        }
LABEL_30:
        CMTimeValue v15 = 0;
        int v14 = 0;
        goto LABEL_25;
      }
      if (FigCFEqual())
      {
        if (*(_DWORD *)(a1 + 144)) {
          goto LABEL_23;
        }
        goto LABEL_30;
      }
      if (FigCFEqual())
      {
        memset(&v71, 0, sizeof(v71));
        int32_t v17 = *(_DWORD *)(a1 + 24);
        CMTime time = *(CMTime *)(a1 + 28);
        CMTimeMultiply(&v71, &time, v17);
        memset(&time, 0, sizeof(time));
        CMTimeMake(&time, *(unsigned int *)v68, *(_DWORD *)(a1 + 144));
        uint64_t v18 = *(unsigned int *)(a1 + 24);
        if (!v13 || 0xFFFFFFFFFFFFFFFFLL / v13 > (v18 + 1))
        {
          uint64_t v19 = *(unsigned int *)&v68[4];
          if (FigCFEqual())
          {
            LODWORD(v20) = v69;
            unint64_t v21 = -2
                * ((unint64_t)((double)v20 - floor((double)v20 / 10.0)) + (54 * HIDWORD(v69)));
          }
          else if (FigCFEqual())
          {
            LODWORD(v22) = v69;
            unint64_t v21 = -4 * (vcvtmd_u64_f64((double)v22 * 0.5 + (double)v22 / -20.0) + (27 * HIDWORD(v69)));
          }
          else
          {
            unint64_t v21 = 0;
          }
          if (v71.value < 0x80000000)
          {
            CMTimeMake(&lhs, v19 + v13 * v18 + v21, 1);
            CMTime rhs = time;
            CMTimeAdd(&v72, &lhs, &rhs);
            CMTime v63 = v72;
            CMTimeMultiplyByRatio(&rhs, &v63, v71.timescale, v71.value);
            CMTime v72 = rhs;
            goto LABEL_24;
          }
        }
      }
    }
    int v14 = FigSignalErrorAt();
    CMTimeValue v15 = 0;
    goto LABEL_25;
  }

  return FigSignalErrorAt();
}

uint64_t FigTTMLParseFrameRate(const __CFString *a1, _DWORD *a2)
{
  CFIndex Length = CFStringGetLength(a1);
  uint64_t v10 = 0;
  int v9 = 0;
  if (a2)
  {
    uint64_t v5 = Length;
    CFStringRef v19 = a1;
    uint64_t v22 = 0;
    CFIndex v23 = Length;
    CharactersPtr = CFStringGetCharactersPtr(a1);
    CStringPtr = 0;
    unint64_t v20 = CharactersPtr;
    if (!CharactersPtr) {
      CStringPtr = CFStringGetCStringPtr(a1, 0x600u);
    }
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    *(_OWORD *)buffer = 0u;
    long long v12 = 0u;
    unint64_t v21 = CStringPtr;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t result = figTTMLParseOneOrMoreDigits(buffer, 0, v5, &v10, &v9);
    if (!result)
    {
      if (v9)
      {
        uint64_t result = 0;
        *a2 = v9;
      }
      else
      {
        return FigSignalErrorAt();
      }
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t figTTMLParseOneOrMoreDigits(UniChar *buffer, uint64_t a2, uint64_t a3, void *a4, _DWORD *a5)
{
  uint64_t v10 = 0;
  uint64_t v11 = a2;
  if (a4 && a5)
  {
    uint64_t result = figTTMLParseDigits(1u, buffer, a2, a3, &v11, (unsigned int *)&v10 + 1);
    if (!result)
    {
      if (figTTMLParseDigits(1u, buffer, v11, a3, &v11, (unsigned int *)&v10))
      {
LABEL_7:
        uint64_t result = 0;
        *a4 = v11;
        *a5 = HIDWORD(v10);
      }
      else
      {
        while (HIDWORD(v10) <= 0x1745D173)
        {
          HIDWORD(v10) = v10 + 10 * HIDWORD(v10);
          if (figTTMLParseDigits(1u, buffer, v11, a3, &v11, (unsigned int *)&v10)) {
            goto LABEL_7;
          }
        }
        return 4294950725;
      }
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t FigTTMLParseFrameRateMultiplier(const __CFString *a1, CMTime *a2)
{
  CFIndex Length = CFStringGetLength(a1);
  uint64_t v11 = 0;
  if (a2)
  {
    uint64_t v5 = Length;
    CFStringRef v20 = a1;
    uint64_t v23 = 0;
    CFIndex v24 = Length;
    CharactersPtr = CFStringGetCharactersPtr(a1);
    CStringPtr = 0;
    unint64_t v21 = CharactersPtr;
    if (!CharactersPtr) {
      CStringPtr = CFStringGetCStringPtr(a1, 0x600u);
    }
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    *(_OWORD *)buffer = 0u;
    long long v13 = 0u;
    *(void *)CMTimeScale timescale = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    uint64_t v22 = CStringPtr;
    uint64_t result = figTTMLParseOneOrMoreDigits(buffer, 0, v5, &v11, &timescale[1]);
    if (!result)
    {
      uint64_t result = figTTMLParseOneOrMoreWhitespaces(buffer, v11, &v11);
      if (!result)
      {
        uint64_t result = figTTMLParseOneOrMoreDigits(buffer, v11, v5, &v11, timescale);
        if (!result)
        {
          if (timescale[1] && timescale[0])
          {
            CMTimeMake(&v9, timescale[1], timescale[0]);
            uint64_t result = 0;
            *a2 = v9;
          }
          else
          {
            return FigSignalErrorAt();
          }
        }
      }
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t figTTMLParseOneOrMoreWhitespaces(UniChar *buffer, int64_t a2, uint64_t *a3)
{
  if (!a3) {
    goto LABEL_39;
  }
  if (a2 < 0 || (int64_t v6 = *((void *)buffer + 20), v6 <= a2))
  {
    UniChar v8 = 0;
  }
  else
  {
    uint64_t v7 = *((void *)buffer + 17);
    if (v7)
    {
      UniChar v8 = *(_WORD *)(v7 + 2 * (*((void *)buffer + 19) + a2));
    }
    else
    {
      uint64_t v18 = *((void *)buffer + 18);
      if (v18)
      {
        UniChar v8 = *(char *)(v18 + *((void *)buffer + 19) + a2);
      }
      else
      {
        if (*((void *)buffer + 22) <= a2 || (int64_t v19 = *((void *)buffer + 21), v19 > a2))
        {
          int64_t v20 = a2 - 4;
          if ((unint64_t)a2 < 4) {
            int64_t v20 = 0;
          }
          if (v20 + 64 < v6) {
            int64_t v6 = v20 + 64;
          }
          *((void *)buffer + 21) = v20;
          *((void *)buffer + 22) = v6;
          v23.locatiouint64_t n = *((void *)buffer + 19) + v20;
          v23.length = v6 - v20;
          CFStringGetCharacters(*((CFStringRef *)buffer + 16), v23, buffer);
          int64_t v19 = *((void *)buffer + 21);
        }
        UniChar v8 = buffer[a2 - v19];
      }
    }
  }
  for (uint64_t i = 0; ; ++i)
  {
    uint64_t v10 = a2 + i;
    if (v8 > 0x20u || ((1 << v8) & 0x100002600) == 0) {
      break;
    }
    if (v10 <= -2 || (v11 = a2 + i + 1, uint64_t v12 = *((void *)buffer + 20), v12 <= v11))
    {
      UniChar v8 = 0;
    }
    else
    {
      uint64_t v13 = *((void *)buffer + 17);
      if (v13)
      {
        UniChar v8 = *(_WORD *)(v13 + 2 * (a2 + i + *((void *)buffer + 19)) + 2);
      }
      else
      {
        uint64_t v14 = *((void *)buffer + 18);
        if (v14)
        {
          UniChar v8 = *(char *)(v14 + *((void *)buffer + 19) + a2 + i + 1);
        }
        else
        {
          if (*((void *)buffer + 22) <= v11 || (uint64_t v15 = *((void *)buffer + 21), v15 > v11))
          {
            if ((unint64_t)v11 >= 4) {
              uint64_t v16 = a2 + i - 3;
            }
            else {
              uint64_t v16 = 0;
            }
            if (v16 + 64 < v12) {
              uint64_t v12 = v16 + 64;
            }
            *((void *)buffer + 21) = v16;
            *((void *)buffer + 22) = v12;
            v22.locatiouint64_t n = *((void *)buffer + 19) + v16;
            v22.length = v12 - v16;
            CFStringGetCharacters(*((CFStringRef *)buffer + 16), v22, buffer);
            uint64_t v15 = *((void *)buffer + 21);
          }
          UniChar v8 = buffer[a2 + 1 - v15 + i];
        }
      }
    }
  }
  if (i)
  {
    *a3 = v10;
    return 0;
  }
  else
  {
LABEL_39:
    return FigSignalErrorAt();
  }
}

uint64_t FigTTMLParsePixelAspectRatio(const __CFString *a1, uint64_t *a2)
{
  CFIndex Length = CFStringGetLength(a1);
  uint64_t v11 = 0;
  if (a2)
  {
    uint64_t v5 = Length;
    CFStringRef v20 = a1;
    uint64_t v23 = 0;
    CFIndex v24 = Length;
    CharactersPtr = CFStringGetCharactersPtr(a1);
    CStringPtr = 0;
    unint64_t v21 = CharactersPtr;
    if (!CharactersPtr) {
      CStringPtr = CFStringGetCStringPtr(a1, 0x600u);
    }
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    *(_OWORD *)buffer = 0u;
    long long v13 = 0u;
    uint64_t v10 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    CFRange v22 = CStringPtr;
    uint64_t result = figTTMLParseOneOrMoreDigits(buffer, 0, v5, &v11, (_DWORD *)&v10 + 1);
    if (!result)
    {
      uint64_t result = figTTMLParseOneOrMoreWhitespaces(buffer, v11, &v11);
      if (!result)
      {
        uint64_t result = figTTMLParseOneOrMoreDigits(buffer, v11, v5, &v11, &v10);
        if (!result)
        {
          if (HIDWORD(v10) && v10)
          {
            uint64_t v9 = FigGeometryAspectRatioMake();
            uint64_t result = 0;
            *a2 = v9;
          }
          else
          {
            return FigSignalErrorAt();
          }
        }
      }
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t FigTTMLParseActiveArea(const __CFString *a1, _OWORD *a2)
{
  v34[4] = *MEMORY[0x1E4F143B8];
  CFIndex Length = CFStringGetLength(a1);
  uint64_t v18 = 0;
  int v17 = 0;
  double v16 = 0.0;
  if (a2)
  {
    uint64_t v5 = Length;
    CFStringRef v27 = a1;
    uint64_t v30 = 0;
    CFIndex v31 = Length;
    CharactersPtr = CFStringGetCharactersPtr(a1);
    CStringPtr = 0;
    unint64_t v28 = CharactersPtr;
    if (!CharactersPtr) {
      CStringPtr = CFStringGetCStringPtr(a1, 0x600u);
    }
    uint64_t v8 = 0;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v22 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    *(_OWORD *)buffer = 0u;
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    UniChar v29 = CStringPtr;
    while (1)
    {
      uint64_t v9 = v18;
      if (v8 * 8)
      {
        uint64_t result = figTTMLParseOneOrMoreWhitespaces(buffer, v18, &v18);
        if (result) {
          return result;
        }
        uint64_t v9 = v18;
      }
      figTTMLParseOneOrMoreDigits(buffer, v9, v5, &v18, &v17);
      figTTMLParseFraction(buffer, v18, v5, &v18, &v16);
      uint64_t result = figTTMLParseString("%", buffer, v18, v5, &v18);
      if (result) {
        break;
      }
      LODWORD(v11) = v17;
      *(double *)&v34[v8++] = v16 + (double)v11;
      if (v8 == 4)
      {
        FigGeometryDimensionMake();
        FigGeometryDimensionMake();
        FigGeometryDimensionMake();
        FigGeometryDimensionMake();
        FigGeometryRectMake();
        uint64_t result = 0;
        *a2 = v12;
        a2[1] = v13;
        a2[2] = v14;
        a2[3] = v15;
        return result;
      }
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t figTTMLParseFraction(UniChar *buffer, int64_t a2, int64_t a3, void *a4, double *a5)
{
  uint64_t v14 = a2;
  unsigned int v13 = 0;
  if (a4 && a5)
  {
    uint64_t result = figTTMLParseCharacter(46, buffer, a2, a3, &v14);
    if (!result)
    {
      double v11 = 0.0;
      if (!figTTMLParseDigits(1u, buffer, v14, a3, &v14, &v13))
      {
        double v12 = 10.0;
        do
        {
          LODWORD(v10) = v13;
          double v11 = v11 + (double)v10 / v12;
          double v12 = v12 * 10.0;
        }
        while (!figTTMLParseDigits(1u, buffer, v14, a3, &v14, &v13));
      }
      uint64_t result = 0;
      *a4 = v14;
      *a5 = v11;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t figTTMLParseString(char *a1, UniChar *buffer, int64_t a3, int64_t a4, int64_t *a5)
{
  if (a5)
  {
    int64_t v7 = a3;
    char v9 = *a1;
    if (*a1)
    {
      uint64_t v11 = 0;
      if (a4 <= a3) {
        int64_t v12 = a3;
      }
      else {
        int64_t v12 = a4;
      }
      int64_t v13 = v12 - a3;
      while (v11 != v13)
      {
        if (v7 < 0 || (int64_t v14 = *((void *)buffer + 20), v14 <= v7))
        {
          UniChar v16 = 0;
        }
        else
        {
          uint64_t v15 = *((void *)buffer + 17);
          if (v15)
          {
            UniChar v16 = *(_WORD *)(v15 + 2 * (*((void *)buffer + 19) + v7));
          }
          else
          {
            uint64_t v17 = *((void *)buffer + 18);
            if (v17)
            {
              UniChar v16 = *(char *)(v17 + *((void *)buffer + 19) + v7);
            }
            else
            {
              if (*((void *)buffer + 22) <= v7 || (int64_t v18 = *((void *)buffer + 21), v18 > v7))
              {
                int64_t v19 = v7 - 4;
                if ((unint64_t)v7 < 4) {
                  int64_t v19 = 0;
                }
                if (v19 + 64 < v14) {
                  int64_t v14 = v19 + 64;
                }
                *((void *)buffer + 21) = v19;
                *((void *)buffer + 22) = v14;
                v21.locatiouint64_t n = *((void *)buffer + 19) + v19;
                v21.length = v14 - v19;
                CFStringGetCharacters(*((CFStringRef *)buffer + 16), v21, buffer);
                int64_t v18 = *((void *)buffer + 21);
              }
              UniChar v16 = buffer[v7 - v18];
            }
          }
        }
        if (v9 != v16) {
          break;
        }
        ++v7;
        char v9 = a1[++v11];
        if (!v9) {
          goto LABEL_26;
        }
      }
      return 4294950724;
    }
    else
    {
LABEL_26:
      uint64_t result = 0;
      *a5 = v7;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t FigTTMLParseTickRate(const __CFString *a1, CMTime *a2)
{
  CFIndex Length = CFStringGetLength(a1);
  *(void *)&value[1] = 0;
  if (a2)
  {
    uint64_t v5 = Length;
    CFStringRef v19 = a1;
    uint64_t v22 = 0;
    CFIndex v23 = Length;
    CharactersPtr = CFStringGetCharactersPtr(a1);
    CStringPtr = 0;
    long long v20 = CharactersPtr;
    if (!CharactersPtr) {
      CStringPtr = CFStringGetCStringPtr(a1, 0x600u);
    }
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    *(_OWORD *)buffer = 0u;
    long long v12 = 0u;
    value[0] = 0;
    CFRange v21 = CStringPtr;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t result = figTTMLParseOneOrMoreDigits(buffer, 0, v5, &value[1], value);
    if (!result)
    {
      if (value[0])
      {
        CMTimeMake(&v9, value[0], 1);
        uint64_t result = 0;
        *a2 = v9;
      }
      else
      {
        return FigSignalErrorAt();
      }
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t FigTTMLParseColor(const __CFString *a1, float *a2, float *a3, float *a4, float *a5)
{
  CFIndex Length = CFStringGetLength(a1);
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v24 = 0;
  if (a2 && a3 && a4 && a5)
  {
    int64_t v11 = Length;
    CFStringRef v35 = a1;
    uint64_t v38 = 0;
    CFIndex v39 = Length;
    CharactersPtr = CFStringGetCharactersPtr(a1);
    CStringPtr = 0;
    double v36 = CharactersPtr;
    if (!CharactersPtr) {
      CStringPtr = CFStringGetCStringPtr(a1, 0x600u);
    }
    long long v34 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    *(_OWORD *)buffer = 0u;
    double v37 = CStringPtr;
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    if (figTTMLParseCharacter(35, buffer, 0, v11, &v26))
    {
      if (figTTMLParseString("rgb", buffer, v26, v11, &v26))
      {
        MEMORY[0x19970EE10](&initNamedColorToRGBAMapOnce, figTTMLInitNamedColorToRGBAMap);
        if (!FigCFDictionaryGetInt32IfPresent()) {
          return FigSignalErrorAt();
        }
        uint64_t v25 = 0;
        HIDWORD(v24) = 0;
        int v14 = 0;
        goto LABEL_16;
      }
      int v23 = figTTMLParseString("a(", buffer, v26, v11, &v26);
      if (v23 && figTTMLParseCharacter(40, buffer, v26, v11, &v26)) {
        return FigSignalErrorAt();
      }
      uint64_t result = figTTMLParseOneOrMoreDigits(buffer, v26, v11, &v26, (_DWORD *)&v25 + 1);
      if (!result)
      {
        uint64_t result = figTTMLParseCharacter(44, buffer, v26, v11, &v26);
        if (!result)
        {
          uint64_t result = figTTMLParseOneOrMoreDigits(buffer, v26, v11, &v26, &v25);
          if (!result)
          {
            uint64_t result = figTTMLParseCharacter(44, buffer, v26, v11, &v26);
            if (!result)
            {
              uint64_t result = figTTMLParseOneOrMoreDigits(buffer, v26, v11, &v26, (_DWORD *)&v24 + 1);
              if (!result)
              {
                if (v23)
                {
                  LODWORD(v24) = 255;
                }
                else
                {
                  uint64_t result = figTTMLParseCharacter(44, buffer, v26, v11, &v26);
                  if (result) {
                    return result;
                  }
                  uint64_t result = figTTMLParseOneOrMoreDigits(buffer, v26, v11, &v26, &v24);
                  if (result) {
                    return result;
                  }
                }
                uint64_t result = figTTMLParseCharacter(41, buffer, v26, v11, &v26);
                if (!result) {
                  goto LABEL_17;
                }
              }
            }
          }
        }
      }
    }
    else
    {
      uint64_t result = figTTMLParseHexDigits(buffer, v26, v11, &v26, (unsigned int *)&v25 + 1);
      if (!result)
      {
        uint64_t result = figTTMLParseHexDigits(buffer, v26, v11, &v26, (unsigned int *)&v25);
        if (!result)
        {
          uint64_t result = figTTMLParseHexDigits(buffer, v26, v11, &v26, (unsigned int *)&v24 + 1);
          if (!result)
          {
            if (!figTTMLParseHexDigits(buffer, v26, v11, &v26, (unsigned int *)&v24))
            {
LABEL_17:
              if (HIDWORD(v25) < 0x100)
              {
                unsigned int v16 = v25;
                if (v25 < 0x100)
                {
                  unsigned int v17 = HIDWORD(v24);
                  if (HIDWORD(v24) < 0x100)
                  {
                    unsigned int v18 = v24;
                    if (v24 < 0x100)
                    {
                      uint64_t result = 0;
                      float v19 = (double)HIDWORD(v25) / 255.0;
                      *a2 = v19;
                      float v20 = (double)v16 / 255.0;
                      *a3 = v20;
                      float v21 = (double)v17 / 255.0;
                      *a4 = v21;
                      float v22 = (double)v18 / 255.0;
                      *a5 = v22;
                      return result;
                    }
                  }
                }
              }
              return FigSignalErrorAt();
            }
            int v14 = 255;
LABEL_16:
            LODWORD(v24) = v14;
            goto LABEL_17;
          }
        }
      }
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t figTTMLParseCharacter(int a1, UniChar *buffer, int64_t a3, int64_t a4, void *a5)
{
  if (a4 <= a3) {
    return 4294950724;
  }
  if (a3 < 0 || (int64_t v9 = *((void *)buffer + 20), v9 <= a3))
  {
    UniChar v11 = 0;
  }
  else
  {
    uint64_t v10 = *((void *)buffer + 17);
    if (v10)
    {
      UniChar v11 = *(_WORD *)(v10 + 2 * (*((void *)buffer + 19) + a3));
    }
    else
    {
      uint64_t v13 = *((void *)buffer + 18);
      if (v13)
      {
        UniChar v11 = *(char *)(v13 + *((void *)buffer + 19) + a3);
      }
      else
      {
        if (*((void *)buffer + 22) <= a3 || (int64_t v14 = *((void *)buffer + 21), v14 > a3))
        {
          int64_t v15 = a3 - 4;
          if ((unint64_t)a3 < 4) {
            int64_t v15 = 0;
          }
          if (v15 + 64 < v9) {
            int64_t v9 = v15 + 64;
          }
          *((void *)buffer + 21) = v15;
          *((void *)buffer + 22) = v9;
          CFStringRef v16 = (const __CFString *)*((void *)buffer + 16);
          v17.locatiouint64_t n = *((void *)buffer + 19) + v15;
          v17.length = v9 - v15;
          CFStringGetCharacters(v16, v17, buffer);
          int64_t v14 = *((void *)buffer + 21);
        }
        UniChar v11 = buffer[a3 - v14];
      }
    }
  }
  if (a1 != v11) {
    return 4294950724;
  }
  uint64_t result = 0;
  if (a5) {
    *a5 = a3 + 1;
  }
  return result;
}

uint64_t figTTMLParseHexDigits(UniChar *buffer, uint64_t a2, uint64_t a3, uint64_t *a4, unsigned int *a5)
{
  if (a4 && a5)
  {
    if (a3 - a2 >= 2)
    {
      unsigned int v9 = 0;
      uint64_t v10 = -a2;
      uint64_t v11 = a2 + 64;
      char v12 = 1;
      uint64_t v13 = a2;
      while (1)
      {
        char v14 = v12;
        uint64_t v15 = (unint64_t)v13 >= 4 ? 4 : v13;
        if (a2 < 0) {
          break;
        }
        uint64_t v16 = *((void *)buffer + 20);
        if (v16 <= v13) {
          break;
        }
        uint64_t v17 = *((void *)buffer + 17);
        if (v17)
        {
          UniChar v18 = *(_WORD *)(v17 + 2 * (v13 + *((void *)buffer + 19)));
        }
        else
        {
          uint64_t v19 = *((void *)buffer + 18);
          if (v19)
          {
            UniChar v18 = *(char *)(v19 + *((void *)buffer + 19) + v13);
          }
          else
          {
            if (*((void *)buffer + 22) <= v13 || (uint64_t v20 = *((void *)buffer + 21), v20 > v13))
            {
              uint64_t v21 = -v15;
              uint64_t v22 = v15 + v10;
              uint64_t v23 = v11 - v15;
              uint64_t v24 = v13 + v21;
              uint64_t v25 = v24 + 64;
              if (v24 + 64 >= v16) {
                uint64_t v25 = *((void *)buffer + 20);
              }
              *((void *)buffer + 21) = v24;
              *((void *)buffer + 22) = v25;
              if (v16 >= v23) {
                uint64_t v16 = v23;
              }
              v30.length = v16 + v22;
              v30.locatiouint64_t n = v24 + *((void *)buffer + 19);
              CFStringGetCharacters(*((CFStringRef *)buffer + 16), v30, buffer);
              uint64_t v20 = *((void *)buffer + 21);
            }
            UniChar v18 = buffer[v13 - v20];
          }
        }
        int v26 = v18;
        if ((unsigned __int16)(v18 - 48) >= 0xAu)
        {
          if (v18 - 65 >= 6)
          {
            if (v18 - 97 > 5) {
              return 4294950724;
            }
            int v27 = -87;
          }
          else
          {
            int v27 = -55;
          }
        }
        else
        {
          int v27 = -48;
        }
        if (v9 > 0xF0F0F0E) {
          return 4294950725;
        }
        char v12 = 0;
        unsigned int v9 = v27 + v26 + 16 * v9;
        ++v13;
        --v10;
        ++v11;
        if ((v14 & 1) == 0)
        {
          uint64_t result = 0;
          *a4 = v13;
          *a5 = v9;
          return result;
        }
      }
    }
    return 4294950724;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

CFStringRef FigTTMLCopyRGBAColorAsColorSyntax(float32x4_t a1, float32_t a2, float a3, float a4)
{
  uint64_t v4 = 0;
  LODWORD(v5) = 0;
  a1.f32[1] = a2;
  a1.i64[1] = __PAIR64__(LODWORD(a4), LODWORD(a3));
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  int32x4_t v10 = vcvtq_s32_f32(vmulq_f32(a1, (float32x4_t)vdupq_n_s32(0x437F0000u)));
  do
  {
    unsigned int v6 = v10.i32[v4] & ~(v10.i32[v4] >> 31);
    if (v6 >= 0xFF) {
      unsigned int v6 = 255;
    }
    uint64_t v5 = (const void *)(v6 | (v5 << 8));
    v10.i32[v4++] = v6;
  }
  while (v4 != 4);
  MEMORY[0x19970EE10](&initRGBAToNamedColorMap, figTTMLInitRGBAToNamedColorMap);
  CFNumberRef Value = CFDictionaryGetValue((CFDictionaryRef)sRGBAToNamedColorMap, v5);
  if (!Value) {
    return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"rgba(%d,%d,%d,%d)", v10.u32[0], v10.u32[1], v10.u32[2], v10.u32[3]);
  }
  uint64_t v8 = Value;
  CFRetain(Value);
  return (CFStringRef)v8;
}

uint64_t FigTTMLParseNumber(const __CFString *a1, float *a2)
{
  CFIndex Length = CFStringGetLength(a1);
  uint64_t v15 = 0;
  int v14 = 0;
  double v13 = 0.0;
  if (a1 && a2)
  {
    int64_t v5 = Length;
    CFStringRef v24 = a1;
    uint64_t v27 = 0;
    CFIndex v28 = Length;
    CharactersPtr = CFStringGetCharactersPtr(a1);
    CStringPtr = 0;
    uint64_t v25 = CharactersPtr;
    if (!CharactersPtr) {
      CStringPtr = CFStringGetCStringPtr(a1, 0x600u);
    }
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    *(_OWORD *)buffer = 0u;
    long long v17 = 0u;
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    int v26 = CStringPtr;
    int v8 = figTTMLParseCharacter(45, buffer, 0, v5, &v15);
    uint64_t result = figTTMLParseOneOrMoreDigits(buffer, v15, v5, &v15, &v14);
    if (!result)
    {
      figTTMLParseFraction(buffer, v15, v5, &v15, &v13);
      if (v15 == v5)
      {
        uint64_t result = 0;
        LODWORD(v10) = v14;
        double v11 = v13 + (double)v10;
        if (!v8) {
          double v11 = -v11;
        }
        float v12 = v11;
        *a2 = v12;
      }
      else
      {
        return FigSignalErrorAt();
      }
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t FigTTMLParseLength(const __CFString *a1, float *a2, int *a3)
{
  CFIndex Length = CFStringGetLength(a1);
  int64_t v17 = 0;
  int v16 = 0;
  double v15 = 0.0;
  if (a1 && a2 && a3)
  {
    int64_t v7 = Length;
    CFStringRef v26 = a1;
    uint64_t v29 = 0;
    CFIndex v30 = Length;
    CharactersPtr = CFStringGetCharactersPtr(a1);
    CStringPtr = 0;
    uint64_t v27 = CharactersPtr;
    if (!CharactersPtr) {
      CStringPtr = CFStringGetCStringPtr(a1, 0x600u);
    }
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    *(_OWORD *)buffer = 0u;
    long long v19 = 0u;
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    CFIndex v28 = CStringPtr;
    if (figTTMLParseString("normal", buffer, 0, v7, &v17))
    {
      if (figTTMLParseCharacter(45, buffer, v17, v7, &v17)) {
        float v11 = 1.0;
      }
      else {
        float v11 = -1.0;
      }
      figTTMLParseOneOrMoreDigits(buffer, v17, v7, &v17, &v16);
      figTTMLParseFraction(buffer, v17, v7, &v17, &v15);
      if (figTTMLParseString("%", buffer, v17, v7, &v17))
      {
        if (figTTMLParseString("px", buffer, v17, v7, &v17))
        {
          if (figTTMLParseString("em", buffer, v17, v7, &v17))
          {
            if (figTTMLParseString("c", buffer, v17, v7, &v17))
            {
              if (figTTMLParseString("rh", buffer, v17, v7, &v17))
              {
                if (figTTMLParseString("rw", buffer, v17, v7, &v17)) {
                  return FigSignalErrorAt();
                }
                int v13 = 4;
              }
              else
              {
                int v13 = 5;
              }
            }
            else
            {
              int v13 = 3;
            }
          }
          else
          {
            int v13 = 2;
          }
        }
        else
        {
          int v13 = 1;
        }
      }
      else
      {
        int v13 = 0;
      }
    }
    else
    {
      int v13 = 0;
      int v16 = 125;
      float v11 = 1.0;
    }
    uint64_t result = 0;
    LODWORD(v10) = v16;
    float v14 = (v15 + (double)v10) * v11;
    *a2 = v14;
    *a3 = v13;
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t FigTTMLParseFontFamilyAndCreateFontFamilyNameList(const __CFString *a1, void *a2)
{
  CFTypeRef v50 = 0;
  uint64_t v49 = 0;
  long long v47 = 0u;
  long long v48 = 0u;
  long long theString = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  *(_OWORD *)buffer = 0u;
  long long v39 = 0u;
  CFIndex Length = CFStringGetLength(a1);
  double v37 = 0;
  if (!a1 || !a2)
  {
    uint64_t Mutable = FigSignalErrorAt();
    goto LABEL_127;
  }
  int64_t v5 = Length;
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t Mutable = FigCaptionFontFamilyNameListCreateMutable();
  if (Mutable)
  {
LABEL_127:
    uint64_t v31 = Mutable;
    goto LABEL_121;
  }
  double v36 = a2;
  *(void *)&long long theString = a1;
  *((void *)&v47 + 1) = 0;
  *(void *)&long long v48 = v5;
  CharactersPtr = CFStringGetCharactersPtr(a1);
  CStringPtr = 0;
  *((void *)&theString + 1) = CharactersPtr;
  if (!CharactersPtr) {
    CStringPtr = CFStringGetCStringPtr(a1, 0x600u);
  }
  unint64_t v10 = 0;
  CFMutableStringRef v11 = 0;
  *((void *)&v48 + 1) = 0;
  uint64_t v49 = 0;
  *(void *)&long long v47 = CStringPtr;
  int64_t v12 = (int64_t)v37;
  if ((uint64_t)v37 >= v5)
  {
LABEL_117:
    uint64_t v31 = 0;
    void *v36 = v50;
    CFTypeRef v50 = 0;
    if (v11) {
      goto LABEL_118;
    }
    goto LABEL_119;
  }
  CFMutableStringRef v11 = 0;
  unint64_t v10 = 0;
  int v13 = (const void **)MEMORY[0x1E4F1FEA0];
  while (1)
  {
    if (v12)
    {
      figCSSParseLWSP(buffer, v12, v5, (int64_t *)&v37);
      uint64_t v14 = figTTMLParseCharacter(44, buffer, (int64_t)v37, v5, &v37);
      if (v14) {
        break;
      }
      figCSSParseLWSP(buffer, (int64_t)v37, v5, (int64_t *)&v37);
    }
    if (v10) {
      CFRelease(v10);
    }
    int64_t v15 = (int64_t)v37;
    *(void *)CFArrayRef v56 = v37;
    if (!figTTMLParseCFString(@"proportionalSerif", buffer, (int64_t)v37, v5, (int64_t *)v56))
    {
      long long v18 = v13;
      goto LABEL_37;
    }
    if (!figTTMLParseCFString(@"proportionalSansSerif", buffer, v15, v5, (int64_t *)v56))
    {
      long long v18 = (const void **)MEMORY[0x1E4F1FE98];
      goto LABEL_37;
    }
    if (!figTTMLParseCFString(@"monospaceSerif", buffer, v15, v5, (int64_t *)v56))
    {
      long long v18 = (const void **)MEMORY[0x1E4F1FE90];
      goto LABEL_37;
    }
    if (!figTTMLParseCFString(@"monospaceSansSerif", buffer, v15, v5, (int64_t *)v56))
    {
      long long v18 = (const void **)MEMORY[0x1E4F1FE88];
      goto LABEL_37;
    }
    if (!figTTMLParseCFString(@"default", buffer, v15, v5, (int64_t *)v56))
    {
      long long v18 = (const void **)MEMORY[0x1E4F1FE70];
      goto LABEL_37;
    }
    if (!figTTMLParseCFString(@"monospace", buffer, v15, v5, (int64_t *)v56))
    {
      long long v18 = (const void **)MEMORY[0x1E4F1FE80];
      goto LABEL_37;
    }
    if (!figTTMLParseCFString(@"serif", buffer, v15, v5, (int64_t *)v56))
    {
      long long v18 = (const void **)MEMORY[0x1E4F1FEB0];
      goto LABEL_37;
    }
    if (!figTTMLParseCFString(@"sansSerif", buffer, v15, v5, (int64_t *)v56))
    {
      long long v18 = (const void **)MEMORY[0x1E4F1FEA8];
LABEL_37:
      unint64_t v10 = *v18;
      double v37 = *(__CFString **)v56;
      uint64_t v14 = FigCaptionFontFamilyNameListAppend();
      if (v14) {
        break;
      }
      goto LABEL_38;
    }
    if (v11) {
      CFRelease(v11);
    }
    int v16 = v37;
    *(void *)CFArrayRef v56 = v37;
    long long v54 = 0;
    if (!figTTMLParseCharacter(34, buffer, (int64_t)v37, v5, v56))
    {
      if (!figTTMLCopyEscapedCharactersUntil(34, (uint64_t)buffer, *(int64_t *)v56, v5, (int64_t *)v56, &v54)&& !figTTMLParseCharacter(34, buffer, *(int64_t *)v56, v5, v56))
      {
LABEL_26:
        int64_t v17 = *(void *)v56;
        CFMutableStringRef v11 = v54;
        goto LABEL_27;
      }
      if (v54) {
        CFRelease(v54);
      }
    }
    *(void *)CFArrayRef v56 = v16;
    long long v54 = 0;
    if (!figTTMLParseCharacter(39, buffer, (int64_t)v16, v5, v56))
    {
      if (!figTTMLCopyEscapedCharactersUntil(39, (uint64_t)buffer, *(int64_t *)v56, v5, (int64_t *)v56, &v54)&& !figTTMLParseCharacter(39, buffer, *(int64_t *)v56, v5, v56))
      {
        goto LABEL_26;
      }
      if (v54) {
        CFRelease(v54);
      }
    }
    long long v51 = v16;
    CFMutableStringRef v11 = CFStringCreateMutable(v6, 0);
    long long v33 = v16;
    if ((uint64_t)v16 >= v5)
    {
      int64_t v17 = (int64_t)v16;
      goto LABEL_27;
    }
    CFMutableStringRef cf = 0;
    int64_t v17 = (int64_t)v16;
    do
    {
      long long v34 = v33;
      if (v16 != v33)
      {
        if (!figTTMLParseCharacter(44, buffer, (int64_t)v16, v5, 0)) {
          break;
        }
        figCSSParseLWSP(buffer, (int64_t)v16, v5, (int64_t *)&v51);
        long long v34 = v51;
        int64_t v17 = (int64_t)v16;
      }
      if (cf) {
        CFRelease(cf);
      }
      long long v54 = v34;
      CFMutableStringRef cf = CFStringCreateMutable(v6, 0);
      UniChar chars = 45;
      if (!figTTMLParseCharacter(45, buffer, (int64_t)v34, v5, &v54)) {
        CFStringAppendCharacters(cf, &chars, 1);
      }
      int v16 = v54;
      *(void *)CFArrayRef v56 = v54;
      if ((uint64_t)v54 >= v5) {
        goto LABEL_113;
      }
      if (((unint64_t)v54 & 0x8000000000000000) != 0 || (long long v19 = (char *)v48, (uint64_t)v48 <= (uint64_t)v54))
      {
        UniChar v22 = 0;
      }
      else
      {
        long long v20 = (UniChar *)*((void *)&theString + 1);
        if (*((void *)&theString + 1))
        {
          uint64_t v21 = (uint64_t)v54 + *((void *)&v47 + 1);
        }
        else
        {
          if ((void)v47)
          {
            UniChar v22 = *((char *)&v54->isa + *((void *)&v47 + 1) + v47);
            goto LABEL_63;
          }
          if (v49 <= (uint64_t)v54 || (uint64_t v23 = *((void *)&v48 + 1), *((uint64_t *)&v48 + 1) > (uint64_t)v54))
          {
            long long v24 = (char *)&v54[-1].length + 4;
            if ((unint64_t)v54 < 4) {
              long long v24 = 0;
            }
            if ((uint64_t)(v24 + 64) < (uint64_t)v48) {
              long long v19 = v24 + 64;
            }
            *((void *)&v48 + 1) = v24;
            uint64_t v49 = (uint64_t)v19;
            v57.locatiouint64_t n = (CFIndex)&v24[*((void *)&v47 + 1)];
            v57.length = v19 - v24;
            CFStringGetCharacters((CFStringRef)theString, v57, buffer);
            uint64_t v23 = *((void *)&v48 + 1);
          }
          uint64_t v21 = (uint64_t)v16 - v23;
          long long v20 = buffer;
        }
        UniChar v22 = v20[v21];
      }
LABEL_63:
      UniChar v55 = v22;
      if (v22 != 95 && (unsigned __int16)(v22 - 97) >= 0x1Au && v22 <= 0xEDu && (unsigned __int16)(v22 - 91) < 0xFFE6u)
      {
        if (!figTTMLParseEscape(buffer, (int64_t)v16, v5, v56, &v55))
        {
LABEL_80:
          UniChar v22 = v55;
          long long v25 = *(__CFString **)v56;
          goto LABEL_81;
        }
LABEL_113:
        if (cf) {
          CFRelease(cf);
        }
        if (CFStringGetLength(v11)) {
          goto LABEL_27;
        }
        uint64_t v31 = 4294950724;
        goto LABEL_121;
      }
      do
      {
        long long v25 = (__CFString *)((char *)&v16->isa + 1);
LABEL_81:
        UniChar v52 = v22;
        long long v54 = v25;
        CFStringAppendCharacters(cf, &v52, 1);
        int v16 = v54;
        if ((uint64_t)v54 >= v5) {
          goto LABEL_95;
        }
        *(void *)CFArrayRef v56 = v54;
        if (((unint64_t)v54 & 0x8000000000000000) != 0 || (CFStringRef v26 = (char *)v48, (uint64_t)v48 <= (uint64_t)v54))
        {
          UniChar v22 = 0;
        }
        else
        {
          uint64_t v27 = (UniChar *)*((void *)&theString + 1);
          if (*((void *)&theString + 1))
          {
            uint64_t v28 = (uint64_t)v54 + *((void *)&v47 + 1);
          }
          else
          {
            if ((void)v47)
            {
              UniChar v22 = *((char *)&v54->isa + *((void *)&v47 + 1) + v47);
              goto LABEL_88;
            }
            if (v49 <= (uint64_t)v54 || (uint64_t v29 = *((void *)&v48 + 1), *((uint64_t *)&v48 + 1) > (uint64_t)v54))
            {
              CFIndex v30 = (char *)&v54[-1].length + 4;
              if ((unint64_t)v54 < 4) {
                CFIndex v30 = 0;
              }
              if ((uint64_t)(v30 + 64) < (uint64_t)v48) {
                CFStringRef v26 = v30 + 64;
              }
              *((void *)&v48 + 1) = v30;
              uint64_t v49 = (uint64_t)v26;
              v58.locatiouint64_t n = (CFIndex)&v30[*((void *)&v47 + 1)];
              v58.length = v26 - v30;
              CFStringGetCharacters((CFStringRef)theString, v58, buffer);
              uint64_t v29 = *((void *)&v48 + 1);
            }
            uint64_t v28 = (uint64_t)v16 - v29;
            uint64_t v27 = buffer;
          }
          UniChar v22 = v27[v28];
        }
LABEL_88:
        UniChar v55 = v22;
      }
      while (v22 == 95
           || (unsigned __int16)((v22 & 0xFFDF) - 65) < 0x1Au
           || v22 > 0xEDu
           || v22 == 45
           || (unsigned __int16)(v22 - 58) >= 0xFFF6u);
      if (!figTTMLParseEscape(buffer, (int64_t)v16, v5, v56, &v55)) {
        goto LABEL_80;
      }
      int v16 = v54;
LABEL_95:
      long long v51 = v16;
      if ((__CFString *)v17 != v34)
      {
        v56[0] = 32;
        CFStringAppendCharacters(v11, v56, 1);
      }
      CFStringAppend(v11, cf);
    }
    while ((uint64_t)v16 < v5);
    if (cf) {
      CFRelease(cf);
    }
    int64_t v17 = (int64_t)v16;
LABEL_27:
    double v37 = (__CFString *)v17;
    uint64_t v14 = FigCaptionFontFamilyNameListAppend();
    unint64_t v10 = 0;
    if (v14) {
      break;
    }
LABEL_38:
    int64_t v12 = (int64_t)v37;
    if ((uint64_t)v37 >= v5) {
      goto LABEL_117;
    }
  }
  uint64_t v31 = v14;
  if (!v11) {
    goto LABEL_119;
  }
LABEL_118:
  CFRelease(v11);
LABEL_119:
  if (v10) {
    CFRelease(v10);
  }
LABEL_121:
  if (v50) {
    CFRelease(v50);
  }
  return v31;
}

uint64_t FigTTMLParseTextEmphasisSyntaxAndCreateCaptionTextEmphasis(uint64_t a1, void *a2)
{
  if (a1)
  {
    if (!a2) {
      return FigSignalErrorAt();
    }
    CFArrayRef v3 = (const __CFArray *)FigTTMLCFStringArrayCreateWithNMTOKENS(a1);
    CFArrayRef v4 = v3;
    if (v3 && CFArrayGetCount(v3) >= 1)
    {
      int v5 = 0;
      CFIndex v6 = 0;
      int v7 = 1;
      char v8 = 1;
      while (1)
      {
        if (v8)
        {
          if (CFArrayGetCount(v4) <= v6)
          {
            int v7 = 2;
          }
          else
          {
            MEMORY[0x19970EE10](&initTextEmphasisParseMapOnce, figTTMLInitTextEmphasisParseMap);
            CFArrayGetValueAtIndex(v4, v6);
            int Int32IfPresent = FigCFDictionaryGetInt32IfPresent();
            int v7 = 1;
            if (Int32IfPresent) {
              ++v6;
            }
            else {
              int v7 = 13;
            }
          }
        }
        switch(v5)
        {
          case 0:
            char v8 = 0;
            int v5 = 1;
            goto LABEL_23;
          case 1:
            char v8 = 0;
            int v5 = 2;
            goto LABEL_23;
          case 2:
            char v8 = 0;
            int v5 = 3;
            goto LABEL_23;
          case 3:
            char v8 = 0;
            int v5 = 4;
            goto LABEL_23;
          case 4:
            char v8 = 0;
            int v5 = 5;
            goto LABEL_23;
          case 5:
            char v8 = 0;
            int v5 = 6;
            goto LABEL_23;
          case 6:
            char v8 = 0;
            if (v7 == 2) {
              int v5 = 7;
            }
            else {
              int v5 = 8;
            }
            goto LABEL_23;
          case 7:
          case 8:
            if (v5 == 8 || v7 == 13)
            {
              uint64_t v10 = FigSignalErrorAt();
              if (v10) {
                goto LABEL_31;
              }
            }
            uint64_t v10 = FigCaptionTextEmphasisCreate();
            if (v10) {
              goto LABEL_31;
            }
            uint64_t v11 = 0;
            *a2 = 0;
            if (v4) {
              goto LABEL_35;
            }
            return v11;
          default:
            char v8 = 0;
LABEL_23:
            if (v5 != 8 && v7 == 13)
            {
              int v7 = 13;
              int v5 = 8;
              char v8 = 0;
            }
            break;
        }
      }
    }
    uint64_t v10 = FigSignalErrorAt();
LABEL_31:
    uint64_t v11 = v10;
    if (v4) {
LABEL_35:
    }
      CFRelease(v4);
    return v11;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigTTMLParseTextShadowSyntaxAndCreateCaptionTextShadowList(uint64_t a1, CFTypeRef *a2)
{
  CFTypeRef v48 = 0;
  CFTypeRef v49 = 0;
  v46[1] = 0;
  CFIndex v47 = 0;
  CFTypeRef cf = 0;
  v46[0] = 0;
  if (!a1 || !a2)
  {
    uint64_t v11 = FigSignalErrorAt();
    CFTypeRef v9 = 0;
    CFArrayRef v4 = 0;
    goto LABEL_9;
  }
  CFArrayRef v3 = (const __CFArray *)FigTTMLCFStringArrayCreateWithNMTOKENS(a1);
  CFArrayRef v4 = v3;
  if (!v3 || (CFIndex Count = CFArrayGetCount(v3), Count <= 0))
  {
    uint64_t v11 = FigSignalErrorAt();
    CFTypeRef v9 = 0;
LABEL_9:
    char v8 = 0;
    goto LABEL_102;
  }
  CFIndex v6 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  long long v39 = a2;
  if (Count == 1)
  {
    NextTokeuint64_t n = figTTMLTextShadowParseGetNextToken(v4, 0, (CFIndex *)&v50, 0, 0);
    if (NextToken == 3)
    {
      char v8 = 0;
      CFTypeRef v9 = 0;
      CFMutableArrayRef v10 = 0;
LABEL_98:
      uint64_t None = FigCaptionTextShadowListCreateNone();
      if (None)
      {
        uint64_t v11 = None;
      }
      else
      {
LABEL_99:
        uint64_t v11 = 0;
        CFTypeRef *v39 = v49;
        CFTypeRef v49 = 0;
      }
LABEL_100:
      if (v10) {
LABEL_101:
      }
        CFRelease(v10);
      goto LABEL_102;
    }
  }
  else
  {
    NextTokeuint64_t n = 1;
  }
  int v38 = NextToken;
  CFAllocatorRef v12 = *v6;
  uint64_t Mutable = CFArrayCreateMutable(*v6, 0, MEMORY[0x1E4F1D510]);
  CFArrayRef v40 = v4;
  if (Mutable)
  {
    CFIndex v41 = CFArrayGetCount(v4);
    if (v41 >= 1)
    {
      CFStringRef v14 = 0;
      for (CFIndex i = 0; i != v41; ++i)
      {
        CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v4, i);
        CFIndex Length = CFStringGetLength(ValueAtIndex);
        v57.locatiouint64_t n = 0;
        v57.length = Length;
        CFArrayRef Results = CFStringCreateArrayWithFindResults(v12, ValueAtIndex, @",", v57, 0);
        if (Results)
        {
          CFArrayRef v19 = Results;
          CFIndex v42 = Length;
          CFAllocatorRef allocator = (CFAllocatorRef)i;
          CFAllocatorRef v20 = v12;
          if (CFArrayGetCount(Results) < 1)
          {
            CFIndex v22 = 0;
          }
          else
          {
            CFIndex v21 = 0;
            CFIndex v22 = 0;
            do
            {
              uint64_t v23 = (CFIndex *)CFArrayGetValueAtIndex(v19, v21);
              CFIndex v25 = *v23;
              CFIndex v24 = v23[1];
              CFIndex v26 = *v23 - v22;
              if (v26 >= 1)
              {
                if (v14) {
                  CFRelease(v14);
                }
                v54.locatiouint64_t n = v22;
                v54.length = v26;
                CFStringRef v14 = CFStringCreateWithSubstring(v20, ValueAtIndex, v54);
                CFArrayAppendValue(Mutable, v14);
              }
              if (v24 >= 1)
              {
                if (v14) {
                  CFRelease(v14);
                }
                v55.locatiouint64_t n = v25;
                v55.length = v24;
                CFStringRef v14 = CFStringCreateWithSubstring(v20, ValueAtIndex, v55);
                CFArrayAppendValue(Mutable, v14);
              }
              CFIndex v22 = v24 + v25;
              ++v21;
            }
            while (v21 < CFArrayGetCount(v19));
          }
          CFAllocatorRef v12 = v20;
          if (v42 > v22)
          {
            if (v14) {
              CFRelease(v14);
            }
            v56.locatiouint64_t n = v22;
            v56.length = v42 - v22;
            CFStringRef v14 = CFStringCreateWithSubstring(v20, ValueAtIndex, v56);
            CFArrayAppendValue(Mutable, v14);
          }
          CFRelease(v19);
          CFArrayRef v4 = v40;
          CFIndex i = (CFIndex)allocator;
        }
        else
        {
          CFArrayAppendValue(Mutable, ValueAtIndex);
        }
      }
      if (v14) {
        CFRelease(v14);
      }
    }
  }
  else
  {
    FigSignalErrorAt();
  }
  char v8 = CFArrayCreateMutable(v12, 0, MEMORY[0x1E4F1D510]);
  if (!v8)
  {
    uint64_t v11 = FigSignalErrorAt();
    if (!Mutable) {
      goto LABEL_44;
    }
    goto LABEL_43;
  }
  uint64_t v53 = 0;
  CFAllocatorRef v50 = CFGetAllocator(v4);
  CFMutableArrayRef theArray = v8;
  unint64_t value = 0;
  FigCFArrayApplyFunction();
  if (value)
  {
    CFArrayAppendValue(theArray, value);
    if (value)
    {
      CFRelease(value);
      uint64_t v11 = 0;
      unint64_t value = 0;
      if (!Mutable) {
        goto LABEL_44;
      }
      goto LABEL_43;
    }
  }
  uint64_t v11 = 0;
  if (Mutable) {
LABEL_43:
  }
    CFRelease(Mutable);
LABEL_44:
  if (!v11)
  {
    CFAllocatorRef allocatora = v12;
    CFMutableArrayRef v10 = 0;
    CFTypeRef v9 = 0;
    BOOL v27 = 1;
    int v28 = v38;
    while (1)
    {
      if (v27)
      {
        if (cf)
        {
          CFRelease(cf);
          CFTypeRef cf = 0;
        }
        int v28 = figTTMLTextShadowParseGetNextToken(v8, v47, &v47, v46, &cf);
      }
      switch((int)v11)
      {
        case 0:
          BOOL v27 = 0;
          LODWORD(v11) = 1;
          goto LABEL_86;
        case 1:
          BOOL v27 = 0;
          LODWORD(v11) = 2;
          goto LABEL_86;
        case 2:
          BOOL v29 = v28 == 3;
          BOOL v27 = v28 == 3;
          int v30 = 3;
          int v31 = 6;
          goto LABEL_66;
        case 3:
          BOOL v27 = 0;
          LODWORD(v11) = 4;
          goto LABEL_86;
        case 4:
          BOOL v27 = 0;
          LODWORD(v11) = 6;
          goto LABEL_86;
        case 5:
          if ((v28 | 4) != 6) {
            goto LABEL_80;
          }
          if (!v10)
          {
            CFMutableArrayRef v10 = CFArrayCreateMutable(allocatora, 0, MEMORY[0x1E4F1D510]);
            if (!v10)
            {
              uint64_t v11 = FigSignalErrorAt();
              goto LABEL_122;
            }
          }
          uint64_t v32 = FigCaptionTextShadowCreate();
          if (v32)
          {
            uint64_t v11 = v32;
            CFArrayRef v4 = v40;
            goto LABEL_101;
          }
          CFArrayAppendValue(v10, v48);
          if (v48)
          {
            CFRelease(v48);
            CFTypeRef v48 = 0;
          }
          if (v9) {
            CFRelease(v9);
          }
          CFTypeRef v9 = 0;
          BOOL v29 = v28 == 6;
          BOOL v27 = v28 == 6;
          int v30 = 10;
          int v31 = 4;
LABEL_66:
          if (v29) {
            LODWORD(v11) = v31;
          }
          else {
            LODWORD(v11) = v30;
          }
LABEL_86:
          if (v11 != 12 && v28 == 7)
          {
            BOOL v27 = 0;
            LODWORD(v11) = 12;
          }
          break;
        case 6:
          if (v28 != 4) {
            goto LABEL_80;
          }
          LODWORD(v11) = 7;
          BOOL v27 = 1;
          goto LABEL_86;
        case 7:
          if (v28 != 4) {
            goto LABEL_80;
          }
          LODWORD(v11) = 8;
          BOOL v27 = 1;
          goto LABEL_86;
        case 8:
          BOOL v27 = 0;
          LODWORD(v11) = 5;
          switch(v28)
          {
            case 2:
            case 6:
              goto LABEL_86;
            case 4:
              LODWORD(v11) = 9;
              BOOL v27 = 1;
              break;
            case 5:
              goto LABEL_78;
            default:
              goto LABEL_80;
          }
          goto LABEL_86;
        case 9:
          BOOL v27 = 0;
          LODWORD(v11) = 5;
          if (v28 == 2 || v28 == 6) {
            goto LABEL_86;
          }
          if (v28 == 5)
          {
LABEL_78:
            if (cf) {
              CFTypeRef v9 = CFRetain(cf);
            }
            else {
              CFTypeRef v9 = 0;
            }
            BOOL v27 = 1;
          }
          else
          {
LABEL_80:
            BOOL v27 = 0;
            LODWORD(v11) = 12;
          }
          goto LABEL_86;
        case 10:
          BOOL v27 = 0;
          if (v28 == 2) {
            LODWORD(v11) = 11;
          }
          else {
            LODWORD(v11) = 12;
          }
          goto LABEL_86;
        case 11:
        case 12:
          if (v11 == 12 || v28 == 7)
          {
            uint64_t v34 = FigSignalErrorAt();
            if (v34)
            {
              uint64_t v11 = v34;
              CFArrayRef v4 = v40;
              goto LABEL_100;
            }
          }
          CFArrayRef v4 = v40;
          if (!v10 || !CFArrayGetCount(v10)) {
            goto LABEL_98;
          }
          uint64_t v35 = FigCaptionTextShadowListCreate();
          if (!v35) {
            goto LABEL_99;
          }
          uint64_t v11 = v35;
          goto LABEL_101;
        default:
          BOOL v27 = 0;
          goto LABEL_86;
      }
    }
  }
  CFTypeRef v9 = 0;
LABEL_122:
  CFArrayRef v4 = v40;
LABEL_102:
  if (cf) {
    CFRelease(cf);
  }
  if (v9) {
    CFRelease(v9);
  }
  if (v8) {
    CFRelease(v8);
  }
  if (v4) {
    CFRelease(v4);
  }
  if (v48) {
    CFRelease(v48);
  }
  if (v49) {
    CFRelease(v49);
  }
  return v11;
}

uint64_t figTTMLTextShadowParseGetNextToken(CFArrayRef theArray, CFIndex a2, CFIndex *a3, uint64_t *a4, void *a5)
{
  CFArrayRef v9 = theArray;
  if (theArray) {
    CFMutableArrayRef theArray = (CFArrayRef)CFArrayGetCount(theArray);
  }
  uint64_t v10 = *MEMORY[0x1E4F216B8];
  uint64_t v11 = *(void *)(MEMORY[0x1E4F216B8] + 8);
  if ((uint64_t)theArray <= a2)
  {
    CGColorSRGB = 0;
    uint64_t v14 = 2;
  }
  else
  {
    MEMORY[0x19970EE10](&initTextShadowParseMapOnce, figTTMLInitTextShadowParseMap);
    unsigned int v20 = 1;
    CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v9, a2);
    if (FigCFDictionaryGetInt32IfPresent())
    {
      CGColorSRGB = 0;
      uint64_t v14 = v20;
      ++a2;
    }
    else
    {
      uint64_t v10 = FigTTMLParseLengthSyntax(ValueAtIndex);
      uint64_t v11 = v16;
      if ((v16 & 0x100000000) != 0)
      {
        CGColorSRGB = 0;
        ++a2;
        uint64_t v14 = 4;
      }
      else
      {
        int v19 = 0;
        uint64_t v18 = 0;
        int v17 = 0;
        if (FigTTMLParseColor(ValueAtIndex, (float *)&v19, (float *)&v18 + 1, (float *)&v18, (float *)&v17))
        {
          CGColorSRGB = 0;
          uint64_t v14 = 7;
        }
        else
        {
          CGColorSRGB = (const void *)FigCreateCGColorSRGB();
          ++a2;
          uint64_t v14 = 5;
        }
      }
    }
  }
  *a3 = a2;
  if (a4)
  {
    *a4 = v10;
    a4[1] = v11;
  }
  if (a5)
  {
    *a5 = CGColorSRGB;
  }
  else if (CGColorSRGB)
  {
    CFRelease(CGColorSRGB);
  }
  return v14;
}

uint64_t FigTTMLParseRubyReserveSyntaxAndCreateCaptionRubyReserve(uint64_t a1, void *a2)
{
  if (a1)
  {
    if (a2)
    {
      CFArrayRef v3 = (const __CFArray *)FigTTMLCFStringArrayCreateWithNMTOKENS(a1);
      if (v3)
      {
        CFArrayRef v4 = v3;
        CFIndex Count = CFArrayGetCount(v3);
        if ((unint64_t)(Count - 3) >= 0xFFFFFFFFFFFFFFFELL)
        {
          CFIndex v6 = Count;
          CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v4, 0);
          if (ValueAtIndex)
          {
            char v8 = ValueAtIndex;
            if (CFEqual(ValueAtIndex, @"none"))
            {
              if (v6 == 1)
              {
                uint64_t None = FigCaptionRubyReserveCreateNone();
                if (None) {
                  goto LABEL_26;
                }
LABEL_22:
                uint64_t v12 = 0;
                *a2 = 0;
LABEL_23:
                CFRelease(v4);
                return v12;
              }
              goto LABEL_25;
            }
            if (!CFEqual(v8, @"before")
              && !CFEqual(v8, @"after")
              && !CFEqual(v8, @"outside")
              && !CFEqual(v8, @"both"))
            {
              FigSignalErrorAt();
            }
            if (v6 != 2)
            {
LABEL_21:
              uint64_t None = FigCaptionRubyReserveCreate();
              if (!None) {
                goto LABEL_22;
              }
LABEL_26:
              uint64_t v12 = None;
              goto LABEL_23;
            }
            CFStringRef v11 = (const __CFString *)CFArrayGetValueAtIndex(v4, 1);
            if (v11)
            {
              FigTTMLParseLengthSyntax(v11);
              goto LABEL_21;
            }
          }
        }
LABEL_25:
        uint64_t None = FigSignalErrorAt();
        goto LABEL_26;
      }
    }
  }

  return FigSignalErrorAt();
}

uint64_t FigTTMLNodeGetParameters(uint64_t ParentNode, void *a2)
{
  do
  {
    uint64_t v3 = ParentNode;
    ParentNode = FigTTMLNodeGetParentNode();
  }
  while (ParentNode);

  return FigTTMLRootGetParameters(v3, a2);
}

uint64_t FigTTMLNodeUseDefaultWhitespaceHandling(uint64_t a1)
{
  if (!a1) {
    return 1;
  }
  while (1)
  {
    unint64_t value = 0;
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(DerivedStorage + 24), @"http://www.w3.org/XML/1998/namespace space", (const void **)&value))
    {
      if (CFEqual(value, @"default")) {
        return 1;
      }
      if (CFEqual(value, @"preserve")) {
        break;
      }
    }
    if (!FigTTMLNodeGetParentNode()) {
      return 1;
    }
  }
  return 0;
}

__CFString *FigTTMLCopyStringWithDefaultWhitespaceHandling(const __CFString *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  uint64_t Mutable = CFStringCreateMutable(v2, 0);
  CFIndex Length = CFStringGetLength(a1);
  CFStringRef v35 = a1;
  uint64_t v38 = 0;
  CFIndex v39 = Length;
  CharactersPtr = CFStringGetCharactersPtr(a1);
  CStringPtr = 0;
  double v36 = CharactersPtr;
  if (!CharactersPtr) {
    CStringPtr = CFStringGetCStringPtr(a1, 0x600u);
  }
  double v37 = CStringPtr;
  int64_t v40 = 0;
  int64_t v41 = 0;
  if (Length >= 1)
  {
    uint64_t v7 = 0;
    int64_t v8 = 0;
    int v9 = 0;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    uint64_t v10 = 64;
    *(_OWORD *)buffer = 0u;
    long long v28 = 0u;
    do
    {
      if ((unint64_t)v8 >= 4) {
        uint64_t v11 = 4;
      }
      else {
        uint64_t v11 = v8;
      }
      UniChar chars = 0;
      CFIndex v12 = v39;
      if (v39 <= v8) {
        goto LABEL_29;
      }
      if (v36)
      {
        UniChar v13 = v36[v8 + v38];
      }
      else if (v37)
      {
        UniChar v13 = v37[v38 + v8];
      }
      else
      {
        int64_t v14 = v40;
        if (v41 <= v8 || v40 > v8)
        {
          uint64_t v16 = -v11;
          uint64_t v17 = v11 + v7;
          uint64_t v18 = v10 - v11;
          int64_t v19 = v8 + v16;
          CFIndex v20 = v19 + 64;
          if (v19 + 64 >= v39) {
            CFIndex v20 = v39;
          }
          int64_t v40 = v19;
          int64_t v41 = v20;
          if (v39 >= v18) {
            CFIndex v12 = v18;
          }
          v42.length = v12 + v17;
          v42.locatiouint64_t n = v19 + v38;
          CFStringGetCharacters(v35, v42, buffer);
          int64_t v14 = v40;
        }
        UniChar v13 = buffer[v8 - v14];
      }
      UniChar chars = v13;
      unsigned int v21 = v13;
      uint64_t v22 = (1 << v13) & 0x100002600;
      if (v21 > 0x20 || v22 == 0)
      {
LABEL_29:
        CFStringAppendCharacters(Mutable, &chars, 1);
        int v9 = 0;
      }
      else if (v9)
      {
        int v9 = 1;
      }
      else
      {
        UniChar v25 = 32;
        int v9 = 1;
        CFStringAppendCharacters(Mutable, &v25, 1);
      }
      ++v8;
      --v7;
      ++v10;
    }
    while (Length != v8);
  }
  return Mutable;
}

uint64_t FigTTMLParseCellResolution(const __CFString *a1, _DWORD *a2, _DWORD *a3)
{
  CFIndex Length = CFStringGetLength(a1);
  uint64_t v11 = 0;
  CFStringRef v20 = a1;
  uint64_t v23 = 0;
  CFIndex v24 = Length;
  CharactersPtr = CFStringGetCharactersPtr(a1);
  CStringPtr = 0;
  unsigned int v21 = CharactersPtr;
  if (!CharactersPtr) {
    CStringPtr = CFStringGetCStringPtr(a1, 0x600u);
  }
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  *(_OWORD *)buffer = 0u;
  long long v13 = 0u;
  uint64_t v10 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v22 = CStringPtr;
  uint64_t result = figTTMLParseOneOrMoreDigits(buffer, 0, Length, &v11, (_DWORD *)&v10 + 1);
  if (!result)
  {
    uint64_t result = figTTMLParseOneOrMoreWhitespaces(buffer, v11, &v11);
    if (!result)
    {
      uint64_t result = figTTMLParseOneOrMoreDigits(buffer, v11, Length, &v11, &v10);
      if (!result)
      {
        *a2 = HIDWORD(v10);
        *a3 = v10;
      }
    }
  }
  return result;
}

uint64_t FigTTMLParsePixelResolution(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  CFArrayRef v5 = (const __CFArray *)FigTTMLCFStringArrayCreateWithNMTOKENS();
  if (v5)
  {
    CFArrayRef v6 = v5;
    if (CFArrayGetCount(v5) == 2
      && (CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v6, 0),
          double v8 = COERCE_DOUBLE(FigTTMLParseLengthSyntax(ValueAtIndex)),
          uint64_t v10 = v9,
          CFStringRef v11 = (const __CFString *)CFArrayGetValueAtIndex(v6, 1),
          double v12 = COERCE_DOUBLE(FigTTMLParseLengthSyntax(v11)),
          (v10 & 0x100000000) != 0)
      && v10 == 1886920736
      && (v13 & 0x100000000) != 0
      && v13 == 1886920736)
    {
      uint64_t v14 = 0;
      *a2 = v8;
      *a3 = v12;
    }
    else
    {
      uint64_t v14 = FigSignalErrorAt();
    }
    CFRelease(v6);
    return v14;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigTTMLParseTextCombineDigits(const __CFString *a1, int *a2)
{
  uint64_t v11 = 0;
  unsigned int v10 = 2;
  CFIndex Length = CFStringGetLength(a1);
  if (a2)
  {
    int64_t v5 = Length;
    CFStringRef v20 = a1;
    uint64_t v23 = 0;
    CFIndex v24 = Length;
    CharactersPtr = CFStringGetCharactersPtr(a1);
    CStringPtr = 0;
    unsigned int v21 = CharactersPtr;
    if (!CharactersPtr) {
      CStringPtr = CFStringGetCStringPtr(a1, 0x600u);
    }
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    *(_OWORD *)buffer = 0u;
    long long v13 = 0u;
    uint64_t v22 = CStringPtr;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    uint64_t result = figTTMLParseString("digits", buffer, 0, v5, &v11);
    if (!result)
    {
      if (v11 == v5) {
        goto LABEL_8;
      }
      uint64_t result = figTTMLParseOneOrMoreWhitespaces(buffer, v11, &v11);
      if (result) {
        return result;
      }
      if (v11 == v5)
      {
LABEL_8:
        int v9 = 2;
      }
      else
      {
        uint64_t result = figTTMLParseOneOrMoreDigits(buffer, v11, v5, &v11, &v10);
        if (result) {
          return result;
        }
        int v9 = v10;
        if (v10 >= 5) {
          return FigSignalErrorAt();
        }
      }
      uint64_t result = 0;
      *a2 = v9;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t FigTTMLParsePositionSyntaxAndCreateCaptionPosition(uint64_t a1, void *a2)
{
  CFTypeRef v56 = 0;
  if (a1 && a2)
  {
    CFArrayRef v3 = (const __CFArray *)FigTTMLCFStringArrayCreateWithNMTOKENS(a1);
    CFArrayRef v4 = v3;
    if (!v3) {
      goto LABEL_13;
    }
    CFIndex Count = CFArrayGetCount(v3);
    if ((unint64_t)(Count - 5) <= 0xFFFFFFFFFFFFFFFBLL) {
      goto LABEL_13;
    }
    CFIndex v6 = Count;
    CFIndex v7 = 0;
    *(void *)&long long v8 = 0x200000002;
    *((void *)&v8 + 1) = 0x200000002;
    long long v50 = *MEMORY[0x1E4F216B0];
    long long v51 = v50;
    long long v48 = v50;
    long long v49 = v50;
    long long v46 = v50;
    long long v47 = v8;
    int32x2_t v52 = 0;
    long long v53 = v50;
    long long v54 = v50;
    int v9 = (void *)&v48 + 1;
    do
    {
      NextTokeuint64_t n = figTTMLPositionParseGetNextToken(v4, v7, v57);
      if (NextToken == 8)
      {
        CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v4, v7);
        *(v9 - 1) = FigTTMLParseLengthSyntax(ValueAtIndex);
        *int v9 = v12;
      }
      *((_DWORD *)&v47 + v7++) = NextToken;
      v9 += 2;
    }
    while (v6 != v7);
    CFIndex v55 = v6;
    if (figTTMLPositionParseGetNextToken(v4, v6, &v55) == 2)
    {
      switch(v6)
      {
        case 1:
          switch((int)v47)
          {
            case 3:
              int v13 = 1818584692;
              goto LABEL_64;
            case 4:
              int v13 = 1919510376;
              goto LABEL_64;
            case 5:
              int v30 = 1953460256;
              goto LABEL_57;
            case 6:
              int v30 = 1651471476;
              goto LABEL_57;
            case 7:
              goto LABEL_63;
            case 8:
              long long v53 = v48;
              goto LABEL_129;
            default:
              goto LABEL_128;
          }
        case 2:
          char v16 = 0;
          int v17 = 1;
          int v18 = 1;
          switch((int)v47)
          {
            case 3:
              int v17 = 0;
              int v19 = 1818584692;
              goto LABEL_35;
            case 4:
              int v17 = 0;
              int v19 = 1919510376;
LABEL_35:
              v52.i32[0] = v19;
              goto LABEL_40;
            case 5:
              int v18 = 0;
              int v31 = 1953460256;
              goto LABEL_38;
            case 6:
              int v18 = 0;
              int v31 = 1651471476;
LABEL_38:
              v52.i32[1] = v31;
              goto LABEL_40;
            case 7:
              goto LABEL_41;
            case 8:
              int v17 = 0;
              long long v53 = v48;
LABEL_40:
              char v16 = 1;
LABEL_41:
              switch(DWORD1(v47))
              {
                case 3:
                  if (!v17) {
                    goto LABEL_128;
                  }
                  int v32 = 1818584692;
                  goto LABEL_55;
                case 4:
                  if (!v17) {
                    goto LABEL_128;
                  }
                  int v32 = 1919510376;
LABEL_55:
                  v52.i32[0] = v32;
                  if ((v16 & 1) == 0) {
                    goto LABEL_56;
                  }
                  goto LABEL_129;
                case 5:
                  if (!v18) {
                    goto LABEL_128;
                  }
                  int v35 = 1953460256;
                  goto LABEL_62;
                case 6:
                  if (!v18) {
                    goto LABEL_128;
                  }
                  int v35 = 1651471476;
LABEL_62:
                  v52.i32[1] = v35;
                  if ((v16 & 1) == 0) {
                    goto LABEL_63;
                  }
                  goto LABEL_129;
                case 7:
                  if (v16)
                  {
                    if (v17)
                    {
LABEL_63:
                      int v13 = 1667591796;
LABEL_64:
                      v52.i32[0] = v13;
                    }
                    else
                    {
LABEL_56:
                      int v30 = 1667591796;
LABEL_57:
                      v52.i32[1] = v30;
                    }
                  }
                  else
                  {
                    int32x2_t v52 = vdup_n_s32(0x63656E74u);
                  }
                  break;
                default:
                  goto LABEL_128;
              }
              break;
            default:
              goto LABEL_128;
          }
          goto LABEL_129;
        case 3:
          *(_OWORD *)CFRange v57 = v46;
          char v20 = 0;
          int v21 = 1;
          int v22 = 1;
          switch((int)v47)
          {
            case 3:
              int v21 = 0;
              int v23 = 1818584692;
              goto LABEL_45;
            case 4:
              int v21 = 0;
              int v23 = 1919510376;
LABEL_45:
              v52.i32[0] = v23;
              goto LABEL_49;
            case 5:
              int v22 = 0;
              int v33 = 1953460256;
              goto LABEL_48;
            case 6:
              int v22 = 0;
              int v33 = 1651471476;
LABEL_48:
              v52.i32[1] = v33;
LABEL_49:
              char v20 = 1;
              goto LABEL_50;
            case 7:
LABEL_50:
              switch(DWORD2(v47))
              {
                case 3:
                  if ((v21 & 1) == 0) {
                    goto LABEL_112;
                  }
                  int v34 = 1818584692;
                  goto LABEL_71;
                case 4:
                  if ((v21 & 1) == 0) {
                    goto LABEL_112;
                  }
                  int v34 = 1919510376;
LABEL_71:
                  v52.i32[0] = v34;
                  uint64_t v15 = 0;
                  int v36 = 0;
                  if ((v20 & 1) == 0) {
                    v52.i32[1] = 1667591796;
                  }
                  goto LABEL_83;
                case 5:
                  if ((v22 & 1) == 0) {
                    goto LABEL_112;
                  }
                  int v37 = 1953460256;
                  goto LABEL_77;
                case 6:
                  if ((v22 & 1) == 0) {
                    goto LABEL_112;
                  }
                  int v37 = 1651471476;
LABEL_77:
                  v52.i32[1] = v37;
                  if (v20) {
                    goto LABEL_78;
                  }
                  goto LABEL_81;
                case 7:
                  if ((v20 & 1) == 0) {
                    goto LABEL_112;
                  }
                  if (v21)
                  {
LABEL_81:
                    uint64_t v15 = 0;
                    v52.i32[0] = 1667591796;
                  }
                  else if (v22)
                  {
                    uint64_t v15 = 0;
                    v52.i32[1] = 1667591796;
                  }
                  else
                  {
LABEL_78:
                    uint64_t v15 = 0;
                  }
                  goto LABEL_82;
                case 8:
                  uint64_t v15 = 0;
                  int v38 = 0;
                  *(_OWORD *)CFRange v57 = v50;
                  int v36 = 1;
                  goto LABEL_84;
                default:
                  uint64_t v15 = FigSignalErrorAt();
LABEL_82:
                  int v36 = 1;
LABEL_83:
                  int v38 = 1;
LABEL_84:
                  switch(DWORD1(v47))
                  {
                    case 3:
                      if ((v21 & 1) == 0 || v38) {
                        goto LABEL_112;
                      }
                      int v39 = 1818584692;
                      goto LABEL_92;
                    case 4:
                      if ((v21 & 1) == 0 || v38) {
                        goto LABEL_112;
                      }
                      int v39 = 1919510376;
LABEL_92:
                      v52.i32[0] = v39;
                      if (v36) {
                        int64_t v40 = &v54;
                      }
                      else {
                        int64_t v40 = &v53;
                      }
                      long long *v40 = *(_OWORD *)v57;
                      if ((v20 & 1) == 0) {
                        v52.i32[1] = 1667591796;
                      }
                      goto LABEL_113;
                    case 5:
                      if ((v22 & 1) == 0 || v38) {
                        goto LABEL_112;
                      }
                      int v41 = 1953460256;
                      goto LABEL_103;
                    case 6:
                      if ((v22 & 1) == 0 || v38) {
                        goto LABEL_112;
                      }
                      int v41 = 1651471476;
LABEL_103:
                      v52.i32[1] = v41;
                      if (v36) {
                        CFRange v42 = &v54;
                      }
                      else {
                        CFRange v42 = &v53;
                      }
                      long long *v42 = *(_OWORD *)v57;
                      if ((v20 & 1) == 0) {
                        v52.i32[0] = 1667591796;
                      }
                      break;
                    case 8:
                      if ((v38 & 1) == 0 || (v20 & 1) == 0) {
                        goto LABEL_112;
                      }
                      if (v21) {
                        long long v54 = v49;
                      }
                      else {
                        long long v53 = v49;
                      }
                      break;
                    default:
                      goto LABEL_112;
                  }
                  break;
              }
              break;
            default:
LABEL_112:
              uint64_t v15 = FigSignalErrorAt();
              break;
          }
LABEL_113:
          if (v15) {
            break;
          }
          goto LABEL_129;
        case 4:
          switch((int)v47)
          {
            case 3:
              int v24 = 0;
              int v25 = 1818584692;
              goto LABEL_22;
            case 4:
              int v24 = 0;
              int v25 = 1919510376;
LABEL_22:
              v52.i32[0] = v25;
              int v26 = 1;
              goto LABEL_26;
            case 5:
              int v26 = 0;
              int v27 = 1953460256;
              goto LABEL_25;
            case 6:
              int v26 = 0;
              int v27 = 1651471476;
LABEL_25:
              v52.i32[1] = v27;
              int v24 = 1;
LABEL_26:
              if (DWORD1(v47) != 8) {
                goto LABEL_128;
              }
              switch(DWORD2(v47))
              {
                case 3:
                  if (!v24) {
                    goto LABEL_128;
                  }
                  char v28 = 0;
                  int v29 = 1818584692;
                  goto LABEL_117;
                case 4:
                  if (!v24) {
                    goto LABEL_128;
                  }
                  char v28 = 0;
                  int v29 = 1919510376;
LABEL_117:
                  v52.i32[0] = v29;
                  goto LABEL_122;
                case 5:
                  if (!v26) {
                    goto LABEL_128;
                  }
                  int v43 = 1953460256;
                  goto LABEL_121;
                case 6:
                  int v43 = 1651471476;
LABEL_121:
                  v52.i32[1] = v43;
                  char v28 = 1;
LABEL_122:
                  if (HIDWORD(v47) != 8) {
                    goto LABEL_128;
                  }
                  if (v24) {
                    long long v44 = &v54;
                  }
                  else {
                    long long v44 = &v53;
                  }
                  long long *v44 = v49;
                  if (v28) {
                    long long v54 = v51;
                  }
                  else {
                    long long v53 = v51;
                  }
                  break;
                default:
                  goto LABEL_128;
              }
              goto LABEL_129;
            default:
LABEL_128:
              uint64_t v14 = FigSignalErrorAt();
              if (!v14) {
                goto LABEL_129;
              }
              goto LABEL_14;
          }
        default:
LABEL_129:
          uint64_t v15 = FigCaptionPositionCreate();
          *a2 = v56;
          CFTypeRef v56 = 0;
          break;
      }
    }
    else
    {
LABEL_13:
      uint64_t v14 = FigSignalErrorAt();
LABEL_14:
      uint64_t v15 = v14;
    }
    if (v4)
    {
      CFRelease(v4);
      if (v56) {
        CFRelease(v56);
      }
    }
    return v15;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t figTTMLPositionParseGetNextToken(CFArrayRef theArray, CFIndex a2, CFIndex *a3)
{
  CFArrayRef v5 = theArray;
  if (theArray) {
    CFMutableArrayRef theArray = (CFArrayRef)CFArrayGetCount(theArray);
  }
  if ((uint64_t)theArray <= a2)
  {
    uint64_t result = 2;
  }
  else
  {
    MEMORY[0x19970EE10](&initPositionParseMapOnce, figTTMLInitPositionParseMap);
    CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v5, a2);
    if (FigCFDictionaryGetInt32IfPresent())
    {
      uint64_t result = 1;
      ++a2;
    }
    else
    {
      FigTTMLParseLengthSyntax(ValueAtIndex);
      if ((v8 & 0x100000000) != 0) {
        uint64_t result = 8;
      }
      else {
        uint64_t result = 9;
      }
    }
  }
  *a3 = a2;
  return result;
}

uint64_t figTTMLParseTwoOrMoreDigits(UniChar *buffer, uint64_t a2, uint64_t a3, void *a4, _DWORD *a5)
{
  uint64_t v10 = 0;
  uint64_t v11 = a2;
  if (a4 && a5)
  {
    uint64_t result = figTTMLParseDigits(2u, buffer, a2, a3, &v11, (unsigned int *)&v10 + 1);
    if (!result)
    {
      if (figTTMLParseDigits(1u, buffer, v11, a3, &v11, (unsigned int *)&v10))
      {
LABEL_7:
        uint64_t result = 0;
        *a4 = v11;
        *a5 = HIDWORD(v10);
      }
      else
      {
        while (HIDWORD(v10) <= 0x1745D173)
        {
          HIDWORD(v10) = v10 + 10 * HIDWORD(v10);
          if (figTTMLParseDigits(1u, buffer, v11, a3, &v11, (unsigned int *)&v10)) {
            goto LABEL_7;
          }
        }
        return 4294950725;
      }
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t figTTMLParseDigits(unsigned int a1, UniChar *buffer, uint64_t a3, uint64_t a4, uint64_t *a5, unsigned int *a6)
{
  if (a5 && a6)
  {
    unsigned int v8 = a1;
    if (a4 - a3 < a1) {
      return 4294950724;
    }
    if (a1)
    {
      unsigned int v11 = 0;
      uint64_t v12 = -a3;
      uint64_t v13 = a3 + 64;
      uint64_t v14 = a3;
      while (1)
      {
        uint64_t v15 = (unint64_t)v14 >= 4 ? 4 : v14;
        if (a3 < 0) {
          return 4294950724;
        }
        uint64_t v16 = *((void *)buffer + 20);
        if (v16 <= v14) {
          return 4294950724;
        }
        uint64_t v17 = *((void *)buffer + 17);
        if (v17)
        {
          UniChar v18 = *(_WORD *)(v17 + 2 * (v14 + *((void *)buffer + 19)));
        }
        else
        {
          uint64_t v19 = *((void *)buffer + 18);
          if (v19)
          {
            UniChar v18 = *(char *)(v19 + *((void *)buffer + 19) + v14);
          }
          else
          {
            if (*((void *)buffer + 22) <= v14 || (uint64_t v20 = *((void *)buffer + 21), v20 > v14))
            {
              uint64_t v21 = -v15;
              uint64_t v22 = v15 + v12;
              uint64_t v23 = v13 - v15;
              uint64_t v24 = v14 + v21;
              uint64_t v25 = v24 + 64;
              if (v24 + 64 >= v16) {
                uint64_t v25 = *((void *)buffer + 20);
              }
              *((void *)buffer + 21) = v24;
              *((void *)buffer + 22) = v25;
              if (v16 >= v23) {
                uint64_t v16 = v23;
              }
              v28.length = v16 + v22;
              v28.locatiouint64_t n = v24 + *((void *)buffer + 19);
              CFStringGetCharacters(*((CFStringRef *)buffer + 16), v28, buffer);
              uint64_t v20 = *((void *)buffer + 21);
            }
            UniChar v18 = buffer[v14 - v20];
          }
        }
        if ((unsigned __int16)(v18 - 58) < 0xFFF6u) {
          return 4294950724;
        }
        if (v11 > 0x1745D173) {
          return 4294950725;
        }
        unsigned int v11 = v18 + 10 * v11 - 48;
        ++v14;
        --v12;
        ++v13;
        if (!--v8) {
          goto LABEL_29;
        }
      }
    }
    unsigned int v11 = 0;
    uint64_t v14 = a3;
LABEL_29:
    uint64_t result = 0;
    *a5 = v14;
    *a6 = v11;
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t figTTMLInitNamedColorToRGBAMap()
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  uint64_t result = FigCFDictionarySetInt32();
  sNamedColorToRGBAMap = (uint64_t)Mutable;
  return result;
}

void figTTMLInitRGBAToNamedColorMap()
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, MEMORY[0x1E4F1D540]);
  CFDictionarySetValue(Mutable, 0, @"transparent");
  CFDictionarySetValue(Mutable, (const void *)0xFF, @"black");
  CFDictionarySetValue(Mutable, (const void *)0xC0C0C0FFLL, @"silver");
  CFDictionarySetValue(Mutable, (const void *)0x808080FFLL, @"gray");
  CFDictionarySetValue(Mutable, (const void *)0xFFFFFFFFLL, @"white");
  CFDictionarySetValue(Mutable, (const void *)0x8000FFFFLL, @"maroon");
  CFDictionarySetValue(Mutable, (const void *)0xFF0000FFLL, @"red");
  CFDictionarySetValue(Mutable, (const void *)0x800080FFLL, @"purple");
  CFDictionarySetValue(Mutable, (const void *)0xFF00FFFFLL, @"magenta");
  CFDictionarySetValue(Mutable, (const void *)0x8000FF, @"green");
  CFDictionarySetValue(Mutable, (const void *)0xFF00FF, @"lime");
  CFDictionarySetValue(Mutable, (const void *)0x808000FFLL, @"olive");
  CFDictionarySetValue(Mutable, (const void *)0xFFFF00FFLL, @"yellow");
  CFDictionarySetValue(Mutable, (const void *)0x80FF, @"navy");
  CFDictionarySetValue(Mutable, (const void *)0xFFFF, @"blue");
  CFDictionarySetValue(Mutable, (const void *)0x8080FF, @"teal");
  CFDictionarySetValue(Mutable, (const void *)0xFFFFFF, @"aqua");
  sRGBAToNamedColorMap = (uint64_t)Mutable;
}

uint64_t figTTMLParseCFString(uint64_t a1, UniChar *a2, int64_t a3, int64_t a4, int64_t *a5)
{
  CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  BytesFromCFString = (char *)FigCreateBytesFromCFString();
  uint64_t v11 = figTTMLParseString(BytesFromCFString, a2, a3, a4, a5);
  CFAllocatorDeallocate(v9, BytesFromCFString);
  return v11;
}

uint64_t figTTMLCopyEscapedCharactersUntil(int a1, uint64_t a2, int64_t a3, int64_t a4, int64_t *a5, __CFString **a6)
{
  int64_t v9 = a3;
  int64_t v25 = a3;
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  while (1)
  {
    while (1)
    {
      if (v9 >= a4) {
        goto LABEL_24;
      }
      if (!figTTMLParseCharacter(a1, (UniChar *)a2, v9, a4, &v25))
      {
        int64_t v9 = v25 - 1;
LABEL_24:
        uint64_t v21 = 0;
        *a5 = v9;
        *a6 = Mutable;
        return v21;
      }
      if (!figTTMLParseCharacter(92, (UniChar *)a2, v25, a4, &v25)) {
        break;
      }
      UniChar chars = 0;
      int64_t v13 = v25;
      if (v25 < 0 || (int64_t v14 = *(void *)(a2 + 160), v14 <= v25))
      {
        UniChar v16 = 0;
      }
      else
      {
        uint64_t v15 = *(void *)(a2 + 136);
        if (v15)
        {
          UniChar v16 = *(_WORD *)(v15 + 2 * (*(void *)(a2 + 152) + v25));
        }
        else
        {
          uint64_t v18 = *(void *)(a2 + 144);
          if (v18)
          {
            UniChar v16 = *(char *)(v18 + *(void *)(a2 + 152) + v25);
          }
          else
          {
            if (*(void *)(a2 + 176) <= v25 || (int64_t v19 = *(void *)(a2 + 168), v19 > v25))
            {
              uint64_t v20 = v25 - 4;
              if ((unint64_t)v25 < 4) {
                uint64_t v20 = 0;
              }
              if (v20 + 64 < v14) {
                int64_t v14 = v20 + 64;
              }
              *(void *)(a2 + 168) = v20;
              *(void *)(a2 + 176) = v14;
              v26.locatiouint64_t n = *(void *)(a2 + 152) + v20;
              v26.length = v14 - v20;
              CFStringGetCharacters(*(CFStringRef *)(a2 + 128), v26, (UniChar *)a2);
              int64_t v19 = *(void *)(a2 + 168);
            }
            UniChar v16 = *(_WORD *)(a2 + 2 * (v13 - v19));
          }
        }
      }
      UniChar chars = v16;
      CFStringAppendCharacters(Mutable, &chars, 1);
      int64_t v9 = ++v25;
    }
    --v25;
    UniChar v24 = 0;
    uint64_t v17 = figTTMLParseEscape((UniChar *)a2, v25, a4, &v25, &v24);
    if (v17) {
      break;
    }
    CFStringAppendCharacters(Mutable, &v24, 1);
    int64_t v9 = v25;
  }
  uint64_t v21 = v17;
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v21;
}

uint64_t figTTMLParseEscape(UniChar *buffer, int64_t a2, int64_t a3, void *a4, UniChar *a5)
{
  int64_t v18 = a2;
  uint64_t result = figTTMLParseCharacter(92, buffer, a2, a3, &v18);
  if (!result)
  {
    int64_t v10 = v18;
    if (v18 >= a3)
    {
      return 4294950724;
    }
    else
    {
      if (v18 < 0 || (int64_t v11 = *((void *)buffer + 20), v11 <= v18))
      {
        UniChar v13 = 0;
      }
      else
      {
        uint64_t v12 = *((void *)buffer + 17);
        if (v12)
        {
          UniChar v13 = *(_WORD *)(v12 + 2 * (*((void *)buffer + 19) + v18));
        }
        else
        {
          uint64_t v14 = *((void *)buffer + 18);
          if (v14)
          {
            UniChar v13 = *(char *)(v14 + *((void *)buffer + 19) + v18);
          }
          else
          {
            if (*((void *)buffer + 22) <= v18 || (int64_t v15 = *((void *)buffer + 21), v16 = v18, v15 > v18))
            {
              int64_t v17 = v18 - 4;
              if ((unint64_t)v18 < 4) {
                int64_t v17 = 0;
              }
              if (v17 + 64 < v11) {
                int64_t v11 = v17 + 64;
              }
              *((void *)buffer + 21) = v17;
              *((void *)buffer + 22) = v11;
              v19.locatiouint64_t n = *((void *)buffer + 19) + v17;
              v19.length = v11 - v17;
              CFStringGetCharacters(*((CFStringRef *)buffer + 16), v19, buffer);
              int64_t v15 = *((void *)buffer + 21);
              int64_t v16 = v18;
            }
            UniChar v13 = buffer[v10 - v15];
            int64_t v10 = v16;
          }
        }
      }
      uint64_t result = 0;
      *a5 = v13;
      *a4 = v10 + 1;
    }
  }
  return result;
}

uint64_t figTTMLInitTextEmphasisParseMap()
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  uint64_t result = FigCFDictionarySetInt32();
  sTextEmphasisParseMap = (uint64_t)Mutable;
  return result;
}

uint64_t figTTMLInitTextShadowParseMap()
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  FigCFDictionarySetInt32();
  uint64_t result = FigCFDictionarySetInt32();
  sTextShadowParseMap = (uint64_t)Mutable;
  return result;
}

void locateAndCombineColorFunctionTokens(const __CFString *a1, uint64_t a2)
{
  CFRange v4 = CFStringFind(a1, @""), 4uLL);
  if (*(unsigned char *)(a2 + 24))
  {
    if (v4.length)
    {
      *(unsigned char *)(a2 + 24) = 0;
      CFStringAppend(*(CFMutableStringRef *)(a2 + 16), a1);
      CFArrayAppendValue(*(CFMutableArrayRef *)(a2 + 8), *(const void **)(a2 + 16));
      CFArrayRef v5 = *(const void **)(a2 + 16);
      if (v5)
      {
        CFRelease(v5);
        *(void *)(a2 + 16) = 0;
      }
    }
    else
    {
      CFIndex v7 = *(__CFString **)(a2 + 16);
      CFStringAppend(v7, a1);
    }
  }
  else if ((CFStringHasPrefix(a1, @"rgb(") || CFStringHasPrefix(a1, @"rgba(")) && !v4.length)
  {
    *(unsigned char *)(a2 + 24) = 1;
    *(void *)(a2 + 16) = CFStringCreateMutableCopy(*(CFAllocatorRef *)a2, 0, a1);
  }
  else
  {
    CFIndex v6 = *(__CFArray **)(a2 + 8);
    CFArrayAppendValue(v6, a1);
  }
}

uint64_t figTTMLInitPositionParseMap()
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  uint64_t result = FigCFDictionarySetInt32();
  sPositionParseMap = (uint64_t)Mutable;
  return result;
}

uint64_t FigTTMLFormatWriterCreateWithByteStream(uint64_t a1, const void *a2, const __CFDictionary *a3, CFTypeRef *a4)
{
  CFTypeRef v30 = 0;
  CFTypeRef v31 = 0;
  if (!a2 || !a4) {
    goto LABEL_77;
  }
  FigFormatWriterGetClassID();
  uint64_t v8 = CMDerivedObjectCreate();
  if (v8)
  {
LABEL_78:
    uint64_t v13 = v8;
    goto LABEL_79;
  }
  FigFormatWriterGetFigBaseObject(v31);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
  {
LABEL_77:
    uint64_t v8 = FigSignalErrorAt();
    goto LABEL_78;
  }
  uint64_t v10 = DerivedStorage;
  if (!a3 || (CFDictionaryGetValue(a3, @"FileFormat"), FigCFEqual()))
  {
    FigFormatWriterGetFigBaseObject(v31);
    int64_t v11 = (void *)CMBaseObjectGetDerivedStorage();
    long long v46 = 0;
    CFTypeRef v47 = 0;
    long long v44 = 0;
    long long v45 = 0;
    int v43 = 0;
    CFTypeRef v41 = 0;
    CFTypeRef v42 = 0;
    CFTypeRef v39 = 0;
    CFTypeRef v40 = 0;
    CFTypeRef v37 = 0;
    CFTypeRef v38 = 0;
    CFTypeRef v35 = 0;
    CFTypeRef v36 = 0;
    CFTypeRef v33 = 0;
    CFTypeRef cf = 0;
    CFTypeRef v32 = 0;
    uint64_t v12 = FigTTMLSerializerCreateForByteStream(a1, a2, &v32);
    if (v12) {
      goto LABEL_71;
    }
    uint64_t v12 = FigTTMLSerializerCreateIndenter(a1, v32, &v33);
    if (v12) {
      goto LABEL_71;
    }
    uint64_t v12 = FigTTMLDocumentWriterCreateForSerializer(a1, v33, &cf);
    if (v12) {
      goto LABEL_71;
    }
    uint64_t v12 = FigTTMLDocumentWriterCreateLineBreaker(a1, cf, &v35);
    if (v12) {
      goto LABEL_71;
    }
    uint64_t v12 = FigTTMLDocumentWriterCreateProfileInserter(a1, v35, &v36);
    if (v12) {
      goto LABEL_71;
    }
    uint64_t v12 = FigTTMLDocumentWriterCreateStyleOptimizer(a1, v36, &v37);
    if (v12) {
      goto LABEL_71;
    }
    uint64_t v12 = FigTTMLDocumentWriterCreateRegionStyleOptimizer(a1, v37, &v38);
    if (v12) {
      goto LABEL_71;
    }
    uint64_t v12 = FigTTMLDocumentWriterCreateForiTT(a1, v38, &v39);
    if (v12
      || (uint64_t v12 = FigTTMLDocumentWriterCreateRubySpanBuilder(a1, v39, &v40), v12)
      || (uint64_t v12 = FigTTMLDocumentWriterCreateStyleSpanBuilder(a1, v40, &v41), v12)
      || (uint64_t v12 = FigTTMLDocumentWriterCreateParagraphStyleAttributeInserter(a1, v41, &v42), v12)
      || (uint64_t v12 = FigTTMLDocumentWriterCreateRegionAttributeInserter(a1, v42, &v43), v12)
      || (uint64_t v12 = FigTTMLDocumentWriterCreateFrameRateParameterInserter(a1, v43, &v44), v12)
      || (uint64_t v12 = FigTTMLDocumentWriterCreateRegionBuilder(a1, v44, &v45), v12)
      || (uint64_t v12 = FigTTMLDocumentWriterCreateLanguageIdentifierInserter(a1, v45, &v46), v12))
    {
LABEL_71:
      uint64_t v13 = v12;
    }
    else
    {
      uint64_t v13 = FigTTMLCaptionWriterCreateForDocument(a1, v46, &v47);
      if (!v13)
      {
        *int64_t v11 = v47;
        uint64_t v14 = v45;
        v11[2] = v46;
        v11[3] = v14;
        int64_t v15 = v43;
        v11[4] = v44;
        v11[5] = v15;
        v11[6] = v42;
        CFTypeRef v16 = v40;
        v11[8] = v41;
        v11[9] = v16;
        CFTypeRef v17 = v38;
        v11[10] = v39;
        CFTypeRef v19 = v36;
        CFTypeRef v18 = v37;
        v11[12] = v17;
        v11[13] = v18;
        CFTypeRef v20 = v35;
        v11[14] = v19;
        v11[15] = v20;
        CFTypeRef v21 = v33;
        v11[16] = cf;
        v11[17] = v21;
        v11[18] = v32;
        long long v46 = 0;
        CFTypeRef v47 = 0;
        long long v44 = 0;
        long long v45 = 0;
        int v43 = 0;
        CFTypeRef v41 = 0;
        CFTypeRef v42 = 0;
        CFTypeRef v39 = 0;
        CFTypeRef v40 = 0;
        CFTypeRef v36 = 0;
        CFTypeRef v37 = 0;
        CFTypeRef v38 = 0;
        CFTypeRef cf = 0;
        CFTypeRef v35 = 0;
        CFTypeRef v32 = 0;
        CFTypeRef v33 = 0;
LABEL_24:
        if (cf) {
          CFRelease(cf);
        }
        goto LABEL_26;
      }
    }
    if (v32) {
      CFRelease(v32);
    }
    if (v33) {
      CFRelease(v33);
    }
    goto LABEL_24;
  }
  CFDictionaryGetValue(a3, @"FileFormat");
  if (FigCFEqual())
  {
    FigFormatWriterGetFigBaseObject(v31);
    uint64_t v22 = (void *)CMBaseObjectGetDerivedStorage();
    long long v46 = 0;
    CFTypeRef v47 = 0;
    long long v44 = 0;
    long long v45 = 0;
    int v43 = 0;
    CFTypeRef v41 = 0;
    CFTypeRef v42 = 0;
    CFTypeRef v39 = 0;
    CFTypeRef v40 = 0;
    CFTypeRef v37 = 0;
    CFTypeRef v38 = 0;
    CFTypeRef v35 = 0;
    CFTypeRef v36 = 0;
    uint64_t v23 = FigTTMLSerializerCreateForByteStream(a1, a2, &v35);
    if (v23) {
      goto LABEL_76;
    }
    uint64_t v23 = FigTTMLDocumentWriterCreateForSerializer(a1, v35, &v36);
    if (v23) {
      goto LABEL_76;
    }
    uint64_t v23 = FigTTMLDocumentWriterCreateLineBreaker(a1, v36, &v37);
    if (v23) {
      goto LABEL_76;
    }
    uint64_t v23 = FigTTMLDocumentWriterCreateStyleOptimizer(a1, v37, &v38);
    if (v23) {
      goto LABEL_76;
    }
    uint64_t v23 = FigTTMLDocumentWriterCreateForIMSC(a1, v38, &v39);
    if (v23
      || (uint64_t v23 = FigTTMLDocumentWriterCreateStyleSpanBuilder(a1, v39, &v40), v23)
      || (uint64_t v23 = FigTTMLDocumentWriterCreateWritingDirectionSpanBuilder(a1, v40, &v41), v23)
      || (uint64_t v23 = FigTTMLDocumentWriterCreateParagraphStyleAttributeInserter(a1, v41, &v42), v23)
      || (uint64_t v23 = FigTTMLDocumentWriterCreateRegionAttributeInserter(a1, v42, &v43), v23)
      || (uint64_t v23 = FigTTMLDocumentWriterCreateRegionBuilder(a1, v43, &v44), v23)
      || (uint64_t v23 = FigTTMLDocumentWriterCreateLanguageIdentifierInserter(a1, v44, &v45), v23)
      || (uint64_t v23 = FigTTMLDocumentWriterCreateDivBuilder(a1, v45, &v46), v23))
    {
LABEL_76:
      uint64_t v13 = v23;
    }
    else
    {
      uint64_t v13 = FigTTMLCaptionWriterCreateForDocument(a1, v46, &v47);
      if (!v13)
      {
        *uint64_t v22 = v47;
        UniChar v24 = v45;
        v22[1] = v46;
        v22[2] = v24;
        v22[3] = v44;
        CFTypeRef v25 = v42;
        v22[5] = v43;
        v22[6] = v25;
        CFTypeRef v26 = v40;
        v22[7] = v41;
        v22[8] = v26;
        v22[11] = v39;
        v22[13] = v38;
        CFTypeRef v27 = v36;
        v22[15] = v37;
        v22[16] = v27;
        v22[18] = v35;
        long long v46 = 0;
        CFTypeRef v47 = 0;
        long long v44 = 0;
        long long v45 = 0;
        int v43 = 0;
        CFTypeRef v41 = 0;
        CFTypeRef v42 = 0;
        CFTypeRef v39 = 0;
        CFTypeRef v40 = 0;
        CFTypeRef v37 = 0;
        CFTypeRef v38 = 0;
        CFTypeRef v35 = 0;
        CFTypeRef v36 = 0;
        goto LABEL_45;
      }
    }
LABEL_26:
    if (v35) {
      CFRelease(v35);
    }
    if (v36) {
      CFRelease(v36);
    }
LABEL_45:
    if (v37) {
      CFRelease(v37);
    }
    if (v38) {
      CFRelease(v38);
    }
    if (v39) {
      CFRelease(v39);
    }
    if (v40) {
      CFRelease(v40);
    }
    if (v41) {
      CFRelease(v41);
    }
    if (v42) {
      CFRelease(v42);
    }
    if (v43) {
      CFRelease(v43);
    }
    if (v44) {
      CFRelease(v44);
    }
    if (v45) {
      CFRelease(v45);
    }
    if (v46) {
      CFRelease(v46);
    }
    if (v47) {
      CFRelease(v47);
    }
    if (v13) {
      goto LABEL_79;
    }
  }
  uint64_t v13 = FigCaptionTimelineGeneratorCreate(a1, (uint64_t)ffw_ttml_WriteFigCaption, (uint64_t)v31, (uint64_t *)&v30);
  CFTypeRef v28 = v30;
  if (!v13)
  {
    *(_DWORD *)(v10 + 160) = 0;
    *(void *)(v10 + 152) = v28;
    *a4 = v31;
    return v13;
  }
  if (v30) {
    CFRelease(v30);
  }
LABEL_79:
  if (v31) {
    CFRelease(v31);
  }
  return v13;
}

uint64_t ffw_ttml_WriteFigCaption(const __CFArray *a1, CMTime *a2, uint64_t a3)
{
  void (*v14)(void **__return_ptr, const void *);
  long long v15;
  uint64_t CMBaseObject;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  CFDictionaryRef v23;
  long long v25;
  long long v26;
  long long v27;
  CMTime time2;
  void *values[2];
  long long v30;
  long long v31;
  CFTypeRef v32;

  FigFormatWriterGetFigBaseObject(a3);
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  CFTypeRef v32 = 0;
  CFIndex Count = CFArrayGetCount(a1);
  if (!Count) {
    return 0;
  }
  CFIndex v7 = Count;
  CFIndex v8 = 0;
  CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v10 = (_OWORD *)MEMORY[0x1E4F1FA20];
  while (1)
  {
    CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(a1, v8);
    CFTypeRef v30 = 0u;
    CFTypeRef v31 = 0u;
    *(_OWORD *)values = 0u;
    uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v13 = v12 ? v12 : 0;
    uint64_t v14 = *(void (**)(void **__return_ptr, const void *))(v13 + 8);
    if (v14)
    {
      v14(values, ValueAtIndex);
    }
    else
    {
      int64_t v15 = v10[1];
      *(_OWORD *)values = *v10;
      CFTypeRef v30 = v15;
      CFTypeRef v31 = v10[2];
    }
    CFTypeRef v25 = *(_OWORD *)values;
    *(void *)&CFTypeRef v26 = v30;
    CMTime time2 = *a2;
    if (!CMTimeCompare((CMTime *)&v25, &time2))
    {
      if (v32)
      {
        CFRelease(v32);
        CFTypeRef v32 = 0;
      }
      CMBaseObject = FigCaptionGetCMBaseObject(ValueAtIndex);
      CFTypeRef v17 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v17) {
        CFTypeRef v18 = v17;
      }
      else {
        CFTypeRef v18 = 0;
      }
      CFTypeRef v19 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v18 + 48);
      if (!v19)
      {
        uint64_t v22 = 4294954514;
        LODWORD(v25) = -12782;
        goto LABEL_22;
      }
      CFTypeRef v20 = v19(CMBaseObject, @"CaptionData", v9, &v32);
      if (v20) {
        break;
      }
      CFTypeRef v21 = *DerivedStorage;
      CFTypeRef v25 = *(_OWORD *)values;
      CFTypeRef v26 = v30;
      CFTypeRef v27 = v31;
      CFTypeRef v20 = FigTTMLCaptionWriterAddCaption(v21, (uint64_t)v32, &v25);
      if (v20) {
        break;
      }
    }
    if (v7 == ++v8)
    {
      uint64_t v22 = 0;
      goto LABEL_29;
    }
  }
  uint64_t v22 = v20;
  LODWORD(v25) = v20;
  if (v20 == -16577)
  {
    LODWORD(v25) = -17540;
    uint64_t v22 = 4294950719;
  }
LABEL_22:
  values[0] = CFNumberCreate(v9, kCFNumberSInt32Type, &v25);
  if (values[0]) {
    uint64_t v23 = CFDictionaryCreate(v9, (const void **)kFigFormatWriterNotificationParameter_OSStatus, (const void **)values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  }
  else {
    uint64_t v23 = 0;
  }
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  if (v23) {
    CFRelease(v23);
  }
  if (values[0]) {
    CFRelease(values[0]);
  }
LABEL_29:
  if (v32) {
    CFRelease(v32);
  }
  return v22;
}

uint64_t ffw_ttml_Invalidate(uint64_t a1)
{
  FigFormatWriterGetFigBaseObject(a1);
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  FigTTMLCaptionWriterInvalidate(*DerivedStorage);
  FigTTMLDocumentWriterInvalidate(DerivedStorage[1]);
  FigTTMLDocumentWriterInvalidate(DerivedStorage[2]);
  FigTTMLDocumentWriterInvalidate(DerivedStorage[3]);
  FigTTMLDocumentWriterInvalidate(DerivedStorage[4]);
  FigTTMLDocumentWriterInvalidate(DerivedStorage[5]);
  FigTTMLDocumentWriterInvalidate(DerivedStorage[6]);
  FigTTMLDocumentWriterInvalidate(DerivedStorage[7]);
  FigTTMLDocumentWriterInvalidate(DerivedStorage[8]);
  FigTTMLDocumentWriterInvalidate(DerivedStorage[9]);
  FigTTMLDocumentWriterInvalidate(DerivedStorage[10]);
  FigTTMLDocumentWriterInvalidate(DerivedStorage[11]);
  FigTTMLDocumentWriterInvalidate(DerivedStorage[12]);
  FigTTMLDocumentWriterInvalidate(DerivedStorage[13]);
  FigTTMLDocumentWriterInvalidate(DerivedStorage[14]);
  FigTTMLDocumentWriterInvalidate(DerivedStorage[15]);
  FigTTMLDocumentWriterInvalidate(DerivedStorage[16]);
  FigTTMLSerializerInvalidate(DerivedStorage[17]);
  FigTTMLSerializerInvalidate(DerivedStorage[18]);
  return 0;
}

void ffw_ttml_Finalize(uint64_t a1)
{
  FigFormatWriterGetFigBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)DerivedStorage) {
    CFRelease(*(CFTypeRef *)DerivedStorage);
  }
  CFAllocatorRef v2 = *(const void **)(DerivedStorage + 8);
  if (v2) {
    CFRelease(v2);
  }
  CFArrayRef v3 = *(const void **)(DerivedStorage + 16);
  if (v3) {
    CFRelease(v3);
  }
  CFRange v4 = *(const void **)(DerivedStorage + 24);
  if (v4) {
    CFRelease(v4);
  }
  CFArrayRef v5 = *(const void **)(DerivedStorage + 32);
  if (v5) {
    CFRelease(v5);
  }
  CFIndex v6 = *(const void **)(DerivedStorage + 40);
  if (v6) {
    CFRelease(v6);
  }
  CFIndex v7 = *(const void **)(DerivedStorage + 48);
  if (v7) {
    CFRelease(v7);
  }
  CFIndex v8 = *(const void **)(DerivedStorage + 56);
  if (v8) {
    CFRelease(v8);
  }
  CFAllocatorRef v9 = *(const void **)(DerivedStorage + 64);
  if (v9) {
    CFRelease(v9);
  }
  uint64_t v10 = *(const void **)(DerivedStorage + 72);
  if (v10) {
    CFRelease(v10);
  }
  int64_t v11 = *(const void **)(DerivedStorage + 80);
  if (v11) {
    CFRelease(v11);
  }
  uint64_t v12 = *(const void **)(DerivedStorage + 88);
  if (v12) {
    CFRelease(v12);
  }
  uint64_t v13 = *(const void **)(DerivedStorage + 96);
  if (v13) {
    CFRelease(v13);
  }
  uint64_t v14 = *(const void **)(DerivedStorage + 104);
  if (v14) {
    CFRelease(v14);
  }
  int64_t v15 = *(const void **)(DerivedStorage + 112);
  if (v15) {
    CFRelease(v15);
  }
  CFTypeRef v16 = *(const void **)(DerivedStorage + 120);
  if (v16) {
    CFRelease(v16);
  }
  CFTypeRef v17 = *(const void **)(DerivedStorage + 128);
  if (v17) {
    CFRelease(v17);
  }
  CFTypeRef v18 = *(const void **)(DerivedStorage + 136);
  if (v18) {
    CFRelease(v18);
  }
  CFTypeRef v19 = *(const void **)(DerivedStorage + 144);
  if (v19) {
    CFRelease(v19);
  }
  CFTypeRef v20 = *(const void **)(DerivedStorage + 152);
  if (v20)
  {
    CFRelease(v20);
  }
}

CFStringRef ffw_ttml_CopyDebugDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"<FigFormatWriter_TTML %p>", a1);
}

uint64_t ffw_ttml_CopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 && a4) {
    return 4294954666;
  }
  else {
    return FigSignalErrorAt();
  }
}

uint64_t ffw_ttml_SetProperty(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return 4294954666;
  }
  else {
    return FigSignalErrorAt();
  }
}

uint64_t ffw_ttml_AddTrack(uint64_t a1, int a2, uint64_t a3, _DWORD *a4)
{
  FigFormatWriterGetFigBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2 == 1952807028 && a4 && !*(_DWORD *)(DerivedStorage + 160))
  {
    *(_DWORD *)(DerivedStorage + 160) = 1;
    *a4 = 1;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t ffw_ttml_CopyTrackProperty(uint64_t a1, int a2, const void *a3, uint64_t a4, uint64_t a5)
{
  FigFormatWriterGetFigBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a3 && a5 && (uint64_t v10 = DerivedStorage, *(_DWORD *)(DerivedStorage + 160) == a2))
  {
    if (CFEqual(@"LanguageTag", a3) || CFEqual(@"ExtendedLanguageTag", a3))
    {
      uint64_t v11 = *(void *)(v10 + 16);
      return FigTTMLDocumentWriterCopyProperty(v11, @"languageIdentifier", a4, a5);
    }
    else
    {
      return 4294954512;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t ffw_ttml_SetTrackProperty(uint64_t a1, int a2, const void *a3, const void *a4)
{
  FigFormatWriterGetFigBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(DerivedStorage + 160) == a2 && a3 && a4)
  {
    uint64_t v8 = DerivedStorage;
    if (CFEqual(@"LanguageTag", a3) || CFEqual(@"ExtendedLanguageTag", a3))
    {
      uint64_t v9 = *(void *)(v8 + 16);
      uint64_t v10 = @"languageIdentifier";
LABEL_7:
      return FigTTMLDocumentWriterSetProperty(v9, (uint64_t)v10, (uint64_t)a4);
    }
    if (CFEqual(@"CaptionTimeCodeFrameDuration", a3))
    {
      CFTypeID v12 = CFGetTypeID(a4);
      if (v12 == CFDictionaryGetTypeID())
      {
        uint64_t v9 = *(void *)(v8 + 32);
        uint64_t v10 = @"timeCodeFrameDuration";
        goto LABEL_7;
      }
    }
    else
    {
      if (!CFEqual(@"UseDropFrameTimeCode", a3)) {
        return 4294954512;
      }
      CFTypeID v13 = CFGetTypeID(a4);
      if (v13 == CFBooleanGetTypeID())
      {
        uint64_t v9 = *(void *)(v8 + 32);
        uint64_t v10 = @"useDropFrame";
        goto LABEL_7;
      }
    }
  }

  return FigSignalErrorAt();
}

uint64_t ffw_ttml_AddSampleBufferToTrack(uint64_t a1, int a2, opaqueCMSampleBuffer *a3)
{
  FigFormatWriterGetFigBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(DerivedStorage + 160) == a2
    && a3
    && (uint64_t v6 = DerivedStorage, FigSampleBufferGetCaptionGroup())
    && !*(unsigned char *)(v6 + 164))
  {
    uint64_t v7 = *(void *)(v6 + 152);
    return FigCaptionTimelineGeneratorAddSampleBuffer(v7, a3);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t ffw_ttml_Flush(uint64_t a1)
{
  FigFormatWriterGetFigBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = FigCaptionTimelineGeneratorFinish(*(void *)(DerivedStorage + 152));
  if (!result)
  {
    uint64_t result = FigTTMLCaptionWriterFinish(*(void *)DerivedStorage);
    if (!result) {
      *(unsigned char *)(DerivedStorage + 164) = 1;
    }
  }
  return result;
}

uint64_t ffw_ttml_WriteHeader()
{
  return 0;
}

uint64_t ffw_ttml_BeginSession()
{
  return 0;
}

uint64_t ffw_ttml_EndSession()
{
  return 0;
}

uint64_t FigMutableCompositionCreateRemote(uint64_t a1, uint64_t a2, void *a3)
{
  xpc_object_t xdict = 0;
  CFTypeRef cf = 0;
  uint64_t v10 = 0;
  if (remoteXPCMutableCompositionClient_EnsureClientEstablished_gMutableCompositionRemoteClientSetupOnce != -1) {
    dispatch_once(&remoteXPCMutableCompositionClient_EnsureClientEstablished_gMutableCompositionRemoteClientSetupOnce, &__block_literal_global_68);
  }
  uint64_t v5 = remoteXPCMutableCompositionClient_EnsureClientEstablished_err;
  if (remoteXPCMutableCompositionClient_EnsureClientEstablished_err) {
    goto LABEL_16;
  }
  uint64_t v6 = remoteXPCMutableComposition_CreateObject(a1, &v10);
  if (v6
    || (uint64_t v6 = FigXPCCreateBasicMessage(), v6)
    || (uint64_t v6 = FigXPCMessageSetCFDictionary(), v6)
    || (uint64_t v6 = FigXPCRemoteClientSendSyncMessageCreatingReply(), v6))
  {
    uint64_t v5 = v6;
LABEL_16:
    uint64_t v8 = v10;
    goto LABEL_17;
  }
  uint64_t uint64 = xpc_dictionary_get_uint64(xdict, (const char *)*MEMORY[0x1E4F20280]);
  uint64_t v8 = v10;
  uint64_t v5 = remoteXPCMutableComposition_CompleteObjectSetup((uint64_t)v10, uint64);
  if (!v5)
  {
    *a3 = v8;
    goto LABEL_10;
  }
LABEL_17:
  if (v8) {
    CFRelease(v8);
  }
LABEL_10:
  if (cf) {
    CFRelease(cf);
  }
  if (xdict) {
    CFRelease(xdict);
  }
  FigXPCRemoteClientKillServerOnTimeout();
  return v5;
}

uint64_t remoteXPCMutableComposition_CreateObject(uint64_t a1, void *a2)
{
  FigMutableCompositionGetClassID();
  uint64_t v3 = CMDerivedObjectCreate();
  if (!v3) {
    *a2 = 0;
  }
  return v3;
}

uint64_t remoteXPCMutableComposition_CompleteObjectSetup(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  *uint64_t DerivedStorage = a2;
  DerivedStorage[2] = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D548]);

  return FigXPCRemoteClientAssociateObject();
}

uint64_t remoteXPCMutableCompositionClient_DeadConnectionCallback()
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  *(unsigned char *)(result + 9) = 1;
  return result;
}

uint64_t remoteXPCMutableComposition_Invalidate()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 8)) {
    goto LABEL_7;
  }
  uint64_t v1 = DerivedStorage;
  *(unsigned char *)(DerivedStorage + 8) = 1;
  FigXPCRemoteClientDisassociateObject();
  if (!*(unsigned char *)(v1 + 9))
  {
    uint64_t v2 = FigXPCCreateBasicMessage();
    if (v2 || (uint64_t v2 = FigXPCRemoteClientSendSyncMessage(), v2))
    {
      uint64_t v4 = v2;
      goto LABEL_8;
    }
  }
  *(void *)uint64_t v1 = 0;
  uint64_t v3 = *(const void **)(v1 + 16);
  if (!v3)
  {
LABEL_7:
    uint64_t v4 = 0;
  }
  else
  {
    CFRelease(v3);
    uint64_t v4 = 0;
    *(void *)(v1 + 16) = 0;
  }
LABEL_8:
  FigXPCRelease();
  return v4;
}

__CFString *remoteXPCMutableComposition_CopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = CFGetAllocator(a1);
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(v3, 0);
  CFIndex v5 = CFGetRetainCount(a1);
  if (*(unsigned char *)(DerivedStorage + 9)) {
    uint64_t v6 = " SERVER DIED";
  }
  else {
    uint64_t v6 = "";
  }
  CFStringAppendFormat(Mutable, 0, @"<FigMutableCompositionRemote(XPC) %p retainCount: %ld ObjectID: %016llx%s>", a1, v5, *(void *)DerivedStorage, v6);
  return Mutable;
}

uint64_t remoteXPCMutableComposition_CopyProperty(uint64_t a1)
{
  uint64_t v4 = 0;
  ObjectIOSurfaceID ID = remoteXPCMutableComposition_GetObjectID(a1, &v4);
  if (!ObjectID) {
    ObjectIOSurfaceID ID = FigXPCSendStdCopyPropertyMessage();
  }
  uint64_t v2 = ObjectID;
  FigXPCRemoteClientKillServerOnTimeout();
  return v2;
}

uint64_t remoteXPCMutableComposition_SetProperty(uint64_t a1)
{
  uint64_t v4 = 0;
  ObjectIOSurfaceID ID = remoteXPCMutableComposition_GetObjectID(a1, &v4);
  if (!ObjectID) {
    ObjectIOSurfaceID ID = FigXPCSendStdSetPropertyMessage();
  }
  uint64_t v2 = ObjectID;
  FigXPCRemoteClientKillServerOnTimeout();
  return v2;
}

uint64_t remoteXPCMutableComposition_GetObjectID(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 8) || *(unsigned char *)(DerivedStorage + 9))
  {
    return FigSignalErrorAt();
  }
  else
  {
    *a2 = *(void *)DerivedStorage;
    return 0;
  }
}

uint64_t remoteXPCMutableComposition_CreateMutableCopy(uint64_t a1, uint64_t a2, void *a3)
{
  xpc_object_t xdict = 0;
  uint64_t v14 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  if (!a3)
  {
    ObjectIOSurfaceID ID = FigSignalErrorAt();
    goto LABEL_14;
  }
  ObjectIOSurfaceID ID = remoteXPCMutableComposition_GetObjectID(a2, &v12);
  if (ObjectID)
  {
LABEL_14:
    uint64_t v9 = ObjectID;
LABEL_8:
    uint64_t v8 = 0;
    goto LABEL_9;
  }
  uint64_t v6 = remoteXPCMutableComposition_CreateObject(a1, &v11);
  if (!v6)
  {
    uint64_t v6 = FigXPCCreateBasicMessage();
    if (!v6)
    {
      uint64_t v6 = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!v6)
      {
        uint64_t uint64 = xpc_dictionary_get_uint64(xdict, (const char *)*MEMORY[0x1E4F20280]);
        uint64_t v8 = v11;
        uint64_t v9 = remoteXPCMutableComposition_CompleteObjectSetup((uint64_t)v11, uint64);
        if (v9) {
          goto LABEL_9;
        }
        *a3 = v8;
        goto LABEL_8;
      }
    }
  }
  uint64_t v9 = v6;
  uint64_t v8 = v11;
LABEL_9:
  FigXPCRelease();
  FigXPCRelease();
  if (v8) {
    CFRelease(v8);
  }
  FigXPCRemoteClientKillServerOnTimeout();
  return v9;
}

uint64_t remoteXPCMutableComposition_CopyFormatReader(uint64_t a1, int a2, uint64_t a3, CFTypeRef *a4)
{
  xpc_object_t v12 = 0;
  xpc_object_t xdict = 0;
  uint64_t v11 = 0;
  if (a4)
  {
    ObjectIOSurfaceID ID = remoteXPCMutableComposition_GetObjectID(a1, &v11);
    if (!ObjectID)
    {
      ObjectIOSurfaceID ID = FigXPCCreateBasicMessage();
      if (!ObjectID)
      {
        xpc_dictionary_set_BOOL(xdict, "MakeImmutableSnapshot", a2 != 0);
        if (!a3 || (ObjectIOSurfaceID ID = FigXPCMessageSetCFDictionary(), !ObjectID))
        {
          ObjectIOSurfaceID ID = FigXPCRemoteClientSendSyncMessageCreatingReply();
          if (!ObjectID)
          {
            uint64_t uint64 = xpc_dictionary_get_uint64(v12, "FormatReader");
            if (!uint64)
            {
              uint64_t v9 = 0;
              goto LABEL_11;
            }
            ObjectIOSurfaceID ID = FigFormatReaderXPCRemoteRetainCopiedPlaybackProcessFormatReader(uint64, a4);
          }
        }
      }
    }
  }
  else
  {
    ObjectIOSurfaceID ID = FigSignalErrorAt();
  }
  uint64_t v9 = ObjectID;
LABEL_11:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v9;
}

uint64_t remoteXPCMutableComposition_GetTrackCompatibleWithAssetTrack(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  xpc_object_t v10 = 0;
  xpc_object_t xdict = 0;
  uint64_t v9 = 0;
  if (!a2 || !a4)
  {
    ObjectIOSurfaceID ID = FigSignalErrorAt();
LABEL_10:
    uint64_t v7 = ObjectID;
    goto LABEL_8;
  }
  ObjectIOSurfaceID ID = remoteXPCMutableComposition_GetObjectID(a1, &v9);
  if (ObjectID) {
    goto LABEL_10;
  }
  CMBaseObjectGetDerivedStorage();
  FigSandboxRegisterURLWithProcessAndCopyRegistration();
  ObjectIOSurfaceID ID = FigXPCCreateBasicMessage();
  if (ObjectID) {
    goto LABEL_10;
  }
  xpc_dictionary_set_int64(xdict, "AssetTrackID", a3);
  ObjectIOSurfaceID ID = FigXPCMessageSetCFURL();
  if (ObjectID) {
    goto LABEL_10;
  }
  uint64_t v7 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (!v7) {
    *a4 = xpc_dictionary_get_int64(v10, "TrackID");
  }
LABEL_8:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v7;
}

uint64_t remoteXPCMutableComposition_AddTrack(uint64_t a1, unsigned int a2, uint64_t a3, int a4, _DWORD *a5)
{
  xpc_object_t v13 = 0;
  xpc_object_t xdict = 0;
  uint64_t v12 = 0;
  ObjectIOSurfaceID ID = remoteXPCMutableComposition_GetObjectID(a1, &v12);
  if (ObjectID
    || (ObjectIOSurfaceID ID = FigXPCCreateBasicMessage(), ObjectID)
    || (xpc_dictionary_set_uint64(xdict, "MediaType", a2), xpc_dictionary_set_int64(xdict, "TrackID", a4), a3)
    && (ObjectIOSurfaceID ID = FigXPCMessageSetCFDictionary(), ObjectID))
  {
    uint64_t v10 = ObjectID;
  }
  else
  {
    uint64_t v10 = FigXPCRemoteClientSendSyncMessageCreatingReply();
    if (a5 && !v10) {
      *a5 = xpc_dictionary_get_int64(v13, "TrackID");
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v10;
}

uint64_t remoteXPCMutableComposition_DeleteTrack(uint64_t a1, int a2)
{
  uint64_t v6 = 0;
  xpc_object_t xdict = 0;
  ObjectIOSurfaceID ID = remoteXPCMutableComposition_GetObjectID(a1, &v6);
  if (ObjectID)
  {
    uint64_t v4 = ObjectID;
  }
  else
  {
    uint64_t v4 = FigXPCCreateBasicMessage();
    if (!v4)
    {
      xpc_dictionary_set_int64(xdict, "TrackID", a2);
      uint64_t v4 = FigXPCRemoteClientSendSyncMessage();
    }
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v4;
}

uint64_t remoteXPCMutableComposition_SetTrackEditList(uint64_t a1, int a2, size_t a3, uint64_t a4)
{
  uint64_t v15 = 0;
  xpc_object_t xdict = 0;
  CFDataRef theData = 0;
  if ((a3 & 0x8000000000000000) != 0) {
    goto LABEL_14;
  }
  size_t v5 = a3;
  ObjectIOSurfaceID ID = remoteXPCMutableComposition_GetObjectID(a1, &v15);
  if (ObjectID) {
    goto LABEL_15;
  }
  CMBaseObjectGetDerivedStorage();
  ObjectIOSurfaceID ID = FigXPCCreateBasicMessage();
  if (ObjectID) {
    goto LABEL_15;
  }
  xpc_dictionary_set_int64(xdict, "TrackID", a2);
  xpc_dictionary_set_int64(xdict, "EditCount", v5);
  if (!v5) {
    goto LABEL_10;
  }
  if (!a4)
  {
LABEL_14:
    ObjectIOSurfaceID ID = FigSignalErrorAt();
LABEL_15:
    uint64_t v8 = ObjectID;
    goto LABEL_13;
  }
  uint64_t v8 = FigRemote_CreateEditArrayData(v5, a4, (const __CFAllocator *)*MEMORY[0x1E4F1CF80], &theData);
  CFDataRef v9 = theData;
  if (v8) {
    goto LABEL_11;
  }
  BytePtr = CFDataGetBytePtr(theData);
  size_t Length = CFDataGetLength(theData);
  uint64_t v12 = a4 + 96;
  do
  {
    FigSandboxRegisterURLWithProcessAndCopyRegistration();
    v12 += 108;
    --v5;
  }
  while (v5);
  xpc_dictionary_set_data(xdict, "EditListData", BytePtr, Length);
LABEL_10:
  uint64_t v8 = FigXPCRemoteClientSendSyncMessage();
  CFDataRef v9 = theData;
LABEL_11:
  if (v9) {
    CFRelease(v9);
  }
LABEL_13:
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v8;
}

uint64_t remoteXPCMutableComposition_CopyTrackEditList(const void *a1, int a2, void *a3, uint64_t a4, uint64_t a5)
{
  xpc_object_t v20 = 0;
  xpc_object_t xdict = 0;
  size_t v18 = 0;
  uint64_t v19 = 0;
  ObjectIOSurfaceID ID = remoteXPCMutableComposition_GetObjectID((uint64_t)a1, &v19);
  if (!ObjectID)
  {
    ObjectIOSurfaceID ID = FigXPCCreateBasicMessage();
    if (!ObjectID)
    {
      xpc_dictionary_set_int64(xdict, "TrackID", a2);
      ObjectIOSurfaceID ID = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!ObjectID)
      {
        unsigned int int64 = xpc_dictionary_get_int64(v20, "EditCount");
        data = (const UInt8 *)xpc_dictionary_get_data(v20, "EditListData", &v18);
        if (a3) {
          *a3 = int64;
        }
        if (!a5)
        {
          uint64_t EditArrayFromData = 0;
          goto LABEL_12;
        }
        if (a4 >= int64)
        {
          uint64_t v14 = int64;
          unint64_t v15 = v18;
          CFAllocatorRef v16 = CFGetAllocator(a1);
          uint64_t EditArrayFromData = FigRemote_CreateEditArrayFromData(data, v15, v16, v14, a5);
          bzero((void *)(a5 + 108 * v14), 108 * (a4 - v14));
          goto LABEL_12;
        }
        ObjectIOSurfaceID ID = FigSignalErrorAt();
      }
    }
  }
  uint64_t EditArrayFromData = ObjectID;
LABEL_12:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return EditArrayFromData;
}

uint64_t remoteXPCMutableComposition_AddFormatReaderForURL(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = 0;
  xpc_object_t xdict = 0;
  uint64_t value = 0;
  if (!a2 || !a3)
  {
    ObjectIOSurfaceID ID = FigSignalErrorAt();
LABEL_11:
    uint64_t v6 = ObjectID;
    goto LABEL_8;
  }
  ObjectIOSurfaceID ID = remoteXPCMutableComposition_GetObjectID(a1, &v9);
  if (ObjectID) {
    goto LABEL_11;
  }
  CMBaseObjectGetDerivedStorage();
  ObjectIOSurfaceID ID = FigFormatReaderXPCRemoteGetObjectID(a3, &value);
  if (ObjectID) {
    goto LABEL_11;
  }
  uint64_t v5 = FigXPCCreateBasicMessage();
  if (v5
    || (xpc_dictionary_set_uint64(xdict, "FormatReader", value),
        FigSandboxRegisterURLWithProcessAndCopyRegistration(),
        uint64_t v5 = FigXPCMessageSetCFURL(),
        v5))
  {
    uint64_t v6 = v5;
  }
  else
  {
    uint64_t v6 = FigXPCRemoteClientSendSyncMessage();
  }
LABEL_8:
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v6;
}

uint64_t remoteXPCMutableComposition_CopyTrackProperty(uint64_t a1, int a2, const void *a3, uint64_t a4, CFMutableArrayRef *a5)
{
  v11[1] = 0;
  xpc_object_t xdict = 0;
  v11[0] = 0;
  if (!a3 || !a5)
  {
    ObjectIOSurfaceID ID = FigSignalErrorAt();
    goto LABEL_12;
  }
  *a5 = 0;
  ObjectIOSurfaceID ID = remoteXPCMutableComposition_GetObjectID(a1, v11);
  if (ObjectID) {
    goto LABEL_12;
  }
  ObjectIOSurfaceID ID = FigXPCCreateBasicMessage();
  if (ObjectID) {
    goto LABEL_12;
  }
  xpc_dictionary_set_int64(xdict, "TrackID", a2);
  ObjectIOSurfaceID ID = FigXPCMessageSetCFString();
  if (ObjectID) {
    goto LABEL_12;
  }
  ObjectIOSurfaceID ID = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (ObjectID) {
    goto LABEL_12;
  }
  if (!CFEqual(a3, @"MutableCompositionTrack_FormatDescriptionReplacementTable"))
  {
    ObjectIOSurfaceID ID = FigXPCMessageCopyCFObject();
LABEL_12:
    uint64_t UnflattenedFormatDescriptionReplacementTable = ObjectID;
    goto LABEL_13;
  }
  uint64_t UnflattenedFormatDescriptionReplacementTable = FigXPCMessageCopyFormatDescriptionArray();
  if (!UnflattenedFormatDescriptionReplacementTable) {
    uint64_t UnflattenedFormatDescriptionReplacementTable = FigMutableCompositionClientServer_CreateUnflattenedFormatDescriptionReplacementTable(0, a5);
  }
LABEL_13:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return UnflattenedFormatDescriptionReplacementTable;
}

uint64_t remoteXPCMutableComposition_SetTrackProperty(uint64_t a1, int a2, const void *a3, const __CFArray *a4)
{
  uint64_t v11 = 0;
  xpc_object_t xdict = 0;
  CFTypeRef cf = 0;
  if (!a3)
  {
    uint64_t v8 = FigSignalErrorAt();
    goto LABEL_11;
  }
  ObjectIOSurfaceID ID = remoteXPCMutableComposition_GetObjectID(a1, &v11);
  if (!ObjectID)
  {
    ObjectIOSurfaceID ID = FigXPCCreateBasicMessage();
    if (!ObjectID)
    {
      xpc_dictionary_set_int64(xdict, "TrackID", a2);
      ObjectIOSurfaceID ID = FigXPCMessageSetCFString();
      if (!ObjectID)
      {
        if (CFEqual(a3, @"MutableCompositionTrack_FormatDescriptionReplacementTable"))
        {
          ObjectIOSurfaceID ID = (uint64_t)FigMutableCompositionClientServer_CreateFlattenedFormatDescriptionReplacementTable(a4, (__CFArray **)&cf);
          if (!ObjectID)
          {
            ObjectIOSurfaceID ID = FigXPCMessageSetFormatDescriptionArray();
            if (!ObjectID) {
              goto LABEL_8;
            }
          }
        }
        else
        {
          ObjectIOSurfaceID ID = FigXPCMessageSetCFObject();
          if (!ObjectID) {
LABEL_8:
          }
            ObjectIOSurfaceID ID = FigXPCRemoteClientSendSyncMessage();
        }
      }
    }
  }
  uint64_t v8 = ObjectID;
  if (cf) {
    CFRelease(cf);
  }
LABEL_11:
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v8;
}

uint64_t remoteXPCMutableComposition_InsertAssetSegmentIntoTrack(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12 = 0;
  xpc_object_t xdict = 0;
  if (!a3
    || *(void *)(a5 + 16)
    || (*(_DWORD *)(a5 + 12) & 0x1D) != 1
    || *(void *)(a6 + 16)
    || (*(_DWORD *)(a6 + 12) & 0x1D) != 1
    || *(void *)(a7 + 16))
  {
    ObjectIOSurfaceID ID = FigSignalErrorAt();
  }
  else
  {
    ObjectIOSurfaceID ID = remoteXPCMutableComposition_GetObjectID(a1, &v12);
    if (!ObjectID)
    {
      CMBaseObjectGetDerivedStorage();
      ObjectIOSurfaceID ID = FigXPCCreateBasicMessage();
      if (!ObjectID)
      {
        FigSandboxRegisterURLWithProcessAndCopyRegistration();
        xpc_dictionary_set_int64(xdict, "DestTrackID", a2);
        xpc_dictionary_set_int64(xdict, "AssetTrackID", a4);
        FigXPCMessageSetCMTime();
        FigXPCMessageSetCMTime();
        FigXPCMessageSetCMTime();
        ObjectIOSurfaceID ID = FigXPCMessageSetCFURL();
        if (!ObjectID) {
          ObjectIOSurfaceID ID = FigXPCRemoteClientSendSyncMessage();
        }
      }
    }
  }
  uint64_t v10 = ObjectID;
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v10;
}

uint64_t remoteXPCMutableComposition_InsertAssetSegment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v8[0] = 0;
  v8[1] = 0;
  if (!a2
    || *(void *)(a3 + 16)
    || (*(_DWORD *)(a3 + 12) & 0x1D) != 1
    || *(void *)(a4 + 16)
    || (*(_DWORD *)(a4 + 12) & 0x1D) != 1
    || *(void *)(a5 + 16))
  {
    ObjectIOSurfaceID ID = FigSignalErrorAt();
  }
  else
  {
    ObjectIOSurfaceID ID = remoteXPCMutableComposition_GetObjectID(a1, v8);
    if (!ObjectID)
    {
      CMBaseObjectGetDerivedStorage();
      ObjectIOSurfaceID ID = FigXPCCreateBasicMessage();
      if (!ObjectID)
      {
        FigSandboxRegisterURLWithProcessAndCopyRegistration();
        FigXPCMessageSetCMTime();
        FigXPCMessageSetCMTime();
        FigXPCMessageSetCMTime();
        ObjectIOSurfaceID ID = FigXPCMessageSetCFURL();
        if (!ObjectID) {
          ObjectIOSurfaceID ID = FigXPCRemoteClientSendSyncMessage();
        }
      }
    }
  }
  uint64_t v6 = ObjectID;
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v6;
}

uint64_t remoteXPCMutableComposition_InsertEmptyTrackSegment(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = 0;
  xpc_object_t xdict = 0;
  if (*(void *)(a3 + 16)
    || (*(_DWORD *)(a3 + 12) & 0x1D) != 1
    || *(void *)(a4 + 16)
    || (*(_DWORD *)(a4 + 12) & 0x1D) != 1)
  {
    ObjectIOSurfaceID ID = FigSignalErrorAt();
    goto LABEL_10;
  }
  ObjectIOSurfaceID ID = remoteXPCMutableComposition_GetObjectID(a1, &v8);
  if (ObjectID)
  {
LABEL_10:
    uint64_t v6 = ObjectID;
    goto LABEL_8;
  }
  uint64_t v6 = FigXPCCreateBasicMessage();
  if (!v6)
  {
    xpc_dictionary_set_int64(xdict, "TrackID", a2);
    FigXPCMessageSetCMTime();
    FigXPCMessageSetCMTime();
    uint64_t v6 = FigXPCRemoteClientSendSyncMessage();
  }
LABEL_8:
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v6;
}

uint64_t remoteXPCMutableComposition_InsertEmptySegment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v6[0] = 0;
  v6[1] = 0;
  if (*(void *)(a2 + 16)
    || (*(_DWORD *)(a2 + 12) & 0x1D) != 1
    || *(void *)(a3 + 16)
    || (*(_DWORD *)(a3 + 12) & 0x1D) != 1)
  {
    ObjectIOSurfaceID ID = FigSignalErrorAt();
    goto LABEL_10;
  }
  ObjectIOSurfaceID ID = remoteXPCMutableComposition_GetObjectID(a1, v6);
  if (ObjectID)
  {
LABEL_10:
    uint64_t v4 = ObjectID;
    goto LABEL_8;
  }
  uint64_t v4 = FigXPCCreateBasicMessage();
  if (!v4)
  {
    FigXPCMessageSetCMTime();
    FigXPCMessageSetCMTime();
    uint64_t v4 = FigXPCRemoteClientSendSyncMessage();
  }
LABEL_8:
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v4;
}

uint64_t remoteXPCMutableComposition_DeleteTrackSegment(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = 0;
  xpc_object_t xdict = 0;
  if (*(void *)(a3 + 16)
    || (*(_DWORD *)(a3 + 12) & 0x1D) != 1
    || *(void *)(a4 + 16)
    || (*(_DWORD *)(a4 + 12) & 0x1D) != 1)
  {
    ObjectIOSurfaceID ID = FigSignalErrorAt();
    goto LABEL_10;
  }
  ObjectIOSurfaceID ID = remoteXPCMutableComposition_GetObjectID(a1, &v8);
  if (ObjectID)
  {
LABEL_10:
    uint64_t v6 = ObjectID;
    goto LABEL_8;
  }
  uint64_t v6 = FigXPCCreateBasicMessage();
  if (!v6)
  {
    xpc_dictionary_set_int64(xdict, "TrackID", a2);
    FigXPCMessageSetCMTime();
    FigXPCMessageSetCMTime();
    uint64_t v6 = FigXPCRemoteClientSendSyncMessage();
  }
LABEL_8:
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v6;
}

uint64_t remoteXPCMutableComposition_DeleteSegment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v6[0] = 0;
  v6[1] = 0;
  if (*(void *)(a2 + 16)
    || (*(_DWORD *)(a2 + 12) & 0x1D) != 1
    || *(void *)(a3 + 16)
    || (*(_DWORD *)(a3 + 12) & 0x1D) != 1)
  {
    ObjectIOSurfaceID ID = FigSignalErrorAt();
    goto LABEL_10;
  }
  ObjectIOSurfaceID ID = remoteXPCMutableComposition_GetObjectID(a1, v6);
  if (ObjectID)
  {
LABEL_10:
    uint64_t v4 = ObjectID;
    goto LABEL_8;
  }
  uint64_t v4 = FigXPCCreateBasicMessage();
  if (!v4)
  {
    FigXPCMessageSetCMTime();
    FigXPCMessageSetCMTime();
    uint64_t v4 = FigXPCRemoteClientSendSyncMessage();
  }
LABEL_8:
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v4;
}

uint64_t remoteXPCMutableComposition_ScaleTrackSegment(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = 0;
  xpc_object_t xdict = 0;
  if (*(void *)(a3 + 16)
    || (*(_DWORD *)(a3 + 12) & 0x1D) != 1
    || *(void *)(a4 + 16)
    || (*(_DWORD *)(a4 + 12) & 0x1D) != 1
    || *(void *)(a5 + 16)
    || (*(_DWORD *)(a5 + 12) & 0x1D) != 1)
  {
    ObjectIOSurfaceID ID = FigSignalErrorAt();
    goto LABEL_12;
  }
  ObjectIOSurfaceID ID = remoteXPCMutableComposition_GetObjectID(a1, &v9);
  if (ObjectID)
  {
LABEL_12:
    uint64_t v7 = ObjectID;
    goto LABEL_10;
  }
  uint64_t v7 = FigXPCCreateBasicMessage();
  if (!v7)
  {
    xpc_dictionary_set_int64(xdict, "TrackID", a2);
    FigXPCMessageSetCMTime();
    FigXPCMessageSetCMTime();
    FigXPCMessageSetCMTime();
    uint64_t v7 = FigXPCRemoteClientSendSyncMessage();
  }
LABEL_10:
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v7;
}

uint64_t remoteXPCMutableComposition_ScaleSegment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v7[0] = 0;
  v7[1] = 0;
  if (*(void *)(a2 + 16)
    || (*(_DWORD *)(a2 + 12) & 0x1D) != 1
    || *(void *)(a3 + 16)
    || (*(_DWORD *)(a3 + 12) & 0x1D) != 1
    || *(void *)(a4 + 16)
    || (*(_DWORD *)(a4 + 12) & 0x1D) != 1)
  {
    ObjectIOSurfaceID ID = FigSignalErrorAt();
    goto LABEL_12;
  }
  ObjectIOSurfaceID ID = remoteXPCMutableComposition_GetObjectID(a1, v7);
  if (ObjectID)
  {
LABEL_12:
    uint64_t v5 = ObjectID;
    goto LABEL_10;
  }
  uint64_t v5 = FigXPCCreateBasicMessage();
  if (!v5)
  {
    FigXPCMessageSetCMTime();
    FigXPCMessageSetCMTime();
    FigXPCMessageSetCMTime();
    uint64_t v5 = FigXPCRemoteClientSendSyncMessage();
  }
LABEL_10:
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v5;
}

uint64_t remoteXPCMutableComposition_DeferTracksChangedNotifications(uint64_t a1)
{
  v5[0] = 0;
  v5[1] = 0;
  ObjectIOSurfaceID ID = remoteXPCMutableComposition_GetObjectID(a1, v5);
  if (ObjectID)
  {
    uint64_t v3 = ObjectID;
  }
  else
  {
    uint64_t v2 = FigXPCCreateBasicMessage();
    if (v2) {
      uint64_t v3 = v2;
    }
    else {
      uint64_t v3 = FigXPCRemoteClientSendSyncMessage();
    }
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v3;
}

uint64_t remoteXPCMutableComposition_PostDeferredTracksChangedNotification(uint64_t a1)
{
  v5[0] = 0;
  v5[1] = 0;
  ObjectIOSurfaceID ID = remoteXPCMutableComposition_GetObjectID(a1, v5);
  if (ObjectID)
  {
    uint64_t v3 = ObjectID;
  }
  else
  {
    uint64_t v2 = FigXPCCreateBasicMessage();
    if (v2) {
      uint64_t v3 = v2;
    }
    else {
      uint64_t v3 = FigXPCRemoteClientSendSyncMessage();
    }
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v3;
}

uint64_t remoteXPCMutableComposition_InsertSegmentArrayIntoTrack(uint64_t a1, int a2, CFArrayRef theArray, uint64_t a4, const __CFArray *a5, const __CFArray *a6, long long *a7)
{
  uint64_t v33 = 0;
  xpc_object_t xdict = 0;
  uint64_t value = 0;
  if (!theArray || !a4 || !a5 || !a6 || *((void *)a7 + 2))
  {
    uint64_t v26 = FigSignalErrorAt();
    goto LABEL_34;
  }
  uint64_t Count = CFArrayGetCount(theArray);
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], Count, MEMORY[0x1E4F1D510]);
  if (CFArrayGetCount(theArray) != Count || CFArrayGetCount(a5) != Count || CFArrayGetCount(a6) != Count)
  {
    ObjectIOSurfaceID ID = FigSignalErrorAt();
    goto LABEL_29;
  }
  int v29 = a2;
  ObjectIOSurfaceID ID = remoteXPCMutableComposition_GetObjectID(a1, &v33);
  if (ObjectID
    || (CFTypeRef v28 = a7,
        uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage(),
        ObjectIOSurfaceID ID = FigXPCCreateBasicMessage(),
        ObjectID))
  {
LABEL_29:
    uint64_t v26 = ObjectID;
    if (Mutable) {
      goto LABEL_33;
    }
    goto LABEL_34;
  }
  if (Count < 1)
  {
LABEL_24:
    xpc_dictionary_set_int64(xdict, "DestTrackID", v29);
    long long v30 = *v28;
    uint64_t v31 = *((void *)v28 + 2);
    FigXPCMessageSetCMTime();
    uint64_t appended = FigXPCMessageSetCFArray();
    if (appended) {
      goto LABEL_32;
    }
    ObjectIOSurfaceID ID = FigXPCMessageSetCFArray();
    if (!ObjectID)
    {
      ObjectIOSurfaceID ID = FigXPCMessageSetCFArray();
      if (!ObjectID)
      {
        ObjectIOSurfaceID ID = FigXPCMessageSetCFArray();
        if (!ObjectID) {
          ObjectIOSurfaceID ID = FigXPCRemoteClientSendSyncMessage();
        }
      }
    }
    goto LABEL_29;
  }
  CFIndex v17 = 0;
  size_t v18 = (const void *)*MEMORY[0x1E4F1D260];
  while (1)
  {
    CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v17);
    CFTypeID v20 = CFGetTypeID(ValueAtIndex);
    CFTypeID TypeID = CFNullGetTypeID();
    uint64_t v22 = v18;
    if (v20 == TypeID) {
      goto LABEL_18;
    }
    CFTypeID v23 = CFURLGetTypeID();
    if (v23 == CFGetTypeID(ValueAtIndex))
    {
      FigSandboxRegisterURLWithProcessAndCopyRegistration();
      if (value) {
        CFSetAddValue(*(CFMutableSetRef *)(DerivedStorage + 16), value);
      }
      uint64_t v22 = ValueAtIndex;
LABEL_18:
      CFArrayAppendValue(Mutable, v22);
      goto LABEL_23;
    }
    uint64_t v24 = FigMutableCompositionGetTypeID();
    if (v24 != CFGetTypeID(ValueAtIndex)) {
      break;
    }
    *(void *)&long long v30 = 0;
    if ((_UNKNOWN *)CMBaseObjectGetVTable() != &kFigMutableCompositionRemoteXPC_MutableCompositionVTable) {
      break;
    }
    uint64_t appended = remoteXPCMutableComposition_GetObjectID((uint64_t)ValueAtIndex, &v30);
    if (appended) {
      goto LABEL_32;
    }
    uint64_t appended = FigCFArrayAppendInt64();
    if (appended) {
      goto LABEL_32;
    }
LABEL_23:
    if (Count == ++v17) {
      goto LABEL_24;
    }
  }
  uint64_t appended = FigSignalErrorAt();
LABEL_32:
  uint64_t v26 = appended;
  if (Mutable) {
LABEL_33:
  }
    CFRelease(Mutable);
LABEL_34:
  FigXPCRelease();
  if (value) {
    CFRelease(value);
  }
  FigXPCRemoteClientKillServerOnTimeout();
  return v26;
}

uint64_t remoteXPCMutableComposition_AddAssetForURL(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = 0;
  xpc_object_t xdict = 0;
  uint64_t value = 0;
  if (!a2 || !a3)
  {
    ObjectIOSurfaceID ID = FigSignalErrorAt();
LABEL_11:
    uint64_t v6 = ObjectID;
    goto LABEL_8;
  }
  ObjectIOSurfaceID ID = remoteXPCMutableComposition_GetObjectID(a1, &v9);
  if (ObjectID) {
    goto LABEL_11;
  }
  CMBaseObjectGetDerivedStorage();
  ObjectIOSurfaceID ID = FigAssetXPCRemoteGetObjectID(a3, &value);
  if (ObjectID) {
    goto LABEL_11;
  }
  uint64_t v5 = FigXPCCreateBasicMessage();
  if (v5
    || (xpc_dictionary_set_uint64(xdict, "Asset", value),
        FigSandboxRegisterURLWithProcessAndCopyRegistration(),
        uint64_t v5 = FigXPCMessageSetCFURL(),
        v5))
  {
    uint64_t v6 = v5;
  }
  else
  {
    uint64_t v6 = FigXPCRemoteClientSendSyncMessage();
  }
LABEL_8:
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v6;
}

uint64_t remoteXPCMutableComposition_InsertMutableCompositionSegmentIntoTrack(uint64_t a1, int a2, const void *a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  if (!a3
    || *(void *)(a5 + 16)
    || (*(_DWORD *)(a5 + 12) & 0x1D) != 1
    || *(void *)(a6 + 16)
    || (*(_DWORD *)(a6 + 12) & 0x1D) != 1
    || *(void *)(a7 + 16))
  {
    goto LABEL_14;
  }
  ObjectIOSurfaceID ID = remoteXPCMutableComposition_GetObjectID(a1, &v15);
  if (ObjectID)
  {
LABEL_15:
    uint64_t v12 = ObjectID;
    goto LABEL_13;
  }
  uint64_t TypeID = FigMutableCompositionGetTypeID();
  if (TypeID != CFGetTypeID(a3)
    || (_UNKNOWN *)CMBaseObjectGetVTable() != &kFigMutableCompositionRemoteXPC_MutableCompositionVTable)
  {
LABEL_14:
    ObjectIOSurfaceID ID = FigSignalErrorAt();
    goto LABEL_15;
  }
  ObjectIOSurfaceID ID = remoteXPCMutableComposition_GetObjectID((uint64_t)a3, &v14);
  if (ObjectID) {
    goto LABEL_15;
  }
  uint64_t v12 = FigXPCCreateBasicMessage();
  if (!v12)
  {
    xpc_dictionary_set_int64(0, "AssetTrackID", a4);
    xpc_dictionary_set_uint64(0, "SourceCompositionID", v14);
    xpc_dictionary_set_int64(0, "DestTrackID", a2);
    FigXPCMessageSetCMTime();
    FigXPCMessageSetCMTime();
    FigXPCMessageSetCMTime();
    uint64_t v12 = FigXPCRemoteClientSendSyncMessage();
  }
LABEL_13:
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v12;
}

uint64_t remoteXPCMutableComposition_InsertMutableCompositionSegment(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t value = 0;
  uint64_t v11 = 0;
  if (!a2
    || *(void *)(a3 + 16)
    || (*(_DWORD *)(a3 + 12) & 0x1D) != 1
    || *(void *)(a4 + 16)
    || (*(_DWORD *)(a4 + 12) & 0x1D) != 1
    || *(void *)(a5 + 16))
  {
    goto LABEL_14;
  }
  ObjectIOSurfaceID ID = remoteXPCMutableComposition_GetObjectID(a1, &v11);
  if (ObjectID)
  {
LABEL_15:
    uint64_t v8 = ObjectID;
    goto LABEL_13;
  }
  uint64_t TypeID = FigMutableCompositionGetTypeID();
  if (TypeID != CFGetTypeID(a2)
    || (_UNKNOWN *)CMBaseObjectGetVTable() != &kFigMutableCompositionRemoteXPC_MutableCompositionVTable)
  {
LABEL_14:
    ObjectIOSurfaceID ID = FigSignalErrorAt();
    goto LABEL_15;
  }
  ObjectIOSurfaceID ID = remoteXPCMutableComposition_GetObjectID((uint64_t)a2, &value);
  if (ObjectID) {
    goto LABEL_15;
  }
  uint64_t v8 = FigXPCCreateBasicMessage();
  if (!v8)
  {
    xpc_dictionary_set_uint64(0, "SourceCompositionID", value);
    FigXPCMessageSetCMTime();
    FigXPCMessageSetCMTime();
    FigXPCMessageSetCMTime();
    uint64_t v8 = FigXPCRemoteClientSendSyncMessage();
  }
LABEL_13:
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v8;
}

uint64_t remoteXPCMutableComposition_GetTrackCompatibleWithMutableCompositionTrack(uint64_t a1, const void *a2, int a3, _DWORD *a4)
{
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  if (!a2) {
    goto LABEL_10;
  }
  ObjectIOSurfaceID ID = remoteXPCMutableComposition_GetObjectID(a1, &v12);
  if (ObjectID)
  {
LABEL_11:
    uint64_t v9 = ObjectID;
    goto LABEL_9;
  }
  uint64_t TypeID = FigMutableCompositionGetTypeID();
  if (TypeID != CFGetTypeID(a2)
    || (_UNKNOWN *)CMBaseObjectGetVTable() != &kFigMutableCompositionRemoteXPC_MutableCompositionVTable)
  {
LABEL_10:
    ObjectIOSurfaceID ID = FigSignalErrorAt();
    goto LABEL_11;
  }
  ObjectIOSurfaceID ID = remoteXPCMutableComposition_GetObjectID((uint64_t)a2, &v11);
  if (ObjectID) {
    goto LABEL_11;
  }
  ObjectIOSurfaceID ID = FigXPCCreateBasicMessage();
  if (ObjectID) {
    goto LABEL_11;
  }
  xpc_dictionary_set_int64(0, "AssetTrackID", a3);
  xpc_dictionary_set_uint64(0, "SourceCompositionID", v11);
  uint64_t v9 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (!v9) {
    *a4 = xpc_dictionary_get_int64(0, "TrackID");
  }
LABEL_9:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v9;
}

uint64_t remoteXPCMutableComposition_CopyAsset(uint64_t a1, int a2, uint64_t a3, CFTypeRef *a4)
{
  xpc_object_t v11 = 0;
  xpc_object_t xdict = 0;
  uint64_t v10 = 0;
  if (a4)
  {
    ObjectIOSurfaceID ID = remoteXPCMutableComposition_GetObjectID(a1, &v10);
    if (!ObjectID)
    {
      ObjectIOSurfaceID ID = FigXPCCreateBasicMessage();
      if (!ObjectID)
      {
        xpc_dictionary_set_BOOL(xdict, "MakeImmutableSnapshot", a2 != 0);
        ObjectIOSurfaceID ID = FigXPCMessageSetCFDictionary();
        if (!ObjectID)
        {
          ObjectIOSurfaceID ID = FigXPCRemoteClientSendSyncMessageCreatingReply();
          if (!ObjectID)
          {
            uint64_t uint64 = xpc_dictionary_get_uint64(v11, "Asset");
            if (!uint64)
            {
              uint64_t v8 = 0;
              goto LABEL_10;
            }
            ObjectIOSurfaceID ID = FigAssetXPCRemoteRetainCopiedAsset(uint64, a4);
          }
        }
      }
    }
  }
  else
  {
    ObjectIOSurfaceID ID = FigSignalErrorAt();
  }
  uint64_t v8 = ObjectID;
LABEL_10:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v8;
}

uint64_t IFFItemHeaderMakerCreateWithIFFItemInformation(const void *a1, const void *a2, void *a3)
{
  if (a2 && a3 && (uint64_t v6 = CFAllocatorAllocate((CFAllocatorRef)a1, 24, 0)) != 0)
  {
    uint64_t v7 = v6;
    *uint64_t v6 = 0;
    v6[1] = 0;
    void v6[2] = 0;
    if (a1) {
      CFTypeRef v8 = CFRetain(a1);
    }
    else {
      CFTypeRef v8 = 0;
    }
    *uint64_t v7 = v8;
    v7[1] = CFRetain(a2);
    *a3 = v7;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void IFFItemHeaderMakerRelease(const __CFAllocator **ptr)
{
  if (ptr)
  {
    CFAllocatorRef v3 = *ptr;
    CFAllocatorRef v2 = ptr[1];
    if (v2) {
      CFRelease(v2);
    }
    CFAllocatorDeallocate(v3, ptr);
    if (v3)
    {
      CFRelease(v3);
    }
  }
}

uint64_t IFFItemHeaderMakerSetByteCountToAddToItemLocationExtentOffsets(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return FigSignalErrorAt();
  }
  *(void *)(a1 + 16) = a2;
  return 0;
}

uint64_t IFFItemHeaderMakerCopyGlobalMetadataAtomAsBlockBuffer(uint64_t a1, const __CFAllocator *a2, uint64_t a3, CMBlockBufferRef *a4)
{
  uint64_t v15 = 0;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v12 = 0u;
  CMBlockBufferRef blockBufferOut = 0;
  if (a1 && FigCFEqual() && a4)
  {
    uint64_t appended = CMBlockBufferCreateEmpty(a2, 0x20u, 0, &blockBufferOut);
    CMBlockBufferRef v8 = blockBufferOut;
    if (!appended)
    {
      uint64_t v9 = FigAtomWriterInitWithBlockBuffer();
      if (v9)
      {
        uint64_t appended = v9;
        CMBlockBufferRef v8 = blockBufferOut;
      }
      else
      {
        uint64_t appended = appendGlobalMetadataAtom(a1);
        CMBlockBufferRef v8 = blockBufferOut;
        if (!appended)
        {
          *a4 = blockBufferOut;
          return appended;
        }
      }
    }
    if (v8) {
      CFRelease(v8);
    }
    return appended;
  }

  return FigSignalErrorAt();
}

uint64_t appendGlobalMetadataAtom(uint64_t a1)
{
  uint64_t v209 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 8);
  CFIndex v186 = 0;
  PictureCFIndex Count = IFFInformationGetPictureCount(v1, 0, &v186);
  if (PictureCount || (PictureCFIndex Count = FigAtomWriterBeginAtom(), PictureCount))
  {
    uint64_t appended = PictureCount;
    goto LABEL_501;
  }
  uint64_t appended = FigAtomWriterAppendData();
  if (!appended && v186 >= 1)
  {
    memset(v197, 0, 24);
    memset(v196, 0, sizeof(v196));
    uint64_t v4 = *(void *)(a1 + 8);
    long long v205 = 0uLL;
    WORD4(v206) = 0;
    *(void *)&long long v206 = 0;
    v201.i32[0] = 0;
    uint64_t ItemHandler = FigAtomWriterInitWithParent();
    if (!ItemHandler)
    {
      uint64_t ItemHandler = FigAtomWriterBeginAtom();
      if (!ItemHandler)
      {
        uint64_t ItemHandler = IFFInformationGetItemHandler(v4, &v201);
        if (!ItemHandler)
        {
          LODWORD(v205) = 0;
          DWORD2(v205) = bswap32(v201.u32[0]);
          uint64_t appended = FigAtomWriterAppendData();
          FigAtomWriterEndAtom();
          if (appended) {
            goto LABEL_501;
          }
          memset(v197, 0, 24);
          memset(v196, 0, sizeof(v196));
          uint64_t v208 = 0;
          long long v206 = 0u;
          long long v207 = 0u;
          long long v205 = 0u;
          uint64_t v204 = 0;
          int8x16_t v202 = 0u;
          long long v203 = 0u;
          int8x16_t v201 = 0u;
          uint64_t v6 = FigAtomWriterInitWithParent();
          if (!v6)
          {
            uint64_t v6 = FigAtomWriterBeginAtom();
            if (!v6)
            {
              __s[0] = (char *)0x100000000000000;
              uint64_t v6 = FigAtomWriterInitWithParent();
              if (!v6)
              {
                uint64_t v6 = FigAtomWriterBeginAtom();
                if (!v6)
                {
                  uint64_t v6 = FigAtomWriterAppendData();
                  if (!v6)
                  {
                    LODWORD(v188) = 0x1000000;
                    uint64_t v6 = FigAtomWriterInitWithParent();
                    if (!v6)
                    {
                      uint64_t v6 = FigAtomWriterBeginAtom();
                      if (!v6) {
                        uint64_t v6 = FigAtomWriterAppendData();
                      }
                    }
                  }
                }
              }
            }
          }
          uint64_t appended = v6;
          FigAtomWriterEndAtom();
          FigAtomWriterEndAtom();
          FigAtomWriterEndAtom();
          if (appended) {
            goto LABEL_501;
          }
          memset(v197, 0, 24);
          memset(v196, 0, sizeof(v196));
          uint64_t v7 = *(void *)(a1 + 8);
          LOBYTE(__s[0]) = 0;
          v201.i32[0] = 0;
          uint64_t ItemHandler = IFFInformationGetPrimaryPicture(v7, 0, &v201, __s);
          if (!ItemHandler)
          {
            if (!LOBYTE(__s[0]))
            {
              FigAtomWriterEndAtom();
              goto LABEL_26;
            }
            uint64_t ItemHandler = FigAtomWriterInitWithParent();
            if (!ItemHandler)
            {
              uint64_t ItemHandler = FigAtomWriterBeginAtom();
              if (!ItemHandler)
              {
                unsigned int v8 = bswap32(v201.u32[0]);
                if (HIWORD(v201.i32[0]))
                {
                  LODWORD(v205) = 1;
                  DWORD1(v205) = v8;
                }
                else
                {
                  LODWORD(v205) = 0;
                  WORD2(v205) = HIWORD(v8);
                }
                uint64_t appended = FigAtomWriterAppendData();
                FigAtomWriterEndAtom();
                if (appended) {
                  goto LABEL_501;
                }
LABEL_26:
                memset(v197, 0, 24);
                memset(v196, 0, sizeof(v196));
                uint64_t v208 = 0;
                long long v206 = 0u;
                long long v207 = 0u;
                long long v205 = 0u;
                uint64_t v9 = *(void *)(a1 + 8);
                uint64_t ItemAtIndex = FigAtomWriterInitWithParent();
                if (ItemAtIndex || (uint64_t ItemAtIndex = FigAtomWriterBeginAtom(), ItemAtIndex))
                {
LABEL_111:
                  uint64_t appended = ItemAtIndex;
                }
                else
                {
                  ItemCFIndex Count = IFFInformationGetItemCount(v9);
                  if ((uint64_t)ItemCount < 1)
                  {
                    unsigned int v13 = 0;
                  }
                  else
                  {
                    CFIndex v12 = 0;
                    unsigned int v13 = 0;
                    do
                    {
                      v201.i64[0] = 0;
                      LODWORD(__s[0]) = 0;
                      LOBYTE(v188) = 0;
                      uint64_t ItemAtIndex = FigAtomWriterInitWithParent();
                      if (ItemAtIndex) {
                        goto LABEL_111;
                      }
                      uint64_t ItemAtIndex = IFFInformationGetItemAtIndex(v9, v12, &v201, __s, &v188);
                      if (ItemAtIndex) {
                        goto LABEL_111;
                      }
                      if ((_BYTE)v188) {
                        ++v13;
                      }
                      ++v12;
                    }
                    while (ItemCount != (const __CFArray *)v12);
                    if (HIWORD(v13))
                    {
                      v201.i32[0] = 1;
                      v201.i32[1] = bswap32(v13);
                      uint64_t appended = FigAtomWriterAppendData();
                      if (appended) {
                        goto LABEL_68;
                      }
                      goto LABEL_41;
                    }
                  }
                  v201.i32[0] = 0;
                  v201.i16[2] = bswap32(v13) >> 16;
                  uint64_t v14 = FigAtomWriterAppendData();
                  uint64_t appended = v14;
                  if ((uint64_t)ItemCount >= 1 && !v14)
                  {
LABEL_41:
                    CFIndex v15 = 0;
                    while (1)
                    {
                      *(void *)&long long v188 = 0;
                      LODWORD(v193) = 0;
                      BYTE4(v195) = 0;
                      LOWORD(v189) = 0;
                      LODWORD(v192) = 0;
                      uint64_t v200 = 0;
                      uint64_t ItemAtIndex = FigAtomWriterInitWithParent();
                      if (ItemAtIndex) {
                        goto LABEL_111;
                      }
                      uint64_t ItemAtIndex = IFFInformationGetItemAtIndex(v9, v15, &v188, &v193, (unsigned char *)&v195 + 4);
                      if (ItemAtIndex) {
                        goto LABEL_111;
                      }
                      if (!BYTE4(v195)) {
                        goto LABEL_66;
                      }
                      uint64_t ItemAtIndex = FigAtomWriterBeginAtom();
                      if (ItemAtIndex) {
                        goto LABEL_111;
                      }
                      uint64_t ItemAtIndex = IFFInformationGetItemProtectionIndex(v188, &v189);
                      if (ItemAtIndex) {
                        goto LABEL_111;
                      }
                      uint64_t ItemAtIndex = IFFInformationGetItemType(v188, &v192);
                      if (ItemAtIndex) {
                        goto LABEL_111;
                      }
                      uint64_t ItemAtIndex = IFFInformationGetItemName(v188, (const char **)&v200);
                      if (ItemAtIndex) {
                        goto LABEL_111;
                      }
                      size_t v16 = strlen((const char *)v200);
                      BOOL v17 = IFFInformationIsItemDisplayable(v188) == 0;
                      *(char **)((char *)__s + 5) = 0;
                      __s[0] = 0;
                      *(uint64_t *)((char *)v201.i64 + 7) = 0;
                      v201.i64[0] = 0;
                      if (WORD1(v193))
                      {
                        v201.i64[0] = _byteswap_uint64(__PAIR64__(v17 | 0x3000000u, v193));
                        v201.i16[4] = bswap32((unsigned __int16)v189) >> 16;
                        *(__int32 *)((char *)&v201.i32[2] + 2) = bswap32(v192);
                      }
                      else
                      {
                        LODWORD(__s[0]) = bswap32(v17 | 0x2000000);
                        WORD2(__s[0]) = bswap32(v193) >> 16;
                        HIWORD(__s[0]) = bswap32((unsigned __int16)v189) >> 16;
                        LODWORD(__s[1]) = bswap32(v192);
                        BYTE4(__s[1]) = 0;
                      }
                      uint64_t ItemAtIndex = FigAtomWriterAppendData();
                      if (ItemAtIndex) {
                        goto LABEL_111;
                      }
                      if (v16)
                      {
                        uint64_t ItemAtIndex = FigAtomWriterAppendData();
                        if (ItemAtIndex) {
                          goto LABEL_111;
                        }
                      }
                      if (v192 == 1970432288)
                      {
                        CFTypeRef v199 = 0;
                        uint64_t ItemAtIndex = IFFInformationGetItemURIType(v188, (const char **)&v199);
                        if (ItemAtIndex) {
                          goto LABEL_111;
                        }
                        strlen(v199);
                      }
                      else
                      {
                        if (v192 != 1835625829) {
                          goto LABEL_65;
                        }
                        uint64_t v198 = 0;
                        CFTypeRef v199 = 0;
                        uint64_t ItemAtIndex = IFFInformationGetItemMIMETypeAndEncoding(v188, (const char **)&v199, &v198);
                        if (ItemAtIndex) {
                          goto LABEL_111;
                        }
                        strlen(v199);
                        uint64_t ItemAtIndex = FigAtomWriterAppendData();
                        if (ItemAtIndex) {
                          goto LABEL_111;
                        }
                        if (!v198 || strlen(v198) + 1 < 2) {
                          goto LABEL_65;
                        }
                      }
                      uint64_t ItemAtIndex = FigAtomWriterAppendData();
                      if (ItemAtIndex) {
                        goto LABEL_111;
                      }
LABEL_65:
                      FigAtomWriterEndAtom();
LABEL_66:
                      if (ItemCount == (const __CFArray *)++v15)
                      {
                        uint64_t appended = 0;
                        break;
                      }
                    }
                  }
                }
LABEL_68:
                FigAtomWriterEndAtom();
                FigAtomWriterEndAtom();
                if (appended) {
                  goto LABEL_501;
                }
                memset(v197, 0, 24);
                memset(v196, 0, sizeof(v196));
                uint64_t v208 = 0;
                long long v206 = 0u;
                long long v207 = 0u;
                long long v205 = 0u;
                uint64_t v18 = *(void *)(a1 + 8);
                LODWORD(v198) = 0;
                if (!IFFInformationHasItemReferences(v18)) {
                  goto LABEL_110;
                }
                uint64_t v19 = FigAtomWriterInitWithParent();
                if (v19
                  || (uint64_t v19 = FigAtomWriterBeginAtom(), v19)
                  || (LODWORD(v198) = 0, uint64_t v19 = FigAtomWriterAppendData(), v19))
                {
                  uint64_t appended = v19;
                  CFTypeRef v25 = 0;
                  uint64_t v24 = 0;
                  goto LABEL_114;
                }
                CFArrayRef v20 = IFFInformationGetItemCount(v18);
                int HasLargeItemReferenceIDs = IFFInformationHasLargeItemReferenceIDs(v18);
                if ((uint64_t)v20 < 1)
                {
LABEL_110:
                  CFTypeRef v25 = 0;
                  uint64_t v24 = 0;
                  uint64_t appended = 0;
                  goto LABEL_114;
                }
                int v22 = HasLargeItemReferenceIDs;
                CFIndex v23 = 0;
                uint64_t v24 = 0;
                CFTypeRef v25 = 0;
                while (1)
                {
                  __s[0] = 0;
                  LODWORD(v193) = 0;
                  LOBYTE(v189) = 0;
                  uint64_t ItemReferencesAtIndex = IFFInformationGetItemAtIndex(v18, v23, __s, &v193, &v189);
                  if (ItemReferencesAtIndex) {
                    goto LABEL_113;
                  }
                  if ((_BYTE)v189 && (uint64_t)IFFInformationGetItemReferenceCount((uint64_t)__s[0]) >= 1) {
                    break;
                  }
LABEL_108:
                  if ((const __CFArray *)++v23 == v20)
                  {
                    uint64_t appended = 0;
                    goto LABEL_114;
                  }
                }
                CFIndex v27 = 0;
                while (1)
                {
                  LODWORD(v192) = 0;
                  *(void *)&long long v188 = 0;
                  uint64_t v200 = 0;
                  uint64_t ItemReferencesAtIndex = IFFInformationGetItemReferencesAtIndex((uint64_t)__s[0], v27, &v192, &v188, &v200, 0);
                  if (ItemReferencesAtIndex) {
                    goto LABEL_113;
                  }
                  if (WORD1(v188)) {
                    break;
                  }
                  uint64_t ItemReferencesAtIndex = FigAtomWriterInitWithParent();
                  if (ItemReferencesAtIndex) {
                    goto LABEL_113;
                  }
                  uint64_t ItemReferencesAtIndex = FigAtomWriterBeginAtom();
                  if (ItemReferencesAtIndex) {
                    goto LABEL_113;
                  }
                  if (v22)
                  {
                    LODWORD(v199) = bswap32(v193);
                    WORD2(v199) = bswap32((unsigned __int16)v188) >> 16;
                    uint64_t ItemReferencesAtIndex = FigAtomWriterAppendData();
                    if (ItemReferencesAtIndex) {
                      goto LABEL_113;
                    }
                    uint64_t v28 = v188;
                    if ((uint64_t)v188 < 5)
                    {
                      CFTypeRef v25 = &v201;
                      uint64_t v29 = v188;
                    }
                    else
                    {
                      CFTypeRef v25 = (int8x16_t *)malloc_type_malloc(4 * v188, 0x100004052888210uLL);
                      if (!v25) {
                        break;
                      }
                      uint64_t v29 = v188;
                    }
                    if (v29 >= 1)
                    {
                      CFTypeRef v32 = (unsigned int *)v200;
                      uint64_t v33 = v25;
                      uint64_t v34 = v29;
                      do
                      {
                        unsigned int v35 = *v32++;
                        v33->i32[0] = bswap32(v35);
                        uint64_t v33 = (int8x16_t *)((char *)v33 + 4);
                        --v34;
                      }
                      while (v34);
                    }
                    uint64_t ItemReferencesAtIndex = FigAtomWriterAppendData();
                    if (ItemReferencesAtIndex) {
                      goto LABEL_113;
                    }
                    if (v28 >= 5)
                    {
                      free(v25);
                      CFTypeRef v25 = 0;
                    }
                    goto LABEL_106;
                  }
                  LOWORD(v199) = bswap32((unsigned __int16)v193) >> 16;
                  WORD1(v199) = bswap32((unsigned __int16)v188) >> 16;
                  uint64_t ItemReferencesAtIndex = FigAtomWriterAppendData();
                  if (ItemReferencesAtIndex) {
                    goto LABEL_113;
                  }
                  uint64_t v30 = v188;
                  if ((uint64_t)v188 < 9)
                  {
                    uint64_t v24 = &v201;
                    uint64_t v31 = v188;
                    goto LABEL_100;
                  }
                  uint64_t v24 = (int8x16_t *)malloc_type_malloc(2 * v188, 0x1000040BDFB0063uLL);
                  if (!v24) {
                    break;
                  }
                  uint64_t v31 = v188;
LABEL_100:
                  if (v31 >= 1)
                  {
                    CFTypeRef v36 = (unsigned __int16 *)v200;
                    CFTypeRef v37 = v24;
                    uint64_t v38 = v31;
                    do
                    {
                      unsigned int v39 = *v36;
                      v36 += 2;
                      v37->i16[0] = bswap32(v39) >> 16;
                      CFTypeRef v37 = (int8x16_t *)((char *)v37 + 2);
                      --v38;
                    }
                    while (v38);
                  }
                  uint64_t ItemReferencesAtIndex = FigAtomWriterAppendData();
                  if (ItemReferencesAtIndex) {
                    goto LABEL_113;
                  }
                  if (v30 >= 9)
                  {
                    free(v24);
                    uint64_t v24 = 0;
                  }
LABEL_106:
                  uint64_t ItemReferencesAtIndex = FigAtomWriterEndAtom();
                  if (ItemReferencesAtIndex) {
                    goto LABEL_113;
                  }
                  if (++v27 >= (uint64_t)IFFInformationGetItemReferenceCount((uint64_t)__s[0])) {
                    goto LABEL_108;
                  }
                }
                uint64_t ItemReferencesAtIndex = FigSignalErrorAt();
LABEL_113:
                uint64_t appended = ItemReferencesAtIndex;
LABEL_114:
                FigAtomWriterEndAtom();
                FigAtomWriterEndAtom();
                if (v24 != &v201 && v24) {
                  free(v24);
                }
                if (v25 != &v201 && v25) {
                  free(v25);
                }
                if (appended) {
                  goto LABEL_501;
                }
                uint64_t v204 = 0;
                int8x16_t v202 = 0u;
                long long v203 = 0u;
                int8x16_t v201 = 0u;
                uint64_t v40 = FigAtomWriterInitWithParent();
                if (v40 || (uint64_t v40 = FigAtomWriterBeginAtom(), v40))
                {
                  uint64_t appended = v40;
                  goto LABEL_500;
                }
                uint64_t v208 = 0;
                long long v206 = 0u;
                long long v207 = 0u;
                long long v205 = 0u;
                uint64_t v41 = *(void *)(a1 + 8);
                uint64_t SharedItemPropertyAtIndex = FigAtomWriterInitWithParent();
                if (SharedItemPropertyAtIndex
                  || (uint64_t SharedItemPropertyAtIndex = FigAtomWriterBeginAtom(), SharedItemPropertyAtIndex))
                {
LABEL_367:
                  uint64_t appended = SharedItemPropertyAtIndex;
                  goto LABEL_409;
                }
                SharedItemPropertyCFIndex Count = IFFInformationGetSharedItemPropertyCount(v41);
                if ((uint64_t)SharedItemPropertyCount >= 1)
                {
                  CFArrayRef v44 = SharedItemPropertyCount;
                  CFIndex v45 = 0;
                  while (2)
                  {
                    LODWORD(v192) = 0;
                    uint64_t v193 = 0;
                    uint64_t SharedItemPropertyAtIndex = IFFInformationGetSharedItemPropertyAtIndex(v41, v45, &v192, &v193);
                    if (SharedItemPropertyAtIndex) {
                      goto LABEL_367;
                    }
                    switch((int)v192)
                    {
                      case 1:
                        memset(v197, 0, 24);
                        memset(v196, 0, sizeof(v196));
                        LODWORD(v200) = 0;
                        __s[0] = 0;
                        *(void *)&long long v188 = 0;
                        ItemPropertyCodecConfiguratiouint64_t n = IFFInformationGetItemPropertyCodecConfiguration(v193, &v200, __s, &v188);
                        if (!ItemPropertyCodecConfiguration)
                        {
                          ItemPropertyCodecConfiguratiouint64_t n = FigAtomWriterInitWithParent();
                          if (!ItemPropertyCodecConfiguration)
                          {
                            ItemPropertyCodecConfiguratiouint64_t n = FigAtomWriterBeginAtom();
                            if (!ItemPropertyCodecConfiguration) {
                              goto LABEL_294;
                            }
                          }
                        }
                        goto LABEL_366;
                      case 2:
                        memset(v197, 0, 24);
                        memset(v196, 0, sizeof(v196));
                        LODWORD(__s[1]) = 0;
                        __s[0] = 0;
                        LODWORD(v188) = 0;
                        LODWORD(v200) = 0;
                        ItemPropertyCodecConfiguratiouint64_t n = IFFInformationGetItemPropertySpatialExtents(v193, &v188, &v200);
                        if (ItemPropertyCodecConfiguration) {
                          goto LABEL_366;
                        }
                        ItemPropertyCodecConfiguratiouint64_t n = FigAtomWriterInitWithParent();
                        if (ItemPropertyCodecConfiguration) {
                          goto LABEL_366;
                        }
                        ItemPropertyCodecConfiguratiouint64_t n = FigAtomWriterBeginAtom();
                        if (ItemPropertyCodecConfiguration) {
                          goto LABEL_366;
                        }
                        LODWORD(__s[0]) = 0;
                        HIDWORD(__s[0]) = bswap32(v188);
                        LODWORD(__s[1]) = bswap32(v200);
                        goto LABEL_294;
                      case 3:
                        memset(v197, 0, 24);
                        memset(v196, 0, sizeof(v196));
                        __s[0] = 0;
                        LODWORD(v188) = 0;
                        LODWORD(v200) = 0;
                        ItemPropertyCodecConfiguratiouint64_t n = IFFInformationGetItemPropertySpatialExtents(v193, &v188, &v200);
                        if (ItemPropertyCodecConfiguration) {
                          goto LABEL_366;
                        }
                        ItemPropertyCodecConfiguratiouint64_t n = FigAtomWriterInitWithParent();
                        if (ItemPropertyCodecConfiguration) {
                          goto LABEL_366;
                        }
                        ItemPropertyCodecConfiguratiouint64_t n = FigAtomWriterBeginAtom();
                        if (ItemPropertyCodecConfiguration) {
                          goto LABEL_366;
                        }
                        __s[0] = (char *)_byteswap_uint64(__PAIR64__(v188, v200));
                        goto LABEL_294;
                      case 4:
                        CFRange v57 = (void *)v193;
                        unsigned int v58 = 1852009592;
                        goto LABEL_187;
                      case 5:
                        CFRange v57 = (void *)v193;
                        unsigned int v58 = 1886547814;
LABEL_187:
                        uint64_t SharedItemPropertyAtIndex = appendItemPropertyColorInformationAtom((uint64_t)v57, v58);
                        if (SharedItemPropertyAtIndex) {
                          goto LABEL_367;
                        }
                        goto LABEL_298;
                      case 6:
                        memset(v197, 0, 24);
                        memset(v196, 0, sizeof(v196));
                        ItemPropertyCodecConfiguratiouint64_t n = FigAtomWriterInitWithParent();
                        if (!ItemPropertyCodecConfiguration)
                        {
                          ItemPropertyCodecConfiguratiouint64_t n = FigAtomWriterBeginAtom();
                          if (!ItemPropertyCodecConfiguration) {
                            goto LABEL_294;
                          }
                        }
                        goto LABEL_366;
                      case 7:
                        memset(v197, 0, 24);
                        memset(v196, 0, sizeof(v196));
                        ItemPropertyCodecConfiguratiouint64_t n = FigAtomWriterInitWithParent();
                        if (!ItemPropertyCodecConfiguration)
                        {
                          ItemPropertyCodecConfiguratiouint64_t n = FigAtomWriterBeginAtom();
                          if (!ItemPropertyCodecConfiguration) {
                            goto LABEL_294;
                          }
                        }
                        goto LABEL_366;
                      case 8:
                        uint64_t v83 = v193;
                        memset(v197, 0, 24);
                        memset(v196, 0, sizeof(v196));
                        ItemPropertyCodecConfiguratiouint64_t n = FigAtomWriterInitWithParent();
                        if (!ItemPropertyCodecConfiguration)
                        {
                          ItemPropertyCodecConfiguratiouint64_t n = FigAtomWriterBeginAtom();
                          if (!ItemPropertyCodecConfiguration)
                          {
                            unsigned int v84 = *(unsigned __int8 *)(v83 + 40);
                            LOBYTE(__s[0]) = 0;
                            ItemPropertyCodecConfiguratiouint64_t n = IFFItemPropertyGetCCLVDataLength(v84, __s);
                            if (!ItemPropertyCodecConfiguration) {
                              goto LABEL_294;
                            }
                          }
                        }
                        goto LABEL_366;
                      case 9:
                        memset(v197, 0, 24);
                        memset(v196, 0, sizeof(v196));
                        ItemPropertyCodecConfiguratiouint64_t n = FigAtomWriterInitWithParent();
                        if (!ItemPropertyCodecConfiguration)
                        {
                          ItemPropertyCodecConfiguratiouint64_t n = FigAtomWriterBeginAtom();
                          if (!ItemPropertyCodecConfiguration) {
                            goto LABEL_294;
                          }
                        }
                        goto LABEL_366;
                      case 10:
                        memset(v197, 0, 24);
                        memset(v196, 0, sizeof(v196));
                        memset(__s, 0, 32);
                        *(void *)&long long v188 = 0;
                        CFTypeRef v199 = 0;
                        uint64_t v200 = 0;
                        uint64_t v198 = 0;
                        ItemPropertyCodecConfiguratiouint64_t n = IFFInformationGetItemPropertyCleanAperture((void *)v193, &v188, &v200, &v199, &v198);
                        if (ItemPropertyCodecConfiguration) {
                          goto LABEL_366;
                        }
                        ItemPropertyCodecConfiguratiouint64_t n = FigAtomWriterInitWithParent();
                        if (ItemPropertyCodecConfiguration) {
                          goto LABEL_366;
                        }
                        ItemPropertyCodecConfiguratiouint64_t n = FigAtomWriterBeginAtom();
                        if (ItemPropertyCodecConfiguration) {
                          goto LABEL_366;
                        }
                        unsigned int v75 = v188;
                        unsigned int v76 = bswap32(DWORD1(v188));
                        *(void *)&long long v188 = __rev32(v188);
                        unsigned int v77 = bswap32(HIDWORD(v200));
                        unsigned int v78 = bswap32(v200);
                        uint64_t v200 = __rev32(v200);
                        unsigned int v79 = v198;
                        unsigned int v80 = bswap32(HIDWORD(v199));
                        unsigned int v81 = bswap32(v199);
                        unsigned int v82 = bswap32(HIDWORD(v198));
                        uint64_t v198 = (char *)__rev32((unint64_t)v198);
                        CFTypeRef v199 = (char *)__rev32((unint64_t)v199);
                        __s[0] = (char *)__PAIR64__(v76, bswap32(v75));
                        __s[1] = (char *)__PAIR64__(v77, v78);
                        __s[2] = (char *)__PAIR64__(v80, v81);
                        __s[3] = (char *)__PAIR64__(v82, bswap32(v79));
                        goto LABEL_294;
                      case 11:
                        memset(v197, 0, 24);
                        memset(v196, 0, sizeof(v196));
                        LOBYTE(v188) = 0;
                        LODWORD(__s[0]) = 0;
                        ItemPropertyCodecConfiguratiouint64_t n = IFFInformationGetItemPropertyRotationDegreesCCW(v193, __s);
                        if (ItemPropertyCodecConfiguration) {
                          goto LABEL_366;
                        }
                        signed int v85 = (signed int)__s[0];
                        if (((uint64_t)__s[0] & 0x80000000) != 0) {
                          signed int v85 = LODWORD(__s[0]) + 360 * vcvtps_s32_f32((float)SLODWORD(__s[0]) / -360.0);
                        }
                        LODWORD(__s[0]) = v85 % 360;
                        if ((unsigned __int16)(((20389 * (unsigned __int16)(v85 % 360) + 728) << 15) | ((unsigned __int16)(20389 * (v85 % 360) + 728) >> 1)) >= 0x2D9u) {
                          goto LABEL_310;
                        }
                        ItemPropertyCodecConfiguratiouint64_t n = FigAtomWriterInitWithParent();
                        if (ItemPropertyCodecConfiguration) {
                          goto LABEL_366;
                        }
                        ItemPropertyCodecConfiguratiouint64_t n = FigAtomWriterBeginAtom();
                        if (ItemPropertyCodecConfiguration) {
                          goto LABEL_366;
                        }
                        char v59 = (SLOBYTE(__s[0]) / 90) & 3;
                        goto LABEL_230;
                      case 12:
                        memset(v197, 0, 24);
                        memset(v196, 0, sizeof(v196));
                        LOBYTE(v188) = 0;
                        LODWORD(__s[0]) = 0;
                        ItemPropertyCodecConfiguratiouint64_t n = IFFInformationGetItemPropertyRotationDegreesCCW(v193, __s);
                        if (ItemPropertyCodecConfiguration) {
                          goto LABEL_366;
                        }
                        if (LODWORD(__s[0]) >= 2) {
                          goto LABEL_310;
                        }
                        ItemPropertyCodecConfiguratiouint64_t n = FigAtomWriterInitWithParent();
                        if (ItemPropertyCodecConfiguration) {
                          goto LABEL_366;
                        }
                        ItemPropertyCodecConfiguratiouint64_t n = FigAtomWriterBeginAtom();
                        if (ItemPropertyCodecConfiguration) {
                          goto LABEL_366;
                        }
                        char v59 = (uint64_t)__s[0] & 1;
LABEL_230:
                        LOBYTE(v188) = v59;
                        goto LABEL_294;
                      case 13:
                        memset(v197, 0, 24);
                        memset(v196, 0, sizeof(v196));
                        __s[0] = 0;
                        *(void *)&long long v188 = 0;
                        uint64_t v200 = 0;
                        ItemPropertyCodecConfiguratiouint64_t n = IFFInformationGetItemPropertyAuxiliaryType((void *)v193, __s, &v188, &v200);
                        if (ItemPropertyCodecConfiguration) {
                          goto LABEL_366;
                        }
                        if (!__s[0])
                        {
LABEL_310:
                          uint64_t v51 = FigSignalErrorAt();
                          goto LABEL_295;
                        }
                        ItemPropertyCodecConfiguratiouint64_t n = FigAtomWriterInitWithParent();
                        if (ItemPropertyCodecConfiguration) {
                          goto LABEL_366;
                        }
                        ItemPropertyCodecConfiguratiouint64_t n = FigAtomWriterBeginAtom();
                        if (ItemPropertyCodecConfiguration) {
                          goto LABEL_366;
                        }
                        LODWORD(v199) = 0;
                        ItemPropertyCodecConfiguratiouint64_t n = FigAtomWriterAppendData();
                        if (ItemPropertyCodecConfiguration) {
                          goto LABEL_366;
                        }
                        strlen(__s[0]);
                        ItemPropertyCodecConfiguratiouint64_t n = FigAtomWriterAppendData();
                        if (ItemPropertyCodecConfiguration) {
                          goto LABEL_366;
                        }
                        if ((void)v188 && v200) {
                          goto LABEL_294;
                        }
                        goto LABEL_205;
                      case 14:
                        memset(v197, 0, 24);
                        memset(v196, 0, sizeof(v196));
                        LOBYTE(v200) = 0;
                        __s[0] = 0;
                        ItemPropertyCodecConfiguratiouint64_t n = IFFInformationGetItemPropertyPixelInformation(v193, &v200, __s);
                        if (!ItemPropertyCodecConfiguration)
                        {
                          ItemPropertyCodecConfiguratiouint64_t n = FigAtomWriterInitWithParent();
                          if (!ItemPropertyCodecConfiguration)
                          {
                            ItemPropertyCodecConfiguratiouint64_t n = FigAtomWriterBeginAtom();
                            if (!ItemPropertyCodecConfiguration)
                            {
                              LODWORD(v188) = 0;
                              ItemPropertyCodecConfiguratiouint64_t n = FigAtomWriterAppendData();
                              if (!ItemPropertyCodecConfiguration)
                              {
                                ItemPropertyCodecConfiguratiouint64_t n = FigAtomWriterAppendData();
                                if (!ItemPropertyCodecConfiguration) {
                                  goto LABEL_294;
                                }
                              }
                            }
                          }
                        }
                        goto LABEL_366;
                      case 15:
                      case 16:
                        v196[0].i32[0] = bswap32(*(_DWORD *)(v193 + 40));
                        uint64_t SharedItemPropertyAtIndex = _appendUUIDItemPropertyHelper(v193, (uint64_t)&v205, (uint64_t)v196);
                        if (SharedItemPropertyAtIndex) {
                          goto LABEL_367;
                        }
                        goto LABEL_298;
                      case 17:
                        long long v46 = (int8x8_t *)v193;
                        memset(v197, 0, 24);
                        memset(v196, 0, sizeof(v196));
                        ItemPropertyCodecConfiguratiouint64_t n = FigAtomWriterInitWithParent();
                        if (ItemPropertyCodecConfiguration) {
                          goto LABEL_366;
                        }
                        if (v46[9].i8[1])
                        {
                          ItemPropertyCodecConfiguratiouint64_t n = FigAtomWriterBeginAtom();
                          if (ItemPropertyCodecConfiguration) {
                            goto LABEL_366;
                          }
                        }
                        else
                        {
                          __s[0] = 0;
                          __s[1] = 0;
                          ItemPropertyCodecConfiguratiouint64_t n = IFFInformationGetCFUUIDBytesForItemPropertyType(v46[1].i32[0], __s);
                          if (ItemPropertyCodecConfiguration
                            || (ItemPropertyCodecConfiguratiouint64_t n = FigAtomWriterBeginUUIDAtom(),
                                ItemPropertyCodecConfiguration))
                          {
LABEL_366:
                            uint64_t appended = ItemPropertyCodecConfiguration;
                            goto LABEL_362;
                          }
                        }
                        if (v46[5].i32[0]) {
                          BOOL v86 = 1;
                        }
                        else {
                          BOOL v86 = v46[9].i8[0] != 0;
                        }
                        if (v46[5].i32[1]) {
                          BOOL v87 = 1;
                        }
                        else {
                          BOOL v87 = v46[9].i8[0] != 0;
                        }
                        if (v46[6].i32[0]) {
                          BOOL v88 = 1;
                        }
                        else {
                          BOOL v88 = v46[9].i8[0] != 0;
                        }
                        BOOL v89 = v46[6].i32[1] || v46[7].i32[0] || v46[7].i32[1] || v46[9].i8[0] != 0;
                        BOOL v90 = v46[8].i8[0] != 0;
                        if (!v46[8].i8[0] && v89) {
                          BOOL v90 = v46[9].i8[0] != 0;
                        }
                        if (v46[8].i32[1])
                        {
                          if (v87) {
                            int v91 = 2;
                          }
                          else {
                            int v91 = 0;
                          }
                          if (v88) {
                            int v92 = 4;
                          }
                          else {
                            int v92 = 0;
                          }
                          if (v89) {
                            int v93 = 8;
                          }
                          else {
                            int v93 = 0;
                          }
                          if (v90) {
                            int v94 = 16;
                          }
                          else {
                            int v94 = 0;
                          }
                        }
                        else
                        {
                          int v95 = v46[9].u8[0];
                          if (v87) {
                            int v91 = 2;
                          }
                          else {
                            int v91 = 0;
                          }
                          if (v88) {
                            int v92 = 4;
                          }
                          else {
                            int v92 = 0;
                          }
                          if (v89) {
                            int v93 = 8;
                          }
                          else {
                            int v93 = 0;
                          }
                          if (v90) {
                            int v94 = 16;
                          }
                          else {
                            int v94 = 0;
                          }
                          if (!v46[9].i8[0])
                          {
                            char v184 = 0;
LABEL_277:
                            LODWORD(v200) = (v93 | v91 | v86 | v95 | v94 | v92) << 24;
                            uint64_t v73 = FigAtomWriterAppendData();
                            if (v73
                              || v86
                              && (LODWORD(__s[0]) = bswap32(v46[5].u32[0]), uint64_t v73 = FigAtomWriterAppendData(), v73)
                              || v87
                              && (LODWORD(__s[0]) = bswap32(v46[5].u32[1]), uint64_t v73 = FigAtomWriterAppendData(), v73)
                              || v88
                              && (LODWORD(__s[0]) = bswap32(v46[6].u32[0]), uint64_t v73 = FigAtomWriterAppendData(), v73))
                            {
LABEL_361:
                              uint64_t appended = v73;
LABEL_362:
                              FigAtomWriterEndAtom();
                              goto LABEL_409;
                            }
                            if (v89)
                            {
                              WORD2(v188) = 0;
                              LODWORD(v188) = 0;
                              LODWORD(__s[1]) = 0;
                              __s[0] = 0;
                              unsigned int v96 = bswap32(v46[6].u32[1]);
                              if (v90)
                              {
                                LODWORD(__s[0]) = v96;
                                *(int8x8_t *)((char *)__s + 4) = vrev32_s8(v46[7]);
                              }
                              else
                              {
                                LOWORD(v188) = HIWORD(v96);
                                WORD1(v188) = bswap32(v46[7].u16[0]) >> 16;
                                WORD2(v188) = bswap32(v46[7].u16[2]) >> 16;
                              }
                              uint64_t appended = FigAtomWriterAppendData();
                              char v97 = v184;
                              if (appended) {
                                char v97 = 0;
                              }
                              if ((v97 & 1) == 0) {
                                goto LABEL_296;
                              }
                            }
                            else if ((v184 & 1) == 0)
                            {
LABEL_205:
                              FigAtomWriterEndAtom();
                              goto LABEL_298;
                            }
                            LODWORD(__s[0]) = bswap32(v46[8].u32[1]);
LABEL_294:
                            uint64_t v51 = FigAtomWriterAppendData();
LABEL_295:
                            uint64_t appended = v51;
LABEL_296:
                            FigAtomWriterEndAtom();
LABEL_297:
                            if (appended) {
                              goto LABEL_409;
                            }
LABEL_298:
                            if ((const __CFArray *)++v45 == v44) {
                              break;
                            }
                            continue;
                          }
                        }
                        int v95 = 32;
                        char v184 = 1;
                        goto LABEL_277;
                      case 18:
                        uint64_t v60 = v193;
                        memset(v197, 0, 24);
                        memset(v196, 0, sizeof(v196));
                        uint64_t v61 = FigAtomWriterInitWithParent();
                        if (v61)
                        {
                          uint64_t appended = v61;
                          goto LABEL_296;
                        }
                        unsigned int v62 = *(unsigned __int8 *)(v60 + 61);
                        if (v62 >= 0x20) {
                          goto LABEL_185;
                        }
                        unsigned int v63 = (*(unsigned char *)(v60 + 60) != 0) | (v62 << 8);
                        if (*(unsigned char *)(v60 + 60))
                        {
                          unsigned int v64 = *(unsigned __int8 *)(v60 + 62);
                          if (v64 >= 0x20)
                          {
LABEL_185:
                            uint64_t appended = FigSignalErrorAt();
                            goto LABEL_297;
                          }
                          v63 |= v64 << 16;
                        }
                        LODWORD(__s[0]) = bswap32(v63);
                        int32x4_t v98 = (int32x4_t)vrev32q_s8(*(int8x16_t *)(v60 + 40));
                        *(int32x4_t *)((char *)__s + 4) = vuzp1q_s32(v98, (int32x4_t)vextq_s8((int8x16_t)v98, (int8x16_t)v98, 0xCuLL));
                        HIDWORD(__s[2]) = bswap32(*(_DWORD *)(v60 + 56));
                        if (*(unsigned char *)(v60 + 63))
                        {
                          uint64_t v51 = FigAtomWriterBeginAtom();
                          if (v51) {
                            goto LABEL_295;
                          }
                        }
                        else
                        {
                          long long v188 = 0uLL;
                          CFUUIDBytesForItemPropertyint Type = IFFInformationGetCFUUIDBytesForItemPropertyType(*(_DWORD *)(v60 + 8), &v188);
                          if (CFUUIDBytesForItemPropertyType
                            || (CFUUIDBytesForItemPropertyint Type = FigAtomWriterBeginUUIDAtom(),
                                CFUUIDBytesForItemPropertyType))
                          {
                            uint64_t appended = CFUUIDBytesForItemPropertyType;
                            goto LABEL_296;
                          }
                        }
                        goto LABEL_294;
                      case 19:
                        long long v48 = (void *)v193;
                        int IsDisplayModeSwitchInProgress = FPSupport_IsDisplayModeSwitchInProgress();
                        memset(v197, 0, 24);
                        memset(v196, 0, sizeof(v196));
                        unsigned int v50 = bswap32(*((_DWORD *)v48 + 10));
                        LODWORD(v188) = v50;
                        if (!IsDisplayModeSwitchInProgress)
                        {
                          uint64_t v51 = _appendUUIDItemPropertyHelper((uint64_t)v48, (uint64_t)&v205, (uint64_t)&v188);
                          goto LABEL_295;
                        }
                        LODWORD(__s[0]) = 0;
                        HIDWORD(__s[0]) = v50;
                        uint64_t v51 = FigAtomWriterInitWithParent();
                        if (v51) {
                          goto LABEL_295;
                        }
                        uint64_t v51 = FigAtomWriterBeginAtom();
                        if (v51) {
                          goto LABEL_295;
                        }
                        goto LABEL_294;
                      case 20:
                        uint64_t v65 = v193;
                        memset(v197, 0, 24);
                        memset(v196, 0, sizeof(v196));
                        ItemPropertyCodecConfiguratiouint64_t n = FigAtomWriterInitWithParent();
                        if (ItemPropertyCodecConfiguration) {
                          goto LABEL_366;
                        }
                        __s[0] = 0;
                        __s[1] = 0;
                        ItemPropertyCodecConfiguratiouint64_t n = IFFInformationGetCFUUIDBytesForItemPropertyType(*(_DWORD *)(v65 + 8), __s);
                        if (ItemPropertyCodecConfiguration) {
                          goto LABEL_366;
                        }
                        ItemPropertyCodecConfiguratiouint64_t n = FigAtomWriterBeginUUIDAtom();
                        if (ItemPropertyCodecConfiguration) {
                          goto LABEL_366;
                        }
                        LODWORD(v188) = 0;
                        ItemPropertyCodecConfiguratiouint64_t n = FigAtomWriterAppendData();
                        if (ItemPropertyCodecConfiguration) {
                          goto LABEL_366;
                        }
                        LOBYTE(v199) = *(unsigned char *)(v65 + 40) - 1;
                        ItemPropertyCodecConfiguratiouint64_t n = FigAtomWriterAppendData();
                        if (ItemPropertyCodecConfiguration) {
                          goto LABEL_366;
                        }
                        uint64_t v66 = 0;
                        unint64_t v67 = -1;
                        while (1)
                        {
                          LOWORD(v200) = 0;
                          uint64_t v68 = *(void *)(v65 + 48) + v66;
                          LOBYTE(v200) = *(unsigned char *)v68;
                          char v69 = *(unsigned char *)(v68 + 1);
                          BYTE1(v200) = v69;
                          if (*(void *)(v68 + 8))
                          {
                            CFIndex Length = CFStringGetLength(*(CFStringRef *)(v68 + 8));
                            BOOL v71 = Length > 0;
                            char v72 = Length <= 0 ? 0 : 0x80;
                            char v69 = BYTE1(v200);
                          }
                          else
                          {
                            BOOL v71 = 0;
                            char v72 = 0;
                          }
                          BYTE1(v200) = v72 | v69;
                          uint64_t v73 = FigAtomWriterAppendData();
                          if (v73) {
                            goto LABEL_361;
                          }
                          if (v71)
                          {
                            __s[0] = 0;
                            uint64_t CStringPtrAndBufferToFree = (const char *)FigCFStringGetCStringPtrAndBufferToFree();
                            strlen(CStringPtrAndBufferToFree);
                            uint64_t appended = FigAtomWriterAppendData();
                            free(__s[0]);
                            if (appended) {
                              goto LABEL_362;
                            }
                          }
                          ++v67;
                          v66 += 16;
                          if (v67 >= v199) {
                            goto LABEL_205;
                          }
                        }
                      case 21:
                        memset(v197, 0, 24);
                        memset(v196, 0, sizeof(v196));
                        LOWORD(__s[0]) = bswap32(*(unsigned __int16 *)(v193 + 40)) >> 16;
                        ItemPropertyCodecConfiguratiouint64_t n = FigAtomWriterInitWithParent();
                        if (!ItemPropertyCodecConfiguration)
                        {
                          ItemPropertyCodecConfiguratiouint64_t n = FigAtomWriterBeginAtom();
                          if (!ItemPropertyCodecConfiguration) {
                            goto LABEL_294;
                          }
                        }
                        goto LABEL_366;
                      case 23:
                        uint64_t v52 = 0;
                        memset(v197, 0, 24);
                        memset(v196, 0, sizeof(v196));
                        *(_DWORD *)((char *)&__s[1] + 1) = 0;
                        *(char **)((char *)__s + 1) = 0;
                        *(_WORD *)((char *)&v188 + 5) = 0;
                        *(_DWORD *)((char *)&v188 + 1) = 0;
                        char v53 = 1;
                        LOBYTE(__s[0]) = 1;
                        long long v54 = (void *)(v193 + 40);
                        LOBYTE(v188) = 0;
                        do
                        {
                          unsigned int v55 = *((_DWORD *)v54 + v52);
                          unsigned int v56 = bswap32(v55);
                          *(_DWORD *)((char *)__s + 4 * v52 + 1) = v56;
                          *(_WORD *)((char *)&v188 + 2 * v52 + 1) = HIWORD(v56);
                          v53 &= v55 < 0x10000;
                          ++v52;
                        }
                        while (v52 != 3);
                        ItemPropertyCodecConfiguratiouint64_t n = FigAtomWriterInitWithParent();
                        if (!ItemPropertyCodecConfiguration)
                        {
                          ItemPropertyCodecConfiguratiouint64_t n = FigAtomWriterBeginAtom();
                          if (!ItemPropertyCodecConfiguration) {
                            goto LABEL_294;
                          }
                        }
                        goto LABEL_366;
                      default:
                        uint64_t appended = FigSignalErrorAt();
                        FigAtomWriterEndAtom();
                        if (appended) {
                          goto LABEL_500;
                        }
                        goto LABEL_314;
                    }
                    break;
                  }
                }
                FigAtomWriterEndAtom();
LABEL_314:
                memset(v197, 0, 24);
                memset(v196, 0, sizeof(v196));
                __s[0] = 0;
                uint64_t v100 = *(void *)(a1 + 8);
                CFArrayRef v101 = IFFInformationGetItemCount(v100);
                if ((uint64_t)v101 < 1)
                {
                  long long v108 = 0;
                  long long v109 = 0;
                  uint64_t appended = 0;
                }
                else
                {
                  CFArrayRef v102 = v101;
                  char v103 = 0;
                  uint64_t v104 = 0;
                  for (CFIndex i = 0; (const __CFArray *)i != v102; ++i)
                  {
                    *(void *)&long long v205 = 0;
                    LOBYTE(v200) = 0;
                    LODWORD(v188) = 0;
                    uint64_t v106 = IFFInformationGetItemAtIndex(v100, i, &v205, &v188, &v200);
                    if (v106) {
                      goto LABEL_328;
                    }
                    if ((_BYTE)v200 || *(unsigned char *)(v205 + 17))
                    {
                      if (WORD1(v188)) {
                        char v103 = 1;
                      }
                      if (IFFInformationGetItemPropertyCount(v205) > 0) {
                        ++v104;
                      }
                    }
                  }
                  if (v104 < 1)
                  {
                    long long v108 = 0;
                    long long v109 = 0;
                    uint64_t appended = 0;
                    goto LABEL_375;
                  }
                  uint64_t v107 = (uint64_t)IFFInformationGetSharedItemPropertyCount(v100);
                  uint64_t v106 = FigAtomWriterInitWithParent();
                  if (!v106)
                  {
                    uint64_t v106 = FigAtomWriterBeginAtom();
                    if (!v106)
                    {
                      __s[0] = (char *)_byteswap_uint64(__PAIR64__((v107 > 128) | ((v103 != 0) << 24), v104));
                      uint64_t v106 = FigAtomWriterAppendData();
                      if (!v106)
                      {
                        long long v109 = 0;
                        long long v108 = 0;
                        CFIndex v110 = 0;
                        char v182 = v107 > 128;
                        uint64_t v111 = 0x10000;
                        if (v107 > 128) {
                          uint64_t v111 = 256;
                        }
                        CFIndex v183 = v111;
                        while (1)
                        {
                          *(void *)&long long v188 = 0;
                          LOBYTE(v193) = 0;
                          LODWORD(v198) = 0;
                          uint64_t ItemPropertyByIndex = IFFInformationGetItemAtIndex(v100, v110, &v188, &v198, &v193);
                          if (ItemPropertyByIndex) {
                            goto LABEL_374;
                          }
                          if ((_BYTE)v193 || *(unsigned char *)(v188 + 17))
                          {
                            ItemPropertyCFIndex Count = IFFInformationGetItemPropertyCount(v188);
                            if (ItemPropertyCount)
                            {
                              uint64_t v114 = ItemPropertyCount;
                              if (ItemPropertyCount >= v183) {
                                goto LABEL_373;
                              }
                              if (v103)
                              {
                                LODWORD(v200) = bswap32(v198);
                                BYTE4(v200) = ItemPropertyCount;
                              }
                              else
                              {
                                LOWORD(v200) = bswap32((unsigned __int16)v198) >> 16;
                                BYTE2(v200) = ItemPropertyCount;
                              }
                              uint64_t ItemPropertyByIndex = FigAtomWriterAppendData();
                              if (ItemPropertyByIndex) {
                                goto LABEL_374;
                              }
                              if (v107 <= 128)
                              {
                                if (v114 >= 17)
                                {
                                  long long v109 = (long long *)malloc_type_malloc(v114 << v182, 0xB0834502uLL);
                                  if (v109) {
                                    goto LABEL_352;
                                  }
LABEL_373:
                                  uint64_t ItemPropertyByIndex = FigSignalErrorAt();
LABEL_374:
                                  uint64_t appended = ItemPropertyByIndex;
                                  goto LABEL_375;
                                }
                                long long v109 = &v205;
                              }
                              else
                              {
                                if (v114 >= 9)
                                {
                                  long long v108 = (long long *)malloc_type_malloc(v114 << v182, 0x6668EE7AuLL);
                                  if (!v108) {
                                    goto LABEL_373;
                                  }
LABEL_352:
                                  CFIndex v115 = 0;
                                  while (1)
                                  {
                                    CFTypeRef v199 = 0;
                                    uint64_t v200 = 0;
                                    LOBYTE(v192) = 0;
                                    uint64_t ItemPropertyByIndex = IFFInformationGetItemPropertyByIndex(v188, v115, &v200, &v192, &v199);
                                    if (ItemPropertyByIndex) {
                                      goto LABEL_374;
                                    }
                                    __int16 v116 = (_WORD)v199 + 1;
                                    if (v107 <= 128) {
                                      *((unsigned char *)v109 + v115) = v116 & 0x7F | ((v192 != 0) << 7);
                                    }
                                    else {
                                      *((_WORD *)v108 + v115) = __rev16(v116 & 0x7FFF | ((v192 != 0) << 15));
                                    }
                                    if (v114 == ++v115) {
                                      goto LABEL_358;
                                    }
                                  }
                                }
                                long long v108 = &v205;
                              }
                              if (v114 >= 1) {
                                goto LABEL_352;
                              }
LABEL_358:
                              uint64_t ItemPropertyByIndex = FigAtomWriterAppendData();
                              if (ItemPropertyByIndex) {
                                goto LABEL_374;
                              }
                            }
                          }
                          if ((const __CFArray *)++v110 == v102)
                          {
                            uint64_t appended = 0;
                            goto LABEL_375;
                          }
                        }
                      }
                    }
                  }
LABEL_328:
                  uint64_t appended = v106;
                  long long v108 = 0;
                  long long v109 = 0;
                }
LABEL_375:
                FigAtomWriterEndAtom();
                if (v109 != &v205 && v109) {
                  free(v109);
                }
                if (v108 != &v205 && v108) {
                  free(v108);
                }
                FigAtomWriterEndAtom();
                if (appended) {
                  goto LABEL_501;
                }
                uint64_t v208 = 0;
                long long v206 = 0u;
                long long v207 = 0u;
                long long v205 = 0u;
                uint64_t v117 = *(void *)(a1 + 8);
                __s[0] = 0;
                uint64_t GroupsList = IFFInformationGetGroupsList(v117, __s);
                if (GroupsList) {
                  goto LABEL_544;
                }
                if (__s[0])
                {
                  CFIndex Count = CFArrayGetCount((CFArrayRef)__s[0]);
                  if (Count >= 1)
                  {
                    CFIndex v120 = Count;
                    uint64_t GroupsList = FigAtomWriterInitWithParent();
                    if (!GroupsList)
                    {
                      uint64_t GroupsList = FigAtomWriterBeginAtom();
                      if (!GroupsList)
                      {
                        CFIndex v121 = 0;
                        while (1)
                        {
                          CFStringRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)__s[0], v121);
                          memset(v197, 0, 24);
                          memset(v196, 0, sizeof(v196));
                          v201.i32[2] = 0;
                          v201.i64[0] = 0;
                          CFArrayRef v123 = (const __CFArray *)*((void *)ValueAtIndex + 6);
                          if (!v123 || (unsigned int v124 = CFArrayGetCount(v123), (v125 = v124) == 0))
                          {
LABEL_403:
                            FigAtomWriterEndAtom();
                            goto LABEL_404;
                          }
                          unsigned int v126 = v124;
                          if (*((_DWORD *)ValueAtIndex + 6) != 1937007986) {
                            goto LABEL_396;
                          }
                          if ((v124 & 0xFFFFFFFE) == 2) {
                            break;
                          }
LABEL_406:
                          uint64_t appended = FigSignalErrorAt();
                          FigAtomWriterEndAtom();
                          if (appended) {
                            goto LABEL_500;
                          }
LABEL_404:
                          if (++v121 == v120) {
                            goto LABEL_410;
                          }
                        }
                        if (v124 == 3)
                        {
                          int v127 = *((_DWORD *)ValueAtIndex + 8);
                          uint64_t v128 = FigAtomWriterInitWithParent();
                          if (v128) {
                            goto LABEL_546;
                          }
                          uint64_t v128 = FigAtomWriterBeginUUIDAtom();
                          if (v128) {
                            goto LABEL_546;
                          }
LABEL_399:
                          v201.i64[0] = __PAIR64__(bswap32(*((_DWORD *)ValueAtIndex + 4)), bswap32(v127 & 0xFFFFFF));
                          v201.i32[2] = bswap32(v126);
                          uint64_t v128 = FigAtomWriterAppendData();
                          if (v128) {
                            goto LABEL_546;
                          }
                          CFIndex v130 = 0;
                          while (1)
                          {
                            LODWORD(v188) = bswap32(*((_DWORD *)CFArrayGetValueAtIndex(*((CFArrayRef *)ValueAtIndex + 6), v130)+ 10));
                            uint64_t v129 = FigAtomWriterAppendData();
                            if (v129) {
                              goto LABEL_408;
                            }
                            if (v125 == ++v130) {
                              goto LABEL_403;
                            }
                          }
                        }
LABEL_396:
                        if (!((unint64_t)v124 >> 31))
                        {
                          uint64_t v129 = FigAtomWriterInitWithParent();
                          if (!v129)
                          {
                            uint64_t v128 = FigAtomWriterBeginAtom();
                            int v127 = 0;
                            if (!v128) {
                              goto LABEL_399;
                            }
LABEL_546:
                            uint64_t appended = v128;
LABEL_409:
                            FigAtomWriterEndAtom();
LABEL_500:
                            FigAtomWriterEndAtom();
                            goto LABEL_501;
                          }
LABEL_408:
                          uint64_t appended = v129;
                          goto LABEL_409;
                        }
                        goto LABEL_406;
                      }
                    }
LABEL_544:
                    uint64_t appended = GroupsList;
                    goto LABEL_500;
                  }
                }
LABEL_410:
                FigAtomWriterEndAtom();
                uint64_t v208 = 0;
                long long v206 = 0u;
                long long v207 = 0u;
                long long v205 = 0u;
                uint64_t v131 = *(void *)(a1 + 8);
                if (!IFFInformationUsesItemExtentConstructionMethod(v131)) {
                  goto LABEL_482;
                }
                uint64_t GroupsList = FigAtomWriterInitWithParent();
                if (GroupsList) {
                  goto LABEL_544;
                }
                uint64_t GroupsList = FigAtomWriterBeginAtom();
                if (GroupsList) {
                  goto LABEL_544;
                }
                CFArrayRef v132 = IFFInformationGetItemCount(v131);
                if ((uint64_t)v132 < 1)
                {
LABEL_482:
                  FigAtomWriterEndAtom();
                  goto LABEL_483;
                }
                CFArrayRef v133 = v132;
                CFIndex v134 = 0;
                while (1)
                {
                  uint64_t v191 = 0;
                  int v192 = 0;
                  char v190 = 0;
                  uint64_t v189 = 0;
                  uint64_t ItemExtents = IFFInformationGetItemAtIndex(v131, v134, &v192, 0, &v190);
                  if (ItemExtents)
                  {
LABEL_499:
                    uint64_t appended = ItemExtents;
                    goto LABEL_500;
                  }
                  if (v190)
                  {
                    uint64_t ItemExtents = IFFInformationGetItemExtents((uint64_t)v192, (_DWORD *)&v191 + 1, &v189, 0, 0, 0);
                    if (ItemExtents) {
                      goto LABEL_499;
                    }
                    if (v189)
                    {
LABEL_540:
                      uint64_t appended = FigSignalErrorAt();
                      FigAtomWriterEndAtom();
                      if (appended) {
                        goto LABEL_501;
                      }
LABEL_483:
                      memset(v197, 0, 24);
                      memset(v196, 0, sizeof(v196));
                      uint64_t v161 = *(void *)(a1 + 8);
                      CFArrayRef v162 = IFFInformationGetItemCount(v161);
                      if ((uint64_t)v162 < 1)
                      {
                        CFStringRef v171 = 0;
                        uint64_t appended = 0;
                      }
                      else
                      {
                        CFArrayRef v163 = v162;
                        BOOL v164 = 0;
                        unsigned int v165 = 0;
                        for (CFIndex j = 0; (const __CFArray *)j != v163; ++j)
                        {
                          *(void *)&long long v205 = 0;
                          LODWORD(v188) = 0;
                          LOBYTE(v200) = 0;
                          v201.i64[0] = 0;
                          __s[0] = 0;
                          uint64_t v167 = IFFInformationGetItemAtIndex(v161, j, &v205, &v188, &v200);
                          if (v167) {
                            goto LABEL_504;
                          }
                          if ((_BYTE)v200)
                          {
                            uint64_t v167 = IFFInformationGetItemExtents(v205, 0, &v201, 0, __s, 0);
                            if (v167) {
                              goto LABEL_504;
                            }
                            if (v201.i64[0])
                            {
                              uint64_t v167 = FigSignalErrorAt();
                              goto LABEL_504;
                            }
                            if ((uint64_t)__s[0] >= 1)
                            {
                              ++v165;
                              BOOL v164 = (v164 | WORD1(v188)) != 0;
                            }
                          }
                        }
                        if (v165)
                        {
                          uint64_t v167 = FigAtomWriterInitWithParent();
                          if (v167) {
                            goto LABEL_504;
                          }
                          uint64_t v167 = FigAtomWriterBeginAtom();
                          if (v167) {
                            goto LABEL_504;
                          }
                          int v168 = IFFInformationUsesItemExtentConstructionMethod(v161);
                          if (v164 || HIWORD(v165))
                          {
                            int v169 = 2;
                            LODWORD(v205) = 2;
                            WORD2(v205) = 68;
                            *(_DWORD *)((char *)&v205 + 6) = bswap32(v165);
                            uint64_t v167 = FigAtomWriterAppendData();
                            if (!v167) {
                              goto LABEL_505;
                            }
                          }
                          else
                          {
                            int v169 = v168 != 0;
                            LODWORD(v205) = v169;
                            WORD2(v205) = 68;
                            WORD3(v205) = bswap32(v165) >> 16;
                            uint64_t v167 = FigAtomWriterAppendData();
                            if (!v167)
                            {
LABEL_505:
                              CFIndex v172 = 0;
                              while (1)
                              {
                                __s[0] = 0;
                                LOBYTE(v193) = 0;
                                *(void *)&long long v188 = 0;
                                LODWORD(v199) = 0;
                                LODWORD(v198) = 0;
                                uint64_t v200 = 0;
                                uint64_t v167 = IFFInformationGetItemAtIndex(v161, v172, __s, &v198, &v193);
                                if (v167) {
                                  break;
                                }
                                if ((_BYTE)v193)
                                {
                                  uint64_t v167 = IFFInformationGetItemExtents((uint64_t)__s[0], &v199, 0, 0, &v188, &v200);
                                  if (v167) {
                                    break;
                                  }
                                  if ((void)v188)
                                  {
                                    if (v169 == 2)
                                    {
                                      v201.i32[0] = bswap32(v198);
                                      v201.i32[1] = (v199 & 0xF) << 8;
                                      v201.i16[4] = bswap32(v188) >> 16;
                                    }
                                    else if (v169 == 1)
                                    {
                                      v201.i16[0] = bswap32((unsigned __int16)v198) >> 16;
                                      *(__int32 *)((char *)v201.i32 + 2) = (v199 & 0xF) << 8;
                                      v201.i16[3] = bswap32(v188) >> 16;
                                    }
                                    else
                                    {
                                      v201.i32[0] = bswap32((unsigned __int16)v198) >> 16;
                                      v201.i16[2] = bswap32(v188) >> 16;
                                    }
                                    uint64_t v167 = FigAtomWriterAppendData();
                                    if (v167) {
                                      break;
                                    }
                                    uint64_t v173 = v188;
                                    if ((uint64_t)v188 >= 5)
                                    {
                                      CFStringRef v171 = (long long *)malloc_type_malloc(8 * v188, 0xB1E45E65uLL);
                                      if (!v171) {
                                        goto LABEL_543;
                                      }
                                      uint64_t v174 = v188;
                                    }
                                    else
                                    {
                                      CFStringRef v171 = &v205;
                                      uint64_t v174 = v188;
                                    }
                                    if (v174 >= 1)
                                    {
                                      uint64_t v175 = (_DWORD *)v171 + 1;
                                      uint64_t v176 = (const char *)(v200 + 8);
                                      while (1)
                                      {
                                        uint64_t v177 = v199 ? 0 : *(void *)(a1 + 16);
                                        unint64_t v178 = *((void *)v176 - 1) + v177;
                                        uint64_t v179 = *(void *)v176;
                                        if (HIDWORD(v178) || HIDWORD(*(void *)v176) != 0) {
                                          break;
                                        }
                                        *(v175 - 1) = bswap32(v178);
                                        *uint64_t v175 = bswap32(v179);
                                        v175 += 2;
                                        v176 += 16;
                                        if (!--v174) {
                                          goto LABEL_531;
                                        }
                                      }
LABEL_543:
                                      uint64_t appended = FigSignalErrorAt();
                                      goto LABEL_537;
                                    }
LABEL_531:
                                    uint64_t v181 = FigAtomWriterAppendData();
                                    uint64_t appended = v181;
                                    if (v173 < 5 || v181)
                                    {
                                      if (v181) {
                                        goto LABEL_537;
                                      }
                                    }
                                    else
                                    {
                                      free(v171);
                                    }
                                  }
                                }
                                if ((const __CFArray *)++v172 == v163) {
                                  goto LABEL_536;
                                }
                              }
                            }
                          }
LABEL_504:
                          uint64_t appended = v167;
                          CFStringRef v171 = 0;
                          goto LABEL_537;
                        }
LABEL_536:
                        CFStringRef v171 = 0;
                        uint64_t appended = 0;
                      }
LABEL_537:
                      FigAtomWriterEndAtom();
                      if (v171 != &v205 && v171) {
                        free(v171);
                      }
                      goto LABEL_501;
                    }
                    if (HIDWORD(v191) == 1)
                    {
                      uint64_t ItemExtents = IFFInformationGetItemType((uint64_t)v192, &v191);
                      if (ItemExtents) {
                        goto LABEL_499;
                      }
                      switch(v191)
                      {
                        case 0x746D6170:
                          double v148 = v192;
                          LODWORD(v193) = 0;
                          *(void *)&long long v188 = 0;
                          CFTypeRef v199 = 0;
                          uint64_t v200 = 0;
                          uint64_t v198 = 0;
                          uint64_t ItemExtents = IFFInformationGetItemExtents((uint64_t)v192, &v193, &v188, 0, &v200, &v199);
                          if (ItemExtents) {
                            goto LABEL_499;
                          }
                          if (v200 < 1 || (void)v188) {
                            goto LABEL_478;
                          }
                          uint64_t ItemExtents = FigAtomWriterGetAtomDataSize();
                          if (ItemExtents) {
                            goto LABEL_499;
                          }
                          memset(v197, 0, sizeof(v197));
                          memset(v196, 0, sizeof(v196));
                          uint64_t ItemExtents = IFFInformationGetItemBodyImageDerivationTonemap(v148, v196);
                          if (ItemExtents) {
                            goto LABEL_499;
                          }
                          int v149 = v196[0].u8[4];
                          LODWORD(__s[0]) = 0;
                          BYTE4(__s[0]) = 0;
                          BYTE5(__s[0]) = ((v196[0].i8[4] != 0) << 7) | ((v196[0].i8[5] != 0) << 6);
                          *(int8x16_t *)((char *)__s + 6) = vrev32q_s8(*(int8x16_t *)((char *)v196 + 8));
                          uint64_t ItemExtents = FigAtomWriterAppendData();
                          if (ItemExtents) {
                            goto LABEL_499;
                          }
                          uint64_t v150 = 0;
                          unint64_t v151 = 0;
                          do
                          {
                            int8x16_t v152 = vrev32q_s8(*(int8x16_t *)((char *)v197 + v150 + 8));
                            int8x16_t v201 = vrev32q_s8(*(int8x16_t *)((char *)&v196[1] + v150 + 8));
                            int8x16_t v202 = v152;
                            *(int8x8_t *)&long long v203 = vrev32_s8(*(int8x8_t *)((char *)&v197[1] + v150 + 8));
                            uint64_t ItemExtents = FigAtomWriterAppendData();
                            if (ItemExtents) {
                              goto LABEL_499;
                            }
                            v150 += 40;
                            if (!v149) {
                              break;
                            }
                          }
                          while (v151++ < 2);
                          double v154 = v199;
                          *(void *)CFTypeRef v199 = v198;
                          *((void *)v154 + 1) = v150 + 22;
                          break;
                        case 0x696F766C:
                          uint64_t v138 = (uint64_t)v192;
                          uint64_t v195 = 0;
                          v196[0].i64[0] = 0;
                          int v194 = 0;
                          __s[0] = 0;
                          *(void *)&long long v188 = 0;
                          uint64_t v200 = 0;
                          v201.i64[0] = 0;
                          uint64_t v198 = 0;
                          CFTypeRef v199 = 0;
                          uint64_t AtomDataSize = IFFInformationGetItemExtents((uint64_t)v192, &v194, __s, 0, &v188, &v200);
                          if (AtomDataSize) {
                            goto LABEL_542;
                          }
                          if ((uint64_t)v188 >= 1 && !__s[0])
                          {
                            uint64_t AtomDataSize = FigAtomWriterGetAtomDataSize();
                            if (AtomDataSize
                              || (uint64_t AtomDataSize = IFFInformationGetItemBodyImageDerivationOverlay(v138, v196, (_DWORD *)&v195 + 1, &v195, &v201), AtomDataSize))
                            {
LABEL_542:
                              uint64_t appended = AtomDataSize;
                              free(v198);
                              goto LABEL_500;
                            }
                            if (v196[0].i64[0] && v201.i64[0])
                            {
                              uint64_t v193 = 0;
                              uint64_t AtomDataSize = IFFInformationGetItemReferencesOfType(v138, 1684630887, &v193, 0, 0);
                              if (AtomDataSize) {
                                goto LABEL_542;
                              }
                              if (HIWORD(v195) || WORD1(v195))
                              {
                                size_t v140 = 8 * v193 + 18;
                                CFTypeRef v155 = malloc_type_calloc(1uLL, v140, 0xECC7D923uLL);
                                uint64_t v198 = (char *)v155;
                                if (v155)
                                {
                                  uint64_t v156 = 0;
                                  *CFTypeRef v155 = 256;
                                  uint64_t v157 = v196[0].i64[0];
                                  do
                                  {
                                    v155[v156 + 1] = bswap32(*(unsigned __int16 *)(v157 + v156 * 2)) >> 16;
                                    ++v156;
                                  }
                                  while (v156 != 4);
                                  *(_DWORD *)(v155 + 5) = bswap32(HIDWORD(v195));
                                  *(_DWORD *)(v155 + 7) = bswap32(v195);
                                  if (v193 > 0)
                                  {
                                    uint64_t v158 = 0;
                                    do
                                    {
                                      *(_DWORD *)&v155[2 * v158 + 9] = bswap32(*(_DWORD *)(v201.i64[0] + 4 * v158));
                                      ++v158;
                                    }
                                    while (v158 < 2 * v193);
                                  }
                                  goto LABEL_472;
                                }
                              }
                              else
                              {
                                size_t v140 = 4 * v193 + 14;
                                uint64_t v141 = malloc_type_calloc(1uLL, v140, 0x1CAF970DuLL);
                                uint64_t v198 = (char *)v141;
                                if (v141)
                                {
                                  uint64_t v142 = 0;
                                  _WORD *v141 = 0;
                                  uint64_t v143 = v196[0].i64[0];
                                  do
                                  {
                                    v141[v142 + 1] = bswap32(*(unsigned __int16 *)(v143 + v142 * 2)) >> 16;
                                    ++v142;
                                  }
                                  while (v142 != 4);
                                  v141[5] = bswap32(WORD2(v195)) >> 16;
                                  v141[6] = bswap32((unsigned __int16)v195) >> 16;
                                  if (v193 > 0)
                                  {
                                    uint64_t v144 = v141 + 7;
                                    uint64_t v145 = 2 * v193;
                                    uint64_t v146 = (unsigned __int16 *)v201.i64[0];
                                    if (2 * v193 <= 1) {
                                      uint64_t v145 = 1;
                                    }
                                    do
                                    {
                                      unsigned int v147 = *v146;
                                      v146 += 2;
                                      *v144++ = bswap32(v147) >> 16;
                                      --v145;
                                    }
                                    while (v145);
                                  }
LABEL_472:
                                  uint64_t AtomDataSize = FigAtomWriterAppendData();
                                  if (AtomDataSize) {
                                    goto LABEL_542;
                                  }
                                  uint64_t v159 = v200;
                                  *(void *)uint64_t v200 = v199;
                                  *(void *)(v159 + 8) = v140;
                                  free(v198);
                                  break;
                                }
                              }
                            }
                          }
                          uint64_t appended = FigSignalErrorAt();
                          free(v198);
                          if (appended) {
                            goto LABEL_500;
                          }
                          break;
                        case 0x67726964:
                          uint64_t v136 = (uint64_t)v192;
                          WORD2(v195) = 0;
                          LOWORD(v195) = 0;
                          LODWORD(v199) = 0;
                          LODWORD(v198) = 0;
                          LODWORD(v193) = 0;
                          __s[0] = 0;
                          *(void *)&long long v188 = 0;
                          uint64_t v200 = 0;
                          v201.i64[0] = 0;
                          uint64_t ItemExtents = IFFInformationGetItemExtents((uint64_t)v192, &v193, &v201, 0, __s, &v188);
                          if (ItemExtents) {
                            goto LABEL_499;
                          }
                          if ((uint64_t)__s[0] >= 1 && !v201.i64[0])
                          {
                            uint64_t ItemExtents = FigAtomWriterGetAtomDataSize();
                            if (ItemExtents) {
                              goto LABEL_499;
                            }
                            uint64_t ItemExtents = IFFInformationGetItemBodyImageDerivationGrid(v136, &v195, (_WORD *)&v195 + 2, &v199, &v198);
                            if (ItemExtents) {
                              goto LABEL_499;
                            }
                            if (WORD2(v195)
                              && WORD2(v195) <= 0x100u
                              && ((unsigned __int16)(v195 - 257) >> 8) == 255)
                            {
                              if (v199 >> 16 || v198 >> 16)
                              {
                                v196[0].i16[0] = 256;
                                v196[0].i8[2] = BYTE4(v195) - 1;
                                v196[0].i8[3] = v195 - 1;
                                *(uint64_t *)((char *)v196[0].i64 + 4) = _byteswap_uint64(__PAIR64__(v199, v198));
                                uint64_t ItemExtents = FigAtomWriterAppendData();
                                uint64_t v137 = 12;
                                if (ItemExtents) {
                                  goto LABEL_499;
                                }
                              }
                              else
                              {
                                v196[0].i16[0] = 0;
                                v196[0].i8[2] = BYTE4(v195) - 1;
                                v196[0].i8[3] = v195 - 1;
                                v196[0].i16[2] = bswap32(v199) >> 16;
                                v196[0].i16[3] = bswap32(v198) >> 16;
                                uint64_t ItemExtents = FigAtomWriterAppendData();
                                uint64_t v137 = 8;
                                if (ItemExtents) {
                                  goto LABEL_499;
                                }
                              }
                              uint64_t v160 = v188;
                              *(void *)long long v188 = v200;
                              *(void *)(v160 + 8) = v137;
                              break;
                            }
                          }
LABEL_478:
                          uint64_t ItemExtents = FigSignalErrorAt();
                          if (ItemExtents) {
                            goto LABEL_499;
                          }
                          break;
                        default:
                          goto LABEL_540;
                      }
                    }
                  }
                  if ((const __CFArray *)++v134 == v133) {
                    goto LABEL_482;
                  }
                }
              }
            }
          }
        }
      }
    }
    uint64_t appended = ItemHandler;
    goto LABEL_500;
  }
LABEL_501:
  FigAtomWriterEndAtom();
  return appended;
}

uint64_t appendItemPropertyColorInformationAtom(uint64_t a1, unsigned int a2)
{
  uint64_t v13 = 0;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v10 = 0u;
  unsigned int v9 = 0;
  uint64_t appended = FigAtomWriterInitWithParent();
  if (appended) {
    goto LABEL_11;
  }
  uint64_t appended = FigAtomWriterBeginAtom();
  if (appended) {
    goto LABEL_11;
  }
  unsigned int v9 = bswap32(a2);
  uint64_t appended = FigAtomWriterAppendData();
  if (appended) {
    goto LABEL_11;
  }
  if (a2 == 1852009592)
  {
    *(_DWORD *)((char *)&v8 + 3) = 0;
    LODWORD(v8) = 0;
    uint64_t appended = IFFInformationGetItemPropertyIndexedColor(a1, &v8, (_WORD *)&v8 + 1, (_WORD *)&v8 + 2, (unsigned char *)&v8 + 6);
    if (!appended)
    {
      LOWORD(v8) = bswap32((unsigned __int16)v8) >> 16;
      WORD1(v8) = bswap32(WORD1(v8)) >> 16;
      WORD2(v8) = bswap32(WORD2(v8)) >> 16;
LABEL_10:
      uint64_t appended = FigAtomWriterAppendData();
    }
  }
  else
  {
    if (a2 != 1886547814)
    {
      uint64_t v5 = 0;
      goto LABEL_13;
    }
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t appended = IFFInformationGetItemPropertyICCProfileData(a1, &v8, &v7);
    if (!appended) {
      goto LABEL_10;
    }
  }
LABEL_11:
  uint64_t v5 = appended;
LABEL_13:
  FigAtomWriterEndAtom();
  return v5;
}

uint64_t _appendUUIDItemPropertyHelper(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = 0;
  memset(&v7[1], 0, 48);
  if (a3)
  {
    CFUUIDBytesForItemPropertyint Type = FigAtomWriterInitWithParent();
    if (!CFUUIDBytesForItemPropertyType)
    {
      v7[0] = 0uLL;
      CFUUIDBytesForItemPropertyint Type = IFFInformationGetCFUUIDBytesForItemPropertyType(*(_DWORD *)(a1 + 8), v7);
      if (!CFUUIDBytesForItemPropertyType)
      {
        CFUUIDBytesForItemPropertyint Type = FigAtomWriterBeginUUIDAtom();
        if (!CFUUIDBytesForItemPropertyType) {
          CFUUIDBytesForItemPropertyint Type = FigAtomWriterAppendData();
        }
      }
    }
  }
  else
  {
    CFUUIDBytesForItemPropertyint Type = FigSignalErrorAt();
  }
  uint64_t v5 = CFUUIDBytesForItemPropertyType;
  FigAtomWriterEndAtom();
  return v5;
}

uint64_t FigAssetImageGeneratorCreateFromAsset(uint64_t a1, const void *a2, void *a3)
{
  return FigAssetImageGeneratorCreateFromAssetWithOptions(a1, a2, 0, a3);
}

uint64_t FigAssetImageGeneratorCreateFromAssetWithOptions(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  if (!a2) {
    return 4294954863;
  }
  FigAssetImageGeneratorGetClassID();
  uint64_t v7 = CMDerivedObjectCreate();
  if (v7) {
    return v7;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_WORD *)uint64_t DerivedStorage = 0;
  CFTypeRef v9 = CFRetain(a2);
  *(void *)(DerivedStorage + 8) = 0;
  *(void *)(DerivedStorage + 16) = 0;
  *(void *)(DerivedStorage + 24) = v9;
  *(void *)(DerivedStorage + 32) = 0;
  *(void *)(DerivedStorage + 40) = 0;
  *(_DWORD *)(DerivedStorage + 48) = 0;
  uint64_t v10 = FigSimpleMutexCreate();
  *(void *)(DerivedStorage + 56) = v10;
  if (!v10) {
    return FigSignalErrorAt();
  }
  *(void *)(DerivedStorage + 64) = 0;
  *(void *)(DerivedStorage + 72) = DerivedStorage + 64;
  uint64_t v11 = FigSemaphoreCreate();
  *(void *)(DerivedStorage + 80) = v11;
  if (!v11) {
    return FigSignalErrorAt();
  }
  *(_WORD *)(DerivedStorage + 105) = 0;
  *(void *)(DerivedStorage + 88) = 0;
  *(unsigned char *)(DerivedStorage + 96) = 0;
  int BooleanIfPresent = FigCFDictionaryGetBooleanIfPresent();
  int v13 = 2;
  if (!BooleanIfPresent) {
    int v13 = 0;
  }
  *(_DWORD *)(DerivedStorage + 108) = v13;
  FigCFDictionaryGetBooleanIfPresent();
  FigCFDictionaryGetBooleanIfPresent();
  MEMORY[0x19970EE10](&sAIGCreateNotificationQueueOnce, aig_createNotificationQueueOnce);
  if (!sAIGNotificationQueue) {
    return FigSignalErrorAt();
  }
  FigCFWeakReferenceStore();
  uint64_t CMBaseObject = FigAssetGetCMBaseObject(a2);
  uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v15) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = 0;
  }
  BOOL v17 = *(void (**)(uint64_t, __CFString *, uint64_t, uint64_t))(v16 + 48);
  if (v17) {
    v17(CMBaseObject, @"assetProperty_CreationURL", a1, DerivedStorage + 8);
  }
  uint64_t v18 = 0;
  *a4 = 0;
  return v18;
}

dispatch_queue_t aig_createNotificationQueueOnce()
{
  dispatch_queue_t result = dispatch_queue_create("com.apple.coremedia.assetimagegenerator.notifications", 0);
  sAIGNotificationQueue = (uint64_t)result;
  return result;
}

uint64_t aig_Invalidate()
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (!*DerivedStorage)
  {
    uint64_t v1 = DerivedStorage;
    *uint64_t DerivedStorage = 1;
    FigCFWeakReferenceStore();
    if (v1[7])
    {
      MEMORY[0x19970E910]();
      for (CFIndex i = (uint64_t *)v1[8]; i; CFIndex i = (uint64_t *)*i)
        *((unsigned char *)i + 8) = 1;
      MEMORY[0x19970E930](v1[7]);
    }
    if (v1[11])
    {
      FigSemaphoreSignal();
      FigThreadAbort();
      FigThreadJoin();
      v1[11] = 0;
    }
  }
  return 0;
}

void aig_Finalize()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  aig_Invalidate();
  if (DerivedStorage[7])
  {
    FigSimpleMutexDestroy();
    DerivedStorage[7] = 0;
  }
  if (DerivedStorage[10])
  {
    FigSemaphoreDestroy();
    DerivedStorage[10] = 0;
  }
  uint64_t v1 = (const void *)DerivedStorage[15];
  if (v1)
  {
    CFRelease(v1);
    DerivedStorage[15] = 0;
  }
  CFAllocatorRef v2 = (const void *)DerivedStorage[3];
  if (v2)
  {
    CFRelease(v2);
    DerivedStorage[3] = 0;
  }
  CFAllocatorRef v3 = (const void *)DerivedStorage[2];
  if (v3)
  {
    CFRelease(v3);
    DerivedStorage[2] = 0;
  }
  uint64_t v4 = (const void *)DerivedStorage[4];
  if (v4)
  {
    CFRelease(v4);
    DerivedStorage[4] = 0;
  }
  uint64_t v5 = (const void *)DerivedStorage[5];
  if (v5)
  {
    CFRelease(v5);
    DerivedStorage[5] = 0;
  }
  uint64_t v6 = (const void *)DerivedStorage[1];
  if (v6)
  {
    CFRelease(v6);
    DerivedStorage[1] = 0;
  }
}

__CFString *aig_CopyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<FigAssetImageGenerator %p url: ", a1);
  CFURLRef v4 = *(const __CFURL **)(DerivedStorage + 8);
  if (v4) {
    CFStringRef v5 = CFURLGetString(v4);
  }
  else {
    CFStringRef v5 = @"NULL";
  }
  CFStringAppend(Mutable, v5);
  CFStringAppend(Mutable, @">");
  return Mutable;
}

uint64_t aig_SetProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = 4294954516;
  if (a2 && a3)
  {
    if (*(unsigned char *)DerivedStorage)
    {
      return FigSignalErrorAt();
    }
    else if (CFEqual(a2, @"ClientPID"))
    {
      uint64_t v7 = *(const void **)(DerivedStorage + 120);
      *(void *)(DerivedStorage + 120) = a3;
      CFRetain(a3);
      if (v7) {
        CFRelease(v7);
      }
      return 0;
    }
    else if (CFEqual(a2, @"AllowAlternateDecoderSelection"))
    {
      uint64_t result = 0;
      *(unsigned char *)(DerivedStorage + 128) = (const void *)*MEMORY[0x1E4F1CFD0] == a3;
    }
    else
    {
      return 4294954512;
    }
  }
  return result;
}

uint64_t aig_CopyCGImageAtTime(const void *a1, uint64_t a2, const void *a3, const void *a4, void *a5, uint64_t a6)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v29 = 0;
  memset(v28, 0, sizeof(v28));
  if (!*(unsigned char *)DerivedStorage)
  {
    uint64_t v14 = DerivedStorage;
    uint64_t v15 = *(const void **)(DerivedStorage + 24);
    if (v15 && (CFTypeRef v16 = CFRetain(v15)) != 0)
    {
      BOOL v17 = v16;
      uint64_t CMBaseObject = FigAssetGetCMBaseObject(v16);
      uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v19) {
        uint64_t v20 = v19;
      }
      else {
        uint64_t v20 = 0;
      }
      int v22 = *(uint64_t (**)(uint64_t, __CFString *, void, char *))(v20 + 48);
      if (v22)
      {
        uint64_t v23 = v22(CMBaseObject, @"assetProperty_CPEProtector", *MEMORY[0x1E4F1CF80], (char *)&v28[1] + 8);
        if (!v23)
        {
          CFRelease(v17);
          int v24 = *(_DWORD *)(v14 + 100) + 1;
          *(_DWORD *)(v14 + 100) = v24;
          long long v26 = *(_OWORD *)a2;
          uint64_t v27 = *(void *)(a2 + 16);
          uint64_t ImageAtTimeInternal = FAIGCommon_createImageRequest(&v26, a3, a4, v24, &v29);
          if (!ImageAtTimeInternal) {
            uint64_t ImageAtTimeInternal = aig_createImageAtTimeInternal(v28, a1, 0, (uint64_t)v29, a5, a6);
          }
          uint64_t v21 = ImageAtTimeInternal;
          goto LABEL_18;
        }
        uint64_t v21 = v23;
      }
      else
      {
        uint64_t v21 = 4294954514;
      }
      CFRelease(v17);
    }
    else
    {
      uint64_t v21 = 4294954859;
    }
LABEL_18:
    aig_cleanupImageRetrievalObjects((CFTypeRef *)v28);
    FAIGCommon_releaseImageRequest(v29);
    return v21;
  }

  return FigSignalErrorAt();
}

uint64_t aig_RequestCGImageAtTimeAsync(uint64_t a1, uint64_t a2, const void *a3, const void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  BOOL v17 = 0;
  if (*(unsigned char *)DerivedStorage)
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v9 = DerivedStorage;
    int v10 = *(_DWORD *)(DerivedStorage + 100) + 1;
    *(_DWORD *)(DerivedStorage + 100) = v10;
    long long v15 = *(_OWORD *)a2;
    uint64_t v16 = *(void *)(a2 + 16);
    uint64_t v11 = FAIGCommon_createImageRequest(&v15, a3, a4, v10, &v17);
    if (v11) {
      return v11;
    }
    MEMORY[0x19970E910](*(void *)(v9 + 56));
    *BOOL v17 = 0;
    **(void **)(v9 + 72) = v17;
    *(void *)(v9 + 72) = v17;
    if (*(unsigned char *)(v9 + 96))
    {
      MEMORY[0x19970E930](*(void *)(v9 + 56));
      return 0;
    }
    else
    {
      uint64_t v13 = *(void *)(v9 + 88);
      *(unsigned char *)(v9 + 96) = 1;
      if (v13)
      {
        *(void *)(v9 + 88) = 0;
        MEMORY[0x19970E930](*(void *)(v9 + 56));
        FigThreadJoin();
      }
      else
      {
        MEMORY[0x19970E930](*(void *)(v9 + 56));
      }
      *(void *)&long long v15 = @"com.apple.coremedia.player.processimagerequest";
      CFDictionaryRef v14 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], MEMORY[0x1E4F21EA8], (const void **)&v15, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      MEMORY[0x19970E910](*(void *)(v9 + 56));
      uint64_t v12 = FigThreadCreate();
      MEMORY[0x19970E930](*(void *)(v9 + 56));
      if (v14) {
        CFRelease(v14);
      }
      if (v12) {
        *(unsigned char *)(v9 + 96) = 0;
      }
    }
    return v12;
  }
}

uint64_t aig_CancelAllCGImageAsyncRequests()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)DerivedStorage)
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v2 = DerivedStorage;
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 56));
    for (CFIndex i = *(uint64_t **)(v2 + 64); i; CFIndex i = (uint64_t *)*i)
      *((unsigned char *)i + 8) = 1;
    MEMORY[0x19970E930](*(void *)(v2 + 56));
    FigSemaphoreSignal();
    return 0;
  }
}

uint64_t aig_createImageAtTimeInternal(void *a1, const void *a2, _DWORD *a3, uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v237 = a1;
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  int valuePtr = 0;
  long long v223 = *MEMORY[0x1E4F1F9F8];
  *(_OWORD *)&v234.CMTimeValue value = *MEMORY[0x1E4F1F9F8];
  CMTimeEpoch v13 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  v234.CMTimeEpoch epoch = v13;
  CMTime v233 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA10];
  CMTime v232 = v233;
  CFTypeRef v230 = 0;
  *(void *)uint64_t v231 = 0;
  CFTypeRef v228 = 0;
  CFTypeRef v229 = 0;
  char v227 = 1;
  keys = @"AIGRequestedNotificationWhenConsumed";
  uint64_t v235 = 2000000000;
  if (*a1) {
    goto LABEL_2;
  }
  uint64_t v219 = a6;
  uint64_t v29 = CMBaseObjectGetDerivedStorage();
  uint64_t v30 = CMBaseObjectGetDerivedStorage();
  lhs.CMTimeValue value = 0;
  rhs.CMTimeValue value = 0;
  values.CMTimeValue value = 0;
  v239.CMTimeValue value = 0;
  if (*(unsigned char *)v30)
  {
    uint64_t v31 = 4294954511;
    goto LABEL_189;
  }
  uint64_t v42 = v30;
  if (!*(unsigned char *)(v30 + 1))
  {
    unsigned int v55 = *(const void **)(v30 + 24);
    if (!v55)
    {
      uint64_t v31 = 4294954863;
      goto LABEL_31;
    }
    int v218 = a5;
    CFTypeRef v56 = CFRetain(v55);
    if (!v56)
    {
      uint64_t v31 = 4294954863;
      goto LABEL_31;
    }
    CFTypeRef v57 = v56;
    CFAllocatorRef v58 = CFGetAllocator(a2);
    CFTypeRef cfa = v57;
    uint64_t CMBaseObject = FigAssetGetCMBaseObject(v57);
    uint64_t v60 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v60) {
      uint64_t v61 = v60;
    }
    else {
      uint64_t v61 = 0;
    }
    uint64_t v73 = *(uint64_t (**)(uint64_t, __CFString *, CFAllocatorRef, CMTime *))(v61 + 48);
    if (!v73) {
      goto LABEL_137;
    }
    uint64_t v74 = v73(CMBaseObject, @"assetProperty_FormatReader", v58, &rhs);
    if (!v74)
    {
      if (!rhs.value)
      {
LABEL_320:
        uint64_t v74 = FigSignalErrorAt();
        goto LABEL_321;
      }
      CFAllocatorRef v75 = CFGetAllocator(a2);
      uint64_t v76 = FigAssetGetCMBaseObject(cfa);
      uint64_t v77 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v77) {
        uint64_t v78 = v77;
      }
      else {
        uint64_t v78 = 0;
      }
      BOOL v88 = *(uint64_t (**)(uint64_t, __CFString *, CFAllocatorRef, CMTime *))(v78 + 48);
      if (!v88) {
        goto LABEL_137;
      }
      uint64_t v74 = v88(v76, @"assetProperty_ContentByteStream", v75, &v239);
      if (!v74)
      {
        CFAllocatorRef v89 = CFGetAllocator(a2);
        uint64_t v90 = FigAssetGetCMBaseObject(cfa);
        uint64_t v91 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v91) {
          uint64_t v92 = v91;
        }
        else {
          uint64_t v92 = 0;
        }
        CFArrayRef v101 = *(uint64_t (**)(uint64_t, __CFString *, CFAllocatorRef, CMTime *))(v92 + 48);
        if (!v101) {
          goto LABEL_137;
        }
        uint64_t v74 = v101(v90, @"assetProperty_ByteStreamProvider", v89, &values);
        if (!v74)
        {
          if (values.value)
          {
            int v102 = *(_DWORD *)(v42 + 108);
            if (v102 == 1) {
              char v103 = 1;
            }
            else {
              char v103 = 4 * (v102 == 2);
            }
            if (*(unsigned char *)(v42 + 105)) {
              v103 |= 8u;
            }
            if (*(unsigned char *)(v42 + 106)) {
              char v104 = v103 | 0x10;
            }
            else {
              char v104 = v103;
            }
            FPSupport_GetDefaultTrackIDForMediaType(rhs.value, 1986618469, v42 + 48, v104);
            *(unsigned char *)(v42 + 104) = 0;
            CFAllocatorRef v105 = CFGetAllocator(a2);
            uint64_t v106 = FigAssetGetCMBaseObject(cfa);
            uint64_t v107 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v107) {
              uint64_t v108 = v107;
            }
            else {
              uint64_t v108 = 0;
            }
            long long v109 = *(uint64_t (**)(uint64_t, __CFString *, CFAllocatorRef, CMTime *))(v108 + 48);
            if (v109)
            {
              uint64_t v74 = v109(v106, @"assetProperty_CreationOptionsDictionary", v105, &lhs);
              if (!v74)
              {
                if (lhs.value) {
                  FigCFDictionaryGetBooleanIfPresent();
                }
                a5 = v218;
                if (*(unsigned char *)v42)
                {
                  uint64_t v31 = FigSignalErrorAt();
                }
                else
                {
                  uint64_t v31 = 0;
                  *(void *)(v42 + 16) = rhs.value;
                  rhs.CMTimeValue value = 0;
                  CMTimeValue value = v239.value;
                  v239.CMTimeValue value = 0;
                  *(void *)(v42 + 32) = values.value;
                  *(void *)(v42 + 40) = value;
                  values.CMTimeValue value = 0;
                  *(unsigned char *)(v42 + 1) = 1;
                }
                goto LABEL_139;
              }
              goto LABEL_321;
            }
LABEL_137:
            uint64_t v31 = 4294954514;
LABEL_138:
            a5 = v218;
LABEL_139:
            CFRelease(cfa);
            if (rhs.value) {
              CFRelease((CFTypeRef)rhs.value);
            }
            goto LABEL_31;
          }
          goto LABEL_320;
        }
      }
    }
LABEL_321:
    uint64_t v31 = v74;
    goto LABEL_138;
  }
  uint64_t v31 = 0;
LABEL_31:
  if (v239.value) {
    CFRelease((CFTypeRef)v239.value);
  }
  if (values.value) {
    CFRelease((CFTypeRef)values.value);
  }
  if (lhs.value) {
    CFRelease((CFTypeRef)lhs.value);
  }
  if (v31) {
    goto LABEL_189;
  }
  uint64_t v43 = *(unsigned int *)(v29 + 48);
  if (v43)
  {
    uint64_t v44 = v29;
    CFIndex v45 = a3;
    CMTimeEpoch v46 = v13;
    CFTypeRef v47 = DerivedStorage;
    long long v48 = a5;
    uint64_t v49 = *(void *)(v44 + 16);
    if (v49)
    {
      uint64_t v50 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v50) {
        uint64_t v51 = v50;
      }
      else {
        uint64_t v51 = 0;
      }
      unsigned int v62 = *(uint64_t (**)(uint64_t, uint64_t, void *, void))(v51 + 56);
      if (!v62) {
        goto LABEL_188;
      }
      uint64_t v63 = v62(v49, v43, a1, 0);
    }
    else
    {
      uint64_t v63 = FigSignalErrorAt();
    }
    uint64_t v31 = v63;
    a5 = v48;
    uint64_t DerivedStorage = v47;
    CMTimeEpoch v13 = v46;
    a3 = v45;
  }
  else
  {
    uint64_t v31 = FigSignalErrorAt();
  }
  a6 = v219;
  if (v31) {
    goto LABEL_189;
  }
LABEL_2:
  if ((*(_DWORD *)(a4 + 24) & 0x1D) != 1)
  {
    uint64_t v31 = 4294954863;
    goto LABEL_189;
  }
  uint64_t v217 = a5;
  CFDictionaryRef v14 = *(const __CFDictionary **)(a4 + 40);
  if (v14)
  {
    CFNumberRef v15 = (const __CFNumber *)CFDictionaryGetValue(v14, @"TimeFlags");
    if (v15)
    {
      CFNumberRef v16 = v15;
      CFTypeID v17 = CFGetTypeID(v15);
      if (v17 == CFNumberGetTypeID()) {
        CFNumberGetValue(v16, kCFNumberIntType, &valuePtr);
      }
    }
    CFNumberRef v18 = (const __CFNumber *)CFDictionaryGetValue(*(CFDictionaryRef *)(a4 + 40), @"TimeoutInterval");
    if (v18)
    {
      CFNumberRef v19 = v18;
      CFTypeID v20 = CFGetTypeID(v18);
      if (v20 == CFNumberGetTypeID()) {
        CFNumberGetValue(v19, kCFNumberSInt64Type, &v235);
      }
    }
    CFDictionaryRef v21 = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(a4 + 40), @"TimeToleranceBefore");
    if (v21)
    {
      CFDictionaryRef v22 = v21;
      CFTypeID v23 = CFGetTypeID(v21);
      if (v23 == CFDictionaryGetTypeID()) {
        CMTimeMakeFromDictionary(&v233, v22);
      }
    }
    CFDictionaryRef v24 = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(a4 + 40), @"TimeToleranceAfter");
    if (v24)
    {
      CFDictionaryRef v25 = v24;
      CFTypeID v26 = CFGetTypeID(v24);
      if (v26 == CFDictionaryGetTypeID()) {
        CMTimeMakeFromDictionary(&v232, v25);
      }
    }
  }
  uint64_t v27 = (_OWORD *)(a4 + 12);
  if ((valuePtr - 2) > 3) {
    unsigned int v28 = 257;
  }
  else {
    unsigned int v28 = dword_194998AC0[valuePtr - 2];
  }
  uint64_t v32 = *(void *)v237;
  *(_OWORD *)&lhs.CMTimeValue value = *v27;
  lhs.CMTimeEpoch epoch = *(void *)(a4 + 28);
  CMTime rhs = v233;
  CMTimeSubtract(&v225, &lhs, &rhs);
  *(_OWORD *)&lhs.CMTimeValue value = *v27;
  lhs.CMTimeEpoch epoch = *(void *)(a4 + 28);
  CMTime rhs = v232;
  CMTimeAdd(&v224, &lhs, &rhs);
  *(_OWORD *)&lhs.CMTimeValue value = *v27;
  lhs.CMTimeEpoch epoch = *(void *)(a4 + 28);
  uint64_t Basic = FigPlaybackBossSnapTimeToIFrameWithRange(v32, 0, &lhs, v28, &v225, &v224, (uint64_t)&v234);
  if (Basic) {
    goto LABEL_312;
  }
  if ((v234.flags & 0x1D) != 1)
  {
    uint64_t v31 = 4294954865;
    goto LABEL_189;
  }
  CMTime lhs = *(CMTime *)((char *)v237 + 56);
  CMTime rhs = v234;
  int32_t v34 = CMTimeCompare(&lhs, &rhs);
  unsigned int v35 = v237;
  if (v34)
  {
    if (*((void *)v237 + 2))
    {
LABEL_158:
      if (v35[20] && v35[21] && v35[6]) {
        goto LABEL_174;
      }
      CMTimeEpoch v221 = v13;
      long long v113 = DerivedStorage;
      uint64_t v114 = a3;
      uint64_t v115 = a6;
      __int16 v116 = *(const void **)(a4 + 48);
      uint64_t v117 = CMBaseObjectGetDerivedStorage();
      CFTypeRef v118 = (CFTypeRef)*v35;
      uint64_t v119 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v119) {
        uint64_t v120 = v119;
      }
      else {
        uint64_t v120 = 0;
      }
      CFIndex v121 = *(uint64_t (**)(CFTypeRef, void *))(v120 + 32);
      if (v121)
      {
        uint64_t Basic = v121(v118, v35 + 20);
        if (Basic) {
          goto LABEL_312;
        }
        uint64_t Basic = FigSampleGeneratorCreateForFormatReaderUsingByteStreams(v116, *(const void **)(v117 + 16), (const void *)*v35, *(const void **)(v117 + 32), 0, 2, v35 + 21);
        if (Basic) {
          goto LABEL_312;
        }
        uint64_t Basic = FigVisualContextCreateBasic((uint64_t)v116, 0, (CFTypeRef *)v35 + 6);
        if (Basic) {
          goto LABEL_312;
        }
        v35[11] = *(void *)(v117 + 80);
        long long v122 = v35 + 11;
        uint64_t v123 = *(v122 - 5);
        uint64_t v124 = *(void *)(CMBaseObjectGetVTable() + 16);
        a6 = v115;
        uint64_t v125 = v124 ? v124 : 0;
        a3 = v114;
        unsigned int v126 = *(uint64_t (**)(uint64_t, __n128 (*)(uint64_t, __n128 *, uint64_t, uint64_t), void *))(v125 + 8);
        if (v126)
        {
          uint64_t DerivedStorage = v113;
          uint64_t Basic = v126(v123, FAIGCommon_decodedImageBecameAvailable, v122);
          if (Basic) {
            goto LABEL_312;
          }
          unsigned int v35 = v237;
          CMTimeEpoch v13 = v221;
LABEL_174:
          uint64_t Basic = FAIGCommon_getOutputImagePropertiesForImageRetrieval((CMVideoFormatDescriptionRef)v35[2], *(CFDictionaryRef *)(a4 + 40), *((unsigned __int8 *)v35 + 36), v231, (CFDictionaryRef *)&v228);
          if (Basic) {
            goto LABEL_312;
          }
          FAIGCommon_checkAndUpdateOutputImagePropertiesForImageRetrieval(a3, *(uint64_t *)v231, (CFDictionaryRef *)v237 + 18, v228, &v227);
          if (v228)
          {
            CFRelease(v228);
            CFTypeRef v228 = 0;
          }
          int v127 = v237;
          uint64_t v128 = (char *)v237 + 208;
          if (*((void *)v237 + 26) && !v227) {
            goto LABEL_275;
          }
          uint64_t v213 = DerivedStorage;
          uint64_t v222 = a6;
          CFAllocatorRef v211 = *(const __CFAllocator **)(a4 + 48);
          uint64_t v209 = *(void *)(a4 + 40);
          int v129 = v231[0];
          int v130 = v231[1];
          uint64_t v242 = 0;
          uint64_t v131 = CMBaseObjectGetDerivedStorage();
          CFAllocatorRef v132 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
          CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          aig_cleanupVideoRenderPipelineAndMentorsForImageRetrieval(v127);
          CFAllocatorRef allocator = v132;
          char v212 = (CMFormatDescriptionRef *)(v127 + 2);
          CFArrayRef v134 = CFArrayCreate(v132, (const void **)v127 + 2, 1, MEMORY[0x1E4F1D510]);
          CFArrayRef v210 = v134;
          cfb = Mutable;
          if (!v134) {
            goto LABEL_318;
          }
          if ((int)FigExportSettings_GetMaximumBitsPerComponent(v134) <= 8) {
            int v135 = 1111970369;
          }
          else {
            int v135 = 1380411457;
          }
          HIDWORD(v242) = v135;
          BOOL v136 = *(unsigned char *)(v131 + 104) == 0;
          if (*(unsigned char *)(v131 + 128)) {
            CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F455B0], (const void *)*MEMORY[0x1E4F1CFD0]);
          }
          int v137 = *(_DWORD *)(v131 + 108);
          if (v137 == 1)
          {
            uint64_t v138 = (const void **)MEMORY[0x1E4F1CFD0];
          }
          else
          {
            if (v137 != 2)
            {
LABEL_196:
              if (*(unsigned char *)(v131 + 105)) {
                CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F455C0], (const void *)*MEMORY[0x1E4F1CFD0]);
              }
              if (*(unsigned char *)(v131 + 106)) {
                CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F455F0], (const void *)*MEMORY[0x1E4F1CFD0]);
              }
              long long v207 = v128;
              uint64_t DestinationPixelBufferAttributes = FPSupport_CreateDestinationPixelBufferAttributes(v129, v130, (char *)&v242 + 4, 1, 0, v136, 0, 0, 0, (CFDictionaryRef *)v127 + 5);
              if (DestinationPixelBufferAttributes) {
                goto LABEL_319;
              }
              uint64_t v141 = (const void *)v127[2];
              CMTimeMake(&lhs, 1, 30);
              CMTimeMake(&rhs, 1, 30);
              uint64_t v142 = FAIGCommon_createRenderPipelineOptions(v211, v141, 0, &lhs, &rhs, (CFDictionaryRef *)v127 + 17);
              a6 = v222;
              uint64_t DerivedStorage = v213;
              if (v142) {
                goto LABEL_313;
              }
              uint64_t v142 = FigVideoRenderPipelineCreateWithVisualContext(v211, Mutable, (const void *)v127[5], (const void *)v127[18], 1, v127[6], 0, (const __CFDictionary *)v127[17], v127 + 19);
              if (v142) {
                goto LABEL_313;
              }
              uint64_t v143 = v127 + 19;
              if (*v212)
              {
                CMFormatDescriptionGetExtensions(*v212);
                if (FigCFDictionaryGetInt32IfPresent())
                {
                  if ((int)v242 >= 2)
                  {
                    uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(v127[19]);
                    uint64_t v145 = *(void *)(CMBaseObjectGetVTable() + 8);
                    if (v145) {
                      uint64_t v146 = v145;
                    }
                    else {
                      uint64_t v146 = 0;
                    }
                    unsigned int v147 = *(uint64_t (**)(uint64_t, __CFString *, void))(v146 + 56);
                    if (!v147) {
                      goto LABEL_250;
                    }
                    uint64_t v142 = v147(FigBaseObject, @"FieldMode", *MEMORY[0x1E4F44D20]);
                    if (v142) {
                      goto LABEL_313;
                    }
                  }
                }
              }
              if (!FAIGCommon_standardDynamicRangeIsPreferred(v209)) {
                goto LABEL_236;
              }
              if (!*v212) {
                goto LABEL_236;
              }
              CMFormatDescriptionGetExtension(*v212, (CFStringRef)*MEMORY[0x1E4F24BC8]);
              if (!FigCFEqual() && !FigCFEqual()) {
                goto LABEL_236;
              }
              Extensiouint64_t n = CMFormatDescriptionGetExtension(*v212, (CFStringRef)*MEMORY[0x1E4F24A90]);
              CFPropertyListRef v149 = CMFormatDescriptionGetExtension(*v212, (CFStringRef)*MEMORY[0x1E4F24C18]);
              if (Extension)
              {
                uint64_t v150 = v149;
                CFTypeID v151 = CFGetTypeID(Extension);
                if (v151 == CFStringGetTypeID())
                {
                  if (v150)
                  {
                    CFTypeID v152 = CFGetTypeID(v150);
                    if (v152 == CFStringGetTypeID())
                    {
                      uint64_t v153 = FigRenderPipelineGetFigBaseObject(*v143);
                      uint64_t v154 = *(void *)(CMBaseObjectGetVTable() + 8);
                      if (v154) {
                        uint64_t v155 = v154;
                      }
                      else {
                        uint64_t v155 = 0;
                      }
                      uint64_t v156 = *(uint64_t (**)(uint64_t, __CFString *, CFPropertyListRef))(v155 + 56);
                      if (!v156)
                      {
                        uint64_t v31 = 4294954514;
LABEL_227:
                        a6 = v222;
LABEL_269:
                        uint64_t DerivedStorage = v213;
                        goto LABEL_270;
                      }
                      uint64_t DestinationPixelBufferAttributes = v156(v153, @"ColorPrimaries", Extension);
                      if (DestinationPixelBufferAttributes) {
                        goto LABEL_319;
                      }
                      uint64_t v157 = FigRenderPipelineGetFigBaseObject(*v143);
                      uint64_t v158 = *(void *)(CMBaseObjectGetVTable() + 8);
                      if (v158) {
                        uint64_t v159 = v158;
                      }
                      else {
                        uint64_t v159 = 0;
                      }
                      a6 = v222;
                      uint64_t v160 = *(uint64_t (**)(uint64_t, __CFString *, void))(v159 + 56);
                      if (!v160) {
                        goto LABEL_244;
                      }
                      uint64_t v161 = v160(v157, @"TransferFunction", *MEMORY[0x1E4F24BE0]);
                      if (v161) {
                        goto LABEL_326;
                      }
                      uint64_t v162 = FigRenderPipelineGetFigBaseObject(*v143);
                      uint64_t v163 = *(void *)(CMBaseObjectGetVTable() + 8);
                      uint64_t v164 = v163 ? v163 : 0;
                      unsigned int v165 = *(uint64_t (**)(uint64_t, __CFString *, const void *))(v164 + 56);
                      if (!v165)
                      {
LABEL_244:
                        uint64_t v31 = 4294954514;
                        goto LABEL_269;
                      }
                      uint64_t v31 = v165(v162, @"YCbCrMatrix", v150);
                      uint64_t DerivedStorage = v213;
                      if (v31) {
                        goto LABEL_270;
                      }
LABEL_236:
                      uint64_t v166 = *(void *)(v131 + 120);
                      if (!v166) {
                        goto LABEL_242;
                      }
                      uint64_t v167 = FigRenderPipelineGetFigBaseObject(*v143);
                      uint64_t v168 = *(void *)(CMBaseObjectGetVTable() + 8);
                      if (v168) {
                        uint64_t v169 = v168;
                      }
                      else {
                        uint64_t v169 = 0;
                      }
                      int v170 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v169 + 56);
                      if (v170)
                      {
                        uint64_t v161 = v170(v167, @"ClientPID", v166);
                        if (!v161)
                        {
LABEL_242:
                          uint64_t v171 = FigRenderPipelineGetFigBaseObject(v127[19]);
                          uint64_t v172 = *(void *)(CMBaseObjectGetVTable() + 8);
                          if (v172) {
                            uint64_t v173 = v172;
                          }
                          else {
                            uint64_t v173 = 0;
                          }
                          uint64_t DerivedStorage = v213;
                          uint64_t v174 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, void *))(v173 + 48);
                          if (v174)
                          {
                            uint64_t v142 = v174(v171, @"SourceSampleBufferQueue", v211, v127 + 23);
                            if (!v142)
                            {
                              uint64_t v175 = (const void *)*MEMORY[0x1E4F1CFD0];
                              uint64_t v176 = FigRenderPipelineGetFigBaseObject(*v143);
                              uint64_t v177 = *(void *)(CMBaseObjectGetVTable() + 8);
                              if (v177) {
                                uint64_t v178 = v177;
                              }
                              else {
                                uint64_t v178 = 0;
                              }
                              uint64_t v179 = *(void (**)(uint64_t, __CFString *, const void *))(v178 + 56);
                              if (v179) {
                                v179(v176, @"ObeyEmptyMediaMarkers", v175);
                              }
                              CMNotificationCenterGetDefaultLocalCenter();
                              uint64_t v180 = CMNotificationCenterAddListener();
                              if (!v180)
                              {
                                CMNotificationCenterGetDefaultLocalCenter();
                                uint64_t v180 = CMNotificationCenterAddListener();
                                if (!v180)
                                {
                                  uint64_t v181 = v127[23];
                                  CMTimeMake(&values, 3, 30);
                                  CMTimeMake(&v239, 2, 30);
                                  uint64_t DestinationPixelBufferAttributes = FigSampleBufferConsumerCreateForBufferQueue(v181, (long long *)&values.value, (long long *)&v239.value, v127 + 22);
                                  if (!DestinationPixelBufferAttributes)
                                  {
                                    CFMutableArrayRef MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
                                    if (MutableCopy)
                                    {
                                      CFDictionaryRef v183 = MutableCopy;
                                      CFDictionarySetValue(MutableCopy, @"OptimizeSampleCursorIPCForPower", v175);
                                      uint64_t v184 = VideoMentorNew((const void *)v127[20], (const void *)v127[21], (const void *)v127[22], v183, v127 + 25);
                                      if (v184) {
                                        goto LABEL_322;
                                      }
                                      CMNotificationCenterGetDefaultLocalCenter();
                                      uint64_t v184 = CMNotificationCenterAddListener();
                                      if (v184) {
                                        goto LABEL_322;
                                      }
                                      uint64_t v185 = FigTrackReaderGetFigBaseObject(*v127);
                                      uint64_t v186 = *(void *)(CMBaseObjectGetVTable() + 8);
                                      if (v186) {
                                        uint64_t v187 = v186;
                                      }
                                      else {
                                        uint64_t v187 = 0;
                                      }
                                      long long v188 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, void *))(v187 + 48);
                                      if (v188) {
                                        v188(v185, @"EditCursorService", allocator, v127 + 1);
                                      }
                                      uint64_t v184 = EditMentorNewWithChildVideoMentor((void *)v127[25], (const void *)v127[1], v207);
                                      if (v184)
                                      {
LABEL_322:
                                        uint64_t v31 = v184;
                                        a6 = v222;
                                      }
                                      else
                                      {
                                        a6 = v222;
                                        uint64_t v31 = 0;
                                        if (!v127[27]) {
                                          v127[27] = CFDictionaryCreate(allocator, (const void **)&kMentorKey_ModeChangePolicy, (const void **)&kMentorModeChangePolicy_RepurposeOrCancelPreviousOutput, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                                        }
                                      }
                                      CFRelease(v183);
                                      goto LABEL_269;
                                    }
                                    goto LABEL_318;
                                  }
LABEL_319:
                                  uint64_t v31 = DestinationPixelBufferAttributes;
                                  goto LABEL_227;
                                }
                              }
                              uint64_t v31 = v180;
                              a6 = v222;
LABEL_270:
                              if (cfb) {
                                CFRelease(cfb);
                              }
                              if (v210) {
                                CFRelease(v210);
                              }
                              if (v31) {
                                goto LABEL_189;
                              }
LABEL_275:
                              CFAllocatorRef v189 = CFGetAllocator(a2);
                              CFDictionaryRef v190 = CFDictionaryCreate(v189, (const void **)&keys, (const void **)&v237, 1, MEMORY[0x1E4F1D530], 0);
                              if (v190)
                              {
                                CFDictionaryRef v64 = v190;
                                uint64_t v191 = v237;
                                *((_OWORD *)v237 + 6) = v223;
                                v191[14] = v13;
                                int v192 = (const void *)v191[16];
                                v191[16] = v190;
                                CFRetain(v190);
                                if (v192) {
                                  CFRelease(v192);
                                }
                                uint64_t v193 = *((void *)v237 + 26);
                                int v194 = (const void *)*((void *)v237 + 27);
                                CMTime lhs = v234;
                                uint64_t v195 = EditMentorSetModeToScrub(v193, (uint64_t)&lhs, v194, 0, v64, 0);
                                if (!v195)
                                {
                                  char v53 = v217;
                                  if (!*DerivedStorage)
                                  {
                                    do
                                    {
                                      uint64_t RotatedCVImageBuffer = FigSemaphoreWaitRelative();
                                      if (RotatedCVImageBuffer) {
                                        goto LABEL_309;
                                      }
                                      uint64_t v31 = *((unsigned int *)v237 + 30);
                                      if (v31) {
                                        goto LABEL_60;
                                      }
                                      if (*DerivedStorage)
                                      {
                                        uint64_t v31 = 4294954511;
                                        goto LABEL_60;
                                      }
                                      if (*(unsigned char *)(a4 + 8))
                                      {
                                        uint64_t v31 = 4294954864;
                                        goto LABEL_60;
                                      }
                                    }
                                    while ((*((unsigned char *)v237 + 108) & 1) == 0);
                                    uint64_t v197 = DerivedStorage;
                                    uint64_t v198 = *((void *)v237 + 6);
                                    uint64_t v199 = *(void *)(a4 + 48);
                                    CMTime rhs = *(CMTime *)((unsigned char *)v237 + 4);
                                    uint64_t v200 = *(void *)(CMBaseObjectGetVTable() + 16);
                                    if (v200) {
                                      uint64_t v201 = v200;
                                    }
                                    else {
                                      uint64_t v201 = 0;
                                    }
                                    int8x16_t v202 = *(uint64_t (**)(uint64_t, uint64_t, CMTime *, uint64_t, CFTypeRef *, void, void))(v201 + 48);
                                    if (!v202)
                                    {
                                      uint64_t v31 = 4294954514;
                                      goto LABEL_60;
                                    }
                                    CMTime lhs = rhs;
                                    uint64_t RotatedCVImageBuffer = v202(v198, v199, &lhs, 3, &v230, 0, 0);
                                    if (!RotatedCVImageBuffer)
                                    {
                                      if (!v230)
                                      {
                                        uint64_t v31 = 4294954865;
                                        goto LABEL_60;
                                      }
                                      int v203 = *((_DWORD *)v237 + 8);
                                      int v204 = *((unsigned __int8 *)v237 + 37);
                                      if (!v203 && !*((unsigned char *)v237 + 37))
                                      {
                                        if (!*((unsigned char *)v237 + 38)) {
                                          goto LABEL_299;
                                        }
                                        int v204 = 0;
                                      }
                                      lhs.CMTimeValue value = 0;
                                      uint64_t RotatedCVImageBuffer = FAIGCommon_createRotatedCVImageBuffer((void *)v230, *((void *)v237 + 5), v203, v204, *((unsigned __int8 *)v237 + 38), v197[104], *(const __CFAllocator **)(a4 + 48), (CFTypeRef *)&lhs);
                                      if (!RotatedCVImageBuffer)
                                      {
                                        CFRelease(v230);
                                        CFTypeRef v230 = (CFTypeRef)lhs.value;
LABEL_299:
                                        BOOL IsPreferred = FAIGCommon_standardDynamicRangeIsPreferred(*(void *)(a4 + 40));
                                        FigCreateCGImageFromPixelBufferWithDynamicRangeConversion((CVPixelBufferRef)v230, 1, IsPreferred, (CGImageRef *)&v229);
                                        CFTypeRef v206 = v229;
                                        if (!v229)
                                        {
                                          uint64_t v31 = 4294954862;
                                          goto LABEL_60;
                                        }
                                        if (*((void *)v237 + 10)
                                          && (CFRelease(*((CFTypeRef *)v237 + 10)),
                                              unsigned int v35 = v237,
                                              *((void *)v237 + 10) = 0,
                                              (CFTypeRef v206 = v229) == 0))
                                        {
                                          CFTypeRef v54 = 0;
                                        }
                                        else
                                        {
                                          CFRetain(v206);
                                          CFTypeRef v54 = v229;
                                          unsigned int v35 = v237;
                                        }
                                        *(_OWORD *)(v35 + 7) = *((_OWORD *)v35 + 6);
                                        v35[9] = v35[14];
                                        v35[10] = v54;
                                        if (!v217) {
                                          goto LABEL_58;
                                        }
                                        goto LABEL_57;
                                      }
                                    }
LABEL_309:
                                    uint64_t v31 = RotatedCVImageBuffer;
                                    goto LABEL_60;
                                  }
                                  uint64_t v195 = FigSignalErrorAt();
                                }
                                uint64_t v31 = v195;
LABEL_61:
                                CFRelease(v64);
                                goto LABEL_189;
                              }
                              uint64_t Basic = FigSignalErrorAt();
LABEL_312:
                              uint64_t v31 = Basic;
                              goto LABEL_189;
                            }
LABEL_313:
                            uint64_t v31 = v142;
                            goto LABEL_270;
                          }
LABEL_250:
                          uint64_t v31 = 4294954514;
                          goto LABEL_270;
                        }
LABEL_326:
                        uint64_t v31 = v161;
                        goto LABEL_269;
                      }
                      goto LABEL_244;
                    }
                  }
                }
              }
LABEL_318:
              uint64_t DestinationPixelBufferAttributes = FigSignalErrorAt();
              goto LABEL_319;
            }
            uint64_t v138 = (const void **)MEMORY[0x1E4F1CFC8];
          }
          CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F455D0], *v138);
          goto LABEL_196;
        }
      }
LABEL_188:
      uint64_t v31 = 4294954514;
      goto LABEL_189;
    }
    CFTypeRef cf = a3;
    uint64_t v220 = a6;
    CFDictionaryRef v36 = *(const __CFDictionary **)(a4 + 40);
    rhs.CMTimeValue value = 0;
    values.CMTimeValue value = 0;
    uint64_t v37 = *(void *)v237;
    lhs.CMTimeValue value = 0;
    CFAllocatorRef v38 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    uint64_t v39 = FigTrackReaderGetFigBaseObject(v37);
    uint64_t v40 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v40) {
      uint64_t v41 = v40;
    }
    else {
      uint64_t v41 = 0;
    }
    uint64_t v66 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, CMTime *))(v41 + 48);
    if (!v66)
    {
      CFStringRef v72 = 0;
      uint64_t v31 = 4294954514;
      CFAllocatorRef v68 = v38;
      goto LABEL_82;
    }
    uint64_t v67 = v39;
    CFAllocatorRef v68 = v38;
    uint64_t v69 = v66(v67, @"TrackFormatDescriptionArray", v38, &lhs);
    if (!v69)
    {
      if (lhs.value && CFArrayGetCount((CFArrayRef)lhs.value))
      {
        CFArrayGetValueAtIndex((CFArrayRef)lhs.value, 0);
        v35[2] = FigFormatDescriptionRetain();
        LODWORD(v239.value) = 0;
        uint64_t v70 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v70) {
          uint64_t v71 = v70;
        }
        else {
          uint64_t v71 = 0;
        }
        unsigned int v79 = *(void (**)(uint64_t, CMTime *, void))(v71 + 8);
        if (v79)
        {
          v79(v37, &v239, 0);
          uint64_t value_low = LODWORD(v239.value);
        }
        else
        {
          uint64_t value_low = 0;
        }
        CFStringRef v72 = FigCPECreateFormatDescriptionIdentifierForTrackIDAndIndex(v38, value_low, 0);
        uint64_t v31 = 0;
LABEL_82:
        if (lhs.value) {
          CFRelease((CFTypeRef)lhs.value);
        }
        if (v31) {
          goto LABEL_150;
        }
        *(_DWORD *)((char *)v35 + 35) = 0;
        *((_DWORD *)v35 + 8) = 0;
        if (!v36) {
          goto LABEL_149;
        }
        if (CFDictionaryGetValue(v36, @"ApplyVideoTrackMatrix") == (const void *)*MEMORY[0x1E4F1CFD0])
        {
          v239.CMTimeValue value = 0;
          uint64_t v84 = FigTrackReaderGetFigBaseObject(*v35);
          uint64_t v85 = *(void *)(CMBaseObjectGetVTable() + 8);
          uint64_t v86 = v85 ? v85 : 0;
          int v93 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, CMTime *))(v86 + 48);
          if (v93)
          {
            v93(v84, @"TrackMatrix", v68, &v239);
            if (v239.value)
            {
              FigGetCGAffineTransformFrom3x3MatrixArray((const void *)v239.value, (uint64_t)&lhs);
              CFAllocatorRef v68 = v38;
              *((_DWORD *)v35 + 8) = FigGetRotationAngleAndFlipsFromCGAffineTransform((double *)&lhs.value, (unsigned char *)v35 + 37, (unsigned char *)v35 + 38);
              CFRelease((CFTypeRef)v239.value);
              int v94 = *((_DWORD *)v35 + 8);
              BOOL v96 = v94 == 90 || v94 == 270;
              *((unsigned char *)v35 + 36) = v96;
            }
          }
        }
        uint64_t v81 = v35[3];
        if (!v81) {
          goto LABEL_149;
        }
        uint64_t v82 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v82) {
          uint64_t v83 = v82;
        }
        else {
          uint64_t v83 = 0;
        }
        BOOL v87 = *(unsigned int (**)(uint64_t, __CFString *, const __CFAllocator *, CMTime *))(v83 + 48);
        if (v87 && !v87(v81, @"AllowsImageGeneration", v68, &rhs) && CFBooleanGetValue((CFBooleanRef)rhs.value))
        {
          char v97 = (const void *)v35[24];
          if (v97)
          {
            CFRelease(v97);
            v35[24] = 0;
          }
          uint64_t v98 = v35[3];
          uint64_t v99 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v99) {
            uint64_t v100 = v99;
          }
          else {
            uint64_t v100 = 0;
          }
          uint64_t v111 = *(uint64_t (**)(uint64_t, const __CFAllocator *, uint64_t, void, CFStringRef, CMTime *))(v100 + 8);
          if (v111)
          {
            uint64_t v112 = v111(v98, v38, 1, 0, v72, &values);
            if (v112 == -12164)
            {
LABEL_149:
              uint64_t v31 = 0;
              goto LABEL_150;
            }
            uint64_t v31 = v112;
            if (!v112 && values.value)
            {
              v35[24] = CFDictionaryCreate(v38, (const void **)&kMentorCreationOptionKey_SampleBufferCryptor, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
              goto LABEL_149;
            }
            if (!v112) {
              goto LABEL_149;
            }
          }
          else
          {
            uint64_t v31 = 4294954514;
          }
        }
        else
        {
          uint64_t v31 = 4294951072;
        }
LABEL_150:
        if (v72) {
          CFRelease(v72);
        }
        if (rhs.value) {
          CFRelease((CFTypeRef)rhs.value);
        }
        a6 = v220;
        if (values.value) {
          CFRelease((CFTypeRef)values.value);
        }
        a3 = cf;
        if (v31) {
          goto LABEL_189;
        }
        unsigned int v35 = v237;
        goto LABEL_158;
      }
      uint64_t v69 = FigSignalErrorAt();
    }
    uint64_t v31 = v69;
    CFStringRef v72 = 0;
    goto LABEL_82;
  }
  uint64_t v52 = (const void *)*((void *)v237 + 10);
  char v53 = v217;
  if (v52)
  {
    CFRetain(v52);
    unsigned int v35 = v237;
    CFTypeRef v54 = (CFTypeRef)*((void *)v237 + 10);
  }
  else
  {
    CFTypeRef v54 = 0;
  }
  CFDictionaryRef v64 = 0;
  CFTypeRef v229 = v54;
  *((_OWORD *)v35 + 6) = *(_OWORD *)(v35 + 7);
  v35[14] = v35[9];
  if (v217)
  {
LABEL_57:
    void *v53 = v54;
    CFTypeRef v229 = 0;
  }
LABEL_58:
  uint64_t v31 = 0;
  if (a6)
  {
    long long v65 = *((_OWORD *)v35 + 6);
    *(void *)(a6 + 16) = v35[14];
    *(_OWORD *)a6 = v65;
  }
LABEL_60:
  if (v64) {
    goto LABEL_61;
  }
LABEL_189:
  if (v229) {
    CFRelease(v229);
  }
  if (v230) {
    CFRelease(v230);
  }
  return v31;
}

void aig_cleanupImageRetrievalObjects(CFTypeRef *a1)
{
  aig_cleanupVideoRenderPipelineAndMentorsForImageRetrieval(a1);
  CFTypeRef v2 = a1[21];
  if (v2)
  {
    CFRelease(v2);
    a1[21] = 0;
  }
  CFTypeRef v3 = a1[20];
  if (v3)
  {
    CFRelease(v3);
    a1[20] = 0;
  }
  CFTypeRef v4 = a1[18];
  if (v4)
  {
    CFRelease(v4);
    a1[18] = 0;
  }
  CFTypeRef v5 = a1[6];
  if (v5)
  {
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = *(void (**)(CFTypeRef))(v7 + 24);
    if (v8) {
      v8(v5);
    }
    CFTypeRef v9 = a1[6];
    if (v9)
    {
      CFRelease(v9);
      a1[6] = 0;
    }
  }
  if (a1[11]) {
    a1[11] = 0;
  }
  CFTypeRef v10 = a1[16];
  if (v10)
  {
    CFRelease(v10);
    a1[16] = 0;
  }
  CFTypeRef v11 = a1[2];
  if (v11)
  {
    CFRelease(v11);
    a1[2] = 0;
  }
  CFTypeRef v12 = a1[3];
  if (v12)
  {
    CFRelease(v12);
    a1[3] = 0;
  }
  CFTypeRef v13 = a1[24];
  if (v13)
  {
    CFRelease(v13);
    a1[24] = 0;
  }
  if (*a1)
  {
    CFRelease(*a1);
    *a1 = 0;
  }
  CFTypeRef v14 = a1[27];
  if (v14)
  {
    CFRelease(v14);
    a1[27] = 0;
  }
  CFTypeRef v15 = a1[10];
  if (v15)
  {
    CFRelease(v15);
    a1[10] = 0;
  }
}

void aig_cleanupVideoRenderPipelineAndMentorsForImageRetrieval(void *a1)
{
  CFTypeRef v2 = (const void *)a1[1];
  if (v2)
  {
    CFRelease(v2);
    a1[1] = 0;
  }
  CFTypeRef v3 = (void *)a1[25];
  if (v3) {
    VideoMentorInvalidate(v3);
  }
  CFTypeRef v4 = (void **)a1[26];
  if (v4) {
    EditMentorDispose(v4);
  }
  if (a1[25])
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    VideoMentorDispose((void *)a1[25]);
  }
  CFTypeRef v5 = (const void *)a1[23];
  if (v5)
  {
    CFRelease(v5);
    a1[23] = 0;
  }
  uint64_t v6 = (const void *)a1[22];
  if (v6)
  {
    CFRelease(v6);
    a1[22] = 0;
  }
  if (a1[19])
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(a1[19]);
    uint64_t v8 = *(void **)(CMBaseObjectGetVTable() + 8);
    if (v8) {
      CFTypeRef v9 = v8;
    }
    else {
      CFTypeRef v9 = 0;
    }
    if (*v9 >= 2uLL)
    {
      CFTypeRef v10 = (void (*)(uint64_t))v9[8];
      if (v10) {
        v10(FigBaseObject);
      }
    }
    CFTypeRef v11 = (const void *)a1[19];
    if (v11)
    {
      CFRelease(v11);
      a1[19] = 0;
    }
  }
  CFTypeRef v12 = (const void *)a1[17];
  if (v12)
  {
    CFRelease(v12);
    a1[17] = 0;
  }
  CFTypeRef v13 = (const void *)a1[5];
  if (v13)
  {
    CFRelease(v13);
    a1[5] = 0;
  }
}

uint64_t aig_handleMentorStoppingDueToErrorNotification(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  FAIGCommon_handleRenderPipelineDecodeErrorNotification(a1, a2, a3, a4, a5);

  return FigSemaphoreSignal();
}

uint64_t aig_processImageRequestThread(const void *a1)
{
  keys[3] = *(void **)MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  memset(v41, 0, sizeof(v41));
  CFTypeRef cf = 0;
  uint64_t v40 = -1;
  long long v34 = *MEMORY[0x1E4F1F9F8];
  long long v37 = *MEMORY[0x1E4F1F9F8];
  CMTimeEpoch v33 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  CMTimeEpoch v38 = v33;
  CFTypeRef v2 = *(const void **)(DerivedStorage + 24);
  CFTypeRef v3 = (const __CFAllocator **)MEMORY[0x1E4F1CF80];
  if (v2)
  {
    CFTypeRef v4 = CFRetain(v2);
    CFAllocatorRef v5 = *v3;
    if (v4)
    {
      uint64_t v6 = v4;
      uint64_t CMBaseObject = FigAssetGetCMBaseObject(v4);
      uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v8) {
        uint64_t v9 = v8;
      }
      else {
        uint64_t v9 = 0;
      }
      CFTypeRef v10 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, char *))(v9 + 48);
      if (v10) {
        v10(CMBaseObject, @"assetProperty_CPEProtector", v5, (char *)&v41[1] + 8);
      }
      CFRelease(v6);
    }
  }
  else
  {
    CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  }
  while (1)
  {
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 56));
    uint64_t v11 = *(void *)(DerivedStorage + 64);
    if (!v11) {
      break;
    }
    MEMORY[0x19970E930](*(void *)(DerivedStorage + 56));
    if (*(unsigned char *)(v11 + 8) || *(unsigned char *)DerivedStorage)
    {
      int v12 = -12432;
    }
    else
    {
      int v31 = aig_createImageAtTimeInternal(v41, a1, &v40, v11, &cf, (uint64_t)&v37);
      if (*(unsigned char *)DerivedStorage)
      {
        int v12 = -12785;
      }
      else if (*(unsigned char *)(v11 + 8))
      {
        int v12 = -12432;
      }
      else
      {
        int v12 = v31;
      }
    }
    CFDictionaryRef v13 = *(const __CFDictionary **)(v11 + 40);
    if (v13)
    {
      CFNumberRef Value = CFDictionaryGetValue(v13, @"RequestID");
      CFTypeRef v15 = Value;
      if (Value) {
        CFRetain(Value);
      }
    }
    else
    {
      CFTypeRef v15 = 0;
    }
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 56));
    CFNumberRef v16 = *(uint64_t **)(DerivedStorage + 64);
    uint64_t v17 = *v16;
    *(void *)(DerivedStorage + 64) = *v16;
    if (!v17)
    {
      *(void *)(DerivedStorage + 72) = DerivedStorage + 64;
      *(unsigned char *)(DerivedStorage + 96) = 0;
    }
    MEMORY[0x19970E930](*(void *)(DerivedStorage + 56));
    FAIGCommon_releaseImageRequest((void *)v11);
    uint64_t v18 = (uint64_t)cf;
    *(_OWORD *)&v36.CMTimeValue value = v37;
    v36.CMTimeEpoch epoch = v38;
    int valuePtr = v12;
    memset(keys, 0, 24);
    memset(values, 0, sizeof(values));
    uint64_t v19 = CMBaseObjectGetDerivedStorage();
    if (v12)
    {
      keys[0] = @"Result";
      values[0] = CFNumberCreate(v5, kCFNumberSInt32Type, &valuePtr);
      CFIndex v20 = 1;
      CFDictionaryRef v21 = kFigAssetImageGeneratorNotification_FailedToGenerateCGImage;
    }
    else
    {
      if (v18)
      {
        keys[0] = @"CGImage";
        values[0] = (void *)CFRetain((CFTypeRef)v18);
        uint64_t v18 = 1;
      }
      keys[v18] = @"FigTime";
      CMTime time = v36;
      values[v18] = CMTimeCopyAsDictionary(&time, v5);
      CFIndex v20 = v18 + 1;
      CFDictionaryRef v21 = kFigAssetImageGeneratorNotification_DidGenerateCGImage;
    }
    CFDictionaryRef v22 = *v21;
    if (v15)
    {
      keys[v20] = @"RequestID";
      values[v20++] = (void *)CFRetain(v15);
    }
    CFDictionaryRef v23 = CFDictionaryCreate(v5, (const void **)keys, (const void **)values, v20, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    uint64_t v24 = MEMORY[0x19970C720](v19 + 112);
    if (v24)
    {
      uint64_t v25 = v24;
      CFTypeID v26 = malloc_type_calloc(1uLL, 0x18uLL, 0xE00406B48E91AuLL);
      if (v22) {
        CFTypeRef v27 = CFRetain(v22);
      }
      else {
        CFTypeRef v27 = 0;
      }
      v26[1] = v27;
      if (v23) {
        CFTypeRef v28 = CFRetain(v23);
      }
      else {
        CFTypeRef v28 = 0;
      }
      v26[2] = v28;
      *CFTypeID v26 = v25;
      dispatch_async_f((dispatch_queue_t)sAIGNotificationQueue, v26, (dispatch_function_t)aig_postNotificationAsynchronously);
    }
    if (v23) {
      CFRelease(v23);
    }
    uint64_t v29 = 0;
    do
    {
      uint64_t v30 = values[v29];
      if (v30)
      {
        CFRelease(v30);
        values[v29] = 0;
      }
      ++v29;
    }
    while (v20 != v29);
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    if (v15) {
      CFRelease(v15);
    }
    long long v37 = v34;
    CMTimeEpoch v38 = v33;
    if (!v17) {
      goto LABEL_53;
    }
  }
  *(unsigned char *)(DerivedStorage + 96) = 0;
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 56));
LABEL_53:
  aig_cleanupImageRetrievalObjects((CFTypeRef *)v41);
  return 0;
}

void aig_postNotificationAsynchronously(uint64_t a1)
{
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  CFTypeRef v2 = *(const void **)(a1 + 8);
  if (v2) {
    CFRelease(v2);
  }
  CFTypeRef v3 = *(const void **)(a1 + 16);
  if (v3) {
    CFRelease(v3);
  }
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }

  free((void *)a1);
}

uint64_t TrackFragmentBuilderCreate(int a1, const __CFDictionary *a2, uint64_t a3, uint64_t a4, CFAllocatorRef allocator, void *a6)
{
  if (!a6)
  {
    uint64_t v19 = FigSignalErrorAt();
    goto LABEL_17;
  }
  int v12 = CFAllocatorAllocate(allocator, 96, 0);
  CFDictionaryRef v13 = v12;
  if (!v12)
  {
    uint64_t v22 = FigSignalErrorAt();
    goto LABEL_23;
  }
  v12[4] = 0u;
  v12[5] = 0u;
  v12[2] = 0u;
  v12[3] = 0u;
  *int v12 = 0u;
  v12[1] = 0u;
  if (allocator) {
    CFTypeRef v14 = CFRetain(allocator);
  }
  else {
    CFTypeRef v14 = 0;
  }
  *(void *)CFDictionaryRef v13 = v14;
  *((_DWORD *)v13 + 2) = a1;
  *((void *)v13 + 5) = a3;
  *((void *)v13 + 10) = 0;
  v13[3] = xmmword_194998AD0;
  v13[4] = vdupq_n_s64(0x8000000000000000);
  if (a2)
  {
    long long context = 0;
    uint64_t v15 = MovieSampleGroupCollectionCreate(allocator, (uint64_t *)&context);
    if (v15)
    {
      uint64_t v19 = v15;
      if (!context) {
        goto LABEL_18;
      }
      CFDictionaryRef v21 = context;
      goto LABEL_20;
    }
    CFDictionaryApplyFunction(a2, (CFDictionaryApplierFunction)trbCreateSampleGroupCollectionWithDescriptionArraysApplierFunction, context);
    *((void *)v13 + 4) = context;
  }
  if (a4)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(allocator, 4, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      CFMutableDictionaryRef v17 = Mutable;
      uint64_t v18 = FigCFDictionarySetInt32();
      if (!v18)
      {
        uint64_t v18 = FigCFDictionarySetInt32();
        if (!v18)
        {
          uint64_t v18 = FigCFDictionarySetInt32();
          if (!v18)
          {
            uint64_t v18 = FigCFDictionarySetInt32();
            if (!v18)
            {
              *((void *)v13 + 2) = v17;
              goto LABEL_16;
            }
          }
        }
      }
      uint64_t v19 = v18;
      CFDictionaryRef v21 = v17;
LABEL_20:
      CFRelease(v21);
      goto LABEL_18;
    }
    uint64_t v22 = FigSignalErrorAt();
    if (!v22) {
      goto LABEL_16;
    }
LABEL_23:
    uint64_t v19 = v22;
    goto LABEL_18;
  }
LABEL_16:
  uint64_t v19 = 0;
  *a6 = v13;
LABEL_17:
  CFDictionaryRef v13 = 0;
LABEL_18:
  TrackFragmentBuilderRelease((const __CFAllocator **)v13);
  return v19;
}

void TrackFragmentBuilderRelease(const __CFAllocator **ptr)
{
  if (ptr)
  {
    CFAllocatorRef v2 = *ptr;
    CFAllocatorRef v3 = ptr[11];
    if (v3)
    {
      tfbTrackFragmentRelease(*ptr, v3);
      ptr[11] = 0;
    }
    CFAllocatorRef v4 = ptr[2];
    if (v4) {
      CFRelease(v4);
    }
    CFAllocatorRef v5 = ptr[3];
    if (v5) {
      CFRelease(v5);
    }
    CFAllocatorRef v6 = ptr[4];
    if (v6) {
      CFRelease(v6);
    }
    CFAllocatorDeallocate(v2, ptr);
    if (v2)
    {
      CFRelease(v2);
    }
  }
}

void TrackFragmentBuilderSampleTableRelease(uint64_t a1)
{
  if (a1)
  {
    CFAllocatorRef v2 = *(void **)(a1 + 88);
    if (v2)
    {
      tfbTrackFragmentRelease(*(CFAllocatorRef *)a1, v2);
      *(void *)(a1 + 88) = 0;
    }
  }
}

uint64_t TrackFragmentBuilderGetMinDecodeToDisplay(uint64_t a1, _DWORD *a2)
{
  if (!a1 || !a2) {
    return FigSignalErrorAt();
  }
  *a2 = *(_DWORD *)(a1 + 84);
  return 0;
}

uint64_t TrackFragmentBuilderGetMaxDecodeToDisplay(uint64_t a1, _DWORD *a2)
{
  if (!a1 || !a2) {
    return FigSignalErrorAt();
  }
  *a2 = *(_DWORD *)(a1 + 80);
  return 0;
}

uint64_t TrackFragmentBuilderGetTrackFragmentHeaderSampleDescriptionIndex(uint64_t a1, _DWORD *a2, unsigned char *a3)
{
  if (a1 && a2 && a3)
  {
    uint64_t v5 = *(void *)(a1 + 88);
    if (v5)
    {
      char Int32IfPresent = FigCFDictionaryGetInt32IfPresent();
      LODWORD(v5) = 0;
    }
    else
    {
      char Int32IfPresent = 0;
    }
    *a2 = v5;
    *a3 = Int32IfPresent;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t TrackFragmentBuilderGetTrackFragmentHeaderDefaultSampleDuration(uint64_t a1, _DWORD *a2, unsigned char *a3)
{
  if (a1 && a2 && a3)
  {
    uint64_t v5 = *(void *)(a1 + 88);
    if (v5)
    {
      char Int32IfPresent = FigCFDictionaryGetInt32IfPresent();
      LODWORD(v5) = 0;
    }
    else
    {
      char Int32IfPresent = 0;
    }
    *a2 = v5;
    *a3 = Int32IfPresent;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t TrackFragmentBuilderGetTrackFragmentHeaderDefaultSampleSize(uint64_t a1, _DWORD *a2, unsigned char *a3)
{
  if (a1 && a2 && a3)
  {
    uint64_t v5 = *(void *)(a1 + 88);
    if (v5)
    {
      char Int32IfPresent = FigCFDictionaryGetInt32IfPresent();
      LODWORD(v5) = 0;
    }
    else
    {
      char Int32IfPresent = 0;
    }
    *a2 = v5;
    *a3 = Int32IfPresent;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t TrackFragmentBuilderGetTrackFragmentHeaderDefaultSampleFlags(uint64_t a1, _DWORD *a2, unsigned char *a3)
{
  if (a1 && a2 && a3)
  {
    uint64_t v5 = *(void *)(a1 + 88);
    if (v5)
    {
      char Int32IfPresent = FigCFDictionaryGetInt32IfPresent();
      LODWORD(v5) = 0;
    }
    else
    {
      char Int32IfPresent = 0;
    }
    *a2 = v5;
    *a3 = Int32IfPresent;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t TrackFragmentBuilderGetSampleAuxInformation(uint64_t a1, unsigned char *a2, _DWORD *a3, void *a4, void *a5, unsigned char *a6)
{
  if (a1)
  {
    uint64_t v12 = *(void *)(a1 + 88);
    if (v12)
    {
      uint64_t v13 = *(void *)(v12 + 48);
      if (v13 && CMBlockBufferGetDataLength(*(CMBlockBufferRef *)(v13 + 24)))
      {
        LOBYTE(v12) = *(unsigned char *)v13;
        int v14 = *(_DWORD *)(v13 + 4);
        uint64_t v15 = *(void *)(v13 + 8);
        uint64_t v16 = *(void *)(v13 + 24);
        char v17 = *(unsigned char *)(v13 + 41);
LABEL_8:
        *a2 = v12;
        *a3 = v14;
        *a4 = v15;
        *a5 = v16;
        *a6 = v17;
        return 0;
      }
      LOBYTE(v12) = 0;
    }
    int v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    char v17 = 0;
    goto LABEL_8;
  }
  return FigSignalErrorAt();
}

uint64_t TrackFragmentBuilderCopySampleGroupDescriptionArrays(uint64_t a1, void *a2)
{
  if (a1 && a2)
  {
    uint64_t v3 = *(void *)(a1 + 88);
    if (v3)
    {
      CFTypeRef v4 = *(CFTypeRef *)(v3 + 64);
      if (v4) {
        CFTypeRef v4 = CFRetain(v4);
      }
    }
    else
    {
      CFTypeRef v4 = 0;
    }
    *a2 = v4;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t TrackFragmentBuilderCopySampleGroupArray(uint64_t a1, CFArrayRef *a2)
{
  if (a1 && a2)
  {
    uint64_t v3 = *(void *)(a1 + 88);
    if (v3 && (uint64_t v4 = *(void *)(v3 + 56)) != 0) {
      CFArrayRef v5 = MovieSampleGroupCollectionCopySampleGroupArray(*(const __CFAllocator **)a1, v4);
    }
    else {
      CFArrayRef v5 = 0;
    }
    *a2 = v5;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t TrackFragmentBuilderSetInitialBaseMediaDecodeTimeValue(uint64_t a1, uint64_t a2)
{
  uint64_t valuePtr = a2;
  if (a1)
  {
    CFNumberRef v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt64Type, &valuePtr);
    if (v3)
    {
      CFNumberRef v4 = v3;
      CFArrayRef v5 = *(const void **)(a1 + 24);
      *(void *)(a1 + 24) = v3;
      CFRetain(v3);
      if (v5) {
        CFRelease(v5);
      }
      CFRelease(v4);
      return 0;
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t TrackFragmentBuilderGetTrackFragmentBaseMediaDecodeTimeValue(void *a1, void *a2, char *a3)
{
  if (a1 && a2 && a3)
  {
    uint64_t v6 = a1[11];
    if (v6)
    {
      CFNumberRef v7 = (const __CFNumber *)a1[3];
      if (v7)
      {
        uint64_t valuePtr = 0;
        CFNumberGetValue(v7, kCFNumberSInt64Type, &valuePtr);
        uint64_t v8 = *(void *)(v6 + 16) - a1[5] + valuePtr;
      }
      else
      {
        uint64_t v8 = *(void *)(v6 + 16);
      }
      char v9 = 1;
    }
    else
    {
      uint64_t v8 = 0;
      char v9 = 0;
    }
    *a2 = v8;
    *a3 = v9;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t TrackFragmentBuilderGetTrackFragmentLowestDisplayStartTimeValue(void *a1, void *a2)
{
  if (a1 && a2)
  {
    uint64_t v4 = a1[11];
    if (v4)
    {
      CFNumberRef v5 = (const __CFNumber *)a1[3];
      if (v5)
      {
        uint64_t valuePtr = 0;
        CFNumberGetValue(v5, kCFNumberSInt64Type, &valuePtr);
        uint64_t v6 = *(void *)(v4 + 32) - a1[5] + valuePtr;
      }
      else
      {
        uint64_t v6 = *(void *)(v4 + 32);
      }
    }
    else
    {
      uint64_t v6 = 0;
    }
    *a2 = v6;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t TrackFragmentBuilderGetTrackFragmentMediaDecodeDuration(uint64_t a1, void *a2)
{
  if (!a1 || !a2) {
    return FigSignalErrorAt();
  }
  uint64_t v2 = *(void *)(a1 + 88);
  if (v2) {
    uint64_t v2 = *(void *)(v2 + 24);
  }
  *a2 = v2;
  return 0;
}

uint64_t TrackFragmentBuilderNumTrackRuns(uint64_t a1, _DWORD *a2)
{
  if (a1 && a2)
  {
    uint64_t v3 = *(void *)(a1 + 88);
    if (v3)
    {
      CFArrayRef v4 = *(const __CFArray **)(v3 + 40);
      if (v4) {
        LODWORD(v4) = CFArrayGetCount(v4);
      }
    }
    else
    {
      LODWORD(v4) = 0;
    }
    *a2 = v4;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t TrackFragmentBuilderNumSamplesAtTrackRunIndex(uint64_t a1, CFIndex a2, _DWORD *a3)
{
  CFNumberRef v5 = 0;
  if (a1 && a3)
  {
    uint64_t result = tfbGetTrackRunAtIndex(a1, a2, (const void **)&v5);
    if (!result) {
      *a3 = *v5;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t tfbGetTrackRunAtIndex(uint64_t a1, CFIndex idx, const void **a3)
{
  int v4 = idx;
  uint64_t v6 = *(void *)(a1 + 88);
  if (v6)
  {
    CFArrayRef v7 = *(const __CFArray **)(v6 + 40);
    if (v7) {
      LODWORD(v7) = CFArrayGetCount(v7);
    }
  }
  else
  {
    LODWORD(v7) = 0;
  }
  if (v4 < 0 || (int)v7 <= v4)
  {
    return FigSignalErrorAt();
  }
  else
  {
    *a3 = CFArrayGetValueAtIndex(*(CFArrayRef *)(*(void *)(a1 + 88) + 40), v4);
    return 0;
  }
}

uint64_t TrackFragmentBuilderGetDataOffsetAtTrackRunIndex(uint64_t a1, CFIndex a2, void *a3)
{
  CFNumberRef v5 = 0;
  if (a1 && a3)
  {
    uint64_t result = tfbGetTrackRunAtIndex(a1, a2, (const void **)&v5);
    if (!result) {
      *a3 = v5[1];
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t TrackFragmentBuilderGetFirstSampleFlagsAtTrackRunIndex(uint64_t a1, CFIndex a2, _DWORD *a3, unsigned char *a4)
{
  uint64_t v8 = 0;
  if (a1 && a3 && a4)
  {
    uint64_t result = tfbGetTrackRunAtIndex(a1, a2, (const void **)&v8);
    if (!result)
    {
      CFArrayRef v7 = v8;
      *a3 = v8[5];
      *a4 = *((unsigned char *)v7 + 16);
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t TrackFragmentBuilderGetSampleDurationArrayBbufAtTrackRunIndex(uint64_t a1, CFIndex a2, _DWORD *a3, void *a4)
{
  if (a1 && a3 && a4)
  {
    tfbGetSampleValueArrayBbufAtTrackRunIndex(a1, a2, @"SampleDurationKey", a3, a4);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t tfbGetSampleValueArrayBbufAtTrackRunIndex(uint64_t a1, CFIndex a2, const void *a3, _DWORD *a4, void *a5)
{
  uint64_t v11 = 0;
  uint64_t result = tfbGetTrackRunAtIndex(a1, a2, (const void **)&v11);
  if (!result)
  {
    uint64_t result = (uint64_t)CFDictionaryGetValue(v11[3], a3);
    if (result)
    {
      int v9 = *(_DWORD *)(result + 8);
      uint64_t v10 = *(void *)(result + 16);
    }
    else
    {
      int v9 = 0;
      uint64_t v10 = 0;
    }
    *a4 = v9;
    *a5 = v10;
  }
  return result;
}

uint64_t TrackFragmentBuilderGetSampleSizeArrayBbufAtTrackRunIndex(uint64_t a1, CFIndex a2, _DWORD *a3, void *a4)
{
  if (a1 && a3 && a4)
  {
    tfbGetSampleValueArrayBbufAtTrackRunIndex(a1, a2, @"SampleSizeKey", a3, a4);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t TrackFragmentBuilderGetSampleFlagsArrayBbufAtTrackRunIndex(uint64_t a1, CFIndex a2, _DWORD *a3, void *a4)
{
  if (a1 && a3 && a4)
  {
    tfbGetSampleValueArrayBbufAtTrackRunIndex(a1, a2, @"SampleFlagsKey", a3, a4);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t TrackFragmentBuilderGetSampleCompositionTimeOffsetArrayBbufAtTrackRunIndex(uint64_t a1, CFIndex a2, _DWORD *a3, void *a4)
{
  if (a1 && a3 && a4)
  {
    tfbGetSampleValueArrayBbufAtTrackRunIndex(a1, a2, @"SampleCompositionTimeOffsetKey", a3, a4);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t TrackFragmentBuilderAppendSampleInformation(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5, unint64_t a6, void *a7, unint64_t a8, uint64_t a9, const __CFArray *a10, uint64_t a11, uint64_t *a12, void *a13)
{
  if (a1 && a7 && a9)
  {
    if (a2)
    {
      CFAllocatorRef v15 = *(const __CFAllocator **)a1;
      if (!*(void *)(a1 + 88))
      {
        char v17 = CFAllocatorAllocate(*(CFAllocatorRef *)a1, 72, 0);
        uint64_t v18 = v17;
        if (!v17) {
          goto LABEL_172;
        }
        _OWORD v17[8] = 0;
        *((_OWORD *)v17 + 2) = 0u;
        *((_OWORD *)v17 + 3) = 0u;
        *(_OWORD *)char v17 = 0u;
        *((_OWORD *)v17 + 1) = 0u;
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v15, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        v18[1] = Mutable;
        if (!Mutable) {
          goto LABEL_172;
        }
        CFMutableArrayRef v20 = CFArrayCreateMutable(v15, 0, 0);
        v18[5] = v20;
        if (v20)
        {
          v18[2] = *(void *)(a1 + 48) + *(void *)(a1 + 40);
          v18[4] = 0x7FFFFFFFFFFFFFFFLL;
        }
        else
        {
LABEL_172:
          CurrentTrackRuuint64_t n = FigSignalErrorAt();
          tfbTrackFragmentRelease(v15, v18);
          uint64_t v18 = 0;
          if (CurrentTrackRun) {
            return CurrentTrackRun;
          }
        }
        *(void *)(a1 + 88) = v18;
        uint64_t AudioRollRecoveryValueFromSampleBufferAttachment = tfbSetTrackFragmentHeaderDefaultValueIfNeeded(a1, @"SampleDescriptionIndexKey", a4);
        if (AudioRollRecoveryValueFromSampleBufferAttachment) {
          return AudioRollRecoveryValueFromSampleBufferAttachment;
        }
        CFAllocatorRef v15 = *(const __CFAllocator **)a1;
      }
      uint64_t v22 = CFAllocatorAllocate(v15, 32, 0);
      CFDictionaryRef v23 = v22;
      if (v22
        && (*uint64_t v22 = 0u,
            v22[1] = 0u,
            CFMutableDictionaryRef v24 = CFDictionaryCreateMutable(v15, 4, MEMORY[0x1E4F1D530], 0),
            (v23[3] = v24) != 0))
      {
        v23[1] = a3;
        CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(a1 + 88) + 40), v23);
        tfbTrackRunRelease(v15, 0);
      }
      else
      {
        CurrentTrackRuuint64_t n = FigSignalErrorAt();
        tfbTrackRunRelease(v15, (CFDictionaryRef *)v23);
        if (CurrentTrackRun) {
          return CurrentTrackRun;
        }
      }
    }
    uint64_t AudioRollRecoveryValueFromSampleBufferAttachment = tfbAddSampleToSampleTable((const __CFAllocator **)a1, a5, a6, (uint64_t)a7, @"SampleDurationKey", (uint64_t (*)(unint64_t, uint64_t, uint64_t))tfbGetSampleDurationAtIndexFunc);
    if (AudioRollRecoveryValueFromSampleBufferAttachment) {
      return AudioRollRecoveryValueFromSampleBufferAttachment;
    }
    uint64_t AudioRollRecoveryValueFromSampleBufferAttachment = tfbAddSampleToSampleTable((const __CFAllocator **)a1, a5, a8, a9, @"SampleSizeKey", (uint64_t (*)(unint64_t, uint64_t, uint64_t))tfbGetSampleSizeAtIndexFunc);
    if (AudioRollRecoveryValueFromSampleBufferAttachment) {
      return AudioRollRecoveryValueFromSampleBufferAttachment;
    }
    unint64_t v25 = a10 ? CFArrayGetCount(a10) : 0;
    uint64_t AudioRollRecoveryValueFromSampleBufferAttachment = tfbAddSampleToSampleTable((const __CFAllocator **)a1, a5, v25, (uint64_t)a10, @"SampleFlagsKey", (uint64_t (*)(unint64_t, uint64_t, uint64_t))tfbGetSampleFlagsAtIndexFunc);
    if (AudioRollRecoveryValueFromSampleBufferAttachment) {
      return AudioRollRecoveryValueFromSampleBufferAttachment;
    }
    int v26 = *(_DWORD *)(a1 + 8);
    if (v26 == 1635088502 || v26 == 1986618469 || v26 == 1885954932)
    {
      uint64_t AudioRollRecoveryValueFromSampleBufferAttachment = tfbAddSampleToSampleTable((const __CFAllocator **)a1, a5, a6, (uint64_t)a7, @"SampleCompositionTimeOffsetKey", (uint64_t (*)(unint64_t, uint64_t, uint64_t))tfbGetSampleCompositionTimeOffsetAtIndexFunc);
      if (AudioRollRecoveryValueFromSampleBufferAttachment) {
        return AudioRollRecoveryValueFromSampleBufferAttachment;
      }
    }
    if (a10)
    {
      CFIndex Count = CFArrayGetCount(a10);
      if (Count >= 1)
      {
        CFIndex v27 = 0;
        key = (void *)*MEMORY[0x1E4F1F198];
        long long v109 = (void *)*MEMORY[0x1E4F1F1A0];
        while (1)
        {
          CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a10, v27);
          CFDataRef Value = (const __CFData *)CFDictionaryGetValue(ValueAtIndex, key);
          CFDataRef v30 = (const __CFData *)CFDictionaryGetValue(ValueAtIndex, v109);
          if (!((unint64_t)Value | (unint64_t)v30)) {
            goto LABEL_59;
          }
          CFDataRef theData = v30;
          CFAllocatorRef v31 = *(const __CFAllocator **)a1;
          uint64_t v32 = *(void *)(a1 + 88);
          CMTimeEpoch v33 = *(unsigned __int8 **)(v32 + 48);
          if (!v33) {
            break;
          }
LABEL_34:
          if (*((_DWORD *)v33 + 1) != *(_DWORD *)v32) {
            goto LABEL_70;
          }
          CFAllocatorRef v112 = v31;
          if (Value)
          {
            CFIndex Length = CFDataGetLength(Value);
            CFDataGetBytePtr(Value);
            uint64_t AudioRollRecoveryValueFromSampleBufferAttachment = CMByteStreamAppend();
            CFDataRef v38 = theData;
            if (AudioRollRecoveryValueFromSampleBufferAttachment) {
              return AudioRollRecoveryValueFromSampleBufferAttachment;
            }
            if (Length) {
              goto LABEL_70;
            }
            if (!theData) {
              goto LABEL_44;
            }
          }
          else
          {
            LOBYTE(Length) = 0;
            CFDataRef v38 = theData;
            if (!theData)
            {
LABEL_44:
              if (*((_DWORD *)v33 + 1))
              {
                if (v33[40] == (Value != 0) && v33[41] == (v38 != 0))
                {
                  if (*v33 != Length && !*((void *)v33 + 2))
                  {
                    CFIndex v40 = v27;
                    CFTypeRef v116 = 0;
                    *(void *)&v117.byte0 = 0;
                    uint64_t v115 = 0;
                    uint64_t v41 = tfbCreateBlockBufferByteStream(v112, (CMBlockBufferRef *)&v117, &v116);
                    if (v41)
                    {
                      CurrentTrackRuuint64_t n = v41;
                      CFTypeRef v42 = v116;
                      if (v116) {
                        goto LABEL_65;
                      }
                      goto LABEL_66;
                    }
                    CFTypeRef v42 = v116;
                    if (*((_DWORD *)v33 + 1))
                    {
                      uint64_t v43 = CMByteStreamAppend();
                      if (!v43) {
                        uint64_t v43 = FigSignalErrorAt();
                      }
                      CurrentTrackRuuint64_t n = v43;
                      if (v42) {
LABEL_65:
                      }
                        CFRelease(v42);
LABEL_66:
                      if (*(void *)&v117.byte0) {
                        CFRelease(*(CFTypeRef *)&v117.byte0);
                      }
                      CFIndex v27 = v40;
                      if (CurrentTrackRun) {
                        return CurrentTrackRun;
                      }
                    }
                    else
                    {
                      unsigned __int8 *v33 = 0;
                      *((void *)v33 + 1) = *(void *)&v117.byte0;
                      *((void *)v33 + 2) = v42;
                      CFIndex v27 = v40;
                    }
                  }
LABEL_55:
                  if (!*((void *)v33 + 2))
                  {
                    ++*((_DWORD *)v33 + 1);
                    goto LABEL_59;
                  }
                  uint64_t AudioRollRecoveryValueFromSampleBufferAttachment = CMByteStreamAppend();
                  if (AudioRollRecoveryValueFromSampleBufferAttachment) {
                    return AudioRollRecoveryValueFromSampleBufferAttachment;
                  }
                }
LABEL_70:
                uint64_t v39 = FigSignalErrorAt();
                goto LABEL_71;
              }
              v33[40] = Value != 0;
              v33[41] = v38 != 0;
              unsigned __int8 *v33 = Length;
              goto LABEL_55;
            }
          }
          if ((unint64_t)CFDataGetLength(v38) >= 0x80000) {
            goto LABEL_70;
          }
          uint64_t v39 = CMByteStreamAppend();
          if (!v39) {
            goto LABEL_70;
          }
LABEL_71:
          CurrentTrackRuuint64_t n = v39;
          if (v39) {
            return CurrentTrackRun;
          }
LABEL_59:
          if (++v27 == Count) {
            goto LABEL_81;
          }
        }
        CFTypeRef v116 = 0;
        *(void *)&v117.byte0 = 0;
        uint64_t v34 = tfbCreateBlockBufferByteStream(v31, (CMBlockBufferRef *)&v117, &v116);
        if (!v34)
        {
          unsigned int v35 = (unsigned __int8 *)CFAllocatorAllocate(v31, 48, 0);
          if (v35)
          {
            CMTimeEpoch v33 = v35;
            *((_OWORD *)v35 + 1) = 0u;
            *((_OWORD *)v35 + 2) = 0u;
            *(_OWORD *)unsigned int v35 = 0u;
            CFTypeRef v36 = v116;
            *((void *)v35 + 3) = *(void *)&v117.byte0;
            *((void *)v35 + 4) = v36;
LABEL_33:
            *(void *)(v32 + 48) = v33;
            goto LABEL_34;
          }
          uint64_t v34 = FigSignalErrorAt();
        }
        CurrentTrackRuuint64_t n = v34;
        if (v116) {
          CFRelease(v116);
        }
        if (*(void *)&v117.byte0) {
          CFRelease(*(CFTypeRef *)&v117.byte0);
        }
        if (CurrentTrackRun) {
          return CurrentTrackRun;
        }
        CMTimeEpoch v33 = 0;
        goto LABEL_33;
      }
    }
LABEL_81:
    int v45 = *(_DWORD *)(a1 + 8);
    if (v45 > 1936684397)
    {
      uint64_t v47 = a6;
      uint64_t v46 = a5;
      if (v45 != 1986618469)
      {
        if (v45 != 1936684398) {
          goto LABEL_131;
        }
        *(_WORD *)&v117.byte0 = 0;
        LOBYTE(v116) = 0;
        LOBYTE(v115) = 0;
        if (a11)
        {
          uint64_t AudioRollRecoveryValueFromSampleBufferAttachment = FigMovieGetAudioRollRecoveryValueFromSampleBufferAttachment(a11, &v117, (BOOL *)&v116, &v115);
          if (AudioRollRecoveryValueFromSampleBufferAttachment) {
            return AudioRollRecoveryValueFromSampleBufferAttachment;
          }
          unsigned int v48 = *(unsigned __int16 *)&v117.byte0;
          if ((_BYTE)v116) {
            BOOL v49 = v115 == 0;
          }
          else {
            BOOL v49 = 1;
          }
          int v50 = !v49;
        }
        else
        {
          int v50 = 0;
          unsigned int v48 = 0;
        }
        *(_WORD *)&v117.byte0 = __rev16(v48);
        unint64_t Basic = MovieSampleGroupTypeSpecMakeBasic(1919904876);
        uint64_t AudioRollRecoveryValueFromSampleBufferAttachment = tfbAddSampleGroupForGroupType(a1, Basic, v74, 0, a5, v50, 2uLL, &v117);
        if (!AudioRollRecoveryValueFromSampleBufferAttachment)
        {
          if (a10)
          {
            if (a5 >= 1)
            {
              CFIndex v75 = 0;
              while (1)
              {
                *(_WORD *)&v117.byte0 = 0;
                LOBYTE(v116) = 0;
                uint64_t v76 = CFArrayGetValueAtIndex(a10, v75);
                uint64_t AudioRollRecoveryValueFromSampleBufferAttachment = FigMovieGetAudioIndependentSampleDecoderRefreshCountFromSampleAttachment((uint64_t)v76, &v117, &v116);
                if (AudioRollRecoveryValueFromSampleBufferAttachment) {
                  return AudioRollRecoveryValueFromSampleBufferAttachment;
                }
                *(_WORD *)&v117.byte0 = bswap32(*(unsigned __int16 *)&v117.byte0) >> 16;
                unint64_t v77 = MovieSampleGroupTypeSpecMakeBasic(1886547820);
                uint64_t AudioRollRecoveryValueFromSampleBufferAttachment = tfbAddSampleGroupForGroupType(a1, v77, v78, 0, 1u, v116, 2uLL, &v117);
                if (AudioRollRecoveryValueFromSampleBufferAttachment) {
                  return AudioRollRecoveryValueFromSampleBufferAttachment;
                }
                if (a5 == ++v75)
                {
                  CFIndex v79 = 0;
                  while (1)
                  {
                    *(void *)&v117.byte0 = 0;
                    *(void *)&v117.byte8 = 0;
                    int SeamUUIDBytesFromSampleAttachmentArray = FigMovieGetSeamUUIDBytesFromSampleAttachmentArray(a10, v79, &v117);
                    unint64_t v81 = MovieSampleGroupTypeSpecMakeBasic(1936023917);
                    uint64_t AudioRollRecoveryValueFromSampleBufferAttachment = tfbAddSampleGroupForGroupType(a1, v81, v82, 0, 1u, SeamUUIDBytesFromSampleAttachmentArray, 0x10uLL, &v117);
                    if (AudioRollRecoveryValueFromSampleBufferAttachment) {
                      return AudioRollRecoveryValueFromSampleBufferAttachment;
                    }
                    if (a5 == ++v79) {
                      goto LABEL_131;
                    }
                  }
                }
              }
            }
            goto LABEL_131;
          }
          unint64_t v83 = MovieSampleGroupTypeSpecMakeBasic(1886547820);
          uint64_t AudioRollRecoveryValueFromSampleBufferAttachment = tfbAddSampleGroupForGroupType(a1, v83, v84, 0, a5, 0, 0, 0);
          if (!AudioRollRecoveryValueFromSampleBufferAttachment)
          {
            int v70 = 0;
            uint64_t v72 = 1936023917;
LABEL_130:
            unint64_t v85 = MovieSampleGroupTypeSpecMakeBasic(v72);
            uint64_t AudioRollRecoveryValueFromSampleBufferAttachment = tfbAddSampleGroupForGroupType(a1, v85, v86, v70, v46, 0, 0, 0);
            if (!AudioRollRecoveryValueFromSampleBufferAttachment) {
              goto LABEL_131;
            }
          }
        }
        return AudioRollRecoveryValueFromSampleBufferAttachment;
      }
    }
    else
    {
      uint64_t v47 = a6;
      uint64_t v46 = a5;
      if (v45 != 1635088502 && v45 != 1885954932) {
        goto LABEL_131;
      }
    }
    if (a10)
    {
      if (v46 >= 1)
      {
        CFIndex v51 = 0;
        while (1)
        {
          v117.byte0 = 0;
          LOBYTE(v116) = 0;
          uint64_t v52 = CFArrayGetValueAtIndex(a10, v51);
          uint64_t AudioRollRecoveryValueFromSampleBufferAttachment = FigMovieGetVideoSyncSampleEntryFromSampleAttachment((uint64_t)v52, &v117, (BOOL *)&v116);
          if (AudioRollRecoveryValueFromSampleBufferAttachment) {
            return AudioRollRecoveryValueFromSampleBufferAttachment;
          }
          unint64_t v53 = MovieSampleGroupTypeSpecMakeBasic(1937337955);
          uint64_t AudioRollRecoveryValueFromSampleBufferAttachment = tfbAddSampleGroupForGroupType(a1, v53, v54, 0, 1u, v116, 1uLL, &v117);
          if (AudioRollRecoveryValueFromSampleBufferAttachment) {
            return AudioRollRecoveryValueFromSampleBufferAttachment;
          }
          if (v46 == ++v51)
          {
            CFIndex v55 = 0;
            while (1)
            {
              *(void *)&v117.byte0 = 0;
              *(void *)&v117.byte8 = 0;
              int v118 = 0;
              LOBYTE(v116) = 0;
              CFDictionaryRef v56 = (const __CFDictionary *)CFArrayGetValueAtIndex(a10, v55);
              uint64_t AudioRollRecoveryValueFromSampleBufferAttachment = FigMovieGetVideoTemporalLayerEntryFromSampleAttachment(v56, (uint64_t)&v117, (char *)&v116);
              if (AudioRollRecoveryValueFromSampleBufferAttachment) {
                return AudioRollRecoveryValueFromSampleBufferAttachment;
              }
              unint64_t v57 = MovieSampleGroupTypeSpecMakeBasic(1953719148);
              uint64_t AudioRollRecoveryValueFromSampleBufferAttachment = tfbAddSampleGroupForGroupType(a1, v57, v58, 1, 1u, v116, 0x14uLL, &v117);
              if (AudioRollRecoveryValueFromSampleBufferAttachment) {
                return AudioRollRecoveryValueFromSampleBufferAttachment;
              }
              if (v46 == ++v55)
              {
                CFIndex v59 = 0;
                while (1)
                {
                  v117.byte0 = 0;
                  CFArrayGetValueAtIndex(a10, v59);
                  FigCFDictionaryGetBooleanIfPresent();
                  unint64_t v60 = MovieSampleGroupTypeSpecMakeBasic(1953718643);
                  uint64_t AudioRollRecoveryValueFromSampleBufferAttachment = tfbAddSampleGroupForGroupType(a1, v60, v61, 1, 1u, v117.byte0, 0, 0);
                  if (AudioRollRecoveryValueFromSampleBufferAttachment) {
                    return AudioRollRecoveryValueFromSampleBufferAttachment;
                  }
                  if (v46 == ++v59)
                  {
                    CFIndex v62 = 0;
                    while (1)
                    {
                      v117.byte0 = 0;
                      CFArrayGetValueAtIndex(a10, v62);
                      FigCFDictionaryGetBooleanIfPresent();
                      unint64_t v63 = MovieSampleGroupTypeSpecMakeBasic(1937011553);
                      uint64_t AudioRollRecoveryValueFromSampleBufferAttachment = tfbAddSampleGroupForGroupType(a1, v63, v64, 1, 1u, v117.byte0, 0, 0);
                      if (AudioRollRecoveryValueFromSampleBufferAttachment) {
                        return AudioRollRecoveryValueFromSampleBufferAttachment;
                      }
                      if (v46 == ++v62) {
                        goto LABEL_131;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
LABEL_131:
      uint64_t v87 = *(void *)(a1 + 48);
      uint64_t v88 = v87 + *(void *)(a1 + 40);
      if (v47 == 1)
      {
        uint64_t v89 = a7[3] - a7[6];
        uint64_t v90 = v89 + v88;
        uint64_t v91 = v89 + v88 + *a7 * (v46 - 1);
        uint64_t v92 = *a7 * v46;
        unint64_t v93 = v91 + *a7;
        LODWORD(v94) = v89;
      }
      else if (v47 < 1)
      {
        uint64_t v92 = 0;
        uint64_t v90 = 0x7FFFFFFFFFFFFFFFLL;
        unint64_t v93 = 0x8000000000000000;
        LODWORD(v94) = 0x80000000;
        LODWORD(v89) = 0x7FFFFFFF;
        uint64_t v91 = 0x8000000000000000;
      }
      else
      {
        uint64_t v92 = 0;
        int v95 = a7 + 3;
        LODWORD(v94) = 0x80000000;
        uint64_t v91 = 0x8000000000000000;
        uint64_t v90 = 0x7FFFFFFFFFFFFFFFLL;
        LODWORD(v89) = 0x7FFFFFFF;
        unint64_t v93 = 0x8000000000000000;
        uint64_t v96 = v87 + *(void *)(a1 + 40);
        do
        {
          uint64_t v97 = *(v95 - 3);
          uint64_t v98 = *v95 - v95[3];
          uint64_t v99 = v98 + v96;
          v96 += v97;
          v92 += v97;
          if (v99 < v90) {
            uint64_t v90 = v99;
          }
          unint64_t v100 = v99 + v97;
          if (v91 < v99) {
            unint64_t v93 = v100;
          }
          if (v91 <= v99) {
            uint64_t v91 = v99;
          }
          if (v98 < (int)v89) {
            uint64_t v89 = *v95 - v95[3];
          }
          if (v98 > (int)v94) {
            uint64_t v94 = *v95 - v95[3];
          }
          v95 += 9;
          --v47;
        }
        while (v47);
      }
      uint64_t v101 = *(void *)(a1 + 56);
      if (v90 < v101) {
        uint64_t v101 = v90;
      }
      *(void *)(a1 + 56) = v101;
      uint64_t v102 = *(void *)(a1 + 88);
      uint64_t v103 = *(void *)(v102 + 32);
      if (v90 < v103) {
        uint64_t v103 = v90;
      }
      *(void *)(v102 + 32) = v103;
      if (*(void *)(a1 + 64) < v91)
      {
        *(void *)(a1 + 64) = v91;
        *(void *)(a1 + 72) = v93;
      }
      int v104 = *(_DWORD *)(a1 + 84);
      if ((int)v89 < v104) {
        int v104 = v89;
      }
      if ((int)v94 <= *(_DWORD *)(a1 + 80)) {
        LODWORD(v94) = *(_DWORD *)(a1 + 80);
      }
      *(_DWORD *)(a1 + 80) = v94;
      *(_DWORD *)(a1 + 84) = v104;
      *(void *)(a1 + 48) = v92 + v87;
      *(void *)(v102 + 24) += v92;
      if (a12) {
        *a12 = v90;
      }
      if (a13) {
        *a13 = v88;
      }
      *(void *)&v117.byte0 = 0;
      *(_DWORD *)v102 += v46;
      CurrentTrackRuuint64_t n = tfbGetCurrentTrackRun(a1, (const void **)&v117);
      if (!CurrentTrackRun) {
        **(_DWORD **)&v117.byte0 += v46;
      }
      return CurrentTrackRun;
    }
    unint64_t v65 = MovieSampleGroupTypeSpecMakeBasic(1937337955);
    uint64_t AudioRollRecoveryValueFromSampleBufferAttachment = tfbAddSampleGroupForGroupType(a1, v65, v66, 0, v46, 0, 0, 0);
    if (!AudioRollRecoveryValueFromSampleBufferAttachment)
    {
      unint64_t v67 = MovieSampleGroupTypeSpecMakeBasic(1953719148);
      uint64_t AudioRollRecoveryValueFromSampleBufferAttachment = tfbAddSampleGroupForGroupType(a1, v67, v68, 1, v46, 0, 0, 0);
      if (!AudioRollRecoveryValueFromSampleBufferAttachment)
      {
        unint64_t v69 = MovieSampleGroupTypeSpecMakeBasic(1953718643);
        int v70 = 1;
        uint64_t AudioRollRecoveryValueFromSampleBufferAttachment = tfbAddSampleGroupForGroupType(a1, v69, v71, 1, v46, 0, 0, 0);
        if (!AudioRollRecoveryValueFromSampleBufferAttachment)
        {
          uint64_t v72 = 1937011553;
          goto LABEL_130;
        }
      }
    }
    return AudioRollRecoveryValueFromSampleBufferAttachment;
  }

  return FigSignalErrorAt();
}

uint64_t tfbAddSampleToSampleTable(const __CFAllocator **a1, uint64_t a2, unint64_t a3, uint64_t a4, const void *a5, uint64_t (*a6)(unint64_t, uint64_t, uint64_t))
{
  CFAllocatorRef allocator = *a1;
  CFTypeRef cf = 0;
  int v45 = 0;
  uint64_t v43 = 0;
  CurrentTrackRuuint64_t n = tfbGetCurrentTrackRun((uint64_t)a1, (const void **)&v45);
  if (CurrentTrackRun) {
    goto LABEL_42;
  }
  CFAllocatorRef v13 = a1[11];
  if (v13)
  {
    CFArrayRef v14 = (const __CFArray *)*((void *)v13 + 5);
    if (v14)
    {
      if (CFArrayGetCount(v14) == 1 && !*(_DWORD *)v45)
      {
        int v15 = a6(a3, a4, 0);
        tfbSetTrackFragmentHeaderDefaultValueIfNeeded((uint64_t)a1, a5, v15);
      }
    }
  }
  if (FigCFEqual())
  {
    uint64_t v47 = 0;
    unsigned int v46 = 0;
    CurrentTrackRuuint64_t n = tfbGetCurrentTrackRun((uint64_t)a1, (const void **)&v47);
    if (CurrentTrackRun) {
      goto LABEL_42;
    }
    CFAllocatorRef v16 = a1[11];
    if (v16 && (CFArrayRef v17 = (const __CFArray *)*((void *)v16 + 5)) != 0 && CFArrayGetCount(v17) == 1)
    {
      uint64_t v18 = v47;
      uint64_t v19 = *v47;
      if (v19 <= 1 && v19 + a2 >= 2)
      {
        int v20 = a6(a3, a4, (1 - v19));
        CurrentTrackRuuint64_t n = tfbGetTrackFragmentGlobalDefaultValue((uint64_t)a1, @"SampleFlagsKey", &v46);
        if (!CurrentTrackRun)
        {
          unsigned int v21 = v46;
          if (v46 == v20) {
            goto LABEL_22;
          }
          tfbSetTrackFragmentHeaderDefaultValueIfNeeded((uint64_t)a1, @"SampleFlagsKey", v20);
LABEL_20:
          *((unsigned char *)v18 + 16) = 1;
          v18[5] = v21;
          goto LABEL_22;
        }
LABEL_42:
        uint64_t v23 = CurrentTrackRun;
        goto LABEL_46;
      }
    }
    else
    {
      uint64_t v18 = v47;
      if (*v47) {
        goto LABEL_22;
      }
      unsigned int v21 = a6(a3, a4, 0);
      TrackFragmentGlobalDefaultCFDataRef Value = tfbGetTrackFragmentGlobalDefaultValue((uint64_t)a1, @"SampleFlagsKey", &v46);
      uint64_t v23 = TrackFragmentGlobalDefaultValue;
      if (!TrackFragmentGlobalDefaultValue && v46 != v21) {
        goto LABEL_20;
      }
      if (TrackFragmentGlobalDefaultValue) {
        goto LABEL_46;
      }
    }
  }
LABEL_22:
  CFMutableDictionaryRef v24 = v45;
  CFDataRef Value = CFDictionaryGetValue(v45[3], a5);
  if (Value)
  {
LABEL_23:
    if (a2 < 1)
    {
LABEL_27:
      uint64_t v23 = 0;
      Value[2] += a2;
      goto LABEL_46;
    }
    uint64_t v26 = 0;
    while (1)
    {
      LODWORD(v47) = bswap32(a6(a3, a4, v26));
      CurrentTrackRuuint64_t n = CMByteStreamAppend();
      if (CurrentTrackRun) {
        goto LABEL_42;
      }
      if (a2 == ++v26) {
        goto LABEL_27;
      }
    }
  }
  LODWORD(v47) = 0;
  uint64_t v27 = tfbGetTrackFragmentGlobalDefaultValue((uint64_t)a1, (uint64_t)a5, &v47);
  if (v27) {
    goto LABEL_68;
  }
  if (!FigCFEqual())
  {
    unsigned int v31 = v47;
    if (a3 > 1 || v31 != a6(a3, a4, 0)) {
      goto LABEL_50;
    }
LABEL_45:
    uint64_t v23 = 0;
    goto LABEL_46;
  }
  uint64_t v28 = *(unsigned int *)v24;
  if (v28 + a2 <= 1) {
    unsigned int v29 = -1;
  }
  else {
    unsigned int v29 = 1 - v28;
  }
  if (v28 >= 2) {
    uint64_t v30 = 0;
  }
  else {
    uint64_t v30 = v29;
  }
  if ((v30 & 0x80000000) != 0) {
    goto LABEL_45;
  }
  unsigned int v31 = v47;
  if (!a3)
  {
    if (a6(0, a4, 0) != v31) {
      goto LABEL_50;
    }
    goto LABEL_45;
  }
  if (v30 >= a2) {
    goto LABEL_45;
  }
  while (a6(a3, a4, v30) == v31)
  {
    if (a2 == ++v30) {
      goto LABEL_45;
    }
  }
LABEL_50:
  uint64_t v27 = tfbCreateBlockBufferByteStream(allocator, (CMBlockBufferRef *)&cf, &v43);
  if (!v27)
  {
    if (*(_DWORD *)v24)
    {
      int v33 = 0;
      unsigned int v34 = bswap32(v31);
      unsigned int v35 = v43;
      while (1)
      {
        unsigned int v46 = 0;
        int v36 = FigCFEqual();
        unsigned int v37 = v34;
        if (!v33)
        {
          unsigned int v37 = v34;
          if (v36)
          {
            unsigned int v37 = v34;
            if (*((unsigned char *)v24 + 16)) {
              unsigned int v37 = bswap32(*((_DWORD *)v24 + 5));
            }
          }
        }
        unsigned int v46 = v37;
        uint64_t v38 = CMByteStreamAppend();
        if (v38) {
          break;
        }
        if (++v33 >= *(_DWORD *)v24) {
          goto LABEL_59;
        }
      }
      uint64_t v23 = v38;
      if (v35) {
        goto LABEL_63;
      }
      goto LABEL_46;
    }
LABEL_59:
    uint64_t v39 = CFAllocatorAllocate(allocator, 32, 0);
    if (v39)
    {
      CFDataRef Value = v39;
      _OWORD *v39 = 0u;
      v39[1] = 0u;
      if (a5) {
        CFTypeRef v40 = CFRetain(a5);
      }
      else {
        CFTypeRef v40 = 0;
      }
      *(void *)CFDataRef Value = v40;
      Value[2] = *(_DWORD *)v24;
      uint64_t v41 = v43;
      *((void *)Value + 2) = cf;
      *((void *)Value + 3) = v41;
      CFDictionaryAddValue(v24[3], a5, Value);
      CFTypeRef cf = 0;
      if (FigCFEqual()) {
        *((unsigned char *)v24 + 16) = 0;
      }
      goto LABEL_23;
    }
    uint64_t v27 = FigSignalErrorAt();
  }
LABEL_68:
  uint64_t v23 = v27;
  unsigned int v35 = v43;
  if (v43) {
LABEL_63:
  }
    CFRelease(v35);
LABEL_46:
  if (cf) {
    CFRelease(cf);
  }
  return v23;
}

uint64_t tfbGetSampleDurationAtIndexFunc(uint64_t a1, uint64_t a2, int a3)
{
  if (!a2) {
    goto LABEL_7;
  }
  if (a1 == 1) {
    return *(void *)a2;
  }
  if (a3 < a1) {
    return *(void *)(a2 + 72 * a3);
  }
LABEL_7:
  FigSignalErrorAt();
  return 0;
}

uint64_t tfbGetSampleSizeAtIndexFunc(uint64_t a1, uint64_t a2, int a3)
{
  if (!a2) {
    goto LABEL_7;
  }
  if (a1 == 1) {
    return *(void *)a2;
  }
  if (a3 < a1) {
    return *(void *)(a2 + 8 * a3);
  }
LABEL_7:
  FigSignalErrorAt();
  return 0;
}

const void *tfbGetSampleFlagsAtIndexFunc(uint64_t a1, CFArrayRef theArray, int a3)
{
  if (!theArray) {
    return 0;
  }
  if (a3 >= a1)
  {
    FigSignalErrorAt();
    return 0;
  }
  else
  {
    uint64_t result = CFArrayGetValueAtIndex(theArray, a3);
    if (result)
    {
      __int16 v4 = 0;
      FigMovieGetSampleDependencyFlagsFromSampleAttachments((uint64_t)result, (char *)&v4 + 1, &v4, 0);
      return (const void *)((HIBYTE(v4) << 20) | (((_BYTE)v4 != 0) << 16));
    }
  }
  return result;
}

uint64_t tfbGetSampleCompositionTimeOffsetAtIndexFunc(uint64_t a1, uint64_t a2, int a3)
{
  if (!a2) {
    goto LABEL_7;
  }
  if (a1 != 1)
  {
    if (a3 < a1)
    {
      a2 += 72 * a3;
      return (*(_DWORD *)(a2 + 24) - *(_DWORD *)(a2 + 48));
    }
LABEL_7:
    FigSignalErrorAt();
    return 0;
  }
  return (*(_DWORD *)(a2 + 24) - *(_DWORD *)(a2 + 48));
}

void tfbTrackFragmentRelease(CFAllocatorRef allocator, void *ptr)
{
  if (ptr)
  {
    CFArrayRef v4 = (const __CFArray *)*((void *)ptr + 5);
    if (v4)
    {
      CFIndex Count = CFArrayGetCount(v4);
      if (Count >= 1)
      {
        CFIndex v6 = Count;
        for (CFIndex i = 0; i != v6; ++i)
        {
          CFDictionaryRef ValueAtIndex = (CFDictionaryRef *)CFArrayGetValueAtIndex(*((CFArrayRef *)ptr + 5), i);
          tfbTrackRunRelease(allocator, ValueAtIndex);
        }
      }
    }
    int v9 = (void *)*((void *)ptr + 6);
    if (v9)
    {
      uint64_t v10 = (const void *)v9[1];
      if (v10)
      {
        CFRelease(v10);
        int v9 = (void *)*((void *)ptr + 6);
      }
      uint64_t v11 = (const void *)v9[2];
      if (v11)
      {
        CFRelease(v11);
        int v9 = (void *)*((void *)ptr + 6);
      }
      uint64_t v12 = (const void *)v9[3];
      if (v12)
      {
        CFRelease(v12);
        int v9 = (void *)*((void *)ptr + 6);
      }
      CFAllocatorRef v13 = (const void *)v9[4];
      if (v13)
      {
        CFRelease(v13);
        int v9 = (void *)*((void *)ptr + 6);
      }
      CFAllocatorDeallocate(allocator, v9);
    }
    CFArrayRef v14 = (const void *)*((void *)ptr + 5);
    if (v14) {
      CFRelease(v14);
    }
    int v15 = (const void *)*((void *)ptr + 1);
    if (v15) {
      CFRelease(v15);
    }
    CFAllocatorRef v16 = (const void *)*((void *)ptr + 7);
    if (v16) {
      CFRelease(v16);
    }
    CFArrayRef v17 = (const void *)*((void *)ptr + 8);
    if (v17) {
      CFRelease(v17);
    }
    CFAllocatorDeallocate(allocator, ptr);
  }
}

void trbCreateSampleGroupCollectionWithDescriptionArraysApplierFunction(uint64_t a1, const void *a2, CFTypeRef cf)
{
  CFAllocatorRef v6 = CFGetAllocator(cf);
  unint64_t Basic = MovieSampleGroupTypeSpecMakeBasic(a1);
  CFTypeRef cfa = 0;
  if (!MovieSampleGroupCreate(v6, Basic, v8, (uint64_t *)&cfa)
    && !MovieSampleGroupSetDescriptionArray((uint64_t)cfa, a2))
  {
    MovieSampleGroupCollectionAddSampleGroup((uint64_t)cf, (uint64_t)cfa);
  }
  if (cfa) {
    CFRelease(cfa);
  }
}

uint64_t tfbSetTrackFragmentHeaderDefaultValueIfNeeded(uint64_t a1, const void *a2, int a3)
{
  if (FigCFEqual()) {
    return 0;
  }
  CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(*(void *)(a1 + 88) + 8), a2);
  int Int32IfPresent = FigCFDictionaryGetInt32IfPresent();
  uint64_t result = 0;
  if (Int32IfPresent) {
    BOOL v8 = a3 == 0;
  }
  else {
    BOOL v8 = 0;
  }
  if (!v8)
  {
    if (*(void *)(a1 + 88)) {
      return FigCFDictionarySetInt32();
    }
    else {
      return FigSignalErrorAt();
    }
  }
  return result;
}

void tfbTrackRunRelease(const __CFAllocator *a1, CFDictionaryRef *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return;
  }
  CFIndex Count = CFDictionaryGetCount(a2[3]);
  memset(v11, 0, sizeof(v11));
  if (Count >= 5)
  {
    FigSignalErrorAt();
    CFDictionaryGetKeysAndValues(a2[3], 0, (const void **)v11);
    goto LABEL_5;
  }
  CFDictionaryGetKeysAndValues(a2[3], 0, (const void **)v11);
  if (Count >= 1)
  {
LABEL_5:
    CFNumberRef v5 = (const void ***)v11;
    do
    {
      CFAllocatorRef v6 = *v5;
      CFArrayRef v7 = **v5;
      if (v7) {
        CFRelease(v7);
      }
      BOOL v8 = v6[2];
      if (v8) {
        CFRelease(v8);
      }
      int v9 = v6[3];
      if (v9) {
        CFRelease(v9);
      }
      CFAllocatorDeallocate(a1, v6);
      ++v5;
      --Count;
    }
    while (Count);
  }
  CFDictionaryRef v10 = a2[3];
  if (v10) {
    CFRelease(v10);
  }
  CFAllocatorDeallocate(a1, a2);
}

uint64_t tfbGetCurrentTrackRun(uint64_t a1, const void **a2)
{
  uint64_t v4 = *(void *)(a1 + 88);
  if (v4 && (CFArrayRef v5 = *(const __CFArray **)(v4 + 40)) != 0) {
    CFIndex v6 = CFArrayGetCount(v5) - 1;
  }
  else {
    CFIndex v6 = 0xFFFFFFFFLL;
  }

  return tfbGetTrackRunAtIndex(a1, v6, a2);
}

uint64_t tfbGetTrackFragmentGlobalDefaultValue(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  if (*(void *)(a1 + 88))
  {
    if (!FigCFEqual() && !FigCFDictionaryGetInt32IfPresent()) {
      FigCFDictionaryGetInt32IfPresent();
    }
    *a3 = 0;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t tfbCreateBlockBufferByteStream(const __CFAllocator *a1, CMBlockBufferRef *a2, void *a3)
{
  CMBlockBufferRef blockBufferOut = 0;
  uint64_t v5 = CMBlockBufferCreateEmpty(a1, 0x10u, 0, &blockBufferOut);
  if (v5)
  {
    WritableForuint64_t BlockBuffer = v5;
  }
  else
  {
    WritableForuint64_t BlockBuffer = CMByteStreamCreateWritableForBlockBuffer();
    if (!WritableForBlockBuffer)
    {
      *a2 = blockBufferOut;
      *a3 = 0;
      return WritableForBlockBuffer;
    }
  }
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  return WritableForBlockBuffer;
}

uint64_t tfbAddSampleGroupForGroupType(uint64_t a1, unint64_t a2, unsigned int a3, int a4, unsigned int a5, int a6, size_t a7, const void *a8)
{
  uint64_t v13 = *(void *)(a1 + 88);
  CFTypeRef v15 = *(CFTypeRef *)(v13 + 56);
  if (v15) {
    CFTypeRef v15 = MovieSampleGroupCollectionLookupAndRetainSampleGroup((uint64_t)v15, a2, a3);
  }
  CFTypeRef v17 = 0;
  CFTypeRef cf = v15;
  CFTypeRef v18 = 0;
  if (a6 && !v15)
  {
    CFAllocatorRef v19 = *(const __CFAllocator **)a1;
    uint64_t v20 = *(void *)(a1 + 32);
    if (v20) {
      CFTypeRef v18 = MovieSampleGroupCollectionLookupAndRetainSampleGroup(v20, a2, a3);
    }
    else {
      CFTypeRef v18 = 0;
    }
    if (a4)
    {
      uint64_t v21 = MovieSampleGroupCreateCompactForFragment(v19, a2, a3, (uint64_t)v18, &cf);
      if (!v21)
      {
LABEL_10:
        CFDictionaryRef v22 = *(const __CFDictionary **)(*(void *)(a1 + 88) + 64);
        if (v22 && (CFDataRef Value = CFDictionaryGetValue(v22, (const void *)(int)a2)) != 0)
        {
          CFTypeRef v40 = CFRetain(Value);
          if (v40)
          {
LABEL_21:
            CFTypeRef v17 = v40;
            uint64_t appended = MovieSampleGroupSetDescriptionArray((uint64_t)cf, v40);
            if (appended) {
              goto LABEL_37;
            }
            CFTypeRef v29 = cf;
            uint64_t v30 = *(void *)(a1 + 88);
            uint64_t v33 = *(void *)(v30 + 56);
            uint64_t v32 = (uint64_t *)(v30 + 56);
            uint64_t v31 = v33;
            if (!v33)
            {
              uint64_t appended = MovieSampleGroupCollectionCreate(*(const __CFAllocator **)a1, v32);
              if (appended) {
                goto LABEL_37;
              }
              uint64_t v31 = *v32;
            }
            uint64_t appended = MovieSampleGroupCollectionAddSampleGroup(v31, (uint64_t)v29);
            if (appended) {
              goto LABEL_37;
            }
            if (*(_DWORD *)v13)
            {
              uint64_t appended = MovieSampleGroupAppendSamplesWithDescriptionIndex((uint64_t)cf, *(_DWORD *)v13, 0);
              if (appended) {
                goto LABEL_37;
              }
            }
            CFTypeRef v15 = cf;
            goto LABEL_29;
          }
        }
        else
        {
          CFTypeRef v40 = 0;
        }
        uint64_t v24 = MovieSampleGroupDescriptionArrayCreate(*(const __CFAllocator **)a1, a2, (uint64_t *)&v40);
        if (!v24)
        {
          CFTypeRef v25 = v40;
          uint64_t v26 = *(void *)(a1 + 88);
          LODWORD(key) = 0;
          if (*(void *)(v26 + 64)
            || (CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(*(CFAllocatorRef *)a1, 0, 0, MEMORY[0x1E4F1D540]),
                (*(void *)(v26 + 64) = Mutable) != 0))
          {
            uint64_t v24 = MovieSampleGroupDescriptionArrayCopyInfo((uint64_t)v25, &key, 0, 0, 0, 0);
            if (v24) {
              goto LABEL_48;
            }
            if (!CFDictionaryGetValue(*(CFDictionaryRef *)(v26 + 64), (const void *)(int)key))
            {
              CFDictionarySetValue(*(CFMutableDictionaryRef *)(v26 + 64), (const void *)(int)key, v25);
              goto LABEL_21;
            }
          }
          uint64_t v24 = FigSignalErrorAt();
          if (!v24) {
            goto LABEL_21;
          }
        }
LABEL_48:
        uint64_t v35 = v24;
        CFTypeRef v36 = v40;
        if (v40) {
          goto LABEL_39;
        }
        goto LABEL_40;
      }
    }
    else
    {
      uint64_t v21 = MovieSampleGroupCreateForFragment(v19, a2, a3, (uint64_t)v18, &cf);
      if (!v21) {
        goto LABEL_10;
      }
    }
    uint64_t v35 = v21;
    goto LABEL_40;
  }
LABEL_29:
  if (v15)
  {
    CFTypeRef v40 = 0;
    if (a6)
    {
      uint64_t appended = MovieSampleGroupAddDescription((uint64_t)v15, a7, a8, (uint64_t)&v40, 0);
      if (appended) {
        goto LABEL_37;
      }
      CFTypeRef v15 = cf;
      uint64_t v34 = (uint64_t)v40;
    }
    else
    {
      uint64_t v34 = 0;
    }
    uint64_t appended = MovieSampleGroupAppendSamplesWithDescriptionIndex((uint64_t)v15, a5, v34);
LABEL_37:
    uint64_t v35 = appended;
    if (!v17) {
      goto LABEL_40;
    }
    goto LABEL_38;
  }
  uint64_t v35 = 0;
  if (v17)
  {
LABEL_38:
    CFTypeRef v36 = v17;
LABEL_39:
    CFRelease(v36);
  }
LABEL_40:
  if (v18) {
    CFRelease(v18);
  }
  if (cf) {
    CFRelease(cf);
  }
  return v35;
}

uint64_t FigCDSLayoutContextGetTypeID()
{
  return sFigCDSLayoutContextID;
}

uint64_t FigCDSLayoutContextCreate(void *a1)
{
  *a1 = 0;
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  MEMORY[0x19970EE10](&FigCDSLayoutContextLocalGetTypeID_sRegisterFigCDSLayoutContextOnce, RegisterFigCDSLayoutContextClass);
  uint64_t Instance = (void *)_CFRuntimeCreateInstance();
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v2, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  Instance[3] = Mutable;
  if (Mutable)
  {
    *a1 = Instance;
    return 0;
  }
  else
  {
    uint64_t v6 = FigSignalErrorAt();
    CFRelease(Instance);
    return v6;
  }
}

uint64_t FigCDSLayoutContextSetSubtitleSample(uint64_t a1, CFTypeRef cf)
{
  if (a1)
  {
    uint64_t v3 = *(const void **)(a1 + 16);
    *(void *)(a1 + 16) = cf;
    if (cf) {
      CFRetain(cf);
    }
    if (v3) {
      CFRelease(v3);
    }
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigCDSLayoutContextGetSubtitleSample(uint64_t a1, void *a2)
{
  if (!a1 || !a2) {
    return FigSignalErrorAt();
  }
  *a2 = *(void *)(a1 + 16);
  return 0;
}

uint64_t FigCDSLayoutContextSetMapping(uint64_t a1, const void *a2, const void *a3)
{
  if (a1 && a2 && a3)
  {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 24), a2, a3);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigCDSLayoutContextGetMapping(uint64_t a1, const void *a2, const void **a3)
{
  if (a1 && a2 && a3)
  {
    *a3 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 24), a2);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t RegisterFigCDSLayoutContextClass()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sFigCDSLayoutContextIOSurfaceID ID = result;
  return result;
}

uint64_t FigCDSLayoutContextInit(uint64_t result)
{
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  return result;
}

void FigCDSLayoutContext_Finalize(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 16);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 24);
  if (v3)
  {
    CFRelease(v3);
  }
}

__CFString *FigCDSLayoutContextCopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<FigCDSLayoutContext %p>", a1);
  return Mutable;
}

uint64_t FigTTMLStyleCreate(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a4)
  {
    FigTTMLNodeGetClassID();
    uint64_t v7 = CMDerivedObjectCreate();
    if (!v7)
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      uint64_t v9 = FigTTMLInitializeNodeBaseStorage(DerivedStorage, (long long *)a3);
      if (v9)
      {
        return v9;
      }
      else
      {
        uint64_t v7 = FigTTMLAddCurrentElementAttributesToDictionary(a2, *(__CFDictionary **)(DerivedStorage + 24));
        if (!v7)
        {
          *(void *)a3 = 0;
          *(void *)(a3 + 8) = 0;
          uint64_t v7 = FigTTMLParseNode(a2, (uint64_t (*)(uint64_t, uint64_t *, CFTypeRef *))figTTMLStyle_ConsumeChildNode, (uint64_t *)a3);
          if (!v7) {
            *a4 = 0;
          }
        }
      }
    }
    return v7;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t figTTMLStyle_ConsumeChildNode(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = FigTTMLSkipNode(a1, a2, *(__CFArray **)(DerivedStorage + 128));
  if (a3)
  {
    if (!result) {
      *a3 = 0;
    }
  }
  return result;
}

void figTTMLStyle_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();

  FigTTMLReleaseNodeBaseStorage(DerivedStorage);
}

CFStringRef figTTMLStyle_CopyDebugDesc()
{
  CMBaseObjectGetDerivedStorage();
  v0 = (const void *)FigCFCopyCompactDescription();
  CFStringRef v1 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"style: %@", v0);
  if (v0) {
    CFRelease(v0);
  }
  return v1;
}

uint64_t figTTMLStyle_CopyChildNodeArray(const void *a1, CFMutableArrayRef *a2)
{
  if (a2)
  {
    CFAllocatorRef v3 = CFGetAllocator(a1);
    *a2 = CFArrayCreateMutable(v3, 0, MEMORY[0x1E4F1D510]);
  }
  else
  {
    FigSignalErrorAt();
  }
  return 0;
}

uint64_t figTTMLStyle_GetNodeType(uint64_t a1, _DWORD *a2)
{
  if (!a2) {
    return FigSignalErrorAt();
  }
  *a2 = 13;
  return 0;
}

uint64_t MovieHeaderMakerCreateWithMovieInformation(const __CFAllocator *a1, const void *a2, int a3, void *a4)
{
  if (a2 && a4)
  {
    BOOL v8 = CFAllocatorAllocate(a1, 144, 0);
    if (v8)
    {
      uint64_t v9 = v8;
      v8[7] = 0u;
      v8[8] = 0u;
      v8[5] = 0u;
      v8[6] = 0u;
      v8[3] = 0u;
      v8[4] = 0u;
      v8[1] = 0u;
      void v8[2] = 0u;
      *BOOL v8 = 0u;
      if (a1) {
        CFTypeRef v10 = CFRetain(a1);
      }
      else {
        CFTypeRef v10 = 0;
      }
      *(void *)uint64_t v9 = v10;
      *((void *)v9 + 1) = CFRetain(a2);
      *((_DWORD *)v9 + 4) = a3;
      CFMutableArrayRef Mutable = CFArrayCreateMutable(a1, 0, 0);
      uint64_t result = 0;
      *((void *)v9 + 11) = Mutable;
      *a4 = v9;
    }
    else
    {
      return 4294950966;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

void MovieHeaderMakerRelease(const __CFAllocator **ptr)
{
  if (ptr)
  {
    CFAllocatorRef v2 = *ptr;
    CFArrayRef v3 = ptr[11];
    if (v3)
    {
      CFIndex Count = CFArrayGetCount(v3);
      if (Count >= 1)
      {
        CFIndex v5 = Count;
        for (CFIndex i = 0; i != v5; ++i)
        {
          CFDictionaryRef ValueAtIndex = (CFTypeRef *)CFArrayGetValueAtIndex(ptr[11], i);
          releaseTrack_0(v2, ValueAtIndex);
        }
      }
      CFAllocatorRef v8 = ptr[11];
      if (v8) {
        CFRelease(v8);
      }
    }
    CFAllocatorRef v9 = ptr[1];
    if (v9) {
      CFRelease(v9);
    }
    CFAllocatorRef v10 = ptr[3];
    if (v10) {
      CFRelease(v10);
    }
    CFAllocatorRef v11 = ptr[4];
    if (v11) {
      CFRelease(v11);
    }
    CFAllocatorRef v12 = ptr[5];
    if (v12) {
      CFRelease(v12);
    }
    CFAllocatorDeallocate(v2, ptr);
    if (v2)
    {
      CFRelease(v2);
    }
  }
}

void releaseTrack_0(CFAllocatorRef allocator, CFTypeRef *ptr)
{
  if (*ptr) {
    CFRelease(*ptr);
  }
  CFTypeRef v4 = ptr[1];
  if (v4) {
    CFRelease(v4);
  }
  CFTypeRef v5 = ptr[2];
  if (v5) {
    CFRelease(v5);
  }
  CFTypeRef v6 = ptr[3];
  if (v6) {
    CFRelease(v6);
  }

  CFAllocatorDeallocate(allocator, ptr);
}

uint64_t MovieHeaderMakerAddTrack(uint64_t a1, const void *a2, void *a3)
{
  if (a1 && a2)
  {
    CFArrayRef v6 = *(const __CFArray **)(a1 + 88);
    if (v6 && (CFIndex Count = CFArrayGetCount(v6), Count >= 1))
    {
      CFIndex v8 = Count;
      CFIndex v9 = 0;
      while (1)
      {
        CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 88), v9);
        if (FigCFEqual()) {
          break;
        }
        if (v8 == ++v9) {
          goto LABEL_8;
        }
      }
    }
    else
    {
LABEL_8:
      if ((*(unsigned char *)(a1 + 16) & 2) == 0)
      {
        return addTrack((CFAllocatorRef *)a1, a2, a3);
      }
    }
  }

  return FigSignalErrorAt();
}

uint64_t addTrack(CFAllocatorRef *a1, const void *a2, void *a3)
{
  CFArrayRef v6 = CFAllocatorAllocate(*a1, 88, 0);
  if (!v6) {
    return 4294950966;
  }
  uint64_t v7 = v6;
  *((void *)v6 + 10) = 0;
  v6[3] = 0u;
  v6[4] = 0u;
  v6[1] = 0u;
  void v6[2] = 0u;
  *CFArrayRef v6 = 0u;
  if (a2) {
    CFTypeRef v8 = CFRetain(a2);
  }
  else {
    CFTypeRef v8 = 0;
  }
  *(void *)uint64_t v7 = v8;
  v7[16] = 257;
  *((unsigned char *)v7 + 34) = 1;
  v7[18] = 257;
  *((_DWORD *)v7 + 11) = 0;
  CFArrayAppendValue(a1[11], v7);
  uint64_t result = 0;
  if (a3) {
    *a3 = v7;
  }
  return result;
}

uint64_t MovieHeaderMakerCopyMovieHeaderAsBlockBuffer(uint64_t a1, const __CFAllocator *a2, uint64_t a3, const __CFURL *a4, CMBlockBufferRef *a5)
{
  uint64_t v9 = a1;
  uint64_t v182 = *MEMORY[0x1E4F143B8];
  uint64_t v156 = 0;
  long long v154 = 0u;
  long long v155 = 0u;
  long long v153 = 0u;
  uint64_t v10 = *(void *)(a1 + 8);
  CMBlockBufferRef blockBufferOut = 0;
  CFTypeRef v152 = 0;
  if (!isMovieHeaderMakerSupportedFileType() || !a5)
  {
    uint64_t appended = FigSignalErrorAt();
    CFStringRef v143 = 0;
    goto LABEL_314;
  }
  uint64_t v142 = a5;
  if (a4)
  {
    CFStringRef v143 = CFURLCopyPathExtension(a4);
    if (FigGetFileTypeForMovieFamilyExtension(v143)) {
      FigCFEqual();
    }
  }
  else
  {
    CFStringRef v143 = 0;
  }
  uint64_t TrackReferenceDictionary = MovieInformationCreateTrackReferenceDictionary(a2, v10, (CFDictionaryRef *)&v152);
  if (TrackReferenceDictionary) {
    goto LABEL_258;
  }
  CFTypeRef v12 = v152;
  *(void *)(v9 + 96) = a4;
  *(void *)(v9 + 104) = v12;
  *(void *)(v9 + 112) = a3;
  *(unsigned char *)(v9 + 120) = FigFileTypeIsISOFileType();
  uint64_t TrackReferenceDictionary = CMBlockBufferCreateEmpty(a2, 0x20u, 0, &blockBufferOut);
  if (TrackReferenceDictionary) {
    goto LABEL_258;
  }
  uint64_t TrackReferenceDictionary = FigAtomWriterInitWithBlockBuffer();
  if (TrackReferenceDictionary) {
    goto LABEL_258;
  }
  if ((*(unsigned char *)(v9 + 16) & 2) != 0)
  {
    TrackCFIndex Count = MovieInformationGetTrackCount(v10);
    if (TrackCount >= 1)
    {
      uint64_t v14 = TrackCount;
      uint64_t v15 = 0;
      while (1)
      {
        TrackForTrackIndex = (const void *)MovieInformationFindTrackForTrackIndex(v10, v15);
        uint64_t TrackReferenceDictionary = addTrack((CFAllocatorRef *)v9, TrackForTrackIndex, 0);
        if (TrackReferenceDictionary) {
          break;
        }
        if (v14 == ++v15) {
          goto LABEL_15;
        }
      }
LABEL_258:
      uint64_t appended = TrackReferenceDictionary;
      goto LABEL_314;
    }
  }
LABEL_15:
  CFArrayRef v17 = *(const __CFArray **)(v9 + 88);
  if (v17) {
    CFIndex Count = CFArrayGetCount(v17);
  }
  else {
    CFIndex Count = 0;
  }
  uint64_t PSSHDataEntries = FigAtomWriterBeginAtom();
  if (PSSHDataEntries) {
    goto LABEL_322;
  }
  uint64_t v177 = 0;
  long long v175 = 0u;
  long long v176 = 0u;
  *(_OWORD *)CMBlockBufferRef theBuffer = 0u;
  uint64_t v19 = *(void *)(v9 + 8);
  *(void *)newTimescale = 0;
  unint64_t v166 = 0;
  float v167 = 0.0;
  uint64_t v164 = 0;
  LODWORD(v159) = 0;
  *(_OWORD *)CFTypeRef cf = 0u;
  long long v158 = 0u;
  MovieInformationGetMovieDuration(v19, (uint64_t)&valuePtr);
  unint64_t v20 = valuePtr;
  NextTrackIOSurfaceID ID = MovieInformationGetNextTrackID(v19);
  unsigned int v173 = 0;
  long long v171 = 0u;
  long long v172 = 0u;
  long long v169 = 0u;
  long long v170 = 0u;
  memset(theString, 0, sizeof(theString));
  memset(v181, 0, 32);
  long long v179 = 0u;
  long long v180 = 0u;
  memset(buffer, 0, sizeof(buffer));
  uint64_t TimeInfo = MovieInformationGetTimeInfo(v19, &v166, newTimescale);
  if (TimeInfo) {
    goto LABEL_341;
  }
  uint64_t v23 = (double *)MEMORY[0x1E4F1CF68];
  if ((*(unsigned char *)(v9 + 16) & 1) == 0) {
    *(void *)newTimescale = (unint64_t)(CFAbsoluteTimeGetCurrent() + *v23);
  }
  uint64_t TimeInfo = MovieInformationGetBasicMetrics(v19, &v167, (_DWORD *)&v164 + 1, &v164, (uint64_t)cf);
  if (TimeInfo
    || (v24 = v167, float v25 = *((float *)&v164 + 1), TimeInfo = FigAtomWriterInitWithParent(), TimeInfo)
    || (uint64_t TimeInfo = FigAtomWriterBeginAtom(), TimeInfo))
  {
LABEL_341:
    uint64_t appended = TimeInfo;
    goto LABEL_335;
  }
  unsigned int v26 = vcvtd_n_s64_f64(v24, 0x10uLL);
  unsigned int v27 = vcvtd_n_s64_f64(v25, 8uLL);
  if (HIDWORD(v20) || HIDWORD(v166) || newTimescale[1])
  {
    *(void *)((char *)buffer + 4) = bswap64(v166);
    *(void *)((char *)&buffer[1] + 4) = bswap64(*(unint64_t *)newTimescale);
    LODWORD(buffer[0]) = 1;
    HIDWORD(buffer[2]) = bswap32(v164);
    buffer[3] = bswap64(v20);
    LODWORD(buffer[4]) = bswap32(v26);
    HIDWORD(buffer[4]) = bswap32(v27) >> 16;
    buffer[5] = 0;
    figMatrixToBigEndianMatrixRecord((uint64_t)cf, (uint64_t)&v179);
    memset((char *)v181 + 4, 0, 24);
    HIDWORD(v181[1]) = bswap32(NextTrackID);
  }
  else
  {
    theString[0].i32[0] = 0;
    theString[0].i32[1] = bswap32(v166);
    theString[0].i64[1] = _byteswap_uint64(__PAIR64__(newTimescale[0], v164));
    theString[1].i64[0] = _byteswap_uint64(__PAIR64__(v20, v26));
    theString[1].i64[1] = bswap32(v27) >> 16;
    LODWORD(v169) = 0;
    figMatrixToBigEndianMatrixRecord((uint64_t)cf, (uint64_t)&v169 + 4);
    long long v172 = 0uLL;
    *((void *)&v171 + 1) = 0;
    unsigned int v173 = bswap32(NextTrackID);
  }
  uint64_t appended = FigAtomWriterAppendData();
  FigAtomWriterEndAtom();
  if (appended) {
    goto LABEL_336;
  }
  if (Count >= 1)
  {
    CFIndex v29 = 0;
    double v30 = *v23;
    CFAllocatorRef structureAllocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    uint64_t v144 = v9;
    while (1)
    {
      CFDictionaryRef ValueAtIndex = (uint64_t *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v9 + 88), v29);
      if (!hasFormatDescriptionAndNonZeroMediaTimeScale(*ValueAtIndex)) {
        goto LABEL_234;
      }
      double v148 = ValueAtIndex;
      uint64_t v160 = 0;
      long long v158 = 0u;
      long long v159 = 0u;
      *(_OWORD *)CFTypeRef cf = 0u;
      uint64_t v32 = FigAtomWriterInitWithParent();
      if (v32 || (uint64_t v32 = FigAtomWriterBeginAtom(), v32))
      {
LABEL_328:
        uint64_t appended = v32;
        goto LABEL_335;
      }
      uint64_t v177 = 0;
      long long v175 = 0u;
      long long v176 = 0u;
      *(_OWORD *)CMBlockBufferRef theBuffer = 0u;
      uint64_t v33 = *ValueAtIndex;
      *(void *)newTimescale = 0;
      unint64_t v166 = 0;
      float v167 = 0.0;
      TrackDurationCFDataRef Value = MovieTrackGetTrackDurationValue(v33);
      float Volume = MovieTrackGetVolume(v33);
      unsigned int Layer = MovieTrackGetLayer(v33);
      DefaultAlternateGroupIOSurfaceID ID = MovieTrackGetDefaultAlternateGroupID(v33);
      uint64_t v164 = 0;
      int v163 = 0;
      long long valuePtr = 0u;
      long long v162 = 0u;
      LODWORD(v172) = 0;
      long long v170 = 0u;
      long long v171 = 0u;
      long long v169 = 0u;
      memset(theString, 0, sizeof(theString));
      long long v180 = 0u;
      v181[0] = 0u;
      long long v179 = 0u;
      memset(buffer, 0, sizeof(buffer));
      if (*(unsigned char *)(v9 + 120))
      {
        Trackint Type = MovieTrackGetTrackType(*ValueAtIndex);
        if (TrackType == 1635088502) {
          int v39 = 5;
        }
        else {
          int v39 = 1;
        }
        if (TrackType == 1885954932) {
          int v40 = 7;
        }
        else {
          int v40 = v39;
        }
      }
      else
      {
        int v40 = 15;
      }
      uint64_t BasicInfo = MovieTrackGetBasicInfo(v33, 0, &v167);
      if (BasicInfo) {
        goto LABEL_321;
      }
      uint64_t BasicInfo = MovieTrackGetTrackTimeInfo(v33, &v166, newTimescale);
      if (BasicInfo) {
        goto LABEL_321;
      }
      if ((*(unsigned char *)(v9 + 16) & 1) == 0) {
        *(void *)newTimescale = (unint64_t)(v30 + CFAbsoluteTimeGetCurrent());
      }
      MovieTrackGetSpatialInformation(v33, (_DWORD *)&v164 + 1, &v164, (uint64_t)&valuePtr);
      float v42 = *((float *)&v164 + 1);
      float v43 = *(float *)&v164;
      uint64_t BasicInfo = FigAtomWriterInitWithParent();
      if (BasicInfo || (uint64_t BasicInfo = FigAtomWriterBeginAtom(), BasicInfo))
      {
LABEL_321:
        uint64_t appended = BasicInfo;
        goto LABEL_334;
      }
      CFIndex v146 = v29;
      int IsEnabled = MovieTrackIsEnabled(v33);
      int v45 = v40 & 0xE;
      if (IsEnabled) {
        int v45 = v40;
      }
      unint64_t v46 = (TrackDurationValue | *(void *)newTimescale | v166) >> 32;
      unsigned int v47 = bswap32(v45 | ((v46 != 0) << 24));
      if (v46)
      {
        *(void *)((char *)buffer + 4) = bswap64(v166);
        *(void *)((char *)&buffer[1] + 4) = bswap64(*(unint64_t *)newTimescale);
        BOOL v49 = (__int32 *)&buffer[5];
        unsigned int v48 = (void *)((char *)&buffer[4] + 4);
        LODWORD(buffer[0]) = v47;
        *(void *)((char *)&buffer[2] + 4) = bswap32(LODWORD(v167));
        int v50 = (char *)&buffer[5] + 6;
        CFIndex v51 = (long long *)((char *)&buffer[5] + 4);
        unint64_t v53 = (char *)&v179 + 2;
        uint64_t v52 = &v179;
        *(void *)((char *)&buffer[3] + 4) = bswap64(TrackDurationValue);
        CFIndex v55 = (char *)v181 + 8;
        unsigned int v54 = (char *)&v179 + 4;
        CFDictionaryRef v56 = (_OWORD *)((char *)v181 + 12);
      }
      else
      {
        theString[0].i64[0] = __PAIR64__(bswap32(v166), v47);
        BOOL v49 = &theString[1].i32[3];
        unsigned int v48 = &theString[1].i64[1];
        theString[0].i64[1] = _byteswap_uint64(__PAIR64__(newTimescale[0], LODWORD(v167)));
        int v50 = (char *)&v169 + 2;
        CFIndex v51 = &v169;
        unint64_t v53 = (char *)&v169 + 6;
        uint64_t v52 = (long long *)((char *)&v169 + 4);
        theString[1].i32[0] = 0;
        theString[1].i32[1] = bswap32(TrackDurationValue);
        CFIndex v55 = (char *)&v171 + 12;
        unsigned int v54 = (char *)&v169 + 8;
        CFDictionaryRef v56 = &v172;
      }
      *(_DWORD *)unsigned int v48 = 0;
      __int32 *v49 = 0;
      *(_WORD *)CFIndex v51 = bswap32(Layer) >> 16;
      *(_WORD *)int v50 = bswap32(DefaultAlternateGroupID) >> 16;
      *(_WORD *)uint64_t v52 = bswap32(vcvtd_n_s64_f64(Volume, 8uLL)) >> 16;
      *(_WORD *)unint64_t v53 = 0;
      figMatrixToBigEndianMatrixRecord((uint64_t)&valuePtr, (uint64_t)v54);
      *(_DWORD *)CFIndex v55 = bswap32(vcvtd_n_s64_f64(v42, 0x10uLL));
      *(_DWORD *)CFDictionaryRef v56 = bswap32(vcvtd_n_s64_f64(v43, 0x10uLL));
      uint64_t appended = FigAtomWriterAppendData();
      FigAtomWriterEndAtom();
      if (appended) {
        goto LABEL_335;
      }
      *(void *)&long long v179 = 0;
      memset(buffer, 0, sizeof(buffer));
      unsigned __int16 v57 = MovieTrackGetDefaultAlternateGroupID(*v148);
      theString[0].i16[0] = 0;
      CFAllocatorRef v58 = structureAllocator;
      if (!MovieTrackGetProvisionalAlternateGroupID(*v148, theString) || theString[0].u16[0] == v57)
      {
        FigAtomWriterEndAtom();
      }
      else
      {
        LOWORD(theBuffer[0]) = __rev16(theString[0].u16[0]);
        uint64_t v59 = FigAtomWriterInitWithParent();
        if (v59
          || (uint64_t v59 = FigAtomWriterBeginAtom(), v59)
          || (uint64_t v59 = FigAtomWriterAppendVersionAndFlags(), v59))
        {
LABEL_323:
          uint64_t appended = v59;
          goto LABEL_334;
        }
        uint64_t appended = FigAtomWriterAppendData();
        FigAtomWriterEndAtom();
        if (appended) {
          goto LABEL_335;
        }
      }
      *(void *)&long long v179 = 0;
      memset(buffer, 0, sizeof(buffer));
      if (MovieTrackIsExcludedFromAutoSelection(*v148))
      {
        uint64_t v59 = FigAtomWriterInitWithParent();
        if (v59) {
          goto LABEL_323;
        }
        uint64_t appended = FigAtomWriterBeginAtom();
        FigAtomWriterEndAtom();
        if (appended) {
          goto LABEL_335;
        }
      }
      else
      {
        FigAtomWriterEndAtom();
      }
      if (!*(unsigned char *)(v9 + 120)) {
        break;
      }
LABEL_108:
      if (*((unsigned char *)v148 + 37))
      {
        if (!FigCFEqual())
        {
          uint64_t v32 = appendEditAtom(v9, v148, 1);
          if (v32) {
            goto LABEL_328;
          }
        }
      }
      *(void *)&long long v170 = 0;
      long long v169 = 0u;
      memset(theString, 0, sizeof(theString));
      if (!*(void *)(v9 + 104)) {
        goto LABEL_147;
      }
      newTimescale[0] = 0;
      uint64_t v65 = MovieTrackGetBasicInfo(*v148, 0, newTimescale);
      if (v65) {
        goto LABEL_331;
      }
      CFDictionaryRef v73 = *(const __CFDictionary **)(v9 + 104);
      int32_t v74 = newTimescale[0];
      *(void *)&long long v179 = 0;
      memset(buffer, 0, sizeof(buffer));
      CFIndex v75 = CFDictionaryGetCount(v73);
      theBuffer[0] = 0;
      uint64_t v149 = v75;
      CFIndex v76 = 8 * v75;
      keys = (void **)CFAllocatorAllocate(structureAllocator, 8 * v75, 0);
      if (!keys)
      {
        FigAtomWriterEndAtom();
        uint64_t appended = 4294950966;
        uint64_t v9 = v144;
        goto LABEL_334;
      }
      unint64_t v77 = (const void **)CFAllocatorAllocate(structureAllocator, v76, 0);
      if (v77)
      {
        unsigned int v78 = v77;
        CFDictionaryGetKeysAndValues(v73, (const void **)keys, v77);
        if (v149 < 1)
        {
          CMBlockBufferRef v89 = 0;
          uint64_t v9 = v144;
LABEL_137:
          uint64_t appended = 0;
          theBuffer[0] = 0;
        }
        else
        {
          uint64_t v79 = 0;
          while (1)
          {
            CFArrayRef v80 = (const __CFArray *)v78[v79];
            if (!GetTrackReferenceOSTypeFromKeyString((const __CFString *)keys[v79])
              || (v81 = CFArrayGetCount(v80), CFIndex v82 = v81, (v81 & 1) != 0))
            {
              CMBlockBufferRef v89 = 0;
              uint64_t appended = 4294950959;
              goto LABEL_250;
            }
            if (v81 >= 1) {
              break;
            }
LABEL_134:
            if (++v79 == v149)
            {
              CMBlockBufferRef v89 = theBuffer[0];
              uint64_t v9 = v144;
              CFAllocatorRef v58 = structureAllocator;
              goto LABEL_137;
            }
          }
          CFIndex v83 = 0;
          char v84 = 1;
          do
          {
            while (1)
            {
              CFIndex v85 = v83 | 1;
              CFNumberRef v86 = (const __CFNumber *)CFArrayGetValueAtIndex(v80, v83);
              v83 += 2;
              CFNumberRef v87 = (const __CFNumber *)CFArrayGetValueAtIndex(v80, v85);
              LODWORD(valuePtr) = 0;
              LODWORD(v166) = 0;
              CFNumberGetValue(v86, kCFNumberSInt32Type, &valuePtr);
              CFNumberGetValue(v87, kCFNumberSInt32Type, &v166);
              if (valuePtr != v74) {
                break;
              }
              if (!theBuffer[0])
              {
                uint64_t Empty = CMBlockBufferCreateEmpty(structureAllocator, 0, 0, theBuffer);
                if (Empty) {
                  goto LABEL_249;
                }
                uint64_t Empty = FigAtomWriterInitWithBlockBuffer();
                if (Empty) {
                  goto LABEL_249;
                }
              }
              if (v84)
              {
                uint64_t Empty = FigAtomWriterBeginAtom();
                if (Empty) {
                  goto LABEL_249;
                }
              }
              LODWORD(v166) = bswap32(v166);
              uint64_t Empty = FigAtomWriterAppendData();
              if (Empty) {
                goto LABEL_249;
              }
              char v84 = 0;
              if (v83 >= v82) {
                goto LABEL_133;
              }
            }
          }
          while (v83 < v82);
          if (v84) {
            goto LABEL_134;
          }
LABEL_133:
          uint64_t Empty = FigAtomWriterEndAtom();
          if (!Empty) {
            goto LABEL_134;
          }
LABEL_249:
          uint64_t appended = Empty;
          CMBlockBufferRef v89 = 0;
LABEL_250:
          uint64_t v9 = v144;
          CFAllocatorRef v58 = structureAllocator;
        }
        CFAllocatorDeallocate(v58, keys);
      }
      else
      {
        CMBlockBufferRef v89 = 0;
        uint64_t appended = 4294950966;
        unsigned int v78 = keys;
        uint64_t v9 = v144;
      }
      CFAllocatorDeallocate(v58, v78);
      if (theBuffer[0]) {
        CFRelease(theBuffer[0]);
      }
      FigAtomWriterEndAtom();
      if (appended)
      {
        FigAtomWriterEndAtom();
        if (!v89) {
          goto LABEL_335;
        }
LABEL_338:
        CFRelease(v89);
        goto LABEL_335;
      }
      if (v89)
      {
        CMBlockBufferGetDataLength(v89);
        uint64_t v90 = FigAtomWriterInitWithParent();
        if (v90 || (uint64_t v90 = FigAtomWriterBeginAtom(), v90))
        {
          uint64_t appended = v90;
          FigAtomWriterEndAtom();
          goto LABEL_338;
        }
        uint64_t appended = FigAtomWriterAppendBlockBufferData();
        FigAtomWriterEndAtom();
        CFRelease(v89);
        if (appended) {
          goto LABEL_335;
        }
      }
      else
      {
LABEL_147:
        FigAtomWriterEndAtom();
      }
      if (FigFileTypeIsQTMovieFileType() || FigCFEqual() || FigCFEqual())
      {
        *(void *)&long long v179 = 0;
        memset(buffer, 0, sizeof(buffer));
        theString[0] = 0uLL;
        if (MovieTrackGetLoadSettings(*v148, theString))
        {
          uint64_t v59 = FigAtomWriterInitWithParent();
          if (v59) {
            goto LABEL_323;
          }
          uint64_t v59 = FigAtomWriterBeginAtom();
          if (v59) {
            goto LABEL_323;
          }
          theString[0] = vrev32q_s8(theString[0]);
          uint64_t appended = FigAtomWriterAppendData();
          FigAtomWriterEndAtom();
          if (appended) {
            goto LABEL_335;
          }
        }
        else
        {
          FigAtomWriterEndAtom();
        }
      }
      uint64_t v177 = 0;
      long long v175 = 0u;
      long long v176 = 0u;
      *(_OWORD *)CMBlockBufferRef theBuffer = 0u;
      uint64_t BasicInfo = FigAtomWriterInitWithParent();
      if (BasicInfo) {
        goto LABEL_321;
      }
      uint64_t BasicInfo = FigAtomWriterBeginAtom();
      if (BasicInfo) {
        goto LABEL_321;
      }
      *(void *)&long long v179 = 0;
      memset(buffer, 0, sizeof(buffer));
      uint64_t v91 = *v148;
      *(void *)newTimescale = 0;
      unint64_t v166 = 0;
      unsigned int MediaTimeScale = MovieTrackGetMediaTimeScale(v91);
      MediaDurationCFDataRef Value = MovieTrackGetMediaDurationValue(v91);
      LOWORD(v167) = 21956;
      long long valuePtr = 0uLL;
      *(void *)&long long v162 = 0;
      LODWORD(v169) = 0;
      memset(theString, 0, sizeof(theString));
      Mediauint64_t TimeInfo = MovieTrackGetMediaTimeInfo(v91, &v166, newTimescale);
      if (MediaTimeInfo) {
        goto LABEL_324;
      }
      if ((*(unsigned char *)(v9 + 16) & 1) == 0) {
        *(void *)newTimescale = (unint64_t)(v30 + CFAbsoluteTimeGetCurrent());
      }
      MovieTrackGetLanguageInformation(v91, &v167, 0, 0);
      Mediauint64_t TimeInfo = FigAtomWriterInitWithParent();
      if (MediaTimeInfo || (Mediauint64_t TimeInfo = FigAtomWriterBeginAtom(), MediaTimeInfo))
      {
LABEL_324:
        uint64_t appended = MediaTimeInfo;
        goto LABEL_333;
      }
      unsigned int v95 = bswap32(MediaTimeScale);
      if (HIDWORD(MediaDurationValue) || HIDWORD(v166) || newTimescale[1])
      {
        *(uint64_t *)((char *)theString[0].i64 + 4) = bswap64(v166);
        *(uint64_t *)((char *)&theString[0].i64[1] + 4) = bswap64(*(unint64_t *)newTimescale);
        theString[0].i32[0] = 1;
        theString[1].i32[1] = v95;
        uint64_t v97 = (char *)&v169 + 2;
        uint64_t v96 = &v169;
        theString[1].i64[1] = bswap64(MediaDurationValue);
      }
      else
      {
        LODWORD(valuePtr) = 0;
        *(void *)((char *)&valuePtr + 4) = _byteswap_uint64(__PAIR64__(v166, newTimescale[0]));
        HIDWORD(valuePtr) = v95;
        uint64_t v97 = (char *)&v162 + 6;
        uint64_t v96 = (long long *)((char *)&v162 + 4);
        LODWORD(v162) = bswap32(MediaDurationValue);
      }
      *(_WORD *)uint64_t v96 = bswap32(LOWORD(v167)) >> 16;
      *(_WORD *)uint64_t v97 = 0;
      uint64_t appended = FigAtomWriterAppendData();
      FigAtomWriterEndAtom();
      if (appended) {
        goto LABEL_334;
      }
      *(void *)&long long v179 = 0;
      memset(buffer, 0, sizeof(buffer));
      theString[0].i64[0] = 0;
      MovieTrackGetLanguageInformation(*v148, 0, 0, theString);
      if (!theString[0].i64[0])
      {
        uint64_t appended = 0;
        goto LABEL_181;
      }
      CFIndex v98 = CFStringGetLength((CFStringRef)theString[0].i64[0]) + 1;
      uint64_t v99 = (char *)CFAllocatorAllocate(v58, v98, 0);
      if (!v99)
      {
        uint64_t appended = 4294950966;
LABEL_181:
        FigAtomWriterEndAtom();
        if (appended) {
          goto LABEL_334;
        }
        goto LABEL_182;
      }
      unint64_t v100 = v99;
      if (CFStringGetCString((CFStringRef)theString[0].i64[0], v99, v98, 0x600u))
      {
        uint64_t v101 = FigAtomWriterInitWithParent();
        if (!v101)
        {
          uint64_t v101 = FigAtomWriterBeginAtom();
          if (!v101)
          {
            uint64_t v101 = FigAtomWriterAppendVersionAndFlags();
            if (!v101) {
              uint64_t v101 = FigAtomWriterAppendData();
            }
          }
        }
        uint64_t appended = v101;
      }
      else
      {
        uint64_t appended = 4294950961;
      }
      FigAtomWriterEndAtom();
      CFAllocatorDeallocate(v58, v100);
      if (appended) {
        goto LABEL_334;
      }
LABEL_182:
      *(void *)&long long v170 = 0;
      long long v169 = 0u;
      memset(theString, 0, sizeof(theString));
      uint64_t v102 = *v148;
      Mediaint Type = MovieTrackGetMediaType(*v148);
      long long v180 = 0u;
      memset(v181, 0, sizeof(v181));
      long long v179 = 0u;
      memset(buffer, 0, sizeof(buffer));
      long long valuePtr = 0uLL;
      WORD4(v162) = 0;
      *(void *)&long long v162 = 0;
      int v104 = *(unsigned __int8 *)(v9 + 120);
      unsigned int v105 = MovieTrackGetTrackType(v102);
      BOOL v106 = v104 == 0;
      if (v104) {
        int v107 = 0;
      }
      else {
        int v107 = 1835560050;
      }
      if (v104) {
        unsigned int v108 = 0;
      }
      else {
        unsigned int v108 = 1634758764;
      }
      uint64_t v109 = FigAtomWriterInitWithParent();
      if (v109 || (uint64_t v109 = FigAtomWriterBeginAtom(), v109))
      {
LABEL_325:
        uint64_t appended = v109;
LABEL_333:
        FigAtomWriterEndAtom();
        goto LABEL_334;
      }
      if (MediaType <= 1935832171)
      {
        if (MediaType <= 1751216243)
        {
          if (MediaType == 1635088502)
          {
            BOOL v106 = 0;
            CFStringRef v110 = @"Core Media Auxiliary Picture";
            if (!v104) {
              goto LABEL_216;
            }
            goto LABEL_213;
          }
          if (MediaType == 1668047728)
          {
            CFStringRef v110 = @"Core Media Closed Caption";
            if (!v104) {
              goto LABEL_216;
            }
            goto LABEL_213;
          }
        }
        else
        {
          switch(MediaType)
          {
            case 1751216244:
              CFStringRef v110 = @"Core Media Haptic";
              if (!v104) {
                goto LABEL_216;
              }
              goto LABEL_213;
            case 1835365473:
              CFStringRef v110 = @"Core Media Metadata";
              if (!v104) {
                goto LABEL_216;
              }
              goto LABEL_213;
            case 1885954932:
              BOOL v106 = 0;
              CFStringRef v110 = @"Core Media Picture";
              if (!v104) {
                goto LABEL_216;
              }
              goto LABEL_213;
          }
        }
      }
      else if (MediaType > 1952807027)
      {
        switch(MediaType)
        {
          case 1952807028:
            CFStringRef v110 = @"Core Media Text";
            if (!v104) {
              goto LABEL_216;
            }
            goto LABEL_213;
          case 1953325924:
            CFStringRef v110 = @"Core Media Time Code";
            if (!v104) {
              goto LABEL_216;
            }
            goto LABEL_213;
          case 1986618469:
            BOOL v106 = 0;
            CFStringRef v110 = @"Core Media Video";
            if (!v104) {
              goto LABEL_216;
            }
            goto LABEL_213;
        }
      }
      else
      {
        switch(MediaType)
        {
          case 1935832172:
            CFStringRef v110 = @"Core Media Subtitle";
            if (!v104) {
              goto LABEL_216;
            }
            goto LABEL_213;
          case 1935893870:
            CFStringRef v110 = @"Core Media Scene";
            if (!v104) {
              goto LABEL_216;
            }
            goto LABEL_213;
          case 1936684398:
            BOOL v106 = 0;
            CFStringRef v110 = @"Core Media Audio";
            if (!v104) {
              goto LABEL_216;
            }
            goto LABEL_213;
        }
      }
      CFStringRef v110 = @"Core Media Generic";
      if (!v104)
      {
LABEL_216:
        CFStringEncoding SystemEncoding = CFStringGetSystemEncoding();
        if (!CFStringGetPascalString(v110, (StringPtr)buffer, 256, SystemEncoding))
        {
LABEL_332:
          uint64_t appended = 4294950961;
          goto LABEL_333;
        }
        goto LABEL_217;
      }
LABEL_213:
      if (!CFStringGetCString(v110, (char *)buffer, 256, 0x8000100u)) {
        goto LABEL_332;
      }
      strlen((const char *)buffer);
LABEL_217:
      LODWORD(valuePtr) = 0;
      *(void *)((char *)&valuePtr + 4) = _byteswap_uint64(__PAIR64__(v107, v105));
      HIDWORD(valuePtr) = bswap32(v108);
      if (v106) {
        unsigned int v112 = 0x1000000;
      }
      else {
        unsigned int v112 = 0;
      }
      *(void *)&long long v162 = v112;
      uint64_t v109 = FigAtomWriterAppendData();
      if (v109) {
        goto LABEL_325;
      }
      uint64_t appended = FigAtomWriterAppendData();
      FigAtomWriterEndAtom();
      if (appended) {
        goto LABEL_334;
      }
      uint64_t appended = appendMediaInfoAtom(v9, v148);
      FigAtomWriterEndAtom();
      CFIndex v29 = v146;
      if (appended) {
        goto LABEL_335;
      }
      uint64_t v113 = v148[2];
      if (v113)
      {
        CMBlockBufferGetDataLength((CMBlockBufferRef)v148[2]);
        uint64_t appended = FigAtomWriterAppendBlockBufferData();
      }
      else
      {
        uint64_t v114 = 0;
        *(void *)&long long valuePtr = 0;
        memset(buffer, 0, 24);
        memset(theString, 0, 24);
        theBuffer[0] = (CMBlockBufferRef)@"com.apple.quicktime.mdta";
        theBuffer[1] = (CMBlockBufferRef)@"com.apple.quicktime.udta";
        *(void *)&long long v175 = @"org.mp4ra";
        do
        {
          CMBlockBufferRef v115 = theBuffer[v114];
          CFDictionaryRef TrackMetadataItemArray = MovieTrackGetTrackMetadataItemArray(*v148, v115);
          if (TrackMetadataItemArray)
          {
            buffer[(int)v113] = v115;
            theString[0].i64[(int)v113] = (uint64_t)TrackMetadataItemArray;
            LODWORD(v113) = v113 + 1;
          }
          ++v114;
        }
        while (v114 != 3);
        uint64_t MetadataSerializerDictionaryWithMetadata = createMetadataSerializerDictionaryWithMetadata(v113, (uint64_t)buffer, (uint64_t)theString, *(void *)(v9 + 112), 1, 0, (const __CFDictionary *)v148[1], v58, (const __CFDictionary **)&valuePtr);
        int v118 = (const void *)valuePtr;
        if (!MetadataSerializerDictionaryWithMetadata) {
          uint64_t MetadataSerializerDictionaryWithMetadata = appendMetadataFromMetadataSerializerDictionary((const __CFDictionary *)valuePtr);
        }
        uint64_t appended = MetadataSerializerDictionaryWithMetadata;
        if (v118) {
          CFRelease(v118);
        }
      }
      FigAtomWriterEndAtom();
      if (appended) {
        goto LABEL_336;
      }
LABEL_234:
      if (++v29 == Count) {
        goto LABEL_254;
      }
    }
    *(void *)&long long v170 = 0;
    long long v169 = 0u;
    memset(theString, 0, sizeof(theString));
    BOOL v60 = *((unsigned char *)v148 + 32) || *((unsigned char *)v148 + 33) || *((unsigned char *)v148 + 34) != 0;
    uint64_t v61 = *v148;
    MovieTrackGetCleanApertureDimensions(*v148, 0, 0);
    if (v62 || (MovieTrackGetProductionApertureDimensions(v61, 0, 0), v63))
    {
      BOOL v64 = 1;
      if (v60)
      {
LABEL_76:
        if (v64)
        {
          uint64_t v65 = FigAtomWriterInitWithParent();
          if (v65 || (uint64_t v65 = FigAtomWriterBeginAtom(), v65))
          {
LABEL_331:
            uint64_t appended = v65;
            goto LABEL_334;
          }
          unsigned int v66 = v148;
          if (*((unsigned char *)v148 + 32))
          {
            *(void *)&long long v179 = 0;
            memset(buffer, 0, sizeof(buffer));
            LODWORD(valuePtr) = 0;
            LODWORD(v166) = 0;
            MovieTrackGetCleanApertureDimensions(*v148, (float *)&valuePtr, (float *)&v166);
            if (v67)
            {
              theBuffer[0] = (CMBlockBufferRef)vrev32_s8((int8x8_t)vmovn_s64(vcvtq_n_s64_f64(vcvtq_f64_f32((float32x2_t)__PAIR64__(v166, valuePtr)), 0x10uLL)));
              uint64_t v68 = FigAtomWriterInitWithParent();
              if (v68
                || (uint64_t v68 = FigAtomWriterBeginAtom(), v68)
                || (uint64_t v68 = FigAtomWriterAppendVersionAndFlags(), v68))
              {
LABEL_340:
                uint64_t appended = v68;
                FigAtomWriterEndAtom();
LABEL_334:
                FigAtomWriterEndAtom();
                goto LABEL_335;
              }
              uint64_t appended = FigAtomWriterAppendData();
              FigAtomWriterEndAtom();
              unsigned int v66 = v148;
              if (appended) {
                goto LABEL_334;
              }
            }
            else
            {
              FigAtomWriterEndAtom();
              unsigned int v66 = v148;
            }
          }
          if (*((unsigned char *)v66 + 33))
          {
            *(void *)&long long v179 = 0;
            memset(buffer, 0, sizeof(buffer));
            LODWORD(valuePtr) = 0;
            LODWORD(v166) = 0;
            MovieTrackGetProductionApertureDimensions(*v66, (float *)&valuePtr, (float *)&v166);
            if (v70)
            {
              theBuffer[0] = (CMBlockBufferRef)vrev32_s8((int8x8_t)vmovn_s64(vcvtq_n_s64_f64(vcvtq_f64_f32((float32x2_t)__PAIR64__(v166, valuePtr)), 0x10uLL)));
              uint64_t v68 = FigAtomWriterInitWithParent();
              if (v68) {
                goto LABEL_340;
              }
              uint64_t v68 = FigAtomWriterBeginAtom();
              if (v68) {
                goto LABEL_340;
              }
              uint64_t v68 = FigAtomWriterAppendVersionAndFlags();
              if (v68) {
                goto LABEL_340;
              }
              uint64_t appended = FigAtomWriterAppendData();
              FigAtomWriterEndAtom();
              unsigned int v66 = v148;
              if (appended) {
                goto LABEL_334;
              }
            }
            else
            {
              FigAtomWriterEndAtom();
              unsigned int v66 = v148;
            }
          }
          if (*((unsigned char *)v66 + 34))
          {
            *(void *)&long long v179 = 0;
            memset(buffer, 0, sizeof(buffer));
            LODWORD(valuePtr) = 0;
            LODWORD(v166) = 0;
            MovieTrackGetEncodedPixelsDimensions(*v66, (float *)&valuePtr, (float *)&v166);
            if (v71)
            {
              theBuffer[0] = (CMBlockBufferRef)vrev32_s8((int8x8_t)vmovn_s64(vcvtq_n_s64_f64(vcvtq_f64_f32((float32x2_t)__PAIR64__(v166, valuePtr)), 0x10uLL)));
              uint64_t v72 = FigAtomWriterInitWithParent();
              if (!v72)
              {
                uint64_t v72 = FigAtomWriterBeginAtom();
                if (!v72)
                {
                  uint64_t v72 = FigAtomWriterAppendVersionAndFlags();
                  if (!v72) {
                    uint64_t v72 = FigAtomWriterAppendData();
                  }
                }
              }
              uint64_t appended = v72;
            }
            else
            {
              uint64_t appended = 0;
            }
            FigAtomWriterEndAtom();
            FigAtomWriterEndAtom();
            if (appended) {
              goto LABEL_335;
            }
            goto LABEL_108;
          }
        }
      }
    }
    else
    {
      MovieTrackGetEncodedPixelsDimensions(v61, 0, 0);
      BOOL v64 = v69 != 0;
      if (v60) {
        goto LABEL_76;
      }
    }
    FigAtomWriterEndAtom();
    goto LABEL_108;
  }
LABEL_254:
  if (*(void *)(v9 + 40))
  {
    CMBlockBufferGetDataLength(*(CMBlockBufferRef *)(v9 + 40));
    uint64_t appended = FigAtomWriterAppendBlockBufferData();
  }
  else
  {
    cf[0] = 0;
    memset(buffer, 0, 32);
    memset(theString, 0, sizeof(theString));
    BOOL v119 = FigCFEqual() && *(unsigned char *)(v9 + 48) == 0;
    uint64_t v120 = 0;
    int v121 = 0;
    theBuffer[0] = (CMBlockBufferRef)@"com.apple.quicktime.mdta";
    theBuffer[1] = (CMBlockBufferRef)@"com.apple.quicktime.udta";
    *(void *)&long long v175 = @"org.mp4ra";
    *((void *)&v175 + 1) = @"com.apple.itunes";
    do
    {
      CMBlockBufferRef v122 = theBuffer[v120];
      CFDictionaryRef MovieMetadataItemArray = MovieInformationGetMovieMetadataItemArray(*(void *)(v9 + 8), v122);
      if (MovieMetadataItemArray)
      {
        buffer[v121] = v122;
        theString[0].i64[v121++] = (uint64_t)MovieMetadataItemArray;
      }
      ++v120;
    }
    while (v120 != 4);
    if (v119) {
      uint64_t v124 = *(void *)(v9 + 24);
    }
    else {
      uint64_t v124 = 0;
    }
    uint64_t v125 = createMetadataSerializerDictionaryWithMetadata(v121, (uint64_t)buffer, (uint64_t)theString, *(void *)(v9 + 112), 0, v124, *(const __CFDictionary **)(v9 + 32), (CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const __CFDictionary **)cf);
    CFTypeRef v126 = cf[0];
    if (!v125) {
      uint64_t v125 = appendMetadataFromMetadataSerializerDictionary((const __CFDictionary *)cf[0]);
    }
    uint64_t appended = v125;
    if (v126) {
      CFRelease(v126);
    }
  }
  if (appended)
  {
LABEL_336:
    FigAtomWriterEndAtom();
    goto LABEL_314;
  }
  if (*(unsigned char *)(v9 + 48))
  {
    *(void *)&long long v170 = 0;
    long long v169 = 0u;
    memset(theString, 0, sizeof(theString));
    CFArrayRef v127 = *(const __CFArray **)(v9 + 88);
    if (v127) {
      CFIndex v128 = CFArrayGetCount(v127);
    }
    else {
      CFIndex v128 = 0;
    }
    uint64_t v129 = FigAtomWriterInitWithParent();
    if (v129 || (uint64_t v129 = FigAtomWriterBeginAtom(), v129))
    {
      uint64_t appended = v129;
      goto LABEL_335;
    }
    if (*(unsigned char *)(v9 + 64))
    {
      *(void *)&long long v179 = 0;
      memset(buffer, 0, sizeof(buffer));
      newTimescale[0] = 0;
      unint64_t v166 = 0;
      DWORD2(valuePtr) = 0;
      *(void *)&long long valuePtr = 0;
      uint64_t BasicMetrics = MovieInformationGetBasicMetrics(*(void *)(v9 + 8), 0, 0, newTimescale, 0);
      if (BasicMetrics
        || (*(_OWORD *)CFTypeRef cf = *(_OWORD *)(v9 + 52),
            *(void *)&long long v158 = *(void *)(v9 + 68),
            CMTimeConvertScale((CMTime *)theBuffer, (CMTime *)cf, newTimescale[0], kCMTimeRoundingMethod_RoundHalfAwayFromZero), uint64_t v131 = (uint64_t)theBuffer[0], BasicMetrics = FigAtomWriterInitWithParent(), BasicMetrics)|| (BasicMetrics = FigAtomWriterBeginAtom(), BasicMetrics))
      {
LABEL_326:
        uint64_t appended = BasicMetrics;
        FigAtomWriterEndAtom();
        goto LABEL_335;
      }
      if (v131 < 0x100000000)
      {
        LODWORD(v166) = 0;
        HIDWORD(v166) = bswap32(v131);
      }
      else
      {
        LODWORD(valuePtr) = 1;
        *(void *)((char *)&valuePtr + 4) = bswap64(v131);
      }
      uint64_t appended = FigAtomWriterAppendData();
      FigAtomWriterEndAtom();
      if (appended)
      {
LABEL_335:
        FigAtomWriterEndAtom();
        goto LABEL_336;
      }
    }
    if (v128 >= 1)
    {
      for (CFIndex i = 0; v128 != i; ++i)
      {
        CFArrayRef v133 = (uint64_t *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v9 + 88), i);
        if (hasFormatDescriptionAndNonZeroMediaTimeScale(*v133))
        {
          *(void *)&long long v179 = 0;
          memset(buffer, 0, sizeof(buffer));
          CFArrayRef v134 = (_DWORD *)*v133;
          LODWORD(cf[0]) = 0;
          theBuffer[1] = 0;
          theBuffer[0] = 0;
          *(void *)&long long v175 = 0;
          LODWORD(valuePtr) = 0;
          LODWORD(v166) = 0;
          newTimescale[0] = 0;
          float v167 = 0.0;
          uint64_t BasicMetrics = MovieTrackGetBasicInfo((uint64_t)v134, 0, cf);
          if (BasicMetrics) {
            goto LABEL_326;
          }
          uint64_t BasicMetrics = MovieTrackGetTrackExtendsDefaultValues(v134, &valuePtr, &v166, newTimescale, &v167);
          if (BasicMetrics) {
            goto LABEL_326;
          }
          uint64_t BasicMetrics = FigAtomWriterInitWithParent();
          if (BasicMetrics) {
            goto LABEL_326;
          }
          uint64_t BasicMetrics = FigAtomWriterBeginAtom();
          if (BasicMetrics) {
            goto LABEL_326;
          }
          LODWORD(theBuffer[0]) = 0;
          HIDWORD(theBuffer[0]) = bswap32(cf[0]);
          theBuffer[1] = (CMBlockBufferRef)_byteswap_uint64(__PAIR64__(valuePtr, v166));
          *(void *)&long long v175 = _byteswap_uint64(__PAIR64__(newTimescale[0], LODWORD(v167)));
          uint64_t appended = FigAtomWriterAppendData();
          FigAtomWriterEndAtom();
          if (appended) {
            goto LABEL_335;
          }
        }
      }
    }
    FigAtomWriterEndAtom();
  }
  *(void *)&long long v179 = 0;
  memset(buffer, 0, sizeof(buffer));
  uint64_t v135 = *(void *)(v9 + 8);
  theString[0].i64[0] = 0;
  theBuffer[0] = 0;
  cf[0] = 0;
  LODWORD(valuePtr) = 0;
  uint64_t PSSHDataEntries = MovieInformationGetPSSHDataEntries(v135, theString);
  if (PSSHDataEntries) {
    goto LABEL_322;
  }
  if (!theString[0].i64[0])
  {
LABEL_312:
    FigAtomWriterEndAtom();
    goto LABEL_313;
  }
  uint64_t PSSHDataEntries = FigAtomWriterInitWithParent();
  if (PSSHDataEntries)
  {
LABEL_322:
    uint64_t appended = PSSHDataEntries;
    goto LABEL_336;
  }
  if (CFArrayGetCount((CFArrayRef)theString[0].i64[0]) < 1) {
    goto LABEL_312;
  }
  CFIndex v136 = 0;
  while (1)
  {
    CFDictionaryRef v137 = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)theString[0].i64[0], v136);
    if (!CFDictionaryGetValueIfPresent(v137, @"SystemID", (const void **)theBuffer)
      || !CFDictionaryGetValueIfPresent(v137, @"Data", cf))
    {
      goto LABEL_311;
    }
    size_t DataLength = CMBlockBufferGetDataLength(theBuffer[0]);
    size_t v139 = CMBlockBufferGetDataLength((CMBlockBufferRef)cf[0]);
    if (!DataLength) {
      break;
    }
    unsigned int v140 = v139;
    if (!v139) {
      break;
    }
    uint64_t PSSHDataEntries = FigAtomWriterBeginAtom();
    if (PSSHDataEntries) {
      goto LABEL_322;
    }
    uint64_t PSSHDataEntries = FigAtomWriterAppendVersionAndFlags();
    if (PSSHDataEntries) {
      goto LABEL_322;
    }
    uint64_t PSSHDataEntries = FigAtomWriterAppendBlockBufferData();
    if (PSSHDataEntries) {
      goto LABEL_322;
    }
    LODWORD(valuePtr) = bswap32(v140);
    uint64_t PSSHDataEntries = FigAtomWriterAppendData();
    if (PSSHDataEntries) {
      goto LABEL_322;
    }
    uint64_t PSSHDataEntries = FigAtomWriterAppendBlockBufferData();
    if (PSSHDataEntries) {
      goto LABEL_322;
    }
    uint64_t PSSHDataEntries = FigAtomWriterEndAtom();
    if (PSSHDataEntries) {
      goto LABEL_322;
    }
LABEL_311:
    if (++v136 >= CFArrayGetCount((CFArrayRef)theString[0].i64[0])) {
      goto LABEL_312;
    }
  }
  uint64_t appended = FigSignalErrorAt();
  FigAtomWriterEndAtom();
  if (!appended)
  {
LABEL_313:
    uint64_t appended = 0;
    *uint64_t v142 = blockBufferOut;
    CMBlockBufferRef blockBufferOut = 0;
  }
LABEL_314:
  *(void *)(v9 + 96) = 0;
  *(void *)(v9 + 104) = 0;
  *(unsigned char *)(v9 + 120) = 0;
  *(void *)(v9 + 112) = 0;
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  if (v152) {
    CFRelease(v152);
  }
  if (v143) {
    CFRelease(v143);
  }
  return appended;
}

uint64_t isMovieHeaderMakerSupportedFileType()
{
  if (FigFileTypeIsQTMovieFileType()) {
    return 1;
  }
  if (FigCFEqual()) {
    return 1;
  }
  if (FigCFEqual()) {
    return 1;
  }
  if (FigCFEqual()) {
    return 1;
  }
  if (FigCFEqual()) {
    return 1;
  }
  if (FigCFEqual()) {
    return 1;
  }
  uint64_t result = FigCFEqual();
  if (result) {
    return 1;
  }
  return result;
}

uint64_t MovieHeaderMakerSetShouldWriteMovieExtendsAtom(uint64_t a1, char a2)
{
  if (!a1) {
    return FigSignalErrorAt();
  }
  *(unsigned char *)(a1 + 48) = a2;
  return 0;
}

uint64_t MovieHeaderMakerSetMovieMetadataBlockBuffer(uint64_t a1, CFTypeRef cf)
{
  if (a1)
  {
    CFArrayRef v3 = *(const void **)(a1 + 40);
    *(void *)(a1 + 40) = cf;
    if (cf) {
      CFRetain(cf);
    }
    if (v3) {
      CFRelease(v3);
    }
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t MovieHeaderMakerTrackSetTrackMetadataBlockBuffer(uint64_t a1, uint64_t a2, CFTypeRef cf)
{
  if (a1 && a2)
  {
    CFTypeRef v4 = *(const void **)(a2 + 16);
    *(void *)(a2 + 16) = cf;
    if (cf) {
      CFRetain(cf);
    }
    if (v4) {
      CFRelease(v4);
    }
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t MovieHeaderMakerTrackSetShouldWriteCleanApertureDimensionsAtom(uint64_t a1, uint64_t a2, char a3)
{
  if (!a1 || !a2) {
    return FigSignalErrorAt();
  }
  *(unsigned char *)(a2 + 32) = a3;
  return 0;
}

uint64_t MovieHeaderMakerTrackSetShouldWriteProductionApertureDimensionsAtom(uint64_t a1, uint64_t a2, char a3)
{
  if (!a1 || !a2) {
    return FigSignalErrorAt();
  }
  *(unsigned char *)(a2 + 33) = a3;
  return 0;
}

uint64_t MovieHeaderMakerTrackSetShouldWriteEncodedPixelsDimensionsAtom(uint64_t a1, uint64_t a2, char a3)
{
  if (!a1 || !a2) {
    return FigSignalErrorAt();
  }
  *(unsigned char *)(a2 + 34) = a3;
  return 0;
}

uint64_t MovieHeaderMakerTrackSetSampleReferenceBaseURL(uint64_t a1, uint64_t a2, CFTypeRef cf)
{
  if (a1 && a2)
  {
    CFTypeRef v4 = *(const void **)(a2 + 24);
    *(void *)(a2 + 24) = cf;
    if (cf) {
      CFRetain(cf);
    }
    if (v4) {
      CFRelease(v4);
    }
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t MovieHeaderMakerTrackSetShouldWriteCompactSampleSizeAtomIfPossible(uint64_t a1, uint64_t a2, char a3)
{
  if (!a1 || !a2) {
    return FigSignalErrorAt();
  }
  *(unsigned char *)(a2 + 35) = a3;
  return 0;
}

uint64_t MovieHeaderMakerTrackSetShouldWriteRollSampleGroupAtoms(uint64_t a1, uint64_t a2, char a3)
{
  if (!a1 || !a2) {
    return FigSignalErrorAt();
  }
  *(unsigned char *)(a2 + 36) = a3;
  return 0;
}

uint64_t MovieHeaderMakerTrackSetNegativeCompositionOffsetsInISOFilePolicy(uint64_t a1, uint64_t a2, int a3)
{
  if (!a1 || !a2) {
    return FigSignalErrorAt();
  }
  *(_DWORD *)(a2 + 44) = a3;
  return 0;
}

uint64_t MovieHeaderMakerTrackGetNegativeCompositionOffsetsInISOFilePolicy(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  if (!a1 || !a2 || !a3) {
    return FigSignalErrorAt();
  }
  *a3 = *(_DWORD *)(a2 + 44);
  return 0;
}

uint64_t MovieHeaderMakerTrackSetShouldWriteSampleAuxiliaryInformationAtoms(uint64_t a1, uint64_t a2, char a3)
{
  if (!a1 || !a2) {
    return FigSignalErrorAt();
  }
  *(unsigned char *)(a2 + 40) = a3;
  return 0;
}

uint64_t MovieHeaderMakerAddByteCountToTrackRunDataOffsets(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return FigSignalErrorAt();
  }
  *(void *)(a1 + 128) = a2;
  return 0;
}

uint64_t MovieHeaderMakerTrackSetShouldWriteEditAtom(uint64_t a1, uint64_t a2, char a3)
{
  if (!a1) {
    return FigSignalErrorAt();
  }
  *(unsigned char *)(a2 + 37) = a3;
  return 0;
}

uint64_t MovieHeaderMakerTrackSetShouldWriteEditAtomInTrackFragment(uint64_t a1, uint64_t a2, char a3)
{
  if (!a1 || !a2) {
    return FigSignalErrorAt();
  }
  *(unsigned char *)(a2 + 38) = a3;
  return 0;
}

uint64_t MovieHeaderMakerTrackSetShouldAllowWritingZeroTrackDurationInEditListAtom(uint64_t a1, uint64_t a2, char a3)
{
  if (!a1 || !a2) {
    return FigSignalErrorAt();
  }
  *(unsigned char *)(a2 + 39) = a3;
  return 0;
}

uint64_t MovieHeaderMakerSetShouldWriteBaseMediaDecodeTimeAtomInTrackFragment(uint64_t a1, char a2)
{
  if (!a1) {
    return FigSignalErrorAt();
  }
  *(unsigned char *)(a1 + 136) = a2;
  return 0;
}

uint64_t MovieHeaderMakerSetShouldWriteBaseDataOffsetIsMovieFragmentAtomFlagInTrackFragment(uint64_t a1, char a2)
{
  if (!a1) {
    return FigSignalErrorAt();
  }
  *(unsigned char *)(a1 + 137) = a2;
  return 0;
}

uint64_t MovieHeaderMakerAddByteCountToChunkOffsets(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return FigSignalErrorAt();
  }
  *(void *)(a1 + 80) = a2;
  return 0;
}

uint64_t MovieHeaderMakerTrackDidWriteEditAtom(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  if (!a1 || !a2 || !a3) {
    return FigSignalErrorAt();
  }
  *a3 = *(unsigned char *)(a2 + 41);
  return 0;
}

uint64_t MovieHeaderMakerSetMovieExtendsHeaderFragmentDuration(uint64_t a1, long long *a2)
{
  if (a1)
  {
    if ((*((_DWORD *)a2 + 3) & 1) != 0
      && ((*((_DWORD *)a2 + 3) & 0x1D) != 1
       || (time1 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48], CMTime v7 = *(CMTime *)a2, CMTimeCompare(&time1, &v7) >= 1)))
    {
      return FigSignalErrorAt();
    }
    else
    {
      uint64_t result = 0;
      long long v6 = *a2;
      *(void *)(a1 + 68) = *((void *)a2 + 2);
      *(_OWORD *)(a1 + 52) = v6;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t MovieHeaderMakerCopyFileTypeMajorBrand(uint64_t a1, uint64_t a2, uint64_t a3, char a4, CFNumberRef *a5)
{
  if (isMovieHeaderMakerSupportedFileType() && a5)
  {
    if (FigCFEqual())
    {
      if (a4) {
        int v7 = 1769172789;
      }
      else {
        int v7 = 1836069938;
      }
    }
    else
    {
      if (FigCFEqual())
      {
        unsigned __int16 v8 = 22048;
      }
      else
      {
        if (!FigCFEqual())
        {
          if (FigCFEqual())
          {
            int v7 = 862416949;
            if (a4) {
              int v7 = 862416950;
            }
          }
          else if (FigCFEqual())
          {
            int v7 = 1835623985;
          }
          else if (FigCFEqual())
          {
            int v7 = 1768780148;
          }
          else
          {
            int v7 = 1903435808;
          }
          goto LABEL_12;
        }
        unsigned __int16 v8 = 16672;
      }
      int v7 = v8 | 0x4D340000;
    }
LABEL_12:
    int valuePtr = v7;
    *a5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
    return 0;
  }

  return FigSignalErrorAt();
}

uint64_t MovieHeaderMakerCopyFileTypeMinorVersion(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, CFNumberRef *a5)
{
  if (isMovieHeaderMakerSupportedFileType() && a5)
  {
    if (FigCFEqual() || FigCFEqual())
    {
      int v6 = 1;
LABEL_6:
      int valuePtr = v6;
LABEL_7:
      *a5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
      return 0;
    }
    if (!FigCFEqual())
    {
      if (FigCFEqual())
      {
        int v6 = 256;
        goto LABEL_6;
      }
      FigCFEqual();
    }
    int valuePtr = 0;
    goto LABEL_7;
  }

  return FigSignalErrorAt();
}

uint64_t MovieHeaderMakerCopyFileTypeCompatibleBrands(const __CFAllocator *a1, uint64_t a2, uint64_t a3, char a4, CFMutableArrayRef *a5)
{
  if (isMovieHeaderMakerSupportedFileType())
  {
    if (a5)
    {
      CFMutableArrayRef Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E4F1D510]);
      if (Mutable)
      {
        CFMutableArrayRef v9 = Mutable;
        if (FigCFEqual())
        {
          FigCFArrayAppendInt32();
          if (a4)
          {
            FigCFArrayAppendInt32();
            FigCFArrayAppendInt32();
            if (!FigCFEqual())
            {
LABEL_14:
              *a5 = v9;
              return 0;
            }
LABEL_13:
            FigCFArrayAppendInt32();
            goto LABEL_14;
          }
LABEL_6:
          FigCFArrayAppendInt32();
          goto LABEL_13;
        }
        if (FigCFEqual())
        {
          FigCFArrayAppendInt32();
        }
        else if (!FigCFEqual())
        {
          if (FigCFEqual())
          {
            FigCFArrayAppendInt32();
            if (a4) {
              goto LABEL_13;
            }
          }
          else if (FigCFEqual() || !FigCFEqual())
          {
            goto LABEL_13;
          }
          goto LABEL_6;
        }
        FigCFArrayAppendInt32();
        FigCFArrayAppendInt32();
        goto LABEL_13;
      }
    }
  }

  return FigSignalErrorAt();
}

uint64_t MovieHeaderMakerCopyFileTypeAtomAsBlockBuffer(const __CFAllocator *a1, const __CFNumber *a2, const __CFNumber *a3, CFArrayRef theArray, CMBlockBufferRef *a5)
{
  uint64_t valuePtr = 0;
  unsigned int v20 = 0;
  if (theArray) {
    CFIndex Count = CFArrayGetCount(theArray);
  }
  else {
    CFIndex Count = 0;
  }
  dataPointerOut = 0;
  CMBlockBufferRef theBuffer = 0;
  if (a2 && a3 && theArray && a5)
  {
    uint64_t v11 = CMBlockBufferCreateWithMemoryBlock(a1, 0, 4 * Count + 16, a1, 0, 0, 4 * Count + 16, 1u, &theBuffer);
    CMBlockBufferRef v12 = theBuffer;
    if (!v11)
    {
      uint64_t DataPointer = CMBlockBufferGetDataPointer(theBuffer, 0, 0, 0, &dataPointerOut);
      if (!DataPointer)
      {
        *(_DWORD *)dataPointerOut = bswap32(4 * Count + 16);
        uint64_t v14 = dataPointerOut;
        dataPointerOut += 4;
        *((_DWORD *)v14 + 1) = 1887007846;
        dataPointerOut += 4;
        CFNumberGetValue(a2, kCFNumberSInt32Type, (char *)&valuePtr + 4);
        HIDWORD(valuePtr) = bswap32(HIDWORD(valuePtr));
        *(_DWORD *)dataPointerOut = HIDWORD(valuePtr);
        dataPointerOut += 4;
        CFNumberGetValue(a3, kCFNumberSInt32Type, &valuePtr);
        LODWORD(valuePtr) = bswap32(valuePtr);
        *(_DWORD *)dataPointerOut = valuePtr;
        dataPointerOut += 4;
        if (Count >= 1)
        {
          for (CFIndex i = 0; i != Count; ++i)
          {
            CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(theArray, i);
            CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, &v20);
            unsigned int v20 = bswap32(v20);
            *(_DWORD *)dataPointerOut = v20;
            dataPointerOut += 4;
          }
        }
        uint64_t v11 = 0;
        *a5 = theBuffer;
        return v11;
      }
      uint64_t v11 = DataPointer;
      CMBlockBufferRef v12 = theBuffer;
    }
    if (v12) {
      CFRelease(v12);
    }
    return v11;
  }

  return FigSignalErrorAt();
}

uint64_t MovieHeaderMakerCopyMediaDataAtomHeaderAsBlockBuffer(CFAllocatorRef blockAllocator, int a2, unint64_t a3, CMBlockBufferRef *a4)
{
  CMBlockBufferRef destinationBuffer = 0;
  uint64_t sourceBytes = 0;
  if (a2) {
    size_t v5 = 16;
  }
  else {
    size_t v5 = 8;
  }
  if (a4)
  {
    if ((a3 & 0x8000000000000000) == 0)
    {
      uint64_t v8 = CMBlockBufferCreateWithMemoryBlock(blockAllocator, 0, v5, blockAllocator, 0, 0, v5, 1u, &destinationBuffer);
      if (v8) {
        goto LABEL_21;
      }
      if (!HIDWORD(a3))
      {
        if (a2)
        {
          uint64_t sourceBytes = 0x6564697708000000;
          size_t v9 = 8;
          uint64_t v8 = CMBlockBufferReplaceDataBytes(&sourceBytes, destinationBuffer, 0, 8uLL);
          if (v8) {
            goto LABEL_21;
          }
        }
        else
        {
          size_t v9 = 0;
        }
        uint64_t sourceBytes = bswap32(a3) | 0x7461646D00000000;
        uint64_t v8 = CMBlockBufferReplaceDataBytes(&sourceBytes, destinationBuffer, v9, 8uLL);
        if (!v8)
        {
LABEL_18:
          uint64_t v10 = 0;
          *a4 = destinationBuffer;
          return v10;
        }
        goto LABEL_21;
      }
      if (a2 == 1)
      {
        uint64_t sourceBytes = 0x7461646D01000000;
        uint64_t v8 = CMBlockBufferReplaceDataBytes(&sourceBytes, destinationBuffer, 0, 8uLL);
        if (!v8)
        {
          unint64_t v12 = bswap64(a3 + 8);
          uint64_t v10 = CMBlockBufferReplaceDataBytes(&v12, destinationBuffer, 8uLL, 8uLL);
          if (v10) {
            goto LABEL_14;
          }
          goto LABEL_18;
        }
LABEL_21:
        uint64_t v10 = v8;
LABEL_14:
        if (destinationBuffer) {
          CFRelease(destinationBuffer);
        }
        return v10;
      }
    }
    uint64_t v8 = FigSignalErrorAt();
    goto LABEL_21;
  }

  return FigSignalErrorAt();
}

uint64_t MovieHeaderMakerCopyMovieFragmentHeaderAsBlockBuffer(uint64_t a1, const __CFAllocator *a2, uint64_t a3, int a4, CMBlockBufferRef *a5)
{
  uint64_t v72 = 0;
  long long v70 = 0u;
  long long v71 = 0u;
  long long v69 = 0u;
  CMBlockBufferRef blockBufferOut = 0;
  *(_DWORD *)(a1 + 124) = a4;
  *(void *)(a1 + 112) = a3;
  *(unsigned char *)(a1 + 120) = FigFileTypeIsISOFileType();
  uint64_t v8 = CMBlockBufferCreateEmpty(a2, 0x40u, 0, &blockBufferOut);
  if (v8 || (uint64_t v8 = FigAtomWriterInitWithBlockBuffer(), v8))
  {
    uint64_t appended = v8;
  }
  else
  {
    unsigned int v66 = a5;
    CFArrayRef v9 = *(const __CFArray **)(a1 + 88);
    if (!v9 || (CFIndex Count = CFArrayGetCount(v9), Count < 1))
    {
LABEL_201:
      FigAtomWriterEndAtom();
      uint64_t appended = 0;
      CMBlockBufferRef *v66 = blockBufferOut;
      *(_DWORD *)(a1 + 124) = 0;
      *(void *)(a1 + 112) = 0;
      *(unsigned char *)(a1 + 120) = 0;
      return appended;
    }
    CFIndex v11 = Count;
    CFIndex v12 = 0;
    while (1)
    {
      CFNumberRef ValueAtIndex = (uint64_t *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 88), v12);
      LODWORD(v84) = 0;
      uint64_t v14 = MovieTrackFragmentNumTrackRuns(*ValueAtIndex, &v84);
      if (v14) {
        goto LABEL_209;
      }
      char v15 = *((unsigned char *)ValueAtIndex + 37);
      if (v15) {
        char v15 = *((unsigned char *)ValueAtIndex + 38) != 0;
      }
      if v84 || (v15) {
        break;
      }
      if (v11 == ++v12) {
        goto LABEL_201;
      }
    }
    CFArrayRef v16 = *(const __CFArray **)(a1 + 88);
    if (v16) {
      CFIndex v17 = CFArrayGetCount(v16);
    }
    else {
      CFIndex v17 = 0;
    }
    uint64_t v14 = FigAtomWriterBeginAtom();
    if (v14)
    {
LABEL_209:
      uint64_t appended = v14;
    }
    else
    {
      uint64_t v87 = 0;
      long long v85 = 0u;
      long long v86 = 0u;
      long long v84 = 0u;
      LODWORD(v74) = bswap32(*(_DWORD *)(a1 + 124));
      uint64_t v18 = FigAtomWriterInitWithParent();
      if (v18
        || (uint64_t v18 = FigAtomWriterBeginAtom(), v18)
        || (uint64_t v18 = FigAtomWriterAppendVersionAndFlags(), v18))
      {
        uint64_t appended = v18;
LABEL_205:
        FigAtomWriterEndAtom();
      }
      else
      {
        uint64_t appended = FigAtomWriterAppendData();
        FigAtomWriterEndAtom();
        if (!appended)
        {
          if (v17 >= 1)
          {
            CFIndex v20 = 0;
            CFAllocatorRef structureAllocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
            while (1)
            {
              uint64_t v21 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 88), v20);
              uint64_t v22 = (uint64_t)v21;
              uint64_t v77 = 0;
              long long v75 = 0u;
              long long v76 = 0u;
              long long v74 = 0u;
              int v73 = 0;
              BOOL v23 = v21[37] && v21[38] && FigCFEqual() == 0;
              uint64_t v24 = MovieTrackFragmentNumTrackRuns(*(void *)v22, &v73);
              if (v24)
              {
LABEL_210:
                uint64_t appended = v24;
                goto LABEL_205;
              }
              CFIndex v67 = v20;
              if (v73) {
                int v25 = 1;
              }
              else {
                int v25 = v23;
              }
              if (v25 == 1)
              {
                uint64_t v24 = FigAtomWriterInitWithParent();
                if (v24) {
                  goto LABEL_210;
                }
                uint64_t v24 = FigAtomWriterBeginAtom();
                if (v24) {
                  goto LABEL_210;
                }
                uint64_t v87 = 0;
                long long v85 = 0u;
                long long v86 = 0u;
                long long v84 = 0u;
                uint64_t v26 = *(void *)v22;
                LODWORD(v97) = 0;
                LODWORD(v93) = 0;
                BYTE4(v96) = 0;
                LODWORD(v92) = 0;
                LODWORD(v91) = 0;
                LODWORD(v90) = 0;
                LODWORD(v89) = 0;
                uint64_t BasicInfo = MovieTrackGetBasicInfo(v26, 0, &v97);
                if (BasicInfo) {
                  goto LABEL_203;
                }
                int v28 = *(unsigned __int8 *)(a1 + 137);
                uint64_t BasicInfo = MovieTrackFragmentGetTrackFragmentHeaderSampleDescriptionIndex(v26, &v92, (unsigned char *)&v96 + 4);
                if (BasicInfo) {
                  goto LABEL_203;
                }
                int v29 = BYTE4(v96);
                uint64_t BasicInfo = MovieTrackFragmentGetTrackFragmentHeaderDefaultSampleDuration(v26, &v91, (unsigned char *)&v96 + 4);
                if (BasicInfo) {
                  goto LABEL_203;
                }
                int v30 = BYTE4(v96);
                uint64_t BasicInfo = MovieTrackFragmentGetTrackFragmentHeaderDefaultSampleSize(v26, &v90, (unsigned char *)&v96 + 4);
                if (BasicInfo) {
                  goto LABEL_203;
                }
                CFIndex v31 = v17;
                int v32 = BYTE4(v96);
                uint64_t BasicInfo = MovieTrackFragmentGetTrackFragmentHeaderDefaultSampleFlags(v26, &v89, (unsigned char *)&v96 + 4);
                if (BasicInfo) {
                  goto LABEL_203;
                }
                char v33 = v28 == 0;
                if (v29) {
                  v33 |= 2u;
                }
                if (v30) {
                  v33 |= 8u;
                }
                if (v32) {
                  v33 |= 0x10u;
                }
                char v34 = BYTE4(v96) ? v33 | 0x20 : v33;
                uint64_t BasicInfo = FigAtomWriterInitWithParent();
                if (BasicInfo) {
                  goto LABEL_203;
                }
                uint64_t BasicInfo = FigAtomWriterBeginAtom();
                if (BasicInfo) {
                  goto LABEL_203;
                }
                uint64_t BasicInfo = FigAtomWriterAppendVersionAndFlags();
                if (BasicInfo) {
                  goto LABEL_203;
                }
                LODWORD(v93) = bswap32(v97);
                uint64_t BasicInfo = FigAtomWriterAppendData();
                if (BasicInfo) {
                  goto LABEL_203;
                }
                CFIndex v17 = v31;
                if (v34)
                {
                  LODWORD(v82) = 0;
                  v98[0] = 0;
                  uint64_t BasicInfo = MovieTrackFragmentNumTrackRuns(v26, &v82);
                  if (BasicInfo) {
                    goto LABEL_203;
                  }
                  uint64_t v35 = (unint64_t *)(v22 + 80);
                  if (v82)
                  {
                    uint64_t BasicInfo = MovieTrackFragmentGetDataOffsetAtTrackRunIndex(v26, 0, (void *)(v22 + 80));
                    if (BasicInfo) {
                      goto LABEL_203;
                    }
                    unint64_t v36 = *v35;
                  }
                  else
                  {
                    unint64_t v36 = 0;
                    unint64_t *v35 = 0;
                  }
                  v98[0] = (CMBlockBufferRef)bswap64(v36);
                  uint64_t BasicInfo = FigAtomWriterAppendData();
                  if (BasicInfo) {
                    goto LABEL_203;
                  }
                }
                if ((v34 & 2) != 0
                  && (LODWORD(v98[0]) = bswap32(v92),
                      uint64_t BasicInfo = FigAtomWriterAppendData(),
                      BasicInfo)
                  || (v34 & 8) != 0
                  && (LODWORD(v98[0]) = bswap32(v91),
                      uint64_t BasicInfo = FigAtomWriterAppendData(),
                      BasicInfo)
                  || (v34 & 0x10) != 0
                  && (LODWORD(v98[0]) = bswap32(v90),
                      uint64_t BasicInfo = FigAtomWriterAppendData(),
                      BasicInfo))
                {
LABEL_203:
                  uint64_t appended = BasicInfo;
LABEL_204:
                  FigAtomWriterEndAtom();
                  goto LABEL_205;
                }
                if ((v34 & 0x20) != 0)
                {
                  LODWORD(v98[0]) = bswap32(v89);
                  uint64_t appended = FigAtomWriterAppendData();
                  FigAtomWriterEndAtom();
                  if (appended) {
                    goto LABEL_205;
                  }
                }
                else
                {
                  FigAtomWriterEndAtom();
                }
                if (v23)
                {
                  uint64_t appended = appendEditAtom(a1, (uint64_t *)v22, 0);
                  if (appended || !v73)
                  {
                    FigAtomWriterEndAtom();
                    if (appended) {
                      goto LABEL_206;
                    }
                    goto LABEL_197;
                  }
                }
                else if (!v73)
                {
                  goto LABEL_196;
                }
                if (*(unsigned char *)(a1 + 136))
                {
                  uint64_t v87 = 0;
                  long long v85 = 0u;
                  long long v86 = 0u;
                  long long v84 = 0u;
                  LOBYTE(v93) = 0;
                  uint64_t v97 = 0;
                  v98[0] = 0;
                  uint64_t BasicInfo = MovieTrackFragmentGetTrackFragmentBaseMediaDecodeTimeValue(*(void *)v22, v98, (char *)&v93);
                  if (BasicInfo) {
                    goto LABEL_203;
                  }
                  if (v93 != 1)
                  {
                    uint64_t appended = 4294950954;
                    goto LABEL_204;
                  }
                  uint64_t BasicInfo = FigAtomWriterInitWithParent();
                  if (BasicInfo) {
                    goto LABEL_203;
                  }
                  uint64_t BasicInfo = FigAtomWriterBeginAtom();
                  if (BasicInfo) {
                    goto LABEL_203;
                  }
                  uint64_t BasicInfo = FigAtomWriterAppendVersionAndFlags();
                  if (BasicInfo) {
                    goto LABEL_203;
                  }
                  uint64_t v97 = (OpaqueCMBlockBuffer *)bswap64((unint64_t)v98[0]);
                  uint64_t appended = FigAtomWriterAppendData();
                  FigAtomWriterEndAtom();
                  if (appended) {
                    goto LABEL_205;
                  }
                }
                if (*(unsigned char *)(v22 + 40))
                {
                  LOBYTE(v90) = 0;
                  LODWORD(v91) = 0;
                  uint64_t v97 = 0;
                  CMBlockBufferRef v93 = 0;
                  LOBYTE(v89) = 0;
                  if (*(unsigned char *)(a1 + 137) == 1)
                  {
                    uint64_t appended = MovieTrackFragmentGetSampleAuxInformation(*(void *)v22, &v90, &v91, &v97, &v93, &v89);
                    if (!appended)
                    {
                      unsigned int v37 = v91;
                      if (v91)
                      {
                        uint64_t v38 = v93;
                        LODWORD(v92) = v91;
                        uint64_t v87 = 0;
                        long long v85 = 0u;
                        long long v86 = 0u;
                        long long v84 = 0u;
                        v98[0] = 0;
                        uint64_t BasicInfo = FigAtomWriterInitWithParent();
                        if (BasicInfo) {
                          goto LABEL_203;
                        }
                        uint64_t BasicInfo = FigAtomWriterBeginAtom();
                        if (BasicInfo) {
                          goto LABEL_203;
                        }
                        uint64_t BasicInfo = FigAtomWriterAppendVersionAndFlags();
                        if (BasicInfo) {
                          goto LABEL_203;
                        }
                        LODWORD(v92) = bswap32(v37);
                        uint64_t BasicInfo = FigAtomWriterAppendData();
                        if (BasicInfo) {
                          goto LABEL_203;
                        }
                        CMBlockBufferGetDataLength(v38);
                        uint64_t BasicInfo = FigAtomWriterAppendBlockBufferData();
                        if (BasicInfo) {
                          goto LABEL_203;
                        }
                        uint64_t BasicInfo = FigAtomWriterGetAtomGlobalDataOffset();
                        if (BasicInfo) {
                          goto LABEL_203;
                        }
                        CMBlockBufferRef v39 = v98[0];
                        FigAtomWriterEndAtom();
                        unsigned int v40 = v91;
                        uint64_t v41 = v97;
                        LOBYTE(v92) = (_BYTE)v90;
                        uint64_t v87 = 0;
                        long long v85 = 0u;
                        long long v86 = 0u;
                        long long v84 = 0u;
                        uint64_t BasicInfo = FigAtomWriterInitWithParent();
                        if (BasicInfo) {
                          goto LABEL_203;
                        }
                        uint64_t BasicInfo = FigAtomWriterBeginAtom();
                        if (BasicInfo) {
                          goto LABEL_203;
                        }
                        uint64_t BasicInfo = FigAtomWriterAppendVersionAndFlags();
                        if (BasicInfo) {
                          goto LABEL_203;
                        }
                        uint64_t BasicInfo = FigAtomWriterAppendData();
                        if (BasicInfo) {
                          goto LABEL_203;
                        }
                        LODWORD(v98[0]) = bswap32(v40);
                        uint64_t v42 = FigAtomWriterAppendData();
                        uint64_t appended = v42;
                        if (v41 && !v42)
                        {
                          CMBlockBufferGetDataLength(v41);
                          uint64_t appended = FigAtomWriterAppendBlockBufferData();
                        }
                        FigAtomWriterEndAtom();
                        if (appended) {
                          goto LABEL_205;
                        }
                        uint64_t v43 = (uint64_t)v39 + 4;
                        uint64_t v87 = 0;
                        long long v85 = 0u;
                        long long v86 = 0u;
                        long long v84 = 0u;
                        LODWORD(v92) = 1;
                        uint64_t v44 = FigAtomWriterInitWithParent();
                        if (!v44)
                        {
                          uint64_t v44 = FigAtomWriterBeginAtom();
                          if (!v44)
                          {
                            uint64_t v44 = FigAtomWriterAppendVersionAndFlags();
                            if (!v44)
                            {
                              LODWORD(v92) = 0x1000000;
                              uint64_t v44 = FigAtomWriterAppendData();
                              if (!v44)
                              {
                                if (v43 <= 0xFFFFFFFFLL) {
                                  LODWORD(v98[0]) = bswap32(v43);
                                }
                                else {
                                  v98[0] = (CMBlockBufferRef)bswap64(v43);
                                }
                                uint64_t v44 = FigAtomWriterAppendData();
                              }
                            }
                          }
                        }
                        uint64_t appended = v44;
                        FigAtomWriterEndAtom();
                      }
                    }
                    if (appended) {
                      goto LABEL_205;
                    }
                  }
                  else
                  {
                    uint64_t appended = FigSignalErrorAt();
                    if (appended) {
                      goto LABEL_205;
                    }
                  }
                }
                uint64_t v24 = appendSampleGroupDescriptionAtoms((void *)v22, (uint64_t (*)(void, CFDictionaryRef *))MovieTrackFragmentCopySampleGroupDescriptionArrays);
                if (v24) {
                  goto LABEL_210;
                }
                uint64_t v24 = appendSampleToGroupAtoms(a1, v22, MovieTrackFragmentCopySampleGroupArray);
                if (v24) {
                  goto LABEL_210;
                }
                if (v73 >= 1)
                {
                  CFIndex v45 = 0;
                  do
                  {
                    uint64_t v87 = 0;
                    long long v85 = 0u;
                    long long v86 = 0u;
                    long long v84 = 0u;
                    uint64_t v46 = *(void *)v22;
                    uint64_t v82 = 0;
                    uint64_t v83 = 0;
                    uint64_t v81 = 0;
                    char v80 = 0;
                    int v79 = 0;
                    __int16 v78 = 0;
                    uint64_t DataOffsetAtTrackRunIndex = MovieTrackFragmentNumSamplesAtTrackRunIndex(v46, v45, (_DWORD *)&v83 + 1);
                    if (DataOffsetAtTrackRunIndex) {
                      goto LABEL_119;
                    }
                    uint64_t DataOffsetAtTrackRunIndex = MovieTrackFragmentGetDataOffsetAtTrackRunIndex(v46, v45, &v82);
                    if (DataOffsetAtTrackRunIndex) {
                      goto LABEL_119;
                    }
                    uint64_t DataOffsetAtTrackRunIndex = MovieTrackFragmentGetFirstSampleFlagsAtTrackRunIndex(v46, v45, &v81, &v80);
                    if (DataOffsetAtTrackRunIndex) {
                      goto LABEL_119;
                    }
                    uint64_t DataOffsetAtTrackRunIndex = getTimeValueToAddToCompositionOffsets(a1, v22, 0, &v79, &v78, (unsigned char *)&v78 + 1);
                    if (DataOffsetAtTrackRunIndex) {
                      goto LABEL_119;
                    }
                    if (HIBYTE(v78))
                    {
                      uint64_t DataOffsetAtTrackRunIndex = FigSignalErrorAt();
LABEL_119:
                      uint64_t appended = DataOffsetAtTrackRunIndex;
                      goto LABEL_120;
                    }
                    int v48 = v79;
                    uint64_t v97 = 0;
                    v98[0] = 0;
                    uint64_t v95 = 0;
                    uint64_t v96 = 0;
                    int v94 = 0;
                    CMBlockBufferRef v92 = 0;
                    CMBlockBufferRef v93 = 0;
                    CMBlockBufferRef v90 = 0;
                    CMBlockBufferRef v91 = 0;
                    uint64_t SampleDurationArrayBbufAtTrackRunIndex = MovieTrackFragmentNumSamplesAtTrackRunIndex(v46, v45, (_DWORD *)&v96 + 1);
                    if (SampleDurationArrayBbufAtTrackRunIndex) {
                      goto LABEL_191;
                    }
                    uint64_t SampleDurationArrayBbufAtTrackRunIndex = MovieTrackFragmentGetSampleDurationArrayBbufAtTrackRunIndex(v46, v45, &v96, &v93);
                    if (SampleDurationArrayBbufAtTrackRunIndex) {
                      goto LABEL_191;
                    }
                    uint64_t SampleDurationArrayBbufAtTrackRunIndex = MovieTrackFragmentGetSampleSizeArrayBbufAtTrackRunIndex(v46, v45, (_DWORD *)&v95 + 1, &v92);
                    if (SampleDurationArrayBbufAtTrackRunIndex) {
                      goto LABEL_191;
                    }
                    uint64_t SampleDurationArrayBbufAtTrackRunIndex = MovieTrackFragmentGetSampleFlagsArrayBbufAtTrackRunIndex(v46, v45, &v95, &v91);
                    if (SampleDurationArrayBbufAtTrackRunIndex) {
                      goto LABEL_191;
                    }
                    uint64_t SampleDurationArrayBbufAtTrackRunIndex = MovieTrackFragmentGetSampleCompositionTimeOffsetArrayBbufAtTrackRunIndex(v46, v45, &v94, &v90);
                    if (SampleDurationArrayBbufAtTrackRunIndex) {
                      goto LABEL_191;
                    }
                    int v50 = v96 != 0;
                    CMBlockBufferRef v51 = v93;
                    if (!v96) {
                      CMBlockBufferRef v51 = 0;
                    }
                    __int16 v52 = (_WORD)v50 << 8;
                    if (v96) {
                      int v53 = 2;
                    }
                    else {
                      int v53 = 1;
                    }
                    if (HIDWORD(v95))
                    {
                      CMBlockBufferRef v51 = v92;
                      __int16 v52 = ((v96 != 0) << 8) | 0x200;
                      int v50 = v53;
                    }
                    if (v95)
                    {
                      CMBlockBufferRef v51 = v91;
                      v52 |= 0x400u;
                      ++v50;
                    }
                    if (v94) {
                      CMBlockBufferRef v54 = v90;
                    }
                    else {
                      CMBlockBufferRef v54 = v51;
                    }
                    if (v94) {
                      __int16 v55 = v52 | 0x800;
                    }
                    else {
                      __int16 v55 = v52;
                    }
                    if (v94) {
                      ++v50;
                    }
                    if (v50)
                    {
                      if (v50 == 1)
                      {
                        if (v54) {
                          CMBlockBufferRef v54 = (CMBlockBufferRef)CFRetain(v54);
                        }
                        v98[0] = v54;
                      }
                      else
                      {
                        uint64_t SampleDurationArrayBbufAtTrackRunIndex = CMBlockBufferCreateEmpty(structureAllocator, 0x10u, 0, v98);
                        if (SampleDurationArrayBbufAtTrackRunIndex) {
                          goto LABEL_191;
                        }
                        uint64_t SampleDurationArrayBbufAtTrackRunIndex = CMByteStreamCreateWritableForBlockBuffer();
                        if (SampleDurationArrayBbufAtTrackRunIndex) {
                          goto LABEL_191;
                        }
                        if (HIDWORD(v96))
                        {
                          size_t v56 = 0;
                          unint64_t v57 = 0;
                          while (1)
                          {
                            uint64_t v89 = 0;
                            if ((v55 & 0x100) != 0)
                            {
                              destinatiouint64_t n = 0;
                              uint64_t SampleDurationArrayBbufAtTrackRunIndex = CMBlockBufferCopyDataBytes(v93, v56, 4uLL, &destination);
                              if (SampleDurationArrayBbufAtTrackRunIndex) {
                                break;
                              }
                              uint64_t SampleDurationArrayBbufAtTrackRunIndex = CMByteStreamAppend();
                              if (SampleDurationArrayBbufAtTrackRunIndex) {
                                break;
                              }
                            }
                            if ((v55 & 0x200) != 0)
                            {
                              destinatiouint64_t n = 0;
                              uint64_t SampleDurationArrayBbufAtTrackRunIndex = CMBlockBufferCopyDataBytes(v92, v56, 4uLL, &destination);
                              if (SampleDurationArrayBbufAtTrackRunIndex) {
                                break;
                              }
                              uint64_t SampleDurationArrayBbufAtTrackRunIndex = CMByteStreamAppend();
                              if (SampleDurationArrayBbufAtTrackRunIndex) {
                                break;
                              }
                            }
                            if ((v55 & 0x400) != 0)
                            {
                              destinatiouint64_t n = 0;
                              uint64_t SampleDurationArrayBbufAtTrackRunIndex = CMBlockBufferCopyDataBytes(v91, v56, 4uLL, &destination);
                              if (SampleDurationArrayBbufAtTrackRunIndex) {
                                break;
                              }
                              uint64_t SampleDurationArrayBbufAtTrackRunIndex = CMByteStreamAppend();
                              if (SampleDurationArrayBbufAtTrackRunIndex) {
                                break;
                              }
                            }
                            if ((v55 & 0x800) != 0)
                            {
                              destinatiouint64_t n = 0;
                              uint64_t SampleDurationArrayBbufAtTrackRunIndex = CMBlockBufferCopyDataBytes(v90, v56, 4uLL, &destination);
                              if (SampleDurationArrayBbufAtTrackRunIndex) {
                                break;
                              }
                              destinatiouint64_t n = bswap32(bswap32(destination) + v48);
                              uint64_t SampleDurationArrayBbufAtTrackRunIndex = CMByteStreamAppend();
                              if (SampleDurationArrayBbufAtTrackRunIndex) {
                                break;
                              }
                            }
                            ++v57;
                            v56 += 4;
                            if (v57 >= HIDWORD(v96)) {
                              goto LABEL_165;
                            }
                          }
LABEL_191:
                          uint64_t appended = SampleDurationArrayBbufAtTrackRunIndex;
                          if (v98[0]) {
                            CFRelease(v98[0]);
                          }
                          __int16 v55 = 0;
                          CMBlockBufferRef v58 = 0;
                          goto LABEL_166;
                        }
                      }
                    }
LABEL_165:
                    uint64_t appended = 0;
                    CMBlockBufferRef v58 = v98[0];
                    v98[0] = 0;
LABEL_166:
                    if (v97) {
                      CFRelease(v97);
                    }
                    if (appended) {
                      goto LABEL_182;
                    }
                    if (v80) {
                      char v59 = 5;
                    }
                    else {
                      char v59 = 1;
                    }
                    if ((v55 & 0x800) == 0) {
                      LOBYTE(v78) = 0;
                    }
                    uint64_t v60 = FigAtomWriterInitWithParent();
                    if (v60) {
                      goto LABEL_195;
                    }
                    uint64_t v60 = FigAtomWriterBeginAtom();
                    if (v60) {
                      goto LABEL_195;
                    }
                    char v61 = v59 | v55;
                    uint64_t v60 = FigAtomWriterAppendVersionAndFlags();
                    if (v60) {
                      goto LABEL_195;
                    }
                    LODWORD(v83) = bswap32(HIDWORD(v83));
                    uint64_t v60 = FigAtomWriterAppendData();
                    if (v60) {
                      goto LABEL_195;
                    }
                    uint64_t v62 = *(void *)(a1 + 128) + v82 - *(void *)(v22 + 80);
                    uint64_t v82 = v62;
                    if (v62 != (int)v62)
                    {
                      uint64_t v60 = FigSignalErrorAt();
LABEL_195:
                      uint64_t appended = v60;
LABEL_182:
                      FigAtomWriterEndAtom();
                      if (!v58) {
                        goto LABEL_187;
                      }
LABEL_186:
                      CFRelease(v58);
                      goto LABEL_187;
                    }
                    HIDWORD(v81) = bswap32(v62);
                    uint64_t v60 = FigAtomWriterAppendData();
                    if (v60) {
                      goto LABEL_195;
                    }
                    if ((v61 & 4) != 0)
                    {
                      LODWORD(v98[0]) = bswap32(v81);
                      uint64_t appended = FigAtomWriterAppendData();
                      if (appended) {
                        goto LABEL_182;
                      }
                    }
                    if (v58)
                    {
                      CMBlockBufferGetDataLength(v58);
                      uint64_t appended = FigAtomWriterAppendBlockBufferData();
                      FigAtomWriterEndAtom();
                      goto LABEL_186;
                    }
                    uint64_t appended = 0;
LABEL_120:
                    FigAtomWriterEndAtom();
LABEL_187:
                    if (appended) {
                      goto LABEL_205;
                    }
                    CFIndex v45 = (v45 + 1);
                  }
                  while ((int)v45 < v73);
                }
              }
LABEL_196:
              FigAtomWriterEndAtom();
LABEL_197:
              CFIndex v20 = v67 + 1;
              if (v67 + 1 == v17) {
                goto LABEL_201;
              }
            }
          }
          goto LABEL_201;
        }
      }
    }
LABEL_206:
    FigAtomWriterEndAtom();
  }
  CMBlockBufferRef v64 = blockBufferOut;
  *(_DWORD *)(a1 + 124) = 0;
  *(void *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 120) = 0;
  if (v64) {
    CFRelease(v64);
  }
  return appended;
}

CFArrayRef hasFormatDescriptionAndNonZeroMediaTimeScale(uint64_t a1)
{
  CFArrayRef result = MovieTrackGetNumFormatDescriptions(a1);
  if (result) {
    return (const __CFArray *)(MovieTrackGetMediaTimeScale(a1) != 0);
  }
  return result;
}

uint64_t getTimeValueToAddToCompositionOffsets(uint64_t a1, uint64_t a2, int a3, int *a4, unsigned char *a5, unsigned char *a6)
{
  uint64_t v10 = *(void **)(a1 + 8);
  uint64_t v11 = *(void *)a2;
  int value = 0;
  LOBYTE(v12) = *(unsigned char *)(a1 + 120);
  if ((_BYTE)v12)
  {
    int v12 = *(_DWORD *)(a2 + 44);
    if (v12 != 1)
    {
      if (!v12)
      {
        Mediaint Type = MovieTrackGetMediaType(v11);
        BOOL v16 = MediaType == 1635088502 || MediaType == 1986618469 || MediaType == 1885954932;
        if (!v16 || (CFArrayRef v17 = MovieTrackCopyFormatDescriptionArray(v11)) == 0)
        {
          LOBYTE(v12) = 1;
          goto LABEL_26;
        }
        CFArrayRef v18 = v17;
        CFIndex Count = CFArrayGetCount(v17);
        if (Count < 1)
        {
LABEL_17:
          CFRelease(v18);
          LOBYTE(v12) = 1;
          goto LABEL_26;
        }
        CFIndex v20 = Count;
        CFIndex v21 = 0;
        while (1)
        {
          CFNumberRef ValueAtIndex = (const opaqueCMFormatDescription *)CFArrayGetValueAtIndex(v18, v21);
          if (CMFormatDescriptionGetMediaSubType(ValueAtIndex) == 1635148593) {
            break;
          }
          if (v20 == ++v21) {
            goto LABEL_17;
          }
        }
        CFRelease(v18);
      }
      uint64_t result = getCompositionOffsetToDTDDeltaShift(v10, v11, a3, &value);
      if (result) {
        return result;
      }
      if ((*(_DWORD *)(a2 + 68) & 0x1D) == 1)
      {
        int32_t MediaTimeScale = MovieTrackGetMediaTimeScale(v11);
        memset(&v28, 0, sizeof(v28));
        CMTime time = *(CMTime *)(a2 + 56);
        CMTimeConvertScale(&v28, &time, MediaTimeScale, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
        if (v28.value < value) {
          return FigSignalErrorAt();
        }
        LOBYTE(v12) = 0;
        int value = v28.value;
      }
      else
      {
        LOBYTE(v12) = 0;
      }
    }
  }
LABEL_26:
  char v25 = *(unsigned char *)(a2 + 48);
  if (v25)
  {
    int v26 = value;
    char v25 = *(_DWORD *)(a2 + 52) != value;
  }
  else
  {
    *(unsigned char *)(a2 + 48) = 1;
    int v26 = value;
    *(_DWORD *)(a2 + 52) = value;
  }
  *a4 = v26;
  if (a5) {
    *a5 = v12;
  }
  uint64_t result = 0;
  if (a6) {
    *a6 = v25;
  }
  return result;
}

uint64_t getCompositionOffsetToDTDDeltaShift(void *a1, uint64_t a2, int a3, int *a4)
{
  int v11 = 0;
  uint64_t result = MovieTrackGetCompositionOffsetRange(a1, a2, &v11, 0);
  if (!result)
  {
    if (a3)
    {
      int v9 = v11;
    }
    else
    {
      int v10 = 0;
      uint64_t result = MovieTrackFragmentGetCompositionOffsetRange((uint64_t)a1, a2, &v10, 0);
      if (result) {
        return result;
      }
      int v9 = v11;
      if (v11 >= v10) {
        int v9 = v10;
      }
    }
    uint64_t result = 0;
    *a4 = -v9 & (v9 >> 31);
  }
  return result;
}

uint64_t appendMediaInfoAtom(uint64_t a1, uint64_t *a2)
{
  uint64_t v213 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = FigAtomWriterInitWithParent();
  if (v4 || (uint64_t v4 = FigAtomWriterBeginAtom(), v4))
  {
    uint64_t v11 = v4;
    goto LABEL_314;
  }
  Mediaint Type = MovieTrackGetMediaType(*a2);
  if (MediaType > 1936684397)
  {
    if (MediaType == 1936684398)
    {
      *(void *)&long long v200 = 0;
      long long v198 = 0u;
      long long v199 = 0u;
      *(_OWORD *)buffer = 0u;
      *(void *)&long long v191 = 0;
      uint64_t appended = FigAtomWriterInitWithParent();
      if (appended) {
        goto LABEL_16;
      }
      uint64_t appended = FigAtomWriterBeginAtom();
      if (appended) {
        goto LABEL_16;
      }
      *(void *)&long long v191 = 0;
      goto LABEL_15;
    }
    int v6 = 1986618469;
  }
  else
  {
    if (MediaType == 1635088502) {
      goto LABEL_9;
    }
    int v6 = 1885954932;
  }
  if (MediaType != v6)
  {
    if (*(unsigned char *)(a1 + 120))
    {
      *(void *)&long long v200 = 0;
      long long v198 = 0u;
      long long v199 = 0u;
      *(_OWORD *)buffer = 0u;
      uint64_t appended = FigAtomWriterInitWithParent();
      if (!appended)
      {
        uint64_t appended = FigAtomWriterBeginAtom();
        if (!appended) {
          uint64_t appended = FigAtomWriterAppendVersionAndFlags();
        }
      }
      goto LABEL_16;
    }
    uint64_t v186 = 0;
    long long v184 = 0u;
    long long v185 = 0u;
    *(_OWORD *)CFTypeRef cf = 0u;
    int v149 = MovieTrackGetMediaType(*a2);
    uint64_t v150 = FigAtomWriterInitWithParent();
    if (v150 || (uint64_t v150 = FigAtomWriterBeginAtom(), v150))
    {
      uint64_t v11 = v150;
      goto LABEL_17;
    }
    *(void *)&long long v200 = 0;
    long long v198 = 0u;
    long long v199 = 0u;
    *(_OWORD *)buffer = 0u;
    unsigned int v151 = *(unsigned char *)(a1 + 120) == 0;
    uint64_t v152 = FigAtomWriterInitWithParent();
    if (!v152)
    {
      uint64_t v152 = FigAtomWriterBeginAtom();
      if (!v152)
      {
        int16x4_t v153 = (int16x4_t)vand_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v151), 0x1FuLL)), (int8x8_t)0x8000004000);
        int16x4_t v154 = vuzp1_s16(v153, v153);
        *(int16x4_t *)((char *)&v191 + 4) = vzip1_s16(v154, vdup_lane_s16(v154, 1));
        LODWORD(v191) = 0;
        HIDWORD(v191) = 0;
        uint64_t v11 = FigAtomWriterAppendData();
        FigAtomWriterEndAtom();
        if (v11) {
          goto LABEL_17;
        }
        if (v149 != 1952807028)
        {
          if (v149 != 1953325924)
          {
            uint64_t v11 = 0;
            goto LABEL_17;
          }
          uint64_t v193 = 0;
          memset(v192, 0, sizeof(v192));
          long long v191 = 0u;
          uint64_t v190 = 0;
          long long v188 = 0u;
          long long v189 = 0u;
          *(_OWORD *)CMBlockBufferRef blockBufferOut = 0u;
          uint64_t v155 = *a2;
          memset(relativeURL, 0, 20);
          long long v211 = 0u;
          long long v212 = 0u;
          long long v209 = 0u;
          long long v210 = 0u;
          long long v207 = 0u;
          long long v208 = 0u;
          long long v205 = 0u;
          long long v206 = 0u;
          long long v203 = 0u;
          long long v204 = 0u;
          long long v201 = 0u;
          long long v202 = 0u;
          long long v199 = 0u;
          long long v200 = 0u;
          *(_OWORD *)buffer = 0u;
          long long v198 = 0u;
          MovieTrackGetTrackType(v155);
          LOBYTE(totalLengthOut) = 0;
          MustBeShowuint64_t n = MovieTrackGetTimecodeMustBeShown(v155, &totalLengthOut);
          if (!MustBeShown)
          {
            MustBeShowuint64_t n = FigAtomWriterInitWithParent();
            if (!MustBeShown)
            {
              MustBeShowuint64_t n = FigAtomWriterBeginAtom();
              if (!MustBeShown)
              {
                MustBeShowuint64_t n = FigAtomWriterInitWithParent();
                if (!MustBeShown)
                {
                  MustBeShowuint64_t n = FigAtomWriterBeginAtom();
                  if (!MustBeShown)
                  {
                    MustBeShowuint64_t n = FigAtomWriterAppendVersionAndFlags();
                    if (!MustBeShown)
                    {
                      *(_DWORD *)relativeCFURLRef URL = 5632;
                      *(_WORD *)&relativeURL[4] = 3072;
                      *(void *)&relativeURL[6] = 0;
                      *(_DWORD *)&relativeURL[14] = -1;
                      *(_WORD *)&relativeURL[18] = -1;
                      MustBeShowuint64_t n = FigAtomWriterAppendData();
                      if (!MustBeShown)
                      {
                        CFStringEncoding SystemEncoding = CFStringGetSystemEncoding();
                        if (!CFStringGetPascalString(@"Courier", buffer, 256, SystemEncoding))
                        {
                          uint64_t v11 = 4294950961;
                          goto LABEL_332;
                        }
                        MustBeShowuint64_t n = FigAtomWriterAppendData();
                      }
                    }
                  }
                }
              }
            }
          }
          uint64_t v11 = MustBeShown;
LABEL_332:
          FigAtomWriterEndAtom();
LABEL_349:
          FigAtomWriterEndAtom();
          goto LABEL_17;
        }
        *(void *)&long long v200 = 0;
        long long v198 = 0u;
        long long v199 = 0u;
        *(_OWORD *)buffer = 0u;
        MovieTrackGetTrackType(*a2);
        long long v191 = 0x3F800000uLL;
        *(void *)((char *)v192 + 4) = 0;
        *(void *)((char *)v192 + 12) = 0x3F80000000000000;
        LODWORD(v192[0]) = 1065353216;
        LODWORD(v189) = 0;
        *(_OWORD *)CMBlockBufferRef blockBufferOut = 0u;
        long long v188 = 0u;
        uint64_t v152 = FigAtomWriterInitWithParent();
        if (!v152)
        {
          uint64_t v152 = FigAtomWriterBeginAtom();
          if (!v152)
          {
            figMatrixToBigEndianMatrixRecord((uint64_t)&v191, (uint64_t)blockBufferOut);
            uint64_t v152 = FigAtomWriterAppendData();
          }
        }
      }
    }
    uint64_t v11 = v152;
    goto LABEL_349;
  }
LABEL_9:
  *(void *)&long long v200 = 0;
  long long v198 = 0u;
  long long v199 = 0u;
  *(_OWORD *)buffer = 0u;
  DWORD2(v191) = 0;
  *(void *)&long long v191 = 0;
  unsigned int v7 = *(unsigned char *)(a1 + 120) == 0;
  uint64_t appended = FigAtomWriterInitWithParent();
  if (appended) {
    goto LABEL_16;
  }
  uint64_t appended = FigAtomWriterBeginAtom();
  if (appended) {
    goto LABEL_16;
  }
  int16x4_t v9 = (int16x4_t)vand_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v7), 0x1FuLL)), (int8x8_t)0x8000004000);
  int16x4_t v10 = vuzp1_s16(v9, v9);
  LODWORD(v191) = 0x1000000;
  *(int16x4_t *)((char *)&v191 + 4) = vzip1_s16(v10, vdup_lane_s16(v10, 1));
LABEL_15:
  uint64_t appended = FigAtomWriterAppendData();
LABEL_16:
  uint64_t v11 = appended;
LABEL_17:
  FigAtomWriterEndAtom();
  if (v11) {
    goto LABEL_314;
  }
  if (!*(unsigned char *)(a1 + 120))
  {
    uint64_t v193 = 0;
    memset(v192, 0, sizeof(v192));
    long long v191 = 0u;
    long long v211 = 0u;
    long long v212 = 0u;
    long long v209 = 0u;
    long long v210 = 0u;
    long long v207 = 0u;
    long long v208 = 0u;
    long long v205 = 0u;
    long long v206 = 0u;
    long long v203 = 0u;
    long long v204 = 0u;
    long long v201 = 0u;
    long long v202 = 0u;
    long long v199 = 0u;
    long long v200 = 0u;
    *(_OWORD *)buffer = 0u;
    long long v198 = 0u;
    blockBufferOut[0] = 0;
    blockBufferOut[1] = 0;
    WORD4(v188) = 0;
    *(void *)&long long v188 = 0;
    uint64_t v12 = FigAtomWriterInitWithParent();
    if (v12) {
      goto LABEL_381;
    }
    uint64_t v12 = FigAtomWriterBeginAtom();
    if (v12) {
      goto LABEL_381;
    }
    *(_OWORD *)CMBlockBufferRef blockBufferOut = xmmword_194998B00;
    *(void *)&long long v188 = 0;
    uint64_t v12 = FigAtomWriterAppendData();
    if (v12) {
      goto LABEL_381;
    }
    CFStringEncoding v13 = CFStringGetSystemEncoding();
    if (!CFStringGetPascalString(@"Core Media Data Handler", buffer, 256, v13))
    {
      uint64_t v11 = 4294950961;
      goto LABEL_313;
    }
    uint64_t v11 = FigAtomWriterAppendData();
    FigAtomWriterEndAtom();
    if (v11) {
      goto LABEL_314;
    }
  }
  uint64_t v193 = 0;
  memset(v192, 0, sizeof(v192));
  long long v191 = 0u;
  uint64_t v12 = FigAtomWriterInitWithParent();
  if (v12) {
    goto LABEL_381;
  }
  uint64_t v12 = FigAtomWriterBeginAtom();
  if (v12) {
    goto LABEL_381;
  }
  *(void *)&long long v200 = 0;
  long long v198 = 0u;
  long long v199 = 0u;
  *(_OWORD *)buffer = 0u;
  LODWORD(blockBufferOut[1]) = 0;
  blockBufferOut[0] = 0;
  uint64_t v14 = *a2;
  cf[0] = 0;
  unsigned int NumDataSources = MovieTrackGetNumDataSources(v14);
  BOOL v16 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  uint64_t v180 = a1;
  uint64_t v176 = (uint64_t)a2;
  if (!NumDataSources)
  {
    uint64_t v11 = 0;
LABEL_59:
    FigAtomWriterEndAtom();
    CFURLRef v25 = 0;
    goto LABEL_60;
  }
  unsigned int v17 = NumDataSources;
  uint64_t v18 = FigAtomWriterInitWithParent();
  if (v18
    || (uint64_t v18 = FigAtomWriterBeginAtom(), v18)
    || (uint64_t v18 = FigAtomWriterAppendVersionAndFlags(), v18)
    || (*(_DWORD *)relativeURL = bswap32(v17), uint64_t v18 = FigAtomWriterAppendData(), v18))
  {
    uint64_t v11 = v18;
    goto LABEL_59;
  }
  CFIndex v19 = 0;
  int allocator = 0;
  CFAllocatorRef v20 = *v16;
  while (1)
  {
    *(void *)relativeCFURLRef URL = 0;
    uint64_t DataSourceAtIndex = MovieTrackGetDataSourceAtIndex(*(void **)(a1 + 8), v14, v19, 0, relativeURL);
    if (DataSourceAtIndex) {
      goto LABEL_384;
    }
    if (*(void *)relativeURL && !FigCFEqual()) {
      break;
    }
    if (*(unsigned char *)(a1 + 120)) {
      int v22 = 543978101;
    }
    else {
      int v22 = 1936288865;
    }
    LODWORD(blockBufferOut[0]) = 201326592;
    HIDWORD(blockBufferOut[0]) = v22;
    LODWORD(blockBufferOut[1]) = 0x1000000;
    uint64_t DataSourceAtIndex = FigAtomWriterAppendData();
    if (DataSourceAtIndex) {
      goto LABEL_384;
    }
LABEL_55:
    if (v17 == ++v19)
    {
      FigAtomWriterEndAtom();
      CFURLRef v25 = 0;
      uint64_t v11 = 0;
      goto LABEL_57;
    }
  }
  if (FigFileTypeDoesSupportExternalSampleReferences(*(void *)(a1 + 112)) != 1)
  {
    uint64_t DataSourceAtIndex = FigSignalErrorAt();
LABEL_384:
    uint64_t v11 = DataSourceAtIndex;
    CFURLRef v25 = 0;
LABEL_385:
    FigAtomWriterEndAtom();
    goto LABEL_57;
  }
  CFURLRef v23 = CFURLCopyAbsoluteURL(*(CFURLRef *)relativeURL);
  if (!a2[3])
  {
LABEL_48:
    CFURLRef v25 = v23;
    goto LABEL_49;
  }
  uint64_t v24 = FigCFURLCreateRelativeURLWithURLAndBaseURL();
  if (v24 == -12996)
  {
    if (allocator <= 4)
    {
      CFLog();
      ++allocator;
    }
    goto LABEL_48;
  }
  uint64_t v11 = v24;
  if (v24)
  {
    CFURLRef v25 = v23;
    goto LABEL_385;
  }
  CFURLRef v25 = (const __CFURL *)cf[0];
  if (v23) {
    CFRelease(v23);
  }
LABEL_49:
  CFStringRef v26 = CFURLGetString(v25);
  CFIndex Length = CFStringGetLength(v26);
  int v28 = Length;
  CFIndex v29 = Length + 1;
  int v30 = (char *)CFAllocatorAllocate(v20, Length + 1, 0);
  if (!v30)
  {
    uint64_t v11 = 4294950966;
    a2 = (uint64_t *)v176;
    goto LABEL_385;
  }
  CFIndex v31 = v30;
  if (!CFStringGetCString(v26, v30, v29, 0x8000100u))
  {
    uint64_t v11 = 4294950961;
    goto LABEL_388;
  }
  LODWORD(blockBufferOut[0]) = bswap32(v28 + 13);
  *(CMBlockBufferRef *)((char *)blockBufferOut + 4) = (CMBlockBufferRef)543978101;
  uint64_t v32 = FigAtomWriterAppendData();
  if (!v32)
  {
    uint64_t v32 = FigAtomWriterAppendData();
    if (!v32)
    {
      CFAllocatorDeallocate(v20, v31);
      a2 = (uint64_t *)v176;
      a1 = v180;
      if (v25) {
        CFRelease(v25);
      }
      goto LABEL_55;
    }
  }
  uint64_t v11 = v32;
LABEL_388:
  a2 = (uint64_t *)v176;
  FigAtomWriterEndAtom();
  CFAllocatorDeallocate(v20, v31);
LABEL_57:
  BOOL v16 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
LABEL_60:
  if (v25) {
    CFRelease(v25);
  }
  FigAtomWriterEndAtom();
  if (!v11)
  {
    uint64_t v193 = 0;
    memset(v192, 0, sizeof(v192));
    long long v191 = 0u;
    uint64_t v12 = FigAtomWriterInitWithParent();
    if (!v12)
    {
      uint64_t v12 = FigAtomWriterBeginAtom();
      if (!v12)
      {
        *(void *)&long long v200 = 0;
        long long v198 = 0u;
        long long v199 = 0u;
        *(_OWORD *)buffer = 0u;
        uint64_t v33 = *a2;
        blockBufferOut[0] = 0;
        CFArrayRef v34 = MovieTrackCopyFormatDescriptionArray(v33);
        CFArrayRef v35 = v34;
        if (v34) {
          uint64_t Count = CFArrayGetCount(v34);
        }
        else {
          uint64_t Count = 0;
        }
        CFAllocatorRef allocatora = *v16;
        CFMutableArrayRef Mutable = CFArrayCreateMutable(*v16, Count, MEMORY[0x1E4F1D510]);
        if (Mutable)
        {
          if (Count >= 1)
          {
            CFIndex v38 = 0;
            int v178 = 0;
            CFStringRef v174 = (const __CFString *)*MEMORY[0x1E4F1F3B8];
            CFStringRef v177 = (const __CFString *)*MEMORY[0x1E4F1F3C0];
            CFStringRef v173 = (const __CFString *)*MEMORY[0x1E4F1EF98];
            unsigned int v39 = 1;
            CFStringRef v171 = (const __CFString *)*MEMORY[0x1E4F1EFA8];
            CFStringRef v170 = (const __CFString *)*MEMORY[0x1E4F21720];
            CFStringRef v169 = (const __CFString *)*MEMORY[0x1E4F1EFA0];
            CFStringRef flavor = (const __CFString *)*MEMORY[0x1E4F1F3D0];
            CFStringRef extensionKey = (const __CFString *)*MEMORY[0x1E4F1EE58];
            CFArrayRef v179 = v35;
            while (1)
            {
              CFNumberRef ValueAtIndex = (const opaqueCMFormatDescription *)CFArrayGetValueAtIndex(v35, v38);
              signed int v41 = CMFormatDescriptionGetMediaType(ValueAtIndex);
              MediaSubint Type = CMFormatDescriptionGetMediaSubType(ValueAtIndex);
              if (v41 <= 1935893869) {
                break;
              }
              int v43 = *(unsigned __int8 *)(v180 + 120);
              if (v41 <= 1952807027)
              {
                if (v41 != 1935893870)
                {
                  if (v41 == 1936684398)
                  {
                    int v48 = FigCFEqual();
                    CFStringRef v49 = v177;
                    if (!v43) {
                      CFStringRef v49 = 0;
                    }
                    if (v48) {
                      CFStringRef v50 = v174;
                    }
                    else {
                      CFStringRef v50 = v49;
                    }
                    uint64_t Contiguous = CMAudioFormatDescriptionCopyAsBigEndianSoundDescriptionBlockBuffer(allocatora, ValueAtIndex, v50, blockBufferOut);
                    CFArrayRef v35 = v179;
                    if (Contiguous) {
                      goto LABEL_395;
                    }
                    int v55 = CMDoesBigEndianSoundDescriptionRequireLegacyCBRSampleTableLayout(blockBufferOut[0], v50);
                    int SampleOverrides = MovieTrackGetSampleOverrides(v33, 0, 0);
                    if (!v55 || SampleOverrides)
                    {
                      if (FigCFEqual())
                      {
                        int v57 = MEMORY[0x19970E950](blockBufferOut[0], 1);
                        int v58 = v178;
                        if (v57) {
                          int v58 = 1;
                        }
                        int v178 = v58;
                      }
                    }
                    else
                    {
                      if (blockBufferOut[0])
                      {
                        CFRelease(blockBufferOut[0]);
                        blockBufferOut[0] = 0;
                      }
                      uint64_t Contiguous = CMAudioFormatDescriptionCopyAsBigEndianSoundDescriptionBlockBuffer(allocatora, ValueAtIndex, flavor, blockBufferOut);
                      if (Contiguous) {
                        goto LABEL_395;
                      }
                    }
                    goto LABEL_118;
                  }
LABEL_103:
                  Extensiouint64_t n = CMFormatDescriptionGetExtension(ValueAtIndex, extensionKey);
                  if (!Extension)
                  {
                    uint64_t v11 = 4294950962;
                    CFArrayRef v35 = v179;
                    goto LABEL_149;
                  }
                  CFTypeID v54 = CFGetTypeID(Extension);
                  CFArrayRef v35 = v179;
                  if (v54 != CFDataGetTypeID())
                  {
                    uint64_t v11 = 4294950962;
                    goto LABEL_149;
                  }
                  BlockBufferWithCFDataNoCFDictionaryRef Copy = FigCreateBlockBufferWithCFDataNoCopy();
LABEL_106:
                  uint64_t v11 = BlockBufferWithCFDataNoCopy;
                  if (BlockBufferWithCFDataNoCopy) {
                    goto LABEL_149;
                  }
                  goto LABEL_118;
                }
                uint64_t v47 = CMSceneFormatDescriptionCopyAsBigEndianSceneDescriptionBlockBuffer();
                goto LABEL_99;
              }
              if (v41 == 1952807028) {
                goto LABEL_95;
              }
              if (v41 == 1953325924)
              {
                uint64_t v47 = CMTimeCodeFormatDescriptionCopyAsBigEndianTimeCodeDescriptionBlockBuffer(allocatora, ValueAtIndex, 0, blockBufferOut);
                goto LABEL_99;
              }
              if (v41 != 1986618469) {
                goto LABEL_103;
              }
              FourCharCode v44 = MediaSubType;
              CFStringRef v45 = v173;
              if (!FigCFEqual())
              {
                CFStringRef v45 = v171;
                if (!FigCFEqual())
                {
                  CFStringRef v45 = v171;
                  if (!FigCFEqual())
                  {
                    if (v43)
                    {
                      CFStringRef v45 = v170;
                      if (v44 != 1635148595)
                      {
                        CFStringRef v45 = v170;
                        if (v44 != 1685481573)
                        {
                          CFStringRef v45 = v170;
                          if (v44 != 1751479857) {
                            CFStringRef v45 = v169;
                          }
                        }
                      }
                    }
                    else
                    {
                      CFStringRef v45 = 0;
                    }
                  }
                }
              }
              CFStringEncoding v46 = CFStringGetSystemEncoding();
              uint64_t v11 = CMVideoFormatDescriptionCopyAsBigEndianImageDescriptionBlockBuffer(allocatora, ValueAtIndex, v46, v45, blockBufferOut);
LABEL_100:
              CFArrayRef v35 = v179;
              if (v11) {
                goto LABEL_149;
              }
LABEL_118:
              IsRangeuint64_t Contiguous = CMBlockBufferIsRangeContiguous(blockBufferOut[0], 0, 0);
              CMBlockBufferRef v60 = blockBufferOut[0];
              if (!IsRangeContiguous)
              {
                cf[0] = 0;
                uint64_t Contiguous = CMBlockBufferCreateContiguous(allocatora, blockBufferOut[0], allocatora, 0, 0, 0, 0, (CMBlockBufferRef *)cf);
                if (Contiguous) {
                  goto LABEL_395;
                }
                CMBlockBufferRef v61 = blockBufferOut[0];
                blockBufferOut[0] = (CMBlockBufferRef)cf[0];
                if (cf[0]) {
                  CFRetain(cf[0]);
                }
                if (v61) {
                  CFRelease(v61);
                }
                if (cf[0]) {
                  CFRelease(cf[0]);
                }
                CMBlockBufferRef v60 = blockBufferOut[0];
              }
              CFArrayAppendValue(Mutable, v60);
              if (blockBufferOut[0])
              {
                CFRelease(blockBufferOut[0]);
                blockBufferOut[0] = 0;
              }
              CFIndex v38 = v39;
              if (Count <= v39++) {
                goto LABEL_138;
              }
            }
            if (v41 > 1835365472)
            {
              if (v41 == 1835365473)
              {
                BlockBufferWithCFDataNoCFDictionaryRef Copy = CMMetadataFormatDescriptionCopyAsBigEndianMetadataDescriptionBlockBuffer(allocatora, ValueAtIndex, 0, blockBufferOut);
                goto LABEL_106;
              }
              if (v41 != 1935832172) {
                goto LABEL_103;
              }
LABEL_95:
              uint64_t v47 = CMTextFormatDescriptionCopyAsBigEndianTextDescriptionBlockBuffer(allocatora, ValueAtIndex, 0, blockBufferOut);
            }
            else
            {
              if (v41 == 1668047728)
              {
                BlockBufferWithCFDataNoCFDictionaryRef Copy = CMClosedCaptionFormatDescriptionCopyAsBigEndianClosedCaptionDescriptionBlockBuffer(allocatora, ValueAtIndex, 0, blockBufferOut);
                goto LABEL_106;
              }
              if (v41 != 1751216244) {
                goto LABEL_103;
              }
              uint64_t v47 = CMHapticFormatDescriptionCopyAsBigEndianHapticDescriptionBlockBuffer();
            }
LABEL_99:
            uint64_t v11 = v47;
            goto LABEL_100;
          }
LABEL_138:
          unsigned int NumSampleDescriptions = MovieTrackGetNumSampleDescriptions(v33);
          if (!NumSampleDescriptions)
          {
LABEL_148:
            uint64_t v11 = 0;
            goto LABEL_149;
          }
          unsigned int v64 = NumSampleDescriptions;
          uint64_t Contiguous = FigAtomWriterInitWithParent();
          if (!Contiguous)
          {
            uint64_t Contiguous = FigAtomWriterBeginAtom();
            if (!Contiguous)
            {
              uint64_t Contiguous = FigAtomWriterAppendVersionAndFlags();
              if (!Contiguous)
              {
                LODWORD(cf[0]) = bswap32(v64);
                uint64_t Contiguous = FigAtomWriterAppendData();
                if (!Contiguous)
                {
                  CFIndex v65 = 0;
                  uint64_t v66 = v64;
                  while (1)
                  {
                    cf[0] = (CFTypeRef)-1;
                    dataPointerOut = 0;
                    *(void *)relativeCFURLRef URL = -1;
                    size_t totalLengthOut = 0;
                    uint64_t Contiguous = MovieTrackGetSampleDescriptionInformationAtIndex(v33, v65, cf, relativeURL);
                    if (Contiguous) {
                      break;
                    }
                    CFIndex v67 = (OpaqueCMBlockBuffer *)CFArrayGetValueAtIndex(Mutable, (CFIndex)cf[0]);
                    *(_WORD *)&relativeURL[20] = bswap32(*(unsigned __int16 *)relativeURL + 1) >> 16;
                    uint64_t Contiguous = CMBlockBufferReplaceDataBytes(&relativeURL[20], v67, 0xEuLL, 2uLL);
                    if (Contiguous) {
                      break;
                    }
                    uint64_t Contiguous = CMBlockBufferGetDataPointer(v67, 0, 0, &totalLengthOut, &dataPointerOut);
                    if (Contiguous) {
                      break;
                    }
                    FigAtomWriterAppendData();
                    if (v66 == ++v65) {
                      goto LABEL_148;
                    }
                  }
                }
              }
            }
          }
        }
        else
        {
          uint64_t Contiguous = FigSignalErrorAt();
        }
LABEL_395:
        uint64_t v11 = Contiguous;
LABEL_149:
        FigAtomWriterEndAtom();
        if (blockBufferOut[0]) {
          CFRelease(blockBufferOut[0]);
        }
        uint64_t v68 = v180;
        if (Mutable) {
          CFRelease(Mutable);
        }
        if (v35) {
          CFRelease(v35);
        }
        if (v11) {
          goto LABEL_313;
        }
        uint64_t v12 = appendSampleGroupDescriptionAtoms((void *)v176, (uint64_t (*)(void, CFDictionaryRef *))MovieTrackCopySampleGroupDescriptionArrays);
        if (!v12)
        {
          uint64_t v12 = appendSampleToGroupAtoms(v180, v176, MovieTrackCopySampleGroupArray);
          if (!v12)
          {
            *(void *)&long long v200 = 0;
            long long v198 = 0u;
            long long v199 = 0u;
            *(_OWORD *)buffer = 0u;
            uint64_t v69 = *(void *)v176;
            unsigned int v70 = MovieSampleTableNumTimeToSampleEntries(*(void *)v176);
            uint64_t TimeToSampleTable = MovieSampleTableGetTimeToSampleTable(v69);
            uint64_t TimeValueToAddToCompositionOffsets = FigAtomWriterInitWithParent();
            if (TimeValueToAddToCompositionOffsets) {
              goto LABEL_374;
            }
            uint64_t TimeValueToAddToCompositionOffsets = FigAtomWriterBeginAtom();
            if (TimeValueToAddToCompositionOffsets) {
              goto LABEL_374;
            }
            uint64_t TimeValueToAddToCompositionOffsets = FigAtomWriterAppendVersionAndFlags();
            if (TimeValueToAddToCompositionOffsets) {
              goto LABEL_374;
            }
            LODWORD(blockBufferOut[0]) = bswap32(v70);
            uint64_t v11 = FigAtomWriterAppendData();
            if (!v11 && TimeToSampleTable) {
              uint64_t v11 = FigAtomWriterAppendBlockBufferData();
            }
            FigAtomWriterEndAtom();
            if (v11) {
              goto LABEL_313;
            }
            *(void *)&long long v200 = 0;
            long long v198 = 0u;
            long long v199 = 0u;
            *(_OWORD *)buffer = 0u;
            uint64_t v73 = *(void *)v176;
            unsigned int v74 = MovieSampleTableNumCompositionOffsetEntries(*(void *)v176);
            if (v74
              && ((unsigned int v75 = v74, v74 != 1) || MovieSampleTableGetCompositionOffsetDisplayOffset(v73, 0)))
            {
              LODWORD(totalLengthOut) = 0;
              CompositionOffsetTable = (OpaqueCMBlockBuffer *)MovieSampleTableGetCompositionOffsetTable(v73);
              LOBYTE(dataPointerOut) = 0;
              uint64_t TimeValueToAddToCompositionOffsets = getTimeValueToAddToCompositionOffsets(v180, v176, 1, (int *)&totalLengthOut, &dataPointerOut, 0);
              if (TimeValueToAddToCompositionOffsets) {
                goto LABEL_374;
              }
              int v77 = totalLengthOut;
              if (totalLengthOut)
              {
                blockBufferOut[0] = 0;
                cf[0] = 0;
                uint64_t DataPointer = CMBlockBufferCreateWithMemoryBlock(allocatora, 0, 8 * v75, allocatora, 0, 0, 8 * v75, 1u, blockBufferOut);
                if (!DataPointer)
                {
                  uint64_t DataPointer = CMBlockBufferGetDataPointer(blockBufferOut[0], 0, 0, 0, (char **)cf);
                  if (!DataPointer)
                  {
                    size_t v79 = 0;
                    unsigned int v80 = v75;
                    while (1)
                    {
                      *(void *)relativeCFURLRef URL = 0;
                      uint64_t DataPointer = CMBlockBufferCopyDataBytes(CompositionOffsetTable, v79, 8uLL, relativeURL);
                      if (DataPointer) {
                        break;
                      }
                      uint64_t v81 = cf[0];
                      *(_DWORD *)cf[0] = *(_DWORD *)relativeURL;
                      v81[1] = bswap32(bswap32(*(unsigned int *)&relativeURL[4]) + v77);
                      cf[0] = v81 + 2;
                      v79 += 8;
                      if (!--v80)
                      {
                        CMBlockBufferRef v82 = blockBufferOut[0];
                        CompositionOffsetTable = blockBufferOut[0];
                        goto LABEL_178;
                      }
                    }
                  }
                }
                goto LABEL_375;
              }
              CMBlockBufferRef v82 = 0;
LABEL_178:
              CMBlockBufferGetDataLength(CompositionOffsetTable);
              uint64_t v83 = FigAtomWriterInitWithParent();
              if (!v83)
              {
                uint64_t v83 = FigAtomWriterBeginAtom();
                if (!v83)
                {
                  uint64_t v83 = FigAtomWriterAppendVersionAndFlags();
                  if (!v83)
                  {
                    LODWORD(blockBufferOut[0]) = bswap32(v75);
                    uint64_t v83 = FigAtomWriterAppendData();
                    if (!v83) {
                      uint64_t v83 = FigAtomWriterAppendBlockBufferData();
                    }
                  }
                }
              }
              uint64_t v11 = v83;
              FigAtomWriterEndAtom();
              if (v82) {
                CFRelease(v82);
              }
              if (v11) {
                goto LABEL_313;
              }
            }
            else
            {
              FigAtomWriterEndAtom();
            }
            if (!*(unsigned char *)(v180 + 120))
            {
              *(void *)&long long v200 = 0;
              long long v198 = 0u;
              long long v199 = 0u;
              *(_OWORD *)buffer = 0u;
              long long v84 = *(void **)(v180 + 8);
              uint64_t v85 = *(void *)v176;
              int v86 = MovieSampleTableNumCompositionOffsetEntries(*(void *)v176);
              if (v86 && (v86 != 1 || MovieSampleTableGetCompositionOffsetDisplayOffset(v85, 0)))
              {
                LODWORD(dataPointerOut) = 0;
                *(void *)&relativeURL[16] = 0;
                *(_OWORD *)CMBlockBufferRef blockBufferOut = *MEMORY[0x1E4F1F9F8];
                *(void *)&long long v188 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
                *(_OWORD *)CFTypeRef cf = *(_OWORD *)blockBufferOut;
                *(void *)&long long v184 = v188;
                LODWORD(totalLengthOut) = 0;
                uint64_t TimeValueToAddToCompositionOffsets = MovieTrackGetCompositionOffsetRange(v84, v85, &totalLengthOut, 0);
                if (TimeValueToAddToCompositionOffsets) {
                  goto LABEL_374;
                }
                int v87 = totalLengthOut;
                uint64_t TimeValueToAddToCompositionOffsets = MovieTrackGetCompositionOffsetRange(v84, v85, &dataPointerOut, &relativeURL[20]);
                if (TimeValueToAddToCompositionOffsets) {
                  goto LABEL_374;
                }
                MovieTrackGetDisplayTimeRange(v84, v85, (CMTime *)blockBufferOut, (CMTime *)cf);
                uint64_t TimeValueToAddToCompositionOffsets = FigAtomWriterInitWithParent();
                if (TimeValueToAddToCompositionOffsets) {
                  goto LABEL_374;
                }
                uint64_t TimeValueToAddToCompositionOffsets = FigAtomWriterBeginAtom();
                if (TimeValueToAddToCompositionOffsets) {
                  goto LABEL_374;
                }
                uint64_t TimeValueToAddToCompositionOffsets = FigAtomWriterAppendVersionAndFlags();
                if (TimeValueToAddToCompositionOffsets) {
                  goto LABEL_374;
                }
                *(void *)relativeCFURLRef URL = _byteswap_uint64(__PAIR64__(-v87 & (v87 >> 31), dataPointerOut));
                *(void *)&relativeURL[8] = _byteswap_uint64(__PAIR64__(*(unsigned int *)&relativeURL[20], blockBufferOut[0]));
                *(_DWORD *)&relativeURL[16] = bswap32(cf[0]);
                uint64_t v11 = FigAtomWriterAppendData();
                FigAtomWriterEndAtom();
                if (v11) {
                  goto LABEL_313;
                }
              }
              else
              {
                FigAtomWriterEndAtom();
              }
            }
            *(void *)&long long v200 = 0;
            long long v198 = 0u;
            long long v199 = 0u;
            *(_OWORD *)buffer = 0u;
            uint64_t v88 = *(void *)v176;
            uint64_t SyncSampleTable = MovieSampleTableGetSyncSampleTable(*(void *)v176);
            if (SyncSampleTable)
            {
              CMBlockBufferRef v90 = (OpaqueCMBlockBuffer *)SyncSampleTable;
              unsigned int v91 = MovieSampleTableNumSyncSampleEntries(v88);
              CMBlockBufferGetDataLength(v90);
              uint64_t TimeValueToAddToCompositionOffsets = FigAtomWriterInitWithParent();
              if (TimeValueToAddToCompositionOffsets) {
                goto LABEL_374;
              }
              uint64_t TimeValueToAddToCompositionOffsets = FigAtomWriterBeginAtom();
              if (TimeValueToAddToCompositionOffsets) {
                goto LABEL_374;
              }
              uint64_t TimeValueToAddToCompositionOffsets = FigAtomWriterAppendVersionAndFlags();
              if (TimeValueToAddToCompositionOffsets) {
                goto LABEL_374;
              }
              LODWORD(blockBufferOut[0]) = bswap32(v91);
              uint64_t TimeValueToAddToCompositionOffsets = FigAtomWriterAppendData();
              if (TimeValueToAddToCompositionOffsets) {
                goto LABEL_374;
              }
              uint64_t v11 = FigAtomWriterAppendBlockBufferData();
              FigAtomWriterEndAtom();
              if (v11) {
                goto LABEL_313;
              }
            }
            else
            {
              FigAtomWriterEndAtom();
            }
            *(void *)&long long v200 = 0;
            long long v198 = 0u;
            long long v199 = 0u;
            *(_OWORD *)buffer = 0u;
            uint64_t v92 = *(void *)v176;
            unsigned int v93 = MovieSampleTableNumPartialSyncSampleEntries(*(void *)v176);
            if (v93)
            {
              unsigned int v94 = v93;
              Partialuint64_t SyncSampleTable = (OpaqueCMBlockBuffer *)MovieSampleTableGetPartialSyncSampleTable(v92);
              CMBlockBufferGetDataLength(PartialSyncSampleTable);
              uint64_t TimeValueToAddToCompositionOffsets = FigAtomWriterInitWithParent();
              if (TimeValueToAddToCompositionOffsets) {
                goto LABEL_374;
              }
              uint64_t TimeValueToAddToCompositionOffsets = FigAtomWriterBeginAtom();
              if (TimeValueToAddToCompositionOffsets) {
                goto LABEL_374;
              }
              uint64_t TimeValueToAddToCompositionOffsets = FigAtomWriterAppendVersionAndFlags();
              if (TimeValueToAddToCompositionOffsets) {
                goto LABEL_374;
              }
              LODWORD(blockBufferOut[0]) = bswap32(v94);
              uint64_t TimeValueToAddToCompositionOffsets = FigAtomWriterAppendData();
              if (TimeValueToAddToCompositionOffsets) {
                goto LABEL_374;
              }
              uint64_t v11 = FigAtomWriterAppendBlockBufferData();
              FigAtomWriterEndAtom();
              if (v11) {
                goto LABEL_313;
              }
            }
            else
            {
              FigAtomWriterEndAtom();
            }
            *(void *)&long long v200 = 0;
            long long v198 = 0u;
            long long v199 = 0u;
            *(_OWORD *)buffer = 0u;
            uint64_t v96 = *(void *)v176;
            unsigned int v97 = MovieSampleTableNumSampleDependencyEntries(*(void *)v176);
            if (v97)
            {
              unsigned int v98 = v97;
              SampleDependencyTable = (OpaqueCMBlockBuffer *)MovieSampleTableGetSampleDependencyTable(v96);
              blockBufferOut[0] = 0;
              cf[0] = 0;
              unsigned int v100 = v98;
              *(void *)relativeCFURLRef URL = 0;
              LOBYTE(totalLengthOut) = 0;
              uint64_t v101 = CMBlockBufferCreateWithMemoryBlock(allocatora, 0, v98, allocatora, 0, 0, v98, 1u, blockBufferOut);
              if (!v101)
              {
                uint64_t v101 = CMBlockBufferGetDataPointer(blockBufferOut[0], 0, 0, 0, (char **)relativeURL);
                if (!v101)
                {
                  size_t v102 = 0;
                  while (1)
                  {
                    uint64_t v101 = CMBlockBufferAccessDataBytes(SampleDependencyTable, v102, 1uLL, &totalLengthOut, (char **)cf);
                    if (v101) {
                      break;
                    }
                    **(unsigned char **)relativeCFURLRef URL = *(unsigned char *)cf[0]++ & 0xBF;
                    ++*(void *)relativeURL;
                    if (v100 == ++v102)
                    {
                      CMBlockBufferRef v103 = blockBufferOut[0];
                      CMBlockBufferGetDataLength(blockBufferOut[0]);
                      uint64_t v104 = FigAtomWriterInitWithParent();
                      if (!v104)
                      {
                        uint64_t v104 = FigAtomWriterBeginAtom();
                        if (!v104)
                        {
                          uint64_t v104 = FigAtomWriterAppendVersionAndFlags();
                          if (!v104) {
                            uint64_t v104 = FigAtomWriterAppendBlockBufferData();
                          }
                        }
                      }
                      uint64_t v11 = v104;
                      FigAtomWriterEndAtom();
                      if (v103) {
                        CFRelease(v103);
                      }
                      goto LABEL_232;
                    }
                  }
                }
              }
              uint64_t v11 = v101;
              if (blockBufferOut[0]) {
                CFRelease(blockBufferOut[0]);
              }
            }
            else
            {
              uint64_t v11 = 0;
            }
            FigAtomWriterEndAtom();
LABEL_232:
            if (v11) {
              goto LABEL_313;
            }
            *(void *)&long long v200 = 0;
            long long v198 = 0u;
            long long v199 = 0u;
            *(_OWORD *)buffer = 0u;
            uint64_t v105 = *(void *)v176;
            unsigned int v106 = MovieSampleTableNumSampleToChunkEntries(*(void *)v176);
            uint64_t SampleToChunkTable = MovieSampleTableGetSampleToChunkTable(v105);
            if (v106 >= 2)
            {
              SampleToChunkSamplesPerChunuint64_t k = MovieSampleTableGetSampleToChunkSamplesPerChunk(v105, v106 - 2);
              SampleToChunkSampleDescriptionIOSurfaceID ID = MovieSampleTableGetSampleToChunkSampleDescriptionID(v105, v106 - 2);
              int v110 = MovieSampleTableGetSampleToChunkSamplesPerChunk(v105, v106 - 1);
              BOOL v111 = SampleToChunkSampleDescriptionID == MovieSampleTableGetSampleToChunkSampleDescriptionID(v105, v106 - 1)&& SampleToChunkSamplesPerChunk == v110;
              uint64_t v68 = v180;
              if (v111) {
                --v106;
              }
            }
            uint64_t TimeValueToAddToCompositionOffsets = FigAtomWriterInitWithParent();
            if (!TimeValueToAddToCompositionOffsets)
            {
              uint64_t TimeValueToAddToCompositionOffsets = FigAtomWriterBeginAtom();
              if (!TimeValueToAddToCompositionOffsets)
              {
                uint64_t TimeValueToAddToCompositionOffsets = FigAtomWriterAppendVersionAndFlags();
                if (!TimeValueToAddToCompositionOffsets)
                {
                  LODWORD(blockBufferOut[0]) = bswap32(v106);
                  uint64_t v11 = FigAtomWriterAppendData();
                  if (!v11 && SampleToChunkTable) {
                    uint64_t v11 = FigAtomWriterAppendBlockBufferData();
                  }
                  FigAtomWriterEndAtom();
                  if (v11) {
                    goto LABEL_313;
                  }
                  uint64_t v112 = *(void *)v176;
                  if (*(unsigned char *)(v176 + 35))
                  {
                    if (MovieSampleTableGetCommonSampleSize(*(void *)v176))
                    {
                      uint64_t v112 = *(void *)v176;
                    }
                    else
                    {
                      int MinSampleSizeFieldSize = MovieSampleTableGetMinSampleSizeFieldSize(v112);
                      uint64_t v112 = *(void *)v176;
                      if (MinSampleSizeFieldSize <= 31)
                      {
                        *(void *)&long long v200 = 0;
                        long long v198 = 0u;
                        long long v199 = 0u;
                        *(_OWORD *)buffer = 0u;
                        unsigned int v139 = MovieSampleTableNumSampleSizeEntries(v112);
                        if (!v139)
                        {
                          FigAtomWriterEndAtom();
                          goto LABEL_259;
                        }
                        unsigned int v140 = v139;
                        SampleSizeTable = (OpaqueCMBlockBuffer *)MovieSampleTableGetSampleSizeTable(v112);
                        unsigned int v142 = MovieSampleTableGetMinSampleSizeFieldSize(v112);
                        unsigned int v143 = v142;
                        blockBufferOut[0] = 0;
                        cf[0] = 0;
                        *(void *)relativeCFURLRef URL = 0;
                        LODWORD(totalLengthOut) = 0;
                        if (v142 == 16 || v142 == 8)
                        {
                          unsigned int v144 = (v142 >> 3) * v140;
                        }
                        else
                        {
                          if (v142 != 4)
                          {
                            uint64_t v11 = 4294950958;
                            goto LABEL_376;
                          }
                          unsigned int v144 = (v140 + 1) >> 1;
                        }
                        uint64_t DataPointer = CMBlockBufferCreateWithMemoryBlock(allocatora, 0, v144, allocatora, 0, 0, v144, 1u, blockBufferOut);
                        if (!DataPointer)
                        {
                          uint64_t DataPointer = CMBlockBufferGetDataPointer(blockBufferOut[0], 0, 0, 0, (char **)cf);
                          if (!DataPointer)
                          {
                            switch(v143)
                            {
                              case 4u:
                                size_t v160 = 0;
                                int v161 = 0;
                                int v162 = 0;
                                while (1)
                                {
                                  uint64_t DataPointer = CMBlockBufferAccessDataBytes(SampleSizeTable, v160, 4uLL, &totalLengthOut, (char **)relativeURL);
                                  if (DataPointer) {
                                    break;
                                  }
                                  uint64_t v163 = *(void *)relativeURL;
                                  v162 |= (*(unsigned char *)(*(void *)relativeURL + 3) & 0xF) << ((4 * (v161 & 1)) ^ 4);
                                  if (v161 - v140 == -1 || (v161 & 1) != 0)
                                  {
                                    *(unsigned char *)cf[0] = v162;
                                    int v162 = 0;
                                    ++cf[0];
                                    uint64_t v163 = *(void *)relativeURL;
                                  }
                                  *(void *)relativeCFURLRef URL = v163 + 4;
                                  v160 += 4;
                                  if (++v161 == v140) {
                                    goto LABEL_363;
                                  }
                                }
                                break;
                              case 8u:
                                size_t v164 = 0;
                                unsigned int v165 = v140;
                                while (1)
                                {
                                  uint64_t DataPointer = CMBlockBufferAccessDataBytes(SampleSizeTable, v164, 4uLL, &totalLengthOut, (char **)relativeURL);
                                  if (DataPointer) {
                                    break;
                                  }
                                  *(unsigned char *)cf[0]++ = *(unsigned char *)(*(void *)relativeURL + 3);
                                  *(void *)relativeURL += 4;
                                  v164 += 4;
                                  if (!--v165) {
                                    goto LABEL_363;
                                  }
                                }
                                break;
                              case 0x10u:
                                size_t v158 = 0;
                                unsigned int v159 = v140;
                                while (1)
                                {
                                  uint64_t DataPointer = CMBlockBufferAccessDataBytes(SampleSizeTable, v158, 4uLL, &totalLengthOut, (char **)relativeURL);
                                  if (DataPointer) {
                                    break;
                                  }
                                  *(_WORD *)cf[0] = *(_WORD *)(*(void *)relativeURL + 2);
                                  cf[0] = (char *)cf[0] + 2;
                                  *(void *)relativeURL += 4;
                                  v158 += 4;
                                  if (!--v159) {
                                    goto LABEL_363;
                                  }
                                }
                                break;
                              default:
LABEL_363:
                                CMBlockBufferRef v166 = blockBufferOut[0];
                                CMBlockBufferGetDataLength(blockBufferOut[0]);
                                LODWORD(dataPointerOut) = v143 << 24;
                                uint64_t v167 = FigAtomWriterInitWithParent();
                                if (v167)
                                {
                                  uint64_t v11 = v167;
                                  uint64_t v68 = v180;
                                }
                                else
                                {
                                  uint64_t v168 = FigAtomWriterBeginAtom();
                                  uint64_t v68 = v180;
                                  if (!v168)
                                  {
                                    uint64_t v168 = FigAtomWriterAppendVersionAndFlags();
                                    if (!v168)
                                    {
                                      uint64_t v168 = FigAtomWriterAppendData();
                                      if (!v168)
                                      {
                                        LODWORD(blockBufferOut[0]) = bswap32(v140);
                                        uint64_t v168 = FigAtomWriterAppendData();
                                        if (!v168) {
                                          uint64_t v168 = FigAtomWriterAppendBlockBufferData();
                                        }
                                      }
                                    }
                                  }
                                  uint64_t v11 = v168;
                                }
                                FigAtomWriterEndAtom();
                                if (v166) {
                                  CFRelease(v166);
                                }
LABEL_258:
                                if (v11)
                                {
LABEL_313:
                                  FigAtomWriterEndAtom();
                                  goto LABEL_314;
                                }
LABEL_259:
                                *(void *)&long long v200 = 0;
                                long long v198 = 0u;
                                long long v199 = 0u;
                                *(_OWORD *)buffer = 0u;
                                uint64_t v117 = *(void *)v176;
                                unsigned int v118 = MovieSampleTableNumChunkTableEntries(*(void *)v176);
                                ChunkOffsetTable = (OpaqueCMBlockBuffer *)MovieSampleTableGetChunkOffsetTable(v117);
                                BOOL v120 = MovieSampleTableHave64BitChunkOffsetTable(v117);
                                if (!*(void *)(v68 + 80))
                                {
                                  CMBlockBufferRef v133 = 0;
                                  goto LABEL_304;
                                }
                                Trackuint64_t Count = MovieInformationGetTrackCount(v117);
                                uint64_t v122 = *(void *)(v68 + 80);
                                blockBufferOut[0] = 0;
                                if (v120) {
                                  size_t v123 = 8;
                                }
                                else {
                                  size_t v123 = 4;
                                }
                                cf[0] = 0;
                                *(void *)relativeCFURLRef URL = 0;
                                size_t totalLengthOut = 0;
                                LODWORD(dataPointerOut) = 0;
                                unint64_t v124 = v122 + TrackCount;
                                if ((unint64_t)(v122 + TrackCount) <= 0xEE6B2800) {
                                  uint64_t v125 = 4;
                                }
                                else {
                                  uint64_t v125 = 8;
                                }
                                char v126 = 2;
                                if ((unint64_t)(v122 + TrackCount) > 0xEE6B2800) {
                                  char v126 = 3;
                                }
                                uint64_t v127 = CMBlockBufferCreateWithMemoryBlock(allocatora, 0, (unint64_t)v118 << v126, allocatora, 0, 0, (unint64_t)v118 << v126, 1u, blockBufferOut);
                                if (v127
                                  || (uint64_t v127 = CMBlockBufferGetDataPointer(blockBufferOut[0], 0, 0, 0, (char **)cf),
                                      v127))
                                {
                                  uint64_t v11 = v127;
                                  CMBlockBufferRef v133 = 0;
                                }
                                else
                                {
                                  CFIndex v128 = CFAllocatorAllocate(allocatora, v123, 0);
                                  if (v128)
                                  {
                                    uint64_t v129 = v128;
                                    if (v120)
                                    {
                                      if (v124 <= 0xEE6B2800)
                                      {
                                        if (v118)
                                        {
                                          size_t v137 = 0;
                                          unsigned int v138 = v118;
                                          do
                                          {
                                            uint64_t v132 = CMBlockBufferAccessDataBytes(ChunkOffsetTable, v137, v123, v129, (char **)relativeURL);
                                            if (v132) {
                                              goto LABEL_380;
                                            }
                                            __memcpy_chk();
                                            LODWORD(dataPointerOut) = bswap32(bswap64(totalLengthOut) + v122);
                                            *(_DWORD *)cf[0] = dataPointerOut;
                                            *(void *)relativeURL += v123;
                                            cf[0] = (char *)cf[0] + v125;
                                            v137 += v123;
                                          }
                                          while (--v138);
                                        }
                                      }
                                      else if (v118)
                                      {
                                        size_t v130 = 0;
                                        unsigned int v131 = v118;
                                        while (1)
                                        {
                                          uint64_t v132 = CMBlockBufferAccessDataBytes(ChunkOffsetTable, v130, v123, v129, (char **)relativeURL);
                                          if (v132) {
                                            break;
                                          }
                                          __memcpy_chk();
                                          size_t totalLengthOut = bswap64(bswap64(totalLengthOut) + v122);
                                          *(void *)cf[0] = totalLengthOut;
                                          *(void *)relativeURL += v123;
                                          cf[0] = (char *)cf[0] + v125;
                                          v130 += v123;
                                          if (!--v131) {
                                            goto LABEL_299;
                                          }
                                        }
LABEL_380:
                                        uint64_t v11 = v132;
                                        CMBlockBufferRef v133 = 0;
                                        goto LABEL_300;
                                      }
LABEL_299:
                                      uint64_t v11 = 0;
                                      CMBlockBufferRef v133 = blockBufferOut[0];
                                      blockBufferOut[0] = 0;
LABEL_300:
                                      CFAllocatorDeallocate(allocatora, v129);
                                      goto LABEL_301;
                                    }
                                    if (v124 <= 0xEE6B2800)
                                    {
                                      if (!v118) {
                                        goto LABEL_299;
                                      }
                                      size_t v145 = 0;
                                      unsigned int v146 = v118;
                                      while (1)
                                      {
                                        uint64_t v136 = CMBlockBufferAccessDataBytes(ChunkOffsetTable, v145, v123, v129, (char **)relativeURL);
                                        if (v136) {
                                          break;
                                        }
                                        __memcpy_chk();
                                        LODWORD(dataPointerOut) = bswap32(bswap32(dataPointerOut) + v122);
                                        *(_DWORD *)cf[0] = dataPointerOut;
                                        *(void *)relativeURL += v123;
                                        cf[0] = (char *)cf[0] + v125;
                                        v145 += v123;
                                        if (!--v146) {
                                          goto LABEL_299;
                                        }
                                      }
                                    }
                                    else
                                    {
                                      if (!v118) {
                                        goto LABEL_299;
                                      }
                                      size_t v134 = 0;
                                      unsigned int v135 = v118;
                                      while (1)
                                      {
                                        uint64_t v136 = CMBlockBufferAccessDataBytes(ChunkOffsetTable, v134, v123, v129, (char **)relativeURL);
                                        if (v136) {
                                          break;
                                        }
                                        __memcpy_chk();
                                        size_t totalLengthOut = bswap64(v122 + bswap32(dataPointerOut));
                                        *(void *)cf[0] = totalLengthOut;
                                        *(void *)relativeURL += v123;
                                        cf[0] = (char *)cf[0] + v125;
                                        v134 += v123;
                                        if (!--v135) {
                                          goto LABEL_299;
                                        }
                                      }
                                    }
                                    uint64_t v11 = v136;
                                    CMBlockBufferRef v133 = 0;
                                    goto LABEL_300;
                                  }
                                  CMBlockBufferRef v133 = 0;
                                  uint64_t v11 = 4294950966;
                                }
LABEL_301:
                                if (blockBufferOut[0]) {
                                  CFRelease(blockBufferOut[0]);
                                }
                                ChunkOffsetTable = v133;
                                if (v11) {
                                  goto LABEL_311;
                                }
LABEL_304:
                                uint64_t v147 = FigAtomWriterInitWithParent();
                                if (!v147)
                                {
                                  uint64_t v147 = FigAtomWriterBeginAtom();
                                  if (!v147)
                                  {
                                    uint64_t v147 = FigAtomWriterAppendVersionAndFlags();
                                    if (!v147)
                                    {
                                      LODWORD(blockBufferOut[0]) = bswap32(v118);
                                      uint64_t v11 = FigAtomWriterAppendData();
                                      if (v11 || !ChunkOffsetTable)
                                      {
LABEL_311:
                                        FigAtomWriterEndAtom();
                                        if (v133) {
                                          CFRelease(v133);
                                        }
                                        goto LABEL_313;
                                      }
                                      CMBlockBufferGetDataLength(ChunkOffsetTable);
                                      uint64_t v147 = FigAtomWriterAppendBlockBufferData();
                                    }
                                  }
                                }
                                uint64_t v11 = v147;
                                goto LABEL_311;
                            }
                          }
                        }
LABEL_375:
                        uint64_t v11 = DataPointer;
LABEL_376:
                        if (blockBufferOut[0]) {
                          CFRelease(blockBufferOut[0]);
                        }
                        goto LABEL_378;
                      }
                    }
                  }
                  *(void *)&long long v200 = 0;
                  long long v198 = 0u;
                  long long v199 = 0u;
                  *(_OWORD *)buffer = 0u;
                  unsigned int v114 = MovieSampleTableNumSampleSizeEntries(v112);
                  unsigned int CommonSampleSize = MovieSampleTableGetCommonSampleSize(v112);
                  CFTypeRef v116 = (OpaqueCMBlockBuffer *)MovieSampleTableGetSampleSizeTable(v112);
                  LODWORD(cf[0]) = bswap32(CommonSampleSize);
                  uint64_t TimeValueToAddToCompositionOffsets = FigAtomWriterInitWithParent();
                  if (!TimeValueToAddToCompositionOffsets)
                  {
                    uint64_t TimeValueToAddToCompositionOffsets = FigAtomWriterBeginAtom();
                    if (!TimeValueToAddToCompositionOffsets)
                    {
                      uint64_t TimeValueToAddToCompositionOffsets = FigAtomWriterAppendVersionAndFlags();
                      if (!TimeValueToAddToCompositionOffsets)
                      {
                        uint64_t TimeValueToAddToCompositionOffsets = FigAtomWriterAppendData();
                        if (!TimeValueToAddToCompositionOffsets)
                        {
                          LODWORD(blockBufferOut[0]) = bswap32(v114);
                          uint64_t v11 = FigAtomWriterAppendData();
                          if (!v11 && v116)
                          {
                            CMBlockBufferGetDataLength(v116);
                            uint64_t v11 = FigAtomWriterAppendBlockBufferData();
                          }
                          FigAtomWriterEndAtom();
                          goto LABEL_258;
                        }
                      }
                    }
                  }
                }
              }
            }
LABEL_374:
            uint64_t v11 = TimeValueToAddToCompositionOffsets;
LABEL_378:
            FigAtomWriterEndAtom();
            goto LABEL_313;
          }
        }
      }
    }
LABEL_381:
    uint64_t v11 = v12;
    goto LABEL_313;
  }
LABEL_314:
  FigAtomWriterEndAtom();
  return v11;
}

uint64_t appendSampleGroupDescriptionAtoms(void *a1, uint64_t (*a2)(void, CFDictionaryRef *))
{
  uint64_t v2 = a1;
  CFDictionaryRef theDict = 0;
  uint64_t v3 = a2(*a1, &theDict);
  if (v3)
  {
    uint64_t v9 = v3;
LABEL_61:
    uint64_t v8 = 0;
    goto LABEL_10;
  }
  unint64_t Count = FigCFDictionaryGetCount();
  if (!Count)
  {
    uint64_t v9 = 0;
    goto LABEL_61;
  }
  unint64_t v5 = Count;
  size_t v6 = 8 * Count;
  if (Count >> 61) {
    BOOL v7 = 1;
  }
  else {
    BOOL v7 = v6 == 0;
  }
  if (v7)
  {
    uint64_t v8 = 0;
LABEL_9:
    uint64_t v9 = FigSignalErrorAt();
LABEL_10:
    int16x4_t v10 = 0;
    goto LABEL_56;
  }
  uint64_t v11 = (const void **)malloc_type_malloc(8 * Count, 0x5CC9CBA6uLL);
  uint64_t v8 = v11;
  if (!v11) {
    goto LABEL_9;
  }
  uint64_t v12 = (const void **)malloc_type_malloc(v6, 0x5CC9CBA6uLL);
  if (!v12) {
    goto LABEL_9;
  }
  int16x4_t v10 = v12;
  CFDictionaryGetKeysAndValues(theDict, v8, v12);
  uint64_t v13 = 0;
  unsigned int v40 = v2;
  CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFIndex v38 = v10;
  unint64_t v39 = v5;
  do
  {
    uint64_t v14 = v8[v13];
    if (*((unsigned char *)v2 + 36)) {
      BOOL v15 = 0;
    }
    else {
      BOOL v15 = v14 == 1919904876;
    }
    if (v15) {
      goto LABEL_46;
    }
    uint64_t v16 = (uint64_t)v10[v13];
    uint64_t v44 = 0;
    CFArrayRef theArray = 0;
    unsigned int v43 = 0;
    uint64_t v17 = MovieSampleGroupDescriptionArrayCopyInfo(v16, 0, &theArray, 0, &v44, &v43);
    if (v17)
    {
      uint64_t v9 = v17;
    }
    else
    {
      CFArrayRef v18 = theArray;
      if (theArray)
      {
        uint64_t v19 = v44;
        CFIndex v20 = CFArrayGetCount(theArray);
        CFMutableDataRef Mutable = CFDataCreateMutable(allocator, 0);
        if (Mutable)
        {
          int v22 = Mutable;
          CFURLRef v23 = v8;
          if (v20 >= 1)
          {
            for (CFIndex i = 0; i != v20; ++i)
            {
              CFDataRef ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(v18, i);
              BytePtr = CFDataGetBytePtr(ValueAtIndex);
              CFIndex Length = CFDataGetLength(ValueAtIndex);
              CFIndex v28 = Length;
              if (!v19)
              {
                *(_DWORD *)bytes = bswap32(Length);
                CFDataAppendBytes(v22, bytes, 4);
              }
              CFDataAppendBytes(v22, BytePtr, v28);
            }
          }
          unsigned int v29 = v44;
          unsigned int v30 = v43;
          unsigned int v51 = v14;
          uint64_t v50 = 0;
          long long v48 = 0u;
          long long v49 = 0u;
          *(_OWORD *)bytes = 0u;
          if (v20)
          {
            uint64_t v31 = FigAtomWriterInitWithParent();
            if (!v31)
            {
              uint64_t v32 = FigAtomWriterBeginAtom();
              unint64_t v5 = v39;
              if (v32 || (uint64_t v32 = FigAtomWriterAppendVersionAndFlags(), v32))
              {
                uint64_t v9 = v32;
                uint64_t v8 = v23;
              }
              else
              {
                unsigned int v51 = bswap32(v14);
                uint64_t appended = FigAtomWriterAppendData();
                uint64_t v8 = v23;
                if (!appended)
                {
                  unsigned int v46 = bswap32(v29);
                  uint64_t v34 = FigAtomWriterAppendData();
                  uint64_t v2 = v40;
                  if (v34)
                  {
                    uint64_t v9 = v34;
                  }
                  else if (!v30 || (v52 = bswap32(v30), uint64_t v9 = FigAtomWriterAppendData(), !v9))
                  {
                    unsigned int v52 = bswap32(v20);
                    uint64_t v35 = FigAtomWriterAppendData();
                    if (!v35)
                    {
                      CFDataGetBytePtr(v22);
                      CFDataGetLength(v22);
                      uint64_t v35 = FigAtomWriterAppendData();
                    }
                    uint64_t v9 = v35;
                  }
                  goto LABEL_41;
                }
                uint64_t v9 = appended;
              }
              uint64_t v2 = v40;
LABEL_41:
              FigAtomWriterEndAtom();
              int16x4_t v10 = v38;
              goto LABEL_42;
            }
            uint64_t v9 = v31;
          }
          else
          {
            uint64_t v9 = 0;
          }
          uint64_t v8 = v23;
          unint64_t v5 = v39;
          uint64_t v2 = v40;
          goto LABEL_41;
        }
      }
      else
      {
        CFMutableDataRef v36 = CFDataCreateMutable(allocator, 0);
        if (v36)
        {
          int v22 = v36;
          uint64_t v50 = 0;
          long long v48 = 0u;
          long long v49 = 0u;
          *(_OWORD *)bytes = 0u;
          FigAtomWriterEndAtom();
          uint64_t v9 = 0;
LABEL_42:
          CFRelease(v22);
          goto LABEL_43;
        }
      }
      uint64_t v9 = FigSignalErrorAt();
      if (!v9)
      {
        uint64_t v50 = 0;
        long long v48 = 0u;
        long long v49 = 0u;
        *(_OWORD *)bytes = 0u;
        FigAtomWriterEndAtom();
      }
    }
LABEL_43:
    if (theArray) {
      CFRelease(theArray);
    }
    if (v9) {
      goto LABEL_56;
    }
LABEL_46:
    ++v13;
  }
  while (v13 != v5);
  uint64_t v9 = 0;
LABEL_56:
  free(v10);
  free(v8);
  if (theDict) {
    CFRelease(theDict);
  }
  return v9;
}

uint64_t appendSampleToGroupAtoms(uint64_t a1, uint64_t a2, uint64_t (*a3)(void, CFArrayRef *))
{
  CFArrayRef theArray = 0;
  uint64_t Info = a3(*(void *)a2, &theArray);
  if (Info)
  {
LABEL_75:
    uint64_t v15 = Info;
  }
  else
  {
    if (!theArray) {
      return 0;
    }
    CFIndex Count = CFArrayGetCount(theArray);
    if (Count >= 1)
    {
      CFIndex v7 = Count;
      CFIndex v8 = 0;
      while (1)
      {
        CFDataRef ValueAtIndex = (int *)CFArrayGetValueAtIndex(theArray, v8);
        int v28 = 0;
        uint64_t v27 = 0;
        BOOL v26 = 0;
        uint64_t Info = MovieSampleGroupGetInfo((uint64_t)ValueAtIndex, (uint64_t)&v27, 0, 0, &v26);
        if (Info) {
          goto LABEL_75;
        }
        if (*(unsigned char *)(a2 + 36) || v27 != 1919904876) {
          break;
        }
LABEL_66:
        if (v7 == ++v8) {
          goto LABEL_70;
        }
      }
      int v11 = *(unsigned __int8 *)(a1 + 120);
      uint64_t v12 = v27;
      char v13 = v28;
      CFTypeRef cf = 0;
      CFTypeRef v31 = 0;
      if (v26 && v11)
      {
        uint64_t v14 = MovieSampleGroupCreateNonCompactCopy((uint64_t)ValueAtIndex, &v31);
        if (!v14)
        {
          CFDataRef ValueAtIndex = (int *)v31;
          goto LABEL_24;
        }
        goto LABEL_68;
      }
      if (!v26)
      {
LABEL_24:
        uint64_t v43 = 0;
        long long v41 = 0u;
        long long v42 = 0u;
        long long v40 = 0u;
        unsigned int NumSampleToGroupTableEntries = MovieSampleGroupGetNumSampleToGroupTableEntries((uint64_t)ValueAtIndex);
        LODWORD(theBuffer) = 0;
        if (!NumSampleToGroupTableEntries)
        {
          uint64_t v15 = 0;
          goto LABEL_60;
        }
        unsigned int v20 = NumSampleToGroupTableEntries;
        uint64_t appended = FigAtomWriterInitWithParent();
        if (!appended)
        {
          uint64_t appended = FigAtomWriterBeginAtom();
          if (!appended)
          {
            uint64_t appended = FigAtomWriterAppendVersionAndFlags();
            if (!appended)
            {
              LODWORD(theBuffer) = bswap32(v12);
              uint64_t appended = FigAtomWriterAppendData();
              if (!appended)
              {
                if (v13)
                {
                  LODWORD(v36) = bswap32(HIDWORD(v12));
                  uint64_t v15 = FigAtomWriterAppendData();
                  if (v15) {
                    goto LABEL_60;
                  }
                }
                LODWORD(v36) = bswap32(v20);
                uint64_t appended = FigAtomWriterAppendData();
                if (!appended)
                {
                  SampleToGroupTable = (OpaqueCMBlockBuffer *)MovieSampleGroupGetSampleToGroupTable((uint64_t)ValueAtIndex);
                  uint64_t v15 = (uint64_t)SampleToGroupTable;
                  if (!SampleToGroupTable) {
                    goto LABEL_60;
                  }
                  CMBlockBufferGetDataLength(SampleToGroupTable);
                  uint64_t appended = FigAtomWriterAppendBlockBufferData();
                }
              }
            }
          }
        }
        uint64_t v15 = appended;
LABEL_60:
        FigAtomWriterEndAtom();
        goto LABEL_61;
      }
      uint64_t v14 = MovieSampleGroupCreateOptimizedCopy(ValueAtIndex, &cf);
      if (v14)
      {
LABEL_68:
        uint64_t v15 = v14;
LABEL_61:
        if (cf) {
          CFRelease(cf);
        }
        if (v31) {
          CFRelease(v31);
        }
        if (v15) {
          goto LABEL_71;
        }
        goto LABEL_66;
      }
      uint64_t v43 = 0;
      long long v41 = 0u;
      long long v42 = 0u;
      long long v40 = 0u;
      uint64_t v36 = 0;
      uint64_t v37 = 0;
      int v38 = 0;
      CMBlockBufferRef v34 = 0;
      CMBlockBufferRef theBuffer = 0;
      unsigned int v33 = 0;
      uint64_t v15 = MovieSampleGroupCopyCompactAtomComponents((uint64_t)cf, (uint64_t)&v36, &theBuffer, &v34);
      if (v15 || !HIDWORD(v36))
      {
LABEL_56:
        if (theBuffer) {
          CFRelease(theBuffer);
        }
        if (v34) {
          CFRelease(v34);
        }
        goto LABEL_60;
      }
      uint64_t v16 = FigAtomWriterInitWithParent();
      if (!v16)
      {
        uint64_t v16 = FigAtomWriterBeginAtom();
        if (!v16)
        {
          HIDWORD(v18) = HIDWORD(v37);
          LODWORD(v18) = HIDWORD(v37) - 4;
          unsigned int v17 = v18 >> 2;
          if (v17 <= 7 && ((1 << v17) & 0x8B) != 0)
          {
            if (v11)
            {
              uint64_t v23 = FigAtomWriterAppendVersionAndFlags();
              if (v23) {
                goto LABEL_69;
              }
              unsigned int v33 = bswap32(v12);
              uint64_t v23 = FigAtomWriterAppendData();
              if (v23) {
                goto LABEL_69;
              }
              if (!v13) {
                goto LABEL_48;
              }
              unsigned int v39 = bswap32(HIDWORD(v12));
            }
            else
            {
              uint64_t v23 = FigAtomWriterAppendVersionAndFlags();
              if (v23) {
                goto LABEL_69;
              }
              unsigned int v33 = bswap32(v12);
              uint64_t v23 = FigAtomWriterAppendData();
              if (v23) {
                goto LABEL_69;
              }
              unsigned int v24 = bswap32(HIDWORD(v12));
              if (!v13) {
                unsigned int v24 = 0;
              }
              unsigned int v39 = v24;
              uint64_t v23 = FigAtomWriterAppendData();
              if (v23) {
                goto LABEL_69;
              }
              unsigned int v32 = bswap32(BYTE4(v37) | (((_BYTE)v38 != 0) << 8));
            }
            uint64_t v23 = FigAtomWriterAppendData();
            if (!v23)
            {
LABEL_48:
              unsigned int v39 = bswap32(v36);
              uint64_t v16 = FigAtomWriterAppendData();
              if (!v16)
              {
                if (theBuffer)
                {
                  CMBlockBufferGetDataLength(theBuffer);
                  uint64_t v15 = FigAtomWriterAppendBlockBufferData();
                  if (v15) {
                    goto LABEL_56;
                  }
                }
                if (!v34)
                {
                  uint64_t v15 = 0;
                  goto LABEL_56;
                }
                CMBlockBufferGetDataLength(v34);
                uint64_t v16 = FigAtomWriterAppendBlockBufferData();
              }
              goto LABEL_54;
            }
LABEL_69:
            uint64_t v15 = v23;
            goto LABEL_56;
          }
          uint64_t v16 = FigSignalErrorAt();
        }
      }
LABEL_54:
      uint64_t v15 = v16;
      goto LABEL_56;
    }
LABEL_70:
    uint64_t v15 = 0;
  }
LABEL_71:
  if (theArray) {
    CFRelease(theArray);
  }
  return v15;
}

uint64_t createMetadataSerializerDictionaryWithMetadata(int a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, const __CFDictionary *a7, CFAllocatorRef allocator, const __CFDictionary **a9)
{
  uint64_t v98 = *MEMORY[0x1E4F143B8];
  int value = 0;
  CFTypeRef v85 = 0;
  long long v12 = *(_OWORD *)(MEMORY[0x1E4F1D548] + 16);
  *(_OWORD *)&callBacks.versiouint64_t n = *MEMORY[0x1E4F1D548];
  *(_OWORD *)&callBacks.release = v12;
  *(_OWORD *)&callBacks.equal = *(_OWORD *)(MEMORY[0x1E4F1D548] + 32);
  CFDictionaryRef Mutable = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable
    || (callBacks.equal = 0,
        CFAllocatorRef alloc = (const __CFAllocator *)*MEMORY[0x1E4F1CF80],
        (CFSetRef theSet = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, &callBacks)) == 0))
  {
    uint64_t v24 = FigSignalErrorAt();
    CFArrayRef v32 = 0;
    goto LABEL_128;
  }
  CFDictionaryRef theDict = Mutable;
  if (!a6) {
    goto LABEL_26;
  }
  keys[0] = @"dataType";
  keys[1] = @"dataTypeNamespace";
  values[0] = 0;
  values[1] = @"com.apple.itunes";
  int valuePtr = 1;
  CFTypeRef cf = 0;
  uint64_t v88 = 0;
  uint64_t v89 = 0;
  FigCFDictionaryGetInt32IfPresent();
  FigCFDictionaryGetInt32IfPresent();
  FigCFDictionaryGetInt64IfPresent();
  *(void *)&long long v14 = 0x3030303030303030;
  *((void *)&v14 + 1) = 0x3030303030303030;
  *(_OWORD *)&bytes[1] = v14;
  *(_OWORD *)&bytes[17] = v14;
  long long v93 = v14;
  long long v94 = v14;
  long long v95 = v14;
  long long v96 = v14;
  *(_OWORD *)unsigned int v97 = v14;
  *(_DWORD *)&v97[15] = 808464432;
  bytes[0] = 32;
  snprintf((char *)&bytes[9], 0x24uLL, " %08X %08X %016llX", HIDWORD(v89), v89, v88);
  uint64_t v15 = 44;
  do
  {
    bytes[v15] = 32;
    v15 += 9;
  }
  while (v15 != 116);
  CFStringRef v16 = CFStringCreateWithBytes(alloc, bytes, 116, 0x600u, 0);
  CFNumberRef v17 = CFNumberCreate(alloc, kCFNumberSInt32Type, &valuePtr);
  values[0] = v17;
  CFDictionaryRef v18 = CFDictionaryCreate(alloc, (const void **)keys, (const void **)values, 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v19 = createMetadataSerializerForFormat(@"com.apple.itunes", (uint64_t)allocator, &cf);
  if (v19)
  {
    uint64_t v24 = v19;
  }
  else
  {
    uint64_t FigMetadataWriter = FigMetadataSerializerGetFigMetadataWriter(cf);
    uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v21) {
      uint64_t v22 = v21;
    }
    else {
      uint64_t v22 = 0;
    }
    uint64_t v23 = *(uint64_t (**)(uint64_t, __CFString *, __CFString *, CFStringRef, CFDictionaryRef))(v22 + 8);
    if (v23)
    {
      uint64_t v24 = v23(FigMetadataWriter, @"itlk", @"com.apple.iTunes.iTunSMPB", v16, v18);
      if (!v24)
      {
        CFTypeRef v25 = cf;
        CFTypeRef cf = 0;
        if (!v18) {
          goto LABEL_19;
        }
        goto LABEL_18;
      }
    }
    else
    {
      uint64_t v24 = 4294954514;
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  CFTypeRef v25 = 0;
  if (!v18) {
    goto LABEL_19;
  }
LABEL_18:
  CFRelease(v18);
LABEL_19:
  if (v17) {
    CFRelease(v17);
  }
  CFDictionaryRef Mutable = theDict;
  if (v16) {
    CFRelease(v16);
  }
  if (v24)
  {
    CFArrayRef v32 = 0;
    goto LABEL_127;
  }
  CFDictionaryAddValue(theDict, @"com.apple.itunes", v25);
  if (v25) {
    CFRelease(v25);
  }
LABEL_26:
  if (a1 < 1)
  {
LABEL_126:
    CFArrayRef v32 = 0;
    uint64_t v24 = 0;
    *a9 = Mutable;
    CFDictionaryRef Mutable = 0;
    goto LABEL_127;
  }
  uint64_t v26 = 0;
  uint64_t v69 = a1;
  while (1)
  {
    uint64_t v27 = *(const void **)(a2 + 8 * v26);
    CFArrayRef v28 = *(const __CFArray **)(a3 + 8 * v26);
    memset(bytes, 0, 24);
    if (FigCFEqual() || FigCFEqual())
    {
      if (a5)
      {
        uint64_t v29 = 0;
      }
      else
      {
        *(void *)bytes = @"com.apple.itunes";
        uint64_t v29 = 1;
      }
      CFIndex v30 = v29 + 1;
      *(void *)&bytes[8 * v29] = @"org.mp4ra";
    }
    else
    {
      if (FigCFEqual() || FigCFEqual())
      {
        *(void *)bytes = @"org.mp4ra";
LABEL_113:
        CFIndex v30 = 1;
        goto LABEL_34;
      }
      if (!FigFileTypeIsQTMovieFileType()) {
        goto LABEL_123;
      }
      if (FigCFEqual() || FigCFEqual())
      {
        *(void *)bytes = v27;
        goto LABEL_113;
      }
      if (!FigCFEqual())
      {
        if (FigCFEqual())
        {
          *(void *)bytes = @"com.apple.quicktime.mdta";
          *(void *)&UInt8 bytes[8] = @"com.apple.quicktime.udta";
          CFIndex v30 = 2;
          goto LABEL_34;
        }
LABEL_123:
        CFIndex v30 = 0;
        goto LABEL_34;
      }
      if (a5)
      {
        uint64_t v65 = 0;
      }
      else
      {
        *(void *)bytes = @"com.apple.itunes";
        uint64_t v65 = 1;
      }
      uint64_t v66 = &bytes[8 * v65];
      CFIndex v30 = v65 | 2;
      *(void *)uint64_t v66 = @"com.apple.quicktime.mdta";
      *((void *)v66 + 1) = @"com.apple.quicktime.udta";
    }
LABEL_34:
    CFArrayRef v31 = CFArrayCreate(alloc, (const void **)bytes, v30, MEMORY[0x1E4F1D510]);
    if (v31) {
      break;
    }
LABEL_108:
    if (++v26 == v69) {
      goto LABEL_126;
    }
  }
  CFArrayRef v32 = v31;
  uint64_t v72 = v26;
  CFIndex Count = CFArrayGetCount(v31);
  if (Count < 1)
  {
LABEL_107:
    CFRelease(v32);
    uint64_t v26 = v72;
    goto LABEL_108;
  }
  CFIndex v33 = 0;
  CFArrayRef v74 = v32;
  while (1)
  {
    CFDataRef ValueAtIndex = CFArrayGetValueAtIndex(v32, v33);
    if (FigCFEqual()) {
      break;
    }
    int v37 = FigCFEqual();
    int v38 = kFigMetadataConverterDestFileFormat_ISO_3GP;
    if (v37 || (v39 = FigCFEqual(), int v38 = kFigMetadataConverterDestFileFormat_ISO_MP4, v39))
    {
      CFDictionaryRef v40 = CFDictionaryCreate(alloc, (const void **)kFigMetadataConverterCreateOption_DestFileFormat, (const void **)v38, 1, 0, 0);
      int v41 = FigMetadataCreateConverter(v27, ValueAtIndex, v40, (int)alloc, &v85);
      if (v40) {
        CFRelease(v40);
      }
      if (v41) {
        goto LABEL_102;
      }
      break;
    }
    if (!FigMetadataCreateConverter(v27, ValueAtIndex, 0, (int)alloc, &v85)) {
      break;
    }
LABEL_102:
    if (++v33 == Count) {
      goto LABEL_107;
    }
  }
  uint64_t v35 = (void *)CFDictionaryGetValue(Mutable, ValueAtIndex);
  int value = v35;
  if (v35)
  {
    uint64_t v36 = (void *)CFRetain(v35);
    int value = v36;
LABEL_48:
    uint64_t v80 = FigMetadataSerializerGetFigMetadataWriter(v36);
    BOOL v43 = !FigCFEqual() && !FigCFEqual() || FigCFEqual() == 0;
    CFIndex v77 = v33;
    int v44 = FigCFEqual();
    CFTypeRef v45 = v85;
    if (a7)
    {
      unsigned int v78 = CFDictionaryContainsKey(a7, @"comn");
      if (!v28) {
        goto LABEL_98;
      }
LABEL_55:
      CFIndex v46 = CFArrayGetCount(v28);
      if (v46 >= 1)
      {
        CFIndex v47 = v46;
        CFIndex v48 = 0;
        if (v44) {
          BOOL v49 = 1;
        }
        else {
          BOOL v49 = !v43;
        }
        char v50 = v49;
        char v82 = v50;
        do
        {
          CFDictionaryRef v51 = (const __CFDictionary *)CFArrayGetValueAtIndex(v28, v48);
          unsigned int v52 = CFDictionaryGetValue(v51, @"keyspace");
          int v53 = CFDictionaryGetValue(v51, @"key");
          CFTypeID v54 = CFDictionaryGetValue(v51, @"value");
          *(void *)bytes = 0;
          if (!v53) {
            goto LABEL_95;
          }
          if (!v52) {
            goto LABEL_95;
          }
          int v55 = v54;
          if (!v54) {
            goto LABEL_95;
          }
          if (!FigCFEqual() && !FigCFEqual()) {
            goto LABEL_73;
          }
          if (FigCFEqual())
          {
            if (!FigCFEqual()) {
              goto LABEL_95;
            }
            BOOL v56 = 1;
LABEL_75:
            if (FigCFEqual() | v56) {
              goto LABEL_95;
            }
            goto LABEL_76;
          }
          CFTypeID v57 = CFGetTypeID(v53);
          if (v57 == CFNumberGetTypeID())
          {
            LODWORD(keys[0]) = 0;
            CFNumberGetValue((CFNumberRef)v53, kCFNumberSInt32Type, keys);
            BOOL v56 = LODWORD(keys[0]) == 1835365473;
          }
          else
          {
LABEL_73:
            BOOL v56 = 0;
          }
          if (FigCFEqual()) {
            goto LABEL_75;
          }
          if (v56) {
            goto LABEL_95;
          }
LABEL_76:
          if ((v82 & 1) != 0 || !CFSetContainsValue(theSet, v51))
          {
            CFDictionaryRef v58 = v51;
            if (!v45) {
              goto LABEL_87;
            }
            uint64_t v59 = *(void *)(CMBaseObjectGetVTable() + 16);
            uint64_t v60 = v59 ? v59 : 0;
            CMBlockBufferRef v61 = *(unsigned int (**)(CFTypeRef, const __CFDictionary *, const __CFAllocator *, UInt8 *))(v60 + 8);
            if (v61)
            {
              if (!v61(v45, v51, alloc, bytes))
              {
                int v53 = CFDictionaryGetValue(*(CFDictionaryRef *)bytes, @"key");
                unsigned int v52 = CFDictionaryGetValue(*(CFDictionaryRef *)bytes, @"keyspace");
                int v55 = CFDictionaryGetValue(*(CFDictionaryRef *)bytes, @"value");
                CFDictionaryRef v58 = *(const __CFDictionary **)bytes;
LABEL_87:
                if (!a7 || doesWhitelistContainKeyspaceAndKey_0(a7, v78, v52, (const __CFNumber *)v53))
                {
                  uint64_t v62 = *(void *)(CMBaseObjectGetVTable() + 16);
                  uint64_t v63 = v62 ? v62 : 0;
                  unsigned int v64 = *(unsigned int (**)(uint64_t, const void *, const void *, const void *, const __CFDictionary *))(v63 + 8);
                  if (v64)
                  {
                    if (!v64(v80, v52, v53, v55, v58)) {
                      CFSetAddValue(theSet, v51);
                    }
                  }
                }
              }
            }
          }
LABEL_95:
          if (*(void *)bytes) {
            CFRelease(*(CFTypeRef *)bytes);
          }
          ++v48;
        }
        while (v47 != v48);
      }
    }
    else
    {
      unsigned int v78 = 0;
      if (v28) {
        goto LABEL_55;
      }
    }
LABEL_98:
    if (value)
    {
      CFRelease(value);
      int value = 0;
    }
    CFDictionaryRef Mutable = theDict;
    CFArrayRef v32 = v74;
    CFIndex v33 = v77;
    if (v85)
    {
      CFRelease(v85);
      CFTypeRef v85 = 0;
    }
    goto LABEL_102;
  }
  uint64_t v42 = createMetadataSerializerForFormat((uint64_t)ValueAtIndex, (uint64_t)alloc, &value);
  if (!v42)
  {
    CFDictionaryAddValue(Mutable, ValueAtIndex, value);
    uint64_t v36 = value;
    goto LABEL_48;
  }
  uint64_t v24 = v42;
LABEL_127:
  CFRelease(theSet);
LABEL_128:
  if (value) {
    CFRelease(value);
  }
  if (v85) {
    CFRelease(v85);
  }
  if (v32) {
    CFRelease(v32);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v24;
}

uint64_t appendMetadataFromMetadataSerializerDictionary(const __CFDictionary *a1)
{
  int value = 0;
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFIndex Count = CFDictionaryGetCount(a1);
  CFDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(v2, Count, a1);
  unint64_t v5 = CFDictionaryGetValue(MutableCopy, @"com.apple.itunes");
  if (!v5) {
    goto LABEL_39;
  }
  size_t v6 = v5;
  IsQTMovieFileint Type = FigFileTypeIsQTMovieFileType();
  CFIndex v8 = (const void **)&kFigMetadataFormat_ISOUserData;
  if (IsQTMovieFileType) {
    CFIndex v8 = (const void **)&kFigMetadataFormat_QuickTimeUserData;
  }
  uint64_t v9 = *v8;
  int16x4_t v10 = (void *)CFDictionaryGetValue(MutableCopy, *v8);
  int value = v10;
  if (v10)
  {
    int v11 = (void *)CFRetain(v10);
    int value = v11;
  }
  else
  {
    uint64_t appended = createMetadataSerializerForFormat((uint64_t)v9, (uint64_t)v2, &value);
    if (appended)
    {
LABEL_46:
      uint64_t v25 = appended;
      goto LABEL_48;
    }
    CFDictionaryAddValue(MutableCopy, v9, value);
    int v11 = value;
  }
  CFTypeRef cf = 0;
  CMBlockBufferRef theBuffer = 0;
  uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 24);
  if (v13) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t v15 = *(uint64_t (**)(const void *, CMBlockBufferRef *))(v14 + 8);
  if (!v15) {
    goto LABEL_32;
  }
  CFDataWithBlockBufferNoCFDictionaryRef Copy = v15(v6, &theBuffer);
  if (!CFDataWithBlockBufferNoCopy)
  {
    if (!theBuffer)
    {
      uint64_t v25 = 0;
      goto LABEL_33;
    }
    size_t DataLength = CMBlockBufferGetDataLength(theBuffer);
    if (!CMBlockBufferIsRangeContiguous(theBuffer, 0, DataLength))
    {
      CMBlockBufferRef blockBufferOut = 0;
      CFDataWithBlockBufferNoCFDictionaryRef Copy = CMBlockBufferCreateContiguous(v2, theBuffer, v2, 0, 0, DataLength, 0, &blockBufferOut);
      if (CFDataWithBlockBufferNoCopy) {
        goto LABEL_31;
      }
      CMBlockBufferRef v18 = theBuffer;
      CMBlockBufferRef theBuffer = blockBufferOut;
      if (blockBufferOut) {
        CFRetain(blockBufferOut);
      }
      if (v18) {
        CFRelease(v18);
      }
      if (blockBufferOut) {
        CFRelease(blockBufferOut);
      }
    }
    CFDataWithBlockBufferNoCFDictionaryRef Copy = FigCreateCFDataWithBlockBufferNoCopy();
    if (!CFDataWithBlockBufferNoCopy)
    {
      if (FigFileTypeIsQTMovieFileType()) {
        uint64_t v19 = kFigUserDataKeyspace;
      }
      else {
        uint64_t v19 = kFigISOUserDataKeyspace;
      }
      uint64_t FigMetadataWriter = FigMetadataSerializerGetFigMetadataWriter(v11);
      CFTypeRef v21 = cf;
      uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v22) {
        uint64_t v23 = v22;
      }
      else {
        uint64_t v23 = 0;
      }
      uint64_t v24 = *(uint64_t (**)(uint64_t, __CFString *, __CFString *, CFTypeRef, void))(v23 + 8);
      if (v24)
      {
        CFDataWithBlockBufferNoCFDictionaryRef Copy = v24(FigMetadataWriter, *v19, @"meta", v21, 0);
        goto LABEL_31;
      }
LABEL_32:
      uint64_t v25 = 4294954514;
      goto LABEL_33;
    }
  }
LABEL_31:
  uint64_t v25 = CFDataWithBlockBufferNoCopy;
LABEL_33:
  if (cf) {
    CFRelease(cf);
  }
  if (theBuffer) {
    CFRelease(theBuffer);
  }
  if (v25) {
    goto LABEL_48;
  }
  CFDictionaryRemoveValue(MutableCopy, @"com.apple.itunes");
LABEL_39:
  if (FigFileTypeIsQTMovieFileType())
  {
    uint64_t v26 = CFDictionaryGetValue(MutableCopy, @"com.apple.quicktime.mdta");
    if (v26)
    {
      uint64_t appended = appendMetadataToAtomWriter((uint64_t)v26);
      if (appended) {
        goto LABEL_46;
      }
    }
    uint64_t v27 = @"com.apple.quicktime.udta";
  }
  else
  {
    uint64_t v27 = @"org.mp4ra";
  }
  CFArrayRef v28 = CFDictionaryGetValue(MutableCopy, v27);
  if (v28)
  {
    uint64_t appended = appendMetadataToAtomWriter((uint64_t)v28);
    goto LABEL_46;
  }
  uint64_t v25 = 0;
LABEL_48:
  if (value) {
    CFRelease(value);
  }
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  return v25;
}

uint64_t createMetadataSerializerForFormat(uint64_t a1, uint64_t a2, void *a3)
{
  if (FigCFEqual())
  {
    return FigMetadataSerializerCreateForQuickTimeMetadata(a2, a3);
  }
  else if (FigCFEqual())
  {
    return FigMetadataSerializerCreateForQuickTimeUserData(a2, a3);
  }
  else if (FigCFEqual())
  {
    return FigMetadataSerializerCreateForISOUserData(a2, a3);
  }
  else
  {
    uint64_t result = FigCFEqual();
    if (result)
    {
      return FigMetadataSerializerCreateForiTunes(a2, a3);
    }
  }
  return result;
}

uint64_t doesWhitelistContainKeyspaceAndKey_0(const __CFDictionary *a1, uint64_t a2, const void *a3, const __CFNumber *a4)
{
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(a1, a3);
  if (Value)
  {
    CFArrayRef v9 = Value;
    if (a4 && (CFTypeID v10 = CFGetTypeID(a4), v10 == CFNumberGetTypeID()))
    {
      CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      unsigned int valuePtr = 0;
      CFNumberGetValue(a4, kCFNumberSInt32Type, &valuePtr);
      unsigned int valuePtr = bswap32(valuePtr);
      *(_DWORD *)cStr = valuePtr;
      char v16 = 0;
      CFStringRef v12 = CFStringCreateWithCString(v11, cStr, 0);
      a4 = (const __CFNumber *)v12;
    }
    else
    {
      CFStringRef v12 = 0;
    }
    v18.length = CFArrayGetCount(v9);
    v18.locatiouint64_t n = 0;
    if (CFArrayContainsValue(v9, v18, a4))
    {
      a2 = 1;
      if (!v12) {
        return a2;
      }
      goto LABEL_14;
    }
  }
  else
  {
    CFStringRef v12 = 0;
  }
  if (a2)
  {
    if (!FigCFEqual())
    {
      CommonKey = FigMetadataGetCommonKey(a3, (const __CFString *)a4);
      if (CommonKey)
      {
        a2 = doesWhitelistContainKeyspaceAndKey_0(a1, a2, @"comn", CommonKey);
        if (!v12) {
          return a2;
        }
        goto LABEL_14;
      }
    }
    a2 = 0;
  }
  if (v12) {
LABEL_14:
  }
    CFRelease(v12);
  return a2;
}

uint64_t appendMetadataToAtomWriter(uint64_t a1)
{
  CMBlockBufferRef theBuffer = 0;
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 24);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(uint64_t (**)(uint64_t, CMBlockBufferRef *))(v3 + 8);
  if (!v4) {
    return 4294954514;
  }
  uint64_t v5 = v4(a1, &theBuffer);
  CMBlockBufferRef v6 = theBuffer;
  if (v5)
  {
    uint64_t appended = v5;
    if (!theBuffer) {
      return appended;
    }
LABEL_8:
    CFRelease(v6);
    return appended;
  }
  if (!theBuffer) {
    return 0;
  }
  CMBlockBufferGetDataLength(theBuffer);
  uint64_t appended = FigAtomWriterAppendBlockBufferData();
  CMBlockBufferRef v6 = theBuffer;
  if (theBuffer) {
    goto LABEL_8;
  }
  return appended;
}

uint64_t FigCFAppendStringWithSmartComma(CFTypeRef *a1, const __CFString *a2)
{
  if (a2 && a1)
  {
    CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    if (*a1)
    {
      CFStringRef v4 = CFStringCreateWithFormat(v3, 0, @"%@, %@", *a1, a2);
      CFRelease(*a1);
      *a1 = v4;
    }
    else
    {
      *a1 = CFStringCreateCopy(v3, a2);
    }
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

CFStringRef FigCopyGMLoggingDescriptionForOption(const __CFDictionary *a1)
{
  if (!a1) {
    return (CFStringRef)CFRetain(@"NULL");
  }
  uint64_t Value = FigCFDictionaryGetValue();
  if (!Value) {
    uint64_t Value = FigCFDictionaryGetValue();
  }
  if (Value) {
    CFAllocatorRef v3 = (__CFString *)Value;
  }
  else {
    CFAllocatorRef v3 = @"unspecified";
  }
  uint64_t v4 = FigCFDictionaryGetValue();
  if (v4) {
    uint64_t v5 = (__CFString *)v4;
  }
  else {
    uint64_t v5 = @"none";
  }
  CFTypeRef cf = 0;
  CFArrayRef v6 = (const __CFArray *)CFDictionaryGetValue(a1, @"MediaSelectionOptionsTaggedMediaCharacteristics");
  if (!v6) {
    goto LABEL_15;
  }
  CFArrayRef v7 = v6;
  if (CFArrayGetCount(v6) < 1) {
    goto LABEL_15;
  }
  CFIndex v8 = 0;
  do
  {
    CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v7, v8);
    FigCFAppendStringWithSmartComma(&cf, ValueAtIndex);
    ++v8;
  }
  while (v8 < CFArrayGetCount(v7));
  CFTypeRef v10 = cf;
  if (!cf)
  {
LABEL_15:
    CFTypeRef v10 = CFRetain(&stru_1EE53F4B8);
    CFTypeRef cf = v10;
  }
  CFStringRef v11 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"Option: ID=%@, Language=\"%@\", Characteristics=\"%@\"", v5, v3, v10);
  if (cf) {
    CFRelease(cf);
  }
  if (!v11) {
    return (CFStringRef)CFRetain(@"NULL");
  }
  return v11;
}

uint64_t FigPWDKeyExchangeReceiverCreateForAOCP(uint64_t a1, uint64_t a2, void *a3)
{
  if (a3)
  {
    FigPWDKeyExchangeReceiverGetClassID();
    uint64_t v4 = CMDerivedObjectCreate();
    if (!v4)
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      if (DerivedStorage)
      {
        *(unsigned char *)(DerivedStorage + 24) = 0;
        *(void *)(DerivedStorage + 32) = 0;
        uint64_t v4 = 0;
        *(void *)(DerivedStorage + 16) = FigSimpleMutexCreate();
        *a3 = 0;
      }
      else
      {
        return 4294947746;
      }
    }
    return v4;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t pwdKeyExchangeReceiverAOCP_Finalize()
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = *(void *)(result + 48);
    if (v2)
    {
      N8pdwAfn(v2);
      *(void *)(v1 + 48) = 0;
    }
    uint64_t v3 = *(void *)(v1 + 40);
    if (v3)
    {
      uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v4) {
        uint64_t v5 = v4;
      }
      else {
        uint64_t v5 = 0;
      }
      CFArrayRef v6 = *(void (**)(uint64_t))(v5 + 24);
      if (v6) {
        v6(v3);
      }
      *(void *)(v1 + 40) = 0;
    }
    uint64_t v7 = *(void *)(v1 + 56);
    if (v7)
    {
      JE2f6WCx(v7);
      *(void *)(v1 + 56) = 0;
    }
    *(void *)(v1 + 32) = 0;
    *(unsigned char *)(v1 + 24) = 0;
    *(_DWORD *)(v1 + 64) = 0;
    return FigSimpleMutexDestroy();
  }
  return result;
}

__CFString *pwdKeyExchangeReceiverAOCP_CopyDebugDescription(const void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  CFDictionaryRef Mutable = CFStringCreateMutable(v2, 0);
  CFStringAppendFormat(Mutable, 0, @"<FigPWDKeyExchangeReceiverAOCP %p>", a1);
  return Mutable;
}

uint64_t pwdKeyExchangeReceiverAOCP_CopyProperty()
{
  return 0;
}

uint64_t pwdKeyExchangeReceiverAOCP_SetProperty()
{
  return 0;
}

uint64_t pwdKeyExchangeReceiverAOCP_ProcessIncomingMessageAndCreateReply(uint64_t a1, const __CFData *a2)
{
  if (a1 && a2 && (CFPropertyListRef v2 = CFPropertyListCreateWithData((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, 0, 0, 0)) != 0)
  {
    uint64_t v3 = v2;
    FigCFDictionaryGetInt32IfPresent();
    uint64_t v4 = FigSignalErrorAt();
    CFRelease(v3);
    return v4;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t pwdKeyExchangeReceiverAOCP_SetCryptorOnSampleBuffer(uint64_t a1, uint64_t a2)
{
  CFTypeRef cf = 0;
  if (a2)
  {
    FigPWDKeyExchangeReceiverGetCMBaseObject(a1);
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 16));
    if (!*(void *)(DerivedStorage + 40))
    {
      if (FigPKDCPELimitedCryptorCreateWithExternalProtectionMethods(*(void *)(DerivedStorage + 48), *(_DWORD *)(DerivedStorage + 64), *MEMORY[0x1E4F1CF80], &cf))
      {
        uint64_t v4 = FigSignalErrorAt();
        goto LABEL_9;
      }
      if (cf) {
        CFTypeRef v3 = CFRetain(cf);
      }
      else {
        CFTypeRef v3 = 0;
      }
      *(void *)(DerivedStorage + 40) = v3;
    }
    FigSampleBufferSetDecryptor();
    uint64_t v4 = 0;
LABEL_9:
    MEMORY[0x19970E930](*(void *)(DerivedStorage + 16));
    if (cf) {
      CFRelease(cf);
    }
    return v4;
  }

  return FigSignalErrorAt();
}

uint64_t pwdKeyExchangeReceiverAOCP_SetExternalProtectionMethods(uint64_t a1, int a2)
{
  FigPWDKeyExchangeReceiverGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 16));
  *(_DWORD *)(DerivedStorage + 64) = a2;
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 16));
  return 0;
}

uint64_t FigTTMLCGColorCreateWithColorSyntax(const __CFString *a1)
{
  int v4 = 0;
  int v3 = 0;
  uint64_t v2 = 0;
  if (FigTTMLParseColor(a1, (float *)&v4, (float *)&v3, (float *)&v2 + 1, (float *)&v2)) {
    return 0;
  }
  else {
    return FigCreateCGColorSRGB();
  }
}

uint64_t FigTTMLParseLengthSyntax(const __CFString *a1)
{
  uint64_t v1 = *MEMORY[0x1E4F216B0];
  uint64_t v3 = 0;
  if (!FigTTMLParseLength(a1, (float *)&v3 + 1, (int *)&v3))
  {
    switch((int)v3)
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
        uint64_t v1 = FigGeometryDimensionMake();
        break;
      default:
        return v1;
    }
  }
  return v1;
}

uint64_t FigTTMLParseFontFamilySyntaxAndCreateFontFamilyNameList(const __CFString *a1)
{
  uint64_t v2 = 0;
  FigTTMLParseFontFamilyAndCreateFontFamilyNameList(a1, &v2);
  return v2;
}

uint64_t FigTTMLGetInheritableStyleAttributeNames()
{
  return sInheritableStyleAttributeNames;
}

void figTTML_initInheritableStyleAttributeNames()
{
  CFDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  CFArrayAppendValue(Mutable, @"http://www.w3.org/ns/ttml#styling color");
  CFArrayAppendValue(Mutable, @"http://www.w3.org/ns/ttml#styling direction");
  CFArrayAppendValue(Mutable, @"http://www.w3.org/ns/ttml#styling fontFamily");
  CFArrayAppendValue(Mutable, @"http://www.w3.org/ns/ttml#styling fontSize");
  CFArrayAppendValue(Mutable, @"http://www.w3.org/ns/ttml#styling fontStyle");
  CFArrayAppendValue(Mutable, @"http://www.w3.org/ns/ttml#styling fontWeight");
  CFArrayAppendValue(Mutable, @"http://www.w3.org/ns/ttml#styling lineHeight");
  CFArrayAppendValue(Mutable, @"http://www.w3.org/ns/ttml#styling shear");
  CFArrayAppendValue(Mutable, @"http://www.w3.org/ns/ttml#styling textAlign");
  CFArrayAppendValue(Mutable, @"http://www.w3.org/ns/ttml#styling textCombine");
  CFArrayAppendValue(Mutable, @"http://www.w3.org/ns/ttml#styling textDecoration");
  CFArrayAppendValue(Mutable, @"http://www.w3.org/ns/ttml#styling textEmphasis");
  CFArrayAppendValue(Mutable, @"http://www.w3.org/ns/ttml#styling textOutline");
  CFArrayAppendValue(Mutable, @"http://www.w3.org/ns/ttml#styling textShadow");
  CFArrayAppendValue(Mutable, @"http://www.w3.org/ns/ttml#styling visibility");
  CFArrayAppendValue(Mutable, @"http://www.w3.org/ns/ttml#styling wrapOption");
  CFArrayAppendValue(Mutable, @"http://namespace.itunes.apple.com/itt/ttml-extension#ruby kind");
  CFArrayAppendValue(Mutable, @"http://namespace.itunes.apple.com/itt/ttml-extension#ruby internalRubyID");
  CFArrayAppendValue(Mutable, @"http://www.w3.org/ns/ttml#styling ruby");
  CFArrayAppendValue(Mutable, @"http://www.w3.org/ns/ttml#styling internalRubyID");
  CFArrayAppendValue(Mutable, @"http://www.w3.org/ns/ttml/profile/imsc1#styling forcedDisplay");
  CFArrayAppendValue(Mutable, @"http://www.w3.org/ns/ttml/profile/imsc1#styling fillLineGap");
  CFArrayAppendValue(Mutable, @"http://namespace.itunes.apple.com/itt/ttml-extension#vertical combine");
  CFArrayAppendValue(Mutable, @"http://namespace.itunes.apple.com/itt/ttml-extension#ruby position");
  CFArrayAppendValue(Mutable, @"http://namespace.itunes.apple.com/itt/ttml-extension#ruby align");
  CFArrayAppendValue(Mutable, @"http://www.w3.org/ns/ttml#styling rubyAlign");
  CFArrayAppendValue(Mutable, @"http://www.w3.org/ns/ttml#styling position");
  sInheritableStyleAttributeNames = (uint64_t)Mutable;
}

uint64_t FigVideoReceiverDataChannelSettingsCopySerializable(const __CFArray *a1, __CFArray **a2)
{
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (Mutable)
  {
    CFArrayRef v6 = Mutable;
    uint64_t v22 = a2;
    if (a1 && (CFIndex v7 = CFArrayGetCount(a1), v7 >= 1))
    {
      CFIndex v8 = v7;
      CFIndex v9 = 0;
      while (1)
      {
        CFArrayGetValueAtIndex(a1, v9);
        CFDictionaryRef MutableCopy = (const __CFDictionary *)FigCFDictionaryCreateMutableCopy();
        if (!MutableCopy)
        {
          uint64_t v19 = FigSignalErrorAt();
          goto LABEL_16;
        }
        CFStringRef v11 = MutableCopy;
        uint64_t Value = CFDictionaryGetValue(MutableCopy, @"ChannelDescription");
        if (!Value) {
          break;
        }
        uint64_t v13 = (void *)MEMORY[0x19970EA60](Value, v4);
        if (!v13) {
          goto LABEL_22;
        }
        CFDictionarySetValue(v11, @"ChannelDescriptionDict", v13);
        CFDictionaryRemoveValue(v11, @"ChannelDescription");
        CFDictionaryRef v14 = (const __CFDictionary *)CFDictionaryGetValue(v11, @"ChannelSpecificSettings");
        if (v14)
        {
          CFDictionaryRef v15 = v14;
          if (CFDictionaryContainsKey(v14, @"VideoColorProperties"))
          {
            CFIndex Count = CFDictionaryGetCount(v15);
            CFNumberRef v17 = CFDictionaryCreateMutableCopy(v4, Count, v15);
            if (!v17) {
              goto LABEL_22;
            }
            CFRange v18 = v17;
            CFDictionaryRemoveValue(v17, @"DestinationPixelBufferAttributes");
            CFDictionaryRemoveValue(v18, @"VideoColorProperties");
            CFDictionaryRemoveValue(v18, @"AllowWideColor");
            CFDictionarySetValue(v11, @"ChannelSpecificSettings", v18);
            CFRelease(v18);
          }
        }
        CFRelease(v13);
        CFArrayAppendValue(v6, v11);
        CFRelease(v11);
        if (v8 == ++v9) {
          goto LABEL_13;
        }
      }
      uint64_t v13 = 0;
LABEL_22:
      uint64_t v19 = FigSignalErrorAt();
      CFRelease(v11);
      CFRelease(v6);
      if (!v13) {
        return v19;
      }
      unsigned int v20 = (__CFArray *)v13;
    }
    else
    {
LABEL_13:
      if (v22)
      {
        uint64_t v19 = 0;
        *uint64_t v22 = v6;
        return v19;
      }
      uint64_t v19 = 0;
LABEL_16:
      unsigned int v20 = v6;
    }
    CFRelease(v20);
    return v19;
  }

  return FigSignalErrorAt();
}

uint64_t FigVideoReceiverDataChannelSettingsCopyDeserialized(const __CFArray *a1, __CFArray **a2)
{
  uint64_t v4 = *MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (Mutable)
  {
    CFArrayRef v6 = Mutable;
    if (a1 && (CFIndex Count = CFArrayGetCount(a1), Count >= 1))
    {
      CFIndex v8 = Count;
      CFIndex v9 = 0;
      while (1)
      {
        CFArrayGetValueAtIndex(a1, v9);
        CFDictionaryRef MutableCopy = (const __CFDictionary *)FigCFDictionaryCreateMutableCopy();
        if (!MutableCopy)
        {
          uint64_t v14 = FigSignalErrorAt();
          goto LABEL_16;
        }
        CFStringRef v11 = MutableCopy;
        CFStringRef v12 = CFDictionaryGetValue(MutableCopy, @"ChannelDescriptionDict");
        if (!v12) {
          break;
        }
        int value = 0;
        uint64_t v13 = MEMORY[0x19970EAB0](v12, v4, &value);
        if (v13) {
          goto LABEL_15;
        }
        CFDictionarySetValue(v11, @"ChannelDescription", value);
        CFDictionaryRemoveValue(v11, @"ChannelDescriptionDict");
        if (value) {
          CFRelease(value);
        }
        CFArrayAppendValue(v6, v11);
        CFRelease(v11);
        if (v8 == ++v9) {
          goto LABEL_11;
        }
      }
      uint64_t v13 = FigSignalErrorAt();
LABEL_15:
      uint64_t v14 = v13;
      CFRelease(v11);
    }
    else
    {
LABEL_11:
      uint64_t v14 = 0;
      if (a2)
      {
        *a2 = v6;
        return v14;
      }
    }
LABEL_16:
    CFRelease(v6);
    return v14;
  }

  return FigSignalErrorAt();
}

uint64_t FigAudioQueueOfflineMixerInvalidate(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (dword_1E9351390)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    MEMORY[0x19970E290](*(void *)(v1 + 24));
    if (*(unsigned char *)(v1 + 16))
    {
      return MEMORY[0x19970E2B0](*(void *)(v1 + 24));
    }
    else
    {
      FigAudioQueueOfflineMixerStop(v1);
      FigAudioQueueOfflineMixerWaitUntilCompletelyStopped(v1);
      uint64_t v3 = *(void *)(v1 + 32);
      if (v3 && *(unsigned char *)(v1 + 56))
      {
        uint64_t v4 = *(void *)(v1 + 48);
        uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v5) {
          uint64_t v6 = v5;
        }
        else {
          uint64_t v6 = 0;
        }
        CFIndex v7 = *(void (**)(uint64_t, uint64_t))(v6 + 40);
        if (v7) {
          v7(v3, v4);
        }
        *(void *)(v1 + 48) = 0;
        *(unsigned char *)(v1 + 56) = 0;
      }
      CFArrayRef v8 = *(const __CFArray **)(v1 + 264);
      if (v8)
      {
        int Count = CFArrayGetCount(v8);
        if (Count >= 1)
        {
          CFIndex v10 = 0;
          uint64_t v11 = Count;
          do
          {
            CFArrayGetValueAtIndex(*(CFArrayRef *)(v1 + 264), v10);
            CMNotificationCenterGetDefaultLocalCenter();
            FigNotificationCenterRemoveWeakListeners();
            ++v10;
          }
          while (v11 != v10);
        }
        CFArrayRef v12 = *(const __CFArray **)(v1 + 264);
        if (v12)
        {
          CFIndex v13 = CFArrayGetCount(v12);
          do
          {
            if (v13 < 1) {
              break;
            }
            CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v1 + 264), 0);
            FigAudioQueueSetProperty((uint64_t)ValueAtIndex, @"OfflineMixer", 0);
            CFIndex v15 = CFArrayGetCount(*(CFArrayRef *)(v1 + 264));
            BOOL v16 = v15 < v13;
            CFIndex v13 = v15;
          }
          while (v16);
        }
      }
      *(unsigned char *)(v1 + 16) = 1;
      uint64_t result = MEMORY[0x19970E2B0](*(void *)(v1 + 24));
      uint64_t v17 = *(void *)(v1 + 64);
      if (v17)
      {
        if (!*(unsigned char *)(v1 + 72)) {
          goto LABEL_29;
        }
        uint64_t VTable = CMBaseObjectGetVTable();
        uint64_t v20 = *(void *)(VTable + 16);
        uint64_t result = VTable + 16;
        uint64_t v19 = v20;
        if (v20) {
          uint64_t v21 = v19;
        }
        else {
          uint64_t v21 = 0;
        }
        uint64_t v22 = *(uint64_t (**)(uint64_t, void, void))(v21 + 8);
        if (v22) {
          uint64_t result = v22(v17, 0, 0);
        }
        *(unsigned char *)(v1 + 72) = 0;
        uint64_t v17 = *(void *)(v1 + 64);
        if (v17)
        {
LABEL_29:
          uint64_t result = FigActivitySchedulerGetFigBaseObject(v17);
          if (result)
          {
            uint64_t v23 = result;
            uint64_t v24 = CMBaseObjectGetVTable();
            uint64_t v26 = *(void *)(v24 + 8);
            uint64_t result = v24 + 8;
            uint64_t v25 = v26;
            if (v26) {
              uint64_t v27 = v25;
            }
            else {
              uint64_t v27 = 0;
            }
            CFArrayRef v28 = *(uint64_t (**)(uint64_t))(v27 + 24);
            if (v28) {
              return v28(v23);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t FigAudioQueueOfflineMixerStop(uint64_t a1)
{
  if (dword_1E9351390)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x19970E290](*(void *)(a1 + 24));
  if (*(unsigned char *)(a1 + 16))
  {
    uint64_t v3 = FigSignalErrorAt();
  }
  else
  {
    MEMORY[0x19970E910](*(void *)(a1 + 80));
    *(unsigned char *)(a1 + 75) = 0;
    *(unsigned char *)(a1 + 290) = 0;
    MEMORY[0x19970E930](*(void *)(a1 + 80));
    uint64_t v3 = 0;
  }
  MEMORY[0x19970E2B0](*(void *)(a1 + 24));
  return v3;
}

uint64_t FigAudioQueueOfflineMixerWaitUntilCompletelyStopped(uint64_t a1)
{
  if (dword_1E9351390)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x19970E290](*(void *)(a1 + 24));
  if (*(unsigned char *)(a1 + 16))
  {
    uint64_t v3 = FigSignalErrorAt();
  }
  else
  {
    MEMORY[0x19970E910](*(void *)(a1 + 80));
    MEMORY[0x19970E930](*(void *)(a1 + 80));
    uint64_t v3 = 0;
  }
  MEMORY[0x19970E2B0](*(void *)(a1 + 24));
  return v3;
}

uint64_t FigAudioQueueOfflineMixerGetTypeID()
{
  return sFigAudioQueueOfflineMixerTypeID;
}

uint64_t RegisterFigAudioQueueOfflineMixerType()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sFigAudioQueueOfflineMixeruint64_t TypeID = result;
  return result;
}

uint64_t FigAudioQueueOfflineMixerCreate(const __CFAllocator *a1, long long *a2, size_t a3, const AudioChannelLayout *a4, const __CFDictionary *a5, const void *a6, const void *a7, uint64_t *a8)
{
  uint64_t v87 = *MEMORY[0x1E4F143B8];
  unsigned int size = 0;
  uint64_t valuePtr = 0;
  CFStringRef theString = 0;
  int v81 = 0;
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a2
    || !a6
    || !a7
    || !a8
    || (MEMORY[0x19970EE10](&sRegisterAudioQueueOfflineMixerTypeOnce, RegisterFigAudioQueueOfflineMixerType),
        (uint64_t Instance = _CFRuntimeCreateInstance()) == 0))
  {
    uint64_t v75 = FigSignalErrorAt();
    char v50 = 0;
LABEL_99:
    free(v50);
    return v75;
  }
  uint64_t v14 = Instance;
  *(unsigned char *)(Instance + 396) = 0;
  uint64_t v15 = FigReentrantMutexCreate();
  *(void *)(v14 + 24) = v15;
  if (!v15) {
    goto LABEL_100;
  }
  uint64_t v16 = FigSimpleMutexCreate();
  *(void *)(v14 + 80) = v16;
  if (!v16
    || (CFMutableArrayRef Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E4F1D510]), (*(void *)(v14 + 264) = Mutable) == 0)
    || (CFMutableArrayRef v18 = CFArrayCreateMutable(a1, 0, 0), (*(void *)(v14 + 272) = v18) == 0)
    || (CFMutableArrayRef v19 = CFArrayCreateMutable(a1, 0, 0), (*(void *)(v14 + 280) = v19) == 0))
  {
LABEL_100:
    uint64_t Property = FigSignalErrorAt();
LABEL_101:
    uint64_t v75 = Property;
    char v50 = 0;
    goto LABEL_96;
  }
  if (!a5)
  {
    int v77 = 0;
    int v23 = 0;
    goto LABEL_27;
  }
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a5, @"AudioQueueOfflineMixer_MaxPacketsPerRender");
  if (Value) {
    CFNumberGetValue(Value, kCFNumberIntType, (char *)&valuePtr + 4);
  }
  int v21 = *((_DWORD *)a2 + 2);
  if (v21 == 1634754915 || v21 == 1902211171 || v21 == 1667330147)
  {
    CFNumberRef v22 = (const __CFNumber *)CFDictionaryGetValue(a5, @"AudioQueueOfflineMixer_DynamicRangeControlConfig");
    if (v22)
    {
      CFNumberGetValue(v22, kCFNumberIntType, &valuePtr);
      int v77 = 1;
    }
    else
    {
      int v77 = 0;
    }
    CFNumberRef v24 = (const __CFNumber *)CFDictionaryGetValue(a5, @"AudioQueueOfflineMixerOption_SceneDescriptionPreset");
    if (v24)
    {
      CFNumberGetValue(v24, kCFNumberIntType, &v81);
      int v23 = 1;
      goto LABEL_25;
    }
  }
  else
  {
    int v77 = 0;
  }
  int v23 = 0;
LABEL_25:
  if (FigCFDictionaryGetValueIfPresent()) {
    CFStringGetCString(theString, (char *)(v14 + 396), 10, 0x600u);
  }
LABEL_27:
  uint64_t v25 = a8;
  if (*((_DWORD *)a2 + 2) == 1819304813) {
    int v26 = (*((unsigned __int8 *)a2 + 12) >> 5) & 1;
  }
  else {
    int v26 = 0;
  }
  int v27 = HIDWORD(valuePtr);
  LODWORD(v86.value) = 0;
  uint64_t Property = AQOfflineMixerNew();
  if (Property) {
    goto LABEL_101;
  }
  if (v27) {
    int v29 = v27;
  }
  else {
    int v29 = 0x2000;
  }
  long long v30 = *a2;
  long long v31 = a2[1];
  *(void *)(v14 + 208) = *((void *)a2 + 4);
  *(_OWORD *)(v14 + 176) = v30;
  *(_OWORD *)(v14 + 192) = v31;
  unsigned int v32 = *(_DWORD *)(v14 + 192);
  if (v32 <= 1) {
    unsigned int v32 = 1;
  }
  *(_DWORD *)(v14 + 244) = v32 * v29;
  int size_4 = 4;
  uint64_t Property = AQOfflineMixerGetProperty();
  if (Property) {
    goto LABEL_101;
  }
  unsigned int v33 = *(_DWORD *)(v14 + 244);
  if (v33 >= LODWORD(v86.value))
  {
    int v34 = v33 / LODWORD(v86.value);
  }
  else
  {
    *(_DWORD *)(v14 + 244) = v86.value;
    int v34 = 1;
  }
  *(_DWORD *)(v14 + 240) = v34;
  if (v26) {
    unsigned int v35 = *(_DWORD *)(v14 + 204);
  }
  else {
    unsigned int v35 = 1;
  }
  uint64_t v36 = malloc_type_malloc(16 * (v35 - 1) + 24, 0xC1625842uLL);
  *(void *)(v14 + 248) = v36;
  _DWORD *v36 = v35;
  if (v35)
  {
    unint64_t v37 = 0;
    uint64_t v38 = 16 * v35;
    do
    {
      if (v26) {
        int v39 = 1;
      }
      else {
        int v39 = *(_DWORD *)(v14 + 204);
      }
      CFDictionaryRef v40 = &v36[v37 / 4];
      v40[2] = v39;
      size_t v41 = *(unsigned int *)(v14 + 244);
      v40[3] = v41;
      uint64_t v42 = malloc_type_malloc(v41, 0x9CABB104uLL);
      uint64_t v36 = *(_DWORD **)(v14 + 248);
      *(void *)&v36[v37 / 4 + 4] = v42;
      v37 += 16;
    }
    while (v38 != v37);
  }
  int v43 = *(_DWORD *)(v14 + 196);
  if (v43) {
    size_t v44 = 72;
  }
  else {
    size_t v44 = 72 * *(unsigned int *)(v14 + 240);
  }
  *(void *)(v14 + 224) = malloc_type_malloc(v44, 0x1000040FF89C88EuLL);
  if (!*(_DWORD *)(v14 + 192))
  {
    *(void *)(v14 + 232) = malloc_type_malloc(8 * *(unsigned int *)(v14 + 240), 0x100004000313F17uLL);
LABEL_58:
    CFTypeRef v45 = malloc_type_malloc(16 * *(unsigned int *)(v14 + 240), 0x1000040451B5BE8uLL);
    goto LABEL_59;
  }
  if ((v26 & 1) == 0) {
    *(void *)(v14 + 232) = malloc_type_malloc(8uLL, 0x100004000313F17uLL);
  }
  if (!v43) {
    goto LABEL_58;
  }
  CFTypeRef v45 = 0;
LABEL_59:
  *(void *)(v14 + 216) = v45;
  *(_DWORD *)(v14 + 88) = (int)(*(double *)(v14 + 176) + 0.5);
  unsigned int size = 8;
  CFIndex v46 = (_OWORD *)(v14 + 300);
  if (AQOfflineMixerGetProperty() || !size)
  {
    uint64_t v47 = MEMORY[0x1E4F1FA48];
    long long v48 = *MEMORY[0x1E4F1FA48];
    _OWORD *v46 = *MEMORY[0x1E4F1FA48];
    uint64_t v49 = *(void *)(v47 + 16);
    *(void *)(v14 + 316) = v49;
    *(_OWORD *)(v14 + 324) = v48;
    *(void *)(v14 + 340) = v49;
  }
  else
  {
    CMTimeMake(&v86, 0, *(_DWORD *)(v14 + 88));
    _OWORD *v46 = *(_OWORD *)&v86.value;
    *(void *)(v14 + 316) = v86.epoch;
    *(_OWORD *)(v14 + 324) = *v46;
    *(void *)(v14 + 340) = *(void *)(v14 + 316);
  }
  if (v77)
  {
    uint64_t Property = AQOfflineMixerSetProperty();
    if (Property) {
      goto LABEL_101;
    }
  }
  if (v23)
  {
    uint64_t Property = AQOfflineMixerSetProperty();
    if (Property) {
      goto LABEL_101;
    }
  }
  char v50 = 0;
  if (AQOfflineMixerGetPropertySize())
  {
    size_t v51 = 0;
  }
  else
  {
    size_t v51 = 0;
    if (size)
    {
      char v50 = malloc_type_calloc(1uLL, size, 0xFB7E54C9uLL);
      uint64_t v52 = AQOfflineMixerGetProperty();
      if (v52) {
        goto LABEL_103;
      }
      size_t v51 = size;
    }
  }
  uint64_t v52 = CMAudioFormatDescriptionCreate(a1, (const AudioStreamBasicDescription *)a2, a3, a4, v51, v50, 0, (CMAudioFormatDescriptionRef *)(v14 + 168));
  if (v52) {
    goto LABEL_103;
  }
  *(void *)(v14 + 64) = a7;
  CFRetain(a7);
  uint64_t v53 = *(void *)(v14 + 64);
  uint64_t v54 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v54) {
    uint64_t v55 = v54;
  }
  else {
    uint64_t v55 = 0;
  }
  BOOL v56 = *(uint64_t (**)(uint64_t, uint64_t (*)(uint64_t), uint64_t))(v55 + 8);
  if (v56)
  {
    uint64_t v52 = v56(v53, aqOfflineMixer_processUntilHighWaterMet, v14);
    if (!v52)
    {
      *(unsigned char *)(v14 + 72) = 1;
      LODWORD(v86.value) = 0;
      CFNumberRef v57 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &v86);
      uint64_t FigBaseObject = FigActivitySchedulerGetFigBaseObject(*(void *)(v14 + 64));
      uint64_t v59 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v59) {
        uint64_t v60 = v59;
      }
      else {
        uint64_t v60 = 0;
      }
      CMBlockBufferRef v61 = *(void (**)(uint64_t, __CFString *, CFNumberRef))(v60 + 56);
      if (v61) {
        v61(FigBaseObject, @"ClientPID", v57);
      }
      CFRelease(v57);
      uint64_t v62 = FigActivitySchedulerGetFigBaseObject(*(void *)(v14 + 64));
      uint64_t v63 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v63) {
        uint64_t v64 = v63;
      }
      else {
        uint64_t v64 = 0;
      }
      uint64_t v65 = *(void (**)(uint64_t, __CFString *, void))(v64 + 56);
      if (v65) {
        v65(v62, @"ThrottleForBackground", *MEMORY[0x1E4F1CFC8]);
      }
      *(void *)(v14 + 32) = a6;
      CFRetain(a6);
      uint64_t v66 = *(void *)(v14 + 32);
      uint64_t v67 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v67) {
        uint64_t v68 = v67;
      }
      else {
        uint64_t v68 = 0;
      }
      uint64_t v69 = *(uint64_t (**)(uint64_t, uint64_t (*)(uint64_t), uint64_t, uint64_t))(v68 + 32);
      if (v69)
      {
        uint64_t v52 = v69(v66, aqOfflineMixer_outputBelowLowWater, v14, v14 + 48);
        if (!v52)
        {
          *(unsigned char *)(v14 + 56) = 1;
          uint64_t v70 = MEMORY[0x1E4F1F9F8];
          long long v71 = *MEMORY[0x1E4F1F9F8];
          *(_OWORD *)(v14 + 140) = *MEMORY[0x1E4F1F9F8];
          uint64_t v72 = *(void *)(v70 + 16);
          *(void *)(v14 + 156) = v72;
          *(_DWORD *)(v14 + 296) = -50;
          *(_DWORD *)(v14 + 416) = 0;
          *(_OWORD *)(v14 + 420) = v71;
          *(void *)(v14 + 436) = v72;
          *(_OWORD *)(v14 + 444) = v71;
          uint64_t v73 = MEMORY[0x1E4F1FA48];
          *(void *)(v14 + 460) = v72;
          *(void *)(v14 + 484) = *(void *)(v73 + 16);
          *(_OWORD *)(v14 + 468) = *(_OWORD *)v73;
          *(void *)(v14 + 388) = v72;
          *(_OWORD *)(v14 + 372) = v71;
          *(_OWORD *)(v14 + 348) = v71;
          *(void *)(v14 + 364) = v72;
          if (dword_1E9351390)
          {
            os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          uint64_t v75 = 0;
          *uint64_t v25 = v14;
          goto LABEL_99;
        }
        goto LABEL_103;
      }
      goto LABEL_95;
    }
LABEL_103:
    uint64_t v75 = v52;
    goto LABEL_96;
  }
LABEL_95:
  uint64_t v75 = 4294954514;
LABEL_96:
  free(v50);
  CFRelease((CFTypeRef)v14);
  return v75;
}

uint64_t aqOfflineMixer_processUntilHighWaterMet(uint64_t a1)
{
  uint64_t v155 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (CMTime *)(a1 + 324);
  MEMORY[0x19970E910](*(void *)(a1 + 80));
  CMBlockBufferRef v115 = v2;
  if (dword_1E9351390)
  {
    LODWORD(sampleTimingArray.duration.value) = 0;
    LOBYTE(type.value) = 0;
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v4 = (CMTime *)(a1 + 92);
  unsigned int v114 = v2 + 1;
  int v110 = (CMTimeValue *)(a1 + 372);
  CFStringRef key = (const __CFString *)*MEMORY[0x1E4F1F308];
  CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v109 = (_OWORD *)(a1 + 444);
  int v107 = (_OWORD *)(a1 + 420);
  unsigned int v108 = (_OWORD *)(a1 + 468);
  uint64_t v5 = (CMTime *)MEMORY[0x1E4F1F9F8];
  CFTypeRef v116 = (_OWORD *)(a1 + 92);
  while (1)
  {
    if (!*(unsigned char *)(a1 + 75)
      || !*(unsigned char *)(a1 + 289)
      || ((uint64_t v6 = *(void *)(a1 + 32), (v7 = *(void *)(CMBaseObjectGetVTable() + 16)) == 0) ? (v8 = 0) : (v8 = v7),
          (CFIndex v9 = *(unsigned int (**)(uint64_t))(v8 + 16)) != 0 && v9(v6)))
    {
      if (!*(unsigned char *)(a1 + 290)) {
        goto LABEL_135;
      }
    }
    if (*(unsigned char *)(a1 + 74)) {
      goto LABEL_135;
    }
    unsigned int v134 = 0;
    CMTime v133 = *v5;
    CMTimeEpoch epoch = v133.epoch;
    CMTime v132 = v133;
    long long v118 = *(_OWORD *)&v133.value;
    CMTime v131 = v133;
    char v130 = 0;
    memset(&sampleTimingArray, 0, sizeof(sampleTimingArray));
    CMItemCount timingArrayEntriesNeededOut = 0;
    uint64_t v11 = *(unsigned int **)(a1 + 248);
    uint64_t v12 = *v11;
    if (v12)
    {
      int v13 = *(_DWORD *)(a1 + 244);
      uint64_t v14 = v11 + 3;
      do
      {
        *uint64_t v14 = v13;
        v14 += 4;
        --v12;
      }
      while (v12);
    }
    LODWORD(v15) = AQOfflineMixerRender();
    if (!v15)
    {
      *(unsigned char *)(a1 + 288) = v130;
      CMItemCount v16 = v134;
      if (!v134 || *(unsigned char *)(a1 + 290))
      {
        uint64_t v17 = 0;
        CFDictionaryRef v18 = 0;
LABEL_20:
        CMTime time1 = *v4;
        CMTime time2 = *(CMTime *)(a1 + 116);
        if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0) {
          *(unsigned char *)(a1 + 290) = 1;
        }
        if (*(unsigned char *)(a1 + 288) || *(unsigned char *)(a1 + 290))
        {
          if (!*(unsigned char *)(a1 + 291))
          {
            CMNotificationCenterGetDefaultLocalCenter();
            CMNotificationCenterPostNotification();
            *(unsigned char *)(a1 + 291) = 1;
          }
          LODWORD(v15) = 0;
          *(unsigned char *)(a1 + 75) = 0;
        }
        else
        {
          LODWORD(v15) = 0;
        }
        goto LABEL_27;
      }
      theBuffer.unsigned int value = 0;
      cf.unsigned int value = 0;
      dataPointerOut = 0;
      if (*(_DWORD *)(a1 + 184) == 1819304813) {
        int v19 = (*(unsigned __int8 *)(a1 + 188) >> 5) & 1;
      }
      else {
        LOBYTE(v19) = 0;
      }
      int v20 = *(_DWORD *)(a1 + 196);
      if (v20)
      {
        int64_t v21 = v20 * v134;
        uint64_t v22 = *(void *)(a1 + 224);
        *(_OWORD *)(v22 + 48) = v118;
        *(void *)(v22 + 64) = epoch;
        uint64_t v23 = *(void *)(a1 + 224);
        CMTimeEpoch v24 = v4->epoch;
        *(_OWORD *)(v23 + 24) = *(_OWORD *)&v4->value;
        *(void *)(v23 + 40) = v24;
        uint64_t v25 = *(void *)(a1 + 224);
        CMTimeMake(&time1, *(unsigned int *)(a1 + 196), *(_DWORD *)(a1 + 88));
        long long v26 = *(_OWORD *)&time1.value;
        *(void *)(v25 + 16) = time1.epoch;
        *(_OWORD *)uint64_t v25 = v26;
        uint64_t v27 = 1;
      }
      else
      {
        char numSampleTimingEntries = v19;
        uint64_t v28 = 0;
        int64_t v21 = 0;
        CMTime time1 = *v4;
        uint64_t v29 = 8;
        uint64_t v30 = v134;
        do
        {
          v21 += *(unsigned int *)(*(void *)(a1 + 216) + v29);
          uint64_t v31 = *(void *)(a1 + 224) + v28;
          *(_OWORD *)(v31 + 48) = v118;
          *(void *)(v31 + 64) = epoch;
          uint64_t v32 = *(void *)(a1 + 224) + v28;
          CMTimeEpoch v33 = time1.epoch;
          *(_OWORD *)(v32 + 24) = *(_OWORD *)&time1.value;
          *(void *)(v32 + 40) = v33;
          uint64_t v34 = *(void *)(a1 + 224) + v28;
          CMTimeMake(&time2, *(unsigned int *)(*(void *)(a1 + 216) + v29), *(_DWORD *)(a1 + 88));
          long long v35 = *(_OWORD *)&time2.value;
          *(void *)(v34 + 16) = time2.epoch;
          *(_OWORD *)uint64_t v34 = v35;
          uint64_t v36 = (long long *)(*(void *)(a1 + 224) + v28);
          CMTime time2 = time1;
          long long v37 = *v36;
          type.CMTimeEpoch epoch = *((void *)v36 + 2);
          *(_OWORD *)&type.unsigned int value = v37;
          CMTimeAdd(&time1, &time2, &type);
          v28 += 72;
          v29 += 16;
          --v30;
        }
        while (v30);
        uint64_t v27 = v16;
        LOBYTE(v19) = numSampleTimingEntries;
      }
      uint64_t v38 = *(unsigned int *)(a1 + 192);
      CMItemCount numSampleTimingEntriesa = v27;
      if (v38)
      {
        size_t v39 = (v38 * v16);
        if (v19)
        {
          CMItemCount numSampleSizeEntries = 0;
        }
        else
        {
          **(void **)(a1 + 232) = v38;
          CMItemCount numSampleSizeEntries = 1;
        }
      }
      else
      {
        size_t v39 = 0;
        size_t v41 = *(void **)(a1 + 232);
        uint64_t v42 = (unsigned int *)(*(void *)(a1 + 216) + 12);
        CMItemCount v43 = v16;
        do
        {
          unsigned int v44 = *v42;
          v42 += 4;
          v39 += v44;
          *v41++ = v44;
          --v43;
        }
        while (v43);
        CMItemCount numSampleSizeEntries = v16;
      }
      uint64_t v45 = **(int **)(a1 + 248);
      OSStatus DataPointer = CMBlockBufferCreateWithMemoryBlock(*(CFAllocatorRef *)(a1 + 40), 0, v39 * v45, *(CFAllocatorRef *)(a1 + 40), 0, 0, v39 * v45, 0, (CMBlockBufferRef *)&theBuffer);
      if (DataPointer
        || (OSStatus DataPointer = CMBlockBufferAssureBlockMemory((CMBlockBufferRef)theBuffer.value)) != 0
        || (OSStatus DataPointer = CMBlockBufferGetDataPointer((CMBlockBufferRef)theBuffer.value, 0, 0, 0, &dataPointerOut)) != 0)
      {
        LODWORD(v15) = DataPointer;
        uint64_t v17 = 0;
        int64_t v21 = 0;
        uint64_t v4 = (CMTime *)(a1 + 92);
      }
      else
      {
        if ((int)v45 >= 1)
        {
          uint64_t v47 = 0;
          long long v48 = dataPointerOut;
          uint64_t v49 = 16 * v45;
          do
          {
            memcpy(v48, *(const void **)(*(void *)(a1 + 248) + v47 + 16), v39);
            long long v48 = &dataPointerOut[v39];
            dataPointerOut += v39;
            v47 += 16;
          }
          while (v49 != v47);
        }
        OSStatus v50 = CMSampleBufferCreate(*(CFAllocatorRef *)(a1 + 40), (CMBlockBufferRef)theBuffer.value, 1u, 0, 0, *(CMFormatDescriptionRef *)(a1 + 168), v16, numSampleTimingEntriesa, *(const CMSampleTimingInfo **)(a1 + 224), numSampleSizeEntries, *(const size_t **)(a1 + 232), (CMSampleBufferRef *)&cf);
        uint64_t v4 = (CMTime *)(a1 + 92);
        if (!v50)
        {
          float v51 = (float)v21 / (float)*(int *)(a1 + 88);
          int v52 = *(_DWORD *)(a1 + 408);
          *(_DWORD *)(a1 + 408) = v52 + 1;
          uint64_t v5 = (CMTime *)MEMORY[0x1E4F1F9F8];
          if (v52 >= 10)
          {
            float v53 = v51 + *(float *)(a1 + 412);
            *(float *)(a1 + 412) = v53;
            if (v53 < 1.0)
            {
              unsigned int v54 = 3;
LABEL_62:
              if (v54 <= dword_1E9351390)
              {
                LODWORD(type.value) = 0;
                os_log_type_t v135 = OS_LOG_TYPE_DEFAULT;
                uint64_t v55 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                unsigned int value = type.value;
                if (os_log_type_enabled(v55, v135)) {
                  unsigned int v57 = value;
                }
                else {
                  unsigned int v57 = value & 0xFFFFFFFE;
                }
                if (v57)
                {
                  int v104 = *(_DWORD *)(a1 + 408);
                  CMItemCount numSampleTimingEntriesb = cf.value;
                  double v58 = v51;
                  *(_OWORD *)&time1.unsigned int value = *v116;
                  time1.CMTimeEpoch epoch = *(void *)(a1 + 108);
                  Float64 Seconds = CMTimeGetSeconds(&time1);
                  *(_OWORD *)&time1.unsigned int value = *v116;
                  time1.CMTimeEpoch epoch = *(void *)(a1 + 108);
                  Float64 v60 = CMTimeGetSeconds(&time1);
                  LODWORD(time2.value) = 136317442;
                  *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"aqOfflineMixer_createSampleBuffer";
                  LOWORD(time2.flags) = 2048;
                  *(void *)((char *)&time2.flags + 2) = a1;
                  HIWORD(time2.epoch) = 2082;
                  uint64_t v139 = a1 + 396;
                  __int16 v140 = 1024;
                  int v141 = v104;
                  __int16 v142 = 2048;
                  *(void *)unsigned int v143 = numSampleTimingEntriesb;
                  *(_WORD *)&v143[8] = 2048;
                  double v144 = v58;
                  *(_WORD *)size_t v145 = 2048;
                  *(Float64 *)&CFTypeRef v145[2] = Seconds;
                  __int16 v146 = 2048;
                  double v147 = v60 + v58;
                  __int16 v148 = 1024;
                  *(_DWORD *)int v149 = v16;
                  *(_WORD *)&v149[4] = 1024;
                  *(_DWORD *)&v149[6] = v21;
                  _os_log_send_and_compose_impl();
                }
                fig_log_call_emit_and_clean_up_after_send_and_compose();
                uint64_t v4 = (CMTime *)(a1 + 92);
                uint64_t v5 = (CMTime *)MEMORY[0x1E4F1F9F8];
              }
              LODWORD(v15) = 0;
              uint64_t v17 = (opaqueCMSampleBuffer *)cf.value;
              cf.unsigned int value = 0;
LABEL_70:
              if (theBuffer.value) {
                CFRelease((CFTypeRef)theBuffer.value);
              }
              if (cf.value) {
                CFRelease((CFTypeRef)cf.value);
              }
              if (v15) {
                goto LABEL_95;
              }
              CMTimeMake(&v133, v21, *(_DWORD *)(a1 + 88));
              CMTime time2 = *v4;
              CMTime type = v133;
              CMTimeAdd(&time1, &time2, &type);
              *uint64_t v4 = time1;
              cf.unsigned int value = 0;
              CMBlockBufferRef v61 = v115;
              if ((*(unsigned char *)(a1 + 384) & 1) == 0)
              {
                if (CFArrayGetCount(*(CFArrayRef *)(a1 + 264)) == 1)
                {
                  CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 264), 0);
                  CFAllocatorRef v63 = CFGetAllocator(ValueAtIndex);
                  uint64_t v64 = (uint64_t)ValueAtIndex;
                  uint64_t v5 = (CMTime *)MEMORY[0x1E4F1F9F8];
                  if (!FigAudioQueueCopyProperty(v64, @"DynamicLatency", v63, &cf))
                  {
                    CMTimeMakeFromDictionary(&time1, (CFDictionaryRef)cf.value);
                    theBuffer.unsigned int value = time1.value;
                    CMTimeFlags flags = time1.flags;
                    theBuffer.CMTimeScale timescale = time1.timescale;
                    if (time1.flags)
                    {
                      CMTimeEpoch v66 = time1.epoch;
                      *int v110 = theBuffer.value;
                      *(_DWORD *)(a1 + 380) = theBuffer.timescale;
                      *(_DWORD *)(a1 + 384) = flags;
                      v115[2].CMTimeEpoch epoch = v66;
                      if (*(_DWORD *)(a1 + 184) == 1819304813)
                      {
                        v114->unsigned int value = theBuffer.value;
                        v114->CMTimeScale timescale = theBuffer.timescale;
                        *(_DWORD *)(a1 + 360) = flags;
                        v115[1].CMTimeEpoch epoch = v66;
                      }
                      else
                      {
                        CMTime time2 = *(CMTime *)(a1 + 300);
                        *(_OWORD *)&type.unsigned int value = *(_OWORD *)v110;
                        type.CMTimeEpoch epoch = *(void *)(a1 + 388);
                        CMTimeAdd(&time1, &time2, &type);
                        *CMBlockBufferRef v115 = time1;
                      }
                    }
                  }
                }
                if (cf.value) {
                  CFRelease((CFTypeRef)cf.value);
                }
              }
              if (*(_DWORD *)(a1 + 184) == 1819304813)
              {
                uint64_t v67 = v114;
                if ((*(unsigned char *)(a1 + 360) & 1) != 0 && v114->value >= 1)
                {
                  theBuffer.unsigned int value = 0;
                  CMTime time1 = *v114;
                  CMTime time2 = v133;
                  CMTimeMinimum(&v132, &time1, &time2);
                  CMTime time2 = *v114;
                  CMTime type = v132;
                  CMTimeSubtract(&time1, &time2, &type);
                  *unsigned int v114 = time1;
                  CMSampleBufferGetNumSamples(v17);
                  memset(&time1, 0, sizeof(time1));
                  CMSampleBufferGetOutputDuration(&time1, v17);
                  int32_t v68 = (int)*(double *)(a1 + 176);
                  CMTime time2 = v132;
                  CMTimeConvertScale(&v127, &time2, v68, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
                  CMTimeValue v69 = v127.value;
                  CMItemCount NumSamples = CMSampleBufferGetNumSamples(v17);
                  CFIndex v15 = NumSamples - v69;
                  if (NumSamples == v69)
                  {
                    uint64_t v5 = (CMTime *)MEMORY[0x1E4F1F9F8];
LABEL_95:
                    CFDictionaryRef v18 = 0;
                    goto LABEL_27;
                  }
                  CFAllocatorRef v74 = CFGetAllocator(v17);
                  v156.locatiouint64_t n = v69;
                  v156.length = v15;
                  LODWORD(v15) = CMSampleBufferCopySampleBufferForRange(v74, v17, v156, (CMSampleBufferRef *)&theBuffer);
                  uint64_t v5 = (CMTime *)MEMORY[0x1E4F1F9F8];
                  if (v15) {
                    goto LABEL_95;
                  }
                  long long v71 = (opaqueCMSampleBuffer *)theBuffer.value;
                  if (theBuffer.value) {
                    CFRetain((CFTypeRef)theBuffer.value);
                  }
                  CMBlockBufferRef v61 = v115;
                  if (v17) {
                    CFRelease(v17);
                  }
                  if (theBuffer.value) {
                    CFRelease((CFTypeRef)theBuffer.value);
                  }
                  uint64_t v67 = v114;
                }
                else
                {
                  long long v71 = v17;
                }
                if ((*(unsigned char *)(a1 + 384) & 1) == 0)
                {
                  uint64_t v17 = v71;
                  uint64_t v4 = (CMTime *)(a1 + 92);
                  goto LABEL_104;
                }
                memset(&time1, 0, sizeof(time1));
                CMSampleBufferGetOutputPresentationTimeStamp(&time1, v71);
                memset(&time2, 0, sizeof(time2));
                CMSampleBufferGetPresentationTimeStamp(&time2, v71);
                memset(&type, 0, sizeof(type));
                CMTimeMake(&type, *(unsigned int *)(a1 + 196), *(_DWORD *)(a1 + 88));
                CMSampleBufferGetPresentationTimeStamp(&lhs, v71);
                *(_OWORD *)&cf.unsigned int value = *(_OWORD *)v110;
                cf.CMTimeEpoch epoch = *(void *)(a1 + 388);
                CMTimeSubtract(&theBuffer, &lhs, &cf);
                sampleTimingArray.presentationTimeStamp = theBuffer;
                *(_OWORD *)&sampleTimingArray.decodeTimeStamp.unsigned int value = v118;
                sampleTimingArray.decodeTimeStamp.CMTimeEpoch epoch = epoch;
                sampleTimingArray.duratiouint64_t n = type;
                theBuffer.unsigned int value = 0;
                CFAllocatorRef v72 = CFGetAllocator(v71);
                OSStatus v73 = CMSampleBufferCreateCopyWithNewTiming(v72, v71, 1, &sampleTimingArray, (CMSampleBufferRef *)&theBuffer);
                if (v73)
                {
                  LODWORD(v15) = v73;
                  CFDictionaryRef v18 = 0;
                  uint64_t v17 = v71;
                  uint64_t v4 = (CMTime *)(a1 + 92);
LABEL_27:
                  if (v17) {
                    CFRelease(v17);
                  }
                  if (v18) {
                    CFRelease(v18);
                  }
                  goto LABEL_31;
                }
                uint64_t v17 = (opaqueCMSampleBuffer *)theBuffer.value;
                if (theBuffer.value) {
                  CFRetain((CFTypeRef)theBuffer.value);
                }
                CMBlockBufferRef v61 = v115;
                if (v71) {
                  CFRelease(v71);
                }
                if (theBuffer.value) {
                  CFRelease((CFTypeRef)theBuffer.value);
                }
                CMSampleBufferGetOutputSampleTimingInfoArray(v17, 1, &sampleTimingArray, &timingArrayEntriesNeededOut);
                uint64_t v4 = (CMTime *)(a1 + 92);
              }
              uint64_t v67 = v114;
LABEL_104:
              if ((*(unsigned char *)(a1 + 360) & 1) != 0 && v67->value || v61->value < 1)
              {
                CFDictionaryRef v18 = 0;
              }
              else
              {
                CMTime time1 = *v61;
                CMTime time2 = v133;
                CMTimeMinimum(&v131, &time1, &time2);
                CMTime time2 = *v61;
                CMTime type = v131;
                CMTimeSubtract(&time1, &time2, &type);
                CMTime *v61 = time1;
                CMTime time1 = v131;
                CFDictionaryRef v18 = CMTimeCopyAsDictionary(&time1, allocator);
                if (!v18)
                {
                  LODWORD(v15) = FigSignalErrorAt();
                  goto LABEL_27;
                }
                CMSetAttachment(v17, key, v18, 1u);
              }
              uint64_t v75 = *(void *)(a1 + 32);
              uint64_t v76 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v76) {
                uint64_t v77 = v76;
              }
              else {
                uint64_t v77 = 0;
              }
              unsigned int v78 = *(void (**)(uint64_t, opaqueCMSampleBuffer *))(v77 + 8);
              if (v78) {
                v78(v75, v17);
              }
              ++*(_DWORD *)(a1 + 416);
              CMSampleBufferGetPresentationTimeStamp(&v124, v17);
              if (v124.flags)
              {
                CMSampleBufferGetDuration(&v123, v17);
                if (v123.flags)
                {
                  if ((*(unsigned char *)(a1 + 432) & 1) == 0)
                  {
                    CMSampleBufferGetPresentationTimeStamp(&time1, v17);
                    *int v107 = *(_OWORD *)&time1.value;
                    *(void *)(a1 + 436) = time1.epoch;
                  }
                  CMSampleBufferGetPresentationTimeStamp(&v122, v17);
                  CMSampleBufferGetDuration(&rhs, v17);
                  CMTimeAdd(&time1, &v122, &rhs);
                  _OWORD *v109 = *(_OWORD *)&time1.value;
                  *(void *)(a1 + 460) = time1.epoch;
                  CMSampleBufferGetDuration(&v120, v17);
                  *(_OWORD *)&time2.unsigned int value = *v108;
                  time2.CMTimeEpoch epoch = *(void *)(a1 + 484);
                  CMTimeAdd(&time1, &time2, &v120);
                  *unsigned int v108 = *(_OWORD *)&time1.value;
                  *(void *)(a1 + 484) = time1.epoch;
                }
              }
              if (*(unsigned char *)(a1 + 152))
              {
                CMTime time1 = *(CMTime *)(a1 + 140);
                CMTime time2 = *v4;
                if (aqOfflineMixer_passedTimelineMilestone(a1, &time1, &time2)) {
                  aqOfflineMixer_postMilestoneNotification(a1);
                }
              }
              goto LABEL_20;
            }
            *(float *)(a1 + 412) = v53 + -1.0;
          }
          unsigned int v54 = 1;
          goto LABEL_62;
        }
        LODWORD(v15) = v50;
        uint64_t v17 = 0;
        int64_t v21 = 0;
      }
      uint64_t v5 = (CMTime *)MEMORY[0x1E4F1F9F8];
      goto LABEL_70;
    }
LABEL_31:
    if (!v134) {
      break;
    }
    if (v15)
    {
      MEMORY[0x19970E930](*(void *)(a1 + 80));
      MEMORY[0x19970E910](*(void *)(a1 + 80));
    }
  }
  if (v15)
  {
LABEL_135:
    BOOL v79 = 0;
    goto LABEL_136;
  }
  BOOL v79 = *(unsigned char *)(a1 + 288) == 0;
LABEL_136:
  if (dword_1E9351390)
  {
    LODWORD(sampleTimingArray.duration.value) = 0;
    LOBYTE(type.value) = 0;
    uint64_t v80 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v81 = sampleTimingArray.duration.value;
    if (os_log_type_enabled(v80, type.value)) {
      unsigned int v82 = v81;
    }
    else {
      unsigned int v82 = v81 & 0xFFFFFFFE;
    }
    if (v82)
    {
      int v117 = *(unsigned __int8 *)(a1 + 75);
      int v119 = *(unsigned __int8 *)(a1 + 289);
      uint64_t v83 = *(void *)(a1 + 32);
      uint64_t v84 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v84) {
        uint64_t v85 = v84;
      }
      else {
        uint64_t v85 = 0;
      }
      CMTime v86 = *(uint64_t (**)(uint64_t))(v85 + 16);
      if (v86) {
        int v87 = v86(v83);
      }
      else {
        int v87 = 0;
      }
      uint64_t v88 = *(void *)(a1 + 32);
      uint64_t v89 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v89) {
        uint64_t v90 = v89;
      }
      else {
        uint64_t v90 = 0;
      }
      unsigned int v91 = *(uint64_t (**)(uint64_t))(v90 + 24);
      if (v91) {
        int v92 = v91(v88);
      }
      else {
        int v92 = 0;
      }
      int v93 = *(unsigned __int8 *)(a1 + 290);
      int v94 = *(unsigned __int8 *)(a1 + 74);
      *(_OWORD *)&time1.unsigned int value = *v108;
      time1.CMTimeEpoch epoch = *(void *)(a1 + 484);
      double v95 = CMTimeGetSeconds(&time1);
      *(_OWORD *)&time1.unsigned int value = *v107;
      time1.CMTimeEpoch epoch = *(void *)(a1 + 436);
      Float64 v96 = CMTimeGetSeconds(&time1);
      *(_OWORD *)&time1.unsigned int value = *v109;
      time1.CMTimeEpoch epoch = *(void *)(a1 + 460);
      Float64 v97 = CMTimeGetSeconds(&time1);
      int v98 = *(_DWORD *)(a1 + 416);
      LODWORD(time2.value) = 136318210;
      *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"aqOfflineMixer_processUntilHighWaterMet";
      LOWORD(time2.flags) = 2048;
      *(void *)((char *)&time2.flags + 2) = a1;
      HIWORD(time2.epoch) = 2082;
      uint64_t v139 = a1 + 396;
      __int16 v140 = 1024;
      int v141 = v117;
      __int16 v142 = 1024;
      *(_DWORD *)unsigned int v143 = v119;
      *(_WORD *)&v143[4] = 1024;
      *(_DWORD *)&v143[6] = v87;
      LOWORD(v144) = 1024;
      *(_DWORD *)((char *)&v144 + 2) = v92;
      HIWORD(v144) = 1024;
      *(_DWORD *)size_t v145 = v93;
      *(_WORD *)&v145[4] = 1024;
      *(_DWORD *)&v145[6] = v94;
      __int16 v146 = 2048;
      double v147 = v95;
      __int16 v148 = 2048;
      *(Float64 *)int v149 = v96;
      *(_WORD *)&v149[8] = 2048;
      Float64 v150 = v97;
      __int16 v151 = 1024;
      int v152 = v98;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t result = MEMORY[0x19970E930](*(void *)(a1 + 80));
  if (v79)
  {
    MEMORY[0x19970E290](*(void *)(a1 + 24));
    if (*(unsigned char *)(a1 + 16)) {
      return MEMORY[0x19970E2B0](*(void *)(a1 + 24));
    }
    CFArrayRef v100 = *(const __CFArray **)(a1 + 280);
    if (v100 && CFArrayGetCount(v100))
    {
      return MEMORY[0x19970E2B0](*(void *)(a1 + 24));
    }
    else
    {
      CFArrayRef v101 = *(const __CFArray **)(a1 + 264);
      if (v101)
      {
        v102.length = CFArrayGetCount(v101);
        CFArrayRef v103 = *(const __CFArray **)(a1 + 264);
      }
      else
      {
        CFArrayRef v103 = 0;
        v102.length = 0;
      }
      v102.locatiouint64_t n = 0;
      CFArrayAppendArray(*(CFMutableArrayRef *)(a1 + 280), v103, v102);
      MEMORY[0x19970E2B0](*(void *)(a1 + 24));
      CMNotificationCenterGetDefaultLocalCenter();
      return CMNotificationCenterPostNotification();
    }
  }
  return result;
}

uint64_t aqOfflineMixer_outputBelowLowWater(uint64_t a1)
{
  if (dword_1E9351390)
  {
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!*(unsigned char *)(a1 + 16)) {
    return aqOfflineMixer_triggerSchedulingIfOutputIsLow(a1);
  }
  uint64_t v3 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  return fig_log_call_emit_and_clean_up_after_send_and_compose();
}

uint64_t FigAudioQueueOfflineMixerSetProperty(uint64_t a1, const void *a2, const void *a3)
{
  if (a1)
  {
    MEMORY[0x19970E290](*(void *)(a1 + 24));
    if (*(unsigned char *)(a1 + 16)) {
      goto LABEL_52;
    }
    if (CFEqual(a2, @"AudioQueueOfflineMixer_ClientPID"))
    {
      uint64_t FigBaseObject = FigActivitySchedulerGetFigBaseObject(*(void *)(a1 + 64));
      uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v8) {
        uint64_t v9 = v8;
      }
      else {
        uint64_t v9 = 0;
      }
      int v13 = *(uint64_t (**)(uint64_t, __CFString *, const void *))(v9 + 56);
      if (v13)
      {
        uint64_t v14 = kFigActivitySchedulerProperty_ClientPID;
LABEL_16:
        uint64_t v15 = v13(FigBaseObject, *v14, a3);
LABEL_53:
        uint64_t v19 = v15;
        goto LABEL_54;
      }
LABEL_39:
      uint64_t v19 = 4294954514;
      goto LABEL_54;
    }
    if (CFEqual(a2, @"AudioQueueOfflineMixer_SampleBufferAllocator"))
    {
      if (!a3)
      {
        uint64_t v12 = *(const void **)(a1 + 40);
        *(void *)(a1 + 40) = 0;
LABEL_22:
        if (v12) {
          CFRelease(v12);
        }
        goto LABEL_24;
      }
      CFTypeID TypeID = CFAllocatorGetTypeID();
      if (TypeID == CFGetTypeID(a3))
      {
        uint64_t v12 = *(const void **)(a1 + 40);
        *(void *)(a1 + 40) = a3;
        CFRetain(a3);
        goto LABEL_22;
      }
    }
    else if (CFEqual(a2, @"AudioQueueOfflineMixer_ThrottleForBackground"))
    {
      CFTypeID v16 = CFBooleanGetTypeID();
      if (v16 == CFGetTypeID(a3))
      {
        *(unsigned char *)(a1 + 73) = CFBooleanGetValue((CFBooleanRef)a3);
        uint64_t FigBaseObject = FigActivitySchedulerGetFigBaseObject(*(void *)(a1 + 64));
        uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v17) {
          uint64_t v18 = v17;
        }
        else {
          uint64_t v18 = 0;
        }
        int v13 = *(uint64_t (**)(uint64_t, __CFString *, const void *))(v18 + 56);
        if (v13)
        {
          uint64_t v14 = kFigActivitySchedulerProperty_ThrottleForBackground;
          goto LABEL_16;
        }
        goto LABEL_39;
      }
    }
    else if (CFEqual(a2, @"AudioQueueOfflineMixer_TimelineMilestone"))
    {
      CFTypeID v20 = CFDictionaryGetTypeID();
      if (v20 == CFGetTypeID(a3))
      {
        memset(&valuePtr, 0, sizeof(valuePtr));
        CMTimeMakeFromDictionary(&valuePtr, (CFDictionaryRef)a3);
        if ((*(unsigned char *)(a1 + 152) & 1) == 0 || (valuePtr.flags & 1) == 0)
        {
          *(CMTime *)(a1 + 140) = valuePtr;
          if (*(unsigned char *)(a1 + 104))
          {
            CMTime v26 = valuePtr;
            CMTime v25 = *(CMTime *)(a1 + 92);
            if (aqOfflineMixer_passedTimelineMilestone(a1, &v26, &v25)) {
              aqOfflineMixer_postMilestoneNotification(a1);
            }
          }
          goto LABEL_24;
        }
      }
    }
    else
    {
      if (!CFEqual(a2, @"AudioQueueOfflineMixer_TimelineMilestoneAllowance"))
      {
        if (CFEqual(a2, @"AudioQueueOfflineMixer_CodecQuality"))
        {
          if (!a3) {
            goto LABEL_52;
          }
          CFTypeID v22 = CFNumberGetTypeID();
          if (v22 != CFGetTypeID(a3)) {
            goto LABEL_52;
          }
        }
        else
        {
          if (!CFEqual(a2, @"AudioQueueOfflineMixer_BitRateForVBR"))
          {
            if (!CFEqual(a2, @"AudioQueueOfflineMixer_ThreadPriority"))
            {
              uint64_t v19 = 4294954512;
              goto LABEL_54;
            }
            if (a3)
            {
              CFTypeID v24 = CFNumberGetTypeID();
              if (v24 == CFGetTypeID(a3))
              {
                uint64_t v15 = FigActivitySchedulerSetProperty(*(void *)(a1 + 64), @"ThreadPriority", (uint64_t)a3);
                goto LABEL_53;
              }
            }
            goto LABEL_52;
          }
          if (!a3) {
            goto LABEL_52;
          }
          CFTypeID v23 = CFNumberGetTypeID();
          if (v23 != CFGetTypeID(a3)) {
            goto LABEL_52;
          }
        }
        LODWORD(valuePtr.value) = 0;
        CFNumberGetValue((CFNumberRef)a3, kCFNumberIntType, &valuePtr);
        uint64_t v15 = AQOfflineMixerSetProperty();
        goto LABEL_53;
      }
      if (a3)
      {
        CFTypeID v21 = CFNumberGetTypeID();
        if (v21 == CFGetTypeID(a3))
        {
          CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, (void *)(a1 + 296));
LABEL_24:
          uint64_t v19 = 0;
LABEL_54:
          MEMORY[0x19970E2B0](*(void *)(a1 + 24));
          return v19;
        }
      }
    }
LABEL_52:
    uint64_t v15 = FigSignalErrorAt();
    goto LABEL_53;
  }
  return FigSignalErrorAt();
}

BOOL aqOfflineMixer_passedTimelineMilestone(uint64_t a1, CMTime *a2, CMTime *a3)
{
  memset(&v8, 0, sizeof(v8));
  CMTime lhs = *a3;
  CMTime rhs = *a2;
  CMTimeSubtract(&v8, &lhs, &rhs);
  memset(&lhs, 0, sizeof(lhs));
  CMTimeMake(&lhs, *(int *)(a1 + 296), 1000);
  CMTime rhs = v8;
  CMTime v5 = lhs;
  return CMTimeCompare(&rhs, &v5) >= 0;
}

__n128 aqOfflineMixer_postMilestoneNotification(uint64_t a1)
{
  uint64_t MutableCopy = FigCFDictionaryCreateMutableCopy();
  uint64_t v3 = (_OWORD *)(a1 + 140);
  if (MutableCopy)
  {
    uint64_t v4 = (const void *)MutableCopy;
    FigCFDictionarySetCMTime();
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    uint64_t v5 = MEMORY[0x1E4F1F9F8];
    _OWORD *v3 = *MEMORY[0x1E4F1F9F8];
    *(void *)(a1 + 156) = *(void *)(v5 + 16);
    CFRelease(v4);
  }
  else
  {
    uint64_t v7 = MEMORY[0x1E4F1F9F8];
    __n128 result = *(__n128 *)MEMORY[0x1E4F1F9F8];
    _OWORD *v3 = *MEMORY[0x1E4F1F9F8];
    *(void *)(a1 + 156) = *(void *)(v7 + 16);
  }
  return result;
}

uint64_t FigAudioQueueOfflineMixerConnectAudioQueue(uint64_t a1, const void *a2)
{
  MEMORY[0x19970E290](*(void *)(a1 + 24));
  if (*(unsigned char *)(a1 + 16))
  {
    uint64_t v5 = FigSignalErrorAt();
  }
  else
  {
    if (dword_1E9351390)
    {
      os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v5 = AQOfflineMixerConnectAudioQueue();
    if (!v5)
    {
      CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 264), a2);
      CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 272), a2);
      *(unsigned char *)(a1 + 289) = 0;
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListeners();
    }
  }
  MEMORY[0x19970E2B0](*(void *)(a1 + 24));
  return v5;
}

uint64_t FigAudioQueueOfflineMixerDisconnectAudioQueue(uint64_t a1, const void *a2)
{
  MEMORY[0x19970E290](*(void *)(a1 + 24));
  if (*(unsigned char *)(a1 + 16)
    || (CFArrayRef v4 = *(const __CFArray **)(a1 + 264),
        v16.length = CFArrayGetCount(v4),
        v16.locatiouint64_t n = 0,
        FirstIndexOfCFNumberRef Value = CFArrayGetFirstIndexOfValue(v4, v16, a2),
        FirstIndexOfValue == -1))
  {
    uint64_t v8 = FigSignalErrorAt();
LABEL_6:
    uint64_t v9 = v8;
    goto LABEL_15;
  }
  CFIndex v6 = FirstIndexOfValue;
  if (dword_1E9351390)
  {
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v8 = AQOfflineMixerDisconnectAudioQueue();
  if (v8) {
    goto LABEL_6;
  }
  CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 264), v6);
  CFArrayRef v10 = *(const __CFArray **)(a1 + 264);
  v17.length = CFArrayGetCount(v10);
  v17.locatiouint64_t n = 0;
  if (!CFArrayContainsValue(v10, v17, a2))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListeners();
  }
  CFArrayRef v11 = *(const __CFArray **)(a1 + 272);
  v18.length = CFArrayGetCount(v11);
  v18.locatiouint64_t n = 0;
  CFIndex v12 = CFArrayGetFirstIndexOfValue(v11, v18, a2);
  if (v12 != -1)
  {
    CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 272), v12);
    *(unsigned char *)(a1 + 289) = CFArrayGetCount(*(CFArrayRef *)(a1 + 272)) == 0;
  }
  CFArrayRef v13 = *(const __CFArray **)(a1 + 280);
  v19.length = CFArrayGetCount(v13);
  v19.locatiouint64_t n = 0;
  CFIndex v14 = CFArrayGetFirstIndexOfValue(v13, v19, a2);
  if (v14 != -1) {
    CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 280), v14);
  }
  uint64_t v9 = 0;
LABEL_15:
  MEMORY[0x19970E2B0](*(void *)(a1 + 24));
  return v9;
}

uint64_t FigAudioQueueOfflineMixerStartRenderingForTimeRange(uint64_t a1, CMTime *a2, CMTime *a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  MEMORY[0x19970E290](*(void *)(a1 + 24));
  if (*(unsigned char *)(a1 + 16)) {
    goto LABEL_11;
  }
  if ((a2->flags & 0x1D) != 1) {
    goto LABEL_11;
  }
  CMTime time1 = *a3;
  CMTime time2 = *a2;
  if (CMTimeCompare(&time1, &time2) <= 0) {
    goto LABEL_11;
  }
  if (dword_1E9351390)
  {
    LODWORD(rhs.value) = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  int32_t v7 = *(_DWORD *)(a1 + 88);
  CMTime time2 = *a2;
  CMTimeConvertScale(&time1, &time2, v7, kCMTimeRoundingMethod_RoundTowardZero);
  *(CMTime *)(a1 + 92) = time1;
  int32_t v8 = *(_DWORD *)(a1 + 88);
  CMTime time2 = *a3;
  CMTimeConvertScale(&time1, &time2, v8, kCMTimeRoundingMethod_RoundAwayFromZero);
  *(CMTime *)(a1 + 116) = time1;
  *(unsigned char *)(a1 + 290) = 0;
  if (*(uint64_t *)(a1 + 324) >= 1)
  {
    CMTime time2 = *(CMTime *)(a1 + 92);
    CMTime rhs = *(CMTime *)(a1 + 324);
    CMTimeSubtract(&time1, &time2, &rhs);
    *(CMTime *)(a1 + 92) = time1;
  }
  if ((*(_DWORD *)(a1 + 104) & 0x1D) == 1) {
    uint64_t v9 = FigAudioQueueOfflineMixerGo(a1);
  }
  else {
LABEL_11:
  }
    uint64_t v9 = FigSignalErrorAt();
  uint64_t v10 = v9;
  MEMORY[0x19970E2B0](*(void *)(a1 + 24));
  return v10;
}

uint64_t FigAudioQueueOfflineMixerGo(uint64_t a1)
{
  if (dword_1E9351390)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x19970E290](*(void *)(a1 + 24));
  if (*(unsigned char *)(a1 + 16))
  {
    uint64_t v7 = FigSignalErrorAt();
  }
  else
  {
    MEMORY[0x19970E910](*(void *)(a1 + 80));
    *(unsigned char *)(a1 + 75) = 1;
    MEMORY[0x19970E930](*(void *)(a1 + 80));
    uint64_t v3 = *(void *)(a1 + 64);
    uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v4) {
      uint64_t v5 = v4;
    }
    else {
      uint64_t v5 = 0;
    }
    CFIndex v6 = *(void (**)(uint64_t))(v5 + 16);
    if (v6) {
      v6(v3);
    }
    uint64_t v7 = 0;
  }
  MEMORY[0x19970E2B0](*(void *)(a1 + 24));
  return v7;
}

uint64_t FigAudioQueueOfflineMixerInterruptAndStop(uint64_t a1)
{
  if (a1)
  {
    if (dword_1E9351390)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    MEMORY[0x19970E290](*(void *)(a1 + 24));
    if (*(unsigned char *)(a1 + 16))
    {
      uint64_t v3 = FigSignalErrorAt();
    }
    else
    {
      *(unsigned char *)(a1 + 74) = 1;
      MEMORY[0x19970E910](*(void *)(a1 + 80));
      *(unsigned char *)(a1 + 75) = 0;
      *(unsigned char *)(a1 + 74) = 0;
      MEMORY[0x19970E930](*(void *)(a1 + 80));
      uint64_t v3 = 0;
    }
    MEMORY[0x19970E2B0](*(void *)(a1 + 24));
    return v3;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigAudioQueueOfflineMixerReset(uint64_t a1, int a2)
{
  if (dword_1E9351390)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x19970E290](*(void *)(a1 + 24));
  MEMORY[0x19970E910](*(void *)(a1 + 80));
  if (*(unsigned char *)(a1 + 16))
  {
    uint64_t v5 = FigSignalErrorAt();
    goto LABEL_20;
  }
  uint64_t v5 = AQOfflineMixerReset();
  if (v5) {
    goto LABEL_20;
  }
  *(_OWORD *)(a1 + 324) = *(_OWORD *)(a1 + 300);
  *(void *)(a1 + 340) = *(void *)(a1 + 316);
  uint64_t v6 = MEMORY[0x1E4F1F9F8];
  long long v7 = *MEMORY[0x1E4F1F9F8];
  *(_OWORD *)(a1 + 372) = *MEMORY[0x1E4F1F9F8];
  uint64_t v8 = *(void *)(v6 + 16);
  *(void *)(a1 + 388) = v8;
  long long v21 = v7;
  *(_OWORD *)(a1 + 348) = v7;
  *(void *)(a1 + 364) = v8;
  CFArrayRef v9 = *(const __CFArray **)(a1 + 264);
  if (v9)
  {
    CFIndex Count = CFArrayGetCount(v9);
    if (Count >= 1)
    {
      CFIndex v11 = Count;
      for (CFIndex i = 0; i != v11; ++i)
      {
        CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 264), i);
        FigAudioQueueRestoreParameters((uint64_t)ValueAtIndex);
      }
    }
  }
  if (!a2) {
    goto LABEL_16;
  }
  uint64_t v14 = *(void *)(a1 + 32);
  uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v15) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = 0;
  }
  CFRange v17 = *(uint64_t (**)(uint64_t))(v16 + 72);
  if (!v17)
  {
    uint64_t v19 = 4294954514;
    goto LABEL_18;
  }
  uint64_t v5 = v17(v14);
  if (v5)
  {
LABEL_20:
    uint64_t v19 = v5;
    goto LABEL_18;
  }
  *(_DWORD *)(a1 + 416) = 0;
  *(_OWORD *)(a1 + 420) = v21;
  *(void *)(a1 + 436) = v8;
  *(_OWORD *)(a1 + 444) = v21;
  *(void *)(a1 + 460) = v8;
  uint64_t v18 = MEMORY[0x1E4F1FA48];
  *(_OWORD *)(a1 + 468) = *MEMORY[0x1E4F1FA48];
  *(void *)(a1 + 484) = *(void *)(v18 + 16);
LABEL_16:
  uint64_t v19 = 0;
  *(unsigned char *)(a1 + 288) = 0;
  *(unsigned char *)(a1 + 75) = 0;
  *(_WORD *)(a1 + 290) = 0;
  *(_OWORD *)(a1 + 92) = v21;
  *(void *)(a1 + 108) = v8;
  *(_OWORD *)(a1 + 116) = v21;
  *(void *)(a1 + 132) = v8;
  *(_OWORD *)(a1 + 140) = v21;
  *(void *)(a1 + 156) = v8;
  *(unsigned char *)(a1 + 289) = 0;
LABEL_18:
  MEMORY[0x19970E930](*(void *)(a1 + 80));
  MEMORY[0x19970E2B0](*(void *)(a1 + 24));
  return v19;
}

uint64_t aqOfflineMixer_faqDidEnqueueData(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  MEMORY[0x19970E290](*(void *)(a2 + 24));
  if (dword_1E9351390)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(unsigned char *)(a2 + 16))
  {
    long long v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  else
  {
    CFArrayRef v8 = *(const __CFArray **)(a2 + 280);
    if (v8)
    {
      uint64_t Count = CFArrayGetCount(v8);
      if (a4)
      {
        v10.length = Count;
        if (Count >= 1)
        {
          v10.locatiouint64_t n = 0;
          FirstIndexOfCFNumberRef Value = CFArrayGetFirstIndexOfValue(*(CFArrayRef *)(a2 + 280), v10, a4);
          if (FirstIndexOfValue != -1) {
            CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a2 + 280), FirstIndexOfValue);
          }
        }
      }
    }
    aqOfflineMixer_triggerSchedulingIfOutputIsLow(a2);
  }
  return MEMORY[0x19970E2B0](*(void *)(a2 + 24));
}

uint64_t aqOfflineMixer_faqDidStart(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  MEMORY[0x19970E290](*(void *)(a2 + 24));
  if (dword_1E9351390)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(unsigned char *)(a2 + 16))
  {
    long long v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  else
  {
    CFArrayRef v8 = *(const __CFArray **)(a2 + 272);
    v17.length = CFArrayGetCount(v8);
    v17.locatiouint64_t n = 0;
    FirstIndexOfCFNumberRef Value = CFArrayGetFirstIndexOfValue(v8, v17, a4);
    if (FirstIndexOfValue != -1)
    {
      for (CFIndex i = FirstIndexOfValue; i != -1; CFIndex i = CFArrayGetFirstIndexOfValue(v11, v18, a4))
      {
        CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a2 + 272), i);
        CFArrayRef v11 = *(const __CFArray **)(a2 + 272);
        v18.length = CFArrayGetCount(v11);
        v18.locatiouint64_t n = 0;
      }
    }
    *(unsigned char *)(a2 + 289) = CFArrayGetCount(*(CFArrayRef *)(a2 + 272)) == 0;
    if (*(unsigned char *)(a2 + 75) && *(unsigned char *)(a2 + 289))
    {
      uint64_t v12 = *(void *)(a2 + 64);
      uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v13) {
        uint64_t v14 = v13;
      }
      else {
        uint64_t v14 = 0;
      }
      uint64_t v16 = *(void (**)(uint64_t))(v14 + 16);
      if (v16) {
        v16(v12);
      }
    }
  }
  return MEMORY[0x19970E2B0](*(void *)(a2 + 24));
}

uint64_t aqOfflineMixer_triggerSchedulingIfOutputIsLow(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v6 = *(void *)(VTable + 16);
  uint64_t result = VTable + 16;
  uint64_t v5 = v6;
  if (v6) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0;
  }
  CFArrayRef v8 = *(uint64_t (**)(uint64_t))(v7 + 24);
  if (v8)
  {
    uint64_t result = v8(v2);
    if (result)
    {
      uint64_t v9 = *(void *)(a1 + 64);
      uint64_t v10 = CMBaseObjectGetVTable();
      uint64_t v12 = *(void *)(v10 + 16);
      uint64_t result = v10 + 16;
      uint64_t v11 = v12;
      uint64_t v13 = v12 ? v11 : 0;
      uint64_t v14 = *(uint64_t (**)(uint64_t))(v13 + 16);
      if (v14)
      {
        return v14(v9);
      }
    }
  }
  return result;
}

double aqOfflineMixer_Init(_OWORD *a1)
{
  double result = 0.0;
  a1[29] = 0u;
  a1[30] = 0u;
  a1[27] = 0u;
  a1[28] = 0u;
  a1[25] = 0u;
  a1[26] = 0u;
  a1[23] = 0u;
  a1[24] = 0u;
  a1[21] = 0u;
  a1[22] = 0u;
  a1[19] = 0u;
  a1[20] = 0u;
  a1[17] = 0u;
  a1[18] = 0u;
  a1[15] = 0u;
  a1[16] = 0u;
  a1[13] = 0u;
  a1[14] = 0u;
  a1[11] = 0u;
  a1[12] = 0u;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  return result;
}

uint64_t aqOfflineMixer_Finalize(uint64_t a1)
{
  if (dword_1E9351390)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  FigAudioQueueOfflineMixerInvalidate(a1);
  uint64_t v3 = *(const void **)(a1 + 64);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 64) = 0;
  }
  if (*(void *)(a1 + 256))
  {
    AQOfflineMixerDispose();
    *(void *)(a1 + 256) = 0;
  }
  uint64_t v4 = *(_DWORD **)(a1 + 248);
  if (v4)
  {
    if (*v4)
    {
      unint64_t v5 = 0;
      uint64_t v6 = 4;
      do
      {
        free(*(void **)&v4[v6]);
        ++v5;
        uint64_t v4 = *(_DWORD **)(a1 + 248);
        v6 += 4;
      }
      while (v5 < *v4);
    }
    free(v4);
    *(void *)(a1 + 248) = 0;
  }
  free(*(void **)(a1 + 216));
  *(void *)(a1 + 216) = 0;
  free(*(void **)(a1 + 224));
  *(void *)(a1 + 224) = 0;
  free(*(void **)(a1 + 232));
  *(void *)(a1 + 232) = 0;
  uint64_t v7 = *(const void **)(a1 + 168);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(a1 + 168) = 0;
  }
  CFArrayRef v8 = *(const void **)(a1 + 264);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(a1 + 264) = 0;
  }
  uint64_t v9 = *(const void **)(a1 + 272);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(a1 + 272) = 0;
  }
  uint64_t v10 = *(const void **)(a1 + 280);
  if (v10)
  {
    CFRelease(v10);
    *(void *)(a1 + 280) = 0;
  }
  uint64_t v11 = *(const void **)(a1 + 40);
  if (v11)
  {
    CFRelease(v11);
    *(void *)(a1 + 40) = 0;
  }
  uint64_t v12 = *(const void **)(a1 + 32);
  if (v12)
  {
    CFRelease(v12);
    *(void *)(a1 + 32) = 0;
  }
  if (*(void *)(a1 + 80))
  {
    FigSimpleMutexDestroy();
    *(void *)(a1 + 80) = 0;
  }
  uint64_t result = *(void *)(a1 + 24);
  if (result)
  {
    uint64_t result = FigSimpleMutexDestroy();
    *(void *)(a1 + 24) = 0;
  }
  return result;
}

CFStringRef aqOfflineMixer_CopyFormattingDesc(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v1 = " (invalidated)";
  }
  else {
    uint64_t v1 = "";
  }
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigAudioQueueOfflineMixer %p%s]", a1, v1);
}

__CFString *aqOfflineMixer_CopyDebugDesc(uint64_t a1)
{
  CFAllocatorRef v2 = CFGetAllocator((CFTypeRef)a1);
  CFMutableArrayRef Mutable = CFStringCreateMutable(v2, 0);
  CFIndex v4 = CFGetRetainCount((CFTypeRef)a1);
  if (*(unsigned char *)(a1 + 16)) {
    unint64_t v5 = " (invalidated)";
  }
  else {
    unint64_t v5 = "";
  }
  CFAllocatorRef v6 = CFGetAllocator((CFTypeRef)a1);
  CFStringAppendFormat(Mutable, 0, @"<FigAudioQueueOfflineMixer %p retainCount: %d%s allocator: %p, ", a1, v4, v5, v6);
  CFStringAppendFormat(Mutable, 0, @"sampleBufferConsumer %@, activityScheduler %@", *(void *)(a1 + 32), *(void *)(a1 + 64));
  CFStringAppendFormat(Mutable, 0, @", numberOfSampleBuffersOutput %d", *(unsigned int *)(a1 + 416));
  if (*(unsigned char *)(a1 + 291)) {
    uint64_t v7 = " (didSendReachedEndOfOutputData)";
  }
  else {
    uint64_t v7 = "";
  }
  if (*(unsigned char *)(a1 + 292)) {
    CFArrayRef v8 = " (didFinishPendingProcessingAtEndOfInput)";
  }
  else {
    CFArrayRef v8 = "";
  }
  CFStringAppendFormat(Mutable, 0, @"%s%s", v7, v8);
  CFStringAppendFormat(Mutable, 0, @">");
  return Mutable;
}

void FigCoreAnimationRendererInvalidate(uint64_t a1)
{
  if (a1 && !*(unsigned char *)(a1 + 16))
  {
    CFAllocatorRef v2 = (void *)MEMORY[0x199711A30]();
    *(unsigned char *)(a1 + 16) = 1;
    [MEMORY[0x1E4F38D58] setCurrentContext:*(void *)(a1 + 104)];
    [MEMORY[0x1E4F39CF8] begin];
    if (!pthread_main_np()) {
      [MEMORY[0x1E4F39CF8] activateBackground:1];
    }
    [MEMORY[0x1E4F39CF8] setDisableActions:1];
    [*(id *)(a1 + 96) setLayer:0];
    [MEMORY[0x1E4F39CF8] commit];
    uint64_t v3 = *(const void **)(a1 + 96);
    if (v3) {
      CFRelease(v3);
    }
    *(void *)(a1 + 96) = 0;
    glDeleteTextures(1, (const GLuint *)(a1 + 112));
    if (*(void *)(a1 + 104))
    {
      uint64_t v4 = [MEMORY[0x1E4F38D58] currentContext];
      unint64_t v5 = *(const void **)(a1 + 104);
      if ((const void *)v4 == v5)
      {
        [MEMORY[0x1E4F38D58] setCurrentContext:0];
        unint64_t v5 = *(const void **)(a1 + 104);
      }
      if (v5) {
        CFRelease(v5);
      }
      *(void *)(a1 + 104) = 0;
    }
    CGColorSpaceRelease(*(CGColorSpaceRef *)(a1 + 72));
    *(void *)(a1 + 72) = 0;
    CFAllocatorRef v6 = *(const void **)(a1 + 80);
    if (v6)
    {
      CFRelease(v6);
      *(void *)(a1 + 80) = 0;
    }
    [MEMORY[0x1E4F39CF8] begin];
    if (!pthread_main_np()) {
      [MEMORY[0x1E4F39CF8] activateBackground:1];
    }
    [MEMORY[0x1E4F39CF8] setValue:*MEMORY[0x1E4F1CFD0] forKey:*MEMORY[0x1E4F3A5A8]];
    CFRelease(*(CFTypeRef *)(a1 + 24));
    *(void *)(a1 + 24) = 0;
    CFArrayRef v7 = *(const __CFArray **)(a1 + 48);
    if (v7)
    {
      CFIndex Count = CFArrayGetCount(v7);
      if (Count >= 1)
      {
        CFIndex v9 = Count;
        for (CFIndex i = 0; i != v9; ++i)
          objc_msgSend((id)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 48), i), "setContents:", 0);
      }
      CFRelease(*(CFTypeRef *)(a1 + 48));
      *(void *)(a1 + 48) = 0;
    }
    CFArrayRef v11 = *(const __CFArray **)(a1 + 56);
    if (v11)
    {
      CFIndex v12 = CFArrayGetCount(v11);
      if (v12 >= 1)
      {
        CFIndex v13 = v12;
        for (CFIndex j = 0; j != v13; ++j)
        {
          CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 56), j);
          CAImageQueueFlush();
          CAImageQueueCollect();
        }
      }
      CFRelease(*(CFTypeRef *)(a1 + 56));
      *(void *)(a1 + 56) = 0;
    }
    [*(id *)(a1 + 88) setLayer:0];
    uint64_t v15 = *(const void **)(a1 + 88);
    if (v15) {
      CFRelease(v15);
    }
    *(void *)(a1 + 88) = 0;
    [MEMORY[0x1E4F39CF8] commit];
    uint64_t v16 = *(__CVPixelBufferPool **)(a1 + 64);
    if (v16)
    {
      CVPixelBufferPoolRelease(v16);
      *(void *)(a1 + 64) = 0;
    }
    CFRange v17 = *(const void **)(a1 + 120);
    if (v17) {
      CFRelease(v17);
    }
    *(void *)(a1 + 120) = 0;
    CFRange v18 = *(const void **)(a1 + 128);
    if (v18) {
      CFRelease(v18);
    }
    *(void *)(a1 + 128) = 0;
    uint64_t v19 = *(const void **)(a1 + 40);
    if (v19) {
      CFRelease(v19);
    }
    *(void *)(a1 + 40) = 0;
  }
}

uint64_t RegisterFCARType()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sFCARIOSurfaceID ID = result;
  return result;
}

uint64_t FigCoreAnimationRendererCreate(const __CFAllocator *a1, const __CFDictionary *a2, uint64_t a3, const __CFArray *a4, const __CFDictionary *a5, uint64_t *a6)
{
  valuePtr[0] = 1111970369;
  CFIndex v12 = (void *)MEMORY[0x199711A30]();
  CFDictionaryRef v50 = 0;
  if (!a6)
  {
    uint64_t v25 = FigSignalErrorAt();
    goto LABEL_19;
  }
  if (a2)
  {
    if (a3)
    {
      MEMORY[0x19970EE10](&sRegisterFCARTypeOnce, RegisterFCARType);
      uint64_t Instance = _CFRuntimeCreateInstance();
      if (Instance)
      {
        uint64_t v14 = Instance;
        *(void *)(Instance + 144) = 0x7FFFFFFFLL;
        *(void *)(Instance + 176) = 0x7FFFFFFFLL;
        uint64_t MutableCopy = CFDictionaryCreateMutableCopy(a1, 0, a2);
        if (!MutableCopy) {
          goto LABEL_63;
        }
        CFAllocatorRef v16 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        CFNumberRef v17 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, valuePtr);
        CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x1E4F24D70], v17);
        CFRelease(v17);
        CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(MutableCopy, (const void *)*MEMORY[0x1E4F24E10]);
        if (!Value) {
          goto LABEL_63;
        }
        CFNumberGetValue(Value, kCFNumberIntType, (void *)(v14 + 32));
        CFNumberRef v19 = (const __CFNumber *)CFDictionaryGetValue(MutableCopy, (const void *)*MEMORY[0x1E4F24D08]);
        if (!v19) {
          goto LABEL_63;
        }
        CFNumberGetValue(v19, kCFNumberIntType, (void *)(v14 + 36));
        [MEMORY[0x1E4F39CF8] begin];
        if (!pthread_main_np()) {
          [MEMORY[0x1E4F39CF8] activateBackground:1];
        }
        uint64_t v47 = *MEMORY[0x1E4F3A5A8];
        uint64_t v48 = *MEMORY[0x1E4F1CFD0];
        objc_msgSend(MEMORY[0x1E4F39CF8], "setValue:forKey:");
        CFTypeID v20 = (void *)CFRetain((CFTypeRef)[MEMORY[0x1E4F39BE8] layer]);
        *(void *)(v14 + 24) = v20;
        [v20 addSublayer:a3];
        objc_msgSend(*(id *)(v14 + 24), "setFrame:", 0.0, 0.0, (double)*(int *)(v14 + 32), (double)*(int *)(v14 + 36));
        long long v21 = *(void **)(v14 + 24);
        CATransform3DMakeScale(&v49, 1.0, -1.0, 1.0);
        [v21 setSublayerTransform:&v49];
        [MEMORY[0x1E4F39CF8] commit];
        uint64_t v22 = fcar_ensureBufferAttributesCompatibleWithHWProcessing(MutableCopy);
        if (v22) {
          goto LABEL_64;
        }
        if (a4)
        {
          CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(a4, 0);
          if (ValueAtIndex)
          {
            CFTypeID v24 = CFGetTypeID(ValueAtIndex);
            if (v24 == CAImageQueueGetTypeID())
            {
              *(void *)(v14 + 56) = CFRetain(a4);
            }
            else
            {
              objc_opt_class();
              if (objc_opt_isKindOfClass()) {
                *(void *)(v14 + 48) = CFRetain(a4);
              }
            }
          }
        }
        if (*(void *)(v14 + 48))
        {
          CFAllocatorRef v27 = CFGetAllocator((CFTypeRef)v14);
          CFMutableArrayRef Mutable = CFArrayCreateMutable(v27, 0, MEMORY[0x1E4F1D510]);
          *(void *)(v14 + 56) = Mutable;
          if (Mutable)
          {
            CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(v14 + 48));
            [MEMORY[0x1E4F39CF8] begin];
            if (!pthread_main_np()) {
              [MEMORY[0x1E4F39CF8] activateBackground:1];
            }
            [MEMORY[0x1E4F39CF8] setValue:v48 forKey:v47];
            if (Count < 1)
            {
LABEL_31:
              uint64_t v25 = 0;
            }
            else
            {
              CFIndex v30 = 0;
              while (1)
              {
                uint64_t v31 = CAImageQueueCreate();
                if (!v31) {
                  break;
                }
                uint64_t v32 = (const void *)v31;
                CAImageQueueSetFlags();
                objc_msgSend((id)CFArrayGetValueAtIndex(*(CFArrayRef *)(v14 + 48), v30), "setContents:", v32);
                CFArrayAppendValue(*(CFMutableArrayRef *)(v14 + 56), v32);
                CFRelease(v32);
                if (Count == ++v30) {
                  goto LABEL_31;
                }
              }
              uint64_t v25 = FigSignalErrorAt();
            }
            [MEMORY[0x1E4F39CF8] commit];
            [MEMORY[0x1E4F39CF8] synchronize];
            if (v25) {
              goto LABEL_65;
            }
          }
          else
          {
            uint64_t v25 = FigSignalErrorAt();
            if (v25) {
              goto LABEL_65;
            }
          }
        }
        if (*(void *)(v14 + 56) || *(void *)(v14 + 48))
        {
          uint64_t v22 = VTPixelTransferSessionCreate(v16, (VTPixelTransferSessionRef *)(v14 + 120));
          if (v22) {
            goto LABEL_64;
          }
          CFMutableArrayRef v33 = CFArrayCreateMutable(v16, 0, MEMORY[0x1E4F1D510]);
          *(void *)(v14 + 128) = v33;
          if (!v33)
          {
LABEL_63:
            uint64_t v22 = FigSignalErrorAt();
            goto LABEL_64;
          }
        }
        uint64_t v34 = (const void **)MEMORY[0x1E4F24A00];
        if (a5
          && (*(void *)(v14 + 88) = CFDictionaryGetValue(a5, @"RenderCAContext"),
              (long long v35 = CFDictionaryGetValue(a5, @"DestinationColorAttachments")) != 0))
        {
          uint64_t v36 = v35;
          CFTypeID TypeID = CFDictionaryGetTypeID();
          if (TypeID != CFGetTypeID(v36)) {
            goto LABEL_63;
          }
          uint64_t v38 = CFDictionaryGetValue((CFDictionaryRef)v36, *v34);
          if (v38)
          {
            size_t v39 = v38;
            CFTypeID v40 = CGColorSpaceGetTypeID();
            if (v40 != CFGetTypeID(v39)) {
              goto LABEL_63;
            }
            *(void *)(v14 + 72) = CFRetain(v39);
          }
          size_t v41 = (CGColorSpaceRef *)(v14 + 72);
          if (*(void *)(v14 + 72))
          {
            uint64_t v42 = CFDictionaryCreateMutableCopy(v16, 0, (CFDictionaryRef)v36);
            goto LABEL_49;
          }
        }
        else
        {
          size_t v41 = (CGColorSpaceRef *)(v14 + 72);
          if (*(void *)(v14 + 72))
          {
LABEL_48:
            uint64_t v42 = CFDictionaryCreateMutable(v16, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
LABEL_49:
            *(void *)(v14 + 80) = v42;
            if (v42)
            {
              CFDictionarySetValue(v42, *v34, *(const void **)(v14 + 72));
              CFGetAllocator((CFTypeRef)v14);
              uint64_t v22 = VTCreatePixelBufferPoolAttributesWithName();
              if (!v22)
              {
                CFAllocatorRef v44 = CFGetAllocator((CFTypeRef)v14);
                if (!CVPixelBufferPoolCreate(v44, v50, *(CFDictionaryRef *)(v14 + 40), (CVPixelBufferPoolRef *)(v14 + 64)))
                {
                  [MEMORY[0x1E4F39CF8] begin];
                  if (!pthread_main_np()) {
                    [MEMORY[0x1E4F39CF8] activateBackground:1];
                  }
                  [MEMORY[0x1E4F39CF8] setValue:v48 forKey:v47];
                  uint64_t v45 = *(const void **)(v14 + 88);
                  if (v45)
                  {
                    CFRetain(v45);
                    CFIndex v46 = *(void **)(v14 + 88);
                  }
                  else
                  {
                    CFIndex v46 = (void *)[MEMORY[0x1E4F39B58] localContext];
                    if (v46) {
                      CFIndex v46 = (void *)CFRetain(v46);
                    }
                    *(void *)(v14 + 88) = v46;
                  }
                  if (v46)
                  {
                    [v46 setColorSpace:*(void *)(v14 + 72)];
                    [MEMORY[0x1E4F39CF8] commit];
                    [MEMORY[0x1E4F39CF8] flush];
                    uint64_t v25 = fcar_setupGLESRenderer(v14);
                    if (!v25)
                    {
                      *a6 = v14;
                      goto LABEL_66;
                    }
LABEL_65:
                    CFRelease((CFTypeRef)v14);
LABEL_66:
                    if (MutableCopy) {
                      CFRelease(MutableCopy);
                    }
                    goto LABEL_16;
                  }
                  [MEMORY[0x1E4F39CF8] commit];
                }
                goto LABEL_63;
              }
LABEL_64:
              uint64_t v25 = v22;
              goto LABEL_65;
            }
            goto LABEL_63;
          }
        }
        CGColorSpaceRef DeviceRGB = CGColorSpaceCreateDeviceRGB();
        CGColorSpaceRef *v41 = DeviceRGB;
        if (!DeviceRGB) {
          goto LABEL_63;
        }
        goto LABEL_48;
      }
    }
  }
  uint64_t v25 = FigSignalErrorAt();
LABEL_16:
  if (v50) {
    CFRelease(v50);
  }
LABEL_19:
  return v25;
}

uint64_t fcar_ensureBufferAttributesCompatibleWithHWProcessing(CFDictionaryRef theDict)
{
  CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, theDict);
  if (MutableCopy)
  {
    CFAllocatorRef v2 = MutableCopy;
    FigGetAlignmentForIOSurfaceOutput();
    uint64_t v3 = (const void *)*MEMORY[0x1E4F24D78];
    if (!CFDictionaryGetValue(v2, (const void *)*MEMORY[0x1E4F24D78])) {
      fcar_addNumberToDictionary(v2, v3, 0);
    }
    uint64_t v4 = (const void *)*MEMORY[0x1E4F24C98];
    if (!CFDictionaryGetValue(v2, (const void *)*MEMORY[0x1E4F24C98])) {
      fcar_addNumberToDictionary(v2, v4, 0);
    }
    uint64_t PixelBufferAttributesWithIOSurfaceSupport = FigCreatePixelBufferAttributesWithIOSurfaceSupport();
    CFRelease(v2);
    return PixelBufferAttributesWithIOSurfaceSupport;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t fcar_setupGLESRenderer(uint64_t a1)
{
  CFAllocatorRef v2 = (const void *)[objc_alloc(MEMORY[0x1E4F38D58]) initWithAPI:3];
  *(void *)(a1 + 104) = v2;
  if (v2)
  {
    CFRetain(v2);
    uint64_t v3 = *(void **)(a1 + 104);
  }
  else
  {
    uint64_t v3 = 0;
  }
  GLuint framebuffers = 0;

  if (*(void *)(a1 + 104))
  {
    objc_msgSend(MEMORY[0x1E4F38D58], "setCurrentContext:");
    uint64_t v4 = *(void **)(a1 + 104);
    int v11 = 2;
    if ([v4 setParameter:608 to:&v11]) {
      FigSignalErrorAt();
    }
    GLsizei v5 = *(_DWORD *)(a1 + 32);
    GLsizei v6 = *(_DWORD *)(a1 + 36);
    glGenTextures(1, (GLuint *)(a1 + 112));
    glBindTexture(0xDE1u, *(_DWORD *)(a1 + 112));
    glTexParameteri(0xDE1u, 0x2801u, 9728);
    glTexParameteri(0xDE1u, 0x2800u, 9728);
    glTexParameteri(0xDE1u, 0x2802u, 33071);
    glTexParameteri(0xDE1u, 0x2803u, 33071);
    glGenFramebuffers(1, &framebuffers);
    glBindFramebuffer(0x8D40u, framebuffers);
    glFramebufferTexture2D(0x8D40u, 0x8CE0u, 0xDE1u, *(_DWORD *)(a1 + 112), 0);
    glViewport(0, 0, v5, v6);
    CFArrayRef v7 = (const void *)[MEMORY[0x1E4F39C60] rendererWithEAGLContext:*(void *)(a1 + 104) options:0];
    *(void *)(a1 + 96) = v7;
    if (v7)
    {
      CFRetain(v7);
      [MEMORY[0x1E4F39CF8] begin];
      if (!pthread_main_np()) {
        [MEMORY[0x1E4F39CF8] activateBackground:1];
      }
      [MEMORY[0x1E4F39CF8] setValue:*MEMORY[0x1E4F1CFD0] forKey:*MEMORY[0x1E4F3A5A8]];
      [*(id *)(a1 + 96) setLayer:*(void *)(a1 + 24)];
      objc_msgSend(*(id *)(a1 + 96), "setBounds:", 0.0, 0.0, (double)v5, (double)v6);
      [MEMORY[0x1E4F39CF8] commit];
      uint64_t v8 = 0;
    }
    else
    {
      uint64_t v8 = 4294954973;
    }
  }
  else
  {
    uint64_t v8 = 4294954974;
  }
  [MEMORY[0x1E4F38D58] setCurrentContext:0];
  return v8;
}

uint64_t FigCoreAnimationRendererCopyProperty(uint64_t a1, CFTypeRef cf1, uint64_t a3, CFDictionaryRef *a4)
{
  if (*(unsigned char *)(a1 + 16))
  {
    return FigSignalErrorAt();
  }
  else if (CFEqual(cf1, @"FCARPerformanceDictionary"))
  {
    fcar_copyPerformanceDictionary(a1, a4);
    return 0;
  }
  else
  {
    return 4294954971;
  }
}

void fcar_copyPerformanceDictionary(uint64_t a1, CFDictionaryRef *a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    *(_OWORD *)keys = 0u;
    long long v24 = 0u;
    *(_OWORD *)CMTime values = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    GLsizei v5 = (const void *)(a1 + 160);
    int v4 = *(_DWORD *)(a1 + 160);
    double valuePtr = 0.0;
    CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    if (v4 < 1)
    {
      int v7 = 0;
    }
    else
    {
      double valuePtr = (float)((float)*(uint64_t *)(a1 + 152) / (float)((float)v4 * 1000000.0));
      keys[0] = @"AverageCoreAnimationRendererConversionTime";
      values[0] = CFNumberCreate(v6, kCFNumberDoubleType, &valuePtr);
      double valuePtr = (float)((float)*(uint64_t *)(a1 + 136) / 1000000.0);
      keys[1] = @"MaxCoreAnimationRendererConversionTime";
      values[1] = CFNumberCreate(v6, kCFNumberDoubleType, &valuePtr);
      double valuePtr = (float)((float)*(uint64_t *)(a1 + 144) / 1000000.0);
      *(void *)&long long v24 = @"MinCoreAnimationRendererConversionTime";
      *(void *)&long long v14 = CFNumberCreate(v6, kCFNumberDoubleType, &valuePtr);
      int v7 = 3;
    }
    keys[v7] = @"NumberOfCoreAnimationRendererConversions";
    values[v7] = CFNumberCreate(v6, kCFNumberIntType, v5);
    unsigned int v8 = v7 + 1;
    int v9 = *(_DWORD *)(a1 + 192);
    if (v9 >= 1)
    {
      double valuePtr = (float)((float)*(uint64_t *)(a1 + 184) / (float)((float)v9 * 1000000.0));
      keys[v8] = @"AverageCoreAnimationRendererRenderingTime";
      values[v8] = CFNumberCreate(v6, kCFNumberDoubleType, &valuePtr);
      double valuePtr = (float)((float)*(uint64_t *)(a1 + 168) / 1000000.0);
      keys[v7 + 2] = @"MaxCoreAnimationRendererRenderingTime";
      values[v7 + 2] = CFNumberCreate(v6, kCFNumberDoubleType, &valuePtr);
      double valuePtr = (float)((float)*(uint64_t *)(a1 + 176) / 1000000.0);
      keys[v7 + 3] = @"MinCoreAnimationRendererRenderingTime";
      values[v7 + 3] = CFNumberCreate(v6, kCFNumberDoubleType, &valuePtr);
      unsigned int v8 = v7 | 4;
    }
    uint64_t v10 = v8;
    int v11 = values;
    *a2 = CFDictionaryCreate(v6, (const void **)keys, (const void **)values, v8, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    do
    {
      if (*v11) {
        CFRelease(*v11);
      }
      ++v11;
      --v10;
    }
    while (v10);
  }
}

uint64_t FigCoreAnimationRendererSetProperty(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16)) {
    return FigSignalErrorAt();
  }
  else {
    return 4294954971;
  }
}

uint64_t FigCoreAnimationRendererCopyPixelBufferAtTime(uint64_t a1, CMTime *a2, const __CFArray *a3, CVPixelBufferRef *a4, CMTime *a5)
{
  CVPixelBufferRef pixelBufferOut = 0;
  uint64_t v10 = (void *)MEMORY[0x199711A30]();
  unint64_t v11 = 0x1E4F38000uLL;
  if (!a4) {
    goto LABEL_12;
  }
  CFRange v102 = a2;
  CFAllocatorRef v12 = CFGetAllocator((CFTypeRef)a1);
  uint64_t v13 = CVPixelBufferPoolCreatePixelBuffer(v12, *(CVPixelBufferPoolRef *)(a1 + 64), &pixelBufferOut);
  long long v14 = pixelBufferOut;
  if (v13) {
    BOOL v15 = 1;
  }
  else {
    BOOL v15 = pixelBufferOut == 0;
  }
  if (v15)
  {
    CFMutableArrayRef Mutable = 0;
    if (pixelBufferOut) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
  CVPixelBufferGetPixelFormatType(pixelBufferOut);
  size_t Width = CVPixelBufferGetWidth(pixelBufferOut);
  size_t Height = CVPixelBufferGetHeight(pixelBufferOut);
  CVBufferSetAttachments(pixelBufferOut, *(CFDictionaryRef *)(a1 + 80), kCVAttachmentMode_ShouldPropagate);
  if (!a3)
  {
    unint64_t v92 = Height;
    unint64_t v93 = Width;
    int v94 = a5;
    double v95 = a4;
    CFMutableArrayRef Mutable = 0;
    goto LABEL_22;
  }
  CFIndex Count = CFArrayGetCount(a3);
  CFArrayRef v20 = *(const __CFArray **)(a1 + 56);
  if (!v20 || Count > CFArrayGetCount(v20))
  {
LABEL_12:
    uint64_t v13 = FigSignalErrorAt();
    CFMutableArrayRef Mutable = 0;
    goto LABEL_13;
  }
  int v94 = a5;
  double v95 = a4;
  CFAllocatorRef v44 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (!Mutable)
  {
    uint64_t v13 = 4294954974;
    goto LABEL_13;
  }
  CFAllocatorRef allocator = v44;
  [MEMORY[0x1E4F39CF8] begin];
  if (!pthread_main_np()) {
    [MEMORY[0x1E4F39CF8] activateBackground:1];
  }
  CMTime v86 = v10;
  [MEMORY[0x1E4F39CF8] setValue:*MEMORY[0x1E4F1CFD0] forKey:*MEMORY[0x1E4F3A5A8]];
  CFArrayRef v45 = *(const __CFArray **)(a1 + 56);
  sessiouint64_t n = *(OpaqueVTPixelTransferSession **)(a1 + 120);
  CFArrayRef theArray = *(const __CFArray **)(a1 + 128);
  CFIndex v46 = CFArrayGetCount(a3);
  CFArrayRef v103 = v45;
  CFIndex v47 = CFArrayGetCount(v45);
  if (v46 >= v47) {
    uint64_t v48 = v47;
  }
  else {
    uint64_t v48 = v46;
  }
  uint64_t v96 = v48;
  unint64_t v92 = Height;
  unint64_t v93 = Width;
  if (v48 < 1)
  {
    uint64_t v13 = 0;
    float v51 = 0;
    goto LABEL_121;
  }
  CFIndex v49 = 0;
  CFStringRef key = (void *)*MEMORY[0x1E4F24E10];
  unsigned int v91 = (void *)*MEMORY[0x1E4F24D08];
  CFIndex v89 = v46 - 1;
  CFArrayRef v90 = a3;
  int v87 = (void *)*MEMORY[0x1E4F24D70];
  CFIndex v88 = v47 - 1;
  while (1)
  {
    CFStringRef ValueAtIndex = (__CVBuffer *)CFArrayGetValueAtIndex(a3, v49);
    if (!ValueAtIndex) {
      goto LABEL_109;
    }
    float v51 = ValueAtIndex;
    CFTypeID v52 = CFGetTypeID(ValueAtIndex);
    if (v52 != CVPixelBufferGetTypeID()) {
      goto LABEL_109;
    }
    uint64_t ID = 0;
    CVPixelBufferGetWidth(v51);
    CVPixelBufferGetHeight(v51);
    PixelFormatint Type = CVPixelBufferGetPixelFormatType(v51);
    OSType v54 = PixelFormatType;
    if (PixelFormatType == 32
      || PixelFormatType == 1111970369
      || (PixelFormatType & 0xFFFFFFEF) == 0x34323066
      && (OSType v55 = PixelFormatType, IOSurface = CVPixelBufferGetIOSurface(v51), v54 = v55, IOSurface))
    {
      int v99 = v54;
      CVPixelBufferRetain(v51);
      goto LABEL_95;
    }
    int v99 = 1111970369;
    CVPixelBufferRef v106 = 0;
    uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
    time.unsigned int value = 0;
    size_t v57 = CVPixelBufferGetWidth(v51);
    int v58 = CVPixelBufferGetHeight(v51);
    CFTypeRef v109 = 0;
    CFDictionaryRef v110 = 0;
    CFIndex v59 = CFArrayGetCount(theArray);
    if (v59 >= 1)
    {
      CFIndex v60 = v59;
      CFIndex v61 = 0;
      int v84 = v58;
      while (1)
      {
        int valuePtr = 0;
        uint64_t v62 = (__CVPixelBufferPool *)CFArrayGetValueAtIndex(theArray, v61);
        time.unsigned int value = (CMTimeValue)v62;
        CFDictionaryRef PixelBufferAttributes = CVPixelBufferPoolGetPixelBufferAttributes(v62);
        int valuePtr = 0;
        CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(PixelBufferAttributes, key);
        if (Value)
        {
          CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
          if (valuePtr == v57)
          {
            int valuePtr = 0;
            CFNumberRef v65 = (const __CFNumber *)CFDictionaryGetValue(PixelBufferAttributes, v91);
            if (v65)
            {
              CFNumberGetValue(v65, kCFNumberIntType, &valuePtr);
              if (valuePtr == v58)
              {
                int valuePtr = 0;
                CFNumberRef v66 = (const __CFNumber *)CFDictionaryGetValue(PixelBufferAttributes, v87);
                if (v66)
                {
                  CFNumberRef v67 = v66;
                  size_t v68 = v57;
                  CFTypeID v69 = CFGetTypeID(v66);
                  BOOL v15 = v69 == CFNumberGetTypeID();
                  size_t v57 = v68;
                  int v58 = v84;
                  if (v15)
                  {
                    CFNumberGetValue(v67, kCFNumberIntType, &valuePtr);
                    if (valuePtr == 1111970369) {
                      break;
                    }
                  }
                }
              }
            }
          }
        }
        time.unsigned int value = 0;
        if (v60 == ++v61) {
          goto LABEL_73;
        }
      }
      if (v62)
      {
        CVPixelBufferPoolRetain(v62);
        unint64_t v11 = 0x1E4F38000;
        uint64_t v74 = UpTimeNanoseconds;
        CFAllocatorRef v73 = allocator;
LABEL_79:
        uint64_t v13 = CVPixelBufferPoolCreatePixelBuffer(v73, v62, &v106);
        a3 = v90;
        if (!v13)
        {
          if (v106) {
            uint64_t v13 = VTPixelTransferSessionTransferImage(session, v51, v106);
          }
          else {
            uint64_t v13 = 0;
          }
        }
        goto LABEL_83;
      }
    }
LABEL_73:
    uint64_t v70 = VTCreatePixelBufferPoolAttributesWithName();
    if (v70)
    {
      uint64_t v13 = v70;
      unint64_t v11 = 0x1E4F38000;
      a3 = v90;
      uint64_t v74 = UpTimeNanoseconds;
    }
    else
    {
      long long v71 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (v71)
      {
        CFAllocatorRef v72 = v71;
        fcar_addNumberToDictionary(v71, v87, 1111970369);
        fcar_addNumberToDictionary(v72, key, v57);
        fcar_addNumberToDictionary(v72, v91, v58);
        uint64_t v13 = fcar_ensureBufferAttributesCompatibleWithHWProcessing(v72);
        CFRelease(v72);
      }
      else
      {
        uint64_t v13 = FigSignalErrorAt();
      }
      unint64_t v11 = 0x1E4F38000;
      a3 = v90;
      uint64_t v74 = UpTimeNanoseconds;
      CFAllocatorRef v73 = allocator;
      if (!v13)
      {
        uint64_t v13 = CVPixelBufferPoolCreate(allocator, 0, v110, (CVPixelBufferPoolRef *)&time);
        if (!v13)
        {
          CFArrayAppendValue(theArray, (const void *)time.value);
          uint64_t v62 = (__CVPixelBufferPool *)time.value;
          goto LABEL_79;
        }
      }
    }
LABEL_83:
    CVPixelBufferPoolRelease((CVPixelBufferPoolRef)time.value);
    if (v110) {
      CFRelease(v110);
    }
    if (v109) {
      CFRelease(v109);
    }
    if (v13)
    {
      CVPixelBufferRelease(v106);
      CVPixelBufferRef v106 = 0;
    }
    uint64_t v75 = FigGetUpTimeNanoseconds();
    uint64_t v76 = (v75 - v74) / 1000;
    ++*(_DWORD *)(a1 + 160);
    *(void *)(a1 + 152) += v76;
    uint64_t v77 = *(void *)(a1 + 144);
    if (v77 >= v76) {
      uint64_t v77 = (v75 - v74) / 1000;
    }
    if (*(void *)(a1 + 136) > v76) {
      uint64_t v76 = *(void *)(a1 + 136);
    }
    *(void *)(a1 + 136) = v76;
    *(void *)(a1 + 144) = v77;
    if (v13) {
      goto LABEL_120;
    }
    float v51 = v106;
LABEL_95:
    CFIndex v78 = v88;
    if (v49 != v89) {
      CFIndex v78 = v49;
    }
    if (v49 <= v78) {
      break;
    }
LABEL_108:
    CVPixelBufferRelease(v51);
    unint64_t v11 = 0x1E4F38000;
    a3 = v90;
LABEL_109:
    if (++v49 == v96)
    {
      uint64_t v13 = 0;
LABEL_120:
      float v51 = 0;
      goto LABEL_121;
    }
  }
  CFIndex v79 = v78 + 1;
  CFIndex v80 = v49;
  while (1)
  {
    CFArrayGetValueAtIndex(v103, v80);
    CAImageQueueSetSize();
    unsigned int v81 = CVPixelBufferGetIOSurface(v51);
    if (!v81) {
      break;
    }
    uint64_t ID = IOSurfaceGetID(v81);
LABEL_105:
    CVPixelBufferRetain(v51);
    if ((CAImageQueueInsertImage() & 1) == 0) {
      CVPixelBufferRelease(v51);
    }
    if (v79 == ++v80) {
      goto LABEL_108;
    }
  }
  if (v99 != 1111970369 && v99 != 32) {
    goto LABEL_119;
  }
  CVPixelBufferLockBaseAddress(v51, 0);
  CVPixelBufferGetBaseAddress(v51);
  CVPixelBufferGetBytesPerRow(v51);
  uint64_t ID = CAImageQueueRegisterBuffer();
  if (ID)
  {
    CFNumberRef v82 = CFNumberCreate(allocator, kCFNumberSInt64Type, &ID);
    CFArrayAppendValue(Mutable, v82);
    CFRelease(v82);
    goto LABEL_105;
  }
  CVPixelBufferUnlockBaseAddress(v51, 0);
LABEL_119:
  uint64_t v13 = 4294954975;
  unint64_t v11 = 0x1E4F38000;
  a3 = v90;
LABEL_121:
  CVPixelBufferRelease(v51);
  [MEMORY[0x1E4F39CF8] commit];
  [MEMORY[0x1E4F39CF8] flush];
  [MEMORY[0x1E4F39CF8] synchronize];
  uint64_t v10 = v86;
  if (v13) {
    goto LABEL_13;
  }
LABEL_22:
  CFArrayRef v23 = a3;
  [*(id *)(v11 + 3416) setCurrentContext:*(void *)(a1 + 104)];
  long long v24 = CVPixelBufferGetIOSurface(pixelBufferOut);
  if (v24
    && (long long v25 = v24,
        OSType PixelFormat = IOSurfaceGetPixelFormat(v24),
        size_t WidthOfPlane = IOSurfaceGetWidthOfPlane(v25, 0),
        size_t HeightOfPlane = IOSurfaceGetHeightOfPlane(v25, 0),
        PixelFormat == 1111970369))
  {
    size_t v29 = HeightOfPlane;
    glBindTexture(0xDE1u, *(_DWORD *)(a1 + 112));
    BYTE4(v83) = 0;
    LODWORD(v83) = 0;
    if (objc_msgSend(*(id *)(a1 + 104), "texImageIOSurface:target:internalFormat:width:height:format:type:plane:invert:", v25, 3553, 6408, WidthOfPlane, v29, 32993, 33639, v83))
    {
      GLuint v30 = *(_DWORD *)(a1 + 112);
      glTexParameteri(0xDE1u, 0x2801u, 9728);
      glTexParameteri(0xDE1u, 0x2800u, 9728);
      glTexParameteri(0xDE1u, 0x2802u, 33071);
      glTexParameteri(0xDE1u, 0x2803u, 33071);
      goto LABEL_27;
    }
    uint64_t v13 = 4294954973;
LABEL_13:
    long long v14 = pixelBufferOut;
    if (pixelBufferOut)
    {
LABEL_14:
      CVPixelBufferRelease(v14);
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v31 = FigSignalErrorAt();
    GLuint v30 = 0;
    if (v31)
    {
      uint64_t v13 = v31;
      goto LABEL_13;
    }
LABEL_27:
    glFramebufferTexture2D(0x8D40u, 0x8CE0u, 0xDE1u, v30, 0);
    uint64_t v32 = FigGetUpTimeNanoseconds();
    glClearColor(0.0, 0.0, 0.0, 0.0);
    glClear(0x4000u);
    uint64_t v33 = *(void **)(a1 + 96);
    CMTime time = *v102;
    [v33 beginFrameAtTime:0 timeStamp:CMTimeGetSeconds(&time)];
    objc_msgSend(*(id *)(a1 + 96), "addUpdateRect:", 0.0, 0.0, (double)v93, (double)v92);
    [*(id *)(a1 + 96) render];
    glFlush();
    glFinish();
    uint64_t v34 = FigGetUpTimeNanoseconds();
    uint64_t v35 = (v34 - v32) / 1000;
    ++*(_DWORD *)(a1 + 192);
    *(void *)(a1 + 184) += v35;
    uint64_t v36 = *(void *)(a1 + 176);
    if (v36 >= v35) {
      uint64_t v36 = (v34 - v32) / 1000;
    }
    if (*(void *)(a1 + 168) > v35) {
      uint64_t v35 = *(void *)(a1 + 168);
    }
    *(void *)(a1 + 168) = v35;
    *(void *)(a1 + 176) = v36;
    if (v94)
    {
      [*(id *)(a1 + 96) nextFrameTime];
      CMTimeMakeWithSeconds(&time, v37, 1000);
      *int v94 = time;
    }
    [*(id *)(a1 + 96) endFrame];
    if (v23)
    {
      [MEMORY[0x1E4F39CF8] begin];
      if (!pthread_main_np()) {
        [MEMORY[0x1E4F39CF8] activateBackground:1];
      }
      [MEMORY[0x1E4F39CF8] setValue:*MEMORY[0x1E4F1CFD0] forKey:*MEMORY[0x1E4F3A5A8]];
      CFArrayRef v38 = *(const __CFArray **)(a1 + 56);
      if (v38)
      {
        CFIndex v39 = CFArrayGetCount(v38);
        if (v39 >= 1)
        {
          CFIndex v40 = v39;
          for (CFIndex i = 0; i != v40; ++i)
          {
            uint64_t v42 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 56), i);
            CAImageQueueFlush();
            CAImageQueueCollect();
            if (Mutable)
            {
              if (i < CFArrayGetCount(Mutable))
              {
                CFNumberRef v43 = (const __CFNumber *)CFArrayGetValueAtIndex(Mutable, i);
                if (v43)
                {
                  time.unsigned int value = 0;
                  CFNumberGetValue(v43, kCFNumberSInt64Type, &time);
                  if (time.value) {
                    MEMORY[0x199707240](v42);
                  }
                }
              }
            }
          }
        }
      }
      [MEMORY[0x1E4F39CF8] commit];
      [MEMORY[0x1E4F39CF8] synchronize];
    }
    uint64_t v13 = 0;
    *double v95 = pixelBufferOut;
LABEL_15:
    CVPixelBufferRef pixelBufferOut = 0;
  }
LABEL_16:
  if (Mutable) {
    CFRelease(Mutable);
  }
  [*(id *)(v11 + 3416) setCurrentContext:0];
  CFArrayRef v21 = *(const __CFArray **)(a1 + 128);
  if (v21)
  {
    v111.length = CFArrayGetCount(*(CFArrayRef *)(a1 + 128));
    v111.locatiouint64_t n = 0;
    CFArrayApplyFunction(v21, v111, (CFArrayApplierFunction)fcar_flushConversionPool, 0);
  }
  CVPixelBufferPoolFlush(*(CVPixelBufferPoolRef *)(a1 + 64), 0);
  return v13;
}