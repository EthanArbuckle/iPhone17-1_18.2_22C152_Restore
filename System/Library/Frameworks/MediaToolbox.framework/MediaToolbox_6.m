unsigned __int8 *itemoverlap_subItemNotificationWeakCallback(uint64_t a1, const void *a2, const void *a3)
{
  unsigned __int8 *result;
  unsigned __int8 v6;
  unsigned __int8 *v7;
  NSObject *v8;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  void *v10;
  char v11;
  int v12;
  uint64_t DerivedStorage;
  uint64_t v14;

  result = (unsigned __int8 *)CMBaseObjectGetDerivedStorage();
  v6 = atomic_load(result);
  if (v6)
  {
    if (dword_1E9350F60)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      return (unsigned __int8 *)fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  else
  {
    v7 = result;
    if (dword_1E9350F60)
    {
      v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v10 = (void *)*((void *)v7 + 1);
    if (playeroverlap_indexForItem() != -1 && (FigCFEqual() || FigCFEqual()))
    {
      *((_DWORD *)v7 + 22) = 3;
      v11 = 1;
    }
    else
    {
      v11 = 0;
    }
    v12 = FigCFEqual();
    if ((v11 & 1) != 0 || v12)
    {
      if (playeroverlap_isActionAtEnd()
        || playeroverlap_isActionAtEnd() && !playeroverlap_isLastItem((uint64_t)v10, a2))
      {
        DerivedStorage = CMBaseObjectGetDerivedStorage();
        if (FigPlaybackTimerIsScheduled(*(void *)(DerivedStorage + 64))
          && playeroverlap_itemAtIndex((uint64_t)v10, 0) == a2)
        {
          playeroverlap_advanceTimeReached(v10);
        }
        playeroverlap_removeFinishedItem(v10, a2);
      }
      else if (!*((_DWORD *)v7 + 22))
      {
        *((_DWORD *)v7 + 22) = *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 104);
      }
    }
    if (FigCFEqual() && *((_DWORD *)v7 + 22)) {
      playeroverlap_removeFinishedItem(v10, a2);
    }
    if (FigCFEqual())
    {
      if (playeroverlap_itemAtIndex((uint64_t)v10, 0) == a2)
      {
        v14 = CMBaseObjectGetDerivedStorage();
        if (FigPlaybackTimerIsScheduled(*(void *)(v14 + 64))) {
          playeroverlap_rescheduleAdvanceTimerAndAnchorTime((uint64_t)v10);
        }
      }
    }
    result = (unsigned __int8 *)itemoverlap_findAndDiscardFromBlockNextNotifications((uint64_t)a2, a3);
    if (!result) {
      return (unsigned __int8 *)playeroverlap_dispatchAsyncPostNotification(0);
    }
  }
  return result;
}

uint64_t playeroverlap_copyPerformanceHistoryArray(uint64_t a1, const __CFAllocator *a2, CFArrayRef *a3)
{
  unsigned __int8 v5 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if ((v5 & 1) == 0)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    CFTypeRef v19 = 0;
    CFTypeRef cf = 0;
    CFArrayRef Mutable = CFArrayCreateMutable(a2, 0, MEMORY[0x1E4F1D510]);
    uint64_t FigBaseObject = FigPlayerGetFigBaseObject(*(void *)(DerivedStorage + 8));
    uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v9) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
    v12 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v10 + 48);
    if (v12)
    {
      uint64_t v13 = v12(FigBaseObject, @"PerformanceHistoryArray", a2, &cf);
      if (v13)
      {
        uint64_t v18 = v13;
        goto LABEL_17;
      }
      uint64_t v14 = FigPlayerGetFigBaseObject(*(void *)(DerivedStorage + 16));
      uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v15) {
        uint64_t v16 = v15;
      }
      else {
        uint64_t v16 = 0;
      }
      v17 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v16 + 48);
      if (v17)
      {
        uint64_t v18 = v17(v14, @"PerformanceHistoryArray", a2, &v19);
        if (!v18)
        {
          FigCFArrayAppendArray();
          FigCFArrayAppendArray();
          *a3 = CFArrayCreateCopy(a2, Mutable);
        }
        goto LABEL_17;
      }
    }
    uint64_t v18 = 4294954514;
LABEL_17:
    if (cf) {
      CFRelease(cf);
    }
    if (v19) {
      CFRelease(v19);
    }
    if (Mutable) {
      CFRelease(Mutable);
    }
    return v18;
  }

  return FigSignalErrorAt();
}

uint64_t playeroverlap_copyPropertyFromActiveSubPlayer_fun(uint64_t a1)
{
  uint64_t result = playeroverlap_copyPropertyFromActiveSubPlayerInPlayerQueue(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24));
  *(_DWORD *)(a1 + 32) = result;
  return result;
}

uint64_t playeroverlap_copyPropertyFromActiveSubPlayerInPlayerQueue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 v7 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if (v7)
  {
    return FigSignalErrorAt();
  }
  else
  {
    if (dword_1E9350F60)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    uint64_t FigBaseObject = FigPlayerGetFigBaseObject(*(void *)(DerivedStorage + 8 * *(int *)(DerivedStorage + 4) + 8));
    uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v12) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 48);
    if (v14) {
      return v14(FigBaseObject, a3, a2, a4);
    }
    else {
      return 4294954514;
    }
  }
}

uint64_t playeroverlap_handleSetProperty(uint64_t a1, uint64_t a2, __CFString *a3, uint64_t a4, unsigned char *a5)
{
  *a5 = 1;
  if (FigCFEqual())
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    unsigned __int8 v9 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
    if ((v9 & 1) == 0)
    {
      uint64_t v19 = a4;
      uint64_t v20 = 0;
      uint64_t v18 = a1;
      dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 48), &v18, (dispatch_function_t)playeroverlap_setActionAtEnd_fun);
      return v20;
    }
LABEL_13:
    return FigSignalErrorAt();
  }
  if (FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual())
  {
    uint64_t v11 = CMBaseObjectGetDerivedStorage();
    unsigned __int8 v12 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
    if ((v12 & 1) == 0)
    {
      uint64_t v18 = a1;
      uint64_t v19 = (uint64_t)a3;
      uint64_t v20 = a4;
      uint64_t v21 = 0;
      dispatch_sync_f(*(dispatch_queue_t *)(v11 + 48), &v18, (dispatch_function_t)playeroverlap_setPropertyToActiveSubPlayer_fun);
      return v21;
    }
    goto LABEL_13;
  }
  int v13 = CFEqual(a3, @"FigAudioSession");
  if (v13)
  {
    BOOL v14 = 0;
  }
  else
  {
    int v15 = CFEqual(a3, @"FigAudioSession2");
    BOOL v14 = v15 != 0;
    if (v15) {
      a3 = @"FigAudioSession";
    }
  }
  uint64_t v16 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  uint64_t v17 = *(void *)(CMBaseObjectGetDerivedStorage() + 16);
  if (v14)
  {
    if (v13) {
      return 0;
    }
  }
  else
  {
    uint64_t result = FigPlayerSetProperty(v16, (uint64_t)a3, a4);
    if (v13 || result) {
      return result;
    }
  }

  return FigPlayerSetProperty(v17, (uint64_t)a3, a4);
}

void playeroverlap_setActionAtEnd_fun(uint64_t a1)
{
  cf[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  v2 = *(void **)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  unsigned __int8 v4 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if (v4)
  {
    int v6 = FigSignalErrorAt();
    goto LABEL_27;
  }
  if (dword_1E9350F60)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  cf[0] = 0;
  int active = playeroverlap_copyPropertyFromActiveSubPlayerInPlayerQueue((uint64_t)v2, *MEMORY[0x1E4F1CF80], @"ActionAtEnd", (uint64_t)cf);
  if (active) {
    goto LABEL_30;
  }
  if (FigCFEqual()) {
    goto LABEL_31;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t FigBaseObject = FigPlayerGetFigBaseObject(*(void *)(DerivedStorage + 8 * *(int *)(DerivedStorage + 4) + 8));
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  unsigned __int8 v12 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v11 + 56);
  if (!v12) {
    goto LABEL_24;
  }
  int active = v12(FigBaseObject, @"ActionAtEnd", v3);
  if (active) {
    goto LABEL_30;
  }
  uint64_t v13 = CMBaseObjectGetDerivedStorage();
  int v14 = *(_DWORD *)(v13 + 4);
  BOOL v15 = __OFADD__(v14++, 1);
  char v16 = (v14 < 0) ^ v15;
  int v17 = v14 & 1;
  if (v16) {
    int v17 = -v17;
  }
  uint64_t v18 = FigPlayerGetFigBaseObject(*(void *)(v13 + 8 * v17 + 8));
  uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 8);
  uint64_t v20 = v19 ? v19 : 0;
  uint64_t v21 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v20 + 56);
  if (!v21)
  {
LABEL_24:
    int v6 = -12782;
    goto LABEL_25;
  }
  int active = v21(v18, @"ActionAtEnd", v3);
  if (active) {
    goto LABEL_30;
  }
  if (!FigCFEqual())
  {
    if (!*(void *)(CMBaseObjectGetDerivedStorage() + 56)) {
      goto LABEL_31;
    }
    int active = playeroverlap_removeOutroItem(v2, 1);
LABEL_30:
    int v6 = active;
    goto LABEL_25;
  }
  v22 = playeroverlap_itemAtIndex((uint64_t)v2, 0);
  if (v22)
  {
    v23 = v22;
    if (*(_DWORD *)(CMBaseObjectGetDerivedStorage() + 88)) {
      playeroverlap_removeFinishedItem(v2, v23);
    }
    int active = playeroverlap_maybeScheduleAdvanceTimerAndAnchorTime(v2);
    goto LABEL_30;
  }
LABEL_31:
  int v6 = 0;
LABEL_25:
  if (cf[0]) {
    CFRelease(cf[0]);
  }
LABEL_27:
  *(_DWORD *)(a1 + 16) = v6;
}

uint64_t playeroverlap_setPropertyToActiveSubPlayer_fun(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  unsigned __int8 v4 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if (v4)
  {
    FigSignalErrorAt();
    uint64_t result = 0;
  }
  else
  {
    if (dword_1E9350F60)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    uint64_t FigBaseObject = FigPlayerGetFigBaseObject(*(void *)(DerivedStorage + 8 * *(int *)(DerivedStorage + 4) + 8));
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 56);
    if (v10) {
      uint64_t result = v10(FigBaseObject, v2, v3);
    }
    else {
      uint64_t result = 4294954514;
    }
  }
  *(_DWORD *)(a1 + 24) = result;
  return result;
}

uint64_t playeroverlap_AddToPlayQueue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  unsigned __int8 v7 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if (v7)
  {
    return FigSignalErrorAt();
  }
  else
  {
    v9[0] = a1;
    v9[1] = a2;
    v9[2] = a3;
    uint64_t v10 = 0;
    dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 48), v9, (dispatch_function_t)playeroverlap_AddToPlayQueue_fun);
    return v10;
  }
}

uint64_t playeroverlap_RemoveFromPlayQueue(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  unsigned __int8 v5 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if (v5)
  {
    return FigSignalErrorAt();
  }
  else
  {
    context[1] = a2;
    uint64_t v8 = 0;
    context[0] = a1;
    dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 48), context, (dispatch_function_t)playeroverlap_RemoveFromPlayQueue_fun);
    return v8;
  }
}

uint64_t playeroverlap_CopyPlayQueueItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  unsigned __int8 v7 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if (v7)
  {
    return FigSignalErrorAt();
  }
  else
  {
    v9[0] = a1;
    v9[1] = a2;
    v9[2] = a3;
    uint64_t v10 = 0;
    dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 48), v9, (dispatch_function_t)playeroverlap_CopyPlayQueueItem_fun);
    return v10;
  }
}

uint64_t playeroverlap_SetRate(uint64_t a1, float a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  unsigned __int8 v5 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if (v5)
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v7 = a1;
    float v8 = a2;
    unsigned int v9 = 0;
    dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 48), &v7, (dispatch_function_t)playeroverlap_SetRate_fun);
    return v9;
  }
}

uint64_t playeroverlap_GetRate(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  unsigned __int8 v5 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if (v5)
  {
    return FigSignalErrorAt();
  }
  else
  {
    context[1] = a2;
    uint64_t v8 = 0;
    context[0] = a1;
    dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 48), context, (dispatch_function_t)playeroverlap_GetRate_fun);
    return v8;
  }
}

uint64_t playeroverlap_SetRateWithFade(uint64_t a1, long long *a2, float a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  unsigned __int8 v7 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if (v7)
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t context = a1;
    float v10 = a3;
    long long v11 = *a2;
    uint64_t v12 = *((void *)a2 + 2);
    unsigned int v13 = 0;
    dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 48), &context, (dispatch_function_t)playeroverlap_SetRateWithFade_fun);
    return v13;
  }
}

uint64_t playeroverlap_StartPreroll(uint64_t a1, int a2, float a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  unsigned __int8 v7 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if (v7)
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t context = a1;
    float v10 = a3;
    int v11 = a2;
    dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 48), &context, (dispatch_function_t)playeroverlap_StartPreroll_fun);
    return v12;
  }
}

uint64_t playeroverlap_StepByCount(uint64_t a1, int a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  unsigned __int8 v5 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if (v5)
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v7 = a1;
    int v8 = a2;
    unsigned int v9 = 0;
    dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 48), &v7, (dispatch_function_t)playeroverlap_StepByCount_fun);
    return v9;
  }
}

uint64_t playeroverlap_SetRateAndAnchorTime(uint64_t a1, long long *a2, long long *a3, int a4, float a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  unsigned __int8 v11 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if (v11)
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v20 = 0;
    uint64_t context = a1;
    float v14 = a5;
    long long v15 = *a2;
    uint64_t v16 = *((void *)a2 + 2);
    long long v17 = *a3;
    uint64_t v18 = *((void *)a3 + 2);
    int v19 = a4;
    dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 48), &context, (dispatch_function_t)playeroverlap_SetRateAndAnchorTime_fun);
    return v20;
  }
}

uint64_t playeroverlap_CreatePlaybackItemFromAsset(const void *a1, uint64_t a2, uint64_t a3, const __CFDictionary *a4, CFTypeRef *a5)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  unsigned __int8 v10 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if ((v10 & 1) == 0)
  {
    CFTypeRef cf = 0;
    if (a5)
    {
      if (a2)
      {
        CFGetAllocator(a1);
        FigPlaybackItemGetClassID();
        uint64_t v11 = CMDerivedObjectCreate();
        if (FigSignalErrorAt()) {
          goto LABEL_22;
        }
        uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
        *(unsigned char *)(DerivedStorage + 128) = 0;
        value = 0;
        if (a4 && CFDictionaryGetValueIfPresent(a4, @"LoggingIdentifier", (const void **)&value)) {
          CFStringGetCString((CFStringRef)value, (char *)(DerivedStorage + 128), 20, 0x600u);
        }
        *(unsigned char *)uint64_t DerivedStorage = 0;
        *(_DWORD *)(DerivedStorage + 72) = -1;
        *(void *)(DerivedStorage + 8) = a1;
        *(void *)(DerivedStorage + 80) = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D548]);
        uint64_t v13 = MEMORY[0x1E4F1F9F8];
        long long v14 = *MEMORY[0x1E4F1F9F8];
        *(_OWORD *)(DerivedStorage + 24) = *MEMORY[0x1E4F1F9F8];
        uint64_t v15 = *(void *)(v13 + 16);
        *(void *)(DerivedStorage + 40) = v15;
        *(_OWORD *)(DerivedStorage + 48) = v14;
        *(void *)(DerivedStorage + 64) = v15;
        uint64_t v16 = CMBaseObjectGetDerivedStorage();
        uint64_t v17 = *(void *)(v16 + 8 * *(int *)(v16 + 4) + 8);
        uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v18) {
          uint64_t v19 = v18;
        }
        else {
          uint64_t v19 = 0;
        }
        v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, const __CFDictionary *, uint64_t))(v19 + 96);
        if (!v22)
        {
          uint64_t v11 = 4294954514;
          goto LABEL_22;
        }
        uint64_t v21 = v22(v17, a2, a3, a4, DerivedStorage + 16);
        if (!v21)
        {
          CMNotificationCenterGetDefaultLocalCenter();
          uint64_t v23 = FigNotificationCenterAddWeakListener();
          if (!v23)
          {
            MEMORY[0x19970E910](*(void *)(v16 + 96));
            CFSetAddValue(*(CFMutableSetRef *)(v16 + 88), cf);
            MEMORY[0x19970E930](*(void *)(v16 + 96));
            if (dword_1E9350F60)
            {
              os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            uint64_t v11 = 0;
            *a5 = cf;
            return v11;
          }
          uint64_t v11 = v23;
          v25 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_22:
          if (cf)
          {
            CFRelease(cf);
            *a5 = 0;
          }
          return v11;
        }
      }
      else
      {
        uint64_t v21 = FigSignalErrorAt();
      }
      uint64_t v11 = v21;
      goto LABEL_22;
    }
  }

  return FigSignalErrorAt();
}

uint64_t playeroverlap_SetRateWithOptions(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  unsigned __int8 v7 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if (v7)
  {
    return FigSignalErrorAt();
  }
  else
  {
    v9[0] = a1;
    v9[1] = LODWORD(a3);
    v9[2] = a2;
    uint64_t v10 = 0;
    dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 48), v9, (dispatch_function_t)playeroverlap_SetRateWithOptions_fun);
    return v10;
  }
}

uint64_t playeroverlap_SetProperties(uint64_t a1, const __CFDictionary *a2, void *a3)
{
  unsigned __int8 v6 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if (v6)
  {
    return FigSignalErrorAt();
  }
  else
  {
    return FPSupport_HandlePlayerSetPropertiesAndCopyModification(a1, a2, 0, (uint64_t)playeroverlap_handleSetProperty, 0, 0, a3);
  }
}

uint64_t playeroverlap_ReevaluateRouteConfiguration(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if (v3)
  {
    return FigSignalErrorAt();
  }
  else
  {
    if (dword_1E9350F60)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    uint64_t v7 = *(void *)(DerivedStorage + 8);
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 120);
    if (!v10) {
      return 4294954514;
    }
    uint64_t result = v10(v7, a2);
    if (result) {
      return result;
    }
    uint64_t v11 = *(void *)(DerivedStorage + 16);
    uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v13 = v12 ? v12 : 0;
    long long v14 = *(uint64_t (**)(uint64_t, uint64_t))(v13 + 120);
    if (v14) {
      return v14(v11, a2);
    }
    else {
      return 4294954514;
    }
  }
}

uint64_t playeroverlap_AddExternalStartupTask(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  unsigned __int8 v5 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if (v5)
  {
    return FigSignalErrorAt();
  }
  else
  {
    context[1] = a2;
    uint64_t v8 = 0;
    context[0] = a1;
    dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 48), context, (dispatch_function_t)playeroverlap_AddExternalStartupTask_fun);
    return v8;
  }
}

uint64_t playeroverlap_RemoveExternalStartupTask(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  unsigned __int8 v5 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if (v5)
  {
    return FigSignalErrorAt();
  }
  else
  {
    context[1] = a2;
    uint64_t v8 = 0;
    context[0] = a1;
    dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 48), context, (dispatch_function_t)playeroverlap_RemoveExternalStartupTask_fun);
    return v8;
  }
}

uint64_t playeroverlap_CopyDisplayedCVPixelBuffer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  unsigned __int8 v7 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if (v7)
  {
    return FigSignalErrorAt();
  }
  else
  {
    v9[0] = a1;
    v9[1] = a2;
    v9[2] = a3;
    uint64_t v10 = 0;
    dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 48), v9, (dispatch_function_t)playeroverlap_CopyDisplayedCVPixelBuffer_fun);
    return v10;
  }
}

uint64_t playeroverlap_AddToPlayQueue_fun(uint64_t a1)
{
  uint64_t result = playeroverlap_AddToPlayQueueInPlayerQueue(*(const void **)a1, *(const void **)(a1 + 8), *(const void **)(a1 + 16));
  *(_DWORD *)(a1 + 24) = result;
  return result;
}

uint64_t playeroverlap_RemoveFromPlayQueue_fun(uint64_t a1)
{
  uint64_t v2 = *(const void **)a1;
  unsigned __int8 v3 = *(const void **)(a1 + 8);
  unsigned __int8 v4 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if (v4)
  {
LABEL_4:
    uint64_t result = FigSignalErrorAt();
    goto LABEL_29;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1E9350F60)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (v3)
  {
    if (*(const void **)(DerivedStorage + 56) != v3)
    {
      uint64_t result = playeroverlap_removeItemAndRefreshPlayQueue(v2, v3, 1);
      goto LABEL_29;
    }
    playeroverlap_assertInOutro();
    uint64_t v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_4;
  }
  if (!*(void *)(CMBaseObjectGetDerivedStorage() + 56)
    || (playeroverlap_assertInOutro(), uint64_t result = playeroverlap_removeOutroItem(v2, 1), !result))
  {
    CFArrayRemoveAllValues(*(CFMutableArrayRef *)(DerivedStorage + 40));
    uint64_t v8 = CMBaseObjectGetDerivedStorage();
    uint64_t v9 = *(void *)(v8 + 8 * *(int *)(v8 + 4) + 8);
    uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v10) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    uint64_t v13 = *(uint64_t (**)(uint64_t, void))(v11 + 24);
    if (v13)
    {
      uint64_t result = v13(v9, 0);
      if (result) {
        goto LABEL_29;
      }
      CMBaseObjectGetDerivedStorage();
      FigCFArrayApplyFunction();
      uint64_t v14 = CMBaseObjectGetDerivedStorage();
      CFArrayRemoveAllValues(*(CFMutableArrayRef *)(v14 + 8 * *(int *)(v14 + 4) + 24));
      if (playeroverlap_playQueueCount() < 1)
      {
LABEL_27:
        uint64_t result = 0;
        goto LABEL_29;
      }
      uint64_t v15 = CMBaseObjectGetDerivedStorage();
      int v16 = *(_DWORD *)(v15 + 4);
      BOOL v17 = __OFADD__(v16++, 1);
      char v18 = (v16 < 0) ^ v17;
      int v19 = v16 & 1;
      if (v18) {
        int v19 = -v19;
      }
      uint64_t v20 = *(void *)(v15 + 8 * v19 + 8);
      uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v21) {
        uint64_t v22 = v21;
      }
      else {
        uint64_t v22 = 0;
      }
      uint64_t v23 = *(uint64_t (**)(uint64_t, void))(v22 + 24);
      if (v23)
      {
        uint64_t result = v23(v20, 0);
        if (result) {
          goto LABEL_29;
        }
        CMBaseObjectGetDerivedStorage();
        FigCFArrayApplyFunction();
        uint64_t v24 = CMBaseObjectGetDerivedStorage();
        int v25 = *(_DWORD *)(v24 + 4);
        BOOL v17 = __OFADD__(v25++, 1);
        char v18 = (v25 < 0) ^ v17;
        int v26 = v25 & 1;
        if (v18) {
          int v26 = -v26;
        }
        CFArrayRemoveAllValues(*(CFMutableArrayRef *)(v24 + 8 * v26 + 24));
        goto LABEL_27;
      }
    }
    uint64_t result = 4294954514;
  }
LABEL_29:
  *(_DWORD *)(a1 + 16) = result;
  return result;
}

const void *playeroverlap_CopyPlayQueueItem_fun(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  unsigned __int8 v4 = *(const void ***)(a1 + 16);
  unsigned __int8 v5 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if ((v5 & 1) != 0 || !v4)
  {
    uint64_t result = (const void *)FigSignalErrorAt();
    int v10 = (int)result;
  }
  else
  {
    *unsigned __int8 v4 = 0;
    if (v3)
    {
      uint64_t v6 = playeroverlap_indexForItem();
      if (v6 == -1)
      {
        int v10 = FigSignalErrorAt();
        uint64_t result = *v4;
        if (!*v4) {
          goto LABEL_10;
        }
        goto LABEL_9;
      }
      CFIndex v7 = v6 + 1;
      uint64_t v8 = v2;
    }
    else
    {
      uint64_t v8 = v2;
      CFIndex v7 = 0;
    }
    uint64_t result = playeroverlap_itemAtIndex(v8, v7);
    int v10 = 0;
    *unsigned __int8 v4 = result;
    if (result) {
LABEL_9:
    }
      uint64_t result = CFRetain(result);
  }
LABEL_10:
  *(_DWORD *)(a1 + 24) = v10;
  return result;
}

uint64_t playeroverlap_SetRate_fun(uint64_t a1)
{
  uint64_t result = playeroverlap_SetRateInPlayerQueue(*(void *)a1, *(float *)(a1 + 8));
  *(_DWORD *)(a1 + 12) = result;
  return result;
}

uint64_t playeroverlap_GetRate_fun(uint64_t a1)
{
  uint64_t result = playeroverlap_GetRateInPlayerQueue(*(void *)a1, *(void *)(a1 + 8));
  *(_DWORD *)(a1 + 16) = result;
  return result;
}

uint64_t playeroverlap_SetRateWithFade_fun(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)a1;
  float v3 = *(float *)(a1 + 8);
  *(_OWORD *)&v7.value = *(_OWORD *)(a1 + 12);
  v7.epoch = *(void *)(a1 + 28);
  unsigned __int8 v4 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if (v4)
  {
    uint64_t result = FigSignalErrorAt();
  }
  else
  {
    if (dword_1E9350F60)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CMTime time = v7;
    long long v9 = 0uLL;
    p_CMTime time = &time;
    uint64_t result = playeroverlap_SetRateCommon(v2, (long long **)&p_time, v3);
  }
  *(_DWORD *)(a1 + 36) = result;
  return result;
}

uint64_t playeroverlap_StartPreroll_fun(float *a1)
{
  float v2 = a1[2];
  uint64_t v3 = *((unsigned int *)a1 + 3);
  unsigned __int8 v4 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if (v4)
  {
    uint64_t result = FigSignalErrorAt();
  }
  else
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    uint64_t v6 = *(void *)(DerivedStorage + 8 * *(int *)(DerivedStorage + 4) + 8);
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    int v10 = *(uint64_t (**)(uint64_t, uint64_t, float))(v8 + 64);
    if (v10) {
      uint64_t result = v10(v6, v3, v2);
    }
    else {
      uint64_t result = 4294954514;
    }
  }
  *((_DWORD *)a1 + 4) = result;
  return result;
}

uint64_t playeroverlap_StepByCount_fun(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if (v3)
  {
    uint64_t result = FigSignalErrorAt();
  }
  else
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    uint64_t v5 = *(void *)(DerivedStorage + 8 * *(int *)(DerivedStorage + 4) + 8);
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    long long v9 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 72);
    if (v9) {
      uint64_t result = v9(v5, v2);
    }
    else {
      uint64_t result = 4294954514;
    }
  }
  *(_DWORD *)(a1 + 12) = result;
  return result;
}

uint64_t playeroverlap_SetRateAndAnchorTime_fun(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)a1;
  float v3 = *(float *)(a1 + 8);
  int v4 = *(_DWORD *)(a1 + 60);
  *(_OWORD *)&v10.value = *(_OWORD *)(a1 + 12);
  v10.epoch = *(void *)(a1 + 28);
  long long v8 = *(_OWORD *)(a1 + 36);
  uint64_t v9 = *(void *)(a1 + 52);
  unsigned __int8 v5 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if (v5)
  {
    uint64_t result = FigSignalErrorAt();
  }
  else
  {
    if (dword_1E9350F60)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CMTime time = v10;
    long long v14 = v8;
    uint64_t v15 = v9;
    int v16 = v4;
    uint64_t v11 = 0;
    p_CMTime time = (unint64_t)&time;
    uint64_t result = playeroverlap_SetRateCommon(v2, &v11, v3);
  }
  *(_DWORD *)(a1 + 64) = result;
  return result;
}

uint64_t itemoverlap_Invalidate(const void *a1)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if (v2)
  {
    return FigSignalErrorAt();
  }
  else
  {
    if (dword_1E9350F60)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v5 = itemoverlap_invalidateDispatchSync((uint64_t)a1);
    CMBaseObjectGetDerivedStorage();
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 96));
    CFSetRemoveValue(*(CFMutableSetRef *)(DerivedStorage + 88), a1);
    MEMORY[0x19970E930](*(void *)(DerivedStorage + 96));
    return v5;
  }
}

void itemoverlap_Finalize(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1E9350F60)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  unsigned __int8 v4 = atomic_load((unsigned __int8 *)DerivedStorage);
  if ((v4 & 1) == 0) {
    itemoverlap_Invalidate(a1);
  }
  *(void *)(DerivedStorage + 8) = 0;
  uint64_t v5 = *(const void **)(DerivedStorage + 16);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(DerivedStorage + 16) = 0;
  }
  uint64_t v6 = *(const void **)(DerivedStorage + 80);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(DerivedStorage + 80) = 0;
  }
}

__CFString *itemoverlap_CopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage = (CMTime *)CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = CFGetAllocator(a1);
  CFArrayRef Mutable = CFStringCreateMutable(v3, 0);
  if (a1) {
    uint64_t v5 = (const char *)(CMBaseObjectGetDerivedStorage() + 128);
  }
  else {
    uint64_t v5 = "";
  }
  CMTimeEpoch epoch = DerivedStorage->epoch;
  CMTime time = DerivedStorage[1];
  Float64 Seconds = CMTimeGetSeconds(&time);
  CMTime time = DerivedStorage[2];
  Float64 v8 = CMTimeGetSeconds(&time);
  CFStringAppendFormat(Mutable, 0, @"<FigPlaybackItemOverlap %p %s sub-item %p advanceTime %1.3f overlappedPlaybackEndTime %1.3f>", a1, v5, epoch, *(void *)&Seconds, *(void *)&v8);
  return Mutable;
}

uint64_t itemoverlap_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 v8 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if (v8)
  {
LABEL_11:
    return FigSignalErrorAt();
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, @"AdvanceTimeForOverlappedPlayback"))
  {
    unsigned __int8 v10 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
    if ((v10 & 1) == 0)
    {
      CMBaseObjectGetDerivedStorage();
      uint64_t v11 = CMBaseObjectGetDerivedStorage();
      unsigned __int8 v12 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
      if ((v12 & 1) == 0)
      {
        uint64_t v23 = a1;
        uint64_t v24 = a3;
        uint64_t v25 = a4;
        uint64_t v26 = 0;
        uint64_t v13 = *(NSObject **)(v11 + 48);
        long long v14 = (void (__cdecl *)(void *))playeroverlap_copyAdvanceTimeForOverlappedPlayback_fun;
LABEL_10:
        dispatch_sync_f(v13, &v23, v14);
        return v26;
      }
    }
    goto LABEL_11;
  }
  if (CFEqual(a2, @"OverlappedPlaybackEndTime"))
  {
    unsigned __int8 v15 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
    if ((v15 & 1) == 0)
    {
      CMBaseObjectGetDerivedStorage();
      uint64_t v16 = CMBaseObjectGetDerivedStorage();
      unsigned __int8 v17 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
      if ((v17 & 1) == 0)
      {
        uint64_t v23 = a1;
        uint64_t v24 = a3;
        uint64_t v25 = a4;
        uint64_t v26 = 0;
        uint64_t v13 = *(NSObject **)(v16 + 48);
        long long v14 = (void (__cdecl *)(void *))playeroverlap_copyOverlappedPlaybackEndTime_fun;
        goto LABEL_10;
      }
    }
    goto LABEL_11;
  }
  uint64_t FigBaseObject = FigPlaybackItemGetFigBaseObject(*(void *)(DerivedStorage + 16));
  uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v20) {
    uint64_t v21 = v20;
  }
  else {
    uint64_t v21 = 0;
  }
  uint64_t v22 = *(uint64_t (**)(uint64_t, const void *, uint64_t, uint64_t))(v21 + 48);
  if (!v22) {
    return 4294954514;
  }

  return v22(FigBaseObject, a2, a3, a4);
}

uint64_t itemoverlap_SetProperty(uint64_t a1, const void *a2, uint64_t a3)
{
  unsigned __int8 v6 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if (v6)
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v7 = (const void *)FigCFCopyCompactDescription();
    if (dword_1E9350F60)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (v7) {
      CFRelease(v7);
    }
    return FPSupport_HandlePlayerSetPropertyAndCopyModification(a1, a2, a3, 0, (uint64_t)itemoverlap_handleSetProperty, 0, 0, 0);
  }
}

uint64_t playeroverlap_copyAdvanceTimeForOverlappedPlayback_fun(uint64_t a1)
{
  CFAllocatorRef v2 = *(const __CFAllocator **)(a1 + 8);
  CFAllocatorRef v3 = *(CFDictionaryRef **)(a1 + 16);
  unsigned __int8 v4 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if (v4)
  {
    uint64_t result = FigSignalErrorAt();
  }
  else
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if ((*(_DWORD *)(DerivedStorage + 36) & 0x1D) == 1)
    {
      CMTime v8 = *(CMTime *)(DerivedStorage + 24);
      CFDictionaryRef v6 = CMTimeCopyAsDictionary(&v8, v2);
    }
    else
    {
      CFDictionaryRef v6 = 0;
    }
    uint64_t result = 0;
    *CFAllocatorRef v3 = v6;
  }
  *(_DWORD *)(a1 + 24) = result;
  return result;
}

uint64_t playeroverlap_copyOverlappedPlaybackEndTime_fun(uint64_t a1)
{
  CFAllocatorRef v2 = *(const __CFAllocator **)(a1 + 8);
  CFAllocatorRef v3 = *(CFDictionaryRef **)(a1 + 16);
  unsigned __int8 v4 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if (v4)
  {
    uint64_t result = FigSignalErrorAt();
  }
  else
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if ((*(_DWORD *)(DerivedStorage + 60) & 0x1D) == 1)
    {
      CMTime v8 = *(CMTime *)(DerivedStorage + 48);
      CFDictionaryRef v6 = CMTimeCopyAsDictionary(&v8, v2);
    }
    else
    {
      CFDictionaryRef v6 = 0;
    }
    uint64_t result = 0;
    *CFAllocatorRef v3 = v6;
  }
  *(_DWORD *)(a1 + 24) = result;
  return result;
}

uint64_t itemoverlap_handleSetProperty(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, unsigned char *a5)
{
  unsigned __int8 v9 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if (v9)
  {
LABEL_9:
    return FigSignalErrorAt();
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *a5 = 1;
  if (CFEqual(a3, @"AdvanceTimeForOverlappedPlayback"))
  {
    uint64_t v11 = *(void *)(DerivedStorage + 8);
    uint64_t v12 = CMBaseObjectGetDerivedStorage();
    unsigned __int8 v13 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
    if ((v13 & 1) == 0)
    {
      uint64_t v24 = v11;
      uint64_t v25 = a1;
      uint64_t v26 = a4;
      uint64_t v27 = 0;
      long long v14 = *(NSObject **)(v12 + 48);
      unsigned __int8 v15 = (void (__cdecl *)(void *))playeroverlap_setAdvanceTimeForOverlappedPlayback_fun;
LABEL_8:
      dispatch_sync_f(v14, &v24, v15);
      return v27;
    }
    goto LABEL_9;
  }
  if (CFEqual(a3, @"OverlappedPlaybackEndTime"))
  {
    uint64_t v16 = *(void *)(DerivedStorage + 8);
    uint64_t v17 = CMBaseObjectGetDerivedStorage();
    unsigned __int8 v18 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
    if ((v18 & 1) == 0)
    {
      uint64_t v24 = v16;
      uint64_t v25 = a1;
      uint64_t v26 = a4;
      uint64_t v27 = 0;
      long long v14 = *(NSObject **)(v17 + 48);
      unsigned __int8 v15 = (void (__cdecl *)(void *))playeroverlap_setOverlappedPlaybackEndTime_fun;
      goto LABEL_8;
    }
    goto LABEL_9;
  }
  uint64_t FigBaseObject = FigPlaybackItemGetFigBaseObject(*(void *)(DerivedStorage + 16));
  uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v21) {
    uint64_t v22 = v21;
  }
  else {
    uint64_t v22 = 0;
  }
  uint64_t v23 = *(uint64_t (**)(uint64_t, const void *, uint64_t))(v22 + 56);
  if (!v23) {
    return 4294954514;
  }

  return v23(FigBaseObject, a3, a4);
}

uint64_t playeroverlap_setAdvanceTimeForOverlappedPlayback_fun(uint64_t a1)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  CFAllocatorRef v2 = *(void **)a1;
  CFAllocatorRef v3 = *(const void **)(a1 + 8);
  CFDictionaryRef v4 = *(const __CFDictionary **)(a1 + 16);
  unsigned __int8 v5 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if (v5) {
    goto LABEL_23;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(const void **)(CMBaseObjectGetDerivedStorage() + 56) == v3)
  {
    LODWORD(value) = 0;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_23:
    uint64_t result = FigSignalErrorAt();
    goto LABEL_24;
  }
  BOOL hasAdvanceTime = itemoverlap_hasAdvanceTime((BOOL)v3);
  CMTimeValue value = *MEMORY[0x1E4F1F9F8];
  CMTimeScale timescale = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 8);
  if (v4)
  {
    CMTimeMakeFromDictionary(&time, v4);
    CMTimeValue value = time.value;
    CMTimeFlags flags = time.flags;
    CMTimeScale timescale = time.timescale;
    CMTimeEpoch epoch = time.epoch;
  }
  else
  {
    CMTimeFlags flags = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 12);
    CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  }
  if (dword_1E9350F60)
  {
    uint64_t v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (flags & 0x1D) != 1 && (flags) {
    goto LABEL_23;
  }
  if ((flags & 0x1D) == 1)
  {
    time.CMTimeValue value = value;
    time.CMTimeScale timescale = timescale;
    time.CMTimeFlags flags = flags;
    time.CMTimeEpoch epoch = epoch;
    CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
    if (CMTimeCompare(&time, &time2) <= 0) {
      goto LABEL_23;
    }
  }
  CMTime time = *(CMTime *)(DerivedStorage + 24);
  time2.CMTimeValue value = value;
  time2.CMTimeScale timescale = timescale;
  time2.CMTimeFlags flags = flags;
  time2.CMTimeEpoch epoch = epoch;
  uint64_t result = CMTimeCompare(&time, &time2);
  if (result)
  {
    *(void *)(DerivedStorage + 24) = value;
    *(_DWORD *)(DerivedStorage + 32) = timescale;
    *(_DWORD *)(DerivedStorage + 36) = flags;
    *(void *)(DerivedStorage + 40) = epoch;
    if (*(_DWORD *)(DerivedStorage + 72) == -1)
    {
LABEL_22:
      uint64_t result = 0;
      goto LABEL_24;
    }
    if (hasAdvanceTime == itemoverlap_hasAdvanceTime((BOOL)v3)
      || (uint64_t v14 = playeroverlap_indexForItem(),
          uint64_t result = playeroverlap_refreshPlayQueueFromIndex(v2, v14 + 1),
          !result))
    {
      if (playeroverlap_itemAtIndex((uint64_t)v2, 0) != v3) {
        goto LABEL_22;
      }
      if (!hasAdvanceTime
        || (uint64_t v15 = CMBaseObjectGetDerivedStorage(), !FigPlaybackTimerIsScheduled(*(void *)(v15 + 64))))
      {
LABEL_35:
        uint64_t result = playeroverlap_maybeScheduleAdvanceTimerAndAnchorTime(v2);
        goto LABEL_24;
      }
      uint64_t v16 = CMBaseObjectGetDerivedStorage();
      int v17 = *(_DWORD *)(v16 + 4);
      BOOL v18 = __OFADD__(v17++, 1);
      char v19 = (v17 < 0) ^ v18;
      int v20 = v17 & 1;
      if (v19) {
        int v20 = -v20;
      }
      uint64_t v21 = *(void *)(v16 + 8 * v20 + 8);
      uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v22) {
        uint64_t v23 = v22;
      }
      else {
        uint64_t v23 = 0;
      }
      uint64_t v24 = *(uint64_t (**)(uint64_t, double))(v23 + 40);
      if (!v24)
      {
        uint64_t result = 4294954514;
        goto LABEL_24;
      }
      uint64_t result = v24(v21, 0.0);
      if (!result)
      {
        playeroverlap_removeAdvanceTimer();
        goto LABEL_35;
      }
    }
  }
LABEL_24:
  *(_DWORD *)(a1 + 24) = result;
  return result;
}

uint64_t playeroverlap_setOverlappedPlaybackEndTime_fun(uint64_t a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  CFAllocatorRef v2 = *(void **)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  CFDictionaryRef v4 = *(const __CFDictionary **)(a1 + 16);
  unsigned __int8 v5 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if (v5) {
    goto LABEL_4;
  }
  uint64_t DerivedStorage = (CMTime *)CMBaseObjectGetDerivedStorage();
  BOOL v18 = v2;
  uint64_t v19 = CMBaseObjectGetDerivedStorage();
  CMTimeValue value = *MEMORY[0x1E4F1F9F8];
  CMTimeScale timescale = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 8);
  if (v4)
  {
    CMTimeMakeFromDictionary(&time, v4);
    CMTimeValue value = time.value;
    CMTimeFlags flags = time.flags;
    CMTimeScale timescale = time.timescale;
    CMTimeEpoch epoch = time.epoch;
  }
  else
  {
    CMTimeFlags flags = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 12);
    CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  }
  if (dword_1E9350F60)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  BOOL v12 = (flags & 0x1D) == 1 || (flags & 1) == 0;
  if (!v12
    || (flags & 0x1D) == 1
    && (time.CMTimeValue value = value,
        time.CMTimeScale timescale = timescale,
        time.CMTimeFlags flags = flags,
        time.CMTimeEpoch epoch = epoch,
        CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48],
        CMTimeCompare(&time, &time2) <= 0))
  {
LABEL_4:
    uint64_t result = FigSignalErrorAt();
    int v10 = result;
  }
  else
  {
    if ((DerivedStorage[1].flags & 0x1D) == 1)
    {
      CMTime time = DerivedStorage[1];
      time2.CMTimeValue value = value;
      time2.CMTimeScale timescale = timescale;
      time2.CMTimeFlags flags = flags;
      time2.CMTimeEpoch epoch = epoch;
      if (CMTimeCompare(&time, &time2) >= 1)
      {
        unsigned __int8 v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    CMTime time = DerivedStorage[2];
    time2.CMTimeValue value = value;
    time2.CMTimeScale timescale = timescale;
    time2.CMTimeFlags flags = flags;
    time2.CMTimeEpoch epoch = epoch;
    uint64_t result = CMTimeCompare(&time, &time2);
    if (result)
    {
      uint64_t v14 = DerivedStorage + 2;
      if (*(void *)(v19 + 56) == v3)
      {
        if ((DerivedStorage[2].flags & 0x1D) == 1 && (int v15 = FigPlaybackTimerCancel(*(void *)(v19 + 72))) != 0)
        {
          int v10 = v15;
          int v17 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
        }
        else
        {
          v14->CMTimeValue value = value;
          DerivedStorage[2].CMTimeScale timescale = timescale;
          DerivedStorage[2].CMTimeFlags flags = flags;
          DerivedStorage[2].CMTimeEpoch epoch = epoch;
          uint64_t result = playeroverlap_maybeScheduleOverlappedPlaybackEndTime(v18, v3);
          int v10 = result;
          if (!result) {
            goto LABEL_25;
          }
          uint64_t v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
        }
        uint64_t result = fig_log_call_emit_and_clean_up_after_send_and_compose();
        goto LABEL_25;
      }
      int v10 = 0;
      v14->CMTimeValue value = value;
      DerivedStorage[2].CMTimeScale timescale = timescale;
      DerivedStorage[2].CMTimeFlags flags = flags;
      DerivedStorage[2].CMTimeEpoch epoch = epoch;
    }
    else
    {
      int v10 = 0;
    }
  }
LABEL_25:
  *(_DWORD *)(a1 + 24) = v10;
  return result;
}

uint64_t itemoverlap_GetDimensions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v5 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if (v5)
  {
    return FigSignalErrorAt();
  }
  else
  {
    if (dword_1E9350F60)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v8 = *(void *)(CMBaseObjectGetDerivedStorage() + 16);
    uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v9) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 8);
    if (v11) {
      return v11(v8, a2, a3);
    }
    else {
      return 4294954514;
    }
  }
}

uint64_t itemoverlap_GetDuration(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if ((v3 & 1) == 0)
  {
    uint64_t v4 = *(void *)(CMBaseObjectGetDerivedStorage() + 16);
    uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v5) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = 0;
    }
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 16);
    if (v8)
    {
      uint64_t v9 = v8(v4, a2);
      if (!v9)
      {
        if (dword_1E9350F60)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        return 0;
      }
      uint64_t v11 = v9;
    }
    else
    {
      uint64_t v11 = 4294954514;
    }
    BOOL v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return v11;
  }

  return FigSignalErrorAt();
}

uint64_t itemoverlap_SetCurrentTime(uint64_t a1, long long *a2, int a3)
{
  unsigned __int8 v6 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if ((v6 & 1) != 0
    || (CMBaseObjectGetDerivedStorage(),
        uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage(),
        unsigned __int8 v8 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage()),
        (v8 & 1) != 0))
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t context = a1;
    long long v11 = *a2;
    uint64_t v12 = *((void *)a2 + 2);
    int v13 = a3;
    unsigned int v14 = 0;
    dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 48), &context, (dispatch_function_t)itemoverlap_SetCurrentTime_fun);
    return v14;
  }
}

uint64_t itemoverlap_GetCurrentTime(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if ((v4 & 1) != 0
    || (CMBaseObjectGetDerivedStorage(),
        uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage(),
        unsigned __int8 v6 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage()),
        (v6 & 1) != 0))
  {
    return FigSignalErrorAt();
  }
  else
  {
    context[1] = a2;
    uint64_t v9 = 0;
    context[0] = a1;
    dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 48), context, (dispatch_function_t)itemoverlap_GetCurrentTime_fun);
    return v9;
  }
}

uint64_t itemoverlap_CopyTrackProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 v9 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if (v9)
  {
    return FigSignalErrorAt();
  }
  else
  {
    if (dword_1E9350F60)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v12 = *(void *)(CMBaseObjectGetDerivedStorage() + 16);
    uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v13) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    int v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 40);
    if (v15) {
      return v15(v12, a2, a3, a4, a5);
    }
    else {
      return 4294954514;
    }
  }
}

uint64_t itemoverlap_MakeReadyForInspection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v5 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if (v5)
  {
    return FigSignalErrorAt();
  }
  else
  {
    if (dword_1E9350F60)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v8 = *(void *)(CMBaseObjectGetDerivedStorage() + 16);
    uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v9) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
    long long v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
    if (v11) {
      return v11(v8, a2, a3);
    }
    else {
      return 4294954514;
    }
  }
}

uint64_t itemoverlap_CopyCommonMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 v7 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if (v7)
  {
    return FigSignalErrorAt();
  }
  else
  {
    if (dword_1E9350F60)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v10 = *(void *)(CMBaseObjectGetDerivedStorage() + 16);
    uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v11) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 64);
    if (v13) {
      return v13(v10, a2, a3, a4);
    }
    else {
      return 4294954514;
    }
  }
}

uint64_t itemoverlap_CopyChapterImageData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 v7 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if (v7)
  {
    return FigSignalErrorAt();
  }
  else
  {
    if (dword_1E9350F60)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v10 = *(void *)(CMBaseObjectGetDerivedStorage() + 16);
    uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v11) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 72);
    if (v13) {
      return v13(v10, a2, a3, a4);
    }
    else {
      return 4294954514;
    }
  }
}

uint64_t itemoverlap_GetNextThumbnailTime(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  unsigned __int8 v7 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if (v7)
  {
    return FigSignalErrorAt();
  }
  else
  {
    if (dword_1E9350F60)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v10 = *(void *)(CMBaseObjectGetDerivedStorage() + 16);
    long long v14 = *a2;
    uint64_t v15 = *((void *)a2 + 2);
    uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v11) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v13 = *(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t))(v12 + 80);
    if (v13)
    {
      long long v16 = v14;
      uint64_t v17 = v15;
      return v13(v10, &v16, a3, a4);
    }
    else
    {
      return 4294954514;
    }
  }
}

uint64_t itemoverlap_SetCurrentTimeWithRange(uint64_t a1, long long *a2, int a3, long long *a4, long long *a5)
{
  unsigned __int8 v10 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if ((v10 & 1) != 0
    || (CMBaseObjectGetDerivedStorage(),
        uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage(),
        unsigned __int8 v12 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage()),
        (v12 & 1) != 0))
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t context = a1;
    long long v15 = *a2;
    uint64_t v16 = *((void *)a2 + 2);
    int v17 = a3;
    long long v18 = *a4;
    uint64_t v19 = *((void *)a4 + 2);
    long long v20 = *a5;
    uint64_t v21 = *((void *)a5 + 2);
    unsigned int v22 = 0;
    dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 48), &context, (dispatch_function_t)itemoverlap_SetCurrentTimeWithRange_fun);
    return v22;
  }
}

uint64_t itemoverlap_SetTrackProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 v7 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if (v7)
  {
    return FigSignalErrorAt();
  }
  else
  {
    if (dword_1E9350F60)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v10 = *(void *)(CMBaseObjectGetDerivedStorage() + 16);
    uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v11) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 112);
    if (v13) {
      return v13(v10, a2, a3, a4);
    }
    else {
      return 4294954514;
    }
  }
}

uint64_t itemoverlap_CopyFormatReader(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if (v3)
  {
    return FigSignalErrorAt();
  }
  else
  {
    if (dword_1E9350F60)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v6 = *(void *)(CMBaseObjectGetDerivedStorage() + 16);
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 120);
    if (v9) {
      return v9(v6, a2);
    }
    else {
      return 4294954514;
    }
  }
}

uint64_t itemoverlap_SeekToDateWithID(uint64_t a1, uint64_t a2, int a3)
{
  unsigned __int8 v6 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if ((v6 & 1) != 0
    || (CMBaseObjectGetDerivedStorage(),
        uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage(),
        unsigned __int8 v8 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage()),
        (v8 & 1) != 0))
  {
    return FigSignalErrorAt();
  }
  else
  {
    context[0] = a1;
    context[1] = a2;
    int v11 = a3;
    unsigned int v12 = 0;
    dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 48), context, (dispatch_function_t)itemoverlap_SeekToDateWithID_fun);
    return v12;
  }
}

uint64_t itemoverlap_SetCurrentTimeWithRangeAndID(uint64_t a1, long long *a2, int a3, long long *a4, long long *a5, int a6)
{
  unsigned __int8 v12 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if ((v12 & 1) != 0
    || (CMBaseObjectGetDerivedStorage(),
        uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage(),
        unsigned __int8 v14 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage()),
        (v14 & 1) != 0))
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v25 = 0;
    uint64_t v16 = a1;
    long long v17 = *a2;
    uint64_t v18 = *((void *)a2 + 2);
    int v19 = a3;
    long long v20 = *a4;
    uint64_t v21 = *((void *)a4 + 2);
    long long v22 = *a5;
    uint64_t v23 = *((void *)a5 + 2);
    int v24 = a6;
    dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 48), &v16, (dispatch_function_t)itemoverlap_SetCurrentTimeWithRangeAndID_fun);
    return v25;
  }
}

uint64_t itemoverlap_CopyAsset(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if (v3)
  {
    return FigSignalErrorAt();
  }
  else
  {
    if (dword_1E9350F60)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v6 = *(void *)(CMBaseObjectGetDerivedStorage() + 16);
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 152);
    if (v9) {
      return v9(v6, a2);
    }
    else {
      return 4294954514;
    }
  }
}

uint64_t itemoverlap_SetProperties(uint64_t a1, const __CFDictionary *a2, void *a3)
{
  unsigned __int8 v6 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if (v6)
  {
    return FigSignalErrorAt();
  }
  else
  {
    return FPSupport_HandlePlaybackItemSetPropertiesAndCopyModification(a1, a2, 0, (uint64_t)itemoverlap_handleSetProperty, 0, 0, a3);
  }
}

uint64_t itemoverlap_ExtractAndRetainNextSampleBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 v7 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if (v7)
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v8 = *(void *)(CMBaseObjectGetDerivedStorage() + 16);
    uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v9) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
    unsigned __int8 v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 168);
    if (v12)
    {
      return v12(v8, a2, a3, a4);
    }
    else
    {
      return 4294954514;
    }
  }
}

uint64_t itemoverlap_SetCurrentTimeWithOptions(uint64_t a1, long long *a2, uint64_t a3)
{
  unsigned __int8 v6 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if ((v6 & 1) != 0
    || (CMBaseObjectGetDerivedStorage(),
        uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage(),
        unsigned __int8 v8 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage()),
        (v8 & 1) != 0))
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v13 = a3;
    uint64_t v14 = 0;
    uint64_t v10 = a1;
    long long v11 = *a2;
    uint64_t v12 = *((void *)a2 + 2);
    dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 48), &v10, (dispatch_function_t)itemoverlap_SetCurrentTimeWithOptions_fun);
    return v14;
  }
}

uint64_t itemoverlap_SetCurrentTime_fun(uint64_t a1)
{
  time[17] = *MEMORY[0x1E4F143B8];
  CFAllocatorRef v2 = *(const void **)a1;
  int v3 = *(_DWORD *)(a1 + 32);
  long long v7 = *(_OWORD *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 24);
  if (dword_1E9350F60)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  unsigned __int8 v5 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if (v5)
  {
    uint64_t result = FigSignalErrorAt();
  }
  else
  {
    memset(time, 0, 40);
    LODWORD(time[0]) = v3;
    long long v9 = v7;
    uint64_t v10 = v8;
    uint64_t result = itemoverlap_SetCurrentTimeCommon(v2, (uint64_t)&v9, time);
  }
  *(_DWORD *)(a1 + 36) = result;
  return result;
}

uint64_t itemoverlap_SetCurrentTimeCommon(const void *a1, uint64_t a2, void *a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  long long v7 = *(void **)(DerivedStorage + 8);
  uint64_t v8 = CMBaseObjectGetDerivedStorage();
  if (!FigPlaybackTimerIsScheduled(*(void *)(v8 + 64)) || playeroverlap_itemAtIndex((uint64_t)v7, 1) != a1)
  {
    if (!*(void *)(CMBaseObjectGetDerivedStorage() + 56)) {
      goto LABEL_22;
    }
    uint64_t v9 = CMBaseObjectGetDerivedStorage();
    uint64_t v10 = playeroverlap_itemAtIndex((uint64_t)v7, 0);
    long long v11 = *(const void **)(v9 + 56);
    if (v10 == a1)
    {
      if (v11 != a1)
      {
LABEL_21:
        playeroverlap_removeOutroItem(v7, 1);
LABEL_22:
        uint64_t v28 = *(void *)(DerivedStorage + 16);
        long long v31 = *(_OWORD *)a2;
        uint64_t v32 = *(void *)(a2 + 16);
        uint64_t v24 = itemoverlap_SetCurrentTimeSpecific(v28, &v31, a3);
        if (!v24)
        {
          long long v31 = *(_OWORD *)a2;
          uint64_t v32 = *(void *)(a2 + 16);
          uint64_t v29 = CMBaseObjectGetDerivedStorage();
          *(_DWORD *)(v29 + 88) = 0;
          *(_OWORD *)(v29 + 104) = v31;
          *(void *)(v29 + 120) = v32;
          return v24;
        }
        goto LABEL_20;
      }
    }
    else if (v11 != a1)
    {
      goto LABEL_22;
    }
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_21;
  }
  playeroverlap_assertHasAdvanceTimer((uint64_t)v7);
  uint64_t v12 = CMBaseObjectGetDerivedStorage();
  int v13 = *(_DWORD *)(v12 + 4);
  BOOL v14 = __OFADD__(v13++, 1);
  char v15 = (v13 < 0) ^ v14;
  int v16 = v13 & 1;
  if (v15) {
    int v16 = -v16;
  }
  uint64_t v17 = *(void *)(v12 + 8 * v16 + 8);
  uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v18) {
    uint64_t v19 = v18;
  }
  else {
    uint64_t v19 = 0;
  }
  uint64_t v21 = *(uint64_t (**)(uint64_t, double))(v19 + 40);
  if (!v21)
  {
    uint64_t v24 = 4294954514;
    goto LABEL_20;
  }
  uint64_t v22 = v21(v17, 0.0);
  if (v22)
  {
    uint64_t v24 = v22;
    goto LABEL_20;
  }
  playeroverlap_removeAdvanceTimer();
  uint64_t v23 = *(void *)(DerivedStorage + 16);
  long long v31 = *(_OWORD *)a2;
  uint64_t v32 = *(void *)(a2 + 16);
  uint64_t v24 = itemoverlap_SetCurrentTimeSpecific(v23, &v31, a3);
  if (v24)
  {
LABEL_20:
    FigSignalErrorAt();
    return v24;
  }
  long long v31 = *(_OWORD *)a2;
  uint64_t v32 = *(void *)(a2 + 16);
  uint64_t v25 = CMBaseObjectGetDerivedStorage();
  *(_DWORD *)(v25 + 88) = 0;
  *(_OWORD *)(v25 + 104) = v31;
  *(void *)(v25 + 120) = v32;
  uint64_t v26 = playeroverlap_maybeScheduleAdvanceTimerAndAnchorTime(v7);
  if (v26)
  {
    uint64_t v27 = v26;
    FigSignalErrorAt();
    return v27;
  }
  return v24;
}

uint64_t itemoverlap_SetCurrentTimeSpecific(uint64_t a1, long long *a2, void *a3)
{
  unsigned __int8 v4 = (long long *)a3[1];
  if (v4)
  {
    uint64_t v5 = *(unsigned int *)a3;
    long long v37 = *a2;
    uint64_t v39 = *((void *)a2 + 2);
    long long v33 = *v4;
    uint64_t v35 = *((void *)v4 + 2);
    long long v29 = *(long long *)((char *)v4 + 24);
    uint64_t v31 = *((void *)v4 + 5);
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    int v13 = *(uint64_t (**)(uint64_t, long long *, uint64_t, long long *, long long *))(v7 + 104);
    if (v13)
    {
      long long v45 = v37;
      uint64_t v46 = v39;
      long long v43 = v33;
      uint64_t v44 = v35;
      long long v41 = v29;
      uint64_t v42 = v31;
      return v13(a1, &v45, v5, &v43, &v41);
    }
    return 4294954514;
  }
  uint64_t v8 = (long long *)a3[2];
  if (v8)
  {
    uint64_t v9 = *(unsigned int *)a3;
    uint64_t v10 = *((unsigned int *)v8 + 12);
    long long v38 = *a2;
    uint64_t v40 = *((void *)a2 + 2);
    long long v34 = *v8;
    uint64_t v36 = *((void *)v8 + 2);
    long long v30 = *(long long *)((char *)v8 + 24);
    uint64_t v32 = *((void *)v8 + 5);
    uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v11) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v19 = *(uint64_t (**)(uint64_t, long long *, uint64_t, long long *, long long *, uint64_t))(v12 + 144);
    if (v19)
    {
      long long v45 = v38;
      uint64_t v46 = v40;
      long long v43 = v34;
      uint64_t v44 = v36;
      long long v41 = v30;
      uint64_t v42 = v32;
      return v19(a1, &v45, v9, &v43, &v41, v10);
    }
    return 4294954514;
  }
  char v15 = (uint64_t *)a3[3];
  if (v15)
  {
    uint64_t v16 = *v15;
    long long v43 = *a2;
    uint64_t v44 = *((void *)a2 + 2);
    uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v17) {
      uint64_t v18 = v17;
    }
    else {
      uint64_t v18 = 0;
    }
    uint64_t v25 = *(uint64_t (**)(uint64_t, long long *, uint64_t))(v18 + 176);
    if (v25)
    {
LABEL_21:
      long long v45 = v43;
      uint64_t v46 = v44;
      return v25(a1, &v45, v16);
    }
    return 4294954514;
  }
  long long v20 = (uint64_t *)a3[4];
  if (!v20)
  {
    uint64_t v16 = *(unsigned int *)a3;
    long long v43 = *a2;
    uint64_t v44 = *((void *)a2 + 2);
    uint64_t v26 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v26) {
      uint64_t v27 = v26;
    }
    else {
      uint64_t v27 = 0;
    }
    uint64_t v25 = *(uint64_t (**)(uint64_t, long long *, uint64_t))(v27 + 24);
    if (v25) {
      goto LABEL_21;
    }
    return 4294954514;
  }
  uint64_t v21 = *v20;
  uint64_t v22 = *((unsigned int *)v20 + 2);
  uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v23) {
    uint64_t v24 = v23;
  }
  else {
    uint64_t v24 = 0;
  }
  uint64_t v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v24 + 128);
  if (!v28) {
    return 4294954514;
  }

  return v28(a1, v21, v22);
}

uint64_t itemoverlap_GetCurrentTime_fun(uint64_t a1)
{
  uint64_t result = itemoverlap_GetCurrentTimeInPlayerQueue(*(void *)a1, *(void *)(a1 + 8));
  *(_DWORD *)(a1 + 16) = result;
  return result;
}

uint64_t itemoverlap_SetCurrentTimeWithRange_fun(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  CFAllocatorRef v2 = *(const void **)a1;
  unsigned int v3 = *(_DWORD *)(a1 + 32);
  long long v10 = *(_OWORD *)(a1 + 8);
  uint64_t v11 = *(void *)(a1 + 24);
  *(_OWORD *)&v9.CMTimeValue value = *(_OWORD *)(a1 + 36);
  v9.CMTimeEpoch epoch = *(void *)(a1 + 52);
  long long v7 = *(_OWORD *)(a1 + 60);
  uint64_t v8 = *(void *)(a1 + 76);
  if (dword_1E9350F60)
  {
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  unsigned __int8 v5 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if (v5)
  {
    uint64_t result = FigSignalErrorAt();
  }
  else
  {
    CMTime time = v9;
    long long v19 = v7;
    uint64_t v20 = v8;
    long long v16 = 0u;
    v15[0] = v3;
    uint64_t v17 = 0;
    v15[1] = &time;
    long long v12 = v10;
    uint64_t v13 = v11;
    uint64_t result = itemoverlap_SetCurrentTimeCommon(v2, (uint64_t)&v12, v15);
  }
  *(_DWORD *)(a1 + 84) = result;
  return result;
}

uint64_t itemoverlap_SeekToDateWithID_fun(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  CFAllocatorRef v2 = *(const void **)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  int v4 = *(_DWORD *)(a1 + 16);
  if (dword_1E9350F60)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  unsigned __int8 v6 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if (v6)
  {
    uint64_t result = FigSignalErrorAt();
  }
  else
  {
    uint64_t v8 = v3;
    int v10 = 0;
    int v9 = v4;
    memset(v11, 0, sizeof(v11));
    long long v12 = &v8;
    uint64_t result = itemoverlap_SetCurrentTimeCommon(v2, MEMORY[0x1E4F1FA48], v11);
  }
  *(_DWORD *)(a1 + 20) = result;
  return result;
}

uint64_t itemoverlap_SetCurrentTimeWithRangeAndID_fun(uint64_t a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  CFAllocatorRef v2 = *(const void **)a1;
  int v3 = *(_DWORD *)(a1 + 32);
  int v4 = *(_DWORD *)(a1 + 84);
  long long v11 = *(_OWORD *)(a1 + 8);
  uint64_t v12 = *(void *)(a1 + 24);
  *(_OWORD *)&v10.CMTimeValue value = *(_OWORD *)(a1 + 36);
  v10.CMTimeEpoch epoch = *(void *)(a1 + 52);
  long long v8 = *(_OWORD *)(a1 + 60);
  uint64_t v9 = *(void *)(a1 + 76);
  if (dword_1E9350F60)
  {
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  unsigned __int8 v6 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if (v6)
  {
    uint64_t result = FigSignalErrorAt();
  }
  else
  {
    CMTime time = v10;
    long long v21 = v8;
    uint64_t v22 = v9;
    int v23 = v4;
    long long v16 = 0u;
    uint64_t v18 = 0;
    LODWORD(v16) = v3;
    uint64_t v19 = 0;
    p_CMTime time = &time;
    long long v13 = v11;
    uint64_t v14 = v12;
    uint64_t result = itemoverlap_SetCurrentTimeCommon(v2, (uint64_t)&v13, &v16);
  }
  *(_DWORD *)(a1 + 88) = result;
  return result;
}

uint64_t itemoverlap_SetCurrentTimeWithOptions_fun(uint64_t a1)
{
  CFAllocatorRef v2 = *(const void **)a1;
  long long v6 = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 24);
  unsigned __int8 v4 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if (v4)
  {
    uint64_t result = FigSignalErrorAt();
  }
  else
  {
    uint64_t v14 = v3;
    long long v10 = 0u;
    uint64_t v11 = 0;
    uint64_t v12 = &v14;
    uint64_t v13 = 0;
    long long v8 = v6;
    uint64_t v9 = v7;
    uint64_t result = itemoverlap_SetCurrentTimeCommon(v2, (uint64_t)&v8, &v10);
  }
  *(_DWORD *)(a1 + 40) = result;
  return result;
}

uint64_t playeroverlap_SetRateWithOptions_fun(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  float v3 = *(float *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  unsigned __int8 v5 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if (v5)
  {
    uint64_t result = FigSignalErrorAt();
  }
  else
  {
    v7[0] = 0;
    v7[1] = 0;
    v7[2] = (long long *)&v8;
    uint64_t v8 = v4;
    uint64_t result = playeroverlap_SetRateCommon(v2, v7, v3);
  }
  *(_DWORD *)(a1 + 24) = result;
  return result;
}

uint64_t playeroverlap_AddExternalStartupTask_fun(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if (v3)
  {
    uint64_t result = FigSignalErrorAt();
  }
  else
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    uint64_t v5 = *(void *)(DerivedStorage + 8 * *(int *)(DerivedStorage + 4) + 8);
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 128);
    if (v9) {
      uint64_t result = v9(v5, v2);
    }
    else {
      uint64_t result = 4294954514;
    }
  }
  *(_DWORD *)(a1 + 16) = result;
  return result;
}

uint64_t playeroverlap_RemoveExternalStartupTask_fun(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if (v3)
  {
    uint64_t result = FigSignalErrorAt();
  }
  else
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    uint64_t v5 = *(void *)(DerivedStorage + 8 * *(int *)(DerivedStorage + 4) + 8);
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 136);
    if (v9) {
      uint64_t result = v9(v5, v2);
    }
    else {
      uint64_t result = 4294954514;
    }
  }
  *(_DWORD *)(a1 + 16) = result;
  return result;
}

uint64_t playeroverlap_CopyDisplayedCVPixelBuffer_fun(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  unsigned __int8 v4 = atomic_load((unsigned __int8 *)CMBaseObjectGetDerivedStorage());
  if (v4)
  {
    uint64_t result = FigSignalErrorAt();
  }
  else
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    uint64_t v6 = *(void *)(DerivedStorage + 8 * *(int *)(DerivedStorage + 4) + 8);
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    long long v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 152);
    if (v10) {
      uint64_t result = v10(v6, v2, v3);
    }
    else {
      uint64_t result = 4294954514;
    }
  }
  *(_DWORD *)(a1 + 24) = result;
  return result;
}

uint64_t playeroverlap_SetConnectionActive(uint64_t a1, uint64_t a2)
{
  if (dword_1E9350F60)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = *(void *)(DerivedStorage + 8);
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 24);
  if (!v6) {
    return 4294954514;
  }
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 24);
  if (!v7) {
    return 4294954514;
  }
  uint64_t result = v7(v5, a2);
  if (result) {
    return result;
  }
  uint64_t v9 = *(void *)(DerivedStorage + 16);
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 24);
  if (v10 && (uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 24)) != 0) {
    return v11(v9, a2);
  }
  else {
    return 4294954514;
  }
}

uint64_t playeroverlap_DuckVolume(float a1, float a2, uint64_t a3, uint64_t a4)
{
  if (dword_1E9350F60)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v9 = *(void *)(DerivedStorage + 8);
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 32);
  if (!v10) {
    return 4294954514;
  }
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, float, float))(v10 + 8);
  if (!v11) {
    return 4294954514;
  }
  uint64_t result = v11(v9, a4, a1, a2);
  if (result) {
    return result;
  }
  uint64_t v13 = *(void *)(DerivedStorage + 16);
  uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 32);
  if (v14 && (char v15 = *(uint64_t (**)(uint64_t, uint64_t, float, float))(v14 + 8)) != 0) {
    return v15(v13, a4, a1, a2);
  }
  else {
    return 4294954514;
  }
}

uint64_t playeroverlap_SilentMute(uint64_t a1, uint64_t a2)
{
  if (dword_1E9350F60)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = *(void *)(DerivedStorage + 8);
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 32);
  if (!v6) {
    return 4294954514;
  }
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 16);
  if (!v7) {
    return 4294954514;
  }
  uint64_t result = v7(v5, a2);
  if (result) {
    return result;
  }
  uint64_t v9 = *(void *)(DerivedStorage + 16);
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 32);
  if (v10 && (uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 16)) != 0) {
    return v11(v9, a2);
  }
  else {
    return 4294954514;
  }
}

__CFString *activityOnThread_copyDebugDescription(uint64_t a1)
{
  CFArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<FigActivityScheduler_OnNewThread %p>", a1);
  return Mutable;
}

uint64_t activityOnThread_copyProperty(uint64_t a1, const void *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a4)
  {
    uint64_t v7 = DerivedStorage;
    if (CFEqual(@"ThreadPriority", a2))
    {
      MEMORY[0x19970E910](*(void *)(v7 + 16));
      *a4 = FigCFNumberCreateUInt32();
      MEMORY[0x19970E930](*(void *)(v7 + 16));
      return 0;
    }
    else
    {
      return 4294954509;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t activityOnThread_setProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(@"ClientPID", a2))
  {
    if (!a3) {
      return 0;
    }
    CFTypeID TypeID = CFNumberGetTypeID();
    if (TypeID != CFGetTypeID(a3)) {
      return 0;
    }
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 16));
    if (*(void *)(DerivedStorage + 8)) {
      goto LABEL_5;
    }
    goto LABEL_26;
  }
  if (CFEqual(@"ThrottleForBackground", a2))
  {
    if (a3)
    {
      CFTypeID v8 = CFBooleanGetTypeID();
      if (v8 == CFGetTypeID(a3))
      {
        if (CFBooleanGetValue((CFBooleanRef)a3)) {
          int v9 = 16;
        }
        else {
          int v9 = *(_DWORD *)(DerivedStorage + 60);
        }
        int valuePtr = v9;
        CFNumberRef v13 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
        MEMORY[0x19970E910](*(void *)(DerivedStorage + 16));
        if (!*(void *)(DerivedStorage + 8) || (uint64_t v7 = FigThreadSetProperty(), !v7))
        {
          uint64_t v7 = 0;
          *(_DWORD *)(DerivedStorage + 60) = valuePtr;
        }
        MEMORY[0x19970E930](*(void *)(DerivedStorage + 16));
        if (v13) {
          CFRelease(v13);
        }
        return v7;
      }
    }
  }
  else if (CFEqual(@"ThreadPriority", a2))
  {
    if (a3)
    {
      CFTypeID v10 = CFNumberGetTypeID();
      if (v10 == CFGetTypeID(a3))
      {
        MEMORY[0x19970E910](*(void *)(DerivedStorage + 16));
        if (!*(void *)(DerivedStorage + 8) || (uint64_t v7 = FigThreadSetProperty(), !v7))
        {
          uint64_t v7 = 0;
          *(_DWORD *)(DerivedStorage + 60) = FigCFNumberGetUInt32();
        }
        goto LABEL_27;
      }
    }
  }
  else
  {
    if (!CFEqual(@"MachTimeSharePolicy", a2)) {
      return 4294954509;
    }
    if (a3)
    {
      CFTypeID v11 = CFBooleanGetTypeID();
      if (v11 == CFGetTypeID(a3))
      {
        MEMORY[0x19970E910](*(void *)(DerivedStorage + 16));
        if (*(void *)(DerivedStorage + 8))
        {
LABEL_5:
          uint64_t v7 = FigThreadSetProperty();
LABEL_27:
          MEMORY[0x19970E930](*(void *)(DerivedStorage + 16));
          return v7;
        }
LABEL_26:
        uint64_t v7 = 0;
        goto LABEL_27;
      }
    }
  }

  return FigSignalErrorAt();
}

uint64_t activityOnThread_isProcessingCallbackCalledOnConsistentThread()
{
  return 1;
}

uint64_t FigRateMinderGetClock()
{
  return *(void *)(CMBaseObjectGetDerivedStorage() + 40);
}

void FigRateMinderUpdateRateWithTimestamps(const void *a1, uint64_t a2, CMTime *a3, Float64 a4)
{
  uint64_t DerivedStorage = (NSObject **)CMBaseObjectGetDerivedStorage();
  int v9 = DerivedStorage;
  if (*(unsigned char *)(a2 + 12))
  {
    uint64_t v12 = (Float64 *)malloc_type_malloc(0x20uLL, 0x1020040A5B76CDFuLL);
    if (v12)
    {
      CFNumberRef v13 = v12;
      CMTime v15 = *(CMTime *)a2;
      *uint64_t v12 = CMTimeGetSeconds(&v15);
      CMTime v15 = *a3;
      v13[1] = CMTimeGetSeconds(&v15);
      v13[2] = a4;
      if (a1) {
        CFTypeRef v14 = CFRetain(a1);
      }
      else {
        CFTypeRef v14 = 0;
      }
      *((void *)v13 + 3) = v14;
      dispatch_async_f(*v9, v13, (dispatch_function_t)frm_processDeltaUpdateNotification);
    }
  }
  else
  {
    CFTypeID v10 = *DerivedStorage;
    if (a1) {
      CFTypeID v11 = (void *)CFRetain(a1);
    }
    else {
      CFTypeID v11 = 0;
    }
    dispatch_async_f(v10, v11, (dispatch_function_t)frm_resetInternalState);
  }
}

void frm_processDeltaUpdateNotification(double *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  double v3 = *a1;
  double v4 = a1[1];
  double v5 = a1[2];
  uint64_t v6 = (const void *)*((void *)a1 + 3);
  free(a1);
  uint64_t v7 = *(void *)(DerivedStorage + 16);
  if (v7) {
    (*(void (**)(const void *, double, double, double))(v7 + 8))(v6, v3, v4, v5);
  }
  if (v6)
  {
    CFRelease(v6);
  }
}

void frm_resetInternalState(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = *(void *)(DerivedStorage + 8);
  double v4 = *(uint64_t **)(DerivedStorage + 16);
  *(_DWORD *)(v3 + 4) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_DWORD *)(DerivedStorage + 28) = 0;
  *(void *)(DerivedStorage + 56) = 0x3FF0000000000000;
  if (v4)
  {
    uint64_t v5 = **(void **)(CMBaseObjectGetDerivedStorage() + 16);
    if (v5) {
      *(_DWORD *)(v5 + 48) = 0;
    }
    uint64_t v6 = *v4;
    if (*v4)
    {
      *(_DWORD *)(v6 + 4) = 0;
      *(_DWORD *)(v6 + 48) = 0;
      *(_OWORD *)(v6 + 56) = 0u;
      *(_OWORD *)(v6 + 72) = 0u;
    }
  }
  if (a1)
  {
    CFRelease(a1);
  }
}

uint64_t FigRateMinderCreate(uint64_t a1, const __CFDictionary *a2, uint64_t a3, const void *a4, int a5, CFTypeRef *a6)
{
  uint64_t v26 = @"FigRateMinderPrefilterType_None";
  CFTypeRef cf = 0;
  MEMORY[0x19970EE10](&FigRateMinderGetClassID_sRegisterFigRateMinderBaseTypeOnce, RegisterFigRateMinderBaseType);
  uint64_t v11 = CMDerivedObjectCreate();
  if (v11) {
    goto LABEL_24;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v13 = FigDispatchQueueCreateWithPriority();
  *(void *)uint64_t DerivedStorage = v13;
  if (a4)
  {
    CFTypeRef v14 = CFRetain(a4);
    uint64_t v13 = *(void *)DerivedStorage;
  }
  else
  {
    CFTypeRef v14 = 0;
  }
  *(void *)(DerivedStorage + 48) = v14;
  if (!v13)
  {
LABEL_23:
    uint64_t v11 = FigSignalErrorAt();
LABEL_24:
    uint64_t v24 = v11;
LABEL_25:
    if (cf) {
      CFRelease(cf);
    }
    return v24;
  }
  *(void *)(DerivedStorage + 8) = frm_createAndInitializeRegressionModule();
  *(_DWORD *)(DerivedStorage + 24) = 5;
  *(void *)(DerivedStorage + 32) = malloc_type_calloc(5uLL, 8uLL, 0x100004000313F17uLL);
  *(_DWORD *)(DerivedStorage + 28) = 0;
  *(void *)(DerivedStorage + 56) = 0x3FF0000000000000;
  if (a2)
  {
    CFDictionaryGetValueIfPresent(a2, @"FigRateMinderPrefilterTypes", (const void **)&v26);
    CMTime v15 = v26;
  }
  else
  {
    CMTime v15 = @"FigRateMinderPrefilterType_None";
  }
  long long v16 = (unsigned int **)malloc_type_calloc(1uLL, 0x10uLL, 0xA0040AFF93C70uLL);
  if (!v16)
  {
LABEL_22:
    *(void *)(DerivedStorage + 16) = 0;
    goto LABEL_23;
  }
  uint64_t v17 = v16;
  if (CFEqual(v15, @"FigRateMinderPrefilterType_None"))
  {
    v17[1] = (unsigned int *)frm_processDeltaUpdate;
    goto LABEL_17;
  }
  int v18 = CFEqual(v15, @"FigRateMinderPrefilterType_Mean");
  uint64_t v19 = frm_preFilterFnMean;
  if (!v18)
  {
    int v20 = CFEqual(v15, @"FigRateMinderPrefilterType_Median");
    uint64_t v19 = frm_preFilterFnMedian;
    if (!v20)
    {
      int v21 = CFEqual(v15, @"FigRateMinderPrefilterType_RemoveOutliersLocal");
      uint64_t v19 = frm_preFilterFnRemoveOutliersLocal;
      if (!v21)
      {
        int v22 = CFEqual(v15, @"FigRateMinderPrefilterType_RemoveOutliersGlobal");
        uint64_t v19 = frm_preFilterFnRemoveOutliersGlobal;
        if (!v22)
        {
          free(v17);
          goto LABEL_22;
        }
      }
    }
  }
  v17[1] = (unsigned int *)v19;
  *uint64_t v17 = frm_createAndInitializeRegressionModule();
LABEL_17:
  *(void *)(DerivedStorage + 16) = v17;
  CFTypeRef v23 = cf;
  *a6 = cf;
  if (!a5) {
    return 0;
  }
  uint64_t v24 = FigStreamingLiveServerClockCreate(a1, (uint64_t)v23, (void *)(DerivedStorage + 40));
  if (v24) {
    goto LABEL_25;
  }
  return v24;
}

unsigned int *frm_createAndInitializeRegressionModule()
{
  v0 = (unsigned int *)malloc_type_calloc(1uLL, 0x58uLL, 0x108004019F10DC7uLL);
  unsigned int *v0 = 100;
  *((void *)v0 + 1) = malloc_type_calloc(0x64uLL, 8uLL, 0x100004000313F17uLL);
  *((void *)v0 + 2) = malloc_type_calloc(*v0, 8uLL, 0x100004000313F17uLL);
  *((void *)v0 + 3) = malloc_type_calloc(*v0, 8uLL, 0x100004000313F17uLL);
  *((void *)v0 + 4) = malloc_type_calloc(*v0, 8uLL, 0x100004000313F17uLL);
  *((void *)v0 + 5) = malloc_type_calloc(*v0, 8uLL, 0x100004000313F17uLL);
  v0[1] = 0;
  v0[12] = 0;
  *(_OWORD *)(v0 + 14) = 0u;
  *(_OWORD *)(v0 + 18) = 0u;
  return v0;
}

uint64_t frm_invalidate(void *a1)
{
  uint64_t DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  dispatch_sync_f(*DerivedStorage, a1, (dispatch_function_t)frm_invalidateGuts);
  return 0;
}

void frm_finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  frm_invalidateGuts();
  if (*(void *)DerivedStorage)
  {
    dispatch_release(*(dispatch_object_t *)DerivedStorage);
    *(void *)uint64_t DerivedStorage = 0;
  }
  v1 = *(const void **)(DerivedStorage + 40);
  if (v1) {
    CFRelease(v1);
  }
  uint64_t v2 = *(const void **)(DerivedStorage + 48);
  if (v2)
  {
    CFRelease(v2);
  }
}

void frm_invalidateGuts()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  v1 = (void **)DerivedStorage[1];
  if (v1)
  {
    frm_cleanupRegressionModule(v1);
    DerivedStorage[1] = 0;
  }
  uint64_t v2 = (void ***)DerivedStorage[2];
  if (v2)
  {
    if (*v2)
    {
      frm_cleanupRegressionModule(*v2);
      uint64_t v2 = (void ***)DerivedStorage[2];
    }
    free(v2);
    DerivedStorage[2] = 0;
  }
  uint64_t v3 = (void *)DerivedStorage[4];
  if (v3)
  {
    free(v3);
    DerivedStorage[4] = 0;
  }
}

void frm_cleanupRegressionModule(void **a1)
{
  free(a1[1]);
  free(a1[2]);
  free(a1[3]);
  free(a1[4]);
  free(a1[5]);

  free(a1);
}

uint64_t RegisterFigRateMinderBaseType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

CFStringRef FigRateMinderCopyFormattingDesc()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigRateMinder %@, Calculated Drift : %f]", *(void *)(DerivedStorage + 48), *(void *)(DerivedStorage + 56));
}

void frm_processDeltaUpdate(double a1, double a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = *(void *)(DerivedStorage + 8);
  uint64_t v6 = *(int *)(v5 + 48);
  uint64_t v7 = *(double **)(v5 + 8);
  CFTypeID v8 = *(double **)(v5 + 16);
  v7[v6] = a2;
  v8[v6] = a1;
  uint64_t v9 = (v6 + 1);
  *(_DWORD *)(v5 + 48) = v9;
  if (v9 == *(_DWORD *)v5)
  {
    uint64_t v10 = DerivedStorage;
    double v11 = 0.0;
    if (v9)
    {
      uint64_t v12 = v7;
      uint64_t v13 = v9;
      do
      {
        double v14 = *v12++;
        double v11 = v11 + v14;
        --v13;
      }
      while (v13);
      double v15 = 0.0;
      long long v16 = v8;
      uint64_t v17 = v9;
      do
      {
        double v18 = *v16++;
        double v15 = v15 + v18;
        --v17;
      }
      while (v17);
      uint64_t v19 = *(double **)(v5 + 24);
      int v20 = v7;
      int v21 = v19;
      uint64_t v22 = v9;
      do
      {
        double v23 = *v20++;
        *v21++ = v23 * v23;
        --v22;
      }
      while (v22);
      double v24 = 0.0;
      uint64_t v25 = v9;
      do
      {
        double v26 = *v19++;
        double v24 = v24 + v26;
        --v25;
      }
      while (v25);
      uint64_t v27 = *(double **)(v5 + 32);
      uint64_t v28 = v27;
      uint64_t v29 = v9;
      do
      {
        double v30 = *v7++;
        double v31 = v30;
        double v32 = *v8++;
        *v28++ = v31 * v32;
        --v29;
      }
      while (v29);
      double v33 = 0.0;
      uint64_t v34 = v9;
      do
      {
        double v35 = *v27++;
        double v33 = v33 + v35;
        --v34;
      }
      while (v34);
    }
    else
    {
      double v15 = 0.0;
      double v24 = 0.0;
      double v33 = 0.0;
    }
    unsigned int v36 = *(_DWORD *)(v5 + 4);
    double v37 = (double)v36;
    double v38 = v11 + *(double *)(v5 + 56) * (double)v36 * (double)v9;
    int v39 = v36 + 1;
    double v40 = *(double *)(v5 + 72);
    double v41 = v24 + *(double *)(v5 + 80) * v37 * (double)v9;
    double v42 = (double)(v39 * v9);
    double v43 = v38 / v42;
    double v44 = (v15 + *(double *)(v5 + 64) * v37 * (double)v9) / v42;
    *(double *)(v5 + 56) = v43;
    *(double *)(v5 + 64) = v44;
    double v45 = v41 / v42;
    double v46 = (v33 + v40 * v37 * (double)v9) / v42;
    *(double *)(v5 + 72) = v46;
    *(double *)(v5 + 80) = v45;
    double v47 = -(v45 - v43 * v43);
    if (v47 == 0.0)
    {
      unsigned int v51 = *(_DWORD *)(DerivedStorage + 24);
      unsigned int v53 = *(_DWORD *)(DerivedStorage + 28);
      double v49 = 1.79769313e308;
      double v48 = 1.79769313e308;
    }
    else
    {
      double v48 = -(v46 - v43 * v44) / v47;
      double v49 = v48 + -1.0;
      uint64_t v50 = *(void *)(DerivedStorage + 32);
      unsigned int v51 = *(_DWORD *)(DerivedStorage + 24);
      unsigned int v52 = *(_DWORD *)(DerivedStorage + 28);
      unsigned int v53 = v52 + 1;
      *(_DWORD *)(DerivedStorage + 28) = v52 + 1;
      *(double *)(v50 + 8 * (v52 % v51)) = v48 + -1.0;
    }
    if (v53 >= v51)
    {
      if (v51)
      {
        v54 = *(double **)(DerivedStorage + 32);
        uint64_t v55 = v51;
        double v56 = 0.0;
        v57 = v54;
        uint64_t v58 = v51;
        do
        {
          double v59 = *v57++;
          double v56 = v56 + v59;
          --v58;
        }
        while (v58);
        double v60 = v56 / (double)v51;
        double v61 = 0.0;
        do
        {
          double v62 = *v54++;
          double v61 = v61 + (v62 - v60) * (v62 - v60);
          --v55;
        }
        while (v55);
        double v63 = v61 / (double)v51;
      }
      else
      {
        double v60 = NAN;
        double v63 = NAN;
      }
      if (fabs(sqrt(v63) / v60) < 0.02 && fabs(v49) < 0.0002)
      {
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        FigCFDictionarySetDouble();
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterPostNotification();
        CFRelease(Mutable);
        *(_DWORD *)(v10 + 28) = 0;
        *(double *)(v10 + 56) = v48;
        int v39 = *(_DWORD *)(v5 + 4) + 1;
      }
    }
    *(_DWORD *)(v5 + 4) = v39;
    *(_DWORD *)(v5 + 48) = 0;
  }
}

uint64_t frm_preFilterFnMean(double a1, double a2)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = **(void **)(result + 16);
  uint64_t v6 = *(int *)(v5 + 48);
  CFTypeID v8 = *(double **)(v5 + 8);
  uint64_t v7 = *(double **)(v5 + 16);
  v8[v6] = a2;
  v7[v6] = a1;
  uint64_t v9 = (v6 + 1);
  *(_DWORD *)(v5 + 48) = v9;
  if (v9 == *(_DWORD *)v5)
  {
    if (v9)
    {
      double v10 = 0.0;
      uint64_t v11 = v9;
      do
      {
        double v12 = *v8++;
        double v10 = v10 + v12;
        --v11;
      }
      while (v11);
      double v13 = (double)v9;
      double v14 = 0.0;
      do
      {
        double v15 = *v7++;
        double v14 = v14 + v15;
        --v9;
      }
      while (v9);
      double v16 = v10 / v13;
      double v17 = v14 / v13;
    }
    else
    {
      double v16 = NAN;
      double v17 = NAN;
    }
    frm_processDeltaUpdate(v17, v16);
    uint64_t result = CMBaseObjectGetDerivedStorage();
    uint64_t v18 = **(void **)(result + 16);
    if (v18) {
      *(_DWORD *)(v18 + 48) = 0;
    }
  }
  return result;
}

uint64_t frm_preFilterFnMedian(double a1, double a2)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = **(void **)(result + 16);
  uint64_t v6 = *(int *)(v5 + 48);
  uint64_t v7 = *(double **)(v5 + 8);
  CFTypeID v8 = *(double **)(v5 + 16);
  v7[v6] = a2;
  v8[v6] = a1;
  unsigned int v9 = v6 + 1;
  *(_DWORD *)(v5 + 48) = v6 + 1;
  if (v6 + 1 == *(_DWORD *)v5)
  {
    if (v6 == -1)
    {
      size_t v13 = 0;
      double v10 = 0.0;
    }
    else
    {
      double v10 = 0.0;
      uint64_t v11 = (v6 + 1);
      do
      {
        double v12 = *v7++;
        double v10 = v10 + v12;
        --v11;
      }
      while (v11);
      size_t v13 = (v6 + 1);
    }
    double v14 = v10 / (double)v9;
    qsort(v8, v13, 8uLL, (int (__cdecl *)(const void *, const void *))compare);
    unsigned int v15 = v9 >> 1;
    if (v9) {
      double v16 = v8[v15];
    }
    else {
      double v16 = v8[v15 - 1] + v8[v15];
    }
    frm_processDeltaUpdate(v16, v14);
    uint64_t result = CMBaseObjectGetDerivedStorage();
    uint64_t v17 = **(void **)(result + 16);
    if (v17) {
      *(_DWORD *)(v17 + 48) = 0;
    }
  }
  return result;
}

uint64_t frm_preFilterFnRemoveOutliersLocal(double a1, double a2)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = **(void **)(result + 16);
  uint64_t v6 = *(int *)(v5 + 48);
  uint64_t v7 = *(double **)(v5 + 8);
  CFTypeID v8 = *(double **)(v5 + 16);
  v7[v6] = a2;
  v8[v6] = a1;
  uint64_t v9 = (v6 + 1);
  *(_DWORD *)(v5 + 48) = v9;
  if (v9 == *(_DWORD *)v5)
  {
    if (v9)
    {
      double v10 = 0.0;
      uint64_t v11 = v7;
      uint64_t v12 = v9;
      do
      {
        double v13 = *v11++;
        double v10 = v10 + v13;
        --v12;
      }
      while (v12);
      double v14 = (double)v9;
      double v15 = 0.0;
      double v16 = v8;
      uint64_t v17 = v9;
      do
      {
        double v18 = *v16++;
        double v15 = v15 + v18;
        --v17;
      }
      while (v17);
      uint64_t v19 = *(double **)(v5 + 24);
      int v20 = v7;
      int v21 = v19;
      uint64_t v22 = v9;
      double v23 = v10 / v14;
      do
      {
        double v24 = *v20++;
        *v21++ = v24 * v24;
        --v22;
      }
      while (v22);
      double v25 = 0.0;
      uint64_t v26 = v9;
      do
      {
        double v27 = *v19++;
        double v25 = v25 + v27;
        --v26;
      }
      while (v26);
      uint64_t v28 = *(double **)(v5 + 32);
      uint64_t v29 = v7;
      double v30 = v8;
      double v31 = v28;
      uint64_t v32 = v9;
      do
      {
        double v33 = *v29++;
        double v34 = v33;
        double v35 = *v30++;
        *v31++ = v34 * v35;
        --v32;
      }
      while (v32);
      double v36 = 0.0;
      uint64_t v37 = v9;
      do
      {
        double v38 = *v28++;
        double v36 = v36 + v38;
        --v37;
      }
      while (v37);
      double v39 = v15 / v14;
      double v40 = (-v36 / v14 + v23 * (v15 / v14)) / (-v25 / v14 + v23 * v23);
      double v41 = v39 - v40 * v23;
      double v42 = *(double **)(v5 + 40);
      double v43 = v42;
      uint64_t v44 = v9;
      do
      {
        double v45 = *v8++;
        double v46 = v45;
        double v47 = *v7++;
        *v43++ = vabdd_f64(v46, v41 + v40 * v47);
        --v44;
      }
      while (v44);
      double v48 = 0.0;
      double v49 = v42;
      uint64_t v50 = v9;
      do
      {
        double v51 = *v49++;
        double v48 = v48 + v51;
        --v50;
      }
      while (v50);
      double v52 = 0.0;
      uint64_t v53 = v9;
      double v54 = v48 / v14;
      do
      {
        double v55 = *v42++;
        double v52 = v52 + (v55 - v54) * (v55 - v54);
        --v53;
      }
      while (v53);
      unint64_t v56 = 0;
      double v57 = sqrt(v52 / v14);
      double v58 = v57 + v57;
      do
      {
        if (*(double *)(*(void *)(v5 + 40) + 8 * v56) <= v58)
        {
          frm_processDeltaUpdate(*(double *)(*(void *)(v5 + 16) + 8 * v56), *(double *)(*(void *)(v5 + 8) + 8 * v56));
          LODWORD(v9) = *(_DWORD *)v5;
        }
        ++v56;
      }
      while (v56 < v9);
    }
    uint64_t result = CMBaseObjectGetDerivedStorage();
    uint64_t v59 = **(void **)(result + 16);
    if (v59) {
      *(_DWORD *)(v59 + 48) = 0;
    }
  }
  return result;
}

uint64_t frm_preFilterFnRemoveOutliersGlobal(double a1, double a2)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = **(void **)(result + 16);
  uint64_t v6 = *(int *)(v5 + 48);
  uint64_t v7 = *(double **)(v5 + 8);
  CFTypeID v8 = *(double **)(v5 + 16);
  v7[v6] = a2;
  v8[v6] = a1;
  uint64_t v9 = (v6 + 1);
  *(_DWORD *)(v5 + 48) = v9;
  if (v9 == *(_DWORD *)v5)
  {
    double v10 = 0.0;
    if (v9)
    {
      uint64_t v11 = v7;
      uint64_t v12 = v9;
      do
      {
        double v13 = *v11++;
        double v10 = v10 + v13;
        --v12;
      }
      while (v12);
      double v14 = 0.0;
      double v15 = v8;
      uint64_t v16 = v9;
      do
      {
        double v17 = *v15++;
        double v14 = v14 + v17;
        --v16;
      }
      while (v16);
      double v18 = *(double **)(v5 + 24);
      uint64_t v19 = v7;
      int v20 = v18;
      uint64_t v21 = v9;
      do
      {
        double v22 = *v19++;
        *v20++ = v22 * v22;
        --v21;
      }
      while (v21);
      double v23 = 0.0;
      uint64_t v24 = v9;
      do
      {
        double v25 = *v18++;
        double v23 = v23 + v25;
        --v24;
      }
      while (v24);
      uint64_t v26 = *(double **)(v5 + 32);
      double v27 = v7;
      uint64_t v28 = v8;
      uint64_t v29 = v26;
      uint64_t v30 = v9;
      do
      {
        double v31 = *v27++;
        double v32 = v31;
        double v33 = *v28++;
        *v29++ = v32 * v33;
        --v30;
      }
      while (v30);
      double v34 = 0.0;
      uint64_t v35 = v9;
      do
      {
        double v36 = *v26++;
        double v34 = v34 + v36;
        --v35;
      }
      while (v35);
    }
    else
    {
      double v14 = 0.0;
      double v23 = 0.0;
      double v34 = 0.0;
    }
    unsigned int v37 = *(_DWORD *)(v5 + 4);
    double v38 = (double)v9;
    double v39 = v14 + *(double *)(v5 + 64) * (double)v37 * (double)v9;
    double v40 = *(double *)(v5 + 72);
    double v41 = v23 + *(double *)(v5 + 80) * (double)v37 * (double)v9;
    double v42 = (double)(v9 + v9 * v37);
    double v43 = (v10 + *(double *)(v5 + 56) * (double)v37 * (double)v9) / v42;
    double v44 = v39 / v42;
    *(double *)(v5 + 56) = v43;
    *(double *)(v5 + 64) = v39 / v42;
    double v45 = (v34 + v40 * (double)v37 * (double)v9) / v42;
    *(double *)(v5 + 72) = v45;
    *(double *)(v5 + 80) = v41 / v42;
    if (v9)
    {
      double v46 = -(v45 - v43 * v44) / -(v41 / v42 - v43 * v43);
      double v47 = v44 - v46 * v43;
      double v48 = *(double **)(v5 + 40);
      double v49 = v48;
      uint64_t v50 = v9;
      do
      {
        double v51 = *v8++;
        double v52 = v51;
        double v53 = *v7++;
        *v49++ = vabdd_f64(v52, v47 + v46 * v53);
        --v50;
      }
      while (v50);
      double v54 = 0.0;
      double v55 = v48;
      uint64_t v56 = v9;
      do
      {
        double v57 = *v55++;
        double v54 = v54 + v57;
        --v56;
      }
      while (v56);
      double v58 = 0.0;
      uint64_t v59 = v9;
      double v60 = v54 / v38;
      do
      {
        double v61 = *v48++;
        double v58 = v58 + (v61 - v60) * (v61 - v60);
        --v59;
      }
      while (v59);
      unint64_t v62 = 0;
      double v63 = sqrt(v58 / v38);
      double v64 = v63 + v63;
      do
      {
        if (*(double *)(*(void *)(v5 + 40) + 8 * v62) <= v64)
        {
          frm_processDeltaUpdate(*(double *)(*(void *)(v5 + 16) + 8 * v62), *(double *)(*(void *)(v5 + 8) + 8 * v62));
          LODWORD(v9) = *(_DWORD *)v5;
        }
        ++v62;
      }
      while (v62 < v9);
    }
    uint64_t result = CMBaseObjectGetDerivedStorage();
    uint64_t v65 = **(void **)(result + 16);
    if (v65) {
      *(_DWORD *)(v65 + 48) = 0;
    }
  }
  return result;
}

uint64_t compare(double *a1, double *a2)
{
  return (int)(*a1 - *a2);
}

uint64_t FigActivitySchedulerGetTypeID()
{
  MEMORY[0x19970EE10](&FigActivitySchedulerGetClassID_sRegisterFigActivitySchedulerTypeOnce, RegisterFigActivitySchedulerType);

  return CMBaseClassGetCFTypeID();
}

CFStringRef FigActivitySchedulerCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigActivityScheduler %p]", a1);
}

MACaptionAppearanceDisplayType FigMediaAccessibilityCaptionsDisplayType()
{
  return MACaptionAppearanceGetDisplayType(kMACaptionAppearanceDomainUser);
}

CFArrayRef FigMediaAccessibilityCopyPreferredLegibleCharacteristics()
{
  return MACaptionAppearanceCopyPreferredCaptioningMediaCharacteristics(kMACaptionAppearanceDomainUser);
}

CFArrayRef FigMediaAccessibilityCopyPreferredLanguages()
{
  return MACaptionAppearanceCopySelectedLanguages(kMACaptionAppearanceDomainUser);
}

__CFString *FigGetNotifyingObjectForMediaAccessibilityChanged()
{
  if (FigGetNotifyingObjectForMediaAccessibilityChanged_registerInitFigMediaAccessibiltySupportOnce != -1) {
    dispatch_once_f(&FigGetNotifyingObjectForMediaAccessibilityChanged_registerInitFigMediaAccessibiltySupportOnce, 0, (dispatch_function_t)_initFigMediaAccessibiltySupport);
  }
  return @"FigMediaAccessibilityNotification_MediaAccessibilityChanged";
}

uint64_t _initFigMediaAccessibiltySupport()
{
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterRegisterForBarrierSupport();
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterAddListener();
  CMNotificationCenterGetDefaultLocalCenter();

  return CMNotificationCenterAddListener();
}

uint64_t _mediaAccessibilityDidChangeNotificationCallback()
{
  dispatch_get_global_queue(0, 0);

  return FigDeferNotificationToDispatchQueue();
}

uint64_t _deferredMediaAccessibilityDidChangeNotificationCallback()
{
  if (FigGetNotifyingObjectForMediaAccessibilityChanged_registerInitFigMediaAccessibiltySupportOnce != -1) {
    dispatch_once_f(&FigGetNotifyingObjectForMediaAccessibilityChanged_registerInitFigMediaAccessibiltySupportOnce, 0, (dispatch_function_t)_initFigMediaAccessibiltySupport);
  }

  return CMNotificationCenterPostNotification();
}

uint64_t FigPictureCollectionWriterGetClassID()
{
  return sFigPictureCollectionWriterClassID;
}

uint64_t RegisterFigPictureCollectionWriterBaseType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t FigPictureCollectionWriterGetTypeID()
{
  MEMORY[0x19970EE10](&FigPictureCollectionWriterGetClassID_sRegisterFigPictureCollectionWriterBaseTypeOnce, RegisterFigPictureCollectionWriterBaseType);

  return CMBaseClassGetCFTypeID();
}

CFStringRef FigPictureCollectionWriterCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigPictureCollectionWriter %p]", a1);
}

uint64_t FigCaptionRendererTestingSimple()
{
  CFTypeRef cf = 0;
  uint64_t v0 = FigCaptionRendererSessionCreate(0, 0, 0, (uint64_t *)&cf);
  if (v0
    || (uint64_t v0 = (uint64_t)FigCaptionRendererSessionSetMasterClock(cf, 0), v0)
    || (uint64_t v0 = (uint64_t)FigCaptionRendererSessionSetRate(cf, 2.5), v0))
  {
    uint64_t v1 = v0;
  }
  else if (FigCaptionRendererSessionGetRate((uint64_t)cf) == 2.5)
  {
    uint64_t v1 = 0;
  }
  else
  {
    uint64_t v1 = 4294954516;
  }
  if (cf) {
    CFRelease(cf);
  }
  return v1;
}

NSObject *FigCaptionRendererTestingSetupLegible(NSObject **a1, double a2, double a3, double a4, double a5)
{
  uint64_t result = fcrTestingSetup(a1, a2, a3, a4, a5);
  if (!result)
  {
    uint64_t v7 = *a1;
    return FigCaptionRendererSessionSetLegibleOutputDevice(v7, 0, 1, 1, 0.0, 0.0, 320.0, 240.0);
  }
  return result;
}

uint64_t fcrTestingSetup(void *a1, double a2, double a3, double a4, double a5)
{
  double v14 = 0;
  uint64_t result = FigCaptionRendererSessionCreate(0, 0, 0, (uint64_t *)&v14);
  if (!result)
  {
    if (FigCaptionRendererSessionGetIsMACacheReady((uint64_t)v14)) {
      goto LABEL_10;
    }
    unsigned int v11 = 0;
    do
    {
      unsigned int v12 = v11;
      usleep(0x186A0u);
      ++v11;
      if (FigCaptionRendererSessionGetIsMACacheReady((uint64_t)v14)) {
        BOOL v13 = 1;
      }
      else {
        BOOL v13 = v12 >= 0x1D;
      }
    }
    while (!v13);
    if (v12 < 0x1D)
    {
LABEL_10:
      uint64_t result = (uint64_t)FigCaptionRendererSessionClear(v14, *MEMORY[0x1E4F1DB20], *(double *)(MEMORY[0x1E4F1DB20] + 8), *(double *)(MEMORY[0x1E4F1DB20] + 16), *(double *)(MEMORY[0x1E4F1DB20] + 24));
      if (!result)
      {
        uint64_t result = FigCaptionRendererSessionSetLayoutContext_Viewport((uint64_t)v14, a2, a3, a4, a5);
        if (!result)
        {
          uint64_t result = (uint64_t)FigCaptionRendererSessionSetLayoutContext_VideoSize(v14, a4, a5);
          if (!result)
          {
            uint64_t result = (uint64_t)FigCaptionRendererSessionSetLayoutContext_Gravity(v14, 0);
            if (!result)
            {
              uint64_t result = (uint64_t)FigCaptionRendererSessionSetLayoutContext_Overscan(v14, 0);
              if (!result) {
                *a1 = v14;
              }
            }
          }
        }
      }
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return result;
}

NSObject *FigCaptionRendererTestingSetupCGContext(NSObject **a1, double a2, double a3, double a4, double a5)
{
  uint64_t result = fcrTestingSetup(a1, a2, a3, a4, a5);
  if (!result)
  {
    uint64_t v7 = *a1;
    return FigCaptionRendererSessionSetCGContextDevice(v7, 0, 1, 1, 0.0, 0.0, 320.0, 240.0);
  }
  return result;
}

NSObject *FigCaptionRendererTestingSetupCALayer(uint64_t a1, uint64_t *a2, double a3, double a4, double a5, double a6)
{
  uint64_t result = fcrTestingSetup(a2, a3, a4, a5, a6);
  if (!result)
  {
    uint64_t result = FigCaptionRendererSessionSetCALayerDevice(*a2, a1);
    if (!result)
    {
      uint64_t result = FigCaptionRendererSessionSetMasterClock(*a2, 0);
      if (!result)
      {
        uint64_t v9 = *a2;
        return FigCaptionRendererSessionStart(v9);
      }
    }
  }
  return result;
}

uint64_t FigCaptionRendererTestingGetSampleWithLayout(NSObject *a1, uint64_t a2, void *a3)
{
  uint64_t v9 = 0;
  CFTypeRef cf = 0;
  uint64_t updated = FigCaptionRendererLayoutContextCreate(&cf);
  if (updated
    || (uint64_t updated = (uint64_t)FigCaptionRendererSessionSetCaptionSample(a1, a2, (uint64_t)cf), updated)
    || (uint64_t updated = FigCaptionRendererSessionUpdateLegibleOutputContext(a1, (uint64_t)cf), updated))
  {
    uint64_t SubtitleSample = updated;
  }
  else
  {
    uint64_t SubtitleSample = FigCaptionRendererLayoutContextGetSubtitleSample((uint64_t)cf, &v9);
    if (!SubtitleSample) {
      *a3 = v9;
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  return SubtitleSample;
}

NSObject *FigCaptionRendererTestingUpdateCGContext(NSObject *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = FigCaptionRendererSessionSetCaptionSample(a1, a2, 0);
  if (!result)
  {
    return FigCaptionRendererSessionUpdateCGContext((uint64_t)a1, a3);
  }
  return result;
}

uint64_t FigCaptionRendererTestingSetPlayer(uint64_t a1, uint64_t *a2)
{
  uint64_t result = FigPlayerFileCreate(*MEMORY[0x1E4F1CF80], a2);
  if (!result)
  {
    uint64_t v5 = *a2;
    return FigCaptionRendererSessionSetPlayer(a1, v5);
  }
  return result;
}

double FigCaptionRendererTestingGetDefaultFontSize(double a1, double a2, double a3, double a4)
{
  FCRGetOverscanSafeRect(a1, a2, a3, a4);
  return v4 * 0.15 / 3.0;
}

uint64_t setupFCR(uint64_t a1)
{
  uint64_t v2 = FigCaptionRendererSessionCreate(0, 0, 0, (uint64_t *)(a1 + 200));
  if (v2)
  {
    uint64_t v3 = v2;
    goto LABEL_6;
  }
  uint64_t v3 = FigCaptionRendererSessionSetHiddenCallback(*(void *)(a1 + 200), (uint64_t)setHiddenFCR);
  if (v3)
  {
LABEL_6:
    FigSignalErrorAt();
    return v3;
  }
  [*(id *)(a1 + 8) setHidden:1];
  id v4 = *(id *)(a1 + 8);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __setupFCR_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = a1;
  dispatch_async(MEMORY[0x1E4F14428], block);
  return v3;
}

uint64_t setupCoreTextRenderer(uint64_t a1)
{
  long long v2 = *MEMORY[0x1E4F1DB28];
  long long v3 = *(_OWORD *)(MEMORY[0x1E4F1DB28] + 16);
  *(_OWORD *)(a1 + 288) = *MEMORY[0x1E4F1DB28];
  *(_OWORD *)(a1 + 304) = v3;
  *(unsigned char *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 256) = v2;
  *(_OWORD *)(a1 + 272) = v3;
  *(void *)(a1 + 216) = 0;
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  *(void *)(a1 + 232) = Mutable;
  if (Mutable
    && (CFMutableArrayRef v6 = CFArrayCreateMutable(v4, 0, MEMORY[0x1E4F1D510]), (*(void *)(a1 + 240) = v6) != 0)
    && (CFMutableArrayRef v7 = CFArrayCreateMutable(v4, 0, MEMORY[0x1E4F1D510]), (*(void *)(a1 + 248) = v7) != 0))
  {
    uint64_t v8 = FigCoreTextSubtitleRendererCreate((uint64_t)v4, (const void **)(a1 + 208));
    if (v8) {
      FigSignalErrorAt();
    }
    return v8;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t subtitleRenderingNeedsLayoutNotification_0(uint64_t a1, void *a2)
{
  return [a2 handleNeedsLayoutNotification];
}

void releaseFCR(uint64_t a1)
{
  FigCaptionRendererSessionStop(*(void *)(a1 + 200));
  long long v2 = *(const void **)(a1 + 200);
  if (v2)
  {
    CFRelease(v2);
  }
}

void releaseCoreTextRenderer(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 170))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
  }
  if (*(void *)(a1 + 208))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    long long v2 = *(const void **)(a1 + 208);
    if (v2) {
      CFRelease(v2);
    }
  }
  CFArrayRef v3 = *(const __CFArray **)(a1 + 240);
  if (v3)
  {
    CFIndex Count = CFArrayGetCount(v3);
    if (Count >= 1)
    {
      CFIndex v5 = Count;
      for (CFIndex i = 0; i != v5; ++i)
      {
        ValueAtIndex = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 240), i);
        [ValueAtIndex removeFromSuperlayer];
      }
    }
    uint64_t v8 = *(const void **)(a1 + 240);
    if (v8) {
      CFRelease(v8);
    }
  }
  CFArrayRef v9 = *(const __CFArray **)(a1 + 248);
  if (v9)
  {
    CFIndex v10 = CFArrayGetCount(v9);
    if (v10 >= 1)
    {
      CFIndex v11 = v10;
      for (CFIndex j = 0; j != v11; ++j)
      {
        BOOL v13 = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 248), j);
        [v13 removeFromSuperlayer];
      }
    }
    double v14 = *(const void **)(a1 + 248);
    if (v14) {
      CFRelease(v14);
    }
  }
  double v15 = *(const void **)(a1 + 232);
  if (v15) {
    CFRelease(v15);
  }
  uint64_t v16 = *(const void **)(a1 + 216);
  if (v16)
  {
    CFRelease(v16);
  }
}

void sub_194220D34(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void __Block_byref_object_copy__3(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose__3(uint64_t a1)
{
}

void getLayoutForAnimation(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6)
{
  CFMutableArrayRef v7 = *(NSObject **)(a1 + 176);
  if (v7)
  {
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 3221225472;
    v8[2] = __getLayoutForAnimation_block_invoke;
    v8[3] = &__block_descriptor_80_e5_v8__0l;
    v8[4] = a1;
    *(double *)&v8[5] = a3;
    *(double *)&v8[6] = a4;
    *(double *)&v8[7] = a5;
    *(double *)&v8[8] = a6;
    v8[9] = a2;
    dispatch_sync(v7, v8);
  }
}

void sub_194221478(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void updateSubtitleDisplay(uint64_t a1, char a2)
{
  id v4 = *(id *)(a1 + 8);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = __updateSubtitleDisplay_block_invoke;
  v5[3] = &__block_descriptor_41_e5_v8__0l;
  v5[4] = a1;
  char v6 = a2;
  dispatch_async(MEMORY[0x1E4F14428], v5);
}

unsigned __int8 *updateNonForcedSubtitleDisplayEnabledDo(unsigned __int8 *result)
{
  uint64_t v1 = *(void *)result;
  int v2 = *(unsigned __int8 *)(*(void *)result + 168);
  int v3 = result[8];
  if (v2 != v3)
  {
    *(unsigned char *)(v1 + 168) = v3;
    int v2 = v3;
  }
  if (*(_DWORD *)(v1 + 184) == 1) {
    *(unsigned char *)(v1 + 171) = (*(unsigned __int8 *)(v1 + 224) | v2) == 0;
  }
  return result;
}

void setHiddenFCR(char a1, uint64_t a2)
{
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 3221225472;
  v2[2] = __setHiddenFCR_block_invoke;
  v2[3] = &unk_1E5795710;
  v2[4] = a2;
  char v3 = a1;
  dispatch_async(MEMORY[0x1E4F14428], v2);
}

void __setupFCR_block_invoke(uint64_t a1)
{
  [MEMORY[0x1E4F39CF8] begin];
  [MEMORY[0x1E4F39CF8] setDisableActions:1];
  FigCaptionRendererSessionSetCALayerDevice(*(void *)(*(void *)(a1 + 32) + 200), *(void *)(*(void *)(a1 + 32) + 8));
  [MEMORY[0x1E4F39CF8] commit];
  int v2 = *(void **)(*(void *)(a1 + 32) + 8);
}

uint64_t __setHiddenFCR_block_invoke(uint64_t a1)
{
  [MEMORY[0x1E4F39CF8] begin];
  [*(id *)(a1 + 32) setHidden:*(unsigned __int8 *)(a1 + 40)];
  int v2 = (void *)MEMORY[0x1E4F39CF8];

  return [v2 commit];
}

void subtitleChangedCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5)
{
  if (a5) {
    digestSubtitleSample(0, a2, a5);
  }
}

void digestSubtitleSample(int a1, uint64_t a2, CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  v7[0] = a2;
  v7[1] = (uint64_t)cf;
  if (a1)
  {
    digestSubtitleSampleDo_0(v7);
  }
  else
  {
    char v6 = *(NSObject **)(a2 + 176);
    if (v6) {
      dispatch_sync_f(v6, v7, (dispatch_function_t)digestSubtitleSampleDo_0);
    }
  }
  updateSubtitleDisplay(a2, 1);
}

void digestSubtitleSampleDo_0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  CFDictionaryRef v1 = (const __CFDictionary *)a1[1];
  CFDictionaryRef theDict = 0;
  __int16 v33 = 0;
  CGFloat v3 = *(double *)(v2 + 48);
  CGFloat v4 = *(double *)(v2 + 56) * 0.15;
  CFTypeRef cf = 0;
  if (!FigSubtitleSampleCreateFromPropertyListAndInsertInfoForRenderer(v1, &theDict, (unsigned char *)&v33 + 1, 0.0, 0.0, v3, v4))
  {
    CFDictionaryRef v5 = theDict;
    if (theDict)
    {
      CMTimeValue value = 0;
      int ValueIfPresent = CFDictionaryGetValueIfPresent(theDict, @"SubtitleOverHDRVideo", (const void **)&value);
      uint64_t v7 = *(void *)(v2 + 8);
      if (ValueIfPresent) {
        BOOL v8 = value == (void *)*MEMORY[0x1E4F1CFD0];
      }
      else {
        BOOL v8 = 0;
      }
      char v9 = v8;
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = __digestSubtitleSampleDo_block_invoke;
      block[3] = &unk_1E5795710;
      block[4] = v7;
      char v31 = v9;
      dispatch_async(MEMORY[0x1E4F14428], block);
      CFDictionaryRef v5 = theDict;
    }
    FigSubtitleRendererDetachRegionInfo(v5, (CFDictionaryRef *)&cf, (BOOL *)&v33);
    if (cf)
    {
      FigSubtitleRendererPatchRegionInfo(*(const __CFDictionary **)(v2 + 232), (CFDictionaryRef)cf);
      CFDictionaryRef v10 = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(v2 + 232), (const void *)*MEMORY[0x1E4F1F818]);
      CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, v10);
      if (MutableCopy)
      {
        CFDictionaryRef v12 = MutableCopy;
        CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(v2 + 240));
        if (Count >= 1)
        {
          CFIndex v14 = Count;
          for (CFIndex i = 0; i < v14; ++i)
          {
            ValueAtIndex = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v2 + 240), i);
            double v17 = (const void *)[ValueAtIndex getContentID];
            double v18 = CFDictionaryGetValue(v12, v17);
            if (v18)
            {
              [ValueAtIndex setContent:v18];
              CFDictionaryRemoveValue(v12, v17);
            }
            else
            {
              CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v2 + 240), i);
              CFArrayAppendValue(*(CFMutableArrayRef *)(v2 + 248), ValueAtIndex);
              [MEMORY[0x1E4F39CF8] begin];
              if (!pthread_main_np()) {
                [MEMORY[0x1E4F39CF8] activateBackground:1];
              }
              [MEMORY[0x1E4F39CF8] setDisableActions:1];
              [ValueAtIndex setHidden:1];
              [MEMORY[0x1E4F39CF8] commit];
              --v14;
              --i;
            }
          }
        }
        size_t v19 = CFDictionaryGetCount(v12);
        if (v19)
        {
          int64_t v20 = v19;
          uint64_t v21 = (const void **)malloc_type_calloc(v19, 8uLL, 0xC0040B8AA526DuLL);
          double v22 = (const void **)malloc_type_calloc(v20, 8uLL, 0xC0040B8AA526DuLL);
          CFDictionaryGetKeysAndValues(v10, v21, v22);
          if (v20 < 1)
          {
LABEL_25:
            free(v21);
            free(v22);
          }
          else
          {
            double v23 = v22;
            while (1)
            {
              uint64_t v24 = objc_alloc_init(FigSubtitleWebVTTRegionCALayer);
              if (!v24) {
                break;
              }
              double v25 = v24;
              [*(id *)(v2 + 8) addSublayer:v24];
              CFArrayAppendValue(*(CFMutableArrayRef *)(v2 + 240), v25);
              [(FigSubtitleWebVTTRegionCALayer *)v25 setRenderer:*(void *)(v2 + 208)];
              [(FigSubtitleWebVTTRegionCALayer *)v25 setViewport:FCRGetVideoPresentationBounds(*(double *)(v2 + 48), *(double *)(v2 + 56), *(double *)(v2 + 16), *(double *)(v2 + 24), *(double *)(v2 + 32), *(double *)(v2 + 40))];
              uint64_t v26 = (uint64_t)*v23++;
              [(FigSubtitleWebVTTRegionCALayer *)v25 setContent:v26];
              if (!--v20) {
                goto LABEL_25;
              }
            }
          }
        }
        CFRelease(v12);
      }
    }
    else
    {
      CFIndex v27 = CFArrayGetCount(*(CFArrayRef *)(v2 + 240));
      if (v27 >= 1)
      {
        unint64_t v28 = v27 + 1;
        do
        {
          uint64_t v29 = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v2 + 240), 0);
          CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v2 + 240), 0);
          CFArrayAppendValue(*(CFMutableArrayRef *)(v2 + 248), v29);
          [MEMORY[0x1E4F39CF8] begin];
          if (!pthread_main_np()) {
            [MEMORY[0x1E4F39CF8] activateBackground:1];
          }
          [MEMORY[0x1E4F39CF8] setDisableActions:1];
          [v29 setHidden:1];
          [MEMORY[0x1E4F39CF8] commit];
          --v28;
        }
        while (v28 > 1);
      }
    }
    if (cf) {
      CFRelease(cf);
    }
    if ((_BYTE)v33)
    {
      CMTimeValue value = (void *)v2;
      uint64_t v36 = 1;
      BYTE1(v36) = HIBYTE(v33);
      CFDictionaryRef v37 = theDict;
      uint64_t v38 = 0;
    }
    else
    {
      CFDictionaryRef v37 = 0;
      uint64_t v38 = 0;
      CMTimeValue value = (void *)v2;
      uint64_t v36 = 1;
      BYTE1(v36) = HIBYTE(v33);
    }
    updateSubtitleDo((uint64_t *)&value);
    if (theDict) {
      CFRelease(theDict);
    }
  }
  if (v1) {
    CFRelease(v1);
  }
}

uint64_t __digestSubtitleSampleDo_block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) updateHDRContentState:*(unsigned __int8 *)(a1 + 40)];
}

void updateSubtitleDo(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *(unsigned char *)(v2 + 224) = *((unsigned char *)a1 + 9);
  CGFloat v3 = *(const void **)(v2 + 216);
  CGFloat v4 = (const void *)a1[2];
  *(void *)(v2 + 216) = v4;
  if (v4) {
    CFRetain(v4);
  }
  if (v3) {
    CFRelease(v3);
  }
  if (*((unsigned char *)a1 + 8))
  {
    long long v5 = *(_OWORD *)(MEMORY[0x1E4F1DB28] + 16);
    *(_OWORD *)(v2 + 256) = *MEMORY[0x1E4F1DB28];
    *(_OWORD *)(v2 + 272) = v5;
  }
  BOOL v6 = !*(unsigned char *)(v2 + 224) && !*(unsigned char *)(v2 + 168);
  *(unsigned char *)(v2 + 171) = v6;
}

double __getLayoutForAnimation_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  long long v3 = *(_OWORD *)(v2 + 32);
  long long v11 = *(_OWORD *)(v2 + 16);
  long long v12 = v3;
  long long v4 = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 32) = v4;
  char v10 = 0;
  unint64_t v5 = *(void *)(a1 + 32);
  unint64_t v6 = *(void *)(a1 + 72);
  int v14 = 0;
  v13[0] = v5;
  v13[1] = 0;
  v13[2] = v6;
  v13[3] = (unint64_t)&v10;
  v13[4] = (unint64_t)&v14;
  getSuggestedLayoutDo(v13);
  uint64_t v7 = *(void *)(a1 + 32);
  double result = *(double *)&v11;
  long long v9 = v12;
  *(_OWORD *)(v7 + 16) = v11;
  *(_OWORD *)(v7 + 32) = v9;
  return result;
}

void getSuggestedLayout(int a1, unint64_t a2, unsigned __int8 a3, unint64_t a4, unint64_t a5)
{
  int v7 = 0;
  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  v6[3] = a5;
  v6[4] = (unint64_t)&v7;
  if (a1)
  {
    getSuggestedLayoutDo(v6);
  }
  else
  {
    unint64_t v5 = *(NSObject **)(a2 + 176);
    if (v5) {
      dispatch_sync_f(v5, v6, (dispatch_function_t)getSuggestedLayoutDo);
    }
  }
}

void getSuggestedLayoutDo(unint64_t *a1)
{
  unint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(MEMORY[0x1E4F1DB28] + 16);
  long long v37 = *MEMORY[0x1E4F1DB28];
  long long v38 = v3;
  long long v4 = *(_OWORD *)(v2 + 32);
  long long v31 = *(_OWORD *)(v2 + 16);
  long long v32 = v4;
  long long v33 = *(_OWORD *)(v2 + 48);
  FCRGetTransform((uint64_t)&v19, *(double *)(v2 + 48), *(double *)(v2 + 56), *(double *)(v2 + 32), *(double *)(v2 + 40));
  long long v34 = v19;
  long long v35 = v20;
  long long v36 = v21;
  char v5 = *(unsigned char *)(v2 + 64);
  double v6 = 1.0;
  if (*(unsigned char *)(v2 + 169))
  {
    int v7 = (void *)[*(id *)(v2 + 8) getLayerDisplay];
    if ([v7 isOverscanned])
    {
      [v7 overscanAmount];
      double v6 = v8;
    }
  }
  int v9 = [*(id *)(v2 + 8) contentsAreFlipped];
  CFTypeRef cf = 0;
  uint64_t v11 = *(void *)(v2 + 208);
  uint64_t v10 = *(void *)(v2 + 216);
  long long v21 = v33;
  long long v22 = v34;
  long long v23 = v35;
  long long v24 = v36;
  long long v19 = v31;
  long long v20 = v32;
  char v25 = v5;
  __int16 v26 = 0;
  char v27 = 0;
  double v28 = v6;
  int v29 = v9;
  *(_DWORD *)a1[4] = FigSubtitleRendererLayout(v11, v10, &v19, (uint64_t)&v37, (uint64_t)&cf);
  if (*((unsigned char *)a1 + 8))
  {
    long long v12 = v38;
    *(_OWORD *)(v2 + 288) = v37;
    *(_OWORD *)(v2 + 304) = v12;
  }
  double v13 = *(double *)(v2 + 280);
  if (v13 <= 0.0
    || (double v14 = *(double *)(v2 + 272), v14 <= 0.0)
    || fabs((*(double *)(v2 + 304) - v14) / v14) >= 0.02
    || fabs((*(double *)(v2 + 312) - v13) / v13) >= 0.02)
  {
    *(unsigned char *)a1[3] = 1;
    if (*((unsigned char *)a1 + 8))
    {
      long long v15 = v38;
      *(_OWORD *)(v2 + 256) = v37;
      *(_OWORD *)(v2 + 272) = v15;
      char v16 = *(unsigned char *)(v2 + 224);
      long long v19 = v2;
      BYTE9(v19) = v16;
      long long v20 = (unint64_t)cf;
      updateSubtitleDo((uint64_t *)&v19);
    }
  }
  else
  {
    *(unsigned char *)a1[3] = 0;
  }
  double v17 = (_OWORD *)a1[2];
  long long v18 = v38;
  *double v17 = v37;
  v17[1] = v18;
  if (cf) {
    CFRelease(cf);
  }
}

void __updateSubtitleDisplay_block_invoke(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 32);
  int v3 = *(unsigned __int8 *)(a1 + 40);
  unsigned __int8 v13 = 0;
  long long v4 = *(_OWORD *)(MEMORY[0x1E4F1DB28] + 16);
  v12[0] = *MEMORY[0x1E4F1DB28];
  v12[1] = v4;
  uint64_t v8 = 0;
  int v9 = &v8;
  uint64_t v10 = 0x2020000000;
  int v5 = 1;
  char v11 = 1;
  double v6 = *(NSObject **)(v2 + 176);
  if (v6)
  {
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    uint64_t v7[2] = __updateSubtitleDisplayDoAsync_block_invoke;
    v7[3] = &unk_1E5794640;
    v7[4] = &v8;
    v7[5] = v2;
    dispatch_sync(v6, v7);
    int v5 = *((unsigned __int8 *)v9 + 24);
  }
  if (v5 != [*(id *)(v2 + 8) isHidden])
  {
    [MEMORY[0x1E4F39CF8] begin];
    if (!pthread_main_np()) {
      [MEMORY[0x1E4F39CF8] activateBackground:1];
    }
    [*(id *)(v2 + 8) setHidden:*((unsigned char *)v9 + 24) != 0];
    [MEMORY[0x1E4F39CF8] commit];
  }
  if (([*(id *)(v2 + 8) isHidden] & 1) == 0)
  {
    getSuggestedLayout(0, v2, 1u, (unint64_t)v12, (unint64_t)&v13);
    [MEMORY[0x1E4F39CF8] begin];
    if (!pthread_main_np()) {
      [MEMORY[0x1E4F39CF8] activateBackground:1];
    }
    [MEMORY[0x1E4F39CF8] setDisableActions:1];
    [*(id *)(v2 + 8) setNeedsLayout];
    if (v13 | v3) {
      [*(id *)(v2 + 8) setNeedsDisplay];
    }
    [MEMORY[0x1E4F39CF8] commit];
  }
  _Block_object_dispose(&v8, 8);
}

void sub_194222DD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __updateSubtitleDisplayDoAsync_block_invoke(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(unsigned char *)(*(void *)(result + 40) + 171);
  return result;
}

uint64_t FigMetadataWriterGetClassID()
{
  return sFigMetadataWriterClassID;
}

uint64_t RegisterFigMetadataWriterBaseType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t FigMetadataWriterGetCFTypeID()
{
  MEMORY[0x19970EE10](&FigMetadataWriterGetClassID_sRegisterFigMetadataWriterBaseTypeOnce, RegisterFigMetadataWriterBaseType);

  return CMBaseClassGetCFTypeID();
}

CFTypeRef FigMetadataWriterRetain(CFTypeRef cf)
{
  if (cf) {
    return CFRetain(cf);
  }
  return cf;
}

void FigMetadataWriterRelease(CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

CFStringRef FigMetadataWriterBaseCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigMetadataWriter %p]", a1);
}

uint64_t FigCreateCGImageFromPixelBufferWithDynamicRangeConversion(CVPixelBufferRef pixelBuffer, int a2, int a3, CGImageRef *imageOut)
{
  if (!a2 || !a3)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      CFDictionaryRef v9 = Mutable;
      if (a2)
      {
        if (a3)
        {
LABEL_6:
          uint64_t v10 = VTCreateCGImageFromCVPixelBuffer(pixelBuffer, v9, imageOut);
          CFRelease(v9);
          return v10;
        }
      }
      else
      {
        CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F447B0], (const void *)*MEMORY[0x1E4F1CFC8]);
        if (a3) {
          goto LABEL_6;
        }
      }
      CFDictionaryAddValue(v9, (const void *)*MEMORY[0x1E4F447C0], (const void *)*MEMORY[0x1E4F1CFC8]);
      goto LABEL_6;
    }
  }

  return VTCreateCGImageFromCVPixelBuffer(pixelBuffer, 0, imageOut);
}

uint64_t FigCreateCGImageFromIOSurfaceAndAttributes()
{
  return MEMORY[0x1F4103198]();
}

uint64_t FigShareAndAirPlayHelperLocalGetShared()
{
  if (FigShareAndAirPlayHelperLocalGetShared_onceToken != -1) {
    dispatch_once(&FigShareAndAirPlayHelperLocalGetShared_onceToken, &__block_literal_global_27);
  }
  return FigShareAndAirPlayHelperLocalGetShared_sSharedHelper;
}

void __FigShareAndAirPlayHelperLocalGetShared_block_invoke()
{
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  FigShareAndAirPlayHelperGetClassID();
  if (!CMDerivedObjectCreate())
  {
    FigNote_AllowInternalDefaultLogs();
    fig_note_initialize_category_with_default_work_cf();
    fig_note_initialize_category_with_default_work_cf();
    uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
    DerivedStorage[1] = dispatch_queue_create("FigShareAndAirPlayHelperLocal.queue", 0);
    *uint64_t DerivedStorage = CFSetCreateMutable(v0, 0, 0);
    uint64_t v4 = 0;
    int v5 = &v4;
    uint64_t v6 = 0x3052000000;
    int v7 = __Block_byref_object_copy__4;
    uint64_t v8 = __Block_byref_object_dispose__4;
    unint64_t v2 = (void *)getTUCallCenterClass_softClass;
    uint64_t v9 = getTUCallCenterClass_softClass;
    if (!getTUCallCenterClass_softClass)
    {
      v3[0] = MEMORY[0x1E4F143A8];
      v3[1] = 3221225472;
      v3[2] = __getTUCallCenterClass_block_invoke;
      v3[3] = &unk_1E57982D0;
      v3[4] = &v4;
      __getTUCallCenterClass_block_invoke((uint64_t)v3);
      unint64_t v2 = (void *)v5[5];
    }
    _Block_object_dispose(&v4, 8);
    DerivedStorage[2] = objc_msgSend((id)objc_msgSend(v2, "sharedInstance"), "conversationManager");
    FigShareAndAirPlayHelperLocalGetShared_sSharedHelper = 0;
  }
}

void sub_194223258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t localHelper_SetEnableEchoMitigation(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a3)
  {
    uint64_t v6 = *(NSObject **)(DerivedStorage + 8);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __localHelper_SetEnableEchoMitigation_block_invoke;
    block[3] = &__block_descriptor_49_e5_v8__0l;
    char v9 = a2;
    block[4] = DerivedStorage;
    void block[5] = a3;
    dispatch_async(v6, block);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void __Block_byref_object_copy__4(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose__4(uint64_t a1)
{
}

Class __getTUCallCenterClass_block_invoke(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!TelephonyUtilitiesLibraryCore_frameworkLibrary)
  {
    v3[1] = (void *)MEMORY[0x1E4F143A8];
    v3[2] = (void *)3221225472;
    v3[3] = __TelephonyUtilitiesLibraryCore_block_invoke;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_1E57982F0;
    uint64_t v5 = 0;
    TelephonyUtilitiesLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!TelephonyUtilitiesLibraryCore_frameworkLibrary) {
    __getTUCallCenterClass_block_invoke_cold_1(v3);
  }
  if (v3[0]) {
    free(v3[0]);
  }
  Class result = objc_getClass("TUCallCenter");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getTUCallCenterClass_block_invoke_cold_2();
  }
  getTUCallCenterClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t __TelephonyUtilitiesLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  TelephonyUtilitiesLibraryCore_frameworkLibrary = result;
  return result;
}

uint64_t FigMetadataSerializerGetCFTypeID()
{
  MEMORY[0x19970EE10](&FigMetadataSerializerGetClassID_sRegisterFigMetadataSerializerBaseTypeOnce, RegisterFigMetadataSerializerBaseType);

  return CMBaseClassGetCFTypeID();
}

CFTypeRef FigMetadataSerializerRetain(CFTypeRef cf)
{
  if (cf) {
    return CFRetain(cf);
  }
  return cf;
}

CFStringRef FigMetadataSerializerBaseCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigMetadataSerializer %p]", a1);
}

uint64_t FigMetadataSerializerCreateUserDataCommon(uint64_t a1, char a2, void *a3)
{
  if (a3)
  {
    FigMetadataSerializerGetClassID();
    uint64_t v5 = CMDerivedObjectCreate();
    if (!v5)
    {
      *(unsigned char *)(CMBaseObjectGetDerivedStorage() + 16) = a2;
      *a3 = 0;
    }
    return v5;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigMetadataSerializerCreateForISOUserData(uint64_t a1, void *a2)
{
  return FigMetadataSerializerCreateUserDataCommon(a1, 0, a2);
}

uint64_t FigISOUserDataCreateItemDataFromText(const __CFAllocator *a1, uint64_t a2, int a3, const __CFLocale *a4, __CFData **a5)
{
  CFIndex length = 0;
  *(_DWORD *)bytes = 0;
  if (!a2 || !a5 || a3 != 134217984 && a3 != 268435712)
  {
    return FigSignalErrorAt();
  }
  __int16 v14 = __rev16(FigMetadataGetPackedISO639_2TFromLocale(a4));
  uint64_t BytesFromCFString = FigCreateBytesFromCFString();
  if (!BytesFromCFString) {
    return FigSignalErrorAt();
  }
  char v9 = (UInt8 *)BytesFromCFString;
  CFMutableDictionaryRef Mutable = CFDataCreateMutable(a1, 0);
  CFDataAppendBytes(Mutable, bytes, 6);
  if (a3 == 268435712)
  {
    *(_WORD *)long long v12 = -2;
    CFDataAppendBytes(Mutable, v12, 2);
  }
  CFDataAppendBytes(Mutable, v9, length);
  *a5 = Mutable;
  CFAllocatorDeallocate(a1, v9);
  return 0;
}

__CFString *FigUserDataSerializerCopyDebugDescription()
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    uint64_t v2 = DerivedStorage;
    CFStringAppendFormat(Mutable, 0, @" FigUserDataSerializer %p\n", DerivedStorage);
    CFStringAppendFormat(Mutable, 0, @"  - free atom size: %d\n", *(unsigned int *)(v2 + 8));
    CFStringAppendFormat(Mutable, 0, @"  - minimum container size: %d\n", *(unsigned int *)(v2 + 12));
    CFStringAppendFormat(Mutable, 0, @"%@", *(void *)v2);
  }
  else
  {
    FigSignalErrorAt();
  }
  return Mutable;
}

uint64_t FigUserDataSerializerCopyProperty(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    uint64_t v7 = DerivedStorage;
    if (CFEqual(a2, @"freeAtomSize"))
    {
      CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      char v9 = (const void *)(v7 + 8);
LABEL_6:
      uint64_t v10 = CFNumberCreate(v8, kCFNumberSInt32Type, v9);
LABEL_7:
      char v11 = v10;
      uint64_t result = 0;
      *a4 = v11;
      return result;
    }
    if (CFEqual(a2, @"minimumSize"))
    {
      CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      char v9 = (const void *)(v7 + 12);
      goto LABEL_6;
    }
    if (CFEqual(a2, @"format"))
    {
      uint64_t v10 = (void *)CFRetain(@"com.apple.quicktime.udta");
      goto LABEL_7;
    }
    return 4294954512;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigUserDataSerializerAddItem(const void *a1, const void *a2, __CFString *a3, const void *a4, const __CFDictionary *a5)
{
  unsigned int v33 = 0;
  CFTypeRef cf = 0;
  CMTimeValue value = 0;
  key = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage || !a2 || !a3 || !a4) {
    goto LABEL_38;
  }
  uint64_t v11 = DerivedStorage;
  uint64_t ActualKey = FigUserDataCreateActualKey(a1, a2, a3, (unint64_t)&v33, (unint64_t)&key);
  if (ActualKey)
  {
LABEL_39:
    uint64_t NewItem = ActualKey;
    goto LABEL_40;
  }
  if (!*(unsigned char *)(v11 + 16))
  {
    if ((int)v33 > 1970430323)
    {
      if (v33 == 2037543523 || v33 == 1970430324)
      {
        CFTypeID v13 = CFGetTypeID(a4);
        CFTypeID TypeID = CFNumberGetTypeID();
        goto LABEL_25;
      }
    }
    else
    {
      if (v33 == 1684108389) {
        goto LABEL_18;
      }
      if (v33 == 1952540515)
      {
LABEL_16:
        CFTypeID v13 = CFGetTypeID(a4);
        goto LABEL_17;
      }
    }
    int IsISOText = FigISOUserDataWeKnowIsISOText(v33);
    CFTypeID v13 = CFGetTypeID(a4);
    if (!IsISOText) {
      goto LABEL_24;
    }
LABEL_17:
    CFTypeID TypeID = CFStringGetTypeID();
    goto LABEL_25;
  }
  if (v33 == 1952540515 || v33 == 1851878757) {
    goto LABEL_16;
  }
  if (v33 != -1453039239)
  {
    if (HIBYTE(v33) != 169 && !FigUserDataWeKnowIsISOText(v33))
    {
      CFTypeID v13 = CFGetTypeID(a4);
LABEL_24:
      CFTypeID TypeID = CFDataGetTypeID();
      goto LABEL_25;
    }
    goto LABEL_16;
  }
LABEL_18:
  CFTypeID v15 = CFGetTypeID(a4);
  if (v15 == CFStringGetTypeID()) {
    goto LABEL_26;
  }
  CFTypeID v13 = CFGetTypeID(a4);
  CFTypeID TypeID = CFDateGetTypeID();
LABEL_25:
  if (v13 != TypeID)
  {
LABEL_38:
    uint64_t ActualKey = FigSignalErrorAt();
    goto LABEL_39;
  }
LABEL_26:
  CFDictionaryRef Mutable = *(const __CFDictionary **)v11;
  if (!*(void *)v11)
  {
    CFAllocatorRef v18 = CFGetAllocator(a1);
    CFDictionaryRef Mutable = CFDictionaryCreateMutable(v18, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    *(void *)uint64_t v11 = Mutable;
    if (!Mutable) {
      goto LABEL_38;
    }
  }
  if (!CFDictionaryGetValueIfPresent(Mutable, key, (const void **)&value))
  {
    uint64_t NewItem = FigUserDataCreateNewItem(a1, a4, a5, (__CFDictionary **)&cf);
    if (!NewItem)
    {
      CFTypeRef v26 = cf;
      CFDictionarySetValue(*(CFMutableDictionaryRef *)v11, key, cf);
      if (!v26) {
        goto LABEL_42;
      }
LABEL_41:
      CFRelease(v26);
      goto LABEL_42;
    }
LABEL_40:
    CFTypeRef v26 = cf;
    if (!cf) {
      goto LABEL_42;
    }
    goto LABEL_41;
  }
  CFTypeID v19 = CFGetTypeID(value);
  if (v19 == CFDictionaryGetTypeID())
  {
    CFDictionaryRef v20 = (const __CFDictionary *)value;
    if (FigCFEqual() && FigQTUserDataPropertiesIndicateSameLanguageCode(v20, a5))
    {
LABEL_37:
      uint64_t NewItem = 0;
      goto LABEL_40;
    }
    uint64_t ActualKey = FigUserDataCreateNewItem(a1, a4, a5, (__CFDictionary **)&cf);
    if (ActualKey) {
      goto LABEL_39;
    }
    CFAllocatorRef v21 = CFGetAllocator(a1);
    long long v22 = CFArrayCreateMutable(v21, 0, MEMORY[0x1E4F1D510]);
    if (v22)
    {
      long long v23 = v22;
      CFArrayAppendValue(v22, v20);
      CFTypeRef v24 = cf;
      CFArrayAppendValue(v23, cf);
      CFDictionarySetValue(*(CFMutableDictionaryRef *)v11, key, v23);
      if (v24)
      {
        CFRelease(v24);
        CFTypeRef cf = 0;
      }
      CFRelease(v23);
      goto LABEL_37;
    }
    goto LABEL_38;
  }
  if (FigCFEqual() && CFArrayGetCount((CFArrayRef)value) >= 1)
  {
    CFIndex v28 = 0;
    do
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)value, v28);
      if (FigQTUserDataPropertiesIndicateSameLanguageCode(ValueAtIndex, a5)) {
        goto LABEL_37;
      }
    }
    while (++v28 < CFArrayGetCount((CFArrayRef)value));
  }
  uint64_t NewItem = FigUserDataCreateNewItem(a1, a4, a5, (__CFDictionary **)&cf);
  if (NewItem) {
    goto LABEL_40;
  }
  CFTypeRef v26 = cf;
  CFArrayAppendValue((CFMutableArrayRef)value, cf);
  if (v26) {
    goto LABEL_41;
  }
LABEL_42:
  if (key) {
    CFRelease(key);
  }
  return NewItem;
}

uint64_t FigUserDataSerializerContainsKey(const void *a1, const void *a2, __CFString *a3)
{
  key = 0;
  uint64_t DerivedStorage = (CFDictionaryRef *)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage || !a2 || !a3)
  {
    FigSignalErrorAt();
    return 0;
  }
  uint64_t v7 = DerivedStorage;
  if (!*DerivedStorage) {
    return 0;
  }
  int ActualKey = FigUserDataCreateActualKey(a1, a2, a3, 0, (unint64_t)&key);
  char v9 = key;
  if (ActualKey)
  {
    uint64_t v10 = 0;
    if (!key) {
      return v10;
    }
    goto LABEL_7;
  }
  uint64_t v10 = CFDictionaryContainsKey(*v7, key);
  char v9 = key;
  if (key) {
LABEL_7:
  }
    CFRelease(v9);
  return v10;
}

uint64_t FigUserDataCreateActualKey(const void *a1, const void *a2, __CFString *a3, unint64_t a4, unint64_t a5)
{
  unsigned int valuePtr = 0;
  CFArrayRef theArray = 0;
  CFAllocatorRef v9 = CFGetAllocator(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!(a4 | a5)) {
    goto LABEL_32;
  }
  uint64_t v11 = DerivedStorage;
  if (CFEqual(a2, @"comn"))
  {
    CFTypeID v12 = CFGetTypeID(a3);
    if (v12 == CFStringGetTypeID())
    {
      if (*(unsigned char *)(v11 + 16)) {
        uint64_t v13 = FigUserDataCopyOSTypeKeysFromCommonKey(a3, &theArray);
      }
      else {
        uint64_t v13 = FigISOUserDataCopyOSTypeKeysFromCommonKey(a3, &theArray);
      }
      uint64_t v15 = v13;
      if (v13) {
        goto LABEL_33;
      }
      if (theArray)
      {
        unsigned int ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0);
        unsigned int v17 = bswap32(ValueAtIndex);
        uint64_t v18 = HIBYTE(v17);
        unsigned int valuePtr = ValueAtIndex;
LABEL_15:
        CFTypeID v19 = (void *)CFStringCreateWithFormat(v9, 0, @"%c%c%c%c", v17, BYTE1(v17), BYTE2(v17), v18);
        goto LABEL_16;
      }
    }
    goto LABEL_32;
  }
  if (*(unsigned char *)(v11 + 16))
  {
    if (CFEqual(a2, @"udta"))
    {
      CFTypeID v14 = CFGetTypeID(a3);
      if (v14 != CFStringGetTypeID())
      {
        CFTypeID v22 = CFGetTypeID(a3);
        if (v22 == CFNumberGetTypeID() && CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, &valuePtr))
        {
          unsigned int v17 = bswap32(valuePtr);
          uint64_t v18 = HIBYTE(v17);
          goto LABEL_15;
        }
LABEL_32:
        uint64_t v15 = FigSignalErrorAt();
        goto LABEL_33;
      }
      if (!FigUserDataStringKeyToOSTypeKey(a3, &valuePtr)) {
        goto LABEL_32;
      }
      goto LABEL_24;
    }
    if (*(unsigned char *)(v11 + 16)) {
      goto LABEL_32;
    }
  }
  if (!CFEqual(a2, @"uiso")) {
    goto LABEL_32;
  }
  CFTypeID v21 = CFGetTypeID(a3);
  if (v21 == CFStringGetTypeID())
  {
    if (!FigISOUserDataStringKeyToOSTypeKey(a3, &valuePtr)) {
      goto LABEL_32;
    }
LABEL_24:
    CFTypeID v19 = (void *)CFRetain(a3);
    goto LABEL_16;
  }
  CFTypeID v23 = CFGetTypeID(a3);
  if (v23 != CFNumberGetTypeID() || !CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, &valuePtr)) {
    goto LABEL_32;
  }
  CFTypeID v19 = (void *)FigUserDataCFStringCreateFromOSType(v9, valuePtr);
LABEL_16:
  CFDictionaryRef v20 = v19;
  if (a4) {
    *(_DWORD *)a4 = valuePtr;
  }
  uint64_t v15 = 0;
  if (a5)
  {
    *(void *)a5 = v19;
LABEL_33:
    CFDictionaryRef v20 = 0;
  }
  if (theArray) {
    CFRelease(theArray);
  }
  if (v20) {
    CFRelease(v20);
  }
  return v15;
}

BOOL FigQTUserDataPropertiesIndicateSameLanguageCode(const __CFDictionary *a1, const __CFDictionary *a2)
{
  __int16 v7 = 0;
  BOOL PackedLanguageCodeFromProperties = FigQTUserDataGetPackedLanguageCodeFromProperties(a1, &v7);
  __int16 v6 = 0;
  BOOL v4 = FigQTUserDataGetPackedLanguageCodeFromProperties(a2, &v6);
  BOOL result = 0;
  if (PackedLanguageCodeFromProperties && v4) {
    return v7 == v6;
  }
  return result;
}

uint64_t FigUserDataCreateNewItem(const void *a1, const void *a2, const __CFDictionary *a3, __CFDictionary **a4)
{
  CFAllocatorRef v7 = CFGetAllocator(a1);
  if (a3) {
    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(v7, 0, a3);
  }
  else {
    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  }
  CFAllocatorRef v9 = MutableCopy;
  if (MutableCopy)
  {
    CFDictionarySetValue(MutableCopy, @"value", a2);
    *a4 = v9;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

CFStringRef FigUserDataCFStringCreateFromOSType(const __CFAllocator *a1, unsigned int a2)
{
  unsigned int v2 = bswap32(a2);
  return CFStringCreateWithFormat(a1, 0, @"%c%c%c%c", v2, BYTE1(v2), BYTE2(v2), HIBYTE(v2));
}

BOOL FigQTUserDataGetPackedLanguageCodeFromProperties(const __CFDictionary *a1, _WORD *a2)
{
  CFLocaleRef Value = (const __CFLocale *)CFDictionaryGetValue(a1, @"locale");
  if (Value)
  {
    CFLocaleRef v5 = Value;
    CFTypeID v6 = CFGetTypeID(Value);
    if (v6 == CFLocaleGetTypeID())
    {
      __int16 PackedISO639_2TFromLocale = FigMetadataGetPackedISO639_2TFromLocale(v5);
      goto LABEL_13;
    }
  }
  CFStringRef v8 = (const __CFString *)CFDictionaryGetValue(a1, @"languageCode");
  if (!v8) {
    return 0;
  }
  CFStringRef v9 = v8;
  CFTypeID v10 = CFGetTypeID(v8);
  if (v10 != CFNumberGetTypeID())
  {
    CFTypeID v12 = CFGetTypeID(v9);
    if (v12 == CFStringGetTypeID())
    {
      __int16 PackedISO639_2TFromLocale = FigMetadataGetPackedISO639_2T(v9);
LABEL_13:
      BOOL v11 = 1;
      if (!a2) {
        return v11;
      }
      goto LABEL_14;
    }
    return 0;
  }
  unsigned __int16 valuePtr = 0;
  CFNumberGetValue((CFNumberRef)v9, kCFNumberSInt16Type, &valuePtr);
  BOOL v11 = valuePtr > 0x3FFu && valuePtr != 0x7FFF;
  if (v11) {
    __int16 PackedISO639_2TFromLocale = valuePtr;
  }
  else {
    __int16 PackedISO639_2TFromLocale = 0;
  }
  if (a2)
  {
LABEL_14:
    if (v11)
    {
      *a2 = PackedISO639_2TFromLocale;
      return 1;
    }
  }
  return v11;
}

uint64_t FigUserDataSerializerCreateCopy(const __CFAllocator *a1, uint64_t a2, void *a3)
{
  CFTypeID v12 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
  {
    uint64_t v7 = FigSignalErrorAt();
    CFStringRef v8 = 0;
    if (!a3) {
      goto LABEL_11;
    }
    goto LABEL_8;
  }
  if (a3)
  {
    uint64_t v6 = DerivedStorage;
    uint64_t v7 = FigMetadataSerializerCreateUserDataCommon((uint64_t)a1, 1, &v12);
    CFStringRef v8 = v12;
    if (v7) {
      goto LABEL_11;
    }
    uint64_t v9 = CMBaseObjectGetDerivedStorage();
    if (*(void *)v6) {
      CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(a1, 0, *(CFDictionaryRef *)v6);
    }
    else {
      CFMutableDictionaryRef MutableCopy = 0;
    }
    uint64_t v7 = 0;
    *(void *)uint64_t v9 = MutableCopy;
    *(void *)(v9 + 8) = *(void *)(v6 + 8);
    *(unsigned char *)(v9 + 16) = *(unsigned char *)(v6 + 16);
    CFStringRef v8 = v12;
LABEL_8:
    if (!v7)
    {
      *a3 = v8;
      return v7;
    }
LABEL_11:
    if (v8) {
      CFRelease(v8);
    }
    return v7;
  }

  return FigSignalErrorAt();
}

void FigUserDataWriteItemAtom(const __CFString *a1, const void *a2, unsigned char *a3)
{
  int v17 = 0;
  int v6 = a3 + 8;
  if (a3[64]) {
    FigUserDataStringKeyToOSTypeKey(a1, (unsigned int *)&v17);
  }
  else {
    FigISOUserDataStringKeyToOSTypeKey(a1, (unsigned int *)&v17);
  }
  CFTypeID v7 = CFGetTypeID(a2);
  if (v7 == CFDictionaryGetTypeID())
  {
    if (FigAtomWriterBeginAtom()) {
      return;
    }
    if (a3[64])
    {
      if (FigQTUserDataWriteItemData(v6, v17, (CFDictionaryRef)a2)) {
        return;
      }
    }
    else if (FigISOUserDataWriteItemData(v6, v17, (CFDictionaryRef)a2))
    {
      return;
    }
    if (!FigAtomWriterEndAtom()) {
      *a3 = 1;
    }
  }
  else if (CFArrayGetCount((CFArrayRef)a2) >= 1)
  {
    int v8 = 0;
    CFDictionaryRef Mutable = 0;
    CFIndex v10 = 0;
    CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFTypeID v12 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
    do
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)a2, v10);
      if (ValueAtIndex)
      {
        CFDictionaryRef v14 = ValueAtIndex;
        if (HIBYTE(v17) == 169)
        {
          if (!v8 && FigAtomWriterBeginAtom()) {
            goto LABEL_35;
          }
          if (a3[64])
          {
            if (FigQTUserDataWriteItemData(v6, v17, v14)) {
              goto LABEL_35;
            }
          }
          else if (FigISOUserDataWriteItemData(v6, v17, v14))
          {
            goto LABEL_35;
          }
          int v8 = 1;
          *a3 = 1;
        }
        else
        {
          if (!Mutable) {
            CFDictionaryRef Mutable = CFArrayCreateMutable(v11, 0, v12);
          }
          CFArrayAppendValue(Mutable, v14);
        }
      }
      ++v10;
    }
    while (v10 < CFArrayGetCount((CFArrayRef)a2));
    if (v8 && FigAtomWriterEndAtom())
    {
LABEL_35:
      if (!Mutable) {
        return;
      }
    }
    else
    {
      if (!Mutable) {
        return;
      }
      if (CFArrayGetCount(Mutable) >= 1)
      {
        CFIndex v15 = 0;
        do
        {
          char v16 = CFArrayGetValueAtIndex(Mutable, v15);
          FigUserDataWriteItemAtom(a1, v16, a3);
          ++v15;
        }
        while (v15 < CFArrayGetCount(Mutable));
      }
    }
    CFRelease(Mutable);
  }
}

uint64_t FigQTUserDataWriteItemData(int a1, unsigned int a2, CFDictionaryRef theDict)
{
  unsigned __int16 valuePtr = 0x7FFF;
  CFTypeRef cf = 0;
  CFDataRef theData = 0;
  CFLocaleRef Value = CFDictionaryGetValue(theDict, @"value");
  if (Value) {
    CFStringRef v6 = (const __CFString *)CFRetain(Value);
  }
  else {
    CFStringRef v6 = 0;
  }
  CFTypeID v7 = CFDictionaryGetValue(theDict, @"dataTypeNamespace");
  CFStringRef v8 = (const __CFString *)CFDictionaryGetValue(theDict, @"dataType");
  FigMetadataGetCoreMediaDataType((uint64_t)v7, v8, 0);
  if (a2 != -1453039239 || !v6)
  {
    if (HIBYTE(a2) == 169) {
      goto LABEL_12;
    }
    if (FigUserDataWeKnowIsISOText(a2))
    {
      CFLocaleRef v23 = (const __CFLocale *)CFDictionaryGetValue(theDict, @"locale");
      if (FigCFEqual()) {
        int v24 = 268435712;
      }
      else {
        int v24 = 134217984;
      }
      uint64_t appended = FigISOUserDataCreateItemDataFromText((const __CFAllocator *)*MEMORY[0x1E4F1CF80], (uint64_t)v6, v24, v23, &theData);
      if (appended) {
        goto LABEL_41;
      }
      CFDataRef ExternalRepresentation = theData;
      if (!theData)
      {
LABEL_56:
        uint64_t v22 = 0;
        goto LABEL_57;
      }
      goto LABEL_54;
    }
    if (a2 == 1851878757)
    {
      CFAllocatorRef v25 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFStringRef v26 = v6;
      CFStringEncoding v27 = 0;
    }
    else
    {
      if (a2 != 1952540515)
      {
        CFTypeID TypeID = CFDataGetTypeID();
        if (TypeID != CFGetTypeID(v6))
        {
          uint64_t appended = FigSignalErrorAt();
          goto LABEL_41;
        }
        if (v6) {
          CFDataRef ExternalRepresentation = (const __CFData *)CFRetain(v6);
        }
        else {
          CFDataRef ExternalRepresentation = 0;
        }
        goto LABEL_53;
      }
      CFAllocatorRef v25 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFStringRef v26 = v6;
      CFStringEncoding v27 = 1536;
    }
    CFDataRef ExternalRepresentation = CFStringCreateExternalRepresentation(v25, v26, v27, 0);
LABEL_53:
    CFDataRef theData = ExternalRepresentation;
    if (!ExternalRepresentation) {
      goto LABEL_56;
    }
LABEL_54:
    CFDataGetLength(ExternalRepresentation);
    if (!CFDataGetBytePtr(theData)) {
      goto LABEL_56;
    }
    uint64_t appended = FigAtomWriterAppendData();
    if (!appended) {
      goto LABEL_56;
    }
LABEL_41:
    uint64_t v22 = appended;
LABEL_57:
    CFDictionaryRef v20 = 0;
    CFTypeRef v11 = v6;
    goto LABEL_58;
  }
  CFTypeID v9 = CFGetTypeID(v6);
  if (v9 == CFDateGetTypeID())
  {
    uint64_t appended = FigMetadataCopyISO8601GMTStringFromDate((const __CFDate *)v6, (CFStringRef *)&cf);
    if (!appended)
    {
      CFTypeRef v11 = cf;
      if (cf) {
        CFRetain(cf);
      }
      CFRelease(v6);
      goto LABEL_13;
    }
    goto LABEL_41;
  }
LABEL_12:
  CFTypeRef v11 = v6;
LABEL_13:
  CFLocaleRef v12 = (const __CFLocale *)CFDictionaryGetValue(theDict, @"locale");
  CFNumberRef v13 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"languageCode");
  if (v11 && (CFNumberRef v14 = v13, v15 = CFGetTypeID(v11), v15 == CFStringGetTypeID()))
  {
    if ((!v14 || !CFNumberGetValue(v14, kCFNumberSInt16Type, &valuePtr)) && v12) {
      unsigned __int16 valuePtr = FigMetadataGetPackedISO639_2TFromLocale(v12);
    }
    if (FigCFEqual()) {
      BOOL v16 = valuePtr > 0x3FFu;
    }
    else {
      BOOL v16 = 0;
    }
    BOOL v17 = !v16 || valuePtr == 0x7FFF;
    int v18 = !v17;
    if (v17) {
      uint64_t BytesFromCFStringAndMovieLangCode = FigCreateBytesFromCFStringAndMovieLangCode();
    }
    else {
      uint64_t BytesFromCFStringAndMovieLangCode = FigCreateBytesFromCFString();
    }
    CFDictionaryRef v20 = (void *)BytesFromCFStringAndMovieLangCode;
    uint64_t v21 = FigAtomWriterAppendData();
    if (!v21)
    {
      if (!v18 || (uint64_t v21 = FigAtomWriterAppendData(), !v21)) {
        uint64_t v21 = FigAtomWriterAppendData();
      }
    }
    uint64_t v22 = v21;
  }
  else
  {
    uint64_t v22 = FigSignalErrorAt();
    CFDictionaryRef v20 = 0;
  }
LABEL_58:
  if (cf) {
    CFRelease(cf);
  }
  if (theData) {
    CFRelease(theData);
  }
  if (v20) {
    CFAllocatorDeallocate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v20);
  }
  if (v11) {
    CFRelease(v11);
  }
  return v22;
}

uint64_t FigISOUserDataWriteItemData(int a1, int a2, CFDictionaryRef theDict)
{
  CFTypeRef cf = 0;
  *(void *)CFDataRef theData = 0;
  CFLocaleRef Value = CFDictionaryGetValue(theDict, @"value");
  if (Value && (CFDateRef v6 = (const __CFDate *)CFRetain(Value)) != 0)
  {
    CFDateRef v7 = v6;
    CFTypeID v8 = CFGetTypeID(v6);
    if (v8 == CFDateGetTypeID())
    {
      uint64_t v9 = FigMetadataCopyISO8601GMTStringFromDate(v7, (CFStringRef *)&cf);
      if (v9)
      {
        uint64_t ItemDataFromText = v9;
        CFDataRef v10 = v7;
        goto LABEL_62;
      }
      CFDataRef v10 = (const __CFData *)cf;
      if (cf) {
        CFRetain(cf);
      }
      CFRelease(v7);
    }
    else
    {
      CFDataRef v10 = v7;
    }
  }
  else
  {
    CFDataRef v10 = 0;
  }
  if (!FigISOUserDataWeKnowIsISOText(a2))
  {
    if (a2 > 1953000801)
    {
      switch(a2)
      {
        case 1953000802:
          *(void *)bytes = 0x6765706A00000000;
          if (v10)
          {
            if (theDict)
            {
              CFStringRef v36 = (const __CFString *)CFDictionaryGetValue(theDict, @"dataType");
              if (v36)
              {
                CFStringRef v37 = v36;
                long long v38 = (__CFString *)CFDictionaryGetValue(theDict, @"dataTypeNamespace");
                if (!v38) {
                  long long v38 = @"com.apple.quicktime.udta";
                }
                FigMetadataGetCoreMediaDataType((uint64_t)v38, v37, 0);
                if (FigCFEqual())
                {
                  BytePtr = CFDataGetBytePtr(v10);
                  if (CFDataGetLength(v10) < 4 || *BytePtr != 255 || BytePtr[1] != 216 || BytePtr[2] != 255) {
                    goto LABEL_88;
                  }
                }
                else if (!FigCFEqual())
                {
                  goto LABEL_88;
                }
                double v43 = CFDataGetBytePtr(v10);
                CFIndex Length = CFDataGetLength(v10);
                if (v43 && Length >= 1)
                {
                  CFDictionaryRef Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
                  CFDataAppendBytes(Mutable, bytes, 8);
                  CFDictionaryRef v20 = Mutable;
                  uint64_t v22 = (UInt8 *)v43;
                  CFIndex v23 = Length;
                  goto LABEL_94;
                }
              }
            }
          }
LABEL_88:
          uint64_t v42 = FigSignalErrorAt();
          if (!v42) {
            goto LABEL_89;
          }
LABEL_87:
          uint64_t ItemDataFromText = v42;
          goto LABEL_62;
        case 1970430324:
          *(void *)bytes = 0;
          LOWORD(valuePtr) = 0;
          if (v10)
          {
            CFAllocatorRef v40 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
            CFNumberGetValue(v10, kCFNumberSInt16Type, &valuePtr);
            bytes[7] = valuePtr;
            CFDictionaryRef v20 = CFDataCreateMutable(v40, 0);
            CFDictionaryRef Mutable = v20;
            uint64_t v22 = bytes;
            CFIndex v23 = 8;
            goto LABEL_94;
          }
          uint64_t v45 = FigSignalErrorAt();
          if (v45)
          {
            uint64_t ItemDataFromText = v45;
            CFDataRef v10 = 0;
            goto LABEL_62;
          }
LABEL_89:
          uint64_t ItemDataFromText = 0;
          goto LABEL_62;
        case 2037543523:
          *(_WORD *)&UInt8 bytes[4] = 0;
          *(_DWORD *)bytes = 0;
          if (v10 && CFNumberGetValue(v10, kCFNumberSInt16Type, &bytes[4]))
          {
            CFAllocatorRef v19 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
            *(_WORD *)&UInt8 bytes[4] = bswap32(*(unsigned __int16 *)&bytes[4]) >> 16;
            CFDictionaryRef v20 = CFDataCreateMutable(v19, 0);
            CFDictionaryRef Mutable = v20;
            uint64_t v22 = bytes;
            CFIndex v23 = 6;
LABEL_94:
            CFDataAppendBytes(v20, v22, v23);
            CFLocaleRef v12 = 0;
            CFNumberRef v29 = 0;
            *(void *)CFDataRef theData = Mutable;
            goto LABEL_54;
          }
          goto LABEL_88;
      }
LABEL_36:
      if (v10)
      {
        CFTypeID v30 = CFGetTypeID(v10);
        if (v30 == CFDataGetTypeID())
        {
          CFDataRef ExternalRepresentation = (__CFData *)CFRetain(v10);
LABEL_85:
          CFDictionaryRef Mutable = ExternalRepresentation;
          CFLocaleRef v12 = 0;
          CFNumberRef v29 = 0;
          *(void *)CFDataRef theData = ExternalRepresentation;
          goto LABEL_54;
        }
      }
LABEL_86:
      uint64_t v42 = FigSignalErrorAt();
      goto LABEL_87;
    }
    if (a2 == 1684108389)
    {
      if (!v10) {
        goto LABEL_86;
      }
      CFTypeID v41 = CFGetTypeID(v10);
      if (v41 != CFStringGetTypeID()) {
        goto LABEL_86;
      }
    }
    else if (a2 != 1952540515)
    {
      goto LABEL_36;
    }
    CFDataRef ExternalRepresentation = CFStringCreateExternalRepresentation((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (CFStringRef)v10, 0x600u, 0);
    goto LABEL_85;
  }
  CFLocaleRef v11 = (const __CFLocale *)CFDictionaryGetValue(theDict, @"locale");
  CFLocaleRef v12 = v11;
  if (v11) {
    CFRetain(v11);
  }
  if (a2 == 1819239273)
  {
    uint64_t valuePtr = 0;
    *(void *)bytes = 0;
    int8x8_t v50 = 0;
    unsigned int v51 = 0;
    UInt8 v48 = 0;
    if (v10
      && (CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80],
          CFIndex v14 = CFStringGetLength((CFStringRef)v10),
          (uint64_t BytesFromCFString = (const char *)FigCreateBytesFromCFString()) != 0))
    {
      BOOL v16 = (char *)BytesFromCFString;
      if (v14 + 1 == valuePtr)
      {
        memset(&theData[8], 0, 12);
        sscanf(BytesFromCFString, "%f%f%f", &theData[16], &theData[12], &theData[8]);
        int8x8_t v50 = vrev32_s8((int8x8_t)vmovn_s64(vcvtq_n_s64_f64(vcvtq_f64_f32(*(float32x2_t *)&theData[12]), 0x10uLL)));
        unsigned int v51 = bswap32(vcvtd_n_s64_f64(*(float *)&theData[8], 0x10uLL));
        *(_WORD *)&UInt8 bytes[4] = __rev16(FigMetadataGetPackedISO639_2TFromLocale(v12));
        BOOL v17 = CFDataCreateMutable(v13, 0);
        CFDataAppendBytes(v17, bytes, 20);
        CFDataAppendBytes(v17, (const UInt8 *)"earth", 6);
        CFDataAppendBytes(v17, &v48, 1);
        uint64_t ItemDataFromText = 0;
        *(void *)CFDataRef theData = v17;
      }
      else
      {
        uint64_t ItemDataFromText = FigSignalErrorAt();
      }
      CFAllocatorDeallocate(v13, v16);
    }
    else
    {
      uint64_t ItemDataFromText = FigSignalErrorAt();
    }
    CFNumberRef v29 = 0;
    goto LABEL_52;
  }
  int v24 = CFDictionaryGetValue(theDict, @"dataTypeNamespace");
  CFStringRef v25 = (const __CFString *)CFDictionaryGetValue(theDict, @"dataType");
  FigMetadataGetCoreMediaDataType((uint64_t)v24, v25, 0);
  if (FigCFEqual()) {
    int v26 = 268435712;
  }
  else {
    int v26 = 134217984;
  }
  CFStringEncoding v27 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  if (a2 == 1668313716)
  {
    if (v12 && (CFNumberRef v28 = FigMetadataCopyLangCodeFromLocale(v12), *(_DWORD *)bytes = 0, v28))
    {
      CFNumberRef v29 = v28;
      CFNumberGetValue(v28, kCFNumberSInt32Type, bytes);
      if (*(_DWORD *)bytes != 0x7FFF && *(_DWORD *)bytes != 138) {
        goto LABEL_40;
      }
    }
    else
    {
      CFNumberRef v29 = 0;
    }
    CFLocaleRef v33 = CFLocaleCreate(*v27, @"en");
    CFLocaleRef v32 = v33;
    if (v33) {
      CFRetain(v33);
    }
    if (v12) {
      CFRelease(v12);
    }
    if (v32) {
      CFRelease(v32);
    }
    goto LABEL_51;
  }
  CFNumberRef v29 = 0;
LABEL_40:
  CFLocaleRef v32 = v12;
LABEL_51:
  uint64_t ItemDataFromText = FigISOUserDataCreateItemDataFromText(*v27, (uint64_t)v10, v26, v32, (__CFData **)theData);
  CFLocaleRef v12 = v32;
LABEL_52:
  if (ItemDataFromText) {
    goto LABEL_58;
  }
  CFDictionaryRef Mutable = *(__CFData **)theData;
LABEL_54:
  if (!Mutable
    || (CFDataGetLength(Mutable), !CFDataGetBytePtr(*(CFDataRef *)theData))
    || (uint64_t appended = FigAtomWriterAppendData(), !appended))
  {
    uint64_t ItemDataFromText = 0;
LABEL_58:
    if (!v29) {
      goto LABEL_60;
    }
    goto LABEL_59;
  }
  uint64_t ItemDataFromText = appended;
  if (v29) {
LABEL_59:
  }
    CFRelease(v29);
LABEL_60:
  if (v12) {
    CFRelease(v12);
  }
LABEL_62:
  if (cf) {
    CFRelease(cf);
  }
  if (*(void *)theData) {
    CFRelease(*(CFTypeRef *)theData);
  }
  if (v10) {
    CFRelease(v10);
  }
  return ItemDataFromText;
}

uint64_t FigVTTNoteBlockCreate(uint64_t a1, void *a2)
{
  if (a2)
  {
    FigVTTNodeGetClassID();
    uint64_t v3 = CMDerivedObjectCreate();
    if (!v3)
    {
      uint64_t DerivedStorage = (CFMutableDictionaryRef *)CMBaseObjectGetDerivedStorage();
      uint64_t v3 = FigVTTInitializeNodeBaseStorage(DerivedStorage);
      if (!v3) {
        *a2 = 0;
      }
    }
    return v3;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void figVTTNoteBlock_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();

  FigVTTReleaseNodeBaseStorage(DerivedStorage);
}

CFStringRef figVTTNoteBlock_CopyDebugDesc()
{
  CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v0 = (const void *)FigCFCopyCompactDescription();
  CFStringRef v1 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"note: %@", v0);
  if (v0) {
    CFRelease(v0);
  }
  return v1;
}

uint64_t figVTTNoteBlock_GetNodeType(uint64_t a1, _DWORD *a2)
{
  if (!a2) {
    return FigSignalErrorAt();
  }
  *a2 = 3;
  return 0;
}

uint64_t figVTTNoteBlock_copyNodeDocumentSerialization(uint64_t a1, CFStringRef *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2 && (*a2 = 0, (v4 = *(const void **)(DerivedStorage + 8)) != 0) && (CFTypeRef v5 = CFRetain(v4)) != 0)
  {
    CFDateRef v6 = v5;
    *a2 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%@\n%@\n", @"NOTE", v5);
    CFRelease(v6);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t frlo_registerFigRenderedLegibleOutputManager()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sFigRenderedLegibleOutputManagerID = result;
  return result;
}

uint64_t FigRenderedLegibleOutputManagerCreate(uint64_t a1, NSObject *a2, NSObject *a3, uint64_t a4, CFTypeRef *a5)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  unint64_t v9 = (unint64_t)a2 | (unint64_t)a3;
  if (a4)
  {
    if (!v9) {
      goto LABEL_3;
    }
  }
  else if (v9)
  {
    goto LABEL_3;
  }
  if (a5)
  {
    *a5 = 0;
    MEMORY[0x19970EE10](&FigRenderedLegibleOutputManagerGetTypeID_sRegisterFigRenderedLegibleOutputManagerOnce, frlo_registerFigRenderedLegibleOutputManager);
    uint64_t Instance = _CFRuntimeCreateInstance();
    if (Instance)
    {
      CFLocaleRef v12 = (NSObject **)Instance;
      CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], 0);
      v12[9] = Mutable;
      if (Mutable)
      {
        CFMutableDictionaryRef v15 = CFDictionaryCreateMutable(v13, 0, MEMORY[0x1E4F1D530], 0);
        v12[8] = v15;
        if (v15)
        {
          BOOL v16 = v12 + 12;
          uint64_t v17 = FigCaptionRendererSessionCreate(0, 0, (uint64_t)v12, (uint64_t *)v12 + 12);
          if (v17) {
            goto LABEL_22;
          }
          if (!*v16)
          {
            uint64_t v20 = 0;
            goto LABEL_20;
          }
          uint64_t v17 = (uint64_t)FigCaptionRendererSessionSetLegibleOutputDevice(*v16, 0, 1, 1, 0.0, 0.0, 320.0, 240.0);
          if (v17)
          {
LABEL_22:
            uint64_t v20 = v17;
LABEL_20:
            CFRelease(v12);
            return v20;
          }
          snprintf(__str, 0x100uLL, "com.apple.coremedia.renderedlegibleoutput.notificationqueue<%p>", v12);
          dispatch_queue_t v18 = dispatch_queue_create(__str, 0);
          v12[3] = v18;
          if (v18)
          {
            snprintf(label, 0x100uLL, "com.apple.coremedia.renderedlegibleoutput.messagequeue<%p>", v12);
            dispatch_queue_t v19 = dispatch_queue_create(label, 0);
            UInt8 v12[2] = v19;
            if (v19)
            {
              if (a4 && (unint64_t)a2 | (unint64_t)a3)
              {
                v12[4] = a2;
                v12[5] = a3;
                v12[6] = FigCFWeakReferenceHolderCreateWithReferencedObject();
              }
              uint64_t v20 = 0;
              *a5 = CFRetain(v12);
              goto LABEL_20;
            }
          }
        }
      }
      uint64_t v17 = FigSignalErrorAt();
      goto LABEL_22;
    }
  }
LABEL_3:

  return FigSignalErrorAt();
}

uint64_t FigRenderedLegibleOutputManagerSetRenderedLegibleOutputsDict(dispatch_queue_t *cf, CFTypeRef a2)
{
  uint64_t v3 = cf;
  if (cf) {
    CFTypeRef cf = (dispatch_queue_t *)CFRetain(cf);
  }
  v6[0] = cf;
  if (a2) {
    CFTypeRef v4 = CFRetain(a2);
  }
  else {
    CFTypeRef v4 = 0;
  }
  v6[1] = v4;
  dispatch_sync_f(v3[2], v6, (dispatch_function_t)frlo_setLegibleOutputsDictDo);
  return 0;
}

void frlo_setLegibleOutputsDictDo(const __CFDictionary ***a1)
{
  uint64_t v3 = *a1;
  CFDictionaryRef v2 = (const __CFDictionary *)a1[1];
  CFDictionaryRef v4 = v3[7];
  v3[7] = v2;
  if (v2) {
    CFRetain(v2);
  }
  if (v4) {
    CFRelease(v4);
  }
  CFTypeRef v5 = *a1;
  CFDictionaryApplyFunction((*a1)[9], (CFDictionaryApplierFunction)frlo_finalizeFigRenderedLegibleOutputApplier, 0);
  CFDictionaryRemoveAllValues(v5[9]);
  CFDictionaryRemoveAllValues(v5[8]);
  CFDictionaryRef v6 = v5[7];
  if (v6) {
    CFDictionaryApplyFunction(v6, (CFDictionaryApplierFunction)frlo_rebuildFigRenderedLegibleOutputs_applier, v5);
  }
  if (*a1) {
    CFRelease(*a1);
  }
  CFDateRef v7 = a1[1];
  if (v7)
  {
    CFRelease(v7);
  }
}

uint64_t FigRenderedLegibleOutputManagerSetNonForcedEnabledForMediaType(dispatch_queue_t *cf, int a2, unsigned __int8 a3)
{
  CFTypeRef v5 = cf;
  if (cf) {
    CFTypeRef cf = (dispatch_queue_t *)CFRetain(cf);
  }
  CFDateRef v7 = cf;
  int v8 = a2;
  int v9 = a3;
  dispatch_sync_f(v5[2], &v7, (dispatch_function_t)frlo_setNonForcedEnabledForMediaTypeDo);
  return 0;
}

void frlo_setNonForcedEnabledForMediaTypeDo(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 8);
  if (v2 == 1935832172)
  {
    int v6 = *(unsigned __int8 *)(a1 + 12);
    CFDictionaryRef v4 = *(CFDictionaryRef **)a1;
    *(unsigned char *)(*(void *)a1 + 81) = v6;
    CFTypeRef v5 = (void (__cdecl *)(const void *, const void *, void *))frlo_clearPreviousSubtitles;
    if (!v6) {
      goto LABEL_6;
    }
  }
  else
  {
    if (v2 != 1668047728) {
      goto LABEL_7;
    }
    int v3 = *(unsigned __int8 *)(a1 + 12);
    CFDictionaryRef v4 = *(CFDictionaryRef **)a1;
    *(unsigned char *)(*(void *)a1 + 80) = v3;
    CFTypeRef v5 = (void (__cdecl *)(const void *, const void *, void *))frlo_clearPreviousClosedCaptions;
    if (!v3)
    {
LABEL_6:
      CFDictionaryApplyFunction(v4[9], v5, 0);
LABEL_7:
      CFDictionaryRef v4 = *(CFDictionaryRef **)a1;
      if (!*(void *)a1) {
        return;
      }
    }
  }

  CFRelease(v4);
}

CFMutableArrayRef FigRenderedLegibleOutputManagerEnsureRenderPipelinesForFormat(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  CFMutableArrayRef v9 = Mutable;
  if (Mutable)
  {
    v11[0] = a1;
    v11[1] = a2;
    _OWORD v11[2] = a3;
    v11[3] = a4;
    v11[4] = Mutable;
    v11[5] = 0;
    dispatch_sync_f(*(dispatch_queue_t *)(a1 + 16), v11, (dispatch_function_t)frlo_ensureRenderPipelinesForFormatDo);
  }
  else
  {
    FigSignalErrorAt();
  }
  return v9;
}

void frlo_ensureRenderPipelinesForFormatDo(void *a1)
{
  CFDictionaryRef v2 = *(const __CFDictionary **)(*a1 + 56);
  if (v2 && CFDictionaryGetCount(v2) >= 1 && a1[4])
  {
    CFDictionaryRef v3 = *(const __CFDictionary **)(*a1 + 56);
    CFDictionaryApplyFunction(v3, (CFDictionaryApplierFunction)frlo_ensureRenderPipelinesForFormatDo_applier, a1);
  }
}

uint64_t FigRenderedLegibleOutputManagerForgetAboutRenderedLegibleOutputRenderPipelines(uint64_t a1)
{
  uint64_t context = a1;
  dispatch_sync_f(*(dispatch_queue_t *)(a1 + 16), &context, (dispatch_function_t)frlo_forgetAboutRenderedLegibleOutputRenderPipelinesDo);
  return 0;
}

void frlo_forgetAboutRenderedLegibleOutputRenderPipelinesDo(uint64_t a1)
{
  CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(*(void *)a1 + 64));
  CFDictionaryRef v2 = *(const __CFDictionary **)(*(void *)a1 + 72);

  CFDictionaryApplyFunction(v2, (CFDictionaryApplierFunction)frlo_forgetAboutRenderPipelines, 0);
}

uint64_t FigRenderedLegibleOutputManagerForgetAboutRenderedLegibleOutputRenderPipeline(uint64_t a1, uint64_t a2)
{
  v3[0] = a1;
  v3[1] = a2;
  dispatch_sync_f(*(dispatch_queue_t *)(a1 + 16), v3, (dispatch_function_t)frlo_forgetAboutRenderedLegibleOutputRenderPipelineDo);
  return 0;
}

void frlo_forgetAboutRenderedLegibleOutputRenderPipelineDo(const void **a1)
{
  CFDictionaryRemoveValue(*((CFMutableDictionaryRef *)*a1 + 8), a1[1]);
  CFDictionaryRef v2 = (const __CFDictionary *)*((void *)*a1 + 9);

  CFDictionaryApplyFunction(v2, (CFDictionaryApplierFunction)frlo_forgetAboutRenderPipeline, a1);
}

uint64_t FigRenderedLegibleOutputManagerIsSupported()
{
  return 1;
}

double frlo_init(uint64_t a1)
{
  *(void *)(a1 + 96) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

void frlo_finalize(void *a1)
{
  a1[4] = 0;
  a1[5] = 0;
  CFDictionaryRef v2 = (const void *)a1[6];
  if (v2) {
    CFRelease(v2);
  }
  CFDictionaryRef v3 = a1[2];
  if (v3)
  {
    dispatch_release(v3);
    a1[2] = 0;
  }
  CFDictionaryRef v4 = a1[3];
  if (v4)
  {
    dispatch_release(v4);
    a1[3] = 0;
  }
  CFTypeRef v5 = (const void *)a1[8];
  if (v5)
  {
    CFRelease(v5);
    a1[8] = 0;
  }
  CFDictionaryRef v6 = (const __CFDictionary *)a1[9];
  if (v6)
  {
    CFDictionaryApplyFunction(v6, (CFDictionaryApplierFunction)frlo_finalizeFigRenderedLegibleOutputApplier, 0);
    CFDateRef v7 = (const void *)a1[9];
    if (v7)
    {
      CFRelease(v7);
      a1[9] = 0;
    }
  }
  int v8 = (const void *)a1[7];
  if (v8)
  {
    CFRelease(v8);
    a1[7] = 0;
  }
  CFMutableArrayRef v9 = (const void *)a1[11];
  if (v9)
  {
    CFRelease(v9);
    a1[11] = 0;
  }
  CFDataRef v10 = (const void *)a1[12];
  if (v10)
  {
    CFRelease(v10);
  }
}

__CFString *frlo_CopyDebugDescription(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<FigRenderedLegibleOutputManager %p>", a1);
  return Mutable;
}

void frlo_finalizeFigRenderedLegibleOutputApplier(int a1, CFTypeRef *a2)
{
  if (a2)
  {
    CFTypeRef v3 = a2[6];
    if (v3)
    {
      CFRelease(v3);
      a2[6] = 0;
    }
    CFTypeRef v4 = a2[7];
    if (v4)
    {
      CFRelease(v4);
      a2[7] = 0;
    }
    if (*a2) {
      CFRelease(*a2);
    }
    free(a2);
  }
}

void frlo_rebuildFigRenderedLegibleOutputs_applier(const void *a1, CFDictionaryRef theDict, uint64_t a3)
{
  CMTime v13 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, @"RenderedLegibleOutputKey_AdvanceInterval");
  if (Value)
  {
    seconds.CMTimeValue value = 0;
    CFNumberGetValue(Value, kCFNumberDoubleType, &seconds);
    CMTimeMakeWithSeconds(&v13, *(Float64 *)&seconds.value, 1000);
  }
  *(_OWORD *)&seconds.CMTimeValue value = *MEMORY[0x1E4F1DB30];
  CFDictionaryRef v7 = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"RenderedLegibleOutputKey_VideoDisplaySize");
  CGSizeMakeWithDictionaryRepresentation(v7, (CGSize *)&seconds);
  CMTimeValue v8 = seconds.value;
  uint64_t v9 = *(void *)&seconds.timescale;
  CMTime seconds = v13;
  CFDataRef v10 = (char *)malloc_type_calloc(1uLL, 0x40uLL, 0x10600404838DB4AuLL);
  if (v10)
  {
    if (a1) {
      CFTypeRef v11 = CFRetain(a1);
    }
    else {
      CFTypeRef v11 = 0;
    }
    *(void *)CFDataRef v10 = v11;
    *(CMTime *)(v10 + 8) = seconds;
    *((void *)v10 + 4) = v8;
    *((void *)v10 + 5) = v9;
    goto LABEL_8;
  }
  if (!FigSignalErrorAt()) {
LABEL_8:
  }
    CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a3 + 72), a1, v10);
}

void frlo_ensureRenderPipelinesForFormatDo_applier(void *key, uint64_t a2, CFMutableArrayRef *a3)
{
  CFNumberRef Value = (char *)CFDictionaryGetValue(*((CFDictionaryRef *)*a3 + 9), key);
  if (CMFormatDescriptionGetMediaType(a3[1]) == 1935832172 || CMFormatDescriptionGetMediaType(a3[1]) == 1952807028)
  {
    CFTypeRef v5 = (const void *)*((void *)Value + 7);
    if (!v5) {
      goto LABEL_6;
    }
    if (*((unsigned char *)a3 + 40))
    {
      CFRelease(v5);
      *((void *)Value + 7) = 0;
LABEL_6:
      uint64_t v7 = (uint64_t)*a3;
      uint64_t v6 = (uint64_t)a3[1];
      long long v8 = *(_OWORD *)(Value + 8);
      uint64_t v26 = *((void *)Value + 3);
      long long v25 = v8;
      if (FigCreateCaptionRenderPipeline(v6, (uint64_t)frlo_newSubtitleSampleArrivedCallback, v7, 0, 0, (uint64_t)frlo_renderPipelineDidFlush, v7, 0, &v25, 0, (CFTypeRef *)Value + 7))return; {
    }
      }
  }
  if (*((unsigned char *)*a3 + 81)) {
    uint64_t v9 = (void *)MEMORY[0x1E4F1CFD0];
  }
  else {
    uint64_t v9 = (void *)MEMORY[0x1E4F1CFC8];
  }
  uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(*((void *)Value + 7));
  uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  CMTime v13 = *(void (**)(uint64_t, __CFString *, void))(v12 + 56);
  if (v13) {
    v13(FigBaseObject, @"DisplayNonForcedSubtitles", *v9);
  }
  CFMutableArrayRef v14 = a3[3];
  if (!v14
    || ((uint64_t v15 = FigRenderPipelineGetFigBaseObject(*((void *)Value + 7)),
         (uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 8)) == 0)
      ? (uint64_t v17 = 0)
      : (uint64_t v17 = v16),
        (dispatch_queue_t v18 = *(unsigned int (**)(uint64_t, uint64_t, CFMutableArrayRef))(v17 + 56)) != 0
     && !v18(v15, 0x1EE574418, v14)))
  {
    CFMutableArrayRef v19 = a3[2];
    if (!v19
      || ((uint64_t v20 = FigRenderPipelineGetFigBaseObject(*((void *)Value + 7)),
           (uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 8)) == 0)
        ? (uint64_t v22 = 0)
        : (uint64_t v22 = v21),
          (uint64_t v23 = *(unsigned int (**)(uint64_t, uint64_t, CFMutableArrayRef))(v22 + 56)) != 0
       && !v23(v20, 0x1EE5743D8, v19)))
    {
      int v24 = (const void *)*((void *)Value + 7);
      if (v24)
      {
        CFDictionaryAddValue(*((CFMutableDictionaryRef *)*a3 + 8), *((const void **)Value + 7), Value);
        CFArrayAppendValue(a3[4], v24);
      }
    }
  }
}

void frlo_newSubtitleSampleArrivedCallback(const void *a1, const void *a2, long long *a3, char a4, char a5, void *a6, double a7, double a8, double a9, double a10)
{
  uint64_t v20 = (char *)malloc_type_calloc(1uLL, 0x60uLL, 0x10E004010A499B0uLL);
  if (a6) {
    CFTypeRef v21 = CFRetain(a6);
  }
  else {
    CFTypeRef v21 = 0;
  }
  *(void *)uint64_t v20 = v21;
  if (a2) {
    CFTypeRef v22 = CFRetain(a2);
  }
  else {
    CFTypeRef v22 = 0;
  }
  *((void *)v20 + 2) = v22;
  long long v23 = *a3;
  *((void *)v20 + 5) = *((void *)a3 + 2);
  *(_OWORD *)(v20 + 24) = v23;
  v20[48] = a4;
  v20[49] = a5;
  *((double *)v20 + 7) = a7;
  *((double *)v20 + 8) = a8;
  *((double *)v20 + 9) = a9;
  *((double *)v20 + 10) = a10;
  if (a1) {
    CFTypeRef v24 = CFRetain(a1);
  }
  else {
    CFTypeRef v24 = 0;
  }
  *((void *)v20 + 1) = v24;
  long long v25 = a6[2];

  dispatch_async_f(v25, v20, (dispatch_function_t)frlo_convertSubtitleSampleIntoPixelBuffersDo);
}

void frlo_renderPipelineDidFlush(const void *a1, void *a2)
{
  CFTypeRef v4 = malloc_type_calloc(1uLL, 0x10uLL, 0x20040A4A59CD2uLL);
  if (a2) {
    CFTypeRef v5 = CFRetain(a2);
  }
  else {
    CFTypeRef v5 = 0;
  }
  *CFTypeRef v4 = v5;
  if (a1) {
    CFTypeRef v6 = CFRetain(a1);
  }
  else {
    CFTypeRef v6 = 0;
  }
  v4[1] = v6;
  uint64_t v7 = a2[2];

  dispatch_async_f(v7, v4, (dispatch_function_t)frlo_renderPipelineDidFlushDo);
}

void frlo_convertSubtitleSampleIntoPixelBuffersDo(void *a1)
{
  CFStringRef v1 = a1;
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  long long v35 = 0;
  CFArrayRef theArray = 0;
  CFTypeRef v34 = 0;
  CFDictionaryRef v2 = (const void *)a1[1];
  if (!v2) {
    goto LABEL_62;
  }
  CFNumberRef Value = (double *)CFDictionaryGetValue(*(CFDictionaryRef *)(*a1 + 64), v2);
  if (!v1[2])
  {
    CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    if (Mutable) {
      goto LABEL_42;
    }
LABEL_63:
    CFDictionaryRef v22 = 0;
    CFDictionaryRef v23 = 0;
    goto LABEL_47;
  }
  if (!*(unsigned char *)(*v1 + 81) && !*((unsigned char *)v1 + 48)) {
    goto LABEL_62;
  }
  if (FigCaptionRendererSessionClearForRLO(*(NSObject **)(*v1 + 96))) {
    goto LABEL_62;
  }
  if (FigCaptionRendererSessionSetLayoutContext_Viewport(*(void *)(*v1 + 96), 0.0, 0.0, Value[4], Value[5]))goto LABEL_62; {
  if (FigCaptionRendererSessionSetLayoutContext_VideoSize(*(NSObject **)(*v1 + 96), Value[4], Value[5]))
  }
    goto LABEL_62;
  if (FigCaptionRendererSessionSetLayoutContext_Gravity(*(NSObject **)(*v1 + 96), 0)) {
    goto LABEL_62;
  }
  if (FigCaptionRendererSessionSetLayoutContext_Overscan(*(NSObject **)(*v1 + 96), 0)) {
    goto LABEL_62;
  }
  if (FigSubtitleSampleCreatePropertyList((const __CFDictionary *)v1[2], *((unsigned __int8 *)v1 + 48), *((unsigned __int8 *)v1 + 49), (CFDictionaryRef *)&v34, *((CGFloat *)v1 + 7), *((CGFloat *)v1 + 8), *((CGFloat *)v1 + 9), *((CGFloat *)v1 + 10)))goto LABEL_62; {
  cf[0] = 0;
  }
  FigCaptionRendererLayoutContextCreate(cf);
  if (!cf[0]) {
    goto LABEL_62;
  }
  if (FigCaptionRendererSessionSetCaptionSample(*(NSObject **)(*v1 + 96), (uint64_t)v34, (uint64_t)cf[0])) {
    goto LABEL_62;
  }
  if (FigCaptionRendererSessionUpdateLegibleOutputContext(*(void **)(*v1 + 96), (uint64_t)cf[0])) {
    goto LABEL_62;
  }
  uint64_t v33 = 0;
  if (FigCaptionRendererLayoutContextGetSubtitleSample((uint64_t)cf[0], &v33)) {
    goto LABEL_62;
  }
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  if (FigCaptionRendererSessionCopyOutputNodeImagesAndPositions(*(void *)(*v1 + 96), &theArray, &v35))
  {
LABEL_62:
    CFMutableArrayRef Mutable = 0;
    goto LABEL_63;
  }
  if (theArray) {
    CFIndex Count = CFArrayGetCount(theArray);
  }
  else {
    CFIndex Count = 0;
  }
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef v7 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], Count, MEMORY[0x1E4F1D510]);
  CFMutableArrayRef Mutable = v7;
  if (!v7) {
    goto LABEL_63;
  }
  if (Count)
  {
    CFTypeID v30 = v1;
    long long v31 = v7;
    CFNumberRef v29 = Value;
    CFIndex v8 = 0;
    uint64_t v9 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
    CFIndex v32 = Count;
    while (1)
    {
      CFDictionaryRef ValueAtIndex = (CGImage *)CFArrayGetValueAtIndex(theArray, v8);
      pixelBufferOut.CMTimeValue value = 0;
      unint64_t Width = CGImageGetWidth(ValueAtIndex);
      unint64_t Height = CGImageGetHeight(ValueAtIndex);
      DeviceRGB = CGColorSpaceCreateDeviceRGB();
      CFDictionaryRef v14 = CFDictionaryCreateMutable(v5, 0, MEMORY[0x1E4F1D048], v9);
      if (v14)
      {
        uint64_t v9 = (const CFDictionaryValueCallBacks *)CFDictionaryCreate(v5, 0, 0, 0, MEMORY[0x1E4F1D530], v9);
        FigCFDictionarySetValue();
        FigCFDictionarySetInt32();
        FigCFDictionarySetInt32();
        CFAllocatorRef v15 = v5;
        CVReturn v16 = CVPixelBufferCreate(v5, Width, Height, 0x42475241u, v14, (CVPixelBufferRef *)&pixelBufferOut);
        if (v16)
        {
          CVReturn v20 = v16;
          CFTypeRef v21 = 0;
          CFMutableArrayRef v19 = 0;
        }
        else if (pixelBufferOut.value)
        {
          CVPixelBufferLockBaseAddress((CVPixelBufferRef)pixelBufferOut.value, 0);
          BaseAddress = CVPixelBufferGetBaseAddress((CVPixelBufferRef)pixelBufferOut.value);
          size_t BytesPerRow = CVPixelBufferGetBytesPerRow((CVPixelBufferRef)pixelBufferOut.value);
          CFMutableArrayRef v19 = CGBitmapContextCreate(BaseAddress, Width, Height, 8uLL, BytesPerRow, DeviceRGB, 1u);
          v41.size.width = (double)Width;
          v41.size.height = (double)Height;
          v41.origin.x = 0.0;
          v41.origin.y = 0.0;
          CGContextDrawImage(v19, v41, ValueAtIndex);
          CVPixelBufferUnlockBaseAddress((CVPixelBufferRef)pixelBufferOut.value, 0);
          CVReturn v20 = 0;
          CFTypeRef v21 = (void *)pixelBufferOut.value;
          pixelBufferOut.CMTimeValue value = 0;
        }
        else
        {
          CFTypeRef v21 = 0;
          CFMutableArrayRef v19 = 0;
          CVReturn v20 = 0;
        }
      }
      else
      {
        CFAllocatorRef v15 = v5;
        CFTypeRef v21 = 0;
        CFMutableArrayRef v19 = 0;
        CVReturn v20 = 0;
      }
      CGColorSpaceRelease(DeviceRGB);
      CGContextRelease(v19);
      CVPixelBufferRelease((CVPixelBufferRef)pixelBufferOut.value);
      if (v14) {
        CFRelease(v14);
      }
      if (v9) {
        CFRelease(v9);
      }
      if (v20) {
        break;
      }
      if (v21)
      {
        CFArrayAppendValue(v31, v21);
        CVPixelBufferRelease((CVPixelBufferRef)v21);
      }
      ++v8;
      uint64_t v9 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
      CFAllocatorRef v5 = v15;
      if (v32 == v8)
      {
        CFNumberRef Value = v29;
        CFStringRef v1 = v30;
        CFMutableArrayRef Mutable = v31;
        goto LABEL_42;
      }
    }
    CFStringRef v1 = v30;
    CFMutableArrayRef Mutable = v31;
    goto LABEL_63;
  }
LABEL_42:
  CMTime pixelBufferOut = *(CMTime *)((unsigned char *)v1 + 1);
  CFDictionaryRef v22 = CMTimeCopyAsDictionary(&pixelBufferOut, v5);
  pixelBufferOut.CMTimeValue value = (CMTimeValue)@"RenderedLegibleOutputKey";
  cf[0] = *(CFTypeRef *)Value;
  cf[1] = Mutable;
  *(void *)&pixelBufferOut.CMTimeScale timescale = @"RenderedLegibleOutputPixelBuffers";
  pixelBufferOut.CMTimeEpoch epoch = (CMTimeEpoch)@"RenderedLegibleOutputPositions";
  double v39 = @"FigTime";
  cf[2] = v35;
  cf[3] = v22;
  CFDictionaryRef v23 = CFDictionaryCreate(v5, (const void **)&pixelBufferOut, cf, 4, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (v23)
  {
    uint64_t v24 = *(void *)(*v1 + 32);
    long long v25 = *(const void **)(*v1 + 48);
    uint64_t v26 = malloc_type_calloc(1uLL, 0x18uLL, 0xE00403260BBE2uLL);
    *uint64_t v26 = CFRetain(v23);
    v26[1] = v24;
    if (v25) {
      CFTypeRef v27 = CFRetain(v25);
    }
    else {
      CFTypeRef v27 = 0;
    }
    v26[2] = v27;
    dispatch_async_f(*(dispatch_queue_t *)(*v1 + 24), v26, (dispatch_function_t)frlo_invokeCallbackAndDisposeContext);
  }
LABEL_47:
  if (*v1) {
    CFRelease((CFTypeRef)*v1);
  }
  if (theArray) {
    CFRelease(theArray);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v22) {
    CFRelease(v22);
  }
  if (v23) {
    CFRelease(v23);
  }
  CFNumberRef v28 = (const void *)v1[2];
  if (v28) {
    CFRelease(v28);
  }
  if (v34) {
    CFRelease(v34);
  }
  free(v1);
}

void frlo_invokeCallbackAndDisposeContext(void *a1)
{
  if (a1[1])
  {
    if (a1[2])
    {
      uint64_t v2 = FigCFWeakReferenceHolderCopyReferencedObject();
      if (v2)
      {
        CFTypeRef v3 = (const void *)v2;
        ((void (*)(void, uint64_t))a1[1])(*a1, v2);
        CFRelease(v3);
      }
    }
  }
  if (*a1) {
    CFRelease((CFTypeRef)*a1);
  }
  CFTypeRef v4 = (const void *)a1[2];
  if (v4) {
    CFRelease(v4);
  }

  free(a1);
}

void frlo_renderPipelineDidFlushDo(void *a1)
{
  uint64_t v2 = (const void *)a1[1];
  if (v2)
  {
    CFNumberRef Value = (const void **)CFDictionaryGetValue(*(CFDictionaryRef *)(*a1 + 64), v2);
    if (Value)
    {
      CFTypeRef v4 = *Value;
      uint64_t v6 = *(void *)(*a1 + 40);
      CFAllocatorRef v5 = *(const void **)(*a1 + 48);
      CFMutableArrayRef v7 = malloc_type_calloc(1uLL, 0x18uLL, 0xE00403260BBE2uLL);
      if (v4) {
        CFTypeRef v8 = CFRetain(v4);
      }
      else {
        CFTypeRef v8 = 0;
      }
      *CFMutableArrayRef v7 = v8;
      v7[1] = v6;
      if (v5) {
        CFTypeRef v9 = CFRetain(v5);
      }
      else {
        CFTypeRef v9 = 0;
      }
      uint64_t v7[2] = v9;
      dispatch_async_f(*(dispatch_queue_t *)(*a1 + 24), v7, (dispatch_function_t)frlo_invokeFlushCallbackAndDisposeContext);
    }
  }
  if (*a1) {
    CFRelease((CFTypeRef)*a1);
  }
  CFDataRef v10 = (const void *)a1[1];
  if (v10) {
    CFRelease(v10);
  }

  free(a1);
}

void frlo_invokeFlushCallbackAndDisposeContext(void *a1)
{
  if (a1[1])
  {
    if (a1[2])
    {
      uint64_t v2 = FigCFWeakReferenceHolderCopyReferencedObject();
      if (v2)
      {
        CFTypeRef v3 = (const void *)v2;
        ((void (*)(void, uint64_t))a1[1])(*a1, v2);
        CFRelease(v3);
      }
    }
  }
  if (*a1) {
    CFRelease((CFTypeRef)*a1);
  }
  CFTypeRef v4 = (const void *)a1[2];
  if (v4) {
    CFRelease(v4);
  }

  free(a1);
}

void frlo_forgetAboutRenderPipelines(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(const void **)(a2 + 56);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a2 + 56) = 0;
  }
}

void frlo_forgetAboutRenderPipeline(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFTypeRef v4 = (void *)(a2 + 48);
  CFTypeRef v3 = *(const void **)(a2 + 48);
  CFAllocatorRef v5 = *(const void **)(a3 + 8);
  if (v3 == v5)
  {
    if (!v3) {
      return;
    }
    goto LABEL_8;
  }
  CFTypeRef v8 = *(const void **)(a2 + 56);
  uint64_t v6 = (void *)(a2 + 56);
  CFMutableArrayRef v7 = v8;
  if (v8 == v5 && v7 != 0)
  {
    CFTypeRef v3 = *(const void **)(a3 + 8);
    CFTypeRef v4 = v6;
LABEL_8:
    CFRelease(v3);
    *CFTypeRef v4 = 0;
  }
}

uint64_t FigMetadataSerializerCreateForiTunes(uint64_t a1, void *a2)
{
  if (a2)
  {
    FigMetadataSerializerGetClassID();
    uint64_t v3 = CMDerivedObjectCreate();
    if (!v3)
    {
      CMBaseObjectGetDerivedStorage();
      *a2 = 0;
    }
    return v3;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void FigiTunesMetadataSerializerFinalize()
{
  uint64_t DerivedStorage = (const void **)CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    CFStringRef v1 = DerivedStorage;
    uint64_t v2 = *DerivedStorage;
    if (v2)
    {
      CFRelease(v2);
      void *v1 = 0;
    }
    uint64_t v3 = v1[1];
    if (v3)
    {
      CFRelease(v3);
      v1[1] = 0;
    }
  }
  else
  {
    FigSignalErrorAt();
  }
}

__CFString *FigiTunesMetadataSerializerCopyDebugDescription()
{
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    uint64_t v2 = DerivedStorage;
    CFStringAppendFormat(Mutable, 0, @" FigiTunesMetadataSerializer %p\n", DerivedStorage);
    CFStringAppendFormat(Mutable, 0, @"  - handle name: %@\n", *(void *)(v2 + 8));
    CFStringAppendFormat(Mutable, 0, @"  - free atom size: %d\n", *(unsigned int *)(v2 + 16));
    CFStringAppendFormat(Mutable, 0, @"  - minimum container size: %d\n", *(unsigned int *)(v2 + 20));
    CFStringAppendFormat(Mutable, 0, @"%@", *(void *)v2);
  }
  else
  {
    FigSignalErrorAt();
  }
  return Mutable;
}

uint64_t FigiTunesMetadataSerializerCopyProperty(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    CFMutableArrayRef v7 = (__CFString **)DerivedStorage;
    if (CFEqual(a2, @"handlerName"))
    {
      CFTypeRef v8 = v7[1];
      if (!v8) {
        return 4294954513;
      }
      goto LABEL_4;
    }
    if (CFEqual(a2, @"freeAtomSize"))
    {
      CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      uint64_t v11 = v7 + 2;
LABEL_10:
      CFTypeRef v9 = CFNumberCreate(v10, kCFNumberSInt32Type, v11);
      goto LABEL_11;
    }
    if (CFEqual(a2, @"minimumSize"))
    {
      CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      uint64_t v11 = (char *)v7 + 20;
      goto LABEL_10;
    }
    if (CFEqual(a2, @"format"))
    {
      CFTypeRef v8 = @"com.apple.itunes";
LABEL_4:
      CFTypeRef v9 = (void *)CFRetain(v8);
LABEL_11:
      CMTime v13 = v9;
      uint64_t result = 0;
      *a4 = v13;
      return result;
    }
    return 4294954512;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigiTunesMetadataSerializerSetProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage) {
    goto LABEL_18;
  }
  uint64_t v6 = DerivedStorage;
  if (!CFEqual(@"handlerName", a2))
  {
    if (CFEqual(@"freeAtomSize", a2))
    {
      if (!a3) {
        goto LABEL_18;
      }
      CFTypeID TypeID = CFNumberGetTypeID();
      if (TypeID != CFGetTypeID(a3)) {
        goto LABEL_18;
      }
      int valuePtr = 0;
      if (CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, &valuePtr))
      {
        uint64_t result = 0;
        *(_DWORD *)(v6 + 16) = valuePtr;
        return result;
      }
    }
    else
    {
      if (!CFEqual(@"minimumSize", a2)) {
        return 4294954710;
      }
      if (!a3) {
        goto LABEL_18;
      }
      CFTypeID v11 = CFNumberGetTypeID();
      if (v11 != CFGetTypeID(a3)) {
        goto LABEL_18;
      }
      int v12 = 0;
      if (CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, &v12))
      {
        uint64_t result = 0;
        *(_DWORD *)(v6 + 20) = v12;
        return result;
      }
    }
    return FigSignalErrorAt();
  }
  if (a3)
  {
    CFTypeID v7 = CFStringGetTypeID();
    if (v7 == CFGetTypeID(a3))
    {
      CFTypeRef v8 = *(const void **)(v6 + 8);
      *(void *)(v6 + 8) = CFRetain(a3);
      if (v8) {
        CFRelease(v8);
      }
      return 0;
    }
  }
LABEL_18:

  return FigSignalErrorAt();
}

uint64_t FigiTunesMetadataSerializerAddItem(const void *a1, __CFString *a2, const __CFString *a3, const void *a4, const __CFDictionary *a5)
{
  CFTypeRef cf = 0;
  CMTimeValue value = 0;
  CFTypeRef v24 = 0;
  key = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage || !a2 || !a3 || !a4) {
    goto LABEL_31;
  }
  CFTypeID v11 = (CFMutableDictionaryRef *)DerivedStorage;
  CFAllocatorRef v12 = CFGetAllocator(a1);
  uint64_t ActualKey = FigiTunesMetadataCreateActualKey(v12, a2, a3, (unint64_t)&v24, (unint64_t)&key);
  if (ActualKey)
  {
LABEL_32:
    uint64_t NewItem = ActualKey;
    goto LABEL_16;
  }
  CFDictionaryRef Mutable = *v11;
  if (!*v11)
  {
    CFAllocatorRef v15 = CFGetAllocator(a1);
    CFDictionaryRef Mutable = CFDictionaryCreateMutable(v15, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    *CFTypeID v11 = Mutable;
    if (!Mutable)
    {
LABEL_31:
      uint64_t ActualKey = FigSignalErrorAt();
      goto LABEL_32;
    }
  }
  if (!CFDictionaryGetValueIfPresent(Mutable, key, (const void **)&value))
  {
    uint64_t NewItem = FigiTunesMetadataCreateNewItem(a1, v24, a4, a5, (__CFDictionary **)&cf);
    if (!NewItem)
    {
      CVReturn v20 = (__CFArray *)cf;
      CFDictionarySetValue(*v11, key, cf);
      goto LABEL_24;
    }
    goto LABEL_16;
  }
  CFTypeID v16 = CFGetTypeID(value);
  if (v16 != CFDictionaryGetTypeID())
  {
    uint64_t NewItem = FigiTunesMetadataCreateNewItem(a1, v24, a4, a5, (__CFDictionary **)&cf);
    if (!NewItem)
    {
      CVReturn v20 = (__CFArray *)cf;
      CFArrayAppendValue((CFMutableArrayRef)value, cf);
      goto LABEL_24;
    }
    goto LABEL_16;
  }
  uint64_t v17 = value;
  uint64_t ActualKey = FigiTunesMetadataCreateNewItem(a1, v24, a4, a5, (__CFDictionary **)&cf);
  if (ActualKey) {
    goto LABEL_32;
  }
  CFAllocatorRef v18 = CFGetAllocator(a1);
  CFMutableArrayRef v19 = CFArrayCreateMutable(v18, 0, MEMORY[0x1E4F1D510]);
  CVReturn v20 = v19;
  if (value)
  {
    CFArrayAppendValue(v19, v17);
    CFTypeRef v21 = cf;
    CFArrayAppendValue(v20, cf);
    CFDictionarySetValue(*v11, key, v20);
    if (v21)
    {
      CFRelease(v21);
      CFTypeRef cf = 0;
    }
    if (v20)
    {
      CFRelease(v20);
      uint64_t NewItem = 0;
LABEL_16:
      CVReturn v20 = 0;
      goto LABEL_22;
    }
    uint64_t NewItem = 0;
  }
  else
  {
    uint64_t NewItem = FigSignalErrorAt();
  }
LABEL_22:
  if (cf) {
    CFRelease(cf);
  }
LABEL_24:
  if (v20) {
    CFRelease(v20);
  }
  if (key) {
    CFRelease(key);
  }
  if (v24) {
    CFRelease(v24);
  }
  return NewItem;
}

uint64_t FigiTunesMetadataSerializerContainsKey(const void *a1, __CFString *a2, const __CFString *a3)
{
  key = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
  {
    FigSignalErrorAt();
    return 0;
  }
  if (a2 && a3)
  {
    CFTypeID v7 = (CFDictionaryRef *)DerivedStorage;
    CFAllocatorRef v8 = CFGetAllocator(a1);
    if (!FigiTunesMetadataCreateActualKey(v8, a2, a3, 0, (unint64_t)&key) && *v7)
    {
      uint64_t v9 = CFDictionaryContainsKey(*v7, key);
      goto LABEL_10;
    }
  }
  else
  {
    FigSignalErrorAt();
  }
  uint64_t v9 = 0;
LABEL_10:
  if (key) {
    CFRelease(key);
  }
  return v9;
}

uint64_t FigiTunesMetadataCreateActualKey(const __CFAllocator *a1, __CFString *a2, const __CFString *a3, unint64_t a4, unint64_t a5)
{
  uint64_t CommonKeyToShortKeyMapping = FigiTunesMetadataGetCommonKeyToShortKeyMapping();
  if (!(a4 | a5)) {
    goto LABEL_28;
  }
  CFDictionaryRef v11 = (const __CFDictionary *)CommonKeyToShortKeyMapping;
  unsigned int valuePtr = 0;
  if (!CFEqual(a2, @"comn"))
  {
    if (!CFEqual(a2, @"itsk"))
    {
      if (!CFEqual(a2, @"itlk")) {
        goto LABEL_28;
      }
      CFTypeID v18 = CFGetTypeID(a3);
      if (v18 != CFStringGetTypeID()) {
        goto LABEL_28;
      }
      CFAllocatorRef v15 = CFRetain(a3);
LABEL_17:
      if (a5)
      {
        *(void *)a5 = v15;
        CFAllocatorRef v15 = 0;
      }
      if (a4)
      {
        if (a2) {
          CFTypeRef v21 = CFRetain(a2);
        }
        else {
          CFTypeRef v21 = 0;
        }
        uint64_t v22 = 0;
        *(void *)a4 = v21;
        if (!v15) {
          return v22;
        }
      }
      else
      {
        uint64_t v22 = 0;
        if (!v15) {
          return v22;
        }
      }
      goto LABEL_26;
    }
    CFTypeID v16 = CFGetTypeID(a3);
    if (v16 == CFStringGetTypeID())
    {
      if (FigiTunesMetadataShortStringKeyToOSTypeKey(a3, &valuePtr))
      {
        uint64_t v17 = (void *)CFRetain(a3);
        goto LABEL_16;
      }
    }
    else
    {
      CFTypeID v19 = CFGetTypeID(a3);
      if (v19 != CFNumberGetTypeID()) {
        goto LABEL_28;
      }
      if (CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, &valuePtr))
      {
        unsigned int v20 = bswap32(valuePtr);
        uint64_t v17 = (void *)CFStringCreateWithFormat(a1, 0, @"%c%c%c%c", v20, BYTE1(v20), BYTE2(v20), HIBYTE(v20));
LABEL_16:
        CFAllocatorRef v15 = v17;
        if (valuePtr == 757935405)
        {
          uint64_t v22 = FigSignalErrorAt();
          if (!v15) {
            return v22;
          }
LABEL_26:
          CFRelease(v15);
          return v22;
        }
        goto LABEL_17;
      }
    }
    return FigSignalErrorAt();
  }
  CFTypeID v12 = CFGetTypeID(a3);
  if (v12 == CFStringGetTypeID())
  {
    unsigned int Value = CFDictionaryGetValue(v11, a3);
    unsigned int valuePtr = Value;
    if (Value)
    {
      unsigned int v14 = bswap32(Value);
      CFAllocatorRef v15 = CFStringCreateWithFormat(a1, 0, @"%c%c%c%c", v14, BYTE1(v14), BYTE2(v14), HIBYTE(v14));
      a2 = @"itsk";
      goto LABEL_17;
    }
  }
LABEL_28:

  return FigSignalErrorAt();
}

uint64_t FigiTunesMetadataCreateNewItem(const void *a1, const void *a2, const void *a3, const __CFDictionary *a4, __CFDictionary **a5)
{
  CFAllocatorRef v9 = CFGetAllocator(a1);
  if (a4) {
    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(v9, 0, a4);
  }
  else {
    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  }
  CFDictionaryRef v11 = MutableCopy;
  if (MutableCopy)
  {
    CFDictionarySetValue(MutableCopy, @"value", a3);
    CFDictionarySetValue(v11, @"keyspace", a2);
    *a5 = v11;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigiTunesMetadataSerializerCreateBBuf(const void *a1, CMBlockBufferRef *a2)
{
  uint64_t v21 = 0;
  CMBlockBufferRef blockBufferOut = 0;
  memset(v20, 0, sizeof(v20));
  uint64_t DerivedStorage = (const __CFDictionary **)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
  {
    uint64_t v8 = FigSignalErrorAt();
    CMBlockBufferRef v9 = 0;
    goto LABEL_34;
  }
  if (a2)
  {
    CFAllocatorRef v5 = DerivedStorage;
    CFDictionaryRef v6 = *DerivedStorage;
    if ((!v6 || !CFDictionaryGetCount(v6)) && !v5[1] && !*((_DWORD *)v5 + 4) && !*((_DWORD *)v5 + 5))
    {
      CMBlockBufferRef v9 = 0;
      uint64_t v8 = 0;
      goto LABEL_34;
    }
    CFAllocatorRef v7 = CFGetAllocator(a1);
    uint64_t v8 = CMBlockBufferCreateEmpty(v7, 8u, 0, &blockBufferOut);
    CMBlockBufferRef v9 = blockBufferOut;
    if (v8) {
      goto LABEL_43;
    }
    uint64_t v10 = FigAtomWriterInitWithBlockBuffer();
    if (v10)
    {
      uint64_t v8 = v10;
      CMBlockBufferRef v9 = blockBufferOut;
      goto LABEL_43;
    }
    uint64_t v11 = CMBaseObjectGetDerivedStorage();
    uint64_t appended = FigAtomWriterBeginAtom();
    if (appended) {
      goto LABEL_32;
    }
    uint64_t appended = FigAtomWriterAppendVersionAndFlags();
    if (appended) {
      goto LABEL_32;
    }
    uint64_t v24 = 0;
    memset(v23, 0, sizeof(v23));
    uint64_t appended = FigAtomWriterInitWithParent();
    if (appended) {
      goto LABEL_32;
    }
    uint64_t v25 = 0;
    long long context = 0uLL;
    *(void *)&long long v27 = 0;
    WORD4(v27) = 0;
    uint64_t v13 = CMBaseObjectGetDerivedStorage();
    DWORD2(context) = 1919509613;
    uint64_t appended = FigAtomWriterBeginAtom();
    if (appended) {
      goto LABEL_32;
    }
    unsigned int v14 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
    if (*(void *)(v13 + 8))
    {
      uint64_t BytesFromCFString = FigCreateBytesFromCFString();
      if (!BytesFromCFString)
      {
        uint64_t v8 = FigSignalErrorAt();
        if (v8) {
          goto LABEL_33;
        }
        goto LABEL_25;
      }
      CFTypeID v16 = (void *)BytesFromCFString;
    }
    else
    {
      CFTypeID v16 = 0;
    }
    uint64_t v17 = FigAtomWriterAppendData();
    if (!v17)
    {
      if (v25 < 1 || (uint64_t v17 = FigAtomWriterAppendData(), !v17)) {
        uint64_t v17 = FigAtomWriterEndAtom();
      }
    }
    uint64_t v8 = v17;
    if (v16) {
      CFAllocatorDeallocate(*v14, v16);
    }
    if (v8) {
      goto LABEL_33;
    }
LABEL_25:
    CFTypeID v18 = (CFDictionaryRef *)CMBaseObjectGetDerivedStorage();
    uint64_t appended = FigAtomWriterBeginAtom();
    if (!appended)
    {
      uint64_t v29 = 0;
      long long v27 = 0u;
      long long v28 = 0u;
      long long context = 0u;
      uint64_t appended = FigAtomWriterInitWithParent();
      if (!appended)
      {
        if (*v18) {
          CFDictionaryApplyFunction(*v18, (CFDictionaryApplierFunction)FigiTunesMetadataWriteItemAtom, &context);
        }
        uint64_t appended = FigAtomWriterEndAtom();
        if (!appended)
        {
          uint64_t appended = FigMetadataWriteFreeAtom((uint64_t)v20, (uint64_t)v23, *(unsigned int *)(v11 + 16), *(unsigned int *)(v11 + 20));
          if (!appended) {
            uint64_t appended = FigAtomWriterEndAtom();
          }
        }
      }
    }
LABEL_32:
    uint64_t v8 = appended;
LABEL_33:
    CMBlockBufferRef v9 = blockBufferOut;
LABEL_34:
    if (a2 && !v8)
    {
      *a2 = v9;
      return v8;
    }
LABEL_43:
    if (v9) {
      CFRelease(v9);
    }
    return v8;
  }

  return FigSignalErrorAt();
}

uint64_t FigiTunesMetadataSerializerCreateCopy(const __CFAllocator *a1, uint64_t a2, void *a3)
{
  uint64_t v13 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
  {
    uint64_t v7 = FigSignalErrorAt();
    uint64_t v8 = 0;
    if (!a3) {
      goto LABEL_13;
    }
    goto LABEL_10;
  }
  if (a3)
  {
    uint64_t v6 = DerivedStorage;
    uint64_t v7 = FigMetadataSerializerCreateForiTunes((uint64_t)a1, &v13);
    uint64_t v8 = v13;
    if (v7) {
      goto LABEL_13;
    }
    CMBlockBufferRef v9 = (void *)CMBaseObjectGetDerivedStorage();
    if (*(void *)v6) {
      CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(a1, 0, *(CFDictionaryRef *)v6);
    }
    else {
      CFMutableDictionaryRef MutableCopy = 0;
    }
    *CMBlockBufferRef v9 = MutableCopy;
    CFTypeRef v11 = *(CFTypeRef *)(v6 + 8);
    if (v11) {
      CFTypeRef v11 = CFRetain(v11);
    }
    uint64_t v7 = 0;
    v9[1] = v11;
    v9[2] = *(void *)(v6 + 16);
    uint64_t v8 = v13;
LABEL_10:
    if (!v7)
    {
      *a3 = v8;
      return v7;
    }
LABEL_13:
    if (v8) {
      CFRelease(v8);
    }
    return v7;
  }

  return FigSignalErrorAt();
}

void FigiTunesMetadataWriteItemAtom(const __CFString *a1, CFTypeRef cf)
{
  CFTypeID v4 = CFGetTypeID(cf);
  CFTypeID TypeID = CFDictionaryGetTypeID();
  CFDictionaryRef ValueAtIndex = (const __CFDictionary *)cf;
  if (v4 != TypeID) {
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)cf, 0);
  }
  uint64_t v20 = 0;
  memset(v19, 0, sizeof(v19));
  unsigned int Value = CFDictionaryGetValue(ValueAtIndex, @"keyspace");
  if (CFEqual(Value, @"itsk"))
  {
    LODWORD(result.location) = 0;
    FigiTunesMetadataShortStringKeyToOSTypeKey(a1, (unsigned int *)&result);
    if (FigAtomWriterBeginAtom() || FigAtomWriterInitWithParent()) {
      return;
    }
    goto LABEL_6;
  }
  if (!CFEqual(Value, @"itlk"))
  {
    FigSignalErrorAt();
    return;
  }
  if (FigAtomWriterBeginAtom() || FigAtomWriterInitWithParent()) {
    return;
  }
  if (CFStringHasPrefix(a1, @"com.apple.iTunes."))
  {
    result.location = 0;
    result.CFIndex length = 0;
    CFIndex Length = CFStringGetLength(a1);
    uint64_t v21 = 0;
    v24.location = 0;
    v24.CFIndex length = Length;
    if (CFStringFindWithOptions(a1, @".", v24, 4uLL, &result))
    {
      int appended = FigAtomWriterBeginAtom();
      if (!appended)
      {
        int appended = FigAtomWriterAppendVersionAndFlags();
        if (!appended)
        {
          strlen(FigiTunesMetadataWriteMeaningAndNameAtoms_longMeaning);
          int appended = FigAtomWriterAppendData();
          if (!appended)
          {
            int appended = FigAtomWriterEndAtom();
            if (!appended)
            {
              int appended = FigAtomWriterBeginAtom();
              if (!appended)
              {
                int appended = FigAtomWriterAppendVersionAndFlags();
                if (!appended)
                {
                  CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
                  v25.location = result.location + 1;
                  v25.CFIndex length = Length + ~result.location;
                  CFStringRef v13 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a1, v25);
                  if (v13)
                  {
                    CFStringRef v14 = v13;
                    uint64_t BytesFromCFString = FigCreateBytesFromCFString();
                    if (BytesFromCFString)
                    {
                      CFTypeID v16 = (void *)BytesFromCFString;
                      int v17 = FigAtomWriterAppendData();
                      CFAllocatorDeallocate(v12, v16);
                      if (v17) {
                        goto LABEL_32;
                      }
                      int v18 = FigAtomWriterEndAtom();
                    }
                    else
                    {
                      int v18 = FigSignalErrorAt();
                    }
                    int v17 = v18;
LABEL_32:
                    CFRelease(v14);
                    if (v17) {
                      return;
                    }
                    goto LABEL_6;
                  }
                  int appended = FigSignalErrorAt();
                }
              }
            }
          }
        }
      }
      if (appended) {
        return;
      }
    }
  }
LABEL_6:
  if (v4 == TypeID)
  {
    if (FigiTunesMetadataWriteItemDataAtom((uint64_t)v19, ValueAtIndex)) {
      return;
    }
    goto LABEL_14;
  }
  if (CFArrayGetCount((CFArrayRef)cf) < 1)
  {
LABEL_14:
    FigAtomWriterEndAtom();
    return;
  }
  CFIndex v8 = 0;
  while (1)
  {
    CFDictionaryRef v9 = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)cf, v8);
    if (v9)
    {
      if (FigiTunesMetadataWriteItemDataAtom((uint64_t)v19, v9)) {
        break;
      }
    }
    if (++v8 >= CFArrayGetCount((CFArrayRef)cf)) {
      goto LABEL_14;
    }
  }
}

uint64_t FigiTunesMetadataWriteItemDataAtom(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t v25 = 0;
  unsigned int v24 = 0;
  *(void *)CFDictionaryRef v23 = 0;
  uint64_t appended = FigAtomWriterBeginAtom();
  if (appended) {
    return appended;
  }
  unsigned int Value = CFDictionaryGetValue(a2, @"value");
  if (!FigMetadataGetNumericalDataTypeForMetadataProperties(@"com.apple.itunes", a2, @"com.apple.itunes", &v24, (uint64_t *)v23))
  {
    if (v24 != 21 || !Value) {
      goto LABEL_20;
    }
    CFTypeID v7 = CFGetTypeID(Value);
    if (v7 == CFNumberGetTypeID())
    {
      char v8 = v23[0];
      if (!*(void *)v23) {
        goto LABEL_20;
      }
    }
    else
    {
      CFTypeID v9 = CFGetTypeID(Value);
      CFTypeID TypeID = CFBooleanGetTypeID();
      char v8 = v23[0];
      if (v9 != TypeID || *(void *)v23 == 0) {
        goto LABEL_20;
      }
    }
    if (!FigMetadataDataLengthCanHoldValue(v8, 1, (CFNumberRef)Value)) {
      *(void *)CFDictionaryRef v23 = 0;
    }
    goto LABEL_20;
  }
  CFTypeID v5 = CFGetTypeID(Value);
  if (v5 != CFStringGetTypeID())
  {
    if (v5 == CFNumberGetTypeID() || v5 == CFBooleanGetTypeID())
    {
      int v6 = 21;
      goto LABEL_13;
    }
LABEL_20:
    LOBYTE(v6) = v24;
    goto LABEL_21;
  }
  int v6 = 1;
LABEL_13:
  unsigned int v24 = v6;
LABEL_21:
  HIBYTE(v25) = v6;
  uint64_t appended = FigAtomWriterAppendData();
  if (appended) {
    return appended;
  }
  uint64_t appended = FigAtomWriterAppendData();
  if (appended) {
    return appended;
  }
  if (v24 > 0x19) {
    goto LABEL_39;
  }
  if (((1 << v24) & 0x2008606) == 0)
  {
    if (v24 == 21)
    {
      CFTypeID v18 = CFGetTypeID(Value);
      if (v18 == CFNumberGetTypeID() || (CFTypeID v19 = CFGetTypeID(Value), v19 == CFBooleanGetTypeID()))
      {
        CFIndex ByteSize = *(void *)v23;
        if (!*(void *)v23) {
          CFIndex ByteSize = CFNumberGetByteSize((CFNumberRef)Value);
        }
        uint64_t v16 = 4294954709;
        switch(ByteSize)
        {
          case 1:
            LOBYTE(v22) = 0;
            if (!CFNumberGetValue((CFNumberRef)Value, kCFNumberSInt8Type, &v22)) {
              return FigAtomWriterEndAtom();
            }
            goto LABEL_48;
          case 2:
            LOWORD(v22) = 0;
            if (!CFNumberGetValue((CFNumberRef)Value, kCFNumberSInt16Type, &v22)) {
              return FigAtomWriterEndAtom();
            }
            LOWORD(v22) = bswap32((unsigned __int16)v22) >> 16;
            goto LABEL_48;
          case 4:
            LODWORD(v22) = 0;
            if (!CFNumberGetValue((CFNumberRef)Value, kCFNumberSInt32Type, &v22)) {
              return FigAtomWriterEndAtom();
            }
            LODWORD(v22) = bswap32(v22);
            goto LABEL_48;
          case 8:
            unint64_t v22 = 0;
            if (!CFNumberGetValue((CFNumberRef)Value, kCFNumberSInt64Type, &v22)) {
              return FigAtomWriterEndAtom();
            }
            unint64_t v22 = bswap64(v22);
LABEL_48:
            uint64_t appended = FigAtomWriterAppendData();
            if (appended) {
              return appended;
            }
            return FigAtomWriterEndAtom();
          default:
            return v16;
        }
      }
      return FigAtomWriterEndAtom();
    }
LABEL_39:
    CFTypeID v21 = CFGetTypeID(Value);
    if (v21 != CFDataGetTypeID()) {
      return FigAtomWriterEndAtom();
    }
    CFDataGetLength((CFDataRef)Value);
    CFDataGetBytePtr((CFDataRef)Value);
    uint64_t v16 = FigAtomWriterAppendData();
    if (!v16) {
      return FigAtomWriterEndAtom();
    }
    return v16;
  }
  CFTypeID v12 = CFGetTypeID(Value);
  if (v12 != CFStringGetTypeID()) {
    return FigAtomWriterEndAtom();
  }
  unint64_t v22 = 0;
  CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t BytesFromCFString = FigCreateBytesFromCFString();
  if (!BytesFromCFString) {
    return FigSignalErrorAt();
  }
  CFAllocatorRef v15 = (void *)BytesFromCFString;
  uint64_t v16 = FigAtomWriterAppendData();
  CFAllocatorDeallocate(v13, v15);
  if (!v16) {
    return FigAtomWriterEndAtom();
  }
  return v16;
}

uint64_t FigPhotoSurfacePoolGetTypeID()
{
  return MEMORY[0x1F410DBC0]();
}

uint64_t FigPhotoSurfacePoolCreate()
{
  return MEMORY[0x1F410DB88]();
}

uint64_t FigPhotoSurfacePoolCreateMemorySurface()
{
  return MEMORY[0x1F410DB98]();
}

uint64_t FigPhotoSurfacePoolCreateImageSurface()
{
  return MEMORY[0x1F410DB90]();
}

uint64_t FigPhotoSurfacePoolDetachMemorySurface()
{
  return MEMORY[0x1F410DBB0]();
}

uint64_t FigPhotoSurfacePoolDetachImageSurface()
{
  return MEMORY[0x1F410DBA8]();
}

uint64_t FigPhotoSurfacePoolCreatePixelBuffer()
{
  return MEMORY[0x1F410DBA0]();
}

uint64_t FigPhotoSurfacePoolDiscardCaches()
{
  return MEMORY[0x1F410DBB8]();
}

uint64_t FigEndpointManagerForNeroGetShared()
{
  if (LoadOctaviaPlugin_sCreateOnce != -1) {
    dispatch_once(&LoadOctaviaPlugin_sCreateOnce, &__block_literal_global_28);
  }
  uint64_t v1 = 0;
  if (!sFigNeroEndpointManagerGetShared) {
    return 0;
  }
  sFigNeroEndpointManagerGetShared(&v1);
  return v1;
}

uint64_t FigEndpointManagerForCameraPreviewGetShared()
{
  if (LoadOctaviaPlugin_sCreateOnce != -1) {
    dispatch_once(&LoadOctaviaPlugin_sCreateOnce, &__block_literal_global_28);
  }
  uint64_t v1 = 0;
  if (!sFigNeroEndpointManagerForCameraPreviewGetShared) {
    return 0;
  }
  sFigNeroEndpointManagerForCameraPreviewGetShared(&v1);
  return v1;
}

uint64_t FigAssetReaderCreateWithURLAndFormatReader(const __CFAllocator *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, CFTypeRef *a6)
{
  CFTypeRef cf = 0;
  CFTypeRef v15 = 0;
  FigKTraceInit();
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
  FigCFDictionaryGetBooleanIfPresent();
  FigCFDictionaryGetBooleanIfPresent();
  if (!(a2 | a3) || !a6 || a2 && !FigCFURLIsLocalResource())
  {
    uint64_t v12 = FigSignalErrorAt();
    goto LABEL_15;
  }
  if (a3)
  {
    uint64_t v11 = FigAssetCreateWithFormatReader((uint64_t)a1, (const void *)a3, 1, 0, &cf);
    if (!v11) {
      goto LABEL_13;
    }
LABEL_21:
    uint64_t v12 = v11;
    goto LABEL_15;
  }
  if (a2)
  {
    uint64_t v11 = FigAssetCreateWithURL((uint64_t)a1, a2, 1, 0, &cf);
    if (v11) {
      goto LABEL_21;
    }
  }
LABEL_13:
  uint64_t v12 = FigAssetReaderCreateWithAsset(a1, cf, a5, &v15);
  if (v12)
  {
    if (v15) {
      CFRelease(v15);
    }
  }
  else
  {
    *a6 = v15;
    CFTypeRef v15 = 0;
  }
LABEL_15:
  if (cf) {
    CFRelease(cf);
  }
  return v12;
}

uint64_t FigAssetReaderCreateWithAsset(const __CFAllocator *a1, const void *a2, uint64_t a3, void *a4)
{
  int IsServerProcess = FigServer_IsServerProcess();
  FigKTraceInit();
  if (!a2 || !a4)
  {
    uint64_t v12 = FigSignalErrorAt();
    char v8 = 0;
    goto LABEL_17;
  }
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
  if (IsServerProcess)
  {
    char v8 = (void *)FigOSTransactionCreate();
    if (!v8)
    {
LABEL_23:
      uint64_t LoggingIdentifier = FigSignalErrorAt();
      goto LABEL_24;
    }
  }
  else
  {
    char v8 = 0;
  }
  FigAssetReaderGetClassID();
  uint64_t LoggingIdentifier = CMDerivedObjectCreate();
  if (LoggingIdentifier) {
    goto LABEL_24;
  }
  uint64_t Storage = remakerFamily_getStorage(0);
  uint64_t LoggingIdentifier = remakerFamily_generateLoggingIdentifier(82, (char *)(Storage + 41));
  if (LoggingIdentifier) {
    goto LABEL_24;
  }
  *(_DWORD *)(Storage + 456) = -1;
  *(void *)(Storage + 72) = CFRetain(a2);
  FigCFDictionaryGetBooleanIfPresent();
  if (!*(unsigned char *)(Storage + 32))
  {
    *(void *)(Storage + 56) = 0;
    if (!IsServerProcess)
    {
LABEL_15:
      CFMutableArrayRef Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E4F1D510]);
      *(void *)(Storage + 80) = Mutable;
      if (Mutable)
      {
        *(void *)(Storage + 8) = FigReentrantMutexCreate();
        *(void *)(Storage + 64) = FigReentrantMutexCreate();
        remakerFamily_initializePowerLog(0);
        remakerFamily_SetRemakerState(0, 1, 0);
        uint64_t v12 = 0;
        *a4 = 0;
        goto LABEL_17;
      }
      goto LABEL_23;
    }
LABEL_14:
    *(void *)(Storage + 448) = v8;
    char v8 = 0;
    goto LABEL_15;
  }
  uint64_t LoggingIdentifier = assetReader_ensureRemakerQueue();
  if (!LoggingIdentifier)
  {
    if (!IsServerProcess) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
LABEL_24:
  uint64_t v12 = LoggingIdentifier;
LABEL_17:
  if (v8) {
    os_release(v8);
  }
  return v12;
}

uint64_t assetReader_ensureRemakerQueue()
{
  uint64_t Storage = remakerFamily_getStorage();
  if (*(void *)(Storage + 56)) {
    return 0;
  }
  uint64_t v1 = Storage;
  uint64_t v2 = FigDispatchQueueCreateWithPriorityAndClientPID();
  *(void *)(v1 + 56) = v2;
  if (v2) {
    return 0;
  }

  return FigSignalErrorAt();
}

uint64_t assetReader_SetProperty(const void *a1, const void *a2, const void *a3)
{
  uint64_t Storage = (_DWORD *)remakerFamily_getStorage(a1);
  if (*Storage != 1) {
    goto LABEL_34;
  }
  CFTypeID v7 = Storage;
  if (!CFEqual(a2, @"AssetReader_ClientSecTask"))
  {
    if (CFEqual(a2, @"AssetReader_ClientPID"))
    {
      if (a3)
      {
        CFTypeID v11 = CFGetTypeID(a3);
        if (v11 == CFNumberGetTypeID())
        {
          CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, v7 + 9);
          return remakerfamily_updateClientPID();
        }
      }
    }
    else if (CFEqual(a2, @"AssetReader_ThrottleForBackground"))
    {
      if (a3)
      {
        CFTypeID v12 = CFGetTypeID(a3);
        if (v12 == CFBooleanGetTypeID())
        {
          *((unsigned char *)v7 + 40) = CFBooleanGetValue((CFBooleanRef)a3);
          return remakerfamily_updateThrottleForBackground(a1);
        }
      }
    }
    else if (CFEqual(a2, @"AssetReader_IOPolicy"))
    {
      if (a3)
      {
        CFTypeID v13 = CFGetTypeID(a3);
        if (v13 == CFNumberGetTypeID())
        {
          CFNumberGetValue((CFNumberRef)a3, kCFNumberIntType, v7 + 114);
          return remakerfamily_updateIOPolicy();
        }
      }
    }
    else
    {
      if (!CFEqual(a2, @"AssetReader_RealTime")) {
        return 4294954512;
      }
      if (a3)
      {
        CFTypeID v14 = CFGetTypeID(a3);
        if (v14 == CFBooleanGetTypeID())
        {
          Boolean Value = CFBooleanGetValue((CFBooleanRef)a3);
          uint64_t result = 0;
          *((unsigned char *)v7 + 32) = Value;
          return result;
        }
      }
    }
LABEL_34:
    return FigSignalErrorAt();
  }
  if (a3)
  {
    CFTypeID v8 = CFGetTypeID(a3);
    if (v8 == SecTaskGetTypeID())
    {
      CFTypeID v9 = (const void *)*((void *)v7 + 55);
      *((void *)v7 + 55) = a3;
      CFRetain(a3);
      if (v9) {
        CFRelease(v9);
      }
      return 0;
    }
    goto LABEL_34;
  }
  uint64_t result = *((void *)v7 + 55);
  if (result)
  {
    CFRelease((CFTypeRef)result);
    uint64_t result = 0;
    *((void *)v7 + 55) = 0;
  }
  return result;
}

uint64_t assetReader_EnableOriginalSampleExtractionFromTrack(const void *a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  return assetReader_enableOriginalSampleExtractionFromTrackCommon(a1, a2, a3, 0, a4);
}

uint64_t assetReader_EnableOriginalSampleReferenceExtractionFromTrack(const void *a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  return assetReader_enableOriginalSampleExtractionFromTrackCommon(a1, a2, a3, 1, a4);
}

uint64_t assetReader_EnableDecodedAudioExtractionFromTrack(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v14) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0;
  }
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, uint64_t, uint64_t))(v15 + 112);
  if (v16) {
    return v16(a1, a2, a3, a4, a5, 0, 0, a6, a7);
  }
  else {
    return 4294954514;
  }
}

uint64_t assetReader_EnableDecodedVideoExtractionFromTrack(const void *a1, uint64_t a2, const void *a3, const __CFDictionary *a4, CMTime *a5, const __CFDictionary *a6, _DWORD *a7)
{
  CFTypeID v13 = a1;
  uint64_t v193 = *MEMORY[0x1E4F143B8];
  uint64_t Storage = remakerFamily_getStorage(a1);
  CFTypeRef v187 = 0;
  uint64_t v188 = 0;
  int v186 = 0;
  __int16 v185 = 0;
  v183 = 0;
  CFTypeRef v184 = 0;
  v181 = 0;
  v182 = 0;
  v179 = 0;
  v180 = 0;
  unsigned __int8 v178 = 1;
  unsigned __int8 v177 = 0;
  CFTypeRef v175 = 0;
  CFArrayRef tagCollectionsOut = 0;
  v174 = 0;
  CFTypeRef v173 = 0;
  if (*(_DWORD *)Storage != 1)
  {
    uint64_t v20 = FigSignalErrorAt();
    goto LABEL_230;
  }
  uint64_t v15 = Storage;
  uint64_t v16 = *(void *)(Storage + 72);
  uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v17) {
    uint64_t v18 = v17;
  }
  else {
    uint64_t v18 = 0;
  }
  CFTypeID v19 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *))(v18 + 40);
  if (v19)
  {
    uint64_t v20 = v19(v16, a2, &v187);
    if (v20) {
      goto LABEL_230;
    }
    CFTypeRef v21 = v187;
    uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v22) {
      uint64_t v23 = v22;
    }
    else {
      uint64_t v23 = 0;
    }
    unsigned int v24 = *(uint64_t (**)(CFTypeRef, void, int *))(v23 + 32);
    if (v24)
    {
      uint64_t v20 = v24(v21, 0, &v186);
      if (!v20)
      {
        if (v186 != 1635088502 && v186 != 1986618469) {
          return FigSignalErrorAt();
        }
        CFTypeID v25 = CFGetTypeID(v13);
        uint64_t v20 = remakerFamily_copyFormatDescription(v25, (uint64_t)v187, &v183);
        if (!v20)
        {
          uint64_t v20 = remakerFamily_createChannel(v13, a2, v186, &v188);
          if (!v20)
          {
            int TrackRotationAngle = remakerFamily_getTrackRotationAngle((uint64_t)v187, (unsigned char *)&v185 + 1, &v185);
            uint64_t v155 = v15;
            v147 = a5;
            if (a6)
            {
              CFTypeRef cf = 0;
              CMTimeValue value = 0;
              if (CFDictionaryGetValueIfPresent(a6, @"AssetReader_MatrixHandling", (const void **)&value)
                && CFEqual(value, @"AssetReader_PreserveMatrix"))
              {
                int TrackRotationAngle = 0;
                __int16 v185 = 0;
              }
              FigCFDictionaryGetBooleanIfPresent();
              FigCFDictionaryGetBooleanIfPresent();
              if (CFDictionaryGetValueIfPresent(a6, @"RemakerVideoProcessingOption_VideoFrameRateConversionAlgorithm", &cf))
              {
                if (cf)
                {
                  CFTypeID v26 = CFGetTypeID(cf);
                  if (v26 == CFStringGetTypeID() && FigCFEqual() && (a5->flags & 0x1D) == 1)
                  {
                    uint64_t v27 = v188;
                    *(unsigned char *)(v188 + 49) = 1;
                    CMTimeEpoch epoch = a5->epoch;
                    *(_OWORD *)(v27 + 328) = *(_OWORD *)&a5->value;
                    *(void *)(v27 + 344) = epoch;
                  }
                }
              }
              if (FigCFDictionaryGetInt32IfPresent() && *(_DWORD *)(v188 + 68))
              {
                FigCFDictionaryGetCMTimeIfPresent();
                FigCFDictionaryGetCMTimeIfPresent();
                FigCFDictionaryGetBooleanIfPresent();
              }
              if (FigCFDictionaryGetBooleanIfPresent() && *(unsigned char *)(v188 + 121)) {
                FigCFDictionaryGetCMTimeIfPresent();
              }
              FigCFDictionaryGetBooleanIfPresent();
              CFArrayRef theArray = 0;
              if (CFDictionaryGetValueIfPresent(a6, (const void *)*MEMORY[0x1E4F44CB8], (const void **)&theArray))
              {
                if (theArray && (uint64_t v29 = CFArrayGetCount(theArray), v29 > 0))
                {
                  CFIndex v30 = v29;
                  unsigned int v140 = a2;
                  CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
                  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v29, MEMORY[0x1E4F1D510]);
                  if (Mutable
                    && (uint64_t v149 = v30, !CMVideoFormatDescriptionCopyTagCollectionArray(v183, &tagCollectionsOut))
                    && tagCollectionsOut
                    && (CFIndex v32 = CFArrayGetCount(tagCollectionsOut), v30 <= v32))
                  {
                    CFIndex v33 = v32;
                    v138 = a7;
                    CFDictionaryRef v139 = a4;
                    CFArrayRef v34 = CFArrayCreateMutable(allocator, v32, MEMORY[0x1E4F1D510]);
                    if (v34)
                    {
                      CFDictionaryRef theDict = a6;
                      CFMutableArrayRef v35 = CFArrayCreateMutable(allocator, v33, MEMORY[0x1E4F1D510]);
                      if (v35)
                      {
                        CFIndex v36 = 0;
                        long long v158 = *MEMORY[0x1E4F1F3D8];
                        do
                        {
                          CFDictionaryRef ValueAtIndex = (const OpaqueCMTagCollection *)CFArrayGetValueAtIndex(tagCollectionsOut, v36);
                          *(_OWORD *)tagBuffer = v158;
                          *(_OWORD *)&v168.CMTimeValue value = v158;
                          CMItemCount numberOfTagsCopied = 0;
                          uint64_t TagsWithCategory = CMTagCollectionGetTagsWithCategory(ValueAtIndex, kCMTagCategory_VideoLayerID, (CMTag *)tagBuffer, 1, &numberOfTagsCopied);
                          if (TagsWithCategory) {
                            goto LABEL_233;
                          }
                          uint64_t TagsWithCategory = CMTagCollectionGetTagsWithCategory(ValueAtIndex, kCMTagCategory_StereoView, (CMTag *)&v168, 1, &numberOfTagsCopied);
                          if (TagsWithCategory) {
                            goto LABEL_233;
                          }
                          FigTagGetSInt64Value();
                          FigCFArrayAppendInt64();
                          FigTagGetFlagsValue();
                          FigCFArrayAppendInt64();
                          ++v36;
                        }
                        while (v33 != v36);
                        uint64_t v39 = 0;
                        uint64_t v40 = v149;
                        do
                        {
                          *(void *)tagBuffer = 0;
                          if (!FigCFArrayGetInt64AtIndex() || !FigCFArrayContainsInt64()) {
                            goto LABEL_232;
                          }
                          ++v39;
                        }
                        while (v149 != v39);
                        CFArrayRef v41 = theArray;
                        v168.CMTimeValue value = 0;
                        if (theArray
                          && (CFTypeID v42 = CFGetTypeID(theArray), v42 == CFArrayGetTypeID())
                          && (CFTypeID v43 = CFGetTypeID(v34), v43 == CFArrayGetTypeID())
                          && (CFTypeID v44 = CFGetTypeID(v35), v44 == CFArrayGetTypeID()))
                        {
                          uint64_t Count = CFArrayGetCount(v41);
                          CFIndex v46 = CFArrayGetCount(v34);
                          v154 = CFArrayCreateMutable(allocator, Count, MEMORY[0x1E4F1D510]);
                          if (v154)
                          {
                            if (Count < 1)
                            {
LABEL_68:
                              a6 = theDict;
                              uint64_t v15 = v155;
                              uint64_t v40 = v149;
LABEL_69:
                              *(unsigned char *)(*(void *)(v188 + 152) + 160) = 1;
                              goto LABEL_111;
                            }
                            uint64_t v47 = 0;
                            while (1)
                            {
                              uint64_t v190 = 0;
                              CMItemCount numberOfTagsCopied = 0;
                              if (!FigCFArrayGetInt64AtIndex()) {
                                break;
                              }
                              if (v46 >= 1)
                              {
                                uint64_t v48 = 0;
                                do
                                {
                                  uint64_t v189 = 0;
                                  if (!FigCFArrayGetInt64AtIndex()) {
                                    goto LABEL_224;
                                  }
                                  if (numberOfTagsCopied == v189)
                                  {
                                    FigCFArrayGetInt64AtIndex();
                                    break;
                                  }
                                }
                                while (v46 != ++v48);
                              }
                              *(CMTag *)tagBuffer = CMTagMakeWithSInt64Value(kCMTagCategory_VideoLayerID, numberOfTagsCopied);
                              *(CMTag *)&tagBuffer[16] = CMTagMakeWithFlagsValue(kCMTagCategory_StereoView, v190);
                              if (CMTagCollectionCreate(allocator, (const CMTag *)tagBuffer, 2, (CMTagCollectionRef *)&v168))
                              {
                                break;
                              }
                              CFArrayAppendValue(v154, (const void *)v168.value);
                              if (v168.value)
                              {
                                CFRelease((CFTypeRef)v168.value);
                                v168.CMTimeValue value = 0;
                              }
                              if (++v47 == Count) {
                                goto LABEL_68;
                              }
                            }
LABEL_224:
                            int v135 = FigSignalErrorAt();
                            a6 = theDict;
                            uint64_t v15 = v155;
                            uint64_t v40 = v149;
                            if (v168.value) {
                              CFRelease((CFTypeRef)v168.value);
                            }
                            CFRelease(v154);
                          }
                          else
                          {
                            int v135 = FigSignalErrorAt();
                            a6 = theDict;
                            uint64_t v15 = v155;
                            uint64_t v40 = v149;
                          }
                        }
                        else
                        {
                          int v135 = FigSignalErrorAt();
                          a6 = theDict;
                        }
                        if (!v135)
                        {
                          v154 = 0;
                          goto LABEL_69;
                        }
                      }
LABEL_232:
                      uint64_t TagsWithCategory = FigSignalErrorAt();
LABEL_233:
                      uint64_t v53 = TagsWithCategory;
                      goto LABEL_156;
                    }
                    uint64_t v53 = FigSignalErrorAt();
                  }
                  else
                  {
                    uint64_t v53 = FigSignalErrorAt();
                    CFArrayRef v34 = 0;
                  }
                  CFMutableArrayRef v35 = 0;
                }
                else
                {
                  uint64_t v53 = FigSignalErrorAt();
                  CFArrayRef v34 = 0;
                  CFMutableArrayRef v35 = 0;
                  CFMutableArrayRef Mutable = 0;
                }
LABEL_156:
                double v49 = 0;
                CFTypeRef v50 = 0;
LABEL_157:
                unsigned int v51 = 0;
                double v52 = 0;
                goto LABEL_71;
              }
              unsigned int v140 = a2;
              v138 = a7;
              CFDictionaryRef v139 = a4;
              v154 = 0;
              uint64_t v40 = 0;
              CFArrayRef v34 = 0;
              CFMutableArrayRef v35 = 0;
              CFMutableArrayRef Mutable = 0;
LABEL_111:
              FigCFDictionaryGetBooleanIfPresent();
            }
            else
            {
              unsigned int v140 = a2;
              v138 = a7;
              CFDictionaryRef v139 = a4;
              v154 = 0;
              uint64_t v40 = 0;
              CFArrayRef v34 = 0;
              CFMutableArrayRef v35 = 0;
              CFMutableArrayRef Mutable = 0;
            }
            if (FigRemakerIsFormatDescriptionProtected(v183))
            {
              uint64_t v56 = FigSignalErrorAt();
            }
            else
            {
              uint64_t v55 = v188;
              *(unsigned char *)(v188 + 50) = 1;
              *(unsigned char *)(*(void *)(v55 + 152) + 28) = 0;
              FigCFDictionaryGetBooleanIfPresent();
              uint64_t v56 = remakerFamily_setupMultiPassTrackIfNecessary(v13, v188);
              if (!v56)
              {
                CFAllocatorRef v57 = CFGetAllocator(v13);
                uint64_t v56 = FigVisualContextCreateBasic((uint64_t)v57, 0, &v184);
                if (!v56)
                {
                  if (*(unsigned char *)(*(void *)(v188 + 152) + 160) && v40 >= 1)
                  {
                    for (uint64_t i = 0; i != v40; ++i)
                    {
                      if (i)
                      {
                        CFAllocatorRef v59 = CFGetAllocator(v13);
                        uint64_t v56 = FigVisualContextCreateBasic((uint64_t)v59, 0, &v175);
                        if (v56) {
                          goto LABEL_237;
                        }
                        CFTypeRef v60 = v175;
                      }
                      else
                      {
                        if (v184) {
                          CFTypeRef v60 = CFRetain(v184);
                        }
                        else {
                          CFTypeRef v60 = 0;
                        }
                        CFTypeRef v175 = v60;
                      }
                      CFArrayAppendValue(Mutable, v60);
                      if (v175)
                      {
                        CFRelease(v175);
                        CFTypeRef v175 = 0;
                      }
                    }
                  }
                  CFArrayRef v146 = v34;
                  CFArrayRef allocatora = Mutable;
                  CFDictionaryRef theDicta = a6;
                  if (!TrackRotationAngle && !v185)
                  {
                    CFTypeRef v61 = v184;
                    if (v184) {
                      CFTypeRef v61 = CFRetain(v184);
                    }
                    *(void *)(*(void *)(v188 + 152) + 112) = v61;
                    if (a3) {
                      CFTypeRef v62 = CFRetain(a3);
                    }
                    else {
                      CFTypeRef v62 = 0;
                    }
                    CFTypeRef v50 = 0;
                    unsigned int v51 = 0;
                    double v52 = 0;
                    v179 = v62;
                    goto LABEL_194;
                  }
                  CFAllocatorRef v63 = CFGetAllocator(v13);
                  CallbacksForUnsortedSampleBuffers = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
                  uint64_t v65 = CMBufferQueueCreate(v63, 0, CallbacksForUnsortedSampleBuffers, (CMBufferQueueRef *)(*(void *)(v188 + 152) + 72));
                  if (v65)
                  {
                    uint64_t v53 = v65;
                    CFTypeRef v50 = 0;
                    goto LABEL_246;
                  }
                  CFIndex v150 = v40;
                  v141 = v35;
                  v66 = v183;
                  if (a3)
                  {
                    v67 = CFDictionaryGetValue((CFDictionaryRef)a3, (const void *)*MEMORY[0x1E4F24D70]);
                    v68 = CFDictionaryGetValue((CFDictionaryRef)a3, (const void *)*MEMORY[0x1E4F24E10]);
                    BOOL v69 = v68 != 0;
                    v70 = CFDictionaryGetValue((CFDictionaryRef)a3, (const void *)*MEMORY[0x1E4F24D08]);
                    BOOL v71 = v70 != 0;
                    if (v67 && v68 && v70)
                    {
                      CFTypeRef v50 = CFRetain(a3);
                      int v72 = TrackRotationAngle;
                      if (!v50) {
                        goto LABEL_152;
                      }
                      goto LABEL_158;
                    }
                    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, (CFDictionaryRef)a3);
                    int v72 = TrackRotationAngle;
                    if (MutableCopy)
                    {
                      CFTypeRef v50 = MutableCopy;
                      if (v67)
                      {
LABEL_149:
                        if (!v71 || !v69)
                        {
                          CMVideoFormatDescriptionGetDimensions(v66);
                          FigCFDictionarySetInt32();
                          FigCFDictionarySetInt32();
                        }
LABEL_158:
                        CFAllocatorRef v75 = CFGetAllocator(v13);
                        int v76 = HIBYTE(v185);
                        int v77 = v185;
                        v78 = (void *)v184;
                        *(CMTime *)tagBuffer = *(CMTime *)(v155 + 88);
                        CMTime v168 = *(CMTime *)(v155 + 112);
                        CMTimeRangeFromTimeToTime(&v169, (CMTime *)tagBuffer, &v168);
                        int v79 = v72;
                        uint64_t v80 = *(void *)(*(void *)(v188 + 152) + 72);
                        CMTimeMake(&v167, 1, 10);
                        CMTimeMake(&v166, 1, 30);
                        if (*(unsigned char *)(v155 + 32)) {
                          int v81 = 30;
                        }
                        else {
                          int v81 = 31;
                        }
                        *(CMTime *)tagBuffer = *v147;
                        uint64_t v82 = FigMediaProcessorCreateForVideoRotation(v75, v79, v76, v77, v50, 0, v78, (uint64_t)tagBuffer, (long long *)&v169.start.value, v80, (uint64_t)&v167, (uint64_t)&v166, 0, v81, (uint64_t *)(v188 + 232));
                        if (v82 || (uint64_t v82 = assetReader_ensureRemakerQueue(), v83 = v150, v82))
                        {
                          uint64_t v53 = v82;
                          unsigned int v51 = 0;
                          double v52 = 0;
LABEL_239:
                          CFMutableArrayRef Mutable = allocatora;
                          double v49 = v154;
                          CFMutableArrayRef v35 = v141;
                          CFArrayRef v34 = v146;
                          goto LABEL_71;
                        }
                        CMNotificationCenterGetDefaultLocalCenter();
                        uint64_t v15 = v155;
                        uint64_t v84 = FigNotificationCenterAddWeakListeners();
                        if (!v84)
                        {
                          if (!*(unsigned char *)(*(void *)(v188 + 152) + 160))
                          {
                            unsigned int v51 = 0;
                            double v52 = 0;
                            goto LABEL_189;
                          }
                          CFAllocatorRef v85 = CFGetAllocator(v13);
                          unsigned int v51 = CFArrayCreateMutable(v85, v150, MEMORY[0x1E4F1D510]);
                          if (v51)
                          {
                            CFAllocatorRef v86 = CFGetAllocator(v13);
                            double v52 = CFArrayCreateMutable(v86, v150, MEMORY[0x1E4F1D510]);
                            if (!v52)
                            {
                              uint64_t v90 = FigSignalErrorAt();
LABEL_256:
                              uint64_t v53 = v90;
                              goto LABEL_153;
                            }
                            if (v150 >= 1)
                            {
                              CFIndex v87 = 0;
                              while (1)
                              {
                                if (v87)
                                {
                                  CFAllocatorRef v88 = CFGetAllocator(v13);
                                  v89 = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
                                  uint64_t v90 = CMBufferQueueCreate(v88, 0, v89, (CMBufferQueueRef *)&v173);
                                  if (v90) {
                                    goto LABEL_256;
                                  }
                                  v91 = v13;
                                  CFAllocatorRef v92 = CFGetAllocator(v13);
                                  int v159 = HIBYTE(v185);
                                  int v93 = v185;
                                  v94 = (void *)CFArrayGetValueAtIndex(allocatora, v87);
                                  *(CMTime *)tagBuffer = *(CMTime *)(v155 + 88);
                                  CMTime v168 = *(CMTime *)(v155 + 112);
                                  CMTimeRangeFromTimeToTime(&v165, (CMTime *)tagBuffer, &v168);
                                  v95 = v50;
                                  CFTypeRef v96 = v173;
                                  CMTimeMake(&v164, 1, 10);
                                  CMTimeMake(&v163, 1, 30);
                                  if (*(unsigned char *)(v155 + 32)) {
                                    int v97 = 30;
                                  }
                                  else {
                                    int v97 = 31;
                                  }
                                  *(CMTime *)tagBuffer = *v147;
                                  uint64_t v137 = (uint64_t)v96;
                                  CFTypeRef v50 = v95;
                                  uint64_t v98 = FigMediaProcessorCreateForVideoRotation(v92, TrackRotationAngle, v159, v93, v95, 0, v94, (uint64_t)tagBuffer, (long long *)&v165.start.value, v137, (uint64_t)&v164, (uint64_t)&v163, 0, v97, (uint64_t *)&v174);
                                  if (v98)
                                  {
                                    uint64_t v53 = v98;
                                    CFTypeID v13 = v91;
                                    goto LABEL_239;
                                  }
                                  CMNotificationCenterGetDefaultLocalCenter();
                                  uint64_t v90 = FigNotificationCenterAddWeakListeners();
                                  CFTypeID v13 = v91;
                                  CFArrayRef v34 = v146;
                                  CFIndex v83 = v150;
                                  if (v90) {
                                    goto LABEL_256;
                                  }
                                }
                                else
                                {
                                  uint64_t v99 = v188;
                                  CFTypeRef v100 = *(CFTypeRef *)(v188 + 232);
                                  if (v100)
                                  {
                                    CFTypeRef v100 = CFRetain(v100);
                                    uint64_t v99 = v188;
                                  }
                                  v174 = v100;
                                  CFTypeRef v101 = *(CFTypeRef *)(*(void *)(v99 + 152) + 72);
                                  if (v101) {
                                    CFTypeRef v101 = CFRetain(v101);
                                  }
                                  CFTypeRef v173 = v101;
                                }
                                CFArrayAppendValue(v51, v174);
                                if (v174)
                                {
                                  CFRelease(v174);
                                  v174 = 0;
                                }
                                CFArrayAppendValue(v52, v173);
                                if (v173)
                                {
                                  CFRelease(v173);
                                  CFTypeRef v173 = 0;
                                }
                                if (v83 == ++v87)
                                {
                                  CFMutableArrayRef v35 = v141;
                                  uint64_t v15 = v155;
                                  break;
                                }
                              }
                            }
LABEL_189:
                            uint64_t SampleBufferProcessor = FigMediaProcessorGetSampleBufferProcessor(*(void *)(v188 + 232));
                            CFAllocatorRef v103 = CFGetAllocator(v13);
                            uint64_t FigBaseObject = FigSampleBufferProcessorGetFigBaseObject(SampleBufferProcessor);
                            uint64_t v105 = *(void *)(CMBaseObjectGetVTable() + 8);
                            if (v105) {
                              uint64_t v106 = v105;
                            }
                            else {
                              uint64_t v106 = 0;
                            }
                            v107 = *(uint64_t (**)(uint64_t, __CFString *, CFAllocatorRef, const void **))(v106 + 48);
                            if (!v107)
                            {
                              uint64_t v53 = 4294954514;
LABEL_208:
                              CFMutableArrayRef Mutable = allocatora;
                              double v49 = v154;
                              goto LABEL_71;
                            }
                            uint64_t v108 = v107(FigBaseObject, @"SampleBufferProcessor_SourcePixelBufferAttributes", v103, &v179);
                            if (v108)
                            {
LABEL_240:
                              uint64_t v53 = v108;
                              goto LABEL_208;
                            }
LABEL_194:
                            CFAllocatorRef v109 = CFGetAllocator(v13);
                            v110 = v183;
                            remakerFamily_getLowWaterLevel(*(unsigned __int8 *)(v15 + 32), (uint64_t)v162);
                            remakerFamily_getHighWaterLevel(*(unsigned __int8 *)(v15 + 32), (uint64_t)v161);
                            uint64_t v108 = remakerFamily_createRenderPipelineOptions((uint64_t)v109, v110, (uint64_t)v162, (uint64_t)v161, 0, 0, *(unsigned __int8 *)(v15 + 424), 0, 0, *(unsigned char *)(v15 + 32), 0, *(unsigned char *)(v15 + 425), v15 + 41, v140, &v182);
                            if (!v108)
                            {
                              CFTypeRef v160 = v50;
                              uint64_t v111 = remakerFamily_createRemakerVideoDecoderSpecification(v13, (uint64_t)theDicta, &v181);
                              if (v111)
                              {
                                uint64_t v53 = v111;
                                CFMutableArrayRef Mutable = allocatora;
                              }
                              else
                              {
                                v112 = v35;
                                if (v139
                                  && (int v113 = CFGetAllocator(v13),
                                      uint64_t v114 = remakerFamily_createVideoPixelTransferProperties(v113, v139, 0, &v180),
                                      v114))
                                {
                                  uint64_t v53 = v114;
                                  CFMutableArrayRef Mutable = allocatora;
                                }
                                else
                                {
                                  CFAllocatorRef v115 = CFGetAllocator(v13);
                                  CFAllocatorRef v116 = v115;
                                  v117 = v181;
                                  v118 = (void *)(v188 + 56);
                                  if (allocatora)
                                  {
                                    double v49 = v154;
                                    uint64_t v53 = FigVideoRenderPipelineCreateWithVisualContextGroup(v115, v181, v179, v180, 1, allocatora, v154, 0, v182, (void *)(v188 + 56));
                                    CFMutableArrayRef Mutable = allocatora;
                                    goto LABEL_212;
                                  }
                                  v148 = v179;
                                  v151 = v180;
                                  CFDictionaryRef v157 = v182;
                                  uint64_t v145 = (uint64_t)v184;
                                  int v119 = v177;
                                  int v144 = *(unsigned __int8 *)(v188 + 120);
                                  v120 = CFDictionaryCreateMutable(v115, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                                  if (v120)
                                  {
                                    v121 = v120;
                                    v122 = (const void **)MEMORY[0x1E4F1CFD0];
                                    if (v119)
                                    {
                                      v123 = (const void **)MEMORY[0x1E4F1CFD0];
                                      CFDictionarySetValue(v120, @"EnsureModifiableImageBuffers", (const void *)*MEMORY[0x1E4F1CFD0]);
                                      v122 = v123;
                                    }
                                    if (v144) {
                                      CFDictionarySetValue(v121, @"LimitImageQueueCapacityToOneFrame", *v122);
                                    }
                                    if (CFDictionaryGetCount(v121))
                                    {
                                      uint64_t v53 = FigVideoRenderPipelineCreateWithVisualContext(v116, v117, v148, v151, 1, v145, v121, v157, v118);
                                      CFRelease(v121);
                                    }
                                    else
                                    {
                                      CFRelease(v121);
                                      uint64_t v53 = FigVideoRenderPipelineCreateWithVisualContext(v116, v117, v148, v151, 1, v145, 0, v157, v118);
                                    }
                                    CFMutableArrayRef Mutable = 0;
                                    goto LABEL_211;
                                  }
                                  uint64_t v136 = FigSignalErrorAt();
                                  if (!v136)
                                  {
                                    uint64_t v53 = FigVideoRenderPipelineCreateWithVisualContext(v116, v117, v148, v151, 1, v145, 0, v157, v118);
                                    CFMutableArrayRef Mutable = 0;
                                    CFArrayRef v34 = v146;
LABEL_211:
                                    double v49 = v154;
LABEL_212:
                                    CFMutableArrayRef v35 = v112;
                                    if (!v53)
                                    {
                                      CFTypeRef v50 = v160;
                                      if (theDicta) {
                                        v124 = CFDictionaryGetValue(theDicta, @"AssetReader_FieldMode");
                                      }
                                      else {
                                        v124 = 0;
                                      }
                                      uint64_t v125 = remakerFamily_setVideoRenderPipelineProperties((int)v13, v188, v178, 0, v183, v124, *(unsigned __int8 *)(v155 + 32), *(unsigned __int8 *)(v155 + 425), v180);
                                      if (v125
                                        || (uint64_t v125 = assetReader_ensureRemakerQueue(), v125)
                                        || (CMNotificationCenterGetDefaultLocalCenter(),
                                            uint64_t v125 = FigNotificationCenterAddWeakListeners(),
                                            v125))
                                      {
                                        uint64_t v53 = v125;
                                        goto LABEL_71;
                                      }
                                      uint64_t v126 = v188;
                                      uint64_t v127 = remakerFamily_getStorage(v13);
                                      int v128 = *(_DWORD *)(v127 + 152) + 1;
                                      *(_DWORD *)(v127 + 152) = v128;
                                      *(_DWORD *)(v126 + 300) = v128;
                                      uint64_t v129 = v188;
                                      uint64_t v130 = *(void *)(v188 + 152);
                                      *(void *)(v130 + 152) = v49;
                                      *(void *)(v130 + 120) = Mutable;
                                      uint64_t v131 = MEMORY[0x1E4F1F9F8];
                                      *(_OWORD *)(v130 + 164) = *MEMORY[0x1E4F1F9F8];
                                      *(void *)(v130 + 180) = *(void *)(v131 + 16);
                                      *(void *)(v129 + 240) = v51;
                                      uint64_t v132 = *(void *)(v129 + 152);
                                      *(void *)(v132 + 128) = v52;
                                      if (*(void *)(v132 + 72))
                                      {
                                        uint64_t v133 = assetReaderTrack_setUpOutputBufferQueueSemaphore(v132);
                                        if (!v133)
                                        {
LABEL_221:
                                          uint64_t v134 = v188;
                                          _DWORD *v138 = *(_DWORD *)(v188 + 300);
                                          remakerFamily_commitChannel((uint64_t)v13, v134);
                                          double v49 = 0;
                                          uint64_t v53 = 0;
                                          CFMutableArrayRef Mutable = 0;
                                          unsigned int v51 = 0;
                                          double v52 = 0;
                                          uint64_t v188 = 0;
                                          goto LABEL_71;
                                        }
                                      }
                                      else
                                      {
                                        uint64_t v133 = assetReaderTrack_setUpOutputVisualContextSemaphore(v132);
                                        if (!v133) {
                                          goto LABEL_221;
                                        }
                                      }
                                      uint64_t v53 = v133;
                                      double v49 = 0;
LABEL_231:
                                      CFMutableArrayRef Mutable = 0;
                                      goto LABEL_157;
                                    }
LABEL_252:
                                    CFTypeRef v50 = v160;
                                    goto LABEL_71;
                                  }
                                  uint64_t v53 = v136;
                                  CFMutableArrayRef Mutable = 0;
                                  CFMutableArrayRef v35 = v112;
                                  CFArrayRef v34 = v146;
                                }
                              }
                              double v49 = v154;
                              goto LABEL_252;
                            }
                            goto LABEL_240;
                          }
                          uint64_t v53 = FigSignalErrorAt();
LABEL_254:
                          double v52 = 0;
                          goto LABEL_208;
                        }
                        uint64_t v53 = v84;
LABEL_246:
                        unsigned int v51 = 0;
                        goto LABEL_254;
                      }
LABEL_148:
                      FigCFDictionarySetInt32();
                      goto LABEL_149;
                    }
                  }
                  else
                  {
                    CFMutableDictionaryRef v73 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                    int v72 = TrackRotationAngle;
                    if (v73)
                    {
                      CFTypeRef v50 = v73;
                      BOOL v71 = 0;
                      BOOL v69 = 0;
                      goto LABEL_148;
                    }
                  }
LABEL_152:
                  uint64_t v53 = FigSignalErrorAt();
                  CFTypeRef v50 = 0;
                  unsigned int v51 = 0;
                  double v52 = 0;
LABEL_153:
                  CFMutableArrayRef Mutable = allocatora;
                  double v49 = v154;
                  CFMutableArrayRef v35 = v141;
                  goto LABEL_71;
                }
              }
            }
LABEL_237:
            uint64_t v53 = v56;
            CFTypeRef v50 = 0;
            unsigned int v51 = 0;
            double v52 = 0;
            double v49 = v154;
            goto LABEL_71;
          }
        }
      }
LABEL_230:
      uint64_t v53 = v20;
      double v49 = 0;
      CFTypeRef v50 = 0;
      CFArrayRef v34 = 0;
      CFMutableArrayRef v35 = 0;
      goto LABEL_231;
    }
  }
  double v49 = 0;
  CFTypeRef v50 = 0;
  CFArrayRef v34 = 0;
  CFMutableArrayRef v35 = 0;
  CFMutableArrayRef Mutable = 0;
  unsigned int v51 = 0;
  double v52 = 0;
  uint64_t v53 = 4294954514;
LABEL_71:
  remakerFamily_discardChannel((uint64_t)v13, v188);
  if (v187) {
    CFRelease(v187);
  }
  if (v184) {
    CFRelease(v184);
  }
  if (v183) {
    CFRelease(v183);
  }
  if (v182) {
    CFRelease(v182);
  }
  if (v181) {
    CFRelease(v181);
  }
  if (v180) {
    CFRelease(v180);
  }
  if (v179) {
    CFRelease(v179);
  }
  if (v50) {
    CFRelease(v50);
  }
  if (v175) {
    CFRelease(v175);
  }
  if (v174) {
    CFRelease(v174);
  }
  if (v173) {
    CFRelease(v173);
  }
  if (v49) {
    CFRelease(v49);
  }
  if (tagCollectionsOut) {
    CFRelease(tagCollectionsOut);
  }
  if (v35) {
    CFRelease(v35);
  }
  if (v34) {
    CFRelease(v34);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v51) {
    CFRelease(v51);
  }
  if (v52) {
    CFRelease(v52);
  }
  return v53;
}

uint64_t assetReader_EnableReencodedAudioExtractionFromTrack()
{
  return 0;
}

uint64_t assetReader_EnableReencodedAudioExtractionWithPresetFromTrack()
{
  return 0;
}

uint64_t assetReader_EnableReencodedVideoExtractionFromTrack()
{
  return 0;
}

uint64_t assetReader_EnableVideoCompositionExtraction(const void *a1, const __CFArray *a2, __CFString *a3, const void *a4, const void *a5, int a6, const __CFArray *a7, uint64_t a8, const void *a9, long long *a10, long long a11, int32_t a12, void *a13, const __CFDictionary *a14, CMVideoCodecType a15, const __CFDictionary *a16, const __CFDictionary *a17, uint64_t a18, uint64_t a19, const __CFDictionary *a20,_DWORD *a21)
{
  long long v22 = *a10;
  uint64_t v23 = *((void *)a10 + 2);
  return assetReader_EnableVideoCompositionExtraction3(a1, a2, 0, 0, 0, a3, a4, a5, a6, a7, a8, a9, (uint64_t)&v22, a11, SDWORD1(a11), SDWORD2(a11), SHIDWORD(a11), a12, a13,
           a14,
           a15,
           a16,
           a17,
           a18,
           a17,
           a20,
           a21);
}

uint64_t assetReader_EnableAudioMixdownExtraction(const void *a1, const __CFArray *a2, AudioStreamBasicDescription *a3, size_t a4, const AudioChannelLayout *a5, uint64_t a6, const __CFDictionary *a7, uint64_t a8, _DWORD *a9)
{
  uint64_t Storage = (_DWORD *)remakerFamily_getStorage(a1);
  CMAudioFormatDescriptionRef formatDescriptionOut = 0;
  uint64_t v65 = 0;
  CFTypeRef v62 = 0;
  CFAllocatorRef v63 = 0;
  if (*Storage == 1 && a2 && a3 && a3->mChannelsPerFrame && a3->mSampleRate != 0.0 && a3->mFormatID == 1819304813)
  {
    uint64_t v16 = Storage;
    int64_t Count = CFArrayGetCount(a2);
    double v54 = (intptr_t *)malloc_type_calloc(8uLL, Count, 0x2781099BuLL);
    if (a7) {
      Boolean Value = (__CFString *)CFDictionaryGetValue(a7, @"RemakerFamilyAudioProcessingOption_TimePitchAlgorithm");
    }
    else {
      Boolean Value = 0;
    }
    CFAllocatorRef v18 = CFGetAllocator(a1);
    uint64_t v19 = CMAudioFormatDescriptionCreate(v18, a3, a4, a5, 0, 0, 0, &formatDescriptionOut);
    if (!v19)
    {
      uint64_t v19 = remakerFamily_createChannel(a1, 0, 1936684398, &v65);
      if (!v19)
      {
        uint64_t v20 = v65;
        *(unsigned char *)(v65 + 48) = 0;
        *(unsigned char *)(v20 + 50) = 1;
        CFAllocatorRef v21 = CFGetAllocator(a1);
        CallbacksForUnsortedSampleBuffers = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
        uint64_t v19 = CMBufferQueueCreate(v21, 0, CallbacksForUnsortedSampleBuffers, (CMBufferQueueRef *)(v65 + 208));
        if (!v19)
        {
          CFTypeRef v23 = CFRetain(*(CFTypeRef *)(v65 + 208));
          uint64_t v24 = v65;
          *(void *)(*(void *)(v65 + 152) + 72) = v23;
          uint64_t v25 = *(void *)(v24 + 208);
          CMTimeMake(&v61, 2, 1);
          CMTimeMake(&v60, 1, 1);
          uint64_t v19 = FigSampleBufferConsumerCreateForBufferQueue(v25, (long long *)&v61.value, (long long *)&v60.value, &v63);
          if (!v19)
          {
            int v26 = *((unsigned char *)v16 + 32) ? 30 : 0;
            uint64_t v19 = FigActivitySchedulerCreateForNewThread(*MEMORY[0x1E4F1CF80], v26, @"com.apple.coremedia.readerOfflineMixer", &v62);
            if (!v19)
            {
              uint64_t v19 = remakerFamily_setupMultiPassTrackIfNecessary(a1, v65);
              if (!v19)
              {
                uint64_t v27 = v65;
                uint64_t v28 = remakerFamily_getStorage(a1);
                int v29 = *(_DWORD *)(v28 + 152) + 1;
                *(_DWORD *)(v28 + 152) = v29;
                *(_DWORD *)(v27 + 300) = v29;
                CFAllocatorRef v30 = CFGetAllocator(a1);
                uint64_t v19 = FigAudioQueueOfflineMixerCreate(v30, (long long *)a3, a4, a5, 0, v63, v62, (uint64_t *)(v65 + 200));
                if (!v19)
                {
                  uint64_t v19 = assetReader_ensureRemakerQueue();
                  if (!v19)
                  {
                    CMNotificationCenterGetDefaultLocalCenter();
                    uint64_t v19 = FigNotificationCenterAddWeakListeners();
                    if (!v19)
                    {
                      if (Count >= 1)
                      {
                        uint64_t v55 = 0;
                        CFIndex v31 = 0;
                        CFIndex v32 = v54;
                        while (1)
                        {
                          CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a2, v31);
                          unsigned int v59 = 0;
                          values = 0;
                          if (!FigCFDictionaryGetInt32IfPresent()) {
                            break;
                          }
                          CFArrayRef v34 = a2;
                          CFMutableArrayRef v35 = CFDictionaryGetValue(ValueAtIndex, @"AssetReaderSource_AudioCurves");
                          if (!v35 || (CFIndex v36 = CFRetain(v35)) == 0)
                          {
                            values = (void *)CFDictionaryGetValue(ValueAtIndex, @"AssetReaderSource_AudioVolumeCurve");
                            if (values)
                            {
                              CFAllocatorRef v37 = CFGetAllocator(a1);
                              CFIndex v36 = CFDictionaryCreate(v37, (const void **)kFigAudioCurvesKey_Volume, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                              if (!v36)
                              {
                                uint64_t AudioMixdownSourceTrack = 4294954510;
                                goto LABEL_53;
                              }
                            }
                            else
                            {
                              CFIndex v36 = 0;
                            }
                          }
                          long long v38 = CFDictionaryGetValue(ValueAtIndex, @"AssetReaderSource_AudioProcessingTap");
                          uint64_t v39 = (__CFString *)CFDictionaryGetValue(ValueAtIndex, @"RemakerFamilyAudioProcessingOption_TimePitchAlgorithmSourceTrack");
                          uint64_t v40 = CFDictionaryGetValue(ValueAtIndex, @"AssetReaderSource_CinematicAudioParameters");
                          if (v39) {
                            CFArrayRef v41 = v39;
                          }
                          else {
                            CFArrayRef v41 = Value;
                          }
                          uint64_t AudioMixdownSourceTrack = remakerFamily_createAudioMixdownSourceTrack(a1, v59, v36, v38, v40, v41, a8, formatDescriptionOut, v32);
                          if (v36) {
                            CFRelease(v36);
                          }
                          if (AudioMixdownSourceTrack != -12138)
                          {
                            if (AudioMixdownSourceTrack) {
                              goto LABEL_53;
                            }
                            uint64_t v42 = *(void *)(v65 + 200);
                            uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(*(void *)(*v32 + 56));
                            uint64_t v44 = *(void *)(CMBaseObjectGetVTable() + 8);
                            if (v44) {
                              uint64_t v45 = v44;
                            }
                            else {
                              uint64_t v45 = 0;
                            }
                            CFIndex v46 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v45 + 56);
                            if (!v46)
                            {
                              uint64_t AudioMixdownSourceTrack = 4294954514;
                              goto LABEL_53;
                            }
                            uint64_t v19 = v46(FigBaseObject, @"OfflineMixer", v42);
                            if (v19) {
                              goto LABEL_51;
                            }
                            *(_DWORD *)(*v32 + 304) = *(_DWORD *)(v65 + 300);
                            ++v55;
                          }
                          a2 = v34;
                          ++v31;
                          ++v32;
                          if (Count == v31)
                          {
                            if (v55 <= 0) {
                              break;
                            }
                            uint64_t v19 = assetReaderTrack_setUpOutputBufferQueueSemaphore(*(void *)(v65 + 152));
                            if (!v19)
                            {
                              uint64_t v47 = v54;
                              *a9 = *(_DWORD *)(v65 + 300);
                              uint64_t v48 = v54;
                              int64_t v49 = Count;
                              do
                              {
                                remakerFamily_commitChannel((uint64_t)a1, *v48);
                                *v48++ = 0;
                                --v49;
                              }
                              while (v49);
                              remakerFamily_commitChannel((uint64_t)a1, v65);
                              uint64_t AudioMixdownSourceTrack = 0;
                              uint64_t v65 = 0;
                              goto LABEL_54;
                            }
                            goto LABEL_51;
                          }
                        }
                      }
                      uint64_t v19 = FigSignalErrorAt();
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_51:
    uint64_t AudioMixdownSourceTrack = v19;
LABEL_53:
    uint64_t v47 = v54;
LABEL_54:
    remakerFamily_discardChannel((uint64_t)a1, v65);
    if (v47)
    {
      if (Count >= 1)
      {
        CFTypeRef v50 = v47;
        do
        {
          intptr_t v51 = *v50++;
          remakerFamily_discardChannel((uint64_t)a1, v51);
          --Count;
        }
        while (Count);
      }
      free(v47);
    }
  }
  else
  {
    uint64_t AudioMixdownSourceTrack = FigSignalErrorAt();
    remakerFamily_discardChannel((uint64_t)a1, 0);
  }
  if (formatDescriptionOut) {
    CFRelease(formatDescriptionOut);
  }
  if (v63) {
    CFRelease(v63);
  }
  if (v62) {
    CFRelease(v62);
  }
  return AudioMixdownSourceTrack;
}

uint64_t assetReader_StartExtractionForTimeRange(const void *a1, long long *a2, uint64_t a3)
{
  uint64_t Storage = remakerFamily_getStorage(a1);
  long long v7 = *a2;
  *(void *)(Storage + 104) = *((void *)a2 + 2);
  *(_OWORD *)(Storage + 88) = v7;
  uint64_t v8 = *(void *)(a3 + 16);
  *(_OWORD *)(Storage + 112) = *(_OWORD *)a3;
  *(void *)(Storage + 128) = v8;
  *(unsigned char *)(Storage + 136) = 0;

  return assetReader_startExtractionForTimeRangeCommon(a1);
}

uint64_t assetReader_ExtractAndRetainNextSampleBuffer(const void *a1, int a2, int a3, unsigned char *a4, CFTypeRef *a5)
{
  uint64_t Storage = (_DWORD *)remakerFamily_getStorage(a1);
  uint64_t v129 = 0;
  CFTypeRef cf = 0;
  if (*Storage != 3 || (uint64_t ChannelByExtractionID = assetReader_getChannelByExtractionID((uint64_t)a1, a2)) == 0)
  {
LABEL_2:
    uint64_t TaggedBufferGroupSampleBuffer = FigSignalErrorAt();
LABEL_3:
    uint64_t EarliestSequentialImageTime = TaggedBufferGroupSampleBuffer;
    goto LABEL_4;
  }
  uint64_t v15 = ChannelByExtractionID;
  uint64_t v16 = *(opaqueCMBufferQueue **)(ChannelByExtractionID + 72);
  if (!v16)
  {
    *(_OWORD *)numSamples = *MEMORY[0x1E4F1F9F8];
    *(_OWORD *)&v131.CMTimeValue value = *MEMORY[0x1E4F1F9F8];
    CMTimeEpoch v23 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
    v131.CMTimeEpoch epoch = v23;
    LOBYTE(pixelBufferOut[0]) = 0;
    uint64_t EarliestSequentialImageTime = *(unsigned int *)(v15 + 64);
    if (EarliestSequentialImageTime)
    {
LABEL_52:
      *(_DWORD *)(v15 + 64) = 0;
      goto LABEL_4;
    }
    while (1)
    {
      uint64_t EarliestSequentialImageTime = Storage[5];
      if (EarliestSequentialImageTime) {
        goto LABEL_4;
      }
      uint64_t EarliestSequentialImageTime = FigVisualContextGetEarliestSequentialImageTime(*(void *)(v15 + 112), 0, (uint64_t)&v131, (uint64_t)pixelBufferOut);
      if (!EarliestSequentialImageTime) {
        break;
      }
LABEL_48:
      if (EarliestSequentialImageTime != -12813) {
        goto LABEL_4;
      }
      char v19 = (char)pixelBufferOut[0];
      if (!a3 || LOBYTE(pixelBufferOut[0])) {
        goto LABEL_90;
      }
      FigSemaphoreWaitRelative();
      uint64_t EarliestSequentialImageTime = *(unsigned int *)(v15 + 64);
      if (EarliestSequentialImageTime) {
        goto LABEL_52;
      }
    }
    if (*(unsigned char *)(v15 + 160))
    {
      *(_OWORD *)&sampleTiming.duration.CMTimeValue value = *(_OWORD *)numSamples;
      sampleTiming.duration.CMTimeEpoch epoch = v23;
      CFArrayRef v24 = *(const __CFArray **)(v15 + 120);
      if (v24)
      {
        CFIndex Count = CFArrayGetCount(v24);
        if (Count >= 2)
        {
          CFIndex v26 = Count;
          CFIndex v27 = 1;
          do
          {
            CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v15 + 120), v27);
            if (!ValueAtIndex) {
              goto LABEL_2;
            }
            uint64_t v29 = FigVisualContextGetEarliestSequentialImageTime((uint64_t)ValueAtIndex, 0, (uint64_t)&sampleTiming, (uint64_t)pixelBufferOut);
            if (v29)
            {
              uint64_t EarliestSequentialImageTime = v29;
              goto LABEL_48;
            }
            CMTime time1 = v131;
            CMTime time2 = sampleTiming.duration;
            if (CMTimeCompare(&time1, &time2))
            {
              FigSignalErrorAt();
              uint64_t EarliestSequentialImageTime = 0;
              goto LABEL_4;
            }
          }
          while (v26 != ++v27);
        }
      }
    }
    char v19 = (char)pixelBufferOut[0];
    if (!a5) {
      goto LABEL_90;
    }
    memset(&sampleTiming, 0, sizeof(sampleTiming));
    if (*(unsigned char *)(v15 + 160))
    {
      CMTime time1 = v131;
      uint64_t TaggedBufferGroupSampleBuffer = assetReader_createTaggedBufferGroupSampleBuffer(v15, (uint64_t)&time1);
      if (!TaggedBufferGroupSampleBuffer) {
        goto LABEL_90;
      }
      goto LABEL_3;
    }
    uint64_t v31 = *(void *)(v15 + 112);
    CMTime time2 = v131;
    uint64_t v32 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v32) {
      uint64_t v33 = v32;
    }
    else {
      uint64_t v33 = 0;
    }
    CFArrayRef v34 = *(uint64_t (**)(uint64_t, const __CFAllocator *, CMTime *, uint64_t, __CVBuffer **, void, void))(v33 + 48);
    if (!v34)
    {
      uint64_t EarliestSequentialImageTime = 4294954514;
      goto LABEL_4;
    }
    CFAllocatorRef v35 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CMTime time1 = time2;
    uint64_t TaggedBufferGroupSampleBuffer = v34(v31, v35, &time1, 3, &v129, 0, 0);
    if (TaggedBufferGroupSampleBuffer) {
      goto LABEL_3;
    }
    CFIndex v36 = v129;
    if (!v129)
    {
LABEL_84:
      sampleTiming.presentationTimeStamp = v131;
      *(_OWORD *)&sampleTiming.decodeTimeStamp.CMTimeValue value = *(_OWORD *)numSamples;
      sampleTiming.decodeTimeStamp.CMTimeEpoch epoch = v23;
      *(_OWORD *)&sampleTiming.duration.CMTimeValue value = *(_OWORD *)numSamples;
      sampleTiming.duration.CMTimeEpoch epoch = v23;
      if (v36)
      {
        uint64_t TaggedBufferGroupSampleBuffer = CMSampleBufferCreateForImageBuffer(v35, v36, 1u, 0, 0, *(CMVideoFormatDescriptionRef *)(v15 + 192), &sampleTiming, (CMSampleBufferRef *)&cf);
        if (!TaggedBufferGroupSampleBuffer) {
          goto LABEL_90;
        }
        goto LABEL_3;
      }
      uint64_t TaggedBufferGroupSampleBuffer = CMSampleBufferCreate(v35, 0, 1u, 0, 0, 0, 0, 1, &sampleTiming, 0, 0, (CMSampleBufferRef *)&cf);
      if (TaggedBufferGroupSampleBuffer) {
        goto LABEL_3;
      }
      CMSetAttachment(cf, (CFStringRef)*MEMORY[0x1E4F1F258], (CFTypeRef)*MEMORY[0x1E4F1CFD0], 1u);
      goto LABEL_90;
    }
    long long v38 = (CFTypeRef *)(v15 + 192);
    CFAllocatorRef v37 = *(const opaqueCMFormatDescription **)(v15 + 192);
    if (v37)
    {
      if (CMVideoFormatDescriptionMatchesImageBuffer(v37, v129))
      {
LABEL_83:
        CFIndex v36 = v129;
        goto LABEL_84;
      }
      if (*v38)
      {
        CFRelease(*v38);
        *long long v38 = 0;
      }
    }
    uint64_t TaggedBufferGroupSampleBuffer = CMVideoFormatDescriptionCreateForImageBuffer(v35, v129, (CMVideoFormatDescriptionRef *)(v15 + 192));
    if (TaggedBufferGroupSampleBuffer) {
      goto LABEL_3;
    }
    goto LABEL_83;
  }
  uint64_t EarliestSequentialImageTime = *(unsigned int *)(v15 + 64);
  if (a3)
  {
    CFTypeID v13 = 0;
    if (!EarliestSequentialImageTime)
    {
      uint64_t v17 = MEMORY[0x1E4F1F9F8];
      while (1)
      {
        uint64_t EarliestSequentialImageTime = Storage[5];
        if (EarliestSequentialImageTime) {
          goto LABEL_175;
        }
        if (*(unsigned char *)(v15 + 160)) {
          unsigned int v18 = assetReader_outputBufferQueuesAtEndOfData(*(const __CFArray **)(v15 + 128));
        }
        else {
          unsigned int v18 = CMBufferQueueIsAtEndOfData(*(CMBufferQueueRef *)(v15 + 72));
        }
        char v19 = v18;
        if (v18) {
          goto LABEL_91;
        }
        if (!a5)
        {
          Head = (opaqueCMSampleBuffer *)CMBufferQueueGetHead(*(CMBufferQueueRef *)(v15 + 72));
          if (Head && CMSampleBufferDataIsReady(Head)) {
            goto LABEL_62;
          }
          goto LABEL_33;
        }
        if (cf)
        {
          CFRelease(cf);
          CFTypeRef cf = 0;
        }
        if (!*(unsigned char *)(v15 + 160)) {
          break;
        }
        if (assetReader_outputBufferQueuesIfDataReady(*(const __CFArray **)(v15 + 128), (CMTime *)(v15 + 164)))
        {
          *(_OWORD *)&sampleTiming.duration.CMTimeValue value = *(_OWORD *)v17;
          sampleTiming.duration.CMTimeEpoch epoch = *(void *)(v17 + 16);
          uint64_t v20 = assetReader_createTaggedBufferGroupSampleBuffer(v15, (uint64_t)&sampleTiming);
          if (v20)
          {
            uint64_t EarliestSequentialImageTime = v20;
            goto LABEL_175;
          }
        }
        if (cf) {
          goto LABEL_27;
        }
LABEL_33:
        FigSemaphoreWaitRelative();
        uint64_t EarliestSequentialImageTime = *(unsigned int *)(v15 + 64);
        if (EarliestSequentialImageTime) {
          goto LABEL_34;
        }
      }
      CFTypeRef cf = CMBufferQueueDequeueIfDataReadyAndRetain(*(CMBufferQueueRef *)(v15 + 72));
      if (!cf) {
        goto LABEL_33;
      }
LABEL_27:
      if (v13) {
        CFRelease(v13);
      }
      if (!*(void *)(v15 + 16)) {
        goto LABEL_2;
      }
      uint64_t v22 = FigCFWeakReferenceHolderCopyReferencedObject();
      if (!v22) {
        goto LABEL_2;
      }
      CFTypeID v13 = (const void *)v22;
      if (CMSampleBufferGetNumSamples((CMSampleBufferRef)cf) > 0
        || remakerFamily_keepMarkerSbuf(a1, (uint64_t)v13, cf))
      {
LABEL_62:
        char v19 = 0;
        goto LABEL_91;
      }
      goto LABEL_33;
    }
    goto LABEL_34;
  }
  if (EarliestSequentialImageTime)
  {
    CFTypeID v13 = 0;
LABEL_34:
    *(_DWORD *)(v15 + 64) = 0;
    goto LABEL_175;
  }
  uint64_t EarliestSequentialImageTime = Storage[5];
  if (EarliestSequentialImageTime)
  {
LABEL_4:
    CFTypeID v13 = 0;
    goto LABEL_175;
  }
  if (!a4)
  {
    char v19 = 0;
    if (a5) {
      goto LABEL_70;
    }
LABEL_90:
    CFTypeID v13 = 0;
    goto LABEL_91;
  }
  if (*(unsigned char *)(v15 + 160)) {
    Boolean v30 = assetReader_outputBufferQueuesAtEndOfData(*(const __CFArray **)(v15 + 128));
  }
  else {
    Boolean v30 = CMBufferQueueIsAtEndOfData(v16);
  }
  char v19 = v30;
  if (!a5) {
    goto LABEL_90;
  }
LABEL_70:
  if (*(unsigned char *)(v15 + 160))
  {
    if (assetReader_outputBufferQueuesIfDataReady(*(const __CFArray **)(v15 + 128), (CMTime *)(v15 + 164)))
    {
      *(_OWORD *)&sampleTiming.duration.CMTimeValue value = *MEMORY[0x1E4F1F9F8];
      sampleTiming.duration.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
      assetReader_createTaggedBufferGroupSampleBuffer(v15, (uint64_t)&sampleTiming);
    }
    goto LABEL_90;
  }
  CFTypeID v13 = 0;
  CFTypeRef cf = CMBufferQueueDequeueIfDataReadyAndRetain(*(CMBufferQueueRef *)(v15 + 72));
LABEL_91:
  if (!a5 || !*(unsigned char *)(v15 + 28) || (uint64_t v39 = (opaqueCMSampleBuffer *)cf) == 0)
  {
LABEL_171:
    if (a5)
    {
      *a5 = cf;
      CFTypeRef cf = 0;
    }
    uint64_t EarliestSequentialImageTime = 0;
    if (a4) {
      *a4 = v19;
    }
    goto LABEL_175;
  }
  CFTypeRef cf = 0;
  CMBlockBufferRef blockBufferOut = 0;
  pixelBufferOut[0] = 0;
  CMItemCount sizeArrayEntriesNeededOut = 0;
  CMItemCount timingArrayEntriesNeededOut = 0;
  CFTypeRef v133 = 0;
  CMSampleBufferRef sampleBufferOut = 0;
  long long v121 = *MEMORY[0x1E4F1F9F8];
  *(_OWORD *)&sampleTiming.duration.CMTimeValue value = *MEMORY[0x1E4F1F9F8];
  CMTimeEpoch v40 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  sampleTiming.duration.CMTimeEpoch epoch = v40;
  CMItemCount v41 = CMSampleBufferGetNumSamples(v39);
  uint64_t SampleTimingInfoArray = CMSampleBufferGetSampleTimingInfoArray(v39, 0, 0, &timingArrayEntriesNeededOut);
  if (SampleTimingInfoArray)
  {
    uint64_t EarliestSequentialImageTime = SampleTimingInfoArray;
    if (SampleTimingInfoArray != -12736)
    {
      CFTypeID v43 = 0;
LABEL_131:
      sampleSizeArray = 0;
LABEL_132:
      uint64_t v48 = 0;
      uint64_t v65 = 0;
      goto LABEL_158;
    }
  }
  CMItemCount numSamplesa = v41;
  if (timingArrayEntriesNeededOut < 1)
  {
    CFTypeID v43 = 0;
  }
  else
  {
    CFTypeID v43 = (CMSampleTimingInfo *)malloc_type_malloc(72 * timingArrayEntriesNeededOut, 0x1000040FF89C88EuLL);
    if (!v43)
    {
LABEL_129:
      uint64_t v44 = FigSignalErrorAt();
LABEL_130:
      uint64_t EarliestSequentialImageTime = v44;
      goto LABEL_131;
    }
    uint64_t v44 = CMSampleBufferGetSampleTimingInfoArray(v39, timingArrayEntriesNeededOut, v43, 0);
    if (v44) {
      goto LABEL_130;
    }
  }
  CMTimeEpoch v118 = v40;
  if (*(unsigned char *)(v15 + 160))
  {
    group = CMSampleBufferGetTaggedBufferGroup(v39);
    CVPixelBufferRef CVPixelBufferAtIndex = CMTaggedBufferGroupGetCVPixelBufferAtIndex(group, 0);
  }
  else
  {
    CVPixelBufferRef CVPixelBufferAtIndex = CMSampleBufferGetImageBuffer(v39);
    group = 0;
  }
  CMBlockBufferRef DataBuffer = CMSampleBufferGetDataBuffer(v39);
  if (!CVPixelBufferAtIndex)
  {
    CMBlockBufferRef v58 = DataBuffer;
    if (DataBuffer)
    {
      CFAllocatorRef v59 = CFGetAllocator(DataBuffer);
      CFAllocatorRef v60 = CFGetAllocator(v58);
      DataCFIndex Length = CMBlockBufferGetDataLength(v58);
      uint64_t v44 = CMBlockBufferCreateContiguous(v59, v58, v60, 0, 0, DataLength, 2u, &blockBufferOut);
      if (v44) {
        goto LABEL_130;
      }
    }
    uint64_t v62 = CMSampleBufferGetSampleSizeArray(v39, 0, 0, &sizeArrayEntriesNeededOut);
    if (v62)
    {
      uint64_t EarliestSequentialImageTime = v62;
      if (v62 != -12735) {
        goto LABEL_131;
      }
    }
    sampleTimingArray = v43;
    if (sizeArrayEntriesNeededOut < 1)
    {
      sampleSizeArray = 0;
    }
    else
    {
      sampleSizeArray = (size_t *)malloc_type_malloc(8 * sizeArrayEntriesNeededOut, 0x100004000313F17uLL);
      if (!sampleSizeArray)
      {
        uint64_t v64 = FigSignalErrorAt();
LABEL_230:
        uint64_t EarliestSequentialImageTime = v64;
        goto LABEL_132;
      }
      uint64_t v64 = CMSampleBufferGetSampleSizeArray(v39, sizeArrayEntriesNeededOut, sampleSizeArray, 0);
      if (v64) {
        goto LABEL_230;
      }
    }
    CFAllocatorRef v75 = CFGetAllocator(v39);
    CMBlockBufferRef v76 = blockBufferOut;
    FormatDescription = CMSampleBufferGetFormatDescription(v39);
    v78 = v76;
    uint64_t v74 = numSamplesa;
    uint64_t v79 = CMSampleBufferCreate(v75, v78, 1u, 0, 0, FormatDescription, numSamplesa, timingArrayEntriesNeededOut, sampleTimingArray, sizeArrayEntriesNeededOut, sampleSizeArray, &sampleBufferOut);
    uint64_t v48 = 0;
    if (!v79)
    {
      int v119 = a4;
      v120 = 0;
      uint64_t v65 = 0;
      goto LABEL_152;
    }
    uint64_t EarliestSequentialImageTime = v79;
    uint64_t v65 = 0;
    goto LABEL_233;
  }
  if (!*(void *)(v15 + 16)) {
    goto LABEL_129;
  }
  uint64_t v47 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v47) {
    goto LABEL_129;
  }
  uint64_t v48 = (const void *)v47;
  sampleTimingArray = v43;
  poolOut = (CVPixelBufferPoolRef *)(v15 + 32);
  int v119 = a4;
  v120 = (void *)v47;
  sbuf = v39;
  if (*(void *)(v15 + 32)) {
    goto LABEL_109;
  }
  uint64_t v66 = *(void *)(v47 + 232);
  if (v66)
  {
    uint64_t SampleBufferProcessor = FigMediaProcessorGetSampleBufferProcessor(v66);
    CFAllocatorRef v68 = CFGetAllocator(v120);
    uint64_t FigBaseObject = FigSampleBufferProcessorGetFigBaseObject(SampleBufferProcessor);
    uint64_t v70 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v71 = v70 ? v70 : 0;
    v95 = *(void (**)(uint64_t, __CFString *, CFAllocatorRef, CVPixelBufferPoolRef *))(v71 + 48);
    if (v95) {
      v95(FigBaseObject, @"SampleBufferProcessor_OutputPixelBufferPool", v68, poolOut);
    }
  }
  uint64_t v96 = v120[7];
  if (v96)
  {
    uint64_t v48 = v120;
    if (*poolOut) {
      goto LABEL_109;
    }
    CFAllocatorRef v97 = CFGetAllocator(v120);
    uint64_t v98 = v120[19];
    uint64_t v99 = FigRenderPipelineGetFigBaseObject(v96);
    uint64_t v100 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v100) {
      uint64_t v101 = v100;
    }
    else {
      uint64_t v101 = 0;
    }
    v102 = *(void (**)(uint64_t, __CFString *, CFAllocatorRef, uint64_t))(v101 + 48);
    if (v102) {
      v102(v99, @"OutputPixelBufferPool", v97, v98 + 32);
    }
  }
  uint64_t v39 = sbuf;
  uint64_t v48 = v120;
  if (*poolOut)
  {
LABEL_109:
    int64_t v49 = (VTPixelTransferSessionRef *)(v15 + 40);
    if (!*(void *)(v15 + 40)
      && (CFAllocatorRef v50 = CFGetAllocator(v48),
          uint64_t PixelBuffer = VTPixelTransferSessionCreate(v50, (VTPixelTransferSessionRef *)(v15 + 40)),
          PixelBuffer)
      || (CFAllocatorRef v52 = CFGetAllocator(CVPixelBufferAtIndex),
          uint64_t PixelBuffer = CVPixelBufferPoolCreatePixelBuffer(v52, *poolOut, pixelBufferOut),
          PixelBuffer))
    {
      uint64_t EarliestSequentialImageTime = PixelBuffer;
      sampleSizeArray = 0;
      uint64_t v65 = 0;
LABEL_232:
      a4 = v119;
      goto LABEL_233;
    }
    CVBufferPropagateAttachments(CVPixelBufferAtIndex, pixelBufferOut[0]);
    uint64_t v53 = VTPixelTransferSessionTransferImage(*v49, CVPixelBufferAtIndex, pixelBufferOut[0]);
    CFTypeID v43 = sampleTimingArray;
    if (!v53)
    {
      uint64_t v55 = (CMVideoFormatDescriptionRef *)(v15 + 48);
      double v54 = *(const opaqueCMFormatDescription **)(v15 + 48);
      if (v54)
      {
        if (CMVideoFormatDescriptionMatchesImageBuffer(v54, pixelBufferOut[0]))
        {
LABEL_118:
          if (*(unsigned char *)(v15 + 160))
          {
            CFArrayRef v56 = *(const __CFArray **)(v15 + 152);
            if (v56) {
              uint64_t v57 = CFArrayGetCount(v56);
            }
            else {
              uint64_t v57 = 0;
            }
            uint64_t v115 = *MEMORY[0x1E4F1CF80];
            CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v57, MEMORY[0x1E4F1D510]);
            uint64_t v65 = Mutable;
            if (Mutable)
            {
              CFArrayAppendValue(Mutable, pixelBufferOut[0]);
              if (v57 >= 2)
              {
                CFIndex v81 = 1;
                do
                {
                  if (pixelBufferOut[0])
                  {
                    CFRelease(pixelBufferOut[0]);
                    pixelBufferOut[0] = 0;
                  }
                  CVPixelBufferRef v82 = CMTaggedBufferGroupGetCVPixelBufferAtIndex(group, v81);
                  CFAllocatorRef v83 = CFGetAllocator(v82);
                  uint64_t v84 = CVPixelBufferPoolCreatePixelBuffer(v83, *poolOut, pixelBufferOut);
                  if (v84) {
                    goto LABEL_227;
                  }
                  CVBufferPropagateAttachments(v82, pixelBufferOut[0]);
                  uint64_t v84 = VTPixelTransferSessionTransferImage(*v49, v82, pixelBufferOut[0]);
                  if (v84) {
                    goto LABEL_227;
                  }
                  CFArrayAppendValue(v65, pixelBufferOut[0]);
                }
                while (v57 != ++v81);
              }
              uint64_t v84 = MEMORY[0x19970EBC0](v115, *(void *)(v15 + 152), v65, &v133);
              if (!v84)
              {
                memset(&time1, 0, sizeof(time1));
                uint64_t v39 = sbuf;
                CMSampleBufferGetOutputPresentationTimeStamp(&time1, sbuf);
                CMTime v131 = time1;
                *(_OWORD *)&time2.CMTimeValue value = v121;
                time2.CMTimeEpoch epoch = v118;
                uint64_t v85 = FigSampleBufferCreateForTaggedBufferGroup();
                sampleSizeArray = 0;
                a4 = v119;
                uint64_t v74 = numSamplesa;
                if (v85)
                {
                  uint64_t EarliestSequentialImageTime = v85;
                  goto LABEL_157;
                }
LABEL_152:
                CFAllocatorRef v86 = v39;
                CFArrayRef SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(v39, 0);
                if (SampleAttachmentsArray)
                {
                  CFArrayRef v88 = SampleAttachmentsArray;
                  CFArrayRef v89 = CMSampleBufferGetSampleAttachmentsArray(sampleBufferOut, 1u);
                  if (v74 >= 1)
                  {
                    CFArrayRef v90 = v89;
                    CFIndex v91 = 0;
                    do
                    {
                      CFDictionaryRef v92 = (const __CFDictionary *)CFArrayGetValueAtIndex(v88, v91);
                      int v93 = (void *)CFArrayGetValueAtIndex(v90, v91);
                      CFDictionaryApplyFunction(v92, (CFDictionaryApplierFunction)assetReader_addValueToDictionary, v93);
                      ++v91;
                    }
                    while (numSamplesa != v91);
                  }
                }
                uint64_t v39 = v86;
                CMPropagateAttachments(v86, sampleBufferOut);
                CMSampleBufferGetOutputPresentationTimeStamp(&sampleTiming.duration, v86);
                CMTime time1 = sampleTiming.duration;
                CMSampleBufferSetOutputPresentationTimeStamp(sampleBufferOut, &time1);
                uint64_t EarliestSequentialImageTime = 0;
                CFTypeRef cf = sampleBufferOut;
                CMSampleBufferRef sampleBufferOut = 0;
                a4 = v119;
                goto LABEL_157;
              }
            }
            else
            {
              uint64_t v84 = FigSignalErrorAt();
            }
LABEL_227:
            uint64_t EarliestSequentialImageTime = v84;
            sampleSizeArray = 0;
            a4 = v119;
            uint64_t v39 = sbuf;
LABEL_157:
            CFTypeID v43 = sampleTimingArray;
            uint64_t v48 = v120;
            goto LABEL_158;
          }
          CFAllocatorRef v72 = CFGetAllocator(v39);
          uint64_t v73 = CMSampleBufferCreateForImageBuffer(v72, pixelBufferOut[0], 1u, 0, 0, *v55, sampleTimingArray, &sampleBufferOut);
          sampleSizeArray = 0;
          if (!v73)
          {
            uint64_t v65 = 0;
            uint64_t v74 = numSamplesa;
            goto LABEL_152;
          }
          uint64_t EarliestSequentialImageTime = v73;
          uint64_t v65 = 0;
          goto LABEL_232;
        }
        if (*v55)
        {
          CFRelease(*v55);
          *uint64_t v55 = 0;
        }
      }
      uint64_t v53 = CMVideoFormatDescriptionCreateForImageBuffer((CFAllocatorRef)*MEMORY[0x1E4F1CF80], pixelBufferOut[0], (CMVideoFormatDescriptionRef *)(v15 + 48));
      if (!v53) {
        goto LABEL_118;
      }
    }
    uint64_t EarliestSequentialImageTime = v53;
    sampleSizeArray = 0;
    uint64_t v65 = 0;
    a4 = v119;
    goto LABEL_158;
  }
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(CVPixelBufferAtIndex);
  CVPixelBufferGetWidth(CVPixelBufferAtIndex);
  CVPixelBufferGetHeight(CVPixelBufferAtIndex);
  IOSurfaceRef IOSurface = CVPixelBufferGetIOSurface(CVPixelBufferAtIndex);
  if (!*(void *)(v15 + 56)) {
    CVPixelBufferGetAttributes();
  }
  CFDictionaryRef MutableCopy = (const __CFDictionary *)FigCFDictionaryCreateMutableCopy();
  if (!MutableCopy)
  {
    FigSignalErrorAt();
    uint64_t v39 = sbuf;
    goto LABEL_236;
  }
  CFDictionaryRef v104 = MutableCopy;
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(MutableCopy, (const void *)*MEMORY[0x1E4F24D70]);
  if (Value)
  {
    CFArrayRef v106 = Value;
    CFTypeID v107 = CFGetTypeID(Value);
    if (v107 != CFArrayGetTypeID()) {
      goto LABEL_207;
    }
    CFIndex v108 = CFArrayGetCount(v106);
    if (v108 < 1) {
      goto LABEL_207;
    }
    CFIndex v109 = v108;
    uint64_t v110 = 0;
    while (1)
    {
      LODWORD(time1.value) = 0;
      if (FigCFArrayGetInt32AtIndex())
      {
        if (LODWORD(time1.value) == PixelFormatType) {
          break;
        }
      }
      if (v109 == ++v110) {
        goto LABEL_207;
      }
    }
  }
  if (FigCFDictionarySetInt32())
  {
    CFDictionaryRef v111 = 0;
    a4 = v119;
    uint64_t v39 = sbuf;
    goto LABEL_214;
  }
LABEL_207:
  uint64_t v39 = sbuf;
  if ((!CFDictionaryGetValue(v104, (const void *)*MEMORY[0x1E4F24E10])
     || !CFDictionaryGetValue(v104, (const void *)*MEMORY[0x1E4F24D08]))
    && (FigCFDictionarySetInt32() || FigCFDictionarySetInt32()))
  {
    CFDictionaryRef v111 = 0;
    a4 = v119;
  }
  else
  {
    a4 = v119;
    if (!IOSurface)
    {
      CFDictionaryRef v111 = v104;
      goto LABEL_217;
    }
    time1.CMTimeValue value = 0;
    if (FigCreatePixelBufferAttributesWithIOSurfaceSupport())
    {
      CFDictionaryRef v111 = 0;
    }
    else
    {
      CFRelease(v104);
      CFDictionaryRef v104 = 0;
      CFDictionaryRef v111 = (const __CFDictionary *)time1.value;
    }
  }
LABEL_214:
  if (v104) {
    CFRelease(v104);
  }
LABEL_217:
  if (!v111)
  {
LABEL_236:
    uint64_t EarliestSequentialImageTime = FigSignalErrorAt();
    sampleSizeArray = 0;
    uint64_t v65 = 0;
    goto LABEL_157;
  }
  CFAllocatorRef v112 = CFGetAllocator(v120);
  uint64_t EarliestSequentialImageTime = CVPixelBufferPoolCreate(v112, 0, v111, poolOut);
  CFDictionaryRef v113 = v111;
  uint64_t v48 = v120;
  CFRelease(v113);
  if (!EarliestSequentialImageTime) {
    goto LABEL_109;
  }
  sampleSizeArray = 0;
  uint64_t v65 = 0;
LABEL_233:
  CFTypeID v43 = sampleTimingArray;
LABEL_158:
  if (pixelBufferOut[0]) {
    CFRelease(pixelBufferOut[0]);
  }
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  free(v43);
  free(sampleSizeArray);
  if (sampleBufferOut) {
    CFRelease(sampleBufferOut);
  }
  if (v48) {
    CFRelease(v48);
  }
  if (v65) {
    CFRelease(v65);
  }
  if (v133) {
    CFRelease(v133);
  }
  CFRelease(v39);
  if (!EarliestSequentialImageTime) {
    goto LABEL_171;
  }
LABEL_175:
  if (cf) {
    CFRelease(cf);
  }
  if (v129) {
    CFRelease(v129);
  }
  if (v13) {
    CFRelease(v13);
  }
  return EarliestSequentialImageTime;
}

uint64_t assetReader_EnableDecodedAudioExtractionFromTrackWithAudioOptions(const void *a1, unsigned int a2, long long *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unsigned int valuePtr = a2;
  uint64_t Storage = (_DWORD *)remakerFamily_getStorage(a1);
  uint64_t v33 = 0;
  long long v31 = 0u;
  long long v32 = 0u;
  CFAllocatorRef v17 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  values = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
  CFTypeRef cf = CFDictionaryCreate(v17, (const void **)&kFigAssetReaderSourceTrackArrayKey_TrackID, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFArrayRef v18 = CFArrayCreate(v17, &cf, 1, MEMORY[0x1E4F1D510]);
  if (*Storage != 1)
  {
    uint64_t SourceASBDForTrackID = FigSignalErrorAt();
    goto LABEL_17;
  }
  if (!a3)
  {
    uint64_t SourceASBDForTrackID = remakerFamily_getSourceASBDForTrackID(a1, valuePtr, (uint64_t)&v31);
    if (!SourceASBDForTrackID)
    {
      *((void *)&v31 + 1) = 0x96C70636DLL;
      LODWORD(v33) = 32;
      DWORD1(v32) = 1;
      DWORD2(v32) = 4 * HIDWORD(v32);
      LODWORD(v32) = 4 * HIDWORD(v32);
      goto LABEL_12;
    }
LABEL_17:
    uint64_t v24 = SourceASBDForTrackID;
    goto LABEL_19;
  }
  long long v19 = a3[1];
  long long v31 = *a3;
  long long v32 = v19;
  uint64_t v33 = *((void *)a3 + 4);
  if (*(double *)&v31 != 0.0 && HIDWORD(v32)) {
    goto LABEL_12;
  }
  uint64_t v28 = 0;
  long long v26 = 0u;
  long long v27 = 0u;
  uint64_t SourceASBDForTrackID = remakerFamily_getSourceASBDForTrackID(a1, valuePtr, (uint64_t)&v26);
  if (SourceASBDForTrackID) {
    goto LABEL_17;
  }
  if (*(double *)&v31 == 0.0) {
    *(void *)&long long v31 = v26;
  }
  if (!HIDWORD(v32)) {
    HIDWORD(v32) = HIDWORD(v27);
  }
LABEL_12:
  uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v21) {
    uint64_t v22 = v21;
  }
  else {
    uint64_t v22 = 0;
  }
  CMTimeEpoch v23 = *(uint64_t (**)(const void *, CFArrayRef, long long *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 88);
  if (v23)
  {
    uint64_t SourceASBDForTrackID = v23(a1, v18, &v31, a4, a5, a6, a7, a8, a9);
    goto LABEL_17;
  }
  uint64_t v24 = 4294954514;
LABEL_19:
  if (values) {
    CFRelease(values);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v18) {
    CFRelease(v18);
  }
  return v24;
}

uint64_t assetReader_StartExtractionForTimeRanges(uint64_t a1, long long *a2, CFIndex a3)
{
  uint64_t Storage = remakerFamily_getStorage(a1);
  if (*(_DWORD *)Storage >= 4u || a3 <= 0 || !a2)
  {
LABEL_19:
    uint64_t v17 = FigSignalErrorAt();
LABEL_14:
    uint64_t v18 = v17;
    if (!v17) {
      return v18;
    }
    goto LABEL_17;
  }
  uint64_t v7 = Storage;
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(Storage + 80));
  if (Count >= 1)
  {
    CFIndex v9 = Count;
    CFIndex v10 = 0;
    do
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v7 + 80), v10);
      if (!ValueAtIndex[360]) {
        goto LABEL_19;
      }
      uint64_t v12 = remakerFamily_resetTrackMultiPassTimeRanges((uint64_t)ValueAtIndex, a2, a3);
      if (v12)
      {
        uint64_t v18 = v12;
        goto LABEL_17;
      }
    }
    while (v9 != ++v10);
  }
  long long v13 = a2[1];
  *(_OWORD *)&range.start.CMTimeValue value = *a2;
  *(_OWORD *)&range.start.CMTimeEpoch epoch = v13;
  *(_OWORD *)&range.duration.CMTimeScale timescale = a2[2];
  CMTimeRangeGetEnd(&v23, &range);
  long long v20 = *a2;
  CMTimeEpoch v21 = *((void *)a2 + 2);
  uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v14) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0;
  }
  uint64_t v16 = *(uint64_t (**)(uint64_t, CMTimeRange *, CMTime *))(v15 + 96);
  if (v16)
  {
    *(_OWORD *)&range.start.CMTimeValue value = v20;
    range.start.CMTimeEpoch epoch = v21;
    CMTime v24 = v23;
    uint64_t v17 = v16(a1, &range, &v24);
    goto LABEL_14;
  }
  uint64_t v18 = 4294954514;
LABEL_17:
  remakerfamily_setFailureStatusIfError(a1, v18);
  remakerFamily_invalidateAllMediaProcessors();
  return v18;
}

uint64_t assetReader_StartExtractionForTimeRangesFromTrack(const void *a1, int a2, uint64_t a3, CFIndex a4)
{
  uint64_t Storage = (_DWORD *)remakerFamily_getStorage(a1);
  uint64_t ChannelByExtractionID = assetReader_getChannelByExtractionID((uint64_t)a1, a2);
  if (!ChannelByExtractionID || !*(void *)(ChannelByExtractionID + 16))
  {
    uint64_t v28 = 0;
    goto LABEL_17;
  }
  uint64_t v10 = FigCFWeakReferenceHolderCopyReferencedObject();
  uint64_t v28 = 0;
  if (!v10)
  {
LABEL_17:
    uint64_t v15 = FigSignalErrorAt();
    if (!v15) {
      goto LABEL_21;
    }
    uint64_t v11 = 0;
    char v16 = 1;
LABEL_19:
    remakerfamily_setFailureStatusIfError((uint64_t)a1, v15);
    remakerFamily_invalidateAllMediaProcessors();
    if (v16) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  uint64_t v11 = v10;
  if (*Storage < 7u && *(unsigned char *)(v10 + 360) && a4 > 0 && a3)
  {
    uint64_t Segment = assetReader_ensureRemakerQueue();
    if (Segment) {
      goto LABEL_32;
    }
    uint64_t Segment = remakerFamily_resetTrackMultiPassTimeRanges(v11, (void *)a3, a4);
    if (Segment) {
      goto LABEL_32;
    }
    if (*(void *)(v11 + 424))
    {
      long long v13 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)&range.start.CMTimeValue value = *(_OWORD *)a3;
      *(_OWORD *)&range.start.CMTimeEpoch epoch = v13;
      *(_OWORD *)&range.duration.CMTimeScale timescale = *(_OWORD *)(a3 + 32);
      uint64_t Segment = remakerFamily_resetSourceRenderersForNextSegment(v11, (uint64_t)&range, 1);
      if (Segment) {
        goto LABEL_32;
      }
    }
    else
    {
      uint64_t Segment = remakerFamily_createMultiPassPlaybackBossForTrack(v11, (void *)(v11 + 424));
      if (Segment) {
        goto LABEL_32;
      }
      *(unsigned char *)(v11 + 432) = 0;
      uint64_t v18 = *(void *)(v11 + 424);
      long long v19 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)&range.start.CMTimeValue value = *(_OWORD *)a3;
      *(_OWORD *)&range.start.CMTimeEpoch epoch = v19;
      *(_OWORD *)&range.duration.CMTimeScale timescale = *(_OWORD *)(a3 + 32);
      CMTimeRangeGetEnd(&v27, &range);
      *(_OWORD *)&range.start.CMTimeValue value = *(_OWORD *)a3;
      range.start.CMTimeEpoch epoch = *(void *)(a3 + 16);
      uint64_t Segment = FigPlaybackBossSendSamplesForTimeRange(v18, &range.start, (uint64_t)&v27, 4);
      if (Segment) {
        goto LABEL_32;
      }
      uint64_t Segment = remakerFamily_createRelatedTrackArray((_DWORD *)v11, &v28);
      if (Segment) {
        goto LABEL_32;
      }
      CFIndex Count = CFArrayGetCount(v28);
      if (Count >= 1)
      {
        CFIndex v21 = Count;
        CFIndex v22 = 0;
        do
        {
          CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v28, v22);
          long long v24 = *(_OWORD *)(a3 + 16);
          *(_OWORD *)&range.start.CMTimeValue value = *(_OWORD *)a3;
          *(_OWORD *)&range.start.CMTimeEpoch epoch = v24;
          *(_OWORD *)&range.duration.CMTimeScale timescale = *(_OWORD *)(a3 + 32);
          CMTimeRangeGetEnd(&v25, &range);
          *(_OWORD *)&range.start.CMTimeValue value = *(_OWORD *)a3;
          range.start.CMTimeEpoch epoch = *(void *)(a3 + 16);
          uint64_t Segment = remakerFamily_startTrack((uint64_t)ValueAtIndex, &range.start, &v25);
          if (Segment) {
            goto LABEL_32;
          }
        }
        while (v21 != ++v22);
      }
    }
    remakerFamily_SetRemakerState((uint64_t)a1, 3, 0);
    uint64_t Segment = remakerfamily_updateClientPID();
    if (!Segment)
    {
      uint64_t updated = remakerfamily_updateThrottleForBackground(a1);
      goto LABEL_14;
    }
LABEL_32:
    uint64_t v15 = Segment;
    goto LABEL_15;
  }
  uint64_t updated = FigSignalErrorAt();
LABEL_14:
  uint64_t v15 = updated;
  if (updated)
  {
LABEL_15:
    char v16 = 0;
    goto LABEL_19;
  }
LABEL_20:
  CFRelease((CFTypeRef)v11);
LABEL_21:
  if (v28) {
    CFRelease(v28);
  }
  return v15;
}

uint64_t assetReader_EnableCaptionExtraction(const void *a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t Storage = remakerFamily_getStorage(a1);
  uint64_t v38 = 0;
  int v37 = 0;
  CFTypeRef cf = 0;
  if (*(_DWORD *)Storage != 1)
  {
    uint64_t v13 = FigSignalErrorAt();
    goto LABEL_33;
  }
  uint64_t v8 = Storage;
  uint64_t v9 = *(void *)(Storage + 72);
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *))(v11 + 40);
  if (!v12) {
    goto LABEL_28;
  }
  uint64_t v13 = v12(v9, a2, &cf);
  if (v13)
  {
LABEL_33:
    uint64_t v32 = v13;
    goto LABEL_29;
  }
  CFTypeRef v14 = cf;
  uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v15) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = 0;
  }
  uint64_t v17 = *(uint64_t (**)(CFTypeRef, void, int *))(v16 + 32);
  if (!v17)
  {
LABEL_28:
    uint64_t v32 = 4294954514;
    goto LABEL_29;
  }
  uint64_t v13 = v17(v14, 0, &v37);
  if (v13) {
    goto LABEL_33;
  }
  uint64_t v13 = remakerFamily_createChannel(a1, a2, v37, &v38);
  if (v13) {
    goto LABEL_33;
  }
  uint64_t v13 = remakerFamily_setupMultiPassTrackIfNecessary(a1, v38);
  if (v13) {
    goto LABEL_33;
  }
  uint64_t v18 = v38;
  *(unsigned char *)(v38 + 50) = 1;
  *(unsigned char *)(*(void *)(v18 + 152) + 28) = 0;
  CFAllocatorRef v19 = CFGetAllocator(a1);
  CallbacksForUnsortedSampleBuffers = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
  uint64_t v13 = CMBufferQueueCreate(v19, 0, CallbacksForUnsortedSampleBuffers, (CMBufferQueueRef *)(v38 + 248));
  if (v13) {
    goto LABEL_33;
  }
  CFAllocatorRef v21 = CFGetAllocator(a1);
  CFIndex v22 = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
  uint64_t v13 = CMBufferQueueCreate(v21, 0, v22, (CMBufferQueueRef *)(*(void *)(v38 + 152) + 72));
  if (v13) {
    goto LABEL_33;
  }
  CFAllocatorRef v23 = CFGetAllocator(a1);
  uint64_t v13 = FigRenderPipelineCreateForBufferQueue((uint64_t)v23, *(const void **)(v38 + 248), 0, (CFTypeRef *)(v38 + 56));
  if (v13) {
    goto LABEL_33;
  }
  uint64_t v13 = assetReader_ensureRemakerQueue();
  if (v13) {
    goto LABEL_33;
  }
  CMNotificationCenterGetDefaultLocalCenter();
  uint64_t v13 = FigNotificationCenterAddWeakListeners();
  if (v13) {
    goto LABEL_33;
  }
  CFAllocatorRef v24 = CFGetAllocator(a1);
  CMTime v25 = *(const void **)(v38 + 248);
  uint64_t v26 = *(void *)(*(void *)(v38 + 152) + 72);
  CMTimeMake(&v35, 2, 1);
  CMTimeMake(&v34, 1, 1);
  int v27 = *(unsigned char *)(v8 + 32) ? 0 : 31;
  uint64_t v13 = FigMediaProcessorCreateForCaptionConversionWithBufferQueue((uint64_t)v24, 1668310898, 1668310898, v25, v26, 0, (long long *)&v35.value, 0, (long long *)&v34.value, 0, v27, (uint64_t *)(v38 + 232));
  if (v13) {
    goto LABEL_33;
  }
  CMNotificationCenterGetDefaultLocalCenter();
  uint64_t v13 = FigNotificationCenterAddWeakListeners();
  if (v13) {
    goto LABEL_33;
  }
  uint64_t v28 = v38;
  uint64_t v29 = remakerFamily_getStorage(a1);
  int v30 = *(_DWORD *)(v29 + 152) + 1;
  *(_DWORD *)(v29 + 152) = v30;
  *(_DWORD *)(v28 + 300) = v30;
  uint64_t v13 = assetReaderTrack_setUpOutputBufferQueueSemaphore(*(void *)(v38 + 152));
  if (v13) {
    goto LABEL_33;
  }
  uint64_t v31 = v38;
  *(unsigned char *)(v38 + 52) = 1;
  if (a4) {
    *a4 = *(_DWORD *)(v31 + 300);
  }
  remakerFamily_commitChannel((uint64_t)a1, v31);
  uint64_t v32 = 0;
  uint64_t v38 = 0;
LABEL_29:
  remakerFamily_discardChannel((uint64_t)a1, v38);
  if (cf) {
    CFRelease(cf);
  }
  return v32;
}

uint64_t assetReader_StartExtractionForTime(const void *a1, long long *a2)
{
  uint64_t Storage = remakerFamily_getStorage(a1);
  long long v5 = *a2;
  *(void *)(Storage + 104) = *((void *)a2 + 2);
  *(_OWORD *)(Storage + 88) = v5;
  uint64_t v6 = *((void *)a2 + 2);
  *(_OWORD *)(Storage + 112) = *a2;
  *(void *)(Storage + 128) = v6;
  *(unsigned char *)(Storage + 136) = 1;

  return assetReader_startExtractionForTimeRangeCommon(a1);
}

uint64_t assetReader_EnableVideoCompositionExtraction2(const void *a1, const __CFArray *a2, const __CFArray *a3, __CFString *a4, const void *a5, const void *a6, int a7, const __CFArray *a8, uint64_t a9, const void *a10, long long *a11, long long a12, int32_t a13, void *a14, const __CFDictionary *a15, CMVideoCodecType a16, const __CFDictionary *a17, const __CFDictionary *a18, uint64_t a19, uint64_t a20,const __CFDictionary *a21,_DWORD *a22)
{
  long long v23 = *a11;
  uint64_t v24 = *((void *)a11 + 2);
  return assetReader_EnableVideoCompositionExtraction3(a1, a2, a3, 0, 0, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v23, a12, SDWORD1(a12), SDWORD2(a12), SHIDWORD(a12), a13, a14,
           a15,
           a16,
           a17,
           a18,
           a19,
           a18,
           a21,
           a22);
}

uint64_t assetReader_EnableVideoCompositionExtraction3(const void *a1, const __CFArray *a2, const __CFArray *a3, const void *a4, const void *a5, __CFString *a6, const void *a7, const void *a8, int a9, const __CFArray *a10, uint64_t a11, const void *a12, uint64_t a13, int a14, int a15, int a16, int32_t a17, int32_t a18, void *a19, const __CFDictionary *a20,CMVideoCodecType a21,const __CFDictionary *a22,const __CFDictionary *a23,uint64_t a24,const __CFDictionary *cf,const __CFDictionary *a26,_DWORD *a27)
{
  CMTime v34 = a1;
  uint64_t Storage = (_DWORD *)remakerFamily_getStorage(a1);
  CFTypeRef v87 = 0;
  uint64_t v88 = 0;
  CFTypeRef propertyValueOut = 0;
  CFAllocatorRef v86 = 0;
  if (*Storage != 1
    || !a2
    || !a7
    || (CFArrayRef v77 = a3, v78 = a6, a17 < 1)
    || a18 <= 0
    || (*(_DWORD *)(a13 + 12) & 0x1D) != 1
    || (CFIndex v36 = Storage, v76 = a7, (v37 = cf) != 0) && (v38 = CFGetTypeID(cf), v38 != CFDictionaryGetTypeID()))
  {
    uint64_t v41 = FigSignalErrorAt();
    goto LABEL_61;
  }
  uint64_t v39 = (const void *)*((void *)v36 + 59);
  *((void *)v36 + 59) = a4;
  if (a4) {
    CFRetain(a4);
  }
  if (v39) {
    CFRelease(v39);
  }
  CMTimeEpoch v40 = (const void *)*((void *)v36 + 60);
  *((void *)v36 + 60) = a5;
  if (a5) {
    CFRetain(a5);
  }
  if (v40) {
    CFRelease(v40);
  }
  uint64_t v41 = remakerFamily_createChannel(v34, 0, 1986618469, &v88);
  if (v41) {
    goto LABEL_61;
  }
  CFAllocatorRef v75 = a8;
  uint64_t v42 = v88;
  *(unsigned char *)(v88 + 48) = 0;
  *(unsigned char *)(v42 + 50) = 1;
  *(unsigned char *)(*(void *)(v42 + 152) + 28) = 0;
  FigCFDictionaryGetBooleanIfPresent();
  FigCFDictionaryGetBooleanIfPresent();
  uint64_t v43 = v88;
  uint64_t v44 = remakerFamily_getStorage(v34);
  int v45 = *(_DWORD *)(v44 + 152) + 1;
  *(_DWORD *)(v44 + 152) = v45;
  *(_DWORD *)(v43 + 300) = v45;
  CFAllocatorRef v46 = CFGetAllocator(v34);
  uint64_t v41 = FigVisualContextCreateBasic((uint64_t)v46, 0, &v87);
  if (v41) {
    goto LABEL_61;
  }
  uint64_t v79 = v34;
  if (!a21)
  {
    CFTypeRef v61 = v87;
    *(void *)(*(void *)(v88 + 152) + 112) = v87;
    CFRetain(v61);
    uint64_t v41 = assetReaderTrack_setUpOutputVisualContextSemaphore(*(void *)(v88 + 152));
    if (!v41) {
      goto LABEL_42;
    }
LABEL_61:
    uint64_t v71 = v41;
    goto LABEL_51;
  }
  CFAllocatorRef v47 = CFGetAllocator(v34);
  CallbacksForUnsortedSampleBuffers = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
  uint64_t v41 = CMBufferQueueCreate(v47, 0, CallbacksForUnsortedSampleBuffers, (CMBufferQueueRef *)(*(void *)(v88 + 152) + 72));
  if (v41) {
    goto LABEL_61;
  }
  uint64_t v41 = assetReaderTrack_setUpOutputBufferQueueSemaphore(*(void *)(v88 + 152));
  if (v41) {
    goto LABEL_61;
  }
  uint64_t v41 = remakerFamily_createRemakerVideoEncoderSpecification(v34, a22, &v86);
  if (v41) {
    goto LABEL_61;
  }
  CFAllocatorRef v49 = CFGetAllocator(v34);
  CFDictionaryRef v51 = v86;
  CFAllocatorRef v50 = (void *)v87;
  CMTime start = *(CMTime *)(v36 + 22);
  CMTime end = *(CMTime *)(v36 + 28);
  CMTimeRangeFromTimeToTime(&v84, &start, &end);
  uint64_t v52 = *(void *)(*(void *)(v88 + 152) + 72);
  CMTimeMake(&v81, 2, 1);
  CMTimeMake(&v80, 1, 1);
  if (*((unsigned char *)v36 + 32)) {
    int v53 = 30;
  }
  else {
    int v53 = 31;
  }
  *(_OWORD *)&start.CMTimeValue value = *(_OWORD *)a13;
  start.CMTimeEpoch epoch = *(void *)(a13 + 16);
  uint64_t v54 = FigMediaProcessorCreateForVideoCompression(v49, a17, a18, a21, v51, 0, 0, v50, (uint64_t)&start, (long long *)&v84.start.value, v52, (long long *)&v81.value, 0, (long long *)&v80.value, 0, 0, v53, (uint64_t *)(v88 + 288));
  if (v54
    || (CMNotificationCenterGetDefaultLocalCenter(), uint64_t v54 = FigNotificationCenterAddWeakListeners(), v54))
  {
    uint64_t v71 = v54;
    CMTime v34 = v79;
    goto LABEL_51;
  }
  CMTime v34 = v79;
  if (a23)
  {
    FigCFDictionaryGetDoubleIfPresent();
    VTCompressionSession = (const void *)FigMediaProcessorGetVTCompressionSession(*(void *)(v88 + 288));
    VTSessionSetProperties(VTCompressionSession, a23);
  }
  uint64_t SampleBufferProcessor = FigMediaProcessorGetSampleBufferProcessor(*(void *)(v88 + 288));
  uint64_t v57 = (const void *)*MEMORY[0x1E4F1CFD0];
  uint64_t FigBaseObject = FigSampleBufferProcessorGetFigBaseObject(SampleBufferProcessor);
  uint64_t v59 = *(void *)(CMBaseObjectGetVTable() + 8);
  CFDictionaryRef v37 = cf;
  if (v59) {
    uint64_t v60 = v59;
  }
  else {
    uint64_t v60 = 0;
  }
  uint64_t v62 = *(void (**)(uint64_t, __CFString *, const void *))(v60 + 56);
  if (v62) {
    v62(FigBaseObject, @"SampleBufferProcessor_InheritOutputColorSpaceFromInput", v57);
  }
  CFAllocatorRef v63 = (const void *)FigMediaProcessorGetVTCompressionSession(*(void *)(v88 + 288));
  CFStringRef v64 = (const __CFString *)*MEMORY[0x1E4F44B88];
  CFAllocatorRef v65 = CFGetAllocator(v79);
  uint64_t v41 = VTSessionCopyProperty(v63, v64, v65, &propertyValueOut);
  if (v41) {
    goto LABEL_61;
  }
  if (*((unsigned char *)v36 + 424) == 1)
  {
    uint64_t v66 = (const void *)FigMediaProcessorGetVTCompressionSession(*(void *)(v88 + 288));
    uint64_t v41 = VTSessionSetProperty(v66, (CFStringRef)*MEMORY[0x1E4F449D8], v57);
    if (v41) {
      goto LABEL_61;
    }
  }
  a19 = (void *)propertyValueOut;
  if (*((void *)v36 + 58))
  {
    v67 = (const void *)FigMediaProcessorGetVTCompressionSession(*(void *)(v88 + 288));
    VTSessionSetProperty(v67, (CFStringRef)*MEMORY[0x1E4F44A70], *((CFTypeRef *)v36 + 58));
  }
LABEL_42:
  uint64_t v41 = remakerFamily_setupMultiPassTrackIfNecessary(v34, v88);
  if (v41) {
    goto LABEL_61;
  }
  int v68 = a9;
  if (a26)
  {
    CFArrayRef Value = CFDictionaryGetValue(a26, @"AssetReader_FieldMode");
    int v68 = a9;
  }
  else
  {
    CFArrayRef Value = 0;
  }
  *(_OWORD *)&start.CMTimeValue value = *(_OWORD *)a13;
  start.CMTimeEpoch epoch = *(void *)(a13 + 16);
  CMTime v34 = v79;
  uint64_t v41 = remakerFamily_finishVideoCompositionChannel(v79, v88, a2, v77, v78, v76, v75, v68, a10, a11, a12, (long long *)&start.value, a14, a15, a16, Value, a20, v37, (uint64_t)v87,
          a19);
  if (v41) {
    goto LABEL_61;
  }
  if (a19) {
    CFTypeRef v70 = CFRetain(a19);
  }
  else {
    CFTypeRef v70 = 0;
  }
  uint64_t v71 = 0;
  uint64_t v72 = v88;
  *(void *)(*(void *)(v88 + 152) + 56) = v70;
  *a27 = *(_DWORD *)(v72 + 300);
  uint64_t v88 = 0;
LABEL_51:
  remakerFamily_discardChannel((uint64_t)v34, v88);
  if (v87) {
    CFRelease(v87);
  }
  if (v86) {
    CFRelease(v86);
  }
  if (propertyValueOut) {
    CFRelease(propertyValueOut);
  }
  return v71;
}

uint64_t assetReader_enableOriginalSampleExtractionFromTrackCommon(const void *a1, uint64_t a2, uint64_t a3, int a4, _DWORD *a5)
{
  uint64_t Storage = remakerFamily_getStorage(a1);
  uint64_t v35 = 0;
  int v34 = 0;
  CFTypeRef cf = 0;
  if (*(_DWORD *)Storage != 1)
  {
    uint64_t v14 = FigSignalErrorAt();
    goto LABEL_35;
  }
  uint64_t v10 = *(void *)(Storage + 72);
  uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *))(v12 + 40);
  if (!v13) {
    goto LABEL_21;
  }
  uint64_t v14 = v13(v10, a2, &cf);
  if (v14)
  {
LABEL_35:
    uint64_t v22 = v14;
    goto LABEL_22;
  }
  CFTypeRef v15 = cf;
  uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v16) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = 0;
  }
  uint64_t v18 = *(uint64_t (**)(CFTypeRef, void, int *))(v17 + 32);
  if (!v18)
  {
LABEL_21:
    uint64_t v22 = 4294954514;
    goto LABEL_22;
  }
  uint64_t v14 = v18(v15, 0, &v34);
  if (v14) {
    goto LABEL_35;
  }
  uint64_t v14 = remakerFamily_createChannel(a1, a2, v34, &v35);
  if (v14) {
    goto LABEL_35;
  }
  if (v34 == 1936684398)
  {
    CFTypeID v19 = CFGetTypeID(a1);
    uint64_t v14 = remakerFamily_copyFormatDescription(v19, (uint64_t)cf, (void *)(v35 + 40));
    if (v14) {
      goto LABEL_35;
    }
  }
  uint64_t v14 = remakerFamily_setupMultiPassTrackIfNecessary(a1, v35);
  if (v14) {
    goto LABEL_35;
  }
  uint64_t v20 = v35;
  *(unsigned char *)(v35 + 50) = 1;
  v20 += 50;
  *(unsigned char *)(*(void *)(v20 + 102) + 28) = 0;
  *(unsigned char *)(v20 - 2) = 1;
  FigCFDictionaryGetBooleanIfPresent();
  if (!a4) {
    FigCFDictionaryGetBooleanIfPresent();
  }
  long long v31 = *MEMORY[0x1E4F1F9F8];
  uint64_t v32 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  if (FigCFDictionaryGetCMTimeIfPresent())
  {
    uint64_t v21 = v35;
    if ((BYTE12(v31) & 0x1D) == 1)
    {
      *(void *)(v35 + 344) = v32;
      *(_OWORD *)(v21 + 328) = v31;
      *(unsigned char *)(v21 + 49) = 1;
    }
  }
  if (FigCFDictionaryGetBooleanIfPresent() && *(unsigned char *)(v35 + 121)) {
    FigCFDictionaryGetCMTimeIfPresent();
  }
  FigCFDictionaryGetBooleanIfPresent();
  *(unsigned char *)(v35 + 51) = a4;
  CFAllocatorRef v24 = CFGetAllocator(a1);
  CallbacksForUnsortedSampleBuffers = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
  uint64_t v14 = CMBufferQueueCreate(v24, 0, CallbacksForUnsortedSampleBuffers, (CMBufferQueueRef *)(*(void *)(v35 + 152) + 72));
  if (v14) {
    goto LABEL_35;
  }
  CFAllocatorRef v26 = CFGetAllocator(a1);
  uint64_t v14 = FigRenderPipelineCreateForBufferQueue((uint64_t)v26, *(const void **)(*(void *)(v35 + 152) + 72), 0, (CFTypeRef *)(v35 + 56));
  if (v14) {
    goto LABEL_35;
  }
  uint64_t v14 = assetReader_ensureRemakerQueue();
  if (v14) {
    goto LABEL_35;
  }
  CMNotificationCenterGetDefaultLocalCenter();
  uint64_t v14 = FigNotificationCenterAddWeakListeners();
  if (v14) {
    goto LABEL_35;
  }
  uint64_t v27 = v35;
  uint64_t v28 = remakerFamily_getStorage(a1);
  int v29 = *(_DWORD *)(v28 + 152) + 1;
  *(_DWORD *)(v28 + 152) = v29;
  *(_DWORD *)(v27 + 300) = v29;
  uint64_t v22 = assetReaderTrack_setUpOutputBufferQueueSemaphore(*(void *)(v35 + 152));
  if (!v22)
  {
    uint64_t v30 = v35;
    *a5 = *(_DWORD *)(v35 + 300);
    remakerFamily_commitChannel((uint64_t)a1, v30);
    uint64_t v35 = 0;
  }
LABEL_22:
  remakerFamily_discardChannel((uint64_t)a1, v35);
  if (cf) {
    CFRelease(cf);
  }
  return v22;
}

uint64_t assetReaderTrack_setUpOutputBufferQueueSemaphore(uint64_t a1)
{
  *(void *)(a1 + 80) = FigSemaphoreCreate();
  uint64_t v2 = *(opaqueCMBufferQueue **)(a1 + 72);
  long long v18 = *MEMORY[0x1E4F1F9F8];
  *(_OWORD *)&time.CMTimeValue value = *MEMORY[0x1E4F1F9F8];
  CMTimeEpoch v3 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  time.CMTimeEpoch epoch = v3;
  uint64_t result = CMBufferQueueInstallTrigger(v2, (CMBufferQueueTriggerCallback)assetReaderTrack_dataBecameReady, (void *)a1, 7, &time, (CMBufferQueueTriggerToken *)(a1 + 88));
  if (!result)
  {
    long long v5 = *(opaqueCMBufferQueue **)(a1 + 72);
    *(_OWORD *)&time.CMTimeValue value = v18;
    time.CMTimeEpoch epoch = v3;
    uint64_t result = CMBufferQueueInstallTrigger(v5, (CMBufferQueueTriggerCallback)assetReaderTrack_endOfDataReached, (void *)a1, 8, &time, (CMBufferQueueTriggerToken *)(a1 + 96));
    if (!result)
    {
      if (*(unsigned char *)(a1 + 160))
      {
        CFArrayRef v6 = *(const __CFArray **)(a1 + 128);
        if (v6)
        {
          CFIndex Count = CFArrayGetCount(v6);
          if (Count > 0)
          {
            CFIndex v8 = Count;
            size_t v9 = 8 * Count;
            uint64_t v10 = malloc_type_malloc(8 * Count, 0x2004093837F09uLL);
            *(void *)(a1 + 136) = v10;
            if (v10)
            {
              uint64_t v11 = malloc_type_malloc(v9, 0x2004093837F09uLL);
              *(void *)(a1 + 144) = v11;
              if (v11)
              {
                uint64_t v12 = 0;
                CFIndex v13 = 0;
                while (1)
                {
                  if (v13)
                  {
                    CFDictionaryRef ValueAtIndex = (opaqueCMBufferQueue *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 128), v13);
                    if (!ValueAtIndex) {
                      return FigSignalErrorAt();
                    }
                    CFTypeRef v15 = ValueAtIndex;
                    uint64_t v16 = (CMBufferQueueTriggerToken *)(*(void *)(a1 + 136) + v12);
                    *(_OWORD *)&time.CMTimeValue value = v18;
                    time.CMTimeEpoch epoch = v3;
                    uint64_t result = CMBufferQueueInstallTrigger(ValueAtIndex, (CMBufferQueueTriggerCallback)assetReaderTrack_dataBecameReady, (void *)a1, 7, &time, v16);
                    if (result) {
                      return result;
                    }
                    uint64_t v17 = (CMBufferQueueTriggerToken *)(*(void *)(a1 + 144) + v12);
                    *(_OWORD *)&time.CMTimeValue value = v18;
                    time.CMTimeEpoch epoch = v3;
                    uint64_t result = CMBufferQueueInstallTrigger(v15, (CMBufferQueueTriggerCallback)assetReaderTrack_endOfDataReached, (void *)a1, 8, &time, v17);
                    if (result) {
                      return result;
                    }
                  }
                  else
                  {
                    **(void **)(a1 + 136) = *(void *)(a1 + 88);
                    **(void **)(a1 + 144) = *(void *)(a1 + 96);
                  }
                  ++v13;
                  v12 += 8;
                  if (v8 == v13) {
                    return CMBufferQueueInstallTriggerWithIntegerThreshold(*(CMBufferQueueRef *)(a1 + 72), (CMBufferQueueTriggerCallback)assetReaderTrack_defer_outputQueueBecameEmpty, (void *)a1, 10, 1, (CMBufferQueueTriggerToken *)(a1 + 104));
                  }
                }
              }
            }
          }
        }
        return FigSignalErrorAt();
      }
      else
      {
        return CMBufferQueueInstallTriggerWithIntegerThreshold(*(CMBufferQueueRef *)(a1 + 72), (CMBufferQueueTriggerCallback)assetReaderTrack_defer_outputQueueBecameEmpty, (void *)a1, 10, 1, (CMBufferQueueTriggerToken *)(a1 + 104));
      }
    }
  }
  return result;
}

void assetReaderTrack_dataBecameReady(uint64_t a1)
{
  if (a1 && *(void *)(a1 + 16) && (uint64_t v2 = FigCFWeakReferenceHolderCopyReferencedObject()) != 0)
  {
    CMTimeEpoch v3 = (const void *)v2;
    assetReaderTrack_safelyPostNotificationWithExtractionID(a1, @"AssetReader_SampleBufferNowAvailable");
    FigSemaphoreSignal();
    CFRelease(v3);
  }
  else
  {
    FigSignalErrorAt();
  }
}

void assetReaderTrack_endOfDataReached(uint64_t a1)
{
  if (a1 && *(void *)(a1 + 16) && (uint64_t v2 = FigCFWeakReferenceHolderCopyReferencedObject()) != 0)
  {
    CMTimeEpoch v3 = (const void *)v2;
    assetReaderTrack_safelyPostNotificationWithExtractionID(a1, @"AssetReader_SampleBufferNowAvailable");
    assetReaderTrack_safelyPostNotificationWithExtractionID(a1, @"AssetReader_EndOfDataReached");
    FigSemaphoreSignal();
    CFRelease(v3);
  }
  else
  {
    FigSignalErrorAt();
  }
}

void assetReaderTrack_defer_outputQueueBecameEmpty(void *a1)
{
  uint64_t v2 = (const void *)assetReaderTrack_copyRemaker((uint64_t)a1);
  uint64_t Storage = (dispatch_queue_t *)remakerFamily_getStorage(v2);
  if (v2)
  {
    CFTypeID v4 = Storage;
    if ((*(_DWORD *)Storage - 7) >= 0xFFFFFFFC && !assetReader_ensureRemakerQueue()) {
      remakerFamily_safeDispatchAsync(v4[7], a1, (dispatch_function_t)assetReaderTrack_outputQueueBecameEmpty);
    }
    CFRelease(v2);
  }
}

void assetReaderTrack_safelyPostNotificationWithExtractionID(uint64_t a1, uint64_t a2)
{
  CFTypeID v4 = (const void *)assetReaderTrack_copyRemaker(a1);
  uint64_t Storage = (_DWORD *)remakerFamily_getStorage(v4);
  if (v4)
  {
    if (*Storage <= 6u)
    {
      if (a1 && *(void *)(a1 + 16) && (uint64_t v6 = FigCFWeakReferenceHolderCopyReferencedObject()) != 0)
      {
        uint64_t v7 = (const void *)v6;
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF90], 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        FigCFDictionarySetInt32();
        remakerFamily_safelyPostNotification(v4, 1, a2, (uint64_t)Mutable, v4);
        CFRelease(v4);
        if (Mutable) {
          CFRelease(Mutable);
        }
        CFTypeID v4 = v7;
      }
      else
      {
        FigSignalErrorAt();
      }
    }
    CFRelease(v4);
  }
}

uint64_t assetReaderTrack_copyRemaker(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  if (!*(void *)(a1 + 16)) {
    return 0;
  }
  uint64_t v1 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v1) {
    return 0;
  }
  uint64_t v2 = (const void *)v1;
  if (*(void *)(v1 + 16)) {
    uint64_t v3 = FigCFWeakReferenceHolderCopyReferencedObject();
  }
  else {
    uint64_t v3 = 0;
  }
  CFRelease(v2);
  return v3;
}

void assetReaderTrack_outputQueueBecameEmpty(uint64_t a1)
{
  if (a1 && *(void *)(a1 + 16) && (uint64_t v2 = FigCFWeakReferenceHolderCopyReferencedObject()) != 0)
  {
    uint64_t v3 = (unsigned char *)v2;
    uint64_t v4 = assetReaderTrack_copyRemaker(a1);
    if (v4)
    {
      long long v5 = (const void *)v4;
      if (v3[360]) {
        remakerFamily_startNextSegmentIfMultiPassComplete((uint64_t)v3);
      }
      CFRelease(v5);
    }
    else
    {
      FigSignalErrorAt();
    }
    CFRelease(v3);
  }
  else
  {
    FigSignalErrorAt();
  }
}

uint64_t assetReaderTrack_setUpOutputVisualContextSemaphore(uint64_t a1)
{
  *(void *)(a1 + 80) = FigSemaphoreCreate();
  if (*(unsigned char *)(a1 + 160))
  {
    CFArrayRef v2 = *(const __CFArray **)(a1 + 120);
    if (v2)
    {
      CFIndex Count = CFArrayGetCount(v2);
      if (Count >= 1)
      {
        CFIndex v4 = Count;
        CFIndex v5 = 0;
        while (1)
        {
          CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 120), v5);
          if (!ValueAtIndex) {
            break;
          }
          uint64_t v7 = ValueAtIndex;
          uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v8) {
            uint64_t v9 = v8;
          }
          else {
            uint64_t v9 = 0;
          }
          uint64_t v10 = *(uint64_t (**)(const void *, void (*)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t))(v9 + 16);
          if (!v10) {
            return 4294954514;
          }
          uint64_t result = v10(v7, assetReaderTrack_sourceImageAvailable, a1);
          if (result) {
            return result;
          }
          if (v4 == ++v5) {
            goto LABEL_21;
          }
        }
      }
    }
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 112);
    uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v13) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    CFTypeRef v15 = *(uint64_t (**)(uint64_t, void (*)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t))(v14 + 16);
    if (!v15) {
      return 4294954514;
    }
    uint64_t result = v15(v12, assetReaderTrack_sourceImageAvailable, a1);
    if (result) {
      return result;
    }
LABEL_21:
    uint64_t v16 = *(void *)(a1 + 112);
    uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v18 = v17 ? v17 : 0;
    CFTypeID v19 = *(uint64_t (**)(uint64_t, void (*)(uint64_t, uint64_t), uint64_t))(v18 + 24);
    if (!v19) {
      return 4294954514;
    }
    uint64_t result = v19(v16, assetReaderTrack_sourceNoMoreImages, a1);
    if (result) {
      return result;
    }
    uint64_t v20 = *(void *)(a1 + 112);
    uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v22 = v21 ? v21 : 0;
    long long v23 = *(uint64_t (**)(uint64_t, void (*)(uint64_t, void *), uint64_t))(v22 + 32);
    if (v23)
    {
      return v23(v20, assetReaderTrack_defer_visualContextBecameEmpty, a1);
    }
    else
    {
      return 4294954514;
    }
  }
}

void assetReaderTrack_sourceImageAvailable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    if (*(void *)(a4 + 16))
    {
      uint64_t v5 = FigCFWeakReferenceHolderCopyReferencedObject();
      if (v5)
      {
        uint64_t v6 = (const void *)v5;
        if (*(unsigned char *)(a4 + 160))
        {
          CMTime v14 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
          CMTime v13 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA10];
          CFArrayRef v7 = *(const __CFArray **)(a4 + 120);
          if (v7)
          {
            CFIndex Count = CFArrayGetCount(v7);
            CFArrayGetValueAtIndex(*(CFArrayRef *)(a4 + 120), 0);
            if (Count >= 1)
            {
              CFIndex v9 = 0;
              do
              {
                CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a4 + 120), v9);
                if (FigVisualContextGetEarliestSequentialImageTime((uint64_t)ValueAtIndex, 0, (uint64_t)&v14, 0))goto LABEL_22; {
                if (v9)
                }
                {
                  CMTime time1 = v13;
                  CMTime v11 = v14;
                  if (CMTimeCompare(&time1, &v11)) {
                    goto LABEL_22;
                  }
                }
                else
                {
                  CMTime v13 = v14;
                }
              }
              while (Count != ++v9);
            }
          }
          else
          {
            CFArrayGetValueAtIndex(0, 0);
          }
          CMTime time1 = v13;
          CMTime v11 = *(CMTime *)(a4 + 164);
          if (!CMTimeCompare(&time1, &v11))
          {
LABEL_22:
            CFRelease(v6);
            return;
          }
          *(CMTime *)(a4 + 164) = v13;
        }
        assetReaderTrack_safelyPostNotificationWithExtractionID(a4, @"AssetReader_SampleBufferNowAvailable");
        FigSemaphoreSignal();
        goto LABEL_22;
      }
    }
  }

  FigSignalErrorAt();
}

void assetReaderTrack_sourceNoMoreImages(uint64_t a1, uint64_t a2)
{
  if (a2 && *(void *)(a2 + 16) && (uint64_t v3 = FigCFWeakReferenceHolderCopyReferencedObject()) != 0)
  {
    CFIndex v4 = (const void *)v3;
    assetReaderTrack_safelyPostNotificationWithExtractionID(a2, @"AssetReader_SampleBufferNowAvailable");
    assetReaderTrack_safelyPostNotificationWithExtractionID(a2, @"AssetReader_EndOfDataReached");
    FigSemaphoreSignal();
    CFRelease(v4);
  }
  else
  {
    FigSignalErrorAt();
  }
}

void assetReaderTrack_defer_visualContextBecameEmpty(uint64_t a1, void *a2)
{
  uint64_t v3 = (const void *)assetReaderTrack_copyRemaker((uint64_t)a2);
  uint64_t Storage = (dispatch_queue_t *)remakerFamily_getStorage(v3);
  if (v3)
  {
    uint64_t v5 = Storage;
    if (*(_DWORD *)Storage <= 6u && !assetReader_ensureRemakerQueue()) {
      remakerFamily_safeDispatchAsync(v5[7], a2, (dispatch_function_t)assetReaderTrack_visualContextBecameEmpty);
    }
    CFRelease(v3);
  }
}

void assetReaderTrack_visualContextBecameEmpty(uint64_t a1)
{
  if (a1 && *(void *)(a1 + 16)) {
    uint64_t v2 = FigCFWeakReferenceHolderCopyReferencedObject();
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v3 = (const void *)assetReaderTrack_copyRemaker(a1);
  uint64_t Storage = (_DWORD *)remakerFamily_getStorage(v3);
  if (v3)
  {
    if (v2)
    {
      if (*Storage <= 6u)
      {
        *(unsigned char *)(*(void *)(v2 + 152) + 200) = 1;
        if (*(unsigned char *)(v2 + 360)) {
          remakerFamily_startNextSegmentIfMultiPassComplete(v2);
        }
      }
      CFRelease((CFTypeRef)v2);
    }
    else
    {
      FigSignalErrorAt();
    }
  }
  else
  {
    uint64_t v3 = (const void *)v2;
    if (!v2) {
      return;
    }
  }

  CFRelease(v3);
}

uint64_t assetReader_startExtractionForTimeRangeCommon(const void *a1)
{
  uint64_t Storage = (_DWORD *)remakerFamily_getStorage(a1);
  if (*Storage >= 7u) {
    goto LABEL_41;
  }
  uint64_t v3 = Storage;
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
  uint64_t SinglePassPlaybackBoss = assetReader_ensureRemakerQueue();
  if (SinglePassPlaybackBoss)
  {
LABEL_38:
    uint64_t v22 = SinglePassPlaybackBoss;
    goto LABEL_39;
  }
  CFIndex Count = CFArrayGetCount(*((CFArrayRef *)v3 + 10));
  if (Count < 1)
  {
LABEL_28:
    if (*v3 != 1) {
      goto LABEL_45;
    }
    uint64_t v20 = (const void *)*((void *)v3 + 47);
    if (v20)
    {
      CFRelease(v20);
      *((void *)v3 + 47) = 0;
    }
    uint64_t SinglePassPlaybackBoss = remakerFamily_createSinglePassPlaybackBoss(a1, (void *)v3 + 47);
    if (!SinglePassPlaybackBoss)
    {
LABEL_45:
      remakerFamily_SetRemakerState((uint64_t)a1, 3, 0);
      uint64_t SinglePassPlaybackBoss = remakerfamily_updateClientPID();
      if (!SinglePassPlaybackBoss)
      {
        uint64_t SinglePassPlaybackBoss = remakerfamily_updateThrottleForBackground(a1);
        if (!SinglePassPlaybackBoss)
        {
          uint64_t SinglePassPlaybackBoss = remakerFamily_startAllSinglePassTracks((uint64_t)a1);
          if (!SinglePassPlaybackBoss)
          {
            uint64_t started = remakerFamily_startAllMultiPassTracks((uint64_t)a1, 0);
            goto LABEL_36;
          }
        }
      }
    }
    goto LABEL_38;
  }
  CFIndex v6 = Count;
  CFIndex v7 = 0;
  uint64_t v8 = v3 + 22;
  CFIndex v9 = v3 + 28;
  while (1)
  {
    CFDictionaryRef ValueAtIndex = (char *)CFArrayGetValueAtIndex(*((CFArrayRef *)v3 + 10), v7);
    uint64_t v11 = (uint64_t)ValueAtIndex;
    if (!ValueAtIndex[360]) {
      break;
    }
    if (*((_DWORD *)ValueAtIndex + 75))
    {
      if (*v3 == 3)
      {
        *(_OWORD *)&start.CMTimeValue value = *v8;
        start.CMTimeEpoch epoch = *((void *)v3 + 13);
        *(_OWORD *)&end.CMTimeValue value = *v9;
        end.CMTimeEpoch epoch = *((void *)v3 + 16);
        CMTimeRangeFromTimeToTime(&v27, &start, &end);
        uint64_t SinglePassPlaybackBoss = remakerFamily_resetSourceRenderersForNextSegment(v11, (uint64_t)&v27, 1);
        if (SinglePassPlaybackBoss) {
          goto LABEL_38;
        }
      }
      else
      {
        uint64_t v18 = ValueAtIndex + 424;
        CFTypeID v19 = (const void *)*((void *)ValueAtIndex + 53);
        if (v19)
        {
          CFRelease(v19);
          *uint64_t v18 = 0;
        }
        uint64_t SinglePassPlaybackBoss = remakerFamily_createMultiPassPlaybackBossForTrack(v11, (void *)(v11 + 424));
        if (SinglePassPlaybackBoss) {
          goto LABEL_38;
        }
      }
    }
LABEL_27:
    if (++v7 == v6) {
      goto LABEL_28;
    }
  }
  if ((*v3 - 3) > 2) {
    goto LABEL_27;
  }
  *(_OWORD *)&start.CMTimeValue value = *v8;
  start.CMTimeEpoch epoch = *((void *)v3 + 13);
  *(_OWORD *)&end.CMTimeValue value = *v9;
  end.CMTimeEpoch epoch = *((void *)v3 + 16);
  CMTimeRangeFromTimeToTime(&v24, &start, &end);
  uint64_t SinglePassPlaybackBoss = remakerFamily_resetSourceRenderersForNextSegment(v11, (uint64_t)&v24, 1);
  if (SinglePassPlaybackBoss) {
    goto LABEL_38;
  }
  uint64_t v12 = *(void *)(v11 + 232);
  if (!v12) {
    goto LABEL_27;
  }
  *(unsigned char *)(v11 + 256) = 0;
  uint64_t SinglePassPlaybackBoss = FigMediaProcessorReset(v12, 1);
  if (SinglePassPlaybackBoss) {
    goto LABEL_38;
  }
  if (!*(unsigned char *)(*(void *)(v11 + 152) + 160)) {
    goto LABEL_27;
  }
  CFArrayRef v13 = *(const __CFArray **)(v11 + 240);
  if (!v13) {
    goto LABEL_27;
  }
  CFIndex v14 = CFArrayGetCount(v13);
  if (v14 < 2) {
    goto LABEL_27;
  }
  CFIndex v15 = v14;
  CFIndex v16 = 1;
  while (1)
  {
    uint64_t v17 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v11 + 240), v16);
    if (!v17) {
      break;
    }
    uint64_t SinglePassPlaybackBoss = FigMediaProcessorReset((uint64_t)v17, 1);
    if (SinglePassPlaybackBoss) {
      goto LABEL_38;
    }
    if (v15 == ++v16) {
      goto LABEL_27;
    }
  }
LABEL_41:
  uint64_t started = FigSignalErrorAt();
LABEL_36:
  uint64_t v22 = started;
  if (started)
  {
LABEL_39:
    remakerfamily_setFailureStatusIfError((uint64_t)a1, v22);
    remakerFamily_invalidateAllMediaProcessors();
  }
  return v22;
}

uint64_t assetReader_getChannelByExtractionID(uint64_t a1, int a2)
{
  uint64_t Storage = remakerFamily_getStorage(a1);
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(Storage + 80));
  if (Count < 1) {
    return 0;
  }
  CFIndex v5 = Count;
  CFIndex v6 = 0;
  while (1)
  {
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(Storage + 80), v6);
    if (ValueAtIndex[75] == a2) {
      break;
    }
    if (v5 == ++v6) {
      return 0;
    }
  }
  return *((void *)ValueAtIndex + 19);
}

CFArrayRef assetReader_outputBufferQueuesAtEndOfData(const __CFArray *result)
{
  if (result)
  {
    CFArrayRef v1 = result;
    CFIndex Count = CFArrayGetCount(result);
    if (Count < 1)
    {
      return 0;
    }
    else
    {
      CFIndex v3 = Count;
      for (CFIndex i = 0; i != v3; ++i)
      {
        CFDictionaryRef ValueAtIndex = (opaqueCMBufferQueue *)CFArrayGetValueAtIndex(v1, i);
        uint64_t result = (const __CFArray *)CMBufferQueueIsAtEndOfData(ValueAtIndex);
        if (!result) {
          break;
        }
      }
    }
  }
  return result;
}

CFArrayRef assetReader_outputBufferQueuesIfDataReady(const __CFArray *result, CMTime *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  CMTimeValue v14 = *MEMORY[0x1E4F1FA10];
  CMTimeScale v15 = *(_DWORD *)(MEMORY[0x1E4F1FA10] + 8);
  if (result)
  {
    CFArrayRef v3 = result;
    CMTimeEpoch v4 = *(void *)(MEMORY[0x1E4F1FA10] + 16);
    CMTimeFlags v5 = *(_DWORD *)(MEMORY[0x1E4F1FA10] + 12);
    CFIndex Count = CFArrayGetCount(result);
    if (Count < 1)
    {
      CFIndex v7 = 0;
    }
    else
    {
      CFIndex v7 = 0;
      while (1)
      {
        CFDictionaryRef ValueAtIndex = (opaqueCMBufferQueue *)CFArrayGetValueAtIndex(v3, v7);
        CMBufferQueueGetFirstPresentationTimeStamp(&time1, ValueAtIndex);
        CMTimeValue value = time1.value;
        CMTimeFlags flags = time1.flags;
        CMTimeScale timescale = time1.timescale;
        CMTimeEpoch epoch = time1.epoch;
        if (CMBufferQueueIsEmpty(ValueAtIndex) || (flags & 1) == 0) {
          break;
        }
        if (v7)
        {
          time1.CMTimeValue value = v14;
          time1.CMTimeScale timescale = v15;
          time1.CMTimeFlags flags = v5;
          time1.CMTimeEpoch epoch = v4;
          v12.CMTimeValue value = value;
          v12.CMTimeScale timescale = timescale;
          v12.CMTimeFlags flags = flags;
          v12.CMTimeEpoch epoch = epoch;
          if (CMTimeCompare(&time1, &v12)) {
            break;
          }
        }
        else
        {
          CMTimeValue v14 = value;
          CMTimeScale v15 = timescale;
          CMTimeFlags v5 = flags;
          CMTimeEpoch v4 = epoch;
        }
        if (Count == ++v7)
        {
          CFIndex v7 = Count;
          break;
        }
      }
    }
    time1.CMTimeValue value = v14;
    time1.CMTimeScale timescale = v15;
    time1.CMTimeFlags flags = v5;
    time1.CMTimeEpoch epoch = v4;
    CMTime v12 = *a2;
    int32_t v11 = CMTimeCompare(&time1, &v12);
    uint64_t result = 0;
    if (v7 == Count)
    {
      if (v11)
      {
        a2->CMTimeValue value = v14;
        a2->CMTimeScale timescale = v15;
        a2->CMTimeFlags flags = v5;
        a2->CMTimeEpoch epoch = v4;
        return (const __CFArray *)1;
      }
    }
  }
  return result;
}

uint64_t assetReader_createTaggedBufferGroupSampleBuffer(uint64_t a1, uint64_t a2)
{
  CFTypeRef cf = 0;
  CMTimeValue value = 0;
  CFArrayRef v4 = *(const __CFArray **)(a1 + 152);
  if (v4) {
    uint64_t Count = CFArrayGetCount(v4);
  }
  else {
    uint64_t Count = 0;
  }
  uint64_t v6 = *MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], Count, MEMORY[0x1E4F1D510]);
  if (!Mutable)
  {
LABEL_38:
    uint64_t v18 = FigSignalErrorAt();
LABEL_27:
    uint64_t v11 = v18;
    goto LABEL_28;
  }
  if (*(void *)(a1 + 72))
  {
    if (Count >= 1)
    {
      CFIndex v8 = 0;
      do
      {
        CFDictionaryRef ValueAtIndex = (opaqueCMBufferQueue *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 128), v8);
        if (!ValueAtIndex) {
          goto LABEL_38;
        }
        uint64_t v10 = (opaqueCMSampleBuffer *)CMBufferQueueDequeueIfDataReadyAndRetain(ValueAtIndex);
        uint64_t v11 = (uint64_t)v10;
        if (!v10) {
          goto LABEL_28;
        }
        CMSampleBufferGetPresentationTimeStamp(&v23, v10);
        *(CMTime *)a2 = v23;
        if ((*(unsigned char *)(a2 + 12) & 1) == 0)
        {
          uint64_t v11 = 0;
          goto LABEL_28;
        }
        CVImageBufferRef ImageBuffer = CMSampleBufferGetImageBuffer((CMSampleBufferRef)v11);
        CMTimeValue value = ImageBuffer;
        if (!ImageBuffer) {
          goto LABEL_38;
        }
        CFArrayAppendValue(Mutable, ImageBuffer);
        CMTimeValue value = 0;
        CFRelease((CFTypeRef)v11);
      }
      while (Count != ++v8);
    }
LABEL_25:
    uint64_t v18 = MEMORY[0x19970EBC0](v6, *(void *)(a1 + 152), Mutable, &cf);
    if (!v18)
    {
      CMTime v23 = *(CMTime *)a2;
      uint64_t v18 = FigSampleBufferCreateForTaggedBufferGroup();
    }
    goto LABEL_27;
  }
  if (Count < 1) {
    goto LABEL_25;
  }
  CFIndex v13 = 0;
  while (1)
  {
    CMTimeValue v14 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 120), v13);
    *(_OWORD *)&v20.CMTimeValue value = *(_OWORD *)a2;
    v20.CMTimeEpoch epoch = *(void *)(a2 + 16);
    uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v16 = v15 ? v15 : 0;
    uint64_t v17 = *(uint64_t (**)(const void *, uint64_t, CMTime *, uint64_t, void **, void, void))(v16 + 48);
    if (!v17) {
      break;
    }
    CMTime v23 = v20;
    uint64_t v18 = v17(v14, v6, &v23, 3, &value, 0, 0);
    if (v18) {
      goto LABEL_27;
    }
    if (!value) {
      goto LABEL_38;
    }
    CFArrayAppendValue(Mutable, value);
    if (value)
    {
      CFRelease(value);
      CMTimeValue value = 0;
    }
    if (Count == ++v13) {
      goto LABEL_25;
    }
  }
  uint64_t v11 = 4294954514;
LABEL_28:
  if (value) {
    CFRelease(value);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (cf) {
    CFRelease(cf);
  }
  return v11;
}

void assetReader_addValueToDictionary(void *key, void *value, CFMutableDictionaryRef theDict)
{
}

uint64_t FigCaptionRendererStackLayoutRegionProtocolGetProtocolID()
{
  return sFigCaptionRendererStackLayoutRegionProtocolID;
}

uint64_t RegisterFigCaptionRendererStackLayoutRegionProtocolType()
{
  return MEMORY[0x1F40DC660](&sFigCaptionRendererStackLayoutRegionProtocolDesc, 0, &sFigCaptionRendererStackLayoutRegionProtocolID);
}

uint64_t FigBufferedAirPlayAudioChainSubPipeGetClassID()
{
  return sFigBufferedAirPlayAudioChainSubPipeClassID;
}

uint64_t RegisterFigBufferedAirPlayAudioChainSubPipeType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t FigBufferedAirPlayAudioChainSubPipeGetTypeID()
{
  MEMORY[0x19970EE10](&FigBufferedAirPlayAudioChainSubPipeGetClassID_sRegisterFigBufferedAirPlayAudioChainSubPipeTypeOnce, RegisterFigBufferedAirPlayAudioChainSubPipeType);

  return CMBaseClassGetCFTypeID();
}

CFStringRef FigBufferedAirPlayAudioChainSubPipeCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigBufferedAirPlayAudioChainSubPipe %p]", a1);
}

uint64_t FigMetadataSerializerCreateForQuickTimeMetadata(uint64_t a1, void *a2)
{
  if (a2)
  {
    FigMetadataSerializerGetClassID();
    uint64_t v3 = CMDerivedObjectCreate();
    if (!v3)
    {
      CMBaseObjectGetDerivedStorage();
      *a2 = 0;
    }
    return v3;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void FigQuickTimeMetadataSerializerFinalize()
{
  uint64_t DerivedStorage = (const void **)CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    CFArrayRef v1 = DerivedStorage;
    uint64_t v2 = *DerivedStorage;
    if (v2)
    {
      CFRelease(v2);
      void *v1 = 0;
    }
    uint64_t v3 = v1[1];
    if (v3)
    {
      CFRelease(v3);
      v1[1] = 0;
    }
    CFArrayRef v4 = v1[2];
    if (v4)
    {
      CFRelease(v4);
      v1[2] = 0;
    }
    CMTimeFlags v5 = v1[3];
    if (v5)
    {
      CFRelease(v5);
      v1[3] = 0;
    }
  }
  else
  {
    FigSignalErrorAt();
  }
}

__CFString *FigQuickTimeMetadataSerializerCopyDebugDescription()
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    uint64_t v2 = DerivedStorage;
    CFStringAppendFormat(Mutable, 0, @" FigQuickTimeMetadataSerializer %p\n", DerivedStorage);
    CFStringAppendFormat(Mutable, 0, @"  - handle name: %@\n", *(void *)(v2 + 24));
    CFStringAppendFormat(Mutable, 0, @"  - free atom size: %d\n", *(unsigned int *)(v2 + 32));
    CFStringAppendFormat(Mutable, 0, @"  - minimum container size: %d\n", *(unsigned int *)(v2 + 36));
    CFStringAppendFormat(Mutable, 0, @"%@", *(void *)v2);
  }
  else
  {
    FigSignalErrorAt();
  }
  return Mutable;
}

uint64_t FigQuickTimeMetadataSerializerCopyProperty(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    CFIndex v7 = (__CFString **)DerivedStorage;
    if (CFEqual(a2, @"handlerName"))
    {
      CFIndex v8 = v7[3];
      if (!v8) {
        return 4294954513;
      }
      goto LABEL_4;
    }
    if (CFEqual(a2, @"freeAtomSize"))
    {
      CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      uint64_t v11 = v7 + 4;
LABEL_10:
      CFIndex v9 = CFNumberCreate(v10, kCFNumberSInt32Type, v11);
      goto LABEL_11;
    }
    if (CFEqual(a2, @"minimumSize"))
    {
      CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      uint64_t v11 = (char *)v7 + 36;
      goto LABEL_10;
    }
    if (CFEqual(a2, @"format"))
    {
      CFIndex v8 = @"com.apple.quicktime.mdta";
LABEL_4:
      CFIndex v9 = (void *)CFRetain(v8);
LABEL_11:
      CFIndex v13 = v9;
      uint64_t result = 0;
      *a4 = v13;
      return result;
    }
    return 4294954512;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigQuickTimeMetadataSerializerSetProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    uint64_t v6 = DerivedStorage;
    if (CFEqual(@"handlerName", a2))
    {
      if (a3)
      {
        CFTypeID TypeID = CFStringGetTypeID();
        if (TypeID == CFGetTypeID(a3))
        {
          CFIndex v8 = *(const void **)(v6 + 24);
          *(void *)(v6 + 24) = CFRetain(a3);
          if (v8) {
            CFRelease(v8);
          }
          return 0;
        }
      }
    }
    else if (CFEqual(@"freeAtomSize", a2))
    {
      if (a3)
      {
        CFTypeID v10 = CFNumberGetTypeID();
        if (v10 == CFGetTypeID(a3))
        {
          int valuePtr = 0;
          CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, &valuePtr);
          uint64_t result = 0;
          *(_DWORD *)(v6 + 32) = valuePtr;
          return result;
        }
      }
    }
    else
    {
      if (!CFEqual(@"minimumSize", a2)) {
        return 4294954710;
      }
      if (a3)
      {
        CFTypeID v11 = CFNumberGetTypeID();
        if (v11 == CFGetTypeID(a3))
        {
          int v12 = 0;
          CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, &v12);
          uint64_t result = 0;
          *(_DWORD *)(v6 + 36) = v12;
          return result;
        }
      }
    }
  }

  return FigSignalErrorAt();
}

uint64_t FigQuickTimeMetadataSerializerAddItem(const void *a1, __CFString *a2, const void *a3, const void *a4, const __CFDictionary *a5)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  CFMutableDictionaryRef theDict = 0;
  CMTimeValue value = 0;
  key = 0;
  CFTypeRef cf = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage) {
    goto LABEL_80;
  }
  if (!a2) {
    goto LABEL_80;
  }
  if (!a3) {
    goto LABEL_80;
  }
  if (!a4) {
    goto LABEL_80;
  }
  CFTypeID v11 = (CFMutableDictionaryRef *)DerivedStorage;
  if (CFStringGetLength(a2) != 4) {
    goto LABEL_80;
  }
  CFAllocatorRef v12 = CFGetAllocator(a1);
  uint64_t ActualKey = FigQuickTimeMetadataCreateActualKey(v12, a2, a3, (unint64_t)&cf, (__CFDictionary **)&key);
  if (ActualKey) {
    goto LABEL_81;
  }
  int v57 = 0;
  if (!a5
    || FigMetadataGetNumericalDataTypeForMetadataProperties(@"com.apple.quicktime.mdta", a5, @"com.apple.quicktime.mdta", &v57, 0))
  {
    goto LABEL_26;
  }
  if (v57 > 64)
  {
    switch(v57)
    {
      case 'A':
      case 'B':
      case 'C':
      case 'J':
      case 'K':
      case 'L':
      case 'M':
      case 'N':
        goto LABEL_21;
      case 'F':
        CFTypeID v50 = CFGetTypeID(a4);
        if (v50 != CFDictionaryGetTypeID()) {
          goto LABEL_80;
        }
        valuePtr.origin = 0uLL;
        LODWORD(TypeID) = CGPointMakeWithDictionaryRepresentation((CFDictionaryRef)a4, &valuePtr.origin);
        goto LABEL_25;
      case 'G':
        CFTypeID v51 = CFGetTypeID(a4);
        if (v51 != CFDictionaryGetTypeID()) {
          goto LABEL_80;
        }
        valuePtr.origin = 0uLL;
        LODWORD(TypeID) = CGSizeMakeWithDictionaryRepresentation((CFDictionaryRef)a4, (CGSize *)&valuePtr);
        goto LABEL_25;
      case 'H':
        CFTypeID v52 = CFGetTypeID(a4);
        if (v52 != CFDictionaryGetTypeID()) {
          goto LABEL_80;
        }
        memset(&valuePtr, 0, sizeof(valuePtr));
        LODWORD(TypeID) = CGRectMakeWithDictionaryRepresentation((CFDictionaryRef)a4, &valuePtr);
        goto LABEL_25;
      case 'O':
      case 'S':
        CFTypeID v14 = CFGetTypeID(a4);
        if (v14 != CFArrayGetTypeID() || CFArrayGetCount((CFArrayRef)a4) != 9) {
          goto LABEL_80;
        }
        CFIndex v15 = 0;
        while (1)
        {
          CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)a4, v15);
          if (!ValueAtIndex) {
            goto LABEL_80;
          }
          CFTypeID v17 = CFGetTypeID(ValueAtIndex);
          if (v17 != CFNumberGetTypeID()) {
            goto LABEL_80;
          }
          if (++v15 == 9) {
            goto LABEL_26;
          }
        }
      case 'P':
      case 'Q':
        CFTypeID v41 = CFGetTypeID(a4);
        if (v41 != CFArrayGetTypeID()) {
          goto LABEL_80;
        }
        int v42 = v57;
        if (v57 != 80) {
          goto LABEL_57;
        }
        if (CFArrayGetCount((CFArrayRef)a4) < 3) {
          goto LABEL_80;
        }
        int v42 = v57;
LABEL_57:
        if (v42 == 81 && CFArrayGetCount((CFArrayRef)a4) < 2) {
          goto LABEL_80;
        }
        if (CFArrayGetCount((CFArrayRef)a4) < 1) {
          goto LABEL_26;
        }
        CFIndex v43 = 0;
        break;
      default:
        goto LABEL_82;
    }
    while (1)
    {
      CFDictionaryRef v44 = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)a4, v43);
      valuePtr.origin = 0uLL;
      if (!v44) {
        goto LABEL_80;
      }
      CFDictionaryRef v45 = v44;
      CFTypeID v46 = CFGetTypeID(v44);
      if (v46 != CFDictionaryGetTypeID() || !CGPointMakeWithDictionaryRepresentation(v45, &valuePtr.origin)) {
        goto LABEL_80;
      }
      if (++v43 >= CFArrayGetCount((CFArrayRef)a4)) {
        goto LABEL_26;
      }
    }
  }
  if ((v57 - 21) < 4)
  {
LABEL_21:
    CFTypeID v20 = CFGetTypeID(a4);
    if (v20 == CFNumberGetTypeID())
    {
LABEL_22:
      LODWORD(TypeID) = 1;
      goto LABEL_25;
    }
    CFTypeID v18 = CFGetTypeID(a4);
    CFTypeID TypeID = (const void *)CFBooleanGetTypeID();
    goto LABEL_24;
  }
  if ((v57 - 1) < 3)
  {
    CFTypeID v18 = CFGetTypeID(a4);
    CFTypeID TypeID = (const void *)CFStringGetTypeID();
LABEL_24:
    LODWORD(TypeID) = v18 == (void)TypeID;
    goto LABEL_25;
  }
  if (v57 != 30)
  {
LABEL_82:
    CFTypeID v18 = CFGetTypeID(a4);
    CFTypeID TypeID = (const void *)CFDataGetTypeID();
    goto LABEL_24;
  }
  CFTypeID v47 = CFGetTypeID(a4);
  if (v47 != CFDictionaryGetTypeID() || CFDictionaryGetCount((CFDictionaryRef)a4) != 4) {
    goto LABEL_80;
  }
  uint64_t v48 = 0;
  *(void *)&valuePtr.origin.x = @"widthPixels";
  *(void *)&valuePtr.origin.y = @"heightPixels";
  *(void *)&valuePtr.size.width = @"widthPoints";
  *(void *)&valuePtr.size.height = @"heightPoints";
  while (1)
  {
    CFTypeID TypeID = CFDictionaryGetValue((CFDictionaryRef)a4, *(const void **)((char *)&valuePtr.origin.x + v48));
    if (!TypeID) {
      break;
    }
    CFTypeID v49 = CFGetTypeID(TypeID);
    if (v49 != CFNumberGetTypeID())
    {
      LODWORD(TypeID) = 0;
      break;
    }
    v48 += 8;
    if (v48 == 32) {
      goto LABEL_22;
    }
  }
LABEL_25:
  if (!TypeID) {
    goto LABEL_80;
  }
LABEL_26:
  if (!*v11)
  {
    CFAllocatorRef v21 = CFGetAllocator(a1);
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v21, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    *CFTypeID v11 = Mutable;
    if (!Mutable) {
      goto LABEL_80;
    }
  }
  if (!v11[1])
  {
    CFAllocatorRef v23 = CFGetAllocator(a1);
    CFMutableArrayRef v24 = CFArrayCreateMutable(v23, 0, MEMORY[0x1E4F1D510]);
    v11[1] = v24;
    if (!v24) {
      goto LABEL_80;
    }
  }
  if (!v11[2])
  {
    CFAllocatorRef v25 = CFGetAllocator(a1);
    CFMutableArrayRef v26 = CFArrayCreateMutable(v25, 0, MEMORY[0x1E4F1D510]);
    _OWORD v11[2] = v26;
    if (!v26) {
      goto LABEL_80;
    }
  }
  if (!CFDictionaryGetValueIfPresent(*v11, key, (const void **)&value))
  {
    uint64_t v34 = FigQuickTimeMetadataCreateNewItem(a1, cf, a4, a5, &theDict);
    if (!v34)
    {
      CFArrayAppendValue(v11[1], key);
      *(void *)&valuePtr.origin.x = CFArrayGetCount(v11[1]);
      CFNumberRef v35 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberCFIndexType, &valuePtr);
      CFMutableDictionaryRef v36 = theDict;
      CFDictionarySetValue(theDict, @"keyIndex", v35);
      CFRelease(v35);
      CFDictionarySetValue(*v11, key, v36);
      CFArrayAppendValue(v11[2], v36);
      CFRelease(v36);
      CFMutableDictionaryRef theDict = 0;
    }
    goto LABEL_39;
  }
  CFTypeID v27 = CFGetTypeID(value);
  if (v27 != CFDictionaryGetTypeID())
  {
    uint64_t ActualKey = FigQuickTimeMetadataCreateNewItem(a1, cf, a4, a5, &theDict);
    if (ActualKey) {
      goto LABEL_81;
    }
    CFDictionaryRef v37 = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)value, 0);
    if (v37)
    {
      CFTypeID v38 = CFDictionaryGetValue(v37, @"keyIndex");
      CFMutableDictionaryRef v39 = theDict;
      CFDictionarySetValue(theDict, @"keyIndex", v38);
      CFArrayAppendValue((CFMutableArrayRef)value, v39);
      CFArrayAppendValue(v11[2], v39);
      CFMutableDictionaryRef v33 = v39;
      goto LABEL_47;
    }
LABEL_80:
    uint64_t ActualKey = FigSignalErrorAt();
    goto LABEL_81;
  }
  uint64_t v28 = value;
  int v29 = CFDictionaryGetValue((CFDictionaryRef)value, @"keyIndex");
  uint64_t ActualKey = FigQuickTimeMetadataCreateNewItem(a1, cf, a4, a5, &theDict);
  if (!ActualKey)
  {
    CFAllocatorRef v30 = CFGetAllocator(a1);
    long long v31 = CFArrayCreateMutable(v30, 0, MEMORY[0x1E4F1D510]);
    if (!value)
    {
      uint64_t v34 = FigSignalErrorAt();
      goto LABEL_40;
    }
    CFMutableDictionaryRef v32 = theDict;
    CFDictionarySetValue(theDict, @"keyIndex", v29);
    CFArrayAppendValue(v31, v28);
    CFArrayAppendValue(v31, v32);
    CFDictionarySetValue(*v11, key, v31);
    CFArrayAppendValue(v11[2], v32);
    CFRelease(v32);
    CFMutableDictionaryRef v33 = v31;
LABEL_47:
    CFRelease(v33);
    uint64_t v34 = 0;
    goto LABEL_48;
  }
LABEL_81:
  uint64_t v34 = ActualKey;
LABEL_39:
  long long v31 = 0;
LABEL_40:
  if (theDict) {
    CFRelease(theDict);
  }
  if (v31) {
    CFRelease(v31);
  }
LABEL_48:
  if (cf) {
    CFRelease(cf);
  }
  if (key) {
    CFRelease(key);
  }
  return v34;
}

uint64_t FigQuickTimeMetadataSerializerContainsKey(const void *a1, __CFString *a2, const void *a3)
{
  key = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage || !a2 || !a3 || (CFIndex v7 = (CFDictionaryRef *)DerivedStorage, CFStringGetLength(a2) != 4))
  {
    FigSignalErrorAt();
    return 0;
  }
  if (!*v7) {
    return 0;
  }
  CFAllocatorRef v8 = CFGetAllocator(a1);
  int ActualKey = FigQuickTimeMetadataCreateActualKey(v8, a2, a3, 0, (__CFDictionary **)&key);
  CFTypeID v10 = key;
  if (ActualKey)
  {
    uint64_t v11 = 0;
    if (!key) {
      return v11;
    }
    goto LABEL_8;
  }
  uint64_t v11 = CFDictionaryContainsKey(*v7, key);
  CFTypeID v10 = key;
  if (key) {
LABEL_8:
  }
    CFRelease(v10);
  return v11;
}

uint64_t FigQuickTimeMetadataCreateActualKey(const __CFAllocator *a1, __CFString *cf1, const void *ValueAtIndex, unint64_t a4, __CFDictionary **a5)
{
  CFArrayRef theArray = 0;
  if (!(a4 | (unint64_t)a5)) {
    goto LABEL_17;
  }
  CFAllocatorRef v8 = cf1;
  if (!CFEqual(cf1, @"comn"))
  {
    if (!CFEqual(v8, @"mdta")) {
      goto LABEL_10;
    }
    CFTypeID v12 = CFGetTypeID(ValueAtIndex);
    if (v12 == CFStringGetTypeID()) {
      goto LABEL_10;
    }
    goto LABEL_17;
  }
  CFTypeID v10 = CFGetTypeID(ValueAtIndex);
  if (v10 != CFStringGetTypeID()) {
    goto LABEL_17;
  }
  uint64_t v11 = FigQuickTimeMetadataCopyNativeKeysFromCommonKey(ValueAtIndex, &theArray);
  if (!v11)
  {
    if (theArray && CFArrayGetCount(theArray))
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0);
      CFAllocatorRef v8 = @"mdta";
LABEL_10:
      if (!a5) {
        goto LABEL_13;
      }
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (Mutable)
      {
        CFTypeID v14 = Mutable;
        CFDictionaryAddValue(Mutable, @"key", ValueAtIndex);
        CFDictionaryAddValue(v14, @"keyspace", v8);
        *a5 = v14;
LABEL_13:
        if (a4)
        {
          if (ValueAtIndex) {
            CFTypeRef v15 = CFRetain(ValueAtIndex);
          }
          else {
            CFTypeRef v15 = 0;
          }
          uint64_t v16 = 0;
          *(void *)a4 = v15;
        }
        else
        {
          uint64_t v16 = 0;
        }
        goto LABEL_21;
      }
    }
LABEL_17:
    uint64_t v11 = FigSignalErrorAt();
  }
  uint64_t v16 = v11;
LABEL_21:
  if (theArray) {
    CFRelease(theArray);
  }
  return v16;
}

uint64_t FigQuickTimeMetadataCreateNewItem(const void *a1, const void *a2, const void *a3, const __CFDictionary *a4, __CFDictionary **a5)
{
  CFAllocatorRef v9 = CFGetAllocator(a1);
  if (a4) {
    CFDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(v9, 0, a4);
  }
  else {
    CFDictionaryRef MutableCopy = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  }
  uint64_t v11 = MutableCopy;
  if (MutableCopy)
  {
    CFDictionarySetValue(MutableCopy, @"value", a3);
    CFDictionarySetValue(v11, @"key", a2);
    *a5 = v11;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigQuickTimeMetadataSerializerCreateBBuf(const void *a1, CMBlockBufferRef *a2)
{
  uint64_t v130 = *MEMORY[0x1E4F143B8];
  uint64_t v111 = 0;
  CMBlockBufferRef blockBufferOut = 0;
  memset(v110, 0, sizeof(v110));
  uint64_t DerivedStorage = (const __CFDictionary **)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
  {
    uint64_t v8 = FigSignalErrorAt();
    CMBlockBufferRef v9 = 0;
    goto LABEL_211;
  }
  if (a2)
  {
    CMTimeFlags v5 = DerivedStorage;
    CFDictionaryRef v6 = *DerivedStorage;
    if (v6 && CFDictionaryGetCount(v6) || v5[3] || *((_DWORD *)v5 + 8) || *((_DWORD *)v5 + 9))
    {
      CFAllocatorRef v7 = CFGetAllocator(a1);
      uint64_t v8 = CMBlockBufferCreateEmpty(v7, 8u, 0, &blockBufferOut);
      CMBlockBufferRef v9 = blockBufferOut;
      if (v8) {
        goto LABEL_225;
      }
      uint64_t v10 = FigAtomWriterInitWithBlockBuffer();
      if (v10)
      {
        uint64_t v8 = v10;
        CMBlockBufferRef v9 = blockBufferOut;
        goto LABEL_225;
      }
      uint64_t v11 = CMBaseObjectGetDerivedStorage();
      uint64_t v12 = FigAtomWriterBeginAtom();
      if (v12) {
        goto LABEL_209;
      }
      uint64_t v114 = 0;
      memset(v113, 0, sizeof(v113));
      uint64_t v12 = FigAtomWriterInitWithParent();
      if (v12) {
        goto LABEL_209;
      }
      *(void *)buffer = 0;
      memset(point, 0, 26);
      uint64_t v13 = CMBaseObjectGetDerivedStorage();
      LODWORD(point[0].origin.y) = 1635017837;
      uint64_t v12 = FigAtomWriterBeginAtom();
      if (v12) {
        goto LABEL_209;
      }
      CFTypeID v14 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
      uint64_t v107 = v11;
      if (*(void *)(v13 + 24))
      {
        uint64_t BytesFromCFString = FigCreateBytesFromCFString();
        if (!BytesFromCFString)
        {
          uint64_t v8 = FigSignalErrorAt();
          if (v8) {
            goto LABEL_210;
          }
          goto LABEL_24;
        }
        uint64_t v16 = (void *)BytesFromCFString;
      }
      else
      {
        uint64_t v16 = 0;
      }
      uint64_t appended = FigAtomWriterAppendData();
      if (!appended)
      {
        if (*(uint64_t *)buffer < 1 || (uint64_t appended = FigAtomWriterAppendData(), !appended)) {
          uint64_t appended = FigAtomWriterEndAtom();
        }
      }
      uint64_t v8 = appended;
      if (v16) {
        CFAllocatorDeallocate(*v14, v16);
      }
      if (!v8)
      {
LABEL_24:
        v129.i32[0] = 0;
        point[0].origin.x = 0.0;
        LODWORD(v125) = 0;
        uint64_t v109 = CMBaseObjectGetDerivedStorage();
        CFArrayRef v18 = *(const __CFArray **)(v109 + 8);
        if (!v18) {
          goto LABEL_45;
        }
        unint64_t Count = CFArrayGetCount(v18);
        if (!Count) {
          goto LABEL_45;
        }
        unint64_t v20 = Count;
        if (HIDWORD(Count))
        {
          uint64_t v8 = FigSignalErrorAt();
          if (v8) {
            goto LABEL_210;
          }
          goto LABEL_45;
        }
        uint64_t v12 = FigAtomWriterBeginAtom();
        if (v12) {
          goto LABEL_209;
        }
        uint64_t v12 = FigAtomWriterAppendVersionAndFlags();
        if (v12) {
          goto LABEL_209;
        }
        LODWORD(v115) = bswap32(v20);
        uint64_t v12 = FigAtomWriterAppendData();
        if (v12) {
          goto LABEL_209;
        }
        CFIndex v21 = 0;
        CFAllocatorRef v22 = *v14;
        while (1)
        {
          CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v109 + 8), v21);
          CFArrayRef Value = CFDictionaryGetValue(ValueAtIndex, @"key");
          CFStringRef v25 = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, @"keyspace");
          point[0].origin.x = 0.0;
          CFTypeID v26 = CFGetTypeID(Value);
          CFTypeID TypeID = CFStringGetTypeID();
          if (v26 == TypeID)
          {
            BytePtr = (void *)FigCreateBytesFromCFString();
            if (!BytePtr)
            {
              uint64_t v101 = FigSignalErrorAt();
LABEL_44:
              uint64_t v8 = v101;
              CFTypeID v14 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
              if (v101) {
                break;
              }
LABEL_45:
              uint64_t v34 = CMBaseObjectGetDerivedStorage();
              uint64_t v12 = FigAtomWriterBeginAtom();
              if (!v12)
              {
                uint64_t v118 = 0;
                long long v116 = 0u;
                long long v117 = 0u;
                long long v115 = 0u;
                uint64_t v12 = FigAtomWriterInitWithParent();
                if (!v12)
                {
                  CFArrayRef v35 = *(const __CFArray **)(v34 + 16);
                  if (v35)
                  {
                    CFIndex v36 = CFArrayGetCount(v35);
                    if (v36 >= 1)
                    {
                      CFIndex v37 = v36;
                      CFIndex v38 = 0;
                      CFStringRef v108 = (const __CFString *)*MEMORY[0x1E4F1D1F0];
                      CFAllocatorRef v104 = *v14;
                      while (1)
                      {
                        CFDictionaryRef v39 = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v34 + 16), v38);
                        int valuePtr = 0;
                        uint64_t v122 = 0;
                        long long v120 = 0u;
                        long long v121 = 0u;
                        *(_OWORD *)buffer = 0u;
                        CFNumberRef v40 = (const __CFNumber *)CFDictionaryGetValue(v39, @"keyIndex");
                        CFNumberGetValue(v40, kCFNumberSInt32Type, &valuePtr);
                        uint64_t v12 = FigAtomWriterBeginAtom();
                        if (v12) {
                          goto LABEL_209;
                        }
                        uint64_t v12 = FigAtomWriterInitWithParent();
                        if (v12) {
                          goto LABEL_209;
                        }
                        if (!CFDictionaryContainsKey(v39, @"storageLocation")) {
                          break;
                        }
                        if (!FigCFDictionaryGetDictionaryValue()
                          || !FigCFDictionaryGetNumberValue()
                          || (unint64_t UInt64 = FigCFNumberGetUInt64(),
                              (DataCFArrayRef Value = (const __CFData *)FigCFDictionaryGetDataValue()) == 0))
                        {
                          uint64_t v91 = FigSignalErrorAt();
                          goto LABEL_178;
                        }
                        CFIndex Length = CFDataGetLength(DataValue);
                        LODWORD(v125) = 0;
                        LODWORD(v124) = 0;
                        BYTE4(v126) = -120;
                        LOWORD(v127) = 0;
                        *(void *)&point[0].origin.x = bswap64(UInt64);
                        v129.i64[0] = bswap64(Length);
                        uint64_t v12 = FigAtomWriterBeginAtom();
                        if (v12) {
                          goto LABEL_209;
                        }
                        uint64_t v12 = FigAtomWriterAppendData();
                        if (v12) {
                          goto LABEL_209;
                        }
                        uint64_t v12 = FigAtomWriterAppendData();
                        if (v12) {
                          goto LABEL_209;
                        }
                        uint64_t v12 = FigAtomWriterAppendData();
                        if (v12) {
                          goto LABEL_209;
                        }
                        uint64_t v12 = FigAtomWriterAppendData();
                        if (v12) {
                          goto LABEL_209;
                        }
                        uint64_t v12 = FigAtomWriterAppendData();
                        if (v12) {
                          goto LABEL_209;
                        }
                        uint64_t v12 = FigAtomWriterAppendData();
                        if (v12) {
                          goto LABEL_209;
                        }
                        uint64_t v12 = FigAtomWriterEndAtom();
                        if (v12) {
                          goto LABEL_209;
                        }
LABEL_177:
                        uint64_t v91 = FigAtomWriterEndAtom();
LABEL_178:
                        uint64_t v8 = v91;
                        if (v91) {
                          goto LABEL_210;
                        }
                        if (++v38 == v37) {
                          goto LABEL_206;
                        }
                      }
                      uint64_t v126 = 0;
                      CFStringRef v124 = 0;
                      CFIndex v125 = 0;
                      uint64_t v12 = FigAtomWriterBeginAtom();
                      if (v12) {
                        goto LABEL_209;
                      }
                      CFDictionaryRef v44 = CFDictionaryGetValue(v39, @"value");
                      if (v44) {
                        CFStringRef v45 = (const __CFString *)CFRetain(v44);
                      }
                      else {
                        CFStringRef v45 = 0;
                      }
                      unsigned int v127 = 0;
                      if (FigMetadataGetNumericalDataTypeForMetadataProperties(@"com.apple.quicktime.mdta", v39, @"com.apple.quicktime.mdta", &v126, &v125))
                      {
                        CFTypeID v46 = CFGetTypeID(v45);
                        if (v46 == CFStringGetTypeID() || v46 == CFDateGetTypeID())
                        {
                          LODWORD(v126) = 1;
                          goto LABEL_73;
                        }
                        if (v46 == CFNumberGetTypeID() || v46 == CFBooleanGetTypeID())
                        {
                          if (CFNumberIsFloatType((CFNumberRef)v45))
                          {
                            if (CFNumberGetByteSize((CFNumberRef)v45) == 4) {
                              int v60 = 23;
                            }
                            else {
                              int v60 = 24;
                            }
LABEL_197:
                            LODWORD(v126) = v60;
                          }
                          else
                          {
                            LODWORD(v126) = 21;
                            if (CFNumberGetByteSize((CFNumberRef)v45) == 8)
                            {
                              point[0].origin.x = 0.0;
                              point[0].origin.y = 0.0;
                              CFNumberGetValue((CFNumberRef)v45, kCFNumberMaxType|kCFNumberSInt8Type, point);
                              if (!*(void *)&point[0].origin.x
                                && (*(void *)&point[0].origin.y & 0x8000000000000000) != 0)
                              {
                                int v60 = 22;
                                goto LABEL_197;
                              }
                            }
                          }
                        }
                      }
                      else if ((v126 - 23) >= 0xFFFFFFFE)
                      {
                        if (v45)
                        {
                          CFTypeID v54 = CFGetTypeID(v45);
                          if (v54 == CFNumberGetTypeID() || (CFTypeID v55 = CFGetTypeID(v45), v55 == CFBooleanGetTypeID()))
                          {
                            if (v125 && !FigMetadataDataLengthCanHoldValue(v125, v126 == 21, (CFNumberRef)v45)) {
                              CFIndex v125 = 0;
                            }
                          }
                        }
                      }
LABEL_73:
                      unsigned int v127 = bswap32(v126 & 0xFFFFFF);
                      uint64_t v47 = FigAtomWriterAppendData();
                      if (v47) {
                        goto LABEL_202;
                      }
                      CFLocaleRef v48 = (const __CFLocale *)CFDictionaryGetValue(v39, @"locale");
                      if (v48)
                      {
                        CFLocaleRef v49 = v48;
                        unsigned int PackedISO639_2TFromLocale = FigMetadataGetPackedISO639_2TFromLocale(v48);
                        CFStringRef v51 = (const __CFString *)CFLocaleGetValue(v49, v108);
                        if (v51)
                        {
                          BYTE2(point[0].origin.x) = 0;
                          LOWORD(point[0].origin.x) = 0;
                          int CString = CFStringGetCString(v51, (char *)point, 3, 0x600u);
                          unsigned int v53 = bswap32(LOWORD(point[0].origin.x)) >> 16;
                          if (!CString) {
                            unsigned int v53 = 0;
                          }
LABEL_88:
                          HIWORD(v126) = __rev16(PackedISO639_2TFromLocale);
                          WORD2(v126) = __rev16(v53);
                          uint64_t v47 = FigAtomWriterAppendData();
                          if (!v47)
                          {
                            switch((int)v126)
                            {
                              case 'A':
                              case 'K':
LABEL_90:
                                LOBYTE(point[0].origin.x) = 0;
                                CFNumberGetValue((CFNumberRef)v45, kCFNumberSInt8Type, point);
                                goto LABEL_118;
                              case 'B':
                              case 'L':
LABEL_97:
                                LOWORD(point[0].origin.x) = 0;
                                CFNumberGetValue((CFNumberRef)v45, kCFNumberSInt16Type, point);
                                LOWORD(point[0].origin.x) = bswap32(LOWORD(point[0].origin.x)) >> 16;
                                goto LABEL_118;
                              case 'C':
                              case 'M':
LABEL_114:
                                LODWORD(point[0].origin.x) = 0;
                                CFNumberRef v66 = (const __CFNumber *)v45;
                                CFNumberType v67 = kCFNumberSInt32Type;
LABEL_115:
                                CFNumberGetValue(v66, v67, point);
                                LODWORD(point[0].origin.x) = bswap32(LODWORD(point[0].origin.x));
                                goto LABEL_118;
                              case 'D':
                              case 'E':
                              case 'I':
LABEL_136:
                                if (!v45) {
                                  goto LABEL_169;
                                }
                                CFTypeID v77 = CFGetTypeID(v45);
                                if (v77 != CFDataGetTypeID()) {
                                  goto LABEL_169;
                                }
                                CFDataGetLength((CFDataRef)v45);
                                CFDataGetBytePtr((CFDataRef)v45);
                                goto LABEL_118;
                              case 'F':
                                if (!v45) {
                                  goto LABEL_169;
                                }
                                CFTypeID v88 = CFGetTypeID(v45);
                                if (v88 != CFDictionaryGetTypeID()) {
                                  goto LABEL_169;
                                }
                                point[0].origin.x = 0.0;
                                point[0].origin.y = 0.0;
                                if (!CGPointMakeWithDictionaryRepresentation((CFDictionaryRef)v45, &point[0].origin)) {
                                  goto LABEL_169;
                                }
                                goto LABEL_163;
                              case 'G':
                                if (!v45) {
                                  goto LABEL_169;
                                }
                                CFTypeID v89 = CFGetTypeID(v45);
                                if (v89 != CFDictionaryGetTypeID()) {
                                  goto LABEL_169;
                                }
                                point[0].origin.x = 0.0;
                                point[0].origin.y = 0.0;
                                if (!CGSizeMakeWithDictionaryRepresentation((CFDictionaryRef)v45, (CGSize *)point)) {
                                  goto LABEL_169;
                                }
LABEL_163:
                                *(int8x8_t *)v129.i8 = vrev32_s8((int8x8_t)vcvt_f32_f64((float64x2_t)point[0].origin));
                                goto LABEL_168;
                              case 'H':
                                if (!v45) {
                                  goto LABEL_169;
                                }
                                CFTypeID v90 = CFGetTypeID(v45);
                                if (v90 != CFDictionaryGetTypeID()) {
                                  goto LABEL_169;
                                }
                                memset(point, 0, 32);
                                if (!CGRectMakeWithDictionaryRepresentation((CFDictionaryRef)v45, point)) {
                                  goto LABEL_169;
                                }
                                int8x16_t v129 = vrev32q_s8((int8x16_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64((float64x2_t)point[0].origin), (float64x2_t)point[0].size));
LABEL_168:
                                uint64_t v47 = FigAtomWriterAppendData();
                                if (!v47) {
                                  goto LABEL_169;
                                }
                                goto LABEL_202;
                              case 'J':
                              case 'N':
LABEL_116:
                                point[0].origin.x = 0.0;
                                CFNumberRef v68 = (const __CFNumber *)v45;
                                CFNumberType v69 = kCFNumberSInt64Type;
LABEL_117:
                                CFNumberGetValue(v68, v69, point);
                                *(void *)&point[0].origin.x = bswap64(*(unint64_t *)&point[0].origin.x);
LABEL_118:
                                uint64_t v8 = FigAtomWriterAppendData();
                                uint64_t v59 = 0;
                                if (!v8) {
                                  goto LABEL_170;
                                }
                                goto LABEL_172;
                              case 'O':
                                uint64_t v105 = a2;
                                if (!v45) {
                                  goto LABEL_190;
                                }
                                CFTypeID v92 = CFGetTypeID(v45);
                                if (v92 != CFArrayGetTypeID() || CFArrayGetCount((CFArrayRef)v45) != 9) {
                                  goto LABEL_190;
                                }
                                uint64_t v93 = -9;
                                v94 = point;
                                do
                                {
                                  CFNumberRef v95 = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)v45, v93 + 9);
                                  if (!v95) {
                                    goto LABEL_190;
                                  }
                                  CFNumberRef v96 = v95;
                                  CFTypeID v97 = CFGetTypeID(v95);
                                  if (v97 != CFNumberGetTypeID()) {
                                    goto LABEL_190;
                                  }
                                  CFNumberGetValue(v96, kCFNumberDoubleType, v94);
                                  *(void *)&v94->origin.x = bswap64(*(void *)&v94->origin.x);
                                  v94 = (CGRect *)((char *)v94 + 8);
                                }
                                while (!__CFADD__(v93++, 1));
                                uint64_t v99 = FigAtomWriterAppendData();
                                if (!v99)
                                {
LABEL_190:
                                  uint64_t v59 = 0;
                                  goto LABEL_191;
                                }
                                uint64_t v8 = v99;
                                uint64_t v59 = 0;
LABEL_204:
                                a2 = v105;
                                goto LABEL_172;
                              case 'P':
                              case 'Q':
                                if (!v45) {
                                  goto LABEL_169;
                                }
                                CFTypeID v70 = CFGetTypeID(v45);
                                if (v70 != CFArrayGetTypeID()) {
                                  goto LABEL_169;
                                }
                                int v71 = v126;
                                if (v126 != 80) {
                                  goto LABEL_125;
                                }
                                if (CFArrayGetCount((CFArrayRef)v45) < 3) {
                                  goto LABEL_169;
                                }
                                int v71 = v126;
LABEL_125:
                                if (v71 == 81 && CFArrayGetCount((CFArrayRef)v45) < 2) {
                                  goto LABEL_169;
                                }
                                uint64_t v105 = a2;
                                point[0].origin.x = 0.0;
                                point[0].origin.y = 0.0;
                                size_t v103 = 8 * CFArrayGetCount((CFArrayRef)v45);
                                uint64_t v59 = (int8x8_t *)malloc_type_calloc(1uLL, v103, 0xF2F7A319uLL);
                                if (!v59)
                                {
                                  uint64_t v8 = FigSignalErrorAt();
                                  goto LABEL_204;
                                }
                                if (CFArrayGetCount((CFArrayRef)v45) < 1) {
                                  goto LABEL_134;
                                }
                                CFIndex v72 = 0;
                                do
                                {
                                  CFDictionaryRef v73 = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)v45, v72);
                                  if (!v73
                                    || (v74 = v73, CFTypeID v75 = CFGetTypeID(v73), v75 != CFDictionaryGetTypeID())
                                    || !CGPointMakeWithDictionaryRepresentation(v74, &point[0].origin))
                                  {
LABEL_191:
                                    a2 = v105;
                                    goto LABEL_170;
                                  }
                                  v59[v72++] = vrev32_s8((int8x8_t)vcvt_f32_f64((float64x2_t)point[0].origin));
                                }
                                while (v72 < CFArrayGetCount((CFArrayRef)v45));
LABEL_134:
                                uint64_t v76 = FigAtomWriterAppendData();
                                a2 = v105;
                                if (!v76) {
                                  goto LABEL_170;
                                }
                                goto LABEL_171;
                              default:
                                switch((int)v126)
                                {
                                  case 21:
                                  case 22:
                                    CFTypeID v56 = CFGetTypeID(v45);
                                    if (v56 != CFNumberGetTypeID())
                                    {
                                      CFTypeID v57 = CFGetTypeID(v45);
                                      if (v57 != CFBooleanGetTypeID()) {
                                        goto LABEL_169;
                                      }
                                    }
                                    CFIndex ByteSize = v125;
                                    if (!v125) {
                                      CFIndex ByteSize = CFNumberGetByteSize((CFNumberRef)v45);
                                    }
                                    uint64_t v59 = 0;
                                    uint64_t v8 = 4294954709;
                                    switch(ByteSize)
                                    {
                                      case 1:
                                        goto LABEL_90;
                                      case 2:
                                        goto LABEL_97;
                                      case 4:
                                        goto LABEL_114;
                                      case 8:
                                        goto LABEL_116;
                                      default:
                                        goto LABEL_172;
                                    }
                                    goto LABEL_172;
                                  case 23:
                                    if (!v45) {
                                      goto LABEL_169;
                                    }
                                    CFTypeID v78 = CFGetTypeID(v45);
                                    if (v78 != CFNumberGetTypeID())
                                    {
                                      CFTypeID v79 = CFGetTypeID(v45);
                                      if (v79 != CFBooleanGetTypeID()) {
                                        goto LABEL_169;
                                      }
                                    }
                                    LODWORD(point[0].origin.x) = 0;
                                    CFNumberRef v66 = (const __CFNumber *)v45;
                                    CFNumberType v67 = kCFNumberFloat32Type;
                                    goto LABEL_115;
                                  case 24:
                                    if (!v45) {
                                      goto LABEL_169;
                                    }
                                    CFTypeID v80 = CFGetTypeID(v45);
                                    if (v80 != CFNumberGetTypeID())
                                    {
                                      CFTypeID v81 = CFGetTypeID(v45);
                                      if (v81 != CFBooleanGetTypeID()) {
                                        goto LABEL_169;
                                      }
                                    }
                                    point[0].origin.x = 0.0;
                                    CFNumberRef v68 = (const __CFNumber *)v45;
                                    CFNumberType v69 = kCFNumberFloat64Type;
                                    goto LABEL_117;
                                  case 25:
                                  case 26:
                                  case 27:
                                  case 28:
                                  case 29:
                                    goto LABEL_136;
                                  case 30:
                                    if (!v45) {
                                      goto LABEL_169;
                                    }
                                    CFTypeID v82 = CFGetTypeID(v45);
                                    if (v82 != CFDictionaryGetTypeID()
                                      || CFDictionaryGetCount((CFDictionaryRef)v45) != 4)
                                    {
                                      goto LABEL_169;
                                    }
                                    CFArrayRef v106 = a2;
                                    uint64_t v83 = 0;
                                    *(void *)&point[0].origin.x = @"widthPixels";
                                    *(void *)&point[0].origin.y = @"heightPixels";
                                    CMTimeRange v84 = &v129;
                                    *(void *)&point[0].size.width = @"widthPoints";
                                    *(void *)&point[0].size.height = @"heightPoints";
                                    break;
                                  default:
                                    if ((v126 - 1) >= 3) {
                                      goto LABEL_136;
                                    }
                                    if (!v45) {
                                      goto LABEL_169;
                                    }
                                    CFTypeID v61 = CFGetTypeID(v45);
                                    if (v61 != CFDateGetTypeID()) {
                                      goto LABEL_109;
                                    }
                                    uint64_t v47 = FigMetadataCopyISO8601GMTStringFromDate((const __CFDate *)v45, &v124);
                                    if (v47) {
                                      goto LABEL_202;
                                    }
                                    CFStringRef v62 = v124;
                                    if (!v124)
                                    {
                                      CFRelease(v45);
                                      uint64_t v59 = 0;
                                      CFStringRef v45 = 0;
                                      goto LABEL_170;
                                    }
                                    CFRetain(v124);
                                    CFRelease(v45);
                                    CFStringRef v45 = v62;
LABEL_109:
                                    CFTypeID v63 = CFGetTypeID(v45);
                                    if (v63 != CFStringGetTypeID()) {
                                      goto LABEL_169;
                                    }
                                    point[0].origin.x = 0.0;
                                    if (!CFStringGetLength(v45)) {
                                      goto LABEL_169;
                                    }
                                    uint64_t v64 = FigCreateBytesFromCFString();
                                    if (!v64)
                                    {
                                      uint64_t v47 = FigSignalErrorAt();
                                      goto LABEL_202;
                                    }
                                    CFAllocatorRef v65 = (void *)v64;
                                    uint64_t v8 = FigAtomWriterAppendData();
                                    CFAllocatorDeallocate(v104, v65);
                                    if (!v8) {
                                      goto LABEL_169;
                                    }
                                    goto LABEL_113;
                                }
                                break;
                            }
                            do
                            {
                              CFNumberRef v85 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v45, *(const void **)((char *)&point[0].origin.x + v83));
                              if (!v85 || (CFNumberRef v86 = v85, v87 = CFGetTypeID(v85), v87 != CFNumberGetTypeID()))
                              {
                                a2 = v106;
                                goto LABEL_169;
                              }
                              CFNumberGetValue(v86, kCFNumberSInt32Type, v84);
                              v84->i32[0] = bswap32(v84->i32[0]);
                              CMTimeRange v84 = (int8x16_t *)((char *)v84 + 4);
                              v83 += 8;
                            }
                            while (v83 != 32);
                            uint64_t v47 = FigAtomWriterAppendData();
                            a2 = v106;
                            if (v47) {
                              goto LABEL_202;
                            }
LABEL_169:
                            uint64_t v59 = 0;
LABEL_170:
                            uint64_t v76 = FigAtomWriterEndAtom();
LABEL_171:
                            uint64_t v8 = v76;
LABEL_172:
                            if (v124) {
                              CFRelease(v124);
                            }
                            free(v59);
                            if (v45) {
                              CFRelease(v45);
                            }
                            if (v8) {
                              break;
                            }
                            goto LABEL_177;
                          }
LABEL_202:
                          uint64_t v8 = v47;
LABEL_113:
                          uint64_t v59 = 0;
                          goto LABEL_172;
                        }
                      }
                      else
                      {
                        unsigned int PackedISO639_2TFromLocale = 0;
                      }
                      unsigned int v53 = 0;
                      goto LABEL_88;
                    }
                  }
LABEL_206:
                  uint64_t v12 = FigAtomWriterEndAtom();
                  if (!v12)
                  {
                    uint64_t v12 = FigMetadataWriteFreeAtom((uint64_t)v110, (uint64_t)v113, *(unsigned int *)(v107 + 32), *(unsigned int *)(v107 + 36));
                    if (!v12) {
                      uint64_t v12 = FigAtomWriterEndAtom();
                    }
                  }
                }
              }
LABEL_209:
              uint64_t v8 = v12;
              break;
            }
          }
          else
          {
            *(void *)&point[0].origin.x = CFDataGetLength((CFDataRef)Value);
            BytePtr = (void *)CFDataGetBytePtr((CFDataRef)Value);
          }
          v129.i32[0] = bswap32(LODWORD(point[0].origin.x) + 8);
          uint64_t v29 = FigAtomWriterAppendData();
          if (v29) {
            goto LABEL_215;
          }
          *(_DWORD *)buffer = 0;
          CFIndex v30 = CFStringGetLength(v25);
          v132.location = 0;
          v132.CFIndex length = v30;
          CFIndex Bytes = CFStringGetBytes(v25, v132, 0, 0, 0, buffer, 4, 0);
          unsigned int v32 = *(_DWORD *)buffer;
          unsigned int v33 = bswap32(*(unsigned int *)buffer);
          if (v30 == Bytes) {
            unsigned int v32 = v33;
          }
          LODWORD(v125) = bswap32(v32);
          uint64_t v29 = FigAtomWriterAppendData();
          if (v29 || (uint64_t v29 = FigAtomWriterAppendData(), v29))
          {
LABEL_215:
            uint64_t v8 = v29;
            if (v26 == TypeID && BytePtr != 0) {
              CFAllocatorDeallocate(v22, BytePtr);
            }
            break;
          }
          if (v26 == TypeID) {
            CFAllocatorDeallocate(v22, BytePtr);
          }
          if (v20 == ++v21)
          {
            uint64_t v101 = FigAtomWriterEndAtom();
            goto LABEL_44;
          }
        }
      }
LABEL_210:
      CMBlockBufferRef v9 = blockBufferOut;
    }
    else
    {
      CMBlockBufferRef v9 = 0;
      uint64_t v8 = 0;
    }
LABEL_211:
    if (a2 && !v8)
    {
      *a2 = v9;
      return v8;
    }
LABEL_225:
    if (v9) {
      CFRelease(v9);
    }
    return v8;
  }

  return FigSignalErrorAt();
}

uint64_t FigQuickTimeMetadataSerializerCreateCopy(const __CFAllocator *a1, uint64_t a2, void *a3)
{
  CFTypeID v17 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
  {
    uint64_t v7 = FigSignalErrorAt();
    uint64_t v8 = 0;
    if (!a3) {
      goto LABEL_19;
    }
    goto LABEL_16;
  }
  if (a3)
  {
    uint64_t v6 = DerivedStorage;
    uint64_t v7 = FigMetadataSerializerCreateForQuickTimeMetadata((uint64_t)a1, &v17);
    uint64_t v8 = v17;
    if (v7) {
      goto LABEL_19;
    }
    CMBlockBufferRef v9 = (void *)CMBaseObjectGetDerivedStorage();
    if (*(void *)v6) {
      CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(a1, 0, *(CFDictionaryRef *)v6);
    }
    else {
      CFMutableDictionaryRef MutableCopy = 0;
    }
    *CMBlockBufferRef v9 = MutableCopy;
    CFArrayRef v11 = *(const __CFArray **)(v6 + 8);
    if (v11) {
      CFMutableArrayRef v12 = CFArrayCreateMutableCopy(a1, 0, v11);
    }
    else {
      CFMutableArrayRef v12 = 0;
    }
    v9[1] = v12;
    CFArrayRef v13 = *(const __CFArray **)(v6 + 16);
    if (v13) {
      CFMutableArrayRef v14 = CFArrayCreateMutableCopy(a1, 0, v13);
    }
    else {
      CFMutableArrayRef v14 = 0;
    }
    v9[2] = v14;
    CFTypeRef v15 = *(CFTypeRef *)(v6 + 24);
    if (v15) {
      CFTypeRef v15 = CFRetain(v15);
    }
    uint64_t v7 = 0;
    void v9[3] = v15;
    v9[4] = *(void *)(v6 + 32);
    uint64_t v8 = v17;
LABEL_16:
    if (!v7)
    {
      *a3 = v8;
      return v7;
    }
LABEL_19:
    if (v8) {
      CFRelease(v8);
    }
    return v7;
  }

  return FigSignalErrorAt();
}

uint64_t piqca_createRegistrationDictionaryMutex()
{
  uint64_t result = FigSimpleMutexCreate();
  sPIQCARegistrationDictionaryMutex = result;
  return result;
}

void *piqca_loadCAImageQueueSetEDRDeadline()
{
  uint64_t result = dlopen("/System/Library/Frameworks/QuartzCore.framework/QuartzCore", 1);
  if (result)
  {
    uint64_t result = dlsym(result, "CAImageQueueSetEDRDeadline");
    sCAImageQueueSetEDRDeadline = result;
    if (!result)
    {
      return (void *)FigSignalErrorAt();
    }
  }
  return result;
}

uint64_t piqca_WakeupSharedPollingThread()
{
  if (piqca_getSharedPollingThreadContext_initSharedPollingThreadOnce != -1) {
    dispatch_once_f(&piqca_getSharedPollingThreadContext_initSharedPollingThreadOnce, &piqca_getSharedPollingThreadContext_sharedPollingContext, (dispatch_function_t)piqca_initSharedPollingThread);
  }
  uint64_t result = qword_1E934E208;
  if (qword_1E934E208)
  {
    return FigSemaphoreSignal();
  }
  return result;
}

uint64_t piqca_copyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, CFMutableDictionaryRef *a4)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(@"CAImageQueue", a2))
  {
    CMBlockBufferRef v9 = *(const void **)DerivedStorage;
LABEL_3:
    DictionaryRepresentation = (void *)CFRetain(v9);
LABEL_6:
    uint64_t v11 = 0;
    goto LABEL_7;
  }
  if (CFEqual(@"FigImageQueueProperty_CurrentFrameRate", a2))
  {
    LODWORD(valuePtr.CFDictionarySetValue(theDict, key, value) = FigImageQueueFrameRateGetCurrent((void *)(DerivedStorage + 2776));
    DictionaryRepresentation = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberFloat32Type, &valuePtr);
    goto LABEL_6;
  }
  if (CFEqual(@"FigImageQueueProperty_EnqueueResetsSystemSleepTimer", a2))
  {
    CFArrayRef v13 = (const void **)MEMORY[0x1E4F1CFD0];
    int v14 = *(unsigned __int8 *)(DerivedStorage + 134);
    goto LABEL_11;
  }
  if (CFEqual(@"FigImageQueueProperty_NextNonJerkyStopTime", a2))
  {
    if (!*(void *)DerivedStorage || (unint64_t)CAImageQueueGetTimes() < 2) {
      return 4294954513;
    }
    double v15 = v32;
    memset(&valuePtr, 0, sizeof(valuePtr));
    CMTimebaseGetTime(&time, *(CMTimebaseRef *)(DerivedStorage + 144));
    double Seconds = CMTimeGetSeconds(&time);
    float Rate = CMTimebaseGetRate(*(CMTimebaseRef *)(DerivedStorage + 144));
    double v18 = Rate;
    if (Rate >= 0.0)
    {
      if (v15 < Seconds || v15 - Seconds >= v18 * 0.1) {
        return 4294954513;
      }
    }
    else if (v15 > Seconds || v15 - Seconds <= v18 * 0.1)
    {
      return 4294954513;
    }
    CMTimeMakeWithSeconds(&valuePtr, v15, 90000);
    CMTime v29 = valuePtr;
    p_CMTime valuePtr = &v29;
    CFAllocatorRef v20 = a3;
LABEL_28:
    DictionaryRepresentation = CMTimeCopyAsDictionary(p_valuePtr, v20);
    goto LABEL_6;
  }
  if (CFEqual(@"FigImageQueueProperty_FirstImageEnqueued", a2))
  {
    CFArrayRef v13 = (const void **)MEMORY[0x1E4F1CFD0];
    int v14 = *(unsigned __int8 *)(DerivedStorage + 135);
    goto LABEL_11;
  }
  if (CFEqual(@"FigImageQueueProperty_DisplaySize", a2))
  {
    DictionaryRepresentation = CGSizeCreateDictionaryRepresentation(*(CGSize *)(DerivedStorage + 1528));
    goto LABEL_6;
  }
  if (CFEqual(@"CAImageQueueAlwaysSync", a2))
  {
    CFArrayRef v13 = (const void **)MEMORY[0x1E4F1CFD0];
    int v14 = *(unsigned __int8 *)(DerivedStorage + 137);
    goto LABEL_11;
  }
  if (CFEqual(@"UseLowLatencyModeForImmediateFrames", a2))
  {
    CFArrayRef v13 = (const void **)MEMORY[0x1E4F1CFD0];
    int v14 = *(unsigned __int8 *)(DerivedStorage + 138);
    goto LABEL_11;
  }
  if (CFEqual(@"ForScrubbingOnly", a2))
  {
    CFArrayRef v13 = (const void **)MEMORY[0x1E4F1CFD0];
    int v14 = *(unsigned __int8 *)(DerivedStorage + 221);
LABEL_11:
    if (!v14) {
      CFArrayRef v13 = (const void **)MEMORY[0x1E4F1CFC8];
    }
    goto LABEL_13;
  }
  if (CFEqual(@"OriginToPresentationLatencyStatistics", a2))
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 4, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      CFMutableDictionaryRef v22 = Mutable;
      MEMORY[0x19970E910](*(void *)(*(void *)(DerivedStorage + 16) + 8));
      if (*(int *)(DerivedStorage + 2888) >= 1)
      {
        FigCFDictionarySetDouble();
        FigCFDictionarySetDouble();
        FigCFDictionarySetDouble();
      }
      FigCFDictionarySetInt32();
      *(void *)(DerivedStorage + 2896) = 0x41CDCD6500000000;
      *(_DWORD *)(DerivedStorage + 2888) = 0;
      *(void *)(DerivedStorage + 2912) = 0;
      *(void *)(DerivedStorage + 2904) = 0;
      uint64_t v23 = *(void *)(*(void *)(DerivedStorage + 16) + 8);
      goto LABEL_41;
    }
  }
  else
  {
    if (CFEqual(@"Duration", a2))
    {
      CFAllocatorRef v20 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CMTime valuePtr = *(CMTime *)(DerivedStorage + 2984);
      p_CMTime valuePtr = &valuePtr;
      goto LABEL_28;
    }
    if (CFEqual(@"CanSupportAV1FilmGrainDeferMode", a2))
    {
      CFArrayRef v13 = (const void **)MEMORY[0x1E4F1CFD0];
LABEL_13:
      CMBlockBufferRef v9 = *v13;
      goto LABEL_3;
    }
    if (!CFEqual(@"RendererPreparationInfo", a2))
    {
      if (!CFEqual(@"ImageQueueGauge", a2)) {
        return 4294954512;
      }
      DictionaryRepresentation = *(void **)(DerivedStorage + 3080);
      if (DictionaryRepresentation)
      {
        uint64_t v11 = 0;
      }
      else
      {
        CFStringRef v25 = (uint64_t *)(DerivedStorage + 3080);
        uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
        uint64_t v11 = FigImageQueueGaugeCreate(AllocatorForMedia, 0, (void *)(DerivedStorage + 3080));
        if (!v11)
        {
          uint64_t v27 = *v25;
          FigImageQueueGetSafeDisplayDuration(a1, (uint64_t)&v28);
          uint64_t v11 = FigImageQueueGaugeSetSafeDisplayDuration(v27, &v28);
        }
        DictionaryRepresentation = (void *)*v25;
        if (!*v25) {
          goto LABEL_7;
        }
      }
      DictionaryRepresentation = (void *)CFRetain(DictionaryRepresentation);
LABEL_7:
      *a4 = (CFMutableDictionaryRef)DictionaryRepresentation;
      return v11;
    }
    CFMutableDictionaryRef v24 = CFDictionaryCreateMutable(a3, 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (v24)
    {
      CFMutableDictionaryRef v22 = v24;
      MEMORY[0x19970E910](*(void *)(DerivedStorage + 3048));
      FigCFDictionarySetBoolean();
      FigCFDictionarySetValue();
      uint64_t v23 = *(void *)(DerivedStorage + 3048);
LABEL_41:
      MEMORY[0x19970E930](v23);
      uint64_t v11 = 0;
      *a4 = v22;
      return v11;
    }
  }

  return FigSignalErrorAt();
}

void piqca_gmstats_dump()
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFArrayRef v1 = *(OpaqueCMTimebase **)(DerivedStorage + 144);
  if (v1)
  {
    CMTimebaseGetRate(v1);
    CMTimebaseGetTime(&time, *(CMTimebaseRef *)(DerivedStorage + 144));
    CMTimeGetSeconds(&time);
    CACurrentMediaTime();
    CAImageQueueGetUnconsumedImageCount();
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 2464));
    int v2 = *(unsigned __int8 *)(DerivedStorage + 2500);
    uint64_t v3 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
    if (*(unsigned char *)(DerivedStorage + 2500))
    {
      *(_DWORD *)(DerivedStorage + 2752) = 0;
      CFMutableDictionaryRef Mutable = CFStringCreateMutable(*v3, 0);
      CMTimeFlags v5 = Mutable;
      int v6 = *(_DWORD *)(DerivedStorage + 2508);
      int v7 = *(_DWORD *)(DerivedStorage + 2504);
      if (*(_DWORD *)(DerivedStorage + 2496)) {
        CFStringAppendFormat(Mutable, 0, @"Enqueued Pixel Buffer:%c%c%c%c, %u x %u ", HIBYTE(*(_DWORD *)(DerivedStorage + 2496)), BYTE2(*(_DWORD *)(DerivedStorage + 2496)), BYTE1(*(_DWORD *)(DerivedStorage + 2496)), *(_DWORD *)(DerivedStorage + 2496), *(void *)(DerivedStorage + 1504), *(void *)(DerivedStorage + 1512));
      }
      CFStringAppendCString(v5, "[\n", 0x600u);
      if (v6 >= 1)
      {
        do
        {
          if (v7 <= 0) {
            int v8 = -(-v7 & 3);
          }
          else {
            int v8 = v7 & 3;
          }
          CFStringAppendFormat(v5, 0, @"{PTS: %.3f s, enqueued at: host %.3f s (media %.3f s)},\n", *(void *)(DerivedStorage + 24 * v8 + 2512), *(void *)(DerivedStorage + 24 * v8 + 2520), *(void *)(DerivedStorage + 24 * v8 + 2528));
          ++v7;
          --v6;
        }
        while (v6);
      }
      CFStringAppendCString(v5, "]\n", 0x600u);
      *(_OWORD *)(DerivedStorage + 2576) = 0u;
      *(_OWORD *)(DerivedStorage + 2592) = 0u;
      *(_OWORD *)(DerivedStorage + 2544) = 0u;
      *(_OWORD *)(DerivedStorage + 2560) = 0u;
      *(_OWORD *)(DerivedStorage + 2512) = 0u;
      *(_OWORD *)(DerivedStorage + 2528) = 0u;
      *(_OWORD *)(DerivedStorage + 2496) = 0u;
    }
    else
    {
      CMTimeFlags v5 = 0;
    }
    int v9 = *(unsigned __int8 *)(DerivedStorage + 2608);
    if (*(unsigned char *)(DerivedStorage + 2608))
    {
      *(_DWORD *)(DerivedStorage + 2772) = 0;
      *(void *)(DerivedStorage + 2756) = 0;
      *(void *)(DerivedStorage + 2764) = 0;
      uint64_t v10 = CFStringCreateMutable(*v3, 0);
      int v11 = *(_DWORD *)(DerivedStorage + 2616);
      int v12 = *(_DWORD *)(DerivedStorage + 2612);
      CFStringAppendFormat(v10, 0, @"DisplaySize: %f x %f ", *(void *)(DerivedStorage + 1528), *(void *)(DerivedStorage + 1536));
      CFStringAppendCString(v10, "[\n", 0x600u);
      if (v11 >= 1)
      {
        do
        {
          if (v12 <= 0) {
            int v13 = -(-v12 & 3);
          }
          else {
            int v13 = v12 & 3;
          }
          CFStringAppendFormat(v10, 0, @"{PTS: %.3f s, sampled at: %.3f s, displayed at: %.3f s, on glass for: %.3f ms},\n", *(void *)(DerivedStorage + 32 * v13 + 2624), *(void *)(DerivedStorage + 32 * v13 + 2632), *(void *)(DerivedStorage + 32 * v13 + 2640), *(double *)(DerivedStorage + 32 * v13 + 2648) * 1000.0);
          ++v12;
          --v11;
        }
        while (v11);
      }
      CFStringAppendCString(v10, "]\n", 0x600u);
      *(_OWORD *)(DerivedStorage + 2720) = 0u;
      *(_OWORD *)(DerivedStorage + 2736) = 0u;
      *(_OWORD *)(DerivedStorage + 2688) = 0u;
      *(_OWORD *)(DerivedStorage + 2704) = 0u;
      *(_OWORD *)(DerivedStorage + 2656) = 0u;
      *(_OWORD *)(DerivedStorage + 2672) = 0u;
      *(_OWORD *)(DerivedStorage + 2624) = 0u;
      *(_OWORD *)(DerivedStorage + 2640) = 0u;
      *(_OWORD *)(DerivedStorage + 2608) = 0u;
    }
    else
    {
      uint64_t v10 = 0;
    }
    MEMORY[0x19970E930](*(void *)(DerivedStorage + 2464));
    if (v9 | v2)
    {
      if (dword_1E934E1F0)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        if (dword_1E934E1F0)
        {
          double v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          if (dword_1E934E1F0)
          {
            uint64_t v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            if (dword_1E934E1F0)
            {
              CFTypeID v17 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
          }
        }
      }
    }
    if (v5) {
      CFRelease(v5);
    }
    if (v10) {
      CFRelease(v10);
    }
  }
}

void piqca_initSharedPollingThread(void *a1)
{
  a1[2] = FigSimpleMutexCreate();
  a1[1] = FigSemaphoreCreate();
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v3 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
  a1[3] = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, MEMORY[0x1E4F1D540]);
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v2, 2, MEMORY[0x1E4F1D530], v3);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F21EA8], @"com.apple.coremedia.imagequeue.coreanimation.common");
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F21EA0], (const void *)*MEMORY[0x1E4F1CFC8]);
  FigThreadCreate();
  if (Mutable)
  {
    CFRelease(Mutable);
  }
}

void piqca_SharedPollingThread(uint64_t a1)
{
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v3 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
  while (1)
  {
    *(unsigned char *)(a1 + 40) = 0;
    MEMORY[0x19970E910](*(void *)(a1 + 16));
    CFMutableArrayRef Mutable = CFArrayCreateMutable(v2, 0, v3);
    *(void *)(a1 + 32) = Mutable;
    if (Mutable)
    {
      CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 24), (CFDictionaryApplierFunction)piqca_RetainRegisteredImageQueuesStillAliveApplier, (void *)a1);
      MEMORY[0x19970E930](*(void *)(a1 + 16));
      CFArrayRef v5 = *(const __CFArray **)(a1 + 32);
      v7.CFIndex length = CFArrayGetCount(v5);
      v7.location = 0;
      CFArrayApplyFunction(v5, v7, (CFArrayApplierFunction)piqca_SharedDoMonitorImageQueueApplier, (void *)a1);
      int v6 = *(const void **)(a1 + 32);
      if (v6)
      {
        CFRelease(v6);
        *(void *)(a1 + 32) = 0;
      }
    }
    else
    {
      *(unsigned char *)(a1 + 40) = 1;
    }
    FigSemaphoreWaitRelative();
  }
}

void piqca_RetainRegisteredImageQueuesStillAliveApplier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFArrayRef v4 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (v4)
  {
    CFArrayRef v5 = v4;
    CFArrayAppendValue(*(CFMutableArrayRef *)(a3 + 32), v4);
    CFRelease(v5);
  }
}

uint64_t piqca_SharedDoMonitorImageQueueApplier(uint64_t a1, uint64_t a2)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)(result + 49)) {
    return result;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  BOOL v6 = piqca_evictExpiredFramesFromCAImageQueue() != 0;
  CAImageQueueGetUnconsumedImageCount();
  if (*(int *)(DerivedStorage + 216) < 1)
  {
    double v7 = -INFINITY;
    double v8 = *(double *)(DerivedStorage + 112);
  }
  else
  {
    double v7 = -1.0;
    double v8 = *(double *)(DerivedStorage + 104);
  }
  if (v7 != v8) {
    BOOL v6 = 1;
  }
  int v9 = FigAtomicBitAnd32Orig();
  if (*(int *)(DerivedStorage + 76) >= 1)
  {
    FigAtomicDecrement32();
LABEL_13:
    *(void *)(DerivedStorage + 104) = 0xBFF0000000000000;
    *(void *)(DerivedStorage + 112) = 0xFFF0000000000000;
    piqca_postOccupancyChanged(a1);
    goto LABEL_14;
  }
  if (v9) {
    int v10 = 1;
  }
  else {
    int v10 = v6;
  }
  if (v10 == 1) {
    goto LABEL_13;
  }
LABEL_14:
  uint64_t result = DerivedStorage + 72;
  if (*(int *)(DerivedStorage + 72) >= 1)
  {
    uint64_t result = FigAtomicDecrement32();
    if (!result)
    {
      *(unsigned char *)(DerivedStorage + 49) = 0;
      uint64_t result = CAImageQueueSetFlags();
    }
  }
  if (*(unsigned char *)(DerivedStorage + 49)) {
    *(unsigned char *)(a2 + 40) = 1;
  }
  return result;
}

uint64_t piqca_evictExpiredFramesFromCAImageQueue()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  CMTime v10 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA10];
  if (!*DerivedStorage) {
    return 0;
  }
  CFArrayRef v1 = DerivedStorage;
  CFAllocatorRef v2 = (OpaqueCMTimebase *)DerivedStorage[18];
  if (v2
    && (CMTimebaseGetTime(&v10, v2), CMTime v9 = v10, CMTimeGetSeconds(&v9), (v3 = (OpaqueCMTimebase *)v1[18]) != 0)
    && (CMTimebaseGetRate(v3) == 0.0 || (int v4 = *((_DWORD *)v1 + 54), v4 >= 1) || v4 < 0))
  {
    uint64_t v6 = CAImageQueueConsumeUnconsumedInRange();
    uint64_t v5 = v6;
    if (v6)
    {
      *((_DWORD *)v1 + 392) += v6;
      MEMORY[0x19970E910](v1[308]);
      *((_DWORD *)v1 + 693) += v5;
      *((unsigned char *)v1 + 2608) = 1;
      MEMORY[0x19970E930](v1[308]);
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  uint64_t v7 = mach_absolute_time();
  if ((unint64_t)FigHostTimeToNanoseconds() >= 0x165A0BC00)
  {
    v1[309] = v7;
    piqca_gmstats_dump();
  }
  v1[8] = CAImageQueueCollect();
  v1[10] = mach_absolute_time();
  CACurrentMediaTime();
  return v5;
}

uint64_t FigImageQueueGaugeSetSafeDisplayDuration(uint64_t a1, long long *a2)
{
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, long long *))(v5 + 8);
  if (!v6) {
    return 4294954514;
  }
  long long v8 = *a2;
  uint64_t v9 = *((void *)a2 + 2);
  return v6(a1, &v8);
}

__n128 FigImageQueueGetSafeDisplayDuration@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(void (**)(uint64_t))(v5 + 80);
  if (v6)
  {
    v6(a1);
  }
  else
  {
    uint64_t v8 = MEMORY[0x1E4F1F9F8];
    __n128 result = *(__n128 *)MEMORY[0x1E4F1F9F8];
    *(_OWORD *)a2 = *MEMORY[0x1E4F1F9F8];
    *(void *)(a2 + 16) = *(void *)(v8 + 16);
  }
  return result;
}

void __piqca_setProperty_block_invoke()
{
}

void piqca_updateImageQueueTimingFields()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFArrayRef v1 = (uint64_t *)(DerivedStorage + 2936);
  CFAllocatorRef v2 = *(const void **)(DerivedStorage + 2936);
  if (v2)
  {
    FigSyncMomentSourceDestroy(v2);
    uint64_t *v1 = 0;
  }
  *(void *)(DerivedStorage + 2952) = 0;
  *(void *)(DerivedStorage + 2944) = 0;
  *(unsigned char *)(DerivedStorage + 2968) = 0;
  *(void *)(DerivedStorage + 2960) = 0;
  if (*(unsigned char *)(DerivedStorage + 2920))
  {
    if (*(void *)(DerivedStorage + 144))
    {
      uint64_t v3 = FigCFWeakReferenceHolderCreateWithReferencedObject();
      if (v3)
      {
        uint64_t v4 = (const void *)v3;
        if (FigSyncMomentSourceCreateWithDispatchQueueAndDestructor2((uint64_t)piqca_syncMomentSourceCallback, v3, (void (*)(uint64_t))piqca_ReleaseFIQWeakReference, *(const void **)(DerivedStorage + 144), *(NSObject **)(DerivedStorage + 2928), v1))
        {
          CFRelease(v4);
        }
        else
        {
          outRelativefloat Rate = 0.0;
          memset(&outOfClockOrTimebaseAnchorTime, 0, sizeof(outOfClockOrTimebaseAnchorTime));
          memset(&outRelativeToClockOrTimebaseAnchorTime, 0, sizeof(outRelativeToClockOrTimebaseAnchorTime));
          CMClockGetHostTimeClock();
          uint64_t v5 = *(const void **)(DerivedStorage + 144);
          CMClockRef HostTimeClock = CMClockGetHostTimeClock();
          if (!CMSyncGetRelativeRateAndAnchorTime(v5, HostTimeClock, &outRelativeRate, &outOfClockOrTimebaseAnchorTime, &outRelativeToClockOrTimebaseAnchorTime))
          {
            CMTime v9 = outRelativeToClockOrTimebaseAnchorTime;
            double Seconds = CMTimeGetSeconds(&v9);
            CMTime v9 = outOfClockOrTimebaseAnchorTime;
            double v8 = CMTimeGetSeconds(&v9);
            piqca_setImageQueueTiming(Seconds, v8, outRelativeRate);
          }
        }
      }
      else
      {
        FigSignalErrorAt();
      }
    }
  }
  else
  {
    piqca_setImageQueueTiming(0.0, 0.0, 1.0);
  }
}

void piqca_setTimebase(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)(DerivedStorage + 144) != a2)
  {
    uint64_t v5 = *(NSObject **)(DerivedStorage + 2928);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __piqca_setTimebase_block_invoke;
    block[3] = &__block_descriptor_tmp_44_1;
    block[4] = DerivedStorage;
    void block[5] = a2;
    void block[6] = a1;
    dispatch_sync(v5, block);
  }
}

uint64_t piqca_setEnhancementMode(uint64_t result, const __CFString *cf)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(result + 2884))
  {
    if (cf)
    {
      uint64_t v3 = result;
      CFTypeID v4 = CFGetTypeID(cf);
      __n128 result = CFStringGetTypeID();
      if (v4 == result)
      {
        __n128 result = CFStringGetCString(cf, buffer, 100, 0x600u);
        if (result)
        {
          uint64_t v5 = 0;
          for (CFIndex i = (const char **)&off_1E57984E0; ; i += 2)
          {
            __n128 result = strcmp(*i, buffer);
            if (!result) {
              break;
            }
            if (++v5 == 5) {
              return result;
            }
          }
          *(_DWORD *)(v3 + 2880) = v5;
          return CAImageQueueSetEnhancementMode();
        }
      }
    }
  }
  return result;
}

void piqca_postRendererPreparationCompletedIfPreviouslyRequestedAndRecordNewRequest(uint64_t a1, char a2, const void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 3024));
  int v6 = *(unsigned __int8 *)(DerivedStorage + 3032);
  uint64_t v7 = *(const void **)(DerivedStorage + 3040);
  *(unsigned char *)(DerivedStorage + 3032) = a2;
  if (a3) {
    CFTypeRef v8 = CFRetain(a3);
  }
  else {
    CFTypeRef v8 = 0;
  }
  *(void *)(DerivedStorage + 3040) = v8;
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 3024));
  if (v6)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    FigCFDictionarySetValue();
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    if (Mutable) {
      CFRelease(Mutable);
    }
  }
  if (v7)
  {
    CFRelease(v7);
  }
}

void piqca_syncMomentSourceCallback(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v3)
  {
    CFTypeID v4 = (const void *)v3;
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    double v6 = CACurrentMediaTime();
    double v7 = *(double *)(DerivedStorage + 2944);
    double v8 = *(double *)(DerivedStorage + 2952);
    double v9 = *(double *)(DerivedStorage + 2960);
    int v10 = *(_DWORD *)(a2 + 4);
    if (v10)
    {
      *(void *)(DerivedStorage + 2472) = mach_absolute_time();
      piqca_gmstats_dump();
      int v10 = *(_DWORD *)(a2 + 4);
    }
    if ((v10 & 3) != 0 || (CMTime v13 = *(CMTime *)(a2 + 16), vabdd_f64(CMTimeGetSeconds(&v13), v9 + (v6 - v7) * v8) >= 0.005))
    {
      CMTime v13 = *(CMTime *)(a2 + 40);
      double Seconds = CMTimeGetSeconds(&v13);
      CMTime v13 = *(CMTime *)(a2 + 16);
      double v12 = CMTimeGetSeconds(&v13);
      piqca_setImageQueueTiming(Seconds, v12, *(double *)(a2 + 8));
    }
    CFRelease(v4);
  }
}

void piqca_ReleaseFIQWeakReference(CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t piqca_setImageQueueTiming(double a1, double a2, double a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v7 = DerivedStorage;
  if (a3 >= 0.0)
  {
    if (!*(unsigned char *)(DerivedStorage + 2968)) {
      goto LABEL_9;
    }
    char v9 = 0;
    double Seconds = INFINITY;
  }
  else
  {
    if (*(unsigned char *)(DerivedStorage + 2968)) {
      goto LABEL_9;
    }
    CMTime time = *(CMTime *)(DerivedStorage + 2984);
    double Seconds = CMTimeGetSeconds(&time);
    if (fabs(Seconds) == INFINITY) {
      double Seconds = a2 + 0.1;
    }
    char v9 = 1;
  }
  *(double *)(v7 + 2976) = Seconds;
  *(unsigned char *)(v7 + 2968) = v9;
LABEL_9:
  if (a3 == 0.0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    double v12 = 0.0;
  }
  else if (a3 <= 0.0)
  {
    double v13 = *(double *)(v7 + 2976);
    double v12 = a1 + (a2 - v13) * (-1.0 / a3);
    int v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    a2 = v13;
  }
  else
  {
    double v12 = a1 + a2 * (-1.0 / a3);
    int v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    a2 = 0.0;
  }
  *(double *)(v7 + 2944) = v12;
  *(double *)(v7 + 2952) = a3;
  *(double *)(v7 + 2960) = a2;
  return CAImageQueueSetMediaTimingClamped();
}

void __piqca_setTimebase_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  CFArrayRef v1 = *(const void **)(a1 + 40);
  uint64_t v3 = *(const void **)(v2 + 144);
  *(void *)(v2 + 144) = v1;
  if (v1) {
    CFRetain(v1);
  }
  if (v3) {
    CFRelease(v3);
  }

  piqca_updateImageQueueTimingFields();
}

uint64_t piqca_copyPerformanceDictionary(uint64_t a1, __CFDictionary **a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_DWORD *)(DerivedStorage + 2392) = 0;
  if (*(void *)DerivedStorage) {
    *(_DWORD *)(DerivedStorage + 2392) = CAImageQueueGetUnconsumedImageCount() + 1;
  }
  return PIQCopyPerformanceDictionaryForInstanceStatistics((const __CFAllocator *)*MEMORY[0x1E4F1CF80], (int *)(DerivedStorage + 1556), a2);
}

uint64_t piqca_enqueueImageWithRotation(uint64_t a1, __CVBuffer *a2, const void *a3, uint64_t *a4, uint64_t a5, char a6)
{
  uint64_t v97 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 8));
  uint64_t v95 = *a4;
  unsigned int v11 = *((_DWORD *)a4 + 3);
  unsigned int v96 = *((_DWORD *)a4 + 2);
  uint64_t v12 = a4[2];
  uint64_t v13 = CMBaseObjectGetDerivedStorage();
  IsNulluint64_t PixelBuffer = FigIsNullPixelBuffer(a2);
  if (!a2) {
    goto LABEL_5;
  }
  BOOL v15 = IsNullPixelBuffer;
  uint64_t v16 = *(void *)(v13 + 3080);
  if (v16)
  {
    uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v18 = v17 ? v17 : 0;
    CFAllocatorRef v20 = *(void (**)(uint64_t, void))(v18 + 24);
    if (v20) {
      v20(v16, 0);
    }
  }
  CFTypeID v21 = CFGetTypeID(a2);
  if (CVPixelBufferGetTypeID() == v21) {
    OSType PixelFormatType = CVPixelBufferGetPixelFormatType(a2);
  }
  else {
    OSType PixelFormatType = 1061109567;
  }
  piqca_evictExpiredFramesFromCAImageQueueIfEvictionNotDoneRecently();
  if (a6 & 2) == 0 || (v11)
  {
    *(void *)CMTime time = v95;
    *(void *)&time[8] = __PAIR64__(v11, v96);
    *(void *)&time[16] = v12;
    CMTimeGetSeconds((CMTime *)time);
  }
  if (CVPixelBufferGetTypeID() != v21)
  {
    uint64_t v19 = 4294948064;
    goto LABEL_106;
  }
  uint64_t v81 = v12;
  unsigned int v80 = v11;
  if (v15)
  {
LABEL_71:
    if ((a6 & 4) == 0 && ((a6 & 1) != 0 || *(unsigned char *)(v13 + 50)))
    {
      *(unsigned char *)(v13 + 50) = 0;
      *(unsigned char *)(v13 + 52) = 0;
      FigImageQueueDisplayCountHistory_TraceFlush(*(void *)(v13 + 2848));
      bzero((void *)(v13 + 296), 0x4B0uLL);
    }
    CVBufferRetain(a2);
    int v42 = malloc_type_calloc(0x48uLL, 1uLL, 0x9A869346uLL);
    *(void *)int v42 = a2;
    *((void *)v42 + 1) = v95;
    *((_DWORD *)v42 + 4) = v96;
    *((_DWORD *)v42 + 5) = v11;
    *((void *)v42 + 3) = v81;
    *((_DWORD *)v42 + 10) = *(_DWORD *)(v13 + 24);
    CFTypeRef v43 = CMGetAttachment(a2, @"FigImageBufferOriginHostTime", 0);
    CFDictionaryRef v44 = v43;
    if (a3 && !v43)
    {
      CFTypeID v45 = CFGetTypeID(a3);
      if (v45 != CFDictionaryGetTypeID())
      {
LABEL_82:
        *((void *)v42 + 4) = *(void *)(v13 + 16);
        FigAtomicIncrement32();
        uint64_t v47 = v13 + 24 * *(void *)(v13 + 1496);
        long long v48 = *(_OWORD *)(v42 + 8);
        *(void *)(v47 + 312) = *((void *)v42 + 3);
        *(_OWORD *)(v47 + 296) = v48;
        uint64_t v49 = *(void *)(v13 + 1496);
        if (v49 == 49) {
          uint64_t v50 = 0;
        }
        else {
          uint64_t v50 = v49 + 1;
        }
        *(void *)(v13 + 1496) = v50;
        CFStringRef v51 = (_DWORD *)MEMORY[0x1E4F1EBA8];
        if (!v15)
        {
          size_t Width = CVPixelBufferGetWidth(a2);
          size_t Height = CVPixelBufferGetHeight(a2);
          size_t v54 = Height;
          if (*(void *)(v13 + 1504) != Width || *(void *)(v13 + 1512) != Height)
          {
            if (*v51 == 1) {
              kdebug_trace();
            }
            CAImageQueueSetSize();
            *(void *)(v13 + 1504) = Width;
            *(void *)(v13 + 1512) = v54;
          }
        }
        uint64_t v55 = CMBaseObjectGetDerivedStorage();
        if (*(void *)(v55 + 1504))
        {
          uint64_t v56 = v55;
          if (*(void *)(v55 + 1512))
          {
            DisplayedPixelunint64_t Count = CAImageQueueGetDisplayedPixelCount();
            if (DisplayedPixelCount)
            {
              if (*(_DWORD *)(v56 + 1520) != DisplayedPixelCount)
              {
                float v58 = sqrtf((float)((float)DisplayedPixelCount * (float)*(unint64_t *)(v56 + 1512))/ (float)*(unint64_t *)(v56 + 1504));
                *(_DWORD *)(v56 + 1520) = DisplayedPixelCount;
                *(double *)(v56 + 1528) = (float)((float)DisplayedPixelCount / v58);
                *(double *)(v56 + 1536) = v58;
                *(unsigned char *)(v56 + 1544) = 1;
              }
            }
          }
        }
        uint64_t v84 = 0;
        uint64_t v85 = 0;
        UnconsumedImageunint64_t Count = CAImageQueueGetUnconsumedImageCount();
        int v60 = *(_DWORD *)(v13 + 252);
        *(_DWORD *)(v13 + 252) = v60 + 1;
        *((_DWORD *)v42 + 11) = v60;
        *((_DWORD *)v42 + 12) = UnconsumedImageCount;
        if (*v51 == 1)
        {
          *(void *)CMTime time = v95;
          *(void *)&time[8] = __PAIR64__(v80, v96);
          *(void *)&time[16] = v81;
          CMTimeGetSeconds((CMTime *)time);
          kdebug_trace();
        }
        if (CAImageQueueInsertImageWithRotation())
        {
          --*(void *)(v13 + 64);
          MEMORY[0x19970E910](*(void *)(v13 + 2464));
          *(_DWORD *)(v13 + 2496) = PixelFormatType;
          if (*(void *)(v13 + 144))
          {
            *(void *)CMTime time = v95;
            *(void *)&time[8] = __PAIR64__(v80, v96);
            *(void *)&time[16] = v81;
            Float64 Seconds = CMTimeGetSeconds((CMTime *)time);
            CMTimebaseGetTime(&v83, *(CMTimebaseRef *)(v13 + 144));
            Float64 v62 = CMTimeGetSeconds(&v83);
            CFTimeInterval v63 = CACurrentMediaTime();
            uint64_t v64 = CMBaseObjectGetDerivedStorage();
            int v65 = *(_DWORD *)(v64 + 2504);
            int v66 = *(_DWORD *)(v64 + 2508);
            if (v66 + v65 <= 0) {
              unsigned int v67 = -(-(v66 + v65) & 3);
            }
            else {
              unsigned int v67 = (v66 + v65) & 3;
            }
            CFNumberRef v68 = (Float64 *)(v64 + 24 * v67);
            v68[314] = Seconds;
            v68[316] = v62;
            v68[315] = v63;
            if ((v66 + 1) > 4)
            {
              int v69 = v65 + 1;
              BOOL v70 = -v69 < 0;
              int v71 = -v69 & 3;
              int v72 = v69 & 3;
              if (!v70) {
                int v72 = -v71;
              }
              *(_DWORD *)(v64 + 2504) = v72;
            }
            else
            {
              *(_DWORD *)(v64 + 2508) = v66 + 1;
            }
          }
          ++*(_DWORD *)(v13 + 2752);
          *(unsigned char *)(v13 + 2500) = 1;
          MEMORY[0x19970E930](*(void *)(v13 + 2464));
          FPSupport_IsDisplayModeSwitchInProgress();
          if (*(unsigned char *)(v13 + 132) && *(unsigned char *)(v13 + 134)) {
            FigResetDisplaySleepTimer(*(__CFString **)(v13 + 3008));
          }
          if (*v51 == 1) {
            kdebug_trace();
          }
          *(unsigned char *)(v13 + 51) = 1;
          if ((a6 & 4) != 0) {
            *(unsigned char *)(v13 + 52) = 1;
          }
          *(_DWORD *)(v13 + 56) = 1;
          goto LABEL_118;
        }
        ++*(_DWORD *)(v13 + 2396);
        CVBufferRelease(a2);
        piqca_decrementSnapLatchCount((void **)v42 + 4);
        free(v42);
        uint64_t v19 = 4294954482;
LABEL_106:
        MEMORY[0x19970E930](*(void *)(DerivedStorage + 8));
        return v19;
      }
      CFDictionaryRef v44 = CFDictionaryGetValue((CFDictionaryRef)a3, @"FigImageBufferOriginHostTime");
    }
    if (v44)
    {
      CFTypeID v46 = CFGetTypeID(v44);
      if (v46 == CFNumberGetTypeID())
      {
        CFNumberGetValue((CFNumberRef)v44, kCFNumberDoubleType, v42 + 56);
        v42[64] = 1;
      }
    }
    goto LABEL_82;
  }
  CFTypeRef v22 = CVBufferCopyAttachment(a2, (CFStringRef)*MEMORY[0x1E4F249D0], 0);
  OSType v23 = CVPixelBufferGetPixelFormatType(a2);
  *(void *)CMTime time = 0;
  if (containsAlpha_sDidCheck == 1)
  {
    AppBooleanCFArrayRef Value = containsAlpha_sForceOptimization;
  }
  else
  {
    AppBooleanCFArrayRef Value = CFPreferencesGetAppBooleanValue(@"force_opaque_caiq_optimization", @"com.apple.coremedia", 0);
    containsAlpha_sForceOptimization = AppBooleanValue;
    containsAlpha_sDidCheck = 1;
  }
  if (*(_DWORD *)(v13 + 1548) != v23 && !AppBooleanValue)
  {
    CFDictionaryRef v25 = CVPixelFormatDescriptionCreateWithPixelFormatType((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v23);
    if (v25)
    {
      CFDictionaryRef v26 = v25;
      if (CFDictionaryGetValueIfPresent(v25, (const void *)*MEMORY[0x1E4F24E98], (const void **)time)
        && *(void *)time == *MEMORY[0x1E4F1CFD0])
      {
        *(unsigned char *)(v13 + 1552) = 1;
      }
      *(_DWORD *)(v13 + 1548) = v23;
      CFRelease(v26);
    }
    else
    {
      *(_DWORD *)(v13 + 1548) = v23;
    }
  }
  unsigned int v11 = v80;
  if (*(unsigned char *)(v13 + 1552)) {
    FigCFEqual();
  }
  if (v22) {
    CFRelease(v22);
  }
  uint64_t valuePtr = 0;
  BufferBacking = (void *)CVPixelBufferGetBufferBacking();
  IOSurfaceRef IOSurface = CVPixelBufferGetIOSurface(a2);
  int v93 = 0;
  long long v91 = 0u;
  long long v92 = 0u;
  long long v89 = 0u;
  long long v90 = 0u;
  long long v88 = 0u;
  memset(time, 0, sizeof(time));
  uint64_t v86 = 116;
  IOSurfaceRef v76 = IOSurface;
  if (IOSurface && !IOSurfaceGetBulkAttachments()) {
    CFDataRef value = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], time, 116);
  }
  else {
    CFDataRef value = 0;
  }
  MEMORY[0x19970E910](sPIQCARegistrationDictionaryMutex);
  key = BufferBacking;
  if (!BufferBacking)
  {
    MEMORY[0x19970E930](sPIQCARegistrationDictionaryMutex);
    goto LABEL_45;
  }
  CFDictionaryRef v29 = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(v13 + 120), BufferBacking);
  MEMORY[0x19970E930](sPIQCARegistrationDictionaryMutex);
  if (!v29)
  {
LABEL_45:
    char v31 = 0;
    goto LABEL_46;
  }
  CFNumberRef v30 = (const __CFNumber *)CFDictionaryGetValue(v29, @"PixelBufferId");
  CFDictionaryGetValue(v29, @"IOSurfaceBulkAttachments");
  if (v30)
  {
    CFNumberGetValue(v30, kCFNumberSInt64Type, &valuePtr);
    unsigned int v11 = v80;
    if (FigCFEqual()) {
      goto LABEL_68;
    }
    MEMORY[0x199707240](*(void *)v13, valuePtr);
    char v31 = 1;
  }
  else
  {
    char v31 = 0;
    unsigned int v11 = v80;
  }
LABEL_46:
  char v75 = v31;
  if (v76)
  {
    CFTypeRef v32 = CVBufferCopyAttachment(a2, @"SceneReferredExtendedLinear", 0);
    FigCFEqual();
    if (v32) {
      CFRelease(v32);
    }
    uint64_t v33 = CAImageQueueRegisterIOSurfaceBuffer();
    uint64_t valuePtr = v33;
  }
  else
  {
    OSType v34 = CVPixelBufferGetPixelFormatType(a2);
    if (v34 != 32 && v34 != 846624121 && v34 != 1111970369 && FigSignalErrorAt())
    {
      uint64_t valuePtr = 0;
      goto LABEL_68;
    }
    CVPixelBufferLockBaseAddress(a2, 0);
    CVPixelBufferGetBaseAddress(a2);
    CVPixelBufferGetBytesPerRow(a2);
    CVPixelBufferGetWidth(a2);
    CVPixelBufferGetHeight(a2);
    uint64_t v33 = CAImageQueueRegisterBuffer();
    uint64_t valuePtr = v33;
    unsigned int v11 = v80;
  }
  CFArrayRef v35 = key;
  if (v33)
  {
    MEMORY[0x19970E910](sPIQCARegistrationDictionaryMutex);
    CFAllocatorRef v36 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      CFIndex v38 = Mutable;
      CFNumberRef v39 = CFNumberCreate(v36, kCFNumberSInt64Type, &valuePtr);
      if (v39)
      {
        CFNumberRef v40 = v39;
        CFDictionarySetValue(v38, @"PixelBufferId", v39);
        CFRelease(v40);
      }
      if (value) {
        CFDictionarySetValue(v38, @"IOSurfaceBulkAttachments", value);
      }
      CFArrayRef v35 = key;
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(v13 + 120), key, v38);
      CFRelease(v38);
    }
    MEMORY[0x19970E930](sPIQCARegistrationDictionaryMutex);
    unsigned int v11 = v80;
    if ((v75 & 1) == 0)
    {
      CFRetain(*(CFTypeRef *)(v13 + 120));
      LocalCenter = CFNotificationCenterGetLocalCenter();
      CFNotificationCenterAddObserver(LocalCenter, *(const void **)(v13 + 120), (CFNotificationCallback)piqca_DeregisterPixelBufferBackingThatWillBeDeleted, (CFStringRef)*MEMORY[0x1E4F24978], v35, CFNotificationSuspensionBehaviorDeliverImmediately);
    }
  }
LABEL_68:
  if (value) {
    CFRelease(value);
  }
  if (valuePtr) {
    goto LABEL_71;
  }
LABEL_5:
  uint64_t v19 = FigSignalErrorAt();
  if (v19) {
    goto LABEL_106;
  }
LABEL_118:
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 8));
  piqca_postOccupancyChanged(a1);
  if (!*(unsigned char *)(DerivedStorage + 49))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
  }
  if (!*(unsigned char *)(DerivedStorage + 135))
  {
    *(unsigned char *)(DerivedStorage + 135) = 1;
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
  }
  if (!*(unsigned char *)(DerivedStorage + 1544)) {
    return 0;
  }
  CFMutableDictionaryRef v73 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  FigCFDictionarySetCGSize();
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  if (v73) {
    CFRelease(v73);
  }
  uint64_t v19 = 0;
  *(unsigned char *)(DerivedStorage + 1544) = 0;
  return v19;
}

uint64_t piqca_requestRendererPreparationForPreroll(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 3048));
  int v5 = *(unsigned __int8 *)(DerivedStorage + 3056);
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 3048));
  if (!v5) {
    return 4294951395;
  }
  piqca_postRendererPreparationCompletedIfPreviouslyRequestedAndRecordNewRequest(a1, 1, a2);
  return 0;
}

uint64_t piqca_flushFramesFollowingCurrentFrame(uint64_t a1)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  CMTime v15 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA10];
  if (*DerivedStorage)
  {
    uint64_t v3 = DerivedStorage;
    CFTypeID v4 = (OpaqueCMTimebase *)DerivedStorage[18];
    if (v4)
    {
      CMTimebaseGetTime(&v15, v4);
      CMTime v14 = v15;
      CMTimeGetSeconds(&v14);
      if (v3[18])
      {
        int v5 = *((_DWORD *)v3 + 54);
        if (v5 >= 1 || v5 < 0)
        {
          uint64_t v6 = CAImageQueueConsumeUnconsumedInRange();
          int v7 = v6;
          if (v6)
          {
            *((_DWORD *)v3 + 392) += v6;
            MEMORY[0x19970E910](v3[308]);
            *((_DWORD *)v3 + 693) += v7;
            *((unsigned char *)v3 + 2608) = 1;
            MEMORY[0x19970E930](v3[308]);
          }
        }
      }
    }
    uint64_t v8 = mach_absolute_time();
    if ((unint64_t)FigHostTimeToNanoseconds() >= 0x165A0BC00)
    {
      v3[309] = v8;
      piqca_gmstats_dump();
    }
    v3[8] = CAImageQueueCollect();
    v3[10] = mach_absolute_time();
    CACurrentMediaTime();
    piqca_postOccupancyChanged(a1);
    uint64_t v9 = v3[385];
    if (v9)
    {
      uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v10) {
        uint64_t v11 = v10;
      }
      else {
        uint64_t v11 = 0;
      }
      uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v11 + 24);
      if (v12) {
        v12(v9, 1);
      }
    }
  }
  return 0;
}

uint64_t piqca_evictExpiredFramesFromCAImageQueueIfEvictionNotDoneRecently()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  mach_absolute_time();
  uint64_t result = FigHostTimeToNanoseconds();
  if (*(unsigned char *)(DerivedStorage + 49)) {
    BOOL v2 = result < 100000000;
  }
  else {
    BOOL v2 = 0;
  }
  if (!v2)
  {
    return piqca_evictExpiredFramesFromCAImageQueue();
  }
  return result;
}

uint64_t piqca_updateEDRDeadline(void *a1, int a2)
{
  uint64_t result = CelestialShouldManageEDRDeadline();
  if (result && sCAImageQueueSetEDRDeadline)
  {
    if (a2)
    {
      if (*((unsigned char *)a1 + 88)) {
        return result;
      }
      CFTimeInterval v5 = CACurrentMediaTime();
      uint64_t result = sCAImageQueueSetEDRDeadline(*a1, v5 + *((double *)a1 + 12));
      char v6 = 1;
    }
    else
    {
      if (!*((unsigned char *)a1 + 88)) {
        return result;
      }
      uint64_t result = sCAImageQueueSetEDRDeadline(*a1, INFINITY);
      char v6 = 0;
    }
    *((unsigned char *)a1 + 88) = v6;
  }
  return result;
}

uint64_t piqca_updateReducedPollingTimeRange(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = DerivedStorage;
  int v4 = *(_DWORD *)(DerivedStorage + 160);
  if (v4 != 1)
  {
    if (v4 != 2) {
      return CAImageQueueSetFlags();
    }
    if (*(int *)(DerivedStorage + 212) < 1) {
      return CAImageQueueSetFlags();
    }
    CFTimeInterval v5 = *(OpaqueCMTimebase **)(DerivedStorage + 144);
    if (!v5) {
      return CAImageQueueSetFlags();
    }
    CMTimebaseGetTime(&time, v5);
    double Seconds = CMTimeGetSeconds(&time);
    long long v16 = *(_OWORD *)(v3 + 164);
    uint64_t v17 = *(void *)(v3 + 180);
    int v7 = (CMTime *)&v16;
    goto LABEL_15;
  }
  if (*(int *)(DerivedStorage + 212) >= 1)
  {
    long long v16 = *MEMORY[0x1E4F1F9F8];
    uint64_t v17 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v10 = *(void (**)(uint64_t, void, void, long long *))(v9 + 64);
    if (v10) {
      v10(a1, 0, 0, &v16);
    }
    uint64_t v11 = *(OpaqueCMTimebase **)(v3 + 144);
    if (v11)
    {
      if ((BYTE12(v16) & 0x1D) == 1)
      {
        CMTimebaseGetTime(&v15, v11);
        double Seconds = CMTimeGetSeconds(&v15);
        long long v13 = v16;
        uint64_t v14 = v17;
        int v7 = (CMTime *)&v13;
LABEL_15:
        if (Seconds < CMTimeGetSeconds(v7)) {
          CAImageQueueSetReducedPollingTimeRange();
        }
      }
    }
  }
  return CAImageQueueSetFlags();
}

void piqca_releaseBuffer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    int v4 = (void **)(a3 + 32);
    MEMORY[0x19970E910](*(void *)(*(void *)(a3 + 32) + 8));
    if (*(void *)*v4)
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      uint64_t ReleasedImageInfo = CAImageQueueGetReleasedImageInfo();
      if (ReleasedImageInfo)
      {
        int v7 = (unsigned int *)ReleasedImageInfo;
        if (*(_DWORD *)ReleasedImageInfo)
        {
          uint64_t v8 = (_OWORD *)(a3 + 8);
          *(_OWORD *)CMTime time = *(_OWORD *)(a3 + 8);
          *(void *)&time[16] = *(void *)(a3 + 24);
          Float64 Seconds = CMTimeGetSeconds((CMTime *)time);
          *(double *)&unint64_t v10 = (double)FigHostTimeToNanoseconds();
          double v11 = *(double *)&v10 * 0.000000001;
          uint64_t v12 = *((void *)v7 + 1);
          LODWORD(v10) = *v7;
          double v13 = *((double *)v7 + 4) * (double)v10;
          MEMORY[0x19970E910](*(void *)(DerivedStorage + 2464));
          uint64_t v14 = CMBaseObjectGetDerivedStorage();
          int v15 = *(_DWORD *)(v14 + 2612);
          int v16 = *(_DWORD *)(v14 + 2616);
          if (v16 + v15 <= 0) {
            uint64_t v17 = -(-(v16 + v15) & 3);
          }
          else {
            uint64_t v17 = (v16 + v15) & 3;
          }
          uint64_t v18 = v14 + 32 * v17;
          *(Float64 *)(v18 + 2624) = Seconds;
          *(double *)(v18 + 2632) = v11;
          *(void *)(v18 + 2640) = v12;
          *(double *)(v18 + 2648) = v13;
          unsigned int v19 = v16 + 1;
          if (v19 > 4)
          {
            int v27 = v15 + 1;
            BOOL v28 = -v27 < 0;
            int v29 = -v27 & 3;
            int v30 = v27 & 3;
            if (!v28) {
              int v30 = -v29;
            }
            *(_DWORD *)(v14 + 2612) = v30;
          }
          else
          {
            *(_DWORD *)(v14 + 2616) = v19;
          }
          ++*(_DWORD *)(DerivedStorage + 2764);
          *(unsigned char *)(DerivedStorage + 2608) = 1;
          MEMORY[0x19970E930](*(void *)(DerivedStorage + 2464));
          memset(&v50, 0, sizeof(v50));
          CMTimeMakeWithSeconds(&lhs, *((Float64 *)v7 + 1), 60000);
          *(_OWORD *)CMTime time = *v8;
          *(void *)&time[16] = *(void *)(a3 + 24);
          CMTimeSubtract(&v50, &lhs, (CMTime *)time);
          Effectivefloat Rate = CMTimebaseGetEffectiveRate(*(CMTimebaseRef *)(DerivedStorage + 144));
          CFTypeRef v32 = (_DWORD *)MEMORY[0x1E4F1EBA8];
          if (*MEMORY[0x1E4F1EBA8] == 1)
          {
            *(_OWORD *)CMTime time = *v8;
            *(void *)&time[16] = *(void *)(a3 + 24);
            CMTimeGetSeconds((CMTime *)time);
            kdebug_trace();
            if (*v32 == 1) {
              kdebug_trace();
            }
          }
          double v33 = *((double *)v7 + 4);
          ++*(_DWORD *)(DerivedStorage + 2384);
          if (*(unsigned char *)(a3 + 64))
          {
            if (*((void *)v7 + 6))
            {
              double v34 = (double)FigHostTimeToNanoseconds() * 0.000000001 - *(double *)(a3 + 56);
              if (v34 >= 0.0)
              {
                *(double *)(DerivedStorage + 2896) = fmin(*(double *)(DerivedStorage + 2896), v34);
                *(double *)(DerivedStorage + 2904) = fmax(*(double *)(DerivedStorage + 2904), v34);
                *(double *)(DerivedStorage + 2912) = v34 + *(double *)(DerivedStorage + 2912);
                ++*(_DWORD *)(DerivedStorage + 2888);
              }
            }
          }
          uint64_t v35 = 2408;
          if ((*((void *)v7 + 5) & 0xFFFFFFFFFFFFLL) == 0) {
            uint64_t v35 = 2404;
          }
          ++*(_DWORD *)(DerivedStorage + v35);
          FigImageQueueFrameRateIncrementCounter(DerivedStorage + 2776);
          if (*(unsigned char *)(DerivedStorage + 49) && !*(_DWORD *)(DerivedStorage + 72) && *(unsigned char *)(DerivedStorage + 220))
          {
            uint64_t v40 = CMBaseObjectGetDerivedStorage();
            CFTypeID v41 = (CMTime *)(v40 + 2824);
            if ((*(_DWORD *)(v40 + 2836) & 0x1D) != 1)
            {
              long long v53 = 0u;
              memset(time, 0, sizeof(time));
              CAImageQueueGetVBLInfo();
              uint64_t v42 = FigHostTimeToNanoseconds();
              CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
              if (!FPSupport_GetClosestCommonRefreshIntervalForRate((uint64_t)&time2, round(1000000000.0 / (double)v42)))*CFTypeID v41 = time2; {
            }
              }
            *(CMTime *)CMTime time = v50;
            CMTime time2 = *v41;
            if ((CMTimeCompare((CMTime *)time, &time2) & 0x80000000) == 0)
            {
              unsigned int v43 = *(_DWORD *)(DerivedStorage + 1572);
              if (v43 <= 0x63)
              {
                *(_OWORD *)CMTime time = *v8;
                *(void *)&time[16] = *(void *)(a3 + 24);
                CMTimeConvertScale(&v48, (CMTime *)time, 1000, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
                *(_DWORD *)(DerivedStorage + 4 * *(int *)(DerivedStorage + 1572) + 1980) = v48.value;
                unsigned int v43 = *(_DWORD *)(DerivedStorage + 1572);
              }
              *(_DWORD *)(DerivedStorage + 1572) = v43 + 1;
              if (*v32 == 1)
              {
                *(CMTime *)CMTime time = v50;
                CMTimeGetSeconds((CMTime *)time);
                kdebug_trace();
              }
              MEMORY[0x19970E910](*(void *)(DerivedStorage + 2464));
              ++*(_DWORD *)(DerivedStorage + 2768);
              *(unsigned char *)(DerivedStorage + 2608) = 1;
              MEMORY[0x19970E930](*(void *)(DerivedStorage + 2464));
            }
            CMTime time2 = v50;
            CMTimeConvertScale((CMTime *)time, &time2, 60000, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
            CMTime v50 = *(CMTime *)time;
            if (EffectiveRate != 0.0)
            {
              double v44 = (double)(v50.value / 1000) / EffectiveRate;
              if (v44 > 0.0) {
                *(_DWORD *)(DerivedStorage + 1576) = (int)(v44 + (double)*(int *)(DerivedStorage + 1576));
              }
            }
          }
          uint64_t v36 = *v7;
          if (v36 <= 9)
          {
            ++*(_DWORD *)(DerivedStorage + 4 * v36 + 2412);
            LODWORD(v36) = *v7;
          }
          uint64_t v37 = *(void *)(DerivedStorage + 2848);
          uint64_t v38 = *((void *)v7 + 3);
          double v39 = *((double *)v7 + 1);
          *(_OWORD *)CMTime time = *v8;
          *(void *)&time[16] = *(void *)(a3 + 24);
          FigImageQueueDisplayCountHistory_TraceDisplayCountUsingHostTime(v37, (CMTime *)time, v36, v36, v38, v33, v39);
          goto LABEL_46;
        }
        if (!*(unsigned char *)(ReleasedImageInfo + 17))
        {
          if (*(unsigned char *)(ReleasedImageInfo + 16) || *(_DWORD *)(a3 + 40) != *(_DWORD *)(DerivedStorage + 24))
          {
            ++*(_DWORD *)(DerivedStorage + 2388);
            MEMORY[0x19970E910](*(void *)(DerivedStorage + 2464));
            ++*(_DWORD *)(DerivedStorage + 2760);
LABEL_62:
            *(unsigned char *)(DerivedStorage + 2608) = 1;
            MEMORY[0x19970E930](*(void *)(DerivedStorage + 2464));
            goto LABEL_46;
          }
          if (!*(unsigned char *)(DerivedStorage + 221))
          {
            uint64_t v20 = 0;
            CFTypeID v21 = (_OWORD *)(a3 + 8);
            for (uint64_t i = 296; i != 1496; i += 24)
            {
              *(_OWORD *)CMTime time = *v21;
              *(void *)&time[16] = *(void *)(a3 + 24);
              long long v23 = *(_OWORD *)(DerivedStorage + i);
              time2.CMTimeEpoch epoch = *(void *)(DerivedStorage + i + 16);
              *(_OWORD *)&time2.CFDataRef value = v23;
              if (!CMTimeCompare((CMTime *)time, &time2))
              {
                if (v20) {
                  goto LABEL_46;
                }
                uint64_t v20 = 1;
              }
            }
            if (*MEMORY[0x1E4F1EBA8] == 1)
            {
              *(_OWORD *)CMTime time = *v21;
              *(void *)&time[16] = *(void *)(a3 + 24);
              CMTimeGetSeconds((CMTime *)time);
              kdebug_trace();
            }
            CFMutableDictionaryRef v24 = (_OWORD *)(DerivedStorage + 256);
            if ((*(unsigned char *)(DerivedStorage + 268) & 1) != 0
              && (*(_OWORD *)CMTime time = *v24,
                  *(void *)&time[16] = *(void *)(DerivedStorage + 272),
                  CMTime time2 = *(CMTime *)(DerivedStorage + 224),
                  CMTimeAdd(&v47, (CMTime *)time, &time2),
                  *(_OWORD *)CMTime time = *v21,
                  *(void *)&time[16] = *(void *)(a3 + 24),
                  CMTimeCompare((CMTime *)time, &v47) < 1))
            {
              int v45 = *(_DWORD *)(DerivedStorage + 280) + 1;
              *(_DWORD *)(DerivedStorage + 280) = v45;
              if (v45 == *(_DWORD *)(DerivedStorage + 248)) {
                ++*(_DWORD *)(DerivedStorage + 1564);
              }
            }
            else
            {
              long long v25 = *v21;
              *(void *)(DerivedStorage + 272) = *(void *)(a3 + 24);
              *CFMutableDictionaryRef v24 = v25;
              *(_DWORD *)(DerivedStorage + 280) = 1;
            }
            unsigned int v26 = *(_DWORD *)(DerivedStorage + 1556);
            if (v26 <= 0x63)
            {
              *(_OWORD *)CMTime time = *v21;
              *(void *)&time[16] = *(void *)(a3 + 24);
              CMTimeConvertScale(&v46, (CMTime *)time, 1000, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
              *(_DWORD *)(DerivedStorage + 1556 + 4 * *(int *)(DerivedStorage + 1556) + 24) = v46.value;
              unsigned int v26 = *(_DWORD *)(DerivedStorage + 1556);
            }
            *(_DWORD *)(DerivedStorage + 1556) = v26 + 1;
            if (*((void *)v7 + 3)) {
              ++*(_DWORD *)(DerivedStorage + 1560);
            }
            MEMORY[0x19970E910](*(void *)(DerivedStorage + 2464));
            ++*(_DWORD *)(DerivedStorage + 2756);
            goto LABEL_62;
          }
        }
      }
    }
LABEL_46:
    MEMORY[0x19970E930](*(void *)(*(void *)(a3 + 32) + 8));
    piqca_decrementSnapLatchCount(v4);
    CVBufferRelease(*(CVBufferRef *)a3);
    free((void *)a3);
  }
}

void piqca_DeregisterPixelBufferBackingThatWillBeDeleted(uint64_t a1, const __CFDictionary *a2, const __CFString *a3, const void *a4)
{
  uint64_t valuePtr = 0;
  MEMORY[0x19970E910](sPIQCARegistrationDictionaryMutex);
  if (CFDictionaryGetValue(a2, 0) && (uint64_t v7 = FigCFWeakReferenceHolderCopyReferencedObject()) != 0)
  {
    uint64_t v8 = (const void *)v7;
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(a2, a4);
    if (Value)
    {
      CFNumberRef v10 = (const __CFNumber *)CFDictionaryGetValue(Value, @"PixelBufferId");
      if (v10)
      {
        CFNumberGetValue(v10, kCFNumberSInt64Type, &valuePtr);
        MEMORY[0x199707240](v8, valuePtr);
      }
      CFDictionaryRemoveValue(a2, a4);
    }
    char v11 = 0;
  }
  else
  {
    CFDictionaryRemoveAllValues(a2);
    uint64_t v8 = 0;
    char v11 = 1;
  }
  MEMORY[0x19970E930](sPIQCARegistrationDictionaryMutex);
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterRemoveObserver(LocalCenter, a2, a3, a4);
  CFRelease(a2);
  if ((v11 & 1) == 0) {
    CFRelease(v8);
  }
}

uint64_t FigTrialGetTypeID()
{
  if (FigTrialGetTypeID_sRegisterFigTrialTypeOnce != -1) {
    dispatch_once_f(&FigTrialGetTypeID_sRegisterFigTrialTypeOnce, 0, (dispatch_function_t)registerFigTrialType);
  }
  return sFigTrialID;
}

uint64_t registerFigTrialType()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sFigTrialID = result;
  return result;
}

uint64_t FigTrialCopyCFType(uint64_t a1, void *a2)
{
  uint64_t v14 = 0;
  int v4 = (void *)MEMORY[0x199711A30]();
  if (a1 && *(void *)(a1 + 64))
  {
    MEMORY[0x19970E910](*(void *)(a1 + 32));
    if (FigCFDictionaryGetValueIfPresent() == 1)
    {
      CFTimeInterval v5 = 0;
    }
    else
    {
      id v6 = FigTrialCopyTrialValueForFactor(a1, a2);
      CFTimeInterval v5 = v6;
      if (v6)
      {
        switch([v6 levelOneOfCase])
        {
          case 0xAu:
            int v7 = [v5 BOOLeanValue];
            uint64_t v8 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
            if (!v7) {
              uint64_t v8 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
            }
            CFTypeRef v9 = *v8;
            goto LABEL_16;
          case 0xBu:
            CFNumberRef v10 = (const void *)[v5 stringValue];
            if (v10) {
              CFTypeRef v9 = CFRetain(v10);
            }
            else {
              CFTypeRef v9 = 0;
            }
LABEL_16:
            uint64_t v14 = (uint64_t)v9;
            break;
          case 0xDu:
            [v5 longValue];
            uint64_t SInt64 = FigCFNumberCreateSInt64();
            goto LABEL_14;
          case 0xFu:
            [v5 doubleValue];
            uint64_t SInt64 = FigCFNumberCreateFloat64();
LABEL_14:
            uint64_t v14 = SInt64;
            break;
          default:
            break;
        }
        FigCFDictionarySetValue();
      }
    }

    MEMORY[0x19970E930](*(void *)(a1 + 32));
    uint64_t v12 = v14;
  }
  else
  {
    uint64_t v12 = 0;
  }
  return v12;
}

id FigTrialCopyTrialValueForFactor(uint64_t a1, void *a2)
{
  int v4 = (void *)MEMORY[0x199711A30]();
  if (!a1 || ![*(id *)(a1 + 72) count])
  {
LABEL_6:
    id v6 = 0;
    goto LABEL_7;
  }
  uint64_t v5 = 0;
  while (!objc_msgSend(a2, "isEqualToString:", objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(a1 + 72), "objectAtIndex:", v5), "factor"), "name")))
  {
    if ([*(id *)(a1 + 72) count] <= (unint64_t)++v5) {
      goto LABEL_6;
    }
  }
  CFTypeRef v9 = (void *)[*(id *)(a1 + 40) levelForFactor:a2 withNamespaceName:*(void *)(a1 + 48)];
  id v6 = v9;
  if (v9)
  {
    CFNumberRef v10 = (void *)[v9 metadata];
    if (v10)
    {
      CFStringRef v11 = (const __CFString *)[v10 valueForKey:@"clientNameMetaData"];
      if (v11)
      {
        uint64_t v12 = *(const void **)(a1 + 24);
        CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v11, @",");
        if (ArrayBySeparatingStrings)
        {
          CFArrayRef v14 = ArrayBySeparatingStrings;
          v16.CFIndex length = CFArrayGetCount(ArrayBySeparatingStrings);
          v16.location = 0;
          if (CFArrayContainsValue(v14, v16, v12))
          {
            CFRelease(v14);
            goto LABEL_7;
          }
          int v15 = FigCFEqual();
          CFRelease(v14);
          if (v15) {
            goto LABEL_7;
          }
        }
        goto LABEL_6;
      }
    }
  }
LABEL_7:
  id v7 = v6;
  return v7;
}

uint64_t FigTrialGetInt(uint64_t a1, void *a2)
{
  int v4 = (void *)MEMORY[0x199711A30]();
  if (a1)
  {
    id v5 = FigTrialCopyTrialValueForFactor(a1, a2);
    id v6 = v5;
    if (v5 && [v5 levelOneOfCase] == 13) {
      a1 = [v6 longValue];
    }
    else {
      a1 = 0;
    }
  }
  else
  {
    id v6 = 0;
  }

  return a1;
}

double FigTrialGetDouble(uint64_t a1, void *a2)
{
  int v4 = (void *)MEMORY[0x199711A30]();
  double v5 = 0.0;
  if (a1)
  {
    id v6 = FigTrialCopyTrialValueForFactor(a1, a2);
    id v7 = v6;
    if (v6 && [v6 levelOneOfCase] == 15)
    {
      [v7 doubleValue];
      double v5 = v8;
    }
  }
  else
  {
    id v7 = 0;
  }

  return v5;
}

__CFString *FigTrialCopyExperimentId(__CFString *a1)
{
  BOOL v2 = (void *)MEMORY[0x199711A30]();
  if (a1)
  {
    isa = a1[2].isa;
    if (isa) {
      a1 = isa;
    }
    else {
      a1 = @"Empty";
    }
  }
  return a1;
}

uint64_t FigTrialCreate(const void *a1, uint64_t a2, uint64_t *a3)
{
  if (!a3) {
    return 4294948235;
  }
  if (a1)
  {
    if (fstc_ensure_sOnceToken != -1) {
      dispatch_once(&fstc_ensure_sOnceToken, &__block_literal_global_29);
    }
    uint64_t v6 = fstc_ensure_err;
    if (fstc_ensure_err) {
      return v6;
    }
    CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    if (FigTrialGetTypeID_sRegisterFigTrialTypeOnce != -1) {
      dispatch_once_f(&FigTrialGetTypeID_sRegisterFigTrialTypeOnce, 0, (dispatch_function_t)registerFigTrialType);
    }
    uint64_t Instance = _CFRuntimeCreateInstance();
    if (Instance)
    {
      uint64_t v9 = Instance;
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      *(void *)(v9 + 80) = Mutable;
      if (Mutable
        && (*(void *)(v9 + 24) = CFRetain(a1), uint64_t v11 = FigSimpleMutexCreate(), (*(void *)(v9 + 32) = v11) != 0))
      {
        *(_DWORD *)(v9 + 56) = 221;
        if (fstc_ensure_sOnceToken != -1) {
          dispatch_once(&fstc_ensure_sOnceToken, &__block_literal_global_29);
        }
        if (fstc_ensure_err
          || (MEMORY[0x19970E910](fstc_ensure_sSharedTrialClient),
              double v13 = (const void *)qword_1E934E288,
              ++qword_1E934E290,
              MEMORY[0x19970E930](fstc_ensure_sSharedTrialClient),
              !v13))
        {
          *(void *)(v9 + 40) = 0;
        }
        else
        {
          CFTypeRef v14 = CFRetain(v13);
          *(void *)(v9 + 40) = v14;
          if (v14)
          {
            if (fstc_ensure_sOnceToken != -1) {
              dispatch_once(&fstc_ensure_sOnceToken, &__block_literal_global_29);
            }
            uint64_t v6 = fstc_ensure_err;
            if (!fstc_ensure_err)
            {
              CFDictionaryRef Value = CFDictionaryGetValue((CFDictionaryRef)qword_1E934E2A0, (const void *)[NSNumber numberWithInt:a2]);
              if (Value) {
                CFDictionaryRef Value = CFRetain(Value);
              }
              *(void *)(v9 + 48) = Value;
              CFRange v16 = CFDictionaryGetValue((CFDictionaryRef)qword_1E934E2A8, (const void *)[NSNumber numberWithInt:a2]);
              if (v16) {
                CFRange v16 = CFRetain(v16);
              }
              *(void *)(v9 + 64) = v16;
              uint64_t v17 = CFDictionaryGetValue((CFDictionaryRef)qword_1E934E2B0, (const void *)[NSNumber numberWithInt:a2]);
              if (v17) {
                uint64_t v17 = CFRetain(v17);
              }
              *(void *)(v9 + 72) = v17;
              if (dword_1E9350FA0)
              {
                os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              uint64_t v6 = 0;
              *a3 = v9;
              return v6;
            }
            goto LABEL_16;
          }
        }
        uint64_t v6 = 4294948236;
      }
      else
      {
        FigSignalErrorAt();
        uint64_t v6 = 0;
      }
LABEL_16:
      CFRelease((CFTypeRef)v9);
      return v6;
    }
  }

  return FigSignalErrorAt();
}

double FigTrial_Init(uint64_t a1)
{
  *(void *)(a1 + 80) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

void FigTrial_Finalize(uint64_t a1)
{
  BOOL v2 = *(const void **)(a1 + 80);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 80) = 0;
  }
  FigSimpleMutexDestroy();
  uint64_t v3 = *(const void **)(a1 + 24);
  if (v3) {
    CFRelease(v3);
  }

  int v4 = *(const void **)(a1 + 40);
  if (v4)
  {
    if (fstc_ensure_sOnceToken != -1) {
      dispatch_once(&fstc_ensure_sOnceToken, &__block_literal_global_29);
    }
    if (!fstc_ensure_err)
    {
      MEMORY[0x19970E910](fstc_ensure_sSharedTrialClient);
      BOOL v5 = qword_1E934E290 == 1;
      if (qword_1E934E290 >= 1)
      {
        --qword_1E934E290;
        if (v5)
        {
          if (byte_1E934E298)
          {
            byte_1E934E298 = 0;
            [(id)qword_1E934E288 refresh];
            fstc_populateCachesWithMutex((uint64_t)&fstc_ensure_sSharedTrialClient);
          }
        }
      }
      MEMORY[0x19970E930](fstc_ensure_sSharedTrialClient);
    }
    CFRelease(v4);
  }
}

CFStringRef FigTrial_CopyFormattingDescription(const void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, @"<FigTrialRef %p>", a1);
}

CFStringRef FigTrial_CopyDebugDescription(const void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, @"<FigTrialRef %p>", a1);
}

uint64_t fstc_populateCachesWithMutex(uint64_t a1)
{
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v3 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
  int v4 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v6 = CFDictionaryCreateMutable(v2, 0, v3, v4);
  CFMutableDictionaryRef v7 = CFDictionaryCreateMutable(v2, 0, v3, v4);
  CFMutableDictionaryRef v8 = v7;
  if (Mutable) {
    BOOL v9 = v6 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9 || v7 == 0)
  {
    uint64_t v20 = FigSignalErrorAt();
    if (v8) {
LABEL_27:
    }
      CFRelease(v8);
  }
  else
  {
    long long v23 = v7;
    uint64_t v11 = 0;
    CFTypeRef v22 = v25;
    do
    {
      if (v11 > 2) {
        goto LABEL_26;
      }
      uint64_t v26 = 0;
      int v27 = &v26;
      uint64_t v28 = 0x3052000000;
      int v29 = __Block_byref_object_copy__5;
      int v30 = __Block_byref_object_dispose__5;
      uint64_t v12 = (void *)getTRINamespaceClass_softClass;
      uint64_t v31 = getTRINamespaceClass_softClass;
      if (!getTRINamespaceClass_softClass)
      {
        v24[0] = MEMORY[0x1E4F143A8];
        v24[1] = 3221225472;
        v25[0] = __getTRINamespaceClass_block_invoke;
        v25[1] = &unk_1E57982D0;
        v25[2] = &v26;
        __getTRINamespaceClass_block_invoke((uint64_t)v24);
        uint64_t v12 = (void *)v27[5];
      }
      _Block_object_dispose(&v26, 8);
      uint64_t v13 = objc_msgSend(v12, "namespaceNameFromId:", (v11 + 311), v22);
      if (!v13)
      {
LABEL_26:
        uint64_t v20 = FigSignalErrorAt();
        CFMutableDictionaryRef v8 = v23;
        if (!v23) {
          goto LABEL_28;
        }
        goto LABEL_27;
      }
      CFTypeRef v14 = (const void *)v13;
      int v15 = (const void *)objc_msgSend((id)objc_msgSend(*(id *)(a1 + 8), "experimentIdentifiersWithNamespaceName:", v13), "experimentId");
      CFRange v16 = (const void *)[*(id *)(a1 + 8) factorLevelsWithNamespaceName:v14];
      CFDictionarySetValue(Mutable, (const void *)[NSNumber numberWithInt:v11], v14);
      if (v15) {
        CFDictionarySetValue(v6, (const void *)[NSNumber numberWithInt:v11], v15);
      }
      if (v16) {
        CFDictionarySetValue(v23, (const void *)[NSNumber numberWithInt:v11], v16);
      }
      uint64_t v11 = (v11 + 1);
    }
    while (v11 != 3);
    uint64_t v17 = *(const void **)(a1 + 32);
    *(void *)(a1 + 32) = Mutable;
    CFRetain(Mutable);
    if (v17) {
      CFRelease(v17);
    }
    uint64_t v18 = *(const void **)(a1 + 40);
    *(void *)(a1 + 40) = v6;
    CFRetain(v6);
    CFMutableDictionaryRef v8 = v23;
    if (v18) {
      CFRelease(v18);
    }
    unsigned int v19 = *(const void **)(a1 + 48);
    *(void *)(a1 + 48) = v23;
    CFRetain(v23);
    if (v19) {
      CFRelease(v19);
    }
    uint64_t v20 = 0;
    if (v23) {
      goto LABEL_27;
    }
  }
LABEL_28:
  if (v6) {
    CFRelease(v6);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v20;
}

void sub_194236140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __Block_byref_object_copy__5(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose__5(uint64_t a1)
{
}

Class __getTRINamespaceClass_block_invoke(uint64_t a1)
{
  TrialLibrary();
  Class result = objc_getClass("TRINamespace");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getTRINamespaceClass_block_invoke_cold_1();
  }
  getTRINamespaceClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

void TrialLibrary()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  v0[0] = 0;
  if (!TrialLibraryCore_frameworkLibrary)
  {
    v0[1] = (void *)MEMORY[0x1E4F143A8];
    v0[2] = (void *)3221225472;
    v0[3] = __TrialLibraryCore_block_invoke;
    v0[4] = &__block_descriptor_40_e5_v8__0l;
    v0[5] = v0;
    long long v1 = xmmword_1E5798650;
    uint64_t v2 = 0;
    TrialLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!TrialLibraryCore_frameworkLibrary) {
    TrialLibrary_cold_1(v0);
  }
  if (v0[0]) {
    free(v0[0]);
  }
}

uint64_t __TrialLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  TrialLibraryCore_frameworkLibrary = result;
  return result;
}

void __fstc_ensure_block_invoke()
{
  CFAllocatorRef v0 = (void *)MEMORY[0x199711A30]();
  fstc_ensure_sSharedTrialClient = FigSimpleMutexCreate();
  uint64_t v7 = 0;
  uint64_t v8 = (uint64_t)&v7;
  uint64_t v9 = 0x3052000000;
  CFNumberRef v10 = __Block_byref_object_copy__5;
  uint64_t v11 = __Block_byref_object_dispose__5;
  long long v1 = (void *)getTRIClientClass_softClass;
  uint64_t v12 = getTRIClientClass_softClass;
  if (!getTRIClientClass_softClass)
  {
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    void v6[2] = __getTRIClientClass_block_invoke;
    v6[3] = &unk_1E57982D0;
    v6[4] = &v7;
    __getTRIClientClass_block_invoke((uint64_t)v6);
    long long v1 = *(void **)(v8 + 40);
  }
  _Block_object_dispose(&v7, 8);
  qword_1E934E288 = (uint64_t)(id)[v1 clientWithIdentifier:221];
  MEMORY[0x19970E910](fstc_ensure_sSharedTrialClient);
  fstc_ensure_err = fstc_populateCachesWithMutex((uint64_t)&fstc_ensure_sSharedTrialClient);
  CFArrayRef v2 = (const __CFArray *)FigCFDictionaryCopyArrayOfValues();
  if (v2)
  {
    CFArrayRef v3 = v2;
    if (CFArrayGetCount(v2) >= 1)
    {
      CFIndex v4 = 0;
      do
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v3, v4);
        uint64_t v7 = MEMORY[0x1E4F143A8];
        uint64_t v8 = 3221225472;
        uint64_t v9 = (uint64_t)__fstc_installUpdateHandlerWithMutex_block_invoke;
        CFNumberRef v10 = (void (*)(uint64_t, uint64_t))&__block_descriptor_40_e8_v16__0_8l;
        uint64_t v11 = (void (*)(uint64_t))&fstc_ensure_sSharedTrialClient;
        [(id)qword_1E934E288 addUpdateHandlerForNamespaceName:ValueAtIndex usingBlock:&v7];
        ++v4;
      }
      while (v4 < CFArrayGetCount(v3));
    }
    CFRelease(v3);
  }
  else
  {
    FigSignalErrorAt();
  }
  MEMORY[0x19970E930](fstc_ensure_sSharedTrialClient);
}

void sub_194236548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getTRIClientClass_block_invoke(uint64_t a1)
{
  TrialLibrary();
  Class result = objc_getClass("TRIClient");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    __getTRIClientClass_block_invoke_cold_1();
  }
  getTRIClientClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

void __fstc_installUpdateHandlerWithMutex_block_invoke(uint64_t a1)
{
  MEMORY[0x19970E910](**(void **)(a1 + 32));
  uint64_t v2 = *(void *)(a1 + 32);
  *(unsigned char *)(v2 + 24) = 1;
  if (!*(void *)(v2 + 16))
  {
    *(unsigned char *)(v2 + 24) = 0;
    [*(id *)(v2 + 8) refresh];
    fstc_populateCachesWithMutex(v2);
  }

  JUMPOUT(0x19970E930);
}

uint64_t FigImageQueueGetTypeID()
{
  MEMORY[0x19970EE10](&FigImageQueueGetClassID_sRegisterFigImageQueueTypeOnce, RegisterFigImageQueueType);

  return CMBaseClassGetCFTypeID();
}

float FigImageQueueFrameRateGetCurrent(void *a1)
{
  UpTimeNanoCMTime seconds = FigGetUpTimeNanoseconds();
  MEMORY[0x19970E910](*a1);
  float v3 = 0.0;
  if (a1[5] + 1000000000 >= UpTimeNanoseconds)
  {
    uint64_t v4 = a1[1];
    if (v4 + 2000000000 <= UpTimeNanoseconds)
    {
      uint64_t v7 = UpTimeNanoseconds - a1[3];
      if (v7 <= 1000000000) {
        uint64_t v7 = 1000000000;
      }
      float v5 = (float)(1000000000 * *((_DWORD *)a1 + 8));
      float v6 = (float)v7;
    }
    else
    {
      float v5 = (float)(1000000000 * (*((_DWORD *)a1 + 8) + (uint64_t)*((int *)a1 + 4)));
      float v6 = (float)(UpTimeNanoseconds - v4);
    }
    float v3 = v5 / v6;
  }
  MEMORY[0x19970E930](*a1);
  return v3;
}

uint64_t FigImageQueueArraySetProperty()
{
  return FigCFArrayApplyFunction();
}

uint64_t FigImageQueueSetPropertyApply(uint64_t a1, uint64_t *a2)
{
  if (a1 && *MEMORY[0x1E4F1D260] != a1 && a2 && (uint64_t v3 = *a2) != 0)
  {
    uint64_t v4 = a2[1];
    uint64_t VTable = CMBaseObjectGetVTable();
    uint64_t v8 = *(void *)(VTable + 8);
    uint64_t result = VTable + 8;
    uint64_t v7 = v8;
    if (v8) {
      uint64_t v9 = v7;
    }
    else {
      uint64_t v9 = 0;
    }
    CFNumberRef v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 56);
    if (v10)
    {
      return v10(a1, v3, v4);
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t FigImageQueueArraySetPropertyValuesFromArray(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F40DC878](a1, a3, FigImageQueueSetPropertyApply2, a2);
}

uint64_t FigImageQueueSetPropertyApply2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a1 || *MEMORY[0x1E4F1D260] == a1)
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t VTable = CMBaseObjectGetVTable();
    uint64_t v9 = *(void *)(VTable + 8);
    uint64_t result = VTable + 8;
    uint64_t v8 = v9;
    if (v9) {
      uint64_t v10 = v8;
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 56);
    if (v11)
    {
      return v11(a1, a3, a2);
    }
  }
  return result;
}

uint64_t FigImageQueueArrayCreateImageQueueConfigurationArray(CFArrayRef theArray, const __CFAllocator *a2, const __CFArray *a3, __CFArray **a4)
{
  if (theArray)
  {
    CFIndex Count = CFArrayGetCount(theArray);
    if (!a4) {
      goto LABEL_18;
    }
  }
  else
  {
    CFIndex Count = 0;
    if (!a4)
    {
LABEL_18:
      return FigSignalErrorAt();
    }
  }
  if (a3) {
    CFIndex v9 = CFArrayGetCount(a3);
  }
  else {
    CFIndex v9 = 0;
  }
  if (Count != v9) {
    goto LABEL_18;
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable(a2, 0, MEMORY[0x1E4F1D510]);
  if (!Mutable) {
    goto LABEL_18;
  }
  uint64_t v11 = Mutable;
  uint64_t v18 = a4;
  if (Count >= 1)
  {
    CFIndex v12 = 0;
    CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    do
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v12);
      int v15 = CFArrayGetValueAtIndex(a3, v12);
      CFRange v16 = CFDictionaryCreateMutable(v13, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFDictionarySetValue(v16, @"FigImageQueueConfigurationKey_ImageQueue", ValueAtIndex);
      if (!FigCFEqual()) {
        CFDictionarySetValue(v16, @"FigImageQueueConfigurationKey_Options", v15);
      }
      CFArrayAppendValue(v11, v16);
      if (v16) {
        CFRelease(v16);
      }
      ++v12;
    }
    while (Count != v12);
  }
  *uint64_t v18 = v11;
  return 0;
}

CFStringRef FigImageQueueCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigImageQueue %p]", a1);
}

uint64_t FigCDSBasicInputCreate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (a1 && a2 && a3 && a5)
  {
    *a5 = 0;
    FigCDSInputGetClassID();
    CMDerivedObjectCreate();
  }
  return FigSignalErrorAt();
}

uint64_t FigCDSBasicInputAddSample(uint64_t a1, uint64_t a2)
{
  v4[0] = CMBaseObjectGetDerivedStorage();
  v4[1] = a2;
  if (*(void *)v4[0]) {
    dispatch_sync_f(*(dispatch_queue_t *)v4[0], v4, (dispatch_function_t)digestSubtitleSampleDo_1);
  }
  return 0;
}

void digestSubtitleSampleDo_1(uint64_t *a1)
{
  uint64_t v2 = *a1;
  CFDictionaryRef v1 = (const __CFDictionary *)a1[1];
  CFDictionaryRef theDict = 0;
  char v61 = 0;
  if (FigSubtitleSampleCreateFromPropertyListAndInsertInfoForRenderer(v1, &theDict, &v61, *MEMORY[0x1E4F1DB20], *(CGFloat *)(MEMORY[0x1E4F1DB20] + 8), *(CGFloat *)(MEMORY[0x1E4F1DB20] + 16), *(CGFloat *)(MEMORY[0x1E4F1DB20] + 24)))goto LABEL_58; {
  CFDictionaryRef v3 = theDict;
  }
  if (!theDict) {
    goto LABEL_57;
  }
  uint64_t v4 = *(void *)(v2 + 48);
  if (v4)
  {
    FigCDSLayoutContextSetSubtitleSample(v4, theDict);
    CFDictionaryRef v3 = theDict;
  }
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v3, @"SubtitleContentMetadata");
  if (Value)
  {
    CFDictionaryRef v6 = (const __CFDictionary *)CFDictionaryGetValue(Value, (const void *)*MEMORY[0x1E4F1F818]);
    int64_t Count = CFDictionaryGetCount(v6);
    if (Count >= 1)
    {
      size_t v8 = Count;
      CFIndex v9 = (const void **)malloc_type_calloc(Count, 8uLL, 0xC0040B8AA526DuLL);
      uint64_t v10 = (const void **)malloc_type_calloc(v8, 8uLL, 0xC0040B8AA526DuLL);
      CFDictionaryGetKeysAndValues(v6, v9, v10);
      uint64_t v11 = 0;
      float v58 = (void *)*MEMORY[0x1E4F1F8A0];
      key = (void *)*MEMORY[0x1E4F1F888];
      CFTypeID v57 = (void *)*MEMORY[0x1E4F1F890];
      do
      {
        CFIndex v12 = v10[v11];
        if (v12)
        {
          CFTypeID v13 = CFGetTypeID(v12);
          if (v13 == CFDictionaryGetTypeID())
          {
            CFTypeRef v14 = v9[v11];
            if (v14)
            {
              CFTypeID v15 = CFGetTypeID(v14);
              if (v15 == CFStringGetTypeID())
              {
                CFRange v16 = v9[v11];
                CFDictionaryRef v17 = (const __CFDictionary *)v10[v11];
                int v69 = 0;
                FigCDSStackLayoutRegionCreate(&v69);
                double v68 = 0.0;
                unsigned int valuePtr = 0;
                double v65 = 0.0;
                double v66 = 0.0;
                double v63 = 0.0;
                double v64 = 0.0;
                uint64_t v18 = v69;
                FigCDSRegionProtocolGetProtocolID();
                Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
                if (ProtocolVTable)
                {
                  uint64_t v20 = *(void *)(ProtocolVTable + 16);
                  if (v20)
                  {
                    CFTypeID v21 = *(void (**)(const void *, const void *))(v20 + 8);
                    if (v21) {
                      v21(v18, v16);
                    }
                  }
                }
                if (FigCFDictionaryGetCGFloatIfPresent())
                {
                  CFTypeRef v22 = v69;
                  double v23 = v68;
                  FigCDSRegionProtocolGetProtocolID();
                  uint64_t v24 = CMBaseObjectGetProtocolVTable();
                  if (v24)
                  {
                    uint64_t v25 = *(void *)(v24 + 16);
                    if (v25)
                    {
                      uint64_t v26 = *(void (**)(const void *, void))(v25 + 24);
                      if (v26) {
                        v26(v22, (int)v23);
                      }
                    }
                  }
                  CFNumberRef v27 = (const __CFNumber *)CFDictionaryGetValue(v17, key);
                  if (v27)
                  {
                    CFNumberGetValue(v27, kCFNumberIntType, &valuePtr);
                    uint64_t v28 = v69;
                    uint64_t v29 = valuePtr;
                    FigCDSRegionProtocolGetProtocolID();
                    uint64_t v30 = CMBaseObjectGetProtocolVTable();
                    if (v30)
                    {
                      uint64_t v31 = *(void *)(v30 + 16);
                      if (v31)
                      {
                        CFTypeRef v32 = *(void (**)(const void *, uint64_t))(v31 + 40);
                        if (v32) {
                          v32(v28, v29);
                        }
                      }
                    }
                    if (CFDictionaryGetValue(v17, v58)
                      && FigCFDictionaryGetCGFloatIfPresent()
                      && FigCFDictionaryGetCGFloatIfPresent())
                    {
                      double v33 = v69;
                      double v35 = v65;
                      double v34 = v66;
                      FigCDSRegionProtocolGetProtocolID();
                      uint64_t v36 = CMBaseObjectGetProtocolVTable();
                      if (v36)
                      {
                        uint64_t v37 = *(void *)(v36 + 16);
                        if (v37)
                        {
                          uint64_t v38 = *(void (**)(const void *, double, double))(v37 + 72);
                          if (v38) {
                            v38(v33, v34, 100.0 - v35);
                          }
                        }
                      }
                      if (CFDictionaryGetValue(v17, v57)
                        && FigCFDictionaryGetCGFloatIfPresent()
                        && FigCFDictionaryGetCGFloatIfPresent())
                      {
                        double v39 = v69;
                        double v41 = v63;
                        double v40 = v64;
                        FigCDSRegionProtocolGetProtocolID();
                        uint64_t v42 = CMBaseObjectGetProtocolVTable();
                        if (v42)
                        {
                          uint64_t v43 = *(void *)(v42 + 16);
                          if (v43)
                          {
                            double v44 = *(void (**)(const void *, double, double))(v43 + 56);
                            if (v44) {
                              v44(v39, v40, v41);
                            }
                          }
                        }
                        uint64_t v45 = *(void *)(v2 + 48);
                        if (v45) {
                          FigCDSLayoutContextSetMapping(v45, v69, v17);
                        }
                        (*(void (**)(const void *, void))(v2 + 24))(v69, *(void *)(v2 + 32));
                      }
                    }
                  }
                }
              }
            }
          }
        }
        ++v11;
      }
      while (v8 != v11);
      free(v9);
      free(v10);
    }
  }
  int v60 = 0;
  CFNumberRef v46 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"SubtitleFormat");
  CFNumberGetValue(v46, kCFNumberSInt32Type, &v60);
  if (((v60 - 2004251764) & 0xFEFFFFFF) != 0) {
    uint64_t v47 = 3;
  }
  else {
    uint64_t v47 = 4;
  }
  CFDictionaryGetValue(theDict, @"SubtitleTimeRange");
  CMTime v48 = CFDictionaryGetValue(theDict, @"kFigSubtitleRenderer_TextBox");
  uint64_t v49 = CFDictionaryGetValue(theDict, @"SubtitleExtendedLanguageTag");
  CFArrayRef v50 = (const __CFArray *)CFDictionaryGetValue(theDict, @"SubtitleContent");
  if (v50)
  {
    CFArrayRef v51 = v50;
    CFIndex v52 = CFArrayGetCount(v50);
    if (v52)
    {
      CFIndex v53 = v52;
      if (v52 >= 1)
      {
        for (CFIndex i = 0; i != v53; ++i)
        {
          CFAttributedStringRef ValueAtIndex = (const __CFAttributedString *)CFArrayGetValueAtIndex(v51, i);
          if (ValueAtIndex)
          {
            CFAttributedStringRef v56 = ValueAtIndex;
            if (CFAttributedStringGetLength(ValueAtIndex)) {
              outputCueAsFigCDSCaption(v2, v47, (uint64_t)v49, v48, v56);
            }
          }
        }
      }
      goto LABEL_58;
    }
LABEL_57:
    outputCueAsFigCDSCaption(v2, 5, 0, 0, 0);
  }
LABEL_58:
  if (theDict) {
    CFRelease(theDict);
  }
}

uint64_t FigCDSBasicInputSetLayoutContext(uint64_t a1, uint64_t a2)
{
  v4[0] = CMBaseObjectGetDerivedStorage();
  v4[1] = a2;
  if (*(void *)v4[0]) {
    dispatch_sync_f(*(dispatch_queue_t *)v4[0], v4, (dispatch_function_t)setLayoutContextDo_0);
  }
  return 0;
}

void setLayoutContextDo_0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  CFDictionaryRef v1 = (const void *)a1[1];
  CFDictionaryRef v3 = *(const void **)(v2 + 48);
  *(void *)(v2 + 48) = v1;
  if (v1) {
    CFRetain(v1);
  }
  if (v3)
  {
    CFRelease(v3);
  }
}

void figCDSBasicInput_Finalize()
{
  uint64_t DerivedStorage = (dispatch_object_t *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    dispatch_release(*DerivedStorage);
    *uint64_t DerivedStorage = 0;
  }
}

__CFString *figCDSBasicInput_CopyDebugDescription(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<FigCDSBasicInput %p>", a1);
  return Mutable;
}

uint64_t start_0()
{
  return 0;
}

uint64_t stop_0()
{
  return 0;
}

void outputCueAsFigCDSCaption(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, const __CFAttributedString *a5)
{
  effectiveRange.location = 0;
  effectiveRange.CFIndex length = 0;
  double v41 = 0;
  FigCDSCaptionCreate(&v41);
  uint64_t v10 = v41;
  FigCDSCaptionProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    uint64_t v12 = *(void *)(ProtocolVTable + 16);
    if (v12)
    {
      CFTypeID v13 = *(void (**)(const void *, uint64_t))(v12 + 40);
      if (v13) {
        v13(v10, a2);
      }
    }
  }
  if (a2 == 5)
  {
    (*(void (**)(const void *, void))(a1 + 16))(v41, *(void *)(a1 + 32));
  }
  else if (a5)
  {
    CFTypeRef v14 = v41;
    FigCDSCaptionProtocolGetProtocolID();
    uint64_t v15 = CMBaseObjectGetProtocolVTable();
    if (v15)
    {
      uint64_t v16 = *(void *)(v15 + 16);
      if (v16)
      {
        CFDictionaryRef v17 = *(void (**)(const void *, uint64_t))(v16 + 56);
        if (v17) {
          v17(v14, a3);
        }
      }
    }
    CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    unsigned int v19 = v41;
    FigCDSCaptionProtocolGetProtocolID();
    uint64_t v20 = CMBaseObjectGetProtocolVTable();
    if (v20)
    {
      uint64_t v21 = *(void *)(v20 + 16);
      if (v21)
      {
        CFTypeRef v22 = *(void (**)(const void *, __CFDictionary *))(v21 + 8);
        if (v22) {
          v22(v19, Mutable);
        }
      }
    }
    CFTypeRef Attribute = CFAttributedStringGetAttribute(a5, 0, (CFStringRef)*MEMORY[0x1E4F1F690], &effectiveRange);
    if (Attribute) {
      CFDictionarySetValue(Mutable, @"region", Attribute);
    }
    if (a4) {
      CFDictionarySetValue(Mutable, @"textbox", a4);
    }
    if (a2 == 4)
    {
      uint64_t v24 = (const void *)*MEMORY[0x1E4F1F720];
      CFTypeRef v25 = CFAttributedStringGetAttribute(a5, 0, (CFStringRef)*MEMORY[0x1E4F1F720], &effectiveRange);
      if (v25) {
        CFDictionarySetValue(Mutable, v24, v25);
      }
      uint64_t v26 = (const void *)*MEMORY[0x1E4F1F700];
      CFTypeRef v27 = CFAttributedStringGetAttribute(a5, 0, (CFStringRef)*MEMORY[0x1E4F1F700], &effectiveRange);
      if (v27) {
        CFDictionarySetValue(Mutable, v26, v27);
      }
      uint64_t v28 = (const void *)*MEMORY[0x1E4F1F668];
      CFTypeRef v29 = CFAttributedStringGetAttribute(a5, 0, (CFStringRef)*MEMORY[0x1E4F1F668], &effectiveRange);
      if (v29) {
        CFDictionarySetValue(Mutable, v28, v29);
      }
      uint64_t v30 = (const void *)*MEMORY[0x1E4F1F660];
      CFTypeRef v31 = CFAttributedStringGetAttribute(a5, 0, (CFStringRef)*MEMORY[0x1E4F1F660], &effectiveRange);
      if (v31) {
        CFDictionarySetValue(Mutable, v30, v31);
      }
      CFTypeRef v32 = (const void *)*MEMORY[0x1E4F1F5B8];
      CFTypeRef v33 = CFAttributedStringGetAttribute(a5, 0, (CFStringRef)*MEMORY[0x1E4F1F5B8], &effectiveRange);
      if (v33) {
        CFDictionarySetValue(Mutable, v32, v33);
      }
      double v34 = (const void *)*MEMORY[0x1E4F1F5C0];
      CFTypeRef v35 = CFAttributedStringGetAttribute(a5, 0, (CFStringRef)*MEMORY[0x1E4F1F5C0], &effectiveRange);
      if (v35) {
        CFDictionarySetValue(Mutable, v34, v35);
      }
    }
    uint64_t v36 = v41;
    FigCDSCaptionProtocolGetProtocolID();
    uint64_t v37 = CMBaseObjectGetProtocolVTable();
    if (v37)
    {
      uint64_t v38 = *(void *)(v37 + 16);
      if (v38)
      {
        double v39 = *(void (**)(const void *, const __CFAttributedString *))(v38 + 24);
        if (v39) {
          v39(v36, a5);
        }
      }
    }
    uint64_t v40 = *(void *)(a1 + 48);
    if (v40) {
      FigCDSLayoutContextSetMapping(v40, v41, a5);
    }
    (*(void (**)(const void *, void))(a1 + 16))(v41, *(void *)(a1 + 32));
    if (Mutable) {
      CFRelease(Mutable);
    }
  }
}

uint64_t FigCDSActionCreate(void *a1)
{
  *a1 = 0;
  MEMORY[0x19970EE10](&FigCDSActionGetClassID_sRegisterFigCDSActionBaseTypeOnce, RegisterFigCDSActionBaseType);
  uint64_t v2 = CMDerivedObjectCreate();
  if (!v2)
  {
    *(_DWORD *)CMBaseObjectGetDerivedStorage() = 0;
    *a1 = 0;
  }
  return v2;
}

uint64_t FigCDSMoveToActionCreate(void *a1)
{
  *a1 = 0;
  MEMORY[0x19970EE10](&FigCDSMoveToActionGetClassID_sRegisterFigCDSMoveToActionBaseTypeOnce, RegisterFigCDSMoveToActionBaseType);
  uint64_t v2 = CMDerivedObjectCreate();
  if (v2) {
    return v2;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_OWORD *)(DerivedStorage + 8) = *MEMORY[0x1E4F1DAD8];
  uint64_t v4 = FigCDSActionCreate((void *)DerivedStorage);
  if (v4) {
    FigSignalErrorAt();
  }
  else {
    *a1 = 0;
  }
  return v4;
}

__CFString *FigCDSActionCopyDebugDescription(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"\tFigCDSAction: <%p>", a1);
  return Mutable;
}

__CFString *FigCDSAction_FigCDSActionProtocol_CopyDebugDescription(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"\tFigCDSAction <FigCDSActionProtocol> on <%p>", a1);
  return Mutable;
}

uint64_t FigCDSAction_FigCDSActionProtocol_GetDuration(uint64_t a1, _DWORD *a2)
{
  *a2 = *(_DWORD *)CMBaseObjectGetDerivedStorage();
  return 0;
}

uint64_t FigCDSAction_FigCDSActionProtocol_SetDuration(uint64_t a1, int a2)
{
  *(_DWORD *)CMBaseObjectGetDerivedStorage() = a2;
  return 0;
}

uint64_t RegisterFigCDSActionBaseType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

CFTypeRef FigCDSActionBaseCopyFormattingDesc()
{
  return CFRetain(@"[FigCDSAction]");
}

void FigCDSMoveToActionFinalize()
{
  CFAllocatorRef v0 = *(const void **)CMBaseObjectGetDerivedStorage();
  if (v0)
  {
    CFRelease(v0);
  }
}

__CFString *FigCDSMoveToActionCopyDebugDescription(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"\tFigCDSMoveToAction: <%p>", a1);
  return Mutable;
}

__CFString *FigCDSMoveToAction_FigCDSBaseProtocol_CopyDebugDescription(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"\tFigCDSMoveToAction <FigCDSBaseProtocol> on <%p>", a1);
  return Mutable;
}

uint64_t FigCDSMoveToAction_FigCDSBaseProtocol_GetClassName(uint64_t a1, void *a2)
{
  *a2 = "FigCDSMoveToAction";
  return 0;
}

__CFString *FigCDSMoveToAction_FigCDSActionProtocol_CopyDebugDescription(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"\tFigCDSMoveToAction <FigCDSActionProtocol> on <%p>", a1);
  return Mutable;
}

uint64_t FigCDSMoveToAction_FigCDSActionProtocol_GetDuration(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSActionProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  CFDictionaryRef v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCDSMoveToAction_FigCDSActionProtocol_SetDuration(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSActionProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  CFDictionaryRef v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 16);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

__CFString *FigCDSMoveToAction_FigCDSMoveToActionProtocol_CopyDebugDescription(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"\tFigCDSMoveToAction <FigCDSMoveToActionProtocol> on <%p>", a1);
  return Mutable;
}

uint64_t FigCDSMoveToAction_FigCDSMoveToActionProtocol_GetTargetPosition(uint64_t a1, _OWORD *a2)
{
  *a2 = *(_OWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  return 0;
}

uint64_t FigCDSMoveToAction_FigCDSMoveToActionProtocol_SetTargetPosition(double a1, double a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(double *)(DerivedStorage + 8) = a1;
  *(double *)(DerivedStorage + 16) = a2;
  return 0;
}

uint64_t RegisterFigCDSMoveToActionBaseType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

CFTypeRef FigCDSMoveToActionBaseCopyFormattingDesc()
{
  return CFRetain(@"[FigCDSMoveToAction]");
}

uint64_t FigFairplayPSSHAtomParserStartServer()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2000000000;
  int v6 = 0;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __FigFairplayPSSHAtomParserStartServer_block_invoke;
  block[3] = &unk_1E5798820;
  block[4] = &v3;
  if (FigFairplayPSSHAtomParserStartServer_sFairplayPSSHAtomParserServerSetupOnce != -1) {
    dispatch_once(&FigFairplayPSSHAtomParserStartServer_sFairplayPSSHAtomParserServerSetupOnce, block);
  }
  uint64_t v0 = *((unsigned int *)v4 + 6);
  _Block_object_dispose(&v3, 8);
  return v0;
}

uint64_t __FigFairplayPSSHAtomParserStartServer_block_invoke(uint64_t a1)
{
  uint64_t result = FigXPCServerStart();
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t figFairplayPSSHAtom_replyingMessageHandler()
{
  uint64_t OpCode = FigXPCMessageGetOpCode();
  if (OpCode) {
    return OpCode;
  }
  else {
    return 4294951138;
  }
}

uint64_t FigPhotoCompressionSessionGetTypeID()
{
  return MEMORY[0x1F410D5D8]();
}

uint64_t FigPhotoCompressionSessionCreate()
{
  return MEMORY[0x1F410D5B8]();
}

uint64_t FigPhotoCompressionSessionOpenEmptyContainer()
{
  return MEMORY[0x1F410D5F0]();
}

uint64_t FigPhotoCompressionSessionOpenExistingContainer()
{
  return MEMORY[0x1F410D5F8]();
}

uint64_t FigPhotoCompressionSessionOpenExistingContainerForModificationF()
{
  return MEMORY[0x1F410D608]();
}

uint64_t FigPhotoCompressionSessionOpenExistingContainerForModification()
{
  return MEMORY[0x1F410D600]();
}

uint64_t FigPhotoCompressionSessionIsContainerOpen()
{
  return MEMORY[0x1F410D5E8]();
}

uint64_t FigPhotoCompressionSessionCloseContainer()
{
  return MEMORY[0x1F410D5A8]();
}

uint64_t FigPhotoCompressionSessionCloseContainerAndCopyBacking()
{
  return MEMORY[0x1F410D5B0]();
}

uint64_t FigPhotoCompressionSessionAddImage()
{
  return MEMORY[0x1F410D568]();
}

uint64_t FigPhotoCompressionSessionAddCompressedImage()
{
  return MEMORY[0x1F410D530]();
}

uint64_t FigPhotoCompressionSessionAddCompressedMovie()
{
  return MEMORY[0x1F410D538]();
}

uint64_t FigPhotoCompressionSessionAddThumbnail()
{
  return MEMORY[0x1F410D590]();
}

uint64_t FigPhotoCompressionSessionAddAuxiliaryImage()
{
  return MEMORY[0x1F410D510]();
}

uint64_t FigPhotoCompressionSessionAddAuxiliaryImageFromDictionaryRepresentation()
{
  return MEMORY[0x1F410D520]();
}

uint64_t FigPhotoCompressionSessionAddExif ()
{
  return MEMORY[0x1F410D550]();
}

uint64_t FigPhotoCompressionSessionAddXMP()
{
  return MEMORY[0x1F410D5A0]();
}

uint64_t FigPhotoCompressionSessionAddDebugMetadata()
{
  return MEMORY[0x1F410D548]();
}

uint64_t FigPhotoCompressionSessionAddMetadataFromImageProperties()
{
  return MEMORY[0x1F410D588]();
}

uint64_t FigPhotoCompressionSessionStartImageSequence()
{
  return MEMORY[0x1F410D618]();
}

uint64_t FigPhotoCompressionSessionAddImageToSequence()
{
  return CMPhotoCompressionSessionAddImageToSequence();
}

uint64_t FigPhotoCompressionSessionEndImageSequence()
{
  return MEMORY[0x1F410D5C8]();
}

uint64_t FigPhotoCompressionSessionReleaseHardwareResources()
{
  return MEMORY[0x1F410D610]();
}

uint64_t FigPhotoCompressionSessionDiscardCaches()
{
  return MEMORY[0x1F410D5C0]();
}

uint64_t FigPhotoCompressionSessionInvalidate()
{
  return MEMORY[0x1F410D5E0]();
}

uint64_t FigVideoTargetXPCRemoteGetObjectID(uint64_t a1, void *a2)
{
  if (a1 && a2) {
    return remoteXPCVideoTarget_GetObjectID(a1, a2);
  }
  else {
    return FigSignalErrorAt();
  }
}

uint64_t remoteXPCVideoTarget_GetObjectID(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2 || *(unsigned char *)(DerivedStorage + 8))
  {
    return FigSignalErrorAt();
  }
  else
  {
    *a2 = *(void *)DerivedStorage;
    return 0;
  }
}

uint64_t remoteXPCVideoTargetClient_EnsureClientEstablished()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2000000000;
  int v6 = 0;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __remoteXPCVideoTargetClient_EnsureClientEstablished_block_invoke;
  block[3] = &unk_1E5798880;
  block[4] = &v3;
  if (remoteXPCVideoTargetClient_EnsureClientEstablished_gVideoTargetRemoteClientSetupOnce != -1) {
    dispatch_once(&remoteXPCVideoTargetClient_EnsureClientEstablished_gVideoTargetRemoteClientSetupOnce, block);
  }
  uint64_t v0 = *((unsigned int *)v4 + 6);
  _Block_object_dispose(&v3, 8);
  return v0;
}

uint64_t FigVideoTargetCreateRemoteWithVideoReceiverEndpointID(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  if (!a2)
  {
    uint64_t v11 = FigSignalErrorAt();
    goto LABEL_12;
  }
  if (!a4) {
    goto LABEL_15;
  }
  uint64_t VideoTargetObject = remoteXPCVideoTargetClient_EnsureClientEstablished();
  if (VideoTargetObject) {
    goto LABEL_16;
  }
  uint64_t VideoTargetObject = remoteXPCVideoTarget_CreateVideoTargetObject();
  if (VideoTargetObject) {
    goto LABEL_16;
  }
  uint64_t VideoTargetObject = FigXPCCreateBasicMessage();
  if (VideoTargetObject) {
    goto LABEL_16;
  }
  xpc_object_t value = xpc_dictionary_get_value(a2, (const char *)kFigVideoReceiverEndpoint);
  if (!value || (size_t v8 = value, MEMORY[0x199712630]() != MEMORY[0x1E4F145A0]))
  {
LABEL_15:
    uint64_t VideoTargetObject = FigSignalErrorAt();
LABEL_16:
    uint64_t v11 = VideoTargetObject;
    goto LABEL_12;
  }
  xpc_dictionary_set_value(0, "ReceiverEndpoint", v8);
  uint64_t VideoTargetObject = FigXPCMessageSetCFDictionary();
  if (VideoTargetObject) {
    goto LABEL_16;
  }
  uint64_t VideoTargetObject = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (VideoTargetObject) {
    goto LABEL_16;
  }
  uint64_t uint64 = xpc_dictionary_get_uint64(0, (const char *)*MEMORY[0x1E4F20280]);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(void *)uint64_t DerivedStorage = uint64;
  *(unsigned char *)(DerivedStorage + 8) = 0;
  uint64_t v11 = FigXPCRemoteClientAssociateObject();
  if (!v11) {
    *a4 = 0;
  }
LABEL_12:
  FigXPCRelease();
  FigXPCRelease();
  if (gVideoTargetRemoteClient) {
    FigXPCRemoteClientKillServerOnTimeout();
  }
  return v11;
}

uint64_t remoteXPCVideoTarget_CreateVideoTargetObject()
{
  FigVideoTargetGetClassID();
  uint64_t result = CMDerivedObjectCreate();
  if (!result) {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t FigVideoTargetCreateRemoteSharingVideoReceiverFromRemoteVideoTarget(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  xpc_object_t v12 = 0;
  xpc_object_t xdict = 0;
  uint64_t value = 0;
  if (!a2)
  {
    uint64_t v9 = FigSignalErrorAt();
    goto LABEL_11;
  }
  if (!a4)
  {
    uint64_t VideoTargetObject = FigSignalErrorAt();
LABEL_16:
    uint64_t v9 = VideoTargetObject;
    goto LABEL_11;
  }
  uint64_t VideoTargetObject = remoteXPCVideoTargetClient_EnsureClientEstablished();
  if (VideoTargetObject) {
    goto LABEL_16;
  }
  uint64_t VideoTargetObject = remoteXPCVideoTarget_CreateVideoTargetObject();
  if (VideoTargetObject) {
    goto LABEL_16;
  }
  uint64_t VideoTargetObject = FigXPCCreateBasicMessage();
  if (VideoTargetObject) {
    goto LABEL_16;
  }
  uint64_t VideoTargetObject = remoteXPCVideoTarget_GetObjectID(a2, &value);
  if (VideoTargetObject) {
    goto LABEL_16;
  }
  xpc_dictionary_set_uint64(xdict, "VideoTargetWithReceiverToShare", value);
  uint64_t VideoTargetObject = FigXPCMessageSetCFDictionary();
  if (VideoTargetObject) {
    goto LABEL_16;
  }
  uint64_t VideoTargetObject = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (VideoTargetObject) {
    goto LABEL_16;
  }
  uint64_t uint64 = xpc_dictionary_get_uint64(v12, (const char *)*MEMORY[0x1E4F20280]);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(void *)uint64_t DerivedStorage = uint64;
  *(unsigned char *)(DerivedStorage + 8) = 0;
  uint64_t v9 = FigXPCRemoteClientAssociateObject();
  if (!v9) {
    *a4 = 0;
  }
LABEL_11:
  FigXPCRelease();
  FigXPCRelease();
  if (gVideoTargetRemoteClient) {
    FigXPCRemoteClientKillServerOnTimeout();
  }
  return v9;
}

uint64_t remoteXPCVideoTargetClient_DeadConnectionCallback(const void *a1)
{
  CFTypeID v1 = CFGetTypeID(a1);
  uint64_t result = FigVideoTargetGetTypeID();
  if (v1 == result)
  {
    uint64_t result = CMBaseObjectGetDerivedStorage();
    *(unsigned char *)(result + 8) = 1;
  }
  return result;
}

uint64_t remoteXPCVideoTarget_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigXPCRemoteClientDisassociateObject();
  if (!*(unsigned char *)(DerivedStorage + 8) && !FigXPCCreateBasicMessage()) {
    FigXPCRemoteClientSendAsyncMessage();
  }
  FigXPCRelease();
  return FigXPCRemoteClientKillServerOnTimeout();
}

__CFString *remoteXPCVideoTarget_CopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = CFGetAllocator(a1);
  CFMutableArrayRef Mutable = CFStringCreateMutable(v3, 0);
  CFIndex v5 = CFGetRetainCount(a1);
  if (*(unsigned char *)(DerivedStorage + 8)) {
    int v6 = " SERVER DIED";
  }
  else {
    int v6 = "";
  }
  CFStringAppendFormat(Mutable, 0, @"<FigVideoTargetRemote(XPC) %p retainCount: %ld ObjectID: %016llx%s>", a1, v5, *(void *)DerivedStorage, v6);
  return Mutable;
}

uint64_t remoteXPCVideoTarget_CopyProperty(uint64_t a1, CFTypeRef cf1, uint64_t a3, CFTypeRef *a4)
{
  uint64_t v9 = 0;
  if (!cf1 || !a4)
  {
    uint64_t ObjectID = FigSignalErrorAt();
LABEL_7:
    uint64_t v6 = ObjectID;
    goto LABEL_8;
  }
  *a4 = 0;
  if (!CFEqual(cf1, @"InstanceType"))
  {
    uint64_t ObjectID = remoteXPCVideoTarget_GetObjectID(a1, &v9);
    if (!ObjectID) {
      uint64_t ObjectID = FigXPCSendStdCopyPropertyMessage();
    }
    goto LABEL_7;
  }
  uint64_t v6 = 0;
  *a4 = CFRetain(@"Remote");
LABEL_8:
  FigXPCRemoteClientKillServerOnTimeout();
  return v6;
}

uint64_t remoteXPCVideoTarget_SetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0;
  if (a2 && a3)
  {
    uint64_t ObjectID = remoteXPCVideoTarget_GetObjectID(a1, &v6);
    if (!ObjectID) {
      uint64_t ObjectID = FigXPCSendStdSetPropertyMessage();
    }
  }
  else
  {
    uint64_t ObjectID = FigSignalErrorAt();
  }
  uint64_t v4 = ObjectID;
  FigXPCRemoteClientKillServerOnTimeout();
  return v4;
}

uint64_t remoteXPCVideoTarget_setActive(uint64_t a1, int a2)
{
  CMBaseObjectGetDerivedStorage();
  uint64_t v3 = FigXPCCreateBasicMessage();
  if (!v3)
  {
    xpc_dictionary_set_BOOL(0, "Active", a2 != 0);
    uint64_t v3 = FigXPCRemoteClientSendSyncMessage();
  }
  uint64_t v4 = v3;
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v4;
}

uint64_t FigTTMLDocumentWriterCreateStyleOptimizer(uint64_t a1, const void *a2, void *a3)
{
  if (a2 && a3)
  {
    FigTTMLDocumentWriterGetClassID();
    uint64_t v5 = CMDerivedObjectCreate();
    if (!v5)
    {
      FigTTMLDocumentWriterGetCMBaseObject(0);
      uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
      *uint64_t DerivedStorage = CFRetain(a2);
      *a3 = 0;
    }
    return v5;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t figTTMLDocumentWriterStyleOptimizer_Invalidate()
{
  return 0;
}

void figTTMLDocumentWriterStyleOptimizer_Finalize(uint64_t a1)
{
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)DerivedStorage) {
    CFRelease(*(CFTypeRef *)DerivedStorage);
  }
  uint64_t v2 = *(const void **)(DerivedStorage + 8);
  if (v2)
  {
    CFRelease(v2);
  }
}

CFStringRef figTTMLDocumentWriterStyleOptimizer_CopyDebugDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"figTTMLDocumentWriterStyleOptimizer[%p]", a1);
}

uint64_t figTTMLDocumentWriterStyleOptimizer_StartElement(uint64_t a1, int a2)
{
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  uint64_t v4 = FigTTMLDocumentWriterElementCreate(*MEMORY[0x1E4F1CF80], a2, *(void *)(DerivedStorage + 16), (uint64_t *)&cf);
  if (v4)
  {
    CFTypeRef v7 = cf;
    if (!cf) {
      return v4;
    }
    goto LABEL_9;
  }
  uint64_t v5 = *(void *)(DerivedStorage + 16);
  if (v5)
  {
    FigTTMLDocumentWriterElementAddChildElement(v5, cf);
  }
  else
  {
    if (cf) {
      CFTypeRef v6 = CFRetain(cf);
    }
    else {
      CFTypeRef v6 = 0;
    }
    *(void *)(DerivedStorage + 8) = v6;
  }
  CFTypeRef v7 = cf;
  *(void *)(DerivedStorage + 16) = cf;
  if (v7) {
LABEL_9:
  }
    CFRelease(v7);
  return v4;
}

uint64_t figTTMLDocumentWriterStyleOptimizer_EndElement(uint64_t a1)
{
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v2 = DerivedStorage;
  uint64_t v3 = *(void *)(DerivedStorage + 16);
  if (v3 != *(void *)(DerivedStorage + 8)) {
    goto LABEL_12;
  }
  Childrenint64_t Count = FigTTMLDocumentWriterElementGetChildrenCount(*(void *)(DerivedStorage + 16));
  if (ChildrenCount >= 1)
  {
    CFIndex v5 = ChildrenCount;
    CFIndex v6 = 0;
    while (1)
    {
      ChildAtIndex = (void *)FigTTMLDocumentWriterElementGetChildAtIndex(v3, v6);
      if (ChildAtIndex)
      {
        size_t v8 = ChildAtIndex;
        CFTypeID v9 = CFGetTypeID(ChildAtIndex);
        if (v9 == FigTTMLDocumentWriterElementGetTypeID()
          && FigTTMLDocumentWriterElementGetElementType((uint64_t)v8) == 2)
        {
          break;
        }
      }
      if (v5 == ++v6) {
        goto LABEL_10;
      }
    }
    CFArrayRef v10 = (const __CFArray *)FigTTMLGetInheritableStyleAttributeNames();
    v13.CFIndex length = CFArrayGetCount(v10);
    v13.location = 0;
    CFArrayApplyFunction(v10, v13, (CFArrayApplierFunction)optimizeStyleAttributesAux, v8);
  }
LABEL_10:
  uint64_t result = FigTTMLDocumentWriterElementWriteTree(*(CFArrayRef **)(v2 + 8), *(void *)v2);
  if (!result)
  {
    uint64_t v3 = *(void *)(v2 + 16);
LABEL_12:
    uint64_t ParentElement = FigTTMLDocumentWriterElementGetParentElement(v3);
    uint64_t result = 0;
    *(void *)(v2 + 16) = ParentElement;
  }
  return result;
}

uint64_t figTTMLDocumentWriterStyleOptimizer_AddCaptionData(uint64_t a1, const void *a2)
{
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigTTMLDocumentWriterElementAddChildElement(*(void *)(DerivedStorage + 16), a2);
  return 0;
}

uint64_t figTTMLDocumentWriterStyleOptimizer_SetAttribute(uint64_t a1, const void *a2, const void *a3)
{
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigTTMLDocumentWriterElementSetAttribute(*(void *)(DerivedStorage + 16), a2, a3);
  return 0;
}

uint64_t figTTMLDocumentWriterStyleOptimizer_Flush(uint64_t a1)
{
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (DerivedStorage[2]) {
    return 4294950721;
  }
  uint64_t v3 = *DerivedStorage;

  return FigTTMLDocumentWriterFlush(v3);
}

void optimizeStyleAttributesAux(const void *a1, uint64_t a2)
{
  CFDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], 0);
  Childrenint64_t Count = FigTTMLDocumentWriterElementGetChildrenCount(a2);
  CFTypeRef v6 = (CFTypeRef)*MEMORY[0x1E4F1D260];
  if (ChildrenCount >= 1)
  {
    CFIndex v7 = 0;
    while (1)
    {
      ChildAtIndex = FigTTMLDocumentWriterElementGetChildAtIndex(a2, v7);
      if (ChildAtIndex)
      {
        CFTypeID v9 = ChildAtIndex;
        CFTypeID v10 = CFGetTypeID(ChildAtIndex);
        if (v10 == FigCaptionDataGetTypeID()) {
          goto LABEL_5;
        }
        CFTypeID v14 = CFGetTypeID(v9);
        if (v14 == FigTTMLDocumentWriterElementGetTypeID()) {
          break;
        }
      }
LABEL_10:
      if (ChildrenCount == ++v7) {
        goto LABEL_11;
      }
    }
    optimizeStyleAttributesAux(a1, v9);
    CFTypeRef Attribute = FigTTMLDocumentWriterElementGetAttribute((uint64_t)v9, a1);
    if (Attribute)
    {
      uint64_t v16 = Attribute;
      uint64_t v13 = (uint64_t)CFDictionaryGetValue(Mutable, Attribute) + 1;
      uint64_t v11 = Mutable;
      xpc_object_t v12 = v16;
    }
    else
    {
LABEL_5:
      uint64_t v11 = Mutable;
      xpc_object_t v12 = v6;
      uint64_t v13 = 0x7FFFFFFFLL;
    }
    CFDictionarySetValue(v11, v12, (const void *)v13);
    goto LABEL_10;
  }
LABEL_11:
  cf2[0] = v6;
  cf2[1] = 0;
  CFDictionaryApplyFunction(Mutable, (CFDictionaryApplierFunction)findMostCommonStyleValue, cf2);
  if (cf2[0] != v6)
  {
    CFDictionaryRef v17 = FigTTMLDocumentWriterElementGetAttribute(a2, a1);
    if (!v17 || CFEqual(v17, cf2[0]))
    {
      FigTTMLDocumentWriterElementSetAttribute(a2, a1, cf2[0]);
      if (ChildrenCount >= 1)
      {
        for (CFIndex i = 0; i != ChildrenCount; ++i)
        {
          unsigned int v19 = FigTTMLDocumentWriterElementGetChildAtIndex(a2, i);
          if (v19)
          {
            uint64_t v20 = (uint64_t)v19;
            CFTypeID v21 = CFGetTypeID(v19);
            if (v21 == FigTTMLDocumentWriterElementGetTypeID())
            {
              FigTTMLDocumentWriterElementGetAttribute(v20, a1);
              if (FigCFEqual()) {
                FigTTMLDocumentWriterElementRemoveAttribute(v20, a1);
              }
            }
          }
        }
      }
    }
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
}

uint64_t findMostCommonStyleValue(uint64_t result, int a2, uint64_t a3)
{
  if (*(_DWORD *)(a3 + 8) < a2)
  {
    *(void *)a3 = result;
    *(_DWORD *)(a3 + 8) = a2;
  }
  return result;
}

uint64_t FigPlaybackCoordinatorGetClassID()
{
  if (FigPlaybackCoordinatorGetClassID_onceToken != -1) {
    dispatch_once_f(&FigPlaybackCoordinatorGetClassID_onceToken, 0, (dispatch_function_t)RegisterFigPlaybackCoordinatorBaseTypeOnce);
  }
  return sFigPlaybackCoordinatorClassID;
}

uint64_t RegisterFigPlaybackCoordinatorBaseTypeOnce()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t FigPlaybackCoordinatorGetTypeID()
{
  if (FigPlaybackCoordinatorGetClassID_onceToken != -1) {
    dispatch_once_f(&FigPlaybackCoordinatorGetClassID_onceToken, 0, (dispatch_function_t)RegisterFigPlaybackCoordinatorBaseTypeOnce);
  }

  return CMBaseClassGetCFTypeID();
}

CFStringRef PlaybackCoordinatorCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigPlaybackCoordinator %p]", a1);
}

uint64_t __FigSFBSKeepForegroundAssertionGetTypeID_block_invoke()
{
  uint64_t result = _CFRuntimeRegisterClass();
  FigSFBSKeepForegroundAssertionGetTypeID_sFigSFBSKeepForegroundAssertionCFTypeID TypeID = result;
  return result;
}

uint64_t figSFBSKFAssertion_init(uint64_t result)
{
  *(void *)(result + 16) = 0;
  return result;
}

uint64_t figSFBSKFAssertion_finalize()
{
  if (dword_1E9350FE0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return result;
}

CFStringRef figSFBSKFAssertion_copyDebugDesc(const void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  CFIndex v3 = CFGetRetainCount(a1);
  return CFStringCreateWithFormat(v2, 0, @"<FigSFBSKeepForegroundAssertion %p retainCount: %ld>", a1, v3);
}

uint64_t FigSFBSKeepForegroundAssertionCreate(uint64_t a1, uint64_t a2, int a3, uint64_t *a4)
{
  if (!a4) {
    goto LABEL_8;
  }
  if (FigSFBSKeepForegroundAssertionGetTypeID_sRegisterFigSFBSKeepForegroundAssertionTypeOnce != -1) {
    dispatch_once(&FigSFBSKeepForegroundAssertionGetTypeID_sRegisterFigSFBSKeepForegroundAssertionTypeOnce, &__block_literal_global_30);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    uint64_t v7 = Instance;
    *(_DWORD *)(Instance + 16) = a3;
    if (dword_1E9350FE0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    *a4 = v7;
    return 0;
  }
  else
  {
LABEL_8:
    return FigSignalErrorAt();
  }
}

uint64_t FigImageQueueCreateForCoreVideo(uint64_t a1, void *a2)
{
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (a2)
  {
    FigImageQueueGetClassID();
    uint64_t v3 = CMDerivedObjectCreate();
    if (!v3)
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      uint64_t v6 = FigReentrantMutexCreate();
      *(void *)(DerivedStorage + 16) = DerivedStorage + 16;
      *(void *)(DerivedStorage + 24) = DerivedStorage + 16;
      *(void *)(DerivedStorage + 8) = v6;
      *(void *)(DerivedStorage + 144) = 1;
      *(void *)(DerivedStorage + 152) = 0x100000001;
      *(void *)(DerivedStorage + 1128) = FigSimpleMutexCreate();
      *(_DWORD *)(DerivedStorage + 1124) = 1;
      *a2 = 0;
    }
    return v3;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigImageQueueCreateForDiscarding(uint64_t a1, void *a2)
{
  uint64_t v6 = 0;
  uint64_t v3 = FigImageQueueCreateForCoreVideo(a1, &v6);
  if (!v3)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    *(unsigned char *)(DerivedStorage + 1176) = 1;
    *(_DWORD *)(DerivedStorage + 1124) = 2;
  }
  *a2 = v6;
  return v3;
}

uint64_t piqcv_finalize(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  piqUnhookVisualContext(a1);
  piqDrop(a1, MEMORY[0x1E4F1F9F8]);
  if (*(void *)(DerivedStorage + 1184))
  {
    uint64_t CMBaseObject = FigImageQueueGaugeGetCMBaseObject();
    if (CMBaseObject)
    {
      uint64_t v4 = CMBaseObject;
      uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v6 = v5 ? v5 : 0;
      uint64_t v7 = *(void (**)(uint64_t))(v6 + 24);
      if (v7) {
        v7(v4);
      }
    }
    size_t v8 = *(const void **)(DerivedStorage + 1184);
    if (v8)
    {
      CFRelease(v8);
      *(void *)(DerivedStorage + 1184) = 0;
    }
  }
  FigSimpleMutexDestroy();
  uint64_t result = *(void *)(DerivedStorage + 1128);
  if (result)
  {
    return FigSimpleMutexDestroy();
  }
  return result;
}

uint64_t piqcv_copyProperty(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(@"FigImageQueueProperty_CurrentFrameRate", a2))
  {
    float valuePtr = FigImageQueueFrameRateGetCurrent((void *)(DerivedStorage + 1128));
    size_t v8 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberFloat32Type, &valuePtr);
LABEL_10:
    uint64_t v11 = 0;
    goto LABEL_11;
  }
  if (CFEqual(@"FigImageQueueProperty_FirstImageEnqueued", a2))
  {
    CFTypeID v9 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
    int v10 = *(unsigned __int8 *)(DerivedStorage + 172);
LABEL_7:
    if (!v10) {
      CFTypeID v9 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
    }
    size_t v8 = CFRetain(*v9);
    goto LABEL_10;
  }
  if (CFEqual(@"FigImageQueueProperty_LimitCapacityToOneFrame", a2))
  {
    CFTypeID v9 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
    int v10 = *(unsigned __int8 *)(DerivedStorage + 170);
    goto LABEL_7;
  }
  if (!CFEqual(@"ImageQueueGauge", a2)) {
    return 4294954512;
  }
  size_t v8 = *(const void **)(DerivedStorage + 1184);
  if (v8)
  {
    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v13 = (uint64_t *)(DerivedStorage + 1184);
    uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
    uint64_t v11 = FigImageQueueGaugeCreate(AllocatorForMedia, 0, (void *)(DerivedStorage + 1184));
    if (!v11)
    {
      uint64_t v15 = *v13;
      FigImageQueueGetSafeDisplayDuration(a1, (uint64_t)&v16);
      uint64_t v11 = FigImageQueueGaugeSetSafeDisplayDuration(v15, &v16);
    }
    size_t v8 = (const void *)*v13;
    if (!*v13) {
      goto LABEL_11;
    }
  }
  size_t v8 = CFRetain(v8);
LABEL_11:
  *a4 = v8;
  return v11;
}

uint64_t piqcv_setProperty(uint64_t a1, const void *a2, CFTypeRef a3)
{
  void (*v12)(long long *__return_ptr, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(CFTypeRef, long long *);
  long long v16;
  uint64_t v17;
  long long v18;
  uint64_t v19;
  uint64_t vars8;

  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(@"FigImageQueueProperty_LimitCapacityToOneFrame", a2))
  {
    if (a3)
    {
      CFTypeID v7 = CFGetTypeID(a3);
      if (v7 == CFBooleanGetTypeID())
      {
        uint64_t result = 0;
        *(unsigned char *)(DerivedStorage + 170) = *MEMORY[0x1E4F1CFD0] == (void)a3;
        return result;
      }
    }
LABEL_8:
    return FigSignalErrorAt();
  }
  if (!CFEqual(@"ImageQueueGauge", a2)) {
    return 4294954512;
  }
  CFTypeRef v9 = *(CFTypeRef *)(DerivedStorage + 1184);
  if (v9 && v9 != a3) {
    goto LABEL_8;
  }
  if (v9)
  {
    CFRelease(v9);
    *(void *)(DerivedStorage + 1184) = 0;
  }
  if (a3) {
    a3 = CFRetain(a3);
  }
  *(void *)(DerivedStorage + 1184) = a3;
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  xpc_object_t v12 = *(void (**)(long long *__return_ptr, uint64_t))(v11 + 80);
  if (v12)
  {
    v12(&v16, a1);
  }
  else
  {
    long long v16 = *MEMORY[0x1E4F1F9F8];
    CFDictionaryRef v17 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  }
  uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v13) {
    CFTypeID v14 = v13;
  }
  else {
    CFTypeID v14 = 0;
  }
  uint64_t v15 = *(uint64_t (**)(CFTypeRef, long long *))(v14 + 8);
  if (!v15) {
    return 4294954514;
  }
  uint64_t v18 = v16;
  unsigned int v19 = v17;
  return v15(a3, &v18);
}

void piqUnhookVisualContext(uint64_t a1)
{
  uint64_t DerivedStorage = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
  CFTypeRef v3 = *DerivedStorage;
  if (*DerivedStorage)
  {
    uint64_t v4 = DerivedStorage;
    uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v5) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = 0;
    }
    CFTypeID v7 = *(void (**)(CFTypeRef, void, void, void, void, uint64_t))(v6 + 112);
    if (v7) {
      v7(v3, 0, 0, 0, 0, a1);
    }
    if (*v4)
    {
      CFRelease(*v4);
      *uint64_t v4 = 0;
    }
  }
}

uint64_t piqDrop(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = DerivedStorage + 16;
  uint64_t v4 = *(uint64_t **)(DerivedStorage + 16);
  if (v4 == (uint64_t *)(DerivedStorage + 16))
  {
    return 0;
  }
  else
  {
    uint64_t v6 = (int *)DerivedStorage;
    unsigned __int8 v7 = 0;
    do
    {
      if (*(unsigned char *)(a2 + 12))
      {
        uint64_t v8 = *v4;
        if (v8 == v5) {
          return v7;
        }
        CFTypeRef v9 = (CMTime *)(v8 + 16);
        if (v6[39] < 1)
        {
          CMTime time1 = *v9;
          CMTime time2 = *(CMTime *)a2;
          if (CMTimeCompare(&time1, &time2) < 0) {
            return v7;
          }
        }
        else
        {
          CMTime time1 = *v9;
          CMTime time2 = *(CMTime *)a2;
          if (CMTimeCompare(&time1, &time2) >= 1) {
            return v7;
          }
        }
      }
      uint64_t v10 = *(void *)v5;
      if (*(unsigned char *)(*(void *)v5 + 68))
      {
        ++v6[263];
      }
      else if (*(unsigned char *)(a2 + 12))
      {
        unsigned int v11 = v6[56];
        if (v11 <= 0x63)
        {
          CMTime time1 = *(CMTime *)(v10 + 16);
          CMTimeConvertScale(&v13, &time1, 1000, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
          v6[v6[56] + 62] = v13.value;
          unsigned int v11 = v6[56];
        }
        v6[56] = v11 + 1;
      }
      else
      {
        ++v6[264];
      }
      piqRemoveItemFromQueue((void *)v10);
      uint64_t v4 = *(uint64_t **)v5;
      unsigned __int8 v7 = 1;
    }
    while (*(void *)v5 != v5);
  }
  return v7;
}

void piqRemoveItemFromQueue(void *a1)
{
  CFAllocatorRef v2 = (void *)a1[1];
  void *v2 = *a1;
  *(void *)(*a1 + 8) = v2;
  CFTypeRef v3 = (const void *)a1[6];
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (const void *)a1[7];
  if (v4) {
    CFRelease(v4);
  }

  free(a1);
}

uint64_t piqcv_setOutputVisualContext(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (!*DerivedStorage)
  {
    if (a2)
    {
      uint64_t v8 = DerivedStorage;
      CFTypeRef v9 = CFRetain(a2);
      *uint64_t v8 = v9;
      uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v11 = v10 ? v10 : 0;
      xpc_object_t v12 = *(void (**)(CFTypeRef, uint64_t, uint64_t (*)(uint64_t, uint64_t), uint64_t (*)(uint64_t, uint64_t, CMTime *, char, void *, void *, uint64_t, uint64_t), uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, BOOL *, uint64_t), uint64_t))(v11 + 112);
      if (v12) {
        v12(v9, a3, piqIsNewImageAvailable, piqCopyImageForTime, piqGetEarliestSequentialImageTimeAfterTime, a1);
      }
    }
    return 0;
  }
  if (!a2)
  {
    piqUnhookVisualContext(a1);
    return 0;
  }
  if ((const void *)*DerivedStorage == a2) {
    return 0;
  }

  return FigSignalErrorAt();
}

uint64_t piqcv_flush(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 8));
  CFTypeRef v3 = *(void **)(DerivedStorage + 16);
  *(void *)(DerivedStorage + 16) = *v3;
  *(void *)(*v3 + 8) = DerivedStorage + 16;
  uint64_t v4 = (long long *)MEMORY[0x1E4F1F9F8];
  int v5 = piqDrop(a1, MEMORY[0x1E4F1F9F8]);
  *CFTypeRef v3 = DerivedStorage + 16;
  v3[1] = DerivedStorage + 16;
  *(void *)(DerivedStorage + 24) = v3;
  *(void *)v3[1] = v3;
  ++*(void *)(DerivedStorage + 144);
  *(_WORD *)(DerivedStorage + 171) = 257;
  uint64_t v6 = *((void *)v4 + 2);
  *(void *)(DerivedStorage + 192) = v6;
  long long v7 = *v4;
  *(_OWORD *)(DerivedStorage + 176) = *v4;
  *(void *)(DerivedStorage + 216) = v6;
  *(_OWORD *)(DerivedStorage + 200) = v7;
  *(_DWORD *)(DerivedStorage + 88) = 0;
  MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 8));
  if (v5) {
    piqcv_postOccupancyChanged(a1);
  }
  if (*(void *)DerivedStorage)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
  }
  return 0;
}

uint64_t piqcv_canEnqueueImage()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 170)) {
    return *(void *)(DerivedStorage + 16) == DerivedStorage + 16;
  }
  else {
    return 99;
  }
}

uint64_t piqcv_enqueueImage(uint64_t a1, __CVBuffer *a2, const void *a3, long long *a4, uint64_t a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2 && (*((unsigned char *)a4 + 12) & 1) != 0)
  {
    uint64_t v12 = DerivedStorage;
    if (*(unsigned char *)(DerivedStorage + 1176)) {
      return 0;
    }
    MEMORY[0x19970E290](*(void *)(DerivedStorage + 8));
    uint64_t v13 = *(void *)(v12 + 1184);
    if (v13)
    {
      uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v15 = v14 ? v14 : 0;
      long long v16 = *(void (**)(uint64_t, void))(v15 + 24);
      if (v16) {
        v16(v13, 0);
      }
    }
    if (a5)
    {
      ++*(void *)(v12 + 144);
      uint64_t v17 = MEMORY[0x1E4F1F9F8];
      long long v18 = *MEMORY[0x1E4F1F9F8];
      *(_OWORD *)(v12 + 176) = *MEMORY[0x1E4F1F9F8];
      uint64_t v19 = *(void *)(v17 + 16);
      *(void *)(v12 + 192) = v19;
      *(_OWORD *)(v12 + 200) = v18;
      *(void *)(v12 + 216) = v19;
    }
    if ((*(unsigned char *)(v12 + 188) & 1) == 0) {
      goto LABEL_16;
    }
    uint64_t v26 = (_OWORD *)(v12 + 176);
    if (*(int *)(v12 + 156) < 1)
    {
      *(_OWORD *)&time1.uint64_t value = *v26;
      time1.CMTimeEpoch epoch = *(void *)(v12 + 192);
      CMTime v38 = *(CMTime *)a4;
      if ((CMTimeCompare(&time1, &v38) & 0x80000000) == 0)
      {
LABEL_16:
        if (*(unsigned char *)(v12 + 171))
        {
          a5 = a5 | 1;
          *(unsigned char *)(v12 + 171) = 0;
        }
        uint64_t v20 = malloc_type_malloc(0x48uLL, 0x10600402FA6333DuLL);
        if (v20)
        {
          CFTypeID v21 = v20;
          v20[6] = CVBufferRetain(a2);
          v21[7] = a3;
          if (a3) {
            CFRetain(a3);
          }
          long long v22 = *a4;
          v21[4] = *((void *)a4 + 2);
          *((_OWORD *)v21 + 1) = v22;
          v21[5] = *(void *)(v12 + 144);
          *((_DWORD *)v21 + 16) = a5 & 3;
          *((_WORD *)v21 + 34) = 0;
          uint64_t v23 = CMBaseObjectGetDerivedStorage();
          for (CFIndex i = *(uint64_t **)(v23 + 16); i != (uint64_t *)(v23 + 16); CFIndex i = (uint64_t *)*i)
          {
            if (i[5] < *(void *)(v23 + 144))
            {
              CFTypeRef v25 = (uint64_t *)i[1];
              if (*((unsigned char *)i + 68)) {
                ++*(_DWORD *)(v23 + 1052);
              }
              else {
                ++*(_DWORD *)(v23 + 1056);
              }
              piqRemoveItemFromQueue(i);
              CFIndex i = v25;
            }
          }
          uint64_t v28 = (void *)(v12 + 16);
          CFTypeRef v27 = *(void **)(v12 + 16);
          if (v27 == (void *)(v12 + 16))
          {
            uint64_t v30 = (void *)(v12 + 16);
          }
          else
          {
            CFTypeRef v29 = v21 + 2;
            uint64_t v30 = (void *)(v12 + 16);
            do
            {
              CFTypeRef v31 = (CMTime *)(v27 + 2);
              if (*(int *)(v12 + 156) < 1)
              {
                *(_OWORD *)&time1.uint64_t value = *v29;
                time1.CMTimeEpoch epoch = v21[4];
                CMTime v38 = *v31;
                if (CMTimeCompare(&time1, &v38) >= 1) {
                  break;
                }
              }
              else
              {
                *(_OWORD *)&time1.uint64_t value = *v29;
                time1.CMTimeEpoch epoch = v21[4];
                CMTime v38 = *v31;
                if (CMTimeCompare(&time1, &v38) < 0) {
                  break;
                }
              }
              uint64_t v30 = (void *)*v30;
              CFTypeRef v27 = (void *)*v30;
            }
            while ((void *)*v30 != v28);
            uint64_t v28 = (void *)*v30;
          }
          *CFTypeID v21 = v28;
          v21[1] = v30;
          v28[1] = v21;
          *(void *)v21[1] = v21;
          CMTime time1 = *(CMTime *)a4;
          int IsImageTimeSequentialSafe = piqIsImageTimeSequentialSafe(a1, a5, &time1);
          if (IsImageTimeSequentialSafe) {
            *((unsigned char *)v21 + 69) = 1;
          }
          MEMORY[0x19970E2B0](*(void *)(v12 + 8));
          uint64_t v34 = *(void *)v12;
          if (*(void *)v12)
          {
            CMTime v38 = *(CMTime *)a4;
            uint64_t v35 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v35) {
              uint64_t v36 = v35;
            }
            else {
              uint64_t v36 = 0;
            }
            uint64_t v37 = *(void (**)(uint64_t, CMTime *, uint64_t))(v36 + 80);
            if (v37)
            {
              CMTime time1 = v38;
              v37(v34, &time1, a5);
            }
            if (IsImageTimeSequentialSafe)
            {
              CMTime time1 = *(CMTime *)a4;
              piqReportImageAvailableSequential(a1, &time1, a5);
            }
          }
          if (!*(unsigned char *)(v12 + 168))
          {
            CMNotificationCenterGetDefaultLocalCenter();
            CMNotificationCenterPostNotification();
          }
          if (!*(unsigned char *)(v12 + 172))
          {
            *(unsigned char *)(v12 + 172) = 1;
            CMNotificationCenterGetDefaultLocalCenter();
            CMNotificationCenterPostNotification();
          }
          piqcv_postOccupancyChanged(a1);
          return 0;
        }
        uint64_t v32 = 4294954484;
LABEL_43:
        MEMORY[0x19970E2B0](*(void *)(v12 + 8));
        return v32;
      }
    }
    else
    {
      *(_OWORD *)&time1.uint64_t value = *v26;
      time1.CMTimeEpoch epoch = *(void *)(v12 + 192);
      CMTime v38 = *(CMTime *)a4;
      if (CMTimeCompare(&time1, &v38) <= 0) {
        goto LABEL_16;
      }
    }
    uint64_t v32 = 0;
    ++*(_DWORD *)(v12 + 1048);
    goto LABEL_43;
  }

  return FigSignalErrorAt();
}

uint64_t piqcv_setAsync(uint64_t a1, char a2)
{
  *(unsigned char *)(CMBaseObjectGetDerivedStorage() + 168) = a2;
  return 0;
}

uint64_t piqcv_setDirection(uint64_t a1, float a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = DerivedStorage;
  int v6 = *(_DWORD *)(DerivedStorage + 152);
  if (a2 >= 0.0) {
    int v7 = 0;
  }
  else {
    int v7 = -1;
  }
  if (a2 > 0.0) {
    int v7 = 1;
  }
  if (v7) {
    BOOL v8 = 1;
  }
  else {
    BOOL v8 = v6 == 0;
  }
  if (v8)
  {
    *(_DWORD *)(DerivedStorage + 152) = v7;
    if (v7)
    {
      if (*(_DWORD *)(DerivedStorage + 156) != v7)
      {
        *(_DWORD *)(DerivedStorage + 156) = v7;
        if (v6 || *(void *)(DerivedStorage + 160) == *(void *)(DerivedStorage + 144)) {
          piqcv_flush(a1);
        }
      }
    }
  }
  else
  {
    *(void *)(DerivedStorage + 160) = *(void *)(DerivedStorage + 144);
    *(_DWORD *)(DerivedStorage + 152) = 0;
  }
  *(unsigned char *)(v5 + 169) = a2 == 1.0;
  return 0;
}

uint64_t piqcv_setUpcomingImageInfo(uint64_t a1, unsigned int a2, long long *a3, uint64_t a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  memset(&v25[32], 0, 24);
  if (a2 >= 4
    || (uint64_t v9 = DerivedStorage, a2 == 2) && ((*((_DWORD *)a3 + 3) & 0x1D) != 1 || (*(_DWORD *)(a4 + 12) & 0x1D) != 1))
  {
    return FigSignalErrorAt();
  }
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 8));
  long long v10 = *a3;
  uint64_t v11 = *(uint64_t **)(v9 + 16);
  *(void *)(v9 + 108) = *((void *)a3 + 2);
  *(_OWORD *)(v9 + 92) = v10;
  uint64_t v12 = *(void *)(a4 + 16);
  *(_OWORD *)(v9 + 116) = *(_OWORD *)a4;
  *(void *)(v9 + 132) = v12;
  *(_DWORD *)(v9 + 88) = a2;
  int v13 = 1;
  while (v11 != (uint64_t *)(v9 + 16))
  {
    if (*((unsigned char *)v11 + 68)) {
      goto LABEL_10;
    }
    if (*((unsigned char *)v11 + 69)
      || (int v14 = *((_DWORD *)v11 + 16),
          *(CMTime *)CFTypeRef v25 = *(CMTime *)(v11 + 2),
          !piqIsImageTimeSequentialSafe(a1, v14, (CMTime *)v25)))
    {
      int v13 = 0;
LABEL_10:
      uint64_t v11 = (uint64_t *)*v11;
    }
    else
    {
      *(CMTime *)&v25[32] = *(CMTime *)(v11 + 2);
      uint64_t v15 = *((unsigned int *)v11 + 16);
      int v13 = 1;
      *((unsigned char *)v11 + 69) = 1;
      MEMORY[0x19970E2B0](*(void *)(v9 + 8));
      *(CMTime *)CFTypeRef v25 = *(CMTime *)&v25[32];
      piqReportImageAvailableSequential(a1, (CMTime *)v25, v15);
      MEMORY[0x19970E290](*(void *)(v9 + 8));
      uint64_t v11 = *(uint64_t **)(v9 + 16);
    }
  }
  MEMORY[0x19970E2B0](*(void *)(v9 + 8));
  if (a2 == 3)
  {
    if (v13)
    {
      uint64_t v17 = *(void *)v9;
      if (*(void *)v9)
      {
        uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v18) {
          uint64_t v19 = v18;
        }
        else {
          uint64_t v19 = 0;
        }
        uint64_t v23 = *(void (**)(uint64_t))(v19 + 96);
        if (v23) {
          v23(v17);
        }
        *(unsigned char *)(v9 + 173) = 1;
      }
    }
LABEL_30:
    *(unsigned char *)(v9 + 174) = 0;
  }
  else
  {
    *(unsigned char *)(v9 + 173) = 0;
    if (a2 != 1) {
      goto LABEL_30;
    }
    if (v13)
    {
      uint64_t v20 = *(void *)v9;
      if (*(void *)v9)
      {
        uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v21) {
          uint64_t v22 = v21;
        }
        else {
          uint64_t v22 = 0;
        }
        uint64_t v24 = *(void (**)(uint64_t))(v22 + 104);
        if (v24) {
          v24(v20);
        }
        *(unsigned char *)(v9 + 174) = 1;
      }
    }
  }
  return 0;
}

uint64_t piqcv_getOccupancyInfo(uint64_t a1, _DWORD *a2, CMTime *a3, CMTime *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMTime v15 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  CMTime v14 = v15;
  ++*(_DWORD *)(DerivedStorage + 1068);
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 8));
  BOOL v8 = *(uint64_t **)(DerivedStorage + 16);
  if (v8 != (uint64_t *)(DerivedStorage + 16))
  {
    int v9 = 0;
    while (*((unsigned char *)v8 + 68))
    {
LABEL_12:
      BOOL v8 = (uint64_t *)*v8;
      if (v8 == (uint64_t *)(DerivedStorage + 16)) {
        goto LABEL_15;
      }
    }
    long long v10 = v8 + 2;
    if (v9)
    {
      *(_OWORD *)&time1.uint64_t value = *v10;
      time1.CMTimeEpoch epoch = v8[4];
      CMTime v12 = v15;
      if (CMTimeCompare(&time1, &v12) < 0)
      {
        *(_OWORD *)&v15.uint64_t value = *v10;
        v15.CMTimeEpoch epoch = v8[4];
      }
      CMTime time1 = v14;
      *(_OWORD *)&v12.uint64_t value = *v10;
      v12.CMTimeEpoch epoch = v8[4];
      if ((CMTimeCompare(&time1, &v12) & 0x80000000) == 0) {
        goto LABEL_11;
      }
    }
    else
    {
      *(_OWORD *)&v15.uint64_t value = *v10;
      v15.CMTimeEpoch epoch = v8[4];
    }
    *(_OWORD *)&v14.uint64_t value = *v10;
    v14.CMTimeEpoch epoch = v8[4];
LABEL_11:
    ++v9;
    goto LABEL_12;
  }
  int v9 = 0;
LABEL_15:
  MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 8));
  if (a2) {
    *a2 = v9;
  }
  if (a3) {
    *a3 = v15;
  }
  if (a4) {
    *a4 = v14;
  }
  return 0;
}

uint64_t piqcv_copyPerformanceDictionary(uint64_t a1, __CFDictionary **a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 8));
  int v4 = -1;
  uint64_t v5 = (void *)(DerivedStorage + 16);
  do
  {
    uint64_t v5 = (void *)*v5;
    ++v4;
  }
  while (v5 != (void *)(DerivedStorage + 16));
  MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 8));
  *(_DWORD *)(DerivedStorage + 1060) = v4;
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];

  return PIQCopyPerformanceDictionaryForInstanceStatistics(v6, (int *)(DerivedStorage + 224), a2);
}

CMTime *piqcv_getSafeDisplayDuration@<X0>(CMTime *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v5 = *(_DWORD *)(DerivedStorage + 156);
  int v6 = *(_DWORD *)(DerivedStorage + 88);
  CMTime v9 = *(CMTime *)(DerivedStorage + 92);
  CMTime v8 = *(CMTime *)(DerivedStorage + 116);
  return FigImageQueueCalculateSafeDisplayDuration(a1, v5, v6, &v9, &v8, a2);
}

uint64_t piqcv_postNotification()
{
  if (!*(void *)CMBaseObjectGetDerivedStorage()) {
    return 0;
  }
  CMNotificationCenterGetDefaultLocalCenter();

  return CMNotificationCenterPostNotification();
}

uint64_t piqcv_flushFramesFollowingCurrent(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  piqcv_flush(a1);
  uint64_t v3 = *(void *)(DerivedStorage + 1184);
  if (v3)
  {
    uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v4) {
      uint64_t v5 = v4;
    }
    else {
      uint64_t v5 = 0;
    }
    int v6 = *(void (**)(uint64_t, uint64_t))(v5 + 24);
    if (v6) {
      v6(v3, 1);
    }
  }
  return 0;
}

uint64_t piqIsNewImageAvailable(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if ((*(unsigned char *)(a2 + 12) & 1) == 0)
  {
    FigSignalErrorAt();
    return 0;
  }
  uint64_t v5 = DerivedStorage;
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 8));
  uint64_t v6 = v5 + 16;
  for (CFIndex i = *(uint64_t **)(v5 + 16); i != (uint64_t *)v6; CFIndex i = (uint64_t *)*i)
  {
    if (*((unsigned char *)i + 68)) {
      continue;
    }
    if ((i[8] & 2) != 0) {
      goto LABEL_17;
    }
    CMTime v8 = i + 2;
    if (*(int *)(v5 + 156) < 1)
    {
      *(_OWORD *)&time1.uint64_t value = *v8;
      time1.CMTimeEpoch epoch = i[4];
      CMTime v11 = *(CMTime *)a2;
      if (CMTimeCompare(&time1, &v11) < 0) {
        continue;
      }
    }
    else
    {
      *(_OWORD *)&time1.uint64_t value = *v8;
      time1.CMTimeEpoch epoch = i[4];
      CMTime v11 = *(CMTime *)a2;
      if (CMTimeCompare(&time1, &v11) >= 1) {
        continue;
      }
    }
    if (*i == v6) {
      goto LABEL_17;
    }
    CMTime v9 = (CMTime *)(*i + 16);
    if (*(int *)(v5 + 156) < 1)
    {
      CMTime time1 = *(CMTime *)a2;
      CMTime v11 = *v9;
      if (CMTimeCompare(&time1, &v11) > 0)
      {
LABEL_17:
        uint64_t v4 = 1;
        goto LABEL_19;
      }
    }
    else
    {
      CMTime time1 = *(CMTime *)a2;
      CMTime v11 = *v9;
      if (CMTimeCompare(&time1, &v11) < 0) {
        goto LABEL_17;
      }
    }
  }
  uint64_t v4 = 0;
LABEL_19:
  MEMORY[0x19970E2B0](*(void *)(v5 + 8));
  return v4;
}

uint64_t piqCopyImageForTime(uint64_t a1, uint64_t a2, CMTime *a3, char a4, void *a5, void *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v83 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if ((a3->flags & 1) == 0)
  {
    return FigSignalErrorAt();
  }
  uint64_t v15 = DerivedStorage;
  uint64_t v69 = a7;
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 8));
  uint64_t v17 = v15 + 16;
  long long v16 = *(uint64_t **)(v15 + 16);
  if (v16 == (uint64_t *)(v15 + 16))
  {
    int v70 = 0;
    int v44 = 0;
    goto LABEL_76;
  }
  double v66 = a5;
  unsigned int v67 = a6;
  uint64_t v68 = a8;
  int v70 = 0;
  while (1)
  {
    int v71 = *((_DWORD *)v16 + 16);
    uint64_t v18 = v16 + 2;
    if (*(int *)(v15 + 156) < 1)
    {
      CMTimeValue v81 = *v18;
      CMTimeScale v82 = *((_DWORD *)v16 + 6);
      CMTimeFlags v25 = *((_DWORD *)v16 + 7);
      CMTimeEpoch v26 = v16[4];
      CMTimeValue value = a3->value;
      CMTimeFlags flags = a3->flags;
      CMTimeScale timescale = a3->timescale;
      CMTimeEpoch epoch = a3->epoch;
      if ((v25 & 0x1F) != 3 && (flags & 0x1F) != 3) {
        goto LABEL_16;
      }
      memset(&time1, 0, sizeof(time1));
      lhs.CMTimeValue value = v81;
      lhs.CMTimeScale timescale = v82;
      lhs.CMTimeFlags flags = v25;
      lhs.CMTimeEpoch epoch = v26;
      rhs.CMTimeValue value = a3->value;
      rhs.CMTimeScale timescale = a3->timescale;
      rhs.CMTimeFlags flags = flags;
      rhs.CMTimeEpoch epoch = epoch;
      CMTimeSubtract(&time, &lhs, &rhs);
      CMTimeAbsoluteValue(&time1, &time);
      CMTimeMake(&lhs, 1, 1000000000);
      CMTime rhs = time1;
      if (CMTimeCompare(&rhs, &lhs) < 1)
      {
        int32_t v29 = 0;
      }
      else
      {
LABEL_16:
        time1.CMTimeValue value = v81;
        time1.CMTimeScale timescale = v82;
        time1.CMTimeFlags flags = v25;
        time1.CMTimeEpoch epoch = v26;
        rhs.CMTimeValue value = value;
        rhs.CMTimeScale timescale = timescale;
        rhs.CMTimeFlags flags = flags;
        rhs.CMTimeEpoch epoch = epoch;
        int32_t v29 = CMTimeCompare(&time1, &rhs);
      }
      BOOL v24 = v29 >= 0;
    }
    else
    {
      CMTimeValue v81 = *v18;
      CMTimeScale v82 = *((_DWORD *)v16 + 6);
      CMTimeFlags v19 = *((_DWORD *)v16 + 7);
      CMTimeEpoch v20 = v16[4];
      CMTimeValue value = a3->value;
      CMTimeFlags v21 = a3->flags;
      CMTimeScale timescale = a3->timescale;
      CMTimeEpoch v22 = a3->epoch;
      if ((v19 & 0x1F) != 3 && (v21 & 0x1F) != 3) {
        goto LABEL_11;
      }
      memset(&time1, 0, sizeof(time1));
      lhs.CMTimeValue value = v81;
      lhs.CMTimeScale timescale = v82;
      lhs.CMTimeFlags flags = v19;
      lhs.CMTimeEpoch epoch = v20;
      rhs.CMTimeValue value = a3->value;
      rhs.CMTimeScale timescale = a3->timescale;
      rhs.CMTimeFlags flags = v21;
      rhs.CMTimeEpoch epoch = v22;
      CMTimeSubtract(&time, &lhs, &rhs);
      CMTimeAbsoluteValue(&time1, &time);
      CMTimeMake(&lhs, 1, 1000000000);
      CMTime rhs = time1;
      if (CMTimeCompare(&rhs, &lhs) < 1)
      {
        int32_t v23 = 0;
      }
      else
      {
LABEL_11:
        time1.CMTimeValue value = v81;
        time1.CMTimeScale timescale = v82;
        time1.CMTimeFlags flags = v19;
        time1.CMTimeEpoch epoch = v20;
        rhs.CMTimeValue value = value;
        rhs.CMTimeScale timescale = timescale;
        rhs.CMTimeFlags flags = v21;
        rhs.CMTimeEpoch epoch = v22;
        int32_t v23 = CMTimeCompare(&time1, &rhs);
      }
      BOOL v24 = v23 < 1;
    }
    uint64_t v30 = *v16;
    if (*v16 == v17) {
      break;
    }
    CFTypeRef v31 = (CMTimeValue *)(v30 + 16);
    if (*(int *)(v15 + 156) < 1)
    {
      CMTimeValue v81 = a3->value;
      CMTimeFlags v38 = a3->flags;
      CMTimeScale v82 = a3->timescale;
      CMTimeEpoch v39 = a3->epoch;
      CMTimeValue value = *v31;
      CMTimeScale timescale = *(_DWORD *)(v30 + 24);
      CMTimeFlags v40 = *(_DWORD *)(v30 + 28);
      CMTimeEpoch v41 = *(void *)(v30 + 32);
      if ((v38 & 0x1F) != 3 && (*(_DWORD *)(v30 + 28) & 0x1F) != 3) {
        goto LABEL_29;
      }
      memset(&time1, 0, sizeof(time1));
      lhs.CMTimeValue value = a3->value;
      lhs.CMTimeScale timescale = a3->timescale;
      lhs.CMTimeFlags flags = v38;
      lhs.CMTimeEpoch epoch = v39;
      rhs.CMTimeValue value = value;
      rhs.CMTimeScale timescale = timescale;
      rhs.CMTimeFlags flags = v40;
      rhs.CMTimeEpoch epoch = v41;
      CMTimeSubtract(&time, &lhs, &rhs);
      CMTimeAbsoluteValue(&time1, &time);
      CMTimeMake(&lhs, 1, 1000000000);
      CMTime rhs = time1;
      if (CMTimeCompare(&rhs, &lhs) < 1)
      {
        int32_t v42 = 0;
      }
      else
      {
LABEL_29:
        time1.CMTimeValue value = v81;
        time1.CMTimeScale timescale = v82;
        time1.CMTimeFlags flags = v38;
        time1.CMTimeEpoch epoch = v39;
        rhs.CMTimeValue value = value;
        rhs.CMTimeScale timescale = timescale;
        rhs.CMTimeFlags flags = v40;
        rhs.CMTimeEpoch epoch = v41;
        int32_t v42 = CMTimeCompare(&time1, &rhs);
      }
      BOOL v37 = v42 > 0;
      if (!v24)
      {
LABEL_47:
        if ((v71 & 2) == 0) {
          goto LABEL_48;
        }
        goto LABEL_42;
      }
    }
    else
    {
      CMTimeValue v81 = a3->value;
      CMTimeFlags v32 = a3->flags;
      CMTimeScale v82 = a3->timescale;
      CMTimeEpoch v33 = a3->epoch;
      CMTimeValue value = *v31;
      CMTimeScale timescale = *(_DWORD *)(v30 + 24);
      CMTimeFlags v34 = *(_DWORD *)(v30 + 28);
      CMTimeEpoch v35 = *(void *)(v30 + 32);
      if ((v32 & 0x1F) != 3 && (*(_DWORD *)(v30 + 28) & 0x1F) != 3) {
        goto LABEL_23;
      }
      memset(&time1, 0, sizeof(time1));
      lhs.CMTimeValue value = a3->value;
      lhs.CMTimeScale timescale = a3->timescale;
      lhs.CMTimeFlags flags = v32;
      lhs.CMTimeEpoch epoch = v33;
      rhs.CMTimeValue value = value;
      rhs.CMTimeScale timescale = timescale;
      rhs.CMTimeFlags flags = v34;
      rhs.CMTimeEpoch epoch = v35;
      CMTimeSubtract(&time, &lhs, &rhs);
      CMTimeAbsoluteValue(&time1, &time);
      CMTimeMake(&lhs, 1, 1000000000);
      CMTime rhs = time1;
      if (CMTimeCompare(&rhs, &lhs) < 1)
      {
        unsigned int v36 = 0;
      }
      else
      {
LABEL_23:
        time1.CMTimeValue value = v81;
        time1.CMTimeScale timescale = v82;
        time1.CMTimeFlags flags = v32;
        time1.CMTimeEpoch epoch = v33;
        rhs.CMTimeValue value = value;
        rhs.CMTimeScale timescale = timescale;
        rhs.CMTimeFlags flags = v34;
        rhs.CMTimeEpoch epoch = v35;
        unsigned int v36 = CMTimeCompare(&time1, &rhs);
      }
      BOOL v37 = v36 >> 31;
      if (!v24) {
        goto LABEL_47;
      }
    }
    if (v37) {
      goto LABEL_42;
    }
    uint64_t v43 = (uint64_t *)*v16;
    if (a4)
    {
      piqRemoveItemFromQueue(v16);
      int v70 = 1;
    }
    long long v16 = v43;
    if (v43 == (uint64_t *)v17) {
      goto LABEL_48;
    }
  }
  if (((v24 | ((v71 & 2) >> 1)) & 1) == 0)
  {
LABEL_48:
    int v44 = 0;
    goto LABEL_75;
  }
LABEL_42:
  if (v69)
  {
    long long v45 = *(_OWORD *)v18;
    *(void *)(v69 + 16) = v16[4];
    *(_OWORD *)uint64_t v69 = v45;
  }
  if (FigIsNullPixelBuffer((__CVBuffer *)v16[6]))
  {
    if (v66) {
      void *v66 = 0;
    }
  }
  else if (v66)
  {
    void *v66 = v16[6];
    CFNumberRef v46 = (const void *)v16[6];
    if (v46) {
      CFRetain(v46);
    }
  }
  if (v67)
  {
    void *v67 = v16[7];
    uint64_t v47 = (const void *)v16[7];
    if (v47) {
      CFRetain(v47);
    }
  }
  if ((a4 & 4) != 0 || *((unsigned char *)v16 + 68))
  {
    int v44 = 0;
  }
  else
  {
    if (*(unsigned char *)(v15 + 168))
    {
      if (*(unsigned char *)(v15 + 169))
      {
        memset(&time1, 0, sizeof(time1));
        CMTime time = *a3;
        *(_OWORD *)&lhs.CMTimeValue value = *(_OWORD *)v18;
        lhs.CMTimeEpoch epoch = v16[4];
        CMTimeSubtract(&time1, &time, &lhs);
        CMTimeMake(&time2, 1, 60);
        CMTime time = time1;
        if ((CMTimeCompare(&time, &time2) & 0x80000000) == 0)
        {
          unsigned int v50 = *(_DWORD *)(v15 + 240);
          if (v50 <= 0x63)
          {
            *(_OWORD *)&time.CMTimeValue value = *(_OWORD *)v18;
            time.CMTimeEpoch epoch = v16[4];
            CMTimeConvertScale(&v73, &time, 1000, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
            *(_DWORD *)(v15 + 4 * *(int *)(v15 + 240) + 648) = v73.value;
            unsigned int v50 = *(_DWORD *)(v15 + 240);
          }
          *(_DWORD *)(v15 + 240) = v50 + 1;
        }
      }
    }
    int v70 = 1;
    *((unsigned char *)v16 + 68) = 1;
    int v44 = 1;
  }
  if (a4)
  {
    CMTime v48 = (_OWORD *)(v15 + 176);
    if (*(unsigned char *)(v15 + 188))
    {
      if (*(int *)(v15 + 156) < 1)
      {
        *(_OWORD *)&time1.CMTimeValue value = *v48;
        time1.CMTimeEpoch epoch = *(void *)(v15 + 192);
        *(_OWORD *)&time.CMTimeValue value = *(_OWORD *)v18;
        time.CMTimeEpoch epoch = v16[4];
        if (CMTimeCompare(&time1, &time) < 1) {
          goto LABEL_73;
        }
      }
      else
      {
        *(_OWORD *)&time1.CMTimeValue value = *v48;
        time1.CMTimeEpoch epoch = *(void *)(v15 + 192);
        *(_OWORD *)&time.CMTimeValue value = *(_OWORD *)v18;
        time.CMTimeEpoch epoch = v16[4];
        if ((CMTimeCompare(&time1, &time) & 0x80000000) == 0) {
          goto LABEL_73;
        }
      }
    }
    if (v16[5] == *(void *)(v15 + 144))
    {
      long long v49 = *(_OWORD *)v18;
      *(void *)(v15 + 192) = v16[4];
      *CMTime v48 = v49;
    }
  }
LABEL_73:
  if ((a4 & 2) != 0)
  {
    piqRemoveItemFromQueue(v16);
    int v70 = 1;
  }
LABEL_75:
  a8 = v68;
LABEL_76:
  int v51 = *(_DWORD *)(v15 + 88);
  if (v51 == 3)
  {
    if (*(unsigned char *)(v15 + 173))
    {
      char v52 = 1;
      goto LABEL_82;
    }
    uint64_t v57 = v15 + 16;
    do
    {
      uint64_t v57 = *(void *)v57;
      BOOL v58 = v57 == v17 || v57 == 0;
      char v52 = !v58;
    }
    while (!v58 && *(unsigned char *)(v57 + 68));
  }
  else
  {
    char v52 = 1;
  }
  if (v51 == 1 && !*(unsigned char *)(v15 + 174))
  {
    uint64_t v59 = v15 + 16;
    do
    {
      uint64_t v59 = *(void *)v59;
      BOOL v60 = v59 == v17 || v59 == 0;
      char v53 = !v60;
    }
    while (!v60 && *(unsigned char *)(v59 + 68));
    goto LABEL_83;
  }
LABEL_82:
  char v53 = 1;
LABEL_83:
  MEMORY[0x19970E2B0](*(void *)(v15 + 8));
  if (v70) {
    piqcv_postOccupancyChanged(a8);
  }
  if ((v52 & 1) == 0)
  {
    uint64_t v54 = *(void *)v15;
    if (*(void *)v15)
    {
      *(unsigned char *)(v15 + 173) = 1;
      uint64_t v55 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v56 = v55 ? v55 : 0;
      char v61 = *(void (**)(uint64_t))(v56 + 96);
      if (v61) {
        v61(v54);
      }
    }
  }
  if ((v53 & 1) == 0)
  {
    uint64_t v62 = *(void *)v15;
    if (*(void *)v15)
    {
      *(unsigned char *)(v15 + 174) = 1;
      uint64_t v63 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v64 = v63 ? v63 : 0;
      double v65 = *(void (**)(uint64_t))(v64 + 104);
      if (v65) {
        v65(v62);
      }
    }
  }
  if (v44) {
    FigImageQueueFrameRateIncrementCounter(v15 + 1128);
  }
  return 0;
}

uint64_t piqGetEarliestSequentialImageTimeAfterTime(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, BOOL *a5, uint64_t a6)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  long long v20 = *MEMORY[0x1E4F1F9F8];
  uint64_t v21 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 8));
  uint64_t v12 = DerivedStorage + 16;
  CMTime v11 = *(uint64_t **)(DerivedStorage + 16);
  if (*(unsigned char *)(a3 + 12))
  {
    while (v11 != (uint64_t *)v12)
    {
      long long v16 = v11 + 2;
      if (*(int *)(DerivedStorage + 156) < 1)
      {
        *(_OWORD *)&time1.CMTimeValue value = *v16;
        time1.CMTimeEpoch epoch = v11[4];
        CMTime v18 = *(CMTime *)a3;
        if (CMTimeCompare(&time1, &v18) < 0) {
          goto LABEL_2;
        }
      }
      else
      {
        *(_OWORD *)&time1.CMTimeValue value = *v16;
        time1.CMTimeEpoch epoch = v11[4];
        CMTime v18 = *(CMTime *)a3;
        if (CMTimeCompare(&time1, &v18) > 0) {
          goto LABEL_2;
        }
      }
      CMTime v11 = (uint64_t *)*v11;
    }
    goto LABEL_11;
  }
LABEL_2:
  if (v11 == (uint64_t *)v12)
  {
LABEL_11:
    BOOL v15 = *(_DWORD *)(DerivedStorage + 88) == 3;
    goto LABEL_13;
  }
  int v13 = *((_DWORD *)v11 + 16);
  CMTime time1 = *(CMTime *)(v11 + 2);
  if (piqIsImageTimeSequentialSafe(a6, v13, &time1))
  {
    uint64_t v14 = 0;
    BOOL v15 = 0;
    long long v20 = *((_OWORD *)v11 + 1);
    uint64_t v21 = v11[4];
    goto LABEL_14;
  }
  BOOL v15 = 0;
LABEL_13:
  uint64_t v14 = 4294954483;
LABEL_14:
  MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 8));
  if (a4)
  {
    *(_OWORD *)a4 = v20;
    *(void *)(a4 + 16) = v21;
  }
  if (a5) {
    *a5 = v15;
  }
  return v14;
}

uint64_t piqcv_postOccupancyChanged(uint64_t a1)
{
  void (*v7)(long long *__return_ptr, uint64_t);
  uint64_t VTable;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, long long *);
  long long v13;
  uint64_t v14;
  long long v15;
  uint64_t v16;

  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMNotificationCenterGetDefaultLocalCenter();
  uint64_t result = CMNotificationCenterPostNotification();
  uint64_t v4 = *(void *)(DerivedStorage + 1184);
  if (v4)
  {
    uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v5) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = 0;
    }
    int v7 = *(void (**)(long long *__return_ptr, uint64_t))(v6 + 80);
    if (v7)
    {
      v7(&v13, a1);
    }
    else
    {
      int v13 = *MEMORY[0x1E4F1F9F8];
      uint64_t v14 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
    }
    uint64_t VTable = CMBaseObjectGetVTable();
    long long v10 = *(void *)(VTable + 16);
    uint64_t result = VTable + 16;
    CMTime v9 = v10;
    if (v10) {
      CMTime v11 = v9;
    }
    else {
      CMTime v11 = 0;
    }
    uint64_t v12 = *(uint64_t (**)(uint64_t, long long *))(v11 + 8);
    if (v12)
    {
      BOOL v15 = v13;
      long long v16 = v14;
      return v12(v4, &v15);
    }
  }
  return result;
}

uint64_t piqIsImageTimeSequentialSafe(uint64_t a1, char a2, CMTime *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if ((a2 & 2) == 0)
  {
    int v6 = *(_DWORD *)(DerivedStorage + 88);
    if (!v6) {
      return 0;
    }
    if (v6 == 2)
    {
      if (*(int *)(DerivedStorage + 156) < 1)
      {
        CMTime time1 = *a3;
        CMTime v8 = *(CMTime *)(DerivedStorage + 116);
        if (CMTimeCompare(&time1, &v8) <= 0) {
          return 0;
        }
      }
      else
      {
        CMTime time1 = *a3;
        CMTime v8 = *(CMTime *)(DerivedStorage + 92);
        if ((CMTimeCompare(&time1, &v8) & 0x80000000) == 0) {
          return 0;
        }
      }
    }
  }
  return 1;
}

uint64_t piqReportImageAvailableSequential(uint64_t a1, CMTime *a2, uint64_t a3)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  int v6 = (uint64_t *)result;
  uint64_t v7 = result + 200;
  if (*(unsigned char *)(result + 212))
  {
    *(_OWORD *)&time1.CMTimeValue value = *(_OWORD *)v7;
    time1.CMTimeEpoch epoch = *(void *)(result + 216);
    CMTime v15 = *a2;
    uint64_t result = CMTimeCompare(&time1, &v15);
  }
  long long v8 = *(_OWORD *)&a2->value;
  *(void *)(v7 + 16) = a2->epoch;
  *(_OWORD *)uint64_t v7 = v8;
  uint64_t v9 = *v6;
  if (v9)
  {
    CMTime v15 = *a2;
    uint64_t VTable = CMBaseObjectGetVTable();
    uint64_t v12 = *(void *)(VTable + 16);
    uint64_t result = VTable + 16;
    uint64_t v11 = v12;
    if (v12) {
      uint64_t v13 = v11;
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = *(uint64_t (**)(uint64_t, CMTime *, uint64_t))(v13 + 88);
    if (v14)
    {
      CMTime time1 = v15;
      return v14(v9, &time1, a3);
    }
  }
  return result;
}

__CFString *getFigFileTypeForFormatWriterFileFormatBits(char a1)
{
  CFTypeID v1 = kFigFileType_AppleM4A;
  CFAllocatorRef v2 = kFigFileType_3GPP;
  uint64_t v3 = kFigFileType_MPEG4;
  if ((a1 & 0x20) == 0) {
    uint64_t v3 = kFigFileType_QuickTimeMovie;
  }
  if ((a1 & 2) == 0) {
    CFAllocatorRef v2 = v3;
  }
  if ((a1 & 0xC) != 0) {
    CFAllocatorRef v2 = kFigFileType_AppleM4V;
  }
  if ((a1 & 0x10) == 0) {
    CFTypeID v1 = v2;
  }
  return *v1;
}

BOOL FigMovieFormatWriterCanFileTypeSupportMediaType(const void *a1, int a2, int a3)
{
  if (CFEqual(a1, @"QuickTimeMovie")) {
    return 1;
  }
  if (CFEqual(a1, @"MP4Family"))
  {
    BOOL result = 1;
    if (a2 <= 1936684397)
    {
      if (a2 == 1668047728) {
        return result;
      }
      int v7 = 1835365473;
      goto LABEL_8;
    }
    if (a2 == 1936684398 || a2 == 1986618469) {
      return result;
    }
    int v9 = 1952807028;
    goto LABEL_19;
  }
  if (CFEqual(a1, @"3GPFamily"))
  {
    if (a2 == 1936684398) {
      return 1;
    }
    if (a2 == 1952807028) {
      return a3 == 0;
    }
    int v9 = 1986618469;
LABEL_19:
    if (a2 != v9) {
      return 0;
    }
    return a3 == 0;
  }
  if (!CFEqual(a1, @"iTunesVideoFamily"))
  {
    if (CFEqual(a1, @"iTunesAudioFamily"))
    {
      if (a2 <= 1952807027)
      {
        BOOL result = 1;
        if (a2 == 1751216244) {
          return result;
        }
        int v8 = 1936684398;
        goto LABEL_10;
      }
      if (a2 != 1952807028 && a2 != 1986618469) {
        return 0;
      }
      BOOL v10 = a3 == 0;
    }
    else
    {
      BOOL v10 = CFEqual(a1, @"AppleImmersiveVideo") == 0;
    }
    return !v10;
  }
  BOOL result = 1;
  if (a2 > 1936684397)
  {
    if (a2 == 1936684398 || a2 == 1952807028) {
      return result;
    }
    int v8 = 1986618469;
    goto LABEL_10;
  }
  int v7 = 1668047728;
LABEL_8:
  if (a2 == v7) {
    return result;
  }
  int v8 = 1935832172;
LABEL_10:
  if (a2 != v8) {
    return 0;
  }
  return result;
}

BOOL FigMovieFormatWriterCanFileTypeSupportFormatDescription(const void *a1, CMFormatDescriptionRef desc, int a3)
{
  CMMediaType MediaType = CMFormatDescriptionGetMediaType(desc);
  BOOL result = FigMovieFormatWriterCanFileTypeSupportMediaType(a1, MediaType, a3);
  if (!result) {
    return result;
  }
  if (!a3 && MediaType == 1952807028)
  {
    if (CFEqual(a1, @"iTunesVideoFamily"))
    {
      FourCharCode MediaSubType = CMFormatDescriptionGetMediaSubType(desc);
      if (MediaSubType != 2021028980 && MediaSubType != 2004251764) {
        return 0;
      }
    }
  }
  signed int v9 = CMFormatDescriptionGetMediaSubType(desc);
  if (v9 <= 1903522656)
  {
    if (v9 != 1668641633)
    {
      int v10 = 1886745441;
LABEL_13:
      if (v9 != v10) {
        goto LABEL_16;
      }
    }
  }
  else if (v9 != 1903522657 && v9 != 2054517601)
  {
    int v10 = 1970495843;
    goto LABEL_13;
  }
  if (CFEqual(a1, @"iTunesAudioFamily")) {
    return 0;
  }
LABEL_16:
  CMBlockBufferRef blockBufferOut = 0;
  signed int v11 = CMFormatDescriptionGetMediaType(desc);
  FourCharCode v12 = CMFormatDescriptionGetMediaSubType(desc);
  char v13 = figMovieWriter_fileFormatBitsForFileType((uint64_t)a1);
  if (v11 <= 1935832171)
  {
    if (v11 <= 1751216243)
    {
      CFStringRef v15 = 0;
      if (v11 == 1635088502) {
        goto LABEL_56;
      }
      if (v11 == 1668047728)
      {
        int v16 = CMClosedCaptionFormatDescriptionCopyAsBigEndianClosedCaptionDescriptionBlockBuffer(0, desc, 0, &blockBufferOut);
        goto LABEL_57;
      }
    }
    else
    {
      if (v11 == 1751216244)
      {
        int v16 = CMHapticFormatDescriptionCopyAsBigEndianHapticDescriptionBlockBuffer();
        goto LABEL_57;
      }
      if (v11 == 1835365473)
      {
        int v16 = CMMetadataFormatDescriptionCopyAsBigEndianMetadataDescriptionBlockBuffer(0, desc, 0, &blockBufferOut);
        goto LABEL_57;
      }
      CFStringRef v15 = 0;
      if (v11 == 1885954932)
      {
LABEL_56:
        CFStringEncoding SystemEncoding = CFStringGetSystemEncoding();
        int v16 = CMVideoFormatDescriptionCopyAsBigEndianImageDescriptionBlockBuffer(0, desc, SystemEncoding, v15, &blockBufferOut);
        goto LABEL_57;
      }
    }
LABEL_45:
    int v16 = FigSignalErrorAt();
    goto LABEL_57;
  }
  if (v11 > 1952807027)
  {
    switch(v11)
    {
      case 1952807028:
        goto LABEL_40;
      case 1953325924:
        int v16 = CMTimeCodeFormatDescriptionCopyAsBigEndianTimeCodeDescriptionBlockBuffer(0, desc, 0, &blockBufferOut);
        goto LABEL_57;
      case 1986618469:
        if ((v13 & 2) != 0)
        {
          uint64_t v17 = (const __CFString **)MEMORY[0x1E4F1EF98];
        }
        else if ((v13 & 4) != 0)
        {
          uint64_t v17 = (const __CFString **)MEMORY[0x1E4F1EFA8];
        }
        else
        {
          if ((v13 & 1) == 0)
          {
            CFStringRef v15 = 0;
            goto LABEL_56;
          }
          if (v12 == 1635148595 || v12 == 1751479857 || v12 == 1685481573) {
            uint64_t v17 = (const __CFString **)MEMORY[0x1E4F21720];
          }
          else {
            uint64_t v17 = (const __CFString **)MEMORY[0x1E4F1EFA0];
          }
        }
        CFStringRef v15 = *v17;
        goto LABEL_56;
    }
    goto LABEL_45;
  }
  if (v11 == 1935832172)
  {
LABEL_40:
    int v16 = CMTextFormatDescriptionCopyAsBigEndianTextDescriptionBlockBuffer(0, desc, 0, &blockBufferOut);
    goto LABEL_57;
  }
  if (v11 != 1935893870)
  {
    if (v11 == 1936684398)
    {
      if ((v13 & 2) != 0)
      {
        CFStringRef v14 = (const __CFString *)*MEMORY[0x1E4F1F3B8];
      }
      else if (v13)
      {
        CFStringRef v14 = (const __CFString *)*MEMORY[0x1E4F1F3C0];
      }
      else
      {
        CFStringRef v14 = 0;
      }
      int v16 = CMAudioFormatDescriptionCopyAsBigEndianSoundDescriptionBlockBuffer(0, desc, v14, &blockBufferOut);
      goto LABEL_57;
    }
    goto LABEL_45;
  }
  int v16 = CMSceneFormatDescriptionCopyAsBigEndianSceneDescriptionBlockBuffer();
LABEL_57:
  int v19 = v16;
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  return v19 == 0;
}

uint64_t createFigMovieFormatWriterObject(const __CFAllocator *a1, int a2, CFDictionaryRef theDict, CFTypeRef *a4)
{
  CFTypeRef cf = 0;
  int v7 = @"com.apple.quicktime-movie";
  unsigned __int8 v32 = 0;
  if (theDict)
  {
    CFDictionaryRef Value = CFDictionaryGetValue(theDict, @"FileFormat");
    if (Value)
    {
      if (FigCFEqual())
      {
        int v10 = kFigFileType_QuickTimeMovie;
      }
      else if (FigCFEqual())
      {
        int v10 = kFigFileType_AppleM4A;
      }
      else if (FigCFEqual() || FigCFEqual())
      {
        int v10 = kFigFileType_AppleM4V;
      }
      else if (FigCFEqual())
      {
        int v10 = kFigFileType_3GPP;
      }
      else if (FigCFEqual() || FigCFEqual())
      {
        int v10 = kFigFileType_MPEG4;
      }
      else
      {
        if (!FigCFEqual())
        {
          uint64_t v20 = 4294954662;
          goto LABEL_30;
        }
        int v10 = kFigFileType_AppleImmersiveVideo;
      }
      int v7 = *v10;
      LODWORD(Value) = figMovieWriter_fileFormatBitsForFileType((uint64_t)Value);
    }
    CFStringRef v14 = CFDictionaryGetValue(theDict, @"WriteFileType");
    if (v14)
    {
      CFStringRef v15 = v14;
      CFTypeID TypeID = CFStringGetTypeID();
      if (TypeID == CFGetTypeID(v15))
      {
        if (CFEqual(@"WriteFileType_Never", v15))
        {
          int v13 = 1;
        }
        else
        {
          int v13 = 2;
          if (!CFEqual(@"WriteFileType_BeforeMediaData", v15))
          {
            if (CFEqual(@"WriteFileType_OnlyInWriteHeaderToByteStream", v15)) {
              int v13 = 3;
            }
            else {
              int v13 = 2;
            }
          }
        }
      }
      else
      {
        CFTypeID v17 = CFBooleanGetTypeID();
        int v13 = 2;
        if (v17 == CFGetTypeID(v15))
        {
          if (CFEqual(v15, (CFTypeRef)*MEMORY[0x1E4F1CFD0])) {
            int v13 = 2;
          }
          else {
            int v13 = 3;
          }
        }
      }
    }
    else
    {
      int v13 = 2;
    }
    CMTime v18 = CFDictionaryGetValue(theDict, @"AudioPrimingFormat");
    if (v18 && (int v19 = v18, !CFEqual(v18, @"AudioPrimingFormat_Manual")))
    {
      if (CFEqual(v19, @"AudioPrimingFormat_NoPrimingInfo"))
      {
        int v12 = 1;
      }
      else if (CFEqual(v19, @"AudioPrimingFormat_iTunesGaplessInfo"))
      {
        int v12 = 2;
      }
      else if (CFEqual(v19, @"AudioPrimingFormat_RollSampleGroup"))
      {
        int v12 = 3;
      }
      else if (CFEqual(v19, @"AudioPrimingFormat_DetermineFromSampleOrFileFormat"))
      {
        int v12 = 5;
      }
      else
      {
        int v12 = 0;
      }
    }
    else
    {
      int v12 = 0;
    }
    signed int v11 = CFDictionaryGetValue(theDict, @"FileTypeProfile");
    FigCFDictionaryGetBooleanIfPresent();
  }
  else
  {
    LODWORD(Value) = 0;
    signed int v11 = 0;
    int v12 = 0;
    int v13 = 2;
  }
  FigFormatWriterGetClassID();
  uint64_t v20 = CMDerivedObjectCreate();
  if (!v20)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    *(void *)uint64_t DerivedStorage = cf;
    *(_DWORD *)(DerivedStorage + 20) = 600;
    uint64_t v22 = MEMORY[0x1E4F1F9F8];
    *(_OWORD *)(DerivedStorage + 24) = *MEMORY[0x1E4F1F9F8];
    *(void *)(DerivedStorage + 40) = *(void *)(v22 + 16);
    CMTimeMake(&v31, 1, 2);
    *(CMTime *)(DerivedStorage + 48) = v31;
    CMTimeMake(&v31, 5, 1);
    *(CMTime *)(DerivedStorage + 72) = v31;
    uint64_t v23 = MEMORY[0x1E4F1FA48];
    *(_OWORD *)(DerivedStorage + 96) = *MEMORY[0x1E4F1FA48];
    *(void *)(DerivedStorage + 112) = *(void *)(v23 + 16);
    *(_DWORD *)(DerivedStorage + 268) = 0;
    *(_DWORD *)(DerivedStorage + 320) = v13;
    *(_DWORD *)(DerivedStorage + 324) = v12;
    *(unsigned char *)(DerivedStorage + 16) = v32;
    *(unsigned char *)(DerivedStorage + 334) = 1;
    if (v7) {
      CFTypeRef v24 = CFRetain(v7);
    }
    else {
      CFTypeRef v24 = 0;
    }
    *(void *)(DerivedStorage + 712) = v24;
    if (v11) {
      CFTypeRef v25 = CFRetain(v11);
    }
    else {
      CFTypeRef v25 = 0;
    }
    *(void *)(DerivedStorage + 720) = v25;
    *(_DWORD *)(DerivedStorage + 684) = Value;
    *(_DWORD *)(DerivedStorage + 376) = 1;
    *(void *)(DerivedStorage + 360) = -1;
    *(void *)(DerivedStorage + 520) = FigSimpleMutexCreate();
    *(void *)(DerivedStorage + 336) = FigSimpleMutexCreate();
    if (a2 | v32) {
      *(unsigned char *)(DerivedStorage + 18) = 1;
    }
    *(void *)(DerivedStorage + 568) = FigSemaphoreCreate();
    *(void *)(DerivedStorage + 576) = FigSemaphoreCreate();
    *(void *)(DerivedStorage + 584) = FigSemaphoreCreate();
    *(void *)(DerivedStorage + 592) = FigSemaphoreCreate();
    *(_DWORD *)(DerivedStorage + 544) = 0;
    uint64_t v26 = MovieInformationCreate((uint64_t)a1, 0, (uint64_t *)(DerivedStorage + 728));
    if (!v26)
    {
      uint64_t v26 = MovieHeaderMakerCreateWithMovieInformation(a1, *(const void **)(DerivedStorage + 728), 0, (void *)(DerivedStorage + 736));
      if (!v26)
      {
        char v27 = v13 == 2 && a2 == 0;
        if (a2) {
          unsigned int v28 = 2;
        }
        else {
          unsigned int v28 = (*(unsigned char *)(DerivedStorage + 684) & 1) != 0 ? 3 : 1;
        }
        uint64_t v26 = MovieSampleDataWriterCreate(a1, v7, (uint64_t)v11, a2 != 0, v27, v28, (uint64_t *)(DerivedStorage + 744));
        if (!v26)
        {
          uint64_t v26 = MovieInformationSetMovieTimeScale(*(void *)(DerivedStorage + 728), *(_DWORD *)(DerivedStorage + 20));
          if (!v26)
          {
            CFMutableArrayRef Mutable = CFArrayCreateMutable(a1, 0, 0);
            if (Mutable)
            {
              uint64_t v20 = 0;
              *(void *)(DerivedStorage + 488) = Mutable;
              *a4 = cf;
              return v20;
            }
            uint64_t v26 = FigSignalErrorAt();
          }
        }
      }
    }
    uint64_t v20 = v26;
  }
LABEL_30:
  if (cf) {
    CFRelease(cf);
  }
  return v20;
}

uint64_t FigMovieFormatWriterCreateForWritingMovieFragments(const __CFAllocator *a1, uint64_t a2, uint64_t a3, CFDictionaryRef theDict, void *a5)
{
  CFTypeRef cf = 0;
  if (a2 && a5)
  {
    uint64_t v8 = createFigMovieFormatWriterObject(a1, 1, theDict, &cf);
    CFTypeRef v9 = cf;
    if (v8)
    {
      if (cf) {
        CFRelease(cf);
      }
    }
    else
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      *(unsigned char *)(DerivedStorage + 384) = 1;
      *(void *)(DerivedStorage + 392) = a2;
      *(void *)(DerivedStorage + 400) = a3;
      uint64_t v11 = MEMORY[0x1E4F1F9F8];
      *(_OWORD *)(DerivedStorage + 408) = *MEMORY[0x1E4F1F9F8];
      *(void *)(DerivedStorage + 424) = *(void *)(v11 + 16);
      *(void *)(DerivedStorage + 432) = 0;
      *(unsigned char *)(DerivedStorage + 529) = 1;
      *(_WORD *)(DerivedStorage + 332) = 257;
      *(unsigned char *)(DerivedStorage + 352) = 1;
      *a5 = v9;
    }
    return v8;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

BOOL validateFigTrackID(uint64_t a1, int a2)
{
  CFArrayRef Count = *(const __CFArray **)(a1 + 488);
  if (Count) {
    CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
  }
  return a2 > 0 && Count != 0 && (uint64_t)Count >= a2;
}

uint64_t figMovieWriter_fileFormatBitsForFileType(uint64_t result)
{
  if (result)
  {
    CFTypeID v1 = (const void *)result;
    CFTypeID TypeID = CFStringGetTypeID();
    if (TypeID == CFGetTypeID(v1))
    {
      if (CFEqual(v1, @"3GPFamily"))
      {
        return 3;
      }
      else if (CFEqual(v1, @"iTunesVideoFamily"))
      {
        return 13;
      }
      else if (CFEqual(v1, @"iTunesAudioFamily"))
      {
        return 21;
      }
      else if (CFEqual(v1, @"iTunesFamily"))
      {
        return 5;
      }
      else
      {
        if (CFEqual(v1, @"ISOFamily")) {
          return 33;
        }
        BOOL result = CFEqual(v1, @"MP4Family");
        if (result) {
          return 33;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

__CFString *figMovieWriter_CopyDebugDescription(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<FigMovieWriter %p>", a1);
  return Mutable;
}

void editBuilderRelease(void *a1)
{
  if (a1)
  {
    CFAllocatorRef v2 = *(const __CFAllocator **)a1;
    FigCEA608DataInspectorRelease(*((CFAllocatorRef **)a1 + 2));
    *((void *)a1 + 2) = 0;
    CFArrayRef v3 = (const __CFArray *)*((void *)a1 + 3);
    if (v3)
    {
      CFIndex Count = CFArrayGetCount(v3);
      if (Count >= 1)
      {
        CFIndex v5 = Count;
        for (CFIndex i = 0; i != v5; ++i)
        {
          CFAttributedStringRef ValueAtIndex = (CFAllocatorRef *)CFArrayGetValueAtIndex(*((CFArrayRef *)a1 + 3), i);
          FigCEA608DataInspectorRelease(ValueAtIndex);
        }
      }
      uint64_t v8 = (const void *)*((void *)a1 + 3);
      if (v8) {
        CFRelease(v8);
      }
      *((void *)a1 + 3) = 0;
    }
    FigCEA608DataInspectorRelease(*((CFAllocatorRef **)a1 + 1));
    *((void *)a1 + 1) = 0;
    CFAllocatorDeallocate(v2, a1);
    if (v2)
    {
      CFRelease(v2);
    }
  }
}

uint64_t calculateHeaderByteCount(uint64_t a1, unint64_t *a2)
{
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 488));
  CFIndex v5 = CFArrayGetCount(*(CFArrayRef *)(a1 + 488));
  if (v5 < 1)
  {
    unint64_t v8 = 1;
  }
  else
  {
    CFIndex v6 = v5;
    CFIndex v7 = 0;
    LODWORD(v8) = 1;
    do
    {
      CFAttributedStringRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 488), v7);
      LODWORD(theBuffer) = 0;
      int PreferredChunkAlignment = MovieSampleDataWriterTrackGetPreferredChunkAlignment(*(void *)(a1 + 744), ValueAtIndex[95], &theBuffer);
      if (theBuffer) {
        BOOL v11 = PreferredChunkAlignment == 0;
      }
      else {
        BOOL v11 = 0;
      }
      if (v11) {
        int v12 = (int)theBuffer;
      }
      else {
        int v12 = 1;
      }
      uint64_t v13 = v12;
      if (v12 != v8)
      {
        uint64_t v14 = v12;
        if (v8)
        {
          int v15 = v8;
          do
          {
            int v16 = v12;
            int v12 = v15;
            int v15 = v16 % v15;
          }
          while (v15);
          uint64_t v14 = v12;
        }
        v13 *= (int)v8 / v14;
      }
      if (v13 > 0x7FFFFFFF) {
        LODWORD(v8) = 1;
      }
      else {
        LODWORD(v8) = v13;
      }
      ++v7;
    }
    while (v7 != v6);
    unint64_t v8 = (int)v8;
  }
  int v17 = 0;
  CFAllocatorRef v18 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (Count + 2 <= 1) {
    uint64_t v19 = 1;
  }
  else {
    uint64_t v19 = Count + 2;
  }
  do
  {
    DataCFIndex Length = 0;
    CMBlockBufferRef v29 = 0;
    CMBlockBufferRef theBuffer = 0;
    if (*(_DWORD *)(a1 + 320) == 3)
    {
      uint64_t v21 = MovieSampleDataWriterCopyFileTypeAtomAsBlockBuffer(*(const __CFNumber ***)(a1 + 744), v18, &theBuffer);
      if (v21)
      {
        uint64_t MovieAtomBBuf = v21;
        size_t v24 = 0;
        goto LABEL_30;
      }
      DataCFIndex Length = CMBlockBufferGetDataLength(theBuffer);
    }
    uint64_t MovieAtomBBuf = createMovieAtomBBuf(a1, 0, 0, (CFTypeRef *)&v29);
    CMBlockBufferRef v23 = v29;
    if (!MovieAtomBBuf)
    {
      size_t v24 = CMBlockBufferGetDataLength(v29) + DataLength;
      if (!v23) {
        goto LABEL_30;
      }
LABEL_29:
      CFRelease(v23);
      goto LABEL_30;
    }
    size_t v24 = 0;
    if (v29) {
      goto LABEL_29;
    }
LABEL_30:
    if (theBuffer) {
      CFRelease(theBuffer);
    }
    if (MovieAtomBBuf) {
      return MovieAtomBBuf;
    }
    if (v24 % v8) {
      unint64_t v25 = v8 - v24 % v8;
    }
    else {
      unint64_t v25 = 0;
    }
    if (v25 - 1 <= 6) {
      v25 += (v8 - v25 + 7) / v8 * v8;
    }
    unint64_t v26 = v25 + v24;
    if (v26 == v17)
    {
      uint64_t MovieAtomBBuf = 0;
      *a2 = v26;
      return MovieAtomBBuf;
    }
    uint64_t v27 = MovieHeaderMakerAddByteCountToChunkOffsets(*(void *)(a1 + 736), (int)v26);
    if (v27) {
      return v27;
    }
    int v17 = v26;
    --v19;
  }
  while (v19);
  return FigSignalErrorAt();
}

uint64_t createMediaDataLocation(const __CFAllocator *a1, uint64_t a2, CFMutableArrayRef *a3)
{
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t FirstMediaDataAtomOffset = MovieSampleDataWriterGetFirstMediaDataAtomOffset(*(void *)(a2 + 744), 1, &v13);
  if (FirstMediaDataAtomOffset) {
    return FirstMediaDataAtomOffset;
  }
  uint64_t FirstMediaDataAtomOffset = MovieSampleDataWriterGetLengthOfDefaultByteStream(*(uint64_t **)(a2 + 744), &v12);
  if (FirstMediaDataAtomOffset) {
    return FirstMediaDataAtomOffset;
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable(a1, 2, MEMORY[0x1E4F1D510]);
  if (!Mutable) {
    return FigSignalErrorAt();
  }
  CFMutableArrayRef v8 = Mutable;
  uint64_t appended = FigCFArrayAppendInt64();
  if (appended)
  {
    uint64_t v10 = appended;
    goto LABEL_11;
  }
  uint64_t v10 = FigCFArrayAppendInt64();
  if (v10)
  {
LABEL_11:
    CFRelease(v8);
    return v10;
  }
  *a3 = v8;
  return v10;
}

uint64_t estimateResultFileSize(uint64_t a1, void *a2)
{
  uint64_t v2 = a1;
  uint64_t v42 = 0;
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 488));
  uint64_t v4 = (_DWORD *)MEMORY[0x1E4F1EBA8];
  if (Count < 1)
  {
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = 0;
    for (CFIndex i = 0; i != Count; ++i)
    {
      CFAttributedStringRef ValueAtIndex = (CMBufferQueueRef *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v2 + 488), i);
      size_t TotalSize = CMBufferQueueGetTotalSize(ValueAtIndex[77]);
      size_t v9 = CMBufferQueueGetTotalSize(ValueAtIndex[76]);
      if (ValueAtIndex[41]) {
        CMBufferQueueRef v10 = ValueAtIndex[87];
      }
      else {
        CMBufferQueueRef v10 = 0;
      }
      size_t v11 = v9 + TotalSize;
      if (*v4 == 1) {
        kdebug_trace();
      }
      v5 += (uint64_t)v10 + v11;
    }
  }
  if (*v4 == 1) {
    kdebug_trace();
  }
  uint64_t v37 = *(void *)(v2 + 696);
  uint64_t v38 = v5;
  if (*(unsigned char *)(v2 + 329))
  {
    size_t v12 = *(void *)(v2 + 704);
    if (!*(unsigned char *)(v2 + 531)) {
      goto LABEL_20;
    }
  }
  else
  {
    size_t v12 = 0;
  }
  CFIndex v13 = CFArrayGetCount(*(CFArrayRef *)(v2 + 488));
  if (v13 >= 1)
  {
    CFIndex v14 = 0;
    CFIndex v40 = v13;
    uint64_t v41 = v2;
    do
    {
      int v15 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v2 + 488), v14);
      uint64_t v16 = v15[92];
      TimeToSampleTable = (OpaqueCMBlockBuffer *)MovieSampleTableGetTimeToSampleTable(v16);
      DataCFIndex Length = CMBlockBufferGetDataLength(TimeToSampleTable);
      CompositionOffsetTable = (OpaqueCMBlockBuffer *)MovieSampleTableGetCompositionOffsetTable(v16);
      size_t v20 = CMBlockBufferGetDataLength(CompositionOffsetTable);
      SyncSampleTable = (OpaqueCMBlockBuffer *)MovieSampleTableGetSyncSampleTable(v16);
      size_t v22 = CMBlockBufferGetDataLength(SyncSampleTable);
      SampleDependencyTable = (OpaqueCMBlockBuffer *)MovieSampleTableGetSampleDependencyTable(v16);
      size_t v24 = CMBlockBufferGetDataLength(SampleDependencyTable);
      PartialSyncSampleTable = (OpaqueCMBlockBuffer *)MovieSampleTableGetPartialSyncSampleTable(v16);
      size_t v26 = CMBlockBufferGetDataLength(PartialSyncSampleTable);
      SampleToChunkTable = (OpaqueCMBlockBuffer *)MovieSampleTableGetSampleToChunkTable(v16);
      size_t v28 = CMBlockBufferGetDataLength(SampleToChunkTable);
      SampleSizeTable = (OpaqueCMBlockBuffer *)MovieSampleTableGetSampleSizeTable(v16);
      size_t v30 = CMBlockBufferGetDataLength(SampleSizeTable);
      size_t v31 = DataLength + v12 + v20 + v22 + v24 + v26 + v28;
      uint64_t v2 = v41;
      size_t v12 = v31 + v30 + v15[74];
      ++v14;
    }
    while (v40 != v14);
  }
LABEL_20:
  uint64_t v32 = *(void *)(v2 + 8);
  uint64_t v33 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v33) {
    uint64_t v34 = v33;
  }
  else {
    uint64_t v34 = 0;
  }
  CMTimeEpoch v35 = *(uint64_t (**)(uint64_t, void, uint64_t *))(v34 + 24);
  if (!v35) {
    return 4294954514;
  }
  uint64_t result = v35(v32, 0, &v42);
  if (!result) {
    *a2 = v37 + v38 + v12 + v42;
  }
  return result;
}

__n128 getLongestMediaDecodeDuration@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 488));
  CMTime v18 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  CMTime v17 = v18;
  if (Count < 1) {
    goto LABEL_14;
  }
  CFIndex v5 = Count;
  uint64_t v6 = 0;
  for (CFIndex i = 0; i != v5; ++i)
  {
    CFAttributedStringRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 488), i);
    if (!ValueAtIndex[25])
    {
      size_t v9 = ValueAtIndex;
      memset(&v16, 0, sizeof(v16));
      getMediaDecodeDuration((uint64_t)ValueAtIndex, &v16);
      if (*v9 == 1986618469 || *v9 == 1936684398)
      {
        ++v6;
        CMTime time1 = v16;
        CMTime v14 = v18;
        size_t v11 = &v18;
      }
      else
      {
        CMTime time1 = v16;
        CMTime v14 = v17;
        size_t v11 = &v17;
      }
      CMTimeMaximum(v11, &time1, &v14);
    }
  }
  if (v6 <= 0) {
LABEL_14:
  }
    size_t v12 = &v17;
  else {
    size_t v12 = &v18;
  }
  __n128 result = *(__n128 *)&v12->value;
  *(_OWORD *)a2 = *(_OWORD *)&v12->value;
  *(void *)(a2 + 16) = v12->epoch;
  return result;
}

uint64_t copyFigMatrixAsArray(const __CFAllocator *a1, uint64_t a2, CFArrayRef *a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v18 = 0;
  memset(v17, 0, sizeof(v17));
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
LABEL_2:
  uint64_t v9 = 0;
  uint64_t v10 = v6;
  while (1)
  {
    CFNumberRef v11 = CFNumberCreate(v8, kCFNumberFloat32Type, (const void *)(a2 + v9));
    if (!v11) {
      break;
    }
    uint64_t v6 = v10 + 1;
    *((void *)v17 + v10) = v11;
    v9 += 4;
    ++v10;
    if (v9 == 12)
    {
      ++v7;
      a2 += 12;
      if (v7 != 3) {
        goto LABEL_2;
      }
      CFArrayRef v12 = CFArrayCreate(a1, (const void **)v17, 9, MEMORY[0x1E4F1D510]);
      if (v12)
      {
        uint64_t v13 = 0;
        *a3 = v12;
        goto LABEL_9;
      }
      break;
    }
  }
  uint64_t v13 = FigSignalErrorAt();
LABEL_9:
  for (uint64_t i = 0; i != 72; i += 8)
  {
    int v15 = *(const void **)((char *)v17 + i);
    if (v15) {
      CFRelease(v15);
    }
  }
  return v13;
}

uint64_t createMetadataWritersDictionary(const __CFAllocator *a1, uint64_t a2, CFDictionaryRef *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  keys = 0;
  int v15 = 0;
  CMTime v16 = 0;
  int v6 = *(_DWORD *)(a2 + 684);
  if ((v6 & 4) != 0)
  {
    keys = @"com.apple.itunes";
    int v15 = @"org.mp4ra";
    CFIndex v7 = 2;
  }
  else if (v6)
  {
    keys = @"org.mp4ra";
    CFIndex v7 = 1;
  }
  else
  {
    keys = @"com.apple.quicktime.udta";
    int v15 = @"com.apple.quicktime.mdta";
    CMTime v16 = @"com.apple.itunes";
    CFIndex v7 = 3;
  }
  uint64_t v8 = 0;
  memset(values, 0, sizeof(values));
  while (1)
  {
    uint64_t v12 = 0;
    uint64_t result = getMetadataSerializer((uint64_t)a1, a2, *(&keys + v8), &v12);
    if (result) {
      break;
    }
    values[v8++] = (void *)FigMetadataSerializerGetFigMetadataWriter(v12);
    if (v7 == v8)
    {
      CFDictionaryRef v10 = CFDictionaryCreate(a1, (const void **)&keys, (const void **)values, v7, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (!v10) {
        return FigSignalErrorAt();
      }
      CFDictionaryRef v11 = v10;
      uint64_t result = 0;
      *a3 = v11;
      return result;
    }
  }
  return result;
}

uint64_t copyPredeterminedSizesAsDictionary(uint64_t a1, CFAllocatorRef allocator, CFMutableDictionaryRef *a3)
{
  if (!*(unsigned char *)(a1 + 448))
  {
    CFMutableDictionaryRef v5 = 0;
    goto LABEL_7;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(allocator, 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    CFMutableDictionaryRef v5 = Mutable;
    uint64_t v6 = FigCFDictionarySetInt64();
    if (v6 || (uint64_t v6 = FigCFDictionarySetInt64(), v6))
    {
      uint64_t v7 = v6;
      CFRelease(v5);
      return v7;
    }
LABEL_7:
    uint64_t v7 = 0;
    *a3 = v5;
    return v7;
  }

  return FigSignalErrorAt();
}

uint64_t copyMediaDataCheckpointIntervalAsDictionary(uint64_t a1, CFAllocatorRef allocator, CFMutableDictionaryRef *a3)
{
  if (!*(unsigned char *)(a1 + 330))
  {
    CFMutableDictionaryRef v5 = 0;
    goto LABEL_6;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(allocator, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    CFMutableDictionaryRef v5 = Mutable;
    uint64_t v6 = FigCFDictionarySetCMTime();
    if (v6)
    {
      uint64_t v7 = v6;
      CFRelease(v5);
      return v7;
    }
LABEL_6:
    uint64_t v7 = 0;
    *a3 = v5;
    return v7;
  }

  return FigSignalErrorAt();
}

uint64_t createMovieAtomBBuf(uint64_t a1, int a2, const __CFURL *a3, CFTypeRef *a4)
{
  uint64_t v7 = a1;
  uint64_t v139 = *MEMORY[0x1E4F143B8];
  CFTypeRef v120 = 0;
  uint64_t inserted = InsertMediaSegments(a1, 1);
  if (inserted) {
    return inserted;
  }
  uint64_t v115 = *(void *)(v7 + 736);
  int v9 = FigCFEqual();
  if (a2) {
    BOOL v10 = 1;
  }
  else {
    BOOL v10 = v9 == 0;
  }
  char v11 = v10;
  CFArrayRef v12 = *(const __CFArray **)(v7 + 488);
  if (v12) {
    CFIndex Count = CFArrayGetCount(v12);
  }
  else {
    CFIndex Count = 0;
  }
  uint64_t Settings = MovieHeaderMakerSetShouldWriteMovieExtendsAtom(v115, a2);
  if (Settings) {
    goto LABEL_204;
  }
  CMTime keys = *(CMTime *)(v7 + 244);
  uint64_t Settings = MovieHeaderMakerSetMovieExtendsHeaderFragmentDuration(v115, (long long *)&keys.value);
  if (Settings) {
    goto LABEL_204;
  }
  CFDictionaryRef v113 = a4;
  CFTypeRef v126 = 0;
  CFTypeRef v127 = 0;
  CFTypeRef v125 = 0;
  int v14 = *(_DWORD *)(v7 + 684);
  if (v14) {
    int v15 = (const void **)&kFigMetadataFormat_ISOUserData;
  }
  else {
    int v15 = (const void **)&kFigMetadataFormat_QuickTimeUserData;
  }
  if (v14) {
    CMTime v16 = kFigISOUserDataKeyspace;
  }
  else {
    CMTime v16 = kFigUserDataKeyspace;
  }
  CFTypeRef v123 = 0;
  CFTypeRef cf = 0;
  CMBlockBufferRef blockBufferOut = 0;
  CFTypeRef v122 = 0;
  CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v17 = CMBlockBufferCreateEmpty((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 2u, 0, &blockBufferOut);
  CFURLRef v114 = a3;
  if (v17)
  {
    uint64_t v39 = v17;
    CFDataRef v55 = 0;
    CFStringRef v18 = 0;
    CFDictionaryRef v19 = 0;
    uint64_t v20 = v115;
    goto LABEL_73;
  }
  if (v11) {
    goto LABEL_21;
  }
  CFDictionaryRef v21 = *(const __CFDictionary **)(v7 + 688);
  if (v21)
  {
    CFStringRef v18 = createiTunesGaplessInfoString(v21);
    uint64_t v20 = v115;
    if (v18)
    {
LABEL_24:
      keys.CMTimeValue value = (CMTimeValue)@"dataType";
      *(void *)&keys.CMTimeScale timescale = @"dataTypeNamespace";
      values.CMTimeValue value = 0;
      *(void *)&values.CMTimeScale timescale = @"com.apple.itunes";
      LODWORD(valuePtr.CFDictionarySetValue(theDict, key, value) = 1;
      CFNumberRef v22 = CFNumberCreate(allocator, kCFNumberSInt32Type, &valuePtr);
      values.CMTimeValue value = (CMTimeValue)v22;
      CFDictionaryRef v19 = CFDictionaryCreate(allocator, (const void **)&keys, (const void **)&values, 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFRelease(v22);
      if (!copyMetadataSerializer((uint64_t)allocator, v7, @"com.apple.itunes", &v122))
      {
        uint64_t FigMetadataWriter = FigMetadataSerializerGetFigMetadataWriter(v122);
        uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v24) {
          uint64_t v25 = v24;
        }
        else {
          uint64_t v25 = 0;
        }
        uint64_t v111 = *(uint64_t (**)(uint64_t, __CFString *, __CFString *, CFStringRef, CFDictionaryRef))(v25 + 8);
        if (!v111)
        {
          uint64_t v39 = 4294954514;
          goto LABEL_70;
        }
        uint64_t Contiguous = v111(FigMetadataWriter, @"itlk", @"com.apple.iTunes.iTunSMPB", v18, v19);
        if (Contiguous) {
          goto LABEL_69;
        }
      }
      goto LABEL_51;
    }
  }
  else
  {
    CFArrayRef v26 = *(const __CFArray **)(v7 + 488);
    if (!v26 || (CFIndex v27 = CFArrayGetCount(v26), v27 < 1))
    {
LABEL_21:
      CFStringRef v18 = 0;
      CFDictionaryRef v19 = 0;
      uint64_t v20 = v115;
      goto LABEL_51;
    }
    CFIndex v28 = v27;
    CFIndex v29 = 0;
    uint64_t v20 = v115;
    while (1)
    {
      CFAttributedStringRef ValueAtIndex = (double *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v7 + 488), v29);
      if (*(_DWORD *)ValueAtIndex == 1936684398) {
        break;
      }
      if (v28 == ++v29) {
        goto LABEL_49;
      }
    }
    size_t v31 = ValueAtIndex;
    if (*((_DWORD *)ValueAtIndex + 192) != 2 || !*((_DWORD *)ValueAtIndex + 87)) {
      goto LABEL_49;
    }
    uint64_t FirstEditBuilder = getFirstEditBuilder((uint64_t)ValueAtIndex);
    double v33 = v31[45];
    CFIndex v34 = CFArrayGetCount(*(CFArrayRef *)(FirstEditBuilder + 24));
    if (v34 + editMediaTimeIsValid(*(void *)(FirstEditBuilder + 16)) != 1)
    {
      uint64_t v39 = FigSignalErrorAt();
      CFStringRef v18 = 0;
      CFDictionaryRef v19 = 0;
      CFDataRef v55 = 0;
      if (v39) {
        goto LABEL_73;
      }
      goto LABEL_51;
    }
    EditMediaTimeAtIndex = (char *)editBuilderGetEditMediaTimeAtIndex(FirstEditBuilder, 0);
    memset(&values, 0, sizeof(values));
    memset(&valuePtr, 0, sizeof(valuePtr));
    memset(&v131, 0, sizeof(v131));
    CFNumberRef v135 = 0;
    CFNumberRef v136 = 0;
    v133[0] = @"EncodingDelayInFrame";
    v133[1] = @"EncodingDrainInFrames";
    v133[2] = @"DurationInFrames";
    CMTime keys = *(CMTime *)(EditMediaTimeAtIndex + 60);
    CMTimeConvertScale(&values, &keys, (int)v33, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
    CMTime keys = *(CMTime *)(EditMediaTimeAtIndex + 84);
    CMTimeConvertScale(&v131, &keys, (int)v33, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
    CMTime lhs = *(CMTime *)(EditMediaTimeAtIndex + 36);
    long long v36 = *(_OWORD *)(EditMediaTimeAtIndex + 12);
    rhs.CMTimeEpoch epoch = *(void *)(EditMediaTimeAtIndex + 28);
    *(_OWORD *)&rhs.CMTimeValue value = v36;
    CMTimeSubtract(&keys, &lhs, &rhs);
    CMTime rhs = keys;
    CMTimeConvertScale(&lhs, &rhs, (int)v33, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
    CMTime keys = lhs;
    CMTime rhs = values;
    CMTime v128 = v131;
    CMTimeAdd(&lhs, &rhs, &v128);
    CMTime rhs = keys;
    CMTimeSubtract(&valuePtr, &rhs, &lhs);
    uint64_t v134 = CFNumberCreate(allocator, kCFNumberSInt64Type, &values);
    if (v134
      && (CFNumberRef v135 = CFNumberCreate(allocator, kCFNumberSInt64Type, &v131)) != 0
      && (CFNumberRef v136 = CFNumberCreate(allocator, kCFNumberSInt64Type, &valuePtr)) != 0
      && (CFDictionaryRef v37 = CFDictionaryCreate(allocator, (const void **)v133, (const void **)&v134, 3, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540])) != 0)
    {
      CFDictionaryRef v38 = v37;
      uint64_t v39 = 0;
    }
    else
    {
      uint64_t v39 = FigSignalErrorAt();
      CFDictionaryRef v38 = 0;
    }
    for (uint64_t i = 0; i != 24; i += 8)
    {
      uint64_t v41 = *(void **)((char *)&v134 + i);
      if (v41) {
        CFRelease(v41);
      }
    }
    if (v39)
    {
      CFDataRef v55 = 0;
      CFStringRef v18 = 0;
      CFDictionaryRef v19 = 0;
      goto LABEL_73;
    }
    if (!v38)
    {
LABEL_49:
      CFStringRef v18 = 0;
      goto LABEL_50;
    }
    CFStringRef v18 = createiTunesGaplessInfoString(v38);
    CFRelease(v38);
    if (v18) {
      goto LABEL_24;
    }
  }
LABEL_50:
  CFDictionaryRef v19 = 0;
LABEL_51:
  uint64_t v42 = *(const void **)(v7 + 296);
  if (!v42)
  {
    uint64_t v42 = *(const void **)(v7 + 304);
    if (!v42) {
      goto LABEL_61;
    }
  }
  CFTypeID v43 = CFGetTypeID(v42);
  if (v43 == CFDictionaryGetTypeID())
  {
    transferMovieMetadata(v7, (CFDictionaryRef)v42, &cf, &v123, &v122);
    goto LABEL_61;
  }
  CFTypeID v44 = CFGetTypeID(v42);
  if (v44 == CFArrayGetTypeID())
  {
    CFIndex v45 = CFArrayGetCount((CFArrayRef)v42);
    if (v45 >= 1)
    {
      CFIndex v46 = v45;
      for (CFIndex j = 0; j != v46; ++j)
      {
        CFDictionaryRef v48 = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)v42, j);
        transferMovieMetadata(v7, v48, &cf, &v123, &v122);
      }
    }
LABEL_61:
    CFTypeRef v50 = v122;
    if (!v122)
    {
      int v51 = *(const void **)(v7 + 288);
      if (!v51) {
        goto LABEL_198;
      }
      CFTypeRef v50 = FigMetadataSerializerRetain(v51);
      CFTypeRef v122 = v50;
    }
    uint64_t v52 = *(void *)(CMBaseObjectGetVTable() + 24);
    if (v52) {
      uint64_t v53 = v52;
    }
    else {
      uint64_t v53 = 0;
    }
    uint64_t v54 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(v53 + 8);
    if (!v54)
    {
      CFDataRef v55 = 0;
      goto LABEL_72;
    }
    uint64_t Contiguous = v54(v50, &v125);
    if (Contiguous) {
      goto LABEL_69;
    }
    if (v125)
    {
      keys.CMTimeValue value = 0;
      keys.CMTimeValue value = CMBlockBufferGetDataLength((CMBlockBufferRef)v125);
      values.CMTimeValue value = 0;
      IsRangeuint64_t Contiguous = CMBlockBufferIsRangeContiguous((CMBlockBufferRef)v125, 0, keys.value);
      CMTimeValue value = (OpaqueCMBlockBuffer *)v125;
      if (!IsRangeContiguous)
      {
        valuePtr.CMTimeValue value = 0;
        uint64_t Contiguous = CMBlockBufferCreateContiguous(allocator, (CMBlockBufferRef)v125, allocator, 0, 0, keys.value, 0, (CMBlockBufferRef *)&valuePtr);
        if (Contiguous) {
          goto LABEL_69;
        }
        if (v125) {
          CFRelease(v125);
        }
        CMTimeValue value = (OpaqueCMBlockBuffer *)valuePtr.value;
        CFTypeRef v125 = (CFTypeRef)valuePtr.value;
      }
      uint64_t Contiguous = CMBlockBufferGetDataPointer(value, 8uLL, (size_t *)&keys, 0, (char **)&values);
      if (Contiguous) {
        goto LABEL_69;
      }
      CFDataRef v55 = CFDataCreateWithBytesNoCopy(allocator, (const UInt8 *)values.value, keys.value, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
      if (!v55)
      {
        uint64_t appended = FigSignalErrorAt();
        goto LABEL_223;
      }
      CFTypeRef v96 = cf;
      if (cf || !copyMetadataSerializer((uint64_t)allocator, v7, *v15, &cf) && (CFTypeRef v96 = cf) != 0)
      {
        uint64_t v97 = FigMetadataSerializerGetFigMetadataWriter(v96);
        uint64_t v98 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v98) {
          uint64_t v99 = v98;
        }
        else {
          uint64_t v99 = 0;
        }
        CFAllocatorRef v112 = *(uint64_t (**)(uint64_t, __CFString *, __CFString *, CFDataRef, void))(v99 + 8);
        if (!v112) {
          goto LABEL_72;
        }
        uint64_t appended = v112(v97, *v16, @"meta", v55, 0);
        if (appended) {
          goto LABEL_223;
        }
      }
LABEL_199:
      CFTypeRef v100 = cf;
      if (!cf)
      {
        uint64_t v101 = *(const void **)(v7 + 280);
        if (!v101)
        {
LABEL_212:
          CFTypeRef v106 = v123;
          if (!v123)
          {
            uint64_t v107 = *(const void **)(v7 + 272);
            if (!v107)
            {
LABEL_222:
              uint64_t appended = MovieHeaderMakerSetMovieMetadataBlockBuffer(*(void *)(v7 + 736), blockBufferOut);
LABEL_223:
              uint64_t v39 = appended;
              goto LABEL_73;
            }
            CFTypeRef v106 = FigMetadataSerializerRetain(v107);
            CFTypeRef v123 = v106;
          }
          uint64_t v108 = *(void *)(CMBaseObjectGetVTable() + 24);
          if (v108) {
            uint64_t v109 = v108;
          }
          else {
            uint64_t v109 = 0;
          }
          uint64_t v110 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(v109 + 8);
          if (v110)
          {
            uint64_t appended = v110(v106, &v127);
            if (appended) {
              goto LABEL_223;
            }
            if (v127)
            {
              uint64_t appended = CMBlockBufferAppendBufferReference(blockBufferOut, (CMBlockBufferRef)v127, 0, 0, 0);
              if (appended) {
                goto LABEL_223;
              }
            }
            goto LABEL_222;
          }
LABEL_72:
          uint64_t v39 = 4294954514;
          goto LABEL_73;
        }
        CFTypeRef v100 = FigMetadataSerializerRetain(v101);
        CFTypeRef cf = v100;
      }
      uint64_t v102 = *(void *)(CMBaseObjectGetVTable() + 24);
      if (v102) {
        uint64_t v103 = v102;
      }
      else {
        uint64_t v103 = 0;
      }
      CFAllocatorRef v104 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(v103 + 8);
      if (!v104) {
        goto LABEL_72;
      }
      uint64_t appended = v104(v100, &v126);
      if (appended) {
        goto LABEL_223;
      }
      if (v126)
      {
        uint64_t appended = CMBlockBufferAppendBufferReference(blockBufferOut, (CMBlockBufferRef)v126, 0, 0, 0);
        if (appended) {
          goto LABEL_223;
        }
      }
      goto LABEL_212;
    }
LABEL_198:
    CFDataRef v55 = 0;
    goto LABEL_199;
  }
  uint64_t Contiguous = FigSignalErrorAt();
  if (!Contiguous) {
    goto LABEL_61;
  }
LABEL_69:
  uint64_t v39 = Contiguous;
LABEL_70:
  CFDataRef v55 = 0;
LABEL_73:
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  CFAllocatorRef v56 = allocator;
  if (cf) {
    CFRelease(cf);
  }
  if (v123) {
    CFRelease(v123);
  }
  if (v122) {
    CFRelease(v122);
  }
  if (v18) {
    CFRelease(v18);
  }
  if (v19) {
    CFRelease(v19);
  }
  if (v55) {
    CFRelease(v55);
  }
  if (v125) {
    CFRelease(v125);
  }
  if (v126) {
    CFRelease(v126);
  }
  if (v127) {
    CFRelease(v127);
  }
  if (v39) {
    goto LABEL_205;
  }
  if (Count >= 1)
  {
    for (CFIndex k = 0; k != Count; ++k)
    {
      BOOL v58 = (char *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v7 + 488), k);
      uint64_t v59 = *((void *)v58 + 93);
      char v118 = *((_DWORD *)v58 + 192) == 3;
      BOOL v60 = *(_DWORD *)v58 == 1936684398 && FigCFEqual() != 0;
      if (*(unsigned char *)(v7 + 384))
      {
        if (v58[492]) {
          char v61 = v60;
        }
        else {
          char v61 = 0;
        }
        char v117 = v61;
      }
      else
      {
        char v117 = 0;
        char v61 = 1;
      }
      uint64_t Settings = setTrackExtendsDefaultValuesIfNeeded((uint64_t)v58);
      if (Settings) {
        goto LABEL_204;
      }
      uint64_t v62 = *((void *)v58 + 2);
      keys.CMTimeValue value = 0;
      values.CMTimeValue value = 0;
      valuePtr.CMTimeValue value = 0;
      uint64_t Empty = CMBlockBufferCreateEmpty(v56, 2u, 0, (CMBlockBufferRef *)&valuePtr);
      if (Empty) {
        goto LABEL_133;
      }
      if ((*(unsigned char *)(*((void *)v58 + 2) + 684) & 3) != 0) {
        CFMutableSetRef Mutable = CFSetCreateMutable(v56, 0, MEMORY[0x1E4F1D548]);
      }
      else {
        CFMutableSetRef Mutable = 0;
      }
      uint64_t v39 = *((void *)v58 + 70);
      if (v39 || (uint64_t v39 = *((void *)v58 + 71)) != 0)
      {
        CFTypeID v65 = CFGetTypeID((CFTypeRef)v39);
        if (v65 == CFDictionaryGetTypeID())
        {
          transferTrackMetadata((uint64_t)v58, (CFDictionaryRef)v39, &keys.value, &values.value);
LABEL_114:
          uint64_t v39 = 0;
          goto LABEL_121;
        }
        CFTypeID v66 = CFGetTypeID((CFTypeRef)v39);
        if (v66 == CFArrayGetTypeID())
        {
          CFIndex v67 = CFArrayGetCount((CFArrayRef)v39);
          if (v67 < 1) {
            goto LABEL_114;
          }
          CFIndex v68 = v67;
          uint64_t v69 = v7;
          for (CFIndex m = 0; m != v68; ++m)
          {
            CFDictionaryRef v71 = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)v39, m);
            transferTrackMetadata((uint64_t)v58, v71, &keys.value, &values.value);
          }
          uint64_t v39 = 0;
          uint64_t v7 = v69;
          uint64_t v20 = v115;
        }
        else
        {
          uint64_t v39 = FigSignalErrorAt();
        }
      }
LABEL_121:
      if (Mutable) {
        CFRelease(Mutable);
      }
      CFAllocatorRef v56 = allocator;
      if (!v39)
      {
        CMTimeValue v72 = keys.value;
        if (keys.value) {
          goto LABEL_127;
        }
        CMTime v73 = (const void *)*((void *)v58 + 69);
        if (!v73) {
          goto LABEL_242;
        }
        CMTimeValue v72 = (CMTimeValue)FigMetadataSerializerRetain(v73);
        keys.CMTimeValue value = v72;
LABEL_127:
        uint64_t Empty = appendBBufFromMetadataSerializerToBlockBuffer(v72, (OpaqueCMBlockBuffer *)valuePtr.value);
        if (!Empty)
        {
LABEL_242:
          CMTimeValue v74 = values.value;
          if (values.value) {
            goto LABEL_131;
          }
          char v75 = (const void *)*((void *)v58 + 68);
          if (!v75) {
            goto LABEL_132;
          }
          CMTimeValue v74 = (CMTimeValue)FigMetadataSerializerRetain(v75);
          values.CMTimeValue value = v74;
LABEL_131:
          uint64_t Empty = appendBBufFromMetadataSerializerToBlockBuffer(v74, (OpaqueCMBlockBuffer *)valuePtr.value);
          if (!Empty) {
LABEL_132:
          }
            uint64_t Empty = MovieHeaderMakerTrackSetTrackMetadataBlockBuffer(*(void *)(v62 + 736), *((void *)v58 + 93), (CFTypeRef)valuePtr.value);
        }
LABEL_133:
        uint64_t v39 = Empty;
      }
      if (keys.value) {
        CFRelease((CFTypeRef)keys.value);
      }
      if (values.value) {
        CFRelease((CFTypeRef)values.value);
      }
      if (valuePtr.value) {
        CFRelease((CFTypeRef)valuePtr.value);
      }
      if (v39) {
        goto LABEL_205;
      }
      uint64_t v76 = *((void *)v58 + 92);
      CFStringRef v77 = (const __CFString *)*((void *)v58 + 51);
      if (v77 || (CFStringRef v77 = (const __CFString *)*((void *)v58 + 52)) != 0)
      {
        unsigned int PackedISO639_2TFromLocaleIdentifier = FigMetadataGetPackedISO639_2TFromLocaleIdentifier(v77);
        CFStringRef StringForLanguageCode = FigCreateStringForLanguageCode(v56, PackedISO639_2TFromLocaleIdentifier, 1);
        uint64_t v80 = MovieTrackSetLanguageCodeString(v76, StringForLanguageCode);
        if (v80) {
          goto LABEL_150;
        }
        CMTimeValue v81 = (const void *)*((void *)v58 + 52);
        if (v81)
        {
LABEL_149:
          uint64_t v80 = MovieTrackSetExtendedLanguageTagString(v76, v81);
LABEL_150:
          uint64_t v39 = v80;
          if (!StringForLanguageCode) {
            goto LABEL_152;
          }
LABEL_151:
          CFRelease(StringForLanguageCode);
          goto LABEL_152;
        }
      }
      else
      {
        CFStringRef StringForLanguageCode = 0;
      }
      if (*(unsigned char *)(*((void *)v58 + 2) + 328))
      {
        CMTimeValue v81 = (const void *)*((void *)v58 + 51);
        if (v81) {
          goto LABEL_149;
        }
      }
      uint64_t v39 = 0;
      if (StringForLanguageCode) {
        goto LABEL_151;
      }
LABEL_152:
      CFAllocatorRef v56 = allocator;
      if (v39) {
        goto LABEL_205;
      }
      if (v58[40])
      {
        if (v58[56])
        {
          int32_t v83 = *(_DWORD *)(*((void *)v58 + 2) + 20);
          CMTime values = *(CMTime *)(v58 + 44);
          CMTimeConvertScale(&keys, &values, v83, kCMTimeRoundingMethod_QuickTime);
          uint64_t value_low = LODWORD(keys.value);
        }
        else
        {
          uint64_t value_low = 0xFFFFFFFFLL;
        }
        if (v58[80])
        {
          int32_t v85 = *(_DWORD *)(*((void *)v58 + 2) + 20);
          CMTime values = *(CMTime *)(v58 + 68);
          CMTimeConvertScale(&valuePtr, &values, v85, kCMTimeRoundingMethod_QuickTime);
          CMTimeValue v84 = valuePtr.value << 32;
        }
        else
        {
          CMTimeValue v84 = 0;
        }
        uint64_t Settings = MovieTrackSetLoadSettings(*((void *)v58 + 92), v84 | value_low, *(void *)(v58 + 92));
        if (Settings) {
          goto LABEL_204;
        }
      }
      uint64_t Settings = MovieHeaderMakerTrackSetShouldWriteCompactSampleSizeAtomIfPossible(v20, v59, v58[584]);
      if (Settings) {
        goto LABEL_204;
      }
      uint64_t Settings = MovieHeaderMakerTrackSetShouldWriteCleanApertureDimensionsAtom(v20, v59, v58[34]);
      if (Settings) {
        goto LABEL_204;
      }
      uint64_t Settings = MovieHeaderMakerTrackSetShouldWriteProductionApertureDimensionsAtom(v20, v59, v58[36]);
      if (Settings) {
        goto LABEL_204;
      }
      uint64_t Settings = MovieHeaderMakerTrackSetShouldWriteEncodedPixelsDimensionsAtom(v20, v59, v58[38]);
      if (Settings) {
        goto LABEL_204;
      }
      uint64_t Settings = MovieHeaderMakerTrackSetSampleReferenceBaseURL(v20, v59, *((CFTypeRef *)v58 + 57));
      if (Settings) {
        goto LABEL_204;
      }
      uint64_t Settings = MovieHeaderMakerTrackSetShouldWriteRollSampleGroupAtoms(v20, v59, v118);
      if (Settings) {
        goto LABEL_204;
      }
      uint64_t Settings = MovieHeaderMakerTrackSetShouldWriteSampleAuxiliaryInformationAtoms(v20, v59, v58[729]);
      if (Settings) {
        goto LABEL_204;
      }
      uint64_t Settings = MovieHeaderMakerTrackSetShouldWriteEditAtom(v20, v59, v61);
      if (Settings) {
        goto LABEL_204;
      }
      uint64_t Settings = MovieHeaderMakerTrackSetShouldAllowWritingZeroTrackDurationInEditListAtom(v20, v59, v117);
      if (Settings) {
        goto LABEL_204;
      }
    }
  }
  uint64_t Settings = MovieHeaderMakerCopyMovieHeaderAsBlockBuffer(*(void *)(v7 + 736), v56, *(void *)(v7 + 712), v114, (CMBlockBufferRef *)&v120);
  if (!Settings)
  {
    if (!*(unsigned char *)(v7 + 329)
      || (CFArrayRef v86 = *(const __CFArray **)(v7 + 488)) == 0
      || (uint64_t v87 = *(void *)(v7 + 736), v88 = CFArrayGetCount(v86), v88 < 1))
    {
LABEL_183:
      uint64_t v39 = 0;
      *CFDictionaryRef v113 = v120;
      return v39;
    }
    CFIndex v89 = v88;
    CFIndex v90 = 0;
    while (1)
    {
      long long v91 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v7 + 488), v90);
      uint64_t v92 = v91[93];
      LOBYTE(keys.CFDictionarySetValue(theDict, key, value) = 0;
      uint64_t Settings = MovieHeaderMakerTrackDidWriteEditAtom(v87, v92, &keys);
      if (Settings) {
        break;
      }
      if (!LOBYTE(keys.value)) {
        *((unsigned char *)v91 + 353) = 1;
      }
      if (v89 == ++v90) {
        goto LABEL_183;
      }
    }
  }
LABEL_204:
  uint64_t v39 = Settings;
LABEL_205:
  if (v120) {
    CFRelease(v120);
  }
  return v39;
}

uint64_t InsertMediaSegments(uint64_t a1, int a2)
{
  uint64_t v3 = a1;
  uint64_t v25 = *(CMTime **)(a1 + 728);
  v36[0] = 0;
  CFArrayRef v4 = *(const __CFArray **)(a1 + 488);
  if (v4) {
    CFIndex Count = CFArrayGetCount(v4);
  }
  else {
    CFIndex Count = 0;
  }
  CFMutableArrayRef v35 = 0;
  uint64_t BasicMetrics = MovieInformationGetBasicMetrics((uint64_t)v25, 0, 0, v36, 0);
  if (BasicMetrics) {
    return BasicMetrics;
  }
  if (Count < 1) {
    return 0;
  }
  CFIndex v7 = 0;
  uint64_t v23 = v3;
  CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFIndex v22 = Count;
  while (1)
  {
    CFAttributedStringRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v3 + 488), v7);
    uint64_t v9 = *((void *)ValueAtIndex + 92);
    start[0] = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
    *(_OWORD *)&duration.start.CMTimeValue value = *MEMORY[0x1E4F1FA10];
    duration.start.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1FA10] + 16);
    if (a2)
    {
      CMTimeRangeMake(&v34, start, &duration.start);
      uint64_t v10 = MovieTrackDeleteSegment(v25, v9, (uint64_t)&v34);
    }
    else
    {
      CMTimeRangeMake(&v33, start, &duration.start);
      uint64_t v10 = MovieTrackFragmentDeleteSegment(v9, (long long *)&v33.start.value);
    }
    uint64_t v11 = v10;
    if (v10) {
      break;
    }
    CFArrayRef v12 = (const __CFArray *)*((void *)ValueAtIndex + 50);
    if (v12 && CFArrayGetCount(v12))
    {
      uint64_t v13 = (const void *)*((void *)ValueAtIndex + 50);
      if (v13) {
        int v14 = (__CFArray *)CFRetain(v13);
      }
      else {
        int v14 = 0;
      }
      CFMutableArrayRef v35 = v14;
      if (!v14) {
        goto LABEL_30;
      }
    }
    else
    {
      uint64_t v15 = createDefaultTrackEditSegmentArray(allocator, (uint64_t)ValueAtIndex, &v35);
      if (v15) {
        goto LABEL_36;
      }
      int v14 = v35;
      if (!v35) {
        goto LABEL_30;
      }
    }
    CFIndex v16 = CFArrayGetCount(v14);
    if (v16 >= 1)
    {
      CFIndex v17 = v16;
      CFIndex v18 = 0;
      while (1)
      {
        CFDictionaryRef v19 = (const __CFDictionary *)CFArrayGetValueAtIndex(v14, v18);
        memset(v32, 0, sizeof(v32));
        long long v31 = 0u;
        memset(start, 0, sizeof(start));
        getFigTimeMappingFromDictionary(v19, start);
        if (v15) {
          break;
        }
        if (start[0].flags)
        {
          memset(&duration, 0, sizeof(duration));
          *(_OWORD *)&v28.start.CMTimeValue value = v31;
          v28.start.CMTimeEpoch epoch = *(void *)&v32[0];
          *(_OWORD *)&v27.start.CMTimeValue value = *(_OWORD *)((char *)v32 + 8);
          v27.start.CMTimeEpoch epoch = *((void *)&v32[1] + 1);
          CMTimeRangeMake(&duration, &v28.start, &v27.start);
          memset(&v28, 0, sizeof(v28));
          v27.CMTime start = start[0];
          v26.CMTime start = start[1];
          CMTimeRangeMake(&v28, &v27.start, &v26.start);
          CMTimeRange v27 = duration;
          CMTimeRange v26 = v28;
          uint64_t v20 = a2
              ? MovieTrackInsertMediaSegment(v25, v9, &v27, (long long *)&v26.start.value)
              : MovieTrackFragmentInsertMediaSegment(v9, &v27, (long long *)&v26.start.value);
          uint64_t v11 = v20;
          if (v20) {
            goto LABEL_32;
          }
        }
        if (v17 == ++v18) {
          goto LABEL_29;
        }
      }
LABEL_36:
      uint64_t v11 = v15;
      break;
    }
LABEL_29:
    CFRelease(v14);
    CFMutableArrayRef v35 = 0;
    CFIndex Count = v22;
    uint64_t v3 = v23;
LABEL_30:
    if (++v7 == Count)
    {
      uint64_t v11 = 0;
      break;
    }
  }
LABEL_32:
  if (v35) {
    CFRelease(v35);
  }
  return v11;
}

double getFigTimeMappingFromDictionary(const __CFDictionary *a1, _OWORD *a2)
{
  double result = 0.0;
  memset(v20, 0, sizeof(v20));
  long long v19 = 0u;
  memset(v18, 0, sizeof(v18));
  if (a1)
  {
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (TypeID == CFGetTypeID(a1))
    {
      CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(a1, @"MediaStart");
      CFDictionaryRef v7 = (const __CFDictionary *)CFDictionaryGetValue(a1, @"MediaDuration");
      CFDictionaryRef v8 = (const __CFDictionary *)CFDictionaryGetValue(a1, @"TrackStart");
      CFDictionaryRef v9 = (const __CFDictionary *)CFDictionaryGetValue(a1, @"TrackDuration");
      if (Value) {
        BOOL v10 = v7 == 0;
      }
      else {
        BOOL v10 = 1;
      }
      if (!v10 && v8 != 0 && v9 != 0)
      {
        CFDictionaryRef v13 = v9;
        CMTimeMakeFromDictionary(v18, Value);
        CMTimeMakeFromDictionary(&v17, v7);
        v18[1] = v17;
        CMTimeMakeFromDictionary(&v17, v8);
        long long v19 = *(_OWORD *)&v17.value;
        *(void *)&v20[0] = v17.epoch;
        CMTimeMakeFromDictionary(&v17, v13);
        *(CMTime *)((char *)v20 + 8) = v17;
        long long v14 = v19;
        a2[2] = *(_OWORD *)&v18[1].timescale;
        a2[3] = v14;
        long long v15 = v20[1];
        a2[4] = v20[0];
        a2[5] = v15;
        double result = *(double *)&v18[0].value;
        long long v16 = *(_OWORD *)&v18[0].epoch;
        *a2 = *(_OWORD *)&v18[0].value;
        a2[1] = v16;
      }
    }
  }
  return result;
}

uint64_t getFirstEditBuilder(uint64_t a1)
{
  CFArrayRef v2 = *(const __CFArray **)(a1 + 424);
  if (!v2) {
    return *(void *)(a1 + 496);
  }
  CFIndex Count = CFArrayGetCount(v2);
  if (Count < 1) {
    return *(void *)(a1 + 496);
  }
  CFIndex v4 = Count;
  CFIndex v5 = 0;
  while (1)
  {
    uint64_t v6 = *((void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 424), v5) + 34);
    CFIndex v7 = CFArrayGetCount(*(CFArrayRef *)(v6 + 24));
    if (v7 + editMediaTimeIsValid(*(void *)(v6 + 16))) {
      break;
    }
    if (v4 == ++v5) {
      return *(void *)(a1 + 496);
    }
  }
  return v6;
}

const void *editBuilderGetEditMediaTimeAtIndex(uint64_t a1, CFIndex a2)
{
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 24));
  if (Count <= a2)
  {
    if (Count == a2)
    {
      uint64_t v7 = *(void *)(a1 + 16);
      if (editMediaTimeIsValid(v7)) {
        return (const void *)v7;
      }
      else {
        return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    CFArrayRef v5 = *(const __CFArray **)(a1 + 24);
    return CFArrayGetValueAtIndex(v5, a2);
  }
}

uint64_t copyFigTimeMappingAsDictionary(CFAllocatorRef allocator, uint64_t a2, CFDictionaryRef *a3)
{
  keys[4] = *(void **)MEMORY[0x1E4F143B8];
  keys[0] = @"MediaStart";
  keys[1] = @"MediaDuration";
  keys[2] = @"TrackStart";
  keys[3] = @"TrackDuration";
  CMTime time = *(CMTime *)a2;
  time.CMTimeValue value = (CMTimeValue)CMTimeCopyAsDictionary(&time, allocator);
  CMTime v11 = *(CMTime *)(a2 + 24);
  *(void *)&time.CMTimeScale timescale = CMTimeCopyAsDictionary(&v11, allocator);
  CMTime v11 = *(CMTime *)(a2 + 48);
  time.CMTimeEpoch epoch = (CMTimeEpoch)CMTimeCopyAsDictionary(&v11, allocator);
  CMTime v11 = *(CMTime *)(a2 + 72);
  CFDictionaryRef v13 = CMTimeCopyAsDictionary(&v11, allocator);
  CFDictionaryRef v6 = CFDictionaryCreate(allocator, (const void **)keys, (const void **)&time, 4, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (v6)
  {
    uint64_t v7 = 0;
    *a3 = v6;
  }
  else
  {
    uint64_t v7 = FigSignalErrorAt();
  }
  for (uint64_t i = 0; i != 32; i += 8)
  {
    CFDictionaryRef v9 = *(const void **)((char *)&time.value + i);
    if (v9) {
      CFRelease(v9);
    }
  }
  return v7;
}

BOOL editMediaTimeIsValid(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 24) & 0x1D) == 1
      && (*(_DWORD *)(a1 + 48) & 0x1D) == 1
      && (*(_DWORD *)(a1 + 72) & 0x1D) == 1
      && (*(_DWORD *)(a1 + 96) & 0x1D) == 1
      && *(double *)(a1 + 112) != -1.0;
}

uint64_t editBuilderCreateTimeMappingArray(uint64_t a1, int32_t a2, uint64_t a3, uint64_t a4, CMTime *a5, CMTime *a6, CFAllocatorRef allocator, const __CFArray **a8, uint64_t a9)
{
  CFDictionaryRef v54 = 0;
  if (*(unsigned char *)(a4 + 12))
  {
    *(_OWORD *)&time1[0].start.CMTimeValue value = *(_OWORD *)a4;
    time1[0].start.CMTimeEpoch epoch = *(void *)(a4 + 16);
    *(_OWORD *)&time2.start.CMTimeValue value = *(_OWORD *)a3;
    time2.start.CMTimeEpoch epoch = *(void *)(a3 + 16);
    if (CMTimeCompare(&time1[0].start, &time2.start) < 0) {
      return FigSignalErrorAt();
    }
  }
  CFArrayRef cf = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E4F1D510]);
  if (!cf) {
    return FigSignalErrorAt();
  }
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 24));
  uint64_t v41 = Count + editMediaTimeIsValid(*(void *)(a1 + 16));
  int v17 = *(_DWORD *)(a4 + 12);
  if (!v41)
  {
    if ((v17 & 1) == 0) {
      goto LABEL_46;
    }
LABEL_10:
    *(_OWORD *)&time1[0].start.CMTimeValue value = *(_OWORD *)a3;
    time1[0].start.CMTimeEpoch epoch = *(void *)(a3 + 16);
    *(_OWORD *)&time2.start.CMTimeValue value = *(_OWORD *)a4;
    time2.start.CMTimeEpoch epoch = *(void *)(a4 + 16);
    *(_OWORD *)&duration.start.CMTimeValue value = *(_OWORD *)&a6->value;
    duration.start.CMTimeEpoch epoch = a6->epoch;
    uint64_t appended = appendEmptyEditTimeMappingDictionary(cf, allocator, a2, (uint64_t)time1, (uint64_t)&time2, &duration.start, (uint64_t)a6);
    if (!appended) {
      goto LABEL_46;
    }
    goto LABEL_49;
  }
  CFIndex v18 = (CMTime *)MEMORY[0x1E4F1FA48];
  if (v17)
  {
    *(_OWORD *)&time1[0].start.CMTimeValue value = *(_OWORD *)a4;
    time1[0].start.CMTimeEpoch epoch = *(void *)(a4 + 16);
    *(_OWORD *)&time2.start.CMTimeValue value = *MEMORY[0x1E4F1FA48];
    time2.start.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1FA48] + 16);
    if (CMTimeCompare(&time1[0].start, &time2.start) < 0) {
      goto LABEL_10;
    }
  }
  CMTime v53 = *v18;
  *(_OWORD *)&time1[0].start.CMTimeValue value = *(_OWORD *)a3;
  time1[0].start.CMTimeEpoch epoch = *(void *)(a3 + 16);
  long long v37 = *(_OWORD *)&v53.value;
  time2.CMTime start = v53;
  CMTimeEpoch epoch = v53.epoch;
  CMTimeRange v34 = a5;
  CFMutableArrayRef v35 = a8;
  CFAllocatorRef allocatora = allocator;
  if (CMTimeCompare(&time1[0].start, &time2.start) < 0)
  {
    *(_OWORD *)&time1[0].start.CMTimeValue value = *(_OWORD *)a3;
    time1[0].start.CMTimeEpoch epoch = *(void *)(a3 + 16);
    *(_OWORD *)&time2.start.CMTimeValue value = *(_OWORD *)&a6->value;
    time2.start.CMTimeEpoch epoch = a6->epoch;
    uint64_t appended = appendEmptyEditTimeMappingDictionary(cf, allocator, a2, (uint64_t)time1, MEMORY[0x1E4F1FA48], &time2.start, (uint64_t)a6);
    if (appended) {
      goto LABEL_49;
    }
    int v19 = 1;
  }
  else
  {
    int v19 = 0;
  }
  if (v41 < 1)
  {
LABEL_39:
    if (*(unsigned char *)(a4 + 12))
    {
      time1[0].CMTime start = v53;
      *(_OWORD *)&time2.start.CMTimeValue value = *(_OWORD *)a3;
      time2.start.CMTimeEpoch epoch = *(void *)(a3 + 16);
      if (CMTimeCompare(&time1[0].start, &time2.start) < 0)
      {
        *(_OWORD *)&time1[0].start.CMTimeValue value = *(_OWORD *)a3;
        CMTimeEpoch v31 = *(void *)(a3 + 16);
LABEL_44:
        time1[0].start.CMTimeEpoch epoch = v31;
        *(_OWORD *)&time2.start.CMTimeValue value = *(_OWORD *)a4;
        time2.start.CMTimeEpoch epoch = *(void *)(a4 + 16);
        *(_OWORD *)&duration.start.CMTimeValue value = *(_OWORD *)&a6->value;
        duration.start.CMTimeEpoch epoch = a6->epoch;
        uint64_t appended = appendEmptyEditTimeMappingDictionary(cf, allocatora, a2, (uint64_t)time1, (uint64_t)&time2, &duration.start, (uint64_t)a6);
        if (!appended) {
          goto LABEL_45;
        }
LABEL_49:
        uint64_t v21 = appended;
        goto LABEL_50;
      }
      time1[0].CMTime start = v53;
      *(_OWORD *)&time2.start.CMTimeValue value = *(_OWORD *)a4;
      time2.start.CMTimeEpoch epoch = *(void *)(a4 + 16);
      if (CMTimeCompare(&time1[0].start, &time2.start) < 0)
      {
        *(_OWORD *)&time1[0].start.CMTimeValue value = *(_OWORD *)&v53.value;
        CMTimeEpoch v31 = v53.epoch;
        goto LABEL_44;
      }
    }
LABEL_45:
    a8 = v35;
LABEL_46:
    *a8 = cf;
    uint64_t v21 = 0;
    if (a9)
    {
      long long v32 = *(_OWORD *)&a6->value;
      *(void *)(a9 + 16) = a6->epoch;
      *(_OWORD *)a9 = v32;
    }
    return v21;
  }
  CFIndex v22 = 0;
  while (1)
  {
    EditMediaTimeAtIndex = (char *)editBuilderGetEditMediaTimeAtIndex(a1, v22);
    double v24 = *((double *)EditMediaTimeAtIndex + 14);
    memset(&v52, 0, sizeof(v52));
    memset(&duration, 0, 24);
    long long v25 = *(_OWORD *)(EditMediaTimeAtIndex + 12);
    time1[0].start.CMTimeEpoch epoch = *(void *)(EditMediaTimeAtIndex + 28);
    *(_OWORD *)&time1[0].start.CMTimeValue value = v25;
    *(_OWORD *)&time2.start.CMTimeValue value = *(_OWORD *)(EditMediaTimeAtIndex + 60);
    time2.start.CMTimeEpoch epoch = *(void *)(EditMediaTimeAtIndex + 76);
    CMTimeAdd(&duration.start, &time1[0].start, &time2.start);
    memset(&v55, 0, sizeof(v55));
    *(_OWORD *)&time1[0].start.CMTimeValue value = *(_OWORD *)(EditMediaTimeAtIndex + 36);
    time1[0].start.CMTimeEpoch epoch = *(void *)(EditMediaTimeAtIndex + 52);
    *(_OWORD *)&time2.start.CMTimeValue value = *(_OWORD *)(EditMediaTimeAtIndex + 84);
    time2.start.CMTimeEpoch epoch = *(void *)(EditMediaTimeAtIndex + 100);
    CMTimeSubtract(&v55, &time1[0].start, &time2.start);
    time1[0].CMTime start = v55;
    *(_OWORD *)&time2.start.CMTimeValue value = *(_OWORD *)&duration.start.value;
    time2.start.CMTimeEpoch epoch = duration.start.epoch;
    CMTimeSubtract(&v52, &time1[0].start, &time2.start);
    memset(&v55, 0, sizeof(v55));
    time1[0].CMTime start = v52;
    CMTimeMultiplyByFloat64(&v55, &time1[0].start, 1.0 / v24);
    memset(&time2, 0, sizeof(time2));
    time1[0].CMTime start = v53;
    duration.CMTime start = v55;
    CMTimeRangeMake(&time2, &time1[0].start, &duration.start);
    memset(&v50, 0, sizeof(v50));
    long long v26 = *(_OWORD *)(EditMediaTimeAtIndex + 12);
    time1[0].start.CMTimeEpoch epoch = *(void *)(EditMediaTimeAtIndex + 28);
    *(_OWORD *)&time1[0].start.CMTimeValue value = v26;
    *(_OWORD *)&duration.start.CMTimeValue value = *(_OWORD *)(EditMediaTimeAtIndex + 60);
    duration.start.CMTimeEpoch epoch = *(void *)(EditMediaTimeAtIndex + 76);
    CMTimeAdd(&v50, &time1[0].start, &duration.start);
    CMTime v49 = v50;
    memset(&start, 0, sizeof(start));
    *(_OWORD *)&time1[0].start.CMTimeValue value = *(_OWORD *)(EditMediaTimeAtIndex + 36);
    time1[0].start.CMTimeEpoch epoch = *(void *)(EditMediaTimeAtIndex + 52);
    *(_OWORD *)&duration.start.CMTimeValue value = *(_OWORD *)(EditMediaTimeAtIndex + 84);
    duration.start.CMTimeEpoch epoch = *(void *)(EditMediaTimeAtIndex + 100);
    CMTimeSubtract(&start, &time1[0].start, &duration.start);
    if (!v19)
    {
      time1[0] = time2;
      *(_OWORD *)&duration.start.CMTimeValue value = *(_OWORD *)a3;
      duration.start.CMTimeEpoch epoch = *(void *)(a3 + 16);
      if (!CMTimeRangeContainsTime(time1, &duration.start))
      {
        int v19 = 0;
        char v27 = 1;
        goto LABEL_21;
      }
      memset(time1, 0, 24);
      *(_OWORD *)&duration.start.CMTimeValue value = *(_OWORD *)a3;
      duration.start.CMTimeEpoch epoch = *(void *)(a3 + 16);
      CMTime rhs = time2.start;
      CMTimeSubtract(&time1[0].start, &duration.start, &rhs);
      CMTime rhs = time1[0].start;
      CMTimeMultiplyByFloat64(&duration.start, &rhs, v24);
      *(_OWORD *)&time1[0].start.CMTimeValue value = *(_OWORD *)&duration.start.value;
      time1[0].start.CMTimeEpoch epoch = duration.start.epoch;
      CMTime rhs = v50;
      CMTimeAdd(&v49, &duration.start, &rhs);
    }
    char v27 = 0;
    int v19 = 1;
LABEL_21:
    time1[0] = time2;
    *(_OWORD *)&duration.start.CMTimeValue value = *(_OWORD *)a4;
    duration.start.CMTimeEpoch epoch = *(void *)(a4 + 16);
    int v28 = CMTimeRangeContainsTime(time1, &duration.start);
    if (v28)
    {
      memset(time1, 0, 24);
      *(_OWORD *)&duration.start.CMTimeValue value = *(_OWORD *)a4;
      duration.start.CMTimeEpoch epoch = *(void *)(a4 + 16);
      CMTime rhs = v53;
      CMTimeSubtract(&time1[0].start, &duration.start, &rhs);
      CMTime rhs = time1[0].start;
      CMTimeMultiplyByFloat64(&duration.start, &rhs, v24);
      time1[0].start.CMTimeEpoch epoch = duration.start.epoch;
      *(_OWORD *)&time1[0].start.CMTimeValue value = *(_OWORD *)&duration.start.value;
      CMTime rhs = duration.start;
      CMTime v46 = v50;
      CMTimeAdd(&duration.start, &rhs, &v46);
      CMTime start = duration.start;
    }
    if ((v27 & 1) == 0)
    {
      if (EditMediaTimeAtIndex[8])
      {
        time1[0].CMTime start = v49;
        duration.CMTime start = start;
        CMTime rhs = *a6;
        uint64_t appended = appendEmptyEditTimeMappingDictionary(cf, allocatora, a2, (uint64_t)time1, (uint64_t)&duration, &rhs, (uint64_t)a6);
        if (appended) {
          goto LABEL_49;
        }
        goto LABEL_35;
      }
      time1[0].CMTime start = start;
      duration.CMTime start = v49;
      CMTimeSubtract(&rhs, &time1[0].start, &duration.start);
      duration.CMTime start = rhs;
      CMTimeConvertScale(&time1[0].start, &duration.start, a2, kCMTimeRoundingMethod_QuickTime);
      CMTime rhs = time1[0].start;
      CMTimeMultiplyByFloat64(&v46, &time1[0].start, 1.0 / v24);
      *(_OWORD *)&time1[0].start.CMTimeValue value = v37;
      time1[0].start.CMTimeEpoch epoch = epoch;
      duration.CMTime start = v46;
      if (CMTimeCompare(&time1[0].start, &duration.start) < 0) {
        break;
      }
    }
LABEL_35:
    time1[0] = time2;
    CMTimeRangeGetEnd(&v53, time1);
    if (v28) {
      goto LABEL_45;
    }
    if (v41 == ++v22) {
      goto LABEL_39;
    }
  }
  memset(time1, 0, sizeof(time1));
  if (EditMediaTimeAtIndex[132])
  {
    CMTime lhs = v49;
    CMTime v43 = *(CMTime *)(EditMediaTimeAtIndex + 5);
    CMTimeSubtract(&duration.start, &lhs, &v43);
    CMTime v49 = duration.start;
    *(_OWORD *)&lhs.CMTimeValue value = v37;
    lhs.CMTimeEpoch epoch = epoch;
    CMTime v43 = duration.start;
    CMTimeMaximum(&duration.start, &lhs, &v43);
    CMTime v49 = duration.start;
  }
  CMTime lhs = v49;
  CMTime v43 = *v34;
  CMTimeAdd(&duration.start, &lhs, &v43);
  CMTime v49 = duration.start;
  CMTime lhs = rhs;
  CMTimeRangeMake(time1, &duration.start, &lhs);
  CMTime lhs = *a6;
  CMTime v43 = v46;
  CMTimeRangeMake(&duration, &lhs, &v43);
  time1[1] = duration;
  uint64_t v29 = copyFigTimeMappingAsDictionary(allocatora, (uint64_t)time1, &v54);
  CFDictionaryRef v30 = v54;
  if (!v29)
  {
    appendTrackEditSegmentDictionary(cf, v54);
    if (!v29)
    {
      if (v30)
      {
        CFRelease(v30);
        CFDictionaryRef v54 = 0;
      }
      CMTime lhs = *a6;
      CMTime v43 = time1[1].duration;
      CMTimeAdd(&duration.start, &lhs, &v43);
      *(_OWORD *)&a6->CMTimeValue value = *(_OWORD *)&duration.start.value;
      a6->CMTimeEpoch epoch = duration.start.epoch;
      goto LABEL_35;
    }
  }
  uint64_t v21 = v29;
  if (v30) {
    CFRelease(v30);
  }
LABEL_50:
  CFRelease(cf);
  return v21;
}

uint64_t appendEmptyEditTimeMappingDictionary(const __CFArray *a1, const __CFAllocator *a2, int32_t a3, uint64_t a4, uint64_t a5, CMTime *a6, uint64_t a7)
{
  CFDictionaryRef v23 = 0;
  *(_OWORD *)&lhs[0].start.CMTimeValue value = *(_OWORD *)a5;
  lhs[0].start.CMTimeEpoch epoch = *(void *)(a5 + 16);
  *(_OWORD *)&rhs.start.CMTimeValue value = *(_OWORD *)a4;
  rhs.start.CMTimeEpoch epoch = *(void *)(a4 + 16);
  CMTimeSubtract(&start, &lhs[0].start, &rhs.start);
  rhs.CMTime start = start;
  CMTimeConvertScale(&lhs[0].start, &rhs.start, a3, kCMTimeRoundingMethod_QuickTime);
  CMTimeEpoch epoch = lhs[0].start.epoch;
  CMTime start = lhs[0].start;
  long long v13 = *(_OWORD *)&lhs[0].start.value;
  *(_OWORD *)&lhs[0].start.CMTimeValue value = *MEMORY[0x1E4F1FA48];
  lhs[0].start.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1FA48] + 16);
  *(_OWORD *)&rhs.start.CMTimeValue value = v13;
  rhs.start.CMTimeEpoch epoch = epoch;
  CFDictionaryRef v14 = 0;
  if (CMTimeCompare(&lhs[0].start, &rhs.start) < 0)
  {
    *(_OWORD *)&rhs.start.CMTimeValue value = *MEMORY[0x1E4F1F9F8];
    rhs.start.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
    CMTime duration = rhs.start;
    CMTimeRangeMake(lhs, &rhs.start, &duration);
    memset(&lhs[1], 0, sizeof(CMTimeRange));
    CMTime duration = *a6;
    CMTime v18 = start;
    CMTimeRangeMake(&rhs, &duration, &v18);
    lhs[1] = rhs;
    uint64_t v15 = copyFigTimeMappingAsDictionary(a2, (uint64_t)lhs, &v23);
    CFDictionaryRef v14 = v23;
    if (v15 || (appendTrackEditSegmentDictionary(a1, v23), v15))
    {
      uint64_t v16 = v15;
      if (!v14) {
        return v16;
      }
      goto LABEL_5;
    }
  }
  *(_OWORD *)&rhs.start.CMTimeValue value = *(_OWORD *)&a6->value;
  rhs.start.CMTimeEpoch epoch = a6->epoch;
  CMTime duration = start;
  CMTimeAdd(&lhs[0].start, &rhs.start, &duration);
  uint64_t v16 = 0;
  *(_OWORD *)a7 = *(_OWORD *)&lhs[0].start.value;
  *(void *)(a7 + 16) = lhs[0].start.epoch;
  if (v14) {
LABEL_5:
  }
    CFRelease(v14);
  return v16;
}

uint64_t setTrackExtendsDefaultValuesIfNeeded(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 728)) {
    return 0;
  }
  uint64_t result = MovieTrackSetTrackExtendsDefaultValues(*(_DWORD **)(a1 + 736), 1, 0, 0, 0);
  if (!result) {
    *(unsigned char *)(a1 + 728) = 1;
  }
  return result;
}

CFStringRef createiTunesGaplessInfoString(const __CFDictionary *a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  int v10 = 0;
  int valuePtr = 0;
  uint64_t v9 = 0;
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a1, @"EncodingDelayInFrame");
  CFNumberRef v3 = (const __CFNumber *)CFDictionaryGetValue(a1, @"EncodingDrainInFrames");
  CFNumberRef v4 = (const __CFNumber *)CFDictionaryGetValue(a1, @"DurationInFrames");
  if (Value) {
    CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
  }
  if (v3) {
    CFNumberGetValue(v3, kCFNumberSInt32Type, &v10);
  }
  if (v4)
  {
    CFNumberGetValue(v4, kCFNumberSInt64Type, &v9);
    uint64_t v5 = v9;
  }
  else
  {
    uint64_t v5 = 0;
  }
  *(_DWORD *)&v14[15] = 808464432;
  *(void *)&long long v6 = 0x3030303030303030;
  *((void *)&v6 + 1) = 0x3030303030303030;
  *(_OWORD *)CFDictionaryRef v14 = v6;
  unint64_t v13[5] = v6;
  v13[4] = v6;
  v13[3] = v6;
  v13[2] = v6;
  v13[1] = v6;
  v13[0] = v6;
  UInt8 bytes = 32;
  snprintf((char *)v13 + 8, 0x24uLL, " %08X %08X %016llX", valuePtr, v10, v5);
  uint64_t v7 = 44;
  do
  {
    *(&bytes + v7) = 32;
    v7 += 9;
  }
  while (v7 != 116);
  return CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E4F1CF80], &bytes, 116, 0x600u, 0);
}

uint64_t copyMetadataSerializer(uint64_t a1, uint64_t a2, const void *a3, CFTypeRef *a4)
{
  CFTypeRef cf = 0;
  uint64_t v13 = 0;
  if (a4)
  {
    uint64_t result = getMetadataSerializer(a1, a2, a3, &v13);
    if (!result)
    {
      uint64_t v7 = v13;
      if (v13)
      {
        uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 24);
        if (v8) {
          uint64_t v9 = v8;
        }
        else {
          uint64_t v9 = 0;
        }
        int v10 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *))(v9 + 16);
        if (v10)
        {
          uint64_t result = v10(a1, v7, &cf);
          if (result)
          {
            uint64_t v11 = result;
            if (cf) {
              CFRelease(cf);
            }
            return v11;
          }
          else
          {
            *a4 = cf;
          }
        }
        else
        {
          return 4294954514;
        }
      }
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

void transferMovieMetadata(uint64_t a1, CFDictionaryRef theDict, CFTypeRef *a3, CFTypeRef *a4, CFTypeRef *a5)
{
  CFArrayRef theArray = 0;
  CFTypeRef cf1 = 0;
  CFTypeRef cf = 0;
  if (!theDict || !a3 || !a4) {
    goto LABEL_59;
  }
  uint64_t v7 = a5;
  if (!a5)
  {
    FigSignalErrorAt();
    goto LABEL_61;
  }
  if (CFDictionaryGetValue(theDict, @"items"))
  {
    CFNumberRef Value = CFDictionaryGetValue(theDict, @"format");
    if (Value) {
      uint64_t v11 = (__CFString *)CFRetain(Value);
    }
    else {
      uint64_t v11 = 0;
    }
    CFTypeRef cf1 = v11;
    copyMetadataDestinationFormat(a1, v11, &theArray);
    goto LABEL_13;
  }
  CFArrayRef v12 = CFDictionaryGetValue(theDict, @"MetadataReader");
  if (!v12)
  {
LABEL_59:
    FigSignalErrorAt();
    goto LABEL_60;
  }
  if (copyMetadataSourceAndDestinationFormats(a1, (uint64_t)v12, &cf1, &theArray)) {
    goto LABEL_60;
  }
LABEL_13:
  CFIndex Count = CFArrayGetCount(theArray);
  if (Count < 1)
  {
LABEL_60:
    uint64_t v7 = 0;
LABEL_61:
    CFSetRef Mutable = 0;
    goto LABEL_62;
  }
  CFIndex v14 = Count;
  uint64_t v29 = a3;
  char v27 = v7;
  CFSetRef Mutable = 0;
  CFIndex v16 = 0;
  uint64_t v7 = 0;
  CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  while (1)
  {
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    if (v7) {
      CFRelease(v7);
    }
    CFAttributedStringRef ValueAtIndex = (__CFString *)CFArrayGetValueAtIndex(theArray, v16);
    if (cf1 && !CFEqual(cf1, ValueAtIndex) && createMetadataConverter(a1, cf1, ValueAtIndex, &cf))
    {
LABEL_34:
      uint64_t v7 = 0;
      goto LABEL_56;
    }
    if (CFEqual(ValueAtIndex, @"com.apple.quicktime.udta"))
    {
      if (*(unsigned char *)(a1 + 684)) {
        goto LABEL_26;
      }
LABEL_28:
      CFTypeRef v18 = *v29;
      if (*v29) {
        goto LABEL_40;
      }
      uint64_t v19 = (uint64_t)allocator;
      uint64_t v20 = v29;
      uint64_t v21 = a1;
      CFIndex v22 = ValueAtIndex;
      goto LABEL_30;
    }
    if (CFEqual(ValueAtIndex, @"org.mp4ra"))
    {
      if ((*(unsigned char *)(a1 + 684) & 1) == 0) {
        goto LABEL_26;
      }
      goto LABEL_28;
    }
    if (CFEqual(ValueAtIndex, @"com.apple.quicktime.mdta"))
    {
      CFTypeRef v18 = *a4;
      if (*a4) {
        goto LABEL_40;
      }
      uint64_t v19 = (uint64_t)allocator;
      uint64_t v21 = a1;
      CFIndex v22 = ValueAtIndex;
      uint64_t v20 = a4;
    }
    else
    {
      if (!CFEqual(ValueAtIndex, @"com.apple.itunes")) {
        goto LABEL_26;
      }
      CFTypeRef v18 = *v27;
      if (*v27) {
        goto LABEL_40;
      }
      uint64_t v19 = (uint64_t)allocator;
      uint64_t v21 = a1;
      CFIndex v22 = ValueAtIndex;
      uint64_t v20 = v27;
    }
LABEL_30:
    if (copyMetadataSerializer(v19, v21, v22, v20)) {
      goto LABEL_34;
    }
    CFTypeRef v18 = *v20;
    if (*v20)
    {
LABEL_40:
      uint64_t FigMetadataWriter = (const void *)FigMetadataSerializerGetFigMetadataWriter(v18);
      if (FigMetadataWriter) {
        uint64_t v7 = (CFTypeRef *)CFRetain(FigMetadataWriter);
      }
      else {
        uint64_t v7 = 0;
      }
      goto LABEL_43;
    }
LABEL_26:
    uint64_t v7 = 0;
    if (FigSignalErrorAt()) {
      goto LABEL_56;
    }
LABEL_43:
    BOOL v25 = (*(unsigned char *)(a1 + 684) & 4) == 0 || ValueAtIndex != @"com.apple.itunes";
    if (cf1 && CFEqual(cf1, ValueAtIndex)) {
      BOOL v25 = 0;
    }
    if (!Mutable)
    {
      CFSetRef Mutable = CFSetCreateMutable(allocator, 0, MEMORY[0x1E4F1D548]);
      if (!Mutable) {
        break;
      }
    }
    int v26 = transferMetadata(a1, theDict, (uint64_t)cf, (uint64_t)v7, *(const __CFDictionary **)(a1 + 312), Mutable, v25);
    if (v26 && v26 != -12583) {
      goto LABEL_62;
    }
LABEL_56:
    if (v14 == ++v16) {
      goto LABEL_62;
    }
  }
  FigSignalErrorAt();
LABEL_62:
  if (cf1) {
    CFRelease(cf1);
  }
  if (theArray) {
    CFRelease(theArray);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v7) {
    CFRelease(v7);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
}

CFArrayRef copyMetadataDestinationFormat(uint64_t a1, __CFString *cf1, CFArrayRef *a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  int v10 = 0;
  int v4 = *(_DWORD *)(a1 + 684);
  if ((v4 & 4) != 0)
  {
    uint64_t v8 = @"com.apple.itunes";
    uint64_t v9 = @"org.mp4ra";
  }
  else
  {
    if (v4)
    {
      uint64_t v8 = @"org.mp4ra";
      goto LABEL_10;
    }
    if (cf1)
    {
      if (CFEqual(cf1, @"com.apple.quicktime.mdta") || CFEqual(cf1, @"com.apple.quicktime.udta"))
      {
        uint64_t v8 = cf1;
LABEL_10:
        CFIndex v6 = 1;
        goto LABEL_11;
      }
      if (CFEqual(cf1, @"com.apple.itunes"))
      {
        uint64_t v8 = @"com.apple.itunes";
        uint64_t v9 = @"com.apple.quicktime.mdta";
        CFIndex v6 = 3;
        int v10 = @"com.apple.quicktime.udta";
        goto LABEL_11;
      }
      if (!CFEqual(cf1, @"org.mp4ra"))
      {
        CFIndex v6 = 0;
        goto LABEL_11;
      }
      uint64_t v8 = @"com.apple.quicktime.mdta";
      uint64_t v9 = @"com.apple.quicktime.udta";
    }
    else
    {
      uint64_t v8 = @"com.apple.quicktime.mdta";
      uint64_t v9 = @"com.apple.quicktime.udta";
    }
  }
  CFIndex v6 = 2;
LABEL_11:
  CFArrayRef result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)&v8, v6, MEMORY[0x1E4F1D510]);
  *a3 = result;
  return result;
}

uint64_t copyMetadataSourceAndDestinationFormats(uint64_t a1, uint64_t a2, CFTypeRef *a3, CFArrayRef *a4)
{
  CFTypeRef cf = 0;
  if ((unint64_t)a3 | (unint64_t)a4)
  {
    uint64_t FigBaseObject = FigMetadataReaderGetFigBaseObject(a2);
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    int v10 = *(uint64_t (**)(uint64_t, __CFString *, void, CFTypeRef *))(v9 + 48);
    if (v10)
    {
      uint64_t v11 = v10(FigBaseObject, @"format", *MEMORY[0x1E4F1CF80], &cf);
      if (v11)
      {
        CFTypeRef v12 = cf;
      }
      else
      {
        if (a4) {
          copyMetadataDestinationFormat(a1, (__CFString *)cf, a4);
        }
        CFTypeRef v12 = cf;
        if (a3)
        {
          uint64_t v11 = 0;
          *a3 = cf;
          return v11;
        }
      }
      if (v12) {
        CFRelease(v12);
      }
      return v11;
    }
    return 4294954514;
  }

  return FigSignalErrorAt();
}

uint64_t createMetadataConverter(uint64_t a1, CFTypeRef cf1, const void *a3, void *a4)
{
  uint64_t v13 = 0;
  int v7 = *(_DWORD *)(a1 + 684);
  if ((v7 & 2) != 0)
  {
    CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    int v10 = kFigMetadataConverterDestFileFormat_ISO_3GP;
  }
  else
  {
    CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    if ((v7 & 1) == 0)
    {
      CFDictionaryRef v9 = 0;
      goto LABEL_7;
    }
    int v10 = kFigMetadataConverterDestFileFormat_ISO_MP4;
  }
  CFDictionaryRef v9 = CFDictionaryCreate(v8, (const void **)kFigMetadataConverterCreateOption_DestFileFormat, (const void **)v10, 1, 0, 0);
LABEL_7:
  uint64_t v11 = FigMetadataCreateConverter(cf1, a3, v9, (int)v8, &v13);
  if (!v11) {
    *a4 = v13;
  }
  if (v9) {
    CFRelease(v9);
  }
  return v11;
}

uint64_t transferMetadata(uint64_t a1, CFDictionaryRef theDict, uint64_t a3, uint64_t a4, const __CFDictionary *a5, const __CFSet *a6, int a7)
{
  if (!theDict || (uint64_t v7 = a4) == 0)
  {
    return FigSignalErrorAt();
  }
  unint64_t Value = (unint64_t)CFDictionaryGetValue(theDict, @"MetadataReader");
  if (!Value) {
    goto LABEL_169;
  }
  CFArrayRef v112 = (const __CFArray *)CFDictionaryGetValue(theDict, @"MetadataKeysToTransfer");
  CFArrayRef v111 = (const __CFArray *)CFDictionaryGetValue(theDict, @"MetadataKeysToIgnore");
  CFDictionaryRef v115 = 0;
  long long v116 = 0;
  CFDictionaryRef v113 = 0;
  CFTypeRef v114 = 0;
  uint64_t FigBaseObject = FigMetadataReaderGetFigBaseObject(Value);
  uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v12) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  CFIndex v14 = *(uint64_t (**)(uint64_t, __CFString *, void, CFTypeRef *))(v13 + 48);
  if (!v14)
  {
    int v17 = 0;
    uint64_t Instance = 0;
    uint64_t v19 = 4294954514;
    goto LABEL_156;
  }
  CFAllocatorRef v15 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v16 = v14(FigBaseObject, @"format", *MEMORY[0x1E4F1CF80], &v114);
  if (v16)
  {
    uint64_t v19 = v16;
    int v17 = 0;
    uint64_t Instance = 0;
    goto LABEL_156;
  }
  if (v112) {
    CFIndex range = CFArrayGetCount(v112);
  }
  else {
    CFIndex range = 0;
  }
  if (!v111)
  {
    CFTypeRef Count = 0;
    if (a5) {
      goto LABEL_15;
    }
LABEL_17:
    unsigned int v92 = 0;
    goto LABEL_18;
  }
  CFTypeRef Count = (CFTypeRef)CFArrayGetCount(v111);
  if (!a5) {
    goto LABEL_17;
  }
LABEL_15:
  unsigned int v92 = CFDictionaryContainsKey(a5, @"comn");
LABEL_18:
  uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v20) {
    uint64_t v21 = v20;
  }
  else {
    uint64_t v21 = 0;
  }
  CFIndex v22 = *(uint64_t (**)(unint64_t, void, void))(v21 + 40);
  if (!v22 || (uint64_t v109 = v22(Value, 0, 0), v109 < 1))
  {
    int v17 = 0;
    uint64_t Instance = 0;
    uint64_t v19 = 0;
    goto LABEL_156;
  }
  uint64_t v98 = v7;
  uint64_t v23 = 0;
  while (1)
  {
    uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v24) {
      uint64_t v25 = v24;
    }
    else {
      uint64_t v25 = 0;
    }
    int v26 = *(uint64_t (**)(unint64_t, void, void, uint64_t, const __CFAllocator *, const void **, const __CFDictionary **))(v25 + 48);
    if (!v26)
    {
      int v17 = 0;
      uint64_t Instance = 0;
      uint64_t v19 = 4294954514;
      goto LABEL_155;
    }
    uint64_t v27 = v26(Value, 0, 0, v23, v15, &v116, &v115);
    if (v27) {
      break;
    }
    MEMORY[0x19970EE10](&sourceIndexPairGetTypeID_sRegisterSourceIndexPairOnce, registerSourceIndexPair);
    CFAllocatorRef v28 = v15;
    uint64_t Instance = (void *)_CFRuntimeCreateInstance();
    Instance[2] = Value;
    Instance[3] = v23;
    uint64_t v29 = CFDictionaryGetValue(v115, @"keyspace");
    CFDictionaryRef v30 = CFDictionaryGetValue(v115, @"key");
    int v17 = 0;
    if (!v30 || !v29 || !v116 || !v115) {
      goto LABEL_80;
    }
    CMTimeEpoch v31 = v30;
    CFTypeRef v32 = v114;
    if (!CFEqual(v114, @"com.apple.quicktime.udta") && !CFEqual(v32, @"org.mp4ra")) {
      goto LABEL_40;
    }
    if (CFEqual(v31, @"meta"))
    {
      if (!CFEqual(v29, @"itlk")) {
        goto LABEL_79;
      }
      BOOL v33 = 1;
LABEL_42:
      if (CFEqual(v31, @"com.apple.iTunes.iTunSMPB") | v33) {
        goto LABEL_79;
      }
      goto LABEL_43;
    }
    CFTypeID TypeID = CFNumberGetTypeID();
    if (TypeID == CFGetTypeID(v31))
    {
      LODWORD(valuePtr[0]) = 0;
      CFNumberGetValue((CFNumberRef)v31, kCFNumberSInt32Type, valuePtr);
      BOOL v33 = LODWORD(valuePtr[0]) == 1835365473;
    }
    else
    {
LABEL_40:
      BOOL v33 = 0;
    }
    if (CFEqual(v29, @"itlk")) {
      goto LABEL_42;
    }
    if (v33) {
      goto LABEL_79;
    }
LABEL_43:
    if (v112)
    {
      v125.location = 0;
      v125.CFIndex length = range;
      BOOL v35 = CFArrayContainsValue(v112, v125, v31) != 0;
    }
    else
    {
      if (!v111)
      {
        if (!a7) {
          goto LABEL_57;
        }
        LOBYTE(v35) = 1;
LABEL_50:
        int v17 = 0;
        if (CFSetContainsValue(a6, Instance) || !v35) {
          goto LABEL_80;
        }
        goto LABEL_57;
      }
      v126.location = 0;
      v126.CFIndex length = (CFIndex)Count;
      BOOL v35 = CFArrayContainsValue(v111, v126, v31) == 0;
    }
    if (a7) {
      goto LABEL_50;
    }
    if (!v35) {
      goto LABEL_79;
    }
LABEL_57:
    if (a3)
    {
      CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(v28, 0, v115);
      if (MutableCopy)
      {
        long long v37 = MutableCopy;
        CFDictionaryAddValue(MutableCopy, @"value", v116);
        uint64_t v38 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v38) {
          uint64_t v39 = v38;
        }
        else {
          uint64_t v39 = 0;
        }
        CFIndex v40 = *(unsigned int (**)(uint64_t, __CFDictionary *, const __CFAllocator *, const __CFDictionary **))(v39 + 8);
        if (!v40 || v40(a3, v37, v28, &v113))
        {
          CFRelease(v37);
LABEL_79:
          int v17 = 0;
          goto LABEL_80;
        }
        CFRelease(v37);
        if (v116)
        {
          CFRelease(v116);
          long long v116 = 0;
        }
        if (v115)
        {
          CFRelease(v115);
          CFDictionaryRef v115 = 0;
        }
        CMTimeEpoch v31 = CFDictionaryGetValue(v113, @"key");
        uint64_t v29 = CFDictionaryGetValue(v113, @"keyspace");
        uint64_t v41 = CFDictionaryGetValue(v113, @"value");
        if (v41) {
          uint64_t v41 = CFRetain(v41);
        }
        CFDictionaryRef v115 = v113;
        long long v116 = v41;
        CFDictionaryRef v113 = 0;
      }
    }
    if (a5 && !doesWhitelistContainKeyspaceAndKey(a5, v92, v29, (const __CFNumber *)v31)) {
      goto LABEL_79;
    }
    if (CFEqual(v31, @"com.apple.quicktime.aime-data"))
    {
      if (!CFEqual(*(CFTypeRef *)(a1 + 712), @"com.apple.immersive-video")
        && !CFEqual(*(CFTypeRef *)(a1 + 712), @"com.apple.quicktime-movie"))
      {
        goto LABEL_79;
      }
      CFTypeRef cf = v116;
      CFTypeRef v122 = 0;
      valuePtr[0] = 0;
      uint64_t v120 = 0;
      long long v121 = 0;
      CFIndex v118 = 0;
      CFIndex v119 = 0;
      dataPointerOut = 0;
      uint64_t v42 = FigMetadataReaderGetFigBaseObject(Value);
      uint64_t v43 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v43) {
        uint64_t v44 = v43;
      }
      else {
        uint64_t v44 = 0;
      }
      CMTime v46 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v44 + 48);
      unint64_t v95 = Value;
      CFIndex v90 = v29;
      if (!v46) {
        goto LABEL_119;
      }
      uint64_t v19 = v46(v42, @"containerByteStream", v28, valuePtr);
      int v17 = 0;
      CFTypeRef v47 = valuePtr[0];
      if (v19 || !valuePtr[0])
      {
        int v91 = 1;
        CMTime v52 = 0;
        cfc = 0;
        if (valuePtr[0]) {
          goto LABEL_122;
        }
        goto LABEL_123;
      }
      uint64_t v48 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v49 = v48 ? v48 : 0;
      CMTime v46 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v49 + 24);
      if (!v46) {
        goto LABEL_119;
      }
      uint64_t v50 = ((uint64_t (*)(CFTypeRef, void, CFIndex *))v46)(v47, 0, &v118);
      uint64_t v19 = v50;
      int v17 = 0;
      int v51 = 1;
      if (!cf) {
        goto LABEL_107;
      }
      CMTime v52 = 0;
      CMTime v46 = 0;
      if (v50) {
        goto LABEL_121;
      }
      CFTypeID v53 = CFGetTypeID(cf);
      if (v53 != CFDictionaryGetTypeID()) {
        goto LABEL_105;
      }
      FigCFDictionaryGetInt64IfPresent();
      FigCFDictionaryGetInt64IfPresent();
      uint64_t v19 = 0;
      int v17 = 0;
      uint64_t v54 = v120;
      int v51 = 1;
      if (v120 < 1)
      {
LABEL_107:
        CMTime v52 = 0;
        CMTime v46 = 0;
        goto LABEL_121;
      }
      CMTime v52 = 0;
      CMTime v46 = 0;
      if (v119 < 1) {
        goto LABEL_121;
      }
      if (v119 + v120 > v118)
      {
LABEL_105:
        int v17 = 0;
        uint64_t v19 = 0;
        goto LABEL_106;
      }
      CFIndex v55 = v119;
      CFTypeRef v56 = valuePtr[0];
      uint64_t v57 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v58 = v57 ? v57 : 0;
      CMTime v46 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v58 + 32);
      if (v46)
      {
        uint64_t DataPointer = ((uint64_t (*)(CFTypeRef, CFIndex, uint64_t, OpaqueCMBlockBuffer **, void))v46)(v56, v55, v54, &v121, 0);
        if (!DataPointer)
        {
          uint64_t DataPointer = CMBlockBufferGetDataPointer(v121, 0, 0, 0, &dataPointerOut);
          if (!DataPointer)
          {
            CFDataRef cfb = CFDataCreate(v28, (const UInt8 *)dataPointerOut, v119);
            if (cfb)
            {
              uint64_t v60 = FigCFDictionaryCreateMutableCopy();
              if (v60)
              {
                CMTime v52 = (const void *)v60;
                FigCFDictionarySetValue();
                uint64_t v19 = writeReferencedDataAndCopyUpdatedMetadataItem(a1, (uint64_t)v52, &v122);
                if (v19)
                {
                  int v17 = 0;
                  int v51 = 1;
                }
                else
                {
                  int v51 = 0;
                  int v17 = v122;
                  CFTypeRef v122 = 0;
                }
                CMTime v46 = (uint64_t (*)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))cfb;
              }
              else
              {
                uint64_t v19 = FigSignalErrorAt();
                int v17 = 0;
                CMTime v52 = 0;
                int v51 = 1;
                CMTime v46 = (uint64_t (*)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))cfb;
              }
LABEL_121:
              cfc = v46;
              int v91 = v51;
              CFTypeRef v47 = valuePtr[0];
              if (valuePtr[0]) {
LABEL_122:
              }
                CFRelease(v47);
LABEL_123:
              if (v52) {
                CFRelease(v52);
              }
              unint64_t Value = v95;
              if (v121) {
                CFRelease(v121);
              }
              if (cfc) {
                CFRelease(cfc);
              }
              if (v122) {
                CFRelease(v122);
              }
              if (v19) {
                goto LABEL_155;
              }
              if (v91) {
                goto LABEL_80;
              }
              CFDictionaryRef v61 = v115;
              CFDictionaryRef v115 = v17;
              if (v17) {
                CFRetain(v17);
              }
              uint64_t v29 = v90;
              if (v61) {
                CFRelease(v61);
              }
              CFDictionaryRef cfa = a5;
              uint64_t v62 = v116;
              uint64_t v63 = CFDictionaryGetValue(v115, @"value");
              long long v116 = v63;
              if (v63) {
                CFRetain(v63);
              }
              unint64_t v45 = v95;
              if (v62) {
                CFRelease(v62);
              }
              goto LABEL_141;
            }
            uint64_t DataPointer = FigSignalErrorAt();
          }
        }
        uint64_t v19 = DataPointer;
        int v17 = 0;
LABEL_106:
        CMTime v52 = 0;
        CMTime v46 = 0;
      }
      else
      {
LABEL_119:
        int v17 = 0;
        CMTime v52 = 0;
        uint64_t v19 = 4294954514;
      }
      int v51 = 1;
      goto LABEL_121;
    }
    CFDictionaryRef cfa = a5;
    unint64_t v45 = Value;
    int v17 = 0;
LABEL_141:
    CFDictionaryRef v65 = v115;
    uint64_t v64 = v116;
    uint64_t v66 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v66) {
      uint64_t v67 = v66;
    }
    else {
      uint64_t v67 = 0;
    }
    CFIndex v68 = *(uint64_t (**)(uint64_t, const void *, const void *, const void *, const __CFDictionary *))(v67 + 8);
    if (!v68)
    {
      uint64_t v19 = 4294954514;
LABEL_226:
      unint64_t Value = v45;
      a5 = cfa;
      goto LABEL_155;
    }
    uint64_t v69 = v68(v98, v29, v31, v64, v65);
    if (v69)
    {
      uint64_t v19 = v69;
      goto LABEL_226;
    }
    CFSetAddValue(a6, Instance);
    unint64_t Value = v45;
    a5 = cfa;
LABEL_80:
    if (v113)
    {
      CFRelease(v113);
      CFDictionaryRef v113 = 0;
    }
    if (v116)
    {
      CFRelease(v116);
      long long v116 = 0;
    }
    if (v115)
    {
      CFRelease(v115);
      CFDictionaryRef v115 = 0;
    }
    CFRelease(Instance);
    if (v17) {
      CFRelease(v17);
    }
    ++v23;
    CFAllocatorRef v15 = v28;
    if (v109 == v23)
    {
      int v17 = 0;
      uint64_t Instance = 0;
      uint64_t v19 = 0;
      goto LABEL_155;
    }
  }
  uint64_t v19 = v27;
  int v17 = 0;
  uint64_t Instance = 0;
LABEL_155:
  uint64_t v7 = v98;
LABEL_156:
  if (v114) {
    CFRelease(v114);
  }
  if (v116) {
    CFRelease(v116);
  }
  if (v115) {
    CFRelease(v115);
  }
  if (v113) {
    CFRelease(v113);
  }
  if (Instance) {
    CFRelease(Instance);
  }
  if (v17) {
    CFRelease(v17);
  }
  if (v19) {
    return v19;
  }
LABEL_169:
  uint64_t v110 = CFDictionaryGetValue(theDict, @"format");
  CFArrayRef v70 = (const __CFArray *)CFDictionaryGetValue(theDict, @"items");
  if (!v70) {
    goto LABEL_221;
  }
  CFTypeRef v122 = 0;
  valuePtr[0] = 0;
  if (a5) {
    unsigned int v97 = CFDictionaryContainsKey(a5, @"comn");
  }
  else {
    unsigned int v97 = 0;
  }
  CFIndex v71 = CFArrayGetCount(v70);
  if (v71 < 1)
  {
    uint64_t v19 = 0;
    goto LABEL_218;
  }
  CFIndex v72 = v71;
  uint64_t v99 = v7;
  CFDictionaryRef cfd = a5;
  unint64_t v96 = Value;
  CFIndex v73 = 0;
  uint64_t v74 = *MEMORY[0x1E4F1CF80];
  while (2)
  {
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v70, v73);
    MEMORY[0x19970EE10](&sourceIndexPairGetTypeID_sRegisterSourceIndexPairOnce, registerSourceIndexPair);
    uint64_t v76 = (void *)_CFRuntimeCreateInstance();
    v76[2] = v70;
    v76[3] = v73;
    CFStringRef v77 = CFDictionaryGetValue(ValueAtIndex, @"keyspace");
    CFTypeID v78 = CFDictionaryGetValue(ValueAtIndex, @"key");
    CFTypeID v79 = CFDictionaryGetValue(ValueAtIndex, @"value");
    if (!v78) {
      goto LABEL_207;
    }
    if (!v77) {
      goto LABEL_207;
    }
    uint64_t v80 = v79;
    if (!v79 || !v110 && !CFEqual(v77, @"comn")) {
      goto LABEL_207;
    }
    if (CFEqual(v77, @"itlk") && CFEqual(v78, @"com.apple.iTunes.iTunSMPB")
      || a7 && CFSetContainsValue(a6, v76))
    {
      goto LABEL_207;
    }
    if (a3)
    {
      uint64_t v81 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v81) {
        uint64_t v82 = v81;
      }
      else {
        uint64_t v82 = 0;
      }
      int32_t v83 = *(unsigned int (**)(uint64_t, const __CFDictionary *, uint64_t, CFTypeRef *))(v82 + 8);
      if (v83 && !v83(a3, ValueAtIndex, v74, valuePtr))
      {
        CFTypeID v78 = CFDictionaryGetValue((CFDictionaryRef)valuePtr[0], @"key");
        CFStringRef v77 = CFDictionaryGetValue((CFDictionaryRef)valuePtr[0], @"keyspace");
        uint64_t v80 = CFDictionaryGetValue((CFDictionaryRef)valuePtr[0], @"value");
        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)valuePtr[0];
        break;
      }
LABEL_207:
      if (valuePtr[0])
      {
        CFRelease(valuePtr[0]);
        valuePtr[0] = 0;
      }
      CFRelease(v76);
      if (v122)
      {
        CFRelease(v122);
        CFTypeRef v122 = 0;
      }
      if (v72 == ++v73)
      {
        uint64_t v76 = 0;
        uint64_t v19 = 0;
        goto LABEL_213;
      }
      continue;
    }
    break;
  }
  if (cfd && !doesWhitelistContainKeyspaceAndKey(cfd, v97, v77, (const __CFNumber *)v78)) {
    goto LABEL_207;
  }
  FigCFDictionaryGetStringValue();
  if (!FigCFEqual())
  {
LABEL_199:
    uint64_t v85 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v85) {
      uint64_t v86 = v85;
    }
    else {
      uint64_t v86 = 0;
    }
    uint64_t v87 = *(uint64_t (**)(uint64_t, const void *, const void *, const void *, const __CFDictionary *))(v86 + 8);
    if (!v87)
    {
      uint64_t v19 = 4294954514;
      goto LABEL_213;
    }
    uint64_t v88 = v87(v99, v77, v78, v80, ValueAtIndex);
    if (v88 != -12588)
    {
      uint64_t v19 = v88;
      if (v88 != -12583)
      {
        if (v88) {
          goto LABEL_213;
        }
        CFSetAddValue(a6, v76);
      }
    }
    goto LABEL_207;
  }
  if (!CFEqual(v78, @"com.apple.quicktime.aime-data")
    || !CFEqual(*(CFTypeRef *)(a1 + 712), @"com.apple.immersive-video")
    && !CFEqual(*(CFTypeRef *)(a1 + 712), @"com.apple.quicktime-movie"))
  {
    goto LABEL_207;
  }
  uint64_t v84 = writeReferencedDataAndCopyUpdatedMetadataItem(a1, (uint64_t)ValueAtIndex, &v122);
  if (!v84)
  {
    CFDictionaryRef ValueAtIndex = v122;
    if (!v122) {
      goto LABEL_207;
    }
    goto LABEL_199;
  }
  uint64_t v19 = v84;
LABEL_213:
  unint64_t Value = v96;
  if (valuePtr[0]) {
    CFRelease(valuePtr[0]);
  }
  if (v76) {
    CFRelease(v76);
  }
LABEL_218:
  if (v122) {
    CFRelease(v122);
  }
  if (!v19)
  {
LABEL_221:
    if (Value | (unint64_t)v70) {
      return 0;
    }
    else {
      return FigSignalErrorAt();
    }
  }
  return v19;
}

uint64_t doesWhitelistContainKeyspaceAndKey(const __CFDictionary *a1, uint64_t a2, const void *a3, const __CFNumber *a4)
{
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(a1, a3);
  if (Value)
  {
    CFArrayRef v9 = Value;
    CFTypeID v10 = CFGetTypeID(Value);
    if (v10 != CFArrayGetTypeID()) {
      return 0;
    }
    CFTypeID TypeID = CFNumberGetTypeID();
    if (TypeID == CFGetTypeID(a4))
    {
      unsigned int valuePtr = 0;
      CFNumberGetValue(a4, kCFNumberSInt32Type, &valuePtr);
      *(_DWORD *)cStr = bswap32(valuePtr);
      char v16 = 0;
      CFStringRef v12 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], cStr, 0);
      a4 = (const __CFNumber *)v12;
    }
    else
    {
      CFStringRef v12 = 0;
    }
    v18.CFIndex length = CFArrayGetCount(v9);
    v18.location = 0;
    if (CFArrayContainsValue(v9, v18, a4))
    {
      a2 = 1;
      if (!v12) {
        return a2;
      }
      goto LABEL_14;
    }
  }
  else
  {
    CFStringRef v12 = 0;
  }
  if (a2)
  {
    if (!FigCFEqual())
    {
      CommonKey = FigMetadataGetCommonKey(a3, (const __CFString *)a4);
      if (CommonKey)
      {
        a2 = doesWhitelistContainKeyspaceAndKey(a1, a2, @"comn", CommonKey);
        if (!v12) {
          return a2;
        }
        goto LABEL_14;
      }
    }
    a2 = 0;
  }
  if (v12) {
LABEL_14:
  }
    CFRelease(v12);
  return a2;
}

uint64_t registerSourceIndexPair()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sSourceIndexPairID = result;
  return result;
}

BOOL sourceIndexPair_equal(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 16) == *(void *)(a2 + 16) && *(void *)(a1 + 24) == *(void *)(a2 + 24);
}

uint64_t sourceIndexPair_hash(uint64_t a1)
{
  return *(void *)(a1 + 24) ^ *(void *)(a1 + 16);
}

CFStringRef sourceIndexPair_copyDebugDesc(uint64_t a1)
{
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (a1) {
    return CFStringCreateWithFormat(v2, 0, @"[SourceIndexPair %p] arraySource: %p index: %ld", a1, *(void *)(a1 + 16), *(void *)(a1 + 24));
  }
  else {
    return CFStringCreateWithFormat(v2, 0, @"[SourceIndexPair %p]", 0);
  }
}

uint64_t writeReferencedDataAndCopyUpdatedMetadataItem(uint64_t a1, uint64_t a2, __CFDictionary **a3)
{
  CFTypeRef cf = 0;
  CMTime values = 0;
  uint64_t v13 = 0;
  DataCFArrayRef Value = (const __CFData *)FigCFDictionaryGetDataValue();
  if (!DataValue)
  {
    uint64_t BlockBufferWithCFDataNoCopy = FigSignalErrorAt();
LABEL_17:
    uint64_t v11 = BlockBufferWithCFDataNoCopy;
    CFMutableDictionaryRef MutableCopy = 0;
    goto LABEL_8;
  }
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFDataGetLength(DataValue);
  uint64_t BlockBufferWithCFDataNoCopy = FigCreateBlockBufferWithCFDataNoCopy();
  if (BlockBufferWithCFDataNoCopy) {
    goto LABEL_17;
  }
  uint64_t BlockBufferWithCFDataNoCopy = MovieSampleDataWriterAppendBlockBuffer(*(uint64_t **)(a1 + 744), (OpaqueCMBlockBuffer *)cf, &v13);
  if (BlockBufferWithCFDataNoCopy) {
    goto LABEL_17;
  }
  CFMutableDictionaryRef MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
  if (MutableCopy
    && (CMTime values = (void *)FigCFNumberCreateUInt64()) != 0
    && (CFDictionaryRef v9 = CFDictionaryCreate(v6, (const void **)&kFigMetadataItemStorageLocationKey_ReferenceByteOffset, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540])) != 0)
  {
    CFDictionaryRef v10 = v9;
    CFDictionarySetValue(MutableCopy, @"storageLocation", v9);
    *a3 = MutableCopy;
    CFRelease(v10);
    CFMutableDictionaryRef MutableCopy = 0;
    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v11 = FigSignalErrorAt();
  }
LABEL_8:
  if (cf) {
    CFRelease(cf);
  }
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  if (values) {
    CFRelease(values);
  }
  return v11;
}

uint64_t appendBBufFromMetadataSerializerToBlockBuffer(uint64_t a1, OpaqueCMBlockBuffer *a2)
{
  CMBlockBufferRef targetBBuf = 0;
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 24);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  CFAllocatorRef v6 = *(uint64_t (**)(uint64_t, CMBlockBufferRef *))(v5 + 8);
  if (!v6) {
    return 4294954514;
  }
  uint64_t appended = v6(a1, &targetBBuf);
  CMBlockBufferRef v8 = targetBBuf;
  if (!appended && targetBBuf)
  {
    uint64_t appended = CMBlockBufferAppendBufferReference(a2, targetBBuf, 0, 0, 0);
    CMBlockBufferRef v8 = targetBBuf;
  }
  if (v8) {
    CFRelease(v8);
  }
  return appended;
}

void transferTrackMetadata(uint64_t a1, CFDictionaryRef theDict, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4 = *(void *)(a1 + 16);
  CFArrayRef theArray = 0;
  CFTypeRef cf1 = 0;
  CFTypeRef cf = 0;
  if (!theDict) {
    goto LABEL_54;
  }
  uint64_t v5 = a3;
  if (!a3)
  {
    FigSignalErrorAt();
    goto LABEL_56;
  }
  if (!a4) {
    goto LABEL_54;
  }
  if (CFDictionaryGetValue(theDict, @"items"))
  {
    CFArrayRef Value = CFDictionaryGetValue(theDict, @"format");
    if (Value) {
      CFDictionaryRef v9 = (__CFString *)CFRetain(Value);
    }
    else {
      CFDictionaryRef v9 = 0;
    }
    CFTypeRef cf1 = v9;
    copyMetadataDestinationFormat(v4, v9, &theArray);
    goto LABEL_12;
  }
  CFDictionaryRef v10 = CFDictionaryGetValue(theDict, @"MetadataReader");
  if (!v10)
  {
LABEL_54:
    FigSignalErrorAt();
    goto LABEL_55;
  }
  if (copyMetadataSourceAndDestinationFormats(v4, (uint64_t)v10, &cf1, &theArray)) {
    goto LABEL_55;
  }
LABEL_12:
  CFIndex Count = CFArrayGetCount(theArray);
  if (Count < 1)
  {
LABEL_55:
    uint64_t v5 = 0;
LABEL_56:
    CFSetRef Mutable = 0;
    goto LABEL_57;
  }
  CFIndex v12 = Count;
  int v26 = v5;
  CFSetRef Mutable = 0;
  CFIndex v14 = 0;
  uint64_t v5 = 0;
  CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  while (1)
  {
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    if (v5) {
      CFRelease(v5);
    }
    CFDictionaryRef ValueAtIndex = (__CFString *)CFArrayGetValueAtIndex(theArray, v14);
    if (cf1 && !CFEqual(cf1, ValueAtIndex) && createMetadataConverter(v4, cf1, ValueAtIndex, &cf))
    {
LABEL_31:
      uint64_t v5 = 0;
      goto LABEL_51;
    }
    if (CFEqual(ValueAtIndex, @"com.apple.quicktime.udta"))
    {
      if (*(unsigned char *)(*(void *)(a1 + 16) + 684)) {
        goto LABEL_36;
      }
      goto LABEL_25;
    }
    if (CFEqual(ValueAtIndex, @"org.mp4ra"))
    {
      if ((*(unsigned char *)(*(void *)(a1 + 16) + 684) & 1) == 0) {
        goto LABEL_36;
      }
LABEL_25:
      uint64_t v16 = *v26;
      if (*v26) {
        break;
      }
      uint64_t v17 = (uint64_t)allocator;
      CFRange v18 = v26;
      uint64_t v19 = (void *)a1;
      uint64_t v20 = ValueAtIndex;
      goto LABEL_27;
    }
    if (!CFEqual(ValueAtIndex, @"com.apple.quicktime.mdta")) {
      goto LABEL_36;
    }
    uint64_t v16 = *a4;
    if (*a4) {
      break;
    }
    uint64_t v17 = (uint64_t)allocator;
    uint64_t v19 = (void *)a1;
    uint64_t v20 = ValueAtIndex;
    CFRange v18 = a4;
LABEL_27:
    if (copyTrackMetadataSerializer(v17, v19, v20, v18)) {
      goto LABEL_31;
    }
    uint64_t v16 = *v18;
    if (*v18) {
      break;
    }
LABEL_36:
    uint64_t v5 = 0;
    if (!FigSignalErrorAt()) {
      goto LABEL_39;
    }
LABEL_51:
    if (v12 == ++v14) {
      goto LABEL_57;
    }
  }
  uint64_t FigMetadataWriter = (const void *)FigMetadataSerializerGetFigMetadataWriter(v16);
  if (FigMetadataWriter) {
    uint64_t v5 = (uint64_t *)CFRetain(FigMetadataWriter);
  }
  else {
    uint64_t v5 = 0;
  }
LABEL_39:
  BOOL v23 = (*(unsigned char *)(v4 + 684) & 4) == 0 || ValueAtIndex != @"com.apple.itunes";
  if (cf1 && CFEqual(cf1, ValueAtIndex)) {
    BOOL v23 = 0;
  }
  if (Mutable || (CFSetRef Mutable = CFSetCreateMutable(allocator, 0, MEMORY[0x1E4F1D548])) != 0)
  {
    if (transferMetadata(v4, theDict, (uint64_t)cf, (uint64_t)v5, *(const __CFDictionary **)(a1 + 576), Mutable, v23))goto LABEL_57; {
    goto LABEL_51;
    }
  }
  FigSignalErrorAt();
LABEL_57:
  if (cf1) {
    CFRelease(cf1);
  }
  if (theArray) {
    CFRelease(theArray);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v5) {
    CFRelease(v5);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
}

uint64_t copyTrackMetadataSerializer(uint64_t a1, void *a2, const void *a3, void *a4)
{
  CFTypeRef v12 = 0;
  uint64_t v13 = 0;
  if (a4)
  {
    uint64_t result = getTrackMetadataSerializer(a1, a2, a3, &v13);
    if (!result)
    {
      uint64_t v7 = v13;
      if (v13)
      {
        uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 24);
        if (v8) {
          uint64_t v9 = v8;
        }
        else {
          uint64_t v9 = 0;
        }
        CFDictionaryRef v10 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *))(v9 + 16);
        if (v10)
        {
          uint64_t result = v10(a1, v7, &v12);
          if (result)
          {
            uint64_t v11 = result;
            if (v12) {
              FigMetadataSerializerRelease(v12);
            }
            return v11;
          }
          else
          {
            *a4 = v12;
          }
        }
        else
        {
          return 4294954514;
        }
      }
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t getTrackMetadataSerializer(uint64_t a1, void *a2, CFTypeRef cf1, void *a4)
{
  if (cf1 && a4)
  {
    if (CFEqual(cf1, @"com.apple.quicktime.udta"))
    {
      if ((*(unsigned char *)(a2[2] + 684) & 1) == 0)
      {
        uint64_t v8 = a2[69];
        if (!v8)
        {
          uint64_t v9 = a2 + 69;
          uint64_t result = FigMetadataSerializerCreateForQuickTimeUserData(a1, v9);
          if (result) {
            return result;
          }
LABEL_17:
          uint64_t v8 = *v9;
          goto LABEL_18;
        }
        goto LABEL_18;
      }
      return 0;
    }
    if (CFEqual(cf1, @"org.mp4ra"))
    {
      if (*(unsigned char *)(a2[2] + 684))
      {
        uint64_t v8 = a2[69];
        if (!v8)
        {
          uint64_t v9 = a2 + 69;
          uint64_t result = FigMetadataSerializerCreateForISOUserData(a1, v9);
          if (result) {
            return result;
          }
          goto LABEL_17;
        }
        goto LABEL_18;
      }
      return 0;
    }
    if (CFEqual(cf1, @"com.apple.quicktime.mdta"))
    {
      uint64_t v8 = a2[68];
      if (!v8)
      {
        uint64_t v9 = a2 + 68;
        uint64_t result = FigMetadataSerializerCreateForQuickTimeMetadata(a1, v9);
        if (result) {
          return result;
        }
        goto LABEL_17;
      }
LABEL_18:
      uint64_t result = 0;
      *a4 = v8;
      return result;
    }
  }

  return FigSignalErrorAt();
}

uint64_t setTrackReferences(uint64_t *a1, const __CFDictionary *a2)
{
  uint64_t v4 = MovieInformationRemoveAllTrackReferences(a1);
  uint64_t v5 = v4;
  if (!a2 || v4) {
    return v5;
  }
  unint64_t Count = CFDictionaryGetCount(a2);
  if (!Count) {
    return 0;
  }
  unint64_t v7 = Count;
  if (!(Count >> 61))
  {
    CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFDictionaryRef v10 = CFAllocatorAllocate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 8 * Count, 0);
    if (v10)
    {
      uint64_t v11 = v10;
      CFTypeRef v12 = (const void **)CFAllocatorAllocate(v9, 8 * v7, 0);
      if (!v12)
      {
        uint64_t v20 = FigSignalErrorAt();
        CFAllocatorDeallocate(v9, v11);
        return v20;
      }
      uint64_t v13 = v12;
      CFAllocatorRef allocator = v9;
      CFDictionaryGetKeysAndValues(a2, (const void **)v11, v12);
      uint64_t v14 = 0;
      while (1)
      {
        if (v13[v14])
        {
          CFIndex v15 = CFArrayGetCount((CFArrayRef)v13[v14]);
          if (v15 >= 1) {
            break;
          }
        }
LABEL_20:
        if (++v14 == v7)
        {
          uint64_t v5 = 0;
          goto LABEL_24;
        }
      }
      CFIndex v16 = v15;
      uint64_t v17 = 0;
      while (FigCFArrayGetInt32AtIndex())
      {
        uint64_t v18 = v17 + 1;
        if (!FigCFArrayGetInt32AtIndex()) {
          break;
        }
        if (FigCFStringGetOSTypeValue())
        {
          uint64_t v19 = MovieInformationAddOneTrackReference(a1, 0, 0, 0);
          if (v19) {
            goto LABEL_23;
          }
        }
        v17 += 2;
        if (v18 + 1 >= v16) {
          goto LABEL_20;
        }
      }
      uint64_t v19 = FigSignalErrorAt();
LABEL_23:
      uint64_t v5 = v19;
LABEL_24:
      CFAllocatorDeallocate(allocator, v11);
      CFAllocatorDeallocate(allocator, v13);
      return v5;
    }
  }

  return FigSignalErrorAt();
}

uint64_t ffr_updateThreadPriority(uint64_t a1, int a2)
{
  int valuePtr = a2;
  if (!*(void *)(CMBaseObjectGetDerivedStorage() + 552)) {
    return 0;
  }
  CFNumberRef v2 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
  uint64_t v3 = FigThreadSetProperty();
  if (v2) {
    CFRelease(v2);
  }
  return v3;
}

uint64_t setPredeterminedSizes(uint64_t a1, uint64_t a2)
{
  char v2 = a2;
  if (a2)
  {
    if (FigCFDictionaryGetInt64IfPresent() != 1 || FigCFDictionaryGetInt64IfPresent() != 1) {
      return FigSignalErrorAt();
    }
    a2 = 8;
    char v2 = 1;
  }
  uint64_t result = MovieSampleDataWriterSetPredeterminedMediaDataAtomSize(*(void *)(a1 + 744), a2);
  if (!result)
  {
    *(void *)(a1 + 456) = 0;
    *(void *)(a1 + 464) = 0;
    *(unsigned char *)(a1 + 448) = v2;
  }
  return result;
}

uint64_t setMediaDataCheckpointInterval(uint64_t a1, uint64_t a2)
{
  CMTime v7 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  if (a2)
  {
    if (FigCFDictionaryGetCMTimeIfPresent() != 1) {
      return FigSignalErrorAt();
    }
    if ((v7.flags & 1) == 0) {
      return FigSignalErrorAt();
    }
    CMTime time1 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
    CMTime v5 = v7;
    if ((CMTimeCompare(&time1, &v5) & 0x80000000) == 0) {
      return FigSignalErrorAt();
    }
    char v3 = 1;
  }
  else
  {
    char v3 = 0;
  }
  uint64_t result = 0;
  *(CMTime *)(a1 + 144) = v7;
  *(unsigned char *)(a1 + 330) = v3;
  return result;
}

uint64_t setPSSHDataEntries(uint64_t a1, CFTypeRef cf)
{
  CFTypeRef cfa = 0;
  CFTypeRef v14 = 0;
  if (!cf) {
    goto LABEL_9;
  }
  CFTypeID v4 = CFGetTypeID(cf);
  if (v4 == EncryptionConfigGetTypeID())
  {
    CMTime v5 = CFRetain(cf);
    CFTypeRef v14 = v5;
    goto LABEL_10;
  }
  CFTypeID v6 = CFGetTypeID(cf);
  if (v6 != CFDictionaryGetTypeID())
  {
LABEL_9:
    CMTime v5 = 0;
LABEL_10:
    uint64_t PSSHDataEntries = MoviePSSHData_CreatePSSHDataEntries(v5, (__CFArray **)&cfa);
    if (PSSHDataEntries) {
      goto LABEL_13;
    }
    if (cfa)
    {
      uint64_t PSSHDataEntries = MovieInformationSetPSSHDataEntries(*(void *)(a1 + 728), cfa);
      goto LABEL_13;
    }
    goto LABEL_22;
  }
  if (FigCFDictionaryGetNumberValue())
  {
    int SInt32 = FigCFNumberGetSInt32();
    if (SInt32 == 1667591779)
    {
      uint64_t v8 = 3;
    }
    else
    {
      if (SInt32 != 1667392371) {
        goto LABEL_22;
      }
      uint64_t v8 = 2;
    }
    DataCFArrayRef Value = FigCFDictionaryGetDataValue();
    if (DataValue)
    {
      uint64_t PSSHDataEntries = EncryptionConfigCreateFromDictionary(DataValue, v8, (uint64_t)&v14);
      if (PSSHDataEntries) {
        goto LABEL_13;
      }
      CMTime v5 = v14;
      goto LABEL_10;
    }
  }
LABEL_22:
  uint64_t PSSHDataEntries = FigSignalErrorAt();
LABEL_13:
  uint64_t v10 = PSSHDataEntries;
  if (cfa) {
    CFRelease(cfa);
  }
  if (v14) {
    CFRelease(v14);
  }
  return v10;
}

uint64_t figMovieWriter_CopyTrackProperty(uint64_t a1, int a2, const void *a3, const __CFAllocator *a4, CFMutableArrayRef *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a3 || !a5 || (uint64_t v10 = DerivedStorage) == 0 || *(unsigned char *)(DerivedStorage + 335))
  {
LABEL_5:
    return FigSignalErrorAt();
  }
  uint64_t v39 = 0;
  uint64_t TrackInfoForTrackID = getTrackInfoForTrackID(DerivedStorage, a2, &v39);
  if (TrackInfoForTrackID) {
    return TrackInfoForTrackID;
  }
  uint64_t v13 = v39;
  uint64_t v14 = *(void *)(v39 + 736);
  if (CFEqual(@"MediaTimeScale", a3))
  {
    LODWORD(v34) = *(_DWORD *)(v13 + 104);
    CFAllocatorRef v15 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFIndex v16 = &v34;
LABEL_11:
    CFNumberType v17 = kCFNumberSInt32Type;
LABEL_12:
    int SInt32 = CFNumberCreate(v15, v17, v16);
LABEL_13:
    uint64_t TrackInfoForTrackID = 0;
LABEL_14:
    *a5 = SInt32;
    return TrackInfoForTrackID;
  }
  if (CFEqual(@"QTLoadSettings", a3))
  {
    *(void *)&long long v34 = 0;
    if (*(unsigned char *)(v13 + 40))
    {
      uint64_t SettingsAsDictionary = copyFigTrackLoadSettingsAsDictionary(a4, v13 + 44, (CFDictionaryRef *)&v34);
      if (!SettingsAsDictionary)
      {
        uint64_t v20 = (__CFArray *)v34;
LABEL_29:
        uint64_t TrackInfoForTrackID = 0;
        *a5 = v20;
        return TrackInfoForTrackID;
      }
      return SettingsAsDictionary;
    }
LABEL_28:
    uint64_t v20 = 0;
    goto LABEL_29;
  }
  if (CFEqual(@"MediaDataPrecedence", a3))
  {
    CFAllocatorRef v15 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFIndex v16 = (long long *)(v13 + 100);
    goto LABEL_11;
  }
  if (CFEqual(@"InterleavingAdvance", a3))
  {
    long long v34 = *(_OWORD *)(v13 + 108);
    *(void *)&long long v35 = *(void *)(v13 + 124);
    int SInt32 = CMTimeCopyAsDictionary((CMTime *)&v34, a4);
    goto LABEL_13;
  }
  if (CFEqual(@"InterleavingOrder", a3))
  {
    int SInt32 = (__CFArray *)FigCFNumberCreateSInt32();
    goto LABEL_13;
  }
  if (CFEqual(@"SourceSampleBufferQueue", a3))
  {
    uint64_t v21 = *(const void **)(v13 + 608);
    if (v21)
    {
      CFRetain(v21);
      uint64_t v20 = *(__CFArray **)(v13 + 608);
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  if (CFEqual(@"PreferredChunkAlignment", a3))
  {
    LODWORD(v34) = 0;
    uint64_t PreferredChunkAlignment = MovieSampleDataWriterTrackGetPreferredChunkAlignment(*(void *)(v10 + 744), *(void *)(v13 + 760), &v34);
LABEL_35:
    uint64_t TrackInfoForTrackID = PreferredChunkAlignment;
    if (PreferredChunkAlignment) {
      return TrackInfoForTrackID;
    }
    int SInt32 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &v34);
    goto LABEL_14;
  }
  if (CFEqual(@"PreferredChunkSize", a3))
  {
    LODWORD(v34) = 0;
    uint64_t PreferredChunkAlignment = MovieSampleDataWriterTrackGetPreferredChunkSize(*(void *)(v10 + 744), *(void *)(v13 + 760), &v34);
    goto LABEL_35;
  }
  if (CFEqual(@"PreferredChunkDuration", a3))
  {
    long long v34 = *MEMORY[0x1E4F1F9F8];
    *(void *)&long long v35 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
    uint64_t TrackInfoForTrackID = MovieSampleDataWriterTrackGetPreferredChunkDuration(*(void *)(v10 + 744), *(void *)(v13 + 760), (uint64_t)&v34);
    if (TrackInfoForTrackID) {
      return TrackInfoForTrackID;
    }
    *(_OWORD *)&time.CMTimeValue value = v34;
    time.CMTimeEpoch epoch = v35;
    int SInt32 = CMTimeCopyAsDictionary(&time, a4);
    goto LABEL_14;
  }
  if (CFEqual(@"AlternateGroupID", a3))
  {
    __int16 AlternateGroupID = MovieTrackGetAlternateGroupID(v14);
LABEL_44:
    LOWORD(v34) = AlternateGroupID;
LABEL_45:
    CFAllocatorRef v15 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFIndex v16 = &v34;
    CFNumberType v17 = kCFNumberSInt16Type;
    goto LABEL_12;
  }
  if (CFEqual(@"DefaultAlternateGroupID", a3))
  {
    __int16 AlternateGroupID = MovieTrackGetDefaultAlternateGroupID(v14);
    goto LABEL_44;
  }
  if (CFEqual(@"ProvisionalAlternateGroupID", a3))
  {
    LOWORD(v34) = 0;
    if (MovieTrackGetProvisionalAlternateGroupID(v14, &v34)) {
      goto LABEL_45;
    }
LABEL_48:
    int SInt32 = 0;
    goto LABEL_13;
  }
  if (CFEqual(@"TrackVolume", a3))
  {
    if (*(_DWORD *)v13 != 1936684398) {
      goto LABEL_5;
    }
    LODWORD(v34) = MovieTrackGetVolume(v14);
    CFAllocatorRef v15 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFIndex v16 = &v34;
    CFNumberType v17 = kCFNumberFloat32Type;
    goto LABEL_12;
  }
  if (CFEqual(@"DefaultEditList", a3))
  {
    return createDefaultTrackEditSegmentArray(a4, v13, a5);
  }
  if (CFEqual(@"EditList", a3))
  {
    int SInt32 = *(__CFArray **)(v13 + 400);
    if (!SInt32) {
      goto LABEL_13;
    }
    goto LABEL_73;
  }
  if (CFEqual(@"LanguageTag", a3))
  {
    int SInt32 = *(__CFArray **)(v13 + 408);
    if (!SInt32) {
      goto LABEL_13;
    }
    goto LABEL_73;
  }
  if (CFEqual(@"ExtendedLanguageTag", a3))
  {
    int SInt32 = *(__CFArray **)(v13 + 416);
    if (!SInt32) {
      goto LABEL_13;
    }
    goto LABEL_73;
  }
  if (CFEqual(@"EnableTrack", a3))
  {
    int IsEnabled = MovieTrackIsEnabled(v14);
    uint64_t v25 = (const void **)MEMORY[0x1E4F1CFD0];
    if (!IsEnabled) {
      uint64_t v25 = (const void **)MEMORY[0x1E4F1CFC8];
    }
LABEL_72:
    int SInt32 = (__CFArray *)*v25;
LABEL_73:
    int SInt32 = (__CFArray *)CFRetain(SInt32);
    goto LABEL_13;
  }
  if (CFEqual(@"InterleaveTrack", a3))
  {
    uint64_t v25 = (const void **)MEMORY[0x1E4F1CFD0];
    if (!*(unsigned char *)(v13 + 352)) {
      uint64_t v25 = (const void **)MEMORY[0x1E4F1CFC8];
    }
    goto LABEL_72;
  }
  if (CFEqual(@"TrackDimensions", a3))
  {
    LODWORD(v34) = 0;
    LODWORD(time.CFDictionarySetValue(theDict, key, value) = 0;
    MovieTrackGetSpatialInformation(v14, &v34, &time, 0);
    return copyDimensionsAsDictionary(a4, a5, *(float *)&v34, *(float *)&time.value);
  }
  if (CFEqual(@"CleanApertureDimensions", a3))
  {
    *(void *)&long long v34 = 0;
    if (*(unsigned char *)(v13 + 34))
    {
      float v37 = 0.0;
      LODWORD(time.CFDictionarySetValue(theDict, key, value) = 0;
      MovieTrackGetCleanApertureDimensions(v14, (float *)&time, &v37);
LABEL_88:
      uint64_t TrackInfoForTrackID = copyDimensionsAsDictionary(a4, (CFDictionaryRef *)&v34, *(float *)&time.value, v37);
      if (TrackInfoForTrackID) {
        return TrackInfoForTrackID;
      }
      int SInt32 = (__CFArray *)v34;
      goto LABEL_13;
    }
    if (*(unsigned char *)(v13 + 33)) {
      goto LABEL_48;
    }
    goto LABEL_95;
  }
  if (CFEqual(@"ProductionApertureDimensions", a3))
  {
    *(void *)&long long v34 = 0;
    if (*(unsigned char *)(v13 + 36))
    {
      float v37 = 0.0;
      LODWORD(time.CFDictionarySetValue(theDict, key, value) = 0;
      MovieTrackGetProductionApertureDimensions(v14, (float *)&time, &v37);
      goto LABEL_88;
    }
    if (*(unsigned char *)(v13 + 35)) {
      goto LABEL_48;
    }
    goto LABEL_95;
  }
  if (CFEqual(@"EncodedPixelsDimensions", a3))
  {
    *(void *)&long long v34 = 0;
    if (*(unsigned char *)(v13 + 38))
    {
      float v37 = 0.0;
      LODWORD(time.CFDictionarySetValue(theDict, key, value) = 0;
      MovieTrackGetEncodedPixelsDimensions(v14, (float *)&time, &v37);
      goto LABEL_88;
    }
    if (*(unsigned char *)(v13 + 37)) {
      goto LABEL_48;
    }
LABEL_95:
    int v26 = (const void **)kFigFormatWriter_NoDimensions;
    goto LABEL_96;
  }
  if (CFEqual(@"TrackMatrix", a3))
  {
    int v36 = 0;
    long long v34 = 0u;
    long long v35 = 0u;
    MovieTrackGetSpatialInformation(v14, 0, 0, (uint64_t)&v34);
    return copyFigMatrixAsArray(a4, (uint64_t)&v34, a5);
  }
  if (CFEqual(@"FormatDescriptionArray", a3))
  {
    int SInt32 = MovieTrackCopyFormatDescriptionArray(v14);
    goto LABEL_13;
  }
  if (CFEqual(@"TrackMetadataWriters", a3))
  {
    return createTrackMetadataWritersDictionary(a4, (void *)v13, a5);
  }
  if (CFEqual(@"TrackMetadataToTransfer", a3))
  {
    uint64_t v27 = *(const void **)(v13 + 560);
    if (!v27) {
      goto LABEL_113;
    }
LABEL_109:
    int SInt32 = (__CFArray *)CFPropertyListCreateDeepCopy(a4, v27, 0);
    goto LABEL_13;
  }
  if (CFEqual(@"TrackMetadataToWrite", a3))
  {
    uint64_t v27 = *(const void **)(v13 + 568);
    if (v27) {
      goto LABEL_109;
    }
LABEL_113:
    uint64_t TrackInfoForTrackID = 0;
    *a5 = 0;
    return TrackInfoForTrackID;
  }
  if (CFEqual(@"TrackMetadataWhitelist", a3))
  {
    CFDictionaryRef v28 = *(const __CFDictionary **)(v13 + 576);
    if (v28)
    {
      int SInt32 = CFDictionaryCreateCopy(a4, v28);
      goto LABEL_13;
    }
    goto LABEL_113;
  }
  if (CFEqual(@"ExcludeFromAutoSelection", a3))
  {
    int IsExcludedFromAutoSelection = MovieTrackIsExcludedFromAutoSelection(v14);
    int v26 = (const void **)MEMORY[0x1E4F1CFD0];
    if (!IsExcludedFromAutoSelection) {
      int v26 = (const void **)MEMORY[0x1E4F1CFC8];
    }
    goto LABEL_96;
  }
  if (CFEqual(@"WriteCompactSampleSizeIfPossible", a3))
  {
    int v26 = (const void **)MEMORY[0x1E4F1CFD0];
    int v30 = *(unsigned __int8 *)(v13 + 584);
    goto LABEL_122;
  }
  if (CFEqual(@"WriteQTSoundSampleTableLieIfPossible", a3))
  {
    int v26 = (const void **)MEMORY[0x1E4F1CFD0];
    int v30 = *(unsigned __int8 *)(v13 + 585);
LABEL_122:
    if (!v30) {
      int v26 = (const void **)MEMORY[0x1E4F1CFC8];
    }
LABEL_96:
    int SInt32 = (__CFArray *)*v26;
    if (!*v26) {
      goto LABEL_13;
    }
    goto LABEL_73;
  }
  if (CFEqual(@"Layer", a3))
  {
    __int16 AlternateGroupID = MovieTrackGetLayer(v14);
    goto LABEL_44;
  }
  if (CFEqual(@"SampleReferenceBaseURL", a3))
  {
    int SInt32 = *(__CFArray **)(v13 + 456);
    if (!SInt32) {
      goto LABEL_13;
    }
    goto LABEL_73;
  }
  if (CFEqual(@"NegativeCompositionOffsetsInISOFilePolicy", a3))
  {
    return copyNegativeCompositionOffsetsInISOFilePolicy(v10, v13, a5);
  }
  else if (CFEqual(@"HEVCSyncSampleNALUnitTypes", a3))
  {
    uint64_t v31 = *(void *)(v13 + 736);
    return MovieTrackCopySyncSampleCombinations(a4, v31, a5);
  }
  else if (CFEqual(@"HEVCTemporalLevelInfoCombinations", a3))
  {
    uint64_t v32 = *(void *)(v13 + 736);
    return MovieTrackCopyTemporalLevelCombinations(a4, v32, a5);
  }
  else
  {
    if (!CFEqual(@"SampleGroupDescriptions", a3)) {
      return 4294954666;
    }
    uint64_t v33 = *(void *)(v13 + 736);
    return MovieTrackCopySampleGroupDescriptionDictionary(a4, v33, a5);
  }
}

uint64_t figMovieWriter_WriteHeaderToByteStream(uint64_t a1, uint64_t a2, const __CFDictionary *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int valuePtr = 0;
  CMBlockBufferRef theBuffer = 0;
  uint64_t v28 = 0;
  CMBlockBufferRef v26 = 0;
  if (!a2)
  {
    uint64_t appended = FigSignalErrorAt();
    goto LABEL_9;
  }
  uint64_t v6 = DerivedStorage;
  if (a3)
  {
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a3, @"ByteOffsetToAddToAllSampleOffsets");
    if (Value)
    {
      CFNumberRef v8 = Value;
      CFTypeID v9 = CFGetTypeID(Value);
      if (v9 == CFNumberGetTypeID())
      {
        CFNumberGetValue(v8, kCFNumberSInt32Type, &valuePtr);
        uint64_t appended = MovieSampleDataWriterPatchMediaDataAtomSizeIfNeeded(*(uint64_t **)(v6 + 744));
        if (!appended)
        {
          uint64_t v11 = (const __CFNumber ***)(v6 + 744);
          int v12 = valuePtr;
          goto LABEL_11;
        }
LABEL_9:
        uint64_t v13 = appended;
        goto LABEL_27;
      }
    }
  }
  uint64_t appended = MovieSampleDataWriterPatchMediaDataAtomSizeIfNeeded(*(uint64_t **)(v6 + 744));
  if (appended) {
    goto LABEL_9;
  }
  uint64_t v30 = 0;
  uint64_t appended = calculateHeaderByteCount(v6, (unint64_t *)&v30);
  if (appended) {
    goto LABEL_9;
  }
  uint64_t v11 = (const __CFNumber ***)(v6 + 744);
  int v12 = v30;
  int valuePtr = v30;
LABEL_11:
  uint64_t appended = MovieHeaderMakerAddByteCountToChunkOffsets(*(void *)(v6 + 736), v12);
  if (appended) {
    goto LABEL_9;
  }
  if (*(_DWORD *)(v6 + 320) == 3)
  {
    uint64_t appended = MovieSampleDataWriterCopyFileTypeAtomAsBlockBuffer(*v11, (const __CFAllocator *)*MEMORY[0x1E4F1CF80], &theBuffer);
    if (appended) {
      goto LABEL_9;
    }
    CMBlockBufferGetDataLength(theBuffer);
    uint64_t v30 = 0;
    uint64_t appended = CMByteStreamAppendBlockBuffer();
    if (appended) {
      goto LABEL_9;
    }
  }
  uint64_t MovieAtomBBuf = createMovieAtomBBuf(v6, 0, 0, (CFTypeRef *)&v26);
  CMBlockBufferRef v15 = v26;
  if (MovieAtomBBuf) {
    goto LABEL_32;
  }
  CMBlockBufferGetDataLength(v26);
  uint64_t v30 = 0;
  uint64_t MovieAtomBBuf = CMByteStreamAppendBlockBuffer();
  if (MovieAtomBBuf) {
    goto LABEL_32;
  }
  uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v16) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = 0;
  }
  uint64_t v18 = *(uint64_t (**)(uint64_t, void, uint64_t *))(v17 + 24);
  if (!v18)
  {
    uint64_t v13 = 4294954514;
    goto LABEL_25;
  }
  uint64_t MovieAtomBBuf = v18(a2, 0, &v28);
  if (MovieAtomBBuf) {
    goto LABEL_32;
  }
  uint64_t v19 = v28;
  unint64_t v20 = valuePtr - v28;
  if (valuePtr == v28)
  {
LABEL_23:
    uint64_t v13 = 0;
    goto LABEL_25;
  }
  unint64_t v22 = v20 - 8;
  if (v20 < 8)
  {
LABEL_31:
    uint64_t MovieAtomBBuf = FigSignalErrorAt();
LABEL_32:
    uint64_t v13 = MovieAtomBBuf;
    goto LABEL_25;
  }
  uint64_t v30 = bswap32(v20) | 0x6565726600000000;
  uint64_t v13 = writeData(a2, v28, (uint64_t)&v30, 8);
  if (!v13)
  {
    if (!*(void *)(v6 + 472))
    {
      BOOL v23 = malloc_type_calloc(1uLL, 0x1000uLL, 0x54FB7873uLL);
      *(void *)(v6 + 472) = v23;
      if (!v23) {
        goto LABEL_31;
      }
      *(void *)(v6 + 480) = 4096;
    }
    uint64_t v24 = v19 + 8;
    while (v22)
    {
      if (v22 >= *(void *)(v6 + 480)) {
        uint64_t v25 = *(void *)(v6 + 480);
      }
      else {
        uint64_t v25 = v22;
      }
      uint64_t MovieAtomBBuf = writeData(a2, v24, *(void *)(v6 + 472), v25);
      v22 -= v25;
      v24 += v25;
      if (MovieAtomBBuf) {
        goto LABEL_32;
      }
    }
    goto LABEL_23;
  }
LABEL_25:
  if (v15) {
    CFRelease(v15);
  }
LABEL_27:
  if (theBuffer) {
    CFRelease(theBuffer);
  }
  return v13;
}

uint64_t figMovieWriter_CopyMovieHeaderAsBlockBuffer(uint64_t a1, uint64_t a2, CMBlockBufferRef *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMBlockBufferRef targetBBuf = 0;
  CMBlockBufferRef theBuffer = 0;
  if (*(unsigned char *)(DerivedStorage + 384) != 1 || !a3)
  {
    uint64_t v6 = FigSignalErrorAt();
    goto LABEL_13;
  }
  uint64_t v5 = DerivedStorage;
  uint64_t v6 = MovieSampleDataWriterCopyFileTypeAtomAsBlockBuffer(*(const __CFNumber ***)(DerivedStorage + 744), (const __CFAllocator *)*MEMORY[0x1E4F1CF80], &theBuffer);
  if (v6)
  {
LABEL_13:
    uint64_t appended = v6;
    goto LABEL_9;
  }
  uint64_t MovieAtomBBuf = createMovieAtomBBuf(v5, 1, 0, (CFTypeRef *)&targetBBuf);
  CMBlockBufferRef v8 = targetBBuf;
  if (MovieAtomBBuf)
  {
    uint64_t appended = MovieAtomBBuf;
    if (targetBBuf) {
LABEL_8:
    }
      CFRelease(v8);
  }
  else
  {
    uint64_t appended = CMBlockBufferAppendBufferReference(theBuffer, targetBBuf, 0, 0, 0);
    if (!appended)
    {
      *a3 = theBuffer;
      CMBlockBufferRef theBuffer = 0;
    }
    if (v8) {
      goto LABEL_8;
    }
  }
LABEL_9:
  if (theBuffer) {
    CFRelease(theBuffer);
  }
  return appended;
}

uint64_t editBuilderCreate(const __CFAllocator *a1, void *a2)
{
  CFTypeID v4 = CFAllocatorAllocate(a1, 32, 0);
  uint64_t v5 = v4;
  if (!v4) {
    goto LABEL_10;
  }
  *CFTypeID v4 = 0u;
  v4[1] = 0u;
  if (a1) {
    CFTypeRef v6 = CFRetain(a1);
  }
  else {
    CFTypeRef v6 = 0;
  }
  *uint64_t v5 = v6;
  uint64_t v7 = editMediaTimeCreate(a1, v5 + 2);
  if (v7) {
    goto LABEL_11;
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable(a1, 0, 0);
  v5[3] = Mutable;
  if (!Mutable || (uint64_t v9 = editBoundaryDetectorCreate(a1, v5 + 1), !v5[1]))
  {
LABEL_10:
    uint64_t v7 = FigSignalErrorAt();
LABEL_11:
    uint64_t v10 = v7;
    goto LABEL_9;
  }
  uint64_t v10 = v9;
  *a2 = v5;
  uint64_t v5 = 0;
LABEL_9:
  editBuilderRelease(v5);
  return v10;
}

uint64_t editBoundaryDetectorCreate(const __CFAllocator *a1, void *a2)
{
  CFTypeID v4 = CFAllocatorAllocate(a1, 24, 0);
  if (v4)
  {
    uint64_t v5 = v4;
    *CFTypeID v4 = 0;
    v4[1] = 0;
    void v4[2] = 0;
    if (a1) {
      CFTypeRef v6 = CFRetain(a1);
    }
    else {
      CFTypeRef v6 = 0;
    }
    *uint64_t v5 = v6;
    *((_DWORD *)v5 + 2) = 0;
    v5[2] = 0xBFF0000000000000;
    *a2 = v5;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t wakeupWritingThreadForEndOfDataReached(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (!*(unsigned char *)(v1 + 335))
  {
    if (*(void *)(v1 + 552)) {
      return FigSemaphoreSignal();
    }
  }
  return result;
}

uint64_t wakeupWritingThreadForOverflow(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (!*(unsigned char *)(v1 + 335))
  {
    if (*(void *)(v1 + 552)) {
      return FigSemaphoreSignal();
    }
  }
  return result;
}

uint64_t chunkCallback(int a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, uint64_t *a9, const __CFArray *a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13 = a6;
  int v15 = a4;
  int v17 = a1;
  uint64_t v18 = *(void *)(a12 + 16);
  long long v42 = *MEMORY[0x1E4F1F9F8];
  uint64_t v43 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  long long v40 = v42;
  uint64_t v41 = v43;
  uint64_t v19 = *(void *)(v18 + 752) + a2;
  if (!*(unsigned char *)(v18 + 384) && !*(unsigned char *)(v18 + 329)) {
    goto LABEL_4;
  }
  if (*(unsigned char *)(a12 + 905)) {
    goto LABEL_4;
  }
  *(_OWORD *)(a12 + 816) = *(_OWORD *)a7;
  long long v23 = *(_OWORD *)(a7 + 16);
  long long v24 = *(_OWORD *)(a7 + 32);
  long long v25 = *(_OWORD *)(a7 + 48);
  *(void *)(a12 + 880) = *(void *)(a7 + 64);
  *(_OWORD *)(a12 + 848) = v24;
  *(_OWORD *)(a12 + 864) = v25;
  *(_OWORD *)(a12 + 832) = v23;
  *(void *)(a12 + 888) = v19;
  *(void *)(a12 + 896) = a3;
  unint64_t v31 = a8;
  char SampleAttachmentSync = isFirstSampleAttachmentSync(a10);
  int v17 = a1;
  a8 = v31;
  int v15 = a4;
  uint64_t v13 = a6;
  *(unsigned char *)(a12 + 904) = SampleAttachmentSync;
  *(unsigned char *)(a12 + 905) = 1;
  if (!*(unsigned char *)(v18 + 384))
  {
LABEL_4:
    uint64_t result = MovieTrackAppendSampleInformation(*(void *)(v18 + 728), *(void *)(a12 + 736), v17, v19, v15, a5, v13, a7, a8, a9, a10, a11, (uint64_t)&v42, (uint64_t)&v40);
    if (!result)
    {
      *(_DWORD *)(a12 + 348) += a5;
      ChunkOffsetTable = (OpaqueCMBlockBuffer *)MovieSampleTableGetChunkOffsetTable(*(void *)(a12 + 736));
      DataCFIndex Length = CMBlockBufferGetDataLength(ChunkOffsetTable);
      uint64_t result = 0;
      *(void *)(a12 + 592) = DataLength;
    }
    return result;
  }
  if (*(_DWORD *)a12 == 1986618469)
  {
    *(void *)(v18 + 432) = v19 + a3;
    long long v27 = *(_OWORD *)(a7 + 24);
    *(void *)(v18 + 424) = *(void *)(a7 + 40);
    *(_OWORD *)(v18 + 408) = v27;
  }
  if (!FigCFEqual() && !FigCFEqual() || *(unsigned char *)(v18 + 534) || *(unsigned char *)(a12 + 904) == 1)
  {
    uint64_t v13 = a6;
    int v15 = a4;
    a8 = v31;
    int v17 = a1;
    if (*(unsigned char *)(a12 + 912))
    {
      long long v28 = *(_OWORD *)(a12 + 864);
      *(_OWORD *)&v37[16] = *(_OWORD *)(a12 + 848);
      long long v38 = v28;
      CMTimeEpoch v39 = *(void *)(a12 + 880);
      long long v29 = *(_OWORD *)(a12 + 832);
      long long v36 = *(_OWORD *)(a12 + 816);
      *(_OWORD *)float v37 = v29;
      CMTime time1 = *(CMTime *)&v37[8];
      *(_OWORD *)&time2.CMTimeValue value = v28;
      time2.CMTimeEpoch epoch = v39;
      if (CMTimeCompare(&time1, &time2)) {
        return FigSignalErrorAt();
      }
      uint64_t v13 = a6;
      int v15 = a4;
      a8 = v31;
      int v17 = a1;
    }
    goto LABEL_4;
  }

  return FigSignalErrorAt();
}

uint64_t setNegativeCompositionOffsetsInISOFilePolicy(uint64_t a1, uint64_t a2)
{
  if (FigCFEqual())
  {
    int v4 = 0;
LABEL_7:
    uint64_t v5 = *(void *)(a1 + 736);
    uint64_t v6 = *(void *)(a2 + 744);
    return MovieHeaderMakerTrackSetNegativeCompositionOffsetsInISOFilePolicy(v5, v6, v4);
  }
  if (FigCFEqual())
  {
    int v4 = 1;
    goto LABEL_7;
  }
  if (FigCFEqual())
  {
    int v4 = 2;
    goto LABEL_7;
  }

  return FigSignalErrorAt();
}

uint64_t editMediaTimeCreate(const __CFAllocator *a1, void *a2)
{
  int v4 = CFAllocatorAllocate(a1, 144, 0);
  if (v4)
  {
    uint64_t v5 = v4;
    v4[7] = 0u;
    v4[8] = 0u;
    v4[5] = 0u;
    v4[6] = 0u;
    v4[3] = 0u;
    v4[4] = 0u;
    v4[1] = 0u;
    void v4[2] = 0u;
    *int v4 = 0u;
    if (a1) {
      CFTypeRef v6 = CFRetain(a1);
    }
    else {
      CFTypeRef v6 = 0;
    }
    LOBYTE(result) = 0;
    *(void *)uint64_t v5 = v6;
    *((unsigned char *)v5 + 8) = 0;
    *((void *)v5 + 14) = 0xBFF0000000000000;
    uint64_t v8 = MEMORY[0x1E4F1F9F8];
    long long v9 = *MEMORY[0x1E4F1F9F8];
    *(_OWORD *)((char *)v5 + 12) = *MEMORY[0x1E4F1F9F8];
    uint64_t v10 = *(void *)(v8 + 16);
    *(void *)((char *)v5 + 28) = v10;
    *(_OWORD *)((char *)v5 + 36) = v9;
    *(void *)((char *)v5 + 52) = v10;
    *(_OWORD *)((char *)v5 + 60) = v9;
    *(void *)((char *)v5 + 76) = v10;
    *(void *)((char *)v5 + 100) = v10;
    *(_OWORD *)((char *)v5 + 84) = v9;
    *((void *)v5 + 17) = v10;
    *(_OWORD *)((char *)v5 + 120) = v9;
    *a2 = v5;
  }
  else
  {
    LOBYTE(result) = FigSignalErrorAt();
  }
  return result;
}

CFTypeID getTrimDurationsAndSpeedMultiplierFromSbuf(void *a1, CMTime *a2, CMTime *a3, char *a4, double *a5)
{
  *(_OWORD *)&v24.CMTimeValue value = *MEMORY[0x1E4F1FA48];
  CMTimeEpoch v10 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
  v24.CMTimeEpoch epoch = v10;
  long long v17 = *(_OWORD *)&v24.value;
  *(_OWORD *)&v23.CMTimeValue value = *(_OWORD *)&v24.value;
  v23.CMTimeEpoch epoch = v10;
  uint64_t valuePtr = 0x3FF0000000000000;
  getTrimDurationFromSampleBuffer(a1, (const __CFString *)*MEMORY[0x1E4F1F308], (uint64_t)&v24);
  getTrimDurationFromSampleBuffer(a1, (const __CFString *)*MEMORY[0x1E4F1F300], (uint64_t)&v23);
  CMTime lhs = v24;
  CMTime rhs = v23;
  CMTimeAdd(&v22, &lhs, &rhs);
  CMSampleBufferGetDuration(&lhs, (CMSampleBufferRef)a1);
  CMTime rhs = lhs;
  CMTime time2 = v22;
  if (CMTimeCompare(&rhs, &time2) <= 0)
  {
    CMTime rhs = lhs;
    CMTime time2 = v22;
    if (CMTimeCompare(&rhs, &time2) < 0)
    {
      FormatDescription = CMSampleBufferGetFormatDescription((CMSampleBufferRef)a1);
      CMFormatDescriptionGetMediaType(FormatDescription);
    }
    CMTime v24 = v22;
    *(_OWORD *)&v23.CMTimeValue value = v17;
    v23.CMTimeEpoch epoch = v10;
    char v11 = 1;
  }
  else
  {
    char v11 = 0;
  }
  CFTypeID result = (CFTypeID)CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E4F1F2E8], 0);
  double v14 = 1.0;
  if (result)
  {
    int v15 = (const void *)result;
    CFTypeID TypeID = CFNumberGetTypeID();
    CFTypeID result = CFGetTypeID(v15);
    if (TypeID == result)
    {
      CFTypeID result = CFNumberGetValue((CFNumberRef)v15, kCFNumberDoubleType, &valuePtr);
      double v14 = *(double *)&valuePtr;
    }
  }
  *a2 = v24;
  *a3 = v23;
  *a5 = v14;
  if (a4) {
    *a4 = v11;
  }
  return result;
}

uint64_t editBoundaryDetectorDetectBoundary(uint64_t a1, int a2, int a3, int a4, double a5)
{
  switch(*(_DWORD *)(a1 + 8))
  {
    case 0:
    case 1:
      if (a4) {
        int v5 = 3;
      }
      else {
        int v5 = 2;
      }
      if (a2) {
        int v5 = 1;
      }
      LODWORD(v6) = 0;
      break;
    case 2:
      BOOL v7 = a3 != 0;
      if (a4) {
        int v5 = 3;
      }
      else {
        int v5 = 2;
      }
      goto LABEL_16;
    case 3:
      if (a4) {
        int v5 = 3;
      }
      else {
        int v5 = 2;
      }
      BOOL v7 = 1;
LABEL_16:
      if (a2)
      {
        int v5 = 3;
        LODWORD(v6) = 0;
      }
      else
      {
        LODWORD(v6) = v7;
      }
      break;
    case 4:
      if (a4) {
        int v8 = 3;
      }
      else {
        int v8 = 2;
      }
      if (a2) {
        int v5 = 1;
      }
      else {
        int v5 = v8;
      }
      LODWORD(v6) = 1;
      break;
    default:
      int v5 = 0;
      LODWORD(v6) = 0;
      break;
  }
  double v9 = *(double *)(a1 + 16);
  if (v9 == a5 || v9 == -1.0) {
    uint64_t v6 = v6;
  }
  else {
    uint64_t v6 = 1;
  }
  *(_DWORD *)(a1 + 8) = v5;
  *(double *)(a1 + 16) = a5;
  return v6;
}

CMTime *getTrimDurationFromSampleBuffer@<X0>(const void *a1@<X0>, const __CFString *a2@<X1>, uint64_t a3@<X8>)
{
  CFDictionaryRef v4 = (const __CFDictionary *)CMGetAttachment(a1, a2, 0);
  memset(&v8, 0, sizeof(v8));
  CFTypeID result = CMTimeMakeFromDictionary(&v8, v4);
  if (v8.flags)
  {
    *(_OWORD *)a3 = *(_OWORD *)&v8.value;
    CMTimeEpoch epoch = v8.epoch;
  }
  else
  {
    uint64_t v6 = MEMORY[0x1E4F1FA48];
    *(_OWORD *)a3 = *MEMORY[0x1E4F1FA48];
    CMTimeEpoch epoch = *(void *)(v6 + 16);
  }
  *(void *)(a3 + 16) = epoch;
  return result;
}

double setTrackHeaderDataCompleteFlagIfCumulatedInterleavingDurationReachesCumulatedMovieFragmentDuration(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (*(unsigned char *)(v2 + 329) || *(unsigned char *)(v2 + 330))
  {
    char v3 = (_OWORD *)(a1 + 648);
    CMTime time1 = *(CMTime *)(a1 + 672);
    CMTime time2 = *(CMTime *)(a1 + 648);
    if (CMTimeCompare(&time1, &time2) <= 0)
    {
      int v5 = (_OWORD *)(a1 + 672);
      *char v3 = *(_OWORD *)(a1 + 672);
      *(void *)(a1 + 664) = *(void *)(a1 + 688);
      uint64_t v6 = (CMTime *)MEMORY[0x1E4F1FA48];
      *(unsigned char *)(a1 + 601) = 1;
      CMTime time1 = *v6;
      if (*(unsigned char *)(v2 + 329))
      {
        BOOL v7 = (CMTime *)(v2 + 96);
      }
      else
      {
        if (!*(unsigned char *)(v2 + 330))
        {
LABEL_9:
          *(_OWORD *)&lhs.CMTimeValue value = *v5;
          lhs.CMTimeEpoch epoch = *(void *)(a1 + 688);
          CMTime v8 = time1;
          CMTimeAdd(&time2, &lhs, &v8);
          double result = *(double *)&time2.value;
          *int v5 = *(_OWORD *)&time2.value;
          *(void *)(a1 + 688) = time2.epoch;
          return result;
        }
        BOOL v7 = (CMTime *)(v2 + 144);
      }
      CMTime time1 = *v7;
      goto LABEL_9;
    }
  }
  return result;
}

uint64_t mergeTrackInfoLinkedList(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = a1;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  BOOL v4 = a1 != 0;
  int v5 = &v12;
  long long v12 = 0u;
  long long v13 = 0u;
  if (a1 && a2)
  {
    int v5 = &v12;
    while (1)
    {
      int v6 = *(_DWORD *)(v3 + 100);
      int v7 = *(_DWORD *)(v2 + 100);
      if (v6 | v7)
      {
        if (v6 < v7) {
          goto LABEL_9;
        }
      }
      else
      {
        CMTime time1 = *(CMTime *)(v3 + 108);
        CMTime time2 = *(CMTime *)(v2 + 108);
        if (CMTimeCompare(&time1, &time2))
        {
          CMTime time1 = *(CMTime *)(v3 + 108);
          CMTime time2 = *(CMTime *)(v2 + 108);
          if (CMTimeCompare(&time1, &time2) <= 0) {
            goto LABEL_9;
          }
        }
        else
        {
          int v9 = *(_DWORD *)(v3 + 132);
          int v10 = *(_DWORD *)(v2 + 132);
          if (v9 == v10)
          {
            if (*(unsigned char *)(*(void *)(v3 + 16) + 18) && *(_DWORD *)v3 != 1986618469 && *(_DWORD *)v2 == 1986618469)
            {
LABEL_9:
              *((void *)v5 + 3) = v2;
              uint64_t v8 = *(void *)(v2 + 24);
              goto LABEL_17;
            }
          }
          else if (v9 >= v10)
          {
            goto LABEL_9;
          }
        }
      }
      *((void *)v5 + 3) = v3;
      uint64_t v8 = v2;
      uint64_t v2 = v3;
      uint64_t v3 = *(void *)(v3 + 24);
LABEL_17:
      int v5 = (long long *)v2;
      BOOL v4 = v3 != 0;
      if (v3)
      {
        uint64_t v2 = v8;
        if (v8) {
          continue;
        }
      }
      goto LABEL_21;
    }
  }
  uint64_t v8 = a2;
LABEL_21:
  if (v4) {
    uint64_t v8 = v3;
  }
  *((void *)v5 + 3) = v8;
  return *((void *)&v13 + 1);
}

void setWritingThreadErrorAndPostErrorOccurredNotification(uint64_t a1, int a2)
{
  if (!*(_DWORD *)(a1 + 680))
  {
    if (a2 == -16359) {
      a2 = -12638;
    }
    *(_DWORD *)(a1 + 680) = a2;
    CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CMTime values = (void *)FigCFNumberCreateSInt32();
    if (values)
    {
      CFDictionaryRef v3 = CFDictionaryCreate(v2, (const void **)kFigFormatWriterNotificationParameter_OSStatus, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (v3)
      {
        CFDictionaryRef v4 = v3;
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterPostNotification();
        CFRelease(v4);
      }
      else
      {
        FigSignalErrorAt();
      }
      if (values) {
        CFRelease(values);
      }
    }
    else
    {
      FigSignalErrorAt();
    }
  }
}

uint64_t createBlockBufferByteStreamForMovieSampleDataWriter(uint64_t a1)
{
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CMBlockBufferRef v9 = 0;
  CFTypeRef cf = 0;
  uint64_t v3 = CMBlockBufferCreateEmpty(v2, 0x40u, 0, &v9);
  if (v3)
  {
    uint64_t v6 = v3;
    goto LABEL_10;
  }
  uint64_t WritableForBlockBuffer = CMByteStreamCreateWritableForBlockBuffer();
  int v5 = (void *)cf;
  if (WritableForBlockBuffer)
  {
    uint64_t v6 = WritableForBlockBuffer;
    if (cf) {
      CFRelease(cf);
    }
LABEL_10:
    CMBlockBufferRef v7 = v9;
    if (!v9) {
      return v6;
    }
    goto LABEL_5;
  }
  *(void *)(a1 + 440) = v9;
  uint64_t v6 = MovieSampleDataWriterSetDefaultByteStream(*(void *)(a1 + 744), v5);
  if (v5)
  {
    CMBlockBufferRef v7 = (CMBlockBufferRef)v5;
LABEL_5:
    CFRelease(v7);
  }
  return v6;
}

uint64_t flushAllSampleBufferQueues(uint64_t a1)
{
  CMTimeValue value = *(CMTime **)(a1 + 504);
  if (!value) {
    return 0;
  }
  int v3 = 1;
  while (1)
  {
    char v11 = 0;
    do
    {
      BOOL v10 = 0;
      if (isReadyToWriteTrackHeaderWithNoSamples((uint64_t)value))
      {
        int v4 = 6;
      }
      else if (reachedInterleavingPeriod((uint64_t)value))
      {
        int v4 = 1;
      }
      else if (trackBufferQueueIsSampleAvailable((uint64_t)value))
      {
        int v4 = 2;
      }
      else if (trackBufferQueueIsAtEndOfData((uint64_t)value))
      {
        int v4 = 3;
      }
      else
      {
        int v4 = 4;
      }
      uint64_t v5 = handleWritingThreadEvent((uint64_t)value, v4, &v10, &v11);
      if (v10) {
        int v6 = 7;
      }
      else {
        int v6 = 0;
      }
      if (v5) {
        int v6 = 8;
      }
    }
    while (!v6);
    uint64_t v7 = v5;
    if (v6 != 7) {
      break;
    }
    if (v11) {
      setNextCumulatedInterleavingDuration(value);
    }
    if (trackBufferQueueIsSampleAvailable((uint64_t)value) || (int v8 = v3, value[13].epoch))
    {
      int v8 = 0;
      int v3 = 0;
    }
    if (value[1].value) {
      CMTimeValue value = (CMTime *)value[1].value;
    }
    else {
      CMTimeValue value = *(CMTime **)(a1 + 496);
    }
    if (value == *(CMTime **)(a1 + 504))
    {
      int v3 = 1;
      if (v8)
      {
        *(void *)(a1 + 504) = *(void *)(a1 + 496);
        return v7;
      }
    }
  }
  return v7;
}

CFArrayRef isReadyToWriteTrackHeaderWithNoSamples(uint64_t a1)
{
  uint64_t v1 = *(unsigned char **)(a1 + 16);
  if (v1[329] && v1[332] && !v1[352] && !*(unsigned char *)(a1 + 600)) {
    return doesTrackHaveFormatDescriptionAndNonZeroMediaTimeScale(a1);
  }
  else {
    return 0;
  }
}

BOOL trackBufferQueueIsSampleAvailable(uint64_t a1)
{
  BOOL result = 1;
  if (!CMBufferQueueGetHead(*(CMBufferQueueRef *)(a1 + 616)))
  {
    Head = (opaqueCMSampleBuffer *)CMBufferQueueGetHead(*(CMBufferQueueRef *)(a1 + 608));
    if (!Head || !CMSampleBufferDataIsReady(Head)) {
      return 0;
    }
  }
  return result;
}

uint64_t trackBufferQueueIsAtEndOfData(uint64_t a1)
{
  uint64_t result = CMBufferQueueIsAtEndOfData(*(CMBufferQueueRef *)(a1 + 608));
  if (result) {
    return CMBufferQueueIsEmpty(*(CMBufferQueueRef *)(a1 + 616)) != 0;
  }
  return result;
}

CFArrayRef doesTrackHaveFormatDescriptionAndNonZeroMediaTimeScale(uint64_t a1)
{
  CFArrayRef result = MovieTrackGetNumFormatDescriptions(*(void *)(a1 + 736));
  if (result) {
    return (const __CFArray *)(MovieTrackGetMediaTimeScale(*(void *)(a1 + 736)) != 0);
  }
  return result;
}

uint64_t setTrackHeaderDataCompleteFlagAndWriteCheckpointIfPossible(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  int v2 = *(unsigned __int8 *)(a1 + 600);
  *(unsigned char *)(a1 + 600) = 1;
  if (v2) {
    return 0;
  }
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(v1 + 488));
  if (Count >= 1)
  {
    CFIndex v5 = Count;
    CFIndex v6 = 0;
    while (*((unsigned char *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v1 + 488), v6) + 600))
    {
      if (v5 == ++v6) {
        goto LABEL_8;
      }
    }
    return 0;
  }
LABEL_8:
  if (*(unsigned char *)(v1 + 330))
  {
    lhs.CMTimeValue value = 0;
    uint64_t result = MovieSampleDataWriterPatchMediaDataAtomSizeIfNeeded(*(uint64_t **)(v1 + 744));
    if (!result)
    {
      CMBlockBufferGetDataLength(*(CMBlockBufferRef *)(v1 + 440));
      v15.CMTimeValue value = 0;
      uint64_t result = CMByteStreamAppendBlockBuffer();
      if (!result)
      {
        uint64_t v7 = *(const void **)(v1 + 440);
        if (v7) {
          CFRelease(v7);
        }
        uint64_t result = createBlockBufferByteStreamForMovieSampleDataWriter(v1);
        if (!result)
        {
          uint64_t v8 = *(void *)(v1 + 8);
          uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v9) {
            uint64_t v10 = v9;
          }
          else {
            uint64_t v10 = 0;
          }
          char v11 = *(uint64_t (**)(uint64_t, void, CMTime *))(v10 + 24);
          if (!v11) {
            return 4294954514;
          }
          uint64_t result = v11(v8, 0, &lhs);
          if (!result)
          {
            *(void *)(v1 + 752) = lhs.value;
            goto LABEL_23;
          }
        }
      }
    }
  }
  else if (*(unsigned char *)(v1 + 168))
  {
    uint64_t result = callFragmentCallback(v1);
    if (!result)
    {
      CMTime lhs = *(CMTime *)(v1 + 220);
      CMTime v13 = *(CMTime *)(v1 + 196);
      CMTimeAdd(&v15, &lhs, &v13);
      *(CMTime *)(v1 + 220) = v15;
LABEL_23:
      clearAllTracksHeaderDataCompleteFlag(v1);
      return 0;
    }
  }
  else
  {
    if (*(unsigned char *)(v1 + 331))
    {
      uint64_t v12 = 1;
      MovieSampleDataWriterSynchronizeDefaultByteStream(*(void *)(v1 + 744), 1, 1);
    }
    else
    {
      uint64_t v12 = 0;
    }
    uint64_t result = writeMovieHeader(v1, v12, v12);
    if (!result) {
      goto LABEL_23;
    }
  }
  return result;
}

uint64_t trackBufferQueueDequeueAndRetain(uint64_t a1, CMTime *a2, opaqueCMSampleBuffer **a3)
{
  CFIndex v6 = (opaqueCMSampleBuffer *)CMBufferQueueDequeueAndRetain(*(CMBufferQueueRef *)(a1 + 616));
  if (v6
    || (uint64_t v9 = (opaqueCMSampleBuffer *)CMBufferQueueDequeueIfDataReadyAndRetain(*(CMBufferQueueRef *)(a1 + 608)),
        (CFIndex v6 = v9) == 0)
    || *(_DWORD *)a1 != 1936684398
    || (CMItemCount NumSamples = CMSampleBufferGetNumSamples(v9),
        memset(&v41, 0, sizeof(v41)),
        CMTime time = *a2,
        CMTimeMultiplyByFloat64(&v41, &time, 0.5),
        !NumSamples))
  {
LABEL_2:
    uint64_t v7 = 0;
    *a3 = v6;
    return v7;
  }
  char v11 = *(opaqueCMBufferQueue **)(a1 + 616);
  CMTimeValue value = v41.value;
  long long v40 = *(_OWORD *)&v41.timescale;
  CMSampleBufferRef sampleBufferOut = 0;
  CMItemCount timingArrayEntriesNeededOut = 0;
  uint64_t SampleTimingInfoArray = CMSampleBufferGetSampleTimingInfoArray(v6, 0, 0, &timingArrayEntriesNeededOut);
  if (SampleTimingInfoArray)
  {
LABEL_11:
    uint64_t v7 = SampleTimingInfoArray;
    long long v14 = 0;
    goto LABEL_54;
  }
  if (timingArrayEntriesNeededOut)
  {
    if ((unint64_t)timingArrayEntriesNeededOut > 0x38E38E38E38E38ELL)
    {
LABEL_10:
      uint64_t SampleTimingInfoArray = FigSignalErrorAt();
      goto LABEL_11;
    }
    size_t v15 = 72 * timingArrayEntriesNeededOut;
    malloc_type_id_t v16 = 1556728742;
  }
  else
  {
    size_t v15 = 0;
    malloc_type_id_t v16 = 1270757447;
  }
  long long v14 = (CMSampleTimingInfo *)malloc_type_malloc(v15, v16);
  if (!v14) {
    goto LABEL_10;
  }
  uint64_t v17 = CMSampleBufferGetSampleTimingInfoArray(v6, timingArrayEntriesNeededOut, v14, 0);
  if (v17)
  {
    uint64_t v7 = v17;
    goto LABEL_54;
  }
  CFAllocatorRef allocator = CFGetAllocator(v6);
  CMItemCount v18 = CMSampleBufferGetNumSamples(v6);
  memset(&v43, 0, sizeof(v43));
  CMSampleBufferGetOutputPresentationTimeStamp(&v43, v6);
  CMItemCount v39 = v18;
  if (v18 < 1)
  {
    uint64_t v7 = 0;
    goto LABEL_54;
  }
  CFIndex v19 = 0;
  long long v36 = a3;
  long long v37 = v14;
  while (1)
  {
    if (timingArrayEntriesNeededOut == 1)
    {
      CMTimeFlags flags = v14->duration.flags;
      if ((flags & 0x1D) != 1) {
        goto LABEL_29;
      }
      CMTimeValue v21 = v14->duration.value;
      CMTimeScale timescale = v14->duration.timescale;
      CMTimeEpoch epoch = v14->duration.epoch;
      time.CMTimeValue value = v14->duration.value;
      time.CMTimeScale timescale = timescale;
      time.CMTimeFlags flags = flags;
      time.CMTimeEpoch epoch = epoch;
      CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
      if (CMTimeCompare(&time, &time2))
      {
        time2.CMTimeValue value = value;
        *(_OWORD *)&time2.CMTimeScale timescale = v40;
        CMTimeConvertScale(&time, &time2, timescale, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
        CMTimeValue v24 = v39 - v19 >= time.value / v21 ? time.value / v21 : v39 - v19;
      }
      else
      {
LABEL_29:
        CMTimeValue v24 = v39 - v19;
      }
    }
    else
    {
      CMTime time = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
      CMTimeValue v24 = 0;
      CMTimeValue v25 = timingArrayEntriesNeededOut - v19;
      if (timingArrayEntriesNeededOut > v19)
      {
        long long v26 = &v14[v19];
        while (1)
        {
          CMTime time2 = time;
          rhs.CMTimeValue value = value;
          *(_OWORD *)&rhs.CMTimeScale timescale = v40;
          if ((CMTimeCompare(&time2, &rhs) & 0x80000000) == 0) {
            break;
          }
          CMTime time2 = time;
          long long v27 = *(_OWORD *)&v26->duration.value;
          rhs.CMTimeEpoch epoch = v26->duration.epoch;
          *(_OWORD *)&rhs.CMTimeValue value = v27;
          CMTimeAdd(&time, &time2, &rhs);
          ++v24;
          ++v26;
          if (v25 == v24)
          {
            CMTimeValue v24 = v25;
            break;
          }
        }
      }
    }
    CFIndex v28 = v24 <= 1 ? 1 : v24;
    v49.location = v19;
    v49.CFIndex length = v28;
    uint64_t v29 = CMSampleBufferCopySampleBufferForRange(allocator, v6, v49, &sampleBufferOut);
    if (v29) {
      break;
    }
    CMTime time = v43;
    uint64_t v29 = CMSampleBufferSetOutputPresentationTimeStamp(sampleBufferOut, &time);
    if (v29) {
      break;
    }
    uint64_t v30 = *(void *)(a1 + 776);
    if (v30)
    {
      time.CMTimeValue value = 0;
      uint64_t SplitSampleBufferArray = AudioSampleBufferSplitterCreateSplitSampleBufferArray(v30, sampleBufferOut, 0, (__CFArray **)&time);
      if (SplitSampleBufferArray) {
        goto LABEL_45;
      }
      if (!time.value) {
        goto LABEL_49;
      }
      CFIndex Count = CFArrayGetCount((CFArrayRef)time.value);
      if (Count < 1)
      {
LABEL_42:
        uint64_t v7 = 0;
      }
      else
      {
        CFIndex v33 = Count;
        CFIndex v34 = 0;
        while (1)
        {
          CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)time.value, v34);
          uint64_t SplitSampleBufferArray = CMBufferQueueEnqueue(v11, ValueAtIndex);
          if (SplitSampleBufferArray) {
            break;
          }
          if (v33 == ++v34) {
            goto LABEL_42;
          }
        }
LABEL_45:
        uint64_t v7 = SplitSampleBufferArray;
      }
      if (time.value) {
        CFRelease((CFTypeRef)time.value);
      }
      if (v7) {
        goto LABEL_59;
      }
      goto LABEL_49;
    }
    uint64_t v29 = CMBufferQueueEnqueue(v11, sampleBufferOut);
    if (v29) {
      break;
    }
LABEL_49:
    memset(&time, 0, sizeof(time));
    CMSampleBufferGetOutputDuration(&time, sampleBufferOut);
    CMTime rhs = v43;
    CMTime v42 = time;
    CMTimeAdd(&time2, &rhs, &v42);
    CMTime v43 = time2;
    if (sampleBufferOut)
    {
      CFRelease(sampleBufferOut);
      CMSampleBufferRef sampleBufferOut = 0;
    }
    v19 += v28;
    long long v14 = v37;
    if (v19 >= v39)
    {
      uint64_t v7 = 0;
      a3 = v36;
      goto LABEL_54;
    }
  }
  uint64_t v7 = v29;
LABEL_59:
  a3 = v36;
  long long v14 = v37;
LABEL_54:
  if (sampleBufferOut) {
    CFRelease(sampleBufferOut);
  }
  free(v14);
  if (!v7)
  {
    CFRelease(v6);
    CFIndex v6 = (opaqueCMSampleBuffer *)CMBufferQueueDequeueIfDataReadyAndRetain(*(CMBufferQueueRef *)(a1 + 616));
    goto LABEL_2;
  }
  CFRelease(v6);
  return v7;
}

uint64_t addSampleBufferToTrack(uint64_t a1, CMSampleBufferRef sbuf)
{
  int v2 = sbuf;
  uint64_t v96 = *MEMORY[0x1E4F143B8];
  CMItemCount NumSamples = CMSampleBufferGetNumSamples(sbuf);
  CFIndex v89 = 0;
  CMItemCount v90 = NumSamples;
  uint64_t v87 = 0;
  CFTypeRef cf = 0;
  if (!*(unsigned char *)(a1 + 492) || (*(unsigned char *)(a1 + 244) & 1) != 0) {
    goto LABEL_23;
  }
  timingArrayEntriesNeededOut.CMTimeValue value = 0;
  Outputuint64_t SampleTimingInfoArray = CMSampleBufferGetOutputSampleTimingInfoArray(v2, 0, 0, &timingArrayEntriesNeededOut.value);
  if (OutputSampleTimingInfoArray == -12736)
  {
    uint64_t v6 = 0;
    goto LABEL_22;
  }
  uint64_t v6 = OutputSampleTimingInfoArray;
  if (!OutputSampleTimingInfoArray)
  {
    if (timingArrayEntriesNeededOut.value)
    {
      if (timingArrayEntriesNeededOut.value > 0x38E38E38E38E38EuLL)
      {
LABEL_8:
        uint64_t v6 = FigSignalErrorAt();
        goto LABEL_22;
      }
      size_t v7 = 72 * timingArrayEntriesNeededOut.value;
      malloc_type_id_t v8 = 1556728742;
    }
    else
    {
      size_t v7 = 0;
      malloc_type_id_t v8 = 1270757447;
    }
    uint64_t v9 = (CMSampleTimingInfo *)malloc_type_malloc(v7, v8);
    if (!v9) {
      goto LABEL_8;
    }
    uint64_t v76 = v9;
    uint64_t v10 = CMSampleBufferGetOutputSampleTimingInfoArray(v2, timingArrayEntriesNeededOut.value, v9, 0);
    if (v10)
    {
      uint64_t v6 = v10;
    }
    else if (timingArrayEntriesNeededOut.value < 1)
    {
LABEL_17:
      uint64_t v6 = 0;
    }
    else
    {
      uint64_t v11 = 0;
      p_CMTimeFlags flags = &v76->presentationTimeStamp.flags;
      long long v77 = *MEMORY[0x1E4F1FA48];
      CMTimeEpoch v13 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
      while (1)
      {
        long long v14 = *(_OWORD *)(p_flags - 9);
        v93.CMTimeEpoch epoch = *(void *)(p_flags - 5);
        *(_OWORD *)&v93.CMTimeValue value = v14;
        CMTimeValue v15 = *(void *)(p_flags - 3);
        lhs.CMTimeScale timescale = *(p_flags - 1);
        lhs.CMTimeValue value = v15;
        CMTimeFlags v16 = *p_flags;
        uint64_t v17 = *(void *)(p_flags + 1);
        CMTimeValue v18 = *(void *)(p_flags + 3);
        rhs.CMTimeScale timescale = p_flags[5];
        rhs.CMTimeValue value = v18;
        CMTimeFlags v19 = p_flags[6];
        uint64_t v20 = *(void *)(p_flags + 7);
        *(_OWORD *)&time1.CMTimeValue value = v77;
        time1.CMTimeEpoch epoch = v13;
        *(_OWORD *)&time2.CMTimeValue value = v14;
        time2.CMTimeEpoch epoch = v93.epoch;
        if (CMTimeCompare(&time1, &time2) < 0) {
          break;
        }
        p_flags += 18;
        if (++v11 >= timingArrayEntriesNeededOut.value) {
          goto LABEL_17;
        }
      }
      if ((v19 & 1) == 0)
      {
        rhs.CMTimeValue value = lhs.value;
        rhs.CMTimeScale timescale = lhs.timescale;
        CMTimeFlags v19 = v16;
        uint64_t v20 = v17;
      }
      uint64_t v6 = 0;
      *(CMTime *)(a1 + 184) = v93;
      *(void *)(a1 + 208) = lhs.value;
      *(_DWORD *)(a1 + 216) = lhs.timescale;
      *(_DWORD *)(a1 + 220) = v16;
      CMTimeValue value = rhs.value;
      *(void *)(a1 + 224) = v17;
      *(void *)(a1 + 232) = value;
      *(_DWORD *)(a1 + 240) = rhs.timescale;
      *(_DWORD *)(a1 + 244) = v19;
      *(void *)(a1 + 248) = v20;
    }
    free(v76);
  }
LABEL_22:
  if (v6) {
    goto LABEL_142;
  }
LABEL_23:
  if (!NumSamples)
  {
    CFTypeRef v27 = (CFTypeRef)*MEMORY[0x1E4F1CFD0];
    CFTypeRef v28 = CMGetAttachment(v2, (CFStringRef)*MEMORY[0x1E4F1F250], 0);
    CFTypeRef v29 = CMGetAttachment(v2, (CFStringRef)*MEMORY[0x1E4F1F258], 0);
    CFTypeRef v30 = CMGetAttachment(v2, (CFStringRef)*MEMORY[0x1E4F1F2A0], 0);
    CFTypeRef v31 = CMGetAttachment(v2, (CFStringRef)*MEMORY[0x1E4F1F270], 0);
    CFTypeRef v32 = CMGetAttachment(v2, (CFStringRef)*MEMORY[0x1E4F1F238], 0);
    long long v33 = *MEMORY[0x1E4F1F9F8];
    *(_OWORD *)&v93.CMTimeValue value = *MEMORY[0x1E4F1F9F8];
    CMTimeEpoch v34 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
    v93.CMTimeEpoch epoch = v34;
    if (v27 == v28 || v27 == v29 || v27 == v30)
    {
      long long v79 = v33;
      memset(&time1, 0, sizeof(time1));
      CMSampleBufferGetOutputPresentationTimeStamp(&time1, v2);
      if (v27 == v28)
      {
        uint64_t v6 = 0;
        *(CMTime *)(a1 + 704) = time1;
      }
      else
      {
        if (v27 == v30) {
          int v43 = 5;
        }
        else {
          int v43 = 4;
        }
        CMTime time2 = time1;
        uint64_t v6 = beginTrackSessionWithEditBoundaryTime(a1, &time2, v43);
        if (!v6)
        {
          *(_OWORD *)(a1 + 704) = v79;
          *(void *)(a1 + 720) = v34;
        }
      }
      goto LABEL_142;
    }
    if (v27 == v31)
    {
      memset(&time1, 0, sizeof(time1));
      CMSampleBufferGetOutputDecodeTimeStamp(&time1, v2);
      if ((time1.flags & 1) == 0)
      {
        CMSampleBufferGetOutputPresentationTimeStamp(&time2, v2);
        CMTime time1 = time2;
      }
      if (*(unsigned char *)(a1 + 912))
      {
        CMTime lhs = time1;
        CMTime rhs = *(CMTime *)(a1 + 916);
        CMTimeAdd(&time2, &lhs, &rhs);
        CMTime time1 = time2;
      }
      CMTime lhs = time1;
      CMTime rhs = *(CMTime *)(a1 + 232);
      CMTimeSubtract(&time2, &lhs, &rhs);
      CMTime time1 = time2;
      CMTime lhs = *(CMTime *)(a1 + 256);
      CMTimeSubtract(&v93, &time2, &lhs);
      CMTime time2 = v93;
      uint64_t v35 = flushSampleBufferToTrack(a1, (uint64_t)&time2);
      goto LABEL_141;
    }
    if (v27 == v32 && *(_DWORD *)(a1 + 768) == 1 && *(_DWORD *)a1 == 1936684398)
    {
      uint64_t v35 = editBuilderResetCurrentEditMediaTime(*(void *)(a1 + 496));
      if (!v35)
      {
        *(unsigned char *)(a1 + 504) = 0;
        FigCEA608DataInspectorRelease(*(CFAllocatorRef **)(*(void *)(a1 + 496) + 8));
        uint64_t v35 = editBoundaryDetectorCreate(**(const __CFAllocator ***)(a1 + 496), (void *)(*(void *)(a1 + 496) + 8));
      }
LABEL_141:
      uint64_t v6 = v35;
      goto LABEL_142;
    }
    uint64_t v6 = 0;
LABEL_142:
    CFTypeID v53 = 0;
    goto LABEL_143;
  }
  *(_OWORD *)&v93.CMTimeValue value = *MEMORY[0x1E4F1FA48];
  CMTimeEpoch v22 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
  v93.CMTimeEpoch epoch = v22;
  long long v78 = *(_OWORD *)&v93.value;
  *(_OWORD *)&time1.CMTimeValue value = *(_OWORD *)&v93.value;
  time1.CMTimeEpoch epoch = v22;
  unsigned __int8 v86 = 0;
  CMItemCount numSampleTimingEntries = 0;
  double v85 = 1.0;
  uint64_t v83 = 0;
  char v82 = 0;
  if (!*(unsigned char *)(*(void *)(a1 + 16) + 760)) {
    FigPowerReduceUtilitySFI();
  }
  if (*(unsigned char *)(a1 + 716))
  {
    CMTime time2 = *(CMTime *)(a1 + 704);
    uint64_t v23 = beginTrackSessionWithEditBoundaryTime(a1, &time2, 3);
    if (v23)
    {
LABEL_77:
      uint64_t v6 = v23;
      goto LABEL_78;
    }
    uint64_t v24 = MEMORY[0x1E4F1F9F8];
    *(_OWORD *)(a1 + 704) = *MEMORY[0x1E4F1F9F8];
    *(void *)(a1 + 720) = *(void *)(v24 + 16);
  }
  getTrimDurationsAndSpeedMultiplierFromSbuf(v2, &v93, &time1, (char *)&v86, &v85);
  if (!*(_DWORD *)(a1 + 348))
  {
    if (*(_DWORD *)a1 == 1936684398)
    {
      FormatDescription = CMSampleBufferGetFormatDescription(v2);
      time2.CMTimeValue value = 0;
      *(void *)&time2.CMTimeScale timescale = 0;
      lhs.CMTimeValue value = 0;
      *(void *)&lhs.CMTimeScale timescale = 0;
      long long v37 = CMSampleBufferGetFormatDescription(v2);
      MostCompatibleFormat = CMAudioFormatDescriptionGetMostCompatibleFormat(v37);
      if (MostCompatibleFormat)
      {
        *(_OWORD *)&time2.CMTimeValue value = *(_OWORD *)&MostCompatibleFormat->mASBD.mSampleRate;
        int mBytesPerPacket = MostCompatibleFormat->mASBD.mBytesPerPacket;
        int mFramesPerPacket = MostCompatibleFormat->mASBD.mFramesPerPacket;
        *(_OWORD *)&lhs.CMTimeValue value = *(_OWORD *)&MostCompatibleFormat->mASBD.mBytesPerFrame;
      }
      else
      {
        uint64_t v6 = FigSignalErrorAt();
        if (v6) {
          goto LABEL_78;
        }
        int mFramesPerPacket = 0;
        int mBytesPerPacket = 0;
      }
      *(_OWORD *)(a1 + 360) = *(_OWORD *)&time2.value;
      *(_DWORD *)(a1 + 376) = mBytesPerPacket;
      *(_DWORD *)(a1 + 380) = mFramesPerPacket;
      *(_OWORD *)(a1 + 384) = *(_OWORD *)&lhs.value;
      CMTime v41 = *(unsigned char **)(a1 + 16);
      if ((v41[684] & 1) == 0)
      {
        rhs.CMTimeValue value = 0;
        if (v41[329]) {
          BOOL v42 = 1;
        }
        else {
          BOOL v42 = v41[384] != 0;
        }
        uint64_t v23 = CMAudioFormatDescriptionCopyAsBigEndianSoundDescriptionBlockBuffer(0, FormatDescription, 0, (CMBlockBufferRef *)&rhs);
        if (v23) {
          goto LABEL_77;
        }
        int v67 = CMDoesBigEndianSoundDescriptionRequireLegacyCBRSampleTableLayout((CMBlockBufferRef)rhs.value, 0);
        if (rhs.value) {
          CFRelease((CFTypeRef)rhs.value);
        }
        BOOL v68 = !*(unsigned char *)(a1 + 585) || v67 == 0;
        int v69 = v68 || v42;
        if (v69 != 1 && mBytesPerPacket && mFramesPerPacket)
        {
          MovieTrackSetSampleOverrides(*(void *)(a1 + 736), mBytesPerPacket, mFramesPerPacket);
          int v70 = (int)*(double *)(a1 + 360);
          *(_DWORD *)(a1 + 104) = v70;
          uint64_t v23 = MediaSampleTimingGeneratorSetMediaTimeScale(*(void *)(a1 + 752), v70);
          if (v23) {
            goto LABEL_77;
          }
          uint64_t v23 = MovieTrackSetMediaTimeScale(*(void *)(a1 + 736), *(_DWORD *)(a1 + 104));
          if (v23) {
            goto LABEL_77;
          }
          goto LABEL_130;
        }
      }
    }
    if (*(_DWORD *)(a1 + 104)) {
      goto LABEL_130;
    }
    if (*(_DWORD *)a1 == 1986618469)
    {
      CMTimeScale timescale = 600;
    }
    else if (*(_DWORD *)a1 == 1936684398)
    {
      CMTimeScale timescale = (int)*(double *)(a1 + 360);
    }
    else
    {
      memset(&time2, 0, sizeof(time2));
      CMSampleBufferGetPresentationTimeStamp(&time2, v2);
      if (time2.timescale <= 600) {
        CMTimeScale timescale = 600;
      }
      else {
        CMTimeScale timescale = time2.timescale;
      }
    }
    *(_DWORD *)(a1 + 104) = timescale;
    uint64_t v23 = MediaSampleTimingGeneratorSetMediaTimeScale(*(void *)(a1 + 752), timescale);
    if (v23) {
      goto LABEL_77;
    }
    uint64_t v35 = MovieTrackSetMediaTimeScale(*(void *)(a1 + 736), *(_DWORD *)(a1 + 104));
    if (!v35)
    {
LABEL_130:
      if ((*(unsigned char *)(a1 + 480) & 1) == 0)
      {
        *(_OWORD *)(a1 + 468) = v78;
        *(void *)(a1 + 484) = v22;
      }
      goto LABEL_30;
    }
    goto LABEL_141;
  }
LABEL_30:
  int v25 = *(_DWORD *)(a1 + 768);
  if (v25 == 5)
  {
    uint64_t v26 = *(void *)(a1 + 16);
    CMSampleBufferGetFormatDescription(v2);
    if (FigAudioFormatDescriptionEmploysDependentPackets()) {
      goto LABEL_32;
    }
    LOWORD(time2.CFDictionarySetValue(theDict, key, value) = 0;
    LOBYTE(lhs.CFDictionarySetValue(theDict, key, value) = 0;
    LOBYTE(rhs.CFDictionarySetValue(theDict, key, value) = 0;
    CFDictionaryRef v44 = CMCopyDictionaryOfAttachments((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v2, 1u);
    if (!v44) {
      goto LABEL_167;
    }
    CFDictionaryRef v45 = v44;
    uint64_t AudioRollRecoveryValueFromSampleBufferAttachment = FigMovieGetAudioRollRecoveryValueFromSampleBufferAttachment((uint64_t)v44, &time2, (BOOL *)&lhs, &rhs);
    if (AudioRollRecoveryValueFromSampleBufferAttachment)
    {
      uint64_t v6 = AudioRollRecoveryValueFromSampleBufferAttachment;
      CFRelease(v45);
      goto LABEL_78;
    }
    int value_low = LOBYTE(lhs.value);
    int v48 = LOBYTE(rhs.value);
    CFRelease(v45);
    if (value_low && v48)
    {
LABEL_32:
      int v25 = 3;
    }
    else
    {
LABEL_167:
      if (*(unsigned char *)(v26 + 384)) {
        int v25 = 4;
      }
      else {
        int v25 = 1;
      }
    }
    *(_DWORD *)(a1 + 768) = v25;
  }
  if (v25 == 1 && *(_DWORD *)a1 == 1936684398 && !*(unsigned char *)(a1 + 504))
  {
    memset(&time2, 0, sizeof(time2));
    CFIndex v55 = CMSampleBufferGetFormatDescription(v2);
    FigGaplessInfoGetDefaultAudioPrimingDuration(v55, &time2);
    *(_OWORD *)&lhs.CMTimeValue value = v78;
    lhs.CMTimeEpoch epoch = v22;
    CMTime rhs = time2;
    if (CMTimeCompare(&lhs, &rhs))
    {
      if (v86)
      {
        CMTime rhs = *(CMTime *)(a1 + 508);
        CMTime timingArrayEntriesNeededOut = v93;
        CMTimeAdd(&lhs, &rhs, &timingArrayEntriesNeededOut);
        *(CMTime *)(a1 + 508) = lhs;
      }
      else
      {
        memset(&lhs, 0, sizeof(lhs));
        CMTime rhs = *(CMTime *)(a1 + 508);
        CMTime timingArrayEntriesNeededOut = v93;
        CMTimeAdd(&lhs, &rhs, &timingArrayEntriesNeededOut);
        CMTime rhs = lhs;
        CMTime timingArrayEntriesNeededOut = time2;
        if (CMTimeCompare(&rhs, &timingArrayEntriesNeededOut) < 0)
        {
          CMTime rhs = *(CMTime *)(a1 + 508);
          CMTime timingArrayEntriesNeededOut = time2;
          CMTime v80 = v93;
          uint64_t v23 = createSynthesizedAudioPrimingSampleBuffer(&rhs, &timingArrayEntriesNeededOut, v2, a1 + 360, NumSamples, &v80, &cf, &v90, &v93);
          if (v23) {
            goto LABEL_77;
          }
          int v2 = (opaqueCMSampleBuffer *)cf;
        }
        *(CMTime *)(*(void *)(*(void *)(a1 + 496) + 16) + 120) = time2;
        *(unsigned char *)(a1 + 504) = 1;
      }
    }
  }
  if (*(unsigned char *)(a1 + 492))
  {
    uint64_t SampleTimingInfoArray = CMSampleBufferGetSampleTimingInfoArray(v2, 0, 0, &numSampleTimingEntries);
    if (SampleTimingInfoArray != -12736)
    {
      uint64_t v6 = SampleTimingInfoArray;
      if (!SampleTimingInfoArray)
      {
        if (!numSampleTimingEntries)
        {
          size_t v50 = 0;
          malloc_type_id_t v51 = 1270757447;
LABEL_87:
          CFTypeID v53 = (char *)malloc_type_malloc(v50, v51);
          if (v53)
          {
            uint64_t v54 = CMSampleBufferGetSampleTimingInfoArray(v2, numSampleTimingEntries, (CMSampleTimingInfo *)v53, 0);
            if (!v54) {
              goto LABEL_109;
            }
            goto LABEL_97;
          }
          goto LABEL_76;
        }
        if ((unint64_t)numSampleTimingEntries <= 0x38E38E38E38E38ELL)
        {
          size_t v50 = 72 * numSampleTimingEntries;
          malloc_type_id_t v51 = 1556728742;
          goto LABEL_87;
        }
LABEL_76:
        uint64_t v23 = FigSignalErrorAt();
        goto LABEL_77;
      }
      goto LABEL_78;
    }
LABEL_72:
    uint64_t v6 = 0;
    goto LABEL_78;
  }
  uint64_t v52 = CMSampleBufferGetOutputSampleTimingInfoArray(v2, 0, 0, &numSampleTimingEntries);
  if (v52 == -12736) {
    goto LABEL_72;
  }
  uint64_t v6 = v52;
  if (!v52)
  {
    if (numSampleTimingEntries)
    {
      if ((unint64_t)numSampleTimingEntries > 0x38E38E38E38E38ELL) {
        goto LABEL_76;
      }
      size_t v56 = 72 * numSampleTimingEntries;
      malloc_type_id_t v57 = 1556728742;
    }
    else
    {
      size_t v56 = 0;
      malloc_type_id_t v57 = 1270757447;
    }
    CFTypeID v53 = (char *)malloc_type_malloc(v56, v57);
    if (v53)
    {
      uint64_t v54 = CMSampleBufferGetOutputSampleTimingInfoArray(v2, numSampleTimingEntries, (CMSampleTimingInfo *)v53, 0);
      if (!v54)
      {
        memset(&time2, 0, sizeof(time2));
        getTrimDurationFromSampleBuffer(v2, (const __CFString *)*MEMORY[0x1E4F1F308], (uint64_t)&time2);
        memset(&lhs, 0, sizeof(lhs));
        CMTime rhs = time2;
        CMTimeMultiplyByFloat64(&lhs, &rhs, 1.0 / v85);
        CMTime timingArrayEntriesNeededOut = *(CMTime *)(v53 + 1);
        CMTime v80 = lhs;
        CMTimeSubtract(&rhs, &timingArrayEntriesNeededOut, &v80);
        *((CMTime *)v53 + 1) = rhs;
        CMTime timingArrayEntriesNeededOut = *(CMTime *)(v53 + 2);
        CMTime v80 = lhs;
        CMTimeSubtract(&rhs, &timingArrayEntriesNeededOut, &v80);
        *((CMTime *)v53 + 2) = rhs;
        if (*(unsigned char *)(a1 + 912))
        {
          uint64_t v59 = v53 + 24;
          uint64_t v60 = v53 + 48;
          if ((v53[60] & 1) == 0)
          {
            *uint64_t v60 = *v59;
            *((void *)v53 + 8) = *((void *)v53 + 5);
          }
          CFArrayRef SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(v2, 0);
          if (isFirstSampleAttachmentSync(SampleAttachmentsArray))
          {
            *(_OWORD *)&timingArrayEntriesNeededOut.CMTimeValue value = *v59;
            timingArrayEntriesNeededOut.CMTimeEpoch epoch = *((void *)v53 + 5);
            *(_OWORD *)&v80.CMTimeValue value = *v60;
            v80.CMTimeEpoch epoch = *((void *)v53 + 8);
            CMTimeSubtract(&rhs, &timingArrayEntriesNeededOut, &v80);
            *(CMTime *)(a1 + 916) = rhs;
          }
          *(_OWORD *)&timingArrayEntriesNeededOut.CMTimeValue value = *v60;
          timingArrayEntriesNeededOut.CMTimeEpoch epoch = *((void *)v53 + 8);
          CMTime v80 = *(CMTime *)(a1 + 916);
          CMTimeAdd(&rhs, &timingArrayEntriesNeededOut, &v80);
          *uint64_t v60 = *(_OWORD *)&rhs.value;
          *((void *)v53 + 8) = rhs.epoch;
        }
LABEL_109:
        if (!*(unsigned char *)(a1 + 492) && (*(unsigned char *)(a1 + 244) & 1) == 0)
        {
          *(void *)&time2.CMTimeScale timescale = 0;
          time2.CMTimeEpoch epoch = 0;
          time2.CMTimeValue value = 0;
          long long v62 = *(_OWORD *)v53;
          time2.CMTimeEpoch epoch = *((void *)v53 + 2);
          lhs.CMTimeValue value = *((void *)v53 + 3);
          int v63 = *((_DWORD *)v53 + 9);
          lhs.CMTimeScale timescale = *((_DWORD *)v53 + 8);
          uint64_t v64 = *((void *)v53 + 5);
          rhs.CMTimeValue value = *((void *)v53 + 6);
          int v65 = *((_DWORD *)v53 + 15);
          rhs.CMTimeScale timescale = *((_DWORD *)v53 + 14);
          *(_OWORD *)&time2.CMTimeValue value = v62;
          if (v65)
          {
            uint64_t v66 = *((void *)v53 + 8);
          }
          else
          {
            rhs.CMTimeValue value = *((void *)v53 + 3);
            rhs.CMTimeScale timescale = *((_DWORD *)v53 + 8);
            int v65 = v63;
            uint64_t v66 = v64;
          }
          *(CMTime *)(a1 + 184) = time2;
          *(void *)(a1 + 208) = lhs.value;
          *(_DWORD *)(a1 + 216) = lhs.timescale;
          *(_DWORD *)(a1 + 220) = v63;
          CMTimeValue v73 = rhs.value;
          *(void *)(a1 + 224) = v64;
          *(void *)(a1 + 232) = v73;
          *(_DWORD *)(a1 + 240) = rhs.timescale;
          *(_DWORD *)(a1 + 244) = v65;
          *(void *)(a1 + 248) = v66;
        }
        uint64_t v54 = MediaSampleTimingGeneratorCreateMediaSampleTimingInfoArray(*(void *)(a1 + 752), v90, numSampleTimingEntries, (uint64_t)v53, &v87, &v83, &v89, &v82);
        if (!v54)
        {
          if (v82)
          {
            uint64_t v58 = *(opaqueCMSampleBuffer **)(a1 + 328);
            if (v2) {
              CFTypeRef v74 = CFRetain(v2);
            }
            else {
              CFTypeRef v74 = 0;
            }
            *(void *)(a1 + 328) = v74;
            int v2 = v58;
            if (!v58) {
              goto LABEL_158;
            }
          }
          else
          {
            uint64_t v58 = 0;
            if (!v2) {
              goto LABEL_158;
            }
          }
          CMTime time2 = v93;
          CMTime lhs = time1;
          uint64_t v75 = addSampleBufferWithSampleMediaTimingToTrack(a1, v2, v83, (CMTime *)v89, (uint64_t)&time2, (uint64_t)&lhs, v86, v85);
          if (v75)
          {
            uint64_t v6 = v75;
            goto LABEL_99;
          }
LABEL_158:
          uint64_t v6 = 0;
          goto LABEL_99;
        }
      }
LABEL_97:
      uint64_t v6 = v54;
      goto LABEL_98;
    }
    goto LABEL_76;
  }
LABEL_78:
  CFTypeID v53 = 0;
LABEL_98:
  uint64_t v58 = 0;
LABEL_99:
  if (cf) {
    CFRelease(cf);
  }
  if (v58) {
    CFRelease(v58);
  }
LABEL_143:
  MediaSampleTimingGeneratorDisposeMediaSampleTimingInfoArray(v89);
  free(v53);
  return v6;
}

uint64_t flushSampleBufferToTrack(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  if (*(void *)(a1 + 328) && (*(_DWORD *)(a2 + 12) & 0x1D) == 1)
  {
    uint64_t v3 = *(void *)(a1 + 752);
    long long v9 = *(_OWORD *)a2;
    uint64_t v10 = *(void *)(a2 + 16);
    uint64_t v4 = MediaSampleTimingGeneratorCreateLastMediaSampleTimingInfoArray(v3, &v9, &v13, &v12, &v11);
    CFIndex v5 = v11;
    if (v4)
    {
      uint64_t v6 = v4;
    }
    else
    {
      uint64_t v6 = addSampleBufferWithSampleMediaTimingToTrack(a1, *(CMSampleBufferRef *)(a1 + 328), v12, (CMTime *)v11, MEMORY[0x1E4F1FA48], MEMORY[0x1E4F1FA48], 0, 1.0);
      CFIndex v5 = v11;
    }
  }
  else
  {
    CFIndex v5 = 0;
    uint64_t v6 = 0;
  }
  MediaSampleTimingGeneratorDisposeMediaSampleTimingInfoArray(v5);
  size_t v7 = *(const void **)(a1 + 328);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(a1 + 328) = 0;
  }
  return v6;
}

uint64_t callFragmentCallback(uint64_t a1)
{
  CMBlockBufferRef theBuffer = 0;
  if (!CMBlockBufferGetDataLength(*(CMBlockBufferRef *)(a1 + 440))) {
    return 0;
  }
  uint64_t v2 = MovieSampleDataWriterPatchMediaDataAtomSizeIfNeeded(*(uint64_t **)(a1 + 744));
  if (v2) {
    return v2;
  }
  uint64_t appended = createMovieFragmentAtomBBuf(a1, &theBuffer);
  uint64_t v4 = theBuffer;
  if (appended
    || (DataCFIndex Length = CMBlockBufferGetDataLength(theBuffer),
        uint64_t appended = CMBlockBufferAppendBufferReference(v4, *(CMBlockBufferRef *)(a1 + 440), 0, 0, 0),
        appended))
  {
    uint64_t v9 = appended;
    goto LABEL_51;
  }
  uint64_t v6 = *(void *)(a1 + 432);
  if (v6) {
    size_t v7 = v6 + DataLength;
  }
  else {
    size_t v7 = 0;
  }
  CFArrayRef v8 = *(const __CFArray **)(a1 + 488);
  if (v8) {
    uint64_t capacity = CFArrayGetCount(v8);
  }
  else {
    uint64_t capacity = 0;
  }
  CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
    uint64_t v9 = FigSignalErrorAt();
    if (!v9) {
      goto LABEL_58;
    }
    goto LABEL_51;
  }
  uint64_t v12 = Mutable;
  uint64_t v13 = FigCFDictionarySetInt32();
  if (v13)
  {
LABEL_65:
    uint64_t v9 = v13;
    goto LABEL_57;
  }
  CFMutableArrayRef v14 = CFArrayCreateMutable(v10, capacity, MEMORY[0x1E4F1D510]);
  if (!v14)
  {
    uint64_t v13 = FigSignalErrorAt();
    goto LABEL_65;
  }
  CFMutableArrayRef v15 = v14;
  CFDictionaryRef theDict = v12;
  size_t v37 = v7;
  if (capacity < 1)
  {
LABEL_44:
    CFTypeRef v29 = theDict;
    CFDictionarySetValue(theDict, @"SegmentReportKey_TrackReports", v15);
    CFRelease(v15);
    size_t v7 = v37;
    goto LABEL_45;
  }
  uint64_t v16 = capacity;
  CFIndex v17 = 0;
  CMItemCount v39 = (const void *)*MEMORY[0x1E4F1CFD0];
  long long v38 = (const void *)*MEMORY[0x1E4F1CFC8];
  while (1)
  {
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 488), v17);
    int64_t v44 = 0;
    int64_t value = 0;
    CFMutableDictionaryRef v19 = CFDictionaryCreateMutable(v10, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!v19) {
      break;
    }
    CFMutableDictionaryRef v20 = v19;
    uint64_t TrackFragmentMediaDecodeDuration = FigCFDictionarySetInt32();
    if (TrackFragmentMediaDecodeDuration) {
      goto LABEL_54;
    }
    uint64_t TrackFragmentMediaDecodeDuration = FigCFDictionarySetInt32();
    if (TrackFragmentMediaDecodeDuration) {
      goto LABEL_54;
    }
    uint64_t TrackFragmentMediaDecodeDuration = MovieTrackFragmentGetTrackFragmentMediaDecodeDuration(*((void *)ValueAtIndex + 92), &value);
    if (TrackFragmentMediaDecodeDuration) {
      goto LABEL_54;
    }
    memset(&v43, 0, sizeof(v43));
    CMTimeMake(&v43, value, *((_DWORD *)ValueAtIndex + 26));
    long long v51 = *(_OWORD *)&v43.value;
    *(void *)&v52[0] = v43.epoch;
    uint64_t TrackFragmentMediaDecodeDuration = FigCFDictionarySetCMTime();
    if (TrackFragmentMediaDecodeDuration
      || (TrackFragmentMediaDecodeDuration = MovieTrackFragmentGetTrackFragmentLowestDisplayStartTimeValue(*((void *)ValueAtIndex + 92), &v44), TrackFragmentMediaDecodeDuration)|| (memset(&v42, 0, sizeof(v42)), CMTimeMake(&v42, v44, *((_DWORD *)ValueAtIndex + 26)), long long v51 = *(_OWORD *)&v42.value, *(void *)&v52[0] = v42.epoch, TrackFragmentMediaDecodeDuration = FigCFDictionarySetCMTime(), TrackFragmentMediaDecodeDuration))
    {
LABEL_54:
      uint64_t v9 = TrackFragmentMediaDecodeDuration;
LABEL_55:
      size_t v7 = v37;
      uint64_t v12 = theDict;
      CFRelease(v20);
      goto LABEL_56;
    }
    if (*(_DWORD *)ValueAtIndex == 1986618469 && *((unsigned char *)ValueAtIndex + 905))
    {
      CMTimeEpoch v22 = v15;
      v55[0] = 0;
      char v54 = 0;
      CFMutableDictionaryRef v23 = CFDictionaryCreateMutable(v10, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (v23)
      {
        uint64_t v24 = v23;
        TrackFragmentBaseMediaDecodeTimeCFNumberRef Value = MovieTrackFragmentGetTrackFragmentBaseMediaDecodeTimeValue(*((void *)ValueAtIndex + 92), v55, &v54);
        if (!TrackFragmentBaseMediaDecodeTimeValue)
        {
          if (v54 == 1)
          {
            long long v26 = *((_OWORD *)ValueAtIndex + 54);
            v52[1] = *((_OWORD *)ValueAtIndex + 53);
            v52[2] = v26;
            CMTimeEpoch v53 = *((void *)ValueAtIndex + 110);
            long long v27 = *((_OWORD *)ValueAtIndex + 52);
            long long v51 = *((_OWORD *)ValueAtIndex + 51);
            v52[0] = v27;
            CMTime lhs = *(CMTime *)((char *)v52 + 8);
            memset(&v50, 0, sizeof(v50));
            *(_OWORD *)&rhs.int64_t value = v26;
            rhs.CMTimeEpoch epoch = v53;
            CMTimeSubtract(&v50, &lhs, &rhs);
            memset(&v47, 0, sizeof(v47));
            CMTimeMake(&v47, v55[0], *((_DWORD *)ValueAtIndex + 26));
            memset(&v46, 0, sizeof(v46));
            CMTime lhs = v47;
            CMTime rhs = v50;
            CMTimeAdd(&v46, &lhs, &rhs);
            CMTime lhs = v46;
            TrackFragmentBaseMediaDecodeTimeCFNumberRef Value = FigCFDictionarySetCMTime();
            if (!TrackFragmentBaseMediaDecodeTimeValue)
            {
              TrackFragmentBaseMediaDecodeTimeCFNumberRef Value = FigCFDictionarySetInt32();
              if (!TrackFragmentBaseMediaDecodeTimeValue)
              {
                TrackFragmentBaseMediaDecodeTimeCFNumberRef Value = FigCFDictionarySetInt32();
                if (!TrackFragmentBaseMediaDecodeTimeValue)
                {
                  if (*((unsigned char *)ValueAtIndex + 904)) {
                    CFTypeRef v28 = v39;
                  }
                  else {
                    CFTypeRef v28 = v38;
                  }
                  CFDictionarySetValue(v24, @"SegmentReportSampleInformationKey_IsSyncSample", v28);
                  CFDictionarySetValue(v20, @"SegmentTrackReportKey_FirstVideoSampleInformation", v24);
                  CFRelease(v24);
                  CFMutableArrayRef v15 = v22;
LABEL_36:
                  uint64_t v16 = capacity;
                  goto LABEL_37;
                }
              }
            }
          }
          else
          {
            TrackFragmentBaseMediaDecodeTimeCFNumberRef Value = FigSignalErrorAt();
          }
        }
        uint64_t v9 = TrackFragmentBaseMediaDecodeTimeValue;
        CFRelease(v24);
      }
      else
      {
        uint64_t v9 = FigSignalErrorAt();
      }
      CFMutableArrayRef v15 = v22;
      if (v9) {
        goto LABEL_55;
      }
      CFDictionarySetValue(v20, @"SegmentTrackReportKey_FirstVideoSampleInformation", 0);
      goto LABEL_36;
    }
LABEL_37:
    CFArrayAppendValue(v15, v20);
    CFRelease(v20);
    if (v16 == ++v17) {
      goto LABEL_44;
    }
  }
  uint64_t v9 = FigSignalErrorAt();
  size_t v7 = v37;
  uint64_t v12 = theDict;
LABEL_56:
  CFRelease(v15);
LABEL_57:
  CFRelease(v12);
  if (!v9)
  {
LABEL_58:
    CFTypeRef v29 = 0;
LABEL_45:
    CFTypeRef v31 = *(uint64_t (**)(uint64_t, OpaqueCMBlockBuffer *, long long *, size_t, __CFDictionary *))(a1 + 392);
    uint64_t v30 = *(void *)(a1 + 400);
    long long v51 = *(_OWORD *)(a1 + 408);
    *(void *)&v52[0] = *(void *)(a1 + 424);
    uint64_t BlockBufferByteStreamForMovieSampleDataWriter = v31(v30, v4, &v51, v7, v29);
    if (!BlockBufferByteStreamForMovieSampleDataWriter)
    {
      MovieInformationReleaseMovieFragmentSampleTables(*(void *)(a1 + 728));
      uint64_t v33 = MEMORY[0x1E4F1F9F8];
      *(_OWORD *)(a1 + 408) = *MEMORY[0x1E4F1F9F8];
      *(void *)(a1 + 424) = *(void *)(v33 + 16);
      *(void *)(a1 + 432) = 0;
      CMTimeEpoch v34 = *(const void **)(a1 + 440);
      if (v34) {
        CFRelease(v34);
      }
      clearAllTracksFirstSampleInfoInFragment(a1);
      uint64_t BlockBufferByteStreamForMovieSampleDataWriter = createBlockBufferByteStreamForMovieSampleDataWriter(a1);
    }
    uint64_t v9 = BlockBufferByteStreamForMovieSampleDataWriter;
    if (v29) {
      CFRelease(v29);
    }
  }
LABEL_51:
  if (v4) {
    CFRelease(v4);
  }
  return v9;
}

uint64_t clearAllTracksHeaderDataCompleteFlag(uint64_t a1)
{
  uint64_t result = CFArrayGetCount(*(CFArrayRef *)(a1 + 488));
  if (result >= 1)
  {
    uint64_t v3 = result;
    for (CFIndex i = 0; i != v3; ++i)
    {
      uint64_t result = (uint64_t)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 488), i);
      *(unsigned char *)(result + 600) = 0;
    }
  }
  return result;
}

uint64_t createMovieFragmentAtomBBuf(uint64_t a1, CMBlockBufferRef *a2)
{
  uint64_t v4 = *(void *)(a1 + 736);
  CMBlockBufferRef theBuffer = 0;
  uint64_t inserted = InsertMediaSegments(a1, 0);
  if (inserted) {
    return inserted;
  }
  if (*(unsigned char *)(a1 + 384) && !*(unsigned char *)(a1 + 761))
  {
    uint64_t v34 = v4;
    uint64_t v35 = a2;
    CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 488));
    if (Count >= 1)
    {
      CFIndex v7 = Count;
      CFIndex v8 = 0;
      long long v38 = *MEMORY[0x1E4F1F9F8];
      CMTimeEpoch v9 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
      long long v37 = *MEMORY[0x1E4F1FA10];
      CMTimeEpoch v10 = *(void *)(MEMORY[0x1E4F1FA10] + 16);
      long long v36 = *MEMORY[0x1E4F1FA48];
      CMTimeEpoch v11 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
      do
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 488), v8);
        memset(&v40, 0, sizeof(v40));
        CFIndex v13 = CFArrayGetCount(*(CFArrayRef *)(*((void *)ValueAtIndex + 2) + 488));
        *(_OWORD *)&v40.int64_t value = v38;
        v40.CMTimeEpoch epoch = v9;
        *(_OWORD *)&v44.int64_t value = v37;
        v44.CMTimeEpoch epoch = v10;
        if (v13 >= 1)
        {
          CFIndex v14 = v13;
          for (CFIndex i = 0; i != v14; ++i)
          {
            uint64_t v16 = CFArrayGetValueAtIndex(*(CFArrayRef *)(*((void *)ValueAtIndex + 2) + 488), i);
            getDecodeTimeForTrackFragmentInitialBaseMediaDecodeTime((uint64_t)v16, (uint64_t)&time1);
            CMTime v40 = time1;
            CMTimeEpoch epoch = time1.epoch;
            long long v18 = *(_OWORD *)&time1.value;
            CMTime time1 = v44;
            *(_OWORD *)&time2.int64_t value = v18;
            time2.CMTimeEpoch epoch = epoch;
            CMTimeMinimum(&v44, &time1, &time2);
          }
        }
        getDecodeTimeForTrackFragmentInitialBaseMediaDecodeTime((uint64_t)ValueAtIndex, (uint64_t)&v40);
        CMTime time1 = v44;
        *(_OWORD *)&time2.int64_t value = v36;
        time2.CMTimeEpoch epoch = v11;
        if (CMTimeCompare(&time1, &time2) < 0)
        {
          CMTime time1 = v44;
          CMTimeAbsoluteValue(&time2, &time1);
          CMTime lhs = v40;
          CMTimeAdd(&time1, &lhs, &time2);
          CMTime v40 = time1;
        }
        int32_t v19 = *((_DWORD *)ValueAtIndex + 26);
        CMTime lhs = v40;
        CMTimeConvertScale(&time1, &lhs, v19, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
        CMTime v40 = time1;
        uint64_t v20 = MovieTrackFragmentSetInitialBaseMediaDecodeTimeValue(*((void *)ValueAtIndex + 92), time1.value);
        if (v20) {
          goto LABEL_35;
        }
      }
      while (++v8 != v7);
    }
    *(unsigned char *)(a1 + 761) = 1;
    uint64_t v4 = v34;
    a2 = v35;
  }
  uint64_t v21 = *(void *)(a1 + 736);
  CFIndex v22 = CFArrayGetCount(*(CFArrayRef *)(a1 + 488));
  uint64_t v20 = MovieHeaderMakerSetShouldWriteBaseDataOffsetIsMovieFragmentAtomFlagInTrackFragment(v21, *(unsigned char *)(a1 + 384));
  if (!v20)
  {
    uint64_t v20 = MovieHeaderMakerSetShouldWriteBaseMediaDecodeTimeAtomInTrackFragment(v21, *(unsigned char *)(a1 + 333));
    if (!v20)
    {
      if (v22 >= 1)
      {
        CFIndex v23 = 0;
        do
        {
          uint64_t v24 = (uint64_t *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 488), v23);
          int v25 = v24;
          char v26 = *((unsigned char *)v24 + 353) && *(unsigned char *)(a1 + 384) == 0;
          uint64_t v27 = v24[93];
          int v28 = *((_DWORD *)v24 + 192);
          uint64_t v20 = MovieHeaderMakerTrackSetShouldWriteEditAtomInTrackFragment(v21, v27, v26);
          if (v20) {
            goto LABEL_35;
          }
          uint64_t v20 = MovieHeaderMakerTrackSetShouldWriteRollSampleGroupAtoms(v21, v27, v28 == 3);
          if (v20) {
            goto LABEL_35;
          }
          uint64_t v20 = MovieHeaderMakerTrackSetShouldWriteSampleAuxiliaryInformationAtoms(v21, v27, *((unsigned char *)v25 + 729));
          if (v20) {
            goto LABEL_35;
          }
        }
        while (v22 != ++v23);
      }
      CFAllocatorRef v29 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      uint64_t v20 = MovieHeaderMakerCopyMovieFragmentHeaderAsBlockBuffer(v4, (const __CFAllocator *)*MEMORY[0x1E4F1CF80], *(void *)(a1 + 712), *(_DWORD *)(a1 + 376), &theBuffer);
      if (!v20)
      {
        DataCFIndex Length = CMBlockBufferGetDataLength(theBuffer);
        if (!DataLength)
        {
LABEL_33:
          uint64_t v32 = 0;
          *a2 = theBuffer;
          return v32;
        }
        if (!*(unsigned char *)(a1 + 384)) {
          goto LABEL_32;
        }
        uint64_t v31 = DataLength;
        if (theBuffer)
        {
          CFRelease(theBuffer);
          CMBlockBufferRef theBuffer = 0;
        }
        uint64_t v20 = MovieHeaderMakerAddByteCountToTrackRunDataOffsets(v4, v31);
        if (!v20)
        {
          uint64_t v20 = MovieHeaderMakerCopyMovieFragmentHeaderAsBlockBuffer(v4, v29, *(void *)(a1 + 712), *(_DWORD *)(a1 + 376), &theBuffer);
          if (!v20)
          {
LABEL_32:
            ++*(_DWORD *)(a1 + 376);
            goto LABEL_33;
          }
        }
      }
    }
  }
LABEL_35:
  uint64_t v32 = v20;
  if (theBuffer) {
    CFRelease(theBuffer);
  }
  return v32;
}

__n128 clearAllTracksFirstSampleInfoInFragment(uint64_t a1)
{
  CFArrayRef v2 = *(const __CFArray **)(a1 + 488);
  if (v2)
  {
    CFIndex Count = CFArrayGetCount(v2);
    if (Count >= 1)
    {
      CFIndex v5 = Count;
      CFIndex v6 = 0;
      long long v11 = *(_OWORD *)(MEMORY[0x1E4F1FA70] + 48);
      long long v12 = *(_OWORD *)(MEMORY[0x1E4F1FA70] + 32);
      uint64_t v7 = *(void *)(MEMORY[0x1E4F1FA70] + 64);
      __n128 v9 = *(__n128 *)MEMORY[0x1E4F1FA70];
      long long v10 = *(_OWORD *)(MEMORY[0x1E4F1FA70] + 16);
      do
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 488), v6);
        ValueAtIndex[53] = v12;
        ValueAtIndex[54] = v11;
        *((void *)ValueAtIndex + 110) = v7;
        __n128 result = v9;
        ValueAtIndex[51] = v9;
        ValueAtIndex[52] = v10;
        ++v6;
        *((void *)ValueAtIndex + 112) = 0;
        *((void *)ValueAtIndex + 111) = 0;
        *((_WORD *)ValueAtIndex + 452) = 0;
      }
      while (v5 != v6);
    }
  }
  return result;
}

uint64_t getDecodeTimeForTrackFragmentInitialBaseMediaDecodeTime@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = *(void *)(a1 + 424);
  if (result)
  {
    uint64_t result = CFArrayGetCount((CFArrayRef)result);
    uint64_t v5 = MEMORY[0x1E4F1F9F8];
    *(_OWORD *)a2 = *MEMORY[0x1E4F1F9F8];
    *(void *)(a2 + 16) = *(void *)(v5 + 16);
    if (result >= 1)
    {
      uint64_t v6 = result;
      CFIndex v7 = 0;
      while (1)
      {
        uint64_t result = (uint64_t)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 424), v7);
        if (*(unsigned char *)(result + 60)) {
          break;
        }
        if (v6 == ++v7) {
          goto LABEL_9;
        }
      }
      long long v9 = *(_OWORD *)(result + 48);
      *(void *)(a2 + 16) = *(void *)(result + 64);
      *(_OWORD *)a2 = v9;
    }
  }
  else
  {
    uint64_t v8 = MEMORY[0x1E4F1F9F8];
    *(_OWORD *)a2 = *MEMORY[0x1E4F1F9F8];
    *(void *)(a2 + 16) = *(void *)(v8 + 16);
  }
LABEL_9:
  if ((*(unsigned char *)(a2 + 12) & 1) == 0)
  {
    *(_OWORD *)a2 = *(_OWORD *)(a1 + 232);
    *(void *)(a2 + 16) = *(void *)(a1 + 248);
  }
  if (*(_DWORD *)a1 == 1936684398)
  {
    uint64_t result = FigCFEqual();
    BOOL v10 = result != 0;
  }
  else
  {
    BOOL v10 = 0;
  }
  if (*(unsigned char *)(a1 + 492) && !v10)
  {
    uint64_t FirstEditBuilder = getFirstEditBuilder(a1);
    CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(FirstEditBuilder + 24));
    uint64_t result = editMediaTimeIsValid(*(void *)(FirstEditBuilder + 16));
    if (Count + result)
    {
      CMTime v13 = *(CMTime *)((char *)editBuilderGetEditMediaTimeAtIndex(FirstEditBuilder, 0) + 60);
      CMTime lhs = *(CMTime *)a2;
      return (uint64_t)CMTimeSubtract((CMTime *)a2, &lhs, &v13);
    }
  }
  return result;
}

CMBufferRef trackBufferQueueGetHead(uint64_t a1)
{
  CMBufferRef result = CMBufferQueueGetHead(*(CMBufferQueueRef *)(a1 + 616));
  if (!result)
  {
    uint64_t v3 = *(opaqueCMBufferQueue **)(a1 + 608);
    return CMBufferQueueGetHead(v3);
  }
  return result;
}

uint64_t isFirstSampleAttachmentSync(const __CFArray *a1)
{
  if (!a1) {
    return 1;
  }
  if (CFArrayGetCount(a1))
  {
    CFArrayGetValueAtIndex(a1, 0);
    FigCFDictionaryGetBooleanIfPresent();
  }
  return 1;
}

uint64_t beginTrackSessionWithEditBoundaryTime(uint64_t a1, CMTime *a2, int a3)
{
  CMTime v12 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  memset(&v11, 0, sizeof(v11));
  CMTime lhs = *a2;
  CMTime rhs = *(CMTime *)(a1 + 232);
  CMTimeSubtract(&v11, &lhs, &rhs);
  memset(&lhs, 0, sizeof(lhs));
  CMTime rhs = v11;
  CMTime v8 = *(CMTime *)(a1 + 256);
  CMTimeSubtract(&lhs, &rhs, &v8);
  MediaSampleTimingGeneratorGetDefaultLastSampleDuration(*(CMTime **)(a1 + 752), &time2);
  CMTime rhs = lhs;
  CMTimeMaximum(&v12, &rhs, &time2);
  CMTime rhs = v12;
  uint64_t result = flushSampleBufferToTrack(a1, (uint64_t)&rhs);
  if (!result)
  {
    CMTime rhs = *a2;
    uint64_t result = trackEndSession(a1, (long long *)&rhs.value, a3);
    if (!result)
    {
      CMTime rhs = *a2;
      return trackBeginSession(a1, (long long *)&rhs.value, a3);
    }
  }
  return result;
}

uint64_t createSynthesizedAudioPrimingSampleBuffer(CMTime *a1, CMTime *a2, CMSampleBufferRef sbuf, uint64_t a4, uint64_t a5, CMTime *a6, void *a7, CMItemCount *a8, CMTime *a9)
{
  CMBlockBufferRef blockBufferOut = 0;
  CMSampleBufferRef v100 = 0;
  CMItemCount timingArrayEntriesNeededOut = 0;
  CMItemCount sizeArrayEntriesNeededOut = 0;
  memset(&timingInfoOut, 0, sizeof(timingInfoOut));
  CMBlockBufferRef DataBuffer = CMSampleBufferGetDataBuffer(sbuf);
  CMTime lhs = *a1;
  CMTime rhs = *a6;
  CMTimeAdd(&v103, &lhs, &rhs);
  CMTime rhs = *a2;
  CMTime v95 = v103;
  CMTimeSubtract(&lhs, &rhs, &v95);
  long long v102 = *(_OWORD *)&lhs.timescale;
  int32_t v17 = (int)*(double *)a4;
  CMTime rhs = lhs;
  CMTimeConvertScale(&lhs, &rhs, v17, kCMTimeRoundingMethod_RoundAwayFromZero);
  long long v102 = *(_OWORD *)&lhs.timescale;
  unsigned int v18 = *(_DWORD *)(a4 + 20);
  uint64_t v19 = (LODWORD(lhs.value) + v18 - 1) / v18;
  CMTimeMake(&v95, v19 * v18, (int)*(double *)a4);
  CMTime lhs = v95;
  CMTime v94 = *a6;
  CMTimeAdd(&rhs, &lhs, &v94);
  uint64_t v20 = CMSampleBufferGetSampleSizeArray(sbuf, 0, 0, &sizeArrayEntriesNeededOut);
  if (v20)
  {
    uint64_t v32 = v20;
    sampleSizeArray = 0;
    goto LABEL_30;
  }
  if (sizeArrayEntriesNeededOut == 1) {
    unint64_t v21 = 1;
  }
  else {
    unint64_t v21 = sizeArrayEntriesNeededOut + (int)v19;
  }
  uint64_t v22 = v19;
  if (v21)
  {
    if (v21 >> 61)
    {
      sampleSizeArray = 0;
LABEL_28:
      uint64_t appended = FigSignalErrorAt();
      goto LABEL_29;
    }
    size_t v24 = 8 * v21;
    malloc_type_id_t v25 = 1556728742;
  }
  else
  {
    size_t v24 = 0;
    malloc_type_id_t v25 = 1270757447;
  }
  sampleSizeArray = (size_t *)malloc_type_malloc(v24, v25);
  if (!sampleSizeArray) {
    goto LABEL_28;
  }
  size_t SampleSize = CMSampleBufferGetSampleSize(sbuf, 0);
  CFAllocatorRef v27 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t appended = CMBlockBufferCreateEmpty((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, &blockBufferOut);
  if (appended) {
    goto LABEL_29;
  }
  uint64_t v92 = v22;
  if ((int)v22 >= 1)
  {
    do
    {
      uint64_t appended = CMBlockBufferAppendBufferReference(blockBufferOut, DataBuffer, 0, SampleSize, 0);
      if (appended) {
        goto LABEL_29;
      }
      LODWORD(v22) = v22 - 1;
    }
    while (v22);
  }
  uint64_t appended = CMBlockBufferAppendBufferReference(blockBufferOut, DataBuffer, 0, 0, 0);
  if (appended) {
    goto LABEL_29;
  }
  if (v21 == 1)
  {
    size_t *sampleSizeArray = SampleSize;
  }
  else
  {
    if ((int)v92 >= 1)
    {
      uint64_t v29 = v92;
      uint64_t v30 = sampleSizeArray;
      do
      {
        *v30++ = SampleSize;
        --v29;
      }
      while (v29);
    }
    uint64_t appended = CMSampleBufferGetSampleSizeArray(sbuf, sizeArrayEntriesNeededOut, &sampleSizeArray[(int)v92], 0);
    if (appended) {
      goto LABEL_29;
    }
  }
  uint64_t appended = CMSampleBufferGetSampleTimingInfoArray(sbuf, 0, 0, &timingArrayEntriesNeededOut);
  if (appended)
  {
LABEL_29:
    uint64_t v32 = appended;
LABEL_30:
    sampleTimingArray = 0;
    goto LABEL_43;
  }
  uint64_t v87 = a8;
  if (timingArrayEntriesNeededOut == 1) {
    unint64_t v31 = 1;
  }
  else {
    unint64_t v31 = timingArrayEntriesNeededOut + (int)v92;
  }
  if (v31)
  {
    if (v31 > 0x38E38E38E38E38ELL) {
      goto LABEL_28;
    }
    uint64_t v34 = (int)v92;
    size_t v35 = 72 * v31;
    malloc_type_id_t v36 = 1556728742;
  }
  else
  {
    uint64_t v34 = (int)v92;
    size_t v35 = 0;
    malloc_type_id_t v36 = 1270757447;
  }
  sampleTimingArray = (CMSampleTimingInfo *)malloc_type_malloc(v35, v36);
  if (!sampleTimingArray) {
    goto LABEL_28;
  }
  uint64_t SampleTimingInfo = CMSampleBufferGetSampleTimingInfo(sbuf, 0, &timingInfoOut);
  if (SampleTimingInfo) {
    goto LABEL_42;
  }
  CFAllocatorRef allocator = v27;
  uint64_t v38 = a5;
  if (v31 == 1)
  {
    *(_OWORD *)&sampleTimingArray->duration.int64_t value = *(_OWORD *)&timingInfoOut.duration.value;
    long long v39 = *(_OWORD *)&timingInfoOut.duration.epoch;
    long long v40 = *(_OWORD *)&timingInfoOut.presentationTimeStamp.timescale;
    long long v41 = *(_OWORD *)&timingInfoOut.decodeTimeStamp.value;
    sampleTimingArray->decodeTimeStamp.CMTimeEpoch epoch = timingInfoOut.decodeTimeStamp.epoch;
    *(_OWORD *)&sampleTimingArray->presentationTimeStamp.CMTimeScale timescale = v40;
    *(_OWORD *)&sampleTimingArray->decodeTimeStamp.int64_t value = v41;
    *(_OWORD *)&sampleTimingArray->duration.CMTimeEpoch epoch = v39;
    uint64_t v42 = v34;
  }
  else
  {
    if ((int)v92 >= 1)
    {
      uint64_t v43 = v92;
      CMTime v44 = sampleTimingArray;
      do
      {
        *(_OWORD *)&v44->duration.int64_t value = *(_OWORD *)&timingInfoOut.duration.value;
        long long v45 = *(_OWORD *)&timingInfoOut.duration.epoch;
        long long v46 = *(_OWORD *)&timingInfoOut.presentationTimeStamp.timescale;
        long long v47 = *(_OWORD *)&timingInfoOut.decodeTimeStamp.value;
        v44->decodeTimeStamp.CMTimeEpoch epoch = timingInfoOut.decodeTimeStamp.epoch;
        *(_OWORD *)&v44->presentationTimeStamp.CMTimeScale timescale = v46;
        *(_OWORD *)&v44->decodeTimeStamp.int64_t value = v47;
        *(_OWORD *)&v44->duration.CMTimeEpoch epoch = v45;
        ++v44;
        --v43;
      }
      while (v43);
    }
    uint64_t v42 = v34;
    uint64_t SampleTimingInfo = CMSampleBufferGetSampleTimingInfoArray(sbuf, timingArrayEntriesNeededOut, &sampleTimingArray[(int)v34], 0);
    if (SampleTimingInfo) {
      goto LABEL_42;
    }
  }
  CMItemCount v48 = v42 + v38;
  CFRange v49 = blockBufferOut;
  Boolean IsReady = CMSampleBufferDataIsReady(sbuf);
  FormatDescription = CMSampleBufferGetFormatDescription(sbuf);
  uint64_t SampleTimingInfo = CMSampleBufferCreate(allocator, v49, IsReady, 0, 0, FormatDescription, v48, v31, sampleTimingArray, v21, sampleSizeArray, &v100);
  if (SampleTimingInfo)
  {
LABEL_42:
    uint64_t v32 = SampleTimingInfo;
LABEL_43:
    if (v100) {
      CFRelease(v100);
    }
    goto LABEL_70;
  }
  uint64_t v93 = v42;
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  CMBlockBufferRef blockBufferOut = 0;
  CFDictionaryRef v52 = CMCopyDictionaryOfAttachments(allocator, sbuf, 1u);
  if (v52)
  {
    CFDictionaryRef v53 = v52;
    CMSetAttachments(v100, v52, 1u);
    CFRelease(v53);
  }
  CMItemCount v84 = v48;
  CFDictionaryRef v54 = CMCopyDictionaryOfAttachments(allocator, sbuf, 0);
  if (v54)
  {
    CFDictionaryRef v55 = v54;
    CMSetAttachments(v100, v54, 0);
    CFRelease(v55);
  }
  double v85 = sampleTimingArray;
  CMSampleBufferRef v56 = v100;
  CMTime lhs = rhs;
  CFDictionaryRef v57 = CMTimeCopyAsDictionary(&lhs, allocator);
  if (v57)
  {
    CFDictionaryRef v58 = v57;
    CMSetAttachment(v56, (CFStringRef)*MEMORY[0x1E4F1F308], v57, 1u);
    CFRelease(v58);
  }
  CFArrayRef allocatora = CMSampleBufferGetSampleAttachmentsArray(sbuf, 0);
  if (allocatora)
  {
    CFArrayRef SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(v100, 1u);
    if (SampleAttachmentsArray)
    {
      CFArrayRef v60 = SampleAttachmentsArray;
      CFIndex Count = CFArrayGetCount(allocatora);
      if (Count >= 1)
      {
        uint64_t v61 = 0;
        CFIndex v62 = 0;
        unsigned __int8 v86 = sampleSizeArray;
        do
        {
          CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(allocatora, v62);
          CFIndex v64 = CFDictionaryGetCount(ValueAtIndex);
          int v65 = (const void **)malloc_type_malloc(8 * v64, 0x80040B8603338uLL);
          uint64_t v66 = (const void **)malloc_type_malloc(8 * v64, 0x80040B8603338uLL);
          CFDictionaryGetKeysAndValues(ValueAtIndex, v65, v66);
          if (!v62)
          {
            uint64_t v61 = 0;
            if ((int)v92 >= 1)
            {
              CFIndex v67 = 0;
              do
              {
                BOOL v68 = (__CFDictionary *)CFArrayGetValueAtIndex(v60, v67);
                if (v64 >= 1)
                {
                  int v69 = v68;
                  int v70 = v65;
                  CFIndex v71 = v66;
                  CFIndex v72 = v64;
                  do
                  {
                    CFTypeRef v74 = *v70++;
                    CMTimeValue v73 = v74;
                    uint64_t v75 = *v71++;
                    CFDictionarySetValue(v69, v73, v75);
                    --v72;
                  }
                  while (v72);
                }
                ++v67;
              }
              while (v67 != v93);
              uint64_t v61 = v93;
              sampleSizeArray = v86;
            }
          }
          uint64_t v76 = (__CFDictionary *)CFArrayGetValueAtIndex(v60, v61 + v62);
          if (v64 >= 1)
          {
            long long v77 = v76;
            long long v78 = v65;
            long long v79 = v66;
            do
            {
              uint64_t v81 = *v78++;
              CMTime v80 = v81;
              char v82 = *v79++;
              CFDictionarySetValue(v77, v80, v82);
              --v64;
            }
            while (v64);
          }
          free(v65);
          free(v66);
          ++v62;
        }
        while (v62 != Count);
      }
    }
  }
  uint64_t v32 = 0;
  *a7 = v100;
  CMSampleBufferRef v100 = 0;
  sampleTimingArray = v85;
  *uint64_t v87 = v84;
  *a9 = rhs;
LABEL_70:
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  if (sampleSizeArray) {
    free(sampleSizeArray);
  }
  if (sampleTimingArray) {
    free(sampleTimingArray);
  }
  return v32;
}

uint64_t editBuilderResetCurrentEditMediaTime(uint64_t a1)
{
  CFArrayRef v2 = (void *)(a1 + 16);
  uint64_t v3 = *(void **)(a1 + 16);
  if (editMediaTimeIsValid((uint64_t)v3)) {
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 24), v3);
  }
  else {
    FigCEA608DataInspectorRelease((CFAllocatorRef *)v3);
  }
  return editMediaTimeCreate(*(const __CFAllocator **)a1, v2);
}

uint64_t trackEndSession(uint64_t a1, long long *a2, int a3)
{
  if ((*(unsigned char *)(a1 + 480) & 1) != 0
    && (uint64_t v7 = *(void *)(a1 + 16), (v8 = (char *)malloc_type_calloc(1uLL, 0x118uLL, 0x102004013D73AF6uLL)) != 0))
  {
    long long v9 = v8;
    *(_OWORD *)CMTime v8 = *(_OWORD *)(a1 + 184);
    long long v10 = *(_OWORD *)(a1 + 200);
    long long v11 = *(_OWORD *)(a1 + 216);
    long long v12 = *(_OWORD *)(a1 + 232);
    *((void *)v8 + 8) = *(void *)(a1 + 248);
    *((_OWORD *)v8 + 2) = v11;
    *((_OWORD *)v8 + 3) = v12;
    *((_OWORD *)v8 + 1) = v10;
    long long v13 = *(_OWORD *)(v7 + 24);
    *((void *)v8 + 11) = *(void *)(v7 + 40);
    *(_OWORD *)(v8 + 72) = v13;
    CFIndex v14 = (long long *)MEMORY[0x1E4F1F9F8];
    uint64_t v15 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
    *((void *)v8 + 14) = v15;
    long long v26 = *v14;
    *((_OWORD *)v8 + 6) = *v14;
    *((_DWORD *)v8 + 30) = *(_DWORD *)(a1 + 464);
    uint64_t v16 = *(void *)(a1 + 484);
    *(_OWORD *)(v8 + 124) = *(_OWORD *)(a1 + 468);
    *(void *)(v8 + 140) = v16;
    *((_DWORD *)v8 + 37) = a3;
    uint64_t v17 = *((void *)a2 + 2);
    *(_OWORD *)(v8 + 152) = *a2;
    *((void *)v8 + 21) = v17;
    unsigned int v18 = (CMTime *)(v8 + 176);
    CMTime v27 = *(CMTime *)(a1 + 136);
    int32_t v19 = *(_DWORD *)(a1 + 104);
    if (v19)
    {
      CMTime time = *(CMTime *)(a1 + 136);
      CMTimeConvertScale(&v27, &time, v19, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
    }
    *unsigned int v18 = v27;
    getSessionMediaDisplayStartTime((CMTime *)a1, &time);
    *(CMTime *)(v9 + 200) = time;
    CMTime v27 = *(CMTime *)(a1 + 160);
    int32_t v20 = *(_DWORD *)(a1 + 104);
    if (v20)
    {
      CMTime time = *(CMTime *)(a1 + 160);
      CMTimeConvertScale(&v27, &time, v20, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
    }
    *(CMTime *)(v9 + 224) = v27;
    long long v21 = *(_OWORD *)(a1 + 432);
    *((void *)v9 + 33) = *(void *)(a1 + 448);
    *(_OWORD *)(v9 + 248) = v21;
    *((void *)v9 + 34) = *(void *)(a1 + 496);
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 424), v9);
    if (a3 == 2)
    {
      CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 424));
      if (Count >= 1)
      {
        unint64_t v23 = Count + 1;
        do
        {
          CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 424), v23 - 2);
          if (ValueAtIndex[108]) {
            break;
          }
          long long v25 = *a2;
          *((void *)ValueAtIndex + 14) = *((void *)a2 + 2);
          *((_OWORD *)ValueAtIndex + 6) = v25;
          --v23;
        }
        while (v23 > 1);
      }
    }
    *(void *)(a1 + 496) = 0;
    if (*(unsigned char *)(v7 + 329) && *(unsigned char *)(v7 + 352)) {
      *(unsigned char *)(a1 + 353) = 1;
    }
    *(_OWORD *)(a1 + 468) = v26;
    *(void *)(a1 + 484) = v15;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t trackBeginSession(uint64_t a1, long long *a2, int a3)
{
  if (*(unsigned char *)(a1 + 480))
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 16);
    uint64_t v7 = a1 + 468;
    getMediaDecodeDuration(a1, &v18);
    CMTime v8 = (long long *)MEMORY[0x1E4F1FA70];
    *(_OWORD *)(a1 + 432) = *(_OWORD *)&v18.value;
    long long v9 = *v8;
    *(_OWORD *)(a1 + 200) = v8[1];
    long long v10 = v8[3];
    *(_OWORD *)(a1 + 216) = v8[2];
    *(void *)(a1 + 448) = v18.epoch;
    *(_OWORD *)(a1 + 232) = v10;
    *(void *)(a1 + 248) = *((void *)v8 + 8);
    *(_OWORD *)(a1 + 184) = v9;
    uint64_t v11 = MEMORY[0x1E4F1FA48];
    long long v12 = *MEMORY[0x1E4F1FA48];
    *(_OWORD *)(a1 + 256) = *MEMORY[0x1E4F1FA48];
    uint64_t v13 = *(void *)(v11 + 16);
    *(void *)(a1 + 272) = v13;
    uint64_t v14 = MEMORY[0x1E4F1FA10];
    *(_OWORD *)(a1 + 280) = *MEMORY[0x1E4F1FA10];
    *(void *)(a1 + 296) = *(void *)(v14 + 16);
    *(void *)(a1 + 152) = v13;
    *(_OWORD *)(a1 + 136) = v12;
    long long v15 = *MEMORY[0x1E4F1FA08];
    *(void *)(a1 + 320) = *(void *)(MEMORY[0x1E4F1FA08] + 16);
    *(_OWORD *)(a1 + 304) = v15;
    *(void *)(a1 + 176) = v13;
    *(_OWORD *)(a1 + 160) = v12;
    *(_DWORD *)(a1 + 464) = a3;
    long long v16 = *a2;
    *(void *)(v7 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v7 = v16;
    if (!*(unsigned char *)(a1 + 492)
      || *(void *)(a1 + 496)
      || (uint64_t result = editBuilderCreate((const __CFAllocator *)*MEMORY[0x1E4F1CF80], (void *)(a1 + 496)), !result))
    {
      if (*(unsigned char *)(v6 + 329))
      {
        if (*(unsigned char *)(v6 + 352)) {
          *(unsigned char *)(a1 + 353) = 1;
        }
      }
      MediaSampleTimingGeneratorReset(*(void *)(a1 + 752));
      return 0;
    }
  }
  return result;
}

uint64_t getSampleSizeArrayFromSbuf(opaqueCMSampleBuffer *a1, CMItemCount a2, size_t *a3, CMItemCount *a4)
{
  CMItemCount sizeArrayEntriesNeededOut = 0;
  CVImageBufferRef ImageBuffer = CMSampleBufferGetImageBuffer(a1);
  if (ImageBuffer)
  {
    if (a2 > 0)
    {
      long long v9 = ImageBuffer;
      size_t BytesPerRow = CVPixelBufferGetBytesPerRow(ImageBuffer);
      size_t Height = CVPixelBufferGetHeight(v9);
      uint64_t result = 0;
      *a3 = Height * BytesPerRow;
      if (!a4) {
        return result;
      }
      CMItemCount v13 = 1;
      goto LABEL_16;
    }
    CMItemCount v13 = 1;
LABEL_11:
    uint64_t result = 4294954559;
    if (!a4) {
      return result;
    }
LABEL_16:
    *a4 = v13;
    return result;
  }
  uint64_t result = CMSampleBufferGetSampleSizeArray(a1, 0, 0, &sizeArrayEntriesNeededOut);
  if (result)
  {
    if (result != -12735) {
      return result;
    }
    uint64_t result = 0;
    if (!a4) {
      return result;
    }
LABEL_15:
    CMItemCount v13 = sizeArrayEntriesNeededOut;
    goto LABEL_16;
  }
  CMItemCount v13 = sizeArrayEntriesNeededOut;
  if (sizeArrayEntriesNeededOut > a2) {
    goto LABEL_11;
  }
  uint64_t result = CMSampleBufferGetSampleSizeArray(a1, a2, a3, 0);
  if (a4 && !result) {
    goto LABEL_15;
  }
  return result;
}

uint64_t setDefaultTrackDimensionsIfNecessary(uint64_t a1)
{
  CFArrayRef v2 = MovieTrackCopyFormatDescriptionArray(*(void *)(a1 + 736));
  CFDictionaryRef ValueAtIndex = (const opaqueCMFormatDescription *)CFArrayGetValueAtIndex(v2, 0);
  if (CMFormatDescriptionGetMediaType(ValueAtIndex) != 1986618469)
  {
LABEL_17:
    uint64_t v9 = 0;
    goto LABEL_18;
  }
  uint64_t v4 = *(void *)(a1 + 736);
  int IsISOFileType = FigFileTypeIsISOFileType();
  if (IsISOFileType)
  {
    if (*(unsigned char *)(a1 + 32))
    {
      float VideoDefaultTrackDimensionsFromFormatDescription = FigMovieGetVideoDefaultTrackDimensionsFromFormatDescription(ValueAtIndex, IsISOFileType);
      *(float *)&double v7 = v7;
      uint64_t v8 = MovieTrackSetTrackDimensions(v4, VideoDefaultTrackDimensionsFromFormatDescription, *(float *)&v7);
LABEL_5:
      uint64_t v9 = v8;
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  if (!*(unsigned char *)(a1 + 32)
    || (float v10 = FigMovieGetVideoDefaultTrackDimensionsFromFormatDescription(ValueAtIndex, 0),
        *(float *)&double v11 = v11,
        uint64_t v9 = MovieTrackSetTrackDimensions(v4, v10, *(float *)&v11),
        !v9))
  {
    if (*(unsigned char *)(a1 + 33))
    {
      float VideoDefaultCleanApertureDimensionsFromFormatDescription = FigMovieGetVideoDefaultCleanApertureDimensionsFromFormatDescription(ValueAtIndex);
      *(float *)&double v13 = v13;
      uint64_t v8 = MovieTrackSetCleanApertureDimensions(v4, VideoDefaultCleanApertureDimensionsFromFormatDescription, *(float *)&v13);
      if (v8) {
        goto LABEL_5;
      }
      *(unsigned char *)(a1 + 34) = 1;
    }
    if (*(unsigned char *)(a1 + 35))
    {
      float VideoDefaultProductionApertureDimensionsFromFormatDescription = FigMovieGetVideoDefaultProductionApertureDimensionsFromFormatDescription(ValueAtIndex);
      *(float *)&double v15 = v15;
      uint64_t v8 = MovieTrackSetProductionApertureDimensions(v4, VideoDefaultProductionApertureDimensionsFromFormatDescription, *(float *)&v15);
      if (v8) {
        goto LABEL_5;
      }
      *(unsigned char *)(a1 + 36) = 1;
    }
    if (!*(unsigned char *)(a1 + 37)) {
      goto LABEL_17;
    }
    float VideoDefaultEncodedPixelsDimensionsFromFormatDescription = FigMovieGetVideoDefaultEncodedPixelsDimensionsFromFormatDescription(ValueAtIndex);
    *(float *)&double v17 = v17;
    uint64_t v9 = MovieTrackSetEncodedPixelsDimensions(v4, VideoDefaultEncodedPixelsDimensionsFromFormatDescription, *(float *)&v17);
    if (!v9) {
      *(unsigned char *)(a1 + 38) = 1;
    }
  }
LABEL_18:
  if (v2) {
    CFRelease(v2);
  }
  return v9;
}

uint64_t getTrackInfoForTrackID(uint64_t a1, int a2, void *a3)
{
  CFArrayRef v4 = *(const __CFArray **)(a1 + 488);
  if (v4 && (CFIndex Count = CFArrayGetCount(v4), Count >= 1))
  {
    CFIndex v8 = Count;
    CFIndex v9 = 0;
    while (1)
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 488), v9);
      if (ValueAtIndex[183] == a2) {
        break;
      }
      if (v8 == ++v9) {
        goto LABEL_6;
      }
    }
    *a3 = ValueAtIndex;
    return 0;
  }
  else
  {
LABEL_6:
    return FigSignalErrorAt();
  }
}

uint64_t copyFigTrackLoadSettingsAsDictionary(CFAllocatorRef allocator, uint64_t a2, CFDictionaryRef *a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)CMTime keys = 0u;
  long long v21 = 0u;
  *(_OWORD *)CMTime values = 0u;
  long long v19 = 0u;
  if (*(unsigned char *)(a2 + 12))
  {
    CMTime v17 = *(CMTime *)a2;
    CFDictionaryRef v6 = CMTimeCopyAsDictionary(&v17, allocator);
    if (!v6) {
      return FigSignalErrorAt();
    }
  }
  else
  {
    CFDictionaryRef v6 = 0;
  }
  if (*(unsigned char *)(a2 + 36))
  {
    CMTime v17 = *(CMTime *)(a2 + 24);
    CFDictionaryRef v7 = CMTimeCopyAsDictionary(&v17, allocator);
    if (!v7)
    {
      uint64_t v15 = FigSignalErrorAt();
      CFNumberRef v9 = 0;
      goto LABEL_29;
    }
  }
  else
  {
    CFDictionaryRef v7 = 0;
  }
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFNumberRef v9 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, (const void *)(a2 + 48));
  if (!v9)
  {
    uint64_t v15 = FigSignalErrorAt();
LABEL_29:
    CFNumberRef v11 = 0;
    goto LABEL_14;
  }
  CFNumberRef v10 = CFNumberCreate(v8, kCFNumberSInt32Type, (const void *)(a2 + 52));
  CFNumberRef v11 = v10;
  if (!v10)
  {
LABEL_25:
    uint64_t v15 = FigSignalErrorAt();
    goto LABEL_14;
  }
  if (v6)
  {
    keys[0] = @"PreloadStart";
    values[0] = v6;
    unsigned int v12 = 1;
    if (!v7) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  unsigned int v12 = 0;
  if (v7)
  {
LABEL_11:
    *(void *)((unint64_t)keys | (8 * v12)) = @"PreloadDuration";
    *(void *)((unint64_t)values & 0xFFFFFFFFFFFFFFF7 | (8 * (v12++ & 1))) = v7;
  }
LABEL_12:
  keys[v12] = @"PreloadFlags";
  values[v12] = v9;
  unsigned int v13 = v12 + 1;
  keys[v13] = @"DefaultHints";
  values[v13] = v10;
  CFDictionaryRef v14 = CFDictionaryCreate(allocator, (const void **)keys, (const void **)values, v12 + 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!v14) {
    goto LABEL_25;
  }
  uint64_t v15 = 0;
  *a3 = v14;
LABEL_14:
  if (v6) {
    CFRelease(v6);
  }
  if (v7) {
    CFRelease(v7);
  }
  if (v9) {
    CFRelease(v9);
  }
  if (v11) {
    CFRelease(v11);
  }
  return v15;
}

uint64_t copyDimensionsAsDictionary(const __CFAllocator *a1, CFDictionaryRef *a2, double a3, double a4)
{
  keys[2] = *(void **)MEMORY[0x1E4F143B8];
  double valuePtr = a3;
  double v16 = a4;
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFNumberRef v7 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberCGFloatType, &valuePtr);
  if (!v7) {
    return FigSignalErrorAt();
  }
  CFNumberRef v8 = v7;
  CFNumberRef v9 = CFNumberCreate(v6, kCFNumberCGFloatType, &v16);
  if (v9)
  {
    CFNumberRef v10 = v9;
    keys[0] = @"Width";
    keys[1] = @"Height";
    values[0] = v8;
    values[1] = v9;
    CFDictionaryRef v11 = CFDictionaryCreate(a1, (const void **)keys, (const void **)values, 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (v11)
    {
      uint64_t v12 = 0;
      *a2 = v11;
    }
    else
    {
      uint64_t v12 = FigSignalErrorAt();
    }
    CFRelease(v8);
    CFNumberRef v13 = v10;
  }
  else
  {
    uint64_t v12 = FigSignalErrorAt();
    CFNumberRef v13 = v8;
  }
  CFRelease(v13);
  return v12;
}

uint64_t createTrackMetadataWritersDictionary(const __CFAllocator *a1, void *a2, CFDictionaryRef *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = a2[2];
  double v16 = 0;
  if (*(unsigned char *)(v6 + 684))
  {
    CFNumberRef v7 = @"org.mp4ra";
    CFIndex v8 = 1;
  }
  else
  {
    CFNumberRef v7 = @"com.apple.quicktime.mdta";
    double v16 = @"com.apple.quicktime.udta";
    CFIndex v8 = 2;
  }
  uint64_t v9 = 0;
  values[0] = 0;
  values[1] = 0;
  CMTime keys = v7;
  while (1)
  {
    uint64_t v13 = 0;
    uint64_t result = getTrackMetadataSerializer((uint64_t)a1, a2, *(&keys + v9), &v13);
    if (result) {
      break;
    }
    values[v9++] = (void *)FigMetadataSerializerGetFigMetadataWriter(v13);
    if (v8 == v9)
    {
      CFDictionaryRef v11 = CFDictionaryCreate(a1, (const void **)&keys, (const void **)values, v8, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (!v11) {
        return FigSignalErrorAt();
      }
      CFDictionaryRef v12 = v11;
      uint64_t result = 0;
      *a3 = v12;
      return result;
    }
  }
  return result;
}

uint64_t copyNegativeCompositionOffsetsInISOFilePolicy(uint64_t a1, uint64_t a2, void *a3)
{
  unsigned int v7 = 0;
  uint64_t NegativeCompositionOffsetsInISOFilePolicy = MovieHeaderMakerTrackGetNegativeCompositionOffsetsInISOFilePolicy(*(void *)(a1 + 736), *(void *)(a2 + 744), &v7);
  if (!NegativeCompositionOffsetsInISOFilePolicy)
  {
    if (v7 > 2)
    {
      CFTypeRef v5 = 0;
    }
    else
    {
      CFTypeRef v5 = *off_1E57988A0[v7];
      if (v5) {
        CFTypeRef v5 = CFRetain(v5);
      }
    }
    *a3 = v5;
  }
  return NegativeCompositionOffsetsInISOFilePolicy;
}

uint64_t getFigTrackLoadSettingsFromDictionary(const void *a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = MEMORY[0x1E4F1F9F8];
  CMTimeValue v22 = *MEMORY[0x1E4F1F9F8];
  CMTimeScale timescale = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 8);
  uint64_t valuePtr = 0;
  CMTimeValue v20 = v22;
  CMTimeScale v21 = timescale;
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (TypeID != CFGetTypeID(a1)) {
    return 4294954516;
  }
  CMTimeFlags v6 = *(_DWORD *)(v4 + 12);
  CMTimeEpoch v7 = *(void *)(v4 + 16);
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)a1, @"PreloadStart");
  CFDictionaryRef v9 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)a1, @"PreloadDuration");
  CFNumberRef v10 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, @"PreloadFlags");
  CFNumberRef v11 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, @"DefaultHints");
  CMTimeFlags flags = v6;
  CMTimeEpoch epoch = v7;
  if (Value)
  {
    CMTimeMakeFromDictionary(&v18, Value);
    CMTimeValue v22 = v18.value;
    CMTimeFlags flags = v18.flags;
    CMTimeScale timescale = v18.timescale;
    if ((v18.flags & 0x1D) != 1) {
      return 4294954516;
    }
    CMTimeEpoch epoch = v18.epoch;
  }
  if (v9)
  {
    CMTimeMakeFromDictionary(&v18, v9);
    CMTimeValue v20 = v18.value;
    CMTimeFlags v6 = v18.flags;
    CMTimeScale v21 = v18.timescale;
    if ((v18.flags & 0x1D) == 1)
    {
      CMTimeEpoch v7 = v18.epoch;
      goto LABEL_8;
    }
    return 4294954516;
  }
LABEL_8:
  if (v10) {
    CFNumberGetValue(v10, kCFNumberSInt32Type, (char *)&valuePtr + 4);
  }
  if (v11)
  {
    CFNumberGetValue(v11, kCFNumberSInt32Type, &valuePtr);
    int v14 = valuePtr;
  }
  else
  {
    int v14 = 0;
  }
  uint64_t result = 0;
  int v16 = HIDWORD(valuePtr);
  *(void *)a2 = v22;
  *(_DWORD *)(a2 + 8) = timescale;
  *(_DWORD *)(a2 + 12) = flags;
  CMTimeValue v17 = v20;
  *(void *)(a2 + 16) = epoch;
  *(void *)(a2 + 24) = v17;
  *(_DWORD *)(a2 + 32) = v21;
  *(_DWORD *)(a2 + 36) = v6;
  *(void *)(a2 + 40) = v7;
  *(_DWORD *)(a2 + 48) = v16;
  *(_DWORD *)(a2 + 52) = v14;
  return result;
}

uint64_t getDimensionsFromDictionary(const void *a1, _OWORD *a2)
{
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (TypeID != CFGetTypeID(a1)) {
    return 4294954516;
  }
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, @"Width");
  CFNumberRef v6 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, @"Height");
  if (!Value || v6 == 0) {
    return 4294954516;
  }
  CFNumberRef v8 = v6;
  long long v10 = 0uLL;
  if (!CFNumberGetValue(Value, kCFNumberCGFloatType, &v10)
    || !CFNumberGetValue(v8, kCFNumberCGFloatType, (char *)&v10 + 8))
  {
    return 4294954516;
  }
  uint64_t result = 0;
  *a2 = v10;
  return result;
}

uint64_t FigFormatWriterGetTypeID()
{
  MEMORY[0x19970EE10](&FigFormatWriterGetClassID_sRegisterFigFormatWriterTypeOnce, RegisterFigFormatWriterType);

  return CMBaseClassGetCFTypeID();
}

CFStringRef FigFormatWriterCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigFormatWriter %p]", a1);
}

uint64_t sbp_bq_UpcomingOutputPTSRangeChanged(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)result)
  {
    uint64_t v7 = result;
    MEMORY[0x19970E910](*(void *)(result + 32));
    CFNumberRef v8 = (const void *)*MEMORY[0x1E4F1CFD0];
    CFNumberRef Value = CFDictionaryGetValue(a5, (const void *)*MEMORY[0x1E4F1F338]);
    *(unsigned char *)(v7 + 40) = v8 == Value;
    if (v8 == Value)
    {
      CFDictionaryRef v10 = (const __CFDictionary *)CFDictionaryGetValue(a5, (const void *)*MEMORY[0x1E4F1F320]);
      CFDictionaryRef v11 = (const __CFDictionary *)CFDictionaryGetValue(a5, (const void *)*MEMORY[0x1E4F1F318]);
      CMTimeMakeFromDictionary(&v12, v10);
      *(CMTime *)(v7 + 44) = v12;
      CMTimeMakeFromDictionary(&v12, v11);
      *(CMTime *)(v7 + 68) = v12;
    }
    MEMORY[0x19970E930](*(void *)(v7 + 32));
    CMNotificationCenterGetDefaultLocalCenter();
    return CMNotificationCenterPostNotification();
  }
  return result;
}

unsigned char *sbp_bq_CollectorCoherence()
{
  uint64_t result = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (!*result)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    return (unsigned char *)CMNotificationCenterPostNotification();
  }
  return result;
}

__CFString *sbp_bq_copyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<FigSampleBufferProviderForBufferQueue %p>", a1);
  return Mutable;
}

CMItemCount sbp_bq_scanForSampleBufferThatWillBeDisplayed(opaqueCMSampleBuffer *a1, unsigned char *a2)
{
  CMItemCount result = CMSampleBufferGetNumSamples(a1);
  if (result)
  {
    CFArrayRef SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(a1, 0);
    if (SampleAttachmentsArray
      && (CFArrayRef v6 = SampleAttachmentsArray, CFArrayGetCount(SampleAttachmentsArray) >= 1)
      && (CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v6, 0)) != 0
      && (const void *)*MEMORY[0x1E4F1CFD0] == CFDictionaryGetValue(ValueAtIndex, (const void *)*MEMORY[0x1E4F1F1B8]))
    {
      return 0;
    }
    else
    {
      *a2 = 1;
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

uint64_t FigSampleBufferProviderGetTypeID()
{
  MEMORY[0x19970EE10](&FigSampleBufferProviderGetClassID_sRegisterFigSampleBufferProviderTypeOnce, RegisterFigSampleBufferProviderType);

  return CMBaseClassGetCFTypeID();
}

CFStringRef FigSampleBufferProviderCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigSampleBufferProvider %p]", a1);
}

uint64_t FigClusterSynchronizationManager_ClientIsPlaying(char a1)
{
  uint64_t v5 = 0;
  CFArrayRef v6 = &v5;
  uint64_t v7 = 0x2000000000;
  int v8 = 0;
  if (gSerialQueue)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 0x40000000;
    void v3[2] = __FigClusterSynchronizationManager_ClientIsPlaying_block_invoke;
    v3[3] = &unk_1E5798CF8;
    char v4 = a1;
    v3[4] = &v5;
    dispatch_sync((dispatch_queue_t)gSerialQueue, v3);
    uint64_t v1 = *((unsigned int *)v6 + 6);
  }
  else
  {
    uint64_t v1 = 0;
  }
  _Block_object_dispose(&v5, 8);
  return v1;
}

uint64_t figClusterSynchManager_shouldDisableOdeonStereoClockLink()
{
  uint64_t result = _os_feature_enabled_impl();
  if (result) {
    return FigGetCFPreferenceNumberWithDefault() == 1;
  }
  return result;
}

void figClusterSynchManager_ensureStopped()
{
  figClusterSynchManager_stopAndClearBonjourAdvertiser();
  figClusterSynchManager_stopAndClearBonjourBrowser();
  if (gAddedIPs) {
    CFSetApplyFunction((CFSetRef)gAddedIPs, (CFSetApplierFunction)figClusterSynchManager_RemovePort, 0);
  }
  if (gClusterClock)
  {
    CFRelease((CFTypeRef)gClusterClock);
    gClusterClocCFIndex k = 0;
  }
  if (gAddedIPs)
  {
    CFRelease((CFTypeRef)gAddedIPs);
    gAddedIPs = 0;
  }
  if (gAddedEnpointsToIPMap)
  {
    CFRelease((CFTypeRef)gAddedEnpointsToIPMap);
    gAddedEnpointsToIPMap = 0;
  }
  if (gMyClusterUUID)
  {
    CFRelease((CFTypeRef)gMyClusterUUID);
    gMyClusterUUID = 0;
  }
  gIsStarted = 0;
  if (dword_1E9351000)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
}

uint64_t figClusterSynchManager_ensureStarted()
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  __int16 v7 = 0;
  int v6 = 0;
  if ((gIsStarted & 1) == 0)
  {
    uint64_t started = figClusterSynchManager_startBonjourAdvertiser();
    if (!started)
    {
      CFAllocatorRef v1 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      uint64_t v2 = CM8021ASClockCreate();
      if (v2)
      {
        uint64_t v4 = v2;
        FigSignalErrorAt();
        goto LABEL_16;
      }
      uint64_t started = sAPConnectivityHelperCreate(&gconnectivityHelper);
      if (!started)
      {
        figClusterSynchManager_toggleRequisiteAWDLTrafficRegistration(started, (uint64_t)&v6);
        gAddedIPs = (uint64_t)CFSetCreateMutable(v1, 2, MEMORY[0x1E4F1D548]);
        if (!gAddedIPs
          || (gAddedEnpointsToIPMap = (uint64_t)CFDictionaryCreateMutable(v1, 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540])) == 0)
        {
          uint64_t v4 = FigSignalErrorAt();
          if (!v4) {
            return v4;
          }
          goto LABEL_16;
        }
        uint64_t started = figClusterSynchManager_startBonjourBrowser();
        if (!started)
        {
          gIsStarted = 1;
          if (dword_1E9351000)
          {
            os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          return 0;
        }
      }
    }
    uint64_t v4 = started;
LABEL_16:
    figClusterSynchManager_ensureStopped();
    return v4;
  }
  return 0;
}

uint64_t figClusterSynchManager_AddPort(const __CFData *a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  __int16 v5 = 0;
  int v4 = 0;
  BytePtr = CFDataGetBytePtr(a1);
  if (dword_1E9351000)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (CM8021ASClockAddIPv6Port()
    || figClusterSynchManager_getPeerMACAddress_in6((uint64_t)BytePtr, (uint64_t)&v4))
  {
    return FigSignalErrorAt();
  }
  else
  {
    return figClusterSynchManager_toggleRequisiteAWDLTrafficRegistration(1, (uint64_t)&v4);
  }
}

uint64_t FigClusterSynchronizationManager_OneTimeInitialization()
{
  uint64_t v0 = (const void *)MGCopyAnswer();
  if (FigCFEqual())
  {
    if ((_os_feature_enabled_impl() & 1) == 0)
    {
      FigNote_AllowInternalDefaultLogs();
      fig_note_initialize_category_with_default_work_cf();
      fig_note_initialize_category_with_default_work_cf();
      if (FigClusterSynchronizationManager_OneTimeInitialization_sfigClusterSynchronizationManager_InitOnce != -1)
      {
        dispatch_once_f(&FigClusterSynchronizationManager_OneTimeInitialization_sfigClusterSynchronizationManager_InitOnce, 0, (dispatch_function_t)figClusterSynchManager_InitOnce);
        if (!v0) {
          return 0;
        }
        goto LABEL_5;
      }
    }
  }
  if (v0) {
LABEL_5:
  }
    CFRelease(v0);
  return 0;
}

void figClusterSynchManager_InitOnce()
{
  uint64_t v0 = dispatch_queue_create("ClusterSynchManager callback queue", 0);
  gSerialQueue = (uint64_t)v0;

  dispatch_async_f(v0, 0, (dispatch_function_t)figClusterSynchManager_DeferredInitOnce);
}

uint64_t figClusterSynchManager_getPeerMACAddress_in6(uint64_t a1, uint64_t a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  size_t size = 0;
  int v4 = 100;
  while (1)
  {
    *(_OWORD *)long long v19 = xmmword_194997160;
    uint64_t v20 = 0x4000000000ALL;
    uint64_t v5 = sysctl(v19, 6u, 0, &size, 0, 0);
    if (v5) {
      return v5;
    }
    if (!size) {
      return 4294954510;
    }
    uint64_t v6 = (unsigned __int16 *)malloc_type_malloc(size, 0x75901A8EuLL);
    if (!v6) {
      return 4294954510;
    }
    __int16 v7 = v6;
    uint64_t v8 = sysctl(v19, 6u, v6, &size, 0, 0);
    if (!v8) {
      break;
    }
    uint64_t v9 = v8;
    free(v7);
    if (!--v4) {
      return v9;
    }
  }
  if ((uint64_t)size < 1)
  {
LABEL_21:
    uint64_t v9 = 4294954513;
  }
  else
  {
    CFDictionaryRef v10 = v7;
    while (1)
    {
      uint64_t v11 = *((unsigned __int8 *)v10 + 92);
      uint64_t v12 = (v11 & 3) != 0 ? (v11 | 3) + 1 : *((unsigned __int8 *)v10 + 92);
      uint64_t v13 = *((unsigned char *)v10 + 92) ? v12 : 4;
      int v14 = (char *)v10 + v13 + 92;
      if (v14[1] == 18 && v14[6] == 6 && *((_WORD *)v14 + 1) && *(void *)(v10 + 54) == *(void *)(a1 + 8)) {
        break;
      }
      CFDictionaryRef v10 = (unsigned __int16 *)((char *)v10 + *v10);
      if (v10 >= (unsigned __int16 *)((char *)v7 + size)) {
        goto LABEL_21;
      }
    }
    uint64_t v9 = 0;
    int v16 = &v14[v14[5]];
    int v17 = *((_DWORD *)v16 + 2);
    *(_WORD *)(a2 + 4) = *((_WORD *)v16 + 6);
    *(_DWORD *)a2 = v17;
  }
  free(v7);
  return v9;
}

uint64_t figClusterSynchManager_toggleRequisiteAWDLTrafficRegistration(uint64_t a1, uint64_t a2)
{
  uint64_t updated = sAPConnectivityHelperUpdateTrafficRegistration(gconnectivityHelper, @"timeSync", a2, a1);
  if (dword_1E9351000)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return updated;
}

void figClusterSynchManager_stopAndClearBonjourAdvertiser()
{
  if (gAdvertiserStarted == 1 && gBonjourAdvertiser)
  {
    DNSServiceRefDeallocate((DNSServiceRef)gBonjourAdvertiser);
    gBonjourAdvertiser = 0;
    gAdvertiserStarted = 0;
    if (dword_1E9351000)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
}

void figClusterSynchManager_stopAndClearBonjourBrowser()
{
  if (gBrowserStarted == 1 && gBonjourBrowser)
  {
    DNSServiceRefDeallocate((DNSServiceRef)gBonjourBrowser);
    gBonjourBrowser = 0;
    gBrowserStarted = 0;
    if (dword_1E9351000)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
}

uint64_t figClusterSynchManager_RemovePort(const __CFData *a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  __int16 v6 = 0;
  int v5 = 0;
  BytePtr = CFDataGetBytePtr(a1);
  if (dword_1E9351000)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (CM8021ASClockRemoveIPv6Port()) {
    return FigSignalErrorAt();
  }
  uint64_t PeerMACAddress_in6 = figClusterSynchManager_getPeerMACAddress_in6((uint64_t)BytePtr, (uint64_t)&v5);
  if (PeerMACAddress_in6) {
    return FigSignalErrorAt();
  }
  uint64_t result = figClusterSynchManager_toggleRequisiteAWDLTrafficRegistration(PeerMACAddress_in6, (uint64_t)&v5);
  if (result) {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t figClusterSynchManager_startBonjourAdvertiser()
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  DNSServiceRef sdRef = 0;
  memset(name, 0, sizeof(name));
  if (gAdvertiserStarted) {
    return 0;
  }
  TXTRecordRef txtRecord = 0uLL;
  TXTRecordCreate(&txtRecord, 0x100u, buffer);
  __s[0] = 0;
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFStringRef v1 = CFUUIDCreateString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (CFUUIDRef)gMyDeviceUUID);
  if (v1)
  {
    CFStringRef v2 = v1;
    if (CFStringGetCString(v1, __s, 256, 0x8000100u))
    {
      uint8_t v3 = strlen(__s);
      uint64_t updated = TXTRecordSetValue(&txtRecord, "did", v3, __s);
      if (updated) {
        goto LABEL_25;
      }
      if (CFStringGetCString(v2, (char *)name, 256, 0x8000100u) && strlen((const char *)name) <= 0x3F)
      {
        uint64_t updated = figClusterSynchManager_updateMyClusterID();
        if (!updated)
        {
          __s[0] = 0;
          CFStringRef v5 = CFUUIDCreateString(v0, (CFUUIDRef)gMyClusterUUID);
          if (v5)
          {
            CFStringRef v6 = v5;
            if (CFStringGetCString(v5, __s, 256, 0x8000100u))
            {
              uint8_t v7 = strlen(__s);
              uint64_t v8 = TXTRecordSetValue(&txtRecord, "tsid", v7, __s);
              if (!v8)
              {
                uint32_t v9 = if_nametoindex("awdl0");
                uint16_t txtLen = TXTRecordGetLength(&txtRecord);
                BytesPtr = TXTRecordGetBytesPtr(&txtRecord);
                uint64_t v8 = DNSServiceRegister(&sdRef, 0x100000u, v9, (const char *)name, "_ieee1588._udp", 0, 0, 0x3F01u, txtLen, BytesPtr, (DNSServiceRegisterReply)figClusterSynchManager_registerServiceCallBack, 0);
                if (!v8)
                {
                  uint64_t v12 = DNSServiceSetDispatchQueue(sdRef, (dispatch_queue_t)gSerialQueue);
                  if (v12)
                  {
                    uint64_t v14 = v12;
                    FigSignalErrorAt();
                  }
                  else
                  {
                    gBonjourAdvertiser = (uint64_t)sdRef;
                    DNSServiceRef sdRef = 0;
                    gAdvertiserStarted = 1;
                    if (dword_1E9351000)
                    {
                      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                      fig_log_call_emit_and_clean_up_after_send_and_compose();
                    }
                    uint64_t v14 = 0;
                  }
                  goto LABEL_16;
                }
              }
            }
            else
            {
              uint64_t v8 = FigSignalErrorAt();
            }
            uint64_t v14 = v8;
LABEL_16:
            CFRelease(v2);
            CFStringRef v15 = v6;
LABEL_17:
            CFRelease(v15);
            goto LABEL_18;
          }
          goto LABEL_24;
        }
LABEL_25:
        uint64_t v14 = updated;
        CFStringRef v15 = v2;
        goto LABEL_17;
      }
    }
LABEL_24:
    uint64_t updated = FigSignalErrorAt();
    goto LABEL_25;
  }
  uint64_t v14 = FigSignalErrorAt();
LABEL_18:
  TXTRecordDeallocate(&txtRecord);
  if (sdRef) {
    DNSServiceRefDeallocate(sdRef);
  }
  return v14;
}

uint64_t figClusterSynchManager_startBonjourBrowser()
{
  sdRef[20] = *(DNSServiceRef *)MEMORY[0x1E4F143B8];
  sdRef[0] = 0;
  if (gBrowserStarted) {
    return 0;
  }
  uint32_t v0 = if_nametoindex("awdl0");
  uint64_t v1 = DNSServiceBrowse(sdRef, 0x100000u, v0, "_ieee1588._udp", 0, (DNSServiceBrowseReply)figClusterSynchManager_handleBrowserReply, 0);
  if (!v1)
  {
    uint64_t v1 = DNSServiceSetDispatchQueue(sdRef[0], (dispatch_queue_t)gSerialQueue);
    if (!v1)
    {
      gBonjourBrowser = (uint64_t)sdRef[0];
      sdRef[0] = 0;
      gBrowserStarted = 1;
      if (dword_1E9351000)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        uint64_t v3 = 0;
        goto LABEL_7;
      }
      return 0;
    }
  }
  uint64_t v3 = v1;
  FigSignalErrorAt();
LABEL_7:
  if (sdRef[0]) {
    DNSServiceRefDeallocate(sdRef[0]);
  }
  return v3;
}

uint64_t figClusterSynchManager_updateMyClusterID()
{
  if (figClusterSynchManager_shouldDisableOdeonStereoClockLink())
  {
    if (dword_1E9351000)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    goto LABEL_17;
  }
  CFStringRef v1 = (const __CFString *)CFPreferencesCopyAppValue(@"tightSyncGroupUUID", @"com.apple.airplay");
  if (v1
    || (CFStringRef v1 = (const __CFString *)CFPreferencesCopyAppValue(@"tightSyncUUID", @"com.apple.airplay")) != 0)
  {
    CFTypeID v2 = CFGetTypeID(v1);
    if (v2 != CFStringGetTypeID()) {
      figClusterSynchManager_ensureStopped();
    }
    CFTypeID v3 = CFGetTypeID(v1);
    if (v3 != CFStringGetTypeID())
    {
      uint64_t v8 = FigSignalErrorAt();
LABEL_20:
      CFStringRef v9 = v1;
LABEL_21:
      CFRelease(v9);
      return v8;
    }
    CFUUIDRef v4 = CFUUIDCreateFromString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v1);
    CFUUIDRef v5 = v4;
    if (v4 && (CFTypeID v6 = CFGetTypeID(v4), v6 == CFUUIDGetTypeID()))
    {
      if (!gMyClusterUUID)
      {
LABEL_15:
        if (dword_1E9351000)
        {
          uint8_t v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        gMyClusterUUID = (uint64_t)v5;
        uint64_t v8 = figClusterSynchManager_ensureStarted();
        if (!v8) {
          dispatch_async(MEMORY[0x1E4F14428], &__block_literal_global_31);
        }
        goto LABEL_20;
      }
      if (!CFEqual((CFTypeRef)gMyClusterUUID, v5))
      {
        if (gMyClusterUUID)
        {
          figClusterSynchManager_ensureStopped();
          sleep(2u);
        }
        goto LABEL_15;
      }
      CFRelease(v1);
      uint64_t v8 = 0;
    }
    else
    {
      uint64_t v8 = FigSignalErrorAt();
      CFRelease(v1);
      if (!v5) {
        return v8;
      }
    }
    CFStringRef v9 = (const __CFString *)v5;
    goto LABEL_21;
  }
LABEL_17:
  figClusterSynchManager_ensureStopped();
  return 4294954514;
}

NSObject *figClusterSynchManager_registerServiceCallBack(uint64_t a1, uint64_t a2, int a3)
{
  if (a3 == -65563)
  {
    FigSignalErrorAt();
    return figClusterSynchManager_restartBonjour();
  }
  return result;
}

uint64_t __figClusterSynchManager_updateMyClusterID_block_invoke()
{
  return FigClusterSynchronizationManager_ClientIsPlaying(1);
}

NSObject *figClusterSynchManager_restartBonjour()
{
  figClusterSynchManager_stopAndClearBonjourAdvertiser();
  figClusterSynchManager_stopAndClearBonjourBrowser();
  uint64_t result = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, (dispatch_queue_t)gSerialQueue);
  gBonjourRestartTimer = (uint64_t)result;
  if (result)
  {
    dispatch_source_set_event_handler_f(result, (dispatch_function_t)figClusterSynchManager_restartBonjourTimerFired);
    CFStringRef v1 = gBonjourRestartTimer;
    dispatch_time_t v2 = dispatch_time(0, 500000000);
    dispatch_source_set_timer(v1, v2, 0x1DCD6500uLL, 0xF4240uLL);
    dispatch_resume((dispatch_object_t)gBonjourRestartTimer);
    return FigSignalErrorAt();
  }
  return result;
}

void figClusterSynchManager_restartBonjourTimerFired()
{
  if (figClusterSynchManager_startBonjourAdvertiser()
    || figClusterSynchManager_startBonjourBrowser())
  {
    FigSignalErrorAt();
  }
  else
  {
    dispatch_source_cancel((dispatch_source_t)gBonjourRestartTimer);
    if (gBonjourRestartTimer)
    {
      dispatch_release((dispatch_object_t)gBonjourRestartTimer);
      gBonjourRestartTimer = 0;
    }
  }
}

void figClusterSynchManager_handleBrowserReply(int a1, char a2, int a3, int a4, char *cStr, const char *a6, const char *a7)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  DNSServiceRef sdRef = 0;
  if (a4 == -65563)
  {
    uint64_t v7 = FigSignalErrorAt();
    figClusterSynchManager_restartBonjour(v7);
    return;
  }
  if (a4 || gBrowserStarted != 1) {
    return;
  }
  CFStringRef v12 = CFStringCreateWithCString(0, cStr, 0x8000100u);
  if (v12)
  {
    CFStringRef v13 = v12;
    CFUUIDRef v14 = CFUUIDCreateFromString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v12);
    if (v14)
    {
      CFUUIDRef v15 = v14;
      if ((a2 & 2) == 0 && dword_1E9351000)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        goto LABEL_22;
      }
      if ((a2 & 2) == 0 || FigCFEqual() || DNSServiceConstructFullName(fullName, cStr, a6, a7))
      {
LABEL_22:
        CFRelease(v13);
        CFRelease(v15);
        if (sdRef) {
          DNSServiceRefDeallocate(sdRef);
        }
        return;
      }
      if (FigClusterSynchronizationManagerBonjourQueryGetTypeID_sOnce != -1) {
        dispatch_once_f(&FigClusterSynchronizationManagerBonjourQueryGetTypeID_sOnce, &FigClusterSynchronizationManagerBonjourQueryGetTypeID_sTypeID, (dispatch_function_t)_FigClusterSynchronizationManagerBonjourQueryRegisterClass);
      }
      uint64_t Instance = _CFRuntimeCreateInstance();
      if (!Instance && FigSignalErrorAt())
      {
        FigSignalErrorAt();
        goto LABEL_22;
      }
      *(unsigned char *)(Instance + 16) = 0;
      uint32_t v18 = if_nametoindex("awdl0");
      long long v19 = (void *)CFRetain((CFTypeRef)Instance);
      if (DNSServiceQueryRecord(&sdRef, 0x100000u, v18, fullName, 0x10u, 1u, (DNSServiceQueryRecordReply)figClusterSynchManager_txtInfoCallBack, v19))
      {
        CFRelease((CFTypeRef)Instance);
      }
      else if (!DNSServiceSetDispatchQueue(sdRef, (dispatch_queue_t)gSerialQueue))
      {
        *(void *)(Instance + 48) = sdRef;
        DNSServiceRef sdRef = 0;
LABEL_21:
        CFRelease((CFTypeRef)Instance);
        goto LABEL_22;
      }
      FigSignalErrorAt();
      goto LABEL_21;
    }
    FigSignalErrorAt();
    CFRelease(v13);
  }
  else
  {
    FigSignalErrorAt();
  }
}

void figClusterSynchManager_txtInfoCallBack(int a1, int a2, int a3, int a4, const char *a5, int a6, int a7, uint16_t txtLen, void *txtRecord, uint64_t a10, void *cf)
{
  sdRef[16] = *(DNSServiceRef *)MEMORY[0x1E4F143B8];
  uint8_t valueLen = 0;
  if (!a4)
  {
    if (!cf) {
      return;
    }
    if (cf[3] || cf[5]) {
      goto LABEL_33;
    }
    if (gBrowserStarted != 1 || gMyClusterUUID == 0) {
      goto LABEL_33;
    }
    ValuePtr = (const char *)TXTRecordGetValuePtr(txtLen, txtRecord, "did", &valueLen);
    if (ValuePtr)
    {
      CFUUIDRef v15 = (const UInt8 *)ValuePtr;
      uint8_t valueLen = strnlen(ValuePtr, valueLen);
      CFStringRef v16 = CFStringCreateWithBytes(0, v15, valueLen, 0x8000100u, 0);
      if (v16)
      {
        CFStringRef v17 = v16;
        CFAllocatorRef v18 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        CFUUIDRef v19 = CFUUIDCreateFromString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v16);
        if (!v19)
        {
          FigSignalErrorAt();
          uint64_t v24 = 0;
          CFUUIDRef v25 = 0;
          goto LABEL_25;
        }
        CFUUIDRef v20 = v19;
        if (FigCFEqual()) {
          goto LABEL_35;
        }
        int v21 = *((unsigned __int8 *)cf + 16);
        if (*((unsigned char *)cf + 16) && dword_1E9351000)
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          int v21 = *((unsigned __int8 *)cf + 16);
        }
        if (v21)
        {
LABEL_35:
          uint64_t v24 = 0;
        }
        else
        {
          unint64_t v23 = (const char *)TXTRecordGetValuePtr(txtLen, txtRecord, "tsid", &valueLen);
          uint64_t v24 = (const UInt8 *)v23;
          if (v23)
          {
            uint8_t valueLen = strnlen(v23, valueLen);
            uint64_t v24 = (const UInt8 *)CFStringCreateWithBytes(0, v24, valueLen, 0x8000100u, 0);
            if (v24)
            {
              CFUUIDRef v25 = CFUUIDCreateFromString(v18, (CFStringRef)v24);
              if (v25)
              {
                if (FigCFEqual())
                {
                  cf[3] = v20;
                  sdRef[0] = 0;
                  if (!*a5)
                  {
                    FigSignalErrorAt();
                    goto LABEL_25;
                  }
                  uint32_t v26 = if_nametoindex("awdl0");
                  CMTime v27 = (void *)CFRetain(cf);
                  if (DNSServiceQueryRecord(sdRef, 0x100000u, v26, a5, 0x21u, 1u, (DNSServiceQueryRecordReply)figClusterSynchManager_srvInfoCallBack, v27))
                  {
                    CFRelease(cf);
                  }
                  else if (!DNSServiceSetDispatchQueue(sdRef[0], (dispatch_queue_t)gSerialQueue))
                  {
                    cf[5] = sdRef[0];
LABEL_25:
                    CFUUIDRef v20 = (CFUUIDRef)v17;
LABEL_29:
                    CFRelease(v20);
                    if (v24) {
                      CFRelease(v24);
                    }
                    if (v25) {
                      CFRelease(v25);
                    }
                    goto LABEL_33;
                  }
                  FigSignalErrorAt();
                  if (sdRef[0]) {
                    DNSServiceRefDeallocate(sdRef[0]);
                  }
                  goto LABEL_25;
                }
                if (CFDictionaryGetValueIfPresent((CFDictionaryRef)gAddedEnpointsToIPMap, v20, 0)) {
                  figClusterSynchManager_removePeerEndpoint(v20);
                }
              }
              else
              {
                FigSignalErrorAt();
              }
LABEL_28:
              CFRelease(v17);
              goto LABEL_29;
            }
          }
          FigSignalErrorAt();
        }
        CFUUIDRef v25 = 0;
        goto LABEL_28;
      }
    }
    FigSignalErrorAt();
LABEL_33:
    CFRelease(cf);
    return;
  }
  FigSignalErrorAt();
  if (cf) {
    goto LABEL_33;
  }
}

uint64_t _FigClusterSynchronizationManagerBonjourQueryRegisterClass(uint64_t *a1)
{
  uint64_t result = _CFRuntimeRegisterClass();
  *a1 = result;
  return result;
}

void _FigClusterSynchronizationManagerBonjourQueryFinalize(void *a1)
{
  dispatch_time_t v2 = (const void *)a1[3];
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (_DNSServiceRef_t *)a1[4];
  if (v3) {
    DNSServiceRefDeallocate(v3);
  }
  CFUUIDRef v4 = (_DNSServiceRef_t *)a1[5];
  if (v4) {
    DNSServiceRefDeallocate(v4);
  }
  CFUUIDRef v5 = (_DNSServiceRef_t *)a1[6];
  if (v5)
  {
    DNSServiceRefDeallocate(v5);
  }
}

void figClusterSynchManager_removePeerEndpoint(void *key)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFDataRef Value = (const __CFData *)CFDictionaryGetValue((CFDictionaryRef)gAddedEnpointsToIPMap, key);
  if (Value)
  {
    CFDataRef v3 = Value;
    CFDataGetBytePtr(Value);
    if (dword_1E9351000)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CM8021ASClockRemoveIPv6Port();
    CFSetRemoveValue((CFMutableSetRef)gAddedIPs, v3);
    CFDictionaryRemoveValue((CFMutableDictionaryRef)gAddedEnpointsToIPMap, key);
  }
}

void figClusterSynchManager_srvInfoCallBack(uint64_t a1, char a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8, uint64_t a9, uint64_t a10, void *a11)
{
  CFUUIDRef v14 = a11;
  v32[134] = *MEMORY[0x1E4F143B8];
  DNSServiceRef sdRef = 0;
  bzero(&__s, 0x431uLL);
  if (a4) {
    goto LABEL_31;
  }
  if (a8 >= 7 && (a2 & 2) != 0 && a9 && a11 && !a11[4])
  {
    uint64_t v16 = a9 + 6;
    unsigned int v15 = *(unsigned __int8 *)(a9 + 6);
    if (!*(unsigned char *)(a9 + 6))
    {
      p_s = (char *)v32;
      char __s = 46;
      goto LABEL_24;
    }
    uint64_t v17 = 0;
    p_s = &__s;
    unint64_t v19 = 1004;
    uint64_t v20 = a9 + 6;
    while (1)
    {
      if (v17 + 1 + (unint64_t)v15 > 0xFE || v15 > 0x3F || v19 < v15)
      {
LABEL_25:
        uint32_t v28 = if_nametoindex("awdl0");
        CFUUIDRef v14 = a11;
        uint64_t v29 = (void *)CFRetain(a11);
        if (DNSServiceGetAddrInfo(&sdRef, 0x100000u, v28, 2u, &__s, (DNSServiceGetAddrInfoReply)figClusterSynchManager_addressInfoCallBack, v29))
        {
          CFRelease(a11);
        }
        else if (!DNSServiceSetDispatchQueue(sdRef, (dispatch_queue_t)gSerialQueue))
        {
          a11[4] = sdRef;
          DNSServiceRef sdRef = 0;
          goto LABEL_28;
        }
LABEL_31:
        FigSignalErrorAt();
        break;
      }
      unint64_t v21 = v15 + v20 + 1;
      uint64_t v22 = (unsigned __int8 *)(v20 + 1);
      unint64_t v23 = p_s;
      do
      {
        unsigned int v25 = *v22++;
        unsigned int v24 = v25;
        if (v25 == 92 || v24 == 46)
        {
          *v23++ = 92;
LABEL_16:
          uint32_t v26 = v23;
          goto LABEL_17;
        }
        if (v24 > 0x20) {
          goto LABEL_16;
        }
        *(_WORD *)unint64_t v23 = 12380;
        unsigned int v27 = (205 * v24) >> 11;
        uint32_t v26 = v23 + 3;
        int v23[2] = v27 | 0x30;
        LOBYTE(v24) = (v24 - 10 * v27) | 0x30;
LABEL_17:
        *uint32_t v26 = v24;
        unint64_t v23 = v26 + 1;
      }
      while ((unint64_t)v22 < v21);
      v26[1] = 0;
      v19 -= strlen(p_s);
      v17 += 1 + *(unsigned __int8 *)(v16 + v17);
      p_s = v26 + 2;
      v26[1] = 46;
      uint64_t v20 = v16 + v17;
      unsigned int v15 = *(unsigned __int8 *)(v16 + v17);
      if (!*(unsigned char *)(v16 + v17))
      {
LABEL_24:
        char *p_s = 0;
        goto LABEL_25;
      }
    }
  }
  if (sdRef) {
    DNSServiceRefDeallocate(sdRef);
  }
  if (v14) {
LABEL_28:
  }
    CFRelease(v14);
}

void figClusterSynchManager_addressInfoCallBack(int a1, int a2, int a3, int a4, int a5, uint64_t a6, int a7, void *cf)
{
  if (a4 == -65791) {
    goto LABEL_30;
  }
  if (!a4)
  {
    if (!a6 || !cf) {
      goto LABEL_30;
    }
    if (*(unsigned char *)(a6 + 1) == 30)
    {
      CFDictionaryRef v10 = (void *)cf[3];
      memset(v18, 0, 24);
      *(void *)UInt8 bytes = 0;
      int v11 = getifaddrs((ifaddrs **)bytes);
      uint64_t v12 = *(void *)bytes;
      if (v11 || !*(void *)bytes)
      {
LABEL_12:
        if (!v12) {
          goto LABEL_14;
        }
      }
      else
      {
        CFStringRef v13 = *(uint64_t ***)bytes;
        while (1)
        {
          CFUUIDRef v14 = v13[3];
          if (*((unsigned char *)v14 + 1) == 30 && !strcmp((const char *)v13[1], "awdl0")) {
            break;
          }
          CFStringRef v13 = (uint64_t **)*v13;
          if (!v13) {
            goto LABEL_12;
          }
        }
        *(_OWORD *)CFAllocatorRef v18 = *(_OWORD *)v14;
        *(_OWORD *)&v18[12] = *(_OWORD *)((char *)v14 + 12);
        if (!v12) {
          goto LABEL_14;
        }
      }
      MEMORY[0x199710F90](v12);
LABEL_14:
      *(_OWORD *)UInt8 bytes = *(_OWORD *)(a6 + 8);
      if (*(void *)bytes) {
        BOOL v15 = 0;
      }
      else {
        BOOL v15 = *(void *)&bytes[8] == 0;
      }
      if (!v15 && (*(void *)&v18[8] != *(void *)bytes || *(void *)&v18[16] != *(void *)&bytes[8]))
      {
        CFDataRef v17 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], bytes, 16);
        if (!CFSetContainsValue((CFSetRef)gAddedIPs, v17))
        {
          if (CFDictionaryGetValueIfPresent((CFDictionaryRef)gAddedEnpointsToIPMap, v10, 0)) {
            figClusterSynchManager_removePeerEndpoint(v10);
          }
          if (gIsPlaying == 1) {
            figClusterSynchManager_AddPort(v17);
          }
          CFSetAddValue((CFMutableSetRef)gAddedIPs, v17);
          CFDictionaryAddValue((CFMutableDictionaryRef)gAddedEnpointsToIPMap, v10, v17);
        }
        if (v17) {
          CFRelease(v17);
        }
      }
LABEL_30:
      if (!cf) {
        return;
      }
      goto LABEL_31;
    }
    FigSignalErrorAt();
LABEL_31:
    CFRelease(cf);
    return;
  }
  FigSignalErrorAt();
  if (cf) {
    goto LABEL_31;
  }
}

uint64_t figClusterSynchManager_DeferredInitOnce()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  int out_token = 0;
  uint32_t v0 = dlopen("/System/Library/PrivateFrameworks/APTransport.framework/APTransport", 4);
  if (!v0
    || (CFStringRef v1 = v0,
        (sAPConnectivityHelperCreate = (uint64_t (*)(void))dlsym(v0, "APConnectivityHelperCreate")) == 0)
    || (sAPConnectivityHelperUpdateTrafficRegistration = (uint64_t (*)(void, void, void, void))dlsym(v1, "APConnectivityHelperUpdateTrafficRegistration")) == 0)
  {
    FigSignalErrorAt();
  }
  gManagerWorkSemaphore = (uint64_t)dispatch_semaphore_create(0);
  gMyDeviceUUID = (uint64_t)CFUUIDCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80]);
  if (dword_1E9351000)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  notify_register_dispatch("com.apple.airplay.prefsChanged", &out_token, (dispatch_queue_t)gSerialQueue, &__block_literal_global_47);
  return figClusterSynchManager_updateMyClusterID();
}

uint64_t ADTSGetSampleFrequency(uint64_t a1)
{
  return *(unsigned int *)((char *)&ADTSSampleFrequencies + (*(unsigned char *)(a1 + 2) & 0x3C));
}

uint64_t ADTSGetFrameSize(uint64_t a1)
{
  return (bswap32(*(unsigned __int16 *)(a1 + 4)) >> 21) & 0xFFFFE7FF | ((*(unsigned char *)(a1 + 3) & 3) << 11);
}

uint64_t ADTSGetFormatID(uint64_t a1)
{
  return *(unsigned int *)&aMcaaCaarcaatca[((unint64_t)*(unsigned __int8 *)(a1 + 2) >> 4) & 0xC];
}

uint64_t ADTSGetChannelLayout(uint64_t a1)
{
  unint64_t v1 = ((*(unsigned __int8 *)(a1 + 3) >> 6) & 0xFFFFFFFFFFFFFFFBLL | (4 * (*(unsigned char *)(a1 + 2) & 1))) - 1;
  if (v1 > 6) {
    return 6619138;
  }
  else {
    return dword_1949971B0[v1];
  }
}

uint64_t ADTSGetADTSHeaderSize(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 1)) {
    return 7;
  }
  else {
    return 9;
  }
}

uint64_t FigSCCFormatWriterCreateWithByteStream(const __CFAllocator *a1, const void *a2, uint64_t a3, CFTypeRef *a4)
{
  CFTypeRef cf = 0;
  if (a2 && a4)
  {
    FigFormatWriterGetClassID();
    uint64_t v7 = CMDerivedObjectCreate();
    CFTypeRef v8 = cf;
    if (!v7)
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      CFMutableArrayRef Mutable = CFArrayCreateMutable(a1, 1, 0);
      *(void *)(DerivedStorage + 88) = Mutable;
      if (Mutable)
      {
        if (a1) {
          CFTypeRef v11 = CFRetain(a1);
        }
        else {
          CFTypeRef v11 = 0;
        }
        *(void *)uint64_t DerivedStorage = v11;
        *(void *)(DerivedStorage + 16) = CFRetain(a2);
        CMTimeMake(&v13, 1001, 30000);
        uint64_t v7 = 0;
        *(CMTime *)(DerivedStorage + 28) = v13;
        *(_DWORD *)(DerivedStorage + 52) = 30;
        *(unsigned char *)(DerivedStorage + 56) = 0;
        *(_DWORD *)(DerivedStorage + 84) = -1;
        *a4 = cf;
        return v7;
      }
      uint64_t v7 = FigSignalErrorAt();
      CFTypeRef v8 = cf;
    }
    if (v8) {
      CFRelease(v8);
    }
    return v7;
  }

  return FigSignalErrorAt();
}

uint64_t sccFormatWriter_Invalidate()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)(DerivedStorage + 8))
  {
    uint64_t v1 = DerivedStorage;
    CFArrayRef v2 = *(const __CFArray **)(DerivedStorage + 88);
    if (v2)
    {
      CFAllocatorRef v3 = *(const __CFAllocator **)v1;
      CFIndex Count = CFArrayGetCount(v2);
      if (Count >= 1)
      {
        CFIndex v5 = Count;
        for (CFIndex i = 0; i != v5; ++i)
        {
          CFDictionaryRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v1 + 88), i);
          CFAllocatorDeallocate(v3, ValueAtIndex);
        }
      }
      CFTypeRef v8 = *(const void **)(v1 + 88);
      if (v8)
      {
        CFRelease(v8);
        *(void *)(v1 + 88) = 0;
      }
    }
    CFStringRef v9 = *(const void **)(v1 + 16);
    if (v9)
    {
      CFRelease(v9);
      *(void *)(v1 + 16) = 0;
    }
    if (*(void *)v1)
    {
      CFRelease(*(CFTypeRef *)v1);
      *(void *)uint64_t v1 = 0;
    }
    *(unsigned char *)(v1 + 8) = 1;
  }
  return 0;
}

__CFString *sccFormatWriter_CopyDebugDescription()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFArrayRef v2 = *(const void **)(DerivedStorage + 16);
  if (v2)
  {
    CFStringRef v3 = CFCopyDescription(v2);
    CFStringAppendFormat(Mutable, 0, @"<SCCFormatWriter: stream<%@>", v3);
    if (v3) {
      CFRelease(v3);
    }
  }
  else
  {
    CFStringAppendFormat(Mutable, 0, @"<SCCFormatWriter: stream<%@>", 0);
  }
  return Mutable;
}

uint64_t sccFormatWriter_CopyProperty(uint64_t a1, uint64_t a2, const __CFAllocator *a3, CFDictionaryRef *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2 && a4 && (uint64_t v8 = DerivedStorage, !*(unsigned char *)(DerivedStorage + 8)) && FigCFEqual())
  {
    CMTime v10 = *(CMTime *)(v8 + 60);
    *a4 = CMTimeCopyAsDictionary(&v10, a3);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t sccFormatWriter_SetProperty()
{
  CMBaseObjectGetDerivedStorage();

  return FigSignalErrorAt();
}

uint64_t sccFormatWriter_AddTrack(uint64_t a1, int a2, uint64_t a3, _DWORD *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFArrayRef v7 = *(const __CFArray **)(DerivedStorage + 88);
  if (v7)
  {
    CFIndex Count = CFArrayGetCount(v7);
    if (!a4) {
      goto LABEL_11;
    }
    int v9 = Count;
    if (Count >= 1) {
      goto LABEL_11;
    }
  }
  else
  {
    if (!a4) {
      goto LABEL_11;
    }
    int v9 = 0;
  }
  if (a2 == 1668047728 && !*(unsigned char *)(DerivedStorage + 8))
  {
    CMTime v10 = CFAllocatorAllocate(*(CFAllocatorRef *)DerivedStorage, 8, 0);
    if (v10)
    {
      *CMTime v10 = 0;
      CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 88), v10);
      *a4 = v9 + 1;
      return 0;
    }
  }
LABEL_11:

  return FigSignalErrorAt();
}

uint64_t sccFormatWriter_CopyTrackProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a3 && a5 && (uint64_t v8 = DerivedStorage, !*(unsigned char *)(DerivedStorage + 8)) && FigCFEqual())
  {
    int v9 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
    if (!*(unsigned char *)(v8 + 56)) {
      int v9 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
    }
    CFTypeRef v10 = *v9;
    if (*v9) {
      CFTypeRef v10 = CFRetain(v10);
    }
    *a5 = v10;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t sccFormatWriter_SetTrackProperty(uint64_t a1, uint64_t a2, uint64_t a3, const __CFBoolean *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a3
    && (uint64_t v7 = DerivedStorage, !*(unsigned char *)(DerivedStorage + 8))
    && FigCFEqual()
    && a4
    && (CFTypeID v8 = CFGetTypeID(a4), v8 == CFBooleanGetTypeID()))
  {
    *(unsigned char *)(v7 + 56) = CFBooleanGetValue(a4);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t sccFormatWriter_AddSampleBufferToTrack(uint64_t a1, int a2, opaqueCMSampleBuffer *a3)
{
  v12[3] = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFArrayRef Count = *(const __CFArray **)(DerivedStorage + 88);
  if (Count) {
    CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
  }
  CFIndex v7 = (a2 - 1);
  if (!a3 || a2 < 1 || (uint64_t)Count <= v7 || *(unsigned char *)(DerivedStorage + 8))
  {
    return FigSignalErrorAt();
  }
  else
  {
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 88), v7);
    refcon[0] = DerivedStorage;
    refcon[1] = ValueAtIndex;
    if (*(unsigned char *)(DerivedStorage + 24)) {
      return CMSampleBufferCallForEachSample(a3, (OSStatus (__cdecl *)(CMSampleBufferRef, CMItemCount, void *))sccFormatWriterEachSampleCallback, refcon);
    }
    strcpy((char *)v12, "Scenarist_SCC V1.0");
    uint64_t v11 = 0;
    uint64_t result = CMByteStreamAppend();
    if (!result)
    {
      LODWORD(v11) = 168626701;
      v12[0] = 0;
      uint64_t result = CMByteStreamAppend();
      if (!result)
      {
        *(unsigned char *)(DerivedStorage + 24) = 1;
        return CMSampleBufferCallForEachSample(a3, (OSStatus (__cdecl *)(CMSampleBufferRef, CMItemCount, void *))sccFormatWriterEachSampleCallback, refcon);
      }
    }
  }
  return result;
}

uint64_t sccFormatWriter_Flush()
{
  if (!*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 8)) {
    return 0;
  }

  return FigSignalErrorAt();
}

uint64_t sccFormatWriter_WriteHeader()
{
  if (!*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 8)) {
    return 0;
  }

  return FigSignalErrorAt();
}

uint64_t sccFormatWriter_BeginSession()
{
  if (!*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 8)) {
    return 0;
  }

  return FigSignalErrorAt();
}

uint64_t sccFormatWriter_EndSession()
{
  if (!*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 8)) {
    return 0;
  }

  return FigSignalErrorAt();
}

uint64_t sccFormatWriterEachSampleCallback(opaqueCMSampleBuffer *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *a3;
  CFUUIDRef v4 = (FourCharCode *)a3[1];
  CMBlockBufferRef DataBuffer = CMSampleBufferGetDataBuffer(a1);
  blockBufferOut[0] = 0;
  if (!DataBuffer) {
    return 0;
  }
  CFIndex v7 = DataBuffer;
  FormatDescription = CMSampleBufferGetFormatDescription(a1);
  FourCharCode MediaSubType = CMFormatDescriptionGetMediaSubType(FormatDescription);
  memset(&v68, 0, sizeof(v68));
  CMSampleBufferGetOutputPresentationTimeStamp(&v68, a1);
  size_t SampleSize = CMSampleBufferGetSampleSize(a1, 0);
  dataPointerOut = 0;
  size_t totalLengthOut = 0;
  if (!FormatDescription || (v68.flags & 1) == 0 || !SampleSize) {
    goto LABEL_22;
  }
  LODWORD(time1.CFDictionarySetValue(theDict, key, value) = 0;
  LODWORD(time2.CFDictionarySetValue(theDict, key, value) = 0;
  uint64_t ClosedCaptionServiceFormatAndServiceIndexFromFormatDescription = FigClosedCaptionGetClosedCaptionServiceFormatAndServiceIndexFromFormatDescription(FormatDescription, (unsigned int *)&time1, (unsigned int *)&time2);
  if (ClosedCaptionServiceFormatAndServiceIndexFromFormatDescription) {
    goto LABEL_23;
  }
  BOOL v12 = !LODWORD(time2.value) || LODWORD(time1.value) == 0;
  int v13 = v12 ? 1 : LODWORD(time2.value);
  if (LODWORD(time2.value) && LODWORD(time1.value) && LODWORD(time1.value) != 1681272888)
  {
LABEL_22:
    uint64_t ClosedCaptionServiceFormatAndServiceIndexFromFormatDescription = FigSignalErrorAt();
    goto LABEL_23;
  }
  if (*v4)
  {
    if (MediaSubType != *v4) {
      goto LABEL_22;
    }
  }
  else
  {
    *CFUUIDRef v4 = MediaSubType;
  }
  FourCharCode v15 = v4[1];
  if (v15)
  {
    if (v13 != v15) {
      goto LABEL_22;
    }
  }
  else
  {
    v4[1] = v13;
  }
  CMTime time1 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  CMTime time2 = v68;
  if (CMTimeCompare(&time1, &time2) >= 1) {
    goto LABEL_22;
  }
  CMTimeMake(&v65, 360000, 1);
  CMTime time1 = v68;
  if ((CMTimeCompare(&time1, &v65) & 0x80000000) == 0) {
    goto LABEL_22;
  }
  if (!CMBlockBufferIsRangeContiguous(v7, 0, 0))
  {
    uint64_t ClosedCaptionServiceFormatAndServiceIndexFromFormatDescription = CMBlockBufferCreateContiguous((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v7, (CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, 0, 0, blockBufferOut);
    if (ClosedCaptionServiceFormatAndServiceIndexFromFormatDescription) {
      goto LABEL_23;
    }
    CFIndex v7 = blockBufferOut[0];
  }
  uint64_t ClosedCaptionServiceFormatAndServiceIndexFromFormatDescription = CMBlockBufferGetDataPointer(v7, 0, 0, &totalLengthOut, &dataPointerOut);
  if (ClosedCaptionServiceFormatAndServiceIndexFromFormatDescription) {
    goto LABEL_23;
  }
  CFDataRef v17 = dataPointerOut;
  size_t v16 = totalLengthOut;
  CMTime v64 = v68;
  CMTime time1 = v68;
  CFAllocatorRef v18 = (_OWORD *)(v5 + 28);
  float v19 = CMTimeGetSeconds(&time1) * (float)((float)*(int *)(v5 + 36) / (float)*(uint64_t *)(v5 + 28));
  signed int v20 = llroundf(v19);
  signed int v21 = *(_DWORD *)(v5 + 84);
  if (v21 != -1 && v21 >= v20)
  {
    uint64_t v14 = 4294954663;
    goto LABEL_101;
  }
  __str.CMTimeScale timescale = 0;
  __str.int64_t value = 0;
  blockBufferOut[1] = 0;
  if (!*(unsigned char *)(v5 + 56)
    || (CMTimeMake(&time1, 1001, 30000),
        *(_OWORD *)&time2.int64_t value = *v18,
        time2.CMTimeEpoch epoch = *(void *)(v5 + 44),
        CMTimeCompare(&time1, &time2))
    && (CMTimeMake(&time2, 100, 2997),
        *(_OWORD *)&rhs.int64_t value = *v18,
        rhs.CMTimeEpoch epoch = *(void *)(v5 + 44),
        CMTimeCompare(&time2, &rhs)))
  {
    int v22 = *(_DWORD *)(v5 + 52);
    uint64_t v23 = 58;
    signed int v24 = v20;
  }
  else
  {
    int v22 = *(_DWORD *)(v5 + 52);
    int v25 = 600 * v22 - 18;
    int v26 = 18 * (v20 / v25);
    int v27 = v20 % v25;
    BOOL v28 = __OFSUB__(v27, 60 * v22);
    int v29 = v27 - 60 * v22;
    if (v29 < 0 == v28) {
      v26 += 2 * (v29 / (60 * v22 - 2)) + 2;
    }
    signed int v24 = v26 + v20;
    uint64_t v23 = 59;
  }
  snprintf((char *)&__str, 0xCuLL, "%02d:%02d:%02d%c%02d", ((char)(v24 / v22) / 16), ((char)(v24 / v22 / 60) % 60), (v24 / v22 % 60), v23, (v24 % v22));
  strlen((const char *)&__str);
  uint64_t ClosedCaptionServiceFormatAndServiceIndexFromFormatDescription = CMByteStreamAppend();
  if (ClosedCaptionServiceFormatAndServiceIndexFromFormatDescription)
  {
LABEL_23:
    uint64_t v14 = ClosedCaptionServiceFormatAndServiceIndexFromFormatDescription;
    goto LABEL_101;
  }
  if (MediaSubType != 1635017571)
  {
    if (MediaSubType != 1664495672)
    {
      uint64_t v14 = 4294954662;
      goto LABEL_101;
    }
    CFDictionaryRef v55 = (CMTime *)(v5 + 28);
    signed int v56 = v20;
    if ((v13 - 3) >= 2) {
      int v30 = 1667522932;
    }
    else {
      int v30 = 1667527730;
    }
    int v58 = v30;
    uint64_t v57 = v5;
    if (v16 >= 9)
    {
      int32_t v31 = 0;
      int v32 = 0;
      uint64_t v33 = *(void *)(v5 + 16);
      uint64_t v34 = (unsigned int *)v17;
      while (1)
      {
        size_t v35 = bswap32(*v34);
        if (v35 < 8 || v16 < v35)
        {
          uint64_t v14 = 4294954659;
          goto LABEL_101;
        }
        CFArrayRef v60 = v34;
        size_t v62 = v16;
        if (v58 == bswap32(v34[1]))
        {
          unint64_t v37 = v35 - 8;
          if (v35 != 8) {
            break;
          }
        }
LABEL_68:
        uint64_t v34 = (unsigned int *)((char *)v60 + v35);
        size_t v16 = v62 - v35;
        if (v62 - v35 <= 8) {
          goto LABEL_99;
        }
      }
      unint64_t v38 = 0;
      while (1)
      {
        LOWORD(time2.CFDictionarySetValue(theDict, key, value) = 0;
        if (v38 + 1 >= v37) {
          uint64_t v39 = 1;
        }
        else {
          uint64_t v39 = 2;
        }
        __memcpy_chk();
        if (v38 + 1 >= v37) {
          BYTE1(time2.CFDictionarySetValue(theDict, key, value) = 0x80;
        }
        char v40 = v32 ? 32 : 9;
        LOBYTE(rhs.CFDictionarySetValue(theDict, key, value) = v40;
        time1.int64_t value = 0;
        uint64_t ClosedCaptionServiceFormatAndServiceIndexFromFormatDescription = CMByteStreamAppend();
        if (ClosedCaptionServiceFormatAndServiceIndexFromFormatDescription) {
          goto LABEL_23;
        }
        uint64_t ClosedCaptionServiceFormatAndServiceIndexFromFormatDescription = sccFormatWriterWriteBytePair(v33, LOBYTE(time2.value), BYTE1(time2.value));
        if (ClosedCaptionServiceFormatAndServiceIndexFromFormatDescription) {
          goto LABEL_23;
        }
        ++v31;
        v38 += v39;
        int v32 = 1;
        if (v38 >= v37) {
          goto LABEL_68;
        }
      }
    }
LABEL_98:
    int32_t v31 = 0;
    goto LABEL_99;
  }
  CFDictionaryRef v55 = (CMTime *)(v5 + 28);
  signed int v56 = v20;
  uint64_t v57 = v5;
  if (v16 < 8) {
    goto LABEL_98;
  }
  int v41 = 0;
  int32_t v31 = 0;
  uint64_t v42 = *(void *)(v5 + 16);
  unsigned int v43 = v13 - 5;
  while (*v17 != 71 || v17[1] != 65 || v17[2] != 57 || v17[3] != 52 || v17[4] != 3)
  {
    ++v17;
    --v16;
LABEL_95:
    if (v16 <= 7) {
      goto LABEL_99;
    }
  }
  char v44 = v17[5];
  unsigned int v45 = v44 & 0x1F;
  if (v16 - 7 >= 3 * (unint64_t)(v44 & 0x1F))
  {
    int v59 = 3 * (v44 & 0x1F);
    uint64_t v61 = v17 + 5;
    if ((v17[5] & 0x40) != 0 && (v44 & 0x1F) != 0)
    {
      unsigned int v46 = 0;
      long long v47 = (unsigned __int8 *)(v17 + 9);
      int v63 = v44 & 0x1F;
      do
      {
        unsigned int v48 = *(v47 - 2);
        if ((v48 & 3) <= 1 && v48 >= 0xFC && v43 < 0xFFFFFFFE != ((v48 & 3) == 1))
        {
          int v50 = *(v47 - 1);
          int v51 = *v47;
          if (v41) {
            char v52 = 32;
          }
          else {
            char v52 = 9;
          }
          LOBYTE(time2.CFDictionarySetValue(theDict, key, value) = v52;
          time1.int64_t value = 0;
          uint64_t ClosedCaptionServiceFormatAndServiceIndexFromFormatDescription = CMByteStreamAppend();
          if (ClosedCaptionServiceFormatAndServiceIndexFromFormatDescription) {
            goto LABEL_23;
          }
          uint64_t ClosedCaptionServiceFormatAndServiceIndexFromFormatDescription = sccFormatWriterWriteBytePair(v42, v50, v51);
          if (ClosedCaptionServiceFormatAndServiceIndexFromFormatDescription) {
            goto LABEL_23;
          }
          ++v31;
          int v41 = 1;
          unsigned int v45 = v63;
        }
        ++v46;
        v47 += 3;
      }
      while (v46 < v45);
    }
    uint64_t v53 = (v59 + 2);
    CFDataRef v17 = &v61[v53];
    size_t v16 = v16 - 5 - v53;
    goto LABEL_95;
  }
  uint64_t ClosedCaptionServiceFormatAndServiceIndexFromFormatDescription = FigSignalErrorAt();
  int32_t v31 = 0;
  if (ClosedCaptionServiceFormatAndServiceIndexFromFormatDescription) {
    goto LABEL_23;
  }
LABEL_99:
  LODWORD(time2.CFDictionarySetValue(theDict, key, value) = 168626701;
  time1.int64_t value = 0;
  uint64_t v14 = CMByteStreamAppend();
  if (!v14)
  {
    CMTime time2 = *v55;
    memset(&time1, 0, sizeof(time1));
    CMTimeMultiply(&time1, &time2, v31);
    CMTime time2 = v64;
    CMTime rhs = time1;
    CMTimeAdd(&__str, &time2, &rhs);
    *(CMTime *)(v57 + 60) = __str;
    *(_DWORD *)(v57 + 84) = v56 + v31 - 1;
  }
LABEL_101:
  if (blockBufferOut[0]) {
    CFRelease(blockBufferOut[0]);
  }
  return v14;
}

uint64_t sccFormatWriterWriteBytePair(uint64_t a1, int a2, int a3)
{
  char v5 = 0;
  *(_DWORD *)CMTime __str = 0;
  snprintf(__str, 5uLL, "%02x%02x", a2, a3);
  strlen(__str);
  return CMByteStreamAppend();
}

uint64_t DDPlusGetSyncFrameInfo(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *(unsigned char *)(a1 + 2) >> 6;
  *a3 = (*(unsigned char *)(a1 + 2) >> 3) & 7;
  return 0;
}

uint64_t DDPlusGetAudioBlockCountForSyncFrame(uint64_t a1)
{
  return DDPNumberOfAudioBlocksPerSyncframe[((unint64_t)*(unsigned __int8 *)(a1 + 4) >> 4) & 3];
}

uint64_t DolbyCreateChannelLayout(uint64_t a1, void *a2, UInt32 *a3)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  int outPropertyData = 0;
  if (*(unsigned char *)(a1 + 16))
  {
    int v5 = 6619138;
    int v6 = *(unsigned __int8 *)(a1 + 15);
    switch(*(unsigned char *)(a1 + 14))
    {
      case 1:
        BOOL v7 = v6 == 0;
        int v5 = 9764866;
        int v8 = 6553601;
        goto LABEL_38;
      case 2:
        BOOL v16 = v6 == 0;
        int v17 = 8716291;
        goto LABEL_34;
      case 3:
        int v5 = 9961476;
        BOOL v7 = v6 == 0;
        int v8 = 9830403;
        goto LABEL_38;
      case 4:
        BOOL v7 = v6 == 0;
        int v5 = 10027012;
        int v8 = 8585219;
        goto LABEL_38;
      case 5:
        int v5 = 9895940;
        BOOL v16 = v6 == 0;
        int v17 = 10092549;
LABEL_34:
        if (!v16) {
          int v5 = v17;
        }
        break;
      case 6:
        BOOL v7 = v6 == 0;
        int v5 = 9043973;
        int v8 = 8650756;
        goto LABEL_38;
      case 7:
        BOOL v7 = v6 == 0;
        int v5 = 8060934;
        int v8 = 7798789;
        goto LABEL_38;
      default:
        goto LABEL_40;
    }
    goto LABEL_40;
  }
  int v9 = *(unsigned __int16 *)(a1 + 12);
  if (v9 == 53505 || v9 == 41217)
  {
    BOOL v7 = v9 == 41217;
    int v5 = 10092549;
    int v8 = 10027012;
LABEL_38:
    if (v7) {
      int v5 = v8;
    }
LABEL_40:
    int outPropertyData = v5;
    goto LABEL_41;
  }
  UInt32 ioPropertyDataSize = 4;
  memset(__src, 0, sizeof(__src));
  uint64_t v35 = 0;
  if ((v9 & 0x8000) == 0)
  {
    unsigned int v11 = 0;
    if ((v9 & 0x4000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  unsigned int v11 = 1;
  LODWORD(__src[0]) = 1;
  if ((v9 & 0x4000) != 0)
  {
LABEL_12:
    uint64_t v12 = 20 * v11++;
    *(_DWORD *)((char *)__src + v12) = 3;
  }
LABEL_13:
  if ((v9 & 0x2000) != 0)
  {
    uint64_t v19 = 20 * v11++;
    *(_DWORD *)((char *)__src + v19) = 2;
    if ((v9 & 0x1000) == 0)
    {
LABEL_15:
      if ((v9 & 0x800) == 0) {
        goto LABEL_16;
      }
      goto LABEL_45;
    }
  }
  else if ((v9 & 0x1000) == 0)
  {
    goto LABEL_15;
  }
  uint64_t v20 = 20 * v11++;
  *(_DWORD *)((char *)__src + v20) = 5;
  if ((v9 & 0x800) == 0)
  {
LABEL_16:
    if ((v9 & 1) == 0) {
      goto LABEL_17;
    }
    goto LABEL_46;
  }
LABEL_45:
  uint64_t v21 = 20 * v11++;
  *(_DWORD *)((char *)__src + v21) = 6;
  if ((v9 & 1) == 0)
  {
LABEL_17:
    if ((v9 & 0x400) == 0) {
      goto LABEL_18;
    }
    goto LABEL_47;
  }
LABEL_46:
  uint64_t v22 = 20 * v11++;
  *(_DWORD *)((char *)__src + v22) = 4;
  if ((v9 & 0x400) == 0)
  {
LABEL_18:
    if ((v9 & 0x200) == 0) {
      goto LABEL_19;
    }
    goto LABEL_48;
  }
LABEL_47:
  *((_DWORD *)__src + 5 * v11) = 7;
  unsigned int v23 = v11 + 1;
  v11 += 2;
  *((_DWORD *)__src + 5 * v23) = 8;
  if ((v9 & 0x200) == 0)
  {
LABEL_19:
    if ((v9 & 0x100) == 0) {
      goto LABEL_20;
    }
    goto LABEL_49;
  }
LABEL_48:
  *((_DWORD *)__src + 5 * v11) = 33;
  unsigned int v24 = v11 + 1;
  v11 += 2;
  *((_DWORD *)__src + 5 * v24) = 34;
  if ((v9 & 0x100) == 0)
  {
LABEL_20:
    if ((v9 & 0x80) == 0) {
      goto LABEL_21;
    }
    goto LABEL_50;
  }
LABEL_49:
  uint64_t v25 = 20 * v11++;
  *(_DWORD *)((char *)__src + v25) = 9;
  if ((v9 & 0x80) == 0)
  {
LABEL_21:
    if ((v9 & 0x40) == 0) {
      goto LABEL_22;
    }
    goto LABEL_51;
  }
LABEL_50:
  uint64_t v26 = 20 * v11++;
  *(_DWORD *)((char *)__src + v26) = 12;
  if ((v9 & 0x40) == 0)
  {
LABEL_22:
    if ((v9 & 0x20) == 0) {
      goto LABEL_23;
    }
    goto LABEL_52;
  }
LABEL_51:
  *((_DWORD *)__src + 5 * v11) = 10;
  unsigned int v27 = v11 + 1;
  v11 += 2;
  *((_DWORD *)__src + 5 * v27) = 11;
  if ((v9 & 0x20) == 0)
  {
LABEL_23:
    if ((v9 & 0x10) == 0) {
      goto LABEL_24;
    }
    goto LABEL_53;
  }
LABEL_52:
  *((_DWORD *)__src + 5 * v11) = 35;
  unsigned int v28 = v11 + 1;
  v11 += 2;
  *((_DWORD *)__src + 5 * v28) = 36;
  if ((v9 & 0x10) == 0)
  {
LABEL_24:
    if ((v9 & 8) == 0) {
      goto LABEL_25;
    }
    goto LABEL_54;
  }
LABEL_53:
  *((_DWORD *)__src + 5 * v11) = 13;
  unsigned int v29 = v11 + 1;
  v11 += 2;
  *((_DWORD *)__src + 5 * v29) = 15;
  if ((v9 & 8) == 0)
  {
LABEL_25:
    if ((v9 & 4) == 0) {
      goto LABEL_26;
    }
    goto LABEL_55;
  }
LABEL_54:
  uint64_t v30 = 20 * v11++;
  *(_DWORD *)((char *)__src + v30) = 14;
  if ((v9 & 4) == 0)
  {
LABEL_26:
    if ((v9 & 2) == 0) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
LABEL_55:
  *((_DWORD *)__src + 5 * v11) = 38;
  unsigned int v31 = v11 + 1;
  v11 += 2;
  *((_DWORD *)__src + 5 * v31) = 39;
  if ((v9 & 2) != 0)
  {
LABEL_27:
    uint64_t v13 = 20 * v11++;
    *(_DWORD *)((char *)__src + v13) = 37;
  }
LABEL_28:
  size_t v14 = 20 * (v11 - 1) + 32;
  *(void *)a3 = v14;
  FourCharCode v15 = malloc_type_calloc(1uLL, v14, 0x7D367AC1uLL);
  *FourCharCode v15 = 0;
  void v15[2] = v11;
  memcpy(v15 + 3, __src, 20 * v11);
  if (!AudioFormatGetProperty(0x636D7074u, *a3, v15, &ioPropertyDataSize, &outPropertyData))
  {
    free(v15);
LABEL_41:
    FourCharCode v15 = malloc_type_calloc(1uLL, 0x20uLL, 0x1000040E0EAB150uLL);
    *FourCharCode v15 = outPropertyData;
    *(void *)a3 = 32;
  }
  *a2 = v15;
  return 0;
}

uint64_t DolbyGetFormatID(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 5) - 88 >= 0x30) {
    return 1633889587;
  }
  else {
    return 1700998451;
  }
}

uint64_t DolbyGetSamplesPerFrame()
{
  return 1536;
}

uint64_t DolbyGetSampleFrequency(uint64_t a1)
{
  unint64_t v1 = (unint64_t)*(unsigned __int8 *)(a1 + 4) >> 6;
  if (v1 == 3) {
    return 0;
  }
  else {
    return DolbyAudioSampleFrequencies[v1];
  }
}

uint64_t DolbyGetFrameSize(unsigned char *a1)
{
  if ((a1[5] + 120) <= 0xCFu)
  {
    unint64_t v1 = a1[4];
    uint64_t v2 = v1 & 0x3F;
    if ((v1 & 0x3F) > 0x25) {
      return 0;
    }
    unint64_t v3 = v1 >> 6;
    if (v3 == 3) {
      goto LABEL_9;
    }
    int v4 = DolbyAudioSampleFrequencies[v3];
    if (v4 == 32000)
    {
      int v5 = (char *)&DolbyAudioBitRates + 16 * v2 + 4;
      goto LABEL_11;
    }
    if (v4 != 44100) {
LABEL_9:
    }
      int v5 = (char *)&DolbyAudioBitRates + 16 * v2 + 12;
    else {
      int v5 = (char *)&DolbyAudioBitRates + 16 * v2 + 8;
    }
LABEL_11:
    int v6 = *(_DWORD *)v5;
    return (2 * v6);
  }
  int v6 = (a1[3] | ((a1[2] & 7) << 8)) + 1;
  return (2 * v6);
}

uint64_t DolbyCreateMagicCookie(unsigned char *a1, unsigned __int8 *a2, OpaqueCMBlockBuffer *a3, void *a4, size_t *a5)
{
  char *returnedPointerOut;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  OpaqueCMBlockBuffer *v56;
  char *v57[2];
  long long v58;
  uint64_t v59;
  unsigned char temporaryBlock[10];
  uint64_t v61;
  uint64_t vars8;

  uint64_t v61 = *MEMORY[0x1E4F143B8];
  unsigned int v7 = a2[5];
  if ((v7 + 120) >= 0xD0u)
  {
    BOOL v16 = a1;
    uint64_t v17 = a1[18];
    uint64_t v18 = 3 * v17 + 10;
    if (a1[18])
    {
      uint64_t v19 = a1 + 19;
      do
      {
        if (*v19++) {
          ++v18;
        }
        --v17;
      }
      while (v17);
    }
    if (a1[17]) {
      size_t v21 = v18 + 2;
    }
    else {
      size_t v21 = v18;
    }
    uint64_t v22 = malloc_type_malloc(v21, 0xBA61FDC9uLL);
    if (!v22) {
      goto LABEL_92;
    }
    unsigned int v23 = v22;
    unsigned int v46 = a5;
    size_t v45 = v21;
    _DWORD *v22 = bswap32(v21);
    v22[1] = 862152036;
    int v24 = v16[18];
    *((_WORD *)v22 + 4) = bswap32((v24 - 1) | (*((_DWORD *)v16 + 2) / 0x7Du) & 0xFFF8) >> 16;
    if (!v24)
    {
      uint64_t v27 = 10;
LABEL_88:
      if (v16[17])
      {
        unsigned int v43 = (char *)v23 + v27;
        *unsigned int v43 = 1;
        v43[1] = v16[17];
      }
      *a4 = v23;
      *unsigned int v46 = v45;
      return 0;
    }
    uint64_t v25 = 0;
    size_t v26 = 0;
    uint64_t v27 = 10;
    long long v47 = v16;
    while (1)
    {
      returnedPointerOut = 0;
      CMBlockBufferAccessDataBytes(a3, v26, 0xAuLL, temporaryBlock, &returnedPointerOut);
      char v28 = returnedPointerOut[2];
      unsigned int v29 = returnedPointerOut[5];
      char v48 = returnedPointerOut[4];
      int v59 = 0;
      v57[0] = 0;
      int v58 = 0u;
      char v52 = 0;
      signed int v56 = a3;
      v57[1] = (char *)(v26 + 2);
      if (!CMBlockBufferGetDataPointer(a3, v26 + 2, (size_t *)&v58, 0, v57))
      {
        *((void *)&v58 + 1) = 0;
        int v59 = 0;
      }
      CFDictionaryRef v54 = 0;
      CFDictionaryRef v55 = 0;
      uint64_t v53 = 0;
      BitStreamFetch((uint64_t)&v56, 2, (int *)&v55 + 1);
      v59 += 14;
      BitStreamFetch((uint64_t)&v56, 2, (int *)&v55);
      BitStreamFetch((uint64_t)&v56, 2, (int *)&v53 + 1);
      BitStreamFetch((uint64_t)&v56, 3, (int *)&v54 + 1);
      BitStreamFetch((uint64_t)&v56, 1, (int *)&v54);
      v59 += 10;
      BitStreamFetch((uint64_t)&v56, 1, (int *)&v53);
      if (v53) {
        v59 += 8;
      }
      unsigned int v30 = HIDWORD(v54);
      if (!HIDWORD(v54))
      {
        v59 += 5;
        BitStreamFetch((uint64_t)&v56, 1, (int *)&v53);
        if (v53) {
          v59 += 8;
        }
      }
      int v31 = HIDWORD(v55);
      if (HIDWORD(v55) == 1)
      {
        BitStreamFetch((uint64_t)&v56, 1, (int *)&v53);
        if (v53) {
          v59 += 16;
        }
      }
      BitStreamFetch((uint64_t)&v56, 1, (int *)&v53);
      if (!v53) {
        goto LABEL_46;
      }
      if (v30 >= 3)
      {
        uint64_t v32 = v59;
        v59 += 2;
        if (v30) {
          int v59 = v32 + 8;
        }
      }
      if ((v30 & 4) != 0) {
        v59 += 6;
      }
      if (v54)
      {
        BitStreamFetch((uint64_t)&v56, 1, (int *)&v53);
        if (v53) {
          v59 += 5;
        }
      }
      if (v31) {
        goto LABEL_46;
      }
      int v51 = 0;
      BitStreamFetch((uint64_t)&v56, 1, (int *)&v53);
      if (v53) {
        v59 += 6;
      }
      if (!v30)
      {
        BitStreamFetch((uint64_t)&v56, 1, (int *)&v53);
        if (v53) {
          v59 += 6;
        }
      }
      BitStreamFetch((uint64_t)&v56, 1, (int *)&v53);
      if (v53) {
        v59 += 6;
      }
      BitStreamFetch((uint64_t)&v56, 2, &v51);
      if (v51 == 3) {
        break;
      }
      if (v51 == 2)
      {
        uint64_t v41 = v59 + 12;
        goto LABEL_70;
      }
      if (v51 == 1)
      {
        uint64_t v41 = v59 + 5;
LABEL_70:
        int v59 = v41;
      }
      if (v30 <= 1)
      {
        BitStreamFetch((uint64_t)&v56, 1, (int *)&v53);
        if (v53) {
          v59 += 14;
        }
        if (!v30)
        {
          BitStreamFetch((uint64_t)&v56, 1, (int *)&v53);
          if (v53) {
            v59 += 14;
          }
        }
      }
      BitStreamFetch((uint64_t)&v56, 1, (int *)&v53);
      if (v53)
      {
        if (HIDWORD(v53))
        {
          if (DDPNumberOfAudioBlocksPerSyncframe[HIDWORD(v53)] <= 1u) {
            uint64_t v42 = 1;
          }
          else {
            uint64_t v42 = DDPNumberOfAudioBlocksPerSyncframe[HIDWORD(v53)];
          }
          do
          {
            BitStreamFetch((uint64_t)&v56, 1, (int *)&v53);
            if (v53) {
              v59 += 5;
            }
            --v42;
          }
          while (v42);
        }
        else
        {
          v59 += 5;
        }
      }
LABEL_46:
      BitStreamFetch((uint64_t)&v56, 1, (int *)&v53);
      char v33 = v53;
      if (v53)
      {
        BitStreamFetch((uint64_t)&v56, 3, &v52);
        char v33 = v52;
      }
      BOOL v16 = v47;
      uint64_t v34 = (char *)v23 + v27;
      *uint64_t v34 = (v29 >> 2) & 0x3E | v28 & 0xC0;
      v34[1] = v48 & 0xF | ((v25 != 0) << 7) | (16 * v33);
      uint64_t v35 = &v47[v25 + 19];
      *((unsigned char *)v23 + v27 + 2) = 2 * *v35;
      v26 += DolbyGetFrameSize(returnedPointerOut);
      if (*v35)
      {
        unsigned int v36 = 0;
        unsigned int v37 = 0;
        do
        {
          LOWORD(v56) = 0;
          CMBlockBufferAccessDataBytes(a3, v26, 0xAuLL, temporaryBlock, &returnedPointerOut);
          ChanMapForDependentStreaCFIndex m = ddplusGetChanMapForDependentStream((uint64_t)returnedPointerOut, &v56);
          int v39 = (unsigned __int16)v56;
          if (!ChanMapForDependentStream) {
            int v39 = 0;
          }
          v36 |= v39;
          v26 += DolbyGetFrameSize(returnedPointerOut);
          ++v37;
        }
        while (v37 < *v35);
        *((unsigned char *)v23 + v27 + 2) |= (v36 & 2) != 0;
        *((unsigned char *)v23 + v27 + 3) = v36 & 0x20 | ((v36 & 0x400) != 0) | BYTE1(v36) & 2 | (v36 >> 6) & 4 | (v36 >> 4) & 8 | (v36 >> 2) & 0x10 | (((v36 & 0x10) != 0) << 6) | (16 * v36) & 0x80;
        uint64_t v40 = 4;
        BOOL v16 = v47;
      }
      else
      {
        uint64_t v40 = 3;
      }
      v27 += v40;
      if (++v25 >= (unint64_t)v16[18]) {
        goto LABEL_88;
      }
    }
    int v50 = 0;
    BitStreamFetch((uint64_t)&v56, 5, &v50);
    uint64_t v41 = 8;
    goto LABEL_70;
  }
  unsigned int v8 = a2[6];
  unsigned int v9 = v8 >> 5;
  if (((v8 >> 5 != 1) & (v8 >> 5)) != 0) {
    int v10 = 2;
  }
  else {
    int v10 = 4;
  }
  if ((v8 & 0x80u) == 0) {
    int v11 = v10;
  }
  else {
    int v11 = v10 - 2;
  }
  if (v9 == 2) {
    int v12 = v11 - 2;
  }
  else {
    int v12 = v11;
  }
  if (v12 < 0)
  {
    unsigned int v8 = a2[7];
    LOBYTE(v12) = v12 + 8;
  }
  unsigned int v13 = a2[4];
  size_t v14 = malloc_type_malloc(0xBuLL, 0x10000403B807CB7uLL);
  if (v14)
  {
    *(void *)size_t v14 = *(void *)"";
    v14[8] = v13 & 0xC0 | (v7 >> 2);
    v14[9] = ((_BYTE)v7 << 6) | (8 * v9) | (4 * ((v8 >> v12) & 1)) | (v13 >> 4) & 3;
    v14[10] = (16 * v13) & 0xE0;
    *a4 = v14;
    *a5 = 11;
    return 0;
  }
LABEL_92:

  return FigSignalErrorAt();
}

uint64_t DolbyGetSampleInfo(uint64_t a1, CMBlockBufferRef theBuffer)
{
  char *returnedPointerOut;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  int v61;
  int v62;
  unsigned int v63;
  int v64;
  unsigned int v65;
  int v66;
  uint64_t v67;
  long long v68;
  long long v69;
  long long v70;
  unsigned char temporaryBlock[10];
  uint64_t v72;

  CFIndex v72 = *MEMORY[0x1E4F143B8];
  returnedPointerOut = 0;
  uint64_t result = CMBlockBufferAccessDataBytes(theBuffer, 0, 0xAuLL, temporaryBlock, &returnedPointerOut);
  if (result) {
    return result;
  }
  int v5 = (unsigned __int8 *)returnedPointerOut;
  unsigned int v6 = (returnedPointerOut[5] + 120);
  if (v6 >= 0xD0) {
    int v7 = 1700998451;
  }
  else {
    int v7 = 1633889587;
  }
  *(_DWORD *)a1 = v7;
  unint64_t v8 = (unint64_t)v5[4] >> 6;
  if (v8 == 3) {
    int v9 = 0;
  }
  else {
    int v9 = DolbyAudioSampleFrequencies[v8];
  }
  *(_DWORD *)(a1 + 4) = v9;
  if (v6 <= 0xCF)
  {
    uint64_t v10 = v5[4] & 0x3F;
    if (v10 <= 0x25) {
      int v11 = 1000 * DolbyAudioBitRates[4 * v10];
    }
    else {
      int v11 = 0;
    }
    *(_DWORD *)(a1 + 8) = v11;
    unint64_t v15 = v5[6];
    unint64_t v16 = v15 >> 5;
    *(unsigned char *)(a1 + 15) = 0;
    if ((((v15 >> 5) != 1) & (v15 >> 5)) != 0) {
      int v17 = 2;
    }
    else {
      int v17 = 4;
    }
    if ((v15 & 0x80u) == 0) {
      int v18 = v17;
    }
    else {
      int v18 = v17 - 2;
    }
    if (v16 == 2) {
      v18 -= 2;
    }
    if (v18 < 0)
    {
      unsigned int v19 = v5[7];
      LOBYTE(v18) = v18 + 8;
    }
    else
    {
      unsigned int v19 = v15;
    }
    uint64_t result = 0;
    int v23 = (v19 >> v18) & 1;
    *(unsigned char *)(a1 + 15) = v23;
    *(unsigned char *)(a1 + 14) = v15 >> 5;
    *(unsigned char *)(a1 + 16) = 1;
    *(_WORD *)(a1 + 12) = acmodToChannelMap[v16] | v23;
    *(unsigned char *)(a1 + 18) = 1;
    return result;
  }
  int v69 = 0u;
  int v70 = 0u;
  CMTime v68 = 0u;
  CFIndex v67 = 0;
  uint64_t v66 = 0;
  CFArrayRef v60 = 0;
  uint64_t v57 = 0;
  int v58 = 0;
  CFDictionaryRef v55 = 0;
  signed int v56 = 0;
  uint64_t v53 = 0;
  CFDictionaryRef v54 = 0;
  DataCFIndex Length = CMBlockBufferGetDataLength(theBuffer);
  size_t v13 = 0;
  do
  {
    if (v13 >= DataLength) {
      goto LABEL_126;
    }
    *(void *)&CMTime v68 = theBuffer;
    *(void *)&int v69 = v13;
    if (CMBlockBufferGetDataPointer(theBuffer, v13, (size_t *)&v69 + 1, 0, (char **)&v68 + 1))
    {
      uint64_t v14 = *((void *)&v70 + 1);
    }
    else
    {
      uint64_t v14 = 0;
      *(void *)&int v70 = 0;
    }
    *((void *)&v70 + 1) = v14 + 16;
    uint64_t result = BitStreamFetch((uint64_t)&v68, 2, (int *)&v67 + 1);
    if (result) {
      return result;
    }
    uint64_t result = BitStreamFetch((uint64_t)&v68, 3, (int *)&v67);
    if (result) {
      return result;
    }
    uint64_t result = BitStreamFetch((uint64_t)&v68, 11, &v66);
    if (result) {
      return result;
    }
    v13 += (2 * v66 + 2);
  }
  while (v67);
  CMTime v65 = 0;
  uint64_t result = BitStreamFetch((uint64_t)&v68, 2, (int *)&v65);
  if (!result)
  {
    CMTime v64 = 0;
    uint64_t result = BitStreamFetch((uint64_t)&v68, 2, &v64);
    if (!result)
    {
      int v63 = 0;
      uint64_t result = BitStreamFetch((uint64_t)&v68, 3, (int *)&v63);
      if (!result)
      {
        size_t v62 = 0;
        uint64_t result = BitStreamFetch((uint64_t)&v68, 1, &v62);
        if (!result)
        {
          uint64_t v61 = 0;
          uint64_t result = BitStreamFetch((uint64_t)&v68, 5, &v61);
          if (!result)
          {
            if ((v61 - 17) < 0xFFFFFFFA) {
              return 4294954516;
            }
            *((void *)&v70 + 1) += 5;
            char v52 = 0;
            uint64_t result = BitStreamFetch((uint64_t)&v68, 1, &v52);
            if (result) {
              return result;
            }
            if (v52) {
              *((void *)&v70 + 1) += 8;
            }
            unsigned int v20 = v63;
            if (!v63)
            {
              *((void *)&v70 + 1) += 5;
              char v52 = 0;
              uint64_t result = BitStreamFetch((uint64_t)&v68, 1, &v52);
              if (result) {
                return result;
              }
              if (v52) {
                *((void *)&v70 + 1) += 8;
              }
            }
            int v59 = 0;
            uint64_t result = BitStreamFetch((uint64_t)&v68, 1, &v59);
            if (!result)
            {
              if (!v59) {
                goto LABEL_97;
              }
              if (v20 >= 3)
              {
                uint64_t v21 = *((void *)&v70 + 1);
                *((void *)&v70 + 1) += 2;
                if (v20) {
                  *((void *)&v70 + 1) = v21 + 8;
                }
              }
              if ((v20 & 4) != 0) {
                *((void *)&v70 + 1) += 6;
              }
              if (v62)
              {
                char v52 = 0;
                uint64_t result = BitStreamFetch((uint64_t)&v68, 1, &v52);
                if (result) {
                  return result;
                }
                if (v52) {
                  *((void *)&v70 + 1) += 5;
                }
              }
              char v52 = 0;
              uint64_t result = BitStreamFetch((uint64_t)&v68, 1, &v52);
              if (!result)
              {
                if (v52) {
                  *((void *)&v70 + 1) += 6;
                }
                if (!v20)
                {
                  char v52 = 0;
                  uint64_t result = BitStreamFetch((uint64_t)&v68, 1, &v52);
                  if (result) {
                    return result;
                  }
                  if (v52) {
                    *((void *)&v70 + 1) += 6;
                  }
                }
                char v52 = 0;
                uint64_t result = BitStreamFetch((uint64_t)&v68, 1, &v52);
                if (!result)
                {
                  if (v52) {
                    *((void *)&v70 + 1) += 6;
                  }
                  uint64_t result = BitStreamFetch((uint64_t)&v68, 2, (int *)&v58 + 1);
                  if (!result)
                  {
                    switch(HIDWORD(v58))
                    {
                      case 1:
                        uint64_t v22 = 5;
                        break;
                      case 3:
                        uint64_t result = BitStreamFetch((uint64_t)&v68, 5, (int *)&v57 + 1);
                        if (result) {
                          return result;
                        }
                        uint64_t v22 = (8 * HIDWORD(v57) + 16);
                        break;
                      case 2:
                        uint64_t v22 = 12;
                        break;
                      default:
LABEL_77:
                        if (v20 <= 1)
                        {
                          uint64_t result = BitStreamFetch((uint64_t)&v68, 1, (int *)&v58);
                          if (result) {
                            return result;
                          }
                          if (v58) {
                            *((void *)&v70 + 1) += 14;
                          }
                          if (!v20)
                          {
                            uint64_t result = BitStreamFetch((uint64_t)&v68, 1, (int *)&v57);
                            if (result) {
                              return result;
                            }
                            if (v57) {
                              *((void *)&v70 + 1) += 14;
                            }
                          }
                        }
                        uint64_t result = BitStreamFetch((uint64_t)&v68, 1, (int *)&v56 + 1);
                        if (!result)
                        {
                          if (HIDWORD(v56))
                          {
                            if (v64)
                            {
                              if (DDPNumberOfAudioBlocksPerSyncframe[v64] <= 1u) {
                                int v24 = 1;
                              }
                              else {
                                int v24 = DDPNumberOfAudioBlocksPerSyncframe[v64];
                              }
                              while (1)
                              {
                                char v52 = 0;
                                uint64_t result = BitStreamFetch((uint64_t)&v68, 1, &v52);
                                if (result) {
                                  return result;
                                }
                                if (v52) {
                                  *((void *)&v70 + 1) += 5;
                                }
                                if (!--v24) {
                                  goto LABEL_97;
                                }
                              }
                            }
                            *((void *)&v70 + 1) += 5;
                          }
LABEL_97:
                          uint64_t result = BitStreamFetch((uint64_t)&v68, 1, (int *)&v56);
                          if (result) {
                            return result;
                          }
                          if (!v56)
                          {
LABEL_113:
                            if (v64 != 3) {
                              ++*((void *)&v70 + 1);
                            }
                            uint64_t result = BitStreamFetch((uint64_t)&v68, 1, (int *)&v54 + 1);
                            if (result) {
                              return result;
                            }
                            if (HIDWORD(v54) != 1) {
                              goto LABEL_126;
                            }
                            uint64_t result = BitStreamFetch((uint64_t)&v68, 6, (int *)&v54);
                            if (result) {
                              return result;
                            }
                            if (v54 != 1) {
                              goto LABEL_126;
                            }
                            uint64_t result = BitStreamFetch((uint64_t)&v68, 7, (int *)&v53 + 1);
                            if (result) {
                              return result;
                            }
                            if (HIDWORD(v53)) {
                              goto LABEL_126;
                            }
                            uint64_t result = BitStreamFetch((uint64_t)&v68, 1, (int *)&v53);
                            if (result) {
                              return result;
                            }
                            if (v53 == 1)
                            {
                              uint64_t result = BitStreamFetch((uint64_t)&v68, 8, &v60);
                              if (result) {
                                return result;
                              }
                              char v27 = v60;
                              if ((v60 - 17) < 0xFFFFFFF0) {
                                return 4294954516;
                              }
                            }
                            else
                            {
LABEL_126:
                              char v27 = 0;
                            }
                            *(unsigned char *)(a1 + 17) = v27;
                            size_t v28 = CMBlockBufferGetDataLength(theBuffer);
                            LODWORD(v29) = *(_DWORD *)(a1 + 4);
                            *(_DWORD *)(a1 + 8) = ((double)v28 * 8.0 * ((double)v29 / 1536.0));
                            *(unsigned char *)(a1 + 16) = 1;
                            if (!v28)
                            {
LABEL_159:
                              unsigned __int16 v50 = acmodToChannelMap[*(unsigned __int8 *)(a1 + 14)];
                              *(_WORD *)(a1 + 12) = v50;
                              if (!*(unsigned char *)(a1 + 15)) {
                                return 0;
                              }
                              uint64_t result = 0;
                              *(_WORD *)(a1 + 12) = v50 | 1;
                              return result;
                            }
                            size_t v30 = v28;
                            int v31 = 0;
                            unsigned int v32 = 0;
                            size_t v33 = 0;
                            while (1)
                            {
                              LOWORD(v68) = 0;
                              uint64_t result = CMBlockBufferAccessDataBytes(theBuffer, v33, 0xAuLL, temporaryBlock, &returnedPointerOut);
                              if (result) {
                                return result;
                              }
                              uint64_t v34 = returnedPointerOut;
                              unsigned int v35 = returnedPointerOut[2];
                              unint64_t v36 = returnedPointerOut[4];
                              uint64_t v37 = (v36 >> 1) & 7;
                              int v38 = v36 & 1;
                              if ((v35 & 0x40) != 0) {
                                break;
                              }
                              int v39 = *(unsigned __int8 *)(a1 + 18);
                              if (v39 == 8) {
                                goto LABEL_158;
                              }
                              unsigned int v32 = (v35 >> 3) & 7;
                              *(unsigned char *)(a1 + 18) = v39 + 1;
                              if (v31)
                              {
                                if (!v32)
                                {
LABEL_158:
                                  if (!*(unsigned char *)(a1 + 16)) {
                                    return 0;
                                  }
                                  goto LABEL_159;
                                }
LABEL_138:
                                ChanMapForDependentStreaCFIndex m = 0;
                                goto LABEL_139;
                              }
                              ChanMapForDependentStreaCFIndex m = 0;
                              *(unsigned char *)(a1 + 14) = v37;
                              *(unsigned char *)(a1 + 15) = v38;
                              int v31 = 1;
LABEL_139:
                              int v45 = *(unsigned __int8 *)(a1 + 16);
                              if (*(unsigned char *)(a1 + 16))
                              {
                                uint64_t v46 = *(unsigned __int8 *)(a1 + 14);
                                if (ChanMapForDependentStream)
                                {
                                  LOWORD(v46) = acmodToChannelMap[v46];
                                  int v47 = *(unsigned __int8 *)(a1 + 15);
                                }
                                else
                                {
                                  if (v37 == v46) {
                                    goto LABEL_155;
                                  }
                                  int v47 = *(unsigned __int8 *)(a1 + 15);
                                  if (v38 == v47) {
                                    goto LABEL_155;
                                  }
                                  LODWORD(v46) = acmodToChannelMap[v46];
                                  if ((v46 | (v47 != 0)) == (unsigned __int16)(acmodToChannelMap[v37] | v38 | v46 | (v47 != 0))) {
                                    goto LABEL_155;
                                  }
                                }
                                *(unsigned char *)(a1 + 16) = 0;
                                *(_WORD *)(a1 + 12) = v46;
                                if (v47) {
                                  *(_WORD *)(a1 + 12) = v46 | 1;
                                }
                              }
                              if (ChanMapForDependentStream)
                              {
                                __int16 v48 = *(_WORD *)(a1 + 12) | v68;
LABEL_154:
                                int v45 = 0;
                                *(_WORD *)(a1 + 12) = v48;
                                goto LABEL_155;
                              }
                              __int16 v49 = *(_WORD *)(a1 + 12) | acmodToChannelMap[v37];
                              *(_WORD *)(a1 + 12) = v49;
                              if (v38)
                              {
                                __int16 v48 = v49 | 1;
                                goto LABEL_154;
                              }
                              int v45 = 0;
LABEL_155:
                              v33 += DolbyGetFrameSize(returnedPointerOut);
                              if (v33 >= v30)
                              {
                                if (v45) {
                                  goto LABEL_159;
                                }
                                return 0;
                              }
                            }
                            if ((v35 & 0xC0) == 0x40)
                            {
                              uint64_t v40 = a1 + v32;
                              unsigned int v43 = *(unsigned __int8 *)(v40 + 19);
                              uint64_t v41 = (unsigned char *)(v40 + 19);
                              char v42 = v43;
                              if (v43 <= 7)
                              {
                                *uint64_t v41 = v42 + 1;
                                ChanMapForDependentStreaCFIndex m = ddplusGetChanMapForDependentStream((uint64_t)v34, &v68);
                                goto LABEL_139;
                              }
                            }
                            goto LABEL_138;
                          }
                          uint64_t v25 = *((void *)&v70 + 1);
                          *((void *)&v70 + 1) += 5;
                          if (v20 == 2)
                          {
                            uint64_t v26 = 9;
                          }
                          else
                          {
                            if (v20 < 6)
                            {
LABEL_104:
                              uint64_t result = BitStreamFetch((uint64_t)&v68, 1, (int *)&v55 + 1);
                              if (result) {
                                return result;
                              }
                              if (HIDWORD(v55)) {
                                *((void *)&v70 + 1) += 8;
                              }
                              if (!v20)
                              {
                                uint64_t result = BitStreamFetch((uint64_t)&v68, 1, (int *)&v55);
                                if (result) {
                                  return result;
                                }
                                if (v55) {
                                  *((void *)&v70 + 1) += 8;
                                }
                              }
                              if (v65 <= 2) {
                                ++*((void *)&v70 + 1);
                              }
                              goto LABEL_113;
                            }
                            uint64_t v26 = 7;
                          }
                          *((void *)&v70 + 1) = v26 + v25;
                          goto LABEL_104;
                        }
                        return result;
                    }
                    *((void *)&v70 + 1) += v22;
                    goto LABEL_77;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t ddplusGetChanMapForDependentStream(uint64_t a1, _WORD *a2)
{
  int v8 = 0;
  uint64_t v6 = 0;
  v9[0] = 0;
  v9[1] = a1;
  long long v10 = xmmword_1949971F0;
  long long v11 = xmmword_194997200;
  BitStreamFetch((uint64_t)v9, 3, &v8);
  *((void *)&v11 + 1) += 11;
  BitStreamFetch((uint64_t)v9, 1, (int *)&v6);
  if (v6) {
    *((void *)&v11 + 1) += 8;
  }
  if (!v8)
  {
    *((void *)&v11 + 1) += 5;
    BitStreamFetch((uint64_t)v9, 1, (int *)&v6);
    if (v6) {
      *((void *)&v11 + 1) += 8;
    }
  }
  int v7 = 0;
  BitStreamFetch((uint64_t)v9, 1, &v7);
  unsigned __int8 v3 = v7;
  if (v7)
  {
    BitStreamFetch((uint64_t)v9, 16, (int *)&v6 + 1);
    __int16 v4 = WORD2(v6);
  }
  else
  {
    __int16 v4 = 0;
  }
  *a2 = v4;
  return v3;
}

uint64_t BitStreamFetch(uint64_t a1, uint64_t a2, int *a3)
{
  *a3 = 0;
  if (a2 < 1) {
    return 0;
  }
  unint64_t v4 = a2;
  uint64_t v6 = (size_t *)(a1 + 24);
  int v7 = (char **)(a1 + 8);
  for (unint64_t i = *(void *)(a1 + 40); ; unint64_t i = 8)
  {
    unint64_t v9 = *(void *)(a1 + 24);
    unint64_t v10 = *(void *)(a1 + 32) + (i >> 3);
    *(void *)(a1 + 32) = v10;
    *(void *)(a1 + 40) = i & 7;
    if (v10 >= v9)
    {
      long long v11 = *(OpaqueCMBlockBuffer **)a1;
      if (*(void *)a1)
      {
        size_t v12 = *(void *)(a1 + 16) + v10;
        *(void *)(a1 + 16) = v12;
        uint64_t result = CMBlockBufferGetDataPointer(v11, v12, v6, 0, v7);
        if (result) {
          return result;
        }
        unint64_t v10 = 0;
        *(void *)(a1 + 32) = 0;
      }
      else
      {
        uint64_t result = FigSignalErrorAt();
        if (result) {
          return result;
        }
        unint64_t v10 = *(void *)(a1 + 32);
      }
    }
    uint64_t v14 = *(void *)(a1 + 40);
    uint64_t v15 = 8 - v14;
    unsigned int v16 = *(unsigned __int8 *)(*(void *)(a1 + 8) + v10);
    uint64_t v17 = v4 - (8 - v14);
    if (v4 <= 8 - v14) {
      break;
    }
    *a3 = (*a3 << v15) | bitMask[v15] & v16;
    *(void *)(a1 + 40) = 8;
    unint64_t v4 = v17;
    if (v17 <= 0) {
      return 0;
    }
  }
  uint64_t result = 0;
  unsigned int v18 = v16 >> (v15 - v4);
  if (v15 == v4) {
    LOBYTE(v18) = v16;
  }
  *a3 = (*a3 << v4) | bitMask[v4] & v18;
  *(void *)(a1 + 40) = v14 + v4;
  return result;
}

uint64_t FigCSSParseColor(const __CFString *a1, float *a2, float *a3, float *a4, float *a5)
{
  uint64_t v50 = 0;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  *(_OWORD *)buffer = 0u;
  CFIndex Length = CFStringGetLength(a1);
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  unsigned int v35 = 0;
  uint64_t v36 = 0;
  if (!a2 || !a3 || !a4 || !a5) {
    goto LABEL_25;
  }
  int64_t v11 = Length;
  *(void *)&long long v47 = a1;
  *((void *)&v48 + 1) = 0;
  *(void *)&long long v49 = Length;
  CharactersPtr = CFStringGetCharactersPtr(a1);
  CStringPtr = 0;
  *((void *)&v47 + 1) = CharactersPtr;
  if (!CharactersPtr) {
    CStringPtr = CFStringGetCStringPtr(a1, 0x600u);
  }
  *((void *)&v49 + 1) = 0;
  uint64_t v50 = 0;
  *(void *)&long long v48 = CStringPtr;
  if (figCSSParseCharacter(35, buffer, 0, v11, &v38))
  {
    if (figCSSParseString("rgb", buffer, v38, v11, &v38))
    {
      CStringPtrAndBufferToFree = (const char *)FigCFStringGetCStringPtrAndBufferToFree();
      if (CStringPtrAndBufferToFree)
      {
        unsigned int v32 = a5;
        CFAllocatorRef v15 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        CFStringRef v16 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], CStringPtrAndBufferToFree, 0x8000100u);
        unint64_t v17 = 0x1FFFFFFFFFFFFBEDuLL;
        while (1)
        {
          unsigned int v18 = &(&off_1E5798D58)[v17];
          CFStringRef v19 = CFStringCreateWithCString(v15, (&off_1E5798D58)[v17 + 1043], 0x8000100u);
          CFComparisonResult v20 = CFStringCompare(v19, v16, 1uLL);
          if (v20 == kCFCompareEqualTo) {
            break;
          }
          if (v19) {
            CFRelease(v19);
          }
          v17 += 7;
          if (!(v17 * 8))
          {
            CFStringRef v19 = 0;
            float v21 = NAN;
            float v22 = NAN;
            float v23 = NAN;
            float v24 = NAN;
            if (!v16) {
              goto LABEL_39;
            }
            goto LABEL_38;
          }
        }
        float v21 = *((float *)v18 + 2088);
        float v22 = *((float *)v18 + 2089);
        float v23 = *((float *)v18 + 2090);
        float v24 = *((float *)v18 + 2091);
        int v28 = *((_DWORD *)v18 + 2092);
        LODWORD(v37) = *((_DWORD *)v18 + 2093);
        HIDWORD(v37) = v28;
        int v29 = *((_DWORD *)v18 + 2094);
        LODWORD(v36) = *((_DWORD *)v18 + 2095);
        HIDWORD(v36) = v29;
        if (!v16) {
          goto LABEL_39;
        }
LABEL_38:
        CFRelease(v16);
LABEL_39:
        a5 = v32;
        if (v19) {
          CFRelease(v19);
        }
        if (v20 == kCFCompareEqualTo) {
          goto LABEL_42;
        }
      }
    }
    else
    {
      int v26 = figCSSParseString("a(", buffer, v38, v11, &v38);
      if (!v26 || !figCSSParseCharacter(40, buffer, v38, v11, &v38))
      {
        figCSSParseLWSP(buffer, v38, v11, &v38);
        uint64_t v25 = figCSSParseOneOrMoreDigits(buffer, v38, v11, &v38, (_DWORD *)&v37 + 1);
        if (v25) {
          goto LABEL_46;
        }
        figCSSParseLWSP(buffer, v38, v11, &v38);
        uint64_t v25 = figCSSParseCharacter(44, buffer, v38, v11, &v38);
        if (v25) {
          goto LABEL_46;
        }
        figCSSParseLWSP(buffer, v38, v11, &v38);
        uint64_t v25 = figCSSParseOneOrMoreDigits(buffer, v38, v11, &v38, &v37);
        if (v25) {
          goto LABEL_46;
        }
        figCSSParseLWSP(buffer, v38, v11, &v38);
        uint64_t v25 = figCSSParseCharacter(44, buffer, v38, v11, &v38);
        if (v25) {
          goto LABEL_46;
        }
        figCSSParseLWSP(buffer, v38, v11, &v38);
        uint64_t v25 = figCSSParseOneOrMoreDigits(buffer, v38, v11, &v38, (_DWORD *)&v36 + 1);
        if (v25) {
          goto LABEL_46;
        }
        figCSSParseLWSP(buffer, v38, v11, &v38);
        float v24 = 1.0;
        if (!v26)
        {
          int v34 = 0;
          double v33 = 0.0;
          uint64_t v25 = figCSSParseCharacter(44, buffer, v38, v11, &v38);
          if (v25) {
            goto LABEL_46;
          }
          figCSSParseLWSP(buffer, v38, v11, &v38);
          uint64_t v25 = figCSSParseOneOrMoreDigits(buffer, v38, v11, &v38, &v34);
          if (v25) {
            goto LABEL_46;
          }
          figCSSParseFraction(buffer, v38, v11, &v38, &v33);
          figCSSParseLWSP(buffer, v38, v11, &v38);
          LODWORD(v27) = v34;
          float v24 = v33 + (double)v27;
        }
        uint64_t v25 = figCSSParseCharacter(41, buffer, v38, v11, &v38);
        if (v25) {
          goto LABEL_46;
        }
        float v21 = NAN;
        float v22 = NAN;
        float v23 = NAN;
        goto LABEL_42;
      }
    }
LABEL_25:
    uint64_t v25 = FigSignalErrorAt();
    goto LABEL_46;
  }
  uint64_t v25 = figCSSParseHexDigits(buffer, v38, v11, &v38, (unsigned int *)&v37 + 1);
  if (v25) {
    goto LABEL_46;
  }
  uint64_t v25 = figCSSParseHexDigits(buffer, v38, v11, &v38, (unsigned int *)&v37);
  if (v25) {
    goto LABEL_46;
  }
  uint64_t v25 = figCSSParseHexDigits(buffer, v38, v11, &v38, (unsigned int *)&v36 + 1);
  if (v25) {
    goto LABEL_46;
  }
  if (figCSSParseHexDigits(buffer, v38, v11, &v38, (unsigned int *)&v36)) {
    LODWORD(v36) = 255;
  }
  float v21 = NAN;
  float v22 = NAN;
  float v23 = NAN;
  float v24 = NAN;
LABEL_42:
  uint64_t v25 = figCSSCopyColorComponentWithRangeCheck(v21, HIDWORD(v37), a2);
  if (!v25)
  {
    uint64_t v25 = figCSSCopyColorComponentWithRangeCheck(v22, v37, a3);
    if (!v25)
    {
      uint64_t v25 = figCSSCopyColorComponentWithRangeCheck(v23, HIDWORD(v36), a4);
      if (!v25) {
        uint64_t v25 = figCSSCopyColorComponentWithRangeCheck(v24, v36, a5);
      }
    }
  }
LABEL_46:
  uint64_t v30 = v25;
  free(v35);
  return v30;
}

uint64_t figCSSParseCharacter(int a1, UniChar *buffer, int64_t a3, int64_t a4, void *a5)
{
  if (a5)
  {
    if (a4 <= a3) {
      return 4294949475;
    }
    if (a3 < 0 || (int64_t v10 = *((void *)buffer + 20), v10 <= a3))
    {
      UniChar v12 = 0;
    }
    else
    {
      uint64_t v11 = *((void *)buffer + 17);
      if (v11)
      {
        UniChar v12 = *(_WORD *)(v11 + 2 * (*((void *)buffer + 19) + a3));
      }
      else
      {
        uint64_t v14 = *((void *)buffer + 18);
        if (v14)
        {
          UniChar v12 = *(char *)(v14 + *((void *)buffer + 19) + a3);
        }
        else
        {
          if (*((void *)buffer + 22) <= a3 || (int64_t v15 = *((void *)buffer + 21), v15 > a3))
          {
            int64_t v16 = a3 - 4;
            if ((unint64_t)a3 < 4) {
              int64_t v16 = 0;
            }
            if (v16 + 64 < v10) {
              int64_t v10 = v16 + 64;
            }
            *((void *)buffer + 21) = v16;
            *((void *)buffer + 22) = v10;
            CFStringRef v17 = (const __CFString *)*((void *)buffer + 16);
            v18.location = *((void *)buffer + 19) + v16;
            v18.CFIndex length = v10 - v16;
            CFStringGetCharacters(v17, v18, buffer);
            int64_t v15 = *((void *)buffer + 21);
          }
          UniChar v12 = buffer[a3 - v15];
        }
      }
    }
    if (a1 == v12)
    {
      uint64_t result = 0;
      *a5 = a3 + 1;
    }
    else
    {
      return 4294949475;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t figCSSParseHexDigits(UniChar *buffer, uint64_t a2, uint64_t a3, uint64_t *a4, unsigned int *a5)
{
  if (a4 && a5)
  {
    if (a3 - a2 >= 2)
    {
      unsigned int v9 = 0;
      uint64_t v10 = -a2;
      uint64_t v11 = a2 + 64;
      char v12 = 1;
      uint64_t v13 = a2;
      while (1)
      {
        char v14 = v12;
        uint64_t v15 = (unint64_t)v13 >= 4 ? 4 : v13;
        if (a2 < 0) {
          break;
        }
        uint64_t v16 = *((void *)buffer + 20);
        if (v16 <= v13) {
          break;
        }
        uint64_t v17 = *((void *)buffer + 17);
        if (v17)
        {
          UniChar v18 = *(_WORD *)(v17 + 2 * (v13 + *((void *)buffer + 19)));
        }
        else
        {
          uint64_t v19 = *((void *)buffer + 18);
          if (v19)
          {
            UniChar v18 = *(char *)(v19 + *((void *)buffer + 19) + v13);
          }
          else
          {
            if (*((void *)buffer + 22) <= v13 || (uint64_t v20 = *((void *)buffer + 21), v20 > v13))
            {
              uint64_t v21 = -v15;
              uint64_t v22 = v15 + v10;
              uint64_t v23 = v11 - v15;
              uint64_t v24 = v13 + v21;
              uint64_t v25 = v24 + 64;
              if (v24 + 64 >= v16) {
                uint64_t v25 = *((void *)buffer + 20);
              }
              *((void *)buffer + 21) = v24;
              *((void *)buffer + 22) = v25;
              if (v16 >= v23) {
                uint64_t v16 = v23;
              }
              v30.CFIndex length = v16 + v22;
              v30.location = v24 + *((void *)buffer + 19);
              CFStringGetCharacters(*((CFStringRef *)buffer + 16), v30, buffer);
              uint64_t v20 = *((void *)buffer + 21);
            }
            UniChar v18 = buffer[v13 - v20];
          }
        }
        int v26 = v18;
        if ((unsigned __int16)(v18 - 48) >= 0xAu)
        {
          if (v18 - 65 >= 6)
          {
            if (v18 - 97 > 5) {
              return 4294949475;
            }
            int v27 = -87;
          }
          else
          {
            int v27 = -55;
          }
        }
        else
        {
          int v27 = -48;
        }
        if (v9 > 0xF0F0F0E) {
          return 4294949474;
        }
        char v12 = 0;
        unsigned int v9 = v27 + v26 + 16 * v9;
        ++v13;
        --v10;
        ++v11;
        if ((v14 & 1) == 0)
        {
          uint64_t result = 0;
          *a4 = v13;
          *a5 = v9;
          return result;
        }
      }
    }
    return 4294949475;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t figCSSParseString(char *a1, UniChar *buffer, int64_t a3, int64_t a4, int64_t *a5)
{
  if (a5)
  {
    int64_t v7 = a3;
    char v9 = *a1;
    if (*a1)
    {
      uint64_t v11 = 0;
      if (a4 <= a3) {
        int64_t v12 = a3;
      }
      else {
        int64_t v12 = a4;
      }
      int64_t v13 = v12 - a3;
      while (v11 != v13)
      {
        if (v7 < 0 || (int64_t v14 = *((void *)buffer + 20), v14 <= v7))
        {
          UniChar v16 = 0;
        }
        else
        {
          uint64_t v15 = *((void *)buffer + 17);
          if (v15)
          {
            UniChar v16 = *(_WORD *)(v15 + 2 * (*((void *)buffer + 19) + v7));
          }
          else
          {
            uint64_t v17 = *((void *)buffer + 18);
            if (v17)
            {
              UniChar v16 = *(char *)(v17 + *((void *)buffer + 19) + v7);
            }
            else
            {
              if (*((void *)buffer + 22) <= v7 || (int64_t v18 = *((void *)buffer + 21), v18 > v7))
              {
                int64_t v19 = v7 - 4;
                if ((unint64_t)v7 < 4) {
                  int64_t v19 = 0;
                }
                if (v19 + 64 < v14) {
                  int64_t v14 = v19 + 64;
                }
                *((void *)buffer + 21) = v19;
                *((void *)buffer + 22) = v14;
                v21.location = *((void *)buffer + 19) + v19;
                v21.CFIndex length = v14 - v19;
                CFStringGetCharacters(*((CFStringRef *)buffer + 16), v21, buffer);
                int64_t v18 = *((void *)buffer + 21);
              }
              UniChar v16 = buffer[v7 - v18];
            }
          }
        }
        if (v9 != v16) {
          break;
        }
        ++v7;
        char v9 = a1[++v11];
        if (!v9) {
          goto LABEL_26;
        }
      }
      return 4294949475;
    }
    else
    {
LABEL_26:
      uint64_t result = 0;
      *a5 = v7;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

void figCSSParseLWSP(UniChar *buffer, int64_t a2, int64_t a3, int64_t *a4)
{
  int64_t v5 = a2;
  if (a2 < a3 && (a2 & 0x8000000000000000) == 0)
  {
    int64_t v8 = -a2;
    int64_t v9 = a2 + 64;
    do
    {
      if ((unint64_t)v5 >= 4) {
        uint64_t v10 = 4;
      }
      else {
        uint64_t v10 = v5;
      }
      int64_t v11 = *((void *)buffer + 20);
      if (v11 <= v5) {
        break;
      }
      uint64_t v12 = *((void *)buffer + 17);
      if (v12)
      {
        UniChar v13 = *(_WORD *)(v12 + 2 * (v5 + *((void *)buffer + 19)));
      }
      else
      {
        uint64_t v14 = *((void *)buffer + 18);
        if (v14)
        {
          UniChar v13 = *(char *)(v14 + *((void *)buffer + 19) + v5);
        }
        else
        {
          if (*((void *)buffer + 22) <= v5 || (int64_t v15 = *((void *)buffer + 21), v15 > v5))
          {
            uint64_t v16 = -v10;
            uint64_t v17 = v10 + v8;
            int64_t v18 = v9 - v10;
            int64_t v19 = v5 + v16;
            int64_t v20 = v19 + 64;
            if (v19 + 64 >= v11) {
              int64_t v20 = *((void *)buffer + 20);
            }
            *((void *)buffer + 21) = v19;
            *((void *)buffer + 22) = v20;
            if (v11 >= v18) {
              int64_t v11 = v18;
            }
            v24.CFIndex length = v11 + v17;
            v24.location = v19 + *((void *)buffer + 19);
            CFStringGetCharacters(*((CFStringRef *)buffer + 16), v24, buffer);
            int64_t v15 = *((void *)buffer + 21);
          }
          UniChar v13 = buffer[v5 - v15];
        }
      }
      unsigned int v21 = v13;
      uint64_t v22 = (1 << v13) & 0x100002600;
      if (v21 > 0x20 || v22 == 0) {
        break;
      }
      ++v5;
      --v8;
      ++v9;
    }
    while (v5 < a3);
  }
  *a4 = v5;
}

uint64_t figCSSParseOneOrMoreDigits(UniChar *a1, int64_t a2, int64_t a3, void *a4, _DWORD *a5)
{
  uint64_t v10 = 0;
  int64_t v11 = a2;
  if (a4 && a5)
  {
    uint64_t result = figCSSParseDigits(a1, a2, a3, &v11, (_DWORD *)&v10 + 1);
    if (!result)
    {
      if (figCSSParseDigits(a1, v11, a3, &v11, &v10))
      {
LABEL_7:
        uint64_t result = 0;
        *a4 = v11;
        *a5 = HIDWORD(v10);
      }
      else
      {
        while (HIDWORD(v10) <= 0x1745D173)
        {
          HIDWORD(v10) = v10 + 10 * HIDWORD(v10);
          if (figCSSParseDigits(a1, v11, a3, &v11, &v10)) {
            goto LABEL_7;
          }
        }
        return 4294949474;
      }
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t figCSSParseFraction(UniChar *buffer, int64_t a2, int64_t a3, void *a4, double *a5)
{
  int64_t v14 = a2;
  int v13 = 0;
  if (a4 && a5)
  {
    uint64_t result = figCSSParseCharacter(46, buffer, a2, a3, &v14);
    if (!result)
    {
      uint64_t result = figCSSParseDigits(buffer, v14, a3, &v14, &v13);
      double v11 = 0.0;
      if (!result)
      {
        double v12 = 10.0;
        do
        {
          LODWORD(v10) = v13;
          double v11 = v11 + (double)v10 / v12;
          double v12 = v12 * 10.0;
          uint64_t result = figCSSParseDigits(buffer, v14, a3, &v14, &v13);
        }
        while (!result);
      }
      *a4 = v14;
      *a5 = v11;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t figCSSCopyColorComponentWithRangeCheck(float a1, uint64_t a2, float *a3)
{
  if (a1 < 0.0 || a1 > 1.0) {
    return FigSignalErrorAt();
  }
  *a3 = a1;
  return 0;
}

uint64_t FigCSSParseDigitsAsUInt32(const __CFString *a1, _DWORD *a2)
{
  CFIndex Length = CFStringGetLength(a1);
  uint64_t v10 = 0;
  int v9 = 0;
  if (a2)
  {
    int64_t v5 = Length;
    CFStringRef v12 = a1;
    uint64_t v15 = 0;
    CFIndex v16 = Length;
    CharactersPtr = CFStringGetCharactersPtr(a1);
    CStringPtr = 0;
    int v13 = CharactersPtr;
    if (!CharactersPtr) {
      CStringPtr = CFStringGetCStringPtr(a1, 0x600u);
    }
    memset(v11, 0, sizeof(v11));
    int64_t v14 = CStringPtr;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t result = figCSSParseOneOrMoreDigits((UniChar *)v11, 0, v5, &v10, &v9);
    if (!result)
    {
      *a2 = v9;
      return result;
    }
  }
  else
  {
    LODWORD(result) = FigSignalErrorAt();
  }
  if (result == -17821) {
    return 4294949474;
  }
  else {
    return result;
  }
}

uint64_t FigCSSParseFontSize(const __CFString *a1, uint64_t *a2)
{
  CFIndex Length = CFStringGetLength(a1);
  int64_t v13 = 0;
  int v12 = 0;
  double v11 = 0.0;
  if (!a2)
  {
    LODWORD(result) = FigSignalErrorAt();
LABEL_16:
    if (result == -17821) {
      return 4294949474;
    }
    else {
      return result;
    }
  }
  int64_t v5 = Length;
  CFStringRef v22 = a1;
  uint64_t v25 = 0;
  CFIndex v26 = Length;
  CharactersPtr = CFStringGetCharactersPtr(a1);
  CStringPtr = 0;
  uint64_t v23 = CharactersPtr;
  if (!CharactersPtr) {
    CStringPtr = CFStringGetCStringPtr(a1, 0x600u);
  }
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  *(_OWORD *)buffer = 0u;
  long long v15 = 0u;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  CFRange v24 = CStringPtr;
  LODWORD(result) = figCSSParseOneOrMoreDigits(buffer, 0, v5, &v13, &v12);
  if (result) {
    goto LABEL_16;
  }
  figCSSParseFraction(buffer, v13, v5, &v13, &v11);
  if (figCSSParseCharacter(37, buffer, v13, v5, &v13)
    && figCSSParseString("em", buffer, v13, v5, &v13)
    && figCSSParseString("rem", buffer, v13, v5, &v13)
    && figCSSParseString("vw", buffer, v13, v5, &v13)
    && figCSSParseString("vh", buffer, v13, v5, &v13)
    && figCSSParseString("vmin", buffer, v13, v5, &v13)
    && figCSSParseString("vmax", buffer, v13, v5, &v13))
  {
    return 4294949474;
  }
  uint64_t v9 = FigGeometryDimensionMake();
  uint64_t result = 0;
  *a2 = v9;
  a2[1] = v10;
  return result;
}

uint64_t figCSSParseDigits(UniChar *buffer, int64_t a2, int64_t a3, void *a4, _DWORD *a5)
{
  if (a4 && a5)
  {
    if (a3 <= a2) {
      return 4294949475;
    }
    if (a2 < 0) {
      return 4294949475;
    }
    int64_t v8 = *((void *)buffer + 20);
    if (v8 <= a2) {
      return 4294949475;
    }
    uint64_t v10 = *((void *)buffer + 17);
    if (v10)
    {
      UniChar v11 = *(_WORD *)(v10 + 2 * (*((void *)buffer + 19) + a2));
    }
    else
    {
      uint64_t v12 = *((void *)buffer + 18);
      if (v12)
      {
        UniChar v11 = *(char *)(v12 + *((void *)buffer + 19) + a2);
      }
      else
      {
        if (*((void *)buffer + 22) <= a2 || (int64_t v13 = *((void *)buffer + 21), v13 > a2))
        {
          int64_t v14 = a2 - 4;
          if ((unint64_t)a2 < 4) {
            int64_t v14 = 0;
          }
          if (v14 + 64 < v8) {
            int64_t v8 = v14 + 64;
          }
          *((void *)buffer + 21) = v14;
          *((void *)buffer + 22) = v8;
          v17.location = *((void *)buffer + 19) + v14;
          v17.CFIndex length = v8 - v14;
          CFStringGetCharacters(*((CFStringRef *)buffer + 16), v17, buffer);
          int64_t v13 = *((void *)buffer + 21);
        }
        UniChar v11 = buffer[a2 - v13];
      }
    }
    if ((unsigned __int16)(v11 - 58) < 0xFFF6u)
    {
      return 4294949475;
    }
    else
    {
      uint64_t result = 0;
      *a4 = a2 + 1;
      *a5 = v11 - 48;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t FigMPEG2ParserGetClassID()
{
  return sFigMPEG2ParserClassID;
}

uint64_t RegisterFigMPEG2ParserBaseType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t FigMPEG2ParserGetTypeID()
{
  MEMORY[0x19970EE10](&FigMPEG2ParserGetClassID_sRegisterFigMPEG2ParserBaseTypeOnce, RegisterFigMPEG2ParserBaseType);

  return CMBaseClassGetCFTypeID();
}

uint64_t FigMPEG2ParserCreate(uint64_t a1, int a2, uint64_t a3, char a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  if (!a7 || !a6 || !a9) {
    goto LABEL_18;
  }
  if (FigMPEG2ParserCreate_sCreateParserMallocZoneOnce != -1) {
    dispatch_once(&FigMPEG2ParserCreate_sCreateParserMallocZoneOnce, &__block_literal_global_32);
  }
  long long v16 = (const void *)FigMPEG2ParserCreate_sFigMPEG2ParserZoneAllocator;
  if (!FigMPEG2ParserCreate_sFigMPEG2ParserZoneAllocator) {
    goto LABEL_18;
  }
  int v17 = *(_DWORD *)(a3 + 12);
  if (a2 == 2)
  {
    if ((v17 & 1) == 0 || *(uint64_t *)a3 <= 0) {
      goto LABEL_18;
    }
  }
  else if ((v17 & 1) != 0 && *(void *)a3)
  {
LABEL_18:
    return FigSignalErrorAt();
  }
  uint64_t v24 = 0;
  *a9 = 0;
  MEMORY[0x19970EE10](&FigMPEG2ParserGetClassID_sRegisterFigMPEG2ParserBaseTypeOnce, RegisterFigMPEG2ParserBaseType);
  uint64_t result = CMDerivedObjectCreate();
  if (!result)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    *(void *)uint64_t DerivedStorage = v24;
    *(void *)(DerivedStorage + 40) = CFRetain(v16);
    *(_DWORD *)(DerivedStorage + 100) = a2;
    *(void *)(DerivedStorage + 56) = a6;
    *(void *)(DerivedStorage + 64) = a7;
    *(void *)(DerivedStorage + 72) = a8;
    uint64_t v20 = MEMORY[0x1E4F1F9F8];
    *(_OWORD *)(DerivedStorage + 112) = *MEMORY[0x1E4F1F9F8];
    *(void *)(DerivedStorage + 128) = *(void *)(v20 + 16);
    uint64_t v21 = *(void *)(a3 + 16);
    *(_OWORD *)(DerivedStorage + 136) = *(_OWORD *)a3;
    *(void *)(DerivedStorage + 152) = v21;
    *(void *)(DerivedStorage + 104) = 1000000;
    *(_DWORD *)(DerivedStorage + 48) = 0;
    *(unsigned char *)(DerivedStorage + 449) = a4 & 1;
    *(_DWORD *)(DerivedStorage + 96) = a5;
    *(void *)(DerivedStorage + 16) = 0;
    *(void *)(DerivedStorage + 24) = 0;
    *(void *)(DerivedStorage + 32) = DerivedStorage + 24;
    if (*(unsigned char *)(a3 + 12))
    {
      CMTime v22 = *(CMTime *)a3;
      CMTimeConvertScale(&v23, &v22, 90000, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
      *(void *)(DerivedStorage + 160) = v23.value;
    }
    uint64_t result = 0;
    *(void *)(DerivedStorage + 184) = 0x100000001;
    *a9 = v24;
  }
  return result;
}

malloc_zone_t *__FigMPEG2ParserCreate_block_invoke()
{
  uint64_t result = malloc_create_zone(0, 0);
  gFigMPEG2ParserZone = (uint64_t)result;
  if (result)
  {
    malloc_set_zone_name(result, "FigMPEG2ParserZone");
    CFAllocatorContext v1 = *(CFAllocatorContext *)byte_1EE50AE18;
    uint64_t result = (malloc_zone_t *)CFAllocatorCreate(0, &v1);
    FigMPEG2ParserCreate_sFigMPEG2ParserZoneAllocator = (uint64_t)result;
  }
  return result;
}

CFTypeRef zoneAllocator_CopyDescription()
{
  return CFRetain(@"FigMPEG2ParserZoneAllocator");
}

void *zoneAllocator_Allocate(size_t size)
{
  return malloc_type_zone_malloc((malloc_zone_t *)gFigMPEG2ParserZone, size, 0x3FA98EB8uLL);
}

void *zoneAllocator_Reallocate(void *ptr, size_t size)
{
  return malloc_type_zone_realloc((malloc_zone_t *)gFigMPEG2ParserZone, ptr, size, 0xF5F4E7FBuLL);
}

void zoneAllocator_Deallocate(void *ptr)
{
}

uint64_t FigMPEG2ParserSetBaseTimestamp(uint64_t a1, long long *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v4 = *((_DWORD *)a2 + 3);
  BOOL v5 = (~v4 & 0x11) == 0 || (*((_DWORD *)a2 + 3) & 9) == 9;
  int v6 = ~v4 & 5;
  BOOL v8 = v5 || v6 == 0 || DerivedStorage == 0;
  if (v8 || *(unsigned char *)(DerivedStorage + 8))
  {
    return FigSignalErrorAt();
  }
  else
  {
    long long v10 = *a2;
    *(void *)(DerivedStorage + 128) = *((void *)a2 + 2);
    *(_OWORD *)(DerivedStorage + 112) = v10;
    return 0;
  }
}

uint64_t FigMPEG2ParserSetDecryptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 && (uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage(), !*(unsigned char *)(DerivedStorage + 8)))
  {
    *(void *)(DerivedStorage + 80) = a2;
    *(void *)(DerivedStorage + 88) = a3;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigMPEG2ParserInjectData(const void *a1, OpaqueCMBlockBuffer *a2, uint64_t a3)
{
  if (a1)
  {
    CFRetain(a1);
    if (!a2) {
      goto LABEL_20;
    }
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (*(unsigned char *)(DerivedStorage + 8)) {
      goto LABEL_20;
    }
    uint64_t v8 = DerivedStorage;
    uint64_t v9 = *(uint64_t (**)(uint64_t, OpaqueCMBlockBuffer *, uint64_t))(DerivedStorage + 168);
    if (v9)
    {
LABEL_8:
      uint64_t v10 = v9(v8, a2, a3);
LABEL_9:
      uint64_t v11 = v10;
      CFRelease(a1);
      return v11;
    }
    if (MPEG2TSSniff(a2, *(_DWORD *)(DerivedStorage + 96), (_DWORD *)(DerivedStorage + 48)))
    {
      *(unsigned char *)(v8 + 448) = 1;
      MPEG2TSInitialize(v8);
      goto LABEL_7;
    }
    int v13 = *(_DWORD *)(v8 + 96);
    if ((v13 & 4) != 0)
    {
      if (!MPEG2PSSniff(a2, (int *)(v8 + 48)))
      {
        MPEG2PSInitialize((void *)v8);
        goto LABEL_7;
      }
      int v13 = *(_DWORD *)(v8 + 96);
    }
    if ((v13 & 8) != 0 && !MPEG2VideoSniff(a2))
    {
      *(_DWORD *)(v8 + 48) = 4;
      MPEG2VideoInitialize((void *)v8);
    }
LABEL_7:
    uint64_t v9 = *(uint64_t (**)(uint64_t, OpaqueCMBlockBuffer *, uint64_t))(v8 + 168);
    if (v9) {
      goto LABEL_8;
    }
LABEL_20:
    uint64_t v10 = FigSignalErrorAt();
    goto LABEL_9;
  }
  return FigSignalErrorAt();
}

uint64_t FigMPEG2ParserAddTransportStreamTrack(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4)
{
  if (a1
    && (unsigned __int16)(a2 - 0x1FFF) > 0xE001u
    && (uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage(), !*(unsigned char *)(DerivedStorage + 8))
    && ((unsigned int v8 = *(_DWORD *)(DerivedStorage + 48), v8 < 2) || v8 == 192))
  {
    return MPEG2TSAddTrack(DerivedStorage, a2, a3, a4);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigMPEG2ParserIssueCommands(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (!*(unsigned char *)(DerivedStorage + 8))
    {
      uint64_t v6 = DerivedStorage;
      uint64_t v7 = *(void *)(DerivedStorage + 24);
      if (v7)
      {
        do
        {
          if (a2)
          {
            unsigned int v8 = *(void (**)(uint64_t))(v7 + 864);
            if (v8) {
              v8(v7);
            }
          }
          if ((a2 & 2) != 0) {
            PesReinitialize(v7);
          }
          uint64_t v9 = *(void (**)(uint64_t, void, void, uint64_t))(v7 + 92);
          if (v9) {
            v9(a1, *(unsigned int *)(v7 + 60), *(void *)(v7 + 104), a2);
          }
          uint64_t v7 = *(void *)(v7 + 32);
        }
        while (v7);
        if ((a2 & 2) == 0) {
          return 0;
        }
      }
      else if ((a2 & 2) == 0)
      {
        return 0;
      }
      for (uint64_t i = *(void *)(v6 + 16); i; uint64_t i = *(void *)(i + 8))
      {
        *(void *)(i + 64) = 0;
        *(unsigned char *)(i + 88) = 0;
      }
      uint64_t v11 = *(void (**)(uint64_t))(v6 + 176);
      if (v11) {
        v11(v6);
      }
      return 0;
    }
  }

  return FigSignalErrorAt();
}

uint64_t FigMPEG2ParserInstallCallbacksForTrack(uint64_t a1, int a2, _OWORD *a3, uint64_t a4, unsigned int a5)
{
  if (!a1) {
    goto LABEL_5;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 8) || (a5 & 1) != 0 && *(_DWORD *)(DerivedStorage + 48) == 4) {
    goto LABEL_5;
  }
  uint64_t v12 = *(void *)(DerivedStorage + 24);
  if (!v12) {
    goto LABEL_5;
  }
  uint64_t v13 = 0;
  int v14 = 0;
  int v15 = 0;
  uint64_t result = 0;
  v10.i64[0] = *(void *)&vshl_u16((uint16x4_t)(*(void *)&vdup_n_s16(a5) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFDFFFEFFFFFFFCLL) & 0xFF01FF01FF01FF01;
  unsigned __int32 v21 = vmovn_s16(v10).u32[0];
  do
  {
    if (*(_DWORD *)(v12 + 60) != a2) {
      goto LABEL_52;
    }
    long long v16 = (_OWORD *)(v12 + 84);
    uint64_t v13 = *(void *)v12;
    if (a3)
    {
      *long long v16 = *a3;
    }
    else
    {
      *(void *)long long v16 = 0;
      *(void *)(v12 + 92) = 0;
    }
    *(void *)(v12 + 104) = a4;
    *(_DWORD *)(v12 + 112) = a5;
    *(_DWORD *)(v12 + 116) = v21;
    if (a5)
    {
      uint64_t result = CreatePesPrivateForRawPes((void *)v12);
      if (!result) {
        goto LABEL_50;
      }
      goto LABEL_21;
    }
    char v17 = 0;
    int v18 = *(_DWORD *)(v12 + 56);
    if (v18 <= 1701143346)
    {
      if (v18 <= 1700880738)
      {
        if (v18 == 1633891104) {
          goto LABEL_40;
        }
        if (v18 != 1633973363)
        {
          if (v18 != 1685353248) {
            goto LABEL_49;
          }
          uint64_t result = CreatePesPrivateForDTS((void *)v12);
          goto LABEL_48;
        }
      }
      else
      {
        if (v18 > 1700886114)
        {
          if (v18 == 1700886115)
          {
LABEL_44:
            uint64_t result = CreatePesPrivateForH264((void *)v12);
            goto LABEL_48;
          }
          int v20 = 1700998451;
          goto LABEL_39;
        }
        if (v18 != 1700880739)
        {
          int v20 = 1700881203;
LABEL_39:
          if (v18 != v20) {
            goto LABEL_49;
          }
          goto LABEL_40;
        }
      }
      uint64_t result = CreatePesPrivateForADTS((void *)v12);
      goto LABEL_48;
    }
    if (v18 <= 1836476771)
    {
      if (v18 > 1819304812)
      {
        if (v18 == 1819304813)
        {
          uint64_t result = CreatePesPrivateForLPCM((void *)v12);
        }
        else
        {
          if (v18 != 1835103588) {
            goto LABEL_49;
          }
          uint64_t result = CreatePesPrivateForMP3((void *)v12);
        }
        goto LABEL_48;
      }
      if (v18 != 1701143347)
      {
        int v19 = 1748121140;
LABEL_43:
        if (v18 != v19) {
          goto LABEL_49;
        }
        goto LABEL_44;
      }
LABEL_40:
      uint64_t result = CreatePesPrivateForDolby(v12);
LABEL_48:
      char v17 = 1;
      goto LABEL_49;
    }
    if (v18 <= 1886614577)
    {
      if (v18 == 1836476772)
      {
        uint64_t result = CreatePesPrivateForMPEG2Video((void *)v12);
      }
      else
      {
        if (v18 != 1886612592) {
          goto LABEL_49;
        }
        uint64_t result = CreatePesPrivateForPSLPCM((void *)v12);
      }
      goto LABEL_48;
    }
    if (v18 != 1886614578)
    {
      int v19 = 2053207651;
      goto LABEL_43;
    }
    uint64_t result = FigSignalErrorAt();
    char v17 = 0;
LABEL_49:
    *(unsigned char *)(v12 + 80) = v17;
    if (!result)
    {
LABEL_50:
      ++v15;
      goto LABEL_51;
    }
LABEL_21:
    *(void *)long long v16 = 0;
    *(void *)(v12 + 92) = 0;
LABEL_51:
    int v14 = 1;
LABEL_52:
    if (*(unsigned char *)(v12 + 80)) {
      ++v15;
    }
    uint64_t v12 = *(void *)(v12 + 32);
  }
  while (v12);
  if (!v14)
  {
LABEL_5:
    return FigSignalErrorAt();
  }
  if (v13) {
    *(_DWORD *)(v13 + 72) = v15;
  }
  return result;
}

uint64_t FigMPEG2ParserCopyAudioConfigurationForTrack(uint64_t a1, int a2, void *a3, void *a4)
{
  if (a1
    && a3
    && a4
    && (uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage(), !*(unsigned char *)(DerivedStorage + 8))
    && (*a3 = 0, *a4 = 0, (uint64_t v8 = *(void *)(DerivedStorage + 24)) != 0))
  {
    while (*(_DWORD *)(v8 + 60) != a2)
    {
      uint64_t v8 = *(void *)(v8 + 32);
      if (!v8) {
        goto LABEL_8;
      }
    }
    if (*(void *)(v8 + 824))
    {
      int16x8_t v10 = malloc_type_malloc(*(void *)(v8 + 832), 0xD496CD4uLL);
      *a3 = v10;
      if (v10)
      {
        memcpy(v10, *(const void **)(v8 + 824), *(void *)(v8 + 832));
        uint64_t result = 0;
        *a4 = *(void *)(v8 + 832);
      }
      else
      {
        return 4294954510;
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
LABEL_8:
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t FigMPEG2ParserGetStreamType(uint64_t a1, _DWORD *a2)
{
  if (a1 && a2 && (uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage(), !*(unsigned char *)(DerivedStorage + 8)))
  {
    *a2 = *(_DWORD *)(DerivedStorage + 48);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigMPEG2ParserCopyProgramList(uint64_t a1, CFArrayRef *a2)
{
  if (!a1) {
    goto LABEL_27;
  }
  if (!a2) {
    goto LABEL_27;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 8)) {
    goto LABEL_27;
  }
  uint64_t v4 = DerivedStorage;
  uint64_t v5 = *(void *)(DerivedStorage + 16);
  if (!v5)
  {
    uint64_t v14 = 0;
    *a2 = 0;
    return v14;
  }
  LODWORD(v6) = 0;
  do
  {
    size_t v6 = (v6 + 1);
    uint64_t v5 = *(void *)(v5 + 8);
  }
  while (v5);
  *a2 = 0;
  if (!v6) {
    return 0;
  }
  uint64_t v7 = (const void **)malloc_type_calloc(8uLL, v6, 0x595630E5uLL);
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)(v4 + 16);
    if (v9)
    {
      int v10 = 0;
      CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      while (1)
      {
        CFNumberRef v12 = CFNumberCreate(v11, kCFNumberSInt32Type, (const void *)(v9 + 40));
        v8[v10] = v12;
        if (!v12) {
          break;
        }
        ++v10;
        uint64_t v9 = *(void *)(v9 + 8);
        if (!v9) {
          goto LABEL_13;
        }
      }
      uint64_t v14 = 12;
    }
    else
    {
LABEL_13:
      CFArrayRef v13 = CFArrayCreate(*(CFAllocatorRef *)(v4 + 40), v8, v6, MEMORY[0x1E4F1D510]);
      *a2 = v13;
      if (v13) {
        uint64_t v14 = 0;
      }
      else {
        uint64_t v14 = 12;
      }
    }
    unint64_t v15 = 0;
    if (v6 <= 1) {
      uint64_t v16 = 1;
    }
    else {
      uint64_t v16 = v6;
    }
    uint64_t v17 = 8 * v16;
    do
    {
      int v18 = v8[v15 / 8];
      if (v18) {
        CFRelease(v18);
      }
      v15 += 8;
    }
    while (v17 != v15);
    free(v8);
    return v14;
  }
LABEL_27:

  return FigSignalErrorAt();
}

uint64_t FigMPEG2ParserCopyTrackList(uint64_t a1, int a2, CFArrayRef *a3, CFArrayRef *a4)
{
  if (a1)
  {
    if (a3)
    {
      if (a4)
      {
        uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
        if (!*(unsigned char *)(DerivedStorage + 8))
        {
          uint64_t v8 = DerivedStorage;
          PrograCFIndex m = FindProgram(DerivedStorage, a2);
          if (Program)
          {
            uint64_t v10 = Program;
            uint64_t v11 = *(void *)(Program + 24);
            if (!v11)
            {
              uint64_t v22 = 0;
              *a4 = 0;
              *a3 = 0;
              return v22;
            }
            LODWORD(v12) = 0;
            do
            {
              size_t v12 = (v12 + 1);
              uint64_t v11 = *(void *)(v11 + 16);
            }
            while (v11);
            *a4 = 0;
            *a3 = 0;
            if (v12)
            {
              CFArrayRef v13 = (const void **)malloc_type_calloc(8uLL, v12, 0x8773047FuLL);
              uint64_t v14 = (const void **)malloc_type_calloc(8uLL, v12, 0x995BC880uLL);
              unint64_t v15 = v14;
              if (v13 && v14)
              {
                uint64_t v16 = *(void **)(v10 + 24);
                if (v16)
                {
                  int v17 = 0;
                  CFAllocatorRef v18 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
                  while (1)
                  {
                    v13[v17] = CFNumberCreate(v18, kCFNumberSInt32Type, (char *)v16 + 60);
                    CFNumberRef v19 = CFNumberCreate(v18, kCFNumberSInt32Type, v16 + 7);
                    v15[v17] = v19;
                    if (!v13[v17] || v19 == 0) {
                      break;
                    }
                    ++v17;
                    uint64_t v16 = (void *)v16[2];
                    if (!v16) {
                      goto LABEL_19;
                    }
                  }
                }
                else
                {
LABEL_19:
                  CFArrayRef v21 = CFArrayCreate(*(CFAllocatorRef *)(v8 + 40), v13, v12, MEMORY[0x1E4F1D510]);
                  *a3 = v21;
                  if (v21)
                  {
                    *a4 = CFArrayCreate(*(CFAllocatorRef *)(v8 + 40), v15, v12, MEMORY[0x1E4F1D510]);
                    if (*a3)
                    {
                      uint64_t v22 = 0;
                      goto LABEL_25;
                    }
                    CFRelease(0);
                    *a3 = 0;
                  }
                }
                uint64_t v22 = FigSignalErrorAt();
              }
              else
              {
                uint64_t v22 = FigSignalErrorAt();
                if (!v13)
                {
LABEL_33:
                  if (v15)
                  {
                    unint64_t v27 = 0;
                    if (v12 <= 1) {
                      uint64_t v28 = 1;
                    }
                    else {
                      uint64_t v28 = v12;
                    }
                    uint64_t v29 = 8 * v28;
                    do
                    {
                      CFRange v30 = v15[v27 / 8];
                      if (v30) {
                        CFRelease(v30);
                      }
                      v27 += 8;
                    }
                    while (v29 != v27);
                    free(v15);
                  }
                  return v22;
                }
              }
LABEL_25:
              unint64_t v23 = 0;
              if (v12 <= 1) {
                uint64_t v24 = 1;
              }
              else {
                uint64_t v24 = v12;
              }
              uint64_t v25 = 8 * v24;
              do
              {
                CFIndex v26 = v13[v23 / 8];
                if (v26) {
                  CFRelease(v26);
                }
                v23 += 8;
              }
              while (v25 != v23);
              free(v13);
              goto LABEL_33;
            }
          }
          return 0;
        }
      }
    }
  }

  return FigSignalErrorAt();
}

uint64_t FigMPEG2ParserSniff(OpaqueCMBlockBuffer *a1, char a2, int *a3)
{
  if (a1 && a3)
  {
    *a3 = 0;
    if ((a2 & 3) != 0 && MPEG2TSSniff(a1, a2, a3)) {
      return 0;
    }
    if ((a2 & 4) != 0)
    {
      uint64_t result = MPEG2PSSniff(a1, a3);
      if (!result) {
        return result;
      }
    }
    else
    {
      uint64_t result = 4294954325;
    }
    if ((a2 & 8) != 0)
    {
      uint64_t result = MPEG2VideoSniff(a1);
      if (!result) {
        *a3 = 4;
      }
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t FigMPEG2ParserGetFrameRateForVideoTrack(uint64_t a1, int a2, float *a3)
{
  if (!a1) {
    goto LABEL_12;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 8)) {
    goto LABEL_12;
  }
  uint64_t v6 = *(void *)(DerivedStorage + 24);
  if (!v6) {
    goto LABEL_12;
  }
  while (*(_DWORD *)(v6 + 60) != a2)
  {
    uint64_t v6 = *(void *)(v6 + 32);
    if (!v6) {
      goto LABEL_12;
    }
  }
  unsigned int v7 = *(_DWORD *)(v6 + 808);
  if (v7 && (unsigned int v8 = *(_DWORD *)(v6 + 804)) != 0)
  {
    *a3 = (float)v8 / (float)v7;
    return 0;
  }
  else
  {
LABEL_12:
    return FigSignalErrorAt();
  }
}

uint64_t FigMPEG2ParserGetTimeCodeValueForVideoTrack(uint64_t a1, int a2, _DWORD *a3)
{
  if (!a1) {
    goto LABEL_8;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 8)) {
    goto LABEL_8;
  }
  uint64_t v6 = *(void *)(DerivedStorage + 24);
  if (!v6) {
    goto LABEL_8;
  }
  while (*(_DWORD *)(v6 + 60) != a2)
  {
    uint64_t v6 = *(void *)(v6 + 32);
    if (!v6) {
      goto LABEL_8;
    }
  }
  int v8 = *(_DWORD *)(v6 + 604);
  if (v8)
  {
    *a3 = v8;
    return 0;
  }
  else
  {
LABEL_8:
    return FigSignalErrorAt();
  }
}

CFStringRef FigMPEG2ParserBaseCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigMPEG2Parser %p]", a1);
}

uint64_t FigMPEG2ParserInvalidateWork()
{
  *(unsigned char *)(CMBaseObjectGetDerivedStorage() + 8) = 1;
  return 0;
}

void FigMPEG2ParserFinalize()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  *(unsigned char *)(CMBaseObjectGetDerivedStorage() + 8) = 1;
  while (1)
  {
    CFAllocatorContext v1 = (void *)DerivedStorage[2];
    if (!v1) {
      break;
    }
    uint64_t v2 = v1[1];
    if (v2) {
      *(void *)(v2 + 16) = v1[2];
    }
    *(void *)v1[2] = v2;
    free(v1);
  }
  while (1)
  {
    uint64_t v7 = DerivedStorage[3];
    if (!v7) {
      break;
    }
    PesCleanOutData(DerivedStorage[3]);
    free(*(void **)(v7 + 824));
    uint64_t v3 = *(void **)(v7 + 48);
    if (v3)
    {
      uint64_t v4 = *(void (**)(uint64_t))(v7 + 856);
      if (v4) {
        v4(v7);
      }
      else {
        free(v3);
      }
    }
    uint64_t v5 = *(void *)(v7 + 32);
    uint64_t v6 = *(void **)(v7 + 40);
    if (v5)
    {
      *(void *)(v5 + 40) = v6;
      uint64_t v6 = *(void **)(v7 + 40);
    }
    else
    {
      DerivedStorage[4] = v6;
    }
    *uint64_t v6 = v5;
    PesFrameHeaderDestroy((void *)(v7 + 544));
    free((void *)v7);
  }
  int v8 = (const void *)DerivedStorage[57];
  if (v8)
  {
    CFRelease(v8);
    DerivedStorage[57] = 0;
  }
  uint64_t v9 = (const void *)DerivedStorage[52];
  if (v9)
  {
    CFRelease(v9);
    DerivedStorage[52] = 0;
  }
  uint64_t v10 = (const void *)DerivedStorage[5];
  if (v10)
  {
    CFRelease(v10);
    DerivedStorage[5] = 0;
  }
}

__CFString *FigMPEG2ParserCopyDebugDescription()
{
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"FigMPEG2Parser");
  return Mutable;
}

uint64_t FigMPEG2ParserCopyProperty()
{
  CMBaseObjectGetDerivedStorage();

  return FigSignalErrorAt();
}

uint64_t FigMPEG2ParserSetProperty()
{
  return FigSignalErrorAt();
}

uint64_t FigBufferedAirPlayAudioRenderPipelineCreate(const __CFAllocator *a1, const void *a2, const __CFDictionary *a3, CMTimeValue *a4)
{
  uint64_t v170 = *MEMORY[0x1E4F143B8];
  int64_t value = 0;
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (a4)
  {
    v109.int64_t value = 0;
    FigRenderPipelineGetClassID();
    CFAllocatorRef alloc = a1;
    uint64_t v7 = CMDerivedObjectCreate();
    if (v7)
    {
      uint64_t v46 = v7;
    }
    else
    {
      uint64_t v99 = a4;
      CMTimeValue v8 = v109.value;
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      *(void *)(DerivedStorage + 48) = FigSimpleMutexCreate();
      *(void *)(DerivedStorage + 8) = dispatch_queue_create("com.apple.coremedia.bufferedAirPlayRenderPipeline.notification", 0);
      *(void *)(DerivedStorage + 16) = dispatch_queue_create("com.apple.coremedia.bufferedAirPlayRenderPipeline.baoNotificationQueue", 0);
      *(void *)(DerivedStorage + 24) = dispatch_queue_create("com.apple.coremedia.bufferedAirPlayRenderPipeline.mixerNotificationQueue", 0);
      *(void *)(DerivedStorage + 32) = FigDispatchQueueCreateWithPriority();
      *(void *)(DerivedStorage + 40) = dispatch_queue_create("com.apple.coremedia.bufferedAirPlayRenderPipeline.processqueue", 0);
      long long v10 = *MEMORY[0x1E4F1F9F8];
      uint64_t v11 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
      *(void *)(DerivedStorage + 176) = v11;
      *(_OWORD *)(DerivedStorage + 184) = v10;
      *(void *)(DerivedStorage + 200) = v11;
      *(_OWORD *)(DerivedStorage + 208) = v10;
      *(void *)(DerivedStorage + 224) = v11;
      size_t v12 = (_OWORD *)MEMORY[0x1E4F1FA48];
      *(void *)(DerivedStorage + 276) = *(void *)(MEMORY[0x1E4F1FA48] + 16);
      *(_OWORD *)(DerivedStorage + 260) = *v12;
      *(void *)(DerivedStorage + 240) = 0;
      *(unsigned char *)uint64_t DerivedStorage = 0;
      *(void *)(DerivedStorage + 360) = 0;
      *(unsigned char *)(DerivedStorage + 112) = 0;
      *(_OWORD *)(DerivedStorage + 144) = xmmword_1949974A0;
      *(_OWORD *)(DerivedStorage + 160) = v10;
      *(void *)(DerivedStorage + 104) = 0;
      *(unsigned char *)(DerivedStorage + 384) = 0;
      *(void *)(DerivedStorage + 80) = 0;
      *(void *)(DerivedStorage + 288) = 0;
      *(void *)(DerivedStorage + 296) = DerivedStorage + 288;
      *(void *)(DerivedStorage + 304) = 0;
      *(unsigned char *)(DerivedStorage + 408) = 0;
      if (!a3)
      {
        int v18 = FigBufferedAirPlayAudioRenderPipelineCreate_sLogIDPostFix++;
        snprintf((char *)(DerivedStorage + 408), 0x13uLL, "BuffRP-%u", v18);
        uint64_t v13 = (uint64_t)a1;
        CFStringRef v15 = 0;
        int64_t value = (void *)CFStringCreateWithCString(a1, (const char *)(DerivedStorage + 408), 0x8000100u);
        goto LABEL_15;
      }
      uint64_t v13 = (uint64_t)a1;
      if (!CFDictionaryGetValueIfPresent(a3, @"LoggingID", (const void **)&value))
      {
        int v19 = FigBufferedAirPlayAudioRenderPipelineCreate_sLogIDPostFix++;
        snprintf((char *)(DerivedStorage + 408), 0x13uLL, "BuffRP-%u", v19);
        CFStringRef v15 = 0;
        goto LABEL_12;
      }
      CFMutableDictionaryRef MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, (CFStringRef)value);
      if (MutableCopy)
      {
        CFStringRef v15 = MutableCopy;
        uint64_t v16 = FigBufferedAirPlayAudioRenderPipelineCreate_sLogIDPostFix++;
        CFStringAppendFormat(MutableCopy, 0, @".%u", v16);
        CFStringGetCString(v15, (char *)(DerivedStorage + 408), 20, 0x8000100u);
LABEL_12:
        int64_t value = (void *)CFStringCreateWithCString(a1, (const char *)(DerivedStorage + 408), 0x8000100u);
        int v20 = (CFTypeRef *)(DerivedStorage + 368);
        if (CFDictionaryGetValueIfPresent(a3, @"AudioSession", (const void **)(DerivedStorage + 368)) && *v20) {
          CFRetain(*v20);
        }
LABEL_15:
        uint64_t Factory = FigBufferedAirPlayOutputProxyCreateFactory(v13, a2, (void *)(DerivedStorage + 392));
        if (Factory) {
          goto LABEL_110;
        }
        if (dword_1E9351028)
        {
          LODWORD(cf) = 0;
          type[0] = OS_LOG_TYPE_DEFAULT;
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v23 = cf;
          if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type[0])) {
            unsigned int v24 = v23;
          }
          else {
            unsigned int v24 = v23 & 0xFFFFFFFE;
          }
          if (v24)
          {
            uint64_t v25 = *(void *)(DerivedStorage + 392);
            *(_DWORD *)int v159 = 136316418;
            *(void *)&v159[4] = "FigBufferedAirPlayAudioRenderPipelineCreate";
            __int16 v160 = 2048;
            uint64_t v161 = 0;
            __int16 v162 = 2082;
            CMTime v163 = "";
            __int16 v164 = 2048;
            uint64_t v165 = v25;
            __int16 v166 = 2048;
            CMTime v167 = a2;
            __int16 v168 = 2112;
            CMTimeRange v169 = value;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        uint64_t Factory = FigSampleBufferConsumerCreateForSampleBufferConsumer("consumerToBAO", (void *)(DerivedStorage + 104));
        if (Factory)
        {
LABEL_110:
          uint64_t v46 = Factory;
          CFDictionaryRef v45 = 0;
          if (!v15) {
            goto LABEL_105;
          }
        }
        else
        {
          uint64_t v26 = *(void *)(DerivedStorage + 392);
          uint64_t v27 = *(void *)(DerivedStorage + 104);
          uint64_t v28 = value;
          uint64_t v29 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v29) {
            uint64_t v30 = v29;
          }
          else {
            uint64_t v30 = 0;
          }
          int v31 = *(uint64_t (**)(uint64_t, CMTimeValue, uint64_t, void *, uint64_t))(v30 + 96);
          if (v31)
          {
            CFStringRef v98 = v15;
            uint64_t v32 = v31(v26, v8, v27, v28, DerivedStorage + 400);
            if (v32) {
              goto LABEL_120;
            }
            double v33 = (void *)CMBaseObjectGetDerivedStorage();
            if (!v33[49] || (int v34 = v33, v33[16]))
            {
              uint64_t v46 = FigSignalErrorAt();
              if (v46) {
                goto LABEL_121;
              }
LABEL_56:
              uint64_t v50 = CFDictionaryGetValue(a3, @"FormatDescription");
              if (v50)
              {
                int v51 = v50;
                uint64_t v52 = CMBaseObjectGetDerivedStorage();
                *(void *)os_log_type_t type = 0;
                CFTypeRef cf = 0;
                uint64_t v105 = 0;
                CFTypeRef v106 = 0;
                uint64_t RichestDecodableFormatAndChannelLayout = FigEndpointStreamAudioFormatDescriptionCreateWithCMFormatDescription();
                if (!RichestDecodableFormatAndChannelLayout)
                {
                  uint64_t v54 = *(void *)(v52 + 392);
                  uint64_t v55 = *(void *)(v52 + 400);
                  CFTypeRef v56 = cf;
                  uint64_t v57 = *(void *)(CMBaseObjectGetVTable() + 16);
                  if (v57) {
                    uint64_t v58 = v57;
                  }
                  else {
                    uint64_t v58 = 0;
                  }
                  int v59 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef, os_log_type_t *))(v58 + 80);
                  if (!v59)
                  {
                    uint64_t v46 = 4294954514;
                    goto LABEL_79;
                  }
                  uint64_t RichestDecodableFormatAndChannelLayout = v59(v54, v55, v56, type);
                  if (!RichestDecodableFormatAndChannelLayout)
                  {
                    uint64_t RichestDecodableFormatAndChannelLayout = CMAudioFormatDescriptionGetRichestDecodableFormatAndChannelLayout();
                    if (!RichestDecodableFormatAndChannelLayout)
                    {
                      if (v106)
                      {
                        uint64_t ASBD = FigEndpointStreamAudioFormatDescriptionGetASBD();
                        if (ASBD)
                        {
                          uint64_t v61 = ASBD;
                          int ChannelLayoutTag = FigEndpointStreamAudioFormatDescriptionGetChannelLayoutTag();
                          if (dword_1E9351028)
                          {
                            int v63 = ChannelLayoutTag;
                            unsigned int v104 = 0;
                            os_log_type_t v103 = OS_LOG_TYPE_DEFAULT;
                            CMTime v64 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                            unsigned int v65 = v104;
                            if (os_log_type_enabled(v64, v103)) {
                              unsigned int v66 = v65;
                            }
                            else {
                              unsigned int v66 = v65 & 0xFFFFFFFE;
                            }
                            if (v66)
                            {
                              int v97 = v63;
                              uint64_t v67 = *v106;
                              uint64_t v68 = *(void *)v61;
                              int v70 = *((_DWORD *)v106 + 4);
                              int v69 = *((_DWORD *)v106 + 5);
                              int v72 = *(_DWORD *)(v61 + 16);
                              int v71 = *(_DWORD *)(v61 + 20);
                              int v73 = *((_DWORD *)v106 + 6);
                              int v74 = *((_DWORD *)v106 + 7);
                              int v75 = *(_DWORD *)(v61 + 24);
                              int v76 = *(_DWORD *)(v61 + 28);
                              int v77 = *((_DWORD *)v106 + 8);
                              int v78 = *(_DWORD *)(v61 + 32);
                              unsigned int v79 = *((_DWORD *)v106 + 2);
                              int v80 = *((_DWORD *)v106 + 3);
                              unsigned int v81 = *(_DWORD *)(v61 + 8);
                              int v82 = *(_DWORD *)(v61 + 12);
                              unsigned int v83 = HIBYTE(v81);
                              int v84 = BYTE2(v81);
                              int v85 = BYTE1(v81);
                              int v86 = v81;
                              int v87 = (int)v105;
                              if (v105) {
                                int v87 = *v105;
                              }
                              LODWORD(v109.CFDictionarySetValue(theDict, key, value) = 136321794;
                              *(CMTimeValue *)((char *)&v109.value + 4) = (CMTimeValue)"fbaprp_copyOutputFormatDataFromCo"
                                                                                       "ntentFormatDescription";
                              LOWORD(v109.flags) = 2048;
                              *(void *)((char *)&v109.flags + 2) = 0;
                              HIWORD(v109.epoch) = 2082;
                              uint64_t v110 = "";
                              __int16 v111 = 2048;
                              uint64_t v112 = v67;
                              __int16 v113 = 2048;
                              uint64_t v114 = v68;
                              __int16 v115 = 1024;
                              int v116 = v74;
                              __int16 v117 = 1024;
                              int v118 = v76;
                              __int16 v119 = 1024;
                              int v120 = v70;
                              __int16 v121 = 1024;
                              int v122 = v72;
                              __int16 v123 = 1024;
                              int v124 = v69;
                              __int16 v125 = 1024;
                              int v126 = v71;
                              __int16 v127 = 1024;
                              int v128 = v73;
                              __int16 v129 = 1024;
                              int v130 = v75;
                              __int16 v131 = 1024;
                              int v132 = v77;
                              __int16 v133 = 1024;
                              int v134 = v78;
                              __int16 v135 = 1024;
                              int v136 = v80;
                              __int16 v137 = 1024;
                              int v138 = v82;
                              __int16 v139 = 1024;
                              unsigned int v140 = HIBYTE(v79);
                              __int16 v141 = 1024;
                              int v142 = BYTE2(v79);
                              __int16 v143 = 1024;
                              int v144 = BYTE1(v79);
                              __int16 v145 = 1024;
                              int v146 = v79;
                              __int16 v147 = 1024;
                              unsigned int v148 = v83;
                              __int16 v149 = 1024;
                              int v150 = v84;
                              __int16 v151 = 1024;
                              int v152 = v85;
                              __int16 v153 = 1024;
                              int v154 = v86;
                              __int16 v155 = 1024;
                              int v156 = v87;
                              __int16 v157 = 1024;
                              int v158 = v97;
                              _os_log_send_and_compose_impl();
                            }
                            fig_log_call_emit_and_clean_up_after_send_and_compose();
                          }
                          uint64_t v46 = 0;
                          *(void *)(DerivedStorage + 80) = *(void *)type;
                          *(void *)os_log_type_t type = 0;
LABEL_79:
                          if (cf) {
                            CFRelease(cf);
                          }
                          if (*(void *)type) {
                            CFRelease(*(CFTypeRef *)type);
                          }
                          if (!v46)
                          {
                            uint64_t v88 = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
                            CFDictionaryRef v45 = v88;
                            if (v88)
                            {
                              CFDictionarySetValue(v88, @"LoggingID", value);
                              uint64_t v89 = FigBufferedAirPlaySubPipeManagerForRenderPipelineCreate(alloc, *(const void **)(DerivedStorage + 104), a2, v51, a3, v45, (void *)(DerivedStorage + 376));
                              if (v89) {
                                goto LABEL_112;
                              }
                              if (dword_1E9351028)
                              {
                                LODWORD(cf) = 0;
                                type[0] = OS_LOG_TYPE_DEFAULT;
                                CMItemCount v90 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                                unsigned int v91 = cf;
                                if (os_log_type_enabled(v90, type[0])) {
                                  unsigned int v92 = v91;
                                }
                                else {
                                  unsigned int v92 = v91 & 0xFFFFFFFE;
                                }
                                if (v92)
                                {
                                  uint64_t v93 = *(void *)(DerivedStorage + 376);
                                  *(_DWORD *)int v159 = 136315906;
                                  *(void *)&v159[4] = "FigBufferedAirPlayAudioRenderPipelineCreate";
                                  __int16 v160 = 2048;
                                  uint64_t v161 = 0;
                                  __int16 v162 = 2082;
                                  CMTime v163 = "";
                                  __int16 v164 = 2048;
                                  uint64_t v165 = v93;
                                  _os_log_send_and_compose_impl();
                                }
                                fig_log_call_emit_and_clean_up_after_send_and_compose();
                              }
                              uint64_t v89 = fbaprp_configureSubPipeManager();
                              if (v89
                                || (CMNotificationCenterGetDefaultLocalCenter(),
                                    uint64_t v89 = FigNotificationCenterAddWeakListeners(),
                                    v89))
                              {
LABEL_112:
                                uint64_t v46 = v89;
                              }
                              else
                              {
                                if (dword_1E9351028)
                                {
                                  LODWORD(cf) = 0;
                                  type[0] = OS_LOG_TYPE_DEFAULT;
                                  CMTime v94 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                                  unsigned int v95 = cf;
                                  if (os_log_type_enabled(v94, type[0])) {
                                    unsigned int v96 = v95;
                                  }
                                  else {
                                    unsigned int v96 = v95 & 0xFFFFFFFE;
                                  }
                                  if (v96)
                                  {
                                    *(_DWORD *)int v159 = 136315650;
                                    *(void *)&v159[4] = "FigBufferedAirPlayAudioRenderPipelineCreate";
                                    __int16 v160 = 2048;
                                    uint64_t v161 = 0;
                                    __int16 v162 = 2082;
                                    CMTime v163 = "";
                                    _os_log_send_and_compose_impl();
                                  }
                                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                                }
                                uint64_t v46 = 0;
                                *uint64_t v99 = v8;
                              }
                            }
                            else
                            {
                              uint64_t v46 = 4294954510;
                            }
LABEL_103:
                            CFStringRef v15 = v98;
                            if (!v98) {
                              goto LABEL_105;
                            }
                            goto LABEL_104;
                          }
LABEL_121:
                          CFDictionaryRef v45 = 0;
                          goto LABEL_103;
                        }
                      }
                      uint64_t RichestDecodableFormatAndChannelLayout = FigSignalErrorAt();
                    }
                  }
                }
                uint64_t v46 = RichestDecodableFormatAndChannelLayout;
                goto LABEL_79;
              }
              uint64_t v32 = FigSignalErrorAt();
LABEL_120:
              uint64_t v46 = v32;
              goto LABEL_121;
            }
            MEMORY[0x19970E910](v33[6]);
            uint64_t v35 = CMBaseObjectGetDerivedStorage();
            *(void *)int v159 = 0;
            if (*(unsigned char *)v35)
            {
              uint64_t v46 = FigSignalErrorAt();
              goto LABEL_55;
            }
            uint64_t v36 = v35;
            uint64_t v37 = (CMBufferQueueRef *)(v35 + 128);
            if (*(void *)(v35 + 128) || *(void *)(v35 + 56))
            {
              uint64_t v40 = FigSignalErrorAt();
            }
            else
            {
              UInt32 = CFDictionaryGetValue(a3, @"FormatDescription");
              if (!UInt32)
              {
                uint64_t v49 = FigSignalErrorAt();
LABEL_50:
                uint64_t v46 = v49;
                goto LABEL_51;
              }
              CallbacksForUnsortedSampleBuffers = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
              uint64_t v40 = CMBufferQueueCreate(alloc, 0, CallbacksForUnsortedSampleBuffers, v37);
              if (!v40)
              {
                CFMutableArrayRef Mutable = CFArrayCreateMutable(alloc, 0, MEMORY[0x1E4F1D510]);
                *(void *)(v36 + 88) = Mutable;
                if (!Mutable)
                {
                  UInt32 = 0;
                  uint64_t v46 = 4294954443;
                  goto LABEL_51;
                }
                uint64_t CMBaseObject = FigBufferedAirPlayOutputProxyGetCMBaseObject(*(void *)(v36 + 392));
                uint64_t v43 = *(void *)(CMBaseObjectGetVTable() + 8);
                if (v43) {
                  uint64_t v44 = v43;
                }
                else {
                  uint64_t v44 = 0;
                }
                long long v47 = *(uint64_t (**)(uint64_t, __CFString *, void, unsigned char *))(v44 + 48);
                if (!v47)
                {
                  UInt32 = 0;
                  uint64_t v46 = 4294954514;
LABEL_51:
                  if (*(void *)v159) {
                    CFRelease(*(CFTypeRef *)v159);
                  }
                  if (UInt32) {
                    CFRelease(UInt32);
                  }
LABEL_55:
                  MEMORY[0x19970E930](v34[6]);
                  if (v46) {
                    goto LABEL_121;
                  }
                  goto LABEL_56;
                }
                uint64_t v40 = v47(CMBaseObject, @"PrerollDuration", *MEMORY[0x1E4F1CF80], v159);
                if (!v40)
                {
                  CMTimeMakeFromDictionary(&v109, *(CFDictionaryRef *)v159);
                  *(CMTime *)(v36 + 336) = v109;
                  *(void *)(v36 + 120) = CFRetain(UInt32);
                  uint64_t v48 = CMBaseObjectGetDerivedStorage();
                  *(void *)(v48 + 320) = (int)FigGetCFPreferenceNumberWithDefault();
                  uint64_t v40 = fbaprp_setupBufferedAirPlayMediaProcessor();
                  if (!v40)
                  {
                    if (FigGetCFPreferenceNumberWithDefault())
                    {
                      UInt32 = (const void *)FigCFNumberCreateUInt32();
                      FigMediaProcessorSetProperty(*(void *)(v36 + 56), @"ActivitySchedulerPriority", (uint64_t)UInt32);
                    }
                    else
                    {
                      UInt32 = 0;
                    }
                    uint64_t v49 = FigMediaProcessorGo(*(void *)(v36 + 56));
                    goto LABEL_50;
                  }
                }
              }
            }
            uint64_t v46 = v40;
            UInt32 = 0;
            goto LABEL_51;
          }
          CFDictionaryRef v45 = 0;
          uint64_t v46 = 4294954514;
          if (!v15)
          {
LABEL_105:
            if (v45) {
              CFRelease(v45);
            }
            goto LABEL_107;
          }
        }
LABEL_104:
        CFRelease(v15);
        goto LABEL_105;
      }
      uint64_t v46 = 4294954510;
    }
LABEL_107:
    if (value) {
      CFRelease(value);
    }
    return v46;
  }

  return FigSignalErrorAt();
}

uint64_t fbaprp_configureSubPipeManager()
{
  cf[22] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf[0] = 0;
  uint64_t CMBaseObject = FigBufferedAirPlaySubPipeManagerForRenderPipelineGetCMBaseObject(*(void *)(DerivedStorage + 376));
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(uint64_t (**)(uint64_t, __CFString *, void, CFTypeRef *))(v3 + 48);
  if (!v4) {
    goto LABEL_13;
  }
  uint64_t v5 = v4(CMBaseObject, @"SourceSampleBufferConsumer", *MEMORY[0x1E4F1CF80], cf);
  if (!v5)
  {
    uint64_t v6 = *(void *)(DerivedStorage + 64);
    CFTypeRef v7 = cf[0];
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    long long v10 = *(uint64_t (**)(uint64_t, __CFString *, CFTypeRef))(v9 + 56);
    if (v10)
    {
      uint64_t v5 = v10(v6, @"DownstreamConsumer", v7);
      if (!v5)
      {
        if (dword_1E9351028)
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        CMNotificationCenterGetDefaultLocalCenter();
        uint64_t v5 = FigNotificationCenterAddWeakListeners();
      }
      goto LABEL_18;
    }
LABEL_13:
    uint64_t v12 = 4294954514;
    goto LABEL_14;
  }
LABEL_18:
  uint64_t v12 = v5;
LABEL_14:
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  return v12;
}

uint64_t FigBufferedAirPlayAudioRenderPipelineInvalidate(uint64_t a1)
{
  if (!*(unsigned char *)CMBaseObjectGetDerivedStorage())
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    uint64_t v49 = 0;
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 48));
    if (*(unsigned char *)DerivedStorage)
    {
      FigSignalErrorAt();
      MEMORY[0x19970E930](*(void *)(DerivedStorage + 48));
    }
    else
    {
      if (*(void *)(DerivedStorage + 56))
      {
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterRemoveWeakListeners();
        FigMediaProcessorStop(*(void *)(DerivedStorage + 56));
        FigMediaProcessorWaitUntilCompletelyStopped(*(void *)(DerivedStorage + 56));
      }
      uint64_t v3 = *(opaqueCMBufferQueue **)(DerivedStorage + 128);
      if (v3) {
        CMBufferQueueReset(v3);
      }
      uint64_t CMBaseObject = FigBufferedAirPlaySubPipeManagerForRenderPipelineGetCMBaseObject(*(void *)(DerivedStorage + 376));
      if (CMBaseObject)
      {
        uint64_t v5 = CMBaseObject;
        uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v7 = v6 ? v6 : 0;
        uint64_t v8 = *(void (**)(uint64_t))(v7 + 24);
        if (v8) {
          v8(v5);
        }
      }
      if (*(void *)(DerivedStorage + 392))
      {
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterRemoveWeakListeners();
        uint64_t v9 = *(void *)(DerivedStorage + 392);
        uint64_t v10 = *(void *)(DerivedStorage + 400);
        uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v11) {
          uint64_t v12 = v11;
        }
        else {
          uint64_t v12 = 0;
        }
        uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v12 + 104);
        if (v13) {
          v13(v9, v10);
        }
        uint64_t v14 = *(const void **)(DerivedStorage + 392);
        if (v14)
        {
          CFRelease(v14);
          *(void *)(DerivedStorage + 392) = 0;
        }
      }
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListeners();
      fbaprp_setTimebaseGuts(a1, 0);
      *(unsigned char *)uint64_t DerivedStorage = 1;
      fbaprp_transitionRosterRemoveAll();
      uint64_t v15 = *(void *)(DerivedStorage + 64);
      if (v15)
      {
        uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v17 = v16 ? v16 : 0;
        int v18 = *(void (**)(uint64_t, __CFString *, void))(v17 + 56);
        if (v18) {
          v18(v15, @"DownstreamConsumer", 0);
        }
      }
      *(void *)(DerivedStorage + 144) = 0x3F80000000000000;
      *(void *)(DerivedStorage + 240) = 0;
      uint64_t v19 = MEMORY[0x1E4F1F9F8];
      long long v20 = *MEMORY[0x1E4F1F9F8];
      *(_OWORD *)(DerivedStorage + 160) = *MEMORY[0x1E4F1F9F8];
      uint64_t v21 = *(void *)(v19 + 16);
      *(void *)(DerivedStorage + 176) = v21;
      *(_OWORD *)(DerivedStorage + 208) = v20;
      *(void *)(DerivedStorage + 224) = v21;
      uint64_t v22 = MEMORY[0x1E4F1FA48];
      *(_OWORD *)(DerivedStorage + 260) = *MEMORY[0x1E4F1FA48];
      *(void *)(DerivedStorage + 276) = *(void *)(v22 + 16);
      *(unsigned char *)(DerivedStorage + 96) = 0;
      *(_WORD *)(DerivedStorage + 233) = 0;
      *(void *)(DerivedStorage + 320) = 0;
      *(unsigned char *)(DerivedStorage + 232) = 0;
      uint64_t v23 = *(void *)(DerivedStorage + 72);
      if (v23)
      {
        FigSampleBufferProcessorForBufferedAirPlayCopyPerformanceDictionary(v23, &v49);
        memset(&v48, 0, sizeof(v48));
        CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v49, @"FirstMediaSamplePts");
        CMTimeMakeFromDictionary(&v48, Value);
        memset(&v47, 0, sizeof(v47));
        CFDictionaryRef v25 = (const __CFDictionary *)CFDictionaryGetValue(v49, @"LastMediaSamplePts");
        CMTimeMakeFromDictionary(&v47, v25);
        memset(&v46, 0, sizeof(v46));
        CFDictionaryRef v26 = (const __CFDictionary *)CFDictionaryGetValue(v49, @"FirstContinuousSamplePts");
        CMTimeMakeFromDictionary(&v46, v26);
        memset(&v45, 0, sizeof(v45));
        CFDictionaryRef v27 = (const __CFDictionary *)CFDictionaryGetValue(v49, @"LastContinuousSamplePts");
        CMTimeMakeFromDictionary(&v45, v27);
        memset(&v44, 0, sizeof(v44));
        CFDictionaryRef v28 = (const __CFDictionary *)CFDictionaryGetValue(v49, @"DurationProcessed");
        CMTimeMakeFromDictionary(&v44, v28);
      }
      uint64_t v29 = *(const void **)(DerivedStorage + 304);
      if (v29)
      {
        CFRelease(v29);
        *(void *)(DerivedStorage + 304) = 0;
      }
      uint64_t v30 = *(const void **)(DerivedStorage + 72);
      if (v30)
      {
        CFRelease(v30);
        *(void *)(DerivedStorage + 72) = 0;
      }
      int v31 = *(const void **)(DerivedStorage + 128);
      if (v31)
      {
        CFRelease(v31);
        *(void *)(DerivedStorage + 128) = 0;
      }
      uint64_t v32 = *(const void **)(DerivedStorage + 136);
      if (v32)
      {
        CFRelease(v32);
        *(void *)(DerivedStorage + 136) = 0;
      }
      double v33 = *(const void **)(DerivedStorage + 328);
      if (v33)
      {
        CFRelease(v33);
        *(void *)(DerivedStorage + 328) = 0;
      }
      int v34 = *(const void **)(DerivedStorage + 88);
      if (v34)
      {
        CFRelease(v34);
        *(void *)(DerivedStorage + 88) = 0;
      }
      uint64_t v35 = *(const void **)(DerivedStorage + 360);
      if (v35)
      {
        CFRelease(v35);
        *(void *)(DerivedStorage + 360) = 0;
      }
      uint64_t v36 = *(const void **)(DerivedStorage + 368);
      if (v36)
      {
        CFRelease(v36);
        *(void *)(DerivedStorage + 368) = 0;
      }
      uint64_t v37 = *(const void **)(DerivedStorage + 80);
      if (v37)
      {
        CFRelease(v37);
        *(void *)(DerivedStorage + 80) = 0;
      }
      uint64_t v38 = *(const void **)(DerivedStorage + 120);
      if (v38)
      {
        CFRelease(v38);
        *(void *)(DerivedStorage + 120) = 0;
      }
      int v39 = *(const void **)(DerivedStorage + 104);
      if (v39)
      {
        CFRelease(v39);
        *(void *)(DerivedStorage + 104) = 0;
      }
      uint64_t v40 = *(const void **)(DerivedStorage + 64);
      if (v40)
      {
        CFRelease(v40);
        *(void *)(DerivedStorage + 64) = 0;
      }
      uint64_t v41 = *(void *)(DerivedStorage + 48);
      long long v42 = *(const void **)(DerivedStorage + 56);
      *(void *)(DerivedStorage + 56) = 0;
      MEMORY[0x19970E930](v41);
      if (v42) {
        CFRelease(v42);
      }
    }
    if (v49) {
      CFRelease(v49);
    }
  }
  return 0;
}

uint64_t FigBufferedAirPlayAudioRenderPipelineFinalize(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1E9351028)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  FigBufferedAirPlayAudioRenderPipelineInvalidate(a1);
  uint64_t v4 = *(const void **)(DerivedStorage + 376);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(DerivedStorage + 376) = 0;
  }
  uint64_t v5 = *(NSObject **)(DerivedStorage + 32);
  if (v5)
  {
    dispatch_release(v5);
    *(void *)(DerivedStorage + 32) = 0;
  }
  uint64_t v6 = *(NSObject **)(DerivedStorage + 16);
  if (v6)
  {
    dispatch_release(v6);
    *(void *)(DerivedStorage + 16) = 0;
  }
  uint64_t v7 = *(NSObject **)(DerivedStorage + 24);
  if (v7)
  {
    dispatch_release(v7);
    *(void *)(DerivedStorage + 24) = 0;
  }
  uint64_t v8 = *(NSObject **)(DerivedStorage + 40);
  if (v8)
  {
    dispatch_release(v8);
    *(void *)(DerivedStorage + 40) = 0;
  }
  uint64_t v9 = *(NSObject **)(DerivedStorage + 8);
  if (v9)
  {
    dispatch_sync_f(v9, 0, (dispatch_function_t)fbaprp_dispatchNoOp);
    dispatch_release(*(dispatch_object_t *)(DerivedStorage + 8));
    *(void *)(DerivedStorage + 8) = 0;
  }
  uint64_t result = *(void *)(DerivedStorage + 48);
  if (result)
  {
    uint64_t result = FigSimpleMutexDestroy();
    *(void *)(DerivedStorage + 48) = 0;
  }
  return result;
}

__CFString *FigBufferedAirPlayAudioRenderPipelineCopyDebugDescription(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<FigBufferedAirPlayAudioRenderPipeline %p>", a1);
  return Mutable;
}

uint64_t FigBufferedAirPlayAudioRenderPipelineCopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, CFDictionaryRef *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 48));
  if (*(unsigned char *)DerivedStorage)
  {
    uint64_t v16 = FigSignalErrorAt();
    goto LABEL_31;
  }
  if (CFEqual(@"IsTimebaseStarter", a2))
  {
    uint64_t v9 = (const void **)MEMORY[0x1E4F1CFD0];
    int v10 = *(unsigned __int8 *)(DerivedStorage + 256);
    goto LABEL_4;
  }
  if (CFEqual(@"Timebase", a2))
  {
    Float32 = *(const void **)(DerivedStorage + 248);
    if (!Float32) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  if (CFEqual(@"IsRunning", a2))
  {
    uint64_t v14 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
    if (*(double *)(DerivedStorage + 240) == 0.0) {
      uint64_t v14 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
    }
    *a4 = (CFDictionaryRef)CFRetain(*v14);
    if (dword_1E9351028)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t BufferedAirPlaySampleBufferConsumer = 0;
    goto LABEL_9;
  }
  if (CFEqual(@"SourceSampleBufferQueue", a2))
  {
    Float32 = *(const void **)(DerivedStorage + 128);
    if (!Float32) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  if (CFEqual(@"NeedsToFlushWhenRateChanges", a2))
  {
LABEL_22:
    uint64_t v9 = (const void **)MEMORY[0x1E4F1CFD0];
LABEL_6:
    Float32 = *v9;
LABEL_7:
    Float32 = CFRetain(Float32);
LABEL_8:
    uint64_t BufferedAirPlaySampleBufferConsumer = 0;
    *a4 = (CFDictionaryRef)Float32;
    goto LABEL_9;
  }
  if (CFEqual(@"PreferredClock", a2))
  {
    uint64_t v16 = FigBufferedAirPlayOutputProxyCopyProperty(*(void *)(DerivedStorage + 392), @"PreferredClock", (uint64_t)a3, (uint64_t)a4);
LABEL_31:
    uint64_t BufferedAirPlaySampleBufferConsumer = v16;
    goto LABEL_9;
  }
  if (CFEqual(@"EndPresentationTimeForQueuedSamples", a2))
  {
    uint64_t v16 = fbaprp_copyEndPresentationTimeForQueuedSamples(a1, a3, a4);
    goto LABEL_31;
  }
  if (CFEqual(@"EndPresentationTimeForDecodedSamples", a2))
  {
    uint64_t v16 = fbaprp_copyEndPresentationTimeForDecodedSamples(a1, (uint64_t)a3, a4);
    goto LABEL_31;
  }
  if (CFEqual(@"SupportsGaplessTransitionsAcrossFormatChanges", a2)
    || CFEqual(@"PrefersConsumptionDrivenReads", a2))
  {
    goto LABEL_22;
  }
  if (CFEqual(@"DecodingRate", a2))
  {
    Float32 = (const void *)FigCFNumberCreateFloat32();
    goto LABEL_8;
  }
  if (CFEqual(@"Started", a2))
  {
    uint64_t v9 = (const void **)MEMORY[0x1E4F1CFD0];
    int v10 = *(unsigned __int8 *)(DerivedStorage + 96);
    goto LABEL_4;
  }
  if (CFEqual(@"UsesSubPipe", a2)) {
    goto LABEL_22;
  }
  if (!CFEqual(@"SourceSampleBufferConsumer", a2))
  {
    if (!CFEqual(@"AllowsPrebuffering", a2))
    {
      uint64_t v16 = FigBufferedAirPlaySubPipeManagerForRenderPipelineCopyProperty(*(void *)(DerivedStorage + 376), (uint64_t)a2, *MEMORY[0x1E4F1CF80], (uint64_t)a4);
      goto LABEL_31;
    }
    uint64_t v9 = (const void **)MEMORY[0x1E4F1CFD0];
    int v10 = *(unsigned __int8 *)(DerivedStorage + 384);
LABEL_4:
    if (!v10) {
      uint64_t v9 = (const void **)MEMORY[0x1E4F1CFC8];
    }
    goto LABEL_6;
  }
  uint64_t BufferedAirPlaySampleBufferConsumer = fbaprp_createBufferedAirPlaySampleBufferConsumer(a1, a4);
  if (!BufferedAirPlaySampleBufferConsumer) {
    fbaprp_cleanFreedSampleBufferConsumers();
  }
LABEL_9:
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 48));
  return BufferedAirPlaySampleBufferConsumer;
}

uint64_t FigBufferedAirPlayAudioRenderPipelineSetProperty(const void *a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage) {
    goto LABEL_71;
  }
  uint64_t v7 = DerivedStorage;
  if (CFEqual(@"IsTimebaseStarter", a2))
  {
    if (a3)
    {
      CFTypeID TypeID = CFBooleanGetTypeID();
      if (TypeID == CFGetTypeID(a3))
      {
        v7[256] = *MEMORY[0x1E4F1CFD0] == (void)a3;
        if (dword_1E9351028)
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        uint64_t v22 = *((void *)v7 + 49);
        uint64_t v23 = *((void *)v7 + 50);
        uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v24) {
          uint64_t v25 = v24;
        }
        else {
          uint64_t v25 = 0;
        }
        CFDictionaryRef v26 = *(void (**)(uint64_t, uint64_t, __CFString *, const void *))(v25 + 8);
        if (v26) {
          v26(v22, v23, @"RenderPipelineStateIsTimebaseStarter", a3);
        }
        return 0;
      }
    }
    goto LABEL_71;
  }
  if (CFEqual(@"Timebase", a2))
  {
    if (!a3 || (CFTypeID v10 = CMTimebaseGetTypeID(), v10 == CFGetTypeID(a3)))
    {
      uint64_t v11 = CMBaseObjectGetDerivedStorage();
      MEMORY[0x19970E910](*(void *)(v11 + 48));
      if (*(unsigned char *)v11)
      {
        FigSignalErrorAt();
      }
      else
      {
        uint64_t v12 = *(void *)(v11 + 248);
        if (v12) {
          fbaprp_transitionRosterRemoveRecordByTimebase((uint64_t)a1, v12);
        }
        fbaprp_setTimebaseGuts((uint64_t)a1, a3);
      }
      MEMORY[0x19970E930](*(void *)(v11 + 48));
      if (dword_1E9351028)
      {
        uint64_t v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      return 0;
    }
    goto LABEL_71;
  }
  if (CFEqual(@"GoActive", a2))
  {
    CFTypeID v14 = CFBooleanGetTypeID();
    if (v14 == CFGetTypeID(a3))
    {
      uint64_t v15 = CMBaseObjectGetDerivedStorage();
      MEMORY[0x19970E910](*(void *)(v15 + 48));
      if (*(unsigned char *)v15)
      {
        uint64_t v17 = FigSignalErrorAt();
      }
      else
      {
        if ((const void *)*MEMORY[0x1E4F1CFD0] != a3)
        {
          uint64_t v16 = FigMediaProcessorStop(*(void *)(v15 + 56));
          if (!v16) {
            uint64_t v16 = FigMediaProcessorWaitUntilCompletelyStopped(*(void *)(v15 + 56));
          }
          uint64_t v17 = v16;
          MEMORY[0x19970E930](*(void *)(v15 + 48));
          if (dword_1E9351028)
          {
            int v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          fbaprp_postNotification(a1, @"PrerollLost", 0);
          return v17;
        }
        uint64_t v17 = 0;
      }
      MEMORY[0x19970E930](*(void *)(v15 + 48));
      return v17;
    }
    goto LABEL_71;
  }
  if (CFEqual(@"MXSession", a2)) {
    return 0;
  }
  if (CFEqual(@"Muted", a2))
  {
    CFTypeID v19 = CFBooleanGetTypeID();
    if (v19 == CFGetTypeID(a3))
    {
      uint64_t v20 = *((void *)v7 + 49);
      return FigBufferedAirPlayOutputProxySetProperty(v20, @"Muted", (uint64_t)a3);
    }
    return 0;
  }
  if (!CFEqual(@"AudioProcessingTap", a2))
  {
    if (CFEqual(@"PrerollRate", a2))
    {
      if (a3)
      {
        CFTypeID v28 = CFNumberGetTypeID();
        if (v28 == CFGetTypeID(a3))
        {
          FigCFNumberGetFloat32();
          *((_DWORD *)v7 + 38) = v29;
          uint64_t v30 = *((void *)v7 + 47);
          int v31 = kFigBufferedAirPlaySubPipeManagerForRenderPipelineProperty_DecodeForPrerollRate;
LABEL_56:
          uint64_t v34 = (uint64_t)*v31;
          return FigBufferedAirPlaySubPipeManagerForRenderPipelineSetProperty(v30, v34, (uint64_t)a3);
        }
      }
    }
    else
    {
      if (!CFEqual(@"PipelineRate", a2))
      {
        if (!CFEqual(@"LoudnessInfo", a2))
        {
          if (!CFEqual(@"SoftwareVolume1", a2)
            && !CFEqual(@"SoftwareVolume2", a2)
            && !CFEqual(@"SoftwareVolume3", a2)
            && !CFEqual(@"SoftwareVolume5", a2)
            && !CFEqual(@"SoftwareVolume1RampDuration", a2)
            && !CFEqual(@"SoftwareVolume2RampDuration", a2)
            && !CFEqual(@"STSLabel", a2))
          {
            if (!CFEqual(@"AllowsPrebuffering", a2))
            {
              if (CFEqual(@"HardwarePassthrough", a2)) {
                FigLogBacktrace();
              }
              uint64_t v17 = FigBufferedAirPlaySubPipeManagerForRenderPipelineSetProperty(*((void *)v7 + 47), (uint64_t)a2, (uint64_t)a3);
              if (v17)
              {
                uint64_t v37 = (const void *)FigCFCopyCompactDescription();
                if (v37) {
                  CFRelease(v37);
                }
              }
              return v17;
            }
            CFTypeID v35 = CFBooleanGetTypeID();
            if (v35 == CFGetTypeID(a3))
            {
              if (FigGetCFPreferenceNumberWithDefault())
              {
                v7[384] = *MEMORY[0x1E4F1CFD0] == (void)a3;
                if (dword_1E9351028)
                {
                  uint64_t v36 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT);
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                }
                FigBufferedAirPlayOutputProxySetRenderPipelineState(*((void *)v7 + 49), *((void *)v7 + 50), @"RenderPipelineStateAllowsPrebuffering", (uint64_t)a3);
              }
              return 0;
            }
            goto LABEL_71;
          }
          return 0;
        }
        uint64_t v30 = *((void *)v7 + 47);
        int v31 = kFigBufferedAirPlaySubPipeManagerForRenderPipelineProperty_LoudnessInfo;
        goto LABEL_56;
      }
      if (a3)
      {
        CFTypeID v32 = CFNumberGetTypeID();
        if (v32 == CFGetTypeID(a3))
        {
          FigCFNumberGetFloat32();
          *((_DWORD *)v7 + 39) = v33;
          uint64_t v30 = *((void *)v7 + 47);
          int v31 = kFigBufferedAirPlaySubPipeManagerForRenderPipelineProperty_PipelineRate;
          goto LABEL_56;
        }
      }
    }
LABEL_71:
    return FigSignalErrorAt();
  }
  if (a3)
  {
    CFTypeID v27 = MTAudioProcessingTapGetTypeID();
    if (v27 != CFGetTypeID(a3)) {
      return 0;
    }
  }

  return fbaprp_setAudioProcessingTap((uint64_t)a1, (uint64_t)a3);
}

void fbaprp_setTimebaseGuts(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)(DerivedStorage + 248))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    uint64_t v4 = *(const void **)(DerivedStorage + 248);
  }
  else
  {
    uint64_t v4 = 0;
  }
  *(void *)(DerivedStorage + 248) = a2;
  if (a2) {
    CFRetain(a2);
  }
  if (v4) {
    CFRelease(v4);
  }
  if (*(void *)(DerivedStorage + 248))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListener();
  }
}

void fbaprp_transitionRosterRemoveAll()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorContext v1 = *(void **)(DerivedStorage + 288);
  if (!v1) {
    return;
  }
  uint64_t v2 = (void **)(DerivedStorage + 288);
  while (1)
  {
    uint64_t v3 = (void *)*v1;
    uint64_t v4 = *v2;
    if (*v2 == v1) {
      break;
    }
    do
    {
      uint64_t v5 = v4;
      uint64_t v4 = (void *)*v4;
    }
    while (v4 != v1);
    *uint64_t v5 = v3;
    if (!v3) {
      goto LABEL_11;
    }
LABEL_8:
    fbaprp_transitionRosterFreeRecord((uint64_t)v1);
    CFAllocatorContext v1 = v3;
  }
  const void *v2 = v3;
  if (v3) {
    goto LABEL_8;
  }
  uint64_t v5 = (void *)(DerivedStorage + 288);
LABEL_11:
  *(void *)(DerivedStorage + 296) = v5;

  fbaprp_transitionRosterFreeRecord((uint64_t)v1);
}

void fbaprp_transitionIDFound(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, const void *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(unsigned char *)(DerivedStorage + 312) = 1;
  if (a5) {
    CFRetain(a5);
  }
  if (a2) {
    CFRetain(a2);
  }
  uint64_t v8 = *(NSObject **)(DerivedStorage + 32);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __fbaprp_transitionIDFound_block_invoke;
  block[3] = &__block_descriptor_tmp_46;
  block[4] = DerivedStorage;
  void block[5] = a5;
  void block[6] = a2;
  dispatch_async(v8, block);
}

uint64_t fbaprp_resumeOutput(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_OWORD *)&v24.int64_t value = *MEMORY[0x1E4F1F9F8];
  v24.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 48));
  if (!a5) {
    return MEMORY[0x19970E930](*(void *)(DerivedStorage + 48));
  }
  if (*(unsigned char *)DerivedStorage) {
    return MEMORY[0x19970E930](*(void *)(DerivedStorage + 48));
  }
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (TypeID != CFGetTypeID(a5) || !FigCFDictionaryGetCMTimeIfPresent()) {
    return MEMORY[0x19970E930](*(void *)(DerivedStorage + 48));
  }
  if (*(unsigned char *)(DerivedStorage + 232))
  {
    *(_OWORD *)(DerivedStorage + 160) = *(_OWORD *)&v24.value;
    *(void *)(DerivedStorage + 176) = v24.epoch;
    return MEMORY[0x19970E930](*(void *)(DerivedStorage + 48));
  }
  if (*(unsigned char *)(DerivedStorage + 233))
  {
    *(_OWORD *)(DerivedStorage + 160) = *(_OWORD *)&v24.value;
    *(void *)(DerivedStorage + 176) = v24.epoch;
    CFTypeID v10 = *(const void **)(DerivedStorage + 248);
    CMClockRef HostTimeClock = CMClockGetHostTimeClock();
    CMTime time = v24;
    CMSyncConvertTime(&v26, &time, v10, HostTimeClock);
    *(CMTime *)(DerivedStorage + 208) = v26;
    float Rate = CMTimebaseGetRate(*(CMTimebaseRef *)(DerivedStorage + 248));
    if (Rate == 0.0)
    {
      *(_WORD *)(DerivedStorage + 232) = 1;
    }
    else
    {
      if (dword_1E9351028)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      fbaprp_synchronizeToTimebaseSetRateOnAudioChainGuts(a2, Rate);
    }
    return MEMORY[0x19970E930](*(void *)(DerivedStorage + 48));
  }
  if (*(float *)(DerivedStorage + 152) == 0.0)
  {
    if (*(float *)(DerivedStorage + 156) == 0.0)
    {
      if (dword_1E9351028)
      {
        uint64_t v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      CMTime v26 = v24;
      int v18 = (long long *)MEMORY[0x1E4F1F9F8];
      float v17 = 0.0;
      uint64_t v19 = a2;
      int v20 = 0;
      goto LABEL_27;
    }
    if (dword_1E9351028)
    {
      uint64_t v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (!*(unsigned char *)(DerivedStorage + 96))
    {
      float v17 = *(float *)(DerivedStorage + 156);
      goto LABEL_26;
    }
    if (!dword_1E9351028) {
      return MEMORY[0x19970E930](*(void *)(DerivedStorage + 48));
    }
LABEL_38:
    uint64_t v23 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return MEMORY[0x19970E930](*(void *)(DerivedStorage + 48));
  }
  if (dword_1E9351028)
  {
    uint64_t v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(unsigned char *)(DerivedStorage + 96))
  {
    if (!dword_1E9351028) {
      return MEMORY[0x19970E930](*(void *)(DerivedStorage + 48));
    }
    goto LABEL_38;
  }
  float v17 = *(float *)(DerivedStorage + 152);
LABEL_26:
  CMTime v26 = v24;
  int v18 = (long long *)MEMORY[0x1E4F1F9F8];
  uint64_t v19 = a2;
  int v20 = 1;
LABEL_27:
  if (!fbaprp_startAudioChainGuts(v17, v19, v20, (long long *)&v26.value, v18))
  {
    if (v24.flags)
    {
      *(_OWORD *)(DerivedStorage + 184) = *(_OWORD *)&v24.value;
      *(void *)(DerivedStorage + 200) = v24.epoch;
      if (dword_1E9351028)
      {
        uint64_t v21 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    float v22 = CMTimebaseGetRate(*(CMTimebaseRef *)(DerivedStorage + 248));
    if (v22 != 0.0 && *(unsigned char *)(DerivedStorage + 384))
    {
      CMTime v26 = *(CMTime *)(DerivedStorage + 184);
      CMTime time = *(CMTime *)(DerivedStorage + 208);
      fbaprp_setRateOnAudioChainGuts(a2, (uint64_t)&v26, &time, 0, v22);
    }
  }
  return MEMORY[0x19970E930](*(void *)(DerivedStorage + 48));
}

void fbaprp_resetOutput(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 48));
  fbaprp_suspendAudioChainGuts(a2);

  JUMPOUT(0x19970E930);
}

uint64_t fbaprp_sbufProcessorFoundEndOfSiriTTSUtterance(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  long long v14 = *MEMORY[0x1E4F1FA48];
  uint64_t v15 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 48));
  if (a5)
  {
    if (!*(unsigned char *)DerivedStorage)
    {
      CFTypeID v7 = CFGetTypeID(a5);
      if (v7 == CFDictionaryGetTypeID() && FigCFDictionaryGetCMTimeIfPresent() && (BYTE12(v14) & 1) != 0)
      {
        uint64_t v8 = *(void *)(DerivedStorage + 392);
        uint64_t v9 = *(void *)(DerivedStorage + 400);
        uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v10) {
          uint64_t v11 = v10;
        }
        else {
          uint64_t v11 = 0;
        }
        uint64_t v12 = *(void (**)(uint64_t, uint64_t, long long *))(v11 + 64);
        if (v12)
        {
          long long v16 = v14;
          uint64_t v17 = v15;
          v12(v8, v9, &v16);
        }
      }
    }
  }
  return MEMORY[0x19970E930](*(void *)(DerivedStorage + 48));
}

void __fbaprp_transitionIDFound_block_invoke(uint64_t a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)&v19.int64_t value = *MEMORY[0x1E4F1F9F8];
  v19.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  long long v18 = *MEMORY[0x1E4F1F9F8];
  long long v16 = *MEMORY[0x1E4F1FA48];
  uint64_t v17 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
  MEMORY[0x19970E910](*(void *)(*(void *)(a1 + 32) + 48));
  if (*(unsigned char *)(*(void *)(a1 + 32) + 256))
  {
    if (*(void *)(a1 + 40))
    {
      CFTypeID TypeID = CFDictionaryGetTypeID();
      if (TypeID == CFGetTypeID(*(CFTypeRef *)(a1 + 40)))
      {
        CFDictionaryRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), @"TransitionID");
        if (Value)
        {
          uint64_t v4 = Value;
          if (FigCFDictionaryGetCMTimeIfPresent())
          {
            if (FigCFDictionaryGetCMTimeIfPresent() && FigCFDictionaryGetCMTimeIfPresent())
            {
              uint64_t v5 = *(void *)(a1 + 48);
              uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
              if (dword_1E9351028)
              {
                LODWORD(v22) = 0;
                type[0] = OS_LOG_TYPE_DEFAULT;
                os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              Record = fbaprp_transitionRosterGetRecord(v5, (uint64_t)v4);
              if (Record)
              {
                uint64_t v9 = Record;
                uint64_t v10 = (const void *)Record[6];
                Record[15] = v17;
                *(_OWORD *)(Record + 13) = v16;
                *(_OWORD *)(Record + 3) = *(_OWORD *)&v19.value;
                Record[5] = v19.epoch;
                uint64_t v11 = *(const void **)(DerivedStorage + 304);
                if (v11)
                {
                  void v9[2] = CFRetain(v11);
                  uint64_t v12 = *(OpaqueCMTimebase **)(DerivedStorage + 304);
                }
                else
                {
                  CFTypeRef v13 = *(CFTypeRef *)(DerivedStorage + 248);
                  if (v13)
                  {
                    CFTypeRef v13 = CFRetain(v13);
                    uint64_t v12 = *(OpaqueCMTimebase **)(DerivedStorage + 248);
                  }
                  else
                  {
                    uint64_t v12 = 0;
                  }
                  void v9[2] = v13;
                }
                CMTimebaseGetTime(&time, v12);
                CMTime v24 = v19;
                long long v22 = v18;
                CMTimeEpoch epoch = v19.epoch;
                *(_OWORD *)os_log_type_t type = v16;
                uint64_t v21 = v17;
                fbaprp_scheduleItemTransitionOnTimebase(v5, v12, (uint64_t)&time, &v24, v10, (uint64_t)&v22, (long long *)type, v4);
              }
            }
          }
        }
      }
    }
  }
  MEMORY[0x19970E930](*(void *)(*(void *)(a1 + 32) + 48));
  long long v14 = *(const void **)(a1 + 48);
  if (v14) {
    CFRelease(v14);
  }
  uint64_t v15 = *(const void **)(a1 + 40);
  if (v15) {
    CFRelease(v15);
  }
}

void *fbaprp_transitionRosterGetRecord(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2) {
    return 0;
  }
  uint64_t v4 = (void *)(DerivedStorage + 288);
  do
    uint64_t v4 = (void *)*v4;
  while (v4 && !FigCFEqual());
  return v4;
}

void fbaprp_scheduleItemTransitionOnTimebase(uint64_t a1, void *a2, uint64_t a3, CMTime *a4, const void *a5, uint64_t a6, long long *a7, const void *a8)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  memset(&v29, 0, sizeof(v29));
  CMTimeMake(&v29, 1, 1);
  memset(&v28, 0, sizeof(v28));
  CMTime lhs = *a4;
  CMTime rhs = v29;
  CMTimeSubtract(&v28, &lhs, &rhs);
  if (a2)
  {
    if (a5)
    {
      dispatch_source_t v16 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, *(dispatch_queue_t *)(DerivedStorage + 32));
      if (v16)
      {
        uint64_t v17 = v16;
        uint64_t v27 = DerivedStorage;
        long long v18 = (char *)malloc_type_calloc(1uLL, 0x80uLL, 0x10E0040C66585F0uLL);
        if (v18)
        {
          CMTime v19 = v18;
          *((void *)v18 + 2) = CFRetain(a2);
          *((void *)v19 + 3) = CFRetain(a5);
          *(void *)CMTime v19 = FigCFWeakReferenceHolderCreateWithReferencedObject();
          *(CMTime *)(v19 + 32) = v28;
          uint64_t v20 = *(void *)(a6 + 16);
          *((_OWORD *)v19 + 5) = *(_OWORD *)a6;
          *((void *)v19 + 12) = v20;
          long long v21 = *a7;
          *((void *)v19 + 15) = *((void *)a7 + 2);
          *(_OWORD *)(v19 + 104) = v21;
          CMTimeEpoch epoch = a4->epoch;
          *(_OWORD *)(v19 + 56) = *(_OWORD *)&a4->value;
          *((void *)v19 + 9) = epoch;
          *((void *)v19 + 1) = CFRetain(a8);
          if (dword_1E9351028)
          {
            os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          dispatch_source_set_timer(v17, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
          dispatch_source_set_event_handler_f(v17, (dispatch_function_t)fbaprp_transitionToNextTimebaseNow);
          dispatch_source_set_cancel_handler_f(v17, (dispatch_function_t)fbaprp_cancelTimebaseTransition);
          dispatch_set_context(v17, v19);
          dispatch_resume(v17);
          if (a8)
          {
            Record = fbaprp_transitionRosterGetRecord(a1, (uint64_t)a8);
            if (Record)
            {
              uint64_t v25 = Record[12];
              Record[12] = v17;
              dispatch_retain(v17);
              if (v25)
              {
                dispatch_source_cancel(v25);
                dispatch_release(v25);
              }
            }
          }
          if (!CMTimebaseAddTimerDispatchSource((CMTimebaseRef)a2, v17))
          {
            CMTime lhs = v28;
            if (!CMTimebaseSetTimerDispatchSourceNextFireTime((CMTimebaseRef)a2, v17, &lhs, 1u))
            {
              uint64_t v26 = *(const void **)(v27 + 304);
              *(void *)(v27 + 304) = a5;
              CFRetain(a5);
              if (v26) {
                CFRelease(v26);
              }
              goto LABEL_15;
            }
            CMTimebaseRemoveTimerDispatchSource((CMTimebaseRef)a2, v17);
          }
          fbaprp_transitionRosterRemoveRecordByTimebase(a1, (uint64_t)a5);
        }
LABEL_15:
        dispatch_release(v17);
      }
    }
  }
}

void fbaprp_transitionToNextTimebaseNow(uint64_t a1)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  CMTime v32 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  CMTime v31 = v32;
  CMTime v30 = v32;
  double Rate = CMTimebaseGetRate(*(CMTimebaseRef *)(a1 + 16));
  memset(&v29, 0, sizeof(v29));
  if (v2)
  {
    Float64 v4 = Rate;
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 48));
    if (*(unsigned char *)DerivedStorage)
    {
      MEMORY[0x19970E930](*(void *)(DerivedStorage + 48));
      CFRelease(v2);
    }
    else
    {
      Record = fbaprp_transitionRosterGetRecord((uint64_t)v2, *(void *)(a1 + 8));
      if (Record)
      {
        uint64_t v7 = (uint64_t)Record;
        uint64_t v8 = *(const void **)(a1 + 8);
        if (v8) {
          CFTypeRef v9 = CFRetain(v8);
        }
        else {
          CFTypeRef v9 = 0;
        }
        CMTime v33 = *(CMTime *)(v7 + 56);
        uint64_t v10 = *(const void **)(a1 + 16);
        CMClockRef HostTimeClock = CMClockGetHostTimeClock();
        CMTime time = *(CMTime *)(a1 + 56);
        CMSyncConvertTime(&v32, &time, v10, HostTimeClock);
        long long v12 = *(_OWORD *)(a1 + 104);
        *(void *)(DerivedStorage + 276) = *(void *)(a1 + 120);
        *(_OWORD *)(DerivedStorage + 260) = v12;
        CMClockOrTimebaseRef v13 = CMTimebaseCopySource(*(CMTimebaseRef *)(a1 + 24));
        CMClockRef v14 = CMClockGetHostTimeClock();
        CMTime time = v32;
        CMSyncConvertTime(&v29, &time, v14, v13);
        if (dword_1E9351028)
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        uint64_t v15 = *(OpaqueCMTimebase **)(a1 + 24);
        CMTime time = v33;
        CMTime immediateSourceTime = v29;
        if (CMTimebaseSetRateAndAnchorTime(v15, v4, &time, &immediateSourceTime))
        {
          uint64_t v16 = 0;
          uint64_t v17 = 0;
        }
        else
        {
          uint64_t v17 = *(void (**)(uint64_t, CFTypeRef, CMTime *, CMTime *, float))(v7 + 80);
          uint64_t v16 = *(void *)(v7 + 88);
          long long v18 = *(OpaqueCMTimebase **)(DerivedStorage + 248);
          if (v18)
          {
            CMClockOrTimebaseRef v27 = v13;
            CFTypeRef v19 = v9;
            CMTimebaseGetTime(&v31, v18);
            CMTime time = v31;
            CMTime immediateSourceTime = *(CMTime *)(DerivedStorage + 260);
            CMTimeAdd(&v30, &time, &immediateSourceTime);
            CMTime v28 = v30;
            uint64_t v20 = CMBaseObjectGetDerivedStorage();
            long long v21 = (void **)(v20 + 288);
            uint64_t v22 = v20 + 288;
            while (1)
            {
              uint64_t v22 = *(void *)v22;
              if (!v22) {
                break;
              }
              CMTime time = *(CMTime *)(v22 + 104);
              CMTime immediateSourceTime = v28;
              if (CMTimeCompare(&time, &immediateSourceTime) <= 0)
              {
                for (uint64_t i = *v21; i != (void *)v22; uint64_t i = (void *)*i)
                  long long v21 = (void **)i;
                uint64_t v24 = *(void *)v22;
                *long long v21 = *(void **)v22;
                if (!v24) {
                  *(void *)(v20 + 296) = v21;
                }
                fbaprp_transitionRosterFreeRecord(v22);
                break;
              }
            }
            CFTypeRef v9 = v19;
            CMClockOrTimebaseRef v13 = v27;
          }
          fbaprp_setTimebaseGuts((uint64_t)v2, *(const void **)(a1 + 24));
        }
        if (fbaprp_transitionRosterGetRecord((uint64_t)v2, *(void *)(a1 + 8)))
        {
          *(unsigned char *)(v7 + 128) = 1;
          fbaprp_transitionRosterCancelAndReleaseTimerSource(v7);
        }
        MEMORY[0x19970E930](*(void *)(DerivedStorage + 48));
        if (v17)
        {
          float v25 = v4;
          CMTime time = v33;
          CMTime immediateSourceTime = v32;
          v17(v16, v9, &time, &immediateSourceTime, v25);
        }
        if (v13) {
          CFRelease(v13);
        }
        if (v9) {
          CFRelease(v9);
        }
      }
      else
      {
        MEMORY[0x19970E930](*(void *)(DerivedStorage + 48));
      }
      CFRelease(v2);
    }
  }
}

void fbaprp_transitionRosterRemoveRecordByTimebase(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    uint64_t v4 = DerivedStorage;
    uint64_t v5 = (void **)(DerivedStorage + 288);
    uint64_t v6 = (void *)(DerivedStorage + 288);
    while (1)
    {
      uint64_t v6 = (void *)*v6;
      if (!v6) {
        break;
      }
      if (FigCFEqual())
      {
        for (uint64_t i = *v5; i != v6; uint64_t i = (void *)*i)
          uint64_t v5 = (void **)i;
        uint64_t v8 = (void *)*v6;
        *uint64_t v5 = (void *)*v6;
        if (!v8) {
          *(void *)(v4 + 296) = v5;
        }
        fbaprp_transitionRosterFreeRecord((uint64_t)v6);
        return;
      }
    }
  }
  else
  {
    FigSignalErrorAt();
  }
}

void fbaprp_itemTransitionContextRelease(const void **a1)
{
  if (a1)
  {
    uint64_t v2 = *a1;
    if (v2) {
      CFRelease(v2);
    }
    uint64_t v3 = a1[1];
    if (v3) {
      CFRelease(v3);
    }
    uint64_t v4 = a1[2];
    if (v4) {
      CFRelease(v4);
    }
    uint64_t v5 = a1[3];
    if (v5) {
      CFRelease(v5);
    }
    free(a1);
  }
}

void fbaprp_transitionRosterCancelAndReleaseTimerSource(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 96);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*(dispatch_object_t *)(a1 + 96));
    *(void *)(a1 + 96) = 0;
  }
}

void fbaprp_transitionRosterFreeRecord(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 8);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 16);
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = *(const void **)(a1 + 48);
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = MEMORY[0x1E4F1F9F8];
  long long v6 = *MEMORY[0x1E4F1F9F8];
  *(_OWORD *)(a1 + 24) = *MEMORY[0x1E4F1F9F8];
  uint64_t v7 = *(void *)(v5 + 16);
  *(void *)(a1 + 40) = v7;
  *(_OWORD *)(a1 + 56) = v6;
  *(_OWORD *)(a1 + 104) = v6;
  *(void *)(a1 + 120) = v7;
  *(unsigned char *)(a1 + 128) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 72) = v7;
  fbaprp_transitionRosterCancelAndReleaseTimerSource(a1);

  free((void *)a1);
}

uint64_t fbaprp_synchronizeToTimebaseSetRateOnAudioChainGuts(uint64_t a1, double a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = *(void *)(DerivedStorage + 392);
  uint64_t v6 = *(void *)(DerivedStorage + 400);
  uint64_t v7 = *(void *)(DerivedStorage + 80);
  *(_OWORD *)&v15.int64_t value = *(_OWORD *)(DerivedStorage + 184);
  v15.CMTimeEpoch epoch = *(void *)(DerivedStorage + 200);
  *(_OWORD *)&type.int64_t value = *(_OWORD *)(DerivedStorage + 208);
  type.CMTimeEpoch epoch = *(void *)(DerivedStorage + 224);
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, CMTime *, CMTime *, uint64_t, double))(v9 + 120);
  if (!v10) {
    return 4294954514;
  }
  CMTime time = v15;
  CMTime v16 = type;
  uint64_t result = v10(v5, v6, &time, &v16, v7, a2);
  if (!result)
  {
    if (dword_1E9351028)
    {
      os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t result = 0;
    if (a2 != 0.0 && !*(unsigned char *)(DerivedStorage + 96))
    {
      float v13 = a2;
      *(float *)(DerivedStorage + 148) = v13;
      *(unsigned char *)(DerivedStorage + 96) = 1;
      *(Float64 *)(DerivedStorage + 240) = CMTimebaseGetRate(*(CMTimebaseRef *)(DerivedStorage + 248));
      CMTime time = *(CMTime *)(DerivedStorage + 184);
      CMTime v16 = *(CMTime *)(DerivedStorage + 208);
      return fbaprp_setRateOnAudioChainGuts(a1, (uint64_t)&time, &v16, 0, v13);
    }
  }
  return result;
}

uint64_t fbaprp_startAudioChainGuts(float a1, uint64_t a2, int a3, long long *a4, long long *a5)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)DerivedStorage)
  {
    uint64_t v10 = DerivedStorage;
    uint64_t result = FigMediaProcessorGo(*(void *)(DerivedStorage + 56));
    if (result) {
      return result;
    }
    if ((*((_DWORD *)a4 + 3) & 0x1D) == 1)
    {
      long long v12 = *a4;
      *(void *)(v10 + 176) = *((void *)a4 + 2);
      *(_OWORD *)(v10 + 160) = v12;
      if (dword_1E9351028)
      {
        os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    if (*(unsigned char *)(v10 + 96))
    {
      if (!dword_1E9351028) {
        return 0;
      }
    }
    else
    {
      if (a3 == 1)
      {
        *(float *)(v10 + 144) = a1;
        long long v14 = *a5;
        *(void *)(v10 + 224) = *((void *)a5 + 2);
        *(_OWORD *)(v10 + 208) = v14;
      }
      else
      {
        a1 = *(float *)(v10 + 144);
      }
      if (a1 != 0.0 && (*(_DWORD *)(v10 + 172) & 0x1D) == 1)
      {
        CMTime v15 = *(const void **)(v10 + 136);
        CMTime v16 = *(const void **)(v10 + 248);
        *(void *)(v10 + 136) = v16;
        if (v16) {
          CFRetain(v16);
        }
        if (v15) {
          CFRelease(v15);
        }
        if (dword_1E9351028)
        {
          uint64_t v17 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        CFTypeRef v19 = (unsigned char *)CMBaseObjectGetDerivedStorage();
        if (!*v19)
        {
          uint64_t v20 = v19;
          UInt32 = (const void *)FigCFNumberCreateUInt32();
          uint64_t v22 = v20[7];
          if (v22) {
            FigMediaProcessorSetProperty(v22, @"ActivitySchedulerPriority", (uint64_t)UInt32);
          }
          uint64_t CMBaseObject = FigBufferedAirPlaySubPipeManagerForRenderPipelineGetCMBaseObject(v20[47]);
          uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v24) {
            uint64_t v25 = v24;
          }
          else {
            uint64_t v25 = 0;
          }
          uint64_t v26 = *(void (**)(uint64_t, __CFString *, const void *))(v25 + 56);
          if (v26) {
            v26(CMBaseObject, @"ThreadPriority", UInt32);
          }
          CMClockOrTimebaseRef v27 = @"BufferedAirPlayUrgent";
          if (@"BufferedAirPlayUrgent") {
            CMClockOrTimebaseRef v27 = (__CFString *)CFRetain(@"BufferedAirPlayUrgent");
          }
          v20[41] = v27;
          if (UInt32) {
            CFRelease(UInt32);
          }
        }
        *(_DWORD *)(v10 + 148) = *(_DWORD *)(v10 + 144);
        *(unsigned char *)(v10 + 96) = 1;
        *(_WORD *)(v10 + 232) = 0;
        uint64_t v29 = *(void *)(v10 + 392);
        uint64_t v28 = *(void *)(v10 + 400);
        uint64_t v30 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v30) {
          uint64_t v31 = v30;
        }
        else {
          uint64_t v31 = 0;
        }
        CMTime v32 = *(uint64_t (**)(uint64_t, uint64_t))(v31 + 112);
        if (v32) {
          return v32(v29, v28);
        }
        else {
          return 4294954514;
        }
      }
      if (!dword_1E9351028) {
        return 0;
      }
    }
    uint64_t v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 0;
  }

  return FigSignalErrorAt();
}

uint64_t fbaprp_setRateOnAudioChainGuts(uint64_t a1, uint64_t a2, CMTime *a3, uint64_t a4, float a5)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    uint64_t v20 = FigSignalErrorAt();
    goto LABEL_53;
  }
  uint64_t v10 = DerivedStorage;
  int v11 = dword_1E9351028;
  if (DerivedStorage[256]) {
    BOOL v12 = 1;
  }
  else {
    BOOL v12 = dword_1E9351028 == 0;
  }
  if (!v12)
  {
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    int v11 = dword_1E9351028;
  }
  if (v11)
  {
    long long v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    if (dword_1E9351028)
    {
      CMTime v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  uint64_t v16 = *((void *)v10 + 47);
  *(_OWORD *)&v49.int64_t value = *((_OWORD *)v10 + 10);
  v49.CMTimeEpoch epoch = *((void *)v10 + 22);
  *(_OWORD *)&type.int64_t value = *((_OWORD *)v10 + 13);
  type.CMTimeEpoch epoch = *((void *)v10 + 28);
  uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v17) {
    uint64_t v18 = v17;
  }
  else {
    uint64_t v18 = 0;
  }
  CFTypeRef v19 = *(uint64_t (**)(uint64_t, CMTime *, CMTime *, double))(v18 + 8);
  if (!v19) {
    goto LABEL_48;
  }
  CMTime time = v49;
  CMTime v51 = type;
  uint64_t v20 = v19(v16, &time, &v51, a5);
  if (v20)
  {
LABEL_53:
    uint64_t v37 = v20;
    long long v21 = 0;
    goto LABEL_49;
  }
  if (a5 != 0.0)
  {
    long long v21 = 0;
    uint64_t v22 = *((void *)v10 + 31);
    CMTime time = *a3;
    if (!a1
      || !v22
      || (long long v21 = (char *)malloc_type_calloc(1uLL, 0x50uLL, 0x10A004094F85FBAuLL),
          *(void *)long long v21 = FigCFWeakReferenceHolderCreateWithReferencedObject(),
          uint64_t v23 = FigCFWeakReferenceHolderCreateWithReferencedObject(),
          *((void *)v21 + 8) = v23,
          *((float *)v21 + 2) = a5,
          *(CMTime *)(v21 + 36) = time,
          !*(void *)v21)
      || !v23)
    {
      uint64_t v44 = FigSignalErrorAt();
      if (v44) {
        goto LABEL_51;
      }
    }
    if (dword_1E9351028)
    {
      uint64_t v24 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (a4)
    {
      CFAllocatorRef v26 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (!Mutable)
      {
        uint64_t v37 = 4294954443;
        goto LABEL_49;
      }
      CFMutableDictionaryRef v28 = Mutable;
      CFMutableDictionaryRef v29 = CFDictionaryCreateMutable(v26, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (!v29)
      {
        uint64_t v37 = 4294954443;
        goto LABEL_39;
      }
      CFMutableDictionaryRef v30 = v29;
      FigCFDictionarySetInt64();
      FigCFDictionarySetValue();
    }
    else
    {
      CFMutableDictionaryRef v30 = 0;
      CFMutableDictionaryRef v28 = 0;
    }
    uint64_t v31 = *((void *)v10 + 49);
    uint64_t v32 = *((void *)v10 + 50);
    uint64_t v33 = *((void *)v10 + 10);
    *(_OWORD *)&v50.int64_t value = *(_OWORD *)a2;
    v50.CMTimeEpoch epoch = *(void *)(a2 + 16);
    *(_OWORD *)&typea.int64_t value = *(_OWORD *)&a3->value;
    typea.CMTimeEpoch epoch = a3->epoch;
    uint64_t v34 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v34) {
      uint64_t v35 = v34;
    }
    else {
      uint64_t v35 = 0;
    }
    uint64_t v36 = *(uint64_t (**)(uint64_t, uint64_t, CMTime *, CMTime *, uint64_t, void (*)(uint64_t, int, CMTime *, CMTime *, uint64_t, float), char *, CFMutableDictionaryRef, double))(v35 + 16);
    if (v36)
    {
      CMTime time = v50;
      CMTime v51 = typea;
      uint64_t v37 = v36(v31, v32, &time, &v51, v33, fbaprp_bufferedAirPlayOutputStartedCallback, v21, v28, a5);
      if (!v37) {
        goto LABEL_46;
      }
    }
    else
    {
      uint64_t v37 = 4294954514;
    }
    if (!v30) {
      goto LABEL_38;
    }
    goto LABEL_37;
  }
  if (dword_1E9351028)
  {
    uint64_t v25 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v38 = *((void *)v10 + 49);
  uint64_t v39 = *((void *)v10 + 50);
  uint64_t v40 = *((void *)v10 + 10);
  uint64_t v41 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v41) {
    uint64_t v42 = v41;
  }
  else {
    uint64_t v42 = 0;
  }
  uint64_t v43 = *(uint64_t (**)(uint64_t, uint64_t, CMTime *, CMTime *, uint64_t, void, void, void, double))(v42 + 16);
  if (!v43)
  {
LABEL_48:
    long long v21 = 0;
    uint64_t v37 = 4294954514;
    goto LABEL_49;
  }
  CMTime time = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  CMTime v51 = time;
  uint64_t v44 = v43(v38, v39, &time, &v51, v40, 0, 0, 0, 0.0);
  long long v21 = 0;
  if (v44)
  {
LABEL_51:
    uint64_t v37 = v44;
    goto LABEL_49;
  }
  CFMutableDictionaryRef v30 = 0;
  CFMutableDictionaryRef v28 = 0;
LABEL_46:
  uint64_t v37 = 0;
  *((float *)v10 + 36) = a5;
  if (v30) {
LABEL_37:
  }
    CFRelease(v30);
LABEL_38:
  long long v21 = 0;
  if (v28) {
LABEL_39:
  }
    CFRelease(v28);
LABEL_49:
  fbaprp_releaseSetRateContext((const void **)v21);
  return v37;
}

uint64_t FigBufferedAirPlaySubPipeManagerForRenderPipelineSetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t CMBaseObject = FigBufferedAirPlaySubPipeManagerForRenderPipelineGetCMBaseObject(a1);
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 56);
  if (!v8) {
    return 4294954514;
  }

  return v8(CMBaseObject, a2, a3);
}

void fbaprp_bufferedAirPlayOutputStartedCallback(uint64_t a1, int a2, CMTime *a3, CMTime *a4, uint64_t a5, float a6)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  CMTime v35 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  if (!a1)
  {
    FigSignalErrorAt();
    uint64_t v10 = 0;
LABEL_49:
    fbaprp_releaseSetRateContext((const void **)a1);
    goto LABEL_47;
  }
  uint64_t v10 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v10) {
    goto LABEL_49;
  }
  uint64_t v11 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v11) {
    goto LABEL_49;
  }
  BOOL v12 = (OpaqueCMTimebase *)v11;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 48));
  if (*(unsigned char *)DerivedStorage) {
    goto LABEL_52;
  }
  if (*(float *)(DerivedStorage + 144) == 0.0)
  {
    if (dword_1E9351028)
    {
      LODWORD(v33.CFDictionarySetValue(theDict, key, value) = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      CFMutableDictionaryRef Mutable = 0;
      CFMutableDictionaryRef v20 = 0;
      goto LABEL_43;
    }
LABEL_52:
    CFMutableDictionaryRef Mutable = 0;
LABEL_53:
    CFMutableDictionaryRef v20 = 0;
    goto LABEL_43;
  }
  if (*(unsigned char *)(DerivedStorage + 256)) {
    BOOL v14 = 1;
  }
  else {
    BOOL v14 = dword_1E9351028 == 0;
  }
  if (!v14)
  {
    LODWORD(v33.CFDictionarySetValue(theDict, key, value) = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    CMTime v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a6 != 0.0)
  {
    if (*MEMORY[0x1E4F1EBA0])
    {
      uint64_t v16 = fig_log_handle();
      if (os_signpost_enabled(v16))
      {
        CMTime time = *a3;
        Float64 Seconds = CMTimeGetSeconds(&time);
        LODWORD(time.CFDictionarySetValue(theDict, key, value) = 134218752;
        *(CMTimeValue *)((char *)&time.value + 4) = (CMTimeValue)v10;
        LOWORD(time.flags) = 2048;
        *(double *)((char *)&time.flags + 2) = a6;
        HIWORD(time.epoch) = 2048;
        Float64 v38 = Seconds;
        __int16 v39 = 2048;
        uint64_t v40 = a2;
        _os_signpost_emit_with_name_impl(&dword_193E8D000, v16, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "WHA_BAORP_SetRateAndAnchorTime", " enableTelemetry=YES renderPipeline=%llu, timebaseRate=%1.2f, itemTime=%1.3f, error=%llu", (uint8_t *)&time, 0x2Au);
      }
    }
    if (*MEMORY[0x1E4F1EB90])
    {
      CMTime time = *a3;
      CMTimeGetSeconds(&time);
      fig_gm_ktrace_wrapper();
    }
  }
  if (!a2 || a2 == -17323)
  {
    if (dword_1E9351028)
    {
      LODWORD(v33.CFDictionarySetValue(theDict, key, value) = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      uint64_t v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (*(unsigned char *)(DerivedStorage + 272))
    {
      CMTime time = *(CMTime *)(DerivedStorage + 260);
      CMTime time2 = *a3;
      if (CMTimeCompare(&time, &time2) <= 0)
      {
        CMTime time = *a3;
        CMTime time2 = *(CMTime *)(DerivedStorage + 260);
        CMTimeSubtract(&v35, &time, &time2);
        if (dword_1E9351028)
        {
          LODWORD(v33.CFDictionarySetValue(theDict, key, value) = 0;
          os_log_type_t type = OS_LOG_TYPE_DEFAULT;
          CFMutableDictionaryRef v30 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        *a3 = v35;
      }
    }
    float v22 = *(float *)(a1 + 8);
    CMTime time = *a3;
    CMTime time2 = *a3;
    CMTime v33 = *a4;
    fbaprp_startTimebase(v22, (uint64_t)v10, v12, &time, &time2, &v33);
    CFMutableDictionaryRef Mutable = 0;
    CFMutableDictionaryRef v20 = 0;
    if (a2 || !a5) {
      goto LABEL_33;
    }
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      FigCFDictionarySetValueFromKeyInDict();
      FigCFDictionarySetValueFromKeyInDict();
      FigCFDictionarySetValueFromKeyInDict();
      FigCFDictionarySetValueFromKeyInDict();
      FigCFDictionarySetValueFromKeyInDict();
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
      CFMutableDictionaryRef v20 = 0;
LABEL_33:
      uint64_t v23 = *(OpaqueCMTimebase **)(DerivedStorage + 136);
      if (v23 == v12 && v23)
      {
        CFRelease(v12);
        *(void *)(DerivedStorage + 136) = 0;
      }
      if (*(unsigned char *)(DerivedStorage + 234))
      {
        *(unsigned char *)(DerivedStorage + 234) = 0;
        uint64_t v24 = *(void *)(DerivedStorage + 392);
        uint64_t v25 = *(void *)(DerivedStorage + 400);
        uint64_t v26 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v26) {
          uint64_t v27 = v26;
        }
        else {
          uint64_t v27 = 0;
        }
        CFMutableDictionaryRef v28 = *(void (**)(uint64_t, uint64_t, __CFString *, void))(v27 + 8);
        if (v28) {
          v28(v24, v25, @"RenderPipelineStateEndOfTrackReached", *MEMORY[0x1E4F1CFD0]);
        }
        fbaprp_postNotification(v10, @"PlayResourceReleased", 0);
      }
      goto LABEL_43;
    }
    goto LABEL_53;
  }
  LODWORD(v33.CFDictionarySetValue(theDict, key, value) = 0;
  os_log_type_t type = OS_LOG_TYPE_DEFAULT;
  CFTypeRef v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  CFMutableDictionaryRef v20 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (v20)
  {
    FigCFDictionarySetInt32();
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    CFMutableDictionaryRef Mutable = 0;
    goto LABEL_33;
  }
  CFMutableDictionaryRef Mutable = 0;
LABEL_43:
  CFRelease(v12);
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 48));
  fbaprp_releaseSetRateContext((const void **)a1);
  if (v20) {
    CFRelease(v20);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
LABEL_47:
  fbaprp_releaseAsync((uint64_t)v10);
}

void fbaprp_releaseSetRateContext(const void **a1)
{
  if (a1)
  {
    uint64_t v2 = *a1;
    if (v2)
    {
      CFRelease(v2);
      *a1 = 0;
    }
    uint64_t v3 = a1[8];
    if (v3) {
      CFRelease(v3);
    }
    free(a1);
  }
}

CMTime *fbaprp_startTimebase(float a1, uint64_t a2, OpaqueCMTimebase *a3, CMTime *a4, CMTime *a5, CMTime *a6)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = (_DWORD *)MEMORY[0x1E4F1EBA8];
  double v11 = a1;
  if (*MEMORY[0x1E4F1EBA8] == 1)
  {
    CMTime time = *a6;
    CMTimeGetSeconds(&time);
    CMClockRef HostTimeClock = CMClockGetHostTimeClock();
    CMClockGetTime(&v18, HostTimeClock);
    CMTime time = v18;
    CMTimeGetSeconds(&time);
    kdebug_trace();
  }
  CMTime immediateSourceTime = *a6;
  CMTimeConvertScale(&time, &immediateSourceTime, 1000000000, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
  *a6 = time;
  CMTime immediateSourceTime = *a4;
  CMTimeConvertScale(&time, &immediateSourceTime, 1000000000, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
  *a4 = time;
  CMTime immediateSourceTime = *a5;
  uint64_t result = CMTimeConvertScale(&time, &immediateSourceTime, 1000000000, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
  *a5 = time;
  a6->value += (uint64_t)((double)(a5->value - a4->value) / v11 + 0.5);
  if (a3)
  {
    CMClockOrTimebaseRef v14 = CMTimebaseCopySource(a3);
    memset(&v17, 0, sizeof(v17));
    CMClockRef v15 = CMClockGetHostTimeClock();
    CMTime time = *a6;
    CMSyncConvertTime(&v17, &time, v15, v14);
    if (v14) {
      CFRelease(v14);
    }
    CMTime immediateSourceTime = v17;
    CMTimeConvertScale(&time, &immediateSourceTime, 1000000000, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
    CMTime v17 = time;
    if (dword_1E9351028)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      uint64_t v10 = (_DWORD *)MEMORY[0x1E4F1EBA8];
    }
    CMTime time = *a4;
    CMTime immediateSourceTime = v17;
    uint64_t result = (CMTime *)CMTimebaseSetRateAndAnchorTime(a3, v11, &time, &immediateSourceTime);
  }
  if (*v10 == 1)
  {
    CMTime time = *a4;
    CMTimeGetSeconds(&time);
    CMTime time = *a5;
    CMTimeGetSeconds(&time);
    CMTime time = *a6;
    CMTimeGetSeconds(&time);
    return (CMTime *)kdebug_trace();
  }
  return result;
}

uint64_t FigBufferedAirPlayOutputProxySetRenderPipelineState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v11 = *(void *)(VTable + 16);
  uint64_t result = VTable + 16;
  uint64_t v10 = v11;
  if (v11) {
    uint64_t v12 = v10;
  }
  else {
    uint64_t v12 = 0;
  }
  float v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 8);
  if (v13)
  {
    return v13(a1, a2, a3, a4);
  }
  return result;
}

void fbaprp_postNotification(const void *a1, uint64_t a2, const void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a3) {
    CFRetain(a3);
  }
  CFRetain(a1);
  uint64_t v7 = *(NSObject **)(DerivedStorage + 8);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __fbaprp_postNotification_block_invoke;
  block[3] = &__block_descriptor_tmp_60;
  block[4] = a2;
  void block[5] = a1;
  void block[6] = a3;
  dispatch_async(v7, block);
}

void fbaprp_releaseAsync(uint64_t a1)
{
  if (a1)
  {
    global_queue = dispatch_get_global_queue(0, 0);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __fbaprp_releaseAsync_block_invoke;
    block[3] = &__block_descriptor_tmp_61_0;
    block[4] = a1;
    dispatch_async(global_queue, block);
  }
}

void __fbaprp_postNotification_block_invoke(uint64_t a1)
{
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  uint64_t v2 = *(const void **)(a1 + 48);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(void *)(a1 + 40);

  fbaprp_releaseAsync(v3);
}

void __fbaprp_releaseAsync_block_invoke(uint64_t a1)
{
}

uint64_t fbaprp_suspendAudioChainGuts(uint64_t a1)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v3 = DerivedStorage;
    if (dword_1E9351028)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v5 = *((void *)v3 + 47);
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 16);
    if (v8) {
      v8(v5, 1);
    }
    uint64_t v9 = *((void *)v3 + 49);
    uint64_t v10 = *((void *)v3 + 50);
    uint64_t VTable = CMBaseObjectGetVTable();
    uint64_t v14 = *(void *)(VTable + 16);
    uint64_t result = VTable + 16;
    uint64_t v13 = v14;
    if (v14) {
      uint64_t v15 = v13;
    }
    else {
      uint64_t v15 = 0;
    }
    uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 40);
    if (v16)
    {
      uint64_t result = v16(v9, v10, a1, 1);
      if (!result)
      {
        *((void *)v3 + 18) = 0x3F80000000000000;
        *((void *)v3 + 30) = 0;
        uint64_t v17 = MEMORY[0x1E4F1F9F8];
        long long v18 = *MEMORY[0x1E4F1F9F8];
        *(_OWORD *)(v3 + 184) = *MEMORY[0x1E4F1F9F8];
        uint64_t v19 = *(void *)(v17 + 16);
        *((void *)v3 + 25) = v19;
        *((_OWORD *)v3 + 10) = v18;
        *((void *)v3 + 22) = v19;
        *((_OWORD *)v3 + 13) = v18;
        *((void *)v3 + 28) = v19;
        uint64_t v20 = MEMORY[0x1E4F1FA48];
        *(_OWORD *)(v3 + 260) = *MEMORY[0x1E4F1FA48];
        *(void *)(v3 + 276) = *(void *)(v20 + 16);
        v3[96] = 0;
        *(_WORD *)(v3 + 233) = 0;
        v3[232] = 0;
      }
    }
  }
  return result;
}

void fbaprp_notificationsFromSubPipeManager(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, const void *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (FigCFEqual())
  {
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 48));
    if (*(unsigned char *)DerivedStorage
      || ((uint64_t v9 = *(void *)(DerivedStorage + 392),
           uint64_t v10 = *(void *)(DerivedStorage + 400),
           (uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16)) == 0)
        ? (uint64_t v12 = 0)
        : (uint64_t v12 = v11),
          (uint64_t v13 = *(unsigned int (**)(uint64_t, uint64_t, __CFString *, void))(v12 + 8)) == 0
       || v13(v9, v10, @"RenderPipelineStateEndOfTrackReached", *MEMORY[0x1E4F1CFD0])))
    {
      JUMPOUT(0x19970E930);
    }
    MEMORY[0x19970E930](*(void *)(DerivedStorage + 48));
  }

  fbaprp_postNotification(a2, a3, a5);
}

void fbaprp_timebaseRateChangedCallback(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)(DerivedStorage + 248) == a4)
  {
    uint64_t v7 = DerivedStorage;
    if (a2) {
      CFRetain(a2);
    }
    uint64_t v8 = *(NSObject **)(v7 + 40);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __fbaprp_timebaseRateChangedCallback_block_invoke;
    block[3] = &__block_descriptor_tmp_65;
    block[4] = v7;
    void block[5] = a4;
    void block[6] = a2;
    dispatch_async(v8, block);
  }
}

void __fbaprp_timebaseRateChangedCallback_block_invoke(void *a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  MEMORY[0x19970E910](*(void *)(a1[4] + 48));
  uint64_t v2 = a1[4];
  if (!*(unsigned char *)v2)
  {
    uint64_t v3 = (OpaqueCMTimebase *)a1[5];
    if (v3 == *(OpaqueCMTimebase **)(v2 + 248))
    {
      Effectivedouble Rate = CMTimebaseGetEffectiveRate(v3);
      uint64_t v2 = a1[4];
      if (*(unsigned char *)(v2 + 232))
      {
        double v5 = EffectiveRate;
        if (EffectiveRate != 0.0)
        {
          fabaprp_getOffsetToBAOTimeline(&time);
          *(CMTime *)(v2 + 184) = time;
          if (dword_1E9351028)
          {
            os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          uint64_t v2 = a1[4];
          *(unsigned char *)(v2 + 232) = 0;
          if ((*(_DWORD *)(v2 + 172) & 0x1D) != 1
            || (int v7 = fbaprp_synchronizeToTimebaseSetRateOnAudioChainGuts(a1[6], v5), v2 = a1[4], !v7))
          {
            *(unsigned char *)(v2 + 233) = 1;
          }
        }
      }
    }
  }
  MEMORY[0x19970E930](*(void *)(v2 + 48));
  uint64_t v8 = (const void *)a1[6];
  if (v8) {
    CFRelease(v8);
  }
}

void fabaprp_getOffsetToBAOTimeline(CMTime *a1@<X8>)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  CMTime v11 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  CMTime v10 = v11;
  uint64_t v3 = MEMORY[0x1E4F1FA48];
  *(_OWORD *)&a1->int64_t value = *MEMORY[0x1E4F1FA48];
  a1->CMTimeEpoch epoch = *(void *)(v3 + 16);
  uint64_t CMBaseObject = FigBufferedAirPlayOutputProxyGetCMBaseObject(*(void *)(DerivedStorage + 392));
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  int v7 = *(unsigned int (**)(uint64_t, __CFString *, void, CFTypeRef *))(v6 + 48);
  if (v7)
  {
    if (!v7(CMBaseObject, @"ZeroBasedTimebase", *MEMORY[0x1E4F1CF80], &cf))
    {
      CMTimebaseGetTime(&v11, *(CMTimebaseRef *)(DerivedStorage + 248));
      uint64_t v8 = *(const void **)(DerivedStorage + 248);
      CMTime time = v11;
      CMSyncConvertTime(&v10, &time, v8, cf);
      CMTime time = v11;
      CMTime rhs = v10;
      CMTimeSubtract(a1, &time, &rhs);
      if (dword_1E9351028)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
  }
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t FigBufferedAirPlayOutputProxyCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t CMBaseObject = FigBufferedAirPlayOutputProxyGetCMBaseObject(a1);
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  CMTime v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (!v10) {
    return 4294954514;
  }

  return v10(CMBaseObject, a2, a3, a4);
}

uint64_t fbaprp_copyEndPresentationTimeForQueuedSamples(uint64_t a1, const __CFAllocator *a2, CFDictionaryRef *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFDictionaryRef dictionaryRepresentation = 0;
  if (!a3) {
    return 0;
  }
  uint64_t v6 = DerivedStorage;
  CMBufferQueueGetEndPresentationTimeStamp(&time, *(CMBufferQueueRef *)(DerivedStorage + 128));
  CMTimeValue value = time.value;
  CMTimeScale timescale = time.timescale;
  if (time.flags)
  {
    time.CMTimeValue value = value;
    time.CMTimeScale timescale = timescale;
    CFDictionaryRef v10 = CMTimeCopyAsDictionary(&time, a2);
    uint64_t v11 = 0;
    *a3 = v10;
  }
  else
  {
    uint64_t FigBaseObject = FigSampleBufferProcessorGetFigBaseObject(*(void *)(v6 + 72));
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, void, CFDictionaryRef *))(v9 + 48);
    if (v12)
    {
      uint64_t v11 = v12(FigBaseObject, 0x1EE575278, *MEMORY[0x1E4F1CF80], &dictionaryRepresentation);
      CFDictionaryRef v13 = dictionaryRepresentation;
      if (!v11)
      {
        CMTimeMakeFromDictionary(&time, dictionaryRepresentation);
        CMTimeValue value = time.value;
        CMTimeScale timescale = time.timescale;
        CFDictionaryRef v13 = dictionaryRepresentation;
        if (dictionaryRepresentation)
        {
          CFDictionaryRef v14 = (const __CFDictionary *)CFRetain(dictionaryRepresentation);
          CFDictionaryRef v13 = dictionaryRepresentation;
        }
        else
        {
          CFDictionaryRef v14 = 0;
        }
        *a3 = v14;
      }
      if (v13) {
        CFRelease(v13);
      }
    }
    else
    {
      return 4294954514;
    }
  }
  return v11;
}

uint64_t fbaprp_copyEndPresentationTimeForDecodedSamples(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v11 = 0;
  if (a3)
  {
    uint64_t FigBaseObject = FigSampleBufferProcessorGetFigBaseObject(*(void *)(DerivedStorage + 72));
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(v8 + 48);
    if (v9)
    {
      uint64_t result = v9(FigBaseObject, 0x1EE575278, a2, &v11);
      if (!result) {
        *a3 = v11;
      }
    }
    else
    {
      return 4294954514;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t fbaprp_createBufferedAirPlaySampleBufferConsumer(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v21 = 0;
  memset(&v20, 0, sizeof(v20));
  CMTimeMake(&v20, 2, 1);
  memset(&v19, 0, sizeof(v19));
  CMTimeMake(&v19, 10, 1);
  if (!a2) {
    goto LABEL_18;
  }
  uint64_t v4 = *(void *)(DerivedStorage + 128);
  CMTime time = v19;
  CMTime v17 = v20;
  uint64_t v5 = FigSampleBufferConsumerCreateForBufferQueue(v4, (long long *)&time.value, (long long *)&v17.value, &v21);
  if (v5)
  {
LABEL_19:
    uint64_t v15 = v5;
    CFDictionaryRef v14 = 0;
    goto LABEL_13;
  }
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CMTime time = *(CMTime *)(DerivedStorage + 336);
  CFDictionaryRef v7 = CMTimeCopyAsDictionary(&time, v6);
  if (!v7)
  {
LABEL_18:
    uint64_t v5 = FigSignalErrorAt();
    goto LABEL_19;
  }
  CFDictionaryRef v8 = v7;
  uint64_t FigBaseObject = FigSampleBufferConsumerGetFigBaseObject(v21);
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = *(uint64_t (**)(uint64_t, __CFString *, CFDictionaryRef))(v11 + 56);
  if (v12)
  {
    uint64_t v13 = v12(FigBaseObject, @"PrerollDuration", v8);
    if (v13)
    {
      uint64_t v15 = v13;
      CFDictionaryRef v14 = 0;
    }
    else
    {
      CFDictionaryRef v14 = (const void *)FigCFWeakReferenceHolderCreateWithReferencedObject();
      if (v14)
      {
        CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 88), v14);
        uint64_t v15 = 0;
        *a2 = v21;
        CFTypeRef v21 = 0;
      }
      else
      {
        uint64_t v15 = FigSignalErrorAt();
      }
    }
  }
  else
  {
    CFDictionaryRef v14 = 0;
    uint64_t v15 = 4294954514;
  }
  CFRelease(v8);
LABEL_13:
  if (v21) {
    CFRelease(v21);
  }
  if (v14) {
    CFRelease(v14);
  }
  return v15;
}

CFIndex fbaprp_cleanFreedSampleBufferConsumers()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFIndex result = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 88));
  if (result >= 1)
  {
    for (CFIndex i = 0; i < result; ++i)
    {
      CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 88), i);
      uint64_t v3 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
      if (v3) {
        CFRelease(v3);
      }
      else {
        CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(DerivedStorage + 88), i--);
      }
      CFIndex result = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 88));
    }
  }
  return result;
}

uint64_t FigBufferedAirPlaySubPipeManagerForRenderPipelineCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t CMBaseObject = FigBufferedAirPlaySubPipeManagerForRenderPipelineGetCMBaseObject(a1);
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (!v10) {
    return 4294954514;
  }

  return v10(CMBaseObject, a2, a3, a4);
}

uint64_t FigBufferedAirPlayOutputProxySetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t CMBaseObject = FigBufferedAirPlayOutputProxyGetCMBaseObject(a1);
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 56);
  if (!v8) {
    return 4294954514;
  }

  return v8(CMBaseObject, a2, a3);
}

uint64_t fbaprp_setAudioProcessingTap(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = getenv("ENABLE_BUFFERED_LOCAL_PLAYBACK");
  getenv("ENABLE_BUFFERED_LOCAL_PLAYBACK_BUT_TAP_AT_FAQRP");
  if (v4) {
    LODWORD(v4) = *v4 == 49;
  }
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 48));
  if (*(unsigned char *)DerivedStorage)
  {
    char v14 = 0;
    uint64_t v13 = 4294954511;
    goto LABEL_25;
  }
  if (v4)
  {
    uint64_t CMBaseObject = FigBufferedAirPlayOutputProxyGetCMBaseObject(*(void *)(DerivedStorage + 392));
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v11 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v7 + 56);
    if (!v11)
    {
      char v14 = 0;
      uint64_t v13 = 4294954514;
      goto LABEL_25;
    }
    uint64_t v12 = v11(CMBaseObject, @"AudioProcessingTap", a2);
    goto LABEL_13;
  }
  if (*(unsigned char *)(DerivedStorage + 96))
  {
    uint64_t v12 = FigSignalErrorAt();
LABEL_13:
    uint64_t v13 = v12;
    char v14 = 0;
    goto LABEL_25;
  }
  uint64_t v8 = FigBufferedAirPlaySubPipeManagerForRenderPipelineGetCMBaseObject(*(void *)(DerivedStorage + 376));
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v15 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v10 + 56);
  if (v15) {
    uint64_t v13 = v15(v8, @"AudioProcessingTap", a2);
  }
  else {
    uint64_t v13 = 4294954514;
  }
  if (a2) {
    BOOL v16 = v13 == 0;
  }
  else {
    BOOL v16 = 0;
  }
  char v14 = v16;
LABEL_25:
  *(unsigned char *)(DerivedStorage + 112) = v14;
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 48));
  return v13;
}

uint64_t FigBufferedAirPlayAudioRenderPipelineSetRateAndAnchorTime(const void *a1, uint64_t a2, uint64_t a3, float a4)
{
  uint64_t v92 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 48));
  if (*(unsigned char *)DerivedStorage)
  {
    uint64_t v42 = FigSignalErrorAt();
    goto LABEL_113;
  }
  uint64_t v68 = DerivedStorage;
  CMTimeValue v76 = *(void *)a2;
  CMTimeFlags v9 = *(_DWORD *)(a2 + 12);
  CMTimeScale v77 = *(_DWORD *)(a2 + 8);
  CMTimeEpoch v70 = *(void *)(a2 + 16);
  *(_OWORD *)&v71.unsigned int value = *(_OWORD *)a3;
  v71.CMTimeEpoch epoch = *(void *)(a3 + 16);
  uint64_t v10 = (_OWORD *)MEMORY[0x1E4F1F9F8];
  CMTimeValue v86 = *MEMORY[0x1E4F1F9F8];
  CMTimeFlags flags = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 12);
  CMTimeScale timescale = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 8);
  CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  uint64_t v12 = CMBaseObjectGetDerivedStorage();
  if (dword_1E9351028)
  {
    LODWORD(v73.CFDictionarySetValue(theDict, key, value) = 0;
    LOBYTE(type.CFDictionarySetValue(theDict, key, value) = 0;
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  double v14 = a4;
  if (a4 == 0.0)
  {
    if (*(double *)(v12 + 240) != v14
      || (CMTimebaseGetTime(&type, *(CMTimebaseRef *)(v12 + 248)),
          time.unsigned int value = v76,
          time.CMTimeScale timescale = v77,
          time.CMTimeFlags flags = v9,
          time.CMTimeEpoch epoch = v70,
          CMTimeCompare(&time, &type)))
    {
      uint64_t v15 = CMBaseObjectGetDerivedStorage();
      uint64_t v16 = v15;
      if ((v9 & 0x1D) == 1)
      {
        CMClockOrTimebaseRef v17 = CMTimebaseCopySource(*(CMTimebaseRef *)(v15 + 248));
        if (dword_1E9351028)
        {
          LODWORD(v73.CFDictionarySetValue(theDict, key, value) = 0;
          v75[0] = OS_LOG_TYPE_DEFAULT;
          long long v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int value = v73.value;
          if (os_log_type_enabled(v18, v75[0])) {
            unsigned int v20 = value;
          }
          else {
            unsigned int v20 = value & 0xFFFFFFFE;
          }
          if (v20)
          {
            if (a1) {
              CFTypeRef v21 = (const char *)(CMBaseObjectGetDerivedStorage() + 408);
            }
            else {
              CFTypeRef v21 = "";
            }
            time.unsigned int value = v76;
            time.CMTimeScale timescale = v77;
            time.CMTimeFlags flags = v9;
            time.CMTimeEpoch epoch = v70;
            Float64 Seconds = CMTimeGetSeconds(&time);
            LODWORD(timebaseTime.CFDictionarySetValue(theDict, key, value) = 136315906;
            *(CMTimeValue *)((char *)&timebaseTime.value + 4) = (CMTimeValue)"fbaprp_stopTimebase";
            LOWORD(timebaseTime.flags) = 2048;
            *(void *)((char *)&timebaseTime.flags + 2) = a1;
            HIWORD(timebaseTime.epoch) = 2082;
            unsigned int v79 = v21;
            __int16 v80 = 2048;
            Float64 v81 = Seconds;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        uint64_t v34 = *(OpaqueCMTimebase **)(v16 + 248);
        CMSyncGetTime(&time, v17);
        timebaseTime.unsigned int value = v76;
        timebaseTime.CMTimeScale timescale = v77;
        timebaseTime.CMTimeFlags flags = v9;
        timebaseTime.CMTimeEpoch epoch = v70;
        CMTimebaseSetRateAndAnchorTime(v34, 0.0, &timebaseTime, &time);
        if (v17) {
          CFRelease(v17);
        }
      }
      else
      {
        if (dword_1E9351028)
        {
          *(_DWORD *)int v75 = 0;
          os_log_type_t v74 = OS_LOG_TYPE_DEFAULT;
          CFMutableDictionaryRef v29 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v30 = *(_DWORD *)v75;
          if (os_log_type_enabled(v29, v74)) {
            unsigned int v31 = v30;
          }
          else {
            unsigned int v31 = v30 & 0xFFFFFFFE;
          }
          if (v31)
          {
            if (a1) {
              uint64_t v32 = (const char *)(CMBaseObjectGetDerivedStorage() + 408);
            }
            else {
              uint64_t v32 = "";
            }
            CMTimebaseGetTime(&v73, *(CMTimebaseRef *)(v16 + 248));
            Float64 v35 = CMTimeGetSeconds(&v73);
            LODWORD(timebaseTime.CFDictionarySetValue(theDict, key, value) = 136315906;
            *(CMTimeValue *)((char *)&timebaseTime.value + 4) = (CMTimeValue)"fbaprp_stopTimebase";
            LOWORD(timebaseTime.flags) = 2048;
            *(void *)((char *)&timebaseTime.flags + 2) = a1;
            HIWORD(timebaseTime.epoch) = 2082;
            unsigned int v79 = v32;
            __int16 v80 = 2048;
            Float64 v81 = v35;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        *(_OWORD *)&time.unsigned int value = *v10;
        time.CMTimeEpoch epoch = epoch;
        *(_OWORD *)&timebaseTime.unsigned int value = *(_OWORD *)&time.value;
        timebaseTime.CMTimeEpoch epoch = epoch;
        CMTimebaseSetRateAndAnchorTimeWithFlags();
      }
      if (*(unsigned char *)(v12 + 232))
      {
        *(_WORD *)(v12 + 232) = 0;
        uint64_t v36 = *(void *)(v12 + 392);
        uint64_t v37 = *(void *)(v12 + 400);
        uint64_t v38 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v38) {
          uint64_t v39 = v38;
        }
        else {
          uint64_t v39 = 0;
        }
        uint64_t v40 = *(uint64_t (**)(uint64_t, uint64_t, __CFString *, void))(v39 + 8);
        if (!v40)
        {
          uint64_t v42 = 4294954514;
LABEL_112:
          uint64_t DerivedStorage = v68;
          goto LABEL_113;
        }
        uint64_t v41 = v40(v36, v37, @"RenderPipelineStateSynchronizeToTimebase", *MEMORY[0x1E4F1CFC8]);
        if (v41)
        {
          uint64_t v42 = v41;
          goto LABEL_112;
        }
      }
      uint64_t v24 = 0;
      goto LABEL_101;
    }
LABEL_117:
    uint64_t v42 = 0;
    goto LABEL_112;
  }
  if (*MEMORY[0x1E4F1EBA0])
  {
    float v22 = fig_log_handle();
    if (os_signpost_enabled(v22))
    {
      time.unsigned int value = v76;
      time.CMTimeScale timescale = v77;
      time.CMTimeFlags flags = v9;
      time.CMTimeEpoch epoch = v70;
      Float64 v23 = CMTimeGetSeconds(&time);
      LODWORD(time.CFDictionarySetValue(theDict, key, value) = 134218496;
      *(CMTimeValue *)((char *)&time.value + 4) = (CMTimeValue)a1;
      LOWORD(time.flags) = 2048;
      *(double *)((char *)&time.flags + 2) = a4;
      HIWORD(time.epoch) = 2048;
      Float64 v89 = v23;
      _os_signpost_emit_with_name_impl(&dword_193E8D000, v22, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "WHA_BAORP_SetRateAndAnchorTime", " enableTelemetry=YES renderPipeline=%llu, timebaseRate=%1.2f, itemTime=%1.3f", (uint8_t *)&time, 0x20u);
    }
  }
  if (*MEMORY[0x1E4F1EB90])
  {
    time.unsigned int value = v76;
    time.CMTimeScale timescale = v77;
    time.CMTimeFlags flags = v9;
    time.CMTimeEpoch epoch = v70;
    CMTimeGetSeconds(&time);
    fig_gm_ktrace_wrapper();
  }
  if (*(double *)(v12 + 240) == v14) {
    goto LABEL_117;
  }
  uint64_t v24 = mach_absolute_time();
  if (!*(unsigned char *)(v12 + 96)) {
    goto LABEL_68;
  }
  if (*(float *)(v12 + 148) == a4) {
    goto LABEL_61;
  }
  if (dword_1E9351028)
  {
    LODWORD(v73.CFDictionarySetValue(theDict, key, value) = 0;
    LOBYTE(type.CFDictionarySetValue(theDict, key, value) = 0;
    uint64_t v25 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v26 = v73.value;
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v27 = v26;
    }
    else {
      unsigned int v27 = v26 & 0xFFFFFFFE;
    }
    if (v27)
    {
      if (a1) {
        CFMutableDictionaryRef v28 = (const char *)(CMBaseObjectGetDerivedStorage() + 408);
      }
      else {
        CFMutableDictionaryRef v28 = "";
      }
      Float64 v43 = *(float *)(v12 + 148);
      LODWORD(timebaseTime.CFDictionarySetValue(theDict, key, value) = 136315906;
      *(CMTimeValue *)((char *)&timebaseTime.value + 4) = (CMTimeValue)"fbaprp_setRateAndAnchorTime";
      LOWORD(timebaseTime.flags) = 2048;
      *(void *)((char *)&timebaseTime.flags + 2) = a1;
      HIWORD(timebaseTime.epoch) = 2082;
      unsigned int v79 = v28;
      __int16 v80 = 2048;
      Float64 v81 = v43;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  fbaprp_suspendAudioChainGuts((uint64_t)a1);
  fbaprp_postNotification(a1, @"PrerollLost", 0);
  if (*(unsigned char *)(v12 + 96))
  {
LABEL_61:
    if (dword_1E9351028)
    {
      LODWORD(v73.CFDictionarySetValue(theDict, key, value) = 0;
      LOBYTE(type.CFDictionarySetValue(theDict, key, value) = 0;
      uint64_t v44 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v45 = v73.value;
      if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v46 = v45;
      }
      else {
        unsigned int v46 = v45 & 0xFFFFFFFE;
      }
      if (v46)
      {
        if (a1) {
          CMTime v47 = (const char *)(CMBaseObjectGetDerivedStorage() + 408);
        }
        else {
          CMTime v47 = "";
        }
        LODWORD(timebaseTime.CFDictionarySetValue(theDict, key, value) = 136315650;
        *(CMTimeValue *)((char *)&timebaseTime.value + 4) = (CMTimeValue)"fbaprp_setRateAndAnchorTime";
        LOWORD(timebaseTime.flags) = 2048;
        *(void *)((char *)&timebaseTime.flags + 2) = a1;
        HIWORD(timebaseTime.epoch) = 2082;
        unsigned int v79 = v47;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      if ((flags & 1) == 0) {
        goto LABEL_101;
      }
      goto LABEL_89;
    }
  }
  else
  {
LABEL_68:
    if (v9)
    {
      CMTimeValue v86 = v76;
      CMTimeScale timescale = v77;
      CMTimeEpoch epoch = v70;
      CMTimeFlags v48 = v9;
      CMTimeFlags flags = v9;
    }
    else
    {
      CMTimeFlags v48 = v9;
      CMTimebaseGetTime(&time, *(CMTimebaseRef *)(v12 + 248));
      CMTimeValue v86 = time.value;
      CMTimeFlags flags = time.flags;
      CMTimeScale timescale = time.timescale;
      CMTimeEpoch epoch = time.epoch;
      CMTime timebaseTime = *(CMTime *)(v12 + 160);
      CMTimeCompare(&time, &timebaseTime);
    }
    if (dword_1E9351028)
    {
      LODWORD(v73.CFDictionarySetValue(theDict, key, value) = 0;
      LOBYTE(type.CFDictionarySetValue(theDict, key, value) = 0;
      CMTime v49 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v50 = v73.value;
      if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v51 = v50;
      }
      else {
        unsigned int v51 = v50 & 0xFFFFFFFE;
      }
      if (v51)
      {
        if (a1) {
          uint64_t v52 = (const char *)(CMBaseObjectGetDerivedStorage() + 408);
        }
        else {
          uint64_t v52 = "";
        }
        CMTime time = v71;
        Float64 v53 = CMTimeGetSeconds(&time);
        time.unsigned int value = v86;
        time.CMTimeScale timescale = timescale;
        time.CMTimeFlags flags = flags;
        time.CMTimeEpoch epoch = epoch;
        Float64 v54 = CMTimeGetSeconds(&time);
        LODWORD(timebaseTime.CFDictionarySetValue(theDict, key, value) = 136316418;
        *(CMTimeValue *)((char *)&timebaseTime.value + 4) = (CMTimeValue)"fbaprp_setRateAndAnchorTime";
        LOWORD(timebaseTime.flags) = 2048;
        *(void *)((char *)&timebaseTime.flags + 2) = a1;
        HIWORD(timebaseTime.epoch) = 2082;
        unsigned int v79 = v52;
        __int16 v80 = 2048;
        Float64 v81 = a4;
        __int16 v82 = 2048;
        Float64 v83 = v53;
        __int16 v84 = 2048;
        Float64 v85 = v54;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    time.unsigned int value = v86;
    time.CMTimeScale timescale = timescale;
    time.CMTimeFlags flags = flags;
    time.CMTimeEpoch epoch = epoch;
    CMTime timebaseTime = v71;
    uint64_t started = fbaprp_startAudioChainGuts(a4, (uint64_t)a1, 1, (long long *)&time.value, (long long *)&timebaseTime.value);
    CMTimeFlags v9 = v48;
    if (started)
    {
      uint64_t v42 = started;
      uint64_t DerivedStorage = v68;
      goto LABEL_119;
    }
  }
  if (flags)
  {
LABEL_89:
    if ((*(unsigned char *)(v12 + 196) & 1) == 0)
    {
      *(void *)(v12 + 184) = v86;
      *(_DWORD *)(v12 + 192) = timescale;
      *(_DWORD *)(v12 + 196) = flags;
      *(void *)(v12 + 200) = epoch;
      if (dword_1E9351028)
      {
        LODWORD(v73.CFDictionarySetValue(theDict, key, value) = 0;
        LOBYTE(type.CFDictionarySetValue(theDict, key, value) = 0;
        CFTypeRef v56 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v57 = v73.value;
        if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v58 = v57;
        }
        else {
          unsigned int v58 = v57 & 0xFFFFFFFE;
        }
        if (v58)
        {
          if (a1) {
            int v59 = (const char *)(CMBaseObjectGetDerivedStorage() + 408);
          }
          else {
            int v59 = "";
          }
          CMTime time = *(CMTime *)(v12 + 184);
          Float64 v60 = CMTimeGetSeconds(&time);
          LODWORD(timebaseTime.CFDictionarySetValue(theDict, key, value) = 136315906;
          *(CMTimeValue *)((char *)&timebaseTime.value + 4) = (CMTimeValue)"fbaprp_setRateAndAnchorTime";
          LOWORD(timebaseTime.flags) = 2048;
          *(void *)((char *)&timebaseTime.flags + 2) = a1;
          HIWORD(timebaseTime.epoch) = 2082;
          unsigned int v79 = v59;
          __int16 v80 = 2048;
          Float64 v81 = v60;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
  }
LABEL_101:
  if ((flags & 1) == 0)
  {
    if (v9)
    {
      CMTimeValue v86 = v76;
      CMTimeScale timescale = v77;
      CMTimeEpoch epoch = v70;
      CMTimeFlags flags = v9;
    }
    else
    {
      CMTimebaseGetTime(&time, *(CMTimebaseRef *)(v12 + 248));
      CMTimeValue v86 = time.value;
      CMTimeFlags flags = time.flags;
      CMTimeScale timescale = time.timescale;
      CMTimeEpoch epoch = time.epoch;
    }
  }
  uint64_t v61 = *(void *)(v12 + 376);
  uint64_t v62 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v62) {
    uint64_t v63 = v62;
  }
  else {
    uint64_t v63 = 0;
  }
  CMTime v64 = *(void (**)(uint64_t, CMTime *, CMTime *, double))(v63 + 8);
  if (v64)
  {
    time.unsigned int value = v86;
    time.CMTimeScale timescale = timescale;
    time.CMTimeFlags flags = flags;
    time.CMTimeEpoch epoch = epoch;
    CMTime timebaseTime = v71;
    v64(v61, &time, &timebaseTime, a4);
  }
  CMTime time = *(CMTime *)(v12 + 184);
  CMTime timebaseTime = v71;
  uint64_t v42 = fbaprp_setRateOnAudioChainGuts((uint64_t)a1, (uint64_t)&time, &timebaseTime, v24, a4);
  if (!v42)
  {
    *(double *)(v12 + 240) = v14;
    goto LABEL_112;
  }
  uint64_t DerivedStorage = v68;
  if (a4 == 0.0) {
    goto LABEL_113;
  }
LABEL_119:
  if (*MEMORY[0x1E4F1EBA0])
  {
    unsigned int v66 = fig_log_handle();
    if (os_signpost_enabled(v66))
    {
      time.unsigned int value = v76;
      time.CMTimeScale timescale = v77;
      time.CMTimeFlags flags = v9;
      time.CMTimeEpoch epoch = v70;
      Float64 v67 = CMTimeGetSeconds(&time);
      LODWORD(time.CFDictionarySetValue(theDict, key, value) = 134218752;
      *(CMTimeValue *)((char *)&time.value + 4) = (CMTimeValue)a1;
      LOWORD(time.flags) = 2048;
      *(double *)((char *)&time.flags + 2) = a4;
      HIWORD(time.epoch) = 2048;
      Float64 v89 = v67;
      __int16 v90 = 2048;
      uint64_t v91 = (int)v42;
      _os_signpost_emit_with_name_impl(&dword_193E8D000, v66, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "WHA_BAORP_SetRateAndAnchorTime", " enableTelemetry=YES renderPipeline=%llu, timebaseRate=%1.2f, itemTime=%1.3f, error=%llu", (uint8_t *)&time, 0x2Au);
    }
  }
  if (*MEMORY[0x1E4F1EB90])
  {
    time.unsigned int value = v76;
    time.CMTimeScale timescale = v77;
    time.CMTimeFlags flags = v9;
    time.CMTimeEpoch epoch = v70;
    CMTimeGetSeconds(&time);
    fig_gm_ktrace_wrapper();
  }
LABEL_113:
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 48));
  return v42;
}

uint64_t FigBufferedAirPlayAudioRenderPipelineStartAndUseTimebaseAtTransition(uint64_t a1, void *a2, long long *a3, const void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2 && a4 && (uint64_t v12 = DerivedStorage, CMTimebaseGetRate((CMTimebaseRef)a2) == 0.0))
  {
    MEMORY[0x19970E910](*(void *)(v12 + 48));
    long long v19 = *a3;
    uint64_t v20 = *((void *)a3 + 2);
    if (*(unsigned char *)CMBaseObjectGetDerivedStorage()
      || (uint64_t v13 = malloc_type_calloc(1uLL, 0x88uLL, 0x10E0040BF52E99EuLL)) == 0)
    {
      uint64_t v17 = FigSignalErrorAt();
    }
    else
    {
      double v14 = v13;
      v13[1] = CFRetain(a4);
      v14[6] = CFRetain(a2);
      *(_OWORD *)(v14 + 7) = v19;
      v14[9] = v20;
      v14[10] = a5;
      uint64_t v15 = MEMORY[0x1E4F1FA48];
      *(_OWORD *)(v14 + 13) = *MEMORY[0x1E4F1FA48];
      v14[15] = *(void *)(v15 + 16);
      *((unsigned char *)v14 + 128) = 0;
      v14[11] = a6;
      v14[12] = 0;
      uint64_t v16 = CMBaseObjectGetDerivedStorage();
      uint64_t v17 = 0;
      *double v14 = 0;
      **(void **)(v16 + 296) = v14;
      *(void *)(v16 + 296) = v14;
    }
    MEMORY[0x19970E930](*(void *)(v12 + 48));
    return v17;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigBufferedAirPlayAudioRenderPipelineSynchronizeToTimebase(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 48));
  if (*(unsigned char *)DerivedStorage)
  {
    uint64_t v12 = FigSignalErrorAt();
    goto LABEL_19;
  }
  uint64_t v3 = CMBaseObjectGetDerivedStorage();
  outRelativedouble Rate = 0.0;
  memset(&outOfClockOrTimebaseAnchorTime, 0, sizeof(outOfClockOrTimebaseAnchorTime));
  memset(&outRelativeToClockOrTimebaseAnchorTime, 0, sizeof(outRelativeToClockOrTimebaseAnchorTime));
  CMClockOrTimebaseRef v4 = CMTimebaseCopySource(*(CMTimebaseRef *)(v3 + 248));
  uint64_t RelativeRateAndAnchorTime = CMSyncGetRelativeRateAndAnchorTime(*(CMClockOrTimebaseRef *)(v3 + 248), v4, &outRelativeRate, &outOfClockOrTimebaseAnchorTime, &outRelativeToClockOrTimebaseAnchorTime);
  if (RelativeRateAndAnchorTime) {
    goto LABEL_20;
  }
  uint64_t v6 = *(void *)(v3 + 392);
  uint64_t v7 = *(void *)(v3 + 400);
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, __CFString *, void))(v9 + 8);
  if (!v10)
  {
    uint64_t v12 = 4294954514;
    if (!v4) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  uint64_t RelativeRateAndAnchorTime = v10(v6, v7, @"RenderPipelineStateSynchronizeToTimebase", *MEMORY[0x1E4F1CFD0]);
  if (RelativeRateAndAnchorTime) {
    goto LABEL_20;
  }
  if (outRelativeRate == 0.0)
  {
    char v13 = 1;
    goto LABEL_17;
  }
  fabaprp_getOffsetToBAOTimeline(&time);
  *(CMTime *)(v3 + 184) = time;
  if (dword_1E9351028)
  {
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if ((*(_DWORD *)(v3 + 172) & 0x1D) == 1)
  {
    uint64_t RelativeRateAndAnchorTime = fbaprp_synchronizeToTimebaseSetRateOnAudioChainGuts(a1, outRelativeRate);
    if (RelativeRateAndAnchorTime)
    {
LABEL_20:
      uint64_t v12 = RelativeRateAndAnchorTime;
      if (!v4) {
        goto LABEL_19;
      }
      goto LABEL_18;
    }
  }
  char v13 = 0;
  *(unsigned char *)(v3 + 233) = 1;
LABEL_17:
  uint64_t v12 = 0;
  *(unsigned char *)(v3 + 232) = v13;
  if (v4) {
LABEL_18:
  }
    CFRelease(v4);
LABEL_19:
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 48));
  return v12;
}

uint64_t FigBufferedAirPlayAudioRenderPipelineReset(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 48));
  if (*(unsigned char *)DerivedStorage)
  {
    uint64_t v7 = FigSignalErrorAt();
    goto LABEL_39;
  }
  uint64_t v5 = CMBaseObjectGetDerivedStorage();
  if (dword_1E9351028)
  {
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v7 = FigMediaProcessorStop(*(void *)(v5 + 56));
  if (v7) {
    goto LABEL_39;
  }
  uint64_t v7 = FigMediaProcessorWaitUntilCompletelyStopped(*(void *)(v5 + 56));
  if (v7) {
    goto LABEL_39;
  }
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListeners();
  uint64_t v8 = *(void *)(v5 + 64);
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(uint64_t (**)(uint64_t, __CFString *, void))(v10 + 56);
  if (!v11) {
    goto LABEL_36;
  }
  uint64_t v7 = v11(v8, @"DownstreamConsumer", 0);
  if (v7)
  {
LABEL_39:
    uint64_t v31 = v7;
    goto LABEL_37;
  }
  uint64_t v12 = *(void *)(v5 + 376);
  uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v13) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v14 + 16);
  if (v15) {
    v15(v12, a2);
  }
  CMBufferQueueReset(*(CMBufferQueueRef *)(v5 + 128));
  if (!*(unsigned char *)(v5 + 256)) {
    goto LABEL_22;
  }
  uint64_t v16 = *(void *)(v5 + 392);
  uint64_t v17 = *(void *)(v5 + 400);
  uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v19 = v18 ? v18 : 0;
  uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 40);
  if (!v20)
  {
LABEL_36:
    uint64_t v31 = 4294954514;
    goto LABEL_37;
  }
  uint64_t v7 = v20(v16, v17, a1, a2);
  if (v7) {
    goto LABEL_39;
  }
LABEL_22:
  *(void *)(v5 + 144) = 0x3F80000000000000;
  *(void *)(v5 + 240) = 0;
  uint64_t v21 = MEMORY[0x1E4F1F9F8];
  long long v22 = *MEMORY[0x1E4F1F9F8];
  *(_OWORD *)(v5 + 160) = *MEMORY[0x1E4F1F9F8];
  uint64_t v23 = *(void *)(v21 + 16);
  *(void *)(v5 + 176) = v23;
  *(_OWORD *)(v5 + 184) = v22;
  *(void *)(v5 + 200) = v23;
  *(_OWORD *)(v5 + 208) = v22;
  *(void *)(v5 + 224) = v23;
  uint64_t v24 = MEMORY[0x1E4F1FA48];
  *(_OWORD *)(v5 + 260) = *MEMORY[0x1E4F1FA48];
  *(void *)(v5 + 276) = *(void *)(v24 + 16);
  *(unsigned char *)(v5 + 96) = 0;
  *(_WORD *)(v5 + 233) = 0;
  *(unsigned char *)(v5 + 232) = 0;
  fbaprp_transitionRosterRemoveAll();
  uint64_t v25 = *(const void **)(v5 + 304);
  if (v25)
  {
    CFRelease(v25);
    *(void *)(v5 + 304) = 0;
  }
  unsigned int v26 = *(const void **)(v5 + 72);
  if (v26)
  {
    CFRelease(v26);
    *(void *)(v5 + 72) = 0;
  }
  unsigned int v27 = *(const void **)(v5 + 136);
  if (v27)
  {
    CFRelease(v27);
    *(void *)(v5 + 136) = 0;
  }
  CFMutableDictionaryRef v28 = *(const void **)(v5 + 360);
  if (v28)
  {
    CFRelease(v28);
    *(void *)(v5 + 360) = 0;
  }
  CFMutableDictionaryRef v29 = *(const void **)(v5 + 56);
  *(void *)(v5 + 56) = 0;
  uint64_t v30 = fbaprp_setupBufferedAirPlayMediaProcessor();
  if (!v30)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    uint64_t v30 = FigNotificationCenterRemoveWeakListeners();
    if (!v30)
    {
      uint64_t v30 = fbaprp_configureSubPipeManager();
      if (!v30) {
        uint64_t v30 = FigMediaProcessorGo(*(void *)(v5 + 56));
      }
    }
  }
  uint64_t v31 = v30;
  if (v29) {
    CFRelease(v29);
  }
LABEL_37:
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 48));
  return v31;
}

uint64_t FigBufferedAirPlayAudioRenderPipelineFinishSettingRate(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_OWORD *)&v19.unsigned int value = *MEMORY[0x1E4F1F9F8];
  CMTimeEpoch v3 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  v19.CMTimeEpoch epoch = v3;
  long long v14 = *(_OWORD *)&v19.value;
  *(_OWORD *)&v18.unsigned int value = *(_OWORD *)&v19.value;
  v18.CMTimeEpoch epoch = v3;
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 48));
  if (*(unsigned char *)DerivedStorage) {
    goto LABEL_16;
  }
  if (!*(void *)(DerivedStorage + 136))
  {
    uint64_t v6 = 0;
    goto LABEL_15;
  }
  if (*(float *)(DerivedStorage + 144) == 0.0)
  {
LABEL_16:
    uint64_t started = FigSignalErrorAt();
LABEL_17:
    uint64_t v6 = started;
    goto LABEL_15;
  }
  CMClockOrTimebaseRef v4 = (_OWORD *)(DerivedStorage + 208);
  if (*(unsigned char *)(DerivedStorage + 220))
  {
    *(_OWORD *)&v19.unsigned int value = *v4;
    v19.CMTimeEpoch epoch = *(void *)(DerivedStorage + 224);
  }
  else
  {
    CMClockRef HostTimeClock = CMClockGetHostTimeClock();
    CMClockGetTime(&v19, HostTimeClock);
  }
  uint64_t v7 = (_OWORD *)(DerivedStorage + 160);
  if (*(unsigned char *)(DerivedStorage + 172))
  {
    *(_OWORD *)&v18.unsigned int value = *v7;
    v18.CMTimeEpoch epoch = *(void *)(DerivedStorage + 176);
  }
  else
  {
    CMTimebaseGetTime(&v18, *(CMTimebaseRef *)(DerivedStorage + 136));
  }
  uint64_t v8 = *(OpaqueCMTimebase **)(DerivedStorage + 136);
  float v9 = *(float *)(DerivedStorage + 144);
  CMTime v17 = v18;
  CMTime v16 = v18;
  CMTime v15 = v19;
  fbaprp_startTimebase(v9, a1, v8, &v17, &v16, &v15);
  float v10 = *(float *)(DerivedStorage + 144);
  *(_OWORD *)&v17.unsigned int value = *v7;
  v17.CMTimeEpoch epoch = *(void *)(DerivedStorage + 176);
  *(_OWORD *)&v16.unsigned int value = *v4;
  v16.CMTimeEpoch epoch = *(void *)(DerivedStorage + 224);
  uint64_t started = fbaprp_startAudioChainGuts(v10, a1, 1, (long long *)&v17.value, (long long *)&v16.value);
  if (started) {
    goto LABEL_17;
  }
  uint64_t v12 = *(const void **)(DerivedStorage + 136);
  if (v12)
  {
    CFRelease(v12);
    *(void *)(DerivedStorage + 136) = 0;
  }
  uint64_t v6 = 0;
  *uint64_t v7 = v14;
  *(void *)(DerivedStorage + 176) = v3;
  *CMClockOrTimebaseRef v4 = v14;
  *(void *)(DerivedStorage + 224) = v3;
LABEL_15:
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 48));
  return v6;
}

uint64_t FigBufferedAirPlayAudioRenderPipelineCancelAndFlushTransition(uint64_t a1, uint64_t a2)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_OWORD *)&v69.unsigned int value = *MEMORY[0x1E4F1FA48];
  CMTimeEpoch v5 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
  v69.CMTimeEpoch epoch = v5;
  CFDictionaryRef v68 = 0;
  long long v51 = *(_OWORD *)&v69.value;
  long long v66 = *(_OWORD *)&v69.value;
  *(void *)&v67[0] = v5;
  *(_OWORD *)((char *)v67 + 8) = *MEMORY[0x1E4F1FA10];
  *((void *)&v67[1] + 1) = *(void *)(MEMORY[0x1E4F1FA10] + 16);
  uint64_t v64 = 0;
  CFDictionaryRef v65 = 0;
  long long v62 = 0u;
  long long v63 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  CMAttachmentBearerRef target = 0;
  CMTime v54 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  CMTime v53 = v54;
  CMTime v52 = v54;
  if (!a2)
  {
    uint64_t v17 = 4294954444;
    goto LABEL_77;
  }
  uint64_t v6 = DerivedStorage;
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 48));
  if (*(unsigned char *)v6)
  {
    uint64_t v17 = 4294954511;
    goto LABEL_75;
  }
  FigMediaProcessorStop(*(void *)(v6 + 56));
  FigMediaProcessorWaitUntilCompletelyStopped(*(void *)(v6 + 56));
  Record = (long long *)fbaprp_transitionRosterGetRecord(a1, a2);
  if (!Record)
  {
    if (dword_1E9351028)
    {
      os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v17 = fbaprp_flushTransitionInBufferQueue(*(void *)(v6 + 128), a2);
    if (v17 != -1) {
      goto LABEL_74;
    }
    CMTime v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
    goto LABEL_73;
  }
  uint64_t v8 = Record;
  uint64_t FigBaseObject = FigSampleBufferProcessorGetFigBaseObject(*(void *)(v6 + 72));
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 48);
  if (!v13) {
    goto LABEL_61;
  }
  CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t started = v13(FigBaseObject, 0x1EE575238);
  if (started) {
    goto LABEL_85;
  }
  CMTimeMakeFromDictionary(&v69, v68);
  *(_OWORD *)CMTime time1 = *(long long *)((char *)v8 + 104);
  *(void *)&time1[16] = *((void *)v8 + 15);
  *(_OWORD *)CMTime time2 = v51;
  *(void *)&time2[16] = v5;
  if (!CMTimeCompare((CMTime *)time1, (CMTime *)time2))
  {
    if (dword_1E9351028)
    {
      CMTime v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v19 = FigSampleBufferProcessorGetFigBaseObject(*(void *)(v6 + 72));
    uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v20) {
      uint64_t v21 = v20;
    }
    else {
      uint64_t v21 = 0;
    }
    long long v22 = *(uint64_t (**)(uint64_t, uint64_t, const __CFAllocator *, const __CFDictionary **))(v21 + 48);
    if (!v22) {
      goto LABEL_61;
    }
    uint64_t started = v22(v19, 0x1EE575258, allocator, &v65);
    if (started) {
      goto LABEL_85;
    }
    if (v65) {
      CFDictionaryGetValue(v65, @"TransitionID");
    }
    if (FigCFEqual())
    {
      if (dword_1E9351028)
      {
        uint64_t v23 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      FigCFDictionaryGetCMTimeIfPresent();
      FigCFDictionaryGetCMTimeIfPresent();
      FigCFDictionaryGetCMTimeIfPresent();
      uint64_t v25 = *(void *)(v6 + 304);
      if (!v25) {
        uint64_t v25 = *(void *)(v6 + 248);
      }
      *(void *)&long long v57 = v25;
      uint64_t v8 = &v56;
      goto LABEL_36;
    }
    if (dword_1E9351028)
    {
      uint64_t v24 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v17 = fbaprp_flushTransitionInBufferQueue(*(void *)(v6 + 128), a2);
    if (v17 != -1) {
      goto LABEL_74;
    }
    CMTimeFlags v48 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT);
LABEL_73:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    uint64_t v17 = 4294954444;
    goto LABEL_74;
  }
  *(_OWORD *)CMTime time1 = *(long long *)((char *)v8 + 104);
  *(void *)&time1[16] = *((void *)v8 + 15);
  *(CMTime *)CMTime time2 = v69;
  if (CMTimeCompare((CMTime *)time1, (CMTime *)time2) < 0)
  {
    if (dword_1E9351028)
    {
      CMTime v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t started = CMBufferQueueReset(*(CMBufferQueueRef *)(v6 + 128));
    if (started) {
      goto LABEL_85;
    }
  }
LABEL_36:
  if (dword_1E9351028)
  {
    unsigned int v26 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  long long v66 = *(long long *)((char *)v8 + 104);
  *(void *)&v67[0] = *((void *)v8 + 15);
  *(CMTime *)CMTime time1 = v69;
  *(_OWORD *)CMTime time2 = *(long long *)((char *)v8 + 104);
  *(void *)&time2[16] = *((void *)v8 + 15);
  CMTimeSubtract((CMTime *)((char *)v67 + 8), (CMTime *)time1, (CMTime *)time2);
  if (dword_1E9351028)
  {
    unsigned int v27 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  float v28 = *(float *)(v6 + 148);
  if (v28 > 0.0 && v28 != 1.0)
  {
    *(_OWORD *)CMTime time2 = v66;
    *(void *)&time2[16] = *(void *)&v67[0];
    Float64 v29 = 1.0 / v28;
    CMTimeMultiplyByFloat64((CMTime *)time1, (CMTime *)time2, v29);
    long long v66 = *(_OWORD *)time1;
    *(void *)&v67[0] = *(void *)&time1[16];
    *(_OWORD *)CMTime time2 = *(_OWORD *)((char *)v67 + 8);
    *(void *)&time2[16] = *((void *)&v67[1] + 1);
    CMTimeMultiplyByFloat64((CMTime *)time1, (CMTime *)time2, v29);
    *(_OWORD *)((char *)v67 + 8) = *(_OWORD *)time1;
    *((void *)&v67[1] + 1) = *(void *)&time1[16];
  }
  *(_OWORD *)CMTime time1 = *(_OWORD *)((char *)v67 + 8);
  *(void *)&time1[16] = *((void *)&v67[1] + 1);
  *(_OWORD *)CMTime time2 = v51;
  *(void *)&time2[16] = v5;
  if (CMTimeCompare((CMTime *)time1, (CMTime *)time2))
  {
    int CFPreferenceNumberWithDefault = FigGetCFPreferenceNumberWithDefault();
    CMTimeMake(&v53, CFPreferenceNumberWithDefault, 1);
    CMTimebaseGetTime(&v54, *(CMTimebaseRef *)(v6 + 248));
    *(_OWORD *)CMTime time1 = v66;
    *(void *)&time1[16] = *(void *)&v67[0];
    *(CMTime *)CMTime time2 = v54;
    CMTimeSubtract(&v52, (CMTime *)time1, (CMTime *)time2);
    *(CMTime *)CMTime time1 = v52;
    *(CMTime *)CMTime time2 = v53;
    if (CMTimeCompare((CMTime *)time1, (CMTime *)time2) <= 0)
    {
      uint64_t started = FigSignalErrorAt();
      goto LABEL_85;
    }
    uint64_t started = CMSampleBufferCreate(allocator, 0, 1u, 0, 0, 0, 0, 0, 0, 0, 0, (CMSampleBufferRef *)&target);
    if (started) {
      goto LABEL_85;
    }
    CMSetAttachment(target, (CFStringRef)*MEMORY[0x1E4F21A28], (CFTypeRef)*MEMORY[0x1E4F1CFD0], 1u);
    uint64_t v31 = *(void *)(v6 + 64);
    CMAttachmentBearerRef v32 = target;
    uint64_t v33 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v33) {
      uint64_t v34 = v33;
    }
    else {
      uint64_t v34 = 0;
    }
    Float64 v35 = *(uint64_t (**)(uint64_t, CMAttachmentBearerRef))(v34 + 8);
    if (v35)
    {
      uint64_t started = v35(v31, v32);
      if (started) {
        goto LABEL_85;
      }
      uint64_t v36 = *(void *)(v6 + 392);
      uint64_t v37 = *(void *)(v6 + 400);
      *(_OWORD *)CMTime time2 = v66;
      *(_OWORD *)&time2[16] = v67[0];
      long long v71 = v67[1];
      uint64_t v38 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v39 = v38 ? v38 : 0;
      uint64_t v40 = *(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(v39 + 32);
      if (v40)
      {
        *(_OWORD *)CMTime time1 = *(_OWORD *)time2;
        *(_OWORD *)&time1[16] = *(_OWORD *)&time2[16];
        long long v73 = v71;
        uint64_t started = v40(v36, v37, time1);
        if (!started) {
          goto LABEL_56;
        }
LABEL_85:
        uint64_t v17 = started;
        goto LABEL_74;
      }
    }
LABEL_61:
    uint64_t v17 = 4294954514;
    goto LABEL_74;
  }
LABEL_56:
  uint64_t v41 = (const void *)*((void *)v8 + 2);
  *(_OWORD *)CMTime time1 = *(long long *)((char *)v8 + 24);
  *(void *)&time1[16] = *((void *)v8 + 5);
  *(_OWORD *)CMTime time2 = *(long long *)((char *)v8 + 104);
  *(void *)&time2[16] = *((void *)v8 + 15);
  uint64_t started = fbaprp_restoreAudioChainToStartOutputTime(a1, v41, (uint64_t)time1, (CMTime *)time2, 0);
  if (started) {
    goto LABEL_85;
  }
  uint64_t v42 = CMBaseObjectGetDerivedStorage();
  Float64 v43 = (void **)(v42 + 288);
  uint64_t v44 = (void *)(v42 + 288);
  do
  {
    uint64_t v44 = (void *)*v44;
    if (!v44) {
      goto LABEL_70;
    }
  }
  while (!FigCFEqual());
  while (1)
  {
    unsigned int v45 = (void *)*v44;
    unsigned int v46 = *v43;
    if (*v43 == v44) {
      break;
    }
    do
    {
      CMTime v47 = v46;
      unsigned int v46 = (void *)*v46;
    }
    while (v46 != v44);
    *CMTime v47 = v45;
    if (!v45) {
      goto LABEL_69;
    }
LABEL_63:
    fbaprp_transitionRosterFreeRecord((uint64_t)v44);
    uint64_t v44 = v45;
  }
  *Float64 v43 = v45;
  if (v45) {
    goto LABEL_63;
  }
  CMTime v47 = (void *)(v42 + 288);
LABEL_69:
  *(void *)(v42 + 296) = v47;
  fbaprp_transitionRosterFreeRecord((uint64_t)v44);
LABEL_70:
  uint64_t v17 = 0;
LABEL_74:
  FigMediaProcessorGo(*(void *)(v6 + 56));
LABEL_75:
  MEMORY[0x19970E930](*(void *)(v6 + 48));
  if (v68) {
    CFRelease(v68);
  }
LABEL_77:
  if (v65) {
    CFRelease(v65);
  }
  if (target) {
    CFRelease(target);
  }
  return v17;
}

uint64_t FigBufferedAirPlayAudioRenderPipelineFlushFromTime(uint64_t a1, long long *a2)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFDictionaryRef dictionaryRepresentation = 0;
  long long v5 = *MEMORY[0x1E4F1FA48];
  long long v35 = *MEMORY[0x1E4F1FA48];
  uint64_t v6 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
  *(void *)uint64_t v36 = v6;
  *(_OWORD *)&v36[8] = *MEMORY[0x1E4F1FA10];
  *(void *)&v36[24] = *(void *)(MEMORY[0x1E4F1FA10] + 16);
  int v7 = *((_DWORD *)a2 + 3);
  if ((v7 & 9) != 1) {
    return 4294954444;
  }
  if ((v7 & 4) != 0) {
    return 0;
  }
  uint64_t v8 = DerivedStorage;
  long long v32 = v5;
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 48));
  if (!*(unsigned char *)v8)
  {
    FigMediaProcessorStop(*(void *)(v8 + 56));
    FigMediaProcessorWaitUntilCompletelyStopped(*(void *)(v8 + 56));
    uint64_t FigBaseObject = FigSampleBufferProcessorGetFigBaseObject(*(void *)(v8 + 72));
    uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v10) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, void, CFDictionaryRef *))(v11 + 48);
    if (v12)
    {
      CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      uint64_t started = v12(FigBaseObject, 0x1EE575238, *MEMORY[0x1E4F1CF80], &dictionaryRepresentation);
      if (started) {
        goto LABEL_28;
      }
      CMTimeMakeFromDictionary((CMTime *)time1, dictionaryRepresentation);
      unsigned int v15 = *(_DWORD *)&time1[8];
      unsigned int v16 = *(_DWORD *)&time1[12];
      unsigned int v42 = *(_DWORD *)&time1[8];
      uint64_t v17 = *(void *)time1;
      uint64_t v41 = *(void *)time1;
      uint64_t v18 = *(void *)&time1[16];
      *(_OWORD *)CMTime time1 = *a2;
      *(void *)&time1[16] = *((void *)a2 + 2);
      *(void *)CMTime time2 = v17;
      *(void *)&time2[8] = __PAIR64__(v16, v15);
      *(void *)&time2[16] = v18;
      if ((CMTimeCompare((CMTime *)time1, (CMTime *)time2) & 0x80000000) == 0 || (v16 & 1) == 0)
      {
        uint64_t v25 = *(void *)(v8 + 128);
        *(_OWORD *)CMTime time2 = *a2;
        *(void *)&time2[16] = *((void *)a2 + 2);
        CMBufferQueueRef queueOut = 0;
        long long v40 = 0u;
        memset(time1, 0, sizeof(time1));
        CallbacksForUnsortedSampleBuffers = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
        OSStatus v27 = CMBufferQueueCreate(v13, 0, CallbacksForUnsortedSampleBuffers, &queueOut);
        if (v27)
        {
          unsigned int v28 = v27;
        }
        else
        {
          *(void *)CMTime time1 = queueOut;
          *(_OWORD *)&time1[16] = *(_OWORD *)time2;
          *(void *)&long long v40 = *(void *)&time2[16];
          BYTE8(v40) = 1;
          HIDWORD(v40) = 0;
          MEMORY[0x199709540](v25, fbaprp_copySbufBeforeFlushTimeForBufferQueueResetCallback, time1);
          MEMORY[0x199709540](queueOut, fbaprp_copySbufForBufferQueueResetCallback, v25);
          unsigned int v28 = HIDWORD(v40);
        }
        if (queueOut) {
          CFRelease(queueOut);
        }
        if (v28 == -1) {
          uint64_t v29 = 4294954444;
        }
        else {
          uint64_t v29 = v28;
        }
        goto LABEL_30;
      }
      long long v35 = *a2;
      *(void *)uint64_t v36 = *((void *)a2 + 2);
      *(void *)CMTime time1 = v41;
      *(void *)&time1[8] = __PAIR64__(v16, v42);
      *(void *)&time1[16] = v18;
      *(_OWORD *)CMTime time2 = *a2;
      *(void *)&time2[16] = *((void *)a2 + 2);
      CMTimeSubtract((CMTime *)&v36[8], (CMTime *)time1, (CMTime *)time2);
      float v19 = *(float *)(v8 + 148);
      if (v19 > 0.0 && v19 != 1.0)
      {
        *(_OWORD *)CMTime time2 = v35;
        *(void *)&time2[16] = *(void *)v36;
        Float64 v20 = 1.0 / v19;
        CMTimeMultiplyByFloat64((CMTime *)time1, (CMTime *)time2, v20);
        long long v35 = *(_OWORD *)time1;
        *(void *)uint64_t v36 = *(void *)&time1[16];
        *(_OWORD *)CMTime time2 = *(_OWORD *)&v36[8];
        *(void *)&time2[16] = *(void *)&v36[24];
        CMTimeMultiplyByFloat64((CMTime *)time1, (CMTime *)time2, v20);
        *(_OWORD *)&v36[8] = *(_OWORD *)time1;
        *(void *)&v36[24] = *(void *)&time1[16];
      }
      *(_OWORD *)CMTime time1 = *(_OWORD *)&v36[8];
      *(void *)&time1[16] = *(void *)&v36[24];
      *(_OWORD *)CMTime time2 = v32;
      *(void *)&time2[16] = v6;
      if (!CMTimeCompare((CMTime *)time1, (CMTime *)time2)) {
        goto LABEL_27;
      }
      uint64_t v21 = *(void *)(v8 + 392);
      uint64_t v22 = *(void *)(v8 + 400);
      *(_OWORD *)CMTime time2 = v35;
      *(_OWORD *)&time2[16] = *(_OWORD *)v36;
      long long v34 = *(_OWORD *)&v36[16];
      uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v23) {
        uint64_t v24 = v23;
      }
      else {
        uint64_t v24 = 0;
      }
      uint64_t v30 = *(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(v24 + 32);
      if (v30)
      {
        *(_OWORD *)CMTime time1 = *(_OWORD *)time2;
        *(_OWORD *)&time1[16] = *(_OWORD *)&time2[16];
        long long v40 = v34;
        uint64_t started = v30(v21, v22, time1);
        if (!started)
        {
LABEL_27:
          *(_OWORD *)CMTime time1 = *a2;
          *(void *)&time1[16] = *((void *)a2 + 2);
          uint64_t started = fbaprp_restoreAudioChainToStartOutputTime(a1, 0, MEMORY[0x1E4F1F9F8], (CMTime *)time1, 1);
        }
LABEL_28:
        uint64_t v29 = started;
LABEL_30:
        FigMediaProcessorGo(*(void *)(v8 + 56));
        goto LABEL_31;
      }
    }
    uint64_t v29 = 4294954514;
    goto LABEL_30;
  }
  uint64_t v29 = 4294954511;
LABEL_31:
  MEMORY[0x19970E930](*(void *)(v8 + 48));
  if (dictionaryRepresentation) {
    CFRelease(dictionaryRepresentation);
  }
  return v29;
}

uint64_t FigBufferedAirPlayAudioRenderPipelineDoesSupportTransitionToFormatDescription()
{
  return 1;
}

uint64_t fbaprp_setupBufferedAirPlayMediaProcessor()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage[9])
  {
    CFAllocatorContext v1 = DerivedStorage;
    if (!DerivedStorage[7])
    {
      CMTimeEpoch v3 = DerivedStorage + 8;
      uint64_t v2 = (const void *)DerivedStorage[8];
      if (v2)
      {
        CFRelease(v2);
        *CMTimeEpoch v3 = 0;
      }
      uint64_t v4 = FigSampleBufferConsumerCreateForSampleBufferConsumer("mediaProcessorConsumerForConsumer", v1 + 8);
      if (v4) {
        return v4;
      }
      CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      uint64_t v6 = (const void *)v1[16];
      int v7 = (const void *)v1[8];
      uint64_t v8 = CMBaseObjectGetDerivedStorage();
      CFTypeRef cf = 0;
      CFTypeRef v20 = 0;
      CFTypeRef v17 = 0;
      CFTypeRef v18 = 0;
      uint64_t v9 = FigSampleBufferProviderCreateForBufferQueue((uint64_t)v5, v6, &cf);
      if (v9)
      {
        uint64_t v15 = v9;
        CFMutableDictionaryRef MutableCopy = 0;
        CFStringRef v11 = 0;
      }
      else
      {
        CFMutableDictionaryRef MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
        if (MutableCopy)
        {
          CFStringRef v11 = CFStringCreateWithCString(v5, (const char *)(v8 + 408), 0x8000100u);
          if (v11)
          {
            CFDictionarySetValue(MutableCopy, @"LoggingID", v11);
            CFTypeRef v12 = cf;
            uint64_t AllocatorForMedia = (const void *)FigGetAllocatorForMedia();
            uint64_t v14 = FigSampleBufferProcessorForBufferedAirPlayCreate(v12, AllocatorForMedia, MutableCopy, &v20);
            if (v14
              || (uint64_t v14 = FigActivitySchedulerCreateForNewThread((uint64_t)v5, 37, @"com.apple.coremedia.mediaprocessor.bufferedairplay", &v18), v14)|| (uint64_t v14 = FigMediaProcessorCreate((uint64_t)v5, v20, cf, v7, v18, (uint64_t *)&v17), v14))
            {
              uint64_t v15 = v14;
            }
            else
            {
              CMNotificationCenterGetDefaultLocalCenter();
              uint64_t v15 = FigNotificationCenterAddWeakListeners();
              if (!v15)
              {
                v1[9] = v20;
                CFTypeRef v20 = 0;
                v1[7] = v17;
                CFTypeRef v17 = 0;
              }
            }
            goto LABEL_15;
          }
        }
        else
        {
          CFStringRef v11 = 0;
        }
        uint64_t v15 = 4294954443;
      }
LABEL_15:
      if (cf) {
        CFRelease(cf);
      }
      if (v18) {
        CFRelease(v18);
      }
      if (v20) {
        CFRelease(v20);
      }
      if (v17) {
        CFRelease(v17);
      }
      if (MutableCopy) {
        CFRelease(MutableCopy);
      }
      if (v11) {
        CFRelease(v11);
      }
      return v15;
    }
  }

  return FigSignalErrorAt();
}

uint64_t fbaprp_flushTransitionInBufferQueue(uint64_t a1, uint64_t a2)
{
  CMBufferQueueRef queueOut = 0;
  long long v10 = 0u;
  memset(v9, 0, sizeof(v9));
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CallbacksForUnsortedSampleBuffers = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
  uint64_t v6 = CMBufferQueueCreate(v4, 0, CallbacksForUnsortedSampleBuffers, &queueOut);
  if (v6)
  {
    uint64_t v7 = v6;
  }
  else
  {
    *(void *)&v9[0] = queueOut;
    *((void *)&v9[0] + 1) = a2;
    BYTE8(v10) = 1;
    HIDWORD(v10) = -1;
    MEMORY[0x199709540](a1, fbaprp_copySbufBeforeTransitionIDForBufferQueueResetCallback, v9);
    MEMORY[0x199709540](queueOut, fbaprp_copySbufForBufferQueueResetCallback, a1);
    uint64_t v7 = HIDWORD(v10);
  }
  if (queueOut) {
    CFRelease(queueOut);
  }
  return v7;
}

uint64_t fbaprp_restoreAudioChainToStartOutputTime(uint64_t a1, const void *a2, uint64_t a3, CMTime *a4, int a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)DerivedStorage)
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v11 = DerivedStorage;
    if (!a5) {
      goto LABEL_8;
    }
    uint64_t v12 = *(void *)(DerivedStorage + 392);
    uint64_t v13 = *(void *)(DerivedStorage + 400);
    uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v14) {
      uint64_t v15 = v14;
    }
    else {
      uint64_t v15 = 0;
    }
    unsigned int v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(v15 + 40);
    if (!v16) {
      return 4294954514;
    }
    uint64_t result = v16(v12, v13, a1, 0);
    if (!result)
    {
LABEL_8:
      uint64_t v18 = MEMORY[0x1E4F1FA48];
      long long v19 = *MEMORY[0x1E4F1FA48];
      *(_OWORD *)(v11 + 160) = *MEMORY[0x1E4F1FA48];
      CMTimeEpoch epoch = *(void *)(v18 + 16);
      *(void *)(v11 + 176) = epoch;
      uint64_t v21 = (_OWORD *)MEMORY[0x1E4F1F9F8];
      *(void *)(v11 + 200) = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
      *(_OWORD *)(v11 + 184) = *v21;
      uint64_t v22 = (_OWORD *)(v11 + 260);
      if (*(unsigned char *)(a3 + 12))
      {
        CMTime lhs = *a4;
        CMTime v26 = *(CMTime *)a3;
        CMTimeSubtract(&v28, &lhs, &v26);
        _OWORD *v22 = *(_OWORD *)&v28.value;
        CMTimeEpoch epoch = v28.epoch;
      }
      else
      {
        _OWORD *v22 = v19;
      }
      *(void *)(v11 + 276) = epoch;
      *(unsigned char *)(v11 + 96) = 1;
      uint64_t v23 = *(const void **)(v11 + 304);
      *(void *)(v11 + 304) = a2;
      if (a2) {
        CFRetain(a2);
      }
      if (v23) {
        CFRelease(v23);
      }
      uint64_t v24 = *(const void **)(v11 + 136);
      if (v24)
      {
        CFRelease(v24);
        *(void *)(v11 + 136) = 0;
      }
      uint64_t v25 = *(void *)(v11 + 72);
      CMTime v28 = *(CMTime *)a3;
      CMTime lhs = *a4;
      uint64_t result = FigSampleBufferProcessorRestoreBufferedAirPlayStates(v25, (long long *)&v28.value, &lhs);
      if (!result) {
        *(_DWORD *)(v11 + 148) = *(_DWORD *)(v11 + 144);
      }
    }
  }
  return result;
}

CFTypeRef fbaprp_copySbufBeforeTransitionIDForBufferQueueResetCallback(CFTypeRef result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 40))
  {
    CMTimeEpoch v3 = result;
    uint64_t result = CMGetAttachment(result, (CFStringRef)*MEMORY[0x1E4F1F2F8], 0);
    if (result == *(CFTypeRef *)(a2 + 8))
    {
      *(unsigned char *)(a2 + 40) = 0;
    }
    else if (*(unsigned char *)(a2 + 40))
    {
      uint64_t result = (CFTypeRef)CMBufferQueueEnqueue(*(CMBufferQueueRef *)a2, v3);
      *(_DWORD *)(a2 + 44) = 0;
    }
  }
  return result;
}

uint64_t fbaprp_copySbufForBufferQueueResetCallback(CMBufferRef buf, CMBufferQueueRef queue)
{
  return CMBufferQueueEnqueue(queue, buf);
}

void fbaprp_copySbufBeforeFlushTimeForBufferQueueResetCallback(opaqueCMSampleBuffer *a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  CMTime v19 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  CMTime v18 = v19;
  if (!*(unsigned char *)(a2 + 40)) {
    return;
  }
  CMTimeEpoch v3 = a1;
  CMSampleBufferGetOutputPresentationTimeStamp(&lhs, a1);
  CMTimeValue value = lhs.value;
  CMTimeFlags flags = lhs.flags;
  CMTimeScale timescale = lhs.timescale;
  if ((lhs.flags & 0x1D) != 1) {
    goto LABEL_15;
  }
  CMTimeEpoch epoch = lhs.epoch;
  CMSampleBufferGetOutputDuration(&rhs, v3);
  lhs.CMTimeValue value = value;
  lhs.CMTimeScale timescale = timescale;
  lhs.CMTimeFlags flags = flags;
  lhs.CMTimeEpoch epoch = epoch;
  CMTimeAdd(&v19, &lhs, &rhs);
  lhs.CMTimeValue value = value;
  lhs.CMTimeScale timescale = timescale;
  lhs.CMTimeFlags flags = flags;
  lhs.CMTimeEpoch epoch = epoch;
  CMTime time2 = *(CMTime *)(a2 + 16);
  if ((CMTimeCompare(&lhs, &time2) & 0x80000000) == 0)
  {
    *(unsigned char *)(a2 + 40) = 0;
    return;
  }
  CMTime lhs = v19;
  CMTime time2 = *(CMTime *)(a2 + 16);
  if (CMTimeCompare(&lhs, &time2) < 1)
  {
LABEL_15:
    long long v10 = 0;
    goto LABEL_16;
  }
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  lhs.CMTimeValue value = 0;
  if (!v3)
  {
    long long v10 = 0;
    if (!FigSignalErrorAt()) {
      goto LABEL_13;
    }
    goto LABEL_26;
  }
  OSStatus Copy = CMSampleBufferCreateCopy(v6, v3, (CMSampleBufferRef *)&lhs);
  if (lhs.value)
  {
    int v8 = Copy;
    CFDictionaryRef v9 = CMCopyDictionaryOfAttachments(v6, v3, 0);
    long long v10 = (void *)lhs.value;
    if (!v9) {
      goto LABEL_12;
    }
    CFDictionaryRef v11 = v9;
    CMSetAttachments((CMAttachmentBearerRef)lhs.value, v9, 0);
    long long v10 = (void *)lhs.value;
    lhs.CMTimeValue value = 0;
    CFRelease(v11);
  }
  else
  {
    int v8 = FigSignalErrorAt();
    long long v10 = 0;
  }
  if (lhs.value) {
    CFRelease((CFTypeRef)lhs.value);
  }
LABEL_12:
  if (!v8)
  {
LABEL_13:
    CMTime lhs = v19;
    CMTime time2 = *(CMTime *)(a2 + 16);
    CMTimeSubtract(&v18, &lhs, &time2);
    CFStringRef v12 = (const __CFString *)*MEMORY[0x1E4F1F300];
    CMTime v16 = v18;
    CMTime lhs = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
    CFDictionaryRef v13 = (const __CFDictionary *)CMGetAttachment(v10, v12, 0);
    if (v13)
    {
      CMTimeMakeFromDictionary(&lhs, v13);
      CMTime v21 = lhs;
      CMTime v20 = v16;
      CMTimeAdd(&time2, &v21, &v20);
      *(_OWORD *)&lhs.CMTimeValue value = *(_OWORD *)&time2.value;
      CMTimeEpoch v14 = time2.epoch;
    }
    else
    {
      *(_OWORD *)&lhs.CMTimeValue value = *(_OWORD *)&v16.value;
      CMTimeEpoch v14 = v16.epoch;
    }
    lhs.CMTimeEpoch epoch = v14;
    *(_OWORD *)&time2.CMTimeValue value = *(_OWORD *)&lhs.value;
    time2.CMTimeEpoch epoch = v14;
    CFDictionaryRef v15 = CMTimeCopyAsDictionary(&time2, v6);
    CMSetAttachment(v10, v12, v15, 1u);
    if (v15) {
      CFRelease(v15);
    }
    CMTimeEpoch v3 = (opaqueCMSampleBuffer *)v10;
LABEL_16:
    if (*(unsigned char *)(a2 + 40))
    {
      CMBufferQueueEnqueue(*(CMBufferQueueRef *)a2, v3);
      *(_DWORD *)(a2 + 44) = 0;
    }
    if (v10) {
      goto LABEL_19;
    }
    return;
  }
LABEL_26:
  FigSignalErrorAt();
  if (v10) {
LABEL_19:
  }
    CFRelease(v10);
}

void fbaprp_baoBufferingPriorityChanged(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 48));
  if (*(unsigned char *)DerivedStorage
    || (CFDictionaryRef Value = CFDictionaryGetValue(a5, @"bufferingPriority"), FigCFEqual())
    || !FigCFEqual() && !FigCFEqual() && !FigCFEqual())
  {
    JUMPOUT(0x19970E930);
  }
  UInt32 = (const void *)FigCFNumberCreateUInt32();
  uint64_t v9 = *(void *)(DerivedStorage + 56);
  if (v9) {
    FigMediaProcessorSetProperty(v9, @"ActivitySchedulerPriority", (uint64_t)UInt32);
  }
  uint64_t CMBaseObject = FigBufferedAirPlaySubPipeManagerForRenderPipelineGetCMBaseObject(*(void *)(DerivedStorage + 376));
  uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  CFDictionaryRef v13 = *(void (**)(uint64_t, __CFString *, const void *))(v12 + 56);
  if (v13) {
    v13(CMBaseObject, @"ThreadPriority", UInt32);
  }
  CMTimeEpoch v14 = *(const void **)(DerivedStorage + 328);
  *(void *)(DerivedStorage + 328) = Value;
  if (Value) {
    CFRetain(Value);
  }
  if (v14) {
    CFRelease(v14);
  }
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 48));
  if (UInt32)
  {
    CFRelease(UInt32);
  }
}

uint64_t fbaprp_baoPrerollDurationChanged(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 48));
  if (!a5) {
    goto LABEL_19;
  }
  CFTypeID v7 = CFGetTypeID(a5);
  if (v7 != CFDictionaryGetTypeID()) {
    goto LABEL_19;
  }
  CMTimeMakeFromDictionary(&v23, (CFDictionaryRef)a5);
  CMTimeValue value = v23.value;
  CMTimeFlags flags = v23.flags;
  CMTimeScale timescale = v23.timescale;
  if ((v23.flags & 1) == 0) {
    goto LABEL_19;
  }
  if (*(unsigned char *)DerivedStorage) {
    return MEMORY[0x19970E930](*(void *)(DerivedStorage + 48));
  }
  CMTimeEpoch epoch = v23.epoch;
  fbaprp_cleanFreedSampleBufferConsumers();
  uint64_t v10 = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  v23.CMTimeValue value = value;
  v23.CMTimeScale timescale = timescale;
  v23.CMTimeFlags flags = flags;
  v23.CMTimeEpoch epoch = epoch;
  CFDictionaryRef v12 = CMTimeCopyAsDictionary(&v23, v11);
  if (!v12)
  {
LABEL_19:
    FigSignalErrorAt();
    return MEMORY[0x19970E930](*(void *)(DerivedStorage + 48));
  }
  CFDictionaryRef v13 = v12;
  if (CFArrayGetCount(*(CFArrayRef *)(v10 + 88)) < 1)
  {
LABEL_15:
    *(void *)(v10 + 336) = value;
    *(_DWORD *)(v10 + 344) = timescale;
    *(_DWORD *)(v10 + 348) = flags;
    *(void *)(v10 + 352) = epoch;
    goto LABEL_17;
  }
  CFIndex v14 = 0;
  while (1)
  {
    CFArrayGetValueAtIndex(*(CFArrayRef *)(v10 + 88), v14);
    uint64_t v15 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v15) {
      break;
    }
LABEL_14:
    if (++v14 >= CFArrayGetCount(*(CFArrayRef *)(v10 + 88))) {
      goto LABEL_15;
    }
  }
  CMTime v16 = (const void *)v15;
  uint64_t FigBaseObject = FigSampleBufferConsumerGetFigBaseObject(v15);
  uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v18) {
    uint64_t v19 = v18;
  }
  else {
    uint64_t v19 = 0;
  }
  CMTime v20 = *(uint64_t (**)(uint64_t, __CFString *, CFDictionaryRef))(v19 + 56);
  if (v20)
  {
    int v21 = v20(FigBaseObject, @"PrerollDuration", v13);
    CFRelease(v16);
    if (v21) {
      goto LABEL_17;
    }
    goto LABEL_14;
  }
  CFRelease(v16);
LABEL_17:
  CFRelease(v13);
  return MEMORY[0x19970E930](*(void *)(DerivedStorage + 48));
}

void fbaprp_baoDecryptionNotSupported(uint64_t a1, const void *a2)
{
}

uint64_t CreatePesPrivateForADTS(void *a1)
{
  if (a1[6])
  {
    uint64_t v2 = (void (*)(void *))a1[107];
    if (v2)
    {
      v2(a1);
      a1[6] = 0;
    }
  }
  CMTimeEpoch v3 = malloc_type_calloc(1uLL, 0x138uLL, 0x10B00401FD4DE26uLL);
  if (!v3) {
    return 12;
  }
  CFAllocatorRef v4 = v3;
  uint64_t result = 0;
  *CFAllocatorRef v4 = v4 + 37;
  void v4[2] = (char *)v4 + 303;
  v4[3] = 7;
  v4[4] = ADTSCheckHeader;
  v4[5] = ADTSCompareHeaders;
  v4[6] = ADTSGetSamplesInFrame;
  v4[7] = ADTSGetSampleFrequency;
  v4[8] = ADTSGetFrameSize;
  a1[105] = PesADTSProcessData;
  a1[106] = PesADTSCleanPrivateData;
  a1[107] = PesADTSDeletePrivateData;
  a1[6] = v4;
  return result;
}

BOOL ADTSCheckHeader(unsigned __int8 *a1)
{
  return *a1 == 255 && (a1[1] & 0xF6) == 240;
}

uint64_t ADTSCompareHeaders(OpaqueCMBlockBuffer *a1, _DWORD *a2)
{
  uint64_t result = ADTSGetSampleFrequency((uint64_t)a2);
  if (result)
  {
    CFAllocatorRef v5 = 0;
    return !CMBlockBufferAccessDataBytes(a1, 0, 4uLL, temporaryBlock, &v5) && bswap32(*a2 ^ *(_DWORD *)v5) < 0x10;
  }
  return result;
}

uint64_t ADTSGetSamplesInFrame()
{
  return 1024;
}

uint64_t PesADTSProcessData(uint64_t a1, OpaqueCMBlockBuffer *a2, size_t a3, char *a4, size_t a5, uint64_t a6)
{
  return MPEGAudioProcessData(a1, *(void **)(a1 + 48), a2, a3, a4, a5, a6);
}

void PesADTSCleanPrivateData(uint64_t a1)
{
}

void PesADTSDeletePrivateData(uint64_t a1)
{
  *(void *)(a1 + 48) = 0;
}

uint64_t FigCaptionRendererIntervalProtocolGetProtocolID()
{
  return sFigCaptionRendererIntervalProtocolID;
}

uint64_t RegisterFigCaptionRendererIntervalProtocolType()
{
  return MEMORY[0x1F40DC660](&sFigCaptionRendererIntervalProtocolDesc, 0, &sFigCaptionRendererIntervalProtocolID);
}

uint64_t FigCaptionRendererParentIntervalProtocolGetProtocolID()
{
  return sFigCaptionRendererParentIntervalProtocolID;
}

uint64_t RegisterFigCaptionRendererParentIntervalProtocolType()
{
  return MEMORY[0x1F40DC660](&sFigCaptionRendererParentIntervalProtocolDesc, 0, &sFigCaptionRendererParentIntervalProtocolID);
}

uint64_t FigReportingModeratorCreateForCRABS(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a4) {
    return 4294949785;
  }
  FigReportingModeratorGetClassID();
  uint64_t v6 = CMDerivedObjectCreate();
  if (!v6)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    *(_DWORD *)(DerivedStorage + 8) = 0;
    *(void *)(DerivedStorage + 96) = FigGetUpTimeNanoseconds();
    *(unsigned char *)(DerivedStorage + 104) = 0;
    *(void *)uint64_t DerivedStorage = FigGetUpTimeNanoseconds();
    if (a2) {
      CFTypeRef v8 = CFRetain(a2);
    }
    else {
      CFTypeRef v8 = 0;
    }
    uint64_t v6 = 0;
    *(void *)(DerivedStorage + 80) = v8;
    *(void *)(DerivedStorage + 88) = 0x1EE582C58;
    *a4 = 0;
  }
  return v6;
}

void playerReportingModeratorFinalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    CFAllocatorContext v1 = *(const void **)(DerivedStorage + 80);
    if (v1)
    {
      CFRelease(v1);
    }
  }
}

__CFString *playerReportingModeratorCopyDebugDescription()
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"\tFigPlayerReportingModerator : ");
  return Mutable;
}

uint64_t playerModeratorProcessEventAndCopyKeyArray(uint64_t a1, int a2, uint64_t *a3, void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = 4294949785;
  if (!a3 || !DerivedStorage) {
    return result;
  }
  if (a2 == 110) {
    return 4294949783;
  }
  uint64_t v9 = 0;
  uint64_t v149 = 0;
  if (a2 != 306)
  {
LABEL_11:
    unsigned int v148 = a4;
    UpTimeNanoCMTime seconds = FigGetUpTimeNanoseconds();
    uint64_t v15 = UpTimeNanoseconds;
    int v16 = *(_DWORD *)(DerivedStorage + 8);
    if (*(void *)DerivedStorage)
    {
      CFTypeRef v17 = kFigReportingEventKey_TotalStallTime;
      unint64_t v18 = (UpTimeNanoseconds - *(void *)DerivedStorage) / 0xF4240uLL;
      switch(v16)
      {
        case 0:
          CFTypeRef v17 = kFigReportingEventKey_TotalInitTime;
          goto LABEL_17;
        case 1:
          CFTypeRef v17 = kFigReportingEventKey_TotalPauseTime;
          goto LABEL_17;
        case 2:
          unint64_t v19 = *(void *)(DerivedStorage + 16) * v18 / 0x64;
          fprm_addToSessionStatsCountValue(DerivedStorage, 0x1EE583F38, v18);
          CFTypeRef v17 = kFigReportingEventKey_TotalPlayTime;
          unint64_t v18 = v19;
          goto LABEL_17;
        case 3:
LABEL_17:
          fprm_addToSessionStatsCountValue(DerivedStorage, (uint64_t)*v17, v18);
          break;
        default:
          break;
      }
    }
    *(void *)uint64_t DerivedStorage = v15;
    switch(a2)
    {
      case 303:
        *(void *)(DerivedStorage + 32) = v15;
        int v16 = 3;
        break;
      case 304:
        break;
      case 305:
        uint64_t v24 = *(void *)(DerivedStorage + 80);
        uint64_t v25 = *(void *)(DerivedStorage + 88);
        uint64_t v26 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v26) {
          uint64_t v27 = v26;
        }
        else {
          uint64_t v27 = 0;
        }
        uint64_t v36 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 64);
        if (v36) {
          v36(v24, v25, 0x1EE584038, 1);
        }
        if (!*(unsigned char *)(DerivedStorage + 104))
        {
          *(unsigned char *)(DerivedStorage + 104) = 1;
          uint64_t v37 = *(void *)(DerivedStorage + 80);
          uint64_t v38 = *(void *)(DerivedStorage + 96);
          uint64_t v39 = *(void *)(CMBaseObjectGetVTable() + 16);
          uint64_t v40 = v39 ? v39 : 0;
          __int16 v147 = *(void (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v40 + 88);
          if (v147) {
            v147(v37, 0x1EE582C58, 0x1EE55E738, (v15 - v38) / 0xF4240uLL);
          }
        }
        break;
      case 306:
        if (v9)
        {
          *(void *)(DerivedStorage + 16) = v9;
          *(void *)(DerivedStorage + 24) = v15;
          int v16 = 2;
        }
        else
        {
          int v16 = 1;
        }
        break;
      case 307:
        fprm_setSessionEndReasonIfFatalError(DerivedStorage, 0x1EE582B78, 0, 0x1EE5840B8, 0x1EE5840F8, 0x1EE5840D8);
        uint64_t v28 = *(void *)(DerivedStorage + 80);
        uint64_t v29 = *(void *)(DerivedStorage + 88);
        uint64_t v30 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v30) {
          uint64_t v31 = v30;
        }
        else {
          uint64_t v31 = 0;
        }
        uint64_t v41 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v31 + 64);
        if (v41) {
          v41(v28, v29, 0x1EE584098, 1);
        }
        break;
      default:
        if (a2 == 402)
        {
          fprm_setSessionEndReasonIfFatalError(DerivedStorage, 0x1EE582BF8, 0x1EE55E618, 0x1EE55E598, 0x1EE55E5D8, 0x1EE55E5B8);
          uint64_t v32 = *(void *)(DerivedStorage + 80);
          uint64_t v33 = *(void *)(DerivedStorage + 88);
          uint64_t v34 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v34) {
            uint64_t v35 = v34;
          }
          else {
            uint64_t v35 = 0;
          }
          uint64_t v43 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v35 + 64);
          if (v43) {
            v43(v32, v33, 0x1EE55E318, 1);
          }
          *(void *)(DerivedStorage + 48) = v15;
        }
        else if (a2 == 502)
        {
          fprm_setSessionEndReasonIfFatalError(DerivedStorage, 0x1EE582C18, 0x1EE55E6B8, 0x1EE55E658, 0x1EE55E698, 0x1EE55E678);
          uint64_t v20 = *(void *)(DerivedStorage + 80);
          uint64_t v21 = *(void *)(DerivedStorage + 88);
          uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v22) {
            uint64_t v23 = v22;
          }
          else {
            uint64_t v23 = 0;
          }
          unsigned int v42 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 64);
          if (v42) {
            v42(v20, v21, 0x1EE55E338, 1);
          }
          *(void *)(DerivedStorage + 56) = v15;
        }
        break;
    }
    *(_DWORD *)(DerivedStorage + 8) = v16;
    uint64_t v44 = v149;
    uint64_t v45 = FigGetUpTimeNanoseconds();
    BOOL v47 = a2 == 306 && v44 != 0;
    if (a2 == 303 || v47)
    {
      uint64_t v48 = *(void *)(DerivedStorage + 24);
      if (v48)
      {
        uint64_t v49 = *(void *)(DerivedStorage + 80);
        uint64_t v50 = *(void *)(DerivedStorage + 88);
        uint64_t v51 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v52 = v51 ? v51 : 0;
        CMTime v53 = *(void (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v52 + 88);
        if (v53) {
          v53(v49, v50, 0x1EE584A98, (v45 - v48) / 0xF4240uLL);
        }
      }
      uint64_t v54 = *(void *)(DerivedStorage + 32);
      if (v54)
      {
        uint64_t v55 = *(void *)(DerivedStorage + 80);
        uint64_t v56 = *(void *)(DerivedStorage + 88);
        uint64_t v57 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v58 = v57 ? v57 : 0;
        long long v59 = *(void (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v58 + 88);
        if (v59) {
          v59(v55, v56, 0x1EE584AB8, (v45 - v54) / 0xF4240uLL);
        }
      }
    }
    uint64_t v60 = *(void *)(DerivedStorage + 56);
    if (v60)
    {
      uint64_t v61 = *(void *)(DerivedStorage + 80);
      uint64_t v62 = *(void *)(DerivedStorage + 88);
      uint64_t v63 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v64 = v63 ? v63 : 0;
      CFDictionaryRef v65 = *(void (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v64 + 88);
      if (v65) {
        v65(v61, v62, 0x1EE55E6D8, (v45 - v60) / 0xF4240uLL);
      }
    }
    uint64_t v66 = *(void *)(DerivedStorage + 48);
    if (v66)
    {
      uint64_t v67 = *(void *)(DerivedStorage + 80);
      uint64_t v68 = *(void *)(DerivedStorage + 88);
      uint64_t v69 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v70 = v69 ? v69 : 0;
      long long v71 = *(void (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v70 + 88);
      if (v71) {
        v71(v67, v68, 0x1EE55E638, (v45 - v66) / 0xF4240uLL);
      }
    }
    if (a2 == 901 || a2 == 101)
    {
      uint64_t v72 = *(void *)(DerivedStorage + 80);
      uint64_t v73 = *(void *)(DerivedStorage + 88);
      unint64_t v157 = 0;
      uint64_t v158 = 0;
      unint64_t v155 = 0;
      unint64_t v156 = 0;
      unint64_t v154 = 0;
      uint64_t v74 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v74) {
        uint64_t v75 = v74;
      }
      else {
        uint64_t v75 = 0;
      }
      CMTimeValue v76 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(v75 + 48);
      if (v76) {
        v76(v72, 1, 0x1EE584858, &v158);
      }
      uint64_t v77 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v77) {
        uint64_t v78 = v77;
      }
      else {
        uint64_t v78 = 0;
      }
      unsigned int v79 = *(void (**)(uint64_t, uint64_t, uint64_t, unint64_t *))(v78 + 48);
      if (v79) {
        v79(v72, 1, 0x1EE583958, &v156);
      }
      uint64_t v80 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v80) {
        uint64_t v81 = v80;
      }
      else {
        uint64_t v81 = 0;
      }
      __int16 v82 = *(void (**)(uint64_t, uint64_t, uint64_t, unint64_t *))(v81 + 48);
      if (v82) {
        v82(v72, 1, 0x1EE584058, &v157);
      }
      uint64_t v83 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v83) {
        uint64_t v84 = v83;
      }
      else {
        uint64_t v84 = 0;
      }
      Float64 v85 = *(void (**)(uint64_t, uint64_t, uint64_t, unint64_t *))(v84 + 48);
      if (v85) {
        v85(v72, 1, 0x1EE55E158, &v155);
      }
      uint64_t v86 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v86) {
        uint64_t v87 = v86;
      }
      else {
        uint64_t v87 = 0;
      }
      uint64_t v88 = *(void (**)(uint64_t, uint64_t, uint64_t, unint64_t *))(v87 + 48);
      if (v88) {
        v88(v72, 1, 0x1EE55E218, &v154);
      }
      unint64_t v153 = 0;
      uint64_t v89 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v89) {
        uint64_t v90 = v89;
      }
      else {
        uint64_t v90 = 0;
      }
      uint64_t v91 = *(void (**)(uint64_t, uint64_t, uint64_t, unint64_t *))(v90 + 40);
      if (v91) {
        v91(v72, 1, 0x1EE55E038, &v153);
      }
      if (v153)
      {
        uint64_t v159 = 0;
        uint64_t v92 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v92) {
          uint64_t v93 = v92;
        }
        else {
          uint64_t v93 = 0;
        }
        CMTime v94 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(v93 + 40);
        if (v94) {
          v94(v72, 1, 0x1EE55E018, &v159);
        }
        uint64_t v95 = v159;
        unint64_t v96 = v153;
        uint64_t v97 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v97) {
          uint64_t v98 = v97;
        }
        else {
          uint64_t v98 = 0;
        }
        uint64_t v99 = *(void (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v98 + 88);
        if (v99) {
          v99(v72, v73, 0x1EE5836F8, 8000 * v95 / v96);
        }
      }
      unint64_t v100 = v156;
      if (v156)
      {
        uint64_t v159 = 0;
        uint64_t v101 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v102 = v101 ? v101 : 0;
        os_log_type_t v103 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(v102 + 48);
        if (v103)
        {
          if (!v103(v72, 1, 0x1EE584838, &v159))
          {
            unint64_t v104 = v159;
            if (v159)
            {
              uint64_t v105 = *(void *)(CMBaseObjectGetVTable() + 16);
              uint64_t v106 = v105 ? v105 : 0;
              uint64_t v107 = *(void (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v106 + 88);
              if (v107) {
                v107(v72, v73, 0x1EE583678, v104 / v100);
              }
            }
          }
        }
      }
      if (v155)
      {
        uint64_t v159 = 0;
        uint64_t v108 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v108) {
          uint64_t v109 = v108;
        }
        else {
          uint64_t v109 = 0;
        }
        uint64_t v110 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(v109 + 40);
        if (v110) {
          v110(v72, 1, 0x1EE55E138, &v159);
        }
        uint64_t v111 = v159;
        unint64_t v112 = v155;
        uint64_t v113 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v113) {
          uint64_t v114 = v113;
        }
        else {
          uint64_t v114 = 0;
        }
        __int16 v115 = *(void (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v114 + 88);
        if (v115) {
          v115(v72, v73, 0x1EE55E0F8, 8000 * v111 / v112);
        }
      }
      if (v154)
      {
        uint64_t v159 = 0;
        uint64_t v116 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v116) {
          uint64_t v117 = v116;
        }
        else {
          uint64_t v117 = 0;
        }
        int v118 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(v117 + 40);
        if (v118) {
          v118(v72, 1, 0x1EE55E1F8, &v159);
        }
        uint64_t v119 = v159;
        unint64_t v120 = v154;
        uint64_t v121 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v121) {
          uint64_t v122 = v121;
        }
        else {
          uint64_t v122 = 0;
        }
        __int16 v123 = *(void (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v122 + 88);
        if (v123) {
          v123(v72, v73, 0x1EE55E118, 8000 * v119 / v120);
        }
      }
      if (v157)
      {
        uint64_t v159 = 0;
        uint64_t v151 = 0;
        uint64_t v152 = 0;
        uint64_t v150 = 0;
        uint64_t v124 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v124) {
          uint64_t v125 = v124;
        }
        else {
          uint64_t v125 = 0;
        }
        int v126 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(v125 + 48);
        if (v126) {
          v126(v72, 1, 0x1EE583AB8, &v159);
        }
        uint64_t v127 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v127) {
          uint64_t v128 = v127;
        }
        else {
          uint64_t v128 = 0;
        }
        __int16 v129 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(v128 + 48);
        if (v129) {
          v129(v72, 1, 0x1EE583AF8, &v152);
        }
        uint64_t v130 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v130) {
          uint64_t v131 = v130;
        }
        else {
          uint64_t v131 = 0;
        }
        int v132 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(v131 + 48);
        if (v132) {
          v132(v72, 1, 0x1EE583A98, &v151);
        }
        uint64_t v133 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v133) {
          uint64_t v134 = v133;
        }
        else {
          uint64_t v134 = 0;
        }
        __int16 v135 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(v134 + 48);
        if (v135)
        {
          v135(v72, 1, 0x1EE583AD8, &v150);
          uint64_t v136 = v150;
        }
        else
        {
          uint64_t v136 = 0;
        }
        uint64_t v137 = v159;
        uint64_t v139 = v151;
        uint64_t v138 = v152;
        unint64_t v140 = v157;
        uint64_t v141 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v141) {
          uint64_t v142 = v141;
        }
        else {
          uint64_t v142 = 0;
        }
        __int16 v143 = *(void (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v142 + 88);
        if (v143) {
          v143(v72, v73, 0x1EE5836D8, 8000 * (v137 + v136 + v139 + v138) / v140);
        }
      }
    }
    MEMORY[0x19970EE10](&fprm_copyEventKeyArray_sCreateStaticKeyArrayFromEventKeysOnce, fprm_createStaticKeyArrayFromEventKeys);
    uint64_t v144 = 0;
    __int16 v145 = &kFigReportingEventKeyArray_AggregatedEvent_0;
    if (a2 <= 401)
    {
      switch(a2)
      {
        case 303:
          __int16 v145 = &kFigReportingEventKeyArray_StallEvent_0;
          goto LABEL_212;
        case 304:
          __int16 v145 = &kFigReportingEventKeyArray_UnlikelyToKeepUpEvent;
          goto LABEL_212;
        case 305:
          __int16 v145 = &kFigReportingEventKeyArray_LikelyToKeepUpEvent_0;
          goto LABEL_212;
        case 306:
          __int16 v145 = &kFigReportingEventKeyArray_PlayRateChangedEvent_0;
          goto LABEL_212;
        case 307:
          __int16 v145 = &kFigReportingEventKeyArray_PlayerErrorEvent_0;
          goto LABEL_212;
        default:
          if (a2 == 101) {
            goto LABEL_212;
          }
          if (a2 != 401) {
            goto LABEL_214;
          }
          __int16 v145 = &kFigReportingEventKeyArray_CRABSDoneBufferingEvent;
          break;
      }
      goto LABEL_212;
    }
    if (a2 <= 800)
    {
      switch(a2)
      {
        case 402:
          __int16 v145 = &kFigReportingEventKeyArray_CRABSErrorEvent;
          break;
        case 502:
          __int16 v145 = &kFigReportingEventKeyArray_FlumeErrorEvent;
          break;
        case 800:
          __int16 v145 = &kFigReportingEventKeyArray_IRATStreamingActivityStartEvent_0;
          break;
        default:
          goto LABEL_214;
      }
    }
    else if (a2 > 899)
    {
      if (a2 == 900)
      {
        __int16 v145 = &kFigReportingEventKeyArray_PowerLogEvent_0;
      }
      else if (a2 != 901)
      {
        goto LABEL_214;
      }
    }
    else
    {
      if (a2 != 801)
      {
        if (a2 == 802)
        {
          __int16 v145 = &kFigReportingEventKeyArray_IRATStallEvent_0;
          goto LABEL_212;
        }
LABEL_214:
        uint64_t result = 0;
        *a3 = v144;
        if (a2 != 101 && v148)
        {
          if (kFigReportingEventKeyArray_FetchKeysFromAggregatedSessionStats_0) {
            CFTypeRef v146 = CFRetain((CFTypeRef)kFigReportingEventKeyArray_FetchKeysFromAggregatedSessionStats_0);
          }
          else {
            CFTypeRef v146 = 0;
          }
          uint64_t result = 0;
          void *v148 = v146;
        }
        return result;
      }
      __int16 v145 = &kFigReportingEventKeyArray_IRATStreamingActivityEndEvent_0;
    }
LABEL_212:
    uint64_t v144 = *v145;
    if (*v145) {
      CFRetain((CFTypeRef)*v145);
    }
    goto LABEL_214;
  }
  uint64_t v10 = *(void *)(DerivedStorage + 80);
  uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  CFDictionaryRef v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(v12 + 40);
  if (!v13) {
    return 4294954514;
  }
  uint64_t result = v13(v10, 1, 0x1EE54F698, &v149);
  if (!result)
  {
    uint64_t v9 = v149;
    goto LABEL_11;
  }
  return result;
}

uint64_t playerModeratorResetStatsForEvent()
{
  return 0;
}

uint64_t fprm_addToSessionStatsCountValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 80);
  uint64_t v6 = *(void *)(a1 + 88);
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v10 = *(void *)(VTable + 16);
  uint64_t result = VTable + 16;
  uint64_t v9 = v10;
  if (v10) {
    uint64_t v11 = v9;
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 64);
  if (v12)
  {
    return v12(v5, v6, a2, a3);
  }
  return result;
}

uint64_t fprm_setSessionEndReasonIfFatalError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v34 = 1;
  if (!a3
    || ((v12 = *(void *)(a1 + 80), (uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16)) == 0) ? (v14 = 0) : (v14 = v13),
        (uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(v14 + 144)) == 0
     || (uint64_t result = v15(v12, a2, a3, &v34), v34 == 1)))
  {
    uint64_t v35 = 0;
    if (a2 && a4)
    {
      uint64_t v17 = *(void *)(a1 + 80);
      uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v19 = v18 ? v18 : 0;
      uint64_t v20 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(v19 + 144);
      if (v20 && !v20(v17, a2, a4, &v35))
      {
        uint64_t v21 = *(void *)(a1 + 80);
        uint64_t v22 = *(void *)(a1 + 88);
        uint64_t v23 = v35;
        uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v25 = v24 ? v24 : 0;
        uint64_t v26 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 88);
        if (v26) {
          v26(v21, v22, 0x1EE5841B8, v23);
        }
      }
    }
    fprm_setCFTypeFromKeyInStats(a1, a2, a6, 0x1EE5841D8);
    if (a5)
    {
      return fprm_setCFTypeFromKeyInStats(a1, a2, a5, 0x1EE5841F8);
    }
    else
    {
      uint64_t v27 = *(void *)(a1 + 80);
      uint64_t v28 = *(void *)(a1 + 88);
      uint64_t VTable = CMBaseObjectGetVTable();
      uint64_t v31 = *(void *)(VTable + 16);
      uint64_t result = VTable + 16;
      uint64_t v30 = v31;
      if (v31) {
        uint64_t v32 = v30;
      }
      else {
        uint64_t v32 = 0;
      }
      uint64_t v33 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, __CFString *))(v32 + 80);
      if (v33) {
        return v33(v27, v28, 0x1EE5841F8, @"CoreMediaErrorDomain");
      }
    }
  }
  return result;
}

uint64_t fprm_setCFTypeFromKeyInStats(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v22 = 0;
  if (a2 && a3 && a4)
  {
    uint64_t v7 = result;
    uint64_t v8 = *(void *)(result + 80);
    uint64_t VTable = CMBaseObjectGetVTable();
    uint64_t v11 = *(void *)(VTable + 16);
    uint64_t result = VTable + 16;
    uint64_t v10 = v11;
    uint64_t v12 = v11 ? v10 : 0;
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(v12 + 152);
    if (v13)
    {
      uint64_t result = v13(v8, a2, a3, &v22);
      if (!result)
      {
        uint64_t v14 = *(void *)(v7 + 80);
        uint64_t v15 = *(void *)(v7 + 88);
        uint64_t v16 = v22;
        uint64_t v17 = CMBaseObjectGetVTable();
        uint64_t v19 = *(void *)(v17 + 16);
        uint64_t result = v17 + 16;
        uint64_t v18 = v19;
        if (v19) {
          uint64_t v20 = v18;
        }
        else {
          uint64_t v20 = 0;
        }
        uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 80);
        if (v21) {
          return v21(v14, v15, a4, v16);
        }
      }
    }
  }
  return result;
}

CFArrayRef fprm_createStaticKeyArrayFromEventKeys()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  memcpy(v2, off_1E579AF40, sizeof(v2));
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFArrayRef result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)v2, 166, 0);
  kFigReportingEventKeyArray_AggregatedEvent_0 = (uint64_t)result;
  if (result)
  {
    memcpy(v2, off_1E579B470, 0x1D0uLL);
    CFArrayRef result = CFArrayCreate(v0, (const void **)v2, 58, 0);
    kFigReportingEventKeyArray_PlayRateChangedEvent_0 = (uint64_t)result;
    if (result)
    {
      memcpy(v2, off_1E579B640, 0x1E8uLL);
      CFArrayRef result = CFArrayCreate(v0, (const void **)v2, 61, 0);
      kFigReportingEventKeyArray_UnlikelyToKeepUpEvent = (uint64_t)result;
      if (result)
      {
        memcpy(v2, off_1E579B828, 0x240uLL);
        CFArrayRef result = CFArrayCreate(v0, (const void **)v2, 72, 0);
        kFigReportingEventKeyArray_LikelyToKeepUpEvent_0 = (uint64_t)result;
        if (result)
        {
          memcpy(v2, off_1E579BA68, 0x260uLL);
          CFArrayRef result = CFArrayCreate(v0, (const void **)v2, 76, 0);
          kFigReportingEventKeyArray_StallEvent_0 = (uint64_t)result;
          if (result)
          {
            memcpy(v2, off_1E579BCC8, 0x1E8uLL);
            CFArrayRef result = CFArrayCreate(v0, (const void **)v2, 61, 0);
            kFigReportingEventKeyArray_CRABSDoneBufferingEvent = (uint64_t)result;
            if (result)
            {
              memcpy(v2, off_1E579BEB0, 0x270uLL);
              CFArrayRef result = CFArrayCreate(v0, (const void **)v2, 78, 0);
              kFigReportingEventKeyArray_CRABSErrorEvent = (uint64_t)result;
              if (result)
              {
                memcpy(v2, off_1E579C120, 0x260uLL);
                CFArrayRef result = CFArrayCreate(v0, (const void **)v2, 76, 0);
                kFigReportingEventKeyArray_FlumeErrorEvent = (uint64_t)result;
                if (result)
                {
                  memcpy(v2, off_1E579C380, 0x2A0uLL);
                  CFArrayRef result = CFArrayCreate(v0, (const void **)v2, 84, 0);
                  kFigReportingEventKeyArray_PlayerErrorEvent_0 = (uint64_t)result;
                  if (result)
                  {
                    v2[0] = xmmword_1E579C620;
                    v2[1] = *(_OWORD *)&off_1E579C630;
                    v2[2] = xmmword_1E579C640;
                    v2[3] = *(_OWORD *)&off_1E579C650;
                    CFArrayRef result = CFArrayCreate(v0, (const void **)v2, 8, 0);
                    kFigReportingEventKeyArray_PowerLogEvent_0 = (uint64_t)result;
                    if (result)
                    {
                      v2[0] = xmmword_1E579C660;
                      *(void *)&v2[1] = 0;
                      CFArrayRef result = CFArrayCreate(v0, (const void **)v2, 3, 0);
                      kFigReportingEventKeyArray_IRATStreamingActivityStartEvent_0 = (uint64_t)result;
                      if (result)
                      {
                        v2[0] = xmmword_1E579C678;
                        v2[1] = *(_OWORD *)&off_1E579C688;
                        v2[2] = xmmword_1E579C698;
                        CFArrayRef result = CFArrayCreate(v0, (const void **)v2, 6, 0);
                        kFigReportingEventKeyArray_IRATStreamingActivityEndEvent_0 = (uint64_t)result;
                        if (result)
                        {
                          v2[0] = xmmword_1E579C6A8;
                          CFArrayRef result = CFArrayCreate(v0, (const void **)v2, 2, 0);
                          kFigReportingEventKeyArray_IRATStallEvent_0 = (uint64_t)result;
                          if (result)
                          {
                            v2[6] = xmmword_1E579C718;
                            v2[7] = *(_OWORD *)off_1E579C728;
                            *(void *)&v2[8] = 0;
                            v2[2] = xmmword_1E579C6D8;
                            v2[3] = *(_OWORD *)&off_1E579C6E8;
                            v2[4] = xmmword_1E579C6F8;
                            void v2[5] = *(_OWORD *)&off_1E579C708;
                            v2[0] = xmmword_1E579C6B8;
                            v2[1] = *(_OWORD *)&off_1E579C6C8;
                            CFArrayRef result = CFArrayCreate(v0, (const void **)v2, 17, 0);
                            kFigReportingEventKeyArray_FetchKeysFromAggregatedSessionStats_0 = (uint64_t)result;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t AddPesToList(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    *(void *)CFArrayRef result = a2;
    *(void *)(result + 8) = a3;
    if (a2)
    {
      *(void *)(result + 16) = 0;
      uint64_t v3 = *(void **)(a2 + 32);
      *(void *)(result + 24) = v3;
      *uint64_t v3 = result;
      *(void *)(a2 + 32) = result + 16;
    }
    uint64_t v4 = *(void *)(a3 + 24);
    if (v4)
    {
      uint64_t v5 = *(void *)(a3 + 32);
      unsigned int v6 = *(unsigned __int16 *)(result + 448);
      if (*(unsigned __int16 *)(**(void **)(v5 + 8) + 448) >= v6)
      {
        do
        {
          if (*(unsigned __int16 *)(v4 + 448) >= v6) {
            break;
          }
          uint64_t v4 = *(void *)(v4 + 32);
        }
        while (v4);
        *(void *)(result + 40) = *(void *)(v4 + 40);
        *(void *)(result + 32) = v4;
        **(void **)(v4 + 40) = result;
        *(void *)(v4 + 40) = result + 32;
      }
      else
      {
        *(void *)(result + 32) = 0;
        *(void *)(result + 40) = v5;
        *(void *)uint64_t v5 = result;
        *(void *)(a3 + 32) = result + 32;
      }
    }
    else
    {
      *(void *)(result + 32) = 0;
      *(void *)(a3 + 24) = result;
      *(void *)(a3 + 32) = result + 32;
      *(void *)(result + 40) = a3 + 24;
    }
  }
  return result;
}

uint64_t AddPes(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5, int a6, int a7, __int16 a8, char a9, void *a10)
{
  uint64_t v18 = malloc_type_calloc(1uLL, 0x368uLL, 0x10B00407B0020A8uLL);
  if (v18)
  {
    uint64_t v19 = v18;
    v18[120] = 0;
    *(void *)uint64_t v18 = a2;
    *((void *)v18 + 1) = a1;
    *((_DWORD *)v18 + 16) = a7;
    if (!a5)
    {
      a6 = *(_DWORD *)(a1 + 184);
      *(_DWORD *)(a1 + 184) = a6 + 1;
    }
    *((_DWORD *)v18 + 15) = a6;
    *((_WORD *)v18 + 224) = a8;
    *((void *)v18 + 102) = -1;
    AddPesToList((uint64_t)v18, a2, a1);
    *((void *)v19 + 91) = 0;
    *((void *)v19 + 92) = v19 + 728;
    *((void *)v19 + 98) = 0;
    *((void *)v19 + 99) = v19 + 784;
    *((void *)v19 + 65) = 0;
    *((void *)v19 + 66) = v19 + 520;
    *((_DWORD *)v19 + 163) = 2;
    if (a3) {
      goto LABEL_5;
    }
    *((_DWORD *)v19 + 14) = a4;
    if ((int)a4 > 1748121139)
    {
      if ((int)a4 <= 1836476771)
      {
        if ((int)a4 > 1819304812)
        {
          if (a4 != 1819304813)
          {
            if (a4 != 1835103588)
            {
              int v21 = 1836070006;
              goto LABEL_39;
            }
            goto LABEL_33;
          }
LABEL_36:
          uint64_t v23 = 4096;
          goto LABEL_41;
        }
        if (a4 != 1748121140)
        {
          if (a4 == 1768174368) {
            goto LABEL_42;
          }
          goto LABEL_5;
        }
        goto LABEL_40;
      }
      if ((int)a4 <= 1886614577)
      {
        if (a4 != 1836476772)
        {
          if (a4 != 1886612592) {
            goto LABEL_5;
          }
          goto LABEL_36;
        }
LABEL_40:
        uint64_t v23 = 0x4000;
        goto LABEL_41;
      }
      if (a4 == 1886614578)
      {
        *((void *)v19 + 80) = 1024;
        v19[121] = 1;
LABEL_42:
        *a10 = v19;
        v19[657] = 1;
        if (a9)
        {
          uint64_t v24 = *(void (**)(void, void, void, void, uint64_t))(a1 + 56);
          if (v24) {
            v24(*(void *)a1, *(void *)(a1 + 72), *(unsigned int *)(a2 + 40), *((unsigned int *)v19 + 15), a4);
          }
        }
        else
        {
          v19[657] = 0;
        }
        return 0;
      }
      if (a4 == 1970170734) {
        goto LABEL_42;
      }
      int v21 = 2053207651;
LABEL_39:
      if (a4 == v21) {
        goto LABEL_40;
      }
LABEL_5:
      *a10 = v19;
      v19[657] = 1;
      return 0;
    }
    if ((int)a4 <= 1700880738)
    {
      if ((int)a4 > 1635017570)
      {
        if (a4 == 1635017571) {
          goto LABEL_42;
        }
        int v21 = 1685353248;
        goto LABEL_39;
      }
      if (a4 == 1633891104) {
        goto LABEL_32;
      }
      if (a4 != 1633973363) {
        goto LABEL_5;
      }
    }
    else
    {
      if ((int)a4 > 1700886114)
      {
        if (a4 == 1700886115) {
          goto LABEL_40;
        }
        if (a4 != 1700998451)
        {
          int v22 = 1701143347;
          goto LABEL_31;
        }
LABEL_32:
        uint64_t v23 = 2048;
LABEL_41:
        *((void *)v19 + 80) = v23;
        goto LABEL_42;
      }
      if (a4 != 1700880739)
      {
        int v22 = 1700881203;
LABEL_31:
        if (a4 != v22) {
          goto LABEL_5;
        }
        goto LABEL_32;
      }
    }
LABEL_33:
    uint64_t v23 = 1024;
    goto LABEL_41;
  }

  return FigSignalErrorAt();
}

uint64_t FrameQueueEntryInit(uint64_t a1)
{
  *(void *)(a1 + 64) = 0;
  uint64_t result = a1 + 64;
  *(void *)(result + 8) = result;
  return result;
}

uint64_t CheckPesHeaderLength(CMBlockBufferRef theSourceBuffer, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t *a5, BOOL *a6)
{
  *a6 = 0;
  *a5 = 0;
  if (a4 < 8) {
    return 0;
  }
  unsigned __int8 destination = 0;
  if (a3)
  {
    unsigned __int8 v12 = *(unsigned char *)(a3 + 6);
    unsigned __int8 destination = v12;
  }
  else
  {
    uint64_t result = CMBlockBufferCopyDataBytes(theSourceBuffer, a2 + 6, 1uLL, &destination);
    if (result) {
      return result;
    }
    unsigned __int8 v12 = destination;
  }
  if ((v12 & 0xC0) != 0x80)
  {
    unint64_t v15 = 7;
    do
    {
      if (6 - a4 + v15 == 7) {
        return 0;
      }
      if (a3)
      {
        unsigned __int8 destination = *(unsigned char *)(a3 + 6 + v15 - 7);
      }
      else
      {
        uint64_t result = CMBlockBufferCopyDataBytes(theSourceBuffer, a2 + v15 - 1, 1uLL, &destination);
        if (result) {
          return result;
        }
      }
      if (v15 == 24) {
        return FigSignalErrorAt();
      }
      int v16 = destination;
      ++v15;
    }
    while (destination == 255);
    if ((destination & 0xC0) == 0x40)
    {
      if (v15 >= a4) {
        return 0;
      }
      if (a3)
      {
        int v16 = *(unsigned __int8 *)(a3 + v15);
        unsigned __int8 destination = *(unsigned char *)(a3 + v15);
      }
      else
      {
        uint64_t result = CMBlockBufferCopyDataBytes(theSourceBuffer, a2 + v15, 1uLL, &destination);
        if (result) {
          return result;
        }
        int v16 = destination;
      }
    }
    else
    {
      v15 -= 2;
    }
    if ((v16 & 0xF0) == 0x20)
    {
      uint64_t v18 = 5;
    }
    else if ((v16 & 0xF0) == 0x30)
    {
      uint64_t v18 = 10;
    }
    else
    {
      if (v16 != 15) {
        return FigSignalErrorAt();
      }
      uint64_t v18 = 1;
    }
    uint64_t result = 0;
    unint64_t v19 = v15 + v18;
    *a6 = v19 < a4;
    *a5 = v19;
    return result;
  }
  if (a4 < 9) {
    return 0;
  }
  if (a3)
  {
    p_unsigned __int8 destination = (unsigned __int8 *)(a3 + 8);
    goto LABEL_23;
  }
  p_unsigned __int8 destination = &destination;
  uint64_t result = CMBlockBufferCopyDataBytes(theSourceBuffer, a2 + 8, 1uLL, &destination);
  if (!result)
  {
LABEL_23:
    unint64_t v17 = *p_destination + 9;
    *a5 = v17;
    if (v17 < a4)
    {
      uint64_t result = 0;
      *a6 = 1;
      return result;
    }
    return 0;
  }
  return result;
}

uint64_t ReadTimestampFromPesHeader(uint64_t a1, unsigned char *a2, uint64_t a3, unint64_t a4, uint64_t a5, int a6)
{
  if ((a2[6] & 0xC0) == 0x80)
  {
    *(unsigned char *)(a3 + 27) = 0;
    unsigned int v9 = a2[7];
    if (a4 >= 0x13 && v9 >= 0xC0)
    {
      if (!ReadPTSorDTSWithVerify(a2 + 9, (unint64_t *)a3, 49)) {
        goto LABEL_32;
      }
      uint64_t v10 = a2 + 14;
      goto LABEL_22;
    }
    if (a4 >= 0xE && (v9 & 0x80) != 0)
    {
      if (ReadPTSorDTSWithVerify(a2 + 9, (unint64_t *)a3, 33))
      {
        *(unsigned char *)(a3 + 25) = 1;
        if (a6 == 192 || a6 == 1)
        {
          *(_WORD *)(a3 + 26) = 257;
          *(void *)(a3 + 8) = *(void *)a3;
        }
        else
        {
          *(unsigned char *)(a3 + 26) = 0;
        }
        return 0;
      }
      goto LABEL_32;
    }
    goto LABEL_29;
  }
  uint64_t v11 = 6;
  if (a4 >= 7)
  {
    while (1)
    {
      int v12 = a2[v11];
      if (v12 != 255) {
        break;
      }
      if (a4 == ++v11)
      {
        uint64_t v11 = a4;
        goto LABEL_18;
      }
    }
    if ((v12 & 0xC0) == 0x40) {
      v11 += 2;
    }
  }
LABEL_18:
  if (v11 + 10 <= a4)
  {
    uint64_t v13 = &a2[v11];
    if ((a2[v11] & 0xF0) == 0x30)
    {
      if (!ReadPTSorDTSWithVerify(&a2[v11], (unint64_t *)a3, 49)) {
        goto LABEL_32;
      }
      uint64_t v10 = v13 + 5;
LABEL_22:
      if (ReadPTSorDTSWithVerify(v10, (unint64_t *)(a3 + 8), 17))
      {
        __int16 v14 = 257;
LABEL_28:
        *(_WORD *)(a3 + 25) = v14;
        return 0;
      }
      goto LABEL_32;
    }
  }
  if (v11 + 5 > a4 || a2[v11] < 0x20u)
  {
LABEL_29:
    *(_WORD *)(a3 + 25) = 0;
    return 0;
  }
  if (ReadPTSorDTSWithVerify(&a2[v11], (unint64_t *)a3, 33))
  {
    __int16 v14 = 1;
    goto LABEL_28;
  }
LABEL_32:

  return FigSignalErrorAt();
}

uint64_t ReadPTSorDTSWithVerify(unsigned __int8 *a1, unint64_t *a2, int a3)
{
  unsigned int v3 = *a1;
  if ((v3 & 0xFFFFFFF1) != a3) {
    return 0;
  }
  int v4 = a1[2];
  if ((v4 & 1) == 0) {
    return 0;
  }
  unint64_t v5 = a1[4];
  if ((v5 & 1) == 0) {
    return 0;
  }
  *a2 = (v5 >> 1) | ((unint64_t)((v4 << 7) & 0x7F00 | ((a1[1] | (((v3 >> 1) & 7) << 8)) << 15) | a1[3]) << 7);
  return 1;
}

uint64_t ProcessPesData(uint64_t a1, OpaqueCMBlockBuffer *a2, size_t a3, char *a4, unint64_t a5, int a6, uint64_t a7, size_t *a8, unsigned char *a9)
{
  char *returnedPointerOut;

  *a9 = 0;
  *a8 = 0;
  if (!a5) {
    return 0;
  }
  size_t v11 = a5;
  int v12 = a4;
  size_t v13 = a3;
  size_t length = 0;
  returnedPointerOut = 0;
  long long v46 = 0u;
  long long v47 = 0u;
  BOOL v45 = 0;
  if (a6)
  {
    *(unsigned char *)(a1 + 122) = 1;
    *(void *)(a1 + 128) = a7;
    uint64_t TimestampFromPesHeader = CheckPesHeaderLength(a2, a3, (uint64_t)a4, a5, &length, &v45);
    if (!TimestampFromPesHeader)
    {
      if (!v45)
      {
        uint64_t v24 = CopyBytesAtOffset(a2, v13, v12, (void *)(a1 + 152), v11);
        if (!v24)
        {
          size_t v25 = length;
          *(void *)(a1 + 424) = v11;
          *(void *)(a1 + 432) = v25;
LABEL_62:
          *a8 = v11;
          return v24;
        }
LABEL_61:
        PesErrorHandling(a1, v24);
        goto LABEL_62;
      }
      if (!a2)
      {
        returnedPointerOut = v12;
        size_t v17 = length;
        uint64_t v18 = v12;
        v12 += length;
        goto LABEL_22;
      }
      size_t v17 = length;
      uint64_t TimestampFromPesHeader = CMBlockBufferAccessDataBytes(a2, v13, length, (void *)(a1 + 152), &returnedPointerOut);
      if (!TimestampFromPesHeader)
      {
        v13 += v17;
        uint64_t v18 = returnedPointerOut;
LABEL_22:
        v11 -= v17;
        *a8 = v17;
        goto LABEL_52;
      }
    }
LABEL_60:
    uint64_t v24 = TimestampFromPesHeader;
    goto LABEL_61;
  }
  unint64_t v19 = *(void *)(a1 + 424);
  if (!v19)
  {
    if (*(unsigned char *)(a1 + 122))
    {
      BYTE8(v47) = 0;
      goto LABEL_25;
    }
    goto LABEL_72;
  }
  uint64_t v20 = (void *)(a1 + 424);
  uint64_t v21 = *(void *)(a1 + 432);
  if (!v21)
  {
    uint64_t v44 = (void *)(a1 + 424);
    uint64_t v29 = 25;
    if (v19 < 9) {
      uint64_t v29 = 9;
    }
    size_t v30 = v29 - v19;
    size_t v42 = v30;
    if (v30 >= a5) {
      size_t v31 = a5;
    }
    else {
      size_t v31 = v30;
    }
    uint64_t v43 = a1 + 152;
    uint64_t TimestampFromPesHeader = CopyBytesAtOffset(a2, a3, a4, (void *)(a1 + 152 + v19), v31);
    if (TimestampFromPesHeader) {
      goto LABEL_60;
    }
    uint64_t TimestampFromPesHeader = CheckPesHeaderLength(0, 0, v43, *v44 + v31, (unint64_t *)(a1 + 432), &v45);
    if (TimestampFromPesHeader) {
      goto LABEL_60;
    }
    if (v45)
    {
      uint64_t v20 = v44;
      uint64_t v32 = *(void *)(a1 + 432) - *v44;
      if (a2) {
        uint64_t v33 = 0;
      }
      else {
        uint64_t v33 = *(void *)(a1 + 432) - *v44;
      }
      v12 += v33;
      if (a2) {
        uint64_t v34 = *(void *)(a1 + 432) - *v44;
      }
      else {
        uint64_t v34 = 0;
      }
      v13 += v34;
      v11 -= v32;
      *a8 += v32;
      goto LABEL_51;
    }
    *v44 += v31;
    if (v42 < v11)
    {
      if (a2) {
        size_t v39 = 0;
      }
      else {
        size_t v39 = v31;
      }
      uint64_t v40 = &v12[v39];
      if (a2) {
        size_t v41 = v31;
      }
      else {
        size_t v41 = 0;
      }
      uint64_t v24 = ProcessPesData(a1, a2, v41 + v13, v40, v11 - v31, 0, a7, a8, a9);
      size_t v11 = *a8 + v31;
      goto LABEL_62;
    }
LABEL_72:
    uint64_t v24 = 0;
    goto LABEL_62;
  }
  size_t v22 = v21 - v19;
  if (!v22)
  {
LABEL_51:
    uint64_t v18 = (char *)(a1 + 152);
    size_t v17 = *(void *)(a1 + 432);
    size_t length = v17;
    returnedPointerOut = (char *)(a1 + 152);
    *uint64_t v20 = 0;
    v20[1] = 0;
LABEL_52:
    BYTE8(v47) = 1;
    *(void *)&long long v47 = *(void *)(a1 + 128);
    if (*v18 || v18[1] || v18[2] != 1) {
      goto LABEL_59;
    }
    unint64_t v35 = __rev16(*((unsigned __int16 *)v18 + 2));
    *(void *)(a1 + 136) = v35;
    *(void *)(a1 + 144) = 0;
    *(unsigned char *)(a1 + 123) = v35 == 0;
    if (v35)
    {
      BOOL v36 = v35 >= v17 - 6;
      unint64_t v37 = v35 - (v17 - 6);
      if (!v36)
      {
LABEL_59:
        uint64_t TimestampFromPesHeader = FigSignalErrorAt();
        goto LABEL_60;
      }
      *(void *)(a1 + 136) = v37;
    }
    else if (!*(unsigned char *)(a1 + 120))
    {
      goto LABEL_59;
    }
    uint64_t TimestampFromPesHeader = ReadTimestampFromPesHeader(0, v18, (uint64_t)&v46, v17, 0, *(_DWORD *)(*(void *)(a1 + 8) + 48));
    if (TimestampFromPesHeader) {
      goto LABEL_60;
    }
LABEL_25:
    if (!*(unsigned char *)(a1 + 123) && v11 >= *(void *)(a1 + 136) - *(void *)(a1 + 144)) {
      size_t v11 = *(void *)(a1 + 136) - *(void *)(a1 + 144);
    }
    if (v11
      && (uint64_t v26 = *(uint64_t (**)(uint64_t, OpaqueCMBlockBuffer *, size_t, char *, size_t, long long *))(a1 + 840)) != 0)
    {
      uint64_t v24 = v26(a1, a2, v13, v12, v11, &v46);
    }
    else
    {
      uint64_t v24 = 0;
    }
    size_t v27 = *(void *)(a1 + 136);
    size_t v28 = *(void *)(a1 + 144) + v11;
    *(void *)(a1 + 144) = v28;
    if (v28 >= v27 && !*(unsigned char *)(a1 + 123))
    {
      *(void *)(a1 + 136) = 0;
      *(void *)(a1 + 144) = 0;
      *a9 = 1;
    }
    v11 += *a8;
    goto LABEL_62;
  }
  if (v22 >= a5) {
    size_t v23 = a5;
  }
  else {
    size_t v23 = v22;
  }
  CopyBytesAtOffset(a2, a3, a4, (void *)(a1 + v19 + 152), v23);
  *(void *)(a1 + 424) += v23;
  *a8 = v23;
  v11 -= v23;
  if (v11)
  {
    if (a2) {
      v13 += v23;
    }
    else {
      v12 += v23;
    }
    goto LABEL_51;
  }
  return 0;
}

uint64_t CopyBytesAtOffset(OpaqueCMBlockBuffer *a1, size_t a2, void *__src, void *__dst, size_t __n)
{
  if (a1)
  {
    return CMBlockBufferCopyDataBytes(a1, a2, __n, __dst);
  }
  else
  {
    memcpy(__dst, __src, __n);
    return 0;
  }
}

uint64_t *PesErrorHandling(uint64_t a1, uint64_t a2)
{
  FigMPEG2VideoFrameFlush(a1);
  uint64_t result = PesCleanOutData(a1);
  if (a2)
  {
    uint64_t v5 = *(uint64_t **)(a1 + 8);
    unsigned int v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v5[8];
    if (v6)
    {
      uint64_t v7 = *v5;
      uint64_t v8 = v5[9];
      uint64_t v9 = *(unsigned int *)(*(void *)a1 + 40);
      uint64_t v10 = *(unsigned int *)(a1 + 60);
      return (uint64_t *)v6(v7, v8, v9, v10, a2);
    }
  }
  return result;
}

void PesPacketListClean(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  for (CFIndex i = *(void **)a1; *(void *)a1; CFIndex i = *(void **)a1)
  {
    unsigned int v3 = (const void *)i[1];
    *(void *)a1 = *i;
    if (v3) {
      CFRelease(v3);
    }
    free(i);
  }
}

uint64_t PesPacketListSaveChunk(void *a1, CMBlockBufferRef targetBBuf, size_t offsetToData, const void *a4, size_t dataLength, uint64_t a6)
{
  if (*(unsigned char *)(a6 + 24))
  {
    int v12 = malloc_type_calloc(1uLL, 0x30uLL, 0x1020040586F8431uLL);
    if (!v12) {
      goto LABEL_21;
    }
    size_t v13 = v12;
    __int16 v14 = (void **)(a1 + 1);
    if (*a1)
    {
      unint64_t v15 = *v14;
    }
    else
    {
      unint64_t v15 = a1 + 1;
      __int16 v14 = (void **)a1;
    }
    *unint64_t v15 = v12;
    *__int16 v14 = v12;
    long long v17 = *(_OWORD *)(a6 + 16);
    *((_OWORD *)v12 + 1) = *(_OWORD *)a6;
    *((_OWORD *)v12 + 2) = v17;
  }
  else
  {
    size_t v13 = (void *)a1[1];
    if (!v13) {
      return 0;
    }
  }
  unint64_t v19 = (OpaqueCMBlockBuffer *)v13[1];
  uint64_t v18 = (CMBlockBufferRef *)(v13 + 1);
  uint64_t result = (uint64_t)v19;
  if (!v19)
  {
    uint64_t result = CMBlockBufferCreateEmpty((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 4u, 0, v18);
    if (result) {
      return result;
    }
    uint64_t result = (uint64_t)*v18;
    if (!*v18) {
      return result;
    }
  }
  if (targetBBuf)
  {
    return CMBlockBufferAppendBufferReference((CMBlockBufferRef)result, targetBBuf, offsetToData, dataLength, 0);
  }
  CFAllocatorRef v20 = (const __CFAllocator *)*MEMORY[0x1E4F1CF90];
  uint64_t v21 = CFAllocatorAllocate((CFAllocatorRef)*MEMORY[0x1E4F1CF90], dataLength, 0);
  if (v21)
  {
    size_t v22 = v21;
    memcpy(v21, a4, dataLength);
    size_t v23 = *v18;
    return CMBlockBufferAppendMemoryBlock(v23, v22, dataLength, v20, 0, 0, dataLength, 0);
  }
LABEL_21:

  return FigSignalErrorAt();
}

__n128 FrameQueueMove(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 88;
  PesFrameHeaderDestroy((void *)(a1 + 88));
  ClosedCaptionQueueClean(a1 + 64);
  while (1)
  {
    uint64_t v5 = *(uint64_t **)(a2 + 64);
    if (!v5) {
      break;
    }
    uint64_t v6 = *v5;
    uint64_t v7 = (void *)v5[1];
    if (*v5)
    {
      *(void *)(v6 + 8) = v7;
      uint64_t v7 = (void *)v5[1];
    }
    else
    {
      *(void *)(a2 + 72) = v7;
    }
    *uint64_t v7 = v6;
    uint64_t v8 = *(uint64_t ***)(a1 + 72);
    *uint64_t v5 = 0;
    v5[1] = (uint64_t)v8;
    *uint64_t v8 = v5;
    *(void *)(a1 + 72) = v5;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  long long v9 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v9;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  __n128 result = *(__n128 *)(a2 + 88);
  long long v11 = *(_OWORD *)(a2 + 104);
  *(void *)(v4 + 32) = *(void *)(a2 + 120);
  *(__n128 *)uint64_t v4 = result;
  *(_OWORD *)(v4 + 16) = v11;
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  uint64_t v12 = *(void *)(a2 + 132);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(void *)(a1 + 132) = v12;
  *(_WORD *)(a1 + 144) = *(_WORD *)(a2 + 144);
  *(unsigned char *)(a1 + 146) = *(unsigned char *)(a2 + 146);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + 104) = 0;
  return result;
}

void PesFrameHeaderDestroy(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    free(v2);
    a1[3] = 0;
  }
  unsigned int v3 = (void *)a1[2];
  if (v3)
  {
    free(v3);
    a1[2] = 0;
  }
  uint64_t v4 = (void *)a1[4];
  if (v4)
  {
    free(v4);
    a1[4] = 0;
  }
}

void ClosedCaptionQueueClean(uint64_t a1)
{
  for (CFIndex i = *(uint64_t **)a1; *(void *)a1; CFIndex i = *(uint64_t **)a1)
  {
    uint64_t v3 = *i;
    uint64_t v4 = (void *)i[1];
    if (*i)
    {
      *(void *)(v3 + 8) = v4;
      uint64_t v4 = (void *)i[1];
    }
    else
    {
      *(void *)(a1 + 8) = v4;
    }
    *uint64_t v4 = v3;
    uint64_t v5 = (const void *)i[2];
    if (v5) {
      CFRelease(v5);
    }
    free(i);
  }
}

uint64_t FrameQueueEntryMakeRetainable(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (!*(unsigned char *)(a2 + 145))
  {
    uint64_t v3 = malloc_type_calloc(1uLL, 0x98uLL, 0x10B0040949082C0uLL);
    if (v3)
    {
      uint64_t v4 = v3;
      v3[8] = 0;
      v3[9] = v3 + 8;
      FrameQueueMove((uint64_t)v3, v2);
      *((unsigned char *)v4 + 145) = 1;
      return (uint64_t)v4;
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

void FrameQueueEntryClean(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 56);
  if (v2) {
    CFRelease(v2);
  }
  *(void *)(a1 + 56) = 0;
  ClosedCaptionQueueClean(a1 + 64);
  *(_WORD *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 50) = 0;
  *(void *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 146) = 0;
  *(_DWORD *)(a1 + 148) = 0;
}

void FrameQueueEntryDestroy(uint64_t a1)
{
  FrameQueueEntryClean(a1);
  PesFrameHeaderDestroy((void *)(a1 + 88));
  if (*(unsigned char *)(a1 + 145))
  {
    free((void *)a1);
  }
}

uint64_t *FrameQueueClean(uint64_t a1)
{
  __n128 result = *(uint64_t **)a1;
  if (result)
  {
    do
    {
      uint64_t v3 = *result;
      uint64_t v4 = (void *)result[1];
      if (*result)
      {
        *(void *)(v3 + 8) = v4;
        uint64_t v4 = (void *)result[1];
      }
      else
      {
        *(void *)(a1 + 8) = v4;
      }
      *uint64_t v4 = v3;
      FrameQueueEntryDestroy((uint64_t)result);
      __n128 result = *(uint64_t **)a1;
    }
    while (*(void *)a1);
  }
  return result;
}

uint64_t CloseCaptionQueueAdd(uint64_t a1, const void *a2)
{
  uint64_t v4 = malloc_type_calloc(1uLL, 0x18uLL, 0xA0040A8488062uLL);
  if (!v4) {
    return 4294954510;
  }
  uint64_t v5 = v4;
  if (a2) {
    CFTypeRef v6 = CFRetain(a2);
  }
  else {
    CFTypeRef v6 = 0;
  }
  uint64_t result = 0;
  v5[2] = v6;
  uint64_t v8 = *(void **)(a1 + 8);
  *uint64_t v5 = 0;
  v5[1] = v8;
  *uint64_t v8 = v5;
  *(void *)(a1 + 8) = v5;
  return result;
}

void PesCleanAfterFrameEmit(uint64_t a1)
{
  FrameQueueEntryClean(a1 + 456);
  uint64_t v2 = *(void **)(a1 + 608);
  if (v2)
  {
    CFAllocatorDeallocate((CFAllocatorRef)*MEMORY[0x1E4F1CF90], v2);
    *(void *)(a1 + 608) = 0;
  }
  *(unsigned char *)(a1 + 656) = 0;
  *(void *)(a1 + 616) = 0;
  *(void *)(a1 + 632) = 0;
  *(void *)(a1 + 624) = 0;
  unsigned int v3 = *(_DWORD *)(a1 + 648);
  if (v3 > *(_DWORD *)(a1 + 652))
  {
    if (v3 >= 0x18) {
      unsigned int v3 = 24;
    }
    *(_DWORD *)(a1 + 652) = v3;
  }
  *(_DWORD *)(a1 + 648) = 0;
}

uint64_t *PesCleanOutData(uint64_t a1)
{
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  FigMPEG2VideoFrameDiscard(a1);
  PesCleanAfterFrameEmit(a1);
  uint64_t result = FrameQueueClean(a1 + 728);
  *(_DWORD *)(a1 + 744) = 0;
  *(unsigned char *)(a1 + 451) = 0;
  *(unsigned char *)(a1 + 122) = 0;
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 432) = 0;
  unsigned int v3 = *(uint64_t (**)(uint64_t))(a1 + 848);
  if (v3) {
    uint64_t result = (uint64_t *)v3(a1);
  }
  *(void *)(a1 + 816) = -1;
  return result;
}

uint64_t *PesReinitialize(uint64_t a1)
{
  uint64_t result = PesCleanOutData(a1);
  *(unsigned char *)(a1 + 658) = 0;
  *(void *)(a1 + 704) = 0;
  return result;
}

uint64_t FindPesFromStreamID(uint64_t a1, int a2)
{
  for (uint64_t result = *(void *)(a1 + 24); result; uint64_t result = *(void *)(result + 32))
  {
    if (*(_DWORD *)(result + 64) == a2) {
      break;
    }
  }
  return result;
}

uint64_t PesCreateBlockBufferFromFrameMemory(uint64_t a1)
{
  if (*(void *)(a1 + 512)) {
    return 0;
  }
  uint64_t v3 = a1 + 608;
  uint64_t v4 = *(void **)(a1 + 608);
  if (v4)
  {
    CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF90];
    uint64_t v1 = CMBlockBufferCreateWithMemoryBlock(*(CFAllocatorRef *)(*(void *)(a1 + 8) + 40), v4, *(void *)(a1 + 632), (CFAllocatorRef)*MEMORY[0x1E4F1CF90], 0, 0, *(void *)(a1 + 616), 0, (CMBlockBufferRef *)(a1 + 512));
    if (v1) {
      CFAllocatorDeallocate(v5, *(void **)v3);
    }
  }
  else
  {
    uint64_t v1 = 0;
  }
  *(unsigned char *)(a1 + 656) = 0;
  *(void *)(v3 + 8) = 0;
  *(void *)(v3 + 16) = 0;
  *(void *)uint64_t v3 = 0;
  return v1;
}

uint64_t PesAddMemoryToFrameMemory(uint64_t a1, const void *a2, unint64_t a3, unint64_t a4, size_t *a5, char *a6)
{
  size_t v9 = a3;
  if (*(void *)(a1 + 512))
  {
    return PesAddMemoryToFrameBlockBuffer(a1, a2, a3, a4, a5, a6);
  }
  if (*(unsigned char *)(a1 + 656))
  {
    unint64_t v13 = *(void *)(a1 + 624);
  }
  else
  {
    *(unsigned char *)(a1 + 656) = 1;
    *(void *)(a1 + 624) = a4;
    unint64_t v13 = a4;
  }
  __int16 v14 = *(void **)(a1 + 608);
  if (!v14)
  {
    if (v13)
    {
      if (*(unsigned char *)(a1 + 119)) {
        unint64_t v19 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0;
      }
      else {
        unint64_t v19 = v13;
      }
    }
    else
    {
      unint64_t v19 = *(void *)(a1 + 640);
      if (v19 < a3)
      {
        unint64_t v19 = (a3 + 0x1FFF) & 0xFFFFFFFFFFFFE000;
        *(void *)(a1 + 640) = v19;
        if (v19 > *(void *)(*(void *)(a1 + 8) + 104)) {
          goto LABEL_17;
        }
      }
    }
    uint64_t v21 = CFAllocatorAllocate((CFAllocatorRef)*MEMORY[0x1E4F1CF90], v19, 0);
    *(void *)(a1 + 608) = v21;
    if (!v21)
    {
LABEL_40:
      uint64_t v25 = FigSignalErrorAt();
      PesCleanAfterFrameEmit(a1);
      return v25;
    }
    *(void *)(a1 + 632) = v19;
    *(void *)(a1 + 616) = 0;
    size_t v22 = *(void *)(a1 + 624);
    if (v22 < v9 && v22 != 0) {
      size_t v9 = *(void *)(a1 + 624);
    }
    goto LABEL_31;
  }
  uint64_t v15 = *(void *)(a1 + 616);
  size_t v16 = v13 - v15;
  if (v13 - v15 >= a3) {
    size_t v16 = a3;
  }
  if (v13) {
    size_t v9 = v16;
  }
  unint64_t v17 = v9 + v15;
  if (*(unsigned char *)(a1 + 119)) {
    unint64_t v17 = (v9 + v15 + 15) & 0xFFFFFFFFFFFFFFF0;
  }
  if (v17 <= *(void *)(a1 + 632)) {
    goto LABEL_31;
  }
  unint64_t v18 = (v17 + 0x1FFF) & 0xFFFFFFFFFFFFE000;
  *(void *)(a1 + 640) = v18;
  if (v18 <= *(void *)(*(void *)(a1 + 8) + 104))
  {
    CFAllocatorRef v20 = (char *)CFAllocatorReallocate((CFAllocatorRef)*MEMORY[0x1E4F1CF90], v14, v18, 0);
    *(void *)(a1 + 608) = v20;
    *(void *)(a1 + 632) = *(void *)(a1 + 640);
    goto LABEL_32;
  }
LABEL_17:
  PesErrorHandling(a1, 4294954325);
  size_t v9 = 0;
LABEL_31:
  CFAllocatorRef v20 = *(char **)(a1 + 608);
LABEL_32:
  if (!v20) {
    goto LABEL_40;
  }
  if (a2) {
    memcpy(&v20[*(void *)(a1 + 616)], a2, v9);
  }
  *(void *)(a1 + 616) += v9;
  *a5 = v9;
  if (a4 && *(void *)(a1 + 616) >= a4)
  {
    uint64_t result = PesCreateBlockBufferFromFrameMemory(a1);
    char v24 = 1;
  }
  else
  {
    char v24 = 0;
    uint64_t result = 0;
  }
  *a6 = v24;
  return result;
}

uint64_t PesAddMemoryToFrameBlockBuffer(uint64_t a1, const void *a2, unint64_t size, unint64_t a4, size_t *a5, unsigned char *a6)
{
  if (!size) {
    goto LABEL_33;
  }
  if (*(unsigned char *)(a1 + 116)
    && (size > a4
     || *(unsigned char *)(a1 + 119)
     || (a2 & 3) != 0 && *(unsigned char *)(a1 + 117)
     || (*(unsigned char *)(a1 + 118) ? (BOOL v10 = (a2 & 0xF) == 0) : (BOOL v10 = 1), !v10))
    || *(void *)(a1 + 608))
  {
    return PesAddMemoryToFrameMemory();
  }
  if (*(unsigned char *)(a1 + 656))
  {
    a4 = *(void *)(a1 + 624);
    if (!a4) {
      goto LABEL_20;
    }
  }
  else
  {
    *(void *)(a1 + 616) = 0;
    *(void *)(a1 + 624) = a4;
    *(unsigned char *)(a1 + 656) = 1;
    if (!a4) {
      goto LABEL_20;
    }
  }
  if (a4 - *(void *)(a1 + 616) < size) {
    size_t size = a4 - *(void *)(a1 + 616);
  }
LABEL_20:
  *a5 = size;
  CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF90];
  unint64_t v13 = CFAllocatorAllocate((CFAllocatorRef)*MEMORY[0x1E4F1CF90], size, 0);
  __int16 v14 = v13;
  if (a2)
  {
    if (v13)
    {
      memcpy(v13, a2, *a5);
      goto LABEL_26;
    }
  }
  else
  {
    bzero(v13, *a5);
    if (v14)
    {
LABEL_26:
      uint64_t v15 = *(OpaqueCMBlockBuffer **)(a1 + 512);
      if (!v15)
      {
        uint64_t Empty = CMBlockBufferCreateEmpty(*(CFAllocatorRef *)(*(void *)(a1 + 8) + 40), *(_DWORD *)(a1 + 652), 0, (CMBlockBufferRef *)(a1 + 512));
        if (Empty) {
          goto LABEL_36;
        }
        uint64_t v15 = *(OpaqueCMBlockBuffer **)(a1 + 512);
      }
      uint64_t Empty = CMBlockBufferAppendMemoryBlock(v15, v14, *a5, v12, 0, 0, *a5, 0);
      if (!Empty)
      {
        ++*(_DWORD *)(a1 + 648);
        unint64_t v17 = *(void *)(a1 + 616) + *a5;
        *(void *)(a1 + 616) = v17;
        uint64_t v18 = 0;
        if (*(void *)(a1 + 624) - 1 < v17) {
          *a6 = 1;
        }
        return v18;
      }
LABEL_36:
      uint64_t v18 = Empty;
      CFAllocatorDeallocate(v12, v14);
      return v18;
    }
  }
LABEL_33:

  return FigSignalErrorAt();
}

uint64_t PesAddBlockBufferToFrameMemory(uint64_t a1, CMBlockBufferRef theBuffer, size_t offset, size_t a4, unint64_t a5, void *a6, char *a7)
{
  *a6 = 0;
  if (!a4) {
    return 0;
  }
  size_t v10 = a4;
  size_t lengthAtOffsetOut = 0;
  dataPointerOut = 0;
  size_t v16 = 0;
  while (1)
  {
    uint64_t result = CMBlockBufferGetDataPointer(theBuffer, offset, &lengthAtOffsetOut, 0, &dataPointerOut);
    if (result) {
      break;
    }
    unint64_t v15 = v10 >= lengthAtOffsetOut ? lengthAtOffsetOut : v10;
    uint64_t result = PesAddMemoryToFrameMemory(a1, dataPointerOut, v15, a5, &v16, a7);
    if (result) {
      break;
    }
    *a6 += v16;
    offset += v15;
    v10 -= v15;
    if (!v10) {
      return 0;
    }
  }
  return result;
}

uint64_t PesAddBlockBufferToFrameBlockBuffer(uint64_t a1, CMBlockBufferRef theBuffer, size_t offset, size_t dataLength, unint64_t a5, size_t *a6, char *a7)
{
  if (theBuffer)
  {
    size_t v7 = dataLength;
    if (dataLength)
    {
      if (*(void *)(a1 + 608))
      {
        return PesAddBlockBufferToFrameMemory(a1, theBuffer, offset, dataLength, a5, a6, a7);
      }
      if (*(unsigned char *)(a1 + 116) && !*(void *)(a1 + 512))
      {
        if (dataLength < a5) {
          return PesAddBlockBufferToFrameMemory(a1, theBuffer, offset, v7, a5, a6, a7);
        }
        uint64_t v18 = 0;
        size_t lengthAtOffsetOut = 0;
        if (CMBlockBufferGetDataPointer(theBuffer, offset, &lengthAtOffsetOut, 0, &v18)) {
          return 4294954593;
        }
        if (lengthAtOffsetOut < v7
          || *(unsigned char *)(a1 + 117) && (v18 & 3) != 0
          || *(unsigned char *)(a1 + 118) && (v18 & 0xF) != 0)
        {
          return PesAddBlockBufferToFrameMemory(a1, theBuffer, offset, v7, a5, a6, a7);
        }
      }
      if (*(unsigned char *)(a1 + 656))
      {
        unint64_t v15 = *(void *)(a1 + 624);
        if (!v15) {
          goto LABEL_13;
        }
      }
      else
      {
        *(unsigned char *)(a1 + 656) = 1;
        *(void *)(a1 + 624) = a5;
        *(void *)(a1 + 616) = 0;
        unint64_t v15 = a5;
        if (!a5) {
          goto LABEL_13;
        }
      }
      if (v15 - *(void *)(a1 + 616) < v7) {
        size_t v7 = v15 - *(void *)(a1 + 616);
      }
LABEL_13:
      size_t v16 = *(OpaqueCMBlockBuffer **)(a1 + 512);
      if (v16)
      {
        if (v15 != a5) {
          return FigSignalErrorAt();
        }
      }
      else
      {
        uint64_t result = CMBlockBufferCreateEmpty(*(CFAllocatorRef *)(*(void *)(a1 + 8) + 40), *(_DWORD *)(a1 + 652), 0, (CMBlockBufferRef *)(a1 + 512));
        if (result) {
          return result;
        }
        size_t v16 = *(OpaqueCMBlockBuffer **)(a1 + 512);
      }
      uint64_t result = CMBlockBufferAppendBufferReference(v16, theBuffer, offset, v7, 0);
      ++*(_DWORD *)(a1 + 648);
      *a6 = v7;
      unint64_t v17 = *(void *)(a1 + 616) + v7;
      *(void *)(a1 + 616) = v17;
      *a7 = a5 - 1 < v17;
      return result;
    }
  }

  return FigSignalErrorAt();
}

void *PesFrameHeadersInit(uint64_t a1, size_t a2)
{
  size_t v4 = 8 * a2;
  *(void *)(a1 + 16) = malloc_type_realloc(*(void **)(a1 + 16), 8 * a2, 0x100004000313F17uLL);
  *(void *)(a1 + 24) = malloc_type_realloc(*(void **)(a1 + 24), v4, 0x100004000313F17uLL);
  uint64_t result = malloc_type_realloc(*(void **)(a1 + 32), a2, 0x100004077774924uLL);
  *(void *)(a1 + 32) = result;
  size_t v6 = *(void *)a1;
  if (*(void *)a1 >= a2) {
    size_t v6 = a2;
  }
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = a2;
  return result;
}

BOOL PesFrameHeaderAddOffset(BOOL result, uint64_t a2, char a3)
{
  if (result)
  {
    CFAllocatorRef v5 = (uint64_t *)result;
    uint64_t result = PesFrameHeaderCheckSize((void *)result, 1uLL);
    if (result)
    {
      *(void *)(v5[2] + 8 * *v5) = a2;
      *(unsigned char *)(v5[4] + *v5) = a3;
      uint64_t v6 = v5[3];
      *(void *)(v6 + 8 * *v5) = 0;
      if (*v5)
      {
        *(void *)(v6 + 8 * *v5 - 8) = a2 - *(void *)(v5[2] + 8 * *v5 - 8);
        uint64_t v7 = *v5 + 1;
      }
      else
      {
        uint64_t v7 = 1;
      }
      *CFAllocatorRef v5 = v7;
    }
  }
  return result;
}

BOOL PesFrameHeaderCheckSize(void *a1, unint64_t a2)
{
  if (a1[2] && a1[3] && a1[4] && a1[1] > *a1 + a2) {
    return 1;
  }
  uint64_t v3 = a1[1];
  uint64_t v4 = 8;
  if (a2 < 8) {
    uint64_t v4 = a2;
  }
  if (__CFADD__(v3, a2)) {
    uint64_t v4 = 0;
  }
  PesFrameHeadersInit((uint64_t)a1, v4 + v3);
  return a1[2] && a1[3] && a1[4];
}

void *PesFrameHeaderFinalizeFrame(void *result, int a2)
{
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = result[68];
    if (v3)
    {
      *(void *)(result[71] + 8 * v3 - 8) = result[77] - *(void *)(result[70] + 8 * v3 - 8);
      if (a2)
      {
        unint64_t v4 = result[68];
        if (v4)
        {
          for (unint64_t i = 0; i < v4; ++i)
          {
            unsigned int v6 = bswap32(*(void *)(v2[71] + 8 * i) - 4);
            sourceCFIndex Bytes = v6;
            uint64_t v7 = v2[76];
            if (v7)
            {
              *(_DWORD *)(v7 + *(void *)(v2[70] + 8 * i)) = v6;
            }
            else
            {
              uint64_t result = (void *)CMBlockBufferReplaceDataBytes(&sourceBytes, (CMBlockBufferRef)v2[64], *(void *)(v2[70] + 8 * i), 4uLL);
              if (result) {
                return result;
              }
              unint64_t v4 = v2[68];
            }
          }
        }
      }
    }
    return 0;
  }
  return result;
}

BOOL PesFrameHeaderAppendList(void *a1, unint64_t *a2, uint64_t a3)
{
  BOOL result = PesFrameHeaderCheckSize(a1, *a2);
  if (result && *a2)
  {
    unint64_t v7 = 0;
    do
    {
      BOOL result = PesFrameHeaderAddOffset((BOOL)a1, *(void *)(a2[2] + 8 * v7) + a3, *(unsigned char *)(a2[4] + v7));
      ++v7;
    }
    while (v7 < *a2);
  }
  return result;
}

uint64_t FigMPEG2ParserSetAudioCharacteristics(uint64_t result, int a2)
{
  if (*(unsigned char *)(result + 658))
  {
    uint64_t v2 = *(void *)(result + 776);
    if (v2)
    {
      *(void *)(result + 680) += 90000 * v2 / *(unsigned int *)(result + 768);
      *(void *)(result + 776) = 0;
    }
  }
  *(_DWORD *)(result + 768) = a2;
  return result;
}

uint64_t FigMPEG2AudioFrameQueueEntryAdjustTimestampsAndEmit(uint64_t a1, uint64_t a2)
{
  memset(&v44, 0, sizeof(v44));
  if (*(unsigned char *)(a2 + 48) && *(unsigned char *)(a2 + 49)) {
    *(_DWORD *)(a2 + 80) |= 0x1000u;
  }
  uint64_t v4 = *(void *)(a1 + 8);
  int v5 = *(_DWORD *)(v4 + 100);
  if (v5 == 1)
  {
    if (*(unsigned char *)(a1 + 658))
    {
      uint64_t v7 = *(void *)(a1 + 776);
      int64_t v6 = *(void *)(a1 + 680) + 90000 * v7 / *(unsigned int *)(a1 + 768);
    }
    else
    {
      uint64_t v7 = 0;
      *(unsigned char *)(a1 + 658) = 1;
      int64_t v6 = *(void *)(a2 + 24);
      *(void *)(a1 + 680) = v6;
    }
    uint64_t v20 = *(unsigned int *)(a2 + 128);
    *(_DWORD *)(a1 + 772) = v20;
    *(void *)(a1 + 776) = v7 + v20;
    *(void *)(a1 + 688) = v6;
    goto LABEL_56;
  }
  if (!v5)
  {
    *(unsigned char *)(a1 + 658) = 1;
    if (!*(unsigned char *)(a2 + 49))
    {
      CMTime v44 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
LABEL_57:
      uint64_t v33 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, CMTime *, CMTime *, uint64_t, uint64_t, void, void, void, void))(a1 + 84);
      if (v33)
      {
        uint64_t v34 = **(void **)(a1 + 8);
        uint64_t v35 = *(unsigned int *)(a1 + 60);
        uint64_t v36 = *(void *)(a1 + 104);
        uint64_t v37 = *(void *)(a2 + 56);
        uint64_t v38 = *(unsigned int *)(a2 + 80);
        uint64_t v39 = *(void *)(a2 + 40);
        CMTime v43 = v44;
        CMTime v42 = v44;
        uint64_t v27 = v33(v34, v35, v36, v37, &v43, &v42, v38, v39, 0, 0, 0, 0);
      }
      else
      {
        uint64_t v27 = 0;
      }
      FrameQueueEntryDestroy(a2);
      return v27;
    }
    int64_t v6 = *(void *)(a2 + 24);
LABEL_56:
    CMTimeMake(&v44, v6, 90000);
    goto LABEL_57;
  }
  int v8 = *(unsigned __int8 *)(a2 + 49);
  *(unsigned char *)(a2 + 50) = v8;
  uint64_t v9 = *(void *)(a2 + 24);
  *(void *)(a2 + 32) = v9;
  if (*(void *)(a1 + 728))
  {
    Retainable = (void *)FrameQueueEntryMakeRetainable(a1, a2);
    Retainable[2] = a1;
    void *Retainable = 0;
    long long v11 = *(void **)(a1 + 736);
    Retainable[1] = v11;
    *long long v11 = Retainable;
    *(void *)(a1 + 736) = Retainable;
    LODWORD(v11) = *(_DWORD *)(a1 + 744) + 1;
    *(_DWORD *)(a1 + 744) = v11;
    if (v11 < 0x10) {
      return 0;
    }
    *(_OWORD *)&v43.CMTimeValue value = 0uLL;
    uint64_t v12 = *(void *)(a1 + 8);
    CMTimeValue v13 = *(void *)(a1 + 728);
    if (*(unsigned char *)(v12 + 448))
    {
      if (v13)
      {
        uint64_t v14 = *(void *)(a1 + 712);
        uint64_t v15 = *(void *)(a1 + 688) + (90000 * *(_DWORD *)(a1 + 772)) / *(_DWORD *)(a1 + 768);
        uint64_t v16 = *(void *)(v13 + 24);
        uint64_t v17 = v14;
        if ((v16 & 0x100000000) == 0)
        {
          uint64_t v17 = *(void *)(a1 + 712);
          if ((*(void *)(a1 + 672) & 0x100000000) != 0)
          {
            uint64_t v17 = v14 + 0x200000000;
            *(void *)(a1 + 712) = v14 + 0x200000000;
          }
        }
        uint64_t v18 = v17 + v16 + *(void *)(*(void *)a1 + 64);
        if (v18 > *(void *)(v12 + 160) + v15)
        {
          *(void *)(a1 + 712) = v14;
          return FigSignalErrorAt();
        }
        if (v18 < v15)
        {
          *(void *)(a1 + 712) = v14;
LABEL_47:
          CMTimeValue v31 = v13;
          do
          {
            *(_WORD *)(v31 + 49) = 0;
            CMTimeValue v31 = *(void *)v31;
          }
          while (v31);
          *(void *)(v13 + 8) = &v43;
          v43.CMTimeValue value = v13;
          *(void *)&v43.CMTimeScale timescale = Retainable;
          *(void *)(a1 + 728) = 0;
          *(void *)(a1 + 736) = a1 + 728;
          return FigMPEG2ParseFromQueue(&v43);
        }
        *(unsigned char *)(v13 + 146) = 1;
        v43.CMTimeValue value = 0;
        *(void *)&v43.CMTimeScale timescale = &v43;
        FigMPEG2MoveAdjustmentQueue(a1, (uint64_t)&v43);
        return FigMPEG2ParseFromQueue(&v43);
      }
    }
    else if (v13)
    {
      goto LABEL_47;
    }
    *(void *)&v43.CMTimeScale timescale = &v43;
    return FigMPEG2ParseFromQueue(&v43);
  }
  if (!v8)
  {
    uint64_t v28 = *(void *)(a1 + 776);
    int64_t v6 = *(void *)(a1 + 680) + 90000 * v28 / *(unsigned int *)(a1 + 768);
    goto LABEL_55;
  }
  uint64_t v21 = *(void *)(a1 + 712);
  if (!*(unsigned char *)(a1 + 658))
  {
    uint64_t v30 = *(void *)(*(void *)a1 + 64);
    if ((v9 & 0x100000000) != 0 && !v30)
    {
      uint64_t v30 = 0;
      if (0x200000000 - v9 < *(void *)(v4 + 160))
      {
        v21 -= 0x200000000;
        *(void *)(a1 + 712) = v21;
      }
    }
    uint64_t v28 = 0;
    *(void *)(a1 + 664) = v9;
    int64_t v6 = v30 + v9 + v21;
    *(void *)(a1 + 672) = v9;
    *(void *)(a1 + 680) = v6;
    *(void *)(a1 + 760) = v9;
    *(unsigned char *)(a1 + 658) = 1;
    goto LABEL_55;
  }
  uint64_t v22 = *(void *)(a1 + 712);
  if ((v9 & 0x100000000) == 0)
  {
    uint64_t v22 = *(void *)(a1 + 712);
    if ((*(void *)(a1 + 672) & 0x100000000) != 0)
    {
      uint64_t v22 = v21 + 0x200000000;
      *(void *)(a1 + 712) = v21 + 0x200000000;
    }
  }
  uint64_t v23 = v22 + v9;
  uint64_t v24 = *(void *)a1;
  int64_t v6 = v23 + *(void *)(*(void *)a1 + 64);
  if (v6 >= *(void *)(a1 + 680) || !*(unsigned char *)(v4 + 448))
  {
    if (!*(unsigned char *)(a2 + 146))
    {
      uint64_t v29 = v6 - (*(void *)(a1 + 688) + (90000 * *(_DWORD *)(a1 + 772)) / *(_DWORD *)(a1 + 768));
      if (v29)
      {
        uint64_t v40 = *(void *)(v4 + 160);
        if (v29 < -2 || v29 > v40) {
          goto LABEL_29;
        }
        if ((unint64_t)(v29 - 3) < 0xFFFFFFFFFFFFFFFBLL)
        {
          uint64_t v28 = 0;
          *(void *)(a1 + 664) = v9;
          *(void *)(a1 + 672) = v9;
          *(void *)(a1 + 680) = v6;
          *(_DWORD *)(a2 + 80) |= 1u;
          goto LABEL_55;
        }
      }
    }
    uint64_t v28 = 0;
    *(void *)(a1 + 664) = v9;
    *(void *)(a1 + 672) = v9;
    *(void *)(a1 + 680) = v6;
LABEL_55:
    *(void *)(a1 + 688) = v6;
    ++*(_DWORD *)(a1 + 752);
    uint64_t v32 = *(unsigned int *)(a2 + 128);
    *(_DWORD *)(a1 + 772) = v32;
    *(void *)(a1 + 776) = v28 + v32;
    goto LABEL_56;
  }
LABEL_29:
  *(void *)(a1 + 712) = v21;
  *(_DWORD *)(a2 + 80) |= 1u;
  if (*(_DWORD *)(v24 + 72) < 2u)
  {
    uint64_t v28 = 0;
    *(void *)(a1 + 712) = 0;
    int64_t v6 = *(void *)(a1 + 688) + (90000 * *(_DWORD *)(a1 + 772)) / *(_DWORD *)(a1 + 768);
    *(void *)(v24 + 64) = v6 - v9;
    *(void *)(a1 + 688) = v6;
    *(void *)(a1 + 680) = v6;
    *(void *)(a1 + 664) = v9;
    *(void *)(a1 + 672) = v9;
    goto LABEL_55;
  }
  uint64_t v19 = AddAudioFrameToAdjustmentQueue(a1, a2);
  if (v19) {
    return v19;
  }
  uint64_t v25 = *(void *)a1;

  return ProgramCheckPesForTimestampChanges(v25);
}

uint64_t AddAudioFrameToAdjustmentQueue(uint64_t a1, uint64_t a2)
{
  Retainable = (void *)FrameQueueEntryMakeRetainable(a1, a2);
  Retainable[2] = a1;
  uint64_t v4 = *(void **)(a1 + 736);
  void *Retainable = 0;
  Retainable[1] = v4;
  *uint64_t v4 = Retainable;
  *(void *)(a1 + 736) = Retainable;
  ++*(_DWORD *)(a1 + 744);
  return 0;
}

uint64_t ProgramCheckPesForTimestampChanges(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 72) < 2u) {
    return 0;
  }
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2)
  {
    char v3 = 0;
    char v4 = 0;
    uint64_t v5 = *(void *)(a1 + 24);
    do
    {
      if (*(unsigned char *)(v5 + 80))
      {
        if (!*(void *)(v5 + 728)) {
          return 0;
        }
        uint64_t v6 = GetMinimumPTSFromAdjustmentQueue(v5) & 0x180000000;
        v4 |= v6 == 0x180000000;
        v3 |= v6 == 0;
      }
      uint64_t v5 = *(void *)(v5 + 16);
    }
    while (v5);
    if (v4) {
      BOOL v7 = v3 != 0;
    }
    else {
      BOOL v7 = 0;
    }
    uint64_t v8 = 0;
    int v9 = 1;
    do
    {
      if (*(unsigned char *)(v2 + 80))
      {
        unsigned int v10 = *(_DWORD *)(v2 + 768);
        if (v10) {
          uint64_t v11 = *(void *)(v2 + 688) + 90000 * *(_DWORD *)(v2 + 772) / v10;
        }
        else {
          uint64_t v11 = *(void *)(v2 + 704);
        }
        uint64_t MinimumPTSFromAdjustmentQueue = GetMinimumPTSFromAdjustmentQueue(v2);
        BOOL v13 = (MinimumPTSFromAdjustmentQueue & 0x100000000) == 0;
        if (v7 && v13) {
          uint64_t v14 = 0x200000000;
        }
        else {
          uint64_t v14 = 0;
        }
        if (v7 && v13) {
          uint64_t v15 = MinimumPTSFromAdjustmentQueue + 0x200000000;
        }
        else {
          uint64_t v15 = MinimumPTSFromAdjustmentQueue;
        }
        *(void *)(v2 + 712) = v14;
        if (v9)
        {
          int v9 = 0;
          uint64_t v8 = v11 - v15;
        }
        else
        {
          uint64_t v16 = v15 + v8;
          uint64_t v17 = v11 - v15;
          if (v16 < v11) {
            uint64_t v8 = v17;
          }
        }
      }
      else
      {
        *(void *)(v2 + 712) = 0;
      }
      uint64_t v2 = *(void *)(v2 + 16);
    }
    while (v2);
    uint64_t v18 = *(void *)(a1 + 24);
    *(void *)(a1 + 64) = v8;
    uint64_t v22 = 0;
    uint64_t v23 = &v22;
    if (v18)
    {
      uint64_t v19 = &v22;
      do
      {
        uint64_t v20 = *(void *)(v18 + 728);
        if (v20)
        {
          *(_DWORD *)(v20 + 80) |= 1u;
          *uint64_t v19 = v20;
          *(void *)(*(void *)(v18 + 728) + 8) = v23;
          uint64_t v19 = *(uint64_t **)(v18 + 736);
          uint64_t v23 = v19;
          *(void *)(v18 + 728) = 0;
          *(void *)(v18 + 736) = v18 + 728;
        }
        *(unsigned char *)(v18 + 658) = 0;
        *(void *)(v18 + 776) = 0;
        *(void *)(v18 + 744) = 0;
        *(unsigned char *)(v18 + 800) = 0;
        uint64_t v18 = *(void *)(v18 + 16);
      }
      while (v18);
    }
  }
  else
  {
    *(void *)(a1 + 64) = 0;
    uint64_t v23 = &v22;
  }
  return FigMPEG2ParseFromQueue(&v22);
}

uint64_t GetMinimumPTSFromAdjustmentQueue(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 728);
  if (*(_DWORD *)(a1 + 768)) {
    return v1[4];
  }
  uint64_t v4 = v1[3];
  uint64_t result = v1[4];
  uint64_t v5 = v1 + 3;
  if (result != v4)
  {
    uint64_t v6 = *v1;
    if (v6)
    {
      uint64_t v9 = *(void *)(v6 + 24);
      uint64_t v8 = (void *)(v6 + 24);
      uint64_t v7 = v9;
      uint64_t v10 = v9 ^ v4;
      uint64_t v11 = v4 + 0x200000000;
      if ((v4 & 0x100000000) != 0) {
        uint64_t v11 = v4 - 0x200000000;
      }
      if ((v10 & 0x100000000) != 0) {
        uint64_t v4 = v11;
      }
      if (v4 - v7 <= 0) {
        uint64_t v12 = v5;
      }
      else {
        uint64_t v12 = v8;
      }
      return *v12;
    }
    else
    {
      unint64_t v13 = 90000 * (unint64_t)*(unsigned int *)(a1 + 808) / *(unsigned int *)(a1 + 804) + result;
      uint64_t v14 = v13 & 0x1FFFFFFFFLL;
      unint64_t v15 = v13 ^ v4;
      uint64_t v16 = v4 + 0x200000000;
      if ((v4 & 0x100000000) != 0) {
        uint64_t v16 = v4 - 0x200000000;
      }
      if ((v15 & 0x100000000) != 0) {
        uint64_t v17 = v16;
      }
      else {
        uint64_t v17 = v4;
      }
      if (v17 - v14 <= 0) {
        return v4;
      }
      else {
        return v14;
      }
    }
  }
  return result;
}

double FigMPEG2MoveAdjustmentQueue(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 728);
  if (v2)
  {
    *(_DWORD *)(v2 + 80) |= 1u;
    **(void **)(a2 + 8) = v2;
    *(void *)(*(void *)(a1 + 728) + 8) = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = *(void *)(a1 + 736);
    *(void *)(a1 + 728) = 0;
    *(void *)(a1 + 736) = a1 + 728;
  }
  *(unsigned char *)(a1 + 658) = 0;
  *(void *)(a1 + 776) = 0;
  double result = 0.0;
  *(void *)(a1 + 744) = 0;
  *(unsigned char *)(a1 + 800) = 0;
  return result;
}

uint64_t FigMPEG2ParseFromQueue(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)a1;
  if (!*(void *)a1) {
    return 0;
  }
  while (1)
  {
    uint64_t v3 = *v1;
    uint64_t v4 = (void *)v1[1];
    if (*v1)
    {
      *(void *)(v3 + 8) = v4;
      uint64_t v4 = (void *)v1[1];
    }
    else
    {
      *(void *)(a1 + 8) = v4;
    }
    *uint64_t v4 = v3;
    uint64_t v5 = v1[2];
    if (!*(_DWORD *)(v5 + 768)) {
      break;
    }
    uint64_t v6 = FigMPEG2AudioFrameQueueEntryAdjustTimestampsAndEmit(v5, (uint64_t)v1);
    if (v6) {
      goto LABEL_12;
    }
LABEL_9:
    uint64_t v1 = *(uint64_t **)a1;
    if (!*(void *)a1) {
      return 0;
    }
  }
  uint64_t v6 = FigMPEG2VideoFrameQueueEntryAdjustTimestampsAndEmit(v5, (uint64_t)v1);
  if (!v6) {
    goto LABEL_9;
  }
LABEL_12:
  uint64_t v7 = v6;
  while (1)
  {
    uint64_t v9 = *(uint64_t **)a1;
    if (!*(void *)a1) {
      break;
    }
    uint64_t v10 = *v9;
    uint64_t v11 = (void *)v9[1];
    if (*v9)
    {
      *(void *)(v10 + 8) = v11;
      uint64_t v11 = (void *)v9[1];
    }
    else
    {
      *(void *)(a1 + 8) = v11;
    }
    *uint64_t v11 = v10;
    FrameQueueEntryDestroy((uint64_t)v9);
  }
  return v7;
}

uint64_t CreatePesPrivateForDolby(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 56);
  if (*(void *)(a1 + 48))
  {
    uint64_t v3 = *(void (**)(uint64_t))(a1 + 856);
    if (v3) {
      v3(a1);
    }
    *(void *)(a1 + 48) = 0;
  }
  uint64_t v4 = malloc_type_calloc(1uLL, 0x1E0uLL, 0x10B0040413C3907uLL);
  if (!v4) {
    return 12;
  }
  uint64_t v5 = v4;
  FrameQueueEntryInit((uint64_t)(v4 + 320));
  v5[465] = 0;
  if (v2 == 1701143347 || v2 == 1700998451)
  {
    *((void *)v5 + 3) = 10;
    *((void *)v5 + 9) = DolbyDoneWithFrame;
    *(void *)(a1 + 864) = DolbyFlushFrames;
  }
  else
  {
    *((void *)v5 + 3) = 8;
  }
  uint64_t result = 0;
  *(void *)uint64_t v5 = v5 + 296;
  *((void *)v5 + 2) = v5 + 306;
  *((void *)v5 + 4) = DolbyCheckHeader;
  *((void *)v5 + 5) = DolbyCompareHeaders;
  *((void *)v5 + 6) = DolbyGetSamplesPerFrame;
  *((void *)v5 + 7) = DolbyGetSampleFrequency;
  *((void *)v5 + 8) = DolbyGetFrameSize;
  *(void *)(a1 + 840) = PesDolbyProcessData;
  *(void *)(a1 + 848) = PesDolbyCleanPrivateData;
  *(void *)(a1 + 856) = PesDolbyDeletePrivateData;
  *(void *)(a1 + 48) = v5;
  return result;
}

uint64_t DolbyDoneWithFrame(uint64_t a1, uint64_t a2)
{
  char *returnedPointerOut;
  unsigned char temporaryBlock[10];
  uint64_t v13;

  unint64_t v13 = *MEMORY[0x1E4F143B8];
  returnedPointerOut = 0;
  __int16 v10 = 0;
  uint64_t result = CMBlockBufferAccessDataBytes(*(CMBlockBufferRef *)(a2 + 56), 0, 0xAuLL, temporaryBlock, &returnedPointerOut);
  if (result) {
    return result;
  }
  uint64_t v5 = *(void *)(a1 + 48);
  if (DolbyGetFormatID((uint64_t)returnedPointerOut) != 1633889587)
  {
    uint64_t result = DDPlusGetSyncFrameInfo((uint64_t)returnedPointerOut, (unsigned char *)&v10 + 1, &v10);
    if (result) {
      return result;
    }
    if ((v10 & 0xFD00u) != 0 || (_BYTE)v10)
    {
      uint64_t result = *(void *)(v5 + 376);
      if (!result) {
        return result;
      }
      CMBlockBufferAppendBufferReference((CMBlockBufferRef)result, *(CMBlockBufferRef *)(a2 + 56), 0, 0, 0);
      return 0;
    }
    uint64_t AudioBlockCountForSyncFrame = DDPlusGetAudioBlockCountForSyncFrame((uint64_t)returnedPointerOut);
    if (!*(void *)(v5 + 376)) {
      goto LABEL_26;
    }
    uint64_t v7 = *(void *)(v5 + 472);
    if (*(unsigned char *)(a2 + 48))
    {
      if (v7 < 6)
      {
        FrameQueueEntryClean(v5 + 320);
        *(void *)(v5 + 472) = 0;
        uint64_t v8 = *(OpaqueCMBlockBuffer **)(v5 + 376);
        if (!v8) {
          goto LABEL_26;
        }
        goto LABEL_24;
      }
    }
    else if (v7 < 6)
    {
      int v9 = 1;
      goto LABEL_23;
    }
    *(void *)(v5 + 472) = 0;
    uint64_t result = FigMPEG2AudioFrameQueueEntryAdjustTimestampsAndEmit(a1, v5 + 320);
    if (result) {
      return result;
    }
    FrameQueueEntryClean(v5 + 320);
    int v9 = 0;
LABEL_23:
    uint64_t v8 = *(OpaqueCMBlockBuffer **)(v5 + 376);
    if (!v8)
    {
      if (!v9)
      {
LABEL_27:
        FrameQueueMove(v5 + 320, a2);
        goto LABEL_28;
      }
LABEL_26:
      if (!*(unsigned char *)(a2 + 48)) {
        return 0;
      }
      goto LABEL_27;
    }
LABEL_24:
    CMBlockBufferAppendBufferReference(v8, *(CMBlockBufferRef *)(a2 + 56), 0, 0, 0);
LABEL_28:
    uint64_t result = 0;
    *(void *)(v5 + 472) += AudioBlockCountForSyncFrame;
    return result;
  }
  if (!*(void *)(v5 + 376)) {
    return FigMPEG2AudioFrameQueueEntryAdjustTimestampsAndEmit(a1, a1 + 456);
  }
  *(void *)(v5 + 472) = 0;
  uint64_t result = FigMPEG2AudioFrameQueueEntryAdjustTimestampsAndEmit(a1, v5 + 320);
  if (!result)
  {
    FrameQueueEntryClean(v5 + 320);
    return FigMPEG2AudioFrameQueueEntryAdjustTimestampsAndEmit(a1, a1 + 456);
  }
  return result;
}

void DolbyFlushFrames(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (*(void *)(v1 + 376)
    && *(uint64_t *)(v1 + 472) >= 6
    && !FigMPEG2AudioFrameQueueEntryAdjustTimestampsAndEmit(a1, v1 + 320))
  {
    FrameQueueEntryClean(v1 + 320);
  }
  *(void *)(v1 + 472) = 0;
}

uint64_t DolbyCheckHeader(unsigned char *a1)
{
  if (*(_WORD *)a1 != 30475) {
    return 0;
  }
  uint64_t result = DolbyGetFrameSize(a1);
  if (result) {
    return DolbyGetSampleFrequency((uint64_t)a1) != 0;
  }
  return result;
}

uint64_t DolbyCompareHeaders(OpaqueCMBlockBuffer *a1, unsigned __int8 *a2)
{
  char *returnedPointerOut;
  unsigned char temporaryBlock[8];
  uint64_t v6;

  uint64_t v6 = *MEMORY[0x1E4F143B8];
  returnedPointerOut = 0;
  if (CMBlockBufferAccessDataBytes(a1, 0, 8uLL, temporaryBlock, &returnedPointerOut)) {
    return 0;
  }
  if (DolbyGetFormatID((uint64_t)returnedPointerOut) == 1633889587)
  {
    if ((a2[4] ^ returnedPointerOut[4]) <= 0x3F
      && returnedPointerOut[5] == a2[5]
      && (a2[6] ^ returnedPointerOut[6]) < 0x20)
    {
      return 1;
    }
  }
  else if ((a2[5] ^ returnedPointerOut[5]) <= 7)
  {
    return 1;
  }
  return 0;
}

uint64_t PesDolbyProcessData(uint64_t a1, OpaqueCMBlockBuffer *a2, size_t a3, char *a4, size_t a5, uint64_t a6)
{
  return MPEGAudioProcessData(a1, *(void **)(a1 + 48), a2, a3, a4, a5, a6);
}

void PesDolbyCleanPrivateData(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  MPEGAudioCleanPrivateData(v1);
  FrameQueueEntryClean(v1 + 320);
  *(void *)(v1 + 472) = 0;
}

void PesDolbyDeletePrivateData(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  MPEGAudioCleanPrivateData(v2);
  FrameQueueEntryClean(v2 + 320);
  *(void *)(v2 + 472) = 0;
  free(*(void **)(a1 + 48));
  *(void *)(a1 + 48) = 0;
}

uint64_t FigSampleBufferConsumerCreateForSampleBufferConsumer(const char *a1, void *a2)
{
  if (!a2) {
    return 4294954535;
  }
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  FigSampleBufferConsumerGetClassID();
  uint64_t v5 = CMDerivedObjectCreate();
  if (v5) {
    return v5;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v7 = FigReentrantMutexCreate();
  *(void *)uint64_t DerivedStorage = v7;
  if (!v7) {
    return 4294954536;
  }
  CallbacksForUnsortedSampleBuffers = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
  uint64_t v5 = CMBufferQueueCreate(v4, 0, CallbacksForUnsortedSampleBuffers, (CMBufferQueueRef *)(DerivedStorage + 16));
  if (v5) {
    return v5;
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable(v4, 0, MEMORY[0x1E4F1D510]);
  *(void *)(DerivedStorage + 8) = Mutable;
  if (!Mutable) {
    return 4294954536;
  }
  CFMutableDictionaryRef v10 = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  *(void *)(DerivedStorage + 24) = v10;
  if (!v10) {
    return 4294954536;
  }
  uint64_t v11 = FigCFWeakReferenceHolderCreateWithReferencedObject();
  *(void *)(DerivedStorage + 48) = v11;
  if (!v11) {
    return 4294954536;
  }
  uint64_t v12 = MEMORY[0x1E4F1F9F8];
  long long v13 = *MEMORY[0x1E4F1F9F8];
  *(_OWORD *)(DerivedStorage + 64) = *MEMORY[0x1E4F1F9F8];
  uint64_t v14 = *(void *)(v12 + 16);
  *(void *)(DerivedStorage + 80) = v14;
  *(_OWORD *)(DerivedStorage + 88) = v13;
  *(void *)(DerivedStorage + 104) = v14;
  uint64_t v15 = FigDispatchQueueCreateWithPriority();
  *(void *)(DerivedStorage + 32) = v15;
  if (!v15) {
    return 4294954536;
  }
  if (a1) {
    uint64_t v16 = a1;
  }
  else {
    uint64_t v16 = "-";
  }
  uint64_t v17 = 0;
  *(void *)(DerivedStorage + 112) = CFStringCreateWithCString(v4, v16, 0x8000100u);
  *a2 = 0;
  return v17;
}

uint64_t sbcsbc_finalize()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  sbcsbc_detachFromDownstreamConsumer();
  uint64_t v1 = DerivedStorage[4];
  if (v1) {
    dispatch_release(v1);
  }
  uint64_t v2 = (const void *)DerivedStorage[6];
  if (v2)
  {
    CFRelease(v2);
    DerivedStorage[6] = 0;
  }
  uint64_t v3 = (const void *)DerivedStorage[1];
  if (v3)
  {
    CFRelease(v3);
    DerivedStorage[1] = 0;
  }
  CFAllocatorRef v4 = (const void *)DerivedStorage[2];
  if (v4)
  {
    CFRelease(v4);
    DerivedStorage[2] = 0;
  }
  uint64_t v5 = (const void *)DerivedStorage[3];
  if (v5)
  {
    CFRelease(v5);
    DerivedStorage[3] = 0;
  }
  uint64_t v6 = (const void *)DerivedStorage[14];
  if (v6)
  {
    CFRelease(v6);
    DerivedStorage[14] = 0;
  }

  return FigSimpleMutexDestroy();
}

__CFString *sbcsbc_copyDebugDescription(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<FigSampleBufferConsumerForSampleBufferConsumer %p>", a1);
  return Mutable;
}

uint64_t sbcsbc_copyProperty(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*DerivedStorage);
  if (CFEqual(a2, @"DownstreamConsumer"))
  {
    CFTypeRef v7 = (CFTypeRef)DerivedStorage[5];
    if (v7) {
      CFTypeRef v7 = CFRetain(v7);
    }
    *a4 = v7;
  }
  MEMORY[0x19970E2B0](*DerivedStorage);
  return 0;
}

uint64_t sbcsbc_setProperty(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*DerivedStorage);
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      if (!a3)
      {
        uint64_t v23 = MEMORY[0x1E4F1F9F8];
        *((_OWORD *)DerivedStorage + 4) = *MEMORY[0x1E4F1F9F8];
        CMTimeEpoch epoch = *(void *)(v23 + 16);
        goto LABEL_28;
      }
      CFTypeID v12 = CFGetTypeID((CFTypeRef)a3);
      if (v12 == CFDictionaryGetTypeID())
      {
        CMTimeMakeFromDictionary(&v31, (CFDictionaryRef)a3);
        a3 = 0;
        *((_OWORD *)DerivedStorage + 4) = *(_OWORD *)&v31.value;
        CMTimeEpoch epoch = v31.epoch;
LABEL_28:
        DerivedStorage[10] = epoch;
        goto LABEL_42;
      }
LABEL_43:
      a3 = 4294954516;
      goto LABEL_42;
    }
    if (!FigCFEqual())
    {
      if (a3) {
        uint64_t v24 = (__CFString *)a3;
      }
      else {
        uint64_t v24 = @"sbcsbc_ItWasNull";
      }
      CFDictionarySetValue((CFMutableDictionaryRef)DerivedStorage[3], a2, v24);
      uint64_t v25 = DerivedStorage[5];
      if (!v25) {
        goto LABEL_22;
      }
      uint64_t v26 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v26) {
        uint64_t v27 = v26;
      }
      else {
        uint64_t v27 = 0;
      }
      uint64_t v29 = *(uint64_t (**)(uint64_t, const void *, uint64_t))(v27 + 56);
      if (v29)
      {
        uint64_t v20 = v29(v25, a2, a3);
        goto LABEL_40;
      }
LABEL_41:
      a3 = 4294954514;
      goto LABEL_42;
    }
    if (a3)
    {
      CFTypeID v21 = CFGetTypeID((CFTypeRef)a3);
      if (v21 != CFDictionaryGetTypeID()) {
        goto LABEL_43;
      }
      CMTimeMakeFromDictionary(&v31, (CFDictionaryRef)a3);
      a3 = 0;
      *(_OWORD *)(DerivedStorage + 11) = *(_OWORD *)&v31.value;
      CMTimeEpoch v22 = v31.epoch;
    }
    else
    {
      uint64_t v28 = MEMORY[0x1E4F1F9F8];
      *(_OWORD *)(DerivedStorage + 11) = *MEMORY[0x1E4F1F9F8];
      CMTimeEpoch v22 = *(void *)(v28 + 16);
    }
    DerivedStorage[13] = v22;
    goto LABEL_42;
  }
  if (a3)
  {
    CFTypeID v6 = CFGetTypeID((CFTypeRef)a3);
    if (v6 != FigSampleBufferConsumerGetTypeID()) {
      goto LABEL_43;
    }
  }
  sbcsbc_detachFromDownstreamConsumer();
  uint64_t v7 = CMBaseObjectGetDerivedStorage();
  if (a3)
  {
    uint64_t v8 = v7;
    *(void *)(v7 + 40) = a3;
    CFRetain((CFTypeRef)a3);
    if (!*(void *)(v8 + 120))
    {
LABEL_21:
      CFDictionaryApplyFunction(*(CFDictionaryRef *)(v8 + 24), (CFDictionaryApplierFunction)sbcsbc_applyPendingPropertiesDictionaryApplier, *(void **)(v8 + 40));
      FigCFArrayApplyFunction();
      CFArrayRemoveAllValues(*(CFMutableArrayRef *)(v8 + 8));
      CMBufferQueueReset(*(CMBufferQueueRef *)(v8 + 16));
LABEL_22:
      a3 = 0;
      goto LABEL_42;
    }
    uint64_t v9 = *(void *)(v8 + 40);
    uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v10) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    uint64_t v14 = *(unsigned int (**)(uint64_t))(v11 + 24);
    if (v14 && v14(v9)) {
      sbcsbc_downstreamTriggerCallback();
    }
    uint64_t v16 = *(void *)(v8 + 40);
    uint64_t v15 = *(void *)(v8 + 48);
    uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v17) {
      uint64_t v18 = v17;
    }
    else {
      uint64_t v18 = 0;
    }
    uint64_t v19 = *(uint64_t (**)(uint64_t, void (*)(), uint64_t, uint64_t))(v18 + 32);
    if (v19)
    {
      uint64_t v20 = v19(v16, sbcsbc_downstreamTriggerCallback, v15, v8 + 56);
      if (!v20) {
        goto LABEL_21;
      }
LABEL_40:
      a3 = v20;
      goto LABEL_42;
    }
    goto LABEL_41;
  }
LABEL_42:
  MEMORY[0x19970E2B0](*DerivedStorage);
  return a3;
}

void sbcsbc_detachFromDownstreamConsumer()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = *(const void **)(DerivedStorage + 40);
  if (v1)
  {
    uint64_t v2 = DerivedStorage;
    uint64_t v3 = *(void *)(DerivedStorage + 56);
    if (!v3) {
      goto LABEL_9;
    }
    uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v5 = v4 ? v4 : 0;
    CFTypeID v6 = *(void (**)(const void *, uint64_t))(v5 + 40);
    if (v6) {
      v6(v1, v3);
    }
    *(void *)(v2 + 56) = 0;
    uint64_t v1 = *(const void **)(v2 + 40);
    if (v1)
    {
LABEL_9:
      CFRelease(v1);
      *(void *)(v2 + 40) = 0;
    }
  }
}

void sbcsbc_downstreamTriggerCallback()
{
  uint64_t v0 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v0)
  {
    uint64_t v1 = (void *)v0;
    uint64_t v2 = *(NSObject **)(CMBaseObjectGetDerivedStorage() + 32);
    dispatch_async_f(v2, v1, (dispatch_function_t)sbcsbc_downstreamTriggerCallbackAsync);
  }
}

uint64_t sbcsbc_applyPendingPropertiesDictionaryApplier(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t v4 = a2;
  if (CFEqual(@"sbcsbc_ItWasNull", a2)) {
    uint64_t v4 = 0;
  }
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v9 = *(void *)(VTable + 8);
  uint64_t result = VTable + 8;
  uint64_t v8 = v9;
  if (v9) {
    uint64_t v10 = v8;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, const void *))(v10 + 56);
  if (v11)
  {
    return v11(a3, a1, v4);
  }
  return result;
}

uint64_t sbcsbc_applyPendingDeliveryArrayApplier(const __CFDictionary *a1, uint64_t a2)
{
  CFDictionaryGetValue(a1, @"type");
  if (FigCFEqual())
  {
    CFDictionaryRef Value = CFDictionaryGetValue(a1, @"buffer");
    uint64_t VTable = CMBaseObjectGetVTable();
    uint64_t v8 = *(void *)(VTable + 16);
    uint64_t result = VTable + 16;
    uint64_t v7 = v8;
    if (v8) {
      uint64_t v9 = v7;
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v16 = *(uint64_t (**)(uint64_t, const void *))(v9 + 8);
    if (v16)
    {
      return v16(a2, Value);
    }
  }
  else
  {
    uint64_t result = FigCFEqual();
    if (result)
    {
      FigCFDictionaryGetInt32IfPresent();
      uint64_t v10 = CFDictionaryGetValue(a1, @"notificationName");
      uint64_t v11 = CFDictionaryGetValue(a1, @"notificationPayload");
      uint64_t v12 = CMBaseObjectGetVTable();
      uint64_t v14 = *(void *)(v12 + 16);
      uint64_t result = v12 + 16;
      uint64_t v13 = v14;
      uint64_t v15 = v14 ? v13 : 0;
      uint64_t v17 = *(uint64_t (**)(uint64_t, const void *, const void *, void))(v15 + 64);
      if (v17) {
        return v17(a2, v10, v11, 0);
      }
    }
  }
  return result;
}

void sbcsbc_downstreamTriggerCallbackAsync(const void *a1)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*DerivedStorage);
  uint64_t v3 = (void (*)(void))DerivedStorage[15];
  if (v3) {
    v3(DerivedStorage[16]);
  }
  MEMORY[0x19970E2B0](*DerivedStorage);
  if (a1)
  {
    CFRelease(a1);
  }
}

uint64_t sbcsbc_SendSampleBuffer(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*DerivedStorage);
  FigEndpointStreamAudioEngineSbufTracerDebugPrint(a2);
  uint64_t v4 = DerivedStorage[5];
  if (v4)
  {
    uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v5) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = 0;
    }
    uint64_t v10 = *(uint64_t (**)(uint64_t, const void *))(v6 + 8);
    if (v10) {
      uint64_t v9 = v10(v4, a2);
    }
    else {
      uint64_t v9 = 4294954514;
    }
  }
  else
  {
    uint64_t v7 = CMBaseObjectGetDerivedStorage();
    CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFDictionarySetValue(Mutable, @"type", @"typeBuffer");
    CFDictionarySetValue(Mutable, @"buffer", a2);
    CFArrayAppendValue(*(CFMutableArrayRef *)(v7 + 8), Mutable);
    CMBufferQueueEnqueue(*(CMBufferQueueRef *)(v7 + 16), a2);
    if (Mutable) {
      CFRelease(Mutable);
    }
    uint64_t v9 = 0;
  }
  MEMORY[0x19970E2B0](*DerivedStorage);
  return v9;
}

uint64_t sbcsbc_IsQueueAtOrAboveHighWater()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*DerivedStorage);
  uint64_t v1 = DerivedStorage[5];
  if (v1)
  {
    uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v2) {
      uint64_t v3 = v2;
    }
    else {
      uint64_t v3 = 0;
    }
    uint64_t v5 = *(uint64_t (**)(uint64_t))(v3 + 16);
    if (v5) {
      uint64_t v4 = v5(v1);
    }
    else {
      uint64_t v4 = 0;
    }
  }
  else if (*((unsigned char *)DerivedStorage + 76))
  {
    CMBufferQueueGetDuration(&time1, (CMBufferQueueRef)DerivedStorage[2]);
    CMTime v7 = *(CMTime *)(DerivedStorage + 8);
    uint64_t v4 = CMTimeCompare(&time1, &v7) >= 0;
  }
  else
  {
    uint64_t v4 = 1;
  }
  MEMORY[0x19970E2B0](*DerivedStorage);
  return v4;
}

uint64_t sbcsbc_IsQueueBelowLowWater()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*DerivedStorage);
  uint64_t v1 = DerivedStorage[5];
  if (v1)
  {
    uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v2) {
      uint64_t v3 = v2;
    }
    else {
      uint64_t v3 = 0;
    }
    uint64_t v5 = *(uint64_t (**)(uint64_t))(v3 + 24);
    if (v5)
    {
      uint64_t v4 = v5(v1);
      goto LABEL_10;
    }
LABEL_9:
    uint64_t v4 = 0;
    goto LABEL_10;
  }
  if ((*((unsigned char *)DerivedStorage + 100) & 1) == 0) {
    goto LABEL_9;
  }
  CMBufferQueueGetDuration(&time1, (CMBufferQueueRef)DerivedStorage[2]);
  CMTime v7 = *(CMTime *)(DerivedStorage + 11);
  uint64_t v4 = CMTimeCompare(&time1, &v7) < 1;
LABEL_10:
  MEMORY[0x19970E2B0](*DerivedStorage);
  return v4;
}

uint64_t sbcsbc_InstallLowWaterTrigger(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*DerivedStorage);
  if (DerivedStorage[15] || !a2)
  {
    uint64_t v8 = FigSignalErrorAt();
  }
  else
  {
    DerivedStorage[15] = a2;
    DerivedStorage[16] = a3;
    *a4 = DerivedStorage + 15;
    uint64_t v8 = DerivedStorage[5];
    if (v8)
    {
      uint64_t v9 = DerivedStorage[6];
      uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v10) {
        uint64_t v11 = v10;
      }
      else {
        uint64_t v11 = 0;
      }
      uint64_t v12 = *(void (**)(uint64_t, void (*)(), uint64_t, void *))(v11 + 32);
      if (v12) {
        v12(v8, sbcsbc_downstreamTriggerCallback, v9, DerivedStorage + 7);
      }
      uint64_t v8 = 0;
    }
  }
  MEMORY[0x19970E2B0](*DerivedStorage);
  return v8;
}

uint64_t sbcsbc_RemoveLowWaterTrigger(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*DerivedStorage);
  if (DerivedStorage + 15 == a2)
  {
    *a2 = 0;
    DerivedStorage[16] = 0;
    uint64_t v4 = DerivedStorage[5];
    if (v4)
    {
      uint64_t v5 = DerivedStorage[7];
      if (v5)
      {
        uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v6) {
          uint64_t v7 = v6;
        }
        else {
          uint64_t v7 = 0;
        }
        uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 40);
        if (v8) {
          v8(v4, v5);
        }
        uint64_t v4 = 0;
        DerivedStorage[7] = 0;
      }
      else
      {
        uint64_t v4 = 0;
      }
    }
  }
  else
  {
    uint64_t v4 = FigSignalErrorAt();
  }
  MEMORY[0x19970E2B0](*DerivedStorage);
  return v4;
}

CMItemCount sbcsbc_GetPendingSampleBufferCount()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*DerivedStorage);
  uint64_t v1 = DerivedStorage[5];
  if (v1)
  {
    uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v2) {
      uint64_t v3 = v2;
    }
    else {
      uint64_t v3 = 0;
    }
    uint64_t v5 = *(uint64_t (**)(uint64_t))(v3 + 48);
    if (!v5)
    {
      CMItemCount v6 = 0;
      goto LABEL_10;
    }
    BufferCFArrayRef Count = v5(v1);
  }
  else
  {
    BufferCFArrayRef Count = CMBufferQueueGetBufferCount((CMBufferQueueRef)DerivedStorage[2]);
  }
  CMItemCount v6 = BufferCount;
LABEL_10:
  MEMORY[0x19970E2B0](*DerivedStorage);
  return v6;
}

uint64_t sbcsbc_PostNotification(uint64_t a1, const void *a2, const void *a3, uint64_t a4)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*DerivedStorage);
  if (DerivedStorage[5])
  {
    uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v9) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v14 = *(uint64_t (**)(uint64_t, const void *, const void *, uint64_t))(v10 + 64);
    if (v14) {
      uint64_t v13 = v14(a1, a2, a3, a4);
    }
    else {
      uint64_t v13 = 4294954514;
    }
  }
  else
  {
    uint64_t v11 = CMBaseObjectGetDerivedStorage();
    CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFDictionarySetValue(Mutable, @"type", @"typeNotification");
    CFDictionarySetValue(Mutable, @"notificationName", a2);
    if (a3) {
      CFDictionarySetValue(Mutable, @"notificationPayload", a3);
    }
    FigCFDictionarySetInt32();
    CFArrayAppendValue(*(CFMutableArrayRef *)(v11 + 8), Mutable);
    if (Mutable) {
      CFRelease(Mutable);
    }
    uint64_t v13 = 0;
  }
  MEMORY[0x19970E2B0](*DerivedStorage);
  return v13;
}

uint64_t sbcsbc_Flush()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*DerivedStorage);
  uint64_t v1 = DerivedStorage[5];
  if (v1)
  {
    uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v2) {
      uint64_t v3 = v2;
    }
    else {
      uint64_t v3 = 0;
    }
    uint64_t v4 = *(void (**)(uint64_t))(v3 + 72);
    if (v4) {
      v4(v1);
    }
  }
  else
  {
    CFArrayRemoveAllValues((CFMutableArrayRef)DerivedStorage[1]);
    CMBufferQueueReset((CMBufferQueueRef)DerivedStorage[2]);
  }
  MEMORY[0x19970E2B0](*DerivedStorage);
  return 0;
}

uint64_t FigStreamingAssetProgressMarkDownloadComplete(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 111)
    || (uint64_t v3 = (dispatch_queue_t *)DerivedStorage, (v4 = malloc_type_calloc(1uLL, 0x88uLL, 0x10E00407336ED58uLL)) == 0))
  {
    FigSignalErrorAt();
  }
  else
  {
    uint64_t v5 = v4;
    if (a1) {
      CFTypeRef v6 = CFRetain(a1);
    }
    else {
      CFTypeRef v6 = 0;
    }
    *uint64_t v5 = v6;
    dispatch_async_f(*v3, v5, (dispatch_function_t)dwpm_markDownloadCompleteDispatch);
  }
  return 0;
}

void dwpm_markDownloadCompleteDispatch(const void **a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(unsigned char *)(DerivedStorage + 108) = 1;
  *(void *)(DerivedStorage + 56) = *(void *)(DerivedStorage + 64);
  dwpm_sendProgressNotification(*a1);
  if (*a1) {
    CFRelease(*a1);
  }

  free(a1);
}

uint64_t FigStreamingAssetProgressMarkAlternateAndMediaSelectionComplete(const void *a1, const void *a2, const void *a3, uint64_t a4, long long *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 111)
    || (v11 = (dispatch_queue_t *)DerivedStorage, (uint64_t v12 = malloc_type_calloc(1uLL, 0x88uLL, 0x10E00407336ED58uLL)) == 0))
  {
    FigSignalErrorAt();
  }
  else
  {
    uint64_t v13 = v12;
    if (a1) {
      CFTypeRef v14 = CFRetain(a1);
    }
    else {
      CFTypeRef v14 = 0;
    }
    *uint64_t v13 = v14;
    if (a2) {
      CFTypeRef v15 = CFRetain(a2);
    }
    else {
      CFTypeRef v15 = 0;
    }
    v13[2] = v15;
    if (a3) {
      CFTypeRef v16 = CFRetain(a3);
    }
    else {
      CFTypeRef v16 = 0;
    }
    v13[3] = v16;
    v13[7] = a4;
    long long v17 = *a5;
    v13[10] = *((void *)a5 + 2);
    *((_OWORD *)v13 + 4) = v17;
    dispatch_async_f(*v11, v13, (dispatch_function_t)dwpm_markAlternateAndMediaSelectionCompleteDispatch);
  }
  return 0;
}

void dwpm_markAlternateAndMediaSelectionCompleteDispatch(uint64_t a1)
{
  CFTypeRef v2 = *(CFTypeRef *)a1;
  CFArrayRef v3 = *(const __CFArray **)(a1 + 24);
  int64_t v4 = *(void *)(a1 + 56);
  CMTime v13 = *(CMTime *)(a1 + 64);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  double Seconds = CMTimeGetSeconds(&v13);
  if (*(unsigned char *)(DerivedStorage + 111)) {
    goto LABEL_14;
  }
  if (v4 < 1 || *(unsigned char *)(DerivedStorage + 108)) {
    goto LABEL_7;
  }
  double v7 = Seconds;
  DownloadProgressItemForAlternateAndSelectedMediaArray = (int64x2_t *)dwpm_findDownloadProgressItemForAlternateAndSelectedMediaArray();
  if (!DownloadProgressItemForAlternateAndSelectedMediaArray)
  {
LABEL_14:
    FigSignalErrorAt();
    goto LABEL_7;
  }
  int64x2_t v9 = DownloadProgressItemForAlternateAndSelectedMediaArray[4];
  DownloadProgressItemForAlternateAndSelectedMediaArray[4].i64[1] = v4;
  DownloadProgressItemForAlternateAndSelectedMediaArray[5].i64[0] = (uint64_t)v7;
  *(int64x2_t *)(DerivedStorage + 56) = vaddq_s64(vsubq_s64(vdupq_n_s64(v4), v9), *(int64x2_t *)(DerivedStorage + 56));
  DownloadProgressItemForAlternateAndSelectedMediaArray[5].i8[8] = 1;
  uint64_t v10 = FigMediaSelectionArrayCopyDescription(*(const __CFAllocator **)(DerivedStorage + 8), v3);
  dwpm_sendProgressNotification(v2);
  if (v10) {
    CFRelease(v10);
  }
LABEL_7:
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
  uint64_t v11 = *(const void **)(a1 + 16);
  if (v11) {
    CFRelease(v11);
  }
  uint64_t v12 = *(const void **)(a1 + 24);
  if (v12) {
    CFRelease(v12);
  }
  free((void *)a1);
}

uint64_t FigStreamingAssetProgressMonitorUpdateMediaDownloadedTimeAndBytes(const void *a1, const void *a2, const void *a3, uint64_t a4, long long *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 111)
    || (v11 = (dispatch_queue_t *)DerivedStorage, (uint64_t v12 = malloc_type_calloc(1uLL, 0x88uLL, 0x10E00407336ED58uLL)) == 0))
  {
    FigSignalErrorAt();
  }
  else
  {
    CMTime v13 = v12;
    if (a1) {
      CFTypeRef v14 = CFRetain(a1);
    }
    else {
      CFTypeRef v14 = 0;
    }
    *CMTime v13 = v14;
    if (a2) {
      CFTypeRef v15 = CFRetain(a2);
    }
    else {
      CFTypeRef v15 = 0;
    }
    v13[2] = v15;
    if (a3) {
      CFTypeRef v16 = CFRetain(a3);
    }
    else {
      CFTypeRef v16 = 0;
    }
    v13[3] = v16;
    v13[7] = a4;
    long long v17 = *a5;
    v13[10] = *((void *)a5 + 2);
    *((_OWORD *)v13 + 4) = v17;
    dispatch_async_f(*v11, v13, (dispatch_function_t)dwpm_upadateMediaDownloadedTimeAndBytesDispatch);
  }
  return 0;
}

void dwpm_upadateMediaDownloadedTimeAndBytesDispatch(uint64_t a1)
{
  CFTypeRef v2 = *(CFTypeRef *)a1;
  CFArrayRef v3 = *(const __CFArray **)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 56);
  CMTime v21 = *(CMTime *)(a1 + 64);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  double Seconds = CMTimeGetSeconds(&v21);
  if (!*(unsigned char *)(DerivedStorage + 108))
  {
    if (*(unsigned char *)(DerivedStorage + 111)) {
      goto LABEL_23;
    }
    if (v4 < 1) {
      goto LABEL_16;
    }
    uint64_t v7 = (uint64_t)Seconds;
    if ((uint64_t)Seconds < 1) {
      goto LABEL_16;
    }
    DownloadProgressItemForAlternateAndSelectedMediaArray = dwpm_findDownloadProgressItemForAlternateAndSelectedMediaArray();
    if (!DownloadProgressItemForAlternateAndSelectedMediaArray)
    {
LABEL_23:
      FigSignalErrorAt();
      goto LABEL_16;
    }
    DownloadProgressItemForAlternateAndSelectedMediaArray[10] = v7;
    *(void *)(DerivedStorage + 64) += v4 - DownloadProgressItemForAlternateAndSelectedMediaArray[9];
    DownloadProgressItemForAlternateAndSelectedMediaArray[9] = v4;
    int64x2_t v9 = FigMediaSelectionArrayCopyDescription(*(const __CFAllocator **)(DerivedStorage + 8), v3);
    uint64_t v10 = CMBaseObjectGetDerivedStorage();
    if (FigGetUpTimeNanoseconds() - *(void *)(v10 + 88) >= 5000000000)
    {
      *(void *)(v10 + 88) = FigGetUpTimeNanoseconds();
      for (unint64_t i = *(uint64_t **)(v10 + 72); i; unint64_t i = (uint64_t *)*i)
      {
        uint64_t v12 = CMBaseObjectGetDerivedStorage();
        if (!*((unsigned char *)i + 88))
        {
          uint64_t v13 = i[10];
          if (v13 >= 300 && !*((unsigned char *)i + 56))
          {
            uint64_t v14 = v12;
            uint64_t v15 = i[8];
            double v16 = (float)((float)i[9] / (float)v13);
            CMTime v21 = *(CMTime *)(i + 4);
            Float64 v17 = CMTimeGetSeconds(&v21) * v16;
            i[8] = (uint64_t)v17;
            *(void *)(v14 + 56) += (uint64_t)v17 - v15;
            uint64_t v18 = FigMediaSelectionArrayCopyDescription(*(const __CFAllocator **)(v14 + 8), (const __CFArray *)i[3]);
            if (v18) {
              CFRelease(v18);
            }
          }
        }
      }
    }
    dwpm_sendProgressNotification(v2);
    if (v9) {
      CFRelease(v9);
    }
  }
LABEL_16:
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
  uint64_t v19 = *(const void **)(a1 + 16);
  if (v19) {
    CFRelease(v19);
  }
  uint64_t v20 = *(const void **)(a1 + 24);
  if (v20) {
    CFRelease(v20);
  }
  free((void *)a1);
}

uint64_t FigStreamingAssetProgressMonitorMarkInitialEstimationOfExpectedBytesAsComplete(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 111)
    || (CFArrayRef v3 = (dispatch_queue_t *)DerivedStorage, (v4 = malloc_type_calloc(1uLL, 0x88uLL, 0x10E00407336ED58uLL)) == 0))
  {
    FigSignalErrorAt();
  }
  else
  {
    uint64_t v5 = v4;
    if (a1) {
      CFTypeRef v6 = CFRetain(a1);
    }
    else {
      CFTypeRef v6 = 0;
    }
    *uint64_t v5 = v6;
    dispatch_async_f(*v3, v5, (dispatch_function_t)dwpm_markInitialEstimationOfExpectedBytesAsCompleteDispatch);
  }
  return 0;
}

void dwpm_markInitialEstimationOfExpectedBytesAsCompleteDispatch(const void **a1)
{
  dwpm_sendProgressNotification(*a1);
  if (*a1) {
    CFRelease(*a1);
  }

  free(a1);
}

uint64_t FigStreamingAssetProgressMonitorUpdateExpectedMediaBytesToDownload(const void *a1, const void *a2, const void *a3, long long *a4, uint64_t a5, char a6)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 111)
    || (uint64_t v13 = (dispatch_queue_t *)DerivedStorage,
        (uint64_t v14 = (char *)malloc_type_calloc(1uLL, 0x88uLL, 0x10E00407336ED58uLL)) == 0))
  {
    FigSignalErrorAt();
  }
  else
  {
    uint64_t v15 = v14;
    if (a1) {
      CFTypeRef v16 = CFRetain(a1);
    }
    else {
      CFTypeRef v16 = 0;
    }
    *(void *)uint64_t v15 = v16;
    if (a2) {
      CFTypeRef v17 = CFRetain(a2);
    }
    else {
      CFTypeRef v17 = 0;
    }
    *((void *)v15 + 2) = v17;
    if (a3) {
      CFTypeRef v18 = CFRetain(a3);
    }
    else {
      CFTypeRef v18 = 0;
    }
    *((void *)v15 + 3) = v18;
    *((void *)v15 + 12) = a5;
    long long v19 = *a4;
    *((void *)v15 + 15) = *((void *)a4 + 2);
    *(_OWORD *)(v15 + 104) = v19;
    v15[128] = a6;
    dispatch_async_f(*v13, v15, (dispatch_function_t)dwpm_updateExpectedMediaBytesToDownloadDispatch);
  }
  return 0;
}

void dwpm_updateExpectedMediaBytesToDownloadDispatch(uint64_t a1)
{
  CFArrayRef v2 = *(const __CFArray **)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 96);
  char v4 = *(unsigned char *)(a1 + 128);
  long long v11 = *(_OWORD *)(a1 + 104);
  uint64_t v12 = *(void *)(a1 + 120);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 111)) {
    goto LABEL_17;
  }
  if (v3 < 1) {
    goto LABEL_8;
  }
  uint64_t v6 = DerivedStorage;
  DownloadProgressItemForAlternateAndSelectedMediaArray = dwpm_findDownloadProgressItemForAlternateAndSelectedMediaArray();
  if (!DownloadProgressItemForAlternateAndSelectedMediaArray)
  {
LABEL_17:
    FigSignalErrorAt();
  }
  else
  {
    *(void *)(v6 + 56) += v3;
    DownloadProgressItemForAlternateAndSelectedMediaArray[8] += v3;
    *((_OWORD *)DownloadProgressItemForAlternateAndSelectedMediaArray + 2) = v11;
    DownloadProgressItemForAlternateAndSelectedMediaArray[6] = v12;
    if (*((unsigned char *)DownloadProgressItemForAlternateAndSelectedMediaArray + 56)) {
      *((unsigned char *)DownloadProgressItemForAlternateAndSelectedMediaArray + 56) = v4;
    }
    uint64_t v8 = FigMediaSelectionArrayCopyDescription(*(const __CFAllocator **)(v6 + 8), v2);
    if (v8) {
      CFRelease(v8);
    }
  }
LABEL_8:
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
  int64x2_t v9 = *(const void **)(a1 + 16);
  if (v9) {
    CFRelease(v9);
  }
  uint64_t v10 = *(const void **)(a1 + 24);
  if (v10) {
    CFRelease(v10);
  }

  free((void *)a1);
}

uint64_t FigStreamingAssetProgressMonitorRegisterAlternateAndMediaSelections(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  if (*(unsigned char *)(DerivedStorage + 111))
  {
    FigSignalErrorAt();
    return 0;
  }
  else
  {
    uint64_t context = a1;
    *((void *)&v9 + 1) = a2;
    *(void *)&long long v10 = a3;
    dispatch_sync_f(*(dispatch_queue_t *)DerivedStorage, &context, (dispatch_function_t)dwpm_registerAlternateAndMediaSelectionsDispatch);
    return v9;
  }
}

const void *dwpm_registerAlternateAndMediaSelectionsDispatch(uint64_t a1)
{
  uint64_t v3 = *(const void **)(a1 + 16);
  CFArrayRef v2 = *(const void **)(a1 + 24);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 111) || (v3 ? (BOOL v5 = v2 == 0) : (BOOL v5 = 1), v5))
  {
    uint64_t result = (const void *)FigSignalErrorAt();
  }
  else
  {
    uint64_t v6 = DerivedStorage;
    uint64_t v7 = malloc_type_calloc(1uLL, 0x60uLL, 0x10E0040A2CCCE02uLL);
    if (v7)
    {
      uint64_t v7[2] = CFRetain(v3);
      v7[3] = CFRetain(v2);
      *((unsigned char *)v7 + 56) = 1;
    }
    else
    {
      uint64_t result = (const void *)FigSignalErrorAt();
      if (result) {
        goto LABEL_10;
      }
    }
    uint64_t result = FigMediaSelectionArrayCopyDescription(*(const __CFAllocator **)(v6 + 8), (const __CFArray *)v2);
    long long v9 = *(void **)(v6 + 80);
    *uint64_t v7 = 0;
    v7[1] = v9;
    *long long v9 = v7;
    *(void *)(v6 + 80) = v7;
    if (result)
    {
      CFRelease(result);
      uint64_t result = 0;
    }
  }
LABEL_10:
  *(_DWORD *)(a1 + 8) = result;
  return result;
}

uint64_t FigStreamingAssetDownloadProgressMonitorGetTypeID()
{
  MEMORY[0x19970EE10](&FigStreamingAssetDownloadProgressMonitorGetClassID_sRegisterFigStreamingAssetProgressMonitorBaseTypeOnce, RegisterFigStreamingAssetProgressMonitorBaseType);

  return CMBaseClassGetCFTypeID();
}

uint64_t FigStreamingAssetDownloadProgressMonitorCreate(const void *a1, const void *a2, const __CFDictionary *a3, uint64_t a4, NSObject *a5, void *a6, void *a7)
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a2) {
    return FigSignalErrorAt();
  }
  CFTypeID v12 = CFGetTypeID(a2);
  if (v12 != FigAssetGetTypeID() || !a7) {
    return FigSignalErrorAt();
  }
  MEMORY[0x19970EE10](&FigStreamingAssetDownloadProgressMonitorGetClassID_sRegisterFigStreamingAssetProgressMonitorBaseTypeOnce, RegisterFigStreamingAssetProgressMonitorBaseType);
  uint64_t v13 = CMDerivedObjectCreate();
  if (v13) {
    return v13;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v15 = a1 ? CFRetain(a1) : 0;
  *(void *)(DerivedStorage + 8) = v15;
  *(void *)(DerivedStorage + 16) = CFRetain(a2);
  BOOL v16 = FigIsItOKToLogURLs() && FPSupport_GetAssetDoNotLogURLs((uint64_t)a2) == 0;
  *(unsigned char *)(DerivedStorage + 110) = v16;
  if (a4)
  {
    if (a5)
    {
      if (a6)
      {
        dispatch_retain(a5);
        *(void *)(DerivedStorage + 48) = a5;
        *(void *)(DerivedStorage + 40) = *a6;
        uint64_t v17 = FigCFWeakReferenceHolderCreateWithReferencedObject();
        *(void *)(DerivedStorage + 32) = v17;
        if (!v17) {
          return FigSignalErrorAt();
        }
      }
    }
  }
  if (a3)
  {
    CFDictionaryRef Value = CFDictionaryGetValue(a3, @"AssetDownloaderCreateOption_DebugIdentifier");
    if (Value) {
      CFDictionaryRef Value = CFRetain(Value);
    }
    *(void *)(DerivedStorage + 24) = Value;
  }
  *(void *)(DerivedStorage + 72) = 0;
  *(void *)(DerivedStorage + 80) = DerivedStorage + 72;
  dispatch_queue_t v19 = dispatch_queue_create("com.apple.coremedia.figstreamingassetdownloadprogressmonitor.state", 0);
  *(void *)uint64_t DerivedStorage = v19;
  if (!v19) {
    return FigSignalErrorAt();
  }
  if (dword_1E9351068)
  {
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v13 = 0;
  *a7 = 0;
  return v13;
}

void dwpm_sendProgressNotification(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  UpTimeNanoCMTime seconds = FigGetUpTimeNanoseconds();
  if (*(unsigned char *)(DerivedStorage + 108) && !*(unsigned char *)(DerivedStorage + 109)
    || UpTimeNanoseconds - *(void *)(DerivedStorage + 96) >= 1000000000)
  {
    *(void *)(DerivedStorage + 96) = FigGetUpTimeNanoseconds();
    if (!*(unsigned char *)(DerivedStorage + 109))
    {
      float v4 = (float)((float)*(uint64_t *)(DerivedStorage + 64) / (float)*(uint64_t *)(DerivedStorage + 56)) * 100.0;
      if (v4 > *(float *)(DerivedStorage + 104))
      {
        *(float *)(DerivedStorage + 104) = v4;
        if (v4 <= 95.0 || *(unsigned char *)(DerivedStorage + 108) != 0)
        {
          uint64_t v6 = FigCFWeakReferenceHolderCopyReferencedObject();
          if (v6)
          {
            uint64_t v7 = (const void *)v6;
            uint64_t v8 = malloc_type_calloc(1uLL, 0x88uLL, 0x10E00407336ED58uLL);
            if (v8)
            {
              long long v9 = v8;
              if (a1) {
                CFTypeRef v10 = CFRetain(a1);
              }
              else {
                CFTypeRef v10 = 0;
              }
              *long long v9 = v10;
              uint64_t v11 = *(void *)(DerivedStorage + 56);
              uint64_t v12 = *(void *)(DerivedStorage + 64);
              v9[11] = v7;
              v9[12] = v11;
              v9[7] = v12;
              if (*(unsigned char *)(DerivedStorage + 108)) {
                *(unsigned char *)(DerivedStorage + 109) = 1;
              }
              uint64_t v13 = *(NSObject **)(DerivedStorage + 48);
              dispatch_async_f(v13, v9, (dispatch_function_t)dworch_sendProgressNotificationOnCallbackQueue);
            }
            else if (FigSignalErrorAt())
            {
              CFRelease(v7);
            }
          }
        }
      }
    }
  }
}

void dworch_sendProgressNotificationOnCallbackQueue(void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 111))
  {
    FigSignalErrorAt();
  }
  else
  {
    uint64_t v3 = *(void (**)(void, void, void, void))(DerivedStorage + 40);
    if (v3) {
      v3(a1[11], *a1, a1[12], a1[7]);
    }
  }
  if (*a1) {
    CFRelease((CFTypeRef)*a1);
  }
  float v4 = (const void *)a1[11];
  if (v4) {
    CFRelease(v4);
  }

  free(a1);
}

void *dwpm_findDownloadProgressItemForAlternateAndSelectedMediaArray()
{
  for (unint64_t i = *(void **)(CMBaseObjectGetDerivedStorage() + 72); i; unint64_t i = (void *)*i)
  {
    if (FigCFEqual() && FigCFEqual()) {
      break;
    }
  }
  return i;
}

uint64_t RegisterFigStreamingAssetProgressMonitorBaseType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

CFStringRef FigStreamingAssetProgressMonitorCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigStreamingAssetDownloadProgressMonitor %p]", a1);
}

uint64_t dwpm_invalidate(uint64_t a1)
{
  uint64_t DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v5 = 0u;
  long long v6 = 0u;
  uint64_t context = a1;
  dispatch_sync_f(*DerivedStorage, &context, (dispatch_function_t)dwpm_invalidateDispatch);
  return v5;
}

void dwpm_finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  dwpm_invalidateGutsOnQueue();
  uint64_t v1 = *(const void **)(DerivedStorage + 24);
  if (v1)
  {
    CFRelease(v1);
    *(void *)(DerivedStorage + 24) = 0;
  }
  if (*(void *)DerivedStorage)
  {
    dispatch_release(*(dispatch_object_t *)DerivedStorage);
    *(void *)uint64_t DerivedStorage = 0;
  }
}

CFStringRef dwpm_copyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  return CFStringCreateWithFormat(*(CFAllocatorRef *)(DerivedStorage + 8), 0, @"[FigStreamingAssetDownloadProgressMonitor %p debugIdentifier:%@ asset %p asset %@ %0.2fMB / %0.2fMB]", a1, *(void *)(DerivedStorage + 24), *(void *)(DerivedStorage + 16), *(void *)(DerivedStorage + 16), (float)((float)*(uint64_t *)(DerivedStorage + 64) * 0.00000095367), (float)((float)*(uint64_t *)(DerivedStorage + 56) * 0.00000095367));
}

uint64_t dwpm_copyProperty(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  context[0] = a1;
  context[1] = a2;
  uint64_t v13 = a3;
  dispatch_sync_f(*DerivedStorage, context, (dispatch_function_t)dwpm_copyPropertyDispatch);
  uint64_t result = v12;
  if (!v12) {
    *a4 = v11;
  }
  return result;
}

void dwpm_invalidateDispatch(uint64_t a1)
{
  *(_DWORD *)(a1 + 8) = 0;
}

void dwpm_invalidateGutsOnQueue()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)(DerivedStorage + 111))
  {
    uint64_t v1 = (void *)DerivedStorage;
    *(unsigned char *)(DerivedStorage + 111) = 1;
    if (dword_1E9351068)
    {
      os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v3 = (const void *)v1[1];
    if (v3)
    {
      CFRelease(v3);
      v1[1] = 0;
    }
    float v4 = (const void *)v1[2];
    if (v4)
    {
      CFRelease(v4);
      v1[2] = 0;
    }
    long long v5 = (const void *)v1[4];
    if (v5)
    {
      CFRelease(v5);
      v1[4] = 0;
    }
    long long v6 = v1[6];
    if (v6)
    {
      dispatch_release(v6);
      v1[6] = 0;
    }
    long long v7 = (void *)v1[9];
    if (v7)
    {
      do
      {
        long long v9 = (void *)*v7;
        long long v8 = (void *)v7[1];
        if (*v7)
        {
          v9[1] = v8;
          long long v8 = (void *)v7[1];
        }
        else
        {
          v1[10] = v8;
        }
        *long long v8 = v9;
        long long v10 = (const void *)v7[2];
        if (v10) {
          CFRelease(v10);
        }
        uint64_t v11 = (const void *)v7[3];
        if (v11) {
          CFRelease(v11);
        }
        free(v7);
        long long v7 = v9;
      }
      while (v9);
    }
  }
}

CFNumberRef dwpm_copyPropertyDispatch(uint64_t a1)
{
  CFArrayRef v2 = *(const void **)(a1 + 8);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 111)) {
    goto LABEL_7;
  }
  uint64_t v4 = DerivedStorage;
  if (!CFEqual(@"AssetDownloaderProperty_DownloadedBytes", v2))
  {
    CFNumberRef result = 0;
    int v6 = -12784;
    goto LABEL_6;
  }
  CFNumberRef result = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt64Type, (const void *)(v4 + 64));
  if (!result)
  {
LABEL_7:
    int v6 = FigSignalErrorAt();
    CFNumberRef result = 0;
    goto LABEL_6;
  }
  int v6 = 0;
LABEL_6:
  *(_DWORD *)(a1 + 24) = v6;
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t FigVTTSpanCreate(uint64_t a1, void *a2)
{
  if (a2)
  {
    FigVTTNodeGetClassID();
    uint64_t v3 = CMDerivedObjectCreate();
    if (!v3)
    {
      uint64_t DerivedStorage = (CFMutableDictionaryRef *)CMBaseObjectGetDerivedStorage();
      uint64_t v3 = FigVTTInitializeNodeBaseStorage(DerivedStorage);
      if (!v3) {
        *a2 = 0;
      }
    }
    return v3;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigVTTSpanCreateCopyWithValueRange(const void *a1, CFIndex a2, CFIndex a3, CFTypeRef *a4)
{
  CFDictionaryRef v25 = 0;
  CFTypeRef v26 = 0;
  CFStringRef theString = 0;
  CFTypeRef cf = 0;
  int v22 = 0;
  if (!a1) {
    goto LABEL_26;
  }
  CFTypeID v8 = CFGetTypeID(a1);
  if (v8 != FigVTTNodeGetTypeID()) {
    goto LABEL_26;
  }
  uint64_t NodeType = FigVTTNodeGetNodeType((uint64_t)a1, (uint64_t)&v22);
  if (NodeType)
  {
LABEL_27:
    uint64_t v14 = NodeType;
    goto LABEL_28;
  }
  if (v22 != 5 || !a4)
  {
LABEL_26:
    uint64_t NodeType = FigSignalErrorAt();
    goto LABEL_27;
  }
  CFAllocatorRef v10 = CFGetAllocator(a1);
  uint64_t NodeType = FigVTTSpanCreate((uint64_t)v10, &v26);
  if (NodeType) {
    goto LABEL_27;
  }
  uint64_t NodeType = FigVTTNodeCopyValue((uint64_t)a1, &theString);
  if (NodeType) {
    goto LABEL_27;
  }
  if (theString)
  {
    CFIndex Length = CFStringGetLength(theString);
    if ((a2 & 0x8000000000000000) == 0 && a2 + a3 <= Length)
    {
      v27.location = a2;
      v27.size_t length = a3;
      CFStringRef v12 = CFStringCreateWithSubstring(v10, theString, v27);
      uint64_t v13 = FigVTTNodeSetValue((uint64_t)v26, v12);
      if (v13) {
        goto LABEL_35;
      }
      goto LABEL_14;
    }
    goto LABEL_26;
  }
  CFStringRef v12 = 0;
LABEL_14:
  uint64_t v13 = FigVTTNodeCopyAttributes((uint64_t)a1, &v25);
  if (!v13)
  {
    CFTypeRef context = v26;
    uint64_t v21 = 0;
    CFDictionaryApplyFunction(v25, (CFDictionaryApplierFunction)figSpan_copyOneAttributeToNode, &context);
    uint64_t v14 = v21;
    if (v21)
    {
LABEL_24:
      if (!v12) {
        goto LABEL_28;
      }
      goto LABEL_25;
    }
    uint64_t v15 = 0;
    char v16 = 1;
    while (1)
    {
      char v17 = v16;
      if (cf)
      {
        CFRelease(cf);
        CFTypeRef cf = 0;
      }
      CFTypeRef v18 = off_1E579C790[v15];
      uint64_t v13 = FigVTTNodeCopyProperty((uint64_t)a1, (uint64_t)v18, (uint64_t)v10, (uint64_t)&cf);
      if (v13) {
        break;
      }
      if (cf)
      {
        uint64_t v13 = FigVTTNodeSetProperty((uint64_t)v26, (uint64_t)v18, (uint64_t)cf);
        if (v13) {
          break;
        }
      }
      char v16 = 0;
      uint64_t v15 = 1;
      if ((v17 & 1) == 0)
      {
        uint64_t v14 = 0;
        *a4 = v26;
        CFTypeRef v26 = 0;
        goto LABEL_24;
      }
    }
  }
LABEL_35:
  uint64_t v14 = v13;
  if (v12) {
LABEL_25:
  }
    CFRelease(v12);
LABEL_28:
  if (theString) {
    CFRelease(theString);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v26) {
    CFRelease(v26);
  }
  return v14;
}

uint64_t figSpan_copyOneAttributeToNode(uint64_t cf, const void *a2, uint64_t a3)
{
  if (!*(_DWORD *)(a3 + 8))
  {
    uint64_t v4 = (const void *)cf;
    if (cf && (CFTypeID v6 = CFGetTypeID((CFTypeRef)cf), v6 == CFStringGetTypeID()))
    {
      CFTypeRef cf = FigVTTNodeSetAttribute(*(void *)a3, v4, a2);
      if (!cf) {
        return cf;
      }
    }
    else
    {
      CFTypeRef cf = 4294949406;
    }
    *(_DWORD *)(a3 + 8) = cf;
  }
  return cf;
}

void figVTTSpan_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = *(const void **)(DerivedStorage + 16);
  if (v1) {
    CFRelease(v1);
  }
  CFArrayRef v2 = *(const void **)(DerivedStorage + 24);
  if (v2) {
    CFRelease(v2);
  }

  FigVTTReleaseNodeBaseStorage(DerivedStorage);
}

CFStringRef figVTTSpan_CopyDebugDesc(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = (const void *)FigCFCopyCompactDescription();
  CFTypeRef cf = 0;
  FigVTTNodeCopyValue(a1, &cf);
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  long long v5 = *(__CFString **)(DerivedStorage + 24);
  if (!v5) {
    long long v5 = &stru_1EE53F4B8;
  }
  if (cf) {
    CFStringRef v6 = CFStringCreateWithFormat(v4, 0, @"span: %@ %@ text=%@", v5, v3, cf);
  }
  else {
    CFStringRef v6 = CFStringCreateWithFormat(v4, 0, @"span: %@ %@", v5, v3);
  }
  CFStringRef v7 = v6;
  if (cf) {
    CFRelease(cf);
  }
  if (v3) {
    CFRelease(v3);
  }
  return v7;
}

uint64_t figVTTSpan_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2 && a4)
  {
    uint64_t v7 = DerivedStorage;
    if (CFEqual(@"WebVTTSpanNode_StyleReferences", a2))
    {
      CFTypeID v8 = *(const void **)(v7 + 16);
      if (v8)
      {
LABEL_5:
        CFTypeRef v9 = CFRetain(v8);
LABEL_9:
        uint64_t result = 0;
        *a4 = v9;
        return result;
      }
LABEL_8:
      CFTypeRef v9 = 0;
      goto LABEL_9;
    }
    if (CFEqual(@"WebVTTSpanNode_MarkupElement", a2))
    {
      CFTypeID v8 = *(const void **)(v7 + 24);
      if (v8) {
        goto LABEL_5;
      }
      goto LABEL_8;
    }
    return 4294954512;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t figVTTSpan_SetProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage && a2)
  {
    uint64_t v6 = DerivedStorage;
    if (CFEqual(@"WebVTTSpanNode_StyleReferences", a2))
    {
      if (a3)
      {
        CFTypeID v7 = CFGetTypeID(a3);
        if (v7 == CFArrayGetTypeID())
        {
          CFTypeID v8 = *(const void **)(v6 + 16);
          *(void *)(v6 + 16) = a3;
          goto LABEL_7;
        }
      }
    }
    else if (CFEqual(@"WebVTTSpanNode_MarkupElement", a2))
    {
      if (!a3)
      {
        CFTypeID v8 = *(const void **)(v6 + 24);
        *(void *)(v6 + 24) = 0;
        if (!v8) {
          return 0;
        }
        goto LABEL_8;
      }
      CFTypeID v10 = CFGetTypeID(a3);
      if (v10 == CFStringGetTypeID())
      {
        CFTypeID v8 = *(const void **)(v6 + 24);
        *(void *)(v6 + 24) = a3;
LABEL_7:
        CFRetain(a3);
        if (!v8) {
          return 0;
        }
LABEL_8:
        CFRelease(v8);
        return 0;
      }
    }
  }

  return FigSignalErrorAt();
}

uint64_t figVTTSpan_GetNodeType(uint64_t a1, _DWORD *a2)
{
  if (!a2) {
    return FigSignalErrorAt();
  }
  *a2 = 5;
  return 0;
}

uint64_t figVTTSpan_copyNodeDocumentSerialization(uint64_t a1, CFStringRef *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2 && (*a2 = 0, (v4 = *(const void **)(DerivedStorage + 8)) != 0) && (CFTypeRef v5 = CFRetain(v4)) != 0)
  {
    uint64_t v6 = v5;
    *a2 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%@\n", v5);
    CFRelease(v6);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigCDSOutputGetClassID()
{
  return sFigCDSOutputClassID;
}

uint64_t RegisterFigCDSOutputType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

CFStringRef FigCDSOutputCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigCDSOutput %p]", a1);
}

uint64_t FigAggregateVideoDestinationGetClassID()
{
  return sFigAggregateVideoDestinationClassID;
}

uint64_t RegisterFigAggregateVideoDestinationType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t FigAggregateVideoDestinationCreate(const __CFAllocator *a1, const __CFArray *a2, const void *a3, CMFormatDescriptionRef desc, uint64_t a5, void *a6)
{
  if (a6)
  {
    if (!a3 || !desc || CMFormatDescriptionGetMediaType(desc) != 1986618469) {
      return FigSignalErrorAt();
    }
    FigNote_AllowInternalDefaultLogs();
    fig_note_initialize_category_with_default_work_cf();
    fig_note_initialize_category_with_default_work_cf();
    MEMORY[0x19970EE10](&FigAggregateVideoDestinationGetClassID_sRegisterFigAggregateVideoDestinationTypeOnce, RegisterFigAggregateVideoDestinationType);
    uint64_t updated = CMDerivedObjectCreate();
    if (!updated)
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      *(void *)uint64_t DerivedStorage = FigSimpleMutexCreate();
      *(void *)(DerivedStorage + 48) = CFRetain(a3);
      *(_DWORD *)(DerivedStorage + 20) = 1;
      *(void *)(DerivedStorage + 24) = FigFormatDescriptionRetain();
      if (VTIsStereoMVHEVCDecodeSupported()) {
        CMVideoFormatDescriptionCopyTagCollectionArray(desc, (CFArrayRef *)(DerivedStorage + 32));
      }
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      *(void *)(DerivedStorage + 40) = Mutable;
      if (!Mutable) {
        return 4294948255;
      }
      if (!a2
        || !CFArrayGetCount(a2)
        || (uint64_t updated = favd_UpdateImageQueuesToMatchOutputsArray(0, a5, a2), !updated))
      {
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterAddWeakListener();
        if (dword_1E93510A8)
        {
          os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        uint64_t v15 = 0;
        *a6 = 0;
        return v15;
      }
    }
    return updated;
  }

  return FigSignalErrorAt();
}

uint64_t favd_UpdateImageQueuesToMatchOutputsArray(uint64_t a1, uint64_t a2, const __CFArray *a3)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (dword_1E93510A8)
  {
    LODWORD(theArray) = 0;
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x19970E910](*DerivedStorage);
  CMBaseObjectGetDerivedStorage();
  CMBaseObjectGetDerivedStorage();
  CFArrayRef v47 = a3;
  if (a2 && a3 && CFArrayGetCount(a3))
  {
    CFArrayRef v8 = (const __CFArray *)FigCFDictionaryCopyArrayOfKeys();
    if (favd_areOutputsEqual(v8, a3))
    {
      if (FigCFEqual())
      {
        favd_cleanupOldOutputs(a1);
        uint64_t v9 = 0;
        CFIndex v10 = 0;
        CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        if (!v8) {
          goto LABEL_10;
        }
LABEL_9:
        for (CFIndex i = CFArrayGetCount(v8); v10 < i; CFIndex i = 0)
        {
          CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v8, v10);
          uint64_t v13 = CMBaseObjectGetDerivedStorage();
          uint64_t v14 = CMBaseObjectGetDerivedStorage();
          CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(v14 + 40), ValueAtIndex);
          CFArrayRef theArray = 0;
          CFMutableArrayRef MutableCopy = CFArrayCreateMutableCopy(allocator, 0, Value);
          if (MutableCopy)
          {
            CFMutableArrayRef v17 = MutableCopy;
            uint64_t v18 = favd_copyImageQueuesForOutput(a2, ValueAtIndex, (CFTypeRef *)&theArray);
            if (v18)
            {
              uint64_t v9 = v18;
            }
            else
            {
              for (CFIndex j = 0; ; ++j)
              {
                CFIndex Count = (CFIndex)theArray;
                if (theArray) {
                  CFIndex Count = CFArrayGetCount(theArray);
                }
                if (j >= Count) {
                  break;
                }
                CFArrayGetValueAtIndex(theArray, j);
                CMNotificationCenterGetDefaultLocalCenter();
                FigNotificationCenterAddWeakListener();
                CMNotificationCenterGetDefaultLocalCenter();
                FigNotificationCenterAddWeakListener();
              }
              CFDictionarySetValue(*(CFMutableDictionaryRef *)(v13 + 40), ValueAtIndex, v17);
              if (dword_1E93510A8)
              {
                uint64_t v21 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              uint64_t v9 = 0;
            }
            CFRelease(v17);
            if (theArray) {
              CFRelease(theArray);
            }
          }
          else
          {
            uint64_t v9 = 4294948255;
          }
          ++v10;
          if (v8) {
            goto LABEL_9;
          }
LABEL_10:
          ;
        }
        goto LABEL_33;
      }
      if (dword_1E93510A8) {
        goto LABEL_31;
      }
    }
    else if (dword_1E93510A8)
    {
LABEL_31:
      LODWORD(theArray) = 0;
      int v22 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v9 = 0;
LABEL_33:
    if (v8) {
      CFRelease(v8);
    }
    a3 = v47;
    if (v9) {
      goto LABEL_69;
    }
  }
  CFIndex v23 = 0;
  CFAllocatorRef allocatora = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (!a3) {
    goto LABEL_38;
  }
LABEL_37:
  for (CFIndex k = CFArrayGetCount(a3); ; CFIndex k = 0)
  {
    if (v23 >= k)
    {
      favd_cleanupOldOutputs(a1);
      uint64_t v45 = CMBaseObjectGetDerivedStorage();
      CFDictionaryApplyFunction(*(CFDictionaryRef *)(v45 + 40), (CFDictionaryApplierFunction)favd_reconnectVisualContextToTimebaseApplierFn, *(void **)(v45 + 48));
      uint64_t v9 = 0;
      goto LABEL_69;
    }
    CFDictionaryRef v25 = CFArrayGetValueAtIndex(a3, v23);
    CFTypeRef v26 = (__CFDictionary *)DerivedStorage[5];
    if (!CFDictionaryGetValue(v26, v25))
    {
      CFArrayCallBacks callBacks = *(CFArrayCallBacks *)byte_1EE50B468;
      CFMutableArrayRef v27 = CFArrayCreateMutable(allocatora, 0, &callBacks);
      if (!v27)
      {
        uint64_t v9 = 4294948255;
        goto LABEL_69;
      }
      CFMutableArrayRef v28 = v27;
      CFDictionarySetValue(v26, v25, v27);
      CFRelease(v28);
    }
    CFTypeID v29 = CFGetTypeID(v25);
    if (v29 == FigVideoTargetGetTypeID()) {
      break;
    }
    CFArrayRef v40 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)DerivedStorage[5], v25);
    size_t v41 = v40;
    CFArrayRef theArray = 0;
    uint64_t v51 = 0;
    uint64_t v52 = 0;
    if (!v40 || !CFArrayGetCount(v40))
    {
      uint64_t v42 = favd_populateVideoDestination(a1, v25, 0, (uint64_t)&theArray);
      if (v42) {
        goto LABEL_67;
      }
      CFArrayAppendValue(v41, &theArray);
      if (dword_1E93510A8)
      {
        CMTime v43 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      favd_cleanupVideoDestination((uint64_t)&theArray);
    }
LABEL_64:
    ++v23;
    if (a3) {
      goto LABEL_37;
    }
LABEL_38:
    ;
  }
  uint64_t v30 = DerivedStorage;
  uint64_t v31 = CMBaseObjectGetDerivedStorage();
  CFArrayRef v32 = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(v31 + 40), v25);
  CFArrayRef theArray = 0;
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  CFArrayRef v33 = *(const __CFArray **)(v31 + 32);
  if (!v33 || (CFIndex v34 = CFArrayGetCount(v33)) == 0) {
    CFIndex v34 = 1;
  }
  if (!v32)
  {
    uint64_t v42 = FigSignalErrorAt();
    uint64_t DerivedStorage = v30;
    a3 = v47;
    if (v42)
    {
LABEL_67:
      uint64_t v9 = v42;
      goto LABEL_69;
    }
    goto LABEL_64;
  }
  CFIndex v35 = CFArrayGetCount(v32);
  CFIndex v36 = CFArrayGetCount(v32);
  CFIndex v37 = v36;
  if (v35 >= v34)
  {
    if (v36 > v34)
    {
      CMTime v44 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    goto LABEL_63;
  }
  if (v36 >= v34)
  {
LABEL_63:
    uint64_t DerivedStorage = v30;
    a3 = v47;
    goto LABEL_64;
  }
  while (1)
  {
    uint64_t v38 = favd_populateVideoDestination(a1, v25, v37, (uint64_t)&theArray);
    if (v38) {
      break;
    }
    if (dword_1E93510A8)
    {
      uint64_t v39 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CFArrayAppendValue(v32, &theArray);
    favd_cleanupVideoDestination((uint64_t)&theArray);
    if (v34 == ++v37) {
      goto LABEL_63;
    }
  }
  uint64_t v9 = v38;
  uint64_t DerivedStorage = v30;
LABEL_69:
  MEMORY[0x19970E930](*DerivedStorage);
  return v9;
}

void favd_handleTimebaseEffectiveRateChanged(uint64_t a1, uint64_t a2)
{
  theArray[22] = *(CFArrayRef *)MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  CMTimebaseGetRate((CMTimebaseRef)DerivedStorage[6]);
  theArray[0] = 0;
  MEMORY[0x19970E910](*DerivedStorage);
  if (!favd_copyAllImageQueuesAndOptions(a2, theArray, 0))
  {
    if (dword_1E93510A8)
    {
      os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CFIndex v5 = 0;
    do
    {
      CFArrayRef Count = theArray[0];
      if (theArray[0]) {
        CFArrayRef Count = (CFArrayRef)CFArrayGetCount(theArray[0]);
      }
      if (v5 >= (uint64_t)Count) {
        break;
      }
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray[0], v5++);
    }
    while (!favd_setupImageQueue((uint64_t)ValueAtIndex, (CMTimebaseRef)DerivedStorage[6]));
  }
  MEMORY[0x19970E930](*DerivedStorage);
  if (theArray[0]) {
    CFRelease(theArray[0]);
  }
}

uint64_t FigAggregateVideoDestinationForDataQueueCreate(const __CFAllocator *a1, const __CFArray *a2, const void *a3, CMFormatDescriptionRef desc, uint64_t a5, void *a6)
{
  if (a3 && a6 && desc && CMFormatDescriptionGetMediaType(desc) == 1835365473)
  {
    uint64_t v22 = a5;
    FigNote_AllowInternalDefaultLogs();
    fig_note_initialize_category_with_default_work_cf();
    fig_note_initialize_category_with_default_work_cf();
    MEMORY[0x19970EE10](&FigAggregateVideoDestinationGetClassID_sRegisterFigAggregateVideoDestinationTypeOnce, RegisterFigAggregateVideoDestinationType);
    uint64_t v12 = CMDerivedObjectCreate();
    if (!v12)
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      *(void *)uint64_t DerivedStorage = FigSimpleMutexCreate();
      *(void *)(DerivedStorage + 8) = CFRetain(a3);
      *(_DWORD *)(DerivedStorage + 16) = 1;
      *(void *)(DerivedStorage + 24) = FigFormatDescriptionRetain();
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      *(void *)(DerivedStorage + 32) = Mutable;
      if (Mutable)
      {
        uint64_t v15 = CFArrayCreateMutable(a1, 0, MEMORY[0x1E4F1D510]);
        CFIndex v16 = 0;
        if (!a2) {
          goto LABEL_9;
        }
LABEL_8:
        for (CFIndex i = CFArrayGetCount(a2); v16 < i; CFIndex i = 0)
        {
          CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(a2, v16);
          CFTypeID v19 = CFGetTypeID(ValueAtIndex);
          if (v19 == FigVideoTargetGetTypeID())
          {
            if (FPSupport_fvtSupportsMetadataTrack((uint64_t)ValueAtIndex, desc)) {
              CFArrayAppendValue(v15, ValueAtIndex);
            }
          }
          ++v16;
          if (a2) {
            goto LABEL_8;
          }
LABEL_9:
          ;
        }
        if (v15 && CFArrayGetCount(v15)) {
          favddq_UpdateDataQueuesToMatchOutputsArray(0, v22, v15);
        }
        if (dword_1E93510A8)
        {
          os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        *a6 = 0;
        if (v15) {
          CFRelease(v15);
        }
        return 0;
      }
      else
      {
        return 4294948255;
      }
    }
    return v12;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t favddq_UpdateDataQueuesToMatchOutputsArray(uint64_t a1, uint64_t a2, const __CFArray *a3)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  CMTimeValue value = 0;
  CMTime v39 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  CMTime v38 = v39;
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  double DataQueueWaterLevels = FPSupport_getDataQueueWaterLevels(&v39, &v38);
  MEMORY[0x19970E910](*DerivedStorage, DataQueueWaterLevels);
  uint64_t v7 = CMBaseObjectGetDerivedStorage();
  uint64_t v8 = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    if (a3)
    {
      uint64_t v9 = v8;
      if (CFArrayGetCount(a3))
      {
        CFArrayRef v10 = (const __CFArray *)FigCFDictionaryCopyArrayOfKeys();
        if (favd_areOutputsEqual(v10, a3))
        {
          if (CMFormatDescriptionEqual(*(CMFormatDescriptionRef *)(v7 + 24), *(CMFormatDescriptionRef *)(v9 + 24)))
          {
            CFIndex v11 = 0;
            if (!v10) {
              goto LABEL_8;
            }
LABEL_7:
            for (CFIndex i = CFArrayGetCount(v10); v11 < i; CFIndex i = 0)
            {
              CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v10, v11);
              uint64_t v14 = CFDictionaryGetValue(*(CFDictionaryRef *)(v9 + 32), ValueAtIndex);
              CFDictionarySetValue(*(CFMutableDictionaryRef *)(v7 + 32), ValueAtIndex, v14);
              ++v11;
              if (v10) {
                goto LABEL_7;
              }
LABEL_8:
              ;
            }
            goto LABEL_16;
          }
          if (!dword_1E93510A8)
          {
LABEL_16:
            if (v10) {
              CFRelease(v10);
            }
            goto LABEL_18;
          }
        }
        else if (!dword_1E93510A8)
        {
          goto LABEL_16;
        }
        os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        goto LABEL_16;
      }
    }
  }
LABEL_18:
  CFIndex v16 = 0;
  if (!a3) {
    goto LABEL_20;
  }
LABEL_19:
  for (CFIndex j = CFArrayGetCount(a3); v16 < j; CFIndex j = 0)
  {
    uint64_t v18 = CFArrayGetValueAtIndex(a3, v16);
    CFTypeID v19 = CFGetTypeID(v18);
    if (v19 == FigVideoTargetGetTypeID()
      && FPSupport_fvtSupportsMetadataTrack((uint64_t)v18, (const opaqueCMFormatDescription *)DerivedStorage[3]))
    {
      CMTimeValue value = (void *)CFDictionaryGetValue((CFDictionaryRef)DerivedStorage[4], v18);
      if (value) {
        goto LABEL_37;
      }
      CMTime v37 = v38;
      CMTime type = v39;
      uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v20) {
        uint64_t v21 = v20;
      }
      else {
        uint64_t v21 = 0;
      }
      uint64_t v22 = *(uint64_t (**)(const void *, void, CMTime *, CMTime *, void **))(v21 + 32);
      if (!v22) {
        goto LABEL_48;
      }
      CMTime v42 = v37;
      CMTime v41 = type;
      uint64_t v23 = v22(v18, 0, &v42, &v41, &value);
      if (v23) {
        goto LABEL_52;
      }
      uint64_t v24 = DerivedStorage[1];
      uint64_t CMBaseObject = FigDataQueueGetCMBaseObject(value);
      uint64_t v26 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v27 = v26 ? v26 : 0;
      CFMutableArrayRef v28 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v27 + 56);
      if (!v28)
      {
LABEL_48:
        uint64_t v34 = 4294954514;
        goto LABEL_49;
      }
      uint64_t v23 = v28(CMBaseObject, @"ControlTimebase", v24);
      if (v23)
      {
LABEL_52:
        uint64_t v34 = v23;
        goto LABEL_49;
      }
      CFDictionarySetValue((CFMutableDictionaryRef)DerivedStorage[4], v18, value);
      if (value)
      {
        CFRelease(value);
LABEL_37:
        CMTimeValue value = 0;
      }
    }
    ++v16;
    if (a3) {
      goto LABEL_19;
    }
LABEL_20:
    ;
  }
  uint64_t v29 = CMBaseObjectGetDerivedStorage();
  CFArrayRef v30 = (const __CFArray *)FigCFDictionaryCopyArrayOfKeys();
  if (v30)
  {
    CFArrayRef v31 = v30;
    if (CFArrayGetCount(v30) >= 1)
    {
      CFIndex v32 = 0;
      do
      {
        CFArrayRef v33 = CFArrayGetValueAtIndex(v31, v32);
        if (!FigCFArrayContainsValue()) {
          CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v29 + 32), v33);
        }
        ++v32;
      }
      while (v32 < CFArrayGetCount(v31));
    }
    CFRelease(v31);
  }
  uint64_t v34 = 0;
LABEL_49:
  if (value) {
    CFRelease(value);
  }
  MEMORY[0x19970E930](*DerivedStorage);
  return v34;
}

__CFString *favd_createDebugDescription(const void *a1)
{
  CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v2 = CFGetAllocator(a1);
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(v2, 0);
  CFIndex v4 = CFGetRetainCount(a1);
  CFStringAppendFormat(Mutable, 0, @"<FigAggregateVideoDestination %p retainCount: %ld ", a1, v4);
  CFArrayRef v5 = (const __CFArray *)FigCFDictionaryCopyArrayOfKeys();
  if (v5)
  {
    CFArrayRef v6 = v5;
    if (CFArrayGetCount(v5) >= 1)
    {
      CFIndex v7 = 0;
      do
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v6, v7);
        CFArrayRef theArray = 0;
        favd_copyImageQueuesForOutput((uint64_t)a1, ValueAtIndex, (CFTypeRef *)&theArray);
        CFTypeID v9 = CFGetTypeID(ValueAtIndex);
        if (v9 == FigVideoTargetGetTypeID())
        {
          CFStringAppendFormat(Mutable, 0, @"FVT:%p FIQ:", ValueAtIndex);
          for (CFIndex i = 0; ; ++i)
          {
            CFIndex Count = (CFIndex)theArray;
            if (theArray) {
              CFIndex Count = CFArrayGetCount(theArray);
            }
            if (i >= Count) {
              break;
            }
            uint64_t v12 = CFArrayGetValueAtIndex(theArray, i);
            CFStringAppendFormat(Mutable, 0, @"%p ", v12);
          }
        }
        else
        {
          CFTypeID v13 = CFGetTypeID(ValueAtIndex);
          if (v13 == FigVisualContextGetTypeID())
          {
            CFIndex v14 = (CFIndex)theArray;
            if (theArray)
            {
              CFIndex v14 = CFArrayGetCount(theArray);
              if (v14) {
                CFIndex v14 = (CFIndex)CFArrayGetValueAtIndex(theArray, 0);
              }
            }
            CFStringAppendFormat(Mutable, 0, @"FVC:%p FIQ:%p ", ValueAtIndex, v14);
          }
          else
          {
            CFTypeID v15 = CFGetTypeID(ValueAtIndex);
            if (v15 == CAImageQueueGetTypeID())
            {
              CFIndex v16 = (CFIndex)theArray;
              if (theArray)
              {
                CFIndex v16 = CFArrayGetCount(theArray);
                if (v16) {
                  CFIndex v16 = (CFIndex)CFArrayGetValueAtIndex(theArray, 0);
                }
              }
              CFStringAppendFormat(Mutable, 0, @"CA:%p FIQ:%p ", ValueAtIndex, v16);
            }
          }
        }
        if (theArray) {
          CFRelease(theArray);
        }
        ++v7;
      }
      while (v7 < CFArrayGetCount(v6));
    }
    CFStringAppendFormat(Mutable, 0, @">");
    CFRelease(v6);
  }
  else
  {
    CFStringAppendFormat(Mutable, 0, @">");
  }
  return Mutable;
}

uint64_t favd_copyImageQueuesForOutput(uint64_t a1, const void *a2, CFTypeRef *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  if (a3)
  {
    CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 40), a2);
    uint64_t v7 = favd_copyImageQueuesFromDestination(Value, (__CFArray **)&cf, 0);
    if (v7)
    {
      if (cf) {
        CFRelease(cf);
      }
    }
    else
    {
      *a3 = cf;
    }
    return v7;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t favd_copyImageQueuesFromDestination(const __CFArray *a1, __CFArray **a2, __CFArray **a3)
{
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (!Mutable) {
    return 4294948255;
  }
  uint64_t v8 = Mutable;
  if (!a3)
  {
    CFTypeID v9 = 0;
LABEL_6:
    CFIndex v11 = 0;
    if (!a1) {
      goto LABEL_8;
    }
LABEL_7:
    for (CFIndex i = CFArrayGetCount(a1); v11 < i; CFIndex i = 0)
    {
      CFDictionaryRef ValueAtIndex = (const void **)CFArrayGetValueAtIndex(a1, v11);
      CFArrayAppendValue(v8, *ValueAtIndex);
      if (v9)
      {
        CFIndex v14 = ValueAtIndex[1];
        if (v14) {
          CFArrayAppendValue(v9, v14);
        }
      }
      ++v11;
      if (a1) {
        goto LABEL_7;
      }
LABEL_8:
      ;
    }
    if (a2)
    {
      *a2 = v8;
      uint64_t v8 = 0;
    }
    if (a3)
    {
      *a3 = v9;
      CFTypeID v9 = 0;
    }
    uint64_t v10 = 0;
    uint64_t v15 = 0;
    if (!v8) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  CFTypeID v9 = CFArrayCreateMutable(v6, 0, MEMORY[0x1E4F1D510]);
  if (v9) {
    goto LABEL_6;
  }
  uint64_t v10 = 4294948255;
LABEL_20:
  CFRelease(v8);
  uint64_t v15 = v10;
LABEL_21:
  if (v9) {
    CFRelease(v9);
  }
  return v15;
}

void favd_Finalize(uint64_t a1)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (dword_1E93510A8)
  {
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  favd_cleanupOldOutputs(a1);
  FigSimpleMutexDestroy();
  FigFormatDescriptionRelease();
  DerivedStorage[3] = 0;
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  CFIndex v4 = (const void *)DerivedStorage[6];
  if (v4)
  {
    CFRelease(v4);
    DerivedStorage[6] = 0;
  }
  CFArrayRef v5 = (const void *)DerivedStorage[5];
  if (v5)
  {
    CFRelease(v5);
    DerivedStorage[5] = 0;
  }
  CFAllocatorRef v6 = (const void *)DerivedStorage[4];
  if (v6)
  {
    CFRelease(v6);
    DerivedStorage[4] = 0;
  }
}

uint64_t favd_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, __CFDictionary **a4)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (a2 && a4)
  {
    uint64_t v8 = DerivedStorage;
    MEMORY[0x19970E910](*DerivedStorage);
    if (CFEqual(a2, @"PerformanceDictionary"))
    {
      CFArrayRef theArray = 0;
      uint64_t v9 = favd_copyAllImageQueuesAndOptions(a1, &theArray, 0);
      if (!v9)
      {
        if (theArray)
        {
          uint64_t Count = CFArrayGetCount(theArray);
          if (Count == 1)
          {
            CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0);
            uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v12) {
              uint64_t v13 = v12;
            }
            else {
              uint64_t v13 = 0;
            }
            CMTime v39 = *(void (**)(const void *, __CFDictionary **))(v13 + 72);
            if (v39) {
              v39(ValueAtIndex, a4);
            }
            uint64_t v31 = 0;
            goto LABEL_56;
          }
        }
        else
        {
          uint64_t Count = 0;
        }
        CFAllocatorRef v21 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], Count, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        if (Mutable)
        {
          uint64_t v23 = Mutable;
          if (Count < 1)
          {
LABEL_34:
            uint64_t v31 = 0;
            *a4 = v23;
            goto LABEL_56;
          }
          CFIndex v24 = 0;
          while (1)
          {
            CMTimeValue value = 0;
            CFStringRef v25 = CFStringCreateWithFormat(v21, 0, @"imagequeue-%d", v24);
            if (!v25) {
              break;
            }
            CFStringRef v26 = v25;
            uint64_t v27 = CFArrayGetValueAtIndex(theArray, v24);
            uint64_t v28 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v28) {
              uint64_t v29 = v28;
            }
            else {
              uint64_t v29 = 0;
            }
            CFArrayRef v30 = *(void (**)(const void *, void **))(v29 + 72);
            if (v30) {
              v30(v27, &value);
            }
            if (value) {
              CFDictionarySetValue(v23, v26, value);
            }
            CFRelease(v26);
            if (value) {
              CFRelease(value);
            }
            if (Count == ++v24) {
              goto LABEL_34;
            }
          }
          CFRelease(v23);
        }
        uint64_t v31 = 4294948255;
LABEL_56:
        CFArrayRef v32 = theArray;
        if (theArray) {
LABEL_57:
        }
          CFRelease(v32);
LABEL_58:
        MEMORY[0x19970E930](*v8);
        return v31;
      }
    }
    else
    {
      if (CFEqual(a2, @"VideoTargets"))
      {
        CMBaseObjectGetDerivedStorage();
        CFArrayRef v14 = (const __CFArray *)FigCFDictionaryCopyArrayOfKeys();
        CFMutableArrayRef v15 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
        if (v15)
        {
          CFIndex v16 = v15;
          CFIndex v17 = 0;
          if (!v14) {
            goto LABEL_13;
          }
LABEL_12:
          for (CFIndex i = CFArrayGetCount(v14); v17 < i; CFIndex i = 0)
          {
            CFTypeID v19 = CFArrayGetValueAtIndex(v14, v17);
            CFTypeID v20 = CFGetTypeID(v19);
            if (v20 == FigVideoTargetGetTypeID()) {
              CFArrayAppendValue(v16, v19);
            }
            ++v17;
            if (v14) {
              goto LABEL_12;
            }
LABEL_13:
            ;
          }
          uint64_t v31 = 0;
          *a4 = v16;
          if (!v14) {
            goto LABEL_58;
          }
        }
        else
        {
          uint64_t v31 = 4294948255;
          if (!v14) {
            goto LABEL_58;
          }
        }
        CFArrayRef v32 = v14;
        goto LABEL_57;
      }
      if (!CFEqual(a2, @"ImageQueueGauge"))
      {
        uint64_t v31 = 4294954509;
        goto LABEL_58;
      }
      CMTimeValue value = 0;
      CFArrayRef theArray = 0;
      CMBaseObjectGetDerivedStorage();
      uint64_t v9 = favd_copyAllImageQueuesAndOptions(a1, &theArray, 0);
      if (!v9)
      {
        CFArrayRef v33 = theArray;
        if (theArray)
        {
          if (CFArrayGetCount(theArray) < 1)
          {
            CFArrayRef v33 = 0;
          }
          else
          {
            uint64_t v34 = CFArrayGetValueAtIndex(theArray, 0);
            uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
            uint64_t FigBaseObject = FigImageQueueGetFigBaseObject(v34);
            uint64_t v37 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v37) {
              uint64_t v38 = v37;
            }
            else {
              uint64_t v38 = 0;
            }
            CFArrayRef v40 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, void **))(v38 + 48);
            if (!v40)
            {
              uint64_t v31 = 4294954514;
              goto LABEL_56;
            }
            uint64_t v31 = v40(FigBaseObject, @"ImageQueueGauge", AllocatorForMedia, &value);
            CFArrayRef v33 = (__CFDictionary *)value;
            if (v31)
            {
              if (value) {
                CFRelease(value);
              }
              goto LABEL_56;
            }
          }
        }
        uint64_t v31 = 0;
        *a4 = v33;
        CMTimeValue value = 0;
        goto LABEL_56;
      }
    }
    uint64_t v31 = v9;
    goto LABEL_56;
  }

  return FigSignalErrorAt();
}

uint64_t favd_SetProperty(const void *a1, const void *a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1)
  {
    uint64_t v8 = (void *)DerivedStorage;
    CFTypeID v9 = CFGetTypeID(a1);
    MEMORY[0x19970EE10](&FigAggregateVideoDestinationGetClassID_sRegisterFigAggregateVideoDestinationTypeOnce, RegisterFigAggregateVideoDestinationType);
    if (v9 == CMBaseClassGetCFTypeID())
    {
      if (a2)
      {
        MEMORY[0x19970E910](*v8);
        if (CFEqual(a2, @"VideoConfigID"))
        {
          *((unsigned char *)v8 + 8) = 0;
          uint64_t v10 = (char *)(v8 + 1);
          if (!a3)
          {
LABEL_11:
            MEMORY[0x19970E930](*v8, v10);
            return a3;
          }
          CFStringGetCString((CFStringRef)a3, v10, 10, 0x600u);
        }
        else
        {
          if (!CFEqual(a2, @"ImageQueueGauge"))
          {
            a3 = 4294954509;
            goto LABEL_11;
          }
          CFArrayRef theArray = 0;
          favd_copyAllImageQueuesAndOptions((uint64_t)a1, &theArray, 0);
          if (theArray)
          {
            if (CFArrayGetCount(theArray) >= 1)
            {
              uint64_t ValueAtIndex = FigCFArrayGetValueAtIndex();
              uint64_t FigBaseObject = FigImageQueueGetFigBaseObject(ValueAtIndex);
              uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
              uint64_t v14 = v13 ? v13 : 0;
              CFMutableArrayRef v15 = *(void (**)(uint64_t, __CFString *, uint64_t))(v14 + 56);
              if (v15) {
                v15(FigBaseObject, @"ImageQueueGauge", a3);
              }
            }
            if (theArray) {
              CFRelease(theArray);
            }
          }
        }
        a3 = 0;
        goto LABEL_11;
      }
    }
  }

  return FigSignalErrorAt();
}

void favd_cleanupOldOutputs(uint64_t a1)
{
  theArray[21] = *(CFArrayRef *)MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFArrayRef v2 = (const __CFArray *)FigCFDictionaryCopyArrayOfKeys();
  if (v2)
  {
    CFArrayRef v3 = v2;
    if (CFArrayGetCount(v2) >= 1)
    {
      CFIndex v4 = 0;
      do
      {
        uint64_t ValueAtIndex = CFArrayGetValueAtIndex(v3, v4);
        if (!FigCFArrayContainsValue())
        {
          theArray[0] = 0;
          if (dword_1E93510A8)
          {
            os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          favd_copyImageQueuesForOutput(a1, ValueAtIndex, (CFTypeRef *)theArray);
          for (CFIndex i = 0; ; ++i)
          {
            CFArrayRef Count = theArray[0];
            if (theArray[0]) {
              CFArrayRef Count = (CFArrayRef)CFArrayGetCount(theArray[0]);
            }
            if (i >= (uint64_t)Count) {
              break;
            }
            CFArrayGetValueAtIndex(theArray[0], i);
            CMNotificationCenterGetDefaultLocalCenter();
            FigNotificationCenterRemoveWeakListener();
            CMNotificationCenterGetDefaultLocalCenter();
            FigNotificationCenterRemoveWeakListener();
          }
          CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(DerivedStorage + 40), ValueAtIndex);
          if (theArray[0]) {
            CFRelease(theArray[0]);
          }
        }
        ++v4;
      }
      while (v4 < CFArrayGetCount(v3));
    }
    CFRelease(v3);
  }
}

void favd_handleFirstFrameEnqueued(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    CFAllocatorRef v6 = Mutable;
    CFDictionarySetValue(Mutable, @"OriginatingFigImageQueue", a4);
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    CFRelease(v6);
  }
}

void favd_handleDisplaySizeChanged(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  CFArrayRef v5 = (double *)MEMORY[0x1E4F1DB30];
  long long v9 = *MEMORY[0x1E4F1DB30];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    uint64_t v7 = Mutable;
    CFDictionarySetValue(Mutable, @"OriginatingFigImageQueue", a4);
    FigCFDictionaryGetCGSizeIfPresent();
    if (*(double *)&v9 != *v5 || *((double *)&v9 + 1) != v5[1]) {
      FigCFDictionarySetCGSize();
    }
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    CFRelease(v7);
  }
}

uint64_t favd_copyAllImageQueuesAndOptions(uint64_t a1, __CFArray **a2, __CFArray **a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFArrayRef v6 = (const __CFArray *)FigCFDictionaryCopyArrayOfValues();
  if (!v6) {
    return 4294948255;
  }
  CFArrayRef v7 = v6;
  CFIndex Count = CFArrayGetCount(v6);
  CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (Mutable)
  {
    CFIndex v11 = Mutable;
    uint64_t v12 = CFArrayCreateMutable(v9, 0, MEMORY[0x1E4F1D510]);
    if (!v12)
    {
      uint64_t v19 = 4294948255;
      goto LABEL_28;
    }
    if (Count >= 1)
    {
      CFIndex v13 = 0;
      do
      {
        CFArrayRef ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(v7, v13);
        CFArrayRef v21 = 0;
        CFArrayRef theArray = 0;
        uint64_t v15 = favd_copyImageQueuesFromDestination(ValueAtIndex, &theArray, &v21);
        if (v15) {
          goto LABEL_24;
        }
        CFArrayRef v16 = theArray;
        v23.size_t length = CFArrayGetCount(theArray);
        v23.location = 0;
        CFArrayAppendArray(v11, v16, v23);
        CFArrayRef v17 = v21;
        if (v21)
        {
          v24.size_t length = CFArrayGetCount(v21);
          v24.location = 0;
          CFArrayAppendArray(v12, v17, v24);
        }
        if (theArray) {
          CFRelease(theArray);
        }
        if (v21) {
          CFRelease(v21);
        }
      }
      while (Count != ++v13);
    }
    if (*(void *)(DerivedStorage + 32))
    {
      CFIndex v18 = CFArrayGetCount(v11);
      if (v18 == CFArrayGetCount(v12)) {
        goto LABEL_16;
      }
    }
    else if (!CFArrayGetCount(v12))
    {
LABEL_16:
      if (a2)
      {
        *a2 = v11;
        CFIndex v11 = 0;
      }
      if (a3)
      {
        uint64_t v19 = 0;
        if (!CFArrayGetCount(v12))
        {
          *a3 = 0;
          if (!v11) {
            goto LABEL_29;
          }
          goto LABEL_28;
        }
        *a3 = v12;
        uint64_t v12 = 0;
        if (v11) {
LABEL_28:
        }
          CFRelease(v11);
      }
      else
      {
        uint64_t v19 = 0;
        if (v11) {
          goto LABEL_28;
        }
      }
LABEL_29:
      if (v12) {
        CFRelease(v12);
      }
      goto LABEL_31;
    }
    uint64_t v15 = FigSignalErrorAt();
LABEL_24:
    uint64_t v19 = v15;
    goto LABEL_28;
  }
  uint64_t v19 = 4294948255;
LABEL_31:
  CFRelease(v7);
  return v19;
}

uint64_t favd_ImageQueueArraySetPropertyForOutputs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  CFArrayRef theArray = 0;
  MEMORY[0x19970E910](*DerivedStorage);
  if (a3)
  {
    CFArrayRef MappedArray = (const __CFArray *)FigCFDictionaryCreateMappedArray();
    CFIndex v6 = 0;
    if (!MappedArray) {
      goto LABEL_4;
    }
LABEL_3:
    for (CFIndex i = CFArrayGetCount(MappedArray); ; CFIndex i = 0)
    {
      if (v6 >= i)
      {
        uint64_t v10 = 0;
        goto LABEL_15;
      }
      CFArrayRef ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(MappedArray, v6);
      uint64_t v9 = favd_copyImageQueuesFromDestination(ValueAtIndex, &theArray, 0);
      if (v9) {
        break;
      }
      if (theArray)
      {
        if (CFArrayGetCount(theArray)) {
          FigImageQueueArraySetProperty();
        }
        if (theArray)
        {
          CFRelease(theArray);
          CFArrayRef theArray = 0;
        }
      }
      ++v6;
      if (MappedArray) {
        goto LABEL_3;
      }
LABEL_4:
      ;
    }
    uint64_t v10 = v9;
LABEL_15:
    MEMORY[0x19970E930](*DerivedStorage);
    if (MappedArray) {
      CFRelease(MappedArray);
    }
  }
  else
  {
    uint64_t v10 = FigSignalErrorAt();
    MEMORY[0x19970E930](*DerivedStorage);
  }
  if (theArray) {
    CFRelease(theArray);
  }
  return v10;
}

uint64_t favd_CopyFigImageQueueArrayAndOptions(uint64_t a1, __CFArray **a2, __CFArray **a3)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*DerivedStorage);
  if (a2)
  {
    uint64_t v7 = favd_copyAllImageQueuesAndOptions(a1, a2, a3);
    if (!v7 && dword_1E93510A8)
    {
      os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      uint64_t v7 = 0;
    }
  }
  else
  {
    uint64_t v7 = FigSignalErrorAt();
  }
  MEMORY[0x19970E930](*DerivedStorage);
  return v7;
}

uint64_t favd_UpdateDataChannelConfigForVideoTarget(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*DerivedStorage);
  if (dword_1E93510A8)
  {
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CFArrayRef v11 = 0;
  if (!a2 || !a6) {
    goto LABEL_30;
  }
  if (a4) {
    uint64_t MutableCopy = FigTagCollectionCreateMutableCopy();
  }
  else {
    uint64_t MutableCopy = FigTagCollectionCreateMutable();
  }
  uint64_t v13 = MutableCopy;
  if (MutableCopy)
  {
    CFArrayRef v11 = 0;
    goto LABEL_26;
  }
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFMutableArrayRef Mutable = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D510]);
  CFArrayRef v11 = Mutable;
  if (!Mutable) {
    goto LABEL_30;
  }
  CFArrayAppendValue(Mutable, (const void *)DerivedStorage[3]);
  CFArrayRef v16 = *(const __CFArray **)(CMBaseObjectGetDerivedStorage() + 32);
  if (v16 && CFArrayGetCount(v16))
  {
    MEMORY[0x19970EB00](0, 1702454643);
    FigTagCollectionGetTagsWithCategory();
    *(void *)&v28.category = 0;
    v28.CMTimeValue value = 0;
    CMTagCollectionRemoveTag(0, v28);
  }
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)DerivedStorage[5], a2);
  if (Value)
  {
    CFArrayRef v18 = Value;
    if (CFArrayGetCount(Value) < 1)
    {
      uint64_t v13 = 0;
    }
    else
    {
      CFIndex v19 = 0;
      do
      {
        CFArrayRef ValueAtIndex = (const void **)CFArrayGetValueAtIndex(v18, v19);
        CFArrayRef v21 = ValueAtIndex[2];
        uint64_t v22 = FigTagCollectionCreateMutableCopy();
        if (v22)
        {
          uint64_t v13 = v22;
        }
        else if (v21)
        {
          FigTagCollectionGetTagsWithCategory();
          uint64_t v13 = 4294948254;
        }
        else
        {
          uint64_t v23 = FigTagMakeWithSInt64Value();
          CMTagValue v25 = v24;
          *(void *)&v29.category = v23;
          v29.CMTimeValue value = v25;
          CMTagCollectionAddTag(0, v29);
          uint64_t v13 = 0;
        }
        if (*ValueAtIndex)
        {
          uint64_t v13 = FigDataChannelConfigurationAddFigImageQueue(a6, *ValueAtIndex, 0, a5, v11);
          if (v13) {
            break;
          }
        }
        ++v19;
      }
      while (v19 < CFArrayGetCount(v18));
    }
  }
  else
  {
LABEL_30:
    uint64_t v13 = FigSignalErrorAt();
  }
LABEL_26:
  MEMORY[0x19970E930](*DerivedStorage);
  if (v11) {
    CFRelease(v11);
  }
  return v13;
}

uint64_t favd_createDataChannelConfigID(uint64_t a1, CFStringRef *a2)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*DerivedStorage);
  if (a2)
  {
    CFStringRef v4 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"C/%s.%d", DerivedStorage + 1, *((unsigned int *)DerivedStorage + 5));
    if (v4)
    {
      uint64_t v5 = 0;
      ++*((_DWORD *)DerivedStorage + 5);
      *a2 = v4;
    }
    else
    {
      uint64_t v5 = 4294948255;
    }
  }
  else
  {
    uint64_t v5 = 4294948256;
  }
  MEMORY[0x19970E930](*DerivedStorage);
  return v5;
}

uint64_t favd_CopyFigImageQueueForCAImageQueue(uint64_t a1, const void *a2, void *a3)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  CFArrayRef theArray = 0;
  MEMORY[0x19970E910](*DerivedStorage);
  if (!a2 || !a3) {
    goto LABEL_11;
  }
  uint64_t v7 = favd_copyImageQueuesForOutput(a1, a2, (CFTypeRef *)&theArray);
  if (v7)
  {
LABEL_12:
    uint64_t v9 = v7;
    goto LABEL_13;
  }
  if (!theArray || !CFArrayGetCount(theArray) || !theArray || CFArrayGetCount(theArray) != 1)
  {
LABEL_11:
    uint64_t v7 = FigSignalErrorAt();
    goto LABEL_12;
  }
  CFArrayRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0);
  if (ValueAtIndex) {
    CFArrayRef ValueAtIndex = CFRetain(ValueAtIndex);
  }
  uint64_t v9 = 0;
  *a3 = ValueAtIndex;
LABEL_13:
  MEMORY[0x19970E930](*DerivedStorage);
  if (theArray) {
    CFRelease(theArray);
  }
  return v9;
}

uint64_t favd_CopyFigImageQueueForVisualContext(uint64_t a1, const void *a2, void *a3)
{
  CFArrayRef theArray = 0;
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*DerivedStorage);
  if (!a2 || !a3) {
    goto LABEL_11;
  }
  uint64_t v7 = favd_copyImageQueuesForOutput(a1, a2, (CFTypeRef *)&theArray);
  if (v7)
  {
LABEL_12:
    uint64_t v9 = v7;
    goto LABEL_13;
  }
  if (!theArray || !CFArrayGetCount(theArray) || !theArray || CFArrayGetCount(theArray) != 1)
  {
LABEL_11:
    uint64_t v7 = FigSignalErrorAt();
    goto LABEL_12;
  }
  CFArrayRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0);
  if (ValueAtIndex) {
    CFArrayRef ValueAtIndex = CFRetain(ValueAtIndex);
  }
  uint64_t v9 = 0;
  *a3 = ValueAtIndex;
LABEL_13:
  MEMORY[0x19970E930](*DerivedStorage);
  if (theArray) {
    CFRelease(theArray);
  }
  return v9;
}

uint64_t favd_IsAnyOutputReadyToRender()
{
  unsigned __int8 context = 0;
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*DerivedStorage);
  CFDictionaryApplyFunction((CFDictionaryRef)DerivedStorage[5], (CFDictionaryApplierFunction)favd_isAnyOutputReadyToRenderApplierFn, &context);
  MEMORY[0x19970E930](*DerivedStorage);
  return context;
}

uint64_t favd_flushFramesFollowingCurrentFrame(uint64_t a1)
{
  CFArrayRef theArray = 0;
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*DerivedStorage);
  uint64_t v3 = favd_copyAllImageQueuesAndOptions(a1, &theArray, 0);
  if (v3)
  {
LABEL_11:
    uint64_t v10 = v3;
  }
  else
  {
    CFIndex v4 = 0;
    while (1)
    {
      CFIndex Count = (CFIndex)theArray;
      if (theArray) {
        CFIndex Count = CFArrayGetCount(theArray);
      }
      if (v4 >= Count) {
        break;
      }
      CFArrayRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v4);
      uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v7) {
        uint64_t v8 = v7;
      }
      else {
        uint64_t v8 = 0;
      }
      uint64_t v9 = *(uint64_t (**)(const void *))(v8 + 112);
      if (!v9)
      {
        uint64_t v10 = 4294954514;
        goto LABEL_14;
      }
      uint64_t v3 = v9(ValueAtIndex);
      ++v4;
      if (v3) {
        goto LABEL_11;
      }
    }
    uint64_t v10 = 0;
  }
LABEL_14:
  MEMORY[0x19970E930](*DerivedStorage);
  if (theArray) {
    CFRelease(theArray);
  }
  return v10;
}

void favd_isAnyOutputReadyToRenderApplierFn(int a1, CFArrayRef theArray, unsigned char *a3)
{
  if (!*a3)
  {
    CFIndex v5 = 0;
    CFIndex v6 = (const void *)*MEMORY[0x1E4F1CFC8];
    uint64_t v7 = *MEMORY[0x1E4F1CF80];
    uint64_t v8 = (const void *)*MEMORY[0x1E4F1CFD0];
    if (!theArray) {
      goto LABEL_4;
    }
LABEL_3:
    for (CFIndex i = CFArrayGetCount(theArray); v5 < i; CFIndex i = 0)
    {
      CFArrayRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v5);
      uint64_t v15 = v6;
      uint64_t FigBaseObject = FigImageQueueGetFigBaseObject(*ValueAtIndex);
      uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v12) {
        uint64_t v13 = v12;
      }
      else {
        uint64_t v13 = 0;
      }
      uint64_t v14 = *(void (**)(uint64_t, __CFString *, uint64_t, const void **))(v13 + 48);
      if (v14) {
        v14(FigBaseObject, @"FigImageQueueProperty_FirstImageEnqueued", v7, &v15);
      }
      if (v15 != v8) {
        return;
      }
      if (v8) {
        CFRelease(v8);
      }
      ++v5;
      if (theArray) {
        goto LABEL_3;
      }
LABEL_4:
      ;
    }
    *a3 = 1;
  }
}

uint64_t favd_populateVideoDestination(uint64_t a1, const void *a2, CFIndex a3, uint64_t a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFArrayRef v8 = *(const __CFArray **)(DerivedStorage + 32);
  if (v8)
  {
    if (CFArrayGetCount(v8) <= a3) {
      goto LABEL_54;
    }
  }
  else if (a3)
  {
    goto LABEL_54;
  }
  if (a4)
  {
    uint64_t v9 = *(OpaqueCMTimebase **)(DerivedStorage + 48);
    cf[0] = 0;
    CFTypeID v10 = CFGetTypeID(a2);
    if (v10 == FigVisualContextGetTypeID())
    {
      uint64_t v11 = FigImageQueueCreateForCoreVideo(0, cf);
      if (!v11)
      {
        CFTypeRef v12 = cf[0];
        uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v13) {
          uint64_t v14 = v13;
        }
        else {
          uint64_t v14 = 0;
        }
        CFTypeID v20 = *(uint64_t (**)(CFTypeRef, const void *, OpaqueCMTimebase *))(v14 + 8);
        if (v20)
        {
          uint64_t v16 = v20(v12, a2, v9);
          goto LABEL_23;
        }
        goto LABEL_28;
      }
    }
    else
    {
      CFTypeID v15 = CFGetTypeID(a2);
      if (v15 == CAImageQueueGetTypeID())
      {
        uint64_t v16 = FigImageQueueCreateForCoreAnimation(0, a2, cf);
        goto LABEL_23;
      }
      CFTypeID v17 = CFGetTypeID(a2);
      if (v17 == FigVideoTargetGetTypeID())
      {
        uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v18) {
          uint64_t v19 = v18;
        }
        else {
          uint64_t v19 = 0;
        }
        uint64_t v22 = *(uint64_t (**)(const void *, void, CFTypeRef *))(v19 + 8);
        if (v22)
        {
          uint64_t v16 = v22(a2, 0, cf);
LABEL_23:
          uint64_t v21 = v16;
          if (!v16)
          {
            if (!cf[0]) {
              return 4294948253;
            }
            uint64_t v11 = favd_setupImageQueue((uint64_t)cf[0], v9);
            if (!v11)
            {
              uint64_t FigBaseObject = FigImageQueueGetFigBaseObject(cf[0]);
              uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 8);
              if (v24) {
                uint64_t v25 = v24;
              }
              else {
                uint64_t v25 = 0;
              }
              CFArrayRef v33 = *(void (**)(uint64_t, __CFString *, OpaqueCMTimebase *))(v25 + 56);
              if (v33) {
                v33(FigBaseObject, @"FigImageQueueProperty_Timebase", v9);
              }
              uint64_t v34 = FigImageQueueGetFigBaseObject(cf[0]);
              uint64_t v35 = *(void *)(CMBaseObjectGetVTable() + 8);
              if (v35) {
                uint64_t v36 = v35;
              }
              else {
                uint64_t v36 = 0;
              }
              uint64_t v37 = *(void (**)(uint64_t, __CFString *, void))(v36 + 56);
              if (v37) {
                v37(v34, @"EnableImageQueueTiming", *MEMORY[0x1E4F1CFD0]);
              }
              CMNotificationCenterGetDefaultLocalCenter();
              FigNotificationCenterAddWeakListener();
              CMNotificationCenterGetDefaultLocalCenter();
              FigNotificationCenterAddWeakListener();
              *(CFTypeRef *)a4 = cf[0];
LABEL_32:
              if (*(void *)(DerivedStorage + 32))
              {
                uint64_t v26 = FigTagMakeWithSInt64Value();
                CMTagValue v28 = v27;
                CFIndex v29 = 0;
                do
                {
                  CFArrayRef Count = *(const __CFArray **)(DerivedStorage + 32);
                  if (Count) {
                    CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
                  }
                  if (v29 >= (uint64_t)Count) {
                    return FigSignalErrorAt();
                  }
                  CFArrayRef ValueAtIndex = (const OpaqueCMTagCollection *)CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 32), v29);
                  *(void *)&v40.category = v26;
                  v40.CMTimeValue value = v28;
                  ++v29;
                }
                while (!CMTagCollectionContainsTag(ValueAtIndex, v40));
                if (ValueAtIndex)
                {
                  *(void *)(a4 + 16) = CFRetain(ValueAtIndex);
                  cf[0] = 0;
                  cf[1] = 0;
                  FigTagCollectionGetTagsWithCategory();
                  return 4294948254;
                }
                *(void *)(a4 + 16) = 0;
              }
              uint64_t v21 = 0;
              *(void *)(a4 + 8) = 0;
              return v21;
            }
            goto LABEL_19;
          }
LABEL_29:
          if (cf[0]) {
            CFRelease(cf[0]);
          }
          if (!v21) {
            goto LABEL_32;
          }
          return v21;
        }
LABEL_28:
        uint64_t v21 = 4294954514;
        goto LABEL_29;
      }
      uint64_t v11 = FigSignalErrorAt();
    }
LABEL_19:
    uint64_t v21 = v11;
    goto LABEL_29;
  }
LABEL_54:

  return FigSignalErrorAt();
}

void favd_cleanupVideoDestination(uint64_t a1)
{
  CFArrayRef v2 = *(const void **)a1;
  if (v2)
  {
    CFRelease(v2);
    *(void *)a1 = 0;
  }
  uint64_t v3 = *(const void **)(a1 + 16);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 16) = 0;
  }
  CFIndex v4 = *(const void **)(a1 + 8);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 8) = 0;
  }
}

uint64_t favd_areOutputsEqual(CFArrayRef theArray, const __CFArray *a2)
{
  if (!theArray)
  {
    uint64_t Count = 0;
    if (a2) {
      goto LABEL_3;
    }
LABEL_5:
    CFIndex v5 = 0;
    goto LABEL_6;
  }
  uint64_t Count = CFArrayGetCount(theArray);
  if (!a2) {
    goto LABEL_5;
  }
LABEL_3:
  CFIndex v5 = CFArrayGetCount(a2);
LABEL_6:
  if (theArray == a2) {
    return 1;
  }
  if (Count != v5) {
    return 0;
  }
  if (Count < 1) {
    return 1;
  }
  CFIndex v6 = 0;
  while (1)
  {
    CFArrayRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v6);
    v9.location = 0;
    v9.size_t length = Count;
    uint64_t result = CFArrayContainsValue(a2, v9, ValueAtIndex);
    if (!result) {
      break;
    }
    if (Count == ++v6) {
      return 1;
    }
  }
  return result;
}

void *favd_imageQueueInfoRetainCallBack(const __CFAllocator *a1, uint64_t a2)
{
  uint64_t v3 = CFAllocatorAllocate(a1, 24, 0);
  CFTypeRef v4 = *(CFTypeRef *)a2;
  if (*(void *)a2) {
    CFTypeRef v4 = CFRetain(v4);
  }
  *uint64_t v3 = v4;
  CFTypeRef v5 = *(CFTypeRef *)(a2 + 16);
  if (v5) {
    CFTypeRef v5 = CFRetain(v5);
  }
  void v3[2] = v5;
  CFTypeRef v6 = *(CFTypeRef *)(a2 + 8);
  if (v6) {
    CFTypeRef v6 = CFRetain(v6);
  }
  v3[1] = v6;
  return v3;
}

void favd_imageQueueInfoReleaseCallBack(const __CFAllocator *a1, void *a2)
{
  favd_cleanupVideoDestination((uint64_t)a2);

  CFAllocatorDeallocate(a1, a2);
}

__CFString *favd_imageQueueInfoCopyDescriptionCallBack(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  uint64_t v3 = (const void *)FigCFCopyCompactDescription();
  CFTypeRef v4 = (const void *)FigCFCopyCompactDescription();
  CFStringAppendFormat(Mutable, 0, @"<VideoDestination: %p FIQ: %@ collection: %@>", a1, v3, v4);
  if (v3) {
    CFRelease(v3);
  }
  if (v4) {
    CFRelease(v4);
  }
  return Mutable;
}

uint64_t favd_imageQueueInfoEqualCallBack()
{
  uint64_t result = FigCFEqual();
  if (result)
  {
    uint64_t result = FigCFEqual();
    if (result) {
      return FigCFEqual() != 0;
    }
  }
  return result;
}

uint64_t favd_setupImageQueue(uint64_t a1, CMTimebaseRef timebase)
{
  float Rate = CMTimebaseGetRate(timebase);
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  CFTypeRef v6 = *(uint64_t (**)(uint64_t, BOOL))(v5 + 40);
  if (!v6) {
    return 4294954514;
  }
  uint64_t result = v6(a1, Rate != 0.0);
  if (result) {
    return result;
  }
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v10 = v8 ? v8 : 0;
  uint64_t v11 = *(uint64_t (**)(uint64_t, __n128))(v10 + 48);
  if (!v11) {
    return 4294954514;
  }
  v9.n128_f32[0] = Rate;

  return v11(a1, v9);
}

uint64_t favd_reconnectVisualContextToTimebaseApplierFn(const void *a1, const __CFArray *a2, uint64_t a3)
{
  CFTypeID v6 = CFGetTypeID(a1);
  uint64_t result = FigVisualContextGetTypeID();
  if (v6 == result)
  {
    CFIndex v8 = 0;
    if (!a2) {
      goto LABEL_4;
    }
LABEL_3:
    for (uint64_t result = CFArrayGetCount(a2); v8 < result; uint64_t result = 0)
    {
      CFArrayRef ValueAtIndex = (uint64_t *)CFArrayGetValueAtIndex(a2, v8);
      uint64_t v10 = *ValueAtIndex;
      uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v11) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = 0;
      }
      uint64_t v13 = *(void (**)(uint64_t, void, void))(v12 + 8);
      if (v13) {
        v13(v10, 0, 0);
      }
      uint64_t v14 = *ValueAtIndex;
      uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v15) {
        uint64_t v16 = v15;
      }
      else {
        uint64_t v16 = 0;
      }
      CFTypeID v17 = *(void (**)(uint64_t, const void *, uint64_t))(v16 + 8);
      if (v17) {
        v17(v14, a1, a3);
      }
      ++v8;
      if (a2) {
        goto LABEL_3;
      }
LABEL_4:
      ;
    }
  }
  return result;
}

void favddq_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigSimpleMutexDestroy();
  FigFormatDescriptionRelease();
  uint64_t v1 = *(const void **)(DerivedStorage + 8);
  if (v1)
  {
    CFRelease(v1);
    *(void *)(DerivedStorage + 8) = 0;
  }
  CFArrayRef v2 = *(const void **)(DerivedStorage + 32);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(DerivedStorage + 32) = 0;
  }
}

__CFString *favddq_createDebugDescription(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = CFGetAllocator(a1);
  CFMutableArrayRef Mutable = CFStringCreateMutable(v3, 0);
  uint64_t v5 = (const void *)FigCFCopyCompactDescription();
  CFStringAppendFormat(Mutable, 0, @"<FigAggregateVideoDestination [%p|%s] %@>", a1, DerivedStorage + 40, v5);
  if (v5) {
    CFRelease(v5);
  }
  return Mutable;
}

uint64_t favddq_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, __CFArray **a4)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (a2 && a4)
  {
    uint64_t v7 = DerivedStorage;
    MEMORY[0x19970E910](*DerivedStorage);
    if (CFEqual(a2, @"SampleBufferConsumersForDataQueues"))
    {
      CMTimeValue value = 0;
      uint64_t v8 = CMBaseObjectGetDerivedStorage();
      CFArrayRef v9 = (const __CFArray *)FigCFDictionaryCopyArrayOfKeys();
      CFArrayRef v10 = v9;
      if (v9) {
        uint64_t Count = CFArrayGetCount(v9);
      }
      else {
        uint64_t Count = 0;
      }
      uint64_t v13 = *MEMORY[0x1E4F1CF80];
      CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], Count, MEMORY[0x1E4F1D510]);
      if (Mutable)
      {
        if (Count < 1)
        {
LABEL_20:
          uint64_t v12 = 0;
          *a4 = Mutable;
          CFMutableArrayRef Mutable = 0;
          if (v10) {
            goto LABEL_23;
          }
          goto LABEL_24;
        }
        CFIndex v15 = 0;
        while (1)
        {
          CFArrayRef ValueAtIndex = CFArrayGetValueAtIndex(v10, v15);
          CFTypeID v17 = CFDictionaryGetValue(*(CFDictionaryRef *)(v8 + 32), ValueAtIndex);
          if (v17)
          {
            uint64_t CMBaseObject = FigDataQueueGetCMBaseObject(v17);
            uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v19) {
              uint64_t v20 = v19;
            }
            else {
              uint64_t v20 = 0;
            }
            uint64_t v21 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, void **))(v20 + 48);
            if (!v21)
            {
              uint64_t v12 = 4294954514;
              if (v10) {
                goto LABEL_23;
              }
              goto LABEL_24;
            }
            uint64_t v22 = v21(CMBaseObject, @"SampleBufferConsumer", v13, &value);
            if (v22) {
              goto LABEL_31;
            }
            CFArrayAppendValue(Mutable, value);
            if (value)
            {
              CFRelease(value);
              CMTimeValue value = 0;
            }
          }
          if (Count == ++v15) {
            goto LABEL_20;
          }
        }
      }
      uint64_t v22 = FigSignalErrorAt();
LABEL_31:
      uint64_t v12 = v22;
      if (v10) {
LABEL_23:
      }
        CFRelease(v10);
LABEL_24:
      if (Mutable) {
        CFRelease(Mutable);
      }
    }
    else
    {
      uint64_t v12 = 4294954509;
    }
    MEMORY[0x19970E930](*v7);
    return v12;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t favddq_SetProperty(const void *a1, const void *a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1
    && (uint64_t v8 = (void *)DerivedStorage,
        CFTypeID v9 = CFGetTypeID(a1),
        MEMORY[0x19970EE10](&FigAggregateVideoDestinationGetClassID_sRegisterFigAggregateVideoDestinationTypeOnce, RegisterFigAggregateVideoDestinationType), v9 == CMBaseClassGetCFTypeID())&& a2)
  {
    MEMORY[0x19970E910](*v8);
    if (CFEqual(a2, @"VideoConfigID"))
    {
      *((unsigned char *)v8 + 40) = 0;
      CFArrayRef v10 = (char *)(v8 + 5);
      if (a3)
      {
        CFStringGetCString((CFStringRef)a3, v10, 10, 0x600u);
        a3 = 0;
      }
    }
    else
    {
      a3 = 4294954509;
    }
    MEMORY[0x19970E930](*v8, v10);
    return a3;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t favddq_UpdateDataChannelConfigForVideoTarget(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*DerivedStorage);
  if (!a2 || !a6)
  {
    uint64_t v11 = FigSignalErrorAt();
    goto LABEL_17;
  }
  uint64_t v26 = a6;
  if (a4) {
    uint64_t MutableCopy = FigTagCollectionCreateMutableCopy();
  }
  else {
    uint64_t MutableCopy = FigTagCollectionCreateMutable();
  }
  uint64_t v11 = MutableCopy;
  if (!MutableCopy)
  {
    uint64_t v12 = CMBaseObjectGetDerivedStorage();
    CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    CFMutableArrayRef Mutable = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D510]);
    if (!Mutable)
    {
      uint64_t v11 = FigSignalErrorAt();
      if (v11) {
        goto LABEL_17;
      }
      goto LABEL_15;
    }
    CFArrayRef v15 = Mutable;
    uint64_t v16 = DerivedStorage;
    CFArrayAppendValue(Mutable, *(const void **)(v12 + 24));
    CFArrayRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(v12 + 32), a2);
    if (Value)
    {
      uint64_t v18 = Value;
      uint64_t v19 = FigTagMakeWithSInt64Value();
      CMTagValue v21 = v20;
      *(void *)&v27.category = v19;
      v27.CMTimeValue value = v21;
      uint64_t v22 = CMTagCollectionAddTag(0, v27);
      if (v22 || (uint64_t v22 = CMTagCollectionAddTag(0, *MEMORY[0x1E4F21E00]), v22))
      {
        uint64_t v11 = v22;
      }
      else
      {
        uint64_t v11 = FigDataChannelConfigurationAddFigDataQueue(v26, v18, 0, 0, v15);
        if (!v11 && dword_1E93510A8)
        {
          os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          uint64_t v11 = 0;
        }
      }
    }
    else
    {
      uint64_t v11 = 0;
    }
    CFRelease(v15);
    uint64_t DerivedStorage = v16;
    if (!v11)
    {
LABEL_15:
      if (dword_1E93510A8)
      {
        uint64_t v24 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        uint64_t v11 = 0;
      }
    }
  }
LABEL_17:
  MEMORY[0x19970E930](*DerivedStorage);
  return v11;
}

uint64_t favddq_createDataChannelConfigID(uint64_t a1, CFStringRef *a2)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*DerivedStorage);
  if (a2)
  {
    CFStringRef v4 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%s.%d", DerivedStorage + 5, *((unsigned int *)DerivedStorage + 4));
    if (v4)
    {
      uint64_t v5 = 0;
      ++*((_DWORD *)DerivedStorage + 4);
      *a2 = v4;
    }
    else
    {
      uint64_t v5 = 4294948255;
    }
  }
  else
  {
    uint64_t v5 = 4294948256;
  }
  MEMORY[0x19970E930](*DerivedStorage);
  return v5;
}

uint64_t FigCaptionGroupConverterFromSampleBufferStartServer()
{
  uint64_t v3 = 0;
  CFStringRef v4 = &v3;
  uint64_t v5 = 0x2000000000;
  int v6 = 0;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __FigCaptionGroupConverterFromSampleBufferStartServer_block_invoke;
  block[3] = &unk_1E579C810;
  block[4] = &v3;
  if (FigCaptionGroupConverterFromSampleBufferStartServer_sFigCaptionGroupConverterServerSetupOnce != -1) {
    dispatch_once(&FigCaptionGroupConverterFromSampleBufferStartServer_sFigCaptionGroupConverterServerSetupOnce, block);
  }
  uint64_t v0 = *((unsigned int *)v4 + 6);
  _Block_object_dispose(&v3, 8);
  return v0;
}

uint64_t __FigCaptionGroupConverterFromSampleBufferStartServer_block_invoke(uint64_t a1)
{
  uint64_t result = FigXPCServerStart();
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t serverXPCFigCaptionGroupConverter_replyingMessageHandler()
{
  uint64_t OpCode = FigXPCMessageGetOpCode();
  if (OpCode) {
    return OpCode;
  }
  else {
    return 4294951138;
  }
}

uint64_t serverXPCFigCaptionGroupConverter_Callback(uint64_t a1, uint64_t a2, xpc_connection_t *a3)
{
  uint64_t v4 = FigXPCCreateBasicMessage();
  if (!v4)
  {
    uint64_t v4 = FigXPCServerLookupAndRetainAssociatedObject();
    if (!v4) {
      uint64_t v4 = FigSignalErrorAt();
    }
  }
  uint64_t v5 = v4;
  xpc_connection_send_message(*a3, 0);
  FigXPCRelease();
  return v5;
}

double FigCaptionGroupConverterFromSampleBufferServerInit(uint64_t a1)
{
  *(void *)(a1 + 48) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

void FigCaptionGroupConverterFromSampleBufferServerFinalize(void *a1)
{
  FigXPCRelease();
  CFArrayRef v2 = (const void *)a1[4];
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)a1[5];
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (const void *)a1[6];
  if (v4)
  {
    CFRelease(v4);
  }
}

__CFString *FigCaptionGroupConverterFromSampleBufferServerCopyDebugDesc(void *a1)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable(0, 0);
  CFStringAppendFormat(Mutable, 0, @"<FigCaptionGroupConverterFromSampleBufferServerRef %p %@> OID: %lld, Serializer: %@, Converter: %@", a1, a1[4], a1[3], a1[5], a1[6]);
  return Mutable;
}

uint64_t __FigCaptionGroupConverterFromSampleBufferServerGetTypeID_block_invoke()
{
  uint64_t result = _CFRuntimeRegisterClass();
  FigCaptionGroupConverterFromSampleBufferServerGetTypeID_sFigCaptionGroupConverterFromSampleBufferServerInfoID = result;
  return result;
}

uint64_t FigSteeringManifestCreateInProcess(CFAllocatorRef blockAllocator, OpaqueCMBlockBuffer *a2, const __CFURL *a3, int a4, char a5, __CFArray *a6, const __CFDictionary **a7)
{
  CFTypeRef cf = 0;
  CMBlockBufferRef blockBufferOut = 0;
  size_t lengthAtOffsetOut = 0;
  dataPointerOut = 0;
  CFMutableArrayRef v95 = a6;
  uint64_t v96 = 0;
  BYTE1(v96) = a4;
  LOBYTE(v96) = a5;
  uint64_t DataPointer = CMBlockBufferCreateContiguous(blockAllocator, a2, blockAllocator, 0, 0, 0, 0, &blockBufferOut);
  if (DataPointer) {
    goto LABEL_114;
  }
  uint64_t DataPointer = CMBlockBufferGetDataPointer(blockBufferOut, 0, &lengthAtOffsetOut, 0, &dataPointerOut);
  if (DataPointer) {
    goto LABEL_114;
  }
  if (!dataPointerOut || !lengthAtOffsetOut)
  {
    uint64_t DataPointer = FigSignalErrorAt();
LABEL_114:
    uint64_t v40 = DataPointer;
    CFDataRef v12 = 0;
LABEL_116:
    uint64_t MutableCopy = 0;
LABEL_117:
    CFDictionaryRef v21 = 0;
    CFStringRef v18 = 0;
    goto LABEL_88;
  }
  CFDataRef v12 = CFDataCreate(blockAllocator, (const UInt8 *)dataPointerOut, lengthAtOffsetOut);
  if (!v12)
  {
    uint64_t v40 = FigSignalErrorAt();
    goto LABEL_116;
  }
  uint64_t TypeID = FigJSONObjectCreateWithData();
  if (TypeID)
  {
    CFStringRef v85 = @"failed to parse manifest JSON format";
LABEL_120:
    uint64_t v86 = 4294951543;
LABEL_122:
    _SteeringLogError(TypeID, v86, &v95, v85);
    uint64_t MutableCopy = 0;
    CFDictionaryRef v21 = 0;
    CFStringRef v18 = 0;
    uint64_t v40 = 4294951544;
    goto LABEL_88;
  }
  uint64_t TypeID = (uint64_t)cf;
  if (!cf)
  {
    CFStringRef v85 = @"manifest JSON parser returned NULL";
    goto LABEL_120;
  }
  CFTypeID v14 = CFGetTypeID(cf);
  uint64_t TypeID = CFDictionaryGetTypeID();
  if (v14 != TypeID)
  {
    CFStringRef v85 = @"Steering Manifest: manifest JSON object not dictionary";
    uint64_t v86 = 4294951542;
    goto LABEL_122;
  }
  CFIndex Count = CFDictionaryGetCount((CFDictionaryRef)cf);
  uint64_t MutableCopy = CFDictionaryCreateMutableCopy(blockAllocator, Count, (CFDictionaryRef)cf);
  if (!MutableCopy)
  {
    uint64_t v40 = FigSignalErrorAt();
    goto LABEL_117;
  }
  CFStringRef Value = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)cf, @"RELOAD-URI");
  CFStringRef v18 = Value;
  if (Value)
  {
    CFTypeID v19 = CFGetTypeID(Value);
    if (v19 == CFStringGetTypeID())
    {
      CFStringRef v18 = (const __CFString *)CFURLCreateWithString(blockAllocator, v18, a3);
      if (!v18)
      {
        uint64_t v40 = FigSignalErrorAt();
        goto LABEL_87;
      }
      CFDictionarySetValue(MutableCopy, @"RELOAD-URI", v18);
    }
    else
    {
      CFStringRef v18 = 0;
    }
  }
  CFDictionaryRef Copy = CFDictionaryCreateCopy(blockAllocator, MutableCopy);
  CFDictionaryRef v21 = Copy;
  if (!Copy)
  {
    uint64_t v40 = FigSignalErrorAt();
    goto LABEL_88;
  }
  int v90 = a4;
  uint64_t valuePtr = 0;
  uint64_t IsFloatType = (uint64_t)CFDictionaryGetValue(Copy, @"VERSION");
  uint64_t v91 = MutableCopy;
  CFStringRef v92 = v18;
  uint64_t v93 = a7;
  if (!IsFloatType)
  {
    CFStringRef v87 = @"Steering Manifest: missing VERSION";
LABEL_130:
    uint64_t v88 = 4294951541;
LABEL_146:
    _SteeringLogError(IsFloatType, v88, &v95, v87);
    uint64_t v40 = 4294951544;
    goto LABEL_82;
  }
  CFNumberRef v23 = (const __CFNumber *)IsFloatType;
  CFTypeID v24 = CFGetTypeID((CFTypeRef)IsFloatType);
  uint64_t IsFloatType = CFNumberGetTypeID();
  if (v24 != IsFloatType)
  {
    CFStringRef v87 = @"Steering Manifest: invalid VERSION data type";
LABEL_145:
    uint64_t v88 = 4294951542;
    goto LABEL_146;
  }
  uint64_t IsFloatType = CFNumberIsFloatType(v23);
  if (IsFloatType)
  {
    CFStringRef v87 = @"Steering Manifest: VERSION is not an integer number";
    goto LABEL_145;
  }
  uint64_t IsFloatType = CFNumberGetValue(v23, kCFNumberCFIndexType, &valuePtr);
  if (valuePtr != 1)
  {
    CFStringRef v87 = @"Steering Manifest: VERSION number must be 1";
    goto LABEL_145;
  }
  uint64_t IsFloatType = (uint64_t)CFDictionaryGetValue(v21, @"TTL");
  if (!IsFloatType)
  {
    CFStringRef v87 = @"Steering Manifest: missing TTL";
    goto LABEL_130;
  }
  CFTypeID v25 = CFGetTypeID((CFTypeRef)IsFloatType);
  uint64_t IsFloatType = CFNumberGetTypeID();
  if (v25 != IsFloatType)
  {
    CFStringRef v87 = @"Steering Manifest: invalid TTL data type";
    goto LABEL_145;
  }
  uint64_t v26 = CFDictionaryGetValue(v21, @"RELOAD-URI");
  if (v26)
  {
    CFTypeID v27 = CFGetTypeID(v26);
    uint64_t IsFloatType = CFURLGetTypeID();
    if (v27 != IsFloatType)
    {
      CFStringRef v87 = @"Steering Manifest: invalid RELOAD-URI data type";
      goto LABEL_145;
    }
  }
  CMTagValue v28 = CFDictionaryGetValue(v21, @"UNIVERSAL");
  if (v28)
  {
    CFTypeID v29 = CFGetTypeID(v28);
    uint64_t IsFloatType = CFBooleanGetTypeID();
    if (v29 != IsFloatType)
    {
      CFStringRef v87 = @"Steering Manifest: invalid UNIVERSAL data type";
      goto LABEL_145;
    }
  }
  CFArrayRef v30 = (const __CFArray *)CFDictionaryGetValue(v21, @"PATHWAY-PRIORITY");
  uint64_t v31 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  CFDictionaryRef theDict = v21;
  if (!v30)
  {
    _SteeringLogError(0, 4294951541, &v95, @"Steering Manifest: missing PATHWAY-PRIORITY");
LABEL_134:
    uint64_t v40 = 4294951544;
    goto LABEL_40;
  }
  CFArrayRef v32 = v30;
  CFTypeID v33 = CFGetTypeID(v30);
  CFTypeID v34 = CFArrayGetTypeID();
  if (v33 != v34)
  {
    _SteeringLogError(v34, 4294951542, &v95, @"Steering Manifest: invalid PATHWAY-PRIORITY data type");
    goto LABEL_134;
  }
  CFMutableSetRef Mutable = CFSetCreateMutable(*v31, 0, MEMORY[0x1E4F1D548]);
  if (!Mutable)
  {
    uint64_t v40 = FigSignalErrorAt();
    if (v40) {
      goto LABEL_40;
    }
    goto LABEL_41;
  }
  CFSetRef v36 = Mutable;
  CFIndex v37 = CFArrayGetCount(v32);
  if (v37 < 1)
  {
    _SteeringLogError(v37, 4294951541, &v95, @"Steering Manifest: PATHWAY-PRIORITY MUST contain at least one Pathway ID");
    goto LABEL_107;
  }
  CFIndex v38 = v37;
  CFIndex v39 = 0;
  uint64_t v40 = 0;
  while (1)
  {
    CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v32, v39);
    if (!ValueAtIndex)
    {
      uint64_t v40 = FigSignalErrorAt();
      goto LABEL_39;
    }
    CFStringRef v42 = ValueAtIndex;
    CFTypeID v43 = CFGetTypeID(ValueAtIndex);
    uint64_t Length = CFStringGetTypeID();
    if (v43 != Length)
    {
      CFStringRef v84 = @"Steering Pathway: invalid Pathway ID data type in PATHWAY-PRIORITY";
      goto LABEL_106;
    }
    uint64_t Length = CFStringGetLength(v42);
    if (Length <= 0) {
      break;
    }
    uint64_t v45 = CFSetContainsValue(v36, v42);
    if (v45)
    {
      _SteeringLogError(v45, 4294951542, &v95, @"Steering Manifest: duplicated Pathway IDs in PATHWAY-PRIORITY");
      uint64_t v40 = 4294951544;
LABEL_37:
      if (!BYTE1(v96)) {
        goto LABEL_39;
      }
      goto LABEL_38;
    }
    CFSetAddValue(v36, v42);
    if (v40) {
      goto LABEL_37;
    }
LABEL_38:
    if (v38 == ++v39) {
      goto LABEL_39;
    }
  }
  CFStringRef v84 = @"Steering Pathway: empty Pathway ID in PATHWAY-PRIORITY";
LABEL_106:
  _SteeringLogError(Length, 4294951542, &v95, v84);
LABEL_107:
  uint64_t v40 = 4294951544;
LABEL_39:
  CFRelease(v36);
  CFDictionaryRef v21 = theDict;
  if (!v40)
  {
LABEL_41:
    CFDataRef v89 = v12;
    long long v46 = CFDictionaryGetValue(v21, @"PATHWAY-CLONES");
    if (!v46)
    {
      uint64_t v40 = 0;
      CFStringRef v18 = v92;
      __int16 v82 = v93;
      goto LABEL_86;
    }
    CFArrayRef v47 = v46;
    CFAllocatorRef v48 = *v31;
    CFMutableSetRef v49 = CFSetCreateMutable(*v31, 0, MEMORY[0x1E4F1D548]);
    if (v49)
    {
      uint64_t v50 = v49;
      CFMutableSetRef v51 = CFSetCreateMutable(v48, 0, MEMORY[0x1E4F1D548]);
      if (v51)
      {
        CFSetRef v52 = v51;
        CFTypeID v53 = CFGetTypeID(v47);
        CFTypeID v54 = CFArrayGetTypeID();
        if (v53 == v54)
        {
          CFIndex v55 = CFArrayGetCount((CFArrayRef)v47);
          if (v55 >= 1)
          {
            CFIndex v56 = v55;
            CFIndex v57 = 0;
            uint64_t v40 = 0;
            while (1)
            {
              CFDictionaryRef v58 = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)v47, v57);
              if (!v58)
              {
                uint64_t v40 = FigSignalErrorAt();
                goto LABEL_81;
              }
              CFDictionaryRef v59 = v58;
              CFTypeID v60 = CFGetTypeID(v58);
              CFTypeID v61 = CFDictionaryGetTypeID();
              if (v60 != v61)
              {
                _SteeringLogError(v61, 4294951542, &v95, @"Steering Pathway: invalid Pathway Clone data type in PATHWAY-CLONES");
                goto LABEL_112;
              }
              uint64_t v62 = CFDictionaryGetValue(v59, @"BASE-ID");
              if (v62)
              {
                uint64_t v63 = v62;
                CFTypeID v64 = CFGetTypeID(v62);
                CFTypeID v65 = CFStringGetTypeID();
                if (v64 != v65)
                {
                  _SteeringLogError(v65, 4294951542, &v95, @"Steering Pathway: invalid BASE-ID data type in Pathway Clone");
                  goto LABEL_112;
                }
                CFSetAddValue(v50, v63);
              }
              else
              {
                uint64_t v40 = FigSignalErrorAt();
                if (!BYTE1(v96)) {
                  goto LABEL_81;
                }
              }
              uint64_t v66 = CFDictionaryGetValue(v59, @"ID");
              if (v66) {
                break;
              }
              uint64_t v40 = FigSignalErrorAt();
              if (!BYTE1(v96)) {
                goto LABEL_81;
              }
LABEL_63:
              CFDictionaryRef v72 = (const __CFDictionary *)CFDictionaryGetValue(v59, @"URI-REPLACEMENT");
              if (!v72)
              {
                uint64_t v40 = FigSignalErrorAt();
LABEL_77:
                if (!BYTE1(v96)) {
                  goto LABEL_81;
                }
                goto LABEL_78;
              }
              CFDictionaryRef v73 = v72;
              CFTypeID v74 = CFGetTypeID(v72);
              CFTypeID v75 = CFDictionaryGetTypeID();
              if (v74 != v75)
              {
                _SteeringLogError(v75, 4294951542, &v95, @"Steering Pathway: invalid URI-REPLACEMENT data type in Pathway Clone");
                goto LABEL_112;
              }
              CMTimeValue v76 = CFDictionaryGetValue(v73, @"HOST");
              if (v76)
              {
                CFTypeID v77 = CFGetTypeID(v76);
                CFTypeID v78 = CFStringGetTypeID();
                if (v77 != v78)
                {
                  _SteeringLogError(v78, 4294951542, &v95, @"Steering Pathway: invalid HOST data type in URI-REPLACEMENT");
                  goto LABEL_112;
                }
              }
              unsigned int v79 = CFDictionaryGetValue(v73, @"PARAMS");
              if (v79)
              {
                uint64_t v40 = validateStringToStringDictionary(v79, (uint64_t)"Pathway Clone PARAMS", &v95);
                if (v40)
                {
                  if (!BYTE1(v96)) {
                    goto LABEL_81;
                  }
                }
              }
              uint64_t v80 = CFDictionaryGetValue(v73, @"PER-VARIANT-URIS");
              if (v80)
              {
                uint64_t v40 = validateStringToStringDictionary(v80, (uint64_t)"Pathway Clone PER-VARIANT-URIS", &v95);
                if (v40)
                {
                  if (!BYTE1(v96)) {
                    goto LABEL_81;
                  }
                }
              }
              uint64_t v81 = CFDictionaryGetValue(v73, @"PER-RENDITION-URIS");
              if (v81)
              {
                uint64_t v40 = validateStringToStringDictionary(v81, (uint64_t)"Pathway Clone PER-RENDITION-URIS", &v95);
                if (v40) {
                  goto LABEL_77;
                }
              }
LABEL_78:
              if (v56 == ++v57) {
                goto LABEL_81;
              }
            }
            uint64_t v67 = v66;
            CFTypeID v68 = CFGetTypeID(v66);
            CFTypeID v69 = CFStringGetTypeID();
            if (v68 != v69)
            {
              _SteeringLogError(v69, 4294951542, &v95, @"Steering Pathway: invalid ID data type in Pathway Clone");
              goto LABEL_112;
            }
            uint64_t v70 = CFSetContainsValue(v52, v67);
            if (v70)
            {
              _SteeringLogError(v70, 4294951542, &v95, @"Steering Manifest: duplicated IDs in Pathway Clone");
            }
            else
            {
              uint64_t v71 = CFSetContainsValue(v50, v67);
              if (!v71)
              {
LABEL_62:
                CFSetAddValue(v52, v67);
                goto LABEL_63;
              }
              _SteeringLogError(v71, 4294951542, &v95, @"Steering Manifest: Pathway Clone ID defined after use");
            }
            uint64_t v40 = 4294951544;
            if (!BYTE1(v96)) {
              goto LABEL_81;
            }
            goto LABEL_62;
          }
          uint64_t v40 = 0;
        }
        else
        {
          _SteeringLogError(v54, 4294951542, &v95, @"Steering Manifest: invalid PATHWAY-CLONES data type");
LABEL_112:
          uint64_t v40 = 4294951544;
        }
LABEL_81:
        CFRelease(v50);
        CFRelease(v52);
        CFDataRef v12 = v89;
        CFDictionaryRef v21 = theDict;
        goto LABEL_82;
      }
      uint64_t v40 = FigSignalErrorAt();
      CFRelease(v50);
    }
    else
    {
      uint64_t v40 = FigSignalErrorAt();
    }
    CFDataRef v12 = v89;
    goto LABEL_82;
  }
LABEL_40:
  if (BYTE1(v96)) {
    goto LABEL_41;
  }
LABEL_82:
  CFStringRef v18 = v92;
  __int16 v82 = v93;
  if (v90)
  {
    uint64_t MutableCopy = v91;
    goto LABEL_86;
  }
  uint64_t MutableCopy = v91;
  if (!v40)
  {
LABEL_86:
    *__int16 v82 = v21;
LABEL_87:
    CFDictionaryRef v21 = 0;
  }
LABEL_88:
  if (cf) {
    CFRelease(cf);
  }
  if (v18) {
    CFRelease(v18);
  }
  if (v12) {
    CFRelease(v12);
  }
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  if (v21) {
    CFRelease(v21);
  }
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  return v40;
}

void _SteeringLogError(uint64_t a1, uint64_t a2, CFMutableArrayRef *a3, CFStringRef format, ...)
{
  va_start(va, format);
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (format) {
    CFStringRef v6 = CFStringCreateWithFormatAndArguments((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, format, va);
  }
  else {
    CFStringRef v6 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], "Format Error", 0x8000100u);
  }
  CFStringRef v7 = v6;
  FigSignalErrorAt();
  if (*a3)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v5, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      CFTypeID v9 = Mutable;
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      CFDateRef v11 = CFDateCreate(v5, Current);
      if (v11)
      {
        CFDateRef v12 = v11;
        CFDictionarySetValue(v9, @"date", v11);
        CFRelease(v12);
      }
      CFDictionarySetValue(v9, @"domain", @"CoreMediaErrorDomain");
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt32();
      if (v7) {
        CFDictionarySetValue(v9, @"comment", v7);
      }
      if (*a3) {
        CFArrayAppendValue(*a3, v9);
      }
      CFRelease(v9);
    }
  }
  if (v7) {
    CFRelease(v7);
  }
}

CFNumberRef FigSteeringManifestGetVersion()
{
  uint64_t valuePtr = 0;
  CFNumberRef result = (const __CFNumber *)FigCFDictionaryGetValue();
  if (result)
  {
    CFNumberGetValue(result, kCFNumberCFIndexType, &valuePtr);
    return (const __CFNumber *)valuePtr;
  }
  return result;
}

CFArrayRef FigSteeringManifestGetPathwayCount()
{
  CFArrayRef result = (const __CFArray *)FigCFDictionaryGetValue();
  if (result)
  {
    return (const __CFArray *)CFArrayGetCount(result);
  }
  return result;
}

double FigSteeringManifestGetTTL()
{
  double valuePtr = 0.0;
  CFNumberRef Value = (const __CFNumber *)FigCFDictionaryGetValue();
  if (!Value) {
    return 0.0;
  }
  CFNumberGetValue(Value, kCFNumberDoubleType, &valuePtr);
  return valuePtr;
}

uint64_t FigSteeringManifestGetReloadURI()
{
  return FigCFDictionaryGetValue();
}

CFBooleanRef FigSteeringManifestIsUniversal()
{
  CFBooleanRef result = (const __CFBoolean *)FigCFDictionaryGetValue();
  if (result)
  {
    return (const __CFBoolean *)CFBooleanGetValue(result);
  }
  return result;
}

uint64_t FigSteeringManifestGetPathwayPriorityList()
{
  return FigCFDictionaryGetValue();
}

uint64_t FigSteeringManifestGetPathwayClones()
{
  return FigCFDictionaryGetValue();
}

uint64_t FigPathwayCloneGetBaseID()
{
  return FigCFDictionaryGetValue();
}

uint64_t FigPathwayCloneGetID()
{
  return FigCFDictionaryGetValue();
}

uint64_t FigPathwayCloneGetURIReplacementHost()
{
  FigCFDictionaryGetValue();

  return FigCFDictionaryGetValue();
}

uint64_t FigPathwayCloneGetURIReplacementParams()
{
  FigCFDictionaryGetValue();

  return FigCFDictionaryGetValue();
}

uint64_t FigPathwayCloneGetURIReplacementPerVariantURIs()
{
  FigCFDictionaryGetValue();

  return FigCFDictionaryGetValue();
}

uint64_t FigPathwayCloneGetURIReplacementPerRenditionURIs()
{
  FigCFDictionaryGetValue();

  return FigCFDictionaryGetValue();
}

uint64_t FigPathwayCloneEquals()
{
  FigCFDictionaryGetValue();
  FigCFDictionaryGetValue();
  uint64_t result = FigCFEqual();
  if (result)
  {
    FigCFDictionaryGetValue();
    FigCFDictionaryGetValue();
    uint64_t result = FigCFEqual();
    if (result)
    {
      FigCFDictionaryGetValue();
      FigCFDictionaryGetValue();
      FigCFDictionaryGetValue();
      FigCFDictionaryGetValue();
      uint64_t result = FigCFEqual();
      if (result)
      {
        FigCFDictionaryGetValue();
        FigCFDictionaryGetValue();
        FigCFDictionaryGetValue();
        FigCFDictionaryGetValue();
        uint64_t result = FigCFEqual();
        if (result)
        {
          FigCFDictionaryGetValue();
          FigCFDictionaryGetValue();
          FigCFDictionaryGetValue();
          FigCFDictionaryGetValue();
          uint64_t result = FigCFEqual();
          if (result)
          {
            FigCFDictionaryGetValue();
            FigCFDictionaryGetValue();
            FigCFDictionaryGetValue();
            FigCFDictionaryGetValue();
            return FigCFEqual() != 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t FigSteeringManifestCreate(const __CFAllocator *a1, OpaqueCMBlockBuffer *a2, const __CFURL *a3, int a4, char a5, __CFArray *a6, const __CFDictionary **a7)
{
  if (_os_feature_enabled_impl())
  {
    return FigSteeringManifestCreateRemote();
  }
  else
  {
    return FigSteeringManifestCreateInProcess(a1, a2, a3, a4, a5, a6, a7);
  }
}

uint64_t validateStringToStringDictionary(const void *a1, uint64_t a2, CFMutableArrayRef *a3)
{
  unsigned int v10 = 0;
  context[0] = &v10;
  context[1] = a2;
  void context[2] = a3;
  CFTypeID v6 = CFGetTypeID(a1);
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (v6 == TypeID)
  {
    CFDictionaryApplyFunction((CFDictionaryRef)a1, (CFDictionaryApplierFunction)validateStringToStringDictionary_callback, context);
    return v10;
  }
  else
  {
    _SteeringLogError(TypeID, 4294951542, a3, @"%s: invalid data type", a2);
    return 4294951544;
  }
}

void validateStringToStringDictionary_callback(const void *a1, const void *a2, uint64_t a3)
{
  if (!**(_DWORD **)a3)
  {
    CFTypeID v5 = CFGetTypeID(a1);
    CFTypeID TypeID = CFStringGetTypeID();
    if (v5 == TypeID)
    {
      CFTypeID v7 = CFGetTypeID(a2);
      CFTypeID v8 = CFStringGetTypeID();
      if (v7 == v8) {
        return;
      }
      _SteeringLogError(v8, 4294951542, *(CFMutableArrayRef **)(a3 + 16), @"%s: invalid dictionary value data type", *(void *)(a3 + 8));
    }
    else
    {
      _SteeringLogError(TypeID, 4294951542, *(CFMutableArrayRef **)(a3 + 16), @"%s: invalid dictionary key data type", *(void *)(a3 + 8));
    }
    **(_DWORD **)a3 = -15752;
  }
}

uint64_t FigWebVTTCaptionGroupConverterFromSampleBufferCreate(uint64_t a1, uint64_t a2, void *a3)
{
  if (a3 && a1 && *(void *)a1 && *(void *)(a1 + 8))
  {
    FigCaptionGroupConverterFromSampleBufferGetClassID();
    uint64_t v5 = CMDerivedObjectCreate();
    if (!v5)
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      *(_OWORD *)uint64_t DerivedStorage = *(_OWORD *)a1;
      uint64_t v5 = WebVTTSampleBufferParserCreate((void *)(DerivedStorage + 16));
      if (!v5) {
        *a3 = 0;
      }
    }
    return v5;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void fcgcfs_webvtt_finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  WebVTTSampleBufferParserDestroy(*(void **)(DerivedStorage + 16));
  uint64_t v1 = *(const void **)(DerivedStorage + 24);
  if (v1)
  {
    CFRelease(v1);
    *(void *)(DerivedStorage + 24) = 0;
  }
}

__CFString *fcgcfs_webvtt_copyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<FigWebVTTCaptionGroupConverterFromSampleBufferf %p>", a1);
  return Mutable;
}

uint64_t fcgcfs_webvtt_copyProperty(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a4 && a1 && (uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage()) != 0)
  {
    uint64_t v6 = DerivedStorage;
    if (FigCFEqual())
    {
      CFTypeID v7 = *(const void **)(v6 + 24);
      if (v7)
      {
        CFTypeRef v8 = CFRetain(v7);
        uint64_t result = 0;
        *a4 = v8;
      }
      else
      {
        return 4294954513;
      }
    }
    else
    {
      return 4294954512;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t fcgcfs_webvtt_setProperty(uint64_t a1, uint64_t a2, const void *a3)
{
  if (a1)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (DerivedStorage)
    {
      uint64_t v5 = DerivedStorage;
      if (!FigCFEqual()) {
        return 4294954512;
      }
      if (!a3)
      {
        CFTypeID v7 = *(const void **)(v5 + 24);
        *(void *)(v5 + 24) = 0;
        if (!v7) {
          return 0;
        }
        goto LABEL_7;
      }
      CFTypeID v6 = CFGetTypeID(a3);
      if (v6 == CFArrayGetTypeID())
      {
        CFTypeID v7 = *(const void **)(v5 + 24);
        *(void *)(v5 + 24) = a3;
        CFRetain(a3);
        if (!v7) {
          return 0;
        }
LABEL_7:
        CFRelease(v7);
        return 0;
      }
    }
  }

  return FigSignalErrorAt();
}

uint64_t fcgcfs_webvtt_addSampleBuffer(uint64_t a1, opaqueCMSampleBuffer *a2)
{
  uint64_t v198 = *MEMORY[0x1E4F143B8];
  CFTypeRef v187 = 0;
  CFTypeRef v188 = 0;
  long long v3 = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 16);
  *(_OWORD *)&v186.start.CMTimeValue value = *MEMORY[0x1E4F1FA20];
  *(_OWORD *)&v186.start.CMTimeEpoch epoch = v3;
  *(_OWORD *)&v186.duration.CMTimeScale timescale = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 32);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage
    || !a2
    || (FormatDescription = CMSampleBufferGetFormatDescription(a2)) == 0
    || (CFTypeID v6 = FormatDescription, CMFormatDescriptionGetMediaType(FormatDescription) != 1952807028)
    && CMFormatDescriptionGetMediaType(v6) != 1935832172
    || (FourCharCode MediaSubType = CMFormatDescriptionGetMediaSubType(v6), MediaSubType != 1937142900)
    && MediaSubType != 2004251764
    && MediaSubType != 2021028980
    || !*(void *)DerivedStorage
    || !*(void *)(DerivedStorage + 8))
  {
    uint64_t v8 = FigSignalErrorAt();
    goto LABEL_255;
  }
  if (!CMSampleBufferGetNumSamples(a2))
  {
LABEL_272:
    uint64_t v30 = 0;
    goto LABEL_256;
  }
  memset(&v185, 0, sizeof(v185));
  CMSampleBufferGetOutputPresentationTimeStamp(&v185, a2);
  memset(&v184, 0, sizeof(v184));
  CMSampleBufferGetOutputDuration(&v184, a2);
  uint64_t v8 = WebVTTCreateAttributedStringArrayFromSampleBuffer(*(unint64_t **)(DerivedStorage + 16), a2, *(const __CFArray **)(DerivedStorage + 24), &v187);
  if (v8)
  {
LABEL_255:
    uint64_t v30 = v8;
LABEL_256:
    CFMutableDictionaryRef Mutable = 0;
LABEL_257:
    CFDateRef v11 = 0;
LABEL_258:
    int v132 = 0;
    goto LABEL_259;
  }
  if (!v187)
  {
    CFRange effectiveRange = *(CFRange *)&v184.value;
    *(void *)&long long v182 = v184.epoch;
    CMTime v197 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
    if (CMTimeCompare((CMTime *)&effectiveRange, &v197))
    {
      uint64_t Empty = FigCaptionGroupCreateEmpty();
      CFMutableDictionaryRef Mutable = 0;
      if (Empty)
      {
        uint64_t v30 = Empty;
        CFDateRef v11 = 0;
        int v132 = 0;
      }
      else
      {
        CFDateRef v11 = 0;
        int v132 = 0;
LABEL_253:
        CFRange effectiveRange = *(CFRange *)&v185.value;
        *(void *)&long long v182 = v185.epoch;
        CMTime v197 = v184;
        CMTimeRangeMake(&v186, (CMTime *)&effectiveRange, &v197);
        uint64_t v30 = 0;
      }
      goto LABEL_259;
    }
    goto LABEL_272;
  }
  CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (!Mutable)
  {
    uint64_t v30 = FigSignalErrorAt();
    goto LABEL_257;
  }
  CFDateRef v11 = CFDataCreateMutable(v9, 0);
  if (!v11 || (CFMutableDataRef v12 = CFDataCreateMutable(v9, 0)) == 0)
  {
    uint64_t v30 = FigSignalErrorAt();
    goto LABEL_258;
  }
  CFDataRef theData = v12;
  uint64_t v157 = DerivedStorage;
  CFIndex Count = CFArrayGetCount(v187);
  if (!Count) {
    goto LABEL_248;
  }
  CFIndex v13 = 0;
  key = (void *)*MEMORY[0x1E4F1F538];
  CFStringRef v169 = (const __CFString *)*MEMORY[0x1E4F1F528];
  CFStringRef v164 = (const __CFString *)*MEMORY[0x1E4F1F518];
  CFStringRef v147 = (const __CFString *)*MEMORY[0x1E4F1F510];
  CFStringRef v141 = (const __CFString *)*MEMORY[0x1E4F1F520];
  uint64_t v163 = *MEMORY[0x1E4F1FF58];
  __int16 v168 = (void *)*MEMORY[0x1E4F1F548];
  uint64_t v162 = *MEMORY[0x1E4F1FEE8];
  CFStringRef theString2 = (const __CFString *)*MEMORY[0x1E4F1F900];
  CFStringRef v178 = (const __CFString *)*MEMORY[0x1E4F1F8F8];
  uint64_t v159 = *MEMORY[0x1E4F1FF38];
  uint64_t v161 = *MEMORY[0x1E4F20018];
  uint64_t v160 = *MEMORY[0x1E4F20048];
  __int16 v166 = (void *)*MEMORY[0x1E4F1F720];
  uint64_t v156 = *MEMORY[0x1E4F20098];
  unint64_t v155 = (void *)*MEMORY[0x1E4F1F728];
  unint64_t v154 = (void *)*MEMORY[0x1E4F1F700];
  unint64_t v153 = (void *)*MEMORY[0x1E4F1F5C0];
  CFStringRef v146 = (const __CFString *)*MEMORY[0x1E4F1F790];
  CFStringRef v143 = (const __CFString *)*MEMORY[0x1E4F1F788];
  uint64_t v152 = (void *)*MEMORY[0x1E4F1F668];
  uint64_t v151 = (void *)*MEMORY[0x1E4F1F660];
  uint64_t v150 = (void *)*MEMORY[0x1E4F1F5B8];
  CFStringRef v145 = (const __CFString *)*MEMORY[0x1E4F1F778];
  CFStringRef v142 = (const __CFString *)*MEMORY[0x1E4F1F770];
  CFStringRef v140 = (const __CFString *)*MEMORY[0x1E4F1F768];
  uint64_t v139 = *MEMORY[0x1E4F20008];
  uint64_t v149 = *MEMORY[0x1E4F20070];
  uint64_t v148 = *MEMORY[0x1E4F1FFB8];
  uint64_t v138 = *MEMORY[0x1E4F20090];
  uint64_t v144 = *MEMORY[0x1E4F1FF20];
  CFTypeID v14 = (const void *)*MEMORY[0x1E4F1F6B8];
  v180 = (void *)*MEMORY[0x1E4F1F6C0];
  uint64_t v177 = *MEMORY[0x1E4F1FF28];
  v176 = (void *)*MEMORY[0x1E4F1F6D0];
  uint64_t v171 = *MEMORY[0x1E4F1FF30];
  uint64_t v165 = *MEMORY[0x1E4F201C0];
  v172 = v11;
  CFTypeRef v173 = Mutable;
  do
  {
    CFIndex v179 = v13;
    CFAttributedStringRef ValueAtIndex = (const __CFAttributedString *)CFArrayGetValueAtIndex(v187, v13);
    v189.size_t length = 0;
    CFTypeRef v190 = 0;
    v189.CFIndex location = 0;
    CFIndex Length = CFAttributedStringGetLength(ValueAtIndex);
    if (!ValueAtIndex)
    {
      uint64_t v18 = FigSignalErrorAt();
LABEL_235:
      uint64_t v30 = v18;
LABEL_37:
      if (v190) {
        CFRelease(v190);
      }
      CFDateRef v11 = v172;
      CFMutableDictionaryRef Mutable = v173;
      if (!v30)
      {
        CFTypeRef v31 = 0;
        goto LABEL_227;
      }
      uint64_t DerivedStorage = v157;
      int v132 = theData;
      goto LABEL_259;
    }
    CFIndex v17 = Length;
    if (Length < 1)
    {
      uint64_t v30 = 0;
      goto LABEL_37;
    }
    uint64_t v18 = FigCaptionDataCreateMutable();
    if (v18) {
      goto LABEL_235;
    }
    CFTypeRef v19 = v190;
    CFStringRef String = CFAttributedStringGetString(ValueAtIndex);
    uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v21) {
      uint64_t v22 = v21;
    }
    else {
      uint64_t v22 = 0;
    }
    CFNumberRef v23 = *(uint64_t (**)(CFTypeRef, CFStringRef))(v22 + 16);
    if (!v23)
    {
      uint64_t v30 = 4294954514;
      goto LABEL_37;
    }
    uint64_t v18 = v23(v19, String);
    if (v18) {
      goto LABEL_235;
    }
    v197.CMTimeValue value = 0;
    effectiveRange.size_t length = 0;
    effectiveRange.CFIndex location = 0;
    if (!v190)
    {
      uint64_t v25 = FigSignalErrorAt();
      goto LABEL_44;
    }
    CFDictionaryRef Attributes = CFAttributedStringGetAttributes(ValueAtIndex, 0, &effectiveRange);
    CFDictionaryGetValue(Attributes, key);
    if (!FigCFEqual()
      && !FigCFEqual()
      && !FigCFEqual()
      && !FigCFEqual())
    {
      FigCFEqual();
    }
    uint64_t v25 = FigCaptionDynamicStyleCreate();
    if (v25) {
      goto LABEL_44;
    }
    CMTimeValue value = v197.value;
    uint64_t CMBaseObject = FigCaptionDataGetCMBaseObject();
    uint64_t v28 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v28) {
      uint64_t v29 = v28;
    }
    else {
      uint64_t v29 = 0;
    }
    CFArrayRef v32 = *(uint64_t (**)(uint64_t, uint64_t, CMTimeValue))(v29 + 56);
    if (v32)
    {
      uint64_t v25 = v32(CMBaseObject, v163, value);
LABEL_44:
      uint64_t v30 = v25;
      goto LABEL_46;
    }
    uint64_t v30 = 4294954514;
LABEL_46:
    if (v197.value) {
      CFRelease((CFTypeRef)v197.value);
    }
    if (v30) {
      goto LABEL_37;
    }
    double valuePtr = 0.0;
    effectiveRange.size_t length = 0;
    effectiveRange.CFIndex location = 0;
    if (v190)
    {
      CFDictionaryRef v33 = CFAttributedStringGetAttributes(ValueAtIndex, 0, &effectiveRange);
      CGColorSRGB = CFDictionaryGetValue(v33, v168);
      if (CGColorSRGB)
      {
        uint64_t v35 = 0;
        v197.CMTimeValue value = 0;
        *(void *)&v197.CMTimeScale timescale = 0;
        CFSetRef v36 = &v197;
        do
        {
          FigCFArrayGetFloatAtIndex();
          ++v35;
          CFSetRef v36 = (CMTime *)((char *)v36 + 4);
        }
        while (v35 != 4);
        CGColorSRGB = (const void *)FigCreateCGColorSRGB();
        uint64_t v37 = FigCaptionDynamicStyleCreate();
        if (v37) {
          goto LABEL_59;
        }
        double v38 = valuePtr;
        uint64_t v39 = FigCaptionDataGetCMBaseObject();
        uint64_t v40 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v40) {
          uint64_t v41 = v40;
        }
        else {
          uint64_t v41 = 0;
        }
        CFStringRef v42 = *(uint64_t (**)(uint64_t, uint64_t, void))(v41 + 56);
        if (v42)
        {
          uint64_t v37 = v42(v39, v162, *(void *)&v38);
LABEL_59:
          uint64_t v30 = v37;
          goto LABEL_61;
        }
        uint64_t v30 = 4294954514;
      }
      else
      {
        uint64_t v30 = 0;
      }
    }
    else
    {
      uint64_t v30 = FigSignalErrorAt();
      CGColorSRGB = 0;
    }
LABEL_61:
    if (valuePtr != 0.0) {
      CFRelease(*(CFTypeRef *)&valuePtr);
    }
    if (CGColorSRGB) {
      CFRelease(CGColorSRGB);
    }
    if (v30) {
      goto LABEL_37;
    }
    CFTypeRef v43 = v190;
    double valuePtr = 0.0;
    v197.CMTimeValue value = 0;
    effectiveRange.size_t length = 0;
    effectiveRange.CFIndex location = 0;
    FigGeometryDimensionMake();
    if (!v43)
    {
      uint64_t v48 = FigSignalErrorAt();
      goto LABEL_80;
    }
    CFDictionaryRef v44 = CFAttributedStringGetAttributes(ValueAtIndex, 0, &effectiveRange);
    CFDictionaryRef v45 = (const __CFDictionary *)CFDictionaryGetValue(v44, (const void *)*MEMORY[0x1E4F1F6D8]);
    if (v45)
    {
      CFStringRef v46 = (const __CFString *)CFDictionaryGetValue(v45, (const void *)*MEMORY[0x1E4F1F918]);
      if (v46)
      {
        CFStringRef v47 = v46;
        if (CFStringCompare(v46, theString2, 0))
        {
          if (CFStringCompare(v47, v178, 0) && CFStringCompare(v47, (CFStringRef)*MEMORY[0x1E4F1F910], 0)) {
            CFStringCompare(v47, (CFStringRef)*MEMORY[0x1E4F1F908], 0);
          }
        }
      }
      uint64_t v48 = FigCaptionRubyReserveCreate();
      if (v48) {
        goto LABEL_80;
      }
      uint64_t v48 = FigCaptionDynamicStyleCreate();
      if (v48) {
        goto LABEL_80;
      }
      CMTimeValue v49 = v197.value;
      uint64_t v50 = FigCaptionDataGetCMBaseObject();
      uint64_t v51 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v51) {
        uint64_t v52 = v51;
      }
      else {
        uint64_t v52 = 0;
      }
      CFTypeID v53 = *(uint64_t (**)(uint64_t, uint64_t, CMTimeValue))(v52 + 56);
      if (v53)
      {
        uint64_t v48 = v53(v50, v159, v49);
LABEL_80:
        uint64_t v30 = v48;
        goto LABEL_82;
      }
      uint64_t v30 = 4294954514;
    }
    else
    {
      uint64_t v30 = 0;
    }
LABEL_82:
    if (v197.value) {
      CFRelease((CFTypeRef)v197.value);
    }
    if (valuePtr != 0.0) {
      CFRelease(*(CFTypeRef *)&valuePtr);
    }
    if (v30) {
      goto LABEL_37;
    }
    CFTypeRef v191 = 0;
    CFTypeRef v192 = 0;
    if (v190)
    {
      uint64_t v54 = FigCaptionRegionCreateMutable();
      if (v54) {
        goto LABEL_172;
      }
      uint64_t v55 = FigCaptionRegionGetCMBaseObject();
      uint64_t v56 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v56) {
        uint64_t v57 = v56;
      }
      else {
        uint64_t v57 = 0;
      }
      CFDictionaryRef v58 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v57 + 56);
      if (!v58) {
        goto LABEL_173;
      }
      uint64_t v54 = v58(v55, v161, v160);
      if (v54) {
        goto LABEL_172;
      }
      effectiveRange.size_t length = 0;
      effectiveRange.CFIndex location = 0;
      CFDictionaryRef v59 = CFAttributedStringGetAttributes(ValueAtIndex, 0, &effectiveRange);
      CFDictionaryGetValue(v59, v166);
      if (!FigCFEqual()) {
        FigCFEqual();
      }
      uint64_t v54 = FigCaptionDynamicStyleCreate();
      if (v54) {
        goto LABEL_172;
      }
      CFTypeRef v60 = v191;
      uint64_t v61 = FigCaptionRegionGetCMBaseObject();
      uint64_t v62 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v63 = v62 ? v62 : 0;
      CFTypeID v64 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef))(v63 + 56);
      if (!v64) {
        goto LABEL_173;
      }
      uint64_t v54 = v64(v61, v156, v60);
      if (v54)
      {
LABEL_172:
        uint64_t v30 = v54;
        goto LABEL_174;
      }
      double v195 = 50.0;
      double valuePtr = 100.0;
      double v194 = 100.0;
      int v193 = 0;
      uint64_t v158 = (uint64_t)v192;
      if (!v192) {
        goto LABEL_243;
      }
      CFNumberRef v65 = (const __CFNumber *)CFDictionaryGetValue(v59, v155);
      if (v65)
      {
        CFNumberGetValue(v65, kCFNumberCGFloatType, &valuePtr);
        if (valuePtr < 0.0) {
          goto LABEL_243;
        }
      }
      CFNumberRef v66 = (const __CFNumber *)CFDictionaryGetValue(v59, v154);
      CFStringRef v67 = (const __CFString *)CFDictionaryGetValue(v59, key);
      CFStringRef v68 = (const __CFString *)CFDictionaryGetValue(v59, v153);
      CFStringRef v69 = v68;
      if (v66)
      {
        CFNumberGetValue(v66, kCFNumberCGFloatType, &v195);
        if (v195 < 0.0) {
          goto LABEL_243;
        }
      }
      else
      {
        if (!v67)
        {
          if (!v68) {
            goto LABEL_124;
          }
          goto LABEL_108;
        }
        if (CFStringCompare(v67, v147, 0))
        {
          if (CFStringCompare(v67, v164, 0))
          {
            if (CFEqual(v67, v141)) {
              double v195 = 100.0;
            }
          }
          else
          {
            double v195 = 50.0;
          }
        }
        else
        {
          double v195 = 0.0;
        }
      }
      if (!v69)
      {
        if (!v67) {
          goto LABEL_124;
        }
        if (CFEqual(v67, v147)) {
          goto LABEL_124;
        }
        if (CFEqual(v67, v164)) {
          goto LABEL_124;
        }
        if (CFEqual(v67, v141)) {
          goto LABEL_124;
        }
        CFComparisonResult v72 = CFStringCompare(v67, v169, 0);
        uint64_t v71 = (CFStringRef *)MEMORY[0x1E4F1F508];
        CFStringRef v69 = v67;
        if (v72 == kCFCompareEqualTo) {
          goto LABEL_124;
        }
LABEL_110:
        CFStringCompare(v69, *v71, 0);
LABEL_124:
        CFNumberRef v73 = (const __CFNumber *)CFDictionaryGetValue(v59, v152);
        CFNumberRef v74 = (const __CFNumber *)CFDictionaryGetValue(v59, v151);
        CFStringRef v75 = (const __CFString *)CFDictionaryGetValue(v59, v150);
        if (!v73)
        {
          if (v74)
          {
            CFNumberGetValue(v74, kCFNumberIntType, &v193);
            char v76 = 0;
            goto LABEL_129;
          }
LABEL_126:
          char v76 = 1;
LABEL_129:
          if (v75 && CFStringCompare(v75, v145, 0) && CFStringCompare(v75, v142, 0)) {
            CFStringCompare(v75, v140, 0);
          }
          FigGeometryDimensionMake();
          FigGeometryDimensionMake();
          FigGeometryDimensionMake();
          if ((v76 & 1) == 0 && v193 < 0) {
            FigGeometryDimensionMakeReversed();
          }
          else {
            FigGeometryDimensionMake();
          }
          FigGeometryDimensionMake();
          if (CFDictionaryGetValue(v59, v166))
          {
            if (FigCFEqual())
            {
              FigGeometryDimensionMakeMirrored();
              FigGeometryDimensionMakeMirrored();
            }
            v197.CMTimeValue value = 0;
            uint64_t v85 = FigGeometryDimensionCopyAsDictionary();
            if (!v85)
            {
              uint64_t v88 = v158;
LABEL_154:
              if (FigCaptionRegionSetProperty_Point(v88, v149)) {
                goto LABEL_167;
              }
              uint64_t v95 = v88;
              uint64_t v96 = v148;
LABEL_166:
              FigCaptionRegionSetProperty_Point(v95, v96);
              goto LABEL_167;
            }
            uint64_t v86 = (const void *)v85;
            int v87 = FigCaptionDynamicStyleCreate();
            uint64_t v88 = v158;
            if (v87)
            {
              int v94 = v87;
            }
            else
            {
              CMTimeValue v89 = v197.value;
              uint64_t v90 = FigCaptionRegionGetCMBaseObject();
              uint64_t v91 = *(void *)(CMBaseObjectGetVTable() + 8);
              if (v91) {
                uint64_t v92 = v91;
              }
              else {
                uint64_t v92 = 0;
              }
              uint64_t v93 = *(uint64_t (**)(uint64_t, uint64_t, CMTimeValue))(v92 + 56);
              if (v93) {
                int v94 = v93(v90, v139, v89);
              }
              else {
                int v94 = -12782;
              }
            }
            if (v197.value) {
              CFRelease((CFTypeRef)v197.value);
            }
            CFRelease(v86);
            if (!v94) {
              goto LABEL_154;
            }
LABEL_167:
            CFTypeRef v99 = v192;
            uint64_t v100 = FigCaptionDataGetCMBaseObject();
            uint64_t v101 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v101) {
              uint64_t v102 = v101;
            }
            else {
              uint64_t v102 = 0;
            }
            os_log_type_t v103 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef))(v102 + 56);
            if (v103)
            {
              uint64_t v54 = v103(v100, v144, v99);
              goto LABEL_172;
            }
LABEL_173:
            uint64_t v30 = 4294954514;
LABEL_174:
            if (v191) {
              CFRelease(v191);
            }
            goto LABEL_176;
          }
          v197.CMTimeValue value = 0;
          uint64_t v77 = FigGeometryDimensionCopyAsDictionary();
          if (v77)
          {
            CFTypeID v78 = (const void *)v77;
            int v79 = FigCaptionDynamicStyleCreate();
            uint64_t v80 = v158;
            if (v79)
            {
              int v98 = v79;
            }
            else
            {
              CMTimeValue v81 = v197.value;
              uint64_t v82 = FigCaptionRegionGetCMBaseObject();
              uint64_t v83 = *(void *)(CMBaseObjectGetVTable() + 8);
              if (v83) {
                uint64_t v84 = v83;
              }
              else {
                uint64_t v84 = 0;
              }
              uint64_t v97 = *(uint64_t (**)(uint64_t, uint64_t, CMTimeValue))(v84 + 56);
              if (v97) {
                int v98 = v97(v82, v138, v81);
              }
              else {
                int v98 = -12782;
              }
            }
            if (v197.value) {
              CFRelease((CFTypeRef)v197.value);
            }
            CFRelease(v78);
            if (v98) {
              goto LABEL_167;
            }
          }
          else
          {
            uint64_t v80 = v158;
          }
          if (FigCaptionRegionSetProperty_Point(v80, v149)) {
            goto LABEL_167;
          }
          uint64_t v95 = v80;
          uint64_t v96 = v148;
          goto LABEL_166;
        }
        CFNumberGetValue(v73, kCFNumberCGFloatType, &v194);
        if (v194 >= 0.0) {
          goto LABEL_126;
        }
LABEL_243:
        FigSignalErrorAt();
        goto LABEL_167;
      }
LABEL_108:
      if (CFEqual(v69, v146)) {
        goto LABEL_124;
      }
      CFComparisonResult v70 = CFStringCompare(v69, v143, 0);
      uint64_t v71 = (CFStringRef *)MEMORY[0x1E4F1F780];
      if (v70 == kCFCompareEqualTo) {
        goto LABEL_124;
      }
      goto LABEL_110;
    }
    uint64_t v30 = FigSignalErrorAt();
LABEL_176:
    if (v192) {
      CFRelease(v192);
    }
    if (v30) {
      goto LABEL_37;
    }
    CFIndex v104 = 0;
    v189.CFIndex location = 0;
    v189.size_t length = 0;
    do
    {
      CFDictionaryRef v105 = CFAttributedStringGetAttributes(ValueAtIndex, v104, &v189);
      if (FigCFDictionaryGetCount() < 1) {
        goto LABEL_223;
      }
      CFRange effectiveRange = v189;
      long long v182 = (unint64_t)v190;
      CFDictionaryApplyFunction(v105, (CFDictionaryApplierFunction)fcgcfs_webvtt_attribute_applier, &effectiveRange);
      uint64_t v30 = DWORD2(v182);
      if (DWORD2(v182)) {
        goto LABEL_37;
      }
      CFIndex v107 = v189.length;
      CFTypeRef v106 = v190;
      CFIndex location = v189.location;
      double v195 = 0.0;
      double valuePtr = 0.0;
      if (!v190)
      {
        uint64_t v30 = FigSignalErrorAt();
        goto LABEL_220;
      }
      if (CFDictionaryContainsKey(v105, v14))
      {
        uint64_t v109 = FigCaptionDataCreateMutable();
        if (v109) {
          goto LABEL_216;
        }
        CFAttributedStringRef v110 = (const __CFAttributedString *)CFDictionaryGetValue(v105, v14);
        double v111 = valuePtr;
        CFStringRef v112 = CFAttributedStringGetString(v110);
        uint64_t v113 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v113) {
          uint64_t v114 = v113;
        }
        else {
          uint64_t v114 = 0;
        }
        __int16 v115 = *(uint64_t (**)(void, CFStringRef))(v114 + 16);
        if (v115)
        {
          uint64_t v109 = v115(*(void *)&v111, v112);
          if (v109) {
            goto LABEL_216;
          }
          v197.CMTimeValue value = 0;
          *(void *)&v197.CMTimeScale timescale = 0;
          CFDictionaryRef v116 = CFAttributedStringGetAttributes(v110, 0, (CFRange *)&v197);
          CFDictionaryGetValue(v116, v180);
          if (!FigCFEqual()
            && !FigCFEqual()
            && !FigCFEqual()
            && !FigCFEqual())
          {
            FigCFEqual();
          }
          uint64_t v109 = FigCaptionDynamicStyleCreate();
          if (v109) {
            goto LABEL_216;
          }
          double v117 = v195;
          uint64_t v118 = FigCaptionDataGetCMBaseObject();
          uint64_t v119 = *(void *)(CMBaseObjectGetVTable() + 8);
          uint64_t v120 = v119 ? v119 : 0;
          uint64_t v121 = *(uint64_t (**)(uint64_t, uint64_t, void))(v120 + 56);
          if (v121)
          {
            uint64_t v109 = v121(v118, v177, *(void *)&v117);
            if (v109) {
              goto LABEL_216;
            }
            CFDictionaryGetValue(v116, v176);
            if (!FigCFEqual()) {
              FigCFEqual();
            }
            if (v195 != 0.0)
            {
              CFRelease(*(CFTypeRef *)&v195);
              double v195 = 0.0;
            }
            uint64_t v109 = FigCaptionDynamicStyleCreate();
            if (v109) {
              goto LABEL_216;
            }
            double v122 = v195;
            uint64_t v123 = FigCaptionDataGetCMBaseObject();
            uint64_t v124 = *(void *)(CMBaseObjectGetVTable() + 8);
            uint64_t v125 = v124 ? v124 : 0;
            int v126 = *(uint64_t (**)(uint64_t, uint64_t, void))(v125 + 56);
            if (v126)
            {
              uint64_t v109 = v126(v123, v171, *(void *)&v122);
              if (v109) {
                goto LABEL_216;
              }
              double v127 = valuePtr;
              uint64_t v128 = *(void *)(CMBaseObjectGetVTable() + 16);
              uint64_t v129 = v128 ? v128 : 0;
              uint64_t v130 = *(uint64_t (**)(CFTypeRef, uint64_t, void, CFIndex, CFIndex))(v129 + 32);
              if (v130)
              {
                uint64_t v109 = v130(v106, v165, *(void *)&v127, location, v107);
LABEL_216:
                uint64_t v30 = v109;
                goto LABEL_218;
              }
            }
          }
        }
        uint64_t v30 = 4294954514;
      }
      else
      {
        uint64_t v30 = 0;
      }
LABEL_218:
      if (v195 != 0.0) {
        CFRelease(*(CFTypeRef *)&v195);
      }
LABEL_220:
      if (valuePtr != 0.0) {
        CFRelease(*(CFTypeRef *)&valuePtr);
      }
      if (v30) {
        goto LABEL_37;
      }
LABEL_223:
      CFIndex v104 = v189.length + v189.location;
    }
    while (v189.length + v189.location < v17);
    CFTypeRef v31 = v190;
    CFDateRef v11 = v172;
    CFMutableDictionaryRef Mutable = v173;
LABEL_227:
    CFArrayAppendValue(Mutable, v31);
    uint64_t v131 = (const UInt8 *)MEMORY[0x1E4F1FA48];
    CFDataAppendBytes(v11, MEMORY[0x1E4F1FA48], 24);
    CFDataAppendBytes(theData, v131, 24);
    if (v31) {
      CFRelease(v31);
    }
    CFIndex v13 = v179 + 1;
  }
  while (v179 + 1 != Count);
LABEL_248:
  CFDataGetMutableBytePtr(v11);
  int v132 = theData;
  CFDataGetMutableBytePtr(theData);
  uint64_t v133 = FigCaptionGroupCreate();
  if (!v133)
  {
    uint64_t DerivedStorage = v157;
    goto LABEL_253;
  }
  uint64_t v30 = v133;
  uint64_t DerivedStorage = v157;
LABEL_259:
  uint64_t v136 = *(void (**)(CFTypeRef, CFRange *, uint64_t))DerivedStorage;
  uint64_t v135 = *(void *)(DerivedStorage + 8);
  CFRange effectiveRange = *(CFRange *)&v186.start.value;
  long long v182 = *(_OWORD *)&v186.start.epoch;
  long long v183 = *(_OWORD *)&v186.duration.timescale;
  v136(v188, &effectiveRange, v135);
  if (v132) {
    CFRelease(v132);
  }
  if (v11) {
    CFRelease(v11);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v187) {
    CFRelease(v187);
  }
  if (v188) {
    CFRelease(v188);
  }
  return v30;
}

uint64_t fcgcfs_webvtt_finish()
{
  return 0;
}

void fcgcfs_webvtt_attribute_applier(uint64_t a1, const __CFString *a2, uint64_t *a3)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  CFTypeRef v47 = 0;
  if (*((_DWORD *)a3 + 6)) {
    goto LABEL_27;
  }
  if (FigCFEqual())
  {
    uint64_t v5 = 0;
    uint64_t v6 = *MEMORY[0x1E4F201C8];
    long long valuePtr = 0uLL;
    p_long long valuePtr = &valuePtr;
    while (1)
    {
      int FloatAtIndex = FigCFArrayGetFloatAtIndex();
      if (!FloatAtIndex) {
        goto LABEL_21;
      }
      ++v5;
      p_long long valuePtr = (long long *)((char *)p_valuePtr + 4);
      if (v5 == 4) {
        goto LABEL_11;
      }
    }
  }
  if (FigCFEqual())
  {
    uint64_t v9 = 0;
    uint64_t v6 = *MEMORY[0x1E4F20138];
    long long valuePtr = 0uLL;
    unsigned int v10 = &valuePtr;
    while (1)
    {
      int FloatAtIndex = FigCFArrayGetFloatAtIndex();
      if (!FloatAtIndex) {
        goto LABEL_21;
      }
      ++v9;
      unsigned int v10 = (long long *)((char *)v10 + 4);
      if (v9 == 4)
      {
LABEL_11:
        CGColorSRGB = (const void *)FigCreateCGColorSRGB();
        CFTypeRef cf = CGColorSRGB;
        if (!CGColorSRGB) {
          goto LABEL_89;
        }
        CFTypeID v12 = CFGetTypeID(CGColorSRGB);
        if (v12 != CGColorGetTypeID()) {
          goto LABEL_89;
        }
        goto LABEL_13;
      }
    }
  }
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      if (!a2) {
        goto LABEL_89;
      }
      CFTypeID v23 = CFGetTypeID(a2);
      if (v23 != CFBooleanGetTypeID()) {
        goto LABEL_89;
      }
      uint64_t v6 = *MEMORY[0x1E4F20160];
      int Value = CFBooleanGetValue((CFBooleanRef)a2);
      uint64_t v25 = (CFTypeRef *)MEMORY[0x1E4F20168];
      uint64_t v26 = (CFTypeRef *)MEMORY[0x1E4F20170];
      goto LABEL_44;
    }
    if (FigCFEqual())
    {
      if (!a2) {
        goto LABEL_89;
      }
      CFTypeID v27 = CFGetTypeID(a2);
      if (v27 != CFBooleanGetTypeID()) {
        goto LABEL_89;
      }
      uint64_t v6 = *MEMORY[0x1E4F20180];
      int Value = CFBooleanGetValue((CFBooleanRef)a2);
      uint64_t v25 = (CFTypeRef *)MEMORY[0x1E4F20188];
      uint64_t v26 = (CFTypeRef *)MEMORY[0x1E4F20190];
LABEL_44:
      if (!Value) {
        uint64_t v25 = v26;
      }
      CFTypeRef v13 = *v25;
      CFTypeRef cf = *v25;
LABEL_14:
      if (!v13) {
        goto LABEL_25;
      }
      goto LABEL_15;
    }
    if (FigCFEqual())
    {
      *(void *)&long long valuePtr = 0;
      if (!a2) {
        goto LABEL_89;
      }
      CFTypeID v28 = CFGetTypeID(a2);
      if (v28 != CFNumberGetTypeID()) {
        goto LABEL_89;
      }
      uint64_t v6 = *MEMORY[0x1E4F20158];
      CFNumberGetValue((CFNumberRef)a2, kCFNumberCGFloatType, &valuePtr);
      uint64_t v29 = (const void *)FigCaptionGeometryCopyCellBasedSizeAsDictionary();
      goto LABEL_60;
    }
    if (FigCFEqual())
    {
      LODWORD(v43) = 0;
      if (!a2) {
        goto LABEL_89;
      }
      CFTypeID v30 = CFGetTypeID(a2);
      if (v30 != CFNumberGetTypeID()) {
        goto LABEL_89;
      }
      uint64_t v6 = *MEMORY[0x1E4F20158];
      CFNumberGetValue((CFNumberRef)a2, kCFNumberIntType, &v43);
      goto LABEL_59;
    }
    if (FigCFEqual())
    {
      uint64_t v43 = 0;
      if (!a2) {
        goto LABEL_89;
      }
      CFTypeID v31 = CFGetTypeID(a2);
      if (v31 != CFNumberGetTypeID()) {
        goto LABEL_89;
      }
      uint64_t v6 = *MEMORY[0x1E4F20158];
      CFNumberGetValue((CFNumberRef)a2, kCFNumberCGFloatType, &v43);
LABEL_59:
      FigGeometryDimensionMake();
      long long valuePtr = 0u;
      long long v49 = 0u;
      FigGeometrySizeMake();
      long long v44 = valuePtr;
      long long v45 = v49;
      uint64_t v29 = (const void *)FigGeometrySizeCopyAsDictionary();
LABEL_60:
      CFTypeRef v13 = v29;
      CFTypeRef cf = v29;
      goto LABEL_14;
    }
    if (FigCFEqual())
    {
      if (!a2) {
        goto LABEL_89;
      }
      CFTypeID v32 = CFGetTypeID(a2);
      if (v32 != CFStringGetTypeID() || !fcgcfs_webvtt_getGenericFontFamilyNameFromGenericWebVTTFontName(a2)) {
        goto LABEL_89;
      }
      int FloatAtIndex = FigCaptionFontFamilyNameListCreateMutable();
      if (FloatAtIndex) {
        goto LABEL_24;
      }
      int FloatAtIndex = FigCaptionFontFamilyNameListAppend();
      if (FloatAtIndex) {
        goto LABEL_24;
      }
      CFDictionaryRef v33 = (uint64_t *)MEMORY[0x1E4F20150];
      goto LABEL_68;
    }
    if (FigCFEqual())
    {
      if (a2)
      {
        CFTypeID v34 = CFGetTypeID(a2);
        if (v34 == CFStringGetTypeID())
        {
          int FloatAtIndex = FigCaptionFontFamilyNameListCreateMutable();
          if (FloatAtIndex) {
            goto LABEL_24;
          }
          int FloatAtIndex = FigCaptionFontFamilyNameListAppend();
          goto LABEL_21;
        }
      }
    }
    else
    {
      if (FigCFEqual())
      {
        *(void *)&long long valuePtr = 0;
        if (!a2) {
          goto LABEL_89;
        }
        CFTypeID v35 = CFGetTypeID(a2);
        if (v35 != CFNumberGetTypeID()) {
          goto LABEL_89;
        }
        uint64_t v6 = *MEMORY[0x1E4F20220];
        CFNumberGetValue((CFNumberRef)a2, kCFNumberCGFloatType, &valuePtr);
        FigGeometryDimensionMake();
        uint64_t v29 = (const void *)FigGeometryDimensionCopyAsDictionary();
        goto LABEL_60;
      }
      if (!FigCFEqual())
      {
        if (FigCFEqual())
        {
          LODWORD(valuePtr) = 1;
          if (!a2) {
            goto LABEL_89;
          }
          CFTypeID v37 = CFGetTypeID(a2);
          if (v37 != CFNumberGetTypeID()) {
            goto LABEL_89;
          }
          uint64_t v6 = *MEMORY[0x1E4F201D0];
          CFNumberGetValue((CFNumberRef)a2, kCFNumberSInt32Type, &valuePtr);
          switch((int)valuePtr)
          {
            case -1:
              double v38 = (CFTypeRef *)MEMORY[0x1E4F201D8];
              goto LABEL_100;
            case 1:
              double v38 = (CFTypeRef *)MEMORY[0x1E4F201F0];
              goto LABEL_100;
            case 2:
              double v38 = (CFTypeRef *)MEMORY[0x1E4F20200];
              goto LABEL_100;
            case 3:
              double v38 = (CFTypeRef *)MEMORY[0x1E4F201F8];
              goto LABEL_100;
            case 4:
              double v38 = (CFTypeRef *)MEMORY[0x1E4F201E0];
LABEL_100:
              CFTypeRef cf = CFRetain(*v38);
              break;
            default:
              goto LABEL_13;
          }
          goto LABEL_13;
        }
        if (!FigCFEqual())
        {
          uint64_t v6 = 0;
          goto LABEL_13;
        }
        CFStringRef v39 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)a2, (const void *)*MEMORY[0x1E4F1F970]);
        CFStringRef v40 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)a2, (const void *)*MEMORY[0x1E4F1F950]);
        CFStringRef v41 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)a2, (const void *)*MEMORY[0x1E4F1F930]);
        CFStringRef v42 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)a2, (const void *)*MEMORY[0x1E4F1F968]);
        if (v39
          && CFStringCompare(v39, (CFStringRef)*MEMORY[0x1E4F1F978], 0)
          && CFStringCompare(v39, (CFStringRef)*MEMORY[0x1E4F1F988], 0))
        {
          CFStringCompare(v39, (CFStringRef)*MEMORY[0x1E4F1F980], 0);
        }
        if (v40 && CFStringCompare(v40, (CFStringRef)*MEMORY[0x1E4F1F958], 0)) {
          CFStringCompare(v40, (CFStringRef)*MEMORY[0x1E4F1F960], 0);
        }
        if (v41
          && CFStringCompare(v41, (CFStringRef)*MEMORY[0x1E4F1F938], 0)
          && CFStringCompare(v41, (CFStringRef)*MEMORY[0x1E4F1F940], 0))
        {
          CFStringCompare(v41, (CFStringRef)*MEMORY[0x1E4F1F948], 0);
        }
        if (v42 && CFStringCompare(v42, (CFStringRef)*MEMORY[0x1E4F1F8F8], 0)) {
          CFStringCompare(v42, (CFStringRef)*MEMORY[0x1E4F1F910], 0);
        }
        int FloatAtIndex = FigCaptionTextEmphasisCreate();
        if (FloatAtIndex) {
          goto LABEL_24;
        }
        CFDictionaryRef v33 = (uint64_t *)MEMORY[0x1E4F20208];
LABEL_68:
        uint64_t v6 = *v33;
LABEL_13:
        CFTypeRef v13 = cf;
        goto LABEL_14;
      }
      if (a2)
      {
        CFTypeID v36 = CFGetTypeID(a2);
        if (v36 == CFStringGetTypeID())
        {
          CFTypeRef cf = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2);
          if (cf)
          {
            uint64_t v22 = (uint64_t *)MEMORY[0x1E4F20148];
            goto LABEL_35;
          }
        }
      }
    }
LABEL_89:
    int FloatAtIndex = FigSignalErrorAt();
    goto LABEL_21;
  }
  if (!a2) {
    goto LABEL_89;
  }
  CFTypeID v21 = CFGetTypeID(a2);
  if (v21 != CFBooleanGetTypeID()) {
    goto LABEL_89;
  }
  LODWORD(valuePtr) = CFBooleanGetValue((CFBooleanRef)a2) != 0;
  CFTypeRef cf = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
  if (!cf) {
    goto LABEL_89;
  }
  uint64_t v22 = (uint64_t *)MEMORY[0x1E4F20140];
LABEL_35:
  uint64_t v6 = *v22;
LABEL_15:
  int FloatAtIndex = FigCaptionDynamicStyleCreate();
  if (FloatAtIndex)
  {
LABEL_24:
    *((_DWORD *)a3 + 6) = FloatAtIndex;
    goto LABEL_25;
  }
  uint64_t v14 = a3[1];
  uint64_t v15 = a3[2];
  CFTypeRef v16 = v47;
  uint64_t v17 = *a3;
  uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v18) {
    uint64_t v19 = v18;
  }
  else {
    uint64_t v19 = 0;
  }
  CMTagValue v20 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef, uint64_t, uint64_t))(v19 + 32);
  if (!v20)
  {
    int FloatAtIndex = -12782;
    goto LABEL_24;
  }
  int FloatAtIndex = v20(v15, v6, v16, v17, v14);
LABEL_21:
  if (FloatAtIndex) {
    goto LABEL_24;
  }
LABEL_25:
  if (cf) {
    CFRelease(cf);
  }
LABEL_27:
  if (v47) {
    CFRelease(v47);
  }
}

uint64_t FigCaptionRegionSetProperty_Point(uint64_t a1, uint64_t a2)
{
  FigGeometryPointMake();
  long long v3 = (const void *)FigGeometryPointCopyAsDictionary();
  if (v3)
  {
    uint64_t v4 = FigCaptionDynamicStyleCreate();
    if (v4)
    {
LABEL_8:
      uint64_t v9 = v4;
      goto LABEL_10;
    }
    uint64_t CMBaseObject = FigCaptionRegionGetCMBaseObject();
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, void))(v7 + 56);
    if (v8)
    {
      uint64_t v4 = v8(CMBaseObject, a2, 0);
      goto LABEL_8;
    }
    uint64_t v9 = 4294954514;
  }
  else
  {
    uint64_t v9 = 0;
  }
LABEL_10:
  if (v3) {
    CFRelease(v3);
  }
  return v9;
}

uint64_t fcgcfs_webvtt_getGenericFontFamilyNameFromGenericWebVTTFontName(const __CFString *a1)
{
  if (CFStringCompare(a1, (CFStringRef)*MEMORY[0x1E4F1F800], 1uLL) == kCFCompareEqualTo)
  {
    uint64_t v4 = MEMORY[0x1E4F1FEB0];
    return *(void *)v4;
  }
  if (CFStringCompare(a1, (CFStringRef)*MEMORY[0x1E4F1F7F8], 1uLL) == kCFCompareEqualTo)
  {
    uint64_t v4 = MEMORY[0x1E4F1FEA8];
    return *(void *)v4;
  }
  if (CFStringCompare(a1, (CFStringRef)*MEMORY[0x1E4F1F7F0], 1uLL) == kCFCompareEqualTo)
  {
    uint64_t v4 = MEMORY[0x1E4F1FEA0];
    return *(void *)v4;
  }
  if (CFStringCompare(a1, (CFStringRef)*MEMORY[0x1E4F1F7E8], 1uLL) == kCFCompareEqualTo)
  {
    uint64_t v4 = MEMORY[0x1E4F1FE98];
    return *(void *)v4;
  }
  if (CFStringCompare(a1, (CFStringRef)*MEMORY[0x1E4F1F7E0], 1uLL) == kCFCompareEqualTo)
  {
    uint64_t v4 = MEMORY[0x1E4F1FE90];
    return *(void *)v4;
  }
  uint64_t v2 = *MEMORY[0x1E4F1F7D8];
  if (CFStringCompare(a1, (CFStringRef)*MEMORY[0x1E4F1F7D8], 1uLL) == kCFCompareEqualTo) {
    return v2;
  }
  if (CFStringCompare(a1, (CFStringRef)*MEMORY[0x1E4F1F7B0], 1uLL) == kCFCompareEqualTo)
  {
    uint64_t v4 = MEMORY[0x1E4F1FE60];
    return *(void *)v4;
  }
  if (CFStringCompare(a1, (CFStringRef)*MEMORY[0x1E4F1F7B8], 1uLL) == kCFCompareEqualTo)
  {
    uint64_t v4 = MEMORY[0x1E4F1FE68];
    return *(void *)v4;
  }
  uint64_t v2 = *MEMORY[0x1E4F1F7C8];
  if (CFStringCompare(a1, (CFStringRef)*MEMORY[0x1E4F1F7C8], 1uLL))
  {
    uint64_t v3 = *MEMORY[0x1E4F1FE70];
    uint64_t v2 = *MEMORY[0x1E4F1F808];
    if (CFStringCompare(a1, (CFStringRef)*MEMORY[0x1E4F1F808], 1uLL)) {
      return v3;
    }
  }
  return v2;
}

uint64_t FigVirtualDisplaySourceConduitCreate(uint64_t a1, void *a2, __CFString *a3, CFTypeRef *a4)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  if (!a2 || *a2 != 1 || (uint64_t v5 = (uint64_t (**)(void))(a2 + 1), !a2[1]))
  {
    unsigned int v29 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    uint64_t v19 = 4294955226;
    goto LABEL_20;
  }
  FigVirtualDisplaySourceGetClassID();
  uint64_t v8 = CMDerivedObjectCreate();
  if (v8)
  {
    uint64_t v19 = v8;
    unsigned int v29 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    uint64_t v22 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
  }
  else
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (a3) {
      CFTypeRef v10 = CFRetain(a3);
    }
    else {
      CFTypeRef v10 = 0;
    }
    *(void *)uint64_t DerivedStorage = v10;
    *(_DWORD *)(DerivedStorage + 136) = 0;
    *(void *)(DerivedStorage + 72) = a2[2];
    *(void *)(DerivedStorage + 80) = a2[3];
    uint64_t v11 = (*v5)();
    *(void *)(DerivedStorage + 64) = v11;
    if (!v11)
    {
      unsigned int v29 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      CFTypeID v23 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      uint64_t v19 = 4294955225;
      goto LABEL_20;
    }
    CFTypeID v12 = FigDispatchQueueCreateWithPriority();
    *(void *)(DerivedStorage + 16) = v12;
    CFTypeRef v13 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 1uLL, v12);
    *(void *)(DerivedStorage + 88) = v13;
    handler[0] = MEMORY[0x1E4F143A8];
    handler[1] = 0x40000000;
    handler[2] = __FigVirtualDisplaySourceConduitCreate_block_invoke;
    handler[3] = &__block_descriptor_tmp_48;
    handler[4] = DerivedStorage;
    dispatch_source_set_event_handler(v13, handler);
    dispatch_source_set_timer(*(dispatch_source_t *)(DerivedStorage + 88), 0xFFFFFFFFFFFFFFFFLL, 0, 0);
    dispatch_resume(*(dispatch_object_t *)(DerivedStorage + 88));
    uint64_t v14 = VTPixelTransferSessionCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (VTPixelTransferSessionRef *)(DerivedStorage + 56));
    if (!v14)
    {
      unsigned int v29 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      uint64_t v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v16 = v29;
      if (os_log_type_enabled(v15, type)) {
        unsigned int v17 = v16;
      }
      else {
        unsigned int v17 = v16 & 0xFFFFFFFE;
      }
      if (v17)
      {
        uint64_t v18 = @"no name";
        if (a3) {
          uint64_t v18 = a3;
        }
        int v31 = 136315906;
        CFTypeID v32 = "FigVirtualDisplaySourceConduitCreate";
        __int16 v33 = 2048;
        *(void *)CFTypeID v34 = DerivedStorage;
        *(_WORD *)&v34[8] = 2048;
        CFTypeRef v35 = cf;
        __int16 v36 = 2112;
        CFTypeID v37 = v18;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      uint64_t v19 = 0;
      *a4 = cf;
      return v19;
    }
    uint64_t v19 = v14;
    unsigned int v29 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    CFTypeID v24 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v25 = v29;
    if (os_log_type_enabled(v24, type)) {
      unsigned int v26 = v25;
    }
    else {
      unsigned int v26 = v25 & 0xFFFFFFFE;
    }
    if (v26)
    {
      int v31 = 136315650;
      CFTypeID v32 = "FigVirtualDisplaySourceConduitCreate";
      __int16 v33 = 1024;
      *(_DWORD *)CFTypeID v34 = 620;
      *(_WORD *)&v34[4] = 1024;
      *(_DWORD *)&v34[6] = v19;
      _os_log_send_and_compose_impl();
    }
  }
  fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_20:
  if (cf) {
    CFRelease(cf);
  }
  return v19;
}

void __FigVirtualDisplaySourceConduitCreate_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v1 + 96))
  {
    uint64_t v3 = *(const void **)(v1 + 112);
    uint64_t v2 = *(void *)(v1 + 120);
    uint64_t v4 = *(unsigned int *)(v1 + 128);
    uint64_t v5 = *(__CVBuffer **)(v1 + 104);
    srcconduit_submitPixelBuffer(v1, v5, v2, v4, v3);
  }
  else
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
}

void fvdsrcconduit_finalize(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v11 = 0;
  os_log_type_t type = OS_LOG_TYPE_DEFAULT;
  os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  uint64_t v4 = *(NSObject **)(DerivedStorage + 16);
  if (v4)
  {
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __fvdsrcconduit_finalize_block_invoke;
    block[3] = &__block_descriptor_tmp_6_3;
    block[4] = DerivedStorage;
    void block[5] = a1;
    dispatch_sync(v4, block);
  }
  uint64_t v5 = *(NSObject **)(DerivedStorage + 88);
  if (v5)
  {
    dispatch_source_cancel(v5);
    dispatch_release(*(dispatch_object_t *)(DerivedStorage + 88));
  }
  if (*(void *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(void *)uint64_t DerivedStorage = 0;
  }
  uint64_t v6 = *(const void **)(DerivedStorage + 56);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(DerivedStorage + 56) = 0;
  }
  uint64_t v7 = *(const void **)(DerivedStorage + 64);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(DerivedStorage + 64) = 0;
  }
  uint64_t v8 = *(NSObject **)(DerivedStorage + 16);
  if (v8)
  {
    dispatch_release(v8);
    *(void *)(DerivedStorage + 16) = 0;
  }
}

uint64_t fvdsrcconduit_copyProperty(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  uint64_t DerivedStorage = (__CFString **)CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, @"sourceType"))
  {
    uint64_t v7 = @"Conduit";
LABEL_3:
    CFTypeRef v8 = CFRetain(v7);
    uint64_t result = 0;
    *a4 = v8;
    return result;
  }
  if (CFEqual(a2, @"sourceName"))
  {
    uint64_t v7 = *DerivedStorage;
    if (*DerivedStorage) {
      goto LABEL_3;
    }
  }
  return 4294954512;
}

uint64_t fvdsrcconduit_setProperty()
{
  return 4294954512;
}

uint64_t __fvdsrcconduit_finalize_block_invoke(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (*(_DWORD *)(v1 + 136) || *(void *)(v1 + 8))
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    uint64_t result = fig_log_call_emit_and_clean_up_after_send_and_compose();
    __break(1u);
  }
  return result;
}

uint64_t fvdsrcconduit_plugProcessor(uint64_t a1, uint64_t a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v15 = 0;
  unsigned int v16 = &v15;
  uint64_t v17 = 0x2000000000;
  int v18 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    uint64_t v4 = *(NSObject **)(DerivedStorage + 16);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __fvdsrcconduit_plugProcessor_block_invoke;
    block[3] = &unk_1E579C8B0;
    void block[5] = DerivedStorage;
    void block[6] = a2;
    block[4] = &v15;
    dispatch_sync(v4, block);
    int v5 = *((_DWORD *)v16 + 6);
    if (v5)
    {
      unsigned int v14 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v10 = v14;
      if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type)) {
        unsigned int v11 = v10;
      }
      else {
        unsigned int v11 = v10 & 0xFFFFFFFE;
      }
      if (v11)
      {
        int v19 = 136315650;
        CMTagValue v20 = "fvdsrcconduit_plugProcessor";
        __int16 v21 = 1024;
        int v22 = 441;
        __int16 v23 = 1024;
        int v24 = v5;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      uint64_t v6 = *((unsigned int *)v16 + 6);
    }
    else
    {
      uint64_t v6 = 0;
    }
  }
  else
  {
    unsigned int v14 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    CFTypeRef v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    uint64_t v6 = 4294955226;
    *((_DWORD *)v16 + 6) = -12070;
  }
  _Block_object_dispose(&v15, 8);
  return v6;
}

uint64_t fvdsrcconduit_unplugProcessor(uint64_t a1, uint64_t a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v15 = 0;
  unsigned int v16 = &v15;
  uint64_t v17 = 0x2000000000;
  int v18 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    uint64_t v4 = *(NSObject **)(DerivedStorage + 16);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __fvdsrcconduit_unplugProcessor_block_invoke;
    block[3] = &unk_1E579C8D8;
    void block[5] = DerivedStorage;
    void block[6] = a2;
    block[4] = &v15;
    dispatch_sync(v4, block);
    int v5 = *((_DWORD *)v16 + 6);
    if (v5)
    {
      unsigned int v14 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v10 = v14;
      if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type)) {
        unsigned int v11 = v10;
      }
      else {
        unsigned int v11 = v10 & 0xFFFFFFFE;
      }
      if (v11)
      {
        int v19 = 136315650;
        CMTagValue v20 = "fvdsrcconduit_unplugProcessor";
        __int16 v21 = 1024;
        int v22 = 461;
        __int16 v23 = 1024;
        int v24 = v5;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      uint64_t v6 = *((unsigned int *)v16 + 6);
    }
    else
    {
      uint64_t v6 = 0;
    }
  }
  else
  {
    unsigned int v14 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    CFTypeRef v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    uint64_t v6 = 4294955226;
    *((_DWORD *)v16 + 6) = -12070;
  }
  _Block_object_dispose(&v15, 8);
  return v6;
}

uint64_t fvdsrcconduit_start(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = 0;
  unsigned int v11 = &v10;
  uint64_t v12 = 0x2000000000;
  int v13 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v5 = *(NSObject **)(DerivedStorage + 16);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __fvdsrcconduit_start_block_invoke;
  block[3] = &unk_1E579C900;
  block[4] = &v10;
  void block[5] = DerivedStorage;
  void block[6] = a2;
  void block[7] = a1;
  dispatch_sync(v5, block);
  uint64_t v6 = 0;
  if (*((_DWORD *)v11 + 6))
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    uint64_t v6 = *((unsigned int *)v11 + 6);
  }
  _Block_object_dispose(&v10, 8);
  return v6;
}

uint64_t fvdsrcconduit_stop()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = *(NSObject **)(DerivedStorage + 16);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __fvdsrcconduit_stop_block_invoke;
  block[3] = &__block_descriptor_tmp_47_1;
  block[4] = DerivedStorage;
  dispatch_sync(v1, block);
  return 0;
}

uint64_t fvdsrcconduit_suspend()
{
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2000000000;
  int v8 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = *(NSObject **)(DerivedStorage + 16);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  void v4[2] = __fvdsrcconduit_suspend_block_invoke;
  v4[3] = &unk_1E579C968;
  v4[4] = &v5;
  v4[5] = DerivedStorage;
  dispatch_sync(v1, v4);
  uint64_t v2 = *((unsigned int *)v6 + 6);
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t fvdsrcconduit_resume()
{
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2000000000;
  int v8 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = *(NSObject **)(DerivedStorage + 16);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  void v4[2] = __fvdsrcconduit_resume_block_invoke;
  v4[3] = &unk_1E579C990;
  v4[4] = &v5;
  v4[5] = DerivedStorage;
  dispatch_sync(v1, v4);
  uint64_t v2 = *((unsigned int *)v6 + 6);
  _Block_object_dispose(&v5, 8);
  return v2;
}

CFTypeRef *__fvdsrcconduit_plugProcessor_block_invoke(CFTypeRef *result)
{
  uint64_t v1 = result;
  uint64_t v2 = result[5];
  if (v2[34] || *((void *)v2 + 1))
  {
    *(_DWORD *)(*((void *)result[4] + 1) + 24) = -12073;
  }
  else
  {
    uint64_t result = (CFTypeRef *)CFRetain(result[6]);
    *((void *)v1[5] + 1) = v1[6];
  }
  return result;
}

void __fvdsrcconduit_unplugProcessor_block_invoke(void *a1)
{
  uint64_t v2 = a1[5];
  if (!*(_DWORD *)(v2 + 136) && (uint64_t v3 = *(const void **)(v2 + 8), v3 == (const void *)a1[6]))
  {
    if (v3)
    {
      CFRelease(v3);
      *(void *)(a1[5] + 8) = 0;
    }
  }
  else
  {
    *(_DWORD *)(*(void *)(a1[4] + 8) + 24) = -12070;
  }
}

void __fvdsrcconduit_start_block_invoke(void *a1)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = a1[5];
  if (*(_DWORD *)(v2 + 136) || (uint64_t v3 = *(void *)(v2 + 8)) == 0)
  {
    *(_DWORD *)(*(void *)(a1[4] + 8) + 24) = -12070;
    return;
  }
  CFTypeRef v37 = 0;
  CFTypeRef cf = 0;
  long long v35 = xmmword_194992F40;
  BOOL v34 = 0;
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  unsigned int v36 = 0;
  uint64_t v6 = *(uint64_t (**)(uint64_t, CFTypeRef *, CFTypeRef *))(v5 + 56);
  if (!v6)
  {
    int v13 = -12782;
LABEL_14:
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    goto LABEL_26;
  }
  int v7 = v6(v3, &cf, &v37);
  if (v7)
  {
    int v13 = v7;
    goto LABEL_14;
  }
  int v8 = FigDisplayModes_LookupTimingModeIDByIndex((const __CFArray *)v37, 0, (int *)&v36);
  if (v8)
  {
    int v13 = v8;
    __int16 v21 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
    goto LABEL_26;
  }
  uint64_t v9 = v36;
  uint64_t v10 = *(void *)(v2 + 8);
  uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 64);
  if (!v15)
  {
    int v13 = -12782;
LABEL_23:
    CMTagValue v20 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
    goto LABEL_26;
  }
  int v16 = v15(v10, v9, v9);
  if (v16)
  {
    int v13 = v16;
    goto LABEL_23;
  }
  int DimensionsFromTimingMode = FigDisplayModes_ExtractDimensionsFromTimingMode((const __CFArray *)v37, v36, (double *)&v35);
  if (!DimensionsFromTimingMode)
  {
    FigDisplayModes_ExtractOverscanInfoFromTimingMode((const __CFArray *)v37, v36, &v34);
    *(_DWORD *)(v2 + 48) = 60;
    FigDisplayModes_ExtractVSyncRateFromTimingMode((const __CFArray *)v37, v36, (int *)(v2 + 48));
    *(_OWORD *)(v2 + 24) = v35;
    double v18 = 0.06;
    if (!v34) {
      double v18 = 0.0;
    }
    *(double *)(v2 + 40) = v18;
    *(unsigned char *)(v2 + 140) = 0;
    int v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    int v13 = 0;
    goto LABEL_27;
  }
  int v13 = DimensionsFromTimingMode;
  int v22 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
LABEL_26:
  fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_27:
  if (cf) {
    CFRelease(cf);
  }
  if (v37) {
    CFRelease(v37);
  }
  *(_DWORD *)(*(void *)(a1[4] + 8) + 24) = v13;
  if (!*(_DWORD *)(*(void *)(a1[4] + 8) + 24))
  {
    uint64_t v28 = a1[5];
    if (*(void *)(v28 + 72))
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      LODWORD(v35) = 0;
      FigCFDictionaryGetInt32IfPresent();
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt32();
      FigCFDictionaryGetValue();
      FigCFDictionarySetValue();
      FigCFDictionaryGetValue();
      FigCFDictionarySetValue();
      FigCFDictionaryGetValue();
      FigCFDictionarySetValue();
      FigCFDictionaryGetValue();
      FigCFDictionarySetValue();
      int Value = (const void *)FigCFDictionaryGetValue();
      if (Value)
      {
        CFDictionarySetValue(Mutable, @"SceneID", Value);
        *(unsigned char *)(v28 + 140) = 1;
      }
      LODWORD(cf) = 0;
      LOBYTE(v37) = 0;
      int v31 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v32 = cf;
      if (os_log_type_enabled(v31, (os_log_type_t)v37)) {
        unsigned int v33 = v32;
      }
      else {
        unsigned int v33 = v32 & 0xFFFFFFFE;
      }
      if (v33)
      {
        int v39 = 136315650;
        CFStringRef v40 = "srcconduit_createFrameSourceStartOptions";
        __int16 v41 = 2048;
        uint64_t v42 = v28;
        __int16 v43 = 2112;
        long long v44 = Mutable;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      *(_DWORD *)(*(void *)(a1[4] + 8) + 24) = (*(uint64_t (**)(void, __CFDictionary *, void, uint64_t (*)(), void))(a1[5] + 72))(*(void *)(a1[5] + 64), Mutable, fvdsrcconduit_submitFrame, fvdsrcconduit_postError, a1[7]);
      if (Mutable) {
        CFRelease(Mutable);
      }
    }
  }
  if (!*(_DWORD *)(*(void *)(a1[4] + 8) + 24))
  {
    LOBYTE(cf) = 0;
    FigCFDictionaryGetBooleanIfPresent();
    if ((_BYTE)cf) {
      int v23 = 1;
    }
    else {
      int v23 = 2;
    }
    *(_DWORD *)(a1[5] + 136) = v23;
    LODWORD(v35) = 0;
    LOBYTE(v37) = 0;
    int v24 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v25 = v35;
    if (os_log_type_enabled(v24, (os_log_type_t)v37)) {
      unsigned int v26 = v25;
    }
    else {
      unsigned int v26 = v25 & 0xFFFFFFFE;
    }
    if (v26)
    {
      uint64_t v27 = a1[5];
      int v39 = 136315394;
      CFStringRef v40 = "fvdsrcconduit_start_block_invoke";
      __int16 v41 = 2048;
      uint64_t v42 = v27;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
}

void fvdsrcconduit_submitFrame(uint64_t a1, const void *a2, uint64_t a3, int a4, const void *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2) {
    CFRetain(a2);
  }
  if (a5) {
    CFRetain(a5);
  }
  uint64_t v10 = *(NSObject **)(DerivedStorage + 16);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __fvdsrcconduit_submitFrame_block_invoke;
  block[3] = &__block_descriptor_tmp_37_1;
  block[4] = DerivedStorage;
  void block[5] = a2;
  int v12 = a4;
  void block[6] = a3;
  void block[7] = a5;
  dispatch_async(v10, block);
}

uint64_t fvdsrcconduit_postError()
{
  CMBaseObjectGetDerivedStorage();
  os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

void __fvdsrcconduit_submitFrame_block_invoke(uint64_t a1)
{
  srcconduit_submitPixelBuffer(*(void *)(a1 + 32), *(CVPixelBufferRef *)(a1 + 40), *(void *)(a1 + 48), *(unsigned int *)(a1 + 64), *(const void **)(a1 + 56));
  uint64_t v2 = *(const void **)(a1 + 40);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 56);
  if (v3)
  {
    CFRelease(v3);
  }
}

void srcconduit_submitPixelBuffer(uint64_t a1, CVPixelBufferRef pixelBuffer, uint64_t a3, uint64_t a4, const void *a5)
{
  valuePtr[16] = *(double *)MEMORY[0x1E4F143B8];
  CVPixelBufferRef destinationBuffer = 0;
  int v10 = *(_DWORD *)(a1 + 136);
  if (v10 == 2)
  {
    if (pixelBuffer)
    {
      uint64_t v11 = *(void *)(a1 + 8);
      size_t Width = CVPixelBufferGetWidth(pixelBuffer);
      size_t Height = CVPixelBufferGetHeight(pixelBuffer);
      uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v14) {
        uint64_t v15 = v14;
      }
      else {
        uint64_t v15 = 0;
      }
      unsigned int v25 = *(unsigned int (**)(uint64_t, void, uint64_t, CVPixelBufferRef *, double, double))(v15 + 88);
      if (!v25
        || v25(v11, 0, 1, &destinationBuffer, (double)Width, (double)Height)
        || VTPixelTransferSessionTransferImage(*(VTPixelTransferSessionRef *)(a1 + 56), pixelBuffer, destinationBuffer))
      {
LABEL_31:
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        goto LABEL_32;
      }
      unsigned int v26 = destinationBuffer;
      if (*(unsigned char *)(a1 + 140))
      {
        double v27 = (double)CVPixelBufferGetWidth(destinationBuffer);
        valuePtr[0] = v27 / (double)CVPixelBufferGetWidth(pixelBuffer);
        CFNumberRef v28 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberDoubleType, valuePtr);
        if (v28)
        {
          CFNumberRef v29 = v28;
          CVBufferSetAttachment(v26, @"FVDPixelScaleFactor", v28, kCVAttachmentMode_ShouldPropagate);
          CFRelease(v29);
        }
        CFTypeRef v30 = CVBufferCopyAttachment(pixelBuffer, @"FVDWindowRectangles", 0);
        if (v30)
        {
          int v31 = v30;
          CVBufferSetAttachment(v26, @"FVDWindowRectangles", v30, kCVAttachmentMode_ShouldPropagate);
          CFRelease(v31);
        }
        CFTypeRef v32 = CVBufferCopyAttachment(pixelBuffer, @"FVDWindowScaleFactor", 0);
        if (v32)
        {
          unsigned int v33 = v32;
          CVBufferSetAttachment(v26, @"FVDWindowScaleFactor", v32, kCVAttachmentMode_ShouldPropagate);
          CFRelease(v33);
        }
        unsigned int v26 = destinationBuffer;
      }
      double v22 = (double)CVPixelBufferGetWidth(v26);
      size_t v34 = CVPixelBufferGetHeight(destinationBuffer);
      double v21 = (double)v34;
      double v35 = *(double *)(a1 + 24);
      double v36 = *(double *)(a1 + 32);
      double v37 = v35 / v22;
      if (v35 / v22 >= v36 / (double)v34) {
        double v37 = v36 / (double)v34;
      }
      double v38 = (1.0 - *(double *)(a1 + 40)) * v37;
      double v18 = v38 * v22;
      double v17 = v38 * v21;
      double v20 = (v35 - v38 * v22) * 0.5;
      double v19 = (v36 - v38 * v21) * 0.5;
      double v23 = 0.0;
      CVPixelBufferRef v16 = destinationBuffer;
      double v24 = 0.0;
    }
    else
    {
      CVPixelBufferRef v16 = 0;
      double v18 = *(double *)(MEMORY[0x1E4F1DB28] + 16);
      double v17 = *(double *)(MEMORY[0x1E4F1DB28] + 24);
      double v20 = *MEMORY[0x1E4F1DB28];
      double v19 = *(double *)(MEMORY[0x1E4F1DB28] + 8);
      double v21 = v17;
      double v22 = v18;
      double v23 = v19;
      double v24 = *MEMORY[0x1E4F1DB28];
    }
    uint64_t v39 = *(void *)(a1 + 8);
    uint64_t v40 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v40) {
      uint64_t v41 = v40;
    }
    else {
      uint64_t v41 = 0;
    }
    uint64_t v42 = *(unsigned int (**)(uint64_t, CVPixelBufferRef, uint64_t, uint64_t, void, double, double, double, double, double, double, double, double))(v41 + 80);
    if (v42 && !v42(v39, v16, a3, a4, 0, v24, v23, v22, v21, v20, v19, v18, v17)) {
      goto LABEL_27;
    }
    goto LABEL_31;
  }
  if (!v10)
  {
    __int16 v43 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_27:
    srcconduit_stopRetrying(a1);
    goto LABEL_41;
  }
LABEL_32:
  uint64_t v45 = *(NSObject **)(a1 + 88);
  dispatch_time_t v46 = dispatch_time(0, 50000000);
  dispatch_source_set_timer(v45, v46, 0xFFFFFFFFFFFFFFFFLL, 0xF4240uLL);
  CFTypeRef v47 = *(const void **)(a1 + 104);
  *(void *)(a1 + 104) = pixelBuffer;
  if (pixelBuffer) {
    CFRetain(pixelBuffer);
  }
  if (v47) {
    CFRelease(v47);
  }
  uint64_t v48 = *(const void **)(a1 + 112);
  *(void *)(a1 + 112) = a5;
  if (a5) {
    CFRetain(a5);
  }
  if (v48) {
    CFRelease(v48);
  }
  *(void *)(a1 + 120) = a3;
  *(_DWORD *)(a1 + 128) = a4;
  *(unsigned char *)(a1 + 96) = 1;
LABEL_41:
  if (destinationBuffer) {
    CFRelease(destinationBuffer);
  }
}

void srcconduit_stopRetrying(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 96))
  {
    dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 88), 0xFFFFFFFFFFFFFFFFLL, 0, 0);
    uint64_t v2 = *(const void **)(a1 + 104);
    if (v2)
    {
      CFRelease(v2);
      *(void *)(a1 + 104) = 0;
    }
    uint64_t v3 = *(const void **)(a1 + 112);
    if (v3)
    {
      CFRelease(v3);
      *(void *)(a1 + 112) = 0;
    }
    *(void *)(a1 + 120) = 0;
    *(_DWORD *)(a1 + 128) = 0;
    *(unsigned char *)(a1 + 96) = 0;
  }
}

uint64_t __fvdsrcconduit_stop_block_invoke(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (*(_DWORD *)(result + 136))
  {
    srcconduit_stopRetrying(result);
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)(v3 + 136) = 0;
    uint64_t v4 = *(void (**)(void))(v3 + 80);
    if (v4) {
      v4(*(void *)(v3 + 64));
    }
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return result;
}

uint64_t __fvdsrcconduit_suspend_block_invoke(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 40);
  if (*(_DWORD *)(v1 + 136))
  {
    *(_DWORD *)(v1 + 136) = 1;
  }
  else
  {
    uint64_t v2 = result;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    uint64_t result = fig_log_call_emit_and_clean_up_after_send_and_compose();
    *(_DWORD *)(*(void *)(*(void *)(v2 + 32) + 8) + 24) = -12070;
  }
  return result;
}

uint64_t __fvdsrcconduit_resume_block_invoke(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 40);
  if (*(_DWORD *)(v1 + 136) == 1)
  {
    *(_DWORD *)(v1 + 136) = 2;
  }
  else
  {
    uint64_t v2 = result;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    uint64_t result = fig_log_call_emit_and_clean_up_after_send_and_compose();
    *(_DWORD *)(*(void *)(*(void *)(v2 + 32) + 8) + 24) = -12070;
  }
  return result;
}

CMTimebaseRef createTimebaseWithMasterClock(uint64_t a1, OpaqueCMClock *HostTimeClock)
{
  CMTimebaseRef timebaseOut = 0;
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (!HostTimeClock) {
    CMClockRef HostTimeClock = CMClockGetHostTimeClock();
  }
  CMTimebaseRef result = (CMTimebaseRef)CMTimebaseCreateWithSourceClock(v3, HostTimeClock, &timebaseOut);
  if (!result)
  {
    if (timebaseOut)
    {
      cdsTrigger_setTimebase(a1, timebaseOut);
      *(unsigned char *)(a1 + 88) = 0;
      CMTimebaseRef result = timebaseOut;
      if (!timebaseOut) {
        return result;
      }
      CFRelease(timebaseOut);
    }
    return 0;
  }
  return result;
}

uint64_t FigCDSTriggerSetTimebase(uint64_t a1, const void *a2)
{
  if (a1)
  {
    if (a2)
    {
      cdsTrigger_setTimebase(a1, a2);
      *(unsigned char *)(a1 + 88) = 1;
    }
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void cdsTrigger_setTimebase(uint64_t a1, CFTypeRef cf)
{
  CFTypeRef v2 = *(CFTypeRef *)(a1 + 80);
  if (v2 != cf)
  {
    if (v2)
    {
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterRemoveListener();
      uint64_t v5 = *(const void **)(a1 + 80);
      *(void *)(a1 + 80) = cf;
      CFRetain(cf);
      if (v5) {
        CFRelease(v5);
      }
    }
    else
    {
      *(void *)(a1 + 80) = cf;
      CFRetain(cf);
    }
    if (*(void *)(a1 + 80))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterAddListener();
    }
  }
}

CMTime *FigCDSTriggerGetCurrentTime@<X0>(uint64_t a1@<X0>, CMTime *a2@<X8>)
{
  uint64_t v2 = MEMORY[0x1E4F1F9F8];
  *(_OWORD *)&a2->CMTimeValue value = *MEMORY[0x1E4F1F9F8];
  a2->CMTimeEpoch epoch = *(void *)(v2 + 16);
  if (a1 && (CFAllocatorRef v3 = *(OpaqueCMTimebase **)(a1 + 80)) != 0) {
    return CMTimebaseGetTime(a2, v3);
  }
  else {
    return (CMTime *)FigSignalErrorAt();
  }
}

uint64_t FigCDSTriggerSetCurrentTime(uint64_t a1, CMTime *a2)
{
  if (a1 && (CFAllocatorRef v3 = *(OpaqueCMTimebase **)(a1 + 80)) != 0)
  {
    if (*(unsigned char *)(a1 + 88))
    {
      return 0;
    }
    else
    {
      CMTime v5 = *a2;
      return CMTimebaseSetTime(v3, &v5);
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigCDSTriggerSetRate(uint64_t a1, Float64 a2)
{
  if (a1 && (CFAllocatorRef v3 = *(OpaqueCMTimebase **)(a1 + 80)) != 0)
  {
    if (!*(unsigned char *)(a1 + 88)) {
      CMTimebaseSetRate(v3, a2);
    }
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

double FigCDSTriggerGetRate(uint64_t a1)
{
  if (a1 && (uint64_t v1 = *(OpaqueCMTimebase **)(a1 + 80)) != 0)
  {
    return CMTimebaseGetRate(v1);
  }
  else
  {
    FigSignalErrorAt();
    return 0.0;
  }
}

uint64_t FigCDSTriggerStart(uint64_t a1)
{
  if (a1 && (uint64_t v2 = *(OpaqueCMTimebase **)(a1 + 80)) != 0)
  {
    if (!*(unsigned char *)(a1 + 88))
    {
      uint64_t v3 = MEMORY[0x1E4F1FA48];
      long long v4 = *MEMORY[0x1E4F1FA48];
      *(_OWORD *)(a1 + 52) = *MEMORY[0x1E4F1FA48];
      CMTimeEpoch v5 = *(void *)(v3 + 16);
      *(void *)(a1 + 68) = v5;
      *(_OWORD *)&v7.CMTimeValue value = v4;
      v7.CMTimeEpoch epoch = v5;
      CMTimebaseSetTime(v2, &v7);
    }
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigCDSTriggerResume(uint64_t a1)
{
  if (a1 && (uint64_t v2 = *(OpaqueCMTimebase **)(a1 + 80)) != 0 && *(unsigned char *)(a1 + 90))
  {
    if (!*(unsigned char *)(a1 + 88))
    {
      CMTime v4 = *(CMTime *)(a1 + 52);
      CMTimebaseSetTime(v2, &v4);
      CMTimebaseSetRate(*(CMTimebaseRef *)(a1 + 80), 1.0);
    }
    *(unsigned char *)(a1 + 90) = 0;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigCDSTriggerPause(uint64_t a1)
{
  if (a1 && (uint64_t v2 = *(OpaqueCMTimebase **)(a1 + 80)) != 0 && !*(unsigned char *)(a1 + 90))
  {
    if (!*(unsigned char *)(a1 + 88))
    {
      CMTimebaseSetRate(v2, 0.0);
      CMTimebaseGetTime(&v4, *(CMTimebaseRef *)(a1 + 80));
      *(CMTime *)(a1 + 52) = v4;
    }
    *(unsigned char *)(a1 + 90) = 1;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigCDSTriggerStop(uint64_t a1)
{
  if (!a1) {
    goto LABEL_8;
  }
  if (FigCDSTimerIsOn(*(void *)(a1 + 40))) {
    FigCDSTimerStop(*(void *)(a1 + 40));
  }
  if (*(void *)(a1 + 80))
  {
    if (!*(unsigned char *)(a1 + 88))
    {
      CMTimeMake(&v3, 0, 1);
      *(CMTime *)(a1 + 52) = v3;
      CMTimebaseSetRate(*(CMTimebaseRef *)(a1 + 80), 0.0);
    }
    return 0;
  }
  else
  {
LABEL_8:
    return FigSignalErrorAt();
  }
}

uint64_t FigCDSTriggerManualTrigger(uint64_t a1)
{
  if (a1 && *(void *)(a1 + 80))
  {
    if (*(void *)(a1 + 24))
    {
      uint64_t v2 = FigCFWeakReferenceHolderCopyReferencedObject();
      if (v2)
      {
        CMTime v3 = (const void *)v2;
        CMTime v4 = *(void (**)(void, CMTime *, const void *))(a1 + 24);
        CMTimebaseGetTime(&v6, *(CMTimebaseRef *)(a1 + 80));
        v4(0, &v6, v3);
        CFRelease(v3);
      }
    }
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

NSObject *FigCDSTriggerScheduleEvent(uint64_t a1, uint64_t a2, long long *a3)
{
  unsigned int v9 = 0;
  if (a1)
  {
    CMTimebaseRef result = *(NSObject **)(a1 + 104);
    if (result)
    {
      context[0] = a1;
      context[1] = a2;
      long long v6 = *a3;
      uint64_t v7 = *((void *)a3 + 2);
      int v8 = &v9;
      dispatch_sync_f(result, context, (dispatch_function_t)scheduleEventDo);
      return v9;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t scheduleEventDo(uint64_t *a1)
{
  uint64_t v2 = *a1;
  CMTime v11 = *(CMTime *)(a1 + 2);
  CMTime v3 = *(OpaqueCMTimebase **)(v2 + 80);
  if (v3)
  {
    if (CMTimebaseGetRate(v3) != 0.0 && !FigCDSTimerIsOn(*(void *)(v2 + 40))) {
      FigCDSTimerStart(*(void *)(v2 + 40));
    }
    CMTime time = v11;
    double Seconds = CMTimeGetSeconds(&time);
    memset(&v9, 0, sizeof(v9));
    CMTimebaseGetTime(&v9, *(CMTimebaseRef *)(v2 + 80));
    CMTime time = v9;
    double v8 = Seconds - CMTimeGetSeconds(&time);
    CFNumberRef v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberCGFloatType, &v8);
    CFArrayAppendValue(*(CFMutableArrayRef *)(v2 + 96), v5);
    CFRelease(v5);
    uint64_t result = 0;
  }
  else
  {
    uint64_t result = FigSignalErrorAt();
  }
  uint64_t v7 = (_DWORD *)a1[5];
  if (v7) {
    *uint64_t v7 = result;
  }
  return result;
}

uint64_t FigCDSTriggerCreate(OpaqueCMClock *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  *a6 = 0;
  if (a2 < 1) {
    return 4294950096;
  }
  CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  MEMORY[0x19970EE10](&FigCDSTriggerLocalGetTypeID_sRegisterFigCDSTriggerOnce, RegisterFigCDSTriggerClass);
  uint64_t Instance = _CFRuntimeCreateInstance();
  *(_WORD *)(Instance + 88) = 0;
  *(unsigned char *)(Instance + 90) = 0;
  CMTimeMake(&v18, 0, 1);
  *(CMTime *)(Instance + 52) = v18;
  if (a3 | a4)
  {
    if (a5)
    {
      *(void *)(Instance + 24) = a3;
      *(void *)(Instance + 32) = a4;
      uint64_t v14 = FigCFWeakReferenceHolderCreateWithReferencedObject();
      *(void *)(Instance + 16) = v14;
      if (!v14)
      {
        uint64_t v16 = FigSignalErrorAt();
        goto LABEL_9;
      }
    }
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable(v12, 0, MEMORY[0x1E4F1D510]);
  *(void *)(Instance + 96) = Mutable;
  if (!Mutable)
  {
    uint64_t v16 = 0;
    goto LABEL_9;
  }
  createTimebaseWithMasterClock(Instance, a1);
  __sprintf_chk(label, 0, 0x100uLL, "com.apple.cktrigger._jobQueue<%p>", (const void *)Instance);
  *(void *)(Instance + 104) = dispatch_queue_create(label, 0);
  *(_DWORD *)(Instance + 48) = a2;
  uint64_t v16 = FigCDSTimerCreate(a2, (uint64_t)onTimerTimeout, Instance, (uint64_t *)(Instance + 40));
  if (v16)
  {
LABEL_9:
    CFRelease((CFTypeRef)Instance);
    return v16;
  }
  *a6 = Instance;
  return v16;
}

void onTimerTimeout(uint64_t a1)
{
  if (*(void *)(a1 + 104))
  {
    uint64_t v2 = malloc_type_calloc(1uLL, 8uLL, 0x2004093837F09uLL);
    if (!v2) {
      return;
    }
    void *v2 = a1;
    dispatch_sync_f(*(dispatch_queue_t *)(a1 + 104), v2, (dispatch_function_t)onTimerTimeoutDo);
  }
  if (*(void *)(a1 + 32))
  {
    CMTime v3 = *(OpaqueCMTimebase **)(a1 + 80);
    if (v3)
    {
      memset(&v8, 0, sizeof(v8));
      CMTimebaseGetTime(&v8, v3);
      uint64_t v4 = FigCFWeakReferenceHolderCopyReferencedObject();
      if (v4)
      {
        CFNumberRef v5 = (const void *)v4;
        long long v6 = *(void (**)(CMTime *, uint64_t))(a1 + 32);
        CMTime v7 = v8;
        v6(&v7, v4);
        CFRelease(v5);
      }
    }
    else
    {
      FigSignalErrorAt();
    }
  }
}

uint64_t RegisterFigCDSTriggerClass()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sFigCDSTriggerID = result;
  return result;
}

double FigCDSTriggerInit(_OWORD *a1)
{
  double result = 0.0;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  return result;
}

void FigCDSTrigger_Finalize(uint64_t a1)
{
  dispatch_release(*(dispatch_object_t *)(a1 + 104));
  uint64_t v2 = *(const void **)(a1 + 96);
  if (v2) {
    CFRelease(v2);
  }
  CMTime v3 = *(const void **)(a1 + 40);
  if (v3) {
    CFRelease(v3);
  }
  if (*(void *)(a1 + 80))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    if (!*(unsigned char *)(a1 + 88)) {
      CMTimebaseSetRate(*(CMTimebaseRef *)(a1 + 80), 0.0);
    }
    uint64_t v4 = *(const void **)(a1 + 80);
    if (v4) {
      CFRelease(v4);
    }
  }
  CFNumberRef v5 = *(const void **)(a1 + 16);
  if (v5)
  {
    CFRelease(v5);
  }
}

__CFString *FigCDSTriggerCopyDebugDescription(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<FigCDSTrigger %p>", a1);
  return Mutable;
}

void cdsTrigger_timebaseRateChanged(uint64_t a1, uint64_t a2)
{
  float Rate = CMTimebaseGetRate(*(CMTimebaseRef *)(a2 + 80));
  if (Rate == 0.0 && !*(unsigned char *)(a2 + 90))
  {
    FigCDSTriggerPause(a2);
  }
  else if (Rate != 0.0 && *(unsigned char *)(a2 + 90))
  {
    FigCDSTriggerResume(a2);
  }
}

void onTimerTimeoutDo(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (!*(unsigned char *)(*a1 + 90))
  {
    if (!CFArrayGetCount(*(CFArrayRef *)(v2 + 96)) && FigCDSTimerIsOn(*(void *)(v2 + 40))) {
      FigCDSTimerStop(*(void *)(v2 + 40));
    }
    if (CFArrayGetCount(*(CFArrayRef *)(v2 + 96)) >= 1)
    {
      CFIndex v3 = 0;
      int v4 = 0;
      int v5 = 0;
      CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      do
      {
        CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v2 + 96), v3);
        valuePtr.CMTimeValue value = 0;
        CFNumberGetValue(ValueAtIndex, kCFNumberCGFloatType, &valuePtr);
        *(double *)&valuePtr.CMTimeValue value = *(double *)&valuePtr.value + (double)*(int *)(v2 + 48) / -1000.0;
        if (*(double *)&valuePtr.value <= 0.0)
        {
          CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v2 + 96), v3);
          --v4;
          int v5 = 1;
        }
        else
        {
          CFNumberRef v8 = CFNumberCreate(v6, kCFNumberCGFloatType, &valuePtr);
          CFArraySetValueAtIndex(*(CFMutableArrayRef *)(v2 + 96), v3, v8);
          CFRelease(v8);
        }
        CFIndex v3 = ++v4;
      }
      while (CFArrayGetCount(*(CFArrayRef *)(v2 + 96)) > v4);
      if (v5 && *(void *)(v2 + 24))
      {
        CMTime v9 = *(OpaqueCMTimebase **)(v2 + 80);
        if (v9)
        {
          memset(&valuePtr, 0, sizeof(valuePtr));
          CMTimebaseGetTime(&valuePtr, v9);
          uint64_t v10 = FigCFWeakReferenceHolderCopyReferencedObject();
          if (v10)
          {
            CMTime v11 = (const void *)v10;
            CFAllocatorRef v12 = *(void (**)(void, CMTime *, uint64_t))(v2 + 24);
            CMTime v13 = valuePtr;
            v12(0, &v13, v10);
            CFRelease(v11);
          }
        }
        else
        {
          FigSignalErrorAt();
        }
      }
    }
  }
  free(a1);
}

uint64_t FigTTMLDocumentWriterCreateRegionStyleOptimizer(uint64_t a1, const void *a2, void *a3)
{
  if (a2 && a3)
  {
    FigTTMLDocumentWriterGetClassID();
    uint64_t v5 = CMDerivedObjectCreate();
    if (!v5)
    {
      FigTTMLDocumentWriterGetCMBaseObject(0);
      uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
      *uint64_t DerivedStorage = CFRetain(a2);
      *a3 = 0;
    }
    return v5;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t figTTMLDocumentWriterRegionStyleOptimizer_Invalidate()
{
  return 0;
}

void figTTMLDocumentWriterRegionStyleOptimizer_Finalize(uint64_t a1)
{
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)DerivedStorage) {
    CFRelease(*(CFTypeRef *)DerivedStorage);
  }
  uint64_t v2 = *(const void **)(DerivedStorage + 8);
  if (v2)
  {
    CFRelease(v2);
  }
}

CFStringRef figTTMLDocumentWriterRegionStyleOptimizer_CopyDebugDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"figTTMLDocumentWriterRegionStyleOptimizer[%p]", a1);
}

uint64_t figTTMLDocumentWriterRegionStyleOptimizer_StartElement(uint64_t a1, int a2)
{
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  uint64_t v4 = FigTTMLDocumentWriterElementCreate(*MEMORY[0x1E4F1CF80], a2, *(void *)(DerivedStorage + 16), (uint64_t *)&cf);
  if (v4)
  {
    CFTypeRef v7 = cf;
    if (!cf) {
      return v4;
    }
    goto LABEL_9;
  }
  uint64_t v5 = *(void *)(DerivedStorage + 16);
  if (v5)
  {
    FigTTMLDocumentWriterElementAddChildElement(v5, cf);
  }
  else
  {
    if (cf) {
      CFTypeRef v6 = CFRetain(cf);
    }
    else {
      CFTypeRef v6 = 0;
    }
    *(void *)(DerivedStorage + 8) = v6;
  }
  CFTypeRef v7 = cf;
  *(void *)(DerivedStorage + 16) = cf;
  if (v7) {
LABEL_9:
  }
    CFRelease(v7);
  return v4;
}

uint64_t figTTMLDocumentWriterRegionStyleOptimizer_EndElement(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v2 = *(void **)(DerivedStorage + 16);
  if (v2 != *(void **)(DerivedStorage + 8)) {
    goto LABEL_10;
  }
  uint64_t v10 = 0;
  long long context = 0u;
  *(_OWORD *)CFTypeRef cf = 0u;
  CFArrayRef theArray = 0;
  long long v11 = xmmword_1949974D0;
  if (!FigTTMLDocumentWriterElementCopyElementsAtPath((CFArrayRef *)v2, (uint64_t)&v11, 4, &theArray))
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], 0);
    cf[0] = v2;
    cf[1] = Mutable;
    *((void *)&context + 1) = @"http://www.w3.org/ns/ttml#styling textAlign";
    CFArrayRef v4 = theArray;
    v13.size_t length = CFArrayGetCount(theArray);
    v13.CFIndex location = 0;
    CFArrayApplyFunction(v4, v13, (CFArrayApplierFunction)optimizeRegionStyleAttributesAux, &context);
  }
  if (theArray) {
    CFRelease(theArray);
  }
  if (cf[1]) {
    CFRelease(cf[1]);
  }
  uint64_t result = FigTTMLDocumentWriterElementWriteTree(*(CFArrayRef **)(DerivedStorage + 8), *(void *)DerivedStorage);
  if (!result)
  {
    uint64_t v2 = *(void **)(DerivedStorage + 16);
LABEL_10:
    uint64_t ParentElement = FigTTMLDocumentWriterElementGetParentElement((uint64_t)v2);
    uint64_t result = 0;
    *(void *)(DerivedStorage + 16) = ParentElement;
  }
  return result;
}

uint64_t figTTMLDocumentWriterRegionStyleOptimizer_AddCaptionData(uint64_t a1, const void *a2)
{
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigTTMLDocumentWriterElementAddChildElement(*(void *)(DerivedStorage + 16), a2);
  return 0;
}

uint64_t figTTMLDocumentWriterRegionStyleOptimizer_SetAttribute(uint64_t a1, const void *a2, const void *a3)
{
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigTTMLDocumentWriterElementSetAttribute(*(void *)(DerivedStorage + 16), a2, a3);
  return 0;
}

uint64_t figTTMLDocumentWriterRegionStyleOptimizer_Flush(uint64_t a1)
{
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (DerivedStorage[2]) {
    return 4294950721;
  }
  uint64_t v3 = *DerivedStorage;

  return FigTTMLDocumentWriterFlush(v3);
}

void optimizeRegionStyleAttributesAux(uint64_t a1, uint64_t a2)
{
  CFTypeRef Attribute = FigTTMLDocumentWriterElementGetAttribute(a1, @"http://www.w3.org/XML/1998/namespace id");
  *(void *)a2 = Attribute;
  if (Attribute)
  {
    CFTypeID v5 = CFGetTypeID(Attribute);
    if (v5 == CFStringGetTypeID() && !FigTTMLDocumentWriterElementGetAttribute(a1, *(const void **)(a2 + 8)))
    {
      CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(a2 + 24));
      FigTTMLDocumentWriterElementWalkTree(*(CFArrayRef **)(a2 + 16), (uint64_t (*)(CFArrayRef *, uint64_t))accumulateAttributeValueCount, 0, 0, a2);
      v7[0] = *(const void **)MEMORY[0x1E4F1D260];
      CFTypeRef v6 = v7[0];
      v7[1] = 0;
      CFDictionaryApplyFunction(*(CFDictionaryRef *)(a2 + 24), (CFDictionaryApplierFunction)findMostCommonStyleValue_0, v7);
      if (v7[0] != v6)
      {
        FigTTMLDocumentWriterElementSetAttribute(a1, *(const void **)(a2 + 8), v7[0]);
        *(const void **)(a2 + 32) = v7[0];
        FigTTMLDocumentWriterElementWalkTree(*(CFArrayRef **)(a2 + 16), (uint64_t (*)(CFArrayRef *, uint64_t))removeUnnecesaryAttribute, 0, 0, a2);
      }
    }
  }
}

uint64_t accumulateAttributeValueCount(uint64_t a1, uint64_t a2)
{
  FigTTMLDocumentWriterElementGetAttribute(a1, @"region");
  if (FigCFEqual() && FigTTMLDocumentWriterElementGetElementType(a1) == 4)
  {
    CFTypeRef Attribute = FigTTMLDocumentWriterElementGetAttribute(a1, *(const void **)(a2 + 8));
    CFDictionaryRef v5 = *(const __CFDictionary **)(a2 + 24);
    if (Attribute)
    {
      uint64_t v6 = (uint64_t)CFDictionaryGetValue(v5, Attribute) + 1;
      CFDictionaryRef v5 = *(const __CFDictionary **)(a2 + 24);
      CFTypeRef v7 = Attribute;
    }
    else
    {
      CFTypeRef v7 = (const void *)*MEMORY[0x1E4F1D260];
      uint64_t v6 = 0x7FFFFFFFLL;
    }
    CFDictionarySetValue(v5, v7, (const void *)v6);
  }
  return 0;
}

uint64_t findMostCommonStyleValue_0(uint64_t result, int a2, uint64_t a3)
{
  if (*(_DWORD *)(a3 + 8) < a2)
  {
    *(void *)a3 = result;
    *(_DWORD *)(a3 + 8) = a2;
  }
  return result;
}

uint64_t removeUnnecesaryAttribute(uint64_t a1, uint64_t a2)
{
  if (FigCFEqual())
  {
    FigTTMLDocumentWriterElementGetAttribute(a1, *(const void **)(a2 + 8));
    if (FigCFEqual()) {
      FigTTMLDocumentWriterElementRemoveAttribute(a1, *(const void **)(a2 + 8));
    }
  }
  return 0;
}

uint64_t FigAttributePartitionGeneratorGetTypeID()
{
  return sFigAttributePartitionGeneratorID;
}

uint64_t fapg_Register()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sFigAttributePartitionGeneratorID = result;
  return result;
}

uint64_t FigAttributePartitionGeneratorAddElement(CFMutableArrayRef *a1, const void *a2, uint64_t a3)
{
  if (a1 && a3 && !CFDictionaryGetValue(a1[3], a2))
  {
    CFGetAllocator(a1);
    MEMORY[0x19970EE10](&FigAttributePartitionElementGetTypeID_sRegisterFigAttributePartitionElementOnce, partitionElement_Register);
    uint64_t Instance = _CFRuntimeCreateInstance();
    if (Instance)
    {
      uint64_t v6 = (void *)Instance;
      uint64_t MutableCopy = FigCFDictionaryCreateMutableCopy();
      if (MutableCopy)
      {
        uint64_t v8 = MutableCopy;
        if (a2) {
          CFTypeRef v9 = CFRetain(a2);
        }
        else {
          CFTypeRef v9 = 0;
        }
        void v6[2] = v9;
        v6[3] = v8;
        goto LABEL_10;
      }
      uint64_t v10 = FigSignalErrorAt();
      CFRelease(v6);
    }
    else
    {
      uint64_t v10 = FigSignalErrorAt();
    }
    if (v10) {
      return v10;
    }
    uint64_t v6 = 0;
LABEL_10:
    CFArrayAppendValue(a1[2], v6);
    CFDictionarySetValue(a1[3], a2, v6);
    if (v6) {
      CFRelease(v6);
    }
    return 0;
  }

  return FigSignalErrorAt();
}

uint64_t FigAttributePartitionGeneratorPerformPartitioning(uint64_t a1, CFMutableDictionaryRef *a2)
{
  if (a1)
  {
    *(unsigned char *)(a1 + 32) = 1;
    FigCFArrayApplyFunction();
    context[1] = 0;
    uint64_t v11 = 0;
    context[0] = a1;
    CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 64), (CFDictionaryApplierFunction)fapg_eachUniquenesEntry, context);
    uint64_t v5 = v11;
    if (!v11)
    {
      FigCFArrayApplyFunction();
      CFAllocatorRef v6 = CFGetAllocator((CFTypeRef)a1);
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v6, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (Mutable)
      {
        CFMutableDictionaryRef v8 = Mutable;
        FigCFArrayApplyFunction();
        uint64_t v5 = 0;
        *a2 = v8;
      }
      else
      {
        return FigSignalErrorAt();
      }
    }
    return v5;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void fapg_applyElementPassOne(void *a1, uint64_t a2)
{
  if (!*(_DWORD *)(a2 + 8))
  {
    CFArrayRef v4 = *(const void **)a2;
    if (a1)
    {
      uint64_t v5 = (const void *)a1[3];
      if (v5)
      {
        CFDictionaryRef v6 = (const __CFDictionary *)CFRetain(v5);
        if (v6)
        {
          CFGetAllocator(a1);
          uint64_t MutableCopy = (const void *)FigCFDictionaryCreateMutableCopy();
          if (MutableCopy)
          {
            CFMutableDictionaryRef v8 = MutableCopy;
            CFTypeRef v9 = (const void *)a1[4];
            a1[4] = MutableCopy;
            CFRetain(MutableCopy);
            if (v9) {
              CFRelease(v9);
            }
            CFRelease(v8);
            goto LABEL_11;
          }
        }
      }
      else
      {
        CFDictionaryRef v6 = 0;
      }
    }
    else
    {
      int v13 = FigSignalErrorAt();
      CFDictionaryRef v6 = 0;
      CFMutableDictionaryRef Mutable = 0;
      if (v13) {
        goto LABEL_24;
      }
    }
    int v10 = FigSignalErrorAt();
    if (v10)
    {
      int v13 = v10;
      goto LABEL_23;
    }
LABEL_11:
    CFAllocatorRef v11 = CFGetAllocator(v4);
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v11, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    context[1] = Mutable;
    uint64_t v18 = 0;
    context[0] = v4;
    CFDictionaryApplyFunction(v6, (CFDictionaryApplierFunction)fapg_buildUniquenessMapApplierFunction, context);
    int v13 = v18;
    if (!v18)
    {
      if (a1)
      {
        if (Mutable)
        {
          CFGetAllocator(a1);
          uint64_t v14 = (const void *)FigCFDictionaryCreateMutableCopy();
          if (v14)
          {
            uint64_t v15 = v14;
            uint64_t v16 = (const void *)a1[5];
            a1[5] = v14;
            CFRetain(v14);
            if (v16) {
              CFRelease(v16);
            }
            CFRelease(v15);
            goto LABEL_18;
          }
        }
      }
      int v13 = FigSignalErrorAt();
      if (!v13)
      {
LABEL_25:
        if (!Mutable)
        {
LABEL_19:
          if (v6) {
            CFRelease(v6);
          }
          return;
        }
LABEL_18:
        CFRelease(Mutable);
        goto LABEL_19;
      }
LABEL_24:
      *(_DWORD *)(a2 + 8) = v13;
      goto LABEL_25;
    }
    if (Mutable) {
      CFRelease(Mutable);
    }
LABEL_23:
    CFMutableDictionaryRef Mutable = 0;
    goto LABEL_24;
  }
}

void fapg_applyElementPassTwo(void *a1, uint64_t *a2)
{
  if (*((_DWORD *)a2 + 2)) {
    return;
  }
  uint64_t v4 = *a2;
  if (a1)
  {
    uint64_t v5 = (const void *)a1[4];
    if (v5) {
      CFTypeRef v6 = CFRetain(v5);
    }
    else {
      CFTypeRef v6 = 0;
    }
    CFTypeRef v7 = (const void *)a1[5];
    if (v7) {
      CFDictionaryRef v8 = (const __CFDictionary *)CFRetain(v7);
    }
    else {
      CFDictionaryRef v8 = 0;
    }
  }
  else
  {
    int v12 = FigSignalErrorAt();
    if (v12)
    {
      CFMutableArrayRef v11 = 0;
      CFDictionaryRef v8 = 0;
      CFTypeRef v6 = 0;
      goto LABEL_23;
    }
    int v12 = FigSignalErrorAt();
    CFDictionaryRef v8 = 0;
    CFTypeRef v6 = 0;
    CFMutableArrayRef v11 = 0;
    if (v12) {
      goto LABEL_23;
    }
  }
  CFAllocatorRef v9 = CFGetAllocator(a1);
  CFMutableArrayRef Mutable = CFArrayCreateMutable(v9, 0, MEMORY[0x1E4F1D510]);
  CFMutableArrayRef v11 = Mutable;
  if (!Mutable) {
    goto LABEL_22;
  }
  context[1] = Mutable;
  uint64_t v15 = 0;
  context[0] = v4;
  CFDictionaryApplyFunction(v8, (CFDictionaryApplierFunction)fapg_updateEachReference, context);
  int v12 = v15;
  if (v15)
  {
LABEL_23:
    *((_DWORD *)a2 + 2) = v12;
LABEL_24:
    if (!v11) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  if (!a1)
  {
LABEL_22:
    int v12 = FigSignalErrorAt();
    if (!v12) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  int v13 = (const void *)a1[6];
  a1[6] = v11;
  CFRetain(v11);
  if (v13) {
    CFRelease(v13);
  }
LABEL_14:
  CFRelease(v11);
LABEL_15:
  if (v8) {
    CFRelease(v8);
  }
  if (v6) {
    CFRelease(v6);
  }
}

void fapg_buildPartitionCollection(void *cf, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 16)) {
    return;
  }
  if (cf
    && (CFTypeID v4 = CFGetTypeID(cf),
        MEMORY[0x19970EE10](&FigAttributePartitionGetTypeID_sRegisterFigAttributePartitionOnce, partition_Register),
        v4 == sFigAttributePartitionID)
    && (uint64_t v5 = (const void *)cf[2]) != 0)
  {
    CFTypeRef v6 = CFRetain(v5);
    CFTypeRef v7 = v6;
    if (v6)
    {
      CFTypeID v8 = CFGetTypeID(v6);
      if (v8 == CFStringGetTypeID())
      {
        CFAllocatorRef v9 = (const void *)cf[3];
        if (v9)
        {
          CFTypeRef v10 = CFRetain(v9);
          CFDictionarySetValue(*(CFMutableDictionaryRef *)(a2 + 8), v7, v10);
          if (v10) {
            CFRelease(v10);
          }
        }
        else
        {
          CFDictionarySetValue(*(CFMutableDictionaryRef *)(a2 + 8), v7, 0);
        }
LABEL_16:
        CFRelease(v7);
        return;
      }
    }
  }
  else
  {
    CFTypeRef v7 = 0;
  }
  int v11 = FigSignalErrorAt();
  if (v11) {
    *(_DWORD *)(a2 + 16) = v11;
  }
  if (v7) {
    goto LABEL_16;
  }
}

uint64_t FigAttributePartitionGeneratorCopyPartitionReferences(uint64_t a1, const void *a2, void *a3)
{
  if (a1 && a2 && a3 && *(unsigned char *)(a1 + 32) && (int Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 24), a2)) != 0)
  {
    CFTypeRef v5 = (CFTypeRef)Value[6];
    if (v5) {
      CFTypeRef v5 = CFRetain(v5);
    }
    *a3 = v5;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigAttributePartitionGeneratorCreate(uint64_t a1, uint64_t *a2)
{
  if (a2)
  {
    CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    MEMORY[0x19970EE10](&FigAttributePartitionGeneratorGetTypeID_sRegisterFigAttributePartitionGeneratorOnce, fapg_Register);
    uint64_t Instance = _CFRuntimeCreateInstance();
    if (Instance)
    {
      uint64_t v5 = Instance;
      CFMutableArrayRef Mutable = CFArrayCreateMutable(v3, 0, MEMORY[0x1E4F1D510]);
      if (Mutable)
      {
        CFMutableArrayRef v7 = Mutable;
        CFMutableArrayRef v8 = CFArrayCreateMutable(v3, 0, MEMORY[0x1E4F1D510]);
        if (v8)
        {
          CFMutableArrayRef v9 = v8;
          CFMutableDictionaryRef v10 = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          if (v10)
          {
            CFMutableDictionaryRef v11 = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
            if (v11)
            {
              CFMutableDictionaryRef v12 = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
              if (v12)
              {
                CFMutableDictionaryRef v13 = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                if (v13)
                {
                  uint64_t v14 = 0;
                  *(unsigned char *)(v5 + 32) = 0;
                  *(void *)(v5 + 40) = v9;
                  *(void *)(v5 + 16) = v7;
                  *(void *)(v5 + 24) = v10;
                  *(void *)(v5 + 56) = v11;
                  *(void *)(v5 + 64) = v12;
                  *(void *)(v5 + 72) = v13;
                  *a2 = v5;
                  return v14;
                }
              }
              goto LABEL_19;
            }
          }
          else
          {
            CFMutableDictionaryRef v11 = 0;
          }
          CFMutableDictionaryRef v12 = 0;
LABEL_19:
          uint64_t v14 = FigSignalErrorAt();
          CFRelease(v7);
          CFRelease(v9);
          if (v10) {
            CFRelease(v10);
          }
          CFRelease((CFTypeRef)v5);
          if (v11) {
            CFRelease(v11);
          }
          if (!v12) {
            return v14;
          }
          CFMutableDictionaryRef v16 = v12;
          goto LABEL_25;
        }
        uint64_t v14 = FigSignalErrorAt();
        CFRelease(v7);
      }
      else
      {
        uint64_t v14 = FigSignalErrorAt();
      }
      CFMutableDictionaryRef v16 = (CFMutableDictionaryRef)v5;
LABEL_25:
      CFRelease(v16);
      return v14;
    }
  }

  return FigSignalErrorAt();
}

double fapg_Init(_OWORD *a1)
{
  double result = 0.0;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  return result;
}

void fapg_Finalize(void *a1)
{
  uint64_t v2 = (const void *)a1[2];
  if (v2) {
    CFRelease(v2);
  }
  CFAllocatorRef v3 = (const void *)a1[3];
  if (v3) {
    CFRelease(v3);
  }
  CFTypeID v4 = (const void *)a1[5];
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = (const void *)a1[8];
  if (v5) {
    CFRelease(v5);
  }
  CFTypeRef v6 = (const void *)a1[7];
  if (v6) {
    CFRelease(v6);
  }
  CFMutableArrayRef v7 = (const void *)a1[9];
  if (v7)
  {
    CFRelease(v7);
  }
}

__CFString *fapg_CopyDebugDesc(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"[FigAttributePartitionGenerator(%p) elements=%p partitions=%p]", a1, *(void *)(a1 + 16), *(void *)(a1 + 40));
  return Mutable;
}

uint64_t partitionElement_Register()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sFigAttributePartitionElementID = result;
  return result;
}

double partitionElement_Init(uint64_t a1)
{
  *(void *)(a1 + 48) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

void partitionElement_Finalize(void *a1)
{
  uint64_t v2 = (const void *)a1[3];
  if (v2) {
    CFRelease(v2);
  }
  CFAllocatorRef v3 = (const void *)a1[2];
  if (v3) {
    CFRelease(v3);
  }
  CFTypeID v4 = (const void *)a1[6];
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = (const void *)a1[4];
  if (v5) {
    CFRelease(v5);
  }
  CFTypeRef v6 = (const void *)a1[5];
  if (v6)
  {
    CFRelease(v6);
  }
}

CFStringRef partitionElement_CopyFormattingDesc(uint64_t a1)
{
  CFArrayRef v2 = *(const __CFArray **)(a1 + 48);
  if (v2)
  {
    CFIndex Count = CFArrayGetCount(v2);
    CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    if (Count < 1)
    {
      CFMutableArrayRef Mutable = 0;
    }
    else
    {
      CFIndex v5 = Count;
      CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
      for (CFIndex i = 0; i != v5; ++i)
      {
        CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 48), i);
        CFStringAppend(Mutable, ValueAtIndex);
        CFStringAppend(Mutable, @" ");
      }
    }
  }
  else
  {
    CFMutableArrayRef Mutable = 0;
    CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  }
  CFMutableArrayRef v9 = @"<no-refs>";
  if (Mutable) {
    CFMutableArrayRef v9 = Mutable;
  }
  CFStringRef v10 = CFStringCreateWithFormat(v4, 0, @"[FigAttributePartitionElement %p]  owner = <%p>\nattributes = %p\nreferences = %@", a1, *(void *)(a1 + 16), *(void *)(a1 + 24), v9);
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v10;
}

void fapg_buildUniquenessMapApplierFunction(CFTypeRef cf, const void *a2, uint64_t a3)
{
  if (*(_DWORD *)(a3 + 16)) {
    return;
  }
  if (!cf || (v6 = *(void **)a3, CFTypeID v7 = CFGetTypeID(cf), v7 != CFStringGetTypeID()))
  {
    int v23 = FigSignalErrorAt();
    unint64_t UInt64 = 0;
    if (!v23) {
      goto LABEL_23;
    }
LABEL_30:
    *(_DWORD *)(a3 + 16) = v23;
    if (!UInt64) {
      return;
    }
    goto LABEL_24;
  }
  CFDictionaryRef v9 = (const __CFDictionary *)v6[7];
  CFMutableArrayRef v8 = (__CFDictionary *)v6[8];
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(v9, cf);
  if (Value)
  {
    CFArrayRef Mutable = Value;
    CFRetain(Value);
    CFIndex Count = CFArrayGetCount(Mutable);
    if (Count >= 1)
    {
      CFIndex v13 = Count;
      CFIndex v14 = 0;
      while (1)
      {
        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(Mutable, v14);
        if (ValueAtIndex)
        {
          CFDictionaryRef v16 = ValueAtIndex;
          CFDictionaryGetValue(ValueAtIndex, @"value");
          if (FigCFEqual()) {
            break;
          }
        }
        if (v13 == ++v14) {
          goto LABEL_12;
        }
      }
      double v24 = CFDictionaryGetValue(v16, @"uniqueID");
      if (v24)
      {
        unint64_t UInt64 = v24;
        CFRetain(v24);
        double v19 = 0;
        goto LABEL_15;
      }
    }
  }
  else
  {
    CFAllocatorRef v17 = CFGetAllocator(v6);
    CFArrayRef Mutable = CFArrayCreateMutable(v17, 0, MEMORY[0x1E4F1D510]);
    CFDictionarySetValue(v9, cf, Mutable);
  }
LABEL_12:
  CFAllocatorRef v18 = CFGetAllocator(v6);
  double v19 = CFDictionaryCreateMutable(v18, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (v6)
  {
    ++v6[6];
    unint64_t UInt64 = (const void *)FigCFNumberCreateUInt64();
LABEL_14:
    CFDictionarySetValue(v19, @"value", a2);
    CFDictionarySetValue(v19, @"uniqueID", UInt64);
    CFArrayAppendValue(Mutable, v19);
LABEL_15:
    if (!CFDictionaryContainsKey(v8, UInt64))
    {
      CFAllocatorRef v21 = CFGetAllocator(v6);
      double v22 = CFDictionaryCreateMutable(v21, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFDictionarySetValue(v22, cf, a2);
      CFDictionarySetValue(v8, UInt64, v22);
      if (v22) {
        CFRelease(v22);
      }
    }
    int v23 = 0;
    if (v19) {
      goto LABEL_19;
    }
    goto LABEL_20;
  }
  int v25 = FigSignalErrorAt();
  unint64_t UInt64 = 0;
  if (!v25) {
    goto LABEL_14;
  }
  int v23 = v25;
  if (v19) {
LABEL_19:
  }
    CFRelease(v19);
LABEL_20:
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v23) {
    goto LABEL_30;
  }
LABEL_23:
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a3 + 8), cf, UInt64);
  if (!UInt64) {
    return;
  }
LABEL_24:

  CFRelease(UInt64);
}

void fapg_eachUniquenesEntry(const void *a1, const __CFDictionary *a2, uint64_t a3)
{
  if (*(_DWORD *)(a3 + 16)) {
    return;
  }
  CFTypeRef v6 = *(CFMutableArrayRef **)a3;
  CFGetAllocator(*(CFTypeRef *)a3);
  MEMORY[0x19970EE10](&FigAttributePartitionGetTypeID_sRegisterFigAttributePartitionOnce, partition_Register);
  uint64_t Instance = (void *)_CFRuntimeCreateInstance();
  CFMutableArrayRef v8 = Instance;
  if (Instance)
  {
    Instance[3] = 0;
    if (a2)
    {
      CFAllocatorRef v9 = CFGetAllocator(Instance);
      CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(v9, 0, a2);
      CFMutableDictionaryRef v11 = MutableCopy;
      CFMutableDictionaryRef v12 = (const void *)v8[3];
      v8[3] = MutableCopy;
      if (MutableCopy) {
        CFRetain(MutableCopy);
      }
      if (v12) {
        CFRelease(v12);
      }
      if (v11) {
        CFRelease(v11);
      }
    }
  }
  else
  {
    int v17 = FigSignalErrorAt();
    if (v17 || (int v17 = FigSignalErrorAt()) != 0)
    {
LABEL_25:
      *(_DWORD *)(a3 + 16) = v17;
      goto LABEL_16;
    }
  }
  CFAllocatorRef v13 = CFGetAllocator(v6);
  CFStringRef v14 = CFStringCreateWithFormat(v13, 0, @"style_%ld", *(void *)(a3 + 8) + 1);
  if (v14)
  {
    CFStringRef v15 = v14;
    if (v8)
    {
      CFDictionaryRef v16 = (const void *)v8[2];
      v8[2] = v14;
      CFRetain(v14);
      if (v16) {
        CFRelease(v16);
      }
    }
    else
    {
      int v18 = FigSignalErrorAt();
      if (v18)
      {
        *(_DWORD *)(a3 + 16) = v18;
        goto LABEL_15;
      }
    }
    CFDictionarySetValue(v6[9], a1, v15);
    CFArrayAppendValue(v6[5], v8);
    ++*(void *)(a3 + 8);
LABEL_15:
    CFRelease(v15);
    goto LABEL_16;
  }
  int v17 = FigSignalErrorAt();
  if (v17) {
    goto LABEL_25;
  }
LABEL_16:
  if (v8)
  {
    CFRelease(v8);
  }
}

uint64_t partition_Register()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sFigAttributePartitionID = result;
  return result;
}

uint64_t partition_Init(uint64_t result)
{
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  return result;
}

void partition_Finalize(uint64_t a1)
{
  CFArrayRef v2 = *(const void **)(a1 + 24);
  if (v2) {
    CFRelease(v2);
  }
  CFAllocatorRef v3 = *(const void **)(a1 + 16);
  if (v3)
  {
    CFRelease(v3);
  }
}

CFStringRef partition_CopyFormattingDesc(uint64_t a1)
{
  uint64_t v1 = @"<NULL>";
  if (*(void *)(a1 + 16)) {
    uint64_t v1 = *(__CFString **)(a1 + 16);
  }
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigAttributePartition %p] name = %@\nattributes = %p", a1, v1, *(void *)(a1 + 24));
}

CFStringRef partition_CopyDebugDesc(uint64_t a1)
{
  uint64_t v1 = @"<NULL>";
  if (*(void *)(a1 + 16)) {
    uint64_t v1 = *(__CFString **)(a1 + 16);
  }
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigAttributePartition %p] name = %@\nattributes = %p", a1, v1, *(void *)(a1 + 24));
}

void fapg_updateEachReference(uint64_t a1, const void *a2, uint64_t a3)
{
  if (!*(_DWORD *)(a3 + 16))
  {
    CFArrayRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(*(void *)a3 + 72), a2);
    if (Value)
    {
      CFIndex v5 = Value;
      CFTypeRef v6 = *(__CFArray **)(a3 + 8);
      CFArrayAppendValue(v6, v5);
    }
  }
}

CFTypeRef xmlCopyMediaPlaylistLocalPath(uint64_t a1)
{
  return xmlCopyMediaPlaylistPath(a1, @"PathToRehosted");
}

CFTypeRef xmlCopyMediaPlaylistPath(uint64_t a1, const __CFString *a2)
{
  uint64_t v3 = *(void *)(a1 + 80);
  FigXMLNodeGetTag(v3);
  int v4 = FigCFEqual();
  if (v3) {
    BOOL v5 = v4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    FigSignalErrorAt();
    return 0;
  }
  Child = FigXMLNodeGetChild(v3, @"MediaPlaylist");
  if (!Child) {
    return 0;
  }
  CFTypeID v7 = FigXMLNodeGetChild((uint64_t)Child, a2);
  ContentAsCFCFStringRef String = (const void *)FigXMLNodeGetContentAsCFString((uint64_t)v7);
  if (!ContentAsCFString) {
    return 0;
  }

  return CFRetain(ContentAsCFString);
}

uint64_t FigHLSPersistentStreamInfoGetClassID()
{
  return sFigHLSPersistentStreamInfoClassID;
}

uint64_t RegisterFigHLSPersistentStreamInfoBaseType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t FigHLSPersistentStreamInfoGetTypeID()
{
  MEMORY[0x19970EE10](&FigHLSPersistentStreamInfoGetClassID_sRegisterFigHLSPersistentStreamInfoBaseTypeOnce, RegisterFigHLSPersistentStreamInfoBaseType);

  return CMBaseClassGetCFTypeID();
}

uint64_t FigHLSPersistentStreamInfoCreate(uint64_t a1, const void *a2, uint64_t a3, const void *a4, const __CFDictionary *a5, CFTypeRef *a6)
{
  CFTypeRef v92 = 0;
  char v91 = 1;
  char v90 = 0;
  CFTypeRef v88 = 0;
  CFTypeRef cf = 0;
  if (!a6 || !a4 || !a2) {
    goto LABEL_165;
  }
  CFMutableArrayRef v8 = a6;
  MEMORY[0x19970EE10](&FigHLSPersistentStreamInfoGetClassID_sRegisterFigHLSPersistentStreamInfoBaseTypeOnce, RegisterFigHLSPersistentStreamInfoBaseType);
  BlockBufferWithCFCFStringRef String = CMDerivedObjectCreate();
  if (BlockBufferWithCFString) {
    goto LABEL_166;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(void *)(DerivedStorage + 32) = FigReadWriteLockCreate();
  *(void *)uint64_t DerivedStorage = a1;
  *(void *)(DerivedStorage + 40) = CFRetain(a2);
  *(int64x2_t *)(DerivedStorage + 128) = vdupq_n_s64(1uLL);
  *(void *)(DerivedStorage + 120) = 0;
  if (a5)
  {
    CFArrayRef Value = CFDictionaryGetValue(a5, @"StreamInfoClientAuditToken");
    if (Value)
    {
      CFDataRef v14 = (const __CFData *)CFRetain(Value);
      *(void *)(DerivedStorage + 144) = v14;
      if (v14)
      {
        *(_OWORD *)buffer = 0u;
        long long v87 = 0u;
        if (CFDataGetLength(v14) != 32)
        {
LABEL_165:
          BlockBufferWithCFCFStringRef String = FigSignalErrorAt();
          goto LABEL_166;
        }
        CFDataRef v15 = *(const __CFData **)(DerivedStorage + 144);
        v99.size_t length = CFDataGetLength(v15);
        v99.CFIndex location = 0;
        CFDataGetBytes(v15, v99, buffer);
        long long v16 = v87;
        *(_OWORD *)(DerivedStorage + 152) = *(_OWORD *)buffer;
        *(_OWORD *)(DerivedStorage + 168) = v16;
      }
    }
    else
    {
      *(void *)(DerivedStorage + 144) = 0;
    }
    int v17 = CFDictionaryGetValue(a5, @"StreamInfoClientBundleIdentifier");
    if (v17) {
      int v17 = CFRetain(v17);
    }
    *(void *)(DerivedStorage + 184) = v17;
    int v18 = CFDictionaryGetValue(a5, @"StreamInfoMemoryPool");
    *(void *)(DerivedStorage + 200) = v18;
    if (v18) {
      CFRetain(v18);
    }
  }
  *(void *)(DerivedStorage + 16) = CFRetain(a4);
  *(unsigned char *)(DerivedStorage + 8) = 0;
  *(unsigned char *)(DerivedStorage + 112) = 0;
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  *(void *)(DerivedStorage + 24) = CFURLCreateCopyAppendingPathComponent(AllocatorForMedia, *(CFURLRef *)(DerivedStorage + 16), *(CFStringRef *)(DerivedStorage + 40), 1u);
  FigCFDictionaryGetBooleanIfPresent();
  FigCFDictionaryGetBooleanIfPresent();
  if (!FigCFURLDoesDirectoryExist()) {
    goto LABEL_165;
  }
  CFAllocatorRef v20 = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFURLRef v21 = CFURLCreateCopyAppendingPathComponent(v20, *(CFURLRef *)(DerivedStorage + 24), @"StreamInfoRoot.xml", 0);
  *(void *)(DerivedStorage + 104) = v21;
  if (!v21) {
    goto LABEL_165;
  }
  if (FigFileDoesFileExist())
  {
    BlockBufferWithCFCFStringRef String = lockLockFile(DerivedStorage);
    if (!BlockBufferWithCFString)
    {
      CFURLRef v22 = 0;
      CFURLRef v85 = 0;
      *(unsigned char *)(DerivedStorage + 112) = v90;
      goto LABEL_28;
    }
    goto LABEL_166;
  }
  FigGetAllocatorForMedia();
  BlockBufferWithCFCFStringRef String = FigCreateBlockBufferWithCFString();
  if (BlockBufferWithCFString)
  {
LABEL_166:
    uint64_t v39 = BlockBufferWithCFString;
    CFURLRef v22 = 0;
LABEL_176:
    CFURLRef v81 = 0;
    goto LABEL_177;
  }
  CFAllocatorRef v23 = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFURLRef v22 = CFURLCreateCopyAppendingPathComponent(v23, *(CFURLRef *)(DerivedStorage + 24), @"StreamInfoRoot.xml", 0);
  if (!v22 || FigXMLNodeWriteXMLFileFromBlockBufferAtURL((OpaqueCMBlockBuffer *)v88, 0x1EE552798, v22)) {
    goto LABEL_174;
  }
  uint64_t v24 = lockLockFile(DerivedStorage);
  if (v24) {
    goto LABEL_175;
  }
  *(unsigned char *)(DerivedStorage + 112) = 1;
  FigGetAllocatorForMedia();
  uint64_t v24 = FigCreateBlockBufferWithCFString();
  if (v24) {
    goto LABEL_175;
  }
  CFAllocatorRef v25 = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFURLRef v26 = CFURLCreateCopyAppendingPathComponent(v25, *(CFURLRef *)(DerivedStorage + 24), @"StreamInfoBoot.xml", 0);
  if (!v26)
  {
LABEL_174:
    uint64_t v24 = FigSignalErrorAt();
LABEL_175:
    uint64_t v39 = v24;
    goto LABEL_176;
  }
  CFURLRef v85 = v26;
  uint64_t v27 = FigXMLNodeWriteXMLFileFromBlockBufferAtURL((OpaqueCMBlockBuffer *)cf, 0x1EE552798, v26);
  if (v27) {
    goto LABEL_159;
  }
  *(unsigned char *)(DerivedStorage + 72) = 1;
LABEL_28:
  CFAllocatorRef v28 = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFURLRef v29 = CFURLCreateCopyAppendingPathComponent(v28, *(CFURLRef *)(DerivedStorage + 24), @"StreamInfoRoot.xml", 0);
  if (v29)
  {
    CFURLRef v30 = v29;
    uint64_t v31 = FigGetAllocatorForMedia();
    uint64_t IsWithinParentDirectory = FigXMLNodeCreateFromURL(v31, (uint64_t)v30, (CFTypeRef *)(DerivedStorage + 88));
    if (!IsWithinParentDirectory)
    {
      uint64_t v33 = *(void *)(DerivedStorage + 88);
      FigXMLNodeGetTag(v33);
      int v34 = FigCFEqual();
      if (!v33 || !v34)
      {
LABEL_169:
        uint64_t IsWithinParentDirectory = FigSignalErrorAt();
        goto LABEL_170;
      }
      Child = FigXMLNodeGetChild(v33, @"BootImage");
      ContentAsCFCFStringRef String = (const __CFString *)FigXMLNodeGetContentAsCFString((uint64_t)Child);
      uint64_t IsWithinParentDirectory = FigFileValidateFileNameIsWithinParentDirectory();
      if (!IsWithinParentDirectory)
      {
        CFAllocatorRef v37 = (const __CFAllocator *)FigGetAllocatorForMedia();
        CFURLRef v38 = CFURLCreateCopyAppendingPathComponent(v37, *(CFURLRef *)(DerivedStorage + 24), ContentAsCFString, 0);
        if (v38)
        {
          uint64_t v39 = 0;
          *(void *)(DerivedStorage + 96) = v38;
          goto LABEL_35;
        }
        goto LABEL_169;
      }
    }
LABEL_170:
    uint64_t v39 = IsWithinParentDirectory;
LABEL_35:
    CFRelease(v30);
    if (v39) {
      goto LABEL_160;
    }
    goto LABEL_36;
  }
  uint64_t v39 = FigSignalErrorAt();
  if (v39) {
    goto LABEL_160;
  }
LABEL_36:
  uint64_t v40 = FigGetAllocatorForMedia();
  uint64_t v41 = (uint64_t *)(DerivedStorage + 80);
  uint64_t v27 = FigXMLNodeCreateFromURL(v40, *(void *)(DerivedStorage + 96), (CFTypeRef *)(DerivedStorage + 80));
  if (v27) {
    goto LABEL_159;
  }
  CFAllocatorRef v42 = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v42, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  *(void *)(DerivedStorage + 48) = Mutable;
  if (!Mutable
    || (CFAllocatorRef v44 = (const __CFAllocator *)FigGetAllocatorForMedia(),
        CFMutableArrayRef v45 = CFArrayCreateMutable(v44, 0, MEMORY[0x1E4F1D510]),
        (*(void *)(DerivedStorage + 56) = v45) == 0))
  {
LABEL_158:
    uint64_t v27 = FigSignalErrorAt();
    goto LABEL_159;
  }
  *(void *)buffer = 0;
  uint64_t valuePtr = -1;
  v98[0] = 0;
  if (!*v41)
  {
    uint64_t v39 = FigSignalErrorAt();
    goto LABEL_70;
  }
  MediaSegments = xmlGetMediaSegments(*v41);
  if (!MediaSegments
    || (uint64_t v47 = (uint64_t)MediaSegments, !FigXMLNodeGetCountOfChildren((uint64_t)MediaSegments))
    || (uint64_t)FigXMLNodeGetCountOfChildren(v47) < 1)
  {
    uint64_t v39 = 0;
LABEL_70:
    CFStringRef v53 = 0;
    DictionaryForSegmentEntry = 0;
    CFNumberRef v55 = 0;
    goto LABEL_76;
  }
  uint64_t v84 = v8;
  CFIndex v48 = 0;
  CFAllocatorRef v49 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  while (1)
  {
    ChildAtIndex = FigXMLNodeGetChildAtIndex(v47, v48);
    FigXMLNodeGetTag((uint64_t)ChildAtIndex);
    if (!FigCFEqual()) {
      goto LABEL_67;
    }
    uint64_t v95 = 0;
    uint64_t v96 = 0;
    uint64_t v93 = 0;
    uint64_t v94 = 0;
    if (FigXMLNodeCopyAttributeAsCFString((uint64_t)ChildAtIndex, @"URL", (CFTypeRef *)buffer))
    {
      CFStringRef v53 = 0;
LABEL_73:
      DictionaryForSegmentEntry = 0;
      CFNumberRef v55 = 0;
LABEL_74:
      uint64_t v39 = FigSignalErrorAt();
      goto LABEL_75;
    }
    CFAllocatorRef v51 = (const __CFAllocator *)FigGetAllocatorForMedia();
    uint64_t v52 = *(void *)(DerivedStorage + 128);
    *(void *)(DerivedStorage + 128) = v52 + 1;
    CFStringRef v53 = CFStringCreateWithFormat(v51, 0, @"%ld", v52);
    if (!v53)
    {
      DictionaryForSegmentEntry = 0;
      CFNumberRef v55 = 0;
      goto LABEL_74;
    }
    if (FigXMLNodeGetAttributeAsDouble((uint64_t)ChildAtIndex, @"Tim", (double *)&v96)
      || FigXMLNodeGetAttributeAsDouble((uint64_t)ChildAtIndex, @"Dur", (double *)&v95)
      || FigXMLNodeGetAttributeAsInt64((uint64_t)ChildAtIndex, @"Off", &v93))
    {
      goto LABEL_73;
    }
    int AttributeAsInt64 = FigXMLNodeGetAttributeAsInt64((uint64_t)ChildAtIndex, @"SeqNum", &valuePtr);
    if (valuePtr == -1)
    {
      CFNumberRef v55 = 0;
    }
    else
    {
      if (AttributeAsInt64) {
        goto LABEL_73;
      }
      CFNumberRef v55 = CFNumberCreate(v49, kCFNumberSInt64Type, &valuePtr);
      if (!v55)
      {
        DictionaryForSegmentEntry = 0;
        goto LABEL_74;
      }
    }
    if (FigXMLNodeGetAttributeAsInt64((uint64_t)ChildAtIndex, @"Len", &v94)
      || FigXMLNodeCopyAttributeAsCFString((uint64_t)ChildAtIndex, @"PATH", v98))
    {
      DictionaryForSegmentEntry = 0;
      goto LABEL_74;
    }
    uint64_t v56 = FigFileValidateFileNameIsWithinParentDirectory();
    if (v56) {
      break;
    }
    DictionaryForSegmentEntry = createDictionaryForSegmentEntry(*(const void **)buffer, v93, (uint64_t)v55, v94, v98[0]);
    if (!DictionaryForSegmentEntry || CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 48), v53)) {
      goto LABEL_74;
    }
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(DerivedStorage + 48), v53, DictionaryForSegmentEntry);
    CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 56), v53);
    if (*(void *)buffer)
    {
      CFRelease(*(CFTypeRef *)buffer);
      *(void *)buffer = 0;
    }
    CFRelease(DictionaryForSegmentEntry);
    CFRelease(v53);
    if (v98[0])
    {
      CFRelease(v98[0]);
      v98[0] = 0;
    }
    if (v55) {
      CFRelease(v55);
    }
    uint64_t valuePtr = -1;
LABEL_67:
    if (++v48 >= (uint64_t)FigXMLNodeGetCountOfChildren(v47))
    {
      uint64_t v39 = 0;
      CFStringRef v53 = 0;
      DictionaryForSegmentEntry = 0;
      CFNumberRef v55 = 0;
      goto LABEL_75;
    }
  }
  uint64_t v39 = v56;
  DictionaryForSegmentEntry = 0;
LABEL_75:
  CFMutableArrayRef v8 = v84;
  uint64_t v41 = (uint64_t *)(DerivedStorage + 80);
LABEL_76:
  if (*(void *)buffer) {
    CFRelease(*(CFTypeRef *)buffer);
  }
  if (DictionaryForSegmentEntry) {
    CFRelease(DictionaryForSegmentEntry);
  }
  if (v53) {
    CFRelease(v53);
  }
  if (v98[0]) {
    CFRelease(v98[0]);
  }
  if (v55) {
    CFRelease(v55);
  }
  if (v39) {
    goto LABEL_160;
  }
  CFAllocatorRef v57 = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFMutableDictionaryRef v58 = CFDictionaryCreateMutable(v57, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  *(void *)(DerivedStorage + 64) = v58;
  if (!v58) {
    goto LABEL_158;
  }
  uint64_t v59 = *v41;
  *(void *)buffer = 0;
  uint64_t valuePtr = -1;
  v98[0] = 0;
  MediaInitializationSegments = xmlGetMediaInitializationSegments(v59);
  if (!MediaInitializationSegments)
  {
    uint64_t v39 = 0;
    CFNumberRef v72 = 0;
    goto LABEL_126;
  }
  uint64_t v61 = (uint64_t)MediaInitializationSegments;
  if (!FigXMLNodeGetCountOfChildren((uint64_t)MediaInitializationSegments)
    || (uint64_t)FigXMLNodeGetCountOfChildren(v61) < 1)
  {
    uint64_t v39 = 0;
    CFStringRef v67 = 0;
    CFNumberRef v72 = 0;
    goto LABEL_122;
  }
  uint64_t v83 = v41;
  CFIndex v62 = 0;
  CFAllocatorRef v63 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  while (2)
  {
    CFTypeID v64 = FigXMLNodeGetChildAtIndex(v61, v62);
    FigXMLNodeGetTag((uint64_t)v64);
    if (!FigCFEqual())
    {
LABEL_114:
      if (++v62 < (uint64_t)FigXMLNodeGetCountOfChildren(v61)) {
        continue;
      }
LABEL_115:
      uint64_t v39 = 0;
      goto LABEL_116;
    }
    break;
  }
  uint64_t v95 = 0;
  uint64_t v96 = 0;
  if (FigXMLNodeCopyAttributeAsCFString((uint64_t)v64, @"URL", v98))
  {
    uint64_t v39 = FigSignalErrorAt();
LABEL_116:
    CFStringRef v67 = 0;
LABEL_120:
    CFNumberRef v72 = 0;
    goto LABEL_121;
  }
  CFStringRef v65 = (const __CFString *)v98[0];
  CFAllocatorRef v66 = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFStringRef v67 = CFURLCreateWithString(v66, v65, 0);
  if (!v67)
  {
    FigSignalErrorAt();
    uint64_t v39 = 0;
    goto LABEL_120;
  }
  int v68 = FigCFURLIsLocalResource();
  CFRelease(v67);
  if (v68) {
    goto LABEL_115;
  }
  CFAllocatorRef v69 = (const __CFAllocator *)FigGetAllocatorForMedia();
  uint64_t v70 = *(void *)(DerivedStorage + 136);
  *(void *)(DerivedStorage + 136) = v70 + 1;
  CFStringRef v67 = CFStringCreateWithFormat(v69, 0, @"%ld", v70);
  if (!v67 || FigXMLNodeGetAttributeAsInt64((uint64_t)v64, @"Off", &v95))
  {
LABEL_119:
    uint64_t v39 = FigSignalErrorAt();
    goto LABEL_120;
  }
  int v71 = FigXMLNodeGetAttributeAsInt64((uint64_t)v64, @"SeqNum", &valuePtr);
  if (valuePtr == -1)
  {
    CFNumberRef v72 = 0;
  }
  else
  {
    if (v71) {
      goto LABEL_119;
    }
    CFNumberRef v72 = CFNumberCreate(v63, kCFNumberSInt64Type, &valuePtr);
    if (!v72) {
      goto LABEL_151;
    }
  }
  if (!FigXMLNodeGetAttributeAsInt64((uint64_t)v64, @"Len", &v96)
    && !FigXMLNodeCopyAttributeAsCFString((uint64_t)v64, @"PATH", (CFTypeRef *)buffer))
  {
    uint64_t v73 = FigFileValidateFileNameIsWithinParentDirectory();
    if (v73) {
      goto LABEL_152;
    }
    DictionaryForInitializationSegmentEntry = createDictionaryForInitializationSegmentEntry(v98[0], v95, (uint64_t)v72, v96, *(const void **)buffer);
    if (DictionaryForInitializationSegmentEntry)
    {
      CFStringRef v75 = DictionaryForInitializationSegmentEntry;
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(DerivedStorage + 64), v67, DictionaryForInitializationSegmentEntry);
      if (v98[0])
      {
        CFRelease(v98[0]);
        v98[0] = 0;
      }
      CFRelease(v67);
      CFRelease(v75);
      if (*(void *)buffer)
      {
        CFRelease(*(CFTypeRef *)buffer);
        *(void *)buffer = 0;
      }
      if (v72) {
        CFRelease(v72);
      }
      uint64_t valuePtr = -1;
      goto LABEL_114;
    }
  }
LABEL_151:
  uint64_t v73 = FigSignalErrorAt();
LABEL_152:
  uint64_t v39 = v73;
LABEL_121:
  uint64_t v41 = v83;
LABEL_122:
  if (v98[0]) {
    CFRelease(v98[0]);
  }
  if (v67) {
    CFRelease(v67);
  }
LABEL_126:
  if (*(void *)buffer) {
    CFRelease(*(CFTypeRef *)buffer);
  }
  if (v72) {
    CFRelease(v72);
  }
  if (v39) {
    goto LABEL_160;
  }
  uint64_t v76 = *v41;
  if (!v76 || (FigXMLNodeGetTag(v76), !FigCFEqual()))
  {
    uint64_t v27 = FigSignalErrorAt();
    if (!v27)
    {
LABEL_141:
      uint64_t v39 = 0;
      *CFMutableArrayRef v8 = v92;
      CFTypeRef v92 = 0;
      goto LABEL_142;
    }
LABEL_159:
    uint64_t v39 = v27;
    goto LABEL_160;
  }
  *(void *)buffer = 0;
  uint64_t v77 = FigXMLNodeGetChild(v76, @"MediaBytesStored");
  if (!v77)
  {
    IntCFArrayRef Value = 0;
LABEL_137:
    uint64_t v39 = 0;
    uint64_t v79 = IntValue & ~(IntValue >> 63);
    if (!v77) {
      goto LABEL_139;
    }
LABEL_138:
    CFRelease(v77);
    goto LABEL_139;
  }
  uint64_t v39 = FigXMLNodeCopyContentAsCFString((uint64_t)v77, buffer);
  uint64_t v77 = *(CFStringRef **)buffer;
  if (!v39)
  {
    IntCFArrayRef Value = CFStringGetIntValue(*(CFStringRef *)buffer);
    uint64_t v77 = *(CFStringRef **)buffer;
    goto LABEL_137;
  }
  uint64_t v79 = 0;
  if (*(void *)buffer) {
    goto LABEL_138;
  }
LABEL_139:
  if (!v39)
  {
    *(void *)(DerivedStorage + 192) = v79;
    goto LABEL_141;
  }
LABEL_160:
  CFURLRef v81 = v85;
LABEL_177:
  CFURLRef v85 = v81;
  if (v92) {
    CFRelease(v92);
  }
LABEL_142:
  if (cf) {
    CFRelease(cf);
  }
  if (v88) {
    CFRelease(v88);
  }
  if (v22) {
    CFRelease(v22);
  }
  if (v85) {
    CFRelease(v85);
  }
  return v39;
}

uint64_t lockLockFile(uint64_t a1)
{
  if (*(void *)(a1 + 120)) {
    goto LABEL_5;
  }
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFURLRef v3 = CFURLCreateCopyAppendingPathComponent(AllocatorForMedia, *(CFURLRef *)(a1 + 24), @"StreamInfoRoot.xml", 0);
  uint64_t v4 = FigFileForkOpenMainByCFURL();
  if (v3) {
    CFRelease(v3);
  }
  if (!v4)
  {
LABEL_5:
    unsigned int v5 = FigFileLock();
    if (v5 == -12206) {
      return 4294950362;
    }
    else {
      return v5;
    }
  }
  return v4;
}

uint64_t xmlGetStreamInfo(uint64_t a1)
{
  if (FigCFEqual()) {
    return a1;
  }
  else {
    return 0;
  }
}

CFStringRef FigHLSPersistentStreamInfoCopyFormattingDesc(uint64_t a1)
{
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  return CFStringCreateWithFormat(AllocatorForMedia, 0, @"[FigHLSPersistentStreamInfo %p]", a1);
}

uint64_t HLSPersistentStreamInfo_Invalidate()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    return streamInfo_Invalidate(DerivedStorage);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t HLSPersistentStreamInfo_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    uint64_t v1 = DerivedStorage;
    streamInfo_Invalidate(DerivedStorage);
    uint64_t result = FigReadWriteLockDestroy();
    *(void *)(v1 + 32) = 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

CFStringRef HLSPersistentStreamInfo_CopyDebugDescription()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  return CFStringCreateWithFormat(AllocatorForMedia, 0, @"[FigHLSPersistentStreamInfo]{%@}", *(void *)(DerivedStorage + 40));
}

uint64_t HLSPersistentStreamInfo_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    uint64_t v7 = DerivedStorage;
    uint64_t v8 = FigReadWriteLockLockForRead();
    if (v8)
    {
LABEL_30:
      uint64_t v9 = v8;
      goto LABEL_19;
    }
    if (a2 && a4)
    {
      if (*(unsigned char *)(v7 + 8))
      {
        uint64_t v9 = 4294954511;
LABEL_19:
        FigReadWriteLockUnlockForRead();
        return v9;
      }
      if (CFEqual(a2, @"StreamInfoMediaSegmentList"))
      {
        if (*(void *)(v7 + 48))
        {
          CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
          CFDictionaryRef v11 = *(const __CFDictionary **)(v7 + 48);
LABEL_10:
          uint64_t Copy = (uint64_t)CFDictionaryCreateCopy(AllocatorForMedia, v11);
          goto LABEL_18;
        }
        goto LABEL_17;
      }
      if (CFEqual(a2, @"StreamInfoMediaSegmentIDList"))
      {
        if (*(void *)(v7 + 56))
        {
          CFAllocatorRef v13 = (const __CFAllocator *)FigGetAllocatorForMedia();
          uint64_t Copy = (uint64_t)CFArrayCreateCopy(v13, *(CFArrayRef *)(v7 + 56));
          goto LABEL_18;
        }
        goto LABEL_17;
      }
      if (CFEqual(a2, @"StreamInfoMediaInitializationSegmentList"))
      {
        if (*(void *)(v7 + 64))
        {
          CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
          CFDictionaryRef v11 = *(const __CFDictionary **)(v7 + 64);
          goto LABEL_10;
        }
LABEL_17:
        uint64_t Copy = 0;
        goto LABEL_18;
      }
      if (CFEqual(@"StreamInfoMediaPlaylistNetworkURL", a2))
      {
        uint64_t Copy = (uint64_t)xmlCopyMediaPlaylistURL(v7);
        if (Copy) {
          goto LABEL_18;
        }
LABEL_22:
        uint64_t v9 = 4294950360;
        goto LABEL_19;
      }
      if (CFEqual(@"StreamInfoMediaTypeList", a2))
      {
        uint64_t valuePtr = 0;
        ps_xmlCopyMediaTypeList(v7, (CFMutableArrayRef *)&valuePtr);
        uint64_t v9 = 0;
        *a4 = valuePtr;
        goto LABEL_19;
      }
      if (CFEqual(@"StreamInfoStreamType", a2))
      {
        uint64_t Copy = (uint64_t)xmlCopyStreamType(v7);
        goto LABEL_18;
      }
      if (CFEqual(@"StreamInfoPeakBandwidth", a2))
      {
        CFStringRef v15 = @"PeakBandwidth";
      }
      else
      {
        if (!CFEqual(@"StreamInfoAverageBandwidth", a2))
        {
          if (CFEqual(@"StreamInfoVersion", a2))
          {
            uint64_t Copy = xmlCopyStreamInfoVersion(v7);
            if (Copy) {
              goto LABEL_18;
            }
            goto LABEL_22;
          }
          if (CFEqual(@"StreamInfoEvictionPolicy", a2))
          {
            uint64_t Copy = (uint64_t)xmlCopyEvictionPolicy(v7);
            if (Copy) {
              goto LABEL_18;
            }
            goto LABEL_22;
          }
          if (CFEqual(@"StreamInfoCompressable", a2))
          {
            uint64_t StreamInfo = xmlGetStreamInfo(*(void *)(v7 + 80));
            BOOL IsCompressible = xmlIsCompressible(StreamInfo);
          }
          else
          {
            if (!CFEqual(@"StreamInfoCompleteState", a2))
            {
              if (!CFEqual(@"StreamInfoMediaBytesStored", a2))
              {
                if (!CFEqual(@"StreamInfoUniqueIdentifier", a2))
                {
                  uint64_t v9 = 0;
                  goto LABEL_19;
                }
                uint64_t Copy = (uint64_t)xmlCopyUniqueIdentifier(v7);
                goto LABEL_18;
              }
              uint64_t valuePtr = *(void *)(v7 + 192);
              uint64_t Copy = (uint64_t)CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt64Type, &valuePtr);
              if (Copy)
              {
LABEL_18:
                uint64_t v9 = 0;
                *a4 = Copy;
                goto LABEL_19;
              }
              goto LABEL_29;
            }
            uint64_t v18 = xmlGetStreamInfo(*(void *)(v7 + 80));
            BOOL IsCompressible = ps_xmlIsComplete(v18);
          }
          double v19 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
          if (IsCompressible) {
            double v19 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
          }
          uint64_t Copy = (uint64_t)CFRetain(*v19);
          goto LABEL_18;
        }
        CFStringRef v15 = @"AverageBandwidth";
      }
      uint64_t Copy = (uint64_t)xmlCopyStreamBandwidth(v7, v15);
      if (Copy) {
        goto LABEL_18;
      }
    }
LABEL_29:
    uint64_t v8 = FigSignalErrorAt();
    goto LABEL_30;
  }

  return FigSignalErrorAt();
}

uint64_t HLSPersistentStreamInfo_SetProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    uint64_t v6 = DerivedStorage;
    uint64_t v7 = FigReadWriteLockLockForWrite();
    if (v7) {
      return v7;
    }
    if (!a2 || *(unsigned char *)(v6 + 8) || *(unsigned char *)(v6 + 112) != 1) {
      goto LABEL_78;
    }
    if (CFEqual(@"StreamInfoCompleteState", a2))
    {
      if (a3)
      {
        CFTypeID v8 = CFGetTypeID(a3);
        if (v8 == CFBooleanGetTypeID())
        {
          int Value = CFBooleanGetValue((CFBooleanRef)a3);
          uint64_t v10 = *(void *)(v6 + 80);
          FigXMLNodeGetTag(v10);
          int v11 = FigCFEqual();
          if (!v10 || !v11)
          {
            uint64_t v19 = FigSignalErrorAt();
            goto LABEL_28;
          }
          Child = FigXMLNodeGetChild(v10, @"Complete");
          if (Child)
          {
            CFTypeRef v13 = CFRetain(Child);
            CFTypeRef cf = v13;
            if (v13)
            {
LABEL_21:
              if (Value == 1) {
                int v17 = @"YES";
              }
              else {
                int v17 = @"NO";
              }
              uint64_t v18 = FigXMLNodeContentSetCFString((uint64_t)v13, v17);
              goto LABEL_25;
            }
          }
          else
          {
            CFTypeRef cf = 0;
          }
          uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
          FigXMLNodeCreateChildNode(AllocatorForMedia, v10, @"Complete", &cf);
          CFTypeRef v13 = cf;
          goto LABEL_21;
        }
      }
      goto LABEL_78;
    }
    if (CFEqual(@"StreamInfoMediaPlaylistNetworkURL", a2))
    {
      if (a3)
      {
        CFTypeID v14 = CFGetTypeID(a3);
        if (v14 == CFStringGetTypeID())
        {
          uint64_t v15 = xmlSetMediaPlaylist(*(void *)(v6 + 80), a3, @"NetworkURL");
          if (!v15) {
            goto LABEL_29;
          }
          goto LABEL_79;
        }
      }
    }
    else
    {
      if (CFEqual(@"StreamInfoMediaTypeList", a2))
      {
        if (a3)
        {
          CFTypeID v20 = CFGetTypeID(a3);
          if (v20 == CFArrayGetTypeID())
          {
            CFTypeRef v37 = 0;
            CFTypeRef cf = 0;
            uint64_t v21 = *(void *)(v6 + 80);
            FigXMLNodeGetTag(v21);
            int v22 = FigCFEqual();
            if (v21 && v22)
            {
              CFTypeRef cf = FigXMLNodeGetChild(v21, @"MediaTypeList");
              if (cf) {
                FigXMLNodeRemoveAndClearChild(v21, &cf);
              }
              uint64_t v23 = FigGetAllocatorForMedia();
              uint64_t v18 = FigXMLNodeCreateChildNode(v23, v21, @"MediaTypeList", &cf);
              if (!v18)
              {
                CFIndex Count = CFArrayGetCount((CFArrayRef)a3);
                if (Count < 1)
                {
LABEL_45:
                  uint64_t v19 = 0;
                }
                else
                {
                  CFIndex v25 = Count + 1;
                  while (1)
                  {
                    FigCFArrayGetInt32AtIndex();
                    CFStringForOSTypeint Value = FigGetCFStringForOSTypeValue();
                    uint64_t v27 = FigGetAllocatorForMedia();
                    uint64_t v28 = FigXMLNodeCreateChildNode(v27, (uint64_t)cf, @"MediaType", &v37);
                    if (v28) {
                      break;
                    }
                    uint64_t v28 = FigXMLNodeAttributeSetCFString((uint64_t)v37, @"type", CFStringForOSTypeValue);
                    if (v28) {
                      break;
                    }
                    if (v37)
                    {
                      CFRelease(v37);
                      CFTypeRef v37 = 0;
                    }
                    if ((unint64_t)--v25 <= 1) {
                      goto LABEL_45;
                    }
                  }
                  uint64_t v19 = v28;
                  if (v37) {
                    CFRelease(v37);
                  }
                }
                goto LABEL_26;
              }
            }
            else
            {
              uint64_t v18 = FigSignalErrorAt();
            }
LABEL_25:
            uint64_t v19 = v18;
LABEL_26:
            if (cf) {
              CFRelease(cf);
            }
LABEL_28:
            if (v19)
            {
LABEL_80:
              FigReadWriteLockUnlockForWrite();
              return v19;
            }
            goto LABEL_29;
          }
        }
        goto LABEL_78;
      }
      if (!CFEqual(@"StreamInfoStreamType", a2))
      {
        if (CFEqual(@"StreamInfoPeakBandwidth", a2))
        {
          if (!a3) {
            goto LABEL_78;
          }
          CFTypeID v31 = CFGetTypeID(a3);
          if (v31 != CFNumberGetTypeID()) {
            goto LABEL_78;
          }
          CFStringRef v32 = @"PeakBandwidth";
        }
        else
        {
          if (!CFEqual(@"StreamInfoAverageBandwidth", a2))
          {
            if (CFEqual(@"StreamInfoEvictionPolicy", a2))
            {
              if (a3)
              {
                CFTypeID v34 = CFGetTypeID(a3);
                if (v34 == CFStringGetTypeID())
                {
                  uint64_t v15 = xmlSetEvictionPolicy(v6, a3);
                  if (!v15) {
                    goto LABEL_29;
                  }
                  goto LABEL_79;
                }
              }
            }
            else
            {
              if (!CFEqual(@"StreamInfoUniqueIdentifier", a2)) {
                goto LABEL_29;
              }
              if (a3)
              {
                CFTypeID v35 = CFGetTypeID(a3);
                if (v35 == CFStringGetTypeID())
                {
                  uint64_t v15 = xmlSetUniqueIdentifier(v6, a3);
                  if (!v15) {
                    goto LABEL_29;
                  }
                  goto LABEL_79;
                }
              }
            }
            goto LABEL_78;
          }
          if (!a3) {
            goto LABEL_78;
          }
          CFTypeID v33 = CFGetTypeID(a3);
          if (v33 != CFNumberGetTypeID()) {
            goto LABEL_78;
          }
          CFStringRef v32 = @"AverageBandwidth";
        }
        uint64_t v15 = xmlSetStreamBandwidth(v6, (const __CFNumber *)a3, v32);
        if (!v15) {
          goto LABEL_29;
        }
        goto LABEL_79;
      }
      if (a3)
      {
        CFTypeID v29 = CFGetTypeID(a3);
        if (v29 == CFStringGetTypeID())
        {
          if (CFEqual(a3, @"StreamInfoMainStream"))
          {
            CFURLRef v30 = @"Main";
          }
          else
          {
            if (!CFEqual(a3, @"StreamInfoSupplementalStream"))
            {
              FigSignalErrorAt();
              goto LABEL_29;
            }
            CFURLRef v30 = @"Supplemental";
          }
          uint64_t v15 = xmlSetStreamType(v6, v30);
          if (!v15)
          {
LABEL_29:
            uint64_t v19 = 0;
            *(unsigned char *)(v6 + 72) = 1;
            goto LABEL_80;
          }
LABEL_79:
          uint64_t v19 = v15;
          goto LABEL_80;
        }
      }
    }
LABEL_78:
    uint64_t v15 = FigSignalErrorAt();
    goto LABEL_79;
  }

  return FigSignalErrorAt();
}

uint64_t streamInfo_Invalidate(uint64_t a1)
{
  uint64_t v2 = FigReadWriteLockLockForWrite();
  if (!v2)
  {
    if (!*(unsigned char *)(a1 + 8))
    {
      *(unsigned char *)(a1 + 8) = 1;
      if (*(void *)(a1 + 120))
      {
        FigFileUnlock();
        FigFileForkClose();
        *(void *)(a1 + 120) = 0;
      }
      CFURLRef v3 = *(const void **)(a1 + 48);
      if (v3)
      {
        CFRelease(v3);
        *(void *)(a1 + 48) = 0;
      }
      uint64_t v4 = *(const void **)(a1 + 56);
      if (v4)
      {
        CFRelease(v4);
        *(void *)(a1 + 56) = 0;
      }
      unsigned int v5 = *(const void **)(a1 + 40);
      if (v5)
      {
        CFRelease(v5);
        *(void *)(a1 + 40) = 0;
      }
      uint64_t v6 = *(const void **)(a1 + 24);
      if (v6)
      {
        CFRelease(v6);
        *(void *)(a1 + 24) = 0;
      }
      uint64_t v7 = *(const void **)(a1 + 64);
      if (v7)
      {
        CFRelease(v7);
        *(void *)(a1 + 64) = 0;
      }
      CFTypeID v8 = *(const void **)(a1 + 96);
      if (v8)
      {
        CFRelease(v8);
        *(void *)(a1 + 96) = 0;
      }
      uint64_t v9 = *(const void **)(a1 + 16);
      if (v9)
      {
        CFRelease(v9);
        *(void *)(a1 + 16) = 0;
      }
      uint64_t v10 = *(const void **)(a1 + 104);
      if (v10)
      {
        CFRelease(v10);
        *(void *)(a1 + 104) = 0;
      }
      int v11 = *(const void **)(a1 + 200);
      if (v11)
      {
        CFRelease(v11);
        *(void *)(a1 + 200) = 0;
      }
      CFMutableDictionaryRef v12 = *(const void **)(a1 + 88);
      if (v12)
      {
        CFRelease(v12);
        *(void *)(a1 + 88) = 0;
      }
      CFTypeRef v13 = *(const void **)(a1 + 80);
      if (v13)
      {
        CFRelease(v13);
        *(void *)(a1 + 80) = 0;
      }
    }
    FigReadWriteLockUnlockForWrite();
  }
  return v2;
}

CFTypeRef xmlCopyMediaPlaylistURL(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 80);
  FigXMLNodeGetTag(v1);
  int v2 = FigCFEqual();
  if (v1) {
    BOOL v3 = v2 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    FigSignalErrorAt();
    return 0;
  }
  Child = FigXMLNodeGetChild(v1, @"MediaPlaylist");
  if (!Child) {
    return 0;
  }
  unsigned int v5 = FigXMLNodeGetChild((uint64_t)Child, @"NetworkURL");
  ContentAsCFCFStringRef String = (const void *)FigXMLNodeGetContentAsCFString((uint64_t)v5);
  if (!ContentAsCFString) {
    return 0;
  }

  return CFRetain(ContentAsCFString);
}

void ps_xmlCopyMediaTypeList(uint64_t a1, CFMutableArrayRef *a2)
{
  uint64_t v3 = *(void *)(a1 + 80);
  FigXMLNodeGetTag(v3);
  int v4 = FigCFEqual();
  if (v3) {
    BOOL v5 = v4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    Child = FigXMLNodeGetChild(v3, @"MediaTypeList");
    if (Child)
    {
      uint64_t v7 = (uint64_t)Child;
      CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
      CFMutableArrayRef Mutable = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D510]);
      if ((uint64_t)FigXMLNodeGetCountOfChildren(v7) >= 1)
      {
        CFIndex v10 = 0;
        do
        {
          ChildAtIndex = FigXMLNodeGetChildAtIndex(v7, v10);
          FigXMLNodeGetTag((uint64_t)ChildAtIndex);
          if (FigCFEqual())
          {
            FigXMLNodeGetAttribute();
            FigCFStringGetOSTypeValue();
            FigCFArrayAppendInt32();
          }
          ++v10;
        }
        while (v10 < (uint64_t)FigXMLNodeGetCountOfChildren(v7));
      }
      if (!a2)
      {
        if (Mutable) {
          CFRelease(Mutable);
        }
        return;
      }
    }
    else
    {
      if (!a2) {
        return;
      }
      CFMutableArrayRef Mutable = 0;
    }
    *a2 = Mutable;
    return;
  }

  FigSignalErrorAt();
}

CFTypeRef xmlCopyStreamType(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 80);
  FigXMLNodeGetTag(v1);
  int v2 = FigCFEqual();
  if (v1) {
    BOOL v3 = v2 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    FigSignalErrorAt();
    return 0;
  }
  Child = FigXMLNodeGetChild(v1, @"Type");
  if (!FigXMLNodeGetContentAsCFString((uint64_t)Child)) {
    return 0;
  }
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      BOOL v5 = @"StreamInfoSupplementalStream";
      goto LABEL_10;
    }
    return 0;
  }
  BOOL v5 = @"StreamInfoMainStream";
LABEL_10:

  return CFRetain(v5);
}

uint64_t xmlCopyStreamInfoVersion(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 80);
  FigXMLNodeGetTag(v1);
  int v2 = FigCFEqual();
  if (v1) {
    BOOL v3 = v2 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    FigSignalErrorAt();
    return 0;
  }
  else
  {
    Child = FigXMLNodeGetChild(v1, @"Version");
    return FigXMLNodeGetContentAsCFString((uint64_t)Child);
  }
}

CFTypeRef xmlCopyEvictionPolicy(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 80);
  FigXMLNodeGetTag(v1);
  int v2 = FigCFEqual();
  if (v1) {
    BOOL v3 = v2 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    FigSignalErrorAt();
    return 0;
  }
  Child = FigXMLNodeGetChild(v1, @"EvictionPolicy");
  ContentAsCFCFStringRef String = (const void *)FigXMLNodeGetContentAsCFString((uint64_t)Child);
  if (!ContentAsCFString) {
    return 0;
  }

  return CFRetain(ContentAsCFString);
}

BOOL xmlIsCompressible(uint64_t a1)
{
  CFTypeRef cf = 0;
  if (!a1)
  {
    FigSignalErrorAt();
    return 0;
  }
  Child = FigXMLNodeGetChild(a1, @"Compressable");
  if (!Child) {
    return 0;
  }
  int v2 = FigXMLNodeCopyContentAsCFString((uint64_t)Child, &cf);
  BOOL v3 = 0;
  CFTypeRef v4 = cf;
  if (!v2 && cf)
  {
    BOOL v3 = FigCFEqual() != 0;
    CFTypeRef v4 = cf;
  }
  if (v4) {
    CFRelease(v4);
  }
  return v3;
}

BOOL ps_xmlIsComplete(uint64_t a1)
{
  if (a1)
  {
    Child = FigXMLNodeGetChild(a1, @"Complete");
    FigXMLNodeGetContentAsCFString((uint64_t)Child);
    return FigCFEqual() != 0;
  }
  else
  {
    FigSignalErrorAt();
    return 0;
  }
}

CFStringRef *xmlCopyUniqueIdentifier(uint64_t a1)
{
  uint64_t v5 = 0;
  uint64_t v1 = *(void *)(a1 + 80);
  FigXMLNodeGetTag(v1);
  int v2 = FigCFEqual();
  if (v1) {
    BOOL v3 = v2 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    FigSignalErrorAt();
    return 0;
  }
  else
  {
    uint64_t result = FigXMLNodeGetChild(v1, @"UniqueIdentifier");
    if (result)
    {
      FigXMLNodeCopyContentAsCFString((uint64_t)result, &v5);
      return (CFStringRef *)v5;
    }
  }
  return result;
}

CFNumberRef xmlCopyStreamBandwidth(uint64_t a1, const __CFString *a2)
{
  uint64_t valuePtr = 0;
  uint64_t v3 = *(void *)(a1 + 80);
  FigXMLNodeGetTag(v3);
  int v4 = FigCFEqual();
  if (v3) {
    BOOL v5 = v4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    FigSignalErrorAt();
    return 0;
  }
  Child = FigXMLNodeGetChild(v3, a2);
  if (Child)
  {
    uint64_t v7 = (uint64_t)Child;
    if (FigXMLNodeGetCountOfChildren((uint64_t)Child))
    {
      ChildAtIndex = FigXMLNodeGetChildAtIndex(v7, 0);
      if (FigXMLNodeGetContentAsInt64((uint64_t)ChildAtIndex, &valuePtr)) {
        return 0;
      }
    }
  }
  return CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt64Type, &valuePtr);
}

uint64_t xmlSetStreamType(uint64_t a1, const void *a2)
{
  uint64_t v3 = *(void *)(a1 + 80);
  FigXMLNodeGetTag(v3);
  int v4 = FigCFEqual();
  if (v3) {
    BOOL v5 = v4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    return FigSignalErrorAt();
  }
  else
  {
    CFTypeRef cf = FigXMLNodeGetChild(v3, @"Type");
    if (cf) {
      FigXMLNodeRemoveAndClearChild(v3, &cf);
    }
    uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
    uint64_t v7 = FigXMLNodeCreateChildNode(AllocatorForMedia, v3, @"Type", &cf);
    CFTypeRef v8 = cf;
    if (!v7)
    {
      FigXMLNodeContentSetCFString((uint64_t)cf, a2);
      CFTypeRef v8 = cf;
    }
    if (v8) {
      CFRelease(v8);
    }
    return v7;
  }
}

uint64_t xmlSetEvictionPolicy(uint64_t a1, const void *a2)
{
  uint64_t v3 = *(void *)(a1 + 80);
  FigXMLNodeGetTag(v3);
  int v4 = FigCFEqual();
  if (v3) {
    BOOL v5 = v4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    return FigSignalErrorAt();
  }
  else
  {
    CFTypeRef cf = FigXMLNodeGetChild(v3, @"EvictionPolicy");
    if (cf) {
      FigXMLNodeRemoveAndClearChild(v3, &cf);
    }
    uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
    uint64_t v7 = FigXMLNodeCreateChildNode(AllocatorForMedia, v3, @"EvictionPolicy", &cf);
    CFTypeRef v8 = cf;
    if (!v7)
    {
      uint64_t v7 = FigXMLNodeContentSetCFString((uint64_t)cf, a2);
      CFTypeRef v8 = cf;
    }
    if (v8) {
      CFRelease(v8);
    }
    return v7;
  }
}

uint64_t xmlSetUniqueIdentifier(uint64_t a1, const void *a2)
{
  CFTypeRef cf = 0;
  uint64_t v3 = *(void *)(a1 + 80);
  FigXMLNodeGetTag(v3);
  int v4 = FigCFEqual();
  if (v3) {
    BOOL v5 = v4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    uint64_t v7 = FigSignalErrorAt();
  }
  else
  {
    CFTypeRef cf = FigXMLNodeGetChild(v3, @"UniqueIdentifier");
    if (cf) {
      FigXMLNodeRemoveAndClearChild(v3, &cf);
    }
    uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
    uint64_t v7 = FigXMLNodeCreateChildNode(AllocatorForMedia, v3, @"UniqueIdentifier", &cf);
    if (!v7)
    {
      Child = FigXMLNodeGetChild(v3, @"UniqueIdentifier");
      uint64_t v7 = FigXMLNodeContentSetCFString((uint64_t)Child, a2);
    }
  }
  uint64_t v9 = v7;
  if (cf) {
    CFRelease(cf);
  }
  return v9;
}

uint64_t xmlSetMediaPlaylist(uint64_t a1, const void *a2, const __CFString *a3)
{
  CFTypeRef v16 = 0;
  FigXMLNodeGetTag(a1);
  int v6 = FigCFEqual();
  if (!a1 || !v6)
  {
    uint64_t v10 = FigSignalErrorAt();
    goto LABEL_11;
  }
  Child = FigXMLNodeGetChild(a1, @"MediaPlaylist");
  if (Child)
  {
    CFTypeRef v8 = CFRetain(Child);
    CFTypeRef v16 = v8;
    if (v8) {
      goto LABEL_9;
    }
  }
  else
  {
    CFTypeRef v16 = 0;
  }
  uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
  uint64_t v10 = FigXMLNodeCreateChildNode(AllocatorForMedia, a1, @"MediaPlaylist", &v16);
  if (v10)
  {
LABEL_11:
    uint64_t v12 = v10;
    goto LABEL_16;
  }
  CFTypeRef v8 = v16;
LABEL_9:
  int v11 = FigXMLNodeGetChild((uint64_t)v8, a3);
  if (v11)
  {
    uint64_t v10 = FigXMLNodeContentSetCFString((uint64_t)v11, a2);
    goto LABEL_11;
  }
  CFTypeRef v13 = v16;
  CFTypeRef cf = 0;
  uint64_t v14 = FigGetAllocatorForMedia();
  uint64_t v12 = FigXMLNodeCreateChildNode(v14, (uint64_t)v13, a3, &cf);
  if (!v12) {
    FigXMLNodeContentSetCFString((uint64_t)cf, a2);
  }
  if (cf) {
    CFRelease(cf);
  }
LABEL_16:
  if (v16) {
    CFRelease(v16);
  }
  return v12;
}

uint64_t xmlSetStreamBandwidth(uint64_t a1, const __CFNumber *a2, const __CFString *a3)
{
  uint64_t v13 = 0;
  uint64_t v5 = *(void *)(a1 + 80);
  FigXMLNodeGetTag(v5);
  int v6 = FigCFEqual();
  CFNumberGetValue(a2, kCFNumberSInt64Type, &v13);
  if (v5) {
    BOOL v7 = v6 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7) {
    return FigSignalErrorAt();
  }
  Child = FigXMLNodeGetChild(v5, a3);
  if (!Child)
  {
    CFTypeRef cf = 0;
    goto LABEL_9;
  }
  CFTypeRef v9 = CFRetain(Child);
  CFTypeRef cf = v9;
  if (!v9)
  {
LABEL_9:
    uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
    uint64_t v11 = FigXMLNodeCreateChildNode(AllocatorForMedia, v5, a3, &cf);
    CFTypeRef v9 = cf;
    if (v11) {
      goto LABEL_11;
    }
  }
  uint64_t v11 = FigXMLNodeContentSetInt64((uint64_t)v9, v13);
  CFTypeRef v9 = cf;
LABEL_11:
  if (v9) {
    CFRelease(v9);
  }
  return v11;
}

uint64_t HLSPersistentStreamInfo_setMediaPlaylist(uint64_t a1, uint64_t a2, const __CFString *a3, OpaqueCMBlockBuffer *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v8 = FigCFEqual();
  int v9 = FigCFEqual();
  if (DerivedStorage)
  {
    if (!a2) {
      goto LABEL_28;
    }
    if (!a4) {
      goto LABEL_30;
    }
    if (!a3) {
      goto LABEL_28;
    }
    int v10 = v9;
    if (!(v8 | v9)) {
      goto LABEL_28;
    }
    uint64_t v11 = FigReadWriteLockLockForWrite();
    if (!v11)
    {
      if (!*(unsigned char *)(DerivedStorage + 8) && *(unsigned char *)(DerivedStorage + 112) == 1)
      {
        uint64_t TempFileAtURL = FigFileCreateTempFileAtURL();
        if (!TempFileAtURL)
        {
          FigGetAllocatorForMedia();
          uint64_t TempFileAtURL = FigByteStreamCreateFromOpenFile();
          if (!TempFileAtURL)
          {
            CMBlockBufferGetDataLength(a4);
            uint64_t TempFileAtURL = CMByteStreamWriteBlockBuffer();
            if (!TempFileAtURL)
            {
              FigFileForkClose();
              CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
              a4 = CFURLCreateCopyAppendingPathComponent(AllocatorForMedia, *(CFURLRef *)(DerivedStorage + 24), a3, 0);
              if (a4)
              {
                uint64_t v14 = FigFileRename();
                if (!v14)
                {
                  if (v10)
                  {
                    uint64_t v15 = *(void *)(DerivedStorage + 80);
                    CFStringRef v16 = @"PathToLocalCopy";
                  }
                  else
                  {
                    if (!v8)
                    {
LABEL_19:
                      uint64_t v17 = 0;
                      *(unsigned char *)(DerivedStorage + 72) = 1;
LABEL_20:
                      FigReadWriteLockUnlockForWrite();
                      goto LABEL_21;
                    }
                    uint64_t v15 = *(void *)(DerivedStorage + 80);
                    CFStringRef v16 = @"PathToOffline";
                  }
                  uint64_t v14 = xmlSetMediaPlaylist(v15, a3, v16);
                  if (!v14) {
                    goto LABEL_19;
                  }
                }
LABEL_31:
                uint64_t v17 = v14;
                goto LABEL_20;
              }
LABEL_30:
              uint64_t v14 = FigSignalErrorAt();
              goto LABEL_31;
            }
          }
        }
LABEL_29:
        uint64_t v17 = TempFileAtURL;
        a4 = 0;
        goto LABEL_20;
      }
LABEL_28:
      uint64_t TempFileAtURL = FigSignalErrorAt();
      goto LABEL_29;
    }
  }
  else
  {
    uint64_t v11 = FigSignalErrorAt();
  }
  uint64_t v17 = v11;
  a4 = 0;
LABEL_21:
  FigFileForkClose();
  if (a4) {
    CFRelease(a4);
  }
  return v17;
}

uint64_t HLSPersistentStreamInfo_CopyMediaPlaylist(uint64_t a1, uint64_t a2, void *a3, CFTypeRef *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v8 = FigCFEqual();
  int v9 = FigCFEqual();
  if (DerivedStorage)
  {
    int v10 = v9;
    uint64_t v11 = FigReadWriteLockLockForRead();
    if (!v11)
    {
      if (!*(unsigned char *)(DerivedStorage + 8) && a2 && v8 | v10)
      {
        CFStringRef v12 = v10 ? @"PathToLocalCopy" : @"PathToOffline";
        CFTypeRef v13 = xmlCopyMediaPlaylistPath(DerivedStorage, v12);
        if (v13)
        {
          uint64_t v14 = v13;
          if (!a4
            || (uint64_t v15 = *(void *)(DerivedStorage + 24),
                CFTypeRef cf = 0,
                CFTypeRef v27 = 0,
                uint64_t v25 = 0,
                uint64_t AllocatorForMedia = FigGetAllocatorForMedia(),
                (uint64_t v17 = MEMORY[0x199708740](AllocatorForMedia, v14, 0, 0, v15)) == 0))
          {
            uint64_t v22 = 0;
LABEL_26:
            if (!a3 || v22)
            {
              FigReadWriteLockUnlockForRead();
              CFRelease(v14);
              return v22;
            }
            *a3 = v14;
LABEL_29:
            FigReadWriteLockUnlockForRead();
            return v22;
          }
          uint64_t v18 = (const void *)v17;
          FigGetAllocatorForMedia();
          uint64_t v19 = CMByteStreamCreateForFileURL();
          if (!v19)
          {
            uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v20) {
              uint64_t v21 = v20;
            }
            else {
              uint64_t v21 = 0;
            }
            uint64_t v23 = *(uint64_t (**)(CFTypeRef, void, uint64_t *))(v21 + 24);
            if (!v23)
            {
              uint64_t v22 = 4294954514;
              goto LABEL_24;
            }
            uint64_t v19 = v23(cf, 0, &v25);
            if (!v19)
            {
              FigGetAllocatorForMedia();
              uint64_t v22 = CMCreateContiguousBlockBufferFromStream();
              if (v22)
              {
                if (v27) {
                  CFRelease(v27);
                }
              }
              else
              {
                *a4 = v27;
                CFTypeRef v27 = 0;
              }
              goto LABEL_24;
            }
          }
          uint64_t v22 = v19;
LABEL_24:
          CFRelease(v18);
          if (cf) {
            CFRelease(cf);
          }
          goto LABEL_26;
        }
      }
      uint64_t v11 = FigSignalErrorAt();
    }
    uint64_t v22 = v11;
    goto LABEL_29;
  }

  return FigSignalErrorAt();
}

uint64_t HLSPersistentStreamInfo_writeMediaSegment(double a1, double a2, uint64_t a3, OpaqueCMBlockBuffer *a4, const void *a5, uint64_t a6, uint64_t a7, CFTypeRef *a8)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    uint64_t v16 = DerivedStorage;
    uint64_t v17 = FigReadWriteLockLockForWrite();
    if (v17) {
      return v17;
    }
    if (*(unsigned char *)(v16 + 8) || *(unsigned char *)(v16 + 112) != 1) {
      uint64_t v18 = FigSignalErrorAt();
    }
    else {
      uint64_t v18 = writeMediaSegment(v16, a4, a5, a6, a7, 1, a8, a1, a2);
    }
    uint64_t v19 = v18;
    FigReadWriteLockUnlockForWrite();
    return v19;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t HLSPersistentStreamInfo_writeMediaInitializationSegment(uint64_t a1, OpaqueCMBlockBuffer *a2, const void *a3, uint64_t a4, uint64_t a5, CFTypeRef *a6)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    uint64_t v12 = DerivedStorage;
    uint64_t v13 = FigReadWriteLockLockForWrite();
    if (v13) {
      return v13;
    }
    if (*(unsigned char *)(v12 + 112) != 1 || *(unsigned char *)(v12 + 8)) {
      uint64_t v14 = FigSignalErrorAt();
    }
    else {
      uint64_t v14 = writeMediaSegment(v12, a2, a3, a4, a5, 0, a6, 0.0, 0.0);
    }
    uint64_t v15 = v14;
    FigReadWriteLockUnlockForWrite();
    return v15;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t HLSPersistentStreamInfo_removeMediaInitializationSegment(uint64_t a1, const void *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    uint64_t v4 = DerivedStorage;
    uint64_t v5 = FigReadWriteLockLockForWrite();
    if (v5) {
      return v5;
    }
    if (!a2
      || *(unsigned char *)(v4 + 8)
      || (CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(v4 + 64), a2)) == 0
      || (CFStringRef v7 = (const __CFString *)CFDictionaryGetValue(Value, @"PATH")) == 0)
    {
      uint64_t v14 = FigSignalErrorAt();
      FigReadWriteLockUnlockForWrite();
      return v14;
    }
    CFStringRef v8 = v7;
    CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    CFURLRef v10 = CFURLCreateCopyAppendingPathComponent(AllocatorForMedia, *(CFURLRef *)(v4 + 24), v8, 0);
    CFURLGetFileSystemRepresentation(v10, 0, buffer, 1023);
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v4 + 64), a2);
    uint64_t v11 = xmlSetMediaInitializationSegmentArray(*(void *)(v4 + 80), *(const __CFDictionary **)(v4 + 64));
    if (!v11)
    {
      *(unsigned char *)(v4 + 72) = 1;
      uint64_t v11 = commitStreamInfo(v4);
      if (!v11) {
        uint64_t v11 = removefile((const char *)buffer, 0, 0);
      }
    }
    uint64_t v12 = v11;
    FigReadWriteLockUnlockForWrite();
    if (v10) {
      CFRelease(v10);
    }
    return v12;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t HLSPersistentStreamInfo_removeMediaSegment(uint64_t a1, const void *a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    uint64_t v4 = DerivedStorage;
    uint64_t v5 = FigReadWriteLockLockForWrite();
    if (v5) {
      return v5;
    }
    if (*(unsigned char *)(v4 + 112) != 1
      || *(unsigned char *)(v4 + 8)
      || !a2
      || (CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(v4 + 48), a2)) == 0
      || (CFStringRef v7 = (const __CFString *)CFDictionaryGetValue(Value, @"PATH")) == 0)
    {
      uint64_t v28 = FigSignalErrorAt();
      FigReadWriteLockUnlockForWrite();
      return v28;
    }
    CFStringRef v8 = v7;
    CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    CFURLRef v10 = CFURLCreateCopyAppendingPathComponent(AllocatorForMedia, *(CFURLRef *)(v4 + 24), v8, 0);
    CFURLGetFileSystemRepresentation(v10, 0, buffer, 1023);
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v4 + 48), a2);
    CFArrayRef v11 = *(const __CFArray **)(v4 + 56);
    v33.size_t length = CFArrayGetCount(v11);
    v33.CFIndex location = 0;
    FirstIndexOfCFDictionaryRef Value = CFArrayGetFirstIndexOfValue(v11, v33, a2);
    CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v4 + 56), FirstIndexOfValue);
    uint64_t v13 = *(void *)(v4 + 80);
    CFDictionaryRef v14 = *(const __CFDictionary **)(v4 + 48);
    CFArrayRef v15 = *(const __CFArray **)(v4 + 56);
    CFTypeRef cf = xmlGetMediaSegments(v13);
    if (cf) {
      FigXMLNodeRemoveAndClearChild(v13, &cf);
    }
    uint64_t v16 = FigGetAllocatorForMedia();
    FigXMLNodeGetTag(v13);
    if (FigCFEqual()) {
      uint64_t v17 = v13;
    }
    else {
      uint64_t v17 = 0;
    }
    uint64_t v18 = FigXMLNodeCreateChildNode(v16, v17, @"MediaSegments", &cf);
    if (!v18)
    {
      if (!v15 || (CFIndex Count = CFArrayGetCount(v15), Count < 1))
      {
LABEL_20:
        uint64_t v24 = 0;
LABEL_21:
        if (cf) {
          CFRelease(cf);
        }
        if (!v24)
        {
          *(unsigned char *)(v4 + 72) = 1;
          uint64_t v25 = commitStreamInfo(v4);
          if (!v25)
          {
            uint64_t v25 = FigCFURLGetFileStats();
            if (!v25)
            {
              uint64_t v25 = removefile((const char *)buffer, 0, 0);
              if (!v25)
              {
                uint64_t v26 = *(void *)(v4 + 192);
                *(void *)(v4 + 192) = v26;
                uint64_t v25 = xmlSetMediaBytesStored(*(void *)(v4 + 80), v26);
              }
            }
          }
          uint64_t v24 = v25;
        }
        FigReadWriteLockUnlockForWrite();
        if (v10) {
          CFRelease(v10);
        }
        return v24;
      }
      CFIndex v20 = Count;
      CFIndex v21 = 0;
      while (1)
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v15, v21);
        CFDictionaryRef v23 = (const __CFDictionary *)CFDictionaryGetValue(v14, ValueAtIndex);
        if (!v23) {
          break;
        }
        uint64_t v18 = addNodeToMediaSegmentList(v23, (uint64_t)cf);
        if (v18) {
          goto LABEL_34;
        }
        if (v20 == ++v21) {
          goto LABEL_20;
        }
      }
      uint64_t v18 = FigSignalErrorAt();
    }
LABEL_34:
    uint64_t v24 = v18;
    goto LABEL_21;
  }

  return FigSignalErrorAt();
}

uint64_t HLSPersistentStreamInfo_upgradeForWriting()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    uint64_t v1 = DerivedStorage;
    uint64_t v2 = FigReadWriteLockLockForWrite();
    if (v2) {
      return v2;
    }
    if (*(unsigned char *)(v1 + 8))
    {
      uint64_t v3 = FigSignalErrorAt();
    }
    else if (*(unsigned char *)(v1 + 112))
    {
      uint64_t v3 = 0;
    }
    else
    {
      uint64_t v3 = lockLockFile(v1);
      if (!v3) {
        *(unsigned char *)(v1 + 112) = 1;
      }
    }
    FigReadWriteLockUnlockForWrite();
    return v3;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t HLSPersistentStreamInfo_downgradeForReading()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    uint64_t v1 = DerivedStorage;
    uint64_t v2 = FigReadWriteLockLockForWrite();
    if (v2) {
      return v2;
    }
    if (*(unsigned char *)(v1 + 8))
    {
      uint64_t v3 = FigSignalErrorAt();
    }
    else
    {
      if (*(unsigned char *)(v1 + 112) != 1)
      {
        uint64_t v4 = 0;
        goto LABEL_7;
      }
      *(unsigned char *)(v1 + 112) = 0;
      uint64_t v3 = lockLockFile(v1);
    }
    uint64_t v4 = v3;
LABEL_7:
    FigReadWriteLockUnlockForWrite();
    return v4;
  }

  return FigSignalErrorAt();
}

uint64_t HLSPersistentStreamInfo_commitStreamInfo()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    uint64_t v1 = (unsigned char *)DerivedStorage;
    uint64_t v2 = FigReadWriteLockLockForWrite();
    if (v2) {
      return v2;
    }
    if (v1[72] == 1)
    {
      if (v1[112] != 1 || v1[8]) {
        uint64_t v3 = FigSignalErrorAt();
      }
      else {
        uint64_t v3 = commitStreamInfo((uint64_t)v1);
      }
      uint64_t v4 = v3;
    }
    else
    {
      uint64_t v4 = 0;
    }
    FigReadWriteLockUnlockForWrite();
    return v4;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t HLSPersistentStreamInfo_CopyMediaSegment(uint64_t a1, void *a2, CMBlockBufferRef *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    uint64_t v6 = DerivedStorage;
    uint64_t v7 = FigReadWriteLockLockForRead();
    if (!v7) {
      uint64_t v7 = copyMediaSegment(v6, *(CFDictionaryRef *)(v6 + 48), a2, a3);
    }
    uint64_t v8 = v7;
    FigReadWriteLockUnlockForRead();
    return v8;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t HLSPersistentStreamInfo_CopyMediaInitializationSegment(uint64_t a1, void *a2, CMBlockBufferRef *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    uint64_t v6 = DerivedStorage;
    uint64_t v7 = FigReadWriteLockLockForRead();
    if (!v7) {
      uint64_t v7 = copyMediaSegment(v6, *(CFDictionaryRef *)(v6 + 64), a2, a3);
    }
    uint64_t v8 = v7;
    FigReadWriteLockUnlockForRead();
    return v8;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t writeMediaSegment(uint64_t a1, OpaqueCMBlockBuffer *a2, const void *a3, uint64_t a4, uint64_t a5, int a6, CFTypeRef *a7, double a8, double a9)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  if (a6)
  {
    CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    CFStringRef v19 = CFStringCreateWithFormat(AllocatorForMedia, 0, @"(%g)_(%lld)_(%g).frag", *(void *)&a9, a4, *(void *)&a8);
    if (v19)
    {
      CFAllocatorRef v24 = (const __CFAllocator *)FigGetAllocatorForMedia();
      CFURLRef v25 = CFURLCreateCopyAppendingPathComponent(v24, *(CFURLRef *)(a1 + 24), v19, 0);
      if (v25)
      {
        CFURLRef v26 = v25;
        FigGetAllocatorForMedia();
        uint64_t v27 = CMByteStreamCreateForFileURL();
        if (v27)
        {
          uint64_t v47 = v27;
          CFStringRef v32 = 0;
          goto LABEL_34;
        }
        CFURLRef v49 = v26;
        DataCFIndex Length = CMBlockBufferGetDataLength(a2);
        uint64_t v29 = CMByteStreamWriteBlockBuffer();
        if (v29)
        {
          uint64_t v47 = v29;
          CFStringRef v32 = 0;
          goto LABEL_33;
        }
        CFIndex v48 = a7;
        CFAllocatorRef v30 = (const __CFAllocator *)FigGetAllocatorForMedia();
        if (a6)
        {
          uint64_t v31 = (void *)(a1 + 128);
          CFStringRef v32 = CFStringCreateWithFormat(v30, 0, @"%ld", *(void *)(a1 + 128));
          if (v32)
          {
            size_t v33 = CMBlockBufferGetDataLength(a2);
            DictionaryForSegmentEntry = createDictionaryForSegmentEntry(a3, a4, a5, v33, v19);
            if (DictionaryForSegmentEntry)
            {
              CFTypeID v35 = DictionaryForSegmentEntry;
              CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 48), v32, DictionaryForSegmentEntry);
              CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 56), v32);
              uint64_t v36 = *(void *)(a1 + 80);
              MediaSegments = xmlGetMediaSegments(v36);
              if (MediaSegments)
              {
                CFTypeRef v38 = CFRetain(MediaSegments);
                cf[0] = v38;
                if (v38) {
                  goto LABEL_25;
                }
              }
              else
              {
                cf[0] = 0;
              }
              uint64_t v42 = FigGetAllocatorForMedia();
              FigXMLNodeGetTag(v36);
              if (FigCFEqual()) {
                uint64_t v43 = v36;
              }
              else {
                uint64_t v43 = 0;
              }
              uint64_t ChildNode = FigXMLNodeCreateChildNode(v42, v43, @"MediaSegments", cf);
              CFTypeRef v38 = cf[0];
              if (ChildNode)
              {
                uint64_t v47 = ChildNode;
                if (!cf[0])
                {
LABEL_27:
                  if (v47)
                  {
LABEL_32:
                    CFRelease(v35);
LABEL_33:
                    CFURLRef v26 = v49;
LABEL_34:
                    CFRelease(v26);
                    goto LABEL_35;
                  }
                  goto LABEL_28;
                }
LABEL_26:
                CFRelease(v38);
                goto LABEL_27;
              }
LABEL_25:
              uint64_t v47 = addNodeToMediaSegmentList(v35, (uint64_t)v38);
              CFTypeRef v38 = cf[0];
              if (!cf[0]) {
                goto LABEL_27;
              }
              goto LABEL_26;
            }
          }
        }
        else
        {
          uint64_t v31 = (void *)(a1 + 136);
          CFStringRef v32 = CFStringCreateWithFormat(v30, 0, @"%ld", *(void *)(a1 + 136));
          if (v32)
          {
            size_t v39 = CMBlockBufferGetDataLength(a2);
            DictionaryForInitializationSegmentEntry = createDictionaryForInitializationSegmentEntry(a3, a4, a5, v39, v19);
            if (DictionaryForInitializationSegmentEntry)
            {
              CFTypeID v35 = DictionaryForInitializationSegmentEntry;
              CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 64), v32, DictionaryForInitializationSegmentEntry);
              uint64_t v41 = xmlSetMediaInitializationSegmentArray(*(void *)(a1 + 80), *(const __CFDictionary **)(a1 + 64));
              if (v41)
              {
LABEL_31:
                uint64_t v47 = v41;
                goto LABEL_32;
              }
LABEL_28:
              ++*v31;
              if (v48) {
                *CFIndex v48 = CFRetain(v32);
              }
              *(unsigned char *)(a1 + 72) = 1;
              uint64_t v45 = *(void *)(a1 + 192) + DataLength;
              *(void *)(a1 + 192) = v45;
              uint64_t v41 = xmlSetMediaBytesStored(*(void *)(a1 + 80), v45);
              goto LABEL_31;
            }
          }
        }
        uint64_t v47 = FigSignalErrorAt();
        goto LABEL_33;
      }
    }
    uint64_t v47 = FigSignalErrorAt();
  }
  else
  {
    cf[0] = 0;
    cf[1] = 0;
    int v51 = 0;
    uint64_t v20 = FigDigestSHA1Create();
    FigGetAllocatorForMedia();
    uint64_t BytesFromCFString = FigCreateBytesFromCFString();
    if (BytesFromCFString)
    {
      uint64_t v22 = (void *)BytesFromCFString;
      MEMORY[0x19970D170](v20, BytesFromCFString, 0);
      FigDigestSHA1GetDigest();
      FigGetAllocatorForMedia();
      FigCreateBase32EncodedStringFromBytes();
      CFAllocatorRef v23 = (const __CFAllocator *)FigGetAllocatorForMedia();
      CFAllocatorDeallocate(v23, v22);
    }
    MEMORY[0x19970D190](v20);
    uint64_t v47 = FigSignalErrorAt();
    CFStringRef v19 = 0;
  }
  CFStringRef v32 = 0;
LABEL_35:
  if (v19) {
    CFRelease(v19);
  }
  if (v32) {
    CFRelease(v32);
  }
  return v47;
}

__CFDictionary *createDictionaryForSegmentEntry(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5)
{
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 6, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  int v9 = Mutable;
  if (Mutable)
  {
    CFDictionaryAddValue(Mutable, @"URL", a1);
    CFDictionaryAddValue(v9, @"PATH", a5);
    FigCFDictionarySetDouble();
    FigCFDictionarySetDouble();
    FigCFDictionarySetInt64();
    FigCFDictionarySetInt64();
    FigCFDictionarySetValue();
  }
  return v9;
}

__CFDictionary *createDictionaryForInitializationSegmentEntry(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5)
{
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 4, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  int v9 = Mutable;
  if (Mutable)
  {
    CFDictionaryAddValue(Mutable, @"URL", a1);
    CFDictionaryAddValue(v9, @"PATH", a5);
    FigCFDictionarySetInt64();
    FigCFDictionarySetInt64();
    FigCFDictionarySetValue();
  }
  return v9;
}

uint64_t xmlSetMediaInitializationSegmentArray(uint64_t a1, const __CFDictionary *a2)
{
  MediaInitializationSegments = xmlGetMediaInitializationSegments(a1);
  long long context = MediaInitializationSegments;
  FigXMLNodeGetTag(a1);
  int v5 = FigCFEqual();
  if (!a1 || !v5)
  {
    uint64_t ChildNode = FigSignalErrorAt();
    if (!MediaInitializationSegments) {
      return ChildNode;
    }
    goto LABEL_8;
  }
  if (MediaInitializationSegments) {
    FigXMLNodeRemoveAndClearChild(a1, (const void **)&context);
  }
  uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
  uint64_t ChildNode = FigXMLNodeCreateChildNode(AllocatorForMedia, a1, @"MediaInitializationSegments", (CFTypeRef *)&context);
  MediaInitializationSegments = context;
  if (!ChildNode)
  {
    CFDictionaryApplyFunction(a2, (CFDictionaryApplierFunction)applierAddNodeToMediaInitializationSegmentList, context);
    MediaInitializationSegments = context;
  }
  if (MediaInitializationSegments) {
LABEL_8:
  }
    CFRelease(MediaInitializationSegments);
  return ChildNode;
}

uint64_t xmlSetMediaBytesStored(uint64_t a1, uint64_t a2)
{
  FigXMLNodeGetTag(a1);
  int v4 = FigCFEqual();
  if (a1 && v4)
  {
    CFTypeRef cf = FigXMLNodeGetChild(a1, @"MediaBytesStored");
    if (cf) {
      FigXMLNodeRemoveAndClearChild(a1, &cf);
    }
    uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
    uint64_t v6 = FigXMLNodeCreateChildNode(AllocatorForMedia, a1, @"MediaBytesStored", &cf);
    CFTypeRef v7 = cf;
    if (!v6)
    {
      uint64_t v6 = FigXMLNodeContentSetInt64((uint64_t)cf, a2 & ~(a2 >> 63));
      CFTypeRef v7 = cf;
    }
    if (v7) {
      CFRelease(v7);
    }
  }
  else
  {
    FigSignalErrorAt();
    return 0;
  }
  return v6;
}

CFStringRef *xmlGetMediaSegments(uint64_t a1)
{
  FigXMLNodeGetTag(a1);
  int v2 = FigCFEqual();
  if (a1 && v2)
  {
    return FigXMLNodeGetChild(a1, @"MediaSegments");
  }
  else
  {
    FigSignalErrorAt();
    return 0;
  }
}

uint64_t addNodeToMediaSegmentList(const __CFDictionary *a1, uint64_t a2)
{
  uint64_t v11 = 0;
  double v12 = 0.0;
  CFTypeRef cf = 0;
  uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
  uint64_t v5 = FigXMLNodeCreateChildNode(AllocatorForMedia, a2, @"SEG", &cf);
  if (!v5)
  {
    CFDictionaryRef Value = CFDictionaryGetValue(a1, @"URL");
    if (!Value
      || (uint64_t v5 = FigXMLNodeAttributeSetCFString((uint64_t)cf, @"URL", (uint64_t)Value), !v5))
    {
      CFTypeRef v7 = CFDictionaryGetValue(a1, @"PATH");
      if (!v7 || (uint64_t v5 = FigXMLNodeAttributeSetCFString((uint64_t)cf, @"PATH", (uint64_t)v7), !v5))
      {
        if (!FigCFDictionaryGetInt64IfPresent()
          || (uint64_t v5 = FigXMLNodeAttributeSetInt64((uint64_t)cf, @"SeqNum", v11), !v5))
        {
          FigCFDictionaryGetDoubleIfPresent();
          uint64_t v5 = FigXMLNodeAttributeSetDouble((uint64_t)cf, @"Tim", v12);
          if (!v5)
          {
            FigCFDictionaryGetDoubleIfPresent();
            uint64_t v5 = FigXMLNodeAttributeSetDouble((uint64_t)cf, @"Dur", v12);
            if (!v5)
            {
              FigCFDictionaryGetInt64IfPresent();
              uint64_t v5 = FigXMLNodeAttributeSetInt64((uint64_t)cf, @"Off", v11);
              if (!v5)
              {
                FigCFDictionaryGetInt64IfPresent();
                uint64_t v5 = FigXMLNodeAttributeSetInt64((uint64_t)cf, @"Len", v11);
              }
            }
          }
        }
      }
    }
  }
  uint64_t v8 = v5;
  if (cf) {
    CFRelease(cf);
  }
  return v8;
}

CFStringRef *xmlGetMediaInitializationSegments(uint64_t a1)
{
  FigXMLNodeGetTag(a1);
  int v2 = FigCFEqual();
  if (a1 && v2)
  {
    return FigXMLNodeGetChild(a1, @"MediaInitializationSegments");
  }
  else
  {
    FigSignalErrorAt();
    return 0;
  }
}

void applierAddNodeToMediaInitializationSegmentList(uint64_t a1, const __CFDictionary *a2, uint64_t a3)
{
  CFTypeRef cf = 0;
  uint64_t v9 = 0;
  uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
  if (!FigXMLNodeCreateChildNode(AllocatorForMedia, a3, @"ISEG", &cf))
  {
    CFDictionaryRef Value = CFDictionaryGetValue(a2, @"URL");
    if (!Value || !FigXMLNodeAttributeSetCFString((uint64_t)cf, @"URL", (uint64_t)Value))
    {
      CFTypeRef v7 = CFDictionaryGetValue(a2, @"PATH");
      if ((!v7 || !FigXMLNodeAttributeSetCFString((uint64_t)cf, @"PATH", (uint64_t)v7))
        && (!FigCFDictionaryGetInt64IfPresent()
         || !FigXMLNodeAttributeSetInt64((uint64_t)cf, @"SeqNum", v9)))
      {
        FigCFDictionaryGetInt64IfPresent();
        if (!FigXMLNodeAttributeSetInt64((uint64_t)cf, @"Off", v9))
        {
          FigCFDictionaryGetInt64IfPresent();
          FigXMLNodeAttributeSetInt64((uint64_t)cf, @"Len", v9);
        }
      }
    }
  }
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t commitStreamInfo(uint64_t a1)
{
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFURLRef v3 = CFURLCreateCopyAppendingPathComponent(AllocatorForMedia, *(CFURLRef *)(a1 + 24), @"StreamInfoBoot.xml", 0);
  if (v3)
  {
    CFURLRef v4 = v3;
    if (*(unsigned char *)(a1 + 72) != 1 || (uint64_t v5 = FigXMLNodeWriteToFilePath(*(void *)(a1 + 80), v3), !v5))
    {
      uint64_t v5 = 0;
      *(unsigned char *)(a1 + 72) = 0;
    }
    CFRelease(v4);
    return v5;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t copyMediaSegment(uint64_t a1, CFDictionaryRef theDict, void *key, CMBlockBufferRef *a4)
{
  uint64_t v4 = 0;
  dataPointerOut = 0;
  CFTypeRef cf = 0;
  size_t totalLengthOut = 0;
  CMBlockBufferRef theBuffer = 0;
  size_t lengthAtOffsetOut = 0;
  if (!key || !a4) {
    goto LABEL_30;
  }
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v4 = FigSignalErrorAt();
    goto LABEL_30;
  }
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, key);
  CFURLRef v8 = Value;
  if (!Value)
  {
    CMBlockBufferRef v25 = 0;
LABEL_26:
    uint64_t v4 = 0;
    *a4 = v25;
    CMBlockBufferRef theBuffer = 0;
    goto LABEL_28;
  }
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  CFStringRef v9 = (const __CFString *)CFDictionaryGetValue(Value, @"PATH");
  if (!v9)
  {
    uint64_t v4 = FigSignalErrorAt();
    CFURLRef v8 = 0;
    goto LABEL_28;
  }
  CFStringRef v10 = v9;
  FigCFDictionaryGetInt64IfPresent();
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFURLRef v8 = CFURLCreateCopyAppendingPathComponent(AllocatorForMedia, *(CFURLRef *)(a1 + 24), v10, 0);
  if (!v8)
  {
LABEL_42:
    uint64_t BlockBuffer = FigSignalErrorAt();
    goto LABEL_43;
  }
  FigGetAllocatorForMedia();
  uint64_t BlockBuffer = CMByteStreamCreateForFileURL();
  if (BlockBuffer)
  {
LABEL_43:
    uint64_t v4 = BlockBuffer;
    goto LABEL_28;
  }
  if (*(void *)(a1 + 200)) {
    goto LABEL_15;
  }
  CFAllocatorRef v13 = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v13, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
    uint64_t v4 = FigSignalErrorAt();
    if (v4) {
      goto LABEL_28;
    }
LABEL_15:
    uint64_t BlockBuffer = FigMemoryPoolCreateBlockBuffer();
    if (BlockBuffer) {
      goto LABEL_43;
    }
    uint64_t BlockBuffer = CMBlockBufferGetDataPointer(theBuffer, 0, &lengthAtOffsetOut, &totalLengthOut, &dataPointerOut);
    if (BlockBuffer) {
      goto LABEL_43;
    }
    if (lengthAtOffsetOut == totalLengthOut)
    {
      uint64_t v22 = dataPointerOut;
      CFTypeRef v21 = cf;
      uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v23) {
        uint64_t v24 = v23;
      }
      else {
        uint64_t v24 = 0;
      }
      CFURLRef v26 = *(uint64_t (**)(CFTypeRef, uint64_t, void, char *, uint64_t *))(v24 + 8);
      if (!v26)
      {
        uint64_t v4 = 4294954514;
        goto LABEL_28;
      }
      uint64_t BlockBuffer = v26(v21, v29, 0, v22, &v28);
      if (BlockBuffer) {
        goto LABEL_43;
      }
      if (v29 == v28)
      {
        CMBlockBufferRef v25 = theBuffer;
        goto LABEL_26;
      }
    }
    goto LABEL_42;
  }
  CFArrayRef v15 = Mutable;
  CFAllocatorRef v16 = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFStringRef v17 = CFStringCreateWithFormat(v16, 0, @"[FigHLSPersistentInfoStore %p]", a1);
  if (v17)
  {
    CFStringRef v18 = v17;
    CFDictionarySetValue(v15, (const void *)*MEMORY[0x1E4F21788], v17);
    CMMemoryPoolRef v19 = CMMemoryPoolCreate(v15);
    *(void *)(a1 + 200) = v19;
    if (v19) {
      uint64_t v4 = 0;
    }
    else {
      uint64_t v4 = FigSignalErrorAt();
    }
    CFRelease(v15);
    uint64_t v20 = (__CFDictionary *)v18;
  }
  else
  {
    uint64_t v4 = FigSignalErrorAt();
    uint64_t v20 = v15;
  }
  CFRelease(v20);
  if (!v4) {
    goto LABEL_15;
  }
LABEL_28:
  if (v8) {
    CFRelease(v8);
  }
LABEL_30:
  if (cf) {
    CFRelease(cf);
  }
  if (theBuffer) {
    CFRelease(theBuffer);
  }
  return v4;
}

uint64_t FigMediaProcessorCreateForTemporalMetadataFilter(const __CFAllocator *a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, const void *a6, const void *a7, int a8, uint64_t *a9)
{
  CFTypeRef cf = 0;
  CFTypeRef v26 = 0;
  CFTypeRef v23 = 0;
  CFTypeRef v24 = 0;
  if (a2 && a3)
  {
    uint64_t v16 = FigSampleBufferProcessorCreateForTemporalMetadataFilter((uint64_t)a1, a6, &v26);
    if (v16) {
      goto LABEL_9;
    }
    uint64_t v16 = FigSampleBufferProviderCreateForBufferQueue((uint64_t)a1, a2, &cf);
    if (v16) {
      goto LABEL_9;
    }
    long long v21 = *(_OWORD *)a4;
    uint64_t v22 = *(void *)(a4 + 16);
    long long v19 = *(_OWORD *)a5;
    uint64_t v20 = *(void *)(a5 + 16);
    uint64_t v16 = FigSampleBufferConsumerCreateForBufferQueue(a3, &v21, &v19, &v24);
    if (v16) {
      goto LABEL_9;
    }
    if (a7)
    {
      uint64_t v16 = FigActivitySchedulerCreateForCFRunLoop(a1, a7, &v23);
      if (v16)
      {
LABEL_9:
        uint64_t v17 = v16;
        if (cf) {
          CFRelease(cf);
        }
        if (v23) {
          CFRelease(v23);
        }
        if (v26) {
          CFRelease(v26);
        }
        if (v24) {
          CFRelease(v24);
        }
        return v17;
      }
    }
    else
    {
      uint64_t v16 = FigActivitySchedulerCreateForNewThread((uint64_t)a1, a8, @"com.apple.coremedia.mediaprocessor.temporalmetadatafilter", &v23);
      if (v16) {
        goto LABEL_9;
      }
    }
    uint64_t v16 = FigMediaProcessorCreate((uint64_t)a1, v26, cf, v24, v23, a9);
    goto LABEL_9;
  }

  return FigSignalErrorAt();
}

uint64_t CreatePesPrivateForDTS(void *a1)
{
  if (a1[6])
  {
    int v2 = (void (*)(void *))a1[107];
    if (v2) {
      v2(a1);
    }
    a1[6] = 0;
  }
  CFURLRef v3 = malloc_type_calloc(1uLL, 0x40uLL, 0x1000040CE3128F8uLL);
  if (!v3) {
    return 12;
  }
  uint64_t v4 = v3;
  uint64_t result = 0;
  a1[105] = PesDTSProcessData;
  a1[106] = PesDTSCleanPrivateData;
  a1[107] = PesDTSDeletePrivateData;
  a1[6] = v4;
  return result;
}

uint64_t PesDTSProcessData(uint64_t a1, CMBlockBufferRef theBuffer, size_t offset, char *__src, size_t dataLength, uint64_t a6)
{
  char *returnedPointerOut[3];

  CFStringRef v9 = theBuffer;
  returnedPointerOut[2] = *(char **)MEMORY[0x1E4F143B8];
  size_t v29 = 0;
  char v28 = 0;
  uint64_t v27 = 0;
  uint64_t v11 = *(void *)(a1 + 48);
  unint64_t v12 = *(void *)(v11 + 48);
  if (v12)
  {
    uint64_t v25 = a6;
    CFAllocatorRef v13 = (void *)(v11 + 33);
    while (1)
    {
      size_t v14 = dataLength >= 12 - v12 ? 12 - v12 : dataLength;
      if (__src)
      {
        memcpy((char *)v13 + v12, __src, v14);
        __src += v14;
      }
      else
      {
        uint64_t v15 = CMBlockBufferCopyDataBytes(theBuffer, offset, v14, (char *)v13 + v12);
        if (v15) {
          goto LABEL_62;
        }
        __src = 0;
        offset += v14;
      }
      unint64_t v16 = *(void *)(v11 + 48) + v14;
      *(void *)(v11 + 48) = v16;
      if (v16 < 0xC) {
        return 0;
      }
      dataLength -= v14;
      if (*(_DWORD *)v13 != 25230975)
      {
        unint64_t v12 = v16 - 1;
        *(void *)(v11 + 48) = v16 - 1;
        uint64_t v17 = *(void *)(v11 + 34);
        __int16 v18 = *(_WORD *)(v11 + 42);
        *(unsigned char *)(v11 + 43) = *(unsigned char *)(v11 + 44);
        *(_WORD *)(v11 + 41) = v18;
        *CFAllocatorRef v13 = v17;
        if (v16 < 0xD) {
          continue;
        }
      }
      *(void *)(v11 + 48) = 0;
      SetUpFrame(a1, v11, v11 + 33);
      uint64_t v15 = PesAddMemoryToFrameMemory(a1, (const void *)(v11 + 33), 0xCuLL, *(void *)(a1 + 624), &v29, &v28);
      a6 = v25;
      CFStringRef v9 = theBuffer;
      if (v15) {
        goto LABEL_62;
      }
      break;
    }
  }
  if (*(unsigned char *)(a6 + 24))
  {
    long long v19 = *(_OWORD *)(a6 + 16);
    *(_OWORD *)uint64_t v11 = *(_OWORD *)a6;
    *(_OWORD *)(v11 + 16) = v19;
  }
  if (dataLength > 0xB || *(unsigned char *)(v11 + 32))
  {
    if (!*(unsigned char *)(v11 + 32)) {
      goto LABEL_25;
    }
LABEL_22:
    if (__src)
    {
LABEL_28:
      uint64_t v15 = PesAddMemoryToFrameMemory(a1, __src, dataLength, *(void *)(a1 + 624), &v29, &v28);
      if (v15) {
        goto LABEL_62;
      }
      size_t v20 = v29;
      __src += v29;
    }
    else
    {
LABEL_23:
      uint64_t v15 = PesAddBlockBufferToFrameBlockBuffer(a1, v9, offset, dataLength, *(void *)(a1 + 624), &v29, &v28);
      if (v15) {
        goto LABEL_62;
      }
      __src = 0;
      size_t v20 = v29;
      offset += v29;
    }
    dataLength -= v20;
    if (!v28) {
      goto LABEL_48;
    }
    ++*(_DWORD *)(v11 + 60);
    *(unsigned char *)(v11 + 32) = 0;
    if (*(unsigned char *)(a1 + 658) || *(unsigned char *)(a1 + 505))
    {
      uint64_t v15 = FigMPEG2AudioFrameQueueEntryAdjustTimestampsAndEmit(a1, a1 + 456);
      if (v15) {
        goto LABEL_62;
      }
    }
    PesCleanAfterFrameEmit(a1);
LABEL_48:
    while (dataLength > 0xB)
    {
      if (*(unsigned char *)(v11 + 32)) {
        goto LABEL_22;
      }
LABEL_25:
      if (__src && *(_DWORD *)__src == 25230975) {
        goto LABEL_27;
      }
      if (v9)
      {
        returnedPointerOut[0] = 0;
        if (!CMBlockBufferAccessDataBytes(v9, offset, 4uLL, temporaryBlock, returnedPointerOut)
          && *(_DWORD *)returnedPointerOut[0] == 25230975)
        {
          if (*(unsigned char *)(v11 + 32)) {
            goto LABEL_22;
          }
          if (__src)
          {
LABEL_27:
            SetUpFrame(a1, v11, (uint64_t)__src);
            goto LABEL_28;
          }
          uint64_t v15 = CMBlockBufferAccessDataBytes(v9, offset, 0xCuLL, (void *)(v11 + 33), &v27);
          if (!v15)
          {
            SetUpFrame(a1, v11, (uint64_t)v27);
            goto LABEL_23;
          }
          goto LABEL_62;
        }
      }
      if (*(unsigned char *)(v11 + 56)) {
        *(unsigned char *)(v11 + 56) = 0;
      }
      if (__src)
      {
        ++__src;
      }
      else
      {
        ++offset;
        __src = 0;
      }
      --dataLength;
    }
  }
  if (dataLength)
  {
    if (__src)
    {
      uint64_t v27 = __src;
      goto LABEL_53;
    }
    uint64_t v15 = CMBlockBufferAccessDataBytes(v9, offset, dataLength, returnedPointerOut, &v27);
    if (!v15)
    {
      __src = v27;
LABEL_53:
      uint64_t v21 = 0;
      while (__src[v21] != 127)
      {
        uint64_t v27 = &__src[++v21];
        if (dataLength == v21) {
          return 0;
        }
      }
      *(unsigned char *)(v11 + 33) = 127;
      size_t v22 = dataLength - v21;
      if (dataLength - 1 != v21) {
        memcpy((void *)(v11 + 34), &__src[v21 + 1], ~v21 + dataLength);
      }
      *(void *)(v11 + 48) = v22;
      return 0;
    }
LABEL_62:
    uint64_t v23 = v15;
    PesErrorHandling(a1, v15);
    return v23;
  }
  return 0;
}

uint64_t PesDTSCleanPrivateData(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 48);
  *(unsigned char *)(v1 + 32) = 0;
  *(void *)(v1 + 48) = 0;
  *(unsigned char *)(v1 + 24) = 0;
  *(unsigned char *)(v1 + 56) = 0;
  *(_DWORD *)(v1 + 60) = 0;
  return result;
}

void PesDTSDeletePrivateData(uint64_t a1)
{
  *(void *)(a1 + 48) = 0;
}

__n128 SetUpFrame(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 624) = (bswap32(*(_DWORD *)(a3 + 4)) >> 4) & 0x3FFF;
  *(_DWORD *)(a1 + 584) = ((bswap32(*(_DWORD *)(a3 + 4)) >> 13) & 0xFE0) + 32;
  int v5 = DTSAudioSampleFrequencies[((unint64_t)*(unsigned int *)(a3 + 8) >> 2) & 0xF];
  if (*(_DWORD *)(a1 + 768) != v5) {
    FigMPEG2ParserSetAudioCharacteristics(a1, v5);
  }
  *(unsigned char *)(a2 + 32) = 1;
  *(unsigned char *)(a2 + 56) = 1;
  __n128 result = *(__n128 *)a2;
  long long v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 480) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 496) = v7;
  *(_WORD *)(a2 + 24) = 0;
  return result;
}

uint64_t CreatePesPrivateForH264(void *a1)
{
  if (a1[6])
  {
    int v2 = (void (*)(void *))a1[107];
    if (v2) {
      v2(a1);
    }
    a1[6] = 0;
  }
  CFURLRef v3 = malloc_type_zone_calloc((malloc_zone_t *)gFigMPEG2ParserZone, 1uLL, 0x190uLL, 0x10B0040336C4AE3uLL);
  if (!v3) {
    return 12;
  }
  uint64_t v4 = v3;
  H264InitializeSPS_PPS_List(v3);
  a1[105] = H264ProcessData;
  a1[106] = H264CleanPrivateData;
  a1[107] = H264DeletePrivateData;
  a1[108] = H264FlushFrames;
  PesFrameHeadersInit((uint64_t)(a1 + 68), 8uLL);
  a1[6] = v4;
  *(void *)((char *)a1 + 804) = 0x3E900007530;
  FrameQueueEntryInit((uint64_t)(v4 + 10));
  *((_DWORD *)v4 + 8) = -1;
  *((_DWORD *)v4 + 76) = 5;
  *((_DWORD *)v4 + 61) = 1065353216;
  v4[31] = 0;
  int v5 = malloc_type_zone_calloc((malloc_zone_t *)gFigMPEG2ParserZone, 1uLL, 0x300uLL, 0x1010040113C0ABBuLL);
  uint64_t result = 0;
  v4[42] = v5;
  *((_DWORD *)v4 + 87) = 32;
  return result;
}

uint64_t H264ProcessData(uint64_t a1, CMBlockBufferRef theBuffer, size_t offset, unsigned __int8 *a4, unint64_t a5, uint64_t a6)
{
  if (a4)
  {
    return H264ProcessDataMemory(a1, a4, a5, (long long *)a6);
  }
  else
  {
    uint64_t v10 = 0;
    if (theBuffer && a5)
    {
      size_t v11 = offset;
      size_t v12 = a5 + offset;
      if (*(unsigned char *)(a6 + 24))
      {
        uint64_t v13 = *(void *)(a1 + 48);
        long long v14 = *(_OWORD *)a6;
        *(_OWORD *)(v13 + 56) = *(_OWORD *)(a6 + 16);
        *(_OWORD *)(v13 + 40) = v14;
      }
      if (v12 <= offset)
      {
        return 0;
      }
      else
      {
        dataPointerOut = 0;
        while (1)
        {
          size_t v17 = 0;
          uint64_t DataPointer = CMBlockBufferGetDataPointer(theBuffer, v11, &v17, 0, &dataPointerOut);
          if (DataPointer) {
            break;
          }
          unint64_t v16 = v17;
          if (v12 < v17 + v11)
          {
            unint64_t v16 = v12 - v11;
            size_t v17 = v12 - v11;
          }
          uint64_t DataPointer = H264ProcessDataMemory(a1, (unsigned __int8 *)dataPointerOut, v16, (long long *)a6);
          if (DataPointer) {
            break;
          }
          v11 += v17;
          if (v11 >= v12) {
            return 0;
          }
        }
        uint64_t v10 = DataPointer;
        PesErrorHandling(a1, DataPointer);
      }
    }
    return v10;
  }
}

uint64_t *H264CleanPrivateData(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (*(int *)(v2 + 344) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(v2 + 336);
    do
    {
      CFAllocatorDeallocate(*(CFAllocatorRef *)(*(void *)(a1 + 8) + 40), *(void **)(v5 + v3));
      uint64_t v5 = *(void *)(v2 + 336);
      *(void *)(v5 + v3) = 0;
      ++v4;
      v3 += 24;
    }
    while (v4 < *(int *)(v2 + 344));
  }
  *(_DWORD *)(v2 + 344) = 0;
  *(void *)(v2 + 352) = 0;
  *(_DWORD *)(v2 + 32) = -1;
  *(_WORD *)(v2 + 72) = 0;
  uint64_t v6 = MEMORY[0x1E4F1F9F8];
  *(_OWORD *)(v2 + 260) = *MEMORY[0x1E4F1F9F8];
  *(void *)(v2 + 276) = *(void *)(v6 + 16);
  *(void *)(v2 + 248) = 0;
  *(void *)(v2 + 288) = 0;
  *(void *)(v2 + 296) = 0;
  *(_DWORD *)(v2 + 304) = 5;
  long long v7 = *(void **)(v2 + 312);
  if (v7)
  {
    CFAllocatorDeallocate(*(CFAllocatorRef *)(*(void *)(a1 + 8) + 40), v7);
    *(void *)(v2 + 312) = 0;
  }
  *(void *)(v2 + 320) = 0;
  FrameQueueEntryClean(v2 + 80);
  *(unsigned char *)(v2 + 376) = 0;
  malloc_zone_free((malloc_zone_t *)gFigMPEG2ParserZone, *(void **)(v2 + 384));
  *(void *)(v2 + 384) = 0;
  *(void *)(v2 + 392) = 0;
  FrameQueueEntryClean(v2 + 80);
  FrameQueueEntryClean(a1 + 456);
  FrameQueueClean(a1 + 728);

  return FrameQueueClean(a1 + 784);
}

void H264DeletePrivateData(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  H264DestroySPS_PPS_List(v2);
  PesFrameHeaderDestroy((void *)(v2 + 168));
  PesFrameHeaderDestroy((void *)(a1 + 544));
  H264CleanPrivateData(a1);
  malloc_zone_free((malloc_zone_t *)gFigMPEG2ParserZone, *(void **)(v2 + 336));
  malloc_zone_free((malloc_zone_t *)gFigMPEG2ParserZone, *(void **)(a1 + 48));
  *(void *)(a1 + 48) = 0;
}

uint64_t *H264FlushFrames(uint64_t a1)
{
  H264AddAllocatedBufferToFrame(a1, 0, 1);
  H264EmitBuffer(a1);

  return H264CleanPrivateData(a1);
}

uint64_t H264ProcessDataMemory(uint64_t a1, unsigned __int8 *a2, unint64_t a3, long long *a4)
{
  unint64_t v5 = a3;
  uint64_t v8 = *(void *)(a1 + 48);
  uint64_t v9 = *(void *)(v8 + 312);
  if (v9)
  {
    uint64_t v10 = *(void *)(v8 + 320);
    unint64_t v11 = *(void *)(v8 + 328) - v10;
    size_t v12 = (unsigned char *)(v9 + v10);
    if (!a3)
    {
LABEL_117:
      uint64_t v39 = 0;
      if (*((unsigned char *)a4 + 24))
      {
        long long v40 = *a4;
        *(_OWORD *)(v8 + 56) = a4[1];
        *(_OWORD *)(v8 + 40) = v40;
      }
      return v39;
    }
  }
  else
  {
    unint64_t v11 = 0;
    size_t v12 = 0;
    if (!a3) {
      goto LABEL_117;
    }
  }
  int v42 = 0;
  uint64_t v43 = (_OWORD *)(a1 + 480);
  uint64_t v44 = a1 + 544;
  unint64_t v13 = a3;
  while (2)
  {
    switch(*(_DWORD *)(v8 + 304))
    {
      case 0:
        unint64_t v14 = v5;
        uint64_t v15 = a4;
        unint64_t v16 = v13 - 3;
        if (v13 <= 3)
        {
          int v18 = *a2;
        }
        else
        {
          int v17 = *(_DWORD *)a2;
          int v18 = *(_DWORD *)a2;
          if (*(_DWORD *)a2 >> 25 && (v17 & 0xFFFFFF) != 0x10000)
          {
            if (v11 <= 3)
            {
              unint64_t v19 = v13 - 3;
              uint64_t v20 = VendNewBuffer(a1, (void *)v8);
              if (v20) {
                goto LABEL_120;
              }
              unint64_t v11 = *(void *)(v8 + 328);
              size_t v12 = *(unsigned char **)(v8 + 312);
              unint64_t v16 = v19;
            }
            *(_DWORD *)size_t v12 = v17;
            v12 += 4;
            v11 -= 4;
            *(void *)(v8 + 320) += 4;
            a2 += 3;
            unint64_t v13 = v16;
            goto LABEL_83;
          }
        }
        if (!v18)
        {
          *(_DWORD *)(v8 + 304) = 1;
LABEL_83:
          a4 = v15;
          unint64_t v5 = v14;
          goto LABEL_114;
        }
        a4 = v15;
        unint64_t v5 = v14;
        if (!v11)
        {
          uint64_t v20 = VendNewBuffer(a1, (void *)v8);
          if (v20) {
            goto LABEL_120;
          }
          unint64_t v11 = *(void *)(v8 + 328);
          size_t v12 = *(unsigned char **)(v8 + 312);
          LOBYTE(v18) = *a2;
        }
        *v12++ = v18;
        goto LABEL_73;
      case 1:
        if (!*a2)
        {
          int v22 = 2;
          goto LABEL_81;
        }
        if (v11 <= 1)
        {
          uint64_t v20 = VendNewBuffer(a1, (void *)v8);
          if (v20) {
            goto LABEL_120;
          }
          unint64_t v11 = *(void *)(v8 + 328);
          size_t v12 = *(unsigned char **)(v8 + 312);
        }
        *size_t v12 = 0;
        v12[1] = *a2;
        v12 += 2;
        v11 -= 2;
        uint64_t v21 = *(void *)(v8 + 320) + 2;
        goto LABEL_78;
      case 2:
        if (*a2 == 1) {
          goto LABEL_24;
        }
        if (!*a2)
        {
          *(_DWORD *)(v8 + 304) = 3;
          goto LABEL_114;
        }
        if (v11 <= 2)
        {
          uint64_t v20 = VendNewBuffer(a1, (void *)v8);
          if (v20) {
            goto LABEL_120;
          }
          unint64_t v11 = *(void *)(v8 + 328);
          size_t v12 = *(unsigned char **)(v8 + 312);
        }
        *(_WORD *)size_t v12 = 0;
        UInt8 v12[2] = *a2;
        v12 += 3;
        v11 -= 3;
        uint64_t v21 = *(void *)(v8 + 320) + 3;
        goto LABEL_78;
      case 3:
        if (*a2)
        {
          if (*a2 == 1)
          {
LABEL_24:
            int v22 = 4;
LABEL_81:
            *(_DWORD *)(v8 + 304) = v22;
          }
          else
          {
            if (v11 <= 3)
            {
              uint64_t v20 = VendNewBuffer(a1, (void *)v8);
              if (v20)
              {
LABEL_120:
                uint64_t v39 = v20;
                PesErrorHandling(a1, v20);
                return v39;
              }
              unint64_t v11 = *(void *)(v8 + 328);
              size_t v12 = *(unsigned char **)(v8 + 312);
            }
            *(_WORD *)size_t v12 = 0;
            UInt8 v12[2] = 0;
            v12[3] = *a2;
            v12 += 4;
            v11 -= 4;
            uint64_t v21 = *(void *)(v8 + 320) + 4;
LABEL_78:
            *(void *)(v8 + 320) = v21;
LABEL_113:
            *(_DWORD *)(v8 + 304) = 0;
          }
        }
        else
        {
          if (!v11)
          {
            uint64_t v20 = VendNewBuffer(a1, (void *)v8);
            if (v20) {
              goto LABEL_120;
            }
            unint64_t v11 = *(void *)(v8 + 328);
            size_t v12 = *(unsigned char **)(v8 + 312);
          }
          *v12++ = 0;
LABEL_73:
          --v11;
          ++*(void *)(v8 + 320);
        }
LABEL_114:
        ++a2;
        if (--v13) {
          continue;
        }
        if (!v42) {
          goto LABEL_117;
        }
        uint64_t v39 = 0;
        *(unsigned char *)(v8 + 64) = 0;
        break;
      case 4:
        char v23 = *a2;
        if (*(unsigned char *)(v8 + 376))
        {
          uint64_t v24 = *(void *)(v8 + 312);
          if (v24)
          {
            uint64_t v25 = *(void *)(v8 + 320);
            if (v25)
            {
              if ((unint64_t)(*(void *)(*(void *)(a1 + 48) + 352) + v25 - *(void *)(v8 + 368)) >= 0x31)
              {
                uint64_t v26 = *(void *)(v8 + 360);
                unint64_t v45 = v25 - v26;
                H264RemoveEmulation3Byte((_DWORD *)(v24 + v26), &v45);
                uint64_t v27 = v45 + *(void *)(v8 + 360);
                *(void *)(v8 + 320) = v27;
                size_t v12 = (unsigned char *)(*(void *)(v8 + 312) + v27);
              }
            }
          }
          *(unsigned char *)(v8 + 376) = 0;
        }
        int v28 = v23 & 0x1F;
        switch(v28)
        {
          case 1:
            goto LABEL_85;
          case 5:
            *(_DWORD *)(a1 + 536) |= 0x10u;
LABEL_85:
            if ((*a2 & 0x60) != 0) {
              *(_DWORD *)(a1 + 536) |= 0x100u;
            }
            int v33 = *(_DWORD *)(a1 + 56);
            if (v33 != 2053207651 && v33 != 1700886115) {
              goto LABEL_107;
            }
            if (v11 > 0x30) {
              goto LABEL_92;
            }
            uint64_t v20 = VendNewBuffer(a1, (void *)v8);
            if (v20) {
              goto LABEL_120;
            }
            unint64_t v11 = *(void *)(v8 + 328);
            size_t v12 = *(unsigned char **)(v8 + 312);
LABEL_92:
            *(unsigned char *)(v8 + 376) = 1;
            goto LABEL_107;
          case 6:
            *(unsigned char *)(v8 + 73) = 1;
            goto LABEL_107;
          case 7:
          case 8:
            *(_DWORD *)(a1 + 536) |= 2u;
            goto LABEL_107;
          case 9:
            if (*(void *)(v8 + 352) || *(void *)(v8 + 320))
            {
              H264AddAllocatedBufferToFrame(a1, 0, 1);
              uint64_t v20 = H264EmitBuffer(a1);
              unint64_t v11 = 0;
              if (v20) {
                goto LABEL_120;
              }
            }
            unint64_t v34 = 3;
            if (*(unsigned char *)(v8 + 72)) {
              unint64_t v34 = 4;
            }
            if (v5 - v13 >= v34 && *((unsigned char *)a4 + 24) && *((unsigned char *)a4 + 25))
            {
              if (v42) {
                goto LABEL_106;
              }
              int v42 = 1;
              CFTypeID v35 = a4;
            }
            else
            {
              CFTypeID v35 = (_OWORD *)(v8 + 40);
              if (!*(unsigned char *)(v8 + 64)) {
                goto LABEL_106;
              }
            }
            long long v36 = v35[1];
            *uint64_t v43 = *v35;
            v43[1] = v36;
LABEL_106:
            *(_WORD *)(v8 + 64) = 0;
            *(unsigned char *)(v8 + 66) = 0;
LABEL_107:
            if (v11 > 4) {
              goto LABEL_110;
            }
            uint64_t v20 = VendNewBuffer(a1, (void *)v8);
            if (v20) {
              goto LABEL_120;
            }
            unint64_t v11 = *(void *)(v8 + 328);
            size_t v12 = *(unsigned char **)(v8 + 312);
LABEL_110:
            uint64_t v37 = *(void *)(*(void *)(a1 + 48) + 352) + *(void *)(v8 + 320);
            PesFrameHeaderAddOffset(v44, v37, v28);
            uint64_t v38 = *(void *)(v8 + 320) + 4;
            *(void *)(v8 + 320) = v38;
            if (*(unsigned char *)(v8 + 376))
            {
              *(void *)(v8 + 360) = v38;
              *(void *)(v8 + 368) = v37 + 4;
            }
            void v12[4] = *a2;
            v12 += 5;
            ++*(void *)(v8 + 320);
            v11 -= 5;
            break;
          default:
            goto LABEL_107;
        }
        goto LABEL_113;
      case 5:
        if (*a2) {
          goto LABEL_114;
        }
        int v22 = 6;
        goto LABEL_81;
      case 6:
        if (*a2) {
          goto LABEL_57;
        }
        int v22 = 7;
        goto LABEL_81;
      case 7:
        if (*a2 == 1)
        {
          *(unsigned char *)(v8 + 72) = 0;
LABEL_80:
          int v22 = 9;
        }
        else
        {
          if (*a2) {
            goto LABEL_57;
          }
          int v22 = 8;
        }
        goto LABEL_81;
      case 8:
        if (!*a2) {
          goto LABEL_114;
        }
        if (*a2 != 1) {
          goto LABEL_57;
        }
        *(unsigned char *)(v8 + 72) = 1;
        goto LABEL_80;
      case 9:
        char v29 = *a2;
        unint64_t v30 = 3;
        if (*(unsigned char *)(v8 + 72)) {
          unint64_t v30 = 4;
        }
        if (v5 - v13 >= v30 && *((unsigned char *)a4 + 24) && *((unsigned char *)a4 + 25))
        {
          if (v42) {
            goto LABEL_52;
          }
          int v42 = 1;
          uint64_t v31 = a4;
        }
        else
        {
          uint64_t v31 = (_OWORD *)(v8 + 40);
          if (!*(unsigned char *)(v8 + 64)) {
            goto LABEL_52;
          }
        }
        long long v32 = v31[1];
        *uint64_t v43 = *v31;
        v43[1] = v32;
LABEL_52:
        *(_WORD *)(v8 + 64) = 0;
        *(unsigned char *)(v8 + 66) = 0;
        if ((v29 & 0x1F) != 9)
        {
LABEL_57:
          int v22 = 5;
          goto LABEL_81;
        }
        if (v11 <= 4)
        {
          uint64_t v20 = VendNewBuffer(a1, (void *)v8);
          if (v20) {
            goto LABEL_120;
          }
          unint64_t v11 = *(void *)(v8 + 328);
          size_t v12 = *(unsigned char **)(v8 + 312);
        }
        PesFrameHeaderAddOffset(v44, *(void *)(*(void *)(a1 + 48) + 352) + *(void *)(v8 + 320), 9);
        void v12[4] = *a2;
        v12 += 5;
        v11 -= 5;
        uint64_t v21 = *(void *)(v8 + 320) + 5;
        goto LABEL_78;
      default:
        goto LABEL_114;
    }
    return v39;
  }
}

uint64_t VendNewBuffer(uint64_t a1, void *a2)
{
  size_t v7 = 0;
  H264AddAllocatedBufferToFrame(a1, (uint64_t *)&v7, 0);
  uint64_t v4 = CFAllocatorAllocate(*(CFAllocatorRef *)(*(void *)(a1 + 8) + 40), 4096, 0);
  a2[39] = v4;
  if (!v4) {
    return FigSignalErrorAt();
  }
  size_t v5 = v7;
  a2[40] = v7;
  bzero(v4, v5);
  uint64_t result = 0;
  a2[41] = 4096;
  a2[45] = 0;
  return result;
}

_DWORD *H264RemoveEmulation3Byte(_DWORD *result, unint64_t *a2)
{
  unint64_t v2 = *a2;
  if (*a2 >= 4)
  {
    uint64_t v4 = result;
    size_t v5 = 0;
    uint64_t v6 = 0;
    unint64_t v7 = *a2;
    do
    {
      if ((*v4 & 0xFFFFFF) == 0x30000)
      {
        uint64_t v8 = (char *)v4 + 2;
        if (v5)
        {
          uint64_t v9 = &v8[~(unint64_t)v5];
          if (v6) {
            uint64_t v10 = v6;
          }
          else {
            uint64_t v10 = v5;
          }
          uint64_t result = memmove(v10, v5 + 1, (size_t)&v8[~(unint64_t)v5]);
          uint64_t v6 = &v9[(void)v10];
          unint64_t v2 = *a2;
        }
        uint64_t v4 = (_DWORD *)((char *)v4 + 3);
        *a2 = --v2;
        uint64_t v11 = -3;
        size_t v5 = v8;
      }
      else
      {
        int v12 = *v4 >> 26;
        BOOL v13 = v12 == 0;
        if (v12) {
          uint64_t v11 = -4;
        }
        else {
          uint64_t v11 = -1;
        }
        if (v13) {
          uint64_t v4 = (_DWORD *)((char *)v4 + 1);
        }
        else {
          ++v4;
        }
      }
      v7 += v11;
    }
    while (v7 > 3);
    if (v5)
    {
      if (v6) {
        unint64_t v14 = v6;
      }
      else {
        unint64_t v14 = v5;
      }
      return memmove(v14, v5 + 1, (size_t)v4 + v7 + ~(unint64_t)v5);
    }
  }
  return result;
}

void H264AddAllocatedBufferToFrame(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(v4 + 312);
  if (!v5 || (unint64_t v6 = *(void *)(v4 + 320)) == 0)
  {
    uint64_t v10 = 0;
    if (!a2) {
      return;
    }
    goto LABEL_10;
  }
  if (*(unsigned char *)(v4 + 376))
  {
    unint64_t v9 = v6 - 1;
    if (*(unsigned char *)(v5 + v6 - 1))
    {
      if (*(unsigned char *)(v5 + v6 - 1) != 3 || *(unsigned char *)(v6 + v5 - 2) || *(unsigned char *)(v6 + v5 - 3))
      {
        uint64_t v10 = 0;
      }
      else
      {
        uint64_t v10 = 0;
        *(void *)(v4 + 320) = v9;
        --v6;
      }
    }
    else
    {
      *(void *)(v4 + 320) = v9;
      int v11 = *(unsigned __int8 *)(v5 + v6 - 2);
      if (*(unsigned char *)(v5 + v6 - 2)) {
        --v6;
      }
      else {
        v6 -= 2;
      }
      *(void *)(v4 + 320) = v6;
      if (v11) {
        uint64_t v10 = 1;
      }
      else {
        uint64_t v10 = 2;
      }
    }
    uint64_t v12 = *(void *)(v4 + 360);
    unint64_t v22 = v6 - v12;
    H264RemoveEmulation3Byte((_DWORD *)(v5 + v12), &v22);
    unint64_t v6 = v22 + *(void *)(v4 + 360);
    *(void *)(v4 + 320) = v6;
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v13 = *(int *)(v4 + 348);
  if (*(_DWORD *)(v4 + 344) >= (int)v13)
  {
    uint64_t v14 = v13 + 4;
    *(_DWORD *)(v4 + 348) = v14;
    *(void *)(v4 + 336) = malloc_type_zone_realloc((malloc_zone_t *)gFigMPEG2ParserZone, *(void **)(v4 + 336), 24 * v14, 0x1010040113C0ABBuLL);
    unint64_t v6 = *(void *)(v4 + 320);
  }
  if (a3 && v6 <= 0x800)
  {
    uint64_t v15 = CFAllocatorAllocate(*(CFAllocatorRef *)(*(void *)(a1 + 8) + 40), v6, 0);
    memcpy(v15, *(const void **)(v4 + 312), *(void *)(v4 + 320));
    uint64_t v17 = *(void *)(v4 + 336) + 24 * *(int *)(v4 + 344);
    *(void *)uint64_t v17 = v15;
    unint64_t v16 = (const double *)(v4 + 320);
    float64x2_t v18 = vld1q_dup_f64(v16);
    *(float64x2_t *)(v17 + 8) = v18;
    CFAllocatorDeallocate(*(CFAllocatorRef *)(*(void *)(a1 + 8) + 40), *(void **)(v4 + 312));
    unint64_t v6 = *(void *)(v4 + 320);
    int v19 = *(_DWORD *)(v4 + 344);
  }
  else
  {
    int v19 = *(_DWORD *)(v4 + 344);
    uint64_t v20 = *(void *)(v4 + 328);
    uint64_t v21 = (void *)(*(void *)(v4 + 336) + 24 * v19);
    *uint64_t v21 = *(void *)(v4 + 312);
    v21[1] = v6;
    v21[2] = v20;
  }
  *(void *)(v4 + 352) += v6;
  *(_DWORD *)(v4 + 344) = v19 + 1;
  *(void *)(v4 + 312) = 0;
  *(void *)(v4 + 320) = 0;
  if (a2) {
LABEL_10:
  }
    *a2 = v10;
}

uint64_t H264EmitBuffer(uint64_t a1)
{
  char *returnedPointerOut;
  CMTime temporaryBlock;
  uint64_t v103;

  os_log_type_t v103 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 48);
  int v100 = 0;
  __int16 v99 = 0;
  unsigned __int8 v98 = 0;
  int v97 = 0;
  signed int v3 = *(_DWORD *)(v2 + 344);
  if (v3 < 1) {
    goto LABEL_186;
  }
  char v91 = (CMBlockBufferRef *)(a1 + 512);
  uint64_t Empty = CMBlockBufferCreateEmpty(*(CFAllocatorRef *)(*(void *)(a1 + 8) + 40), v3, 0, (CMBlockBufferRef *)(a1 + 512));
  if (Empty) {
    goto LABEL_208;
  }
  if (*(int *)(v2 + 344) >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(v2 + 336);
    while (1)
    {
      uint64_t Empty = CMBlockBufferAppendMemoryBlock(*(CMBlockBufferRef *)(a1 + 512), *(void **)(v7 + v5), *(void *)(v7 + v5 + 16), *(CFAllocatorRef *)(*(void *)(a1 + 8) + 40), 0, 0, *(void *)(v7 + v5 + 8), 0);
      if (Empty) {
        break;
      }
      uint64_t v7 = *(void *)(v2 + 336);
      *(void *)(v7 + v5) = 0;
      ++v6;
      v5 += 24;
      if (v6 >= *(int *)(v2 + 344)) {
        goto LABEL_7;
      }
    }
LABEL_208:
    uint64_t SPSIsInterlaced = Empty;
    goto LABEL_204;
  }
LABEL_7:
  *(_DWORD *)(v2 + 344) = 0;
  *(void *)(v2 + 352) = 0;
  *(void *)(a1 + 616) = CMBlockBufferGetDataLength(*(CMBlockBufferRef *)(a1 + 512));
  uint64_t Empty = (uint64_t)PesFrameHeaderFinalizeFrame((void *)a1, 1);
  if (Empty) {
    goto LABEL_208;
  }
  uint64_t Empty = PesCreateBlockBufferFromFrameMemory(a1);
  if (Empty) {
    goto LABEL_208;
  }
  uint64_t v84 = a1 + 456;
  if (!*(unsigned char *)(a1 + 504)) {
    *(_WORD *)(a1 + 505) = 0;
  }
  uint64_t v90 = 0;
  int v89 = 0;
  int v87 = 0;
  unint64_t v8 = 0;
  uint64_t v85 = v2 + 80;
  uint64_t v83 = (uint64_t *)(a1 + 72);
  CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF90];
  CFAllocatorRef v81 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  int v86 = -1;
  while (2)
  {
    if (v8 >= *(void *)(a1 + 544))
    {
LABEL_178:
      if ((_BYTE)v90) {
        *(_DWORD *)(a1 + 536) |= 8u;
      }
      if (v87)
      {
        FigMPEG2VideoCombineFields(a1, v85, v84);
        H264CalculateFrameRate((CMTime *)a1, v2, v85);
        uint64_t SPSIsInterlaced = FigMPEG2VideoFrameQueueEntryAdjustTimestampsAndEmit(a1, v85);
        FrameQueueEntryClean(v85);
        goto LABEL_204;
      }
      if (!(_BYTE)v89)
      {
        BOOL v66 = *(_DWORD *)(*(void *)(a1 + 8) + 48) == 192 && v86 == 2;
        if (v66 && (*(unsigned char *)(a1 + 507) || !*(unsigned char *)(a1 + 506)) && *(void *)(v2 + 248))
        {
          memset(&temporaryBlock, 0, sizeof(temporaryBlock));
          CMTimeMakeWithSeconds(&temporaryBlock, *(float *)(v2 + 244) / *(float *)(v2 + 236), 90000);
          uint64_t v67 = *(void *)(v2 + 248);
          CMTimeValue value = temporaryBlock.value;
          CMTimeValue v69 = temporaryBlock.value + v67;
          *(void *)(a1 + 488) = temporaryBlock.value + v67;
          *(unsigned char *)(a1 + 506) = 1;
          if (!*(unsigned char *)(a1 + 505) || (uint64_t v70 = *(void *)(a1 + 480), v69 == v70) || v67 >= v70 || v69 <= v70 - value) {
            *(unsigned char *)(a1 + 504) = 0;
          }
          else {
            *(void *)(a1 + 488) = v70;
          }
        }
        H264CalculateFrameRate((CMTime *)a1, v2, v84);
        *(unsigned char *)(a1 + 600) = 0;
        uint64_t SPSIsInterlaced = FigMPEG2VideoFrameQueueEntryAdjustTimestampsAndEmit(a1, v84);
        *(void *)(v2 + 248) = *(void *)(a1 + 488);
        goto LABEL_204;
      }
      FrameQueueMove(v85, v84);
LABEL_186:
      uint64_t SPSIsInterlaced = 0;
      goto LABEL_204;
    }
    int v9 = 0;
    int v10 = *(unsigned __int8 *)(*(void *)(a1 + 576) + v8);
    uint64_t v11 = *(void *)(*(void *)(a1 + 560) + 8 * v8);
    uint64_t v12 = *(void *)(*(void *)(a1 + 568) + 8 * v8);
    size_t v13 = v12 - 4;
    switch(*(unsigned char *)(*(void *)(a1 + 576) + v8))
    {
      case 1:
        goto LABEL_15;
      case 5:
        int v9 = 1;
LABEL_15:
        returnedPointerOut = 0;
        if (v13 >= 0x20) {
          size_t v13 = 32;
        }
        int v96 = 0;
        if (v10 == 1 && HIDWORD(v90) == 0) {
          int v15 = 1;
        }
        else {
          int v15 = v90;
        }
        if (HIDWORD(v90) || !*(unsigned char *)(v2 + 232))
        {
          if (v10 != 1) {
            goto LABEL_168;
          }
          uint64_t Empty = CMBlockBufferAccessDataBytes(*v91, v11 + 4, v13, &temporaryBlock, &returnedPointerOut);
          if (Empty) {
            goto LABEL_208;
          }
          uint64_t Empty = FigH264Bridge_GetPPSSequenceIDFromSlice();
          if (Empty) {
            goto LABEL_208;
          }
          goto LABEL_162;
        }
        uint64_t v95 = 0;
        int v94 = 0;
        unsigned __int8 v93 = 0;
        uint64_t v92 = 0;
        uint64_t Empty = CMBlockBufferAccessDataBytes(*v91, v11 + 4, v13, &temporaryBlock, &returnedPointerOut);
        if (Empty) {
          goto LABEL_208;
        }
        uint64_t Empty = FigH264Bridge_GetPPSSequenceIDFromSlice();
        if (Empty) {
          goto LABEL_208;
        }
        uint64_t Empty = H264GetSPSFromPPSId((uint64_t *)v2, SHIDWORD(v95), &v92, 0);
        if (Empty) {
          goto LABEL_208;
        }
        uint64_t Empty = FigH264Bridge_GetInterlaceTypeFromSlice();
        if (Empty) {
          goto LABEL_208;
        }
        int v16 = v95;
        if (v95 == 3)
        {
LABEL_207:
          uint64_t Empty = FigSignalErrorAt();
          goto LABEL_208;
        }
        int v17 = v94;
        *(_DWORD *)(a1 + 592) = v94;
        *(_DWORD *)(a1 + 588) = v16;
        int v18 = v93;
        *(unsigned char *)(a1 + 596) = v93;
        unsigned int v19 = *(_DWORD *)(a1 + 536) & 0xFFFFF9FF;
        *(_DWORD *)(a1 + 536) = v19;
        switch(v16)
        {
          case 0:
            if (*(void *)(v2 + 136)) {
              FrameQueueEntryClean(v85);
            }
            goto LABEL_161;
          case 1:
            int v20 = 512;
            break;
          case 2:
            int v20 = 1024;
            break;
          default:
            goto LABEL_153;
        }
        *(_DWORD *)(a1 + 536) = v19 | v20;
LABEL_153:
        if (*(void *)(v2 + 136))
        {
          if (*(unsigned __int8 *)(v2 + 220) == v18 && *(_DWORD *)(v2 + 216) == v17 && *(_DWORD *)(v2 + 212) != v16)
          {
            int v87 = 1;
            goto LABEL_161;
          }
          FrameQueueEntryClean(v85);
        }
        int v64 = v89;
        if (!v87) {
          int v64 = 1;
        }
        int v89 = v64;
LABEL_161:
        if (v10 != 1) {
          goto LABEL_168;
        }
LABEL_162:
        if (v96 == 2)
        {
          LODWORD(v90) = v15;
        }
        else
        {
          LODWORD(v90) = v96 == 7 && HIDWORD(v90) == 0;
          int v9 = 1;
        }
LABEL_168:
        HIDWORD(v90) = 1;
        goto LABEL_177;
      case 6:
        int v21 = v99;
        int v22 = v98;
        int v23 = v97;
        uint64_t v24 = *(void *)(a1 + 48);
        size_t v25 = v12 - 5;
        temporaryBlock.CMTimeValue value = v12 - 5;
        if ((unint64_t)(v12 - 5) < 2) {
          goto LABEL_182;
        }
        if (v25 <= *(void *)(v24 + 392))
        {
          int v28 = *(void **)(v24 + 384);
        }
        else
        {
          if (v25 <= 0x200) {
            size_t v26 = 512;
          }
          else {
            size_t v26 = v12 - 5;
          }
          *(void *)(v24 + 392) = v26;
          uint64_t v27 = malloc_type_zone_realloc((malloc_zone_t *)gFigMPEG2ParserZone, *(void **)(v24 + 384), v26, 0x23295E69uLL);
          int v28 = v27;
          *(void *)(v24 + 384) = v27;
          if (!v27)
          {
            uint64_t SPSIsInterlaced = 4294954510;
            goto LABEL_183;
          }
        }
        uint64_t v88 = v24;
        uint64_t v33 = CMBlockBufferCopyDataBytes(*v91, v11 + 5, v25, v28);
        if (v33)
        {
LABEL_205:
          uint64_t SPSIsInterlaced = v33;
          uint64_t v27 = 0;
          goto LABEL_183;
        }
        H264RemoveEmulation3Byte(*(_DWORD **)(v24 + 384), (unint64_t *)&temporaryBlock);
        unint64_t v34 = temporaryBlock.value;
        int v35 = v21;
        if (temporaryBlock.value < 3uLL)
        {
LABEL_176:
          int v9 = 0;
LABEL_177:
          ++v8;
          if (v9) {
            goto LABEL_178;
          }
          continue;
        }
        unint64_t v36 = 0;
        uint64_t v37 = *(void *)(v24 + 384);
        int v38 = v23 + 7;
        if (v23 >= 0) {
          int v38 = v23;
        }
        int v39 = 255 * LODWORD(temporaryBlock.value);
        int v40 = 255 * LODWORD(temporaryBlock.value) - 255;
        CMTimeValue v41 = temporaryBlock.value - 1;
        if (v22) {
          unsigned int v42 = v23 - (v38 & 0xFFFFFFF8);
        }
        else {
          unsigned int v42 = 0;
        }
        uint64_t v43 = (uint64_t)v38 >> 3;
        if (v22) {
          uint64_t v44 = v43;
        }
        else {
          uint64_t v44 = 0;
        }
        unsigned int v45 = 8 - v42;
        CMTimeValue v46 = temporaryBlock.value - 2;
        while (1)
        {
          if (v36 >= v34)
          {
            int v48 = 0;
          }
          else
          {
            int v47 = 0;
            int v48 = -255 * v36 + v39;
            while (1)
            {
              int v49 = *(unsigned __int8 *)(v37 + v36);
              if (v49 != 255) {
                break;
              }
              ++v36;
              v47 -= 255;
              if (v34 == v36)
              {
                unint64_t v36 = v34;
                goto LABEL_80;
              }
            }
            int v48 = v49 - v47;
          }
LABEL_80:
          if (v36 + 1 >= v34)
          {
            unsigned int v52 = 0;
          }
          else
          {
            int v50 = *(unsigned __int8 *)(v37 + v36 + 1);
            if (v50 == 255)
            {
              int v51 = 0;
              unsigned int v52 = v40 - 255 * v36;
              while (v46 != v36)
              {
                v51 += 255;
                int v50 = *(unsigned __int8 *)(v37 + 2 + v36++);
                if (v50 != 255) {
                  goto LABEL_88;
                }
              }
              unint64_t v36 = v41;
            }
            else
            {
              int v51 = 0;
LABEL_88:
              unsigned int v52 = v51 + v50;
            }
          }
          unint64_t v53 = v36 + 2;
          unint64_t v54 = v36 + 2 + v52;
          if (v54 >= v34)
          {
LABEL_182:
            uint64_t v27 = 0;
            uint64_t SPSIsInterlaced = 4294954325;
            goto LABEL_183;
          }
          if (v48 != 1) {
            break;
          }
          if (!v35 || v53 + v44 + 3 > v34) {
            goto LABEL_146;
          }
          int v61 = ((*(unsigned __int8 *)(v53 + v44 + v37 + 2) >> v42) | (*(unsigned __int8 *)(v53 + v44 + v37 + 1) << v45)) & 0xF;
          if (v61 == 8)
          {
            int v62 = 1077936128;
            goto LABEL_145;
          }
          if (v61 == 7)
          {
            int v62 = 0x40000000;
LABEL_145:
            *(_DWORD *)(v24 + 244) = v62;
          }
LABEL_146:
          unint64_t v36 = v54;
          if (v34 <= v54 + 2) {
            goto LABEL_176;
          }
        }
        if (v48 == 5)
        {
          if (v52 >= 0x15
            && *(unsigned char *)(v37 + v53) == 23
            && *(unsigned __int8 *)(v36 + v37 + 3) == 238
            && *(unsigned __int8 *)(v36 + v37 + 4) == 140
            && *(unsigned char *)(v36 + v37 + 5) == 96
            && *(unsigned __int8 *)(v36 + v37 + 6) == 248
            && *(unsigned char *)(v36 + v37 + 7) == 77
            && *(unsigned char *)(v36 + v37 + 8) == 17
            && *(unsigned __int8 *)(v36 + v37 + 9) == 217
            && *(unsigned __int8 *)(v36 + v37 + 10) == 140
            && *(unsigned __int8 *)(v36 + v37 + 11) == 214
            && *(unsigned char *)(v36 + v37 + 12) == 8
            && !*(unsigned char *)(v36 + v37 + 13)
            && *(unsigned char *)(v36 + v37 + 14) == 32
            && *(unsigned char *)(v36 + v37 + 15) == 12
            && *(unsigned __int8 *)(v36 + v37 + 16) == 154
            && *(unsigned char *)(v36 + v37 + 17) == 102
            && *(unsigned char *)(v36 + v37 + 18) == 77
            && *(unsigned char *)(v36 + v37 + 19) == 68
            && *(unsigned char *)(v36 + v37 + 20) == 80
            && *(unsigned char *)(v36 + v37 + 21) == 77)
          {
            int v63 = *(unsigned __int8 *)(v36 + v37 + 22);
            if (*(unsigned char *)(v36 + v37 + 22))
            {
              while (1)
              {
                if (v36 + 28 > v34) {
                  goto LABEL_176;
                }
                if (*(unsigned char *)(v37 + v36 + 23) == 19) {
                  break;
                }
                v36 += 5;
                --v63;
                int v35 = v21;
                uint64_t v24 = v88;
                if (!v63) {
                  goto LABEL_146;
                }
              }
              *(_DWORD *)(a1 + 604) = bswap32(*(_DWORD *)(v37 + v36 + 24));
              *(_DWORD *)(a1 + 536) |= 0x2000u;
              int v35 = v21;
              uint64_t v24 = v88;
            }
          }
          goto LABEL_146;
        }
        if (v48 != 4) {
          goto LABEL_146;
        }
        if (v52 < 0xA) {
          goto LABEL_146;
        }
        if (*(unsigned __int8 *)(v37 + v53) != 181) {
          goto LABEL_146;
        }
        if (*(unsigned char *)(v36 + v37 + 3)) {
          goto LABEL_146;
        }
        if (*(unsigned char *)(v36 + v37 + 4) != 49) {
          goto LABEL_146;
        }
        CFNumberRef v55 = (unsigned char *)(v36 + v37 + 5);
        if (*v55 != 71
          || *(unsigned char *)(v36 + v37 + 6) != 65
          || *(unsigned char *)(v36 + v37 + 7) != 57
          || *(unsigned char *)(v36 + v37 + 8) != 52
          || *(unsigned char *)(v36 + v37 + 9) != 3)
        {
          goto LABEL_146;
        }
        uint64_t v56 = *v83;
        int v79 = v40;
        int v80 = v39;
        CMTimeValue v78 = v41;
        unsigned int v77 = v42;
        uint64_t v76 = v44;
        unsigned int v75 = v45;
        __src = v55;
        if (!*v83)
        {
          uint64_t v33 = AddPes(*(void *)(a1 + 8), *(void *)a1, 0, 1635017571, 0, 0, *(_DWORD *)(a1 + 64) << 8, 0xFFFF, 1, v83);
          if (v33) {
            goto LABEL_205;
          }
          uint64_t v56 = *v83;
          int v35 = v21;
          uint64_t v24 = v88;
          int v40 = v79;
          int v39 = v80;
          CMTimeValue v41 = v78;
          unsigned int v42 = v77;
          uint64_t v44 = v76;
          unsigned int v45 = v75;
          if (!*v83) {
            goto LABEL_146;
          }
        }
        if (!*(void *)(v56 + 84)) {
          goto LABEL_146;
        }
        returnedPointerOut = 0;
        size_t v57 = v52 - 3;
        CFMutableDictionaryRef v58 = CFAllocatorAllocate(allocator, v57, 0);
        uint64_t v73 = v58;
        if (!v58)
        {
          uint64_t SPSIsInterlaced = 4294954510;
          goto LABEL_212;
        }
        uint64_t v59 = v58;
        memcpy(v58, __src, v57);
        uint64_t v60 = CMBlockBufferCreateWithMemoryBlock(v81, v59, v57, allocator, 0, 0, v57, 0, (CMBlockBufferRef *)&returnedPointerOut);
        if (!v60)
        {
          uint64_t SPSIsInterlaced = CloseCaptionQueueAdd(a1 + 520, returnedPointerOut);
          if (returnedPointerOut) {
            CFRelease(returnedPointerOut);
          }
          if (SPSIsInterlaced) {
            goto LABEL_212;
          }
          int v35 = v21;
          uint64_t v24 = v88;
          int v40 = v79;
          int v39 = v80;
          CMTimeValue v41 = v78;
          unsigned int v42 = v77;
          uint64_t v44 = v76;
          unsigned int v45 = v75;
          goto LABEL_146;
        }
        uint64_t SPSIsInterlaced = v60;
LABEL_212:
        uint64_t v27 = v73;
LABEL_183:
        free(v27);
LABEL_204:
        PesCleanAfterFrameEmit(a1);
        return SPSIsInterlaced;
      case 7:
        if (*(unsigned char *)(v2 + 232)) {
          goto LABEL_175;
        }
        LOBYTE(v92) = 0;
        returnedPointerOut = 0;
        temporaryBlock.CMTimeValue value = 0;
        uint64_t Empty = CMBlockBufferGetDataPointer(*v91, v11 + 4, (size_t *)&returnedPointerOut, 0, (char **)&temporaryBlock);
        if (Empty) {
          goto LABEL_208;
        }
        char v29 = returnedPointerOut;
        if ((unint64_t)returnedPointerOut >= v13) {
          goto LABEL_46;
        }
        unint64_t v30 = malloc_type_malloc(v13, 0xA4C921E8uLL);
        temporaryBlock.CMTimeValue value = (CMTimeValue)v30;
        if (!v30) {
          goto LABEL_207;
        }
        uint64_t v31 = CMBlockBufferCopyDataBytes(*v91, v11 + 4, v13, v30);
        if (v31)
        {
          uint64_t SPSIsInterlaced = v31;
          uint64_t v27 = (void *)temporaryBlock.value;
          goto LABEL_183;
        }
LABEL_46:
        uint64_t SPSIsInterlaced = FigH264Bridge_GetSPSIsInterlaced();
        if (!SPSIsInterlaced)
        {
          unsigned int SPS_VUI_Framerate = FigH264Bridge_GetSPS_VUI_Framerate();
          if (SPS_VUI_Framerate)
          {
            if (SPS_VUI_Framerate == -12712) {
              uint64_t SPSIsInterlaced = 0;
            }
            else {
              uint64_t SPSIsInterlaced = SPS_VUI_Framerate;
            }
          }
          else
          {
            uint64_t SPSIsInterlaced = 0;
            *(_DWORD *)(v2 + 236) = v100;
            *(unsigned char *)(v2 + 240) = HIBYTE(v99);
          }
        }
        if ((unint64_t)v29 < v13) {
          free((void *)temporaryBlock.value);
        }
        if (SPSIsInterlaced) {
          goto LABEL_204;
        }
        int v65 = v92;
        *(unsigned char *)(v2 + 232) = v92;
        if (!v65) {
          goto LABEL_176;
        }
LABEL_175:
        uint64_t Empty = H264ParamSetAddSPS(v2, *v91, v11 + 4, v13, 0, 0);
        if (!Empty) {
          goto LABEL_176;
        }
        goto LABEL_208;
      case 8:
        if (*(unsigned char *)(v2 + 232))
        {
          uint64_t Empty = H264ParamSetAddPPS(v2, *v91, v11 + 4, v13, 0);
          if (Empty) {
            goto LABEL_208;
          }
        }
        goto LABEL_176;
      case 9:
        LOBYTE(temporaryBlock.CFDictionarySetValue(theDict, key, value) = 0;
        if (v13 < 2)
        {
          uint64_t SPSIsInterlaced = 4294954320;
          goto LABEL_204;
        }
        uint64_t Empty = CMBlockBufferCopyDataBytes(*v91, v11 + 5, 1uLL, &temporaryBlock);
        if (Empty) {
          goto LABEL_208;
        }
        int v9 = 0;
        int v86 = LOBYTE(temporaryBlock.value) >> 5;
        goto LABEL_177;
      default:
        goto LABEL_177;
    }
  }
}

CMTime *H264CalculateFrameRate(CMTime *result, uint64_t a2, uint64_t a3)
{
  memset(&v12, 0, sizeof(v12));
  if (*(_WORD *)(a3 + 49))
  {
    uint64_t v4 = result;
    uint64_t v5 = 32;
    if (!*(unsigned char *)(a3 + 50)) {
      uint64_t v5 = 24;
    }
    uint64_t result = CMTimeMake(&v12, *(void *)(a3 + v5), 90000);
    uint64_t v6 = (_OWORD *)(a2 + 260);
    if (*(unsigned char *)(a2 + 272))
    {
      memset(&v11, 0, sizeof(v11));
      CMTime lhs = v12;
      *(_OWORD *)&v9.CMTimeValue value = *v6;
      v9.CMTimeEpoch epoch = *(void *)(a2 + 276);
      uint64_t result = CMTimeSubtract(&v11, &lhs, &v9);
      CMTimeValue value = v11.value;
      if ((unint64_t)(v11.value - 1) > 0x2BF1F)
      {
        *(void *)(a2 + 288) = 0;
        *(void *)(a2 + 296) = 0;
      }
      else
      {
        *(void *)(a2 + 288) += v11.value;
        if (!*(unsigned char *)(a2 + 256))
        {
          uint64_t v8 = value / *(void *)(a2 + 296);
          LODWORD(v4[33].epoch) = v8;
          v4[33].CMTimeFlags flags = 90000;
          if (v8) {
            *(unsigned char *)(a2 + 256) = 1;
          }
        }
      }
    }
    *uint64_t v6 = *(_OWORD *)&v12.value;
    *(void *)(a2 + 276) = v12.epoch;
  }
  ++*(void *)(a2 + 296);
  return result;
}

uint64_t figImageQueueTable_RegisterFigImageQueueTable()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sFigImageQueueTableID = result;
  return result;
}

uint64_t FigImageQueueTableCreate(const __CFAllocator *a1, void *a2)
{
  if (!a2 || (CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540])) == 0)
  {
    uint64_t v8 = FigSignalErrorAt();
    goto LABEL_6;
  }
  CFMutableDictionaryRef v4 = Mutable;
  MEMORY[0x19970EE10](&FigImageQueueTableGetTypeID_sRegisterFigImageQueueTableOnce, figImageQueueTable_RegisterFigImageQueueTable);
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (!Instance)
  {
    uint64_t v8 = FigSignalErrorAt();
    FigSimpleMutexDestroy();
LABEL_11:
    CFRelease(v4);
    return v8;
  }
  uint64_t v6 = (void *)Instance;
  uint64_t v7 = FigSimpleMutexCreate();
  if (!v7)
  {
    uint64_t v8 = FigSignalErrorAt();
    FigSimpleMutexDestroy();
    CFRelease(v6);
    goto LABEL_11;
  }
  uint64_t v8 = 0;
  void v6[2] = v7;
  v6[3] = v4;
  *a2 = v6;
LABEL_6:
  FigSimpleMutexDestroy();
  return v8;
}

uint64_t FigImageQueueTableRemoveAllValues(uint64_t a1)
{
  if (!a1) {
    return 4294954516;
  }
  MEMORY[0x19970E910](*(void *)(a1 + 16));
  CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(a1 + 24));
  MEMORY[0x19970E930](*(void *)(a1 + 16));
  return 0;
}

uint64_t FigImageQueueTableUpdateToMatchOutputsArray(uint64_t a1, const __CFArray *a2, void *a3, void (*a4)(void *, uint64_t), void (*a5)(const void *, uint64_t), uint64_t a6)
{
  if (!a1 || !a2)
  {
    return FigSignalErrorAt();
  }
  uint64_t v12 = MEMORY[0x19970E910](*(void *)(a1 + 16));
  if (v12) {
    return v12;
  }
  if (CFArrayGetCount(a2) < 1)
  {
    uint64_t v14 = 0;
LABEL_31:
    CFIndex Count = CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 24));
    char v29 = (const void **)malloc_type_malloc(8 * Count, 0x80040B8603338uLL);
    CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(a1 + 24), v29, 0);
    if (Count >= 1)
    {
      unint64_t v30 = v29;
      do
      {
        v35.size_t length = CFArrayGetCount(a2);
        v35.CFIndex location = 0;
        if (!CFArrayContainsValue(a2, v35, *v30))
        {
          if (a5)
          {
            uint64_t v31 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 24), *v30);
            a5(v31, a6);
          }
          CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 24), *v30);
        }
        ++v30;
        --Count;
      }
      while (Count);
    }
    if (a3) {
      CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 24), (CFDictionaryApplierFunction)figImageQueueTable_reconnectApply2, a3);
    }
    goto LABEL_44;
  }
  CFIndex v13 = 0;
  uint64_t v14 = 0;
  while (1)
  {
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(a2, v13);
    CMTimeValue value = 0;
    CMTimeValue value = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 24), ValueAtIndex);
    if (!value) {
      break;
    }
LABEL_28:
    if (CFArrayGetCount(a2) <= ++v13) {
      goto LABEL_31;
    }
  }
  CFTypeID v16 = CFGetTypeID(ValueAtIndex);
  if (v16 == FigVisualContextGetTypeID())
  {
    uint64_t v17 = FigImageQueueCreateForCoreVideo(0, &value);
    if (v17) {
      goto LABEL_42;
    }
    int v18 = value;
    uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v19) {
      uint64_t v20 = v19;
    }
    else {
      uint64_t v20 = 0;
    }
    size_t v26 = *(uint64_t (**)(void *, const void *, void *))(v20 + 8);
    if (v26) {
      uint64_t v14 = v26(v18, ValueAtIndex, a3);
    }
    else {
      uint64_t v14 = 4294954514;
    }
    goto LABEL_24;
  }
  CFTypeID v21 = CFGetTypeID(ValueAtIndex);
  if (v21 == CAImageQueueGetTypeID())
  {
    uint64_t v22 = FigImageQueueCreateForCoreAnimation(0, ValueAtIndex, &value);
LABEL_23:
    uint64_t v14 = v22;
    if (v22) {
      goto LABEL_43;
    }
LABEL_24:
    if (a4) {
      a4(value, a6);
    }
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 24), ValueAtIndex, value);
    if (value) {
      CFRelease(value);
    }
    goto LABEL_28;
  }
  CFTypeID v23 = CFGetTypeID(ValueAtIndex);
  if (v23 == FigVideoTargetGetTypeID())
  {
    uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v24) {
      uint64_t v25 = v24;
    }
    else {
      uint64_t v25 = 0;
    }
    uint64_t v27 = *(uint64_t (**)(const void *, void, void **))(v25 + 8);
    if (!v27)
    {
      uint64_t v14 = 4294954514;
      goto LABEL_43;
    }
    uint64_t v22 = v27(ValueAtIndex, 0, &value);
    goto LABEL_23;
  }
  uint64_t v17 = FigSignalErrorAt();
LABEL_42:
  uint64_t v14 = v17;
LABEL_43:
  char v29 = 0;
LABEL_44:
  free(v29);
  MEMORY[0x19970E930](*(void *)(a1 + 16));
  return v14;
}

uint64_t FigImageQueueTableReconnectWithTimebase(uint64_t result, void *a2)
{
  if (result)
  {
    uint64_t v3 = result;
    uint64_t result = MEMORY[0x19970E910](*(void *)(result + 16));
    if (!result)
    {
      CFDictionaryApplyFunction(*(CFDictionaryRef *)(v3 + 24), (CFDictionaryApplierFunction)figImageQueueTable_reconnectApply2, a2);
      MEMORY[0x19970E930](*(void *)(v3 + 16));
      return 0;
    }
  }
  return result;
}

uint64_t FigImageQueueTableSetTimebase(uint64_t result, void *a2)
{
  if (result)
  {
    uint64_t v3 = result;
    uint64_t result = MEMORY[0x19970E910](*(void *)(result + 16));
    if (!result)
    {
      CFDictionaryApplyFunction(*(CFDictionaryRef *)(v3 + 24), (CFDictionaryApplierFunction)figImageQueueTable_setTimebaseApply, a2);
      MEMORY[0x19970E930](*(void *)(v3 + 16));
      return 0;
    }
  }
  return result;
}

uint64_t figImageQueueTable_setTimebaseApply(int a1, uint64_t a2, CMTimebaseRef timebase)
{
  float Rate = CMTimebaseGetRate(timebase);
  float v14 = Rate;
  figImageQueueTable_respondToTimebaseRateChangeApply(v6, a2, &v14);
  uint64_t FigBaseObject = FigImageQueueGetFigBaseObject(a2);
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v11 = *(void *)(VTable + 8);
  uint64_t result = VTable + 8;
  uint64_t v10 = v11;
  if (v11) {
    uint64_t v12 = v10;
  }
  else {
    uint64_t v12 = 0;
  }
  CFIndex v13 = *(uint64_t (**)(uint64_t, __CFString *, CMTimebaseRef))(v12 + 56);
  if (v13)
  {
    return v13(FigBaseObject, @"FigImageQueueProperty_Timebase", timebase);
  }
  return result;
}

uint64_t FigImageQueueTableRespondToTimebaseRateChange(uint64_t a1, OpaqueCMTimebase *a2)
{
  if (a1 && !MEMORY[0x19970E910](*(void *)(a1 + 16)))
  {
    float Rate = CMTimebaseGetRate(a2);
    float context = Rate;
    CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 24), (CFDictionaryApplierFunction)figImageQueueTable_respondToTimebaseRateChangeApply, &context);
    MEMORY[0x19970E930](*(void *)(a1 + 16));
  }
  return 0;
}

uint64_t figImageQueueTable_respondToTimebaseRateChangeApply(uint64_t a1, uint64_t a2, float *a3)
{
  float v4 = *a3;
  BOOL v5 = *a3 != 0.0;
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(void (**)(uint64_t, BOOL))(v7 + 40);
  if (v8) {
    v8(a2, v5);
  }
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v13 = *(void *)(VTable + 16);
  uint64_t result = VTable + 16;
  uint64_t v12 = v13;
  if (v13) {
    uint64_t v14 = v12;
  }
  else {
    uint64_t v14 = 0;
  }
  int v15 = *(uint64_t (**)(uint64_t, __n128))(v14 + 48);
  if (v15)
  {
    v10.n128_f32[0] = v4;
    return v15(a2, v10);
  }
  return result;
}

uint64_t FigImageQueueTableCopyPerformanceDictionary(uint64_t a1, __CFDictionary **a2)
{
  if (!a1) {
    return 0;
  }
  if (!a2) {
    return 0;
  }
  *a2 = 0;
  MEMORY[0x19970E910](*(void *)(a1 + 16));
  float v4 = (const void *)FigCFDictionaryCopyArrayOfValues();
  MEMORY[0x19970E930](*(void *)(a1 + 16));
  if (!v4) {
    return 0;
  }
  CFTypeID v5 = CFGetTypeID(v4);
  if (v5 != CFArrayGetTypeID()) {
    goto LABEL_27;
  }
  uint64_t Count = CFArrayGetCount((CFArrayRef)v4);
  if (Count != 1)
  {
    uint64_t v10 = Count;
    if (Count < 2) {
      goto LABEL_27;
    }
    CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], Count, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFIndex v13 = 0;
    while (1)
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v4, v13);
      CFStringRef v15 = CFStringCreateWithFormat(v11, 0, @"imagequeue-%d", v13);
      CMTimeValue value = 0;
      uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v16) {
        uint64_t v17 = v16;
      }
      else {
        uint64_t v17 = 0;
      }
      int v18 = *(void (**)(const void *, void **))(v17 + 72);
      if (v18) {
        v18(ValueAtIndex, &value);
      }
      uint64_t v19 = value;
      if (v15)
      {
        if (value) {
          break;
        }
      }
      if (v15) {
        goto LABEL_19;
      }
LABEL_20:
      if (v19) {
        CFRelease(v19);
      }
      if (v10 == ++v13)
      {
        *a2 = Mutable;
        goto LABEL_27;
      }
    }
    CFDictionarySetValue(Mutable, v15, value);
LABEL_19:
    CFRelease(v15);
    uint64_t v19 = value;
    goto LABEL_20;
  }
  uint64_t v7 = CFArrayGetValueAtIndex((CFArrayRef)v4, 0);
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v20 = *(void (**)(const void *, __CFDictionary **))(v9 + 72);
  if (v20) {
    v20(v7, a2);
  }
LABEL_27:
  CFRelease(v4);
  return 0;
}

uint64_t FigImageQueueTableCopyMappedImageQueueArray(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (a1 && a2 && a3)
  {
    MEMORY[0x19970E910](*(void *)(a1 + 16));
    uint64_t MappedArray = FigCFDictionaryCreateMappedArray();
    MEMORY[0x19970E930](*(void *)(a1 + 16));
    *a3 = MappedArray;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigImageQueueTableCopyFigImageQueueArray(uint64_t a1, uint64_t *a2)
{
  if (a1 && a2)
  {
    MEMORY[0x19970E910](*(void *)(a1 + 16));
    *a2 = FigCFDictionaryCopyArrayOfValues();
    MEMORY[0x19970E930](*(void *)(a1 + 16));
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

const void *FigImageQueueTableCopyFigImageQueueForVisualContext(uint64_t a1, const void *a2)
{
  if (a1)
  {
    MEMORY[0x19970E910](*(void *)(a1 + 16));
    CFDictionaryRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 24), a2);
    CFTypeID v5 = Value;
    if (Value) {
      CFRetain(Value);
    }
    MEMORY[0x19970E930](*(void *)(a1 + 16));
  }
  else
  {
    FigSignalErrorAt();
    return 0;
  }
  return v5;
}

const void *FigImageQueueTableCopyFigImageQueueForVideoTarget(uint64_t a1, const void *a2)
{
  if (a1)
  {
    MEMORY[0x19970E910](*(void *)(a1 + 16));
    CFDictionaryRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 24), a2);
    CFTypeID v5 = Value;
    if (Value) {
      CFRetain(Value);
    }
    MEMORY[0x19970E930](*(void *)(a1 + 16));
  }
  else
  {
    FigSignalErrorAt();
    return 0;
  }
  return v5;
}

uint64_t FigImageQueueTableCopyVideoTargets(uint64_t a1, __CFArray **a2)
{
  if (a1 && a2)
  {
    MEMORY[0x19970E910](*(void *)(a1 + 16));
    uint64_t Count = FigCFDictionaryGetCount();
    CFTypeID v5 = (const void **)malloc_type_malloc(8 * Count, 0x80040B8603338uLL);
    CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(a1 + 24), v5, 0);
    CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    if (Count >= 1)
    {
      uint64_t v7 = v5;
      do
      {
        if (*v7)
        {
          CFTypeID v8 = CFGetTypeID(*v7);
          if (v8 == FigVideoTargetGetTypeID()) {
            CFArrayAppendValue(Mutable, *v7);
          }
        }
        ++v7;
        --Count;
      }
      while (Count);
    }
    MEMORY[0x19970E930](*(void *)(a1 + 16));
    uint64_t v9 = 0;
    *a2 = Mutable;
  }
  else
  {
    uint64_t v9 = FigSignalErrorAt();
    CFTypeID v5 = 0;
  }
  free(v5);
  return v9;
}

uint64_t FigImageQueueTableWasFirstImageEnqueued(uint64_t a1)
{
  CFArrayRef theArray = 0;
  if (!a1) {
    return 0;
  }
  FigImageQueueTableCopyFigImageQueueArray(a1, (uint64_t *)&theArray);
  if (!theArray) {
    return 0;
  }
  CFIndex Count = CFArrayGetCount(theArray);
  if (Count < 1)
  {
LABEL_14:
    uint64_t v12 = 0;
  }
  else
  {
    CFIndex v2 = Count;
    CFIndex v3 = 0;
    uint64_t v4 = *MEMORY[0x1E4F1CF80];
    CFTypeRef v5 = (CFTypeRef)*MEMORY[0x1E4F1CFD0];
    while (1)
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v3);
      CFTypeRef cf = 0;
      uint64_t FigBaseObject = FigImageQueueGetFigBaseObject(ValueAtIndex);
      uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v8) {
        uint64_t v9 = v8;
      }
      else {
        uint64_t v9 = 0;
      }
      uint64_t v10 = *(void (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v9 + 48);
      if (v10) {
        v10(FigBaseObject, @"FigImageQueueProperty_FirstImageEnqueued", v4, &cf);
      }
      CFTypeRef v11 = cf;
      if (cf) {
        CFRelease(cf);
      }
      if (v5 == v11) {
        break;
      }
      if (v2 == ++v3) {
        goto LABEL_14;
      }
    }
    uint64_t v12 = 1;
  }
  if (theArray) {
    CFRelease(theArray);
  }
  return v12;
}

uint64_t figImageQueueTable_Init(uint64_t result)
{
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  return result;
}

uint64_t figImageQueueTable_Finalize(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 24);
  if (v1) {
    CFRelease(v1);
  }

  return FigSimpleMutexDestroy();
}

CFStringRef figImageQueueTable_CopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigImageQueueTable %p] %@", a1, *(void *)(a1 + 24));
}

CFStringRef figImageQueueTable_CopyDebugDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigImageQueueTable %p] %@", a1, *(void *)(a1 + 24));
}

uint64_t figImageQueueTable_reconnectApply2(const void *a1, uint64_t a2, uint64_t a3)
{
  CFTypeID v6 = CFGetTypeID(a1);
  uint64_t result = FigVisualContextGetTypeID();
  if (v6 == result)
  {
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v10 = *(void (**)(uint64_t, void, void))(v9 + 8);
    if (v10) {
      v10(a2, 0, 0);
    }
    uint64_t VTable = CMBaseObjectGetVTable();
    uint64_t v13 = *(void *)(VTable + 16);
    uint64_t result = VTable + 16;
    uint64_t v12 = v13;
    if (v13) {
      uint64_t v14 = v12;
    }
    else {
      uint64_t v14 = 0;
    }
    CFStringRef v15 = *(uint64_t (**)(uint64_t, const void *, uint64_t))(v14 + 8);
    if (v15)
    {
      return v15(a2, a1, a3);
    }
  }
  return result;
}

uint64_t RegisterMovieSampleGroupType(uint64_t *a1)
{
  uint64_t result = _CFRuntimeRegisterClass();
  *a1 = result;
  return result;
}

uint64_t MovieSampleGroupCreate(const __CFAllocator *a1, unint64_t a2, int a3, uint64_t *a4)
{
  if (!a2 || !a4) {
    goto LABEL_7;
  }
  if (MovieSampleGroupGetTypeID_sRegisterMovieSampleGroupTypeOnce != -1) {
    dispatch_once_f(&MovieSampleGroupGetTypeID_sRegisterMovieSampleGroupTypeOnce, &MovieSampleGroupGetTypeID_sMovieSampleGroupID, (dispatch_function_t)RegisterMovieSampleGroupType);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    uint64_t v9 = Instance;
    *(void *)(Instance + 128) = a2;
    *(_DWORD *)(Instance + 136) = a3;
    *(void *)(Instance + 120) = MovieSampleGroupCreateGroupingTypeKey(a1, a2, a3);
    *a4 = v9;
    return 0;
  }
  else
  {
LABEL_7:
    return FigSignalErrorAt();
  }
}

CFStringRef MovieSampleGroupCreateGroupingTypeKey(const __CFAllocator *a1, unint64_t a2, char a3)
{
  if (a3) {
    return CFStringCreateWithFormat(a1, 0, @"%c%c%c%c:%08X", BYTE3(a2), BYTE2(a2), BYTE1(a2), a2, HIDWORD(a2));
  }
  else {
    return CFStringCreateWithFormat(a1, 0, @"%c%c%c%c", BYTE3(a2), BYTE2(a2), BYTE1(a2), a2);
  }
}

uint64_t MovieSampleGroupCreateCompact(const __CFAllocator *a1, unint64_t a2, int a3, CFTypeRef *a4)
{
  CFTypeRef cf = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  int v10 = 0;
  uint64_t v5 = MovieSampleGroupCreate(a1, a2, a3, (uint64_t *)&cf);
  if (v5)
  {
    uint64_t v6 = v5;
  }
  else
  {
    LOBYTE(v10) = 0;
    HIDWORD(v9) = 4;
    uint64_t v6 = MovieSampleGroupSet_csgp((CMBlockBufferRef *)cf, &v8, 0, 0);
    if (!v6)
    {
      *a4 = cf;
      return v6;
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  return v6;
}

uint64_t MovieSampleGroupSet_csgp(CMBlockBufferRef *blockBufferOut, _DWORD *a2, CMBlockBufferRef theBuffer, OpaqueCMBlockBuffer *a4)
{
  if (!blockBufferOut) {
    goto LABEL_17;
  }
  if (blockBufferOut[4]) {
    goto LABEL_17;
  }
  uint64_t v5 = blockBufferOut + 9;
  if (blockBufferOut[9]) {
    goto LABEL_17;
  }
  if (*a2)
  {
    if (theBuffer && a4)
    {
      *uint64_t v5 = (CMBlockBufferRef)CFRetain(theBuffer);
      goto LABEL_14;
    }
    goto LABEL_17;
  }
  if (theBuffer)
  {
    if (CMBlockBufferGetDataLength(theBuffer)) {
      goto LABEL_17;
    }
    *uint64_t v5 = (CMBlockBufferRef)CFRetain(theBuffer);
  }
  else
  {
    uint64_t result = CMBlockBufferCreateEmpty((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 4u, 0, blockBufferOut + 9);
    if (result) {
      return result;
    }
  }
  if (!a4)
  {
    uint64_t result = CMBlockBufferCreateEmpty((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 4u, 0, blockBufferOut + 10);
    if (result) {
      return result;
    }
    goto LABEL_15;
  }
  if (CMBlockBufferGetDataLength(a4))
  {
LABEL_17:
    return FigSignalErrorAt();
  }
LABEL_14:
  blockBufferOut[10] = (CMBlockBufferRef)CFRetain(a4);
LABEL_15:
  long long v10 = *(_OWORD *)a2;
  *((_DWORD *)blockBufferOut + 16) = a2[4];
  *((_OWORD *)blockBufferOut + 3) = v10;
  HIDWORD(v11) = *((_DWORD *)blockBufferOut + 15);
  LODWORD(v11) = HIDWORD(v11) - 4;
  switch((v11 >> 2))
  {
    case 0u:
      uint64_t result = 0;
      uint64_t v12 = GetDescriptionIndex_csgp_4;
      break;
    case 1u:
      uint64_t result = 0;
      uint64_t v12 = GetDescriptionIndex_csgp_8;
      break;
    case 3u:
      uint64_t result = 0;
      uint64_t v12 = GetDescriptionIndex_csgp_16;
      break;
    case 7u:
      uint64_t result = 0;
      uint64_t v12 = GetDescriptionIndex_csgp_32;
      break;
    default:
      goto LABEL_17;
  }
  blockBufferOut[11] = (CMBlockBufferRef)v12;
  return result;
}

uint64_t MovieSampleGroupCreateForFragment(const __CFAllocator *a1, unint64_t a2, char a3, uint64_t a4, void *a5)
{
  CFTypeRef cf = 0;
  if (!a2 || !a5) {
    goto LABEL_24;
  }
  if (a4)
  {
    uint64_t v7 = *(void *)(a4 + 128);
    BOOL v9 = a2 == v7 && a3 == *(unsigned char *)(a4 + 136);
    if (!v9 || a3 == 0)
    {
      if (!v9) {
        goto LABEL_24;
      }
    }
    else if (HIDWORD(a2) != HIDWORD(v7))
    {
      goto LABEL_24;
    }
    if (!*(void *)(a4 + 112)) {
      goto LABEL_17;
    }
LABEL_24:
    return FigSignalErrorAt();
  }
LABEL_17:
  uint64_t v11 = MovieSampleGroupCreate(a1, a2, a3, (uint64_t *)&cf);
  uint64_t v12 = cf;
  if (v11)
  {
    if (cf) {
      CFRelease(cf);
    }
  }
  else
  {
    *((unsigned char *)cf + 140) = 1;
    if (a4)
    {
      CFTypeRef v13 = CFRetain((CFTypeRef)a4);
      uint64_t v12 = cf;
    }
    else
    {
      CFTypeRef v13 = 0;
    }
    uint64_t v11 = 0;
    v12[14] = v13;
    *a5 = v12;
  }
  return v11;
}

uint64_t MovieSampleGroupCreateCompactForFragment(const __CFAllocator *a1, unint64_t a2, char a3, uint64_t a4, CFTypeRef *a5)
{
  CFTypeRef cf = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  int v11 = 0;
  uint64_t v6 = MovieSampleGroupCreateForFragment(a1, a2, a3, a4, &cf);
  if (v6)
  {
    uint64_t v7 = v6;
  }
  else
  {
    LOBYTE(v11) = 1;
    HIDWORD(v10) = 4;
    uint64_t v7 = MovieSampleGroupSet_csgp((CMBlockBufferRef *)cf, &v9, 0, 0);
    if (!v7)
    {
      *a5 = cf;
      return v7;
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  return v7;
}

uint64_t MovieSampleGroupSetDescriptionArray(uint64_t a1, CFTypeRef cf)
{
  if (a1 && cf && !*(void *)(a1 + 16) && *(_DWORD *)(a1 + 128) == *((_DWORD *)cf + 9))
  {
    *(void *)(a1 + 16) = CFRetain(cf);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t MovieSampleGroupCreateDeepCopy(const __CFAllocator *a1, uint64_t a2, CFTypeRef *a3)
{
  CMBlockBufferRef blockBufferOut = 0;
  CFTypeRef v14 = 0;
  CFTypeRef cf = 0;
  CMBlockBufferRef theBuffer = 0;
  if (!a2 || !a3 || *(unsigned char *)(a2 + 140))
  {
    uint64_t v6 = FigSignalErrorAt();
    goto LABEL_32;
  }
  uint64_t v6 = MovieSampleGroupCreate(a1, *(void *)(a2 + 128), *(_DWORD *)(a2 + 136), (uint64_t *)&v14);
  if (v6) {
    goto LABEL_32;
  }
  uint64_t v7 = *(OpaqueCMBlockBuffer **)(a2 + 32);
  if (!v7)
  {
    uint64_t v8 = *(OpaqueCMBlockBuffer **)(a2 + 72);
    if (!v8) {
      goto LABEL_19;
    }
    if (CMBlockBufferIsEmpty(v8))
    {
      uint64_t v6 = CMBlockBufferCreateEmpty(a1, 0, 0, &theBuffer);
      if (v6) {
        goto LABEL_32;
      }
    }
    else
    {
      uint64_t v6 = CMBlockBufferCreateContiguous(a1, *(CMBlockBufferRef *)(a2 + 72), a1, 0, 0, 0, 2u, &theBuffer);
      if (v6) {
        goto LABEL_32;
      }
    }
    if (CMBlockBufferIsEmpty(*(CMBlockBufferRef *)(a2 + 80)))
    {
      uint64_t v6 = CMBlockBufferCreateEmpty(a1, 0, 0, &blockBufferOut);
      if (v6) {
        goto LABEL_32;
      }
    }
    else
    {
      uint64_t v6 = CMBlockBufferCreateContiguous(a1, *(CMBlockBufferRef *)(a2 + 80), a1, 0, 0, 0, 2u, &blockBufferOut);
      if (v6) {
        goto LABEL_32;
      }
    }
    uint64_t v6 = MovieSampleGroupSet_csgp((CMBlockBufferRef *)v14, (_DWORD *)(a2 + 48), theBuffer, blockBufferOut);
    if (!v6) {
      goto LABEL_19;
    }
LABEL_32:
    uint64_t v9 = v6;
    goto LABEL_22;
  }
  uint64_t v6 = CMBlockBufferCreateContiguous(a1, v7, a1, 0, 0, 0, 2u, &blockBufferOut);
  if (v6) {
    goto LABEL_32;
  }
  uint64_t v6 = MovieSampleGroupSet_sbgp((uint64_t)v14, *(_DWORD *)(a2 + 28), blockBufferOut);
  if (v6) {
    goto LABEL_32;
  }
LABEL_19:
  uint64_t v6 = MovieSampleGroupCreateDescriptionArrayDeepCopy(a1, *(void *)(a2 + 16), &cf);
  if (v6) {
    goto LABEL_32;
  }
  uint64_t v9 = MovieSampleGroupSetDescriptionArray((uint64_t)v14, cf);
  if (!v9)
  {
    *a3 = v14;
    CFTypeRef v14 = 0;
  }
LABEL_22:
  if (theBuffer) {
    CFRelease(theBuffer);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  if (v14) {
    CFRelease(v14);
  }
  return v9;
}

uint64_t MovieSampleGroupSet_sbgp(uint64_t a1, int a2, CMBlockBufferRef theBuffer)
{
  if (a1
    && !*(void *)(a1 + 32)
    && !*(void *)(a1 + 72)
    && theBuffer
    && CMBlockBufferGetDataLength(theBuffer) == 8 * a2)
  {
    *(_DWORD *)(a1 + 28) = a2;
    uint64_t v6 = *(const void **)(a1 + 32);
    *(void *)(a1 + 32) = theBuffer;
    CFRetain(theBuffer);
    if (v6) {
      CFRelease(v6);
    }
    *(_DWORD *)(a1 + 24) = 0;
    if (a2 < 1)
    {
      return 0;
    }
    else
    {
      int v7 = 0;
      while (1)
      {
        int v10 = 0;
        uint64_t result = MovieSampleGroupGetEntry(a1, v7, &v10, 0);
        if (result || !v10) {
          break;
        }
        if (v10 < 1) {
          return FigSignalErrorAt();
        }
        int v9 = *(_DWORD *)(a1 + 24) + v10;
        if (v9 < 0) {
          return FigSignalErrorAt();
        }
        *(_DWORD *)(a1 + 24) = v9;
        if (a2 == ++v7) {
          return 0;
        }
      }
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t MovieSampleGroupCreateDescriptionArrayDeepCopy(const __CFAllocator *a1, uint64_t a2, void *a3)
{
  CFTypeRef cf = 0;
  uint64_t v6 = MovieSampleGroupDescriptionArrayCreate(a1, *(_DWORD *)(a2 + 36), (uint64_t *)&cf);
  if (!v6)
  {
    CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a2 + 16));
    if (Count < 1)
    {
LABEL_6:
      uint64_t v13 = 0;
      CFTypeRef v14 = cf;
      *((void *)cf + 3) = *(void *)(a2 + 24);
      v14[8] = *(_DWORD *)(a2 + 32);
      *a3 = v14;
      return v13;
    }
    CFIndex v8 = Count;
    CFIndex v9 = 0;
    while (1)
    {
      CFDataRef ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 16), v9);
      CFDataRef Copy = CFDataCreateCopy(a1, ValueAtIndex);
      if (!Copy) {
        break;
      }
      CFDataRef v12 = Copy;
      CFArrayAppendValue(*((CFMutableArrayRef *)cf + 2), Copy);
      CFRelease(v12);
      if (v8 == ++v9) {
        goto LABEL_6;
      }
    }
    uint64_t v6 = FigSignalErrorAt();
  }
  uint64_t v13 = v6;
  if (cf) {
    CFRelease(cf);
  }
  return v13;
}

uint64_t MovieSampleGroupGetEntry(uint64_t a1, int a2, _DWORD *a3, uint64_t a4)
{
  uint64_t destination = 0;
  if (a1 && (uint64_t v4 = *(OpaqueCMBlockBuffer **)(a1 + 32)) != 0 && (a2 & 0x80000000) == 0)
  {
    if (CMBlockBufferCopyDataBytes(v4, 8 * a2, 8uLL, &destination))
    {
      return FigSignalErrorAt();
    }
    else
    {
      if (a3) {
        *a3 = bswap32(destination);
      }
      uint64_t result = 0;
      if (a4)
      {
        unsigned int v8 = bswap32(HIDWORD(destination));
        unsigned int v9 = (v8 & 0x10000) >> 16;
        if ((v8 & 0x10000) != 0) {
          unsigned int v8 = (unsigned __int16)v8;
        }
        *(unsigned char *)(a4 + 4) = v9;
        *(_DWORD *)a4 = v8;
      }
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t GetDescriptionIndex_csgp_4(uint64_t a1, int a2)
{
  char v2 = a2;
  if (a2 >= 0) {
    int v4 = a2;
  }
  else {
    int v4 = a2 + 1;
  }
  unsigned __int8 destination = 0;
  if (CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(a1 + 80), (uint64_t)v4 >> 1, 1uLL, &destination)) {
    return 0;
  }
  LODWORD(v5) = destination >> 4;
  if (v2) {
    LODWORD(v5) = destination & 0xF;
  }
  if (*(unsigned char *)(a1 + 64)) {
    BOOL v6 = v5 >= 8;
  }
  else {
    BOOL v6 = 0;
  }
  int v7 = !v6;
  BOOL v8 = v7 == 0;
  if (v7) {
    uint64_t v5 = v5;
  }
  else {
    v5 &= 7u;
  }
  uint64_t v9 = 0x100000000;
  if (!v8) {
    uint64_t v9 = 0;
  }
  return v9 | v5;
}

uint64_t GetDescriptionIndex_csgp_8(uint64_t a1, int a2)
{
  unsigned __int8 destination = 0;
  if (CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(a1 + 80), a2, 1uLL, &destination)) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 64)) {
    BOOL v3 = (destination & 0x80u) != 0;
  }
  else {
    BOOL v3 = 0;
  }
  int v4 = !v3;
  BOOL v5 = v4 == 0;
  if (v4) {
    uint64_t v6 = destination;
  }
  else {
    uint64_t v6 = destination & 0x7F;
  }
  uint64_t v7 = 0x100000000;
  if (!v5) {
    uint64_t v7 = 0;
  }
  return v7 | v6;
}

uint64_t GetDescriptionIndex_csgp_16(uint64_t a1, int a2)
{
  unsigned __int16 destination = 0;
  if (CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(a1 + 80), 2 * a2, 2uLL, &destination)) {
    return 0;
  }
  int v3 = bswap32(destination);
  unsigned int v4 = HIWORD(v3);
  if (*(unsigned char *)(a1 + 64)) {
    BOOL v5 = v3 >> 16 < 0;
  }
  else {
    BOOL v5 = 0;
  }
  int v6 = !v5;
  LODWORD(v7) = HIWORD(v3) & 0x7FFF;
  if (v6) {
    uint64_t v7 = v4;
  }
  else {
    uint64_t v7 = v7;
  }
  uint64_t v8 = 0x100000000;
  if (v6) {
    uint64_t v8 = 0;
  }
  return v8 | v7;
}

uint64_t GetDescriptionIndex_csgp_32(uint64_t a1, int a2)
{
  unsigned int destination = 0;
  if (CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(a1 + 80), 4 * a2, 4uLL, &destination)) {
    return 0;
  }
  LODWORD(v3) = bswap32(destination);
  if (*(unsigned char *)(a1 + 64)) {
    BOOL v4 = (int)v3 < 0;
  }
  else {
    BOOL v4 = 0;
  }
  int v5 = !v4;
  BOOL v6 = v5 == 0;
  if (v5) {
    uint64_t v3 = v3;
  }
  else {
    v3 &= 0x7FFFFFFFu;
  }
  uint64_t v7 = 0x100000000;
  if (!v6) {
    uint64_t v7 = 0;
  }
  return v7 | v3;
}

uint64_t MovieSampleGroupTypeSpecMakeBasic(uint64_t result)
{
  return result;
}

unint64_t MovieSampleGroupTypeSpecMakeWithParameter(unsigned int a1, uint64_t a2)
{
  return a1 | (unint64_t)(a2 << 32);
}

uint64_t MovieSampleGroupCollectionCreate(const __CFAllocator *a1, uint64_t *a2)
{
  if (!a2) {
    goto LABEL_6;
  }
  if (MovieSampleGroupCollectionGetTypeID_sRegisterMovieSampleGroupCollectionTypeOnce != -1) {
    dispatch_once_f(&MovieSampleGroupCollectionGetTypeID_sRegisterMovieSampleGroupCollectionTypeOnce, &MovieSampleGroupCollectionGetTypeID_sMovieSampleGroupCollectionID, (dispatch_function_t)RegisterMovieSampleGroupCollectionType);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    uint64_t v5 = Instance;
    *(void *)(Instance + 16) = CFArrayCreateMutable(a1, 0, MEMORY[0x1E4F1D510]);
    *a2 = v5;
    return 0;
  }
  else
  {
LABEL_6:
    return FigSignalErrorAt();
  }
}

uint64_t MovieSampleGroupCollectionAddSampleGroup(uint64_t a1, uint64_t a2)
{
  int v8 = 0;
  if (a1 && a2)
  {
    uint64_t v6 = *(void *)(a2 + 128);
    int v7 = *(_DWORD *)(a2 + 136);
    CFArrayRef v4 = *(const __CFArray **)(a1 + 16);
    v10.size_t length = CFArrayGetCount(v4);
    v10.CFIndex location = 0;
    CFArrayApplyFunction(v4, v10, (CFArrayApplierFunction)DuplicationScanApplierFunction, &v6);
    if (v8)
    {
      return FigSignalErrorAt();
    }
    else
    {
      CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 16), (const void *)a2);
      return 0;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t MovieSampleGroupGetInfo(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4, BOOL *a5)
{
  if (a1)
  {
    uint64_t v9 = *(void *)(a1 + 72);
    if (a2)
    {
      uint64_t v10 = *(void *)(a1 + 128);
      *(_DWORD *)(a2 + 8) = *(_DWORD *)(a1 + 136);
      *(void *)a2 = v10;
    }
    if (a3) {
      MovieSampleGroupDescriptionArrayCopyInfo(*(void *)(a1 + 16), 0, 0, a3, 0, 0);
    }
    if (a4)
    {
      if (v9) {
        int v11 = 0;
      }
      else {
        int v11 = *(_DWORD *)(a1 + 28);
      }
      *a4 = v11;
    }
    if (a5) {
      *a5 = v9 != 0;
    }
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t DuplicationScanApplierFunction(uint64_t result, uint64_t *a2)
{
  if (result)
  {
    int v3 = *(_DWORD *)(result + 128);
    int v4 = *(_DWORD *)(result + 132);
    int v5 = *(unsigned __int8 *)(result + 136);
  }
  else
  {
    uint64_t result = FigSignalErrorAt();
    int v3 = 0;
    int v4 = 0;
    int v5 = 0;
  }
  uint64_t v6 = *a2;
  int v7 = *((unsigned __int8 *)a2 + 8);
  BOOL v9 = v3 == *a2 && v5 == v7;
  if (!v9 || v5 == 0)
  {
    if (!v9) {
      goto LABEL_17;
    }
LABEL_21:
    ++*((_DWORD *)a2 + 3);
    return result;
  }
  if (v4 == HIDWORD(v6)) {
    goto LABEL_21;
  }
LABEL_17:
  if (v3 == v6 && v7 != v5) {
    goto LABEL_21;
  }
  return result;
}

BOOL MovieSampleGroupCollectionHasSampleGroup(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = 0;
  context[0] = a2;
  context[1] = a3;
  if (a1)
  {
    CFArrayRef v3 = *(const __CFArray **)(a1 + 16);
    v7.size_t length = CFArrayGetCount(v3);
    v7.CFIndex location = 0;
    CFArrayApplyFunction(v3, v7, (CFArrayApplierFunction)SampleGroupTypeSpecLookupApplierFunction, context);
    return v6 != 0;
  }
  else
  {
    FigSignalErrorAt();
    return 0;
  }
}

uint64_t SampleGroupTypeSpecLookupApplierFunction(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  if (result)
  {
    uint64_t v4 = *(void *)(result + 128);
    int v5 = *(unsigned __int8 *)(result + 136);
  }
  else
  {
    uint64_t result = FigSignalErrorAt();
    uint64_t v4 = 0;
    int v5 = 0;
  }
  BOOL v7 = v4 == *(void *)a2 && v5 == *(unsigned __int8 *)(a2 + 8);
  if (!v7 || v5 == 0)
  {
    if (!v7) {
      return result;
    }
    goto LABEL_15;
  }
  if (HIDWORD(v4) == HIDWORD(*(void *)a2)) {
LABEL_15:
  }
    *(void *)(a2 + 16) = v3;
  return result;
}

uint64_t MovieSampleGroupCollectionRemoveAllGroupsWithGroupingType(uint64_t a1, int a2)
{
  if (a1)
  {
    CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 16));
    if (Count >= 1)
    {
      CFIndex v5 = Count;
      CFIndex v6 = 0;
      do
      {
        CFDataRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), v6);
        if (ValueAtIndex)
        {
          int v8 = ValueAtIndex[32];
        }
        else
        {
          FigSignalErrorAt();
          int v8 = 0;
        }
        if (v8 == a2)
        {
          CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 16), v6);
          --v5;
        }
        else
        {
          ++v6;
        }
      }
      while (v6 < v5);
    }
  }
  else
  {
    FigSignalErrorAt();
  }
  return 0;
}

CFIndex MovieSampleGroupCollectionGetCount(CFIndex result)
{
  if (result) {
    return CFArrayGetCount(*(CFArrayRef *)(result + 16));
  }
  return result;
}

CFTypeRef MovieSampleGroupCollectionLookupAndRetainSampleGroup(uint64_t a1, uint64_t a2, unsigned int a3)
{
  CFTypeRef cf = 0;
  context[0] = a2;
  context[1] = a3;
  if (a1)
  {
    CFArrayRef v3 = *(const __CFArray **)(a1 + 16);
    v7.size_t length = CFArrayGetCount(v3);
    v7.CFIndex location = 0;
    CFArrayApplyFunction(v3, v7, (CFArrayApplierFunction)SampleGroupTypeSpecLookupApplierFunction, context);
    CFTypeRef result = cf;
    if (cf) {
      return CFRetain(cf);
    }
  }
  else
  {
    FigSignalErrorAt();
    return 0;
  }
  return result;
}

CFArrayRef MovieSampleGroupCollectionCopySampleGroupArray(const __CFAllocator *a1, uint64_t a2)
{
  if (a2)
  {
    CFArrayRef v2 = *(const __CFArray **)(a2 + 16);
    return CFArrayCreateCopy(a1, v2);
  }
  else
  {
    FigSignalErrorAt();
    return 0;
  }
}

void MovieSampleGroupCollectionApplyFunction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[0] = a2;
  v4[1] = a3;
  if (a1 && a2)
  {
    CFArrayRef v3 = *(const __CFArray **)(a1 + 16);
    v6.size_t length = CFArrayGetCount(v3);
    v6.CFIndex location = 0;
    CFArrayApplyFunction(v3, v6, (CFArrayApplierFunction)ClientApplicationApplierFunction, v4);
  }
  else
  {
    FigSignalErrorAt();
  }
}

uint64_t ClientApplicationApplierFunction(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))a2)(a1, *(void *)(a2 + 8));
}

uint64_t MovieSampleGroupDescriptionArrayAppendDescriptionUniquely(uint64_t a1, size_t a2, const void *a3, _DWORD *a4)
{
  MatchingDescriptionIndexCFDictionaryRef Value = FindMatchingDescriptionIndexValue(a1, a2, a3);
  if (MatchingDescriptionIndexValue == -1)
  {
    return MovieSampleGroupDescriptionArrayAppendNewDescription(a1, a2, (const UInt8 *)a3, a4);
  }
  else
  {
    if (a4) {
      *a4 = MatchingDescriptionIndexValue;
    }
    return 0;
  }
}

uint64_t FindMatchingDescriptionIndexValue(uint64_t a1, size_t a2, const void *a3)
{
  CFArrayRef v4 = *(const __CFArray **)(a1 + 16);
  if (!v4) {
    return 0xFFFFFFFFLL;
  }
  int Count = CFArrayGetCount(v4);
  if (Count < 1) {
    return 0xFFFFFFFFLL;
  }
  CFIndex v8 = 0;
  uint64_t v9 = Count;
  while (1)
  {
    CFDataRef ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), v8);
    CFIndex Length = CFDataGetLength(ValueAtIndex);
    BytePtr = CFDataGetBytePtr(ValueAtIndex);
    if (Length == a2 && (!a2 || !memcmp(BytePtr, a3, a2))) {
      break;
    }
    if (v9 == ++v8) {
      return 0xFFFFFFFFLL;
    }
  }
  return (v8 + 1);
}

uint64_t MovieSampleGroupDescriptionArrayAppendNewDescription(uint64_t a1, CFIndex a2, const UInt8 *a3, _DWORD *a4)
{
  CFArrayRef v8 = *(const __CFArray **)(a1 + 16);
  CFIndex v9 = a2;
  if (v8)
  {
    CFIndex Count = CFArrayGetCount(v8);
    CFIndex v9 = a2;
    if (Count)
    {
      if (*(void *)(a1 + 24) == a2) {
        goto LABEL_6;
      }
      CFIndex v9 = 0;
    }
  }
  *(void *)(a1 + 24) = v9;
LABEL_6:
  CFAllocatorRef v11 = CFGetAllocator((CFTypeRef)a1);
  CFDataRef v12 = CFDataCreate(v11, a3, a2);
  if (v12)
  {
    CFDataRef v13 = v12;
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 16), v12);
    if (a4) {
      *a4 = CFArrayGetCount(*(CFArrayRef *)(a1 + 16));
    }
    CFRelease(v13);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t MovieSampleGroupDescriptionArrayAppendParsedDescription(uint64_t a1, CFIndex a2, const UInt8 *a3)
{
  if (a1 && (a2 == 0) == (a3 == 0)) {
    return MovieSampleGroupDescriptionArrayAppendNewDescription(a1, a2, a3, 0);
  }
  else {
    return FigSignalErrorAt();
  }
}

uint64_t MovieSampleGroupDescriptionArraySetDefaultDescriptionIndex(uint64_t a1, unsigned int a2)
{
  if ((a2 & 0x80000000) != 0) {
    goto LABEL_6;
  }
  uint64_t v4 = a2;
  CFArrayRef Count = *(const __CFArray **)(a1 + 16);
  if (Count) {
    CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
  }
  if ((uint64_t)Count < v4)
  {
LABEL_6:
    return FigSignalErrorAt();
  }
  else
  {
    *(_DWORD *)(a1 + 32) = a2;
    return 0;
  }
}

uint64_t MovieSampleGroupDescriptionArrayCopyInfo(uint64_t a1, _DWORD *a2, void *a3, _DWORD *a4, void *a5, _DWORD *a6)
{
  if (a1)
  {
    if (a2) {
      *a2 = *(_DWORD *)(a1 + 36);
    }
    if (a3)
    {
      CFTypeRef v12 = *(CFTypeRef *)(a1 + 16);
      if (v12) {
        CFTypeRef v12 = CFRetain(v12);
      }
      *a3 = v12;
    }
    if (a4)
    {
      CFArrayRef v13 = *(const __CFArray **)(a1 + 16);
      if (v13) {
        LODWORD(v13) = CFArrayGetCount(v13);
      }
      *a4 = v13;
    }
    if (a5) {
      *a5 = *(void *)(a1 + 24);
    }
    if (a6) {
      *a6 = *(_DWORD *)(a1 + 32);
    }
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t MovieSampleGroupDescriptionArrayCopyDescriptionForIndex(uint64_t a1, int a2, void *a3)
{
  if (!a1) {
    goto LABEL_10;
  }
  if (!a3) {
    goto LABEL_10;
  }
  CFIndex v4 = (a2 - 1);
  if (a2 < 1) {
    goto LABEL_10;
  }
  uint64_t v6 = a2;
  CFArrayRef Count = *(const __CFArray **)(a1 + 16);
  if (Count) {
    CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
  }
  if ((uint64_t)Count >= v6)
  {
    CFDataRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), v4);
    if (ValueAtIndex) {
      CFDataRef ValueAtIndex = CFRetain(ValueAtIndex);
    }
    *a3 = ValueAtIndex;
    return 0;
  }
  else
  {
LABEL_10:
    return FigSignalErrorAt();
  }
}

uint64_t MovieSampleGroupDescriptionArrayCreate(const __CFAllocator *a1, int a2, uint64_t *a3)
{
  if (!a2 || !a3) {
    goto LABEL_7;
  }
  if (MovieSampleGroupDescriptionArrayGetTypeID_sRegisterMovieSampleGroupDescriptionArrayTypeOnce != -1) {
    dispatch_once_f(&MovieSampleGroupDescriptionArrayGetTypeID_sRegisterMovieSampleGroupDescriptionArrayTypeOnce, &MovieSampleGroupDescriptionArrayGetTypeID_sMovieSampleGroupDescriptionArrayID, (dispatch_function_t)RegisterMovieSampleGroupDescriptionArrayType);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    uint64_t v7 = Instance;
    *(void *)(Instance + 16) = CFArrayCreateMutable(a1, 0, MEMORY[0x1E4F1D510]);
    *(_DWORD *)(v7 + 36) = a2;
    *a3 = v7;
    return 0;
  }
  else
  {
LABEL_7:
    return FigSignalErrorAt();
  }
}

uint64_t MovieSampleGroupGetPatternEntry(uint64_t a1, int a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t destination = 0;
  if (a1 && (CFIndex v4 = *(OpaqueCMBlockBuffer **)(a1 + 72)) != 0 && (a2 & 0x80000000) == 0)
  {
    if (CMBlockBufferCopyDataBytes(v4, 8 * a2, 8uLL, &destination))
    {
      return FigSignalErrorAt();
    }
    else
    {
      if (a3) {
        *a3 = bswap32(destination);
      }
      uint64_t result = 0;
      if (a4) {
        *a4 = bswap32(HIDWORD(destination));
      }
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t MovieSampleGroupGetSampleToGroupTable(uint64_t a1)
{
  if (a1) {
    return *(void *)(a1 + 32);
  }
  FigSignalErrorAt();
  return 0;
}

uint64_t MovieSampleGroupGetNumSampleToGroupTableEntries(uint64_t a1)
{
  if (a1) {
    return *(unsigned int *)(a1 + 28);
  }
  FigSignalErrorAt();
  return 0;
}

uint64_t MovieSampleGroupCopyCompactAtomComponents(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (a1 && *(void *)(a1 + 72))
  {
    if (a2)
    {
      long long v7 = *(_OWORD *)(a1 + 48);
      *(_DWORD *)(a2 + 16) = *(_DWORD *)(a1 + 64);
      *(_OWORD *)a2 = v7;
    }
    if (a3)
    {
      CFTypeRef v8 = *(CFTypeRef *)(a1 + 72);
      if (v8) {
        CFTypeRef v8 = CFRetain(v8);
      }
      *a3 = v8;
    }
    if (a4)
    {
      CFTypeRef v9 = *(CFTypeRef *)(a1 + 80);
      if (v9) {
        CFTypeRef v9 = CFRetain(v9);
      }
      *a4 = v9;
    }
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t MovieSampleGroupCopyDescriptionForIndex(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  CFTypeRef cf = 0;
  if (a1)
  {
    if (a3)
    {
      if (!a2) {
        goto LABEL_9;
      }
      if (!*(unsigned char *)(a1 + 140) || (a2 & 0xFF00000000) != 0)
      {
        uint64_t v4 = MovieSampleGroupDescriptionArrayCopyDescriptionForIndex(*(void *)(a1 + 16), a2, &cf);
        if (v4)
        {
LABEL_15:
          uint64_t v5 = v4;
          if (cf) {
            CFRelease(cf);
          }
          return v5;
        }
LABEL_9:
        uint64_t v5 = 0;
        *a3 = cf;
        return v5;
      }
      if (!MovieSampleGroupCopyDescriptionForIndex(*(void *)(a1 + 112))) {
        goto LABEL_9;
      }
    }
    uint64_t v4 = FigSignalErrorAt();
    goto LABEL_15;
  }

  return FigSignalErrorAt();
}

uint64_t MovieSampleGroupCopyGroupTypeKeyString(uint64_t a1, void *a2)
{
  if (a1 && a2)
  {
    CFTypeRef v3 = *(CFTypeRef *)(a1 + 120);
    if (v3) {
      CFTypeRef v3 = CFRetain(v3);
    }
    *a2 = v3;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t GetCompactDescriptionIndexForSample(uint64_t a1, int a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 48))
  {
    size_t v6 = 0;
    unint64_t v7 = 0;
    int v8 = 0;
    int v9 = 1;
    while (1)
    {
      uint64_t destination = 0;
      CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(a1 + 72), v6, 8uLL, &destination);
      unsigned int v10 = bswap32(destination);
      unsigned int v11 = bswap32(HIDWORD(destination)) + v9;
      if (a2 >= v9 && v11 > a2) {
        break;
      }
      v8 += v10;
      ++v7;
      v6 += 8;
      int v9 = v11;
      if (v7 >= *(unsigned int *)(a1 + 48)) {
        goto LABEL_6;
      }
    }
    *(void *)a3 = (*(uint64_t (**)(uint64_t, void))(a1 + 88))(a1, (a2 - v9) % v10 + v8);
    return 1;
  }
  else
  {
LABEL_6:
    uint64_t result = 0;
    *(unsigned char *)(a3 + 4) = 0;
    *(_DWORD *)a3 = 0;
  }
  return result;
}

uint64_t MovieSampleGroupAccessorCreate(void *a1, uint64_t *a2)
{
  CFGetAllocator(a1);
  if (MovieSampleGroupAccessorGetTypeID_sRegisterMovieSampleGroupAccessorTypeOnce != -1) {
    dispatch_once_f(&MovieSampleGroupAccessorGetTypeID_sRegisterMovieSampleGroupAccessorTypeOnce, &MovieSampleGroupAccessorGetTypeID_sMovieSampleGroupAccessorID, (dispatch_function_t)RegisterMovieSampleGroupAccessorType);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    uint64_t v5 = Instance;
    if (a1)
    {
      CFTypeRef v6 = CFRetain(a1);
      *(void *)(v5 + 16) = v6;
      uint64_t v7 = a1[9];
      *(_DWORD *)(v5 + 24) = 0;
      if (v7)
      {
        *(void *)(v5 + 36) = 1;
        *(void *)(v5 + 48) = CompactSampleGroupAccessorGetDescriptionIndexForSample;
        uint64_t PatternEntry = MovieSampleGroupGetPatternEntry((uint64_t)v6, 0, (_DWORD *)(v5 + 28), (_DWORD *)(v5 + 32));
        if (PatternEntry)
        {
          uint64_t v9 = PatternEntry;
          CFRelease((CFTypeRef)v5);
          return v9;
        }
      }
      else
      {
        *(_DWORD *)(v5 + 28) = 1;
        *(void *)(v5 + 48) = RegularSampleGroupAccessorGetDescriptionIndexForSample;
      }
    }
    uint64_t v9 = 0;
    *a2 = v5;
    return v9;
  }

  return FigSignalErrorAt();
}

uint64_t MovieSampleGroupAccessorCopy(uint64_t a1, uint64_t *a2)
{
  if (!a1) {
    goto LABEL_8;
  }
  CFGetAllocator((CFTypeRef)a1);
  if (MovieSampleGroupAccessorGetTypeID_sRegisterMovieSampleGroupAccessorTypeOnce != -1) {
    dispatch_once_f(&MovieSampleGroupAccessorGetTypeID_sRegisterMovieSampleGroupAccessorTypeOnce, &MovieSampleGroupAccessorGetTypeID_sMovieSampleGroupAccessorID, (dispatch_function_t)RegisterMovieSampleGroupAccessorType);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    uint64_t v5 = Instance;
    CFTypeRef v6 = *(const void **)(a1 + 16);
    if (v6)
    {
      *(void *)(v5 + 16) = CFRetain(v6);
      long long v7 = *(_OWORD *)(a1 + 24);
      *(_DWORD *)(v5 + 40) = *(_DWORD *)(a1 + 40);
      *(_OWORD *)(v5 + 24) = v7;
      *(void *)(v5 + 48) = *(void *)(a1 + 48);
    }
    *a2 = v5;
    return 0;
  }
  else
  {
LABEL_8:
    return FigSignalErrorAt();
  }
}

uint64_t MovieSampleGroupAccessorCopyDescriptionForSample(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v10 = 0;
  CFTypeRef cf = 0;
  if (!*(void *)(a1 + 16))
  {
    CFTypeRef v8 = 0;
    uint64_t v5 = 0;
    goto LABEL_10;
  }
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(a1 + 48))(a1, a2, &v10);
  uint64_t v6 = *(void *)(a1 + 16);
  if (!v10)
  {
    uint64_t v7 = *(void *)(v6 + 16);
    if (v7)
    {
      LODWORD(v10) = *(_DWORD *)(v7 + 32);
      if (v10)
      {
LABEL_5:
        uint64_t v6 = *(void *)(a1 + 16);
        goto LABEL_6;
      }
    }
    else
    {
      FigSignalErrorAt();
      if (v10) {
        goto LABEL_5;
      }
    }
    CFTypeRef v8 = 0;
    goto LABEL_10;
  }
LABEL_6:
  uint64_t v5 = MovieSampleGroupCopyDescriptionForIndex(v6, v10, &cf);
  CFTypeRef v8 = cf;
  if (!v5)
  {
LABEL_10:
    *a3 = v8;
    return v5;
  }
  if (cf) {
    CFRelease(cf);
  }
  return v5;
}

uint64_t MovieSampleGroupAddDescription(uint64_t a1, size_t a2, const void *a3, uint64_t a4, char *a5)
{
  if (a1 && (a2 == 0) == (a3 == 0))
  {
    if (*(unsigned char *)(a1 + 140)
      && (uint64_t v10 = *(void *)(a1 + 112)) != 0
      && (MatchingDescriptionIndexCFDictionaryRef Value = FindMatchingDescriptionIndexValue(*(void *)(v10 + 16), a2, a3),
          MatchingDescriptionIndexValue != -1))
    {
      BOOL v11 = 0;
      char v12 = 0;
      if (!a4)
      {
LABEL_14:
        uint64_t result = 0;
        if (a5) {
          *a5 = v12;
        }
        return result;
      }
    }
    else
    {
      MatchingDescriptionIndexCFDictionaryRef Value = FindMatchingDescriptionIndexValue(*(void *)(a1 + 16), a2, a3);
      if (MatchingDescriptionIndexValue == -1)
      {
        uint64_t result = MovieSampleGroupDescriptionArrayAppendNewDescription(*(void *)(a1 + 16), a2, (const UInt8 *)a3, &MatchingDescriptionIndexValue);
        if (result) {
          return result;
        }
        char v12 = 1;
      }
      else
      {
        char v12 = 0;
      }
      BOOL v11 = *(unsigned char *)(a1 + 140) != 0;
      if (!a4) {
        goto LABEL_14;
      }
    }
    *(_DWORD *)a4 = MatchingDescriptionIndexValue;
    *(unsigned char *)(a4 + 4) = v11;
    goto LABEL_14;
  }

  return FigSignalErrorAt();
}

uint64_t UpgradeCompactSampleGroupFieldSize(uint64_t a1, int a2)
{
  CMBlockBufferRef blockBufferOut = 0;
  uint64_t WritableForBlockBuffer = CMBlockBufferCreateEmpty((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 8u, 0, &blockBufferOut);
  if (WritableForBlockBuffer
    || (uint64_t WritableForBlockBuffer = CMByteStreamCreateWritableForBlockBuffer(), WritableForBlockBuffer))
  {
LABEL_20:
    uint64_t v10 = WritableForBlockBuffer;
    goto LABEL_24;
  }
  if (*(_DWORD *)(a1 + 56))
  {
    uint64_t v5 = 0;
    do
    {
      (*(void (**)(uint64_t, uint64_t))(a1 + 88))(a1, v5);
      if (a2 == 32 || a2 == 16 || a2 == 8)
      {
        uint64_t WritableForBlockBuffer = CMByteStreamAppend();
        if (WritableForBlockBuffer) {
          goto LABEL_20;
        }
      }
      uint64_t v5 = (v5 + 1);
    }
    while (v5 < *(_DWORD *)(a1 + 56));
  }
  uint64_t v6 = *(const void **)(a1 + 80);
  CMBlockBufferRef v7 = blockBufferOut;
  *(void *)(a1 + 80) = blockBufferOut;
  if (v7) {
    CFRetain(v7);
  }
  if (v6) {
    CFRelease(v6);
  }
  CFTypeRef v8 = *(const void **)(a1 + 104);
  *(void *)(a1 + 104) = 0;
  if (v8) {
    CFRelease(v8);
  }
  *(_DWORD *)(a1 + 60) = a2;
  uint64_t v9 = GetDescriptionIndex_csgp_8;
  switch(a2)
  {
    case 8:
      goto LABEL_22;
    case 32:
      uint64_t v9 = GetDescriptionIndex_csgp_32;
      goto LABEL_22;
    case 16:
      uint64_t v9 = GetDescriptionIndex_csgp_16;
LABEL_22:
      uint64_t v10 = 0;
      *(void *)(a1 + 88) = v9;
      goto LABEL_24;
  }
  uint64_t v10 = 0;
LABEL_24:
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  return v10;
}

uint64_t MovieSampleGroupAppendSamplesWithDescriptionIndex(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (a1 && a2)
  {
    if (*(void *)(a1 + 72))
    {
      uint64_t v19 = 0;
      uint64_t result = MakeReadyToWrite_csgp(a1);
      if (result) {
        return result;
      }
      int v7 = *(_DWORD *)(a1 + 48);
      if (!v7) {
        goto LABEL_19;
      }
      unint64_t v18 = 0;
      uint64_t v8 = 8 * (v7 - 1);
      MovieSampleGroupGetPatternEntry(a1, v7 - 1, (_DWORD *)&v19 + 1, &v19);
      int v9 = HIDWORD(v19);
      if (HIDWORD(v19) == 1)
      {
        uint64_t v20 = 0;
        GetCompactDescriptionIndexForSample(a1, *(_DWORD *)(a1 + 52), (uint64_t)&v20);
        if (v20 == a3 && BYTE4(v20) == BYTE4(a3))
        {
          unint64_t v18 = _byteswap_uint64(__PAIR64__(HIDWORD(v19), v19 + a2));
          uint64_t v10 = *(void *)(a1 + 96);
          uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v11) {
            uint64_t v12 = v11;
          }
          else {
            uint64_t v12 = 0;
          }
          uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t *, void))(v12 + 16);
          if (v17)
          {
            uint64_t result = v17(v10, 8, v8, &v18, 0);
            if (!result) {
              *(_DWORD *)(a1 + 52) += a2;
            }
            return result;
          }
          return 4294954514;
        }
        int v9 = HIDWORD(v19);
      }
      if (a2 == 1 && v9 == v19)
      {
        LODWORD(v18) = bswap32(v9 + 1);
        HIDWORD(v18) = v18;
        uint64_t v13 = *(void *)(a1 + 96);
        uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v14) {
          uint64_t v15 = v14;
        }
        else {
          uint64_t v15 = 0;
        }
        uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t *, void))(v15 + 16);
        if (!v16) {
          return 4294954514;
        }
        uint64_t result = v16(v13, 8, v8, &v18, 0);
        if (result) {
          return result;
        }
        ++*(_DWORD *)(a1 + 52);
      }
      else
      {
LABEL_19:
        uint64_t result = AppendNewPattern(a1, 1, a2);
        if (result) {
          return result;
        }
      }
      return AppendDescriptionIndexToCompactGroup(a1, a3);
    }
    return AppendSamplesWithDescriptionIndexToRegularGroup(a1, a2, a3);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t AppendSamplesWithDescriptionIndexToRegularGroup(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = 0;
  unsigned int v27 = 0;
  unint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v24 = 0;
  CFTypeRef cf = 0;
  CMBlockBufferRef blockBufferOut = 0;
  if (*(void *)(a1 + 40)) {
    goto LABEL_17;
  }
  uint64_t WritableForBlockBuffer = CMBlockBufferCreateEmpty((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0x10u, 0, &blockBufferOut);
  if (!WritableForBlockBuffer)
  {
    uint64_t v8 = *(OpaqueCMBlockBuffer **)(a1 + 32);
    if (v8 && (int v9 = *(_DWORD *)(a1 + 28)) != 0)
    {
      uint64_t v28 = 0;
      uint64_t destination = 0;
      size_t v10 = 8 * (v9 - 1);
      CMBlockBufferCopyDataBytes(v8, v10, 8uLL, &destination);
      if (*(int *)(a1 + 28) >= 2) {
        CMBlockBufferAppendBufferReference(blockBufferOut, *(CMBlockBufferRef *)(a1 + 32), 0, v10, 0);
      }
      uint64_t WritableForBlockBuffer = CMByteStreamCreateWritableForBlockBuffer();
      if (!WritableForBlockBuffer)
      {
        CMByteStreamAppend();
LABEL_10:
        uint64_t v11 = *(const void **)(a1 + 32);
        CMBlockBufferRef v12 = blockBufferOut;
        *(void *)(a1 + 32) = blockBufferOut;
        if (v12) {
          CFRetain(v12);
        }
        if (v11) {
          CFRelease(v11);
        }
        uint64_t v6 = 0;
        *(void *)(a1 + 40) = CFRetain(cf);
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t WritableForBlockBuffer = CMByteStreamCreateWritableForBlockBuffer();
      if (!WritableForBlockBuffer) {
        goto LABEL_10;
      }
    }
  }
  uint64_t v6 = WritableForBlockBuffer;
LABEL_15:
  if (cf) {
    CFRelease(cf);
  }
LABEL_17:
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  if (v6) {
    return v6;
  }
  int v13 = *(_DWORD *)(a1 + 28);
  if (!v13)
  {
    int v14 = 0;
    goto LABEL_27;
  }
  int v14 = v13 - 1;
  MovieSampleGroupGetEntry(a1, v13 - 1, &v27, (uint64_t)&v24);
  if (!*(_DWORD *)(a1 + 28))
  {
LABEL_27:
    unsigned int v27 = a2;
    LODWORD(v24) = a3;
    BYTE4(v24) = BYTE4(a3);
    *(_WORD *)((char *)&v24 + 5) = HIDWORD(a3) >> 8;
    char v17 = HIBYTE(a3);
    goto LABEL_31;
  }
  unsigned int v15 = v27;
  if (v24 != a3 || BYTE4(v24) != BYTE4(a3))
  {
    unsigned int v27 = a2;
    if (v15) {
      int v14 = v13;
    }
    LODWORD(v24) = a3;
    BYTE4(v24) = BYTE4(a3);
    *(_WORD *)((char *)&v24 + 5) = HIDWORD(a3) >> 8;
    char v17 = HIBYTE(a3);
LABEL_31:
    HIBYTE(v24) = v17;
    unsigned int v16 = a2;
    if (!a2)
    {
LABEL_39:
      uint64_t v6 = 0;
      *(_DWORD *)(a1 + 24) += a2;
      *(_DWORD *)(a1 + 28) = v14 + 1;
      return v6;
    }
    goto LABEL_32;
  }
  unsigned int v16 = v27 + a2;
  unsigned int v27 = v16;
  if (!v16) {
    goto LABEL_39;
  }
LABEL_32:
  unsigned int v18 = a3 | 0x10000;
  if (!BYTE4(a3)) {
    unsigned int v18 = a3;
  }
  unint64_t v25 = _byteswap_uint64(__PAIR64__(v16, v18));
  uint64_t v19 = *(void *)(a1 + 40);
  uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v20) {
    uint64_t v21 = v20;
  }
  else {
    uint64_t v21 = 0;
  }
  uint64_t v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t *, uint64_t *))(v21 + 16);
  if (!v22) {
    return 4294954514;
  }
  uint64_t v6 = v22(v19, 8, 8 * v14, &v25, &v26);
  if (!v6) {
    goto LABEL_39;
  }
  return v6;
}

uint64_t MovieSampleGroupIntegrateSampleGroup(unsigned int a1, uint64_t a2, uint64_t a3)
{
  if (a2 && a3 && a2 != a3)
  {
    if (!*(void *)(a3 + 72))
    {
      CFDataRef theData = 0;
      unsigned int v17 = *(_DWORD *)(a3 + 24) + *(_DWORD *)(a2 + 24);
      if (v17 > a1) {
        return FigSignalErrorAt();
      }
      if (v17 < a1)
      {
        uint64_t v18 = *(void *)(a2 + 16);
        if (v18)
        {
          uint64_t v19 = *(unsigned int *)(v18 + 32);
        }
        else
        {
          FigSignalErrorAt();
          uint64_t v19 = 0;
          unsigned int v17 = *(_DWORD *)(a3 + 24) + *(_DWORD *)(a2 + 24);
        }
        uint64_t appended = MovieSampleGroupAppendSamplesWithDescriptionIndex(a2, a1 - v17, v19);
        if (appended) {
          return appended;
        }
      }
      int v20 = *(_DWORD *)(a3 + 28);
      if (v20 >= 1)
      {
        int v21 = 0;
        while (1)
        {
          uint64_t v26 = 0;
          HIDWORD(v25) = 0;
          uint64_t Entry = MovieSampleGroupGetEntry(a3, v21, (_DWORD *)&v25 + 1, (uint64_t)&v26);
          if (Entry) {
            break;
          }
          if (v26 && (BYTE4(v26) || *(void *)(a3 + 112) != a2))
          {
            uint64_t Entry = MovieSampleGroupCopyDescriptionForIndex(a3, v26, (CFTypeRef *)&theData);
            if (Entry) {
              break;
            }
            if (theData)
            {
              size_t Length = CFDataGetLength(theData);
              BytePtr = CFDataGetBytePtr(theData);
              uint64_t Entry = MovieSampleGroupAddDescription(a2, Length, BytePtr, (uint64_t)&v26, 0);
              if (Entry) {
                break;
              }
            }
          }
          uint64_t Entry = MovieSampleGroupAppendSamplesWithDescriptionIndex(a2, HIDWORD(v25), v26);
          if (Entry) {
            break;
          }
          if (theData)
          {
            CFRelease(theData);
            CFDataRef theData = 0;
          }
          if (v20 == ++v21) {
            return 0;
          }
        }
        goto LABEL_61;
      }
      return 0;
    }
    if (!*(void *)(a2 + 32))
    {
      CFDataRef theData = 0;
      if (*(_DWORD *)(a3 + 48))
      {
        if (*(_DWORD *)(a3 + 52) + *(_DWORD *)(a2 + 52) > a1)
        {
          uint64_t Entry = FigSignalErrorAt();
          goto LABEL_61;
        }
        uint64_t Entry = MakeReadyToWrite_csgp(a2);
        if (!Entry)
        {
          unsigned int v7 = *(_DWORD *)(a3 + 52) + *(_DWORD *)(a2 + 52);
          if (a1 > v7)
          {
            uint64_t Entry = AppendNewPattern(a2, 1, a1 - v7);
            if (Entry) {
              goto LABEL_61;
            }
            uint64_t v8 = *(void *)(a2 + 16);
            if (v8)
            {
              uint64_t v9 = *(unsigned int *)(v8 + 32);
            }
            else
            {
              FigSignalErrorAt();
              uint64_t v9 = 0;
            }
            AppendDescriptionIndexToCompactGroup(a2, v9);
          }
          if (!*(_DWORD *)(a3 + 48))
          {
LABEL_34:
            uint64_t appended = 0;
            goto LABEL_35;
          }
          int v10 = 0;
          int v11 = 0;
          while (1)
          {
            uint64_t v25 = 0;
            uint64_t v26 = 0;
            uint64_t Entry = MovieSampleGroupGetPatternEntry(a3, v11, (_DWORD *)&v25 + 1, &v25);
            if (Entry) {
              break;
            }
            uint64_t Entry = AppendNewPattern(a2, HIDWORD(v25), v25);
            if (Entry) {
              break;
            }
            if (SHIDWORD(v25) >= 1)
            {
              int v12 = 0;
              do
              {
                uint64_t v13 = (*(uint64_t (**)(uint64_t, void))(a3 + 88))(a3, (v10 + v12));
                if (v13 && ((v13 & 0xFF00000000) != 0 || *(void *)(a3 + 112) != a2))
                {
                  uint64_t Entry = MovieSampleGroupCopyDescriptionForIndex(a3, v13, (CFTypeRef *)&theData);
                  if (Entry) {
                    goto LABEL_61;
                  }
                  if (theData)
                  {
                    size_t v14 = CFDataGetLength(theData);
                    unsigned int v15 = CFDataGetBytePtr(theData);
                    uint64_t Entry = MovieSampleGroupAddDescription(a2, v14, v15, (uint64_t)&v26, 0);
                    if (Entry) {
                      goto LABEL_61;
                    }
                  }
                  else
                  {
                    LODWORD(v26) = 0;
                  }
                }
                else
                {
                  LODWORD(v26) = v13;
                  BYTE4(v26) = BYTE4(v13);
                  *(_WORD *)((char *)&v26 + 5) = HIDWORD(v13) >> 8;
                  HIBYTE(v26) = HIBYTE(v13);
                }
                AppendDescriptionIndexToCompactGroup(a2, v26);
                if (theData)
                {
                  CFRelease(theData);
                  CFDataRef theData = 0;
                }
                ++v12;
              }
              while (v12 < SHIDWORD(v25));
              v10 += v12;
            }
            if (++v11 >= *(_DWORD *)(a3 + 48)) {
              goto LABEL_34;
            }
          }
        }
LABEL_61:
        uint64_t appended = Entry;
LABEL_35:
        if (theData) {
          CFRelease(theData);
        }
        return appended;
      }
      return 0;
    }
  }

  return FigSignalErrorAt();
}

uint64_t MovieSampleGroupCreateOptimizedCopy(int *cf, CFTypeRef *a2)
{
  long long v37 = 0uLL;
  int v38 = 0;
  CFTypeRef v36 = 0;
  *(_OWORD *)CFTypeRef cfa = 0u;
  memset(v35, 0, sizeof(v35));
  *(_OWORD *)long long v32 = 0u;
  *(_OWORD *)uint64_t v33 = 0u;
  LODWORD(v33[1]) = 1;
  if (!cf || !a2)
  {
    uint64_t v6 = FigSignalErrorAt();
    goto LABEL_55;
  }
  if (*((unsigned char *)cf + 140))
  {
    uint64_t v4 = 0;
    *a2 = CFRetain(cf);
    return v4;
  }
  CFAllocatorRef v5 = CFGetAllocator(cf);
  uint64_t v6 = MovieSampleGroupCreate(v5, *((void *)cf + 16), cf[34], (uint64_t *)cfa);
  if (v6) {
    goto LABEL_55;
  }
  uint64_t v7 = *((void *)cf + 9);
  uint64_t v8 = 13;
  if (!v7) {
    uint64_t v8 = 6;
  }
  int v9 = cf[v8];
  *(void *)((char *)&v37 + 4) = 0;
  int v10 = 4;
  HIDWORD(v37) = 4;
  if (v7)
  {
    int v10 = cf[15];
    HIDWORD(v37) = v10;
  }
  LOBYTE(v38) = 0;
  uint64_t v6 = MovieSampleGroupSet_csgp((CMBlockBufferRef *)cfa[0], &v37, 0, 0);
  if (v6) {
    goto LABEL_55;
  }
  uint64_t v6 = MakeReadyToWrite_csgp((uint64_t)cfa[0]);
  if (v6) {
    goto LABEL_55;
  }
  uint64_t v6 = MovieSampleGroupAccessorCreate(cf, (uint64_t *)v32);
  if (v6) {
    goto LABEL_55;
  }
  uint64_t v6 = MovieSampleGroupAccessorCreate(cf, (uint64_t *)v33);
  if (v6) {
    goto LABEL_55;
  }
  memset_pattern16((char *)&v35[8] + 12, &unk_194997510, 0x80uLL);
  LODWORD(cfa[1]) = v10;
  LODWORD(v32[1]) = 1;
  if (v9 <= 0)
  {
    int v12 = HIDWORD(cfa[1]);
LABEL_38:
    if (v12 < 1)
    {
      uint64_t v6 = OutputTrailingNonPatternRunThroughSampleNumber((uint64_t)v32, v9);
      if (v6) {
        goto LABEL_55;
      }
    }
    else
    {
      uint64_t v6 = OutputTrailingPatternRunThroughSampleNumber((uint64_t)v32, v9);
      if (v6) {
        goto LABEL_55;
      }
    }
    CFAllocatorRef v28 = CFGetAllocator(cf);
    uint64_t v29 = MovieSampleGroupCreateDescriptionArrayDeepCopy(v28, *((void *)cf + 2), &v36);
    CFTypeRef v30 = v36;
    if (v29)
    {
      uint64_t v4 = v29;
      if (!v36) {
        goto LABEL_47;
      }
    }
    else
    {
      uint64_t v4 = MovieSampleGroupSetDescriptionArray((uint64_t)cfa[0], v36);
      if (!v4)
      {
        *a2 = cfa[0];
        cfa[0] = 0;
      }
      if (!v30) {
        goto LABEL_47;
      }
    }
    CFRelease(v30);
    goto LABEL_47;
  }
  uint64_t v11 = 1;
  while (1)
  {
    uint64_t v39 = 0;
    uint64_t v6 = (*((uint64_t (**)(CFTypeRef, uint64_t, uint64_t *))v32[0] + 6))(v32[0], v11, &v39);
    if (v6) {
      goto LABEL_55;
    }
    *((_DWORD *)v35 + SLODWORD(v32[1]) % 33 + 1) = v39;
    int v12 = HIDWORD(cfa[1]);
    int v13 = (int)v32[1];
    size_t v14 = (_DWORD *)v35 + SLODWORD(v32[1]) % 33 + 1;
    if ((uint64_t)cfa[1] <= 0) {
      break;
    }
    if (*v14 == *((_DWORD *)v35 + (LODWORD(v32[1]) - HIDWORD(cfa[1])) % 33 + 1)) {
      goto LABEL_35;
    }
    uint64_t v6 = OutputTrailingPatternRunThroughSampleNumber((uint64_t)v32, LODWORD(v32[1]) - 1);
    if (v6) {
      goto LABEL_55;
    }
    uint64_t v15 = 0;
    HIDWORD(cfa[1]) = 0;
    int v13 = (int)v32[1];
    int32x4_t v16 = vdupq_n_s32(v32[1]);
    do
    {
      *(int32x4_t *)((char *)&v35[v15 + 8] + 12) = v16;
      ++v15;
    }
    while (v15 != 8);
    int v12 = 0;
LABEL_35:
    uint64_t v11 = (v13 + 1);
    LODWORD(v32[1]) = v13 + 1;
    if (v13 >= v9) {
      goto LABEL_38;
    }
  }
  uint64_t v17 = 0;
  int v18 = LODWORD(v32[1]) + 1;
  int v19 = (int)cfa[1];
  int v20 = LODWORD(cfa[1]) + 7;
  int v21 = LODWORD(v32[1]) - 1;
  uint64_t v22 = 47;
  while (1)
  {
    int v23 = *((_DWORD *)v32 + v22);
    if ((int)v22 + v23 - 46 <= v13) {
      break;
    }
LABEL_31:
    --v17;
    v20 += v19;
    ++v22;
    if (v17 == -32) {
      goto LABEL_35;
    }
  }
  if (*v14 != *((_DWORD *)v35 + (v21 + (int)v17) % 33 + 1))
  {
    *((_DWORD *)v32 + v22) = v13 + v17;
    goto LABEL_31;
  }
  int v24 = v19 * (v18 - v23);
  int v26 = v24 + 7;
  BOOL v25 = v24 < -7;
  int v27 = v24 + 14;
  if (!v25) {
    int v27 = v26;
  }
  if (v20 / 8 + 8 >= v27 >> 3) {
    goto LABEL_31;
  }
  uint64_t v6 = OutputTrailingNonPatternRunThroughSampleNumber((uint64_t)v32, v23 - 1);
  if (!v6)
  {
    int v12 = 1 - v17;
    HIDWORD(cfa[1]) = 1 - v17;
    LODWORD(v35[0]) = *((_DWORD *)v32 + v22);
    int v13 = (int)v32[1];
    goto LABEL_35;
  }
LABEL_55:
  uint64_t v4 = v6;
LABEL_47:
  if (cfa[0]) {
    CFRelease(cfa[0]);
  }
  if (v32[0]) {
    CFRelease(v32[0]);
  }
  if (v33[0]) {
    CFRelease(v33[0]);
  }
  return v4;
}

uint64_t MakeReadyToWrite_csgp(uint64_t a1)
{
  CMBlockBufferRef theBuffer = 0;
  CMBlockBufferRef blockBufferOut = 0;
  CFTypeRef v21 = 0;
  CFTypeRef cf = 0;
  if (*(void *)(a1 + 96))
  {
    uint64_t v1 = 0;
    goto LABEL_40;
  }
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t WritableForBlockBuffer = CMBlockBufferCreateEmpty((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 8u, 0, &blockBufferOut);
  if (WritableForBlockBuffer) {
    goto LABEL_47;
  }
  CFAllocatorRef v5 = *(OpaqueCMBlockBuffer **)(a1 + 72);
  if (v5 && (int v6 = *(_DWORD *)(a1 + 48)) != 0)
  {
    uint64_t v19 = 0;
    uint64_t destination = 0;
    size_t v7 = 8 * (v6 - 1);
    CMBlockBufferCopyDataBytes(v5, v7, 8uLL, &destination);
    if (*(_DWORD *)(a1 + 48) >= 2u) {
      CMBlockBufferAppendBufferReference(blockBufferOut, *(CMBlockBufferRef *)(a1 + 72), 0, v7, 0);
    }
    uint64_t WritableForBlockBuffer = CMByteStreamCreateWritableForBlockBuffer();
    if (WritableForBlockBuffer) {
      goto LABEL_47;
    }
    CMByteStreamAppend();
  }
  else
  {
    uint64_t WritableForBlockBuffer = CMByteStreamCreateWritableForBlockBuffer();
    if (WritableForBlockBuffer) {
      goto LABEL_47;
    }
  }
  uint64_t WritableForBlockBuffer = CMBlockBufferCreateEmpty(v3, 8u, 0, &theBuffer);
  if (WritableForBlockBuffer) {
    goto LABEL_47;
  }
  uint64_t v8 = *(OpaqueCMBlockBuffer **)(a1 + 80);
  if (v8)
  {
    int v9 = *(_DWORD *)(a1 + 56);
    if (v9)
    {
      size_t v10 = 0;
      uint64_t destination = 0;
      HIDWORD(v11) = *(_DWORD *)(a1 + 60);
      LODWORD(v11) = HIDWORD(v11) - 4;
      int v12 = v9 - 1;
      size_t v13 = 0;
      switch((v11 >> 2))
      {
        case 0u:
          size_t v13 = (uint64_t)(v12 + (v12 < 0)) >> 1;
          goto LABEL_20;
        case 1u:
          size_t v13 = v12;
LABEL_20:
          size_t v10 = 1;
          break;
        case 2u:
        case 4u:
        case 5u:
        case 6u:
          break;
        case 3u:
          size_t v13 = 2 * v12;
          size_t v10 = 2;
          break;
        case 7u:
          size_t v13 = 4 * v12;
          size_t v10 = 4;
          break;
        default:
          size_t v13 = 0;
          break;
      }
      CMBlockBufferCopyDataBytes(v8, v13, v10, &v19);
      if (v13 && *(_DWORD *)(a1 + 56) >= 2u) {
        CMBlockBufferAppendBufferReference(theBuffer, *(CMBlockBufferRef *)(a1 + 80), 0, v13, 0);
      }
      uint64_t WritableForBlockBuffer = CMByteStreamCreateWritableForBlockBuffer();
      if (!WritableForBlockBuffer)
      {
        CMByteStreamAppend();
        goto LABEL_29;
      }
      goto LABEL_47;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 60) = 4;
    *(void *)(a1 + 88) = GetDescriptionIndex_csgp_4;
  }
  uint64_t WritableForBlockBuffer = CMByteStreamCreateWritableForBlockBuffer();
  if (!WritableForBlockBuffer)
  {
LABEL_29:
    size_t v14 = *(const void **)(a1 + 72);
    CMBlockBufferRef v15 = blockBufferOut;
    *(void *)(a1 + 72) = blockBufferOut;
    if (v15) {
      CFRetain(v15);
    }
    if (v14) {
      CFRelease(v14);
    }
    int32x4_t v16 = *(const void **)(a1 + 80);
    CMBlockBufferRef v17 = theBuffer;
    *(void *)(a1 + 80) = theBuffer;
    if (v17) {
      CFRetain(v17);
    }
    if (v16) {
      CFRelease(v16);
    }
    *(void *)(a1 + 96) = CFRetain(cf);
    uint64_t v1 = 0;
    *(void *)(a1 + 104) = CFRetain(v21);
    goto LABEL_38;
  }
LABEL_47:
  uint64_t v1 = WritableForBlockBuffer;
LABEL_38:
  if (v21) {
    CFRelease(v21);
  }
LABEL_40:
  if (cf) {
    CFRelease(cf);
  }
  if (theBuffer) {
    CFRelease(theBuffer);
  }
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  return v1;
}

uint64_t OutputTrailingPatternRunThroughSampleNumber(uint64_t a1, int a2)
{
  int v3 = a2 - *(_DWORD *)(a1 + 24) + 1;
  uint64_t result = AppendNewPattern(*(void *)(a1 + 32), *(unsigned int *)(a1 + 44), v3);
  if (!result)
  {
    if (*(int *)(a1 + 44) < 1)
    {
LABEL_7:
      uint64_t result = 0;
      *(_DWORD *)(a1 + 24) += v3;
    }
    else
    {
      int v5 = 0;
      while (1)
      {
        uint64_t v6 = 0;
        uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 16) + 48))();
        if (result) {
          break;
        }
        uint64_t result = AppendDescriptionIndexToCompactGroup(*(void *)(a1 + 32), v6);
        if (result) {
          break;
        }
        if (++v5 >= *(_DWORD *)(a1 + 44)) {
          goto LABEL_7;
        }
      }
    }
  }
  return result;
}

uint64_t OutputTrailingNonPatternRunThroughSampleNumber(uint64_t a1, int a2)
{
  int v2 = *(_DWORD *)(a1 + 24);
  BOOL v3 = __OFSUB__(a2, v2);
  int v4 = a2 - v2;
  if (v4 < 0 != v3) {
    return 0;
  }
  uint64_t result = AppendNewPattern(*(void *)(a1 + 32), (v4 + 1), v4 + 1);
  if (result) {
    return result;
  }
  if (*(_DWORD *)(a1 + 24) > a2) {
    return 0;
  }
  while (1)
  {
    uint64_t v9 = 0;
    uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 16) + 48))();
    if (result) {
      break;
    }
    uint64_t result = AppendDescriptionIndexToCompactGroup(*(void *)(a1 + 32), v9);
    if (result) {
      break;
    }
    int v8 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v8 + 1;
    if (v8 >= a2) {
      return 0;
    }
  }
  return result;
}

uint64_t MovieSampleGroupCreateNonCompactCopy(uint64_t a1, CFTypeRef *a2)
{
  CFAllocatorRef v4 = CFGetAllocator((CFTypeRef)a1);
  unint64_t v5 = *(void *)(a1 + 128);
  int v6 = *(_DWORD *)(a1 + 136);
  CFTypeRef v23 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v22 = 0;
  if (*(void *)(a1 + 32))
  {
    uint64_t v7 = 0;
    *a2 = CFRetain((CFTypeRef)a1);
    return v7;
  }
  CFAllocatorRef v8 = v4;
  if (*(unsigned char *)(a1 + 140))
  {
    uint64_t appended = MovieSampleGroupCreateForFragment(v4, v5, v6, *(void *)(a1 + 112), &v23);
    if (appended) {
      goto LABEL_33;
    }
  }
  else
  {
    uint64_t appended = MovieSampleGroupCreate(v4, v5, v6, (uint64_t *)&v23);
    if (appended)
    {
LABEL_33:
      uint64_t v7 = appended;
      goto LABEL_28;
    }
  }
  uint64_t appended = MovieSampleGroupAccessorCreate((void *)a1, (uint64_t *)&cf);
  if (appended) {
    goto LABEL_33;
  }
  uint64_t v10 = 52;
  if (!*(void *)(a1 + 72)) {
    uint64_t v10 = 24;
  }
  int v11 = *(_DWORD *)(a1 + v10);
  if (v11 >= 1)
  {
    int v12 = 0;
    unsigned int v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    int32x4_t v16 = (uint64_t (**)(CFTypeRef, void, uint64_t *))cf;
    while (1)
    {
      uint64_t v21 = 0;
      uint64_t appended = v16[6](v16, (v12 + 1), &v21);
      if (appended) {
        goto LABEL_33;
      }
      uint64_t v17 = v21;
      if (v12 && v15 == v21)
      {
        ++v13;
      }
      else
      {
        if (v13)
        {
          uint64_t appended = AppendSamplesWithDescriptionIndexToRegularGroup((uint64_t)v23, v13, v15 | (v14 << 32));
          if (appended) {
            goto LABEL_33;
          }
          uint64_t v17 = v21;
        }
        uint64_t v14 = HIDWORD(v21);
        unsigned int v13 = 1;
        uint64_t v15 = v17;
      }
      if (v11 == ++v12)
      {
        if (v13)
        {
          uint64_t appended = AppendSamplesWithDescriptionIndexToRegularGroup((uint64_t)v23, v13, v15 | (v14 << 32));
          if (appended) {
            goto LABEL_33;
          }
        }
        break;
      }
    }
  }
  uint64_t v18 = MovieSampleGroupCreateDescriptionArrayDeepCopy(v8, *(void *)(a1 + 16), &v22);
  CFTypeRef v19 = v22;
  if (v18)
  {
    uint64_t v7 = v18;
    if (!v22) {
      goto LABEL_28;
    }
  }
  else
  {
    uint64_t v7 = MovieSampleGroupSetDescriptionArray((uint64_t)v23, v22);
    if (!v7)
    {
      *a2 = v23;
      CFTypeRef v23 = 0;
    }
    if (!v19) {
      goto LABEL_28;
    }
  }
  CFRelease(v19);
LABEL_28:
  if (cf) {
    CFRelease(cf);
  }
  if (v23) {
    CFRelease(v23);
  }
  return v7;
}

double movieSampleGroup_Init(_OWORD *a1)
{
  double result = 0.0;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  return result;
}

void movieSampleGroup_Finalize(void *a1)
{
  int v2 = (const void *)a1[2];
  if (v2)
  {
    CFRelease(v2);
    a1[2] = 0;
  }
  BOOL v3 = (const void *)a1[4];
  if (v3)
  {
    CFRelease(v3);
    a1[4] = 0;
  }
  CFAllocatorRef v4 = (const void *)a1[5];
  if (v4)
  {
    CFRelease(v4);
    a1[5] = 0;
  }
  unint64_t v5 = (const void *)a1[9];
  if (v5)
  {
    CFRelease(v5);
    a1[9] = 0;
  }
  int v6 = (const void *)a1[12];
  if (v6)
  {
    CFRelease(v6);
    a1[12] = 0;
  }
  uint64_t v7 = (const void *)a1[10];
  if (v7)
  {
    CFRelease(v7);
    a1[10] = 0;
  }
  CFAllocatorRef v8 = (const void *)a1[13];
  if (v8)
  {
    CFRelease(v8);
    a1[13] = 0;
  }
  uint64_t v9 = (const void *)a1[14];
  if (v9)
  {
    CFRelease(v9);
    a1[14] = 0;
  }
  uint64_t v10 = (const void *)a1[15];
  if (v10)
  {
    CFRelease(v10);
    a1[15] = 0;
  }
}

__CFString *movieSampleGroup_CopyDebugDesc(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(0, 0);
  CFStringAppendFormat(Mutable, 0, @"MovieSampleGroup '%c%c%c%c' ", HIBYTE(*(_DWORD *)(a1 + 128)), BYTE2(*(_DWORD *)(a1 + 128)), BYTE1(*(_DWORD *)(a1 + 128)), *(_DWORD *)(a1 + 128));
  if (*(unsigned char *)(a1 + 136)) {
    CFStringAppendFormat(Mutable, 0, @"typeParameter %x ", *(unsigned int *)(a1 + 132));
  }
  if (*(void *)(a1 + 72))
  {
    if (*(unsigned char *)(a1 + 64)) {
      BOOL v3 = ", some fragment-local";
    }
    else {
      BOOL v3 = "";
    }
    CFStringAppendFormat(Mutable, 0, @"csgp: %d patterns, %d samples, %d %d-bit description indexes%s", *(unsigned int *)(a1 + 48), *(unsigned int *)(a1 + 52), *(unsigned int *)(a1 + 56), *(unsigned int *)(a1 + 60), v3);
  }
  else
  {
    CFStringAppendFormat(Mutable, 0, @"sbgp: %d entries, %d samples", *(unsigned int *)(a1 + 28), *(unsigned int *)(a1 + 24), v5, v6);
  }
  if (*(unsigned char *)(a1 + 140)) {
    CFStringAppendFormat(Mutable, 0, @" FragmentSampleGroup parent: %p", *(void *)(a1 + 112));
  }
  return Mutable;
}

uint64_t RegisterMovieSampleGroupCollectionType(uint64_t *a1)
{
  uint64_t result = _CFRuntimeRegisterClass();
  *a1 = result;
  return result;
}

uint64_t movieSampleGroupCollection_Init(uint64_t result)
{
  *(void *)(result + 16) = 0;
  return result;
}

void movieSampleGroupCollection_Finalize(uint64_t a1)
{
  int v2 = *(const void **)(a1 + 16);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 16) = 0;
  }
}

__CFString *movieSampleGroupCollection_CopyDebugDesc(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(0, 0);
  CFArrayRef Count = *(const __CFArray **)(a1 + 16);
  if (Count) {
    CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
  }
  CFStringAppendFormat(Mutable, 0, @"MovieSampleGroupCollection %d sampleGroups ", Count);
  return Mutable;
}

uint64_t RegisterMovieSampleGroupDescriptionArrayType(uint64_t *a1)
{
  uint64_t result = _CFRuntimeRegisterClass();
  *a1 = result;
  return result;
}

void *movieSampleGroupDescriptionArray_Init(void *result)
{
  result[2] = 0;
  result[3] = 0;
  result[4] = 0;
  return result;
}

void movieSampleGroupDescriptionArray_Finalize(uint64_t a1)
{
  int v2 = *(const void **)(a1 + 16);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 16) = 0;
  }
}

__CFString *movieSampleGroupDescriptionArray_CopyDebugDesc(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(0, 0);
  unsigned int v3 = *(_DWORD *)(a1 + 36);
  CFArrayRef Count = *(const __CFArray **)(a1 + 16);
  if (Count) {
    CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
  }
  CFStringAppendFormat(Mutable, 0, @"MovieSampleGroupDescriptionArray '%c%c%c%c' %d descriptions ", HIBYTE(v3), BYTE2(v3), BYTE1(v3), v3, Count);
  return Mutable;
}

uint64_t RegisterMovieSampleGroupAccessorType(uint64_t *a1)
{
  uint64_t result = _CFRuntimeRegisterClass();
  *a1 = result;
  return result;
}

double movieSampleGroupAccessor_Init(uint64_t a1)
{
  *(void *)(a1 + 48) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

void movieSampleGroupAccessor_Finalize(uint64_t a1)
{
  int v2 = *(const void **)(a1 + 16);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 16) = 0;
  }
}

__CFString *movieSampleGroupAccessor_CopyDebugDesc(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(0, 0);
  CFStringAppendFormat(Mutable, 0, @"MovieSampleGroupAccessor '%@' group %p", *(void *)(*(void *)(a1 + 16) + 120), *(void *)(a1 + 16));
  return Mutable;
}

uint64_t CompactSampleGroupAccessorGetDescriptionIndexForSample(uint64_t a1, int a2, uint64_t *a3)
{
  int v6 = *(_DWORD *)(a1 + 36);
  int v7 = v6;
  while (a2 < v7 || *(_DWORD *)(a1 + 32) + v7 <= a2)
  {
    if (v6 <= a2)
    {
      uint64_t v20 = 0;
      unsigned int v14 = *(_DWORD *)(a1 + 24) + 1;
      uint64_t v15 = *(void *)(a1 + 16);
      if (v14 >= *(_DWORD *)(v15 + 48))
      {
LABEL_11:
        uint64_t result = 0;
LABEL_12:
        uint64_t v19 = 0;
        goto LABEL_14;
      }
      uint64_t result = MovieSampleGroupGetPatternEntry(v15, v14, &v20, (_DWORD *)&v20 + 1);
      if (result) {
        goto LABEL_12;
      }
      int v16 = *(_DWORD *)(a1 + 24) + 1;
      int32x2_t v17 = vadd_s32(*(int32x2_t *)(a1 + 36), vrev64_s32(*(int32x2_t *)(a1 + 28)));
      *(int32x2_t *)(a1 + 36) = v17;
      unsigned int v18 = v20;
      *(_DWORD *)(a1 + 24) = v16;
      *(void *)(a1 + 28) = __PAIR64__(HIDWORD(v20), v18);
      int v7 = v17.i32[0];
    }
    else
    {
      uint64_t v20 = 0;
      int v8 = *(_DWORD *)(a1 + 24);
      if (v8 < 1) {
        goto LABEL_11;
      }
      uint64_t result = MovieSampleGroupGetPatternEntry(*(void *)(a1 + 16), v8 - 1, &v20, (_DWORD *)&v20 + 1);
      if (result) {
        goto LABEL_12;
      }
      int v10 = *(_DWORD *)(a1 + 24) - 1;
      int v12 = v20;
      int v11 = HIDWORD(v20);
      int v7 = *(_DWORD *)(a1 + 36) - HIDWORD(v20);
      int v13 = *(_DWORD *)(a1 + 40) - v20;
      *(_DWORD *)(a1 + 36) = v7;
      *(_DWORD *)(a1 + 40) = v13;
      *(_DWORD *)(a1 + 24) = v10;
      *(_DWORD *)(a1 + 28) = v12;
      *(_DWORD *)(a1 + 32) = v11;
    }
  }
  uint64_t v19 = (*(uint64_t (**)(void))(*(void *)(a1 + 16) + 88))();
  uint64_t result = 0;
LABEL_14:
  *a3 = v19;
  return result;
}

uint64_t RegularSampleGroupAccessorGetDescriptionIndexForSample(uint64_t a1, int a2, void *a3)
{
  int v19 = 0;
  int v6 = *(_DWORD *)(a1 + 28);
  while (1)
  {
    uint64_t v18 = 0;
    uint64_t Entry = MovieSampleGroupGetEntry(*(void *)(a1 + 16), *(_DWORD *)(a1 + 24), &v19, (uint64_t)&v18);
    if (Entry) {
      goto LABEL_15;
    }
    int v8 = *(_DWORD *)(a1 + 28);
    if (v8 <= a2 && v19 + v8 > a2) {
      break;
    }
    if (v6 <= a2)
    {
      int v13 = *(_DWORD *)(a1 + 24) + 1;
      if (v13 >= (int)MovieSampleGroupGetNumSampleToGroupTableEntries(*(void *)(a1 + 16))) {
        goto LABEL_15;
      }
      int v14 = *(_DWORD *)(a1 + 28) + v19;
      ++*(_DWORD *)(a1 + 24);
      *(_DWORD *)(a1 + 28) = v14;
    }
    else
    {
      int v17 = 0;
      int v9 = *(_DWORD *)(a1 + 24);
      int v10 = v9 - 1;
      if (v9 < 1)
      {
        uint64_t Entry = 0;
        goto LABEL_15;
      }
      *(_DWORD *)(a1 + 24) = v10;
      uint64_t v11 = MovieSampleGroupGetEntry(*(void *)(a1 + 16), v10, &v17, 0);
      if (v11) {
        goto LABEL_14;
      }
      int v12 = *(_DWORD *)(a1 + 28);
      if (v12 <= v17)
      {
        uint64_t v11 = FigSignalErrorAt();
LABEL_14:
        uint64_t Entry = v11;
LABEL_15:
        uint64_t v15 = 0;
        goto LABEL_16;
      }
      *(_DWORD *)(a1 + 28) = v12 - v17;
    }
  }
  uint64_t v15 = v18;
LABEL_16:
  *a3 = v15;
  return Entry;
}

uint64_t AppendNewPattern(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result = CMByteStreamAppend();
  if (!result)
  {
    int v6 = *(_DWORD *)(a1 + 52) + a3;
    ++*(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 52) = v6;
  }
  return result;
}

uint64_t AppendDescriptionIndexToCompactGroup(uint64_t a1, uint64_t a2)
{
  if (a2 >= 0x10000) {
    int v4 = 32;
  }
  else {
    int v4 = 16;
  }
  if (a2 >= 0x100) {
    int v5 = v4;
  }
  else {
    int v5 = 8;
  }
  if ((int)a2 >= 16) {
    int v6 = v5;
  }
  else {
    int v6 = 4;
  }
  if (a2 >= 0x8000) {
    int v7 = 32;
  }
  else {
    int v7 = 16;
  }
  if (a2 < 0x80) {
    int v7 = 8;
  }
  if ((int)a2 >= 8) {
    int v8 = v7;
  }
  else {
    int v8 = 4;
  }
  if (*(unsigned char *)(a1 + 64)) {
    unsigned int v9 = v8;
  }
  else {
    unsigned int v9 = v6;
  }
  unsigned int v10 = *(_DWORD *)(a1 + 60);
  if (v9 > v10)
  {
    uint64_t result = UpgradeCompactSampleGroupFieldSize(a1, v9);
    if (result) {
      return result;
    }
    unsigned int v10 = *(_DWORD *)(a1 + 60);
  }
  HIDWORD(v12) = v10;
  LODWORD(v12) = v10 - 4;
  switch((v12 >> 2))
  {
    case 0u:
      if (BYTE4(a2)) {
        char v13 = a2 | 8;
      }
      else {
        char v13 = a2;
      }
      unint64_t v14 = *(unsigned int *)(a1 + 56);
      if ((v14 & 1) == 0)
      {
        v24[1] = 16 * v13;
        goto LABEL_30;
      }
      v24[0] = 0;
      uint64_t v15 = *(void *)(a1 + 104);
      uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v16) {
        uint64_t v17 = v16;
      }
      else {
        uint64_t v17 = 0;
      }
      uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, unint64_t, unsigned char *, void))(v17 + 8);
      if (!v18) {
        return 4294954514;
      }
      unint64_t v19 = v14 >> 1;
      uint64_t result = v18(v15, 1, v19, v24, 0);
      if (!result)
      {
        v24[0] |= v13 & 0xF;
        uint64_t v20 = *(void *)(a1 + 104);
        uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v21) {
          uint64_t v22 = v21;
        }
        else {
          uint64_t v22 = 0;
        }
        CFTypeRef v23 = *(uint64_t (**)(uint64_t, uint64_t, unint64_t, unsigned char *, void))(v22 + 16);
        if (!v23) {
          return 4294954514;
        }
        uint64_t result = v23(v20, 1, v19, v24, 0);
        if (!result) {
          goto LABEL_31;
        }
      }
      break;
    case 1u:
    case 3u:
    case 7u:
LABEL_30:
      uint64_t result = CMByteStreamAppend();
      if (!result) {
        goto LABEL_31;
      }
      return result;
    default:
LABEL_31:
      uint64_t result = 0;
      ++*(_DWORD *)(a1 + 56);
      return result;
  }
  return result;
}

uint64_t FigAssetCacheInspectorGetClassID()
{
  return sFigAssetCacheInspectorClassID;
}

uint64_t RegisterFigAssetCacheInspectorBaseType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t FigAssetCacheInspectorGetTypeID()
{
  MEMORY[0x19970EE10](&FigAssetCacheInspectorGetClassID_sRegisterFigAssetCacheInspectorBaseTypeOnce, RegisterFigAssetCacheInspectorBaseType);

  return CMBaseClassGetCFTypeID();
}

uint64_t FigAssetCacheInspectorCreate(const void *a1, CFTypeRef cf, CFTypeRef *a3)
{
  CFURLRef url = 0;
  if (!cf || (CFTypeID v6 = CFGetTypeID(cf), v6 != FigAssetGetTypeID()) || !a3)
  {
    uint64_t v11 = FigSignalErrorAt();
LABEL_23:
    uint64_t v13 = v11;
    goto LABEL_19;
  }
  uint64_t CMBaseObject = FigAssetGetCMBaseObject(cf);
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  unsigned int v10 = *(uint64_t (**)(uint64_t, __CFString *, void, CFURLRef *))(v9 + 48);
  if (!v10)
  {
    uint64_t v13 = 4294954514;
    goto LABEL_19;
  }
  uint64_t v11 = v10(CMBaseObject, @"assetProperty_CreationURL", *MEMORY[0x1E4F1CF80], &url);
  if (v11) {
    goto LABEL_23;
  }
  if (url) {
    CFStringRef v12 = CFURLCopyPathExtension(url);
  }
  else {
    CFStringRef v12 = 0;
  }
  if (FigCFURLIsLocalResource() && !FigCFEqual()) {
    uint64_t File = FigAssetCacheInspectorCreate_File(a1, cf, a3);
  }
  else {
    uint64_t File = FigAssetCacheInspectorCreate_Streaming(a1, cf, a3);
  }
  uint64_t v13 = File;
  if (v12) {
    CFRelease(v12);
  }
LABEL_19:
  if (url) {
    CFRelease(url);
  }
  return v13;
}

CFStringRef FigAssetCacheInspectorCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigAssetCacheInspector %p]", a1);
}

uint64_t FigSecureStopArchivistCopyInstance(const __CFAllocator *a1, const __CFData *a2, const __CFURL *a3, void *a4)
{
  if (a4)
  {
    *a4 = 0;
    uint64_t v32 = 0;
    uint64_t v33 = &v32;
    uint64_t v34 = 0x2000000000;
    uint64_t v35 = 0;
    unsigned int v45 = 0;
    fssa_ensureArchivistSingletonContext((uint64_t)a1);
    uint64_t CFData = fssa_createKey(a1, a2, a3, &v45);
    if (CFData)
    {
      uint64_t v31 = (const void *)v33[3];
      if (v31) {
        CFRelease(v31);
      }
      unsigned int v10 = 0;
    }
    else
    {
      blocCFIndex k = (CFMutableDictionaryRef)MEMORY[0x1E4F143A8];
      uint64_t v37 = 0x40000000;
      int v38 = __fssa_copyArchivistGuts_block_invoke;
      uint64_t v39 = &unk_1E579CAB8;
      int v40 = &v32;
      CMTimeValue v41 = v45;
      dispatch_sync((dispatch_queue_t)sArchivistSingletonContext_1, &block);
      unsigned int v10 = (const void *)v33[3];
      v33[3] = 0;
    }
    if (v45) {
      CFRelease(v45);
    }
    _Block_object_dispose(&v32, 8);
    if (CFData) {
      goto LABEL_49;
    }
    if (v10)
    {
LABEL_47:
      uint64_t CFData = 0;
      *a4 = v10;
      return CFData;
    }
    CFTypeRef cf = 0;
    fssa_ensureArchivistSingletonContext((uint64_t)a1);
    uint64_t Key = fssa_createKey(a1, a2, a3, (__CFData **)&cf);
    if (Key)
    {
      uint64_t CFData = Key;
      unsigned int v10 = 0;
      goto LABEL_44;
    }
    CFTypeRef v43 = 0;
    FigSecureStopManagerGetClassID();
    uint64_t v12 = CMDerivedObjectCreate();
    if (!v12)
    {
      if (v43)
      {
        uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
        dispatch_queue_t v14 = dispatch_queue_create("com.apple.coremedia.securestoparchivist", 0);
        *uint64_t DerivedStorage = v14;
        if (v14)
        {
          if (a2) {
            CFTypeRef v15 = CFRetain(a2);
          }
          else {
            CFTypeRef v15 = 0;
          }
          DerivedStorage[2] = v15;
          if (a3) {
            CFTypeRef v16 = CFRetain(a3);
          }
          else {
            CFTypeRef v16 = 0;
          }
          DerivedStorage[3] = v16;
          uint64_t v32 = 0;
          CFErrorRef error = 0;
          unsigned int v45 = 0;
          blocCFIndex k = 0;
          uint64_t v37 = 0;
          int v38 = 0;
          uint64_t v17 = FigFileForkOpenMainByCFURL();
          if (v17)
          {
            uint64_t CFData = v17;
          }
          else
          {
            int DarwinFileDesc = FigFileGetDarwinFileDesc();
            flock(DarwinFileDesc, 1);
            uint64_t CFData = FigFileReadURLAndCreateCFData();
            int v19 = FigFileGetDarwinFileDesc();
            flock(v19, 8);
            if (!CFData)
            {
              CFAllocatorRef v20 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
              CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
              if (!Mutable)
              {
                uint64_t CFData = FigSignalErrorAt();
                CFPropertyListRef v23 = 0;
                goto LABEL_31;
              }
              if (CFDataGetLength(v45) > 0)
              {
                uint64_t v22 = DerivedStorage[2];
                blocCFIndex k = Mutable;
                uint64_t v37 = v22;
                LOBYTE(v38) = 0;
                CFPropertyListRef v23 = CFPropertyListCreateWithData(v20, v45, 1uLL, 0, &error);
                if (!error || (uint64_t CFData = CFErrorGetCode(error), !CFData))
                {
                  if (v23)
                  {
                    CFTypeID v24 = CFGetTypeID(v23);
                    if (v24 == CFDictionaryGetTypeID())
                    {
                      CFDictionaryApplyFunction((CFDictionaryRef)v23, (CFDictionaryApplierFunction)fssa_createRecordAndAddToInMemoryDatabase, &block);
                      int v25 = v38;
                      DerivedStorage[1] = Mutable;
                      if (v25) {
                        uint64_t CFData = fssa_synchronizeInMemoryDatabaseToDisk((uint64_t)DerivedStorage);
                      }
                      else {
                        uint64_t CFData = 0;
                      }
                      goto LABEL_30;
                    }
                  }
                  uint64_t CFData = FigSignalErrorAt();
                }
LABEL_31:
                FigFileForkClose();
                if (v45) {
                  CFRelease(v45);
                }
                if (error) {
                  CFRelease(error);
                }
                if (v23) {
                  CFRelease(v23);
                }
                if (Mutable) {
                  CFRelease(Mutable);
                }
                if (!CFData)
                {
                  CFTypeRef v26 = v43;
LABEL_41:
                  uint64_t v27 = FigCFWeakReferenceHolderCreateWithReferencedObject();
                  if (v27)
                  {
                    CFAllocatorRef v28 = (const void *)v27;
                    blocCFIndex k = (CFMutableDictionaryRef)MEMORY[0x1E4F143A8];
                    uint64_t v37 = 0x40000000;
                    int v38 = __fssa_createArchivist_block_invoke;
                    uint64_t v39 = &__block_descriptor_tmp_3_5;
                    int v40 = (uint64_t *)cf;
                    CMTimeValue v41 = (__CFData *)v27;
                    dispatch_sync((dispatch_queue_t)sArchivistSingletonContext_1, &block);
                    uint64_t CFData = 0;
                    CFTypeRef v29 = v26;
                    CFTypeRef v26 = v28;
LABEL_43:
                    CFRelease(v26);
                    unsigned int v10 = v29;
                    goto LABEL_44;
                  }
                  uint64_t CFData = FigSignalErrorAt();
                  CFTypeRef v29 = 0;
                  unsigned int v10 = 0;
                  if (v26) {
                    goto LABEL_43;
                  }
LABEL_44:
                  if (cf) {
                    CFRelease(cf);
                  }
                  if (!CFData) {
                    goto LABEL_47;
                  }
LABEL_49:
                  if (v10) {
                    CFRelease(v10);
                  }
                  return CFData;
                }
LABEL_59:
                if (v43) {
                  CFRelease(v43);
                }
                CFTypeRef v26 = 0;
                unsigned int v10 = 0;
                if (CFData) {
                  goto LABEL_44;
                }
                goto LABEL_41;
              }
              uint64_t CFData = 0;
              CFPropertyListRef v23 = 0;
              DerivedStorage[1] = Mutable;
LABEL_30:
              CFMutableDictionaryRef Mutable = 0;
              goto LABEL_31;
            }
          }
          CFPropertyListRef v23 = 0;
          goto LABEL_30;
        }
      }
      uint64_t v12 = FigSignalErrorAt();
    }
    uint64_t CFData = v12;
    goto LABEL_59;
  }
  return FigSignalErrorAt();
}

uint64_t fssr_createRecordFromSerializedData(CFDataRef data, void *a2)
{
  CFErrorRef err = 0;
  unsigned int v10 = 0;
  CFPropertyListRef v3 = CFPropertyListCreateWithData((CFAllocatorRef)*MEMORY[0x1E4F1CF80], data, 1uLL, 0, &err);
  if (err && (uint64_t Code = CFErrorGetCode(err), Code))
  {
    if (v3) {
      goto LABEL_7;
    }
  }
  else if (v3)
  {
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 != CFDictionaryGetTypeID())
    {
      uint64_t Code = FigSignalErrorAt();
      goto LABEL_7;
    }
    uint64_t Code = fssr_createSecureStopRecordFromDictionary((const __CFDictionary *)v3, &v10);
    CFTypeID v6 = v10;
    if (!Code)
    {
      *a2 = v10;
LABEL_7:
      int v7 = v3;
LABEL_8:
      CFRelease(v7);
      goto LABEL_9;
    }
    CFRelease(v3);
    if (v6)
    {
      int v7 = v6;
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t Code = FigSignalErrorAt();
  }
LABEL_9:
  if (err) {
    CFRelease(err);
  }
  return Code;
}

void fssa_ensureArchivistSingletonContext(uint64_t a1)
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __fssa_ensureArchivistSingletonContext_block_invoke;
  block[3] = &__block_descriptor_tmp_2_2;
  block[4] = a1;
  if (fssa_ensureArchivistSingletonContext_once != -1) {
    dispatch_once(&fssa_ensureArchivistSingletonContext_once, block);
  }
}

uint64_t fssa_createKey(const __CFAllocator *a1, CFDataRef theData, const __CFURL *a3, __CFData **a4)
{
  CFMutableDataRef MutableCopy = CFDataCreateMutableCopy(a1, 0, theData);
  if (MutableCopy)
  {
    uint64_t v8 = MutableCopy;
    CFDataRef v9 = CFURLCreateData(a1, a3, 0x8000100u, 1u);
    if (v9)
    {
      CFDataRef v10 = v9;
      BytePtr = CFDataGetBytePtr(v9);
      CFIndex Length = CFDataGetLength(v10);
      CFDataAppendBytes(v8, BytePtr, Length);
      *a4 = v8;
      CFRelease(v10);
      return 0;
    }
    else
    {
      uint64_t v14 = FigSignalErrorAt();
      CFRelease(v8);
      return v14;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void __fssa_copyArchivistGuts_block_invoke(uint64_t a1)
{
  if (CFDictionaryGetValue((CFDictionaryRef)sArchivistSingletonContext_0, *(const void **)(a1 + 40)))
  {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = FigCFWeakReferenceHolderCopyReferencedObject();
    if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
    {
      int v2 = (__CFDictionary *)sArchivistSingletonContext_0;
      CFPropertyListRef v3 = *(const void **)(a1 + 40);
      CFDictionaryRemoveValue(v2, v3);
    }
  }
}

dispatch_queue_t __fssa_ensureArchivistSingletonContext_block_invoke(uint64_t a1)
{
  sArchivistSingletonContext_0 = (uint64_t)CFDictionaryCreateMutable(*(CFAllocatorRef *)(a1 + 32), 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!sArchivistSingletonContext_0
    || (dispatch_queue_t result = dispatch_queue_create("com.apple.coremedia.securestoparchivist.singletoncontext", 0),
        (sArchivistSingletonContext_1 = (uint64_t)result) == 0))
  {
    return (dispatch_queue_t)FigSignalErrorAt();
  }
  return result;
}

void __fssa_createArchivist_block_invoke(uint64_t a1)
{
}

void fssa_finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = *(const void **)(DerivedStorage + 8);
  if (v1)
  {
    CFRelease(v1);
    *(void *)(DerivedStorage + 8) = 0;
  }
  int v2 = *(const void **)(DerivedStorage + 16);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(DerivedStorage + 16) = 0;
  }
  CFPropertyListRef v3 = *(const void **)(DerivedStorage + 24);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(DerivedStorage + 24) = 0;
  }
  uint64_t v4 = *(NSObject **)DerivedStorage;

  dispatch_release(v4);
}

__CFString *fssa_copyDebugDescription(const void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(v2, 0);
  CFIndex v4 = CFGetRetainCount(a1);
  CFAllocatorRef v5 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, @"<FigSecureStopArchivist %p retainCount: %ld allocator: %p>", a1, v4, v5);
  return Mutable;
}

uint64_t fssa_fbo_copyRecords(uint64_t a1, void *a2)
{
  uint64_t v16 = 0;
  uint64_t v17 = &v16;
  uint64_t v18 = 0x2000000000;
  int v19 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = &v12;
  uint64_t v14 = 0x2000000000;
  uint64_t v15 = 0;
  uint64_t DerivedStorage = (NSObject **)CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    *a2 = 0;
    CFIndex v4 = *DerivedStorage;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __fssa_fbo_copyRecords_block_invoke;
    block[3] = &unk_1E579CB20;
    block[4] = &v12;
    void block[5] = &v16;
    void block[6] = DerivedStorage;
    dispatch_sync(v4, block);
    CFAllocatorRef v5 = v17;
    CFTypeID v6 = v13;
    if (!*((_DWORD *)v17 + 6))
    {
      *a2 = v13[3];
      v6[3] = 0;
    }
  }
  else
  {
    int v10 = FigSignalErrorAt();
    CFAllocatorRef v5 = v17;
    *((_DWORD *)v17 + 6) = v10;
    CFTypeID v6 = v13;
  }
  int v7 = (const void *)v6[3];
  if (v7)
  {
    CFRelease(v7);
    CFAllocatorRef v5 = v17;
  }
  uint64_t v8 = *((unsigned int *)v5 + 6);
  _Block_object_dispose(&v12, 8);
  _Block_object_dispose(&v16, 8);
  return v8;
}

uint64_t fssa_fbo_removeRecords(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = 0;
  CFDataRef v9 = &v8;
  uint64_t v10 = 0x2000000000;
  int v11 = 0;
  uint64_t DerivedStorage = (NSObject **)CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    CFIndex v4 = *DerivedStorage;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __fssa_fbo_removeRecords_block_invoke;
    block[3] = &unk_1E579CB48;
    block[4] = &v8;
    void block[5] = a2;
    void block[6] = DerivedStorage;
    dispatch_sync(v4, block);
    uint64_t v5 = *((unsigned int *)v9 + 6);
  }
  else
  {
    uint64_t v5 = FigSignalErrorAt();
    *((_DWORD *)v9 + 6) = v5;
  }
  _Block_object_dispose(&v8, 8);
  return v5;
}

uint64_t fssa_fbo_updateRecord(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v20 = 0;
  uint64_t v21 = &v20;
  uint64_t v22 = 0x2000000000;
  int v23 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a3 | a4 && a8)
  {
    uint64_t v15 = (NSObject **)DerivedStorage;
    if (FigCFEqual())
    {
      uint64_t v16 = *v15;
      v19[0] = MEMORY[0x1E4F143A8];
      v19[1] = 0x40000000;
      v19[2] = __fssa_fbo_updateRecord_block_invoke;
      _OWORD v19[3] = &unk_1E579CB70;
      int v19[4] = &v20;
      v19[5] = v15;
      v19[6] = a3;
      v19[7] = a4;
      v19[8] = a5;
      v19[9] = a6;
      v19[10] = a7;
      v19[11] = a8;
      dispatch_sync(v16, v19);
    }
  }
  else
  {
    *((_DWORD *)v21 + 6) = FigSignalErrorAt();
  }
  uint64_t v17 = *((unsigned int *)v21 + 6);
  _Block_object_dispose(&v20, 8);
  return v17;
}

uint64_t fssa_fbo_finalizeRecord(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v21 = 0;
  uint64_t v22 = &v21;
  uint64_t v23 = 0x2000000000;
  int v24 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a3 | a4 && a6 && a4 | a7)
  {
    uint64_t v13 = (NSObject **)DerivedStorage;
    if (FigCFEqual())
    {
      uint64_t v14 = *v13;
      v19[0] = MEMORY[0x1E4F143A8];
      if (a4) {
        BOOL v15 = a7 == 0;
      }
      else {
        BOOL v15 = 0;
      }
      v19[1] = 0x40000000;
      v19[2] = __fssa_fbo_finalizeRecord_block_invoke;
      _OWORD v19[3] = &unk_1E579CBA8;
      char v16 = v15;
      int v19[4] = &v21;
      v19[5] = v13;
      v19[6] = a3;
      v19[7] = a4;
      v19[8] = a5;
      v19[9] = a6;
      v19[10] = a7;
      char v20 = v16;
      dispatch_sync(v14, v19);
    }
  }
  else
  {
    *((_DWORD *)v22 + 6) = FigSignalErrorAt();
  }
  uint64_t v17 = *((unsigned int *)v22 + 6);
  _Block_object_dispose(&v21, 8);
  return v17;
}

void __fssa_fbo_copyRecords_block_invoke(void *a1)
{
  *(void *)(*(void *)(a1[4] + 8) + 24) = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFAllocatorRef v2 = *(void **)(*(void *)(a1[4] + 8) + 24);
  if (v2)
  {
    CFDictionaryRef v3 = *(const __CFDictionary **)(a1[6] + 8);
    CFDictionaryApplyFunction(v3, (CFDictionaryApplierFunction)fssa_serializeRecordAndAddToOutputDictionary, v2);
  }
  else
  {
    *(_DWORD *)(*(void *)(a1[5] + 8) + 24) = FigSignalErrorAt();
  }
}

void fssa_serializeRecordAndAddToOutputDictionary(const void *a1, void *a2, __CFDictionary *a3)
{
  if (!a2[3]) {
    return;
  }
  CFErrorRef err = 0;
  CFPropertyListRef propertyList = 0;
  int DictionaryFromSecureStopRecord = fssr_createDictionaryFromSecureStopRecord(a2, 1, (__CFDictionary **)&propertyList);
  CFPropertyListRef v6 = propertyList;
  if (!DictionaryFromSecureStopRecord)
  {
    CFDataRef v7 = CFPropertyListCreateData((CFAllocatorRef)*MEMORY[0x1E4F1CF80], propertyList, kCFPropertyListXMLFormat_v1_0, 0, &err);
    if (!err || (int Code = CFErrorGetCode(err)) == 0)
    {
      if (v7)
      {
        int Code = 0;
        CFDataRef v9 = v7;
        goto LABEL_7;
      }
      int Code = FigSignalErrorAt();
    }
    CFDataRef v9 = 0;
    if (!v6) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  int Code = DictionaryFromSecureStopRecord;
  CFDataRef v9 = 0;
LABEL_7:
  CFDataRef v7 = 0;
  if (v6) {
LABEL_8:
  }
    CFRelease(v6);
LABEL_9:
  if (v7) {
    CFRelease(v7);
  }
  if (err) {
    CFRelease(err);
  }
  if (!Code) {
    CFDictionarySetValue(a3, a1, v9);
  }
  if (v9) {
    CFRelease(v9);
  }
}

uint64_t fssr_createDictionaryFromSecureStopRecord(void *a1, int a2, __CFDictionary **a3)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    CFDataRef v7 = Mutable;
    uint64_t v8 = (const void *)a1[2];
    if (v8) {
      CFDictionarySetValue(Mutable, @"SessionLifespanSPC", v8);
    }
    CFDataRef v9 = (const void *)a1[3];
    if (v9) {
      CFDictionarySetValue(v7, @"SecureStopSPC", v9);
    }
    uint64_t v10 = (const void *)a1[6];
    if (v10) {
      CFDictionarySetValue(v7, @"PlaybackSessionID", v10);
    }
    int v11 = (const void *)a1[7];
    if (v11) {
      CFDictionarySetValue(v7, @"AirPlayPlaybackSessionID", v11);
    }
    uint64_t v12 = (const void *)a1[10];
    if (v12) {
      CFDictionarySetValue(v7, @"AbnormallyTerminated", v12);
    }
    if (a2)
    {
      if (!a1[6]) {
        FigCFDictionarySetValue();
      }
    }
    else
    {
      uint64_t v13 = (const void *)a1[4];
      if (v13) {
        CFDictionarySetValue(v7, @"ModifiedDate", v13);
      }
      uint64_t v14 = (const void *)a1[5];
      if (v14) {
        CFDictionarySetValue(v7, @"VersionList", v14);
      }
      BOOL v15 = (const void *)a1[8];
      if (v15) {
        CFDictionarySetValue(v7, @"APIProviderID", v15);
      }
      char v16 = (const void *)a1[9];
      if (v16) {
        CFDictionarySetValue(v7, @"AssetID", v16);
      }
    }
    *a3 = v7;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void __fssa_fbo_removeRecords_block_invoke(uint64_t a1)
{
  CFArrayRef v2 = *(const __CFArray **)(a1 + 40);
  if (v2)
  {
    CFIndex Count = CFArrayGetCount(v2);
    if (Count >= 1)
    {
      CFIndex v4 = Count;
      CFIndex v5 = 0;
      while (1)
      {
        CFDataRef ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), v5);
        CFDataRef v9 = 0;
        *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = fssr_createRecordFromSerializedData(ValueAtIndex, &v9);
        if (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
          break;
        }
        CFDataRef v7 = v9;
        CFDictionaryRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(*(void *)(a1 + 48) + 8), v9[6]);
        CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(*(void *)(a1 + 48) + 8), v7[6]);
        CFRelease(v7);
        if (v4 == ++v5)
        {
          if (Value) {
            *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = fssa_synchronizeInMemoryDatabaseToDisk(*(void *)(a1 + 48));
          }
          return;
        }
      }
    }
  }
}

uint64_t fssa_synchronizeInMemoryDatabaseToDisk(uint64_t a1)
{
  err[0] = 0;
  err[1] = 0;
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
LABEL_38:
    uint64_t v16 = FigSignalErrorAt();
    goto LABEL_39;
  }
  int64_t Count = CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 8));
  if (Count < 33)
  {
    CFPropertyListRef v6 = 0;
    CFDataRef v7 = 0;
    CFArrayRef v8 = 0;
    CFArrayRef v10 = 0;
LABEL_11:
    uint64_t Code = 0;
    goto LABEL_12;
  }
  size_t v5 = Count;
  CFPropertyListRef v6 = (const void **)malloc_type_calloc(Count, 8uLL, 0x6004044C4A2DFuLL);
  if (!v6)
  {
    CFDataRef v7 = 0;
    goto LABEL_34;
  }
  CFDataRef v7 = (const void **)malloc_type_calloc(v5, 8uLL, 0x2004093837F09uLL);
  if (!v7)
  {
LABEL_34:
    CFArrayRef v8 = 0;
    goto LABEL_35;
  }
  CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(a1 + 8), v6, v7);
  CFArrayRef v8 = CFArrayCreate(v2, v7, v5, MEMORY[0x1E4F1D510]);
  if (v8)
  {
    CFMutableDataRef MutableCopy = CFArrayCreateMutableCopy(v2, 0, v8);
    if (MutableCopy)
    {
      CFArrayRef v10 = MutableCopy;
      v23.CFIndex location = 0;
      v23.size_t length = v5;
      CFArraySortValues(MutableCopy, v23, (CFComparatorFunction)fssa_compareModifiedDate, 0);
      CFIndex v11 = 0;
      size_t v12 = v5 - 32;
      do
      {
        CFDataRef ValueAtIndex = CFArrayGetValueAtIndex(v10, v11);
        uint64_t v14 = (const void *)ValueAtIndex[6];
        if (!v14) {
          uint64_t v14 = (const void *)ValueAtIndex[7];
        }
        CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 8), v14);
        ++v11;
      }
      while (v12 != v11);
      goto LABEL_11;
    }
  }
LABEL_35:
  uint64_t Code = FigSignalErrorAt();
  CFArrayRef v10 = 0;
LABEL_12:
  free(v6);
  free(v7);
  if (v8) {
    CFRelease(v8);
  }
  if (v10) {
    CFRelease(v10);
  }
  if (Code) {
    goto LABEL_40;
  }
  CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 8), (CFDictionaryApplierFunction)fssa_createRecordDictionaryAndAddToOutputDictionary, Mutable);
  uint64_t v16 = FigFileForkOpenMainByCFURL();
  if (v16)
  {
LABEL_39:
    uint64_t Code = v16;
LABEL_40:
    FigFileForkClose();
    goto LABEL_26;
  }
  CFDataRef Data = CFPropertyListCreateData(v2, Mutable, kCFPropertyListBinaryFormat_v1_0, 0, err);
  if (!err[0] || (uint64_t Code = CFErrorGetCode(err[0]), !Code))
  {
    if (Data)
    {
      int DarwinFileDesc = FigFileGetDarwinFileDesc();
      flock(DarwinFileDesc, 2);
      CFDataGetBytePtr(Data);
      CFDataGetLength(Data);
      uint64_t v19 = FigFileForkWrite();
      if (v19)
      {
        uint64_t Code = v19;
      }
      else
      {
        CFDataGetLength(Data);
        uint64_t Code = FigFileForkTruncate();
        if (!Code)
        {
          int v20 = FigFileGetDarwinFileDesc();
          flock(v20, 8);
        }
      }
      FigFileForkClose();
      goto LABEL_25;
    }
    goto LABEL_38;
  }
  FigFileForkClose();
  if (Data) {
LABEL_25:
  }
    CFRelease(Data);
LABEL_26:
  if (err[0]) {
    CFRelease(err[0]);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  return Code;
}

void fssa_createRecordDictionaryAndAddToOutputDictionary(const void *a1, void *a2, __CFDictionary *a3)
{
  CMTimeValue value = 0;
  int DictionaryFromSecureStopRecord = fssr_createDictionaryFromSecureStopRecord(a2, 0, (__CFDictionary **)&value);
  CFPropertyListRef v6 = value;
  if (!DictionaryFromSecureStopRecord) {
    CFDictionarySetValue(a3, a1, value);
  }
  if (v6)
  {
    CFRelease(v6);
  }
}

CFComparisonResult fssa_compareModifiedDate(uint64_t a1, uint64_t a2)
{
  return CFDateCompare(*(CFDateRef *)(a1 + 32), *(CFDateRef *)(a2 + 32), 0);
}

uint64_t __fssa_fbo_updateRecord_block_invoke(uint64_t a1)
{
  uint64_t result = fssa_updateRecordGuts(*(void *)(a1 + 40), *(const void **)(a1 + 48), *(const void **)(a1 + 56), *(const void **)(a1 + 64), *(const void **)(a1 + 72), *(const void **)(a1 + 80), *(const void **)(a1 + 88), 0, 0);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t fssa_updateRecordGuts(uint64_t a1, const void *a2, const void *a3, const void *a4, const void *a5, const void *a6, const void *a7, const void *a8, char a9)
{
  if (a3) {
    CFDataRef v9 = a3;
  }
  else {
    CFDataRef v9 = a2;
  }
  if (a1)
  {
    uint64_t v16 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 8), v9);
    if (v16)
    {
      uint64_t v17 = (void *)CFRetain(v16);
      CMTimeValue value = v17;
      if (v17)
      {
        uint64_t v18 = v17;
        CFAllocatorRef v19 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        goto LABEL_11;
      }
    }
    else
    {
      CMTimeValue value = 0;
    }
    CFAllocatorRef v19 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    uint64_t SecureStopRecord = fssr_createSecureStopRecord(*MEMORY[0x1E4F1CF80], (uint64_t *)&value);
    uint64_t v18 = value;
    if (SecureStopRecord)
    {
      uint64_t v34 = SecureStopRecord;
      if (!value) {
        return v34;
      }
      uint64_t v35 = value;
      goto LABEL_55;
    }
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 8), v9, value);
LABEL_11:
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    CFDateRef v22 = CFDateCreate(v19, Current);
    CFRange v23 = (const void *)v18[2];
    CMTime v18[2] = a7;
    if (a7) {
      CFRetain(a7);
    }
    if (v23) {
      CFRelease(v23);
    }
    int v24 = (const void *)v18[3];
    v18[3] = a8;
    if (a8) {
      CFRetain(a8);
    }
    if (v24) {
      CFRelease(v24);
    }
    int v25 = (const void *)v18[4];
    v18[4] = v22;
    if (v22) {
      CFRetain(v22);
    }
    if (v25) {
      CFRelease(v25);
    }
    CFTypeRef v26 = (const void *)v18[5];
    v18[5] = a5;
    if (a5) {
      CFRetain(a5);
    }
    if (v26) {
      CFRelease(v26);
    }
    uint64_t v27 = (const void *)v18[6];
    v18[6] = a2;
    if (a2) {
      CFRetain(a2);
    }
    if (v27) {
      CFRelease(v27);
    }
    CFAllocatorRef v28 = (const void *)v18[7];
    v18[7] = a3;
    if (a3) {
      CFRetain(a3);
    }
    if (v28) {
      CFRelease(v28);
    }
    CFTypeRef v29 = (const void *)v18[8];
    v18[8] = a6;
    if (a6) {
      CFRetain(a6);
    }
    if (v29) {
      CFRelease(v29);
    }
    CFTypeRef v30 = (const void *)v18[9];
    v18[9] = a4;
    if (a4) {
      CFRetain(a4);
    }
    if (v30) {
      CFRelease(v30);
    }
    if (a9)
    {
      uint64_t v31 = (const void *)v18[10];
      uint64_t v32 = (const void *)*MEMORY[0x1E4F1CFD0];
      v18[10] = *MEMORY[0x1E4F1CFD0];
      if (v32) {
        CFRetain(v32);
      }
      if (v31) {
        CFRelease(v31);
      }
    }
    if (a3 && a8)
    {
      if (!a2)
      {
        uint64_t v33 = FigSignalErrorAt();
        goto LABEL_53;
      }
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 8), a2, v18);
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 8), a3);
    }
    uint64_t v33 = fssa_synchronizeInMemoryDatabaseToDisk(a1);
LABEL_53:
    uint64_t v34 = v33;
    CFRelease(v18);
    if (!v22) {
      return v34;
    }
    uint64_t v35 = v22;
LABEL_55:
    CFRelease(v35);
    return v34;
  }

  return FigSignalErrorAt();
}

uint64_t fssr_createSecureStopRecord(uint64_t a1, uint64_t *a2)
{
  long long v6 = xmmword_1E579CB90;
  if (FigSecureStopRecordGetTypeID_once != -1) {
    dispatch_once_f(&FigSecureStopRecordGetTypeID_once, &v6, (dispatch_function_t)FigSecureStopRecordClassRegisterOnce);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (!Instance) {
    return 4294949555;
  }
  uint64_t v4 = Instance;
  uint64_t result = 0;
  *a2 = v4;
  return result;
}

double FigSecureStopRecordInit(uint64_t a1)
{
  *(void *)(a1 + 80) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

void FigSecureStopRecordFinalize(void *a1)
{
  CFAllocatorRef v2 = (const void *)a1[2];
  if (v2)
  {
    CFRelease(v2);
    a1[2] = 0;
  }
  CFDictionaryRef v3 = (const void *)a1[3];
  if (v3)
  {
    CFRelease(v3);
    a1[3] = 0;
  }
  uint64_t v4 = (const void *)a1[4];
  if (v4)
  {
    CFRelease(v4);
    a1[4] = 0;
  }
  size_t v5 = (const void *)a1[5];
  if (v5)
  {
    CFRelease(v5);
    a1[5] = 0;
  }
  long long v6 = (const void *)a1[6];
  if (v6)
  {
    CFRelease(v6);
    a1[6] = 0;
  }
  CFDataRef v7 = (const void *)a1[7];
  if (v7)
  {
    CFRelease(v7);
    a1[7] = 0;
  }
  CFArrayRef v8 = (const void *)a1[8];
  if (v8)
  {
    CFRelease(v8);
    a1[8] = 0;
  }
  CFDataRef v9 = (const void *)a1[9];
  if (v9)
  {
    CFRelease(v9);
    a1[9] = 0;
  }
  CFArrayRef v10 = (const void *)a1[10];
  if (v10)
  {
    CFRelease(v10);
    a1[10] = 0;
  }
}

uint64_t FigSecureStopRecordClassRegisterOnce(uint64_t a1)
{
  uint64_t result = _CFRuntimeRegisterClass();
  **(void **)(a1 + 8) = result;
  return result;
}

uint64_t __fssa_fbo_finalizeRecord_block_invoke(uint64_t a1)
{
  uint64_t result = fssa_updateRecordGuts(*(void *)(a1 + 40), *(const void **)(a1 + 48), *(const void **)(a1 + 56), 0, 0, *(const void **)(a1 + 64), *(const void **)(a1 + 72), *(const void **)(a1 + 80), *(unsigned char *)(a1 + 88));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void fssa_createRecordAndAddToInMemoryDatabase(const void *a1, const __CFDictionary *a2, uint64_t a3)
{
  size_t v5 = *(__CFDictionary **)a3;
  CFDataRef v6 = *(const __CFData **)(a3 + 8);
  CMTimeValue value = 0;
  int v7 = fssr_createSecureStopRecordFromDictionary(a2, &value);
  CFArrayRef v8 = value;
  if (v7)
  {
    if (!value) {
      return;
    }
    goto LABEL_26;
  }
  if (*((void *)value + 3))
  {
LABEL_30:
    CFDictionarySetValue(v5, a1, v8);
    BOOL v20 = *(unsigned char *)(a3 + 16) != 0;
    goto LABEL_25;
  }
  if (*((void *)value + 6))
  {
    if (FigCFEqual())
    {
      uint64_t v9 = PKDKeyManagerCreateForMSE(*MEMORY[0x1E4F1CF80], 0);
    }
    else
    {
      if (!FigCFEqual())
      {
LABEL_29:
        if (FigSignalErrorAt()) {
          goto LABEL_26;
        }
        goto LABEL_30;
      }
      uint64_t v9 = PKDKeyManagerCreateForPastis(*MEMORY[0x1E4F1CF80], 0);
    }
    uint64_t v17 = (const void *)v9;
    if (v9)
    {
      if (KeyManagerCreateStopSPC(v9, v6, *((const __CFArray **)v8 + 5), *((const void **)v8 + 9), *((CFStringRef *)v8 + 6), (void *)v8 + 3))
      {
        CFRelease(v17);
        goto LABEL_26;
      }
      uint64_t v18 = (const void *)*((void *)v8 + 5);
      if (v18)
      {
        CFRelease(v18);
        *((void *)v8 + 5) = 0;
      }
      CFAllocatorRef v19 = (const void *)*((void *)v8 + 9);
      if (v19)
      {
        CFRelease(v19);
        *((void *)v8 + 9) = 0;
      }
      uint64_t v16 = v17;
      goto LABEL_23;
    }
    goto LABEL_29;
  }
  if (!*((void *)value + 7)) {
    goto LABEL_24;
  }
  CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  CFDateRef v12 = CFDateCreate(v10, Current);
  double TimeIntervalSinceDate = CFDateGetTimeIntervalSinceDate(v12, *((CFDateRef *)v8 + 4));
  if (v12) {
    CFRelease(v12);
  }
  if (TimeIntervalSinceDate <= 1296000.0) {
    goto LABEL_24;
  }
  uint64_t v14 = (const void *)*((void *)v8 + 10);
  BOOL v15 = (const void *)*MEMORY[0x1E4F1CFD0];
  *((void *)v8 + 10) = *MEMORY[0x1E4F1CFD0];
  if (v15) {
    CFRetain(v15);
  }
  if (!v14) {
    goto LABEL_24;
  }
  uint64_t v16 = v14;
LABEL_23:
  CFRelease(v16);
LABEL_24:
  CFDictionarySetValue(v5, a1, v8);
  BOOL v20 = 1;
LABEL_25:
  *(unsigned char *)(a3 + 16) = v20;
LABEL_26:

  CFRelease(v8);
}

uint64_t fssr_createSecureStopRecordFromDictionary(const __CFDictionary *a1, void *a2)
{
  CFTypeRef cf = 0;
  uint64_t SecureStopRecord = fssr_createSecureStopRecord(*MEMORY[0x1E4F1CF80], (uint64_t *)&cf);
  size_t v5 = cf;
  if (SecureStopRecord)
  {
    if (cf) {
      CFRelease(cf);
    }
  }
  else
  {
    CFDictionaryRef Value = CFDictionaryGetValue(a1, @"SessionLifespanSPC");
    if (Value) {
      CFDictionaryRef Value = CFRetain(Value);
    }
    v5[2] = Value;
    int v7 = CFDictionaryGetValue(a1, @"SecureStopSPC");
    if (v7) {
      int v7 = CFRetain(v7);
    }
    v5[3] = v7;
    CFArrayRef v8 = CFDictionaryGetValue(a1, @"ModifiedDate");
    if (v8) {
      CFArrayRef v8 = CFRetain(v8);
    }
    v5[4] = v8;
    uint64_t v9 = CFDictionaryGetValue(a1, @"VersionList");
    if (v9) {
      uint64_t v9 = CFRetain(v9);
    }
    void v5[5] = v9;
    CFAllocatorRef v10 = CFDictionaryGetValue(a1, @"PlaybackSessionID");
    if (v10) {
      CFAllocatorRef v10 = CFRetain(v10);
    }
    v5[6] = v10;
    CFIndex v11 = CFDictionaryGetValue(a1, @"AirPlayPlaybackSessionID");
    if (v11) {
      CFIndex v11 = CFRetain(v11);
    }
    v5[7] = v11;
    CFDateRef v12 = CFDictionaryGetValue(a1, @"APIProviderID");
    if (v12) {
      CFDateRef v12 = CFRetain(v12);
    }
    v5[8] = v12;
    uint64_t v13 = CFDictionaryGetValue(a1, @"AssetID");
    if (v13) {
      uint64_t v13 = CFRetain(v13);
    }
    v5[9] = v13;
    uint64_t v14 = CFDictionaryGetValue(a1, @"AbnormallyTerminated");
    if (v14) {
      uint64_t v14 = CFRetain(v14);
    }
    v5[10] = v14;
    *a2 = v5;
  }
  return SecureStopRecord;
}

uint64_t FigMetadataReaderCreateForBoxedMetadata(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a2 && a4)
  {
    FigMetadataReaderGetClassID();
    uint64_t v5 = CMDerivedObjectCreate();
    if (!v5)
    {
      CMBaseObjectGetDerivedStorage();
      uint64_t v5 = FigBoxedMetadataCreateFromBlockBuffer();
      if (!v5)
      {
        uint64_t v5 = 0;
        *a4 = 0;
      }
    }
    return v5;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void boxedreader_Finalize()
{
  uint64_t v0 = *(const void **)CMBaseObjectGetDerivedStorage();
  if (v0)
  {
    CFRelease(v0);
  }
}

CFStringRef boxedreader_CopyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @" FigBoxedMetadataReader %p\n  BoxedMetadata = %@\n", a1, *DerivedStorage);
}

uint64_t boxedreader_CopyValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7)
{
  CFTypeRef v28 = 0;
  CFTypeRef cf = 0;
  if (a2 && a3)
  {
    uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v14) {
      uint64_t v15 = v14;
    }
    else {
      uint64_t v15 = 0;
    }
    uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 40);
    if (v16 && (uint64_t v17 = v16(a1, a2, a3), v17 >= 1))
    {
      uint64_t v18 = v17;
      uint64_t v19 = 0;
      while (1)
      {
        uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v21 = v20 ? v20 : 0;
        CFDateRef v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, CFTypeRef *, CFTypeRef *))(v21 + 48);
        if (!v22) {
          break;
        }
        uint64_t v23 = v22(a1, a2, a3, v19, a5, &cf, &v28);
        if (v23) {
          goto LABEL_37;
        }
        if (a4 && CFGetTypeID(cf) != a4)
        {
          if (cf)
          {
            CFRelease(cf);
            CFTypeRef cf = 0;
          }
          if (v28)
          {
            CFRelease(v28);
            CFTypeRef v28 = 0;
          }
          if (v18 != ++v19) {
            continue;
          }
        }
        goto LABEL_21;
      }
      uint64_t v26 = 4294954514;
    }
    else
    {
LABEL_21:
      if (a6)
      {
        CFTypeRef v24 = cf;
        if (cf) {
          CFTypeRef v24 = CFRetain(cf);
        }
        *a6 = v24;
      }
      if (a7)
      {
        CFTypeRef v25 = v28;
        if (v28) {
          CFTypeRef v25 = CFRetain(v28);
        }
        uint64_t v26 = 0;
        *a7 = v25;
      }
      else
      {
        uint64_t v26 = 0;
      }
    }
  }
  else
  {
    uint64_t v23 = FigSignalErrorAt();
LABEL_37:
    uint64_t v26 = v23;
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v28) {
    CFRelease(v28);
  }
  return v26;
}

uint64_t boxedreader_HasKey(uint64_t a1, const __CFString *a2, const void *a3)
{
  CFArrayRef Identifiers = boxedreader_getIdentifiers();
  CFStringRef identifierOut = 0;
  if (!a2)
  {
    FigSignalErrorAt();
    return 0;
  }
  if (a3)
  {
    CFArrayRef v6 = Identifiers;
    if (!CMMetadataCreateIdentifierForKeyAndKeySpace((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a3, a2, &identifierOut))
    {
      v10.size_t length = CFArrayGetCount(v6);
      v10.CFIndex location = 0;
      uint64_t v7 = CFArrayContainsValue(v6, v10, identifierOut);
      goto LABEL_5;
    }
  }
  else
  {
    FigSignalErrorAt();
  }
  uint64_t v7 = 0;
LABEL_5:
  if (identifierOut) {
    CFRelease(identifierOut);
  }
  return v7;
}

CFIndex boxedreader_GetKeyCount(int a1, CFTypeRef cf1)
{
  if (cf1 && CFEqual(cf1, @"comn"))
  {
    FigSignalErrorAt();
  }
  else
  {
    CFArrayRef Identifiers = boxedreader_getIdentifiers();
    CFArrayRef v4 = boxedreader_copyUniqueKeysWithKeySpaceFromIdentifiers((const __CFAllocator *)*MEMORY[0x1E4F1CF80], Identifiers, cf1);
    if (v4)
    {
      CFArrayRef v5 = v4;
      CFIndex Count = CFArrayGetCount(v4);
      CFRelease(v5);
      return Count;
    }
  }
  return 0;
}

uint64_t boxedReader_CopyKeyAtIndex(int a1, CFTypeRef cf1, CFIndex a3, const __CFAllocator *a4, void *a5)
{
  if ((a3 & 0x8000000000000000) == 0 && a5 && (!cf1 || !CFEqual(cf1, @"comn")))
  {
    CFArrayRef Identifiers = boxedreader_getIdentifiers();
    CFArrayRef v10 = boxedreader_copyUniqueKeysWithKeySpaceFromIdentifiers(a4, Identifiers, cf1);
    if (CFArrayGetCount(v10) <= a3)
    {
      uint64_t v12 = FigSignalErrorAt();
      if (!v10) {
        return v12;
      }
    }
    else
    {
      CFDataRef ValueAtIndex = CFArrayGetValueAtIndex(v10, a3);
      if (ValueAtIndex) {
        CFDataRef ValueAtIndex = CFRetain(ValueAtIndex);
      }
      uint64_t v12 = 0;
      *a5 = ValueAtIndex;
      if (!v10) {
        return v12;
      }
    }
    CFRelease(v10);
    return v12;
  }

  return FigSignalErrorAt();
}

CFIndex boxedreader_GetItemCount(uint64_t a1, const __CFString *cf1, const void *a3)
{
  if (cf1)
  {
    int v6 = CFEqual(cf1, @"comn");
    if (!a3 && v6) {
      goto LABEL_4;
    }
  }
  else if (a3)
  {
LABEL_4:
    FigSignalErrorAt();
    return 0;
  }
  CFArrayRef ItemIndexesMatchingKeyAndKeySpace = boxedreader_createItemIndexesMatchingKeyAndKeySpace(a1, cf1, a3);
  CFIndex Count = CFArrayGetCount(ItemIndexesMatchingKeyAndKeySpace);
  if (ItemIndexesMatchingKeyAndKeySpace) {
    CFRelease(ItemIndexesMatchingKeyAndKeySpace);
  }
  return Count;
}

uint64_t boxedreader_CopyItemWithKeyAndIndex(uint64_t a1, const __CFString *cf1, const void *a3, CFIndex a4, const __CFAllocator *a5, void *a6, void *a7)
{
  int valuePtr = 0;
  if ((a4 & 0x8000000000000000) == 0)
  {
    if (cf1)
    {
      int v14 = CFEqual(cf1, @"comn");
      if (!a3 && v14) {
        goto LABEL_5;
      }
    }
    else if (a3)
    {
      goto LABEL_5;
    }
    CFArrayRef ItemIndexesMatchingKeyAndKeySpace = boxedreader_createItemIndexesMatchingKeyAndKeySpace(a1, cf1, a3);
    if (CFArrayGetCount(ItemIndexesMatchingKeyAndKeySpace) <= a4)
    {
      uint64_t v31 = FigSignalErrorAt();
      if (!ItemIndexesMatchingKeyAndKeySpace) {
        return v31;
      }
      goto LABEL_43;
    }
    uint64_t v32 = a6;
    uint64_t v33 = a7;
    CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(ItemIndexesMatchingKeyAndKeySpace, a4);
    CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, &valuePtr);
    CFTypeRef cf = 0;
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a5, 0, MEMORY[0x1E4F1D048], MEMORY[0x1E4F1D540]);
    CMBaseObjectGetDerivedStorage();
    FigBoxedMetadataGetFormatDescription();
    FigBoxedMetadataGetLocalIDOfItemAtIndex();
    CFStringRef IdentifierForLocalID = (const __CFString *)FigMetadataFormatDescriptionGetIdentifierForLocalID();
    CFStringRef LanguageTagForLocalID = (const __CFString *)FigMetadataFormatDescriptionGetLanguageTagForLocalID();
    DataTypeForLocalID = (const void *)FigMetadataFormatDescriptionGetDataTypeForLocalID();
    ConformingDataTypesForLocalID = (const void *)FigMetadataFormatDescriptionGetConformingDataTypesForLocalID();
    CFTypeRef keyOut = 0;
    CFStringRef keySpaceOut = 0;
    uint64_t SizeOfItemAtIndex = FigBoxedMetadataGetSizeOfItemAtIndex();
    CFNumberRef v23 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt64Type, &SizeOfItemAtIndex);
    uint64_t v24 = FigBoxedMetadataCopyValueOfItemAtIndexAsCFType();
    if (v24
      || (uint64_t v24 = CMMetadataCreateKeySpaceFromIdentifier(a5, IdentifierForLocalID, &keySpaceOut), v24)
      || (CFDictionarySetValue(Mutable, @"keyspace", keySpaceOut),
          uint64_t v24 = CMMetadataCreateKeyFromIdentifier(a5, IdentifierForLocalID, &keyOut),
          v24))
    {
      uint64_t v31 = v24;
      if (!v23) {
        goto LABEL_34;
      }
    }
    else
    {
      CFDictionarySetValue(Mutable, @"key", keyOut);
      CFDictionarySetValue(Mutable, @"dataLength", v23);
      if (DataTypeForLocalID)
      {
        CFDictionarySetValue(Mutable, @"dataType", DataTypeForLocalID);
        CFDictionarySetValue(Mutable, @"dataTypeNamespace", @"com.apple.coremedia");
      }
      if (ConformingDataTypesForLocalID) {
        CFDictionarySetValue(Mutable, @"conformingDataTypes", ConformingDataTypesForLocalID);
      }
      if (LanguageTagForLocalID)
      {
        CFDictionarySetValue(Mutable, @"extendedLanguageTag", LanguageTagForLocalID);
        CFLocaleRef v25 = CFLocaleCreate(a5, LanguageTagForLocalID);
        if (v25)
        {
          CFLocaleRef v26 = v25;
          CFDictionarySetValue(Mutable, @"locale", v25);
          CFNumberRef v27 = FigMetadataCopyLangCodeFromLocale(v26);
          if (v27)
          {
            CFNumberRef v28 = v27;
            CFDictionarySetValue(Mutable, @"languageCode", v27);
            CFRelease(v28);
          }
          CFRelease(v26);
        }
      }
      if (v32)
      {
        CFTypeRef v29 = cf;
        if (cf) {
          CFTypeRef v29 = CFRetain(cf);
        }
        *uint64_t v32 = v29;
      }
      if (v33)
      {
        if (Mutable) {
          CFTypeRef v30 = CFRetain(Mutable);
        }
        else {
          CFTypeRef v30 = 0;
        }
        uint64_t v31 = 0;
        *uint64_t v33 = v30;
        if (v23) {
          goto LABEL_33;
        }
LABEL_34:
        if (keySpaceOut) {
          CFRelease(keySpaceOut);
        }
        if (keyOut) {
          CFRelease(keyOut);
        }
        if (cf) {
          CFRelease(cf);
        }
        if (Mutable) {
          CFRelease(Mutable);
        }
        if (!ItemIndexesMatchingKeyAndKeySpace) {
          return v31;
        }
LABEL_43:
        CFRelease(ItemIndexesMatchingKeyAndKeySpace);
        return v31;
      }
      uint64_t v31 = 0;
      if (!v23) {
        goto LABEL_34;
      }
    }
LABEL_33:
    CFRelease(v23);
    goto LABEL_34;
  }
LABEL_5:

  return FigSignalErrorAt();
}

CFArrayRef boxedreader_getIdentifiers()
{
  CMBaseObjectGetDerivedStorage();
  FormatDescription = (const opaqueCMFormatDescription *)FigBoxedMetadataGetFormatDescription();

  return CMMetadataFormatDescriptionGetIdentifiers(FormatDescription);
}

CFArrayRef boxedreader_copyUniqueKeysWithKeySpaceFromIdentifiers(const __CFAllocator *a1, const __CFArray *a2, const void *a3)
{
  CFArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (CFArrayGetCount(a2) >= 1)
  {
    CFIndex v7 = 0;
    do
    {
      CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(a2, v7);
      if (boxedreader_identifierMatchesKeySpace(ValueAtIndex, a3))
      {
        CFTypeRef keyOut = 0;
        if (!CMMetadataCreateKeyFromIdentifier(a1, ValueAtIndex, &keyOut))
        {
          v11.size_t length = CFArrayGetCount(Mutable);
          v11.CFIndex location = 0;
          if (!CFArrayContainsValue(Mutable, v11, keyOut)) {
            CFArrayAppendValue(Mutable, keyOut);
          }
        }
        if (keyOut) {
          CFRelease(keyOut);
        }
      }
      ++v7;
    }
    while (v7 < CFArrayGetCount(a2));
  }
  return Mutable;
}

uint64_t boxedreader_identifierMatchesKeySpace(CFStringRef identifier, const void *a2)
{
  CFStringRef keySpaceOut = 0;
  if (!a2) {
    return 1;
  }
  if (CMMetadataCreateKeySpaceFromIdentifier((CFAllocatorRef)*MEMORY[0x1E4F1CF80], identifier, &keySpaceOut)) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = CFEqual(keySpaceOut, a2);
  }
  if (keySpaceOut) {
    CFRelease(keySpaceOut);
  }
  return v3;
}

CFMutableArrayRef boxedreader_createItemIndexesMatchingKeyAndKeySpace(uint64_t a1, const __CFString *a2, const void *a3)
{
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  CMBaseObjectGetDerivedStorage();
  uint64_t NumberOfItems = FigBoxedMetadataGetNumberOfItems();
  if (NumberOfItems >= 1)
  {
    uint64_t v8 = NumberOfItems;
    uint64_t v9 = 0;
    if (a2) {
      BOOL v10 = 1;
    }
    else {
      BOOL v10 = a3 == 0;
    }
    char v11 = v10;
    while (1)
    {
      if (!FigBoxedMetadataGetLocalIDOfItemAtIndex()) {
        goto LABEL_17;
      }
      FigBoxedMetadataGetFormatDescription();
      CFStringRef IdentifierForLocalID = (const __CFString *)FigMetadataFormatDescriptionGetIdentifierForLocalID();
      if (!boxedreader_identifierMatchesKeySpace(IdentifierForLocalID, a2)) {
        goto LABEL_17;
      }
      CFStringRef identifierOut = 0;
      if ((v11 & 1) == 0)
      {
        FigSignalErrorAt();
        goto LABEL_17;
      }
      if (!a3)
      {
LABEL_16:
        FigCFArrayAppendInt32();
        goto LABEL_17;
      }
      OSStatus v13 = CMMetadataCreateIdentifierForKeyAndKeySpace(v5, a3, a2, &identifierOut);
      CFStringRef v14 = identifierOut;
      if (!v13) {
        break;
      }
      int v15 = 0;
      if (identifierOut) {
        goto LABEL_14;
      }
LABEL_15:
      if (v15) {
        goto LABEL_16;
      }
LABEL_17:
      if (v8 == ++v9) {
        return Mutable;
      }
    }
    int v15 = CFEqual(IdentifierForLocalID, identifierOut);
    CFStringRef v14 = identifierOut;
    if (!identifierOut) {
      goto LABEL_15;
    }
LABEL_14:
    CFRelease(v14);
    goto LABEL_15;
  }
  return Mutable;
}

uint64_t CreatePesPrivateForMP3(void *a1)
{
  if (a1[6])
  {
    CFAllocatorRef v2 = (void (*)(void *))a1[107];
    if (v2) {
      v2(a1);
    }
    a1[6] = 0;
  }
  uint64_t v3 = malloc_type_calloc(1uLL, 0x130uLL, 0x10B0040DDD21EB6uLL);
  if (!v3) {
    return 12;
  }
  CFArrayRef v4 = v3;
  uint64_t result = 0;
  *CFArrayRef v4 = v4 + 37;
  void v4[2] = (char *)v4 + 300;
  v4[3] = 4;
  v4[4] = MP3CheckHeader;
  v4[5] = MP3CompareHeaders;
  void v4[6] = MP3GetSamplesPerFrame;
  v4[7] = MP3GetSampleFrequency;
  v4[8] = MP3GetFrameSize;
  a1[105] = PesMP3ProcessData;
  a1[106] = PesMP3CleanPrivateData;
  a1[107] = PesMP3DeletePrivateData;
  a1[6] = v4;
  return result;
}

BOOL MP3CheckHeader(unsigned int *a1)
{
  BOOL result = 0;
  unsigned int v3 = bswap32(*a1);
  if ((v3 & 0x60000) != 0 && v3 >= 0xFFE00000 && (v3 & 0x180000) != 0x80000)
  {
    int v4 = v3 & 0xF000;
    if ((v3 & 0xF000) != 0)
    {
      BOOL v5 = (~v3 & 0xC00) != 0;
      return v4 != 61440 && v5;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL MP3CompareHeaders(OpaqueCMBlockBuffer *a1, _DWORD *a2)
{
  int v4 = 0;
  return !CMBlockBufferAccessDataBytes(a1, 0, 4uLL, temporaryBlock, &v4) && ((*a2 ^ *(_DWORD *)v4) & 0xCF8FF) == 0;
}

uint64_t PesMP3ProcessData(uint64_t a1, OpaqueCMBlockBuffer *a2, size_t a3, char *a4, size_t a5, uint64_t a6)
{
  return MPEGAudioProcessData(a1, *(void **)(a1 + 48), a2, a3, a4, a5, a6);
}

void PesMP3CleanPrivateData(uint64_t a1)
{
}

void PesMP3DeletePrivateData(uint64_t a1)
{
  *(void *)(a1 + 48) = 0;
}

uint64_t FigCaptionRendererRegionProtocolGetProtocolID()
{
  return sFigCaptionRendererRegionProtocolID;
}

uint64_t RegisterFigCaptionRendererRegionProtocolType()
{
  return MEMORY[0x1F40DC660](&sFigCaptionRendererRegionProtocolDesc, 0, &sFigCaptionRendererRegionProtocolID);
}

uint64_t FigTTMLCaptionWriterGetClassID()
{
  return sFigTTMLCaptionWriterClassID;
}

uint64_t figTTMLCaptionWriter_RegisterFigTTMLCaptionWriterBaseType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t FigTTMLCaptionWriterGetTypeID()
{
  MEMORY[0x19970EE10](&FigTTMLCaptionWriterGetClassID_sRegisterFigTTMLCaptionWriterBaseTypeOnce, figTTMLCaptionWriter_RegisterFigTTMLCaptionWriterBaseType);

  return CMBaseClassGetCFTypeID();
}

uint64_t FigTTMLCaptionWriterAddCaption(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, _OWORD *))(v7 + 8);
  if (!v8) {
    return 4294954514;
  }
  long long v9 = a3[1];
  v11[0] = *a3;
  v11[1] = v9;
  _OWORD v11[2] = a3[2];
  return v8(a1, a2, v11);
}

uint64_t FigTTMLCaptionWriterFinish(uint64_t a1)
{
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  int v4 = *(uint64_t (**)(uint64_t))(v3 + 16);
  if (!v4) {
    return 4294954514;
  }

  return v4(a1);
}

uint64_t FigTTMLCaptionWriterInvalidate(uint64_t a1)
{
  if (!a1) {
    return 4294954516;
  }
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  BOOL v5 = *(uint64_t (**)(uint64_t))(v3 + 24);
  if (!v5) {
    return 4294954514;
  }

  return v5(a1);
}

CFStringRef figTTMLCaptionWriter_CopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigTTMLCaptionWriter %p]", a1);
}

uint64_t FigVideoTargetGetClassID()
{
  return sFigVideoTargetClassID;
}

uint64_t RegisterFigVideoTargetType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t FigVideoTargetGetTypeID()
{
  MEMORY[0x19970EE10](&FigVideoTargetGetClassID_sRegisterFigVideoTargetTypeOnce, RegisterFigVideoTargetType);

  return CMBaseClassGetCFTypeID();
}

uint64_t FigVideoTargetCreateLocalWithVideoReceiverEndpointID(const __CFAllocator *a1, void *a2, uint64_t a3, CFTypeRef *a4)
{
  CFTypeRef cf = 0;
  if (a4 && a2)
  {
    FigCFDictionaryGetBooleanIfPresent();
    uint64_t v7 = FigVideoReceiverCreateRemote((uint64_t)a1, a2, 0, &cf);
    CFTypeRef v8 = cf;
    if (v7)
    {
      uint64_t v9 = v7;
      if (!cf) {
        return v9;
      }
    }
    else
    {
      uint64_t v9 = videotarget_createWithReceiver(a1, cf, a4);
      CFTypeRef v8 = cf;
      if (!cf) {
        return v9;
      }
    }
    CFRelease(v8);
    return v9;
  }

  return FigSignalErrorAt();
}

uint64_t videotarget_createWithReceiver(const __CFAllocator *a1, const void *a2, CFTypeRef *a3)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  CFTypeRef v39 = 0;
  CFTypeRef v40 = 0;
  CFTypeRef v37 = 0;
  CFTypeRef v38 = 0;
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  MEMORY[0x19970EE10](&FigVideoTargetGetClassID_sRegisterFigVideoTargetTypeOnce, RegisterFigVideoTargetType);
  uint64_t v6 = CMDerivedObjectCreate();
  if (v6) {
    goto LABEL_62;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2) {
    CFTypeRef v8 = CFRetain(a2);
  }
  else {
    CFTypeRef v8 = 0;
  }
  *(void *)(DerivedStorage + 8) = v8;
  dispatch_queue_t v9 = dispatch_queue_create("com.apple.coremedia.videotarget.notification", 0);
  *(void *)(DerivedStorage + 16) = v9;
  if (!v9) {
    goto LABEL_61;
  }
  *(unsigned char *)(DerivedStorage + 88) = 0;
  uint64_t v10 = FigSimpleMutexCreate();
  *(void *)(DerivedStorage + 80) = v10;
  if (!v10) {
    goto LABEL_61;
  }
  uint64_t v6 = FigCFWeakReferenceTableCreate();
  if (v6) {
    goto LABEL_62;
  }
  CMBaseObjectGetDerivedStorage();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 80));
  CFTypeRef cf = 0;
  uint64_t CMBaseObject = FigVideoReceiverGetCMBaseObject(a2);
  uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v12) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  CFStringRef v14 = *(uint64_t (**)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *))(v13 + 48);
  if (!v14)
  {
    BOOL v16 = 0;
    uint64_t v15 = 4294954514;
LABEL_21:
    CFTypeRef v17 = cf;
    goto LABEL_22;
  }
  uint64_t v15 = v14(CMBaseObject, 0x1EE571318, a1, &cf);
  BOOL v16 = v15 == 0;
  CFTypeRef v17 = cf;
  if (!v15 && cf)
  {
    buffer[0] = 0;
    FigCFDictionaryGetBooleanIfPresent();
    if (buffer[0])
    {
      *(unsigned char *)(DerivedStorage + 88) = buffer[0];
      CFDictionaryRef Value = (const void *)FigCFDictionaryGetValue();
      uint64_t v19 = *(const void **)(DerivedStorage + 96);
      *(void *)(DerivedStorage + 96) = Value;
      if (Value) {
        CFRetain(Value);
      }
      if (v19) {
        CFRelease(v19);
      }
    }
    uint64_t v15 = 0;
    BOOL v16 = 1;
    goto LABEL_21;
  }
LABEL_22:
  if (v17) {
    CFRelease(v17);
  }
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 80));
  if (v16)
  {
    uint64_t v20 = FigVideoReceiverGetCMBaseObject(*(void *)(DerivedStorage + 8));
    uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v21) {
      uint64_t v22 = v21;
    }
    else {
      uint64_t v22 = 0;
    }
    CFNumberRef v23 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, uint64_t))(v22 + 48);
    if (!v23) {
      goto LABEL_47;
    }
    uint64_t v24 = (const __CFString **)(DerivedStorage + 24);
    uint64_t v6 = v23(v20, @"LoggingIdentifier", a1, DerivedStorage + 24);
    if (v6) {
      goto LABEL_62;
    }
    *(unsigned char *)(DerivedStorage + 32) = 1;
    uint64_t v25 = FigSimpleMutexCreate();
    *(void *)(DerivedStorage + 40) = v25;
    if (v25)
    {
      uint64_t v26 = FigVideoReceiverGetCMBaseObject(*(void *)(DerivedStorage + 8));
      uint64_t v27 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v27) {
        uint64_t v28 = v27;
      }
      else {
        uint64_t v28 = 0;
      }
      CFTypeRef v29 = *(uint64_t (**)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *))(v28 + 48);
      if (v29)
      {
        uint64_t v6 = v29(v26, 0x1EE5713B8, a1, &v39);
        if (v6) {
          goto LABEL_62;
        }
        uint64_t v6 = FigDataChannelGroupsArrayCreateFromDictionary(a1, (CFDictionaryRef)v39, (__CFArray **)&v38);
        if (v6) {
          goto LABEL_62;
        }
        *(void *)(DerivedStorage + 56) = v38;
        CFTypeRef v38 = 0;
        uint64_t v30 = FigVideoReceiverGetCMBaseObject(*(void *)(DerivedStorage + 8));
        uint64_t v31 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v32 = v31 ? v31 : 0;
        uint64_t v33 = *(uint64_t (**)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *))(v32 + 48);
        if (v33)
        {
          uint64_t v6 = v33(v30, 0x1EE5713D8, a1, &v37);
          if (!v6)
          {
            uint64_t v6 = (uint64_t)videoTarget_deserializeAndSaveDataChannelSettings((uint64_t)v40, (const __CFArray *)v37);
            if (!v6)
            {
              if (*MEMORY[0x1E4F1EBA8] == 1)
              {
                CFStringRef v34 = *v24;
                *(void *)buffer = 0;
                if (v34)
                {
                  if (CFStringGetLength(v34) <= 8) {
                    v35.size_t length = CFStringGetLength(v34);
                  }
                  else {
                    v35.size_t length = 8;
                  }
                  v35.CFIndex location = 0;
                  CFStringGetBytes(v34, v35, 0, 0x3Fu, 0, buffer, 8, 0);
                }
                strncpy((char *)&cf, (const char *)buffer, 8uLL);
                kdebug_trace();
              }
              uint64_t v15 = 0;
              *a3 = v40;
              CFTypeRef v40 = 0;
              goto LABEL_48;
            }
          }
LABEL_62:
          uint64_t v15 = v6;
          goto LABEL_48;
        }
      }
LABEL_47:
      uint64_t v15 = 4294954514;
      goto LABEL_48;
    }
LABEL_61:
    uint64_t v6 = FigSignalErrorAt();
    goto LABEL_62;
  }
LABEL_48:
  if (v37) {
    CFRelease(v37);
  }
  if (v40) {
    CFRelease(v40);
  }
  if (v39) {
    CFRelease(v39);
  }
  if (v38) {
    CFRelease(v38);
  }
  return v15;
}

uint64_t FigVideoTargetCreateLocalWithVideoReceiver(const __CFAllocator *a1, const void *a2, uint64_t a3, CFTypeRef *a4)
{
  if (a4 && a2) {
    return videotarget_createWithReceiver(a1, a2, a4);
  }
  else {
    return FigSignalErrorAt();
  }
}

CFStringRef FigVideoTargetCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigVideoTarget %p]", a1);
}

const void *videoTarget_deserializeAndSaveDataChannelSettings(uint64_t a1, const __CFArray *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = DerivedStorage;
  CFTypeRef cf = 0;
  if (!a2)
  {
    uint64_t v7 = *(const void **)(DerivedStorage + 64);
    *(void *)(DerivedStorage + 64) = 0;
    if (!v7) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  uint64_t v5 = FigVideoReceiverDataChannelSettingsCopyDeserialized(a2, (__CFArray **)&cf);
  if (v5)
  {
    uint64_t v7 = (const void *)v5;
    goto LABEL_9;
  }
  CFTypeRef v6 = cf;
  uint64_t v7 = *(const void **)(v4 + 64);
  *(void *)(v4 + 64) = cf;
  if (v6) {
    CFRetain(v6);
  }
  if (v7)
  {
LABEL_8:
    CFRelease(v7);
    uint64_t v7 = 0;
  }
LABEL_9:
  if (cf) {
    CFRelease(cf);
  }
  return v7;
}

void videoTarget_Finalize()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  CMBaseObjectGetDerivedStorage();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  uint64_t v1 = DerivedStorage[2];
  if (v1) {
    dispatch_release(v1);
  }
  uint64_t v2 = (const void *)DerivedStorage[7];
  if (v2)
  {
    CFRelease(v2);
    DerivedStorage[7] = 0;
  }
  uint64_t v3 = (const void *)DerivedStorage[8];
  if (v3)
  {
    CFRelease(v3);
    DerivedStorage[8] = 0;
  }
  uint64_t v4 = (const void *)DerivedStorage[6];
  if (v4)
  {
    CFRelease(v4);
    DerivedStorage[6] = 0;
  }
  FigSimpleMutexDestroy();
  uint64_t v5 = (const void *)DerivedStorage[13];
  if (v5)
  {
    CFRelease(v5);
    DerivedStorage[13] = 0;
  }
  CFTypeRef v6 = (const void *)DerivedStorage[12];
  if (v6)
  {
    CFRelease(v6);
    DerivedStorage[12] = 0;
  }
  FigSimpleMutexDestroy();
  uint64_t v7 = (const void *)DerivedStorage[1];
  if (v7)
  {
    CFRelease(v7);
    DerivedStorage[1] = 0;
  }
  CFTypeRef v8 = (const void *)DerivedStorage[3];
  if (v8)
  {
    CFRelease(v8);
    DerivedStorage[3] = 0;
  }
}

__CFString *videoTarget_CopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = CFGetAllocator(a1);
  CFMutableArrayRef Mutable = CFStringCreateMutable(v3, 0);
  uint64_t v5 = *(void *)(DerivedStorage + 24);
  CFIndex v6 = CFGetRetainCount(a1);
  CFStringAppendFormat(Mutable, 0, @"<FigVideoTarget [%p|%@] retainCount: %ld>", a1, v5, v6);
  return Mutable;
}

uint64_t videoTarget_CopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, void *a4)
{
  if (a2 && a4)
  {
    *a4 = 0;
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    CFTypeRef v8 = @"RefreshRate";
    if (!FigCFEqual())
    {
      CFTypeRef v8 = @"DesiredPixelCount";
      if (!FigCFEqual())
      {
        if (FigCFEqual())
        {
          CFDataRef Copy = (void *)CFStringCreateCopy(a3, *(CFStringRef *)(DerivedStorage + 24));
          if (!Copy)
          {
            FigSignalErrorAt();
            return 0;
          }
        }
        else
        {
          if (FigCFEqual())
          {
            uint64_t v15 = *(__CFString **)(DerivedStorage + 8);
            if (!v15) {
              return 4294951734;
            }
          }
          else
          {
            if (!CFEqual(a2, @"InstanceType")) {
              return 4294954509;
            }
            uint64_t v15 = @"Local";
          }
          CFDataRef Copy = (void *)CFRetain(v15);
        }
        BOOL v16 = Copy;
        uint64_t result = 0;
        *a4 = v16;
        return result;
      }
    }
    uint64_t CMBaseObject = FigVideoReceiverGetCMBaseObject(*(void *)(DerivedStorage + 8));
    uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v10) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    uint64_t v12 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, void *))(v11 + 48);
    if (v12)
    {
      return v12(CMBaseObject, v8, a3, a4);
    }
    else
    {
      return 4294954514;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t videoTarget_SetProperty(const void *a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    CFTypeID v6 = CFGetTypeID(a1);
    MEMORY[0x19970EE10](&FigVideoTargetGetClassID_sRegisterFigVideoTargetTypeOnce, RegisterFigVideoTargetType);
    BOOL v7 = v6 != CMBaseClassGetCFTypeID() || a2 == 0;
    BOOL v8 = v7 || a3 == 0;
    if (!v8 && *(void *)(CMBaseObjectGetDerivedStorage() + 8)) {
      return 4294954509;
    }
  }

  return FigSignalErrorAt();
}

void videoTarget_reflectReceiverNotification(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, const __CFDictionary *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a3, @"ClientRenderOptionChanged"))
  {
    dispatch_queue_t v9 = 0;
    goto LABEL_21;
  }
  if (CFEqual(a3, @"PreferredDataChannelGroupsChanged"))
  {
    if (a5)
    {
      CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(a5, @"PreferredDataChannelGroups");
      if (Value)
      {
        CFDictionaryRef v13 = Value;
        CFDictionaryAddValue(Mutable, @"PreferredDataChannelGroups", Value);
        CFTypeRef cf = 0;
        FigDataChannelGroupsArrayCreateFromDictionary(v10, v13, (__CFArray **)&cf);
        CFTypeRef v14 = cf;
        if (cf)
        {
          uint64_t v15 = *(const void **)(DerivedStorage + 56);
          *(void *)(DerivedStorage + 56) = cf;
          CFRetain(v14);
          if (v15) {
            CFRelease(v15);
          }
          if (cf) {
            CFRelease(cf);
          }
        }
      }
      LODWORD(cf) = 0;
      FigCFDictionaryGetInt32IfPresent();
      if ((int)cf >= 1)
      {
        *(_DWORD *)(DerivedStorage + 72) = cf;
        FigCFDictionarySetInt32();
      }
LABEL_19:
      dispatch_queue_t v9 = Mutable;
      goto LABEL_21;
    }
  }
  else
  {
    if (!CFEqual(a3, @"DataChannelSettingsChanged"))
    {
      if (CFEqual(a3, @"PlaybackStartupPreventionAssertionAcquired"))
      {
        MEMORY[0x19970E910](*(void *)(DerivedStorage + 80));
        uint64_t v18 = (const void *)FigCFDictionaryGetValue();
        uint64_t v19 = *(const void **)(DerivedStorage + 96);
        *(void *)(DerivedStorage + 96) = v18;
        if (v18) {
          CFRetain(v18);
        }
        if (v19) {
          CFRelease(v19);
        }
        *(unsigned char *)(DerivedStorage + 88) = 1;
      }
      else
      {
        if (!CFEqual(a3, @"PlaybackStartupPreventionAssertionReleased")) {
          return;
        }
        MEMORY[0x19970E910](*(void *)(DerivedStorage + 80));
        uint64_t v20 = *(const void **)(DerivedStorage + 96);
        if (v20)
        {
          CFRelease(v20);
          *(void *)(DerivedStorage + 96) = 0;
        }
        *(unsigned char *)(DerivedStorage + 88) = 0;
      }
      FigCFWeakReferenceTableApplyFunction();
      JUMPOUT(0x19970E930);
    }
    if (a5)
    {
      CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFArrayRef v16 = (const __CFArray *)CFDictionaryGetValue(a5, @"DataChannelSettings");
      if (!videoTarget_deserializeAndSaveDataChannelSettings(a2, v16))
      {
        CFTypeRef v17 = *(const void **)(DerivedStorage + 64);
        if (v17) {
          CFDictionaryAddValue(Mutable, @"DataChannelSettings", v17);
        }
      }
      LODWORD(cf) = 0;
      FigCFDictionaryGetInt32IfPresent();
      goto LABEL_19;
    }
  }
  dispatch_queue_t v9 = 0;
LABEL_21:
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  if (v9) {
    CFRelease(v9);
  }
}

void fvt_playbackStartupPreventionAssertionStateChangedWhileHoldingMutex(uint64_t a1, uint64_t a2)
{
  CMBaseObjectGetDerivedStorage();
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    CFMutableDictionaryRef v4 = Mutable;
    FigCFDictionarySetBoolean();
    FigCFDictionarySetValue();
    uint64_t FigBaseObject = FigImageQueueGetFigBaseObject(a2);
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    BOOL v8 = *(void (**)(uint64_t, __CFString *, CFMutableDictionaryRef))(v7 + 56);
    if (v8) {
      v8(FigBaseObject, @"RendererPreparationInfo", v4);
    }
    CFRelease(v4);
  }
}

uint64_t videoTarget_createFigImageQueue(const void *a1, uint64_t a2, CFTypeRef *a3)
{
  CFTypeRef cf = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a1
    || (uint64_t v7 = DerivedStorage,
        CFTypeID v8 = CFGetTypeID(a1),
        MEMORY[0x19970EE10](&FigVideoTargetGetClassID_sRegisterFigVideoTargetTypeOnce, RegisterFigVideoTargetType),
        v8 != CMBaseClassGetCFTypeID())
    || !a3)
  {
    uint64_t Key = FigSignalErrorAt();
    goto LABEL_35;
  }
  CFAllocatorRef v9 = CFGetAllocator(a1);
  uint64_t v10 = CMBaseObjectGetDerivedStorage();
  uint64_t v11 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  if (!v10 || (CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540])) == 0)
  {
    uint64_t Key = FigSignalErrorAt();
    goto LABEL_41;
  }
  CFMutableDictionaryRef v13 = Mutable;
  uint64_t UInt32 = FigCFNumberCreateUInt32();
  if (!UInt32)
  {
    uint64_t Key = FigSignalErrorAt();
    CFRelease(v13);
LABEL_41:
    uint64_t v19 = 0;
    if (Key) {
      goto LABEL_33;
    }
    goto LABEL_15;
  }
  uint64_t v15 = (const void *)UInt32;
  atomic_fetch_add(&videoTarget_createCAImageQueue_uniqueCounter, 1uLL);
  unint64_t UInt64 = (const void *)FigCFNumberCreateUInt64();
  if (!UInt64
    || (CFDictionarySetValue(v13, (const void *)*MEMORY[0x1E4F3A408], v15),
        CFDictionarySetValue(v13, (const void *)*MEMORY[0x1E4F3A410], UInt64),
        (uint64_t v17 = FigCFWeakReferenceHolderCreateWithReferencedObject()) == 0))
  {
    uint64_t Key = FigSignalErrorAt();
    uint64_t v19 = 0;
LABEL_12:
    CFRelease(v13);
    CFRelease(v15);
    if (!UInt64) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  uint64_t v18 = (const void *)v17;
  uint64_t v19 = (const void *)CAXPCImageQueueCreate();
  if (v19)
  {
    CAImageQueueSetFlags();
    uint64_t Key = 0;
    goto LABEL_12;
  }
  uint64_t Key = FigSignalErrorAt();
  CFRelease(v18);
  CFRelease(v13);
  CFRelease(v15);
LABEL_13:
  CFRelease(UInt64);
LABEL_14:
  if (Key) {
    goto LABEL_33;
  }
LABEL_15:
  uint64_t v20 = FigImageQueueCreateForCoreAnimation((uint64_t)v9, v19, &cf);
  if (!v20)
  {
    uint64_t FigBaseObject = FigImageQueueGetFigBaseObject(cf);
    uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v22) {
      uint64_t v23 = v22;
    }
    else {
      uint64_t v23 = 0;
    }
    uint64_t v24 = *(uint64_t (**)(uint64_t, __CFString *, void))(v23 + 56);
    if (!v24)
    {
      uint64_t Key = 4294954514;
      goto LABEL_33;
    }
    uint64_t v20 = v24(FigBaseObject, @"EnableImageQueueTiming", *MEMORY[0x1E4F1CFD0]);
    if (!v20)
    {
      MEMORY[0x19970E910](*(void *)(v7 + 80));
      if (!*(unsigned char *)(v7 + 88)) {
        goto LABEL_29;
      }
      CFMutableDictionaryRef v25 = CFDictionaryCreateMutable(*v11, 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (v25)
      {
        CFMutableDictionaryRef v26 = v25;
        FigCFDictionarySetValue();
        FigCFDictionarySetValue();
        uint64_t v27 = FigImageQueueGetFigBaseObject(cf);
        uint64_t v28 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v28) {
          uint64_t v29 = v28;
        }
        else {
          uint64_t v29 = 0;
        }
        uint64_t v30 = *(uint64_t (**)(uint64_t, __CFString *, CFMutableDictionaryRef))(v29 + 56);
        if (v30)
        {
          uint64_t Key = v30(v27, @"RendererPreparationInfo", v26);
          CFRelease(v26);
          if (!Key)
          {
LABEL_29:
            uint64_t Key = FigCFWeakReferenceTableAddValueAndGetKey();
            if (!Key)
            {
              MEMORY[0x19970E930](*(void *)(v7 + 80));
              *a3 = cf;
              CFTypeRef cf = 0;
              goto LABEL_33;
            }
          }
        }
        else
        {
          CFRelease(v26);
          uint64_t Key = 4294954514;
        }
      }
      else
      {
        uint64_t Key = FigSignalErrorAt();
      }
      MEMORY[0x19970E930](*(void *)(v7 + 80));
      goto LABEL_33;
    }
  }
  uint64_t Key = v20;
LABEL_33:
  if (v19) {
    CFRelease(v19);
  }
LABEL_35:
  if (cf) {
    CFRelease(cf);
  }
  return Key;
}

uint64_t videoTarget_beginTransitionToImageQueueConfigurationAtHostTime()
{
  return 4294951630;
}

uint64_t videoTarget_beginTransitionToImageQueueConfigurationImmediately()
{
  return 4294951630;
}

uint64_t videoTarget_createFigDataQueue(uint64_t a1, uint64_t a2, long long *a3, long long *a4, uint64_t a5)
{
  uint64_t v9 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  if (v9)
  {
    long long v16 = *a3;
    uint64_t v17 = *((void *)a3 + 2);
    long long v14 = *a4;
    uint64_t v15 = *((void *)a4 + 2);
    uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v10) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, long long *, long long *, uint64_t))(v11 + 48);
    if (v12)
    {
      long long v20 = v16;
      uint64_t v21 = v17;
      long long v18 = v14;
      uint64_t v19 = v15;
      return v12(v9, a2, &v20, &v18, a5);
    }
    else
    {
      return 4294954514;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t videoTarget_createFigDataChannelResource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  if (v7)
  {
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 104);
    if (v10)
    {
      return v10(v7, a2, a3, a4);
    }
    else
    {
      return 4294954514;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t videoTarget_copyPreferredDataChannelGroups(uint64_t a1, const __CFAllocator *a2, CFArrayRef *a3)
{
  if (a3
    && (CFArrayRef v5 = *(const __CFArray **)(CMBaseObjectGetDerivedStorage() + 56)) != 0
    && (CFArrayRef Copy = CFArrayCreateCopy(a2, v5)) != 0)
  {
    *a3 = Copy;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t videoTarget_copyDataChannelSettings(uint64_t a1, const __CFAllocator *a2, CFArrayRef *a3)
{
  if (a3)
  {
    CFArrayRef v5 = *(const __CFArray **)(CMBaseObjectGetDerivedStorage() + 64);
    if (v5)
    {
      CFArrayRef Copy = CFArrayCreateCopy(a2, v5);
      if (Copy)
      {
LABEL_4:
        *a3 = Copy;
        return 0;
      }
    }
    else
    {
      CFArrayRef Copy = CFArrayCreate(a2, 0, 0, MEMORY[0x1E4F1D510]);
      if (Copy) {
        goto LABEL_4;
      }
    }
  }

  return FigSignalErrorAt();
}

uint64_t videoTarget_beginTransitionToDataChannelConfigurationAtHostTime(uint64_t a1, const void *a2, uint64_t a3)
{
  if (a2 && (*(unsigned char *)(a3 + 12) & 1) != 0)
  {
    long long v4 = *(_OWORD *)a3;
    uint64_t v5 = *(void *)(a3 + 16);
    return videoTarget_beginTransitionToDataChannelConfigurationInternal(a1, a2, 0, &v4);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t videoTarget_beginTransitionToDataChannelConfigurationImmediately(uint64_t a1, const void *a2)
{
  if (a2) {
    return videoTarget_beginTransitionToDataChannelConfigurationInternal(a1, a2, 1, MEMORY[0x1E4F1F9F8]);
  }
  else {
    return FigSignalErrorAt();
  }
}

uint64_t videoTarget_setActive(uint64_t a1, int a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    uint64_t v4 = DerivedStorage;
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 40));
    if (*(unsigned __int8 *)(v4 + 32) == a2)
    {
LABEL_18:
      MEMORY[0x19970E930](*(void *)(v4 + 40));
      return 0;
    }
    if (dword_1E93510C8)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v6 = *(const void **)(v4 + 48);
    if (a2)
    {
      if (!v6)
      {
        LOBYTE(a2) = 1;
LABEL_17:
        *(unsigned char *)(v4 + 32) = a2;
        goto LABEL_18;
      }
      uint64_t v7 = *(void *)(v4 + 8);
      if (v7)
      {
        uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v8) {
          uint64_t v9 = v8;
        }
        else {
          uint64_t v9 = 0;
        }
        uint64_t v10 = *(void (**)(uint64_t, const void *, uint64_t, long long *))(v9 + 56);
        if (v10)
        {
          long long v12 = *MEMORY[0x1E4F1F9F8];
          uint64_t v13 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
          v10(v7, v6, 1, &v12);
        }
      }
      uint64_t v6 = *(const void **)(v4 + 48);
      LOBYTE(a2) = 1;
    }
    if (v6)
    {
      CFRelease(v6);
      *(void *)(v4 + 48) = 0;
    }
    goto LABEL_17;
  }

  return FigSignalErrorAt();
}

void videoTarget_sendImageQueueMessageToReceiver(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t v6 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (v6)
  {
    uint64_t v7 = v6;
    CFTypeID v8 = CFGetTypeID(v6);
    MEMORY[0x19970EE10](&FigVideoTargetGetClassID_sRegisterFigVideoTargetTypeOnce, RegisterFigVideoTargetType);
    if (v8 == CMBaseClassGetCFTypeID()
      && a1
      && a2
      && (uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage(), *(void *)(DerivedStorage + 8)))
    {
      uint64_t v10 = DerivedStorage;
      uint64_t Identifier = CAImageQueueGetIdentifier();
      int v12 = CAXPCImageQueueCommandForMessage();
      if (v12 == 4)
      {
        if (a3) {
          CFRelease(a3);
        }
        uint64_t v16 = *(void *)(v10 + 8);
        uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v17) {
          uint64_t v18 = v17;
        }
        else {
          uint64_t v18 = 0;
        }
        uint64_t v23 = *(void (**)(uint64_t, uint64_t))(v18 + 32);
        if (v23) {
          v23(v16, Identifier);
        }
      }
      else if (v12 == 1)
      {
        uint64_t v13 = *(void *)(v10 + 8);
        uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v14) {
          uint64_t v15 = v14;
        }
        else {
          uint64_t v15 = 0;
        }
        uint64_t v22 = *(void (**)(uint64_t, uint64_t, void, uint64_t))(v15 + 24);
        if (v22) {
          v22(v13, Identifier, 0, a2);
        }
      }
      else
      {
        uint64_t v19 = *(void *)(v10 + 8);
        uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v20) {
          uint64_t v21 = v20;
        }
        else {
          uint64_t v21 = 0;
        }
        uint64_t v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 40);
        if (v24) {
          v24(v19, Identifier, a2);
        }
      }
    }
    else
    {
      FigSignalErrorAt();
    }
    CFRelease(v7);
  }
  else
  {
    FigSignalErrorAt();
  }
}

uint64_t videoTarget_beginTransitionToDataChannelConfigurationInternal(uint64_t a1, const void *a2, uint64_t a3, long long *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage && (uint64_t v8 = DerivedStorage, *(void *)(DerivedStorage + 8)))
  {
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 40));
    if (*(unsigned char *)(v8 + 32))
    {
      uint64_t v9 = *(void *)(v8 + 8);
      long long v16 = *a4;
      uint64_t v17 = *((void *)a4 + 2);
      uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v10) {
        uint64_t v11 = v10;
      }
      else {
        uint64_t v11 = 0;
      }
      uint64_t v14 = *(uint64_t (**)(uint64_t, const void *, uint64_t, long long *))(v11 + 56);
      if (v14)
      {
        long long v18 = v16;
        uint64_t v19 = v17;
        uint64_t v13 = v14(v9, a2, a3, &v18);
      }
      else
      {
        uint64_t v13 = 4294954514;
      }
    }
    else
    {
      if (a3)
      {
        int v12 = *(const void **)(v8 + 48);
        *(void *)(v8 + 48) = a2;
        if (a2) {
          CFRetain(a2);
        }
        if (v12) {
          CFRelease(v12);
        }
      }
      uint64_t v13 = 0;
    }
    MEMORY[0x19970E930](*(void *)(v8 + 40));
    return v13;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t MTFinishUpdatingIncrementalCodeCoverageData()
{
  return 4294949395;
}

uint64_t MTBeginUpdatingIncrementalCodeCoverageData()
{
  return 4294949395;
}

uint64_t MTEnsureReadyToCollectIncrementalCoverageData()
{
  return 4294949395;
}

uint64_t MTSetCodeCoverageFilePathPattern()
{
  return 4294949395;
}

uint64_t CreatePesPrivateForMPEG2Video(void *a1)
{
  if (a1[6])
  {
    uint64_t v2 = (void (*)(void *))a1[107];
    if (v2) {
      v2(a1);
    }
    a1[6] = 0;
  }
  CFAllocatorRef v3 = malloc_type_calloc(1uLL, 0x130uLL, 0x10B004003C638B1uLL);
  if (!v3) {
    return 12;
  }
  uint64_t v4 = v3;
  a1[6] = v3;
  a1[105] = MPEG2VideoProcessData;
  a1[106] = MPEG2VideoCleanPrivateData;
  a1[107] = MPEG2VideoDeletePrivateData;
  a1[108] = MPEG2VideoFlushFrames;
  PesFrameHeadersInit((uint64_t)(a1 + 68), 8uLL);
  MPEG2VideoCleanPrivateData((uint64_t)a1);
  v4[16] = 0;
  v4 += 16;
  v4[1] = v4;
  FrameQueueEntryInit((uint64_t)(v4 + 2));
  return 0;
}

uint64_t MPEG2VideoProcessData(uint64_t a1, OpaqueCMBlockBuffer *a2, size_t a3, char *a4, uint64_t a5, uint64_t a6)
{
  return MPEG2VideoProcessWork(a1, a2, a3, a4, a5, a6, 0);
}

uint64_t *MPEG2VideoCleanPrivateData(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  *(_DWORD *)uint64_t v1 = -1;
  *(_DWORD *)(v1 + 80) = 0;
  *(_OWORD *)(v1 + 8) = 0u;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_OWORD *)(v1 + 40) = 0u;
  *(_OWORD *)(v1 + 56) = 0u;
  *(void *)(v1 + 72) = 0;
  uint64_t v2 = *(const void **)(v1 + 88);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(v1 + 88) = 0;
  }
  *(_WORD *)(v1 + 113) = 0;
  *(unsigned char *)(v1 + 296) = 0;
  *(_DWORD *)(v1 + 300) = 0;
  FrameQueueEntryClean(v1 + 144);

  return FrameQueueClean(v1 + 128);
}

void MPEG2VideoDeletePrivateData(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  MPEG2VideoCleanPrivateData(a1);
  PesFrameHeaderDestroy((void *)(v2 + 232));
  free(*(void **)(a1 + 48));
  *(void *)(a1 + 48) = 0;
}

uint64_t *MPEG2VideoFlushFrames(void *a1)
{
  uint64_t v2 = (void *)a1[6];
  size_t v7 = 0;
  char v6 = 0;
  CFAllocatorRef v3 = (OpaqueCMBlockBuffer *)v2[11];
  if (v3)
  {
    PesAddBlockBufferToFrameBlockBuffer((uint64_t)a1, v3, v2[12], v2[13], 0, &v7, &v6);
    uint64_t v4 = (const void *)v2[11];
    if (v4)
    {
      CFRelease(v4);
      v2[11] = 0;
    }
  }
  if (a1[77] || a1[64]) {
    MPEG2VideoEmitBuffer((uint64_t)a1, (uint64_t)v2);
  }
  FigMPEG2VideoFrameFlush((uint64_t)a1);
  return MPEG2VideoCleanPrivateData((uint64_t)a1);
}

uint64_t MPEG2VideoSniff(OpaqueCMBlockBuffer *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  DataCFIndex Length = CMBlockBufferGetDataLength(a1);
  size_t v3 = DataLength - 4;
  if (DataLength == 4)
  {
    unsigned int v8 = 0;
    char v7 = 0;
    int v6 = 0;
    int v5 = 0;
    int v4 = 0;
LABEL_26:
    if (v5) {
      BOOL v14 = v6 == 0;
    }
    else {
      BOOL v14 = 1;
    }
    int v16 = !v14 && v4 != 0;
    uint64_t result = 4294954325;
    if (v7 || v16)
    {
      if (((v8 > 4) & v16) != 0) {
        return 0;
      }
      else {
        return 4294954325;
      }
    }
  }
  else
  {
    int v4 = 0;
    int v5 = 0;
    int v6 = 0;
    char v7 = 0;
    unsigned int v8 = 0;
    size_t v9 = 0;
    uint64_t v17 = 0;
    while (1)
    {
      uint64_t result = CMBlockBufferAccessDataBytes(a1, v9, 4uLL, temporaryBlock, &v17);
      if (result) {
        break;
      }
      if (*v17 || v17[1] || v17[2] != 1)
      {
        uint64_t v13 = 1;
      }
      else
      {
        if (!v9) {
          char v7 = 1;
        }
        unsigned int v11 = v17[3];
        BOOL v12 = v11 - 176 > 6 || ((1 << (v11 + 80)) & 0x43) == 0;
        if (!v12 || v11 > 0xB8) {
          return 4294954325;
        }
        ++v8;
        if (v11 == 184)
        {
          int v6 = 1;
        }
        else if (v11 == 179)
        {
          int v5 = 1;
        }
        else if (!v17[3])
        {
          int v4 = 1;
        }
        uint64_t v13 = 4;
      }
      v9 += v13;
      if (v9 >= v3) {
        goto LABEL_26;
      }
    }
  }
  return result;
}

uint64_t MPEG2VideoInitialize(void *a1)
{
  a1[21] = MPEG2VideoInject;
  a1[22] = MPEG2VideoReset;
  uint64_t v2 = malloc_type_calloc(1uLL, 0x60uLL, 0x10A0040A345989DuLL);
  if (!v2) {
    return 12;
  }
  *(void *)uint64_t v2 = a1;
  v2[10] = 1;
  *((void *)v2 + 3) = 0;
  *((void *)v2 + 4) = v2 + 6;
  uint64_t v3 = a1[2];
  *((void *)v2 + 1) = v3;
  if (v3) {
    *(void *)(v3 + 16) = v2 + 2;
  }
  uint64_t v5 = 0;
  a1[2] = v2;
  *((void *)v2 + 2) = a1 + 2;
  return AddPes((uint64_t)a1, (uint64_t)v2, 0, 1836476772, 0, 1, 1, 1, 1, &v5);
}

uint64_t MPEG2VideoInject(uint64_t a1, CMBlockBufferRef theBuffer, uint64_t a3)
{
  long long v8 = 0u;
  long long v9 = 0u;
  uint64_t v4 = *(void *)(a1 + 24);
  if (*(unsigned char *)(v4 + 451))
  {
    unsigned __int8 v5 = 0;
  }
  else
  {
    *(void *)&long long v8 = 10000;
    unsigned __int8 v5 = 1;
    BYTE8(v9) = 1;
    *(unsigned char *)(v4 + 451) = 1;
  }
  *(_WORD *)((char *)&v9 + 9) = v5;
  *(void *)&long long v9 = a3;
  DataCFIndex Length = CMBlockBufferGetDataLength(theBuffer);
  return MPEG2VideoProcessWork(v4, theBuffer, 0, 0, DataLength, (uint64_t)&v8, 1);
}

uint64_t MPEG2VideoReset(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (v1) {
    *(unsigned char *)(v1 + 451) = 0;
  }
  return result;
}

uint64_t MPEG2VideoProcessWork(uint64_t a1, OpaqueCMBlockBuffer *a2, size_t a3, char *a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v57 = a5;
  char v7 = a4;
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t v10 = *(void *)(a1 + 616);
  if (*(void *)(v9 + 88)) {
    uint64_t v10 = v10 + *(void *)(v9 + 104) - 4;
  }
  if (a2) {
    size_t v11 = a3;
  }
  else {
    size_t v11 = 0;
  }
  if (*(unsigned char *)(a6 + 24))
  {
    *(void *)(v9 + 72) = 0;
    *(_OWORD *)(v9 + 8) = *(_OWORD *)(v9 + 40);
    *(_OWORD *)(v9 + 24) = *(_OWORD *)(v9 + 56);
    long long v12 = *(_OWORD *)(a6 + 16);
    *(_OWORD *)(v9 + 40) = *(_OWORD *)a6;
    *(_OWORD *)(v9 + 56) = v12;
  }
  size_t v63 = 0;
  dataPointerOut = 0;
  char v62 = 0;
  size_t v13 = v11 + a5;
  CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF90];
  size_t v58 = v11;
  uint64_t v59 = a1 + 544;
  CFAllocatorRef blockAllocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  size_t v50 = v11 + a5;
  while (1)
  {
    if (v7)
    {
      dataPointerOut = v7;
      size_t v14 = v13;
    }
    else
    {
      CMBlockBufferRef lengthAtOffsetOut = 0;
      uint64_t DataPointer = CMBlockBufferGetDataPointer(a2, v11, (size_t *)&lengthAtOffsetOut, 0, &dataPointerOut);
      size_t v14 = (size_t)lengthAtOffsetOut + v11;
      if (v13 < (unint64_t)lengthAtOffsetOut + v11) {
        size_t v14 = v13;
      }
      if (DataPointer)
      {
LABEL_122:
        uint64_t v44 = DataPointer;
        goto LABEL_123;
      }
    }
    if (v11 < v14) {
      break;
    }
LABEL_114:
    if (v11 >= v13)
    {
      if (!a2 || !*(_DWORD *)(v9 + 80) || !*(unsigned char *)(v9 + 112)) {
        return 0;
      }
      unsigned int v45 = *(OpaqueCMBlockBuffer **)(v9 + 88);
      if (v45)
      {
        uint64_t v44 = PesAddBlockBufferToFrameBlockBuffer(a1, v45, *(void *)(v9 + 96), *(void *)(v9 + 104), 0, &v63, &v62);
        CMTimeValue v46 = *(const void **)(v9 + 88);
        size_t v47 = v58;
        if (v46) {
          CFRelease(v46);
        }
      }
      else
      {
        uint64_t v44 = 0;
        size_t v47 = v58;
      }
      *(void *)(v9 + 88) = CFRetain(a2);
      *(void *)(v9 + 96) = v47;
      *(void *)(v9 + 104) = v57;
      return v44;
    }
  }
  size_t v16 = 3 - v11;
  size_t v17 = v11 - 3;
  size_t v51 = v14;
  uint64_t v60 = -(uint64_t)v14;
  while (1)
  {
    int v18 = *(_DWORD *)v9;
    int v19 = v18 << 8;
    *(_DWORD *)v9 <<= 8;
    uint64_t v20 = dataPointerOut;
    int v21 = *dataPointerOut | (v18 << 8);
    *(_DWORD *)uint64_t v9 = v21;
    dataPointerOut = v20 + 1;
    unint64_t v22 = v17 + 4;
    ++*(void *)(v9 + 72);
    if (*(_DWORD *)(v9 + 80)) {
      break;
    }
    if (v19 == 256)
    {
      if (v21 == 256)
      {
        *(_DWORD *)(v9 + 80) = 2;
        *(void *)(v9 + 120) = 0;
        MPEG2SetLoadingFramePesHeader(a1, v9);
        if (*(_DWORD *)(v9 + 80)) {
          goto LABEL_39;
        }
      }
      else if (v21 == 440 || v21 == 435)
      {
        *(_DWORD *)(v9 + 80) = 1;
        if (v21 == 435) {
          *(_DWORD *)(a1 + 536) |= 2u;
        }
LABEL_39:
        if (a7)
        {
          *(void *)(a1 + 496) = v17 + *(void *)(a6 + 16);
          *(unsigned char *)(a1 + 504) = 1;
        }
        else
        {
          uint64_t v28 = 56;
          if (*(void *)(v9 + 72) < 4uLL) {
            uint64_t v28 = 24;
          }
          *(void *)(a1 + 496) = *(void *)(v9 + v28);
        }
        PesFrameHeaderAddOffset(v59, 0, *(unsigned char *)v9);
        if (v22 >= v58 + 4)
        {
          uint64_t v10 = 0;
          if (a4) {
            BOOL v29 = 0;
          }
          else {
            BOOL v29 = *(unsigned char *)(a1 + 116) == 0;
          }
          char v30 = v29;
          *(unsigned char *)(v9 + 112) = v30;
          v57 += v16 + v58;
          size_t v58 = v17;
        }
        else
        {
          uint64_t v10 = 0;
          *(unsigned char *)(v9 + 112) = 0;
        }
      }
    }
LABEL_112:
    --v16;
    ++v17;
    ++v11;
    if (v60 + v17 == -3)
    {
      size_t v13 = v50;
      size_t v11 = v51;
      char v7 = a4;
      goto LABEL_114;
    }
  }
  if (*(unsigned char *)(v9 + 112))
  {
LABEL_61:
    ++v10;
    if (v19 == 256)
    {
      CMBlockBufferRef lengthAtOffsetOut = 0;
      int v33 = *(_DWORD *)v9;
      if (*(_DWORD *)(v9 + 80) == 1)
      {
        if (v33 == 256)
        {
          size_t v34 = 0;
          *(_DWORD *)(v9 + 80) = 2;
          goto LABEL_100;
        }
LABEL_74:
        size_t v34 = 0;
      }
      else
      {
        if (((v33 - 435) > 5 || ((1 << (v33 + 77)) & 0x31) == 0) && v33 != 256) {
          goto LABEL_74;
        }
        if (*(unsigned char *)(v9 + 112))
        {
          CFRange v35 = *(OpaqueCMBlockBuffer **)(v9 + 88);
          size_t v36 = v58;
          unint64_t v37 = v58 + 4;
          if (v35)
          {
            if (v22 >= v37)
            {
              uint64_t DataPointer = PesAddBlockBufferToFrameBlockBuffer(a1, v35, *(void *)(v9 + 96), *(void *)(v9 + 104), 0, &v63, &v62);
              if (DataPointer) {
                goto LABEL_122;
              }
              CFTypeRef v39 = *(const void **)(v9 + 88);
              if (v39) {
                CFRelease(v39);
              }
              size_t v34 = 0;
              *(void *)(v9 + 88) = 0;
            }
            else
            {
              size_t v38 = *(void *)(v9 + 104);
              if (v38 <= v58 + v16)
              {
                size_t v34 = v16 + v58 - v38;
                *(void *)(a1 + 616) = v17 + v38 + *(void *)(a1 + 616) - v58;
                uint64_t DataPointer = CMBlockBufferCreateWithMemoryBlock(blockAllocator, 0, v34, blockAllocator, 0, 0, v34, 1u, &lengthAtOffsetOut);
                if (DataPointer) {
                  goto LABEL_122;
                }
                uint64_t DataPointer = CMBlockBufferFillDataBytes(0, lengthAtOffsetOut, 0, v34);
                if (DataPointer) {
                  goto LABEL_122;
                }
              }
              else
              {
                uint64_t DataPointer = PesAddBlockBufferToFrameBlockBuffer(a1, v35, *(void *)(v9 + 96), v17 + v38 - v58, 0, &v63, &v62);
                if (DataPointer) {
                  goto LABEL_122;
                }
                size_t v34 = 0;
                *(void *)(v9 + 96) = v17 + *(void *)(v9 + 104) + *(void *)(v9 + 96) - v58;
                *(void *)(v9 + 104) = v58 + v16;
              }
            }
          }
          else
          {
            size_t v34 = 0;
          }
          if (v17 + 3 >= v37)
          {
            uint64_t DataPointer = PesAddBlockBufferToFrameBlockBuffer(a1, a2, v58, v17 - v58, 0, &v63, &v62);
            if (DataPointer) {
              goto LABEL_122;
            }
            v57 -= v11 - 3 - v58;
            size_t v36 = v11 - 3;
          }
        }
        else
        {
          size_t v34 = 0;
          v57 += v16 + v58;
          size_t v36 = v17;
        }
        uint64_t DataPointer = MPEG2VideoEmitBuffer(a1, v9);
        if (DataPointer) {
          goto LABEL_122;
        }
        if (a7)
        {
          *(void *)(a1 + 496) = v17 + *(void *)(a6 + 16);
          *(unsigned char *)(a1 + 504) = 1;
        }
        else
        {
          uint64_t v40 = 56;
          if (*(void *)(v9 + 72) < 4uLL) {
            uint64_t v40 = 24;
          }
          *(void *)(a1 + 496) = *(void *)(v9 + v40);
        }
        size_t v58 = v36;
        if (a4) {
          BOOL v41 = 0;
        }
        else {
          BOOL v41 = *(unsigned char *)(a1 + 116) == 0;
        }
        char v42 = v41;
        *(unsigned char *)(v9 + 112) = v42;
        int v33 = *(_DWORD *)v9;
        if (*(_DWORD *)v9 == 256)
        {
          uint64_t v10 = 0;
LABEL_100:
          *(void *)(v9 + 120) = v10;
          MPEG2SetLoadingFramePesHeader(a1, v9);
          int v33 = *(_DWORD *)v9;
        }
        else
        {
          uint64_t v10 = 0;
          *(_DWORD *)(v9 + 80) = 1;
        }
      }
      PesFrameHeaderAddOffset(v59, v10, v33);
      switch(*(_DWORD *)v9)
      {
        case 0x1B2:
          *(unsigned char *)(v9 + 114) = 1;
          break;
        case 0x1B3:
          int v43 = *(_DWORD *)(a1 + 536) | 2;
          goto LABEL_106;
        case 0x1B7:
          int v43 = *(_DWORD *)(a1 + 536) | 0x800;
LABEL_106:
          *(_DWORD *)(a1 + 536) = v43;
          break;
        case 0x1B8:
          *(unsigned char *)(v9 + 113) = 1;
          break;
        default:
          break;
      }
      if (lengthAtOffsetOut)
      {
        uint64_t v44 = PesAddBlockBufferToFrameBlockBuffer(a1, lengthAtOffsetOut, 0, v34, 0, &v63, &v62);
        if (lengthAtOffsetOut) {
          CFRelease(lengthAtOffsetOut);
        }
        if (v44) {
          goto LABEL_123;
        }
      }
      goto LABEL_112;
    }
    goto LABEL_112;
  }
  uint64_t v23 = *(void **)(a1 + 608);
  CFIndex v24 = *(void *)(a1 + 624);
  if (!v23)
  {
    if (v24)
    {
      if (*(unsigned char *)(a1 + 119)) {
        CFIndex v24 = (v24 + 15) & 0xFFFFFFFFFFFFFFF0;
      }
    }
    else
    {
      CFIndex v24 = *(void *)(a1 + 640);
      if (!v24)
      {
        *(void *)(a1 + 640) = 0x2000;
        CFIndex v24 = 0x2000;
        if (!(*(void *)(*(void *)(a1 + 8) + 104) >> 13)) {
          goto LABEL_28;
        }
      }
    }
    uint64_t v32 = CFAllocatorAllocate(allocator, v24, 0);
    *(void *)(a1 + 608) = v32;
    if (!v32) {
      goto LABEL_127;
    }
    *(void *)(a1 + 632) = v24;
    *(void *)(a1 + 616) = 0;
    goto LABEL_58;
  }
  unint64_t v25 = *(void *)(a1 + 616);
  if (v24) {
    BOOL v26 = v24 == v25;
  }
  else {
    BOOL v26 = 0;
  }
  if (!v26) {
    ++v25;
  }
  if (*(unsigned char *)(a1 + 119)) {
    unint64_t v25 = (v25 + 15) & 0xFFFFFFFFFFFFFFF0;
  }
  if (v25 <= *(void *)(a1 + 632)) {
    goto LABEL_58;
  }
  unint64_t v27 = (v25 + 0x1FFF) & 0xFFFFFFFFFFFFE000;
  *(void *)(a1 + 640) = v27;
  if (v27 <= *(void *)(*(void *)(a1 + 8) + 104))
  {
    uint64_t v31 = CFAllocatorReallocate(allocator, v23, v27, 0);
    *(void *)(a1 + 608) = v31;
    *(void *)(a1 + 632) = *(void *)(a1 + 640);
    goto LABEL_59;
  }
LABEL_28:
  PesErrorHandling(a1, 4294954325);
LABEL_58:
  uint64_t v31 = *(unsigned char **)(a1 + 608);
LABEL_59:
  if (v31)
  {
    v31[(*(void *)(a1 + 616))++] = HIBYTE(v18);
    goto LABEL_61;
  }
LABEL_127:
  uint64_t v44 = 0;
LABEL_123:
  PesErrorHandling(a1, v44);
  return v44;
}

uint64_t MPEG2SetLoadingFramePesHeader(uint64_t result, uint64_t a2)
{
  if (*(void *)(a2 + 72) > 3uLL)
  {
    uint64_t v2 = (uint64_t *)(a2 + 40);
    *(_WORD *)(result + 504) = *(_WORD *)(a2 + 64);
    uint64_t v3 = (unsigned char *)(a2 + 65);
    uint64_t v4 = (char *)(a2 + 66);
    unsigned __int8 v5 = (uint64_t *)(a2 + 48);
  }
  else
  {
    uint64_t v2 = (uint64_t *)(a2 + 8);
    *(_WORD *)(result + 504) = *(_WORD *)(a2 + 32);
    uint64_t v3 = (unsigned char *)(a2 + 33);
    uint64_t v4 = (char *)(a2 + 34);
    unsigned __int8 v5 = (uint64_t *)(a2 + 16);
  }
  char v6 = *v4;
  uint64_t v7 = *v2;
  uint64_t v8 = *v5;
  *uint64_t v3 = 0;
  *uint64_t v4 = 0;
  *(unsigned char *)(result + 506) = v6;
  *(void *)(result + 480) = v7;
  *(void *)(result + 488) = v8;
  return result;
}

uint64_t MPEG2VideoEmitBuffer(uint64_t a1, uint64_t a2)
{
  char *returnedPointerOut;
  unsigned char temporaryBlock[5];
  char v42;
  unsigned __int8 v43;
  char v44;
  unsigned __int16 v45;
  unsigned __int8 destination;
  __int16 v47;

  size_t v47 = 0;
  uint64_t destination = 0;
  unsigned int v45 = 0;
  uint64_t BlockBufferFromFrameMemory = (uint64_t)PesFrameHeaderFinalizeFrame((void *)a1, 0);
  if (BlockBufferFromFrameMemory) {
    goto LABEL_81;
  }
  uint64_t BlockBufferFromFrameMemory = PesCreateBlockBufferFromFrameMemory(a1);
  if (BlockBufferFromFrameMemory) {
    goto LABEL_81;
  }
  if (CMBlockBufferGetDataLength(*(CMBlockBufferRef *)(a1 + 512)) < 8)
  {
    uint64_t v5 = 4294954320;
    goto LABEL_82;
  }
  if ((*(unsigned char *)(a1 + 536) & 2) == 0 && !*(unsigned char *)(a2 + 114) && !*(unsigned char *)(a2 + 115) || !*(void *)(a1 + 544))
  {
    int v6 = 0;
    goto LABEL_53;
  }
  int v6 = 0;
  int v7 = 0;
  int v8 = 0;
  int v9 = 0;
  unint64_t v10 = 0;
  size_t v11 = (uint64_t *)(a1 + 72);
  do
  {
    int v12 = *(unsigned __int8 *)(*(void *)(a1 + 576) + v10);
    switch(v12)
    {
      case 178:
        if (*(void *)(*(void *)(a1 + 568) + 8 * v10) < 0xBuLL)
        {
LABEL_32:
          if (!*(unsigned char *)(*(void *)(a1 + 576) + v10)) {
            int v7 = 1;
          }
          break;
        }
        returnedPointerOut = 0;
        size_t v13 = *(void *)(*(void *)(a1 + 560) + 8 * v10) + 4;
        uint64_t BlockBufferFromFrameMemory = CMBlockBufferAccessDataBytes(*(CMBlockBufferRef *)(a1 + 512), v13, 5uLL, temporaryBlock, &returnedPointerOut);
        if (BlockBufferFromFrameMemory) {
          goto LABEL_81;
        }
        if (*returnedPointerOut == 71
          && returnedPointerOut[1] == 65
          && returnedPointerOut[2] == 57
          && returnedPointerOut[3] == 52
          && returnedPointerOut[4] == 3)
        {
          uint64_t v14 = *v11;
          if (*v11) {
            goto LABEL_118;
          }
          uint64_t BlockBufferFromFrameMemory = AddPes(*(void *)(a1 + 8), *(void *)a1, 0, 1635017571, 0, 0, *(_DWORD *)(a1 + 64) << 8, 0xFFFF, 1, (void *)(a1 + 72));
          if (BlockBufferFromFrameMemory) {
            goto LABEL_81;
          }
          uint64_t v14 = *v11;
          if (*v11)
          {
LABEL_118:
            if (*(void *)(v14 + 84))
            {
              CMBlockBufferRef blockBufferOut = 0;
              uint64_t BlockBufferFromFrameMemory = CMBlockBufferCreateWithBufferReference(*(CFAllocatorRef *)(*(void *)(a1 + 8) + 40), *(CMBlockBufferRef *)(a1 + 512), v13, *(void *)(*(void *)(a1 + 568) + 8 * v10) - 4, 0, &blockBufferOut);
              if (BlockBufferFromFrameMemory) {
                goto LABEL_81;
              }
              uint64_t v5 = CloseCaptionQueueAdd(a1 + 520, blockBufferOut);
              if (blockBufferOut) {
                CFRelease(blockBufferOut);
              }
              if (v5) {
                goto LABEL_82;
              }
            }
          }
        }
        break;
      case 181:
        uint64_t v15 = *(void *)(*(void *)(a1 + 560) + 8 * v10);
        uint64_t BlockBufferFromFrameMemory = CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(a1 + 512), v15 + 4, 1uLL, (char *)&v47 + 1);
        if (BlockBufferFromFrameMemory) {
          goto LABEL_81;
        }
        int v16 = HIBYTE(v47) & 0xF0;
        if (v7)
        {
          if (v16 == 128)
          {
            uint64_t BlockBufferFromFrameMemory = CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(a1 + 512), v15 + 6, 3uLL, &v42);
            if (BlockBufferFromFrameMemory) {
              goto LABEL_81;
            }
            int v6 = 1;
          }
        }
        else
        {
          if (v16 == 16)
          {
            uint64_t BlockBufferFromFrameMemory = CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(a1 + 512), v15 + 6, 1uLL, (char *)&v47 + 1);
            if (BlockBufferFromFrameMemory) {
              goto LABEL_81;
            }
            int v9 = 1;
            *(unsigned char *)(a2 + 115) = ((HIBYTE(v47) >> 3) & 1) == 0;
            uint64_t BlockBufferFromFrameMemory = CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(a1 + 512), v15 + 8, 1uLL, &v47);
            if (BlockBufferFromFrameMemory) {
              goto LABEL_81;
            }
          }
          int v7 = 0;
        }
        break;
      case 179:
        if (!v8)
        {
          uint64_t BlockBufferFromFrameMemory = CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(a1 + 512), *(void *)(*(void *)(a1 + 560) + 8 * v10) + 7, 1uLL, &destination);
          if (BlockBufferFromFrameMemory) {
            goto LABEL_81;
          }
          destination &= 0xFu;
          int v8 = 1;
        }
        break;
      default:
        goto LABEL_32;
    }
    ++v10;
  }
  while (v10 < *(void *)(a1 + 544));
  if (v8)
  {
    uint64_t v17 = destination;
    if (destination >= 9uLL) {
      goto LABEL_114;
    }
    int v18 = mpeg2FrameRatesNum[destination];
    *(_DWORD *)(a1 + 804) = v18;
    int v19 = mpeg2FrameRatesDen[v17];
    *(_DWORD *)(a1 + 808) = v19;
    if (v9 && (v47 & 0x7F) != 0)
    {
      char v20 = HIBYTE(v47);
      v18 *= (HIBYTE(v47) >> 5) & 4;
      *(_DWORD *)(a1 + 804) = v18;
      *(_DWORD *)(a1 + 808) = v19 + v19 * (v20 & 0x1F);
    }
    if (!v18)
    {
LABEL_114:
      uint64_t BlockBufferFromFrameMemory = FigSignalErrorAt();
      goto LABEL_81;
    }
  }
LABEL_53:
  if (!*(_DWORD *)(a1 + 808)) {
    *(_WORD *)(a1 + 505) = 0;
  }
  uint64_t BlockBufferFromFrameMemory = CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(a1 + 512), *(void *)(a2 + 120) + 4, 2uLL, &v45);
  if (!BlockBufferFromFrameMemory)
  {
    unsigned int v21 = bswap32(v45);
    unsigned int v22 = HIWORD(v21);
    unsigned int v45 = HIWORD(v21);
    int v23 = (v21 >> 19) & 7;
    *(unsigned char *)(a1 + 590) = v23;
    *(unsigned char *)(a1 + 600) = v23 == 3;
    if (v23 == 3)
    {
      int v24 = 4;
      goto LABEL_66;
    }
    if (*(unsigned char *)(a1 + 506) && *(unsigned char *)(a1 + 505) && *(void *)(a1 + 480) == *(void *)(a1 + 488)) {
      *(unsigned char *)(a1 + 506) = 0;
    }
    if (v23 == 1)
    {
      int v24 = 16;
LABEL_66:
      *(_DWORD *)(a1 + 536) |= v24;
    }
    else if (v23 == 2)
    {
      int v24 = 8;
      goto LABEL_66;
    }
    if (*(unsigned char *)(a2 + 113)) {
      *(_DWORD *)(a1 + 536) |= 0x20u;
    }
    if (!*(unsigned char *)(a2 + 115))
    {
LABEL_80:
      uint64_t BlockBufferFromFrameMemory = FigMPEG2VideoFrameQueueEntryAdjustTimestampsAndEmit(a1, a1 + 456);
      goto LABEL_81;
    }
    if (!v6) {
      goto LABEL_114;
    }
    int v25 = v42 & 3;
    if (v25 == 3 || (v42 & 3) == 0)
    {
      *(unsigned char *)(a2 + 296) = 0;
      if (*(void *)(a2 + 200)) {
        FrameQueueEntryClean(a2 + 144);
      }
      FrameQueueClean(a2 + 128);
      if ((v44 & 0x80000000) == 0)
      {
        int v26 = (char)v43;
        *(unsigned char *)(a1 + 591) = v43 >> 7;
        *(_WORD *)(a1 + 588) = v45 >> 6;
        if (v26 >= 0) {
          int v27 = 1024;
        }
        else {
          int v27 = 512;
        }
        *(_DWORD *)(a1 + 536) = *(_DWORD *)(a1 + 536) & 0xFFFFF9FF | v27;
      }
      goto LABEL_80;
    }
    BOOL v29 = v25 == 1;
    int v30 = v25 == 1;
    *(unsigned char *)(a1 + 591) = v30;
    *(_WORD *)(a1 + 588) = v22 >> 6;
    if (v29) {
      int v31 = 512;
    }
    else {
      int v31 = 1024;
    }
    *(_DWORD *)(a1 + 536) = *(_DWORD *)(a1 + 536) & 0xFFFFF9FF | v31;
    if (*(unsigned char *)(a2 + 296))
    {
      if (*(void *)(a2 + 200))
      {
        if (*(unsigned __int8 *)(a2 + 279) != v30)
        {
          int v34 = *(unsigned __int8 *)(a2 + 278);
          if (v34 == v23 || v34 == 1 && v23 == 2)
          {
            uint64_t v5 = MPEG2VideoCombine2Fields(a1, a2 + 144, a1 + 456);
            FrameQueueEntryClean(a2 + 144);
            goto LABEL_82;
          }
        }
        FrameQueueEntryClean(a2 + 144);
        *(unsigned char *)(a2 + 296) = 0;
      }
LABEL_108:
      FrameQueueMove(a2 + 144, a1 + 456);
LABEL_109:
      uint64_t v5 = 0;
      goto LABEL_82;
    }
    int v32 = v23 | (16 * *(_DWORD *)(a2 + 300));
    *(_DWORD *)(a2 + 300) = v32;
    if (*(void *)(a2 + 200)
      && *(unsigned __int16 *)(a2 + 276) == *(unsigned __int16 *)(a1 + 588)
      && *(unsigned __int8 *)(a2 + 279) != *(unsigned __int8 *)(a1 + 591)
      && ((int v37 = *(unsigned __int8 *)(a2 + 278), v38 = *(unsigned __int8 *)(a1 + 590), v37 == v38)
       || v37 == 1 && v38 == 2)
      || (v32 & 0xFF7u) - 529 <= 1)
    {
      char v33 = 1;
      uint64_t BlockBufferFromFrameMemory = MPEG2VideoCombineFieldQueue(a1, a2, 1);
      if (BlockBufferFromFrameMemory) {
        goto LABEL_81;
      }
LABEL_103:
      *(unsigned char *)(a2 + 296) = 1;
    }
    else
    {
      char v33 = 0;
      if (v32 <= 0x32u && ((1 << v32) & 0x6000800080000) != 0)
      {
        uint64_t BlockBufferFromFrameMemory = MPEG2VideoCombineFieldQueue(a1, a2, 0);
        char v33 = 0;
        if (BlockBufferFromFrameMemory) {
          goto LABEL_81;
        }
        goto LABEL_103;
      }
    }
    if (*(void *)(a2 + 200))
    {
      Retainable = (void *)FrameQueueEntryMakeRetainable(a1, a2 + 144);
      if (!Retainable)
      {
        uint64_t v5 = 12;
        goto LABEL_82;
      }
      void *Retainable = 0;
      size_t v36 = *(void **)(a2 + 136);
      Retainable[1] = v36;
      *size_t v36 = Retainable;
      *(void *)(a2 + 136) = Retainable;
    }
    if ((v33 & 1) == 0) {
      goto LABEL_108;
    }
    goto LABEL_109;
  }
LABEL_81:
  uint64_t v5 = BlockBufferFromFrameMemory;
LABEL_82:
  PesCleanAfterFrameEmit(a1);
  *(_WORD *)(a2 + 113) = 0;
  return v5;
}

uint64_t MPEG2VideoCombine2Fields(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = FigMPEG2VideoCombineFields(a1, a2, a3);
  if (!result)
  {
    return FigMPEG2VideoFrameQueueEntryAdjustTimestampsAndEmit(a1, a2);
  }
  return result;
}

uint64_t MPEG2VideoCombineFieldQueue(uint64_t a1, uint64_t a2, int a3)
{
  int v6 = (uint64_t **)(a2 + 128);
  int v7 = -1;
  int v8 = (void *)(a2 + 128);
  do
  {
    int v8 = (void *)*v8;
    ++v7;
  }
  while (v8);
  if (v7)
  {
    int v9 = v7 & 1;
    if (!a3) {
      int v9 = v9 == 0;
    }
    if (v9)
    {
      unint64_t v10 = *v6;
      uint64_t v11 = **v6;
      int v12 = (void *)(*v6)[1];
      if (v11)
      {
        *(void *)(v11 + 8) = v12;
        int v12 = (void *)v10[1];
      }
      else
      {
        *(void *)(a2 + 136) = v12;
      }
      *int v12 = v11;
      FrameQueueEntryDestroy((uint64_t)v10);
    }
    while (1)
    {
      size_t v13 = *v6;
      if (!*v6) {
        break;
      }
      uint64_t v14 = *v13;
      uint64_t v15 = (void *)v13[1];
      if (*v13)
      {
        *(void *)(v14 + 8) = v15;
        uint64_t v15 = (void *)v13[1];
      }
      else
      {
        *(void *)(a2 + 136) = v15;
      }
      *uint64_t v15 = v14;
      int v16 = *v6;
      if (!*v6)
      {
        if (a3) {
          return 4294954325;
        }
        uint64_t v22 = a2 + 144;
        uint64_t v24 = a1;
        uint64_t v23 = v22;
        goto LABEL_27;
      }
      if (*((unsigned __int8 *)v13 + 135) == *((unsigned __int8 *)v16 + 135)) {
        return 4294954325;
      }
      int v17 = *((unsigned __int8 *)v13 + 134);
      int v18 = *((unsigned __int8 *)v16 + 134);
      if (v17 != v18 && (v17 != 1 || v18 != 2)) {
        return 4294954325;
      }
      uint64_t v20 = MPEG2VideoCombine2Fields(a1, (uint64_t)v13, (uint64_t)v16);
      if (v20) {
        return v20;
      }
    }
  }
  if (!a3) {
    return 0;
  }
  uint64_t v22 = a2 + 144;
  uint64_t v23 = a1 + 456;
  uint64_t v24 = a1;
  size_t v13 = (uint64_t *)v22;
LABEL_27:
  uint64_t v21 = MPEG2VideoCombine2Fields(v24, (uint64_t)v13, v23);
  FrameQueueEntryClean(v22);
  return v21;
}

uint64_t FigSampleBufferRenderSynchronizerGetClassID()
{
  return sFigSampleBufferRenderSynchronizerClassID;
}

uint64_t RegisterFigSampleBufferRenderSynchronizerType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t FigSampleBufferRenderSynchronizerGetTypeID()
{
  MEMORY[0x19970EE10](&FigSampleBufferRenderSynchronizerGetClassID_sRegisterFigSampleBufferRenderSynchronizerTypeOnce, RegisterFigSampleBufferRenderSynchronizerType);

  return CMBaseClassGetCFTypeID();
}

CFStringRef FigSampleBufferRenderSynchronizerCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigSampleBufferRenderSynchronizer %p]", a1);
}

uint64_t CreatePesPrivateForPrivateStream(void *a1)
{
  if (a1[6])
  {
    uint64_t v2 = (void (*)(void *))a1[107];
    if (v2) {
      v2(a1);
    }
    a1[6] = 0;
  }
  uint64_t v3 = malloc_type_calloc(1uLL, 0x10uLL, 0x1020040EDED9539uLL);
  if (!v3) {
    return 12;
  }
  uint64_t v4 = v3;
  uint64_t result = 0;
  a1[6] = v4;
  *uint64_t v4 = 0;
  v4[1] = 0;
  a1[105] = PesPriProcessData;
  a1[106] = PesPriCleanPrivateData;
  a1[107] = PesPriDeletePrivateData;
  return result;
}

uint64_t PesPriProcessData(uint64_t *a1, CMBlockBufferRef theBuffer, size_t offset, uint64_t a4, unint64_t a5, uint64_t a6)
{
  char *returnedPointerOut;
  char temporaryBlock;

  int v7 = (uint64_t *)a1[6];
  if (!*(unsigned char *)(a6 + 24))
  {
    unint64_t v15 = v7[1];
    if (v15)
    {
      unint64_t v16 = v15 >= a5 ? a5 : v7[1];
      v7[1] = v15 - v16;
      if (v15 > a5) {
        return 0;
      }
    }
    goto LABEL_27;
  }
  temporaryBlocCFIndex k = 0;
  returnedPointerOut = 0;
  uint64_t v9 = CMBlockBufferAccessDataBytes(theBuffer, offset, 1uLL, &temporaryBlock, &returnedPointerOut);
  if (!v9)
  {
    unsigned int v10 = *returnedPointerOut;
    uint64_t PesFromStreamID = FindPesFromStreamID(a1[1], v10 | 0xBD00);
    if (PesFromStreamID)
    {
      *int v7 = PesFromStreamID;
    }
    else
    {
      int v17 = v10 & 0xF8;
      if (v17 == 128)
      {
        uint64_t v19 = 1633891104;
      }
      else if (v17 == 160)
      {
        int v22 = *(_DWORD *)(a1[1] + 48);
        if ((v22 - 2) < 2)
        {
          uint64_t v19 = 1886612592;
        }
        else
        {
          uint64_t v19 = 1819304813;
          if (v22 != 1 && v22 != 192) {
            uint64_t v19 = 1970170734;
          }
        }
      }
      else
      {
        if (v10 >= 0x20) {
          unsigned int v18 = 1937072720;
        }
        else {
          unsigned int v18 = 1970170734;
        }
        if (v17 == 136) {
          uint64_t v19 = 1685353248;
        }
        else {
          uint64_t v19 = v18;
        }
      }
      uint64_t v21 = AddPes(a1[1], *a1, 0, v19, 1, v10 | 0xBD00, v10 | 0xBD00, 0xFFFF, 1, v7);
      if (v21) {
        return v21;
      }
      uint64_t PesFromStreamID = *v7;
    }
    unsigned int v12 = *(_DWORD *)(PesFromStreamID + 60) & 0xFFFF00F8;
    unint64_t v13 = 4;
    if (v12 == 128 || v12 == 136 || v12 == 160 && ((v14 = *(_DWORD *)(a1[1] + 48), unint64_t v13 = 7, v14 == 192) || v14 == 1))
    {
      if (v13 > a5)
      {
        v7[1] = v13 - a5;
        return v9;
      }
    }
    v7[1] = 0;
LABEL_27:
    uint64_t v20 = *(uint64_t (**)(void))(*v7 + 840);
    if (v20) {
      return v20();
    }
    return 0;
  }
  return v9;
}

uint64_t PesPriCleanPrivateData(uint64_t result)
{
  **(void **)(result + 48) = 0;
  return result;
}

void PesPriDeletePrivateData(uint64_t a1)
{
  *(void *)(a1 + 48) = 0;
}

uint64_t CreatePesPrivateForRawPes(void *a1)
{
  if (a1[6])
  {
    uint64_t v2 = (void (*)(void *))a1[107];
    if (v2) {
      v2(a1);
    }
    a1[6] = 0;
  }
  uint64_t v3 = malloc_type_calloc(1uLL, 0x20uLL, 0x1000040F6D918ACuLL);
  if (!v3) {
    return 12;
  }
  uint64_t v4 = v3;
  uint64_t result = 0;
  a1[105] = PesRawProcessData;
  a1[106] = PesRawCleanPrivateData;
  a1[107] = PesRawDeletePrivateData;
  a1[6] = v4;
  return result;
}

uint64_t PesRawProcessData(void *a1, CMBlockBufferRef theBuffer, size_t offset, const void *a4, size_t dataLength, uint64_t a6)
{
  uint64_t v11 = (_OWORD *)a1[6];
  char v19 = 0;
  size_t v18 = 0;
  if (*(unsigned char *)(a6 + 24))
  {
    if (!a1[17] && (a1[76] || a1[64]))
    {
      uint64_t v13 = PesRawEmitData((uint64_t)a1, (uint64_t)v11);
      if (v13)
      {
        uint64_t v16 = v13;
LABEL_16:
        PesErrorHandling((uint64_t)a1, v16);
        return v16;
      }
    }
    long long v14 = *(_OWORD *)(a6 + 16);
    *uint64_t v11 = *(_OWORD *)a6;
    v11[1] = v14;
  }
  if (theBuffer) {
    uint64_t v15 = PesAddBlockBufferToFrameBlockBuffer((uint64_t)a1, theBuffer, offset, dataLength, a1[17], &v18, &v19);
  }
  else {
    uint64_t v15 = PesAddMemoryToFrameMemory((uint64_t)a1, a4, dataLength, a1[17], &v18, &v19);
  }
  uint64_t v16 = v15;
  if (v15) {
    goto LABEL_16;
  }
  if (v19) {
    PesRawEmitData((uint64_t)a1, (uint64_t)v11);
  }
  return 0;
}

uint64_t PesRawCleanPrivateData(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 48) + 24) = 0;
  return result;
}

void PesRawDeletePrivateData(uint64_t a1)
{
  *(void *)(a1 + 48) = 0;
}

uint64_t PesRawEmitData(uint64_t a1, uint64_t a2)
{
  memset(&v16, 0, sizeof(v16));
  memset(&v15, 0, sizeof(v15));
  uint64_t BlockBufferFromFrameMemory = PesCreateBlockBufferFromFrameMemory(a1);
  if (BlockBufferFromFrameMemory) {
    return BlockBufferFromFrameMemory;
  }
  if (!*(void *)(a1 + 512)) {
    goto LABEL_11;
  }
  if (*(unsigned char *)(a2 + 25)) {
    CMTimeMake(&v16, *(void *)a2, 90000);
  }
  else {
    CMTime v16 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  }
  if (*(unsigned char *)(a2 + 26)) {
    CMTimeMake(&v15, *(void *)(a2 + 8), 90000);
  }
  else {
    CMTime v15 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  }
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, CMTime *, CMTime *, void, uint64_t, void, void, void, void))(a1 + 84);
  if (v5)
  {
    uint64_t v6 = **(void **)(a1 + 8);
    uint64_t v7 = *(unsigned int *)(a1 + 60);
    uint64_t v8 = *(void *)(a1 + 104);
    uint64_t v9 = *(void *)(a1 + 512);
    uint64_t v10 = *(void *)(a2 + 16);
    CMTime v14 = v16;
    CMTime v13 = v15;
    uint64_t v11 = v5(v6, v7, v8, v9, &v14, &v13, 0, v10, 0, 0, 0, 0);
  }
  else
  {
LABEL_11:
    uint64_t v11 = 0;
  }
  PesCleanAfterFrameEmit(a1);
  return v11;
}

uint64_t FigSecureStopManagerServerHandleMessage()
{
  uint64_t OpCode = FigXPCMessageGetOpCode();
  if (OpCode) {
    return OpCode;
  }
  else {
    return 4294949552;
  }
}

uint64_t FigSecureStopManagerServerHandleNoReplyMessage()
{
  uint64_t result = FigXPCMessageGetOpCode();
  if (!result) {
    return 4294949552;
  }
  return result;
}

uint64_t fssm_server_copyManagerByObjectIDForConnection(int a1, xpc_object_t xdict)
{
  if (!xpc_dictionary_get_uint64(xdict, (const char *)*MEMORY[0x1E4F20280])) {
    return 4294949556;
  }
  uint64_t v2 = FigXPCServerLookupAndRetainAssociatedObject();
  if (!v2) {
    return FigSignalErrorAt();
  }
  return v2;
}

CFStringRef figCreateCFError(const __CFString *domain, CFIndex code, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  long long v11 = 0u;
  long long v12 = 0u;
  *(_OWORD *)userInfoKeys = 0u;
  memset(v9, 0, sizeof(v9));
  if (!domain) {
    return domain;
  }
  if (!a3)
  {
    CFIndex v8 = 0;
    if (!a4) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  userInfoKeys[0] = *(void **)MEMORY[0x1E4F1D140];
  *(void *)&v9[0] = a3;
  CFIndex v8 = 1;
  if (a4)
  {
LABEL_4:
    *(void *)((unint64_t)userInfoKeys | (8 * v8)) = *MEMORY[0x1E4F1D178];
    *(void *)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF7 | (8 * (v8++ & 1))) = a4;
  }
LABEL_5:
  if (a5)
  {
    userInfoKeys[v8] = (void *)*MEMORY[0x1E4F1D180];
    *((void *)v9 + v8++) = a5;
  }
  if (a6)
  {
    userInfoKeys[v8] = (void *)*MEMORY[0x1E4F1D188];
    *((void *)v9 + v8++) = a6;
  }
  if (a7)
  {
    userInfoKeys[v8] = (void *)*MEMORY[0x1E4F1D190];
    *((void *)v9 + v8++) = a7;
  }
  return (const __CFString *)CFErrorCreateWithUserInfoKeysAndValues((CFAllocatorRef)*MEMORY[0x1E4F1CF80], domain, code, (const void *const *)userInfoKeys, (const void *const *)v9, v8);
}

uint64_t FigCreateErrorForOSStatus(uint64_t result, CFErrorRef *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    long long v7 = 0u;
    long long v8 = 0u;
    *(_OWORD *)userInfoKeys = 0u;
    memset(v5, 0, sizeof(v5));
    CFErrorRef v3 = CFErrorCreateWithUserInfoKeysAndValues((CFAllocatorRef)*MEMORY[0x1E4F1CF80], @"CoreMediaErrorDomain", (int)result, (const void *const *)userInfoKeys, (const void *const *)v5, 0);
    if (v3)
    {
      CFErrorRef v4 = v3;
      uint64_t result = 0;
      *a2 = v4;
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return result;
}

CFStringRef FigCreateCFErrorFromFigErrorLog(const __CFString *result, int a2)
{
  if (result)
  {
    CFArrayRef v3 = (const __CFArray *)result;
    CFIndex Count = CFArrayGetCount((CFArrayRef)result);
    if (Count < 1)
    {
      return 0;
    }
    else
    {
      CFIndex v5 = Count + 1;
      while (1)
      {
        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v3, v5 - 2);
        if (FigCFDictionaryGetInt32IfPresent() && a2 == 0) {
          break;
        }
        if ((unint64_t)--v5 <= 1) {
          return 0;
        }
      }
      FigCFDictionaryGetInt32IfPresent();
      CFDictionaryGetValue(ValueAtIndex, @"c-user-info");
      CFStringRef Value = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, @"domain");
      uint64_t v9 = CFDictionaryGetValue(ValueAtIndex, @"comment");
      return figCreateCFError(Value, 0, (uint64_t)v9, 0, 0, 0, 0);
    }
  }
  return result;
}

uint64_t FigCFErrorIsEqualToOSStatus(__CFError *a1, uint64_t a2, int a3)
{
  if (a1)
  {
    CFErrorGetDomain(a1);
    uint64_t result = FigCFEqual();
    if (!result) {
      return result;
    }
    return CFErrorGetCode(a1) == a3;
  }
  else
  {
    return a3 == 0;
  }
}

__CFString *FigErrorLogGetStringFromInterfaceType(int a1)
{
  if (a1 > 100)
  {
    uint64_t v2 = @"wwan-bridged";
    CFArrayRef v3 = @"bluetooth-bridged";
    if (a1 != 103) {
      CFArrayRef v3 = 0;
    }
    if (a1 != 102) {
      uint64_t v2 = v3;
    }
    if (a1 == 101) {
      return @"wifi-bridged";
    }
    else {
      return v2;
    }
  }
  else
  {
    switch(a1)
    {
      case 0:
        uint64_t result = @"unknown";
        break;
      case 1:
        uint64_t result = @"loopback";
        break;
      case 2:
        uint64_t result = @"wired";
        break;
      case 3:
        uint64_t result = @"wifi-infra";
        break;
      case 4:
        uint64_t result = @"wifi-AWDL";
        break;
      case 5:
        uint64_t result = @"wwan";
        break;
      default:
        uint64_t result = 0;
        break;
    }
  }
  return result;
}

void FigErrorLogSetSeverity(int a1, CFMutableDictionaryRef theDict, int a3)
{
  int valuePtr = a3;
  if (theDict)
  {
    if (a3)
    {
      CFNumberRef v4 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
      if (v4)
      {
        CFNumberRef v5 = v4;
        CFDictionarySetValue(theDict, @"c-severity", v4);
        CFRelease(v5);
      }
    }
    else
    {
      CFDictionaryRemoveValue(theDict, @"c-severity");
    }
  }
}

__CFDictionary *FigErrorLogCreateEntry(const __CFAllocator *a1, uint64_t a2, const __CFURL *a3, const void *a4, int a5, const void *a6, const void *a7, const void *a8, void *value, CFDictionaryRef theDict, int a11, int a12, void *a13)
{
  char v33 = 0;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    CFDateRef v22 = CFDateCreate(a1, Current);
    if (v22)
    {
      CFDateRef v23 = v22;
      CFDictionarySetValue(Mutable, @"date", v22);
      CFRelease(v23);
    }
    if (a3)
    {
      CFTypeRef v24 = FigCFHTTPCreateURLString(a3);
      if (v24)
      {
        int v25 = v24;
        CFDictionarySetValue(Mutable, @"uri", v24);
        CFRelease(v25);
      }
    }
    if (a2)
    {
      CFTypeRef cf = 0;
      uint64_t v26 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v27 = v26 ? v26 : 0;
      uint64_t v28 = *(unsigned int (**)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *))(v27 + 48);
      if (v28)
      {
        if (!v28(a2, 0x1EE57B698, a1, &cf))
        {
          CFDataRef v29 = FigCFHTTPCreateAddressString((const __CFData *)cf);
          if (v29)
          {
            CFDataRef v30 = v29;
            CFDictionarySetValue(Mutable, @"s-ip", v29);
            CFRelease(v30);
          }
          CFRelease(cf);
        }
      }
    }
    if (a4) {
      CFDictionarySetValue(Mutable, @"cs-guid", a4);
    }
    FigCFDictionarySetInt32();
    if (a6) {
      CFDictionarySetValue(Mutable, @"domain", a6);
    }
    if (a7) {
      CFDictionarySetValue(Mutable, @"comment", a7);
    }
    if (value) {
      CFDictionarySetValue(Mutable, @"cs-iftype", value);
    }
    if (theDict)
    {
      if (CFDictionaryGetValueIfPresent(theDict, @"freq", (const void **)&v33)) {
        CFDictionarySetValue(Mutable, @"c-iffreq", v33);
      }
      if (CFDictionaryGetValueIfPresent(theDict, @"rssi", (const void **)&v33)) {
        CFDictionarySetValue(Mutable, @"c-rssi", v33);
      }
      if (CFDictionaryGetValueIfPresent(theDict, @"rsmn", (const void **)&v33)) {
        CFDictionarySetValue(Mutable, @"c-rssi-min", v33);
      }
      if (CFDictionaryGetValueIfPresent(theDict, @"rsmx", (const void **)&v33)) {
        CFDictionarySetValue(Mutable, @"c-rssi-max", v33);
      }
      if (CFDictionaryGetValueIfPresent(theDict, @"rsav", (const void **)&v33)) {
        CFDictionarySetValue(Mutable, @"c-rssi-avg", v33);
      }
    }
    if (a11) {
      FigCFDictionarySetInt32();
    }
    if (a12) {
      FigCFDictionarySetInt32();
    }
    if (a13) {
      CFDictionarySetValue(Mutable, @"http-response-headers", a13);
    }
    if (a8) {
      CFDictionarySetValue(Mutable, @"c-user-info", a8);
    }
  }
  return Mutable;
}

CFMutableArrayRef FigErrorLogCreatePublicCopy(const __CFAllocator *a1, const __CFArray *a2)
{
  if (!a2) {
    return 0;
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E4F1D510]);
  CFMutableArrayRef v5 = Mutable;
  if (Mutable)
  {
    v7[0] = a1;
    v7[1] = Mutable;
    v8.size_t length = CFArrayGetCount(a2);
    v8.CFIndex location = 0;
    CFArrayApplyFunction(a2, v8, (CFArrayApplierFunction)figErrorLogApplierFunction, v7);
  }
  return v5;
}

void figErrorLogApplierFunction(CFDictionaryRef theDict, CFAllocatorRef *a2)
{
  if (theDict)
  {
    CFMutableDataRef MutableCopy = CFDictionaryCreateMutableCopy(*a2, 0, theDict);
    if (MutableCopy)
    {
      CFNumberRef v4 = MutableCopy;
      CFDictionaryRemoveValue(MutableCopy, @"c-user-info");
      CFArrayAppendValue(a2[1], v4);
      CFRelease(v4);
    }
  }
}

uint64_t *FigMPEG2VideoFrameDiscard(uint64_t a1)
{
  uint64_t result = FrameQueueClean(a1 + 784);
  *(_DWORD *)(a1 + 812) = 0;
  *(_DWORD *)(a1 + 748) = 0;
  *(unsigned char *)(a1 + 800) = 0;
  return result;
}

uint64_t *FigMPEG2VideoFrameFlush(uint64_t a1)
{
  if (!*(unsigned char *)(*(void *)(a1 + 8) + 448)) {
    VideoFrameCheckAdjustmentQueue(a1);
  }
  VideoFrameQueueFlush(a1);
  uint64_t result = FrameQueueClean(a1 + 784);
  *(_DWORD *)(a1 + 812) = 0;
  *(_DWORD *)(a1 + 748) = 0;
  *(unsigned char *)(a1 + 800) = 0;
  return result;
}

uint64_t VideoFrameCheckAdjustmentQueue(uint64_t a1)
{
  uint64_t v15 = 0;
  CMTime v16 = 0;
  *(_DWORD *)(a1 + 744) = 0;
  if (*(unsigned char *)(*(void *)(a1 + 8) + 448))
  {
    uint64_t v2 = *(uint64_t **)(a1 + 728);
    if (v2)
    {
      uint64_t v3 = 4294954325;
      do
      {
        uint64_t v4 = v2[4];
        uint64_t v5 = *(void *)(a1 + 688);
        uint64_t v6 = *(void *)(a1 + 712);
        if ((v4 & 0x100000000) == 0 && (v5 & 0x100000000) != 0)
        {
          v6 += 0x200000000;
          *(void *)(a1 + 712) = v6;
        }
        uint64_t v7 = v6 + v4 + *(void *)(*(void *)a1 + 64);
        if (v7 >= v5 && v7 <= *(void *)(*(void *)(a1 + 8) + 160) + v5)
        {
          uint64_t v15 = 0;
          CMTime v16 = &v15;
          FigMPEG2MoveAdjustmentQueue(a1, (uint64_t)&v15);
          uint64_t v3 = FigMPEG2ParseFromQueue((uint64_t)&v15);
        }
        else
        {
          uint64_t v8 = *v2;
          uint64_t v9 = (void *)v2[1];
          if (*v2)
          {
            *(void *)(v8 + 8) = v9;
            uint64_t v9 = (void *)v2[1];
          }
          else
          {
            *(void *)(a1 + 736) = v9;
          }
          *uint64_t v9 = v8;
          FrameQueueEntryDestroy((uint64_t)v2);
        }
        uint64_t v2 = *(uint64_t **)(a1 + 728);
      }
      while (v2);
    }
    else
    {
      return 4294954325;
    }
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 728);
    if (v10)
    {
      uint64_t v3 = 0;
      *(void *)(v10 + 8) = &v15;
      long long v11 = *(uint64_t **)(a1 + 736);
      uint64_t v15 = v10;
      CMTime v16 = v11;
      *(void *)(a1 + 728) = 0;
      *(void *)(a1 + 736) = a1 + 728;
      do
      {
        uint64_t v12 = *(void *)v10;
        uint64_t v13 = *(void **)(v10 + 8);
        if (*(void *)v10)
        {
          *(void *)(v12 + 8) = v13;
          uint64_t v13 = *(void **)(v10 + 8);
        }
        else
        {
          CMTime v16 = *(uint64_t **)(v10 + 8);
        }
        *uint64_t v13 = v12;
        *(_WORD *)(v10 + 49) = 0;
        if (v3) {
          FrameQueueEntryDestroy(v10);
        }
        else {
          uint64_t v3 = FigMPEG2VideoFrameQueueEntryAdjustTimestampsAndEmit(a1, v10);
        }
        uint64_t v10 = v15;
      }
      while (v15);
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

uint64_t VideoFrameQueueFlush(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 784);
  if (v1 && *(unsigned char *)(result + 800))
  {
    unint64_t v2 = *(unsigned int *)(result + 804);
    if (v2)
    {
      *(void *)(v1 + 24) = *(void *)(v1 + 32)
                           + *(unsigned int *)(result + 808)
                           * (unint64_t)(90000 * *(_DWORD *)(result + 812))
                           / v2;
      *(unsigned char *)(v1 + 49) = 1;
      return FigMPEG2FrameQueueEmit(result);
    }
  }
  return result;
}

uint64_t FigMPEG2VideoFrameQueueEntryAdjustTimestampsAndEmit(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)(a2 + 24);
  uint64_t v5 = (void *)(a2 + 32);
  while (1)
  {
    if (*(unsigned char *)(a2 + 48))
    {
      if (*(unsigned char *)(a2 + 49))
      {
        uint64_t v6 = *(void *)(a2 + 40);
        if (v6 != *(void *)(a1 + 816))
        {
          *(_DWORD *)(a2 + 80) |= 0x1000u;
          *(void *)(a1 + 816) = v6;
        }
      }
    }
    uint64_t v7 = *(void *)(a1 + 8);
    if (!*(_DWORD *)(v7 + 100)) {
      goto LABEL_63;
    }
    int v8 = *(unsigned __int8 *)(a2 + 144);
    if (*(unsigned char *)(a2 + 144) && *(unsigned char *)(a2 + 49))
    {
      *(unsigned char *)(a2 + 50) = 1;
      *(void *)(a2 + 32) = *(void *)(a2 + 24);
    }
    if (!*(unsigned char *)(a1 + 800))
    {
      uint64_t v9 = *(void *)(a1 + 784);
      if (!v9)
      {
        if (!*(unsigned char *)(a2 + 50)) {
          goto LABEL_72;
        }
        if (!*(_DWORD *)(a1 + 804)) {
          goto LABEL_79;
        }
        goto LABEL_14;
      }
      if (*(unsigned char *)(a2 + 50) && *(_DWORD *)(a1 + 804))
      {
        int v32 = *(unsigned __int8 *)(a2 + 145);
        uint64_t result = FigMPEG2ParserVideoFrameWorkBackward(a1, a2);
        *(unsigned char *)(a1 + 800) = 1;
        if (!v32) {
          *(void *)(a1 + 672) = *v5;
        }
        return result;
      }
LABEL_79:
      if (v8)
      {
        uint64_t result = 0;
        if (!v9 || !*(unsigned char *)(a2 + 49))
        {
LABEL_90:
          if (*(unsigned char *)(a2 + 50)) {
            return result;
          }
          goto LABEL_72;
        }
      }
      else if (!v9)
      {
LABEL_89:
        uint64_t result = 0;
        goto LABEL_90;
      }
      if (*(_DWORD *)(a1 + 804))
      {
        uint64_t v33 = **(void **)(*(void *)(a1 + 792) + 8);
        if (v33)
        {
          while (1)
          {
            uint64_t v34 = **(void **)(*(void *)(v33 + 8) + 8);
            if (!*(unsigned char *)(v33 + 144))
            {
              if (*(unsigned char *)(v33 + 49)) {
                break;
              }
            }
            uint64_t v33 = **(void **)(*(void *)(v33 + 8) + 8);
            if (!v34) {
              goto LABEL_89;
            }
          }
          *(unsigned char *)(a2 + 50) = 1;
          uint64_t v35 = *(void *)(v33 + 24);
          *(void *)(a2 + 32) = v35;
          *(void *)(a1 + 672) = v35;
          int v36 = *(unsigned __int8 *)(a2 + 145);
          uint64_t result = FigMPEG2ParserVideoFrameWorkBackward(a1, a2);
          *(unsigned char *)(a1 + 800) = 1;
          if (v36 || *(unsigned char *)(a2 + 50)) {
            return result;
          }
LABEL_72:
          return FigMPEG2VideoFrameEnqueue(a1, a2);
        }
      }
      goto LABEL_89;
    }
LABEL_14:
    *(unsigned char *)(a1 + 800) = 1;
    if (*(void *)(a1 + 728)) {
      goto LABEL_56;
    }
    uint64_t v10 = *(unsigned char *)(a2 + 49) ? *(void *)(a1 + 712) + *v4 + *(void *)(*(void *)a1 + 64) : 0;
    if (*(unsigned char *)(a2 + 50))
    {
      uint64_t v11 = *v5;
      uint64_t v12 = HIDWORD(*v5) & 1;
      if ((*(unsigned char *)(a1 + 676) & 1) == 0) {
        LODWORD(v12) = 1;
      }
      if (v12) {
        uint64_t v13 = *v5;
      }
      else {
        uint64_t v13 = v11 + 0x200000000;
      }
      uint64_t v14 = *(void *)(a1 + 712);
      uint64_t v15 = *(void *)(*(void *)a1 + 64) + v14 + v13;
      if (*(unsigned char *)(a1 + 658))
      {
        uint64_t v16 = *(void *)(a1 + 688);
        if (v15 <= v16 || v15 >= *(void *)(v7 + 160) + v16)
        {
          uint64_t result = VideoFrameAddToAdjustmentQueue(a1, a2);
          if (!result)
          {
            uint64_t v31 = *(void *)a1;
            return ProgramCheckPesForTimestampChanges(v31);
          }
          return result;
        }
      }
      *(void *)(a1 + 672) = v11;
      *(_DWORD *)(a1 + 748) = 0;
      if ((v12 & 1) == 0) {
        *(void *)(a1 + 712) = v14 + 0x200000000;
      }
    }
    else
    {
      unint64_t v17 = *(unsigned int *)(a1 + 804);
      if (!v17)
      {
LABEL_56:
        return VideoFrameAddToAdjustmentQueue(a1, a2);
      }
      unsigned int v18 = *(_DWORD *)(a1 + 748) + 1;
      unint64_t v19 = 90000 * *(unsigned int *)(a1 + 808) * (unint64_t)v18 / v17;
      uint64_t v20 = *(void *)(a1 + 672);
      uint64_t v21 = v20 + *(void *)(a1 + 712) + *(void *)(*(void *)a1 + 64);
      uint64_t v15 = v21 + v19;
      if (v8) {
        unint64_t v22 = v21 + v19;
      }
      else {
        unint64_t v22 = v10;
      }
      if (!v8)
      {
        if (*(unsigned char *)(a2 + 49))
        {
          unint64_t v22 = v10 + 0x200000000;
          if (((v20 & 0x100000000) == 0) | *((unsigned char *)v4 + 4) & 1) {
            unint64_t v22 = v10;
          }
        }
      }
      *(_DWORD *)(a1 + 748) = v18;
      uint64_t v10 = v22;
    }
    uint64_t v23 = *(void *)(a1 + 784);
    if (!v23) {
      goto LABEL_43;
    }
    if (v8) {
      goto LABEL_59;
    }
    *(unsigned char *)(v23 + 49) = 1;
    *(void *)(v23 + 24) = v15;
    FigMPEG2FrameQueueEmit(a1);
    int v8 = *(unsigned __int8 *)(a2 + 144);
    if (*(void *)(a1 + 784))
    {
      if (*(unsigned char *)(a2 + 144))
      {
LABEL_59:
        *(void *)(a2 + 32) = v15;
        *(_WORD *)(a2 + 49) = 257;
LABEL_71:
        *uint64_t v4 = v15;
        *(void *)(a1 + 688) = v15;
        goto LABEL_72;
      }
    }
    else
    {
LABEL_43:
      if (v8) {
        goto LABEL_45;
      }
    }
    if (!*(unsigned char *)(a2 + 49))
    {
      *(unsigned char *)(a2 + 50) = 1;
      uint64_t v4 = v5;
      goto LABEL_71;
    }
LABEL_45:
    uint64_t v24 = v15 - v10;
    if (v15 == v10) {
      break;
    }
    uint64_t v25 = *(void *)(*(void *)(a1 + 8) + 160);
    if (v25 >= 0) {
      uint64_t v26 = *(void *)(*(void *)(a1 + 8) + 160);
    }
    else {
      uint64_t v26 = v25 + 1;
    }
    uint64_t v27 = v26 >> 1;
    if (v25 >= 360000) {
      uint64_t v27 = 180000;
    }
    uint64_t v28 = -v27;
    if (v24 <= v27 && v24 >= v28) {
      goto LABEL_62;
    }
    uint64_t v29 = v24 - 0x200000000;
    if (v29 <= v27 && v29 >= v28)
    {
      v10 += 0x200000000;
      goto LABEL_62;
    }
    *(_WORD *)(a2 + 49) = 0;
  }
  uint64_t v10 = v15;
LABEL_62:
  *(_WORD *)(a2 + 49) = 257;
  *(void *)(a2 + 24) = v10;
  *(void *)(a2 + 32) = v15;
LABEL_63:

  return FigMPEG2VideoFrameEmit(a1, a2);
}

uint64_t FigMPEG2VideoFrameEmit(uint64_t a1, uint64_t a2)
{
  memset(&v37, 0, sizeof(v37));
  memset(&v36, 0, sizeof(v36));
  uint64_t v4 = *(void *)(a1 + 8);
  unsigned int v5 = *(_DWORD *)(v4 + 100);
  if (!v5)
  {
    if (!*(unsigned char *)(a2 + 49))
    {
      CMTime v36 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
      CMTime v37 = v36;
      goto LABEL_20;
    }
    goto LABEL_7;
  }
  if (!*(unsigned char *)(a2 + 49))
  {
    uint64_t appended = FigSignalErrorAt();
LABEL_36:
    uint64_t v21 = appended;
    goto LABEL_32;
  }
  if (v5 < 2)
  {
LABEL_7:
    CMTimeMake(&v37, *(void *)(a2 + 24), 90000);
    if (*(unsigned char *)(a2 + 50)) {
      CMTimeMake(&v36, *(void *)(a2 + 32), 90000);
    }
    else {
      CMTime v36 = v37;
    }
    goto LABEL_20;
  }
  if (*(unsigned char *)(a1 + 658))
  {
    uint64_t v6 = *(void *)(a2 + 32);
  }
  else
  {
    uint64_t v6 = *(void *)(a2 + 32);
    if ((v6 & 0x100000000) != 0 && !*(void *)(*(void *)a1 + 64) && 0x200000000 - v6 < *(void *)(v4 + 160))
    {
      *(void *)(a1 + 712) -= 0x200000000;
      v6 -= 0x200000000;
      *(void *)(a2 + 24) -= 0x200000000;
      *(void *)(a2 + 32) = v6;
    }
  }
  *(unsigned char *)(a1 + 658) = 1;
  *(void *)(a1 + 688) = v6;
  int64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 696) = v7;
  CMTimeMake(&v37, v7, 90000);
  int64_t v8 = *(void *)(a2 + 32);
  if (*(void *)(a2 + 24) == v8) {
    CMTime v36 = v37;
  }
  else {
    CMTimeMake(&v36, v8, 90000);
  }
  uint64_t v9 = *(void *)(a1 + 696);
  if (*(void *)(a1 + 704) < v9) {
    *(void *)(a1 + 704) = v9;
  }
LABEL_20:
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, CMTime *, CMTime *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 84);
  if (!v10) {
    goto LABEL_22;
  }
  uint64_t v11 = **(void **)(a1 + 8);
  uint64_t v12 = *(unsigned int *)(a1 + 60);
  uint64_t v13 = *(void *)(a1 + 104);
  uint64_t v14 = *(void *)(a2 + 56);
  uint64_t v15 = *(unsigned int *)(a2 + 80);
  uint64_t v16 = *(void *)(a2 + 40);
  uint64_t v17 = *(void *)(a2 + 88);
  uint64_t v18 = *(void *)(a2 + 104);
  uint64_t v19 = *(void *)(a2 + 112);
  uint64_t v20 = *(void *)(a2 + 120);
  CMTime v35 = v37;
  CMTime v34 = v36;
  uint64_t v21 = v10(v11, v12, v13, v14, &v35, &v34, v15, v16, v17, v18, v19, v20);
  if (!v21)
  {
LABEL_22:
    unint64_t v22 = *(uint64_t ***)(a2 + 64);
    if (!v22) {
      goto LABEL_31;
    }
    uint64_t v23 = 0;
    do
    {
      uint64_t v24 = (OpaqueCMBlockBuffer *)v22[2];
      if (v23)
      {
        DataCFIndex Length = CMBlockBufferGetDataLength((CMBlockBufferRef)v22[2]);
        uint64_t appended = CMBlockBufferAppendBufferReference(v23, v24, 0, DataLength, 0);
        if (appended) {
          goto LABEL_36;
        }
      }
      else
      {
        uint64_t v23 = (OpaqueCMBlockBuffer *)v22[2];
      }
      unint64_t v22 = (uint64_t **)*v22;
    }
    while (v22);
    if (!v23) {
      goto LABEL_31;
    }
    uint64_t v27 = *(void *)(a1 + 72);
    uint64_t v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, OpaqueCMBlockBuffer *, CMTime *, CMTime *, void, uint64_t, void, void, void, void))(v27 + 84);
    uint64_t v29 = **(void **)(a1 + 8);
    uint64_t v30 = *(unsigned int *)(v27 + 60);
    uint64_t v31 = *(void *)(v27 + 104);
    uint64_t v32 = *(void *)(a2 + 40);
    CMTime v35 = v37;
    CMTime v34 = v36;
    uint64_t appended = v28(v29, v30, v31, v23, &v35, &v34, 0, v32, 0, 0, 0, 0);
    if (!appended)
    {
LABEL_31:
      uint64_t v21 = 0;
      goto LABEL_32;
    }
    goto LABEL_36;
  }
LABEL_32:
  if (*(unsigned char *)(a2 + 145)) {
    FrameQueueEntryDestroy(a2);
  }
  return v21;
}

uint64_t FigMPEG2ParserVideoFrameWorkBackward(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 144);
  if (*(unsigned char *)(a2 + 144)) {
    BOOL v5 = 0;
  }
  else {
    BOOL v5 = *(unsigned char *)(a2 + 50) != 0;
  }
  uint64_t v6 = *(void *)(*(void *)a1 + 64) + *(void *)(a1 + 712);
  uint64_t v7 = v6 + *(void *)(a2 + 32);
  *(void *)(a2 + 32) = v7;
  if (v4) {
    BOOL v8 = 1;
  }
  else {
    BOOL v8 = *(unsigned char *)(a2 + 49) == 0;
  }
  if (!v8) {
    *(void *)(a2 + 24) += v6;
  }
  uint64_t v9 = **(void **)(*(void *)(a1 + 792) + 8);
  if (v9)
  {
    unsigned int v10 = *(_DWORD *)(a1 + 808);
    unint64_t v11 = *(unsigned int *)(a1 + 804);
    unsigned int v12 = 90000;
    uint64_t v13 = v7;
    do
    {
      uint64_t v14 = v9;
      uint64_t v9 = **(void **)(*(void *)(v9 + 8) + 8);
      uint64_t v15 = v7 - v10 * (unint64_t)v12 / v11;
      *(unsigned char *)(v14 + 50) = 1;
      *(void *)(v14 + 32) = v15;
      if (*(unsigned char *)(v14 + 144))
      {
        *(unsigned char *)(v14 + 49) = 1;
        *(void *)(v14 + 24) = v15;
      }
      else
      {
        if (v5)
        {
          BOOL v5 = 1;
          *(unsigned char *)(v14 + 49) = 1;
          *(void *)(v14 + 24) = v13;
        }
        else
        {
          *(unsigned char *)(v14 + 49) = 0;
          BOOL v5 = 1;
        }
        uint64_t v13 = v7 - v10 * (unint64_t)v12 / v11;
      }
      v12 += 90000;
    }
    while (v9);
  }
  FigMPEG2FrameQueueEmit(a1);
  if (!*(void *)(a1 + 784) && *(unsigned char *)(a2 + 49) && *(unsigned char *)(a2 + 50))
  {
    return FigMPEG2VideoFrameEmit(a1, a2);
  }
  else
  {
    return FigMPEG2VideoFrameEnqueue(a1, a2);
  }
}

uint64_t FigMPEG2VideoFrameEnqueue(uint64_t a1, uint64_t a2)
{
  Retainable = (void *)FrameQueueEntryMakeRetainable(a1, a2);
  if (!Retainable) {
    return 12;
  }
  int v4 = *(void **)(a1 + 792);
  void *Retainable = 0;
  Retainable[1] = v4;
  *int v4 = Retainable;
  *(void *)(a1 + 792) = Retainable;
  LODWORD(v4) = *(_DWORD *)(a1 + 812) + 1;
  *(_DWORD *)(a1 + 812) = v4;
  if (v4 < 0x41) {
    return 0;
  }

  return FigSignalErrorAt();
}

uint64_t VideoFrameAddToAdjustmentQueue(uint64_t a1, uint64_t a2)
{
  VideoFrameQueueFlush(a1);
  Retainable = (void *)FrameQueueEntryMakeRetainable(a1, a2);
  Retainable[2] = a1;
  unsigned int v5 = *(_DWORD *)(a1 + 744) + 1;
  *(_DWORD *)(a1 + 744) = v5;
  uint64_t v6 = *(void **)(a1 + 736);
  void *Retainable = 0;
  Retainable[1] = v6;
  *uint64_t v6 = Retainable;
  *(void *)(a1 + 736) = Retainable;
  if (*(_DWORD *)(*(void *)a1 + 72) != 1 && v5 < 0x10) {
    return 0;
  }

  return VideoFrameCheckAdjustmentQueue(a1);
}

uint64_t FigMPEG2FrameQueueEmit(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 784);
  if (v1)
  {
    uint64_t v2 = result;
    do
    {
      if (!*(unsigned char *)(v1 + 50) || !*(unsigned char *)(v1 + 49)) {
        break;
      }
      uint64_t v3 = *(void *)v1;
      int v4 = *(void **)(v1 + 8);
      if (*(void *)v1)
      {
        *(void *)(v3 + 8) = v4;
        int v4 = *(void **)(v1 + 8);
      }
      else
      {
        *(void *)(v2 + 792) = v4;
      }
      *int v4 = v3;
      uint64_t result = FigMPEG2VideoFrameEmit(v2, v1);
      --*(_DWORD *)(v2 + 812);
      uint64_t v1 = *(void *)(v2 + 784);
    }
    while (v1);
  }
  return result;
}

uint64_t FigMPEG2VideoCombineFields(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int valuePtr = CMBlockBufferGetDataLength(*(CMBlockBufferRef *)(a2 + 56));
  PesFrameHeaderAppendList((void *)(a2 + 88), (unint64_t *)(a3 + 88), valuePtr);
  uint64_t appended = CMBlockBufferAppendBufferReference(*(CMBlockBufferRef *)(a2 + 56), *(CMBlockBufferRef *)(a3 + 56), 0, 0, 0);
  if (!appended)
  {
    CFNumberRef v6 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
    if (v6)
    {
      CFNumberRef v7 = v6;
      CMSetAttachment(*(CMAttachmentBearerRef *)(a2 + 56), @"ByteOffsetToSecondField", v6, 1u);
      CFRelease(v7);
    }
    if (!*(void *)(a2 + 64))
    {
      while (1)
      {
        unint64_t v11 = *(uint64_t **)(a3 + 64);
        if (!v11) {
          break;
        }
        uint64_t v8 = *v11;
        uint64_t v9 = (void *)v11[1];
        if (*v11)
        {
          *(void *)(v8 + 8) = v9;
          uint64_t v9 = (void *)v11[1];
        }
        else
        {
          *(void *)(a3 + 72) = v9;
        }
        *uint64_t v9 = v8;
        unsigned int v10 = *(uint64_t ***)(a2 + 72);
        *unint64_t v11 = 0;
        v11[1] = (uint64_t)v10;
        *unsigned int v10 = v11;
        *(void *)(a2 + 72) = v11;
      }
    }
    int v12 = *(_DWORD *)(a2 + 80);
    int v13 = *(_DWORD *)(a3 + 80);
    if (v12 != v13)
    {
      int v14 = v13 | v12;
      if ((v14 & 8) != 0) {
        int v15 = -1541;
      }
      else {
        int v15 = -1537;
      }
      int v16 = v15 & v14;
      if ((v14 & 0x10) != 0) {
        unsigned int v17 = v14 & 0xFFFFF9F3;
      }
      else {
        unsigned int v17 = v16;
      }
      *(_DWORD *)(a2 + 80) = v17 | *(_DWORD *)(a2 + 80) & 0x600;
    }
    int v18 = *(_DWORD *)(a2 + 148);
    if (v18) {
      *(_DWORD *)(a3 + 148) = v18;
    }
  }
  return appended;
}

uint64_t FigPlayerAirPlayCreateWithOptions(const __CFAllocator *a1, const void *a2, const __CFDictionary *a3, CFTypeRef *a4)
{
  uint64_t v92 = *MEMORY[0x1E4F143B8];
  CMTimeValue value = 0;
  CFTypeRef cf = 0;
  CFTypeRef v78 = 0;
  CFNumberRef number = 0;
  unsigned int v77 = 0;
  memset(__str, 0, sizeof(__str));
  float context = (void *)MEMORY[0x199711A30]();
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a2 || !a4)
  {
    uint64_t v9 = FigSignalErrorAt();
    goto LABEL_8;
  }
  if (FigPlayerAirPlayCreateWithOptions_initOnceCheck != -1) {
    dispatch_once(&FigPlayerAirPlayCreateWithOptions_initOnceCheck, &__block_literal_global_34);
  }
  FigPlayerGetClassID();
  uint64_t v8 = CMDerivedObjectCreate();
  if (v8)
  {
    uint64_t v9 = v8;
    FigSignalErrorAt();
    goto LABEL_9;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_WORD *)uint64_t DerivedStorage = 256;
  *(unsigned char *)(DerivedStorage + 450) = 0;
  if (a3)
  {
    if (CFDictionaryGetValueIfPresent(a3, @"LoggingIdentifier", (const void **)&value)) {
      CFStringGetCString((CFStringRef)value, (char *)(DerivedStorage + 450), 10, 0x600u);
    }
    if (CFDictionaryGetValueIfPresent(a3, @"PlayerName", &v78))
    {
      *(void *)(DerivedStorage + 376) = CFRetain(v78);
      CFTypeRef v13 = v78;
      if (pap_GetPAPRegistryMutexAndList_initOnceCheck != -1) {
        dispatch_once(&pap_GetPAPRegistryMutexAndList_initOnceCheck, &__block_literal_global_216);
      }
      uint64_t v14 = pap_GetPAPRegistryMutexAndList_sListLock;
      int v15 = (__CFDictionary *)pap_GetPAPRegistryMutexAndList_sList;
      MEMORY[0x19970E910](pap_GetPAPRegistryMutexAndList_sListLock);
      int v16 = (const void *)FigCFWeakReferenceHolderCreateWithReferencedObject();
      CFDictionarySetValue(v15, v13, v16);
      if (v16) {
        CFRelease(v16);
      }
      MEMORY[0x19970E930](v14);
    }
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a1, 0, 0, 0);
  *(void *)(DerivedStorage + 16) = Mutable;
  if (!Mutable) {
    goto LABEL_110;
  }
  uint64_t v18 = FigReentrantMutexCreate();
  *(void *)(DerivedStorage + 24) = v18;
  if (!v18) {
    goto LABEL_110;
  }
  uint64_t v19 = FigSimpleMutexCreate();
  *(void *)(DerivedStorage + 64) = v19;
  if (!v19) {
    goto LABEL_110;
  }
  uint64_t v20 = malloc_type_calloc(1uLL, 0x18uLL, 0x102004062D53EE8uLL);
  CFMutableArrayRef v21 = CFArrayCreateMutable(a1, 0, MEMORY[0x1E4F1D510]);
  *uint64_t v20 = v21;
  if (!v21 || (uint64_t v22 = FigSimpleMutexCreate(), (v20[1] = v22) == 0)) {
    FigSignalErrorAt();
  }
  *(void *)(DerivedStorage + 32) = v20;
  *(void *)(DerivedStorage + 8) = a2;
  CFRetain(a2);
  uint64_t v23 = cf ? (const char *)(CMBaseObjectGetDerivedStorage() + 450) : "";
  snprintf((char *)__str, 0x50uLL, "com.apple.coremedia.playerairplay_serialize.%s", v23);
  uint64_t v24 = FigDispatchQueueCreateWithPriority();
  *(void *)(DerivedStorage + 80) = v24;
  if (!v24) {
    goto LABEL_110;
  }
  uint64_t v25 = cf ? (const char *)(CMBaseObjectGetDerivedStorage() + 450) : "";
  snprintf((char *)__str, 0x50uLL, "com.apple.coremedia.playerairplay_postnotification.%s", v25);
  uint64_t v26 = FigDispatchQueueCreateWithPriority();
  *(void *)(DerivedStorage + 88) = v26;
  if (!v26) {
    goto LABEL_110;
  }
  uint64_t v27 = cf ? (const char *)(CMBaseObjectGetDerivedStorage() + 450) : "";
  snprintf((char *)__str, 0x50uLL, "com.apple.coremedia.playerairplay_playqueuehelper.%s", v27);
  uint64_t v28 = FigDispatchQueueCreateWithPriority();
  *(void *)(DerivedStorage + 96) = v28;
  if (!v28
    || (!cf ? (uint64_t v29 = "") : (uint64_t v29 = (const char *)(CMBaseObjectGetDerivedStorage() + 450)),
        snprintf((char *)__str, 0x50uLL, "com.apple.coremedia.playerairplay_playqueue.%s", v29),
        uint64_t v30 = FigDispatchQueueCreateWithPriority(),
        (*(void *)(DerivedStorage + 104) = v30) == 0))
  {
LABEL_110:
    uint64_t v9 = FigSignalErrorAt();
    goto LABEL_8;
  }
  if (a3 && CFDictionaryGetValueIfPresent(a3, @"InterstitialPrimaryPlayerName", (const void **)&v77))
  {
    uint64_t v31 = v77;
    if (pap_GetPAPRegistryMutexAndList_initOnceCheck != -1) {
      dispatch_once(&pap_GetPAPRegistryMutexAndList_initOnceCheck, &__block_literal_global_216);
    }
    uint64_t v32 = pap_GetPAPRegistryMutexAndList_sListLock;
    CFDictionaryRef v33 = (const __CFDictionary *)pap_GetPAPRegistryMutexAndList_sList;
    MEMORY[0x19970E910](pap_GetPAPRegistryMutexAndList_sListLock);
    if (CFDictionaryGetValue(v33, v31))
    {
      CMTime v34 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
      MEMORY[0x19970E930](v32);
      if (v34)
      {
        uint64_t v35 = CMBaseObjectGetDerivedStorage();
        *(void *)(DerivedStorage + 368) = FigCFWeakReferenceHolderCreateWithReferencedObject();
        dispatch_set_target_queue(*(dispatch_object_t *)(DerivedStorage + 104), *(dispatch_queue_t *)(v35 + 104));
      }
      goto LABEL_53;
    }
    MEMORY[0x19970E930](v32);
  }
  CMTime v34 = 0;
LABEL_53:
  CMTime v36 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, *(dispatch_queue_t *)(DerivedStorage + 104));
  *(void *)(DerivedStorage + 112) = v36;
  if (!v36) {
    goto LABEL_107;
  }
  dispatch_source_set_timer(v36, 0xFFFFFFFFFFFFFFFFLL, 0, 0);
  DispatchSourceBlocCFIndex k = (void *)FigDispatchCreateDispatchSourceBlock();
  dispatch_source_set_event_handler(*(dispatch_source_t *)(DerivedStorage + 112), DispatchSourceBlock);
  _Block_release(DispatchSourceBlock);
  dispatch_resume(*(dispatch_object_t *)(DerivedStorage + 112));
  CFStringRef v38 = (const __CFString *)value;
  uint64_t v39 = CMBaseObjectGetDerivedStorage();
  uint64_t v40 = (const void *)FigCFWeakReferenceHolderCreateWithReferencedObject();
  *(unsigned char *)(v39 + 400) = 1;
  uint64_t v85 = (void (*)(uint64_t, int))&__block_literal_global_242;
  int v86 = &__block_literal_global_247;
  handler = &__block_literal_global_250;
  uint64_t v84 = (uint64_t)&__block_literal_global_252;
  int v89 = &__block_literal_global_257;
  uint64_t v90 = &__block_literal_global_260;
  int v87 = &__block_literal_global_262;
  uint64_t v88 = &__block_literal_global_254;
  *(void *)(v39 + 224) = FigPlayerAirPlayRoute_Create((uint64_t)a1, v40, (const void **)&handler, 0, v38);
  if (_CFMZEnabled()) {
    FigPlayerAirPlayRoute_ResetRoutingContextIfNeeded(*(NSObject ***)(v39 + 224));
  }
  if (v40) {
    CFRelease(v40);
  }
  if (!*(void *)(DerivedStorage + 224)) {
    goto LABEL_107;
  }
  CFMutableDictionaryRef v41 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  *(void *)(DerivedStorage + 440) = v41;
  if (!v41) {
    goto LABEL_107;
  }
  *(unsigned char *)(DerivedStorage + 40) = 1;
  *(_DWORD *)(DerivedStorage + 232) = 0;
  *(unsigned char *)(DerivedStorage + 216) = 0;
  *(_WORD *)(DerivedStorage + 43) = 0;
  char v42 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1CB18], "standardUserDefaults"), "persistentDomainForName:", @"com.apple.coremedia");
  int v43 = (void *)[v42 objectForKey:@"disableAirPlayScreenDuringPlayback"];
  if (v43) {
    *(unsigned char *)(DerivedStorage + 43) = [v43 BOOLValue];
  }
  uint64_t v44 = (void *)[v42 objectForKey:@"allowAirPlayVideoDuringAirPlayScreen"];
  if (v44)
  {
    int v45 = [v44 BOOLValue];
    int v46 = v45 ^ 1;
    *(unsigned char *)(DerivedStorage + 44) = v45 ^ 1;
  }
  else
  {
    int v46 = *(unsigned __int8 *)(DerivedStorage + 44);
  }
  if (v46 == 1 && *(unsigned char *)(DerivedStorage + 43) == 1) {
    *(unsigned char *)(DerivedStorage + 43) = 0;
  }
  dispatch_queue_t v47 = dispatch_queue_create("com.apple.coremedia.playerairplay_scrubbing", 0);
  *(void *)(DerivedStorage + 176) = v47;
  if (!v47 || (uint64_t v48 = FigSimpleMutexCreate(), (*(void *)(DerivedStorage + 184) = v48) == 0))
  {
LABEL_107:
    uint64_t v9 = FigSignalErrorAt();
    goto LABEL_108;
  }
  uint64_t v49 = MEMORY[0x1E4F1F9F8];
  *(_OWORD *)(DerivedStorage + 192) = *MEMORY[0x1E4F1F9F8];
  *(void *)(DerivedStorage + 208) = *(void *)(v49 + 16);
  *(_DWORD *)(DerivedStorage + 396) = 45;
  *(unsigned char *)(DerivedStorage + 72) = 1;
  *(_DWORD *)(DerivedStorage + 76) = 0;
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterAddListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigGetNotifyingObjectForSelectionCriteriaChanged();
  CMNotificationCenterAddListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  if (a3 && CFDictionaryGetValueIfPresent(a3, @"ClientPID", (const void **)&number))
  {
    int valuePtr = 0;
    CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr);
    FigPlayerAirPlayRoute_SetProperty(*(void *)(DerivedStorage + 224), @"ClientPID", number);
    size_t v50 = *(const void **)(DerivedStorage + 424);
    CFNumberRef v51 = number;
    *(void *)(DerivedStorage + 424) = number;
    if (v51) {
      CFRetain(v51);
    }
    if (v50) {
      CFRelease(v50);
    }
    handler = 0;
    FigServer_CopyProcessName();
    unsigned int v52 = handler;
    unint64_t v53 = *(const void **)(DerivedStorage + 408);
    *(void *)(DerivedStorage + 408) = handler;
    if (v52) {
      CFRetain(v52);
    }
    if (v53) {
      CFRelease(v53);
    }
    unint64_t v54 = (const void *)FigCFDictionaryGetValue();
    *(void *)(DerivedStorage + 416) = v54;
    if (v54) {
      CFRetain(v54);
    }
    if (v52) {
      CFRelease(v52);
    }
  }
  uint64_t v55 = CMBaseObjectGetDerivedStorage();
  unsigned int v75 = v34;
  if (!*(void *)(v55 + 104)) {
    goto LABEL_88;
  }
  uint64_t v56 = v55;
  *(_DWORD *)(v55 + 392) = -1;
  uint64_t v57 = (const void *)FigCFWeakReferenceHolderCreateWithReferencedObject();
  if (!v57)
  {
    uint64_t v9 = 4294954510;
    goto LABEL_108;
  }
  size_t v58 = v57;
  uint64_t v59 = *(NSObject **)(v56 + 104);
  uint64_t v60 = (void *)CFRetain(v57);
  dispatch_set_context(v59, v60);
  dispatch_set_finalizer_f(*(dispatch_object_t *)(v56 + 104), (dispatch_function_t)playerairplay_playQueueWorkQueueFinalizer);
  int v61 = *(NSObject **)(v56 + 104);
  handler = (void *)MEMORY[0x1E4F143A8];
  uint64_t v84 = 3221225472;
  uint64_t v85 = __playerairplay_initializeVolumeFadeOutNotification_block_invoke;
  int v86 = &unk_1E578C740;
  int v87 = v61;
  if (!notify_register_dispatch("com.apple.mediaexperience.fadeoutappliedforplaybackhandoff", (int *)(v56 + 392), v61, &handler))
  {
    CFRelease(v58);
    CMTime v34 = v75;
    goto LABEL_88;
  }
  uint64_t v73 = FigSignalErrorAt();
  CFNumberRef v74 = v58;
  uint64_t v9 = v73;
  CFRelease(v74);
  CMTime v34 = v75;
  if (!v9)
  {
LABEL_88:
    char v62 = (const void *)FigCFDictionaryGetValue();
    if (v62) {
      char v62 = CFRetain(v62);
    }
    *(void *)(DerivedStorage + 432) = v62;
    uint64_t v63 = FigSimpleMutexCreate();
    *(void *)(DerivedStorage + 472) = v63;
    if (v63)
    {
      CFMutableArrayRef v64 = CFArrayCreateMutable(a1, 0, MEMORY[0x1E4F1D510]);
      *(void *)(DerivedStorage + 464) = v64;
      if (v64)
      {
        CFMutableBagRef v65 = CFBagCreateMutable(a1, 0, MEMORY[0x1E4F1D520]);
        *(void *)(DerivedStorage + 288) = v65;
        if (v65)
        {
          if (!v34)
          {
LABEL_96:
            if (dword_1E93510E8)
            {
              os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            uint64_t v9 = 0;
            unsigned int v10 = context;
            if (a4) {
              goto LABEL_12;
            }
            goto LABEL_13;
          }
          CFTypeRef v66 = cf;
          uint64_t FigBaseObject = FigPlayerGetFigBaseObject(v34);
          uint64_t v68 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v68) {
            uint64_t v69 = v68;
          }
          else {
            uint64_t v69 = 0;
          }
          int v71 = *(void (**)(uint64_t, __CFString *, CFTypeRef))(v69 + 56);
          if (v71) {
            v71(FigBaseObject, @"InterstitialAirPlayPlayer", v66);
          }
          if (dword_1E93510E8)
          {
            CFNumberRef v72 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          uint64_t v9 = 0;
          goto LABEL_106;
        }
      }
    }
    goto LABEL_107;
  }
LABEL_108:
  if (v34) {
LABEL_106:
  }
    CFRelease(v34);
LABEL_8:
  if (!v9) {
    goto LABEL_96;
  }
LABEL_9:
  unsigned int v10 = context;
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  if (a4) {
LABEL_12:
  }
    *a4 = cf;
LABEL_13:
  return v9;
}

uint64_t __FigPlayerAirPlayCreateWithOptions_block_invoke()
{
  gIsiOSDeviceWithMedusaSupport = MGGetBoolAnswer();
  uint64_t result = notify_register_check("com.apple.springboard.lockstate", &gFigPlayerAirPlayDeviceLockedStateNotifyToken);
  if (!result) {
    gFigPlayerAirPlayDeviceLockedStateNotifyTokenIsValid = 1;
  }
  return result;
}

void __FigPlayerAirPlayCreateWithOptions_block_invoke_2(uint64_t a1)
{
}

void playerairplay_checkIfAirPlayVideoSessionNeedsToStop(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = *(void *)(DerivedStorage + 32);
  MEMORY[0x19970E910](*(void *)(v3 + 8));
  int v4 = *(_DWORD *)(v3 + 16);
  MEMORY[0x19970E930](*(void *)(v3 + 8));
  uint64_t v5 = *(void *)(DerivedStorage + 32);
  MEMORY[0x19970E910](*(void *)(v5 + 8));
  int v6 = *(_DWORD *)(v5 + 20);
  MEMORY[0x19970E930](*(void *)(v5 + 8));
  if (!*(unsigned char *)DerivedStorage)
  {
    if (!(v4 | v6) && pap_AirPlayState(a1) - 14 <= 2)
    {
      if (dword_1E93510E8)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      playerairplay_savePlaybackInfoAndStopAPV(a1, 0, 0);
    }
    dispatch_source_set_timer(*(dispatch_source_t *)(DerivedStorage + 112), 0xFFFFFFFFFFFFFFFFLL, 0, 0);
  }
}

void playerairplay_reflectSubPlayerNotification(uint64_t a1, const void *a2, const void *a3)
{
  if (*(unsigned char *)CMBaseObjectGetDerivedStorage()) {
    return;
  }
  if (!pap_InAirPlayTransitionMode(a2))
  {
    if (pap_AirPlayState(a2) - 14 < 3) {
      goto LABEL_8;
    }
LABEL_7:
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    goto LABEL_8;
  }
  if (CFEqual(a3, @"SubtitleChanged") || CFEqual(a3, @"IsNeroPlaybackActiveDidChange")) {
    goto LABEL_7;
  }
LABEL_8:
  if (CFEqual(a3, @"RateDidChange") || CFEqual(a3, @"CurrentItemDidChange"))
  {
    playerairplay_updateRoutingRegistry(a2);
  }
}

unsigned char *playerairplay_autoMediaSelectionCriteriaChanged(uint64_t a1, const void *a2)
{
  uint64_t result = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (a2 && !*result)
  {
    CFRetain(a2);
    return (unsigned char *)FigDeferNotificationToDispatchQueue();
  }
  return result;
}

void playerairplay_hijackedByOtherPlayer(uint64_t a1, const void *a2, uint64_t a3, const void *a4, const __CFDictionary *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFStringRef Value = CFDictionaryGetValue(a5, @"HijackingPlayer");
  BOOL v10 = Value != a4 || Value == a2;
  if (!v10 && !*(unsigned char *)DerivedStorage)
  {
    unint64_t v11 = (const void *)pap_CopyInterstitialPlayer();
    int v12 = (const void *)pap_copyPrimaryPlayer();
    if (v11) {
      BOOL v13 = v11 == a4;
    }
    else {
      BOOL v13 = 0;
    }
    char v14 = v13;
    if (v11) {
      CFRelease(v11);
    }
    if (v12)
    {
      CFRelease(v12);
      BOOL v15 = v12 == a4;
    }
    else
    {
      BOOL v15 = 0;
    }
    if (v15) {
      char v16 = 1;
    }
    else {
      char v16 = v14;
    }
    if ((v16 & 1) == 0)
    {
      if (a2) {
        CFRetain(a2);
      }
      unsigned int v17 = *(NSObject **)(DerivedStorage + 104);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = __playerairplay_hijackedByOtherPlayer_block_invoke;
      block[3] = &__block_descriptor_56_e5_v8__0l;
      block[4] = DerivedStorage;
      void block[5] = a2;
      void block[6] = a4;
      dispatch_async(v17, block);
    }
  }
}

void FigCFRelease_3(CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t FigPlayerAirPlayCreate(const __CFAllocator *a1, const void *a2, uint64_t a3, CFTypeRef *a4)
{
  return FigPlayerAirPlayCreateWithOptions(a1, a2, 0, a4);
}

uint64_t playerairplay_Invalidate(const void *a1)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t Shared = FigShareAndAirPlayHelperGetShared();
  if (dword_1E93510E8)
  {
    int v49 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!*(unsigned char *)DerivedStorage && *(void *)(DerivedStorage + 104))
  {
    *(unsigned char *)uint64_t DerivedStorage = 1;
    uint64_t v6 = *(void *)(DerivedStorage + 472);
    if (v6)
    {
      MEMORY[0x19970E910](v6, v3);
      for (CFArrayRef i = *(const __CFArray **)(DerivedStorage + 464); i; CFArrayRef i = *(const __CFArray **)(DerivedStorage + 464))
      {
        if (CFArrayGetCount(i) < 1) {
          break;
        }
        CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 464), 0);
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterRemoveWeakListener();
        CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(DerivedStorage + 464), 0);
      }
      MEMORY[0x19970E930](*(void *)(DerivedStorage + 472));
    }
    notify_cancel(*(_DWORD *)(DerivedStorage + 392));
    CMNotificationCenterGetDefaultLocalCenter();
    FigGetNotifyingObjectForSelectionCriteriaChanged();
    CMNotificationCenterRemoveListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigGetNotifyingObjectForSelectionCriteriaChanged();
    CMNotificationCenterBarrier();
    if (*(void *)(DerivedStorage + 8))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterRemoveListener();
      uint64_t FigBaseObject = FigPlayerGetFigBaseObject(*(void *)(DerivedStorage + 8));
      uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
      BOOL v10 = v9 ? (void *)v9 : 0;
      if (*v10 >= 2uLL)
      {
        unint64_t v11 = (void (*)(uint64_t))v10[8];
        if (v11) {
          v11(FigBaseObject);
        }
      }
    }
    if (*(void *)(DerivedStorage + 296))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListeners();
    }
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    int v12 = *(NSObject **)(DerivedStorage + 104);
    if (v12)
    {
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = __playerairplay_Invalidate_block_invoke;
      block[3] = &__block_descriptor_40_e5_v8__0l;
      block[4] = a1;
      dispatch_sync(v12, block);
    }
    BOOL v13 = *(NSObject **)(DerivedStorage + 176);
    if (v13) {
      dispatch_sync(v13, &__block_literal_global_29);
    }
    char v14 = *(NSObject **)(DerivedStorage + 112);
    if (v14) {
      dispatch_source_cancel(v14);
    }
    BOOL v15 = *(NSObject **)(DerivedStorage + 80);
    if (v15) {
      dispatch_sync(v15, &__block_literal_global_31_0);
    }
    char v16 = *(NSObject **)(DerivedStorage + 88);
    if (v16) {
      dispatch_sync(v16, &__block_literal_global_33);
    }
    unsigned int v17 = *(NSObject **)(DerivedStorage + 96);
    if (v17) {
      dispatch_sync(v17, &__block_literal_global_35);
    }
    uint64_t v18 = *(NSObject **)(DerivedStorage + 104);
    if (v18)
    {
      v46[0] = MEMORY[0x1E4F143A8];
      v46[1] = 3221225472;
      v46[2] = __playerairplay_Invalidate_block_invoke_6;
      v46[3] = &__block_descriptor_40_e5_v8__0l;
      v46[4] = a1;
      dispatch_sync(v18, v46);
    }
    int v19 = pap_AirPlayState(a1);
    if (v19 && v19 != 10 && *(unsigned char *)(DerivedStorage + 45)) {
      FigPlayerAirPlayRoute_ResumeAirPlayScreen(*(void *)(DerivedStorage + 224));
    }
    uint64_t v20 = *(const void **)(DerivedStorage + 296);
    if (v20)
    {
      CFRelease(v20);
      *(void *)(DerivedStorage + 296) = 0;
    }
    *(unsigned char *)(DerivedStorage + 304) = 0;
    if (Shared)
    {
      uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v22 = v21 ? v21 : 0;
      uint64_t v23 = *(void (**)(uint64_t, void, const void *))(v22 + 8);
      if (v23) {
        v23(Shared, 0, a1);
      }
    }
    uint64_t v24 = *(NSObject **)(DerivedStorage + 104);
    if (v24)
    {
      v45[0] = MEMORY[0x1E4F143A8];
      v45[1] = 3221225472;
      v45[2] = __playerairplay_Invalidate_block_invoke_7;
      v45[3] = &__block_descriptor_40_e5_v8__0l;
      v45[4] = a1;
      dispatch_sync(v24, v45);
    }
    MEMORY[0x19970E290](*(void *)(DerivedStorage + 24));
    uint64_t v25 = *(const void **)(DerivedStorage + 16);
    if (v25)
    {
      CFAllocatorRef v26 = CFGetAllocator(v25);
      CFDictionaryRef Copy = CFDictionaryCreateCopy(v26, *(CFDictionaryRef *)(DerivedStorage + 16));
      if (Copy)
      {
        CFDictionaryRef v28 = Copy;
        CFDictionaryApplyFunction(Copy, (CFDictionaryApplierFunction)playerairplay_InvalidateItem, 0);
        CFRelease(v28);
      }
    }
    MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 24));
    uint64_t v29 = *(void *)(DerivedStorage + 8);
    if (v29)
    {
      uint64_t v30 = FigPlayerGetFigBaseObject(v29);
      if (v30)
      {
        uint64_t v31 = v30;
        uint64_t v32 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v33 = v32 ? v32 : 0;
        CMTime v34 = *(void (**)(uint64_t))(v33 + 24);
        if (v34) {
          v34(v31);
        }
      }
    }
    FigPlayerAirPlayRoute_SetProperty(*(void *)(DerivedStorage + 224), @"FigAudioSession", 0);
    uint64_t v35 = *(const void **)(DerivedStorage + 376);
    if (v35)
    {
      if (pap_GetPAPRegistryMutexAndList_initOnceCheck != -1) {
        dispatch_once(&pap_GetPAPRegistryMutexAndList_initOnceCheck, &__block_literal_global_216);
      }
      uint64_t v36 = pap_GetPAPRegistryMutexAndList_sListLock;
      CMTime v37 = (__CFDictionary *)pap_GetPAPRegistryMutexAndList_sList;
      MEMORY[0x19970E910](pap_GetPAPRegistryMutexAndList_sListLock);
      CFDictionaryRemoveValue(v37, v35);
      MEMORY[0x19970E930](v36);
      CFRelease(*(CFTypeRef *)(DerivedStorage + 376));
    }
    CFStringRef v38 = *(const void **)(DerivedStorage + 384);
    if (v38)
    {
      CFRelease(v38);
      *(void *)(DerivedStorage + 384) = 0;
    }
    playerairplay_cleanUpScrubLayerAndContext();
    uint64_t v39 = *(NSObject **)(DerivedStorage + 176);
    if (v39) {
      dispatch_sync(v39, &__block_literal_global_37);
    }
    uint64_t v40 = *(NSObject **)(DerivedStorage + 80);
    if (v40) {
      dispatch_sync(v40, &__block_literal_global_39_0);
    }
    CFMutableDictionaryRef v41 = *(NSObject **)(DerivedStorage + 88);
    if (v41) {
      dispatch_sync(v41, &__block_literal_global_41_0);
    }
    char v42 = *(NSObject **)(DerivedStorage + 104);
    if (v42) {
      dispatch_sync(v42, &__block_literal_global_43);
    }
    int v43 = *(NSObject **)(DerivedStorage + 96);
    if (v43) {
      dispatch_sync(v43, &__block_literal_global_45);
    }
    playqueue_clearPlayQueue(*(void *)(DerivedStorage + 32));
  }
  return 0;
}

void playerairplay_Finalize(const void *a1)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  playerairplay_Invalidate(a1);
  uint64_t v3 = DerivedStorage[22];
  if (v3)
  {
    dispatch_release(v3);
    DerivedStorage[22] = 0;
  }
  if (DerivedStorage[23])
  {
    FigSimpleMutexDestroy();
    DerivedStorage[23] = 0;
  }
  int v4 = DerivedStorage[14];
  if (v4)
  {
    dispatch_release(v4);
    DerivedStorage[14] = 0;
  }
  uint64_t v5 = DerivedStorage[10];
  if (v5)
  {
    dispatch_release(v5);
    DerivedStorage[10] = 0;
  }
  uint64_t v6 = DerivedStorage[11];
  if (v6)
  {
    dispatch_release(v6);
    DerivedStorage[11] = 0;
  }
  CFNumberRef v7 = DerivedStorage[13];
  if (v7)
  {
    dispatch_release(v7);
    DerivedStorage[13] = 0;
  }
  uint64_t v8 = DerivedStorage[12];
  if (v8)
  {
    dispatch_release(v8);
    DerivedStorage[12] = 0;
  }
  uint64_t v9 = (const void *)DerivedStorage[1];
  if (v9)
  {
    CFRelease(v9);
    DerivedStorage[1] = 0;
  }
  BOOL v10 = (const void *)DerivedStorage[28];
  if (v10)
  {
    CFRelease(v10);
    DerivedStorage[28] = 0;
  }
  unint64_t v11 = (const void *)DerivedStorage[15];
  if (v11)
  {
    CFRelease(v11);
    DerivedStorage[15] = 0;
  }
  int v12 = (const void *)DerivedStorage[17];
  if (v12)
  {
    CFRelease(v12);
    DerivedStorage[17] = 0;
  }
  BOOL v13 = (const void *)DerivedStorage[18];
  if (v13)
  {
    CFRelease(v13);
    DerivedStorage[18] = 0;
  }
  char v14 = (const void *)DerivedStorage[55];
  if (v14)
  {
    CFRelease(v14);
    DerivedStorage[55] = 0;
  }
  BOOL v15 = (const void *)DerivedStorage[46];
  if (v15)
  {
    CFRelease(v15);
    DerivedStorage[46] = 0;
  }
  char v16 = (const void *)DerivedStorage[45];
  if (v16)
  {
    CFRelease(v16);
    DerivedStorage[45] = 0;
  }
  unsigned int v17 = (const void *)DerivedStorage[52];
  if (v17) {
    CFRelease(v17);
  }
  uint64_t v18 = (const void *)DerivedStorage[51];
  if (v18) {
    CFRelease(v18);
  }
  int v19 = (const void *)DerivedStorage[53];
  if (v19) {
    CFRelease(v19);
  }
  uint64_t v20 = (const void *)DerivedStorage[54];
  if (v20) {
    CFRelease(v20);
  }
  uint64_t v21 = (CFTypeRef *)DerivedStorage[4];
  if (v21)
  {
    if (*v21) {
      CFRelease(*v21);
    }
    FigSimpleMutexDestroy();
    free(v21);
  }
  FigSimpleMutexDestroy();
  DerivedStorage[3] = 0;
  uint64_t v22 = (const void *)DerivedStorage[2];
  if (v22)
  {
    CFRelease(v22);
    DerivedStorage[2] = 0;
  }
  FigSimpleMutexDestroy();
  FigSimpleMutexDestroy();
  uint64_t v23 = (const void *)DerivedStorage[58];
  if (v23)
  {
    CFRelease(v23);
    DerivedStorage[58] = 0;
  }
  uint64_t v24 = (const void *)DerivedStorage[36];
  if (v24)
  {
    CFRelease(v24);
  }
}

uint64_t playerairplay_CopyProperty(const void *a1, const void *a2, uint64_t a3, void *a4)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage || !a4)
  {
LABEL_2:
    return FigSignalErrorAt();
  }
  BOOL v10 = DerivedStorage;
  if (CFEqual(a2, @"IsValid"))
  {
    unint64_t v11 = (const void **)MEMORY[0x1E4F1CFD0];
LABEL_16:
    int SInt32 = *v11;
LABEL_17:
    int SInt32 = CFRetain(SInt32);
LABEL_18:
    uint64_t v16 = 0;
    *a4 = SInt32;
    return v16;
  }
  if (CFEqual(a2, @"AllowsAirPlayVideo"))
  {
    unint64_t v11 = (const void **)MEMORY[0x1E4F1CFD0];
    int v12 = v10[40];
LABEL_13:
    BOOL v13 = (const void **)MEMORY[0x1E4F1CFC8];
    BOOL v14 = v12 == 0;
    goto LABEL_14;
  }
  if (CFEqual(a2, @"ParticipatingInCoordinatedPlayback"))
  {
    unint64_t v11 = (const void **)MEMORY[0x1E4F1CFD0];
    int v12 = v10[448];
    goto LABEL_13;
  }
  if (CFEqual(a2, @"IsAirPlayVideoActive"))
  {
    BOOL IsAirplayVideoActive = playerairplay_getIsAirplayVideoActive(a1);
    unint64_t v11 = (const void **)MEMORY[0x1E4F1CFD0];
    if (!IsAirplayVideoActive) {
      unint64_t v11 = (const void **)MEMORY[0x1E4F1CFC8];
    }
    goto LABEL_16;
  }
  if (CFEqual(a2, @"IsIntegratedTimelineSupportedByExternalPlayback"))
  {
    unint64_t v11 = (const void **)MEMORY[0x1E4F1CFD0];
    int v12 = v10[250];
    goto LABEL_13;
  }
  if (CFEqual(a2, @"UseAirPlayVideoAudioOnlyMode"))
  {
    unint64_t v11 = (const void **)MEMORY[0x1E4F1CFD0];
    int v12 = v10[42];
    goto LABEL_13;
  }
  if (CFEqual(a2, @"EnableBufferedAirPlayLocalPlayback")
    || CFEqual(a2, @"BufferedAirPlayLocalPlaybackVolume"))
  {
    FigSignalErrorAt();
    goto LABEL_31;
  }
  if (CFEqual(a2, @"UsesAirPlayVideoWhileAirPlayScreenIsActive"))
  {
    unint64_t v11 = (const void **)MEMORY[0x1E4F1CFD0];
    int v12 = v10[43];
    goto LABEL_13;
  }
  if (CFEqual(a2, @"PickerContextUUID"))
  {
    pap_AirPlayRoute_CopyProperty(a1, @"PickerContextUUID", a3, a4);
    return 0;
  }
  if (CFEqual(a2, @"AirPlayVideoScrubbingCAContextID"))
  {
    uint64_t v23 = (void *)MEMORY[0x199711A30]();
    uint64_t v24 = (void *)*((void *)v10 + 20);
    if (v24) {
      goto LABEL_48;
    }
    uint64_t v25 = *MEMORY[0x1E4F1CFD0];
    uint64_t v26 = objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjectsAndKeys:", @"FigPlayerAirPlay_Scrub_CAContext", *MEMORY[0x1E4F39E60], *MEMORY[0x1E4F1CFD0], *MEMORY[0x1E4F39E80], 0);
    uint64_t v27 = (const void *)[MEMORY[0x1E4F39D28] contextWithOptions:v26];
    *((void *)v10 + 20) = v27;
    if (!v27) {
      goto LABEL_59;
    }
    CFRetain(v27);
    if (!*((void *)v10 + 21))
    {
      CFDictionaryRef v28 = (const void *)[MEMORY[0x1E4F39BE8] layer];
      *((void *)v10 + 21) = v28;
      if (v28) {
        CFRetain(v28);
      }
    }
    [MEMORY[0x1E4F39CF8] begin];
    if (!pthread_main_np()) {
      [MEMORY[0x1E4F39CF8] activateBackground:1];
    }
    [MEMORY[0x1E4F39CF8] setValue:v25 forKey:*MEMORY[0x1E4F3A5A8]];
    [*((id *)v10 + 20) setLayer:*((void *)v10 + 21)];
    [MEMORY[0x1E4F39CF8] commit];
    uint64_t v24 = (void *)*((void *)v10 + 20);
    if (v24)
    {
LABEL_48:
      int valuePtr = [v24 contextId];
      uint64_t v16 = 0;
      *a4 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
    }
    else
    {
LABEL_59:
      uint64_t v16 = FigSignalErrorAt();
    }
    return v16;
  }
  if (CFEqual(a2, @"PlayerName"))
  {
    int SInt32 = (const void *)*((void *)v10 + 47);
    if (!SInt32) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  if (CFEqual(a2, @"IsSetupForAirPlayVideo"))
  {
    CFBooleanRef BOOLean = 0;
    pap_AirPlayRoute_CopyProperty(a1, @"IsSetupForAirPlayVideo", *MEMORY[0x1E4F1CF80], &BOOLean);
    if (BOOLean && CFBooleanGetValue(BOOLean)) {
      uint64_t v29 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
    }
    else {
      uint64_t v29 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
    }
    *a4 = CFRetain(*v29);
    if (BOOLean) {
      CFRelease(BOOLean);
    }
    return 0;
  }
  int v30 = pap_AirPlayState(a1);
  if (v30 && v30 != 10)
  {
    if (CFEqual(a2, @"ActionAtEnd"))
    {
      int SInt32 = (const void *)*((void *)v10 + 15);
      goto LABEL_17;
    }
    if (CFEqual(a2, @"PlaybackState"))
    {
      int SInt32 = (const void *)FigCFNumberCreateSInt32();
      goto LABEL_18;
    }
    if (CFEqual(a2, @"ExternalProtectionStatus"))
    {
      int SInt32 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)&kFigPlayerExternalProtectionStatusKey_Video, (const void **)&kFigPlayerExternalProtectionStatus_Protected, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      goto LABEL_18;
    }
  }
  else
  {
    if (CFEqual(a2, @"ExternalPlaybackCapabilities"))
    {
      int SInt32 = (const void *)*((void *)v10 + 33);
      if (!SInt32) {
        goto LABEL_18;
      }
      goto LABEL_17;
    }
    if (CFEqual(a2, @"IsBufferedAirPlayActive"))
    {
      unint64_t v11 = (const void **)MEMORY[0x1E4F1CFD0];
      BOOL v13 = (const void **)MEMORY[0x1E4F1CFC8];
      BOOL v14 = *((void *)v10 + 37) == 0;
LABEL_14:
      if (v14) {
        unint64_t v11 = v13;
      }
      goto LABEL_16;
    }
  }
LABEL_31:
  uint64_t v18 = *((void *)v10 + 1);
  if (!v18) {
    goto LABEL_2;
  }
  uint64_t FigBaseObject = FigPlayerGetFigBaseObject(v18);
  uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v20) {
    uint64_t v21 = v20;
  }
  else {
    uint64_t v21 = 0;
  }
  uint64_t v22 = *(uint64_t (**)(uint64_t, const void *, uint64_t, void *))(v21 + 48);
  if (!v22) {
    return 4294954514;
  }

  return v22(FigBaseObject, a2, a3, a4);
}

uint64_t playerairplay_SetProperty(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v18 = 0;
  CFTypeRef cf = 0;
  char v17 = 0;
  uint64_t v7 = FPSupport_HandlePlayerSetPropertyAndCopyModification(a1, a2, a3, 0, (uint64_t)playerairplay_handleSetProperty, &v17, &cf, &v18);
  if (v7) {
    goto LABEL_9;
  }
  if (v17)
  {
    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v8 = *(void *)(DerivedStorage + 8);
    if (!v8)
    {
      uint64_t v7 = FigSignalErrorAt();
      goto LABEL_9;
    }
    CFTypeRef v10 = v18;
    CFTypeRef v9 = cf;
    uint64_t FigBaseObject = FigPlayerGetFigBaseObject(v8);
    uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v12) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    BOOL v14 = *(uint64_t (**)(uint64_t, CFTypeRef, CFTypeRef))(v13 + 56);
    if (v14)
    {
      uint64_t v7 = v14(FigBaseObject, v9, v10);
LABEL_9:
      uint64_t v15 = v7;
      goto LABEL_11;
    }
    uint64_t v15 = 4294954514;
  }
LABEL_11:
  if (cf) {
    CFRelease(cf);
  }
  if (v18) {
    CFRelease(v18);
  }
  return v15;
}

void playerairplay_externalStartupTaskCompleted(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  int v7 = 0;
  if (!*DerivedStorage)
  {
    int v4 = DerivedStorage;
    if (FigCFDictionaryGetInt32IfPresent())
    {
      if (a2) {
        CFRetain(a2);
      }
      uint64_t v5 = *((void *)v4 + 13);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = __playerairplay_externalStartupTaskCompleted_block_invoke;
      block[3] = &__block_descriptor_48_e5_v8__0l;
      block[4] = v4;
      void block[5] = a2;
      dispatch_async(v5, block);
    }
  }
}

uint64_t playerairplay_removeFigAudioSessionNotificationHandlers()
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (*(void *)(result + 384))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    return FigNotificationCenterRemoveWeakListener();
  }
  return result;
}

void playerairplay_resetAirPlayRouteInformation(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  playerairplay_updateAirPlayRouteInformationAndEndpoint(a1, 0, 0);
  pap_invalidateEndpointPlaybackSession(a1);
  uint64_t v3 = *(const void **)(DerivedStorage + 256);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(DerivedStorage + 256) = 0;
  }
  int v4 = *(const void **)(DerivedStorage + 264);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(DerivedStorage + 264) = 0;
    *(unsigned char *)(DerivedStorage + 272) = 0;
    if (!*(unsigned char *)DerivedStorage)
    {
      playerairplay_postPlayerNotification(a1, @"ExternalPlaybackCapabilitiesChanged", 0);
    }
  }
  else
  {
    *(unsigned char *)(DerivedStorage + 272) = 0;
  }
}

uint64_t pap_setAirPlayState(const void *a1, int a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v5 = pap_AirPlayState(a1);
  int v7 = v5 == 16 || (v5 & 0xFFFFFFFE) == 14;
  BOOL IsAirplayVideoActive = playerairplay_getIsAirplayVideoActive(a1);
  *(_DWORD *)(DerivedStorage + 232) = a2;
  playerairplay_notifyIfIsAirPlayVideoActiveChanged(a1, IsAirplayVideoActive);
  uint64_t result = pap_AirPlayState(a1);
  int v11 = result == 16 || (result & 0xFFFFFFFE) == 14;
  if (v7 != v11)
  {
    return (uint64_t)playerairplay_updateShareAndAirPlayEchoMitigation(a1);
  }
  return result;
}

void playerairplay_removeAndCleanupQueuedItemsOnAirPlayController()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFArrayRef PlayQueueSnapshot = playqueue_createPlayQueueSnapshot(*(void *)(DerivedStorage + 32), 0);
  if (PlayQueueSnapshot)
  {
    CFArrayRef v2 = PlayQueueSnapshot;
    if (!*(unsigned char *)DerivedStorage)
    {
      CFIndex Count = CFArrayGetCount(PlayQueueSnapshot);
      if (Count >= 1)
      {
        CFIndex v4 = Count;
        for (CFIndex i = 0; i != v4; ++i)
        {
          if (*(unsigned char *)DerivedStorage) {
            break;
          }
          CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v2, i);
          if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 733))
          {
            itemairplay_removeQueuedItemOnAirPlayController((uint64_t)ValueAtIndex);
            playqueue_removeItemFromClientQueueAndFromMediaControlPlaylist(*(void *)(DerivedStorage + 32), ValueAtIndex, 0, 1);
          }
        }
      }
    }
    CFRelease(v2);
  }
}

uint64_t playerairplay_InvalidateItem(uint64_t a1, uint64_t a2)
{
  uint64_t result = FigPlaybackItemGetFigBaseObject(a2);
  if (result)
  {
    uint64_t v3 = result;
    uint64_t VTable = CMBaseObjectGetVTable();
    uint64_t v6 = *(void *)(VTable + 8);
    uint64_t result = VTable + 8;
    uint64_t v5 = v6;
    uint64_t v7 = v6 ? v5 : 0;
    uint64_t v8 = *(uint64_t (**)(uint64_t))(v7 + 24);
    if (v8)
    {
      return v8(v3);
    }
  }
  return result;
}

void playerairplay_cleanUpScrubLayerAndContext()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = (void *)MEMORY[0x199711A30]();
  if (DerivedStorage && (*(void *)(DerivedStorage + 160) || *(void *)(DerivedStorage + 168)))
  {
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 184));
    uint64_t v2 = MEMORY[0x1E4F1F9F8];
    *(_OWORD *)(DerivedStorage + 192) = *MEMORY[0x1E4F1F9F8];
    *(void *)(DerivedStorage + 208) = *(void *)(v2 + 16);
    MEMORY[0x19970E930](*(void *)(DerivedStorage + 184));
    uint64_t v3 = *(NSObject **)(DerivedStorage + 176);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __playerairplay_cleanUpScrubLayerAndContext_block_invoke;
    block[3] = &__block_descriptor_40_e5_v8__0l;
    block[4] = DerivedStorage;
    dispatch_sync(v3, block);
  }
}

void playqueue_clearPlayQueue(uint64_t a1)
{
  MEMORY[0x19970E910](*(void *)(a1 + 8));
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)a1);
  *(void *)(a1 + 16) = 0;

  JUMPOUT(0x19970E930);
}

void __playerairplay_externalStartupTaskCompleted_block_invoke(uint64_t a1)
{
  if (!**(unsigned char **)(a1 + 32))
  {
    int v2 = pap_AirPlayState(*(const void **)(a1 + 40));
    if (v2 && v2 != 10) {
      playerairplay_setRateAirPlay(*(const void **)(a1 + 40), 0, MEMORY[0x1E4F1F9F8], MEMORY[0x1E4F1F9F8], 0);
    }
  }
  CFIndex v4 = *(const void **)(a1 + 40);
  if (v4)
  {
    CFRelease(v4);
  }
}

void playerairplay_setRateAirPlay(const void *a1, int a2, uint64_t a3, uint64_t a4, const void *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v11 = DerivedStorage;
  CFTypeRef cf = 0;
  if (*(float *)(DerivedStorage + 48) != 0.0 && *(void *)(DerivedStorage + 168)) {
    pap_clearLayerContents(a1);
  }
  playqueue_copyCurrentClientPlayQueueItemAndCurrentMediaControlPlayListItem(*(void *)(v11 + 32), 0, (unint64_t)&cf);
  uint64_t v12 = CMBaseObjectGetDerivedStorage();
  if (cf)
  {
    uint64_t v13 = v12;
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    FigCFDictionarySetFloat32();
    if (a2)
    {
      long long v21 = *(_OWORD *)a3;
      uint64_t v22 = *(void *)(a3 + 16);
      FigCFDictionarySetCMTime();
      long long v21 = *(_OWORD *)a4;
      uint64_t v22 = *(void *)(a4 + 16);
      FigCFDictionarySetCMTime();
    }
    if (a5) {
      CFDictionarySetValue(Mutable, @"SetRateOptions", a5);
    }
    itemairplay_NotifyReachedTimeToPauseBufferingIfFF(a1, cf);
    LOBYTE(v21) = 0;
    LOBYTE(v19) = 0;
    FigCFDictionaryGetBooleanIfPresent();
    float v15 = *(float *)(v11 + 48);
    if (v15 == 0.0 || *(unsigned char *)(v11 + 480))
    {
      int v16 = 1;
    }
    else
    {
      playerairplay_notifyStartupTasksOfEvents(a1, cf, 5, 0, MEMORY[0x1E4F1F9F8], &v21, v15);
      int v16 = v21;
      *(unsigned char *)(v11 + 480) = 1;
      if (!v16)
      {
LABEL_20:
        playerairplay_inferPlaybackStateFromAirPlayPlayer(a1, cf != 0);
        if ((*(_DWORD *)(v11 + 76) == 4 || *(float *)(v11 + 48) == 0.0) && v16)
        {
          MEMORY[0x19970E910](*(void *)(v13 + 344));
          FigCFDictionarySetValue();
          MEMORY[0x19970E930](*(void *)(v13 + 344));
          playerairplay_triggerAsyncCheckAndUpdatePlayQueueItems(a1);
        }
        goto LABEL_28;
      }
      float v15 = *(float *)(v11 + 48);
    }
    if (v15 != 0.0 && *(unsigned char *)(v11 + 56)) {
      int v16 = 0;
    }
    goto LABEL_20;
  }
  if (!playerairplay_deferMediaControlPlaylistForInterstitials(a1))
  {
    CFTypeRef v17 = a1 ? CFRetain(a1) : 0;
    float v18 = *(float *)(v11 + 48);
    long long v21 = *(_OWORD *)a3;
    uint64_t v22 = *(void *)(a3 + 16);
    long long v19 = *(_OWORD *)a4;
    uint64_t v20 = *(void *)(a4 + 16);
    pap_PlaybackSessionSetRate(v17, a1, a2, &v21, &v19, a5, 1, v18);
    if (v17) {
      CFRelease(v17);
    }
  }
  playerairplay_inferPlaybackStateFromAirPlayPlayer(a1, cf != 0);
  CFMutableDictionaryRef Mutable = 0;
LABEL_28:
  if (cf) {
    CFRelease(cf);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
}

void pap_clearLayerContents(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 184));
  uint64_t v3 = MEMORY[0x1E4F1F9F8];
  *(_OWORD *)(DerivedStorage + 192) = *MEMORY[0x1E4F1F9F8];
  *(void *)(DerivedStorage + 208) = *(void *)(v3 + 16);
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 184));
  CFRetain(a1);
  CFIndex v4 = *(NSObject **)(DerivedStorage + 176);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = __pap_clearLayerContents_block_invoke;
  _OWORD v5[3] = &__block_descriptor_48_e5_v8__0l;
  v5[4] = DerivedStorage;
  void v5[5] = a1;
  dispatch_async(v4, v5);
}

uint64_t playqueue_copyCurrentClientPlayQueueItemAndCurrentMediaControlPlayListItem(uint64_t result, unint64_t a2, unint64_t a3)
{
  if (a2 | a3)
  {
    uint64_t v5 = (CFArrayRef *)result;
    MEMORY[0x19970E910](*(void *)(result + 8));
    if (a2)
    {
      CFIndex CurrentClientPlayQueueItemIndexInternal = playqueue_getCurrentClientPlayQueueItemIndexInternal(v5);
      if (CurrentClientPlayQueueItemIndexInternal != -1)
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*v5, CurrentClientPlayQueueItemIndexInternal);
        if (ValueAtIndex) {
          CFDictionaryRef ValueAtIndex = CFRetain(ValueAtIndex);
        }
        *(void *)a2 = ValueAtIndex;
      }
    }
    if (a3)
    {
      CFIndex Count = CFArrayGetCount(*v5);
      if (Count >= 1)
      {
        CFIndex v9 = Count;
        CFIndex v10 = 0;
        while (1)
        {
          uint64_t v11 = CFArrayGetValueAtIndex(*v5, v10);
          uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
          if (!DerivedStorage[72] && DerivedStorage[733] && DerivedStorage[739] != 2) {
            break;
          }
          if (v9 == ++v10) {
            goto LABEL_14;
          }
        }
        if (v11) {
          CFTypeRef v13 = CFRetain(v11);
        }
        else {
          CFTypeRef v13 = 0;
        }
        *(void *)a3 = v13;
      }
    }
LABEL_14:
    JUMPOUT(0x19970E930);
  }
  return result;
}

void itemairplay_NotifyReachedTimeToPauseBufferingIfFF(const void *a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = CMBaseObjectGetDerivedStorage();
  int v6 = pap_AirPlayState(a1);
  if (v6
    && v6 != 10
    && !*(unsigned char *)(DerivedStorage + 249)
    && *(float *)(DerivedStorage + 48) > 1.0
    && (*(unsigned char *)(v5 + 508) & 1) != 0)
  {
    itemairplay_postItemNotification(a2, @"ReachedTimeToPauseBuffering", 0);
  }
}

CFArrayRef playerairplay_notifyStartupTasksOfEvents(const void *a1, const void *a2, int a3, int a4, uint64_t a5, unsigned char *a6, float a7)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  BOOL v34 = 0;
  *a6 = 1;
  if (!a2) {
    return 0;
  }
  uint64_t v15 = DerivedStorage;
  int v16 = pap_AirPlayState(a1);
  CFArrayRef Copy = 0;
  if (a7 != 0.0)
  {
    if (v16)
    {
      if (v16 != 10)
      {
        MEMORY[0x19970E910](*(void *)(v15 + 472));
        CFArrayRef Copy = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], *(CFArrayRef *)(v15 + 464));
        MEMORY[0x19970E930](*(void *)(v15 + 472));
        if (Copy)
        {
          CFIndex Count = CFArrayGetCount(Copy);
          if (Count < 1)
          {
LABEL_34:
            CFArrayRef v20 = Copy;
            NotificationPayloadForProperties = 0;
            CFArrayRef Copy = 0;
          }
          else
          {
            CFDictionaryRef v28 = a6;
            CFIndex v19 = 0;
            int v32 = a4;
            CFArrayRef v30 = Copy;
            uint64_t v31 = a5;
            uint64_t v29 = a2;
            while (1)
            {
              CFArrayRef v20 = Copy;
              CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(Copy, v19);
              uint64_t v22 = FigPlayerStartupTaskCopyRequiredParameters((uint64_t)ValueAtIndex, (__CFArray **)&cf);
              if (v22)
              {
                CFArrayRef Copy = (const __CFArray *)v22;
                NotificationPayloadForProperties = 0;
                goto LABEL_35;
              }
              NotificationPayloadForProperties = FPSupport_CreateNotificationPayloadForProperties((uint64_t)a1, (uint64_t)a2, (CFArrayRef)cf);
              if (FigCFArrayContainsValue()) {
                FigCFDictionarySetFloat32();
              }
              if (FigCFArrayContainsValue()) {
                FigCFDictionarySetValue();
              }
              int v24 = FigCFArrayContainsValue();
              if (a4 && v24) {
                FigCFDictionarySetInt32();
              }
              if FigCFArrayContainsValue() && (*(unsigned char *)(a5 + 12))
              {
                CMTime v37 = *(CMTime *)a5;
                FigCFDictionarySetCMTime();
              }
              if (FigCFArrayContainsValue())
              {
                CMTime v37 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
                itemairplay_GetCurrentTime(a2, &v37);
                CMTime v36 = v37;
                FigCFDictionarySetCMTime();
              }
              uint64_t v25 = FigPlayerStartupTaskNotifyOfEvents((uint64_t)ValueAtIndex, a3, (uint64_t)NotificationPayloadForProperties, &v34);
              if (v25) {
                break;
              }
              if (dword_1E93510E8)
              {
                os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
                CFArrayRef Copy = v30;
                a5 = v31;
                a4 = v32;
                a2 = v29;
              }
              if (cf)
              {
                CFRelease(cf);
                CFTypeRef cf = 0;
              }
              if (NotificationPayloadForProperties) {
                CFRelease(NotificationPayloadForProperties);
              }
              if (!v34) {
                *CFDictionaryRef v28 = 0;
              }
              if (Count == ++v19) {
                goto LABEL_34;
              }
            }
            CFArrayRef Copy = (const __CFArray *)v25;
            uint64_t v27 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
LABEL_35:
          CFRelease(v20);
          if (NotificationPayloadForProperties) {
            CFRelease(NotificationPayloadForProperties);
          }
        }
      }
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  return Copy;
}

void playerairplay_inferPlaybackStateFromAirPlayPlayer(const void *a1, int a2)
{
  CMBaseObjectGetDerivedStorage();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(float *)(DerivedStorage + 48) == 0.0)
  {
    int WaitingState = 0;
    goto LABEL_16;
  }
  if (!a2)
  {
    int WaitingState = 3;
    goto LABEL_16;
  }
  uint64_t v6 = DerivedStorage;
  uint64_t v7 = CMBaseObjectGetDerivedStorage();
  int v8 = pap_AirPlayState(a1);
  if (!v8 || v8 == 10) {
    goto LABEL_12;
  }
  MEMORY[0x19970E910](*(void *)(v7 + 472));
  CFArrayRef v9 = *(const __CFArray **)(v7 + 464);
  if (!v9 || (CFIndex Count = CFArrayGetCount(v9), Count < 1))
  {
LABEL_11:
    MEMORY[0x19970E930](*(void *)(v7 + 472));
LABEL_12:
    if (*(unsigned char *)(v6 + 56)) {
      int WaitingState = 6;
    }
    else {
      int WaitingState = 4;
    }
    goto LABEL_16;
  }
  CFIndex v11 = Count;
  CFIndex v12 = 0;
  while (1)
  {
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v7 + 464), v12);
    if (!FigPlayerStartupTaskDoesAllowStartup((uint64_t)ValueAtIndex)) {
      break;
    }
    if (v11 == ++v12) {
      goto LABEL_11;
    }
  }
  int WaitingState = FigPlayerStartupTaskGetWaitingState((uint64_t)ValueAtIndex);
  MEMORY[0x19970E930](*(void *)(v7 + 472));
LABEL_16:
  uint64_t v14 = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(v14 + 76) != WaitingState)
  {
    uint64_t v15 = v14;
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    FigCFDictionarySetInt32();
    *(_DWORD *)(v15 + 76) = WaitingState;
    playerairplay_postPlayerNotification(a1, @"PlaybackStateDidChange", Mutable);
    if (Mutable)
    {
      CFRelease(Mutable);
    }
  }
}

void playerairplay_triggerAsyncCheckAndUpdatePlayQueueItems(const void *a1)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (!*DerivedStorage)
  {
    uint64_t v3 = DerivedStorage;
    if (a1) {
      CFRetain(a1);
    }
    CFIndex v4 = *((void *)v3 + 13);
    v5[0] = MEMORY[0x1E4F143A8];
    v5[1] = 3221225472;
    v5[2] = __playerairplay_triggerAsyncCheckAndUpdatePlayQueueItems_block_invoke;
    _OWORD v5[3] = &__block_descriptor_48_e5_v8__0l;
    v5[4] = v3;
    void v5[5] = a1;
    dispatch_async(v4, v5);
  }
}

BOOL playerairplay_deferMediaControlPlaylistForInterstitials(const void *a1)
{
  if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 249) || pap_AirPlayState(a1) - 14 > 2) {
    return 0;
  }
  if (!*(void *)(CMBaseObjectGetDerivedStorage() + 360))
  {
    if (*(void *)(CMBaseObjectGetDerivedStorage() + 368))
    {
      uint64_t v3 = pap_copyPrimaryPlayer();
      if (v3)
      {
        CFIndex v4 = (const void *)v3;
        BOOL v5 = !playerairplay_interstitialEventActive();
        CFRelease(v4);
        return v5;
      }
    }
    return 0;
  }

  return playerairplay_interstitialEventActive();
}

void pap_PlaybackSessionSetRate(const void *a1, const void *a2, char a3, long long *a4, long long *a5, const void *a6, int a7, float a8)
{
  if (a1)
  {
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 3221225472;
    v8[2] = __pap_PlaybackSessionSetRate_block_invoke;
    v8[3] = &__block_descriptor_109_e5_v8__0l;
    v8[4] = a1;
    v8[5] = a2;
    float v9 = a8;
    v8[6] = a6;
    char v14 = a3;
    long long v10 = *a4;
    uint64_t v11 = *((void *)a4 + 2);
    long long v12 = *a5;
    uint64_t v13 = *((void *)a5 + 2);
    pap_DispatchHelper(a1, a2, (uint64_t)v8, a7, 0, a6, 0, 0);
  }
}

void __pap_clearLayerContents_block_invoke(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 32) + 168))
  {
    [MEMORY[0x1E4F39CF8] begin];
    if (!pthread_main_np()) {
      [MEMORY[0x1E4F39CF8] activateBackground:1];
    }
    [MEMORY[0x1E4F39CF8] setValue:*MEMORY[0x1E4F1CFD0] forKey:*MEMORY[0x1E4F3A5A8]];
    [*(id *)(*(void *)(a1 + 32) + 168) setContents:0];
    [MEMORY[0x1E4F39CF8] commit];
  }
  int v2 = *(const void **)(a1 + 40);

  CFRelease(v2);
}

uint64_t playqueue_getCurrentClientPlayQueueItemIndexInternal(CFArrayRef *a1)
{
  CFIndex Count = CFArrayGetCount(*a1);
  if (Count < 1) {
    return -1;
  }
  CFIndex v3 = Count;
  CFIndex v4 = 0;
  while (1)
  {
    CFArrayGetValueAtIndex(*a1, v4);
    uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
    if (!DerivedStorage[72] && DerivedStorage[732] && DerivedStorage[739] != 2) {
      break;
    }
    if (v3 == ++v4) {
      return -1;
    }
  }
  return v4;
}

void itemairplay_postItemNotification(const void *a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    uint64_t v7 = DerivedStorage;
    int v8 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    float v9 = (unsigned char *)CMBaseObjectGetDerivedStorage();
    if (v9)
    {
      long long v10 = v9;
      if (!*v9)
      {
        if (a1) {
          CFRetain(a1);
        }
        if (a2) {
          CFRetain(a2);
        }
        if (a3) {
          CFRetain(a3);
        }
        if (v8) {
          CFRetain(v8);
        }
        uint64_t v11 = *((void *)v10 + 11);
        v12[0] = MEMORY[0x1E4F143A8];
        v12[1] = 3221225472;
        UInt8 v12[2] = __itemairplay_postItemNotification_block_invoke;
        v12[3] = &__block_descriptor_80_e5_v8__0l;
        void v12[4] = v7;
        v12[5] = v10;
        v12[6] = a2;
        v12[7] = a1;
        v12[8] = a3;
        v12[9] = v8;
        dispatch_async(v11, v12);
      }
    }
    if (v8) {
      CFRelease(v8);
    }
  }
}

void __itemairplay_postItemNotification_block_invoke(uint64_t a1)
{
  FigReadWriteLockLockForRead();
  if (!*(unsigned char *)(*(void *)(a1 + 32) + 72) && !**(unsigned char **)(a1 + 40))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
  }
  FigReadWriteLockUnlockForRead();
  int v2 = *(const void **)(a1 + 56);
  if (v2) {
    CFRelease(v2);
  }
  CFIndex v3 = *(const void **)(a1 + 48);
  if (v3) {
    CFRelease(v3);
  }
  CFIndex v4 = *(const void **)(a1 + 64);
  if (v4) {
    CFRelease(v4);
  }
  BOOL v5 = *(const void **)(a1 + 72);
  if (v5)
  {
    CFRelease(v5);
  }
}

uint64_t itemairplay_GetCurrentTime(CFTypeRef a1, CMTime *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  if (*(unsigned char *)(DerivedStorage + 72))
  {
    uint64_t v12 = FigSignalErrorAt();
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v5 = DerivedStorage;
    uint64_t v6 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    uint64_t v7 = CMBaseObjectGetDerivedStorage();
    if (!v7 || *(unsigned char *)v7)
    {
      uint64_t v15 = FigSignalErrorAt();
      goto LABEL_14;
    }
    playqueue_copyCurrentClientPlayQueueItemAndCurrentMediaControlPlayListItem(*(void *)(v7 + 32), 0, (unint64_t)&cf);
    int v8 = pap_AirPlayState(v6);
    if (v8 && v8 != 10)
    {
      if (a2)
      {
        if (cf == a1 && (int v16 = *(OpaqueCMTimebase **)(v5 + 576)) != 0)
        {
          CMTimebaseGetTime(&v18, v16);
          uint64_t v12 = 0;
          *a2 = v18;
        }
        else
        {
          uint64_t v12 = 0;
          long long v13 = *(_OWORD *)(v5 + 160);
          a2->CMTimeEpoch epoch = *(void *)(v5 + 176);
          *(_OWORD *)&a2->CMTimeValue value = v13;
        }
      }
      else
      {
        uint64_t v12 = 0;
      }
    }
    else
    {
      uint64_t v9 = *(void *)(v5 + 8);
      uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v10) {
        uint64_t v11 = v10;
      }
      else {
        uint64_t v11 = 0;
      }
      char v14 = *(uint64_t (**)(uint64_t, CMTime *))(v11 + 32);
      if (v14)
      {
        uint64_t v15 = v14(v9, a2);
LABEL_14:
        uint64_t v12 = v15;
        goto LABEL_19;
      }
      uint64_t v12 = 4294954514;
    }
  }
LABEL_19:
  if (cf) {
    CFRelease(cf);
  }
  if (v6) {
    CFRelease(v6);
  }
  return v12;
}

void playerairplay_postPlayerNotification(const void *a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (!*DerivedStorage)
  {
    uint64_t v7 = DerivedStorage;
    if (a1) {
      CFRetain(a1);
    }
    if (a2) {
      CFRetain(a2);
    }
    if (a3) {
      CFRetain(a3);
    }
    int v8 = *((void *)v7 + 11);
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    _OWORD v9[2] = __playerairplay_postPlayerNotification_block_invoke;
    _OWORD v9[3] = &__block_descriptor_64_e5_v8__0l;
    v9[4] = v7;
    v9[5] = a2;
    v9[6] = a1;
    v9[7] = a3;
    dispatch_async(v8, v9);
  }
}

void __playerairplay_postPlayerNotification_block_invoke(uint64_t a1)
{
  if (!**(unsigned char **)(a1 + 32))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
  }
  int v2 = *(const void **)(a1 + 48);
  if (v2) {
    CFRelease(v2);
  }
  CFIndex v3 = *(const void **)(a1 + 40);
  if (v3) {
    CFRelease(v3);
  }
  CFIndex v4 = *(const void **)(a1 + 56);
  if (v4)
  {
    CFRelease(v4);
  }
}

void __playerairplay_triggerAsyncCheckAndUpdatePlayQueueItems_block_invoke(uint64_t a1)
{
  if (!**(unsigned char **)(a1 + 32))
  {
    playerairplay_checkAndUpdatePlayQueueItems(*(const void **)(a1 + 40));
    uint64_t v2 = pap_CopyInterstitialPlayer();
    if (v2)
    {
      CFIndex v3 = (const void *)v2;
      playerairplay_triggerAsyncCheckAndUpdatePlayQueueItems(v2);
      CFRelease(v3);
    }
  }
  CFIndex v4 = *(const void **)(a1 + 40);
  if (v4)
  {
    CFRelease(v4);
  }
}

void playerairplay_checkAndUpdatePlayQueueItems(const void *a1)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (!*DerivedStorage)
  {
    CFIndex v3 = DerivedStorage;
    if (pap_AirPlayState(a1) - 14 <= 2)
    {
      CFTypeRef cf = 0;
      playerairplay_synchronizePlayQueueItems(a1);
      playqueue_copyCurrentClientPlayQueueItemAndCurrentMediaControlPlayListItem(*((void *)v3 + 4), 0, (unint64_t)&cf);
      if (cf)
      {
        if (!playerairplay_deferMediaControlPlaylistForInterstitials(a1))
        {
          if (v3[248])
          {
            uint64_t v4 = CMBaseObjectGetDerivedStorage();
            CFArrayRef PlayQueueSnapshot = playqueue_createPlayQueueSnapshot(*(void *)(v4 + 32), 0);
            if (PlayQueueSnapshot)
            {
              CFArrayRef v6 = PlayQueueSnapshot;
              CFIndex Count = CFArrayGetCount(PlayQueueSnapshot);
              if (Count >= 1)
              {
                CFIndex v8 = Count;
                for (CFIndex i = 0; i != v8; ++i)
                {
                  CFDictionaryRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(v6, i);
                  itemairplay_applyCachedPropertiesOnMediaControlItem(ValueAtIndex);
                }
              }
              CFRelease(v6);
            }
          }
          else
          {
            if (!cf) {
              return;
            }
            itemairplay_applyCachedPropertiesOnMediaControlItem((void *)cf);
          }
        }
        if (cf) {
          CFRelease(cf);
        }
      }
    }
  }
}

uint64_t pap_CopyInterstitialPlayer()
{
  CMBaseObjectGetDerivedStorage();
  if (!*(void *)(CMBaseObjectGetDerivedStorage() + 360)) {
    return 0;
  }

  return FigCFWeakReferenceHolderCopyReferencedObject();
}

void playerairplay_synchronizePlayQueueItems(const void *a1)
{
  uint64_t v198 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  BOOL v173 = playerairplay_deferMediaControlPlaylistForInterstitials(a1);
  uint64_t v176 = DerivedStorage;
  CFArrayRef PlayQueueSnapshot = playqueue_createPlayQueueSnapshot(*(void *)(DerivedStorage + 32), 0);
  if (PlayQueueSnapshot)
  {
    CFArrayRef v4 = PlayQueueSnapshot;
    CFIndex Count = CFArrayGetCount(PlayQueueSnapshot);
    if (Count >= 1)
    {
      CFIndex v6 = Count;
      uint64_t v7 = 0;
      CFIndex v8 = 0;
      CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFIndex v174 = Count;
      CFTypeRef v175 = (void *)a1;
      while (1)
      {
        CFDictionaryRef ValueAtIndex = (__CFDictionary *)CFArrayGetValueAtIndex(v4, v8);
        uint64_t v10 = CMBaseObjectGetDerivedStorage();
        FigReadWriteLockLockForRead();
        if (!*(unsigned char *)(v10 + 72)) {
          break;
        }
        CFDictionaryRef ValueAtIndex = v7;
LABEL_50:
        FigReadWriteLockUnlockForRead();
        ++v8;
        uint64_t v7 = ValueAtIndex;
        if (v6 == v8) {
          goto LABEL_413;
        }
      }
      int v11 = *(unsigned __int8 *)(v10 + 739);
      if (v11 == 2)
      {
        if (!dword_1E93510E8)
        {
LABEL_47:
          itemairplay_doCleanupAtEndOfPlayback();
          itemairplay_cleanupItemForAirPlay((uint64_t)ValueAtIndex, 1);
          uint64_t v36 = *(void *)(v176 + 32);
          CMTime v37 = ValueAtIndex;
          int v38 = 1;
LABEL_48:
          playqueue_removeItemFromClientQueueAndFromMediaControlPlaylist(v36, v37, v38, 1);
LABEL_49:
          CFDictionaryRef ValueAtIndex = 0;
          goto LABEL_50;
        }
        LODWORD(v177) = 0;
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v13 = v177;
        if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v14 = v13;
        }
        else {
          unsigned int v14 = v13 & 0xFFFFFFFE;
        }
        if (!v14)
        {
LABEL_46:
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          CFIndex v6 = v174;
          goto LABEL_47;
        }
        if (a1)
        {
          uint64_t v15 = (const char *)(CMBaseObjectGetDerivedStorage() + 450);
          if (ValueAtIndex)
          {
LABEL_14:
            int v16 = (const char *)(CMBaseObjectGetDerivedStorage() + 868);
LABEL_45:
            int v179 = 136316162;
            v180 = "playerairplay_synchronizePlayQueueItems";
            __int16 v181 = 2048;
            long long v182 = (void *)a1;
            __int16 v183 = 2048;
            CMTime v184 = ValueAtIndex;
            __int16 v185 = 2082;
            CMTimeRange v186 = v15;
            __int16 v187 = 2082;
            CFTypeRef v188 = v16;
            _os_log_send_and_compose_impl();
            goto LABEL_46;
          }
        }
        else
        {
          uint64_t v15 = "";
          if (ValueAtIndex) {
            goto LABEL_14;
          }
        }
        int v16 = "";
        goto LABEL_45;
      }
      if (*(unsigned char *)(v10 + 732))
      {
        CFTypeRef v17 = (unsigned char *)CMBaseObjectGetDerivedStorage();
        if (*(unsigned char *)(v10 + 733))
        {
          if (v173)
          {
            long long v177 = *MEMORY[0x1E4F1F9F8];
            CFStringRef v178 = *(__CFString **)(MEMORY[0x1E4F1F9F8] + 16);
            if (dword_1E93510E8)
            {
              CMTime v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              CFIndex v6 = v174;
            }
            CMTimebaseSetRate(*(CMTimebaseRef *)(v10 + 576), 0.0);
            uint64_t v44 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v44) {
              uint64_t v45 = v44;
            }
            else {
              uint64_t v45 = 0;
            }
            int v46 = *(void (**)(__CFDictionary *, long long *))(v45 + 32);
            if (v46) {
              v46(ValueAtIndex, &v177);
            }
            long long values = v177;
            v196 = v178;
            itemairplay_setRememberedTimeAndDefaultFlag((uint64_t)ValueAtIndex, (uint64_t)&values);
            itemairplay_controlPlaybackActivityTimer((uint64_t)ValueAtIndex, 0);
            playerairplay_removeQueuedItemUUIDStringOnAirPlayController(v175, *(const void **)(v10 + 80));
            playqueue_removeItemFromClientQueueAndFromMediaControlPlaylist(*(void *)(v176 + 32), ValueAtIndex, 0, 1);
          }
        }
        else
        {
          unsigned int v24 = *(unsigned __int8 *)(v10 + 736);
          BOOL v25 = v24 > 5;
          int v26 = (1 << v24) & 0x23;
          if (v25 || v26 == 0)
          {
            uint64_t v28 = CMBaseObjectGetDerivedStorage();
            uint64_t v29 = (void *)FigCFWeakReferenceHolderCopyReferencedObject();
            char v30 = 0;
            char v31 = 1;
            switch(*(unsigned char *)(v28 + 735))
            {
              case 0:
                if (dword_1E93510E8)
                {
                  LODWORD(v177) = 0;
                  int v32 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  unsigned int v33 = v177;
                  if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT)) {
                    unsigned int v34 = v33;
                  }
                  else {
                    unsigned int v34 = v33 & 0xFFFFFFFE;
                  }
                  if (v34)
                  {
                    if (v29) {
                      uint64_t v35 = (const char *)(CMBaseObjectGetDerivedStorage() + 450);
                    }
                    else {
                      uint64_t v35 = "";
                    }
                    if (ValueAtIndex) {
                      CFStringRef v140 = (const char *)(CMBaseObjectGetDerivedStorage() + 868);
                    }
                    else {
                      CFStringRef v140 = "";
                    }
                    int v179 = 136316162;
                    v180 = "itemairplay_serviceVodkaExchange";
                    __int16 v181 = 2048;
                    long long v182 = v29;
                    __int16 v183 = 2048;
                    CMTime v184 = ValueAtIndex;
                    __int16 v185 = 2082;
                    CMTimeRange v186 = v35;
                    __int16 v187 = 2082;
                    CFTypeRef v188 = v140;
                    _os_log_send_and_compose_impl();
                  }
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                }
                uint64_t v171 = v29;
                uint64_t v142 = CMBaseObjectGetDerivedStorage();
                FigReadWriteLockLockForRead();
                if (*(unsigned char *)(v142 + 72))
                {
                  FigReadWriteLockUnlockForRead();
                  goto LABEL_323;
                }
                CFStringRef v143 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
                uint64_t v144 = (unsigned char *)CMBaseObjectGetDerivedStorage();
                if (!v144 || *v144 || itemairplay_assureItemForAirPlay())
                {
                  CFStringRef v146 = 0;
                  CFStringRef v145 = v143;
                }
                else
                {
                  LOBYTE(values) = 0;
                  LOBYTE(v179) = 0;
                  LOBYTE(v177) = 0;
                  FigCFDictionaryGetBooleanIfPresent();
                  FigCFDictionaryGetBooleanIfPresent();
                  CFStringRef v145 = v143;
                  if (!(_BYTE)v179
                    && !*(void *)(CMBaseObjectGetDerivedStorage() + 368)
                    && (!(_BYTE)v177 || *(__CFString **)(v142 + 24) != @"com.apple.coremedia.assettype.streaming"))
                  {
                    uint64_t v150 = (const void *)itemairplay_createCPEProtectorIfAvailable((uint64_t)ValueAtIndex, 1, &values);
                    if (v150)
                    {
                      CFStringRef v146 = v150;
                      *(unsigned char *)(v142 + 735) = 2;
                      int v151 = playerairplay_performQueuedItemVodkaExchange(v143, ValueAtIndex, v150, values);
                      uint64_t v29 = v171;
                      if (!v151 && *(unsigned char *)(v142 + 735) == 2) {
                        itemairplay_controlPlaybackActivityTimer((uint64_t)ValueAtIndex, 3);
                      }
                      goto LABEL_319;
                    }
                  }
                  *(unsigned char *)(v142 + 735) = 1;
                  playerairplay_triggerAsyncCheckAndUpdatePlayQueueItems(v143);
                  CFStringRef v146 = 0;
                }
                uint64_t v29 = v171;
LABEL_319:
                if (v145) {
                  CFRelease(v145);
                }
                FigReadWriteLockUnlockForRead();
                if (v146) {
                  CFRelease(v146);
                }
                goto LABEL_323;
              case 1:
              case 3:
                goto LABEL_342;
              case 2:
                uint64_t v103 = CMBaseObjectGetDerivedStorage();
                if (v103) {
                  unint64_t v104 = 1000000000 * *(unsigned int *)(v103 + 396);
                }
                else {
                  unint64_t v104 = 45000000000;
                }
                if (FigGetUpTimeNanoseconds() - *(void *)(v28 + 768) < v104) {
                  goto LABEL_341;
                }
                if (!dword_1E93510E8) {
                  goto LABEL_340;
                }
                LODWORD(v177) = 0;
                uint64_t v131 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                unsigned int v132 = v177;
                if (os_log_type_enabled(v131, OS_LOG_TYPE_DEFAULT)) {
                  unsigned int v133 = v132;
                }
                else {
                  unsigned int v133 = v132 & 0xFFFFFFFE;
                }
                if (!v133) {
                  goto LABEL_339;
                }
                if (v29) {
                  uint64_t v108 = (const char *)(CMBaseObjectGetDerivedStorage() + 450);
                }
                else {
                  uint64_t v108 = "";
                }
                if (ValueAtIndex) {
LABEL_336:
                }
                  uint64_t v149 = (const char *)(CMBaseObjectGetDerivedStorage() + 868);
                else {
                  uint64_t v149 = "";
                }
                goto LABEL_338;
              case 4:
                if (!dword_1E93510E8) {
                  goto LABEL_340;
                }
                LODWORD(v177) = 0;
                CFDictionaryRef v105 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                unsigned int v106 = v177;
                if (os_log_type_enabled(v105, OS_LOG_TYPE_DEFAULT)) {
                  unsigned int v107 = v106;
                }
                else {
                  unsigned int v107 = v106 & 0xFFFFFFFE;
                }
                if (!v107) {
                  goto LABEL_339;
                }
                if (v29) {
                  uint64_t v108 = (const char *)(CMBaseObjectGetDerivedStorage() + 450);
                }
                else {
                  uint64_t v108 = "";
                }
                if (ValueAtIndex) {
                  goto LABEL_336;
                }
                uint64_t v149 = "";
LABEL_338:
                int v179 = 136316162;
                v180 = "itemairplay_serviceVodkaExchange";
                __int16 v181 = 2048;
                long long v182 = v29;
                __int16 v183 = 2048;
                CMTime v184 = ValueAtIndex;
                __int16 v185 = 2082;
                CMTimeRange v186 = v108;
                __int16 v187 = 2082;
                CFTypeRef v188 = v149;
                _os_log_send_and_compose_impl();
LABEL_339:
                fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_340:
                itemairplay_doCleanupAtEndOfPlayback();
                itemairplay_cleanupItemForAirPlay((uint64_t)ValueAtIndex, 0);
                char v31 = 0;
LABEL_341:
                char v30 = 1;
LABEL_342:
                if (v29) {
                  CFRelease(v29);
                }
                if (v30)
                {
                  CFIndex v6 = v174;
                  if (v31) {
                    break;
                  }
                  playqueue_removeItemFromClientQueueAndFromMediaControlPlaylist(*(void *)(v176 + 32), ValueAtIndex, 1, 1);
                  CFDictionaryRef ValueAtIndex = 0;
                  goto LABEL_174;
                }
                if (v173)
                {
                  CFIndex v6 = v174;
                  if (dword_1E93510E8)
                  {
                    LODWORD(v177) = 0;
                    uint64_t v152 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                    unsigned int v153 = v177;
                    if (os_log_type_enabled(v152, OS_LOG_TYPE_DEFAULT)) {
                      unsigned int v154 = v153;
                    }
                    else {
                      unsigned int v154 = v153 & 0xFFFFFFFE;
                    }
                    if (v154)
                    {
                      if (v175) {
                        unint64_t v155 = (const char *)(CMBaseObjectGetDerivedStorage() + 450);
                      }
                      else {
                        unint64_t v155 = "";
                      }
                      if (ValueAtIndex) {
                        uint64_t v160 = (const char *)(CMBaseObjectGetDerivedStorage() + 868);
                      }
                      else {
                        uint64_t v160 = "";
                      }
                      int v179 = 136316162;
                      v180 = "playerairplay_synchronizePlayQueueItems";
                      __int16 v181 = 2048;
                      long long v182 = v175;
                      __int16 v183 = 2048;
                      CMTime v184 = ValueAtIndex;
                      __int16 v185 = 2082;
                      CMTimeRange v186 = v155;
                      __int16 v187 = 2082;
                      CFTypeRef v188 = v160;
                      _os_log_send_and_compose_impl();
                    }
                    fig_log_call_emit_and_clean_up_after_send_and_compose();
                    CFIndex v6 = v174;
                  }
                  break;
                }
                CFIndex v6 = v174;
                if (v17 && !v17[733] && (!v7 || v17[732]))
                {
                  if (dword_1E93510E8)
                  {
                    LODWORD(v177) = 0;
                    uint64_t v161 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                    unsigned int v162 = v177;
                    if (os_log_type_enabled(v161, OS_LOG_TYPE_DEFAULT)) {
                      unsigned int v163 = v162;
                    }
                    else {
                      unsigned int v163 = v162 & 0xFFFFFFFE;
                    }
                    if (v163)
                    {
                      if (v175) {
                        CFStringRef v164 = (const char *)(CMBaseObjectGetDerivedStorage() + 450);
                      }
                      else {
                        CFStringRef v164 = "";
                      }
                      if (ValueAtIndex) {
                        CMTime v167 = (const char *)(CMBaseObjectGetDerivedStorage() + 868);
                      }
                      else {
                        CMTime v167 = "";
                      }
                      if (v7) {
                        __int16 v168 = (const char *)(CMBaseObjectGetDerivedStorage() + 868);
                      }
                      else {
                        __int16 v168 = "";
                      }
                      int v179 = 136316674;
                      v180 = "playerairplay_synchronizePlayQueueItems";
                      __int16 v181 = 2048;
                      long long v182 = v175;
                      __int16 v183 = 2048;
                      CMTime v184 = ValueAtIndex;
                      __int16 v185 = 2082;
                      CMTimeRange v186 = v164;
                      __int16 v187 = 2082;
                      CFTypeRef v188 = v167;
                      __int16 v189 = 2048;
                      *(void *)CFTypeRef v190 = v7;
                      *(_WORD *)&v190[8] = 2082;
                      CFTypeRef v191 = v168;
                      _os_log_send_and_compose_impl();
                    }
                    fig_log_call_emit_and_clean_up_after_send_and_compose();
                    CFIndex v6 = v174;
                  }
                  goto LABEL_68;
                }
                if (dword_1E93510E8)
                {
                  LODWORD(v177) = 0;
                  uint64_t v156 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  unsigned int v157 = v177;
                  if (os_log_type_enabled(v156, OS_LOG_TYPE_DEFAULT)) {
                    unsigned int v158 = v157;
                  }
                  else {
                    unsigned int v158 = v157 & 0xFFFFFFFE;
                  }
                  if (v158)
                  {
                    if (v175) {
                      uint64_t v159 = (const char *)(CMBaseObjectGetDerivedStorage() + 450);
                    }
                    else {
                      uint64_t v159 = "";
                    }
                    if (ValueAtIndex) {
                      uint64_t v165 = (const char *)(CMBaseObjectGetDerivedStorage() + 868);
                    }
                    else {
                      uint64_t v165 = "";
                    }
                    if (v7) {
                      __int16 v166 = (const char *)(CMBaseObjectGetDerivedStorage() + 868);
                    }
                    else {
                      __int16 v166 = "";
                    }
                    int v179 = 136316674;
                    v180 = "playerairplay_synchronizePlayQueueItems";
                    __int16 v181 = 2048;
                    long long v182 = v175;
                    __int16 v183 = 2048;
                    CMTime v184 = ValueAtIndex;
                    __int16 v185 = 2082;
                    CMTimeRange v186 = v159;
                    __int16 v187 = 2082;
                    CFTypeRef v188 = v165;
                    __int16 v189 = 2048;
                    *(void *)CFTypeRef v190 = v7;
                    *(_WORD *)&v190[8] = 2082;
                    CFTypeRef v191 = v166;
                    _os_log_send_and_compose_impl();
                  }
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                  CFIndex v6 = v174;
                }
                if (v7 || pap_AirPlayState(v175) != 14)
                {
                  if (*(unsigned char *)(v176 + 248) || !v17 || FigCFEqual()) {
                    itemairplay_insertItemOnMediaControl(ValueAtIndex, v7);
                  }
                  else {
                    *(unsigned char *)(v10 + 734) = 1;
                  }
                }
                else
                {
                  playerairplay_playItemOnMediaControl(v175, ValueAtIndex);
                }
                itemairplay_controlPlaybackActivityTimer((uint64_t)ValueAtIndex, 0);
                break;
              default:
                if (dword_1E93510E8)
                {
                  LODWORD(v177) = 0;
                  __int16 v99 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  unsigned int v100 = v177;
                  if (os_log_type_enabled(v99, OS_LOG_TYPE_DEFAULT)) {
                    unsigned int v101 = v100;
                  }
                  else {
                    unsigned int v101 = v100 & 0xFFFFFFFE;
                  }
                  if (v101)
                  {
                    if (v29) {
                      uint64_t v102 = (const char *)(CMBaseObjectGetDerivedStorage() + 450);
                    }
                    else {
                      uint64_t v102 = "";
                    }
                    if (ValueAtIndex) {
                      CFStringRef v141 = (const char *)(CMBaseObjectGetDerivedStorage() + 868);
                    }
                    else {
                      CFStringRef v141 = "";
                    }
                    int v147 = *(unsigned __int8 *)(v28 + 735);
                    int v148 = *(unsigned __int8 *)(v28 + 736);
                    int v179 = 136316674;
                    v180 = "itemairplay_serviceVodkaExchange";
                    __int16 v181 = 2048;
                    long long v182 = v29;
                    __int16 v183 = 2048;
                    CMTime v184 = ValueAtIndex;
                    __int16 v185 = 2082;
                    CMTimeRange v186 = v102;
                    __int16 v187 = 2082;
                    CFTypeRef v188 = v141;
                    __int16 v189 = 1024;
                    *(_DWORD *)CFTypeRef v190 = v147;
                    *(_WORD *)&v190[4] = 1024;
                    *(_DWORD *)&v190[6] = v148;
                    _os_log_send_and_compose_impl();
                  }
                  char v31 = 1;
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                }
                else
                {
LABEL_323:
                  char v31 = 1;
                }
                goto LABEL_341;
            }
          }
        }
        if (v17)
        {
LABEL_68:
          if (v17[739] != 1) {
            goto LABEL_174;
          }
        }
        if (!*(unsigned char *)(v10 + 741) || !*(unsigned char *)(v10 + 742) || !*(unsigned char *)(v10 + 760))
        {
          int v47 = *(unsigned __int8 *)(v10 + 736);
          if (v47 == 2)
          {
            if (dword_1E93510E8)
            {
              LODWORD(v177) = 0;
              unint64_t v53 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              unsigned int v54 = v177;
              if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT)) {
                unsigned int v55 = v54;
              }
              else {
                unsigned int v55 = v54 & 0xFFFFFFFE;
              }
              if (v55)
              {
                if (v175)
                {
                  uint64_t v56 = (const char *)(CMBaseObjectGetDerivedStorage() + 450);
                  if (ValueAtIndex) {
                    goto LABEL_91;
                  }
LABEL_133:
                  uint64_t v57 = "";
                }
                else
                {
                  uint64_t v56 = "";
                  if (!ValueAtIndex) {
                    goto LABEL_133;
                  }
LABEL_91:
                  uint64_t v57 = (const char *)(CMBaseObjectGetDerivedStorage() + 868);
                }
                int v179 = 136316162;
                v180 = "playerairplay_synchronizePlayQueueItems";
                __int16 v181 = 2048;
                long long v182 = v175;
                __int16 v183 = 2048;
                CMTime v184 = ValueAtIndex;
                __int16 v185 = 2082;
                CMTimeRange v186 = v56;
                __int16 v187 = 2082;
                CFTypeRef v188 = v57;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              CFIndex v6 = v174;
            }
            uint64_t v70 = CMBaseObjectGetDerivedStorage();
            int v71 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
            CMBaseObjectGetDerivedStorage();
            if (!*(void *)(v70 + 16))
            {
              *(unsigned char *)(v70 + 736) = 4;
              *(unsigned char *)(v70 + 760) = 1;
              goto LABEL_172;
            }
            LOBYTE(v179) = 0;
            uint64_t v72 = CMBaseObjectGetDerivedStorage();
            uint64_t v73 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
            CMBaseObjectGetDerivedStorage();
            if (CFEqual(*(CFTypeRef *)(v72 + 24), @"com.apple.coremedia.assettype.file"))
            {
              CFArrayRef v74 = (CFArrayRef)playerairplay_getPrerequisiteAssetPropertiesArrayForFile_sPrerequisiteAssetFilePropertyArray;
              if (!playerairplay_getPrerequisiteAssetPropertiesArrayForFile_sPrerequisiteAssetFilePropertyArray)
              {
                *(void *)&long long values = @"assetProperty_ContentByteStream";
                *((void *)&values + 1) = @"assetProperty_FormatReader";
                v196 = @"assetProperty_Tracks";
                CMTime v197 = @"MediaSelectionArray";
                CFArrayRef v74 = CFArrayCreate(allocator, (const void **)&values, 4, MEMORY[0x1E4F1D510]);
                playerairplay_getPrerequisiteAssetPropertiesArrayForFile_sPrerequisiteAssetFilePropertyArray = (uint64_t)v74;
              }
            }
            else
            {
              CFArrayRef v74 = (CFArrayRef)playerairplay_getPrerequisiteAssetPropertiesArrayForStream_sPrerequisiteAssetStreamPropertyArray;
              if (!playerairplay_getPrerequisiteAssetPropertiesArrayForStream_sPrerequisiteAssetStreamPropertyArray)
              {
                *(void *)&long long values = @"Duration";
                *((void *)&values + 1) = @"MediaSelectionArray";
                CFArrayRef v74 = CFArrayCreate(allocator, (const void **)&values, 2, MEMORY[0x1E4F1D510]);
                playerairplay_getPrerequisiteAssetPropertiesArrayForStream_sPrerequisiteAssetStreamPropertyArray = (uint64_t)v74;
              }
            }
            uint64_t v75 = *(void *)(v72 + 16);
            uint64_t v76 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v76) {
              uint64_t v77 = v76;
            }
            else {
              uint64_t v77 = 0;
            }
            CFTypeRef v78 = *(uint64_t (**)(uint64_t, CFArrayRef, int *, uint64_t))(v77 + 16);
            if (v78)
            {
              int v79 = v78(v75, v74, &v179, v72 + 704);
              if (!v79)
              {
                CFIndex v6 = v174;
                if ((_BYTE)v179)
                {
                  itemairplay_postItemNotification(ValueAtIndex, @"ReadyForInspection", 0);
                  int v79 = 0;
                  char v80 = 1;
                  goto LABEL_152;
                }
                int v79 = 0;
                if (!v73)
                {
LABEL_154:
                  if (v79) {
                    goto LABEL_172;
                  }
                  LOBYTE(values) = 0;
                  uint64_t v81 = CMBaseObjectGetDerivedStorage();
                  uint64_t v82 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
                  CMBaseObjectGetDerivedStorage();
                  if (*(unsigned char *)(v81 + 741) || !*(void *)(v81 + 680) || *(_DWORD *)(v81 + 696)) {
                    goto LABEL_156;
                  }
                  MEMORY[0x19970E910](*(void *)(v81 + 672));
                  CFArrayRef Copy = CFArrayCreateCopy(allocator, *(CFArrayRef *)(v81 + 680));
                  MEMORY[0x19970E930](*(void *)(v81 + 672));
                  CFArrayRef v169 = Copy;
                  if (Copy)
                  {
                    uint64_t v90 = *(void *)(v81 + 16);
                    uint64_t v91 = *(void *)(CMBaseObjectGetVTable() + 16);
                    if (v91) {
                      uint64_t v92 = v91;
                    }
                    else {
                      uint64_t v92 = 0;
                    }
                    uint64_t v134 = *(uint64_t (**)(uint64_t, CFArrayRef, long long *, uint64_t))(v92 + 16);
                    if (v134)
                    {
                      int v135 = v134(v90, v169, &values, v81 + 696);
                      CFArrayRef v136 = v169;
                      int v83 = v135;
                    }
                    else
                    {
                      int v83 = -12782;
                      CFArrayRef v136 = v169;
                    }
                    CFRelease(v136);
                    if (v83 || !(_BYTE)values)
                    {
                      if (v83) {
                        goto LABEL_290;
                      }
LABEL_158:
                      if (v82) {
                        CFRelease(v82);
                      }
                      if (v83) {
                        goto LABEL_172;
                      }
                      LOBYTE(values) = 0;
                      uint64_t v85 = CMBaseObjectGetDerivedStorage();
                      int v86 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
                      CMBaseObjectGetDerivedStorage();
                      if (*(unsigned char *)(v85 + 742) || !*(void *)(v85 + 688) || *(_DWORD *)(v85 + 700)) {
                        goto LABEL_162;
                      }
                      MEMORY[0x19970E910](*(void *)(v85 + 672));
                      CFArrayRef v93 = CFArrayCreateCopy(allocator, *(CFArrayRef *)(v85 + 688));
                      MEMORY[0x19970E930](*(void *)(v85 + 672));
                      CFArrayRef v170 = v93;
                      if (v93)
                      {
                        uint64_t v94 = *(void *)(v85 + 16);
                        uint64_t v95 = *(void *)(CMBaseObjectGetVTable() + 16);
                        if (v95) {
                          uint64_t v96 = v95;
                        }
                        else {
                          uint64_t v96 = 0;
                        }
                        uint64_t v137 = *(uint64_t (**)(uint64_t, void, CFArrayRef, long long *, uint64_t))(v96 + 80);
                        if (v137)
                        {
                          int v138 = v137(v94, 0, v170, &values, v85 + 700);
                          CFArrayRef v139 = v170;
                          int v87 = v138;
                        }
                        else
                        {
                          int v87 = -12782;
                          CFArrayRef v139 = v170;
                        }
                        CFRelease(v139);
                        if (v87 || !(_BYTE)values)
                        {
                          if (v87) {
                            goto LABEL_298;
                          }
LABEL_164:
                          if (v86) {
                            CFRelease(v86);
                          }
                          if (!v87)
                          {
                            if (*(unsigned char *)(v70 + 741) && *(unsigned char *)(v70 + 742) && *(unsigned char *)(v70 + 760)) {
                              *(unsigned char *)(v70 + 736) = 4;
                            }
                            else {
                              *(unsigned char *)(v70 + 736) = 3;
                            }
                          }
LABEL_172:
                          if (v71)
                          {
                            playerairplay_triggerAsyncCheckAndUpdatePlayQueueItems(v71);
                            CFRelease(v71);
                          }
LABEL_174:
                          a1 = v175;
                          goto LABEL_50;
                        }
LABEL_162:
                        int v87 = 0;
                        char v88 = 1;
                      }
                      else
                      {
                        int v87 = -12786;
LABEL_298:
                        char v88 = 0;
                        *(unsigned char *)(v85 + 736) = 5;
                      }
                      *(unsigned char *)(v85 + 742) = v88;
                      goto LABEL_164;
                    }
LABEL_156:
                    int v83 = 0;
                    char v84 = 1;
                  }
                  else
                  {
                    int v83 = -12786;
LABEL_290:
                    char v84 = 0;
                    *(unsigned char *)(v81 + 736) = 5;
                  }
                  *(unsigned char *)(v81 + 741) = v84;
                  goto LABEL_158;
                }
LABEL_153:
                CFRelease(v73);
                goto LABEL_154;
              }
            }
            else
            {
              int v79 = -12782;
            }
            char v80 = 0;
            *(unsigned char *)(v72 + 736) = 5;
            CFIndex v6 = v174;
LABEL_152:
            *(unsigned char *)(v72 + 760) = v80;
            if (!v73) {
              goto LABEL_154;
            }
            goto LABEL_153;
          }
          a1 = v175;
          if (!*(unsigned char *)(v10 + 736))
          {
            *(unsigned char *)(v10 + 736) = 1;
            if (dword_1E93510E8)
            {
              LODWORD(v177) = 0;
              uint64_t v48 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              unsigned int v49 = v177;
              if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT)) {
                unsigned int v50 = v49;
              }
              else {
                unsigned int v50 = v49 & 0xFFFFFFFE;
              }
              if (v50)
              {
                if (v175)
                {
                  CFNumberRef v51 = (const char *)(CMBaseObjectGetDerivedStorage() + 450);
                  if (ValueAtIndex) {
                    goto LABEL_83;
                  }
LABEL_128:
                  unsigned int v52 = "";
                }
                else
                {
                  CFNumberRef v51 = "";
                  if (!ValueAtIndex) {
                    goto LABEL_128;
                  }
LABEL_83:
                  unsigned int v52 = (const char *)(CMBaseObjectGetDerivedStorage() + 868);
                }
                int v179 = 136316162;
                v180 = "playerairplay_synchronizePlayQueueItems";
                __int16 v181 = 2048;
                long long v182 = v175;
                __int16 v183 = 2048;
                CMTime v184 = ValueAtIndex;
                __int16 v185 = 2082;
                CMTimeRange v186 = v51;
                __int16 v187 = 2082;
                CFTypeRef v188 = v52;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              CFIndex v6 = v174;
            }
            itemairplay_startAssetTypeLoadAsync(ValueAtIndex);
            goto LABEL_50;
          }
LABEL_215:
          if (!*(unsigned char *)(v10 + 737) && v47 == 4 && *(unsigned char *)(v10 + 738))
          {
            if (dword_1E93510E8)
            {
              LODWORD(v177) = 0;
              uint64_t v119 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              unsigned int v120 = v177;
              if (os_log_type_enabled(v119, OS_LOG_TYPE_DEFAULT)) {
                unsigned int v121 = v120;
              }
              else {
                unsigned int v121 = v120 & 0xFFFFFFFE;
              }
              if (v121)
              {
                if (a1)
                {
                  double v122 = (const char *)(CMBaseObjectGetDerivedStorage() + 450);
                  if (ValueAtIndex) {
                    goto LABEL_243;
                  }
LABEL_265:
                  uint64_t v123 = "";
                }
                else
                {
                  double v122 = "";
                  if (!ValueAtIndex) {
                    goto LABEL_265;
                  }
LABEL_243:
                  uint64_t v123 = (const char *)(CMBaseObjectGetDerivedStorage() + 868);
                }
                int v179 = 136316162;
                v180 = "playerairplay_synchronizePlayQueueItems";
                __int16 v181 = 2048;
                long long v182 = (void *)a1;
                __int16 v183 = 2048;
                CMTime v184 = ValueAtIndex;
                __int16 v185 = 2082;
                CMTimeRange v186 = v122;
                __int16 v187 = 2082;
                CFTypeRef v188 = v123;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              CFIndex v6 = v174;
            }
            itemairplay_postItemNotification(ValueAtIndex, @"ReadyForPlayback", 0);
            *(unsigned char *)(v10 + 737) = 1;
            goto LABEL_50;
          }
          if (v47 != 5)
          {
            if (*(unsigned char *)(v10 + 738) || !dword_1E93510E8) {
              goto LABEL_50;
            }
            LODWORD(v177) = 0;
            uint64_t v114 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int v115 = v177;
            if (os_log_type_enabled(v114, OS_LOG_TYPE_DEFAULT)) {
              unsigned int v116 = v115;
            }
            else {
              unsigned int v116 = v115 & 0xFFFFFFFE;
            }
            if (v116)
            {
              if (a1)
              {
                double v117 = (const char *)(CMBaseObjectGetDerivedStorage() + 450);
                if (ValueAtIndex) {
                  goto LABEL_233;
                }
LABEL_260:
                uint64_t v118 = "";
              }
              else
              {
                double v117 = "";
                if (!ValueAtIndex) {
                  goto LABEL_260;
                }
LABEL_233:
                uint64_t v118 = (const char *)(CMBaseObjectGetDerivedStorage() + 868);
              }
              int v126 = *(unsigned __int8 *)(v10 + 735);
              int v127 = *(unsigned __int8 *)(v10 + 736);
              int v128 = *(unsigned __int8 *)(v10 + 760);
              int v129 = *(unsigned __int8 *)(v10 + 741);
              int v130 = *(unsigned __int8 *)(v10 + 742);
              int v179 = 136317442;
              v180 = "playerairplay_synchronizePlayQueueItems";
              __int16 v181 = 2048;
              long long v182 = (void *)a1;
              __int16 v183 = 2048;
              CMTime v184 = ValueAtIndex;
              __int16 v185 = 2082;
              CMTimeRange v186 = v117;
              __int16 v187 = 2082;
              CFTypeRef v188 = v118;
              __int16 v189 = 1024;
              *(_DWORD *)CFTypeRef v190 = v126;
              *(_WORD *)&v190[4] = 1024;
              *(_DWORD *)&v190[6] = v127;
              LOWORD(v191) = 1024;
              *(_DWORD *)((char *)&v191 + 2) = v128;
              HIWORD(v191) = 1024;
              int v192 = v129;
              __int16 v193 = 1024;
              int v194 = v130;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            CFIndex v6 = v174;
            goto LABEL_50;
          }
          if (!dword_1E93510E8) {
            goto LABEL_250;
          }
          LODWORD(v177) = 0;
          uint64_t v109 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v110 = v177;
          if (os_log_type_enabled(v109, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v111 = v110;
          }
          else {
            unsigned int v111 = v110 & 0xFFFFFFFE;
          }
          if (!v111)
          {
LABEL_249:
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            CFIndex v6 = v174;
LABEL_250:
            if (*(unsigned char *)(v10 + 733))
            {
              itemairplay_removeQueuedItemOnAirPlayController((uint64_t)ValueAtIndex);
            }
            else
            {
              itemairplay_doCleanupAtEndOfPlayback();
              itemairplay_cleanupItemForAirPlay((uint64_t)ValueAtIndex, 0);
            }
            if (*(unsigned char *)(v10 + 760)) {
              uint64_t v124 = @"FailedToBecomeReadyForPlayback";
            }
            else {
              uint64_t v124 = @"FailedToBecomeReadyForInspection";
            }
            itemairplay_postItemNotification(ValueAtIndex, v124, *(const void **)(v10 + 712));
            uint64_t v125 = *(const void **)(v10 + 712);
            if (v125)
            {
              CFRelease(v125);
              *(void *)(v10 + 712) = 0;
            }
            goto LABEL_258;
          }
          if (a1)
          {
            CFStringRef v112 = (const char *)(CMBaseObjectGetDerivedStorage() + 450);
            if (ValueAtIndex)
            {
LABEL_224:
              uint64_t v113 = (const char *)(CMBaseObjectGetDerivedStorage() + 868);
LABEL_248:
              int v179 = 136316162;
              v180 = "playerairplay_synchronizePlayQueueItems";
              __int16 v181 = 2048;
              long long v182 = (void *)a1;
              __int16 v183 = 2048;
              CMTime v184 = ValueAtIndex;
              __int16 v185 = 2082;
              CMTimeRange v186 = v112;
              __int16 v187 = 2082;
              CFTypeRef v188 = v113;
              _os_log_send_and_compose_impl();
              goto LABEL_249;
            }
          }
          else
          {
            CFStringRef v112 = "";
            if (ValueAtIndex) {
              goto LABEL_224;
            }
          }
          uint64_t v113 = "";
          goto LABEL_248;
        }
        int v47 = *(unsigned __int8 *)(v10 + 736);
        if (v47 == 4)
        {
          a1 = v175;
          goto LABEL_215;
        }
        a1 = v175;
        if (!dword_1E93510E8)
        {
LABEL_214:
          int v47 = 4;
          *(unsigned char *)(v10 + 736) = 4;
          goto LABEL_215;
        }
        LODWORD(v177) = 0;
        size_t v58 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v59 = v177;
        if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v60 = v59;
        }
        else {
          unsigned int v60 = v59 & 0xFFFFFFFE;
        }
        if (!v60)
        {
LABEL_213:
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          CFIndex v6 = v174;
          goto LABEL_214;
        }
        if (v175)
        {
          int v61 = (const char *)(CMBaseObjectGetDerivedStorage() + 450);
          if (ValueAtIndex)
          {
LABEL_99:
            char v62 = (const char *)(CMBaseObjectGetDerivedStorage() + 868);
LABEL_212:
            int v179 = 136316162;
            v180 = "playerairplay_synchronizePlayQueueItems";
            __int16 v181 = 2048;
            long long v182 = v175;
            __int16 v183 = 2048;
            CMTime v184 = ValueAtIndex;
            __int16 v185 = 2082;
            CMTimeRange v186 = v61;
            __int16 v187 = 2082;
            CFTypeRef v188 = v62;
            _os_log_send_and_compose_impl();
            goto LABEL_213;
          }
        }
        else
        {
          int v61 = "";
          if (ValueAtIndex) {
            goto LABEL_99;
          }
        }
        char v62 = "";
        goto LABEL_212;
      }
      if (*(unsigned char *)(v10 + 733))
      {
        if (!dword_1E93510E8)
        {
LABEL_104:
          if (v7) {
            goto LABEL_190;
          }
          int v63 = pap_AirPlayState(a1);
          BOOL v64 = (v63 & 0xFFFFFFFE) == 0xE || v63 == 12;
          if (!v64 || !dword_1E93510E8) {
            goto LABEL_190;
          }
          LODWORD(v177) = 0;
          CFMutableBagRef v65 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v66 = v177;
          if (os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v67 = v66;
          }
          else {
            unsigned int v67 = v66 & 0xFFFFFFFE;
          }
          if (!v67)
          {
LABEL_189:
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            CFIndex v6 = v174;
LABEL_190:
            if (v11 == 1)
            {
              *(unsigned char *)(v10 + 739) = 2;
              itemairplay_doCleanupAtEndOfPlayback();
              itemairplay_cleanupItemForAirPlay((uint64_t)ValueAtIndex, 1);
              playerairplay_removeQueuedItemUUIDStringOnAirPlayController(a1, *(const void **)(v10 + 80));
              playqueue_removeItemFromClientQueueAndFromMediaControlPlaylist(*(void *)(v176 + 32), ValueAtIndex, 0, 1);
              itemairplay_postItemNotification(ValueAtIndex, @"ItemWasRemovedFromPlayQueue", 0);
              int v97 = ValueAtIndex;
              unsigned __int8 v98 = @"ItemStoppedBeingCurrent";
            }
            else
            {
              itemairplay_doCleanupAtEndOfPlayback();
              itemairplay_cleanupItemForAirPlay((uint64_t)ValueAtIndex, 1);
              playerairplay_removeQueuedItemUUIDStringOnAirPlayController(a1, *(const void **)(v10 + 80));
              playqueue_removeItemFromClientQueueAndFromMediaControlPlaylist(*(void *)(v176 + 32), ValueAtIndex, 0, 1);
              int v97 = ValueAtIndex;
              unsigned __int8 v98 = @"ItemWasRemovedFromPlayQueue";
            }
            itemairplay_postItemNotification(v97, v98, 0);
            goto LABEL_49;
          }
          if (a1)
          {
            uint64_t v68 = (const char *)(CMBaseObjectGetDerivedStorage() + 450);
            if (ValueAtIndex)
            {
LABEL_117:
              uint64_t v69 = (const char *)(CMBaseObjectGetDerivedStorage() + 868);
LABEL_188:
              int v179 = 136316162;
              v180 = "playerairplay_synchronizePlayQueueItems";
              __int16 v181 = 2048;
              long long v182 = (void *)a1;
              __int16 v183 = 2048;
              CMTime v184 = ValueAtIndex;
              __int16 v185 = 2082;
              CMTimeRange v186 = v68;
              __int16 v187 = 2082;
              CFTypeRef v188 = v69;
              _os_log_send_and_compose_impl();
              goto LABEL_189;
            }
          }
          else
          {
            uint64_t v68 = "";
            if (ValueAtIndex) {
              goto LABEL_117;
            }
          }
          uint64_t v69 = "";
          goto LABEL_188;
        }
        LODWORD(v177) = 0;
        CFIndex v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v20 = v177;
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v21 = v20;
        }
        else {
          unsigned int v21 = v20 & 0xFFFFFFFE;
        }
        if (!v21)
        {
LABEL_103:
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          CFIndex v6 = v174;
          a1 = v175;
          goto LABEL_104;
        }
        if (v175)
        {
          uint64_t v22 = (const char *)(CMBaseObjectGetDerivedStorage() + 450);
          if (ValueAtIndex)
          {
LABEL_28:
            uint64_t v23 = (const char *)(CMBaseObjectGetDerivedStorage() + 868);
LABEL_102:
            int v179 = 136316162;
            v180 = "playerairplay_synchronizePlayQueueItems";
            __int16 v181 = 2048;
            long long v182 = v175;
            __int16 v183 = 2048;
            CMTime v184 = ValueAtIndex;
            __int16 v185 = 2082;
            CMTimeRange v186 = v22;
            __int16 v187 = 2082;
            CFTypeRef v188 = v23;
            _os_log_send_and_compose_impl();
            goto LABEL_103;
          }
        }
        else
        {
          uint64_t v22 = "";
          if (ValueAtIndex) {
            goto LABEL_28;
          }
        }
        uint64_t v23 = "";
        goto LABEL_102;
      }
      if (!dword_1E93510E8)
      {
LABEL_125:
        itemairplay_doCleanupAtEndOfPlayback();
        itemairplay_cleanupItemForAirPlay((uint64_t)ValueAtIndex, 0);
LABEL_258:
        uint64_t v36 = *(void *)(v176 + 32);
        CMTime v37 = ValueAtIndex;
        int v38 = 0;
        goto LABEL_48;
      }
      LODWORD(v177) = 0;
      uint64_t v39 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v40 = v177;
      if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v41 = v40;
      }
      else {
        unsigned int v41 = v40 & 0xFFFFFFFE;
      }
      if (!v41)
      {
LABEL_124:
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        CFIndex v6 = v174;
        goto LABEL_125;
      }
      if (a1)
      {
        char v42 = (const char *)(CMBaseObjectGetDerivedStorage() + 450);
        if (ValueAtIndex)
        {
LABEL_59:
          int v43 = (const char *)(CMBaseObjectGetDerivedStorage() + 868);
LABEL_123:
          int v179 = 136316162;
          v180 = "playerairplay_synchronizePlayQueueItems";
          __int16 v181 = 2048;
          long long v182 = (void *)a1;
          __int16 v183 = 2048;
          CMTime v184 = ValueAtIndex;
          __int16 v185 = 2082;
          CMTimeRange v186 = v42;
          __int16 v187 = 2082;
          CFTypeRef v188 = v43;
          _os_log_send_and_compose_impl();
          goto LABEL_124;
        }
      }
      else
      {
        char v42 = "";
        if (ValueAtIndex) {
          goto LABEL_59;
        }
      }
      int v43 = "";
      goto LABEL_123;
    }
LABEL_413:
    CFRelease(v4);
  }
}

void itemairplay_applyCachedPropertiesOnMediaControlItem(void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    uint64_t v3 = DerivedStorage;
    CFArrayRef v4 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    CMBaseObjectGetDerivedStorage();
    if (v4) {
      CFRelease(v4);
    }
    if (*(unsigned char *)(v3 + 732))
    {
      if (*(unsigned char *)(v3 + 733))
      {
        MEMORY[0x19970E910](*(void *)(v3 + 344));
        CFDictionaryRef Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], *(CFDictionaryRef *)(v3 + 336));
        CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(v3 + 336));
        MEMORY[0x19970E930](*(void *)(v3 + 344));
        if (Copy)
        {
          if (CFDictionaryGetCount(Copy) >= 1) {
            CFDictionaryApplyFunction(Copy, (CFDictionaryApplierFunction)pap_applyCachedPropertiesOnMediaControl, a1);
          }
          CFRelease(Copy);
        }
      }
    }
  }
}

uint64_t pap_AirPlayState(const void *a1)
{
  if (a1) {
    CFTypeRef v1 = CFRetain(a1);
  }
  else {
    CFTypeRef v1 = 0;
  }
  uint64_t v2 = *(unsigned int *)(CMBaseObjectGetDerivedStorage() + 232);
  CFRelease(v1);
  return v2;
}

CFArrayRef playqueue_createPlayQueueSnapshot(uint64_t a1, uint64_t *a2)
{
  MEMORY[0x19970E910](*(void *)(a1 + 8));
  if (*(_DWORD *)(a1 + 16) || *(_DWORD *)(a1 + 20))
  {
    CFArrayRef Copy = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], *(CFArrayRef *)a1);
    CFStringRef v5 = playqueue_copyPlayQueueSummary(a1);
    if (!a2) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  CFArrayRef Copy = 0;
  CFStringRef v5 = 0;
  if (a2) {
LABEL_4:
  }
    *a2 = playqueue_getCurrentClientPlayQueueItemIndexInternal((CFArrayRef *)a1);
LABEL_5:
  MEMORY[0x19970E930](*(void *)(a1 + 8));
  if (v5) {
    CFRelease(v5);
  }
  return Copy;
}

void itemairplay_doCleanupAtEndOfPlayback()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    uint64_t v1 = DerivedStorage;
    uint64_t v2 = *(void *)(DerivedStorage + 664);
    if (v2)
    {
      uint64_t v3 = *(void **)(CMBaseObjectGetVTable() + 16);
      if (v3) {
        CFArrayRef v4 = v3;
      }
      else {
        CFArrayRef v4 = 0;
      }
      if (*v4)
      {
        CFStringRef v5 = (void (*)(uint64_t))v4[12];
        if (v5) {
          v5(v2);
        }
      }
      CFIndex v6 = *(const void **)(v1 + 664);
      if (v6)
      {
        CFRelease(v6);
        *(void *)(v1 + 664) = 0;
      }
    }
    uint64_t v7 = *(const void **)(v1 + 440);
    if (v7)
    {
      CFRelease(v7);
      *(void *)(v1 + 440) = 0;
    }
    *(unsigned char *)(v1 + 735) = 0;
  }
  else
  {
    FigSignalErrorAt();
  }
}

void itemairplay_cleanupItemForAirPlay(uint64_t a1, int a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    uint64_t v4 = DerivedStorage;
    CFStringRef v5 = *(OpaqueCMTimebase **)(DerivedStorage + 576);
    if (v5)
    {
      CMTimebaseSetRate(v5, 0.0);
      CFIndex v6 = *(const void **)(v4 + 576);
      if (v6)
      {
        CFRelease(v6);
        *(void *)(v4 + 576) = 0;
      }
    }
    uint64_t v7 = *(NSObject **)(v4 + 600);
    if (v7)
    {
      dispatch_source_cancel(v7);
      if (a2)
      {
        CFIndex v8 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
        uint64_t v9 = CMBaseObjectGetDerivedStorage();
        if (v9)
        {
          if (!*(unsigned char *)v9)
          {
            uint64_t v10 = *(NSObject **)(v9 + 80);
            if (v10) {
              dispatch_sync(v10, &__block_literal_global_78);
            }
          }
        }
      }
      else
      {
        CFIndex v8 = 0;
      }
      dispatch_release(*(dispatch_object_t *)(v4 + 600));
      *(void *)(v4 + 600) = 0;
    }
    else
    {
      CFIndex v8 = 0;
    }
    StopAndReleaseTimer((dispatch_object_t *)(v4 + 328));
    *(_DWORD *)(v4 + 632) = 0;
    *(unsigned char *)(v4 + 744) = 0;
    if (v8)
    {
      CFRelease(v8);
    }
  }
  else
  {
    FigSignalErrorAt();
  }
}

void playqueue_removeItemFromClientQueueAndFromMediaControlPlaylist(uint64_t a1, const void *a2, int a3, int a4)
{
  MEMORY[0x19970E910](*(void *)(a1 + 8));
  playqueue_removeItemFromClientQueueAndFromMediaControlPlaylistInternal(a1, a2, a3, a4);

  JUMPOUT(0x19970E930);
}

void playerairplay_removeQueuedItemUUIDStringOnAirPlayController(const void *a1, const void *a2)
{
  if (!*(unsigned char *)CMBaseObjectGetDerivedStorage() && a1)
  {
    CFTypeRef v4 = CFRetain(a1);
    if (v4)
    {
      CFStringRef v5 = v4;
      v6[0] = MEMORY[0x1E4F143A8];
      v6[1] = 3221225472;
      void v6[2] = __pap_PlaybackSessionRemovePlayQueueItem_block_invoke;
      v6[3] = &__block_descriptor_56_e5_v8__0l;
      v6[4] = v4;
      void v6[5] = a2;
      v6[6] = a1;
      pap_DispatchHelper(v4, a1, (uint64_t)v6, 0, 0, a2, 0, 0);
      CFRelease(v5);
    }
  }
}

void itemairplay_setRememberedTimeAndDefaultFlag(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = MEMORY[0x1E4F1FA48];
  if (*(_DWORD *)(a2 + 12)) {
    uint64_t v4 = a2;
  }
  uint64_t v5 = *(void *)(v4 + 16);
  *(_OWORD *)(DerivedStorage + 160) = *(_OWORD *)v4;
  *(void *)(DerivedStorage + 176) = v5;
  CFIndex v6 = (const __CFAllocator **)MEMORY[0x1E4F1CF80];
  *(unsigned char *)(DerivedStorage + 184) = (*(_DWORD *)(a2 + 12) & 1) == 0;
  CFAllocatorRef v7 = *v6;
  CMTime v9 = *(CMTime *)(DerivedStorage + 160);
  CFStringRef v8 = CMTimeCopyDescription(v7, &v9);
  if (v8) {
    CFRelease(v8);
  }
}

uint64_t itemairplay_controlPlaybackActivityTimer(uint64_t a1, int a2)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (result)
  {
    uint64_t v4 = result;
    FigReadWriteLockLockForRead();
    if (!*(unsigned char *)(v4 + 72))
    {
      uint64_t v5 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      CFAllocatorRef v7 = *(NSObject **)(v4 + 600);
      if (v7)
      {
        switch(a2)
        {
          case 0:
            dispatch_source_set_timer(v7, 0xFFFFFFFFFFFFFFFFLL, 0, 0);
            *(unsigned char *)(v4 + 608) = 0;
            break;
          case 1:
            goto LABEL_8;
          case 2:
            if (*(unsigned char *)(v4 + 608))
            {
LABEL_8:
              if (*(unsigned char *)(DerivedStorage + 216) && *(unsigned char *)(v4 + 611)) {
                uint64_t v8 = 30000000000;
              }
              else {
                uint64_t v8 = 1000000000;
              }
              dispatch_source_set_timer(v7, 0, v8, 0x4C4B40uLL);
              *(unsigned char *)(v4 + 608) = 1;
            }
            break;
          case 3:
            dispatch_source_set_timer(v7, 0, 1000000000 * *(unsigned int *)(DerivedStorage + 396), 0x4C4B40uLL);
            break;
          default:
            break;
        }
      }
      if (v5) {
        CFRelease(v5);
      }
    }
    return FigReadWriteLockUnlockForRead();
  }
  return result;
}

void playerairplay_playItemOnMediaControl(void *a1, const void *a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  long long values = a1;
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  if (DerivedStorage)
  {
    uint64_t v5 = DerivedStorage;
    if (!*DerivedStorage)
    {
      uint64_t v6 = CMBaseObjectGetDerivedStorage();
      if (v6)
      {
        FigReadWriteLockLockForRead();
        if (!*(unsigned char *)(v6 + 72) && !*(unsigned char *)(v6 + 733) && *((void *)v5 + 35))
        {
          CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
          CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          FigCFDictionarySetFloat32();
          CMTime v9 = (const void **)MEMORY[0x1E4F1CFD0];
          if (v5[42]) {
            CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F20B90], (const void *)*MEMORY[0x1E4F1CFD0]);
          }
          if (v5[129]) {
            CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F20BE0], *v9);
          }
          if (pap_ShouldUseInterstitialQueuing()) {
            CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F20950], *v9);
          }
          if (!itemairplay_setUpPlayParamDictionary(a2, Mutable, *(const __CFDictionary **)(v6 + 440)))
          {
            uint64_t v10 = malloc_type_calloc(1uLL, 0x10uLL, 0x20040A4A59CD2uLL);
            *uint64_t v10 = a1;
            if (a1) {
              CFRetain(a1);
            }
            v10[1] = a2;
            if (a2) {
              CFRetain(a2);
            }
            playqueue_addItemToMediaControlPlaylist(*((void *)v5 + 4));
            if (dword_1E93510E8)
            {
              os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            pap_setAirPlayState(a1, 15);
            CMBaseObjectGetDerivedStorage();
            LOBYTE(time.CFDictionarySetValue(theDict, key, value) = 0;
            FigCFDictionaryGetBooleanIfPresent();
            pap_AirPlayRoute_CopyProperty(a1, @"BufferedAudioStream", (uint64_t)v7, &cf);
            if (cf)
            {
              if (dword_1E93510E8)
              {
                uint64_t v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              FigEndpointStreamSuspend();
            }
            CFDictionaryRef v13 = CFDictionaryCreate(v7, (const void **)&kFigPlayerAirPlayNotificationPayloadKey_HijackingPlayer, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
            playerairplay_postPlayerNotification(values, @"HijackedByOtherPlayer", v13);
            if (v13) {
              CFRelease(v13);
            }
            uint64_t v14 = *((void *)v5 + 35);
            uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v15) {
              uint64_t v16 = v15;
            }
            else {
              uint64_t v16 = 0;
            }
            CFTypeRef v17 = *(void (**)(uint64_t, __CFDictionary *, void (*)(int, uint64_t), void *))(v16 + 24);
            if (v17) {
              v17(v14, Mutable, pap_playbackSessionPlayCompletion, v10);
            }
            FigCAStatsReportingSubmitData();
            playerairplay_postPlayerNotification(values, @"IsAirPlayVideoActiveDidChange", 0);
            CMTime v18 = *(OpaqueCMTimebase **)(v6 + 576);
            CMTime time = *(CMTime *)(v6 + 160);
            CMTimebaseSetTime(v18, &time);
            itemairplay_postItemNotification(a2, @"TimebaseChanged", 0);
          }
          if (Mutable) {
            CFRelease(Mutable);
          }
        }
      }
      if (cf) {
        CFRelease(cf);
      }
      if (v6) {
        FigReadWriteLockUnlockForRead();
      }
    }
  }
}

void itemairplay_insertItemOnMediaControl(const void *a1, __CFDictionary *a2)
{
  CFTypeRef cf = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigReadWriteLockLockForRead();
  if (*(unsigned char *)(DerivedStorage + 72) || *(unsigned char *)(DerivedStorage + 733) || !*(unsigned char *)(DerivedStorage + 732))
  {
    FigReadWriteLockUnlockForRead();
    goto LABEL_4;
  }
  uint64_t v5 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  uint64_t v6 = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (!v6 || (CFAllocatorRef v7 = v6, *v6))
  {
    a2 = 0;
    CFMutableDictionaryRef Mutable = 0;
  }
  else
  {
    CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (itemairplay_setUpPlayParamDictionary(a1, Mutable, *(const __CFDictionary **)(DerivedStorage + 440)))
    {
      a2 = 0;
    }
    else
    {
      uint64_t FigBaseObject = FigPlaybackItemGetFigBaseObject(*(void *)(DerivedStorage + 8));
      uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v11) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = 0;
      }
      CFDictionaryRef v13 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v12 + 48);
      if (v13)
      {
        v13(FigBaseObject, @"SelectedMediaArray", v8, &cf);
        if (cf)
        {
          v27[0] = 0;
          CFArrayRef MutableCopy = (const __CFArray *)FigCFArrayCreateMutableCopy();
          uint64_t CMBaseObject = FigAssetGetCMBaseObject(*(void *)(DerivedStorage + 16));
          uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v16) {
            uint64_t v17 = v16;
          }
          else {
            uint64_t v17 = 0;
          }
          CMTime v18 = *(unsigned int (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v17 + 48);
          if (v18 && !v18(CMBaseObject, @"MediaSelectionArray", v8, v27))
          {
            CFArrayRef v19 = (const __CFArray *)v27[0];
          }
          else
          {
            CFArrayRef v19 = 0;
            v27[0] = 0;
          }
          FigMediaSelectionGroupsAddCrossDeviceInfoToSelectedMediaArray(MutableCopy, v19);
          MEMORY[0x19970E910](*(void *)(DerivedStorage + 344));
          CFDictionarySetValue(*(CFMutableDictionaryRef *)(DerivedStorage + 336), (const void *)*MEMORY[0x1E4F20C00], MutableCopy);
          MEMORY[0x19970E930](*(void *)(DerivedStorage + 344));
          if (MutableCopy) {
            CFRelease(MutableCopy);
          }
          if (v27[0]) {
            CFRelease(v27[0]);
          }
        }
      }
      if (a2)
      {
        uint64_t v20 = CMBaseObjectGetDerivedStorage();
        if (*(void *)(v20 + 80))
        {
          uint64_t v21 = v20;
          a2 = CFDictionaryCreateMutable(v8, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          CFDictionaryAddValue(a2, (const void *)*MEMORY[0x1E4F20A88], *(const void **)(v21 + 80));
        }
        else
        {
          a2 = 0;
        }
      }
      playqueue_addItemToMediaControlPlaylist(*((void *)v7 + 4));
      if (v5)
      {
        CFTypeRef v22 = CFRetain(v5);
        CMBaseObjectGetDerivedStorage();
        if (v22)
        {
          uint64_t v23 = FigCFWeakReferenceHolderCopyReferencedObject();
          if (v23)
          {
            unsigned int v24 = (const void *)v23;
            if (pap_ShouldUseInterstitialQueuing()) {
              CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F20950], (const void *)*MEMORY[0x1E4F1CFD0]);
            }
            BOOL v25 = malloc_type_calloc(1uLL, 0x10uLL, 0x20040A4A59CD2uLL);
            void *v25 = v24;
            CFRetain(v24);
            v25[1] = a1;
            if (a1) {
              CFRetain(a1);
            }
            v27[0] = (CFTypeRef)MEMORY[0x1E4F143A8];
            v27[1] = (CFTypeRef)3221225472;
            v27[2] = __pap_PlaybackSessionInsertPlayQueueItem_block_invoke;
            v27[3] = &__block_descriptor_64_e5_v8__0l;
            v27[4] = v22;
            v27[5] = Mutable;
            v27[6] = a2;
            v27[7] = v25;
            pap_DispatchHelper(v22, v24, (uint64_t)v27, 0, 0, Mutable, a2, 0);
            CFRelease(v24);
          }
          CFRelease(v22);
          goto LABEL_41;
        }
      }
      else
      {
        CMBaseObjectGetDerivedStorage();
      }
    }
  }
  if (v5) {
LABEL_41:
  }
    CFRelease(v5);
  FigReadWriteLockUnlockForRead();
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (a2) {
    CFRelease(a2);
  }
LABEL_4:
  if (cf) {
    CFRelease(cf);
  }
}

void itemairplay_startAssetTypeLoadAsync(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  char v13 = 1;
  uint64_t v3 = (void *)FigCFWeakReferenceHolderCopyReferencedObject();
  uint64_t v4 = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (!v4 || *v4)
  {
    FigSignalErrorAt();
  }
  else if (*(unsigned char *)(DerivedStorage + 736) == 1)
  {
    uint64_t v5 = *(void *)(DerivedStorage + 16);
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    CFAllocatorRef v8 = *(unsigned int (**)(uint64_t, __CFString *, char *))(v7 + 24);
    if (v8 && !v8(v5, @"assetProperty_AssetType", &v13))
    {
      if (v13 && !*(void *)(DerivedStorage + 24))
      {
        uint64_t CMBaseObject = FigAssetGetCMBaseObject(*(void *)(DerivedStorage + 16));
        uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v11 = v10 ? v10 : 0;
        uint64_t v12 = *(unsigned int (**)(uint64_t, __CFString *, void, uint64_t))(v11 + 48);
        if (v12)
        {
          if (!v12(CMBaseObject, @"assetProperty_AssetType", *MEMORY[0x1E4F1CF80], DerivedStorage + 24))
          {
            *(unsigned char *)(DerivedStorage + 736) = 2;
            if (*(unsigned char *)(DerivedStorage + 744))
            {
              *(unsigned char *)(DerivedStorage + 744) = 0;
              playerairplay_startAirPlayWithItem(v3, a1);
            }
            playerairplay_triggerAsyncCheckAndUpdatePlayQueueItems(v3);
          }
        }
      }
    }
    else
    {
      *(unsigned char *)(DerivedStorage + 736) = 5;
    }
  }
  if (v3) {
    CFRelease(v3);
  }
}

uint64_t itemairplay_removeQueuedItemOnAirPlayController(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  uint64_t v4 = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (!v4 || (uint64_t v5 = v4, *v4))
  {
    FigSignalErrorAt();
    if (v3) {
LABEL_7:
    }
      CFRelease(v3);
  }
  else
  {
    FigReadWriteLockLockForRead();
    if (!*(unsigned char *)(DerivedStorage + 72) && !*v5)
    {
      itemairplay_doCleanupAtEndOfPlayback();
      itemairplay_cleanupItemForAirPlay(a1, 1);
      playerairplay_removeQueuedItemUUIDStringOnAirPlayController(v3, *(const void **)(DerivedStorage + 80));
    }
    if (v3) {
      goto LABEL_7;
    }
  }

  return FigReadWriteLockUnlockForRead();
}

CFStringRef playqueue_copyPlayQueueSummary(uint64_t a1)
{
  CFAllocatorRef alloc = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)a1);
  if (Count >= 1)
  {
    CFIndex v4 = Count;
    for (CFIndex i = 0; i != v4; ++i)
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)a1, i);
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      if (i) {
        CFStringAppend(Mutable, @", ");
      }
      if (ValueAtIndex) {
        CFAllocatorRef v8 = (const char *)(CMBaseObjectGetDerivedStorage() + 868);
      }
      else {
        CFAllocatorRef v8 = "";
      }
      if (*(unsigned char *)(DerivedStorage + 733)) {
        uint64_t v9 = 89;
      }
      else {
        uint64_t v9 = 78;
      }
      if (*(unsigned char *)(DerivedStorage + 732)) {
        uint64_t v10 = 89;
      }
      else {
        uint64_t v10 = 78;
      }
      CFStringAppendFormat(Mutable, 0, @"item %p %s [Client:%c,MC:%c](subitem %p) uuid %@", ValueAtIndex, v8, v10, v9, *(void *)(DerivedStorage + 8), *(void *)(DerivedStorage + 80));
    }
  }
  CFStringRef v11 = CFStringCreateWithFormat(alloc, 0, @"[%p] play queue now[CPQ:%d,MC:%d]: [%@]", a1, *(unsigned int *)(a1 + 16), *(unsigned int *)(a1 + 20), Mutable);
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v11;
}

void playqueue_removeItemFromClientQueueAndFromMediaControlPlaylistInternal(uint64_t a1, const void *a2, int a3, int a4)
{
  CMBaseObjectGetDerivedStorage();
  uint64_t Count = CFArrayGetCount(*(CFArrayRef *)a1);
  if (Count >= 1)
  {
    v17.size_t length = Count;
    v17.CFIndex location = 0;
    FirstIndexOfCFStringRef Value = CFArrayGetFirstIndexOfValue(*(CFArrayRef *)a1, v17, a2);
    if (FirstIndexOfValue != -1)
    {
      CFIndex v10 = FirstIndexOfValue;
      uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
      if (a3 && DerivedStorage[732])
      {
        --*(_DWORD *)(a1 + 16);
        DerivedStorage[732] = 0;
        DerivedStorage[734] = 0;
      }
      if (a4 && DerivedStorage[733])
      {
        --*(_DWORD *)(a1 + 20);
        DerivedStorage[733] = 0;
      }
      if (!DerivedStorage[732] && !DerivedStorage[733]) {
        CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)a1, v10);
      }
    }
  }
  CFStringRef v12 = playqueue_copyPlayQueueSummary(a1);
  char v13 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (v13)
  {
    uint64_t v14 = v13;
    if (dword_1E93510E8)
    {
      int v15 = pap_AirPlayState(v13);
      if (dword_1E93510E8)
      {
        if (v15 && v15 != 10)
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
    }
    CFRelease(v14);
  }
  if (v12) {
    CFRelease(v12);
  }
}

BOOL pap_ShouldUseInterstitialQueuing()
{
  return *(unsigned char *)(CMBaseObjectGetDerivedStorage() + 249) && *(void *)(CMBaseObjectGetDerivedStorage() + 368) != 0;
}

void pap_DispatchHelper(const void *a1, const void *a2, uint64_t a3, int a4, NSObject *a5, const void *a6, const void *a7, const void *a8)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v17 = DerivedStorage;
  if (a2 == a1 && !a4)
  {
    if (*(unsigned char *)DerivedStorage || !*(void *)(DerivedStorage + 280))
    {
      if (a5)
      {
        dispatch_semaphore_signal(a5);
      }
    }
    else
    {
      uint64_t v21 = *(void (**)(uint64_t))(a3 + 16);
      v21(a3);
    }
    return;
  }
  CMTime v18 = *(const void **)(DerivedStorage + 280);
  if (!v18)
  {
    CFTypeRef v19 = 0;
    if (!a1) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  CFTypeRef v19 = CFRetain(v18);
  if (a1) {
LABEL_10:
  }
    CFRetain(a1);
LABEL_11:
  if (a2) {
    CFRetain(a2);
  }
  if (a5) {
    dispatch_retain(a5);
  }
  if (a6) {
    CFRetain(a6);
  }
  if (a7) {
    CFRetain(a7);
  }
  if (a8) {
    CFRetain(a8);
  }
  uint64_t v20 = *(NSObject **)(v17 + 104);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __pap_DispatchHelper_block_invoke;
  block[3] = &unk_1E579CD68;
  void block[6] = v17;
  void block[7] = v19;
  block[4] = a5;
  void block[5] = a3;
  void block[8] = a1;
  block[9] = a2;
  block[10] = a6;
  block[11] = a7;
  block[12] = a8;
  dispatch_async(v20, block);
}

uint64_t itemairplay_assureItemForAirPlay()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    uint64_t v1 = DerivedStorage;
    if (!*(unsigned char *)(DerivedStorage + 72))
    {
      if (!*(void *)(DerivedStorage + 576))
      {
        CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        CMClockRef HostTimeClock = CMClockGetHostTimeClock();
        uint64_t v5 = CMTimebaseCreateWithSourceClock(v3, HostTimeClock, (CMTimebaseRef *)(v1 + 576));
        if (v5) {
          return v5;
        }
      }
      if (*(void *)(v1 + 600)) {
        return 0;
      }
      uint64_t v7 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
      uint64_t v8 = CMBaseObjectGetDerivedStorage();
      if (!v8 || *(unsigned char *)v8)
      {
        uint64_t v6 = FigSignalErrorAt();
        if (!v7) {
          return v6;
        }
      }
      else
      {
        uint64_t v9 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, *(dispatch_queue_t *)(v8 + 80));
        *(void *)(v1 + 600) = v9;
        if (v9)
        {
          dispatch_source_set_timer(v9, 0xFFFFFFFFFFFFFFFFLL, 0, 0);
          DispatchSourceBlocCFIndex k = (void *)FigDispatchCreateDispatchSourceBlock();
          dispatch_source_set_event_handler(*(dispatch_source_t *)(v1 + 600), DispatchSourceBlock);
          _Block_release(DispatchSourceBlock);
          dispatch_resume(*(dispatch_object_t *)(v1 + 600));
          uint64_t v6 = 0;
          if (!v7) {
            return v6;
          }
        }
        else
        {
          uint64_t v6 = 4294954434;
          if (!v7) {
            return v6;
          }
        }
      }
      CFRelease(v7);
      return v6;
    }
  }

  return FigSignalErrorAt();
}

uint64_t itemairplay_createCPEProtectorIfAvailable(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  uint64_t v21 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  itemairplay_getiTunesStoreContentType();
  uint64_t valuePtr = 0;
  uint64_t v6 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  uint64_t v7 = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (!v7 || *v7) {
    goto LABEL_31;
  }
  if (v6)
  {
    CFTypeRef v8 = CFRetain(v6);
    BOOL BooleanPropertySync = pap_PlaybackSessionGetBooleanPropertySync((uint64_t)v8, (uint64_t)v6, *MEMORY[0x1E4F20B60]);
    if (v8) {
      CFRelease(v8);
    }
    if (BooleanPropertySync) {
      goto LABEL_7;
    }
  }
  else if (pap_PlaybackSessionGetBooleanPropertySync(0, 0, *MEMORY[0x1E4F20B60]))
  {
LABEL_7:
    CFIndex v10 = 0;
    CFStringRef Value = (const void *)*MEMORY[0x1E4F1D398];
    goto LABEL_10;
  }
  CFIndex v10 = itemairplay_copyiTunesStoreAlternateContentID();
  CFStringRef Value = (const void *)*MEMORY[0x1E4F1D398];
  if (FigCFEqual())
  {
LABEL_10:
    CFDictionaryRef v12 = (const __CFDictionary *)itemairplay_copyiTunesStoreContentInfo();
    CFDictionaryRef v13 = v12;
    if (v12) {
      CFStringRef Value = CFDictionaryGetValue(v12, @"assetOption_iTunesStoreContentID");
    }
    if (Value) {
      CFRetain(Value);
    }
    if (v13) {
      CFRelease(v13);
    }
    if (!Value) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  if (v10)
  {
    CFStringRef Value = CFRetain(v10);
    if (Value) {
LABEL_17:
    }
      CFNumberGetValue((CFNumberRef)Value, kCFNumberSInt64Type, &valuePtr);
  }
  else
  {
    CFStringRef Value = 0;
  }
LABEL_18:
  *a3 = 0;
  BOOL isLocalFileURL = pap_isLocalFileURL(*(const __CFURL **)(DerivedStorage + 88), 0);
  FigCFDictionaryGetBooleanIfPresent();
  if (isLocalFileURL)
  {
    uint64_t FigBaseObject = FigPlaybackItemGetFigBaseObject(a1);
    uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v17 = v16 ? v16 : 0;
    CMTime v18 = *(void (**)(uint64_t, __CFString *, void, uint64_t *))(v17 + 48);
    if (v18) {
      v18(FigBaseObject, @"CPEProtector", *MEMORY[0x1E4F1CF80], &v21);
    }
  }
  if (Value) {
    CFRelease(Value);
  }
  if (v10) {
    CFRelease(v10);
  }
LABEL_31:
  if (v6) {
    CFRelease(v6);
  }
  return v21;
}

uint64_t playerairplay_performQueuedItemVodkaExchange(const void *a1, const void *a2, const void *a3, int a4)
{
  CFTypeRef v8 = (void *)MEMORY[0x199711A30]();
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  uint64_t v10 = CMBaseObjectGetDerivedStorage();
  if (a1) {
    CFRetain(a1);
  }
  if (a2) {
    CFRetain(a2);
  }
  if (a3) {
    CFRetain(a3);
  }
  *(void *)(v10 + 768) = FigGetUpTimeNanoseconds();
  uint64_t v11 = objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjectsAndKeys:", DerivedStorage[30], @"RouteInfo", DerivedStorage[35], @"EndpointPlaybackSession", *(void *)(v10 + 80), @"MediaControlUUID", 0);
  uint64_t v12 = DerivedStorage[10];
  v26[0] = MEMORY[0x1E4F143A8];
  v26[1] = 3221225472;
  v26[2] = __playerairplay_performQueuedItemVodkaExchange_block_invoke;
  v26[3] = &__block_descriptor_57_e25_v16__0____CFDictionary__8l;
  v26[4] = a1;
  v26[5] = a2;
  char v27 = a4;
  v26[6] = a3;
  CFDictionaryRef v13 = *(void **)(CMBaseObjectGetVTable() + 16);
  if (v13) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (*v14 && (int v15 = (uint64_t (*)(const void *, uint64_t, uint64_t, void *))v14[11]) != 0)
  {
    uint64_t v16 = v15(a3, v11, v12, v26);
    if (!v16)
    {
      uint64_t v17 = *(void *)(v10 + 664);
      if (v17)
      {
        CMTime v18 = *(void **)(CMBaseObjectGetVTable() + 16);
        if (v18) {
          CFTypeRef v19 = v18;
        }
        else {
          CFTypeRef v19 = 0;
        }
        if (*v19)
        {
          uint64_t v23 = (void (*)(uint64_t))v19[12];
          if (v23) {
            v23(v17);
          }
        }
        unsigned int v24 = *(const void **)(v10 + 664);
        if (v24)
        {
          CFRelease(v24);
          *(void *)(v10 + 664) = 0;
        }
      }
      CFRetain(a3);
      uint64_t v16 = 0;
      *(void *)(v10 + 664) = a3;
      goto LABEL_27;
    }
  }
  else
  {
    uint64_t v16 = 4294954514;
  }
  if (a4 && pap_isLocalFileURL(*(const __CFURL **)(v10 + 88), 0))
  {
    uint64_t v20 = itemairplay_createCPEProtectorIfAvailable((uint64_t)a2, 0, &v25);
    if (!v20)
    {
      *(unsigned char *)(v10 + 735) = 1;
      playerairplay_triggerAsyncCheckAndUpdatePlayQueueItems(a1);
      if (!a1) {
        goto LABEL_23;
      }
      goto LABEL_22;
    }
    uint64_t v21 = (const void *)v20;
    uint64_t v16 = playerairplay_performQueuedItemVodkaExchange(a1, a2, v20, 0);
    CFRelease(v21);
  }
  if (a1) {
LABEL_22:
  }
    CFRelease(a1);
LABEL_23:
  if (a3) {
    CFRelease(a3);
  }
  if (a2) {
    CFRelease(a2);
  }
LABEL_27:
  return v16;
}

void __itemairplay_assureItemForAirPlay_block_invoke(uint64_t a1)
{
  if (*(unsigned char *)(*(void *)(a1 + 32) + 735) == 2)
  {
    uint64_t v1 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v1)
    {
      uint64_t v2 = (const void *)v1;
      playerairplay_triggerAsyncCheckAndUpdatePlayQueueItems(v1);
      CFRelease(v2);
    }
  }
  else
  {
    CFAllocatorRef v3 = *(const void **)(a1 + 40);
    itemairplay_requestAirPlayPlaybackInfo(v3, 0, 0, 0);
  }
}

uint64_t itemairplay_requestAirPlayPlaybackInfo(const void *a1, void *a2, int a3, char a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigReadWriteLockLockForRead();
  if (!*(unsigned char *)(DerivedStorage + 72))
  {
    uint64_t v9 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    if (v9)
    {
      uint64_t v10 = v9;
      if (!playerairplay_deferMediaControlPlaylistForInterstitials(v9))
      {
        if (!a2)
        {
          a2 = malloc_type_calloc(1uLL, 0x40uLL, 0x10600403C78B70CuLL);
          *a2 = v10;
          CFRetain(v10);
          a2[1] = a1;
          if (a1) {
            CFRetain(a1);
          }
        }
        *((unsigned char *)a2 + 29) = a3;
        *((unsigned char *)a2 + 30) = a4;
        if (a3)
        {
          *(_OWORD *)(DerivedStorage + 252) = *(_OWORD *)(DerivedStorage + 160);
          *(void *)(DerivedStorage + 268) = *(void *)(DerivedStorage + 176);
        }
        CFTypeRef v11 = CFRetain(v10);
        if (v11)
        {
          uint64_t v12 = v11;
          v14[0] = MEMORY[0x1E4F143A8];
          v14[1] = 3221225472;
          v14[2] = __pap_PlaybackSessionGetPlaybackInfo_block_invoke;
          v14[3] = &__block_descriptor_56_e5_v8__0l;
          v14[4] = v11;
          v14[5] = pap_playbackSessionGetPlaybackInfoCompletion;
          v14[6] = a2;
          pap_DispatchHelper(v11, v10, (uint64_t)v14, 1, 0, 0, 0, 0);
          CFRelease(v12);
        }
      }
      CFRelease(v10);
    }
  }
  return FigReadWriteLockUnlockForRead();
}

void pap_playbackSessionGetPlaybackInfoCompletion(const void *a1, int a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v7 = *(void *)(a3 + 8);
  if (a1) {
    CFRetain(a1);
  }
  CFTypeRef v8 = *(NSObject **)(DerivedStorage + 104);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __pap_playbackSessionGetPlaybackInfoCompletion_block_invoke;
  block[3] = &__block_descriptor_68_e5_v8__0l;
  block[4] = DerivedStorage;
  void block[5] = a3;
  void block[6] = a1;
  void block[7] = v7;
  int v10 = a2;
  dispatch_async(v8, block);
}

void __pap_playbackSessionGetPlaybackInfoCompletion_block_invoke(uint64_t a1)
{
  if (!**(unsigned char **)(a1 + 32))
  {
    uint64_t v2 = *(void *)(a1 + 40);
    int v3 = *(unsigned __int8 *)(v2 + 29);
    CFIndex v4 = *(const void **)v2;
    if (*(void *)(CMBaseObjectGetDerivedStorage() + 368))
    {
      BOOL ShouldUseInterstitialQueuing = pap_ShouldUseInterstitialQueuing();
      CFDictionaryRef Value = *(const __CFDictionary **)(a1 + 48);
      if (Value && ShouldUseInterstitialQueuing) {
        CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 48), (const void *)*MEMORY[0x1E4F20AE8]);
      }
    }
    else
    {
      CFDictionaryRef Value = *(const __CFDictionary **)(a1 + 48);
    }
    itemairplay_getPlaybackInfoCompletionHandler(*(const void **)(a1 + 56), v4, Value, *(_DWORD *)(a1 + 64), v3, 0, *(unsigned __int8 *)(*(void *)(a1 + 40) + 30), *(void *)(*(void *)(a1 + 40) + 56));
  }
  uint64_t v7 = *(const void **)(a1 + 48);
  if (v7) {
    CFRelease(v7);
  }
  CFTypeRef v8 = *(CFTypeRef **)(a1 + 40);

  pap_PlaybackSessionFreeSeekCompletionContext(v8);
}

uint64_t itemairplay_getPlaybackInfoCompletionHandler(const void *a1, const void *a2, const __CFDictionary *a3, int a4, int a5, int a6, int a7, uint64_t a8)
{
  uint64_t v178 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigReadWriteLockLockForRead();
  if (*(unsigned char *)(DerivedStorage + 72)) {
    return FigReadWriteLockUnlockForRead();
  }
  int v15 = (float *)CMBaseObjectGetDerivedStorage();
  if (!v15) {
    return FigReadWriteLockUnlockForRead();
  }
  uint64_t v16 = v15;
  if (*(unsigned char *)v15) {
    return FigReadWriteLockUnlockForRead();
  }
  if (!a3) {
    goto LABEL_16;
  }
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(a3, @"item");
  if (!Value) {
    CFDictionaryRef Value = a3;
  }
  CMTime v18 = CFDictionaryGetValue(Value, (const void *)*MEMORY[0x1E4F20A88]);
  if (v18)
  {
    int v19 = CFEqual(v18, *(CFTypeRef *)(DerivedStorage + 80));
    if (a4)
    {
LABEL_16:
      if (a4 == -6722) {
        playerairplay_shutdownAirPlayVideoPlaybackDueToServer(a2);
      }
      return FigReadWriteLockUnlockForRead();
    }
  }
  else
  {
    int v19 = 1;
    if (a4) {
      goto LABEL_16;
    }
  }
  if (!v19) {
    goto LABEL_16;
  }
  uint64_t v124 = a8;
  __int16 v141 = 0;
  int v140 = 0;
  float Rate = CMTimebaseGetRate(*(CMTimebaseRef *)(DerivedStorage + 576));
  float v139 = Rate;
  CMTimeValue v169 = *(void *)(DerivedStorage + 160);
  CMTimeFlags v125 = *(_DWORD *)(DerivedStorage + 172);
  CMTimeScale v170 = *(_DWORD *)(DerivedStorage + 168);
  CMTimeEpoch v122 = *(void *)(DerivedStorage + 176);
  *(_OWORD *)&v138.CMTimeValue value = *MEMORY[0x1E4F1F9F8];
  CMTimeEpoch v21 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  v138.CMTimeEpoch epoch = v21;
  long long v128 = *(_OWORD *)&v138.value;
  *(_OWORD *)&v137.CMTimeValue value = *(_OWORD *)&v138.value;
  v137.CMTimeEpoch epoch = v21;
  char v136 = 0;
  CFTypeID v22 = CFGetTypeID(a3);
  if (v22 != CFDictionaryGetTypeID()) {
    return FigReadWriteLockUnlockForRead();
  }
  int v126 = a7;
  FigCFDictionaryGetValue();
  FigCFDictionaryGetBooleanIfPresent();
  uint64_t v23 = &dword_1E9351000;
  int v129 = a1;
  int v130 = a2;
  CMTimeEpoch v123 = v21;
  if (FigCFEqual())
  {
    if (dword_1E93510E8)
    {
      LODWORD(rhs.CFDictionarySetValue(theDict, key, value) = 0;
      LOBYTE(lhs.CFDictionarySetValue(theDict, key, value) = 0;
      os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      uint64_t v23 = &dword_1E9351000;
    }
    CMTimebaseSetRate(*(CMTimebaseRef *)(DerivedStorage + 576), 0.0);
  }
  else
  {
    FigCFDictionaryGetFloat32IfPresent();
  }
  if (pap_FigCFDictionaryGetBooleanIfPresent((uint64_t)a3, (const void *)*MEMORY[0x1E4F20B20], (unsigned char *)&v141 + 1)&& HIBYTE(v141)&& !*(unsigned char *)(DerivedStorage + 738))
  {
    *(unsigned char *)(DerivedStorage + 738) = 1;
    playerairplay_triggerAsyncCheckAndUpdatePlayQueueItems(a2);
  }
  if (*((unsigned char *)v16 + 448))
  {
    *(_OWORD *)&time1.CMTimeValue value = v128;
    time1.CMTimeEpoch epoch = v21;
    lhs.CMTimeValue value = *MEMORY[0x1E4F1F9F8];
    CMTimeFlags flags = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 12);
    lhs.CMTimeScale timescale = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 8);
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 592));
    int v26 = *(const void **)(DerivedStorage + 584);
    if (v26)
    {
      char v27 = (OpaqueCMTimebase *)CFRetain(v26);
      MEMORY[0x19970E930](*(void *)(DerivedStorage + 592));
      CMTimeEpoch epoch = v21;
      if (v27)
      {
        CMTimebaseGetTime(&time, v27);
        lhs.CMTimeValue value = time.value;
        CMTimeFlags flags = time.flags;
        lhs.CMTimeScale timescale = time.timescale;
        CMTimeEpoch epoch = time.epoch;
        CFRelease(v27);
      }
    }
    else
    {
      MEMORY[0x19970E930](*(void *)(DerivedStorage + 592));
      CMTimeEpoch epoch = v21;
    }
    FigCFDictionaryGetCMTimeIfPresent();
    if ((time1.flags & 0x1D) == 1)
    {
      CMTime time = time1;
      CMTimeGetSeconds(&time);
    }
    if ((flags & 0x1D) == 1)
    {
      time.CMTimeValue value = lhs.value;
      time.CMTimeScale timescale = lhs.timescale;
      time.CMTimeFlags flags = flags;
      time.CMTimeEpoch epoch = epoch;
      CMTimeGetSeconds(&time);
      if ((time1.flags & 0x1D) == 1)
      {
        time.CMTimeValue value = lhs.value;
        time.CMTimeScale timescale = lhs.timescale;
        time.CMTimeFlags flags = flags;
        time.CMTimeEpoch epoch = epoch;
        CMTime rhs = time1;
        CMTimeSubtract(&v135, &time, &rhs);
        CMTimeGetSeconds(&v135);
      }
    }
    uint64_t v23 = &dword_1E9351000;
  }
  FigCFDictionaryGetCMTimeIfPresent();
  FigCFDictionaryGetCMTimeIfPresent();
  int v29 = *(void *)(CMBaseObjectGetDerivedStorage() + 360)
     && *(_DWORD *)(DerivedStorage + 144)
     && *((unsigned char *)v16 + 249) == 0;
  if (!(v126 | a5) && Rate == 0.0 && (float v30 = v139, ((v139 == Rate) & ~v29) != 0))
  {
    int v121 = 0;
  }
  else
  {
    if (a5)
    {
      CMTimeFlags v31 = *(_DWORD *)(DerivedStorage + 264);
      if (v31)
      {
        CMTimeValue v169 = *(void *)(DerivedStorage + 252);
        CMTimeScale v170 = *(_DWORD *)(DerivedStorage + 260);
        CMTimeEpoch v122 = *(void *)(DerivedStorage + 268);
        *(void *)(DerivedStorage + 268) = v21;
        *(_OWORD *)(DerivedStorage + 252) = v128;
        CMTimeFlags v125 = v31;
      }
    }
    if (v23[58])
    {
      int v32 = pap_AirPlayState(a2);
      if (v23[58])
      {
        if (v32 && v32 != 10)
        {
          LODWORD(rhs.CFDictionarySetValue(theDict, key, value) = 0;
          LOBYTE(lhs.CFDictionarySetValue(theDict, key, value) = 0;
          unsigned int v33 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v34 = rhs.value;
          if (os_log_type_enabled(v33, lhs.value)) {
            unsigned int v35 = v34;
          }
          else {
            unsigned int v35 = v34 & 0xFFFFFFFE;
          }
          if (v35)
          {
            if (v129) {
              uint64_t v36 = (const char *)(CMBaseObjectGetDerivedStorage() + 868);
            }
            else {
              uint64_t v36 = "";
            }
            CMTime time1 = v138;
            Float64 Seconds = CMTimeGetSeconds(&time1);
            CMTime time1 = v137;
            double v38 = CMTimeGetSeconds(&time1);
            uint64_t v39 = "NO";
            int v40 = *(_DWORD *)(DerivedStorage + 144);
            int v41 = *(_DWORD *)(DerivedStorage + 148);
            LODWORD(time.CFDictionarySetValue(theDict, key, value) = 136317698;
            *(CMTimeValue *)((char *)&time.value + 4) = (CMTimeValue)"itemairplay_getPlaybackInfoCompletionHandler";
            if (a5) {
              uint64_t v39 = "YES";
            }
            LOWORD(time.flags) = 2048;
            *(void *)((char *)&time.flags + 2) = v129;
            HIWORD(time.epoch) = 2082;
            uint64_t v152 = v36;
            __int16 v153 = 2048;
            Float64 v154 = Seconds;
            __int16 v155 = 2048;
            *(double *)uint64_t v156 = v38;
            *(_WORD *)&v156[8] = 2082;
            unsigned int v157 = v39;
            __int16 v158 = 1024;
            int v159 = v126;
            __int16 v160 = 1024;
            int v161 = a6;
            __int16 v162 = 1024;
            int v163 = v40;
            __int16 v164 = 1024;
            int v165 = v41;
            __int16 v166 = 1024;
            int v167 = v29;
            _os_log_send_and_compose_impl();
            a2 = v130;
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          a1 = v129;
        }
      }
    }
    if (v138.flags)
    {
      int v121 = *(_DWORD *)(DerivedStorage + 132) & 1;
      if (v121 && *(unsigned char *)(DerivedStorage + 157) && *(void *)(CMBaseObjectGetDerivedStorage() + 360))
      {
        uint64_t v42 = *(unsigned int *)(DerivedStorage + 144);
        CMTime time1 = *(CMTime *)(DerivedStorage + 120);
        itemairplay_airplaySetCurrentTime(a1, &time1, 245, v42 != 0, v42, 0);
        *(unsigned char *)(DerivedStorage + 157) = 0;
      }
      CMTime time1 = v137;
      CMTime time = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
      if (CMTimeCompare(&time1, &time)
        || CFEqual(*(CFTypeRef *)(DerivedStorage + 24), @"com.apple.coremedia.assettype.streaming") | a5)
      {
        CMTime rhs = v138;
        uint64_t v43 = CMBaseObjectGetDerivedStorage();
        CMClockOrTimebaseRef v44 = CMTimebaseCopySource(*(CMTimebaseRef *)(v43 + 576));
        CMTimebaseGetRate(*(CMTimebaseRef *)(v43 + 576));
        CMSyncGetTime(&time1, v44);
        CMTime time = rhs;
        CMTimebaseSetRateAndAnchorTimeWithFlags();
        CMTime time = rhs;
        itemairplay_setRememberedTimeAndDefaultFlag((uint64_t)a1, (uint64_t)&time);
        if (v44) {
          CFRelease(v44);
        }
        int v45 = *(_DWORD *)(DerivedStorage + 148);
        if (v45)
        {
          a2 = v130;
          if (v45 == *(_DWORD *)(DerivedStorage + 144)) {
            *(unsigned char *)(DerivedStorage + 156) = 1;
          }
        }
        else
        {
          a2 = v130;
        }
      }
    }
    else
    {
      int v121 = 0;
    }
    float v30 = v139;
  }
  if (a6 == 1 && v30 != Rate && v30 != 0.0 && v16[12] == 0.0)
  {
    CMTime time1 = v138;
    playerairplay_notifyStartupTasksOfEvents(a2, a1, 5, 0, (uint64_t)&time1, &time, v30);
    time1.CMTimeValue value = 0;
    FPSupport_CreateSetRateOptions((const __CFAllocator *)*MEMORY[0x1E4F1CF80], 39, (CFMutableDictionaryRef *)&time1);
    playerairplay_updatePlayerRateToMatch(a2, time1.value, v139);
    if (time1.value) {
      CFRelease((CFTypeRef)time1.value);
    }
    float v30 = v139;
  }
  if (v30 != Rate)
  {
    BOOL v46 = playerairplay_ignoreRemoteRateUpdate(a2, (uint64_t)a1, v30);
    if ((v139 != 0.0 || !*((unsigned char *)v16 + 249) || (*(unsigned char *)(DerivedStorage + 532) & 1) == 0)
      && !v46
      && (a6 == 1
       || Rate != 0.0
       || !playerairplay_isAPVSupportedForCoordinatedPlayback()
       || !*((unsigned char *)v16 + 448)))
    {
      time1.CMTimeValue value = 0;
      FPSupport_CreateSetRateOptions((const __CFAllocator *)*MEMORY[0x1E4F1CF80], 39, (CFMutableDictionaryRef *)&time1);
      CFDictionaryAddValue((CFMutableDictionaryRef)time1.value, @"PauseAffectsCoordinatedPlayback", (const void *)*MEMORY[0x1E4F1CFD0]);
      playerairplay_updatePlayerRateToMatch(a2, time1.value, v139);
      if (time1.value) {
        CFRelease((CFTypeRef)time1.value);
      }
    }
    if (v139 != 0.0 && !*((unsigned char *)v16 + 249) && pap_HasAirPlayReachedTimeToPausePlayback(a2))
    {
      *((unsigned char *)v16 + 56) = 0;
      pap_HandleAirPlayReachedTimeToPausePlayback(a2, a1);
    }
  }
  if (FigCFDictionaryGetDoubleIfPresent())
  {
    int v47 = CFDateCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0.0);
    if (v47)
    {
      char v48 = 0;
      unsigned int v49 = v47;
LABEL_105:
      unsigned int v50 = *(const void **)(DerivedStorage + 192);
      *(void *)(DerivedStorage + 192) = v47;
      CFRetain(v47);
      if (v50) {
        CFRelease(v50);
      }
      *(unsigned char *)(DerivedStorage + 224) = 0;
      CFNumberRef v51 = (_OWORD *)(DerivedStorage + 200);
      *(_OWORD *)(DerivedStorage + 200) = v128;
      *(void *)(DerivedStorage + 216) = v21;
      FigCFDictionaryGetCMTimeIfPresent();
      if (!*((unsigned char *)v16 + 248))
      {
        *(_OWORD *)&time.CMTimeValue value = *v51;
        time.CMTimeEpoch epoch = *(void *)(DerivedStorage + 216);
        CMTimeConvertScale(&time1, &time, 1, kCMTimeRoundingMethod_RoundTowardZero);
        *CFNumberRef v51 = *(_OWORD *)&time1.value;
        *(void *)(DerivedStorage + 216) = time1.epoch;
      }
      if ((v48 & 1) == 0) {
        CFRelease(v49);
      }
      goto LABEL_115;
    }
  }
  int v47 = CFDictionaryGetValue(a3, (const void *)*MEMORY[0x1E4F20AD0]);
  if (v47)
  {
    unsigned int v49 = 0;
    char v48 = 1;
    goto LABEL_105;
  }
  unsigned int v52 = CFDictionaryGetValue(a3, (const void *)*MEMORY[0x1E4F20AE0]);
  if (v52)
  {
    unint64_t v53 = *(const void **)(DerivedStorage + 192);
    *(void *)(DerivedStorage + 192) = v52;
    CFRetain(v52);
    if (v53) {
      CFRelease(v53);
    }
    *(unsigned char *)(DerivedStorage + 224) = 1;
  }
LABEL_115:
  unsigned int v54 = v130;
  if (v137.flags)
  {
    CMTime time1 = *(CMTime *)(DerivedStorage + 228);
    CMTime time = v137;
    if (CMTimeCompare(&time1, &time))
    {
      rhs.CMTimeValue value = 0;
      CFAllocatorRef v55 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CMTime time1 = v137;
      rhs.CMTimeValue value = (CMTimeValue)CMTimeCopyAsDictionary(&time1, v55);
      if (rhs.value) {
        CFDictionaryRef v56 = CFDictionaryCreate(v55, (const void **)&kFigPlaybackItemParameter_CurrentDuration, (const void **)&rhs, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      }
      else {
        CFDictionaryRef v56 = 0;
      }
      *(CMTime *)(DerivedStorage + 228) = v137;
      if (dword_1E93510E8)
      {
        LODWORD(lhs.CFDictionarySetValue(theDict, key, value) = 0;
        LOBYTE(type.CFDictionarySetValue(theDict, key, value) = 0;
        uint64_t v57 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v58 = lhs.value;
        if (os_log_type_enabled(v57, type.value)) {
          unsigned int v59 = v58;
        }
        else {
          unsigned int v59 = v58 & 0xFFFFFFFE;
        }
        if (v59)
        {
          if (v130)
          {
            unsigned int v60 = v130;
            int v61 = (const char *)(CMBaseObjectGetDerivedStorage() + 450);
          }
          else
          {
            unsigned int v60 = 0;
            int v61 = "";
          }
          CMTime time1 = v137;
          Float64 v62 = CMTimeGetSeconds(&time1);
          LODWORD(time.CFDictionarySetValue(theDict, key, value) = 136316418;
          *(CMTimeValue *)((char *)&time.value + 4) = (CMTimeValue)"itemairplay_getPlaybackInfoCompletionHandler";
          LOWORD(time.flags) = 2048;
          *(void *)((char *)&time.flags + 2) = v60;
          HIWORD(time.epoch) = 2082;
          uint64_t v152 = v61;
          __int16 v153 = 2048;
          Float64 v154 = v62;
          __int16 v155 = 1024;
          *(_DWORD *)uint64_t v156 = (v137.flags & 1) == 0;
          *(_WORD *)&v156[4] = 1024;
          *(_DWORD *)&v156[6] = (~v137.flags & 0x11) == 0;
          _os_log_send_and_compose_impl();
          unsigned int v54 = v60;
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        a1 = v129;
      }
      itemairplay_postItemNotification(a1, @"DurationChanged", v56);
      if (rhs.value) {
        CFRelease((CFTypeRef)rhs.value);
      }
      if (v56) {
        CFRelease(v56);
      }
    }
  }
  if (pap_FigCFDictionaryGetBooleanIfPresent((uint64_t)a3, (const void *)*MEMORY[0x1E4F20AF8], (unsigned char *)&v141 + 1))
  {
    int v63 = HIBYTE(v141);
    if (*(unsigned __int8 *)(DerivedStorage + 609) != HIBYTE(v141))
    {
      *(unsigned char *)(DerivedStorage + 609) = HIBYTE(v141);
      if (v63) {
        itemairplay_postItemNotification(a1, @"StreamRanDry", 0);
      }
    }
  }
  if (pap_FigCFDictionaryGetBooleanIfPresent((uint64_t)a3, (const void *)*MEMORY[0x1E4F20B00], (unsigned char *)&v141 + 1))
  {
    int v64 = HIBYTE(v141);
    if (*(unsigned __int8 *)(DerivedStorage + 610) != HIBYTE(v141))
    {
      *(unsigned char *)(DerivedStorage + 610) = HIBYTE(v141);
      if (v64) {
        itemairplay_postItemNotification(a1, @"StreamBufferFull", 0);
      }
    }
  }
  if (pap_FigCFDictionaryGetBooleanIfPresent((uint64_t)a3, (const void *)*MEMORY[0x1E4F20B08], &v141)) {
    playerairplay_mediaControlHandlePlaybackLikelyToKeepUp(v54, a1, v141);
  }
  CFMutableBagRef v65 = CFDictionaryGetValue(a3, (const void *)*MEMORY[0x1E4F20AF0]);
  if (v65
    && itemairplay_isRangeArraysDifferent(*(CFArrayRef *)(DerivedStorage + 616), (const __CFArray *)v65))
  {
    unsigned int v66 = *(const void **)(DerivedStorage + 616);
    *(void *)(DerivedStorage + 616) = v65;
    CFRetain(v65);
    if (v66) {
      CFRelease(v66);
    }
    itemairplay_postItemNotification(a1, @"PlayableRangeChanged", 0);
    if (*(unsigned char *)(DerivedStorage + 508))
    {
      CMTime v145 = *(CMTime *)(DerivedStorage + 496);
      CFIndex Count = CFArrayGetCount((CFArrayRef)v65);
      if (Count < 1)
      {
LABEL_162:
        a1 = v129;
        unsigned int v54 = v130;
      }
      else
      {
        CFIndex v68 = Count;
        uint64_t v69 = (const void *)*MEMORY[0x1E4F20C38];
        uint64_t v70 = (const void *)*MEMORY[0x1E4F20C30];
        uint64_t v71 = 1;
        do
        {
          CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)v65, v71 - 1);
          if (!ValueAtIndex) {
            goto LABEL_157;
          }
          CFDictionaryRef v73 = ValueAtIndex;
          CFDictionaryRef v74 = (const __CFDictionary *)CFDictionaryGetValue(ValueAtIndex, v69);
          CFDictionaryRef v75 = (const __CFDictionary *)CFDictionaryGetValue(v73, v70);
          if (!v74) {
            goto LABEL_162;
          }
          CFDictionaryRef v76 = v75;
          if (!v75) {
            goto LABEL_162;
          }
          memset(&time1, 0, sizeof(time1));
          CMTimeMakeFromDictionary(&time1, v74);
          memset(&time, 0, sizeof(time));
          CMTimeMakeFromDictionary(&time, v76);
          memset(&rhs, 0, sizeof(rhs));
          CMTime lhs = time1;
          CMTime type = time;
          CMTimeAdd(&rhs, &lhs, &type);
          CMTime lhs = v145;
          CMTime type = time1;
          if (CMTimeCompare(&lhs, &type) < 0)
          {
LABEL_157:
            BOOL v77 = 0;
          }
          else
          {
            CMTime lhs = v145;
            CMTime type = rhs;
            BOOL v77 = CMTimeCompare(&lhs, &type) < 1;
          }
          if (v71 >= v68) {
            break;
          }
          ++v71;
        }
        while (!v77);
        a1 = v129;
        unsigned int v54 = v130;
        if (v77) {
          itemairplay_postItemNotification(v129, @"ReachedTimeToPauseBuffering", 0);
        }
      }
    }
  }
  CFArrayRef v78 = (const __CFArray *)CFDictionaryGetValue(a3, (const void *)*MEMORY[0x1E4F20B28]);
  if (v78)
  {
    CFArrayRef v79 = v78;
    if (itemairplay_isRangeArraysDifferent(*(CFArrayRef *)(DerivedStorage + 624), v78))
    {
      char v80 = *(const void **)(DerivedStorage + 624);
      *(void *)(DerivedStorage + 624) = v79;
      CFRetain(v79);
      if (v80) {
        CFRelease(v80);
      }
      itemairplay_postItemNotification(a1, @"SeekableRangeChanged", 0);
    }
  }
  if (FigCFDictionaryGetInt32IfPresent()) {
    playerairplay_mediaControlHandleStallCountChanged((uint64_t)v54, a1, v140);
  }
  int v81 = *(_DWORD *)(DerivedStorage + 148);
  if (v81 && v81 == *(_DWORD *)(DerivedStorage + 144) && *(unsigned char *)(DerivedStorage + 156))
  {
    CFIndex v82 = v65 ? CFArrayGetCount((CFArrayRef)v65) : 0;
    if (a6 == 2 || v82 > 0 || (_BYTE)v141) && (v138.flags)
    {
      uint64_t v83 = *(unsigned int *)(DerivedStorage + 148);
      CMTime time1 = v138;
      itemairplay_setPositionCompletionHandler(a1, 0, 1, v83, v124);
      *(void *)(DerivedStorage + 144) = 0;
      *(unsigned char *)(DerivedStorage + 156) = 0;
    }
  }
  if (*(unsigned char *)(DerivedStorage + 532))
  {
    if (v126 && (v138.flags & 1) != 0)
    {
      CMTime time1 = v138;
      pap_UpdateAirPlayReachedTimeToPausePlayback(a1, &time1);
    }
    else if (*((unsigned char *)v16 + 249) || !pap_HasAirPlayReachedTimeToPausePlayback(v54))
    {
      goto LABEL_190;
    }
    if (!*((unsigned char *)v16 + 56)) {
      pap_HandleAirPlayReachedTimeToPausePlayback(v54, a1);
    }
  }
LABEL_190:
  if ((v138.flags & 1) == 0) {
    return FigReadWriteLockUnlockForRead();
  }
  BOOL v84 = !a5 || v121 == 0;
  BOOL v85 = !v84;
  BOOL v127 = v85;
  float v86 = v139;
  CMTimeValue v149 = v169;
  CMTimeScale v150 = v170;
  uint64_t v87 = CMBaseObjectGetDerivedStorage();
  uint64_t v88 = CMBaseObjectGetDerivedStorage();
  CMTimeValue v89 = *MEMORY[0x1E4F1F9F8];
  CMTimeValue v173 = *MEMORY[0x1E4F1F9F8];
  CMTimeScale v90 = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 8);
  CMTimeScale v174 = v90;
  float v91 = *(float *)(v88 + 48);
  double v92 = v91 <= 0.0 ? 1.5 : v91 * 1.5;
  if (*(unsigned char *)(v88 + 249)) {
    return FigReadWriteLockUnlockForRead();
  }
  uint64_t v93 = v88;
  CMTimeFlags v132 = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 12);
  UpTimeNanoCMTime seconds = FigGetUpTimeNanoseconds();
  uint64_t v95 = *(void *)(v87 + 280);
  CMTime time1 = *(CMTime *)(v87 + 160);
  time.CMTimeValue value = v169;
  time.CMTimeScale timescale = v170;
  time.CMTimeFlags flags = v125;
  time.CMTimeEpoch epoch = v122;
  CMTimeSubtract(&v143, &time1, &time);
  double v96 = CMTimeGetSeconds(&v143);
  if (v96 <= 1.0)
  {
    uint64_t v97 = UpTimeNanoseconds;
    BOOL v98 = 0;
  }
  else
  {
    uint64_t v97 = UpTimeNanoseconds;
    if (a5) {
      BOOL v98 = 1;
    }
    else {
      BOOL v98 = v96 > v92 * ((double)(UpTimeNanoseconds - v95) / 1000000000.0);
    }
  }
  uint64_t v134 = (_OWORD *)(v87 + 160);
  if (!*(void *)(CMBaseObjectGetDerivedStorage() + 360))
  {
    time1.CMTimeValue value = 0;
    if (!*(void *)(CMBaseObjectGetDerivedStorage() + 368)) {
      goto LABEL_255;
    }
    CFStringRef v112 = (const void *)pap_copyPrimaryPlayer();
    if (!v112) {
      goto LABEL_242;
    }
    uint64_t v113 = CMBaseObjectGetDerivedStorage();
    playqueue_copyCurrentClientPlayQueueItemAndCurrentMediaControlPlayListItem(*(void *)(v113 + 32), (unint64_t)&time1, 0);
    if (!time1.value)
    {
      unsigned int v116 = 0;
LABEL_246:
      CFRelease(v112);
LABEL_247:
      if (v116)
      {
        int isInterstitialEventIDRestrictedForSkip = playerairplay_isInterstitialEventIDRestrictedForSkip((int)v130, v116);
        CFRelease(v116);
        CMTimeFlags v118 = v132;
        if (isInterstitialEventIDRestrictedForSkip)
        {
          a1 = v129;
          if (v127 || !v98 || (v125 & 1) == 0)
          {
            uint64_t v99 = v97;
          }
          else
          {
            uint64_t v99 = v97;
            if (*(unsigned char *)(v87 + 172))
            {
              time1.CMTimeValue value = v149;
              time1.CMTimeScale timescale = v150;
              time1.CMTimeFlags flags = v125;
              time1.CMTimeEpoch epoch = v122;
              *(_OWORD *)&time.CMTimeValue value = *v134;
              time.CMTimeEpoch epoch = *(void *)(v87 + 176);
              if (CMTimeCompare(&time1, &time) < 0)
              {
                CMTimeValue v173 = v149;
                CMTimeScale v174 = v150;
                CMTimeFlags v118 = v125;
                CMTimeEpoch v123 = v122;
              }
            }
          }
          if (v86 != Rate && *(float *)(v93 + 48) > 1.0)
          {
            time1.CMTimeValue value = 0;
            CMTimeValue v173 = v149;
            CMTimeScale v174 = v150;
            *(_DWORD *)(v93 + 48) = 1065353216;
            FPSupport_CreateSetRateOptions((const __CFAllocator *)*MEMORY[0x1E4F1CF80], 40, (CFMutableDictionaryRef *)&time1);
            playerairplay_postPlayerRateDidChangeNotification(v130, time1.value);
            playerairplay_setRateAirPlay(v130, 0, MEMORY[0x1E4F1F9F8], MEMORY[0x1E4F1F9F8], (const void *)time1.value);
            if (time1.value) {
              CFRelease((CFTypeRef)time1.value);
            }
            CMTimeFlags v118 = v125;
            CMTimeEpoch v123 = v122;
          }
        }
        else
        {
          a1 = v129;
          uint64_t v99 = v97;
        }
        goto LABEL_257;
      }
      a1 = v129;
      goto LABEL_255;
    }
    uint64_t v114 = CMBaseObjectGetDerivedStorage();
    unsigned int v115 = *(const void **)(v114 + 784);
    if (v115 && !CFEqual(v115, &stru_1EE53F4B8))
    {
      unsigned int v116 = *(const void **)(v114 + 784);
      if (v116) {
        CFRetain(*(CFTypeRef *)(v114 + 784));
      }
    }
    else
    {
LABEL_242:
      unsigned int v116 = 0;
    }
    if (time1.value) {
      CFRelease((CFTypeRef)time1.value);
    }
    if (!v112) {
      goto LABEL_247;
    }
    goto LABEL_246;
  }
  if (v127 || !v98)
  {
LABEL_255:
    uint64_t v99 = v97;
    goto LABEL_256;
  }
  uint64_t v99 = v97;
  if (v125 & 1) != 0 && (*(unsigned char *)(v87 + 172))
  {
    time1.CMTimeValue value = v169;
    time1.CMTimeScale timescale = v170;
    time1.CMTimeFlags flags = v125;
    time1.CMTimeEpoch epoch = v122;
    *(_OWORD *)&time.CMTimeValue value = *v134;
    time.CMTimeEpoch epoch = *(void *)(v87 + 176);
    if (CMTimeCompare(&time1, &time) < 0)
    {
      CMTimeValue v171 = v169;
      CMTimeScale v172 = v170;
      *(_OWORD *)&v142.CMTimeValue value = *v134;
      v142.CMTimeEpoch epoch = *(void *)(v87 + 176);
      CFArrayRef v100 = *(const __CFArray **)(v87 + 808);
      if (v100)
      {
        CFIndex v101 = CFArrayGetCount(v100);
        *(_OWORD *)&time1.CMTimeValue value = v128;
        time1.CMTimeEpoch epoch = v123;
        CMTimeValue v176 = v89;
        CMTimeScale timescale = v90;
        if (v101 >= 1)
        {
          CFIndex v102 = v101;
          uint64_t v103 = 0;
          CFIndex v104 = 0;
          CMTimeEpoch v105 = v123;
          CMTimeFlags v106 = v132;
          do
          {
            CFDictionaryRef v107 = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v87 + 808), v104);
            CFTypeRef cf = 0;
            if (!FigPlayerInterstitialEventCreateFromDictionary(0, v107, (uint64_t *)&cf))
            {
              unsigned __int8 Restrictions = FigPlayerInterstitialEventGetRestrictions((uint64_t)cf);
              CFTypeRef v109 = cf;
              if (Restrictions)
              {
                memset(&time, 0, sizeof(time));
                itemairplay_getInterstitialEventTimeForItem(v87, (uint64_t)cf, (uint64_t)&time);
                rhs.CMTimeValue value = v171;
                rhs.CMTimeScale timescale = v172;
                rhs.CMTimeFlags flags = v125;
                rhs.CMTimeEpoch epoch = v122;
                CMTime lhs = time;
                if (CMTimeCompare(&rhs, &lhs) <= 0
                  && (rhs = time, CMTime lhs = v142, CMTimeCompare(&rhs, &lhs) < 0)
                  && (rhs = time, CMTime lhs = time1, CMTimeCompare(&rhs, &lhs)))
                {
                  CFTypeRef v110 = cf;
                  if (cf) {
                    CFRetain(cf);
                  }
                  if (v103) {
                    CFRelease(v103);
                  }
                  CMTime time1 = time;
                }
                else
                {
                  CFTypeRef v110 = v103;
                }
                CFTypeRef v109 = cf;
                uint64_t v103 = v110;
              }
              unsigned int v111 = FigPlayerInterstitialEventCopyIdentifier((uint64_t)v109);
              if (FigCFEqual())
              {
                itemairplay_getInterstitialEventTimeForItem(v87, (uint64_t)cf, (uint64_t)&time);
                CMTimeValue v176 = time.value;
                CMTimeFlags v106 = time.flags;
                CMTimeScale timescale = time.timescale;
                CMTimeEpoch v105 = time.epoch;
              }
              if (cf) {
                CFRelease(cf);
              }
              if (v111) {
                CFRelease(v111);
              }
              a1 = v129;
            }
            ++v104;
          }
          while (v102 != v104);
          if (v103)
          {
            if ((v106 & 1) == 0) {
              goto LABEL_274;
            }
            time.CMTimeValue value = v176;
            time.CMTimeScale timescale = timescale;
            time.CMTimeFlags flags = v106;
            time.CMTimeEpoch epoch = v105;
            CMTime rhs = time1;
            CMTimeSubtract(&v145, &time, &rhs);
            CMTimeAbsoluteValue(&type, &v145);
            CMTimeMake(&time2, 1, 1000);
            if ((CMTimeCompare(&type, &time2) & 0x80000000) == 0)
            {
LABEL_274:
              memset(&time1, 0, sizeof(time1));
              itemairplay_getInterstitialEventTimeForItem(v87, (uint64_t)v103, (uint64_t)&time1);
              CMTimeMake(&rhs, 2, 1);
              CMTime lhs = time1;
              CMTimeSubtract(&time, &lhs, &rhs);
              CMTimeValue v173 = time.value;
              CMTimeFlags v118 = time.flags;
              CMTimeScale v174 = time.timescale;
              CMTimeEpoch v123 = time.epoch;
              CFRelease(v103);
              goto LABEL_257;
            }
            CFRelease(v103);
          }
        }
      }
    }
  }
LABEL_256:
  CMTimeFlags v118 = v132;
LABEL_257:
  if (v118)
  {
    time1.CMTimeValue value = v173;
    time1.CMTimeScale timescale = v174;
    time1.CMTimeFlags flags = v118;
    time1.CMTimeEpoch epoch = v123;
    itemairplay_airplaySetCurrentTime(a1, &time1, 240, 0, 0, 0);
  }
  if (v96 >= 0.0) {
    uint64_t v119 = v99;
  }
  else {
    uint64_t v119 = 0;
  }
  *(void *)(v87 + 280) = v119;
  return FigReadWriteLockUnlockForRead();
}

void pap_PlaybackSessionFreeSeekCompletionContext(CFTypeRef *a1)
{
  CFTypeRef v2 = a1[7];
  if (v2) {
    CFRelease(v2);
  }
  CFTypeRef v3 = a1[1];
  if (v3) {
    CFRelease(v3);
  }
  CFTypeRef v4 = a1[2];
  if (v4) {
    CFRelease(v4);
  }
  if (*a1) {
    CFRelease(*a1);
  }

  free(a1);
}

uint64_t pap_FigCFDictionaryGetBooleanIfPresent(uint64_t result, const void *a2, unsigned char *a3)
{
  CMTimeValue value = 0;
  if (result)
  {
    CFDictionaryRef v5 = (const __CFDictionary *)result;
    CFTypeID v6 = CFGetTypeID((CFTypeRef)result);
    if (v6 == CFDictionaryGetTypeID() && a2 && a3)
    {
      uint64_t result = CFDictionaryGetValueIfPresent(v5, a2, (const void **)&value);
      if (!result) {
        return result;
      }
      CFTypeID TypeID = CFBooleanGetTypeID();
      if (TypeID == CFGetTypeID(value))
      {
        *a3 = CFBooleanGetValue((CFBooleanRef)value);
        return 1;
      }
      CFTypeID v8 = CFNumberGetTypeID();
      if (v8 == CFGetTypeID(value) && !CFNumberIsFloatType((CFNumberRef)value))
      {
        uint64_t v9 = 0;
        CFNumberGetValue((CFNumberRef)value, kCFNumberSInt64Type, &v9);
        *a3 = v9 != 0;
        return 1;
      }
    }
    else
    {
      FigSignalErrorAt();
    }
    return 0;
  }
  return result;
}

uint64_t itemairplay_airplaySetCurrentTime(const void *a1, CMTime *a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v11 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  uint64_t v12 = (float *)CMBaseObjectGetDerivedStorage();
  if (!v12 || (CFDictionaryRef v13 = v12, *(unsigned char *)v12))
  {
    uint64_t v33 = FigSignalErrorAt();
    if (!v11) {
      return v33;
    }
    goto LABEL_51;
  }
  if (dword_1E93510E8)
  {
    int v45 = v12;
    unsigned int v51 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    CFDictionaryRef v13 = v45;
  }
  uint64_t v15 = *(unsigned int *)(DerivedStorage + 144);
  if (v15 && v15 != a5)
  {
    CMTime time = *a2;
    itemairplay_sendSeekToTimeNotification(a1, v15, 0, 1);
    *(_DWORD *)(DerivedStorage + 144) = 0;
  }
  if (!a5)
  {
    a5 = *(unsigned int *)(DerivedStorage + 864);
    *(_DWORD *)(DerivedStorage + 864) = FPSupport_IncrementSeekID(*(_DWORD *)(DerivedStorage + 864));
  }
  if (pap_AirPlayState(v11) - 14 > 2)
  {
    long long v31 = *(_OWORD *)&a2->value;
    *(void *)(DerivedStorage + 136) = a2->epoch;
    *(_OWORD *)(DerivedStorage + 120) = v31;
    *(_DWORD *)(DerivedStorage + 144) = a5;
    *(unsigned char *)(DerivedStorage + 157) = 0;
    CMTime time = *a2;
    itemairplay_setRememberedTimeAndDefaultFlag((uint64_t)a1, (uint64_t)&time);
    *(_DWORD *)(DerivedStorage + 188) = a3 & 0xF;
    itemairplay_postItemNotification(a1, @"TimeJumped", 0);
    if (dword_1E93510E8)
    {
      unsigned int v51 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      int v32 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (a4)
    {
      CMTime time = *a2;
      itemairplay_sendSeekToTimeNotification(a1, a5, a6, 0);
    }
    goto LABEL_50;
  }
  uint64_t v16 = *MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v46 = v16;
  CFArrayRef MutableCopy = (const void *)FigCFDictionaryCreateMutableCopy();
  FigReadWriteLockLockForRead();
  *(_DWORD *)(DerivedStorage + 144) = a5;
  if (!*(unsigned char *)(DerivedStorage + 72)
    && !*(unsigned char *)(DerivedStorage + 733)
    && *(void *)(CMBaseObjectGetDerivedStorage() + 360))
  {
    long long v19 = *(_OWORD *)&a2->value;
    *(void *)(DerivedStorage + 136) = a2->epoch;
    *(_OWORD *)(DerivedStorage + 120) = v19;
    *(unsigned char *)(DerivedStorage + 157) = 1;
    CMTime time = *a2;
    itemairplay_setRememberedTimeAndDefaultFlag((uint64_t)a1, (uint64_t)&time);
    LODWORD(a5) = 0;
  }
  FigReadWriteLockUnlockForRead();
  CMTime time = *a2;
  FigCFDictionarySetCMTime();
  FigCFDictionarySetValue();
  FigCFDictionarySetInt32();
  if (a3) {
    FigCFDictionarySetInt32();
  }
  FigCFDictionarySetValue();
  if (Mutable)
  {
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 344));
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(DerivedStorage + 336), @"SetPosition", Mutable);
    MEMORY[0x19970E930](*(void *)(DerivedStorage + 344));
    playerairplay_triggerAsyncCheckAndUpdatePlayQueueItems(v11);
    CFRelease(Mutable);
  }
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  if (v13[12] == 0.0 && *((void *)v13 + 21))
  {
    uint64_t v20 = v13;
    time.CMTimeValue value = 0;
    uint64_t v21 = CMBaseObjectGetDerivedStorage();
    if (v21)
    {
      uint64_t v22 = v21;
      FigReadWriteLockLockForRead();
      if (!*(unsigned char *)(v22 + 72))
      {
        CFURLRef v35 = *(const __CFURL **)(v22 + 88);
        if (v35)
        {
          if (pap_isLocalFileURL(v35, 0))
          {
            uint64_t FigBaseObject = FigPlaybackItemGetFigBaseObject(a1);
            uint64_t v37 = *(void *)(CMBaseObjectGetVTable() + 8);
            uint64_t v38 = v37 ? v37 : 0;
            uint64_t v39 = *(void (**)(uint64_t, __CFString *, uint64_t, CMTime *))(v38 + 48);
            if (v39)
            {
              v39(FigBaseObject, @"CPEProtector", v46, &time);
              CMTimeValue value = time.value;
              if (time.value)
              {
                *(void *)CFBooleanRef BOOLean = 0;
                uint64_t v41 = *(void *)(CMBaseObjectGetVTable() + 8);
                if (v41) {
                  uint64_t v42 = v41;
                }
                else {
                  uint64_t v42 = 0;
                }
                uint64_t v43 = *(void (**)(CMTimeValue, __CFString *, uint64_t, unsigned char *))(v42 + 48);
                if (v43)
                {
                  v43(value, @"IsRental", v46, BOOLean);
                  if (*(void *)BOOLean)
                  {
                    int v44 = CFBooleanGetValue(*(CFBooleanRef *)BOOLean);
                    CFRelease(*(CFTypeRef *)BOOLean);
                    CFRelease((CFTypeRef)time.value);
                    FigReadWriteLockUnlockForRead();
                    if (v44) {
                      goto LABEL_32;
                    }
                    goto LABEL_26;
                  }
                }
                CFRelease((CFTypeRef)time.value);
              }
            }
          }
        }
      }
      FigReadWriteLockUnlockForRead();
    }
LABEL_26:
    if (!*((unsigned char *)v20 + 42))
    {
      MEMORY[0x19970E910](*((void *)v20 + 23));
      CMTimeEpoch epoch = a2->epoch;
      *((_OWORD *)v20 + 12) = *(_OWORD *)&a2->value;
      *((void *)v20 + 26) = epoch;
      MEMORY[0x19970E930](*((void *)v20 + 23));
      if (v11) {
        CFRetain(v11);
      }
      if (a1) {
        CFRetain(a1);
      }
      unsigned int v24 = *((void *)v20 + 22);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = __itemairplay_airplaySetCurrentTime_block_invoke;
      block[3] = &__block_descriptor_56_e5_v8__0l;
      block[4] = v20;
      void block[5] = a1;
      void block[6] = v11;
      dispatch_async(v24, block);
    }
  }
LABEL_32:
  if (dword_1E93510E8)
  {
    unsigned int v51 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    char v25 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v26 = v51;
    if (os_log_type_enabled(v25, type)) {
      unsigned int v27 = v26;
    }
    else {
      unsigned int v27 = v26 & 0xFFFFFFFE;
    }
    if (!v27)
    {
LABEL_46:
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      uint64_t v33 = 0;
      if (!v11) {
        return v33;
      }
      goto LABEL_51;
    }
    int v28 = a5;
    if (v11)
    {
      int v29 = (const char *)(CMBaseObjectGetDerivedStorage() + 450);
      if (a1)
      {
LABEL_39:
        float v30 = (const char *)(CMBaseObjectGetDerivedStorage() + 868);
LABEL_45:
        *(_DWORD *)CFBooleanRef BOOLean = 136316418;
        *(void *)&BOOLean[4] = "itemairplay_airplaySetCurrentTime";
        __int16 v53 = 2048;
        unsigned int v54 = v11;
        __int16 v55 = 2048;
        CFDictionaryRef v56 = a1;
        __int16 v57 = 2082;
        unsigned int v58 = v29;
        __int16 v59 = 2082;
        unsigned int v60 = v30;
        __int16 v61 = 1024;
        LODWORD(v62) = v28;
        _os_log_send_and_compose_impl();
        goto LABEL_46;
      }
    }
    else
    {
      int v29 = "";
      if (a1) {
        goto LABEL_39;
      }
    }
    float v30 = "";
    goto LABEL_45;
  }
LABEL_50:
  uint64_t v33 = 0;
  if (v11) {
LABEL_51:
  }
    CFRelease(v11);
  return v33;
}

void playerairplay_updatePlayerRateToMatch(const void *a1, uint64_t a2, float a3)
{
  cf[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)DerivedStorage)
  {
    uint64_t v7 = DerivedStorage;
    float v8 = *(float *)(DerivedStorage + 48);
    if (v8 == a3)
    {
      CFMutableDictionaryRef Mutable = 0;
    }
    else
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      FigCFDictionarySetFloat32();
      playerairplay_postPlayerNotification(a1, @"Remote_RateWillChangeTo", Mutable);
      if (*(unsigned char *)(v7 + 216) && a3 != 0.0)
      {
        if (dword_1E93510E8)
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        FigPlayerAirPlayRoute_SetProperty(*(void *)(v7 + 224), @"AllowBackgroundClientProcessToBeUnsuspended", (const void *)*MEMORY[0x1E4F1CFD0]);
      }
      *(float *)(v7 + 48) = a3;
      playerairplay_postPlayerRateDidChangeNotification(a1, a2);
      if (a3 != 0.0) {
        pap_clearLayerContents(a1);
      }
    }
    int v11 = pap_AirPlayState(a1);
    if (v11 && v11 != 10)
    {
      cf[0] = 0;
      playqueue_copyCurrentClientPlayQueueItemAndCurrentMediaControlPlayListItem(*(void *)(v7 + 32), 0, (unint64_t)cf);
      CMBaseObjectGetDerivedStorage();
      if (v8 != a3) {
        playerairplay_inferPlaybackStateFromAirPlayPlayer(a1, cf[0] != 0);
      }
      if (cf[0])
      {
        uint64_t v12 = CMBaseObjectGetDerivedStorage();
        uint64_t v13 = CMBaseObjectGetDerivedStorage();
        FigReadWriteLockLockForRead();
        if (!*(unsigned char *)(v13 + 72))
        {
          uint64_t v14 = *(OpaqueCMTimebase **)(v13 + 576);
          if (v14)
          {
            double v15 = 0.0;
            if (*(_DWORD *)(v12 + 76) == 4) {
              double v15 = *(float *)(v12 + 48);
            }
            CMTimebaseSetRate(v14, v15);
          }
        }
        FigReadWriteLockUnlockForRead();
        itemairplay_NotifyReachedTimeToPauseBufferingIfFF(a1, cf[0]);
        if (cf[0]) {
          CFRelease(cf[0]);
        }
      }
    }
    if (Mutable) {
      CFRelease(Mutable);
    }
  }
}

BOOL playerairplay_ignoreRemoteRateUpdate(const void *a1, uint64_t a2, float a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2) {
    HasAirPlayReachedTimeToPausePlaybacCFIndex k = pap_HasAirPlayReachedTimeToPausePlayback(a1);
  }
  else {
    HasAirPlayReachedTimeToPausePlaybacCFIndex k = 0;
  }
  if (*(unsigned char *)(DerivedStorage + 56)) {
    HasAirPlayReachedTimeToPausePlaybacCFIndex k = 1;
  }
  return a3 == 0.0 && HasAirPlayReachedTimeToPausePlayback;
}

uint64_t playerairplay_isAPVSupportedForCoordinatedPlayback()
{
  CMBaseObjectGetDerivedStorage();
  uint64_t result = _os_feature_enabled_impl();
  if (result)
  {
    FigCFDictionaryGetBooleanIfPresent();
    return 0;
  }
  return result;
}

BOOL pap_HasAirPlayReachedTimeToPausePlayback(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if ((*(unsigned char *)(DerivedStorage + 532) & 1) == 0) {
    return 0;
  }
  uint64_t v4 = DerivedStorage;
  BOOL result = playerairplay_getIsAirplayVideoActive(a1);
  if (result)
  {
    CMTimebaseGetTime(&time1, *(CMTimebaseRef *)(v4 + 576));
    CMTime v5 = *(CMTime *)(v4 + 520);
    return CMTimeCompare(&time1, &v5) >= 0;
  }
  return result;
}

void pap_HandleAirPlayReachedTimeToPausePlayback(const void *a1, const void *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (a1 && a2)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    uint64_t v5 = CMBaseObjectGetDerivedStorage();
    uint64_t v6 = v5;
    if (!*(unsigned char *)(DerivedStorage + 56) && (*(unsigned char *)(v5 + 532) & 1) != 0)
    {
      float v8 = (CMTime *)(v5 + 520);
      int v9 = *(_DWORD *)(DerivedStorage + 48);
      *(_DWORD *)(DerivedStorage + 48) = 0;
      *(unsigned char *)(DerivedStorage + 56) = 1;
      playerairplay_setRateAirPlay(a1, 0, MEMORY[0x1E4F1F9F8], MEMORY[0x1E4F1F9F8], 0);
      *(_DWORD *)(DerivedStorage + 48) = v9;
      playerairplay_inferPlaybackStateFromAirPlayPlayer(a1, 1);
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CMTime time = *v8;
      FigCFDictionarySetCMTime();
      itemairplay_postItemNotification(a2, @"ReachedTimeToPausePlayback", Mutable);
      CMTimebaseSetRate(*(CMTimebaseRef *)(v6 + 576), 0.0);
      int v11 = *(OpaqueCMTimebase **)(v6 + 576);
      CMTime time = *v8;
      CMTimebaseSetTime(v11, &time);
      if (dword_1E93510E8)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (Mutable) {
        CFRelease(Mutable);
      }
    }
    else if (dword_1E93510E8)
    {
      uint64_t v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
}

uint64_t playerairplay_mediaControlHandlePlaybackLikelyToKeepUp(const void *a1, const void *a2, int a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v7 = CMBaseObjectGetDerivedStorage();
  FigReadWriteLockLockForRead();
  if (!*(unsigned char *)(v7 + 72) && *(unsigned __int8 *)(v7 + 611) != a3)
  {
    *(unsigned char *)(v7 + 611) = a3;
    if (a3)
    {
      itemairplay_postItemNotification(a2, @"StreamLikelyToKeepUp", 0);
      if (dword_1E93510E8)
      {
        LODWORD(cf) = 0;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (*(unsigned char *)(DerivedStorage + 356))
      {
        CFTypeRef cf = 0;
        MEMORY[0x19970E910](*(void *)(v7 + 592));
        int v10 = *(const void **)(v7 + 584);
        if (v10) {
          int v11 = (OpaqueCMTimebase *)CFRetain(v10);
        }
        else {
          int v11 = 0;
        }
        MEMORY[0x19970E930](*(void *)(v7 + 592));
        FPSupport_CreateSetRateOptions((const __CFAllocator *)*MEMORY[0x1E4F1CF80], 20, (CFMutableDictionaryRef *)&cf);
        *(unsigned char *)(DerivedStorage + 356) = 0;
        if (v11 && *(unsigned char *)(DerivedStorage + 448))
        {
          float Rate = CMTimebaseGetRate(v11);
          *(float *)(DerivedStorage + 48) = Rate;
          CMTimebaseGetTime(&v18, v11);
          *(CMTime *)(DerivedStorage + 332) = v18;
          CMClockRef HostTimeClock = CMClockGetHostTimeClock();
          CMTime time = *(CMTime *)(DerivedStorage + 332);
          CMSyncConvertTime(&v18, &time, v11, HostTimeClock);
          *(CMTime *)(DerivedStorage + 308) = v18;
        }
        playerairplay_postPlayerRateDidChangeNotification(a1, (uint64_t)cf);
        CMTime v18 = *(CMTime *)(DerivedStorage + 332);
        CMTime time = *(CMTime *)(DerivedStorage + 308);
        playerairplay_setRateAirPlay(a1, 1, (uint64_t)&v18, (uint64_t)&time, cf);
        if (cf) {
          CFRelease(cf);
        }
        if (v11) {
          CFRelease(v11);
        }
      }
    }
    else
    {
      itemairplay_postItemNotification(a2, @"StreamUnlikelyToKeepUp", 0);
      if (dword_1E93510E8)
      {
        LODWORD(cf) = 0;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        int v9 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    itemairplay_controlPlaybackActivityTimer((uint64_t)a2, 2);
  }
  return FigReadWriteLockUnlockForRead();
}

uint64_t itemairplay_isRangeArraysDifferent(CFArrayRef theArray, const __CFArray *a2)
{
  if (!theArray)
  {
    CFIndex Count = 0;
    if (a2) {
      goto LABEL_3;
    }
LABEL_5:
    CFIndex v5 = 0;
    goto LABEL_6;
  }
  CFIndex Count = CFArrayGetCount(theArray);
  if (!a2) {
    goto LABEL_5;
  }
LABEL_3:
  CFIndex v5 = CFArrayGetCount(a2);
LABEL_6:
  if (theArray == a2) {
    return 0;
  }
  uint64_t result = 1;
  if (!theArray || !a2 || Count != v5) {
    return result;
  }
  if (Count < 1) {
    return 0;
  }
  CFIndex v7 = 0;
  float v8 = (const void *)*MEMORY[0x1E4F20C38];
  int v9 = (const void *)*MEMORY[0x1E4F20C30];
  while (1)
  {
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v7);
    if (Count == v7) {
      break;
    }
    CFDictionaryRef v11 = ValueAtIndex;
    CFDictionaryRef v12 = (const __CFDictionary *)CFArrayGetValueAtIndex(a2, v7);
    uint64_t result = 1;
    if (!v11) {
      return result;
    }
    if (!v12) {
      return result;
    }
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v11, v8);
    CFDictionaryRef v14 = (const __CFDictionary *)CFDictionaryGetValue(v12, v8);
    uint64_t result = 1;
    if (!Value || !v14) {
      return result;
    }
    CMTimeMakeFromDictionary(&time1, Value);
    CMTimeMakeFromDictionary(&time2, v14);
    if (CMTimeCompare(&time1, &time2)) {
      break;
    }
    CFDictionaryRef v15 = (const __CFDictionary *)CFDictionaryGetValue(v11, v9);
    CFDictionaryRef v16 = (const __CFDictionary *)CFDictionaryGetValue(v12, v9);
    uint64_t result = 1;
    if (!v15 || !v16) {
      return result;
    }
    CMTimeMakeFromDictionary(&v18, v15);
    CMTimeMakeFromDictionary(&v17, v16);
    if (CMTimeCompare(&v18, &v17)) {
      break;
    }
    if (Count == ++v7) {
      return 0;
    }
  }
  return 1;
}

uint64_t playerairplay_mediaControlHandleStallCountChanged(uint64_t a1, const void *a2, int a3)
{
  CMBaseObjectGetDerivedStorage();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigReadWriteLockLockForRead();
  if (!*(unsigned char *)(DerivedStorage + 72) && *(_DWORD *)(DerivedStorage + 632) < a3)
  {
    *(_DWORD *)(DerivedStorage + 632) = a3;
    itemairplay_postItemNotification(a2, @"PlaybackStalled", 0);
    if (dword_1E93510E8)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  return FigReadWriteLockUnlockForRead();
}

uint64_t itemairplay_setPositionCompletionHandler(const void *a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (result)
  {
    uint64_t v11 = result;
    FigReadWriteLockLockForRead();
    if (!*(unsigned char *)(v11 + 72))
    {
      if (!a2) {
        itemairplay_postItemNotification(a1, @"TimeJumped", 0);
      }
      if (a3) {
        itemairplay_sendSeekToTimeNotification(a1, a4, a5, 0);
      }
    }
    return FigReadWriteLockUnlockForRead();
  }
  return result;
}

void pap_UpdateAirPlayReachedTimeToPausePlayback(const void *a1, CMTime *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (CMTime *)(CMBaseObjectGetDerivedStorage() + 520);
  CMTime time1 = *a2;
  CMTime time2 = *v4;
  if (CMTimeCompare(&time1, &time2))
  {
    if (dword_1E93510E8)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    long long v6 = *(_OWORD *)&a2->value;
    v4->CMTimeEpoch epoch = a2->epoch;
    *(_OWORD *)&v4->CMTimeValue value = v6;
    itemairplay_postItemNotification(a1, @"SnappedTimeToPausePlayback", 0);
  }
}

void playerairplay_shutdownAirPlayVideoPlaybackDueToServer(const void *a1)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  CFTypeRef v15 = 0;
  if (!*DerivedStorage)
  {
    CFTypeRef v3 = DerivedStorage;
    int v4 = pap_AirPlayState(a1);
    if (v4)
    {
      if (v4 != 10)
      {
        cf[0] = 0;
        FPSupport_CreateSetRateOptions((const __CFAllocator *)*MEMORY[0x1E4F1CF80], 27, (CFMutableDictionaryRef *)cf);
        playerairplay_updatePlayerRateToMatch(a1, (uint64_t)cf[0], 0.0);
        if (cf[0]) {
          CFRelease(cf[0]);
        }
        if (pap_AirPlayState(a1) - 14 <= 2)
        {
          playqueue_copyCurrentClientPlayQueueItemAndCurrentMediaControlPlayListItem(*((void *)v3 + 4), 0, (unint64_t)&v15);
          uint64_t v5 = CMBaseObjectGetDerivedStorage();
          if (v15)
          {
            uint64_t v6 = v5;
            FigReadWriteLockLockForRead();
            if (!*(unsigned char *)(v6 + 72))
            {
              *(_OWORD *)CFTypeRef cf = *MEMORY[0x1E4F1F9F8];
              uint64_t v14 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
              CFTypeRef v7 = v15;
              uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v8) {
                uint64_t v9 = v8;
              }
              else {
                uint64_t v9 = 0;
              }
              int v10 = *(void (**)(CFTypeRef, CFTypeRef *))(v9 + 32);
              if (v10) {
                v10(v7, cf);
              }
              long long v11 = *(_OWORD *)cf;
              uint64_t v12 = v14;
              itemairplay_setRememberedTimeAndDefaultFlag((uint64_t)v15, (uint64_t)&v11);
              itemairplay_controlPlaybackActivityTimer((uint64_t)v15, 0);
              CMTimebaseSetRate(*(CMTimebaseRef *)(v6 + 576), 0.0);
            }
            FigReadWriteLockUnlockForRead();
          }
          playerairplay_removeAndCleanupQueuedItemsOnAirPlayController();
          pap_invalidateEndpointPlaybackSession(a1);
        }
        playerairplay_resetAirPlayVideoState(a1);
        playerairplay_updateAirPlayVideoIsActiveProperty(a1);
        playerairplay_postPlayerNotification(a1, @"IsAirPlayVideoActiveDidChange", 0);
        if (v3[45]) {
          FigPlayerAirPlayRoute_ResumeAirPlayScreen(*((void *)v3 + 28));
        }
        if (v15) {
          CFRelease(v15);
        }
      }
    }
  }
}

void itemairplay_sendSeekToTimeNotification(const void *a1, uint64_t a2, uint64_t a3, int a4)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  FigCFDictionarySetInt32();
  FigCFDictionarySetValueFromKeyInDict();
  FigCFDictionarySetValueFromKeyInDict();
  FigCFDictionarySetCMTime();
  CFTypeRef v7 = (const void **)&kFigPlaybackItemNotification_SeekWasCanceled;
  if (!a4) {
    CFTypeRef v7 = (const void **)&kFigPlaybackItemNotification_SeekDidComplete;
  }
  itemairplay_postItemNotification(a1, *v7, Mutable);
  if (Mutable) {
    CFRelease(Mutable);
  }
}

void __itemairplay_airplaySetCurrentTime_block_invoke(uint64_t a1)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (**(unsigned char **)(a1 + 32)) {
    goto LABEL_41;
  }
  CFTypeRef v2 = *(const void **)(a1 + 40);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CGImageRef image = 0;
  FigReadWriteLockLockForRead();
  if (!*(unsigned char *)(DerivedStorage + 72))
  {
    int v4 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    uint64_t v5 = CMBaseObjectGetDerivedStorage();
    if (v5)
    {
      uint64_t v6 = v5;
      if (!*(unsigned char *)v5 && *(float *)(v5 + 48) == 0.0)
      {
        if (*(void *)(v5 + 168))
        {
          MEMORY[0x19970E910](*(void *)(v5 + 184));
          CMTimeValue v27 = *(void *)(v6 + 192);
          CMTimeFlags v7 = *(_DWORD *)(v6 + 204);
          CMTimeScale v28 = *(_DWORD *)(v6 + 200);
          CMTimeEpoch v8 = *(void *)(v6 + 208);
          MEMORY[0x19970E930](*(void *)(v6 + 184));
          if (v7)
          {
            uint64_t v9 = (CFTypeRef *)(DerivedStorage + 32);
            if (*(void *)(DerivedStorage + 32)
              || (CFAllocatorRef v10 = CFGetAllocator(v2),
                  !FigAssetImageGeneratorCreateFromAsset((uint64_t)v10, *(const void **)(DerivedStorage + 16), (void *)(DerivedStorage + 32))))
            {
              if (!*(void *)(DerivedStorage + 40))
              {
                CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                *(void *)(DerivedStorage + 40) = Mutable;
                if (!Mutable)
                {
                  FigSignalErrorAt();
                  if (!v4) {
                    goto LABEL_38;
                  }
                  goto LABEL_37;
                }
                FigCFDictionarySetInt32();
              }
              if (*v9) {
                CFTypeRef v12 = CFRetain(*v9);
              }
              else {
                CFTypeRef v12 = 0;
              }
              uint64_t v13 = *(const void **)(DerivedStorage + 40);
              if (v13) {
                CFTypeRef v14 = CFRetain(v13);
              }
              else {
                CFTypeRef v14 = 0;
              }
              FigReadWriteLockUnlockForRead();
              CFAllocatorRef v15 = CFGetAllocator(v2);
              uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v16) {
                uint64_t v17 = v16;
              }
              else {
                uint64_t v17 = 0;
              }
              CMTime v18 = *(uint64_t (**)(CFTypeRef, CMTime *, CFTypeRef, CFAllocatorRef, CGImageRef *, void))(v17 + 8);
              if (v18)
              {
                time1.CMTimeValue value = v27;
                time1.CMTimeScale timescale = v28;
                time1.CMTimeFlags flags = v7;
                time1.CMTimeEpoch epoch = v8;
                int v19 = v18(v12, &time1, v14, v15, &image, 0);
              }
              else
              {
                int v19 = -12782;
              }
              FigReadWriteLockLockForRead();
              if (v12) {
                CFRelease(v12);
              }
              if (v14) {
                CFRelease(v14);
              }
              if (!v19 && !*(unsigned char *)v6)
              {
                if (image)
                {
                  time1.CMTimeValue value = v27;
                  time1.CMTimeScale timescale = v28;
                  time1.CMTimeFlags flags = v7;
                  time1.CMTimeEpoch epoch = v8;
                  CMTime v24 = *(CMTime *)(v6 + 192);
                  if (!CMTimeCompare(&time1, &v24))
                  {
                    double Width = (double)CGImageGetWidth(image);
                    double Height = (double)CGImageGetHeight(image);
                    [MEMORY[0x1E4F39CF8] begin];
                    if (!pthread_main_np()) {
                      [MEMORY[0x1E4F39CF8] activateBackground:1];
                    }
                    [MEMORY[0x1E4F39CF8] setValue:*MEMORY[0x1E4F1CFD0] forKey:*MEMORY[0x1E4F3A5A8]];
                    objc_msgSend(*(id *)(v6 + 168), "setBounds:", 0.0, 0.0, Width, Height);
                    objc_msgSend(*(id *)(v6 + 168), "setPosition:", Width * 0.5, Height * 0.5);
                    [*(id *)(v6 + 168) setContents:image];
                    [MEMORY[0x1E4F39CF8] commit];
                  }
                }
              }
            }
          }
        }
      }
    }
    if (v4) {
LABEL_37:
    }
      CFRelease(v4);
  }
LABEL_38:
  if (image) {
    CFRelease(image);
  }
  FigReadWriteLockUnlockForRead();
LABEL_41:
  uint64_t v22 = *(const void **)(a1 + 40);
  if (v22) {
    CFRelease(v22);
  }
  uint64_t v23 = *(const void **)(a1 + 48);
  if (v23) {
    CFRelease(v23);
  }
}

BOOL pap_isLocalFileURL(const __CFURL *a1, BOOL *a2)
{
  if (!a1) {
    return 0;
  }
  CFStringRef v3 = CFURLCopyScheme(a1);
  CFStringRef v4 = v3;
  if (!v3 || (BOOL v5 = 1, CFStringCompare(v3, @"file", 1uLL)))
  {
    int IsPersistentURL = FigIsPersistentURL();
    BOOL v5 = IsPersistentURL != 0;
    BOOL v7 = IsPersistentURL != 0;
    if (!a2) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  BOOL v7 = 0;
  if (a2) {
LABEL_5:
  }
    *a2 = v7;
LABEL_6:
  if (v4) {
    CFRelease(v4);
  }
  return v5;
}

void playerairplay_postPlayerRateDidChangeNotification(const void *a1, uint64_t a2)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  FigCFDictionarySetFloat32();
  if (a2)
  {
    FigCFDictionarySetValueFromKeyInDict();
    FigCFDictionarySetValueFromKeyInDict();
    FigCFDictionarySetValueFromKeyInDict();
    FigCFDictionarySetValueFromKeyInDict();
  }
  playerairplay_postPlayerNotification(a1, @"RateDidChange", Mutable);
  if (Mutable)
  {
    CFRelease(Mutable);
  }
}

BOOL playerairplay_getIsAirplayVideoActive(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (pap_AirPlayState(a1) - 14 < 3) {
    return 1;
  }
  int v4 = pap_AirPlayState(a1);
  BOOL result = 0;
  if (v4 && v4 != 10) {
    return *(unsigned char *)(DerivedStorage + 449) && playerairplay_isAPVAllowedByClient() != 0;
  }
  return result;
}

uint64_t playerairplay_isAPVAllowedByClient()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)(DerivedStorage + 40)) {
    return 0;
  }
  if (!*(unsigned char *)(DerivedStorage + 448)) {
    return 1;
  }
  uint64_t result = playerairplay_isAPVSupportedForCoordinatedPlayback();
  if (result) {
    return 1;
  }
  return result;
}

void itemairplay_getInterstitialEventTimeForItem(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  FigPlayerInterstitialEventGetStartTime(a2, a3);
  uint64_t started = FigPlayerInterstitialEventCopyStartDate(a2);
  if (*(unsigned char *)(a3 + 12) & 1) == 0 && *(void *)(a1 + 192) && (*(unsigned char *)(a1 + 172))
  {
    double v7 = MEMORY[0x199707BD0]();
    double v8 = MEMORY[0x199707BD0](started);
    CMTimeMakeWithSeconds(&v12, v8 - v7, 1000000);
    *(_OWORD *)a3 = *(_OWORD *)&v12.value;
    CMTimeEpoch epoch = v12.epoch;
    *(void *)(a3 + 16) = v12.epoch;
    *(_OWORD *)&lhs.CMTimeValue value = *(_OWORD *)a3;
    lhs.CMTimeEpoch epoch = epoch;
    CMTime v10 = *(CMTime *)(a1 + 160);
    CMTimeAdd(&v12, &lhs, &v10);
    *(CMTime *)a3 = v12;
  }
  if (started) {
    CFRelease(started);
  }
}

uint64_t playerairplay_isInterstitialEventIDRestrictedForSkip(int a1, CFTypeRef cf1)
{
  if (!cf1) {
    return 0;
  }
  if (CFEqual(cf1, &stru_1EE53F4B8)) {
    return 0;
  }
  if (!*(void *)(CMBaseObjectGetDerivedStorage() + 368)) {
    return 0;
  }
  uint64_t v3 = pap_copyPrimaryPlayer();
  if (!v3) {
    return 0;
  }
  int v4 = (const void *)v3;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v17 = 0;
  if (CFEqual(cf1, &stru_1EE53F4B8)) {
    goto LABEL_23;
  }
  playqueue_copyCurrentClientPlayQueueItemAndCurrentMediaControlPlayListItem(*(void *)(DerivedStorage + 32), (unint64_t)&v17, 0);
  if (!v17) {
    goto LABEL_23;
  }
  uint64_t v6 = CMBaseObjectGetDerivedStorage();
  CFArrayRef v7 = *(const __CFArray **)(v6 + 808);
  if (v7 && (CFIndex Count = CFArrayGetCount(v7), Count >= 1))
  {
    CFIndex v9 = Count;
    CFIndex v10 = 0;
    while (1)
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v6 + 808), v10);
      CFTypeRef cf = 0;
      CMTime v12 = 0;
      if (!FigPlayerInterstitialEventCreateFromDictionary(0, ValueAtIndex, (uint64_t *)&cf))
      {
        CMTime v12 = FigPlayerInterstitialEventCopyIdentifier((uint64_t)cf);
        if (FigCFEqual()) {
          break;
        }
      }
      if (cf) {
        CFRelease(cf);
      }
      if (v12) {
        CFRelease(v12);
      }
      if (v9 == ++v10) {
        goto LABEL_17;
      }
    }
    CFTypeRef v13 = cf;
    if (v12) {
      CFRelease(v12);
    }
  }
  else
  {
LABEL_17:
    CFTypeRef v13 = 0;
  }
  if (v17) {
    CFRelease(v17);
  }
  if (v13)
  {
    uint64_t v14 = (FigPlayerInterstitialEventGetRestrictions((uint64_t)v13) >> 2) & 1;
    CFRelease(v13);
  }
  else
  {
LABEL_23:
    uint64_t v14 = 0;
  }
  CFRelease(v4);
  return v14;
}

uint64_t pap_copyPrimaryPlayer()
{
  CMBaseObjectGetDerivedStorage();
  if (!*(void *)(CMBaseObjectGetDerivedStorage() + 368)) {
    return 0;
  }

  return FigCFWeakReferenceHolderCopyReferencedObject();
}

void pap_invalidateEndpointPlaybackSession(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  StopAndReleaseTimer((dispatch_object_t *)(DerivedStorage + 488));
  playerairplay_updateShareAndAirPlayEchoMitigation(a1);
  if (*(void *)(DerivedStorage + 280))
  {
    if (*(void *)(CMBaseObjectGetDerivedStorage() + 368))
    {
      uint64_t v3 = (const void *)pap_copyPrimaryPlayer();
      uint64_t v4 = CMBaseObjectGetDerivedStorage();
      if (!v3) {
        goto LABEL_7;
      }
      uint64_t v5 = v4;
      CFBagRemoveValue(*(CFMutableBagRef *)(v4 + 288), *(const void **)(DerivedStorage + 280));
      uint64_t v6 = MEMORY[0x1997078E0](*(void *)(v5 + 288), *(void *)(DerivedStorage + 280));
      CFRelease(v3);
    }
    else
    {
      CFBagRemoveValue(*(CFMutableBagRef *)(DerivedStorage + 288), *(const void **)(DerivedStorage + 280));
      uint64_t v6 = MEMORY[0x1997078E0](*(void *)(DerivedStorage + 288), *(void *)(DerivedStorage + 280));
    }
    if (v6 > 0)
    {
LABEL_18:
      uint64_t v16 = *(const void **)(DerivedStorage + 280);
      if (v16)
      {
        CFRelease(v16);
        *(void *)(DerivedStorage + 280) = 0;
      }
      return;
    }
LABEL_7:
    uint64_t v7 = *(void *)(DerivedStorage + 280);
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    CFIndex v10 = *(void (**)(uint64_t, void, void, void))(v9 + 120);
    if (v10) {
      v10(v7, 0, 0, 0);
    }
    uint64_t CMBaseObject = FigEndpointPlaybackSessionGetCMBaseObject();
    if (CMBaseObject)
    {
      uint64_t v12 = CMBaseObject;
      uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v13) {
        uint64_t v14 = v13;
      }
      else {
        uint64_t v14 = 0;
      }
      CFAllocatorRef v15 = *(void (**)(uint64_t))(v14 + 24);
      if (v15) {
        v15(v12);
      }
    }
    goto LABEL_18;
  }
}

uint64_t playerairplay_resetAirPlayVideoState(const void *a1)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)result)
  {
    uint64_t v3 = result;
    if (!*(void *)(result + 240))
    {
      if (dword_1E93510E8)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      int v9 = 0;
      return pap_setAirPlayState(a1, v9);
    }
    if (pap_DoesCurrentRouteUseScreen(a1))
    {
      if (*(unsigned char *)(v3 + 400)) {
        BOOL v4 = 1;
      }
      else {
        BOOL v4 = gIsiOSDeviceWithMedusaSupport == 0;
      }
      int v5 = v4;
      if (*(unsigned char *)(v3 + 45) && v5)
      {
        if (!dword_1E93510E8)
        {
LABEL_24:
          int v9 = 11;
          return pap_setAirPlayState(a1, v9);
        }
LABEL_13:
        uint64_t v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        goto LABEL_24;
      }
      if (dword_1E93510E8)
      {
LABEL_20:
        uint64_t v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    else
    {
      if (playerairplay_isAPVAllowedByClient())
      {
        if (!dword_1E93510E8) {
          goto LABEL_24;
        }
        goto LABEL_13;
      }
      if (dword_1E93510E8) {
        goto LABEL_20;
      }
    }
    int v9 = 10;
    return pap_setAirPlayState(a1, v9);
  }
  return result;
}

unsigned char *playerairplay_updateAirPlayVideoIsActiveProperty(const void *a1)
{
  uint64_t result = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (result)
  {
    uint64_t v3 = result;
    if (!*result)
    {
      if (pap_AirPlayState(a1) - 14 > 2)
      {
        uint64_t v8 = *((void *)v3 + 28);
        int v5 = (uint64_t *)(v3 + 224);
        int v9 = (const void *)*MEMORY[0x1E4F1CFC8];
        FigPlayerAirPlayRoute_SetProperty(v8, @"AirPlayVideoActive", (const void *)*MEMORY[0x1E4F1CFC8]);
      }
      else
      {
        uint64_t v6 = *((void *)v3 + 28);
        int v5 = (uint64_t *)(v3 + 224);
        uint64_t v4 = v6;
        if (*((unsigned char *)v5 - 182))
        {
          FigPlayerAirPlayRoute_SetProperty(v4, @"AirPlayVideoActive", (const void *)*MEMORY[0x1E4F1CFC8]);
          uint64_t v7 = (const void **)MEMORY[0x1E4F1CFD0];
        }
        else
        {
          FigPlayerAirPlayRoute_SetProperty(v4, @"AirPlayVideoActive", (const void *)*MEMORY[0x1E4F1CFD0]);
          uint64_t v7 = (const void **)MEMORY[0x1E4F1CFC8];
        }
        int v9 = *v7;
      }
      uint64_t v10 = *v5;
      return (unsigned char *)FigPlayerAirPlayRoute_SetProperty(v10, @"VideoForMusicActive", v9);
    }
  }
  return result;
}

unsigned char *playerairplay_updateShareAndAirPlayEchoMitigation(const void *a1)
{
  uint64_t result = (unsigned char *)FigShareAndAirPlayHelperGetShared();
  if (result)
  {
    uint64_t v3 = result;
    uint64_t result = (unsigned char *)CMBaseObjectGetDerivedStorage();
    if (!*result)
    {
      if (result[448]) {
        BOOL v4 = pap_AirPlayState(a1) - 14 < 3
      }
          || (unint64_t)(*(void *)(CMBaseObjectGetDerivedStorage() + 296) != 0);
      else {
        BOOL v4 = 0;
      }
      uint64_t VTable = CMBaseObjectGetVTable();
      uint64_t v7 = *(void *)(VTable + 16);
      uint64_t result = (unsigned char *)(VTable + 16);
      uint64_t v6 = v7;
      uint64_t v8 = v7 ? v6 : 0;
      int v9 = *(uint64_t (**)(unsigned char *, BOOL, const void *))(v8 + 8);
      if (v9)
      {
        return (unsigned char *)v9(v3, v4, a1);
      }
    }
  }
  return result;
}

const char *pap_getDescriptionForAirPlayState(unsigned int a1)
{
  if (a1 > 0x11) {
    return "Unknown";
  }
  else {
    return (&off_1E579D088)[a1];
  }
}

uint64_t pap_DoesCurrentRouteUseScreen(const void *a1)
{
  if (a1) {
    CFTypeRef v1 = CFRetain(a1);
  }
  else {
    CFTypeRef v1 = 0;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t DoesCurrentRouteUseScreen = FigPlayerAirPlayRoute_DoesCurrentRouteUseScreen(*(void *)(DerivedStorage + 224));
  CFRelease(v1);
  return DoesCurrentRouteUseScreen;
}

const void *itemairplay_getiTunesStoreContentType()
{
  uint64_t result = itemairplay_copyiTunesStoreContentInfo();
  if (result)
  {
    CFTypeRef v1 = result;
    uint64_t v2 = itemairplay_getiTunesStoreContentTypeFromInfo(result);
    CFRelease(v1);
    return (const void *)v2;
  }
  return result;
}

BOOL pap_PlaybackSessionGetBooleanPropertySync(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v12 = 0;
  uint64_t v13 = &v12;
  uint64_t v14 = 0x2020000000;
  uint64_t v15 = 0;
  if (a1)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 3221225472;
    _OWORD v11[2] = __pap_PlaybackSessionGetBooleanPropertySync_block_invoke;
    _OWORD v11[3] = &unk_1E5791110;
    v11[5] = DerivedStorage;
    void v11[6] = a3;
    v11[4] = &v12;
    if (a2 == a1)
    {
      __pap_PlaybackSessionGetBooleanPropertySync_block_invoke(v11);
    }
    else
    {
      uint64_t v7 = *(NSObject **)(DerivedStorage + 104);
      v10[0] = MEMORY[0x1E4F143A8];
      v10[1] = 3221225472;
      v10[2] = __pap_PlaybackSessionGetBooleanPropertySync_block_invoke_2;
      v10[3] = &unk_1E579CDB0;
      v10[4] = v11;
      dispatch_sync(v7, v10);
    }
  }
  BOOL v8 = v13[3] == *MEMORY[0x1E4F1CFD0];
  _Block_object_dispose(&v12, 8);
  return v8;
}

void sub_194299EEC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

const void *itemairplay_copyiTunesStoreAlternateContentID()
{
  uint64_t v0 = (const void *)*MEMORY[0x1E4F1D398];
  CFDictionaryRef v1 = (const __CFDictionary *)itemairplay_copyiTunesStoreContentInfo();
  CFDictionaryRef v2 = v1;
  if (v1)
  {
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v1, @"assetOption_iTunesStoreAlternateContentInfo");
    if (Value) {
      uint64_t v0 = CFDictionaryGetValue(Value, @"assetOption_iTunesStoreContentID");
    }
  }
  if (v0) {
    CFRetain(v0);
  }
  if (v2) {
    CFRelease(v2);
  }
  return v0;
}

const void *itemairplay_copyiTunesStoreContentInfo()
{
  CFTypeRef cf = 0;
  uint64_t v0 = *(void *)(CMBaseObjectGetDerivedStorage() + 16);
  if (!v0) {
    return 0;
  }
  uint64_t CMBaseObject = FigAssetGetCMBaseObject(v0);
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 8);
  uint64_t v3 = v2 ? v2 : 0;
  BOOL v4 = *(void (**)(uint64_t, __CFString *, void, CFTypeRef *))(v3 + 48);
  if (!v4) {
    return 0;
  }
  v4(CMBaseObject, @"assetProperty_CreationOptionsDictionary", *MEMORY[0x1E4F1CF80], &cf);
  if (!cf) {
    return 0;
  }
  DictionaryCFDictionaryRef Value = (const void *)FigCFDictionaryGetDictionaryValue();
  uint64_t v6 = DictionaryValue;
  if (DictionaryValue) {
    CFRetain(DictionaryValue);
  }
  if (cf) {
    CFRelease(cf);
  }
  return v6;
}

uint64_t itemairplay_getiTunesStoreContentTypeFromInfo(const void *a1)
{
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (TypeID != CFGetTypeID(a1)) {
    return 0;
  }
  uint64_t result = (uint64_t)CFDictionaryGetValue((CFDictionaryRef)a1, @"assetOption_iTunesStoreContentType");
  if (result)
  {
    BOOL v4 = (const void *)result;
    if (CFEqual((CFTypeRef)result, @"match")) {
      return 2;
    }
    else {
      return CFEqual(v4, @"purchaseHistory") != 0;
    }
  }
  return result;
}

uint64_t FigAssetCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t CMBaseObject = FigAssetGetCMBaseObject(a1);
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v11 = *(void *)(VTable + 8);
  uint64_t result = VTable + 8;
  uint64_t v10 = v11;
  if (v11) {
    uint64_t v12 = v10;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 48);
  if (v13)
  {
    return v13(CMBaseObject, a2, a3, a4);
  }
  return result;
}

void __playerairplay_performQueuedItemVodkaExchange_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  int v6 = *(unsigned __int8 *)(a1 + 56);
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  uint64_t v8 = CMBaseObjectGetDerivedStorage();
  if (!*DerivedStorage)
  {
    uint64_t v9 = v8;
    uint64_t v10 = FigReadWriteLockLockForRead();
    if (!*(unsigned char *)(v9 + 72))
    {
      uint64_t v11 = (void *)MEMORY[0x199711A30](v10);
      uint64_t v12 = (void *)[a2 objectForKey:@"Error"];
      if (v12 && [v12 code])
      {
        if (v6 && pap_isLocalFileURL(*(const __CFURL **)(v9 + 88), 0))
        {
          uint64_t v13 = itemairplay_createCPEProtectorIfAvailable(v5, 0, &v20);
          if (v13)
          {
            uint64_t v14 = (const void *)v13;
            playerairplay_performQueuedItemVodkaExchange(v4, v5, v13, 0);
            CFRelease(v14);
          }
          else
          {
            *(unsigned char *)(v9 + 735) = 1;
          }
        }
        else
        {
          *(unsigned char *)(v9 + 735) = 4;
          *(unsigned char *)(v9 + 739) = 2;
        }
      }
      else
      {
        *(unsigned char *)(v9 + 735) = 3;
        uint64_t v15 = *(const void **)(v9 + 440);
        if (v15)
        {
          CFRelease(v15);
          *(void *)(v9 + 440) = 0;
        }
        uint64_t v16 = (const void *)[a2 objectForKey:@"AirPlayParams"];
        *(void *)(v9 + 440) = v16;
        if (v16) {
          CFRetain(v16);
        }
      }
      playerairplay_triggerAsyncCheckAndUpdatePlayQueueItems(v4);
    }
    FigReadWriteLockUnlockForRead();
  }
  CFTypeRef v17 = *(const void **)(a1 + 32);
  if (v17) {
    CFRelease(v17);
  }
  CMTime v18 = *(const void **)(a1 + 48);
  if (v18) {
    CFRelease(v18);
  }
  int v19 = *(const void **)(a1 + 40);
  if (v19)
  {
    CFRelease(v19);
  }
}

uint64_t itemairplay_setUpPlayParamDictionary(const void *a1, __CFDictionary *a2, const __CFDictionary *a3)
{
  v240[1] = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFDictionaryRef theDict = 0;
  BOOL v217 = 0;
  CFTypeRef v215 = 0;
  CFTypeRef v216 = 0;
  char v214 = 0;
  CFNumberRef number = 0;
  FigReadWriteLockLockForRead();
  if (*(unsigned char *)(DerivedStorage + 72) || !a2)
  {
    uint64_t v27 = FigSignalErrorAt();
    CFURLRef v97 = 0;
    CFURLRef v98 = 0;
    CFStringRef v42 = 0;
    CFTypeRef v206 = 0;
    CFTypeRef v209 = 0;
    CFTypeRef v210 = 0;
    goto LABEL_176;
  }
  uint64_t v7 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  uint64_t v8 = (unsigned char *)CMBaseObjectGetDerivedStorage();
  CFTypeRef v210 = v7;
  if (!v8 || (uint64_t v9 = v8, *v8))
  {
    uint64_t v27 = FigSignalErrorAt();
    CFURLRef v97 = 0;
    CFURLRef v98 = 0;
    CFStringRef v42 = 0;
    CFTypeRef v206 = 0;
    CFTypeRef v209 = 0;
    goto LABEL_176;
  }
  if (v7) {
    CFTypeRef v10 = CFRetain(v7);
  }
  else {
    CFTypeRef v10 = 0;
  }
  CFTypeRef v209 = v10;
  if (!*(void *)(DerivedStorage + 88))
  {
    if (dword_1E93510E8)
    {
      LODWORD(BOOLean) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    itemairplay_postFailNotificationWithError(a1, -17226);
    CFTypeRef v206 = 0;
    CFURLRef v207 = 0;
    CFStringRef v42 = 0;
    CFURLRef v43 = 0;
    CFURLRef v205 = 0;
    goto LABEL_64;
  }
  int v204 = CFEqual(*(CFTypeRef *)(DerivedStorage + 24), @"com.apple.coremedia.assettype.streaming");
  uint64_t v11 = (const __CFURL **)(DerivedStorage + 88);
  BOOL v13 = pap_isLocalFileURL(*(const __CFURL **)(DerivedStorage + 88), &v217) && v204 == 0;
  BOOL v202 = v13;
  CFURLRef v14 = *v11;
  if (*v11 && FigCFURLIsLocalResource() && (CFStringRef v15 = CFURLCopyPathExtension(v14), (v16 = v15) != 0))
  {
    BOOL v200 = CFStringCompare(v15, @"movpkg", 1uLL) == kCFCompareEqualTo;
    CFRelease(v16);
  }
  else
  {
    BOOL v200 = 0;
  }
  uint64_t v17 = CMBaseObjectGetDerivedStorage();
  CMTime v18 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  int v19 = (unsigned char *)CMBaseObjectGetDerivedStorage();
  char v20 = (uint64_t *)MEMORY[0x1E4F20B60];
  if (v19 && !*v19)
  {
    int v21 = CFEqual(*(CFTypeRef *)(v17 + 24), @"com.apple.coremedia.assettype.streaming");
    if (v18)
    {
      CFTypeRef v22 = CFRetain(v18);
      BOOL BooleanPropertySync = pap_PlaybackSessionGetBooleanPropertySync((uint64_t)v22, (uint64_t)v18, *v20);
      if (v22) {
        CFRelease(v22);
      }
    }
    else
    {
      time.CMTimeValue value = 0;
      *(void *)&time.CMTimeScale timescale = &time;
      time.CMTimeEpoch epoch = 0x2020000000;
      v236 = 0;
      BOOL BooleanPropertySync = *MEMORY[0x1E4F1CFD0] == 0;
      _Block_object_dispose(&time, 8);
    }
    char v25 = itemairplay_copyiTunesStoreContentRentalID();
    unsigned int v26 = v25;
    if (!BooleanPropertySync && v25 && v21)
    {
      itemairplay_postFailNotificationWithError(a1, -17220);
      uint64_t v27 = 4294950076;
    }
    else
    {
      uint64_t v27 = 0;
      if (!v25) {
        goto LABEL_34;
      }
    }
    CFRelease(v26);
LABEL_34:
    if (!v18) {
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  uint64_t v27 = FigSignalErrorAt();
  if (v18) {
LABEL_35:
  }
    CFRelease(v18);
LABEL_36:
  if (v27)
  {
    CFTypeRef v206 = 0;
    CFURLRef v207 = 0;
    CFStringRef v42 = 0;
    CFURLRef v43 = 0;
    CFURLRef v205 = 0;
    goto LABEL_312;
  }
  if (pap_PlaybackSessionGetBooleanPropertySync((uint64_t)v209, (uint64_t)v210, *v20))
  {
    BOOL v203 = 0;
    CFTypeRef v206 = 0;
  }
  else
  {
    CFTypeRef v206 = itemairplay_copyiTunesStoreAlternateContentID();
    BOOL v203 = FigCFEqual() == 0;
  }
  uint64_t v28 = *(void *)(DerivedStorage + 16);
  if (v28)
  {
    uint64_t CMBaseObject = FigAssetGetCMBaseObject(v28);
    uint64_t v30 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v31 = v30 ? v30 : 0;
    int v32 = *(void (**)(uint64_t, __CFString *, void, CFDictionaryRef *))(v31 + 48);
    if (v32) {
      v32(CMBaseObject, @"assetProperty_CreationOptionsDictionary", *MEMORY[0x1E4F1CF80], &theDict);
    }
  }
  CFDictionaryAddValue(a2, (const void *)*MEMORY[0x1E4F20A88], *(const void **)(DerivedStorage + 80));
  if (v9[450])
  {
    CFStringRef v33 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v9 + 450, 0x8000100u);
    FigCFDictionarySetValue();
    if (v33) {
      CFRelease(v33);
    }
  }
  if (*(unsigned char *)(DerivedStorage + 868))
  {
    CFStringRef v34 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const char *)(DerivedStorage + 868), 0x8000100u);
    FigCFDictionarySetValue();
    if (v34) {
      CFRelease(v34);
    }
  }
  CFURLRef v35 = *(const void **)(DerivedStorage + 192);
  if (v35)
  {
    if (*(unsigned char *)(DerivedStorage + 224)) {
      CFDictionaryAddValue(a2, (const void *)*MEMORY[0x1E4F20A48], v35);
    }
    else {
      CFDictionaryAddValue(a2, (const void *)*MEMORY[0x1E4F20A40], v35);
    }
  }
  else
  {
    int v36 = *(unsigned __int8 *)(DerivedStorage + 184);
    if (!*(unsigned char *)(DerivedStorage + 184))
    {
      CMTime time = *(CMTime *)(DerivedStorage + 160);
      FigCFDictionarySetCMTime();
      CFAllocatorRef v37 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CMTime time = *(CMTime *)(DerivedStorage + 160);
      CFStringRef v38 = CMTimeCopyDescription(v37, &time);
      if (v38) {
        CFRelease(v38);
      }
    }
    if (pap_PlaybackSessionGetBooleanPropertySync((uint64_t)v209, (uint64_t)v210, *MEMORY[0x1E4F20B58]))
    {
      CMTime time = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
      CMTime valuePtr = *(CMTime *)(DerivedStorage + 160);
      float Seconds = CMTimeGetSeconds(&valuePtr);
      if (Seconds > 0.0)
      {
        uint64_t v40 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v41 = v40 ? v40 : 0;
        int v44 = *(unsigned int (**)(const void *, CMTime *))(v41 + 16);
        if (v44)
        {
          if (!v44(a1, &time))
          {
            CMTime valuePtr = time;
            CMTimeGetSeconds(&valuePtr);
          }
        }
      }
      if (!v36) {
        FigCFDictionarySetFloat32();
      }
    }
  }
  if (a3)
  {
    int64_t Count = CFDictionaryGetCount(a3);
    uint64_t v46 = (const void **)malloc_type_calloc(8uLL, Count, 0x9098F941uLL);
    CFDictionaryGetKeysAndValues(a3, v46, 0);
    if (Count >= 1)
    {
      int v47 = v46;
      do
      {
        CFDictionaryRef Value = CFDictionaryGetValue(a3, *v47);
        CFDictionaryAddValue(a2, *v47++, Value);
        --Count;
      }
      while (Count);
    }
    free(v46);
  }
  if (itemairplay_getiTunesStoreContentType() && !v203)
  {
    unsigned int v49 = CFDictionaryGetValue(theDict, @"assetOption_iTunesStoreContentInfo");
    itemairplay_addiTunesStoreContentInfo(v49, a2);
  }
  if (!*(void *)(DerivedStorage + 720)) {
    playerairplay_isInterstitialEventIDRestrictedForSkip((int)v210, *(CFTypeRef *)(DerivedStorage + 792));
  }
  FigCFDictionarySetInt64();
  unsigned int v50 = *(const void **)(DerivedStorage + 776);
  if (v50) {
    CFDictionaryAddValue(a2, (const void *)*MEMORY[0x1E4F20A60], v50);
  }
  FigCFDictionaryGetBooleanIfPresent();
  if (!v202)
  {
    CFTypeRef cf = 0;
    uint64_t v27 = itemairplay_ensureCustomURLLoader();
    if (v27) {
      goto LABEL_175;
    }
    uint64_t v56 = *(void *)(DerivedStorage + 640);
    if (v56)
    {
      uint64_t v57 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v57) {
        uint64_t v58 = v57;
      }
      else {
        uint64_t v58 = 0;
      }
      __int16 v61 = *(void (**)(uint64_t, void, void, CFNumberRef *))(v58 + 48);
      if (v61) {
        v61(v56, *MEMORY[0x1E4F202D8], *MEMORY[0x1E4F1CF80], &number);
      }
      if (number)
      {
        CFNumberGetValue(number, kCFNumberSInt64Type, (void *)(DerivedStorage + 104));
        FigCFDictionarySetInt64();
      }
    }
    if (!v204)
    {
      CFTypeRef v65 = *(CFTypeRef *)(DerivedStorage + 88);
      if (v65) {
        CFTypeRef v65 = CFRetain(v65);
      }
      CFURLRef v43 = 0;
      CFTypeRef cf = v65;
      goto LABEL_114;
    }
    uint64_t v62 = FigAssetGetCMBaseObject(*(void *)(DerivedStorage + 16));
    uint64_t v63 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v63) {
      uint64_t v64 = v63;
    }
    else {
      uint64_t v64 = 0;
    }
    char v80 = *(uint64_t (**)(uint64_t, __CFString *, void, CFTypeRef *))(v64 + 48);
    if (!v80)
    {
      uint64_t v27 = 4294954514;
      goto LABEL_175;
    }
    int v81 = (void *)*MEMORY[0x1E4F1CF80];
    uint64_t v27 = v80(v62, @"assetProperty_OriginalNetworkContentURL", *MEMORY[0x1E4F1CF80], &cf);
    if (v27)
    {
LABEL_175:
      CFURLRef v97 = 0;
      CFURLRef v98 = 0;
      CFStringRef v42 = 0;
      goto LABEL_176;
    }
    if (!cf) {
      goto LABEL_174;
    }
    CFURLRef v43 = 0;
    if (v200 || !v214)
    {
LABEL_114:
      if (v203 && FigCFDictionaryGetDictionaryValue())
      {
        DictionaryCFDictionaryRef Value = (const void *)FigCFDictionaryGetDictionaryValue();
        itemairplay_addiTunesStoreContentInfo(DictionaryValue, a2);
        CFStringRef v67 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)DictionaryValue, @"assetOption_iTunesStoreAlternateContentInfoAssetURLString");
        CFURLRef v68 = CFURLCreateWithString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v67, 0);
        if (cf) {
          CFRelease(cf);
        }
        CFTypeRef cf = v68;
      }
      CFURLRef v69 = (const __CFURL *)cf;
      if (!cf) {
        goto LABEL_130;
      }
      if (!theDict) {
        goto LABEL_130;
      }
      StringCFDictionaryRef Value = FigCFDictionaryGetStringValue();
      CFURLRef v69 = (const __CFURL *)cf;
      if (!StringValue) {
        goto LABEL_130;
      }
      time.CMTimeValue value = 0;
      uint64_t v27 = FigCFHTTPCreateURLWithQueryParam((const __CFURL *)cf, @"_HLS_primary_id=", StringValue, &time);
      if (!v27)
      {
        CFTypeRef v71 = cf;
        CFTypeRef cf = (CFTypeRef)time.value;
        if (time.value) {
          CFRetain((CFTypeRef)time.value);
        }
        if (v71) {
          CFRelease(v71);
        }
        if (time.value) {
          CFRelease((CFTypeRef)time.value);
        }
        CFURLRef v69 = (const __CFURL *)cf;
LABEL_130:
        if (v69)
        {
          CFURLRef v72 = CFURLCopyAbsoluteURL(v69);
          CFURLRef v73 = v72;
          BOOL v74 = v72 == 0;
          if (!v72) {
            CFURLRef v72 = (const __CFURL *)cf;
          }
          CFStringRef v75 = CFURLGetString(v72);
          CFDictionaryAddValue(a2, (const void *)*MEMORY[0x1E4F20928], v75);
          if (!v74) {
            CFRelease(v73);
          }
        }
        if (cf)
        {
          CFRelease(cf);
          CFTypeRef cf = 0;
        }
        *(unsigned char *)(DerivedStorage + 848) = 0;
        CFDictionaryRef v76 = *(const void **)(DerivedStorage + 856);
        if (v76)
        {
          CFRelease(v76);
          *(void *)(DerivedStorage + 856) = 0;
        }
        if (!pap_EndpointSupportsSecureStop(v210))
        {
LABEL_167:
          if (!v200 && !v43)
          {
            CFURLRef v205 = 0;
            CFURLRef v207 = 0;
LABEL_170:
            CFStringRef v42 = 0;
            goto LABEL_197;
          }
          if (v217) {
            goto LABEL_86;
          }
          if (v43) {
            CFURLRef v207 = CFURLCopyAbsoluteURL(v43);
          }
          else {
            CFURLRef v207 = CFURLCopyAbsoluteURL(*(CFURLRef *)(DerivedStorage + 88));
          }
          if (!v214)
          {
            if (dword_1E93510E8)
            {
              LODWORD(BOOLean) = 0;
              type[0] = OS_LOG_TYPE_DEFAULT;
              CFTypeRef v175 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              unsigned int v176 = BOOLean;
              if (os_log_type_enabled(v175, type[0])) {
                unsigned int v177 = v176;
              }
              else {
                unsigned int v177 = v176 & 0xFFFFFFFE;
              }
              if (v177)
              {
                if (v210) {
                  uint64_t v178 = (const char *)(CMBaseObjectGetDerivedStorage() + 450);
                }
                else {
                  uint64_t v178 = "";
                }
                if (a1) {
                  CFTypeRef v191 = (const char *)(CMBaseObjectGetDerivedStorage() + 868);
                }
                else {
                  CFTypeRef v191 = "";
                }
                uint64_t v192 = *(void *)(DerivedStorage + 80);
                LODWORD(valuePtr.CFDictionarySetValue(theDict, key, value) = 136316418;
                *(CMTimeValue *)((char *)&valuePtr.value + 4) = (CMTimeValue)"itemairplay_setUpPlayParamDictionary";
                LOWORD(valuePtr.flags) = 2048;
                *(void *)((char *)&valuePtr.flags + 2) = v210;
                HIWORD(valuePtr.epoch) = 2082;
                v228 = v178;
                __int16 v229 = 2048;
                v230 = a1;
                __int16 v231 = 2082;
                v232 = v191;
                __int16 v233 = 2114;
                uint64_t v234 = v192;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
LABEL_460:
            CFURLRef v205 = 0;
            CFURLRef v43 = 0;
            goto LABEL_170;
          }
          time.CMTimeValue value = 0;
          uint64_t v168 = CMBaseObjectGetDerivedStorage();
          CMTimeScale v170 = (CFTypeRef *)(v168 + 48);
          CFTypeRef v169 = *(CFTypeRef *)(v168 + 48);
          uint64_t v171 = *MEMORY[0x1E4F1CF80];
          if (!v169)
          {
            if (FigStreamingAssetDownloadCacheTranslatorCreate(*MEMORY[0x1E4F1CF80], v207, *(unsigned char *)(v168 + 57), v170))
            {
              if (!FigSignalErrorAt())
              {
LABEL_449:
                if (time.value) {
                  CFRelease((CFTypeRef)time.value);
                }
                CFURLRef v205 = 0;
                goto LABEL_452;
              }
LABEL_447:
              if (*v170)
              {
                CFRelease(*v170);
                *CMTimeScale v170 = 0;
              }
              goto LABEL_449;
            }
            CFTypeRef v169 = *v170;
          }
          uint64_t FigBaseObject = FigStreamingAssetDownloadCacheTranslatorGetFigBaseObject(v169);
          uint64_t v173 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v173) {
            uint64_t v174 = v173;
          }
          else {
            uint64_t v174 = 0;
          }
          __int16 v183 = *(unsigned int (**)(uint64_t, __CFString *, uint64_t, CMTime *))(v174 + 48);
          if (v183 && !v183(FigBaseObject, @"FSADCT_MultiVariantPlaylist", v171, &time))
          {
            if (*(unsigned char *)(v168 + 57)) {
              CFURLGetString((CFURLRef)time.value);
            }
            CFURLRef v205 = (const __CFURL *)time.value;
LABEL_452:
            if (v200 && !v205)
            {
LABEL_441:
              uint64_t v60 = FigSignalErrorAt();
LABEL_442:
              uint64_t v27 = v60;
              CFURLRef v97 = 0;
              CFStringRef v42 = 0;
              CFURLRef v98 = v207;
              goto LABEL_176;
            }
            if (v205)
            {
              CFStringRef v42 = CFURLCopyFileSystemPath(v205, kCFURLPOSIXPathStyle);
              if (v42)
              {
                CFURLRef v199 = v207;
                if (!v207) {
                  CFURLRef v199 = *(const __CFURL **)(DerivedStorage + 88);
                }
                CFURLRef v43 = (const __CFURL *)CFURLCopyFileSystemPath(v199, kCFURLPOSIXPathStyle);
                if (v43)
                {
                  CFDictionaryAddValue(a2, (const void *)*MEMORY[0x1E4F209D0], v43);
                  goto LABEL_196;
                }
                uint64_t v27 = FigSignalErrorAt();
              }
              else
              {
                uint64_t v27 = FigSignalErrorAt();
                CFStringRef v42 = 0;
              }
              CFURLRef v98 = v207;
              CFURLRef v97 = v205;
LABEL_176:
              CFURLRef v205 = v97;
              CFURLRef v207 = v98;
              CFURLRef v43 = 0;
              if (!v27) {
                goto LABEL_316;
              }
              goto LABEL_312;
            }
            goto LABEL_460;
          }
          goto LABEL_447;
        }
        uint64_t v77 = FigAssetGetCMBaseObject(*(void *)(DerivedStorage + 16));
        uint64_t v78 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v78) {
          uint64_t v79 = v78;
        }
        else {
          uint64_t v79 = 0;
        }
        CMTimeScale v90 = *(unsigned int (**)(uint64_t, __CFString *, void, CFTypeRef *))(v79 + 48);
        if (v90)
        {
          uint64_t v91 = *MEMORY[0x1E4F1CF80];
          if (!v90(v77, @"assetProperty_DefaultContentKeySession", *MEMORY[0x1E4F1CF80], &v216))
          {
            CFTypeRef v92 = v216;
            uint64_t v93 = *(void *)(CMBaseObjectGetVTable() + 8);
            uint64_t v94 = v93 ? v93 : 0;
            uint64_t v95 = *(unsigned int (**)(CFTypeRef, uint64_t, uint64_t, CFTypeRef *))(v94 + 48);
            if (v95)
            {
              if (!v95(v92, 0x1EE53F618, v91, &v215))
              {
                double v96 = (const void *)*MEMORY[0x1E4F1CFD0];
                if (FigCFEqual())
                {
                  *(unsigned char *)(DerivedStorage + 848) = 1;
                  FigAirPlaySecureStopRouterCreateSecureStopUUID(*(CFStringRef *)(DerivedStorage + 80), (__CFString **)(DerivedStorage + 856));
                  CFDictionarySetValue(a2, (const void *)*MEMORY[0x1E4F202F0], v96);
                }
                goto LABEL_167;
              }
            }
          }
        }
LABEL_174:
        uint64_t v27 = FigSignalErrorAt();
        goto LABEL_175;
      }
      goto LABEL_175;
    }
    CFURLRef v219 = 0;
    uint64_t v82 = CMBaseObjectGetDerivedStorage();
    if (*(unsigned char *)(v82 + 56))
    {
LABEL_445:
      CFURLRef v43 = 0;
      goto LABEL_114;
    }
    *(void *)os_log_type_t type = 0;
    CFBooleanRef BOOLean = 0;
    CFTypeRef v223 = 0;
    CFArrayRef theArray = 0;
    CFTypeRef v221 = 0;
    *(void *)v222 = 0;
    CFTypeRef v220 = 0;
    uint64_t v83 = CMBaseObjectGetDerivedStorage();
    valuePtr.CMTimeValue value = 0;
    *(void *)&valuePtr.CMTimeScale timescale = &valuePtr;
    valuePtr.CMTimeEpoch epoch = 0x2020000000;
    v228 = 0;
    CFTypeRef v208 = (CFTypeRef)FigCFWeakReferenceHolderCopyReferencedObject();
    BOOL v84 = (unsigned char *)CMBaseObjectGetDerivedStorage();
    BOOL v85 = v84;
    if (v84 && !*v84)
    {
      BOOL v86 = 0;
      if (FigAssetDownloadCoordinatorCopyDestinationURLForAsset(*(void *)(v83 + 16), &BOOLean)
        || !BOOLean)
      {
        goto LABEL_409;
      }
      uint64_t v87 = *(void *)(v83 + 8);
      uint64_t v88 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v88) {
        uint64_t v89 = v88;
      }
      else {
        uint64_t v89 = 0;
      }
      uint64_t v99 = *(unsigned int (**)(uint64_t, CFTypeRef *))(v89 + 152);
      if (v99 && !v99(v87, &v220))
      {
        uint64_t v100 = FigAssetGetCMBaseObject(v220);
        uint64_t v101 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v102 = v101 ? v101 : 0;
        int v179 = *(unsigned int (**)(uint64_t, __CFString *, void *, os_log_type_t *))(v102 + 48);
        if (v179 && !v179(v100, @"assetProperty_OriginalNetworkContentURL", v81, type))
        {
          uint64_t v180 = FigAssetGetCMBaseObject(v220);
          uint64_t v181 = *(void *)(CMBaseObjectGetVTable() + 8);
          uint64_t v182 = v181 ? v181 : 0;
          CMTime v184 = *(unsigned int (**)(uint64_t, __CFString *, void *, CFTypeRef *))(v182 + 48);
          if (v184)
          {
            BOOL v86 = 0;
            if (v184(v180, @"assetProperty_HLSAlternates", v81, &v223) || !v223) {
              goto LABEL_409;
            }
            CFAllocatorRef v185 = CFGetAllocator(a1);
            v239 = @"FSC_DownloadDestinationURL";
            v240[0] = BOOLean;
            if (!FigStreamingCacheCreate(v185, *(const __CFURL **)type, (const __CFDictionary *)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v240 forKeys:&v239 count:1], (uint64_t *)v222))
            {
              CMTimeRange v186 = *((void *)v85 + 12);
              time.CMTimeValue value = MEMORY[0x1E4F143A8];
              *(void *)&time.CMTimeScale timescale = 3221225472;
              time.CMTimeEpoch epoch = (CMTimeEpoch)__itemairplay_doesHLSAssetHaveACompletelyDownloadedAlternate_block_invoke;
              v236 = &unk_1E5794640;
              p_CMTime valuePtr = &valuePtr;
              uint64_t v238 = v83;
              dispatch_sync(v186, &time);
              if (!FigAlternateOfflinePlayableForMediaSelectionFilterCreate(v81, *(uint64_t *)v222, *(const __CFArray **)(*(void *)&valuePtr.timescale + 24), 1, &v221))
              {
                CFTypeRef v187 = v221;
                CFTypeRef v188 = v223;
                uint64_t v189 = *(void *)(CMBaseObjectGetVTable() + 16);
                uint64_t v190 = v189 ? v189 : 0;
                __int16 v193 = *(unsigned int (**)(CFTypeRef, CFTypeRef, CFArrayRef *))(v190 + 24);
                if (v193)
                {
                  if (!v193(v187, v188, &theArray))
                  {
                    CFIndex v194 = (CFIndex)theArray;
                    if (theArray) {
                      CFIndex v194 = CFArrayGetCount(theArray);
                    }
                    BOOL v86 = v194 > 0;
LABEL_409:
                    double v195 = *(const void **)(*(void *)&valuePtr.timescale + 24);
                    if (v195) {
                      CFRelease(v195);
                    }
                    if (v208) {
                      CFRelease(v208);
                    }
                    if (BOOLean) {
                      CFRelease(BOOLean);
                    }
                    if (*(void *)type) {
                      CFRelease(*(CFTypeRef *)type);
                    }
                    if (theArray) {
                      CFRelease(theArray);
                    }
                    if (*(void *)v222) {
                      CFRelease(*(CFTypeRef *)v222);
                    }
                    if (v221) {
                      CFRelease(v221);
                    }
                    if (v223) {
                      CFRelease(v223);
                    }
                    if (v220) {
                      CFRelease(v220);
                    }
                    _Block_object_dispose(&valuePtr, 8);
                    if (v86)
                    {
                      uint64_t v27 = FigAssetDownloadCoordinatorMarkAssetForInteractivity(*(void *)(v82 + 16));
                      if (v27) {
                        goto LABEL_175;
                      }
                      uint64_t v196 = FigAssetDownloadCoordinatorCopyDestinationURLForAsset(*(void *)(v82 + 16), &v219);
                      uint64_t v27 = v196;
                      if (v196 || (CFURLRef v43 = v219) == 0)
                      {
                        uint64_t v197 = v82;
                        BOOL v198 = v196 == 0;
                        FigAssetDownloadCoordinatorUnmarkAssetForInteractivity(*(const void **)(v197 + 16));
                        if (!v198) {
                          goto LABEL_175;
                        }
                        CFURLRef v43 = v219;
                      }
                      else
                      {
                        *(unsigned char *)(v82 + 56) = 1;
                      }
                      goto LABEL_114;
                    }
                    goto LABEL_445;
                  }
                }
              }
            }
          }
        }
      }
    }
    BOOL v86 = 0;
    goto LABEL_409;
  }
  if (!v217)
  {
    CFURLRef v59 = CFURLCopyAbsoluteURL(*(CFURLRef *)(DerivedStorage + 88));
    CFURLRef v207 = v59;
    if (!v59) {
      CFURLRef v59 = *(const __CFURL **)(DerivedStorage + 88);
    }
    CFStringRef v42 = CFURLCopyFileSystemPath(v59, kCFURLPOSIXPathStyle);
    if (v42) {
      goto LABEL_195;
    }
    uint64_t v60 = FigSignalErrorAt();
    goto LABEL_442;
  }
  CFURLRef v43 = 0;
LABEL_86:
  if (*(void *)(DerivedStorage + 96)) {
    goto LABEL_189;
  }
  CFURLRef SecurityScopedFileURLForPersistentURL = (const __CFURL *)FigCreateSecurityScopedFileURLForPersistentURL();
  *(void *)(DerivedStorage + 96) = SecurityScopedFileURLForPersistentURL;
  if (!SecurityScopedFileURLForPersistentURL) {
    goto LABEL_174;
  }
  if (!CFURLStartAccessingSecurityScopedResource(SecurityScopedFileURLForPersistentURL))
  {
    LODWORD(BOOLean) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    unsigned int v52 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v53 = BOOLean;
    if (os_log_type_enabled(v52, type[0])) {
      unsigned int v54 = v53;
    }
    else {
      unsigned int v54 = v53 & 0xFFFFFFFE;
    }
    if (v54)
    {
      if (a1) {
        __int16 v55 = (const char *)(CMBaseObjectGetDerivedStorage() + 868);
      }
      else {
        __int16 v55 = "";
      }
      uint64_t v103 = 88;
      if (!*(unsigned char *)(DerivedStorage + 57)) {
        uint64_t v103 = 112;
      }
      CFIndex v104 = *(const void **)(DerivedStorage + v103);
      CMTimeEpoch v105 = *(const char **)(DerivedStorage + 96);
      LODWORD(valuePtr.CFDictionarySetValue(theDict, key, value) = 136316163;
      *(CMTimeValue *)((char *)&valuePtr.value + 4) = (CMTimeValue)"itemairplay_setUpPlayParamDictionary";
      LOWORD(valuePtr.flags) = 2048;
      *(void *)((char *)&valuePtr.flags + 2) = a1;
      HIWORD(valuePtr.epoch) = 2082;
      v228 = v55;
      __int16 v229 = 2113;
      v230 = v104;
      __int16 v231 = 2113;
      v232 = v105;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
LABEL_189:
  if (v43) {
    CFURLRef v207 = CFURLCopyAbsoluteURL(v43);
  }
  else {
    CFURLRef v207 = CFURLCopyAbsoluteURL(*(CFURLRef *)(DerivedStorage + 96));
  }
  CFURLRef v106 = v207;
  if (!v207) {
    CFURLRef v106 = *(const __CFURL **)(DerivedStorage + 96);
  }
  CFStringRef v42 = CFURLCopyFileSystemPath(v106, kCFURLPOSIXPathStyle);
  if (!v42) {
    goto LABEL_441;
  }
LABEL_195:
  CFURLRef v205 = 0;
  CFURLRef v43 = 0;
LABEL_196:
  CFDictionaryAddValue(a2, (const void *)*MEMORY[0x1E4F209E8], v42);
LABEL_197:
  time.CMTimeValue value = 0;
  valuePtr.CMTimeValue value = 0;
  uint64_t v107 = CMBaseObjectGetDerivedStorage();
  uint64_t v108 = FigAssetGetCMBaseObject(*(void *)(v107 + 16));
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v201 = *MEMORY[0x1E4F1CF80];
  if (*(void *)(VTable + 8)) {
    uint64_t v110 = *(void *)(VTable + 8);
  }
  else {
    uint64_t v110 = 0;
  }
  unsigned int v111 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CMTime *))(v110 + 48);
  if (v111)
  {
    int v112 = v111(v108, @"assetProperty_CreationFlags", v201, &time);
    uint64_t v113 = (const void *)time.value;
    if (!v112 && time.value)
    {
      CFNumberGetValue((CFNumberRef)time.value, kCFNumberSInt64Type, &valuePtr);
      uint64_t v113 = (const void *)time.value;
    }
    if (v113) {
      CFRelease(v113);
    }
  }
  FigCFDictionarySetInt32();
  if (theDict)
  {
    ArrayCFDictionaryRef Value = (const void *)FigCFDictionaryGetArrayValue();
    if (ArrayValue) {
      CFDictionaryAddValue(a2, (const void *)*MEMORY[0x1E4F209E0], ArrayValue);
    }
    unsigned int v115 = CFDictionaryGetValue(theDict, @"assetOption_InheritURIQueryComponentFromReferencingURI");
    if (v115) {
      BOOL v116 = v203;
    }
    else {
      BOOL v116 = 1;
    }
    if (!v116) {
      CFDictionaryAddValue(a2, (const void *)*MEMORY[0x1E4F20968], v115);
    }
    FigCFDictionarySetValueFromKeyInDict();
  }
  double v117 = (const void *)*MEMORY[0x1E4F1CFD0];
  CFDictionaryAddValue(a2, (const void *)*MEMORY[0x1E4F209C0], (const void *)*MEMORY[0x1E4F1CFD0]);
  CFDictionaryRef v118 = theDict;
  CMBaseObjectGetDerivedStorage();
  if (v118
    && (uint64_t v119 = CFDictionaryGetValue(v118, @"assetOption_iTunesStoreContentInfo")) != 0
    && (CFTypeID TypeID = CFDictionaryGetTypeID(), TypeID == CFGetTypeID(v119))
    && (int v121 = CFDictionaryGetValue((CFDictionaryRef)v119, @"assetOption_iTunesStoreAssetHLSAssetURLString")) != 0)
  {
    CFDictionaryAddValue(a2, (const void *)*MEMORY[0x1E4F20958], v121);
    int v122 = 0;
  }
  else
  {
    int v122 = 1;
  }
  if (v9[448] && !playerairplay_isAPVSupportedForCoordinatedPlayback())
  {
    if (dword_1E93510E8)
    {
      LODWORD(BOOLean) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      long long v128 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v129 = BOOLean;
      if (os_log_type_enabled(v128, type[0])) {
        unsigned int v130 = v129;
      }
      else {
        unsigned int v130 = v129 & 0xFFFFFFFE;
      }
      if (v130)
      {
        if (v210) {
          uint64_t v131 = (const char *)(CMBaseObjectGetDerivedStorage() + 450);
        }
        else {
          uint64_t v131 = "";
        }
        if (a1) {
          uint64_t v156 = (const char *)(CMBaseObjectGetDerivedStorage() + 868);
        }
        else {
          uint64_t v156 = "";
        }
        uint64_t v157 = *(void *)(DerivedStorage + 80);
        LODWORD(valuePtr.CFDictionarySetValue(theDict, key, value) = 136316418;
        *(CMTimeValue *)((char *)&valuePtr.value + 4) = (CMTimeValue)"itemairplay_setUpPlayParamDictionary";
        LOWORD(valuePtr.flags) = 2048;
        *(void *)((char *)&valuePtr.flags + 2) = v210;
        HIWORD(valuePtr.epoch) = 2082;
        v228 = v131;
        __int16 v229 = 2048;
        v230 = a1;
        __int16 v231 = 2082;
        v232 = v156;
        __int16 v233 = 2114;
        uint64_t v234 = v157;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    itemairplay_postFailNotificationWithError(a1, -15694);
    uint64_t v27 = 4294951602;
    goto LABEL_312;
  }
  if (v122)
  {
    LOBYTE(theArray) = 0;
    LOBYTE(v223) = 0;
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetBooleanIfPresent();
    BOOL v123 = v202;
    if (!(_BYTE)theArray) {
      BOOL v123 = 0;
    }
    if (v123)
    {
      if (!dword_1E93510E8)
      {
LABEL_359:
        itemairplay_postFailNotificationWithError(a1, -17226);
LABEL_64:
        uint64_t v27 = 4294950070;
LABEL_312:
        if (*(unsigned char *)(DerivedStorage + 56))
        {
          FigAssetDownloadCoordinatorUnmarkAssetForInteractivity(*(const void **)(DerivedStorage + 16));
          *(unsigned char *)(DerivedStorage + 56) = 0;
        }
        __int16 v158 = *(const void **)(DerivedStorage + 48);
        if (v158)
        {
          CFRelease(v158);
          *(void *)(DerivedStorage + 48) = 0;
        }
        goto LABEL_316;
      }
      LODWORD(BOOLean) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      uint64_t v124 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v125 = BOOLean;
      if (os_log_type_enabled(v124, type[0])) {
        unsigned int v126 = v125;
      }
      else {
        unsigned int v126 = v125 & 0xFFFFFFFE;
      }
      if (!v126) {
        goto LABEL_344;
      }
      if (v210) {
        BOOL v127 = (const char *)(CMBaseObjectGetDerivedStorage() + 450);
      }
      else {
        BOOL v127 = "";
      }
      if (!a1)
      {
        __int16 v160 = "";
        goto LABEL_343;
      }
LABEL_341:
      __int16 v160 = (const char *)(CMBaseObjectGetDerivedStorage() + 868);
LABEL_343:
      uint64_t v161 = *(void *)(DerivedStorage + 80);
      LODWORD(valuePtr.CFDictionarySetValue(theDict, key, value) = 136316418;
      *(CMTimeValue *)((char *)&valuePtr.value + 4) = (CMTimeValue)"itemairplay_setUpPlayParamDictionary";
      LOWORD(valuePtr.flags) = 2048;
      *(void *)((char *)&valuePtr.flags + 2) = v210;
      HIWORD(valuePtr.epoch) = 2082;
      v228 = v127;
      __int16 v229 = 2048;
      v230 = a1;
      __int16 v231 = 2082;
      v232 = v160;
      __int16 v233 = 2114;
      uint64_t v234 = v161;
      _os_log_send_and_compose_impl();
      goto LABEL_344;
    }
    if (!v204)
    {
      CFBooleanRef BOOLean = 0;
      uint64_t v152 = *(void *)(DerivedStorage + 16);
      if (v152)
      {
        FigAssetCopyProperty(v152, @"assetProperty_ProtectedStatus", v201, (uint64_t)&BOOLean);
        if (BOOLean)
        {
          if (CFBooleanGetValue(BOOLean) && (_BYTE)v223)
          {
            if (!dword_1E93510E8) {
              goto LABEL_345;
            }
            *(_DWORD *)os_log_type_t type = 0;
            v222[0] = OS_LOG_TYPE_DEFAULT;
            __int16 v153 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int v154 = *(_DWORD *)type;
            if (os_log_type_enabled(v153, v222[0])) {
              unsigned int v155 = v154;
            }
            else {
              unsigned int v155 = v154 & 0xFFFFFFFE;
            }
            if (!v155)
            {
LABEL_344:
              fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_345:
              if (dword_1E93510E8)
              {
                LODWORD(BOOLean) = 0;
                type[0] = OS_LOG_TYPE_DEFAULT;
                __int16 v162 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                unsigned int v163 = BOOLean;
                if (os_log_type_enabled(v162, type[0])) {
                  unsigned int v164 = v163;
                }
                else {
                  unsigned int v164 = v163 & 0xFFFFFFFE;
                }
                if (v164)
                {
                  if (v210) {
                    int v165 = (const char *)(CMBaseObjectGetDerivedStorage() + 450);
                  }
                  else {
                    int v165 = "";
                  }
                  if (a1) {
                    __int16 v166 = (const char *)(CMBaseObjectGetDerivedStorage() + 868);
                  }
                  else {
                    __int16 v166 = "";
                  }
                  uint64_t v167 = *(void *)(DerivedStorage + 80);
                  LODWORD(valuePtr.CFDictionarySetValue(theDict, key, value) = 136316418;
                  *(CMTimeValue *)((char *)&valuePtr.value + 4) = (CMTimeValue)"itemairplay_setUpPlayParamDictionary";
                  LOWORD(valuePtr.flags) = 2048;
                  *(void *)((char *)&valuePtr.flags + 2) = v210;
                  HIWORD(valuePtr.epoch) = 2082;
                  v228 = v165;
                  __int16 v229 = 2048;
                  v230 = a1;
                  __int16 v231 = 2082;
                  v232 = v166;
                  __int16 v233 = 2114;
                  uint64_t v234 = v167;
                  _os_log_send_and_compose_impl();
                }
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              goto LABEL_359;
            }
            if (v210) {
              BOOL v127 = (const char *)(CMBaseObjectGetDerivedStorage() + 450);
            }
            else {
              BOOL v127 = "";
            }
            if (!a1)
            {
              __int16 v160 = "";
              goto LABEL_343;
            }
            goto LABEL_341;
          }
        }
      }
    }
  }
  CMTimeFlags v132 = (const void *)*((void *)v9 + 51);
  if (v132) {
    CFDictionaryAddValue(a2, (const void *)*MEMORY[0x1E4F20920], v132);
  }
  unsigned int v133 = (const void *)*((void *)v9 + 52);
  if (v133) {
    CFDictionaryAddValue(a2, (const void *)*MEMORY[0x1E4F20918], v133);
  }
  if (FigCFEqual())
  {
    uint64_t v134 = (const void **)MEMORY[0x1E4F20AA0];
  }
  else
  {
    if (!FigCFEqual())
    {
      if (FigCFEqual()) {
        CMTime v135 = (const void *)*MEMORY[0x1E4F20AB0];
      }
      else {
        CMTime v135 = (const void *)*MEMORY[0x1E4F20AB8];
      }
      goto LABEL_251;
    }
    uint64_t v134 = (const void **)MEMORY[0x1E4F20AA8];
  }
  CMTime v135 = *v134;
LABEL_251:
  CFDictionaryAddValue(a2, (const void *)*MEMORY[0x1E4F209B8], v135);
  time.CMTimeValue value = 0;
  if (v9[249])
  {
    uint64_t v136 = FigPlaybackItemGetFigBaseObject(*(void *)(DerivedStorage + 8));
    uint64_t v137 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v137) {
      uint64_t v138 = v137;
    }
    else {
      uint64_t v138 = 0;
    }
    float v139 = *(void (**)(uint64_t, __CFString *, uint64_t, CMTime *))(v138 + 48);
    if (v139) {
      v139(v136, @"TimeToPauseBuffering", v201, &time);
    }
    if (time.value)
    {
      CFDictionaryAddValue(a2, (const void *)*MEMORY[0x1E4F20A68], (const void *)time.value);
      if (time.value)
      {
        CFRelease((CFTypeRef)time.value);
        time.CMTimeValue value = 0;
      }
    }
    uint64_t v140 = FigPlaybackItemGetFigBaseObject(*(void *)(DerivedStorage + 8));
    uint64_t v141 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v141) {
      uint64_t v142 = v141;
    }
    else {
      uint64_t v142 = 0;
    }
    CMTime v143 = *(void (**)(uint64_t, __CFString *, uint64_t, CMTime *))(v142 + 48);
    if (v143) {
      v143(v140, @"TimeToPausePlayback", v201, &time);
    }
    if (time.value) {
      CFDictionaryAddValue(a2, (const void *)*MEMORY[0x1E4F20A70], (const void *)time.value);
    }
    if (*(unsigned char *)(DerivedStorage + 158)) {
      uint64_t v144 = v117;
    }
    else {
      uint64_t v144 = (const void *)*MEMORY[0x1E4F1CFC8];
    }
    CFDictionaryAddValue(a2, (const void *)*MEMORY[0x1E4F20A38], v144);
    if (time.value)
    {
      CFRelease((CFTypeRef)time.value);
      time.CMTimeValue value = 0;
    }
    uint64_t v145 = FigPlaybackItemGetFigBaseObject(*(void *)(DerivedStorage + 8));
    uint64_t v146 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v146) {
      uint64_t v147 = v146;
    }
    else {
      uint64_t v147 = 0;
    }
    int v148 = *(void (**)(uint64_t, __CFString *, uint64_t, CMTime *))(v147 + 48);
    if (v148) {
      v148(v145, @"timeToSwapPlayback", v201, &time);
    }
    if (time.value)
    {
      CFDictionaryAddValue(a2, (const void *)*MEMORY[0x1E4F20A78], (const void *)time.value);
      if (time.value)
      {
        CFRelease((CFTypeRef)time.value);
        time.CMTimeValue value = 0;
      }
    }
  }
  CMTimeValue v149 = *(const void **)(DerivedStorage + 808);
  if (v149) {
    CFDictionaryAddValue(a2, (const void *)*MEMORY[0x1E4F20978], v149);
  }
  CMTimeScale v150 = *(const void **)(DerivedStorage + 784);
  if (v150) {
    CFDictionaryAddValue(a2, (const void *)*MEMORY[0x1E4F20930], v150);
  }
  int v151 = *(const void **)(DerivedStorage + 792);
  if (v151) {
    CFDictionaryAddValue(a2, (const void *)*MEMORY[0x1E4F20970], v151);
  }
  if (*(unsigned char *)(DerivedStorage + 556))
  {
    itemairplay_getCurrentInterstitialLiveHorizon(DerivedStorage, &v211);
    FigCFDictionarySetCMTime();
  }
  uint64_t v27 = 0;
LABEL_316:
  if (theDict) {
    CFRelease(theDict);
  }
  if (v206) {
    CFRelease(v206);
  }
  if (v216) {
    CFRelease(v216);
  }
  if (v215) {
    CFRelease(v215);
  }
  if (v209) {
    CFRelease(v209);
  }
  if (v210) {
    CFRelease(v210);
  }
  if (v43) {
    CFRelease(v43);
  }
  if (v205) {
    CFRelease(v205);
  }
  if (v207) {
    CFRelease(v207);
  }
  if (v42) {
    CFRelease(v42);
  }
  if (number) {
    CFRelease(number);
  }
  FigReadWriteLockUnlockForRead();
  return v27;
}

void sub_19429CB60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
}

void playqueue_addItemToMediaControlPlaylist(uint64_t a1)
{
  MEMORY[0x19970E910](*(void *)(a1 + 8));
  *(unsigned char *)(CMBaseObjectGetDerivedStorage() + 733) = 1;
  ++*(_DWORD *)(a1 + 20);
  CFStringRef v2 = playqueue_copyPlayQueueSummary(a1);
  if (dword_1E93510E8)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x19970E930](*(void *)(a1 + 8));
  if (v2) {
    CFRelease(v2);
  }
}

uint64_t pap_AirPlayRoute_CopyProperty(const void *a1, const void *a2, uint64_t a3, void *a4)
{
  if (a1) {
    CFTypeRef v7 = CFRetain(a1);
  }
  else {
    CFTypeRef v7 = 0;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v9 = FigPlayerAirPlayRoute_CopyProperty(*(void *)(DerivedStorage + 224), a2, a3, a4);
  CFRelease(v7);
  return v9;
}

void pap_playbackSessionPlayCompletion(int a1, uint64_t a2)
{
  uint64_t v4 = *(NSObject **)(CMBaseObjectGetDerivedStorage() + 104);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = __pap_playbackSessionPlayCompletion_block_invoke;
  _OWORD v5[3] = &__block_descriptor_44_e5_v8__0l;
  v5[4] = a2;
  int v6 = a1;
  dispatch_async(v4, v5);
}

void itemairplay_postFailNotificationWithError(const void *a1, int a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  ErrorPayload = pap_createErrorPayload(a2, 1);
  if (DerivedStorage)
  {
    if (dword_1E93510E8)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CFTypeRef v7 = (const void **)&kFigPlaybackItemNotification_FailedToBecomeReadyForPlayback;
    if (*(unsigned char *)(DerivedStorage + 737)) {
      CFTypeRef v7 = (const void **)&kFigPlaybackItemNotification_FailedToPlayToEnd;
    }
    itemairplay_postItemNotification(a1, *v7, ErrorPayload);
  }
  if (ErrorPayload) {
    CFRelease(ErrorPayload);
  }
}

void itemairplay_addiTunesStoreContentInfo(const void *a1, __CFDictionary *a2)
{
  if (a1)
  {
    CFTypeID v4 = CFGetTypeID(a1);
    if (v4 == CFDictionaryGetTypeID())
    {
      int v5 = itemairplay_getiTunesStoreContentTypeFromInfo(a1);
      if (v5)
      {
        int v6 = v5;
        CFDictionaryRef Value = CFDictionaryGetValue((CFDictionaryRef)a1, @"assetOption_iTunesStoreContentID");
        uint64_t v8 = (const void **)MEMORY[0x1E4F208E8];
        if (v6 == 2) {
          uint64_t v8 = (const void **)MEMORY[0x1E4F208E0];
        }
        CFDictionaryAddValue(a2, (const void *)*MEMORY[0x1E4F209A8], *v8);
        CFDictionaryAddValue(a2, (const void *)*MEMORY[0x1E4F20998], Value);
        if (CFDictionaryGetValue((CFDictionaryRef)a1, @"assetOption_iTunesStoreContentUserAgent"))
        {
          uint64_t v9 = (const void *)*MEMORY[0x1E4F20A90];
          CFTypeRef v10 = CFDictionaryGetValue((CFDictionaryRef)a1, @"assetOption_iTunesStoreContentUserAgent");
          CFDictionaryAddValue(a2, v9, v10);
        }
        if (CFDictionaryGetValue((CFDictionaryRef)a1, @"assetOption_iTunesStoreContentDownloadParameters"))
        {
          uint64_t v11 = (const void *)*MEMORY[0x1E4F20910];
          uint64_t v12 = CFDictionaryGetValue((CFDictionaryRef)a1, @"assetOption_iTunesStoreContentDownloadParameters");
          CFDictionaryAddValue(a2, v11, v12);
        }
        if (CFDictionaryGetValue((CFDictionaryRef)a1, @"assetOption_iTunesStoreContentDSID"))
        {
          BOOL v13 = (const void *)*MEMORY[0x1E4F20938];
          CFURLRef v14 = CFDictionaryGetValue((CFDictionaryRef)a1, @"assetOption_iTunesStoreContentDSID");
          CFDictionaryAddValue(a2, v13, v14);
        }
        if (CFDictionaryGetValue((CFDictionaryRef)a1, @"assetOption_iTunesStoreContentPurchasedMediaKind"))
        {
          CFStringRef v15 = (const void *)*MEMORY[0x1E4F20A10];
          CFStringRef v16 = CFDictionaryGetValue((CFDictionaryRef)a1, @"assetOption_iTunesStoreContentPurchasedMediaKind");
          CFDictionaryAddValue(a2, v15, v16);
        }
      }
    }
  }
}

uint64_t itemairplay_ensureCustomURLLoader()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)(DerivedStorage + 640)) {
    return 0;
  }
  uint64_t v1 = DerivedStorage;
  uint64_t CMBaseObject = FigAssetGetCMBaseObject(*(void *)(DerivedStorage + 16));
  uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 8);
  uint64_t v4 = v3 ? v3 : 0;
  int v5 = *(unsigned int (**)(uint64_t, __CFString *, void, uint64_t))(v4 + 48);
  if (v5)
  {
    if (!v5(CMBaseObject, @"assetProperty_CustomURLLoader", *MEMORY[0x1E4F1CF80], v1 + 640)) {
      return 0;
    }
  }

  return FigSignalErrorAt();
}

uint64_t pap_EndpointSupportsSecureStop(const void *a1)
{
  if (a1) {
    CFTypeRef v1 = CFRetain(a1);
  }
  else {
    CFTypeRef v1 = 0;
  }
  uint64_t v2 = *(unsigned __int8 *)(CMBaseObjectGetDerivedStorage() + 272);
  CFRelease(v1);
  return v2;
}

CMTime *itemairplay_getCurrentInterstitialLiveHorizon@<X0>(uint64_t a1@<X0>, CMTime *a2@<X8>)
{
  UpTimeNanoCMTime seconds = FigGetUpTimeNanoseconds();
  CMTimeMake(&rhs, UpTimeNanoseconds - *(void *)(a1 + 568), 1000000000);
  CMTime v6 = *(CMTime *)(a1 + 544);
  return CMTimeAdd(a2, &v6, &rhs);
}

__CFDictionary *pap_createErrorPayload(int a1, int a2)
{
  int valuePtr = a1;
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFNumberRef v4 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
  if (!v4) {
    return 0;
  }
  CFNumberRef v5 = v4;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFTypeRef v7 = Mutable;
  if (Mutable)
  {
    CFDictionarySetValue(Mutable, @"Result", v5);
    if (a2) {
      CFDictionarySetValue(v7, @"ResultIsFatal", (const void *)*MEMORY[0x1E4F1CFD0]);
    }
  }
  CFRelease(v5);
  return v7;
}

const void *itemairplay_copyiTunesStoreContentRentalID()
{
  CFDictionaryRef v0 = (const __CFDictionary *)itemairplay_copyiTunesStoreContentInfo();
  if (!v0) {
    return 0;
  }
  CFDictionaryRef v1 = v0;
  CFDictionaryRef Value = CFDictionaryGetValue(v0, @"assetOption_iTunesStoreContentRentalID");
  CFAllocatorRef v3 = Value;
  if (Value) {
    CFRetain(Value);
  }
  CFRelease(v1);
  return v3;
}

CFPropertyListRef __itemairplay_doesHLSAssetHaveACompletelyDownloadedAlternate_block_invoke(uint64_t a1)
{
  CFPropertyListRef result = CFPropertyListCreateDeepCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], *(CFPropertyListRef *)(*(void *)(a1 + 40) + 352), 0);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void __pap_playbackSessionPlayCompletion_block_invoke(uint64_t a1)
{
  itemairplay_playMediaCompletionHandler(*(void **)(*(void *)(a1 + 32) + 8), **(const void ***)(a1 + 32), *(_DWORD *)(a1 + 40));
  uint64_t v2 = *(CFTypeRef **)(a1 + 32);
  if (v2[1])
  {
    CFRelease(v2[1]);
    uint64_t v2 = *(CFTypeRef **)(a1 + 32);
  }
  if (*v2)
  {
    CFRelease(*v2);
    uint64_t v2 = *(CFTypeRef **)(a1 + 32);
  }

  free(v2);
}

void itemairplay_playMediaCompletionHandler(void *a1, const void *a2, int a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v7 = CMBaseObjectGetDerivedStorage();
  unsigned int v8 = pap_AirPlayState(a2);
  if (v8 <= 0xF && ((1 << v8) & 0xD000) != 0 && !*(unsigned char *)v7)
  {
    if (a3)
    {
      pap_invalidateEndpointPlaybackSession(a2);
      playerairplay_resetAirPlayVideoState(a2);
      if (*(unsigned char *)(DerivedStorage + 735) != 4)
      {
        playerairplay_postPlayerNotification(a2, @"IsAirPlayVideoActiveDidChange", 0);
        playerairplay_updateAirPlayVideoIsActiveProperty(a2);
      }
    }
    else
    {
      CFTypeRef cf = 0;
      if (dword_1E93510E8)
      {
        int v13 = 0;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      pap_setAirPlayState(a2, 16);
      playerairplay_setActionAtEndOnAirPlayController(a2);
      FPSupport_CreateSetRateOptions((const __CFAllocator *)*MEMORY[0x1E4F1CF80], 20, (CFMutableDictionaryRef *)&cf);
      if (*(unsigned char *)(v7 + 448))
      {
        *(unsigned char *)(v7 + 356) = 1;
      }
      else
      {
        playerairplay_postPlayerRateDidChangeNotification(a2, (uint64_t)cf);
        playerairplay_setRateAirPlay(a2, 0, MEMORY[0x1E4F1F9F8], MEMORY[0x1E4F1F9F8], cf);
      }
      FigPlayerAirPlayRoute_SuspendAirPlayScreen(*(void *)(v7 + 224));
      if (cf) {
        CFRelease(cf);
      }
    }
    if (a1)
    {
      FigReadWriteLockLockForRead();
      if (!*(unsigned char *)(DerivedStorage + 72))
      {
        if (a3)
        {
          CFRetain(a2);
          CFRetain(a1);
          CFTypeRef v10 = *(NSObject **)(v7 + 104);
          block[0] = MEMORY[0x1E4F143A8];
          block[1] = 3221225472;
          block[2] = __itemairplay_playMediaCompletionHandler_block_invoke;
          block[3] = &__block_descriptor_64_e5_v8__0l;
          block[4] = v7;
          void block[5] = DerivedStorage;
          void block[6] = a2;
          void block[7] = a1;
          dispatch_async(v10, block);
          itemairplay_postFailNotificationWithError(a1, a3);
        }
        else
        {
          itemairplay_postItemNotification(a1, @"TimeJumped", 0);
          *(_WORD *)(DerivedStorage + 738) = 257;
          itemairplay_controlPlaybackActivityTimer((uint64_t)a1, 1);
          CMTime v16 = *(CMTime *)(DerivedStorage + 448);
          CMTime v15 = *(CMTime *)(DerivedStorage + 472);
          playerairplay_setPlaybackEndTimes(a2, (CFMutableDictionaryRef)a1, &v16, 1, &v15, 1);
          playerairplay_triggerAsyncCheckAndUpdatePlayQueueItems(a2);
        }
      }
      FigReadWriteLockUnlockForRead();
    }
  }
}

void playerairplay_setActionAtEndOnAirPlayController(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v3 = pap_AirPlayState(a1);
  if (v3 && v3 != 10 && !playerairplay_deferMediaControlPlaylistForInterstitials(a1))
  {
    if (FigCFEqual())
    {
      int valuePtr = 0;
    }
    else
    {
      if (FigCFEqual())
      {
        int v4 = 1;
      }
      else if (FigCFEqual())
      {
        if (*(unsigned char *)(DerivedStorage + 252) == 1) {
          int v4 = 3;
        }
        else {
          int v4 = 0;
        }
      }
      else
      {
        int v4 = 2;
      }
      int valuePtr = v4;
    }
    CFNumberRef v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, &valuePtr);
    if (a1)
    {
      CFTypeRef v6 = CFRetain(a1);
      pap_playbackSessionSetProxiedProperty(v6, a1, (const void *)*MEMORY[0x1E4F20B88], v5, 0, 0);
      if (v6) {
        CFRelease(v6);
      }
    }
    else
    {
      pap_playbackSessionSetProxiedProperty(0, 0, (const void *)*MEMORY[0x1E4F20B88], v5, 0, 0);
    }
    if (v5) {
      CFRelease(v5);
    }
  }
}

void __itemairplay_playMediaCompletionHandler_block_invoke(uint64_t a1)
{
  if (!**(unsigned char **)(a1 + 32)) {
    CMTimebaseSetRate(*(CMTimebaseRef *)(*(void *)(a1 + 40) + 576), 0.0);
  }
  CFRelease(*(CFTypeRef *)(a1 + 48));
  uint64_t v2 = *(const void **)(a1 + 56);

  CFRelease(v2);
}

void playerairplay_setPlaybackEndTimes(CFTypeRef cf, CFMutableDictionaryRef ProxiedPropertyParams, CMTime *a3, int a4, CMTime *a5, int a6)
{
  if (cf) {
    CFTypeRef v12 = CFRetain(cf);
  }
  else {
    CFTypeRef v12 = 0;
  }
  int v13 = (const __CFAllocator **)MEMORY[0x1E4F1CF80];
  if (a4)
  {
    CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CMTime v21 = *a3;
    CFDictionaryRef v15 = CMTimeCopyAsDictionary(&v21, v14);
    if (v15)
    {
      CFDictionaryRef v16 = v15;
      CFMutableDictionaryRef v17 = ProxiedPropertyParams ? itemairplay_createProxiedPropertyParams() : 0;
      pap_playbackSessionSetProxiedProperty(v12, cf, (const void *)*MEMORY[0x1E4F20BB8], v16, v17, 1);
      CFRelease(v16);
      if (v17) {
        CFRelease(v17);
      }
    }
  }
  if (a6)
  {
    CFAllocatorRef v18 = *v13;
    CMTime v21 = *a5;
    CFDictionaryRef v19 = CMTimeCopyAsDictionary(&v21, v18);
    if (v19)
    {
      CFDictionaryRef v20 = v19;
      if (ProxiedPropertyParams) {
        ProxiedPropertyParams = itemairplay_createProxiedPropertyParams();
      }
      pap_playbackSessionSetProxiedProperty(v12, cf, (const void *)*MEMORY[0x1E4F20BF8], v20, ProxiedPropertyParams, 1);
      CFRelease(v20);
      if (ProxiedPropertyParams) {
        CFRelease(ProxiedPropertyParams);
      }
    }
  }
  if (v12) {
    CFRelease(v12);
  }
}

void pap_playbackSessionSetProxiedProperty(const void *a1, const void *a2, const void *a3, const void *a4, const void *a5, int a6)
{
  if (a1)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    v13[2] = __pap_playbackSessionSetProxiedProperty_block_invoke;
    v13[3] = &__block_descriptor_80_e5_v8__0l;
    v13[4] = a5;
    unint64_t v13[5] = a1;
    _OWORD v13[6] = a2;
    v13[7] = DerivedStorage;
    v13[8] = a3;
    v13[9] = a4;
    pap_DispatchHelper(a1, a2, (uint64_t)v13, a6, 0, a4, a3, a5);
  }
}

void __pap_playbackSessionSetProxiedProperty_block_invoke(void *a1)
{
  uint64_t v2 = (const void *)a1[4];
  if (v2) {
    CFMutableDictionaryRef Mutable = (__CFDictionary *)CFRetain(v2);
  }
  else {
    CFMutableDictionaryRef Mutable = 0;
  }
  if (pap_ShouldUseInterstitialQueuing())
  {
    if (!Mutable) {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    }
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F20950], (const void *)*MEMORY[0x1E4F1CFD0]);
  }
  uint64_t v4 = a1[8];
  uint64_t v5 = *(void *)(a1[7] + 280);
  uint64_t v6 = a1[9];
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, __CFDictionary *, uint64_t))(v8 + 96);
  if (v9) {
    v9(v5, v4, Mutable, v6);
  }
  if (Mutable)
  {
    CFRelease(Mutable);
  }
}

CFMutableDictionaryRef itemairplay_createProxiedPropertyParams()
{
  CMBaseObjectGetDerivedStorage();
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  FigCFDictionarySetValue();
  return Mutable;
}

CFMutableDictionaryRef itemairplay_createProxiedPropertyParamsWithItemUUID()
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  FigCFDictionarySetValue();
  return Mutable;
}

void pap_playbackSessionInsertPlayQueueItemCompletion(uint64_t a1, uint64_t a2)
{
  int v3 = *(NSObject **)(CMBaseObjectGetDerivedStorage() + 104);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __pap_playbackSessionInsertPlayQueueItemCompletion_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = a2;
  dispatch_async(v3, block);
}

void __pap_playbackSessionInsertPlayQueueItemCompletion_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(CFTypeRef **)(a1 + 32);
  if (v2[1])
  {
    CFRelease(v2[1]);
    uint64_t v2 = *(CFTypeRef **)(a1 + 32);
  }
  if (*v2)
  {
    CFRelease(*v2);
    uint64_t v2 = *(CFTypeRef **)(a1 + 32);
  }

  free(v2);
}

uint64_t playerairplay_startAirPlayWithItem(void *a1, const void *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    uint64_t v5 = result;
    uint64_t result = pap_AirPlayState(a1);
    if ((result - 14) >= 3)
    {
      uint64_t result = CMBaseObjectGetDerivedStorage();
      if (result)
      {
        uint64_t v6 = (unsigned char *)result;
        FigReadWriteLockLockForRead();
        if (v6[72]) {
          return FigReadWriteLockUnlockForRead();
        }
        v6[744] = 0;
        if (v6[736] <= 1u)
        {
          if (dword_1E93510E8 >= 4)
          {
            int v17 = 0;
            os_log_type_t type = OS_LOG_TYPE_DEFAULT;
            os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          return FigReadWriteLockUnlockForRead();
        }
        if (pap_ensureEndpointPlaybackSession(a1)) {
          return FigReadWriteLockUnlockForRead();
        }
        if (a1) {
          CFTypeRef v7 = CFRetain(a1);
        }
        else {
          CFTypeRef v7 = 0;
        }
        BOOL BooleanPropertySync = pap_PlaybackSessionGetBooleanPropertySync((uint64_t)v7, (uint64_t)a1, *MEMORY[0x1E4F20B78]);
        if (*(float *)(v5 + 48) != 0.0 || !*(unsigned char *)(v5 + 42) || BooleanPropertySync)
        {
          if (!itemairplay_assureItemForAirPlay())
          {
            if (dword_1E93510E8)
            {
              int v17 = 0;
              os_log_type_t type = OS_LOG_TYPE_DEFAULT;
              CFTypeRef v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            pap_setAirPlayState(a1, 14);
            playerairplay_updateAirPlayVideoIsActiveProperty(a1);
            unsigned __int8 v15 = 0;
            FigCFDictionaryGetBooleanIfPresent();
            FigCFDictionaryGetBooleanIfPresent();
            uint64_t v11 = (const void *)itemairplay_createCPEProtectorIfAvailable((uint64_t)a2, 1, &v15);
            if (v11)
            {
              CFTypeRef v12 = v11;
              int v13 = playerairplay_performAirPlayVodkaExchange(a1, a2, v11, v15);
              CFRelease(v12);
              if (v13)
              {
                playerairplay_resetAirPlayVideoState(a1);
                playerairplay_updateAirPlayVideoIsActiveProperty(a1);
              }
            }
            else
            {
              v6[735] = 1;
            }
            playerairplay_triggerAsyncCheckAndUpdatePlayQueueItems(a1);
            if (!v7) {
              return FigReadWriteLockUnlockForRead();
            }
LABEL_24:
            CFRelease(v7);
            return FigReadWriteLockUnlockForRead();
          }
          if (dword_1E93510E8)
          {
            int v17 = 0;
            os_log_type_t type = OS_LOG_TYPE_DEFAULT;
            uint64_t v9 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          pap_setAirPlayState(a1, 11);
        }
        if (!v7) {
          return FigReadWriteLockUnlockForRead();
        }
        goto LABEL_24;
      }
    }
  }
  return result;
}

uint64_t pap_ensureEndpointPlaybackSession(void *a1)
{
  value[25] = *(void **)MEMORY[0x1E4F143B8];
  value[0] = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)(DerivedStorage + 280)) {
    return 0;
  }
  uint64_t v4 = DerivedStorage;
  if (*(void *)(CMBaseObjectGetDerivedStorage() + 368))
  {
    uint64_t v5 = (const void *)pap_copyPrimaryPlayer();
    uint64_t v6 = CMBaseObjectGetDerivedStorage();
    if (v5)
    {
      uint64_t v7 = v6;
      uint64_t v8 = *(const void **)(v6 + 280);
      if (v8) {
        uint64_t v3 = (uint64_t)CFRetain(v8);
      }
      else {
        uint64_t v3 = 0;
      }
      value[0] = (void *)v3;
      if (dword_1E93510E8)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (!v3) {
        goto LABEL_37;
      }
      CFBagAddValue(*(CFMutableBagRef *)(v7 + 288), (const void *)v3);
      CFDictionaryRef v16 = 0;
LABEL_20:
      *(void *)(v4 + 280) = v3;
      value[0] = 0;
      *(unsigned char *)(v4 + 248) = pap_PlaybackSessionGetBooleanPropertySync((uint64_t)a1, (uint64_t)a1, *MEMORY[0x1E4F20B70]);
      CFDictionaryApplyFunction(*(CFDictionaryRef *)(v4 + 440), (CFDictionaryApplierFunction)playerairplay_applyCachedPropertiesOnBaoAndPlaybackSession, a1);
      int v17 = (uint64_t *)MEMORY[0x1E4F1CFD0];
      if (!*(unsigned char *)(v4 + 448)) {
        int v17 = (uint64_t *)MEMORY[0x1E4F1CFC8];
      }
      pap_PlaybackSessionSetPropertySync((uint64_t)a1, (uint64_t)a1, *MEMORY[0x1E4F20B48], *v17);
      if (*(unsigned char *)(v4 + 448)) {
        playerairplay_createAndResumeVideoSyncTimer();
      }
      uint64_t v3 = 0;
      if (!v16) {
        goto LABEL_37;
      }
      goto LABEL_36;
    }
    if (dword_1E93510E8)
    {
      char v25 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v3 = 0;
LABEL_48:
    uint64_t v5 = 0;
    goto LABEL_37;
  }
  uint64_t v9 = *(void *)(v4 + 256);
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  int v13 = *(uint64_t (**)(uint64_t, void **))(v11 + 72);
  if (v13)
  {
    uint64_t v14 = v13(v9, value);
    if (v14)
    {
      uint64_t v3 = v14;
      goto LABEL_48;
    }
    if (dword_1E93510E8)
    {
      unsigned __int8 v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v18 = FigCFWeakReferenceHolderCreateWithReferencedObject();
    if (!v18)
    {
      uint64_t v5 = 0;
      uint64_t v3 = 4294954510;
      goto LABEL_37;
    }
    CFDictionaryRef v16 = (const void *)v18;
    CFDictionaryRef v19 = value[0];
    uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v20) {
      uint64_t v21 = v20;
    }
    else {
      uint64_t v21 = 0;
    }
    CFTypeRef v22 = *(uint64_t (**)(void *, void, void, const void *))(v21 + 120);
    if (v22)
    {
      uint64_t v23 = v22(v19, pap_handlePlaybackSessionEvent, 0, v16);
      if (v23)
      {
        uint64_t v3 = v23;
      }
      else
      {
        if (value[0])
        {
          CFBagAddValue(*(CFMutableBagRef *)(v4 + 288), value[0]);
          uint64_t v5 = 0;
          uint64_t v3 = (uint64_t)value[0];
          if (value[0]) {
            goto LABEL_20;
          }
LABEL_36:
          CFRelease(v16);
          goto LABEL_37;
        }
        uint64_t v3 = 0;
      }
      uint64_t v5 = 0;
      goto LABEL_36;
    }
    uint64_t v5 = 0;
    uint64_t v3 = 4294954514;
    goto LABEL_36;
  }
  uint64_t v5 = 0;
  uint64_t v3 = 4294954514;
LABEL_37:
  if (value[0]) {
    CFRelease(value[0]);
  }
  if (v5) {
    CFRelease(v5);
  }
  return v3;
}

uint64_t playerairplay_performAirPlayVodkaExchange(const void *a1, const void *a2, const void *a3, int a4)
{
  uint64_t v8 = (void *)MEMORY[0x199711A30]();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)DerivedStorage
    || (uint64_t v10 = (void *)DerivedStorage, !*(void *)(DerivedStorage + 280))
    || (uint64_t v11 = CMBaseObjectGetDerivedStorage()) == 0)
  {
    return 0;
  }
  uint64_t v12 = v11;
  FigReadWriteLockLockForRead();
  if (*(unsigned char *)(v12 + 72)) {
    goto LABEL_39;
  }
  CFRetain(a1);
  CFRetain(a2);
  CFRetain(a3);
  *(void *)(v12 + 768) = FigGetUpTimeNanoseconds();
  uint64_t v13 = objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjectsAndKeys:", v10[30], @"RouteInfo", v10[35], @"EndpointPlaybackSession", *(void *)(v12 + 80), @"MediaControlUUID", 0);
  uint64_t v14 = v10[10];
  v29[0] = MEMORY[0x1E4F143A8];
  v29[1] = 3221225472;
  v29[2] = __playerairplay_performAirPlayVodkaExchange_block_invoke;
  v29[3] = &__block_descriptor_73_e25_v16__0____CFDictionary__8l;
  v29[4] = v10;
  v29[5] = v12;
  char v30 = a4;
  v29[6] = a2;
  v29[7] = a1;
  v29[8] = a3;
  unsigned __int8 v15 = *(void **)(CMBaseObjectGetVTable() + 16);
  if (v15) {
    CFDictionaryRef v16 = v15;
  }
  else {
    CFDictionaryRef v16 = 0;
  }
  if (!*v16 || (int v17 = (uint64_t (*)(const void *, uint64_t, uint64_t, void *))v16[11]) == 0)
  {
    uint64_t v18 = 4294954514;
    goto LABEL_15;
  }
  uint64_t v18 = v17(a3, v13, v14, v29);
  if (v18)
  {
LABEL_15:
    if (a4 && pap_isLocalFileURL(*(const __CFURL **)(v12 + 88), 0))
    {
      uint64_t v22 = itemairplay_createCPEProtectorIfAvailable((uint64_t)a2, 0, &v28);
      if (!v22)
      {
        *(unsigned char *)(v12 + 735) = 1;
        playerairplay_triggerAsyncCheckAndUpdatePlayQueueItems(a1);
        if (!a3) {
          goto LABEL_21;
        }
        goto LABEL_20;
      }
      uint64_t v23 = (const void *)v22;
      uint64_t v18 = playerairplay_performAirPlayVodkaExchange(a1, a2, v22, 0);
      CFRelease(v23);
    }
    if (!a3)
    {
LABEL_21:
      if (a2) {
        CFRelease(a2);
      }
      if (a1) {
        CFRelease(a1);
      }
      goto LABEL_25;
    }
LABEL_20:
    CFRelease(a3);
    goto LABEL_21;
  }
  uint64_t v19 = *(void *)(v12 + 664);
  if (v19)
  {
    uint64_t v20 = *(void **)(CMBaseObjectGetVTable() + 16);
    if (v20) {
      uint64_t v21 = v20;
    }
    else {
      uint64_t v21 = 0;
    }
    if (*v21)
    {
      char v25 = (void (*)(uint64_t))v21[12];
      if (v25) {
        v25(v19);
      }
    }
    unsigned int v26 = *(const void **)(v12 + 664);
    if (v26)
    {
      CFRelease(v26);
      *(void *)(v12 + 664) = 0;
    }
  }
  if (a3) {
    CFTypeRef v27 = CFRetain(a3);
  }
  else {
    CFTypeRef v27 = 0;
  }
  *(void *)(v12 + 664) = v27;
  *(unsigned char *)(v12 + 735) = 2;
  itemairplay_controlPlaybackActivityTimer((uint64_t)a2, 3);
LABEL_39:
  uint64_t v18 = 0;
LABEL_25:
  FigReadWriteLockUnlockForRead();
  return v18;
}

void pap_handlePlaybackSessionEvent(CFTypeRef cf, const __CFDictionary *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = 0;
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  if (a2 && a4)
  {
    if (cf) {
      CFRetain(cf);
    }
    uint64_t v5 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    if (v5)
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      if (!*(void *)(CMBaseObjectGetDerivedStorage() + 360)) {
        goto LABEL_40;
      }
      if (*(unsigned char *)(DerivedStorage + 249))
      {
        if (CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E4F20848]) != (const void *)*MEMORY[0x1E4F1CFD0]) {
          goto LABEL_40;
        }
      }
      else
      {
        uint64_t v8 = (const void *)*MEMORY[0x1E4F20A88];
        CFDictionaryRef Value = CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E4F20A88]);
        if (Value
          || (CFDictionaryRef v20 = (const __CFDictionary *)CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E4F20990])) != 0
          && (CFDictionaryRef Value = CFDictionaryGetValue(v20, v8)) != 0)
        {
          uint64_t v10 = playqueue_copyItemForUUID(*(void *)(DerivedStorage + 32), (uint64_t)Value);
          if (v10)
          {
            CFRelease(v10);
            goto LABEL_40;
          }
        }
        uint64_t v11 = pap_CopyInterstitialPlayer();
        if (!v11
          || (uint64_t v12 = (const void *)v11,
              unsigned int v13 = *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 232) - 18,
              CFRelease(v12),
              v13 <= 0xFFFFFFFD))
        {
          CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E4F20858]);
          if (!FigCFEqual()) {
            goto LABEL_40;
          }
          CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E4F20850]);
          if (!FigCFEqual()) {
            goto LABEL_40;
          }
        }
        if (!playerairplay_interstitialEventActive())
        {
          CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E4F20858]);
          if (!FigCFEqual()) {
            goto LABEL_40;
          }
          CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E4F20850]);
          if (!FigCFEqual()) {
            goto LABEL_40;
          }
          uint64_t v21 = (const void *)pap_CopyInterstitialPlayer();
          uint64_t v22 = CMBaseObjectGetDerivedStorage();
          if (!v21) {
            goto LABEL_40;
          }
          uint64_t v23 = v22;
          if (playqueue_getNumItemsInClientPlayQueue(*(void *)(DerivedStorage + 32))
            && !playqueue_getNumItemsInClientPlayQueue(*(void *)(v23 + 32))
            && (CFTypeRef cfa = 0,
                playqueue_copyCurrentClientPlayQueueItemAndCurrentMediaControlPlayListItem(*(void *)(DerivedStorage + 32), (unint64_t)&cfa, 0), cfa))
          {
            uint64_t v28 = CMBaseObjectGetDerivedStorage();
            memset(v42, 0, 24);
            pap_expectedEndTime((uint64_t)v42);
            memset(&v34, 0, sizeof(v34));
            CMTimebaseGetTime(&v34, *(CMTimebaseRef *)(v28 + 576));
            if (v42[0].flags)
            {
              CMTimeMake(&type, 5, 1);
              CMTime lhs = v42[0];
              CMTimeSubtract(&time2, &lhs, &type);
              CMTime lhs = v34;
              BOOL v24 = CMTimeCompare(&lhs, &time2) < 1;
            }
            else
            {
              BOOL v24 = 0;
            }
            CFRelease(cfa);
          }
          else
          {
            BOOL v24 = 0;
          }
          CFRelease(v21);
          if (!v24)
          {
LABEL_40:
            char v25 = (unsigned char *)CMBaseObjectGetDerivedStorage();
            if (!*v25)
            {
              unsigned int v26 = v25;
              CFRetain(v5);
              CFRetain(a2);
              if (cf) {
                CFRetain(cf);
              }
              CFTypeRef v27 = *((void *)v26 + 13);
              block[0] = MEMORY[0x1E4F143A8];
              block[1] = 3221225472;
              block[2] = __pap_handlePlaybackSessionEvent_block_invoke;
              block[3] = &__block_descriptor_56_e5_v8__0l;
              block[4] = v5;
              void block[5] = cf;
              void block[6] = a2;
              dispatch_async(v27, block);
            }
            goto LABEL_44;
          }
        }
      }
      uint64_t v14 = pap_CopyInterstitialPlayer();
      if (dword_1E93510E8)
      {
        LODWORD(time2.CFDictionarySetValue(theDict, key, value) = 0;
        LOBYTE(type.CFDictionarySetValue(theDict, key, value) = 0;
        os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v16 = time2.value;
        if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type.value)) {
          unsigned int v17 = v16;
        }
        else {
          unsigned int v17 = v16 & 0xFFFFFFFE;
        }
        if (v17)
        {
          uint64_t v18 = CMBaseObjectGetDerivedStorage() + 450;
          if (v14) {
            uint64_t v19 = (const char *)(CMBaseObjectGetDerivedStorage() + 450);
          }
          else {
            uint64_t v19 = "";
          }
          LODWORD(v34.CFDictionarySetValue(theDict, key, value) = 136316418;
          *(CMTimeValue *)((char *)&v34.value + 4) = (CMTimeValue)"pap_handlePlaybackSessionEvent";
          LOWORD(v34.flags) = 2048;
          *(void *)((char *)&v34.flags + 2) = v5;
          HIWORD(v34.epoch) = 2082;
          uint64_t v35 = v18;
          __int16 v36 = 2048;
          CFDictionaryRef v37 = a2;
          __int16 v38 = 2048;
          uint64_t v39 = v14;
          __int16 v40 = 2082;
          uint64_t v41 = v19;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      CFRelease(v5);
      uint64_t v5 = (const void *)v14;
      if (v14) {
        goto LABEL_40;
      }
    }
  }
LABEL_44:
  if (cf) {
    CFRelease(cf);
  }
  if (v5) {
    CFRelease(v5);
  }
}

void playerairplay_applyCachedPropertiesOnBaoAndPlaybackSession(const void *a1, uint64_t a2, const void *a3)
{
  CMBaseObjectGetDerivedStorage();
  if (CFEqual(a1, @"AudioMode"))
  {
    playerairplay_setAndCacheAudioMode(a3, a2, 0);
  }
}

uint64_t pap_PlaybackSessionSetPropertySync(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v15 = 0;
  unsigned int v16 = &v15;
  uint64_t v17 = 0x2020000000;
  int v18 = 0;
  if (!a1)
  {
    uint64_t v11 = FigSignalErrorAt();
    goto LABEL_5;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  v14[2] = __pap_PlaybackSessionSetPropertySync_block_invoke;
  v14[3] = &unk_1E579CE80;
  v14[4] = &v15;
  v14[5] = DerivedStorage;
  v14[6] = a3;
  void v14[7] = a4;
  if (a2 == a1)
  {
    uint64_t v11 = __pap_PlaybackSessionSetPropertySync_block_invoke(v14);
LABEL_5:
    uint64_t v10 = v11;
    *((_DWORD *)v16 + 6) = v11;
    goto LABEL_6;
  }
  uint64_t v9 = *(NSObject **)(DerivedStorage + 104);
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  v13[2] = __pap_PlaybackSessionSetPropertySync_block_invoke_2;
  v13[3] = &unk_1E579CEA8;
  v13[4] = v14;
  unint64_t v13[5] = &v15;
  dispatch_sync(v9, v13);
  uint64_t v10 = *((unsigned int *)v16 + 6);
LABEL_6:
  _Block_object_dispose(&v15, 8);
  return v10;
}

void sub_19429F83C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void playerairplay_createAndResumeVideoSyncTimer()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  dispatch_source_t v1 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, *(dispatch_queue_t *)(DerivedStorage + 104));
  *(void *)(DerivedStorage + 488) = v1;
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = (void *)FigCFWeakReferenceHolderCreateWithReferencedObject();
    dispatch_set_context(v2, v3);
    dispatch_set_finalizer_f(*(dispatch_object_t *)(DerivedStorage + 488), (dispatch_function_t)FigCFRelease_3);
    dispatch_source_set_event_handler_f(*(dispatch_source_t *)(DerivedStorage + 488), (dispatch_function_t)pap_videoSyncTimerEventHandler);
    dispatch_source_set_timer(*(dispatch_source_t *)(DerivedStorage + 488), 0, 0x12A05F200uLL, 0x4C4B40uLL);
    uint64_t v4 = *(NSObject **)(DerivedStorage + 488);
    dispatch_resume(v4);
  }
  else
  {
    FigSignalErrorAt();
  }
}

void __pap_handlePlaybackSessionEvent_block_invoke(uint64_t a1)
{
  if (pap_PlaybackSessionIsActive(*(CFTypeRef *)(a1 + 32), *(void *)(a1 + 40))) {
    playerairplay_mediaControlServerEventHandler(*(const void **)(a1 + 32), *(const __CFDictionary **)(a1 + 48));
  }
  uint64_t v2 = *(const void **)(a1 + 40);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 48);
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = *(const void **)(a1 + 32);
  if (v4)
  {
    CFRelease(v4);
  }
}

uint64_t pap_PlaybackSessionIsActive(CFTypeRef a1, uint64_t a2)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    if (*DerivedStorage)
    {
      return 0;
    }
    else
    {
      if (a1) {
        a1 = CFRetain(a1);
      }
      uint64_t v5 = CMBaseObjectGetDerivedStorage();
      if (*(unsigned char *)v5) {
        a2 = 0;
      }
      else {
        a2 = *(void *)(v5 + 280) == a2;
      }
      CFRelease(a1);
    }
  }
  return a2;
}

void playerairplay_mediaControlServerEventHandler(const void *a1, const __CFDictionary *a2)
{
  uint64_t v187 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage) {
    return;
  }
  uint64_t v5 = DerivedStorage;
  int v6 = pap_AirPlayState(a1);
  if (!v6) {
    return;
  }
  if (v6 == 10) {
    return;
  }
  CFDictionaryRef Value = (void *)CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E4F20860]);
  uint64_t v8 = CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E4F20858]);
  if (CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E4F20838]))
  {
    if (!FigCFEqual()) {
      return;
    }
  }
  if (CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E4F20830])
    && !FigCFEqual()
    && !FigCFEqual()
    && !FigCFEqual())
  {
    FigCFEqual();
  }
  CFDictionaryRef v9 = (const __CFDictionary *)CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E4F20840]);
  uint64_t v10 = CMBaseObjectGetDerivedStorage();
  if (v9)
  {
    uint64_t v11 = v10;
    CFDictionaryGetValue(v9, (const void *)*MEMORY[0x1E4F20828]);
    uint64_t v12 = CFDictionaryGetValue(v9, (const void *)*MEMORY[0x1E4F20820]);
    cf.CMTimeValue value = 0;
    unsigned int v13 = CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E4F20A88]);
    uint64_t v14 = *(void *)(v11 + 32);
    if (!v13)
    {
      playqueue_copyCurrentClientPlayQueueItemAndCurrentMediaControlPlayListItem(v14, 0, (unint64_t)&cf);
      if (!v12) {
        goto LABEL_23;
      }
LABEL_18:
      CFTypeID v15 = CFGetTypeID(v12);
      if (v15 == CFNumberGetTypeID())
      {
        LODWORD(valuePtr[0].CFDictionarySetValue(theDict, key, value) = 0;
        CFNumberGetValue((CFNumberRef)v12, kCFNumberSInt32Type, valuePtr);
        int v16 = FigCFEqual();
        int v17 = valuePtr[0].value;
        if (v16 && LODWORD(valuePtr[0].value) == -1009)
        {
          int v17 = -12929;
          LODWORD(valuePtr[0].CFDictionarySetValue(theDict, key, value) = -12929;
        }
        itemairplay_postFailNotificationWithError((const void *)cf.value, v17);
        goto LABEL_25;
      }
LABEL_23:
      if (dword_1E93510E8)
      {
        LODWORD(v164.CFDictionarySetValue(theDict, key, value) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
LABEL_25:
      if (cf.value) {
        CFRelease((CFTypeRef)cf.value);
      }
      goto LABEL_27;
    }
    cf.CMTimeValue value = (CMTimeValue)playqueue_copyItemForUUID(v14, (uint64_t)v13);
    if (cf.value)
    {
      if (!v12) {
        goto LABEL_23;
      }
      goto LABEL_18;
    }
    if (dword_1E93510E8)
    {
      LODWORD(v164.CFDictionarySetValue(theDict, key, value) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      unsigned int v129 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v129, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
LABEL_27:
  if (!Value) {
    goto LABEL_186;
  }
  if (FigCFEqual())
  {
    CFDictionaryRef v19 = (const __CFDictionary *)CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E4F20C70]);
    *(void *)CMTime type = 0;
    uint64_t v20 = CMBaseObjectGetDerivedStorage();
    *(void *)uint64_t v168 = 0;
    playqueue_copyCurrentClientPlayQueueItemAndCurrentMediaControlPlayListItem(*(void *)(v20 + 32), 0, (unint64_t)type);
    int v21 = pap_AirPlayState(a1);
    BOOL v22 = (v21 & 0xFFFFFFFE) == 0xE || v21 == 16;
    CFTypeRef v23 = *(CFTypeRef *)type;
    if (!v22 || !*(void *)type)
    {
LABEL_182:
      if (v23) {
        goto LABEL_183;
      }
LABEL_184:
      CFDictionaryRef Value = 0;
      goto LABEL_185;
    }
    uint64_t v24 = CMBaseObjectGetDerivedStorage();
    if (!v24)
    {
LABEL_181:
      CFTypeRef v23 = *(CFTypeRef *)type;
      goto LABEL_182;
    }
    uint64_t v25 = v24;
    FigReadWriteLockLockForRead();
    if (*(unsigned char *)(v25 + 72))
    {
      unsigned int v26 = v8;
      int v27 = FigSignalErrorAt();
      CFURLRef v28 = 0;
LABEL_168:
      FigReadWriteLockUnlockForRead();
      if (v27)
      {
        LODWORD(v164.CFDictionarySetValue(theDict, key, value) = 0;
        os_log_type_t v167 = OS_LOG_TYPE_DEFAULT;
        uint64_t v94 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v95 = v164.value;
        if (os_log_type_enabled(v94, v167)) {
          unsigned int v96 = v95;
        }
        else {
          unsigned int v96 = v95 & 0xFFFFFFFE;
        }
        if (v96)
        {
          if (a1) {
            CFURLRef v97 = (const char *)(CMBaseObjectGetDerivedStorage() + 450);
          }
          else {
            CFURLRef v97 = "";
          }
          LODWORD(cf.CFDictionarySetValue(theDict, key, value) = 136316162;
          *(CMTimeValue *)((char *)&cf.value + 4) = (CMTimeValue)"playerairplay_mediaControlHandleTypeUnhandledURLRequest";
          LOWORD(cf.flags) = 2048;
          *(void *)((char *)&cf.flags + 2) = a1;
          HIWORD(cf.epoch) = 2082;
          uint64_t v171 = v97;
          __int16 v172 = 2048;
          uint64_t v173 = *(void *)v168;
          __int16 v174 = 1024;
          int v175 = v27;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      uint64_t v8 = v26;
      if (v28) {
        CFRelease(v28);
      }
      goto LABEL_181;
    }
    os_log_type_t v167 = OS_LOG_TYPE_DEFAULT;
    char v32 = pap_EndpointSupportsSecureStop(a1);
    CFStringRef v33 = (const __CFString *)CFDictionaryGetValue(v19, (const void *)*MEMORY[0x1E4F1FAC0]);
    CFTypeRef v156 = CFDictionaryGetValue(v19, (const void *)*MEMORY[0x1E4F1FAA8]);
    if (!v33)
    {
      int v27 = FigSignalErrorAt();
      CFURLRef v28 = 0;
      goto LABEL_167;
    }
    uint64_t v155 = *MEMORY[0x1E4F1CF80];
    CFURLRef v28 = CFURLCreateWithString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v33, 0);
    if (!v28 || (CFStringRef v153 = v33, v154 = v32, !FigCFDictionaryGetInt64IfPresent()))
    {
LABEL_300:
      int v85 = FigSignalErrorAt();
      goto LABEL_301;
    }
    CFURLRef v158 = v28;
    if (dword_1E93510E8)
    {
      LODWORD(cf.CFDictionarySetValue(theDict, key, value) = 0;
      LOBYTE(v164.CFDictionarySetValue(theDict, key, value) = 0;
      CMTime v34 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v35 = cf.value;
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v36 = v35;
      }
      else {
        unsigned int v36 = v35 & 0xFFFFFFFE;
      }
      if (v36)
      {
        if (a1) {
          CFDictionaryRef v37 = (const char *)(CMBaseObjectGetDerivedStorage() + 450);
        }
        else {
          CFDictionaryRef v37 = "";
        }
        LODWORD(block.CFDictionarySetValue(theDict, key, value) = 136315906;
        *(CMTimeValue *)((char *)&block.value + 4) = (CMTimeValue)"playerairplay_mediaControlHandleTypeUnhandledURLRequest";
        LOWORD(block.flags) = 2048;
        *(void *)((char *)&block.flags + 2) = a1;
        HIWORD(block.epoch) = 2082;
        unsigned int v177 = v37;
        *(_WORD *)uint64_t v178 = 2048;
        *(void *)&v178[2] = *(void *)v168;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v157 = CFDictionaryGetValue(v19, (const void *)*MEMORY[0x1E4F1FA90]);
    if (pap_FigCFDictionaryGetBooleanIfPresent((uint64_t)v19, (const void *)*MEMORY[0x1E4F1FA98], &v167)
      && v167 == OS_LOG_TYPE_DEFAULT)
    {
      goto LABEL_141;
    }
    uint64_t v47 = CMBaseObjectGetDerivedStorage();
    uint64_t v48 = v47;
    cf.CMTimeValue value = 0;
    v164.CMTimeValue value = 0;
    if (!*(unsigned char *)(v47 + 848))
    {
LABEL_88:
      if (*(void *)(v48 + 840)) {
        goto LABEL_118;
      }
      valuePtr[0].CMTimeValue value = 0;
      uint64_t v58 = CMBaseObjectGetDerivedStorage();
      block.CMTimeValue value = 0;
      *(void *)(v48 + 840) = 0;
      FigCPECryptorGetClassID();
      int v59 = CMDerivedObjectCreate();
      if (!v59)
      {
        if (valuePtr[0].value)
        {
          uint64_t v60 = CMBaseObjectGetDerivedStorage();
          uint64_t v61 = FigSimpleMutexCreate();
          *(void *)(v60 + 8) = v61;
          if (v61)
          {
            FigCFWeakReferenceStore();
            uint64_t CMBaseObject = FigAssetGetCMBaseObject(*(void *)(v58 + 16));
            uint64_t v63 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v63) {
              uint64_t v64 = v63;
            }
            else {
              uint64_t v64 = 0;
            }
            CFURLRef v69 = *(void (**)(uint64_t, __CFString *, uint64_t, CMTime *))(v64 + 48);
            if (!v69)
            {
LABEL_109:
              CFTypeRef v71 = (const void *)block.value;
              *(void *)(v48 + 840) = valuePtr[0].value;
              valuePtr[0].CMTimeValue value = 0;
              if (v71) {
                CFRelease(v71);
              }
              goto LABEL_118;
            }
            v69(CMBaseObject, @"assetProperty_CreationOptionsDictionary", v155, &block);
            if (block.value)
            {
              DataCFDictionaryRef Value = (const void *)FigCFDictionaryGetDataValue();
              *(void *)(v60 + 80) = DataValue;
              if (DataValue) {
                CFRetain(DataValue);
              }
              goto LABEL_109;
            }
            *(void *)(v48 + 840) = valuePtr[0].value;
LABEL_118:
            int v159 = v8;
            char v76 = *(unsigned char *)(v48 + 848);
            uint64_t v77 = *(const void **)(v48 + 856);
            uint64_t v78 = CMBaseObjectGetDerivedStorage();
            MEMORY[0x19970E910](*(void *)(v78 + 8));
            *(unsigned char *)(v78 + 32) = v76;
            uint64_t v79 = *(const void **)(v78 + 24);
            *(void *)(v78 + 24) = v77;
            if (v77) {
              CFRetain(v77);
            }
            if (v79) {
              CFRelease(v79);
            }
            MEMORY[0x19970E930](*(void *)(v78 + 8));
            int v27 = 0;
            uint64_t v8 = v159;
            goto LABEL_123;
          }
        }
        int v59 = FigSignalErrorAt();
      }
      int v27 = v59;
      if (valuePtr[0].value) {
        CFRelease((CFTypeRef)valuePtr[0].value);
      }
      if (v27)
      {
LABEL_123:
        if (cf.value) {
          CFRelease((CFTypeRef)cf.value);
        }
        CFURLRef v28 = v158;
        if (v164.value) {
          CFRelease((CFTypeRef)v164.value);
        }
        if (v27) {
          goto LABEL_167;
        }
        if (v167)
        {
          uint64_t v80 = CMBaseObjectGetDerivedStorage();
          if (PKDIsContentKeyBossEnabled())
          {
            if (!*(void *)(v80 + 880) && _os_feature_enabled_impl())
            {
              uint64_t v81 = FigAssetGetCMBaseObject(*(void *)(v80 + 16));
              uint64_t v82 = *(void *)(CMBaseObjectGetVTable() + 8);
              if (v82) {
                uint64_t v83 = v82;
              }
              else {
                uint64_t v83 = 0;
              }
              BOOL v84 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, uint64_t))(v83 + 48);
              if (!v84)
              {
                int v27 = -12782;
                CFURLRef v28 = v158;
LABEL_167:
                unsigned int v26 = v8;
                goto LABEL_168;
              }
              int v85 = v84(v81, @"assetProperty_ContentKeyBoss", v155, v80 + 880);
              CFURLRef v28 = v158;
              if (v85) {
                goto LABEL_301;
              }
            }
          }
        }
        if (v156)
        {
          uint64_t v86 = CMBaseObjectGetDerivedStorage();
          MEMORY[0x19970E910](*(void *)(v86 + 8));
          uint64_t v87 = *(const void **)(v86 + 104);
          *(void *)(v86 + 104) = v156;
          CFRetain(v156);
          if (v87) {
            CFRelease(v87);
          }
          MEMORY[0x19970E930](*(void *)(v86 + 8));
        }
LABEL_141:
        int v85 = itemairplay_ensureCustomURLLoader();
        if (!v85)
        {
          if (*(void *)(CMBaseObjectGetDerivedStorage() + 880) && v167)
          {
            uint64_t v88 = malloc_type_calloc(1uLL, 0x20uLL, 0x10600402A5BA684uLL);
            if (v88)
            {
              uint64_t v89 = v88;
              v88[1] = *(void *)v168;
              v88[3] = CFRetain(v28);
              void *v89 = *(void *)(v25 + 656);
              *(void *)(v25 + 656) = v89;
              CFRetain(v153);
              if (v157) {
                CFRetain(v157);
              }
              if (*(void *)type) {
                CFRetain(*(CFTypeRef *)type);
              }
              if (a1) {
                CFRetain(a1);
              }
              CMTimeScale v90 = *(NSObject **)(v20 + 80);
              block.CMTimeValue value = MEMORY[0x1E4F143A8];
              *(void *)&block.CMTimeScale timescale = 3221225472;
              block.CMTimeEpoch epoch = (CMTimeEpoch)__playerairplay_mediaControlHandleTypeUnhandledURLRequest_block_invoke;
              unsigned int v177 = (const char *)&__block_descriptor_96_e5_v8__0l;
              *(void *)uint64_t v178 = v25;
              *(void *)&v178[8] = v153;
              *(void *)&v178[16] = *(void *)v168;
              uint64_t v179 = v20;
              uint64_t v180 = v157;
              CFTypeRef v181 = *(CFTypeRef *)type;
              CFTypeRef v182 = v89;
LABEL_166:
              __int16 v183 = a1;
              dispatch_async(v90, &block);
              int v27 = 0;
              goto LABEL_167;
            }
          }
          else
          {
            uint64_t v91 = malloc_type_calloc(1uLL, 0x30uLL, 0x106004072379B5EuLL);
            if (v91)
            {
              CFTypeRef v92 = v91;
              if (v19) {
                CFTypeRef v93 = CFRetain(v19);
              }
              else {
                CFTypeRef v93 = 0;
              }
              v92[2] = *(void *)v168;
              v92[3] = v93;
              *CFTypeRef v92 = *(void *)(v25 + 648);
              *(void *)(v25 + 648) = v92;
              if (*(void *)type) {
                CFRetain(*(CFTypeRef *)type);
              }
              if (a1) {
                CFRetain(a1);
              }
              if (v157) {
                CFRetain(v157);
              }
              if (v19) {
                CFRetain(v19);
              }
              CFRetain(v28);
              CMTimeScale v90 = *(NSObject **)(v20 + 80);
              block.CMTimeValue value = MEMORY[0x1E4F143A8];
              *(void *)&block.CMTimeScale timescale = 3221225472;
              block.CMTimeEpoch epoch = (CMTimeEpoch)__playerairplay_mediaControlHandleTypeUnhandledURLRequest_block_invoke_2;
              unsigned int v177 = (const char *)&__block_descriptor_98_e5_v8__0l;
              *(void *)uint64_t v178 = v25;
              *(void *)&v178[8] = v20;
              *(void *)&v178[16] = v92;
              uint64_t v179 = (uint64_t)v28;
              char v184 = v154;
              os_log_type_t v185 = v167;
              uint64_t v180 = v157;
              CFTypeRef v181 = v19;
              CFTypeRef v182 = *(CFTypeRef *)type;
              goto LABEL_166;
            }
          }
          goto LABEL_300;
        }
LABEL_301:
        int v27 = v85;
        goto LABEL_167;
      }
      goto LABEL_118;
    }
    uint64_t v49 = FigAssetGetCMBaseObject(*(void *)(v47 + 16));
    uint64_t v50 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v50) {
      uint64_t v51 = v50;
    }
    else {
      uint64_t v51 = 0;
    }
    unsigned int v52 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CMTime *))(v51 + 48);
    if (v52)
    {
      int v53 = v52(v49, @"assetProperty_DefaultContentKeySession", v155, &cf);
      if (v53) {
        goto LABEL_336;
      }
      CMTimeValue v54 = cf.value;
      uint64_t v55 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v55) {
        uint64_t v56 = v55;
      }
      else {
        uint64_t v56 = 0;
      }
      uint64_t v57 = *(uint64_t (**)(CMTimeValue, uint64_t, uint64_t, CMTime *))(v56 + 48);
      if (v57)
      {
        int v53 = v57(v54, 0x1EE53F5F8, v155, &v164);
        if (!v53)
        {
          int v53 = FigAirPlaySecureStopRouterRegisterSecureStopManager(*(void *)(v48 + 856), v164.value);
          if (!v53) {
            goto LABEL_88;
          }
        }
LABEL_336:
        int v27 = v53;
        goto LABEL_123;
      }
    }
    int v27 = -12782;
    goto LABEL_123;
  }
  if (FigCFEqual())
  {
    uint64_t v29 = CMBaseObjectGetDerivedStorage();
    CFDictionaryRef Value = 0;
    if (!a1) {
      goto LABEL_185;
    }
    if (!*(unsigned char *)(v29 + 128)) {
      goto LABEL_185;
    }
    CFRetain(a1);
    CFDictionaryRef Value = (void *)CFRetain(a1);
    pap_playbackSessionGetProxiedProperty(Value, a1, 0, 0, (const void *)*MEMORY[0x1E4F20C28], 0, (uint64_t)pap_playbackSessionGetTimedMetadataCompletion, (uint64_t)a1);
    if (!Value) {
      goto LABEL_185;
    }
    goto LABEL_61;
  }
  if (FigCFEqual())
  {
    char v30 = CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E4F20A88]);
    uint64_t v31 = (void *)pap_copyItemFromUUIDOrCurrentInMediaControlPlaylist((uint64_t)a1, (uint64_t)v30);
    CFDictionaryRef Value = v31;
    if (v31)
    {
      itemairplay_postItemNotification(v31, @"NewAccessLogEntry", 0);
LABEL_61:
      CFTypeRef v23 = Value;
LABEL_183:
      CFRelease(v23);
      goto LABEL_184;
    }
    goto LABEL_185;
  }
  if (FigCFEqual())
  {
    __int16 v38 = CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E4F20A88]);
    CFDictionaryRef Value = (void *)pap_copyItemFromUUIDOrCurrentInMediaControlPlaylist((uint64_t)a1, (uint64_t)v38);
    if (Value)
    {
      uint64_t v39 = CMBaseObjectGetDerivedStorage();
      if (*(unsigned char *)(v39 + 532))
      {
        uint64_t v40 = v39;
        uint64_t v41 = v8;
        CFStringRef v42 = (long long *)(v39 + 520);
        MEMORY[0x19970E910](*(void *)(v39 + 344));
        long long v43 = *v42;
        uint64_t v8 = v41;
        *(_OWORD *)&valuePtr[0].CMTimeValue value = v43;
        valuePtr[0].CMTimeEpoch epoch = *(void *)(v40 + 536);
        FigCFDictionarySetCMTime();
        MEMORY[0x19970E930](*(void *)(v40 + 344));
        playerairplay_triggerAsyncCheckAndUpdatePlayQueueItems(a1);
      }
      itemairplay_postItemNotification(Value, @"TimeJumped", 0);
      itemairplay_requestAirPlayPlaybackInfo(Value, 0, 1, 0);
      goto LABEL_61;
    }
    goto LABEL_185;
  }
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      playerairplay_mediaControlHandleTypeCurrentItemChanged(a1, a2);
      goto LABEL_184;
    }
    if (FigCFEqual())
    {
      CFTypeRef v65 = CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E4F20A88]);
      CFDictionaryRef Value = (void *)playqueue_copyItemForUUID(*((void *)v5 + 4), (uint64_t)v65);
      uint64_t v66 = CMBaseObjectGetDerivedStorage();
      if (Value)
      {
        CFStringRef v67 = (unsigned char *)v66;
        if (playqueue_getIndexOfAirPlayItem(*((void *)v5 + 4), Value) != -1)
        {
          if (!v67[740])
          {
            CFURLRef v68 = (const void **)&kFigPlaybackItemNotification_FailedToBecomeReadyForPlayback;
            if (v67[737]) {
              CFURLRef v68 = (const void **)&kFigPlaybackItemNotification_DidPlayToTheEnd;
            }
            itemairplay_postItemNotification(Value, *v68, 0);
          }
          if (!v67[72]) {
            v67[740] = 1;
          }
        }
        goto LABEL_61;
      }
      goto LABEL_185;
    }
    if (FigCFEqual())
    {
      CFURLRef v72 = CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E4F20A88]);
      CFDictionaryRef Value = (void *)playqueue_copyItemForUUID(*((void *)v5 + 4), (uint64_t)v72);
      uint64_t v73 = CMBaseObjectGetDerivedStorage();
      if (!Value) {
        goto LABEL_185;
      }
      uint64_t v74 = v73;
      FigReadWriteLockLockForRead();
      if (!*(unsigned char *)(v74 + 72)) {
        itemairplay_postItemNotification(Value, @"ItemWasRemovedFromPlayQueue", 0);
      }
      FigReadWriteLockUnlockForRead();
    }
    else
    {
      if (FigCFEqual())
      {
        ProxiedPropertyParamsWithItemUUID = CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E4F20A88]);
        if (a1)
        {
          CFRetain(a1);
          CFTypeRef v128 = CFRetain(a1);
        }
        else
        {
          CFTypeRef v128 = 0;
        }
        if (ProxiedPropertyParamsWithItemUUID) {
          ProxiedPropertyParamsWithItemUUID = itemairplay_createProxiedPropertyParamsWithItemUUID();
        }
        pap_playbackSessionGetProxiedProperty(v128, a1, 0, 0, (const void *)*MEMORY[0x1E4F20C00], ProxiedPropertyParamsWithItemUUID, (uint64_t)pap_playbackSessionGetMediaSelectionCompletion, (uint64_t)a1);
        if (v128) {
          CFRelease(v128);
        }
        if (!ProxiedPropertyParamsWithItemUUID) {
          goto LABEL_286;
        }
        CFStringRef v75 = ProxiedPropertyParamsWithItemUUID;
LABEL_285:
        CFRelease(v75);
LABEL_286:
        CFDictionaryRef Value = 0;
        goto LABEL_185;
      }
      if (FigCFEqual())
      {
        unsigned int v130 = CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E4F20A88]);
        if (!v130) {
          return;
        }
        CFDictionaryRef Value = (void *)playqueue_copyItemForUUID(*((void *)v5 + 4), (uint64_t)v130);
        if (!Value) {
          goto LABEL_185;
        }
        uint64_t v131 = CMBaseObjectGetDerivedStorage();
        CMTimeFlags v132 = (void *)CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E4F20940]);
        FigReadWriteLockLockForRead();
        if (!*(unsigned char *)(v131 + 72))
        {
          unsigned int v133 = *(const void **)(v131 + 832);
          *(void *)(v131 + 832) = v132;
          if (v132) {
            CFRetain(v132);
          }
          if (v133) {
            CFRelease(v133);
          }
        }
        FigReadWriteLockUnlockForRead();
        if (v132) {
          itemairplay_postTaggedRangeMetadataChangedNotificationIfNeeded(Value, v132);
        }
      }
      else
      {
        if (!FigCFEqual())
        {
          if (FigCFEqual())
          {
            CFDictionaryRef v139 = (const __CFDictionary *)CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E4F207B8]);
            if (!v139) {
              CFDictionaryRef v139 = a2;
            }
            uint64_t v140 = CFDictionaryGetValue(v139, (const void *)*MEMORY[0x1E4F20A88]);
            if (!v140) {
              return;
            }
            CFDictionaryRef Value = (void *)playqueue_copyItemForUUID(*((void *)v5 + 4), (uint64_t)v140);
            if (!Value) {
              goto LABEL_185;
            }
            uint64_t v141 = CMBaseObjectGetDerivedStorage();
            if ((*(unsigned char *)(v141 + 532) & 1) == 0) {
              goto LABEL_185;
            }
            uint64_t v142 = v141;
            memset(valuePtr, 0, 24);
            CFDictionaryRef v143 = (const __CFDictionary *)CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E4F20A08]);
            CMTimeMakeFromDictionary(valuePtr, v143);
            memset(&block, 0, sizeof(block));
            CFDictionaryRef v144 = (const __CFDictionary *)CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E4F20A70]);
            CMTimeMakeFromDictionary(&block, v144);
            if ((valuePtr[0].flags & 0x1D) == 1 && (block.flags & 0x1D) == 1)
            {
              CMTime cf = *(CMTime *)(v142 + 520);
              CMTime v164 = valuePtr[0];
              CMTimeSubtract(&v161, &cf, &v164);
              CMTimeAbsoluteValue(&v162, &v161);
              CMTimeMake(&v160, 1, 10000);
              if ((CMTimeCompare(&v162, &v160) & 0x80000000) == 0) {
                goto LABEL_185;
              }
            }
            else if (*((float *)v5 + 12) <= 0.0)
            {
              goto LABEL_185;
            }
            if (!v5[56])
            {
              if (block.flags)
              {
                CMTime cf = block;
                pap_UpdateAirPlayReachedTimeToPausePlayback(Value, &cf);
              }
              pap_HandleAirPlayReachedTimeToPausePlayback(a1, Value);
              itemairplay_requestAirPlayPlaybackInfo(Value, 0, 0, 0);
            }
            goto LABEL_185;
          }
          if (FigCFEqual())
          {
            uint64_t v145 = CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E4F20A88]);
            CFDictionaryRef Value = (void *)pap_copyItemFromUUIDOrCurrentInMediaControlPlaylist((uint64_t)a1, (uint64_t)v145);
            LOBYTE(valuePtr[0].CFDictionarySetValue(theDict, key, value) = 0;
            if (Value
              && pap_FigCFDictionaryGetBooleanIfPresent((uint64_t)a2, (const void *)*MEMORY[0x1E4F20A98], valuePtr))
            {
              playerairplay_mediaControlHandlePlaybackLikelyToKeepUp(a1, Value, LOBYTE(valuePtr[0].value));
            }
            goto LABEL_185;
          }
          if (FigCFEqual())
          {
            uint64_t v147 = CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E4F20A88]);
            CFDictionaryRef Value = (void *)pap_copyItemFromUUIDOrCurrentInMediaControlPlaylist((uint64_t)a1, (uint64_t)v147);
            LODWORD(valuePtr[0].CFDictionarySetValue(theDict, key, value) = 0;
            if (Value && FigCFDictionaryGetInt32IfPresent()) {
              playerairplay_mediaControlHandleStallCountChanged((uint64_t)a1, Value, valuePtr[0].value);
            }
            goto LABEL_185;
          }
          if (FigCFEqual())
          {
            int v148 = CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E4F20A88]);
            valuePtr[0].CMTimeValue value = 0;
            if (!v148)
            {
              CFDictionaryRef Value = 0;
              goto LABEL_258;
            }
            CFDictionaryRef Value = (void *)pap_copyItemFromUUIDOrCurrentInMediaControlPlaylist((uint64_t)a1, (uint64_t)v148);
            if (Value && FigCFDictionaryGetValueIfPresent())
            {
              uint64_t v149 = CMBaseObjectGetDerivedStorage();
              if (!v149) {
                goto LABEL_258;
              }
              uint64_t v150 = v149;
              if (*(unsigned char *)(v149 + 72)) {
                goto LABEL_258;
              }
              if (itemairplay_isRangeArraysDifferent(*(CFArrayRef *)(v149 + 616), (const __CFArray *)valuePtr[0].value))
              {
                int v151 = *(const void **)(v150 + 616);
                uint64_t v152 = (const void *)valuePtr[0].value;
                *(void *)(v150 + 616) = valuePtr[0].value;
                if (v152) {
                  CFRetain(v152);
                }
                if (v151) {
                  CFRelease(v151);
                }
                itemairplay_postItemNotification(Value, @"PlayableRangeChanged", 0);
              }
            }
            goto LABEL_185;
          }
          goto LABEL_286;
        }
        CFDictionaryRef v134 = (const __CFDictionary *)CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E4F207B8]);
        if (!v134) {
          CFDictionaryRef v134 = a2;
        }
        CMTime v135 = CFDictionaryGetValue(v134, (const void *)*MEMORY[0x1E4F20A88]);
        if (!v135) {
          return;
        }
        CFDictionaryRef Value = (void *)playqueue_copyItemForUUID(*((void *)v5 + 4), (uint64_t)v135);
        if (!Value) {
          goto LABEL_185;
        }
        uint64_t v136 = CMBaseObjectGetDerivedStorage();
        memset(valuePtr, 0, 24);
        CFDictionaryRef v137 = (const __CFDictionary *)CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E4F20A08]);
        CMTimeMakeFromDictionary(valuePtr, v137);
        memset(&block, 0, sizeof(block));
        CFDictionaryRef v138 = (const __CFDictionary *)CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E4F20A68]);
        CMTimeMakeFromDictionary(&block, v138);
        if ((valuePtr[0].flags & 0x1D) == 1 && (block.flags & 0x1D) == 1)
        {
          CMTime cf = *(CMTime *)(v136 + 496);
          CMTime v164 = valuePtr[0];
          CMTimeSubtract(&time, &cf, &v164);
          CMTimeAbsoluteValue(&time1, &time);
          CMTimeMake(&time2, 1, 10000);
          if (CMTimeCompare(&time1, &time2) < 0) {
            *(CMTime *)(v136 + 496) = block;
          }
        }
        itemairplay_postItemNotification(Value, @"ReachedTimeToPauseBuffering", 0);
        itemairplay_requestAirPlayPlaybackInfo(Value, 0, 0, 0);
      }
    }
    CFStringRef v75 = Value;
    goto LABEL_285;
  }
  int v44 = CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E4F20A88]);
  CFDictionaryRef Value = (void *)pap_copyItemFromUUIDOrCurrentInMediaControlPlaylist((uint64_t)a1, (uint64_t)v44);
  if (Value)
  {
    CMTime cf = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
    uint64_t v45 = CMBaseObjectGetDerivedStorage();
    LODWORD(v164.CFDictionarySetValue(theDict, key, value) = 0;
    uint64_t v46 = *(unsigned int *)(v45 + 864);
    *(_DWORD *)(v45 + 864) = FPSupport_IncrementSeekID(*(_DWORD *)(v45 + 864));
    if (FigCFDictionaryGetCMTimeIfPresent())
    {
      if (cf.flags)
      {
        if (FigCFDictionaryGetFloat32IfPresent())
        {
          itemairplay_clearCoordinatedPlaybackSynchronizationTimebase();
          playerairplay_clearCoordinatedPlaybackSynchronizationTimebaseForItemsAfterItem((uint64_t)a1, (char *)Value);
          valuePtr[0] = cf;
          playerairplay_notifyStartupTasksOfSeek(a1, Value, v46, (long long *)&valuePtr[0].value, *(float *)&v164.value);
          valuePtr[0] = cf;
          itemairplay_sendSeekToTimeNotification(Value, v46, 0, 0);
          goto LABEL_185;
        }
        if (!dword_1E93510E8) {
          goto LABEL_259;
        }
      }
      else if (!dword_1E93510E8)
      {
        goto LABEL_259;
      }
    }
    else if (!dword_1E93510E8)
    {
      goto LABEL_259;
    }
    *(_DWORD *)CMTime type = 0;
    v168[0] = OS_LOG_TYPE_DEFAULT;
    uint64_t v146 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v146, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_259;
  }
LABEL_185:
  playerairplay_triggerAsyncCheckAndUpdatePlayQueueItems(a1);
LABEL_186:
  if (!v8) {
    goto LABEL_258;
  }
  if (FigCFEqual())
  {
    uint64_t v98 = CMBaseObjectGetDerivedStorage();
    cf.CMTimeValue value = 0;
    playqueue_copyCurrentClientPlayQueueItemAndCurrentMediaControlPlayListItem(*(void *)(v98 + 32), 0, (unint64_t)&cf);
    if (a2) {
      CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E4F20850]);
    }
    if (FigCFEqual())
    {
      if (cf.value)
      {
        uint64_t v109 = CMBaseObjectGetDerivedStorage();
        if (!*(unsigned char *)(v109 + 740))
        {
          if (*(unsigned char *)(v109 + 737)) {
            uint64_t v110 = (const void **)&kFigPlaybackItemNotification_DidPlayToTheEnd;
          }
          else {
            uint64_t v110 = (const void **)&kFigPlaybackItemNotification_FailedToBecomeReadyForPlayback;
          }
          itemairplay_postItemNotification((const void *)cf.value, *v110, 0);
        }
        *(unsigned char *)(v109 + 740) = 1;
      }
      if (FigCFEqual())
      {
        v164.CMTimeValue value = 0;
        FPSupport_CreateSetRateOptions((const __CFAllocator *)*MEMORY[0x1E4F1CF80], 1, (CFMutableDictionaryRef *)&v164);
        if (dword_1E93510E8)
        {
          *(_DWORD *)CMTime type = 0;
          v168[0] = OS_LOG_TYPE_DEFAULT;
          unsigned int v111 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v112 = *(_DWORD *)type;
          if (os_log_type_enabled(v111, v168[0])) {
            unsigned int v113 = v112;
          }
          else {
            unsigned int v113 = v112 & 0xFFFFFFFE;
          }
          if (v113)
          {
            if (a1) {
              uint64_t v114 = (const char *)(CMBaseObjectGetDerivedStorage() + 450);
            }
            else {
              uint64_t v114 = "";
            }
            LODWORD(block.CFDictionarySetValue(theDict, key, value) = 136315650;
            *(CMTimeValue *)((char *)&block.value + 4) = (CMTimeValue)"playerairplay_mediaControlHandleStateStopped";
            LOWORD(block.flags) = 2048;
            *(void *)((char *)&block.flags + 2) = a1;
            HIWORD(block.epoch) = 2082;
            unsigned int v177 = v114;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        playerairplay_updatePlayerRateToMatch(a1, v164.value, 0.0);
        if (v164.value) {
          CFRelease((CFTypeRef)v164.value);
        }
      }
    }
    else
    {
      playerairplay_shutdownAirPlayVideoPlaybackDueToServer(a1);
    }
    int v121 = (const void *)cf.value;
    if (!cf.value) {
      goto LABEL_258;
    }
LABEL_257:
    CFRelease(v121);
    goto LABEL_258;
  }
  if (FigCFEqual())
  {
    CFDictionaryRef v99 = (const __CFDictionary *)CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E4F207B8]);
    if (!v99) {
      goto LABEL_258;
    }
    uint64_t v100 = CFDictionaryGetValue(v99, (const void *)*MEMORY[0x1E4F20A88]);
    uint64_t v101 = pap_copyItemFromUUIDOrCurrentInMediaControlPlaylist((uint64_t)a1, (uint64_t)v100);
    uint64_t v102 = CMBaseObjectGetDerivedStorage();
    if (v102)
    {
      uint64_t v103 = v102;
      FigReadWriteLockLockForRead();
      if (!*(unsigned char *)(v103 + 72))
      {
        CFIndex v104 = *(OpaqueCMTimebase **)(v103 + 576);
        if (v104)
        {
          if (dword_1E93510E8)
          {
            LODWORD(cf.CFDictionarySetValue(theDict, key, value) = 0;
            LOBYTE(v164.CFDictionarySetValue(theDict, key, value) = 0;
            CMTimeEpoch v105 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int v106 = cf.value;
            if (os_log_type_enabled(v105, v164.value)) {
              unsigned int v107 = v106;
            }
            else {
              unsigned int v107 = v106 & 0xFFFFFFFE;
            }
            if (v107)
            {
              if (a1) {
                uint64_t v108 = (const char *)(CMBaseObjectGetDerivedStorage() + 450);
              }
              else {
                uint64_t v108 = "";
              }
              if (v101) {
                unsigned int v126 = (const char *)(CMBaseObjectGetDerivedStorage() + 868);
              }
              else {
                unsigned int v126 = "";
              }
              LODWORD(block.CFDictionarySetValue(theDict, key, value) = 136316162;
              *(CMTimeValue *)((char *)&block.value + 4) = (CMTimeValue)"playerairplay_mediaControlServerEventHandler";
              LOWORD(block.flags) = 2048;
              *(void *)((char *)&block.flags + 2) = a1;
              HIWORD(block.epoch) = 2082;
              unsigned int v177 = v108;
              *(_WORD *)uint64_t v178 = 2048;
              *(void *)&v178[2] = v101;
              *(_WORD *)&v178[10] = 2082;
              *(void *)&v178[12] = v126;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            CFIndex v104 = *(OpaqueCMTimebase **)(v103 + 576);
          }
          CMTimebaseSetRate(v104, 0.0);
        }
      }
      FigReadWriteLockUnlockForRead();
    }
LABEL_255:
    if (!v101) {
      goto LABEL_258;
    }
    goto LABEL_256;
  }
  if (FigCFEqual())
  {
    unsigned int v115 = CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E4F20A88]);
    uint64_t v101 = pap_copyItemFromUUIDOrCurrentInMediaControlPlaylist((uint64_t)a1, (uint64_t)v115);
    if (playerairplay_ignoreRemoteRateUpdate(a1, v101, 0.0)) {
      goto LABEL_255;
    }
    valuePtr[0].CMTimeValue value = 0;
    FPSupport_CreateSetRateOptions((const __CFAllocator *)*MEMORY[0x1E4F1CF80], 39, (CFMutableDictionaryRef *)valuePtr);
    CFDictionaryAddValue((CFMutableDictionaryRef)valuePtr[0].value, @"PauseAffectsCoordinatedPlayback", (const void *)*MEMORY[0x1E4F1CFD0]);
    CMTimeValue v116 = valuePtr[0].value;
    float v117 = 0.0;
    goto LABEL_243;
  }
  if (FigCFEqual())
  {
    CFDictionaryRef v118 = (const __CFDictionary *)CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E4F207B8]);
    uint64_t v119 = CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E4F20A88]);
    unsigned int v120 = (const void *)pap_copyItemFromUUIDOrCurrentInMediaControlPlaylist((uint64_t)a1, (uint64_t)v119);
    uint64_t v101 = (uint64_t)v120;
    if (v118 && v120)
    {
      itemairplay_getPlaybackInfoCompletionHandler(v120, a1, v118, 0, 0, 1, 0, 0);
LABEL_256:
      int v121 = (const void *)v101;
      goto LABEL_257;
    }
    valuePtr[0].CMTimeValue value = 0;
    FPSupport_CreateSetRateOptions((const __CFAllocator *)*MEMORY[0x1E4F1CF80], 39, (CFMutableDictionaryRef *)valuePtr);
    CMTimeValue v116 = valuePtr[0].value;
    float v117 = 1.0;
LABEL_243:
    playerairplay_updatePlayerRateToMatch(a1, v116, v117);
    if (valuePtr[0].value) {
      CFRelease((CFTypeRef)valuePtr[0].value);
    }
    goto LABEL_255;
  }
  if (FigCFEqual() && dword_1E93510E8)
  {
    LODWORD(cf.CFDictionarySetValue(theDict, key, value) = 0;
    LOBYTE(v164.CFDictionarySetValue(theDict, key, value) = 0;
    int v122 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v123 = cf.value;
    if (os_log_type_enabled(v122, v164.value)) {
      unsigned int v124 = v123;
    }
    else {
      unsigned int v124 = v123 & 0xFFFFFFFE;
    }
    if (v124)
    {
      if (a1) {
        unsigned int v125 = (const char *)(CMBaseObjectGetDerivedStorage() + 450);
      }
      else {
        unsigned int v125 = "";
      }
      LODWORD(block.CFDictionarySetValue(theDict, key, value) = 136315650;
      *(CMTimeValue *)((char *)&block.value + 4) = (CMTimeValue)"playerairplay_mediaControlServerEventHandler";
      LOWORD(block.flags) = 2048;
      *(void *)((char *)&block.flags + 2) = a1;
      HIWORD(block.epoch) = 2082;
      unsigned int v177 = v125;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
LABEL_258:
  if (Value) {
LABEL_259:
  }
    CFRelease(Value);
}

const void *playqueue_copyItemForUUID(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  MEMORY[0x19970E910](*(void *)(a1 + 8));
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)a1);
  if (Count < 1) {
    goto LABEL_9;
  }
  CFIndex v4 = Count;
  uint64_t v5 = 1;
  do
  {
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)a1, v5 - 1);
    CMBaseObjectGetDerivedStorage();
    int v7 = FigCFEqual();
    if (v5 >= v4) {
      break;
    }
    ++v5;
  }
  while (!v7);
  if (v7)
  {
    if (ValueAtIndex) {
      CFRetain(ValueAtIndex);
    }
  }
  else
  {
LABEL_9:
    CFDictionaryRef ValueAtIndex = 0;
  }
  MEMORY[0x19970E930](*(void *)(a1 + 8));
  return ValueAtIndex;
}

BOOL playerairplay_interstitialEventActive()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  playqueue_copyCurrentClientPlayQueueItemAndCurrentMediaControlPlayListItem(*(void *)(DerivedStorage + 32), (unint64_t)&cf, 0);
  if (!cf) {
    return 0;
  }
  dispatch_source_t v1 = *(const void **)(CMBaseObjectGetDerivedStorage() + 784);
  if (v1) {
    BOOL v2 = CFEqual(v1, &stru_1EE53F4B8) == 0;
  }
  else {
    BOOL v2 = 0;
  }
  CFRelease(cf);
  return v2;
}

uint64_t playqueue_getNumItemsInClientPlayQueue(uint64_t a1)
{
  MEMORY[0x19970E910](*(void *)(a1 + 8));
  uint64_t v2 = *(unsigned int *)(a1 + 16);
  MEMORY[0x19970E930](*(void *)(a1 + 8));
  return v2;
}

uint64_t pap_expectedEndTime@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = result;
  uint64_t v4 = MEMORY[0x1E4F1F9F0];
  *(_OWORD *)a1 = *MEMORY[0x1E4F1F9F0];
  *(void *)(a1 + 16) = *(void *)(v4 + 16);
  if (*(unsigned char *)(result + 460))
  {
    *(_OWORD *)a1 = *(_OWORD *)(result + 448);
    CMTimeEpoch epoch = *(void *)(result + 464);
    goto LABEL_11;
  }
  uint64_t result = *(void *)(result + 624);
  if (result)
  {
    uint64_t result = CFArrayGetCount((CFArrayRef)result);
    if (result >= 1)
    {
      CFArrayRef v5 = *(const __CFArray **)(v3 + 624);
      CFIndex Count = CFArrayGetCount(v5);
      uint64_t result = (uint64_t)CFArrayGetValueAtIndex(v5, Count - 1);
      if (result)
      {
        CFDictionaryRef v7 = (const __CFDictionary *)result;
        CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)result, (const void *)*MEMORY[0x1E4F20C38]);
        uint64_t result = (uint64_t)CFDictionaryGetValue(v7, (const void *)*MEMORY[0x1E4F20C30]);
        if (Value && result != 0)
        {
          CFDictionaryRef v10 = (const __CFDictionary *)result;
          memset(&v16, 0, sizeof(v16));
          CMTimeMakeFromDictionary(&v16, Value);
          memset(&v15, 0, sizeof(v15));
          CMTimeMakeFromDictionary(&v15, v10);
          CMTime lhs = v16;
          CMTime v12 = v15;
          uint64_t result = (uint64_t)CMTimeAdd(&v14, &lhs, &v12);
          *(_OWORD *)a1 = *(_OWORD *)&v14.value;
          CMTimeEpoch epoch = v14.epoch;
LABEL_11:
          *(void *)(a1 + 16) = epoch;
        }
      }
    }
  }
  return result;
}

uint64_t pap_copyItemFromUUIDOrCurrentInMediaControlPlaylist(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = 0;
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (result)
  {
    uint64_t v4 = result;
    if (*(unsigned char *)result)
    {
      return 0;
    }
    else if (!a2 || (result = (uint64_t)playqueue_copyItemForUUID(*(void *)(result + 32), a2), (uint64_t v5 = result) == 0))
    {
      playqueue_copyCurrentClientPlayQueueItemAndCurrentMediaControlPlayListItem(*(void *)(v4 + 32), 0, (unint64_t)&v5);
      return v5;
    }
  }
  return result;
}

uint64_t itemairplay_clearCoordinatedPlaybackSynchronizationTimebase()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigReadWriteLockLockForRead();
  if (*(unsigned char *)(DerivedStorage + 72))
  {
    FigSignalErrorAt();
  }
  else
  {
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 592));
    dispatch_source_t v1 = *(const void **)(DerivedStorage + 584);
    if (v1)
    {
      CFRelease(v1);
      *(void *)(DerivedStorage + 584) = 0;
    }
    MEMORY[0x19970E930](*(void *)(DerivedStorage + 592));
  }

  return FigReadWriteLockUnlockForRead();
}

void playerairplay_clearCoordinatedPlaybackSynchronizationTimebaseForItemsAfterItem(uint64_t a1, char *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFArrayRef PlayQueueSnapshot = playqueue_createPlayQueueSnapshot(*(void *)(DerivedStorage + 32), 0);
  if (!PlayQueueSnapshot) {
    return;
  }
  CFArrayRef v5 = PlayQueueSnapshot;
  CFIndex Count = CFArrayGetCount(PlayQueueSnapshot);
  if (!a2) {
    goto LABEL_5;
  }
  v9.size_t length = CFArrayGetCount(v5);
  v9.CFIndex location = 0;
  FirstIndexOfCFDictionaryRef Value = CFArrayGetFirstIndexOfValue(v5, v9, a2);
  if (FirstIndexOfValue != -1)
  {
    a2 = (char *)(FirstIndexOfValue + 1);
LABEL_5:
    if ((uint64_t)a2 < Count)
    {
      do
      {
        CFArrayGetValueAtIndex(v5, (CFIndex)a2);
        itemairplay_clearCoordinatedPlaybackSynchronizationTimebase();
        ++a2;
      }
      while ((char *)Count != a2);
    }
  }

  CFRelease(v5);
}

CFArrayRef playerairplay_notifyStartupTasksOfSeek(const void *a1, const void *a2, int a3, long long *a4, float a5)
{
  CFArrayRef result = (const __CFArray *)CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    CFArrayRef result = (const __CFArray *)pap_AirPlayState(a1);
    if (result)
    {
      if (result != 10)
      {
        long long v11 = *a4;
        uint64_t v12 = *((void *)a4 + 2);
        return playerairplay_notifyStartupTasksOfEvents(a1, a2, 2, a3, (uint64_t)&v11, &v13, a5);
      }
    }
  }
  return result;
}

void playerairplay_mediaControlHandleTypeCurrentItemChanged(const void *a1, const __CFDictionary *a2)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  CFDictionaryRef Value = CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E4F20A88]);
  if (Value)
  {
    CFTypeRef v5 = playqueue_copyItemForUUID(*(void *)(DerivedStorage + 32), (uint64_t)Value);
    uint64_t v6 = CMBaseObjectGetDerivedStorage();
  }
  else
  {
    uint64_t v6 = 0;
    CFTypeRef v5 = 0;
  }
  if (dword_1E93510E8)
  {
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(unsigned char *)DerivedStorage)
  {
    CFDictionaryRef v8 = 0;
    goto LABEL_84;
  }
  playqueue_copyCurrentClientPlayQueueItemAndCurrentMediaControlPlayListItem(*(void *)(DerivedStorage + 32), 0, (unint64_t)&cf);
  if (cf)
  {
    BOOL v9 = !Value || v5 == 0;
    BOOL v10 = v9 || v5 == cf;
    if (!v10 && v6 != 0)
    {
      if (*(unsigned char *)(v6 + 732) && *(unsigned char *)(v6 + 733))
      {
        uint64_t v16 = CMBaseObjectGetDerivedStorage();
        FigReadWriteLockLockForRead();
        if (!*(unsigned char *)(v16 + 72) && *(unsigned char *)(v16 + 733))
        {
          char v32 = *(OpaqueCMTimebase **)(v16 + 576);
          if (v32) {
            CMTimebaseSetRate(v32, 0.0);
          }
          itemairplay_controlPlaybackActivityTimer((uint64_t)cf, 0);
          if (!*(unsigned char *)(v16 + 737)) {
            itemairplay_postItemNotification(cf, @"FailedToBecomeReadyForPlayback", 0);
          }
          *(unsigned char *)(v16 + 739) = 2;
          itemairplay_doCleanupAtEndOfPlayback();
          itemairplay_cleanupItemForAirPlay((uint64_t)cf, 1);
          playqueue_removeItemFromClientQueueAndFromMediaControlPlaylist(*(void *)(DerivedStorage + 32), cf, 1, 1);
          itemairplay_postItemNotification(cf, @"ItemStoppedBeingCurrent", 0);
          if (cf)
          {
            CFRelease(cf);
            CFTypeRef cf = 0;
          }
        }
        FigReadWriteLockUnlockForRead();
        if (!cf && playqueue_getNumItemsInClientPlayQueue(*(void *)(DerivedStorage + 32))) {
          playqueue_copyCurrentClientPlayQueueItemAndCurrentMediaControlPlayListItem(*(void *)(DerivedStorage + 32), 0, (unint64_t)&cf);
        }
      }
LABEL_33:
      FigReadWriteLockLockForRead();
      if (*(unsigned char *)(v6 + 72))
      {
        CFDictionaryRef v8 = 0;
        int v17 = 0;
      }
      else
      {
        int v18 = *(unsigned __int8 *)(v6 + 739);
        if (v5 == cf)
        {
          int v17 = 0;
        }
        else
        {
          uint64_t v19 = *(void *)(DerivedStorage + 32);
          MEMORY[0x19970E910](*(void *)(v19 + 8));
          CFIndex IndexOfAirPlayItemInternal = playqueue_getIndexOfAirPlayItemInternal((CFArrayRef *)v19, v5);
          if (IndexOfAirPlayItemInternal >= 1)
          {
            uint64_t v21 = IndexOfAirPlayItemInternal + 1;
            do
            {
              CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)v19, 0);
              uint64_t v23 = CMBaseObjectGetDerivedStorage();
              if (*(unsigned char *)(v23 + 733))
              {
                *(unsigned char *)(v23 + 739) = 2;
                itemairplay_doCleanupAtEndOfPlayback();
                itemairplay_cleanupItemForAirPlay((uint64_t)ValueAtIndex, 1);
                playqueue_removeItemFromClientQueueAndFromMediaControlPlaylistInternal(v19, ValueAtIndex, 1, 1);
              }
              --v21;
            }
            while (v21 > 1);
          }
          MEMORY[0x19970E930](*(void *)(v19 + 8));
          int v17 = 1;
        }
        *(unsigned char *)(v6 + 739) = 1;
        if (v18 == 1)
        {
          CFDictionaryRef v8 = 0;
        }
        else
        {
          CFDictionaryRef v8 = playerairplay_createItemDidChangeNotificationPayload(a2);
          playerairplay_postPlayerNotification(a1, @"CurrentItemDidChange", v8);
        }
        itemairplay_postItemNotification(v5, @"TimebaseChanged", 0);
        itemairplay_controlPlaybackActivityTimer((uint64_t)v5, 1);
        int v27 = *(OpaqueCMTimebase **)(v6 + 576);
        CMTime time = *(CMTime *)(v6 + 160);
        CMTimebaseSetTime(v27, &time);
        itemairplay_postItemNotification(v5, @"TimeJumped", 0);
        itemairplay_controlPlaybackActivityTimer((uint64_t)v5, 2);
      }
      FigReadWriteLockUnlockForRead();
      int v28 = 1;
      if (!v17) {
        goto LABEL_80;
      }
      goto LABEL_78;
    }
  }
  if (v5) {
    goto LABEL_33;
  }
  uint64_t v12 = *(void *)(DerivedStorage + 32);
  MEMORY[0x19970E910](*(void *)(v12 + 8));
  int v13 = *(_DWORD *)(v12 + 20);
  MEMORY[0x19970E930](*(void *)(v12 + 8));
  if (Value) {
    BOOL v14 = 1;
  }
  else {
    BOOL v14 = v13 == 0;
  }
  if (v14) {
    goto LABEL_26;
  }
  uint64_t v24 = *(void *)(DerivedStorage + 32);
  MEMORY[0x19970E910](*(void *)(v24 + 8));
  if (CFArrayGetCount(*(CFArrayRef *)v24) < 1)
  {
    unsigned int v26 = 0;
  }
  else
  {
    uint64_t v25 = CFArrayGetValueAtIndex(*(CFArrayRef *)v24, 0);
    unsigned int v26 = v25;
    if (v25) {
      CFRetain(v25);
    }
  }
  MEMORY[0x19970E930](*(void *)(v24 + 8));
  uint64_t v29 = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (!v26)
  {
    if (dword_1E93510E8)
    {
      uint64_t v31 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
LABEL_26:
    int v15 = 0;
    goto LABEL_73;
  }
  char v30 = v29;
  if (v29[733] && v29[740])
  {
    FigReadWriteLockLockForRead();
    if (v30[72])
    {
      int v15 = 0;
    }
    else
    {
      v30[739] = 2;
      itemairplay_doCleanupAtEndOfPlayback();
      int v15 = 1;
      itemairplay_cleanupItemForAirPlay((uint64_t)v26, 1);
      itemairplay_postItemNotification(v26, @"ItemWasRemovedFromPlayQueue", 0);
      itemairplay_postItemNotification(v26, @"ItemStoppedBeingCurrent", 0);
      playqueue_removeItemFromClientQueueAndFromMediaControlPlaylist(*(void *)(DerivedStorage + 32), v26, 1, 1);
    }
    FigReadWriteLockUnlockForRead();
  }
  else
  {
    if (v29[734])
    {
      pap_stopAirPlayVideoPlayback(a1);
      v30[734] = 0;
      playerairplay_startAirPlayWithItem(a1, v26);
    }
    int v15 = 0;
  }
  CFRelease(v26);
LABEL_73:
  CFDictionaryRef v8 = playerairplay_createItemDidChangeNotificationPayload(a2);
  playerairplay_postPlayerNotification(a1, @"CurrentItemDidChange", v8);
  uint64_t v33 = *(void *)(DerivedStorage + 32);
  MEMORY[0x19970E910](*(void *)(v33 + 8));
  int v34 = *(_DWORD *)(v33 + 16);
  MEMORY[0x19970E930](*(void *)(v33 + 8));
  if (!v34)
  {
    if (*(unsigned char *)(DerivedStorage + 42))
    {
      unsigned int v35 = *(NSObject **)(DerivedStorage + 112);
      dispatch_time_t v36 = dispatch_time(0, 10000000000);
      dispatch_source_set_timer(v35, v36, 0xFFFFFFFFFFFFFFFFLL, 0x4C4B40uLL);
    }
    else
    {
      playerairplay_checkIfAirPlayVideoSessionNeedsToStop(a1);
    }
  }
  int v28 = 0;
  if (!v15) {
    goto LABEL_80;
  }
LABEL_78:
  if (cf) {
    itemairplay_postItemNotification(cf, @"ItemStoppedBeingCurrent", 0);
  }
LABEL_80:
  playerairplay_inferPlaybackStateFromAirPlayPlayer(a1, v28);
  if (!*(unsigned char *)(DerivedStorage + 249)
    && (*(void *)(CMBaseObjectGetDerivedStorage() + 368) || *(void *)(CMBaseObjectGetDerivedStorage() + 360)))
  {
    playerairplay_setActionAtEndOnAirPlayController(a1);
  }
LABEL_84:
  if (cf) {
    CFRelease(cf);
  }
  if (v5) {
    CFRelease(v5);
  }
  if (v8) {
    CFRelease(v8);
  }
}

uint64_t playqueue_getIndexOfAirPlayItem(uint64_t a1, const void *a2)
{
  if (!a2) {
    return -1;
  }
  MEMORY[0x19970E910](*(void *)(a1 + 8));
  CFIndex IndexOfAirPlayItemInternal = playqueue_getIndexOfAirPlayItemInternal((CFArrayRef *)a1, a2);
  MEMORY[0x19970E930](*(void *)(a1 + 8));
  return IndexOfAirPlayItemInternal;
}

void pap_playbackSessionGetProxiedProperty(const void *a1, const void *a2, int a3, NSObject *a4, const void *a5, const void *a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    v17[0] = MEMORY[0x1E4F143A8];
    v17[1] = 3221225472;
    v17[2] = __pap_playbackSessionGetProxiedProperty_block_invoke;
    v17[3] = &__block_descriptor_88_e5_v8__0l;
    _OWORD v17[4] = a6;
    v17[5] = a1;
    v17[6] = a2;
    v17[7] = DerivedStorage;
    v17[8] = a5;
    v17[9] = a7;
    v17[10] = a8;
    pap_DispatchHelper(a1, a2, (uint64_t)v17, a3, a4, a6, a5, 0);
  }
}

void pap_playbackSessionGetMediaSelectionCompletion(uint64_t a1, const void *a2, int a3, const void *a4)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (a3 || (CFDictionaryRef v8 = DerivedStorage, *DerivedStorage))
  {
LABEL_12:
    if (!a4) {
      return;
    }
    goto LABEL_9;
  }
  if (!a2)
  {
    if (!a4) {
      return;
    }
    goto LABEL_8;
  }
  CFTypeID v9 = CFGetTypeID(a2);
  if (v9 != CFArrayGetTypeID())
  {
    int v14 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_12;
  }
  if (!a4) {
    return;
  }
  CFRetain(a2);
LABEL_8:
  CFRetain(a4);
  BOOL v10 = *((void *)v8 + 13);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __pap_playbackSessionGetMediaSelectionCompletion_block_invoke;
  block[3] = &__block_descriptor_56_e5_v8__0l;
  block[4] = v8;
  void block[5] = a2;
  void block[6] = a4;
  dispatch_async(v10, block);
LABEL_9:
  CFRelease(a4);
}

uint64_t itemairplay_postTaggedRangeMetadataChangedNotificationIfNeeded(const void *a1, void *a2)
{
  long long values = a2;
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    uint64_t v5 = result;
    FigReadWriteLockLockForRead();
    if (!*(unsigned char *)(v5 + 72) && *(uint64_t *)(v5 + 824) >= 1)
    {
      CFDictionaryRef v6 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)&kFigPlaybackItemParameter_CurrentTaggedRangeMetadataArray, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      itemairplay_postItemNotification(a1, @"TaggedRangeMetadataChanged", v6);
      if (v6) {
        CFRelease(v6);
      }
    }
    return FigReadWriteLockUnlockForRead();
  }
  return result;
}

void __playerairplay_mediaControlHandleTypeUnhandledURLRequest_block_invoke(uint64_t a1)
{
  CFTypeRef v21 = 0;
  CFTypeRef cf = 0;
  v20[0] = 1;
  v20[1] = playerairplay_contentKeyRequestDidSucceed;
  _OWORD v20[2] = playerairplay_contentKeyRequestDidFail;
  uint64_t v2 = *MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v4 = Mutable;
  if (Mutable)
  {
    uint64_t v5 = *(const void **)(*(void *)(a1 + 32) + 640);
    if (v5) {
      CFDictionarySetValue(Mutable, @"FHRP_CustomURLLoader", v5);
    }
    if (!FigContentKeySpecifierCreate(1, *(const void **)(a1 + 40), 0, 0, (uint64_t *)&cf))
    {
      __int16 v19 = *(unsigned __int8 *)(*(void *)(a1 + 56) + 251);
      if (!FigContentKeyRequestParamsCreate(v2, cf, 0, 2, 2, 0, 0, *(const void **)(*(void *)(a1 + 32) + 840), *(void *)(a1 + 48), v19, SHIBYTE(v19), 0, (uint64_t *)&v21))
      {
        uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 880);
        CFTypeRef v7 = v21;
        uint64_t v8 = *(void *)(a1 + 64);
        uint64_t v9 = *(void *)(*(void *)(a1 + 56) + 80);
        uint64_t v10 = *(void *)(a1 + 72);
        uint64_t v11 = *(void *)(a1 + 80);
        uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v13 = v12 ? v12 : 0;
        int v14 = *(void (**)(uint64_t, CFTypeRef, uint64_t, void, __CFDictionary *, uint64_t, void *, uint64_t, uint64_t, uint64_t))(v13 + 8);
        if (v14) {
          v14(v6, v7, 5, 0, v4, v8, v20, v10, v9, v11 + 16);
        }
      }
    }
  }
  else
  {
    FigSignalErrorAt();
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v21) {
    CFRelease(v21);
  }
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v15 = *(const void **)(a1 + 40);
  if (v15) {
    CFRelease(v15);
  }
  uint64_t v16 = *(const void **)(a1 + 64);
  if (v16) {
    CFRelease(v16);
  }
  int v17 = *(const void **)(a1 + 72);
  if (v17) {
    CFRelease(v17);
  }
  int v18 = *(const void **)(a1 + 88);
  if (v18) {
    CFRelease(v18);
  }
}

void playerairplay_contentKeyRequestDidSucceed(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

void playerairplay_contentKeyRequestDidFail(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, __CFError *a5)
{
}

void __playerairplay_mediaControlHandleTypeUnhandledURLRequest_block_invoke_2(uint64_t a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  char v24 = 0;
  FigReadWriteLockLockForRead();
  if (**(unsigned char **)(a1 + 40)
    || (uint64_t v2 = *(void *)(a1 + 32), *(unsigned char *)(v2 + 72))
    || !*(void *)(v2 + 640)
    || !*(void *)(a1 + 48))
  {
    int v3 = 0;
LABEL_4:
    uint64_t v4 = 0;
    goto LABEL_5;
  }
  CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  int Mutable = FigCustomURLRequestInfoCreateMutable();
  if (Mutable
    || (int Mutable = FigCustomURLRequestInfoSetHTTPHeaders()) != 0
    || (int Mutable = FigCustomURLRequestInfoSetCryptor()) != 0
    || (int Mutable = FigCustomURLRequestInfoSetIsSecureStopSupported()) != 0)
  {
    int v3 = Mutable;
    goto LABEL_4;
  }
  if (*(unsigned char *)(a1 + 97))
  {
    uint64_t v13 = CFArrayCreateMutable(v11, 0, MEMORY[0x1E4F1D510]);
    uint64_t v4 = v13;
    if (!v13)
    {
      int IsRenewalRequest = FigSignalErrorAt();
      goto LABEL_46;
    }
    CFArrayAppendValue(v13, @"com.apple.streamingkeydelivery.contentkey");
    if (*(unsigned char *)(*(void *)(a1 + 40) + 251)) {
      CFArrayAppendValue(v4, @"com.apple.streamingkeydelivery.persistentcontentkey");
    }
    int IsRenewalRequest = FigCustomURLRequestInfoSetAllowedUniversalTypeIdentifiers();
    if (IsRenewalRequest) {
      goto LABEL_46;
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  if (pap_FigCFDictionaryGetBooleanIfPresent(*(void *)(a1 + 72), (const void *)*MEMORY[0x1E4F1FAA0], &v24))
  {
    if (v24)
    {
      int IsRenewalRequest = FigCustomURLRequestInfoSetIsRenewalRequest();
      if (IsRenewalRequest) {
        goto LABEL_46;
      }
    }
  }
  CFTypeRef v15 = cf;
  if (cf)
  {
    CFTypeRef v15 = CFRetain(cf);
    CFTypeRef v16 = cf;
  }
  else
  {
    CFTypeRef v16 = 0;
  }
  *(void *)(*(void *)(a1 + 48) + 32) = v15;
  uint64_t v17 = *(void *)(*(void *)(a1 + 32) + 640);
  uint64_t v18 = *(void *)(a1 + 80);
  uint64_t v19 = *(void *)(*(void *)(a1 + 40) + 80);
  uint64_t v20 = *(void *)(a1 + 48);
  uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v21) {
    uint64_t v22 = v21;
  }
  else {
    uint64_t v22 = 0;
  }
  uint64_t v23 = *(uint64_t (**)(uint64_t, CFTypeRef, uint64_t, uint64_t, void, uint64_t))(v22 + 24);
  if (v23)
  {
    int IsRenewalRequest = v23(v17, v16, v18, v19, playerairplay_customURLLoaderDataCallback, v20 + 8);
LABEL_46:
    int v3 = IsRenewalRequest;
    goto LABEL_5;
  }
  int v3 = -12782;
LABEL_5:
  FigReadWriteLockUnlockForRead();
  if (v3)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v6 = *(const void **)(a1 + 56);
  if (v6) {
    CFRelease(v6);
  }
  CFTypeRef v7 = *(const void **)(a1 + 64);
  if (v7) {
    CFRelease(v7);
  }
  uint64_t v8 = *(const void **)(a1 + 80);
  if (v8) {
    CFRelease(v8);
  }
  uint64_t v9 = *(const void **)(a1 + 88);
  if (v9) {
    CFRelease(v9);
  }
  uint64_t v10 = *(const void **)(a1 + 72);
  if (v10) {
    CFRelease(v10);
  }
  if (v4) {
    CFRelease(v4);
  }
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t playerairplay_customURLLoaderDataCallback(const void *a1, uint64_t a2, uint64_t a3, OpaqueCMBlockBuffer *a4, char a5, __CFError *a6)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v13 = CMBaseObjectGetDerivedStorage() + 648;
  do
  {
    uint64_t v13 = *(void *)v13;
    if (!v13)
    {
      if (dword_1E93510E8)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      itemairplay_postFailNotificationWithError(a1, -17227);
      return FigReadWriteLockUnlockForRead();
    }
  }
  while (*(void *)(v13 + 8) != a2);
  FigReadWriteLockLockForRead();
  if (dword_1E93510E8)
  {
    int v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!*(unsigned char *)(DerivedStorage + 72) || *(unsigned char *)(DerivedStorage + 732))
  {
    if (a4)
    {
      CFTypeRef v16 = *(OpaqueCMBlockBuffer **)(v13 + 40);
      if (v16) {
        CMBlockBufferAppendBufferReference(v16, a4, 0, 0, 0);
      }
      else {
        *(void *)(v13 + 40) = CFRetain(a4);
      }
    }
    if ((a5 & 3) != 0)
    {
      CFTypeRef APCustomURLResponseFromLocalCustomURLResponse = createAPCustomURLResponseFromLocalCustomURLResponse(v13, a3, (uint64_t)a1, a6);
      if (APCustomURLResponseFromLocalCustomURLResponse)
      {
        uint64_t v18 = APCustomURLResponseFromLocalCustomURLResponse;
        uint64_t v19 = CMBaseObjectGetDerivedStorage();
        uint64_t v20 = *(void *)(v13 + 16);
        uint64_t v21 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
        uint64_t v22 = (unsigned char *)CMBaseObjectGetDerivedStorage();
        if (!v22 || (uint64_t v23 = v22, *v22))
        {
          FigSignalErrorAt();
          if (v21) {
            goto LABEL_28;
          }
        }
        else
        {
          CFDictionaryGetValue(*(CFDictionaryRef *)(v13 + 24), (const void *)*MEMORY[0x1E4F1FA98]);
          char v24 = FigCFEqual();
          uint64_t v25 = *(void **)(v19 + 648);
          if (v25 == (void *)v13)
          {
            uint64_t v26 = (void *)(v19 + 648);
          }
          else
          {
            do
            {
              uint64_t v26 = v25;
              uint64_t v25 = (void *)*v25;
            }
            while (v25 != (void *)v13);
          }
          *uint64_t v26 = *(void *)v13;
          playerairplay_freeCustomURLRequestListEntry((void *)v13);
          if (a1) {
            CFRetain(a1);
          }
          if (v21) {
            CFRetain(v21);
          }
          CFRetain(v18);
          int v27 = *((void *)v23 + 13);
          block[0] = MEMORY[0x1E4F143A8];
          block[1] = 3221225472;
          block[2] = __playerairplay_customURLResponseHandlerCommon_block_invoke;
          block[3] = &__block_descriptor_73_e5_v8__0l;
          block[4] = v19;
          void block[5] = v21;
          char v30 = v24;
          void block[6] = v18;
          void block[7] = v20;
          void block[8] = a1;
          dispatch_async(v27, block);
          if (v21) {
LABEL_28:
          }
            CFRelease(v21);
        }
        CFRelease(v18);
      }
    }
  }
  return FigReadWriteLockUnlockForRead();
}

uint64_t airplayCryptor_invalidate()
{
  return 0;
}

uint64_t airplayCryptor_finalize()
{
  CMBaseObjectGetDerivedStorage();
  airplayCryptor_invalidate_guts();

  return FigSimpleMutexDestroy();
}

__CFString *airplayCryptor_copyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = CFGetAllocator(a1);
  int Mutable = CFStringCreateMutable(v3, 0);
  CFIndex v5 = CFGetRetainCount(a1);
  if (*DerivedStorage) {
    uint64_t v6 = " (invalidated)";
  }
  else {
    uint64_t v6 = "";
  }
  CFAllocatorRef v7 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, @"<AirPlayCryptor %p retainCount: %ld%s allocator: %p, ", a1, v5, v6, v7);
  CFStringAppendFormat(Mutable, 0, @">");
  return Mutable;
}

uint64_t airplayCryptor_setProperty(uint64_t a1, const void *a2, const __CFBoolean *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2) {
    return 4294954516;
  }
  uint64_t v7 = DerivedStorage;
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 8));
  if (*(unsigned char *)v7)
  {
    uint64_t v8 = 4294954511;
  }
  else if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FE18]))
  {
    Boolean Value = CFBooleanGetValue(a3);
    uint64_t v8 = 0;
    *(unsigned char *)(v7 + 48) = Value;
  }
  else if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FDD0]))
  {
    uint64_t v8 = airplayCryptor_setPackagedAndRawPersistentKey(a1, a3);
  }
  else
  {
    uint64_t v8 = 4294954512;
  }
  MEMORY[0x19970E930](*(void *)(v7 + 8));
  return v8;
}

void airplayCryptor_invalidate_guts()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 8));
  *(unsigned char *)uint64_t DerivedStorage = 1;
  objc_destroyWeak((id *)(DerivedStorage + 16));
  *(void *)(DerivedStorage + 16) = 0;
  dispatch_source_t v1 = *(const void **)(DerivedStorage + 24);
  if (v1)
  {
    CFRelease(v1);
    *(void *)(DerivedStorage + 24) = 0;
  }
  uint64_t v2 = *(const void **)(DerivedStorage + 56);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(DerivedStorage + 56) = 0;
  }
  CFAllocatorRef v3 = *(const void **)(DerivedStorage + 64);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(DerivedStorage + 64) = 0;
  }
  uint64_t v4 = *(const void **)(DerivedStorage + 72);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(DerivedStorage + 72) = 0;
  }
  CFIndex v5 = *(const void **)(DerivedStorage + 80);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(DerivedStorage + 80) = 0;
  }
  uint64_t v6 = *(const void **)(DerivedStorage + 88);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(DerivedStorage + 88) = 0;
  }
  uint64_t v7 = *(const void **)(DerivedStorage + 96);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(DerivedStorage + 96) = 0;
  }
  uint64_t v8 = *(const void **)(DerivedStorage + 104);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(DerivedStorage + 104) = 0;
  }

  JUMPOUT(0x19970E930);
}

uint64_t airplayCryptor_setPackagedAndRawPersistentKey(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2) {
    return 4294954516;
  }
  uint64_t v4 = DerivedStorage;
  CFIndex v5 = *(const void **)(DerivedStorage + 64);
  *(void *)(DerivedStorage + 64) = a2;
  CFRetain(a2);
  if (v5) {
    CFRelease(v5);
  }
  CFDictionaryRef v6 = (const __CFDictionary *)CFPropertyListCreateWithData((CFAllocatorRef)*MEMORY[0x1E4F1CF80], *(CFDataRef *)(v4 + 64), 0, 0, 0);
  if (v6)
  {
    CFDictionaryRef v8 = v6;
    CFTypeID v9 = CFGetTypeID(v6);
    if (v9 == CFDictionaryGetTypeID()
      && (Boolean Value = CFDictionaryGetValue(v8, (const void *)*MEMORY[0x1E4F21920])) != 0
      && (v12 = Value, CFTypeID v13 = CFGetTypeID(Value), v13 == CFDataGetTypeID()))
    {
      int v14 = *(const void **)(v4 + 56);
      *(void *)(v4 + 56) = v12;
      CFRetain(v12);
      if (v14) {
        CFRelease(v14);
      }
      uint64_t v11 = 0;
      *(unsigned char *)(v4 + 48) = 1;
    }
    else
    {
      uint64_t v11 = FigSignalErrorAt();
    }
    CFRelease(v8);
    return v11;
  }

  return FigSignalErrorAt();
}

uint64_t airplayCryptor_CreateKeyRequest(uint64_t a1, const __CFDictionary *a2, const __CFAllocator *a3, uint64_t *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2 && a4)
  {
    uint64_t v8 = DerivedStorage;
    *a4 = 0;
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 8));
    if (*(unsigned char *)v8)
    {
      int Mutable = 0;
      uint64_t v10 = 0;
      CFTypeRef v18 = 0;
    }
    else
    {
      int Mutable = CFDictionaryCreateMutable(a3, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (Mutable)
      {
        uint64_t v10 = (const void *)MEMORY[0x19970C720](v8 + 16);
        if (v10)
        {
          CMTimeValue value = (void *)CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E4F218F0]);
          if (value)
          {
            CFURLRef v68 = (void *)CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E4F218F8]);
            if (v68)
            {
              uint64_t v11 = (const void *)*MEMORY[0x1E4F21900];
              unint64_t v12 = (unint64_t)CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E4F21900]);
              if (!v12) {
                unint64_t v12 = (unint64_t)CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E4F1FAB0]);
              }
              CFTypeID v13 = (const void *)*MEMORY[0x1E4F218E8];
              int v14 = CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E4F218E8]);
              if (v14)
              {
                CFTypeRef v15 = v14;
                if (v12) {
                  CFDictionarySetValue(Mutable, v11, (const void *)v12);
                }
              }
              else
              {
                unint64_t v16 = (unint64_t)CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E4F21910]);
                if (!(v12 | v16))
                {
                  CFTypeRef v18 = 0;
                  uint64_t updated = 4294954516;
LABEL_111:
                  MEMORY[0x19970E930](*(void *)(v8 + 8));
                  if (!Mutable) {
                    goto LABEL_94;
                  }
                  goto LABEL_93;
                }
                CFTypeRef v15 = (const void *)v16;
                if (v12) {
                  CFDictionarySetValue(Mutable, v11, (const void *)v12);
                }
                if (!v15) {
                  goto LABEL_18;
                }
              }
              CFDictionarySetValue(Mutable, v13, v15);
LABEL_18:
              uint64_t v17 = *(const void **)(v8 + 24);
              if (v17)
              {
                CFTypeRef v18 = CFRetain(v17);
                if (v18) {
                  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F218E0], v18);
                }
              }
              else
              {
                CFTypeRef v18 = 0;
              }
              uint64_t v19 = CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E4F21938]);
              if (!v19 || (CFTypeID v20 = CFGetTypeID(v19), v20 == CFDataGetTypeID()))
              {
                CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E4F21920]);
                uint64_t v66 = CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E4F21940]);
                CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E4F21908]);
                int v21 = *(unsigned __int8 *)(v8 + 32);
                MEMORY[0x19970E930](*(void *)(v8 + 8));
                uint64_t v22 = CMBaseObjectGetDerivedStorage();
                uint64_t v71 = 0;
                uint64_t v72 = 0;
                FigReadWriteLockLockForRead();
                CFStringRef v67 = a4;
                if (*(unsigned char *)(v22 + 72))
                {
                  uint64_t v23 = 0;
                }
                else
                {
                  uint64_t v23 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
                  char v24 = (unsigned char *)CMBaseObjectGetDerivedStorage();
                  if (v24 && !*v24)
                  {
                    int v25 = pap_AirPlayState(v23);
                    uint64_t updated = 0;
                    if (!v25 || v25 == 10) {
                      goto LABEL_29;
                    }
                    dispatch_semaphore_t v27 = dispatch_semaphore_create(0);
                    if (v27)
                    {
                      int v28 = v27;
                      CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
                      uint64_t v29 = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 32);
                      object = v28;
                      if (!v29)
                      {
                        CFTypeRef v63 = 0;
                        MutableBytePtr = 0;
                        CFMutableDictionaryRef v37 = 0;
                        dispatch_time_t v36 = 0;
                        uint64_t updated = 4294954510;
                        goto LABEL_80;
                      }
                      char v30 = v29;
                      CFDataSetLength(v29, 32);
                      MutableBytePtr = CFDataGetMutableBytePtr(v30);
                      CFTypeRef cf = v30;
                      if (!MutableBytePtr)
                      {
                        dispatch_time_t v36 = 0;
                        CFMutableDictionaryRef v37 = 0;
                        CFTypeRef v63 = 0;
                        uint64_t updated = 4294954510;
                        goto LABEL_79;
                      }
                      int v59 = v21;
                      int Int64IfPresent = FigCFDictionaryGetInt64IfPresent();
                      if (!(Int64IfPresent | FigCFDictionaryGetInt64IfPresent())) {
                        goto LABEL_49;
                      }
                      if (*(void *)(CMBaseObjectGetDerivedStorage() + 880))
                      {
                        uint64_t v33 = (void *)(CMBaseObjectGetDerivedStorage() + 656);
                        while (1)
                        {
                          uint64_t v33 = (void *)*v33;
                          if (!v33) {
                            break;
                          }
                          if (v33[1] == v71)
                          {
                            APCustomURLResponseFromContentKeyResponse = createAPCustomURLResponseFromContentKeyResponse((uint64_t)v33, 0, 0);
                            goto LABEL_43;
                          }
                        }
LABEL_49:
                        dispatch_time_t v36 = 0;
                        CFMutableDictionaryRef v37 = 0;
                        MutableBytePtr = 0;
                        CFTypeRef v63 = 0;
                        uint64_t updated = 4294954516;
LABEL_78:
                        int v21 = v59;
LABEL_79:
                        CFRelease(cf);
LABEL_80:
                        dispatch_release(object);
                        FigReadWriteLockUnlockForRead();
                        if (v63) {
                          CFRelease(v63);
                        }
                        if (v37) {
                          CFRelease(v37);
                        }
                        if (v36) {
                          CFRelease(v36);
                        }
                        if (MutableBytePtr) {
                          CFRelease(MutableBytePtr);
                        }
                        goto LABEL_88;
                      }
                      unsigned int v35 = (void *)(CMBaseObjectGetDerivedStorage() + 648);
                      do
                      {
                        unsigned int v35 = (void *)*v35;
                        if (!v35) {
                          goto LABEL_49;
                        }
                      }
                      while (v35[1] != v72);
                      APCustomURLResponseFromContentKeyResponse = (void *)createAPCustomURLResponseFromLocalCustomURLResponse((uint64_t)v35, 0, (uint64_t)v10, 0);
LABEL_43:
                      dispatch_time_t v36 = APCustomURLResponseFromContentKeyResponse;
                      if (APCustomURLResponseFromContentKeyResponse)
                      {
                        uint64_t v58 = MutableBytePtr;
                        CFMutableDictionaryRef v37 = CFDictionaryCreateMutable(allocator, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                        if (v37)
                        {
                          uint64_t v57 = v36;
                          __int16 v38 = itemairplay_copyiTunesStoreContentRentalID();
                          CFDictionaryRef v39 = (const __CFDictionary *)itemairplay_copyiTunesStoreContentInfo();
                          CFDictionaryRef theDict = v37;
                          if (v39)
                          {
                            CFDictionaryRef v40 = v39;
                            uint64_t v41 = CFDictionaryGetValue(v39, @"assetOption_iTunesStoreContentDSID");
                            CFStringRef v42 = v41;
                            if (v41) {
                              CFRetain(v41);
                            }
                            CFRelease(v40);
                          }
                          else
                          {
                            CFStringRef v42 = 0;
                          }
                          uint64_t v73 = 0;
                          CFMutableDictionaryRef v43 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                          if (v43)
                          {
                            int v44 = v43;
                            CFMutableDictionaryRef v45 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                            if (v45)
                            {
                              CFDictionaryRef v46 = v45;
                              FigCFDictionarySetInt32();
                              if (v38) {
                                CFDictionarySetValue(v44, @"lK1", v38);
                              }
                              if (v42) {
                                CFDictionarySetValue(v44, @"DhpWkh3rnR", v42);
                              }
                              CFDictionarySetValue(v44, @"Y7bdIsnh7", value);
                              if (nS1Q9ljw9esy9((uint64_t)v44, (uint64_t)v46))
                              {
                                int v61 = 0;
                              }
                              else
                              {
                                FigCFDictionaryGetInt64IfPresent();
                                int v61 = (int)v73;
                                uint64_t v47 = CFDictionaryGetValue(v46, @"xNJu5eepP");
                                if (v47)
                                {
                                  CFTypeRef v48 = CFRetain(v47);
                                  if (v48)
                                  {
                                    CFTypeRef v63 = v48;
                                    uint64_t updated = 0;
                                    goto LABEL_62;
                                  }
                                }
                              }
                              uint64_t updated = FigSignalErrorAt();
                              CFTypeRef v63 = 0;
LABEL_62:
                              CFRelease(v44);
                              CFRelease(v46);
                              if (!v38)
                              {
LABEL_64:
                                CFMutableDictionaryRef v37 = theDict;
                                if (v42) {
                                  CFRelease(v42);
                                }
                                if (updated)
                                {
                                  MutableBytePtr = 0;
                                  int v21 = v59;
                                  dispatch_time_t v36 = v57;
                                  goto LABEL_79;
                                }
                                uint64_t v49 = (const void *)*MEMORY[0x1E4F1CFD0];
                                CFDictionaryAddValue(theDict, @"CSKRO_RemoteContext", v63);
                                FigCFDictionarySetValueFromKeyInDict();
                                dispatch_time_t v36 = v57;
                                if (v66 == v49)
                                {
                                  CFDictionaryAddValue(theDict, @"StreamingContentKeyRequiresiTunesProvisioningKey", v49);
                                  CFDictionaryAddValue(theDict, @"StreamingContentKeyIsForAirPlayKey", v49);
                                }
                                uint64_t v50 = CFDictionaryCreateMutable(allocator, 5, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                                MutableBytePtr = (UInt8 *)v50;
                                if (!v50)
                                {
                                  uint64_t updated = 4294954510;
                                  int v21 = v59;
                                  CFMutableDictionaryRef v37 = theDict;
                                  goto LABEL_79;
                                }
                                CFDictionaryAddValue(v50, (const void *)*MEMORY[0x1E4F20A28], v57);
                                CFDictionaryAddValue((CFMutableDictionaryRef)MutableBytePtr, (const void *)*MEMORY[0x1E4F20900], value);
                                CFDictionaryAddValue((CFMutableDictionaryRef)MutableBytePtr, (const void *)*MEMORY[0x1E4F20908], v68);
                                CFDictionaryAddValue((CFMutableDictionaryRef)MutableBytePtr, (const void *)*MEMORY[0x1E4F209D8], theDict);
                                *((void *)v58 + 1) = object;
                                dispatch_retain(object);
                                *(void *)uint64_t v58 = v23;
                                if (v23)
                                {
                                  CFRetain(v23);
                                  CFRetain(cf);
                                  CFTypeRef v51 = CFRetain(v23);
                                  pap_PlaybackSessionPerformRemoteAction(v51, v23, 1, object, (const void *)*MEMORY[0x1E4F207E0], MutableBytePtr, (uint64_t)pap_playbackSessionRequestForStreamingKeyCompletion, cf);
                                  if (v51) {
                                    CFRelease(v51);
                                  }
                                }
                                else
                                {
                                  CFRetain(cf);
                                }
                                dispatch_time_t v52 = dispatch_time(0, 8000000000);
                                if (dispatch_semaphore_wait(object, v52)) {
                                  goto LABEL_75;
                                }
                                uint64_t updated = *((unsigned int *)v58 + 6);
                                CFDataRef v53 = (const __CFData *)*((void *)v58 + 2);
                                CFMutableDictionaryRef v37 = theDict;
                                if (updated || !v53) {
                                  goto LABEL_77;
                                }
                                uint64_t v73 = 0;
                                unsigned int v70 = 0;
                                BytePtr = CFDataGetBytePtr(v53);
                                int Length = CFDataGetLength(v53);
                                LODWORD(BytePtr) = f5zGmdURga6BZ(v61, (uint64_t)BytePtr, Length, (uint64_t)&v73, (uint64_t)&v70);
                                CFRelease(v53);
                                if (BytePtr)
                                {
LABEL_75:
                                  uint64_t updated = FigSignalErrorAt();
                                  CFDataRef v53 = 0;
                                }
                                else
                                {
                                  CFDataRef v53 = CFDataCreate(allocator, v73, v70);
                                  Ud5PNQt99i((uint64_t)v73);
                                  uint64_t updated = 0;
                                }
                                CFMutableDictionaryRef v37 = theDict;
LABEL_77:
                                uint64_t *v67 = (uint64_t)v53;
                                goto LABEL_78;
                              }
LABEL_63:
                              CFRelease(v38);
                              goto LABEL_64;
                            }
                            uint64_t updated = FigSignalErrorAt();
                            CFRelease(v44);
                          }
                          else
                          {
                            uint64_t updated = FigSignalErrorAt();
                          }
                          CFTypeRef v63 = 0;
                          int v61 = 0;
                          if (!v38) {
                            goto LABEL_64;
                          }
                          goto LABEL_63;
                        }
                      }
                      else
                      {
                        CFMutableDictionaryRef v37 = 0;
                      }
                      MutableBytePtr = 0;
                      CFTypeRef v63 = 0;
                      uint64_t updated = 4294954510;
                      goto LABEL_78;
                    }
                    uint64_t updated = 4294954510;
LABEL_29:
                    FigReadWriteLockUnlockForRead();
LABEL_88:
                    if (v23) {
                      CFRelease(v23);
                    }
                    if (!updated && v21) {
                      uint64_t updated = FigAirPlaySecureStopRouterUpdateRecord((uint64_t)v18, (uint64_t)value, (uint64_t)v68, *v67);
                    }
LABEL_93:
                    CFRelease(Mutable);
LABEL_94:
                    if (v10) {
                      CFRelease(v10);
                    }
                    if (v18) {
                      CFRelease(v18);
                    }
                    return updated;
                  }
                }
                uint64_t updated = 4294954511;
                goto LABEL_29;
              }
              goto LABEL_110;
            }
          }
        }
        CFTypeRef v18 = 0;
      }
      else
      {
        uint64_t v10 = 0;
        CFTypeRef v18 = 0;
      }
    }
LABEL_110:
    uint64_t updated = FigSignalErrorAt();
    goto LABEL_111;
  }

  return FigSignalErrorAt();
}

uint64_t airplayCryptor_SetKeyRequestResponse(uint64_t a1, const void *a2, const __CFDictionary *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    CFDictionaryRef v6 = (void *)DerivedStorage;
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 8));
    if (a3)
    {
      Boolean Value = CFDictionaryGetValue(a3, (const void *)*MEMORY[0x1E4F21950]);
      uint64_t v8 = (const void *)v6[9];
      v6[9] = Value;
      if (Value) {
        CFRetain(Value);
      }
      if (v8) {
        CFRelease(v8);
      }
    }
    CFTypeID v9 = (const void *)v6[7];
    void v6[7] = a2;
    CFRetain(a2);
    if (v9) {
      CFRelease(v9);
    }
    MEMORY[0x19970E930](v6[1]);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t airplayCryptor_StartKeyExchangeForAirPlay(uint64_t a1, UInt8 **a2, CFDataRef *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v15 = 0;
  *(_OWORD *)UInt8 bytes = 0u;
  *(_OWORD *)size_t length = 0u;
  uint64_t v6 = 4294955146;
  if (a3)
  {
    if (a2)
    {
      uint64_t v7 = DerivedStorage;
      if (DerivedStorage)
      {
        MEMORY[0x19970E910](*(void *)(DerivedStorage + 8));
        CFDataRef v8 = *(const __CFData **)(v7 + 104);
        if (v8)
        {
          LODWORD(v15) = CFDataGetLength(v8);
          length[1] = (CFIndex)CFDataGetBytePtr(*(CFDataRef *)(v7 + 104));
        }
        hYNpsn7dXgySzQR((uint64_t)bytes);
        if (v9)
        {
          uint64_t v6 = v9;
        }
        else
        {
          CFDataRef v10 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], bytes[1], LODWORD(length[0]));
          if (v10)
          {
            uint64_t v6 = 0;
            uint64_t v11 = bytes[0];
            *(UInt8 **)(v7 + 40) = bytes[0];
            *a2 = v11;
            *a3 = v10;
          }
          else
          {
            uint64_t v6 = 4294955145;
          }
        }
        MEMORY[0x19970E930](*(void *)(v7 + 8));
      }
    }
  }
  return v6;
}

uint64_t airplayCryptor_CreateKeyResponseForAirPlay(uint64_t a1, uint64_t a2, const __CFData *a3, CFDataRef *a4)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  CFDataRef v8 = 0;
  *(_OWORD *)size_t length = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  uint64_t v9 = 4294955146;
  uint64_t v25 = 0;
  if (!a3) {
    goto LABEL_23;
  }
  if (!a2) {
    goto LABEL_23;
  }
  if (!a4) {
    goto LABEL_23;
  }
  CFDataRef v10 = DerivedStorage;
  if (!DerivedStorage) {
    goto LABEL_23;
  }
  if (!DerivedStorage[10] || !DerivedStorage[11] || !DerivedStorage[12])
  {
    uint64_t v9 = FigSignalErrorAt();
    CFDataRef v8 = 0;
    goto LABEL_23;
  }
  MEMORY[0x19970E910](DerivedStorage[1]);
  *((void *)&v27 + 1) = v10[5];
  *(void *)&long long v28 = CFDataGetBytePtr(a3);
  if (!(void)v28 || (DWORD2(v28) = CFDataGetLength(a3)) == 0)
  {
    CFDataRef v8 = 0;
    uint64_t v9 = 4294955136;
    goto LABEL_22;
  }
  *(void *)&long long v29 = CFDataGetBytePtr((CFDataRef)v10[7]);
  DWORD2(v29) = CFDataGetLength((CFDataRef)v10[7]);
  *((void *)&v26 + 1) = CFDataGetBytePtr((CFDataRef)v10[10]);
  LODWORD(v27) = CFDataGetLength((CFDataRef)v10[10]);
  CFArrayRef v11 = (const __CFArray *)v10[11];
  if (!v11 || (Count = CFArrayGetCount(v11), (int v13 = Count) == 0))
  {
    uint64_t v9 = FigSignalErrorAt();
    CFDataRef v8 = 0;
    goto LABEL_22;
  }
  uint64_t v14 = Count;
  CFDataRef v8 = (char *)malloc_type_calloc(Count, 4uLL, 0x100004052888210uLL);
  CFIndex v15 = 0;
  unint64_t v16 = v8;
  do
  {
    CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)v10[11], v15);
    if (!ValueAtIndex
      || (CFNumberRef v18 = ValueAtIndex, v19 = CFGetTypeID(ValueAtIndex), v19 != CFNumberGetTypeID())
      || !CFNumberGetValue(v18, kCFNumberSInt32Type, v16))
    {
      uint64_t v22 = FigSignalErrorAt();
LABEL_25:
      uint64_t v9 = v22;
      goto LABEL_22;
    }
    ++v15;
    v16 += 4;
  }
  while (v14 != v15);
  BytePtr = CFDataGetBytePtr((CFDataRef)v10[12]);
  int v21 = CFDataGetLength((CFDataRef)v10[12]);
  uint64_t v22 = V2qUlL4PZ5VKVXDsUHg5z((uint64_t)BytePtr, v21, (uint64_t)v8, v13, (uint64_t)&v25);
  if (v22) {
    goto LABEL_25;
  }
  *(void *)&long long v26 = v25;
  tgrNklBQEZq9N92((uint64_t)&v26);
  if (v22) {
    goto LABEL_25;
  }
  CFDataRef v23 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const UInt8 *)length[0], LODWORD(length[1]));
  if (v23)
  {
    uint64_t v9 = 0;
    *a4 = v23;
  }
  else
  {
    uint64_t v9 = 4294955145;
  }
LABEL_22:
  MEMORY[0x19970E930](v10[1]);
LABEL_23:
  free(v8);
  return v9;
}

CFMutableDictionaryRef createAPCustomURLResponseFromContentKeyResponse(uint64_t a1, uint64_t a2, __CFError *a3)
{
  CFTypeRef v17 = 0;
  CFTypeRef v5 = FigCFHTTPCreateURLString(*(const __CFURL **)(a1 + 24));
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v5;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable) {
    goto LABEL_19;
  }
  if (a3) {
    CFErrorGetCode(a3);
  }
  FigCFDictionarySetInt64();
  FigCFDictionarySetValue();
  FigCFDictionarySetCFIndex();
  if (!a2) {
    goto LABEL_19;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v9 = DerivedStorage;
  if (*(unsigned char *)(DerivedStorage + 48))
  {
    uint64_t v10 = MEMORY[0x19970C720](DerivedStorage + 16);
    if (v10)
    {
      CFArrayRef v11 = (const void *)v10;
      itemairplay_StartKeyExchangeAndCreateKeyResponseForAirPlay(v10, Mutable, &v17);
      CFTypeRef v12 = v17;
      if (v17)
      {
        FigCFDictionarySetValue();
        goto LABEL_11;
      }
      FigSignalErrorAt();
      CFRelease(v6);
LABEL_20:
      CFRelease(v11);
      return Mutable;
    }
    FigSignalErrorAt();
LABEL_19:
    CFArrayRef v11 = v6;
    goto LABEL_20;
  }
  FigCFDictionarySetValue();
  CFTypeRef v12 = 0;
  CFArrayRef v11 = 0;
LABEL_11:
  FigCFDictionarySetValue();
  if (*(void *)(v9 + 72))
  {
    double v13 = MEMORY[0x199707BD0]();
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    memset(&v16, 0, sizeof(v16));
    CMTimeMakeWithSeconds(&v16, v13 - Current, 1000);
    FigCFDictionarySetCMTime();
  }
  CFRelease(v6);
  if (v12) {
    CFRelease(v12);
  }
  if (v11) {
    goto LABEL_20;
  }
  return Mutable;
}

CFTypeRef createAPCustomURLResponseFromLocalCustomURLResponse(uint64_t a1, uint64_t a2, uint64_t a3, __CFError *a4)
{
  long long v26 = 0;
  CFTypeRef cf = 0;
  CFIndex Code = 0;
  CFTypeRef v22 = 0;
  CFTypeRef v23 = 0;
  CFTypeRef v20 = 0;
  CMBlockBufferRef blockBufferOut = 0;
  CFTypeRef v19 = 0;
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable && !FigCustomURLRequestInfoCopyURL())
  {
    CFTypeRef v10 = FigCFHTTPCreateURLString((const __CFURL *)cf);
    if (!v10) {
      goto LABEL_22;
    }
    if (a2)
    {
      FigCustomURLResponseInfoCopyHTTPHeaders();
      FigCustomURLResponseInfoCopyContentRenewalDate();
      int v11 = FigCustomURLResponseInfoCopyUniversalTypeIdentifier();
      if (v11 != -17360 && v11) {
        goto LABEL_19;
      }
      if (!a4)
      {
        FigCustomURLResponseInfoGetHTTPStatusCode();
        goto LABEL_11;
      }
    }
    else if (!a4)
    {
      goto LABEL_11;
    }
    CFIndex Code = CFErrorGetCode(a4);
LABEL_11:
    CFTypeRef v12 = *(OpaqueCMBlockBuffer **)(a1 + 40);
    if (v12
      && (CMBlockBufferCreateContiguous(v8, v12, v8, 0, 0, 0, 0, &blockBufferOut)
       || FigCreateCFDataWithBlockBufferNoCopy()))
    {
      goto LABEL_20;
    }
    FigCFDictionarySetInt64();
    FigCFDictionarySetValue();
    FigCFDictionarySetCFIndex();
    if (!FigCFEqual()
      || (uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage(),
          airplayCryptor_setPackagedAndRawPersistentKey(*(void *)(DerivedStorage + 840), v26),
          itemairplay_StartKeyExchangeAndCreateKeyResponseForAirPlay(a3, Mutable, &v19),
          v19))
    {
      FigCFDictionarySetValue();
      FigCFDictionarySetValue();
      FigCFDictionarySetValue();
      if (v22)
      {
        double v14 = MEMORY[0x199707BD0]();
        CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
        memset(&v18, 0, sizeof(v18));
        CMTimeMakeWithSeconds(&v18, v14 - Current, 1000);
        FigCFDictionarySetCMTime();
      }
      CMTime v16 = 0;
      goto LABEL_21;
    }
LABEL_19:
    FigSignalErrorAt();
LABEL_20:
    CMTime v16 = Mutable;
    CFMutableDictionaryRef Mutable = 0;
LABEL_21:
    CFRelease(v10);
    CFTypeRef v10 = Mutable;
    CFMutableDictionaryRef Mutable = v16;
    goto LABEL_22;
  }
  CFTypeRef v10 = 0;
LABEL_22:
  if (cf) {
    CFRelease(cf);
  }
  if (v23) {
    CFRelease(v23);
  }
  if (v22) {
    CFRelease(v22);
  }
  if (v26) {
    CFRelease(v26);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  if (v20) {
    CFRelease(v20);
  }
  if (v19) {
    CFRelease(v19);
  }
  return v10;
}

void pap_PlaybackSessionPerformRemoteAction(const void *a1, const void *a2, int a3, NSObject *a4, const void *a5, const void *a6, uint64_t a7, const void *a8)
{
  if (a1)
  {
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 3221225472;
    v8[2] = __pap_PlaybackSessionPerformRemoteAction_block_invoke;
    v8[3] = &__block_descriptor_80_e5_v8__0l;
    v8[4] = a1;
    v8[5] = a2;
    v8[6] = a6;
    void v8[7] = a5;
    v8[8] = a7;
    v8[9] = a8;
    pap_DispatchHelper(a1, a2, (uint64_t)v8, a3, a4, a5, a6, a8);
  }
}

void pap_playbackSessionRequestForStreamingKeyCompletion(int a1, const void *a2, CFMutableDataRef theData)
{
  MutableBytePtr = CFDataGetMutableBytePtr(theData);
  if (MutableBytePtr)
  {
    uint64_t v7 = MutableBytePtr;
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (a2) {
      CFRetain(a2);
    }
    uint64_t v9 = *(NSObject **)(DerivedStorage + 104);
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 3221225472;
    v10[2] = __pap_playbackSessionRequestForStreamingKeyCompletion_block_invoke;
    v10[3] = &__block_descriptor_60_e5_v8__0l;
    int v11 = a1;
    v10[4] = a2;
    void v10[5] = v7;
    v10[6] = theData;
    dispatch_async(v9, v10);
  }
}

uint64_t itemairplay_StartKeyExchangeAndCreateKeyResponseForAirPlay(uint64_t a1, const void *a2, CFTypeRef *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMTimeValue value = 0;
  dispatch_time_t v36 = 0;
  CFTypeRef cf = 0;
  FigReadWriteLockLockForRead();
  if (*(unsigned char *)(DerivedStorage + 72))
  {
    uint64_t v6 = 0;
    goto LABEL_46;
  }
  if (!a2)
  {
    uint64_t v6 = 0;
    uint64_t v11 = 4294954516;
    goto LABEL_8;
  }
  uint64_t v6 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  uint64_t v7 = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (!v7 || *v7 || (CFAllocatorRef v8 = (CFDataRef *)CMBaseObjectGetDerivedStorage(), *(unsigned char *)v8))
  {
LABEL_46:
    uint64_t v11 = 4294954511;
LABEL_8:
    FigReadWriteLockUnlockForRead();
    CFTypeRef v12 = 0;
    double v13 = 0;
    goto LABEL_30;
  }
  uint64_t v9 = v8;
  int v10 = pap_AirPlayState(v6);
  uint64_t v11 = 0;
  if (!v10 || v10 == 10) {
    goto LABEL_8;
  }
  object = dispatch_semaphore_create(0);
  if (!object)
  {
    uint64_t v11 = 4294954510;
    goto LABEL_8;
  }
  CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 32);
  if (Mutable)
  {
    CMTime v16 = Mutable;
    CFDataSetLength(Mutable, 32);
    MutableBytePtr = CFDataGetMutableBytePtr(v16);
    if (MutableBytePtr)
    {
      CMTime v18 = MutableBytePtr;
      CFTypeRef v12 = CFDictionaryCreateMutable(v14, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (v12)
      {
        uint64_t started = airplayCryptor_StartKeyExchangeForAirPlay(*(void *)(DerivedStorage + 840), &v36, (CFDataRef *)&value);
        if (started)
        {
          uint64_t v11 = started;
          FigSignalErrorAt();
          CFDictionaryRef v21 = 0;
          double v13 = 0;
          goto LABEL_17;
        }
        char v32 = a3;
        CFDictionaryAddValue(v12, @"CSKRO_RemoteContext", value);
        FigCFDictionarySetInt64();
        double v13 = CFDictionaryCreateMutable(v14, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        if (v13)
        {
          CFDictionaryRef v20 = (const __CFDictionary *)CFPropertyListCreateWithData(v14, v9[8], 0, 0, 0);
          CFDictionaryRef v21 = v20;
          if (!v20) {
            goto LABEL_16;
          }
          CFTypeID v23 = CFGetTypeID(v20);
          if (v23 != CFDictionaryGetTypeID()) {
            goto LABEL_16;
          }
          char v24 = CFDictionaryGetValue(v21, (const void *)*MEMORY[0x1E4F218F0]);
          if (!v24) {
            goto LABEL_16;
          }
          uint64_t v25 = v24;
          v9[12] = (CFDataRef)CFRetain(v24);
          CFDataRef v26 = (const __CFData *)CFDictionaryGetValue(v21, (const void *)*MEMORY[0x1E4F21928]);
          v9[11] = v26;
          if (!v26) {
            goto LABEL_16;
          }
          CFRetain(v26);
          CFDictionaryAddValue(v13, (const void *)*MEMORY[0x1E4F20A28], a2);
          CFDictionaryAddValue(v13, (const void *)*MEMORY[0x1E4F209D8], v12);
          CFDictionaryAddValue(v13, (const void *)*MEMORY[0x1E4F20900], v25);
          CFDictionaryAddValue(v13, (const void *)*MEMORY[0x1E4F20988], (const void *)*MEMORY[0x1E4F1CFD0]);
          CFTypeRef v22 = object;
          *((void *)v18 + 1) = object;
          dispatch_retain(object);
          *(void *)CMTime v18 = v6;
          if (v6)
          {
            CFRetain(v6);
            CFRetain(v16);
            CFTypeRef v27 = CFRetain(v6);
            pap_PlaybackSessionPerformRemoteAction(v27, v6, 1, object, (const void *)*MEMORY[0x1E4F207E0], v13, (uint64_t)pap_playbackSessionRequestForStreamingKeyCompletion, v16);
            if (v27) {
              CFRelease(v27);
            }
          }
          else
          {
            CFRetain(v16);
            pap_PlaybackSessionPerformRemoteAction(0, 0, 1, object, (const void *)*MEMORY[0x1E4F207E0], v13, (uint64_t)pap_playbackSessionRequestForStreamingKeyCompletion, v16);
          }
          dispatch_time_t v28 = dispatch_time(0, 8000000000);
          if (dispatch_semaphore_wait(object, v28))
          {
            uint64_t v11 = FigSignalErrorAt();
            goto LABEL_27;
          }
          uint64_t v11 = *((unsigned int *)v18 + 6);
          CFDataRef v30 = (const __CFData *)*((void *)v18 + 2);
          *((void *)v18 + 2) = 0;
          if (v11 || !v30) {
            goto LABEL_27;
          }
          int KeyResponseForAirPlay = airplayCryptor_CreateKeyResponseForAirPlay(*(void *)(DerivedStorage + 840), (uint64_t)v36, v30, (CFDataRef *)&cf);
          CFRelease(v30);
          if (!KeyResponseForAirPlay)
          {
            uint64_t v11 = 0;
            *char v32 = cf;
            CFTypeRef cf = 0;
          }
          else
          {
LABEL_16:
            uint64_t v11 = FigSignalErrorAt();
          }
LABEL_17:
          CFTypeRef v22 = object;
LABEL_27:
          CFRelease(v16);
          goto LABEL_28;
        }
        CFDictionaryRef v21 = 0;
      }
      else
      {
        CFDictionaryRef v21 = 0;
        double v13 = 0;
      }
    }
    else
    {
      CFDictionaryRef v21 = 0;
      double v13 = 0;
      CFTypeRef v12 = 0;
    }
    uint64_t v11 = 4294954510;
    goto LABEL_17;
  }
  CFTypeRef v12 = 0;
  double v13 = 0;
  CFDictionaryRef v21 = 0;
  uint64_t v11 = 4294954510;
  CFTypeRef v22 = object;
LABEL_28:
  dispatch_release(v22);
  FigReadWriteLockUnlockForRead();
  if (v21) {
    CFRelease(v21);
  }
LABEL_30:
  if (value) {
    CFRelease(value);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v12) {
    CFRelease(v12);
  }
  if (v13) {
    CFRelease(v13);
  }
  if (v6) {
    CFRelease(v6);
  }
  return v11;
}

void __pap_playbackSessionRequestForStreamingKeyCompletion_block_invoke(uint64_t a1)
{
  int valuePtr = 0;
  int v2 = *(_DWORD *)(a1 + 56);
  if (v2) {
    goto LABEL_2;
  }
  CFDictionaryRef v6 = *(const __CFDictionary **)(a1 + 32);
  if (!v6)
  {
    int v2 = -12860;
LABEL_2:
    int valuePtr = v2;
    goto LABEL_3;
  }
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v6, (const void *)*MEMORY[0x1E4F20948]);
  if (!Value
    || (CFNumberRef v8 = (const __CFNumber *)CFDictionaryGetValue(Value, (const void *)*MEMORY[0x1E4F20818])) == 0
    || (CFNumberGetValue(v8, kCFNumberIntType, &valuePtr), (int v2 = valuePtr) == 0))
  {
    uint64_t v9 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 32), (const void *)*MEMORY[0x1E4F20A98]);
    if (v9) {
      uint64_t v9 = CFRetain(v9);
    }
    *(void *)(*(void *)(a1 + 40) + 16) = v9;
    int v2 = valuePtr;
  }
LABEL_3:
  uint64_t v3 = *(void *)(a1 + 40);
  *(_DWORD *)(v3 + 24) = v2;
  uint64_t v4 = *(NSObject **)(v3 + 8);
  if (v4)
  {
    dispatch_semaphore_signal(v4);
    dispatch_release(*(dispatch_object_t *)(*(void *)(a1 + 40) + 8));
    uint64_t v3 = *(void *)(a1 + 40);
  }
  if (*(void *)v3) {
    CFRelease(*(CFTypeRef *)v3);
  }
  CFRelease(*(CFTypeRef *)(a1 + 48));
  CFTypeRef v5 = *(const void **)(a1 + 32);
  if (v5) {
    CFRelease(v5);
  }
}

void playerairplay_ContentKeyDataCallback(const void *a1, uint64_t a2, uint64_t a3, __CFError *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v9 = (void *)(CMBaseObjectGetDerivedStorage() + 656);
  while (1)
  {
    uint64_t v9 = (void *)*v9;
    if (!v9) {
      break;
    }
    if (v9[2] == a2)
    {
      CFMutableDictionaryRef APCustomURLResponseFromContentKeyResponse = createAPCustomURLResponseFromContentKeyResponse((uint64_t)v9, a3, a4);
      if (APCustomURLResponseFromContentKeyResponse)
      {
        CFMutableDictionaryRef v11 = APCustomURLResponseFromContentKeyResponse;
        CFTypeRef v12 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
        double v13 = (unsigned char *)CMBaseObjectGetDerivedStorage();
        if (!v13 || (CFAllocatorRef v14 = v13, *v13))
        {
          FigSignalErrorAt();
        }
        else
        {
          CFIndex v15 = *(void **)(DerivedStorage + 656);
          if (v15 == v9)
          {
            CMTime v16 = (void *)(DerivedStorage + 656);
          }
          else
          {
            do
            {
              CMTime v16 = v15;
              CFIndex v15 = (void *)*v15;
            }
            while (v15 != v9);
          }
          *CMTime v16 = *v9;
          if (a1) {
            CFRetain(a1);
          }
          if (v12) {
            CFRetain(v12);
          }
          CFRetain(v11);
          CFTypeRef v17 = *((void *)v14 + 13);
          block[0] = MEMORY[0x1E4F143A8];
          block[1] = 3221225472;
          block[2] = __playerairplay_ContentKeyDataCallback_block_invoke;
          block[3] = &__block_descriptor_72_e5_v8__0l;
          block[4] = DerivedStorage;
          void block[5] = v12;
          void block[6] = v11;
          void block[7] = v9;
          void block[8] = a1;
          dispatch_async(v17, block);
        }
        playerairplay_freeContentKeyRequestListEntry(v9);
        CFRelease(v11);
        if (v12) {
          CFRelease(v12);
        }
        return;
      }
      break;
    }
  }

  playerairplay_freeContentKeyRequestListEntry(v9);
}

void playerairplay_freeContentKeyRequestListEntry(void *a1)
{
  int v2 = (const void *)a1[3];
  if (v2) {
    CFRelease(v2);
  }

  free(a1);
}

void playerairplay_freeCustomURLRequestListEntry(void *a1)
{
  int v2 = (const void *)a1[3];
  if (v2)
  {
    CFRelease(v2);
    a1[3] = 0;
  }
  uint64_t v3 = (const void *)a1[4];
  if (v3)
  {
    CFRelease(v3);
    a1[4] = 0;
  }
  uint64_t v4 = (const void *)a1[5];
  if (v4) {
    CFRelease(v4);
  }

  free(a1);
}